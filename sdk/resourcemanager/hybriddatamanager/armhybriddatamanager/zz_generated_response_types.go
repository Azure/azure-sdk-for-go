//go:build go1.16
// +build go1.16

// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

package armhybriddatamanager

import (
	"context"
	armruntime "github.com/Azure/azure-sdk-for-go/sdk/azcore/arm/runtime"
	"net/http"
	"time"
)

// DataManagersClientCreatePollerResponse contains the response from method DataManagersClient.Create.
type DataManagersClientCreatePollerResponse struct {
	// Poller contains an initialized poller.
	Poller *DataManagersClientCreatePoller

	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// PollUntilDone will poll the service endpoint until a terminal state is reached or an error is received.
// freq: the time to wait between intervals in absence of a Retry-After header. Allowed minimum is one second.
// A good starting value is 30 seconds. Note that some resources might benefit from a different value.
func (l DataManagersClientCreatePollerResponse) PollUntilDone(ctx context.Context, freq time.Duration) (DataManagersClientCreateResponse, error) {
	respType := DataManagersClientCreateResponse{}
	resp, err := l.Poller.pt.PollUntilDone(ctx, freq, &respType.DataManager)
	if err != nil {
		return respType, err
	}
	respType.RawResponse = resp
	return respType, nil
}

// Resume rehydrates a DataManagersClientCreatePollerResponse from the provided client and resume token.
func (l *DataManagersClientCreatePollerResponse) Resume(ctx context.Context, client *DataManagersClient, token string) error {
	pt, err := armruntime.NewPollerFromResumeToken("DataManagersClient.Create", token, client.pl)
	if err != nil {
		return err
	}
	poller := &DataManagersClientCreatePoller{
		pt: pt,
	}
	resp, err := poller.Poll(ctx)
	if err != nil {
		return err
	}
	l.Poller = poller
	l.RawResponse = resp
	return nil
}

// DataManagersClientCreateResponse contains the response from method DataManagersClient.Create.
type DataManagersClientCreateResponse struct {
	DataManagersClientCreateResult
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// DataManagersClientCreateResult contains the result from method DataManagersClient.Create.
type DataManagersClientCreateResult struct {
	DataManager
}

// DataManagersClientDeletePollerResponse contains the response from method DataManagersClient.Delete.
type DataManagersClientDeletePollerResponse struct {
	// Poller contains an initialized poller.
	Poller *DataManagersClientDeletePoller

	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// PollUntilDone will poll the service endpoint until a terminal state is reached or an error is received.
// freq: the time to wait between intervals in absence of a Retry-After header. Allowed minimum is one second.
// A good starting value is 30 seconds. Note that some resources might benefit from a different value.
func (l DataManagersClientDeletePollerResponse) PollUntilDone(ctx context.Context, freq time.Duration) (DataManagersClientDeleteResponse, error) {
	respType := DataManagersClientDeleteResponse{}
	resp, err := l.Poller.pt.PollUntilDone(ctx, freq, nil)
	if err != nil {
		return respType, err
	}
	respType.RawResponse = resp
	return respType, nil
}

// Resume rehydrates a DataManagersClientDeletePollerResponse from the provided client and resume token.
func (l *DataManagersClientDeletePollerResponse) Resume(ctx context.Context, client *DataManagersClient, token string) error {
	pt, err := armruntime.NewPollerFromResumeToken("DataManagersClient.Delete", token, client.pl)
	if err != nil {
		return err
	}
	poller := &DataManagersClientDeletePoller{
		pt: pt,
	}
	resp, err := poller.Poll(ctx)
	if err != nil {
		return err
	}
	l.Poller = poller
	l.RawResponse = resp
	return nil
}

// DataManagersClientDeleteResponse contains the response from method DataManagersClient.Delete.
type DataManagersClientDeleteResponse struct {
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// DataManagersClientGetResponse contains the response from method DataManagersClient.Get.
type DataManagersClientGetResponse struct {
	DataManagersClientGetResult
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// DataManagersClientGetResult contains the result from method DataManagersClient.Get.
type DataManagersClientGetResult struct {
	DataManager
}

// DataManagersClientListByResourceGroupResponse contains the response from method DataManagersClient.ListByResourceGroup.
type DataManagersClientListByResourceGroupResponse struct {
	DataManagersClientListByResourceGroupResult
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// DataManagersClientListByResourceGroupResult contains the result from method DataManagersClient.ListByResourceGroup.
type DataManagersClientListByResourceGroupResult struct {
	DataManagerList
}

// DataManagersClientListResponse contains the response from method DataManagersClient.List.
type DataManagersClientListResponse struct {
	DataManagersClientListResult
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// DataManagersClientListResult contains the result from method DataManagersClient.List.
type DataManagersClientListResult struct {
	DataManagerList
}

// DataManagersClientUpdatePollerResponse contains the response from method DataManagersClient.Update.
type DataManagersClientUpdatePollerResponse struct {
	// Poller contains an initialized poller.
	Poller *DataManagersClientUpdatePoller

	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// PollUntilDone will poll the service endpoint until a terminal state is reached or an error is received.
// freq: the time to wait between intervals in absence of a Retry-After header. Allowed minimum is one second.
// A good starting value is 30 seconds. Note that some resources might benefit from a different value.
func (l DataManagersClientUpdatePollerResponse) PollUntilDone(ctx context.Context, freq time.Duration) (DataManagersClientUpdateResponse, error) {
	respType := DataManagersClientUpdateResponse{}
	resp, err := l.Poller.pt.PollUntilDone(ctx, freq, &respType.DataManager)
	if err != nil {
		return respType, err
	}
	respType.RawResponse = resp
	return respType, nil
}

// Resume rehydrates a DataManagersClientUpdatePollerResponse from the provided client and resume token.
func (l *DataManagersClientUpdatePollerResponse) Resume(ctx context.Context, client *DataManagersClient, token string) error {
	pt, err := armruntime.NewPollerFromResumeToken("DataManagersClient.Update", token, client.pl)
	if err != nil {
		return err
	}
	poller := &DataManagersClientUpdatePoller{
		pt: pt,
	}
	resp, err := poller.Poll(ctx)
	if err != nil {
		return err
	}
	l.Poller = poller
	l.RawResponse = resp
	return nil
}

// DataManagersClientUpdateResponse contains the response from method DataManagersClient.Update.
type DataManagersClientUpdateResponse struct {
	DataManagersClientUpdateResult
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// DataManagersClientUpdateResult contains the result from method DataManagersClient.Update.
type DataManagersClientUpdateResult struct {
	DataManager
}

// DataServicesClientGetResponse contains the response from method DataServicesClient.Get.
type DataServicesClientGetResponse struct {
	DataServicesClientGetResult
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// DataServicesClientGetResult contains the result from method DataServicesClient.Get.
type DataServicesClientGetResult struct {
	DataService
}

// DataServicesClientListByDataManagerResponse contains the response from method DataServicesClient.ListByDataManager.
type DataServicesClientListByDataManagerResponse struct {
	DataServicesClientListByDataManagerResult
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// DataServicesClientListByDataManagerResult contains the result from method DataServicesClient.ListByDataManager.
type DataServicesClientListByDataManagerResult struct {
	DataServiceList
}

// DataStoreTypesClientGetResponse contains the response from method DataStoreTypesClient.Get.
type DataStoreTypesClientGetResponse struct {
	DataStoreTypesClientGetResult
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// DataStoreTypesClientGetResult contains the result from method DataStoreTypesClient.Get.
type DataStoreTypesClientGetResult struct {
	DataStoreType
}

// DataStoreTypesClientListByDataManagerResponse contains the response from method DataStoreTypesClient.ListByDataManager.
type DataStoreTypesClientListByDataManagerResponse struct {
	DataStoreTypesClientListByDataManagerResult
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// DataStoreTypesClientListByDataManagerResult contains the result from method DataStoreTypesClient.ListByDataManager.
type DataStoreTypesClientListByDataManagerResult struct {
	DataStoreTypeList
}

// DataStoresClientCreateOrUpdatePollerResponse contains the response from method DataStoresClient.CreateOrUpdate.
type DataStoresClientCreateOrUpdatePollerResponse struct {
	// Poller contains an initialized poller.
	Poller *DataStoresClientCreateOrUpdatePoller

	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// PollUntilDone will poll the service endpoint until a terminal state is reached or an error is received.
// freq: the time to wait between intervals in absence of a Retry-After header. Allowed minimum is one second.
// A good starting value is 30 seconds. Note that some resources might benefit from a different value.
func (l DataStoresClientCreateOrUpdatePollerResponse) PollUntilDone(ctx context.Context, freq time.Duration) (DataStoresClientCreateOrUpdateResponse, error) {
	respType := DataStoresClientCreateOrUpdateResponse{}
	resp, err := l.Poller.pt.PollUntilDone(ctx, freq, &respType.DataStore)
	if err != nil {
		return respType, err
	}
	respType.RawResponse = resp
	return respType, nil
}

// Resume rehydrates a DataStoresClientCreateOrUpdatePollerResponse from the provided client and resume token.
func (l *DataStoresClientCreateOrUpdatePollerResponse) Resume(ctx context.Context, client *DataStoresClient, token string) error {
	pt, err := armruntime.NewPollerFromResumeToken("DataStoresClient.CreateOrUpdate", token, client.pl)
	if err != nil {
		return err
	}
	poller := &DataStoresClientCreateOrUpdatePoller{
		pt: pt,
	}
	resp, err := poller.Poll(ctx)
	if err != nil {
		return err
	}
	l.Poller = poller
	l.RawResponse = resp
	return nil
}

// DataStoresClientCreateOrUpdateResponse contains the response from method DataStoresClient.CreateOrUpdate.
type DataStoresClientCreateOrUpdateResponse struct {
	DataStoresClientCreateOrUpdateResult
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// DataStoresClientCreateOrUpdateResult contains the result from method DataStoresClient.CreateOrUpdate.
type DataStoresClientCreateOrUpdateResult struct {
	DataStore
}

// DataStoresClientDeletePollerResponse contains the response from method DataStoresClient.Delete.
type DataStoresClientDeletePollerResponse struct {
	// Poller contains an initialized poller.
	Poller *DataStoresClientDeletePoller

	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// PollUntilDone will poll the service endpoint until a terminal state is reached or an error is received.
// freq: the time to wait between intervals in absence of a Retry-After header. Allowed minimum is one second.
// A good starting value is 30 seconds. Note that some resources might benefit from a different value.
func (l DataStoresClientDeletePollerResponse) PollUntilDone(ctx context.Context, freq time.Duration) (DataStoresClientDeleteResponse, error) {
	respType := DataStoresClientDeleteResponse{}
	resp, err := l.Poller.pt.PollUntilDone(ctx, freq, nil)
	if err != nil {
		return respType, err
	}
	respType.RawResponse = resp
	return respType, nil
}

// Resume rehydrates a DataStoresClientDeletePollerResponse from the provided client and resume token.
func (l *DataStoresClientDeletePollerResponse) Resume(ctx context.Context, client *DataStoresClient, token string) error {
	pt, err := armruntime.NewPollerFromResumeToken("DataStoresClient.Delete", token, client.pl)
	if err != nil {
		return err
	}
	poller := &DataStoresClientDeletePoller{
		pt: pt,
	}
	resp, err := poller.Poll(ctx)
	if err != nil {
		return err
	}
	l.Poller = poller
	l.RawResponse = resp
	return nil
}

// DataStoresClientDeleteResponse contains the response from method DataStoresClient.Delete.
type DataStoresClientDeleteResponse struct {
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// DataStoresClientGetResponse contains the response from method DataStoresClient.Get.
type DataStoresClientGetResponse struct {
	DataStoresClientGetResult
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// DataStoresClientGetResult contains the result from method DataStoresClient.Get.
type DataStoresClientGetResult struct {
	DataStore
}

// DataStoresClientListByDataManagerResponse contains the response from method DataStoresClient.ListByDataManager.
type DataStoresClientListByDataManagerResponse struct {
	DataStoresClientListByDataManagerResult
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// DataStoresClientListByDataManagerResult contains the result from method DataStoresClient.ListByDataManager.
type DataStoresClientListByDataManagerResult struct {
	DataStoreList
}

// JobDefinitionsClientCreateOrUpdatePollerResponse contains the response from method JobDefinitionsClient.CreateOrUpdate.
type JobDefinitionsClientCreateOrUpdatePollerResponse struct {
	// Poller contains an initialized poller.
	Poller *JobDefinitionsClientCreateOrUpdatePoller

	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// PollUntilDone will poll the service endpoint until a terminal state is reached or an error is received.
// freq: the time to wait between intervals in absence of a Retry-After header. Allowed minimum is one second.
// A good starting value is 30 seconds. Note that some resources might benefit from a different value.
func (l JobDefinitionsClientCreateOrUpdatePollerResponse) PollUntilDone(ctx context.Context, freq time.Duration) (JobDefinitionsClientCreateOrUpdateResponse, error) {
	respType := JobDefinitionsClientCreateOrUpdateResponse{}
	resp, err := l.Poller.pt.PollUntilDone(ctx, freq, &respType.JobDefinition)
	if err != nil {
		return respType, err
	}
	respType.RawResponse = resp
	return respType, nil
}

// Resume rehydrates a JobDefinitionsClientCreateOrUpdatePollerResponse from the provided client and resume token.
func (l *JobDefinitionsClientCreateOrUpdatePollerResponse) Resume(ctx context.Context, client *JobDefinitionsClient, token string) error {
	pt, err := armruntime.NewPollerFromResumeToken("JobDefinitionsClient.CreateOrUpdate", token, client.pl)
	if err != nil {
		return err
	}
	poller := &JobDefinitionsClientCreateOrUpdatePoller{
		pt: pt,
	}
	resp, err := poller.Poll(ctx)
	if err != nil {
		return err
	}
	l.Poller = poller
	l.RawResponse = resp
	return nil
}

// JobDefinitionsClientCreateOrUpdateResponse contains the response from method JobDefinitionsClient.CreateOrUpdate.
type JobDefinitionsClientCreateOrUpdateResponse struct {
	JobDefinitionsClientCreateOrUpdateResult
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// JobDefinitionsClientCreateOrUpdateResult contains the result from method JobDefinitionsClient.CreateOrUpdate.
type JobDefinitionsClientCreateOrUpdateResult struct {
	JobDefinition
}

// JobDefinitionsClientDeletePollerResponse contains the response from method JobDefinitionsClient.Delete.
type JobDefinitionsClientDeletePollerResponse struct {
	// Poller contains an initialized poller.
	Poller *JobDefinitionsClientDeletePoller

	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// PollUntilDone will poll the service endpoint until a terminal state is reached or an error is received.
// freq: the time to wait between intervals in absence of a Retry-After header. Allowed minimum is one second.
// A good starting value is 30 seconds. Note that some resources might benefit from a different value.
func (l JobDefinitionsClientDeletePollerResponse) PollUntilDone(ctx context.Context, freq time.Duration) (JobDefinitionsClientDeleteResponse, error) {
	respType := JobDefinitionsClientDeleteResponse{}
	resp, err := l.Poller.pt.PollUntilDone(ctx, freq, nil)
	if err != nil {
		return respType, err
	}
	respType.RawResponse = resp
	return respType, nil
}

// Resume rehydrates a JobDefinitionsClientDeletePollerResponse from the provided client and resume token.
func (l *JobDefinitionsClientDeletePollerResponse) Resume(ctx context.Context, client *JobDefinitionsClient, token string) error {
	pt, err := armruntime.NewPollerFromResumeToken("JobDefinitionsClient.Delete", token, client.pl)
	if err != nil {
		return err
	}
	poller := &JobDefinitionsClientDeletePoller{
		pt: pt,
	}
	resp, err := poller.Poll(ctx)
	if err != nil {
		return err
	}
	l.Poller = poller
	l.RawResponse = resp
	return nil
}

// JobDefinitionsClientDeleteResponse contains the response from method JobDefinitionsClient.Delete.
type JobDefinitionsClientDeleteResponse struct {
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// JobDefinitionsClientGetResponse contains the response from method JobDefinitionsClient.Get.
type JobDefinitionsClientGetResponse struct {
	JobDefinitionsClientGetResult
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// JobDefinitionsClientGetResult contains the result from method JobDefinitionsClient.Get.
type JobDefinitionsClientGetResult struct {
	JobDefinition
}

// JobDefinitionsClientListByDataManagerResponse contains the response from method JobDefinitionsClient.ListByDataManager.
type JobDefinitionsClientListByDataManagerResponse struct {
	JobDefinitionsClientListByDataManagerResult
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// JobDefinitionsClientListByDataManagerResult contains the result from method JobDefinitionsClient.ListByDataManager.
type JobDefinitionsClientListByDataManagerResult struct {
	JobDefinitionList
}

// JobDefinitionsClientListByDataServiceResponse contains the response from method JobDefinitionsClient.ListByDataService.
type JobDefinitionsClientListByDataServiceResponse struct {
	JobDefinitionsClientListByDataServiceResult
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// JobDefinitionsClientListByDataServiceResult contains the result from method JobDefinitionsClient.ListByDataService.
type JobDefinitionsClientListByDataServiceResult struct {
	JobDefinitionList
}

// JobDefinitionsClientRunPollerResponse contains the response from method JobDefinitionsClient.Run.
type JobDefinitionsClientRunPollerResponse struct {
	// Poller contains an initialized poller.
	Poller *JobDefinitionsClientRunPoller

	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// PollUntilDone will poll the service endpoint until a terminal state is reached or an error is received.
// freq: the time to wait between intervals in absence of a Retry-After header. Allowed minimum is one second.
// A good starting value is 30 seconds. Note that some resources might benefit from a different value.
func (l JobDefinitionsClientRunPollerResponse) PollUntilDone(ctx context.Context, freq time.Duration) (JobDefinitionsClientRunResponse, error) {
	respType := JobDefinitionsClientRunResponse{}
	resp, err := l.Poller.pt.PollUntilDone(ctx, freq, nil)
	if err != nil {
		return respType, err
	}
	respType.RawResponse = resp
	return respType, nil
}

// Resume rehydrates a JobDefinitionsClientRunPollerResponse from the provided client and resume token.
func (l *JobDefinitionsClientRunPollerResponse) Resume(ctx context.Context, client *JobDefinitionsClient, token string) error {
	pt, err := armruntime.NewPollerFromResumeToken("JobDefinitionsClient.Run", token, client.pl)
	if err != nil {
		return err
	}
	poller := &JobDefinitionsClientRunPoller{
		pt: pt,
	}
	resp, err := poller.Poll(ctx)
	if err != nil {
		return err
	}
	l.Poller = poller
	l.RawResponse = resp
	return nil
}

// JobDefinitionsClientRunResponse contains the response from method JobDefinitionsClient.Run.
type JobDefinitionsClientRunResponse struct {
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// JobsClientCancelPollerResponse contains the response from method JobsClient.Cancel.
type JobsClientCancelPollerResponse struct {
	// Poller contains an initialized poller.
	Poller *JobsClientCancelPoller

	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// PollUntilDone will poll the service endpoint until a terminal state is reached or an error is received.
// freq: the time to wait between intervals in absence of a Retry-After header. Allowed minimum is one second.
// A good starting value is 30 seconds. Note that some resources might benefit from a different value.
func (l JobsClientCancelPollerResponse) PollUntilDone(ctx context.Context, freq time.Duration) (JobsClientCancelResponse, error) {
	respType := JobsClientCancelResponse{}
	resp, err := l.Poller.pt.PollUntilDone(ctx, freq, nil)
	if err != nil {
		return respType, err
	}
	respType.RawResponse = resp
	return respType, nil
}

// Resume rehydrates a JobsClientCancelPollerResponse from the provided client and resume token.
func (l *JobsClientCancelPollerResponse) Resume(ctx context.Context, client *JobsClient, token string) error {
	pt, err := armruntime.NewPollerFromResumeToken("JobsClient.Cancel", token, client.pl)
	if err != nil {
		return err
	}
	poller := &JobsClientCancelPoller{
		pt: pt,
	}
	resp, err := poller.Poll(ctx)
	if err != nil {
		return err
	}
	l.Poller = poller
	l.RawResponse = resp
	return nil
}

// JobsClientCancelResponse contains the response from method JobsClient.Cancel.
type JobsClientCancelResponse struct {
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// JobsClientGetResponse contains the response from method JobsClient.Get.
type JobsClientGetResponse struct {
	JobsClientGetResult
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// JobsClientGetResult contains the result from method JobsClient.Get.
type JobsClientGetResult struct {
	Job
}

// JobsClientListByDataManagerResponse contains the response from method JobsClient.ListByDataManager.
type JobsClientListByDataManagerResponse struct {
	JobsClientListByDataManagerResult
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// JobsClientListByDataManagerResult contains the result from method JobsClient.ListByDataManager.
type JobsClientListByDataManagerResult struct {
	JobList
}

// JobsClientListByDataServiceResponse contains the response from method JobsClient.ListByDataService.
type JobsClientListByDataServiceResponse struct {
	JobsClientListByDataServiceResult
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// JobsClientListByDataServiceResult contains the result from method JobsClient.ListByDataService.
type JobsClientListByDataServiceResult struct {
	JobList
}

// JobsClientListByJobDefinitionResponse contains the response from method JobsClient.ListByJobDefinition.
type JobsClientListByJobDefinitionResponse struct {
	JobsClientListByJobDefinitionResult
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// JobsClientListByJobDefinitionResult contains the result from method JobsClient.ListByJobDefinition.
type JobsClientListByJobDefinitionResult struct {
	JobList
}

// JobsClientResumePollerResponse contains the response from method JobsClient.Resume.
type JobsClientResumePollerResponse struct {
	// Poller contains an initialized poller.
	Poller *JobsClientResumePoller

	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// PollUntilDone will poll the service endpoint until a terminal state is reached or an error is received.
// freq: the time to wait between intervals in absence of a Retry-After header. Allowed minimum is one second.
// A good starting value is 30 seconds. Note that some resources might benefit from a different value.
func (l JobsClientResumePollerResponse) PollUntilDone(ctx context.Context, freq time.Duration) (JobsClientResumeResponse, error) {
	respType := JobsClientResumeResponse{}
	resp, err := l.Poller.pt.PollUntilDone(ctx, freq, nil)
	if err != nil {
		return respType, err
	}
	respType.RawResponse = resp
	return respType, nil
}

// Resume rehydrates a JobsClientResumePollerResponse from the provided client and resume token.
func (l *JobsClientResumePollerResponse) Resume(ctx context.Context, client *JobsClient, token string) error {
	pt, err := armruntime.NewPollerFromResumeToken("JobsClient.Resume", token, client.pl)
	if err != nil {
		return err
	}
	poller := &JobsClientResumePoller{
		pt: pt,
	}
	resp, err := poller.Poll(ctx)
	if err != nil {
		return err
	}
	l.Poller = poller
	l.RawResponse = resp
	return nil
}

// JobsClientResumeResponse contains the response from method JobsClient.Resume.
type JobsClientResumeResponse struct {
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// OperationsClientListResponse contains the response from method OperationsClient.List.
type OperationsClientListResponse struct {
	OperationsClientListResult
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// OperationsClientListResult contains the result from method OperationsClient.List.
type OperationsClientListResult struct {
	AvailableProviderOperations
}

// PublicKeysClientGetResponse contains the response from method PublicKeysClient.Get.
type PublicKeysClientGetResponse struct {
	PublicKeysClientGetResult
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// PublicKeysClientGetResult contains the result from method PublicKeysClient.Get.
type PublicKeysClientGetResult struct {
	PublicKey
}

// PublicKeysClientListByDataManagerResponse contains the response from method PublicKeysClient.ListByDataManager.
type PublicKeysClientListByDataManagerResponse struct {
	PublicKeysClientListByDataManagerResult
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// PublicKeysClientListByDataManagerResult contains the result from method PublicKeysClient.ListByDataManager.
type PublicKeysClientListByDataManagerResult struct {
	PublicKeyList
}
