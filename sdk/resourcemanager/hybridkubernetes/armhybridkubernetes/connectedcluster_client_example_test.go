// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) Go Code Generator. DO NOT EDIT.

package armhybridkubernetes_test

import (
	"context"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/to"
	"github.com/Azure/azure-sdk-for-go/sdk/azidentity"
	"github.com/Azure/azure-sdk-for-go/sdk/resourcemanager/hybridkubernetes/armhybridkubernetes/v2"
	"log"
)

// Generated from example definition: 2025-12-01-preview/CreateClusterAgentless_KindAWSExample.json
func ExampleConnectedClusterClient_BeginCreateOrReplace_createClusterAgentlessKindAwsExample() {
	cred, err := azidentity.NewDefaultAzureCredential(nil)
	if err != nil {
		log.Fatalf("failed to obtain a credential: %v", err)
	}
	ctx := context.Background()
	clientFactory, err := armhybridkubernetes.NewClientFactory("1bfbb5d0-917e-4346-9026-1d3b344417f5", cred, nil)
	if err != nil {
		log.Fatalf("failed to create client: %v", err)
	}
	poller, err := clientFactory.NewConnectedClusterClient().BeginCreateOrReplace(ctx, "k8sc-rg", "testCluster", armhybridkubernetes.ConnectedCluster{
		Identity: &armhybridkubernetes.ConnectedClusterIdentity{
			Type: to.Ptr(armhybridkubernetes.ResourceIdentityTypeNone),
		},
		Kind:     to.Ptr(armhybridkubernetes.ConnectedClusterKindAWS),
		Location: to.Ptr("East US"),
		Properties: &armhybridkubernetes.ConnectedClusterProperties{
			AgentPublicKeyCertificate: to.Ptr(""),
			Distribution:              to.Ptr("eks"),
			Infrastructure:            to.Ptr("aws"),
		},
		Tags: map[string]*string{},
	}, nil)
	if err != nil {
		log.Fatalf("failed to finish the request: %v", err)
	}
	res, err := poller.PollUntilDone(ctx, nil)
	if err != nil {
		log.Fatalf("failed to pull the result: %v", err)
	}
	// You could use response here. We use blank identifier for just demo purposes.
	_ = res
	// If the HTTP response code is 200 as defined in example definition, your response structure would look as follows. Please pay attention that all the values in the output are fake values for just demo purposes.
	// res = armhybridkubernetes.ConnectedClusterClientCreateOrReplaceResponse{
	// 	ConnectedCluster: &armhybridkubernetes.ConnectedCluster{
	// 		Name: to.Ptr("connectedCluster1"),
	// 		Type: to.Ptr("Microsoft.Kubernetes/connectedClusters"),
	// 		ID: to.Ptr("/subscriptions/1bfbb5d0-917e-4346-9026-1d3b344417f5/resourceGroups/akkeshar/providers/Microsoft.Kubernetes/connectedClusters/connectedCluster1"),
	// 		Identity: &armhybridkubernetes.ConnectedClusterIdentity{
	// 			Type: to.Ptr(armhybridkubernetes.ResourceIdentityTypeNone),
	// 		},
	// 		Kind: to.Ptr(armhybridkubernetes.ConnectedClusterKindAWS),
	// 		Location: to.Ptr("East US"),
	// 		Properties: &armhybridkubernetes.ConnectedClusterProperties{
	// 			AADProfile: &armhybridkubernetes.AADProfile{
	// 			},
	// 			AgentPublicKeyCertificate: to.Ptr(""),
	// 			ArcAgentProfile: &armhybridkubernetes.ArcAgentProfile{
	// 			},
	// 			AzureHybridBenefit: to.Ptr(armhybridkubernetes.AzureHybridBenefitNotApplicable),
	// 			ConnectivityStatus: to.Ptr(armhybridkubernetes.ConnectivityStatusAgentNotInstalled),
	// 			Distribution: to.Ptr("eks"),
	// 			Infrastructure: to.Ptr("aws"),
	// 			PrivateLinkState: to.Ptr(armhybridkubernetes.PrivateLinkStateDisabled),
	// 			ProvisioningState: to.Ptr(armhybridkubernetes.ProvisioningStateSucceeded),
	// 		},
	// 		SystemData: &armhybridkubernetes.SystemData{
	// 			CreatedAt: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-12-17T07:06:33.9173186Z"); return t}()),
	// 			CreatedBy: to.Ptr("sikasire@microsoft.com"),
	// 			CreatedByType: to.Ptr(armhybridkubernetes.CreatedByTypeUser),
	// 			LastModifiedAt: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-12-17T07:06:33.9173186Z"); return t}()),
	// 			LastModifiedBy: to.Ptr("sikasire@microsoft.com"),
	// 			LastModifiedByType: to.Ptr(armhybridkubernetes.CreatedByTypeUser),
	// 		},
	// 		Tags: map[string]*string{
	// 		},
	// 	},
	// }
}

// Generated from example definition: 2025-12-01-preview/CreateClusterAgentless_KindGCPExample.json
func ExampleConnectedClusterClient_BeginCreateOrReplace_createClusterAgentlessKindGcpExample() {
	cred, err := azidentity.NewDefaultAzureCredential(nil)
	if err != nil {
		log.Fatalf("failed to obtain a credential: %v", err)
	}
	ctx := context.Background()
	clientFactory, err := armhybridkubernetes.NewClientFactory("1bfbb5d0-917e-4346-9026-1d3b344417f5", cred, nil)
	if err != nil {
		log.Fatalf("failed to create client: %v", err)
	}
	poller, err := clientFactory.NewConnectedClusterClient().BeginCreateOrReplace(ctx, "k8sc-rg", "testCluster", armhybridkubernetes.ConnectedCluster{
		Identity: &armhybridkubernetes.ConnectedClusterIdentity{
			Type: to.Ptr(armhybridkubernetes.ResourceIdentityTypeNone),
		},
		Kind:     to.Ptr(armhybridkubernetes.ConnectedClusterKindGCP),
		Location: to.Ptr("East US"),
		Properties: &armhybridkubernetes.ConnectedClusterProperties{
			AgentPublicKeyCertificate: to.Ptr(""),
			Distribution:              to.Ptr("gke"),
			Infrastructure:            to.Ptr("GCP"),
		},
		Tags: map[string]*string{},
	}, nil)
	if err != nil {
		log.Fatalf("failed to finish the request: %v", err)
	}
	res, err := poller.PollUntilDone(ctx, nil)
	if err != nil {
		log.Fatalf("failed to pull the result: %v", err)
	}
	// You could use response here. We use blank identifier for just demo purposes.
	_ = res
	// If the HTTP response code is 200 as defined in example definition, your response structure would look as follows. Please pay attention that all the values in the output are fake values for just demo purposes.
	// res = armhybridkubernetes.ConnectedClusterClientCreateOrReplaceResponse{
	// 	ConnectedCluster: &armhybridkubernetes.ConnectedCluster{
	// 		Name: to.Ptr("connectedCluster1"),
	// 		Type: to.Ptr("Microsoft.Kubernetes/connectedClusters"),
	// 		ID: to.Ptr("/subscriptions/1bfbb5d0-917e-4346-9026-1d3b344417f5/resourceGroups/akkeshar/providers/Microsoft.Kubernetes/connectedClusters/connectedCluster1"),
	// 		Identity: &armhybridkubernetes.ConnectedClusterIdentity{
	// 			Type: to.Ptr(armhybridkubernetes.ResourceIdentityTypeNone),
	// 		},
	// 		Kind: to.Ptr(armhybridkubernetes.ConnectedClusterKindGCP),
	// 		Location: to.Ptr("East US"),
	// 		Properties: &armhybridkubernetes.ConnectedClusterProperties{
	// 			AADProfile: &armhybridkubernetes.AADProfile{
	// 			},
	// 			AgentPublicKeyCertificate: to.Ptr(""),
	// 			ArcAgentProfile: &armhybridkubernetes.ArcAgentProfile{
	// 			},
	// 			AzureHybridBenefit: to.Ptr(armhybridkubernetes.AzureHybridBenefitNotApplicable),
	// 			ConnectivityStatus: to.Ptr(armhybridkubernetes.ConnectivityStatusAgentNotInstalled),
	// 			Distribution: to.Ptr("gke"),
	// 			Infrastructure: to.Ptr("GCP"),
	// 			PrivateLinkState: to.Ptr(armhybridkubernetes.PrivateLinkStateDisabled),
	// 			ProvisioningState: to.Ptr(armhybridkubernetes.ProvisioningStateSucceeded),
	// 		},
	// 		SystemData: &armhybridkubernetes.SystemData{
	// 			CreatedAt: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-12-17T07:06:33.9173186Z"); return t}()),
	// 			CreatedBy: to.Ptr("sikasire@microsoft.com"),
	// 			CreatedByType: to.Ptr(armhybridkubernetes.CreatedByTypeUser),
	// 			LastModifiedAt: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-12-17T07:06:33.9173186Z"); return t}()),
	// 			LastModifiedBy: to.Ptr("sikasire@microsoft.com"),
	// 			LastModifiedByType: to.Ptr(armhybridkubernetes.CreatedByTypeUser),
	// 		},
	// 		Tags: map[string]*string{
	// 		},
	// 	},
	// }
}

// Generated from example definition: 2025-12-01-preview/CreateClusterExample.json
func ExampleConnectedClusterClient_BeginCreateOrReplace_createClusterExample() {
	cred, err := azidentity.NewDefaultAzureCredential(nil)
	if err != nil {
		log.Fatalf("failed to obtain a credential: %v", err)
	}
	ctx := context.Background()
	clientFactory, err := armhybridkubernetes.NewClientFactory("1bfbb5d0-917e-4346-9026-1d3b344417f5", cred, nil)
	if err != nil {
		log.Fatalf("failed to create client: %v", err)
	}
	poller, err := clientFactory.NewConnectedClusterClient().BeginCreateOrReplace(ctx, "k8sc-rg", "testCluster", armhybridkubernetes.ConnectedCluster{
		Identity: &armhybridkubernetes.ConnectedClusterIdentity{
			Type: to.Ptr(armhybridkubernetes.ResourceIdentityTypeSystemAssigned),
		},
		Location: to.Ptr("East US"),
		Properties: &armhybridkubernetes.ConnectedClusterProperties{
			AgentPublicKeyCertificate: to.Ptr("MIICYzCCAcygAwIBAgIBADANBgkqhkiG9w0BAQUFADAuMQswCQYDVQQGEwJVUzEMMAoGA1UEChMDSUJNMREwDwYDVQQLEwhMb2NhbCBDQTAeFw05OTEyMjIwNTAwMDBaFw0wMDEyMjMwNDU5NTlaMC4xCzAJBgNVBAYTAlVTMQwwCgYDVQQKEwNJQk0xETAPBgNVBAsTCExvY2FsIENBMIGfMA0GCSqGSIb3DQEBAQUAA4GNADCBiQKBgQD2bZEo7xGaX2/0GHkrNFZvlxBou9v1Jmt/PDiTMPve8r9FeJAQ0QdvFST/0JPQYD20rH0bimdDLgNdNynmyRoS2S/IInfpmf69iyc2G0TPyRvmHIiOZbdCd+YBHQi1adkj17NDcWj6S14tVurFX73zx0sNoMS79q3tuXKrDsxeuwIDAQABo4GQMIGNMEsGCVUdDwGG+EIBDQQ+EzxHZW5lcmF0ZWQgYnkgdGhlIFNlY3VyZVdheSBTZWN1cml0eSBTZXJ2ZXIgZm9yIE9TLzM5MCAoUkFDRikwDgYDVR0PAQH/BAQDAgAGMA8GA1UdEwEB/wQFMAMBAf8wHQYDVR0OBBYEFJ3+ocRyCTJw067dLSwr/nalx6YMMA0GCSqGSIb3DQEBBQUAA4GBAMaQzt+zaj1GU77yzlr8iiMBXgdQrwsZZWJo5exnAucJAEYQZmOfyLiM D6oYq+ZnfvM0n8G/Y79q8nhwvuxpYOnRSAXFp6xSkrIOeZtJMY1h00LKp/JX3Ng1svZ2agE126JHsQ0bhzN5TKsYfbwfTwfjdWAGy6Vf1nYi/rO+ryMO"),
			AzureHybridBenefit:        to.Ptr(armhybridkubernetes.AzureHybridBenefitNotApplicable),
			Distribution:              to.Ptr("AKS"),
			DistributionVersion:       to.Ptr("1.0"),
		},
		Tags: map[string]*string{},
	}, nil)
	if err != nil {
		log.Fatalf("failed to finish the request: %v", err)
	}
	res, err := poller.PollUntilDone(ctx, nil)
	if err != nil {
		log.Fatalf("failed to pull the result: %v", err)
	}
	// You could use response here. We use blank identifier for just demo purposes.
	_ = res
	// If the HTTP response code is 200 as defined in example definition, your response structure would look as follows. Please pay attention that all the values in the output are fake values for just demo purposes.
	// res = armhybridkubernetes.ConnectedClusterClientCreateOrReplaceResponse{
	// 	ConnectedCluster: &armhybridkubernetes.ConnectedCluster{
	// 		Name: to.Ptr("connectedCluster1"),
	// 		Type: to.Ptr("Microsoft.Kubernetes/connectedClusters"),
	// 		ID: to.Ptr("/subscriptions/1bfbb5d0-917e-4346-9026-1d3b344417f5/resourceGroups/akkeshar/providers/Microsoft.Kubernetes/connectedClusters/connectedCluster1"),
	// 		Identity: &armhybridkubernetes.ConnectedClusterIdentity{
	// 			Type: to.Ptr(armhybridkubernetes.ResourceIdentityTypeSystemAssigned),
	// 		},
	// 		Location: to.Ptr("East US"),
	// 		Properties: &armhybridkubernetes.ConnectedClusterProperties{
	// 			AgentPublicKeyCertificate: to.Ptr("MIICYzCCAcygAwIBAgIBADANBgkqhkiG9w0BAQUFADAuMQswCQYDVQQGEwJVUzEMMAoGA1UEChMDSUJNMREwDwYDVQQLEwhMb2NhbCBDQTAeFw05OTEyMjIwNTAwMDBaFw0wMDEyMjMwNDU5NTlaMC4xCzAJBgNVBAYTAlVTMQwwCgYDVQQKEwNJQk0xETAPBgNVBAsTCExvY2FsIENBMIGfMA0GCSqGSIb3DQEBAQUAA4GNADCBiQKBgQD2bZEo7xGaX2/0GHkrNFZvlxBou9v1Jmt/PDiTMPve8r9FeJAQ0QdvFST/0JPQYD20rH0bimdDLgNdNynmyRoS2S/IInfpmf69iyc2G0TPyRvmHIiOZbdCd+YBHQi1adkj17NDcWj6S14tVurFX73zx0sNoMS79q3tuXKrDsxeuwIDAQABo4GQMIGNMEsGCVUdDwGG+EIBDQQ+EzxHZW5lcmF0ZWQgYnkgdGhlIFNlY3VyZVdheSBTZWN1cml0eSBTZXJ2ZXIgZm9yIE9TLzM5MCAoUkFDRikwDgYDVR0PAQH/BAQDAgAGMA8GA1UdEwEB/wQFMAMBAf8wHQYDVR0OBBYEFJ3+ocRyCTJw067dLSwr/nalx6YMMA0GCSqGSIb3DQEBBQUAA4GBAMaQzt+zaj1GU77yzlr8iiMBXgdQrwsZZWJo5exnAucJAEYQZmOfyLiM D6oYq+ZnfvM0n8G/Y79q8nhwvuxpYOnRSAXFp6xSkrIOeZtJMY1h00LKp/JX3Ng1svZ2agE126JHsQ0bhzN5TKsYfbwfTwfjdWAGy6Vf1nYi/rO+ryMO"),
	// 			AgentVersion: to.Ptr("0.1.0"),
	// 			AzureHybridBenefit: to.Ptr(armhybridkubernetes.AzureHybridBenefitNotApplicable),
	// 			Distribution: to.Ptr("AKS"),
	// 			DistributionVersion: to.Ptr("1.0"),
	// 			KubernetesVersion: to.Ptr("1.17.0"),
	// 			ProvisioningState: to.Ptr(armhybridkubernetes.ProvisioningStateSucceeded),
	// 			TotalNodeCount: to.Ptr[int32](2),
	// 		},
	// 		SystemData: &armhybridkubernetes.SystemData{
	// 			CreatedAt: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-12-17T07:06:33.9173186Z"); return t}()),
	// 			CreatedBy: to.Ptr("sikasire@microsoft.com"),
	// 			CreatedByType: to.Ptr(armhybridkubernetes.CreatedByTypeUser),
	// 			LastModifiedAt: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-12-17T07:06:33.9173186Z"); return t}()),
	// 			LastModifiedBy: to.Ptr("sikasire@microsoft.com"),
	// 			LastModifiedByType: to.Ptr(armhybridkubernetes.CreatedByTypeUser),
	// 		},
	// 		Tags: map[string]*string{
	// 		},
	// 	},
	// }
}

// Generated from example definition: 2025-12-01-preview/CreateClusterPrivateLinkExample.json
func ExampleConnectedClusterClient_BeginCreateOrReplace_createClusterPrivateLinkExample() {
	cred, err := azidentity.NewDefaultAzureCredential(nil)
	if err != nil {
		log.Fatalf("failed to obtain a credential: %v", err)
	}
	ctx := context.Background()
	clientFactory, err := armhybridkubernetes.NewClientFactory("1bfbb5d0-917e-4346-9026-1d3b344417f5", cred, nil)
	if err != nil {
		log.Fatalf("failed to create client: %v", err)
	}
	poller, err := clientFactory.NewConnectedClusterClient().BeginCreateOrReplace(ctx, "k8sc-rg", "testCluster", armhybridkubernetes.ConnectedCluster{
		Identity: &armhybridkubernetes.ConnectedClusterIdentity{
			Type: to.Ptr(armhybridkubernetes.ResourceIdentityTypeSystemAssigned),
		},
		Location: to.Ptr("East US"),
		Properties: &armhybridkubernetes.ConnectedClusterProperties{
			AgentPublicKeyCertificate:  to.Ptr("MIICYzCCAcygAwIBAgIBADANBgkqhkiG9w0BAQUFADAuMQswCQYDVQQGEwJVUzEMMAoGA1UEChMDSUJNMREwDwYDVQQLEwhMb2NhbCBDQTAeFw05OTEyMjIwNTAwMDBaFw0wMDEyMjMwNDU5NTlaMC4xCzAJBgNVBAYTAlVTMQwwCgYDVQQKEwNJQk0xETAPBgNVBAsTCExvY2FsIENBMIGfMA0GCSqGSIb3DQEBAQUAA4GNADCBiQKBgQD2bZEo7xGaX2/0GHkrNFZvlxBou9v1Jmt/PDiTMPve8r9FeJAQ0QdvFST/0JPQYD20rH0bimdDLgNdNynmyRoS2S/IInfpmf69iyc2G0TPyRvmHIiOZbdCd+YBHQi1adkj17NDcWj6S14tVurFX73zx0sNoMS79q3tuXKrDsxeuwIDAQABo4GQMIGNMEsGCVUdDwGG+EIBDQQ+EzxHZW5lcmF0ZWQgYnkgdGhlIFNlY3VyZVdheSBTZWN1cml0eSBTZXJ2ZXIgZm9yIE9TLzM5MCAoUkFDRikwDgYDVR0PAQH/BAQDAgAGMA8GA1UdEwEB/wQFMAMBAf8wHQYDVR0OBBYEFJ3+ocRyCTJw067dLSwr/nalx6YMMA0GCSqGSIb3DQEBBQUAA4GBAMaQzt+zaj1GU77yzlr8iiMBXgdQrwsZZWJo5exnAucJAEYQZmOfyLiM D6oYq+ZnfvM0n8G/Y79q8nhwvuxpYOnRSAXFp6xSkrIOeZtJMY1h00LKp/JX3Ng1svZ2agE126JHsQ0bhzN5TKsYfbwfTwfjdWAGy6Vf1nYi/rO+ryMO"),
			AzureHybridBenefit:         to.Ptr(armhybridkubernetes.AzureHybridBenefitNotApplicable),
			Distribution:               to.Ptr("AKS"),
			DistributionVersion:        to.Ptr("1.0"),
			PrivateLinkScopeResourceID: to.Ptr("/subscriptions/{subscriptionId}/resourceGroups/myResourceGroup/providers/Microsoft.HybridCompute/privateLinkScopes/privateLinkScopeName"),
			PrivateLinkState:           to.Ptr(armhybridkubernetes.PrivateLinkStateEnabled),
		},
		Tags: map[string]*string{},
	}, nil)
	if err != nil {
		log.Fatalf("failed to finish the request: %v", err)
	}
	res, err := poller.PollUntilDone(ctx, nil)
	if err != nil {
		log.Fatalf("failed to pull the result: %v", err)
	}
	// You could use response here. We use blank identifier for just demo purposes.
	_ = res
	// If the HTTP response code is 200 as defined in example definition, your response structure would look as follows. Please pay attention that all the values in the output are fake values for just demo purposes.
	// res = armhybridkubernetes.ConnectedClusterClientCreateOrReplaceResponse{
	// 	ConnectedCluster: &armhybridkubernetes.ConnectedCluster{
	// 		Name: to.Ptr("connectedCluster1"),
	// 		Type: to.Ptr("Microsoft.Kubernetes/connectedClusters"),
	// 		ID: to.Ptr("/subscriptions/1bfbb5d0-917e-4346-9026-1d3b344417f5/resourceGroups/akkeshar/providers/Microsoft.Kubernetes/connectedClusters/connectedCluster1"),
	// 		Identity: &armhybridkubernetes.ConnectedClusterIdentity{
	// 			Type: to.Ptr(armhybridkubernetes.ResourceIdentityTypeSystemAssigned),
	// 		},
	// 		Location: to.Ptr("East US"),
	// 		Properties: &armhybridkubernetes.ConnectedClusterProperties{
	// 			AgentPublicKeyCertificate: to.Ptr("MIICYzCCAcygAwIBAgIBADANBgkqhkiG9w0BAQUFADAuMQswCQYDVQQGEwJVUzEMMAoGA1UEChMDSUJNMREwDwYDVQQLEwhMb2NhbCBDQTAeFw05OTEyMjIwNTAwMDBaFw0wMDEyMjMwNDU5NTlaMC4xCzAJBgNVBAYTAlVTMQwwCgYDVQQKEwNJQk0xETAPBgNVBAsTCExvY2FsIENBMIGfMA0GCSqGSIb3DQEBAQUAA4GNADCBiQKBgQD2bZEo7xGaX2/0GHkrNFZvlxBou9v1Jmt/PDiTMPve8r9FeJAQ0QdvFST/0JPQYD20rH0bimdDLgNdNynmyRoS2S/IInfpmf69iyc2G0TPyRvmHIiOZbdCd+YBHQi1adkj17NDcWj6S14tVurFX73zx0sNoMS79q3tuXKrDsxeuwIDAQABo4GQMIGNMEsGCVUdDwGG+EIBDQQ+EzxHZW5lcmF0ZWQgYnkgdGhlIFNlY3VyZVdheSBTZWN1cml0eSBTZXJ2ZXIgZm9yIE9TLzM5MCAoUkFDRikwDgYDVR0PAQH/BAQDAgAGMA8GA1UdEwEB/wQFMAMBAf8wHQYDVR0OBBYEFJ3+ocRyCTJw067dLSwr/nalx6YMMA0GCSqGSIb3DQEBBQUAA4GBAMaQzt+zaj1GU77yzlr8iiMBXgdQrwsZZWJo5exnAucJAEYQZmOfyLiM D6oYq+ZnfvM0n8G/Y79q8nhwvuxpYOnRSAXFp6xSkrIOeZtJMY1h00LKp/JX3Ng1svZ2agE126JHsQ0bhzN5TKsYfbwfTwfjdWAGy6Vf1nYi/rO+ryMO"),
	// 			AgentVersion: to.Ptr("0.1.0"),
	// 			AzureHybridBenefit: to.Ptr(armhybridkubernetes.AzureHybridBenefitNotApplicable),
	// 			Distribution: to.Ptr("AKS"),
	// 			DistributionVersion: to.Ptr("1.0"),
	// 			KubernetesVersion: to.Ptr("1.17.0"),
	// 			PrivateLinkScopeResourceID: to.Ptr("/subscriptions/{subscriptionId}/resourceGroups/myResourceGroup/providers/Microsoft.HybridCompute/privateLinkScopes/privateLinkScopeName"),
	// 			PrivateLinkState: to.Ptr(armhybridkubernetes.PrivateLinkStateEnabled),
	// 			ProvisioningState: to.Ptr(armhybridkubernetes.ProvisioningStateSucceeded),
	// 			TotalNodeCount: to.Ptr[int32](2),
	// 		},
	// 		SystemData: &armhybridkubernetes.SystemData{
	// 			CreatedAt: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-12-17T07:06:33.9173186Z"); return t}()),
	// 			CreatedBy: to.Ptr("sikasire@microsoft.com"),
	// 			CreatedByType: to.Ptr(armhybridkubernetes.CreatedByTypeUser),
	// 			LastModifiedAt: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-12-17T07:06:33.9173186Z"); return t}()),
	// 			LastModifiedBy: to.Ptr("sikasire@microsoft.com"),
	// 			LastModifiedByType: to.Ptr(armhybridkubernetes.CreatedByTypeUser),
	// 		},
	// 		Tags: map[string]*string{
	// 		},
	// 	},
	// }
}

// Generated from example definition: 2025-12-01-preview/CreateCluster_KindExample.json
func ExampleConnectedClusterClient_BeginCreateOrReplace_createClusterKindExample() {
	cred, err := azidentity.NewDefaultAzureCredential(nil)
	if err != nil {
		log.Fatalf("failed to obtain a credential: %v", err)
	}
	ctx := context.Background()
	clientFactory, err := armhybridkubernetes.NewClientFactory("1bfbb5d0-917e-4346-9026-1d3b344417f5", cred, nil)
	if err != nil {
		log.Fatalf("failed to create client: %v", err)
	}
	poller, err := clientFactory.NewConnectedClusterClient().BeginCreateOrReplace(ctx, "k8sc-rg", "testCluster", armhybridkubernetes.ConnectedCluster{
		Identity: &armhybridkubernetes.ConnectedClusterIdentity{
			Type: to.Ptr(armhybridkubernetes.ResourceIdentityTypeSystemAssigned),
		},
		Kind:     to.Ptr(armhybridkubernetes.ConnectedClusterKindProvisionedCluster),
		Location: to.Ptr("East US"),
		Properties: &armhybridkubernetes.ConnectedClusterProperties{
			AADProfile: &armhybridkubernetes.AADProfile{
				AdminGroupObjectIDs: []*string{
					to.Ptr("56f988bf-86f1-41af-91ab-2d7cd011db47"),
				},
				EnableAzureRBAC: to.Ptr(true),
				TenantID:        to.Ptr("82f988bf-86f1-41af-91ab-2d7cd011db47"),
			},
			AgentPublicKeyCertificate: to.Ptr(""),
			ArcAgentProfile: &armhybridkubernetes.ArcAgentProfile{
				AgentAutoUpgrade:    to.Ptr(armhybridkubernetes.AutoUpgradeOptionsEnabled),
				DesiredAgentVersion: to.Ptr("0.1.0"),
				SystemComponents: []*armhybridkubernetes.SystemComponent{
					{
						Type:                 to.Ptr("Strato"),
						MajorVersion:         to.Ptr[int32](0),
						UserSpecifiedVersion: to.Ptr("0.1.1"),
					},
				},
			},
			AzureHybridBenefit:  to.Ptr(armhybridkubernetes.AzureHybridBenefitNotApplicable),
			Distribution:        to.Ptr("AKS"),
			DistributionVersion: to.Ptr("1.0"),
			OidcIssuerProfile: &armhybridkubernetes.OidcIssuerProfile{
				Enabled: to.Ptr(true),
			},
		},
		Tags: map[string]*string{},
	}, nil)
	if err != nil {
		log.Fatalf("failed to finish the request: %v", err)
	}
	res, err := poller.PollUntilDone(ctx, nil)
	if err != nil {
		log.Fatalf("failed to pull the result: %v", err)
	}
	// You could use response here. We use blank identifier for just demo purposes.
	_ = res
	// If the HTTP response code is 200 as defined in example definition, your response structure would look as follows. Please pay attention that all the values in the output are fake values for just demo purposes.
	// res = armhybridkubernetes.ConnectedClusterClientCreateOrReplaceResponse{
	// 	ConnectedCluster: &armhybridkubernetes.ConnectedCluster{
	// 		Name: to.Ptr("connectedCluster1"),
	// 		Type: to.Ptr("Microsoft.Kubernetes/connectedClusters"),
	// 		ID: to.Ptr("/subscriptions/1bfbb5d0-917e-4346-9026-1d3b344417f5/resourceGroups/akkeshar/providers/Microsoft.Kubernetes/connectedClusters/connectedCluster1"),
	// 		Identity: &armhybridkubernetes.ConnectedClusterIdentity{
	// 			Type: to.Ptr(armhybridkubernetes.ResourceIdentityTypeSystemAssigned),
	// 		},
	// 		Kind: to.Ptr(armhybridkubernetes.ConnectedClusterKindProvisionedCluster),
	// 		Location: to.Ptr("East US"),
	// 		Properties: &armhybridkubernetes.ConnectedClusterProperties{
	// 			AADProfile: &armhybridkubernetes.AADProfile{
	// 				AdminGroupObjectIDs: []*string{
	// 					to.Ptr("56f988bf-86f1-41af-91ab-2d7cd011db47"),
	// 				},
	// 				EnableAzureRBAC: to.Ptr(true),
	// 				TenantID: to.Ptr("82f988bf-86f1-41af-91ab-2d7cd011db47"),
	// 			},
	// 			AgentPublicKeyCertificate: to.Ptr(""),
	// 			AgentVersion: to.Ptr("0.1.0"),
	// 			ArcAgentProfile: &armhybridkubernetes.ArcAgentProfile{
	// 				AgentAutoUpgrade: to.Ptr(armhybridkubernetes.AutoUpgradeOptionsEnabled),
	// 				AgentState: to.Ptr("Succeeded"),
	// 				DesiredAgentVersion: to.Ptr("0.1.0"),
	// 				SystemComponents: []*armhybridkubernetes.SystemComponent{
	// 					{
	// 						Type: to.Ptr("Strato"),
	// 						CurrentVersion: to.Ptr("0.1.0"),
	// 						MajorVersion: to.Ptr[int32](0),
	// 						UserSpecifiedVersion: to.Ptr("0.1.1"),
	// 					},
	// 				},
	// 			},
	// 			AzureHybridBenefit: to.Ptr(armhybridkubernetes.AzureHybridBenefitNotApplicable),
	// 			Distribution: to.Ptr("AKS"),
	// 			DistributionVersion: to.Ptr("1.0"),
	// 			KubernetesVersion: to.Ptr("1.17.0"),
	// 			OidcIssuerProfile: &armhybridkubernetes.OidcIssuerProfile{
	// 				Enabled: to.Ptr(true),
	// 				IssuerURL: to.Ptr("https://oidcdiscovery-northamerica-endpoint-gbcge4adgqebgxev.z01.azurefd.net/885hc665-0g4a-4a4b-732b-e4950new3bed/"),
	// 			},
	// 			ProvisioningState: to.Ptr(armhybridkubernetes.ProvisioningStateSucceeded),
	// 			TotalNodeCount: to.Ptr[int32](2),
	// 		},
	// 		SystemData: &armhybridkubernetes.SystemData{
	// 			CreatedAt: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-12-17T07:06:33.9173186Z"); return t}()),
	// 			CreatedBy: to.Ptr("sikasire@microsoft.com"),
	// 			CreatedByType: to.Ptr(armhybridkubernetes.CreatedByTypeUser),
	// 			LastModifiedAt: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-12-17T07:06:33.9173186Z"); return t}()),
	// 			LastModifiedBy: to.Ptr("sikasire@microsoft.com"),
	// 			LastModifiedByType: to.Ptr(armhybridkubernetes.CreatedByTypeUser),
	// 		},
	// 		Tags: map[string]*string{
	// 		},
	// 	},
	// }
}

// Generated from example definition: 2025-12-01-preview/UpdateClusterByPutExample.json
func ExampleConnectedClusterClient_BeginCreateOrReplace_updateClusterByPutExample() {
	cred, err := azidentity.NewDefaultAzureCredential(nil)
	if err != nil {
		log.Fatalf("failed to obtain a credential: %v", err)
	}
	ctx := context.Background()
	clientFactory, err := armhybridkubernetes.NewClientFactory("1bfbb5d0-917e-4346-9026-1d3b344417f5", cred, nil)
	if err != nil {
		log.Fatalf("failed to create client: %v", err)
	}
	poller, err := clientFactory.NewConnectedClusterClient().BeginCreateOrReplace(ctx, "k8sc-rg", "testCluster", armhybridkubernetes.ConnectedCluster{
		Identity: &armhybridkubernetes.ConnectedClusterIdentity{
			Type: to.Ptr(armhybridkubernetes.ResourceIdentityTypeSystemAssigned),
		},
		Location: to.Ptr("East US"),
		Properties: &armhybridkubernetes.ConnectedClusterProperties{
			AgentPublicKeyCertificate: to.Ptr("MIICYzCCAcygAwIBAgIBADANBgkqhkiG9w0BAQUFADAuMQswCQYDVQQGEwJVUzEMMAoGA1UEChMDSUJNMREwDwYDVQQLEwhMb2NhbCBDQTAeFw05OTEyMjIwNTAwMDBaFw0wMDEyMjMwNDU5NTlaMC4xCzAJBgNVBAYTAlVTMQwwCgYDVQQKEwNJQk0xETAPBgNVBAsTCExvY2FsIENBMIGfMA0GCSqGSIb3DQEBAQUAA4GNADCBiQKBgQD2bZEo7xGaX2/0GHkrNFZvlxBou9v1Jmt/PDiTMPve8r9FeJAQ0QdvFST/0JPQYD20rH0bimdDLgNdNynmyRoS2S/IInfpmf69iyc2G0TPyRvmHIiOZbdCd+YBHQi1adkj17NDcWj6S14tVurFX73zx0sNoMS79q3tuXKrDsxeuwIDAQABo4GQMIGNMEsGCVUdDwGG+EIBDQQ+EzxHZW5lcmF0ZWQgYnkgdGhlIFNlY3VyZVdheSBTZWN1cml0eSBTZXJ2ZXIgZm9yIE9TLzM5MCAoUkFDRikwDgYDVR0PAQH/BAQDAgAGMA8GA1UdEwEB/wQFMAMBAf8wHQYDVR0OBBYEFJ3+ocRyCTJw067dLSwr/nalx6YMMA0GCSqGSIb3DQEBBQUAA4GBAMaQzt+zaj1GU77yzlr8iiMBXgdQrwsZZWJo5exnAucJAEYQZmOfyLiM D6oYq+ZnfvM0n8G/Y79q8nhwvuxpYOnRSAXFp6xSkrIOeZtJMY1h00LKp/JX3Ng1svZ2agE126JHsQ0bhzN5TKsYfbwfTwfjdWAGy6Vf1nYi/rO+ryMO"),
			AzureHybridBenefit:        to.Ptr(armhybridkubernetes.AzureHybridBenefitNotApplicable),
			Distribution:              to.Ptr("AKS"),
			DistributionVersion:       to.Ptr("1.0"),
			Gateway: &armhybridkubernetes.Gateway{
				Enabled: to.Ptr(true),
			},
		},
		Tags: map[string]*string{},
	}, nil)
	if err != nil {
		log.Fatalf("failed to finish the request: %v", err)
	}
	res, err := poller.PollUntilDone(ctx, nil)
	if err != nil {
		log.Fatalf("failed to pull the result: %v", err)
	}
	// You could use response here. We use blank identifier for just demo purposes.
	_ = res
	// If the HTTP response code is 200 as defined in example definition, your response structure would look as follows. Please pay attention that all the values in the output are fake values for just demo purposes.
	// res = armhybridkubernetes.ConnectedClusterClientCreateOrReplaceResponse{
	// 	ConnectedCluster: &armhybridkubernetes.ConnectedCluster{
	// 		Name: to.Ptr("connectedCluster1"),
	// 		Type: to.Ptr("Microsoft.Kubernetes/connectedClusters"),
	// 		ID: to.Ptr("/subscriptions/1bfbb5d0-917e-4346-9026-1d3b344417f5/resourceGroups/akkeshar/providers/Microsoft.Kubernetes/connectedClusters/connectedCluster1"),
	// 		Identity: &armhybridkubernetes.ConnectedClusterIdentity{
	// 			Type: to.Ptr(armhybridkubernetes.ResourceIdentityTypeSystemAssigned),
	// 		},
	// 		Location: to.Ptr("East US"),
	// 		Properties: &armhybridkubernetes.ConnectedClusterProperties{
	// 			AgentPublicKeyCertificate: to.Ptr("MIICYzCCAcygAwIBAgIBADANBgkqhkiG9w0BAQUFADAuMQswCQYDVQQGEwJVUzEMMAoGA1UEChMDSUJNMREwDwYDVQQLEwhMb2NhbCBDQTAeFw05OTEyMjIwNTAwMDBaFw0wMDEyMjMwNDU5NTlaMC4xCzAJBgNVBAYTAlVTMQwwCgYDVQQKEwNJQk0xETAPBgNVBAsTCExvY2FsIENBMIGfMA0GCSqGSIb3DQEBAQUAA4GNADCBiQKBgQD2bZEo7xGaX2/0GHkrNFZvlxBou9v1Jmt/PDiTMPve8r9FeJAQ0QdvFST/0JPQYD20rH0bimdDLgNdNynmyRoS2S/IInfpmf69iyc2G0TPyRvmHIiOZbdCd+YBHQi1adkj17NDcWj6S14tVurFX73zx0sNoMS79q3tuXKrDsxeuwIDAQABo4GQMIGNMEsGCVUdDwGG+EIBDQQ+EzxHZW5lcmF0ZWQgYnkgdGhlIFNlY3VyZVdheSBTZWN1cml0eSBTZXJ2ZXIgZm9yIE9TLzM5MCAoUkFDRikwDgYDVR0PAQH/BAQDAgAGMA8GA1UdEwEB/wQFMAMBAf8wHQYDVR0OBBYEFJ3+ocRyCTJw067dLSwr/nalx6YMMA0GCSqGSIb3DQEBBQUAA4GBAMaQzt+zaj1GU77yzlr8iiMBXgdQrwsZZWJo5exnAucJAEYQZmOfyLiM D6oYq+ZnfvM0n8G/Y79q8nhwvuxpYOnRSAXFp6xSkrIOeZtJMY1h00LKp/JX3Ng1svZ2agE126JHsQ0bhzN5TKsYfbwfTwfjdWAGy6Vf1nYi/rO+ryMO"),
	// 			AgentVersion: to.Ptr("0.1.0"),
	// 			AzureHybridBenefit: to.Ptr(armhybridkubernetes.AzureHybridBenefitNotApplicable),
	// 			Distribution: to.Ptr("AKS"),
	// 			DistributionVersion: to.Ptr("1.0"),
	// 			Gateway: &armhybridkubernetes.Gateway{
	// 				Enabled: to.Ptr(true),
	// 			},
	// 			KubernetesVersion: to.Ptr("1.17.0"),
	// 			ProvisioningState: to.Ptr(armhybridkubernetes.ProvisioningStateSucceeded),
	// 			TotalNodeCount: to.Ptr[int32](2),
	// 		},
	// 		SystemData: &armhybridkubernetes.SystemData{
	// 			CreatedAt: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-12-17T07:06:33.9173186Z"); return t}()),
	// 			CreatedBy: to.Ptr("sikasire@microsoft.com"),
	// 			CreatedByType: to.Ptr(armhybridkubernetes.CreatedByTypeUser),
	// 			LastModifiedAt: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-12-17T07:06:33.9173186Z"); return t}()),
	// 			LastModifiedBy: to.Ptr("sikasire@microsoft.com"),
	// 			LastModifiedByType: to.Ptr(armhybridkubernetes.CreatedByTypeUser),
	// 		},
	// 		Tags: map[string]*string{
	// 		},
	// 	},
	// }
}

// Generated from example definition: 2025-12-01-preview/DeleteClusterExample.json
func ExampleConnectedClusterClient_BeginDelete() {
	cred, err := azidentity.NewDefaultAzureCredential(nil)
	if err != nil {
		log.Fatalf("failed to obtain a credential: %v", err)
	}
	ctx := context.Background()
	clientFactory, err := armhybridkubernetes.NewClientFactory("1bfbb5d0-917e-4346-9026-1d3b344417f5", cred, nil)
	if err != nil {
		log.Fatalf("failed to create client: %v", err)
	}
	poller, err := clientFactory.NewConnectedClusterClient().BeginDelete(ctx, "k8sc-rg", "testCluster", nil)
	if err != nil {
		log.Fatalf("failed to finish the request: %v", err)
	}
	res, err := poller.PollUntilDone(ctx, nil)
	if err != nil {
		log.Fatalf("failed to pull the result: %v", err)
	}
	// You could use response here. We use blank identifier for just demo purposes.
	_ = res
	// If the HTTP response code is 200 as defined in example definition, your response structure would look as follows. Please pay attention that all the values in the output are fake values for just demo purposes.
	// res = armhybridkubernetes.ConnectedClusterClientDeleteResponse{
	// }
}

// Generated from example definition: 2025-12-01-preview/GetClusterExample.json
func ExampleConnectedClusterClient_Get_getClusterExample() {
	cred, err := azidentity.NewDefaultAzureCredential(nil)
	if err != nil {
		log.Fatalf("failed to obtain a credential: %v", err)
	}
	ctx := context.Background()
	clientFactory, err := armhybridkubernetes.NewClientFactory("1bfbb5d0-917e-4346-9026-1d3b344417f5", cred, nil)
	if err != nil {
		log.Fatalf("failed to create client: %v", err)
	}
	res, err := clientFactory.NewConnectedClusterClient().Get(ctx, "k8sc-rg", "testCluster", nil)
	if err != nil {
		log.Fatalf("failed to finish the request: %v", err)
	}
	// You could use response here. We use blank identifier for just demo purposes.
	_ = res
	// If the HTTP response code is 200 as defined in example definition, your response structure would look as follows. Please pay attention that all the values in the output are fake values for just demo purposes.
	// res = armhybridkubernetes.ConnectedClusterClientGetResponse{
	// 	ConnectedCluster: &armhybridkubernetes.ConnectedCluster{
	// 		Name: to.Ptr("connectedCluster1"),
	// 		Type: to.Ptr("Microsoft.Kubernetes/connectedClusters"),
	// 		ID: to.Ptr("/subscriptions/1bfbb5d0-917e-4346-9026-1d3b344417f5/resourceGroups/akkeshar/providers/Microsoft.Kubernetes/connectedClusters/connectedCluster1"),
	// 		Identity: &armhybridkubernetes.ConnectedClusterIdentity{
	// 			Type: to.Ptr(armhybridkubernetes.ResourceIdentityTypeSystemAssigned),
	// 			PrincipalID: to.Ptr("d8cd1fd9-154f-4da7-b348-595f283c13a3"),
	// 			TenantID: to.Ptr("72f988bf-86f1-41af-91ab-2d7cd011db47"),
	// 		},
	// 		Location: to.Ptr("East US"),
	// 		Properties: &armhybridkubernetes.ConnectedClusterProperties{
	// 			AgentPublicKeyCertificate: to.Ptr("MIICYzCCAcygAwIBAgIBADANBgkqhkiG9w0BAQUFADAuMQswCQYDVQQGEwJVUzEMMAoGA1UEChMDSUJNMREwDwYDVQQLEwhMb2NhbCBDQTAeFw05OTEyMjIwNTAwMDBaFw0wMDEyMjMwNDU5NTlaMC4xCzAJBgNVBAYTAlVTMQwwCgYDVQQKEwNJQk0xETAPBgNVBAsTCExvY2FsIENBMIGfMA0GCSqGSIb3DQEBAQUAA4GNADCBiQKBgQD2bZEo7xGaX2/0GHkrNFZvlxBou9v1Jmt/PDiTMPve8r9FeJAQ0QdvFST/0JPQYD20rH0bimdDLgNdNynmyRoS2S/IInfpmf69iyc2G0TPyRvmHIiOZbdCd+YBHQi1adkj17NDcWj6S14tVurFX73zx0sNoMS79q3tuXKrDsxeuwIDAQABo4GQMIGNMEsGCVUdDwGG+EIBDQQ+EzxHZW5lcmF0ZWQgYnkgdGhlIFNlY3VyZVdheSBTZWN1cml0eSBTZXJ2ZXIgZm9yIE9TLzM5MCAoUkFDRikwDgYDVR0PAQH/BAQDAgAGMA8GA1UdEwEB/wQFMAMBAf8wHQYDVR0OBBYEFJ3+ocRyCTJw067dLSwr/nalx6YMMA0GCSqGSIb3DQEBBQUAA4GBAMaQzt+zaj1GU77yzlr8iiMBXgdQrwsZZWJo5exnAucJAEYQZmOfyLiM D6oYq+ZnfvM0n8G/Y79q8nhwvuxpYOnRSAXFp6xSkrIOeZtJMY1h00LKp/JX3Ng1svZ2agE126JHsQ0bhzN5TKsYfbwfTwfjdWAGy6Vf1nYi/rO+ryMO"),
	// 			AgentVersion: to.Ptr("0.1.0"),
	// 			ArcAgentProfile: &armhybridkubernetes.ArcAgentProfile{
	// 				AgentAutoUpgrade: to.Ptr(armhybridkubernetes.AutoUpgradeOptionsEnabled),
	// 				AgentErrors: []*armhybridkubernetes.AgentError{
	// 					{
	// 						Component: to.Ptr("Strato"),
	// 						Message: to.Ptr("Upgrade failed for agent extension Strato, version not found"),
	// 						Severity: to.Ptr("Error"),
	// 						Time: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-12-17T07:14:58.865041Z"); return t}()),
	// 					},
	// 				},
	// 				AgentState: to.Ptr("Failed"),
	// 				DesiredAgentVersion: to.Ptr("0.1.0"),
	// 				SystemComponents: []*armhybridkubernetes.SystemComponent{
	// 					{
	// 						Type: to.Ptr("Strato"),
	// 						CurrentVersion: to.Ptr("0.1.0"),
	// 						UserSpecifiedVersion: to.Ptr("0.1.1"),
	// 					},
	// 				},
	// 			},
	// 			AzureHybridBenefit: to.Ptr(armhybridkubernetes.AzureHybridBenefitNotApplicable),
	// 			Distribution: to.Ptr("AKS"),
	// 			DistributionVersion: to.Ptr("1.0"),
	// 			KubernetesVersion: to.Ptr("1.17.0"),
	// 			MiscellaneousProperties: map[string]*string{
	// 				"createCorrelationId": to.Ptr("8e42616e-74dc-4117-9aaa-71ad5d0180d8"),
	// 				"infrastructureVersion": to.Ptr("1.1"),
	// 			},
	// 			OidcIssuerProfile: &armhybridkubernetes.OidcIssuerProfile{
	// 				Enabled: to.Ptr(true),
	// 				IssuerURL: to.Ptr("https://oidcdiscovery-northamerica-endpoint-gbcge4adgqebgxev.z01.azurefd.net/885hc665-0g4a-4a4b-732b-e4950new3bed/"),
	// 			},
	// 			PrivateLinkState: to.Ptr(armhybridkubernetes.PrivateLinkStateDisabled),
	// 			ProvisioningState: to.Ptr(armhybridkubernetes.ProvisioningStateSucceeded),
	// 			SecurityProfile: &armhybridkubernetes.SecurityProfile{
	// 				WorkloadIdentity: &armhybridkubernetes.SecurityProfileWorkloadIdentity{
	// 					Enabled: to.Ptr(true),
	// 				},
	// 			},
	// 			TotalNodeCount: to.Ptr[int32](2),
	// 		},
	// 		SystemData: &armhybridkubernetes.SystemData{
	// 			CreatedAt: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-12-17T07:06:33.9173186Z"); return t}()),
	// 			CreatedBy: to.Ptr("sikasire@microsoft.com"),
	// 			CreatedByType: to.Ptr(armhybridkubernetes.CreatedByTypeUser),
	// 			LastModifiedAt: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-12-17T07:14:58.865041Z"); return t}()),
	// 			LastModifiedBy: to.Ptr("2d2a754c-cade-4935-83d4-ce413c5a3910"),
	// 			LastModifiedByType: to.Ptr(armhybridkubernetes.CreatedByTypeApplication),
	// 		},
	// 		Tags: map[string]*string{
	// 		},
	// 	},
	// }
}

// Generated from example definition: 2025-12-01-preview/GetProvisionedClusterExample.json
func ExampleConnectedClusterClient_Get_getProvisionedClusterExample() {
	cred, err := azidentity.NewDefaultAzureCredential(nil)
	if err != nil {
		log.Fatalf("failed to obtain a credential: %v", err)
	}
	ctx := context.Background()
	clientFactory, err := armhybridkubernetes.NewClientFactory("1bfbb5d0-917e-4346-9026-1d3b344417f5", cred, nil)
	if err != nil {
		log.Fatalf("failed to create client: %v", err)
	}
	res, err := clientFactory.NewConnectedClusterClient().Get(ctx, "k8sc-rg", "testCluster", nil)
	if err != nil {
		log.Fatalf("failed to finish the request: %v", err)
	}
	// You could use response here. We use blank identifier for just demo purposes.
	_ = res
	// If the HTTP response code is 200 as defined in example definition, your response structure would look as follows. Please pay attention that all the values in the output are fake values for just demo purposes.
	// res = armhybridkubernetes.ConnectedClusterClientGetResponse{
	// 	ConnectedCluster: &armhybridkubernetes.ConnectedCluster{
	// 		Name: to.Ptr("connectedCluster1"),
	// 		Type: to.Ptr("Microsoft.Kubernetes/connectedClusters"),
	// 		ID: to.Ptr("/subscriptions/1bfbb5d0-917e-4346-9026-1d3b344417f5/resourceGroups/akkeshar/providers/Microsoft.Kubernetes/connectedClusters/connectedCluster1"),
	// 		Identity: &armhybridkubernetes.ConnectedClusterIdentity{
	// 			Type: to.Ptr(armhybridkubernetes.ResourceIdentityTypeSystemAssigned),
	// 			PrincipalID: to.Ptr("d8cd1fd9-154f-4da7-b348-595f283c13a3"),
	// 			TenantID: to.Ptr("72f988bf-86f1-41af-91ab-2d7cd011db47"),
	// 		},
	// 		Kind: to.Ptr(armhybridkubernetes.ConnectedClusterKindProvisionedCluster),
	// 		Location: to.Ptr("East US"),
	// 		Properties: &armhybridkubernetes.ConnectedClusterProperties{
	// 			AADProfile: &armhybridkubernetes.AADProfile{
	// 				AdminGroupObjectIDs: []*string{
	// 					to.Ptr("56f988bf-86f1-41af-91ab-2d7cd011db47"),
	// 				},
	// 				EnableAzureRBAC: to.Ptr(true),
	// 				TenantID: to.Ptr("82f988bf-86f1-41af-91ab-2d7cd011db47"),
	// 			},
	// 			AgentPublicKeyCertificate: to.Ptr("MIICYzCCAcygAwIBAgIBADANBgkqhkiG9w0BAQUFADAuMQswCQYDVQQGEwJVUzEMMAoGA1UEChMDSUJNMREwDwYDVQQLEwhMb2NhbCBDQTAeFw05OTEyMjIwNTAwMDBaFw0wMDEyMjMwNDU5NTlaMC4xCzAJBgNVBAYTAlVTMQwwCgYDVQQKEwNJQk0xETAPBgNVBAsTCExvY2FsIENBMIGfMA0GCSqGSIb3DQEBAQUAA4GNADCBiQKBgQD2bZEo7xGaX2/0GHkrNFZvlxBou9v1Jmt/PDiTMPve8r9FeJAQ0QdvFST/0JPQYD20rH0bimdDLgNdNynmyRoS2S/IInfpmf69iyc2G0TPyRvmHIiOZbdCd+YBHQi1adkj17NDcWj6S14tVurFX73zx0sNoMS79q3tuXKrDsxeuwIDAQABo4GQMIGNMEsGCVUdDwGG+EIBDQQ+EzxHZW5lcmF0ZWQgYnkgdGhlIFNlY3VyZVdheSBTZWN1cml0eSBTZXJ2ZXIgZm9yIE9TLzM5MCAoUkFDRikwDgYDVR0PAQH/BAQDAgAGMA8GA1UdEwEB/wQFMAMBAf8wHQYDVR0OBBYEFJ3+ocRyCTJw067dLSwr/nalx6YMMA0GCSqGSIb3DQEBBQUAA4GBAMaQzt+zaj1GU77yzlr8iiMBXgdQrwsZZWJo5exnAucJAEYQZmOfyLiM D6oYq+ZnfvM0n8G/Y79q8nhwvuxpYOnRSAXFp6xSkrIOeZtJMY1h00LKp/JX3Ng1svZ2agE126JHsQ0bhzN5TKsYfbwfTwfjdWAGy6Vf1nYi/rO+ryMO"),
	// 			AgentVersion: to.Ptr("0.1.0"),
	// 			ArcAgentProfile: &armhybridkubernetes.ArcAgentProfile{
	// 				AgentAutoUpgrade: to.Ptr(armhybridkubernetes.AutoUpgradeOptionsEnabled),
	// 				AgentState: to.Ptr("Succeeded"),
	// 				DesiredAgentVersion: to.Ptr("0.1.0"),
	// 				SystemComponents: []*armhybridkubernetes.SystemComponent{
	// 					{
	// 						Type: to.Ptr("Strato"),
	// 						CurrentVersion: to.Ptr("0.1.0"),
	// 						MajorVersion: to.Ptr[int32](0),
	// 						UserSpecifiedVersion: to.Ptr("0.1.1"),
	// 					},
	// 				},
	// 			},
	// 			AzureHybridBenefit: to.Ptr(armhybridkubernetes.AzureHybridBenefitNotApplicable),
	// 			Distribution: to.Ptr("AKS"),
	// 			DistributionVersion: to.Ptr("1.0"),
	// 			KubernetesVersion: to.Ptr("1.17.0"),
	// 			MiscellaneousProperties: map[string]*string{
	// 				"createCorrelationId": to.Ptr("8e42616e-74dc-4117-9aaa-71ad5d0180d8"),
	// 				"infrastructureVersion": to.Ptr("1.1"),
	// 			},
	// 			PrivateLinkState: to.Ptr(armhybridkubernetes.PrivateLinkStateDisabled),
	// 			ProvisioningState: to.Ptr(armhybridkubernetes.ProvisioningStateSucceeded),
	// 			TotalNodeCount: to.Ptr[int32](2),
	// 		},
	// 		SystemData: &armhybridkubernetes.SystemData{
	// 			CreatedAt: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-12-17T07:06:33.9173186Z"); return t}()),
	// 			CreatedBy: to.Ptr("sikasire@microsoft.com"),
	// 			CreatedByType: to.Ptr(armhybridkubernetes.CreatedByTypeUser),
	// 			LastModifiedAt: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-12-17T07:14:58.865041Z"); return t}()),
	// 			LastModifiedBy: to.Ptr("2d2a754c-cade-4935-83d4-ce413c5a3910"),
	// 			LastModifiedByType: to.Ptr(armhybridkubernetes.CreatedByTypeApplication),
	// 		},
	// 		Tags: map[string]*string{
	// 		},
	// 	},
	// }
}

// Generated from example definition: 2025-12-01-preview/GetClustersByResourceGroupExample.json
func ExampleConnectedClusterClient_NewListByResourceGroupPager() {
	cred, err := azidentity.NewDefaultAzureCredential(nil)
	if err != nil {
		log.Fatalf("failed to obtain a credential: %v", err)
	}
	ctx := context.Background()
	clientFactory, err := armhybridkubernetes.NewClientFactory("1bfbb5d0-917e-4346-9026-1d3b344417f5", cred, nil)
	if err != nil {
		log.Fatalf("failed to create client: %v", err)
	}
	pager := clientFactory.NewConnectedClusterClient().NewListByResourceGroupPager("k8sc-rg", nil)
	for pager.More() {
		page, err := pager.NextPage(ctx)
		if err != nil {
			log.Fatalf("failed to advance page: %v", err)
		}
		for _, v := range page.Value {
			// You could use page here. We use blank identifier for just demo purposes.
			_ = v
		}
		// If the HTTP response code is 200 as defined in example definition, your page structure would look as follows. Please pay attention that all the values in the output are fake values for just demo purposes.
		// page = armhybridkubernetes.ConnectedClusterClientListByResourceGroupResponse{
		// 	ConnectedClusterList: armhybridkubernetes.ConnectedClusterList{
		// 		NextLink: to.Ptr("https://serviceRoot/subscriptions/subId/resourcegroups/resourceGroupName/providers/Microsoft.Kubernetes/connectedClusters?api-version=2019-11-01-preview&$skiptoken=X'12345'"),
		// 		Value: []*armhybridkubernetes.ConnectedCluster{
		// 			{
		// 				Name: to.Ptr("connectedCluster1"),
		// 				Type: to.Ptr("Microsoft.Kubernetes/connectedClusters"),
		// 				ID: to.Ptr("/subscriptions/1bfbb5d0-917e-4346-9026-1d3b344417f5/resourceGroups/akkeshar/providers/Microsoft.Kubernetes/connectedClusters/connectedCluster1"),
		// 				Identity: &armhybridkubernetes.ConnectedClusterIdentity{
		// 					Type: to.Ptr(armhybridkubernetes.ResourceIdentityTypeSystemAssigned),
		// 					PrincipalID: to.Ptr("d8cd1fd9-154f-4da7-b348-595f283c13a3"),
		// 					TenantID: to.Ptr("72f988bf-86f1-41af-91ab-2d7cd011db47"),
		// 				},
		// 				Location: to.Ptr("East US"),
		// 				Properties: &armhybridkubernetes.ConnectedClusterProperties{
		// 					AgentPublicKeyCertificate: to.Ptr("MIICYzCCAcygAwIBAgIBADANBgkqhkiG9w0BAQUFADAuMQswCQYDVQQGEwJVUzEMMAoGA1UEChMDSUJNMREwDwYDVQQLEwhMb2NhbCBDQTAeFw05OTEyMjIwNTAwMDBaFw0wMDEyMjMwNDU5NTlaMC4xCzAJBgNVBAYTAlVTMQwwCgYDVQQKEwNJQk0xETAPBgNVBAsTCExvY2FsIENBMIGfMA0GCSqGSIb3DQEBAQUAA4GNADCBiQKBgQD2bZEo7xGaX2/0GHkrNFZvlxBou9v1Jmt/PDiTMPve8r9FeJAQ0QdvFST/0JPQYD20rH0bimdDLgNdNynmyRoS2S/IInfpmf69iyc2G0TPyRvmHIiOZbdCd+YBHQi1adkj17NDcWj6S14tVurFX73zx0sNoMS79q3tuXKrDsxeuwIDAQABo4GQMIGNMEsGCVUdDwGG+EIBDQQ+EzxHZW5lcmF0ZWQgYnkgdGhlIFNlY3VyZVdheSBTZWN1cml0eSBTZXJ2ZXIgZm9yIE9TLzM5MCAoUkFDRikwDgYDVR0PAQH/BAQDAgAGMA8GA1UdEwEB/wQFMAMBAf8wHQYDVR0OBBYEFJ3+ocRyCTJw067dLSwr/nalx6YMMA0GCSqGSIb3DQEBBQUAA4GBAMaQzt+zaj1GU77yzlr8iiMBXgdQrwsZZWJo5exnAucJAEYQZmOfyLiM D6oYq+ZnfvM0n8G/Y79q8nhwvuxpYOnRSAXFp6xSkrIOeZtJMY1h00LKp/JX3Ng1svZ2agE126JHsQ0bhzN5TKsYfbwfTwfjdWAGy6Vf1nYi/rO+ryMO"),
		// 					AgentVersion: to.Ptr("0.1.0"),
		// 					AzureHybridBenefit: to.Ptr(armhybridkubernetes.AzureHybridBenefitNotApplicable),
		// 					Distribution: to.Ptr("AKS"),
		// 					DistributionVersion: to.Ptr("1.0"),
		// 					KubernetesVersion: to.Ptr("1.17.0"),
		// 					MiscellaneousProperties: map[string]*string{
		// 						"createCorrelationId": to.Ptr("8e42616e-74dc-4117-9aaa-71ad5d0180d8"),
		// 						"infrastructureVersion": to.Ptr("1.1"),
		// 					},
		// 					PrivateLinkState: to.Ptr(armhybridkubernetes.PrivateLinkStateDisabled),
		// 					ProvisioningState: to.Ptr(armhybridkubernetes.ProvisioningStateSucceeded),
		// 					TotalNodeCount: to.Ptr[int32](2),
		// 				},
		// 				SystemData: &armhybridkubernetes.SystemData{
		// 					CreatedAt: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-12-17T07:06:33.9173186Z"); return t}()),
		// 					CreatedBy: to.Ptr("sikasire@microsoft.com"),
		// 					CreatedByType: to.Ptr(armhybridkubernetes.CreatedByTypeUser),
		// 					LastModifiedAt: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-12-17T07:06:33.9173186Z"); return t}()),
		// 					LastModifiedBy: to.Ptr("sikasire@microsoft.com"),
		// 					LastModifiedByType: to.Ptr(armhybridkubernetes.CreatedByTypeUser),
		// 				},
		// 				Tags: map[string]*string{
		// 				},
		// 			},
		// 			{
		// 				Name: to.Ptr("connectedCluster1"),
		// 				Type: to.Ptr("Microsoft.Kubernetes/connectedClusters"),
		// 				ID: to.Ptr("/subscriptions/1bfbb5d0-917e-4346-9026-1d3b344417f5/resourceGroups/akkeshar/providers/Microsoft.Kubernetes/connectedClusters/connectedCluster1"),
		// 				Identity: &armhybridkubernetes.ConnectedClusterIdentity{
		// 					Type: to.Ptr(armhybridkubernetes.ResourceIdentityTypeSystemAssigned),
		// 					PrincipalID: to.Ptr("d8cd1fd9-154f-4da7-b348-595f283c13a3"),
		// 					TenantID: to.Ptr("72f988bf-86f1-41af-91ab-2d7cd011db47"),
		// 				},
		// 				Location: to.Ptr("East US"),
		// 				Properties: &armhybridkubernetes.ConnectedClusterProperties{
		// 					AgentPublicKeyCertificate: to.Ptr("XIICYzCCAcygAwIBAgIBADANBgkqhkiG9w0BAQUFADAuMQswCQYDVQQGEwJVUzEMMAoGA1UEChMDSUJNMREwDwYDVQQLEwhMb2NhbCBDQTAeFw05OTEyMjIwNTAwMDBaFw0wMDEyMjMwNDU5NTlaMC4xCzAJBgNVBAYTAlVTMQwwCgYDVQQKEwNJQk0xETAPBgNVBAsTCExvY2FsIENBMIGfMA0GCSqGSIb3DQEBAQUAA4GNADCBiQKBgQD2bZEo7xGaX2/0GHkrNFZvlxBou9v1Jmt/PDiTMPve8r9FeJAQ0QdvFST/0JPQYD20rH0bimdDLgNdNynmyRoS2S/IInfpmf69iyc2G0TPyRvmHIiOZbdCd+YBHQi1adkj17NDcWj6S14tVurFX73zx0sNoMS79q3tuXKrDsxeuwIDAQABo4GQMIGNMEsGCVUdDwGG+EIBDQQ+EzxHZW5lcmF0ZWQgYnkgdGhlIFNlY3VyZVdheSBTZWN1cml0eSBTZXJ2ZXIgZm9yIE9TLzM5MCAoUkFDRikwDgYDVR0PAQH/BAQDAgAGMA8GA1UdEwEB/wQFMAMBAf8wHQYDVR0OBBYEFJ3+ocRyCTJw067dLSwr/nalx6YMMA0GCSqGSIb3DQEBBQUAA4GBAMaQzt+zaj1GU77yzlr8iiMBXgdQrwsZZWJo5exnAucJAEYQZmOfyLiM D6oYq+ZnfvM0n8G/Y79q8nhwvuxpYOnRSAXFp6xSkrIOeZtJMY1h00LKp/JX3Ng1svZ2agE126JHsQ0bhzN5TKsYfbwfTwfjdWAGy6Vf1nYi/rO+ryMO"),
		// 					AgentVersion: to.Ptr("0.1.0"),
		// 					AzureHybridBenefit: to.Ptr(armhybridkubernetes.AzureHybridBenefitNotApplicable),
		// 					Distribution: to.Ptr("AKS"),
		// 					DistributionVersion: to.Ptr("1.0"),
		// 					KubernetesVersion: to.Ptr("1.1"),
		// 					MiscellaneousProperties: map[string]*string{
		// 						"createCorrelationId": to.Ptr("8e42616e-74dc-4117-9aaa-71ad5d0180d8"),
		// 						"infrastructureVersion": to.Ptr("1.1"),
		// 					},
		// 					PrivateLinkScopeResourceID: to.Ptr("/subscriptions/{subscriptionId}/resourceGroups/myResourceGroup/providers/Microsoft.HybridCompute/privateLinkScopes/privateLinkScopeName"),
		// 					PrivateLinkState: to.Ptr(armhybridkubernetes.PrivateLinkStateEnabled),
		// 					ProvisioningState: to.Ptr(armhybridkubernetes.ProvisioningStateSucceeded),
		// 					TotalNodeCount: to.Ptr[int32](2),
		// 				},
		// 				SystemData: &armhybridkubernetes.SystemData{
		// 					CreatedAt: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-12-17T07:06:33.9173186Z"); return t}()),
		// 					CreatedBy: to.Ptr("sikasire@microsoft.com"),
		// 					CreatedByType: to.Ptr(armhybridkubernetes.CreatedByTypeUser),
		// 					LastModifiedAt: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-12-17T07:06:33.9173186Z"); return t}()),
		// 					LastModifiedBy: to.Ptr("sikasire@microsoft.com"),
		// 					LastModifiedByType: to.Ptr(armhybridkubernetes.CreatedByTypeUser),
		// 				},
		// 				Tags: map[string]*string{
		// 				},
		// 			},
		// 		},
		// 	},
		// }
	}
}

// Generated from example definition: 2025-12-01-preview/GetClustersBySubscriptionExample.json
func ExampleConnectedClusterClient_NewListBySubscriptionPager() {
	cred, err := azidentity.NewDefaultAzureCredential(nil)
	if err != nil {
		log.Fatalf("failed to obtain a credential: %v", err)
	}
	ctx := context.Background()
	clientFactory, err := armhybridkubernetes.NewClientFactory("1bfbb5d0-917e-4346-9026-1d3b344417f5", cred, nil)
	if err != nil {
		log.Fatalf("failed to create client: %v", err)
	}
	pager := clientFactory.NewConnectedClusterClient().NewListBySubscriptionPager(nil)
	for pager.More() {
		page, err := pager.NextPage(ctx)
		if err != nil {
			log.Fatalf("failed to advance page: %v", err)
		}
		for _, v := range page.Value {
			// You could use page here. We use blank identifier for just demo purposes.
			_ = v
		}
		// If the HTTP response code is 200 as defined in example definition, your page structure would look as follows. Please pay attention that all the values in the output are fake values for just demo purposes.
		// page = armhybridkubernetes.ConnectedClusterClientListBySubscriptionResponse{
		// 	ConnectedClusterList: armhybridkubernetes.ConnectedClusterList{
		// 		NextLink: to.Ptr("https://serviceRoot/subscriptions/subId/resourcegroups/resourceGroupName/providers/Microsoft.Kubernetes/connectedClusters?api-version=2019-11-01-preview&$skiptoken=X'12345'"),
		// 		Value: []*armhybridkubernetes.ConnectedCluster{
		// 			{
		// 				Name: to.Ptr("connectedCluster1"),
		// 				Type: to.Ptr("Microsoft.Kubernetes/connectedClusters"),
		// 				ID: to.Ptr("/subscriptions/1bfbb5d0-917e-4346-9026-1d3b344417f5/resourceGroups/akkeshar/providers/Microsoft.Kubernetes/connectedClusters/connectedCluster1"),
		// 				Identity: &armhybridkubernetes.ConnectedClusterIdentity{
		// 					Type: to.Ptr(armhybridkubernetes.ResourceIdentityTypeSystemAssigned),
		// 					PrincipalID: to.Ptr("d8cd1fd9-154f-4da7-b348-595f283c13a3"),
		// 					TenantID: to.Ptr("72f988bf-86f1-41af-91ab-2d7cd011db47"),
		// 				},
		// 				Location: to.Ptr("East US"),
		// 				Properties: &armhybridkubernetes.ConnectedClusterProperties{
		// 					AgentPublicKeyCertificate: to.Ptr("MIICYzCCAcygAwIBAgIBADANBgkqhkiG9w0BAQUFADAuMQswCQYDVQQGEwJVUzEMMAoGA1UEChMDSUJNMREwDwYDVQQLEwhMb2NhbCBDQTAeFw05OTEyMjIwNTAwMDBaFw0wMDEyMjMwNDU5NTlaMC4xCzAJBgNVBAYTAlVTMQwwCgYDVQQKEwNJQk0xETAPBgNVBAsTCExvY2FsIENBMIGfMA0GCSqGSIb3DQEBAQUAA4GNADCBiQKBgQD2bZEo7xGaX2/0GHkrNFZvlxBou9v1Jmt/PDiTMPve8r9FeJAQ0QdvFST/0JPQYD20rH0bimdDLgNdNynmyRoS2S/IInfpmf69iyc2G0TPyRvmHIiOZbdCd+YBHQi1adkj17NDcWj6S14tVurFX73zx0sNoMS79q3tuXKrDsxeuwIDAQABo4GQMIGNMEsGCVUdDwGG+EIBDQQ+EzxHZW5lcmF0ZWQgYnkgdGhlIFNlY3VyZVdheSBTZWN1cml0eSBTZXJ2ZXIgZm9yIE9TLzM5MCAoUkFDRikwDgYDVR0PAQH/BAQDAgAGMA8GA1UdEwEB/wQFMAMBAf8wHQYDVR0OBBYEFJ3+ocRyCTJw067dLSwr/nalx6YMMA0GCSqGSIb3DQEBBQUAA4GBAMaQzt+zaj1GU77yzlr8iiMBXgdQrwsZZWJo5exnAucJAEYQZmOfyLiM D6oYq+ZnfvM0n8G/Y79q8nhwvuxpYOnRSAXFp6xSkrIOeZtJMY1h00LKp/JX3Ng1svZ2agE126JHsQ0bhzN5TKsYfbwfTwfjdWAGy6Vf1nYi/rO+ryMO"),
		// 					AgentVersion: to.Ptr("0.1.0"),
		// 					AzureHybridBenefit: to.Ptr(armhybridkubernetes.AzureHybridBenefitNotApplicable),
		// 					Distribution: to.Ptr("AKS"),
		// 					DistributionVersion: to.Ptr("1.0"),
		// 					KubernetesVersion: to.Ptr("1.17.0"),
		// 					MiscellaneousProperties: map[string]*string{
		// 						"createCorrelationId": to.Ptr("8e42616e-74dc-4117-9aaa-71ad5d0180d8"),
		// 						"infrastructureVersion": to.Ptr("1.1"),
		// 					},
		// 					PrivateLinkState: to.Ptr(armhybridkubernetes.PrivateLinkStateDisabled),
		// 					ProvisioningState: to.Ptr(armhybridkubernetes.ProvisioningStateSucceeded),
		// 					TotalNodeCount: to.Ptr[int32](2),
		// 				},
		// 				SystemData: &armhybridkubernetes.SystemData{
		// 					CreatedAt: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-12-17T07:06:33.9173186Z"); return t}()),
		// 					CreatedBy: to.Ptr("sikasire@microsoft.com"),
		// 					CreatedByType: to.Ptr(armhybridkubernetes.CreatedByTypeUser),
		// 					LastModifiedAt: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-12-17T07:06:33.9173186Z"); return t}()),
		// 					LastModifiedBy: to.Ptr("sikasire@microsoft.com"),
		// 					LastModifiedByType: to.Ptr(armhybridkubernetes.CreatedByTypeUser),
		// 				},
		// 				Tags: map[string]*string{
		// 				},
		// 			},
		// 			{
		// 				Name: to.Ptr("connectedCluster2"),
		// 				Type: to.Ptr("Microsoft.Kubernetes/connectedClusters"),
		// 				ID: to.Ptr("/subscriptions/1bfbb5d0-917e-4346-9026-1d3b344417f5/resourceGroups/akkeshar/providers/Microsoft.Kubernetes/connectedClusters/connectedCluster2"),
		// 				Identity: &armhybridkubernetes.ConnectedClusterIdentity{
		// 					Type: to.Ptr(armhybridkubernetes.ResourceIdentityTypeSystemAssigned),
		// 					PrincipalID: to.Ptr("d8cd1fd9-154f-4da7-b348-595f283c13a3"),
		// 					TenantID: to.Ptr("72f988bf-86f1-41af-91ab-2d7cd011db47"),
		// 				},
		// 				Location: to.Ptr("East US"),
		// 				Properties: &armhybridkubernetes.ConnectedClusterProperties{
		// 					AgentPublicKeyCertificate: to.Ptr("XIICYzCCAcygAwIBAgIBADANBgkqhkiG9w0BAQUFADAuMQswCQYDVQQGEwJVUzEMMAoGA1UEChMDSUJNMREwDwYDVQQLEwhMb2NhbCBDQTAeFw05OTEyMjIwNTAwMDBaFw0wMDEyMjMwNDU5NTlaMC4xCzAJBgNVBAYTAlVTMQwwCgYDVQQKEwNJQk0xETAPBgNVBAsTCExvY2FsIENBMIGfMA0GCSqGSIb3DQEBAQUAA4GNADCBiQKBgQD2bZEo7xGaX2/0GHkrNFZvlxBou9v1Jmt/PDiTMPve8r9FeJAQ0QdvFST/0JPQYD20rH0bimdDLgNdNynmyRoS2S/IInfpmf69iyc2G0TPyRvmHIiOZbdCd+YBHQi1adkj17NDcWj6S14tVurFX73zx0sNoMS79q3tuXKrDsxeuwIDAQABo4GQMIGNMEsGCVUdDwGG+EIBDQQ+EzxHZW5lcmF0ZWQgYnkgdGhlIFNlY3VyZVdheSBTZWN1cml0eSBTZXJ2ZXIgZm9yIE9TLzM5MCAoUkFDRikwDgYDVR0PAQH/BAQDAgAGMA8GA1UdEwEB/wQFMAMBAf8wHQYDVR0OBBYEFJ3+ocRyCTJw067dLSwr/nalx6YMMA0GCSqGSIb3DQEBBQUAA4GBAMaQzt+zaj1GU77yzlr8iiMBXgdQrwsZZWJo5exnAucJAEYQZmOfyLiM D6oYq+ZnfvM0n8G/Y79q8nhwvuxpYOnRSAXFp6xSkrIOeZtJMY1h00LKp/JX3Ng1svZ2agE126JHsQ0bhzN5TKsYfbwfTwfjdWAGy6Vf1nYi/rO+ryMO"),
		// 					AgentVersion: to.Ptr("0.1.0"),
		// 					AzureHybridBenefit: to.Ptr(armhybridkubernetes.AzureHybridBenefitNotApplicable),
		// 					Distribution: to.Ptr("AKS"),
		// 					DistributionVersion: to.Ptr("1.0"),
		// 					KubernetesVersion: to.Ptr("1.16.3"),
		// 					MiscellaneousProperties: map[string]*string{
		// 						"createCorrelationId": to.Ptr("8e42616e-74dc-4117-9aaa-71ad5d0180d8"),
		// 						"infrastructureVersion": to.Ptr("1.1"),
		// 					},
		// 					PrivateLinkScopeResourceID: to.Ptr("/subscriptions/{subscriptionId}/resourceGroups/myResourceGroup/providers/Microsoft.HybridCompute/privateLinkScopes/privateLinkScopeName"),
		// 					PrivateLinkState: to.Ptr(armhybridkubernetes.PrivateLinkStateEnabled),
		// 					ProvisioningState: to.Ptr(armhybridkubernetes.ProvisioningStateSucceeded),
		// 					TotalNodeCount: to.Ptr[int32](4),
		// 				},
		// 				SystemData: &armhybridkubernetes.SystemData{
		// 					CreatedAt: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-12-17T07:06:33.9173186Z"); return t}()),
		// 					CreatedBy: to.Ptr("sikasire@microsoft.com"),
		// 					CreatedByType: to.Ptr(armhybridkubernetes.CreatedByTypeUser),
		// 					LastModifiedAt: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-12-17T07:06:33.9173186Z"); return t}()),
		// 					LastModifiedBy: to.Ptr("sikasire@microsoft.com"),
		// 					LastModifiedByType: to.Ptr(armhybridkubernetes.CreatedByTypeUser),
		// 				},
		// 				Tags: map[string]*string{
		// 				},
		// 			},
		// 		},
		// 	},
		// }
	}
}

// Generated from example definition: 2025-12-01-preview/ConnectedClustersListClusterCredentialResultCSPAAD.json
func ExampleConnectedClusterClient_ListClusterUserCredential_listClusterUserCredentialExample() {
	cred, err := azidentity.NewDefaultAzureCredential(nil)
	if err != nil {
		log.Fatalf("failed to obtain a credential: %v", err)
	}
	ctx := context.Background()
	clientFactory, err := armhybridkubernetes.NewClientFactory("1bfbb5d0-917e-4346-9026-1d3b344417f5", cred, nil)
	if err != nil {
		log.Fatalf("failed to create client: %v", err)
	}
	res, err := clientFactory.NewConnectedClusterClient().ListClusterUserCredential(ctx, "k8sc-rg", "testCluster", armhybridkubernetes.ListClusterUserCredentialProperties{
		AuthenticationMethod: to.Ptr(armhybridkubernetes.AuthenticationMethodAAD),
		ClientProxy:          to.Ptr(true),
	}, nil)
	if err != nil {
		log.Fatalf("failed to finish the request: %v", err)
	}
	// You could use response here. We use blank identifier for just demo purposes.
	_ = res
	// If the HTTP response code is 200 as defined in example definition, your response structure would look as follows. Please pay attention that all the values in the output are fake values for just demo purposes.
	// res = armhybridkubernetes.ConnectedClusterClientListClusterUserCredentialResponse{
	// 	CredentialResults: &armhybridkubernetes.CredentialResults{
	// 		HybridConnectionConfig: &armhybridkubernetes.HybridConnectionConfig{
	// 			ExpirationTime: to.Ptr[int64](1631196183),
	// 			HybridConnectionName: to.Ptr("microsoft.kubernetes/connectedclusters/229dc73f7b07196c79a93d4362d9c7fc4ed34df3e95290d27c56cec2dbb82865/1631185383340987904"),
	// 			Relay: to.Ptr("azgnrelay-ph0-l1"),
	// 			RelayTid: to.Ptr("33e01921-4d64-4f8c-a055-5bdaffd5e33d"),
	// 			RelayType: to.Ptr("byor"),
	// 			Token: to.Ptr("SharedAccessSignature 123456789034675890pbduwegiavifkuw647o02423bbhfouseb"),
	// 		},
	// 		Kubeconfigs: []*armhybridkubernetes.CredentialResult{
	// 			{
	// 				Name: to.Ptr("credentialName1"),
	// 				Value: []byte("WVhCcFZtVnljMmx2YmpvZ2RqRU5DbU5zZFhOMFpYSnpPZzBLTFNCamJIVnpkR1Z5T2cwS0lDQWdJR05sY25ScFptbGpZWFJsTFdGMWRHaHZjbWwwZVMxa1lYUmhPaUJNVXpCMFRGTXhRMUpWWkVwVWFVSkVVbFpLVlZOVldrcFJNRVpWVWxNd2RFeFRNSFJEYXpGS1UxVldOR1ZyVGtSUldFVnlXakJHTTFOVlNrSmFNR3hTVlRKMGRWZHNXblphZWtwMVZtcEtWbU5ZWkV0amJsWllUVEZDU0dWclJrOVJiV1J5WTFkb2NtRlZZelZrZWtKRFVWWkdlbEpyUmtWUlZUUkxWRlpHZW1Rd1RsSlhWVkpYVlZaR1JWSllaRXRoYkdWc1NsRXdiSEZSVlRWRFdqSjBlR0ZIZEhCU2Vtd3pUVVZLUWxWVlZrZFJWVVpRVVRCR2JrOUZSazVUVld4RVVUSmtURkV3Um01U1ZVVXdWMWhDTlVOc1VtdFVNVkpTVTFkTmRtVnNhRVJsUjNoVFpXdFZNRg=="),
	// 			},
	// 		},
	// 	},
	// }
}

// Generated from example definition: 2025-12-01-preview/ConnectedClustersListClusterCredentialResultCSPToken.json
func ExampleConnectedClusterClient_ListClusterUserCredential_listClusterUserCredentialNonAadExample() {
	cred, err := azidentity.NewDefaultAzureCredential(nil)
	if err != nil {
		log.Fatalf("failed to obtain a credential: %v", err)
	}
	ctx := context.Background()
	clientFactory, err := armhybridkubernetes.NewClientFactory("1bfbb5d0-917e-4346-9026-1d3b344417f5", cred, nil)
	if err != nil {
		log.Fatalf("failed to create client: %v", err)
	}
	res, err := clientFactory.NewConnectedClusterClient().ListClusterUserCredential(ctx, "k8sc-rg", "testCluster", armhybridkubernetes.ListClusterUserCredentialProperties{
		AuthenticationMethod: to.Ptr(armhybridkubernetes.AuthenticationMethodToken),
		ClientProxy:          to.Ptr(true),
	}, nil)
	if err != nil {
		log.Fatalf("failed to finish the request: %v", err)
	}
	// You could use response here. We use blank identifier for just demo purposes.
	_ = res
	// If the HTTP response code is 200 as defined in example definition, your response structure would look as follows. Please pay attention that all the values in the output are fake values for just demo purposes.
	// res = armhybridkubernetes.ConnectedClusterClientListClusterUserCredentialResponse{
	// 	CredentialResults: &armhybridkubernetes.CredentialResults{
	// 		HybridConnectionConfig: &armhybridkubernetes.HybridConnectionConfig{
	// 			ExpirationTime: to.Ptr[int64](1631196183),
	// 			HybridConnectionName: to.Ptr("microsoft.kubernetes/connectedclusters/229dc73f7b07196c79a93d4362d9c7fc4ed34df3e95290d27c56cec2dbb82865/1631185383340987904"),
	// 			Relay: to.Ptr("azgnrelay-ph0-l1"),
	// 			RelayTid: to.Ptr("33e01921-4d64-4f8c-a055-5bdaffd5e33d"),
	// 			RelayType: to.Ptr("byor"),
	// 			Token: to.Ptr("SharedAccessSignature 123456789034675890pbduwegiavifkuw647o02423bbhfouseb"),
	// 		},
	// 		Kubeconfigs: []*armhybridkubernetes.CredentialResult{
	// 			{
	// 				Name: to.Ptr("credentialName1"),
	// 				Value: []byte("WVhCcFZtVnljMmx2YmpvZ2RqRU5DbU5zZFhOMFpYSnpPZzBLTFNCamJIVnpkR1Z5T2cwS0lDQWdJR05sY25ScFptbGpZWFJsTFdGMWRHaHZjbWwwZVMxa1lYUmhPaUJNVXpCMFRGTXhRMUpWWkVwVWFVSkVVbFpLVlZOVldrcFJNRVpWVWxNd2RFeFRNSFJEYXpGS1UxVldOR1ZyVGtSUldFVnlXakJHTTFOVlNrSmFNR3hTVlRKMGRWZHNXblphZWtwMVZtcEtWbU5ZWkV0amJsWllUVEZDU0dWclJrOVJiV1J5WTFkb2NtRlZZelZrZWtKRFVWWkdlbEpyUmtWUlZUUkxWRlpHZW1Rd1RsSlhWVkpYVlZaR1JWSllaRXRoYkdWc1NsRXdiSEZSVlRWRFdqSjBlR0ZIZEhCU2Vtd3pUVVZLUWxWVlZrZFJWVVpRVVRCR2JrOUZSazVUVld4RVVUSmtURkV3Um01U1ZVVXdWMWhDTlVOc1VtdFVNVkpTVTFkTmRtVnNhRVJsUjNoVFpXdFZNRg=="),
	// 			},
	// 		},
	// 	},
	// }
}

// Generated from example definition: 2025-12-01-preview/ConnectedClustersListClusterCredentialResultHPAAD.json
func ExampleConnectedClusterClient_ListClusterUserCredential_listClusterUserCredentialCspExample() {
	cred, err := azidentity.NewDefaultAzureCredential(nil)
	if err != nil {
		log.Fatalf("failed to obtain a credential: %v", err)
	}
	ctx := context.Background()
	clientFactory, err := armhybridkubernetes.NewClientFactory("1bfbb5d0-917e-4346-9026-1d3b344417f5", cred, nil)
	if err != nil {
		log.Fatalf("failed to create client: %v", err)
	}
	res, err := clientFactory.NewConnectedClusterClient().ListClusterUserCredential(ctx, "k8sc-rg", "testCluster", armhybridkubernetes.ListClusterUserCredentialProperties{
		AuthenticationMethod: to.Ptr(armhybridkubernetes.AuthenticationMethodAAD),
		ClientProxy:          to.Ptr(false),
	}, nil)
	if err != nil {
		log.Fatalf("failed to finish the request: %v", err)
	}
	// You could use response here. We use blank identifier for just demo purposes.
	_ = res
	// If the HTTP response code is 200 as defined in example definition, your response structure would look as follows. Please pay attention that all the values in the output are fake values for just demo purposes.
	// res = armhybridkubernetes.ConnectedClusterClientListClusterUserCredentialResponse{
	// 	CredentialResults: &armhybridkubernetes.CredentialResults{
	// 		Kubeconfigs: []*armhybridkubernetes.CredentialResult{
	// 			{
	// 				Name: to.Ptr("credentialName1"),
	// 				Value: []byte("WVhCcFZtVnljMmx2YmpvZ2RqRU5DbU5zZFhOMFpYSnpPZzBLTFNCamJIVnpkR1Z5T2cwS0lDQWdJR05sY25ScFptbGpZWFJsTFdGMWRHaHZjbWwwZVMxa1lYUmhPaUJNVXpCMFRGTXhRMUpWWkVwVWFVSkVVbFpLVlZOVldrcFJNRVpWVWxNd2RFeFRNSFJEYXpGS1UxVldOR1ZyVGtSUldFVnlXakJHTTFOVlNrSmFNR3hTVlRKMGRWZHNXblphZWtwMVZtcEtWbU5ZWkV0amJsWllUVEZDU0dWclJrOVJiV1J5WTFkb2NtRlZZelZrZWtKRFVWWkdlbEpyUmtWUlZUUkxWRlpHZW1Rd1RsSlhWVkpYVlZaR1JWSllaRXRoYkdWc1NsRXdiSEZSVlRWRFdqSjBlR0ZIZEhCU2Vtd3pUVVZLUWxWVlZrZFJWVVpRVVRCR2JrOUZSazVUVld4RVVUSmtURkV3Um01U1ZVVXdWMWhDTlVOc1VtdFVNVkpTVTFkTmRtVnNhRVJsUjNoVFpXdFZNRg=="),
	// 			},
	// 		},
	// 	},
	// }
}

// Generated from example definition: 2025-12-01-preview/ConnectedClustersListClusterCredentialResultHPToken.json
func ExampleConnectedClusterClient_ListClusterUserCredential_listClusterUserCredentialNonAadCspExample() {
	cred, err := azidentity.NewDefaultAzureCredential(nil)
	if err != nil {
		log.Fatalf("failed to obtain a credential: %v", err)
	}
	ctx := context.Background()
	clientFactory, err := armhybridkubernetes.NewClientFactory("1bfbb5d0-917e-4346-9026-1d3b344417f5", cred, nil)
	if err != nil {
		log.Fatalf("failed to create client: %v", err)
	}
	res, err := clientFactory.NewConnectedClusterClient().ListClusterUserCredential(ctx, "k8sc-rg", "testCluster", armhybridkubernetes.ListClusterUserCredentialProperties{
		AuthenticationMethod: to.Ptr(armhybridkubernetes.AuthenticationMethodToken),
		ClientProxy:          to.Ptr(false),
	}, nil)
	if err != nil {
		log.Fatalf("failed to finish the request: %v", err)
	}
	// You could use response here. We use blank identifier for just demo purposes.
	_ = res
	// If the HTTP response code is 200 as defined in example definition, your response structure would look as follows. Please pay attention that all the values in the output are fake values for just demo purposes.
	// res = armhybridkubernetes.ConnectedClusterClientListClusterUserCredentialResponse{
	// 	CredentialResults: &armhybridkubernetes.CredentialResults{
	// 		Kubeconfigs: []*armhybridkubernetes.CredentialResult{
	// 			{
	// 				Name: to.Ptr("credentialName1"),
	// 				Value: []byte("WVhCcFZtVnljMmx2YmpvZ2RqRU5DbU5zZFhOMFpYSnpPZzBLTFNCamJIVnpkR1Z5T2cwS0lDQWdJR05sY25ScFptbGpZWFJsTFdGMWRHaHZjbWwwZVMxa1lYUmhPaUJNVXpCMFRGTXhRMUpWWkVwVWFVSkVVbFpLVlZOVldrcFJNRVpWVWxNd2RFeFRNSFJEYXpGS1UxVldOR1ZyVGtSUldFVnlXakJHTTFOVlNrSmFNR3hTVlRKMGRWZHNXblphZWtwMVZtcEtWbU5ZWkV0amJsWllUVEZDU0dWclJrOVJiV1J5WTFkb2NtRlZZelZrZWtKRFVWWkdlbEpyUmtWUlZUUkxWRlpHZW1Rd1RsSlhWVkpYVlZaR1JWSllaRXRoYkdWc1NsRXdiSEZSVlRWRFdqSjBlR0ZIZEhCU2Vtd3pUVVZLUWxWVlZrZFJWVVpRVVRCR2JrOUZSazVUVld4RVVUSmtURkV3Um01U1ZVVXdWMWhDTlVOc1VtdFVNVkpTVTFkTmRtVnNhRVJsUjNoVFpXdFZNRg=="),
	// 			},
	// 		},
	// 	},
	// }
}

// Generated from example definition: 2025-12-01-preview/UpdateClusterByPatchExample.json
func ExampleConnectedClusterClient_BeginUpdateAsync() {
	cred, err := azidentity.NewDefaultAzureCredential(nil)
	if err != nil {
		log.Fatalf("failed to obtain a credential: %v", err)
	}
	ctx := context.Background()
	clientFactory, err := armhybridkubernetes.NewClientFactory("1bfbb5d0-917e-4346-9026-1d3b344417f5", cred, nil)
	if err != nil {
		log.Fatalf("failed to create client: %v", err)
	}
	poller, err := clientFactory.NewConnectedClusterClient().BeginUpdateAsync(ctx, "k8sc-rg", "testCluster", armhybridkubernetes.ConnectedClusterPatch{
		Properties: &armhybridkubernetes.ConnectedClusterPatchProperties{
			AzureHybridBenefit:  to.Ptr(armhybridkubernetes.AzureHybridBenefitNotApplicable),
			Distribution:        to.Ptr("AKS"),
			DistributionVersion: to.Ptr("1.0"),
			Gateway: &armhybridkubernetes.Gateway{
				Enabled: to.Ptr(true),
			},
		},
		Tags: map[string]*string{
			"tag1": to.Ptr("value1"),
			"tag2": to.Ptr("value2"),
		},
	}, nil)
	if err != nil {
		log.Fatalf("failed to finish the request: %v", err)
	}
	res, err := poller.PollUntilDone(ctx, nil)
	if err != nil {
		log.Fatalf("failed to pull the result: %v", err)
	}
	// You could use response here. We use blank identifier for just demo purposes.
	_ = res
	// If the HTTP response code is 200 as defined in example definition, your response structure would look as follows. Please pay attention that all the values in the output are fake values for just demo purposes.
	// res = armhybridkubernetes.ConnectedClusterClientUpdateAsyncResponse{
	// 	ConnectedCluster: &armhybridkubernetes.ConnectedCluster{
	// 		Name: to.Ptr("connectedCluster1"),
	// 		Type: to.Ptr("Microsoft.Kubernetes/connectedClusters"),
	// 		ID: to.Ptr("/subscriptions/1bfbb5d0-917e-4346-9026-1d3b344417f5/resourceGroups/akkeshar/providers/Microsoft.Kubernetes/connectedClusters/connectedCluster1"),
	// 		Identity: &armhybridkubernetes.ConnectedClusterIdentity{
	// 			Type: to.Ptr(armhybridkubernetes.ResourceIdentityTypeSystemAssigned),
	// 		},
	// 		Location: to.Ptr("East US"),
	// 		Properties: &armhybridkubernetes.ConnectedClusterProperties{
	// 			AgentPublicKeyCertificate: to.Ptr("MIICYzCCAcygAwIBAgIBADANBgkqhkiG9w0BAQUFADAuMQswCQYDVQQGEwJVUzEMMAoGA1UEChMDSUJNMREwDwYDVQQLEwhMb2NhbCBDQTAeFw05OTEyMjIwNTAwMDBaFw0wMDEyMjMwNDU5NTlaMC4xCzAJBgNVBAYTAlVTMQwwCgYDVQQKEwNJQk0xETAPBgNVBAsTCExvY2FsIENBMIGfMA0GCSqGSIb3DQEBAQUAA4GNADCBiQKBgQD2bZEo7xGaX2/0GHkrNFZvlxBou9v1Jmt/PDiTMPve8r9FeJAQ0QdvFST/0JPQYD20rH0bimdDLgNdNynmyRoS2S/IInfpmf69iyc2G0TPyRvmHIiOZbdCd+YBHQi1adkj17NDcWj6S14tVurFX73zx0sNoMS79q3tuXKrDsxeuwIDAQABo4GQMIGNMEsGCVUdDwGG+EIBDQQ+EzxHZW5lcmF0ZWQgYnkgdGhlIFNlY3VyZVdheSBTZWN1cml0eSBTZXJ2ZXIgZm9yIE9TLzM5MCAoUkFDRikwDgYDVR0PAQH/BAQDAgAGMA8GA1UdEwEB/wQFMAMBAf8wHQYDVR0OBBYEFJ3+ocRyCTJw067dLSwr/nalx6YMMA0GCSqGSIb3DQEBBQUAA4GBAMaQzt+zaj1GU77yzlr8iiMBXgdQrwsZZWJo5exnAucJAEYQZmOfyLiM D6oYq+ZnfvM0n8G/Y79q8nhwvuxpYOnRSAXFp6xSkrIOeZtJMY1h00LKp/JX3Ng1svZ2agE126JHsQ0bhzN5TKsYfbwfTwfjdWAGy6Vf1nYi/rO+ryMO"),
	// 			AgentVersion: to.Ptr("0.1.0"),
	// 			AzureHybridBenefit: to.Ptr(armhybridkubernetes.AzureHybridBenefitNotApplicable),
	// 			Distribution: to.Ptr("AKS"),
	// 			DistributionVersion: to.Ptr("1.0"),
	// 			Gateway: &armhybridkubernetes.Gateway{
	// 				Enabled: to.Ptr(true),
	// 			},
	// 			KubernetesVersion: to.Ptr("1.17.0"),
	// 			MiscellaneousProperties: map[string]*string{
	// 				"createCorrelationId": to.Ptr("8e42616e-74dc-4117-9aaa-71ad5d0180d8"),
	// 				"infrastructureVersion": to.Ptr("1.1"),
	// 			},
	// 			ProvisioningState: to.Ptr(armhybridkubernetes.ProvisioningStateSucceeded),
	// 			TotalNodeCount: to.Ptr[int32](2),
	// 		},
	// 		SystemData: &armhybridkubernetes.SystemData{
	// 			CreatedAt: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-12-17T07:06:33.9173186Z"); return t}()),
	// 			CreatedBy: to.Ptr("sikasire@microsoft.com"),
	// 			CreatedByType: to.Ptr(armhybridkubernetes.CreatedByTypeUser),
	// 			LastModifiedAt: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2020-12-17T07:14:58.865041Z"); return t}()),
	// 			LastModifiedBy: to.Ptr("2d2a754c-cade-4935-83d4-ce413c5a3910"),
	// 			LastModifiedByType: to.Ptr(armhybridkubernetes.CreatedByTypeApplication),
	// 		},
	// 		Tags: map[string]*string{
	// 		},
	// 	},
	// }
}
