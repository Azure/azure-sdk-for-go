//go:build go1.18
// +build go1.18

// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.
// DO NOT EDIT.

package armhybridnetwork

import "time"

// AzureStackEdgeFormat - The reference to the Azure stack edge device.
type AzureStackEdgeFormat struct {
	// REQUIRED; The reference to the Azure stack edge device.
	AzureStackEdge *SubResource

	// REQUIRED; The type of the device.
	DeviceType *DeviceType

	// READ-ONLY; The list of network functions deployed on the device.
	NetworkFunctions []*SubResource

	// READ-ONLY; The provisioning state of the device resource.
	ProvisioningState *ProvisioningState

	// READ-ONLY; The current device status.
	Status *Status
}

// GetDevicePropertiesFormat implements the DevicePropertiesFormatClassification interface for type AzureStackEdgeFormat.
func (a *AzureStackEdgeFormat) GetDevicePropertiesFormat() *DevicePropertiesFormat {
	return &DevicePropertiesFormat{
		Status:            a.Status,
		ProvisioningState: a.ProvisioningState,
		DeviceType:        a.DeviceType,
		NetworkFunctions:  a.NetworkFunctions,
	}
}

// CustomProfile - Specifies the custom settings for the virtual machine.
type CustomProfile struct {
	// Path for metadata configuration.
	MetadataConfigurationPath *string
}

// DataDisk - Specifies information about the operating system disk used by the virtual machine.
// For more information about disks, see About disks and VHDs for Azure virtual machines
// [https://docs.microsoft.com/azure/virtual-machines/virtual-machines-windows-about-disks-vhds?toc=%2fazure%2fvirtual-machines%2fwindows%2ftoc.json].
type DataDisk struct {
	// Specifies how the virtual machine should be created.
	CreateOption *DiskCreateOptionTypes

	// Specifies the size of an empty disk in gigabytes. This element can be used to overwrite the size of the disk in a virtual
	// machine image.
	DiskSizeGB *int32

	// The name of data disk.
	Name *string
}

// Device resource.
type Device struct {
	// REQUIRED; The geo-location where the resource lives
	Location *string

	// Device properties.
	Properties DevicePropertiesFormatClassification

	// Resource tags.
	Tags map[string]*string

	// READ-ONLY; Fully qualified resource ID for the resource. Ex - /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}
	ID *string

	// READ-ONLY; The name of the resource
	Name *string

	// READ-ONLY; The system meta data relating to this resource.
	SystemData *SystemData

	// READ-ONLY; The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or "Microsoft.Storage/storageAccounts"
	Type *string
}

// DeviceListResult - Response for devices API service call.
type DeviceListResult struct {
	// A list of devices.
	Value []*Device

	// READ-ONLY; The URL to get the next set of results.
	NextLink *string
}

// DevicePropertiesFormatClassification provides polymorphic access to related types.
// Call the interface's GetDevicePropertiesFormat() method to access the common type.
// Use a type switch to determine the concrete type.  The possible types are:
// - *AzureStackEdgeFormat, *DevicePropertiesFormat
type DevicePropertiesFormatClassification interface {
	// GetDevicePropertiesFormat returns the DevicePropertiesFormat content of the underlying type.
	GetDevicePropertiesFormat() *DevicePropertiesFormat
}

// DevicePropertiesFormat - Device properties.
type DevicePropertiesFormat struct {
	// REQUIRED; The type of the device.
	DeviceType *DeviceType

	// READ-ONLY; The list of network functions deployed on the device.
	NetworkFunctions []*SubResource

	// READ-ONLY; The provisioning state of the device resource.
	ProvisioningState *ProvisioningState

	// READ-ONLY; The current device status.
	Status *Status
}

// GetDevicePropertiesFormat implements the DevicePropertiesFormatClassification interface for type DevicePropertiesFormat.
func (d *DevicePropertiesFormat) GetDevicePropertiesFormat() *DevicePropertiesFormat { return d }

// DeviceRegistrationKey - The device registration key.
type DeviceRegistrationKey struct {
	// READ-ONLY; The registration key for the device.
	RegistrationKey *string
}

// DevicesClientBeginCreateOrUpdateOptions contains the optional parameters for the DevicesClient.BeginCreateOrUpdate method.
type DevicesClientBeginCreateOrUpdateOptions struct {
	// Resumes the LRO from the provided token.
	ResumeToken string
}

// DevicesClientBeginDeleteOptions contains the optional parameters for the DevicesClient.BeginDelete method.
type DevicesClientBeginDeleteOptions struct {
	// Resumes the LRO from the provided token.
	ResumeToken string
}

// DevicesClientGetOptions contains the optional parameters for the DevicesClient.Get method.
type DevicesClientGetOptions struct {
	// placeholder for future optional parameters
}

// DevicesClientListByResourceGroupOptions contains the optional parameters for the DevicesClient.NewListByResourceGroupPager
// method.
type DevicesClientListByResourceGroupOptions struct {
	// placeholder for future optional parameters
}

// DevicesClientListBySubscriptionOptions contains the optional parameters for the DevicesClient.NewListBySubscriptionPager
// method.
type DevicesClientListBySubscriptionOptions struct {
	// placeholder for future optional parameters
}

// DevicesClientListRegistrationKeyOptions contains the optional parameters for the DevicesClient.ListRegistrationKey method.
type DevicesClientListRegistrationKeyOptions struct {
	// placeholder for future optional parameters
}

// DevicesClientUpdateTagsOptions contains the optional parameters for the DevicesClient.UpdateTags method.
type DevicesClientUpdateTagsOptions struct {
	// placeholder for future optional parameters
}

// ErrorAdditionalInfo - The resource management error additional info.
type ErrorAdditionalInfo struct {
	// READ-ONLY; The additional info.
	Info any

	// READ-ONLY; The additional info type.
	Type *string
}

// ErrorDetail - The error detail.
type ErrorDetail struct {
	// READ-ONLY; The error additional info.
	AdditionalInfo []*ErrorAdditionalInfo

	// READ-ONLY; The error code.
	Code *string

	// READ-ONLY; The error details.
	Details []*ErrorDetail

	// READ-ONLY; The error message.
	Message *string

	// READ-ONLY; The error target.
	Target *string
}

// ErrorResponse - Common error response for all Azure Resource Manager APIs to return error details for failed operations.
// (This also follows the OData error response format.).
type ErrorResponse struct {
	// The error object.
	Error *ErrorDetail
}

// ImageReference - The image reference properties.
type ImageReference struct {
	// Specifies in decimal numbers, the exact version of image used to create the virtual machine.
	ExactVersion *string

	// Specifies the offer of the image used to create the virtual machine.
	Offer *string

	// The image publisher.
	Publisher *string

	// The image SKU.
	SKU *string

	// Specifies the version of the image used to create the virtual machine. The allowed formats are Major.Minor.Build or 'latest'.
	// Major, Minor, and Build are decimal numbers. Specify 'latest' to use the
	// latest version of an image available at deploy time. Even if you use 'latest', the VM image will not automatically update
	// after deploy time even if a new version becomes available.
	Version *string
}

// LinuxConfiguration - Specifies the Linux operating system settings on the virtual machine.
type LinuxConfiguration struct {
	// Specifies the ssh key configuration for a Linux OS.
	SSH *SSHConfiguration
}

// NetworkFunction - Network function resource response.
type NetworkFunction struct {
	// REQUIRED; The geo-location where the resource lives
	Location *string

	// A unique read-only string that changes whenever the resource is updated.
	Etag *string

	// Network function properties.
	Properties *NetworkFunctionPropertiesFormat

	// Resource tags.
	Tags map[string]*string

	// READ-ONLY; Fully qualified resource ID for the resource. Ex - /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}
	ID *string

	// READ-ONLY; The name of the resource
	Name *string

	// READ-ONLY; The system meta data relating to this resource.
	SystemData *SystemData

	// READ-ONLY; The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or "Microsoft.Storage/storageAccounts"
	Type *string
}

// NetworkFunctionListResult - Response for network function API service call.
type NetworkFunctionListResult struct {
	// A list of network function resources in a subscription or resource group.
	Value []*NetworkFunction

	// READ-ONLY; The URL to get the next set of results.
	NextLink *string
}

// NetworkFunctionPropertiesFormat - Network function properties.
type NetworkFunctionPropertiesFormat struct {
	// The reference to the device resource. Once set, it cannot be updated.
	Device *SubResource

	// The parameters for the managed application.
	ManagedApplicationParameters any

	// The network function container configurations from the user.
	NetworkFunctionContainerConfigurations any

	// The network function configurations from the user.
	NetworkFunctionUserConfigurations []*NetworkFunctionUserConfiguration

	// The sku name for the network function. Once set, it cannot be updated.
	SKUName *string

	// The vendor name for the network function. Once set, it cannot be updated.
	VendorName *string

	// READ-ONLY; The resource URI of the managed application.
	ManagedApplication *SubResource

	// READ-ONLY; The provisioning state of the network function resource.
	ProvisioningState *ProvisioningState

	// READ-ONLY; The sku type for the network function.
	SKUType *SKUType

	// READ-ONLY; The service key for the network function resource.
	ServiceKey *string

	// READ-ONLY; The vendor provisioning state for the network function resource.
	VendorProvisioningState *VendorProvisioningState
}

// NetworkFunctionRoleConfiguration - Network function role configuration.
type NetworkFunctionRoleConfiguration struct {
	// Specifies the custom settings for the virtual machine.
	CustomProfile *CustomProfile

	// The network interface configurations.
	NetworkInterfaces []*NetworkInterface

	// Specifies the operating system settings for the role instance. This value can be updated during the deployment of network
	// function.
	OSProfile *OsProfile

	// The name of the network function role.
	RoleName *string

	// Role type.
	RoleType *NetworkFunctionRoleConfigurationType

	// Specifies the storage settings for the virtual machine disks.
	StorageProfile *StorageProfile

	// The user parameters for customers. The format of user data parameters has to be matched with the provided user data template.
	UserDataParameters any

	// The user data template for customers. This is a json schema template describing the format and data type of user data parameters.
	UserDataTemplate any

	// The size of the virtual machine.
	VirtualMachineSize *VirtualMachineSizeTypes
}

// NetworkFunctionRoleInstanceListResult - List of role instances of vendor network function.
type NetworkFunctionRoleInstanceListResult struct {
	// READ-ONLY; The URL to get the next set of results.
	NextLink *string

	// READ-ONLY; A list of role instances.
	Value []*RoleInstance
}

// NetworkFunctionSKUDetails - The network function sku details.
type NetworkFunctionSKUDetails struct {
	// The network function sku type.
	SKUType *SKUType

	// The network function sku role details.
	Value []*NetworkFunctionSKURoleDetails

	// READ-ONLY; The URL to get the next set of results.
	NextLink *string
}

// NetworkFunctionSKUListResult - A list of available network function skus.
type NetworkFunctionSKUListResult struct {
	// The network function vendor sku overview properties.
	Value []*SKUOverview

	// READ-ONLY; The URL to get the next set of results.
	NextLink *string
}

// NetworkFunctionSKURoleDetails - The network function user configuration.
type NetworkFunctionSKURoleDetails struct {
	// The network interface configuration.
	NetworkInterfaces []*NetworkInterface

	// The name of the network function role.
	RoleName *string

	// The user parameters for customers.
	UserDataParameters any

	// The user data template for customers.
	UserDataTemplate any
}

// NetworkFunctionTemplate - The network function template.
type NetworkFunctionTemplate struct {
	// An array of network function role definitions.
	NetworkFunctionRoleConfigurations []*NetworkFunctionRoleConfiguration
}

// NetworkFunctionUserConfiguration - The network function user configuration.
type NetworkFunctionUserConfiguration struct {
	// The network interface configuration.
	NetworkInterfaces []*NetworkInterface

	// Specifies the operating system settings for the role instance.
	OSProfile *NetworkFunctionUserConfigurationOsProfile

	// The name of the network function role.
	RoleName *string

	// The user data parameters from the customer.
	UserDataParameters any
}

// NetworkFunctionUserConfigurationOsProfile - Specifies the operating system settings for the role instance.
type NetworkFunctionUserConfigurationOsProfile struct {
	// Specifies a base-64 encoded string of custom data. The base-64 encoded string is decoded to a binary array that is saved
	// as a file on the virtual machine. The maximum length of the binary array is
	// 65535 bytes.
	// Note: Do not pass any secrets or passwords in customData property
	// This property cannot be updated after the VM is created.
	// customData is passed to the VM to be saved as a file. For more information see Custom Data on Azure VMs [https://azure.microsoft.com/en-us/blog/custom-data-and-cloud-init-on-windows-azure/]
	// For using cloud-init for your Linux VM, see Using cloud-init to customize a Linux VM during creation
	// [https://docs.microsoft.com/azure/virtual-machines/virtual-machines-linux-using-cloud-init?toc=%2fazure%2fvirtual-machines%2flinux%2ftoc.json]
	CustomData *string
}

// NetworkFunctionVendor - The network function vendor.
type NetworkFunctionVendor struct {
	// Vendors of Hybrid Network service provider.
	Properties *VendorDetails
}

// NetworkFunctionVendorConfiguration - Network function vendor configuration.
type NetworkFunctionVendorConfiguration struct {
	// The network interface configurations.
	NetworkInterfaces []*NetworkInterface

	// Specifies the operating system settings for the role instance.
	OSProfile *OsProfile

	// The name of the vendor network function role.
	RoleName *string

	// READ-ONLY; The user parameters from the customer.
	UserDataParameters any
}

// NetworkFunctionVendorListResult - The network function vendor list result.
type NetworkFunctionVendorListResult struct {
	// A list of available network function vendors and skus.
	Value []*NetworkFunctionVendor

	// READ-ONLY; The URL to get the next set of results.
	NextLink *string
}

// NetworkFunctionVendorSKUsClientListBySKUOptions contains the optional parameters for the NetworkFunctionVendorSKUsClient.NewListBySKUPager
// method.
type NetworkFunctionVendorSKUsClientListBySKUOptions struct {
	// placeholder for future optional parameters
}

// NetworkFunctionVendorSKUsClientListByVendorOptions contains the optional parameters for the NetworkFunctionVendorSKUsClient.NewListByVendorPager
// method.
type NetworkFunctionVendorSKUsClientListByVendorOptions struct {
	// placeholder for future optional parameters
}

// NetworkFunctionVendorsClientListOptions contains the optional parameters for the NetworkFunctionVendorsClient.NewListPager
// method.
type NetworkFunctionVendorsClientListOptions struct {
	// placeholder for future optional parameters
}

// NetworkFunctionsClientBeginCreateOrUpdateOptions contains the optional parameters for the NetworkFunctionsClient.BeginCreateOrUpdate
// method.
type NetworkFunctionsClientBeginCreateOrUpdateOptions struct {
	// Resumes the LRO from the provided token.
	ResumeToken string
}

// NetworkFunctionsClientBeginDeleteOptions contains the optional parameters for the NetworkFunctionsClient.BeginDelete method.
type NetworkFunctionsClientBeginDeleteOptions struct {
	// Resumes the LRO from the provided token.
	ResumeToken string
}

// NetworkFunctionsClientGetOptions contains the optional parameters for the NetworkFunctionsClient.Get method.
type NetworkFunctionsClientGetOptions struct {
	// placeholder for future optional parameters
}

// NetworkFunctionsClientListByResourceGroupOptions contains the optional parameters for the NetworkFunctionsClient.NewListByResourceGroupPager
// method.
type NetworkFunctionsClientListByResourceGroupOptions struct {
	// placeholder for future optional parameters
}

// NetworkFunctionsClientListBySubscriptionOptions contains the optional parameters for the NetworkFunctionsClient.NewListBySubscriptionPager
// method.
type NetworkFunctionsClientListBySubscriptionOptions struct {
	// placeholder for future optional parameters
}

// NetworkFunctionsClientUpdateTagsOptions contains the optional parameters for the NetworkFunctionsClient.UpdateTags method.
type NetworkFunctionsClientUpdateTagsOptions struct {
	// placeholder for future optional parameters
}

// NetworkInterface - Network interface properties.
type NetworkInterface struct {
	// A list of IP configurations of the network interface.
	IPConfigurations []*NetworkInterfaceIPConfiguration

	// The MAC address of the network interface.
	MacAddress *string

	// The name of the network interface.
	NetworkInterfaceName *string

	// The type of the VM switch.
	VMSwitchType *VMSwitchType
}

// NetworkInterfaceIPConfiguration - Network interface IP configuration properties.
type NetworkInterfaceIPConfiguration struct {
	// The list of DNS servers IP addresses.
	DNSServers []*string

	// The value of the gateway.
	Gateway *string

	// The value of the IP address.
	IPAddress *string

	// IP address allocation method.
	IPAllocationMethod *IPAllocationMethod

	// IP address version.
	IPVersion *IPVersion

	// The value of the subnet.
	Subnet *string
}

// Operation - Object that describes a single Microsoft.HybridNetwork operation.
type Operation struct {
	// READ-ONLY; The object that represents the operation.
	Display *OperationDisplay

	// READ-ONLY; Operation name: {provider}/{resource}/{operation}.
	Name *string
}

// OperationDisplay - The object that represents the operation.
type OperationDisplay struct {
	// Description of the operation.
	Description *string

	// Operation type: Read, write, delete, etc.
	Operation *string

	// Service provider: Microsoft.HybridNetwork.
	Provider *string

	// Resource on which the operation is performed: Registration definition, registration assignment, etc.
	Resource *string
}

// OperationList - A list of the operations.
type OperationList struct {
	// READ-ONLY; The URL to get the next set of results.
	NextLink *string

	// READ-ONLY; A list of Microsoft.HybridNetwork operations.
	Value []*Operation
}

// OperationsClientListOptions contains the optional parameters for the OperationsClient.NewListPager method.
type OperationsClientListOptions struct {
	// placeholder for future optional parameters
}

// OsDisk - Specifies information about the operating system disk used by the virtual machine.
// For more information about disks, see About disks and VHDs for Azure virtual machines
// [https://docs.microsoft.com/azure/virtual-machines/virtual-machines-windows-about-disks-vhds?toc=%2fazure%2fvirtual-machines%2fwindows%2ftoc.json].
type OsDisk struct {
	// Specifies the size of os disk in gigabytes. This is the fully expanded disk size needed of the VHD image on the ASE. This
	// disk size should be greater than the size of the VHD provided in vhdUri.
	DiskSizeGB *int32

	// The VHD name.
	Name *string

	// The OS type.
	OSType *OperatingSystemTypes

	// The virtual hard disk.
	Vhd *VirtualHardDisk
}

// OsProfile - Specifies the operating system settings for the role instance.
type OsProfile struct {
	// Specifies the name of the administrator account.
	// Windows-only restriction: Cannot end in "."
	// Disallowed values: "administrator", "admin", "user", "user1", "test", "user2", "test1", "user3", "admin1", "1", "123",
	// "a", "actuser", "adm", "admin2", "aspnet", "backup", "console", "david", "guest",
	// "john", "owner", "root", "server", "sql", "support", "support_388945a0", "sys", "test2", "test3", "user4", "user5".
	// Minimum-length (Linux): 1 character
	// Max-length (Linux): 64 characters
	// Max-length (Windows): 20 characters
	// For root access to the Linux VM, see Using root privileges on Linux virtual machines in Azure
	// [https://docs.microsoft.com/azure/virtual-machines/virtual-machines-linux-use-root-privileges?toc=%2fazure%2fvirtual-machines%2flinux%2ftoc.json]
	// For a list of built-in system users on Linux that should not be used in this field, see Selecting User Names for Linux
	// on Azure
	// [https://docs.microsoft.com/azure/virtual-machines/virtual-machines-linux-usernames?toc=%2fazure%2fvirtual-machines%2flinux%2ftoc.json].
	AdminUsername *string

	// Specifies a base-64 encoded string of custom data. The base-64 encoded string is decoded to a binary array that is saved
	// as a file on the virtual machine. The maximum length of the binary array is
	// 65535 bytes.
	// Note: Do not pass any secrets or passwords in customData property
	// This property cannot be updated after the VM is created.
	// customData is passed to the VM to be saved as a file. For more information see Custom Data on Azure VMs [https://azure.microsoft.com/en-us/blog/custom-data-and-cloud-init-on-windows-azure/]
	// For using cloud-init for your Linux VM, see Using cloud-init to customize a Linux VM during creation
	// [https://docs.microsoft.com/azure/virtual-machines/virtual-machines-linux-using-cloud-init?toc=%2fazure%2fvirtual-machines%2flinux%2ftoc.json]
	CustomData *string

	// Indicates if custom data is required to deploy this role.
	CustomDataRequired *bool

	// Specifies the Linux operating system settings on the virtual machine.
	// For a list of supported Linux distributions, see Linux on Azure-Endorsed Distributions
	// [https://docs.microsoft.com/azure/virtual-machines/virtual-machines-linux-endorsed-distros?toc=%2fazure%2fvirtual-machines%2flinux%2ftoc.json]
	// For running non-endorsed distributions, see Information for Non-Endorsed Distributions
	// [https://docs.microsoft.com/azure/virtual-machines/virtual-machines-linux-create-upload-generic?toc=%2fazure%2fvirtual-machines%2flinux%2ftoc.json].
	LinuxConfiguration *LinuxConfiguration
}

// PreviewSubscription - Customer subscription which can use a sku.
type PreviewSubscription struct {
	// The Preview Subscription properties.
	Properties *PreviewSubscriptionProperties

	// READ-ONLY; The ARM ID of the resource.
	ID *string

	// READ-ONLY; The preview subscription ID.
	Name *string

	// READ-ONLY; The system meta data relating to this resource.
	SystemData *SystemData

	// READ-ONLY; The type of the resource.
	Type *string
}

// PreviewSubscriptionProperties - PreviewSubscription properties
type PreviewSubscriptionProperties struct {
	// READ-ONLY; The provisioning state of the PreviewSubscription resource.
	ProvisioningState *ProvisioningState
}

// PreviewSubscriptionsList - A list of customer subscriptions which can use a sku.
type PreviewSubscriptionsList struct {
	// A list of preview subscriptions.
	Value []*PreviewSubscription

	// READ-ONLY; The URL to get the next set of results.
	NextLink *string
}

// ProxyResource - The resource model definition for a Azure Resource Manager proxy resource. It will not have tags and a
// location
type ProxyResource struct {
	// READ-ONLY; Fully qualified resource ID for the resource. Ex - /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}
	ID *string

	// READ-ONLY; The name of the resource
	Name *string

	// READ-ONLY; The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or "Microsoft.Storage/storageAccounts"
	Type *string
}

// Resource - Common fields that are returned in the response for all Azure Resource Manager resources
type Resource struct {
	// READ-ONLY; Fully qualified resource ID for the resource. Ex - /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}
	ID *string

	// READ-ONLY; The name of the resource
	Name *string

	// READ-ONLY; The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or "Microsoft.Storage/storageAccounts"
	Type *string
}

// RoleInstance - The role instance sub resource.
type RoleInstance struct {
	// The ARM ID of the resource.
	ID *string

	// The role instance name.
	Name *string

	// The role instance properties.
	Properties *RoleInstanceProperties

	// The type of the resource.
	Type *string

	// READ-ONLY; The system meta data relating to this resource.
	SystemData *SystemData
}

// RoleInstanceProperties - The role instance properties of the network function.
type RoleInstanceProperties struct {
	// The operational state of the role instance.
	OperationalState *OperationalState

	// READ-ONLY; The provisioning state of the RoleInstance resource.
	ProvisioningState *ProvisioningState
}

// RoleInstancesClientBeginRestartOptions contains the optional parameters for the RoleInstancesClient.BeginRestart method.
type RoleInstancesClientBeginRestartOptions struct {
	// Resumes the LRO from the provided token.
	ResumeToken string
}

// RoleInstancesClientBeginStartOptions contains the optional parameters for the RoleInstancesClient.BeginStart method.
type RoleInstancesClientBeginStartOptions struct {
	// Resumes the LRO from the provided token.
	ResumeToken string
}

// RoleInstancesClientBeginStopOptions contains the optional parameters for the RoleInstancesClient.BeginStop method.
type RoleInstancesClientBeginStopOptions struct {
	// Resumes the LRO from the provided token.
	ResumeToken string
}

// RoleInstancesClientGetOptions contains the optional parameters for the RoleInstancesClient.Get method.
type RoleInstancesClientGetOptions struct {
	// placeholder for future optional parameters
}

// RoleInstancesClientListOptions contains the optional parameters for the RoleInstancesClient.NewListPager method.
type RoleInstancesClientListOptions struct {
	// placeholder for future optional parameters
}

// SKUOverview - The network function sku overview.
type SKUOverview struct {
	// The vendor sku name.
	SKUName *string

	// The vendor sku type.
	SKUType *SKUType
}

// SSHConfiguration - SSH configuration for Linux based VMs running on Azure
type SSHConfiguration struct {
	// The list of SSH public keys used to authenticate with linux based VMs.
	PublicKeys []*SSHPublicKey
}

// SSHPublicKey - Contains information about SSH certificate public key and the path on the Linux VM where the public key
// is placed.
type SSHPublicKey struct {
	// SSH public key certificate used to authenticate with the VM through ssh. The key needs to be at least 2048-bit and in ssh-rsa
	// format.
	// For creating ssh keys, see Create SSH keys on Linux and Mac for Linux VMs in Azure
	// [https://docs.microsoft.com/azure/virtual-machines/virtual-machines-linux-mac-create-ssh-keys?toc=%2fazure%2fvirtual-machines%2flinux%2ftoc.json].
	KeyData *string

	// Specifies the full path on the created VM where ssh public key is stored. If the file already exists, the specified key
	// is appended to the file. Example: /home/user/.ssh/authorized_keys
	Path *string
}

// StorageProfile - Specifies the storage settings for the virtual machine disks.
type StorageProfile struct {
	// Specifies the parameters that are used to add a data disk to a virtual machine.
	DataDisks []*DataDisk

	// The image reference properties.
	ImageReference *ImageReference

	// Specifies information about the operating system disk used by the virtual machine.
	OSDisk *OsDisk
}

// SubResource - Reference to another sub resource.
type SubResource struct {
	// Resource ID.
	ID *string
}

// SystemData - Metadata pertaining to creation and last modification of the resource.
type SystemData struct {
	// The timestamp of resource creation (UTC).
	CreatedAt *time.Time

	// The identity that created the resource.
	CreatedBy *string

	// The type of identity that created the resource.
	CreatedByType *CreatedByType

	// The timestamp of resource last modification (UTC)
	LastModifiedAt *time.Time

	// The identity that last modified the resource.
	LastModifiedBy *string

	// The type of identity that last modified the resource.
	LastModifiedByType *CreatedByType
}

// TagsObject - Tags object for patch operations.
type TagsObject struct {
	// Resource tags.
	Tags map[string]*string
}

// TrackedResource - The resource model definition for an Azure Resource Manager tracked top level resource which has 'tags'
// and a 'location'
type TrackedResource struct {
	// REQUIRED; The geo-location where the resource lives
	Location *string

	// Resource tags.
	Tags map[string]*string

	// READ-ONLY; Fully qualified resource ID for the resource. Ex - /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}
	ID *string

	// READ-ONLY; The name of the resource
	Name *string

	// READ-ONLY; The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or "Microsoft.Storage/storageAccounts"
	Type *string
}

// Vendor resource.
type Vendor struct {
	// Vendor properties.
	Properties *VendorPropertiesFormat

	// READ-ONLY; Fully qualified resource ID for the resource. Ex - /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}
	ID *string

	// READ-ONLY; The name of the resource
	Name *string

	// READ-ONLY; The system meta data relating to this resource.
	SystemData *SystemData

	// READ-ONLY; The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or "Microsoft.Storage/storageAccounts"
	Type *string
}

// VendorDetails - The network function vendor details.
type VendorDetails struct {
	// The network function sku list.
	SKUList []*SKUOverview

	// The network function vendor name.
	VendorName *string
}

// VendorListResult - Response for vendors API service call.
type VendorListResult struct {
	// A list of vendors.
	Value []*Vendor

	// READ-ONLY; The URL to get the next set of results.
	NextLink *string
}

// VendorNetworkFunction - Vendor network function sub resource.
type VendorNetworkFunction struct {
	// Network function details.
	Properties *VendorNetworkFunctionPropertiesFormat

	// READ-ONLY; Fully qualified resource ID for the resource. Ex - /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}
	ID *string

	// READ-ONLY; The name of the resource
	Name *string

	// READ-ONLY; The system meta data relating to this resource.
	SystemData *SystemData

	// READ-ONLY; The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or "Microsoft.Storage/storageAccounts"
	Type *string
}

// VendorNetworkFunctionListResult - Response for vendors API service call.
type VendorNetworkFunctionListResult struct {
	// A list of vendor network functions.
	Value []*VendorNetworkFunction

	// READ-ONLY; The URL to get the next set of results.
	NextLink *string
}

// VendorNetworkFunctionPropertiesFormat - Vendor network function properties.
type VendorNetworkFunctionPropertiesFormat struct {
	// An array of network function vendor configurations.
	NetworkFunctionVendorConfigurations []*NetworkFunctionVendorConfiguration

	// The vendor controlled provisioning state of the vendor network function.
	VendorProvisioningState *VendorProvisioningState

	// READ-ONLY; The provisioning state of the vendor network function sub resource.
	ProvisioningState *ProvisioningState

	// READ-ONLY; The name of the sku. Once set, it cannot be updated.
	SKUName *string

	// READ-ONLY; The sku type.
	SKUType *SKUType
}

// VendorNetworkFunctionsClientBeginCreateOrUpdateOptions contains the optional parameters for the VendorNetworkFunctionsClient.BeginCreateOrUpdate
// method.
type VendorNetworkFunctionsClientBeginCreateOrUpdateOptions struct {
	// Resumes the LRO from the provided token.
	ResumeToken string
}

// VendorNetworkFunctionsClientGetOptions contains the optional parameters for the VendorNetworkFunctionsClient.Get method.
type VendorNetworkFunctionsClientGetOptions struct {
	// placeholder for future optional parameters
}

// VendorNetworkFunctionsClientListOptions contains the optional parameters for the VendorNetworkFunctionsClient.NewListPager
// method.
type VendorNetworkFunctionsClientListOptions struct {
	// The filter to apply on the operation. The properties you can use for eq (equals) are: skuType, skuName and vendorProvisioningState.
	Filter *string
}

// VendorPropertiesFormat - Vendor properties.
type VendorPropertiesFormat struct {
	// READ-ONLY; The provisioning state of the vendor resource.
	ProvisioningState *ProvisioningState

	// READ-ONLY; A list of IDs of the vendor skus offered by the vendor.
	SKUs []*SubResource
}

// VendorSKU - Sku sub resource.
type VendorSKU struct {
	// Vendor sku details.
	Properties *VendorSKUPropertiesFormat

	// READ-ONLY; Fully qualified resource ID for the resource. Ex - /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}
	ID *string

	// READ-ONLY; The name of the resource
	Name *string

	// READ-ONLY; The system meta data relating to this resource.
	SystemData *SystemData

	// READ-ONLY; The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or "Microsoft.Storage/storageAccounts"
	Type *string
}

// VendorSKUListResult - Response for list vendor sku API service call.
type VendorSKUListResult struct {
	// A list of vendor skus offered by the vendor.
	Value []*VendorSKU

	// READ-ONLY; The URI to get the next set of results.
	NextLink *string
}

// VendorSKUPreviewClientBeginCreateOrUpdateOptions contains the optional parameters for the VendorSKUPreviewClient.BeginCreateOrUpdate
// method.
type VendorSKUPreviewClientBeginCreateOrUpdateOptions struct {
	// Resumes the LRO from the provided token.
	ResumeToken string
}

// VendorSKUPreviewClientBeginDeleteOptions contains the optional parameters for the VendorSKUPreviewClient.BeginDelete method.
type VendorSKUPreviewClientBeginDeleteOptions struct {
	// Resumes the LRO from the provided token.
	ResumeToken string
}

// VendorSKUPreviewClientGetOptions contains the optional parameters for the VendorSKUPreviewClient.Get method.
type VendorSKUPreviewClientGetOptions struct {
	// placeholder for future optional parameters
}

// VendorSKUPreviewClientListOptions contains the optional parameters for the VendorSKUPreviewClient.NewListPager method.
type VendorSKUPreviewClientListOptions struct {
	// placeholder for future optional parameters
}

// VendorSKUPropertiesFormat - Sku properties
type VendorSKUPropertiesFormat struct {
	// The sku deployment mode.
	DeploymentMode *SKUDeploymentMode

	// The parameters for the managed application to be supplied by the vendor.
	ManagedApplicationParameters any

	// The template for the managed application deployment.
	ManagedApplicationTemplate any

	// The template definition of the network function.
	NetworkFunctionTemplate *NetworkFunctionTemplate

	// The network function type.
	NetworkFunctionType *NetworkFunctionType

	// Indicates if the vendor sku is in preview mode.
	Preview *bool

	// The sku type.
	SKUType *SKUType

	// READ-ONLY; The provisioning state of the vendor sku sub resource.
	ProvisioningState *ProvisioningState
}

// VendorSKUsClientBeginCreateOrUpdateOptions contains the optional parameters for the VendorSKUsClient.BeginCreateOrUpdate
// method.
type VendorSKUsClientBeginCreateOrUpdateOptions struct {
	// Resumes the LRO from the provided token.
	ResumeToken string
}

// VendorSKUsClientBeginDeleteOptions contains the optional parameters for the VendorSKUsClient.BeginDelete method.
type VendorSKUsClientBeginDeleteOptions struct {
	// Resumes the LRO from the provided token.
	ResumeToken string
}

// VendorSKUsClientGetOptions contains the optional parameters for the VendorSKUsClient.Get method.
type VendorSKUsClientGetOptions struct {
	// placeholder for future optional parameters
}

// VendorSKUsClientListOptions contains the optional parameters for the VendorSKUsClient.NewListPager method.
type VendorSKUsClientListOptions struct {
	// placeholder for future optional parameters
}

// VendorsClientBeginCreateOrUpdateOptions contains the optional parameters for the VendorsClient.BeginCreateOrUpdate method.
type VendorsClientBeginCreateOrUpdateOptions struct {
	// Parameters supplied to the create vendor operation.
	Parameters *Vendor
	// Resumes the LRO from the provided token.
	ResumeToken string
}

// VendorsClientBeginDeleteOptions contains the optional parameters for the VendorsClient.BeginDelete method.
type VendorsClientBeginDeleteOptions struct {
	// Resumes the LRO from the provided token.
	ResumeToken string
}

// VendorsClientGetOptions contains the optional parameters for the VendorsClient.Get method.
type VendorsClientGetOptions struct {
	// placeholder for future optional parameters
}

// VendorsClientListBySubscriptionOptions contains the optional parameters for the VendorsClient.NewListBySubscriptionPager
// method.
type VendorsClientListBySubscriptionOptions struct {
	// placeholder for future optional parameters
}

// VirtualHardDisk - Describes the uri of a disk.
type VirtualHardDisk struct {
	// Specifies the virtual hard disk's uri.
	URI *string
}
