//go:build go1.16
// +build go1.16

// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

package armhybridnetwork_test

import (
	"context"
	"log"

	"time"

	"github.com/Azure/azure-sdk-for-go/sdk/azcore/to"
	"github.com/Azure/azure-sdk-for-go/sdk/azidentity"
	"github.com/Azure/azure-sdk-for-go/sdk/resourcemanager/hybridnetwork/armhybridnetwork"
)

// x-ms-original-file: specification/hybridnetwork/resource-manager/Microsoft.HybridNetwork/stable/2021-05-01/examples/VendorSkuDelete.json
func ExampleVendorSKUsClient_BeginDelete() {
	cred, err := azidentity.NewDefaultAzureCredential(nil)
	if err != nil {
		log.Fatalf("failed to obtain a credential: %v", err)
	}
	ctx := context.Background()
	client := armhybridnetwork.NewVendorSKUsClient("<subscription-id>", cred, nil)
	poller, err := client.BeginDelete(ctx,
		"<vendor-name>",
		"<sku-name>",
		nil)
	if err != nil {
		log.Fatal(err)
	}
	_, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		log.Fatal(err)
	}
}

// x-ms-original-file: specification/hybridnetwork/resource-manager/Microsoft.HybridNetwork/stable/2021-05-01/examples/VendorSkuGet.json
func ExampleVendorSKUsClient_Get() {
	cred, err := azidentity.NewDefaultAzureCredential(nil)
	if err != nil {
		log.Fatalf("failed to obtain a credential: %v", err)
	}
	ctx := context.Background()
	client := armhybridnetwork.NewVendorSKUsClient("<subscription-id>", cred, nil)
	res, err := client.Get(ctx,
		"<vendor-name>",
		"<sku-name>",
		nil)
	if err != nil {
		log.Fatal(err)
	}
	log.Printf("Response result: %#v\n", res.VendorSKUsClientGetResult)
}

// x-ms-original-file: specification/hybridnetwork/resource-manager/Microsoft.HybridNetwork/stable/2021-05-01/examples/VendorSkuCreate.json
func ExampleVendorSKUsClient_BeginCreateOrUpdate() {
	cred, err := azidentity.NewDefaultAzureCredential(nil)
	if err != nil {
		log.Fatalf("failed to obtain a credential: %v", err)
	}
	ctx := context.Background()
	client := armhybridnetwork.NewVendorSKUsClient("<subscription-id>", cred, nil)
	poller, err := client.BeginCreateOrUpdate(ctx,
		"<vendor-name>",
		"<sku-name>",
		armhybridnetwork.VendorSKU{
			Properties: &armhybridnetwork.VendorSKUPropertiesFormat{
				DeploymentMode:             armhybridnetwork.SKUDeploymentMode("PrivateEdgeZone").ToPtr(),
				ManagedApplicationTemplate: map[string]interface{}{},
				NetworkFunctionTemplate: &armhybridnetwork.NetworkFunctionTemplate{
					NetworkFunctionRoleConfigurations: []*armhybridnetwork.NetworkFunctionRoleConfiguration{
						{
							CustomProfile: &armhybridnetwork.CustomProfile{
								MetadataConfigurationPath: to.StringPtr("<metadata-configuration-path>"),
							},
							NetworkInterfaces: []*armhybridnetwork.NetworkInterface{
								{
									IPConfigurations: []*armhybridnetwork.NetworkInterfaceIPConfiguration{
										{
											Gateway:            to.StringPtr("<gateway>"),
											IPAddress:          to.StringPtr("<ipaddress>"),
											IPAllocationMethod: armhybridnetwork.IPAllocationMethod("Dynamic").ToPtr(),
											IPVersion:          armhybridnetwork.IPVersion("IPv4").ToPtr(),
											Subnet:             to.StringPtr("<subnet>"),
										}},
									MacAddress:           to.StringPtr("<mac-address>"),
									NetworkInterfaceName: to.StringPtr("<network-interface-name>"),
									VMSwitchType:         armhybridnetwork.VMSwitchType("Wan").ToPtr(),
								},
								{
									IPConfigurations: []*armhybridnetwork.NetworkInterfaceIPConfiguration{
										{
											Gateway:            to.StringPtr("<gateway>"),
											IPAddress:          to.StringPtr("<ipaddress>"),
											IPAllocationMethod: armhybridnetwork.IPAllocationMethod("Dynamic").ToPtr(),
											IPVersion:          armhybridnetwork.IPVersion("IPv4").ToPtr(),
											Subnet:             to.StringPtr("<subnet>"),
										}},
									MacAddress:           to.StringPtr("<mac-address>"),
									NetworkInterfaceName: to.StringPtr("<network-interface-name>"),
									VMSwitchType:         armhybridnetwork.VMSwitchType("Management").ToPtr(),
								}},
							OSProfile: &armhybridnetwork.OsProfile{
								AdminUsername: to.StringPtr("<admin-username>"),
								CustomData:    to.StringPtr("<custom-data>"),
								LinuxConfiguration: &armhybridnetwork.LinuxConfiguration{
									SSH: &armhybridnetwork.SSHConfiguration{
										PublicKeys: []*armhybridnetwork.SSHPublicKey{
											{
												Path:    to.StringPtr("<path>"),
												KeyData: to.StringPtr("<key-data>"),
											}},
									},
								},
							},
							RoleName: to.StringPtr("<role-name>"),
							RoleType: armhybridnetwork.NetworkFunctionRoleConfigurationType("VirtualMachine").ToPtr(),
							StorageProfile: &armhybridnetwork.StorageProfile{
								DataDisks: []*armhybridnetwork.DataDisk{
									{
										Name:         to.StringPtr("<name>"),
										CreateOption: armhybridnetwork.DiskCreateOptionTypes("Empty").ToPtr(),
										DiskSizeGB:   to.Int32Ptr(10),
									}},
								ImageReference: &armhybridnetwork.ImageReference{
									Offer:     to.StringPtr("<offer>"),
									Publisher: to.StringPtr("<publisher>"),
									SKU:       to.StringPtr("<sku>"),
									Version:   to.StringPtr("<version>"),
								},
								OSDisk: &armhybridnetwork.OsDisk{
									Name:       to.StringPtr("<name>"),
									DiskSizeGB: to.Int32Ptr(30),
									OSType:     armhybridnetwork.OperatingSystemTypes("Linux").ToPtr(),
									Vhd: &armhybridnetwork.VirtualHardDisk{
										URI: to.StringPtr("<uri>"),
									},
								},
							},
							VirtualMachineSize: armhybridnetwork.VirtualMachineSizeTypes("Standard_D3_v2").ToPtr(),
						}},
				},
				Preview: to.BoolPtr(true),
			},
		},
		nil)
	if err != nil {
		log.Fatal(err)
	}
	res, err := poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		log.Fatal(err)
	}
	log.Printf("Response result: %#v\n", res.VendorSKUsClientCreateOrUpdateResult)
}

// x-ms-original-file: specification/hybridnetwork/resource-manager/Microsoft.HybridNetwork/stable/2021-05-01/examples/VendorSkuListByVendor.json
func ExampleVendorSKUsClient_List() {
	cred, err := azidentity.NewDefaultAzureCredential(nil)
	if err != nil {
		log.Fatalf("failed to obtain a credential: %v", err)
	}
	ctx := context.Background()
	client := armhybridnetwork.NewVendorSKUsClient("<subscription-id>", cred, nil)
	pager := client.List("<vendor-name>",
		nil)
	for {
		nextResult := pager.NextPage(ctx)
		if err := pager.Err(); err != nil {
			log.Fatalf("failed to advance page: %v", err)
		}
		if !nextResult {
			break
		}
		for _, v := range pager.PageResponse().Value {
			log.Printf("Pager result: %#v\n", v)
		}
	}
}
