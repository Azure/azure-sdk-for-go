//go:build go1.16
// +build go1.16

// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

package armhybridnetwork

import (
	"encoding/json"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore"
	"reflect"
	"time"
)

// AzureStackEdgeFormat - The reference to the Azure stack edge device.
type AzureStackEdgeFormat struct {
	DevicePropertiesFormat
	// REQUIRED; The reference to the Azure stack edge device.
	AzureStackEdge *SubResource `json:"azureStackEdge,omitempty"`
}

// MarshalJSON implements the json.Marshaller interface for type AzureStackEdgeFormat.
func (a AzureStackEdgeFormat) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	a.DevicePropertiesFormat.marshalInternal(objectMap, DeviceTypeAzureStackEdge)
	populate(objectMap, "azureStackEdge", a.AzureStackEdge)
	return json.Marshal(objectMap)
}

// UnmarshalJSON implements the json.Unmarshaller interface for type AzureStackEdgeFormat.
func (a *AzureStackEdgeFormat) UnmarshalJSON(data []byte) error {
	var rawMsg map[string]json.RawMessage
	if err := json.Unmarshal(data, &rawMsg); err != nil {
		return err
	}
	for key, val := range rawMsg {
		var err error
		switch key {
		case "azureStackEdge":
			err = unpopulate(val, &a.AzureStackEdge)
			delete(rawMsg, key)
		}
		if err != nil {
			return err
		}
	}
	if err := a.DevicePropertiesFormat.unmarshalInternal(rawMsg); err != nil {
		return err
	}
	return nil
}

// CustomProfile - Specifies the custom settings for the virtual machine.
type CustomProfile struct {
	// Path for metadata configuration.
	MetadataConfigurationPath *string `json:"metadataConfigurationPath,omitempty"`
}

// DataDisk - Specifies information about the operating system disk used by the virtual machine.
// For more information about disks, see About disks and VHDs for Azure virtual machines
// [https://docs.microsoft.com/azure/virtual-machines/virtual-machines-windows-about-disks-vhds?toc=%2fazure%2fvirtual-machines%2fwindows%2ftoc.json].
type DataDisk struct {
	// Specifies how the virtual machine should be created.
	CreateOption *DiskCreateOptionTypes `json:"createOption,omitempty"`

	// Specifies the size of an empty disk in gigabytes. This element can be used to overwrite the size of the disk in a virtual machine image.
	DiskSizeGB *int32 `json:"diskSizeGB,omitempty"`

	// The name of data disk.
	Name *string `json:"name,omitempty"`
}

// Device resource.
type Device struct {
	TrackedResource
	// Device properties.
	Properties DevicePropertiesFormatClassification `json:"properties,omitempty"`

	// READ-ONLY; The system meta data relating to this resource.
	SystemData *SystemData `json:"systemData,omitempty" azure:"ro"`
}

// MarshalJSON implements the json.Marshaller interface for type Device.
func (d Device) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	d.TrackedResource.marshalInternal(objectMap)
	populate(objectMap, "properties", d.Properties)
	populate(objectMap, "systemData", d.SystemData)
	return json.Marshal(objectMap)
}

// UnmarshalJSON implements the json.Unmarshaller interface for type Device.
func (d *Device) UnmarshalJSON(data []byte) error {
	var rawMsg map[string]json.RawMessage
	if err := json.Unmarshal(data, &rawMsg); err != nil {
		return err
	}
	for key, val := range rawMsg {
		var err error
		switch key {
		case "properties":
			d.Properties, err = unmarshalDevicePropertiesFormatClassification(val)
			delete(rawMsg, key)
		case "systemData":
			err = unpopulate(val, &d.SystemData)
			delete(rawMsg, key)
		}
		if err != nil {
			return err
		}
	}
	if err := d.TrackedResource.unmarshalInternal(rawMsg); err != nil {
		return err
	}
	return nil
}

// DeviceListResult - Response for devices API service call.
type DeviceListResult struct {
	// A list of devices.
	Value []*Device `json:"value,omitempty"`

	// READ-ONLY; The URL to get the next set of results.
	NextLink *string `json:"nextLink,omitempty" azure:"ro"`
}

// MarshalJSON implements the json.Marshaller interface for type DeviceListResult.
func (d DeviceListResult) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "nextLink", d.NextLink)
	populate(objectMap, "value", d.Value)
	return json.Marshal(objectMap)
}

// DevicePropertiesFormatClassification provides polymorphic access to related types.
// Call the interface's GetDevicePropertiesFormat() method to access the common type.
// Use a type switch to determine the concrete type.  The possible types are:
// - *AzureStackEdgeFormat, *DevicePropertiesFormat
type DevicePropertiesFormatClassification interface {
	// GetDevicePropertiesFormat returns the DevicePropertiesFormat content of the underlying type.
	GetDevicePropertiesFormat() *DevicePropertiesFormat
}

// DevicePropertiesFormat - Device properties.
type DevicePropertiesFormat struct {
	// REQUIRED; The type of the device.
	DeviceType *DeviceType `json:"deviceType,omitempty"`

	// READ-ONLY; The list of network functions deployed on the device.
	NetworkFunctions []*SubResource `json:"networkFunctions,omitempty" azure:"ro"`

	// READ-ONLY; The provisioning state of the device resource.
	ProvisioningState *ProvisioningState `json:"provisioningState,omitempty" azure:"ro"`

	// READ-ONLY; The current device status.
	Status *Status `json:"status,omitempty" azure:"ro"`
}

// GetDevicePropertiesFormat implements the DevicePropertiesFormatClassification interface for type DevicePropertiesFormat.
func (d *DevicePropertiesFormat) GetDevicePropertiesFormat() *DevicePropertiesFormat { return d }

// UnmarshalJSON implements the json.Unmarshaller interface for type DevicePropertiesFormat.
func (d *DevicePropertiesFormat) UnmarshalJSON(data []byte) error {
	var rawMsg map[string]json.RawMessage
	if err := json.Unmarshal(data, &rawMsg); err != nil {
		return err
	}
	return d.unmarshalInternal(rawMsg)
}

func (d DevicePropertiesFormat) marshalInternal(objectMap map[string]interface{}, discValue DeviceType) {
	d.DeviceType = &discValue
	objectMap["deviceType"] = d.DeviceType
	populate(objectMap, "networkFunctions", d.NetworkFunctions)
	populate(objectMap, "provisioningState", d.ProvisioningState)
	populate(objectMap, "status", d.Status)
}

func (d *DevicePropertiesFormat) unmarshalInternal(rawMsg map[string]json.RawMessage) error {
	for key, val := range rawMsg {
		var err error
		switch key {
		case "deviceType":
			err = unpopulate(val, &d.DeviceType)
			delete(rawMsg, key)
		case "networkFunctions":
			err = unpopulate(val, &d.NetworkFunctions)
			delete(rawMsg, key)
		case "provisioningState":
			err = unpopulate(val, &d.ProvisioningState)
			delete(rawMsg, key)
		case "status":
			err = unpopulate(val, &d.Status)
			delete(rawMsg, key)
		}
		if err != nil {
			return err
		}
	}
	return nil
}

// DeviceRegistrationKey - The device registration key.
type DeviceRegistrationKey struct {
	// READ-ONLY; The registration key for the device.
	RegistrationKey *string `json:"registrationKey,omitempty" azure:"ro"`
}

// DevicesBeginCreateOrUpdateOptions contains the optional parameters for the Devices.BeginCreateOrUpdate method.
type DevicesBeginCreateOrUpdateOptions struct {
	// placeholder for future optional parameters
}

// DevicesBeginDeleteOptions contains the optional parameters for the Devices.BeginDelete method.
type DevicesBeginDeleteOptions struct {
	// placeholder for future optional parameters
}

// DevicesGetOptions contains the optional parameters for the Devices.Get method.
type DevicesGetOptions struct {
	// placeholder for future optional parameters
}

// DevicesListByResourceGroupOptions contains the optional parameters for the Devices.ListByResourceGroup method.
type DevicesListByResourceGroupOptions struct {
	// placeholder for future optional parameters
}

// DevicesListBySubscriptionOptions contains the optional parameters for the Devices.ListBySubscription method.
type DevicesListBySubscriptionOptions struct {
	// placeholder for future optional parameters
}

// DevicesListRegistrationKeyOptions contains the optional parameters for the Devices.ListRegistrationKey method.
type DevicesListRegistrationKeyOptions struct {
	// placeholder for future optional parameters
}

// DevicesUpdateTagsOptions contains the optional parameters for the Devices.UpdateTags method.
type DevicesUpdateTagsOptions struct {
	// placeholder for future optional parameters
}

// ErrorAdditionalInfo - The resource management error additional info.
type ErrorAdditionalInfo struct {
	// READ-ONLY; The additional info.
	Info map[string]interface{} `json:"info,omitempty" azure:"ro"`

	// READ-ONLY; The additional info type.
	Type *string `json:"type,omitempty" azure:"ro"`
}

// ErrorDetail - The error detail.
type ErrorDetail struct {
	// READ-ONLY; The error additional info.
	AdditionalInfo []*ErrorAdditionalInfo `json:"additionalInfo,omitempty" azure:"ro"`

	// READ-ONLY; The error code.
	Code *string `json:"code,omitempty" azure:"ro"`

	// READ-ONLY; The error details.
	Details []*ErrorDetail `json:"details,omitempty" azure:"ro"`

	// READ-ONLY; The error message.
	Message *string `json:"message,omitempty" azure:"ro"`

	// READ-ONLY; The error target.
	Target *string `json:"target,omitempty" azure:"ro"`
}

// MarshalJSON implements the json.Marshaller interface for type ErrorDetail.
func (e ErrorDetail) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "additionalInfo", e.AdditionalInfo)
	populate(objectMap, "code", e.Code)
	populate(objectMap, "details", e.Details)
	populate(objectMap, "message", e.Message)
	populate(objectMap, "target", e.Target)
	return json.Marshal(objectMap)
}

// ErrorResponse - Common error response for all Azure Resource Manager APIs to return error details for failed operations. (This also follows the OData
// error response format.).
// Implements the error and azcore.HTTPResponse interfaces.
type ErrorResponse struct {
	raw string
	// The error object.
	InnerError *ErrorDetail `json:"error,omitempty"`
}

// Error implements the error interface for type ErrorResponse.
// The contents of the error text are not contractual and subject to change.
func (e ErrorResponse) Error() string {
	return e.raw
}

// ImageReference - The image reference properties.
type ImageReference struct {
	// Specifies in decimal numbers, the exact version of image used to create the virtual machine.
	ExactVersion *string `json:"exactVersion,omitempty"`

	// Specifies the offer of the image used to create the virtual machine.
	Offer *string `json:"offer,omitempty"`

	// The image publisher.
	Publisher *string `json:"publisher,omitempty"`

	// The image SKU.
	SKU *string `json:"sku,omitempty"`

	// Specifies the version of the image used to create the virtual machine. The allowed formats are Major.Minor.Build or 'latest'. Major, Minor, and Build
	// are decimal numbers. Specify 'latest' to use the
	// latest version of an image available at deploy time. Even if you use 'latest', the VM image will not automatically update after deploy time even if a
	// new version becomes available.
	Version *string `json:"version,omitempty"`
}

// LinuxConfiguration - Specifies the Linux operating system settings on the virtual machine.
type LinuxConfiguration struct {
	// Specifies the ssh key configuration for a Linux OS.
	SSH *SSHConfiguration `json:"ssh,omitempty"`
}

// NetworkFunction - Network function resource response.
type NetworkFunction struct {
	TrackedResource
	// A unique read-only string that changes whenever the resource is updated.
	Etag *string `json:"etag,omitempty"`

	// Network function properties.
	Properties *NetworkFunctionPropertiesFormat `json:"properties,omitempty"`

	// READ-ONLY; The system meta data relating to this resource.
	SystemData *SystemData `json:"systemData,omitempty" azure:"ro"`
}

// MarshalJSON implements the json.Marshaller interface for type NetworkFunction.
func (n NetworkFunction) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	n.TrackedResource.marshalInternal(objectMap)
	populate(objectMap, "etag", n.Etag)
	populate(objectMap, "properties", n.Properties)
	populate(objectMap, "systemData", n.SystemData)
	return json.Marshal(objectMap)
}

// UnmarshalJSON implements the json.Unmarshaller interface for type NetworkFunction.
func (n *NetworkFunction) UnmarshalJSON(data []byte) error {
	var rawMsg map[string]json.RawMessage
	if err := json.Unmarshal(data, &rawMsg); err != nil {
		return err
	}
	for key, val := range rawMsg {
		var err error
		switch key {
		case "etag":
			err = unpopulate(val, &n.Etag)
			delete(rawMsg, key)
		case "properties":
			err = unpopulate(val, &n.Properties)
			delete(rawMsg, key)
		case "systemData":
			err = unpopulate(val, &n.SystemData)
			delete(rawMsg, key)
		}
		if err != nil {
			return err
		}
	}
	if err := n.TrackedResource.unmarshalInternal(rawMsg); err != nil {
		return err
	}
	return nil
}

// NetworkFunctionListResult - Response for network function API service call.
type NetworkFunctionListResult struct {
	// A list of network function resources in a subscription or resource group.
	Value []*NetworkFunction `json:"value,omitempty"`

	// READ-ONLY; The URL to get the next set of results.
	NextLink *string `json:"nextLink,omitempty" azure:"ro"`
}

// MarshalJSON implements the json.Marshaller interface for type NetworkFunctionListResult.
func (n NetworkFunctionListResult) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "nextLink", n.NextLink)
	populate(objectMap, "value", n.Value)
	return json.Marshal(objectMap)
}

// NetworkFunctionPropertiesFormat - Network function properties.
type NetworkFunctionPropertiesFormat struct {
	// The reference to the device resource. Once set, it cannot be updated.
	Device *SubResource `json:"device,omitempty"`

	// The parameters for the managed application.
	ManagedApplicationParameters map[string]interface{} `json:"managedApplicationParameters,omitempty"`

	// The network function container configurations from the user.
	NetworkFunctionContainerConfigurations map[string]interface{} `json:"networkFunctionContainerConfigurations,omitempty"`

	// The network function configurations from the user.
	NetworkFunctionUserConfigurations []*NetworkFunctionUserConfiguration `json:"networkFunctionUserConfigurations,omitempty"`

	// The sku name for the network function. Once set, it cannot be updated.
	SKUName *string `json:"skuName,omitempty"`

	// The vendor name for the network function. Once set, it cannot be updated.
	VendorName *string `json:"vendorName,omitempty"`

	// READ-ONLY; The resource URI of the managed application.
	ManagedApplication *SubResource `json:"managedApplication,omitempty" azure:"ro"`

	// READ-ONLY; The provisioning state of the network function resource.
	ProvisioningState *ProvisioningState `json:"provisioningState,omitempty" azure:"ro"`

	// READ-ONLY; The sku type for the network function.
	SKUType *SKUType `json:"skuType,omitempty" azure:"ro"`

	// READ-ONLY; The service key for the network function resource.
	ServiceKey *string `json:"serviceKey,omitempty" azure:"ro"`

	// READ-ONLY; The vendor provisioning state for the network function resource.
	VendorProvisioningState *VendorProvisioningState `json:"vendorProvisioningState,omitempty" azure:"ro"`
}

// MarshalJSON implements the json.Marshaller interface for type NetworkFunctionPropertiesFormat.
func (n NetworkFunctionPropertiesFormat) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "device", n.Device)
	populate(objectMap, "managedApplication", n.ManagedApplication)
	populate(objectMap, "managedApplicationParameters", n.ManagedApplicationParameters)
	populate(objectMap, "networkFunctionContainerConfigurations", n.NetworkFunctionContainerConfigurations)
	populate(objectMap, "networkFunctionUserConfigurations", n.NetworkFunctionUserConfigurations)
	populate(objectMap, "provisioningState", n.ProvisioningState)
	populate(objectMap, "skuName", n.SKUName)
	populate(objectMap, "skuType", n.SKUType)
	populate(objectMap, "serviceKey", n.ServiceKey)
	populate(objectMap, "vendorName", n.VendorName)
	populate(objectMap, "vendorProvisioningState", n.VendorProvisioningState)
	return json.Marshal(objectMap)
}

// NetworkFunctionRoleConfiguration - Network function role configuration.
type NetworkFunctionRoleConfiguration struct {
	// Specifies the custom settings for the virtual machine.
	CustomProfile *CustomProfile `json:"customProfile,omitempty"`

	// The network interface configurations.
	NetworkInterfaces []*NetworkInterface `json:"networkInterfaces,omitempty"`

	// Specifies the operating system settings for the role instance. This value can be updated during the deployment of network function.
	OSProfile *OsProfile `json:"osProfile,omitempty"`

	// The name of the network function role.
	RoleName *string `json:"roleName,omitempty"`

	// Role type.
	RoleType *NetworkFunctionRoleConfigurationType `json:"roleType,omitempty"`

	// Specifies the storage settings for the virtual machine disks.
	StorageProfile *StorageProfile `json:"storageProfile,omitempty"`

	// The user parameters for customers. The format of user data parameters has to be matched with the provided user data template.
	UserDataParameters map[string]interface{} `json:"userDataParameters,omitempty"`

	// The user data template for customers. This is a json schema template describing the format and data type of user data parameters.
	UserDataTemplate map[string]interface{} `json:"userDataTemplate,omitempty"`

	// The size of the virtual machine.
	VirtualMachineSize *VirtualMachineSizeTypes `json:"virtualMachineSize,omitempty"`
}

// MarshalJSON implements the json.Marshaller interface for type NetworkFunctionRoleConfiguration.
func (n NetworkFunctionRoleConfiguration) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "customProfile", n.CustomProfile)
	populate(objectMap, "networkInterfaces", n.NetworkInterfaces)
	populate(objectMap, "osProfile", n.OSProfile)
	populate(objectMap, "roleName", n.RoleName)
	populate(objectMap, "roleType", n.RoleType)
	populate(objectMap, "storageProfile", n.StorageProfile)
	populate(objectMap, "userDataParameters", n.UserDataParameters)
	populate(objectMap, "userDataTemplate", n.UserDataTemplate)
	populate(objectMap, "virtualMachineSize", n.VirtualMachineSize)
	return json.Marshal(objectMap)
}

// NetworkFunctionRoleInstanceListResult - List of role instances of vendor network function.
type NetworkFunctionRoleInstanceListResult struct {
	// READ-ONLY; The URL to get the next set of results.
	NextLink *string `json:"nextLink,omitempty" azure:"ro"`

	// READ-ONLY; A list of role instances.
	Value []*RoleInstance `json:"value,omitempty" azure:"ro"`
}

// MarshalJSON implements the json.Marshaller interface for type NetworkFunctionRoleInstanceListResult.
func (n NetworkFunctionRoleInstanceListResult) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "nextLink", n.NextLink)
	populate(objectMap, "value", n.Value)
	return json.Marshal(objectMap)
}

// NetworkFunctionSKUDetails - The network function sku details.
type NetworkFunctionSKUDetails struct {
	// The network function sku type.
	SKUType *SKUType `json:"skuType,omitempty"`

	// The network function sku role details.
	Value []*NetworkFunctionSKURoleDetails `json:"value,omitempty"`

	// READ-ONLY; The URL to get the next set of results.
	NextLink *string `json:"nextLink,omitempty" azure:"ro"`
}

// MarshalJSON implements the json.Marshaller interface for type NetworkFunctionSKUDetails.
func (n NetworkFunctionSKUDetails) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "nextLink", n.NextLink)
	populate(objectMap, "skuType", n.SKUType)
	populate(objectMap, "value", n.Value)
	return json.Marshal(objectMap)
}

// NetworkFunctionSKUListResult - A list of available network function skus.
type NetworkFunctionSKUListResult struct {
	// The network function vendor sku overview properties.
	Value []*SKUOverview `json:"value,omitempty"`

	// READ-ONLY; The URL to get the next set of results.
	NextLink *string `json:"nextLink,omitempty" azure:"ro"`
}

// MarshalJSON implements the json.Marshaller interface for type NetworkFunctionSKUListResult.
func (n NetworkFunctionSKUListResult) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "nextLink", n.NextLink)
	populate(objectMap, "value", n.Value)
	return json.Marshal(objectMap)
}

// NetworkFunctionSKURoleDetails - The network function user configuration.
type NetworkFunctionSKURoleDetails struct {
	// The network interface configuration.
	NetworkInterfaces []*NetworkInterface `json:"networkInterfaces,omitempty"`

	// The name of the network function role.
	RoleName *string `json:"roleName,omitempty"`

	// The user parameters for customers.
	UserDataParameters map[string]interface{} `json:"userDataParameters,omitempty"`

	// The user data template for customers.
	UserDataTemplate map[string]interface{} `json:"userDataTemplate,omitempty"`
}

// MarshalJSON implements the json.Marshaller interface for type NetworkFunctionSKURoleDetails.
func (n NetworkFunctionSKURoleDetails) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "networkInterfaces", n.NetworkInterfaces)
	populate(objectMap, "roleName", n.RoleName)
	populate(objectMap, "userDataParameters", n.UserDataParameters)
	populate(objectMap, "userDataTemplate", n.UserDataTemplate)
	return json.Marshal(objectMap)
}

// NetworkFunctionTemplate - The network function template.
type NetworkFunctionTemplate struct {
	// An array of network function role definitions.
	NetworkFunctionRoleConfigurations []*NetworkFunctionRoleConfiguration `json:"networkFunctionRoleConfigurations,omitempty"`
}

// MarshalJSON implements the json.Marshaller interface for type NetworkFunctionTemplate.
func (n NetworkFunctionTemplate) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "networkFunctionRoleConfigurations", n.NetworkFunctionRoleConfigurations)
	return json.Marshal(objectMap)
}

// NetworkFunctionUserConfiguration - The network function user configuration.
type NetworkFunctionUserConfiguration struct {
	// The network interface configuration.
	NetworkInterfaces []*NetworkInterface `json:"networkInterfaces,omitempty"`

	// Specifies the operating system settings for the role instance.
	OSProfile *NetworkFunctionUserConfigurationOsProfile `json:"osProfile,omitempty"`

	// The name of the network function role.
	RoleName *string `json:"roleName,omitempty"`

	// The user data parameters from the customer.
	UserDataParameters map[string]interface{} `json:"userDataParameters,omitempty"`
}

// MarshalJSON implements the json.Marshaller interface for type NetworkFunctionUserConfiguration.
func (n NetworkFunctionUserConfiguration) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "networkInterfaces", n.NetworkInterfaces)
	populate(objectMap, "osProfile", n.OSProfile)
	populate(objectMap, "roleName", n.RoleName)
	populate(objectMap, "userDataParameters", n.UserDataParameters)
	return json.Marshal(objectMap)
}

// NetworkFunctionUserConfigurationOsProfile - Specifies the operating system settings for the role instance.
type NetworkFunctionUserConfigurationOsProfile struct {
	// Specifies a base-64 encoded string of custom data. The base-64 encoded string is decoded to a binary array that is saved as a file on the virtual machine.
	// The maximum length of the binary array is
	// 65535 bytes.
	// Note: Do not pass any secrets or passwords in customData property
	// This property cannot be updated after the VM is created.
	// customData is passed to the VM to be saved as a file. For more information see Custom Data on Azure VMs [https://azure.microsoft.com/en-us/blog/custom-data-and-cloud-init-on-windows-azure/]
	// For using cloud-init for your Linux VM, see Using cloud-init to customize a Linux VM during creation
	// [https://docs.microsoft.com/azure/virtual-machines/virtual-machines-linux-using-cloud-init?toc=%2fazure%2fvirtual-machines%2flinux%2ftoc.json]
	CustomData *string `json:"customData,omitempty"`
}

// NetworkFunctionVendor - The network function vendor.
type NetworkFunctionVendor struct {
	// Vendors of Hybrid Network service provider.
	Properties *VendorDetails `json:"properties,omitempty"`
}

// NetworkFunctionVendorConfiguration - Network function vendor configuration.
type NetworkFunctionVendorConfiguration struct {
	// The network interface configurations.
	NetworkInterfaces []*NetworkInterface `json:"networkInterfaces,omitempty"`

	// Specifies the operating system settings for the role instance.
	OSProfile *OsProfile `json:"osProfile,omitempty"`

	// The name of the vendor network function role.
	RoleName *string `json:"roleName,omitempty"`

	// READ-ONLY; The user parameters from the customer.
	UserDataParameters map[string]interface{} `json:"userDataParameters,omitempty" azure:"ro"`
}

// MarshalJSON implements the json.Marshaller interface for type NetworkFunctionVendorConfiguration.
func (n NetworkFunctionVendorConfiguration) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "networkInterfaces", n.NetworkInterfaces)
	populate(objectMap, "osProfile", n.OSProfile)
	populate(objectMap, "roleName", n.RoleName)
	populate(objectMap, "userDataParameters", n.UserDataParameters)
	return json.Marshal(objectMap)
}

// NetworkFunctionVendorListResult - The network function vendor list result.
type NetworkFunctionVendorListResult struct {
	// A list of available network function vendors and skus.
	Value []*NetworkFunctionVendor `json:"value,omitempty"`

	// READ-ONLY; The URL to get the next set of results.
	NextLink *string `json:"nextLink,omitempty" azure:"ro"`
}

// MarshalJSON implements the json.Marshaller interface for type NetworkFunctionVendorListResult.
func (n NetworkFunctionVendorListResult) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "nextLink", n.NextLink)
	populate(objectMap, "value", n.Value)
	return json.Marshal(objectMap)
}

// NetworkFunctionVendorSKUsListBySKUOptions contains the optional parameters for the NetworkFunctionVendorSKUs.ListBySKU method.
type NetworkFunctionVendorSKUsListBySKUOptions struct {
	// placeholder for future optional parameters
}

// NetworkFunctionVendorSKUsListByVendorOptions contains the optional parameters for the NetworkFunctionVendorSKUs.ListByVendor method.
type NetworkFunctionVendorSKUsListByVendorOptions struct {
	// placeholder for future optional parameters
}

// NetworkFunctionVendorsListOptions contains the optional parameters for the NetworkFunctionVendors.List method.
type NetworkFunctionVendorsListOptions struct {
	// placeholder for future optional parameters
}

// NetworkFunctionsBeginCreateOrUpdateOptions contains the optional parameters for the NetworkFunctions.BeginCreateOrUpdate method.
type NetworkFunctionsBeginCreateOrUpdateOptions struct {
	// placeholder for future optional parameters
}

// NetworkFunctionsBeginDeleteOptions contains the optional parameters for the NetworkFunctions.BeginDelete method.
type NetworkFunctionsBeginDeleteOptions struct {
	// placeholder for future optional parameters
}

// NetworkFunctionsGetOptions contains the optional parameters for the NetworkFunctions.Get method.
type NetworkFunctionsGetOptions struct {
	// placeholder for future optional parameters
}

// NetworkFunctionsListByResourceGroupOptions contains the optional parameters for the NetworkFunctions.ListByResourceGroup method.
type NetworkFunctionsListByResourceGroupOptions struct {
	// placeholder for future optional parameters
}

// NetworkFunctionsListBySubscriptionOptions contains the optional parameters for the NetworkFunctions.ListBySubscription method.
type NetworkFunctionsListBySubscriptionOptions struct {
	// placeholder for future optional parameters
}

// NetworkFunctionsUpdateTagsOptions contains the optional parameters for the NetworkFunctions.UpdateTags method.
type NetworkFunctionsUpdateTagsOptions struct {
	// placeholder for future optional parameters
}

// NetworkInterface - Network interface properties.
type NetworkInterface struct {
	// A list of IP configurations of the network interface.
	IPConfigurations []*NetworkInterfaceIPConfiguration `json:"ipConfigurations,omitempty"`

	// The MAC address of the network interface.
	MacAddress *string `json:"macAddress,omitempty"`

	// The name of the network interface.
	NetworkInterfaceName *string `json:"networkInterfaceName,omitempty"`

	// The type of the VM switch.
	VMSwitchType *VMSwitchType `json:"vmSwitchType,omitempty"`
}

// MarshalJSON implements the json.Marshaller interface for type NetworkInterface.
func (n NetworkInterface) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "ipConfigurations", n.IPConfigurations)
	populate(objectMap, "macAddress", n.MacAddress)
	populate(objectMap, "networkInterfaceName", n.NetworkInterfaceName)
	populate(objectMap, "vmSwitchType", n.VMSwitchType)
	return json.Marshal(objectMap)
}

// NetworkInterfaceIPConfiguration - Network interface IP configuration properties.
type NetworkInterfaceIPConfiguration struct {
	// The list of DNS servers IP addresses.
	DNSServers []*string `json:"dnsServers,omitempty"`

	// The value of the gateway.
	Gateway *string `json:"gateway,omitempty"`

	// The value of the IP address.
	IPAddress *string `json:"ipAddress,omitempty"`

	// IP address allocation method.
	IPAllocationMethod *IPAllocationMethod `json:"ipAllocationMethod,omitempty"`

	// IP address version.
	IPVersion *IPVersion `json:"ipVersion,omitempty"`

	// The value of the subnet.
	Subnet *string `json:"subnet,omitempty"`
}

// MarshalJSON implements the json.Marshaller interface for type NetworkInterfaceIPConfiguration.
func (n NetworkInterfaceIPConfiguration) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "dnsServers", n.DNSServers)
	populate(objectMap, "gateway", n.Gateway)
	populate(objectMap, "ipAddress", n.IPAddress)
	populate(objectMap, "ipAllocationMethod", n.IPAllocationMethod)
	populate(objectMap, "ipVersion", n.IPVersion)
	populate(objectMap, "subnet", n.Subnet)
	return json.Marshal(objectMap)
}

// Operation - Object that describes a single Microsoft.HybridNetwork operation.
type Operation struct {
	// READ-ONLY; The object that represents the operation.
	Display *OperationDisplay `json:"display,omitempty" azure:"ro"`

	// READ-ONLY; Operation name: {provider}/{resource}/{operation}.
	Name *string `json:"name,omitempty" azure:"ro"`
}

// OperationDisplay - The object that represents the operation.
type OperationDisplay struct {
	// Description of the operation.
	Description *string `json:"description,omitempty"`

	// Operation type: Read, write, delete, etc.
	Operation *string `json:"operation,omitempty"`

	// Service provider: Microsoft.HybridNetwork.
	Provider *string `json:"provider,omitempty"`

	// Resource on which the operation is performed: Registration definition, registration assignment, etc.
	Resource *string `json:"resource,omitempty"`
}

// OperationList - A list of the operations.
type OperationList struct {
	// READ-ONLY; The URL to get the next set of results.
	NextLink *string `json:"nextLink,omitempty" azure:"ro"`

	// READ-ONLY; A list of Microsoft.HybridNetwork operations.
	Value []*Operation `json:"value,omitempty" azure:"ro"`
}

// MarshalJSON implements the json.Marshaller interface for type OperationList.
func (o OperationList) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "nextLink", o.NextLink)
	populate(objectMap, "value", o.Value)
	return json.Marshal(objectMap)
}

// OperationsListOptions contains the optional parameters for the Operations.List method.
type OperationsListOptions struct {
	// placeholder for future optional parameters
}

// OsDisk - Specifies information about the operating system disk used by the virtual machine.
// For more information about disks, see About disks and VHDs for Azure virtual machines
// [https://docs.microsoft.com/azure/virtual-machines/virtual-machines-windows-about-disks-vhds?toc=%2fazure%2fvirtual-machines%2fwindows%2ftoc.json].
type OsDisk struct {
	// Specifies the size of os disk in gigabytes. This is the fully expanded disk size needed of the VHD image on the ASE. This disk size should be greater
	// than the size of the VHD provided in vhdUri.
	DiskSizeGB *int32 `json:"diskSizeGB,omitempty"`

	// The VHD name.
	Name *string `json:"name,omitempty"`

	// The OS type.
	OSType *OperatingSystemTypes `json:"osType,omitempty"`

	// The virtual hard disk.
	Vhd *VirtualHardDisk `json:"vhd,omitempty"`
}

// OsProfile - Specifies the operating system settings for the role instance.
type OsProfile struct {
	// Specifies the name of the administrator account.
	// Windows-only restriction: Cannot end in "."
	// Disallowed values: "administrator", "admin", "user", "user1", "test", "user2", "test1", "user3", "admin1", "1", "123", "a", "actuser", "adm", "admin2",
	// "aspnet", "backup", "console", "david", "guest",
	// "john", "owner", "root", "server", "sql", "support", "support_388945a0", "sys", "test2", "test3", "user4", "user5".
	// Minimum-length (Linux): 1 character
	// Max-length (Linux): 64 characters
	// Max-length (Windows): 20 characters
	// For root access to the Linux VM, see Using root privileges on Linux virtual machines in Azure
	// [https://docs.microsoft.com/azure/virtual-machines/virtual-machines-linux-use-root-privileges?toc=%2fazure%2fvirtual-machines%2flinux%2ftoc.json]
	// For a list of built-in system users on Linux that should not be used in this field, see Selecting User Names for Linux on Azure
	// [https://docs.microsoft.com/azure/virtual-machines/virtual-machines-linux-usernames?toc=%2fazure%2fvirtual-machines%2flinux%2ftoc.json].
	AdminUsername *string `json:"adminUsername,omitempty"`

	// Specifies a base-64 encoded string of custom data. The base-64 encoded string is decoded to a binary array that is saved as a file on the virtual machine.
	// The maximum length of the binary array is
	// 65535 bytes.
	// Note: Do not pass any secrets or passwords in customData property
	// This property cannot be updated after the VM is created.
	// customData is passed to the VM to be saved as a file. For more information see Custom Data on Azure VMs [https://azure.microsoft.com/en-us/blog/custom-data-and-cloud-init-on-windows-azure/]
	// For using cloud-init for your Linux VM, see Using cloud-init to customize a Linux VM during creation
	// [https://docs.microsoft.com/azure/virtual-machines/virtual-machines-linux-using-cloud-init?toc=%2fazure%2fvirtual-machines%2flinux%2ftoc.json]
	CustomData *string `json:"customData,omitempty"`

	// Indicates if custom data is required to deploy this role.
	CustomDataRequired *bool `json:"customDataRequired,omitempty"`

	// Specifies the Linux operating system settings on the virtual machine.
	// For a list of supported Linux distributions, see Linux on Azure-Endorsed Distributions
	// [https://docs.microsoft.com/azure/virtual-machines/virtual-machines-linux-endorsed-distros?toc=%2fazure%2fvirtual-machines%2flinux%2ftoc.json]
	// For running non-endorsed distributions, see Information for Non-Endorsed Distributions
	// [https://docs.microsoft.com/azure/virtual-machines/virtual-machines-linux-create-upload-generic?toc=%2fazure%2fvirtual-machines%2flinux%2ftoc.json].
	LinuxConfiguration *LinuxConfiguration `json:"linuxConfiguration,omitempty"`
}

// PreviewSubscription - Customer subscription which can use a sku.
type PreviewSubscription struct {
	// The Preview Subscription properties.
	Properties *PreviewSubscriptionProperties `json:"properties,omitempty"`

	// READ-ONLY; The ARM ID of the resource.
	ID *string `json:"id,omitempty" azure:"ro"`

	// READ-ONLY; The preview subscription ID.
	Name *string `json:"name,omitempty" azure:"ro"`

	// READ-ONLY; The system meta data relating to this resource.
	SystemData *SystemData `json:"systemData,omitempty" azure:"ro"`

	// READ-ONLY; The type of the resource.
	Type *string `json:"type,omitempty" azure:"ro"`
}

// PreviewSubscriptionProperties - PreviewSubscription properties
type PreviewSubscriptionProperties struct {
	// READ-ONLY; The provisioning state of the PreviewSubscription resource.
	ProvisioningState *ProvisioningState `json:"provisioningState,omitempty" azure:"ro"`
}

// PreviewSubscriptionsList - A list of customer subscriptions which can use a sku.
type PreviewSubscriptionsList struct {
	// A list of preview subscriptions.
	Value []*PreviewSubscription `json:"value,omitempty"`

	// READ-ONLY; The URL to get the next set of results.
	NextLink *string `json:"nextLink,omitempty" azure:"ro"`
}

// MarshalJSON implements the json.Marshaller interface for type PreviewSubscriptionsList.
func (p PreviewSubscriptionsList) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "nextLink", p.NextLink)
	populate(objectMap, "value", p.Value)
	return json.Marshal(objectMap)
}

// ProxyResource - The resource model definition for a Azure Resource Manager proxy resource. It will not have tags and a location
type ProxyResource struct {
	Resource
}

func (p ProxyResource) marshalInternal(objectMap map[string]interface{}) {
	p.Resource.marshalInternal(objectMap)
}

func (p *ProxyResource) unmarshalInternal(rawMsg map[string]json.RawMessage) error {
	if err := p.Resource.unmarshalInternal(rawMsg); err != nil {
		return err
	}
	return nil
}

// Resource - Common fields that are returned in the response for all Azure Resource Manager resources
type Resource struct {
	// READ-ONLY; Fully qualified resource ID for the resource. Ex - /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}
	ID *string `json:"id,omitempty" azure:"ro"`

	// READ-ONLY; The name of the resource
	Name *string `json:"name,omitempty" azure:"ro"`

	// READ-ONLY; The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or "Microsoft.Storage/storageAccounts"
	Type *string `json:"type,omitempty" azure:"ro"`
}

// MarshalJSON implements the json.Marshaller interface for type Resource.
func (r Resource) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	r.marshalInternal(objectMap)
	return json.Marshal(objectMap)
}

// UnmarshalJSON implements the json.Unmarshaller interface for type Resource.
func (r *Resource) UnmarshalJSON(data []byte) error {
	var rawMsg map[string]json.RawMessage
	if err := json.Unmarshal(data, &rawMsg); err != nil {
		return err
	}
	return r.unmarshalInternal(rawMsg)
}

func (r Resource) marshalInternal(objectMap map[string]interface{}) {
	populate(objectMap, "id", r.ID)
	populate(objectMap, "name", r.Name)
	populate(objectMap, "type", r.Type)
}

func (r *Resource) unmarshalInternal(rawMsg map[string]json.RawMessage) error {
	for key, val := range rawMsg {
		var err error
		switch key {
		case "id":
			err = unpopulate(val, &r.ID)
			delete(rawMsg, key)
		case "name":
			err = unpopulate(val, &r.Name)
			delete(rawMsg, key)
		case "type":
			err = unpopulate(val, &r.Type)
			delete(rawMsg, key)
		}
		if err != nil {
			return err
		}
	}
	return nil
}

// RoleInstance - The role instance sub resource.
type RoleInstance struct {
	// The ARM ID of the resource.
	ID *string `json:"id,omitempty"`

	// The role instance name.
	Name *string `json:"name,omitempty"`

	// The role instance properties.
	Properties *RoleInstanceProperties `json:"properties,omitempty"`

	// The type of the resource.
	Type *string `json:"type,omitempty"`

	// READ-ONLY; The system meta data relating to this resource.
	SystemData *SystemData `json:"systemData,omitempty" azure:"ro"`
}

// RoleInstanceProperties - The role instance properties of the network function.
type RoleInstanceProperties struct {
	// The operational state of the role instance.
	OperationalState *OperationalState `json:"operationalState,omitempty"`

	// READ-ONLY; The provisioning state of the RoleInstance resource.
	ProvisioningState *ProvisioningState `json:"provisioningState,omitempty" azure:"ro"`
}

// RoleInstancesBeginRestartOptions contains the optional parameters for the RoleInstances.BeginRestart method.
type RoleInstancesBeginRestartOptions struct {
	// placeholder for future optional parameters
}

// RoleInstancesBeginStartOptions contains the optional parameters for the RoleInstances.BeginStart method.
type RoleInstancesBeginStartOptions struct {
	// placeholder for future optional parameters
}

// RoleInstancesBeginStopOptions contains the optional parameters for the RoleInstances.BeginStop method.
type RoleInstancesBeginStopOptions struct {
	// placeholder for future optional parameters
}

// RoleInstancesGetOptions contains the optional parameters for the RoleInstances.Get method.
type RoleInstancesGetOptions struct {
	// placeholder for future optional parameters
}

// RoleInstancesListOptions contains the optional parameters for the RoleInstances.List method.
type RoleInstancesListOptions struct {
	// placeholder for future optional parameters
}

// SKUOverview - The network function sku overview.
type SKUOverview struct {
	// The vendor sku name.
	SKUName *string `json:"skuName,omitempty"`

	// The vendor sku type.
	SKUType *SKUType `json:"skuType,omitempty"`
}

// SSHConfiguration - SSH configuration for Linux based VMs running on Azure
type SSHConfiguration struct {
	// The list of SSH public keys used to authenticate with linux based VMs.
	PublicKeys []*SSHPublicKey `json:"publicKeys,omitempty"`
}

// MarshalJSON implements the json.Marshaller interface for type SSHConfiguration.
func (s SSHConfiguration) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "publicKeys", s.PublicKeys)
	return json.Marshal(objectMap)
}

// SSHPublicKey - Contains information about SSH certificate public key and the path on the Linux VM where the public key is placed.
type SSHPublicKey struct {
	// SSH public key certificate used to authenticate with the VM through ssh. The key needs to be at least 2048-bit and in ssh-rsa format.
	// For creating ssh keys, see Create SSH keys on Linux and Mac for Linux VMs in Azure
	// [https://docs.microsoft.com/azure/virtual-machines/virtual-machines-linux-mac-create-ssh-keys?toc=%2fazure%2fvirtual-machines%2flinux%2ftoc.json].
	KeyData *string `json:"keyData,omitempty"`

	// Specifies the full path on the created VM where ssh public key is stored. If the file already exists, the specified key is appended to the file. Example:
	// /home/user/.ssh/authorized_keys
	Path *string `json:"path,omitempty"`
}

// StorageProfile - Specifies the storage settings for the virtual machine disks.
type StorageProfile struct {
	// Specifies the parameters that are used to add a data disk to a virtual machine.
	DataDisks []*DataDisk `json:"dataDisks,omitempty"`

	// The image reference properties.
	ImageReference *ImageReference `json:"imageReference,omitempty"`

	// Specifies information about the operating system disk used by the virtual machine.
	OSDisk *OsDisk `json:"osDisk,omitempty"`
}

// MarshalJSON implements the json.Marshaller interface for type StorageProfile.
func (s StorageProfile) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "dataDisks", s.DataDisks)
	populate(objectMap, "imageReference", s.ImageReference)
	populate(objectMap, "osDisk", s.OSDisk)
	return json.Marshal(objectMap)
}

// SubResource - Reference to another sub resource.
type SubResource struct {
	// Resource ID.
	ID *string `json:"id,omitempty"`
}

// SystemData - Metadata pertaining to creation and last modification of the resource.
type SystemData struct {
	// The timestamp of resource creation (UTC).
	CreatedAt *time.Time `json:"createdAt,omitempty"`

	// The identity that created the resource.
	CreatedBy *string `json:"createdBy,omitempty"`

	// The type of identity that created the resource.
	CreatedByType *CreatedByType `json:"createdByType,omitempty"`

	// The timestamp of resource last modification (UTC)
	LastModifiedAt *time.Time `json:"lastModifiedAt,omitempty"`

	// The identity that last modified the resource.
	LastModifiedBy *string `json:"lastModifiedBy,omitempty"`

	// The type of identity that last modified the resource.
	LastModifiedByType *CreatedByType `json:"lastModifiedByType,omitempty"`
}

// MarshalJSON implements the json.Marshaller interface for type SystemData.
func (s SystemData) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populateTimeRFC3339(objectMap, "createdAt", s.CreatedAt)
	populate(objectMap, "createdBy", s.CreatedBy)
	populate(objectMap, "createdByType", s.CreatedByType)
	populateTimeRFC3339(objectMap, "lastModifiedAt", s.LastModifiedAt)
	populate(objectMap, "lastModifiedBy", s.LastModifiedBy)
	populate(objectMap, "lastModifiedByType", s.LastModifiedByType)
	return json.Marshal(objectMap)
}

// UnmarshalJSON implements the json.Unmarshaller interface for type SystemData.
func (s *SystemData) UnmarshalJSON(data []byte) error {
	var rawMsg map[string]json.RawMessage
	if err := json.Unmarshal(data, &rawMsg); err != nil {
		return err
	}
	for key, val := range rawMsg {
		var err error
		switch key {
		case "createdAt":
			err = unpopulateTimeRFC3339(val, &s.CreatedAt)
			delete(rawMsg, key)
		case "createdBy":
			err = unpopulate(val, &s.CreatedBy)
			delete(rawMsg, key)
		case "createdByType":
			err = unpopulate(val, &s.CreatedByType)
			delete(rawMsg, key)
		case "lastModifiedAt":
			err = unpopulateTimeRFC3339(val, &s.LastModifiedAt)
			delete(rawMsg, key)
		case "lastModifiedBy":
			err = unpopulate(val, &s.LastModifiedBy)
			delete(rawMsg, key)
		case "lastModifiedByType":
			err = unpopulate(val, &s.LastModifiedByType)
			delete(rawMsg, key)
		}
		if err != nil {
			return err
		}
	}
	return nil
}

// TagsObject - Tags object for patch operations.
type TagsObject struct {
	// Resource tags.
	Tags map[string]*string `json:"tags,omitempty"`
}

// MarshalJSON implements the json.Marshaller interface for type TagsObject.
func (t TagsObject) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "tags", t.Tags)
	return json.Marshal(objectMap)
}

// TrackedResource - The resource model definition for an Azure Resource Manager tracked top level resource which has 'tags' and a 'location'
type TrackedResource struct {
	Resource
	// REQUIRED; The geo-location where the resource lives
	Location *string `json:"location,omitempty"`

	// Resource tags.
	Tags map[string]*string `json:"tags,omitempty"`
}

// MarshalJSON implements the json.Marshaller interface for type TrackedResource.
func (t TrackedResource) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	t.marshalInternal(objectMap)
	return json.Marshal(objectMap)
}

// UnmarshalJSON implements the json.Unmarshaller interface for type TrackedResource.
func (t *TrackedResource) UnmarshalJSON(data []byte) error {
	var rawMsg map[string]json.RawMessage
	if err := json.Unmarshal(data, &rawMsg); err != nil {
		return err
	}
	return t.unmarshalInternal(rawMsg)
}

func (t TrackedResource) marshalInternal(objectMap map[string]interface{}) {
	t.Resource.marshalInternal(objectMap)
	populate(objectMap, "location", t.Location)
	populate(objectMap, "tags", t.Tags)
}

func (t *TrackedResource) unmarshalInternal(rawMsg map[string]json.RawMessage) error {
	for key, val := range rawMsg {
		var err error
		switch key {
		case "location":
			err = unpopulate(val, &t.Location)
			delete(rawMsg, key)
		case "tags":
			err = unpopulate(val, &t.Tags)
			delete(rawMsg, key)
		}
		if err != nil {
			return err
		}
	}
	if err := t.Resource.unmarshalInternal(rawMsg); err != nil {
		return err
	}
	return nil
}

// Vendor resource.
type Vendor struct {
	ProxyResource
	// Vendor properties.
	Properties *VendorPropertiesFormat `json:"properties,omitempty"`

	// READ-ONLY; The system meta data relating to this resource.
	SystemData *SystemData `json:"systemData,omitempty" azure:"ro"`
}

// MarshalJSON implements the json.Marshaller interface for type Vendor.
func (v Vendor) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	v.ProxyResource.marshalInternal(objectMap)
	populate(objectMap, "properties", v.Properties)
	populate(objectMap, "systemData", v.SystemData)
	return json.Marshal(objectMap)
}

// UnmarshalJSON implements the json.Unmarshaller interface for type Vendor.
func (v *Vendor) UnmarshalJSON(data []byte) error {
	var rawMsg map[string]json.RawMessage
	if err := json.Unmarshal(data, &rawMsg); err != nil {
		return err
	}
	for key, val := range rawMsg {
		var err error
		switch key {
		case "properties":
			err = unpopulate(val, &v.Properties)
			delete(rawMsg, key)
		case "systemData":
			err = unpopulate(val, &v.SystemData)
			delete(rawMsg, key)
		}
		if err != nil {
			return err
		}
	}
	if err := v.ProxyResource.unmarshalInternal(rawMsg); err != nil {
		return err
	}
	return nil
}

// VendorDetails - The network function vendor details.
type VendorDetails struct {
	// The network function sku list.
	SKUList []*SKUOverview `json:"skuList,omitempty"`

	// The network function vendor name.
	VendorName *string `json:"vendorName,omitempty"`
}

// MarshalJSON implements the json.Marshaller interface for type VendorDetails.
func (v VendorDetails) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "skuList", v.SKUList)
	populate(objectMap, "vendorName", v.VendorName)
	return json.Marshal(objectMap)
}

// VendorListResult - Response for vendors API service call.
type VendorListResult struct {
	// A list of vendors.
	Value []*Vendor `json:"value,omitempty"`

	// READ-ONLY; The URL to get the next set of results.
	NextLink *string `json:"nextLink,omitempty" azure:"ro"`
}

// MarshalJSON implements the json.Marshaller interface for type VendorListResult.
func (v VendorListResult) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "nextLink", v.NextLink)
	populate(objectMap, "value", v.Value)
	return json.Marshal(objectMap)
}

// VendorNetworkFunction - Vendor network function sub resource.
type VendorNetworkFunction struct {
	ProxyResource
	// Network function details.
	Properties *VendorNetworkFunctionPropertiesFormat `json:"properties,omitempty"`

	// READ-ONLY; The system meta data relating to this resource.
	SystemData *SystemData `json:"systemData,omitempty" azure:"ro"`
}

// MarshalJSON implements the json.Marshaller interface for type VendorNetworkFunction.
func (v VendorNetworkFunction) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	v.ProxyResource.marshalInternal(objectMap)
	populate(objectMap, "properties", v.Properties)
	populate(objectMap, "systemData", v.SystemData)
	return json.Marshal(objectMap)
}

// UnmarshalJSON implements the json.Unmarshaller interface for type VendorNetworkFunction.
func (v *VendorNetworkFunction) UnmarshalJSON(data []byte) error {
	var rawMsg map[string]json.RawMessage
	if err := json.Unmarshal(data, &rawMsg); err != nil {
		return err
	}
	for key, val := range rawMsg {
		var err error
		switch key {
		case "properties":
			err = unpopulate(val, &v.Properties)
			delete(rawMsg, key)
		case "systemData":
			err = unpopulate(val, &v.SystemData)
			delete(rawMsg, key)
		}
		if err != nil {
			return err
		}
	}
	if err := v.ProxyResource.unmarshalInternal(rawMsg); err != nil {
		return err
	}
	return nil
}

// VendorNetworkFunctionListResult - Response for vendors API service call.
type VendorNetworkFunctionListResult struct {
	// A list of vendor network functions.
	Value []*VendorNetworkFunction `json:"value,omitempty"`

	// READ-ONLY; The URL to get the next set of results.
	NextLink *string `json:"nextLink,omitempty" azure:"ro"`
}

// MarshalJSON implements the json.Marshaller interface for type VendorNetworkFunctionListResult.
func (v VendorNetworkFunctionListResult) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "nextLink", v.NextLink)
	populate(objectMap, "value", v.Value)
	return json.Marshal(objectMap)
}

// VendorNetworkFunctionPropertiesFormat - Vendor network function properties.
type VendorNetworkFunctionPropertiesFormat struct {
	// An array of network function vendor configurations.
	NetworkFunctionVendorConfigurations []*NetworkFunctionVendorConfiguration `json:"networkFunctionVendorConfigurations,omitempty"`

	// The vendor controlled provisioning state of the vendor network function.
	VendorProvisioningState *VendorProvisioningState `json:"vendorProvisioningState,omitempty"`

	// READ-ONLY; The provisioning state of the vendor network function sub resource.
	ProvisioningState *ProvisioningState `json:"provisioningState,omitempty" azure:"ro"`

	// READ-ONLY; The name of the sku. Once set, it cannot be updated.
	SKUName *string `json:"skuName,omitempty" azure:"ro"`

	// READ-ONLY; The sku type.
	SKUType *SKUType `json:"skuType,omitempty" azure:"ro"`
}

// MarshalJSON implements the json.Marshaller interface for type VendorNetworkFunctionPropertiesFormat.
func (v VendorNetworkFunctionPropertiesFormat) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "networkFunctionVendorConfigurations", v.NetworkFunctionVendorConfigurations)
	populate(objectMap, "provisioningState", v.ProvisioningState)
	populate(objectMap, "skuName", v.SKUName)
	populate(objectMap, "skuType", v.SKUType)
	populate(objectMap, "vendorProvisioningState", v.VendorProvisioningState)
	return json.Marshal(objectMap)
}

// VendorNetworkFunctionsBeginCreateOrUpdateOptions contains the optional parameters for the VendorNetworkFunctions.BeginCreateOrUpdate method.
type VendorNetworkFunctionsBeginCreateOrUpdateOptions struct {
	// placeholder for future optional parameters
}

// VendorNetworkFunctionsGetOptions contains the optional parameters for the VendorNetworkFunctions.Get method.
type VendorNetworkFunctionsGetOptions struct {
	// placeholder for future optional parameters
}

// VendorNetworkFunctionsListOptions contains the optional parameters for the VendorNetworkFunctions.List method.
type VendorNetworkFunctionsListOptions struct {
	// The filter to apply on the operation. The properties you can use for eq (equals) are: skuType, skuName and vendorProvisioningState.
	Filter *string
}

// VendorPropertiesFormat - Vendor properties.
type VendorPropertiesFormat struct {
	// READ-ONLY; The provisioning state of the vendor resource.
	ProvisioningState *ProvisioningState `json:"provisioningState,omitempty" azure:"ro"`

	// READ-ONLY; A list of IDs of the vendor skus offered by the vendor.
	SKUs []*SubResource `json:"skus,omitempty" azure:"ro"`
}

// MarshalJSON implements the json.Marshaller interface for type VendorPropertiesFormat.
func (v VendorPropertiesFormat) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "provisioningState", v.ProvisioningState)
	populate(objectMap, "skus", v.SKUs)
	return json.Marshal(objectMap)
}

// VendorSKU - Sku sub resource.
type VendorSKU struct {
	ProxyResource
	// Vendor sku details.
	Properties *VendorSKUPropertiesFormat `json:"properties,omitempty"`

	// READ-ONLY; The system meta data relating to this resource.
	SystemData *SystemData `json:"systemData,omitempty" azure:"ro"`
}

// MarshalJSON implements the json.Marshaller interface for type VendorSKU.
func (v VendorSKU) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	v.ProxyResource.marshalInternal(objectMap)
	populate(objectMap, "properties", v.Properties)
	populate(objectMap, "systemData", v.SystemData)
	return json.Marshal(objectMap)
}

// UnmarshalJSON implements the json.Unmarshaller interface for type VendorSKU.
func (v *VendorSKU) UnmarshalJSON(data []byte) error {
	var rawMsg map[string]json.RawMessage
	if err := json.Unmarshal(data, &rawMsg); err != nil {
		return err
	}
	for key, val := range rawMsg {
		var err error
		switch key {
		case "properties":
			err = unpopulate(val, &v.Properties)
			delete(rawMsg, key)
		case "systemData":
			err = unpopulate(val, &v.SystemData)
			delete(rawMsg, key)
		}
		if err != nil {
			return err
		}
	}
	if err := v.ProxyResource.unmarshalInternal(rawMsg); err != nil {
		return err
	}
	return nil
}

// VendorSKUListResult - Response for list vendor sku API service call.
type VendorSKUListResult struct {
	// A list of vendor skus offered by the vendor.
	Value []*VendorSKU `json:"value,omitempty"`

	// READ-ONLY; The URI to get the next set of results.
	NextLink *string `json:"nextLink,omitempty" azure:"ro"`
}

// MarshalJSON implements the json.Marshaller interface for type VendorSKUListResult.
func (v VendorSKUListResult) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "nextLink", v.NextLink)
	populate(objectMap, "value", v.Value)
	return json.Marshal(objectMap)
}

// VendorSKUPreviewBeginCreateOrUpdateOptions contains the optional parameters for the VendorSKUPreview.BeginCreateOrUpdate method.
type VendorSKUPreviewBeginCreateOrUpdateOptions struct {
	// placeholder for future optional parameters
}

// VendorSKUPreviewBeginDeleteOptions contains the optional parameters for the VendorSKUPreview.BeginDelete method.
type VendorSKUPreviewBeginDeleteOptions struct {
	// placeholder for future optional parameters
}

// VendorSKUPreviewGetOptions contains the optional parameters for the VendorSKUPreview.Get method.
type VendorSKUPreviewGetOptions struct {
	// placeholder for future optional parameters
}

// VendorSKUPreviewListOptions contains the optional parameters for the VendorSKUPreview.List method.
type VendorSKUPreviewListOptions struct {
	// placeholder for future optional parameters
}

// VendorSKUPropertiesFormat - Sku properties
type VendorSKUPropertiesFormat struct {
	// The sku deployment mode.
	DeploymentMode *SKUDeploymentMode `json:"deploymentMode,omitempty"`

	// The parameters for the managed application to be supplied by the vendor.
	ManagedApplicationParameters map[string]interface{} `json:"managedApplicationParameters,omitempty"`

	// The template for the managed application deployment.
	ManagedApplicationTemplate map[string]interface{} `json:"managedApplicationTemplate,omitempty"`

	// The template definition of the network function.
	NetworkFunctionTemplate *NetworkFunctionTemplate `json:"networkFunctionTemplate,omitempty"`

	// The network function type.
	NetworkFunctionType *NetworkFunctionType `json:"networkFunctionType,omitempty"`

	// Indicates if the vendor sku is in preview mode.
	Preview *bool `json:"preview,omitempty"`

	// The sku type.
	SKUType *SKUType `json:"skuType,omitempty"`

	// READ-ONLY; The provisioning state of the vendor sku sub resource.
	ProvisioningState *ProvisioningState `json:"provisioningState,omitempty" azure:"ro"`
}

// VendorSKUsBeginCreateOrUpdateOptions contains the optional parameters for the VendorSKUs.BeginCreateOrUpdate method.
type VendorSKUsBeginCreateOrUpdateOptions struct {
	// placeholder for future optional parameters
}

// VendorSKUsBeginDeleteOptions contains the optional parameters for the VendorSKUs.BeginDelete method.
type VendorSKUsBeginDeleteOptions struct {
	// placeholder for future optional parameters
}

// VendorSKUsGetOptions contains the optional parameters for the VendorSKUs.Get method.
type VendorSKUsGetOptions struct {
	// placeholder for future optional parameters
}

// VendorSKUsListOptions contains the optional parameters for the VendorSKUs.List method.
type VendorSKUsListOptions struct {
	// placeholder for future optional parameters
}

// VendorsBeginCreateOrUpdateOptions contains the optional parameters for the Vendors.BeginCreateOrUpdate method.
type VendorsBeginCreateOrUpdateOptions struct {
	// Parameters supplied to the create vendor operation.
	Parameters *Vendor
}

// VendorsBeginDeleteOptions contains the optional parameters for the Vendors.BeginDelete method.
type VendorsBeginDeleteOptions struct {
	// placeholder for future optional parameters
}

// VendorsGetOptions contains the optional parameters for the Vendors.Get method.
type VendorsGetOptions struct {
	// placeholder for future optional parameters
}

// VendorsListBySubscriptionOptions contains the optional parameters for the Vendors.ListBySubscription method.
type VendorsListBySubscriptionOptions struct {
	// placeholder for future optional parameters
}

// VirtualHardDisk - Describes the uri of a disk.
type VirtualHardDisk struct {
	// Specifies the virtual hard disk's uri.
	URI *string `json:"uri,omitempty"`
}

func populate(m map[string]interface{}, k string, v interface{}) {
	if v == nil {
		return
	} else if azcore.IsNullValue(v) {
		m[k] = nil
	} else if !reflect.ValueOf(v).IsNil() {
		m[k] = v
	}
}

func unpopulate(data json.RawMessage, v interface{}) error {
	if data == nil {
		return nil
	}
	return json.Unmarshal(data, v)
}
