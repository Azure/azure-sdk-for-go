//go:build go1.16
// +build go1.16

// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

package armhybridnetwork

import (
	"context"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/policy"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/runtime"
	"net/http"
	"reflect"
)

// DevicesListByResourceGroupPager provides operations for iterating over paged responses.
type DevicesListByResourceGroupPager struct {
	client    *DevicesClient
	current   DevicesListByResourceGroupResponse
	err       error
	requester func(context.Context) (*policy.Request, error)
	advancer  func(context.Context, DevicesListByResourceGroupResponse) (*policy.Request, error)
}

// Err returns the last error encountered while paging.
func (p *DevicesListByResourceGroupPager) Err() error {
	return p.err
}

// NextPage returns true if the pager advanced to the next page.
// Returns false if there are no more pages or an error occurred.
func (p *DevicesListByResourceGroupPager) NextPage(ctx context.Context) bool {
	var req *policy.Request
	var err error
	if !reflect.ValueOf(p.current).IsZero() {
		if p.current.DeviceListResult.NextLink == nil || len(*p.current.DeviceListResult.NextLink) == 0 {
			return false
		}
		req, err = p.advancer(ctx, p.current)
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		p.err = err
		return false
	}
	resp, err := p.client.pl.Do(req)
	if err != nil {
		p.err = err
		return false
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {
		p.err = p.client.listByResourceGroupHandleError(resp)
		return false
	}
	result, err := p.client.listByResourceGroupHandleResponse(resp)
	if err != nil {
		p.err = err
		return false
	}
	p.current = result
	return true
}

// PageResponse returns the current DevicesListByResourceGroupResponse page.
func (p *DevicesListByResourceGroupPager) PageResponse() DevicesListByResourceGroupResponse {
	return p.current
}

// DevicesListBySubscriptionPager provides operations for iterating over paged responses.
type DevicesListBySubscriptionPager struct {
	client    *DevicesClient
	current   DevicesListBySubscriptionResponse
	err       error
	requester func(context.Context) (*policy.Request, error)
	advancer  func(context.Context, DevicesListBySubscriptionResponse) (*policy.Request, error)
}

// Err returns the last error encountered while paging.
func (p *DevicesListBySubscriptionPager) Err() error {
	return p.err
}

// NextPage returns true if the pager advanced to the next page.
// Returns false if there are no more pages or an error occurred.
func (p *DevicesListBySubscriptionPager) NextPage(ctx context.Context) bool {
	var req *policy.Request
	var err error
	if !reflect.ValueOf(p.current).IsZero() {
		if p.current.DeviceListResult.NextLink == nil || len(*p.current.DeviceListResult.NextLink) == 0 {
			return false
		}
		req, err = p.advancer(ctx, p.current)
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		p.err = err
		return false
	}
	resp, err := p.client.pl.Do(req)
	if err != nil {
		p.err = err
		return false
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {
		p.err = p.client.listBySubscriptionHandleError(resp)
		return false
	}
	result, err := p.client.listBySubscriptionHandleResponse(resp)
	if err != nil {
		p.err = err
		return false
	}
	p.current = result
	return true
}

// PageResponse returns the current DevicesListBySubscriptionResponse page.
func (p *DevicesListBySubscriptionPager) PageResponse() DevicesListBySubscriptionResponse {
	return p.current
}

// NetworkFunctionVendorSKUsListBySKUPager provides operations for iterating over paged responses.
type NetworkFunctionVendorSKUsListBySKUPager struct {
	client    *NetworkFunctionVendorSKUsClient
	current   NetworkFunctionVendorSKUsListBySKUResponse
	err       error
	requester func(context.Context) (*policy.Request, error)
	advancer  func(context.Context, NetworkFunctionVendorSKUsListBySKUResponse) (*policy.Request, error)
}

// Err returns the last error encountered while paging.
func (p *NetworkFunctionVendorSKUsListBySKUPager) Err() error {
	return p.err
}

// NextPage returns true if the pager advanced to the next page.
// Returns false if there are no more pages or an error occurred.
func (p *NetworkFunctionVendorSKUsListBySKUPager) NextPage(ctx context.Context) bool {
	var req *policy.Request
	var err error
	if !reflect.ValueOf(p.current).IsZero() {
		if p.current.NetworkFunctionSKUDetails.NextLink == nil || len(*p.current.NetworkFunctionSKUDetails.NextLink) == 0 {
			return false
		}
		req, err = p.advancer(ctx, p.current)
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		p.err = err
		return false
	}
	resp, err := p.client.pl.Do(req)
	if err != nil {
		p.err = err
		return false
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {
		p.err = p.client.listBySKUHandleError(resp)
		return false
	}
	result, err := p.client.listBySKUHandleResponse(resp)
	if err != nil {
		p.err = err
		return false
	}
	p.current = result
	return true
}

// PageResponse returns the current NetworkFunctionVendorSKUsListBySKUResponse page.
func (p *NetworkFunctionVendorSKUsListBySKUPager) PageResponse() NetworkFunctionVendorSKUsListBySKUResponse {
	return p.current
}

// NetworkFunctionVendorSKUsListByVendorPager provides operations for iterating over paged responses.
type NetworkFunctionVendorSKUsListByVendorPager struct {
	client    *NetworkFunctionVendorSKUsClient
	current   NetworkFunctionVendorSKUsListByVendorResponse
	err       error
	requester func(context.Context) (*policy.Request, error)
	advancer  func(context.Context, NetworkFunctionVendorSKUsListByVendorResponse) (*policy.Request, error)
}

// Err returns the last error encountered while paging.
func (p *NetworkFunctionVendorSKUsListByVendorPager) Err() error {
	return p.err
}

// NextPage returns true if the pager advanced to the next page.
// Returns false if there are no more pages or an error occurred.
func (p *NetworkFunctionVendorSKUsListByVendorPager) NextPage(ctx context.Context) bool {
	var req *policy.Request
	var err error
	if !reflect.ValueOf(p.current).IsZero() {
		if p.current.NetworkFunctionSKUListResult.NextLink == nil || len(*p.current.NetworkFunctionSKUListResult.NextLink) == 0 {
			return false
		}
		req, err = p.advancer(ctx, p.current)
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		p.err = err
		return false
	}
	resp, err := p.client.pl.Do(req)
	if err != nil {
		p.err = err
		return false
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {
		p.err = p.client.listByVendorHandleError(resp)
		return false
	}
	result, err := p.client.listByVendorHandleResponse(resp)
	if err != nil {
		p.err = err
		return false
	}
	p.current = result
	return true
}

// PageResponse returns the current NetworkFunctionVendorSKUsListByVendorResponse page.
func (p *NetworkFunctionVendorSKUsListByVendorPager) PageResponse() NetworkFunctionVendorSKUsListByVendorResponse {
	return p.current
}

// NetworkFunctionVendorsListPager provides operations for iterating over paged responses.
type NetworkFunctionVendorsListPager struct {
	client    *NetworkFunctionVendorsClient
	current   NetworkFunctionVendorsListResponse
	err       error
	requester func(context.Context) (*policy.Request, error)
	advancer  func(context.Context, NetworkFunctionVendorsListResponse) (*policy.Request, error)
}

// Err returns the last error encountered while paging.
func (p *NetworkFunctionVendorsListPager) Err() error {
	return p.err
}

// NextPage returns true if the pager advanced to the next page.
// Returns false if there are no more pages or an error occurred.
func (p *NetworkFunctionVendorsListPager) NextPage(ctx context.Context) bool {
	var req *policy.Request
	var err error
	if !reflect.ValueOf(p.current).IsZero() {
		if p.current.NetworkFunctionVendorListResult.NextLink == nil || len(*p.current.NetworkFunctionVendorListResult.NextLink) == 0 {
			return false
		}
		req, err = p.advancer(ctx, p.current)
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		p.err = err
		return false
	}
	resp, err := p.client.pl.Do(req)
	if err != nil {
		p.err = err
		return false
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {
		p.err = p.client.listHandleError(resp)
		return false
	}
	result, err := p.client.listHandleResponse(resp)
	if err != nil {
		p.err = err
		return false
	}
	p.current = result
	return true
}

// PageResponse returns the current NetworkFunctionVendorsListResponse page.
func (p *NetworkFunctionVendorsListPager) PageResponse() NetworkFunctionVendorsListResponse {
	return p.current
}

// NetworkFunctionsListByResourceGroupPager provides operations for iterating over paged responses.
type NetworkFunctionsListByResourceGroupPager struct {
	client    *NetworkFunctionsClient
	current   NetworkFunctionsListByResourceGroupResponse
	err       error
	requester func(context.Context) (*policy.Request, error)
	advancer  func(context.Context, NetworkFunctionsListByResourceGroupResponse) (*policy.Request, error)
}

// Err returns the last error encountered while paging.
func (p *NetworkFunctionsListByResourceGroupPager) Err() error {
	return p.err
}

// NextPage returns true if the pager advanced to the next page.
// Returns false if there are no more pages or an error occurred.
func (p *NetworkFunctionsListByResourceGroupPager) NextPage(ctx context.Context) bool {
	var req *policy.Request
	var err error
	if !reflect.ValueOf(p.current).IsZero() {
		if p.current.NetworkFunctionListResult.NextLink == nil || len(*p.current.NetworkFunctionListResult.NextLink) == 0 {
			return false
		}
		req, err = p.advancer(ctx, p.current)
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		p.err = err
		return false
	}
	resp, err := p.client.pl.Do(req)
	if err != nil {
		p.err = err
		return false
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {
		p.err = p.client.listByResourceGroupHandleError(resp)
		return false
	}
	result, err := p.client.listByResourceGroupHandleResponse(resp)
	if err != nil {
		p.err = err
		return false
	}
	p.current = result
	return true
}

// PageResponse returns the current NetworkFunctionsListByResourceGroupResponse page.
func (p *NetworkFunctionsListByResourceGroupPager) PageResponse() NetworkFunctionsListByResourceGroupResponse {
	return p.current
}

// NetworkFunctionsListBySubscriptionPager provides operations for iterating over paged responses.
type NetworkFunctionsListBySubscriptionPager struct {
	client    *NetworkFunctionsClient
	current   NetworkFunctionsListBySubscriptionResponse
	err       error
	requester func(context.Context) (*policy.Request, error)
	advancer  func(context.Context, NetworkFunctionsListBySubscriptionResponse) (*policy.Request, error)
}

// Err returns the last error encountered while paging.
func (p *NetworkFunctionsListBySubscriptionPager) Err() error {
	return p.err
}

// NextPage returns true if the pager advanced to the next page.
// Returns false if there are no more pages or an error occurred.
func (p *NetworkFunctionsListBySubscriptionPager) NextPage(ctx context.Context) bool {
	var req *policy.Request
	var err error
	if !reflect.ValueOf(p.current).IsZero() {
		if p.current.NetworkFunctionListResult.NextLink == nil || len(*p.current.NetworkFunctionListResult.NextLink) == 0 {
			return false
		}
		req, err = p.advancer(ctx, p.current)
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		p.err = err
		return false
	}
	resp, err := p.client.pl.Do(req)
	if err != nil {
		p.err = err
		return false
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {
		p.err = p.client.listBySubscriptionHandleError(resp)
		return false
	}
	result, err := p.client.listBySubscriptionHandleResponse(resp)
	if err != nil {
		p.err = err
		return false
	}
	p.current = result
	return true
}

// PageResponse returns the current NetworkFunctionsListBySubscriptionResponse page.
func (p *NetworkFunctionsListBySubscriptionPager) PageResponse() NetworkFunctionsListBySubscriptionResponse {
	return p.current
}

// OperationsListPager provides operations for iterating over paged responses.
type OperationsListPager struct {
	client    *OperationsClient
	current   OperationsListResponse
	err       error
	requester func(context.Context) (*policy.Request, error)
	advancer  func(context.Context, OperationsListResponse) (*policy.Request, error)
}

// Err returns the last error encountered while paging.
func (p *OperationsListPager) Err() error {
	return p.err
}

// NextPage returns true if the pager advanced to the next page.
// Returns false if there are no more pages or an error occurred.
func (p *OperationsListPager) NextPage(ctx context.Context) bool {
	var req *policy.Request
	var err error
	if !reflect.ValueOf(p.current).IsZero() {
		if p.current.OperationList.NextLink == nil || len(*p.current.OperationList.NextLink) == 0 {
			return false
		}
		req, err = p.advancer(ctx, p.current)
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		p.err = err
		return false
	}
	resp, err := p.client.pl.Do(req)
	if err != nil {
		p.err = err
		return false
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {
		p.err = p.client.listHandleError(resp)
		return false
	}
	result, err := p.client.listHandleResponse(resp)
	if err != nil {
		p.err = err
		return false
	}
	p.current = result
	return true
}

// PageResponse returns the current OperationsListResponse page.
func (p *OperationsListPager) PageResponse() OperationsListResponse {
	return p.current
}

// RoleInstancesListPager provides operations for iterating over paged responses.
type RoleInstancesListPager struct {
	client    *RoleInstancesClient
	current   RoleInstancesListResponse
	err       error
	requester func(context.Context) (*policy.Request, error)
	advancer  func(context.Context, RoleInstancesListResponse) (*policy.Request, error)
}

// Err returns the last error encountered while paging.
func (p *RoleInstancesListPager) Err() error {
	return p.err
}

// NextPage returns true if the pager advanced to the next page.
// Returns false if there are no more pages or an error occurred.
func (p *RoleInstancesListPager) NextPage(ctx context.Context) bool {
	var req *policy.Request
	var err error
	if !reflect.ValueOf(p.current).IsZero() {
		if p.current.NetworkFunctionRoleInstanceListResult.NextLink == nil || len(*p.current.NetworkFunctionRoleInstanceListResult.NextLink) == 0 {
			return false
		}
		req, err = p.advancer(ctx, p.current)
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		p.err = err
		return false
	}
	resp, err := p.client.pl.Do(req)
	if err != nil {
		p.err = err
		return false
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {
		p.err = p.client.listHandleError(resp)
		return false
	}
	result, err := p.client.listHandleResponse(resp)
	if err != nil {
		p.err = err
		return false
	}
	p.current = result
	return true
}

// PageResponse returns the current RoleInstancesListResponse page.
func (p *RoleInstancesListPager) PageResponse() RoleInstancesListResponse {
	return p.current
}

// VendorNetworkFunctionsListPager provides operations for iterating over paged responses.
type VendorNetworkFunctionsListPager struct {
	client    *VendorNetworkFunctionsClient
	current   VendorNetworkFunctionsListResponse
	err       error
	requester func(context.Context) (*policy.Request, error)
	advancer  func(context.Context, VendorNetworkFunctionsListResponse) (*policy.Request, error)
}

// Err returns the last error encountered while paging.
func (p *VendorNetworkFunctionsListPager) Err() error {
	return p.err
}

// NextPage returns true if the pager advanced to the next page.
// Returns false if there are no more pages or an error occurred.
func (p *VendorNetworkFunctionsListPager) NextPage(ctx context.Context) bool {
	var req *policy.Request
	var err error
	if !reflect.ValueOf(p.current).IsZero() {
		if p.current.VendorNetworkFunctionListResult.NextLink == nil || len(*p.current.VendorNetworkFunctionListResult.NextLink) == 0 {
			return false
		}
		req, err = p.advancer(ctx, p.current)
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		p.err = err
		return false
	}
	resp, err := p.client.pl.Do(req)
	if err != nil {
		p.err = err
		return false
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {
		p.err = p.client.listHandleError(resp)
		return false
	}
	result, err := p.client.listHandleResponse(resp)
	if err != nil {
		p.err = err
		return false
	}
	p.current = result
	return true
}

// PageResponse returns the current VendorNetworkFunctionsListResponse page.
func (p *VendorNetworkFunctionsListPager) PageResponse() VendorNetworkFunctionsListResponse {
	return p.current
}

// VendorSKUPreviewListPager provides operations for iterating over paged responses.
type VendorSKUPreviewListPager struct {
	client    *VendorSKUPreviewClient
	current   VendorSKUPreviewListResponse
	err       error
	requester func(context.Context) (*policy.Request, error)
	advancer  func(context.Context, VendorSKUPreviewListResponse) (*policy.Request, error)
}

// Err returns the last error encountered while paging.
func (p *VendorSKUPreviewListPager) Err() error {
	return p.err
}

// NextPage returns true if the pager advanced to the next page.
// Returns false if there are no more pages or an error occurred.
func (p *VendorSKUPreviewListPager) NextPage(ctx context.Context) bool {
	var req *policy.Request
	var err error
	if !reflect.ValueOf(p.current).IsZero() {
		if p.current.PreviewSubscriptionsList.NextLink == nil || len(*p.current.PreviewSubscriptionsList.NextLink) == 0 {
			return false
		}
		req, err = p.advancer(ctx, p.current)
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		p.err = err
		return false
	}
	resp, err := p.client.pl.Do(req)
	if err != nil {
		p.err = err
		return false
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {
		p.err = p.client.listHandleError(resp)
		return false
	}
	result, err := p.client.listHandleResponse(resp)
	if err != nil {
		p.err = err
		return false
	}
	p.current = result
	return true
}

// PageResponse returns the current VendorSKUPreviewListResponse page.
func (p *VendorSKUPreviewListPager) PageResponse() VendorSKUPreviewListResponse {
	return p.current
}

// VendorSKUsListPager provides operations for iterating over paged responses.
type VendorSKUsListPager struct {
	client    *VendorSKUsClient
	current   VendorSKUsListResponse
	err       error
	requester func(context.Context) (*policy.Request, error)
	advancer  func(context.Context, VendorSKUsListResponse) (*policy.Request, error)
}

// Err returns the last error encountered while paging.
func (p *VendorSKUsListPager) Err() error {
	return p.err
}

// NextPage returns true if the pager advanced to the next page.
// Returns false if there are no more pages or an error occurred.
func (p *VendorSKUsListPager) NextPage(ctx context.Context) bool {
	var req *policy.Request
	var err error
	if !reflect.ValueOf(p.current).IsZero() {
		if p.current.VendorSKUListResult.NextLink == nil || len(*p.current.VendorSKUListResult.NextLink) == 0 {
			return false
		}
		req, err = p.advancer(ctx, p.current)
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		p.err = err
		return false
	}
	resp, err := p.client.pl.Do(req)
	if err != nil {
		p.err = err
		return false
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {
		p.err = p.client.listHandleError(resp)
		return false
	}
	result, err := p.client.listHandleResponse(resp)
	if err != nil {
		p.err = err
		return false
	}
	p.current = result
	return true
}

// PageResponse returns the current VendorSKUsListResponse page.
func (p *VendorSKUsListPager) PageResponse() VendorSKUsListResponse {
	return p.current
}

// VendorsListBySubscriptionPager provides operations for iterating over paged responses.
type VendorsListBySubscriptionPager struct {
	client    *VendorsClient
	current   VendorsListBySubscriptionResponse
	err       error
	requester func(context.Context) (*policy.Request, error)
	advancer  func(context.Context, VendorsListBySubscriptionResponse) (*policy.Request, error)
}

// Err returns the last error encountered while paging.
func (p *VendorsListBySubscriptionPager) Err() error {
	return p.err
}

// NextPage returns true if the pager advanced to the next page.
// Returns false if there are no more pages or an error occurred.
func (p *VendorsListBySubscriptionPager) NextPage(ctx context.Context) bool {
	var req *policy.Request
	var err error
	if !reflect.ValueOf(p.current).IsZero() {
		if p.current.VendorListResult.NextLink == nil || len(*p.current.VendorListResult.NextLink) == 0 {
			return false
		}
		req, err = p.advancer(ctx, p.current)
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		p.err = err
		return false
	}
	resp, err := p.client.pl.Do(req)
	if err != nil {
		p.err = err
		return false
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {
		p.err = p.client.listBySubscriptionHandleError(resp)
		return false
	}
	result, err := p.client.listBySubscriptionHandleResponse(resp)
	if err != nil {
		p.err = err
		return false
	}
	p.current = result
	return true
}

// PageResponse returns the current VendorsListBySubscriptionResponse page.
func (p *VendorsListBySubscriptionPager) PageResponse() VendorsListBySubscriptionResponse {
	return p.current
}
