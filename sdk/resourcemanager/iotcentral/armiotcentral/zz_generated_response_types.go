//go:build go1.16
// +build go1.16

// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

package armiotcentral

import (
	"context"
	armruntime "github.com/Azure/azure-sdk-for-go/sdk/azcore/arm/runtime"
	"net/http"
	"time"
)

// AppsCheckNameAvailabilityResponse contains the response from method Apps.CheckNameAvailability.
type AppsCheckNameAvailabilityResponse struct {
	AppsCheckNameAvailabilityResult
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// AppsCheckNameAvailabilityResult contains the result from method Apps.CheckNameAvailability.
type AppsCheckNameAvailabilityResult struct {
	AppAvailabilityInfo
}

// AppsCheckSubdomainAvailabilityResponse contains the response from method Apps.CheckSubdomainAvailability.
type AppsCheckSubdomainAvailabilityResponse struct {
	AppsCheckSubdomainAvailabilityResult
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// AppsCheckSubdomainAvailabilityResult contains the result from method Apps.CheckSubdomainAvailability.
type AppsCheckSubdomainAvailabilityResult struct {
	AppAvailabilityInfo
}

// AppsCreateOrUpdatePollerResponse contains the response from method Apps.CreateOrUpdate.
type AppsCreateOrUpdatePollerResponse struct {
	// Poller contains an initialized poller.
	Poller *AppsCreateOrUpdatePoller

	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// PollUntilDone will poll the service endpoint until a terminal state is reached or an error is received.
// freq: the time to wait between intervals in absence of a Retry-After header. Allowed minimum is one second.
// A good starting value is 30 seconds. Note that some resources might benefit from a different value.
func (l AppsCreateOrUpdatePollerResponse) PollUntilDone(ctx context.Context, freq time.Duration) (AppsCreateOrUpdateResponse, error) {
	respType := AppsCreateOrUpdateResponse{}
	resp, err := l.Poller.pt.PollUntilDone(ctx, freq, &respType.App)
	if err != nil {
		return respType, err
	}
	respType.RawResponse = resp
	return respType, nil
}

// Resume rehydrates a AppsCreateOrUpdatePollerResponse from the provided client and resume token.
func (l *AppsCreateOrUpdatePollerResponse) Resume(ctx context.Context, client *AppsClient, token string) error {
	pt, err := armruntime.NewPollerFromResumeToken("AppsClient.CreateOrUpdate", token, client.pl, client.createOrUpdateHandleError)
	if err != nil {
		return err
	}
	poller := &AppsCreateOrUpdatePoller{
		pt: pt,
	}
	resp, err := poller.Poll(ctx)
	if err != nil {
		return err
	}
	l.Poller = poller
	l.RawResponse = resp
	return nil
}

// AppsCreateOrUpdateResponse contains the response from method Apps.CreateOrUpdate.
type AppsCreateOrUpdateResponse struct {
	AppsCreateOrUpdateResult
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// AppsCreateOrUpdateResult contains the result from method Apps.CreateOrUpdate.
type AppsCreateOrUpdateResult struct {
	App
}

// AppsDeletePollerResponse contains the response from method Apps.Delete.
type AppsDeletePollerResponse struct {
	// Poller contains an initialized poller.
	Poller *AppsDeletePoller

	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// PollUntilDone will poll the service endpoint until a terminal state is reached or an error is received.
// freq: the time to wait between intervals in absence of a Retry-After header. Allowed minimum is one second.
// A good starting value is 30 seconds. Note that some resources might benefit from a different value.
func (l AppsDeletePollerResponse) PollUntilDone(ctx context.Context, freq time.Duration) (AppsDeleteResponse, error) {
	respType := AppsDeleteResponse{}
	resp, err := l.Poller.pt.PollUntilDone(ctx, freq, nil)
	if err != nil {
		return respType, err
	}
	respType.RawResponse = resp
	return respType, nil
}

// Resume rehydrates a AppsDeletePollerResponse from the provided client and resume token.
func (l *AppsDeletePollerResponse) Resume(ctx context.Context, client *AppsClient, token string) error {
	pt, err := armruntime.NewPollerFromResumeToken("AppsClient.Delete", token, client.pl, client.deleteHandleError)
	if err != nil {
		return err
	}
	poller := &AppsDeletePoller{
		pt: pt,
	}
	resp, err := poller.Poll(ctx)
	if err != nil {
		return err
	}
	l.Poller = poller
	l.RawResponse = resp
	return nil
}

// AppsDeleteResponse contains the response from method Apps.Delete.
type AppsDeleteResponse struct {
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// AppsGetResponse contains the response from method Apps.Get.
type AppsGetResponse struct {
	AppsGetResult
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// AppsGetResult contains the result from method Apps.Get.
type AppsGetResult struct {
	App
}

// AppsListByResourceGroupResponse contains the response from method Apps.ListByResourceGroup.
type AppsListByResourceGroupResponse struct {
	AppsListByResourceGroupResult
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// AppsListByResourceGroupResult contains the result from method Apps.ListByResourceGroup.
type AppsListByResourceGroupResult struct {
	AppListResult
}

// AppsListBySubscriptionResponse contains the response from method Apps.ListBySubscription.
type AppsListBySubscriptionResponse struct {
	AppsListBySubscriptionResult
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// AppsListBySubscriptionResult contains the result from method Apps.ListBySubscription.
type AppsListBySubscriptionResult struct {
	AppListResult
}

// AppsListTemplatesResponse contains the response from method Apps.ListTemplates.
type AppsListTemplatesResponse struct {
	AppsListTemplatesResult
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// AppsListTemplatesResult contains the result from method Apps.ListTemplates.
type AppsListTemplatesResult struct {
	AppTemplatesResult
}

// AppsUpdatePollerResponse contains the response from method Apps.Update.
type AppsUpdatePollerResponse struct {
	// Poller contains an initialized poller.
	Poller *AppsUpdatePoller

	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// PollUntilDone will poll the service endpoint until a terminal state is reached or an error is received.
// freq: the time to wait between intervals in absence of a Retry-After header. Allowed minimum is one second.
// A good starting value is 30 seconds. Note that some resources might benefit from a different value.
func (l AppsUpdatePollerResponse) PollUntilDone(ctx context.Context, freq time.Duration) (AppsUpdateResponse, error) {
	respType := AppsUpdateResponse{}
	resp, err := l.Poller.pt.PollUntilDone(ctx, freq, &respType.App)
	if err != nil {
		return respType, err
	}
	respType.RawResponse = resp
	return respType, nil
}

// Resume rehydrates a AppsUpdatePollerResponse from the provided client and resume token.
func (l *AppsUpdatePollerResponse) Resume(ctx context.Context, client *AppsClient, token string) error {
	pt, err := armruntime.NewPollerFromResumeToken("AppsClient.Update", token, client.pl, client.updateHandleError)
	if err != nil {
		return err
	}
	poller := &AppsUpdatePoller{
		pt: pt,
	}
	resp, err := poller.Poll(ctx)
	if err != nil {
		return err
	}
	l.Poller = poller
	l.RawResponse = resp
	return nil
}

// AppsUpdateResponse contains the response from method Apps.Update.
type AppsUpdateResponse struct {
	AppsUpdateResult
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// AppsUpdateResult contains the result from method Apps.Update.
type AppsUpdateResult struct {
	App
}

// OperationsListResponse contains the response from method Operations.List.
type OperationsListResponse struct {
	OperationsListResult
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// OperationsListResult contains the result from method Operations.List.
type OperationsListResult struct {
	OperationListResult
}
