//go:build go1.16
// +build go1.16

// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

package armiothub

import (
	"context"
	"errors"
	"fmt"
	"net/http"
	"net/url"
	"strings"

	"github.com/Azure/azure-sdk-for-go/sdk/azcore/arm"
	armruntime "github.com/Azure/azure-sdk-for-go/sdk/azcore/arm/runtime"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/policy"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/runtime"
)

// IotHubResourceClient contains the methods for the IotHubResource group.
// Don't use this type directly, use NewIotHubResourceClient() instead.
type IotHubResourceClient struct {
	ep             string
	pl             runtime.Pipeline
	subscriptionID string
}

// NewIotHubResourceClient creates a new instance of IotHubResourceClient with the specified values.
func NewIotHubResourceClient(con *arm.Connection, subscriptionID string) *IotHubResourceClient {
	return &IotHubResourceClient{ep: con.Endpoint(), pl: con.NewPipeline(module, version), subscriptionID: subscriptionID}
}

// CheckNameAvailability - Check if an IoT hub name is available.
// If the operation fails it returns the *ErrorDetails error type.
func (client *IotHubResourceClient) CheckNameAvailability(ctx context.Context, operationInputs OperationInputs, options *IotHubResourceCheckNameAvailabilityOptions) (IotHubResourceCheckNameAvailabilityResponse, error) {
	req, err := client.checkNameAvailabilityCreateRequest(ctx, operationInputs, options)
	if err != nil {
		return IotHubResourceCheckNameAvailabilityResponse{}, err
	}
	resp, err := client.pl.Do(req)
	if err != nil {
		return IotHubResourceCheckNameAvailabilityResponse{}, err
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {
		return IotHubResourceCheckNameAvailabilityResponse{}, client.checkNameAvailabilityHandleError(resp)
	}
	return client.checkNameAvailabilityHandleResponse(resp)
}

// checkNameAvailabilityCreateRequest creates the CheckNameAvailability request.
func (client *IotHubResourceClient) checkNameAvailabilityCreateRequest(ctx context.Context, operationInputs OperationInputs, options *IotHubResourceCheckNameAvailabilityOptions) (*policy.Request, error) {
	urlPath := "/subscriptions/{subscriptionId}/providers/Microsoft.Devices/checkNameAvailability"
	if client.subscriptionID == "" {
		return nil, errors.New("parameter client.subscriptionID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{subscriptionId}", url.PathEscape(client.subscriptionID))
	req, err := runtime.NewRequest(ctx, http.MethodPost, runtime.JoinPaths(client.ep, urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("api-version", "2021-07-01")
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header.Set("Accept", "application/json")
	return req, runtime.MarshalAsJSON(req, operationInputs)
}

// checkNameAvailabilityHandleResponse handles the CheckNameAvailability response.
func (client *IotHubResourceClient) checkNameAvailabilityHandleResponse(resp *http.Response) (IotHubResourceCheckNameAvailabilityResponse, error) {
	result := IotHubResourceCheckNameAvailabilityResponse{RawResponse: resp}
	if err := runtime.UnmarshalAsJSON(resp, &result.IotHubNameAvailabilityInfo); err != nil {
		return IotHubResourceCheckNameAvailabilityResponse{}, err
	}
	return result, nil
}

// checkNameAvailabilityHandleError handles the CheckNameAvailability error response.
func (client *IotHubResourceClient) checkNameAvailabilityHandleError(resp *http.Response) error {
	body, err := runtime.Payload(resp)
	if err != nil {
		return runtime.NewResponseError(err, resp)
	}
	errType := ErrorDetails{raw: string(body)}
	if err := runtime.UnmarshalAsJSON(resp, &errType); err != nil {
		return runtime.NewResponseError(fmt.Errorf("%s\n%s", string(body), err), resp)
	}
	return runtime.NewResponseError(&errType, resp)
}

// CreateEventHubConsumerGroup - Add a consumer group to an Event Hub-compatible endpoint in an IoT hub.
// If the operation fails it returns the *ErrorDetails error type.
func (client *IotHubResourceClient) CreateEventHubConsumerGroup(ctx context.Context, resourceGroupName string, resourceName string, eventHubEndpointName string, name string, consumerGroupBody EventHubConsumerGroupBodyDescription, options *IotHubResourceCreateEventHubConsumerGroupOptions) (IotHubResourceCreateEventHubConsumerGroupResponse, error) {
	req, err := client.createEventHubConsumerGroupCreateRequest(ctx, resourceGroupName, resourceName, eventHubEndpointName, name, consumerGroupBody, options)
	if err != nil {
		return IotHubResourceCreateEventHubConsumerGroupResponse{}, err
	}
	resp, err := client.pl.Do(req)
	if err != nil {
		return IotHubResourceCreateEventHubConsumerGroupResponse{}, err
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {
		return IotHubResourceCreateEventHubConsumerGroupResponse{}, client.createEventHubConsumerGroupHandleError(resp)
	}
	return client.createEventHubConsumerGroupHandleResponse(resp)
}

// createEventHubConsumerGroupCreateRequest creates the CreateEventHubConsumerGroup request.
func (client *IotHubResourceClient) createEventHubConsumerGroupCreateRequest(ctx context.Context, resourceGroupName string, resourceName string, eventHubEndpointName string, name string, consumerGroupBody EventHubConsumerGroupBodyDescription, options *IotHubResourceCreateEventHubConsumerGroupOptions) (*policy.Request, error) {
	urlPath := "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Devices/IotHubs/{resourceName}/eventHubEndpoints/{eventHubEndpointName}/ConsumerGroups/{name}"
	if client.subscriptionID == "" {
		return nil, errors.New("parameter client.subscriptionID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{subscriptionId}", url.PathEscape(client.subscriptionID))
	if resourceGroupName == "" {
		return nil, errors.New("parameter resourceGroupName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{resourceGroupName}", url.PathEscape(resourceGroupName))
	if resourceName == "" {
		return nil, errors.New("parameter resourceName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{resourceName}", url.PathEscape(resourceName))
	if eventHubEndpointName == "" {
		return nil, errors.New("parameter eventHubEndpointName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{eventHubEndpointName}", url.PathEscape(eventHubEndpointName))
	if name == "" {
		return nil, errors.New("parameter name cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{name}", url.PathEscape(name))
	req, err := runtime.NewRequest(ctx, http.MethodPut, runtime.JoinPaths(client.ep, urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("api-version", "2021-07-01")
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header.Set("Accept", "application/json")
	return req, runtime.MarshalAsJSON(req, consumerGroupBody)
}

// createEventHubConsumerGroupHandleResponse handles the CreateEventHubConsumerGroup response.
func (client *IotHubResourceClient) createEventHubConsumerGroupHandleResponse(resp *http.Response) (IotHubResourceCreateEventHubConsumerGroupResponse, error) {
	result := IotHubResourceCreateEventHubConsumerGroupResponse{RawResponse: resp}
	if err := runtime.UnmarshalAsJSON(resp, &result.EventHubConsumerGroupInfo); err != nil {
		return IotHubResourceCreateEventHubConsumerGroupResponse{}, err
	}
	return result, nil
}

// createEventHubConsumerGroupHandleError handles the CreateEventHubConsumerGroup error response.
func (client *IotHubResourceClient) createEventHubConsumerGroupHandleError(resp *http.Response) error {
	body, err := runtime.Payload(resp)
	if err != nil {
		return runtime.NewResponseError(err, resp)
	}
	errType := ErrorDetails{raw: string(body)}
	if err := runtime.UnmarshalAsJSON(resp, &errType); err != nil {
		return runtime.NewResponseError(fmt.Errorf("%s\n%s", string(body), err), resp)
	}
	return runtime.NewResponseError(&errType, resp)
}

// BeginCreateOrUpdate - Create or update the metadata of an Iot hub. The usual pattern to modify a property is to retrieve the IoT hub metadata and security
// metadata, and then combine them with the modified values in a new
// body to update the IoT hub. If certain properties are missing in the JSON, updating IoT Hub may cause these values to fallback to default, which may
// lead to unexpected behavior.
// If the operation fails it returns the *ErrorDetails error type.
func (client *IotHubResourceClient) BeginCreateOrUpdate(ctx context.Context, resourceGroupName string, resourceName string, iotHubDescription IotHubDescription, options *IotHubResourceBeginCreateOrUpdateOptions) (IotHubResourceCreateOrUpdatePollerResponse, error) {
	resp, err := client.createOrUpdate(ctx, resourceGroupName, resourceName, iotHubDescription, options)
	if err != nil {
		return IotHubResourceCreateOrUpdatePollerResponse{}, err
	}
	result := IotHubResourceCreateOrUpdatePollerResponse{
		RawResponse: resp,
	}
	pt, err := armruntime.NewPoller("IotHubResourceClient.CreateOrUpdate", "", resp, client.pl, client.createOrUpdateHandleError)
	if err != nil {
		return IotHubResourceCreateOrUpdatePollerResponse{}, err
	}
	result.Poller = &IotHubResourceCreateOrUpdatePoller{
		pt: pt,
	}
	return result, nil
}

// CreateOrUpdate - Create or update the metadata of an Iot hub. The usual pattern to modify a property is to retrieve the IoT hub metadata and security
// metadata, and then combine them with the modified values in a new
// body to update the IoT hub. If certain properties are missing in the JSON, updating IoT Hub may cause these values to fallback to default, which may
// lead to unexpected behavior.
// If the operation fails it returns the *ErrorDetails error type.
func (client *IotHubResourceClient) createOrUpdate(ctx context.Context, resourceGroupName string, resourceName string, iotHubDescription IotHubDescription, options *IotHubResourceBeginCreateOrUpdateOptions) (*http.Response, error) {
	req, err := client.createOrUpdateCreateRequest(ctx, resourceGroupName, resourceName, iotHubDescription, options)
	if err != nil {
		return nil, err
	}
	resp, err := client.pl.Do(req)
	if err != nil {
		return nil, err
	}
	if !runtime.HasStatusCode(resp, http.StatusOK, http.StatusCreated) {
		return nil, client.createOrUpdateHandleError(resp)
	}
	return resp, nil
}

// createOrUpdateCreateRequest creates the CreateOrUpdate request.
func (client *IotHubResourceClient) createOrUpdateCreateRequest(ctx context.Context, resourceGroupName string, resourceName string, iotHubDescription IotHubDescription, options *IotHubResourceBeginCreateOrUpdateOptions) (*policy.Request, error) {
	urlPath := "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Devices/IotHubs/{resourceName}"
	if client.subscriptionID == "" {
		return nil, errors.New("parameter client.subscriptionID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{subscriptionId}", url.PathEscape(client.subscriptionID))
	if resourceGroupName == "" {
		return nil, errors.New("parameter resourceGroupName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{resourceGroupName}", url.PathEscape(resourceGroupName))
	if resourceName == "" {
		return nil, errors.New("parameter resourceName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{resourceName}", url.PathEscape(resourceName))
	req, err := runtime.NewRequest(ctx, http.MethodPut, runtime.JoinPaths(client.ep, urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("api-version", "2021-07-01")
	req.Raw().URL.RawQuery = reqQP.Encode()
	if options != nil && options.IfMatch != nil {
		req.Raw().Header.Set("If-Match", *options.IfMatch)
	}
	req.Raw().Header.Set("Accept", "application/json")
	return req, runtime.MarshalAsJSON(req, iotHubDescription)
}

// createOrUpdateHandleError handles the CreateOrUpdate error response.
func (client *IotHubResourceClient) createOrUpdateHandleError(resp *http.Response) error {
	body, err := runtime.Payload(resp)
	if err != nil {
		return runtime.NewResponseError(err, resp)
	}
	errType := ErrorDetails{raw: string(body)}
	if err := runtime.UnmarshalAsJSON(resp, &errType); err != nil {
		return runtime.NewResponseError(fmt.Errorf("%s\n%s", string(body), err), resp)
	}
	return runtime.NewResponseError(&errType, resp)
}

// BeginDelete - Delete an IoT hub.
// If the operation fails it returns the *ErrorDetails error type.
func (client *IotHubResourceClient) BeginDelete(ctx context.Context, resourceGroupName string, resourceName string, options *IotHubResourceBeginDeleteOptions) (IotHubResourceDeletePollerResponse, error) {
	resp, err := client.deleteOperation(ctx, resourceGroupName, resourceName, options)
	if err != nil {
		return IotHubResourceDeletePollerResponse{}, err
	}
	result := IotHubResourceDeletePollerResponse{
		RawResponse: resp,
	}
	pt, err := armruntime.NewPoller("IotHubResourceClient.Delete", "", resp, client.pl, client.deleteHandleError)
	if err != nil {
		return IotHubResourceDeletePollerResponse{}, err
	}
	result.Poller = &IotHubResourceDeletePoller{
		pt: pt,
	}
	return result, nil
}

// Delete - Delete an IoT hub.
// If the operation fails it returns the *ErrorDetails error type.
func (client *IotHubResourceClient) deleteOperation(ctx context.Context, resourceGroupName string, resourceName string, options *IotHubResourceBeginDeleteOptions) (*http.Response, error) {
	req, err := client.deleteCreateRequest(ctx, resourceGroupName, resourceName, options)
	if err != nil {
		return nil, err
	}
	resp, err := client.pl.Do(req)
	if err != nil {
		return nil, err
	}
	if !runtime.HasStatusCode(resp, http.StatusOK, http.StatusAccepted, http.StatusNoContent, http.StatusNotFound) {
		return nil, client.deleteHandleError(resp)
	}
	return resp, nil
}

// deleteCreateRequest creates the Delete request.
func (client *IotHubResourceClient) deleteCreateRequest(ctx context.Context, resourceGroupName string, resourceName string, options *IotHubResourceBeginDeleteOptions) (*policy.Request, error) {
	urlPath := "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Devices/IotHubs/{resourceName}"
	if client.subscriptionID == "" {
		return nil, errors.New("parameter client.subscriptionID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{subscriptionId}", url.PathEscape(client.subscriptionID))
	if resourceGroupName == "" {
		return nil, errors.New("parameter resourceGroupName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{resourceGroupName}", url.PathEscape(resourceGroupName))
	if resourceName == "" {
		return nil, errors.New("parameter resourceName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{resourceName}", url.PathEscape(resourceName))
	req, err := runtime.NewRequest(ctx, http.MethodDelete, runtime.JoinPaths(client.ep, urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("api-version", "2021-07-01")
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header.Set("Accept", "application/json")
	return req, nil
}

// deleteHandleError handles the Delete error response.
func (client *IotHubResourceClient) deleteHandleError(resp *http.Response) error {
	body, err := runtime.Payload(resp)
	if err != nil {
		return runtime.NewResponseError(err, resp)
	}
	errType := ErrorDetails{raw: string(body)}
	if err := runtime.UnmarshalAsJSON(resp, &errType); err != nil {
		return runtime.NewResponseError(fmt.Errorf("%s\n%s", string(body), err), resp)
	}
	return runtime.NewResponseError(&errType, resp)
}

// DeleteEventHubConsumerGroup - Delete a consumer group from an Event Hub-compatible endpoint in an IoT hub.
// If the operation fails it returns the *ErrorDetails error type.
func (client *IotHubResourceClient) DeleteEventHubConsumerGroup(ctx context.Context, resourceGroupName string, resourceName string, eventHubEndpointName string, name string, options *IotHubResourceDeleteEventHubConsumerGroupOptions) (IotHubResourceDeleteEventHubConsumerGroupResponse, error) {
	req, err := client.deleteEventHubConsumerGroupCreateRequest(ctx, resourceGroupName, resourceName, eventHubEndpointName, name, options)
	if err != nil {
		return IotHubResourceDeleteEventHubConsumerGroupResponse{}, err
	}
	resp, err := client.pl.Do(req)
	if err != nil {
		return IotHubResourceDeleteEventHubConsumerGroupResponse{}, err
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {
		return IotHubResourceDeleteEventHubConsumerGroupResponse{}, client.deleteEventHubConsumerGroupHandleError(resp)
	}
	return IotHubResourceDeleteEventHubConsumerGroupResponse{RawResponse: resp}, nil
}

// deleteEventHubConsumerGroupCreateRequest creates the DeleteEventHubConsumerGroup request.
func (client *IotHubResourceClient) deleteEventHubConsumerGroupCreateRequest(ctx context.Context, resourceGroupName string, resourceName string, eventHubEndpointName string, name string, options *IotHubResourceDeleteEventHubConsumerGroupOptions) (*policy.Request, error) {
	urlPath := "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Devices/IotHubs/{resourceName}/eventHubEndpoints/{eventHubEndpointName}/ConsumerGroups/{name}"
	if client.subscriptionID == "" {
		return nil, errors.New("parameter client.subscriptionID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{subscriptionId}", url.PathEscape(client.subscriptionID))
	if resourceGroupName == "" {
		return nil, errors.New("parameter resourceGroupName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{resourceGroupName}", url.PathEscape(resourceGroupName))
	if resourceName == "" {
		return nil, errors.New("parameter resourceName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{resourceName}", url.PathEscape(resourceName))
	if eventHubEndpointName == "" {
		return nil, errors.New("parameter eventHubEndpointName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{eventHubEndpointName}", url.PathEscape(eventHubEndpointName))
	if name == "" {
		return nil, errors.New("parameter name cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{name}", url.PathEscape(name))
	req, err := runtime.NewRequest(ctx, http.MethodDelete, runtime.JoinPaths(client.ep, urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("api-version", "2021-07-01")
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header.Set("Accept", "application/json")
	return req, nil
}

// deleteEventHubConsumerGroupHandleError handles the DeleteEventHubConsumerGroup error response.
func (client *IotHubResourceClient) deleteEventHubConsumerGroupHandleError(resp *http.Response) error {
	body, err := runtime.Payload(resp)
	if err != nil {
		return runtime.NewResponseError(err, resp)
	}
	errType := ErrorDetails{raw: string(body)}
	if err := runtime.UnmarshalAsJSON(resp, &errType); err != nil {
		return runtime.NewResponseError(fmt.Errorf("%s\n%s", string(body), err), resp)
	}
	return runtime.NewResponseError(&errType, resp)
}

// ExportDevices - Exports all the device identities in the IoT hub identity registry to an Azure Storage blob container. For more information, see:
// https://docs.microsoft.com/azure/iot-hub/iot-hub-devguide-identity-registry#import-and-export-device-identities.
// If the operation fails it returns the *ErrorDetails error type.
func (client *IotHubResourceClient) ExportDevices(ctx context.Context, resourceGroupName string, resourceName string, exportDevicesParameters ExportDevicesRequest, options *IotHubResourceExportDevicesOptions) (IotHubResourceExportDevicesResponse, error) {
	req, err := client.exportDevicesCreateRequest(ctx, resourceGroupName, resourceName, exportDevicesParameters, options)
	if err != nil {
		return IotHubResourceExportDevicesResponse{}, err
	}
	resp, err := client.pl.Do(req)
	if err != nil {
		return IotHubResourceExportDevicesResponse{}, err
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {
		return IotHubResourceExportDevicesResponse{}, client.exportDevicesHandleError(resp)
	}
	return client.exportDevicesHandleResponse(resp)
}

// exportDevicesCreateRequest creates the ExportDevices request.
func (client *IotHubResourceClient) exportDevicesCreateRequest(ctx context.Context, resourceGroupName string, resourceName string, exportDevicesParameters ExportDevicesRequest, options *IotHubResourceExportDevicesOptions) (*policy.Request, error) {
	urlPath := "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Devices/IotHubs/{resourceName}/exportDevices"
	if client.subscriptionID == "" {
		return nil, errors.New("parameter client.subscriptionID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{subscriptionId}", url.PathEscape(client.subscriptionID))
	if resourceGroupName == "" {
		return nil, errors.New("parameter resourceGroupName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{resourceGroupName}", url.PathEscape(resourceGroupName))
	if resourceName == "" {
		return nil, errors.New("parameter resourceName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{resourceName}", url.PathEscape(resourceName))
	req, err := runtime.NewRequest(ctx, http.MethodPost, runtime.JoinPaths(client.ep, urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("api-version", "2021-07-01")
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header.Set("Accept", "application/json")
	return req, runtime.MarshalAsJSON(req, exportDevicesParameters)
}

// exportDevicesHandleResponse handles the ExportDevices response.
func (client *IotHubResourceClient) exportDevicesHandleResponse(resp *http.Response) (IotHubResourceExportDevicesResponse, error) {
	result := IotHubResourceExportDevicesResponse{RawResponse: resp}
	if err := runtime.UnmarshalAsJSON(resp, &result.JobResponse); err != nil {
		return IotHubResourceExportDevicesResponse{}, err
	}
	return result, nil
}

// exportDevicesHandleError handles the ExportDevices error response.
func (client *IotHubResourceClient) exportDevicesHandleError(resp *http.Response) error {
	body, err := runtime.Payload(resp)
	if err != nil {
		return runtime.NewResponseError(err, resp)
	}
	errType := ErrorDetails{raw: string(body)}
	if err := runtime.UnmarshalAsJSON(resp, &errType); err != nil {
		return runtime.NewResponseError(fmt.Errorf("%s\n%s", string(body), err), resp)
	}
	return runtime.NewResponseError(&errType, resp)
}

// Get - Get the non-security related metadata of an IoT hub.
// If the operation fails it returns the *ErrorDetails error type.
func (client *IotHubResourceClient) Get(ctx context.Context, resourceGroupName string, resourceName string, options *IotHubResourceGetOptions) (IotHubResourceGetResponse, error) {
	req, err := client.getCreateRequest(ctx, resourceGroupName, resourceName, options)
	if err != nil {
		return IotHubResourceGetResponse{}, err
	}
	resp, err := client.pl.Do(req)
	if err != nil {
		return IotHubResourceGetResponse{}, err
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {
		return IotHubResourceGetResponse{}, client.getHandleError(resp)
	}
	return client.getHandleResponse(resp)
}

// getCreateRequest creates the Get request.
func (client *IotHubResourceClient) getCreateRequest(ctx context.Context, resourceGroupName string, resourceName string, options *IotHubResourceGetOptions) (*policy.Request, error) {
	urlPath := "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Devices/IotHubs/{resourceName}"
	if client.subscriptionID == "" {
		return nil, errors.New("parameter client.subscriptionID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{subscriptionId}", url.PathEscape(client.subscriptionID))
	if resourceGroupName == "" {
		return nil, errors.New("parameter resourceGroupName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{resourceGroupName}", url.PathEscape(resourceGroupName))
	if resourceName == "" {
		return nil, errors.New("parameter resourceName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{resourceName}", url.PathEscape(resourceName))
	req, err := runtime.NewRequest(ctx, http.MethodGet, runtime.JoinPaths(client.ep, urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("api-version", "2021-07-01")
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header.Set("Accept", "application/json")
	return req, nil
}

// getHandleResponse handles the Get response.
func (client *IotHubResourceClient) getHandleResponse(resp *http.Response) (IotHubResourceGetResponse, error) {
	result := IotHubResourceGetResponse{RawResponse: resp}
	if err := runtime.UnmarshalAsJSON(resp, &result.IotHubDescription); err != nil {
		return IotHubResourceGetResponse{}, err
	}
	return result, nil
}

// getHandleError handles the Get error response.
func (client *IotHubResourceClient) getHandleError(resp *http.Response) error {
	body, err := runtime.Payload(resp)
	if err != nil {
		return runtime.NewResponseError(err, resp)
	}
	errType := ErrorDetails{raw: string(body)}
	if err := runtime.UnmarshalAsJSON(resp, &errType); err != nil {
		return runtime.NewResponseError(fmt.Errorf("%s\n%s", string(body), err), resp)
	}
	return runtime.NewResponseError(&errType, resp)
}

// GetEndpointHealth - Get the health for routing endpoints.
// If the operation fails it returns the *ErrorDetails error type.
func (client *IotHubResourceClient) GetEndpointHealth(resourceGroupName string, iotHubName string, options *IotHubResourceGetEndpointHealthOptions) *IotHubResourceGetEndpointHealthPager {
	return &IotHubResourceGetEndpointHealthPager{
		client: client,
		requester: func(ctx context.Context) (*policy.Request, error) {
			return client.getEndpointHealthCreateRequest(ctx, resourceGroupName, iotHubName, options)
		},
		advancer: func(ctx context.Context, resp IotHubResourceGetEndpointHealthResponse) (*policy.Request, error) {
			return runtime.NewRequest(ctx, http.MethodGet, *resp.EndpointHealthDataListResult.NextLink)
		},
	}
}

// getEndpointHealthCreateRequest creates the GetEndpointHealth request.
func (client *IotHubResourceClient) getEndpointHealthCreateRequest(ctx context.Context, resourceGroupName string, iotHubName string, options *IotHubResourceGetEndpointHealthOptions) (*policy.Request, error) {
	urlPath := "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Devices/IotHubs/{iotHubName}/routingEndpointsHealth"
	if client.subscriptionID == "" {
		return nil, errors.New("parameter client.subscriptionID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{subscriptionId}", url.PathEscape(client.subscriptionID))
	if resourceGroupName == "" {
		return nil, errors.New("parameter resourceGroupName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{resourceGroupName}", url.PathEscape(resourceGroupName))
	if iotHubName == "" {
		return nil, errors.New("parameter iotHubName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{iotHubName}", url.PathEscape(iotHubName))
	req, err := runtime.NewRequest(ctx, http.MethodGet, runtime.JoinPaths(client.ep, urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("api-version", "2021-07-01")
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header.Set("Accept", "application/json")
	return req, nil
}

// getEndpointHealthHandleResponse handles the GetEndpointHealth response.
func (client *IotHubResourceClient) getEndpointHealthHandleResponse(resp *http.Response) (IotHubResourceGetEndpointHealthResponse, error) {
	result := IotHubResourceGetEndpointHealthResponse{RawResponse: resp}
	if err := runtime.UnmarshalAsJSON(resp, &result.EndpointHealthDataListResult); err != nil {
		return IotHubResourceGetEndpointHealthResponse{}, err
	}
	return result, nil
}

// getEndpointHealthHandleError handles the GetEndpointHealth error response.
func (client *IotHubResourceClient) getEndpointHealthHandleError(resp *http.Response) error {
	body, err := runtime.Payload(resp)
	if err != nil {
		return runtime.NewResponseError(err, resp)
	}
	errType := ErrorDetails{raw: string(body)}
	if err := runtime.UnmarshalAsJSON(resp, &errType); err != nil {
		return runtime.NewResponseError(fmt.Errorf("%s\n%s", string(body), err), resp)
	}
	return runtime.NewResponseError(&errType, resp)
}

// GetEventHubConsumerGroup - Get a consumer group from the Event Hub-compatible device-to-cloud endpoint for an IoT hub.
// If the operation fails it returns the *ErrorDetails error type.
func (client *IotHubResourceClient) GetEventHubConsumerGroup(ctx context.Context, resourceGroupName string, resourceName string, eventHubEndpointName string, name string, options *IotHubResourceGetEventHubConsumerGroupOptions) (IotHubResourceGetEventHubConsumerGroupResponse, error) {
	req, err := client.getEventHubConsumerGroupCreateRequest(ctx, resourceGroupName, resourceName, eventHubEndpointName, name, options)
	if err != nil {
		return IotHubResourceGetEventHubConsumerGroupResponse{}, err
	}
	resp, err := client.pl.Do(req)
	if err != nil {
		return IotHubResourceGetEventHubConsumerGroupResponse{}, err
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {
		return IotHubResourceGetEventHubConsumerGroupResponse{}, client.getEventHubConsumerGroupHandleError(resp)
	}
	return client.getEventHubConsumerGroupHandleResponse(resp)
}

// getEventHubConsumerGroupCreateRequest creates the GetEventHubConsumerGroup request.
func (client *IotHubResourceClient) getEventHubConsumerGroupCreateRequest(ctx context.Context, resourceGroupName string, resourceName string, eventHubEndpointName string, name string, options *IotHubResourceGetEventHubConsumerGroupOptions) (*policy.Request, error) {
	urlPath := "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Devices/IotHubs/{resourceName}/eventHubEndpoints/{eventHubEndpointName}/ConsumerGroups/{name}"
	if client.subscriptionID == "" {
		return nil, errors.New("parameter client.subscriptionID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{subscriptionId}", url.PathEscape(client.subscriptionID))
	if resourceGroupName == "" {
		return nil, errors.New("parameter resourceGroupName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{resourceGroupName}", url.PathEscape(resourceGroupName))
	if resourceName == "" {
		return nil, errors.New("parameter resourceName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{resourceName}", url.PathEscape(resourceName))
	if eventHubEndpointName == "" {
		return nil, errors.New("parameter eventHubEndpointName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{eventHubEndpointName}", url.PathEscape(eventHubEndpointName))
	if name == "" {
		return nil, errors.New("parameter name cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{name}", url.PathEscape(name))
	req, err := runtime.NewRequest(ctx, http.MethodGet, runtime.JoinPaths(client.ep, urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("api-version", "2021-07-01")
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header.Set("Accept", "application/json")
	return req, nil
}

// getEventHubConsumerGroupHandleResponse handles the GetEventHubConsumerGroup response.
func (client *IotHubResourceClient) getEventHubConsumerGroupHandleResponse(resp *http.Response) (IotHubResourceGetEventHubConsumerGroupResponse, error) {
	result := IotHubResourceGetEventHubConsumerGroupResponse{RawResponse: resp}
	if err := runtime.UnmarshalAsJSON(resp, &result.EventHubConsumerGroupInfo); err != nil {
		return IotHubResourceGetEventHubConsumerGroupResponse{}, err
	}
	return result, nil
}

// getEventHubConsumerGroupHandleError handles the GetEventHubConsumerGroup error response.
func (client *IotHubResourceClient) getEventHubConsumerGroupHandleError(resp *http.Response) error {
	body, err := runtime.Payload(resp)
	if err != nil {
		return runtime.NewResponseError(err, resp)
	}
	errType := ErrorDetails{raw: string(body)}
	if err := runtime.UnmarshalAsJSON(resp, &errType); err != nil {
		return runtime.NewResponseError(fmt.Errorf("%s\n%s", string(body), err), resp)
	}
	return runtime.NewResponseError(&errType, resp)
}

// GetJob - Get the details of a job from an IoT hub. For more information, see: https://docs.microsoft.com/azure/iot-hub/iot-hub-devguide-identity-registry.
// If the operation fails it returns the *ErrorDetails error type.
func (client *IotHubResourceClient) GetJob(ctx context.Context, resourceGroupName string, resourceName string, jobID string, options *IotHubResourceGetJobOptions) (IotHubResourceGetJobResponse, error) {
	req, err := client.getJobCreateRequest(ctx, resourceGroupName, resourceName, jobID, options)
	if err != nil {
		return IotHubResourceGetJobResponse{}, err
	}
	resp, err := client.pl.Do(req)
	if err != nil {
		return IotHubResourceGetJobResponse{}, err
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {
		return IotHubResourceGetJobResponse{}, client.getJobHandleError(resp)
	}
	return client.getJobHandleResponse(resp)
}

// getJobCreateRequest creates the GetJob request.
func (client *IotHubResourceClient) getJobCreateRequest(ctx context.Context, resourceGroupName string, resourceName string, jobID string, options *IotHubResourceGetJobOptions) (*policy.Request, error) {
	urlPath := "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Devices/IotHubs/{resourceName}/jobs/{jobId}"
	if client.subscriptionID == "" {
		return nil, errors.New("parameter client.subscriptionID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{subscriptionId}", url.PathEscape(client.subscriptionID))
	if resourceGroupName == "" {
		return nil, errors.New("parameter resourceGroupName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{resourceGroupName}", url.PathEscape(resourceGroupName))
	if resourceName == "" {
		return nil, errors.New("parameter resourceName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{resourceName}", url.PathEscape(resourceName))
	if jobID == "" {
		return nil, errors.New("parameter jobID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{jobId}", url.PathEscape(jobID))
	req, err := runtime.NewRequest(ctx, http.MethodGet, runtime.JoinPaths(client.ep, urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("api-version", "2021-07-01")
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header.Set("Accept", "application/json")
	return req, nil
}

// getJobHandleResponse handles the GetJob response.
func (client *IotHubResourceClient) getJobHandleResponse(resp *http.Response) (IotHubResourceGetJobResponse, error) {
	result := IotHubResourceGetJobResponse{RawResponse: resp}
	if err := runtime.UnmarshalAsJSON(resp, &result.JobResponse); err != nil {
		return IotHubResourceGetJobResponse{}, err
	}
	return result, nil
}

// getJobHandleError handles the GetJob error response.
func (client *IotHubResourceClient) getJobHandleError(resp *http.Response) error {
	body, err := runtime.Payload(resp)
	if err != nil {
		return runtime.NewResponseError(err, resp)
	}
	errType := ErrorDetails{raw: string(body)}
	if err := runtime.UnmarshalAsJSON(resp, &errType); err != nil {
		return runtime.NewResponseError(fmt.Errorf("%s\n%s", string(body), err), resp)
	}
	return runtime.NewResponseError(&errType, resp)
}

// GetKeysForKeyName - Get a shared access policy by name from an IoT hub. For more information, see: https://docs.microsoft.com/azure/iot-hub/iot-hub-devguide-security.
// If the operation fails it returns the *ErrorDetails error type.
func (client *IotHubResourceClient) GetKeysForKeyName(ctx context.Context, resourceGroupName string, resourceName string, keyName string, options *IotHubResourceGetKeysForKeyNameOptions) (IotHubResourceGetKeysForKeyNameResponse, error) {
	req, err := client.getKeysForKeyNameCreateRequest(ctx, resourceGroupName, resourceName, keyName, options)
	if err != nil {
		return IotHubResourceGetKeysForKeyNameResponse{}, err
	}
	resp, err := client.pl.Do(req)
	if err != nil {
		return IotHubResourceGetKeysForKeyNameResponse{}, err
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {
		return IotHubResourceGetKeysForKeyNameResponse{}, client.getKeysForKeyNameHandleError(resp)
	}
	return client.getKeysForKeyNameHandleResponse(resp)
}

// getKeysForKeyNameCreateRequest creates the GetKeysForKeyName request.
func (client *IotHubResourceClient) getKeysForKeyNameCreateRequest(ctx context.Context, resourceGroupName string, resourceName string, keyName string, options *IotHubResourceGetKeysForKeyNameOptions) (*policy.Request, error) {
	urlPath := "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Devices/IotHubs/{resourceName}/IotHubKeys/{keyName}/listkeys"
	if client.subscriptionID == "" {
		return nil, errors.New("parameter client.subscriptionID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{subscriptionId}", url.PathEscape(client.subscriptionID))
	if resourceGroupName == "" {
		return nil, errors.New("parameter resourceGroupName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{resourceGroupName}", url.PathEscape(resourceGroupName))
	if resourceName == "" {
		return nil, errors.New("parameter resourceName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{resourceName}", url.PathEscape(resourceName))
	if keyName == "" {
		return nil, errors.New("parameter keyName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{keyName}", url.PathEscape(keyName))
	req, err := runtime.NewRequest(ctx, http.MethodPost, runtime.JoinPaths(client.ep, urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("api-version", "2021-07-01")
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header.Set("Accept", "application/json")
	return req, nil
}

// getKeysForKeyNameHandleResponse handles the GetKeysForKeyName response.
func (client *IotHubResourceClient) getKeysForKeyNameHandleResponse(resp *http.Response) (IotHubResourceGetKeysForKeyNameResponse, error) {
	result := IotHubResourceGetKeysForKeyNameResponse{RawResponse: resp}
	if err := runtime.UnmarshalAsJSON(resp, &result.SharedAccessSignatureAuthorizationRule); err != nil {
		return IotHubResourceGetKeysForKeyNameResponse{}, err
	}
	return result, nil
}

// getKeysForKeyNameHandleError handles the GetKeysForKeyName error response.
func (client *IotHubResourceClient) getKeysForKeyNameHandleError(resp *http.Response) error {
	body, err := runtime.Payload(resp)
	if err != nil {
		return runtime.NewResponseError(err, resp)
	}
	errType := ErrorDetails{raw: string(body)}
	if err := runtime.UnmarshalAsJSON(resp, &errType); err != nil {
		return runtime.NewResponseError(fmt.Errorf("%s\n%s", string(body), err), resp)
	}
	return runtime.NewResponseError(&errType, resp)
}

// GetQuotaMetrics - Get the quota metrics for an IoT hub.
// If the operation fails it returns the *ErrorDetails error type.
func (client *IotHubResourceClient) GetQuotaMetrics(resourceGroupName string, resourceName string, options *IotHubResourceGetQuotaMetricsOptions) *IotHubResourceGetQuotaMetricsPager {
	return &IotHubResourceGetQuotaMetricsPager{
		client: client,
		requester: func(ctx context.Context) (*policy.Request, error) {
			return client.getQuotaMetricsCreateRequest(ctx, resourceGroupName, resourceName, options)
		},
		advancer: func(ctx context.Context, resp IotHubResourceGetQuotaMetricsResponse) (*policy.Request, error) {
			return runtime.NewRequest(ctx, http.MethodGet, *resp.IotHubQuotaMetricInfoListResult.NextLink)
		},
	}
}

// getQuotaMetricsCreateRequest creates the GetQuotaMetrics request.
func (client *IotHubResourceClient) getQuotaMetricsCreateRequest(ctx context.Context, resourceGroupName string, resourceName string, options *IotHubResourceGetQuotaMetricsOptions) (*policy.Request, error) {
	urlPath := "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Devices/IotHubs/{resourceName}/quotaMetrics"
	if client.subscriptionID == "" {
		return nil, errors.New("parameter client.subscriptionID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{subscriptionId}", url.PathEscape(client.subscriptionID))
	if resourceGroupName == "" {
		return nil, errors.New("parameter resourceGroupName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{resourceGroupName}", url.PathEscape(resourceGroupName))
	if resourceName == "" {
		return nil, errors.New("parameter resourceName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{resourceName}", url.PathEscape(resourceName))
	req, err := runtime.NewRequest(ctx, http.MethodGet, runtime.JoinPaths(client.ep, urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("api-version", "2021-07-01")
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header.Set("Accept", "application/json")
	return req, nil
}

// getQuotaMetricsHandleResponse handles the GetQuotaMetrics response.
func (client *IotHubResourceClient) getQuotaMetricsHandleResponse(resp *http.Response) (IotHubResourceGetQuotaMetricsResponse, error) {
	result := IotHubResourceGetQuotaMetricsResponse{RawResponse: resp}
	if err := runtime.UnmarshalAsJSON(resp, &result.IotHubQuotaMetricInfoListResult); err != nil {
		return IotHubResourceGetQuotaMetricsResponse{}, err
	}
	return result, nil
}

// getQuotaMetricsHandleError handles the GetQuotaMetrics error response.
func (client *IotHubResourceClient) getQuotaMetricsHandleError(resp *http.Response) error {
	body, err := runtime.Payload(resp)
	if err != nil {
		return runtime.NewResponseError(err, resp)
	}
	errType := ErrorDetails{raw: string(body)}
	if err := runtime.UnmarshalAsJSON(resp, &errType); err != nil {
		return runtime.NewResponseError(fmt.Errorf("%s\n%s", string(body), err), resp)
	}
	return runtime.NewResponseError(&errType, resp)
}

// GetStats - Get the statistics from an IoT hub.
// If the operation fails it returns the *ErrorDetails error type.
func (client *IotHubResourceClient) GetStats(ctx context.Context, resourceGroupName string, resourceName string, options *IotHubResourceGetStatsOptions) (IotHubResourceGetStatsResponse, error) {
	req, err := client.getStatsCreateRequest(ctx, resourceGroupName, resourceName, options)
	if err != nil {
		return IotHubResourceGetStatsResponse{}, err
	}
	resp, err := client.pl.Do(req)
	if err != nil {
		return IotHubResourceGetStatsResponse{}, err
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {
		return IotHubResourceGetStatsResponse{}, client.getStatsHandleError(resp)
	}
	return client.getStatsHandleResponse(resp)
}

// getStatsCreateRequest creates the GetStats request.
func (client *IotHubResourceClient) getStatsCreateRequest(ctx context.Context, resourceGroupName string, resourceName string, options *IotHubResourceGetStatsOptions) (*policy.Request, error) {
	urlPath := "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Devices/IotHubs/{resourceName}/IotHubStats"
	if client.subscriptionID == "" {
		return nil, errors.New("parameter client.subscriptionID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{subscriptionId}", url.PathEscape(client.subscriptionID))
	if resourceGroupName == "" {
		return nil, errors.New("parameter resourceGroupName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{resourceGroupName}", url.PathEscape(resourceGroupName))
	if resourceName == "" {
		return nil, errors.New("parameter resourceName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{resourceName}", url.PathEscape(resourceName))
	req, err := runtime.NewRequest(ctx, http.MethodGet, runtime.JoinPaths(client.ep, urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("api-version", "2021-07-01")
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header.Set("Accept", "application/json")
	return req, nil
}

// getStatsHandleResponse handles the GetStats response.
func (client *IotHubResourceClient) getStatsHandleResponse(resp *http.Response) (IotHubResourceGetStatsResponse, error) {
	result := IotHubResourceGetStatsResponse{RawResponse: resp}
	if err := runtime.UnmarshalAsJSON(resp, &result.RegistryStatistics); err != nil {
		return IotHubResourceGetStatsResponse{}, err
	}
	return result, nil
}

// getStatsHandleError handles the GetStats error response.
func (client *IotHubResourceClient) getStatsHandleError(resp *http.Response) error {
	body, err := runtime.Payload(resp)
	if err != nil {
		return runtime.NewResponseError(err, resp)
	}
	errType := ErrorDetails{raw: string(body)}
	if err := runtime.UnmarshalAsJSON(resp, &errType); err != nil {
		return runtime.NewResponseError(fmt.Errorf("%s\n%s", string(body), err), resp)
	}
	return runtime.NewResponseError(&errType, resp)
}

// GetValidSKUs - Get the list of valid SKUs for an IoT hub.
// If the operation fails it returns the *ErrorDetails error type.
func (client *IotHubResourceClient) GetValidSKUs(resourceGroupName string, resourceName string, options *IotHubResourceGetValidSKUsOptions) *IotHubResourceGetValidSKUsPager {
	return &IotHubResourceGetValidSKUsPager{
		client: client,
		requester: func(ctx context.Context) (*policy.Request, error) {
			return client.getValidSKUsCreateRequest(ctx, resourceGroupName, resourceName, options)
		},
		advancer: func(ctx context.Context, resp IotHubResourceGetValidSKUsResponse) (*policy.Request, error) {
			return runtime.NewRequest(ctx, http.MethodGet, *resp.IotHubSKUDescriptionListResult.NextLink)
		},
	}
}

// getValidSKUsCreateRequest creates the GetValidSKUs request.
func (client *IotHubResourceClient) getValidSKUsCreateRequest(ctx context.Context, resourceGroupName string, resourceName string, options *IotHubResourceGetValidSKUsOptions) (*policy.Request, error) {
	urlPath := "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Devices/IotHubs/{resourceName}/skus"
	if client.subscriptionID == "" {
		return nil, errors.New("parameter client.subscriptionID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{subscriptionId}", url.PathEscape(client.subscriptionID))
	if resourceGroupName == "" {
		return nil, errors.New("parameter resourceGroupName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{resourceGroupName}", url.PathEscape(resourceGroupName))
	if resourceName == "" {
		return nil, errors.New("parameter resourceName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{resourceName}", url.PathEscape(resourceName))
	req, err := runtime.NewRequest(ctx, http.MethodGet, runtime.JoinPaths(client.ep, urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("api-version", "2021-07-01")
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header.Set("Accept", "application/json")
	return req, nil
}

// getValidSKUsHandleResponse handles the GetValidSKUs response.
func (client *IotHubResourceClient) getValidSKUsHandleResponse(resp *http.Response) (IotHubResourceGetValidSKUsResponse, error) {
	result := IotHubResourceGetValidSKUsResponse{RawResponse: resp}
	if err := runtime.UnmarshalAsJSON(resp, &result.IotHubSKUDescriptionListResult); err != nil {
		return IotHubResourceGetValidSKUsResponse{}, err
	}
	return result, nil
}

// getValidSKUsHandleError handles the GetValidSKUs error response.
func (client *IotHubResourceClient) getValidSKUsHandleError(resp *http.Response) error {
	body, err := runtime.Payload(resp)
	if err != nil {
		return runtime.NewResponseError(err, resp)
	}
	errType := ErrorDetails{raw: string(body)}
	if err := runtime.UnmarshalAsJSON(resp, &errType); err != nil {
		return runtime.NewResponseError(fmt.Errorf("%s\n%s", string(body), err), resp)
	}
	return runtime.NewResponseError(&errType, resp)
}

// ImportDevices - Import, update, or delete device identities in the IoT hub identity registry from a blob. For more information, see:
// https://docs.microsoft.com/azure/iot-hub/iot-hub-devguide-identity-registry#import-and-export-device-identities.
// If the operation fails it returns the *ErrorDetails error type.
func (client *IotHubResourceClient) ImportDevices(ctx context.Context, resourceGroupName string, resourceName string, importDevicesParameters ImportDevicesRequest, options *IotHubResourceImportDevicesOptions) (IotHubResourceImportDevicesResponse, error) {
	req, err := client.importDevicesCreateRequest(ctx, resourceGroupName, resourceName, importDevicesParameters, options)
	if err != nil {
		return IotHubResourceImportDevicesResponse{}, err
	}
	resp, err := client.pl.Do(req)
	if err != nil {
		return IotHubResourceImportDevicesResponse{}, err
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {
		return IotHubResourceImportDevicesResponse{}, client.importDevicesHandleError(resp)
	}
	return client.importDevicesHandleResponse(resp)
}

// importDevicesCreateRequest creates the ImportDevices request.
func (client *IotHubResourceClient) importDevicesCreateRequest(ctx context.Context, resourceGroupName string, resourceName string, importDevicesParameters ImportDevicesRequest, options *IotHubResourceImportDevicesOptions) (*policy.Request, error) {
	urlPath := "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Devices/IotHubs/{resourceName}/importDevices"
	if client.subscriptionID == "" {
		return nil, errors.New("parameter client.subscriptionID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{subscriptionId}", url.PathEscape(client.subscriptionID))
	if resourceGroupName == "" {
		return nil, errors.New("parameter resourceGroupName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{resourceGroupName}", url.PathEscape(resourceGroupName))
	if resourceName == "" {
		return nil, errors.New("parameter resourceName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{resourceName}", url.PathEscape(resourceName))
	req, err := runtime.NewRequest(ctx, http.MethodPost, runtime.JoinPaths(client.ep, urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("api-version", "2021-07-01")
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header.Set("Accept", "application/json")
	return req, runtime.MarshalAsJSON(req, importDevicesParameters)
}

// importDevicesHandleResponse handles the ImportDevices response.
func (client *IotHubResourceClient) importDevicesHandleResponse(resp *http.Response) (IotHubResourceImportDevicesResponse, error) {
	result := IotHubResourceImportDevicesResponse{RawResponse: resp}
	if err := runtime.UnmarshalAsJSON(resp, &result.JobResponse); err != nil {
		return IotHubResourceImportDevicesResponse{}, err
	}
	return result, nil
}

// importDevicesHandleError handles the ImportDevices error response.
func (client *IotHubResourceClient) importDevicesHandleError(resp *http.Response) error {
	body, err := runtime.Payload(resp)
	if err != nil {
		return runtime.NewResponseError(err, resp)
	}
	errType := ErrorDetails{raw: string(body)}
	if err := runtime.UnmarshalAsJSON(resp, &errType); err != nil {
		return runtime.NewResponseError(fmt.Errorf("%s\n%s", string(body), err), resp)
	}
	return runtime.NewResponseError(&errType, resp)
}

// ListByResourceGroup - Get all the IoT hubs in a resource group.
// If the operation fails it returns the *ErrorDetails error type.
func (client *IotHubResourceClient) ListByResourceGroup(resourceGroupName string, options *IotHubResourceListByResourceGroupOptions) *IotHubResourceListByResourceGroupPager {
	return &IotHubResourceListByResourceGroupPager{
		client: client,
		requester: func(ctx context.Context) (*policy.Request, error) {
			return client.listByResourceGroupCreateRequest(ctx, resourceGroupName, options)
		},
		advancer: func(ctx context.Context, resp IotHubResourceListByResourceGroupResponse) (*policy.Request, error) {
			return runtime.NewRequest(ctx, http.MethodGet, *resp.IotHubDescriptionListResult.NextLink)
		},
	}
}

// listByResourceGroupCreateRequest creates the ListByResourceGroup request.
func (client *IotHubResourceClient) listByResourceGroupCreateRequest(ctx context.Context, resourceGroupName string, options *IotHubResourceListByResourceGroupOptions) (*policy.Request, error) {
	urlPath := "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Devices/IotHubs"
	if client.subscriptionID == "" {
		return nil, errors.New("parameter client.subscriptionID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{subscriptionId}", url.PathEscape(client.subscriptionID))
	if resourceGroupName == "" {
		return nil, errors.New("parameter resourceGroupName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{resourceGroupName}", url.PathEscape(resourceGroupName))
	req, err := runtime.NewRequest(ctx, http.MethodGet, runtime.JoinPaths(client.ep, urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("api-version", "2021-07-01")
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header.Set("Accept", "application/json")
	return req, nil
}

// listByResourceGroupHandleResponse handles the ListByResourceGroup response.
func (client *IotHubResourceClient) listByResourceGroupHandleResponse(resp *http.Response) (IotHubResourceListByResourceGroupResponse, error) {
	result := IotHubResourceListByResourceGroupResponse{RawResponse: resp}
	if err := runtime.UnmarshalAsJSON(resp, &result.IotHubDescriptionListResult); err != nil {
		return IotHubResourceListByResourceGroupResponse{}, err
	}
	return result, nil
}

// listByResourceGroupHandleError handles the ListByResourceGroup error response.
func (client *IotHubResourceClient) listByResourceGroupHandleError(resp *http.Response) error {
	body, err := runtime.Payload(resp)
	if err != nil {
		return runtime.NewResponseError(err, resp)
	}
	errType := ErrorDetails{raw: string(body)}
	if err := runtime.UnmarshalAsJSON(resp, &errType); err != nil {
		return runtime.NewResponseError(fmt.Errorf("%s\n%s", string(body), err), resp)
	}
	return runtime.NewResponseError(&errType, resp)
}

// ListBySubscription - Get all the IoT hubs in a subscription.
// If the operation fails it returns the *ErrorDetails error type.
func (client *IotHubResourceClient) ListBySubscription(options *IotHubResourceListBySubscriptionOptions) *IotHubResourceListBySubscriptionPager {
	return &IotHubResourceListBySubscriptionPager{
		client: client,
		requester: func(ctx context.Context) (*policy.Request, error) {
			return client.listBySubscriptionCreateRequest(ctx, options)
		},
		advancer: func(ctx context.Context, resp IotHubResourceListBySubscriptionResponse) (*policy.Request, error) {
			return runtime.NewRequest(ctx, http.MethodGet, *resp.IotHubDescriptionListResult.NextLink)
		},
	}
}

// listBySubscriptionCreateRequest creates the ListBySubscription request.
func (client *IotHubResourceClient) listBySubscriptionCreateRequest(ctx context.Context, options *IotHubResourceListBySubscriptionOptions) (*policy.Request, error) {
	urlPath := "/subscriptions/{subscriptionId}/providers/Microsoft.Devices/IotHubs"
	if client.subscriptionID == "" {
		return nil, errors.New("parameter client.subscriptionID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{subscriptionId}", url.PathEscape(client.subscriptionID))
	req, err := runtime.NewRequest(ctx, http.MethodGet, runtime.JoinPaths(client.ep, urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("api-version", "2021-07-01")
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header.Set("Accept", "application/json")
	return req, nil
}

// listBySubscriptionHandleResponse handles the ListBySubscription response.
func (client *IotHubResourceClient) listBySubscriptionHandleResponse(resp *http.Response) (IotHubResourceListBySubscriptionResponse, error) {
	result := IotHubResourceListBySubscriptionResponse{RawResponse: resp}
	if err := runtime.UnmarshalAsJSON(resp, &result.IotHubDescriptionListResult); err != nil {
		return IotHubResourceListBySubscriptionResponse{}, err
	}
	return result, nil
}

// listBySubscriptionHandleError handles the ListBySubscription error response.
func (client *IotHubResourceClient) listBySubscriptionHandleError(resp *http.Response) error {
	body, err := runtime.Payload(resp)
	if err != nil {
		return runtime.NewResponseError(err, resp)
	}
	errType := ErrorDetails{raw: string(body)}
	if err := runtime.UnmarshalAsJSON(resp, &errType); err != nil {
		return runtime.NewResponseError(fmt.Errorf("%s\n%s", string(body), err), resp)
	}
	return runtime.NewResponseError(&errType, resp)
}

// ListEventHubConsumerGroups - Get a list of the consumer groups in the Event Hub-compatible device-to-cloud endpoint in an IoT hub.
// If the operation fails it returns the *ErrorDetails error type.
func (client *IotHubResourceClient) ListEventHubConsumerGroups(resourceGroupName string, resourceName string, eventHubEndpointName string, options *IotHubResourceListEventHubConsumerGroupsOptions) *IotHubResourceListEventHubConsumerGroupsPager {
	return &IotHubResourceListEventHubConsumerGroupsPager{
		client: client,
		requester: func(ctx context.Context) (*policy.Request, error) {
			return client.listEventHubConsumerGroupsCreateRequest(ctx, resourceGroupName, resourceName, eventHubEndpointName, options)
		},
		advancer: func(ctx context.Context, resp IotHubResourceListEventHubConsumerGroupsResponse) (*policy.Request, error) {
			return runtime.NewRequest(ctx, http.MethodGet, *resp.EventHubConsumerGroupsListResult.NextLink)
		},
	}
}

// listEventHubConsumerGroupsCreateRequest creates the ListEventHubConsumerGroups request.
func (client *IotHubResourceClient) listEventHubConsumerGroupsCreateRequest(ctx context.Context, resourceGroupName string, resourceName string, eventHubEndpointName string, options *IotHubResourceListEventHubConsumerGroupsOptions) (*policy.Request, error) {
	urlPath := "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Devices/IotHubs/{resourceName}/eventHubEndpoints/{eventHubEndpointName}/ConsumerGroups"
	if client.subscriptionID == "" {
		return nil, errors.New("parameter client.subscriptionID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{subscriptionId}", url.PathEscape(client.subscriptionID))
	if resourceGroupName == "" {
		return nil, errors.New("parameter resourceGroupName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{resourceGroupName}", url.PathEscape(resourceGroupName))
	if resourceName == "" {
		return nil, errors.New("parameter resourceName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{resourceName}", url.PathEscape(resourceName))
	if eventHubEndpointName == "" {
		return nil, errors.New("parameter eventHubEndpointName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{eventHubEndpointName}", url.PathEscape(eventHubEndpointName))
	req, err := runtime.NewRequest(ctx, http.MethodGet, runtime.JoinPaths(client.ep, urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("api-version", "2021-07-01")
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header.Set("Accept", "application/json")
	return req, nil
}

// listEventHubConsumerGroupsHandleResponse handles the ListEventHubConsumerGroups response.
func (client *IotHubResourceClient) listEventHubConsumerGroupsHandleResponse(resp *http.Response) (IotHubResourceListEventHubConsumerGroupsResponse, error) {
	result := IotHubResourceListEventHubConsumerGroupsResponse{RawResponse: resp}
	if err := runtime.UnmarshalAsJSON(resp, &result.EventHubConsumerGroupsListResult); err != nil {
		return IotHubResourceListEventHubConsumerGroupsResponse{}, err
	}
	return result, nil
}

// listEventHubConsumerGroupsHandleError handles the ListEventHubConsumerGroups error response.
func (client *IotHubResourceClient) listEventHubConsumerGroupsHandleError(resp *http.Response) error {
	body, err := runtime.Payload(resp)
	if err != nil {
		return runtime.NewResponseError(err, resp)
	}
	errType := ErrorDetails{raw: string(body)}
	if err := runtime.UnmarshalAsJSON(resp, &errType); err != nil {
		return runtime.NewResponseError(fmt.Errorf("%s\n%s", string(body), err), resp)
	}
	return runtime.NewResponseError(&errType, resp)
}

// ListJobs - Get a list of all the jobs in an IoT hub. For more information, see: https://docs.microsoft.com/azure/iot-hub/iot-hub-devguide-identity-registry.
// If the operation fails it returns the *ErrorDetails error type.
func (client *IotHubResourceClient) ListJobs(resourceGroupName string, resourceName string, options *IotHubResourceListJobsOptions) *IotHubResourceListJobsPager {
	return &IotHubResourceListJobsPager{
		client: client,
		requester: func(ctx context.Context) (*policy.Request, error) {
			return client.listJobsCreateRequest(ctx, resourceGroupName, resourceName, options)
		},
		advancer: func(ctx context.Context, resp IotHubResourceListJobsResponse) (*policy.Request, error) {
			return runtime.NewRequest(ctx, http.MethodGet, *resp.JobResponseListResult.NextLink)
		},
	}
}

// listJobsCreateRequest creates the ListJobs request.
func (client *IotHubResourceClient) listJobsCreateRequest(ctx context.Context, resourceGroupName string, resourceName string, options *IotHubResourceListJobsOptions) (*policy.Request, error) {
	urlPath := "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Devices/IotHubs/{resourceName}/jobs"
	if client.subscriptionID == "" {
		return nil, errors.New("parameter client.subscriptionID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{subscriptionId}", url.PathEscape(client.subscriptionID))
	if resourceGroupName == "" {
		return nil, errors.New("parameter resourceGroupName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{resourceGroupName}", url.PathEscape(resourceGroupName))
	if resourceName == "" {
		return nil, errors.New("parameter resourceName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{resourceName}", url.PathEscape(resourceName))
	req, err := runtime.NewRequest(ctx, http.MethodGet, runtime.JoinPaths(client.ep, urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("api-version", "2021-07-01")
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header.Set("Accept", "application/json")
	return req, nil
}

// listJobsHandleResponse handles the ListJobs response.
func (client *IotHubResourceClient) listJobsHandleResponse(resp *http.Response) (IotHubResourceListJobsResponse, error) {
	result := IotHubResourceListJobsResponse{RawResponse: resp}
	if err := runtime.UnmarshalAsJSON(resp, &result.JobResponseListResult); err != nil {
		return IotHubResourceListJobsResponse{}, err
	}
	return result, nil
}

// listJobsHandleError handles the ListJobs error response.
func (client *IotHubResourceClient) listJobsHandleError(resp *http.Response) error {
	body, err := runtime.Payload(resp)
	if err != nil {
		return runtime.NewResponseError(err, resp)
	}
	errType := ErrorDetails{raw: string(body)}
	if err := runtime.UnmarshalAsJSON(resp, &errType); err != nil {
		return runtime.NewResponseError(fmt.Errorf("%s\n%s", string(body), err), resp)
	}
	return runtime.NewResponseError(&errType, resp)
}

// ListKeys - Get the security metadata for an IoT hub. For more information, see: https://docs.microsoft.com/azure/iot-hub/iot-hub-devguide-security.
// If the operation fails it returns the *ErrorDetails error type.
func (client *IotHubResourceClient) ListKeys(resourceGroupName string, resourceName string, options *IotHubResourceListKeysOptions) *IotHubResourceListKeysPager {
	return &IotHubResourceListKeysPager{
		client: client,
		requester: func(ctx context.Context) (*policy.Request, error) {
			return client.listKeysCreateRequest(ctx, resourceGroupName, resourceName, options)
		},
		advancer: func(ctx context.Context, resp IotHubResourceListKeysResponse) (*policy.Request, error) {
			return runtime.NewRequest(ctx, http.MethodGet, *resp.SharedAccessSignatureAuthorizationRuleListResult.NextLink)
		},
	}
}

// listKeysCreateRequest creates the ListKeys request.
func (client *IotHubResourceClient) listKeysCreateRequest(ctx context.Context, resourceGroupName string, resourceName string, options *IotHubResourceListKeysOptions) (*policy.Request, error) {
	urlPath := "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Devices/IotHubs/{resourceName}/listkeys"
	if client.subscriptionID == "" {
		return nil, errors.New("parameter client.subscriptionID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{subscriptionId}", url.PathEscape(client.subscriptionID))
	if resourceGroupName == "" {
		return nil, errors.New("parameter resourceGroupName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{resourceGroupName}", url.PathEscape(resourceGroupName))
	if resourceName == "" {
		return nil, errors.New("parameter resourceName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{resourceName}", url.PathEscape(resourceName))
	req, err := runtime.NewRequest(ctx, http.MethodPost, runtime.JoinPaths(client.ep, urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("api-version", "2021-07-01")
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header.Set("Accept", "application/json")
	return req, nil
}

// listKeysHandleResponse handles the ListKeys response.
func (client *IotHubResourceClient) listKeysHandleResponse(resp *http.Response) (IotHubResourceListKeysResponse, error) {
	result := IotHubResourceListKeysResponse{RawResponse: resp}
	if err := runtime.UnmarshalAsJSON(resp, &result.SharedAccessSignatureAuthorizationRuleListResult); err != nil {
		return IotHubResourceListKeysResponse{}, err
	}
	return result, nil
}

// listKeysHandleError handles the ListKeys error response.
func (client *IotHubResourceClient) listKeysHandleError(resp *http.Response) error {
	body, err := runtime.Payload(resp)
	if err != nil {
		return runtime.NewResponseError(err, resp)
	}
	errType := ErrorDetails{raw: string(body)}
	if err := runtime.UnmarshalAsJSON(resp, &errType); err != nil {
		return runtime.NewResponseError(fmt.Errorf("%s\n%s", string(body), err), resp)
	}
	return runtime.NewResponseError(&errType, resp)
}

// TestAllRoutes - Test all routes configured in this Iot Hub
// If the operation fails it returns the *ErrorDetails error type.
func (client *IotHubResourceClient) TestAllRoutes(ctx context.Context, iotHubName string, resourceGroupName string, input TestAllRoutesInput, options *IotHubResourceTestAllRoutesOptions) (IotHubResourceTestAllRoutesResponse, error) {
	req, err := client.testAllRoutesCreateRequest(ctx, iotHubName, resourceGroupName, input, options)
	if err != nil {
		return IotHubResourceTestAllRoutesResponse{}, err
	}
	resp, err := client.pl.Do(req)
	if err != nil {
		return IotHubResourceTestAllRoutesResponse{}, err
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {
		return IotHubResourceTestAllRoutesResponse{}, client.testAllRoutesHandleError(resp)
	}
	return client.testAllRoutesHandleResponse(resp)
}

// testAllRoutesCreateRequest creates the TestAllRoutes request.
func (client *IotHubResourceClient) testAllRoutesCreateRequest(ctx context.Context, iotHubName string, resourceGroupName string, input TestAllRoutesInput, options *IotHubResourceTestAllRoutesOptions) (*policy.Request, error) {
	urlPath := "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Devices/IotHubs/{iotHubName}/routing/routes/$testall"
	if iotHubName == "" {
		return nil, errors.New("parameter iotHubName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{iotHubName}", url.PathEscape(iotHubName))
	if client.subscriptionID == "" {
		return nil, errors.New("parameter client.subscriptionID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{subscriptionId}", url.PathEscape(client.subscriptionID))
	if resourceGroupName == "" {
		return nil, errors.New("parameter resourceGroupName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{resourceGroupName}", url.PathEscape(resourceGroupName))
	req, err := runtime.NewRequest(ctx, http.MethodPost, runtime.JoinPaths(client.ep, urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("api-version", "2021-07-01")
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header.Set("Accept", "application/json")
	return req, runtime.MarshalAsJSON(req, input)
}

// testAllRoutesHandleResponse handles the TestAllRoutes response.
func (client *IotHubResourceClient) testAllRoutesHandleResponse(resp *http.Response) (IotHubResourceTestAllRoutesResponse, error) {
	result := IotHubResourceTestAllRoutesResponse{RawResponse: resp}
	if err := runtime.UnmarshalAsJSON(resp, &result.TestAllRoutesResult); err != nil {
		return IotHubResourceTestAllRoutesResponse{}, err
	}
	return result, nil
}

// testAllRoutesHandleError handles the TestAllRoutes error response.
func (client *IotHubResourceClient) testAllRoutesHandleError(resp *http.Response) error {
	body, err := runtime.Payload(resp)
	if err != nil {
		return runtime.NewResponseError(err, resp)
	}
	errType := ErrorDetails{raw: string(body)}
	if err := runtime.UnmarshalAsJSON(resp, &errType); err != nil {
		return runtime.NewResponseError(fmt.Errorf("%s\n%s", string(body), err), resp)
	}
	return runtime.NewResponseError(&errType, resp)
}

// TestRoute - Test the new route for this Iot Hub
// If the operation fails it returns the *ErrorDetails error type.
func (client *IotHubResourceClient) TestRoute(ctx context.Context, iotHubName string, resourceGroupName string, input TestRouteInput, options *IotHubResourceTestRouteOptions) (IotHubResourceTestRouteResponse, error) {
	req, err := client.testRouteCreateRequest(ctx, iotHubName, resourceGroupName, input, options)
	if err != nil {
		return IotHubResourceTestRouteResponse{}, err
	}
	resp, err := client.pl.Do(req)
	if err != nil {
		return IotHubResourceTestRouteResponse{}, err
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {
		return IotHubResourceTestRouteResponse{}, client.testRouteHandleError(resp)
	}
	return client.testRouteHandleResponse(resp)
}

// testRouteCreateRequest creates the TestRoute request.
func (client *IotHubResourceClient) testRouteCreateRequest(ctx context.Context, iotHubName string, resourceGroupName string, input TestRouteInput, options *IotHubResourceTestRouteOptions) (*policy.Request, error) {
	urlPath := "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Devices/IotHubs/{iotHubName}/routing/routes/$testnew"
	if iotHubName == "" {
		return nil, errors.New("parameter iotHubName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{iotHubName}", url.PathEscape(iotHubName))
	if client.subscriptionID == "" {
		return nil, errors.New("parameter client.subscriptionID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{subscriptionId}", url.PathEscape(client.subscriptionID))
	if resourceGroupName == "" {
		return nil, errors.New("parameter resourceGroupName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{resourceGroupName}", url.PathEscape(resourceGroupName))
	req, err := runtime.NewRequest(ctx, http.MethodPost, runtime.JoinPaths(client.ep, urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("api-version", "2021-07-01")
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header.Set("Accept", "application/json")
	return req, runtime.MarshalAsJSON(req, input)
}

// testRouteHandleResponse handles the TestRoute response.
func (client *IotHubResourceClient) testRouteHandleResponse(resp *http.Response) (IotHubResourceTestRouteResponse, error) {
	result := IotHubResourceTestRouteResponse{RawResponse: resp}
	if err := runtime.UnmarshalAsJSON(resp, &result.TestRouteResult); err != nil {
		return IotHubResourceTestRouteResponse{}, err
	}
	return result, nil
}

// testRouteHandleError handles the TestRoute error response.
func (client *IotHubResourceClient) testRouteHandleError(resp *http.Response) error {
	body, err := runtime.Payload(resp)
	if err != nil {
		return runtime.NewResponseError(err, resp)
	}
	errType := ErrorDetails{raw: string(body)}
	if err := runtime.UnmarshalAsJSON(resp, &errType); err != nil {
		return runtime.NewResponseError(fmt.Errorf("%s\n%s", string(body), err), resp)
	}
	return runtime.NewResponseError(&errType, resp)
}

// BeginUpdate - Update an existing IoT Hub tags. to update other fields use the CreateOrUpdate method
// If the operation fails it returns a generic error.
func (client *IotHubResourceClient) BeginUpdate(ctx context.Context, resourceGroupName string, resourceName string, iotHubTags TagsResource, options *IotHubResourceBeginUpdateOptions) (IotHubResourceUpdatePollerResponse, error) {
	resp, err := client.update(ctx, resourceGroupName, resourceName, iotHubTags, options)
	if err != nil {
		return IotHubResourceUpdatePollerResponse{}, err
	}
	result := IotHubResourceUpdatePollerResponse{
		RawResponse: resp,
	}
	pt, err := armruntime.NewPoller("IotHubResourceClient.Update", "", resp, client.pl, client.updateHandleError)
	if err != nil {
		return IotHubResourceUpdatePollerResponse{}, err
	}
	result.Poller = &IotHubResourceUpdatePoller{
		pt: pt,
	}
	return result, nil
}

// Update - Update an existing IoT Hub tags. to update other fields use the CreateOrUpdate method
// If the operation fails it returns a generic error.
func (client *IotHubResourceClient) update(ctx context.Context, resourceGroupName string, resourceName string, iotHubTags TagsResource, options *IotHubResourceBeginUpdateOptions) (*http.Response, error) {
	req, err := client.updateCreateRequest(ctx, resourceGroupName, resourceName, iotHubTags, options)
	if err != nil {
		return nil, err
	}
	resp, err := client.pl.Do(req)
	if err != nil {
		return nil, err
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {
		return nil, client.updateHandleError(resp)
	}
	return resp, nil
}

// updateCreateRequest creates the Update request.
func (client *IotHubResourceClient) updateCreateRequest(ctx context.Context, resourceGroupName string, resourceName string, iotHubTags TagsResource, options *IotHubResourceBeginUpdateOptions) (*policy.Request, error) {
	urlPath := "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Devices/IotHubs/{resourceName}"
	if client.subscriptionID == "" {
		return nil, errors.New("parameter client.subscriptionID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{subscriptionId}", url.PathEscape(client.subscriptionID))
	if resourceGroupName == "" {
		return nil, errors.New("parameter resourceGroupName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{resourceGroupName}", url.PathEscape(resourceGroupName))
	if resourceName == "" {
		return nil, errors.New("parameter resourceName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{resourceName}", url.PathEscape(resourceName))
	req, err := runtime.NewRequest(ctx, http.MethodPatch, runtime.JoinPaths(client.ep, urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("api-version", "2021-07-01")
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header.Set("Accept", "application/json")
	return req, runtime.MarshalAsJSON(req, iotHubTags)
}

// updateHandleError handles the Update error response.
func (client *IotHubResourceClient) updateHandleError(resp *http.Response) error {
	body, err := runtime.Payload(resp)
	if err != nil {
		return runtime.NewResponseError(err, resp)
	}
	if len(body) == 0 {
		return runtime.NewResponseError(errors.New(resp.Status), resp)
	}
	return runtime.NewResponseError(errors.New(string(body)), resp)
}
