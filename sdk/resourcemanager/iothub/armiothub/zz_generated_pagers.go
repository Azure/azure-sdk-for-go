//go:build go1.16
// +build go1.16

// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

package armiothub

import (
	"context"
	"net/http"
	"reflect"

	"github.com/Azure/azure-sdk-for-go/sdk/azcore/policy"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/runtime"
)

// IotHubResourceGetEndpointHealthPager provides operations for iterating over paged responses.
type IotHubResourceGetEndpointHealthPager struct {
	client    *IotHubResourceClient
	current   IotHubResourceGetEndpointHealthResponse
	err       error
	requester func(context.Context) (*policy.Request, error)
	advancer  func(context.Context, IotHubResourceGetEndpointHealthResponse) (*policy.Request, error)
}

// Err returns the last error encountered while paging.
func (p *IotHubResourceGetEndpointHealthPager) Err() error {
	return p.err
}

// NextPage returns true if the pager advanced to the next page.
// Returns false if there are no more pages or an error occurred.
func (p *IotHubResourceGetEndpointHealthPager) NextPage(ctx context.Context) bool {
	var req *policy.Request
	var err error
	if !reflect.ValueOf(p.current).IsZero() {
		if p.current.EndpointHealthDataListResult.NextLink == nil || len(*p.current.EndpointHealthDataListResult.NextLink) == 0 {
			return false
		}
		req, err = p.advancer(ctx, p.current)
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		p.err = err
		return false
	}
	resp, err := p.client.pl.Do(req)
	if err != nil {
		p.err = err
		return false
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {
		p.err = p.client.getEndpointHealthHandleError(resp)
		return false
	}
	result, err := p.client.getEndpointHealthHandleResponse(resp)
	if err != nil {
		p.err = err
		return false
	}
	p.current = result
	return true
}

// PageResponse returns the current IotHubResourceGetEndpointHealthResponse page.
func (p *IotHubResourceGetEndpointHealthPager) PageResponse() IotHubResourceGetEndpointHealthResponse {
	return p.current
}

// IotHubResourceGetQuotaMetricsPager provides operations for iterating over paged responses.
type IotHubResourceGetQuotaMetricsPager struct {
	client    *IotHubResourceClient
	current   IotHubResourceGetQuotaMetricsResponse
	err       error
	requester func(context.Context) (*policy.Request, error)
	advancer  func(context.Context, IotHubResourceGetQuotaMetricsResponse) (*policy.Request, error)
}

// Err returns the last error encountered while paging.
func (p *IotHubResourceGetQuotaMetricsPager) Err() error {
	return p.err
}

// NextPage returns true if the pager advanced to the next page.
// Returns false if there are no more pages or an error occurred.
func (p *IotHubResourceGetQuotaMetricsPager) NextPage(ctx context.Context) bool {
	var req *policy.Request
	var err error
	if !reflect.ValueOf(p.current).IsZero() {
		if p.current.IotHubQuotaMetricInfoListResult.NextLink == nil || len(*p.current.IotHubQuotaMetricInfoListResult.NextLink) == 0 {
			return false
		}
		req, err = p.advancer(ctx, p.current)
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		p.err = err
		return false
	}
	resp, err := p.client.pl.Do(req)
	if err != nil {
		p.err = err
		return false
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {
		p.err = p.client.getQuotaMetricsHandleError(resp)
		return false
	}
	result, err := p.client.getQuotaMetricsHandleResponse(resp)
	if err != nil {
		p.err = err
		return false
	}
	p.current = result
	return true
}

// PageResponse returns the current IotHubResourceGetQuotaMetricsResponse page.
func (p *IotHubResourceGetQuotaMetricsPager) PageResponse() IotHubResourceGetQuotaMetricsResponse {
	return p.current
}

// IotHubResourceGetValidSKUsPager provides operations for iterating over paged responses.
type IotHubResourceGetValidSKUsPager struct {
	client    *IotHubResourceClient
	current   IotHubResourceGetValidSKUsResponse
	err       error
	requester func(context.Context) (*policy.Request, error)
	advancer  func(context.Context, IotHubResourceGetValidSKUsResponse) (*policy.Request, error)
}

// Err returns the last error encountered while paging.
func (p *IotHubResourceGetValidSKUsPager) Err() error {
	return p.err
}

// NextPage returns true if the pager advanced to the next page.
// Returns false if there are no more pages or an error occurred.
func (p *IotHubResourceGetValidSKUsPager) NextPage(ctx context.Context) bool {
	var req *policy.Request
	var err error
	if !reflect.ValueOf(p.current).IsZero() {
		if p.current.IotHubSKUDescriptionListResult.NextLink == nil || len(*p.current.IotHubSKUDescriptionListResult.NextLink) == 0 {
			return false
		}
		req, err = p.advancer(ctx, p.current)
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		p.err = err
		return false
	}
	resp, err := p.client.pl.Do(req)
	if err != nil {
		p.err = err
		return false
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {
		p.err = p.client.getValidSKUsHandleError(resp)
		return false
	}
	result, err := p.client.getValidSKUsHandleResponse(resp)
	if err != nil {
		p.err = err
		return false
	}
	p.current = result
	return true
}

// PageResponse returns the current IotHubResourceGetValidSKUsResponse page.
func (p *IotHubResourceGetValidSKUsPager) PageResponse() IotHubResourceGetValidSKUsResponse {
	return p.current
}

// IotHubResourceListByResourceGroupPager provides operations for iterating over paged responses.
type IotHubResourceListByResourceGroupPager struct {
	client    *IotHubResourceClient
	current   IotHubResourceListByResourceGroupResponse
	err       error
	requester func(context.Context) (*policy.Request, error)
	advancer  func(context.Context, IotHubResourceListByResourceGroupResponse) (*policy.Request, error)
}

// Err returns the last error encountered while paging.
func (p *IotHubResourceListByResourceGroupPager) Err() error {
	return p.err
}

// NextPage returns true if the pager advanced to the next page.
// Returns false if there are no more pages or an error occurred.
func (p *IotHubResourceListByResourceGroupPager) NextPage(ctx context.Context) bool {
	var req *policy.Request
	var err error
	if !reflect.ValueOf(p.current).IsZero() {
		if p.current.IotHubDescriptionListResult.NextLink == nil || len(*p.current.IotHubDescriptionListResult.NextLink) == 0 {
			return false
		}
		req, err = p.advancer(ctx, p.current)
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		p.err = err
		return false
	}
	resp, err := p.client.pl.Do(req)
	if err != nil {
		p.err = err
		return false
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {
		p.err = p.client.listByResourceGroupHandleError(resp)
		return false
	}
	result, err := p.client.listByResourceGroupHandleResponse(resp)
	if err != nil {
		p.err = err
		return false
	}
	p.current = result
	return true
}

// PageResponse returns the current IotHubResourceListByResourceGroupResponse page.
func (p *IotHubResourceListByResourceGroupPager) PageResponse() IotHubResourceListByResourceGroupResponse {
	return p.current
}

// IotHubResourceListBySubscriptionPager provides operations for iterating over paged responses.
type IotHubResourceListBySubscriptionPager struct {
	client    *IotHubResourceClient
	current   IotHubResourceListBySubscriptionResponse
	err       error
	requester func(context.Context) (*policy.Request, error)
	advancer  func(context.Context, IotHubResourceListBySubscriptionResponse) (*policy.Request, error)
}

// Err returns the last error encountered while paging.
func (p *IotHubResourceListBySubscriptionPager) Err() error {
	return p.err
}

// NextPage returns true if the pager advanced to the next page.
// Returns false if there are no more pages or an error occurred.
func (p *IotHubResourceListBySubscriptionPager) NextPage(ctx context.Context) bool {
	var req *policy.Request
	var err error
	if !reflect.ValueOf(p.current).IsZero() {
		if p.current.IotHubDescriptionListResult.NextLink == nil || len(*p.current.IotHubDescriptionListResult.NextLink) == 0 {
			return false
		}
		req, err = p.advancer(ctx, p.current)
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		p.err = err
		return false
	}
	resp, err := p.client.pl.Do(req)
	if err != nil {
		p.err = err
		return false
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {
		p.err = p.client.listBySubscriptionHandleError(resp)
		return false
	}
	result, err := p.client.listBySubscriptionHandleResponse(resp)
	if err != nil {
		p.err = err
		return false
	}
	p.current = result
	return true
}

// PageResponse returns the current IotHubResourceListBySubscriptionResponse page.
func (p *IotHubResourceListBySubscriptionPager) PageResponse() IotHubResourceListBySubscriptionResponse {
	return p.current
}

// IotHubResourceListEventHubConsumerGroupsPager provides operations for iterating over paged responses.
type IotHubResourceListEventHubConsumerGroupsPager struct {
	client    *IotHubResourceClient
	current   IotHubResourceListEventHubConsumerGroupsResponse
	err       error
	requester func(context.Context) (*policy.Request, error)
	advancer  func(context.Context, IotHubResourceListEventHubConsumerGroupsResponse) (*policy.Request, error)
}

// Err returns the last error encountered while paging.
func (p *IotHubResourceListEventHubConsumerGroupsPager) Err() error {
	return p.err
}

// NextPage returns true if the pager advanced to the next page.
// Returns false if there are no more pages or an error occurred.
func (p *IotHubResourceListEventHubConsumerGroupsPager) NextPage(ctx context.Context) bool {
	var req *policy.Request
	var err error
	if !reflect.ValueOf(p.current).IsZero() {
		if p.current.EventHubConsumerGroupsListResult.NextLink == nil || len(*p.current.EventHubConsumerGroupsListResult.NextLink) == 0 {
			return false
		}
		req, err = p.advancer(ctx, p.current)
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		p.err = err
		return false
	}
	resp, err := p.client.pl.Do(req)
	if err != nil {
		p.err = err
		return false
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {
		p.err = p.client.listEventHubConsumerGroupsHandleError(resp)
		return false
	}
	result, err := p.client.listEventHubConsumerGroupsHandleResponse(resp)
	if err != nil {
		p.err = err
		return false
	}
	p.current = result
	return true
}

// PageResponse returns the current IotHubResourceListEventHubConsumerGroupsResponse page.
func (p *IotHubResourceListEventHubConsumerGroupsPager) PageResponse() IotHubResourceListEventHubConsumerGroupsResponse {
	return p.current
}

// IotHubResourceListJobsPager provides operations for iterating over paged responses.
type IotHubResourceListJobsPager struct {
	client    *IotHubResourceClient
	current   IotHubResourceListJobsResponse
	err       error
	requester func(context.Context) (*policy.Request, error)
	advancer  func(context.Context, IotHubResourceListJobsResponse) (*policy.Request, error)
}

// Err returns the last error encountered while paging.
func (p *IotHubResourceListJobsPager) Err() error {
	return p.err
}

// NextPage returns true if the pager advanced to the next page.
// Returns false if there are no more pages or an error occurred.
func (p *IotHubResourceListJobsPager) NextPage(ctx context.Context) bool {
	var req *policy.Request
	var err error
	if !reflect.ValueOf(p.current).IsZero() {
		if p.current.JobResponseListResult.NextLink == nil || len(*p.current.JobResponseListResult.NextLink) == 0 {
			return false
		}
		req, err = p.advancer(ctx, p.current)
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		p.err = err
		return false
	}
	resp, err := p.client.pl.Do(req)
	if err != nil {
		p.err = err
		return false
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {
		p.err = p.client.listJobsHandleError(resp)
		return false
	}
	result, err := p.client.listJobsHandleResponse(resp)
	if err != nil {
		p.err = err
		return false
	}
	p.current = result
	return true
}

// PageResponse returns the current IotHubResourceListJobsResponse page.
func (p *IotHubResourceListJobsPager) PageResponse() IotHubResourceListJobsResponse {
	return p.current
}

// IotHubResourceListKeysPager provides operations for iterating over paged responses.
type IotHubResourceListKeysPager struct {
	client    *IotHubResourceClient
	current   IotHubResourceListKeysResponse
	err       error
	requester func(context.Context) (*policy.Request, error)
	advancer  func(context.Context, IotHubResourceListKeysResponse) (*policy.Request, error)
}

// Err returns the last error encountered while paging.
func (p *IotHubResourceListKeysPager) Err() error {
	return p.err
}

// NextPage returns true if the pager advanced to the next page.
// Returns false if there are no more pages or an error occurred.
func (p *IotHubResourceListKeysPager) NextPage(ctx context.Context) bool {
	var req *policy.Request
	var err error
	if !reflect.ValueOf(p.current).IsZero() {
		if p.current.SharedAccessSignatureAuthorizationRuleListResult.NextLink == nil || len(*p.current.SharedAccessSignatureAuthorizationRuleListResult.NextLink) == 0 {
			return false
		}
		req, err = p.advancer(ctx, p.current)
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		p.err = err
		return false
	}
	resp, err := p.client.pl.Do(req)
	if err != nil {
		p.err = err
		return false
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {
		p.err = p.client.listKeysHandleError(resp)
		return false
	}
	result, err := p.client.listKeysHandleResponse(resp)
	if err != nil {
		p.err = err
		return false
	}
	p.current = result
	return true
}

// PageResponse returns the current IotHubResourceListKeysResponse page.
func (p *IotHubResourceListKeysPager) PageResponse() IotHubResourceListKeysResponse {
	return p.current
}

// OperationsListPager provides operations for iterating over paged responses.
type OperationsListPager struct {
	client    *OperationsClient
	current   OperationsListResponse
	err       error
	requester func(context.Context) (*policy.Request, error)
	advancer  func(context.Context, OperationsListResponse) (*policy.Request, error)
}

// Err returns the last error encountered while paging.
func (p *OperationsListPager) Err() error {
	return p.err
}

// NextPage returns true if the pager advanced to the next page.
// Returns false if there are no more pages or an error occurred.
func (p *OperationsListPager) NextPage(ctx context.Context) bool {
	var req *policy.Request
	var err error
	if !reflect.ValueOf(p.current).IsZero() {
		if p.current.OperationListResult.NextLink == nil || len(*p.current.OperationListResult.NextLink) == 0 {
			return false
		}
		req, err = p.advancer(ctx, p.current)
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		p.err = err
		return false
	}
	resp, err := p.client.pl.Do(req)
	if err != nil {
		p.err = err
		return false
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {
		p.err = p.client.listHandleError(resp)
		return false
	}
	result, err := p.client.listHandleResponse(resp)
	if err != nil {
		p.err = err
		return false
	}
	p.current = result
	return true
}

// PageResponse returns the current OperationsListResponse page.
func (p *OperationsListPager) PageResponse() OperationsListResponse {
	return p.current
}
