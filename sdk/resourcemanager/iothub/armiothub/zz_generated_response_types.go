//go:build go1.16
// +build go1.16

// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

package armiothub

import (
	"context"
	armruntime "github.com/Azure/azure-sdk-for-go/sdk/azcore/arm/runtime"
	"net/http"
	"time"
)

// CertificatesClientCreateOrUpdateResponse contains the response from method CertificatesClient.CreateOrUpdate.
type CertificatesClientCreateOrUpdateResponse struct {
	CertificatesClientCreateOrUpdateResult
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// CertificatesClientCreateOrUpdateResult contains the result from method CertificatesClient.CreateOrUpdate.
type CertificatesClientCreateOrUpdateResult struct {
	CertificateDescription
}

// CertificatesClientDeleteResponse contains the response from method CertificatesClient.Delete.
type CertificatesClientDeleteResponse struct {
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// CertificatesClientGenerateVerificationCodeResponse contains the response from method CertificatesClient.GenerateVerificationCode.
type CertificatesClientGenerateVerificationCodeResponse struct {
	CertificatesClientGenerateVerificationCodeResult
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// CertificatesClientGenerateVerificationCodeResult contains the result from method CertificatesClient.GenerateVerificationCode.
type CertificatesClientGenerateVerificationCodeResult struct {
	CertificateWithNonceDescription
}

// CertificatesClientGetResponse contains the response from method CertificatesClient.Get.
type CertificatesClientGetResponse struct {
	CertificatesClientGetResult
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// CertificatesClientGetResult contains the result from method CertificatesClient.Get.
type CertificatesClientGetResult struct {
	CertificateDescription
}

// CertificatesClientListByIotHubResponse contains the response from method CertificatesClient.ListByIotHub.
type CertificatesClientListByIotHubResponse struct {
	CertificatesClientListByIotHubResult
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// CertificatesClientListByIotHubResult contains the result from method CertificatesClient.ListByIotHub.
type CertificatesClientListByIotHubResult struct {
	CertificateListDescription
}

// CertificatesClientVerifyResponse contains the response from method CertificatesClient.Verify.
type CertificatesClientVerifyResponse struct {
	CertificatesClientVerifyResult
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// CertificatesClientVerifyResult contains the result from method CertificatesClient.Verify.
type CertificatesClientVerifyResult struct {
	CertificateDescription
}

// ClientManualFailoverPollerResponse contains the response from method Client.ManualFailover.
type ClientManualFailoverPollerResponse struct {
	// Poller contains an initialized poller.
	Poller *ClientManualFailoverPoller

	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// PollUntilDone will poll the service endpoint until a terminal state is reached or an error is received.
// freq: the time to wait between intervals in absence of a Retry-After header. Allowed minimum is one second.
// A good starting value is 30 seconds. Note that some resources might benefit from a different value.
func (l ClientManualFailoverPollerResponse) PollUntilDone(ctx context.Context, freq time.Duration) (ClientManualFailoverResponse, error) {
	respType := ClientManualFailoverResponse{}
	resp, err := l.Poller.pt.PollUntilDone(ctx, freq, nil)
	if err != nil {
		return respType, err
	}
	respType.RawResponse = resp
	return respType, nil
}

// Resume rehydrates a ClientManualFailoverPollerResponse from the provided client and resume token.
func (l *ClientManualFailoverPollerResponse) Resume(ctx context.Context, client *Client, token string) error {
	pt, err := armruntime.NewPollerFromResumeToken("Client.ManualFailover", token, client.pl)
	if err != nil {
		return err
	}
	poller := &ClientManualFailoverPoller{
		pt: pt,
	}
	resp, err := poller.Poll(ctx)
	if err != nil {
		return err
	}
	l.Poller = poller
	l.RawResponse = resp
	return nil
}

// ClientManualFailoverResponse contains the response from method Client.ManualFailover.
type ClientManualFailoverResponse struct {
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// OperationsClientListResponse contains the response from method OperationsClient.List.
type OperationsClientListResponse struct {
	OperationsClientListResult
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// OperationsClientListResult contains the result from method OperationsClient.List.
type OperationsClientListResult struct {
	OperationListResult
}

// PrivateEndpointConnectionsClientDeletePollerResponse contains the response from method PrivateEndpointConnectionsClient.Delete.
type PrivateEndpointConnectionsClientDeletePollerResponse struct {
	// Poller contains an initialized poller.
	Poller *PrivateEndpointConnectionsClientDeletePoller

	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// PollUntilDone will poll the service endpoint until a terminal state is reached or an error is received.
// freq: the time to wait between intervals in absence of a Retry-After header. Allowed minimum is one second.
// A good starting value is 30 seconds. Note that some resources might benefit from a different value.
func (l PrivateEndpointConnectionsClientDeletePollerResponse) PollUntilDone(ctx context.Context, freq time.Duration) (PrivateEndpointConnectionsClientDeleteResponse, error) {
	respType := PrivateEndpointConnectionsClientDeleteResponse{}
	resp, err := l.Poller.pt.PollUntilDone(ctx, freq, &respType.PrivateEndpointConnection)
	if err != nil {
		return respType, err
	}
	respType.RawResponse = resp
	return respType, nil
}

// Resume rehydrates a PrivateEndpointConnectionsClientDeletePollerResponse from the provided client and resume token.
func (l *PrivateEndpointConnectionsClientDeletePollerResponse) Resume(ctx context.Context, client *PrivateEndpointConnectionsClient, token string) error {
	pt, err := armruntime.NewPollerFromResumeToken("PrivateEndpointConnectionsClient.Delete", token, client.pl)
	if err != nil {
		return err
	}
	poller := &PrivateEndpointConnectionsClientDeletePoller{
		pt: pt,
	}
	resp, err := poller.Poll(ctx)
	if err != nil {
		return err
	}
	l.Poller = poller
	l.RawResponse = resp
	return nil
}

// PrivateEndpointConnectionsClientDeleteResponse contains the response from method PrivateEndpointConnectionsClient.Delete.
type PrivateEndpointConnectionsClientDeleteResponse struct {
	PrivateEndpointConnectionsClientDeleteResult
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// PrivateEndpointConnectionsClientDeleteResult contains the result from method PrivateEndpointConnectionsClient.Delete.
type PrivateEndpointConnectionsClientDeleteResult struct {
	PrivateEndpointConnection
}

// PrivateEndpointConnectionsClientGetResponse contains the response from method PrivateEndpointConnectionsClient.Get.
type PrivateEndpointConnectionsClientGetResponse struct {
	PrivateEndpointConnectionsClientGetResult
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// PrivateEndpointConnectionsClientGetResult contains the result from method PrivateEndpointConnectionsClient.Get.
type PrivateEndpointConnectionsClientGetResult struct {
	PrivateEndpointConnection
}

// PrivateEndpointConnectionsClientListResponse contains the response from method PrivateEndpointConnectionsClient.List.
type PrivateEndpointConnectionsClientListResponse struct {
	PrivateEndpointConnectionsClientListResult
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// PrivateEndpointConnectionsClientListResult contains the result from method PrivateEndpointConnectionsClient.List.
type PrivateEndpointConnectionsClientListResult struct {
	// The list of private endpoint connections for an IotHub
	PrivateEndpointConnectionArray []*PrivateEndpointConnection
}

// PrivateEndpointConnectionsClientUpdatePollerResponse contains the response from method PrivateEndpointConnectionsClient.Update.
type PrivateEndpointConnectionsClientUpdatePollerResponse struct {
	// Poller contains an initialized poller.
	Poller *PrivateEndpointConnectionsClientUpdatePoller

	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// PollUntilDone will poll the service endpoint until a terminal state is reached or an error is received.
// freq: the time to wait between intervals in absence of a Retry-After header. Allowed minimum is one second.
// A good starting value is 30 seconds. Note that some resources might benefit from a different value.
func (l PrivateEndpointConnectionsClientUpdatePollerResponse) PollUntilDone(ctx context.Context, freq time.Duration) (PrivateEndpointConnectionsClientUpdateResponse, error) {
	respType := PrivateEndpointConnectionsClientUpdateResponse{}
	resp, err := l.Poller.pt.PollUntilDone(ctx, freq, &respType.PrivateEndpointConnection)
	if err != nil {
		return respType, err
	}
	respType.RawResponse = resp
	return respType, nil
}

// Resume rehydrates a PrivateEndpointConnectionsClientUpdatePollerResponse from the provided client and resume token.
func (l *PrivateEndpointConnectionsClientUpdatePollerResponse) Resume(ctx context.Context, client *PrivateEndpointConnectionsClient, token string) error {
	pt, err := armruntime.NewPollerFromResumeToken("PrivateEndpointConnectionsClient.Update", token, client.pl)
	if err != nil {
		return err
	}
	poller := &PrivateEndpointConnectionsClientUpdatePoller{
		pt: pt,
	}
	resp, err := poller.Poll(ctx)
	if err != nil {
		return err
	}
	l.Poller = poller
	l.RawResponse = resp
	return nil
}

// PrivateEndpointConnectionsClientUpdateResponse contains the response from method PrivateEndpointConnectionsClient.Update.
type PrivateEndpointConnectionsClientUpdateResponse struct {
	PrivateEndpointConnectionsClientUpdateResult
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// PrivateEndpointConnectionsClientUpdateResult contains the result from method PrivateEndpointConnectionsClient.Update.
type PrivateEndpointConnectionsClientUpdateResult struct {
	PrivateEndpointConnection
}

// PrivateLinkResourcesClientGetResponse contains the response from method PrivateLinkResourcesClient.Get.
type PrivateLinkResourcesClientGetResponse struct {
	PrivateLinkResourcesClientGetResult
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// PrivateLinkResourcesClientGetResult contains the result from method PrivateLinkResourcesClient.Get.
type PrivateLinkResourcesClientGetResult struct {
	GroupIDInformation
}

// PrivateLinkResourcesClientListResponse contains the response from method PrivateLinkResourcesClient.List.
type PrivateLinkResourcesClientListResponse struct {
	PrivateLinkResourcesClientListResult
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// PrivateLinkResourcesClientListResult contains the result from method PrivateLinkResourcesClient.List.
type PrivateLinkResourcesClientListResult struct {
	PrivateLinkResources
}

// ResourceClientCheckNameAvailabilityResponse contains the response from method ResourceClient.CheckNameAvailability.
type ResourceClientCheckNameAvailabilityResponse struct {
	ResourceClientCheckNameAvailabilityResult
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// ResourceClientCheckNameAvailabilityResult contains the result from method ResourceClient.CheckNameAvailability.
type ResourceClientCheckNameAvailabilityResult struct {
	NameAvailabilityInfo
}

// ResourceClientCreateEventHubConsumerGroupResponse contains the response from method ResourceClient.CreateEventHubConsumerGroup.
type ResourceClientCreateEventHubConsumerGroupResponse struct {
	ResourceClientCreateEventHubConsumerGroupResult
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// ResourceClientCreateEventHubConsumerGroupResult contains the result from method ResourceClient.CreateEventHubConsumerGroup.
type ResourceClientCreateEventHubConsumerGroupResult struct {
	EventHubConsumerGroupInfo
}

// ResourceClientCreateOrUpdatePollerResponse contains the response from method ResourceClient.CreateOrUpdate.
type ResourceClientCreateOrUpdatePollerResponse struct {
	// Poller contains an initialized poller.
	Poller *ResourceClientCreateOrUpdatePoller

	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// PollUntilDone will poll the service endpoint until a terminal state is reached or an error is received.
// freq: the time to wait between intervals in absence of a Retry-After header. Allowed minimum is one second.
// A good starting value is 30 seconds. Note that some resources might benefit from a different value.
func (l ResourceClientCreateOrUpdatePollerResponse) PollUntilDone(ctx context.Context, freq time.Duration) (ResourceClientCreateOrUpdateResponse, error) {
	respType := ResourceClientCreateOrUpdateResponse{}
	resp, err := l.Poller.pt.PollUntilDone(ctx, freq, &respType.Description)
	if err != nil {
		return respType, err
	}
	respType.RawResponse = resp
	return respType, nil
}

// Resume rehydrates a ResourceClientCreateOrUpdatePollerResponse from the provided client and resume token.
func (l *ResourceClientCreateOrUpdatePollerResponse) Resume(ctx context.Context, client *ResourceClient, token string) error {
	pt, err := armruntime.NewPollerFromResumeToken("ResourceClient.CreateOrUpdate", token, client.pl)
	if err != nil {
		return err
	}
	poller := &ResourceClientCreateOrUpdatePoller{
		pt: pt,
	}
	resp, err := poller.Poll(ctx)
	if err != nil {
		return err
	}
	l.Poller = poller
	l.RawResponse = resp
	return nil
}

// ResourceClientCreateOrUpdateResponse contains the response from method ResourceClient.CreateOrUpdate.
type ResourceClientCreateOrUpdateResponse struct {
	ResourceClientCreateOrUpdateResult
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// ResourceClientCreateOrUpdateResult contains the result from method ResourceClient.CreateOrUpdate.
type ResourceClientCreateOrUpdateResult struct {
	Description
}

// ResourceClientDeleteEventHubConsumerGroupResponse contains the response from method ResourceClient.DeleteEventHubConsumerGroup.
type ResourceClientDeleteEventHubConsumerGroupResponse struct {
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// ResourceClientDeletePollerResponse contains the response from method ResourceClient.Delete.
type ResourceClientDeletePollerResponse struct {
	// Poller contains an initialized poller.
	Poller *ResourceClientDeletePoller

	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// PollUntilDone will poll the service endpoint until a terminal state is reached or an error is received.
// freq: the time to wait between intervals in absence of a Retry-After header. Allowed minimum is one second.
// A good starting value is 30 seconds. Note that some resources might benefit from a different value.
func (l ResourceClientDeletePollerResponse) PollUntilDone(ctx context.Context, freq time.Duration) (ResourceClientDeleteResponse, error) {
	respType := ResourceClientDeleteResponse{}
	resp, err := l.Poller.pt.PollUntilDone(ctx, freq, &respType.Description)
	if err != nil {
		return respType, err
	}
	respType.RawResponse = resp
	return respType, nil
}

// Resume rehydrates a ResourceClientDeletePollerResponse from the provided client and resume token.
func (l *ResourceClientDeletePollerResponse) Resume(ctx context.Context, client *ResourceClient, token string) error {
	pt, err := armruntime.NewPollerFromResumeToken("ResourceClient.Delete", token, client.pl)
	if err != nil {
		return err
	}
	poller := &ResourceClientDeletePoller{
		pt: pt,
	}
	resp, err := poller.Poll(ctx)
	if err != nil {
		return err
	}
	l.Poller = poller
	l.RawResponse = resp
	return nil
}

// ResourceClientDeleteResponse contains the response from method ResourceClient.Delete.
type ResourceClientDeleteResponse struct {
	ResourceClientDeleteResult
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// ResourceClientDeleteResult contains the result from method ResourceClient.Delete.
type ResourceClientDeleteResult struct {
	Description
}

// ResourceClientExportDevicesResponse contains the response from method ResourceClient.ExportDevices.
type ResourceClientExportDevicesResponse struct {
	ResourceClientExportDevicesResult
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// ResourceClientExportDevicesResult contains the result from method ResourceClient.ExportDevices.
type ResourceClientExportDevicesResult struct {
	JobResponse
}

// ResourceClientGetEndpointHealthResponse contains the response from method ResourceClient.GetEndpointHealth.
type ResourceClientGetEndpointHealthResponse struct {
	ResourceClientGetEndpointHealthResult
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// ResourceClientGetEndpointHealthResult contains the result from method ResourceClient.GetEndpointHealth.
type ResourceClientGetEndpointHealthResult struct {
	EndpointHealthDataListResult
}

// ResourceClientGetEventHubConsumerGroupResponse contains the response from method ResourceClient.GetEventHubConsumerGroup.
type ResourceClientGetEventHubConsumerGroupResponse struct {
	ResourceClientGetEventHubConsumerGroupResult
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// ResourceClientGetEventHubConsumerGroupResult contains the result from method ResourceClient.GetEventHubConsumerGroup.
type ResourceClientGetEventHubConsumerGroupResult struct {
	EventHubConsumerGroupInfo
}

// ResourceClientGetJobResponse contains the response from method ResourceClient.GetJob.
type ResourceClientGetJobResponse struct {
	ResourceClientGetJobResult
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// ResourceClientGetJobResult contains the result from method ResourceClient.GetJob.
type ResourceClientGetJobResult struct {
	JobResponse
}

// ResourceClientGetKeysForKeyNameResponse contains the response from method ResourceClient.GetKeysForKeyName.
type ResourceClientGetKeysForKeyNameResponse struct {
	ResourceClientGetKeysForKeyNameResult
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// ResourceClientGetKeysForKeyNameResult contains the result from method ResourceClient.GetKeysForKeyName.
type ResourceClientGetKeysForKeyNameResult struct {
	SharedAccessSignatureAuthorizationRule
}

// ResourceClientGetQuotaMetricsResponse contains the response from method ResourceClient.GetQuotaMetrics.
type ResourceClientGetQuotaMetricsResponse struct {
	ResourceClientGetQuotaMetricsResult
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// ResourceClientGetQuotaMetricsResult contains the result from method ResourceClient.GetQuotaMetrics.
type ResourceClientGetQuotaMetricsResult struct {
	QuotaMetricInfoListResult
}

// ResourceClientGetResponse contains the response from method ResourceClient.Get.
type ResourceClientGetResponse struct {
	ResourceClientGetResult
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// ResourceClientGetResult contains the result from method ResourceClient.Get.
type ResourceClientGetResult struct {
	Description
}

// ResourceClientGetStatsResponse contains the response from method ResourceClient.GetStats.
type ResourceClientGetStatsResponse struct {
	ResourceClientGetStatsResult
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// ResourceClientGetStatsResult contains the result from method ResourceClient.GetStats.
type ResourceClientGetStatsResult struct {
	RegistryStatistics
}

// ResourceClientGetValidSKUsResponse contains the response from method ResourceClient.GetValidSKUs.
type ResourceClientGetValidSKUsResponse struct {
	ResourceClientGetValidSKUsResult
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// ResourceClientGetValidSKUsResult contains the result from method ResourceClient.GetValidSKUs.
type ResourceClientGetValidSKUsResult struct {
	SKUDescriptionListResult
}

// ResourceClientImportDevicesResponse contains the response from method ResourceClient.ImportDevices.
type ResourceClientImportDevicesResponse struct {
	ResourceClientImportDevicesResult
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// ResourceClientImportDevicesResult contains the result from method ResourceClient.ImportDevices.
type ResourceClientImportDevicesResult struct {
	JobResponse
}

// ResourceClientListByResourceGroupResponse contains the response from method ResourceClient.ListByResourceGroup.
type ResourceClientListByResourceGroupResponse struct {
	ResourceClientListByResourceGroupResult
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// ResourceClientListByResourceGroupResult contains the result from method ResourceClient.ListByResourceGroup.
type ResourceClientListByResourceGroupResult struct {
	DescriptionListResult
}

// ResourceClientListBySubscriptionResponse contains the response from method ResourceClient.ListBySubscription.
type ResourceClientListBySubscriptionResponse struct {
	ResourceClientListBySubscriptionResult
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// ResourceClientListBySubscriptionResult contains the result from method ResourceClient.ListBySubscription.
type ResourceClientListBySubscriptionResult struct {
	DescriptionListResult
}

// ResourceClientListEventHubConsumerGroupsResponse contains the response from method ResourceClient.ListEventHubConsumerGroups.
type ResourceClientListEventHubConsumerGroupsResponse struct {
	ResourceClientListEventHubConsumerGroupsResult
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// ResourceClientListEventHubConsumerGroupsResult contains the result from method ResourceClient.ListEventHubConsumerGroups.
type ResourceClientListEventHubConsumerGroupsResult struct {
	EventHubConsumerGroupsListResult
}

// ResourceClientListJobsResponse contains the response from method ResourceClient.ListJobs.
type ResourceClientListJobsResponse struct {
	ResourceClientListJobsResult
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// ResourceClientListJobsResult contains the result from method ResourceClient.ListJobs.
type ResourceClientListJobsResult struct {
	JobResponseListResult
}

// ResourceClientListKeysResponse contains the response from method ResourceClient.ListKeys.
type ResourceClientListKeysResponse struct {
	ResourceClientListKeysResult
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// ResourceClientListKeysResult contains the result from method ResourceClient.ListKeys.
type ResourceClientListKeysResult struct {
	SharedAccessSignatureAuthorizationRuleListResult
}

// ResourceClientTestAllRoutesResponse contains the response from method ResourceClient.TestAllRoutes.
type ResourceClientTestAllRoutesResponse struct {
	ResourceClientTestAllRoutesResult
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// ResourceClientTestAllRoutesResult contains the result from method ResourceClient.TestAllRoutes.
type ResourceClientTestAllRoutesResult struct {
	TestAllRoutesResult
}

// ResourceClientTestRouteResponse contains the response from method ResourceClient.TestRoute.
type ResourceClientTestRouteResponse struct {
	ResourceClientTestRouteResult
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// ResourceClientTestRouteResult contains the result from method ResourceClient.TestRoute.
type ResourceClientTestRouteResult struct {
	TestRouteResult
}

// ResourceClientUpdatePollerResponse contains the response from method ResourceClient.Update.
type ResourceClientUpdatePollerResponse struct {
	// Poller contains an initialized poller.
	Poller *ResourceClientUpdatePoller

	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// PollUntilDone will poll the service endpoint until a terminal state is reached or an error is received.
// freq: the time to wait between intervals in absence of a Retry-After header. Allowed minimum is one second.
// A good starting value is 30 seconds. Note that some resources might benefit from a different value.
func (l ResourceClientUpdatePollerResponse) PollUntilDone(ctx context.Context, freq time.Duration) (ResourceClientUpdateResponse, error) {
	respType := ResourceClientUpdateResponse{}
	resp, err := l.Poller.pt.PollUntilDone(ctx, freq, &respType.Description)
	if err != nil {
		return respType, err
	}
	respType.RawResponse = resp
	return respType, nil
}

// Resume rehydrates a ResourceClientUpdatePollerResponse from the provided client and resume token.
func (l *ResourceClientUpdatePollerResponse) Resume(ctx context.Context, client *ResourceClient, token string) error {
	pt, err := armruntime.NewPollerFromResumeToken("ResourceClient.Update", token, client.pl)
	if err != nil {
		return err
	}
	poller := &ResourceClientUpdatePoller{
		pt: pt,
	}
	resp, err := poller.Poll(ctx)
	if err != nil {
		return err
	}
	l.Poller = poller
	l.RawResponse = resp
	return nil
}

// ResourceClientUpdateResponse contains the response from method ResourceClient.Update.
type ResourceClientUpdateResponse struct {
	ResourceClientUpdateResult
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// ResourceClientUpdateResult contains the result from method ResourceClient.Update.
type ResourceClientUpdateResult struct {
	Description
}

// ResourceProviderCommonClientGetSubscriptionQuotaResponse contains the response from method ResourceProviderCommonClient.GetSubscriptionQuota.
type ResourceProviderCommonClientGetSubscriptionQuotaResponse struct {
	ResourceProviderCommonClientGetSubscriptionQuotaResult
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// ResourceProviderCommonClientGetSubscriptionQuotaResult contains the result from method ResourceProviderCommonClient.GetSubscriptionQuota.
type ResourceProviderCommonClientGetSubscriptionQuotaResult struct {
	UserSubscriptionQuotaListResult
}
