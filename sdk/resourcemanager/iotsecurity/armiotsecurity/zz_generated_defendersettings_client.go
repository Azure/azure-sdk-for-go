//go:build go1.16
// +build go1.16

// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

package armiotsecurity

import (
	"context"
	"errors"
	"fmt"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/arm"
	armruntime "github.com/Azure/azure-sdk-for-go/sdk/azcore/arm/runtime"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/policy"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/runtime"
	"net/http"
	"net/url"
	"strings"
)

// DefenderSettingsClient contains the methods for the DefenderSettings group.
// Don't use this type directly, use NewDefenderSettingsClient() instead.
type DefenderSettingsClient struct {
	ep             string
	pl             runtime.Pipeline
	subscriptionID string
}

// NewDefenderSettingsClient creates a new instance of DefenderSettingsClient with the specified values.
func NewDefenderSettingsClient(subscriptionID string, credential azcore.TokenCredential, options *arm.ClientOptions) *DefenderSettingsClient {
	cp := arm.ClientOptions{}
	if options != nil {
		cp = *options
	}
	if len(cp.Host) == 0 {
		cp.Host = arm.AzurePublicCloud
	}
	return &DefenderSettingsClient{subscriptionID: subscriptionID, ep: string(cp.Host), pl: armruntime.NewPipeline(module, version, credential, &cp)}
}

// CreateOrUpdate - Create or update IoT Defender settings
// If the operation fails it returns the *ErrorResponse error type.
func (client *DefenderSettingsClient) CreateOrUpdate(ctx context.Context, defenderSettingsModel DefenderSettingsModel, options *DefenderSettingsCreateOrUpdateOptions) (DefenderSettingsCreateOrUpdateResponse, error) {
	req, err := client.createOrUpdateCreateRequest(ctx, defenderSettingsModel, options)
	if err != nil {
		return DefenderSettingsCreateOrUpdateResponse{}, err
	}
	resp, err := client.pl.Do(req)
	if err != nil {
		return DefenderSettingsCreateOrUpdateResponse{}, err
	}
	if !runtime.HasStatusCode(resp, http.StatusOK, http.StatusCreated) {
		return DefenderSettingsCreateOrUpdateResponse{}, client.createOrUpdateHandleError(resp)
	}
	return client.createOrUpdateHandleResponse(resp)
}

// createOrUpdateCreateRequest creates the CreateOrUpdate request.
func (client *DefenderSettingsClient) createOrUpdateCreateRequest(ctx context.Context, defenderSettingsModel DefenderSettingsModel, options *DefenderSettingsCreateOrUpdateOptions) (*policy.Request, error) {
	urlPath := "/subscriptions/{subscriptionId}/providers/Microsoft.IoTSecurity/defenderSettings/default"
	if client.subscriptionID == "" {
		return nil, errors.New("parameter client.subscriptionID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{subscriptionId}", url.PathEscape(client.subscriptionID))
	req, err := runtime.NewRequest(ctx, http.MethodPut, runtime.JoinPaths(client.ep, urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("api-version", "2021-02-01-preview")
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header.Set("Accept", "application/json")
	return req, runtime.MarshalAsJSON(req, defenderSettingsModel)
}

// createOrUpdateHandleResponse handles the CreateOrUpdate response.
func (client *DefenderSettingsClient) createOrUpdateHandleResponse(resp *http.Response) (DefenderSettingsCreateOrUpdateResponse, error) {
	result := DefenderSettingsCreateOrUpdateResponse{RawResponse: resp}
	if err := runtime.UnmarshalAsJSON(resp, &result.DefenderSettingsModel); err != nil {
		return DefenderSettingsCreateOrUpdateResponse{}, runtime.NewResponseError(err, resp)
	}
	return result, nil
}

// createOrUpdateHandleError handles the CreateOrUpdate error response.
func (client *DefenderSettingsClient) createOrUpdateHandleError(resp *http.Response) error {
	body, err := runtime.Payload(resp)
	if err != nil {
		return runtime.NewResponseError(err, resp)
	}
	errType := ErrorResponse{raw: string(body)}
	if err := runtime.UnmarshalAsJSON(resp, &errType); err != nil {
		return runtime.NewResponseError(fmt.Errorf("%s\n%s", string(body), err), resp)
	}
	return runtime.NewResponseError(&errType, resp)
}

// Delete - Delete IoT Defender settings
// If the operation fails it returns the *ErrorResponse error type.
func (client *DefenderSettingsClient) Delete(ctx context.Context, options *DefenderSettingsDeleteOptions) (DefenderSettingsDeleteResponse, error) {
	req, err := client.deleteCreateRequest(ctx, options)
	if err != nil {
		return DefenderSettingsDeleteResponse{}, err
	}
	resp, err := client.pl.Do(req)
	if err != nil {
		return DefenderSettingsDeleteResponse{}, err
	}
	if !runtime.HasStatusCode(resp, http.StatusOK, http.StatusNoContent) {
		return DefenderSettingsDeleteResponse{}, client.deleteHandleError(resp)
	}
	return DefenderSettingsDeleteResponse{RawResponse: resp}, nil
}

// deleteCreateRequest creates the Delete request.
func (client *DefenderSettingsClient) deleteCreateRequest(ctx context.Context, options *DefenderSettingsDeleteOptions) (*policy.Request, error) {
	urlPath := "/subscriptions/{subscriptionId}/providers/Microsoft.IoTSecurity/defenderSettings/default"
	if client.subscriptionID == "" {
		return nil, errors.New("parameter client.subscriptionID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{subscriptionId}", url.PathEscape(client.subscriptionID))
	req, err := runtime.NewRequest(ctx, http.MethodDelete, runtime.JoinPaths(client.ep, urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("api-version", "2021-02-01-preview")
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header.Set("Accept", "application/json")
	return req, nil
}

// deleteHandleError handles the Delete error response.
func (client *DefenderSettingsClient) deleteHandleError(resp *http.Response) error {
	body, err := runtime.Payload(resp)
	if err != nil {
		return runtime.NewResponseError(err, resp)
	}
	errType := ErrorResponse{raw: string(body)}
	if err := runtime.UnmarshalAsJSON(resp, &errType); err != nil {
		return runtime.NewResponseError(fmt.Errorf("%s\n%s", string(body), err), resp)
	}
	return runtime.NewResponseError(&errType, resp)
}

// DownloadManagerActivation - Download manager activation data defined for this subscription
// If the operation fails it returns a generic error.
func (client *DefenderSettingsClient) DownloadManagerActivation(ctx context.Context, options *DefenderSettingsDownloadManagerActivationOptions) (DefenderSettingsDownloadManagerActivationResponse, error) {
	req, err := client.downloadManagerActivationCreateRequest(ctx, options)
	if err != nil {
		return DefenderSettingsDownloadManagerActivationResponse{}, err
	}
	resp, err := client.pl.Do(req)
	if err != nil {
		return DefenderSettingsDownloadManagerActivationResponse{}, err
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {
		return DefenderSettingsDownloadManagerActivationResponse{}, client.downloadManagerActivationHandleError(resp)
	}
	return DefenderSettingsDownloadManagerActivationResponse{RawResponse: resp}, nil
}

// downloadManagerActivationCreateRequest creates the DownloadManagerActivation request.
func (client *DefenderSettingsClient) downloadManagerActivationCreateRequest(ctx context.Context, options *DefenderSettingsDownloadManagerActivationOptions) (*policy.Request, error) {
	urlPath := "/subscriptions/{subscriptionId}/providers/Microsoft.IoTSecurity/defenderSettings/default/downloadManagerActivation"
	if client.subscriptionID == "" {
		return nil, errors.New("parameter client.subscriptionID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{subscriptionId}", url.PathEscape(client.subscriptionID))
	req, err := runtime.NewRequest(ctx, http.MethodPost, runtime.JoinPaths(client.ep, urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("api-version", "2021-02-01-preview")
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.SkipBodyDownload()
	req.Raw().Header.Set("Accept", "application/zip")
	return req, nil
}

// downloadManagerActivationHandleError handles the DownloadManagerActivation error response.
func (client *DefenderSettingsClient) downloadManagerActivationHandleError(resp *http.Response) error {
	body, err := runtime.Payload(resp)
	if err != nil {
		return runtime.NewResponseError(err, resp)
	}
	if len(body) == 0 {
		return runtime.NewResponseError(errors.New(resp.Status), resp)
	}
	return runtime.NewResponseError(errors.New(string(body)), resp)
}

// Get - Get IoT Defender Settings
// If the operation fails it returns the *ErrorResponse error type.
func (client *DefenderSettingsClient) Get(ctx context.Context, options *DefenderSettingsGetOptions) (DefenderSettingsGetResponse, error) {
	req, err := client.getCreateRequest(ctx, options)
	if err != nil {
		return DefenderSettingsGetResponse{}, err
	}
	resp, err := client.pl.Do(req)
	if err != nil {
		return DefenderSettingsGetResponse{}, err
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {
		return DefenderSettingsGetResponse{}, client.getHandleError(resp)
	}
	return client.getHandleResponse(resp)
}

// getCreateRequest creates the Get request.
func (client *DefenderSettingsClient) getCreateRequest(ctx context.Context, options *DefenderSettingsGetOptions) (*policy.Request, error) {
	urlPath := "/subscriptions/{subscriptionId}/providers/Microsoft.IoTSecurity/defenderSettings/default"
	if client.subscriptionID == "" {
		return nil, errors.New("parameter client.subscriptionID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{subscriptionId}", url.PathEscape(client.subscriptionID))
	req, err := runtime.NewRequest(ctx, http.MethodGet, runtime.JoinPaths(client.ep, urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("api-version", "2021-02-01-preview")
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header.Set("Accept", "application/json")
	return req, nil
}

// getHandleResponse handles the Get response.
func (client *DefenderSettingsClient) getHandleResponse(resp *http.Response) (DefenderSettingsGetResponse, error) {
	result := DefenderSettingsGetResponse{RawResponse: resp}
	if err := runtime.UnmarshalAsJSON(resp, &result.DefenderSettingsModel); err != nil {
		return DefenderSettingsGetResponse{}, runtime.NewResponseError(err, resp)
	}
	return result, nil
}

// getHandleError handles the Get error response.
func (client *DefenderSettingsClient) getHandleError(resp *http.Response) error {
	body, err := runtime.Payload(resp)
	if err != nil {
		return runtime.NewResponseError(err, resp)
	}
	errType := ErrorResponse{raw: string(body)}
	if err := runtime.UnmarshalAsJSON(resp, &errType); err != nil {
		return runtime.NewResponseError(fmt.Errorf("%s\n%s", string(body), err), resp)
	}
	return runtime.NewResponseError(&errType, resp)
}

// List - List IoT Defender Settings
// If the operation fails it returns the *ErrorResponse error type.
func (client *DefenderSettingsClient) List(ctx context.Context, options *DefenderSettingsListOptions) (DefenderSettingsListResponse, error) {
	req, err := client.listCreateRequest(ctx, options)
	if err != nil {
		return DefenderSettingsListResponse{}, err
	}
	resp, err := client.pl.Do(req)
	if err != nil {
		return DefenderSettingsListResponse{}, err
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {
		return DefenderSettingsListResponse{}, client.listHandleError(resp)
	}
	return client.listHandleResponse(resp)
}

// listCreateRequest creates the List request.
func (client *DefenderSettingsClient) listCreateRequest(ctx context.Context, options *DefenderSettingsListOptions) (*policy.Request, error) {
	urlPath := "/subscriptions/{subscriptionId}/providers/Microsoft.IoTSecurity/defenderSettings"
	if client.subscriptionID == "" {
		return nil, errors.New("parameter client.subscriptionID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{subscriptionId}", url.PathEscape(client.subscriptionID))
	req, err := runtime.NewRequest(ctx, http.MethodGet, runtime.JoinPaths(client.ep, urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("api-version", "2021-02-01-preview")
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header.Set("Accept", "application/json")
	return req, nil
}

// listHandleResponse handles the List response.
func (client *DefenderSettingsClient) listHandleResponse(resp *http.Response) (DefenderSettingsListResponse, error) {
	result := DefenderSettingsListResponse{RawResponse: resp}
	if err := runtime.UnmarshalAsJSON(resp, &result.DefenderSettingsList); err != nil {
		return DefenderSettingsListResponse{}, runtime.NewResponseError(err, resp)
	}
	return result, nil
}

// listHandleError handles the List error response.
func (client *DefenderSettingsClient) listHandleError(resp *http.Response) error {
	body, err := runtime.Payload(resp)
	if err != nil {
		return runtime.NewResponseError(err, resp)
	}
	errType := ErrorResponse{raw: string(body)}
	if err := runtime.UnmarshalAsJSON(resp, &errType); err != nil {
		return runtime.NewResponseError(fmt.Errorf("%s\n%s", string(body), err), resp)
	}
	return runtime.NewResponseError(&errType, resp)
}

// PackageDownloads - Information about downloadable packages
// If the operation fails it returns the *ErrorResponse error type.
func (client *DefenderSettingsClient) PackageDownloads(ctx context.Context, options *DefenderSettingsPackageDownloadsOptions) (DefenderSettingsPackageDownloadsResponse, error) {
	req, err := client.packageDownloadsCreateRequest(ctx, options)
	if err != nil {
		return DefenderSettingsPackageDownloadsResponse{}, err
	}
	resp, err := client.pl.Do(req)
	if err != nil {
		return DefenderSettingsPackageDownloadsResponse{}, err
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {
		return DefenderSettingsPackageDownloadsResponse{}, client.packageDownloadsHandleError(resp)
	}
	return client.packageDownloadsHandleResponse(resp)
}

// packageDownloadsCreateRequest creates the PackageDownloads request.
func (client *DefenderSettingsClient) packageDownloadsCreateRequest(ctx context.Context, options *DefenderSettingsPackageDownloadsOptions) (*policy.Request, error) {
	urlPath := "/subscriptions/{subscriptionId}/providers/Microsoft.IoTSecurity/defenderSettings/default/packageDownloads"
	if client.subscriptionID == "" {
		return nil, errors.New("parameter client.subscriptionID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{subscriptionId}", url.PathEscape(client.subscriptionID))
	req, err := runtime.NewRequest(ctx, http.MethodPost, runtime.JoinPaths(client.ep, urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("api-version", "2021-02-01-preview")
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header.Set("Accept", "application/json")
	return req, nil
}

// packageDownloadsHandleResponse handles the PackageDownloads response.
func (client *DefenderSettingsClient) packageDownloadsHandleResponse(resp *http.Response) (DefenderSettingsPackageDownloadsResponse, error) {
	result := DefenderSettingsPackageDownloadsResponse{RawResponse: resp}
	if err := runtime.UnmarshalAsJSON(resp, &result.PackageDownloads); err != nil {
		return DefenderSettingsPackageDownloadsResponse{}, runtime.NewResponseError(err, resp)
	}
	return result, nil
}

// packageDownloadsHandleError handles the PackageDownloads error response.
func (client *DefenderSettingsClient) packageDownloadsHandleError(resp *http.Response) error {
	body, err := runtime.Payload(resp)
	if err != nil {
		return runtime.NewResponseError(err, resp)
	}
	errType := ErrorResponse{raw: string(body)}
	if err := runtime.UnmarshalAsJSON(resp, &errType); err != nil {
		return runtime.NewResponseError(fmt.Errorf("%s\n%s", string(body), err), resp)
	}
	return runtime.NewResponseError(&errType, resp)
}
