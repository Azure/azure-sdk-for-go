//go:build go1.16
// +build go1.16

// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

package armiotsecurity

import (
	"context"
	"errors"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/arm"
	armruntime "github.com/Azure/azure-sdk-for-go/sdk/azcore/arm/runtime"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/policy"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/runtime"
	"net/http"
	"net/url"
	"strings"
)

// IotAlertsClient contains the methods for the IotAlerts group.
// Don't use this type directly, use NewIotAlertsClient() instead.
type IotAlertsClient struct {
	host                string
	subscriptionID      string
	iotDefenderLocation string
	pl                  runtime.Pipeline
}

// NewIotAlertsClient creates a new instance of IotAlertsClient with the specified values.
// subscriptionID - The ID of the target subscription.
// iotDefenderLocation - Defender for IoT location
// credential - used to authorize requests. Usually a credential from azidentity.
// options - pass nil to accept the default values.
func NewIotAlertsClient(subscriptionID string, iotDefenderLocation string, credential azcore.TokenCredential, options *arm.ClientOptions) *IotAlertsClient {
	cp := arm.ClientOptions{}
	if options != nil {
		cp = *options
	}
	if len(cp.Endpoint) == 0 {
		cp.Endpoint = arm.AzurePublicCloud
	}
	client := &IotAlertsClient{
		subscriptionID:      subscriptionID,
		iotDefenderLocation: iotDefenderLocation,
		host:                string(cp.Endpoint),
		pl:                  armruntime.NewPipeline(moduleName, moduleVersion, credential, runtime.PipelineOptions{}, &cp),
	}
	return client
}

// Get - Get IoT alert
// If the operation fails it returns an *azcore.ResponseError type.
// deviceGroupName - Device group name
// alertID - Alert Id
// options - IotAlertsClientGetOptions contains the optional parameters for the IotAlertsClient.Get method.
func (client *IotAlertsClient) Get(ctx context.Context, deviceGroupName string, alertID string, options *IotAlertsClientGetOptions) (IotAlertsClientGetResponse, error) {
	req, err := client.getCreateRequest(ctx, deviceGroupName, alertID, options)
	if err != nil {
		return IotAlertsClientGetResponse{}, err
	}
	resp, err := client.pl.Do(req)
	if err != nil {
		return IotAlertsClientGetResponse{}, err
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {
		return IotAlertsClientGetResponse{}, runtime.NewResponseError(resp)
	}
	return client.getHandleResponse(resp)
}

// getCreateRequest creates the Get request.
func (client *IotAlertsClient) getCreateRequest(ctx context.Context, deviceGroupName string, alertID string, options *IotAlertsClientGetOptions) (*policy.Request, error) {
	urlPath := "/subscriptions/{subscriptionId}/providers/Microsoft.IoTSecurity/locations/{iotDefenderLocation}/deviceGroups/{deviceGroupName}/alerts/{alertId}"
	if client.subscriptionID == "" {
		return nil, errors.New("parameter client.subscriptionID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{subscriptionId}", url.PathEscape(client.subscriptionID))
	if client.iotDefenderLocation == "" {
		return nil, errors.New("parameter client.iotDefenderLocation cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{iotDefenderLocation}", url.PathEscape(client.iotDefenderLocation))
	if deviceGroupName == "" {
		return nil, errors.New("parameter deviceGroupName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{deviceGroupName}", url.PathEscape(deviceGroupName))
	if alertID == "" {
		return nil, errors.New("parameter alertID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{alertId}", url.PathEscape(alertID))
	req, err := runtime.NewRequest(ctx, http.MethodGet, runtime.JoinPaths(client.host, urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("api-version", "2021-07-01-preview")
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header.Set("Accept", "application/json")
	return req, nil
}

// getHandleResponse handles the Get response.
func (client *IotAlertsClient) getHandleResponse(resp *http.Response) (IotAlertsClientGetResponse, error) {
	result := IotAlertsClientGetResponse{RawResponse: resp}
	if err := runtime.UnmarshalAsJSON(resp, &result.AlertModel); err != nil {
		return IotAlertsClientGetResponse{}, err
	}
	return result, nil
}

// List - List IoT alerts
// If the operation fails it returns an *azcore.ResponseError type.
// deviceGroupName - Device group name
// options - IotAlertsClientListOptions contains the optional parameters for the IotAlertsClient.List method.
func (client *IotAlertsClient) List(deviceGroupName string, options *IotAlertsClientListOptions) *IotAlertsClientListPager {
	return &IotAlertsClientListPager{
		client: client,
		requester: func(ctx context.Context) (*policy.Request, error) {
			return client.listCreateRequest(ctx, deviceGroupName, options)
		},
		advancer: func(ctx context.Context, resp IotAlertsClientListResponse) (*policy.Request, error) {
			return runtime.NewRequest(ctx, http.MethodGet, *resp.AlertListModel.NextLink)
		},
	}
}

// listCreateRequest creates the List request.
func (client *IotAlertsClient) listCreateRequest(ctx context.Context, deviceGroupName string, options *IotAlertsClientListOptions) (*policy.Request, error) {
	urlPath := "/subscriptions/{subscriptionId}/providers/Microsoft.IoTSecurity/locations/{iotDefenderLocation}/deviceGroups/{deviceGroupName}/alerts"
	if client.subscriptionID == "" {
		return nil, errors.New("parameter client.subscriptionID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{subscriptionId}", url.PathEscape(client.subscriptionID))
	if client.iotDefenderLocation == "" {
		return nil, errors.New("parameter client.iotDefenderLocation cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{iotDefenderLocation}", url.PathEscape(client.iotDefenderLocation))
	if deviceGroupName == "" {
		return nil, errors.New("parameter deviceGroupName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{deviceGroupName}", url.PathEscape(deviceGroupName))
	req, err := runtime.NewRequest(ctx, http.MethodGet, runtime.JoinPaths(client.host, urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("api-version", "2021-07-01-preview")
	if options != nil && options.SkipToken != nil {
		reqQP.Set("$skipToken", *options.SkipToken)
	}
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header.Set("Accept", "application/json")
	return req, nil
}

// listHandleResponse handles the List response.
func (client *IotAlertsClient) listHandleResponse(resp *http.Response) (IotAlertsClientListResponse, error) {
	result := IotAlertsClientListResponse{RawResponse: resp}
	if err := runtime.UnmarshalAsJSON(resp, &result.AlertListModel); err != nil {
		return IotAlertsClientListResponse{}, err
	}
	return result, nil
}

// Patch - Update an existing alert
// If the operation fails it returns an *azcore.ResponseError type.
// deviceGroupName - Device group name
// alertID - Alert Id
// alertPatchModel - IoT alert
// options - IotAlertsClientPatchOptions contains the optional parameters for the IotAlertsClient.Patch method.
func (client *IotAlertsClient) Patch(ctx context.Context, deviceGroupName string, alertID string, alertPatchModel AlertPatchPropertiesModel, options *IotAlertsClientPatchOptions) (IotAlertsClientPatchResponse, error) {
	req, err := client.patchCreateRequest(ctx, deviceGroupName, alertID, alertPatchModel, options)
	if err != nil {
		return IotAlertsClientPatchResponse{}, err
	}
	resp, err := client.pl.Do(req)
	if err != nil {
		return IotAlertsClientPatchResponse{}, err
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {
		return IotAlertsClientPatchResponse{}, runtime.NewResponseError(resp)
	}
	return client.patchHandleResponse(resp)
}

// patchCreateRequest creates the Patch request.
func (client *IotAlertsClient) patchCreateRequest(ctx context.Context, deviceGroupName string, alertID string, alertPatchModel AlertPatchPropertiesModel, options *IotAlertsClientPatchOptions) (*policy.Request, error) {
	urlPath := "/subscriptions/{subscriptionId}/providers/Microsoft.IoTSecurity/locations/{iotDefenderLocation}/deviceGroups/{deviceGroupName}/alerts/{alertId}"
	if client.subscriptionID == "" {
		return nil, errors.New("parameter client.subscriptionID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{subscriptionId}", url.PathEscape(client.subscriptionID))
	if client.iotDefenderLocation == "" {
		return nil, errors.New("parameter client.iotDefenderLocation cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{iotDefenderLocation}", url.PathEscape(client.iotDefenderLocation))
	if deviceGroupName == "" {
		return nil, errors.New("parameter deviceGroupName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{deviceGroupName}", url.PathEscape(deviceGroupName))
	if alertID == "" {
		return nil, errors.New("parameter alertID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{alertId}", url.PathEscape(alertID))
	req, err := runtime.NewRequest(ctx, http.MethodPatch, runtime.JoinPaths(client.host, urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("api-version", "2021-07-01-preview")
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header.Set("Accept", "application/json")
	return req, runtime.MarshalAsJSON(req, alertPatchModel)
}

// patchHandleResponse handles the Patch response.
func (client *IotAlertsClient) patchHandleResponse(resp *http.Response) (IotAlertsClientPatchResponse, error) {
	result := IotAlertsClientPatchResponse{RawResponse: resp}
	if err := runtime.UnmarshalAsJSON(resp, &result.AlertModel); err != nil {
		return IotAlertsClientPatchResponse{}, err
	}
	return result, nil
}
