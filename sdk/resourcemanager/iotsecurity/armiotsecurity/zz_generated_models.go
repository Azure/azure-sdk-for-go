//go:build go1.16
// +build go1.16

// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

package armiotsecurity

import (
	"encoding/json"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore"
	"reflect"
	"time"
)

// AlertListModel - List of IoT alerts
type AlertListModel struct {
	// READ-ONLY; When available, follow the URI to get the next page of data
	NextLink *string `json:"nextLink,omitempty" azure:"ro"`

	// READ-ONLY; List data
	Value []*AlertModel `json:"value,omitempty" azure:"ro"`
}

// MarshalJSON implements the json.Marshaller interface for type AlertListModel.
func (a AlertListModel) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "nextLink", a.NextLink)
	populate(objectMap, "value", a.Value)
	return json.Marshal(objectMap)
}

// AlertModel - IoT alert
type AlertModel struct {
	ProxyResource
	// Alert properties
	Properties *AlertPropertiesModel `json:"properties,omitempty"`

	// READ-ONLY; Azure Resource Manager metadata containing createdBy and modifiedBy information.
	SystemData *SystemData `json:"systemData,omitempty" azure:"ro"`
}

// AlertPatchPropertiesModel - IoT alert properties
type AlertPatchPropertiesModel struct {
	// IoT alert properties
	Properties *AlertPatchPropertiesModelProperties `json:"properties,omitempty"`
}

// MarshalJSON implements the json.Marshaller interface for type AlertPatchPropertiesModel.
func (a AlertPatchPropertiesModel) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "properties", a.Properties)
	return json.Marshal(objectMap)
}

// AlertPatchPropertiesModelProperties - IoT alert properties
type AlertPatchPropertiesModelProperties struct {
	// The severity of the alert
	Severity *AlertSeverity `json:"severity,omitempty"`

	// The status of the alert
	Status *AlertStatus `json:"status,omitempty"`
}

// AlertPropertiesModel - IoT alert properties
type AlertPropertiesModel struct {
	// A list of entities related to the alert
	Entities []map[string]interface{} `json:"entities,omitempty"`

	// A bag of fields which extends the alert information
	ExtendedProperties map[string]interface{} `json:"extendedProperties,omitempty"`

	// The severity of the alert
	Severity *AlertSeverity `json:"severity,omitempty"`

	// The status of the alert
	Status *AlertStatus `json:"status,omitempty"`

	// READ-ONLY; The type name of the alert
	AlertType *string `json:"alertType,omitempty" azure:"ro"`

	// READ-ONLY; Display name of the device entity being reported on
	AzureResourceID *string `json:"azureResourceId,omitempty" azure:"ro"`

	// READ-ONLY; The impact end time of the alert (the time of the last event or activity included in the alert)
	EndTimeUTC *string `json:"endTimeUtc,omitempty" azure:"ro"`

	// READ-ONLY; Kill chain related intent behind the alert. Could contain multiple enum values (separated by commas)
	Intent *AlertIntent `json:"intent,omitempty" azure:"ro"`

	// READ-ONLY; The name of a component inside the product which generated the alert
	ProductComponentName *string `json:"productComponentName,omitempty" azure:"ro"`

	// READ-ONLY; The impact start time of the alert (the time of the first event or activity included in the alert)
	StartTimeUTC *string `json:"startTimeUtc,omitempty" azure:"ro"`

	// READ-ONLY; Holds the product canonical identifier of the alert within the scope of a product
	SystemAlertID *string `json:"systemAlertId,omitempty" azure:"ro"`

	// READ-ONLY; A list of of techniques that lead up to the intent/tactic
	Techniques []*TechniqueModel `json:"techniques,omitempty" azure:"ro"`
}

// MarshalJSON implements the json.Marshaller interface for type AlertPropertiesModel.
func (a AlertPropertiesModel) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "alertType", a.AlertType)
	populate(objectMap, "azureResourceId", a.AzureResourceID)
	populate(objectMap, "endTimeUtc", a.EndTimeUTC)
	populate(objectMap, "entities", a.Entities)
	populate(objectMap, "extendedProperties", a.ExtendedProperties)
	populate(objectMap, "intent", a.Intent)
	populate(objectMap, "productComponentName", a.ProductComponentName)
	populate(objectMap, "severity", a.Severity)
	populate(objectMap, "startTimeUtc", a.StartTimeUTC)
	populate(objectMap, "status", a.Status)
	populate(objectMap, "systemAlertId", a.SystemAlertID)
	populate(objectMap, "techniques", a.Techniques)
	return json.Marshal(objectMap)
}

// AlertType - IoT alert type.
type AlertType struct {
	ProxyResource
	// Alert type properties
	Properties *AlertTypeProperties `json:"properties,omitempty"`

	// READ-ONLY; Azure Resource Manager metadata containing createdBy and modifiedBy information.
	SystemData *SystemData `json:"systemData,omitempty" azure:"ro"`
}

// AlertTypeList - List of alert types
type AlertTypeList struct {
	// List data
	Value []*AlertType `json:"value,omitempty"`
}

// MarshalJSON implements the json.Marshaller interface for type AlertTypeList.
func (a AlertTypeList) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "value", a.Value)
	return json.Marshal(objectMap)
}

// AlertTypeProperties - IoT alert type information.
type AlertTypeProperties struct {
	// READ-ONLY; The display name of the alert
	AlertDisplayName *string `json:"alertDisplayName,omitempty" azure:"ro"`

	// READ-ONLY; Description of the suspected vulnerability and meaning.
	Description *string `json:"description,omitempty" azure:"ro"`

	// READ-ONLY; Kill chain related intent behind the alert. Could contain multiple enum values (separated by commas)
	Intent *AlertIntent `json:"intent,omitempty" azure:"ro"`

	// READ-ONLY; The name of a component inside the product which generated the alert
	ProductComponentName *string `json:"productComponentName,omitempty" azure:"ro"`

	// READ-ONLY; The name of the product which published this alert
	ProductName *string `json:"productName,omitempty" azure:"ro"`

	// READ-ONLY; The name of the alert provider or internal partner
	ProviderName *string `json:"providerName,omitempty" azure:"ro"`

	// READ-ONLY; Manual action items to take to remediate the alert
	RemediationSteps []*string `json:"remediationSteps,omitempty" azure:"ro"`

	// READ-ONLY; The severity of the alert
	Severity *AlertSeverity `json:"severity,omitempty" azure:"ro"`

	// READ-ONLY; The name of the vendor that raise the alert
	VendorName *string `json:"vendorName,omitempty" azure:"ro"`
}

// MarshalJSON implements the json.Marshaller interface for type AlertTypeProperties.
func (a AlertTypeProperties) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "alertDisplayName", a.AlertDisplayName)
	populate(objectMap, "description", a.Description)
	populate(objectMap, "intent", a.Intent)
	populate(objectMap, "productComponentName", a.ProductComponentName)
	populate(objectMap, "productName", a.ProductName)
	populate(objectMap, "providerName", a.ProviderName)
	populate(objectMap, "remediationSteps", a.RemediationSteps)
	populate(objectMap, "severity", a.Severity)
	populate(objectMap, "vendorName", a.VendorName)
	return json.Marshal(objectMap)
}

// AlertTypesGetOptions contains the optional parameters for the AlertTypes.Get method.
type AlertTypesGetOptions struct {
	// placeholder for future optional parameters
}

// AlertTypesListOptions contains the optional parameters for the AlertTypes.List method.
type AlertTypesListOptions struct {
	// placeholder for future optional parameters
}

// DefenderSettingsCreateOrUpdateOptions contains the optional parameters for the DefenderSettings.CreateOrUpdate method.
type DefenderSettingsCreateOrUpdateOptions struct {
	// placeholder for future optional parameters
}

// DefenderSettingsDeleteOptions contains the optional parameters for the DefenderSettings.Delete method.
type DefenderSettingsDeleteOptions struct {
	// placeholder for future optional parameters
}

// DefenderSettingsDownloadManagerActivationOptions contains the optional parameters for the DefenderSettings.DownloadManagerActivation method.
type DefenderSettingsDownloadManagerActivationOptions struct {
	// placeholder for future optional parameters
}

// DefenderSettingsGetOptions contains the optional parameters for the DefenderSettings.Get method.
type DefenderSettingsGetOptions struct {
	// placeholder for future optional parameters
}

// DefenderSettingsList - List of IoT Defender settings
type DefenderSettingsList struct {
	// READ-ONLY; List data
	Value []*DefenderSettingsModel `json:"value,omitempty" azure:"ro"`
}

// MarshalJSON implements the json.Marshaller interface for type DefenderSettingsList.
func (d DefenderSettingsList) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "value", d.Value)
	return json.Marshal(objectMap)
}

// DefenderSettingsListOptions contains the optional parameters for the DefenderSettings.List method.
type DefenderSettingsListOptions struct {
	// placeholder for future optional parameters
}

// DefenderSettingsModel - IoT Defender settings
type DefenderSettingsModel struct {
	ProxyResource
	// IoT Defender settings properties
	Properties *DefenderSettingsProperties `json:"properties,omitempty"`
}

// DefenderSettingsPackageDownloadsOptions contains the optional parameters for the DefenderSettings.PackageDownloads method.
type DefenderSettingsPackageDownloadsOptions struct {
	// placeholder for future optional parameters
}

// DefenderSettingsProperties - IoT Defender settings properties
type DefenderSettingsProperties struct {
	// REQUIRED; Size of the device quota. Value is required to be in multiples of 100.
	DeviceQuota *int32 `json:"deviceQuota,omitempty"`

	// REQUIRED; MDE integration configuration
	MdeIntegration *DefenderSettingsPropertiesMdeIntegration `json:"mdeIntegration,omitempty"`

	// REQUIRED; The kind of onboarding for the subscription
	OnboardingKind *OnboardingKind `json:"onboardingKind,omitempty"`

	// REQUIRED; Sentinel Workspace Resource Ids
	SentinelWorkspaceResourceIDs []*string `json:"sentinelWorkspaceResourceIds,omitempty"`

	// READ-ONLY; End time of the evaluation period, if such exist
	EvaluationEndTime *time.Time `json:"evaluationEndTime,omitempty" azure:"ro"`
}

// MarshalJSON implements the json.Marshaller interface for type DefenderSettingsProperties.
func (d DefenderSettingsProperties) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "deviceQuota", d.DeviceQuota)
	populateTimeRFC3339(objectMap, "evaluationEndTime", d.EvaluationEndTime)
	populate(objectMap, "mdeIntegration", d.MdeIntegration)
	populate(objectMap, "onboardingKind", d.OnboardingKind)
	populate(objectMap, "sentinelWorkspaceResourceIds", d.SentinelWorkspaceResourceIDs)
	return json.Marshal(objectMap)
}

// UnmarshalJSON implements the json.Unmarshaller interface for type DefenderSettingsProperties.
func (d *DefenderSettingsProperties) UnmarshalJSON(data []byte) error {
	var rawMsg map[string]json.RawMessage
	if err := json.Unmarshal(data, &rawMsg); err != nil {
		return err
	}
	for key, val := range rawMsg {
		var err error
		switch key {
		case "deviceQuota":
			err = unpopulate(val, &d.DeviceQuota)
			delete(rawMsg, key)
		case "evaluationEndTime":
			err = unpopulateTimeRFC3339(val, &d.EvaluationEndTime)
			delete(rawMsg, key)
		case "mdeIntegration":
			err = unpopulate(val, &d.MdeIntegration)
			delete(rawMsg, key)
		case "onboardingKind":
			err = unpopulate(val, &d.OnboardingKind)
			delete(rawMsg, key)
		case "sentinelWorkspaceResourceIds":
			err = unpopulate(val, &d.SentinelWorkspaceResourceIDs)
			delete(rawMsg, key)
		}
		if err != nil {
			return err
		}
	}
	return nil
}

// DefenderSettingsPropertiesMdeIntegration - MDE integration configuration
type DefenderSettingsPropertiesMdeIntegration struct {
	// REQUIRED; Integration status
	Status *MdeIntegration `json:"status,omitempty"`
}

// DeviceGroupList - List of device groups
type DeviceGroupList struct {
	// READ-ONLY; Link to next page of resources.
	NextLink *string `json:"nextLink,omitempty" azure:"ro"`

	// READ-ONLY; List data
	Value []*DeviceGroupModel `json:"value,omitempty" azure:"ro"`
}

// MarshalJSON implements the json.Marshaller interface for type DeviceGroupList.
func (d DeviceGroupList) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "nextLink", d.NextLink)
	populate(objectMap, "value", d.Value)
	return json.Marshal(objectMap)
}

// DeviceGroupModel - Device group
type DeviceGroupModel struct {
	ProxyResource
	// Device group properties
	Properties map[string]interface{} `json:"properties,omitempty"`

	// READ-ONLY; Azure Resource Manager metadata containing createdBy and modifiedBy information.
	SystemData *SystemData `json:"systemData,omitempty" azure:"ro"`
}

// DeviceGroupsCreateOrUpdateOptions contains the optional parameters for the DeviceGroups.CreateOrUpdate method.
type DeviceGroupsCreateOrUpdateOptions struct {
	// placeholder for future optional parameters
}

// DeviceGroupsDeleteOptions contains the optional parameters for the DeviceGroups.Delete method.
type DeviceGroupsDeleteOptions struct {
	// placeholder for future optional parameters
}

// DeviceGroupsGetOptions contains the optional parameters for the DeviceGroups.Get method.
type DeviceGroupsGetOptions struct {
	// placeholder for future optional parameters
}

// DeviceGroupsListOptions contains the optional parameters for the DeviceGroups.List method.
type DeviceGroupsListOptions struct {
	// placeholder for future optional parameters
}

// DeviceList - List of devices
type DeviceList struct {
	// READ-ONLY; When there are too many devices for one page, use this URI to fetch the next page.
	NextLink *string `json:"nextLink,omitempty" azure:"ro"`

	// READ-ONLY; List data
	Value []*DeviceModel `json:"value,omitempty" azure:"ro"`
}

// MarshalJSON implements the json.Marshaller interface for type DeviceList.
func (d DeviceList) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "nextLink", d.NextLink)
	populate(objectMap, "value", d.Value)
	return json.Marshal(objectMap)
}

// DeviceModel - Device
type DeviceModel struct {
	ProxyResource
	// Device properties
	Properties *DeviceProperties `json:"properties,omitempty"`

	// READ-ONLY; Azure Resource Manager metadata containing createdBy and modifiedBy information.
	SystemData *SystemData `json:"systemData,omitempty" azure:"ro"`
}

// DeviceProperties - Device properties
type DeviceProperties struct {
	// A bag of fields which extends the device information.
	AdditionalFields map[string]interface{} `json:"additionalFields,omitempty"`

	// Authorized state of the device.
	AuthorizedState *AuthorizedState `json:"authorizedState,omitempty"`

	// Device business function
	BusinessFunction *string `json:"businessFunction,omitempty"`

	// Device criticality.
	Criticality *Criticality `json:"criticality,omitempty"`

	// Device category id
	DeviceCategoryID *int32 `json:"deviceCategoryId,omitempty"`

	// Device name
	DeviceName *string `json:"deviceName,omitempty"`

	// Device sub type id
	DeviceSubTypeID *int32 `json:"deviceSubTypeId,omitempty"`

	// Device tags
	DeviceTags []*string `json:"deviceTags,omitempty"`

	// Device type id
	DeviceTypeID *int32 `json:"deviceTypeId,omitempty"`

	// List of device firmwares.
	Firmwares []*Firmware `json:"firmwares,omitempty"`

	// Device hardware data
	Hardware *Hardware `json:"hardware,omitempty"`

	// Device operating system data
	OperatingSystem *OperatingSystem `json:"operatingSystem,omitempty"`

	// List of device packages
	Packages []*Package `json:"packages,omitempty"`

	// Purdue level of the device.
	PurdueLevel *PurdueLevel `json:"purdueLevel,omitempty"`

	// READ-ONLY; List of Common Platform Enumeration (CPE)
	Cpes []*string `json:"cpes,omitempty" azure:"ro"`

	// READ-ONLY; Device category display name
	DeviceCategoryDisplayName *string `json:"deviceCategoryDisplayName,omitempty" azure:"ro"`

	// READ-ONLY; Device data source.
	DeviceDataSource *DeviceDataSource `json:"deviceDataSource,omitempty" azure:"ro"`

	// READ-ONLY; Device status.
	DeviceStatus *DeviceStatus `json:"deviceStatus,omitempty" azure:"ro"`

	// READ-ONLY; Device sub type display name
	DeviceSubTypeDisplayName *string `json:"deviceSubTypeDisplayName,omitempty" azure:"ro"`

	// READ-ONLY; Device type display name
	DeviceTypeDisplayName *string `json:"deviceTypeDisplayName,omitempty" azure:"ro"`

	// READ-ONLY; First time the device was seen.
	FirstSeen *time.Time `json:"firstSeen,omitempty" azure:"ro"`

	// READ-ONLY; last time the device was programming or programed.
	LastProgrammingTime *time.Time `json:"lastProgrammingTime,omitempty" azure:"ro"`

	// READ-ONLY; Last time the device was seen.
	LastSeen *time.Time `json:"lastSeen,omitempty" azure:"ro"`

	// READ-ONLY; Last time the device was updated by the profiler.
	LastUpdated *time.Time `json:"lastUpdated,omitempty" azure:"ro"`

	// READ-ONLY; List of merged devices data
	MergedDevices []*MergedDevice `json:"mergedDevices,omitempty" azure:"ro"`

	// READ-ONLY; The device Id that this device was merged into
	MergedToDeviceID *string `json:"mergedToDeviceId,omitempty" azure:"ro"`

	// READ-ONLY; List of the device network interface cards.
	Nics []*Nic `json:"nics,omitempty" azure:"ro"`

	// READ-ONLY; Device onboarding status.
	OnboardingStatus *OnboardingStatus `json:"onboardingStatus,omitempty" azure:"ro"`

	// READ-ONLY; For nested device, this is the parent device id.
	ParentDeviceID *string `json:"parentDeviceId,omitempty" azure:"ro"`

	// READ-ONLY; For nested device, this is the rack number in the parent device that holds the nested device.
	ParentRackNumber *int32 `json:"parentRackNumber,omitempty" azure:"ro"`

	// READ-ONLY; For nested device, this is the slot number in the parent device that holds the nested device.
	ParentSlotNumber *int32 `json:"parentSlotNumber,omitempty" azure:"ro"`

	// READ-ONLY; Confidence of the device profile
	ProfilingConfidence *int32 `json:"profilingConfidence,omitempty" azure:"ro"`

	// READ-ONLY; Indicates whether this device is programming
	ProgrammingState *ProgrammingState `json:"programmingState,omitempty" azure:"ro"`

	// READ-ONLY; risk score of the device.
	RiskScore *int32 `json:"riskScore,omitempty" azure:"ro"`

	// READ-ONLY; Version of the device model schema
	SchemaVersion *string `json:"schemaVersion,omitempty" azure:"ro"`

	// READ-ONLY; Sensor that scanned this device.
	Sensor *Sensor `json:"sensor,omitempty" azure:"ro"`

	// READ-ONLY; List of the device slot in the backplane
	Slots []*Slot `json:"slots,omitempty" azure:"ro"`
}

// MarshalJSON implements the json.Marshaller interface for type DeviceProperties.
func (d DeviceProperties) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "additionalFields", d.AdditionalFields)
	populate(objectMap, "authorizedState", d.AuthorizedState)
	populate(objectMap, "businessFunction", d.BusinessFunction)
	populate(objectMap, "cpes", d.Cpes)
	populate(objectMap, "criticality", d.Criticality)
	populate(objectMap, "deviceCategoryDisplayName", d.DeviceCategoryDisplayName)
	populate(objectMap, "deviceCategoryId", d.DeviceCategoryID)
	populate(objectMap, "deviceDataSource", d.DeviceDataSource)
	populate(objectMap, "deviceName", d.DeviceName)
	populate(objectMap, "deviceStatus", d.DeviceStatus)
	populate(objectMap, "deviceSubTypeDisplayName", d.DeviceSubTypeDisplayName)
	populate(objectMap, "deviceSubTypeId", d.DeviceSubTypeID)
	populate(objectMap, "deviceTags", d.DeviceTags)
	populate(objectMap, "deviceTypeDisplayName", d.DeviceTypeDisplayName)
	populate(objectMap, "deviceTypeId", d.DeviceTypeID)
	populate(objectMap, "firmwares", d.Firmwares)
	populateTimeRFC3339(objectMap, "firstSeen", d.FirstSeen)
	populate(objectMap, "hardware", d.Hardware)
	populateTimeRFC3339(objectMap, "lastProgrammingTime", d.LastProgrammingTime)
	populateTimeRFC3339(objectMap, "lastSeen", d.LastSeen)
	populateTimeRFC3339(objectMap, "lastUpdated", d.LastUpdated)
	populate(objectMap, "mergedDevices", d.MergedDevices)
	populate(objectMap, "mergedToDeviceId", d.MergedToDeviceID)
	populate(objectMap, "nics", d.Nics)
	populate(objectMap, "onboardingStatus", d.OnboardingStatus)
	populate(objectMap, "operatingSystem", d.OperatingSystem)
	populate(objectMap, "packages", d.Packages)
	populate(objectMap, "parentDeviceId", d.ParentDeviceID)
	populate(objectMap, "parentRackNumber", d.ParentRackNumber)
	populate(objectMap, "parentSlotNumber", d.ParentSlotNumber)
	populate(objectMap, "profilingConfidence", d.ProfilingConfidence)
	populate(objectMap, "programmingState", d.ProgrammingState)
	populate(objectMap, "purdueLevel", d.PurdueLevel)
	populate(objectMap, "riskScore", d.RiskScore)
	populate(objectMap, "schemaVersion", d.SchemaVersion)
	populate(objectMap, "sensor", d.Sensor)
	populate(objectMap, "slots", d.Slots)
	return json.Marshal(objectMap)
}

// UnmarshalJSON implements the json.Unmarshaller interface for type DeviceProperties.
func (d *DeviceProperties) UnmarshalJSON(data []byte) error {
	var rawMsg map[string]json.RawMessage
	if err := json.Unmarshal(data, &rawMsg); err != nil {
		return err
	}
	for key, val := range rawMsg {
		var err error
		switch key {
		case "additionalFields":
			err = unpopulate(val, &d.AdditionalFields)
			delete(rawMsg, key)
		case "authorizedState":
			err = unpopulate(val, &d.AuthorizedState)
			delete(rawMsg, key)
		case "businessFunction":
			err = unpopulate(val, &d.BusinessFunction)
			delete(rawMsg, key)
		case "cpes":
			err = unpopulate(val, &d.Cpes)
			delete(rawMsg, key)
		case "criticality":
			err = unpopulate(val, &d.Criticality)
			delete(rawMsg, key)
		case "deviceCategoryDisplayName":
			err = unpopulate(val, &d.DeviceCategoryDisplayName)
			delete(rawMsg, key)
		case "deviceCategoryId":
			err = unpopulate(val, &d.DeviceCategoryID)
			delete(rawMsg, key)
		case "deviceDataSource":
			err = unpopulate(val, &d.DeviceDataSource)
			delete(rawMsg, key)
		case "deviceName":
			err = unpopulate(val, &d.DeviceName)
			delete(rawMsg, key)
		case "deviceStatus":
			err = unpopulate(val, &d.DeviceStatus)
			delete(rawMsg, key)
		case "deviceSubTypeDisplayName":
			err = unpopulate(val, &d.DeviceSubTypeDisplayName)
			delete(rawMsg, key)
		case "deviceSubTypeId":
			err = unpopulate(val, &d.DeviceSubTypeID)
			delete(rawMsg, key)
		case "deviceTags":
			err = unpopulate(val, &d.DeviceTags)
			delete(rawMsg, key)
		case "deviceTypeDisplayName":
			err = unpopulate(val, &d.DeviceTypeDisplayName)
			delete(rawMsg, key)
		case "deviceTypeId":
			err = unpopulate(val, &d.DeviceTypeID)
			delete(rawMsg, key)
		case "firmwares":
			err = unpopulate(val, &d.Firmwares)
			delete(rawMsg, key)
		case "firstSeen":
			err = unpopulateTimeRFC3339(val, &d.FirstSeen)
			delete(rawMsg, key)
		case "hardware":
			err = unpopulate(val, &d.Hardware)
			delete(rawMsg, key)
		case "lastProgrammingTime":
			err = unpopulateTimeRFC3339(val, &d.LastProgrammingTime)
			delete(rawMsg, key)
		case "lastSeen":
			err = unpopulateTimeRFC3339(val, &d.LastSeen)
			delete(rawMsg, key)
		case "lastUpdated":
			err = unpopulateTimeRFC3339(val, &d.LastUpdated)
			delete(rawMsg, key)
		case "mergedDevices":
			err = unpopulate(val, &d.MergedDevices)
			delete(rawMsg, key)
		case "mergedToDeviceId":
			err = unpopulate(val, &d.MergedToDeviceID)
			delete(rawMsg, key)
		case "nics":
			err = unpopulate(val, &d.Nics)
			delete(rawMsg, key)
		case "onboardingStatus":
			err = unpopulate(val, &d.OnboardingStatus)
			delete(rawMsg, key)
		case "operatingSystem":
			err = unpopulate(val, &d.OperatingSystem)
			delete(rawMsg, key)
		case "packages":
			err = unpopulate(val, &d.Packages)
			delete(rawMsg, key)
		case "parentDeviceId":
			err = unpopulate(val, &d.ParentDeviceID)
			delete(rawMsg, key)
		case "parentRackNumber":
			err = unpopulate(val, &d.ParentRackNumber)
			delete(rawMsg, key)
		case "parentSlotNumber":
			err = unpopulate(val, &d.ParentSlotNumber)
			delete(rawMsg, key)
		case "profilingConfidence":
			err = unpopulate(val, &d.ProfilingConfidence)
			delete(rawMsg, key)
		case "programmingState":
			err = unpopulate(val, &d.ProgrammingState)
			delete(rawMsg, key)
		case "purdueLevel":
			err = unpopulate(val, &d.PurdueLevel)
			delete(rawMsg, key)
		case "riskScore":
			err = unpopulate(val, &d.RiskScore)
			delete(rawMsg, key)
		case "schemaVersion":
			err = unpopulate(val, &d.SchemaVersion)
			delete(rawMsg, key)
		case "sensor":
			err = unpopulate(val, &d.Sensor)
			delete(rawMsg, key)
		case "slots":
			err = unpopulate(val, &d.Slots)
			delete(rawMsg, key)
		}
		if err != nil {
			return err
		}
	}
	return nil
}

// DeviceVulnerabilityListModel - List of IoT Device Vulnerabilities
type DeviceVulnerabilityListModel struct {
	// READ-ONLY; When available, follow the URI to get the next page of data
	NextLink *string `json:"nextLink,omitempty" azure:"ro"`

	// READ-ONLY; List data
	Value []*DeviceVulnerabilityModel `json:"value,omitempty" azure:"ro"`
}

// MarshalJSON implements the json.Marshaller interface for type DeviceVulnerabilityListModel.
func (d DeviceVulnerabilityListModel) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "nextLink", d.NextLink)
	populate(objectMap, "value", d.Value)
	return json.Marshal(objectMap)
}

// DeviceVulnerabilityModel - IoT Device Vulnerability
type DeviceVulnerabilityModel struct {
	ProxyResource
	// Device Vulnerability properties
	Properties *DeviceVulnerabilityPropertiesModel `json:"properties,omitempty"`

	// READ-ONLY; Azure Resource Manager metadata containing createdBy and modifiedBy information.
	SystemData *SystemData `json:"systemData,omitempty" azure:"ro"`
}

// DeviceVulnerabilityPropertiesModel - IoT Device Vulnerability properties
type DeviceVulnerabilityPropertiesModel struct {
	// READ-ONLY; The vulnerability affected versions
	AffectedVersions []*string `json:"affectedVersions,omitempty" azure:"ro"`

	// READ-ONLY; The vulnerability description
	Description *string `json:"description,omitempty" azure:"ro"`

	// READ-ONLY; The exploit type of the vulnerability
	ExploitType *string `json:"exploitType,omitempty" azure:"ro"`

	// READ-ONLY; The score of the vulnerability
	Score *float64 `json:"score,omitempty" azure:"ro"`

	// READ-ONLY; The severity score of the vulnerability
	SeverityScore *SeverityScore `json:"severityScore,omitempty" azure:"ro"`

	// READ-ONLY; The sources of the vulnerability
	Sources []*string `json:"sources,omitempty" azure:"ro"`
}

// MarshalJSON implements the json.Marshaller interface for type DeviceVulnerabilityPropertiesModel.
func (d DeviceVulnerabilityPropertiesModel) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "affectedVersions", d.AffectedVersions)
	populate(objectMap, "description", d.Description)
	populate(objectMap, "exploitType", d.ExploitType)
	populate(objectMap, "score", d.Score)
	populate(objectMap, "severityScore", d.SeverityScore)
	populate(objectMap, "sources", d.Sources)
	return json.Marshal(objectMap)
}

// DevicesGetOptions contains the optional parameters for the Devices.Get method.
type DevicesGetOptions struct {
	// placeholder for future optional parameters
}

// DevicesListOptions contains the optional parameters for the Devices.List method.
type DevicesListOptions struct {
	// Skip token used for pagination
	SkipToken *string
}

// DimensionProperties - properties for dimension
type DimensionProperties struct {
	// localized display name of the dimension to customer
	DisplayName *string `json:"displayName,omitempty"`

	// dimension name
	Name *string `json:"name,omitempty"`

	// flag indicating whether this dimension should be included to the customer in Azure Monitor logs (aka Shoebox)
	ToBeExportedForCustomer *bool `json:"toBeExportedForCustomer,omitempty"`
}

// ErrorAdditionalInfo - The resource management error additional info.
type ErrorAdditionalInfo struct {
	// READ-ONLY; The additional info.
	Info map[string]interface{} `json:"info,omitempty" azure:"ro"`

	// READ-ONLY; The additional info type.
	Type *string `json:"type,omitempty" azure:"ro"`
}

// ErrorDetail - The error detail.
type ErrorDetail struct {
	// READ-ONLY; The error additional info.
	AdditionalInfo []*ErrorAdditionalInfo `json:"additionalInfo,omitempty" azure:"ro"`

	// READ-ONLY; The error code.
	Code *string `json:"code,omitempty" azure:"ro"`

	// READ-ONLY; The error details.
	Details []*ErrorDetail `json:"details,omitempty" azure:"ro"`

	// READ-ONLY; The error message.
	Message *string `json:"message,omitempty" azure:"ro"`

	// READ-ONLY; The error target.
	Target *string `json:"target,omitempty" azure:"ro"`
}

// MarshalJSON implements the json.Marshaller interface for type ErrorDetail.
func (e ErrorDetail) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "additionalInfo", e.AdditionalInfo)
	populate(objectMap, "code", e.Code)
	populate(objectMap, "details", e.Details)
	populate(objectMap, "message", e.Message)
	populate(objectMap, "target", e.Target)
	return json.Marshal(objectMap)
}

// ErrorModel - Default error model
type ErrorModel struct {
	// READ-ONLY; Gets or sets the code.
	Code *string `json:"code,omitempty" azure:"ro"`

	// READ-ONLY; Gets or sets the details.
	Details []*ErrorModel `json:"details,omitempty" azure:"ro"`

	// READ-ONLY; Gets or sets the messages.
	Message *string `json:"message,omitempty" azure:"ro"`

	// READ-ONLY; Gets or sets the target.
	Target *string `json:"target,omitempty" azure:"ro"`
}

// MarshalJSON implements the json.Marshaller interface for type ErrorModel.
func (e ErrorModel) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	e.marshalInternal(objectMap)
	return json.Marshal(objectMap)
}

func (e ErrorModel) marshalInternal(objectMap map[string]interface{}) {
	populate(objectMap, "code", e.Code)
	populate(objectMap, "details", e.Details)
	populate(objectMap, "message", e.Message)
	populate(objectMap, "target", e.Target)
}

// ErrorResponse - Common error response for all Azure Resource Manager APIs to return error details for failed operations. (This also follows the OData
// error response format.).
// Implements the error and azcore.HTTPResponse interfaces.
type ErrorResponse struct {
	raw string
	// The error object.
	InnerError *ErrorDetail `json:"error,omitempty"`
}

// Error implements the error interface for type ErrorResponse.
// The contents of the error text are not contractual and subject to change.
func (e ErrorResponse) Error() string {
	return e.raw
}

// ErrorResponseModel - Default error response model
// Implements the error and azcore.HTTPResponse interfaces.
type ErrorResponseModel struct {
	raw string
	// READ-ONLY; Gets or sets the error.
	InnerError *ErrorResponseModelError `json:"error,omitempty" azure:"ro"`
}

// Error implements the error interface for type ErrorResponseModel.
// The contents of the error text are not contractual and subject to change.
func (e ErrorResponseModel) Error() string {
	return e.raw
}

// ErrorResponseModelError - Gets or sets the error.
type ErrorResponseModelError struct {
	ErrorModel
}

// Firmware - Device firmware data
type Firmware struct {
	// A bag of fields which extends the firmware information.
	AdditionalFields map[string]interface{} `json:"additionalFields,omitempty"`

	// Firmware module address.
	ModuleAddress *string `json:"moduleAddress,omitempty"`

	// Firmware name.
	Name *string `json:"name,omitempty"`

	// Firmware serial.
	Serial *string `json:"serial,omitempty"`

	// Firmware vendor.
	Vendor *string `json:"vendor,omitempty"`

	// Firmware version.
	Version *string `json:"version,omitempty"`
}

// Hardware - Device hardware data
type Hardware struct {
	// Hardware model.
	Model *string `json:"model,omitempty"`

	// Hardware serial number.
	SerialNumber *string `json:"serialNumber,omitempty"`

	// Hardware vendor.
	Vendor *string `json:"vendor,omitempty"`
}

// IotAlertsGetOptions contains the optional parameters for the IotAlerts.Get method.
type IotAlertsGetOptions struct {
	// placeholder for future optional parameters
}

// IotAlertsListOptions contains the optional parameters for the IotAlerts.List method.
type IotAlertsListOptions struct {
	// Skip token used for pagination
	SkipToken *string
}

// IotAlertsPatchOptions contains the optional parameters for the IotAlerts.Patch method.
type IotAlertsPatchOptions struct {
	// placeholder for future optional parameters
}

// IotDeviceVulnerabilityGetOptions contains the optional parameters for the IotDeviceVulnerability.Get method.
type IotDeviceVulnerabilityGetOptions struct {
	// placeholder for future optional parameters
}

// IotDeviceVulnerabilityListOptions contains the optional parameters for the IotDeviceVulnerability.List method.
type IotDeviceVulnerabilityListOptions struct {
	// Device ID filter
	DeviceID *string
	// Skip token used for pagination
	SkipToken *string
}

// IotRecommendationsGetOptions contains the optional parameters for the IotRecommendations.Get method.
type IotRecommendationsGetOptions struct {
	// placeholder for future optional parameters
}

// IotRecommendationsListOptions contains the optional parameters for the IotRecommendations.List method.
type IotRecommendationsListOptions struct {
	// Skip token used for pagination
	SkipToken *string
}

// LocationList - List of Defender for IoT locations
type LocationList struct {
	// READ-ONLY; Link to next page of resources.
	NextLink *string `json:"nextLink,omitempty" azure:"ro"`

	// READ-ONLY; List data
	Value []*LocationModel `json:"value,omitempty" azure:"ro"`
}

// MarshalJSON implements the json.Marshaller interface for type LocationList.
func (l LocationList) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "nextLink", l.NextLink)
	populate(objectMap, "value", l.Value)
	return json.Marshal(objectMap)
}

// LocationModel - IoT Defender location
type LocationModel struct {
	ProxyResource
	// IoT Defender location properties
	Properties map[string]interface{} `json:"properties,omitempty"`

	// READ-ONLY; Azure Resource Manager metadata containing createdBy and modifiedBy information.
	SystemData *SystemData `json:"systemData,omitempty" azure:"ro"`
}

// LocationsGetOptions contains the optional parameters for the Locations.Get method.
type LocationsGetOptions struct {
	// placeholder for future optional parameters
}

// LocationsListOptions contains the optional parameters for the Locations.List method.
type LocationsListOptions struct {
	// placeholder for future optional parameters
}

// MergedDevice - Merged device data
type MergedDevice struct {
	// READ-ONLY; Device data source
	DeviceDataSource *DeviceDataSource `json:"deviceDataSource,omitempty" azure:"ro"`

	// READ-ONLY; device id
	ID *string `json:"id,omitempty" azure:"ro"`

	// READ-ONLY; Device sensor data
	Sensor *Sensor `json:"sensor,omitempty" azure:"ro"`
}

// Nic - Network interface card properties
type Nic struct {
	// READ-ONLY; Ipv4 address
	IPv4Address *string `json:"ipv4Address,omitempty" azure:"ro"`

	// READ-ONLY; Ipv6 address
	IPv6Address *string `json:"ipv6Address,omitempty" azure:"ro"`

	// READ-ONLY; Last seen time
	LastSeen *time.Time `json:"lastSeen,omitempty" azure:"ro"`

	// READ-ONLY; Mac address
	MacAddress *string `json:"macAddress,omitempty" azure:"ro"`

	// READ-ONLY; Indicates whether the association of the mac to the ip address is certain or a guess.
	MacCertainty *MacCertainty `json:"macCertainty,omitempty" azure:"ro"`

	// READ-ONLY; Network adapter vendor.
	NetworkAdapterVendor *string `json:"networkAdapterVendor,omitempty" azure:"ro"`

	// READ-ONLY; List of virtual LAN (vlan)
	Vlans []*string `json:"vlans,omitempty" azure:"ro"`
}

// MarshalJSON implements the json.Marshaller interface for type Nic.
func (n Nic) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "ipv4Address", n.IPv4Address)
	populate(objectMap, "ipv6Address", n.IPv6Address)
	populateTimeRFC3339(objectMap, "lastSeen", n.LastSeen)
	populate(objectMap, "macAddress", n.MacAddress)
	populate(objectMap, "macCertainty", n.MacCertainty)
	populate(objectMap, "networkAdapterVendor", n.NetworkAdapterVendor)
	populate(objectMap, "vlans", n.Vlans)
	return json.Marshal(objectMap)
}

// UnmarshalJSON implements the json.Unmarshaller interface for type Nic.
func (n *Nic) UnmarshalJSON(data []byte) error {
	var rawMsg map[string]json.RawMessage
	if err := json.Unmarshal(data, &rawMsg); err != nil {
		return err
	}
	for key, val := range rawMsg {
		var err error
		switch key {
		case "ipv4Address":
			err = unpopulate(val, &n.IPv4Address)
			delete(rawMsg, key)
		case "ipv6Address":
			err = unpopulate(val, &n.IPv6Address)
			delete(rawMsg, key)
		case "lastSeen":
			err = unpopulateTimeRFC3339(val, &n.LastSeen)
			delete(rawMsg, key)
		case "macAddress":
			err = unpopulate(val, &n.MacAddress)
			delete(rawMsg, key)
		case "macCertainty":
			err = unpopulate(val, &n.MacCertainty)
			delete(rawMsg, key)
		case "networkAdapterVendor":
			err = unpopulate(val, &n.NetworkAdapterVendor)
			delete(rawMsg, key)
		case "vlans":
			err = unpopulate(val, &n.Vlans)
			delete(rawMsg, key)
		}
		if err != nil {
			return err
		}
	}
	return nil
}

// OnPremiseSensor - On-premise IoT sensor
type OnPremiseSensor struct {
	ProxyResource
	// On-premise IoT sensor properties
	Properties map[string]interface{} `json:"properties,omitempty"`

	// READ-ONLY; Azure Resource Manager metadata containing createdBy and modifiedBy information.
	SystemData *SystemData `json:"systemData,omitempty" azure:"ro"`
}

// OnPremiseSensorsCreateOrUpdateOptions contains the optional parameters for the OnPremiseSensors.CreateOrUpdate method.
type OnPremiseSensorsCreateOrUpdateOptions struct {
	// placeholder for future optional parameters
}

// OnPremiseSensorsDeleteOptions contains the optional parameters for the OnPremiseSensors.Delete method.
type OnPremiseSensorsDeleteOptions struct {
	// placeholder for future optional parameters
}

// OnPremiseSensorsDownloadActivationOptions contains the optional parameters for the OnPremiseSensors.DownloadActivation method.
type OnPremiseSensorsDownloadActivationOptions struct {
	// placeholder for future optional parameters
}

// OnPremiseSensorsDownloadResetPasswordOptions contains the optional parameters for the OnPremiseSensors.DownloadResetPassword method.
type OnPremiseSensorsDownloadResetPasswordOptions struct {
	// placeholder for future optional parameters
}

// OnPremiseSensorsGetOptions contains the optional parameters for the OnPremiseSensors.Get method.
type OnPremiseSensorsGetOptions struct {
	// placeholder for future optional parameters
}

// OnPremiseSensorsList - List of on-premise IoT sensors
type OnPremiseSensorsList struct {
	// READ-ONLY; List data
	Value []*OnPremiseSensor `json:"value,omitempty" azure:"ro"`
}

// MarshalJSON implements the json.Marshaller interface for type OnPremiseSensorsList.
func (o OnPremiseSensorsList) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "value", o.Value)
	return json.Marshal(objectMap)
}

// OnPremiseSensorsListOptions contains the optional parameters for the OnPremiseSensors.List method.
type OnPremiseSensorsListOptions struct {
	// placeholder for future optional parameters
}

// OperatingSystem - Device operating system data
type OperatingSystem struct {
	// OS architecture
	Architecture *string `json:"architecture,omitempty"`

	// OS build
	Build *string `json:"build,omitempty"`

	// OS distribution
	Distribution *string `json:"distribution,omitempty"`

	// OS platform
	Platform *string `json:"platform,omitempty"`

	// OS version
	Version *string `json:"version,omitempty"`
}

// Operation resource
type Operation struct {
	// Properties on the operation
	Display *OperationDisplay `json:"display,omitempty"`

	// Whether operation is a data action
	IsDataAction *bool `json:"isDataAction,omitempty"`

	// Operation name for display purposes
	Name *string `json:"name,omitempty"`

	// origin of the operation
	Origin *string `json:"origin,omitempty"`

	// properties for the operation meta info
	Properties *OperationProperties `json:"properties,omitempty"`
}

// OperationDisplay - The response model for get operation properties
type OperationDisplay struct {
	// Description of the operation for display purposes
	Description *string `json:"description,omitempty"`

	// Name of the operation for display purposes
	Operation *string `json:"operation,omitempty"`

	// Name of the provider for display purposes
	Provider *string `json:"provider,omitempty"`

	// Name of the resource type for display purposes
	Resource *string `json:"resource,omitempty"`
}

// OperationList - Paged list of operation resources
type OperationList struct {
	// REQUIRED; Collection of items of type results.
	Value []*Operation `json:"value,omitempty"`

	// Total item count.
	Count *int64 `json:"count,omitempty"`

	// The Url of next result page.
	NextLink *string `json:"nextLink,omitempty"`
}

// MarshalJSON implements the json.Marshaller interface for type OperationList.
func (o OperationList) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "count", o.Count)
	populate(objectMap, "nextLink", o.NextLink)
	populate(objectMap, "value", o.Value)
	return json.Marshal(objectMap)
}

// OperationMetaLogSpecification - log specifications for operation api
type OperationMetaLogSpecification struct {
	// blob duration of the log
	BlobDuration *string `json:"blobDuration,omitempty"`

	// localized name of the log category
	DisplayName *string `json:"displayName,omitempty"`

	// name of the log category
	Name *string `json:"name,omitempty"`
}

// OperationMetaMetricSpecification - metric specifications for the operation
type OperationMetaMetricSpecification struct {
	// aggregation type of metric
	AggregationType *string `json:"aggregationType,omitempty"`

	// properties for dimension
	Dimensions []*DimensionProperties `json:"dimensions,omitempty"`

	// description of the metric
	DisplayDescription *string `json:"displayDescription,omitempty"`

	// localized name of the metric
	DisplayName *string `json:"displayName,omitempty"`

	// enable regional mdm account
	EnableRegionalMdmAccount *string `json:"enableRegionalMdmAccount,omitempty"`

	// internal metric name
	InternalMetricName *string `json:"internalMetricName,omitempty"`

	// name of the metric
	Name *string `json:"name,omitempty"`

	// dimension name use to replace resource id if specified
	ResourceIDDimensionNameOverride *string `json:"resourceIdDimensionNameOverride,omitempty"`

	// Metric namespace. Only set the namespace if different from the default value, leaving it empty makes it use the value from the ARM manifest.
	SourceMdmNamespace *string `json:"sourceMdmNamespace,omitempty"`

	// supported aggregation types
	SupportedAggregationTypes []*string `json:"supportedAggregationTypes,omitempty"`

	// supported time grain types
	SupportedTimeGrainTypes []*string `json:"supportedTimeGrainTypes,omitempty"`

	// units for the metric
	Unit *string `json:"unit,omitempty"`
}

// MarshalJSON implements the json.Marshaller interface for type OperationMetaMetricSpecification.
func (o OperationMetaMetricSpecification) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "aggregationType", o.AggregationType)
	populate(objectMap, "dimensions", o.Dimensions)
	populate(objectMap, "displayDescription", o.DisplayDescription)
	populate(objectMap, "displayName", o.DisplayName)
	populate(objectMap, "enableRegionalMdmAccount", o.EnableRegionalMdmAccount)
	populate(objectMap, "internalMetricName", o.InternalMetricName)
	populate(objectMap, "name", o.Name)
	populate(objectMap, "resourceIdDimensionNameOverride", o.ResourceIDDimensionNameOverride)
	populate(objectMap, "sourceMdmNamespace", o.SourceMdmNamespace)
	populate(objectMap, "supportedAggregationTypes", o.SupportedAggregationTypes)
	populate(objectMap, "supportedTimeGrainTypes", o.SupportedTimeGrainTypes)
	populate(objectMap, "unit", o.Unit)
	return json.Marshal(objectMap)
}

// OperationMetaServiceSpecification - The operation meta service specification
type OperationMetaServiceSpecification struct {
	// log specifications for the operation
	LogSpecifications []*OperationMetaLogSpecification `json:"logSpecifications,omitempty"`

	// metric specifications for the operation
	MetricSpecifications []*OperationMetaMetricSpecification `json:"metricSpecifications,omitempty"`
}

// MarshalJSON implements the json.Marshaller interface for type OperationMetaServiceSpecification.
func (o OperationMetaServiceSpecification) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "logSpecifications", o.LogSpecifications)
	populate(objectMap, "metricSpecifications", o.MetricSpecifications)
	return json.Marshal(objectMap)
}

// OperationProperties - properties on meta info
type OperationProperties struct {
	// meta service specification
	ServiceSpecification *OperationMetaServiceSpecification `json:"serviceSpecification,omitempty"`
}

// OperationsListOptions contains the optional parameters for the Operations.List method.
type OperationsListOptions struct {
	// placeholder for future optional parameters
}

// Package - Device package data
type Package struct {
	// Package name.
	Name *string `json:"name,omitempty"`

	// Package version.
	Version *string `json:"version,omitempty"`
}

// PackageDownloadInfo - Information on a specific package download
type PackageDownloadInfo struct {
	// READ-ONLY; Download link
	Link *string `json:"link,omitempty" azure:"ro"`

	// READ-ONLY; Version number
	Version *string `json:"version,omitempty" azure:"ro"`

	// READ-ONLY; Kind of the version
	VersionKind *VersionKind `json:"versionKind,omitempty" azure:"ro"`
}

// PackageDownloads - Information about package downloads
type PackageDownloads struct {
	// READ-ONLY; Authorized devices import template
	AuthorizedDevicesImportTemplate []*PackageDownloadInfo `json:"authorizedDevicesImportTemplate,omitempty" azure:"ro"`

	// READ-ONLY; All downloads for Central Manager
	CentralManager *PackageDownloadsCentralManager `json:"centralManager,omitempty" azure:"ro"`

	// READ-ONLY; Authorized devices import template
	DeviceInformationUpdateImportTemplate []*PackageDownloadInfo `json:"deviceInformationUpdateImportTemplate,omitempty" azure:"ro"`

	// READ-ONLY; Contains all Sensor binary downloads
	Sensor *PackageDownloadsSensor `json:"sensor,omitempty" azure:"ro"`

	// READ-ONLY; SNMP Server file
	Snmp []*PackageDownloadInfo `json:"snmp,omitempty" azure:"ro"`

	// READ-ONLY; All downloads for threat intelligence
	ThreatIntelligence []*PackageDownloadInfo `json:"threatIntelligence,omitempty" azure:"ro"`

	// READ-ONLY; Used for local configuration export
	WmiTool []*PackageDownloadInfo `json:"wmiTool,omitempty" azure:"ro"`
}

// MarshalJSON implements the json.Marshaller interface for type PackageDownloads.
func (p PackageDownloads) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "authorizedDevicesImportTemplate", p.AuthorizedDevicesImportTemplate)
	populate(objectMap, "centralManager", p.CentralManager)
	populate(objectMap, "deviceInformationUpdateImportTemplate", p.DeviceInformationUpdateImportTemplate)
	populate(objectMap, "sensor", p.Sensor)
	populate(objectMap, "snmp", p.Snmp)
	populate(objectMap, "threatIntelligence", p.ThreatIntelligence)
	populate(objectMap, "wmiTool", p.WmiTool)
	return json.Marshal(objectMap)
}

// PackageDownloadsCentralManager - All downloads for Central Manager
type PackageDownloadsCentralManager struct {
	// READ-ONLY; Contains full package downloads
	Full *PackageDownloadsCentralManagerFull `json:"full,omitempty" azure:"ro"`

	// READ-ONLY; Central Manager upgrade package downloads (on existing installations)
	Upgrade []*UpgradePackageDownloadInfo `json:"upgrade,omitempty" azure:"ro"`
}

// MarshalJSON implements the json.Marshaller interface for type PackageDownloadsCentralManager.
func (p PackageDownloadsCentralManager) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "full", p.Full)
	populate(objectMap, "upgrade", p.Upgrade)
	return json.Marshal(objectMap)
}

// PackageDownloadsCentralManagerFull - Contains full package downloads
type PackageDownloadsCentralManagerFull struct {
	// READ-ONLY; Contains all ISO full versions of the Central Manager
	Iso []*PackageDownloadInfo `json:"iso,omitempty" azure:"ro"`

	// READ-ONLY; Contains all OVF (virtual machine) full versions of the Central Manager
	Ovf *PackageDownloadsCentralManagerFullOvf `json:"ovf,omitempty" azure:"ro"`
}

// MarshalJSON implements the json.Marshaller interface for type PackageDownloadsCentralManagerFull.
func (p PackageDownloadsCentralManagerFull) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "iso", p.Iso)
	populate(objectMap, "ovf", p.Ovf)
	return json.Marshal(objectMap)
}

// PackageDownloadsCentralManagerFullOvf - Contains all OVF (virtual machine) full versions of the Central Manager
type PackageDownloadsCentralManagerFullOvf struct {
	// READ-ONLY; The Enterprise package type
	Enterprise []*PackageDownloadInfo `json:"enterprise,omitempty" azure:"ro"`

	// READ-ONLY; The EnterpriseHighAvailability package type
	EnterpriseHighAvailability []*PackageDownloadInfo `json:"enterpriseHighAvailability,omitempty" azure:"ro"`

	// READ-ONLY; The Medium package type
	Medium []*PackageDownloadInfo `json:"medium,omitempty" azure:"ro"`

	// READ-ONLY; The MediumHighAvailability package type
	MediumHighAvailability []*PackageDownloadInfo `json:"mediumHighAvailability,omitempty" azure:"ro"`
}

// MarshalJSON implements the json.Marshaller interface for type PackageDownloadsCentralManagerFullOvf.
func (p PackageDownloadsCentralManagerFullOvf) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "enterprise", p.Enterprise)
	populate(objectMap, "enterpriseHighAvailability", p.EnterpriseHighAvailability)
	populate(objectMap, "medium", p.Medium)
	populate(objectMap, "mediumHighAvailability", p.MediumHighAvailability)
	return json.Marshal(objectMap)
}

// PackageDownloadsSensor - Contains all Sensor binary downloads
type PackageDownloadsSensor struct {
	// Sensor upgrade package downloads (on existing installations)
	Upgrade []*UpgradePackageDownloadInfo `json:"upgrade,omitempty"`

	// READ-ONLY; Contains full package downloads
	Full *PackageDownloadsSensorFull `json:"full,omitempty" azure:"ro"`
}

// MarshalJSON implements the json.Marshaller interface for type PackageDownloadsSensor.
func (p PackageDownloadsSensor) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "full", p.Full)
	populate(objectMap, "upgrade", p.Upgrade)
	return json.Marshal(objectMap)
}

// PackageDownloadsSensorFull - Contains full package downloads
type PackageDownloadsSensorFull struct {
	// Contains all OVF (virtual machine) full versions for the sensor
	Ovf *PackageDownloadsSensorFullOvf `json:"ovf,omitempty"`

	// READ-ONLY; Contains all ISO full versions for the sensor
	Iso []*PackageDownloadInfo `json:"iso,omitempty" azure:"ro"`
}

// MarshalJSON implements the json.Marshaller interface for type PackageDownloadsSensorFull.
func (p PackageDownloadsSensorFull) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "iso", p.Iso)
	populate(objectMap, "ovf", p.Ovf)
	return json.Marshal(objectMap)
}

// PackageDownloadsSensorFullOvf - Contains all OVF (virtual machine) full versions for the sensor
type PackageDownloadsSensorFullOvf struct {
	// READ-ONLY; Enterprise package type
	Enterprise []*PackageDownloadInfo `json:"enterprise,omitempty" azure:"ro"`

	// READ-ONLY; Line package type
	Line []*PackageDownloadInfo `json:"line,omitempty" azure:"ro"`

	// READ-ONLY; Medium package type
	Medium []*PackageDownloadInfo `json:"medium,omitempty" azure:"ro"`
}

// MarshalJSON implements the json.Marshaller interface for type PackageDownloadsSensorFullOvf.
func (p PackageDownloadsSensorFullOvf) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "enterprise", p.Enterprise)
	populate(objectMap, "line", p.Line)
	populate(objectMap, "medium", p.Medium)
	return json.Marshal(objectMap)
}

// ProxyResource - The resource model definition for a Azure Resource Manager proxy resource. It will not have tags and a location
type ProxyResource struct {
	Resource
}

// RecommendationListModel - List of IoT recommendations
type RecommendationListModel struct {
	// READ-ONLY; When available, follow the URI to get the next page of data
	NextLink *string `json:"nextLink,omitempty" azure:"ro"`

	// READ-ONLY; List data
	Value []*RecommendationModel `json:"value,omitempty" azure:"ro"`
}

// MarshalJSON implements the json.Marshaller interface for type RecommendationListModel.
func (r RecommendationListModel) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "nextLink", r.NextLink)
	populate(objectMap, "value", r.Value)
	return json.Marshal(objectMap)
}

// RecommendationModel - IoT recommendation
type RecommendationModel struct {
	ProxyResource
	// Recommendation properties
	Properties *RecommendationPropertiesModel `json:"properties,omitempty"`

	// READ-ONLY; Azure Resource Manager metadata containing createdBy and modifiedBy information.
	SystemData *SystemData `json:"systemData,omitempty" azure:"ro"`
}

// RecommendationPropertiesModel - IoT recommendation properties
type RecommendationPropertiesModel struct {
	// A bag of fields which extends the recommendation information
	RecommendationAdditionalData map[string]interface{} `json:"recommendationAdditionalData,omitempty"`

	// READ-ONLY; Azure Resource Identifier of the device being reported on
	AzureResourceID *string `json:"azureResourceId,omitempty" azure:"ro"`

	// READ-ONLY; The name of the recommendation's control category
	Control *string `json:"control,omitempty" azure:"ro"`

	// READ-ONLY; The discovery time of the recommendation
	DiscoveredTimeUTC *string `json:"discoveredTimeUtc,omitempty" azure:"ro"`

	// READ-ONLY; The name of a component inside the product which generated the recommendation
	ProductComponentName *string `json:"productComponentName,omitempty" azure:"ro"`

	// READ-ONLY; The type name of the recommendation
	RecommendationType *string `json:"recommendationType,omitempty" azure:"ro"`

	// READ-ONLY; The severity of the recommendation
	Severity *RecommendationSeverity `json:"severity,omitempty" azure:"ro"`
}

// RecommendationType - IoT recommendation type.
type RecommendationType struct {
	ProxyResource
	// Recommendation type properties
	Properties *RecommendationTypeProperties `json:"properties,omitempty"`

	// READ-ONLY; Azure Resource Manager metadata containing createdBy and modifiedBy information.
	SystemData *SystemData `json:"systemData,omitempty" azure:"ro"`
}

// RecommendationTypeList - List of recommendation types
type RecommendationTypeList struct {
	// List data
	Value []*RecommendationType `json:"value,omitempty"`
}

// MarshalJSON implements the json.Marshaller interface for type RecommendationTypeList.
func (r RecommendationTypeList) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "value", r.Value)
	return json.Marshal(objectMap)
}

// RecommendationTypeProperties - IoT recommendation type information.
type RecommendationTypeProperties struct {
	// READ-ONLY; The name of the recommendation's control category
	Control *string `json:"control,omitempty" azure:"ro"`

	// READ-ONLY; The alert's data source
	DataSource *string `json:"dataSource,omitempty" azure:"ro"`

	// READ-ONLY; Description of the suspected vulnerability and meaning.
	Description *string `json:"description,omitempty" azure:"ro"`

	// READ-ONLY; The name of a component inside the product which generated the recommendation
	ProductComponentName *string `json:"productComponentName,omitempty" azure:"ro"`

	// READ-ONLY; The name of the product which published this recommendation
	ProductName *string `json:"productName,omitempty" azure:"ro"`

	// READ-ONLY; The display name of the recommendation
	RecommendationDisplayName *string `json:"recommendationDisplayName,omitempty" azure:"ro"`

	// READ-ONLY; Manual action items to take to resolve the recommendation
	RemediationSteps []*string `json:"remediationSteps,omitempty" azure:"ro"`

	// READ-ONLY; The severity of the recommendation
	Severity *RecommendationSeverity `json:"severity,omitempty" azure:"ro"`

	// READ-ONLY; The name of the vendor that raised the recommendation
	VendorName *string `json:"vendorName,omitempty" azure:"ro"`
}

// MarshalJSON implements the json.Marshaller interface for type RecommendationTypeProperties.
func (r RecommendationTypeProperties) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "control", r.Control)
	populate(objectMap, "dataSource", r.DataSource)
	populate(objectMap, "description", r.Description)
	populate(objectMap, "productComponentName", r.ProductComponentName)
	populate(objectMap, "productName", r.ProductName)
	populate(objectMap, "recommendationDisplayName", r.RecommendationDisplayName)
	populate(objectMap, "remediationSteps", r.RemediationSteps)
	populate(objectMap, "severity", r.Severity)
	populate(objectMap, "vendorName", r.VendorName)
	return json.Marshal(objectMap)
}

// RecommendationTypesGetOptions contains the optional parameters for the RecommendationTypes.Get method.
type RecommendationTypesGetOptions struct {
	// placeholder for future optional parameters
}

// RecommendationTypesListOptions contains the optional parameters for the RecommendationTypes.List method.
type RecommendationTypesListOptions struct {
	// placeholder for future optional parameters
}

// ResetPasswordInput - Reset password input.
type ResetPasswordInput struct {
	// The appliance id of the sensor.
	ApplianceID *string `json:"applianceId,omitempty"`
}

// Resource - Common fields that are returned in the response for all Azure Resource Manager resources
type Resource struct {
	// READ-ONLY; Fully qualified resource ID for the resource. Ex - /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}
	ID *string `json:"id,omitempty" azure:"ro"`

	// READ-ONLY; The name of the resource
	Name *string `json:"name,omitempty" azure:"ro"`

	// READ-ONLY; The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or "Microsoft.Storage/storageAccounts"
	Type *string `json:"type,omitempty" azure:"ro"`
}

// Sensor that scanned the device
type Sensor struct {
	// READ-ONLY; Sensor name.
	Name *string `json:"name,omitempty" azure:"ro"`

	// READ-ONLY; Sensor site.
	Site *string `json:"site,omitempty" azure:"ro"`

	// READ-ONLY; Sensor type.
	Type *SensorType `json:"type,omitempty" azure:"ro"`

	// READ-ONLY; Sensor zone.
	Zone *string `json:"zone,omitempty" azure:"ro"`
}

// SensorModel - IoT sensor model
type SensorModel struct {
	Resource
	// IoT sensor properties
	Properties *SensorProperties `json:"properties,omitempty"`

	// READ-ONLY; Azure Resource Manager metadata containing createdBy and modifiedBy information.
	SystemData *SystemData `json:"systemData,omitempty" azure:"ro"`
}

// SensorProperties - IoT sensor properties
type SensorProperties struct {
	// Type of sensor
	SensorType *SensorType `json:"sensorType,omitempty"`

	// TI Automatic mode status of the IoT sensor
	TiAutomaticUpdates *bool `json:"tiAutomaticUpdates,omitempty"`

	// Zone of the IoT sensor
	Zone *string `json:"zone,omitempty"`

	// READ-ONLY; Last connectivity time of the IoT sensor
	ConnectivityTime *string `json:"connectivityTime,omitempty" azure:"ro"`

	// READ-ONLY; Dynamic mode status of the IoT sensor
	DynamicLearning *bool `json:"dynamicLearning,omitempty" azure:"ro"`

	// READ-ONLY; Learning mode status of the IoT sensor
	LearningMode *bool `json:"learningMode,omitempty" azure:"ro"`

	// READ-ONLY; Status of the IoT sensor
	SensorStatus *SensorStatus `json:"sensorStatus,omitempty" azure:"ro"`

	// READ-ONLY; Version of the IoT sensor
	SensorVersion *string `json:"sensorVersion,omitempty" azure:"ro"`

	// READ-ONLY; TI Status of the IoT sensor
	TiStatus *TiStatus `json:"tiStatus,omitempty" azure:"ro"`

	// READ-ONLY; TI Version of the IoT sensor
	TiVersion *string `json:"tiVersion,omitempty" azure:"ro"`
}

// SensorsCreateOrUpdateOptions contains the optional parameters for the Sensors.CreateOrUpdate method.
type SensorsCreateOrUpdateOptions struct {
	// placeholder for future optional parameters
}

// SensorsDeleteOptions contains the optional parameters for the Sensors.Delete method.
type SensorsDeleteOptions struct {
	// placeholder for future optional parameters
}

// SensorsDownloadActivationOptions contains the optional parameters for the Sensors.DownloadActivation method.
type SensorsDownloadActivationOptions struct {
	// placeholder for future optional parameters
}

// SensorsDownloadResetPasswordOptions contains the optional parameters for the Sensors.DownloadResetPassword method.
type SensorsDownloadResetPasswordOptions struct {
	// placeholder for future optional parameters
}

// SensorsGetOptions contains the optional parameters for the Sensors.Get method.
type SensorsGetOptions struct {
	// placeholder for future optional parameters
}

// SensorsList - List of IoT sensors
type SensorsList struct {
	// READ-ONLY; List data
	Value []*SensorModel `json:"value,omitempty" azure:"ro"`
}

// MarshalJSON implements the json.Marshaller interface for type SensorsList.
func (s SensorsList) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "value", s.Value)
	return json.Marshal(objectMap)
}

// SensorsListOptions contains the optional parameters for the Sensors.List method.
type SensorsListOptions struct {
	// placeholder for future optional parameters
}

// SensorsTriggerTiPackageUpdateOptions contains the optional parameters for the Sensors.TriggerTiPackageUpdate method.
type SensorsTriggerTiPackageUpdateOptions struct {
	// placeholder for future optional parameters
}

// SiteModel - IoT site model
type SiteModel struct {
	ProxyResource
	// IoT site properties
	Properties *SiteProperties `json:"properties,omitempty"`

	// READ-ONLY; Azure Resource Manager metadata containing createdBy and modifiedBy information.
	SystemData *SystemData `json:"systemData,omitempty" azure:"ro"`
}

// SiteProperties - IoT site properties
type SiteProperties struct {
	// REQUIRED; Display name of the IoT site
	DisplayName *string `json:"displayName,omitempty"`

	// Tags of the IoT site
	Tags map[string]*string `json:"tags,omitempty"`
}

// MarshalJSON implements the json.Marshaller interface for type SiteProperties.
func (s SiteProperties) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "displayName", s.DisplayName)
	populate(objectMap, "tags", s.Tags)
	return json.Marshal(objectMap)
}

// SitesCreateOrUpdateOptions contains the optional parameters for the Sites.CreateOrUpdate method.
type SitesCreateOrUpdateOptions struct {
	// placeholder for future optional parameters
}

// SitesDeleteOptions contains the optional parameters for the Sites.Delete method.
type SitesDeleteOptions struct {
	// placeholder for future optional parameters
}

// SitesGetOptions contains the optional parameters for the Sites.Get method.
type SitesGetOptions struct {
	// placeholder for future optional parameters
}

// SitesList - List of IoT sites
type SitesList struct {
	// READ-ONLY; List data
	Value []*SiteModel `json:"value,omitempty" azure:"ro"`
}

// MarshalJSON implements the json.Marshaller interface for type SitesList.
func (s SitesList) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "value", s.Value)
	return json.Marshal(objectMap)
}

// SitesListOptions contains the optional parameters for the Sites.List method.
type SitesListOptions struct {
	// placeholder for future optional parameters
}

// Slot data in PLC backplane
type Slot struct {
	// A bag of fields which extends the slot information.
	AdditionalData map[string]interface{} `json:"additionalData,omitempty"`

	// Firmware revision of the slot.
	FirmwareVersion *string `json:"firmwareVersion,omitempty"`

	// Hardware revision of the slot.
	HardwareRevision *string `json:"hardwareRevision,omitempty"`

	// Hardware vendor of the slot.
	HardwareVendor *string `json:"hardwareVendor,omitempty"`

	// Model of the slot.
	Model *string `json:"model,omitempty"`

	// Module version of the slot.
	ModuleVersion *string `json:"moduleVersion,omitempty"`

	// Product code of the slot.
	ProductCode *string `json:"productCode,omitempty"`

	// Serial number of the slot.
	SerialNumber *string `json:"serialNumber,omitempty"`

	// Slot type.
	SlotType *SlotType `json:"slotType,omitempty"`

	// READ-ONLY; List of Common Platform Enumeration (CPE) of the slot
	Cpes []*string `json:"cpes,omitempty" azure:"ro"`

	// READ-ONLY; Rack number in the backplane
	RackNumber *int32 `json:"rackNumber,omitempty" azure:"ro"`

	// READ-ONLY; Slot number inside the rack
	SlotNumber *int32 `json:"slotNumber,omitempty" azure:"ro"`
}

// MarshalJSON implements the json.Marshaller interface for type Slot.
func (s Slot) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "additionalData", s.AdditionalData)
	populate(objectMap, "cpes", s.Cpes)
	populate(objectMap, "firmwareVersion", s.FirmwareVersion)
	populate(objectMap, "hardwareRevision", s.HardwareRevision)
	populate(objectMap, "hardwareVendor", s.HardwareVendor)
	populate(objectMap, "model", s.Model)
	populate(objectMap, "moduleVersion", s.ModuleVersion)
	populate(objectMap, "productCode", s.ProductCode)
	populate(objectMap, "rackNumber", s.RackNumber)
	populate(objectMap, "serialNumber", s.SerialNumber)
	populate(objectMap, "slotNumber", s.SlotNumber)
	populate(objectMap, "slotType", s.SlotType)
	return json.Marshal(objectMap)
}

// SystemData - Metadata pertaining to creation and last modification of the resource.
type SystemData struct {
	// The timestamp of resource creation (UTC).
	CreatedAt *time.Time `json:"createdAt,omitempty"`

	// The identity that created the resource.
	CreatedBy *string `json:"createdBy,omitempty"`

	// The type of identity that created the resource.
	CreatedByType *CreatedByType `json:"createdByType,omitempty"`

	// The timestamp of resource last modification (UTC)
	LastModifiedAt *time.Time `json:"lastModifiedAt,omitempty"`

	// The identity that last modified the resource.
	LastModifiedBy *string `json:"lastModifiedBy,omitempty"`

	// The type of identity that last modified the resource.
	LastModifiedByType *CreatedByType `json:"lastModifiedByType,omitempty"`
}

// MarshalJSON implements the json.Marshaller interface for type SystemData.
func (s SystemData) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populateTimeRFC3339(objectMap, "createdAt", s.CreatedAt)
	populate(objectMap, "createdBy", s.CreatedBy)
	populate(objectMap, "createdByType", s.CreatedByType)
	populateTimeRFC3339(objectMap, "lastModifiedAt", s.LastModifiedAt)
	populate(objectMap, "lastModifiedBy", s.LastModifiedBy)
	populate(objectMap, "lastModifiedByType", s.LastModifiedByType)
	return json.Marshal(objectMap)
}

// UnmarshalJSON implements the json.Unmarshaller interface for type SystemData.
func (s *SystemData) UnmarshalJSON(data []byte) error {
	var rawMsg map[string]json.RawMessage
	if err := json.Unmarshal(data, &rawMsg); err != nil {
		return err
	}
	for key, val := range rawMsg {
		var err error
		switch key {
		case "createdAt":
			err = unpopulateTimeRFC3339(val, &s.CreatedAt)
			delete(rawMsg, key)
		case "createdBy":
			err = unpopulate(val, &s.CreatedBy)
			delete(rawMsg, key)
		case "createdByType":
			err = unpopulate(val, &s.CreatedByType)
			delete(rawMsg, key)
		case "lastModifiedAt":
			err = unpopulateTimeRFC3339(val, &s.LastModifiedAt)
			delete(rawMsg, key)
		case "lastModifiedBy":
			err = unpopulate(val, &s.LastModifiedBy)
			delete(rawMsg, key)
		case "lastModifiedByType":
			err = unpopulate(val, &s.LastModifiedByType)
			delete(rawMsg, key)
		}
		if err != nil {
			return err
		}
	}
	return nil
}

// TechniqueModel - Technique properties
type TechniqueModel struct {
	// READ-ONLY; Technique description
	Description *string `json:"description,omitempty" azure:"ro"`

	// READ-ONLY; Technique id
	ID *string `json:"id,omitempty" azure:"ro"`

	// READ-ONLY; Link to the technique in MITRE portal
	Link *string `json:"link,omitempty" azure:"ro"`

	// READ-ONLY; Technique display name
	Name *string `json:"name,omitempty" azure:"ro"`
}

// UpgradePackageDownloadInfo - Information on a specific package upgrade download
type UpgradePackageDownloadInfo struct {
	PackageDownloadInfo
	// READ-ONLY; Minimum base version for upgrade
	FromVersion *string `json:"fromVersion,omitempty" azure:"ro"`
}

func populate(m map[string]interface{}, k string, v interface{}) {
	if v == nil {
		return
	} else if azcore.IsNullValue(v) {
		m[k] = nil
	} else if !reflect.ValueOf(v).IsNil() {
		m[k] = v
	}
}

func unpopulate(data json.RawMessage, v interface{}) error {
	if data == nil {
		return nil
	}
	return json.Unmarshal(data, v)
}
