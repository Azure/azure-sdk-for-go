//go:build go1.18
// +build go1.18

// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

package armiotsecurity

import (
	"encoding/json"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore"
	"reflect"
)

// MarshalJSON implements the json.Marshaller interface for type DefenderSettingsList.
func (d DefenderSettingsList) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "value", d.Value)
	return json.Marshal(objectMap)
}

// MarshalJSON implements the json.Marshaller interface for type DefenderSettingsProperties.
func (d DefenderSettingsProperties) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "deviceQuota", d.DeviceQuota)
	populateTimeRFC3339(objectMap, "evaluationEndTime", d.EvaluationEndTime)
	populate(objectMap, "mdeIntegration", d.MdeIntegration)
	populate(objectMap, "onboardingKind", d.OnboardingKind)
	populate(objectMap, "sentinelWorkspaceResourceIds", d.SentinelWorkspaceResourceIDs)
	return json.Marshal(objectMap)
}

// UnmarshalJSON implements the json.Unmarshaller interface for type DefenderSettingsProperties.
func (d *DefenderSettingsProperties) UnmarshalJSON(data []byte) error {
	var rawMsg map[string]json.RawMessage
	if err := json.Unmarshal(data, &rawMsg); err != nil {
		return err
	}
	for key, val := range rawMsg {
		var err error
		switch key {
		case "deviceQuota":
			err = unpopulate(val, &d.DeviceQuota)
			delete(rawMsg, key)
		case "evaluationEndTime":
			err = unpopulateTimeRFC3339(val, &d.EvaluationEndTime)
			delete(rawMsg, key)
		case "mdeIntegration":
			err = unpopulate(val, &d.MdeIntegration)
			delete(rawMsg, key)
		case "onboardingKind":
			err = unpopulate(val, &d.OnboardingKind)
			delete(rawMsg, key)
		case "sentinelWorkspaceResourceIds":
			err = unpopulate(val, &d.SentinelWorkspaceResourceIDs)
			delete(rawMsg, key)
		}
		if err != nil {
			return err
		}
	}
	return nil
}

// MarshalJSON implements the json.Marshaller interface for type DeviceGroupList.
func (d DeviceGroupList) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "nextLink", d.NextLink)
	populate(objectMap, "value", d.Value)
	return json.Marshal(objectMap)
}

// MarshalJSON implements the json.Marshaller interface for type DeviceList.
func (d DeviceList) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "nextLink", d.NextLink)
	populate(objectMap, "value", d.Value)
	return json.Marshal(objectMap)
}

// MarshalJSON implements the json.Marshaller interface for type DeviceProperties.
func (d DeviceProperties) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "additionalFields", &d.AdditionalFields)
	populate(objectMap, "authorizedState", d.AuthorizedState)
	populate(objectMap, "businessFunction", d.BusinessFunction)
	populate(objectMap, "cpes", d.Cpes)
	populate(objectMap, "criticality", d.Criticality)
	populate(objectMap, "deviceCategoryDisplayName", d.DeviceCategoryDisplayName)
	populate(objectMap, "deviceCategoryId", d.DeviceCategoryID)
	populate(objectMap, "deviceDataSource", d.DeviceDataSource)
	populate(objectMap, "deviceName", d.DeviceName)
	populate(objectMap, "deviceStatus", d.DeviceStatus)
	populate(objectMap, "deviceSubTypeDisplayName", d.DeviceSubTypeDisplayName)
	populate(objectMap, "deviceSubTypeId", d.DeviceSubTypeID)
	populate(objectMap, "deviceTags", d.DeviceTags)
	populate(objectMap, "deviceTypeDisplayName", d.DeviceTypeDisplayName)
	populate(objectMap, "deviceTypeId", d.DeviceTypeID)
	populate(objectMap, "firmwares", d.Firmwares)
	populateTimeRFC3339(objectMap, "firstSeen", d.FirstSeen)
	populate(objectMap, "hardware", d.Hardware)
	populateTimeRFC3339(objectMap, "lastProgrammingTime", d.LastProgrammingTime)
	populateTimeRFC3339(objectMap, "lastSeen", d.LastSeen)
	populateTimeRFC3339(objectMap, "lastUpdated", d.LastUpdated)
	populate(objectMap, "mergedDevices", d.MergedDevices)
	populate(objectMap, "mergedToDeviceId", d.MergedToDeviceID)
	populate(objectMap, "nics", d.Nics)
	populate(objectMap, "onboardingStatus", d.OnboardingStatus)
	populate(objectMap, "operatingSystem", d.OperatingSystem)
	populate(objectMap, "packages", d.Packages)
	populate(objectMap, "parentDeviceId", d.ParentDeviceID)
	populate(objectMap, "parentRackNumber", d.ParentRackNumber)
	populate(objectMap, "parentSlotNumber", d.ParentSlotNumber)
	populate(objectMap, "profilingConfidence", d.ProfilingConfidence)
	populate(objectMap, "programmingState", d.ProgrammingState)
	populate(objectMap, "purdueLevel", d.PurdueLevel)
	populate(objectMap, "riskScore", d.RiskScore)
	populate(objectMap, "schemaVersion", d.SchemaVersion)
	populate(objectMap, "sensor", d.Sensor)
	populate(objectMap, "slots", d.Slots)
	return json.Marshal(objectMap)
}

// UnmarshalJSON implements the json.Unmarshaller interface for type DeviceProperties.
func (d *DeviceProperties) UnmarshalJSON(data []byte) error {
	var rawMsg map[string]json.RawMessage
	if err := json.Unmarshal(data, &rawMsg); err != nil {
		return err
	}
	for key, val := range rawMsg {
		var err error
		switch key {
		case "additionalFields":
			err = unpopulate(val, &d.AdditionalFields)
			delete(rawMsg, key)
		case "authorizedState":
			err = unpopulate(val, &d.AuthorizedState)
			delete(rawMsg, key)
		case "businessFunction":
			err = unpopulate(val, &d.BusinessFunction)
			delete(rawMsg, key)
		case "cpes":
			err = unpopulate(val, &d.Cpes)
			delete(rawMsg, key)
		case "criticality":
			err = unpopulate(val, &d.Criticality)
			delete(rawMsg, key)
		case "deviceCategoryDisplayName":
			err = unpopulate(val, &d.DeviceCategoryDisplayName)
			delete(rawMsg, key)
		case "deviceCategoryId":
			err = unpopulate(val, &d.DeviceCategoryID)
			delete(rawMsg, key)
		case "deviceDataSource":
			err = unpopulate(val, &d.DeviceDataSource)
			delete(rawMsg, key)
		case "deviceName":
			err = unpopulate(val, &d.DeviceName)
			delete(rawMsg, key)
		case "deviceStatus":
			err = unpopulate(val, &d.DeviceStatus)
			delete(rawMsg, key)
		case "deviceSubTypeDisplayName":
			err = unpopulate(val, &d.DeviceSubTypeDisplayName)
			delete(rawMsg, key)
		case "deviceSubTypeId":
			err = unpopulate(val, &d.DeviceSubTypeID)
			delete(rawMsg, key)
		case "deviceTags":
			err = unpopulate(val, &d.DeviceTags)
			delete(rawMsg, key)
		case "deviceTypeDisplayName":
			err = unpopulate(val, &d.DeviceTypeDisplayName)
			delete(rawMsg, key)
		case "deviceTypeId":
			err = unpopulate(val, &d.DeviceTypeID)
			delete(rawMsg, key)
		case "firmwares":
			err = unpopulate(val, &d.Firmwares)
			delete(rawMsg, key)
		case "firstSeen":
			err = unpopulateTimeRFC3339(val, &d.FirstSeen)
			delete(rawMsg, key)
		case "hardware":
			err = unpopulate(val, &d.Hardware)
			delete(rawMsg, key)
		case "lastProgrammingTime":
			err = unpopulateTimeRFC3339(val, &d.LastProgrammingTime)
			delete(rawMsg, key)
		case "lastSeen":
			err = unpopulateTimeRFC3339(val, &d.LastSeen)
			delete(rawMsg, key)
		case "lastUpdated":
			err = unpopulateTimeRFC3339(val, &d.LastUpdated)
			delete(rawMsg, key)
		case "mergedDevices":
			err = unpopulate(val, &d.MergedDevices)
			delete(rawMsg, key)
		case "mergedToDeviceId":
			err = unpopulate(val, &d.MergedToDeviceID)
			delete(rawMsg, key)
		case "nics":
			err = unpopulate(val, &d.Nics)
			delete(rawMsg, key)
		case "onboardingStatus":
			err = unpopulate(val, &d.OnboardingStatus)
			delete(rawMsg, key)
		case "operatingSystem":
			err = unpopulate(val, &d.OperatingSystem)
			delete(rawMsg, key)
		case "packages":
			err = unpopulate(val, &d.Packages)
			delete(rawMsg, key)
		case "parentDeviceId":
			err = unpopulate(val, &d.ParentDeviceID)
			delete(rawMsg, key)
		case "parentRackNumber":
			err = unpopulate(val, &d.ParentRackNumber)
			delete(rawMsg, key)
		case "parentSlotNumber":
			err = unpopulate(val, &d.ParentSlotNumber)
			delete(rawMsg, key)
		case "profilingConfidence":
			err = unpopulate(val, &d.ProfilingConfidence)
			delete(rawMsg, key)
		case "programmingState":
			err = unpopulate(val, &d.ProgrammingState)
			delete(rawMsg, key)
		case "purdueLevel":
			err = unpopulate(val, &d.PurdueLevel)
			delete(rawMsg, key)
		case "riskScore":
			err = unpopulate(val, &d.RiskScore)
			delete(rawMsg, key)
		case "schemaVersion":
			err = unpopulate(val, &d.SchemaVersion)
			delete(rawMsg, key)
		case "sensor":
			err = unpopulate(val, &d.Sensor)
			delete(rawMsg, key)
		case "slots":
			err = unpopulate(val, &d.Slots)
			delete(rawMsg, key)
		}
		if err != nil {
			return err
		}
	}
	return nil
}

// MarshalJSON implements the json.Marshaller interface for type ErrorDetail.
func (e ErrorDetail) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "additionalInfo", e.AdditionalInfo)
	populate(objectMap, "code", e.Code)
	populate(objectMap, "details", e.Details)
	populate(objectMap, "message", e.Message)
	populate(objectMap, "target", e.Target)
	return json.Marshal(objectMap)
}

// MarshalJSON implements the json.Marshaller interface for type ErrorModel.
func (e ErrorModel) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "code", e.Code)
	populate(objectMap, "details", e.Details)
	populate(objectMap, "message", e.Message)
	populate(objectMap, "target", e.Target)
	return json.Marshal(objectMap)
}

// MarshalJSON implements the json.Marshaller interface for type ErrorResponseModelError.
func (e ErrorResponseModelError) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "code", e.Code)
	populate(objectMap, "details", e.Details)
	populate(objectMap, "message", e.Message)
	populate(objectMap, "target", e.Target)
	return json.Marshal(objectMap)
}

// MarshalJSON implements the json.Marshaller interface for type LocationList.
func (l LocationList) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "nextLink", l.NextLink)
	populate(objectMap, "value", l.Value)
	return json.Marshal(objectMap)
}

// MarshalJSON implements the json.Marshaller interface for type Nic.
func (n Nic) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "ipv4Address", n.IPv4Address)
	populate(objectMap, "ipv6Address", n.IPv6Address)
	populateTimeRFC3339(objectMap, "lastSeen", n.LastSeen)
	populate(objectMap, "macAddress", n.MacAddress)
	populate(objectMap, "macCertainty", n.MacCertainty)
	populate(objectMap, "networkAdapterVendor", n.NetworkAdapterVendor)
	populate(objectMap, "vlans", n.Vlans)
	return json.Marshal(objectMap)
}

// UnmarshalJSON implements the json.Unmarshaller interface for type Nic.
func (n *Nic) UnmarshalJSON(data []byte) error {
	var rawMsg map[string]json.RawMessage
	if err := json.Unmarshal(data, &rawMsg); err != nil {
		return err
	}
	for key, val := range rawMsg {
		var err error
		switch key {
		case "ipv4Address":
			err = unpopulate(val, &n.IPv4Address)
			delete(rawMsg, key)
		case "ipv6Address":
			err = unpopulate(val, &n.IPv6Address)
			delete(rawMsg, key)
		case "lastSeen":
			err = unpopulateTimeRFC3339(val, &n.LastSeen)
			delete(rawMsg, key)
		case "macAddress":
			err = unpopulate(val, &n.MacAddress)
			delete(rawMsg, key)
		case "macCertainty":
			err = unpopulate(val, &n.MacCertainty)
			delete(rawMsg, key)
		case "networkAdapterVendor":
			err = unpopulate(val, &n.NetworkAdapterVendor)
			delete(rawMsg, key)
		case "vlans":
			err = unpopulate(val, &n.Vlans)
			delete(rawMsg, key)
		}
		if err != nil {
			return err
		}
	}
	return nil
}

// MarshalJSON implements the json.Marshaller interface for type OnPremiseSensorsList.
func (o OnPremiseSensorsList) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "value", o.Value)
	return json.Marshal(objectMap)
}

// MarshalJSON implements the json.Marshaller interface for type OperationList.
func (o OperationList) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "count", o.Count)
	populate(objectMap, "nextLink", o.NextLink)
	populate(objectMap, "value", o.Value)
	return json.Marshal(objectMap)
}

// MarshalJSON implements the json.Marshaller interface for type OperationMetaMetricSpecification.
func (o OperationMetaMetricSpecification) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "aggregationType", o.AggregationType)
	populate(objectMap, "dimensions", o.Dimensions)
	populate(objectMap, "displayDescription", o.DisplayDescription)
	populate(objectMap, "displayName", o.DisplayName)
	populate(objectMap, "enableRegionalMdmAccount", o.EnableRegionalMdmAccount)
	populate(objectMap, "internalMetricName", o.InternalMetricName)
	populate(objectMap, "name", o.Name)
	populate(objectMap, "resourceIdDimensionNameOverride", o.ResourceIDDimensionNameOverride)
	populate(objectMap, "sourceMdmNamespace", o.SourceMdmNamespace)
	populate(objectMap, "supportedAggregationTypes", o.SupportedAggregationTypes)
	populate(objectMap, "supportedTimeGrainTypes", o.SupportedTimeGrainTypes)
	populate(objectMap, "unit", o.Unit)
	return json.Marshal(objectMap)
}

// MarshalJSON implements the json.Marshaller interface for type OperationMetaServiceSpecification.
func (o OperationMetaServiceSpecification) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "logSpecifications", o.LogSpecifications)
	populate(objectMap, "metricSpecifications", o.MetricSpecifications)
	return json.Marshal(objectMap)
}

// MarshalJSON implements the json.Marshaller interface for type PackageDownloads.
func (p PackageDownloads) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "authorizedDevicesImportTemplate", p.AuthorizedDevicesImportTemplate)
	populate(objectMap, "centralManager", p.CentralManager)
	populate(objectMap, "deviceInformationUpdateImportTemplate", p.DeviceInformationUpdateImportTemplate)
	populate(objectMap, "sensor", p.Sensor)
	populate(objectMap, "snmp", p.Snmp)
	populate(objectMap, "threatIntelligence", p.ThreatIntelligence)
	populate(objectMap, "wmiTool", p.WmiTool)
	return json.Marshal(objectMap)
}

// MarshalJSON implements the json.Marshaller interface for type PackageDownloadsCentralManager.
func (p PackageDownloadsCentralManager) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "full", p.Full)
	populate(objectMap, "upgrade", p.Upgrade)
	return json.Marshal(objectMap)
}

// MarshalJSON implements the json.Marshaller interface for type PackageDownloadsCentralManagerFull.
func (p PackageDownloadsCentralManagerFull) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "iso", p.Iso)
	populate(objectMap, "ovf", p.Ovf)
	return json.Marshal(objectMap)
}

// MarshalJSON implements the json.Marshaller interface for type PackageDownloadsCentralManagerFullOvf.
func (p PackageDownloadsCentralManagerFullOvf) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "enterprise", p.Enterprise)
	populate(objectMap, "enterpriseHighAvailability", p.EnterpriseHighAvailability)
	populate(objectMap, "medium", p.Medium)
	populate(objectMap, "mediumHighAvailability", p.MediumHighAvailability)
	return json.Marshal(objectMap)
}

// MarshalJSON implements the json.Marshaller interface for type PackageDownloadsSensor.
func (p PackageDownloadsSensor) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "full", p.Full)
	populate(objectMap, "upgrade", p.Upgrade)
	return json.Marshal(objectMap)
}

// MarshalJSON implements the json.Marshaller interface for type PackageDownloadsSensorFull.
func (p PackageDownloadsSensorFull) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "iso", p.Iso)
	populate(objectMap, "ovf", p.Ovf)
	return json.Marshal(objectMap)
}

// MarshalJSON implements the json.Marshaller interface for type PackageDownloadsSensorFullOvf.
func (p PackageDownloadsSensorFullOvf) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "enterprise", p.Enterprise)
	populate(objectMap, "line", p.Line)
	populate(objectMap, "medium", p.Medium)
	return json.Marshal(objectMap)
}

// MarshalJSON implements the json.Marshaller interface for type SensorsList.
func (s SensorsList) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "value", s.Value)
	return json.Marshal(objectMap)
}

// MarshalJSON implements the json.Marshaller interface for type SiteProperties.
func (s SiteProperties) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "displayName", s.DisplayName)
	populate(objectMap, "tags", s.Tags)
	return json.Marshal(objectMap)
}

// MarshalJSON implements the json.Marshaller interface for type SitesList.
func (s SitesList) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "value", s.Value)
	return json.Marshal(objectMap)
}

// MarshalJSON implements the json.Marshaller interface for type Slot.
func (s Slot) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "additionalData", &s.AdditionalData)
	populate(objectMap, "cpes", s.Cpes)
	populate(objectMap, "firmwareVersion", s.FirmwareVersion)
	populate(objectMap, "hardwareRevision", s.HardwareRevision)
	populate(objectMap, "hardwareVendor", s.HardwareVendor)
	populate(objectMap, "model", s.Model)
	populate(objectMap, "moduleVersion", s.ModuleVersion)
	populate(objectMap, "productCode", s.ProductCode)
	populate(objectMap, "rackNumber", s.RackNumber)
	populate(objectMap, "serialNumber", s.SerialNumber)
	populate(objectMap, "slotNumber", s.SlotNumber)
	populate(objectMap, "slotType", s.SlotType)
	return json.Marshal(objectMap)
}

// MarshalJSON implements the json.Marshaller interface for type SystemData.
func (s SystemData) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populateTimeRFC3339(objectMap, "createdAt", s.CreatedAt)
	populate(objectMap, "createdBy", s.CreatedBy)
	populate(objectMap, "createdByType", s.CreatedByType)
	populateTimeRFC3339(objectMap, "lastModifiedAt", s.LastModifiedAt)
	populate(objectMap, "lastModifiedBy", s.LastModifiedBy)
	populate(objectMap, "lastModifiedByType", s.LastModifiedByType)
	return json.Marshal(objectMap)
}

// UnmarshalJSON implements the json.Unmarshaller interface for type SystemData.
func (s *SystemData) UnmarshalJSON(data []byte) error {
	var rawMsg map[string]json.RawMessage
	if err := json.Unmarshal(data, &rawMsg); err != nil {
		return err
	}
	for key, val := range rawMsg {
		var err error
		switch key {
		case "createdAt":
			err = unpopulateTimeRFC3339(val, &s.CreatedAt)
			delete(rawMsg, key)
		case "createdBy":
			err = unpopulate(val, &s.CreatedBy)
			delete(rawMsg, key)
		case "createdByType":
			err = unpopulate(val, &s.CreatedByType)
			delete(rawMsg, key)
		case "lastModifiedAt":
			err = unpopulateTimeRFC3339(val, &s.LastModifiedAt)
			delete(rawMsg, key)
		case "lastModifiedBy":
			err = unpopulate(val, &s.LastModifiedBy)
			delete(rawMsg, key)
		case "lastModifiedByType":
			err = unpopulate(val, &s.LastModifiedByType)
			delete(rawMsg, key)
		}
		if err != nil {
			return err
		}
	}
	return nil
}

func populate(m map[string]interface{}, k string, v interface{}) {
	if v == nil {
		return
	} else if azcore.IsNullValue(v) {
		m[k] = nil
	} else if !reflect.ValueOf(v).IsNil() {
		m[k] = v
	}
}

func unpopulate(data json.RawMessage, v interface{}) error {
	if data == nil {
		return nil
	}
	return json.Unmarshal(data, v)
}
