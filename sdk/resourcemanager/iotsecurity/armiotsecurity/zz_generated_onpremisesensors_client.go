//go:build go1.16
// +build go1.16

// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

package armiotsecurity

import (
	"context"
	"errors"
	"fmt"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/arm"
	armruntime "github.com/Azure/azure-sdk-for-go/sdk/azcore/arm/runtime"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/policy"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/runtime"
	"net/http"
	"net/url"
	"strings"
)

// OnPremiseSensorsClient contains the methods for the OnPremiseSensors group.
// Don't use this type directly, use NewOnPremiseSensorsClient() instead.
type OnPremiseSensorsClient struct {
	ep             string
	pl             runtime.Pipeline
	subscriptionID string
}

// NewOnPremiseSensorsClient creates a new instance of OnPremiseSensorsClient with the specified values.
func NewOnPremiseSensorsClient(subscriptionID string, credential azcore.TokenCredential, options *arm.ClientOptions) *OnPremiseSensorsClient {
	cp := arm.ClientOptions{}
	if options != nil {
		cp = *options
	}
	if len(cp.Host) == 0 {
		cp.Host = arm.AzurePublicCloud
	}
	return &OnPremiseSensorsClient{subscriptionID: subscriptionID, ep: string(cp.Host), pl: armruntime.NewPipeline(module, version, credential, &cp)}
}

// CreateOrUpdate - Create or update on-premise IoT sensor
// If the operation fails it returns the *ErrorResponse error type.
func (client *OnPremiseSensorsClient) CreateOrUpdate(ctx context.Context, onPremiseSensorName string, options *OnPremiseSensorsCreateOrUpdateOptions) (OnPremiseSensorsCreateOrUpdateResponse, error) {
	req, err := client.createOrUpdateCreateRequest(ctx, onPremiseSensorName, options)
	if err != nil {
		return OnPremiseSensorsCreateOrUpdateResponse{}, err
	}
	resp, err := client.pl.Do(req)
	if err != nil {
		return OnPremiseSensorsCreateOrUpdateResponse{}, err
	}
	if !runtime.HasStatusCode(resp, http.StatusOK, http.StatusCreated) {
		return OnPremiseSensorsCreateOrUpdateResponse{}, client.createOrUpdateHandleError(resp)
	}
	return client.createOrUpdateHandleResponse(resp)
}

// createOrUpdateCreateRequest creates the CreateOrUpdate request.
func (client *OnPremiseSensorsClient) createOrUpdateCreateRequest(ctx context.Context, onPremiseSensorName string, options *OnPremiseSensorsCreateOrUpdateOptions) (*policy.Request, error) {
	urlPath := "/subscriptions/{subscriptionId}/providers/Microsoft.IoTSecurity/onPremiseSensors/{onPremiseSensorName}"
	if client.subscriptionID == "" {
		return nil, errors.New("parameter client.subscriptionID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{subscriptionId}", url.PathEscape(client.subscriptionID))
	if onPremiseSensorName == "" {
		return nil, errors.New("parameter onPremiseSensorName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{onPremiseSensorName}", url.PathEscape(onPremiseSensorName))
	req, err := runtime.NewRequest(ctx, http.MethodPut, runtime.JoinPaths(client.ep, urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("api-version", "2021-02-01-preview")
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header.Set("Accept", "application/json")
	return req, nil
}

// createOrUpdateHandleResponse handles the CreateOrUpdate response.
func (client *OnPremiseSensorsClient) createOrUpdateHandleResponse(resp *http.Response) (OnPremiseSensorsCreateOrUpdateResponse, error) {
	result := OnPremiseSensorsCreateOrUpdateResponse{RawResponse: resp}
	if err := runtime.UnmarshalAsJSON(resp, &result.OnPremiseSensor); err != nil {
		return OnPremiseSensorsCreateOrUpdateResponse{}, runtime.NewResponseError(err, resp)
	}
	return result, nil
}

// createOrUpdateHandleError handles the CreateOrUpdate error response.
func (client *OnPremiseSensorsClient) createOrUpdateHandleError(resp *http.Response) error {
	body, err := runtime.Payload(resp)
	if err != nil {
		return runtime.NewResponseError(err, resp)
	}
	errType := ErrorResponse{raw: string(body)}
	if err := runtime.UnmarshalAsJSON(resp, &errType); err != nil {
		return runtime.NewResponseError(fmt.Errorf("%s\n%s", string(body), err), resp)
	}
	return runtime.NewResponseError(&errType, resp)
}

// Delete - Delete on-premise IoT sensor
// If the operation fails it returns the *ErrorResponse error type.
func (client *OnPremiseSensorsClient) Delete(ctx context.Context, onPremiseSensorName string, options *OnPremiseSensorsDeleteOptions) (OnPremiseSensorsDeleteResponse, error) {
	req, err := client.deleteCreateRequest(ctx, onPremiseSensorName, options)
	if err != nil {
		return OnPremiseSensorsDeleteResponse{}, err
	}
	resp, err := client.pl.Do(req)
	if err != nil {
		return OnPremiseSensorsDeleteResponse{}, err
	}
	if !runtime.HasStatusCode(resp, http.StatusOK, http.StatusNoContent) {
		return OnPremiseSensorsDeleteResponse{}, client.deleteHandleError(resp)
	}
	return OnPremiseSensorsDeleteResponse{RawResponse: resp}, nil
}

// deleteCreateRequest creates the Delete request.
func (client *OnPremiseSensorsClient) deleteCreateRequest(ctx context.Context, onPremiseSensorName string, options *OnPremiseSensorsDeleteOptions) (*policy.Request, error) {
	urlPath := "/subscriptions/{subscriptionId}/providers/Microsoft.IoTSecurity/onPremiseSensors/{onPremiseSensorName}"
	if client.subscriptionID == "" {
		return nil, errors.New("parameter client.subscriptionID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{subscriptionId}", url.PathEscape(client.subscriptionID))
	if onPremiseSensorName == "" {
		return nil, errors.New("parameter onPremiseSensorName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{onPremiseSensorName}", url.PathEscape(onPremiseSensorName))
	req, err := runtime.NewRequest(ctx, http.MethodDelete, runtime.JoinPaths(client.ep, urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("api-version", "2021-02-01-preview")
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header.Set("Accept", "application/json")
	return req, nil
}

// deleteHandleError handles the Delete error response.
func (client *OnPremiseSensorsClient) deleteHandleError(resp *http.Response) error {
	body, err := runtime.Payload(resp)
	if err != nil {
		return runtime.NewResponseError(err, resp)
	}
	errType := ErrorResponse{raw: string(body)}
	if err := runtime.UnmarshalAsJSON(resp, &errType); err != nil {
		return runtime.NewResponseError(fmt.Errorf("%s\n%s", string(body), err), resp)
	}
	return runtime.NewResponseError(&errType, resp)
}

// DownloadActivation - Download sensor activation file
// If the operation fails it returns a generic error.
func (client *OnPremiseSensorsClient) DownloadActivation(ctx context.Context, onPremiseSensorName string, options *OnPremiseSensorsDownloadActivationOptions) (OnPremiseSensorsDownloadActivationResponse, error) {
	req, err := client.downloadActivationCreateRequest(ctx, onPremiseSensorName, options)
	if err != nil {
		return OnPremiseSensorsDownloadActivationResponse{}, err
	}
	resp, err := client.pl.Do(req)
	if err != nil {
		return OnPremiseSensorsDownloadActivationResponse{}, err
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {
		return OnPremiseSensorsDownloadActivationResponse{}, client.downloadActivationHandleError(resp)
	}
	return OnPremiseSensorsDownloadActivationResponse{RawResponse: resp}, nil
}

// downloadActivationCreateRequest creates the DownloadActivation request.
func (client *OnPremiseSensorsClient) downloadActivationCreateRequest(ctx context.Context, onPremiseSensorName string, options *OnPremiseSensorsDownloadActivationOptions) (*policy.Request, error) {
	urlPath := "/subscriptions/{subscriptionId}/providers/Microsoft.IoTSecurity/onPremiseSensors/{onPremiseSensorName}/downloadActivation"
	if client.subscriptionID == "" {
		return nil, errors.New("parameter client.subscriptionID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{subscriptionId}", url.PathEscape(client.subscriptionID))
	if onPremiseSensorName == "" {
		return nil, errors.New("parameter onPremiseSensorName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{onPremiseSensorName}", url.PathEscape(onPremiseSensorName))
	req, err := runtime.NewRequest(ctx, http.MethodPost, runtime.JoinPaths(client.ep, urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("api-version", "2021-02-01-preview")
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.SkipBodyDownload()
	req.Raw().Header.Set("Accept", "application/zip")
	return req, nil
}

// downloadActivationHandleError handles the DownloadActivation error response.
func (client *OnPremiseSensorsClient) downloadActivationHandleError(resp *http.Response) error {
	body, err := runtime.Payload(resp)
	if err != nil {
		return runtime.NewResponseError(err, resp)
	}
	if len(body) == 0 {
		return runtime.NewResponseError(errors.New(resp.Status), resp)
	}
	return runtime.NewResponseError(errors.New(string(body)), resp)
}

// DownloadResetPassword - Download file for reset password of the sensor
// If the operation fails it returns a generic error.
func (client *OnPremiseSensorsClient) DownloadResetPassword(ctx context.Context, onPremiseSensorName string, body ResetPasswordInput, options *OnPremiseSensorsDownloadResetPasswordOptions) (OnPremiseSensorsDownloadResetPasswordResponse, error) {
	req, err := client.downloadResetPasswordCreateRequest(ctx, onPremiseSensorName, body, options)
	if err != nil {
		return OnPremiseSensorsDownloadResetPasswordResponse{}, err
	}
	resp, err := client.pl.Do(req)
	if err != nil {
		return OnPremiseSensorsDownloadResetPasswordResponse{}, err
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {
		return OnPremiseSensorsDownloadResetPasswordResponse{}, client.downloadResetPasswordHandleError(resp)
	}
	return OnPremiseSensorsDownloadResetPasswordResponse{RawResponse: resp}, nil
}

// downloadResetPasswordCreateRequest creates the DownloadResetPassword request.
func (client *OnPremiseSensorsClient) downloadResetPasswordCreateRequest(ctx context.Context, onPremiseSensorName string, body ResetPasswordInput, options *OnPremiseSensorsDownloadResetPasswordOptions) (*policy.Request, error) {
	urlPath := "/subscriptions/{subscriptionId}/providers/Microsoft.IoTSecurity/onPremiseSensors/{onPremiseSensorName}/downloadResetPassword"
	if client.subscriptionID == "" {
		return nil, errors.New("parameter client.subscriptionID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{subscriptionId}", url.PathEscape(client.subscriptionID))
	if onPremiseSensorName == "" {
		return nil, errors.New("parameter onPremiseSensorName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{onPremiseSensorName}", url.PathEscape(onPremiseSensorName))
	req, err := runtime.NewRequest(ctx, http.MethodPost, runtime.JoinPaths(client.ep, urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("api-version", "2021-02-01-preview")
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.SkipBodyDownload()
	req.Raw().Header.Set("Accept", "application/zip")
	return req, runtime.MarshalAsJSON(req, body)
}

// downloadResetPasswordHandleError handles the DownloadResetPassword error response.
func (client *OnPremiseSensorsClient) downloadResetPasswordHandleError(resp *http.Response) error {
	body, err := runtime.Payload(resp)
	if err != nil {
		return runtime.NewResponseError(err, resp)
	}
	if len(body) == 0 {
		return runtime.NewResponseError(errors.New(resp.Status), resp)
	}
	return runtime.NewResponseError(errors.New(string(body)), resp)
}

// Get - Get on-premise IoT sensor
// If the operation fails it returns the *ErrorResponse error type.
func (client *OnPremiseSensorsClient) Get(ctx context.Context, onPremiseSensorName string, options *OnPremiseSensorsGetOptions) (OnPremiseSensorsGetResponse, error) {
	req, err := client.getCreateRequest(ctx, onPremiseSensorName, options)
	if err != nil {
		return OnPremiseSensorsGetResponse{}, err
	}
	resp, err := client.pl.Do(req)
	if err != nil {
		return OnPremiseSensorsGetResponse{}, err
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {
		return OnPremiseSensorsGetResponse{}, client.getHandleError(resp)
	}
	return client.getHandleResponse(resp)
}

// getCreateRequest creates the Get request.
func (client *OnPremiseSensorsClient) getCreateRequest(ctx context.Context, onPremiseSensorName string, options *OnPremiseSensorsGetOptions) (*policy.Request, error) {
	urlPath := "/subscriptions/{subscriptionId}/providers/Microsoft.IoTSecurity/onPremiseSensors/{onPremiseSensorName}"
	if client.subscriptionID == "" {
		return nil, errors.New("parameter client.subscriptionID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{subscriptionId}", url.PathEscape(client.subscriptionID))
	if onPremiseSensorName == "" {
		return nil, errors.New("parameter onPremiseSensorName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{onPremiseSensorName}", url.PathEscape(onPremiseSensorName))
	req, err := runtime.NewRequest(ctx, http.MethodGet, runtime.JoinPaths(client.ep, urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("api-version", "2021-02-01-preview")
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header.Set("Accept", "application/json")
	return req, nil
}

// getHandleResponse handles the Get response.
func (client *OnPremiseSensorsClient) getHandleResponse(resp *http.Response) (OnPremiseSensorsGetResponse, error) {
	result := OnPremiseSensorsGetResponse{RawResponse: resp}
	if err := runtime.UnmarshalAsJSON(resp, &result.OnPremiseSensor); err != nil {
		return OnPremiseSensorsGetResponse{}, runtime.NewResponseError(err, resp)
	}
	return result, nil
}

// getHandleError handles the Get error response.
func (client *OnPremiseSensorsClient) getHandleError(resp *http.Response) error {
	body, err := runtime.Payload(resp)
	if err != nil {
		return runtime.NewResponseError(err, resp)
	}
	errType := ErrorResponse{raw: string(body)}
	if err := runtime.UnmarshalAsJSON(resp, &errType); err != nil {
		return runtime.NewResponseError(fmt.Errorf("%s\n%s", string(body), err), resp)
	}
	return runtime.NewResponseError(&errType, resp)
}

// List - List on-premise IoT sensors
// If the operation fails it returns the *ErrorResponse error type.
func (client *OnPremiseSensorsClient) List(ctx context.Context, options *OnPremiseSensorsListOptions) (OnPremiseSensorsListResponse, error) {
	req, err := client.listCreateRequest(ctx, options)
	if err != nil {
		return OnPremiseSensorsListResponse{}, err
	}
	resp, err := client.pl.Do(req)
	if err != nil {
		return OnPremiseSensorsListResponse{}, err
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {
		return OnPremiseSensorsListResponse{}, client.listHandleError(resp)
	}
	return client.listHandleResponse(resp)
}

// listCreateRequest creates the List request.
func (client *OnPremiseSensorsClient) listCreateRequest(ctx context.Context, options *OnPremiseSensorsListOptions) (*policy.Request, error) {
	urlPath := "/subscriptions/{subscriptionId}/providers/Microsoft.IoTSecurity/onPremiseSensors"
	if client.subscriptionID == "" {
		return nil, errors.New("parameter client.subscriptionID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{subscriptionId}", url.PathEscape(client.subscriptionID))
	req, err := runtime.NewRequest(ctx, http.MethodGet, runtime.JoinPaths(client.ep, urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("api-version", "2021-02-01-preview")
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header.Set("Accept", "application/json")
	return req, nil
}

// listHandleResponse handles the List response.
func (client *OnPremiseSensorsClient) listHandleResponse(resp *http.Response) (OnPremiseSensorsListResponse, error) {
	result := OnPremiseSensorsListResponse{RawResponse: resp}
	if err := runtime.UnmarshalAsJSON(resp, &result.OnPremiseSensorsList); err != nil {
		return OnPremiseSensorsListResponse{}, runtime.NewResponseError(err, resp)
	}
	return result, nil
}

// listHandleError handles the List error response.
func (client *OnPremiseSensorsClient) listHandleError(resp *http.Response) error {
	body, err := runtime.Payload(resp)
	if err != nil {
		return runtime.NewResponseError(err, resp)
	}
	errType := ErrorResponse{raw: string(body)}
	if err := runtime.UnmarshalAsJSON(resp, &errType); err != nil {
		return runtime.NewResponseError(fmt.Errorf("%s\n%s", string(body), err), resp)
	}
	return runtime.NewResponseError(&errType, resp)
}
