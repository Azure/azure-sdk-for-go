//go:build go1.16
// +build go1.16

// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

package armkeyvault_test

import (
	"context"
	"log"

	"time"

	"github.com/Azure/azure-sdk-for-go/sdk/azcore/to"
	"github.com/Azure/azure-sdk-for-go/sdk/azidentity"
	"github.com/Azure/azure-sdk-for-go/sdk/resourcemanager/keyvault/armkeyvault"
)

// x-ms-original-file: specification/keyvault/resource-manager/Microsoft.KeyVault/preview/2021-11-01-preview/examples/createVault.json
func ExampleVaultsClient_BeginCreateOrUpdate() {
	cred, err := azidentity.NewDefaultAzureCredential(nil)
	if err != nil {
		log.Fatalf("failed to obtain a credential: %v", err)
	}
	ctx := context.Background()
	client := armkeyvault.NewVaultsClient("<subscription-id>", cred, nil)
	poller, err := client.BeginCreateOrUpdate(ctx,
		"<resource-group-name>",
		"<vault-name>",
		armkeyvault.VaultCreateOrUpdateParameters{
			Location: to.StringPtr("<location>"),
			Properties: &armkeyvault.VaultProperties{
				AccessPolicies: []*armkeyvault.AccessPolicyEntry{
					{
						ObjectID: to.StringPtr("<object-id>"),
						Permissions: &armkeyvault.Permissions{
							Certificates: []*armkeyvault.CertificatePermissions{
								armkeyvault.CertificatePermissions("get").ToPtr(),
								armkeyvault.CertificatePermissions("list").ToPtr(),
								armkeyvault.CertificatePermissions("delete").ToPtr(),
								armkeyvault.CertificatePermissions("create").ToPtr(),
								armkeyvault.CertificatePermissions("import").ToPtr(),
								armkeyvault.CertificatePermissions("update").ToPtr(),
								armkeyvault.CertificatePermissions("managecontacts").ToPtr(),
								armkeyvault.CertificatePermissions("getissuers").ToPtr(),
								armkeyvault.CertificatePermissions("listissuers").ToPtr(),
								armkeyvault.CertificatePermissions("setissuers").ToPtr(),
								armkeyvault.CertificatePermissions("deleteissuers").ToPtr(),
								armkeyvault.CertificatePermissions("manageissuers").ToPtr(),
								armkeyvault.CertificatePermissions("recover").ToPtr(),
								armkeyvault.CertificatePermissions("purge").ToPtr()},
							Keys: []*armkeyvault.KeyPermissions{
								armkeyvault.KeyPermissions("encrypt").ToPtr(),
								armkeyvault.KeyPermissions("decrypt").ToPtr(),
								armkeyvault.KeyPermissions("wrapKey").ToPtr(),
								armkeyvault.KeyPermissions("unwrapKey").ToPtr(),
								armkeyvault.KeyPermissions("sign").ToPtr(),
								armkeyvault.KeyPermissions("verify").ToPtr(),
								armkeyvault.KeyPermissions("get").ToPtr(),
								armkeyvault.KeyPermissions("list").ToPtr(),
								armkeyvault.KeyPermissions("create").ToPtr(),
								armkeyvault.KeyPermissions("update").ToPtr(),
								armkeyvault.KeyPermissions("import").ToPtr(),
								armkeyvault.KeyPermissions("delete").ToPtr(),
								armkeyvault.KeyPermissions("backup").ToPtr(),
								armkeyvault.KeyPermissions("restore").ToPtr(),
								armkeyvault.KeyPermissions("recover").ToPtr(),
								armkeyvault.KeyPermissions("purge").ToPtr()},
							Secrets: []*armkeyvault.SecretPermissions{
								armkeyvault.SecretPermissions("get").ToPtr(),
								armkeyvault.SecretPermissions("list").ToPtr(),
								armkeyvault.SecretPermissions("set").ToPtr(),
								armkeyvault.SecretPermissions("delete").ToPtr(),
								armkeyvault.SecretPermissions("backup").ToPtr(),
								armkeyvault.SecretPermissions("restore").ToPtr(),
								armkeyvault.SecretPermissions("recover").ToPtr(),
								armkeyvault.SecretPermissions("purge").ToPtr()},
						},
						TenantID: to.StringPtr("<tenant-id>"),
					}},
				EnabledForDeployment:         to.BoolPtr(true),
				EnabledForDiskEncryption:     to.BoolPtr(true),
				EnabledForTemplateDeployment: to.BoolPtr(true),
				PublicNetworkAccess:          to.StringPtr("<public-network-access>"),
				SKU: &armkeyvault.SKU{
					Name:   armkeyvault.SKUNameStandard.ToPtr(),
					Family: armkeyvault.SKUFamily("A").ToPtr(),
				},
				TenantID: to.StringPtr("<tenant-id>"),
			},
		},
		nil)
	if err != nil {
		log.Fatal(err)
	}
	res, err := poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		log.Fatal(err)
	}
	log.Printf("Response result: %#v\n", res.VaultsClientCreateOrUpdateResult)
}

// x-ms-original-file: specification/keyvault/resource-manager/Microsoft.KeyVault/preview/2021-11-01-preview/examples/updateVault.json
func ExampleVaultsClient_Update() {
	cred, err := azidentity.NewDefaultAzureCredential(nil)
	if err != nil {
		log.Fatalf("failed to obtain a credential: %v", err)
	}
	ctx := context.Background()
	client := armkeyvault.NewVaultsClient("<subscription-id>", cred, nil)
	res, err := client.Update(ctx,
		"<resource-group-name>",
		"<vault-name>",
		armkeyvault.VaultPatchParameters{
			Properties: &armkeyvault.VaultPatchProperties{
				AccessPolicies: []*armkeyvault.AccessPolicyEntry{
					{
						ObjectID: to.StringPtr("<object-id>"),
						Permissions: &armkeyvault.Permissions{
							Certificates: []*armkeyvault.CertificatePermissions{
								armkeyvault.CertificatePermissions("get").ToPtr(),
								armkeyvault.CertificatePermissions("list").ToPtr(),
								armkeyvault.CertificatePermissions("delete").ToPtr(),
								armkeyvault.CertificatePermissions("create").ToPtr(),
								armkeyvault.CertificatePermissions("import").ToPtr(),
								armkeyvault.CertificatePermissions("update").ToPtr(),
								armkeyvault.CertificatePermissions("managecontacts").ToPtr(),
								armkeyvault.CertificatePermissions("getissuers").ToPtr(),
								armkeyvault.CertificatePermissions("listissuers").ToPtr(),
								armkeyvault.CertificatePermissions("setissuers").ToPtr(),
								armkeyvault.CertificatePermissions("deleteissuers").ToPtr(),
								armkeyvault.CertificatePermissions("manageissuers").ToPtr(),
								armkeyvault.CertificatePermissions("recover").ToPtr(),
								armkeyvault.CertificatePermissions("purge").ToPtr()},
							Keys: []*armkeyvault.KeyPermissions{
								armkeyvault.KeyPermissions("encrypt").ToPtr(),
								armkeyvault.KeyPermissions("decrypt").ToPtr(),
								armkeyvault.KeyPermissions("wrapKey").ToPtr(),
								armkeyvault.KeyPermissions("unwrapKey").ToPtr(),
								armkeyvault.KeyPermissions("sign").ToPtr(),
								armkeyvault.KeyPermissions("verify").ToPtr(),
								armkeyvault.KeyPermissions("get").ToPtr(),
								armkeyvault.KeyPermissions("list").ToPtr(),
								armkeyvault.KeyPermissions("create").ToPtr(),
								armkeyvault.KeyPermissions("update").ToPtr(),
								armkeyvault.KeyPermissions("import").ToPtr(),
								armkeyvault.KeyPermissions("delete").ToPtr(),
								armkeyvault.KeyPermissions("backup").ToPtr(),
								armkeyvault.KeyPermissions("restore").ToPtr(),
								armkeyvault.KeyPermissions("recover").ToPtr(),
								armkeyvault.KeyPermissions("purge").ToPtr()},
							Secrets: []*armkeyvault.SecretPermissions{
								armkeyvault.SecretPermissions("get").ToPtr(),
								armkeyvault.SecretPermissions("list").ToPtr(),
								armkeyvault.SecretPermissions("set").ToPtr(),
								armkeyvault.SecretPermissions("delete").ToPtr(),
								armkeyvault.SecretPermissions("backup").ToPtr(),
								armkeyvault.SecretPermissions("restore").ToPtr(),
								armkeyvault.SecretPermissions("recover").ToPtr(),
								armkeyvault.SecretPermissions("purge").ToPtr()},
						},
						TenantID: to.StringPtr("<tenant-id>"),
					}},
				EnabledForDeployment:         to.BoolPtr(true),
				EnabledForDiskEncryption:     to.BoolPtr(true),
				EnabledForTemplateDeployment: to.BoolPtr(true),
				PublicNetworkAccess:          to.StringPtr("<public-network-access>"),
				SKU: &armkeyvault.SKU{
					Name:   armkeyvault.SKUNameStandard.ToPtr(),
					Family: armkeyvault.SKUFamily("A").ToPtr(),
				},
				TenantID: to.StringPtr("<tenant-id>"),
			},
		},
		nil)
	if err != nil {
		log.Fatal(err)
	}
	log.Printf("Response result: %#v\n", res.VaultsClientUpdateResult)
}

// x-ms-original-file: specification/keyvault/resource-manager/Microsoft.KeyVault/preview/2021-11-01-preview/examples/deleteVault.json
func ExampleVaultsClient_Delete() {
	cred, err := azidentity.NewDefaultAzureCredential(nil)
	if err != nil {
		log.Fatalf("failed to obtain a credential: %v", err)
	}
	ctx := context.Background()
	client := armkeyvault.NewVaultsClient("<subscription-id>", cred, nil)
	_, err = client.Delete(ctx,
		"<resource-group-name>",
		"<vault-name>",
		nil)
	if err != nil {
		log.Fatal(err)
	}
}

// x-ms-original-file: specification/keyvault/resource-manager/Microsoft.KeyVault/preview/2021-11-01-preview/examples/getVault.json
func ExampleVaultsClient_Get() {
	cred, err := azidentity.NewDefaultAzureCredential(nil)
	if err != nil {
		log.Fatalf("failed to obtain a credential: %v", err)
	}
	ctx := context.Background()
	client := armkeyvault.NewVaultsClient("<subscription-id>", cred, nil)
	res, err := client.Get(ctx,
		"<resource-group-name>",
		"<vault-name>",
		nil)
	if err != nil {
		log.Fatal(err)
	}
	log.Printf("Response result: %#v\n", res.VaultsClientGetResult)
}

// x-ms-original-file: specification/keyvault/resource-manager/Microsoft.KeyVault/preview/2021-11-01-preview/examples/updateAccessPoliciesAdd.json
func ExampleVaultsClient_UpdateAccessPolicy() {
	cred, err := azidentity.NewDefaultAzureCredential(nil)
	if err != nil {
		log.Fatalf("failed to obtain a credential: %v", err)
	}
	ctx := context.Background()
	client := armkeyvault.NewVaultsClient("<subscription-id>", cred, nil)
	res, err := client.UpdateAccessPolicy(ctx,
		"<resource-group-name>",
		"<vault-name>",
		armkeyvault.AccessPolicyUpdateKindAdd,
		armkeyvault.VaultAccessPolicyParameters{
			Properties: &armkeyvault.VaultAccessPolicyProperties{
				AccessPolicies: []*armkeyvault.AccessPolicyEntry{
					{
						ObjectID: to.StringPtr("<object-id>"),
						Permissions: &armkeyvault.Permissions{
							Certificates: []*armkeyvault.CertificatePermissions{
								armkeyvault.CertificatePermissions("get").ToPtr()},
							Keys: []*armkeyvault.KeyPermissions{
								armkeyvault.KeyPermissions("encrypt").ToPtr()},
							Secrets: []*armkeyvault.SecretPermissions{
								armkeyvault.SecretPermissions("get").ToPtr()},
						},
						TenantID: to.StringPtr("<tenant-id>"),
					}},
			},
		},
		nil)
	if err != nil {
		log.Fatal(err)
	}
	log.Printf("Response result: %#v\n", res.VaultsClientUpdateAccessPolicyResult)
}

// x-ms-original-file: specification/keyvault/resource-manager/Microsoft.KeyVault/preview/2021-11-01-preview/examples/listVaultByResourceGroup.json
func ExampleVaultsClient_ListByResourceGroup() {
	cred, err := azidentity.NewDefaultAzureCredential(nil)
	if err != nil {
		log.Fatalf("failed to obtain a credential: %v", err)
	}
	ctx := context.Background()
	client := armkeyvault.NewVaultsClient("<subscription-id>", cred, nil)
	pager := client.ListByResourceGroup("<resource-group-name>",
		&armkeyvault.VaultsClientListByResourceGroupOptions{Top: to.Int32Ptr(1)})
	for {
		nextResult := pager.NextPage(ctx)
		if err := pager.Err(); err != nil {
			log.Fatalf("failed to advance page: %v", err)
		}
		if !nextResult {
			break
		}
		for _, v := range pager.PageResponse().Value {
			log.Printf("Pager result: %#v\n", v)
		}
	}
}

// x-ms-original-file: specification/keyvault/resource-manager/Microsoft.KeyVault/preview/2021-11-01-preview/examples/listVaultBySubscription.json
func ExampleVaultsClient_ListBySubscription() {
	cred, err := azidentity.NewDefaultAzureCredential(nil)
	if err != nil {
		log.Fatalf("failed to obtain a credential: %v", err)
	}
	ctx := context.Background()
	client := armkeyvault.NewVaultsClient("<subscription-id>", cred, nil)
	pager := client.ListBySubscription(&armkeyvault.VaultsClientListBySubscriptionOptions{Top: to.Int32Ptr(1)})
	for {
		nextResult := pager.NextPage(ctx)
		if err := pager.Err(); err != nil {
			log.Fatalf("failed to advance page: %v", err)
		}
		if !nextResult {
			break
		}
		for _, v := range pager.PageResponse().Value {
			log.Printf("Pager result: %#v\n", v)
		}
	}
}

// x-ms-original-file: specification/keyvault/resource-manager/Microsoft.KeyVault/preview/2021-11-01-preview/examples/listDeletedVaults.json
func ExampleVaultsClient_ListDeleted() {
	cred, err := azidentity.NewDefaultAzureCredential(nil)
	if err != nil {
		log.Fatalf("failed to obtain a credential: %v", err)
	}
	ctx := context.Background()
	client := armkeyvault.NewVaultsClient("<subscription-id>", cred, nil)
	pager := client.ListDeleted(nil)
	for {
		nextResult := pager.NextPage(ctx)
		if err := pager.Err(); err != nil {
			log.Fatalf("failed to advance page: %v", err)
		}
		if !nextResult {
			break
		}
		for _, v := range pager.PageResponse().Value {
			log.Printf("Pager result: %#v\n", v)
		}
	}
}

// x-ms-original-file: specification/keyvault/resource-manager/Microsoft.KeyVault/preview/2021-11-01-preview/examples/getDeletedVault.json
func ExampleVaultsClient_GetDeleted() {
	cred, err := azidentity.NewDefaultAzureCredential(nil)
	if err != nil {
		log.Fatalf("failed to obtain a credential: %v", err)
	}
	ctx := context.Background()
	client := armkeyvault.NewVaultsClient("<subscription-id>", cred, nil)
	res, err := client.GetDeleted(ctx,
		"<vault-name>",
		"<location>",
		nil)
	if err != nil {
		log.Fatal(err)
	}
	log.Printf("Response result: %#v\n", res.VaultsClientGetDeletedResult)
}

// x-ms-original-file: specification/keyvault/resource-manager/Microsoft.KeyVault/preview/2021-11-01-preview/examples/purgeDeletedVault.json
func ExampleVaultsClient_BeginPurgeDeleted() {
	cred, err := azidentity.NewDefaultAzureCredential(nil)
	if err != nil {
		log.Fatalf("failed to obtain a credential: %v", err)
	}
	ctx := context.Background()
	client := armkeyvault.NewVaultsClient("<subscription-id>", cred, nil)
	poller, err := client.BeginPurgeDeleted(ctx,
		"<vault-name>",
		"<location>",
		nil)
	if err != nil {
		log.Fatal(err)
	}
	_, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		log.Fatal(err)
	}
}

// x-ms-original-file: specification/keyvault/resource-manager/Microsoft.KeyVault/preview/2021-11-01-preview/examples/listVault.json
func ExampleVaultsClient_List() {
	cred, err := azidentity.NewDefaultAzureCredential(nil)
	if err != nil {
		log.Fatalf("failed to obtain a credential: %v", err)
	}
	ctx := context.Background()
	client := armkeyvault.NewVaultsClient("<subscription-id>", cred, nil)
	pager := client.List(&armkeyvault.VaultsClientListOptions{Top: to.Int32Ptr(1)})
	for {
		nextResult := pager.NextPage(ctx)
		if err := pager.Err(); err != nil {
			log.Fatalf("failed to advance page: %v", err)
		}
		if !nextResult {
			break
		}
		for _, v := range pager.PageResponse().Value {
			log.Printf("Pager result: %#v\n", v)
		}
	}
}

// x-ms-original-file: specification/keyvault/resource-manager/Microsoft.KeyVault/preview/2021-11-01-preview/examples/checkVaultNameAvailability.json
func ExampleVaultsClient_CheckNameAvailability() {
	cred, err := azidentity.NewDefaultAzureCredential(nil)
	if err != nil {
		log.Fatalf("failed to obtain a credential: %v", err)
	}
	ctx := context.Background()
	client := armkeyvault.NewVaultsClient("<subscription-id>", cred, nil)
	res, err := client.CheckNameAvailability(ctx,
		armkeyvault.VaultCheckNameAvailabilityParameters{
			Name: to.StringPtr("<name>"),
			Type: to.StringPtr("<type>"),
		},
		nil)
	if err != nil {
		log.Fatal(err)
	}
	log.Printf("Response result: %#v\n", res.VaultsClientCheckNameAvailabilityResult)
}
