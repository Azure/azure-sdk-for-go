//go:build go1.16
// +build go1.16

// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

package armkubernetesconfiguration_test

import (
	"context"
	"log"

	"time"

	"github.com/Azure/azure-sdk-for-go/sdk/azcore/to"
	"github.com/Azure/azure-sdk-for-go/sdk/azidentity"
	"github.com/Azure/azure-sdk-for-go/sdk/resourcemanager/kubernetesconfiguration/armkubernetesconfiguration"
)

// x-ms-original-file: specification/kubernetesconfiguration/resource-manager/Microsoft.KubernetesConfiguration/preview/2022-01-01-preview/examples/GetFluxConfiguration.json
func ExampleFluxConfigurationsClient_Get() {
	cred, err := azidentity.NewDefaultAzureCredential(nil)
	if err != nil {
		log.Fatalf("failed to obtain a credential: %v", err)
	}
	ctx := context.Background()
	client := armkubernetesconfiguration.NewFluxConfigurationsClient("<subscription-id>", cred, nil)
	res, err := client.Get(ctx,
		"<resource-group-name>",
		armkubernetesconfiguration.Enum0("Microsoft.Kubernetes"),
		armkubernetesconfiguration.Enum1("connectedClusters"),
		"<cluster-name>",
		"<flux-configuration-name>",
		nil)
	if err != nil {
		log.Fatal(err)
	}
	log.Printf("Response result: %#v\n", res.FluxConfigurationsClientGetResult)
}

// x-ms-original-file: specification/kubernetesconfiguration/resource-manager/Microsoft.KubernetesConfiguration/preview/2022-01-01-preview/examples/CreateFluxConfiguration.json
func ExampleFluxConfigurationsClient_BeginCreateOrUpdate() {
	cred, err := azidentity.NewDefaultAzureCredential(nil)
	if err != nil {
		log.Fatalf("failed to obtain a credential: %v", err)
	}
	ctx := context.Background()
	client := armkubernetesconfiguration.NewFluxConfigurationsClient("<subscription-id>", cred, nil)
	poller, err := client.BeginCreateOrUpdate(ctx,
		"<resource-group-name>",
		armkubernetesconfiguration.Enum0("Microsoft.Kubernetes"),
		armkubernetesconfiguration.Enum1("connectedClusters"),
		"<cluster-name>",
		"<flux-configuration-name>",
		armkubernetesconfiguration.FluxConfiguration{
			Properties: &armkubernetesconfiguration.FluxConfigurationProperties{
				GitRepository: &armkubernetesconfiguration.GitRepositoryDefinition{
					HTTPSCACert: to.StringPtr("<httpscacert>"),
					RepositoryRef: &armkubernetesconfiguration.RepositoryRefDefinition{
						Branch: to.StringPtr("<branch>"),
					},
					SyncIntervalInSeconds: to.Int64Ptr(600),
					TimeoutInSeconds:      to.Int64Ptr(600),
					URL:                   to.StringPtr("<url>"),
				},
				Kustomizations: map[string]*armkubernetesconfiguration.KustomizationDefinition{
					"srs-kustomization1": {
						Path:                  to.StringPtr("<path>"),
						DependsOn:             []*armkubernetesconfiguration.DependsOnDefinition{},
						SyncIntervalInSeconds: to.Int64Ptr(600),
						TimeoutInSeconds:      to.Int64Ptr(600),
					},
					"srs-kustomization2": {
						Path: to.StringPtr("<path>"),
						DependsOn: []*armkubernetesconfiguration.DependsOnDefinition{
							{
								KustomizationName: to.StringPtr("<kustomization-name>"),
							}},
						Prune:                  to.BoolPtr(false),
						RetryIntervalInSeconds: to.Int64Ptr(600),
						SyncIntervalInSeconds:  to.Int64Ptr(600),
						TimeoutInSeconds:       to.Int64Ptr(600),
					},
				},
				Namespace:  to.StringPtr("<namespace>"),
				Scope:      armkubernetesconfiguration.ScopeType("cluster").ToPtr(),
				SourceKind: armkubernetesconfiguration.SourceKindType("GitRepository").ToPtr(),
				Suspend:    to.BoolPtr(false),
			},
		},
		nil)
	if err != nil {
		log.Fatal(err)
	}
	res, err := poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		log.Fatal(err)
	}
	log.Printf("Response result: %#v\n", res.FluxConfigurationsClientCreateOrUpdateResult)
}

// x-ms-original-file: specification/kubernetesconfiguration/resource-manager/Microsoft.KubernetesConfiguration/preview/2022-01-01-preview/examples/PatchFluxConfiguration.json
func ExampleFluxConfigurationsClient_BeginUpdate() {
	cred, err := azidentity.NewDefaultAzureCredential(nil)
	if err != nil {
		log.Fatalf("failed to obtain a credential: %v", err)
	}
	ctx := context.Background()
	client := armkubernetesconfiguration.NewFluxConfigurationsClient("<subscription-id>", cred, nil)
	poller, err := client.BeginUpdate(ctx,
		"<resource-group-name>",
		armkubernetesconfiguration.Enum0("Microsoft.Kubernetes"),
		armkubernetesconfiguration.Enum1("connectedClusters"),
		"<cluster-name>",
		"<flux-configuration-name>",
		armkubernetesconfiguration.FluxConfigurationPatch{
			Properties: &armkubernetesconfiguration.FluxConfigurationPatchProperties{
				GitRepository: &armkubernetesconfiguration.GitRepositoryPatchDefinition{
					URL: to.StringPtr("<url>"),
				},
				Kustomizations: map[string]*armkubernetesconfiguration.KustomizationPatchDefinition{
					"srs-kustomization1": nil,
					"srs-kustomization2": {
						Path:                  to.StringPtr("<path>"),
						SyncIntervalInSeconds: to.Int64Ptr(300),
					},
					"srs-kustomization3": {
						Path:                  to.StringPtr("<path>"),
						SyncIntervalInSeconds: to.Int64Ptr(300),
					},
				},
				Suspend: to.BoolPtr(true),
			},
		},
		nil)
	if err != nil {
		log.Fatal(err)
	}
	_, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		log.Fatal(err)
	}
}

// x-ms-original-file: specification/kubernetesconfiguration/resource-manager/Microsoft.KubernetesConfiguration/preview/2022-01-01-preview/examples/DeleteFluxConfiguration.json
func ExampleFluxConfigurationsClient_BeginDelete() {
	cred, err := azidentity.NewDefaultAzureCredential(nil)
	if err != nil {
		log.Fatalf("failed to obtain a credential: %v", err)
	}
	ctx := context.Background()
	client := armkubernetesconfiguration.NewFluxConfigurationsClient("<subscription-id>", cred, nil)
	poller, err := client.BeginDelete(ctx,
		"<resource-group-name>",
		armkubernetesconfiguration.Enum0("Microsoft.Kubernetes"),
		armkubernetesconfiguration.Enum1("connectedClusters"),
		"<cluster-name>",
		"<flux-configuration-name>",
		&armkubernetesconfiguration.FluxConfigurationsClientBeginDeleteOptions{ForceDelete: nil})
	if err != nil {
		log.Fatal(err)
	}
	_, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		log.Fatal(err)
	}
}

// x-ms-original-file: specification/kubernetesconfiguration/resource-manager/Microsoft.KubernetesConfiguration/preview/2022-01-01-preview/examples/ListFluxConfigurations.json
func ExampleFluxConfigurationsClient_List() {
	cred, err := azidentity.NewDefaultAzureCredential(nil)
	if err != nil {
		log.Fatalf("failed to obtain a credential: %v", err)
	}
	ctx := context.Background()
	client := armkubernetesconfiguration.NewFluxConfigurationsClient("<subscription-id>", cred, nil)
	pager := client.List("<resource-group-name>",
		armkubernetesconfiguration.Enum0("Microsoft.Kubernetes"),
		armkubernetesconfiguration.Enum1("connectedClusters"),
		"<cluster-name>",
		nil)
	for {
		nextResult := pager.NextPage(ctx)
		if err := pager.Err(); err != nil {
			log.Fatalf("failed to advance page: %v", err)
		}
		if !nextResult {
			break
		}
		for _, v := range pager.PageResponse().Value {
			log.Printf("Pager result: %#v\n", v)
		}
	}
}
