//go:build go1.16
// +build go1.16

// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

package armkubernetesconfiguration_test

import (
	"context"
	"log"

	"time"

	"github.com/Azure/azure-sdk-for-go/sdk/azcore/to"
	"github.com/Azure/azure-sdk-for-go/sdk/azidentity"
	"github.com/Azure/azure-sdk-for-go/sdk/resourcemanager/kubernetesconfiguration/armkubernetesconfiguration"
)

// x-ms-original-file: specification/kubernetesconfiguration/resource-manager/Microsoft.KubernetesConfiguration/preview/2022-01-01-preview/examples/GetSourceControlConfiguration.json
func ExampleSourceControlConfigurationsClient_Get() {
	cred, err := azidentity.NewDefaultAzureCredential(nil)
	if err != nil {
		log.Fatalf("failed to obtain a credential: %v", err)
	}
	ctx := context.Background()
	client := armkubernetesconfiguration.NewSourceControlConfigurationsClient("<subscription-id>", cred, nil)
	res, err := client.Get(ctx,
		"<resource-group-name>",
		armkubernetesconfiguration.Enum0MicrosoftKubernetes,
		armkubernetesconfiguration.Enum1ConnectedClusters,
		"<cluster-name>",
		"<source-control-configuration-name>",
		nil)
	if err != nil {
		log.Fatal(err)
	}
	log.Printf("SourceControlConfiguration.ID: %s\n", *res.ID)
}

// x-ms-original-file: specification/kubernetesconfiguration/resource-manager/Microsoft.KubernetesConfiguration/preview/2022-01-01-preview/examples/CreateSourceControlConfiguration.json
func ExampleSourceControlConfigurationsClient_CreateOrUpdate() {
	cred, err := azidentity.NewDefaultAzureCredential(nil)
	if err != nil {
		log.Fatalf("failed to obtain a credential: %v", err)
	}
	ctx := context.Background()
	client := armkubernetesconfiguration.NewSourceControlConfigurationsClient("<subscription-id>", cred, nil)
	res, err := client.CreateOrUpdate(ctx,
		"<resource-group-name>",
		armkubernetesconfiguration.Enum0MicrosoftKubernetes,
		armkubernetesconfiguration.Enum1ConnectedClusters,
		"<cluster-name>",
		"<source-control-configuration-name>",
		armkubernetesconfiguration.SourceControlConfiguration{
			Properties: &armkubernetesconfiguration.SourceControlConfigurationProperties{
				ConfigurationProtectedSettings: map[string]*string{
					"protectedSetting1Key": to.StringPtr("protectedSetting1Value"),
				},
				EnableHelmOperator: to.BoolPtr(true),
				HelmOperatorProperties: &armkubernetesconfiguration.HelmOperatorProperties{
					ChartValues:  to.StringPtr("<chart-values>"),
					ChartVersion: to.StringPtr("<chart-version>"),
				},
				OperatorInstanceName:  to.StringPtr("<operator-instance-name>"),
				OperatorNamespace:     to.StringPtr("<operator-namespace>"),
				OperatorParams:        to.StringPtr("<operator-params>"),
				OperatorScope:         armkubernetesconfiguration.OperatorScopeTypeNamespace.ToPtr(),
				OperatorType:          armkubernetesconfiguration.OperatorTypeFlux.ToPtr(),
				RepositoryURL:         to.StringPtr("<repository-url>"),
				SSHKnownHostsContents: to.StringPtr("<sshknown-hosts-contents>"),
			},
		},
		nil)
	if err != nil {
		log.Fatal(err)
	}
	log.Printf("SourceControlConfiguration.ID: %s\n", *res.ID)
}

// x-ms-original-file: specification/kubernetesconfiguration/resource-manager/Microsoft.KubernetesConfiguration/preview/2022-01-01-preview/examples/DeleteSourceControlConfiguration.json
func ExampleSourceControlConfigurationsClient_BeginDelete() {
	cred, err := azidentity.NewDefaultAzureCredential(nil)
	if err != nil {
		log.Fatalf("failed to obtain a credential: %v", err)
	}
	ctx := context.Background()
	client := armkubernetesconfiguration.NewSourceControlConfigurationsClient("<subscription-id>", cred, nil)
	poller, err := client.BeginDelete(ctx,
		"<resource-group-name>",
		armkubernetesconfiguration.Enum0MicrosoftKubernetes,
		armkubernetesconfiguration.Enum1ConnectedClusters,
		"<cluster-name>",
		"<source-control-configuration-name>",
		nil)
	if err != nil {
		log.Fatal(err)
	}
	_, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		log.Fatal(err)
	}
}

// x-ms-original-file: specification/kubernetesconfiguration/resource-manager/Microsoft.KubernetesConfiguration/preview/2022-01-01-preview/examples/ListSourceControlConfiguration.json
func ExampleSourceControlConfigurationsClient_List() {
	cred, err := azidentity.NewDefaultAzureCredential(nil)
	if err != nil {
		log.Fatalf("failed to obtain a credential: %v", err)
	}
	ctx := context.Background()
	client := armkubernetesconfiguration.NewSourceControlConfigurationsClient("<subscription-id>", cred, nil)
	pager := client.List("<resource-group-name>",
		armkubernetesconfiguration.Enum0MicrosoftKubernetes,
		armkubernetesconfiguration.Enum1ConnectedClusters,
		"<cluster-name>",
		nil)
	for pager.NextPage(ctx) {
		if err := pager.Err(); err != nil {
			log.Fatalf("failed to advance page: %v", err)
		}
		for _, v := range pager.PageResponse().Value {
			log.Printf("SourceControlConfiguration.ID: %s\n", *v.ID)
		}
	}
}
