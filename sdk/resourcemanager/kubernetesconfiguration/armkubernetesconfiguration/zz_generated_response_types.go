//go:build go1.16
// +build go1.16

// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

package armkubernetesconfiguration

import (
	"context"
	armruntime "github.com/Azure/azure-sdk-for-go/sdk/azcore/arm/runtime"
	"net/http"
	"time"
)

// ClusterExtensionTypeGetResponse contains the response from method ClusterExtensionType.Get.
type ClusterExtensionTypeGetResponse struct {
	ClusterExtensionTypeGetResult
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// ClusterExtensionTypeGetResult contains the result from method ClusterExtensionType.Get.
type ClusterExtensionTypeGetResult struct {
	ExtensionType
}

// ClusterExtensionTypesListResponse contains the response from method ClusterExtensionTypes.List.
type ClusterExtensionTypesListResponse struct {
	ClusterExtensionTypesListResult
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// ClusterExtensionTypesListResult contains the result from method ClusterExtensionTypes.List.
type ClusterExtensionTypesListResult struct {
	ExtensionTypeList
}

// ExtensionTypeVersionsListResponse contains the response from method ExtensionTypeVersions.List.
type ExtensionTypeVersionsListResponse struct {
	ExtensionTypeVersionsListResult
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// ExtensionTypeVersionsListResult contains the result from method ExtensionTypeVersions.List.
type ExtensionTypeVersionsListResult struct {
	ExtensionVersionList
}

// ExtensionsCreatePollerResponse contains the response from method Extensions.Create.
type ExtensionsCreatePollerResponse struct {
	// Poller contains an initialized poller.
	Poller *ExtensionsCreatePoller

	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// PollUntilDone will poll the service endpoint until a terminal state is reached or an error is received.
// freq: the time to wait between intervals in absence of a Retry-After header. Allowed minimum is one second.
// A good starting value is 30 seconds. Note that some resources might benefit from a different value.
func (l ExtensionsCreatePollerResponse) PollUntilDone(ctx context.Context, freq time.Duration) (ExtensionsCreateResponse, error) {
	respType := ExtensionsCreateResponse{}
	resp, err := l.Poller.pt.PollUntilDone(ctx, freq, &respType.Extension)
	if err != nil {
		return respType, err
	}
	respType.RawResponse = resp
	return respType, nil
}

// Resume rehydrates a ExtensionsCreatePollerResponse from the provided client and resume token.
func (l *ExtensionsCreatePollerResponse) Resume(ctx context.Context, client *ExtensionsClient, token string) error {
	pt, err := armruntime.NewPollerFromResumeToken("ExtensionsClient.Create", token, client.pl, client.createHandleError)
	if err != nil {
		return err
	}
	poller := &ExtensionsCreatePoller{
		pt: pt,
	}
	resp, err := poller.Poll(ctx)
	if err != nil {
		return err
	}
	l.Poller = poller
	l.RawResponse = resp
	return nil
}

// ExtensionsCreateResponse contains the response from method Extensions.Create.
type ExtensionsCreateResponse struct {
	ExtensionsCreateResult
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// ExtensionsCreateResult contains the result from method Extensions.Create.
type ExtensionsCreateResult struct {
	Extension
}

// ExtensionsDeletePollerResponse contains the response from method Extensions.Delete.
type ExtensionsDeletePollerResponse struct {
	// Poller contains an initialized poller.
	Poller *ExtensionsDeletePoller

	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// PollUntilDone will poll the service endpoint until a terminal state is reached or an error is received.
// freq: the time to wait between intervals in absence of a Retry-After header. Allowed minimum is one second.
// A good starting value is 30 seconds. Note that some resources might benefit from a different value.
func (l ExtensionsDeletePollerResponse) PollUntilDone(ctx context.Context, freq time.Duration) (ExtensionsDeleteResponse, error) {
	respType := ExtensionsDeleteResponse{}
	resp, err := l.Poller.pt.PollUntilDone(ctx, freq, nil)
	if err != nil {
		return respType, err
	}
	respType.RawResponse = resp
	return respType, nil
}

// Resume rehydrates a ExtensionsDeletePollerResponse from the provided client and resume token.
func (l *ExtensionsDeletePollerResponse) Resume(ctx context.Context, client *ExtensionsClient, token string) error {
	pt, err := armruntime.NewPollerFromResumeToken("ExtensionsClient.Delete", token, client.pl, client.deleteHandleError)
	if err != nil {
		return err
	}
	poller := &ExtensionsDeletePoller{
		pt: pt,
	}
	resp, err := poller.Poll(ctx)
	if err != nil {
		return err
	}
	l.Poller = poller
	l.RawResponse = resp
	return nil
}

// ExtensionsDeleteResponse contains the response from method Extensions.Delete.
type ExtensionsDeleteResponse struct {
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// ExtensionsGetResponse contains the response from method Extensions.Get.
type ExtensionsGetResponse struct {
	ExtensionsGetResult
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// ExtensionsGetResult contains the result from method Extensions.Get.
type ExtensionsGetResult struct {
	Extension
}

// ExtensionsListResponse contains the response from method Extensions.List.
type ExtensionsListResponse struct {
	ExtensionsListResult
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// ExtensionsListResult contains the result from method Extensions.List.
type ExtensionsListResult struct {
	ExtensionsList
}

// ExtensionsUpdatePollerResponse contains the response from method Extensions.Update.
type ExtensionsUpdatePollerResponse struct {
	// Poller contains an initialized poller.
	Poller *ExtensionsUpdatePoller

	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// PollUntilDone will poll the service endpoint until a terminal state is reached or an error is received.
// freq: the time to wait between intervals in absence of a Retry-After header. Allowed minimum is one second.
// A good starting value is 30 seconds. Note that some resources might benefit from a different value.
func (l ExtensionsUpdatePollerResponse) PollUntilDone(ctx context.Context, freq time.Duration) (ExtensionsUpdateResponse, error) {
	respType := ExtensionsUpdateResponse{}
	resp, err := l.Poller.pt.PollUntilDone(ctx, freq, &respType.Extension)
	if err != nil {
		return respType, err
	}
	respType.RawResponse = resp
	return respType, nil
}

// Resume rehydrates a ExtensionsUpdatePollerResponse from the provided client and resume token.
func (l *ExtensionsUpdatePollerResponse) Resume(ctx context.Context, client *ExtensionsClient, token string) error {
	pt, err := armruntime.NewPollerFromResumeToken("ExtensionsClient.Update", token, client.pl, client.updateHandleError)
	if err != nil {
		return err
	}
	poller := &ExtensionsUpdatePoller{
		pt: pt,
	}
	resp, err := poller.Poll(ctx)
	if err != nil {
		return err
	}
	l.Poller = poller
	l.RawResponse = resp
	return nil
}

// ExtensionsUpdateResponse contains the response from method Extensions.Update.
type ExtensionsUpdateResponse struct {
	ExtensionsUpdateResult
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// ExtensionsUpdateResult contains the result from method Extensions.Update.
type ExtensionsUpdateResult struct {
	Extension
}

// FluxConfigOperationStatusGetResponse contains the response from method FluxConfigOperationStatus.Get.
type FluxConfigOperationStatusGetResponse struct {
	FluxConfigOperationStatusGetResult
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// FluxConfigOperationStatusGetResult contains the result from method FluxConfigOperationStatus.Get.
type FluxConfigOperationStatusGetResult struct {
	OperationStatusResult
}

// FluxConfigurationsCreateOrUpdatePollerResponse contains the response from method FluxConfigurations.CreateOrUpdate.
type FluxConfigurationsCreateOrUpdatePollerResponse struct {
	// Poller contains an initialized poller.
	Poller *FluxConfigurationsCreateOrUpdatePoller

	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// PollUntilDone will poll the service endpoint until a terminal state is reached or an error is received.
// freq: the time to wait between intervals in absence of a Retry-After header. Allowed minimum is one second.
// A good starting value is 30 seconds. Note that some resources might benefit from a different value.
func (l FluxConfigurationsCreateOrUpdatePollerResponse) PollUntilDone(ctx context.Context, freq time.Duration) (FluxConfigurationsCreateOrUpdateResponse, error) {
	respType := FluxConfigurationsCreateOrUpdateResponse{}
	resp, err := l.Poller.pt.PollUntilDone(ctx, freq, &respType.FluxConfiguration)
	if err != nil {
		return respType, err
	}
	respType.RawResponse = resp
	return respType, nil
}

// Resume rehydrates a FluxConfigurationsCreateOrUpdatePollerResponse from the provided client and resume token.
func (l *FluxConfigurationsCreateOrUpdatePollerResponse) Resume(ctx context.Context, client *FluxConfigurationsClient, token string) error {
	pt, err := armruntime.NewPollerFromResumeToken("FluxConfigurationsClient.CreateOrUpdate", token, client.pl, client.createOrUpdateHandleError)
	if err != nil {
		return err
	}
	poller := &FluxConfigurationsCreateOrUpdatePoller{
		pt: pt,
	}
	resp, err := poller.Poll(ctx)
	if err != nil {
		return err
	}
	l.Poller = poller
	l.RawResponse = resp
	return nil
}

// FluxConfigurationsCreateOrUpdateResponse contains the response from method FluxConfigurations.CreateOrUpdate.
type FluxConfigurationsCreateOrUpdateResponse struct {
	FluxConfigurationsCreateOrUpdateResult
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// FluxConfigurationsCreateOrUpdateResult contains the result from method FluxConfigurations.CreateOrUpdate.
type FluxConfigurationsCreateOrUpdateResult struct {
	FluxConfiguration
}

// FluxConfigurationsDeletePollerResponse contains the response from method FluxConfigurations.Delete.
type FluxConfigurationsDeletePollerResponse struct {
	// Poller contains an initialized poller.
	Poller *FluxConfigurationsDeletePoller

	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// PollUntilDone will poll the service endpoint until a terminal state is reached or an error is received.
// freq: the time to wait between intervals in absence of a Retry-After header. Allowed minimum is one second.
// A good starting value is 30 seconds. Note that some resources might benefit from a different value.
func (l FluxConfigurationsDeletePollerResponse) PollUntilDone(ctx context.Context, freq time.Duration) (FluxConfigurationsDeleteResponse, error) {
	respType := FluxConfigurationsDeleteResponse{}
	resp, err := l.Poller.pt.PollUntilDone(ctx, freq, nil)
	if err != nil {
		return respType, err
	}
	respType.RawResponse = resp
	return respType, nil
}

// Resume rehydrates a FluxConfigurationsDeletePollerResponse from the provided client and resume token.
func (l *FluxConfigurationsDeletePollerResponse) Resume(ctx context.Context, client *FluxConfigurationsClient, token string) error {
	pt, err := armruntime.NewPollerFromResumeToken("FluxConfigurationsClient.Delete", token, client.pl, client.deleteHandleError)
	if err != nil {
		return err
	}
	poller := &FluxConfigurationsDeletePoller{
		pt: pt,
	}
	resp, err := poller.Poll(ctx)
	if err != nil {
		return err
	}
	l.Poller = poller
	l.RawResponse = resp
	return nil
}

// FluxConfigurationsDeleteResponse contains the response from method FluxConfigurations.Delete.
type FluxConfigurationsDeleteResponse struct {
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// FluxConfigurationsGetResponse contains the response from method FluxConfigurations.Get.
type FluxConfigurationsGetResponse struct {
	FluxConfigurationsGetResult
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// FluxConfigurationsGetResult contains the result from method FluxConfigurations.Get.
type FluxConfigurationsGetResult struct {
	FluxConfiguration
}

// FluxConfigurationsListResponse contains the response from method FluxConfigurations.List.
type FluxConfigurationsListResponse struct {
	FluxConfigurationsListResult
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// FluxConfigurationsListResult contains the result from method FluxConfigurations.List.
type FluxConfigurationsListResult struct {
	FluxConfigurationsList
}

// FluxConfigurationsUpdatePollerResponse contains the response from method FluxConfigurations.Update.
type FluxConfigurationsUpdatePollerResponse struct {
	// Poller contains an initialized poller.
	Poller *FluxConfigurationsUpdatePoller

	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// PollUntilDone will poll the service endpoint until a terminal state is reached or an error is received.
// freq: the time to wait between intervals in absence of a Retry-After header. Allowed minimum is one second.
// A good starting value is 30 seconds. Note that some resources might benefit from a different value.
func (l FluxConfigurationsUpdatePollerResponse) PollUntilDone(ctx context.Context, freq time.Duration) (FluxConfigurationsUpdateResponse, error) {
	respType := FluxConfigurationsUpdateResponse{}
	resp, err := l.Poller.pt.PollUntilDone(ctx, freq, &respType.FluxConfiguration)
	if err != nil {
		return respType, err
	}
	respType.RawResponse = resp
	return respType, nil
}

// Resume rehydrates a FluxConfigurationsUpdatePollerResponse from the provided client and resume token.
func (l *FluxConfigurationsUpdatePollerResponse) Resume(ctx context.Context, client *FluxConfigurationsClient, token string) error {
	pt, err := armruntime.NewPollerFromResumeToken("FluxConfigurationsClient.Update", token, client.pl, client.updateHandleError)
	if err != nil {
		return err
	}
	poller := &FluxConfigurationsUpdatePoller{
		pt: pt,
	}
	resp, err := poller.Poll(ctx)
	if err != nil {
		return err
	}
	l.Poller = poller
	l.RawResponse = resp
	return nil
}

// FluxConfigurationsUpdateResponse contains the response from method FluxConfigurations.Update.
type FluxConfigurationsUpdateResponse struct {
	FluxConfigurationsUpdateResult
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// FluxConfigurationsUpdateResult contains the result from method FluxConfigurations.Update.
type FluxConfigurationsUpdateResult struct {
	FluxConfiguration
}

// LocationExtensionTypesListResponse contains the response from method LocationExtensionTypes.List.
type LocationExtensionTypesListResponse struct {
	LocationExtensionTypesListResult
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// LocationExtensionTypesListResult contains the result from method LocationExtensionTypes.List.
type LocationExtensionTypesListResult struct {
	ExtensionTypeList
}

// OperationStatusGetResponse contains the response from method OperationStatus.Get.
type OperationStatusGetResponse struct {
	OperationStatusGetResult
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// OperationStatusGetResult contains the result from method OperationStatus.Get.
type OperationStatusGetResult struct {
	OperationStatusResult
}

// OperationStatusListResponse contains the response from method OperationStatus.List.
type OperationStatusListResponse struct {
	OperationStatusListResult
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// OperationStatusListResult contains the result from method OperationStatus.List.
type OperationStatusListResult struct {
	OperationStatusList
}

// OperationsListResponse contains the response from method Operations.List.
type OperationsListResponse struct {
	OperationsListResult
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// OperationsListResult contains the result from method Operations.List.
type OperationsListResult struct {
	ResourceProviderOperationList
}

// SourceControlConfigurationsCreateOrUpdateResponse contains the response from method SourceControlConfigurations.CreateOrUpdate.
type SourceControlConfigurationsCreateOrUpdateResponse struct {
	SourceControlConfigurationsCreateOrUpdateResult
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// SourceControlConfigurationsCreateOrUpdateResult contains the result from method SourceControlConfigurations.CreateOrUpdate.
type SourceControlConfigurationsCreateOrUpdateResult struct {
	SourceControlConfiguration
}

// SourceControlConfigurationsDeletePollerResponse contains the response from method SourceControlConfigurations.Delete.
type SourceControlConfigurationsDeletePollerResponse struct {
	// Poller contains an initialized poller.
	Poller *SourceControlConfigurationsDeletePoller

	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// PollUntilDone will poll the service endpoint until a terminal state is reached or an error is received.
// freq: the time to wait between intervals in absence of a Retry-After header. Allowed minimum is one second.
// A good starting value is 30 seconds. Note that some resources might benefit from a different value.
func (l SourceControlConfigurationsDeletePollerResponse) PollUntilDone(ctx context.Context, freq time.Duration) (SourceControlConfigurationsDeleteResponse, error) {
	respType := SourceControlConfigurationsDeleteResponse{}
	resp, err := l.Poller.pt.PollUntilDone(ctx, freq, nil)
	if err != nil {
		return respType, err
	}
	respType.RawResponse = resp
	return respType, nil
}

// Resume rehydrates a SourceControlConfigurationsDeletePollerResponse from the provided client and resume token.
func (l *SourceControlConfigurationsDeletePollerResponse) Resume(ctx context.Context, client *SourceControlConfigurationsClient, token string) error {
	pt, err := armruntime.NewPollerFromResumeToken("SourceControlConfigurationsClient.Delete", token, client.pl, client.deleteHandleError)
	if err != nil {
		return err
	}
	poller := &SourceControlConfigurationsDeletePoller{
		pt: pt,
	}
	resp, err := poller.Poll(ctx)
	if err != nil {
		return err
	}
	l.Poller = poller
	l.RawResponse = resp
	return nil
}

// SourceControlConfigurationsDeleteResponse contains the response from method SourceControlConfigurations.Delete.
type SourceControlConfigurationsDeleteResponse struct {
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// SourceControlConfigurationsGetResponse contains the response from method SourceControlConfigurations.Get.
type SourceControlConfigurationsGetResponse struct {
	SourceControlConfigurationsGetResult
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// SourceControlConfigurationsGetResult contains the result from method SourceControlConfigurations.Get.
type SourceControlConfigurationsGetResult struct {
	SourceControlConfiguration
}

// SourceControlConfigurationsListResponse contains the response from method SourceControlConfigurations.List.
type SourceControlConfigurationsListResponse struct {
	SourceControlConfigurationsListResult
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// SourceControlConfigurationsListResult contains the result from method SourceControlConfigurations.List.
type SourceControlConfigurationsListResult struct {
	SourceControlConfigurationList
}
