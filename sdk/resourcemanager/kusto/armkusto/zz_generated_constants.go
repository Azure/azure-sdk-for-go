//go:build go1.16
// +build go1.16

// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

package armkusto

const (
	module  = "armkusto"
	version = "v0.1.0"
)

// AzureSKUName - SKU name.
type AzureSKUName string

const (
	AzureSKUNameDevNoSLAStandardD11V2 AzureSKUName = "Dev(No SLA)_Standard_D11_v2"
	AzureSKUNameDevNoSLAStandardE2AV4 AzureSKUName = "Dev(No SLA)_Standard_E2a_v4"
	AzureSKUNameStandardD11V2         AzureSKUName = "Standard_D11_v2"
	AzureSKUNameStandardD12V2         AzureSKUName = "Standard_D12_v2"
	AzureSKUNameStandardD13V2         AzureSKUName = "Standard_D13_v2"
	AzureSKUNameStandardD14V2         AzureSKUName = "Standard_D14_v2"
	AzureSKUNameStandardDS13V21TBPS   AzureSKUName = "Standard_DS13_v2+1TB_PS"
	AzureSKUNameStandardDS13V22TBPS   AzureSKUName = "Standard_DS13_v2+2TB_PS"
	AzureSKUNameStandardDS14V23TBPS   AzureSKUName = "Standard_DS14_v2+3TB_PS"
	AzureSKUNameStandardDS14V24TBPS   AzureSKUName = "Standard_DS14_v2+4TB_PS"
	AzureSKUNameStandardE16AV4        AzureSKUName = "Standard_E16a_v4"
	AzureSKUNameStandardE16AsV43TBPS  AzureSKUName = "Standard_E16as_v4+3TB_PS"
	AzureSKUNameStandardE16AsV44TBPS  AzureSKUName = "Standard_E16as_v4+4TB_PS"
	AzureSKUNameStandardE2AV4         AzureSKUName = "Standard_E2a_v4"
	AzureSKUNameStandardE4AV4         AzureSKUName = "Standard_E4a_v4"
	AzureSKUNameStandardE64IV3        AzureSKUName = "Standard_E64i_v3"
	AzureSKUNameStandardE80IDsV4      AzureSKUName = "Standard_E80ids_v4"
	AzureSKUNameStandardE8AV4         AzureSKUName = "Standard_E8a_v4"
	AzureSKUNameStandardE8AsV41TBPS   AzureSKUName = "Standard_E8as_v4+1TB_PS"
	AzureSKUNameStandardE8AsV42TBPS   AzureSKUName = "Standard_E8as_v4+2TB_PS"
	AzureSKUNameStandardL16S          AzureSKUName = "Standard_L16s"
	AzureSKUNameStandardL16SV2        AzureSKUName = "Standard_L16s_v2"
	AzureSKUNameStandardL4S           AzureSKUName = "Standard_L4s"
	AzureSKUNameStandardL8S           AzureSKUName = "Standard_L8s"
	AzureSKUNameStandardL8SV2         AzureSKUName = "Standard_L8s_v2"
)

// PossibleAzureSKUNameValues returns the possible values for the AzureSKUName const type.
func PossibleAzureSKUNameValues() []AzureSKUName {
	return []AzureSKUName{
		AzureSKUNameDevNoSLAStandardD11V2,
		AzureSKUNameDevNoSLAStandardE2AV4,
		AzureSKUNameStandardD11V2,
		AzureSKUNameStandardD12V2,
		AzureSKUNameStandardD13V2,
		AzureSKUNameStandardD14V2,
		AzureSKUNameStandardDS13V21TBPS,
		AzureSKUNameStandardDS13V22TBPS,
		AzureSKUNameStandardDS14V23TBPS,
		AzureSKUNameStandardDS14V24TBPS,
		AzureSKUNameStandardE16AV4,
		AzureSKUNameStandardE16AsV43TBPS,
		AzureSKUNameStandardE16AsV44TBPS,
		AzureSKUNameStandardE2AV4,
		AzureSKUNameStandardE4AV4,
		AzureSKUNameStandardE64IV3,
		AzureSKUNameStandardE80IDsV4,
		AzureSKUNameStandardE8AV4,
		AzureSKUNameStandardE8AsV41TBPS,
		AzureSKUNameStandardE8AsV42TBPS,
		AzureSKUNameStandardL16S,
		AzureSKUNameStandardL16SV2,
		AzureSKUNameStandardL4S,
		AzureSKUNameStandardL8S,
		AzureSKUNameStandardL8SV2,
	}
}

// ToPtr returns a *AzureSKUName pointing to the current value.
func (c AzureSKUName) ToPtr() *AzureSKUName {
	return &c
}

// AzureSKUTier - SKU tier.
type AzureSKUTier string

const (
	AzureSKUTierBasic    AzureSKUTier = "Basic"
	AzureSKUTierStandard AzureSKUTier = "Standard"
)

// PossibleAzureSKUTierValues returns the possible values for the AzureSKUTier const type.
func PossibleAzureSKUTierValues() []AzureSKUTier {
	return []AzureSKUTier{
		AzureSKUTierBasic,
		AzureSKUTierStandard,
	}
}

// ToPtr returns a *AzureSKUTier pointing to the current value.
func (c AzureSKUTier) ToPtr() *AzureSKUTier {
	return &c
}

// AzureScaleType - Scale type.
type AzureScaleType string

const (
	AzureScaleTypeAutomatic AzureScaleType = "automatic"
	AzureScaleTypeManual    AzureScaleType = "manual"
	AzureScaleTypeNone      AzureScaleType = "none"
)

// PossibleAzureScaleTypeValues returns the possible values for the AzureScaleType const type.
func PossibleAzureScaleTypeValues() []AzureScaleType {
	return []AzureScaleType{
		AzureScaleTypeAutomatic,
		AzureScaleTypeManual,
		AzureScaleTypeNone,
	}
}

// ToPtr returns a *AzureScaleType pointing to the current value.
func (c AzureScaleType) ToPtr() *AzureScaleType {
	return &c
}

// BlobStorageEventType - The name of blob storage event type to process.
type BlobStorageEventType string

const (
	BlobStorageEventTypeMicrosoftStorageBlobCreated BlobStorageEventType = "Microsoft.Storage.BlobCreated"
	BlobStorageEventTypeMicrosoftStorageBlobRenamed BlobStorageEventType = "Microsoft.Storage.BlobRenamed"
)

// PossibleBlobStorageEventTypeValues returns the possible values for the BlobStorageEventType const type.
func PossibleBlobStorageEventTypeValues() []BlobStorageEventType {
	return []BlobStorageEventType{
		BlobStorageEventTypeMicrosoftStorageBlobCreated,
		BlobStorageEventTypeMicrosoftStorageBlobRenamed,
	}
}

// ToPtr returns a *BlobStorageEventType pointing to the current value.
func (c BlobStorageEventType) ToPtr() *BlobStorageEventType {
	return &c
}

// ClusterNetworkAccessFlag - Whether or not to restrict outbound network access. Value is optional but if passed in, must be 'Enabled' or 'Disabled'
type ClusterNetworkAccessFlag string

const (
	ClusterNetworkAccessFlagDisabled ClusterNetworkAccessFlag = "Disabled"
	ClusterNetworkAccessFlagEnabled  ClusterNetworkAccessFlag = "Enabled"
)

// PossibleClusterNetworkAccessFlagValues returns the possible values for the ClusterNetworkAccessFlag const type.
func PossibleClusterNetworkAccessFlagValues() []ClusterNetworkAccessFlag {
	return []ClusterNetworkAccessFlag{
		ClusterNetworkAccessFlagDisabled,
		ClusterNetworkAccessFlagEnabled,
	}
}

// ToPtr returns a *ClusterNetworkAccessFlag pointing to the current value.
func (c ClusterNetworkAccessFlag) ToPtr() *ClusterNetworkAccessFlag {
	return &c
}

// ClusterPrincipalRole - Cluster principal role.
type ClusterPrincipalRole string

const (
	ClusterPrincipalRoleAllDatabasesAdmin  ClusterPrincipalRole = "AllDatabasesAdmin"
	ClusterPrincipalRoleAllDatabasesViewer ClusterPrincipalRole = "AllDatabasesViewer"
)

// PossibleClusterPrincipalRoleValues returns the possible values for the ClusterPrincipalRole const type.
func PossibleClusterPrincipalRoleValues() []ClusterPrincipalRole {
	return []ClusterPrincipalRole{
		ClusterPrincipalRoleAllDatabasesAdmin,
		ClusterPrincipalRoleAllDatabasesViewer,
	}
}

// ToPtr returns a *ClusterPrincipalRole pointing to the current value.
func (c ClusterPrincipalRole) ToPtr() *ClusterPrincipalRole {
	return &c
}

// Compression - The compression type
type Compression string

const (
	CompressionGZip Compression = "GZip"
	CompressionNone Compression = "None"
)

// PossibleCompressionValues returns the possible values for the Compression const type.
func PossibleCompressionValues() []Compression {
	return []Compression{
		CompressionGZip,
		CompressionNone,
	}
}

// ToPtr returns a *Compression pointing to the current value.
func (c Compression) ToPtr() *Compression {
	return &c
}

// CreatedByType - The type of identity that created the resource.
type CreatedByType string

const (
	CreatedByTypeApplication     CreatedByType = "Application"
	CreatedByTypeKey             CreatedByType = "Key"
	CreatedByTypeManagedIdentity CreatedByType = "ManagedIdentity"
	CreatedByTypeUser            CreatedByType = "User"
)

// PossibleCreatedByTypeValues returns the possible values for the CreatedByType const type.
func PossibleCreatedByTypeValues() []CreatedByType {
	return []CreatedByType{
		CreatedByTypeApplication,
		CreatedByTypeKey,
		CreatedByTypeManagedIdentity,
		CreatedByTypeUser,
	}
}

// ToPtr returns a *CreatedByType pointing to the current value.
func (c CreatedByType) ToPtr() *CreatedByType {
	return &c
}

// DataConnectionKind - Kind of the endpoint for the data connection
type DataConnectionKind string

const (
	DataConnectionKindEventGrid DataConnectionKind = "EventGrid"
	DataConnectionKindEventHub  DataConnectionKind = "EventHub"
	DataConnectionKindIotHub    DataConnectionKind = "IotHub"
)

// PossibleDataConnectionKindValues returns the possible values for the DataConnectionKind const type.
func PossibleDataConnectionKindValues() []DataConnectionKind {
	return []DataConnectionKind{
		DataConnectionKindEventGrid,
		DataConnectionKindEventHub,
		DataConnectionKindIotHub,
	}
}

// ToPtr returns a *DataConnectionKind pointing to the current value.
func (c DataConnectionKind) ToPtr() *DataConnectionKind {
	return &c
}

// DatabasePrincipalRole - Database principal role.
type DatabasePrincipalRole string

const (
	DatabasePrincipalRoleAdmin              DatabasePrincipalRole = "Admin"
	DatabasePrincipalRoleIngestor           DatabasePrincipalRole = "Ingestor"
	DatabasePrincipalRoleMonitor            DatabasePrincipalRole = "Monitor"
	DatabasePrincipalRoleUnrestrictedViewer DatabasePrincipalRole = "UnrestrictedViewer"
	DatabasePrincipalRoleUser               DatabasePrincipalRole = "User"
	DatabasePrincipalRoleViewer             DatabasePrincipalRole = "Viewer"
)

// PossibleDatabasePrincipalRoleValues returns the possible values for the DatabasePrincipalRole const type.
func PossibleDatabasePrincipalRoleValues() []DatabasePrincipalRole {
	return []DatabasePrincipalRole{
		DatabasePrincipalRoleAdmin,
		DatabasePrincipalRoleIngestor,
		DatabasePrincipalRoleMonitor,
		DatabasePrincipalRoleUnrestrictedViewer,
		DatabasePrincipalRoleUser,
		DatabasePrincipalRoleViewer,
	}
}

// ToPtr returns a *DatabasePrincipalRole pointing to the current value.
func (c DatabasePrincipalRole) ToPtr() *DatabasePrincipalRole {
	return &c
}

// DatabasePrincipalType - Database principal type.
type DatabasePrincipalType string

const (
	DatabasePrincipalTypeApp   DatabasePrincipalType = "App"
	DatabasePrincipalTypeGroup DatabasePrincipalType = "Group"
	DatabasePrincipalTypeUser  DatabasePrincipalType = "User"
)

// PossibleDatabasePrincipalTypeValues returns the possible values for the DatabasePrincipalType const type.
func PossibleDatabasePrincipalTypeValues() []DatabasePrincipalType {
	return []DatabasePrincipalType{
		DatabasePrincipalTypeApp,
		DatabasePrincipalTypeGroup,
		DatabasePrincipalTypeUser,
	}
}

// ToPtr returns a *DatabasePrincipalType pointing to the current value.
func (c DatabasePrincipalType) ToPtr() *DatabasePrincipalType {
	return &c
}

// DefaultPrincipalsModificationKind - The default principals modification kind
type DefaultPrincipalsModificationKind string

const (
	DefaultPrincipalsModificationKindNone    DefaultPrincipalsModificationKind = "None"
	DefaultPrincipalsModificationKindReplace DefaultPrincipalsModificationKind = "Replace"
	DefaultPrincipalsModificationKindUnion   DefaultPrincipalsModificationKind = "Union"
)

// PossibleDefaultPrincipalsModificationKindValues returns the possible values for the DefaultPrincipalsModificationKind const type.
func PossibleDefaultPrincipalsModificationKindValues() []DefaultPrincipalsModificationKind {
	return []DefaultPrincipalsModificationKind{
		DefaultPrincipalsModificationKindNone,
		DefaultPrincipalsModificationKindReplace,
		DefaultPrincipalsModificationKindUnion,
	}
}

// ToPtr returns a *DefaultPrincipalsModificationKind pointing to the current value.
func (c DefaultPrincipalsModificationKind) ToPtr() *DefaultPrincipalsModificationKind {
	return &c
}

// EngineType - The engine type
type EngineType string

const (
	EngineTypeV2 EngineType = "V2"
	EngineTypeV3 EngineType = "V3"
)

// PossibleEngineTypeValues returns the possible values for the EngineType const type.
func PossibleEngineTypeValues() []EngineType {
	return []EngineType{
		EngineTypeV2,
		EngineTypeV3,
	}
}

// ToPtr returns a *EngineType pointing to the current value.
func (c EngineType) ToPtr() *EngineType {
	return &c
}

// EventGridDataFormat - The data format of the message. Optionally the data format can be added to each message.
type EventGridDataFormat string

const (
	EventGridDataFormatAPACHEAVRO EventGridDataFormat = "APACHEAVRO"
	EventGridDataFormatAVRO       EventGridDataFormat = "AVRO"
	EventGridDataFormatCSV        EventGridDataFormat = "CSV"
	EventGridDataFormatJSON       EventGridDataFormat = "JSON"
	EventGridDataFormatMULTIJSON  EventGridDataFormat = "MULTIJSON"
	EventGridDataFormatORC        EventGridDataFormat = "ORC"
	EventGridDataFormatPARQUET    EventGridDataFormat = "PARQUET"
	EventGridDataFormatPSV        EventGridDataFormat = "PSV"
	EventGridDataFormatRAW        EventGridDataFormat = "RAW"
	EventGridDataFormatSCSV       EventGridDataFormat = "SCSV"
	EventGridDataFormatSINGLEJSON EventGridDataFormat = "SINGLEJSON"
	EventGridDataFormatSOHSV      EventGridDataFormat = "SOHSV"
	EventGridDataFormatTSV        EventGridDataFormat = "TSV"
	EventGridDataFormatTSVE       EventGridDataFormat = "TSVE"
	EventGridDataFormatTXT        EventGridDataFormat = "TXT"
	EventGridDataFormatW3CLOGFILE EventGridDataFormat = "W3CLOGFILE"
)

// PossibleEventGridDataFormatValues returns the possible values for the EventGridDataFormat const type.
func PossibleEventGridDataFormatValues() []EventGridDataFormat {
	return []EventGridDataFormat{
		EventGridDataFormatAPACHEAVRO,
		EventGridDataFormatAVRO,
		EventGridDataFormatCSV,
		EventGridDataFormatJSON,
		EventGridDataFormatMULTIJSON,
		EventGridDataFormatORC,
		EventGridDataFormatPARQUET,
		EventGridDataFormatPSV,
		EventGridDataFormatRAW,
		EventGridDataFormatSCSV,
		EventGridDataFormatSINGLEJSON,
		EventGridDataFormatSOHSV,
		EventGridDataFormatTSV,
		EventGridDataFormatTSVE,
		EventGridDataFormatTXT,
		EventGridDataFormatW3CLOGFILE,
	}
}

// ToPtr returns a *EventGridDataFormat pointing to the current value.
func (c EventGridDataFormat) ToPtr() *EventGridDataFormat {
	return &c
}

// EventHubDataFormat - The data format of the message. Optionally the data format can be added to each message.
type EventHubDataFormat string

const (
	EventHubDataFormatAPACHEAVRO EventHubDataFormat = "APACHEAVRO"
	EventHubDataFormatAVRO       EventHubDataFormat = "AVRO"
	EventHubDataFormatCSV        EventHubDataFormat = "CSV"
	EventHubDataFormatJSON       EventHubDataFormat = "JSON"
	EventHubDataFormatMULTIJSON  EventHubDataFormat = "MULTIJSON"
	EventHubDataFormatORC        EventHubDataFormat = "ORC"
	EventHubDataFormatPARQUET    EventHubDataFormat = "PARQUET"
	EventHubDataFormatPSV        EventHubDataFormat = "PSV"
	EventHubDataFormatRAW        EventHubDataFormat = "RAW"
	EventHubDataFormatSCSV       EventHubDataFormat = "SCSV"
	EventHubDataFormatSINGLEJSON EventHubDataFormat = "SINGLEJSON"
	EventHubDataFormatSOHSV      EventHubDataFormat = "SOHSV"
	EventHubDataFormatTSV        EventHubDataFormat = "TSV"
	EventHubDataFormatTSVE       EventHubDataFormat = "TSVE"
	EventHubDataFormatTXT        EventHubDataFormat = "TXT"
	EventHubDataFormatW3CLOGFILE EventHubDataFormat = "W3CLOGFILE"
)

// PossibleEventHubDataFormatValues returns the possible values for the EventHubDataFormat const type.
func PossibleEventHubDataFormatValues() []EventHubDataFormat {
	return []EventHubDataFormat{
		EventHubDataFormatAPACHEAVRO,
		EventHubDataFormatAVRO,
		EventHubDataFormatCSV,
		EventHubDataFormatJSON,
		EventHubDataFormatMULTIJSON,
		EventHubDataFormatORC,
		EventHubDataFormatPARQUET,
		EventHubDataFormatPSV,
		EventHubDataFormatRAW,
		EventHubDataFormatSCSV,
		EventHubDataFormatSINGLEJSON,
		EventHubDataFormatSOHSV,
		EventHubDataFormatTSV,
		EventHubDataFormatTSVE,
		EventHubDataFormatTXT,
		EventHubDataFormatW3CLOGFILE,
	}
}

// ToPtr returns a *EventHubDataFormat pointing to the current value.
func (c EventHubDataFormat) ToPtr() *EventHubDataFormat {
	return &c
}

// IdentityType - The type of managed identity used. The type 'SystemAssigned, UserAssigned' includes both an implicitly created identity and a set of user-assigned
// identities. The type 'None' will remove all
// identities.
type IdentityType string

const (
	IdentityTypeNone                       IdentityType = "None"
	IdentityTypeSystemAssigned             IdentityType = "SystemAssigned"
	IdentityTypeSystemAssignedUserAssigned IdentityType = "SystemAssigned, UserAssigned"
	IdentityTypeUserAssigned               IdentityType = "UserAssigned"
)

// PossibleIdentityTypeValues returns the possible values for the IdentityType const type.
func PossibleIdentityTypeValues() []IdentityType {
	return []IdentityType{
		IdentityTypeNone,
		IdentityTypeSystemAssigned,
		IdentityTypeSystemAssignedUserAssigned,
		IdentityTypeUserAssigned,
	}
}

// ToPtr returns a *IdentityType pointing to the current value.
func (c IdentityType) ToPtr() *IdentityType {
	return &c
}

// IotHubDataFormat - The data format of the message. Optionally the data format can be added to each message.
type IotHubDataFormat string

const (
	IotHubDataFormatAPACHEAVRO IotHubDataFormat = "APACHEAVRO"
	IotHubDataFormatAVRO       IotHubDataFormat = "AVRO"
	IotHubDataFormatCSV        IotHubDataFormat = "CSV"
	IotHubDataFormatJSON       IotHubDataFormat = "JSON"
	IotHubDataFormatMULTIJSON  IotHubDataFormat = "MULTIJSON"
	IotHubDataFormatORC        IotHubDataFormat = "ORC"
	IotHubDataFormatPARQUET    IotHubDataFormat = "PARQUET"
	IotHubDataFormatPSV        IotHubDataFormat = "PSV"
	IotHubDataFormatRAW        IotHubDataFormat = "RAW"
	IotHubDataFormatSCSV       IotHubDataFormat = "SCSV"
	IotHubDataFormatSINGLEJSON IotHubDataFormat = "SINGLEJSON"
	IotHubDataFormatSOHSV      IotHubDataFormat = "SOHSV"
	IotHubDataFormatTSV        IotHubDataFormat = "TSV"
	IotHubDataFormatTSVE       IotHubDataFormat = "TSVE"
	IotHubDataFormatTXT        IotHubDataFormat = "TXT"
	IotHubDataFormatW3CLOGFILE IotHubDataFormat = "W3CLOGFILE"
)

// PossibleIotHubDataFormatValues returns the possible values for the IotHubDataFormat const type.
func PossibleIotHubDataFormatValues() []IotHubDataFormat {
	return []IotHubDataFormat{
		IotHubDataFormatAPACHEAVRO,
		IotHubDataFormatAVRO,
		IotHubDataFormatCSV,
		IotHubDataFormatJSON,
		IotHubDataFormatMULTIJSON,
		IotHubDataFormatORC,
		IotHubDataFormatPARQUET,
		IotHubDataFormatPSV,
		IotHubDataFormatRAW,
		IotHubDataFormatSCSV,
		IotHubDataFormatSINGLEJSON,
		IotHubDataFormatSOHSV,
		IotHubDataFormatTSV,
		IotHubDataFormatTSVE,
		IotHubDataFormatTXT,
		IotHubDataFormatW3CLOGFILE,
	}
}

// ToPtr returns a *IotHubDataFormat pointing to the current value.
func (c IotHubDataFormat) ToPtr() *IotHubDataFormat {
	return &c
}

// Kind - Kind of the database
type Kind string

const (
	KindReadOnlyFollowing Kind = "ReadOnlyFollowing"
	KindReadWrite         Kind = "ReadWrite"
)

// PossibleKindValues returns the possible values for the Kind const type.
func PossibleKindValues() []Kind {
	return []Kind{
		KindReadOnlyFollowing,
		KindReadWrite,
	}
}

// ToPtr returns a *Kind pointing to the current value.
func (c Kind) ToPtr() *Kind {
	return &c
}

// LanguageExtensionName - Language extension that can run within KQL query.
type LanguageExtensionName string

const (
	LanguageExtensionNamePYTHON LanguageExtensionName = "PYTHON"
	LanguageExtensionNameR      LanguageExtensionName = "R"
)

// PossibleLanguageExtensionNameValues returns the possible values for the LanguageExtensionName const type.
func PossibleLanguageExtensionNameValues() []LanguageExtensionName {
	return []LanguageExtensionName{
		LanguageExtensionNamePYTHON,
		LanguageExtensionNameR,
	}
}

// ToPtr returns a *LanguageExtensionName pointing to the current value.
func (c LanguageExtensionName) ToPtr() *LanguageExtensionName {
	return &c
}

// PrincipalType - Principal type.
type PrincipalType string

const (
	PrincipalTypeApp   PrincipalType = "App"
	PrincipalTypeGroup PrincipalType = "Group"
	PrincipalTypeUser  PrincipalType = "User"
)

// PossiblePrincipalTypeValues returns the possible values for the PrincipalType const type.
func PossiblePrincipalTypeValues() []PrincipalType {
	return []PrincipalType{
		PrincipalTypeApp,
		PrincipalTypeGroup,
		PrincipalTypeUser,
	}
}

// ToPtr returns a *PrincipalType pointing to the current value.
func (c PrincipalType) ToPtr() *PrincipalType {
	return &c
}

// PrincipalsModificationKind - The principals modification kind of the database
type PrincipalsModificationKind string

const (
	PrincipalsModificationKindNone    PrincipalsModificationKind = "None"
	PrincipalsModificationKindReplace PrincipalsModificationKind = "Replace"
	PrincipalsModificationKindUnion   PrincipalsModificationKind = "Union"
)

// PossiblePrincipalsModificationKindValues returns the possible values for the PrincipalsModificationKind const type.
func PossiblePrincipalsModificationKindValues() []PrincipalsModificationKind {
	return []PrincipalsModificationKind{
		PrincipalsModificationKindNone,
		PrincipalsModificationKindReplace,
		PrincipalsModificationKindUnion,
	}
}

// ToPtr returns a *PrincipalsModificationKind pointing to the current value.
func (c PrincipalsModificationKind) ToPtr() *PrincipalsModificationKind {
	return &c
}

// ProvisioningState - The provisioned state of the resource.
type ProvisioningState string

const (
	ProvisioningStateCreating  ProvisioningState = "Creating"
	ProvisioningStateDeleting  ProvisioningState = "Deleting"
	ProvisioningStateFailed    ProvisioningState = "Failed"
	ProvisioningStateMoving    ProvisioningState = "Moving"
	ProvisioningStateRunning   ProvisioningState = "Running"
	ProvisioningStateSucceeded ProvisioningState = "Succeeded"
)

// PossibleProvisioningStateValues returns the possible values for the ProvisioningState const type.
func PossibleProvisioningStateValues() []ProvisioningState {
	return []ProvisioningState{
		ProvisioningStateCreating,
		ProvisioningStateDeleting,
		ProvisioningStateFailed,
		ProvisioningStateMoving,
		ProvisioningStateRunning,
		ProvisioningStateSucceeded,
	}
}

// ToPtr returns a *ProvisioningState pointing to the current value.
func (c ProvisioningState) ToPtr() *ProvisioningState {
	return &c
}

// PublicNetworkAccess - Public network access to the cluster is enabled by default. When disabled, only private endpoint connection to the cluster is allowed
type PublicNetworkAccess string

const (
	PublicNetworkAccessDisabled PublicNetworkAccess = "Disabled"
	PublicNetworkAccessEnabled  PublicNetworkAccess = "Enabled"
)

// PossiblePublicNetworkAccessValues returns the possible values for the PublicNetworkAccess const type.
func PossiblePublicNetworkAccessValues() []PublicNetworkAccess {
	return []PublicNetworkAccess{
		PublicNetworkAccessDisabled,
		PublicNetworkAccessEnabled,
	}
}

// ToPtr returns a *PublicNetworkAccess pointing to the current value.
func (c PublicNetworkAccess) ToPtr() *PublicNetworkAccess {
	return &c
}

// Reason - Message providing the reason why the given name is invalid.
type Reason string

const (
	ReasonAlreadyExists Reason = "AlreadyExists"
	ReasonInvalid       Reason = "Invalid"
)

// PossibleReasonValues returns the possible values for the Reason const type.
func PossibleReasonValues() []Reason {
	return []Reason{
		ReasonAlreadyExists,
		ReasonInvalid,
	}
}

// ToPtr returns a *Reason pointing to the current value.
func (c Reason) ToPtr() *Reason {
	return &c
}

// State - The state of the resource.
type State string

const (
	StateCreating    State = "Creating"
	StateDeleted     State = "Deleted"
	StateDeleting    State = "Deleting"
	StateRunning     State = "Running"
	StateStarting    State = "Starting"
	StateStopped     State = "Stopped"
	StateStopping    State = "Stopping"
	StateUnavailable State = "Unavailable"
	StateUpdating    State = "Updating"
)

// PossibleStateValues returns the possible values for the State const type.
func PossibleStateValues() []State {
	return []State{
		StateCreating,
		StateDeleted,
		StateDeleting,
		StateRunning,
		StateStarting,
		StateStopped,
		StateStopping,
		StateUnavailable,
		StateUpdating,
	}
}

// ToPtr returns a *State pointing to the current value.
func (c State) ToPtr() *State {
	return &c
}

// Status - The status of operation.
type Status string

const (
	StatusCanceled  Status = "Canceled"
	StatusFailed    Status = "Failed"
	StatusRunning   Status = "Running"
	StatusSucceeded Status = "Succeeded"
)

// PossibleStatusValues returns the possible values for the Status const type.
func PossibleStatusValues() []Status {
	return []Status{
		StatusCanceled,
		StatusFailed,
		StatusRunning,
		StatusSucceeded,
	}
}

// ToPtr returns a *Status pointing to the current value.
func (c Status) ToPtr() *Status {
	return &c
}

// Type - The type of resource, for instance Microsoft.Kusto/clusters/databases.
type Type string

const (
	TypeMicrosoftKustoClustersDatabases                      Type = "Microsoft.Kusto/clusters/databases"
	TypeMicrosoftKustoClustersAttachedDatabaseConfigurations Type = "Microsoft.Kusto/clusters/attachedDatabaseConfigurations"
)

// PossibleTypeValues returns the possible values for the Type const type.
func PossibleTypeValues() []Type {
	return []Type{
		TypeMicrosoftKustoClustersDatabases,
		TypeMicrosoftKustoClustersAttachedDatabaseConfigurations,
	}
}

// ToPtr returns a *Type pointing to the current value.
func (c Type) ToPtr() *Type {
	return &c
}
