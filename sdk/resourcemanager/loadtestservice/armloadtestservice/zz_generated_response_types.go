//go:build go1.16
// +build go1.16

// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

package armloadtestservice

import (
	"context"
	armruntime "github.com/Azure/azure-sdk-for-go/sdk/azcore/arm/runtime"
	"net/http"
	"time"
)

// LoadTestsCreateOrUpdateResponse contains the response from method LoadTests.CreateOrUpdate.
type LoadTestsCreateOrUpdateResponse struct {
	LoadTestsCreateOrUpdateResult
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// LoadTestsCreateOrUpdateResult contains the result from method LoadTests.CreateOrUpdate.
type LoadTestsCreateOrUpdateResult struct {
	LoadTestResource
}

// LoadTestsDeletePollerResponse contains the response from method LoadTests.Delete.
type LoadTestsDeletePollerResponse struct {
	// Poller contains an initialized poller.
	Poller *LoadTestsDeletePoller

	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// PollUntilDone will poll the service endpoint until a terminal state is reached or an error is received.
// freq: the time to wait between intervals in absence of a Retry-After header. Allowed minimum is one second.
// A good starting value is 30 seconds. Note that some resources might benefit from a different value.
func (l LoadTestsDeletePollerResponse) PollUntilDone(ctx context.Context, freq time.Duration) (LoadTestsDeleteResponse, error) {
	respType := LoadTestsDeleteResponse{}
	resp, err := l.Poller.pt.PollUntilDone(ctx, freq, nil)
	if err != nil {
		return respType, err
	}
	respType.RawResponse = resp
	return respType, nil
}

// Resume rehydrates a LoadTestsDeletePollerResponse from the provided client and resume token.
func (l *LoadTestsDeletePollerResponse) Resume(ctx context.Context, client *LoadTestsClient, token string) error {
	pt, err := armruntime.NewPollerFromResumeToken("LoadTestsClient.Delete", token, client.pl, client.deleteHandleError)
	if err != nil {
		return err
	}
	poller := &LoadTestsDeletePoller{
		pt: pt,
	}
	resp, err := poller.Poll(ctx)
	if err != nil {
		return err
	}
	l.Poller = poller
	l.RawResponse = resp
	return nil
}

// LoadTestsDeleteResponse contains the response from method LoadTests.Delete.
type LoadTestsDeleteResponse struct {
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// LoadTestsGetResponse contains the response from method LoadTests.Get.
type LoadTestsGetResponse struct {
	LoadTestsGetResult
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// LoadTestsGetResult contains the result from method LoadTests.Get.
type LoadTestsGetResult struct {
	LoadTestResource
}

// LoadTestsListByResourceGroupResponse contains the response from method LoadTests.ListByResourceGroup.
type LoadTestsListByResourceGroupResponse struct {
	LoadTestsListByResourceGroupResult
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// LoadTestsListByResourceGroupResult contains the result from method LoadTests.ListByResourceGroup.
type LoadTestsListByResourceGroupResult struct {
	LoadTestResourcePageList
}

// LoadTestsListBySubscriptionResponse contains the response from method LoadTests.ListBySubscription.
type LoadTestsListBySubscriptionResponse struct {
	LoadTestsListBySubscriptionResult
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// LoadTestsListBySubscriptionResult contains the result from method LoadTests.ListBySubscription.
type LoadTestsListBySubscriptionResult struct {
	LoadTestResourcePageList
}

// LoadTestsUpdateResponse contains the response from method LoadTests.Update.
type LoadTestsUpdateResponse struct {
	LoadTestsUpdateResult
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// LoadTestsUpdateResult contains the result from method LoadTests.Update.
type LoadTestsUpdateResult struct {
	LoadTestResource
}

// OperationsListResponse contains the response from method Operations.List.
type OperationsListResponse struct {
	OperationsListResult
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// OperationsListResult contains the result from method Operations.List.
type OperationsListResult struct {
	OperationListResult
}
