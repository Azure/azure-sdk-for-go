//go:build go1.16
// +build go1.16

// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

package armlogic

const (
	module  = "armlogic"
	version = "v0.1.0"
)

// APIDeploymentParameterVisibility - The Api deployment parameter visibility.
type APIDeploymentParameterVisibility string

const (
	APIDeploymentParameterVisibilityDefault      APIDeploymentParameterVisibility = "Default"
	APIDeploymentParameterVisibilityInternal     APIDeploymentParameterVisibility = "Internal"
	APIDeploymentParameterVisibilityNotSpecified APIDeploymentParameterVisibility = "NotSpecified"
)

// PossibleAPIDeploymentParameterVisibilityValues returns the possible values for the APIDeploymentParameterVisibility const type.
func PossibleAPIDeploymentParameterVisibilityValues() []APIDeploymentParameterVisibility {
	return []APIDeploymentParameterVisibility{
		APIDeploymentParameterVisibilityDefault,
		APIDeploymentParameterVisibilityInternal,
		APIDeploymentParameterVisibilityNotSpecified,
	}
}

// ToPtr returns a *APIDeploymentParameterVisibility pointing to the current value.
func (c APIDeploymentParameterVisibility) ToPtr() *APIDeploymentParameterVisibility {
	return &c
}

// APITier - The Api tier.
type APITier string

const (
	APITierEnterprise   APITier = "Enterprise"
	APITierNotSpecified APITier = "NotSpecified"
	APITierPremium      APITier = "Premium"
	APITierStandard     APITier = "Standard"
)

// PossibleAPITierValues returns the possible values for the APITier const type.
func PossibleAPITierValues() []APITier {
	return []APITier{
		APITierEnterprise,
		APITierNotSpecified,
		APITierPremium,
		APITierStandard,
	}
}

// ToPtr returns a *APITier pointing to the current value.
func (c APITier) ToPtr() *APITier {
	return &c
}

type APIType string

const (
	APITypeNotSpecified APIType = "NotSpecified"
	APITypeRest         APIType = "Rest"
	APITypeSoap         APIType = "Soap"
)

// PossibleAPITypeValues returns the possible values for the APIType const type.
func PossibleAPITypeValues() []APIType {
	return []APIType{
		APITypeNotSpecified,
		APITypeRest,
		APITypeSoap,
	}
}

// ToPtr returns a *APIType pointing to the current value.
func (c APIType) ToPtr() *APIType {
	return &c
}

// AgreementType - The agreement type.
type AgreementType string

const (
	AgreementTypeNotSpecified AgreementType = "NotSpecified"
	AgreementTypeAS2          AgreementType = "AS2"
	AgreementTypeX12          AgreementType = "X12"
	AgreementTypeEdifact      AgreementType = "Edifact"
)

// PossibleAgreementTypeValues returns the possible values for the AgreementType const type.
func PossibleAgreementTypeValues() []AgreementType {
	return []AgreementType{
		AgreementTypeNotSpecified,
		AgreementTypeAS2,
		AgreementTypeX12,
		AgreementTypeEdifact,
	}
}

// ToPtr returns a *AgreementType pointing to the current value.
func (c AgreementType) ToPtr() *AgreementType {
	return &c
}

// AzureAsyncOperationState - The Azure async operation state.
type AzureAsyncOperationState string

const (
	AzureAsyncOperationStateCanceled  AzureAsyncOperationState = "Canceled"
	AzureAsyncOperationStateFailed    AzureAsyncOperationState = "Failed"
	AzureAsyncOperationStatePending   AzureAsyncOperationState = "Pending"
	AzureAsyncOperationStateSucceeded AzureAsyncOperationState = "Succeeded"
)

// PossibleAzureAsyncOperationStateValues returns the possible values for the AzureAsyncOperationState const type.
func PossibleAzureAsyncOperationStateValues() []AzureAsyncOperationState {
	return []AzureAsyncOperationState{
		AzureAsyncOperationStateCanceled,
		AzureAsyncOperationStateFailed,
		AzureAsyncOperationStatePending,
		AzureAsyncOperationStateSucceeded,
	}
}

// ToPtr returns a *AzureAsyncOperationState pointing to the current value.
func (c AzureAsyncOperationState) ToPtr() *AzureAsyncOperationState {
	return &c
}

// DayOfWeek - The day of the week.
type DayOfWeek string

const (
	DayOfWeekSunday    DayOfWeek = "Sunday"
	DayOfWeekMonday    DayOfWeek = "Monday"
	DayOfWeekTuesday   DayOfWeek = "Tuesday"
	DayOfWeekWednesday DayOfWeek = "Wednesday"
	DayOfWeekThursday  DayOfWeek = "Thursday"
	DayOfWeekFriday    DayOfWeek = "Friday"
	DayOfWeekSaturday  DayOfWeek = "Saturday"
)

// PossibleDayOfWeekValues returns the possible values for the DayOfWeek const type.
func PossibleDayOfWeekValues() []DayOfWeek {
	return []DayOfWeek{
		DayOfWeekSunday,
		DayOfWeekMonday,
		DayOfWeekTuesday,
		DayOfWeekWednesday,
		DayOfWeekThursday,
		DayOfWeekFriday,
		DayOfWeekSaturday,
	}
}

// ToPtr returns a *DayOfWeek pointing to the current value.
func (c DayOfWeek) ToPtr() *DayOfWeek {
	return &c
}

type DaysOfWeek string

const (
	DaysOfWeekSunday    DaysOfWeek = "Sunday"
	DaysOfWeekMonday    DaysOfWeek = "Monday"
	DaysOfWeekTuesday   DaysOfWeek = "Tuesday"
	DaysOfWeekWednesday DaysOfWeek = "Wednesday"
	DaysOfWeekThursday  DaysOfWeek = "Thursday"
	DaysOfWeekFriday    DaysOfWeek = "Friday"
	DaysOfWeekSaturday  DaysOfWeek = "Saturday"
)

// PossibleDaysOfWeekValues returns the possible values for the DaysOfWeek const type.
func PossibleDaysOfWeekValues() []DaysOfWeek {
	return []DaysOfWeek{
		DaysOfWeekSunday,
		DaysOfWeekMonday,
		DaysOfWeekTuesday,
		DaysOfWeekWednesday,
		DaysOfWeekThursday,
		DaysOfWeekFriday,
		DaysOfWeekSaturday,
	}
}

// ToPtr returns a *DaysOfWeek pointing to the current value.
func (c DaysOfWeek) ToPtr() *DaysOfWeek {
	return &c
}

// EdifactCharacterSet - The edifact character set.
type EdifactCharacterSet string

const (
	EdifactCharacterSetKECA         EdifactCharacterSet = "KECA"
	EdifactCharacterSetNotSpecified EdifactCharacterSet = "NotSpecified"
	EdifactCharacterSetUNOA         EdifactCharacterSet = "UNOA"
	EdifactCharacterSetUNOB         EdifactCharacterSet = "UNOB"
	EdifactCharacterSetUNOC         EdifactCharacterSet = "UNOC"
	EdifactCharacterSetUNOD         EdifactCharacterSet = "UNOD"
	EdifactCharacterSetUNOE         EdifactCharacterSet = "UNOE"
	EdifactCharacterSetUNOF         EdifactCharacterSet = "UNOF"
	EdifactCharacterSetUNOG         EdifactCharacterSet = "UNOG"
	EdifactCharacterSetUNOH         EdifactCharacterSet = "UNOH"
	EdifactCharacterSetUNOI         EdifactCharacterSet = "UNOI"
	EdifactCharacterSetUNOJ         EdifactCharacterSet = "UNOJ"
	EdifactCharacterSetUNOK         EdifactCharacterSet = "UNOK"
	EdifactCharacterSetUNOX         EdifactCharacterSet = "UNOX"
	EdifactCharacterSetUNOY         EdifactCharacterSet = "UNOY"
)

// PossibleEdifactCharacterSetValues returns the possible values for the EdifactCharacterSet const type.
func PossibleEdifactCharacterSetValues() []EdifactCharacterSet {
	return []EdifactCharacterSet{
		EdifactCharacterSetKECA,
		EdifactCharacterSetNotSpecified,
		EdifactCharacterSetUNOA,
		EdifactCharacterSetUNOB,
		EdifactCharacterSetUNOC,
		EdifactCharacterSetUNOD,
		EdifactCharacterSetUNOE,
		EdifactCharacterSetUNOF,
		EdifactCharacterSetUNOG,
		EdifactCharacterSetUNOH,
		EdifactCharacterSetUNOI,
		EdifactCharacterSetUNOJ,
		EdifactCharacterSetUNOK,
		EdifactCharacterSetUNOX,
		EdifactCharacterSetUNOY,
	}
}

// ToPtr returns a *EdifactCharacterSet pointing to the current value.
func (c EdifactCharacterSet) ToPtr() *EdifactCharacterSet {
	return &c
}

// EdifactDecimalIndicator - The edifact decimal indicator.
type EdifactDecimalIndicator string

const (
	EdifactDecimalIndicatorNotSpecified EdifactDecimalIndicator = "NotSpecified"
	EdifactDecimalIndicatorComma        EdifactDecimalIndicator = "Comma"
	EdifactDecimalIndicatorDecimal      EdifactDecimalIndicator = "Decimal"
)

// PossibleEdifactDecimalIndicatorValues returns the possible values for the EdifactDecimalIndicator const type.
func PossibleEdifactDecimalIndicatorValues() []EdifactDecimalIndicator {
	return []EdifactDecimalIndicator{
		EdifactDecimalIndicatorNotSpecified,
		EdifactDecimalIndicatorComma,
		EdifactDecimalIndicatorDecimal,
	}
}

// ToPtr returns a *EdifactDecimalIndicator pointing to the current value.
func (c EdifactDecimalIndicator) ToPtr() *EdifactDecimalIndicator {
	return &c
}

// EncryptionAlgorithm - The encryption algorithm.
type EncryptionAlgorithm string

const (
	EncryptionAlgorithmAES128       EncryptionAlgorithm = "AES128"
	EncryptionAlgorithmAES192       EncryptionAlgorithm = "AES192"
	EncryptionAlgorithmAES256       EncryptionAlgorithm = "AES256"
	EncryptionAlgorithmDES3         EncryptionAlgorithm = "DES3"
	EncryptionAlgorithmNone         EncryptionAlgorithm = "None"
	EncryptionAlgorithmNotSpecified EncryptionAlgorithm = "NotSpecified"
	EncryptionAlgorithmRC2          EncryptionAlgorithm = "RC2"
)

// PossibleEncryptionAlgorithmValues returns the possible values for the EncryptionAlgorithm const type.
func PossibleEncryptionAlgorithmValues() []EncryptionAlgorithm {
	return []EncryptionAlgorithm{
		EncryptionAlgorithmAES128,
		EncryptionAlgorithmAES192,
		EncryptionAlgorithmAES256,
		EncryptionAlgorithmDES3,
		EncryptionAlgorithmNone,
		EncryptionAlgorithmNotSpecified,
		EncryptionAlgorithmRC2,
	}
}

// ToPtr returns a *EncryptionAlgorithm pointing to the current value.
func (c EncryptionAlgorithm) ToPtr() *EncryptionAlgorithm {
	return &c
}

// ErrorResponseCode - The error response code.
type ErrorResponseCode string

const (
	ErrorResponseCodeIntegrationServiceEnvironmentNotFound ErrorResponseCode = "IntegrationServiceEnvironmentNotFound"
	ErrorResponseCodeInternalServerError                   ErrorResponseCode = "InternalServerError"
	ErrorResponseCodeInvalidOperationID                    ErrorResponseCode = "InvalidOperationId"
	ErrorResponseCodeNotSpecified                          ErrorResponseCode = "NotSpecified"
)

// PossibleErrorResponseCodeValues returns the possible values for the ErrorResponseCode const type.
func PossibleErrorResponseCodeValues() []ErrorResponseCode {
	return []ErrorResponseCode{
		ErrorResponseCodeIntegrationServiceEnvironmentNotFound,
		ErrorResponseCodeInternalServerError,
		ErrorResponseCodeInvalidOperationID,
		ErrorResponseCodeNotSpecified,
	}
}

// ToPtr returns a *ErrorResponseCode pointing to the current value.
func (c ErrorResponseCode) ToPtr() *ErrorResponseCode {
	return &c
}

// EventLevel - The event level.
type EventLevel string

const (
	EventLevelLogAlways     EventLevel = "LogAlways"
	EventLevelCritical      EventLevel = "Critical"
	EventLevelError         EventLevel = "Error"
	EventLevelWarning       EventLevel = "Warning"
	EventLevelInformational EventLevel = "Informational"
	EventLevelVerbose       EventLevel = "Verbose"
)

// PossibleEventLevelValues returns the possible values for the EventLevel const type.
func PossibleEventLevelValues() []EventLevel {
	return []EventLevel{
		EventLevelLogAlways,
		EventLevelCritical,
		EventLevelError,
		EventLevelWarning,
		EventLevelInformational,
		EventLevelVerbose,
	}
}

// ToPtr returns a *EventLevel pointing to the current value.
func (c EventLevel) ToPtr() *EventLevel {
	return &c
}

// HashingAlgorithm - The signing or hashing algorithm.
type HashingAlgorithm string

const (
	HashingAlgorithmMD5          HashingAlgorithm = "MD5"
	HashingAlgorithmNone         HashingAlgorithm = "None"
	HashingAlgorithmNotSpecified HashingAlgorithm = "NotSpecified"
	HashingAlgorithmSHA1         HashingAlgorithm = "SHA1"
	HashingAlgorithmSHA2256      HashingAlgorithm = "SHA2256"
	HashingAlgorithmSHA2384      HashingAlgorithm = "SHA2384"
	HashingAlgorithmSHA2512      HashingAlgorithm = "SHA2512"
)

// PossibleHashingAlgorithmValues returns the possible values for the HashingAlgorithm const type.
func PossibleHashingAlgorithmValues() []HashingAlgorithm {
	return []HashingAlgorithm{
		HashingAlgorithmMD5,
		HashingAlgorithmNone,
		HashingAlgorithmNotSpecified,
		HashingAlgorithmSHA1,
		HashingAlgorithmSHA2256,
		HashingAlgorithmSHA2384,
		HashingAlgorithmSHA2512,
	}
}

// ToPtr returns a *HashingAlgorithm pointing to the current value.
func (c HashingAlgorithm) ToPtr() *HashingAlgorithm {
	return &c
}

// IntegrationAccountSKUName - The integration account sku name.
type IntegrationAccountSKUName string

const (
	IntegrationAccountSKUNameBasic        IntegrationAccountSKUName = "Basic"
	IntegrationAccountSKUNameFree         IntegrationAccountSKUName = "Free"
	IntegrationAccountSKUNameNotSpecified IntegrationAccountSKUName = "NotSpecified"
	IntegrationAccountSKUNameStandard     IntegrationAccountSKUName = "Standard"
)

// PossibleIntegrationAccountSKUNameValues returns the possible values for the IntegrationAccountSKUName const type.
func PossibleIntegrationAccountSKUNameValues() []IntegrationAccountSKUName {
	return []IntegrationAccountSKUName{
		IntegrationAccountSKUNameBasic,
		IntegrationAccountSKUNameFree,
		IntegrationAccountSKUNameNotSpecified,
		IntegrationAccountSKUNameStandard,
	}
}

// ToPtr returns a *IntegrationAccountSKUName pointing to the current value.
func (c IntegrationAccountSKUName) ToPtr() *IntegrationAccountSKUName {
	return &c
}

// IntegrationServiceEnvironmentAccessEndpointType - The integration service environment access endpoint type.
type IntegrationServiceEnvironmentAccessEndpointType string

const (
	IntegrationServiceEnvironmentAccessEndpointTypeExternal     IntegrationServiceEnvironmentAccessEndpointType = "External"
	IntegrationServiceEnvironmentAccessEndpointTypeInternal     IntegrationServiceEnvironmentAccessEndpointType = "Internal"
	IntegrationServiceEnvironmentAccessEndpointTypeNotSpecified IntegrationServiceEnvironmentAccessEndpointType = "NotSpecified"
)

// PossibleIntegrationServiceEnvironmentAccessEndpointTypeValues returns the possible values for the IntegrationServiceEnvironmentAccessEndpointType const type.
func PossibleIntegrationServiceEnvironmentAccessEndpointTypeValues() []IntegrationServiceEnvironmentAccessEndpointType {
	return []IntegrationServiceEnvironmentAccessEndpointType{
		IntegrationServiceEnvironmentAccessEndpointTypeExternal,
		IntegrationServiceEnvironmentAccessEndpointTypeInternal,
		IntegrationServiceEnvironmentAccessEndpointTypeNotSpecified,
	}
}

// ToPtr returns a *IntegrationServiceEnvironmentAccessEndpointType pointing to the current value.
func (c IntegrationServiceEnvironmentAccessEndpointType) ToPtr() *IntegrationServiceEnvironmentAccessEndpointType {
	return &c
}

// IntegrationServiceEnvironmentNetworkDependencyCategoryType - The integration service environment network dependency category type.
type IntegrationServiceEnvironmentNetworkDependencyCategoryType string

const (
	IntegrationServiceEnvironmentNetworkDependencyCategoryTypeAccessEndpoints                         IntegrationServiceEnvironmentNetworkDependencyCategoryType = "AccessEndpoints"
	IntegrationServiceEnvironmentNetworkDependencyCategoryTypeAzureActiveDirectory                    IntegrationServiceEnvironmentNetworkDependencyCategoryType = "AzureActiveDirectory"
	IntegrationServiceEnvironmentNetworkDependencyCategoryTypeAzureManagement                         IntegrationServiceEnvironmentNetworkDependencyCategoryType = "AzureManagement"
	IntegrationServiceEnvironmentNetworkDependencyCategoryTypeAzureStorage                            IntegrationServiceEnvironmentNetworkDependencyCategoryType = "AzureStorage"
	IntegrationServiceEnvironmentNetworkDependencyCategoryTypeDiagnosticLogsAndMetrics                IntegrationServiceEnvironmentNetworkDependencyCategoryType = "DiagnosticLogsAndMetrics"
	IntegrationServiceEnvironmentNetworkDependencyCategoryTypeIntegrationServiceEnvironmentConnectors IntegrationServiceEnvironmentNetworkDependencyCategoryType = "IntegrationServiceEnvironmentConnectors"
	IntegrationServiceEnvironmentNetworkDependencyCategoryTypeNotSpecified                            IntegrationServiceEnvironmentNetworkDependencyCategoryType = "NotSpecified"
	IntegrationServiceEnvironmentNetworkDependencyCategoryTypeRecoveryService                         IntegrationServiceEnvironmentNetworkDependencyCategoryType = "RecoveryService"
	IntegrationServiceEnvironmentNetworkDependencyCategoryTypeRedisCache                              IntegrationServiceEnvironmentNetworkDependencyCategoryType = "RedisCache"
	IntegrationServiceEnvironmentNetworkDependencyCategoryTypeRegionalService                         IntegrationServiceEnvironmentNetworkDependencyCategoryType = "RegionalService"
	IntegrationServiceEnvironmentNetworkDependencyCategoryTypeSQL                                     IntegrationServiceEnvironmentNetworkDependencyCategoryType = "SQL"
	IntegrationServiceEnvironmentNetworkDependencyCategoryTypeSSLCertificateVerification              IntegrationServiceEnvironmentNetworkDependencyCategoryType = "SSLCertificateVerification"
)

// PossibleIntegrationServiceEnvironmentNetworkDependencyCategoryTypeValues returns the possible values for the IntegrationServiceEnvironmentNetworkDependencyCategoryType const type.
func PossibleIntegrationServiceEnvironmentNetworkDependencyCategoryTypeValues() []IntegrationServiceEnvironmentNetworkDependencyCategoryType {
	return []IntegrationServiceEnvironmentNetworkDependencyCategoryType{
		IntegrationServiceEnvironmentNetworkDependencyCategoryTypeAccessEndpoints,
		IntegrationServiceEnvironmentNetworkDependencyCategoryTypeAzureActiveDirectory,
		IntegrationServiceEnvironmentNetworkDependencyCategoryTypeAzureManagement,
		IntegrationServiceEnvironmentNetworkDependencyCategoryTypeAzureStorage,
		IntegrationServiceEnvironmentNetworkDependencyCategoryTypeDiagnosticLogsAndMetrics,
		IntegrationServiceEnvironmentNetworkDependencyCategoryTypeIntegrationServiceEnvironmentConnectors,
		IntegrationServiceEnvironmentNetworkDependencyCategoryTypeNotSpecified,
		IntegrationServiceEnvironmentNetworkDependencyCategoryTypeRecoveryService,
		IntegrationServiceEnvironmentNetworkDependencyCategoryTypeRedisCache,
		IntegrationServiceEnvironmentNetworkDependencyCategoryTypeRegionalService,
		IntegrationServiceEnvironmentNetworkDependencyCategoryTypeSQL,
		IntegrationServiceEnvironmentNetworkDependencyCategoryTypeSSLCertificateVerification,
	}
}

// ToPtr returns a *IntegrationServiceEnvironmentNetworkDependencyCategoryType pointing to the current value.
func (c IntegrationServiceEnvironmentNetworkDependencyCategoryType) ToPtr() *IntegrationServiceEnvironmentNetworkDependencyCategoryType {
	return &c
}

// IntegrationServiceEnvironmentNetworkDependencyHealthState - The integration service environment network dependency health state.
type IntegrationServiceEnvironmentNetworkDependencyHealthState string

const (
	IntegrationServiceEnvironmentNetworkDependencyHealthStateHealthy      IntegrationServiceEnvironmentNetworkDependencyHealthState = "Healthy"
	IntegrationServiceEnvironmentNetworkDependencyHealthStateNotSpecified IntegrationServiceEnvironmentNetworkDependencyHealthState = "NotSpecified"
	IntegrationServiceEnvironmentNetworkDependencyHealthStateUnhealthy    IntegrationServiceEnvironmentNetworkDependencyHealthState = "Unhealthy"
	IntegrationServiceEnvironmentNetworkDependencyHealthStateUnknown      IntegrationServiceEnvironmentNetworkDependencyHealthState = "Unknown"
)

// PossibleIntegrationServiceEnvironmentNetworkDependencyHealthStateValues returns the possible values for the IntegrationServiceEnvironmentNetworkDependencyHealthState const type.
func PossibleIntegrationServiceEnvironmentNetworkDependencyHealthStateValues() []IntegrationServiceEnvironmentNetworkDependencyHealthState {
	return []IntegrationServiceEnvironmentNetworkDependencyHealthState{
		IntegrationServiceEnvironmentNetworkDependencyHealthStateHealthy,
		IntegrationServiceEnvironmentNetworkDependencyHealthStateNotSpecified,
		IntegrationServiceEnvironmentNetworkDependencyHealthStateUnhealthy,
		IntegrationServiceEnvironmentNetworkDependencyHealthStateUnknown,
	}
}

// ToPtr returns a *IntegrationServiceEnvironmentNetworkDependencyHealthState pointing to the current value.
func (c IntegrationServiceEnvironmentNetworkDependencyHealthState) ToPtr() *IntegrationServiceEnvironmentNetworkDependencyHealthState {
	return &c
}

// IntegrationServiceEnvironmentNetworkEndPointAccessibilityState - The integration service environment network endpoint accessibility state.
type IntegrationServiceEnvironmentNetworkEndPointAccessibilityState string

const (
	IntegrationServiceEnvironmentNetworkEndPointAccessibilityStateAvailable    IntegrationServiceEnvironmentNetworkEndPointAccessibilityState = "Available"
	IntegrationServiceEnvironmentNetworkEndPointAccessibilityStateNotAvailable IntegrationServiceEnvironmentNetworkEndPointAccessibilityState = "NotAvailable"
	IntegrationServiceEnvironmentNetworkEndPointAccessibilityStateNotSpecified IntegrationServiceEnvironmentNetworkEndPointAccessibilityState = "NotSpecified"
	IntegrationServiceEnvironmentNetworkEndPointAccessibilityStateUnknown      IntegrationServiceEnvironmentNetworkEndPointAccessibilityState = "Unknown"
)

// PossibleIntegrationServiceEnvironmentNetworkEndPointAccessibilityStateValues returns the possible values for the IntegrationServiceEnvironmentNetworkEndPointAccessibilityState const type.
func PossibleIntegrationServiceEnvironmentNetworkEndPointAccessibilityStateValues() []IntegrationServiceEnvironmentNetworkEndPointAccessibilityState {
	return []IntegrationServiceEnvironmentNetworkEndPointAccessibilityState{
		IntegrationServiceEnvironmentNetworkEndPointAccessibilityStateAvailable,
		IntegrationServiceEnvironmentNetworkEndPointAccessibilityStateNotAvailable,
		IntegrationServiceEnvironmentNetworkEndPointAccessibilityStateNotSpecified,
		IntegrationServiceEnvironmentNetworkEndPointAccessibilityStateUnknown,
	}
}

// ToPtr returns a *IntegrationServiceEnvironmentNetworkEndPointAccessibilityState pointing to the current value.
func (c IntegrationServiceEnvironmentNetworkEndPointAccessibilityState) ToPtr() *IntegrationServiceEnvironmentNetworkEndPointAccessibilityState {
	return &c
}

// IntegrationServiceEnvironmentSKUName - The integration service environment sku name.
type IntegrationServiceEnvironmentSKUName string

const (
	IntegrationServiceEnvironmentSKUNameDeveloper    IntegrationServiceEnvironmentSKUName = "Developer"
	IntegrationServiceEnvironmentSKUNameNotSpecified IntegrationServiceEnvironmentSKUName = "NotSpecified"
	IntegrationServiceEnvironmentSKUNamePremium      IntegrationServiceEnvironmentSKUName = "Premium"
)

// PossibleIntegrationServiceEnvironmentSKUNameValues returns the possible values for the IntegrationServiceEnvironmentSKUName const type.
func PossibleIntegrationServiceEnvironmentSKUNameValues() []IntegrationServiceEnvironmentSKUName {
	return []IntegrationServiceEnvironmentSKUName{
		IntegrationServiceEnvironmentSKUNameDeveloper,
		IntegrationServiceEnvironmentSKUNameNotSpecified,
		IntegrationServiceEnvironmentSKUNamePremium,
	}
}

// ToPtr returns a *IntegrationServiceEnvironmentSKUName pointing to the current value.
func (c IntegrationServiceEnvironmentSKUName) ToPtr() *IntegrationServiceEnvironmentSKUName {
	return &c
}

// IntegrationServiceEnvironmentSKUScaleType - The integration service environment sku scale type.
type IntegrationServiceEnvironmentSKUScaleType string

const (
	IntegrationServiceEnvironmentSKUScaleTypeAutomatic IntegrationServiceEnvironmentSKUScaleType = "Automatic"
	IntegrationServiceEnvironmentSKUScaleTypeManual    IntegrationServiceEnvironmentSKUScaleType = "Manual"
	IntegrationServiceEnvironmentSKUScaleTypeNone      IntegrationServiceEnvironmentSKUScaleType = "None"
)

// PossibleIntegrationServiceEnvironmentSKUScaleTypeValues returns the possible values for the IntegrationServiceEnvironmentSKUScaleType const type.
func PossibleIntegrationServiceEnvironmentSKUScaleTypeValues() []IntegrationServiceEnvironmentSKUScaleType {
	return []IntegrationServiceEnvironmentSKUScaleType{
		IntegrationServiceEnvironmentSKUScaleTypeAutomatic,
		IntegrationServiceEnvironmentSKUScaleTypeManual,
		IntegrationServiceEnvironmentSKUScaleTypeNone,
	}
}

// ToPtr returns a *IntegrationServiceEnvironmentSKUScaleType pointing to the current value.
func (c IntegrationServiceEnvironmentSKUScaleType) ToPtr() *IntegrationServiceEnvironmentSKUScaleType {
	return &c
}

// KeyType - The key type.
type KeyType string

const (
	KeyTypeNotSpecified KeyType = "NotSpecified"
	KeyTypePrimary      KeyType = "Primary"
	KeyTypeSecondary    KeyType = "Secondary"
)

// PossibleKeyTypeValues returns the possible values for the KeyType const type.
func PossibleKeyTypeValues() []KeyType {
	return []KeyType{
		KeyTypeNotSpecified,
		KeyTypePrimary,
		KeyTypeSecondary,
	}
}

// ToPtr returns a *KeyType pointing to the current value.
func (c KeyType) ToPtr() *KeyType {
	return &c
}

// ManagedServiceIdentityType - Type of managed service identity. The type 'SystemAssigned' includes an implicitly created identity. The type 'None' will
// remove any identities from the resource.
type ManagedServiceIdentityType string

const (
	ManagedServiceIdentityTypeNone           ManagedServiceIdentityType = "None"
	ManagedServiceIdentityTypeSystemAssigned ManagedServiceIdentityType = "SystemAssigned"
	ManagedServiceIdentityTypeUserAssigned   ManagedServiceIdentityType = "UserAssigned"
)

// PossibleManagedServiceIdentityTypeValues returns the possible values for the ManagedServiceIdentityType const type.
func PossibleManagedServiceIdentityTypeValues() []ManagedServiceIdentityType {
	return []ManagedServiceIdentityType{
		ManagedServiceIdentityTypeNone,
		ManagedServiceIdentityTypeSystemAssigned,
		ManagedServiceIdentityTypeUserAssigned,
	}
}

// ToPtr returns a *ManagedServiceIdentityType pointing to the current value.
func (c ManagedServiceIdentityType) ToPtr() *ManagedServiceIdentityType {
	return &c
}

// MapType - The map type.
type MapType string

const (
	MapTypeLiquid       MapType = "Liquid"
	MapTypeNotSpecified MapType = "NotSpecified"
	MapTypeXslt         MapType = "Xslt"
	MapTypeXslt20       MapType = "Xslt20"
	MapTypeXslt30       MapType = "Xslt30"
)

// PossibleMapTypeValues returns the possible values for the MapType const type.
func PossibleMapTypeValues() []MapType {
	return []MapType{
		MapTypeLiquid,
		MapTypeNotSpecified,
		MapTypeXslt,
		MapTypeXslt20,
		MapTypeXslt30,
	}
}

// ToPtr returns a *MapType pointing to the current value.
func (c MapType) ToPtr() *MapType {
	return &c
}

// MessageFilterType - The message filter type.
type MessageFilterType string

const (
	MessageFilterTypeExclude      MessageFilterType = "Exclude"
	MessageFilterTypeInclude      MessageFilterType = "Include"
	MessageFilterTypeNotSpecified MessageFilterType = "NotSpecified"
)

// PossibleMessageFilterTypeValues returns the possible values for the MessageFilterType const type.
func PossibleMessageFilterTypeValues() []MessageFilterType {
	return []MessageFilterType{
		MessageFilterTypeExclude,
		MessageFilterTypeInclude,
		MessageFilterTypeNotSpecified,
	}
}

// ToPtr returns a *MessageFilterType pointing to the current value.
func (c MessageFilterType) ToPtr() *MessageFilterType {
	return &c
}

// OpenAuthenticationProviderType - Open authentication policy provider type.
type OpenAuthenticationProviderType string

const (
	OpenAuthenticationProviderTypeAAD OpenAuthenticationProviderType = "AAD"
)

// PossibleOpenAuthenticationProviderTypeValues returns the possible values for the OpenAuthenticationProviderType const type.
func PossibleOpenAuthenticationProviderTypeValues() []OpenAuthenticationProviderType {
	return []OpenAuthenticationProviderType{
		OpenAuthenticationProviderTypeAAD,
	}
}

// ToPtr returns a *OpenAuthenticationProviderType pointing to the current value.
func (c OpenAuthenticationProviderType) ToPtr() *OpenAuthenticationProviderType {
	return &c
}

// ParameterType - The parameter type.
type ParameterType string

const (
	ParameterTypeArray        ParameterType = "Array"
	ParameterTypeBool         ParameterType = "Bool"
	ParameterTypeFloat        ParameterType = "Float"
	ParameterTypeInt          ParameterType = "Int"
	ParameterTypeNotSpecified ParameterType = "NotSpecified"
	ParameterTypeObject       ParameterType = "Object"
	ParameterTypeSecureObject ParameterType = "SecureObject"
	ParameterTypeSecureString ParameterType = "SecureString"
	ParameterTypeString       ParameterType = "String"
)

// PossibleParameterTypeValues returns the possible values for the ParameterType const type.
func PossibleParameterTypeValues() []ParameterType {
	return []ParameterType{
		ParameterTypeArray,
		ParameterTypeBool,
		ParameterTypeFloat,
		ParameterTypeInt,
		ParameterTypeNotSpecified,
		ParameterTypeObject,
		ParameterTypeSecureObject,
		ParameterTypeSecureString,
		ParameterTypeString,
	}
}

// ToPtr returns a *ParameterType pointing to the current value.
func (c ParameterType) ToPtr() *ParameterType {
	return &c
}

// PartnerType - The partner type.
type PartnerType string

const (
	PartnerTypeB2B          PartnerType = "B2B"
	PartnerTypeNotSpecified PartnerType = "NotSpecified"
)

// PossiblePartnerTypeValues returns the possible values for the PartnerType const type.
func PossiblePartnerTypeValues() []PartnerType {
	return []PartnerType{
		PartnerTypeB2B,
		PartnerTypeNotSpecified,
	}
}

// ToPtr returns a *PartnerType pointing to the current value.
func (c PartnerType) ToPtr() *PartnerType {
	return &c
}

// RecurrenceFrequency - The recurrence frequency.
type RecurrenceFrequency string

const (
	RecurrenceFrequencyDay          RecurrenceFrequency = "Day"
	RecurrenceFrequencyHour         RecurrenceFrequency = "Hour"
	RecurrenceFrequencyMinute       RecurrenceFrequency = "Minute"
	RecurrenceFrequencyMonth        RecurrenceFrequency = "Month"
	RecurrenceFrequencyNotSpecified RecurrenceFrequency = "NotSpecified"
	RecurrenceFrequencySecond       RecurrenceFrequency = "Second"
	RecurrenceFrequencyWeek         RecurrenceFrequency = "Week"
	RecurrenceFrequencyYear         RecurrenceFrequency = "Year"
)

// PossibleRecurrenceFrequencyValues returns the possible values for the RecurrenceFrequency const type.
func PossibleRecurrenceFrequencyValues() []RecurrenceFrequency {
	return []RecurrenceFrequency{
		RecurrenceFrequencyDay,
		RecurrenceFrequencyHour,
		RecurrenceFrequencyMinute,
		RecurrenceFrequencyMonth,
		RecurrenceFrequencyNotSpecified,
		RecurrenceFrequencySecond,
		RecurrenceFrequencyWeek,
		RecurrenceFrequencyYear,
	}
}

// ToPtr returns a *RecurrenceFrequency pointing to the current value.
func (c RecurrenceFrequency) ToPtr() *RecurrenceFrequency {
	return &c
}

// SKUName - The sku name.
type SKUName string

const (
	SKUNameBasic        SKUName = "Basic"
	SKUNameFree         SKUName = "Free"
	SKUNameNotSpecified SKUName = "NotSpecified"
	SKUNamePremium      SKUName = "Premium"
	SKUNameShared       SKUName = "Shared"
	SKUNameStandard     SKUName = "Standard"
)

// PossibleSKUNameValues returns the possible values for the SKUName const type.
func PossibleSKUNameValues() []SKUName {
	return []SKUName{
		SKUNameBasic,
		SKUNameFree,
		SKUNameNotSpecified,
		SKUNamePremium,
		SKUNameShared,
		SKUNameStandard,
	}
}

// ToPtr returns a *SKUName pointing to the current value.
func (c SKUName) ToPtr() *SKUName {
	return &c
}

// SchemaType - The schema type.
type SchemaType string

const (
	SchemaTypeNotSpecified SchemaType = "NotSpecified"
	SchemaTypeXML          SchemaType = "Xml"
)

// PossibleSchemaTypeValues returns the possible values for the SchemaType const type.
func PossibleSchemaTypeValues() []SchemaType {
	return []SchemaType{
		SchemaTypeNotSpecified,
		SchemaTypeXML,
	}
}

// ToPtr returns a *SchemaType pointing to the current value.
func (c SchemaType) ToPtr() *SchemaType {
	return &c
}

// SegmentTerminatorSuffix - The segment terminator suffix.
type SegmentTerminatorSuffix string

const (
	SegmentTerminatorSuffixNotSpecified SegmentTerminatorSuffix = "NotSpecified"
	SegmentTerminatorSuffixNone         SegmentTerminatorSuffix = "None"
	SegmentTerminatorSuffixCR           SegmentTerminatorSuffix = "CR"
	SegmentTerminatorSuffixLF           SegmentTerminatorSuffix = "LF"
	SegmentTerminatorSuffixCRLF         SegmentTerminatorSuffix = "CRLF"
)

// PossibleSegmentTerminatorSuffixValues returns the possible values for the SegmentTerminatorSuffix const type.
func PossibleSegmentTerminatorSuffixValues() []SegmentTerminatorSuffix {
	return []SegmentTerminatorSuffix{
		SegmentTerminatorSuffixNotSpecified,
		SegmentTerminatorSuffixNone,
		SegmentTerminatorSuffixCR,
		SegmentTerminatorSuffixLF,
		SegmentTerminatorSuffixCRLF,
	}
}

// ToPtr returns a *SegmentTerminatorSuffix pointing to the current value.
func (c SegmentTerminatorSuffix) ToPtr() *SegmentTerminatorSuffix {
	return &c
}

// SigningAlgorithm - The signing or hashing algorithm.
type SigningAlgorithm string

const (
	SigningAlgorithmDefault      SigningAlgorithm = "Default"
	SigningAlgorithmNotSpecified SigningAlgorithm = "NotSpecified"
	SigningAlgorithmSHA1         SigningAlgorithm = "SHA1"
	SigningAlgorithmSHA2256      SigningAlgorithm = "SHA2256"
	SigningAlgorithmSHA2384      SigningAlgorithm = "SHA2384"
	SigningAlgorithmSHA2512      SigningAlgorithm = "SHA2512"
)

// PossibleSigningAlgorithmValues returns the possible values for the SigningAlgorithm const type.
func PossibleSigningAlgorithmValues() []SigningAlgorithm {
	return []SigningAlgorithm{
		SigningAlgorithmDefault,
		SigningAlgorithmNotSpecified,
		SigningAlgorithmSHA1,
		SigningAlgorithmSHA2256,
		SigningAlgorithmSHA2384,
		SigningAlgorithmSHA2512,
	}
}

// ToPtr returns a *SigningAlgorithm pointing to the current value.
func (c SigningAlgorithm) ToPtr() *SigningAlgorithm {
	return &c
}

// StatusAnnotation - The status annotation.
type StatusAnnotation string

const (
	StatusAnnotationNotSpecified StatusAnnotation = "NotSpecified"
	StatusAnnotationPreview      StatusAnnotation = "Preview"
	StatusAnnotationProduction   StatusAnnotation = "Production"
)

// PossibleStatusAnnotationValues returns the possible values for the StatusAnnotation const type.
func PossibleStatusAnnotationValues() []StatusAnnotation {
	return []StatusAnnotation{
		StatusAnnotationNotSpecified,
		StatusAnnotationPreview,
		StatusAnnotationProduction,
	}
}

// ToPtr returns a *StatusAnnotation pointing to the current value.
func (c StatusAnnotation) ToPtr() *StatusAnnotation {
	return &c
}

// SwaggerSchemaType - The swagger schema type.
type SwaggerSchemaType string

const (
	SwaggerSchemaTypeArray   SwaggerSchemaType = "Array"
	SwaggerSchemaTypeBoolean SwaggerSchemaType = "Boolean"
	SwaggerSchemaTypeFile    SwaggerSchemaType = "File"
	SwaggerSchemaTypeInteger SwaggerSchemaType = "Integer"
	SwaggerSchemaTypeNull    SwaggerSchemaType = "Null"
	SwaggerSchemaTypeNumber  SwaggerSchemaType = "Number"
	SwaggerSchemaTypeObject  SwaggerSchemaType = "Object"
	SwaggerSchemaTypeString  SwaggerSchemaType = "String"
)

// PossibleSwaggerSchemaTypeValues returns the possible values for the SwaggerSchemaType const type.
func PossibleSwaggerSchemaTypeValues() []SwaggerSchemaType {
	return []SwaggerSchemaType{
		SwaggerSchemaTypeArray,
		SwaggerSchemaTypeBoolean,
		SwaggerSchemaTypeFile,
		SwaggerSchemaTypeInteger,
		SwaggerSchemaTypeNull,
		SwaggerSchemaTypeNumber,
		SwaggerSchemaTypeObject,
		SwaggerSchemaTypeString,
	}
}

// ToPtr returns a *SwaggerSchemaType pointing to the current value.
func (c SwaggerSchemaType) ToPtr() *SwaggerSchemaType {
	return &c
}

// TrackEventsOperationOptions - The track events operation options.
type TrackEventsOperationOptions string

const (
	TrackEventsOperationOptionsDisableSourceInfoEnrich TrackEventsOperationOptions = "DisableSourceInfoEnrich"
	TrackEventsOperationOptionsNone                    TrackEventsOperationOptions = "None"
)

// PossibleTrackEventsOperationOptionsValues returns the possible values for the TrackEventsOperationOptions const type.
func PossibleTrackEventsOperationOptionsValues() []TrackEventsOperationOptions {
	return []TrackEventsOperationOptions{
		TrackEventsOperationOptionsDisableSourceInfoEnrich,
		TrackEventsOperationOptionsNone,
	}
}

// ToPtr returns a *TrackEventsOperationOptions pointing to the current value.
func (c TrackEventsOperationOptions) ToPtr() *TrackEventsOperationOptions {
	return &c
}

// TrackingRecordType - The tracking record type.
type TrackingRecordType string

const (
	TrackingRecordTypeAS2MDN                               TrackingRecordType = "AS2MDN"
	TrackingRecordTypeAS2Message                           TrackingRecordType = "AS2Message"
	TrackingRecordTypeCustom                               TrackingRecordType = "Custom"
	TrackingRecordTypeEdifactFunctionalGroup               TrackingRecordType = "EdifactFunctionalGroup"
	TrackingRecordTypeEdifactFunctionalGroupAcknowledgment TrackingRecordType = "EdifactFunctionalGroupAcknowledgment"
	TrackingRecordTypeEdifactInterchange                   TrackingRecordType = "EdifactInterchange"
	TrackingRecordTypeEdifactInterchangeAcknowledgment     TrackingRecordType = "EdifactInterchangeAcknowledgment"
	TrackingRecordTypeEdifactTransactionSet                TrackingRecordType = "EdifactTransactionSet"
	TrackingRecordTypeEdifactTransactionSetAcknowledgment  TrackingRecordType = "EdifactTransactionSetAcknowledgment"
	TrackingRecordTypeNotSpecified                         TrackingRecordType = "NotSpecified"
	TrackingRecordTypeX12FunctionalGroup                   TrackingRecordType = "X12FunctionalGroup"
	TrackingRecordTypeX12FunctionalGroupAcknowledgment     TrackingRecordType = "X12FunctionalGroupAcknowledgment"
	TrackingRecordTypeX12Interchange                       TrackingRecordType = "X12Interchange"
	TrackingRecordTypeX12InterchangeAcknowledgment         TrackingRecordType = "X12InterchangeAcknowledgment"
	TrackingRecordTypeX12TransactionSet                    TrackingRecordType = "X12TransactionSet"
	TrackingRecordTypeX12TransactionSetAcknowledgment      TrackingRecordType = "X12TransactionSetAcknowledgment"
)

// PossibleTrackingRecordTypeValues returns the possible values for the TrackingRecordType const type.
func PossibleTrackingRecordTypeValues() []TrackingRecordType {
	return []TrackingRecordType{
		TrackingRecordTypeAS2MDN,
		TrackingRecordTypeAS2Message,
		TrackingRecordTypeCustom,
		TrackingRecordTypeEdifactFunctionalGroup,
		TrackingRecordTypeEdifactFunctionalGroupAcknowledgment,
		TrackingRecordTypeEdifactInterchange,
		TrackingRecordTypeEdifactInterchangeAcknowledgment,
		TrackingRecordTypeEdifactTransactionSet,
		TrackingRecordTypeEdifactTransactionSetAcknowledgment,
		TrackingRecordTypeNotSpecified,
		TrackingRecordTypeX12FunctionalGroup,
		TrackingRecordTypeX12FunctionalGroupAcknowledgment,
		TrackingRecordTypeX12Interchange,
		TrackingRecordTypeX12InterchangeAcknowledgment,
		TrackingRecordTypeX12TransactionSet,
		TrackingRecordTypeX12TransactionSetAcknowledgment,
	}
}

// ToPtr returns a *TrackingRecordType pointing to the current value.
func (c TrackingRecordType) ToPtr() *TrackingRecordType {
	return &c
}

// TrailingSeparatorPolicy - The trailing separator policy.
type TrailingSeparatorPolicy string

const (
	TrailingSeparatorPolicyMandatory    TrailingSeparatorPolicy = "Mandatory"
	TrailingSeparatorPolicyNotAllowed   TrailingSeparatorPolicy = "NotAllowed"
	TrailingSeparatorPolicyNotSpecified TrailingSeparatorPolicy = "NotSpecified"
	TrailingSeparatorPolicyOptional     TrailingSeparatorPolicy = "Optional"
)

// PossibleTrailingSeparatorPolicyValues returns the possible values for the TrailingSeparatorPolicy const type.
func PossibleTrailingSeparatorPolicyValues() []TrailingSeparatorPolicy {
	return []TrailingSeparatorPolicy{
		TrailingSeparatorPolicyMandatory,
		TrailingSeparatorPolicyNotAllowed,
		TrailingSeparatorPolicyNotSpecified,
		TrailingSeparatorPolicyOptional,
	}
}

// ToPtr returns a *TrailingSeparatorPolicy pointing to the current value.
func (c TrailingSeparatorPolicy) ToPtr() *TrailingSeparatorPolicy {
	return &c
}

// UsageIndicator - The usage indicator.
type UsageIndicator string

const (
	UsageIndicatorInformation  UsageIndicator = "Information"
	UsageIndicatorNotSpecified UsageIndicator = "NotSpecified"
	UsageIndicatorProduction   UsageIndicator = "Production"
	UsageIndicatorTest         UsageIndicator = "Test"
)

// PossibleUsageIndicatorValues returns the possible values for the UsageIndicator const type.
func PossibleUsageIndicatorValues() []UsageIndicator {
	return []UsageIndicator{
		UsageIndicatorInformation,
		UsageIndicatorNotSpecified,
		UsageIndicatorProduction,
		UsageIndicatorTest,
	}
}

// ToPtr returns a *UsageIndicator pointing to the current value.
func (c UsageIndicator) ToPtr() *UsageIndicator {
	return &c
}

// WorkflowProvisioningState - The workflow provisioning state.
type WorkflowProvisioningState string

const (
	WorkflowProvisioningStateAccepted      WorkflowProvisioningState = "Accepted"
	WorkflowProvisioningStateCanceled      WorkflowProvisioningState = "Canceled"
	WorkflowProvisioningStateCompleted     WorkflowProvisioningState = "Completed"
	WorkflowProvisioningStateCreated       WorkflowProvisioningState = "Created"
	WorkflowProvisioningStateCreating      WorkflowProvisioningState = "Creating"
	WorkflowProvisioningStateDeleted       WorkflowProvisioningState = "Deleted"
	WorkflowProvisioningStateDeleting      WorkflowProvisioningState = "Deleting"
	WorkflowProvisioningStateFailed        WorkflowProvisioningState = "Failed"
	WorkflowProvisioningStateInProgress    WorkflowProvisioningState = "InProgress"
	WorkflowProvisioningStateMoving        WorkflowProvisioningState = "Moving"
	WorkflowProvisioningStateNotSpecified  WorkflowProvisioningState = "NotSpecified"
	WorkflowProvisioningStatePending       WorkflowProvisioningState = "Pending"
	WorkflowProvisioningStateReady         WorkflowProvisioningState = "Ready"
	WorkflowProvisioningStateRegistered    WorkflowProvisioningState = "Registered"
	WorkflowProvisioningStateRegistering   WorkflowProvisioningState = "Registering"
	WorkflowProvisioningStateRenewing      WorkflowProvisioningState = "Renewing"
	WorkflowProvisioningStateRunning       WorkflowProvisioningState = "Running"
	WorkflowProvisioningStateSucceeded     WorkflowProvisioningState = "Succeeded"
	WorkflowProvisioningStateUnregistered  WorkflowProvisioningState = "Unregistered"
	WorkflowProvisioningStateUnregistering WorkflowProvisioningState = "Unregistering"
	WorkflowProvisioningStateUpdating      WorkflowProvisioningState = "Updating"
	WorkflowProvisioningStateWaiting       WorkflowProvisioningState = "Waiting"
)

// PossibleWorkflowProvisioningStateValues returns the possible values for the WorkflowProvisioningState const type.
func PossibleWorkflowProvisioningStateValues() []WorkflowProvisioningState {
	return []WorkflowProvisioningState{
		WorkflowProvisioningStateAccepted,
		WorkflowProvisioningStateCanceled,
		WorkflowProvisioningStateCompleted,
		WorkflowProvisioningStateCreated,
		WorkflowProvisioningStateCreating,
		WorkflowProvisioningStateDeleted,
		WorkflowProvisioningStateDeleting,
		WorkflowProvisioningStateFailed,
		WorkflowProvisioningStateInProgress,
		WorkflowProvisioningStateMoving,
		WorkflowProvisioningStateNotSpecified,
		WorkflowProvisioningStatePending,
		WorkflowProvisioningStateReady,
		WorkflowProvisioningStateRegistered,
		WorkflowProvisioningStateRegistering,
		WorkflowProvisioningStateRenewing,
		WorkflowProvisioningStateRunning,
		WorkflowProvisioningStateSucceeded,
		WorkflowProvisioningStateUnregistered,
		WorkflowProvisioningStateUnregistering,
		WorkflowProvisioningStateUpdating,
		WorkflowProvisioningStateWaiting,
	}
}

// ToPtr returns a *WorkflowProvisioningState pointing to the current value.
func (c WorkflowProvisioningState) ToPtr() *WorkflowProvisioningState {
	return &c
}

// WorkflowState - The workflow state.
type WorkflowState string

const (
	WorkflowStateCompleted    WorkflowState = "Completed"
	WorkflowStateDeleted      WorkflowState = "Deleted"
	WorkflowStateDisabled     WorkflowState = "Disabled"
	WorkflowStateEnabled      WorkflowState = "Enabled"
	WorkflowStateNotSpecified WorkflowState = "NotSpecified"
	WorkflowStateSuspended    WorkflowState = "Suspended"
)

// PossibleWorkflowStateValues returns the possible values for the WorkflowState const type.
func PossibleWorkflowStateValues() []WorkflowState {
	return []WorkflowState{
		WorkflowStateCompleted,
		WorkflowStateDeleted,
		WorkflowStateDisabled,
		WorkflowStateEnabled,
		WorkflowStateNotSpecified,
		WorkflowStateSuspended,
	}
}

// ToPtr returns a *WorkflowState pointing to the current value.
func (c WorkflowState) ToPtr() *WorkflowState {
	return &c
}

// WorkflowStatus - The workflow status.
type WorkflowStatus string

const (
	WorkflowStatusAborted      WorkflowStatus = "Aborted"
	WorkflowStatusCancelled    WorkflowStatus = "Cancelled"
	WorkflowStatusFailed       WorkflowStatus = "Failed"
	WorkflowStatusFaulted      WorkflowStatus = "Faulted"
	WorkflowStatusIgnored      WorkflowStatus = "Ignored"
	WorkflowStatusNotSpecified WorkflowStatus = "NotSpecified"
	WorkflowStatusPaused       WorkflowStatus = "Paused"
	WorkflowStatusRunning      WorkflowStatus = "Running"
	WorkflowStatusSkipped      WorkflowStatus = "Skipped"
	WorkflowStatusSucceeded    WorkflowStatus = "Succeeded"
	WorkflowStatusSuspended    WorkflowStatus = "Suspended"
	WorkflowStatusTimedOut     WorkflowStatus = "TimedOut"
	WorkflowStatusWaiting      WorkflowStatus = "Waiting"
)

// PossibleWorkflowStatusValues returns the possible values for the WorkflowStatus const type.
func PossibleWorkflowStatusValues() []WorkflowStatus {
	return []WorkflowStatus{
		WorkflowStatusAborted,
		WorkflowStatusCancelled,
		WorkflowStatusFailed,
		WorkflowStatusFaulted,
		WorkflowStatusIgnored,
		WorkflowStatusNotSpecified,
		WorkflowStatusPaused,
		WorkflowStatusRunning,
		WorkflowStatusSkipped,
		WorkflowStatusSucceeded,
		WorkflowStatusSuspended,
		WorkflowStatusTimedOut,
		WorkflowStatusWaiting,
	}
}

// ToPtr returns a *WorkflowStatus pointing to the current value.
func (c WorkflowStatus) ToPtr() *WorkflowStatus {
	return &c
}

// WorkflowTriggerProvisioningState - The workflow trigger provisioning state.
type WorkflowTriggerProvisioningState string

const (
	WorkflowTriggerProvisioningStateAccepted      WorkflowTriggerProvisioningState = "Accepted"
	WorkflowTriggerProvisioningStateCanceled      WorkflowTriggerProvisioningState = "Canceled"
	WorkflowTriggerProvisioningStateCompleted     WorkflowTriggerProvisioningState = "Completed"
	WorkflowTriggerProvisioningStateCreated       WorkflowTriggerProvisioningState = "Created"
	WorkflowTriggerProvisioningStateCreating      WorkflowTriggerProvisioningState = "Creating"
	WorkflowTriggerProvisioningStateDeleted       WorkflowTriggerProvisioningState = "Deleted"
	WorkflowTriggerProvisioningStateDeleting      WorkflowTriggerProvisioningState = "Deleting"
	WorkflowTriggerProvisioningStateFailed        WorkflowTriggerProvisioningState = "Failed"
	WorkflowTriggerProvisioningStateMoving        WorkflowTriggerProvisioningState = "Moving"
	WorkflowTriggerProvisioningStateNotSpecified  WorkflowTriggerProvisioningState = "NotSpecified"
	WorkflowTriggerProvisioningStateReady         WorkflowTriggerProvisioningState = "Ready"
	WorkflowTriggerProvisioningStateRegistered    WorkflowTriggerProvisioningState = "Registered"
	WorkflowTriggerProvisioningStateRegistering   WorkflowTriggerProvisioningState = "Registering"
	WorkflowTriggerProvisioningStateRunning       WorkflowTriggerProvisioningState = "Running"
	WorkflowTriggerProvisioningStateSucceeded     WorkflowTriggerProvisioningState = "Succeeded"
	WorkflowTriggerProvisioningStateUnregistered  WorkflowTriggerProvisioningState = "Unregistered"
	WorkflowTriggerProvisioningStateUnregistering WorkflowTriggerProvisioningState = "Unregistering"
	WorkflowTriggerProvisioningStateUpdating      WorkflowTriggerProvisioningState = "Updating"
)

// PossibleWorkflowTriggerProvisioningStateValues returns the possible values for the WorkflowTriggerProvisioningState const type.
func PossibleWorkflowTriggerProvisioningStateValues() []WorkflowTriggerProvisioningState {
	return []WorkflowTriggerProvisioningState{
		WorkflowTriggerProvisioningStateAccepted,
		WorkflowTriggerProvisioningStateCanceled,
		WorkflowTriggerProvisioningStateCompleted,
		WorkflowTriggerProvisioningStateCreated,
		WorkflowTriggerProvisioningStateCreating,
		WorkflowTriggerProvisioningStateDeleted,
		WorkflowTriggerProvisioningStateDeleting,
		WorkflowTriggerProvisioningStateFailed,
		WorkflowTriggerProvisioningStateMoving,
		WorkflowTriggerProvisioningStateNotSpecified,
		WorkflowTriggerProvisioningStateReady,
		WorkflowTriggerProvisioningStateRegistered,
		WorkflowTriggerProvisioningStateRegistering,
		WorkflowTriggerProvisioningStateRunning,
		WorkflowTriggerProvisioningStateSucceeded,
		WorkflowTriggerProvisioningStateUnregistered,
		WorkflowTriggerProvisioningStateUnregistering,
		WorkflowTriggerProvisioningStateUpdating,
	}
}

// ToPtr returns a *WorkflowTriggerProvisioningState pointing to the current value.
func (c WorkflowTriggerProvisioningState) ToPtr() *WorkflowTriggerProvisioningState {
	return &c
}

// WsdlImportMethod - The WSDL import method.
type WsdlImportMethod string

const (
	WsdlImportMethodNotSpecified    WsdlImportMethod = "NotSpecified"
	WsdlImportMethodSoapPassThrough WsdlImportMethod = "SoapPassThrough"
	WsdlImportMethodSoapToRest      WsdlImportMethod = "SoapToRest"
)

// PossibleWsdlImportMethodValues returns the possible values for the WsdlImportMethod const type.
func PossibleWsdlImportMethodValues() []WsdlImportMethod {
	return []WsdlImportMethod{
		WsdlImportMethodNotSpecified,
		WsdlImportMethodSoapPassThrough,
		WsdlImportMethodSoapToRest,
	}
}

// ToPtr returns a *WsdlImportMethod pointing to the current value.
func (c WsdlImportMethod) ToPtr() *WsdlImportMethod {
	return &c
}

// X12CharacterSet - The X12 character set.
type X12CharacterSet string

const (
	X12CharacterSetBasic        X12CharacterSet = "Basic"
	X12CharacterSetExtended     X12CharacterSet = "Extended"
	X12CharacterSetNotSpecified X12CharacterSet = "NotSpecified"
	X12CharacterSetUTF8         X12CharacterSet = "UTF8"
)

// PossibleX12CharacterSetValues returns the possible values for the X12CharacterSet const type.
func PossibleX12CharacterSetValues() []X12CharacterSet {
	return []X12CharacterSet{
		X12CharacterSetBasic,
		X12CharacterSetExtended,
		X12CharacterSetNotSpecified,
		X12CharacterSetUTF8,
	}
}

// ToPtr returns a *X12CharacterSet pointing to the current value.
func (c X12CharacterSet) ToPtr() *X12CharacterSet {
	return &c
}

// X12DateFormat - The x12 date format.
type X12DateFormat string

const (
	X12DateFormatCCYYMMDD     X12DateFormat = "CCYYMMDD"
	X12DateFormatNotSpecified X12DateFormat = "NotSpecified"
	X12DateFormatYYMMDD       X12DateFormat = "YYMMDD"
)

// PossibleX12DateFormatValues returns the possible values for the X12DateFormat const type.
func PossibleX12DateFormatValues() []X12DateFormat {
	return []X12DateFormat{
		X12DateFormatCCYYMMDD,
		X12DateFormatNotSpecified,
		X12DateFormatYYMMDD,
	}
}

// ToPtr returns a *X12DateFormat pointing to the current value.
func (c X12DateFormat) ToPtr() *X12DateFormat {
	return &c
}

// X12TimeFormat - The x12 time format.
type X12TimeFormat string

const (
	X12TimeFormatHHMM         X12TimeFormat = "HHMM"
	X12TimeFormatHHMMSS       X12TimeFormat = "HHMMSS"
	X12TimeFormatHHMMSSd      X12TimeFormat = "HHMMSSd"
	X12TimeFormatHHMMSSdd     X12TimeFormat = "HHMMSSdd"
	X12TimeFormatNotSpecified X12TimeFormat = "NotSpecified"
)

// PossibleX12TimeFormatValues returns the possible values for the X12TimeFormat const type.
func PossibleX12TimeFormatValues() []X12TimeFormat {
	return []X12TimeFormat{
		X12TimeFormatHHMM,
		X12TimeFormatHHMMSS,
		X12TimeFormatHHMMSSd,
		X12TimeFormatHHMMSSdd,
		X12TimeFormatNotSpecified,
	}
}

// ToPtr returns a *X12TimeFormat pointing to the current value.
func (c X12TimeFormat) ToPtr() *X12TimeFormat {
	return &c
}
