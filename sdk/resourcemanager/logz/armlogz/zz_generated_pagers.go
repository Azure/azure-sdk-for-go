//go:build go1.16
// +build go1.16

// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

package armlogz

import (
	"context"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/policy"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/runtime"
	"net/http"
	"reflect"
)

// MonitorListVMHostUpdatePager provides operations for iterating over paged responses.
type MonitorListVMHostUpdatePager struct {
	client    *MonitorClient
	current   MonitorListVMHostUpdateResponse
	err       error
	requester func(context.Context) (*policy.Request, error)
	advancer  func(context.Context, MonitorListVMHostUpdateResponse) (*policy.Request, error)
}

// Err returns the last error encountered while paging.
func (p *MonitorListVMHostUpdatePager) Err() error {
	return p.err
}

// NextPage returns true if the pager advanced to the next page.
// Returns false if there are no more pages or an error occurred.
func (p *MonitorListVMHostUpdatePager) NextPage(ctx context.Context) bool {
	var req *policy.Request
	var err error
	if !reflect.ValueOf(p.current).IsZero() {
		if p.current.VMResourcesListResponse.NextLink == nil || len(*p.current.VMResourcesListResponse.NextLink) == 0 {
			return false
		}
		req, err = p.advancer(ctx, p.current)
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		p.err = err
		return false
	}
	resp, err := p.client.pl.Do(req)
	if err != nil {
		p.err = err
		return false
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {
		p.err = p.client.listVMHostUpdateHandleError(resp)
		return false
	}
	result, err := p.client.listVMHostUpdateHandleResponse(resp)
	if err != nil {
		p.err = err
		return false
	}
	p.current = result
	return true
}

// PageResponse returns the current MonitorListVMHostUpdateResponse page.
func (p *MonitorListVMHostUpdatePager) PageResponse() MonitorListVMHostUpdateResponse {
	return p.current
}

// MonitorListVMHostsPager provides operations for iterating over paged responses.
type MonitorListVMHostsPager struct {
	client    *MonitorClient
	current   MonitorListVMHostsResponse
	err       error
	requester func(context.Context) (*policy.Request, error)
	advancer  func(context.Context, MonitorListVMHostsResponse) (*policy.Request, error)
}

// Err returns the last error encountered while paging.
func (p *MonitorListVMHostsPager) Err() error {
	return p.err
}

// NextPage returns true if the pager advanced to the next page.
// Returns false if there are no more pages or an error occurred.
func (p *MonitorListVMHostsPager) NextPage(ctx context.Context) bool {
	var req *policy.Request
	var err error
	if !reflect.ValueOf(p.current).IsZero() {
		if p.current.VMResourcesListResponse.NextLink == nil || len(*p.current.VMResourcesListResponse.NextLink) == 0 {
			return false
		}
		req, err = p.advancer(ctx, p.current)
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		p.err = err
		return false
	}
	resp, err := p.client.pl.Do(req)
	if err != nil {
		p.err = err
		return false
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {
		p.err = p.client.listVMHostsHandleError(resp)
		return false
	}
	result, err := p.client.listVMHostsHandleResponse(resp)
	if err != nil {
		p.err = err
		return false
	}
	p.current = result
	return true
}

// PageResponse returns the current MonitorListVMHostsResponse page.
func (p *MonitorListVMHostsPager) PageResponse() MonitorListVMHostsResponse {
	return p.current
}

// MonitorsListByResourceGroupPager provides operations for iterating over paged responses.
type MonitorsListByResourceGroupPager struct {
	client    *MonitorsClient
	current   MonitorsListByResourceGroupResponse
	err       error
	requester func(context.Context) (*policy.Request, error)
	advancer  func(context.Context, MonitorsListByResourceGroupResponse) (*policy.Request, error)
}

// Err returns the last error encountered while paging.
func (p *MonitorsListByResourceGroupPager) Err() error {
	return p.err
}

// NextPage returns true if the pager advanced to the next page.
// Returns false if there are no more pages or an error occurred.
func (p *MonitorsListByResourceGroupPager) NextPage(ctx context.Context) bool {
	var req *policy.Request
	var err error
	if !reflect.ValueOf(p.current).IsZero() {
		if p.current.LogzMonitorResourceListResponse.NextLink == nil || len(*p.current.LogzMonitorResourceListResponse.NextLink) == 0 {
			return false
		}
		req, err = p.advancer(ctx, p.current)
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		p.err = err
		return false
	}
	resp, err := p.client.pl.Do(req)
	if err != nil {
		p.err = err
		return false
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {
		p.err = p.client.listByResourceGroupHandleError(resp)
		return false
	}
	result, err := p.client.listByResourceGroupHandleResponse(resp)
	if err != nil {
		p.err = err
		return false
	}
	p.current = result
	return true
}

// PageResponse returns the current MonitorsListByResourceGroupResponse page.
func (p *MonitorsListByResourceGroupPager) PageResponse() MonitorsListByResourceGroupResponse {
	return p.current
}

// MonitorsListBySubscriptionPager provides operations for iterating over paged responses.
type MonitorsListBySubscriptionPager struct {
	client    *MonitorsClient
	current   MonitorsListBySubscriptionResponse
	err       error
	requester func(context.Context) (*policy.Request, error)
	advancer  func(context.Context, MonitorsListBySubscriptionResponse) (*policy.Request, error)
}

// Err returns the last error encountered while paging.
func (p *MonitorsListBySubscriptionPager) Err() error {
	return p.err
}

// NextPage returns true if the pager advanced to the next page.
// Returns false if there are no more pages or an error occurred.
func (p *MonitorsListBySubscriptionPager) NextPage(ctx context.Context) bool {
	var req *policy.Request
	var err error
	if !reflect.ValueOf(p.current).IsZero() {
		if p.current.LogzMonitorResourceListResponse.NextLink == nil || len(*p.current.LogzMonitorResourceListResponse.NextLink) == 0 {
			return false
		}
		req, err = p.advancer(ctx, p.current)
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		p.err = err
		return false
	}
	resp, err := p.client.pl.Do(req)
	if err != nil {
		p.err = err
		return false
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {
		p.err = p.client.listBySubscriptionHandleError(resp)
		return false
	}
	result, err := p.client.listBySubscriptionHandleResponse(resp)
	if err != nil {
		p.err = err
		return false
	}
	p.current = result
	return true
}

// PageResponse returns the current MonitorsListBySubscriptionResponse page.
func (p *MonitorsListBySubscriptionPager) PageResponse() MonitorsListBySubscriptionResponse {
	return p.current
}

// MonitorsListMonitoredResourcesPager provides operations for iterating over paged responses.
type MonitorsListMonitoredResourcesPager struct {
	client    *MonitorsClient
	current   MonitorsListMonitoredResourcesResponse
	err       error
	requester func(context.Context) (*policy.Request, error)
	advancer  func(context.Context, MonitorsListMonitoredResourcesResponse) (*policy.Request, error)
}

// Err returns the last error encountered while paging.
func (p *MonitorsListMonitoredResourcesPager) Err() error {
	return p.err
}

// NextPage returns true if the pager advanced to the next page.
// Returns false if there are no more pages or an error occurred.
func (p *MonitorsListMonitoredResourcesPager) NextPage(ctx context.Context) bool {
	var req *policy.Request
	var err error
	if !reflect.ValueOf(p.current).IsZero() {
		if p.current.MonitoredResourceListResponse.NextLink == nil || len(*p.current.MonitoredResourceListResponse.NextLink) == 0 {
			return false
		}
		req, err = p.advancer(ctx, p.current)
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		p.err = err
		return false
	}
	resp, err := p.client.pl.Do(req)
	if err != nil {
		p.err = err
		return false
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {
		p.err = p.client.listMonitoredResourcesHandleError(resp)
		return false
	}
	result, err := p.client.listMonitoredResourcesHandleResponse(resp)
	if err != nil {
		p.err = err
		return false
	}
	p.current = result
	return true
}

// PageResponse returns the current MonitorsListMonitoredResourcesResponse page.
func (p *MonitorsListMonitoredResourcesPager) PageResponse() MonitorsListMonitoredResourcesResponse {
	return p.current
}

// MonitorsListUserRolesPager provides operations for iterating over paged responses.
type MonitorsListUserRolesPager struct {
	client    *MonitorsClient
	current   MonitorsListUserRolesResponse
	err       error
	requester func(context.Context) (*policy.Request, error)
	advancer  func(context.Context, MonitorsListUserRolesResponse) (*policy.Request, error)
}

// Err returns the last error encountered while paging.
func (p *MonitorsListUserRolesPager) Err() error {
	return p.err
}

// NextPage returns true if the pager advanced to the next page.
// Returns false if there are no more pages or an error occurred.
func (p *MonitorsListUserRolesPager) NextPage(ctx context.Context) bool {
	var req *policy.Request
	var err error
	if !reflect.ValueOf(p.current).IsZero() {
		if p.current.UserRoleListResponse.NextLink == nil || len(*p.current.UserRoleListResponse.NextLink) == 0 {
			return false
		}
		req, err = p.advancer(ctx, p.current)
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		p.err = err
		return false
	}
	resp, err := p.client.pl.Do(req)
	if err != nil {
		p.err = err
		return false
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {
		p.err = p.client.listUserRolesHandleError(resp)
		return false
	}
	result, err := p.client.listUserRolesHandleResponse(resp)
	if err != nil {
		p.err = err
		return false
	}
	p.current = result
	return true
}

// PageResponse returns the current MonitorsListUserRolesResponse page.
func (p *MonitorsListUserRolesPager) PageResponse() MonitorsListUserRolesResponse {
	return p.current
}

// OperationsListPager provides operations for iterating over paged responses.
type OperationsListPager struct {
	client    *OperationsClient
	current   OperationsListResponse
	err       error
	requester func(context.Context) (*policy.Request, error)
	advancer  func(context.Context, OperationsListResponse) (*policy.Request, error)
}

// Err returns the last error encountered while paging.
func (p *OperationsListPager) Err() error {
	return p.err
}

// NextPage returns true if the pager advanced to the next page.
// Returns false if there are no more pages or an error occurred.
func (p *OperationsListPager) NextPage(ctx context.Context) bool {
	var req *policy.Request
	var err error
	if !reflect.ValueOf(p.current).IsZero() {
		if p.current.OperationListResult.NextLink == nil || len(*p.current.OperationListResult.NextLink) == 0 {
			return false
		}
		req, err = p.advancer(ctx, p.current)
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		p.err = err
		return false
	}
	resp, err := p.client.pl.Do(req)
	if err != nil {
		p.err = err
		return false
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {
		p.err = p.client.listHandleError(resp)
		return false
	}
	result, err := p.client.listHandleResponse(resp)
	if err != nil {
		p.err = err
		return false
	}
	p.current = result
	return true
}

// PageResponse returns the current OperationsListResponse page.
func (p *OperationsListPager) PageResponse() OperationsListResponse {
	return p.current
}

// SingleSignOnListPager provides operations for iterating over paged responses.
type SingleSignOnListPager struct {
	client    *SingleSignOnClient
	current   SingleSignOnListResponse
	err       error
	requester func(context.Context) (*policy.Request, error)
	advancer  func(context.Context, SingleSignOnListResponse) (*policy.Request, error)
}

// Err returns the last error encountered while paging.
func (p *SingleSignOnListPager) Err() error {
	return p.err
}

// NextPage returns true if the pager advanced to the next page.
// Returns false if there are no more pages or an error occurred.
func (p *SingleSignOnListPager) NextPage(ctx context.Context) bool {
	var req *policy.Request
	var err error
	if !reflect.ValueOf(p.current).IsZero() {
		if p.current.LogzSingleSignOnResourceListResponse.NextLink == nil || len(*p.current.LogzSingleSignOnResourceListResponse.NextLink) == 0 {
			return false
		}
		req, err = p.advancer(ctx, p.current)
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		p.err = err
		return false
	}
	resp, err := p.client.pl.Do(req)
	if err != nil {
		p.err = err
		return false
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {
		p.err = p.client.listHandleError(resp)
		return false
	}
	result, err := p.client.listHandleResponse(resp)
	if err != nil {
		p.err = err
		return false
	}
	p.current = result
	return true
}

// PageResponse returns the current SingleSignOnListResponse page.
func (p *SingleSignOnListPager) PageResponse() SingleSignOnListResponse {
	return p.current
}

// SubAccountListMonitoredResourcesPager provides operations for iterating over paged responses.
type SubAccountListMonitoredResourcesPager struct {
	client    *SubAccountClient
	current   SubAccountListMonitoredResourcesResponse
	err       error
	requester func(context.Context) (*policy.Request, error)
	advancer  func(context.Context, SubAccountListMonitoredResourcesResponse) (*policy.Request, error)
}

// Err returns the last error encountered while paging.
func (p *SubAccountListMonitoredResourcesPager) Err() error {
	return p.err
}

// NextPage returns true if the pager advanced to the next page.
// Returns false if there are no more pages or an error occurred.
func (p *SubAccountListMonitoredResourcesPager) NextPage(ctx context.Context) bool {
	var req *policy.Request
	var err error
	if !reflect.ValueOf(p.current).IsZero() {
		if p.current.MonitoredResourceListResponse.NextLink == nil || len(*p.current.MonitoredResourceListResponse.NextLink) == 0 {
			return false
		}
		req, err = p.advancer(ctx, p.current)
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		p.err = err
		return false
	}
	resp, err := p.client.pl.Do(req)
	if err != nil {
		p.err = err
		return false
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {
		p.err = p.client.listMonitoredResourcesHandleError(resp)
		return false
	}
	result, err := p.client.listMonitoredResourcesHandleResponse(resp)
	if err != nil {
		p.err = err
		return false
	}
	p.current = result
	return true
}

// PageResponse returns the current SubAccountListMonitoredResourcesResponse page.
func (p *SubAccountListMonitoredResourcesPager) PageResponse() SubAccountListMonitoredResourcesResponse {
	return p.current
}

// SubAccountListPager provides operations for iterating over paged responses.
type SubAccountListPager struct {
	client    *SubAccountClient
	current   SubAccountListResponse
	err       error
	requester func(context.Context) (*policy.Request, error)
	advancer  func(context.Context, SubAccountListResponse) (*policy.Request, error)
}

// Err returns the last error encountered while paging.
func (p *SubAccountListPager) Err() error {
	return p.err
}

// NextPage returns true if the pager advanced to the next page.
// Returns false if there are no more pages or an error occurred.
func (p *SubAccountListPager) NextPage(ctx context.Context) bool {
	var req *policy.Request
	var err error
	if !reflect.ValueOf(p.current).IsZero() {
		if p.current.LogzMonitorResourceListResponse.NextLink == nil || len(*p.current.LogzMonitorResourceListResponse.NextLink) == 0 {
			return false
		}
		req, err = p.advancer(ctx, p.current)
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		p.err = err
		return false
	}
	resp, err := p.client.pl.Do(req)
	if err != nil {
		p.err = err
		return false
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {
		p.err = p.client.listHandleError(resp)
		return false
	}
	result, err := p.client.listHandleResponse(resp)
	if err != nil {
		p.err = err
		return false
	}
	p.current = result
	return true
}

// PageResponse returns the current SubAccountListResponse page.
func (p *SubAccountListPager) PageResponse() SubAccountListResponse {
	return p.current
}

// SubAccountListVMHostUpdatePager provides operations for iterating over paged responses.
type SubAccountListVMHostUpdatePager struct {
	client    *SubAccountClient
	current   SubAccountListVMHostUpdateResponse
	err       error
	requester func(context.Context) (*policy.Request, error)
	advancer  func(context.Context, SubAccountListVMHostUpdateResponse) (*policy.Request, error)
}

// Err returns the last error encountered while paging.
func (p *SubAccountListVMHostUpdatePager) Err() error {
	return p.err
}

// NextPage returns true if the pager advanced to the next page.
// Returns false if there are no more pages or an error occurred.
func (p *SubAccountListVMHostUpdatePager) NextPage(ctx context.Context) bool {
	var req *policy.Request
	var err error
	if !reflect.ValueOf(p.current).IsZero() {
		if p.current.VMResourcesListResponse.NextLink == nil || len(*p.current.VMResourcesListResponse.NextLink) == 0 {
			return false
		}
		req, err = p.advancer(ctx, p.current)
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		p.err = err
		return false
	}
	resp, err := p.client.pl.Do(req)
	if err != nil {
		p.err = err
		return false
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {
		p.err = p.client.listVMHostUpdateHandleError(resp)
		return false
	}
	result, err := p.client.listVMHostUpdateHandleResponse(resp)
	if err != nil {
		p.err = err
		return false
	}
	p.current = result
	return true
}

// PageResponse returns the current SubAccountListVMHostUpdateResponse page.
func (p *SubAccountListVMHostUpdatePager) PageResponse() SubAccountListVMHostUpdateResponse {
	return p.current
}

// SubAccountListVMHostsPager provides operations for iterating over paged responses.
type SubAccountListVMHostsPager struct {
	client    *SubAccountClient
	current   SubAccountListVMHostsResponse
	err       error
	requester func(context.Context) (*policy.Request, error)
	advancer  func(context.Context, SubAccountListVMHostsResponse) (*policy.Request, error)
}

// Err returns the last error encountered while paging.
func (p *SubAccountListVMHostsPager) Err() error {
	return p.err
}

// NextPage returns true if the pager advanced to the next page.
// Returns false if there are no more pages or an error occurred.
func (p *SubAccountListVMHostsPager) NextPage(ctx context.Context) bool {
	var req *policy.Request
	var err error
	if !reflect.ValueOf(p.current).IsZero() {
		if p.current.VMResourcesListResponse.NextLink == nil || len(*p.current.VMResourcesListResponse.NextLink) == 0 {
			return false
		}
		req, err = p.advancer(ctx, p.current)
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		p.err = err
		return false
	}
	resp, err := p.client.pl.Do(req)
	if err != nil {
		p.err = err
		return false
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {
		p.err = p.client.listVMHostsHandleError(resp)
		return false
	}
	result, err := p.client.listVMHostsHandleResponse(resp)
	if err != nil {
		p.err = err
		return false
	}
	p.current = result
	return true
}

// PageResponse returns the current SubAccountListVMHostsResponse page.
func (p *SubAccountListVMHostsPager) PageResponse() SubAccountListVMHostsResponse {
	return p.current
}

// SubAccountTagRulesListPager provides operations for iterating over paged responses.
type SubAccountTagRulesListPager struct {
	client    *SubAccountTagRulesClient
	current   SubAccountTagRulesListResponse
	err       error
	requester func(context.Context) (*policy.Request, error)
	advancer  func(context.Context, SubAccountTagRulesListResponse) (*policy.Request, error)
}

// Err returns the last error encountered while paging.
func (p *SubAccountTagRulesListPager) Err() error {
	return p.err
}

// NextPage returns true if the pager advanced to the next page.
// Returns false if there are no more pages or an error occurred.
func (p *SubAccountTagRulesListPager) NextPage(ctx context.Context) bool {
	var req *policy.Request
	var err error
	if !reflect.ValueOf(p.current).IsZero() {
		if p.current.MonitoringTagRulesListResponse.NextLink == nil || len(*p.current.MonitoringTagRulesListResponse.NextLink) == 0 {
			return false
		}
		req, err = p.advancer(ctx, p.current)
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		p.err = err
		return false
	}
	resp, err := p.client.pl.Do(req)
	if err != nil {
		p.err = err
		return false
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {
		p.err = p.client.listHandleError(resp)
		return false
	}
	result, err := p.client.listHandleResponse(resp)
	if err != nil {
		p.err = err
		return false
	}
	p.current = result
	return true
}

// PageResponse returns the current SubAccountTagRulesListResponse page.
func (p *SubAccountTagRulesListPager) PageResponse() SubAccountTagRulesListResponse {
	return p.current
}

// TagRulesListPager provides operations for iterating over paged responses.
type TagRulesListPager struct {
	client    *TagRulesClient
	current   TagRulesListResponse
	err       error
	requester func(context.Context) (*policy.Request, error)
	advancer  func(context.Context, TagRulesListResponse) (*policy.Request, error)
}

// Err returns the last error encountered while paging.
func (p *TagRulesListPager) Err() error {
	return p.err
}

// NextPage returns true if the pager advanced to the next page.
// Returns false if there are no more pages or an error occurred.
func (p *TagRulesListPager) NextPage(ctx context.Context) bool {
	var req *policy.Request
	var err error
	if !reflect.ValueOf(p.current).IsZero() {
		if p.current.MonitoringTagRulesListResponse.NextLink == nil || len(*p.current.MonitoringTagRulesListResponse.NextLink) == 0 {
			return false
		}
		req, err = p.advancer(ctx, p.current)
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		p.err = err
		return false
	}
	resp, err := p.client.pl.Do(req)
	if err != nil {
		p.err = err
		return false
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {
		p.err = p.client.listHandleError(resp)
		return false
	}
	result, err := p.client.listHandleResponse(resp)
	if err != nil {
		p.err = err
		return false
	}
	p.current = result
	return true
}

// PageResponse returns the current TagRulesListResponse page.
func (p *TagRulesListPager) PageResponse() TagRulesListResponse {
	return p.current
}
