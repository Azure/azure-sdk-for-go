//go:build go1.16
// +build go1.16

// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

package armlogz

import (
	"context"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/policy"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/runtime"
	"net/http"
	"reflect"
)

// MonitorClientListVMHostUpdatePager provides operations for iterating over paged responses.
type MonitorClientListVMHostUpdatePager struct {
	client    *MonitorClient
	current   MonitorClientListVMHostUpdateResponse
	err       error
	requester func(context.Context) (*policy.Request, error)
	advancer  func(context.Context, MonitorClientListVMHostUpdateResponse) (*policy.Request, error)
}

// Err returns the last error encountered while paging.
func (p *MonitorClientListVMHostUpdatePager) Err() error {
	return p.err
}

// NextPage returns true if the pager advanced to the next page.
// Returns false if there are no more pages or an error occurred.
func (p *MonitorClientListVMHostUpdatePager) NextPage(ctx context.Context) bool {
	var req *policy.Request
	var err error
	if !reflect.ValueOf(p.current).IsZero() {
		if p.current.VMResourcesListResponse.NextLink == nil || len(*p.current.VMResourcesListResponse.NextLink) == 0 {
			return false
		}
		req, err = p.advancer(ctx, p.current)
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		p.err = err
		return false
	}
	resp, err := p.client.pl.Do(req)
	if err != nil {
		p.err = err
		return false
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {
		p.err = runtime.NewResponseError(resp)
		return false
	}
	result, err := p.client.listVMHostUpdateHandleResponse(resp)
	if err != nil {
		p.err = err
		return false
	}
	p.current = result
	return true
}

// PageResponse returns the current MonitorClientListVMHostUpdateResponse page.
func (p *MonitorClientListVMHostUpdatePager) PageResponse() MonitorClientListVMHostUpdateResponse {
	return p.current
}

// MonitorClientListVMHostsPager provides operations for iterating over paged responses.
type MonitorClientListVMHostsPager struct {
	client    *MonitorClient
	current   MonitorClientListVMHostsResponse
	err       error
	requester func(context.Context) (*policy.Request, error)
	advancer  func(context.Context, MonitorClientListVMHostsResponse) (*policy.Request, error)
}

// Err returns the last error encountered while paging.
func (p *MonitorClientListVMHostsPager) Err() error {
	return p.err
}

// NextPage returns true if the pager advanced to the next page.
// Returns false if there are no more pages or an error occurred.
func (p *MonitorClientListVMHostsPager) NextPage(ctx context.Context) bool {
	var req *policy.Request
	var err error
	if !reflect.ValueOf(p.current).IsZero() {
		if p.current.VMResourcesListResponse.NextLink == nil || len(*p.current.VMResourcesListResponse.NextLink) == 0 {
			return false
		}
		req, err = p.advancer(ctx, p.current)
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		p.err = err
		return false
	}
	resp, err := p.client.pl.Do(req)
	if err != nil {
		p.err = err
		return false
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {
		p.err = runtime.NewResponseError(resp)
		return false
	}
	result, err := p.client.listVMHostsHandleResponse(resp)
	if err != nil {
		p.err = err
		return false
	}
	p.current = result
	return true
}

// PageResponse returns the current MonitorClientListVMHostsResponse page.
func (p *MonitorClientListVMHostsPager) PageResponse() MonitorClientListVMHostsResponse {
	return p.current
}

// MonitorsClientListByResourceGroupPager provides operations for iterating over paged responses.
type MonitorsClientListByResourceGroupPager struct {
	client    *MonitorsClient
	current   MonitorsClientListByResourceGroupResponse
	err       error
	requester func(context.Context) (*policy.Request, error)
	advancer  func(context.Context, MonitorsClientListByResourceGroupResponse) (*policy.Request, error)
}

// Err returns the last error encountered while paging.
func (p *MonitorsClientListByResourceGroupPager) Err() error {
	return p.err
}

// NextPage returns true if the pager advanced to the next page.
// Returns false if there are no more pages or an error occurred.
func (p *MonitorsClientListByResourceGroupPager) NextPage(ctx context.Context) bool {
	var req *policy.Request
	var err error
	if !reflect.ValueOf(p.current).IsZero() {
		if p.current.MonitorResourceListResponse.NextLink == nil || len(*p.current.MonitorResourceListResponse.NextLink) == 0 {
			return false
		}
		req, err = p.advancer(ctx, p.current)
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		p.err = err
		return false
	}
	resp, err := p.client.pl.Do(req)
	if err != nil {
		p.err = err
		return false
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {
		p.err = runtime.NewResponseError(resp)
		return false
	}
	result, err := p.client.listByResourceGroupHandleResponse(resp)
	if err != nil {
		p.err = err
		return false
	}
	p.current = result
	return true
}

// PageResponse returns the current MonitorsClientListByResourceGroupResponse page.
func (p *MonitorsClientListByResourceGroupPager) PageResponse() MonitorsClientListByResourceGroupResponse {
	return p.current
}

// MonitorsClientListBySubscriptionPager provides operations for iterating over paged responses.
type MonitorsClientListBySubscriptionPager struct {
	client    *MonitorsClient
	current   MonitorsClientListBySubscriptionResponse
	err       error
	requester func(context.Context) (*policy.Request, error)
	advancer  func(context.Context, MonitorsClientListBySubscriptionResponse) (*policy.Request, error)
}

// Err returns the last error encountered while paging.
func (p *MonitorsClientListBySubscriptionPager) Err() error {
	return p.err
}

// NextPage returns true if the pager advanced to the next page.
// Returns false if there are no more pages or an error occurred.
func (p *MonitorsClientListBySubscriptionPager) NextPage(ctx context.Context) bool {
	var req *policy.Request
	var err error
	if !reflect.ValueOf(p.current).IsZero() {
		if p.current.MonitorResourceListResponse.NextLink == nil || len(*p.current.MonitorResourceListResponse.NextLink) == 0 {
			return false
		}
		req, err = p.advancer(ctx, p.current)
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		p.err = err
		return false
	}
	resp, err := p.client.pl.Do(req)
	if err != nil {
		p.err = err
		return false
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {
		p.err = runtime.NewResponseError(resp)
		return false
	}
	result, err := p.client.listBySubscriptionHandleResponse(resp)
	if err != nil {
		p.err = err
		return false
	}
	p.current = result
	return true
}

// PageResponse returns the current MonitorsClientListBySubscriptionResponse page.
func (p *MonitorsClientListBySubscriptionPager) PageResponse() MonitorsClientListBySubscriptionResponse {
	return p.current
}

// MonitorsClientListMonitoredResourcesPager provides operations for iterating over paged responses.
type MonitorsClientListMonitoredResourcesPager struct {
	client    *MonitorsClient
	current   MonitorsClientListMonitoredResourcesResponse
	err       error
	requester func(context.Context) (*policy.Request, error)
	advancer  func(context.Context, MonitorsClientListMonitoredResourcesResponse) (*policy.Request, error)
}

// Err returns the last error encountered while paging.
func (p *MonitorsClientListMonitoredResourcesPager) Err() error {
	return p.err
}

// NextPage returns true if the pager advanced to the next page.
// Returns false if there are no more pages or an error occurred.
func (p *MonitorsClientListMonitoredResourcesPager) NextPage(ctx context.Context) bool {
	var req *policy.Request
	var err error
	if !reflect.ValueOf(p.current).IsZero() {
		if p.current.MonitoredResourceListResponse.NextLink == nil || len(*p.current.MonitoredResourceListResponse.NextLink) == 0 {
			return false
		}
		req, err = p.advancer(ctx, p.current)
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		p.err = err
		return false
	}
	resp, err := p.client.pl.Do(req)
	if err != nil {
		p.err = err
		return false
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {
		p.err = runtime.NewResponseError(resp)
		return false
	}
	result, err := p.client.listMonitoredResourcesHandleResponse(resp)
	if err != nil {
		p.err = err
		return false
	}
	p.current = result
	return true
}

// PageResponse returns the current MonitorsClientListMonitoredResourcesResponse page.
func (p *MonitorsClientListMonitoredResourcesPager) PageResponse() MonitorsClientListMonitoredResourcesResponse {
	return p.current
}

// MonitorsClientListUserRolesPager provides operations for iterating over paged responses.
type MonitorsClientListUserRolesPager struct {
	client    *MonitorsClient
	current   MonitorsClientListUserRolesResponse
	err       error
	requester func(context.Context) (*policy.Request, error)
	advancer  func(context.Context, MonitorsClientListUserRolesResponse) (*policy.Request, error)
}

// Err returns the last error encountered while paging.
func (p *MonitorsClientListUserRolesPager) Err() error {
	return p.err
}

// NextPage returns true if the pager advanced to the next page.
// Returns false if there are no more pages or an error occurred.
func (p *MonitorsClientListUserRolesPager) NextPage(ctx context.Context) bool {
	var req *policy.Request
	var err error
	if !reflect.ValueOf(p.current).IsZero() {
		if p.current.UserRoleListResponse.NextLink == nil || len(*p.current.UserRoleListResponse.NextLink) == 0 {
			return false
		}
		req, err = p.advancer(ctx, p.current)
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		p.err = err
		return false
	}
	resp, err := p.client.pl.Do(req)
	if err != nil {
		p.err = err
		return false
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {
		p.err = runtime.NewResponseError(resp)
		return false
	}
	result, err := p.client.listUserRolesHandleResponse(resp)
	if err != nil {
		p.err = err
		return false
	}
	p.current = result
	return true
}

// PageResponse returns the current MonitorsClientListUserRolesResponse page.
func (p *MonitorsClientListUserRolesPager) PageResponse() MonitorsClientListUserRolesResponse {
	return p.current
}

// OperationsClientListPager provides operations for iterating over paged responses.
type OperationsClientListPager struct {
	client    *OperationsClient
	current   OperationsClientListResponse
	err       error
	requester func(context.Context) (*policy.Request, error)
	advancer  func(context.Context, OperationsClientListResponse) (*policy.Request, error)
}

// Err returns the last error encountered while paging.
func (p *OperationsClientListPager) Err() error {
	return p.err
}

// NextPage returns true if the pager advanced to the next page.
// Returns false if there are no more pages or an error occurred.
func (p *OperationsClientListPager) NextPage(ctx context.Context) bool {
	var req *policy.Request
	var err error
	if !reflect.ValueOf(p.current).IsZero() {
		if p.current.OperationListResult.NextLink == nil || len(*p.current.OperationListResult.NextLink) == 0 {
			return false
		}
		req, err = p.advancer(ctx, p.current)
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		p.err = err
		return false
	}
	resp, err := p.client.pl.Do(req)
	if err != nil {
		p.err = err
		return false
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {
		p.err = runtime.NewResponseError(resp)
		return false
	}
	result, err := p.client.listHandleResponse(resp)
	if err != nil {
		p.err = err
		return false
	}
	p.current = result
	return true
}

// PageResponse returns the current OperationsClientListResponse page.
func (p *OperationsClientListPager) PageResponse() OperationsClientListResponse {
	return p.current
}

// SingleSignOnClientListPager provides operations for iterating over paged responses.
type SingleSignOnClientListPager struct {
	client    *SingleSignOnClient
	current   SingleSignOnClientListResponse
	err       error
	requester func(context.Context) (*policy.Request, error)
	advancer  func(context.Context, SingleSignOnClientListResponse) (*policy.Request, error)
}

// Err returns the last error encountered while paging.
func (p *SingleSignOnClientListPager) Err() error {
	return p.err
}

// NextPage returns true if the pager advanced to the next page.
// Returns false if there are no more pages or an error occurred.
func (p *SingleSignOnClientListPager) NextPage(ctx context.Context) bool {
	var req *policy.Request
	var err error
	if !reflect.ValueOf(p.current).IsZero() {
		if p.current.SingleSignOnResourceListResponse.NextLink == nil || len(*p.current.SingleSignOnResourceListResponse.NextLink) == 0 {
			return false
		}
		req, err = p.advancer(ctx, p.current)
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		p.err = err
		return false
	}
	resp, err := p.client.pl.Do(req)
	if err != nil {
		p.err = err
		return false
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {
		p.err = runtime.NewResponseError(resp)
		return false
	}
	result, err := p.client.listHandleResponse(resp)
	if err != nil {
		p.err = err
		return false
	}
	p.current = result
	return true
}

// PageResponse returns the current SingleSignOnClientListResponse page.
func (p *SingleSignOnClientListPager) PageResponse() SingleSignOnClientListResponse {
	return p.current
}

// SubAccountClientListMonitoredResourcesPager provides operations for iterating over paged responses.
type SubAccountClientListMonitoredResourcesPager struct {
	client    *SubAccountClient
	current   SubAccountClientListMonitoredResourcesResponse
	err       error
	requester func(context.Context) (*policy.Request, error)
	advancer  func(context.Context, SubAccountClientListMonitoredResourcesResponse) (*policy.Request, error)
}

// Err returns the last error encountered while paging.
func (p *SubAccountClientListMonitoredResourcesPager) Err() error {
	return p.err
}

// NextPage returns true if the pager advanced to the next page.
// Returns false if there are no more pages or an error occurred.
func (p *SubAccountClientListMonitoredResourcesPager) NextPage(ctx context.Context) bool {
	var req *policy.Request
	var err error
	if !reflect.ValueOf(p.current).IsZero() {
		if p.current.MonitoredResourceListResponse.NextLink == nil || len(*p.current.MonitoredResourceListResponse.NextLink) == 0 {
			return false
		}
		req, err = p.advancer(ctx, p.current)
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		p.err = err
		return false
	}
	resp, err := p.client.pl.Do(req)
	if err != nil {
		p.err = err
		return false
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {
		p.err = runtime.NewResponseError(resp)
		return false
	}
	result, err := p.client.listMonitoredResourcesHandleResponse(resp)
	if err != nil {
		p.err = err
		return false
	}
	p.current = result
	return true
}

// PageResponse returns the current SubAccountClientListMonitoredResourcesResponse page.
func (p *SubAccountClientListMonitoredResourcesPager) PageResponse() SubAccountClientListMonitoredResourcesResponse {
	return p.current
}

// SubAccountClientListPager provides operations for iterating over paged responses.
type SubAccountClientListPager struct {
	client    *SubAccountClient
	current   SubAccountClientListResponse
	err       error
	requester func(context.Context) (*policy.Request, error)
	advancer  func(context.Context, SubAccountClientListResponse) (*policy.Request, error)
}

// Err returns the last error encountered while paging.
func (p *SubAccountClientListPager) Err() error {
	return p.err
}

// NextPage returns true if the pager advanced to the next page.
// Returns false if there are no more pages or an error occurred.
func (p *SubAccountClientListPager) NextPage(ctx context.Context) bool {
	var req *policy.Request
	var err error
	if !reflect.ValueOf(p.current).IsZero() {
		if p.current.MonitorResourceListResponse.NextLink == nil || len(*p.current.MonitorResourceListResponse.NextLink) == 0 {
			return false
		}
		req, err = p.advancer(ctx, p.current)
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		p.err = err
		return false
	}
	resp, err := p.client.pl.Do(req)
	if err != nil {
		p.err = err
		return false
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {
		p.err = runtime.NewResponseError(resp)
		return false
	}
	result, err := p.client.listHandleResponse(resp)
	if err != nil {
		p.err = err
		return false
	}
	p.current = result
	return true
}

// PageResponse returns the current SubAccountClientListResponse page.
func (p *SubAccountClientListPager) PageResponse() SubAccountClientListResponse {
	return p.current
}

// SubAccountClientListVMHostUpdatePager provides operations for iterating over paged responses.
type SubAccountClientListVMHostUpdatePager struct {
	client    *SubAccountClient
	current   SubAccountClientListVMHostUpdateResponse
	err       error
	requester func(context.Context) (*policy.Request, error)
	advancer  func(context.Context, SubAccountClientListVMHostUpdateResponse) (*policy.Request, error)
}

// Err returns the last error encountered while paging.
func (p *SubAccountClientListVMHostUpdatePager) Err() error {
	return p.err
}

// NextPage returns true if the pager advanced to the next page.
// Returns false if there are no more pages or an error occurred.
func (p *SubAccountClientListVMHostUpdatePager) NextPage(ctx context.Context) bool {
	var req *policy.Request
	var err error
	if !reflect.ValueOf(p.current).IsZero() {
		if p.current.VMResourcesListResponse.NextLink == nil || len(*p.current.VMResourcesListResponse.NextLink) == 0 {
			return false
		}
		req, err = p.advancer(ctx, p.current)
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		p.err = err
		return false
	}
	resp, err := p.client.pl.Do(req)
	if err != nil {
		p.err = err
		return false
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {
		p.err = runtime.NewResponseError(resp)
		return false
	}
	result, err := p.client.listVMHostUpdateHandleResponse(resp)
	if err != nil {
		p.err = err
		return false
	}
	p.current = result
	return true
}

// PageResponse returns the current SubAccountClientListVMHostUpdateResponse page.
func (p *SubAccountClientListVMHostUpdatePager) PageResponse() SubAccountClientListVMHostUpdateResponse {
	return p.current
}

// SubAccountClientListVMHostsPager provides operations for iterating over paged responses.
type SubAccountClientListVMHostsPager struct {
	client    *SubAccountClient
	current   SubAccountClientListVMHostsResponse
	err       error
	requester func(context.Context) (*policy.Request, error)
	advancer  func(context.Context, SubAccountClientListVMHostsResponse) (*policy.Request, error)
}

// Err returns the last error encountered while paging.
func (p *SubAccountClientListVMHostsPager) Err() error {
	return p.err
}

// NextPage returns true if the pager advanced to the next page.
// Returns false if there are no more pages or an error occurred.
func (p *SubAccountClientListVMHostsPager) NextPage(ctx context.Context) bool {
	var req *policy.Request
	var err error
	if !reflect.ValueOf(p.current).IsZero() {
		if p.current.VMResourcesListResponse.NextLink == nil || len(*p.current.VMResourcesListResponse.NextLink) == 0 {
			return false
		}
		req, err = p.advancer(ctx, p.current)
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		p.err = err
		return false
	}
	resp, err := p.client.pl.Do(req)
	if err != nil {
		p.err = err
		return false
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {
		p.err = runtime.NewResponseError(resp)
		return false
	}
	result, err := p.client.listVMHostsHandleResponse(resp)
	if err != nil {
		p.err = err
		return false
	}
	p.current = result
	return true
}

// PageResponse returns the current SubAccountClientListVMHostsResponse page.
func (p *SubAccountClientListVMHostsPager) PageResponse() SubAccountClientListVMHostsResponse {
	return p.current
}

// SubAccountTagRulesClientListPager provides operations for iterating over paged responses.
type SubAccountTagRulesClientListPager struct {
	client    *SubAccountTagRulesClient
	current   SubAccountTagRulesClientListResponse
	err       error
	requester func(context.Context) (*policy.Request, error)
	advancer  func(context.Context, SubAccountTagRulesClientListResponse) (*policy.Request, error)
}

// Err returns the last error encountered while paging.
func (p *SubAccountTagRulesClientListPager) Err() error {
	return p.err
}

// NextPage returns true if the pager advanced to the next page.
// Returns false if there are no more pages or an error occurred.
func (p *SubAccountTagRulesClientListPager) NextPage(ctx context.Context) bool {
	var req *policy.Request
	var err error
	if !reflect.ValueOf(p.current).IsZero() {
		if p.current.MonitoringTagRulesListResponse.NextLink == nil || len(*p.current.MonitoringTagRulesListResponse.NextLink) == 0 {
			return false
		}
		req, err = p.advancer(ctx, p.current)
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		p.err = err
		return false
	}
	resp, err := p.client.pl.Do(req)
	if err != nil {
		p.err = err
		return false
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {
		p.err = runtime.NewResponseError(resp)
		return false
	}
	result, err := p.client.listHandleResponse(resp)
	if err != nil {
		p.err = err
		return false
	}
	p.current = result
	return true
}

// PageResponse returns the current SubAccountTagRulesClientListResponse page.
func (p *SubAccountTagRulesClientListPager) PageResponse() SubAccountTagRulesClientListResponse {
	return p.current
}

// TagRulesClientListPager provides operations for iterating over paged responses.
type TagRulesClientListPager struct {
	client    *TagRulesClient
	current   TagRulesClientListResponse
	err       error
	requester func(context.Context) (*policy.Request, error)
	advancer  func(context.Context, TagRulesClientListResponse) (*policy.Request, error)
}

// Err returns the last error encountered while paging.
func (p *TagRulesClientListPager) Err() error {
	return p.err
}

// NextPage returns true if the pager advanced to the next page.
// Returns false if there are no more pages or an error occurred.
func (p *TagRulesClientListPager) NextPage(ctx context.Context) bool {
	var req *policy.Request
	var err error
	if !reflect.ValueOf(p.current).IsZero() {
		if p.current.MonitoringTagRulesListResponse.NextLink == nil || len(*p.current.MonitoringTagRulesListResponse.NextLink) == 0 {
			return false
		}
		req, err = p.advancer(ctx, p.current)
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		p.err = err
		return false
	}
	resp, err := p.client.pl.Do(req)
	if err != nil {
		p.err = err
		return false
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {
		p.err = runtime.NewResponseError(resp)
		return false
	}
	result, err := p.client.listHandleResponse(resp)
	if err != nil {
		p.err = err
		return false
	}
	p.current = result
	return true
}

// PageResponse returns the current TagRulesClientListResponse page.
func (p *TagRulesClientListPager) PageResponse() TagRulesClientListResponse {
	return p.current
}
