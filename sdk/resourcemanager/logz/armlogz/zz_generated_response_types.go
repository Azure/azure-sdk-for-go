//go:build go1.16
// +build go1.16

// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

package armlogz

import (
	"context"
	armruntime "github.com/Azure/azure-sdk-for-go/sdk/azcore/arm/runtime"
	"net/http"
	"time"
)

// MonitorListVMHostUpdateResponse contains the response from method Monitor.ListVMHostUpdate.
type MonitorListVMHostUpdateResponse struct {
	MonitorListVMHostUpdateResult
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// MonitorListVMHostUpdateResult contains the result from method Monitor.ListVMHostUpdate.
type MonitorListVMHostUpdateResult struct {
	VMResourcesListResponse
}

// MonitorListVMHostsResponse contains the response from method Monitor.ListVMHosts.
type MonitorListVMHostsResponse struct {
	MonitorListVMHostsResult
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// MonitorListVMHostsResult contains the result from method Monitor.ListVMHosts.
type MonitorListVMHostsResult struct {
	VMResourcesListResponse
}

// MonitorVMHostPayloadResponse contains the response from method Monitor.VMHostPayload.
type MonitorVMHostPayloadResponse struct {
	MonitorVMHostPayloadResult
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// MonitorVMHostPayloadResult contains the result from method Monitor.VMHostPayload.
type MonitorVMHostPayloadResult struct {
	VMExtensionPayload
}

// MonitorsCreatePollerResponse contains the response from method Monitors.Create.
type MonitorsCreatePollerResponse struct {
	// Poller contains an initialized poller.
	Poller *MonitorsCreatePoller

	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// PollUntilDone will poll the service endpoint until a terminal state is reached or an error is received.
// freq: the time to wait between intervals in absence of a Retry-After header. Allowed minimum is one second.
// A good starting value is 30 seconds. Note that some resources might benefit from a different value.
func (l MonitorsCreatePollerResponse) PollUntilDone(ctx context.Context, freq time.Duration) (MonitorsCreateResponse, error) {
	respType := MonitorsCreateResponse{}
	resp, err := l.Poller.pt.PollUntilDone(ctx, freq, &respType.LogzMonitorResource)
	if err != nil {
		return respType, err
	}
	respType.RawResponse = resp
	return respType, nil
}

// Resume rehydrates a MonitorsCreatePollerResponse from the provided client and resume token.
func (l *MonitorsCreatePollerResponse) Resume(ctx context.Context, client *MonitorsClient, token string) error {
	pt, err := armruntime.NewPollerFromResumeToken("MonitorsClient.Create", token, client.pl, client.createHandleError)
	if err != nil {
		return err
	}
	poller := &MonitorsCreatePoller{
		pt: pt,
	}
	resp, err := poller.Poll(ctx)
	if err != nil {
		return err
	}
	l.Poller = poller
	l.RawResponse = resp
	return nil
}

// MonitorsCreateResponse contains the response from method Monitors.Create.
type MonitorsCreateResponse struct {
	MonitorsCreateResult
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// MonitorsCreateResult contains the result from method Monitors.Create.
type MonitorsCreateResult struct {
	LogzMonitorResource
}

// MonitorsDeletePollerResponse contains the response from method Monitors.Delete.
type MonitorsDeletePollerResponse struct {
	// Poller contains an initialized poller.
	Poller *MonitorsDeletePoller

	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// PollUntilDone will poll the service endpoint until a terminal state is reached or an error is received.
// freq: the time to wait between intervals in absence of a Retry-After header. Allowed minimum is one second.
// A good starting value is 30 seconds. Note that some resources might benefit from a different value.
func (l MonitorsDeletePollerResponse) PollUntilDone(ctx context.Context, freq time.Duration) (MonitorsDeleteResponse, error) {
	respType := MonitorsDeleteResponse{}
	resp, err := l.Poller.pt.PollUntilDone(ctx, freq, nil)
	if err != nil {
		return respType, err
	}
	respType.RawResponse = resp
	return respType, nil
}

// Resume rehydrates a MonitorsDeletePollerResponse from the provided client and resume token.
func (l *MonitorsDeletePollerResponse) Resume(ctx context.Context, client *MonitorsClient, token string) error {
	pt, err := armruntime.NewPollerFromResumeToken("MonitorsClient.Delete", token, client.pl, client.deleteHandleError)
	if err != nil {
		return err
	}
	poller := &MonitorsDeletePoller{
		pt: pt,
	}
	resp, err := poller.Poll(ctx)
	if err != nil {
		return err
	}
	l.Poller = poller
	l.RawResponse = resp
	return nil
}

// MonitorsDeleteResponse contains the response from method Monitors.Delete.
type MonitorsDeleteResponse struct {
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// MonitorsGetResponse contains the response from method Monitors.Get.
type MonitorsGetResponse struct {
	MonitorsGetResult
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// MonitorsGetResult contains the result from method Monitors.Get.
type MonitorsGetResult struct {
	LogzMonitorResource
}

// MonitorsListByResourceGroupResponse contains the response from method Monitors.ListByResourceGroup.
type MonitorsListByResourceGroupResponse struct {
	MonitorsListByResourceGroupResult
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// MonitorsListByResourceGroupResult contains the result from method Monitors.ListByResourceGroup.
type MonitorsListByResourceGroupResult struct {
	LogzMonitorResourceListResponse
}

// MonitorsListBySubscriptionResponse contains the response from method Monitors.ListBySubscription.
type MonitorsListBySubscriptionResponse struct {
	MonitorsListBySubscriptionResult
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// MonitorsListBySubscriptionResult contains the result from method Monitors.ListBySubscription.
type MonitorsListBySubscriptionResult struct {
	LogzMonitorResourceListResponse
}

// MonitorsListMonitoredResourcesResponse contains the response from method Monitors.ListMonitoredResources.
type MonitorsListMonitoredResourcesResponse struct {
	MonitorsListMonitoredResourcesResult
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// MonitorsListMonitoredResourcesResult contains the result from method Monitors.ListMonitoredResources.
type MonitorsListMonitoredResourcesResult struct {
	MonitoredResourceListResponse
}

// MonitorsListUserRolesResponse contains the response from method Monitors.ListUserRoles.
type MonitorsListUserRolesResponse struct {
	MonitorsListUserRolesResult
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// MonitorsListUserRolesResult contains the result from method Monitors.ListUserRoles.
type MonitorsListUserRolesResult struct {
	UserRoleListResponse
}

// MonitorsUpdateResponse contains the response from method Monitors.Update.
type MonitorsUpdateResponse struct {
	MonitorsUpdateResult
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// MonitorsUpdateResult contains the result from method Monitors.Update.
type MonitorsUpdateResult struct {
	LogzMonitorResource
}

// OperationsListResponse contains the response from method Operations.List.
type OperationsListResponse struct {
	OperationsListResult
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// OperationsListResult contains the result from method Operations.List.
type OperationsListResult struct {
	OperationListResult
}

// SingleSignOnCreateOrUpdatePollerResponse contains the response from method SingleSignOn.CreateOrUpdate.
type SingleSignOnCreateOrUpdatePollerResponse struct {
	// Poller contains an initialized poller.
	Poller *SingleSignOnCreateOrUpdatePoller

	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// PollUntilDone will poll the service endpoint until a terminal state is reached or an error is received.
// freq: the time to wait between intervals in absence of a Retry-After header. Allowed minimum is one second.
// A good starting value is 30 seconds. Note that some resources might benefit from a different value.
func (l SingleSignOnCreateOrUpdatePollerResponse) PollUntilDone(ctx context.Context, freq time.Duration) (SingleSignOnCreateOrUpdateResponse, error) {
	respType := SingleSignOnCreateOrUpdateResponse{}
	resp, err := l.Poller.pt.PollUntilDone(ctx, freq, &respType.LogzSingleSignOnResource)
	if err != nil {
		return respType, err
	}
	respType.RawResponse = resp
	return respType, nil
}

// Resume rehydrates a SingleSignOnCreateOrUpdatePollerResponse from the provided client and resume token.
func (l *SingleSignOnCreateOrUpdatePollerResponse) Resume(ctx context.Context, client *SingleSignOnClient, token string) error {
	pt, err := armruntime.NewPollerFromResumeToken("SingleSignOnClient.CreateOrUpdate", token, client.pl, client.createOrUpdateHandleError)
	if err != nil {
		return err
	}
	poller := &SingleSignOnCreateOrUpdatePoller{
		pt: pt,
	}
	resp, err := poller.Poll(ctx)
	if err != nil {
		return err
	}
	l.Poller = poller
	l.RawResponse = resp
	return nil
}

// SingleSignOnCreateOrUpdateResponse contains the response from method SingleSignOn.CreateOrUpdate.
type SingleSignOnCreateOrUpdateResponse struct {
	SingleSignOnCreateOrUpdateResult
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// SingleSignOnCreateOrUpdateResult contains the result from method SingleSignOn.CreateOrUpdate.
type SingleSignOnCreateOrUpdateResult struct {
	LogzSingleSignOnResource
}

// SingleSignOnGetResponse contains the response from method SingleSignOn.Get.
type SingleSignOnGetResponse struct {
	SingleSignOnGetResult
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// SingleSignOnGetResult contains the result from method SingleSignOn.Get.
type SingleSignOnGetResult struct {
	LogzSingleSignOnResource
}

// SingleSignOnListResponse contains the response from method SingleSignOn.List.
type SingleSignOnListResponse struct {
	SingleSignOnListResult
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// SingleSignOnListResult contains the result from method SingleSignOn.List.
type SingleSignOnListResult struct {
	LogzSingleSignOnResourceListResponse
}

// SubAccountCreatePollerResponse contains the response from method SubAccount.Create.
type SubAccountCreatePollerResponse struct {
	// Poller contains an initialized poller.
	Poller *SubAccountCreatePoller

	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// PollUntilDone will poll the service endpoint until a terminal state is reached or an error is received.
// freq: the time to wait between intervals in absence of a Retry-After header. Allowed minimum is one second.
// A good starting value is 30 seconds. Note that some resources might benefit from a different value.
func (l SubAccountCreatePollerResponse) PollUntilDone(ctx context.Context, freq time.Duration) (SubAccountCreateResponse, error) {
	respType := SubAccountCreateResponse{}
	resp, err := l.Poller.pt.PollUntilDone(ctx, freq, &respType.LogzMonitorResource)
	if err != nil {
		return respType, err
	}
	respType.RawResponse = resp
	return respType, nil
}

// Resume rehydrates a SubAccountCreatePollerResponse from the provided client and resume token.
func (l *SubAccountCreatePollerResponse) Resume(ctx context.Context, client *SubAccountClient, token string) error {
	pt, err := armruntime.NewPollerFromResumeToken("SubAccountClient.Create", token, client.pl, client.createHandleError)
	if err != nil {
		return err
	}
	poller := &SubAccountCreatePoller{
		pt: pt,
	}
	resp, err := poller.Poll(ctx)
	if err != nil {
		return err
	}
	l.Poller = poller
	l.RawResponse = resp
	return nil
}

// SubAccountCreateResponse contains the response from method SubAccount.Create.
type SubAccountCreateResponse struct {
	SubAccountCreateResult
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// SubAccountCreateResult contains the result from method SubAccount.Create.
type SubAccountCreateResult struct {
	LogzMonitorResource
}

// SubAccountDeletePollerResponse contains the response from method SubAccount.Delete.
type SubAccountDeletePollerResponse struct {
	// Poller contains an initialized poller.
	Poller *SubAccountDeletePoller

	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// PollUntilDone will poll the service endpoint until a terminal state is reached or an error is received.
// freq: the time to wait between intervals in absence of a Retry-After header. Allowed minimum is one second.
// A good starting value is 30 seconds. Note that some resources might benefit from a different value.
func (l SubAccountDeletePollerResponse) PollUntilDone(ctx context.Context, freq time.Duration) (SubAccountDeleteResponse, error) {
	respType := SubAccountDeleteResponse{}
	resp, err := l.Poller.pt.PollUntilDone(ctx, freq, nil)
	if err != nil {
		return respType, err
	}
	respType.RawResponse = resp
	return respType, nil
}

// Resume rehydrates a SubAccountDeletePollerResponse from the provided client and resume token.
func (l *SubAccountDeletePollerResponse) Resume(ctx context.Context, client *SubAccountClient, token string) error {
	pt, err := armruntime.NewPollerFromResumeToken("SubAccountClient.Delete", token, client.pl, client.deleteHandleError)
	if err != nil {
		return err
	}
	poller := &SubAccountDeletePoller{
		pt: pt,
	}
	resp, err := poller.Poll(ctx)
	if err != nil {
		return err
	}
	l.Poller = poller
	l.RawResponse = resp
	return nil
}

// SubAccountDeleteResponse contains the response from method SubAccount.Delete.
type SubAccountDeleteResponse struct {
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// SubAccountGetResponse contains the response from method SubAccount.Get.
type SubAccountGetResponse struct {
	SubAccountGetResult
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// SubAccountGetResult contains the result from method SubAccount.Get.
type SubAccountGetResult struct {
	LogzMonitorResource
}

// SubAccountListMonitoredResourcesResponse contains the response from method SubAccount.ListMonitoredResources.
type SubAccountListMonitoredResourcesResponse struct {
	SubAccountListMonitoredResourcesResult
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// SubAccountListMonitoredResourcesResult contains the result from method SubAccount.ListMonitoredResources.
type SubAccountListMonitoredResourcesResult struct {
	MonitoredResourceListResponse
}

// SubAccountListResponse contains the response from method SubAccount.List.
type SubAccountListResponse struct {
	SubAccountListResult
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// SubAccountListResult contains the result from method SubAccount.List.
type SubAccountListResult struct {
	LogzMonitorResourceListResponse
}

// SubAccountListVMHostUpdateResponse contains the response from method SubAccount.ListVMHostUpdate.
type SubAccountListVMHostUpdateResponse struct {
	SubAccountListVMHostUpdateResult
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// SubAccountListVMHostUpdateResult contains the result from method SubAccount.ListVMHostUpdate.
type SubAccountListVMHostUpdateResult struct {
	VMResourcesListResponse
}

// SubAccountListVMHostsResponse contains the response from method SubAccount.ListVMHosts.
type SubAccountListVMHostsResponse struct {
	SubAccountListVMHostsResult
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// SubAccountListVMHostsResult contains the result from method SubAccount.ListVMHosts.
type SubAccountListVMHostsResult struct {
	VMResourcesListResponse
}

// SubAccountTagRulesCreateOrUpdateResponse contains the response from method SubAccountTagRules.CreateOrUpdate.
type SubAccountTagRulesCreateOrUpdateResponse struct {
	SubAccountTagRulesCreateOrUpdateResult
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// SubAccountTagRulesCreateOrUpdateResult contains the result from method SubAccountTagRules.CreateOrUpdate.
type SubAccountTagRulesCreateOrUpdateResult struct {
	MonitoringTagRules
}

// SubAccountTagRulesDeleteResponse contains the response from method SubAccountTagRules.Delete.
type SubAccountTagRulesDeleteResponse struct {
	SubAccountTagRulesDeleteResult
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// SubAccountTagRulesDeleteResult contains the result from method SubAccountTagRules.Delete.
type SubAccountTagRulesDeleteResult struct {
	// Location contains the information returned from the location header response.
	Location *string
}

// SubAccountTagRulesGetResponse contains the response from method SubAccountTagRules.Get.
type SubAccountTagRulesGetResponse struct {
	SubAccountTagRulesGetResult
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// SubAccountTagRulesGetResult contains the result from method SubAccountTagRules.Get.
type SubAccountTagRulesGetResult struct {
	MonitoringTagRules
}

// SubAccountTagRulesListResponse contains the response from method SubAccountTagRules.List.
type SubAccountTagRulesListResponse struct {
	SubAccountTagRulesListResult
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// SubAccountTagRulesListResult contains the result from method SubAccountTagRules.List.
type SubAccountTagRulesListResult struct {
	MonitoringTagRulesListResponse
}

// SubAccountUpdateResponse contains the response from method SubAccount.Update.
type SubAccountUpdateResponse struct {
	SubAccountUpdateResult
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// SubAccountUpdateResult contains the result from method SubAccount.Update.
type SubAccountUpdateResult struct {
	LogzMonitorResource
}

// SubAccountVMHostPayloadResponse contains the response from method SubAccount.VMHostPayload.
type SubAccountVMHostPayloadResponse struct {
	SubAccountVMHostPayloadResult
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// SubAccountVMHostPayloadResult contains the result from method SubAccount.VMHostPayload.
type SubAccountVMHostPayloadResult struct {
	VMExtensionPayload
}

// TagRulesCreateOrUpdateResponse contains the response from method TagRules.CreateOrUpdate.
type TagRulesCreateOrUpdateResponse struct {
	TagRulesCreateOrUpdateResult
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// TagRulesCreateOrUpdateResult contains the result from method TagRules.CreateOrUpdate.
type TagRulesCreateOrUpdateResult struct {
	MonitoringTagRules
}

// TagRulesDeleteResponse contains the response from method TagRules.Delete.
type TagRulesDeleteResponse struct {
	TagRulesDeleteResult
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// TagRulesDeleteResult contains the result from method TagRules.Delete.
type TagRulesDeleteResult struct {
	// Location contains the information returned from the location header response.
	Location *string
}

// TagRulesGetResponse contains the response from method TagRules.Get.
type TagRulesGetResponse struct {
	TagRulesGetResult
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// TagRulesGetResult contains the result from method TagRules.Get.
type TagRulesGetResult struct {
	MonitoringTagRules
}

// TagRulesListResponse contains the response from method TagRules.List.
type TagRulesListResponse struct {
	TagRulesListResult
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// TagRulesListResult contains the result from method TagRules.List.
type TagRulesListResult struct {
	MonitoringTagRulesListResponse
}
