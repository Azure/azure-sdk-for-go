//go:build go1.16
// +build go1.16

// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

package armm365securityandcompliance

import (
	"context"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/policy"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/runtime"
	"net/http"
	"reflect"
)

// OperationsClientListPager provides operations for iterating over paged responses.
type OperationsClientListPager struct {
	client    *OperationsClient
	current   OperationsClientListResponse
	err       error
	requester func(context.Context) (*policy.Request, error)
	advancer  func(context.Context, OperationsClientListResponse) (*policy.Request, error)
}

// Err returns the last error encountered while paging.
func (p *OperationsClientListPager) Err() error {
	return p.err
}

// NextPage returns true if the pager advanced to the next page.
// Returns false if there are no more pages or an error occurred.
func (p *OperationsClientListPager) NextPage(ctx context.Context) bool {
	var req *policy.Request
	var err error
	if !reflect.ValueOf(p.current).IsZero() {
		if p.current.OperationListResult.NextLink == nil || len(*p.current.OperationListResult.NextLink) == 0 {
			return false
		}
		req, err = p.advancer(ctx, p.current)
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		p.err = err
		return false
	}
	resp, err := p.client.pl.Do(req)
	if err != nil {
		p.err = err
		return false
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {
		p.err = runtime.NewResponseError(resp)
		return false
	}
	result, err := p.client.listHandleResponse(resp)
	if err != nil {
		p.err = err
		return false
	}
	p.current = result
	return true
}

// PageResponse returns the current OperationsClientListResponse page.
func (p *OperationsClientListPager) PageResponse() OperationsClientListResponse {
	return p.current
}

// PrivateEndpointConnectionsAdtAPIClientListByServicePager provides operations for iterating over paged responses.
type PrivateEndpointConnectionsAdtAPIClientListByServicePager struct {
	client    *PrivateEndpointConnectionsAdtAPIClient
	current   PrivateEndpointConnectionsAdtAPIClientListByServiceResponse
	err       error
	requester func(context.Context) (*policy.Request, error)
	advancer  func(context.Context, PrivateEndpointConnectionsAdtAPIClientListByServiceResponse) (*policy.Request, error)
}

// Err returns the last error encountered while paging.
func (p *PrivateEndpointConnectionsAdtAPIClientListByServicePager) Err() error {
	return p.err
}

// NextPage returns true if the pager advanced to the next page.
// Returns false if there are no more pages or an error occurred.
func (p *PrivateEndpointConnectionsAdtAPIClientListByServicePager) NextPage(ctx context.Context) bool {
	var req *policy.Request
	var err error
	if !reflect.ValueOf(p.current).IsZero() {
		if p.current.PrivateEndpointConnectionListResult.NextLink == nil || len(*p.current.PrivateEndpointConnectionListResult.NextLink) == 0 {
			return false
		}
		req, err = p.advancer(ctx, p.current)
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		p.err = err
		return false
	}
	resp, err := p.client.pl.Do(req)
	if err != nil {
		p.err = err
		return false
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {
		p.err = runtime.NewResponseError(resp)
		return false
	}
	result, err := p.client.listByServiceHandleResponse(resp)
	if err != nil {
		p.err = err
		return false
	}
	p.current = result
	return true
}

// PageResponse returns the current PrivateEndpointConnectionsAdtAPIClientListByServiceResponse page.
func (p *PrivateEndpointConnectionsAdtAPIClientListByServicePager) PageResponse() PrivateEndpointConnectionsAdtAPIClientListByServiceResponse {
	return p.current
}

// PrivateEndpointConnectionsCompClientListByServicePager provides operations for iterating over paged responses.
type PrivateEndpointConnectionsCompClientListByServicePager struct {
	client    *PrivateEndpointConnectionsCompClient
	current   PrivateEndpointConnectionsCompClientListByServiceResponse
	err       error
	requester func(context.Context) (*policy.Request, error)
	advancer  func(context.Context, PrivateEndpointConnectionsCompClientListByServiceResponse) (*policy.Request, error)
}

// Err returns the last error encountered while paging.
func (p *PrivateEndpointConnectionsCompClientListByServicePager) Err() error {
	return p.err
}

// NextPage returns true if the pager advanced to the next page.
// Returns false if there are no more pages or an error occurred.
func (p *PrivateEndpointConnectionsCompClientListByServicePager) NextPage(ctx context.Context) bool {
	var req *policy.Request
	var err error
	if !reflect.ValueOf(p.current).IsZero() {
		if p.current.PrivateEndpointConnectionListResult.NextLink == nil || len(*p.current.PrivateEndpointConnectionListResult.NextLink) == 0 {
			return false
		}
		req, err = p.advancer(ctx, p.current)
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		p.err = err
		return false
	}
	resp, err := p.client.pl.Do(req)
	if err != nil {
		p.err = err
		return false
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {
		p.err = runtime.NewResponseError(resp)
		return false
	}
	result, err := p.client.listByServiceHandleResponse(resp)
	if err != nil {
		p.err = err
		return false
	}
	p.current = result
	return true
}

// PageResponse returns the current PrivateEndpointConnectionsCompClientListByServiceResponse page.
func (p *PrivateEndpointConnectionsCompClientListByServicePager) PageResponse() PrivateEndpointConnectionsCompClientListByServiceResponse {
	return p.current
}

// PrivateEndpointConnectionsForEDMClientListByServicePager provides operations for iterating over paged responses.
type PrivateEndpointConnectionsForEDMClientListByServicePager struct {
	client    *PrivateEndpointConnectionsForEDMClient
	current   PrivateEndpointConnectionsForEDMClientListByServiceResponse
	err       error
	requester func(context.Context) (*policy.Request, error)
	advancer  func(context.Context, PrivateEndpointConnectionsForEDMClientListByServiceResponse) (*policy.Request, error)
}

// Err returns the last error encountered while paging.
func (p *PrivateEndpointConnectionsForEDMClientListByServicePager) Err() error {
	return p.err
}

// NextPage returns true if the pager advanced to the next page.
// Returns false if there are no more pages or an error occurred.
func (p *PrivateEndpointConnectionsForEDMClientListByServicePager) NextPage(ctx context.Context) bool {
	var req *policy.Request
	var err error
	if !reflect.ValueOf(p.current).IsZero() {
		if p.current.PrivateEndpointConnectionListResult.NextLink == nil || len(*p.current.PrivateEndpointConnectionListResult.NextLink) == 0 {
			return false
		}
		req, err = p.advancer(ctx, p.current)
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		p.err = err
		return false
	}
	resp, err := p.client.pl.Do(req)
	if err != nil {
		p.err = err
		return false
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {
		p.err = runtime.NewResponseError(resp)
		return false
	}
	result, err := p.client.listByServiceHandleResponse(resp)
	if err != nil {
		p.err = err
		return false
	}
	p.current = result
	return true
}

// PageResponse returns the current PrivateEndpointConnectionsForEDMClientListByServiceResponse page.
func (p *PrivateEndpointConnectionsForEDMClientListByServicePager) PageResponse() PrivateEndpointConnectionsForEDMClientListByServiceResponse {
	return p.current
}

// PrivateEndpointConnectionsForMIPPolicySyncClientListByServicePager provides operations for iterating over paged responses.
type PrivateEndpointConnectionsForMIPPolicySyncClientListByServicePager struct {
	client    *PrivateEndpointConnectionsForMIPPolicySyncClient
	current   PrivateEndpointConnectionsForMIPPolicySyncClientListByServiceResponse
	err       error
	requester func(context.Context) (*policy.Request, error)
	advancer  func(context.Context, PrivateEndpointConnectionsForMIPPolicySyncClientListByServiceResponse) (*policy.Request, error)
}

// Err returns the last error encountered while paging.
func (p *PrivateEndpointConnectionsForMIPPolicySyncClientListByServicePager) Err() error {
	return p.err
}

// NextPage returns true if the pager advanced to the next page.
// Returns false if there are no more pages or an error occurred.
func (p *PrivateEndpointConnectionsForMIPPolicySyncClientListByServicePager) NextPage(ctx context.Context) bool {
	var req *policy.Request
	var err error
	if !reflect.ValueOf(p.current).IsZero() {
		if p.current.PrivateEndpointConnectionListResult.NextLink == nil || len(*p.current.PrivateEndpointConnectionListResult.NextLink) == 0 {
			return false
		}
		req, err = p.advancer(ctx, p.current)
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		p.err = err
		return false
	}
	resp, err := p.client.pl.Do(req)
	if err != nil {
		p.err = err
		return false
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {
		p.err = runtime.NewResponseError(resp)
		return false
	}
	result, err := p.client.listByServiceHandleResponse(resp)
	if err != nil {
		p.err = err
		return false
	}
	p.current = result
	return true
}

// PageResponse returns the current PrivateEndpointConnectionsForMIPPolicySyncClientListByServiceResponse page.
func (p *PrivateEndpointConnectionsForMIPPolicySyncClientListByServicePager) PageResponse() PrivateEndpointConnectionsForMIPPolicySyncClientListByServiceResponse {
	return p.current
}

// PrivateEndpointConnectionsForSCCPowershellClientListByServicePager provides operations for iterating over paged responses.
type PrivateEndpointConnectionsForSCCPowershellClientListByServicePager struct {
	client    *PrivateEndpointConnectionsForSCCPowershellClient
	current   PrivateEndpointConnectionsForSCCPowershellClientListByServiceResponse
	err       error
	requester func(context.Context) (*policy.Request, error)
	advancer  func(context.Context, PrivateEndpointConnectionsForSCCPowershellClientListByServiceResponse) (*policy.Request, error)
}

// Err returns the last error encountered while paging.
func (p *PrivateEndpointConnectionsForSCCPowershellClientListByServicePager) Err() error {
	return p.err
}

// NextPage returns true if the pager advanced to the next page.
// Returns false if there are no more pages or an error occurred.
func (p *PrivateEndpointConnectionsForSCCPowershellClientListByServicePager) NextPage(ctx context.Context) bool {
	var req *policy.Request
	var err error
	if !reflect.ValueOf(p.current).IsZero() {
		if p.current.PrivateEndpointConnectionListResult.NextLink == nil || len(*p.current.PrivateEndpointConnectionListResult.NextLink) == 0 {
			return false
		}
		req, err = p.advancer(ctx, p.current)
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		p.err = err
		return false
	}
	resp, err := p.client.pl.Do(req)
	if err != nil {
		p.err = err
		return false
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {
		p.err = runtime.NewResponseError(resp)
		return false
	}
	result, err := p.client.listByServiceHandleResponse(resp)
	if err != nil {
		p.err = err
		return false
	}
	p.current = result
	return true
}

// PageResponse returns the current PrivateEndpointConnectionsForSCCPowershellClientListByServiceResponse page.
func (p *PrivateEndpointConnectionsForSCCPowershellClientListByServicePager) PageResponse() PrivateEndpointConnectionsForSCCPowershellClientListByServiceResponse {
	return p.current
}

// PrivateEndpointConnectionsSecClientListByServicePager provides operations for iterating over paged responses.
type PrivateEndpointConnectionsSecClientListByServicePager struct {
	client    *PrivateEndpointConnectionsSecClient
	current   PrivateEndpointConnectionsSecClientListByServiceResponse
	err       error
	requester func(context.Context) (*policy.Request, error)
	advancer  func(context.Context, PrivateEndpointConnectionsSecClientListByServiceResponse) (*policy.Request, error)
}

// Err returns the last error encountered while paging.
func (p *PrivateEndpointConnectionsSecClientListByServicePager) Err() error {
	return p.err
}

// NextPage returns true if the pager advanced to the next page.
// Returns false if there are no more pages or an error occurred.
func (p *PrivateEndpointConnectionsSecClientListByServicePager) NextPage(ctx context.Context) bool {
	var req *policy.Request
	var err error
	if !reflect.ValueOf(p.current).IsZero() {
		if p.current.PrivateEndpointConnectionListResult.NextLink == nil || len(*p.current.PrivateEndpointConnectionListResult.NextLink) == 0 {
			return false
		}
		req, err = p.advancer(ctx, p.current)
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		p.err = err
		return false
	}
	resp, err := p.client.pl.Do(req)
	if err != nil {
		p.err = err
		return false
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {
		p.err = runtime.NewResponseError(resp)
		return false
	}
	result, err := p.client.listByServiceHandleResponse(resp)
	if err != nil {
		p.err = err
		return false
	}
	p.current = result
	return true
}

// PageResponse returns the current PrivateEndpointConnectionsSecClientListByServiceResponse page.
func (p *PrivateEndpointConnectionsSecClientListByServicePager) PageResponse() PrivateEndpointConnectionsSecClientListByServiceResponse {
	return p.current
}

// PrivateLinkServicesForEDMUploadClientListByResourceGroupPager provides operations for iterating over paged responses.
type PrivateLinkServicesForEDMUploadClientListByResourceGroupPager struct {
	client    *PrivateLinkServicesForEDMUploadClient
	current   PrivateLinkServicesForEDMUploadClientListByResourceGroupResponse
	err       error
	requester func(context.Context) (*policy.Request, error)
	advancer  func(context.Context, PrivateLinkServicesForEDMUploadClientListByResourceGroupResponse) (*policy.Request, error)
}

// Err returns the last error encountered while paging.
func (p *PrivateLinkServicesForEDMUploadClientListByResourceGroupPager) Err() error {
	return p.err
}

// NextPage returns true if the pager advanced to the next page.
// Returns false if there are no more pages or an error occurred.
func (p *PrivateLinkServicesForEDMUploadClientListByResourceGroupPager) NextPage(ctx context.Context) bool {
	var req *policy.Request
	var err error
	if !reflect.ValueOf(p.current).IsZero() {
		if p.current.PrivateLinkServicesForEDMUploadDescriptionListResult.NextLink == nil || len(*p.current.PrivateLinkServicesForEDMUploadDescriptionListResult.NextLink) == 0 {
			return false
		}
		req, err = p.advancer(ctx, p.current)
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		p.err = err
		return false
	}
	resp, err := p.client.pl.Do(req)
	if err != nil {
		p.err = err
		return false
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {
		p.err = runtime.NewResponseError(resp)
		return false
	}
	result, err := p.client.listByResourceGroupHandleResponse(resp)
	if err != nil {
		p.err = err
		return false
	}
	p.current = result
	return true
}

// PageResponse returns the current PrivateLinkServicesForEDMUploadClientListByResourceGroupResponse page.
func (p *PrivateLinkServicesForEDMUploadClientListByResourceGroupPager) PageResponse() PrivateLinkServicesForEDMUploadClientListByResourceGroupResponse {
	return p.current
}

// PrivateLinkServicesForEDMUploadClientListPager provides operations for iterating over paged responses.
type PrivateLinkServicesForEDMUploadClientListPager struct {
	client    *PrivateLinkServicesForEDMUploadClient
	current   PrivateLinkServicesForEDMUploadClientListResponse
	err       error
	requester func(context.Context) (*policy.Request, error)
	advancer  func(context.Context, PrivateLinkServicesForEDMUploadClientListResponse) (*policy.Request, error)
}

// Err returns the last error encountered while paging.
func (p *PrivateLinkServicesForEDMUploadClientListPager) Err() error {
	return p.err
}

// NextPage returns true if the pager advanced to the next page.
// Returns false if there are no more pages or an error occurred.
func (p *PrivateLinkServicesForEDMUploadClientListPager) NextPage(ctx context.Context) bool {
	var req *policy.Request
	var err error
	if !reflect.ValueOf(p.current).IsZero() {
		if p.current.PrivateLinkServicesForEDMUploadDescriptionListResult.NextLink == nil || len(*p.current.PrivateLinkServicesForEDMUploadDescriptionListResult.NextLink) == 0 {
			return false
		}
		req, err = p.advancer(ctx, p.current)
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		p.err = err
		return false
	}
	resp, err := p.client.pl.Do(req)
	if err != nil {
		p.err = err
		return false
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {
		p.err = runtime.NewResponseError(resp)
		return false
	}
	result, err := p.client.listHandleResponse(resp)
	if err != nil {
		p.err = err
		return false
	}
	p.current = result
	return true
}

// PageResponse returns the current PrivateLinkServicesForEDMUploadClientListResponse page.
func (p *PrivateLinkServicesForEDMUploadClientListPager) PageResponse() PrivateLinkServicesForEDMUploadClientListResponse {
	return p.current
}

// PrivateLinkServicesForM365ComplianceCenterClientListByResourceGroupPager provides operations for iterating over paged responses.
type PrivateLinkServicesForM365ComplianceCenterClientListByResourceGroupPager struct {
	client    *PrivateLinkServicesForM365ComplianceCenterClient
	current   PrivateLinkServicesForM365ComplianceCenterClientListByResourceGroupResponse
	err       error
	requester func(context.Context) (*policy.Request, error)
	advancer  func(context.Context, PrivateLinkServicesForM365ComplianceCenterClientListByResourceGroupResponse) (*policy.Request, error)
}

// Err returns the last error encountered while paging.
func (p *PrivateLinkServicesForM365ComplianceCenterClientListByResourceGroupPager) Err() error {
	return p.err
}

// NextPage returns true if the pager advanced to the next page.
// Returns false if there are no more pages or an error occurred.
func (p *PrivateLinkServicesForM365ComplianceCenterClientListByResourceGroupPager) NextPage(ctx context.Context) bool {
	var req *policy.Request
	var err error
	if !reflect.ValueOf(p.current).IsZero() {
		if p.current.PrivateLinkServicesForM365ComplianceCenterDescriptionListResult.NextLink == nil || len(*p.current.PrivateLinkServicesForM365ComplianceCenterDescriptionListResult.NextLink) == 0 {
			return false
		}
		req, err = p.advancer(ctx, p.current)
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		p.err = err
		return false
	}
	resp, err := p.client.pl.Do(req)
	if err != nil {
		p.err = err
		return false
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {
		p.err = runtime.NewResponseError(resp)
		return false
	}
	result, err := p.client.listByResourceGroupHandleResponse(resp)
	if err != nil {
		p.err = err
		return false
	}
	p.current = result
	return true
}

// PageResponse returns the current PrivateLinkServicesForM365ComplianceCenterClientListByResourceGroupResponse page.
func (p *PrivateLinkServicesForM365ComplianceCenterClientListByResourceGroupPager) PageResponse() PrivateLinkServicesForM365ComplianceCenterClientListByResourceGroupResponse {
	return p.current
}

// PrivateLinkServicesForM365ComplianceCenterClientListPager provides operations for iterating over paged responses.
type PrivateLinkServicesForM365ComplianceCenterClientListPager struct {
	client    *PrivateLinkServicesForM365ComplianceCenterClient
	current   PrivateLinkServicesForM365ComplianceCenterClientListResponse
	err       error
	requester func(context.Context) (*policy.Request, error)
	advancer  func(context.Context, PrivateLinkServicesForM365ComplianceCenterClientListResponse) (*policy.Request, error)
}

// Err returns the last error encountered while paging.
func (p *PrivateLinkServicesForM365ComplianceCenterClientListPager) Err() error {
	return p.err
}

// NextPage returns true if the pager advanced to the next page.
// Returns false if there are no more pages or an error occurred.
func (p *PrivateLinkServicesForM365ComplianceCenterClientListPager) NextPage(ctx context.Context) bool {
	var req *policy.Request
	var err error
	if !reflect.ValueOf(p.current).IsZero() {
		if p.current.PrivateLinkServicesForM365ComplianceCenterDescriptionListResult.NextLink == nil || len(*p.current.PrivateLinkServicesForM365ComplianceCenterDescriptionListResult.NextLink) == 0 {
			return false
		}
		req, err = p.advancer(ctx, p.current)
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		p.err = err
		return false
	}
	resp, err := p.client.pl.Do(req)
	if err != nil {
		p.err = err
		return false
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {
		p.err = runtime.NewResponseError(resp)
		return false
	}
	result, err := p.client.listHandleResponse(resp)
	if err != nil {
		p.err = err
		return false
	}
	p.current = result
	return true
}

// PageResponse returns the current PrivateLinkServicesForM365ComplianceCenterClientListResponse page.
func (p *PrivateLinkServicesForM365ComplianceCenterClientListPager) PageResponse() PrivateLinkServicesForM365ComplianceCenterClientListResponse {
	return p.current
}

// PrivateLinkServicesForM365SecurityCenterClientListByResourceGroupPager provides operations for iterating over paged responses.
type PrivateLinkServicesForM365SecurityCenterClientListByResourceGroupPager struct {
	client    *PrivateLinkServicesForM365SecurityCenterClient
	current   PrivateLinkServicesForM365SecurityCenterClientListByResourceGroupResponse
	err       error
	requester func(context.Context) (*policy.Request, error)
	advancer  func(context.Context, PrivateLinkServicesForM365SecurityCenterClientListByResourceGroupResponse) (*policy.Request, error)
}

// Err returns the last error encountered while paging.
func (p *PrivateLinkServicesForM365SecurityCenterClientListByResourceGroupPager) Err() error {
	return p.err
}

// NextPage returns true if the pager advanced to the next page.
// Returns false if there are no more pages or an error occurred.
func (p *PrivateLinkServicesForM365SecurityCenterClientListByResourceGroupPager) NextPage(ctx context.Context) bool {
	var req *policy.Request
	var err error
	if !reflect.ValueOf(p.current).IsZero() {
		if p.current.PrivateLinkServicesForM365SecurityCenterDescriptionListResult.NextLink == nil || len(*p.current.PrivateLinkServicesForM365SecurityCenterDescriptionListResult.NextLink) == 0 {
			return false
		}
		req, err = p.advancer(ctx, p.current)
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		p.err = err
		return false
	}
	resp, err := p.client.pl.Do(req)
	if err != nil {
		p.err = err
		return false
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {
		p.err = runtime.NewResponseError(resp)
		return false
	}
	result, err := p.client.listByResourceGroupHandleResponse(resp)
	if err != nil {
		p.err = err
		return false
	}
	p.current = result
	return true
}

// PageResponse returns the current PrivateLinkServicesForM365SecurityCenterClientListByResourceGroupResponse page.
func (p *PrivateLinkServicesForM365SecurityCenterClientListByResourceGroupPager) PageResponse() PrivateLinkServicesForM365SecurityCenterClientListByResourceGroupResponse {
	return p.current
}

// PrivateLinkServicesForM365SecurityCenterClientListPager provides operations for iterating over paged responses.
type PrivateLinkServicesForM365SecurityCenterClientListPager struct {
	client    *PrivateLinkServicesForM365SecurityCenterClient
	current   PrivateLinkServicesForM365SecurityCenterClientListResponse
	err       error
	requester func(context.Context) (*policy.Request, error)
	advancer  func(context.Context, PrivateLinkServicesForM365SecurityCenterClientListResponse) (*policy.Request, error)
}

// Err returns the last error encountered while paging.
func (p *PrivateLinkServicesForM365SecurityCenterClientListPager) Err() error {
	return p.err
}

// NextPage returns true if the pager advanced to the next page.
// Returns false if there are no more pages or an error occurred.
func (p *PrivateLinkServicesForM365SecurityCenterClientListPager) NextPage(ctx context.Context) bool {
	var req *policy.Request
	var err error
	if !reflect.ValueOf(p.current).IsZero() {
		if p.current.PrivateLinkServicesForM365SecurityCenterDescriptionListResult.NextLink == nil || len(*p.current.PrivateLinkServicesForM365SecurityCenterDescriptionListResult.NextLink) == 0 {
			return false
		}
		req, err = p.advancer(ctx, p.current)
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		p.err = err
		return false
	}
	resp, err := p.client.pl.Do(req)
	if err != nil {
		p.err = err
		return false
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {
		p.err = runtime.NewResponseError(resp)
		return false
	}
	result, err := p.client.listHandleResponse(resp)
	if err != nil {
		p.err = err
		return false
	}
	p.current = result
	return true
}

// PageResponse returns the current PrivateLinkServicesForM365SecurityCenterClientListResponse page.
func (p *PrivateLinkServicesForM365SecurityCenterClientListPager) PageResponse() PrivateLinkServicesForM365SecurityCenterClientListResponse {
	return p.current
}

// PrivateLinkServicesForMIPPolicySyncClientListByResourceGroupPager provides operations for iterating over paged responses.
type PrivateLinkServicesForMIPPolicySyncClientListByResourceGroupPager struct {
	client    *PrivateLinkServicesForMIPPolicySyncClient
	current   PrivateLinkServicesForMIPPolicySyncClientListByResourceGroupResponse
	err       error
	requester func(context.Context) (*policy.Request, error)
	advancer  func(context.Context, PrivateLinkServicesForMIPPolicySyncClientListByResourceGroupResponse) (*policy.Request, error)
}

// Err returns the last error encountered while paging.
func (p *PrivateLinkServicesForMIPPolicySyncClientListByResourceGroupPager) Err() error {
	return p.err
}

// NextPage returns true if the pager advanced to the next page.
// Returns false if there are no more pages or an error occurred.
func (p *PrivateLinkServicesForMIPPolicySyncClientListByResourceGroupPager) NextPage(ctx context.Context) bool {
	var req *policy.Request
	var err error
	if !reflect.ValueOf(p.current).IsZero() {
		if p.current.PrivateLinkServicesForMIPPolicySyncDescriptionListResult.NextLink == nil || len(*p.current.PrivateLinkServicesForMIPPolicySyncDescriptionListResult.NextLink) == 0 {
			return false
		}
		req, err = p.advancer(ctx, p.current)
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		p.err = err
		return false
	}
	resp, err := p.client.pl.Do(req)
	if err != nil {
		p.err = err
		return false
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {
		p.err = runtime.NewResponseError(resp)
		return false
	}
	result, err := p.client.listByResourceGroupHandleResponse(resp)
	if err != nil {
		p.err = err
		return false
	}
	p.current = result
	return true
}

// PageResponse returns the current PrivateLinkServicesForMIPPolicySyncClientListByResourceGroupResponse page.
func (p *PrivateLinkServicesForMIPPolicySyncClientListByResourceGroupPager) PageResponse() PrivateLinkServicesForMIPPolicySyncClientListByResourceGroupResponse {
	return p.current
}

// PrivateLinkServicesForMIPPolicySyncClientListPager provides operations for iterating over paged responses.
type PrivateLinkServicesForMIPPolicySyncClientListPager struct {
	client    *PrivateLinkServicesForMIPPolicySyncClient
	current   PrivateLinkServicesForMIPPolicySyncClientListResponse
	err       error
	requester func(context.Context) (*policy.Request, error)
	advancer  func(context.Context, PrivateLinkServicesForMIPPolicySyncClientListResponse) (*policy.Request, error)
}

// Err returns the last error encountered while paging.
func (p *PrivateLinkServicesForMIPPolicySyncClientListPager) Err() error {
	return p.err
}

// NextPage returns true if the pager advanced to the next page.
// Returns false if there are no more pages or an error occurred.
func (p *PrivateLinkServicesForMIPPolicySyncClientListPager) NextPage(ctx context.Context) bool {
	var req *policy.Request
	var err error
	if !reflect.ValueOf(p.current).IsZero() {
		if p.current.PrivateLinkServicesForMIPPolicySyncDescriptionListResult.NextLink == nil || len(*p.current.PrivateLinkServicesForMIPPolicySyncDescriptionListResult.NextLink) == 0 {
			return false
		}
		req, err = p.advancer(ctx, p.current)
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		p.err = err
		return false
	}
	resp, err := p.client.pl.Do(req)
	if err != nil {
		p.err = err
		return false
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {
		p.err = runtime.NewResponseError(resp)
		return false
	}
	result, err := p.client.listHandleResponse(resp)
	if err != nil {
		p.err = err
		return false
	}
	p.current = result
	return true
}

// PageResponse returns the current PrivateLinkServicesForMIPPolicySyncClientListResponse page.
func (p *PrivateLinkServicesForMIPPolicySyncClientListPager) PageResponse() PrivateLinkServicesForMIPPolicySyncClientListResponse {
	return p.current
}

// PrivateLinkServicesForO365ManagementActivityAPIClientListByResourceGroupPager provides operations for iterating over paged responses.
type PrivateLinkServicesForO365ManagementActivityAPIClientListByResourceGroupPager struct {
	client    *PrivateLinkServicesForO365ManagementActivityAPIClient
	current   PrivateLinkServicesForO365ManagementActivityAPIClientListByResourceGroupResponse
	err       error
	requester func(context.Context) (*policy.Request, error)
	advancer  func(context.Context, PrivateLinkServicesForO365ManagementActivityAPIClientListByResourceGroupResponse) (*policy.Request, error)
}

// Err returns the last error encountered while paging.
func (p *PrivateLinkServicesForO365ManagementActivityAPIClientListByResourceGroupPager) Err() error {
	return p.err
}

// NextPage returns true if the pager advanced to the next page.
// Returns false if there are no more pages or an error occurred.
func (p *PrivateLinkServicesForO365ManagementActivityAPIClientListByResourceGroupPager) NextPage(ctx context.Context) bool {
	var req *policy.Request
	var err error
	if !reflect.ValueOf(p.current).IsZero() {
		if p.current.PrivateLinkServicesForO365ManagementActivityAPIDescriptionListResult.NextLink == nil || len(*p.current.PrivateLinkServicesForO365ManagementActivityAPIDescriptionListResult.NextLink) == 0 {
			return false
		}
		req, err = p.advancer(ctx, p.current)
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		p.err = err
		return false
	}
	resp, err := p.client.pl.Do(req)
	if err != nil {
		p.err = err
		return false
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {
		p.err = runtime.NewResponseError(resp)
		return false
	}
	result, err := p.client.listByResourceGroupHandleResponse(resp)
	if err != nil {
		p.err = err
		return false
	}
	p.current = result
	return true
}

// PageResponse returns the current PrivateLinkServicesForO365ManagementActivityAPIClientListByResourceGroupResponse page.
func (p *PrivateLinkServicesForO365ManagementActivityAPIClientListByResourceGroupPager) PageResponse() PrivateLinkServicesForO365ManagementActivityAPIClientListByResourceGroupResponse {
	return p.current
}

// PrivateLinkServicesForO365ManagementActivityAPIClientListPager provides operations for iterating over paged responses.
type PrivateLinkServicesForO365ManagementActivityAPIClientListPager struct {
	client    *PrivateLinkServicesForO365ManagementActivityAPIClient
	current   PrivateLinkServicesForO365ManagementActivityAPIClientListResponse
	err       error
	requester func(context.Context) (*policy.Request, error)
	advancer  func(context.Context, PrivateLinkServicesForO365ManagementActivityAPIClientListResponse) (*policy.Request, error)
}

// Err returns the last error encountered while paging.
func (p *PrivateLinkServicesForO365ManagementActivityAPIClientListPager) Err() error {
	return p.err
}

// NextPage returns true if the pager advanced to the next page.
// Returns false if there are no more pages or an error occurred.
func (p *PrivateLinkServicesForO365ManagementActivityAPIClientListPager) NextPage(ctx context.Context) bool {
	var req *policy.Request
	var err error
	if !reflect.ValueOf(p.current).IsZero() {
		if p.current.PrivateLinkServicesForO365ManagementActivityAPIDescriptionListResult.NextLink == nil || len(*p.current.PrivateLinkServicesForO365ManagementActivityAPIDescriptionListResult.NextLink) == 0 {
			return false
		}
		req, err = p.advancer(ctx, p.current)
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		p.err = err
		return false
	}
	resp, err := p.client.pl.Do(req)
	if err != nil {
		p.err = err
		return false
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {
		p.err = runtime.NewResponseError(resp)
		return false
	}
	result, err := p.client.listHandleResponse(resp)
	if err != nil {
		p.err = err
		return false
	}
	p.current = result
	return true
}

// PageResponse returns the current PrivateLinkServicesForO365ManagementActivityAPIClientListResponse page.
func (p *PrivateLinkServicesForO365ManagementActivityAPIClientListPager) PageResponse() PrivateLinkServicesForO365ManagementActivityAPIClientListResponse {
	return p.current
}

// PrivateLinkServicesForSCCPowershellClientListByResourceGroupPager provides operations for iterating over paged responses.
type PrivateLinkServicesForSCCPowershellClientListByResourceGroupPager struct {
	client    *PrivateLinkServicesForSCCPowershellClient
	current   PrivateLinkServicesForSCCPowershellClientListByResourceGroupResponse
	err       error
	requester func(context.Context) (*policy.Request, error)
	advancer  func(context.Context, PrivateLinkServicesForSCCPowershellClientListByResourceGroupResponse) (*policy.Request, error)
}

// Err returns the last error encountered while paging.
func (p *PrivateLinkServicesForSCCPowershellClientListByResourceGroupPager) Err() error {
	return p.err
}

// NextPage returns true if the pager advanced to the next page.
// Returns false if there are no more pages or an error occurred.
func (p *PrivateLinkServicesForSCCPowershellClientListByResourceGroupPager) NextPage(ctx context.Context) bool {
	var req *policy.Request
	var err error
	if !reflect.ValueOf(p.current).IsZero() {
		if p.current.PrivateLinkServicesForSCCPowershellDescriptionListResult.NextLink == nil || len(*p.current.PrivateLinkServicesForSCCPowershellDescriptionListResult.NextLink) == 0 {
			return false
		}
		req, err = p.advancer(ctx, p.current)
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		p.err = err
		return false
	}
	resp, err := p.client.pl.Do(req)
	if err != nil {
		p.err = err
		return false
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {
		p.err = runtime.NewResponseError(resp)
		return false
	}
	result, err := p.client.listByResourceGroupHandleResponse(resp)
	if err != nil {
		p.err = err
		return false
	}
	p.current = result
	return true
}

// PageResponse returns the current PrivateLinkServicesForSCCPowershellClientListByResourceGroupResponse page.
func (p *PrivateLinkServicesForSCCPowershellClientListByResourceGroupPager) PageResponse() PrivateLinkServicesForSCCPowershellClientListByResourceGroupResponse {
	return p.current
}

// PrivateLinkServicesForSCCPowershellClientListPager provides operations for iterating over paged responses.
type PrivateLinkServicesForSCCPowershellClientListPager struct {
	client    *PrivateLinkServicesForSCCPowershellClient
	current   PrivateLinkServicesForSCCPowershellClientListResponse
	err       error
	requester func(context.Context) (*policy.Request, error)
	advancer  func(context.Context, PrivateLinkServicesForSCCPowershellClientListResponse) (*policy.Request, error)
}

// Err returns the last error encountered while paging.
func (p *PrivateLinkServicesForSCCPowershellClientListPager) Err() error {
	return p.err
}

// NextPage returns true if the pager advanced to the next page.
// Returns false if there are no more pages or an error occurred.
func (p *PrivateLinkServicesForSCCPowershellClientListPager) NextPage(ctx context.Context) bool {
	var req *policy.Request
	var err error
	if !reflect.ValueOf(p.current).IsZero() {
		if p.current.PrivateLinkServicesForSCCPowershellDescriptionListResult.NextLink == nil || len(*p.current.PrivateLinkServicesForSCCPowershellDescriptionListResult.NextLink) == 0 {
			return false
		}
		req, err = p.advancer(ctx, p.current)
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		p.err = err
		return false
	}
	resp, err := p.client.pl.Do(req)
	if err != nil {
		p.err = err
		return false
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {
		p.err = runtime.NewResponseError(resp)
		return false
	}
	result, err := p.client.listHandleResponse(resp)
	if err != nil {
		p.err = err
		return false
	}
	p.current = result
	return true
}

// PageResponse returns the current PrivateLinkServicesForSCCPowershellClientListResponse page.
func (p *PrivateLinkServicesForSCCPowershellClientListPager) PageResponse() PrivateLinkServicesForSCCPowershellClientListResponse {
	return p.current
}
