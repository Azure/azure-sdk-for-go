//go:build go1.16
// +build go1.16

// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

package armm365securityandcompliance

import (
	"context"
	armruntime "github.com/Azure/azure-sdk-for-go/sdk/azcore/arm/runtime"
	"net/http"
	"time"
)

// OperationResultsClientGetResponse contains the response from method OperationResultsClient.Get.
type OperationResultsClientGetResponse struct {
	OperationResultsClientGetResult
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// OperationResultsClientGetResult contains the result from method OperationResultsClient.Get.
type OperationResultsClientGetResult struct {
	OperationResultsDescription
}

// OperationsClientListResponse contains the response from method OperationsClient.List.
type OperationsClientListResponse struct {
	OperationsClientListResult
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// OperationsClientListResult contains the result from method OperationsClient.List.
type OperationsClientListResult struct {
	OperationListResult
}

// PrivateEndpointConnectionsAdtAPIClientCreateOrUpdatePollerResponse contains the response from method PrivateEndpointConnectionsAdtAPIClient.CreateOrUpdate.
type PrivateEndpointConnectionsAdtAPIClientCreateOrUpdatePollerResponse struct {
	// Poller contains an initialized poller.
	Poller *PrivateEndpointConnectionsAdtAPIClientCreateOrUpdatePoller

	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// PollUntilDone will poll the service endpoint until a terminal state is reached or an error is received.
// freq: the time to wait between intervals in absence of a Retry-After header. Allowed minimum is one second.
// A good starting value is 30 seconds. Note that some resources might benefit from a different value.
func (l PrivateEndpointConnectionsAdtAPIClientCreateOrUpdatePollerResponse) PollUntilDone(ctx context.Context, freq time.Duration) (PrivateEndpointConnectionsAdtAPIClientCreateOrUpdateResponse, error) {
	respType := PrivateEndpointConnectionsAdtAPIClientCreateOrUpdateResponse{}
	resp, err := l.Poller.pt.PollUntilDone(ctx, freq, &respType.PrivateEndpointConnection)
	if err != nil {
		return respType, err
	}
	respType.RawResponse = resp
	return respType, nil
}

// Resume rehydrates a PrivateEndpointConnectionsAdtAPIClientCreateOrUpdatePollerResponse from the provided client and resume
// token.
func (l *PrivateEndpointConnectionsAdtAPIClientCreateOrUpdatePollerResponse) Resume(ctx context.Context, client *PrivateEndpointConnectionsAdtAPIClient, token string) error {
	pt, err := armruntime.NewPollerFromResumeToken("PrivateEndpointConnectionsAdtAPIClient.CreateOrUpdate", token, client.pl)
	if err != nil {
		return err
	}
	poller := &PrivateEndpointConnectionsAdtAPIClientCreateOrUpdatePoller{
		pt: pt,
	}
	resp, err := poller.Poll(ctx)
	if err != nil {
		return err
	}
	l.Poller = poller
	l.RawResponse = resp
	return nil
}

// PrivateEndpointConnectionsAdtAPIClientCreateOrUpdateResponse contains the response from method PrivateEndpointConnectionsAdtAPIClient.CreateOrUpdate.
type PrivateEndpointConnectionsAdtAPIClientCreateOrUpdateResponse struct {
	PrivateEndpointConnectionsAdtAPIClientCreateOrUpdateResult
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// PrivateEndpointConnectionsAdtAPIClientCreateOrUpdateResult contains the result from method PrivateEndpointConnectionsAdtAPIClient.CreateOrUpdate.
type PrivateEndpointConnectionsAdtAPIClientCreateOrUpdateResult struct {
	PrivateEndpointConnection
}

// PrivateEndpointConnectionsAdtAPIClientDeletePollerResponse contains the response from method PrivateEndpointConnectionsAdtAPIClient.Delete.
type PrivateEndpointConnectionsAdtAPIClientDeletePollerResponse struct {
	// Poller contains an initialized poller.
	Poller *PrivateEndpointConnectionsAdtAPIClientDeletePoller

	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// PollUntilDone will poll the service endpoint until a terminal state is reached or an error is received.
// freq: the time to wait between intervals in absence of a Retry-After header. Allowed minimum is one second.
// A good starting value is 30 seconds. Note that some resources might benefit from a different value.
func (l PrivateEndpointConnectionsAdtAPIClientDeletePollerResponse) PollUntilDone(ctx context.Context, freq time.Duration) (PrivateEndpointConnectionsAdtAPIClientDeleteResponse, error) {
	respType := PrivateEndpointConnectionsAdtAPIClientDeleteResponse{}
	resp, err := l.Poller.pt.PollUntilDone(ctx, freq, nil)
	if err != nil {
		return respType, err
	}
	respType.RawResponse = resp
	return respType, nil
}

// Resume rehydrates a PrivateEndpointConnectionsAdtAPIClientDeletePollerResponse from the provided client and resume token.
func (l *PrivateEndpointConnectionsAdtAPIClientDeletePollerResponse) Resume(ctx context.Context, client *PrivateEndpointConnectionsAdtAPIClient, token string) error {
	pt, err := armruntime.NewPollerFromResumeToken("PrivateEndpointConnectionsAdtAPIClient.Delete", token, client.pl)
	if err != nil {
		return err
	}
	poller := &PrivateEndpointConnectionsAdtAPIClientDeletePoller{
		pt: pt,
	}
	resp, err := poller.Poll(ctx)
	if err != nil {
		return err
	}
	l.Poller = poller
	l.RawResponse = resp
	return nil
}

// PrivateEndpointConnectionsAdtAPIClientDeleteResponse contains the response from method PrivateEndpointConnectionsAdtAPIClient.Delete.
type PrivateEndpointConnectionsAdtAPIClientDeleteResponse struct {
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// PrivateEndpointConnectionsAdtAPIClientGetResponse contains the response from method PrivateEndpointConnectionsAdtAPIClient.Get.
type PrivateEndpointConnectionsAdtAPIClientGetResponse struct {
	PrivateEndpointConnectionsAdtAPIClientGetResult
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// PrivateEndpointConnectionsAdtAPIClientGetResult contains the result from method PrivateEndpointConnectionsAdtAPIClient.Get.
type PrivateEndpointConnectionsAdtAPIClientGetResult struct {
	PrivateEndpointConnection
}

// PrivateEndpointConnectionsAdtAPIClientListByServiceResponse contains the response from method PrivateEndpointConnectionsAdtAPIClient.ListByService.
type PrivateEndpointConnectionsAdtAPIClientListByServiceResponse struct {
	PrivateEndpointConnectionsAdtAPIClientListByServiceResult
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// PrivateEndpointConnectionsAdtAPIClientListByServiceResult contains the result from method PrivateEndpointConnectionsAdtAPIClient.ListByService.
type PrivateEndpointConnectionsAdtAPIClientListByServiceResult struct {
	PrivateEndpointConnectionListResult
}

// PrivateEndpointConnectionsCompClientCreateOrUpdatePollerResponse contains the response from method PrivateEndpointConnectionsCompClient.CreateOrUpdate.
type PrivateEndpointConnectionsCompClientCreateOrUpdatePollerResponse struct {
	// Poller contains an initialized poller.
	Poller *PrivateEndpointConnectionsCompClientCreateOrUpdatePoller

	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// PollUntilDone will poll the service endpoint until a terminal state is reached or an error is received.
// freq: the time to wait between intervals in absence of a Retry-After header. Allowed minimum is one second.
// A good starting value is 30 seconds. Note that some resources might benefit from a different value.
func (l PrivateEndpointConnectionsCompClientCreateOrUpdatePollerResponse) PollUntilDone(ctx context.Context, freq time.Duration) (PrivateEndpointConnectionsCompClientCreateOrUpdateResponse, error) {
	respType := PrivateEndpointConnectionsCompClientCreateOrUpdateResponse{}
	resp, err := l.Poller.pt.PollUntilDone(ctx, freq, &respType.PrivateEndpointConnection)
	if err != nil {
		return respType, err
	}
	respType.RawResponse = resp
	return respType, nil
}

// Resume rehydrates a PrivateEndpointConnectionsCompClientCreateOrUpdatePollerResponse from the provided client and resume
// token.
func (l *PrivateEndpointConnectionsCompClientCreateOrUpdatePollerResponse) Resume(ctx context.Context, client *PrivateEndpointConnectionsCompClient, token string) error {
	pt, err := armruntime.NewPollerFromResumeToken("PrivateEndpointConnectionsCompClient.CreateOrUpdate", token, client.pl)
	if err != nil {
		return err
	}
	poller := &PrivateEndpointConnectionsCompClientCreateOrUpdatePoller{
		pt: pt,
	}
	resp, err := poller.Poll(ctx)
	if err != nil {
		return err
	}
	l.Poller = poller
	l.RawResponse = resp
	return nil
}

// PrivateEndpointConnectionsCompClientCreateOrUpdateResponse contains the response from method PrivateEndpointConnectionsCompClient.CreateOrUpdate.
type PrivateEndpointConnectionsCompClientCreateOrUpdateResponse struct {
	PrivateEndpointConnectionsCompClientCreateOrUpdateResult
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// PrivateEndpointConnectionsCompClientCreateOrUpdateResult contains the result from method PrivateEndpointConnectionsCompClient.CreateOrUpdate.
type PrivateEndpointConnectionsCompClientCreateOrUpdateResult struct {
	PrivateEndpointConnection
}

// PrivateEndpointConnectionsCompClientDeletePollerResponse contains the response from method PrivateEndpointConnectionsCompClient.Delete.
type PrivateEndpointConnectionsCompClientDeletePollerResponse struct {
	// Poller contains an initialized poller.
	Poller *PrivateEndpointConnectionsCompClientDeletePoller

	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// PollUntilDone will poll the service endpoint until a terminal state is reached or an error is received.
// freq: the time to wait between intervals in absence of a Retry-After header. Allowed minimum is one second.
// A good starting value is 30 seconds. Note that some resources might benefit from a different value.
func (l PrivateEndpointConnectionsCompClientDeletePollerResponse) PollUntilDone(ctx context.Context, freq time.Duration) (PrivateEndpointConnectionsCompClientDeleteResponse, error) {
	respType := PrivateEndpointConnectionsCompClientDeleteResponse{}
	resp, err := l.Poller.pt.PollUntilDone(ctx, freq, nil)
	if err != nil {
		return respType, err
	}
	respType.RawResponse = resp
	return respType, nil
}

// Resume rehydrates a PrivateEndpointConnectionsCompClientDeletePollerResponse from the provided client and resume token.
func (l *PrivateEndpointConnectionsCompClientDeletePollerResponse) Resume(ctx context.Context, client *PrivateEndpointConnectionsCompClient, token string) error {
	pt, err := armruntime.NewPollerFromResumeToken("PrivateEndpointConnectionsCompClient.Delete", token, client.pl)
	if err != nil {
		return err
	}
	poller := &PrivateEndpointConnectionsCompClientDeletePoller{
		pt: pt,
	}
	resp, err := poller.Poll(ctx)
	if err != nil {
		return err
	}
	l.Poller = poller
	l.RawResponse = resp
	return nil
}

// PrivateEndpointConnectionsCompClientDeleteResponse contains the response from method PrivateEndpointConnectionsCompClient.Delete.
type PrivateEndpointConnectionsCompClientDeleteResponse struct {
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// PrivateEndpointConnectionsCompClientGetResponse contains the response from method PrivateEndpointConnectionsCompClient.Get.
type PrivateEndpointConnectionsCompClientGetResponse struct {
	PrivateEndpointConnectionsCompClientGetResult
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// PrivateEndpointConnectionsCompClientGetResult contains the result from method PrivateEndpointConnectionsCompClient.Get.
type PrivateEndpointConnectionsCompClientGetResult struct {
	PrivateEndpointConnection
}

// PrivateEndpointConnectionsCompClientListByServiceResponse contains the response from method PrivateEndpointConnectionsCompClient.ListByService.
type PrivateEndpointConnectionsCompClientListByServiceResponse struct {
	PrivateEndpointConnectionsCompClientListByServiceResult
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// PrivateEndpointConnectionsCompClientListByServiceResult contains the result from method PrivateEndpointConnectionsCompClient.ListByService.
type PrivateEndpointConnectionsCompClientListByServiceResult struct {
	PrivateEndpointConnectionListResult
}

// PrivateEndpointConnectionsForEDMClientCreateOrUpdatePollerResponse contains the response from method PrivateEndpointConnectionsForEDMClient.CreateOrUpdate.
type PrivateEndpointConnectionsForEDMClientCreateOrUpdatePollerResponse struct {
	// Poller contains an initialized poller.
	Poller *PrivateEndpointConnectionsForEDMClientCreateOrUpdatePoller

	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// PollUntilDone will poll the service endpoint until a terminal state is reached or an error is received.
// freq: the time to wait between intervals in absence of a Retry-After header. Allowed minimum is one second.
// A good starting value is 30 seconds. Note that some resources might benefit from a different value.
func (l PrivateEndpointConnectionsForEDMClientCreateOrUpdatePollerResponse) PollUntilDone(ctx context.Context, freq time.Duration) (PrivateEndpointConnectionsForEDMClientCreateOrUpdateResponse, error) {
	respType := PrivateEndpointConnectionsForEDMClientCreateOrUpdateResponse{}
	resp, err := l.Poller.pt.PollUntilDone(ctx, freq, &respType.PrivateEndpointConnection)
	if err != nil {
		return respType, err
	}
	respType.RawResponse = resp
	return respType, nil
}

// Resume rehydrates a PrivateEndpointConnectionsForEDMClientCreateOrUpdatePollerResponse from the provided client and resume
// token.
func (l *PrivateEndpointConnectionsForEDMClientCreateOrUpdatePollerResponse) Resume(ctx context.Context, client *PrivateEndpointConnectionsForEDMClient, token string) error {
	pt, err := armruntime.NewPollerFromResumeToken("PrivateEndpointConnectionsForEDMClient.CreateOrUpdate", token, client.pl)
	if err != nil {
		return err
	}
	poller := &PrivateEndpointConnectionsForEDMClientCreateOrUpdatePoller{
		pt: pt,
	}
	resp, err := poller.Poll(ctx)
	if err != nil {
		return err
	}
	l.Poller = poller
	l.RawResponse = resp
	return nil
}

// PrivateEndpointConnectionsForEDMClientCreateOrUpdateResponse contains the response from method PrivateEndpointConnectionsForEDMClient.CreateOrUpdate.
type PrivateEndpointConnectionsForEDMClientCreateOrUpdateResponse struct {
	PrivateEndpointConnectionsForEDMClientCreateOrUpdateResult
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// PrivateEndpointConnectionsForEDMClientCreateOrUpdateResult contains the result from method PrivateEndpointConnectionsForEDMClient.CreateOrUpdate.
type PrivateEndpointConnectionsForEDMClientCreateOrUpdateResult struct {
	PrivateEndpointConnection
}

// PrivateEndpointConnectionsForEDMClientDeletePollerResponse contains the response from method PrivateEndpointConnectionsForEDMClient.Delete.
type PrivateEndpointConnectionsForEDMClientDeletePollerResponse struct {
	// Poller contains an initialized poller.
	Poller *PrivateEndpointConnectionsForEDMClientDeletePoller

	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// PollUntilDone will poll the service endpoint until a terminal state is reached or an error is received.
// freq: the time to wait between intervals in absence of a Retry-After header. Allowed minimum is one second.
// A good starting value is 30 seconds. Note that some resources might benefit from a different value.
func (l PrivateEndpointConnectionsForEDMClientDeletePollerResponse) PollUntilDone(ctx context.Context, freq time.Duration) (PrivateEndpointConnectionsForEDMClientDeleteResponse, error) {
	respType := PrivateEndpointConnectionsForEDMClientDeleteResponse{}
	resp, err := l.Poller.pt.PollUntilDone(ctx, freq, nil)
	if err != nil {
		return respType, err
	}
	respType.RawResponse = resp
	return respType, nil
}

// Resume rehydrates a PrivateEndpointConnectionsForEDMClientDeletePollerResponse from the provided client and resume token.
func (l *PrivateEndpointConnectionsForEDMClientDeletePollerResponse) Resume(ctx context.Context, client *PrivateEndpointConnectionsForEDMClient, token string) error {
	pt, err := armruntime.NewPollerFromResumeToken("PrivateEndpointConnectionsForEDMClient.Delete", token, client.pl)
	if err != nil {
		return err
	}
	poller := &PrivateEndpointConnectionsForEDMClientDeletePoller{
		pt: pt,
	}
	resp, err := poller.Poll(ctx)
	if err != nil {
		return err
	}
	l.Poller = poller
	l.RawResponse = resp
	return nil
}

// PrivateEndpointConnectionsForEDMClientDeleteResponse contains the response from method PrivateEndpointConnectionsForEDMClient.Delete.
type PrivateEndpointConnectionsForEDMClientDeleteResponse struct {
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// PrivateEndpointConnectionsForEDMClientGetResponse contains the response from method PrivateEndpointConnectionsForEDMClient.Get.
type PrivateEndpointConnectionsForEDMClientGetResponse struct {
	PrivateEndpointConnectionsForEDMClientGetResult
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// PrivateEndpointConnectionsForEDMClientGetResult contains the result from method PrivateEndpointConnectionsForEDMClient.Get.
type PrivateEndpointConnectionsForEDMClientGetResult struct {
	PrivateEndpointConnection
}

// PrivateEndpointConnectionsForEDMClientListByServiceResponse contains the response from method PrivateEndpointConnectionsForEDMClient.ListByService.
type PrivateEndpointConnectionsForEDMClientListByServiceResponse struct {
	PrivateEndpointConnectionsForEDMClientListByServiceResult
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// PrivateEndpointConnectionsForEDMClientListByServiceResult contains the result from method PrivateEndpointConnectionsForEDMClient.ListByService.
type PrivateEndpointConnectionsForEDMClientListByServiceResult struct {
	PrivateEndpointConnectionListResult
}

// PrivateEndpointConnectionsForMIPPolicySyncClientCreateOrUpdatePollerResponse contains the response from method PrivateEndpointConnectionsForMIPPolicySyncClient.CreateOrUpdate.
type PrivateEndpointConnectionsForMIPPolicySyncClientCreateOrUpdatePollerResponse struct {
	// Poller contains an initialized poller.
	Poller *PrivateEndpointConnectionsForMIPPolicySyncClientCreateOrUpdatePoller

	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// PollUntilDone will poll the service endpoint until a terminal state is reached or an error is received.
// freq: the time to wait between intervals in absence of a Retry-After header. Allowed minimum is one second.
// A good starting value is 30 seconds. Note that some resources might benefit from a different value.
func (l PrivateEndpointConnectionsForMIPPolicySyncClientCreateOrUpdatePollerResponse) PollUntilDone(ctx context.Context, freq time.Duration) (PrivateEndpointConnectionsForMIPPolicySyncClientCreateOrUpdateResponse, error) {
	respType := PrivateEndpointConnectionsForMIPPolicySyncClientCreateOrUpdateResponse{}
	resp, err := l.Poller.pt.PollUntilDone(ctx, freq, &respType.PrivateEndpointConnection)
	if err != nil {
		return respType, err
	}
	respType.RawResponse = resp
	return respType, nil
}

// Resume rehydrates a PrivateEndpointConnectionsForMIPPolicySyncClientCreateOrUpdatePollerResponse from the provided client
// and resume token.
func (l *PrivateEndpointConnectionsForMIPPolicySyncClientCreateOrUpdatePollerResponse) Resume(ctx context.Context, client *PrivateEndpointConnectionsForMIPPolicySyncClient, token string) error {
	pt, err := armruntime.NewPollerFromResumeToken("PrivateEndpointConnectionsForMIPPolicySyncClient.CreateOrUpdate", token, client.pl)
	if err != nil {
		return err
	}
	poller := &PrivateEndpointConnectionsForMIPPolicySyncClientCreateOrUpdatePoller{
		pt: pt,
	}
	resp, err := poller.Poll(ctx)
	if err != nil {
		return err
	}
	l.Poller = poller
	l.RawResponse = resp
	return nil
}

// PrivateEndpointConnectionsForMIPPolicySyncClientCreateOrUpdateResponse contains the response from method PrivateEndpointConnectionsForMIPPolicySyncClient.CreateOrUpdate.
type PrivateEndpointConnectionsForMIPPolicySyncClientCreateOrUpdateResponse struct {
	PrivateEndpointConnectionsForMIPPolicySyncClientCreateOrUpdateResult
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// PrivateEndpointConnectionsForMIPPolicySyncClientCreateOrUpdateResult contains the result from method PrivateEndpointConnectionsForMIPPolicySyncClient.CreateOrUpdate.
type PrivateEndpointConnectionsForMIPPolicySyncClientCreateOrUpdateResult struct {
	PrivateEndpointConnection
}

// PrivateEndpointConnectionsForMIPPolicySyncClientDeletePollerResponse contains the response from method PrivateEndpointConnectionsForMIPPolicySyncClient.Delete.
type PrivateEndpointConnectionsForMIPPolicySyncClientDeletePollerResponse struct {
	// Poller contains an initialized poller.
	Poller *PrivateEndpointConnectionsForMIPPolicySyncClientDeletePoller

	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// PollUntilDone will poll the service endpoint until a terminal state is reached or an error is received.
// freq: the time to wait between intervals in absence of a Retry-After header. Allowed minimum is one second.
// A good starting value is 30 seconds. Note that some resources might benefit from a different value.
func (l PrivateEndpointConnectionsForMIPPolicySyncClientDeletePollerResponse) PollUntilDone(ctx context.Context, freq time.Duration) (PrivateEndpointConnectionsForMIPPolicySyncClientDeleteResponse, error) {
	respType := PrivateEndpointConnectionsForMIPPolicySyncClientDeleteResponse{}
	resp, err := l.Poller.pt.PollUntilDone(ctx, freq, nil)
	if err != nil {
		return respType, err
	}
	respType.RawResponse = resp
	return respType, nil
}

// Resume rehydrates a PrivateEndpointConnectionsForMIPPolicySyncClientDeletePollerResponse from the provided client and resume
// token.
func (l *PrivateEndpointConnectionsForMIPPolicySyncClientDeletePollerResponse) Resume(ctx context.Context, client *PrivateEndpointConnectionsForMIPPolicySyncClient, token string) error {
	pt, err := armruntime.NewPollerFromResumeToken("PrivateEndpointConnectionsForMIPPolicySyncClient.Delete", token, client.pl)
	if err != nil {
		return err
	}
	poller := &PrivateEndpointConnectionsForMIPPolicySyncClientDeletePoller{
		pt: pt,
	}
	resp, err := poller.Poll(ctx)
	if err != nil {
		return err
	}
	l.Poller = poller
	l.RawResponse = resp
	return nil
}

// PrivateEndpointConnectionsForMIPPolicySyncClientDeleteResponse contains the response from method PrivateEndpointConnectionsForMIPPolicySyncClient.Delete.
type PrivateEndpointConnectionsForMIPPolicySyncClientDeleteResponse struct {
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// PrivateEndpointConnectionsForMIPPolicySyncClientGetResponse contains the response from method PrivateEndpointConnectionsForMIPPolicySyncClient.Get.
type PrivateEndpointConnectionsForMIPPolicySyncClientGetResponse struct {
	PrivateEndpointConnectionsForMIPPolicySyncClientGetResult
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// PrivateEndpointConnectionsForMIPPolicySyncClientGetResult contains the result from method PrivateEndpointConnectionsForMIPPolicySyncClient.Get.
type PrivateEndpointConnectionsForMIPPolicySyncClientGetResult struct {
	PrivateEndpointConnection
}

// PrivateEndpointConnectionsForMIPPolicySyncClientListByServiceResponse contains the response from method PrivateEndpointConnectionsForMIPPolicySyncClient.ListByService.
type PrivateEndpointConnectionsForMIPPolicySyncClientListByServiceResponse struct {
	PrivateEndpointConnectionsForMIPPolicySyncClientListByServiceResult
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// PrivateEndpointConnectionsForMIPPolicySyncClientListByServiceResult contains the result from method PrivateEndpointConnectionsForMIPPolicySyncClient.ListByService.
type PrivateEndpointConnectionsForMIPPolicySyncClientListByServiceResult struct {
	PrivateEndpointConnectionListResult
}

// PrivateEndpointConnectionsForSCCPowershellClientCreateOrUpdatePollerResponse contains the response from method PrivateEndpointConnectionsForSCCPowershellClient.CreateOrUpdate.
type PrivateEndpointConnectionsForSCCPowershellClientCreateOrUpdatePollerResponse struct {
	// Poller contains an initialized poller.
	Poller *PrivateEndpointConnectionsForSCCPowershellClientCreateOrUpdatePoller

	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// PollUntilDone will poll the service endpoint until a terminal state is reached or an error is received.
// freq: the time to wait between intervals in absence of a Retry-After header. Allowed minimum is one second.
// A good starting value is 30 seconds. Note that some resources might benefit from a different value.
func (l PrivateEndpointConnectionsForSCCPowershellClientCreateOrUpdatePollerResponse) PollUntilDone(ctx context.Context, freq time.Duration) (PrivateEndpointConnectionsForSCCPowershellClientCreateOrUpdateResponse, error) {
	respType := PrivateEndpointConnectionsForSCCPowershellClientCreateOrUpdateResponse{}
	resp, err := l.Poller.pt.PollUntilDone(ctx, freq, &respType.PrivateEndpointConnection)
	if err != nil {
		return respType, err
	}
	respType.RawResponse = resp
	return respType, nil
}

// Resume rehydrates a PrivateEndpointConnectionsForSCCPowershellClientCreateOrUpdatePollerResponse from the provided client
// and resume token.
func (l *PrivateEndpointConnectionsForSCCPowershellClientCreateOrUpdatePollerResponse) Resume(ctx context.Context, client *PrivateEndpointConnectionsForSCCPowershellClient, token string) error {
	pt, err := armruntime.NewPollerFromResumeToken("PrivateEndpointConnectionsForSCCPowershellClient.CreateOrUpdate", token, client.pl)
	if err != nil {
		return err
	}
	poller := &PrivateEndpointConnectionsForSCCPowershellClientCreateOrUpdatePoller{
		pt: pt,
	}
	resp, err := poller.Poll(ctx)
	if err != nil {
		return err
	}
	l.Poller = poller
	l.RawResponse = resp
	return nil
}

// PrivateEndpointConnectionsForSCCPowershellClientCreateOrUpdateResponse contains the response from method PrivateEndpointConnectionsForSCCPowershellClient.CreateOrUpdate.
type PrivateEndpointConnectionsForSCCPowershellClientCreateOrUpdateResponse struct {
	PrivateEndpointConnectionsForSCCPowershellClientCreateOrUpdateResult
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// PrivateEndpointConnectionsForSCCPowershellClientCreateOrUpdateResult contains the result from method PrivateEndpointConnectionsForSCCPowershellClient.CreateOrUpdate.
type PrivateEndpointConnectionsForSCCPowershellClientCreateOrUpdateResult struct {
	PrivateEndpointConnection
}

// PrivateEndpointConnectionsForSCCPowershellClientDeletePollerResponse contains the response from method PrivateEndpointConnectionsForSCCPowershellClient.Delete.
type PrivateEndpointConnectionsForSCCPowershellClientDeletePollerResponse struct {
	// Poller contains an initialized poller.
	Poller *PrivateEndpointConnectionsForSCCPowershellClientDeletePoller

	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// PollUntilDone will poll the service endpoint until a terminal state is reached or an error is received.
// freq: the time to wait between intervals in absence of a Retry-After header. Allowed minimum is one second.
// A good starting value is 30 seconds. Note that some resources might benefit from a different value.
func (l PrivateEndpointConnectionsForSCCPowershellClientDeletePollerResponse) PollUntilDone(ctx context.Context, freq time.Duration) (PrivateEndpointConnectionsForSCCPowershellClientDeleteResponse, error) {
	respType := PrivateEndpointConnectionsForSCCPowershellClientDeleteResponse{}
	resp, err := l.Poller.pt.PollUntilDone(ctx, freq, nil)
	if err != nil {
		return respType, err
	}
	respType.RawResponse = resp
	return respType, nil
}

// Resume rehydrates a PrivateEndpointConnectionsForSCCPowershellClientDeletePollerResponse from the provided client and resume
// token.
func (l *PrivateEndpointConnectionsForSCCPowershellClientDeletePollerResponse) Resume(ctx context.Context, client *PrivateEndpointConnectionsForSCCPowershellClient, token string) error {
	pt, err := armruntime.NewPollerFromResumeToken("PrivateEndpointConnectionsForSCCPowershellClient.Delete", token, client.pl)
	if err != nil {
		return err
	}
	poller := &PrivateEndpointConnectionsForSCCPowershellClientDeletePoller{
		pt: pt,
	}
	resp, err := poller.Poll(ctx)
	if err != nil {
		return err
	}
	l.Poller = poller
	l.RawResponse = resp
	return nil
}

// PrivateEndpointConnectionsForSCCPowershellClientDeleteResponse contains the response from method PrivateEndpointConnectionsForSCCPowershellClient.Delete.
type PrivateEndpointConnectionsForSCCPowershellClientDeleteResponse struct {
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// PrivateEndpointConnectionsForSCCPowershellClientGetResponse contains the response from method PrivateEndpointConnectionsForSCCPowershellClient.Get.
type PrivateEndpointConnectionsForSCCPowershellClientGetResponse struct {
	PrivateEndpointConnectionsForSCCPowershellClientGetResult
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// PrivateEndpointConnectionsForSCCPowershellClientGetResult contains the result from method PrivateEndpointConnectionsForSCCPowershellClient.Get.
type PrivateEndpointConnectionsForSCCPowershellClientGetResult struct {
	PrivateEndpointConnection
}

// PrivateEndpointConnectionsForSCCPowershellClientListByServiceResponse contains the response from method PrivateEndpointConnectionsForSCCPowershellClient.ListByService.
type PrivateEndpointConnectionsForSCCPowershellClientListByServiceResponse struct {
	PrivateEndpointConnectionsForSCCPowershellClientListByServiceResult
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// PrivateEndpointConnectionsForSCCPowershellClientListByServiceResult contains the result from method PrivateEndpointConnectionsForSCCPowershellClient.ListByService.
type PrivateEndpointConnectionsForSCCPowershellClientListByServiceResult struct {
	PrivateEndpointConnectionListResult
}

// PrivateEndpointConnectionsSecClientCreateOrUpdatePollerResponse contains the response from method PrivateEndpointConnectionsSecClient.CreateOrUpdate.
type PrivateEndpointConnectionsSecClientCreateOrUpdatePollerResponse struct {
	// Poller contains an initialized poller.
	Poller *PrivateEndpointConnectionsSecClientCreateOrUpdatePoller

	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// PollUntilDone will poll the service endpoint until a terminal state is reached or an error is received.
// freq: the time to wait between intervals in absence of a Retry-After header. Allowed minimum is one second.
// A good starting value is 30 seconds. Note that some resources might benefit from a different value.
func (l PrivateEndpointConnectionsSecClientCreateOrUpdatePollerResponse) PollUntilDone(ctx context.Context, freq time.Duration) (PrivateEndpointConnectionsSecClientCreateOrUpdateResponse, error) {
	respType := PrivateEndpointConnectionsSecClientCreateOrUpdateResponse{}
	resp, err := l.Poller.pt.PollUntilDone(ctx, freq, &respType.PrivateEndpointConnection)
	if err != nil {
		return respType, err
	}
	respType.RawResponse = resp
	return respType, nil
}

// Resume rehydrates a PrivateEndpointConnectionsSecClientCreateOrUpdatePollerResponse from the provided client and resume
// token.
func (l *PrivateEndpointConnectionsSecClientCreateOrUpdatePollerResponse) Resume(ctx context.Context, client *PrivateEndpointConnectionsSecClient, token string) error {
	pt, err := armruntime.NewPollerFromResumeToken("PrivateEndpointConnectionsSecClient.CreateOrUpdate", token, client.pl)
	if err != nil {
		return err
	}
	poller := &PrivateEndpointConnectionsSecClientCreateOrUpdatePoller{
		pt: pt,
	}
	resp, err := poller.Poll(ctx)
	if err != nil {
		return err
	}
	l.Poller = poller
	l.RawResponse = resp
	return nil
}

// PrivateEndpointConnectionsSecClientCreateOrUpdateResponse contains the response from method PrivateEndpointConnectionsSecClient.CreateOrUpdate.
type PrivateEndpointConnectionsSecClientCreateOrUpdateResponse struct {
	PrivateEndpointConnectionsSecClientCreateOrUpdateResult
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// PrivateEndpointConnectionsSecClientCreateOrUpdateResult contains the result from method PrivateEndpointConnectionsSecClient.CreateOrUpdate.
type PrivateEndpointConnectionsSecClientCreateOrUpdateResult struct {
	PrivateEndpointConnection
}

// PrivateEndpointConnectionsSecClientDeletePollerResponse contains the response from method PrivateEndpointConnectionsSecClient.Delete.
type PrivateEndpointConnectionsSecClientDeletePollerResponse struct {
	// Poller contains an initialized poller.
	Poller *PrivateEndpointConnectionsSecClientDeletePoller

	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// PollUntilDone will poll the service endpoint until a terminal state is reached or an error is received.
// freq: the time to wait between intervals in absence of a Retry-After header. Allowed minimum is one second.
// A good starting value is 30 seconds. Note that some resources might benefit from a different value.
func (l PrivateEndpointConnectionsSecClientDeletePollerResponse) PollUntilDone(ctx context.Context, freq time.Duration) (PrivateEndpointConnectionsSecClientDeleteResponse, error) {
	respType := PrivateEndpointConnectionsSecClientDeleteResponse{}
	resp, err := l.Poller.pt.PollUntilDone(ctx, freq, nil)
	if err != nil {
		return respType, err
	}
	respType.RawResponse = resp
	return respType, nil
}

// Resume rehydrates a PrivateEndpointConnectionsSecClientDeletePollerResponse from the provided client and resume token.
func (l *PrivateEndpointConnectionsSecClientDeletePollerResponse) Resume(ctx context.Context, client *PrivateEndpointConnectionsSecClient, token string) error {
	pt, err := armruntime.NewPollerFromResumeToken("PrivateEndpointConnectionsSecClient.Delete", token, client.pl)
	if err != nil {
		return err
	}
	poller := &PrivateEndpointConnectionsSecClientDeletePoller{
		pt: pt,
	}
	resp, err := poller.Poll(ctx)
	if err != nil {
		return err
	}
	l.Poller = poller
	l.RawResponse = resp
	return nil
}

// PrivateEndpointConnectionsSecClientDeleteResponse contains the response from method PrivateEndpointConnectionsSecClient.Delete.
type PrivateEndpointConnectionsSecClientDeleteResponse struct {
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// PrivateEndpointConnectionsSecClientGetResponse contains the response from method PrivateEndpointConnectionsSecClient.Get.
type PrivateEndpointConnectionsSecClientGetResponse struct {
	PrivateEndpointConnectionsSecClientGetResult
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// PrivateEndpointConnectionsSecClientGetResult contains the result from method PrivateEndpointConnectionsSecClient.Get.
type PrivateEndpointConnectionsSecClientGetResult struct {
	PrivateEndpointConnection
}

// PrivateEndpointConnectionsSecClientListByServiceResponse contains the response from method PrivateEndpointConnectionsSecClient.ListByService.
type PrivateEndpointConnectionsSecClientListByServiceResponse struct {
	PrivateEndpointConnectionsSecClientListByServiceResult
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// PrivateEndpointConnectionsSecClientListByServiceResult contains the result from method PrivateEndpointConnectionsSecClient.ListByService.
type PrivateEndpointConnectionsSecClientListByServiceResult struct {
	PrivateEndpointConnectionListResult
}

// PrivateLinkResourcesAdtAPIClientGetResponse contains the response from method PrivateLinkResourcesAdtAPIClient.Get.
type PrivateLinkResourcesAdtAPIClientGetResponse struct {
	PrivateLinkResourcesAdtAPIClientGetResult
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// PrivateLinkResourcesAdtAPIClientGetResult contains the result from method PrivateLinkResourcesAdtAPIClient.Get.
type PrivateLinkResourcesAdtAPIClientGetResult struct {
	PrivateLinkResource
}

// PrivateLinkResourcesAdtAPIClientListByServiceResponse contains the response from method PrivateLinkResourcesAdtAPIClient.ListByService.
type PrivateLinkResourcesAdtAPIClientListByServiceResponse struct {
	PrivateLinkResourcesAdtAPIClientListByServiceResult
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// PrivateLinkResourcesAdtAPIClientListByServiceResult contains the result from method PrivateLinkResourcesAdtAPIClient.ListByService.
type PrivateLinkResourcesAdtAPIClientListByServiceResult struct {
	PrivateLinkResourceListResult
}

// PrivateLinkResourcesClientGetResponse contains the response from method PrivateLinkResourcesClient.Get.
type PrivateLinkResourcesClientGetResponse struct {
	PrivateLinkResourcesClientGetResult
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// PrivateLinkResourcesClientGetResult contains the result from method PrivateLinkResourcesClient.Get.
type PrivateLinkResourcesClientGetResult struct {
	PrivateLinkResource
}

// PrivateLinkResourcesClientListByServiceResponse contains the response from method PrivateLinkResourcesClient.ListByService.
type PrivateLinkResourcesClientListByServiceResponse struct {
	PrivateLinkResourcesClientListByServiceResult
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// PrivateLinkResourcesClientListByServiceResult contains the result from method PrivateLinkResourcesClient.ListByService.
type PrivateLinkResourcesClientListByServiceResult struct {
	PrivateLinkResourceListResult
}

// PrivateLinkResourcesCompClientGetResponse contains the response from method PrivateLinkResourcesCompClient.Get.
type PrivateLinkResourcesCompClientGetResponse struct {
	PrivateLinkResourcesCompClientGetResult
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// PrivateLinkResourcesCompClientGetResult contains the result from method PrivateLinkResourcesCompClient.Get.
type PrivateLinkResourcesCompClientGetResult struct {
	PrivateLinkResource
}

// PrivateLinkResourcesCompClientListByServiceResponse contains the response from method PrivateLinkResourcesCompClient.ListByService.
type PrivateLinkResourcesCompClientListByServiceResponse struct {
	PrivateLinkResourcesCompClientListByServiceResult
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// PrivateLinkResourcesCompClientListByServiceResult contains the result from method PrivateLinkResourcesCompClient.ListByService.
type PrivateLinkResourcesCompClientListByServiceResult struct {
	PrivateLinkResourceListResult
}

// PrivateLinkResourcesForMIPPolicySyncClientGetResponse contains the response from method PrivateLinkResourcesForMIPPolicySyncClient.Get.
type PrivateLinkResourcesForMIPPolicySyncClientGetResponse struct {
	PrivateLinkResourcesForMIPPolicySyncClientGetResult
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// PrivateLinkResourcesForMIPPolicySyncClientGetResult contains the result from method PrivateLinkResourcesForMIPPolicySyncClient.Get.
type PrivateLinkResourcesForMIPPolicySyncClientGetResult struct {
	PrivateLinkResource
}

// PrivateLinkResourcesForMIPPolicySyncClientListByServiceResponse contains the response from method PrivateLinkResourcesForMIPPolicySyncClient.ListByService.
type PrivateLinkResourcesForMIPPolicySyncClientListByServiceResponse struct {
	PrivateLinkResourcesForMIPPolicySyncClientListByServiceResult
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// PrivateLinkResourcesForMIPPolicySyncClientListByServiceResult contains the result from method PrivateLinkResourcesForMIPPolicySyncClient.ListByService.
type PrivateLinkResourcesForMIPPolicySyncClientListByServiceResult struct {
	PrivateLinkResourceListResult
}

// PrivateLinkResourcesForSCCPowershellClientGetResponse contains the response from method PrivateLinkResourcesForSCCPowershellClient.Get.
type PrivateLinkResourcesForSCCPowershellClientGetResponse struct {
	PrivateLinkResourcesForSCCPowershellClientGetResult
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// PrivateLinkResourcesForSCCPowershellClientGetResult contains the result from method PrivateLinkResourcesForSCCPowershellClient.Get.
type PrivateLinkResourcesForSCCPowershellClientGetResult struct {
	PrivateLinkResource
}

// PrivateLinkResourcesForSCCPowershellClientListByServiceResponse contains the response from method PrivateLinkResourcesForSCCPowershellClient.ListByService.
type PrivateLinkResourcesForSCCPowershellClientListByServiceResponse struct {
	PrivateLinkResourcesForSCCPowershellClientListByServiceResult
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// PrivateLinkResourcesForSCCPowershellClientListByServiceResult contains the result from method PrivateLinkResourcesForSCCPowershellClient.ListByService.
type PrivateLinkResourcesForSCCPowershellClientListByServiceResult struct {
	PrivateLinkResourceListResult
}

// PrivateLinkResourcesSecClientGetResponse contains the response from method PrivateLinkResourcesSecClient.Get.
type PrivateLinkResourcesSecClientGetResponse struct {
	PrivateLinkResourcesSecClientGetResult
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// PrivateLinkResourcesSecClientGetResult contains the result from method PrivateLinkResourcesSecClient.Get.
type PrivateLinkResourcesSecClientGetResult struct {
	PrivateLinkResource
}

// PrivateLinkResourcesSecClientListByServiceResponse contains the response from method PrivateLinkResourcesSecClient.ListByService.
type PrivateLinkResourcesSecClientListByServiceResponse struct {
	PrivateLinkResourcesSecClientListByServiceResult
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// PrivateLinkResourcesSecClientListByServiceResult contains the result from method PrivateLinkResourcesSecClient.ListByService.
type PrivateLinkResourcesSecClientListByServiceResult struct {
	PrivateLinkResourceListResult
}

// PrivateLinkServicesForEDMUploadClientCreateOrUpdatePollerResponse contains the response from method PrivateLinkServicesForEDMUploadClient.CreateOrUpdate.
type PrivateLinkServicesForEDMUploadClientCreateOrUpdatePollerResponse struct {
	// Poller contains an initialized poller.
	Poller *PrivateLinkServicesForEDMUploadClientCreateOrUpdatePoller

	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// PollUntilDone will poll the service endpoint until a terminal state is reached or an error is received.
// freq: the time to wait between intervals in absence of a Retry-After header. Allowed minimum is one second.
// A good starting value is 30 seconds. Note that some resources might benefit from a different value.
func (l PrivateLinkServicesForEDMUploadClientCreateOrUpdatePollerResponse) PollUntilDone(ctx context.Context, freq time.Duration) (PrivateLinkServicesForEDMUploadClientCreateOrUpdateResponse, error) {
	respType := PrivateLinkServicesForEDMUploadClientCreateOrUpdateResponse{}
	resp, err := l.Poller.pt.PollUntilDone(ctx, freq, &respType.PrivateLinkServicesForEDMUploadDescription)
	if err != nil {
		return respType, err
	}
	respType.RawResponse = resp
	return respType, nil
}

// Resume rehydrates a PrivateLinkServicesForEDMUploadClientCreateOrUpdatePollerResponse from the provided client and resume
// token.
func (l *PrivateLinkServicesForEDMUploadClientCreateOrUpdatePollerResponse) Resume(ctx context.Context, client *PrivateLinkServicesForEDMUploadClient, token string) error {
	pt, err := armruntime.NewPollerFromResumeToken("PrivateLinkServicesForEDMUploadClient.CreateOrUpdate", token, client.pl)
	if err != nil {
		return err
	}
	poller := &PrivateLinkServicesForEDMUploadClientCreateOrUpdatePoller{
		pt: pt,
	}
	resp, err := poller.Poll(ctx)
	if err != nil {
		return err
	}
	l.Poller = poller
	l.RawResponse = resp
	return nil
}

// PrivateLinkServicesForEDMUploadClientCreateOrUpdateResponse contains the response from method PrivateLinkServicesForEDMUploadClient.CreateOrUpdate.
type PrivateLinkServicesForEDMUploadClientCreateOrUpdateResponse struct {
	PrivateLinkServicesForEDMUploadClientCreateOrUpdateResult
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// PrivateLinkServicesForEDMUploadClientCreateOrUpdateResult contains the result from method PrivateLinkServicesForEDMUploadClient.CreateOrUpdate.
type PrivateLinkServicesForEDMUploadClientCreateOrUpdateResult struct {
	PrivateLinkServicesForEDMUploadDescription
}

// PrivateLinkServicesForEDMUploadClientGetResponse contains the response from method PrivateLinkServicesForEDMUploadClient.Get.
type PrivateLinkServicesForEDMUploadClientGetResponse struct {
	PrivateLinkServicesForEDMUploadClientGetResult
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// PrivateLinkServicesForEDMUploadClientGetResult contains the result from method PrivateLinkServicesForEDMUploadClient.Get.
type PrivateLinkServicesForEDMUploadClientGetResult struct {
	PrivateLinkServicesForEDMUploadDescription
}

// PrivateLinkServicesForEDMUploadClientListByResourceGroupResponse contains the response from method PrivateLinkServicesForEDMUploadClient.ListByResourceGroup.
type PrivateLinkServicesForEDMUploadClientListByResourceGroupResponse struct {
	PrivateLinkServicesForEDMUploadClientListByResourceGroupResult
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// PrivateLinkServicesForEDMUploadClientListByResourceGroupResult contains the result from method PrivateLinkServicesForEDMUploadClient.ListByResourceGroup.
type PrivateLinkServicesForEDMUploadClientListByResourceGroupResult struct {
	PrivateLinkServicesForEDMUploadDescriptionListResult
}

// PrivateLinkServicesForEDMUploadClientListResponse contains the response from method PrivateLinkServicesForEDMUploadClient.List.
type PrivateLinkServicesForEDMUploadClientListResponse struct {
	PrivateLinkServicesForEDMUploadClientListResult
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// PrivateLinkServicesForEDMUploadClientListResult contains the result from method PrivateLinkServicesForEDMUploadClient.List.
type PrivateLinkServicesForEDMUploadClientListResult struct {
	PrivateLinkServicesForEDMUploadDescriptionListResult
}

// PrivateLinkServicesForEDMUploadClientUpdatePollerResponse contains the response from method PrivateLinkServicesForEDMUploadClient.Update.
type PrivateLinkServicesForEDMUploadClientUpdatePollerResponse struct {
	// Poller contains an initialized poller.
	Poller *PrivateLinkServicesForEDMUploadClientUpdatePoller

	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// PollUntilDone will poll the service endpoint until a terminal state is reached or an error is received.
// freq: the time to wait between intervals in absence of a Retry-After header. Allowed minimum is one second.
// A good starting value is 30 seconds. Note that some resources might benefit from a different value.
func (l PrivateLinkServicesForEDMUploadClientUpdatePollerResponse) PollUntilDone(ctx context.Context, freq time.Duration) (PrivateLinkServicesForEDMUploadClientUpdateResponse, error) {
	respType := PrivateLinkServicesForEDMUploadClientUpdateResponse{}
	resp, err := l.Poller.pt.PollUntilDone(ctx, freq, &respType.PrivateLinkServicesForEDMUploadDescription)
	if err != nil {
		return respType, err
	}
	respType.RawResponse = resp
	return respType, nil
}

// Resume rehydrates a PrivateLinkServicesForEDMUploadClientUpdatePollerResponse from the provided client and resume token.
func (l *PrivateLinkServicesForEDMUploadClientUpdatePollerResponse) Resume(ctx context.Context, client *PrivateLinkServicesForEDMUploadClient, token string) error {
	pt, err := armruntime.NewPollerFromResumeToken("PrivateLinkServicesForEDMUploadClient.Update", token, client.pl)
	if err != nil {
		return err
	}
	poller := &PrivateLinkServicesForEDMUploadClientUpdatePoller{
		pt: pt,
	}
	resp, err := poller.Poll(ctx)
	if err != nil {
		return err
	}
	l.Poller = poller
	l.RawResponse = resp
	return nil
}

// PrivateLinkServicesForEDMUploadClientUpdateResponse contains the response from method PrivateLinkServicesForEDMUploadClient.Update.
type PrivateLinkServicesForEDMUploadClientUpdateResponse struct {
	PrivateLinkServicesForEDMUploadClientUpdateResult
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// PrivateLinkServicesForEDMUploadClientUpdateResult contains the result from method PrivateLinkServicesForEDMUploadClient.Update.
type PrivateLinkServicesForEDMUploadClientUpdateResult struct {
	PrivateLinkServicesForEDMUploadDescription
}

// PrivateLinkServicesForM365ComplianceCenterClientCreateOrUpdatePollerResponse contains the response from method PrivateLinkServicesForM365ComplianceCenterClient.CreateOrUpdate.
type PrivateLinkServicesForM365ComplianceCenterClientCreateOrUpdatePollerResponse struct {
	// Poller contains an initialized poller.
	Poller *PrivateLinkServicesForM365ComplianceCenterClientCreateOrUpdatePoller

	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// PollUntilDone will poll the service endpoint until a terminal state is reached or an error is received.
// freq: the time to wait between intervals in absence of a Retry-After header. Allowed minimum is one second.
// A good starting value is 30 seconds. Note that some resources might benefit from a different value.
func (l PrivateLinkServicesForM365ComplianceCenterClientCreateOrUpdatePollerResponse) PollUntilDone(ctx context.Context, freq time.Duration) (PrivateLinkServicesForM365ComplianceCenterClientCreateOrUpdateResponse, error) {
	respType := PrivateLinkServicesForM365ComplianceCenterClientCreateOrUpdateResponse{}
	resp, err := l.Poller.pt.PollUntilDone(ctx, freq, &respType.PrivateLinkServicesForM365ComplianceCenterDescription)
	if err != nil {
		return respType, err
	}
	respType.RawResponse = resp
	return respType, nil
}

// Resume rehydrates a PrivateLinkServicesForM365ComplianceCenterClientCreateOrUpdatePollerResponse from the provided client
// and resume token.
func (l *PrivateLinkServicesForM365ComplianceCenterClientCreateOrUpdatePollerResponse) Resume(ctx context.Context, client *PrivateLinkServicesForM365ComplianceCenterClient, token string) error {
	pt, err := armruntime.NewPollerFromResumeToken("PrivateLinkServicesForM365ComplianceCenterClient.CreateOrUpdate", token, client.pl)
	if err != nil {
		return err
	}
	poller := &PrivateLinkServicesForM365ComplianceCenterClientCreateOrUpdatePoller{
		pt: pt,
	}
	resp, err := poller.Poll(ctx)
	if err != nil {
		return err
	}
	l.Poller = poller
	l.RawResponse = resp
	return nil
}

// PrivateLinkServicesForM365ComplianceCenterClientCreateOrUpdateResponse contains the response from method PrivateLinkServicesForM365ComplianceCenterClient.CreateOrUpdate.
type PrivateLinkServicesForM365ComplianceCenterClientCreateOrUpdateResponse struct {
	PrivateLinkServicesForM365ComplianceCenterClientCreateOrUpdateResult
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// PrivateLinkServicesForM365ComplianceCenterClientCreateOrUpdateResult contains the result from method PrivateLinkServicesForM365ComplianceCenterClient.CreateOrUpdate.
type PrivateLinkServicesForM365ComplianceCenterClientCreateOrUpdateResult struct {
	PrivateLinkServicesForM365ComplianceCenterDescription
}

// PrivateLinkServicesForM365ComplianceCenterClientDeletePollerResponse contains the response from method PrivateLinkServicesForM365ComplianceCenterClient.Delete.
type PrivateLinkServicesForM365ComplianceCenterClientDeletePollerResponse struct {
	// Poller contains an initialized poller.
	Poller *PrivateLinkServicesForM365ComplianceCenterClientDeletePoller

	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// PollUntilDone will poll the service endpoint until a terminal state is reached or an error is received.
// freq: the time to wait between intervals in absence of a Retry-After header. Allowed minimum is one second.
// A good starting value is 30 seconds. Note that some resources might benefit from a different value.
func (l PrivateLinkServicesForM365ComplianceCenterClientDeletePollerResponse) PollUntilDone(ctx context.Context, freq time.Duration) (PrivateLinkServicesForM365ComplianceCenterClientDeleteResponse, error) {
	respType := PrivateLinkServicesForM365ComplianceCenterClientDeleteResponse{}
	resp, err := l.Poller.pt.PollUntilDone(ctx, freq, nil)
	if err != nil {
		return respType, err
	}
	respType.RawResponse = resp
	return respType, nil
}

// Resume rehydrates a PrivateLinkServicesForM365ComplianceCenterClientDeletePollerResponse from the provided client and resume
// token.
func (l *PrivateLinkServicesForM365ComplianceCenterClientDeletePollerResponse) Resume(ctx context.Context, client *PrivateLinkServicesForM365ComplianceCenterClient, token string) error {
	pt, err := armruntime.NewPollerFromResumeToken("PrivateLinkServicesForM365ComplianceCenterClient.Delete", token, client.pl)
	if err != nil {
		return err
	}
	poller := &PrivateLinkServicesForM365ComplianceCenterClientDeletePoller{
		pt: pt,
	}
	resp, err := poller.Poll(ctx)
	if err != nil {
		return err
	}
	l.Poller = poller
	l.RawResponse = resp
	return nil
}

// PrivateLinkServicesForM365ComplianceCenterClientDeleteResponse contains the response from method PrivateLinkServicesForM365ComplianceCenterClient.Delete.
type PrivateLinkServicesForM365ComplianceCenterClientDeleteResponse struct {
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// PrivateLinkServicesForM365ComplianceCenterClientGetResponse contains the response from method PrivateLinkServicesForM365ComplianceCenterClient.Get.
type PrivateLinkServicesForM365ComplianceCenterClientGetResponse struct {
	PrivateLinkServicesForM365ComplianceCenterClientGetResult
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// PrivateLinkServicesForM365ComplianceCenterClientGetResult contains the result from method PrivateLinkServicesForM365ComplianceCenterClient.Get.
type PrivateLinkServicesForM365ComplianceCenterClientGetResult struct {
	PrivateLinkServicesForM365ComplianceCenterDescription
}

// PrivateLinkServicesForM365ComplianceCenterClientListByResourceGroupResponse contains the response from method PrivateLinkServicesForM365ComplianceCenterClient.ListByResourceGroup.
type PrivateLinkServicesForM365ComplianceCenterClientListByResourceGroupResponse struct {
	PrivateLinkServicesForM365ComplianceCenterClientListByResourceGroupResult
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// PrivateLinkServicesForM365ComplianceCenterClientListByResourceGroupResult contains the result from method PrivateLinkServicesForM365ComplianceCenterClient.ListByResourceGroup.
type PrivateLinkServicesForM365ComplianceCenterClientListByResourceGroupResult struct {
	PrivateLinkServicesForM365ComplianceCenterDescriptionListResult
}

// PrivateLinkServicesForM365ComplianceCenterClientListResponse contains the response from method PrivateLinkServicesForM365ComplianceCenterClient.List.
type PrivateLinkServicesForM365ComplianceCenterClientListResponse struct {
	PrivateLinkServicesForM365ComplianceCenterClientListResult
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// PrivateLinkServicesForM365ComplianceCenterClientListResult contains the result from method PrivateLinkServicesForM365ComplianceCenterClient.List.
type PrivateLinkServicesForM365ComplianceCenterClientListResult struct {
	PrivateLinkServicesForM365ComplianceCenterDescriptionListResult
}

// PrivateLinkServicesForM365ComplianceCenterClientUpdatePollerResponse contains the response from method PrivateLinkServicesForM365ComplianceCenterClient.Update.
type PrivateLinkServicesForM365ComplianceCenterClientUpdatePollerResponse struct {
	// Poller contains an initialized poller.
	Poller *PrivateLinkServicesForM365ComplianceCenterClientUpdatePoller

	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// PollUntilDone will poll the service endpoint until a terminal state is reached or an error is received.
// freq: the time to wait between intervals in absence of a Retry-After header. Allowed minimum is one second.
// A good starting value is 30 seconds. Note that some resources might benefit from a different value.
func (l PrivateLinkServicesForM365ComplianceCenterClientUpdatePollerResponse) PollUntilDone(ctx context.Context, freq time.Duration) (PrivateLinkServicesForM365ComplianceCenterClientUpdateResponse, error) {
	respType := PrivateLinkServicesForM365ComplianceCenterClientUpdateResponse{}
	resp, err := l.Poller.pt.PollUntilDone(ctx, freq, &respType.PrivateLinkServicesForM365ComplianceCenterDescription)
	if err != nil {
		return respType, err
	}
	respType.RawResponse = resp
	return respType, nil
}

// Resume rehydrates a PrivateLinkServicesForM365ComplianceCenterClientUpdatePollerResponse from the provided client and resume
// token.
func (l *PrivateLinkServicesForM365ComplianceCenterClientUpdatePollerResponse) Resume(ctx context.Context, client *PrivateLinkServicesForM365ComplianceCenterClient, token string) error {
	pt, err := armruntime.NewPollerFromResumeToken("PrivateLinkServicesForM365ComplianceCenterClient.Update", token, client.pl)
	if err != nil {
		return err
	}
	poller := &PrivateLinkServicesForM365ComplianceCenterClientUpdatePoller{
		pt: pt,
	}
	resp, err := poller.Poll(ctx)
	if err != nil {
		return err
	}
	l.Poller = poller
	l.RawResponse = resp
	return nil
}

// PrivateLinkServicesForM365ComplianceCenterClientUpdateResponse contains the response from method PrivateLinkServicesForM365ComplianceCenterClient.Update.
type PrivateLinkServicesForM365ComplianceCenterClientUpdateResponse struct {
	PrivateLinkServicesForM365ComplianceCenterClientUpdateResult
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// PrivateLinkServicesForM365ComplianceCenterClientUpdateResult contains the result from method PrivateLinkServicesForM365ComplianceCenterClient.Update.
type PrivateLinkServicesForM365ComplianceCenterClientUpdateResult struct {
	PrivateLinkServicesForM365ComplianceCenterDescription
}

// PrivateLinkServicesForM365SecurityCenterClientCreateOrUpdatePollerResponse contains the response from method PrivateLinkServicesForM365SecurityCenterClient.CreateOrUpdate.
type PrivateLinkServicesForM365SecurityCenterClientCreateOrUpdatePollerResponse struct {
	// Poller contains an initialized poller.
	Poller *PrivateLinkServicesForM365SecurityCenterClientCreateOrUpdatePoller

	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// PollUntilDone will poll the service endpoint until a terminal state is reached or an error is received.
// freq: the time to wait between intervals in absence of a Retry-After header. Allowed minimum is one second.
// A good starting value is 30 seconds. Note that some resources might benefit from a different value.
func (l PrivateLinkServicesForM365SecurityCenterClientCreateOrUpdatePollerResponse) PollUntilDone(ctx context.Context, freq time.Duration) (PrivateLinkServicesForM365SecurityCenterClientCreateOrUpdateResponse, error) {
	respType := PrivateLinkServicesForM365SecurityCenterClientCreateOrUpdateResponse{}
	resp, err := l.Poller.pt.PollUntilDone(ctx, freq, &respType.PrivateLinkServicesForM365SecurityCenterDescription)
	if err != nil {
		return respType, err
	}
	respType.RawResponse = resp
	return respType, nil
}

// Resume rehydrates a PrivateLinkServicesForM365SecurityCenterClientCreateOrUpdatePollerResponse from the provided client
// and resume token.
func (l *PrivateLinkServicesForM365SecurityCenterClientCreateOrUpdatePollerResponse) Resume(ctx context.Context, client *PrivateLinkServicesForM365SecurityCenterClient, token string) error {
	pt, err := armruntime.NewPollerFromResumeToken("PrivateLinkServicesForM365SecurityCenterClient.CreateOrUpdate", token, client.pl)
	if err != nil {
		return err
	}
	poller := &PrivateLinkServicesForM365SecurityCenterClientCreateOrUpdatePoller{
		pt: pt,
	}
	resp, err := poller.Poll(ctx)
	if err != nil {
		return err
	}
	l.Poller = poller
	l.RawResponse = resp
	return nil
}

// PrivateLinkServicesForM365SecurityCenterClientCreateOrUpdateResponse contains the response from method PrivateLinkServicesForM365SecurityCenterClient.CreateOrUpdate.
type PrivateLinkServicesForM365SecurityCenterClientCreateOrUpdateResponse struct {
	PrivateLinkServicesForM365SecurityCenterClientCreateOrUpdateResult
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// PrivateLinkServicesForM365SecurityCenterClientCreateOrUpdateResult contains the result from method PrivateLinkServicesForM365SecurityCenterClient.CreateOrUpdate.
type PrivateLinkServicesForM365SecurityCenterClientCreateOrUpdateResult struct {
	PrivateLinkServicesForM365SecurityCenterDescription
}

// PrivateLinkServicesForM365SecurityCenterClientDeletePollerResponse contains the response from method PrivateLinkServicesForM365SecurityCenterClient.Delete.
type PrivateLinkServicesForM365SecurityCenterClientDeletePollerResponse struct {
	// Poller contains an initialized poller.
	Poller *PrivateLinkServicesForM365SecurityCenterClientDeletePoller

	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// PollUntilDone will poll the service endpoint until a terminal state is reached or an error is received.
// freq: the time to wait between intervals in absence of a Retry-After header. Allowed minimum is one second.
// A good starting value is 30 seconds. Note that some resources might benefit from a different value.
func (l PrivateLinkServicesForM365SecurityCenterClientDeletePollerResponse) PollUntilDone(ctx context.Context, freq time.Duration) (PrivateLinkServicesForM365SecurityCenterClientDeleteResponse, error) {
	respType := PrivateLinkServicesForM365SecurityCenterClientDeleteResponse{}
	resp, err := l.Poller.pt.PollUntilDone(ctx, freq, nil)
	if err != nil {
		return respType, err
	}
	respType.RawResponse = resp
	return respType, nil
}

// Resume rehydrates a PrivateLinkServicesForM365SecurityCenterClientDeletePollerResponse from the provided client and resume
// token.
func (l *PrivateLinkServicesForM365SecurityCenterClientDeletePollerResponse) Resume(ctx context.Context, client *PrivateLinkServicesForM365SecurityCenterClient, token string) error {
	pt, err := armruntime.NewPollerFromResumeToken("PrivateLinkServicesForM365SecurityCenterClient.Delete", token, client.pl)
	if err != nil {
		return err
	}
	poller := &PrivateLinkServicesForM365SecurityCenterClientDeletePoller{
		pt: pt,
	}
	resp, err := poller.Poll(ctx)
	if err != nil {
		return err
	}
	l.Poller = poller
	l.RawResponse = resp
	return nil
}

// PrivateLinkServicesForM365SecurityCenterClientDeleteResponse contains the response from method PrivateLinkServicesForM365SecurityCenterClient.Delete.
type PrivateLinkServicesForM365SecurityCenterClientDeleteResponse struct {
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// PrivateLinkServicesForM365SecurityCenterClientGetResponse contains the response from method PrivateLinkServicesForM365SecurityCenterClient.Get.
type PrivateLinkServicesForM365SecurityCenterClientGetResponse struct {
	PrivateLinkServicesForM365SecurityCenterClientGetResult
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// PrivateLinkServicesForM365SecurityCenterClientGetResult contains the result from method PrivateLinkServicesForM365SecurityCenterClient.Get.
type PrivateLinkServicesForM365SecurityCenterClientGetResult struct {
	PrivateLinkServicesForM365SecurityCenterDescription
}

// PrivateLinkServicesForM365SecurityCenterClientListByResourceGroupResponse contains the response from method PrivateLinkServicesForM365SecurityCenterClient.ListByResourceGroup.
type PrivateLinkServicesForM365SecurityCenterClientListByResourceGroupResponse struct {
	PrivateLinkServicesForM365SecurityCenterClientListByResourceGroupResult
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// PrivateLinkServicesForM365SecurityCenterClientListByResourceGroupResult contains the result from method PrivateLinkServicesForM365SecurityCenterClient.ListByResourceGroup.
type PrivateLinkServicesForM365SecurityCenterClientListByResourceGroupResult struct {
	PrivateLinkServicesForM365SecurityCenterDescriptionListResult
}

// PrivateLinkServicesForM365SecurityCenterClientListResponse contains the response from method PrivateLinkServicesForM365SecurityCenterClient.List.
type PrivateLinkServicesForM365SecurityCenterClientListResponse struct {
	PrivateLinkServicesForM365SecurityCenterClientListResult
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// PrivateLinkServicesForM365SecurityCenterClientListResult contains the result from method PrivateLinkServicesForM365SecurityCenterClient.List.
type PrivateLinkServicesForM365SecurityCenterClientListResult struct {
	PrivateLinkServicesForM365SecurityCenterDescriptionListResult
}

// PrivateLinkServicesForM365SecurityCenterClientUpdatePollerResponse contains the response from method PrivateLinkServicesForM365SecurityCenterClient.Update.
type PrivateLinkServicesForM365SecurityCenterClientUpdatePollerResponse struct {
	// Poller contains an initialized poller.
	Poller *PrivateLinkServicesForM365SecurityCenterClientUpdatePoller

	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// PollUntilDone will poll the service endpoint until a terminal state is reached or an error is received.
// freq: the time to wait between intervals in absence of a Retry-After header. Allowed minimum is one second.
// A good starting value is 30 seconds. Note that some resources might benefit from a different value.
func (l PrivateLinkServicesForM365SecurityCenterClientUpdatePollerResponse) PollUntilDone(ctx context.Context, freq time.Duration) (PrivateLinkServicesForM365SecurityCenterClientUpdateResponse, error) {
	respType := PrivateLinkServicesForM365SecurityCenterClientUpdateResponse{}
	resp, err := l.Poller.pt.PollUntilDone(ctx, freq, &respType.PrivateLinkServicesForM365SecurityCenterDescription)
	if err != nil {
		return respType, err
	}
	respType.RawResponse = resp
	return respType, nil
}

// Resume rehydrates a PrivateLinkServicesForM365SecurityCenterClientUpdatePollerResponse from the provided client and resume
// token.
func (l *PrivateLinkServicesForM365SecurityCenterClientUpdatePollerResponse) Resume(ctx context.Context, client *PrivateLinkServicesForM365SecurityCenterClient, token string) error {
	pt, err := armruntime.NewPollerFromResumeToken("PrivateLinkServicesForM365SecurityCenterClient.Update", token, client.pl)
	if err != nil {
		return err
	}
	poller := &PrivateLinkServicesForM365SecurityCenterClientUpdatePoller{
		pt: pt,
	}
	resp, err := poller.Poll(ctx)
	if err != nil {
		return err
	}
	l.Poller = poller
	l.RawResponse = resp
	return nil
}

// PrivateLinkServicesForM365SecurityCenterClientUpdateResponse contains the response from method PrivateLinkServicesForM365SecurityCenterClient.Update.
type PrivateLinkServicesForM365SecurityCenterClientUpdateResponse struct {
	PrivateLinkServicesForM365SecurityCenterClientUpdateResult
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// PrivateLinkServicesForM365SecurityCenterClientUpdateResult contains the result from method PrivateLinkServicesForM365SecurityCenterClient.Update.
type PrivateLinkServicesForM365SecurityCenterClientUpdateResult struct {
	PrivateLinkServicesForM365SecurityCenterDescription
}

// PrivateLinkServicesForMIPPolicySyncClientCreateOrUpdatePollerResponse contains the response from method PrivateLinkServicesForMIPPolicySyncClient.CreateOrUpdate.
type PrivateLinkServicesForMIPPolicySyncClientCreateOrUpdatePollerResponse struct {
	// Poller contains an initialized poller.
	Poller *PrivateLinkServicesForMIPPolicySyncClientCreateOrUpdatePoller

	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// PollUntilDone will poll the service endpoint until a terminal state is reached or an error is received.
// freq: the time to wait between intervals in absence of a Retry-After header. Allowed minimum is one second.
// A good starting value is 30 seconds. Note that some resources might benefit from a different value.
func (l PrivateLinkServicesForMIPPolicySyncClientCreateOrUpdatePollerResponse) PollUntilDone(ctx context.Context, freq time.Duration) (PrivateLinkServicesForMIPPolicySyncClientCreateOrUpdateResponse, error) {
	respType := PrivateLinkServicesForMIPPolicySyncClientCreateOrUpdateResponse{}
	resp, err := l.Poller.pt.PollUntilDone(ctx, freq, &respType.PrivateLinkServicesForMIPPolicySyncDescription)
	if err != nil {
		return respType, err
	}
	respType.RawResponse = resp
	return respType, nil
}

// Resume rehydrates a PrivateLinkServicesForMIPPolicySyncClientCreateOrUpdatePollerResponse from the provided client and
// resume token.
func (l *PrivateLinkServicesForMIPPolicySyncClientCreateOrUpdatePollerResponse) Resume(ctx context.Context, client *PrivateLinkServicesForMIPPolicySyncClient, token string) error {
	pt, err := armruntime.NewPollerFromResumeToken("PrivateLinkServicesForMIPPolicySyncClient.CreateOrUpdate", token, client.pl)
	if err != nil {
		return err
	}
	poller := &PrivateLinkServicesForMIPPolicySyncClientCreateOrUpdatePoller{
		pt: pt,
	}
	resp, err := poller.Poll(ctx)
	if err != nil {
		return err
	}
	l.Poller = poller
	l.RawResponse = resp
	return nil
}

// PrivateLinkServicesForMIPPolicySyncClientCreateOrUpdateResponse contains the response from method PrivateLinkServicesForMIPPolicySyncClient.CreateOrUpdate.
type PrivateLinkServicesForMIPPolicySyncClientCreateOrUpdateResponse struct {
	PrivateLinkServicesForMIPPolicySyncClientCreateOrUpdateResult
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// PrivateLinkServicesForMIPPolicySyncClientCreateOrUpdateResult contains the result from method PrivateLinkServicesForMIPPolicySyncClient.CreateOrUpdate.
type PrivateLinkServicesForMIPPolicySyncClientCreateOrUpdateResult struct {
	PrivateLinkServicesForMIPPolicySyncDescription
}

// PrivateLinkServicesForMIPPolicySyncClientDeletePollerResponse contains the response from method PrivateLinkServicesForMIPPolicySyncClient.Delete.
type PrivateLinkServicesForMIPPolicySyncClientDeletePollerResponse struct {
	// Poller contains an initialized poller.
	Poller *PrivateLinkServicesForMIPPolicySyncClientDeletePoller

	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// PollUntilDone will poll the service endpoint until a terminal state is reached or an error is received.
// freq: the time to wait between intervals in absence of a Retry-After header. Allowed minimum is one second.
// A good starting value is 30 seconds. Note that some resources might benefit from a different value.
func (l PrivateLinkServicesForMIPPolicySyncClientDeletePollerResponse) PollUntilDone(ctx context.Context, freq time.Duration) (PrivateLinkServicesForMIPPolicySyncClientDeleteResponse, error) {
	respType := PrivateLinkServicesForMIPPolicySyncClientDeleteResponse{}
	resp, err := l.Poller.pt.PollUntilDone(ctx, freq, nil)
	if err != nil {
		return respType, err
	}
	respType.RawResponse = resp
	return respType, nil
}

// Resume rehydrates a PrivateLinkServicesForMIPPolicySyncClientDeletePollerResponse from the provided client and resume token.
func (l *PrivateLinkServicesForMIPPolicySyncClientDeletePollerResponse) Resume(ctx context.Context, client *PrivateLinkServicesForMIPPolicySyncClient, token string) error {
	pt, err := armruntime.NewPollerFromResumeToken("PrivateLinkServicesForMIPPolicySyncClient.Delete", token, client.pl)
	if err != nil {
		return err
	}
	poller := &PrivateLinkServicesForMIPPolicySyncClientDeletePoller{
		pt: pt,
	}
	resp, err := poller.Poll(ctx)
	if err != nil {
		return err
	}
	l.Poller = poller
	l.RawResponse = resp
	return nil
}

// PrivateLinkServicesForMIPPolicySyncClientDeleteResponse contains the response from method PrivateLinkServicesForMIPPolicySyncClient.Delete.
type PrivateLinkServicesForMIPPolicySyncClientDeleteResponse struct {
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// PrivateLinkServicesForMIPPolicySyncClientGetResponse contains the response from method PrivateLinkServicesForMIPPolicySyncClient.Get.
type PrivateLinkServicesForMIPPolicySyncClientGetResponse struct {
	PrivateLinkServicesForMIPPolicySyncClientGetResult
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// PrivateLinkServicesForMIPPolicySyncClientGetResult contains the result from method PrivateLinkServicesForMIPPolicySyncClient.Get.
type PrivateLinkServicesForMIPPolicySyncClientGetResult struct {
	PrivateLinkServicesForMIPPolicySyncDescription
}

// PrivateLinkServicesForMIPPolicySyncClientListByResourceGroupResponse contains the response from method PrivateLinkServicesForMIPPolicySyncClient.ListByResourceGroup.
type PrivateLinkServicesForMIPPolicySyncClientListByResourceGroupResponse struct {
	PrivateLinkServicesForMIPPolicySyncClientListByResourceGroupResult
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// PrivateLinkServicesForMIPPolicySyncClientListByResourceGroupResult contains the result from method PrivateLinkServicesForMIPPolicySyncClient.ListByResourceGroup.
type PrivateLinkServicesForMIPPolicySyncClientListByResourceGroupResult struct {
	PrivateLinkServicesForMIPPolicySyncDescriptionListResult
}

// PrivateLinkServicesForMIPPolicySyncClientListResponse contains the response from method PrivateLinkServicesForMIPPolicySyncClient.List.
type PrivateLinkServicesForMIPPolicySyncClientListResponse struct {
	PrivateLinkServicesForMIPPolicySyncClientListResult
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// PrivateLinkServicesForMIPPolicySyncClientListResult contains the result from method PrivateLinkServicesForMIPPolicySyncClient.List.
type PrivateLinkServicesForMIPPolicySyncClientListResult struct {
	PrivateLinkServicesForMIPPolicySyncDescriptionListResult
}

// PrivateLinkServicesForMIPPolicySyncClientUpdatePollerResponse contains the response from method PrivateLinkServicesForMIPPolicySyncClient.Update.
type PrivateLinkServicesForMIPPolicySyncClientUpdatePollerResponse struct {
	// Poller contains an initialized poller.
	Poller *PrivateLinkServicesForMIPPolicySyncClientUpdatePoller

	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// PollUntilDone will poll the service endpoint until a terminal state is reached or an error is received.
// freq: the time to wait between intervals in absence of a Retry-After header. Allowed minimum is one second.
// A good starting value is 30 seconds. Note that some resources might benefit from a different value.
func (l PrivateLinkServicesForMIPPolicySyncClientUpdatePollerResponse) PollUntilDone(ctx context.Context, freq time.Duration) (PrivateLinkServicesForMIPPolicySyncClientUpdateResponse, error) {
	respType := PrivateLinkServicesForMIPPolicySyncClientUpdateResponse{}
	resp, err := l.Poller.pt.PollUntilDone(ctx, freq, &respType.PrivateLinkServicesForMIPPolicySyncDescription)
	if err != nil {
		return respType, err
	}
	respType.RawResponse = resp
	return respType, nil
}

// Resume rehydrates a PrivateLinkServicesForMIPPolicySyncClientUpdatePollerResponse from the provided client and resume token.
func (l *PrivateLinkServicesForMIPPolicySyncClientUpdatePollerResponse) Resume(ctx context.Context, client *PrivateLinkServicesForMIPPolicySyncClient, token string) error {
	pt, err := armruntime.NewPollerFromResumeToken("PrivateLinkServicesForMIPPolicySyncClient.Update", token, client.pl)
	if err != nil {
		return err
	}
	poller := &PrivateLinkServicesForMIPPolicySyncClientUpdatePoller{
		pt: pt,
	}
	resp, err := poller.Poll(ctx)
	if err != nil {
		return err
	}
	l.Poller = poller
	l.RawResponse = resp
	return nil
}

// PrivateLinkServicesForMIPPolicySyncClientUpdateResponse contains the response from method PrivateLinkServicesForMIPPolicySyncClient.Update.
type PrivateLinkServicesForMIPPolicySyncClientUpdateResponse struct {
	PrivateLinkServicesForMIPPolicySyncClientUpdateResult
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// PrivateLinkServicesForMIPPolicySyncClientUpdateResult contains the result from method PrivateLinkServicesForMIPPolicySyncClient.Update.
type PrivateLinkServicesForMIPPolicySyncClientUpdateResult struct {
	PrivateLinkServicesForMIPPolicySyncDescription
}

// PrivateLinkServicesForO365ManagementActivityAPIClientCreateOrUpdatePollerResponse contains the response from method PrivateLinkServicesForO365ManagementActivityAPIClient.CreateOrUpdate.
type PrivateLinkServicesForO365ManagementActivityAPIClientCreateOrUpdatePollerResponse struct {
	// Poller contains an initialized poller.
	Poller *PrivateLinkServicesForO365ManagementActivityAPIClientCreateOrUpdatePoller

	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// PollUntilDone will poll the service endpoint until a terminal state is reached or an error is received.
// freq: the time to wait between intervals in absence of a Retry-After header. Allowed minimum is one second.
// A good starting value is 30 seconds. Note that some resources might benefit from a different value.
func (l PrivateLinkServicesForO365ManagementActivityAPIClientCreateOrUpdatePollerResponse) PollUntilDone(ctx context.Context, freq time.Duration) (PrivateLinkServicesForO365ManagementActivityAPIClientCreateOrUpdateResponse, error) {
	respType := PrivateLinkServicesForO365ManagementActivityAPIClientCreateOrUpdateResponse{}
	resp, err := l.Poller.pt.PollUntilDone(ctx, freq, &respType.PrivateLinkServicesForO365ManagementActivityAPIDescription)
	if err != nil {
		return respType, err
	}
	respType.RawResponse = resp
	return respType, nil
}

// Resume rehydrates a PrivateLinkServicesForO365ManagementActivityAPIClientCreateOrUpdatePollerResponse from the provided
// client and resume token.
func (l *PrivateLinkServicesForO365ManagementActivityAPIClientCreateOrUpdatePollerResponse) Resume(ctx context.Context, client *PrivateLinkServicesForO365ManagementActivityAPIClient, token string) error {
	pt, err := armruntime.NewPollerFromResumeToken("PrivateLinkServicesForO365ManagementActivityAPIClient.CreateOrUpdate", token, client.pl)
	if err != nil {
		return err
	}
	poller := &PrivateLinkServicesForO365ManagementActivityAPIClientCreateOrUpdatePoller{
		pt: pt,
	}
	resp, err := poller.Poll(ctx)
	if err != nil {
		return err
	}
	l.Poller = poller
	l.RawResponse = resp
	return nil
}

// PrivateLinkServicesForO365ManagementActivityAPIClientCreateOrUpdateResponse contains the response from method PrivateLinkServicesForO365ManagementActivityAPIClient.CreateOrUpdate.
type PrivateLinkServicesForO365ManagementActivityAPIClientCreateOrUpdateResponse struct {
	PrivateLinkServicesForO365ManagementActivityAPIClientCreateOrUpdateResult
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// PrivateLinkServicesForO365ManagementActivityAPIClientCreateOrUpdateResult contains the result from method PrivateLinkServicesForO365ManagementActivityAPIClient.CreateOrUpdate.
type PrivateLinkServicesForO365ManagementActivityAPIClientCreateOrUpdateResult struct {
	PrivateLinkServicesForO365ManagementActivityAPIDescription
}

// PrivateLinkServicesForO365ManagementActivityAPIClientDeletePollerResponse contains the response from method PrivateLinkServicesForO365ManagementActivityAPIClient.Delete.
type PrivateLinkServicesForO365ManagementActivityAPIClientDeletePollerResponse struct {
	// Poller contains an initialized poller.
	Poller *PrivateLinkServicesForO365ManagementActivityAPIClientDeletePoller

	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// PollUntilDone will poll the service endpoint until a terminal state is reached or an error is received.
// freq: the time to wait between intervals in absence of a Retry-After header. Allowed minimum is one second.
// A good starting value is 30 seconds. Note that some resources might benefit from a different value.
func (l PrivateLinkServicesForO365ManagementActivityAPIClientDeletePollerResponse) PollUntilDone(ctx context.Context, freq time.Duration) (PrivateLinkServicesForO365ManagementActivityAPIClientDeleteResponse, error) {
	respType := PrivateLinkServicesForO365ManagementActivityAPIClientDeleteResponse{}
	resp, err := l.Poller.pt.PollUntilDone(ctx, freq, nil)
	if err != nil {
		return respType, err
	}
	respType.RawResponse = resp
	return respType, nil
}

// Resume rehydrates a PrivateLinkServicesForO365ManagementActivityAPIClientDeletePollerResponse from the provided client
// and resume token.
func (l *PrivateLinkServicesForO365ManagementActivityAPIClientDeletePollerResponse) Resume(ctx context.Context, client *PrivateLinkServicesForO365ManagementActivityAPIClient, token string) error {
	pt, err := armruntime.NewPollerFromResumeToken("PrivateLinkServicesForO365ManagementActivityAPIClient.Delete", token, client.pl)
	if err != nil {
		return err
	}
	poller := &PrivateLinkServicesForO365ManagementActivityAPIClientDeletePoller{
		pt: pt,
	}
	resp, err := poller.Poll(ctx)
	if err != nil {
		return err
	}
	l.Poller = poller
	l.RawResponse = resp
	return nil
}

// PrivateLinkServicesForO365ManagementActivityAPIClientDeleteResponse contains the response from method PrivateLinkServicesForO365ManagementActivityAPIClient.Delete.
type PrivateLinkServicesForO365ManagementActivityAPIClientDeleteResponse struct {
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// PrivateLinkServicesForO365ManagementActivityAPIClientGetResponse contains the response from method PrivateLinkServicesForO365ManagementActivityAPIClient.Get.
type PrivateLinkServicesForO365ManagementActivityAPIClientGetResponse struct {
	PrivateLinkServicesForO365ManagementActivityAPIClientGetResult
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// PrivateLinkServicesForO365ManagementActivityAPIClientGetResult contains the result from method PrivateLinkServicesForO365ManagementActivityAPIClient.Get.
type PrivateLinkServicesForO365ManagementActivityAPIClientGetResult struct {
	PrivateLinkServicesForO365ManagementActivityAPIDescription
}

// PrivateLinkServicesForO365ManagementActivityAPIClientListByResourceGroupResponse contains the response from method PrivateLinkServicesForO365ManagementActivityAPIClient.ListByResourceGroup.
type PrivateLinkServicesForO365ManagementActivityAPIClientListByResourceGroupResponse struct {
	PrivateLinkServicesForO365ManagementActivityAPIClientListByResourceGroupResult
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// PrivateLinkServicesForO365ManagementActivityAPIClientListByResourceGroupResult contains the result from method PrivateLinkServicesForO365ManagementActivityAPIClient.ListByResourceGroup.
type PrivateLinkServicesForO365ManagementActivityAPIClientListByResourceGroupResult struct {
	PrivateLinkServicesForO365ManagementActivityAPIDescriptionListResult
}

// PrivateLinkServicesForO365ManagementActivityAPIClientListResponse contains the response from method PrivateLinkServicesForO365ManagementActivityAPIClient.List.
type PrivateLinkServicesForO365ManagementActivityAPIClientListResponse struct {
	PrivateLinkServicesForO365ManagementActivityAPIClientListResult
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// PrivateLinkServicesForO365ManagementActivityAPIClientListResult contains the result from method PrivateLinkServicesForO365ManagementActivityAPIClient.List.
type PrivateLinkServicesForO365ManagementActivityAPIClientListResult struct {
	PrivateLinkServicesForO365ManagementActivityAPIDescriptionListResult
}

// PrivateLinkServicesForO365ManagementActivityAPIClientUpdatePollerResponse contains the response from method PrivateLinkServicesForO365ManagementActivityAPIClient.Update.
type PrivateLinkServicesForO365ManagementActivityAPIClientUpdatePollerResponse struct {
	// Poller contains an initialized poller.
	Poller *PrivateLinkServicesForO365ManagementActivityAPIClientUpdatePoller

	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// PollUntilDone will poll the service endpoint until a terminal state is reached or an error is received.
// freq: the time to wait between intervals in absence of a Retry-After header. Allowed minimum is one second.
// A good starting value is 30 seconds. Note that some resources might benefit from a different value.
func (l PrivateLinkServicesForO365ManagementActivityAPIClientUpdatePollerResponse) PollUntilDone(ctx context.Context, freq time.Duration) (PrivateLinkServicesForO365ManagementActivityAPIClientUpdateResponse, error) {
	respType := PrivateLinkServicesForO365ManagementActivityAPIClientUpdateResponse{}
	resp, err := l.Poller.pt.PollUntilDone(ctx, freq, &respType.PrivateLinkServicesForO365ManagementActivityAPIDescription)
	if err != nil {
		return respType, err
	}
	respType.RawResponse = resp
	return respType, nil
}

// Resume rehydrates a PrivateLinkServicesForO365ManagementActivityAPIClientUpdatePollerResponse from the provided client
// and resume token.
func (l *PrivateLinkServicesForO365ManagementActivityAPIClientUpdatePollerResponse) Resume(ctx context.Context, client *PrivateLinkServicesForO365ManagementActivityAPIClient, token string) error {
	pt, err := armruntime.NewPollerFromResumeToken("PrivateLinkServicesForO365ManagementActivityAPIClient.Update", token, client.pl)
	if err != nil {
		return err
	}
	poller := &PrivateLinkServicesForO365ManagementActivityAPIClientUpdatePoller{
		pt: pt,
	}
	resp, err := poller.Poll(ctx)
	if err != nil {
		return err
	}
	l.Poller = poller
	l.RawResponse = resp
	return nil
}

// PrivateLinkServicesForO365ManagementActivityAPIClientUpdateResponse contains the response from method PrivateLinkServicesForO365ManagementActivityAPIClient.Update.
type PrivateLinkServicesForO365ManagementActivityAPIClientUpdateResponse struct {
	PrivateLinkServicesForO365ManagementActivityAPIClientUpdateResult
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// PrivateLinkServicesForO365ManagementActivityAPIClientUpdateResult contains the result from method PrivateLinkServicesForO365ManagementActivityAPIClient.Update.
type PrivateLinkServicesForO365ManagementActivityAPIClientUpdateResult struct {
	PrivateLinkServicesForO365ManagementActivityAPIDescription
}

// PrivateLinkServicesForSCCPowershellClientCreateOrUpdatePollerResponse contains the response from method PrivateLinkServicesForSCCPowershellClient.CreateOrUpdate.
type PrivateLinkServicesForSCCPowershellClientCreateOrUpdatePollerResponse struct {
	// Poller contains an initialized poller.
	Poller *PrivateLinkServicesForSCCPowershellClientCreateOrUpdatePoller

	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// PollUntilDone will poll the service endpoint until a terminal state is reached or an error is received.
// freq: the time to wait between intervals in absence of a Retry-After header. Allowed minimum is one second.
// A good starting value is 30 seconds. Note that some resources might benefit from a different value.
func (l PrivateLinkServicesForSCCPowershellClientCreateOrUpdatePollerResponse) PollUntilDone(ctx context.Context, freq time.Duration) (PrivateLinkServicesForSCCPowershellClientCreateOrUpdateResponse, error) {
	respType := PrivateLinkServicesForSCCPowershellClientCreateOrUpdateResponse{}
	resp, err := l.Poller.pt.PollUntilDone(ctx, freq, &respType.PrivateLinkServicesForSCCPowershellDescription)
	if err != nil {
		return respType, err
	}
	respType.RawResponse = resp
	return respType, nil
}

// Resume rehydrates a PrivateLinkServicesForSCCPowershellClientCreateOrUpdatePollerResponse from the provided client and
// resume token.
func (l *PrivateLinkServicesForSCCPowershellClientCreateOrUpdatePollerResponse) Resume(ctx context.Context, client *PrivateLinkServicesForSCCPowershellClient, token string) error {
	pt, err := armruntime.NewPollerFromResumeToken("PrivateLinkServicesForSCCPowershellClient.CreateOrUpdate", token, client.pl)
	if err != nil {
		return err
	}
	poller := &PrivateLinkServicesForSCCPowershellClientCreateOrUpdatePoller{
		pt: pt,
	}
	resp, err := poller.Poll(ctx)
	if err != nil {
		return err
	}
	l.Poller = poller
	l.RawResponse = resp
	return nil
}

// PrivateLinkServicesForSCCPowershellClientCreateOrUpdateResponse contains the response from method PrivateLinkServicesForSCCPowershellClient.CreateOrUpdate.
type PrivateLinkServicesForSCCPowershellClientCreateOrUpdateResponse struct {
	PrivateLinkServicesForSCCPowershellClientCreateOrUpdateResult
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// PrivateLinkServicesForSCCPowershellClientCreateOrUpdateResult contains the result from method PrivateLinkServicesForSCCPowershellClient.CreateOrUpdate.
type PrivateLinkServicesForSCCPowershellClientCreateOrUpdateResult struct {
	PrivateLinkServicesForSCCPowershellDescription
}

// PrivateLinkServicesForSCCPowershellClientDeletePollerResponse contains the response from method PrivateLinkServicesForSCCPowershellClient.Delete.
type PrivateLinkServicesForSCCPowershellClientDeletePollerResponse struct {
	// Poller contains an initialized poller.
	Poller *PrivateLinkServicesForSCCPowershellClientDeletePoller

	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// PollUntilDone will poll the service endpoint until a terminal state is reached or an error is received.
// freq: the time to wait between intervals in absence of a Retry-After header. Allowed minimum is one second.
// A good starting value is 30 seconds. Note that some resources might benefit from a different value.
func (l PrivateLinkServicesForSCCPowershellClientDeletePollerResponse) PollUntilDone(ctx context.Context, freq time.Duration) (PrivateLinkServicesForSCCPowershellClientDeleteResponse, error) {
	respType := PrivateLinkServicesForSCCPowershellClientDeleteResponse{}
	resp, err := l.Poller.pt.PollUntilDone(ctx, freq, nil)
	if err != nil {
		return respType, err
	}
	respType.RawResponse = resp
	return respType, nil
}

// Resume rehydrates a PrivateLinkServicesForSCCPowershellClientDeletePollerResponse from the provided client and resume token.
func (l *PrivateLinkServicesForSCCPowershellClientDeletePollerResponse) Resume(ctx context.Context, client *PrivateLinkServicesForSCCPowershellClient, token string) error {
	pt, err := armruntime.NewPollerFromResumeToken("PrivateLinkServicesForSCCPowershellClient.Delete", token, client.pl)
	if err != nil {
		return err
	}
	poller := &PrivateLinkServicesForSCCPowershellClientDeletePoller{
		pt: pt,
	}
	resp, err := poller.Poll(ctx)
	if err != nil {
		return err
	}
	l.Poller = poller
	l.RawResponse = resp
	return nil
}

// PrivateLinkServicesForSCCPowershellClientDeleteResponse contains the response from method PrivateLinkServicesForSCCPowershellClient.Delete.
type PrivateLinkServicesForSCCPowershellClientDeleteResponse struct {
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// PrivateLinkServicesForSCCPowershellClientGetResponse contains the response from method PrivateLinkServicesForSCCPowershellClient.Get.
type PrivateLinkServicesForSCCPowershellClientGetResponse struct {
	PrivateLinkServicesForSCCPowershellClientGetResult
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// PrivateLinkServicesForSCCPowershellClientGetResult contains the result from method PrivateLinkServicesForSCCPowershellClient.Get.
type PrivateLinkServicesForSCCPowershellClientGetResult struct {
	PrivateLinkServicesForSCCPowershellDescription
}

// PrivateLinkServicesForSCCPowershellClientListByResourceGroupResponse contains the response from method PrivateLinkServicesForSCCPowershellClient.ListByResourceGroup.
type PrivateLinkServicesForSCCPowershellClientListByResourceGroupResponse struct {
	PrivateLinkServicesForSCCPowershellClientListByResourceGroupResult
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// PrivateLinkServicesForSCCPowershellClientListByResourceGroupResult contains the result from method PrivateLinkServicesForSCCPowershellClient.ListByResourceGroup.
type PrivateLinkServicesForSCCPowershellClientListByResourceGroupResult struct {
	PrivateLinkServicesForSCCPowershellDescriptionListResult
}

// PrivateLinkServicesForSCCPowershellClientListResponse contains the response from method PrivateLinkServicesForSCCPowershellClient.List.
type PrivateLinkServicesForSCCPowershellClientListResponse struct {
	PrivateLinkServicesForSCCPowershellClientListResult
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// PrivateLinkServicesForSCCPowershellClientListResult contains the result from method PrivateLinkServicesForSCCPowershellClient.List.
type PrivateLinkServicesForSCCPowershellClientListResult struct {
	PrivateLinkServicesForSCCPowershellDescriptionListResult
}

// PrivateLinkServicesForSCCPowershellClientUpdatePollerResponse contains the response from method PrivateLinkServicesForSCCPowershellClient.Update.
type PrivateLinkServicesForSCCPowershellClientUpdatePollerResponse struct {
	// Poller contains an initialized poller.
	Poller *PrivateLinkServicesForSCCPowershellClientUpdatePoller

	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// PollUntilDone will poll the service endpoint until a terminal state is reached or an error is received.
// freq: the time to wait between intervals in absence of a Retry-After header. Allowed minimum is one second.
// A good starting value is 30 seconds. Note that some resources might benefit from a different value.
func (l PrivateLinkServicesForSCCPowershellClientUpdatePollerResponse) PollUntilDone(ctx context.Context, freq time.Duration) (PrivateLinkServicesForSCCPowershellClientUpdateResponse, error) {
	respType := PrivateLinkServicesForSCCPowershellClientUpdateResponse{}
	resp, err := l.Poller.pt.PollUntilDone(ctx, freq, &respType.PrivateLinkServicesForSCCPowershellDescription)
	if err != nil {
		return respType, err
	}
	respType.RawResponse = resp
	return respType, nil
}

// Resume rehydrates a PrivateLinkServicesForSCCPowershellClientUpdatePollerResponse from the provided client and resume token.
func (l *PrivateLinkServicesForSCCPowershellClientUpdatePollerResponse) Resume(ctx context.Context, client *PrivateLinkServicesForSCCPowershellClient, token string) error {
	pt, err := armruntime.NewPollerFromResumeToken("PrivateLinkServicesForSCCPowershellClient.Update", token, client.pl)
	if err != nil {
		return err
	}
	poller := &PrivateLinkServicesForSCCPowershellClientUpdatePoller{
		pt: pt,
	}
	resp, err := poller.Poll(ctx)
	if err != nil {
		return err
	}
	l.Poller = poller
	l.RawResponse = resp
	return nil
}

// PrivateLinkServicesForSCCPowershellClientUpdateResponse contains the response from method PrivateLinkServicesForSCCPowershellClient.Update.
type PrivateLinkServicesForSCCPowershellClientUpdateResponse struct {
	PrivateLinkServicesForSCCPowershellClientUpdateResult
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// PrivateLinkServicesForSCCPowershellClientUpdateResult contains the result from method PrivateLinkServicesForSCCPowershellClient.Update.
type PrivateLinkServicesForSCCPowershellClientUpdateResult struct {
	PrivateLinkServicesForSCCPowershellDescription
}

// ServicesClientDeletePollerResponse contains the response from method ServicesClient.Delete.
type ServicesClientDeletePollerResponse struct {
	// Poller contains an initialized poller.
	Poller *ServicesClientDeletePoller

	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// PollUntilDone will poll the service endpoint until a terminal state is reached or an error is received.
// freq: the time to wait between intervals in absence of a Retry-After header. Allowed minimum is one second.
// A good starting value is 30 seconds. Note that some resources might benefit from a different value.
func (l ServicesClientDeletePollerResponse) PollUntilDone(ctx context.Context, freq time.Duration) (ServicesClientDeleteResponse, error) {
	respType := ServicesClientDeleteResponse{}
	resp, err := l.Poller.pt.PollUntilDone(ctx, freq, nil)
	if err != nil {
		return respType, err
	}
	respType.RawResponse = resp
	return respType, nil
}

// Resume rehydrates a ServicesClientDeletePollerResponse from the provided client and resume token.
func (l *ServicesClientDeletePollerResponse) Resume(ctx context.Context, client *ServicesClient, token string) error {
	pt, err := armruntime.NewPollerFromResumeToken("ServicesClient.Delete", token, client.pl)
	if err != nil {
		return err
	}
	poller := &ServicesClientDeletePoller{
		pt: pt,
	}
	resp, err := poller.Poll(ctx)
	if err != nil {
		return err
	}
	l.Poller = poller
	l.RawResponse = resp
	return nil
}

// ServicesClientDeleteResponse contains the response from method ServicesClient.Delete.
type ServicesClientDeleteResponse struct {
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}
