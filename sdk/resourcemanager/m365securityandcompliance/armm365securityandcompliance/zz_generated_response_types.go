//go:build go1.16
// +build go1.16

// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

package armm365securityandcompliance

import (
	"context"
	armruntime "github.com/Azure/azure-sdk-for-go/sdk/azcore/arm/runtime"
	"net/http"
	"time"
)

// OperationResultsGetResponse contains the response from method OperationResults.Get.
type OperationResultsGetResponse struct {
	OperationResultsGetResult
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// OperationResultsGetResult contains the result from method OperationResults.Get.
type OperationResultsGetResult struct {
	OperationResultsDescription
}

// OperationsListResponse contains the response from method Operations.List.
type OperationsListResponse struct {
	OperationsListResult
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// OperationsListResult contains the result from method Operations.List.
type OperationsListResult struct {
	OperationListResult
}

// PrivateEndpointConnectionsAdtAPICreateOrUpdatePollerResponse contains the response from method PrivateEndpointConnectionsAdtAPI.CreateOrUpdate.
type PrivateEndpointConnectionsAdtAPICreateOrUpdatePollerResponse struct {
	// Poller contains an initialized poller.
	Poller *PrivateEndpointConnectionsAdtAPICreateOrUpdatePoller

	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// PollUntilDone will poll the service endpoint until a terminal state is reached or an error is received.
// freq: the time to wait between intervals in absence of a Retry-After header. Allowed minimum is one second.
// A good starting value is 30 seconds. Note that some resources might benefit from a different value.
func (l PrivateEndpointConnectionsAdtAPICreateOrUpdatePollerResponse) PollUntilDone(ctx context.Context, freq time.Duration) (PrivateEndpointConnectionsAdtAPICreateOrUpdateResponse, error) {
	respType := PrivateEndpointConnectionsAdtAPICreateOrUpdateResponse{}
	resp, err := l.Poller.pt.PollUntilDone(ctx, freq, &respType.PrivateEndpointConnection)
	if err != nil {
		return respType, err
	}
	respType.RawResponse = resp
	return respType, nil
}

// Resume rehydrates a PrivateEndpointConnectionsAdtAPICreateOrUpdatePollerResponse from the provided client and resume token.
func (l *PrivateEndpointConnectionsAdtAPICreateOrUpdatePollerResponse) Resume(ctx context.Context, client *PrivateEndpointConnectionsAdtAPIClient, token string) error {
	pt, err := armruntime.NewPollerFromResumeToken("PrivateEndpointConnectionsAdtAPIClient.CreateOrUpdate", token, client.pl, client.createOrUpdateHandleError)
	if err != nil {
		return err
	}
	poller := &PrivateEndpointConnectionsAdtAPICreateOrUpdatePoller{
		pt: pt,
	}
	resp, err := poller.Poll(ctx)
	if err != nil {
		return err
	}
	l.Poller = poller
	l.RawResponse = resp
	return nil
}

// PrivateEndpointConnectionsAdtAPICreateOrUpdateResponse contains the response from method PrivateEndpointConnectionsAdtAPI.CreateOrUpdate.
type PrivateEndpointConnectionsAdtAPICreateOrUpdateResponse struct {
	PrivateEndpointConnectionsAdtAPICreateOrUpdateResult
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// PrivateEndpointConnectionsAdtAPICreateOrUpdateResult contains the result from method PrivateEndpointConnectionsAdtAPI.CreateOrUpdate.
type PrivateEndpointConnectionsAdtAPICreateOrUpdateResult struct {
	PrivateEndpointConnection
}

// PrivateEndpointConnectionsAdtAPIDeletePollerResponse contains the response from method PrivateEndpointConnectionsAdtAPI.Delete.
type PrivateEndpointConnectionsAdtAPIDeletePollerResponse struct {
	// Poller contains an initialized poller.
	Poller *PrivateEndpointConnectionsAdtAPIDeletePoller

	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// PollUntilDone will poll the service endpoint until a terminal state is reached or an error is received.
// freq: the time to wait between intervals in absence of a Retry-After header. Allowed minimum is one second.
// A good starting value is 30 seconds. Note that some resources might benefit from a different value.
func (l PrivateEndpointConnectionsAdtAPIDeletePollerResponse) PollUntilDone(ctx context.Context, freq time.Duration) (PrivateEndpointConnectionsAdtAPIDeleteResponse, error) {
	respType := PrivateEndpointConnectionsAdtAPIDeleteResponse{}
	resp, err := l.Poller.pt.PollUntilDone(ctx, freq, nil)
	if err != nil {
		return respType, err
	}
	respType.RawResponse = resp
	return respType, nil
}

// Resume rehydrates a PrivateEndpointConnectionsAdtAPIDeletePollerResponse from the provided client and resume token.
func (l *PrivateEndpointConnectionsAdtAPIDeletePollerResponse) Resume(ctx context.Context, client *PrivateEndpointConnectionsAdtAPIClient, token string) error {
	pt, err := armruntime.NewPollerFromResumeToken("PrivateEndpointConnectionsAdtAPIClient.Delete", token, client.pl, client.deleteHandleError)
	if err != nil {
		return err
	}
	poller := &PrivateEndpointConnectionsAdtAPIDeletePoller{
		pt: pt,
	}
	resp, err := poller.Poll(ctx)
	if err != nil {
		return err
	}
	l.Poller = poller
	l.RawResponse = resp
	return nil
}

// PrivateEndpointConnectionsAdtAPIDeleteResponse contains the response from method PrivateEndpointConnectionsAdtAPI.Delete.
type PrivateEndpointConnectionsAdtAPIDeleteResponse struct {
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// PrivateEndpointConnectionsAdtAPIGetResponse contains the response from method PrivateEndpointConnectionsAdtAPI.Get.
type PrivateEndpointConnectionsAdtAPIGetResponse struct {
	PrivateEndpointConnectionsAdtAPIGetResult
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// PrivateEndpointConnectionsAdtAPIGetResult contains the result from method PrivateEndpointConnectionsAdtAPI.Get.
type PrivateEndpointConnectionsAdtAPIGetResult struct {
	PrivateEndpointConnection
}

// PrivateEndpointConnectionsAdtAPIListByServiceResponse contains the response from method PrivateEndpointConnectionsAdtAPI.ListByService.
type PrivateEndpointConnectionsAdtAPIListByServiceResponse struct {
	PrivateEndpointConnectionsAdtAPIListByServiceResult
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// PrivateEndpointConnectionsAdtAPIListByServiceResult contains the result from method PrivateEndpointConnectionsAdtAPI.ListByService.
type PrivateEndpointConnectionsAdtAPIListByServiceResult struct {
	PrivateEndpointConnectionListResult
}

// PrivateEndpointConnectionsCompCreateOrUpdatePollerResponse contains the response from method PrivateEndpointConnectionsComp.CreateOrUpdate.
type PrivateEndpointConnectionsCompCreateOrUpdatePollerResponse struct {
	// Poller contains an initialized poller.
	Poller *PrivateEndpointConnectionsCompCreateOrUpdatePoller

	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// PollUntilDone will poll the service endpoint until a terminal state is reached or an error is received.
// freq: the time to wait between intervals in absence of a Retry-After header. Allowed minimum is one second.
// A good starting value is 30 seconds. Note that some resources might benefit from a different value.
func (l PrivateEndpointConnectionsCompCreateOrUpdatePollerResponse) PollUntilDone(ctx context.Context, freq time.Duration) (PrivateEndpointConnectionsCompCreateOrUpdateResponse, error) {
	respType := PrivateEndpointConnectionsCompCreateOrUpdateResponse{}
	resp, err := l.Poller.pt.PollUntilDone(ctx, freq, &respType.PrivateEndpointConnection)
	if err != nil {
		return respType, err
	}
	respType.RawResponse = resp
	return respType, nil
}

// Resume rehydrates a PrivateEndpointConnectionsCompCreateOrUpdatePollerResponse from the provided client and resume token.
func (l *PrivateEndpointConnectionsCompCreateOrUpdatePollerResponse) Resume(ctx context.Context, client *PrivateEndpointConnectionsCompClient, token string) error {
	pt, err := armruntime.NewPollerFromResumeToken("PrivateEndpointConnectionsCompClient.CreateOrUpdate", token, client.pl, client.createOrUpdateHandleError)
	if err != nil {
		return err
	}
	poller := &PrivateEndpointConnectionsCompCreateOrUpdatePoller{
		pt: pt,
	}
	resp, err := poller.Poll(ctx)
	if err != nil {
		return err
	}
	l.Poller = poller
	l.RawResponse = resp
	return nil
}

// PrivateEndpointConnectionsCompCreateOrUpdateResponse contains the response from method PrivateEndpointConnectionsComp.CreateOrUpdate.
type PrivateEndpointConnectionsCompCreateOrUpdateResponse struct {
	PrivateEndpointConnectionsCompCreateOrUpdateResult
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// PrivateEndpointConnectionsCompCreateOrUpdateResult contains the result from method PrivateEndpointConnectionsComp.CreateOrUpdate.
type PrivateEndpointConnectionsCompCreateOrUpdateResult struct {
	PrivateEndpointConnection
}

// PrivateEndpointConnectionsCompDeletePollerResponse contains the response from method PrivateEndpointConnectionsComp.Delete.
type PrivateEndpointConnectionsCompDeletePollerResponse struct {
	// Poller contains an initialized poller.
	Poller *PrivateEndpointConnectionsCompDeletePoller

	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// PollUntilDone will poll the service endpoint until a terminal state is reached or an error is received.
// freq: the time to wait between intervals in absence of a Retry-After header. Allowed minimum is one second.
// A good starting value is 30 seconds. Note that some resources might benefit from a different value.
func (l PrivateEndpointConnectionsCompDeletePollerResponse) PollUntilDone(ctx context.Context, freq time.Duration) (PrivateEndpointConnectionsCompDeleteResponse, error) {
	respType := PrivateEndpointConnectionsCompDeleteResponse{}
	resp, err := l.Poller.pt.PollUntilDone(ctx, freq, nil)
	if err != nil {
		return respType, err
	}
	respType.RawResponse = resp
	return respType, nil
}

// Resume rehydrates a PrivateEndpointConnectionsCompDeletePollerResponse from the provided client and resume token.
func (l *PrivateEndpointConnectionsCompDeletePollerResponse) Resume(ctx context.Context, client *PrivateEndpointConnectionsCompClient, token string) error {
	pt, err := armruntime.NewPollerFromResumeToken("PrivateEndpointConnectionsCompClient.Delete", token, client.pl, client.deleteHandleError)
	if err != nil {
		return err
	}
	poller := &PrivateEndpointConnectionsCompDeletePoller{
		pt: pt,
	}
	resp, err := poller.Poll(ctx)
	if err != nil {
		return err
	}
	l.Poller = poller
	l.RawResponse = resp
	return nil
}

// PrivateEndpointConnectionsCompDeleteResponse contains the response from method PrivateEndpointConnectionsComp.Delete.
type PrivateEndpointConnectionsCompDeleteResponse struct {
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// PrivateEndpointConnectionsCompGetResponse contains the response from method PrivateEndpointConnectionsComp.Get.
type PrivateEndpointConnectionsCompGetResponse struct {
	PrivateEndpointConnectionsCompGetResult
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// PrivateEndpointConnectionsCompGetResult contains the result from method PrivateEndpointConnectionsComp.Get.
type PrivateEndpointConnectionsCompGetResult struct {
	PrivateEndpointConnection
}

// PrivateEndpointConnectionsCompListByServiceResponse contains the response from method PrivateEndpointConnectionsComp.ListByService.
type PrivateEndpointConnectionsCompListByServiceResponse struct {
	PrivateEndpointConnectionsCompListByServiceResult
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// PrivateEndpointConnectionsCompListByServiceResult contains the result from method PrivateEndpointConnectionsComp.ListByService.
type PrivateEndpointConnectionsCompListByServiceResult struct {
	PrivateEndpointConnectionListResult
}

// PrivateEndpointConnectionsForEDMCreateOrUpdatePollerResponse contains the response from method PrivateEndpointConnectionsForEDM.CreateOrUpdate.
type PrivateEndpointConnectionsForEDMCreateOrUpdatePollerResponse struct {
	// Poller contains an initialized poller.
	Poller *PrivateEndpointConnectionsForEDMCreateOrUpdatePoller

	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// PollUntilDone will poll the service endpoint until a terminal state is reached or an error is received.
// freq: the time to wait between intervals in absence of a Retry-After header. Allowed minimum is one second.
// A good starting value is 30 seconds. Note that some resources might benefit from a different value.
func (l PrivateEndpointConnectionsForEDMCreateOrUpdatePollerResponse) PollUntilDone(ctx context.Context, freq time.Duration) (PrivateEndpointConnectionsForEDMCreateOrUpdateResponse, error) {
	respType := PrivateEndpointConnectionsForEDMCreateOrUpdateResponse{}
	resp, err := l.Poller.pt.PollUntilDone(ctx, freq, &respType.PrivateEndpointConnection)
	if err != nil {
		return respType, err
	}
	respType.RawResponse = resp
	return respType, nil
}

// Resume rehydrates a PrivateEndpointConnectionsForEDMCreateOrUpdatePollerResponse from the provided client and resume token.
func (l *PrivateEndpointConnectionsForEDMCreateOrUpdatePollerResponse) Resume(ctx context.Context, client *PrivateEndpointConnectionsForEDMClient, token string) error {
	pt, err := armruntime.NewPollerFromResumeToken("PrivateEndpointConnectionsForEDMClient.CreateOrUpdate", token, client.pl, client.createOrUpdateHandleError)
	if err != nil {
		return err
	}
	poller := &PrivateEndpointConnectionsForEDMCreateOrUpdatePoller{
		pt: pt,
	}
	resp, err := poller.Poll(ctx)
	if err != nil {
		return err
	}
	l.Poller = poller
	l.RawResponse = resp
	return nil
}

// PrivateEndpointConnectionsForEDMCreateOrUpdateResponse contains the response from method PrivateEndpointConnectionsForEDM.CreateOrUpdate.
type PrivateEndpointConnectionsForEDMCreateOrUpdateResponse struct {
	PrivateEndpointConnectionsForEDMCreateOrUpdateResult
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// PrivateEndpointConnectionsForEDMCreateOrUpdateResult contains the result from method PrivateEndpointConnectionsForEDM.CreateOrUpdate.
type PrivateEndpointConnectionsForEDMCreateOrUpdateResult struct {
	PrivateEndpointConnection
}

// PrivateEndpointConnectionsForEDMDeletePollerResponse contains the response from method PrivateEndpointConnectionsForEDM.Delete.
type PrivateEndpointConnectionsForEDMDeletePollerResponse struct {
	// Poller contains an initialized poller.
	Poller *PrivateEndpointConnectionsForEDMDeletePoller

	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// PollUntilDone will poll the service endpoint until a terminal state is reached or an error is received.
// freq: the time to wait between intervals in absence of a Retry-After header. Allowed minimum is one second.
// A good starting value is 30 seconds. Note that some resources might benefit from a different value.
func (l PrivateEndpointConnectionsForEDMDeletePollerResponse) PollUntilDone(ctx context.Context, freq time.Duration) (PrivateEndpointConnectionsForEDMDeleteResponse, error) {
	respType := PrivateEndpointConnectionsForEDMDeleteResponse{}
	resp, err := l.Poller.pt.PollUntilDone(ctx, freq, nil)
	if err != nil {
		return respType, err
	}
	respType.RawResponse = resp
	return respType, nil
}

// Resume rehydrates a PrivateEndpointConnectionsForEDMDeletePollerResponse from the provided client and resume token.
func (l *PrivateEndpointConnectionsForEDMDeletePollerResponse) Resume(ctx context.Context, client *PrivateEndpointConnectionsForEDMClient, token string) error {
	pt, err := armruntime.NewPollerFromResumeToken("PrivateEndpointConnectionsForEDMClient.Delete", token, client.pl, client.deleteHandleError)
	if err != nil {
		return err
	}
	poller := &PrivateEndpointConnectionsForEDMDeletePoller{
		pt: pt,
	}
	resp, err := poller.Poll(ctx)
	if err != nil {
		return err
	}
	l.Poller = poller
	l.RawResponse = resp
	return nil
}

// PrivateEndpointConnectionsForEDMDeleteResponse contains the response from method PrivateEndpointConnectionsForEDM.Delete.
type PrivateEndpointConnectionsForEDMDeleteResponse struct {
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// PrivateEndpointConnectionsForEDMGetResponse contains the response from method PrivateEndpointConnectionsForEDM.Get.
type PrivateEndpointConnectionsForEDMGetResponse struct {
	PrivateEndpointConnectionsForEDMGetResult
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// PrivateEndpointConnectionsForEDMGetResult contains the result from method PrivateEndpointConnectionsForEDM.Get.
type PrivateEndpointConnectionsForEDMGetResult struct {
	PrivateEndpointConnection
}

// PrivateEndpointConnectionsForEDMListByServiceResponse contains the response from method PrivateEndpointConnectionsForEDM.ListByService.
type PrivateEndpointConnectionsForEDMListByServiceResponse struct {
	PrivateEndpointConnectionsForEDMListByServiceResult
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// PrivateEndpointConnectionsForEDMListByServiceResult contains the result from method PrivateEndpointConnectionsForEDM.ListByService.
type PrivateEndpointConnectionsForEDMListByServiceResult struct {
	PrivateEndpointConnectionListResult
}

// PrivateEndpointConnectionsForMIPPolicySyncCreateOrUpdatePollerResponse contains the response from method PrivateEndpointConnectionsForMIPPolicySync.CreateOrUpdate.
type PrivateEndpointConnectionsForMIPPolicySyncCreateOrUpdatePollerResponse struct {
	// Poller contains an initialized poller.
	Poller *PrivateEndpointConnectionsForMIPPolicySyncCreateOrUpdatePoller

	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// PollUntilDone will poll the service endpoint until a terminal state is reached or an error is received.
// freq: the time to wait between intervals in absence of a Retry-After header. Allowed minimum is one second.
// A good starting value is 30 seconds. Note that some resources might benefit from a different value.
func (l PrivateEndpointConnectionsForMIPPolicySyncCreateOrUpdatePollerResponse) PollUntilDone(ctx context.Context, freq time.Duration) (PrivateEndpointConnectionsForMIPPolicySyncCreateOrUpdateResponse, error) {
	respType := PrivateEndpointConnectionsForMIPPolicySyncCreateOrUpdateResponse{}
	resp, err := l.Poller.pt.PollUntilDone(ctx, freq, &respType.PrivateEndpointConnection)
	if err != nil {
		return respType, err
	}
	respType.RawResponse = resp
	return respType, nil
}

// Resume rehydrates a PrivateEndpointConnectionsForMIPPolicySyncCreateOrUpdatePollerResponse from the provided client and resume token.
func (l *PrivateEndpointConnectionsForMIPPolicySyncCreateOrUpdatePollerResponse) Resume(ctx context.Context, client *PrivateEndpointConnectionsForMIPPolicySyncClient, token string) error {
	pt, err := armruntime.NewPollerFromResumeToken("PrivateEndpointConnectionsForMIPPolicySyncClient.CreateOrUpdate", token, client.pl, client.createOrUpdateHandleError)
	if err != nil {
		return err
	}
	poller := &PrivateEndpointConnectionsForMIPPolicySyncCreateOrUpdatePoller{
		pt: pt,
	}
	resp, err := poller.Poll(ctx)
	if err != nil {
		return err
	}
	l.Poller = poller
	l.RawResponse = resp
	return nil
}

// PrivateEndpointConnectionsForMIPPolicySyncCreateOrUpdateResponse contains the response from method PrivateEndpointConnectionsForMIPPolicySync.CreateOrUpdate.
type PrivateEndpointConnectionsForMIPPolicySyncCreateOrUpdateResponse struct {
	PrivateEndpointConnectionsForMIPPolicySyncCreateOrUpdateResult
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// PrivateEndpointConnectionsForMIPPolicySyncCreateOrUpdateResult contains the result from method PrivateEndpointConnectionsForMIPPolicySync.CreateOrUpdate.
type PrivateEndpointConnectionsForMIPPolicySyncCreateOrUpdateResult struct {
	PrivateEndpointConnection
}

// PrivateEndpointConnectionsForMIPPolicySyncDeletePollerResponse contains the response from method PrivateEndpointConnectionsForMIPPolicySync.Delete.
type PrivateEndpointConnectionsForMIPPolicySyncDeletePollerResponse struct {
	// Poller contains an initialized poller.
	Poller *PrivateEndpointConnectionsForMIPPolicySyncDeletePoller

	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// PollUntilDone will poll the service endpoint until a terminal state is reached or an error is received.
// freq: the time to wait between intervals in absence of a Retry-After header. Allowed minimum is one second.
// A good starting value is 30 seconds. Note that some resources might benefit from a different value.
func (l PrivateEndpointConnectionsForMIPPolicySyncDeletePollerResponse) PollUntilDone(ctx context.Context, freq time.Duration) (PrivateEndpointConnectionsForMIPPolicySyncDeleteResponse, error) {
	respType := PrivateEndpointConnectionsForMIPPolicySyncDeleteResponse{}
	resp, err := l.Poller.pt.PollUntilDone(ctx, freq, nil)
	if err != nil {
		return respType, err
	}
	respType.RawResponse = resp
	return respType, nil
}

// Resume rehydrates a PrivateEndpointConnectionsForMIPPolicySyncDeletePollerResponse from the provided client and resume token.
func (l *PrivateEndpointConnectionsForMIPPolicySyncDeletePollerResponse) Resume(ctx context.Context, client *PrivateEndpointConnectionsForMIPPolicySyncClient, token string) error {
	pt, err := armruntime.NewPollerFromResumeToken("PrivateEndpointConnectionsForMIPPolicySyncClient.Delete", token, client.pl, client.deleteHandleError)
	if err != nil {
		return err
	}
	poller := &PrivateEndpointConnectionsForMIPPolicySyncDeletePoller{
		pt: pt,
	}
	resp, err := poller.Poll(ctx)
	if err != nil {
		return err
	}
	l.Poller = poller
	l.RawResponse = resp
	return nil
}

// PrivateEndpointConnectionsForMIPPolicySyncDeleteResponse contains the response from method PrivateEndpointConnectionsForMIPPolicySync.Delete.
type PrivateEndpointConnectionsForMIPPolicySyncDeleteResponse struct {
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// PrivateEndpointConnectionsForMIPPolicySyncGetResponse contains the response from method PrivateEndpointConnectionsForMIPPolicySync.Get.
type PrivateEndpointConnectionsForMIPPolicySyncGetResponse struct {
	PrivateEndpointConnectionsForMIPPolicySyncGetResult
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// PrivateEndpointConnectionsForMIPPolicySyncGetResult contains the result from method PrivateEndpointConnectionsForMIPPolicySync.Get.
type PrivateEndpointConnectionsForMIPPolicySyncGetResult struct {
	PrivateEndpointConnection
}

// PrivateEndpointConnectionsForMIPPolicySyncListByServiceResponse contains the response from method PrivateEndpointConnectionsForMIPPolicySync.ListByService.
type PrivateEndpointConnectionsForMIPPolicySyncListByServiceResponse struct {
	PrivateEndpointConnectionsForMIPPolicySyncListByServiceResult
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// PrivateEndpointConnectionsForMIPPolicySyncListByServiceResult contains the result from method PrivateEndpointConnectionsForMIPPolicySync.ListByService.
type PrivateEndpointConnectionsForMIPPolicySyncListByServiceResult struct {
	PrivateEndpointConnectionListResult
}

// PrivateEndpointConnectionsForSCCPowershellCreateOrUpdatePollerResponse contains the response from method PrivateEndpointConnectionsForSCCPowershell.CreateOrUpdate.
type PrivateEndpointConnectionsForSCCPowershellCreateOrUpdatePollerResponse struct {
	// Poller contains an initialized poller.
	Poller *PrivateEndpointConnectionsForSCCPowershellCreateOrUpdatePoller

	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// PollUntilDone will poll the service endpoint until a terminal state is reached or an error is received.
// freq: the time to wait between intervals in absence of a Retry-After header. Allowed minimum is one second.
// A good starting value is 30 seconds. Note that some resources might benefit from a different value.
func (l PrivateEndpointConnectionsForSCCPowershellCreateOrUpdatePollerResponse) PollUntilDone(ctx context.Context, freq time.Duration) (PrivateEndpointConnectionsForSCCPowershellCreateOrUpdateResponse, error) {
	respType := PrivateEndpointConnectionsForSCCPowershellCreateOrUpdateResponse{}
	resp, err := l.Poller.pt.PollUntilDone(ctx, freq, &respType.PrivateEndpointConnection)
	if err != nil {
		return respType, err
	}
	respType.RawResponse = resp
	return respType, nil
}

// Resume rehydrates a PrivateEndpointConnectionsForSCCPowershellCreateOrUpdatePollerResponse from the provided client and resume token.
func (l *PrivateEndpointConnectionsForSCCPowershellCreateOrUpdatePollerResponse) Resume(ctx context.Context, client *PrivateEndpointConnectionsForSCCPowershellClient, token string) error {
	pt, err := armruntime.NewPollerFromResumeToken("PrivateEndpointConnectionsForSCCPowershellClient.CreateOrUpdate", token, client.pl, client.createOrUpdateHandleError)
	if err != nil {
		return err
	}
	poller := &PrivateEndpointConnectionsForSCCPowershellCreateOrUpdatePoller{
		pt: pt,
	}
	resp, err := poller.Poll(ctx)
	if err != nil {
		return err
	}
	l.Poller = poller
	l.RawResponse = resp
	return nil
}

// PrivateEndpointConnectionsForSCCPowershellCreateOrUpdateResponse contains the response from method PrivateEndpointConnectionsForSCCPowershell.CreateOrUpdate.
type PrivateEndpointConnectionsForSCCPowershellCreateOrUpdateResponse struct {
	PrivateEndpointConnectionsForSCCPowershellCreateOrUpdateResult
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// PrivateEndpointConnectionsForSCCPowershellCreateOrUpdateResult contains the result from method PrivateEndpointConnectionsForSCCPowershell.CreateOrUpdate.
type PrivateEndpointConnectionsForSCCPowershellCreateOrUpdateResult struct {
	PrivateEndpointConnection
}

// PrivateEndpointConnectionsForSCCPowershellDeletePollerResponse contains the response from method PrivateEndpointConnectionsForSCCPowershell.Delete.
type PrivateEndpointConnectionsForSCCPowershellDeletePollerResponse struct {
	// Poller contains an initialized poller.
	Poller *PrivateEndpointConnectionsForSCCPowershellDeletePoller

	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// PollUntilDone will poll the service endpoint until a terminal state is reached or an error is received.
// freq: the time to wait between intervals in absence of a Retry-After header. Allowed minimum is one second.
// A good starting value is 30 seconds. Note that some resources might benefit from a different value.
func (l PrivateEndpointConnectionsForSCCPowershellDeletePollerResponse) PollUntilDone(ctx context.Context, freq time.Duration) (PrivateEndpointConnectionsForSCCPowershellDeleteResponse, error) {
	respType := PrivateEndpointConnectionsForSCCPowershellDeleteResponse{}
	resp, err := l.Poller.pt.PollUntilDone(ctx, freq, nil)
	if err != nil {
		return respType, err
	}
	respType.RawResponse = resp
	return respType, nil
}

// Resume rehydrates a PrivateEndpointConnectionsForSCCPowershellDeletePollerResponse from the provided client and resume token.
func (l *PrivateEndpointConnectionsForSCCPowershellDeletePollerResponse) Resume(ctx context.Context, client *PrivateEndpointConnectionsForSCCPowershellClient, token string) error {
	pt, err := armruntime.NewPollerFromResumeToken("PrivateEndpointConnectionsForSCCPowershellClient.Delete", token, client.pl, client.deleteHandleError)
	if err != nil {
		return err
	}
	poller := &PrivateEndpointConnectionsForSCCPowershellDeletePoller{
		pt: pt,
	}
	resp, err := poller.Poll(ctx)
	if err != nil {
		return err
	}
	l.Poller = poller
	l.RawResponse = resp
	return nil
}

// PrivateEndpointConnectionsForSCCPowershellDeleteResponse contains the response from method PrivateEndpointConnectionsForSCCPowershell.Delete.
type PrivateEndpointConnectionsForSCCPowershellDeleteResponse struct {
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// PrivateEndpointConnectionsForSCCPowershellGetResponse contains the response from method PrivateEndpointConnectionsForSCCPowershell.Get.
type PrivateEndpointConnectionsForSCCPowershellGetResponse struct {
	PrivateEndpointConnectionsForSCCPowershellGetResult
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// PrivateEndpointConnectionsForSCCPowershellGetResult contains the result from method PrivateEndpointConnectionsForSCCPowershell.Get.
type PrivateEndpointConnectionsForSCCPowershellGetResult struct {
	PrivateEndpointConnection
}

// PrivateEndpointConnectionsForSCCPowershellListByServiceResponse contains the response from method PrivateEndpointConnectionsForSCCPowershell.ListByService.
type PrivateEndpointConnectionsForSCCPowershellListByServiceResponse struct {
	PrivateEndpointConnectionsForSCCPowershellListByServiceResult
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// PrivateEndpointConnectionsForSCCPowershellListByServiceResult contains the result from method PrivateEndpointConnectionsForSCCPowershell.ListByService.
type PrivateEndpointConnectionsForSCCPowershellListByServiceResult struct {
	PrivateEndpointConnectionListResult
}

// PrivateEndpointConnectionsSecCreateOrUpdatePollerResponse contains the response from method PrivateEndpointConnectionsSec.CreateOrUpdate.
type PrivateEndpointConnectionsSecCreateOrUpdatePollerResponse struct {
	// Poller contains an initialized poller.
	Poller *PrivateEndpointConnectionsSecCreateOrUpdatePoller

	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// PollUntilDone will poll the service endpoint until a terminal state is reached or an error is received.
// freq: the time to wait between intervals in absence of a Retry-After header. Allowed minimum is one second.
// A good starting value is 30 seconds. Note that some resources might benefit from a different value.
func (l PrivateEndpointConnectionsSecCreateOrUpdatePollerResponse) PollUntilDone(ctx context.Context, freq time.Duration) (PrivateEndpointConnectionsSecCreateOrUpdateResponse, error) {
	respType := PrivateEndpointConnectionsSecCreateOrUpdateResponse{}
	resp, err := l.Poller.pt.PollUntilDone(ctx, freq, &respType.PrivateEndpointConnection)
	if err != nil {
		return respType, err
	}
	respType.RawResponse = resp
	return respType, nil
}

// Resume rehydrates a PrivateEndpointConnectionsSecCreateOrUpdatePollerResponse from the provided client and resume token.
func (l *PrivateEndpointConnectionsSecCreateOrUpdatePollerResponse) Resume(ctx context.Context, client *PrivateEndpointConnectionsSecClient, token string) error {
	pt, err := armruntime.NewPollerFromResumeToken("PrivateEndpointConnectionsSecClient.CreateOrUpdate", token, client.pl, client.createOrUpdateHandleError)
	if err != nil {
		return err
	}
	poller := &PrivateEndpointConnectionsSecCreateOrUpdatePoller{
		pt: pt,
	}
	resp, err := poller.Poll(ctx)
	if err != nil {
		return err
	}
	l.Poller = poller
	l.RawResponse = resp
	return nil
}

// PrivateEndpointConnectionsSecCreateOrUpdateResponse contains the response from method PrivateEndpointConnectionsSec.CreateOrUpdate.
type PrivateEndpointConnectionsSecCreateOrUpdateResponse struct {
	PrivateEndpointConnectionsSecCreateOrUpdateResult
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// PrivateEndpointConnectionsSecCreateOrUpdateResult contains the result from method PrivateEndpointConnectionsSec.CreateOrUpdate.
type PrivateEndpointConnectionsSecCreateOrUpdateResult struct {
	PrivateEndpointConnection
}

// PrivateEndpointConnectionsSecDeletePollerResponse contains the response from method PrivateEndpointConnectionsSec.Delete.
type PrivateEndpointConnectionsSecDeletePollerResponse struct {
	// Poller contains an initialized poller.
	Poller *PrivateEndpointConnectionsSecDeletePoller

	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// PollUntilDone will poll the service endpoint until a terminal state is reached or an error is received.
// freq: the time to wait between intervals in absence of a Retry-After header. Allowed minimum is one second.
// A good starting value is 30 seconds. Note that some resources might benefit from a different value.
func (l PrivateEndpointConnectionsSecDeletePollerResponse) PollUntilDone(ctx context.Context, freq time.Duration) (PrivateEndpointConnectionsSecDeleteResponse, error) {
	respType := PrivateEndpointConnectionsSecDeleteResponse{}
	resp, err := l.Poller.pt.PollUntilDone(ctx, freq, nil)
	if err != nil {
		return respType, err
	}
	respType.RawResponse = resp
	return respType, nil
}

// Resume rehydrates a PrivateEndpointConnectionsSecDeletePollerResponse from the provided client and resume token.
func (l *PrivateEndpointConnectionsSecDeletePollerResponse) Resume(ctx context.Context, client *PrivateEndpointConnectionsSecClient, token string) error {
	pt, err := armruntime.NewPollerFromResumeToken("PrivateEndpointConnectionsSecClient.Delete", token, client.pl, client.deleteHandleError)
	if err != nil {
		return err
	}
	poller := &PrivateEndpointConnectionsSecDeletePoller{
		pt: pt,
	}
	resp, err := poller.Poll(ctx)
	if err != nil {
		return err
	}
	l.Poller = poller
	l.RawResponse = resp
	return nil
}

// PrivateEndpointConnectionsSecDeleteResponse contains the response from method PrivateEndpointConnectionsSec.Delete.
type PrivateEndpointConnectionsSecDeleteResponse struct {
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// PrivateEndpointConnectionsSecGetResponse contains the response from method PrivateEndpointConnectionsSec.Get.
type PrivateEndpointConnectionsSecGetResponse struct {
	PrivateEndpointConnectionsSecGetResult
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// PrivateEndpointConnectionsSecGetResult contains the result from method PrivateEndpointConnectionsSec.Get.
type PrivateEndpointConnectionsSecGetResult struct {
	PrivateEndpointConnection
}

// PrivateEndpointConnectionsSecListByServiceResponse contains the response from method PrivateEndpointConnectionsSec.ListByService.
type PrivateEndpointConnectionsSecListByServiceResponse struct {
	PrivateEndpointConnectionsSecListByServiceResult
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// PrivateEndpointConnectionsSecListByServiceResult contains the result from method PrivateEndpointConnectionsSec.ListByService.
type PrivateEndpointConnectionsSecListByServiceResult struct {
	PrivateEndpointConnectionListResult
}

// PrivateLinkResourcesAdtAPIGetResponse contains the response from method PrivateLinkResourcesAdtAPI.Get.
type PrivateLinkResourcesAdtAPIGetResponse struct {
	PrivateLinkResourcesAdtAPIGetResult
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// PrivateLinkResourcesAdtAPIGetResult contains the result from method PrivateLinkResourcesAdtAPI.Get.
type PrivateLinkResourcesAdtAPIGetResult struct {
	PrivateLinkResource
}

// PrivateLinkResourcesAdtAPIListByServiceResponse contains the response from method PrivateLinkResourcesAdtAPI.ListByService.
type PrivateLinkResourcesAdtAPIListByServiceResponse struct {
	PrivateLinkResourcesAdtAPIListByServiceResult
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// PrivateLinkResourcesAdtAPIListByServiceResult contains the result from method PrivateLinkResourcesAdtAPI.ListByService.
type PrivateLinkResourcesAdtAPIListByServiceResult struct {
	PrivateLinkResourceListResult
}

// PrivateLinkResourcesCompGetResponse contains the response from method PrivateLinkResourcesComp.Get.
type PrivateLinkResourcesCompGetResponse struct {
	PrivateLinkResourcesCompGetResult
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// PrivateLinkResourcesCompGetResult contains the result from method PrivateLinkResourcesComp.Get.
type PrivateLinkResourcesCompGetResult struct {
	PrivateLinkResource
}

// PrivateLinkResourcesCompListByServiceResponse contains the response from method PrivateLinkResourcesComp.ListByService.
type PrivateLinkResourcesCompListByServiceResponse struct {
	PrivateLinkResourcesCompListByServiceResult
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// PrivateLinkResourcesCompListByServiceResult contains the result from method PrivateLinkResourcesComp.ListByService.
type PrivateLinkResourcesCompListByServiceResult struct {
	PrivateLinkResourceListResult
}

// PrivateLinkResourcesForMIPPolicySyncGetResponse contains the response from method PrivateLinkResourcesForMIPPolicySync.Get.
type PrivateLinkResourcesForMIPPolicySyncGetResponse struct {
	PrivateLinkResourcesForMIPPolicySyncGetResult
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// PrivateLinkResourcesForMIPPolicySyncGetResult contains the result from method PrivateLinkResourcesForMIPPolicySync.Get.
type PrivateLinkResourcesForMIPPolicySyncGetResult struct {
	PrivateLinkResource
}

// PrivateLinkResourcesForMIPPolicySyncListByServiceResponse contains the response from method PrivateLinkResourcesForMIPPolicySync.ListByService.
type PrivateLinkResourcesForMIPPolicySyncListByServiceResponse struct {
	PrivateLinkResourcesForMIPPolicySyncListByServiceResult
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// PrivateLinkResourcesForMIPPolicySyncListByServiceResult contains the result from method PrivateLinkResourcesForMIPPolicySync.ListByService.
type PrivateLinkResourcesForMIPPolicySyncListByServiceResult struct {
	PrivateLinkResourceListResult
}

// PrivateLinkResourcesForSCCPowershellGetResponse contains the response from method PrivateLinkResourcesForSCCPowershell.Get.
type PrivateLinkResourcesForSCCPowershellGetResponse struct {
	PrivateLinkResourcesForSCCPowershellGetResult
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// PrivateLinkResourcesForSCCPowershellGetResult contains the result from method PrivateLinkResourcesForSCCPowershell.Get.
type PrivateLinkResourcesForSCCPowershellGetResult struct {
	PrivateLinkResource
}

// PrivateLinkResourcesForSCCPowershellListByServiceResponse contains the response from method PrivateLinkResourcesForSCCPowershell.ListByService.
type PrivateLinkResourcesForSCCPowershellListByServiceResponse struct {
	PrivateLinkResourcesForSCCPowershellListByServiceResult
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// PrivateLinkResourcesForSCCPowershellListByServiceResult contains the result from method PrivateLinkResourcesForSCCPowershell.ListByService.
type PrivateLinkResourcesForSCCPowershellListByServiceResult struct {
	PrivateLinkResourceListResult
}

// PrivateLinkResourcesGetResponse contains the response from method PrivateLinkResources.Get.
type PrivateLinkResourcesGetResponse struct {
	PrivateLinkResourcesGetResult
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// PrivateLinkResourcesGetResult contains the result from method PrivateLinkResources.Get.
type PrivateLinkResourcesGetResult struct {
	PrivateLinkResource
}

// PrivateLinkResourcesListByServiceResponse contains the response from method PrivateLinkResources.ListByService.
type PrivateLinkResourcesListByServiceResponse struct {
	PrivateLinkResourcesListByServiceResult
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// PrivateLinkResourcesListByServiceResult contains the result from method PrivateLinkResources.ListByService.
type PrivateLinkResourcesListByServiceResult struct {
	PrivateLinkResourceListResult
}

// PrivateLinkResourcesSecGetResponse contains the response from method PrivateLinkResourcesSec.Get.
type PrivateLinkResourcesSecGetResponse struct {
	PrivateLinkResourcesSecGetResult
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// PrivateLinkResourcesSecGetResult contains the result from method PrivateLinkResourcesSec.Get.
type PrivateLinkResourcesSecGetResult struct {
	PrivateLinkResource
}

// PrivateLinkResourcesSecListByServiceResponse contains the response from method PrivateLinkResourcesSec.ListByService.
type PrivateLinkResourcesSecListByServiceResponse struct {
	PrivateLinkResourcesSecListByServiceResult
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// PrivateLinkResourcesSecListByServiceResult contains the result from method PrivateLinkResourcesSec.ListByService.
type PrivateLinkResourcesSecListByServiceResult struct {
	PrivateLinkResourceListResult
}

// PrivateLinkServicesForEDMUploadCreateOrUpdatePollerResponse contains the response from method PrivateLinkServicesForEDMUpload.CreateOrUpdate.
type PrivateLinkServicesForEDMUploadCreateOrUpdatePollerResponse struct {
	// Poller contains an initialized poller.
	Poller *PrivateLinkServicesForEDMUploadCreateOrUpdatePoller

	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// PollUntilDone will poll the service endpoint until a terminal state is reached or an error is received.
// freq: the time to wait between intervals in absence of a Retry-After header. Allowed minimum is one second.
// A good starting value is 30 seconds. Note that some resources might benefit from a different value.
func (l PrivateLinkServicesForEDMUploadCreateOrUpdatePollerResponse) PollUntilDone(ctx context.Context, freq time.Duration) (PrivateLinkServicesForEDMUploadCreateOrUpdateResponse, error) {
	respType := PrivateLinkServicesForEDMUploadCreateOrUpdateResponse{}
	resp, err := l.Poller.pt.PollUntilDone(ctx, freq, &respType.PrivateLinkServicesForEDMUploadDescription)
	if err != nil {
		return respType, err
	}
	respType.RawResponse = resp
	return respType, nil
}

// Resume rehydrates a PrivateLinkServicesForEDMUploadCreateOrUpdatePollerResponse from the provided client and resume token.
func (l *PrivateLinkServicesForEDMUploadCreateOrUpdatePollerResponse) Resume(ctx context.Context, client *PrivateLinkServicesForEDMUploadClient, token string) error {
	pt, err := armruntime.NewPollerFromResumeToken("PrivateLinkServicesForEDMUploadClient.CreateOrUpdate", token, client.pl, client.createOrUpdateHandleError)
	if err != nil {
		return err
	}
	poller := &PrivateLinkServicesForEDMUploadCreateOrUpdatePoller{
		pt: pt,
	}
	resp, err := poller.Poll(ctx)
	if err != nil {
		return err
	}
	l.Poller = poller
	l.RawResponse = resp
	return nil
}

// PrivateLinkServicesForEDMUploadCreateOrUpdateResponse contains the response from method PrivateLinkServicesForEDMUpload.CreateOrUpdate.
type PrivateLinkServicesForEDMUploadCreateOrUpdateResponse struct {
	PrivateLinkServicesForEDMUploadCreateOrUpdateResult
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// PrivateLinkServicesForEDMUploadCreateOrUpdateResult contains the result from method PrivateLinkServicesForEDMUpload.CreateOrUpdate.
type PrivateLinkServicesForEDMUploadCreateOrUpdateResult struct {
	PrivateLinkServicesForEDMUploadDescription
}

// PrivateLinkServicesForEDMUploadGetResponse contains the response from method PrivateLinkServicesForEDMUpload.Get.
type PrivateLinkServicesForEDMUploadGetResponse struct {
	PrivateLinkServicesForEDMUploadGetResult
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// PrivateLinkServicesForEDMUploadGetResult contains the result from method PrivateLinkServicesForEDMUpload.Get.
type PrivateLinkServicesForEDMUploadGetResult struct {
	PrivateLinkServicesForEDMUploadDescription
}

// PrivateLinkServicesForEDMUploadListByResourceGroupResponse contains the response from method PrivateLinkServicesForEDMUpload.ListByResourceGroup.
type PrivateLinkServicesForEDMUploadListByResourceGroupResponse struct {
	PrivateLinkServicesForEDMUploadListByResourceGroupResult
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// PrivateLinkServicesForEDMUploadListByResourceGroupResult contains the result from method PrivateLinkServicesForEDMUpload.ListByResourceGroup.
type PrivateLinkServicesForEDMUploadListByResourceGroupResult struct {
	PrivateLinkServicesForEDMUploadDescriptionListResult
}

// PrivateLinkServicesForEDMUploadListResponse contains the response from method PrivateLinkServicesForEDMUpload.List.
type PrivateLinkServicesForEDMUploadListResponse struct {
	PrivateLinkServicesForEDMUploadListResult
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// PrivateLinkServicesForEDMUploadListResult contains the result from method PrivateLinkServicesForEDMUpload.List.
type PrivateLinkServicesForEDMUploadListResult struct {
	PrivateLinkServicesForEDMUploadDescriptionListResult
}

// PrivateLinkServicesForEDMUploadUpdatePollerResponse contains the response from method PrivateLinkServicesForEDMUpload.Update.
type PrivateLinkServicesForEDMUploadUpdatePollerResponse struct {
	// Poller contains an initialized poller.
	Poller *PrivateLinkServicesForEDMUploadUpdatePoller

	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// PollUntilDone will poll the service endpoint until a terminal state is reached or an error is received.
// freq: the time to wait between intervals in absence of a Retry-After header. Allowed minimum is one second.
// A good starting value is 30 seconds. Note that some resources might benefit from a different value.
func (l PrivateLinkServicesForEDMUploadUpdatePollerResponse) PollUntilDone(ctx context.Context, freq time.Duration) (PrivateLinkServicesForEDMUploadUpdateResponse, error) {
	respType := PrivateLinkServicesForEDMUploadUpdateResponse{}
	resp, err := l.Poller.pt.PollUntilDone(ctx, freq, &respType.PrivateLinkServicesForEDMUploadDescription)
	if err != nil {
		return respType, err
	}
	respType.RawResponse = resp
	return respType, nil
}

// Resume rehydrates a PrivateLinkServicesForEDMUploadUpdatePollerResponse from the provided client and resume token.
func (l *PrivateLinkServicesForEDMUploadUpdatePollerResponse) Resume(ctx context.Context, client *PrivateLinkServicesForEDMUploadClient, token string) error {
	pt, err := armruntime.NewPollerFromResumeToken("PrivateLinkServicesForEDMUploadClient.Update", token, client.pl, client.updateHandleError)
	if err != nil {
		return err
	}
	poller := &PrivateLinkServicesForEDMUploadUpdatePoller{
		pt: pt,
	}
	resp, err := poller.Poll(ctx)
	if err != nil {
		return err
	}
	l.Poller = poller
	l.RawResponse = resp
	return nil
}

// PrivateLinkServicesForEDMUploadUpdateResponse contains the response from method PrivateLinkServicesForEDMUpload.Update.
type PrivateLinkServicesForEDMUploadUpdateResponse struct {
	PrivateLinkServicesForEDMUploadUpdateResult
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// PrivateLinkServicesForEDMUploadUpdateResult contains the result from method PrivateLinkServicesForEDMUpload.Update.
type PrivateLinkServicesForEDMUploadUpdateResult struct {
	PrivateLinkServicesForEDMUploadDescription
}

// PrivateLinkServicesForM365ComplianceCenterCreateOrUpdatePollerResponse contains the response from method PrivateLinkServicesForM365ComplianceCenter.CreateOrUpdate.
type PrivateLinkServicesForM365ComplianceCenterCreateOrUpdatePollerResponse struct {
	// Poller contains an initialized poller.
	Poller *PrivateLinkServicesForM365ComplianceCenterCreateOrUpdatePoller

	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// PollUntilDone will poll the service endpoint until a terminal state is reached or an error is received.
// freq: the time to wait between intervals in absence of a Retry-After header. Allowed minimum is one second.
// A good starting value is 30 seconds. Note that some resources might benefit from a different value.
func (l PrivateLinkServicesForM365ComplianceCenterCreateOrUpdatePollerResponse) PollUntilDone(ctx context.Context, freq time.Duration) (PrivateLinkServicesForM365ComplianceCenterCreateOrUpdateResponse, error) {
	respType := PrivateLinkServicesForM365ComplianceCenterCreateOrUpdateResponse{}
	resp, err := l.Poller.pt.PollUntilDone(ctx, freq, &respType.PrivateLinkServicesForM365ComplianceCenterDescription)
	if err != nil {
		return respType, err
	}
	respType.RawResponse = resp
	return respType, nil
}

// Resume rehydrates a PrivateLinkServicesForM365ComplianceCenterCreateOrUpdatePollerResponse from the provided client and resume token.
func (l *PrivateLinkServicesForM365ComplianceCenterCreateOrUpdatePollerResponse) Resume(ctx context.Context, client *PrivateLinkServicesForM365ComplianceCenterClient, token string) error {
	pt, err := armruntime.NewPollerFromResumeToken("PrivateLinkServicesForM365ComplianceCenterClient.CreateOrUpdate", token, client.pl, client.createOrUpdateHandleError)
	if err != nil {
		return err
	}
	poller := &PrivateLinkServicesForM365ComplianceCenterCreateOrUpdatePoller{
		pt: pt,
	}
	resp, err := poller.Poll(ctx)
	if err != nil {
		return err
	}
	l.Poller = poller
	l.RawResponse = resp
	return nil
}

// PrivateLinkServicesForM365ComplianceCenterCreateOrUpdateResponse contains the response from method PrivateLinkServicesForM365ComplianceCenter.CreateOrUpdate.
type PrivateLinkServicesForM365ComplianceCenterCreateOrUpdateResponse struct {
	PrivateLinkServicesForM365ComplianceCenterCreateOrUpdateResult
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// PrivateLinkServicesForM365ComplianceCenterCreateOrUpdateResult contains the result from method PrivateLinkServicesForM365ComplianceCenter.CreateOrUpdate.
type PrivateLinkServicesForM365ComplianceCenterCreateOrUpdateResult struct {
	PrivateLinkServicesForM365ComplianceCenterDescription
}

// PrivateLinkServicesForM365ComplianceCenterDeletePollerResponse contains the response from method PrivateLinkServicesForM365ComplianceCenter.Delete.
type PrivateLinkServicesForM365ComplianceCenterDeletePollerResponse struct {
	// Poller contains an initialized poller.
	Poller *PrivateLinkServicesForM365ComplianceCenterDeletePoller

	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// PollUntilDone will poll the service endpoint until a terminal state is reached or an error is received.
// freq: the time to wait between intervals in absence of a Retry-After header. Allowed minimum is one second.
// A good starting value is 30 seconds. Note that some resources might benefit from a different value.
func (l PrivateLinkServicesForM365ComplianceCenterDeletePollerResponse) PollUntilDone(ctx context.Context, freq time.Duration) (PrivateLinkServicesForM365ComplianceCenterDeleteResponse, error) {
	respType := PrivateLinkServicesForM365ComplianceCenterDeleteResponse{}
	resp, err := l.Poller.pt.PollUntilDone(ctx, freq, nil)
	if err != nil {
		return respType, err
	}
	respType.RawResponse = resp
	return respType, nil
}

// Resume rehydrates a PrivateLinkServicesForM365ComplianceCenterDeletePollerResponse from the provided client and resume token.
func (l *PrivateLinkServicesForM365ComplianceCenterDeletePollerResponse) Resume(ctx context.Context, client *PrivateLinkServicesForM365ComplianceCenterClient, token string) error {
	pt, err := armruntime.NewPollerFromResumeToken("PrivateLinkServicesForM365ComplianceCenterClient.Delete", token, client.pl, client.deleteHandleError)
	if err != nil {
		return err
	}
	poller := &PrivateLinkServicesForM365ComplianceCenterDeletePoller{
		pt: pt,
	}
	resp, err := poller.Poll(ctx)
	if err != nil {
		return err
	}
	l.Poller = poller
	l.RawResponse = resp
	return nil
}

// PrivateLinkServicesForM365ComplianceCenterDeleteResponse contains the response from method PrivateLinkServicesForM365ComplianceCenter.Delete.
type PrivateLinkServicesForM365ComplianceCenterDeleteResponse struct {
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// PrivateLinkServicesForM365ComplianceCenterGetResponse contains the response from method PrivateLinkServicesForM365ComplianceCenter.Get.
type PrivateLinkServicesForM365ComplianceCenterGetResponse struct {
	PrivateLinkServicesForM365ComplianceCenterGetResult
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// PrivateLinkServicesForM365ComplianceCenterGetResult contains the result from method PrivateLinkServicesForM365ComplianceCenter.Get.
type PrivateLinkServicesForM365ComplianceCenterGetResult struct {
	PrivateLinkServicesForM365ComplianceCenterDescription
}

// PrivateLinkServicesForM365ComplianceCenterListByResourceGroupResponse contains the response from method PrivateLinkServicesForM365ComplianceCenter.ListByResourceGroup.
type PrivateLinkServicesForM365ComplianceCenterListByResourceGroupResponse struct {
	PrivateLinkServicesForM365ComplianceCenterListByResourceGroupResult
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// PrivateLinkServicesForM365ComplianceCenterListByResourceGroupResult contains the result from method PrivateLinkServicesForM365ComplianceCenter.ListByResourceGroup.
type PrivateLinkServicesForM365ComplianceCenterListByResourceGroupResult struct {
	PrivateLinkServicesForM365ComplianceCenterDescriptionListResult
}

// PrivateLinkServicesForM365ComplianceCenterListResponse contains the response from method PrivateLinkServicesForM365ComplianceCenter.List.
type PrivateLinkServicesForM365ComplianceCenterListResponse struct {
	PrivateLinkServicesForM365ComplianceCenterListResult
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// PrivateLinkServicesForM365ComplianceCenterListResult contains the result from method PrivateLinkServicesForM365ComplianceCenter.List.
type PrivateLinkServicesForM365ComplianceCenterListResult struct {
	PrivateLinkServicesForM365ComplianceCenterDescriptionListResult
}

// PrivateLinkServicesForM365ComplianceCenterUpdatePollerResponse contains the response from method PrivateLinkServicesForM365ComplianceCenter.Update.
type PrivateLinkServicesForM365ComplianceCenterUpdatePollerResponse struct {
	// Poller contains an initialized poller.
	Poller *PrivateLinkServicesForM365ComplianceCenterUpdatePoller

	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// PollUntilDone will poll the service endpoint until a terminal state is reached or an error is received.
// freq: the time to wait between intervals in absence of a Retry-After header. Allowed minimum is one second.
// A good starting value is 30 seconds. Note that some resources might benefit from a different value.
func (l PrivateLinkServicesForM365ComplianceCenterUpdatePollerResponse) PollUntilDone(ctx context.Context, freq time.Duration) (PrivateLinkServicesForM365ComplianceCenterUpdateResponse, error) {
	respType := PrivateLinkServicesForM365ComplianceCenterUpdateResponse{}
	resp, err := l.Poller.pt.PollUntilDone(ctx, freq, &respType.PrivateLinkServicesForM365ComplianceCenterDescription)
	if err != nil {
		return respType, err
	}
	respType.RawResponse = resp
	return respType, nil
}

// Resume rehydrates a PrivateLinkServicesForM365ComplianceCenterUpdatePollerResponse from the provided client and resume token.
func (l *PrivateLinkServicesForM365ComplianceCenterUpdatePollerResponse) Resume(ctx context.Context, client *PrivateLinkServicesForM365ComplianceCenterClient, token string) error {
	pt, err := armruntime.NewPollerFromResumeToken("PrivateLinkServicesForM365ComplianceCenterClient.Update", token, client.pl, client.updateHandleError)
	if err != nil {
		return err
	}
	poller := &PrivateLinkServicesForM365ComplianceCenterUpdatePoller{
		pt: pt,
	}
	resp, err := poller.Poll(ctx)
	if err != nil {
		return err
	}
	l.Poller = poller
	l.RawResponse = resp
	return nil
}

// PrivateLinkServicesForM365ComplianceCenterUpdateResponse contains the response from method PrivateLinkServicesForM365ComplianceCenter.Update.
type PrivateLinkServicesForM365ComplianceCenterUpdateResponse struct {
	PrivateLinkServicesForM365ComplianceCenterUpdateResult
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// PrivateLinkServicesForM365ComplianceCenterUpdateResult contains the result from method PrivateLinkServicesForM365ComplianceCenter.Update.
type PrivateLinkServicesForM365ComplianceCenterUpdateResult struct {
	PrivateLinkServicesForM365ComplianceCenterDescription
}

// PrivateLinkServicesForM365SecurityCenterCreateOrUpdatePollerResponse contains the response from method PrivateLinkServicesForM365SecurityCenter.CreateOrUpdate.
type PrivateLinkServicesForM365SecurityCenterCreateOrUpdatePollerResponse struct {
	// Poller contains an initialized poller.
	Poller *PrivateLinkServicesForM365SecurityCenterCreateOrUpdatePoller

	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// PollUntilDone will poll the service endpoint until a terminal state is reached or an error is received.
// freq: the time to wait between intervals in absence of a Retry-After header. Allowed minimum is one second.
// A good starting value is 30 seconds. Note that some resources might benefit from a different value.
func (l PrivateLinkServicesForM365SecurityCenterCreateOrUpdatePollerResponse) PollUntilDone(ctx context.Context, freq time.Duration) (PrivateLinkServicesForM365SecurityCenterCreateOrUpdateResponse, error) {
	respType := PrivateLinkServicesForM365SecurityCenterCreateOrUpdateResponse{}
	resp, err := l.Poller.pt.PollUntilDone(ctx, freq, &respType.PrivateLinkServicesForM365SecurityCenterDescription)
	if err != nil {
		return respType, err
	}
	respType.RawResponse = resp
	return respType, nil
}

// Resume rehydrates a PrivateLinkServicesForM365SecurityCenterCreateOrUpdatePollerResponse from the provided client and resume token.
func (l *PrivateLinkServicesForM365SecurityCenterCreateOrUpdatePollerResponse) Resume(ctx context.Context, client *PrivateLinkServicesForM365SecurityCenterClient, token string) error {
	pt, err := armruntime.NewPollerFromResumeToken("PrivateLinkServicesForM365SecurityCenterClient.CreateOrUpdate", token, client.pl, client.createOrUpdateHandleError)
	if err != nil {
		return err
	}
	poller := &PrivateLinkServicesForM365SecurityCenterCreateOrUpdatePoller{
		pt: pt,
	}
	resp, err := poller.Poll(ctx)
	if err != nil {
		return err
	}
	l.Poller = poller
	l.RawResponse = resp
	return nil
}

// PrivateLinkServicesForM365SecurityCenterCreateOrUpdateResponse contains the response from method PrivateLinkServicesForM365SecurityCenter.CreateOrUpdate.
type PrivateLinkServicesForM365SecurityCenterCreateOrUpdateResponse struct {
	PrivateLinkServicesForM365SecurityCenterCreateOrUpdateResult
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// PrivateLinkServicesForM365SecurityCenterCreateOrUpdateResult contains the result from method PrivateLinkServicesForM365SecurityCenter.CreateOrUpdate.
type PrivateLinkServicesForM365SecurityCenterCreateOrUpdateResult struct {
	PrivateLinkServicesForM365SecurityCenterDescription
}

// PrivateLinkServicesForM365SecurityCenterDeletePollerResponse contains the response from method PrivateLinkServicesForM365SecurityCenter.Delete.
type PrivateLinkServicesForM365SecurityCenterDeletePollerResponse struct {
	// Poller contains an initialized poller.
	Poller *PrivateLinkServicesForM365SecurityCenterDeletePoller

	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// PollUntilDone will poll the service endpoint until a terminal state is reached or an error is received.
// freq: the time to wait between intervals in absence of a Retry-After header. Allowed minimum is one second.
// A good starting value is 30 seconds. Note that some resources might benefit from a different value.
func (l PrivateLinkServicesForM365SecurityCenterDeletePollerResponse) PollUntilDone(ctx context.Context, freq time.Duration) (PrivateLinkServicesForM365SecurityCenterDeleteResponse, error) {
	respType := PrivateLinkServicesForM365SecurityCenterDeleteResponse{}
	resp, err := l.Poller.pt.PollUntilDone(ctx, freq, nil)
	if err != nil {
		return respType, err
	}
	respType.RawResponse = resp
	return respType, nil
}

// Resume rehydrates a PrivateLinkServicesForM365SecurityCenterDeletePollerResponse from the provided client and resume token.
func (l *PrivateLinkServicesForM365SecurityCenterDeletePollerResponse) Resume(ctx context.Context, client *PrivateLinkServicesForM365SecurityCenterClient, token string) error {
	pt, err := armruntime.NewPollerFromResumeToken("PrivateLinkServicesForM365SecurityCenterClient.Delete", token, client.pl, client.deleteHandleError)
	if err != nil {
		return err
	}
	poller := &PrivateLinkServicesForM365SecurityCenterDeletePoller{
		pt: pt,
	}
	resp, err := poller.Poll(ctx)
	if err != nil {
		return err
	}
	l.Poller = poller
	l.RawResponse = resp
	return nil
}

// PrivateLinkServicesForM365SecurityCenterDeleteResponse contains the response from method PrivateLinkServicesForM365SecurityCenter.Delete.
type PrivateLinkServicesForM365SecurityCenterDeleteResponse struct {
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// PrivateLinkServicesForM365SecurityCenterGetResponse contains the response from method PrivateLinkServicesForM365SecurityCenter.Get.
type PrivateLinkServicesForM365SecurityCenterGetResponse struct {
	PrivateLinkServicesForM365SecurityCenterGetResult
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// PrivateLinkServicesForM365SecurityCenterGetResult contains the result from method PrivateLinkServicesForM365SecurityCenter.Get.
type PrivateLinkServicesForM365SecurityCenterGetResult struct {
	PrivateLinkServicesForM365SecurityCenterDescription
}

// PrivateLinkServicesForM365SecurityCenterListByResourceGroupResponse contains the response from method PrivateLinkServicesForM365SecurityCenter.ListByResourceGroup.
type PrivateLinkServicesForM365SecurityCenterListByResourceGroupResponse struct {
	PrivateLinkServicesForM365SecurityCenterListByResourceGroupResult
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// PrivateLinkServicesForM365SecurityCenterListByResourceGroupResult contains the result from method PrivateLinkServicesForM365SecurityCenter.ListByResourceGroup.
type PrivateLinkServicesForM365SecurityCenterListByResourceGroupResult struct {
	PrivateLinkServicesForM365SecurityCenterDescriptionListResult
}

// PrivateLinkServicesForM365SecurityCenterListResponse contains the response from method PrivateLinkServicesForM365SecurityCenter.List.
type PrivateLinkServicesForM365SecurityCenterListResponse struct {
	PrivateLinkServicesForM365SecurityCenterListResult
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// PrivateLinkServicesForM365SecurityCenterListResult contains the result from method PrivateLinkServicesForM365SecurityCenter.List.
type PrivateLinkServicesForM365SecurityCenterListResult struct {
	PrivateLinkServicesForM365SecurityCenterDescriptionListResult
}

// PrivateLinkServicesForM365SecurityCenterUpdatePollerResponse contains the response from method PrivateLinkServicesForM365SecurityCenter.Update.
type PrivateLinkServicesForM365SecurityCenterUpdatePollerResponse struct {
	// Poller contains an initialized poller.
	Poller *PrivateLinkServicesForM365SecurityCenterUpdatePoller

	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// PollUntilDone will poll the service endpoint until a terminal state is reached or an error is received.
// freq: the time to wait between intervals in absence of a Retry-After header. Allowed minimum is one second.
// A good starting value is 30 seconds. Note that some resources might benefit from a different value.
func (l PrivateLinkServicesForM365SecurityCenterUpdatePollerResponse) PollUntilDone(ctx context.Context, freq time.Duration) (PrivateLinkServicesForM365SecurityCenterUpdateResponse, error) {
	respType := PrivateLinkServicesForM365SecurityCenterUpdateResponse{}
	resp, err := l.Poller.pt.PollUntilDone(ctx, freq, &respType.PrivateLinkServicesForM365SecurityCenterDescription)
	if err != nil {
		return respType, err
	}
	respType.RawResponse = resp
	return respType, nil
}

// Resume rehydrates a PrivateLinkServicesForM365SecurityCenterUpdatePollerResponse from the provided client and resume token.
func (l *PrivateLinkServicesForM365SecurityCenterUpdatePollerResponse) Resume(ctx context.Context, client *PrivateLinkServicesForM365SecurityCenterClient, token string) error {
	pt, err := armruntime.NewPollerFromResumeToken("PrivateLinkServicesForM365SecurityCenterClient.Update", token, client.pl, client.updateHandleError)
	if err != nil {
		return err
	}
	poller := &PrivateLinkServicesForM365SecurityCenterUpdatePoller{
		pt: pt,
	}
	resp, err := poller.Poll(ctx)
	if err != nil {
		return err
	}
	l.Poller = poller
	l.RawResponse = resp
	return nil
}

// PrivateLinkServicesForM365SecurityCenterUpdateResponse contains the response from method PrivateLinkServicesForM365SecurityCenter.Update.
type PrivateLinkServicesForM365SecurityCenterUpdateResponse struct {
	PrivateLinkServicesForM365SecurityCenterUpdateResult
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// PrivateLinkServicesForM365SecurityCenterUpdateResult contains the result from method PrivateLinkServicesForM365SecurityCenter.Update.
type PrivateLinkServicesForM365SecurityCenterUpdateResult struct {
	PrivateLinkServicesForM365SecurityCenterDescription
}

// PrivateLinkServicesForMIPPolicySyncCreateOrUpdatePollerResponse contains the response from method PrivateLinkServicesForMIPPolicySync.CreateOrUpdate.
type PrivateLinkServicesForMIPPolicySyncCreateOrUpdatePollerResponse struct {
	// Poller contains an initialized poller.
	Poller *PrivateLinkServicesForMIPPolicySyncCreateOrUpdatePoller

	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// PollUntilDone will poll the service endpoint until a terminal state is reached or an error is received.
// freq: the time to wait between intervals in absence of a Retry-After header. Allowed minimum is one second.
// A good starting value is 30 seconds. Note that some resources might benefit from a different value.
func (l PrivateLinkServicesForMIPPolicySyncCreateOrUpdatePollerResponse) PollUntilDone(ctx context.Context, freq time.Duration) (PrivateLinkServicesForMIPPolicySyncCreateOrUpdateResponse, error) {
	respType := PrivateLinkServicesForMIPPolicySyncCreateOrUpdateResponse{}
	resp, err := l.Poller.pt.PollUntilDone(ctx, freq, &respType.PrivateLinkServicesForMIPPolicySyncDescription)
	if err != nil {
		return respType, err
	}
	respType.RawResponse = resp
	return respType, nil
}

// Resume rehydrates a PrivateLinkServicesForMIPPolicySyncCreateOrUpdatePollerResponse from the provided client and resume token.
func (l *PrivateLinkServicesForMIPPolicySyncCreateOrUpdatePollerResponse) Resume(ctx context.Context, client *PrivateLinkServicesForMIPPolicySyncClient, token string) error {
	pt, err := armruntime.NewPollerFromResumeToken("PrivateLinkServicesForMIPPolicySyncClient.CreateOrUpdate", token, client.pl, client.createOrUpdateHandleError)
	if err != nil {
		return err
	}
	poller := &PrivateLinkServicesForMIPPolicySyncCreateOrUpdatePoller{
		pt: pt,
	}
	resp, err := poller.Poll(ctx)
	if err != nil {
		return err
	}
	l.Poller = poller
	l.RawResponse = resp
	return nil
}

// PrivateLinkServicesForMIPPolicySyncCreateOrUpdateResponse contains the response from method PrivateLinkServicesForMIPPolicySync.CreateOrUpdate.
type PrivateLinkServicesForMIPPolicySyncCreateOrUpdateResponse struct {
	PrivateLinkServicesForMIPPolicySyncCreateOrUpdateResult
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// PrivateLinkServicesForMIPPolicySyncCreateOrUpdateResult contains the result from method PrivateLinkServicesForMIPPolicySync.CreateOrUpdate.
type PrivateLinkServicesForMIPPolicySyncCreateOrUpdateResult struct {
	PrivateLinkServicesForMIPPolicySyncDescription
}

// PrivateLinkServicesForMIPPolicySyncDeletePollerResponse contains the response from method PrivateLinkServicesForMIPPolicySync.Delete.
type PrivateLinkServicesForMIPPolicySyncDeletePollerResponse struct {
	// Poller contains an initialized poller.
	Poller *PrivateLinkServicesForMIPPolicySyncDeletePoller

	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// PollUntilDone will poll the service endpoint until a terminal state is reached or an error is received.
// freq: the time to wait between intervals in absence of a Retry-After header. Allowed minimum is one second.
// A good starting value is 30 seconds. Note that some resources might benefit from a different value.
func (l PrivateLinkServicesForMIPPolicySyncDeletePollerResponse) PollUntilDone(ctx context.Context, freq time.Duration) (PrivateLinkServicesForMIPPolicySyncDeleteResponse, error) {
	respType := PrivateLinkServicesForMIPPolicySyncDeleteResponse{}
	resp, err := l.Poller.pt.PollUntilDone(ctx, freq, nil)
	if err != nil {
		return respType, err
	}
	respType.RawResponse = resp
	return respType, nil
}

// Resume rehydrates a PrivateLinkServicesForMIPPolicySyncDeletePollerResponse from the provided client and resume token.
func (l *PrivateLinkServicesForMIPPolicySyncDeletePollerResponse) Resume(ctx context.Context, client *PrivateLinkServicesForMIPPolicySyncClient, token string) error {
	pt, err := armruntime.NewPollerFromResumeToken("PrivateLinkServicesForMIPPolicySyncClient.Delete", token, client.pl, client.deleteHandleError)
	if err != nil {
		return err
	}
	poller := &PrivateLinkServicesForMIPPolicySyncDeletePoller{
		pt: pt,
	}
	resp, err := poller.Poll(ctx)
	if err != nil {
		return err
	}
	l.Poller = poller
	l.RawResponse = resp
	return nil
}

// PrivateLinkServicesForMIPPolicySyncDeleteResponse contains the response from method PrivateLinkServicesForMIPPolicySync.Delete.
type PrivateLinkServicesForMIPPolicySyncDeleteResponse struct {
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// PrivateLinkServicesForMIPPolicySyncGetResponse contains the response from method PrivateLinkServicesForMIPPolicySync.Get.
type PrivateLinkServicesForMIPPolicySyncGetResponse struct {
	PrivateLinkServicesForMIPPolicySyncGetResult
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// PrivateLinkServicesForMIPPolicySyncGetResult contains the result from method PrivateLinkServicesForMIPPolicySync.Get.
type PrivateLinkServicesForMIPPolicySyncGetResult struct {
	PrivateLinkServicesForMIPPolicySyncDescription
}

// PrivateLinkServicesForMIPPolicySyncListByResourceGroupResponse contains the response from method PrivateLinkServicesForMIPPolicySync.ListByResourceGroup.
type PrivateLinkServicesForMIPPolicySyncListByResourceGroupResponse struct {
	PrivateLinkServicesForMIPPolicySyncListByResourceGroupResult
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// PrivateLinkServicesForMIPPolicySyncListByResourceGroupResult contains the result from method PrivateLinkServicesForMIPPolicySync.ListByResourceGroup.
type PrivateLinkServicesForMIPPolicySyncListByResourceGroupResult struct {
	PrivateLinkServicesForMIPPolicySyncDescriptionListResult
}

// PrivateLinkServicesForMIPPolicySyncListResponse contains the response from method PrivateLinkServicesForMIPPolicySync.List.
type PrivateLinkServicesForMIPPolicySyncListResponse struct {
	PrivateLinkServicesForMIPPolicySyncListResult
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// PrivateLinkServicesForMIPPolicySyncListResult contains the result from method PrivateLinkServicesForMIPPolicySync.List.
type PrivateLinkServicesForMIPPolicySyncListResult struct {
	PrivateLinkServicesForMIPPolicySyncDescriptionListResult
}

// PrivateLinkServicesForMIPPolicySyncUpdatePollerResponse contains the response from method PrivateLinkServicesForMIPPolicySync.Update.
type PrivateLinkServicesForMIPPolicySyncUpdatePollerResponse struct {
	// Poller contains an initialized poller.
	Poller *PrivateLinkServicesForMIPPolicySyncUpdatePoller

	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// PollUntilDone will poll the service endpoint until a terminal state is reached or an error is received.
// freq: the time to wait between intervals in absence of a Retry-After header. Allowed minimum is one second.
// A good starting value is 30 seconds. Note that some resources might benefit from a different value.
func (l PrivateLinkServicesForMIPPolicySyncUpdatePollerResponse) PollUntilDone(ctx context.Context, freq time.Duration) (PrivateLinkServicesForMIPPolicySyncUpdateResponse, error) {
	respType := PrivateLinkServicesForMIPPolicySyncUpdateResponse{}
	resp, err := l.Poller.pt.PollUntilDone(ctx, freq, &respType.PrivateLinkServicesForMIPPolicySyncDescription)
	if err != nil {
		return respType, err
	}
	respType.RawResponse = resp
	return respType, nil
}

// Resume rehydrates a PrivateLinkServicesForMIPPolicySyncUpdatePollerResponse from the provided client and resume token.
func (l *PrivateLinkServicesForMIPPolicySyncUpdatePollerResponse) Resume(ctx context.Context, client *PrivateLinkServicesForMIPPolicySyncClient, token string) error {
	pt, err := armruntime.NewPollerFromResumeToken("PrivateLinkServicesForMIPPolicySyncClient.Update", token, client.pl, client.updateHandleError)
	if err != nil {
		return err
	}
	poller := &PrivateLinkServicesForMIPPolicySyncUpdatePoller{
		pt: pt,
	}
	resp, err := poller.Poll(ctx)
	if err != nil {
		return err
	}
	l.Poller = poller
	l.RawResponse = resp
	return nil
}

// PrivateLinkServicesForMIPPolicySyncUpdateResponse contains the response from method PrivateLinkServicesForMIPPolicySync.Update.
type PrivateLinkServicesForMIPPolicySyncUpdateResponse struct {
	PrivateLinkServicesForMIPPolicySyncUpdateResult
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// PrivateLinkServicesForMIPPolicySyncUpdateResult contains the result from method PrivateLinkServicesForMIPPolicySync.Update.
type PrivateLinkServicesForMIPPolicySyncUpdateResult struct {
	PrivateLinkServicesForMIPPolicySyncDescription
}

// PrivateLinkServicesForO365ManagementActivityAPICreateOrUpdatePollerResponse contains the response from method PrivateLinkServicesForO365ManagementActivityAPI.CreateOrUpdate.
type PrivateLinkServicesForO365ManagementActivityAPICreateOrUpdatePollerResponse struct {
	// Poller contains an initialized poller.
	Poller *PrivateLinkServicesForO365ManagementActivityAPICreateOrUpdatePoller

	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// PollUntilDone will poll the service endpoint until a terminal state is reached or an error is received.
// freq: the time to wait between intervals in absence of a Retry-After header. Allowed minimum is one second.
// A good starting value is 30 seconds. Note that some resources might benefit from a different value.
func (l PrivateLinkServicesForO365ManagementActivityAPICreateOrUpdatePollerResponse) PollUntilDone(ctx context.Context, freq time.Duration) (PrivateLinkServicesForO365ManagementActivityAPICreateOrUpdateResponse, error) {
	respType := PrivateLinkServicesForO365ManagementActivityAPICreateOrUpdateResponse{}
	resp, err := l.Poller.pt.PollUntilDone(ctx, freq, &respType.PrivateLinkServicesForO365ManagementActivityAPIDescription)
	if err != nil {
		return respType, err
	}
	respType.RawResponse = resp
	return respType, nil
}

// Resume rehydrates a PrivateLinkServicesForO365ManagementActivityAPICreateOrUpdatePollerResponse from the provided client and resume token.
func (l *PrivateLinkServicesForO365ManagementActivityAPICreateOrUpdatePollerResponse) Resume(ctx context.Context, client *PrivateLinkServicesForO365ManagementActivityAPIClient, token string) error {
	pt, err := armruntime.NewPollerFromResumeToken("PrivateLinkServicesForO365ManagementActivityAPIClient.CreateOrUpdate", token, client.pl, client.createOrUpdateHandleError)
	if err != nil {
		return err
	}
	poller := &PrivateLinkServicesForO365ManagementActivityAPICreateOrUpdatePoller{
		pt: pt,
	}
	resp, err := poller.Poll(ctx)
	if err != nil {
		return err
	}
	l.Poller = poller
	l.RawResponse = resp
	return nil
}

// PrivateLinkServicesForO365ManagementActivityAPICreateOrUpdateResponse contains the response from method PrivateLinkServicesForO365ManagementActivityAPI.CreateOrUpdate.
type PrivateLinkServicesForO365ManagementActivityAPICreateOrUpdateResponse struct {
	PrivateLinkServicesForO365ManagementActivityAPICreateOrUpdateResult
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// PrivateLinkServicesForO365ManagementActivityAPICreateOrUpdateResult contains the result from method PrivateLinkServicesForO365ManagementActivityAPI.CreateOrUpdate.
type PrivateLinkServicesForO365ManagementActivityAPICreateOrUpdateResult struct {
	PrivateLinkServicesForO365ManagementActivityAPIDescription
}

// PrivateLinkServicesForO365ManagementActivityAPIDeletePollerResponse contains the response from method PrivateLinkServicesForO365ManagementActivityAPI.Delete.
type PrivateLinkServicesForO365ManagementActivityAPIDeletePollerResponse struct {
	// Poller contains an initialized poller.
	Poller *PrivateLinkServicesForO365ManagementActivityAPIDeletePoller

	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// PollUntilDone will poll the service endpoint until a terminal state is reached or an error is received.
// freq: the time to wait between intervals in absence of a Retry-After header. Allowed minimum is one second.
// A good starting value is 30 seconds. Note that some resources might benefit from a different value.
func (l PrivateLinkServicesForO365ManagementActivityAPIDeletePollerResponse) PollUntilDone(ctx context.Context, freq time.Duration) (PrivateLinkServicesForO365ManagementActivityAPIDeleteResponse, error) {
	respType := PrivateLinkServicesForO365ManagementActivityAPIDeleteResponse{}
	resp, err := l.Poller.pt.PollUntilDone(ctx, freq, nil)
	if err != nil {
		return respType, err
	}
	respType.RawResponse = resp
	return respType, nil
}

// Resume rehydrates a PrivateLinkServicesForO365ManagementActivityAPIDeletePollerResponse from the provided client and resume token.
func (l *PrivateLinkServicesForO365ManagementActivityAPIDeletePollerResponse) Resume(ctx context.Context, client *PrivateLinkServicesForO365ManagementActivityAPIClient, token string) error {
	pt, err := armruntime.NewPollerFromResumeToken("PrivateLinkServicesForO365ManagementActivityAPIClient.Delete", token, client.pl, client.deleteHandleError)
	if err != nil {
		return err
	}
	poller := &PrivateLinkServicesForO365ManagementActivityAPIDeletePoller{
		pt: pt,
	}
	resp, err := poller.Poll(ctx)
	if err != nil {
		return err
	}
	l.Poller = poller
	l.RawResponse = resp
	return nil
}

// PrivateLinkServicesForO365ManagementActivityAPIDeleteResponse contains the response from method PrivateLinkServicesForO365ManagementActivityAPI.Delete.
type PrivateLinkServicesForO365ManagementActivityAPIDeleteResponse struct {
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// PrivateLinkServicesForO365ManagementActivityAPIGetResponse contains the response from method PrivateLinkServicesForO365ManagementActivityAPI.Get.
type PrivateLinkServicesForO365ManagementActivityAPIGetResponse struct {
	PrivateLinkServicesForO365ManagementActivityAPIGetResult
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// PrivateLinkServicesForO365ManagementActivityAPIGetResult contains the result from method PrivateLinkServicesForO365ManagementActivityAPI.Get.
type PrivateLinkServicesForO365ManagementActivityAPIGetResult struct {
	PrivateLinkServicesForO365ManagementActivityAPIDescription
}

// PrivateLinkServicesForO365ManagementActivityAPIListByResourceGroupResponse contains the response from method PrivateLinkServicesForO365ManagementActivityAPI.ListByResourceGroup.
type PrivateLinkServicesForO365ManagementActivityAPIListByResourceGroupResponse struct {
	PrivateLinkServicesForO365ManagementActivityAPIListByResourceGroupResult
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// PrivateLinkServicesForO365ManagementActivityAPIListByResourceGroupResult contains the result from method PrivateLinkServicesForO365ManagementActivityAPI.ListByResourceGroup.
type PrivateLinkServicesForO365ManagementActivityAPIListByResourceGroupResult struct {
	PrivateLinkServicesForO365ManagementActivityAPIDescriptionListResult
}

// PrivateLinkServicesForO365ManagementActivityAPIListResponse contains the response from method PrivateLinkServicesForO365ManagementActivityAPI.List.
type PrivateLinkServicesForO365ManagementActivityAPIListResponse struct {
	PrivateLinkServicesForO365ManagementActivityAPIListResult
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// PrivateLinkServicesForO365ManagementActivityAPIListResult contains the result from method PrivateLinkServicesForO365ManagementActivityAPI.List.
type PrivateLinkServicesForO365ManagementActivityAPIListResult struct {
	PrivateLinkServicesForO365ManagementActivityAPIDescriptionListResult
}

// PrivateLinkServicesForO365ManagementActivityAPIUpdatePollerResponse contains the response from method PrivateLinkServicesForO365ManagementActivityAPI.Update.
type PrivateLinkServicesForO365ManagementActivityAPIUpdatePollerResponse struct {
	// Poller contains an initialized poller.
	Poller *PrivateLinkServicesForO365ManagementActivityAPIUpdatePoller

	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// PollUntilDone will poll the service endpoint until a terminal state is reached or an error is received.
// freq: the time to wait between intervals in absence of a Retry-After header. Allowed minimum is one second.
// A good starting value is 30 seconds. Note that some resources might benefit from a different value.
func (l PrivateLinkServicesForO365ManagementActivityAPIUpdatePollerResponse) PollUntilDone(ctx context.Context, freq time.Duration) (PrivateLinkServicesForO365ManagementActivityAPIUpdateResponse, error) {
	respType := PrivateLinkServicesForO365ManagementActivityAPIUpdateResponse{}
	resp, err := l.Poller.pt.PollUntilDone(ctx, freq, &respType.PrivateLinkServicesForO365ManagementActivityAPIDescription)
	if err != nil {
		return respType, err
	}
	respType.RawResponse = resp
	return respType, nil
}

// Resume rehydrates a PrivateLinkServicesForO365ManagementActivityAPIUpdatePollerResponse from the provided client and resume token.
func (l *PrivateLinkServicesForO365ManagementActivityAPIUpdatePollerResponse) Resume(ctx context.Context, client *PrivateLinkServicesForO365ManagementActivityAPIClient, token string) error {
	pt, err := armruntime.NewPollerFromResumeToken("PrivateLinkServicesForO365ManagementActivityAPIClient.Update", token, client.pl, client.updateHandleError)
	if err != nil {
		return err
	}
	poller := &PrivateLinkServicesForO365ManagementActivityAPIUpdatePoller{
		pt: pt,
	}
	resp, err := poller.Poll(ctx)
	if err != nil {
		return err
	}
	l.Poller = poller
	l.RawResponse = resp
	return nil
}

// PrivateLinkServicesForO365ManagementActivityAPIUpdateResponse contains the response from method PrivateLinkServicesForO365ManagementActivityAPI.Update.
type PrivateLinkServicesForO365ManagementActivityAPIUpdateResponse struct {
	PrivateLinkServicesForO365ManagementActivityAPIUpdateResult
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// PrivateLinkServicesForO365ManagementActivityAPIUpdateResult contains the result from method PrivateLinkServicesForO365ManagementActivityAPI.Update.
type PrivateLinkServicesForO365ManagementActivityAPIUpdateResult struct {
	PrivateLinkServicesForO365ManagementActivityAPIDescription
}

// PrivateLinkServicesForSCCPowershellCreateOrUpdatePollerResponse contains the response from method PrivateLinkServicesForSCCPowershell.CreateOrUpdate.
type PrivateLinkServicesForSCCPowershellCreateOrUpdatePollerResponse struct {
	// Poller contains an initialized poller.
	Poller *PrivateLinkServicesForSCCPowershellCreateOrUpdatePoller

	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// PollUntilDone will poll the service endpoint until a terminal state is reached or an error is received.
// freq: the time to wait between intervals in absence of a Retry-After header. Allowed minimum is one second.
// A good starting value is 30 seconds. Note that some resources might benefit from a different value.
func (l PrivateLinkServicesForSCCPowershellCreateOrUpdatePollerResponse) PollUntilDone(ctx context.Context, freq time.Duration) (PrivateLinkServicesForSCCPowershellCreateOrUpdateResponse, error) {
	respType := PrivateLinkServicesForSCCPowershellCreateOrUpdateResponse{}
	resp, err := l.Poller.pt.PollUntilDone(ctx, freq, &respType.PrivateLinkServicesForSCCPowershellDescription)
	if err != nil {
		return respType, err
	}
	respType.RawResponse = resp
	return respType, nil
}

// Resume rehydrates a PrivateLinkServicesForSCCPowershellCreateOrUpdatePollerResponse from the provided client and resume token.
func (l *PrivateLinkServicesForSCCPowershellCreateOrUpdatePollerResponse) Resume(ctx context.Context, client *PrivateLinkServicesForSCCPowershellClient, token string) error {
	pt, err := armruntime.NewPollerFromResumeToken("PrivateLinkServicesForSCCPowershellClient.CreateOrUpdate", token, client.pl, client.createOrUpdateHandleError)
	if err != nil {
		return err
	}
	poller := &PrivateLinkServicesForSCCPowershellCreateOrUpdatePoller{
		pt: pt,
	}
	resp, err := poller.Poll(ctx)
	if err != nil {
		return err
	}
	l.Poller = poller
	l.RawResponse = resp
	return nil
}

// PrivateLinkServicesForSCCPowershellCreateOrUpdateResponse contains the response from method PrivateLinkServicesForSCCPowershell.CreateOrUpdate.
type PrivateLinkServicesForSCCPowershellCreateOrUpdateResponse struct {
	PrivateLinkServicesForSCCPowershellCreateOrUpdateResult
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// PrivateLinkServicesForSCCPowershellCreateOrUpdateResult contains the result from method PrivateLinkServicesForSCCPowershell.CreateOrUpdate.
type PrivateLinkServicesForSCCPowershellCreateOrUpdateResult struct {
	PrivateLinkServicesForSCCPowershellDescription
}

// PrivateLinkServicesForSCCPowershellDeletePollerResponse contains the response from method PrivateLinkServicesForSCCPowershell.Delete.
type PrivateLinkServicesForSCCPowershellDeletePollerResponse struct {
	// Poller contains an initialized poller.
	Poller *PrivateLinkServicesForSCCPowershellDeletePoller

	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// PollUntilDone will poll the service endpoint until a terminal state is reached or an error is received.
// freq: the time to wait between intervals in absence of a Retry-After header. Allowed minimum is one second.
// A good starting value is 30 seconds. Note that some resources might benefit from a different value.
func (l PrivateLinkServicesForSCCPowershellDeletePollerResponse) PollUntilDone(ctx context.Context, freq time.Duration) (PrivateLinkServicesForSCCPowershellDeleteResponse, error) {
	respType := PrivateLinkServicesForSCCPowershellDeleteResponse{}
	resp, err := l.Poller.pt.PollUntilDone(ctx, freq, nil)
	if err != nil {
		return respType, err
	}
	respType.RawResponse = resp
	return respType, nil
}

// Resume rehydrates a PrivateLinkServicesForSCCPowershellDeletePollerResponse from the provided client and resume token.
func (l *PrivateLinkServicesForSCCPowershellDeletePollerResponse) Resume(ctx context.Context, client *PrivateLinkServicesForSCCPowershellClient, token string) error {
	pt, err := armruntime.NewPollerFromResumeToken("PrivateLinkServicesForSCCPowershellClient.Delete", token, client.pl, client.deleteHandleError)
	if err != nil {
		return err
	}
	poller := &PrivateLinkServicesForSCCPowershellDeletePoller{
		pt: pt,
	}
	resp, err := poller.Poll(ctx)
	if err != nil {
		return err
	}
	l.Poller = poller
	l.RawResponse = resp
	return nil
}

// PrivateLinkServicesForSCCPowershellDeleteResponse contains the response from method PrivateLinkServicesForSCCPowershell.Delete.
type PrivateLinkServicesForSCCPowershellDeleteResponse struct {
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// PrivateLinkServicesForSCCPowershellGetResponse contains the response from method PrivateLinkServicesForSCCPowershell.Get.
type PrivateLinkServicesForSCCPowershellGetResponse struct {
	PrivateLinkServicesForSCCPowershellGetResult
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// PrivateLinkServicesForSCCPowershellGetResult contains the result from method PrivateLinkServicesForSCCPowershell.Get.
type PrivateLinkServicesForSCCPowershellGetResult struct {
	PrivateLinkServicesForSCCPowershellDescription
}

// PrivateLinkServicesForSCCPowershellListByResourceGroupResponse contains the response from method PrivateLinkServicesForSCCPowershell.ListByResourceGroup.
type PrivateLinkServicesForSCCPowershellListByResourceGroupResponse struct {
	PrivateLinkServicesForSCCPowershellListByResourceGroupResult
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// PrivateLinkServicesForSCCPowershellListByResourceGroupResult contains the result from method PrivateLinkServicesForSCCPowershell.ListByResourceGroup.
type PrivateLinkServicesForSCCPowershellListByResourceGroupResult struct {
	PrivateLinkServicesForSCCPowershellDescriptionListResult
}

// PrivateLinkServicesForSCCPowershellListResponse contains the response from method PrivateLinkServicesForSCCPowershell.List.
type PrivateLinkServicesForSCCPowershellListResponse struct {
	PrivateLinkServicesForSCCPowershellListResult
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// PrivateLinkServicesForSCCPowershellListResult contains the result from method PrivateLinkServicesForSCCPowershell.List.
type PrivateLinkServicesForSCCPowershellListResult struct {
	PrivateLinkServicesForSCCPowershellDescriptionListResult
}

// PrivateLinkServicesForSCCPowershellUpdatePollerResponse contains the response from method PrivateLinkServicesForSCCPowershell.Update.
type PrivateLinkServicesForSCCPowershellUpdatePollerResponse struct {
	// Poller contains an initialized poller.
	Poller *PrivateLinkServicesForSCCPowershellUpdatePoller

	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// PollUntilDone will poll the service endpoint until a terminal state is reached or an error is received.
// freq: the time to wait between intervals in absence of a Retry-After header. Allowed minimum is one second.
// A good starting value is 30 seconds. Note that some resources might benefit from a different value.
func (l PrivateLinkServicesForSCCPowershellUpdatePollerResponse) PollUntilDone(ctx context.Context, freq time.Duration) (PrivateLinkServicesForSCCPowershellUpdateResponse, error) {
	respType := PrivateLinkServicesForSCCPowershellUpdateResponse{}
	resp, err := l.Poller.pt.PollUntilDone(ctx, freq, &respType.PrivateLinkServicesForSCCPowershellDescription)
	if err != nil {
		return respType, err
	}
	respType.RawResponse = resp
	return respType, nil
}

// Resume rehydrates a PrivateLinkServicesForSCCPowershellUpdatePollerResponse from the provided client and resume token.
func (l *PrivateLinkServicesForSCCPowershellUpdatePollerResponse) Resume(ctx context.Context, client *PrivateLinkServicesForSCCPowershellClient, token string) error {
	pt, err := armruntime.NewPollerFromResumeToken("PrivateLinkServicesForSCCPowershellClient.Update", token, client.pl, client.updateHandleError)
	if err != nil {
		return err
	}
	poller := &PrivateLinkServicesForSCCPowershellUpdatePoller{
		pt: pt,
	}
	resp, err := poller.Poll(ctx)
	if err != nil {
		return err
	}
	l.Poller = poller
	l.RawResponse = resp
	return nil
}

// PrivateLinkServicesForSCCPowershellUpdateResponse contains the response from method PrivateLinkServicesForSCCPowershell.Update.
type PrivateLinkServicesForSCCPowershellUpdateResponse struct {
	PrivateLinkServicesForSCCPowershellUpdateResult
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// PrivateLinkServicesForSCCPowershellUpdateResult contains the result from method PrivateLinkServicesForSCCPowershell.Update.
type PrivateLinkServicesForSCCPowershellUpdateResult struct {
	PrivateLinkServicesForSCCPowershellDescription
}

// ServicesDeletePollerResponse contains the response from method Services.Delete.
type ServicesDeletePollerResponse struct {
	// Poller contains an initialized poller.
	Poller *ServicesDeletePoller

	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// PollUntilDone will poll the service endpoint until a terminal state is reached or an error is received.
// freq: the time to wait between intervals in absence of a Retry-After header. Allowed minimum is one second.
// A good starting value is 30 seconds. Note that some resources might benefit from a different value.
func (l ServicesDeletePollerResponse) PollUntilDone(ctx context.Context, freq time.Duration) (ServicesDeleteResponse, error) {
	respType := ServicesDeleteResponse{}
	resp, err := l.Poller.pt.PollUntilDone(ctx, freq, nil)
	if err != nil {
		return respType, err
	}
	respType.RawResponse = resp
	return respType, nil
}

// Resume rehydrates a ServicesDeletePollerResponse from the provided client and resume token.
func (l *ServicesDeletePollerResponse) Resume(ctx context.Context, client *ServicesClient, token string) error {
	pt, err := armruntime.NewPollerFromResumeToken("ServicesClient.Delete", token, client.pl, client.deleteHandleError)
	if err != nil {
		return err
	}
	poller := &ServicesDeletePoller{
		pt: pt,
	}
	resp, err := poller.Poll(ctx)
	if err != nil {
		return err
	}
	l.Poller = poller
	l.RawResponse = resp
	return nil
}

// ServicesDeleteResponse contains the response from method Services.Delete.
type ServicesDeleteResponse struct {
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}
