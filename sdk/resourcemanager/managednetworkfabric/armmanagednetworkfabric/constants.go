//go:build go1.18
// +build go1.18

// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.
// DO NOT EDIT.

package armmanagednetworkfabric

const (
	moduleName    = "armmanagednetworkfabric"
	moduleVersion = "v0.1.0"
)

// ActionType - Enum. Indicates the action type. "Internal" refers to actions that are for internal only APIs.
type ActionType string

const (
	ActionTypeInternal ActionType = "Internal"
)

// PossibleActionTypeValues returns the possible values for the ActionType const type.
func PossibleActionTypeValues() []ActionType {
	return []ActionType{
		ActionTypeInternal,
	}
}

// AddressFamily - IP address family. Example: ipv4 | ipv6.
type AddressFamily string

const (
	AddressFamilyIPv4 AddressFamily = "ipv4"
	AddressFamilyIPv6 AddressFamily = "ipv6"
)

// PossibleAddressFamilyValues returns the possible values for the AddressFamily const type.
func PossibleAddressFamilyValues() []AddressFamily {
	return []AddressFamily{
		AddressFamilyIPv4,
		AddressFamilyIPv6,
	}
}

// AdministrativeState - Administrative state.
type AdministrativeState string

const (
	AdministrativeStateDisable AdministrativeState = "Disable"
	AdministrativeStateEnable  AdministrativeState = "Enable"
)

// PossibleAdministrativeStateValues returns the possible values for the AdministrativeState const type.
func PossibleAdministrativeStateValues() []AdministrativeState {
	return []AdministrativeState{
		AdministrativeStateDisable,
		AdministrativeStateEnable,
	}
}

// AllowASOverride - Enable Or Disable state.
type AllowASOverride string

const (
	AllowASOverrideDisable AllowASOverride = "Disable"
	AllowASOverrideEnable  AllowASOverride = "Enable"
)

// PossibleAllowASOverrideValues returns the possible values for the AllowASOverride const type.
func PossibleAllowASOverrideValues() []AllowASOverride {
	return []AllowASOverride{
		AllowASOverrideDisable,
		AllowASOverrideEnable,
	}
}

// BooleanEnumProperty - Boolean Enum. Example- True/False
type BooleanEnumProperty string

const (
	BooleanEnumPropertyFalse BooleanEnumProperty = "False"
	BooleanEnumPropertyTrue  BooleanEnumProperty = "True"
)

// PossibleBooleanEnumPropertyValues returns the possible values for the BooleanEnumProperty const type.
func PossibleBooleanEnumPropertyValues() []BooleanEnumProperty {
	return []BooleanEnumProperty{
		BooleanEnumPropertyFalse,
		BooleanEnumPropertyTrue,
	}
}

// CommunityActionTypes - community action types. Example: Permit | Deny.
type CommunityActionTypes string

const (
	CommunityActionTypesDeny   CommunityActionTypes = "Deny"
	CommunityActionTypesPermit CommunityActionTypes = "Permit"
)

// PossibleCommunityActionTypesValues returns the possible values for the CommunityActionTypes const type.
func PossibleCommunityActionTypesValues() []CommunityActionTypes {
	return []CommunityActionTypes{
		CommunityActionTypesDeny,
		CommunityActionTypesPermit,
	}
}

// Condition - Specify prefix-list bounds.
type Condition string

const (
	ConditionEqualTo              Condition = "EqualTo"
	ConditionGreaterThanOrEqualTo Condition = "GreaterThanOrEqualTo"
	ConditionLesserThanOrEqualTo  Condition = "LesserThanOrEqualTo"
)

// PossibleConditionValues returns the possible values for the Condition const type.
func PossibleConditionValues() []Condition {
	return []Condition{
		ConditionEqualTo,
		ConditionGreaterThanOrEqualTo,
		ConditionLesserThanOrEqualTo,
	}
}

// ConditionActionType - action. Example: allow | deny.
type ConditionActionType string

const (
	ConditionActionTypeAllow ConditionActionType = "allow"
	ConditionActionTypeDeny  ConditionActionType = "deny"
)

// PossibleConditionActionTypeValues returns the possible values for the ConditionActionType const type.
func PossibleConditionActionTypeValues() []ConditionActionType {
	return []ConditionActionType{
		ConditionActionTypeAllow,
		ConditionActionTypeDeny,
	}
}

// CreatedByType - The type of identity that created the resource.
type CreatedByType string

const (
	CreatedByTypeApplication     CreatedByType = "Application"
	CreatedByTypeKey             CreatedByType = "Key"
	CreatedByTypeManagedIdentity CreatedByType = "ManagedIdentity"
	CreatedByTypeUser            CreatedByType = "User"
)

// PossibleCreatedByTypeValues returns the possible values for the CreatedByType const type.
func PossibleCreatedByTypeValues() []CreatedByType {
	return []CreatedByType{
		CreatedByTypeApplication,
		CreatedByTypeKey,
		CreatedByTypeManagedIdentity,
		CreatedByTypeUser,
	}
}

// EnabledDisabledState - EnabledDisabledState state for the resource.
type EnabledDisabledState string

const (
	EnabledDisabledStateDisabled EnabledDisabledState = "Disabled"
	EnabledDisabledStateEnabled  EnabledDisabledState = "Enabled"
)

// PossibleEnabledDisabledStateValues returns the possible values for the EnabledDisabledState const type.
func PossibleEnabledDisabledStateValues() []EnabledDisabledState {
	return []EnabledDisabledState{
		EnabledDisabledStateDisabled,
		EnabledDisabledStateEnabled,
	}
}

// InterfaceType - The Interface Type. Example: Management/Data
type InterfaceType string

const (
	InterfaceTypeData       InterfaceType = "Data"
	InterfaceTypeManagement InterfaceType = "Management"
)

// PossibleInterfaceTypeValues returns the possible values for the InterfaceType const type.
func PossibleInterfaceTypeValues() []InterfaceType {
	return []InterfaceType{
		InterfaceTypeData,
		InterfaceTypeManagement,
	}
}

// IsCurrentVersion - If the current version is in use.
type IsCurrentVersion string

const (
	IsCurrentVersionFalse IsCurrentVersion = "false"
	IsCurrentVersionTrue  IsCurrentVersion = "true"
)

// PossibleIsCurrentVersionValues returns the possible values for the IsCurrentVersion const type.
func PossibleIsCurrentVersionValues() []IsCurrentVersion {
	return []IsCurrentVersion{
		IsCurrentVersionFalse,
		IsCurrentVersionTrue,
	}
}

// IsTestVersion - If the current version is a test version.
type IsTestVersion string

const (
	IsTestVersionFalse IsTestVersion = "false"
	IsTestVersionTrue  IsTestVersion = "true"
)

// PossibleIsTestVersionValues returns the possible values for the IsTestVersion const type.
func PossibleIsTestVersionValues() []IsTestVersion {
	return []IsTestVersion{
		IsTestVersionFalse,
		IsTestVersionTrue,
	}
}

// NetworkDeviceRackRoleType - Role for the network device.
type NetworkDeviceRackRoleType string

const (
	NetworkDeviceRackRoleTypeCE         NetworkDeviceRackRoleType = "CE"
	NetworkDeviceRackRoleTypeManagement NetworkDeviceRackRoleType = "Management"
	NetworkDeviceRackRoleTypeNPB        NetworkDeviceRackRoleType = "NPB"
	NetworkDeviceRackRoleTypeTS         NetworkDeviceRackRoleType = "TS"
	NetworkDeviceRackRoleTypeToR        NetworkDeviceRackRoleType = "ToR"
)

// PossibleNetworkDeviceRackRoleTypeValues returns the possible values for the NetworkDeviceRackRoleType const type.
func PossibleNetworkDeviceRackRoleTypeValues() []NetworkDeviceRackRoleType {
	return []NetworkDeviceRackRoleType{
		NetworkDeviceRackRoleTypeCE,
		NetworkDeviceRackRoleTypeManagement,
		NetworkDeviceRackRoleTypeNPB,
		NetworkDeviceRackRoleTypeTS,
		NetworkDeviceRackRoleTypeToR,
	}
}

// NetworkDeviceRoleName - Available roles for the network device.
type NetworkDeviceRoleName string

const (
	NetworkDeviceRoleNameCE         NetworkDeviceRoleName = "CE"
	NetworkDeviceRoleNameManagement NetworkDeviceRoleName = "Management"
	NetworkDeviceRoleNameNPB        NetworkDeviceRoleName = "NPB"
	NetworkDeviceRoleNameTS         NetworkDeviceRoleName = "TS"
	NetworkDeviceRoleNameToR        NetworkDeviceRoleName = "ToR"
)

// PossibleNetworkDeviceRoleNameValues returns the possible values for the NetworkDeviceRoleName const type.
func PossibleNetworkDeviceRoleNameValues() []NetworkDeviceRoleName {
	return []NetworkDeviceRoleName{
		NetworkDeviceRoleNameCE,
		NetworkDeviceRoleNameManagement,
		NetworkDeviceRoleNameNPB,
		NetworkDeviceRoleNameTS,
		NetworkDeviceRoleNameToR,
	}
}

// NetworkDeviceRoleTypes - Available roles for the network device.
type NetworkDeviceRoleTypes string

const (
	NetworkDeviceRoleTypesCE         NetworkDeviceRoleTypes = "CE"
	NetworkDeviceRoleTypesManagement NetworkDeviceRoleTypes = "Management"
	NetworkDeviceRoleTypesNPB        NetworkDeviceRoleTypes = "NPB"
	NetworkDeviceRoleTypesTS         NetworkDeviceRoleTypes = "TS"
	NetworkDeviceRoleTypesToR        NetworkDeviceRoleTypes = "ToR"
)

// PossibleNetworkDeviceRoleTypesValues returns the possible values for the NetworkDeviceRoleTypes const type.
func PossibleNetworkDeviceRoleTypesValues() []NetworkDeviceRoleTypes {
	return []NetworkDeviceRoleTypes{
		NetworkDeviceRoleTypesCE,
		NetworkDeviceRoleTypesManagement,
		NetworkDeviceRoleTypesNPB,
		NetworkDeviceRoleTypesTS,
		NetworkDeviceRoleTypesToR,
	}
}

// NetworkFabricControllerOperationalState - Operational state for the resource.
type NetworkFabricControllerOperationalState string

const (
	NetworkFabricControllerOperationalStateConfiguring NetworkFabricControllerOperationalState = "Configuring"
	NetworkFabricControllerOperationalStateFailed      NetworkFabricControllerOperationalState = "Failed"
	NetworkFabricControllerOperationalStateSucceeded   NetworkFabricControllerOperationalState = "Succeeded"
)

// PossibleNetworkFabricControllerOperationalStateValues returns the possible values for the NetworkFabricControllerOperationalState const type.
func PossibleNetworkFabricControllerOperationalStateValues() []NetworkFabricControllerOperationalState {
	return []NetworkFabricControllerOperationalState{
		NetworkFabricControllerOperationalStateConfiguring,
		NetworkFabricControllerOperationalStateFailed,
		NetworkFabricControllerOperationalStateSucceeded,
	}
}

// NetworkFabricOperationalState - Operational state for the resource.
type NetworkFabricOperationalState string

const (
	NetworkFabricOperationalStateDeferredControl     NetworkFabricOperationalState = "DeferredControl"
	NetworkFabricOperationalStateDeprovisioned       NetworkFabricOperationalState = "Deprovisioned"
	NetworkFabricOperationalStateDeprovisioning      NetworkFabricOperationalState = "Deprovisioning"
	NetworkFabricOperationalStateErrorDeprovisioning NetworkFabricOperationalState = "ErrorDeprovisioning"
	NetworkFabricOperationalStateErrorProvisioning   NetworkFabricOperationalState = "ErrorProvisioning"
	NetworkFabricOperationalStateProvisioned         NetworkFabricOperationalState = "Provisioned"
	NetworkFabricOperationalStateProvisioning        NetworkFabricOperationalState = "Provisioning"
)

// PossibleNetworkFabricOperationalStateValues returns the possible values for the NetworkFabricOperationalState const type.
func PossibleNetworkFabricOperationalStateValues() []NetworkFabricOperationalState {
	return []NetworkFabricOperationalState{
		NetworkFabricOperationalStateDeferredControl,
		NetworkFabricOperationalStateDeprovisioned,
		NetworkFabricOperationalStateDeprovisioning,
		NetworkFabricOperationalStateErrorDeprovisioning,
		NetworkFabricOperationalStateErrorProvisioning,
		NetworkFabricOperationalStateProvisioned,
		NetworkFabricOperationalStateProvisioning,
	}
}

// NetworkRackRoleName - The role of the Network Rack: Aggregate or Compute.
type NetworkRackRoleName string

const (
	NetworkRackRoleNameAggregateRack NetworkRackRoleName = "AggregateRack"
	NetworkRackRoleNameComputeRack   NetworkRackRoleName = "ComputeRack"
)

// PossibleNetworkRackRoleNameValues returns the possible values for the NetworkRackRoleName const type.
func PossibleNetworkRackRoleNameValues() []NetworkRackRoleName {
	return []NetworkRackRoleName{
		NetworkRackRoleNameAggregateRack,
		NetworkRackRoleNameComputeRack,
	}
}

// NniType - Type of NNI used. Example: CE | NPB
type NniType string

const (
	NniTypeCE  NniType = "CE"
	NniTypeNPB NniType = "NPB"
)

// PossibleNniTypeValues returns the possible values for the NniType const type.
func PossibleNniTypeValues() []NniType {
	return []NniType{
		NniTypeCE,
		NniTypeNPB,
	}
}

// OperationalStatus - Primary or Secondary power end.
type OperationalStatus string

const (
	OperationalStatusBootPrompt OperationalStatus = "BootPrompt"
	OperationalStatusBooted     OperationalStatus = "Booted"
	OperationalStatusZtp        OperationalStatus = "Ztp"
)

// PossibleOperationalStatusValues returns the possible values for the OperationalStatus const type.
func PossibleOperationalStatusValues() []OperationalStatus {
	return []OperationalStatus{
		OperationalStatusBootPrompt,
		OperationalStatusBooted,
		OperationalStatusZtp,
	}
}

// Origin - The intended executor of the operation; as in Resource Based Access Control (RBAC) and audit logs UX. Default
// value is "user,system"
type Origin string

const (
	OriginSystem     Origin = "system"
	OriginUser       Origin = "user"
	OriginUserSystem Origin = "user,system"
)

// PossibleOriginValues returns the possible values for the Origin const type.
func PossibleOriginValues() []Origin {
	return []Origin{
		OriginSystem,
		OriginUser,
		OriginUserSystem,
	}
}

// PeeringOption - Peering option list.
type PeeringOption string

const (
	PeeringOptionOptionA PeeringOption = "OptionA"
	PeeringOptionOptionB PeeringOption = "OptionB"
)

// PossiblePeeringOptionValues returns the possible values for the PeeringOption const type.
func PossiblePeeringOptionValues() []PeeringOption {
	return []PeeringOption{
		PeeringOptionOptionA,
		PeeringOptionOptionB,
	}
}

// PowerCycleState - On or Off power cycle state.
type PowerCycleState string

const (
	PowerCycleStateOff PowerCycleState = "Off"
	PowerCycleStateOn  PowerCycleState = "On"
)

// PossiblePowerCycleStateValues returns the possible values for the PowerCycleState const type.
func PossiblePowerCycleStateValues() []PowerCycleState {
	return []PowerCycleState{
		PowerCycleStateOff,
		PowerCycleStateOn,
	}
}

// PowerEnd - Primary or Secondary power end.
type PowerEnd string

const (
	PowerEndPrimary   PowerEnd = "Primary"
	PowerEndSecondary PowerEnd = "Secondary"
)

// PossiblePowerEndValues returns the possible values for the PowerEnd const type.
func PossiblePowerEndValues() []PowerEnd {
	return []PowerEnd{
		PowerEndPrimary,
		PowerEndSecondary,
	}
}

// ProvisioningState - The current provisioning state.
type ProvisioningState string

const (
	ProvisioningStateCanceled  ProvisioningState = "Canceled"
	ProvisioningStateDeleting  ProvisioningState = "Deleting"
	ProvisioningStateFailed    ProvisioningState = "Failed"
	ProvisioningStateSucceeded ProvisioningState = "Succeeded"
	ProvisioningStateUpdating  ProvisioningState = "Updating"
)

// PossibleProvisioningStateValues returns the possible values for the ProvisioningState const type.
func PossibleProvisioningStateValues() []ProvisioningState {
	return []ProvisioningState{
		ProvisioningStateCanceled,
		ProvisioningStateDeleting,
		ProvisioningStateFailed,
		ProvisioningStateSucceeded,
		ProvisioningStateUpdating,
	}
}

// RedistributeConnectedSubnets - Advertise Connected Subnets. Ex: "True" | "False".
type RedistributeConnectedSubnets string

const (
	RedistributeConnectedSubnetsFalse RedistributeConnectedSubnets = "False"
	RedistributeConnectedSubnetsTrue  RedistributeConnectedSubnets = "True"
)

// PossibleRedistributeConnectedSubnetsValues returns the possible values for the RedistributeConnectedSubnets const type.
func PossibleRedistributeConnectedSubnetsValues() []RedistributeConnectedSubnets {
	return []RedistributeConnectedSubnets{
		RedistributeConnectedSubnetsFalse,
		RedistributeConnectedSubnetsTrue,
	}
}

// RedistributeStaticRoutes - Advertise Static Routes. Ex: "True" | "False".
type RedistributeStaticRoutes string

const (
	RedistributeStaticRoutesFalse RedistributeStaticRoutes = "False"
	RedistributeStaticRoutesTrue  RedistributeStaticRoutes = "True"
)

// PossibleRedistributeStaticRoutesValues returns the possible values for the RedistributeStaticRoutes const type.
func PossibleRedistributeStaticRoutesValues() []RedistributeStaticRoutes {
	return []RedistributeStaticRoutes{
		RedistributeStaticRoutesFalse,
		RedistributeStaticRoutesTrue,
	}
}

// State - On or Off toggle state.
type State string

const (
	StateOff State = "Off"
	StateOn  State = "On"
)

// PossibleStateValues returns the possible values for the State const type.
func PossibleStateValues() []State {
	return []State{
		StateOff,
		StateOn,
	}
}

// WellKnownCommunities - Internet - Advertise routes to internet community. LocalAS - Advertise routes to only localAS peers.
// NoAdvertise - Don't advertise routes to any peer.NoExport - Don't export to next AS.GShut -
// Graceful Shutdown (GSHUT) withdraw routes before terminating BGP connection.
type WellKnownCommunities string

const (
	WellKnownCommunitiesGShut       WellKnownCommunities = "GShut"
	WellKnownCommunitiesInternet    WellKnownCommunities = "Internet"
	WellKnownCommunitiesLocalAS     WellKnownCommunities = "LocalAS"
	WellKnownCommunitiesNoAdvertise WellKnownCommunities = "NoAdvertise"
	WellKnownCommunitiesNoExport    WellKnownCommunities = "NoExport"
)

// PossibleWellKnownCommunitiesValues returns the possible values for the WellKnownCommunities const type.
func PossibleWellKnownCommunitiesValues() []WellKnownCommunities {
	return []WellKnownCommunities{
		WellKnownCommunitiesGShut,
		WellKnownCommunitiesInternet,
		WellKnownCommunitiesLocalAS,
		WellKnownCommunitiesNoAdvertise,
		WellKnownCommunitiesNoExport,
	}
}
