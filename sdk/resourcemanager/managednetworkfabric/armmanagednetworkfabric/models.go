//go:build go1.18
// +build go1.18

// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.
// DO NOT EDIT.

package armmanagednetworkfabric

import "time"

// ARPProperties - Show ARP table entry properties
type ARPProperties struct {
	// REQUIRED; Ipv4 or Ipv6 address
	Address *string

	// REQUIRED; Duration in seconds.
	Age *string

	// REQUIRED; Layer 2 interface name.
	Interface *string

	// REQUIRED; Hardware address.
	MacAddress *string

	// ARP status
	State *string
}

// AccessControlList - The AccessControlList resource definition.
type AccessControlList struct {
	// REQUIRED; The geo-location where the resource lives
	Location *string

	// REQUIRED; Resource properties.
	Properties *AccessControlListProperties

	// Resource tags.
	Tags map[string]*string

	// READ-ONLY; Fully qualified resource ID for the resource. Ex - /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}
	ID *string

	// READ-ONLY; The name of the resource
	Name *string

	// READ-ONLY; Azure Resource Manager metadata containing createdBy and modifiedBy information.
	SystemData *SystemData

	// READ-ONLY; The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or "Microsoft.Storage/storageAccounts"
	Type *string
}

// AccessControlListConditionProperties - Access Control List condition model.
type AccessControlListConditionProperties struct {
	// REQUIRED; action. Example: allow | deny.
	Action *ConditionActionType

	// REQUIRED; destinationAddress. Example: any | 1.1.1.0/24 | 1.1.10.10
	DestinationAddress *string

	// REQUIRED; destinationPort. Example: any | 1253
	DestinationPort *string

	// REQUIRED; TCP/IP protocol as defined in the list of IP protocol numbers. Example: 255 (any) | 0 | 1.
	Protocol *int32

	// REQUIRED; sequenceNumber of the Access Control List.
	SequenceNumber *int32

	// REQUIRED; sourceAddress. Example: any | 1.1.1.0/24 | 1.1.10.10
	SourceAddress *string

	// REQUIRED; sourcePort. Example: any | 1253
	SourcePort *string

	// Switch configuration description.
	Annotation *string
}

// AccessControlListPatch - The AccessControlList patch resource definition.
type AccessControlListPatch struct {
	// Resource properties.
	Properties *AccessControlListPatchProperties

	// Resource tags
	Tags map[string]*string
}

// AccessControlListPatchProperties define the patchable resource properties.
type AccessControlListPatchProperties struct {
	// IP address family. Example: ipv4 | ipv6.
	AddressFamily *AddressFamily

	// Switch configuration description.
	Annotation *string

	// Access Control List conditions.
	Conditions []*AccessControlListConditionProperties
}

// AccessControlListProperties define the resource properties.
type AccessControlListProperties struct {
	// REQUIRED; IP address family. Example: ipv4 | ipv6.
	AddressFamily *AddressFamily

	// REQUIRED; Access Control List conditions.
	Conditions []*AccessControlListConditionProperties

	// Switch configuration description.
	Annotation *string

	// READ-ONLY; Gets the provisioning state of the resource.
	ProvisioningState *ProvisioningState
}

// AccessControlListsClientCreateOptions contains the optional parameters for the AccessControlListsClient.Create method.
type AccessControlListsClientCreateOptions struct {
	// placeholder for future optional parameters
}

// AccessControlListsClientDeleteOptions contains the optional parameters for the AccessControlListsClient.Delete method.
type AccessControlListsClientDeleteOptions struct {
	// placeholder for future optional parameters
}

// AccessControlListsClientGetOptions contains the optional parameters for the AccessControlListsClient.Get method.
type AccessControlListsClientGetOptions struct {
	// placeholder for future optional parameters
}

// AccessControlListsClientListByResourceGroupOptions contains the optional parameters for the AccessControlListsClient.NewListByResourceGroupPager
// method.
type AccessControlListsClientListByResourceGroupOptions struct {
	// placeholder for future optional parameters
}

// AccessControlListsClientListBySubscriptionOptions contains the optional parameters for the AccessControlListsClient.NewListBySubscriptionPager
// method.
type AccessControlListsClientListBySubscriptionOptions struct {
	// placeholder for future optional parameters
}

// AccessControlListsClientUpdateOptions contains the optional parameters for the AccessControlListsClient.Update method.
type AccessControlListsClientUpdateOptions struct {
	// placeholder for future optional parameters
}

// AccessControlListsListResult - List of AccessControlLists.
type AccessControlListsListResult struct {
	// Url to follow for getting next page of resources.
	NextLink *string

	// List of AccessControlList resources.
	Value []*AccessControlList
}

// ActionIPCommunityProperties - IP Community Properties.
type ActionIPCommunityProperties struct {
	// IP Community ID list properties.
	Add *IPCommunityIDList

	// IP Community ID list properties.
	Delete *IPCommunityIDList

	// IP Community ID list properties.
	Set *IPCommunityIDList
}

// ActionIPExtendedCommunityProperties - IP Extended Community Properties.
type ActionIPExtendedCommunityProperties struct {
	// IP Extended Community Id list properties.
	Add *IPExtendedCommunityIDList

	// IP Extended Community Id list properties.
	Delete *IPExtendedCommunityIDList

	// IP Extended Community Id list properties.
	Set *IPExtendedCommunityIDList
}

// AggregateRoute - Aggregate Route properties.
type AggregateRoute struct {
	// Prefix of the aggregate Route.
	Prefix *string
}

// AggregateRouteConfiguration - List of IPv4 and IPv6 route configurations.
type AggregateRouteConfiguration struct {
	// List of IPv4 Route prefixes.
	IPv4Routes []*AggregateRoute

	// List of IPv6 Routes prefixes.
	IPv6Routes []*AggregateRoute
}

// BfdConfiguration - BFD configuration properties
type BfdConfiguration struct {
	// READ-ONLY; Administrative state of the BfdConfiguration. Example: Enabled | Disabled.
	AdministrativeState *EnabledDisabledState

	// READ-ONLY; interval in milliseconds. Example: 300.
	Interval *int32

	// READ-ONLY; Multiplier for the Bfd Configuration. Example: 3.
	Multiplier *int32
}

// BgpConfiguration - BGP configuration properties
type BgpConfiguration struct {
	// REQUIRED; Peer ASN. Example: 65047.
	PeerASN *int32

	// Allows for routes to be received and processed even if the router detects its own ASN in the AS-Path. 0 is disable, Possible
	// values are 1-10, default is 2.
	AllowAS *int32

	// Enable Or Disable state.
	AllowASOverride *AllowASOverride

	// Switch configuration description.
	Annotation *string

	// BFD configuration properties
	BfdConfiguration *BfdConfiguration

	// Originate a defaultRoute. Ex: "True" | "False".
	DefaultRouteOriginate *BooleanEnumProperty

	// BGP Ipv4 ListenRange.
	IPv4ListenRangePrefixes []*string

	// List with stringified ipv4NeighborAddresses.
	IPv4NeighborAddress []*NeighborAddress

	// BGP Ipv6 ListenRange.
	IPv6ListenRangePrefixes []*string

	// List with stringified IPv6 Neighbor Address.
	IPv6NeighborAddress []*NeighborAddress

	// READ-ONLY; ASN of Network Fabric. Example: 65048.
	FabricASN *int32
}

// ConnectedSubnet - Connected Subnet properties.
type ConnectedSubnet struct {
	// Switch configuration description.
	Annotation *string

	// Prefix of the connected Subnet.
	Prefix *string
}

// DeviceInterfaceProperties - Network device interface properties.
type DeviceInterfaceProperties struct {
	// Interface identifier. Example: HundredGigE0/0.
	Identifier *string

	// Interface type.
	InterfaceType *string

	// List of supported connector types.
	SupportedConnectorTypes []*SupportedConnectorProperties
}

// DeviceLimits - Network device limits.
type DeviceLimits struct {
	// Maximum number of Bidirectional Forwarding Detection (BFD) peers.
	MaxBidirectionalForwardingDetectionPeers *int32

	// Maximum number of Border Gateway Protocol (BGP) peers.
	MaxBorderGatewayProtocolPeers *int32

	// Maximum number of sub-interfaces.
	MaxSubInterfaces *int32

	// Maximum number of tunnel interfaces.
	MaxTunnelInterfaces *int32

	// Maximum number of virtual router functions.
	MaxVirtualRouterFunctions *int32

	// Maximum number of physical interfaces.
	PhysicalInterfaceCount *int32
}

// EnableDisableOnResources - Update administrative state on list of resources.
type EnableDisableOnResources struct {
	// Network Fabrics or Network Rack resource Id.
	ResourceIDs []*string
}

// ExpressRouteConnectionInformation - The ExpressRoute circuit ID and the Auth Key are required for you to successfully deploy
// NFC service.
type ExpressRouteConnectionInformation struct {
	// REQUIRED; Authorization key for the circuit, must be of type Microsoft.Network/expressRouteCircuits/authorizations. The
	// Auth Key is a mandatory attribute.
	ExpressRouteAuthorizationKey *string

	// REQUIRED; The express route circuit Azure resource ID, must be of type Microsoft.Network/expressRouteCircuits/circuitName.
	// The ExpressRoute Circuit is a mandatory attribute.
	ExpressRouteCircuitID *string
}

// ExternalNetwork - Defines the ExternalNetwork item.
type ExternalNetwork struct {
	// REQUIRED; Resource properties.
	Properties *ExternalNetworkProperties

	// READ-ONLY; Fully qualified resource ID for the resource. Ex - /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}
	ID *string

	// READ-ONLY; The name of the resource
	Name *string

	// READ-ONLY; Azure Resource Manager metadata containing createdBy and modifiedBy information.
	SystemData *SystemData

	// READ-ONLY; The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or "Microsoft.Storage/storageAccounts"
	Type *string
}

// ExternalNetworkPatch - The ExternalNetwork patch resource definition.
type ExternalNetworkPatch struct {
	// External Network Patch properties.
	Properties *ExternalNetworkPatchProperties
}

// ExternalNetworkPatchProperties - External Network Patch properties.
type ExternalNetworkPatchProperties struct {
	// Switch configuration description.
	Annotation *string

	// ARM resource ID of exportRoutePolicy.
	ExportRoutePolicyID *string

	// ARM resource ID of importRoutePolicy.
	ImportRoutePolicyID *string

	// option A properties object
	OptionAProperties *Layer3OptionAProperties

	// option B properties object
	OptionBProperties *OptionBProperties

	// Peering option list.
	PeeringOption *PeeringOption
}

// ExternalNetworkProperties - External Network Properties.
type ExternalNetworkProperties struct {
	// REQUIRED; Peering option list.
	PeeringOption *PeeringOption

	// Switch configuration description.
	Annotation *string

	// ARM resource ID of exportRoutePolicy.
	ExportRoutePolicyID *string

	// ARM resource ID of importRoutePolicy.
	ImportRoutePolicyID *string

	// option A properties object
	OptionAProperties *ExternalNetworkPropertiesOptionAProperties

	// option B properties object
	OptionBProperties *OptionBProperties

	// READ-ONLY; AdministrativeState of the externalNetwork. Example: Enabled | Disabled.
	AdministrativeState *EnabledDisabledState

	// READ-ONLY; List of resources the externalNetwork is disabled on. Can be either entire NetworkFabric or NetworkRack.
	DisabledOnResources []*string

	// READ-ONLY; Gets the networkToNetworkInterconnectId of the resource.
	NetworkToNetworkInterconnectID *string

	// READ-ONLY; Gets the provisioning state of the resource.
	ProvisioningState *ProvisioningState
}

// ExternalNetworkPropertiesOptionAProperties - option A properties object
type ExternalNetworkPropertiesOptionAProperties struct {
	// BFD configuration properties
	BfdConfiguration *BfdConfiguration

	// MTU to use for option A peering.
	Mtu *int32

	// Peer ASN number.Example : 28
	PeerASN *int32

	// IPv4 Address Prefix of CE-PE interconnect links. Example: 172.31.0.0/31. The values can be specified at the time of creation
	// or can be updated afterwards. Any update to the values post-provisioning
	// may disrupt traffic. The 1st and 3rd IPs are to be configured on CE1 and CE2 for Option B interfaces. The 2nd and 4th IPs
	// are to be configured on PE1 and PE2 for Option B interfaces.
	PrimaryIPv4Prefix *string

	// IPv6 Address Prefix of CE-PE interconnect links. Example: 3FFE:FFFF:0:CD30::a0/126. The values can be specified at the
	// time of creation or can be updated afterwards. Any update to the values
	// post-provisioning may disrupt traffic. The 1st and 3rd IPs are to be configured on CE1 and CE2 for Option B interfaces.
	// The 2nd and 4th IPs are to be configured on PE1 and PE2 for Option B interfaces.
	PrimaryIPv6Prefix *string

	// Secondary IPv4 Address Prefix of CE-PE interconnect links. Example: 172.31.0.20/31. The values can be specified at the
	// time of creation or can be updated afterwards. Any update to the values
	// post-provisioning may disrupt traffic. The 1st and 3rd IPs are to be configured on CE1 and CE2 for Option B interfaces.
	// The 2nd and 4th IPs are to be configured on PE1 and PE2 for Option B interfaces.
	SecondaryIPv4Prefix *string

	// Secondary IPv6 Address Prefix of CE-PE interconnect links. Example: 3FFE:FFFF:0:CD30::a4/126. The values can be specified
	// at the time of creation or can be updated afterwards. Any update to the values
	// post-provisioning may disrupt traffic. The 1st and 3rd IPs are to be configured on CE1 and CE2 for Option B interfaces.
	// The 2nd and 4th IPs are to be configured on PE1 and PE2 for Option B interfaces.
	SecondaryIPv6Prefix *string

	// Vlan identifier. Example : 501
	VlanID *int32

	// READ-ONLY; Fabric ASN number. Example 65001
	FabricASN *int32
}

// ExternalNetworksClientBeginClearArpEntriesOptions contains the optional parameters for the ExternalNetworksClient.BeginClearArpEntries
// method.
type ExternalNetworksClientBeginClearArpEntriesOptions struct {
	// Resumes the LRO from the provided token.
	ResumeToken string
}

// ExternalNetworksClientBeginClearIPv6NeighborsOptions contains the optional parameters for the ExternalNetworksClient.BeginClearIPv6Neighbors
// method.
type ExternalNetworksClientBeginClearIPv6NeighborsOptions struct {
	// Resumes the LRO from the provided token.
	ResumeToken string
}

// ExternalNetworksClientBeginCreateOptions contains the optional parameters for the ExternalNetworksClient.BeginCreate method.
type ExternalNetworksClientBeginCreateOptions struct {
	// Resumes the LRO from the provided token.
	ResumeToken string
}

// ExternalNetworksClientBeginDeleteOptions contains the optional parameters for the ExternalNetworksClient.BeginDelete method.
type ExternalNetworksClientBeginDeleteOptions struct {
	// Resumes the LRO from the provided token.
	ResumeToken string
}

// ExternalNetworksClientBeginUpdateAdministrativeStateOptions contains the optional parameters for the ExternalNetworksClient.BeginUpdateAdministrativeState
// method.
type ExternalNetworksClientBeginUpdateAdministrativeStateOptions struct {
	// Resumes the LRO from the provided token.
	ResumeToken string
}

// ExternalNetworksClientBeginUpdateBfdForBgpAdministrativeStateOptions contains the optional parameters for the ExternalNetworksClient.BeginUpdateBfdForBgpAdministrativeState
// method.
type ExternalNetworksClientBeginUpdateBfdForBgpAdministrativeStateOptions struct {
	// Resumes the LRO from the provided token.
	ResumeToken string
}

// ExternalNetworksClientBeginUpdateBgpAdministrativeStateOptions contains the optional parameters for the ExternalNetworksClient.BeginUpdateBgpAdministrativeState
// method.
type ExternalNetworksClientBeginUpdateBgpAdministrativeStateOptions struct {
	// Resumes the LRO from the provided token.
	ResumeToken string
}

// ExternalNetworksClientBeginUpdateOptions contains the optional parameters for the ExternalNetworksClient.BeginUpdate method.
type ExternalNetworksClientBeginUpdateOptions struct {
	// Resumes the LRO from the provided token.
	ResumeToken string
}

// ExternalNetworksClientGetOptions contains the optional parameters for the ExternalNetworksClient.Get method.
type ExternalNetworksClientGetOptions struct {
	// placeholder for future optional parameters
}

// ExternalNetworksClientListOptions contains the optional parameters for the ExternalNetworksClient.NewListPager method.
type ExternalNetworksClientListOptions struct {
	// placeholder for future optional parameters
}

// ExternalNetworksList - List of ExternalNetworks.
type ExternalNetworksList struct {
	// Url to follow for getting next page of resources.
	NextLink *string

	// List of ExternalNetworks resources.
	Value []*ExternalNetwork
}

// FabricBfdConfiguration - BFD Configuration properties.
type FabricBfdConfiguration struct {
	// READ-ONLY; interval in seconds. Example: 300.
	Interval *int32

	// READ-ONLY; multiplier. Example: 3.
	Multiplier *int32
}

// GetDeviceStatusProperties - Get Device status response properties.
type GetDeviceStatusProperties struct {
	// REQUIRED; Primary or Secondary power end.
	OperationalStatus *OperationalStatus

	// REQUIRED; On or Off power cycle state.
	PowerCycleState *PowerCycleState

	// REQUIRED; The serial number of the device
	SerialNumber *string
}

// GetDynamicInterfaceMapsPropertiesItem - Get Device static interface maps as per topology.
type GetDynamicInterfaceMapsPropertiesItem struct {
	// Connected to ARM resource or external interface
	ConnectedTo *string

	// The interface name.
	Name *string

	// The interface operational status.
	OperationalStatus *string

	// The physical status.
	PhyStatus *string

	// The interface transceiver type. Example: up or down
	TransceiverStatus *string

	// READ-ONLY; The interface administrative state.
	AdministrativeState *EnabledDisabledState
}

// GetStaticInterfaceMapsPropertiesItem - Get Device static interface maps as per topology.
type GetStaticInterfaceMapsPropertiesItem struct {
	// The port channel group id.
	ChannelGroupID *float32

	// Connected to ARM resource or external interface
	ConnectedTo *string

	// The physical cable connector type. Example: Optical
	ConnectorType *string

	// The interface description.
	Description *string

	// The interface identifier.
	Identifier *string

	// The interface type. Example: Ethernet
	InterfaceType *string

	// The interface name.
	Name *string

	// The interface speed. Example: 100
	Speed *float32
}

// IPCommunitiesClientBeginCreateOptions contains the optional parameters for the IPCommunitiesClient.BeginCreate method.
type IPCommunitiesClientBeginCreateOptions struct {
	// Resumes the LRO from the provided token.
	ResumeToken string
}

// IPCommunitiesClientBeginDeleteOptions contains the optional parameters for the IPCommunitiesClient.BeginDelete method.
type IPCommunitiesClientBeginDeleteOptions struct {
	// Resumes the LRO from the provided token.
	ResumeToken string
}

// IPCommunitiesClientBeginUpdateOptions contains the optional parameters for the IPCommunitiesClient.BeginUpdate method.
type IPCommunitiesClientBeginUpdateOptions struct {
	// Resumes the LRO from the provided token.
	ResumeToken string
}

// IPCommunitiesClientGetOptions contains the optional parameters for the IPCommunitiesClient.Get method.
type IPCommunitiesClientGetOptions struct {
	// placeholder for future optional parameters
}

// IPCommunitiesClientListByResourceGroupOptions contains the optional parameters for the IPCommunitiesClient.NewListByResourceGroupPager
// method.
type IPCommunitiesClientListByResourceGroupOptions struct {
	// placeholder for future optional parameters
}

// IPCommunitiesClientListBySubscriptionOptions contains the optional parameters for the IPCommunitiesClient.NewListBySubscriptionPager
// method.
type IPCommunitiesClientListBySubscriptionOptions struct {
	// placeholder for future optional parameters
}

// IPCommunitiesListResult - List of IPCommunities.
type IPCommunitiesListResult struct {
	// Url to follow for getting next page of resources.
	NextLink *string

	// List of IpCommunity resources.
	Value []*IPCommunity
}

// IPCommunity - The IpCommunity resource definition.
type IPCommunity struct {
	// REQUIRED; The geo-location where the resource lives
	Location *string

	// Resource properties.
	Properties *IPCommunityProperties

	// Resource tags.
	Tags map[string]*string

	// READ-ONLY; Fully qualified resource ID for the resource. Ex - /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}
	ID *string

	// READ-ONLY; The name of the resource
	Name *string

	// READ-ONLY; Azure Resource Manager metadata containing createdBy and modifiedBy information.
	SystemData *SystemData

	// READ-ONLY; The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or "Microsoft.Storage/storageAccounts"
	Type *string
}

// IPCommunityIDList - IP Community ID list properties.
type IPCommunityIDList struct {
	// List of IP Community resource IDs.
	IPCommunityIDs []*string
}

// IPCommunityPatch - The IPCommunity patch resource definition.
type IPCommunityPatch struct {
	// Resource tags
	Tags map[string]*string
}

// IPCommunityProperties - IpCommunityProperties define the resource properties.
type IPCommunityProperties struct {
	// REQUIRED; Action to be taken on the configuration. Example: Permit | Deny.
	Action *CommunityActionTypes

	// REQUIRED; List the communityMembers of IP Community .
	CommunityMembers []*string

	// Switch configuration description.
	Annotation *string

	// Supported well known Community List.
	WellKnownCommunities []*WellKnownCommunities

	// READ-ONLY; Gets the provisioning state of the resource.
	ProvisioningState *ProvisioningState
}

// IPExtendedCommunitiesClientBeginCreateOptions contains the optional parameters for the IPExtendedCommunitiesClient.BeginCreate
// method.
type IPExtendedCommunitiesClientBeginCreateOptions struct {
	// Resumes the LRO from the provided token.
	ResumeToken string
}

// IPExtendedCommunitiesClientBeginDeleteOptions contains the optional parameters for the IPExtendedCommunitiesClient.BeginDelete
// method.
type IPExtendedCommunitiesClientBeginDeleteOptions struct {
	// Resumes the LRO from the provided token.
	ResumeToken string
}

// IPExtendedCommunitiesClientBeginUpdateOptions contains the optional parameters for the IPExtendedCommunitiesClient.BeginUpdate
// method.
type IPExtendedCommunitiesClientBeginUpdateOptions struct {
	// Resumes the LRO from the provided token.
	ResumeToken string
}

// IPExtendedCommunitiesClientGetOptions contains the optional parameters for the IPExtendedCommunitiesClient.Get method.
type IPExtendedCommunitiesClientGetOptions struct {
	// placeholder for future optional parameters
}

// IPExtendedCommunitiesClientListByResourceGroupOptions contains the optional parameters for the IPExtendedCommunitiesClient.NewListByResourceGroupPager
// method.
type IPExtendedCommunitiesClientListByResourceGroupOptions struct {
	// placeholder for future optional parameters
}

// IPExtendedCommunitiesClientListBySubscriptionOptions contains the optional parameters for the IPExtendedCommunitiesClient.NewListBySubscriptionPager
// method.
type IPExtendedCommunitiesClientListBySubscriptionOptions struct {
	// placeholder for future optional parameters
}

// IPExtendedCommunity - The IpExtendedCommunity resource definition.
type IPExtendedCommunity struct {
	// REQUIRED; The geo-location where the resource lives
	Location *string

	// Resource properties.
	Properties *IPExtendedCommunityProperties

	// Resource tags.
	Tags map[string]*string

	// READ-ONLY; Fully qualified resource ID for the resource. Ex - /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}
	ID *string

	// READ-ONLY; The name of the resource
	Name *string

	// READ-ONLY; Azure Resource Manager metadata containing createdBy and modifiedBy information.
	SystemData *SystemData

	// READ-ONLY; The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or "Microsoft.Storage/storageAccounts"
	Type *string
}

// IPExtendedCommunityIDList - IP Extended Community Id list properties.
type IPExtendedCommunityIDList struct {
	// List of IP Extended Community resource IDs.
	IPExtendedCommunityIDs []*string
}

// IPExtendedCommunityListResult - List of IpExtendedCommunities.
type IPExtendedCommunityListResult struct {
	// Url to follow for getting next page of resources.
	NextLink *string

	// List of IpExtendedCommunities resources.
	Value []*IPExtendedCommunity
}

// IPExtendedCommunityPatch - The IpExtendedCommunities patch resource definition.
type IPExtendedCommunityPatch struct {
	// Resource tags
	Tags map[string]*string
}

// IPExtendedCommunityProperties - IpExtendedCommunityProperties define the resource properties.
type IPExtendedCommunityProperties struct {
	// REQUIRED; Action to be taken on the configuration. Example: Permit | Deny.
	Action *CommunityActionTypes

	// REQUIRED; Route Target List.The expected formats are ASN(plain):NN >> example 4294967294:50, ASN.ASN:NN >> example 65533.65333:40,
	// IP-address:NN >> example 10.10.10.10:65535. The possible values of ASN,NN are
	// in range of 0-65535, ASN(plain) is in range of 0-4294967295.
	RouteTargets []*string

	// Switch configuration description.
	Annotation *string

	// READ-ONLY; Gets the provisioning state of the resource.
	ProvisioningState *ProvisioningState
}

// IPPrefix - The IPPrefix resource definition.
type IPPrefix struct {
	// REQUIRED; The geo-location where the resource lives
	Location *string

	// REQUIRED; Resource properties.
	Properties *IPPrefixProperties

	// Resource tags.
	Tags map[string]*string

	// READ-ONLY; Fully qualified resource ID for the resource. Ex - /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}
	ID *string

	// READ-ONLY; The name of the resource
	Name *string

	// READ-ONLY; Azure Resource Manager metadata containing createdBy and modifiedBy information.
	SystemData *SystemData

	// READ-ONLY; The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or "Microsoft.Storage/storageAccounts"
	Type *string
}

// IPPrefixPatch - The IPPrefix patch resource definition.
type IPPrefixPatch struct {
	// Resource tags
	Tags map[string]*string
}

// IPPrefixProperties - IpPrefixProperties define the resource properties.
type IPPrefixProperties struct {
	// REQUIRED; IpPrefix contains the list of IP PrefixRules objects.
	IPPrefixRules []*IPPrefixPropertiesIPPrefixRulesItem

	// Switch configuration description.
	Annotation *string

	// READ-ONLY; Gets the provisioning state of the resource.
	ProvisioningState *ProvisioningState
}

type IPPrefixPropertiesIPPrefixRulesItem struct {
	// REQUIRED; Action to be taken on the configuration. Example: Permit | Deny.
	Action *CommunityActionTypes

	// REQUIRED; Network Prefix specifying IPv4/IPv6 packets to be permitted or denied. Example: 1.1.1.0/24 | 3FFE:FFFF:0:CD30::/126
	NetworkPrefix *string

	// REQUIRED; Sequence to insert to/delete from existing route. Prefix lists are evaluated starting with the lowest sequence
	// number and continue down the list until a match is made. Once a match is made, the permit
	// or deny statement is applied to that network and the rest of the list is ignored.
	SequenceNumber *int64

	// Specify prefix-list bounds.
	Condition *Condition

	// SubnetMaskLength gives the minimum NetworkPrefix length to be matched.Possible values for IPv4 are 1 - 32. Possible values
	// of IPv6 are 1 - 128.
	SubnetMaskLength *int32
}

// IPPrefixesClientBeginCreateOptions contains the optional parameters for the IPPrefixesClient.BeginCreate method.
type IPPrefixesClientBeginCreateOptions struct {
	// Resumes the LRO from the provided token.
	ResumeToken string
}

// IPPrefixesClientBeginDeleteOptions contains the optional parameters for the IPPrefixesClient.BeginDelete method.
type IPPrefixesClientBeginDeleteOptions struct {
	// Resumes the LRO from the provided token.
	ResumeToken string
}

// IPPrefixesClientBeginUpdateOptions contains the optional parameters for the IPPrefixesClient.BeginUpdate method.
type IPPrefixesClientBeginUpdateOptions struct {
	// Resumes the LRO from the provided token.
	ResumeToken string
}

// IPPrefixesClientGetOptions contains the optional parameters for the IPPrefixesClient.Get method.
type IPPrefixesClientGetOptions struct {
	// placeholder for future optional parameters
}

// IPPrefixesClientListByResourceGroupOptions contains the optional parameters for the IPPrefixesClient.NewListByResourceGroupPager
// method.
type IPPrefixesClientListByResourceGroupOptions struct {
	// placeholder for future optional parameters
}

// IPPrefixesClientListBySubscriptionOptions contains the optional parameters for the IPPrefixesClient.NewListBySubscriptionPager
// method.
type IPPrefixesClientListBySubscriptionOptions struct {
	// placeholder for future optional parameters
}

// IPPrefixesListResult - List of IpPrefixes.
type IPPrefixesListResult struct {
	// Url to follow for getting next page of resources.
	NextLink *string

	// List of IPPrefix resources.
	Value []*IPPrefix
}

// InfrastructureServices IP ranges.
type InfrastructureServices struct {
	// The IPv4 Address space is optional, if the value is not defined at the time of NFC creation, then the default value 10.0.0.0/19
	// is considered. The IPV4 address subnet is an optional attribute.
	IPv4AddressSpaces []*string

	// The IPv6 is not supported right now.
	IPv6AddressSpaces []*string
}

// InterfaceStatus - Interface running status properties
type InterfaceStatus struct {
	// Connected to ARM resource or external interface
	ConnectedTo *string

	// The interface operational status.
	OperationalStatus *string

	// The physical status.
	PhyStatus *string

	// The interface transceiver type. Example: up or down
	TransceiverStatus *string

	// READ-ONLY; The interface administrative state.
	AdministrativeState *EnabledDisabledState
}

// InternalNetwork - Defines the InternalNetwork item.
type InternalNetwork struct {
	// REQUIRED; Resource properties.
	Properties *InternalNetworkProperties

	// READ-ONLY; Fully qualified resource ID for the resource. Ex - /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}
	ID *string

	// READ-ONLY; The name of the resource
	Name *string

	// READ-ONLY; Azure Resource Manager metadata containing createdBy and modifiedBy information.
	SystemData *SystemData

	// READ-ONLY; The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or "Microsoft.Storage/storageAccounts"
	Type *string
}

// InternalNetworkPatch - The InternalNetwork patch resource definition.
type InternalNetworkPatch struct {
	// InternalNetwork Patch properties.
	Properties *InternalNetworkPatchProperties
}

// InternalNetworkPatchProperties - InternalNetwork Patch properties.
type InternalNetworkPatchProperties struct {
	// Switch configuration description.
	Annotation *string

	// BGP configuration properties
	BgpConfiguration *BgpConfiguration

	// List with object connected IPv4 Subnets.
	ConnectedIPv4Subnets []*ConnectedSubnet

	// List with object connected IPv6 Subnets.
	ConnectedIPv6Subnets []*ConnectedSubnet

	// ARM resource ID of importRoutePolicy.
	ExportRoutePolicyID *string

	// ARM resource ID of importRoutePolicy.
	ImportRoutePolicyID *string

	// Maximum transmission unit. Default value is 1500.
	Mtu *int32

	// Static Route Configuration properties.
	StaticRouteConfiguration *StaticRouteConfiguration
}

// InternalNetworkProperties - Internal Network Properties
type InternalNetworkProperties struct {
	// REQUIRED; Vlan identifier. Example: 1001.
	VlanID *int32

	// Switch configuration description.
	Annotation *string

	// BGP configuration properties
	BgpConfiguration *BgpConfiguration

	// List with object connected IPv4 Subnets.
	ConnectedIPv4Subnets []*ConnectedSubnet

	// List with object connected IPv6 Subnets.
	ConnectedIPv6Subnets []*ConnectedSubnet

	// ARM resource ID of importRoutePolicy.
	ExportRoutePolicyID *string

	// ARM resource ID of importRoutePolicy.
	ImportRoutePolicyID *string

	// Maximum transmission unit. Default value is 1500.
	Mtu *int32

	// Static Route Configuration properties.
	StaticRouteConfiguration *StaticRouteConfiguration

	// READ-ONLY; Administrative state of the InternalNetwork. Example: Enabled | Disabled.
	AdministrativeState *EnabledDisabledState

	// READ-ONLY; List of resources the BFD for BGP is disabled on. Can be either entire NetworkFabric or NetworkRack.
	BfdDisabledOnResources []*string

	// READ-ONLY; List of resources the BFD of StaticRoutes is disabled on. Can be either entire NetworkFabric or NetworkRack.
	BfdForStaticRoutesDisabledOnResources []*string

	// READ-ONLY; List of resources the BGP is disabled on. Can be either entire NetworkFabric or NetworkRack.
	BgpDisabledOnResources []*string

	// READ-ONLY; List of resources the InternalNetwork is disabled on. Can be either entire NetworkFabric or NetworkRack.
	DisabledOnResources []*string

	// READ-ONLY; Gets the provisioning state of the resource.
	ProvisioningState *ProvisioningState
}

// InternalNetworksClientBeginClearArpEntriesOptions contains the optional parameters for the InternalNetworksClient.BeginClearArpEntries
// method.
type InternalNetworksClientBeginClearArpEntriesOptions struct {
	// Resumes the LRO from the provided token.
	ResumeToken string
}

// InternalNetworksClientBeginClearIPv6NeighborsOptions contains the optional parameters for the InternalNetworksClient.BeginClearIPv6Neighbors
// method.
type InternalNetworksClientBeginClearIPv6NeighborsOptions struct {
	// Resumes the LRO from the provided token.
	ResumeToken string
}

// InternalNetworksClientBeginCreateOptions contains the optional parameters for the InternalNetworksClient.BeginCreate method.
type InternalNetworksClientBeginCreateOptions struct {
	// Resumes the LRO from the provided token.
	ResumeToken string
}

// InternalNetworksClientBeginDeleteOptions contains the optional parameters for the InternalNetworksClient.BeginDelete method.
type InternalNetworksClientBeginDeleteOptions struct {
	// Resumes the LRO from the provided token.
	ResumeToken string
}

// InternalNetworksClientBeginUpdateAdministrativeStateOptions contains the optional parameters for the InternalNetworksClient.BeginUpdateAdministrativeState
// method.
type InternalNetworksClientBeginUpdateAdministrativeStateOptions struct {
	// Resumes the LRO from the provided token.
	ResumeToken string
}

// InternalNetworksClientBeginUpdateBfdForBgpAdministrativeStateOptions contains the optional parameters for the InternalNetworksClient.BeginUpdateBfdForBgpAdministrativeState
// method.
type InternalNetworksClientBeginUpdateBfdForBgpAdministrativeStateOptions struct {
	// Resumes the LRO from the provided token.
	ResumeToken string
}

// InternalNetworksClientBeginUpdateBfdForStaticRouteAdministrativeStateOptions contains the optional parameters for the InternalNetworksClient.BeginUpdateBfdForStaticRouteAdministrativeState
// method.
type InternalNetworksClientBeginUpdateBfdForStaticRouteAdministrativeStateOptions struct {
	// Resumes the LRO from the provided token.
	ResumeToken string
}

// InternalNetworksClientBeginUpdateBgpAdministrativeStateOptions contains the optional parameters for the InternalNetworksClient.BeginUpdateBgpAdministrativeState
// method.
type InternalNetworksClientBeginUpdateBgpAdministrativeStateOptions struct {
	// Resumes the LRO from the provided token.
	ResumeToken string
}

// InternalNetworksClientBeginUpdateOptions contains the optional parameters for the InternalNetworksClient.BeginUpdate method.
type InternalNetworksClientBeginUpdateOptions struct {
	// Resumes the LRO from the provided token.
	ResumeToken string
}

// InternalNetworksClientGetOptions contains the optional parameters for the InternalNetworksClient.Get method.
type InternalNetworksClientGetOptions struct {
	// placeholder for future optional parameters
}

// InternalNetworksClientListOptions contains the optional parameters for the InternalNetworksClient.NewListPager method.
type InternalNetworksClientListOptions struct {
	// placeholder for future optional parameters
}

// InternalNetworksList - List of InternalNetworks.
type InternalNetworksList struct {
	// Url to follow for getting next page of resources.
	NextLink *string

	// List of InternalNetworks resources.
	Value []*InternalNetwork
}

// L2IsolationDomain - The L2IsolationDomain resource definition.
type L2IsolationDomain struct {
	// REQUIRED; The geo-location where the resource lives
	Location *string

	// Resource properties.
	Properties *L2IsolationDomainProperties

	// Resource tags.
	Tags map[string]*string

	// READ-ONLY; Fully qualified resource ID for the resource. Ex - /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}
	ID *string

	// READ-ONLY; The name of the resource
	Name *string

	// READ-ONLY; Azure Resource Manager metadata containing createdBy and modifiedBy information.
	SystemData *SystemData

	// READ-ONLY; The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or "Microsoft.Storage/storageAccounts"
	Type *string
}

// L2IsolationDomainPatch - The L2IsolationDomain patch resource definition.
type L2IsolationDomainPatch struct {
	// Resource properties.
	Properties *L2IsolationDomainPatchProperties

	// Resource tags
	Tags map[string]*string
}

// L2IsolationDomainPatchProperties define the patchable resource properties.
type L2IsolationDomainPatchProperties struct {
	// Switch configuration description.
	Annotation *string

	// maximum transmission unit. Default value is 1500.
	Mtu *int32
}

// L2IsolationDomainProperties define the resource properties.
type L2IsolationDomainProperties struct {
	// REQUIRED; Network Fabric ARM resource id.
	NetworkFabricID *string

	// REQUIRED; vlanId. Example: 501.
	VlanID *int32

	// Switch configuration description.
	Annotation *string

	// maximum transmission unit. Default value is 1500.
	Mtu *int32

	// READ-ONLY; state. Example: Enabled | Disabled. It indicates administrative state of the isolationDomain, whether it is
	// enabled or disabled. If enabled, the configuration is applied on the devices. If disabled,
	// the configuration is removed from the devices
	AdministrativeState *EnabledDisabledState

	// READ-ONLY; List of resources the L2 Isolation Domain is disabled on. Can be either entire NetworkFabric or NetworkRack.
	DisabledOnResources []*string

	// READ-ONLY; Gets the provisioning state of the resource.
	ProvisioningState *ProvisioningState
}

// L2IsolationDomainsClientBeginClearArpTableOptions contains the optional parameters for the L2IsolationDomainsClient.BeginClearArpTable
// method.
type L2IsolationDomainsClientBeginClearArpTableOptions struct {
	// Resumes the LRO from the provided token.
	ResumeToken string
}

// L2IsolationDomainsClientBeginClearNeighborTableOptions contains the optional parameters for the L2IsolationDomainsClient.BeginClearNeighborTable
// method.
type L2IsolationDomainsClientBeginClearNeighborTableOptions struct {
	// Resumes the LRO from the provided token.
	ResumeToken string
}

// L2IsolationDomainsClientBeginCreateOptions contains the optional parameters for the L2IsolationDomainsClient.BeginCreate
// method.
type L2IsolationDomainsClientBeginCreateOptions struct {
	// Resumes the LRO from the provided token.
	ResumeToken string
}

// L2IsolationDomainsClientBeginDeleteOptions contains the optional parameters for the L2IsolationDomainsClient.BeginDelete
// method.
type L2IsolationDomainsClientBeginDeleteOptions struct {
	// Resumes the LRO from the provided token.
	ResumeToken string
}

// L2IsolationDomainsClientBeginGetArpEntriesOptions contains the optional parameters for the L2IsolationDomainsClient.BeginGetArpEntries
// method.
type L2IsolationDomainsClientBeginGetArpEntriesOptions struct {
	// Resumes the LRO from the provided token.
	ResumeToken string
}

// L2IsolationDomainsClientBeginUpdateAdministrativeStateOptions contains the optional parameters for the L2IsolationDomainsClient.BeginUpdateAdministrativeState
// method.
type L2IsolationDomainsClientBeginUpdateAdministrativeStateOptions struct {
	// Resumes the LRO from the provided token.
	ResumeToken string
}

// L2IsolationDomainsClientBeginUpdateOptions contains the optional parameters for the L2IsolationDomainsClient.BeginUpdate
// method.
type L2IsolationDomainsClientBeginUpdateOptions struct {
	// Resumes the LRO from the provided token.
	ResumeToken string
}

// L2IsolationDomainsClientGetOptions contains the optional parameters for the L2IsolationDomainsClient.Get method.
type L2IsolationDomainsClientGetOptions struct {
	// placeholder for future optional parameters
}

// L2IsolationDomainsClientListByResourceGroupOptions contains the optional parameters for the L2IsolationDomainsClient.NewListByResourceGroupPager
// method.
type L2IsolationDomainsClientListByResourceGroupOptions struct {
	// placeholder for future optional parameters
}

// L2IsolationDomainsClientListBySubscriptionOptions contains the optional parameters for the L2IsolationDomainsClient.NewListBySubscriptionPager
// method.
type L2IsolationDomainsClientListBySubscriptionOptions struct {
	// placeholder for future optional parameters
}

// L2IsolationDomainsListResult - List of L2IsolationDomains.
type L2IsolationDomainsListResult struct {
	// Url to follow for getting next page of resources.
	NextLink *string

	// Displays list of L2IsolationDomain resources.
	Value []*L2IsolationDomain
}

// L3IsolationDomain - The L3IsolationDomain resource definition.
type L3IsolationDomain struct {
	// REQUIRED; The geo-location where the resource lives
	Location *string

	// Resource properties.
	Properties *L3IsolationDomainProperties

	// Resource tags.
	Tags map[string]*string

	// READ-ONLY; Fully qualified resource ID for the resource. Ex - /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}
	ID *string

	// READ-ONLY; The name of the resource
	Name *string

	// READ-ONLY; Azure Resource Manager metadata containing createdBy and modifiedBy information.
	SystemData *SystemData

	// READ-ONLY; The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or "Microsoft.Storage/storageAccounts"
	Type *string
}

// L3IsolationDomainPatch - The L3IsolationDomain patch resource definition.
type L3IsolationDomainPatch struct {
	// Resource properties.
	Properties *L3IsolationDomainPatchProperties

	// Resource tags
	Tags map[string]*string
}

// L3IsolationDomainPatchProperties define the patch resource properties.
type L3IsolationDomainPatchProperties struct {
	// List of Ipv4 and Ipv6 route configurations.
	AggregateRouteConfiguration *AggregateRouteConfiguration

	// Connected Subnet RoutePolicy
	ConnectedSubnetRoutePolicy *L3IsolationDomainPatchPropertiesConnectedSubnetRoutePolicy

	// L3 Isolation Domain description.
	Description *string

	// Advertise Connected Subnets. Ex: "True" | "False".
	RedistributeConnectedSubnets *RedistributeConnectedSubnets

	// Advertise Static Routes. Ex: "True" | "False".
	RedistributeStaticRoutes *RedistributeStaticRoutes
}

// L3IsolationDomainPatchPropertiesConnectedSubnetRoutePolicy - Connected Subnet RoutePolicy
type L3IsolationDomainPatchPropertiesConnectedSubnetRoutePolicy struct {
	// exportRoutePolicyId value.
	ExportRoutePolicyID *string

	// READ-ONLY; Enabled/Disabled connected subnet route policy. Ex: Enabled | Disabled.
	AdministrativeState *EnabledDisabledState
}

// L3IsolationDomainProperties define the resource properties.
type L3IsolationDomainProperties struct {
	// REQUIRED; Network Fabric ARM resource id.
	NetworkFabricID *string

	// List of Ipv4 and Ipv6 route configurations.
	AggregateRouteConfiguration *AggregateRouteConfiguration

	// Switch configuration description.
	Annotation *string

	// Connected Subnet RoutePolicy
	ConnectedSubnetRoutePolicy *L3IsolationDomainPatchPropertiesConnectedSubnetRoutePolicy

	// L3 Isolation Domain description.
	Description *string

	// Advertise Connected Subnets. Ex: "True" | "False".
	RedistributeConnectedSubnets *RedistributeConnectedSubnets

	// Advertise Static Routes. Ex: "True" | "False".
	RedistributeStaticRoutes *RedistributeStaticRoutes

	// READ-ONLY; Administrative state of the IsolationDomain. Example: Enabled | Disabled.
	AdministrativeState *EnabledDisabledState

	// READ-ONLY; List of resources the L3 Isolation Domain is disabled on. Can be either entire NetworkFabric or NetworkRack.
	DisabledOnResources []*string

	// READ-ONLY; List of resources the OptionB is disabled on. Can be either entire NetworkFabric or NetworkRack.
	OptionBDisabledOnResources []*string

	// READ-ONLY; Gets the provisioning state of the resource.
	ProvisioningState *ProvisioningState
}

// L3IsolationDomainsClientBeginClearArpTableOptions contains the optional parameters for the L3IsolationDomainsClient.BeginClearArpTable
// method.
type L3IsolationDomainsClientBeginClearArpTableOptions struct {
	// Resumes the LRO from the provided token.
	ResumeToken string
}

// L3IsolationDomainsClientBeginClearNeighborTableOptions contains the optional parameters for the L3IsolationDomainsClient.BeginClearNeighborTable
// method.
type L3IsolationDomainsClientBeginClearNeighborTableOptions struct {
	// Resumes the LRO from the provided token.
	ResumeToken string
}

// L3IsolationDomainsClientBeginCreateOptions contains the optional parameters for the L3IsolationDomainsClient.BeginCreate
// method.
type L3IsolationDomainsClientBeginCreateOptions struct {
	// Resumes the LRO from the provided token.
	ResumeToken string
}

// L3IsolationDomainsClientBeginDeleteOptions contains the optional parameters for the L3IsolationDomainsClient.BeginDelete
// method.
type L3IsolationDomainsClientBeginDeleteOptions struct {
	// Resumes the LRO from the provided token.
	ResumeToken string
}

// L3IsolationDomainsClientBeginUpdateAdministrativeStateOptions contains the optional parameters for the L3IsolationDomainsClient.BeginUpdateAdministrativeState
// method.
type L3IsolationDomainsClientBeginUpdateAdministrativeStateOptions struct {
	// Resumes the LRO from the provided token.
	ResumeToken string
}

// L3IsolationDomainsClientBeginUpdateOptionBAdministrativeStateOptions contains the optional parameters for the L3IsolationDomainsClient.BeginUpdateOptionBAdministrativeState
// method.
type L3IsolationDomainsClientBeginUpdateOptionBAdministrativeStateOptions struct {
	// Resumes the LRO from the provided token.
	ResumeToken string
}

// L3IsolationDomainsClientBeginUpdateOptions contains the optional parameters for the L3IsolationDomainsClient.BeginUpdate
// method.
type L3IsolationDomainsClientBeginUpdateOptions struct {
	// Resumes the LRO from the provided token.
	ResumeToken string
}

// L3IsolationDomainsClientGetOptions contains the optional parameters for the L3IsolationDomainsClient.Get method.
type L3IsolationDomainsClientGetOptions struct {
	// placeholder for future optional parameters
}

// L3IsolationDomainsClientListByResourceGroupOptions contains the optional parameters for the L3IsolationDomainsClient.NewListByResourceGroupPager
// method.
type L3IsolationDomainsClientListByResourceGroupOptions struct {
	// placeholder for future optional parameters
}

// L3IsolationDomainsClientListBySubscriptionOptions contains the optional parameters for the L3IsolationDomainsClient.NewListBySubscriptionPager
// method.
type L3IsolationDomainsClientListBySubscriptionOptions struct {
	// placeholder for future optional parameters
}

// L3IsolationDomainsListResult - List of L3IsolationDomains.
type L3IsolationDomainsListResult struct {
	// Url to follow for getting next page of resources.
	NextLink *string

	// List of L3IsolationDomain resources.
	Value []*L3IsolationDomain
}

// Layer2Configuration - layer2Configuration
type Layer2Configuration struct {
	// REQUIRED; MTU of the packets between PE & CE.
	Mtu *int32

	// Number of ports connected between PE/CE. Maximum value depends on FabricSKU.
	PortCount *int32

	// READ-ONLY; List of network device interfaces resource IDs.
	Interfaces []*string
}

// Layer3Configuration - layer3Configuration
type Layer3Configuration struct {
	// exportRoutePolicyId
	ExportRoutePolicyID *string

	// importRoutePolicyId
	ImportRoutePolicyID *string

	// ASN of PE devices for CE/PE connectivity.Example : 28
	PeerASN *int32

	// IPv4 Address Prefix of CE-PE interconnect links. Example: 172.31.0.0/31. The values can be specified at the time of creation
	// or can be updated afterwards. Any update to the values post-provisioning
	// may disrupt traffic. The 1st and 3rd IPs are to be configured on CE1 and CE2 for Option B interfaces. The 2nd and 4th IPs
	// are to be configured on PE1 and PE2 for Option B interfaces.
	PrimaryIPv4Prefix *string

	// IPv6 Address Prefix of CE-PE interconnect links. Example: 3FFE:FFFF:0:CD30::a0/126. The values can be specified at the
	// time of creation or can be updated afterwards. Any update to the values
	// post-provisioning may disrupt traffic. The 1st and 3rd IPs are to be configured on CE1 and CE2 for Option B interfaces.
	// The 2nd and 4th IPs are to be configured on PE1 and PE2 for Option B interfaces.
	PrimaryIPv6Prefix *string

	// Secondary IPv4 Address Prefix of CE-PE interconnect links. Example: 172.31.0.20/31. The values can be specified at the
	// time of creation or can be updated afterwards. Any update to the values
	// post-provisioning may disrupt traffic. The 1st and 3rd IPs are to be configured on CE1 and CE2 for Option B interfaces.
	// The 2nd and 4th IPs are to be configured on PE1 and PE2 for Option B interfaces.
	SecondaryIPv4Prefix *string

	// Secondary IPv6 Address Prefix of CE-PE interconnect links. Example: 3FFE:FFFF:0:CD30::a4/126. The values can be specified
	// at the time of creation or can be updated afterwards. Any update to the values
	// post-provisioning may disrupt traffic. The 1st and 3rd IPs are to be configured on CE1 and CE2 for Option B interfaces.
	// The 2nd and 4th IPs are to be configured on PE1 and PE2 for Option B interfaces.
	SecondaryIPv6Prefix *string

	// VLAN for CE/PE Layer 3 connectivity.Example : 501
	VlanID *int32

	// READ-ONLY; ASN of CE devices for CE/PE connectivity.
	FabricASN *int32
}

// Layer3OptionAProperties - Peering optionA properties
type Layer3OptionAProperties struct {
	// BFD configuration properties
	BfdConfiguration *BfdConfiguration

	// MTU to use for option A peering.
	Mtu *int32

	// Peer ASN number.Example : 28
	PeerASN *int32

	// IPv4 Address Prefix of CE-PE interconnect links. Example: 172.31.0.0/31. The values can be specified at the time of creation
	// or can be updated afterwards. Any update to the values post-provisioning
	// may disrupt traffic. The 1st and 3rd IPs are to be configured on CE1 and CE2 for Option B interfaces. The 2nd and 4th IPs
	// are to be configured on PE1 and PE2 for Option B interfaces.
	PrimaryIPv4Prefix *string

	// IPv6 Address Prefix of CE-PE interconnect links. Example: 3FFE:FFFF:0:CD30::a0/126. The values can be specified at the
	// time of creation or can be updated afterwards. Any update to the values
	// post-provisioning may disrupt traffic. The 1st and 3rd IPs are to be configured on CE1 and CE2 for Option B interfaces.
	// The 2nd and 4th IPs are to be configured on PE1 and PE2 for Option B interfaces.
	PrimaryIPv6Prefix *string

	// Secondary IPv4 Address Prefix of CE-PE interconnect links. Example: 172.31.0.20/31. The values can be specified at the
	// time of creation or can be updated afterwards. Any update to the values
	// post-provisioning may disrupt traffic. The 1st and 3rd IPs are to be configured on CE1 and CE2 for Option B interfaces.
	// The 2nd and 4th IPs are to be configured on PE1 and PE2 for Option B interfaces.
	SecondaryIPv4Prefix *string

	// Secondary IPv6 Address Prefix of CE-PE interconnect links. Example: 3FFE:FFFF:0:CD30::a4/126. The values can be specified
	// at the time of creation or can be updated afterwards. Any update to the values
	// post-provisioning may disrupt traffic. The 1st and 3rd IPs are to be configured on CE1 and CE2 for Option B interfaces.
	// The 2nd and 4th IPs are to be configured on PE1 and PE2 for Option B interfaces.
	SecondaryIPv6Prefix *string

	// Vlan identifier. Example : 501
	VlanID *int32

	// READ-ONLY; Fabric ASN number. Example 65001
	FabricASN *int32
}

// ManagedResourceGroupConfiguration - Managed Resource Group configuration properties.
type ManagedResourceGroupConfiguration struct {
	// Managed resource group location.
	Location *string

	// The NFC service will be hosted in a Managed resource group.
	Name *string
}

// ManagementNetworkConfiguration - Configuration to be used to setup the management network.
type ManagementNetworkConfiguration struct {
	// REQUIRED; Configuration for infrastructure vpn.
	InfrastructureVPNConfiguration *VPNConfigurationProperties

	// REQUIRED; Configuration for workload vpn.
	WorkloadVPNConfiguration *VPNConfigurationProperties
}

// NeighborAddress - Neighbor Address properties.
type NeighborAddress struct {
	// IP Address.
	Address *string

	// READ-ONLY; OperationalState of the NeighborAddress.
	OperationalState *string
}

// NetworkDevice - The NetworkDevice resource definition.
type NetworkDevice struct {
	// REQUIRED; The geo-location where the resource lives
	Location *string

	// Resource properties.
	Properties *NetworkDeviceProperties

	// Resource tags.
	Tags map[string]*string

	// READ-ONLY; Fully qualified resource ID for the resource. Ex - /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}
	ID *string

	// READ-ONLY; The name of the resource
	Name *string

	// READ-ONLY; Azure Resource Manager metadata containing createdBy and modifiedBy information.
	SystemData *SystemData

	// READ-ONLY; The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or "Microsoft.Storage/storageAccounts"
	Type *string
}

// NetworkDevicePatchParameters - The NetworkDevicePatchParameters resource definition.
type NetworkDevicePatchParameters struct {
	// Network Device Patch properties.
	Properties *NetworkDevicePatchParametersProperties

	// Azure resource tags that will replace the existing ones.
	Tags map[string]*string
}

// NetworkDevicePatchParametersProperties - Network Device Patch properties.
type NetworkDevicePatchParametersProperties struct {
	// Switch configuration description.
	Annotation *string

	// The host Name of the device.
	HostName *string

	// serialNumber of the format Make;Model;HardwareRevisionId;SerialNumber. Example: Arista;DCS-7280DR3-24;12.05;JPE21116969
	SerialNumber *string
}

// NetworkDeviceProperties define the resource properties.
type NetworkDeviceProperties struct {
	// REQUIRED; networkDeviceRole is the device role: Example: CE | ToR.
	NetworkDeviceRole *NetworkDeviceRoleTypes

	// REQUIRED; Network Device SKU name.
	NetworkDeviceSKU *string

	// Switch configuration description.
	Annotation *string

	// The host Name of the device.
	HostName *string

	// serialNumber of the format Make;Model;HardwareRevisionId;SerialNumber. Example: Arista;DCS-7280DR3-24;12.05;JPE21116969
	SerialNumber *string

	// READ-ONLY; Reference to network rack resource id.
	NetworkRackID *string

	// READ-ONLY; Gets the provisioning state of the resource.
	ProvisioningState *ProvisioningState

	// READ-ONLY; Current version of the device as defined in SKU.
	Version *string
}

// NetworkDeviceRoleProperties - Network device properties / role for the Network Rack.
type NetworkDeviceRoleProperties struct {
	// Name of the associated Network Device SKU.
	NetworkDeviceSKUName *string

	// Rack slot for the network device.
	RackSlot *int32

	// Role for the network device.
	RoleType *NetworkDeviceRackRoleType
}

// NetworkDeviceSKU - The NetworkDeviceSku resource definition.
type NetworkDeviceSKU struct {
	// REQUIRED; Resource properties.
	Properties *NetworkDeviceSKUProperties

	// READ-ONLY; Fully qualified resource ID for the resource. Ex - /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}
	ID *string

	// READ-ONLY; The name of the resource
	Name *string

	// READ-ONLY; Azure Resource Manager metadata containing createdBy and modifiedBy information.
	SystemData *SystemData

	// READ-ONLY; The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or "Microsoft.Storage/storageAccounts"
	Type *string
}

// NetworkDeviceSKUProperties - NetworkDeviceSkuProperties define the resource properties.
type NetworkDeviceSKUProperties struct {
	// REQUIRED; Model of the network device.
	Model *string

	// List of network device interfaces.
	Interfaces []*DeviceInterfaceProperties

	// Network device limits.
	Limits *DeviceLimits

	// Manufacturer of the network device.
	Manufacturer *string

	// Available roles for the network device.
	SupportedRoleTypes []*NetworkDeviceRoleName

	// List of network device interfaces.
	SupportedVersions []*SupportedVersionProperties

	// READ-ONLY; Gets the provisioning state of the resource.
	ProvisioningState *ProvisioningState
}

// NetworkDeviceSKUsClientGetOptions contains the optional parameters for the NetworkDeviceSKUsClient.Get method.
type NetworkDeviceSKUsClientGetOptions struct {
	// placeholder for future optional parameters
}

// NetworkDeviceSKUsClientListBySubscriptionOptions contains the optional parameters for the NetworkDeviceSKUsClient.NewListBySubscriptionPager
// method.
type NetworkDeviceSKUsClientListBySubscriptionOptions struct {
	// placeholder for future optional parameters
}

// NetworkDeviceSKUsListResult - List of NetworkDeviceSkus.
type NetworkDeviceSKUsListResult struct {
	// Url to follow for getting next page of resources.
	NextLink *string

	// List of NetworkDeviceSku resources.
	Value []*NetworkDeviceSKU
}

// NetworkDevicesClientBeginCreateOptions contains the optional parameters for the NetworkDevicesClient.BeginCreate method.
type NetworkDevicesClientBeginCreateOptions struct {
	// Resumes the LRO from the provided token.
	ResumeToken string
}

// NetworkDevicesClientBeginDeleteOptions contains the optional parameters for the NetworkDevicesClient.BeginDelete method.
type NetworkDevicesClientBeginDeleteOptions struct {
	// Resumes the LRO from the provided token.
	ResumeToken string
}

// NetworkDevicesClientBeginGenerateSupportPackageOptions contains the optional parameters for the NetworkDevicesClient.BeginGenerateSupportPackage
// method.
type NetworkDevicesClientBeginGenerateSupportPackageOptions struct {
	// Resumes the LRO from the provided token.
	ResumeToken string
}

// NetworkDevicesClientBeginGetDynamicInterfaceMapsOptions contains the optional parameters for the NetworkDevicesClient.BeginGetDynamicInterfaceMaps
// method.
type NetworkDevicesClientBeginGetDynamicInterfaceMapsOptions struct {
	// Resumes the LRO from the provided token.
	ResumeToken string
}

// NetworkDevicesClientBeginGetStaticInterfaceMapsOptions contains the optional parameters for the NetworkDevicesClient.BeginGetStaticInterfaceMaps
// method.
type NetworkDevicesClientBeginGetStaticInterfaceMapsOptions struct {
	// Resumes the LRO from the provided token.
	ResumeToken string
}

// NetworkDevicesClientBeginGetStatusOptions contains the optional parameters for the NetworkDevicesClient.BeginGetStatus
// method.
type NetworkDevicesClientBeginGetStatusOptions struct {
	// Resumes the LRO from the provided token.
	ResumeToken string
}

// NetworkDevicesClientBeginRebootOptions contains the optional parameters for the NetworkDevicesClient.BeginReboot method.
type NetworkDevicesClientBeginRebootOptions struct {
	// Resumes the LRO from the provided token.
	ResumeToken string
}

// NetworkDevicesClientBeginRestoreConfigOptions contains the optional parameters for the NetworkDevicesClient.BeginRestoreConfig
// method.
type NetworkDevicesClientBeginRestoreConfigOptions struct {
	// Resumes the LRO from the provided token.
	ResumeToken string
}

// NetworkDevicesClientBeginUpdateOptions contains the optional parameters for the NetworkDevicesClient.BeginUpdate method.
type NetworkDevicesClientBeginUpdateOptions struct {
	// Resumes the LRO from the provided token.
	ResumeToken string
}

// NetworkDevicesClientBeginUpdatePowerCycleOptions contains the optional parameters for the NetworkDevicesClient.BeginUpdatePowerCycle
// method.
type NetworkDevicesClientBeginUpdatePowerCycleOptions struct {
	// Resumes the LRO from the provided token.
	ResumeToken string
}

// NetworkDevicesClientBeginUpdateVersionOptions contains the optional parameters for the NetworkDevicesClient.BeginUpdateVersion
// method.
type NetworkDevicesClientBeginUpdateVersionOptions struct {
	// Resumes the LRO from the provided token.
	ResumeToken string
}

// NetworkDevicesClientGetOptions contains the optional parameters for the NetworkDevicesClient.Get method.
type NetworkDevicesClientGetOptions struct {
	// placeholder for future optional parameters
}

// NetworkDevicesClientListByResourceGroupOptions contains the optional parameters for the NetworkDevicesClient.NewListByResourceGroupPager
// method.
type NetworkDevicesClientListByResourceGroupOptions struct {
	// placeholder for future optional parameters
}

// NetworkDevicesClientListBySubscriptionOptions contains the optional parameters for the NetworkDevicesClient.NewListBySubscriptionPager
// method.
type NetworkDevicesClientListBySubscriptionOptions struct {
	// placeholder for future optional parameters
}

// NetworkDevicesListResult - List of NetworkDevices.
type NetworkDevicesListResult struct {
	// Url to follow for getting next page of resources.
	NextLink *string

	// List of NetworkDevice resources.
	Value []*NetworkDevice
}

// NetworkFabric - The NetworkFabric resource definition.
type NetworkFabric struct {
	// REQUIRED; The geo-location where the resource lives
	Location *string

	// Resource properties.
	Properties *NetworkFabricProperties

	// Resource tags.
	Tags map[string]*string

	// READ-ONLY; Fully qualified resource ID for the resource. Ex - /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}
	ID *string

	// READ-ONLY; The name of the resource
	Name *string

	// READ-ONLY; Azure Resource Manager metadata containing createdBy and modifiedBy information.
	SystemData *SystemData

	// READ-ONLY; The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or "Microsoft.Storage/storageAccounts"
	Type *string
}

// NetworkFabricController - The NetworkFabricController resource definition.
type NetworkFabricController struct {
	// REQUIRED; The geo-location where the resource lives
	Location *string

	// Resource properties.
	Properties *NetworkFabricControllerProperties

	// Resource tags.
	Tags map[string]*string

	// READ-ONLY; Fully qualified resource ID for the resource. Ex - /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}
	ID *string

	// READ-ONLY; The name of the resource
	Name *string

	// READ-ONLY; Azure Resource Manager metadata containing createdBy and modifiedBy information.
	SystemData *SystemData

	// READ-ONLY; The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or "Microsoft.Storage/storageAccounts"
	Type *string
}

// NetworkFabricControllerPatch - The NetworkFabricControllerPatch payload definition.
type NetworkFabricControllerPatch struct {
	// Network Fabric Controller patch properties.
	Properties *NetworkFabricControllerPatchableProperties

	// Azure resource tags that will replace the existing ones.
	Tags map[string]*string
}

// NetworkFabricControllerPatchableProperties - Network Fabric Controller updatable properties
type NetworkFabricControllerPatchableProperties struct {
	// As part of an update, the Infrastructure ExpressRoute CircuitID should be provided to create and Provision a NFC. This
	// Express route is dedicated for Infrastructure services. (This is a Mandatory
	// attribute)
	InfrastructureExpressRouteConnections []*ExpressRouteConnectionInformation

	// As part of an update, the workload ExpressRoute CircuitID should be provided to create and Provision a NFC. This Express
	// route is dedicated for Workload services. (This is a Mandatory attribute).
	WorkloadExpressRouteConnections []*ExpressRouteConnectionInformation
}

// NetworkFabricControllerProperties define the resource properties.
type NetworkFabricControllerProperties struct {
	// Switch configuration description.
	Annotation *string

	// IPv4 Network Fabric Controller Address Space.
	IPv4AddressSpace *string

	// IPv6 Network Fabric Controller Address Space.
	IPv6AddressSpace *string

	// As part of an update, the Infrastructure ExpressRoute CircuitID should be provided to create and Provision a NFC. This
	// Express route is dedicated for Infrastructure services. (This is a Mandatory
	// attribute)
	InfrastructureExpressRouteConnections []*ExpressRouteConnectionInformation

	// Managed Resource Group configuration properties.
	ManagedResourceGroupConfiguration *ManagedResourceGroupConfiguration

	// As part of an update, the workload ExpressRoute CircuitID should be provided to create and Provision a NFC. This Express
	// route is dedicated for Workload services. (This is a Mandatory attribute).
	WorkloadExpressRouteConnections []*ExpressRouteConnectionInformation

	// READ-ONLY; InfrastructureServices IP ranges.
	InfrastructureServices *InfrastructureServices

	// READ-ONLY; The NF-ID will be an input parameter used by the NF to link and get associated with the parent NFC Service.
	NetworkFabricIDs []*string

	// READ-ONLY; The Operational Status would always be NULL. Look only in to the Provisioning state for the latest status.
	OperationalState *NetworkFabricControllerOperationalState

	// READ-ONLY; Provides you the latest status of the NFC service, whether it is Accepted, updating, Succeeded or Failed. During
	// this process, the states keep changing based on the status of NFC provisioning.
	ProvisioningState *ProvisioningState

	// READ-ONLY; A workload management network is required for all the tenant (workload) traffic. This traffic is only dedicated
	// for Tenant workloads which are required to access internet or any other MSFT/Public
	// endpoints.
	WorkloadManagementNetwork *bool

	// READ-ONLY; WorkloadServices IP ranges.
	WorkloadServices *WorkloadServices
}

// NetworkFabricControllersClientBeginCreateOptions contains the optional parameters for the NetworkFabricControllersClient.BeginCreate
// method.
type NetworkFabricControllersClientBeginCreateOptions struct {
	// Resumes the LRO from the provided token.
	ResumeToken string
}

// NetworkFabricControllersClientBeginDeleteOptions contains the optional parameters for the NetworkFabricControllersClient.BeginDelete
// method.
type NetworkFabricControllersClientBeginDeleteOptions struct {
	// Resumes the LRO from the provided token.
	ResumeToken string
}

// NetworkFabricControllersClientBeginDisableWorkloadManagementNetworkOptions contains the optional parameters for the NetworkFabricControllersClient.BeginDisableWorkloadManagementNetwork
// method.
type NetworkFabricControllersClientBeginDisableWorkloadManagementNetworkOptions struct {
	// Resumes the LRO from the provided token.
	ResumeToken string
}

// NetworkFabricControllersClientBeginEnableWorkloadManagementNetworkOptions contains the optional parameters for the NetworkFabricControllersClient.BeginEnableWorkloadManagementNetwork
// method.
type NetworkFabricControllersClientBeginEnableWorkloadManagementNetworkOptions struct {
	// Resumes the LRO from the provided token.
	ResumeToken string
}

// NetworkFabricControllersClientBeginUpdateOptions contains the optional parameters for the NetworkFabricControllersClient.BeginUpdate
// method.
type NetworkFabricControllersClientBeginUpdateOptions struct {
	// Resumes the LRO from the provided token.
	ResumeToken string
}

// NetworkFabricControllersClientGetOptions contains the optional parameters for the NetworkFabricControllersClient.Get method.
type NetworkFabricControllersClientGetOptions struct {
	// placeholder for future optional parameters
}

// NetworkFabricControllersClientListByResourceGroupOptions contains the optional parameters for the NetworkFabricControllersClient.NewListByResourceGroupPager
// method.
type NetworkFabricControllersClientListByResourceGroupOptions struct {
	// placeholder for future optional parameters
}

// NetworkFabricControllersClientListBySubscriptionOptions contains the optional parameters for the NetworkFabricControllersClient.NewListBySubscriptionPager
// method.
type NetworkFabricControllersClientListBySubscriptionOptions struct {
	// placeholder for future optional parameters
}

// NetworkFabricControllersListResult - List of NetworkFabricControllers.
type NetworkFabricControllersListResult struct {
	// Url to follow for getting next page of resources.
	NextLink *string

	// List of NetworkFabricController resources.
	Value []*NetworkFabricController
}

// NetworkFabricPatchParameters - The NetworkFabric resource definition.
type NetworkFabricPatchParameters struct {
	// Network Fabric Patch properties.
	Properties *NetworkFabricPatchParametersProperties

	// Azure resource tags that will replace the existing ones.
	Tags map[string]*string
}

// NetworkFabricPatchParametersProperties - Network Fabric Patch properties.
type NetworkFabricPatchParametersProperties struct {
	// Switch configuration description.
	Annotation *string

	// Network and credentials configuration already applied to terminal server.
	TerminalServerConfiguration *TerminalServerPatchableProperties

	// READ-ONLY; List of L2IsolationDomain resource IDs under the Network Fabric.
	L2IsolationDomains []*string

	// READ-ONLY; List of L3IsolationDomain resource IDs under the Network Fabric.
	L3IsolationDomains []*string

	// READ-ONLY; List of NetworkRack resource IDs under the Network Fabric. The number of racks allowed depends on the Network
	// Fabric SKU.
	Racks []*string
}

// NetworkFabricProperties - define the resource properties.
type NetworkFabricProperties struct {
	// REQUIRED; ASN of CE devices for CE/PE connectivity.
	FabricASN *int32

	// REQUIRED; Configuration to be used to setup the management network.
	ManagementNetworkConfiguration *ManagementNetworkConfiguration

	// REQUIRED; Azure resource ID for the NetworkFabricController the NetworkFabric belongs.
	NetworkFabricControllerID *string

	// REQUIRED; Supported Network Fabric SKU.Example: Compute / Aggregate racks. Once the user chooses a particular SKU, only
	// supported racks can be added to the Network Fabric. The SKU determines whether it is a
	// single / multi rack Network Fabric.
	NetworkFabricSKU *string

	// REQUIRED; Number of racks associated to Network Fabric.Possible values are from 2-8.
	RackCount *int32

	// REQUIRED; Number of servers.Possible values are from 1-16.
	ServerCountPerRack *int32

	// REQUIRED; Network and credentials configuration currently applied to terminal server.
	TerminalServerConfiguration *TerminalServerConfiguration

	// Switch configuration description.
	Annotation *string

	// IPv4Prefix for Management Network. Example: 10.1.0.0/19.
	IPv4Prefix *string

	// IPv6Prefix for Management Network. Example: 3FFE:FFFF:0:CD40::/59.
	IPv6Prefix *string

	// READ-ONLY; List of L2IsolationDomain resource IDs under the Network Fabric.
	L2IsolationDomains []*string

	// READ-ONLY; List of L3IsolationDomain resource IDs under the Network Fabric.
	L3IsolationDomains []*string

	// READ-ONLY; Gets the operational state of the resource.
	OperationalState *NetworkFabricOperationalState

	// READ-ONLY; Gets the provisioning state of the resource.
	ProvisioningState *ProvisioningState

	// READ-ONLY; List of NetworkRack resource IDs under the Network Fabric. The number of racks allowed depends on the Network
	// Fabric SKU.
	Racks []*string

	// READ-ONLY; Router Id of CE to be used for MP-BGP between PE and CE
	RouterID *string
}

// NetworkFabricSKU - The NetworkFabricSku resource definition.
type NetworkFabricSKU struct {
	// REQUIRED; Resource properties.
	Properties *NetworkFabricSKUProperties

	// READ-ONLY; Fully qualified resource ID for the resource. Ex - /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}
	ID *string

	// READ-ONLY; The name of the resource
	Name *string

	// READ-ONLY; Azure Resource Manager metadata containing createdBy and modifiedBy information.
	SystemData *SystemData

	// READ-ONLY; The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or "Microsoft.Storage/storageAccounts"
	Type *string
}

// NetworkFabricSKUProperties - NetworkFabricSkuProperties define the resource properties.
type NetworkFabricSKUProperties struct {
	// Maximum number of compute racks available for this Network Fabric SKU.
	MaxComputeRacks *int32

	// READ-ONLY; The URI gives full details of sku.
	DetailsURI *string

	// READ-ONLY; Maximum supported version.
	MaxSupportedVer *string

	// READ-ONLY; Minimum supported version.
	MinSupportedVer *string

	// READ-ONLY; Gets the provisioning state of the resource.
	ProvisioningState *ProvisioningState

	// READ-ONLY; Type of Network Fabric Sku.
	Type *string
}

// NetworkFabricSKUsClientGetOptions contains the optional parameters for the NetworkFabricSKUsClient.Get method.
type NetworkFabricSKUsClientGetOptions struct {
	// placeholder for future optional parameters
}

// NetworkFabricSKUsClientListBySubscriptionOptions contains the optional parameters for the NetworkFabricSKUsClient.NewListBySubscriptionPager
// method.
type NetworkFabricSKUsClientListBySubscriptionOptions struct {
	// placeholder for future optional parameters
}

// NetworkFabricSKUsListResult - List of NetworkFabricSkus.
type NetworkFabricSKUsListResult struct {
	// Url to follow for getting next page of resources.
	NextLink *string

	// List of NetworkFabricSku resources.
	Value []*NetworkFabricSKU
}

// NetworkFabricsClientBeginCreateOptions contains the optional parameters for the NetworkFabricsClient.BeginCreate method.
type NetworkFabricsClientBeginCreateOptions struct {
	// Resumes the LRO from the provided token.
	ResumeToken string
}

// NetworkFabricsClientBeginDeleteOptions contains the optional parameters for the NetworkFabricsClient.BeginDelete method.
type NetworkFabricsClientBeginDeleteOptions struct {
	// Resumes the LRO from the provided token.
	ResumeToken string
}

// NetworkFabricsClientBeginDeprovisionOptions contains the optional parameters for the NetworkFabricsClient.BeginDeprovision
// method.
type NetworkFabricsClientBeginDeprovisionOptions struct {
	// Resumes the LRO from the provided token.
	ResumeToken string
}

// NetworkFabricsClientBeginProvisionOptions contains the optional parameters for the NetworkFabricsClient.BeginProvision
// method.
type NetworkFabricsClientBeginProvisionOptions struct {
	// Resumes the LRO from the provided token.
	ResumeToken string
}

// NetworkFabricsClientBeginUpdateOptions contains the optional parameters for the NetworkFabricsClient.BeginUpdate method.
type NetworkFabricsClientBeginUpdateOptions struct {
	// Resumes the LRO from the provided token.
	ResumeToken string
}

// NetworkFabricsClientGetOptions contains the optional parameters for the NetworkFabricsClient.Get method.
type NetworkFabricsClientGetOptions struct {
	// placeholder for future optional parameters
}

// NetworkFabricsClientListByResourceGroupOptions contains the optional parameters for the NetworkFabricsClient.NewListByResourceGroupPager
// method.
type NetworkFabricsClientListByResourceGroupOptions struct {
	// placeholder for future optional parameters
}

// NetworkFabricsClientListBySubscriptionOptions contains the optional parameters for the NetworkFabricsClient.NewListBySubscriptionPager
// method.
type NetworkFabricsClientListBySubscriptionOptions struct {
	// placeholder for future optional parameters
}

// NetworkFabricsListResult - List of NetworkFabrics.
type NetworkFabricsListResult struct {
	// Url to follow for getting next page of resources.
	NextLink *string

	// List of NetworkFabric resources.
	Value []*NetworkFabric
}

// NetworkInterface - Defines the NetworkInterface resource.
type NetworkInterface struct {
	// REQUIRED; Resource properties.
	Properties *NetworkInterfaceProperties

	// READ-ONLY; Fully qualified resource ID for the resource. Ex - /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}
	ID *string

	// READ-ONLY; The name of the resource
	Name *string

	// READ-ONLY; Azure Resource Manager metadata containing createdBy and modifiedBy information.
	SystemData *SystemData

	// READ-ONLY; The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or "Microsoft.Storage/storageAccounts"
	Type *string
}

// NetworkInterfacePatch - The NetworkInterfacePatch resource definition.
type NetworkInterfacePatch struct {
	// Network Interface Patch properties.
	Properties *NetworkInterfacePatchProperties
}

// NetworkInterfacePatchProperties - Network Interface Patch properties.
type NetworkInterfacePatchProperties struct {
	// Switch configuration description.
	Annotation *string
}

// NetworkInterfaceProperties define the resource properties.
type NetworkInterfaceProperties struct {
	// Switch configuration description.
	Annotation *string

	// READ-ONLY; administrativeState of the network interface. Example: Enabled | Disabled.
	AdministrativeState *EnabledDisabledState

	// READ-ONLY; The arm resource id of the interface or compute server its connected to.
	ConnectedTo *string

	// READ-ONLY; ipv4Address.
	IPv4Address *string

	// READ-ONLY; ipv6Address.
	IPv6Address *string

	// READ-ONLY; The Interface Type. Example: Management/Data
	InterfaceType *InterfaceType

	// READ-ONLY; physicalIdentifier of the network interface.
	PhysicalIdentifier *string

	// READ-ONLY; Gets the provisioning state of the resource.
	ProvisioningState *ProvisioningState
}

// NetworkInterfacesClientBeginCreateOptions contains the optional parameters for the NetworkInterfacesClient.BeginCreate
// method.
type NetworkInterfacesClientBeginCreateOptions struct {
	// Resumes the LRO from the provided token.
	ResumeToken string
}

// NetworkInterfacesClientBeginDeleteOptions contains the optional parameters for the NetworkInterfacesClient.BeginDelete
// method.
type NetworkInterfacesClientBeginDeleteOptions struct {
	// Resumes the LRO from the provided token.
	ResumeToken string
}

// NetworkInterfacesClientBeginGetStatusOptions contains the optional parameters for the NetworkInterfacesClient.BeginGetStatus
// method.
type NetworkInterfacesClientBeginGetStatusOptions struct {
	// Resumes the LRO from the provided token.
	ResumeToken string
}

// NetworkInterfacesClientBeginUpdateAdministrativeStateOptions contains the optional parameters for the NetworkInterfacesClient.BeginUpdateAdministrativeState
// method.
type NetworkInterfacesClientBeginUpdateAdministrativeStateOptions struct {
	// Resumes the LRO from the provided token.
	ResumeToken string
}

// NetworkInterfacesClientBeginUpdateOptions contains the optional parameters for the NetworkInterfacesClient.BeginUpdate
// method.
type NetworkInterfacesClientBeginUpdateOptions struct {
	// Resumes the LRO from the provided token.
	ResumeToken string
}

// NetworkInterfacesClientGetOptions contains the optional parameters for the NetworkInterfacesClient.Get method.
type NetworkInterfacesClientGetOptions struct {
	// placeholder for future optional parameters
}

// NetworkInterfacesClientListOptions contains the optional parameters for the NetworkInterfacesClient.NewListPager method.
type NetworkInterfacesClientListOptions struct {
	// placeholder for future optional parameters
}

// NetworkInterfacesList - List of NetworkInterfaces.
type NetworkInterfacesList struct {
	// Url to follow for getting next page of resources.
	NextLink *string

	// List of NetworkInterfaces resources.
	Value []*NetworkInterface
}

// NetworkRack - The NetworkRack resource definition.
type NetworkRack struct {
	// REQUIRED; The geo-location where the resource lives
	Location *string

	// REQUIRED; Resource properties.
	Properties *NetworkRackProperties

	// Resource tags.
	Tags map[string]*string

	// READ-ONLY; Fully qualified resource ID for the resource. Ex - /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}
	ID *string

	// READ-ONLY; The name of the resource
	Name *string

	// READ-ONLY; Azure Resource Manager metadata containing createdBy and modifiedBy information.
	SystemData *SystemData

	// READ-ONLY; The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or "Microsoft.Storage/storageAccounts"
	Type *string
}

// NetworkRackPatch - The NetworkRack patch resource definition.
type NetworkRackPatch struct {
	// Resource properties.
	Properties any

	// Resource tags
	Tags map[string]*string
}

// NetworkRackProperties define the resource properties.
type NetworkRackProperties struct {
	// REQUIRED; Network Fabric ARM resource id.
	NetworkFabricID *string

	// REQUIRED; Network Rack SKU name.
	NetworkRackSKU *string

	// Switch configuration description.
	Annotation *string

	// READ-ONLY; List of network device ARM resource ids.
	NetworkDevices []*string

	// READ-ONLY; Gets the provisioning state of the resource.
	ProvisioningState *ProvisioningState
}

// NetworkRackSKU - The NetworkRackSku resource definition.
type NetworkRackSKU struct {
	// REQUIRED; Resource properties.
	Properties *NetworkRackSKUProperties

	// READ-ONLY; Fully qualified resource ID for the resource. Ex - /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}
	ID *string

	// READ-ONLY; The name of the resource
	Name *string

	// READ-ONLY; Azure Resource Manager metadata containing createdBy and modifiedBy information.
	SystemData *SystemData

	// READ-ONLY; The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or "Microsoft.Storage/storageAccounts"
	Type *string
}

// NetworkRackSKUProperties - NetworkRackSkuProperties define the resource properties.
type NetworkRackSKUProperties struct {
	// REQUIRED; The role of the Network Rack: Aggregate or Compute.
	RoleName *NetworkRackRoleName

	// Maximum number of servers available for this SKU.
	MaximumServerCount *int32

	// Maximum number of storage devices available for this SKU.
	MaximumStorageCount *int32

	// Maximum number of network uplinks available for this SKU.
	MaximumUplinks *int32

	// List of network device properties / role for the Network Rack.
	NetworkDevices []*NetworkDeviceRoleProperties

	// READ-ONLY; Gets the provisioning state of the resource.
	ProvisioningState *ProvisioningState
}

// NetworkRackSKUsClientGetOptions contains the optional parameters for the NetworkRackSKUsClient.Get method.
type NetworkRackSKUsClientGetOptions struct {
	// placeholder for future optional parameters
}

// NetworkRackSKUsClientListBySubscriptionOptions contains the optional parameters for the NetworkRackSKUsClient.NewListBySubscriptionPager
// method.
type NetworkRackSKUsClientListBySubscriptionOptions struct {
	// placeholder for future optional parameters
}

// NetworkRackSKUsListResult - List of NetworkRackSkus.
type NetworkRackSKUsListResult struct {
	// Url to follow for getting next page of resources.
	NextLink *string

	// List of NetworkRackSku resources.
	Value []*NetworkRackSKU
}

// NetworkRacksClientBeginCreateOptions contains the optional parameters for the NetworkRacksClient.BeginCreate method.
type NetworkRacksClientBeginCreateOptions struct {
	// Resumes the LRO from the provided token.
	ResumeToken string
}

// NetworkRacksClientBeginDeleteOptions contains the optional parameters for the NetworkRacksClient.BeginDelete method.
type NetworkRacksClientBeginDeleteOptions struct {
	// Resumes the LRO from the provided token.
	ResumeToken string
}

// NetworkRacksClientBeginUpdateOptions contains the optional parameters for the NetworkRacksClient.BeginUpdate method.
type NetworkRacksClientBeginUpdateOptions struct {
	// Resumes the LRO from the provided token.
	ResumeToken string
}

// NetworkRacksClientGetOptions contains the optional parameters for the NetworkRacksClient.Get method.
type NetworkRacksClientGetOptions struct {
	// placeholder for future optional parameters
}

// NetworkRacksClientListByResourceGroupOptions contains the optional parameters for the NetworkRacksClient.NewListByResourceGroupPager
// method.
type NetworkRacksClientListByResourceGroupOptions struct {
	// placeholder for future optional parameters
}

// NetworkRacksClientListBySubscriptionOptions contains the optional parameters for the NetworkRacksClient.NewListBySubscriptionPager
// method.
type NetworkRacksClientListBySubscriptionOptions struct {
	// placeholder for future optional parameters
}

// NetworkRacksListResult - List of NetworkRacks.
type NetworkRacksListResult struct {
	// Url to follow for getting next page of resources.
	NextLink *string

	// List of NetworkRack resources.
	Value []*NetworkRack
}

// NetworkToNetworkInterconnect - The NetworkToNetworkInterconnect resource definition.
type NetworkToNetworkInterconnect struct {
	// Resource properties.
	Properties *NetworkToNetworkInterconnectProperties

	// READ-ONLY; Fully qualified resource ID for the resource. Ex - /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}
	ID *string

	// READ-ONLY; The name of the resource
	Name *string

	// READ-ONLY; Azure Resource Manager metadata containing createdBy and modifiedBy information.
	SystemData *SystemData

	// READ-ONLY; The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or "Microsoft.Storage/storageAccounts"
	Type *string
}

// NetworkToNetworkInterconnectProperties - Configuration used to setup CE-PE connectivity.
type NetworkToNetworkInterconnectProperties struct {
	// REQUIRED; Configuration to use NNI for Infrastructure Management. Example: True/False.
	IsManagementType *BooleanEnumProperty

	// REQUIRED; Based on this parameter the layer2/layer3 is made as mandatory. Example: True/False
	UseOptionB *BooleanEnumProperty

	// Common properties for Layer2Configuration.
	Layer2Configuration *Layer2Configuration

	// Common properties for Layer3Configuration.
	Layer3Configuration *Layer3Configuration

	// Type of NNI used. Example: CE | NPB
	NniType *NniType

	// READ-ONLY; Gets the administrativeState of the resource. Example -Enabled/Disabled
	AdministrativeState *EnabledDisabledState

	// READ-ONLY; Gets the provisioning state of the resource.
	ProvisioningState *ProvisioningState
}

// NetworkToNetworkInterconnectsClientBeginCreateOptions contains the optional parameters for the NetworkToNetworkInterconnectsClient.BeginCreate
// method.
type NetworkToNetworkInterconnectsClientBeginCreateOptions struct {
	// Resumes the LRO from the provided token.
	ResumeToken string
}

// NetworkToNetworkInterconnectsClientBeginDeleteOptions contains the optional parameters for the NetworkToNetworkInterconnectsClient.BeginDelete
// method.
type NetworkToNetworkInterconnectsClientBeginDeleteOptions struct {
	// Resumes the LRO from the provided token.
	ResumeToken string
}

// NetworkToNetworkInterconnectsClientGetOptions contains the optional parameters for the NetworkToNetworkInterconnectsClient.Get
// method.
type NetworkToNetworkInterconnectsClientGetOptions struct {
	// placeholder for future optional parameters
}

// NetworkToNetworkInterconnectsClientListOptions contains the optional parameters for the NetworkToNetworkInterconnectsClient.NewListPager
// method.
type NetworkToNetworkInterconnectsClientListOptions struct {
	// placeholder for future optional parameters
}

// NetworkToNetworkInterconnectsList - List of NetworkToNetworkInterconnects.
type NetworkToNetworkInterconnectsList struct {
	// Url to follow for getting next page of resources.
	NextLink *string

	// List of NetworkToNetworkInterconnects resources.
	Value []*NetworkToNetworkInterconnect
}

// Operation - Details of a REST API operation, returned from the Resource Provider Operations API
type Operation struct {
	// Localized display information for this particular operation.
	Display *OperationDisplay

	// READ-ONLY; Enum. Indicates the action type. "Internal" refers to actions that are for internal only APIs.
	ActionType *ActionType

	// READ-ONLY; Whether the operation applies to data-plane. This is "true" for data-plane operations and "false" for ARM/control-plane
	// operations.
	IsDataAction *bool

	// READ-ONLY; The name of the operation, as per Resource-Based Access Control (RBAC). Examples: "Microsoft.Compute/virtualMachines/write",
	// "Microsoft.Compute/virtualMachines/capture/action"
	Name *string

	// READ-ONLY; The intended executor of the operation; as in Resource Based Access Control (RBAC) and audit logs UX. Default
	// value is "user,system"
	Origin *Origin
}

// OperationDisplay - Localized display information for this particular operation.
type OperationDisplay struct {
	// READ-ONLY; The short, localized friendly description of the operation; suitable for tool tips and detailed views.
	Description *string

	// READ-ONLY; The concise, localized friendly name for the operation; suitable for dropdowns. E.g. "Create or Update Virtual
	// Machine", "Restart Virtual Machine".
	Operation *string

	// READ-ONLY; The localized friendly form of the resource provider name, e.g. "Microsoft Monitoring Insights" or "Microsoft
	// Compute".
	Provider *string

	// READ-ONLY; The localized friendly name of the resource type related to this operation. E.g. "Virtual Machines" or "Job
	// Schedule Collections".
	Resource *string
}

// OperationListResult - A list of REST API operations supported by an Azure Resource Provider. It contains an URL link to
// get the next set of results.
type OperationListResult struct {
	// READ-ONLY; URL to get the next set of operation list results (if there are any).
	NextLink *string

	// READ-ONLY; List of operations supported by the resource provider
	Value []*Operation
}

// OperationsClientListOptions contains the optional parameters for the OperationsClient.NewListPager method.
type OperationsClientListOptions struct {
	// placeholder for future optional parameters
}

// OptionAProperties - Peering optionA properties
type OptionAProperties struct {
	// BFD Configuration properties.
	BfdConfiguration *FabricBfdConfiguration

	// MTU to use for option A peering.
	Mtu *int32

	// Peer ASN number.Example : 28
	PeerASN *int32

	// IPv4 Address Prefix of CE-PE interconnect links. Example: 172.31.0.0/31. The values can be specified at the time of creation
	// or can be updated afterwards. Any update to the values post-provisioning
	// may disrupt traffic. The 1st and 3rd IPs are to be configured on CE1 and CE2 for Option B interfaces. The 2nd and 4th IPs
	// are to be configured on PE1 and PE2 for Option B interfaces.
	PrimaryIPv4Prefix *string

	// IPv6 Address Prefix of CE-PE interconnect links. Example: 3FFE:FFFF:0:CD30::a0/126. The values can be specified at the
	// time of creation or can be updated afterwards. Any update to the values
	// post-provisioning may disrupt traffic. The 1st and 3rd IPs are to be configured on CE1 and CE2 for Option B interfaces.
	// The 2nd and 4th IPs are to be configured on PE1 and PE2 for Option B interfaces.
	PrimaryIPv6Prefix *string

	// Secondary IPv4 Address Prefix of CE-PE interconnect links. Example: 172.31.0.20/31. The values can be specified at the
	// time of creation or can be updated afterwards. Any update to the values
	// post-provisioning may disrupt traffic. The 1st and 3rd IPs are to be configured on CE1 and CE2 for Option B interfaces.
	// The 2nd and 4th IPs are to be configured on PE1 and PE2 for Option B interfaces.
	SecondaryIPv4Prefix *string

	// Secondary IPv6 Address Prefix of CE-PE interconnect links. Example: 3FFE:FFFF:0:CD30::a4/126. The values can be specified
	// at the time of creation or can be updated afterwards. Any update to the values
	// post-provisioning may disrupt traffic. The 1st and 3rd IPs are to be configured on CE1 and CE2 for Option B interfaces.
	// The 2nd and 4th IPs are to be configured on PE1 and PE2 for Option B interfaces.
	SecondaryIPv6Prefix *string

	// Vlan identifier. Example : 501
	VlanID *int32
}

// OptionBProperties - Option B configuration.
type OptionBProperties struct {
	// Route Targets to be applied for outgoing routes from CE.
	ExportRouteTargets []*string

	// Route Targets to be applied for incoming routes into CE.
	ImportRouteTargets []*string
}

// OptionBPropertiesAutoGenerated - Option B configuration.
type OptionBPropertiesAutoGenerated struct {
	// REQUIRED; Route Targets to be applied for outgoing routes from CE.
	ExportRouteTargets []*string

	// REQUIRED; Route Targets to be applied for incoming routes into CE.
	ImportRouteTargets []*string
}

// RoutePoliciesClientBeginCreateOptions contains the optional parameters for the RoutePoliciesClient.BeginCreate method.
type RoutePoliciesClientBeginCreateOptions struct {
	// Resumes the LRO from the provided token.
	ResumeToken string
}

// RoutePoliciesClientBeginDeleteOptions contains the optional parameters for the RoutePoliciesClient.BeginDelete method.
type RoutePoliciesClientBeginDeleteOptions struct {
	// Resumes the LRO from the provided token.
	ResumeToken string
}

// RoutePoliciesClientBeginUpdateOptions contains the optional parameters for the RoutePoliciesClient.BeginUpdate method.
type RoutePoliciesClientBeginUpdateOptions struct {
	// Resumes the LRO from the provided token.
	ResumeToken string
}

// RoutePoliciesClientGetOptions contains the optional parameters for the RoutePoliciesClient.Get method.
type RoutePoliciesClientGetOptions struct {
	// placeholder for future optional parameters
}

// RoutePoliciesClientListByResourceGroupOptions contains the optional parameters for the RoutePoliciesClient.NewListByResourceGroupPager
// method.
type RoutePoliciesClientListByResourceGroupOptions struct {
	// placeholder for future optional parameters
}

// RoutePoliciesClientListBySubscriptionOptions contains the optional parameters for the RoutePoliciesClient.NewListBySubscriptionPager
// method.
type RoutePoliciesClientListBySubscriptionOptions struct {
	// placeholder for future optional parameters
}

// RoutePoliciesListResult - List of RoutePolicies.
type RoutePoliciesListResult struct {
	// Url to follow for getting next page of resources.
	NextLink *string

	// List of RoutePolicy resources.
	Value []*RoutePolicy
}

// RoutePolicy - The RoutePolicy resource definition.
type RoutePolicy struct {
	// REQUIRED; The geo-location where the resource lives
	Location *string

	// REQUIRED; Resource properties.
	Properties *RoutePolicyProperties

	// Resource tags.
	Tags map[string]*string

	// READ-ONLY; Fully qualified resource ID for the resource. Ex - /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}
	ID *string

	// READ-ONLY; The name of the resource
	Name *string

	// READ-ONLY; Azure Resource Manager metadata containing createdBy and modifiedBy information.
	SystemData *SystemData

	// READ-ONLY; The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or "Microsoft.Storage/storageAccounts"
	Type *string
}

// RoutePolicyPatch - The RoutePolicy patch resource definition.
type RoutePolicyPatch struct {
	// Resource tags
	Tags map[string]*string
}

// RoutePolicyProperties - RoutePolicy Properties define the resource properties.
type RoutePolicyProperties struct {
	// REQUIRED; Route Policy statements.
	Statements []*RoutePolicyStatementProperties

	// Switch configuration description.
	Annotation *string

	// READ-ONLY; Gets the provisioning state of the resource.
	ProvisioningState *ProvisioningState
}

// RoutePolicyStatementProperties - Route Policy Statement properties..
type RoutePolicyStatementProperties struct {
	// REQUIRED; Route policy action properties.
	Action *StatementActionProperties

	// REQUIRED; Route policy condition properties.
	Condition *StatementConditionProperties

	// REQUIRED; Sequence to insert to/delete from existing route.
	SequenceNumber *int64

	// Switch configuration description.
	Annotation *string
}

// StatementActionProperties - Route policy action properties.
type StatementActionProperties struct {
	// REQUIRED; action. Example: Permit | Deny.
	ActionType *CommunityActionTypes

	// IP Community Properties.
	IPCommunityProperties *ActionIPCommunityProperties

	// IP Extended Community Properties.
	IPExtendedCommunityProperties *ActionIPExtendedCommunityProperties

	// localPreference of the route policy.
	LocalPreference *int64
}

// StatementConditionProperties - Route policy statement condition properties.
type StatementConditionProperties struct {
	// List of IP Community resource IDs.
	IPCommunityIDs []*string

	// List of IP Extended Community resource IDs.
	IPExtendedCommunityIDs []*string

	// Arm Resource Id of IpPrefix.
	IPPrefixID *string
}

// StaticRouteConfiguration - staticRouteConfiguration model.
type StaticRouteConfiguration struct {
	// BFD configuration properties
	BfdConfiguration *BfdConfiguration

	// List with object IPv4Routes.
	IPv4Routes []*StaticRouteProperties

	// List with object IPv6Routes.
	IPv6Routes []*StaticRouteProperties
}

// StaticRouteProperties - Static Route properties.
type StaticRouteProperties struct {
	// REQUIRED; List of next hop IPv4 | IPv6 addresses.
	NextHop []*string

	// REQUIRED; IPv4 | IPv6 Prefix.
	Prefix *string
}

// SupportPackageProperties - Generate support package post action properties.
type SupportPackageProperties struct {
	// REQUIRED; The URL to fetch the generated support package from.
	SupportPackageURL *string
}

// SupportedConnectorProperties - Supported connector properties.
type SupportedConnectorProperties struct {
	// Connector type. Example: Optical.
	ConnectorType *string

	// Maximum speed of the connector in Mbps.
	MaxSpeedInMbps *int32
}

// SupportedVersionProperties - Network device supported version properties.
type SupportedVersionProperties struct {
	// If the current version is in use.
	IsCurrent *IsCurrentVersion

	// If the current version is a test version.
	IsTest *IsTestVersion

	// Firmware version.
	VendorFirmwareVersion *string

	// Operating system version.
	VendorOsVersion *string

	// Operating system and firmware combined versions.
	Version *string
}

// SystemData - Metadata pertaining to creation and last modification of the resource.
type SystemData struct {
	// The timestamp of resource creation (UTC).
	CreatedAt *time.Time

	// The identity that created the resource.
	CreatedBy *string

	// The type of identity that created the resource.
	CreatedByType *CreatedByType

	// The timestamp of resource last modification (UTC)
	LastModifiedAt *time.Time

	// The identity that last modified the resource.
	LastModifiedBy *string

	// The type of identity that last modified the resource.
	LastModifiedByType *CreatedByType
}

// TerminalServerConfiguration - Network and credentials configuration currently applied to terminal server.
type TerminalServerConfiguration struct {
	// Password for the terminal server connection.
	Password *string

	// IPv4 Address Prefix of CE-PE interconnect links. Example: 172.31.0.0/31. The values can be specified at the time of creation
	// or can be updated afterwards. Any update to the values post-provisioning
	// may disrupt traffic. The 1st and 3rd IPs are to be configured on CE1 and CE2 for Option B interfaces. The 2nd and 4th IPs
	// are to be configured on PE1 and PE2 for Option B interfaces.
	PrimaryIPv4Prefix *string

	// IPv6 Address Prefix of CE-PE interconnect links. Example: 3FFE:FFFF:0:CD30::a0/126. The values can be specified at the
	// time of creation or can be updated afterwards. Any update to the values
	// post-provisioning may disrupt traffic. The 1st and 3rd IPs are to be configured on CE1 and CE2 for Option B interfaces.
	// The 2nd and 4th IPs are to be configured on PE1 and PE2 for Option B interfaces.
	PrimaryIPv6Prefix *string

	// Secondary IPv4 Address Prefix of CE-PE interconnect links. Example: 172.31.0.20/31. The values can be specified at the
	// time of creation or can be updated afterwards. Any update to the values
	// post-provisioning may disrupt traffic. The 1st and 3rd IPs are to be configured on CE1 and CE2 for Option B interfaces.
	// The 2nd and 4th IPs are to be configured on PE1 and PE2 for Option B interfaces.
	SecondaryIPv4Prefix *string

	// Secondary IPv6 Address Prefix of CE-PE interconnect links. Example: 3FFE:FFFF:0:CD30::a4/126. The values can be specified
	// at the time of creation or can be updated afterwards. Any update to the values
	// post-provisioning may disrupt traffic. The 1st and 3rd IPs are to be configured on CE1 and CE2 for Option B interfaces.
	// The 2nd and 4th IPs are to be configured on PE1 and PE2 for Option B interfaces.
	SecondaryIPv6Prefix *string

	// Serial Number of Terminal server.
	SerialNumber *string

	// Username for the terminal server connection.
	Username *string

	// READ-ONLY; ARM Resource ID used for the NetworkDevice.
	NetworkDeviceID *string
}

// TerminalServerPatchableProperties - Network and credential configuration currently applied on terminal server.
type TerminalServerPatchableProperties struct {
	// Password for the terminal server connection.
	Password *string

	// Serial Number of Terminal server.
	SerialNumber *string

	// Username for the terminal server connection.
	Username *string
}

// UpdateAdministrativeState - Update administrative state on list of resources.
type UpdateAdministrativeState struct {
	// Network Fabrics or Network Rack resource Id.
	ResourceIDs []*string

	// Administrative state.
	State *AdministrativeState
}

// UpdatePowerCycleProperties - Update power cycle input properties.
type UpdatePowerCycleProperties struct {
	// REQUIRED; Primary or Secondary power end.
	PowerEnd *PowerEnd

	// REQUIRED; On or Off toggle state.
	State *State
}

// UpdateVersionProperties - Generate support package post action properties.
type UpdateVersionProperties struct {
	// REQUIRED; The supported version defined in network device SKU.
	SKUVersion *string
}

// VPNConfigurationProperties - Configuration for infrastructure vpn.
type VPNConfigurationProperties struct {
	// REQUIRED; Peering option list.
	PeeringOption *PeeringOption

	// option A properties
	OptionAProperties *OptionAProperties

	// option B properties
	OptionBProperties *OptionBPropertiesAutoGenerated

	// READ-ONLY; Indicates configuration state. Example: Enabled | Disabled.
	AdministrativeState *EnabledDisabledState

	// READ-ONLY; Gets the networkToNetworkInterconnectId of the resource.
	NetworkToNetworkInterconnectID *string
}

// WorkloadServices IP ranges.
type WorkloadServices struct {
	// The IPv4 Address space is optional, if the value is defined at the time of NFC creation, then the default value 10.0.0.0/19
	// is considered. The IPV4 address subnet is an optional attribute.
	IPv4AddressSpaces []*string

	// The IPv6 is not supported right now.
	IPv6AddressSpaces []*string
}
