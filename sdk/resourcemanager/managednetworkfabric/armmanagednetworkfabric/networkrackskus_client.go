//go:build go1.18
// +build go1.18

// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.
// DO NOT EDIT.

package armmanagednetworkfabric

import (
	"context"
	"errors"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/arm"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/policy"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/runtime"
	"net/http"
	"net/url"
	"strings"
)

// NetworkRackSKUsClient contains the methods for the NetworkRackSKUs group.
// Don't use this type directly, use NewNetworkRackSKUsClient() instead.
type NetworkRackSKUsClient struct {
	internal       *arm.Client
	subscriptionID string
}

// NewNetworkRackSKUsClient creates a new instance of NetworkRackSKUsClient with the specified values.
//   - subscriptionID - The ID of the target subscription.
//   - credential - used to authorize requests. Usually a credential from azidentity.
//   - options - pass nil to accept the default values.
func NewNetworkRackSKUsClient(subscriptionID string, credential azcore.TokenCredential, options *arm.ClientOptions) (*NetworkRackSKUsClient, error) {
	cl, err := arm.NewClient(moduleName+".NetworkRackSKUsClient", moduleVersion, credential, options)
	if err != nil {
		return nil, err
	}
	client := &NetworkRackSKUsClient{
		subscriptionID: subscriptionID,
		internal:       cl,
	}
	return client, nil
}

// Get - Get Network Rack SKU resource.
// If the operation fails it returns an *azcore.ResponseError type.
//
// Generated from API version 2023-02-01-preview
//   - networkRackSKUName - Name of the Network Rack Sku
//   - options - NetworkRackSKUsClientGetOptions contains the optional parameters for the NetworkRackSKUsClient.Get method.
func (client *NetworkRackSKUsClient) Get(ctx context.Context, networkRackSKUName string, options *NetworkRackSKUsClientGetOptions) (NetworkRackSKUsClientGetResponse, error) {
	req, err := client.getCreateRequest(ctx, networkRackSKUName, options)
	if err != nil {
		return NetworkRackSKUsClientGetResponse{}, err
	}
	resp, err := client.internal.Pipeline().Do(req)
	if err != nil {
		return NetworkRackSKUsClientGetResponse{}, err
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {
		return NetworkRackSKUsClientGetResponse{}, runtime.NewResponseError(resp)
	}
	return client.getHandleResponse(resp)
}

// getCreateRequest creates the Get request.
func (client *NetworkRackSKUsClient) getCreateRequest(ctx context.Context, networkRackSKUName string, options *NetworkRackSKUsClientGetOptions) (*policy.Request, error) {
	urlPath := "/subscriptions/{subscriptionId}/providers/Microsoft.ManagedNetworkFabric/networkRackSkus/{networkRackSkuName}"
	if client.subscriptionID == "" {
		return nil, errors.New("parameter client.subscriptionID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{subscriptionId}", url.PathEscape(client.subscriptionID))
	if networkRackSKUName == "" {
		return nil, errors.New("parameter networkRackSKUName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{networkRackSkuName}", url.PathEscape(networkRackSKUName))
	req, err := runtime.NewRequest(ctx, http.MethodGet, runtime.JoinPaths(client.internal.Endpoint(), urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("api-version", "2023-02-01-preview")
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header["Accept"] = []string{"application/json"}
	return req, nil
}

// getHandleResponse handles the Get response.
func (client *NetworkRackSKUsClient) getHandleResponse(resp *http.Response) (NetworkRackSKUsClientGetResponse, error) {
	result := NetworkRackSKUsClientGetResponse{}
	if err := runtime.UnmarshalAsJSON(resp, &result.NetworkRackSKU); err != nil {
		return NetworkRackSKUsClientGetResponse{}, err
	}
	return result, nil
}

// NewListBySubscriptionPager - List all Network Rack SKUs in the given subscription.
//
// Generated from API version 2023-02-01-preview
//   - options - NetworkRackSKUsClientListBySubscriptionOptions contains the optional parameters for the NetworkRackSKUsClient.NewListBySubscriptionPager
//     method.
func (client *NetworkRackSKUsClient) NewListBySubscriptionPager(options *NetworkRackSKUsClientListBySubscriptionOptions) *runtime.Pager[NetworkRackSKUsClientListBySubscriptionResponse] {
	return runtime.NewPager(runtime.PagingHandler[NetworkRackSKUsClientListBySubscriptionResponse]{
		More: func(page NetworkRackSKUsClientListBySubscriptionResponse) bool {
			return page.NextLink != nil && len(*page.NextLink) > 0
		},
		Fetcher: func(ctx context.Context, page *NetworkRackSKUsClientListBySubscriptionResponse) (NetworkRackSKUsClientListBySubscriptionResponse, error) {
			var req *policy.Request
			var err error
			if page == nil {
				req, err = client.listBySubscriptionCreateRequest(ctx, options)
			} else {
				req, err = runtime.NewRequest(ctx, http.MethodGet, *page.NextLink)
			}
			if err != nil {
				return NetworkRackSKUsClientListBySubscriptionResponse{}, err
			}
			resp, err := client.internal.Pipeline().Do(req)
			if err != nil {
				return NetworkRackSKUsClientListBySubscriptionResponse{}, err
			}
			if !runtime.HasStatusCode(resp, http.StatusOK) {
				return NetworkRackSKUsClientListBySubscriptionResponse{}, runtime.NewResponseError(resp)
			}
			return client.listBySubscriptionHandleResponse(resp)
		},
	})
}

// listBySubscriptionCreateRequest creates the ListBySubscription request.
func (client *NetworkRackSKUsClient) listBySubscriptionCreateRequest(ctx context.Context, options *NetworkRackSKUsClientListBySubscriptionOptions) (*policy.Request, error) {
	urlPath := "/subscriptions/{subscriptionId}/providers/Microsoft.ManagedNetworkFabric/networkRackSkus"
	if client.subscriptionID == "" {
		return nil, errors.New("parameter client.subscriptionID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{subscriptionId}", url.PathEscape(client.subscriptionID))
	req, err := runtime.NewRequest(ctx, http.MethodGet, runtime.JoinPaths(client.internal.Endpoint(), urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("api-version", "2023-02-01-preview")
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header["Accept"] = []string{"application/json"}
	return req, nil
}

// listBySubscriptionHandleResponse handles the ListBySubscription response.
func (client *NetworkRackSKUsClient) listBySubscriptionHandleResponse(resp *http.Response) (NetworkRackSKUsClientListBySubscriptionResponse, error) {
	result := NetworkRackSKUsClientListBySubscriptionResponse{}
	if err := runtime.UnmarshalAsJSON(resp, &result.NetworkRackSKUsListResult); err != nil {
		return NetworkRackSKUsClientListBySubscriptionResponse{}, err
	}
	return result, nil
}
