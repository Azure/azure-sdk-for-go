//go:build go1.16
// +build go1.16

// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

package armmanagedservices

import (
	"context"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/policy"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/runtime"
	"net/http"
	"reflect"
)

// MarketplaceRegistrationDefinitionsListPager provides operations for iterating over paged responses.
type MarketplaceRegistrationDefinitionsListPager struct {
	client    *MarketplaceRegistrationDefinitionsClient
	current   MarketplaceRegistrationDefinitionsListResponse
	err       error
	requester func(context.Context) (*policy.Request, error)
	advancer  func(context.Context, MarketplaceRegistrationDefinitionsListResponse) (*policy.Request, error)
}

// Err returns the last error encountered while paging.
func (p *MarketplaceRegistrationDefinitionsListPager) Err() error {
	return p.err
}

// NextPage returns true if the pager advanced to the next page.
// Returns false if there are no more pages or an error occurred.
func (p *MarketplaceRegistrationDefinitionsListPager) NextPage(ctx context.Context) bool {
	var req *policy.Request
	var err error
	if !reflect.ValueOf(p.current).IsZero() {
		if p.current.MarketplaceRegistrationDefinitionList.NextLink == nil || len(*p.current.MarketplaceRegistrationDefinitionList.NextLink) == 0 {
			return false
		}
		req, err = p.advancer(ctx, p.current)
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		p.err = err
		return false
	}
	resp, err := p.client.pl.Do(req)
	if err != nil {
		p.err = err
		return false
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {
		p.err = p.client.listHandleError(resp)
		return false
	}
	result, err := p.client.listHandleResponse(resp)
	if err != nil {
		p.err = err
		return false
	}
	p.current = result
	return true
}

// PageResponse returns the current MarketplaceRegistrationDefinitionsListResponse page.
func (p *MarketplaceRegistrationDefinitionsListPager) PageResponse() MarketplaceRegistrationDefinitionsListResponse {
	return p.current
}

// MarketplaceRegistrationDefinitionsWithoutScopeListPager provides operations for iterating over paged responses.
type MarketplaceRegistrationDefinitionsWithoutScopeListPager struct {
	client    *MarketplaceRegistrationDefinitionsWithoutScopeClient
	current   MarketplaceRegistrationDefinitionsWithoutScopeListResponse
	err       error
	requester func(context.Context) (*policy.Request, error)
	advancer  func(context.Context, MarketplaceRegistrationDefinitionsWithoutScopeListResponse) (*policy.Request, error)
}

// Err returns the last error encountered while paging.
func (p *MarketplaceRegistrationDefinitionsWithoutScopeListPager) Err() error {
	return p.err
}

// NextPage returns true if the pager advanced to the next page.
// Returns false if there are no more pages or an error occurred.
func (p *MarketplaceRegistrationDefinitionsWithoutScopeListPager) NextPage(ctx context.Context) bool {
	var req *policy.Request
	var err error
	if !reflect.ValueOf(p.current).IsZero() {
		if p.current.MarketplaceRegistrationDefinitionList.NextLink == nil || len(*p.current.MarketplaceRegistrationDefinitionList.NextLink) == 0 {
			return false
		}
		req, err = p.advancer(ctx, p.current)
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		p.err = err
		return false
	}
	resp, err := p.client.pl.Do(req)
	if err != nil {
		p.err = err
		return false
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {
		p.err = p.client.listHandleError(resp)
		return false
	}
	result, err := p.client.listHandleResponse(resp)
	if err != nil {
		p.err = err
		return false
	}
	p.current = result
	return true
}

// PageResponse returns the current MarketplaceRegistrationDefinitionsWithoutScopeListResponse page.
func (p *MarketplaceRegistrationDefinitionsWithoutScopeListPager) PageResponse() MarketplaceRegistrationDefinitionsWithoutScopeListResponse {
	return p.current
}

// RegistrationAssignmentsListPager provides operations for iterating over paged responses.
type RegistrationAssignmentsListPager struct {
	client    *RegistrationAssignmentsClient
	current   RegistrationAssignmentsListResponse
	err       error
	requester func(context.Context) (*policy.Request, error)
	advancer  func(context.Context, RegistrationAssignmentsListResponse) (*policy.Request, error)
}

// Err returns the last error encountered while paging.
func (p *RegistrationAssignmentsListPager) Err() error {
	return p.err
}

// NextPage returns true if the pager advanced to the next page.
// Returns false if there are no more pages or an error occurred.
func (p *RegistrationAssignmentsListPager) NextPage(ctx context.Context) bool {
	var req *policy.Request
	var err error
	if !reflect.ValueOf(p.current).IsZero() {
		if p.current.RegistrationAssignmentList.NextLink == nil || len(*p.current.RegistrationAssignmentList.NextLink) == 0 {
			return false
		}
		req, err = p.advancer(ctx, p.current)
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		p.err = err
		return false
	}
	resp, err := p.client.pl.Do(req)
	if err != nil {
		p.err = err
		return false
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {
		p.err = p.client.listHandleError(resp)
		return false
	}
	result, err := p.client.listHandleResponse(resp)
	if err != nil {
		p.err = err
		return false
	}
	p.current = result
	return true
}

// PageResponse returns the current RegistrationAssignmentsListResponse page.
func (p *RegistrationAssignmentsListPager) PageResponse() RegistrationAssignmentsListResponse {
	return p.current
}

// RegistrationDefinitionsListPager provides operations for iterating over paged responses.
type RegistrationDefinitionsListPager struct {
	client    *RegistrationDefinitionsClient
	current   RegistrationDefinitionsListResponse
	err       error
	requester func(context.Context) (*policy.Request, error)
	advancer  func(context.Context, RegistrationDefinitionsListResponse) (*policy.Request, error)
}

// Err returns the last error encountered while paging.
func (p *RegistrationDefinitionsListPager) Err() error {
	return p.err
}

// NextPage returns true if the pager advanced to the next page.
// Returns false if there are no more pages or an error occurred.
func (p *RegistrationDefinitionsListPager) NextPage(ctx context.Context) bool {
	var req *policy.Request
	var err error
	if !reflect.ValueOf(p.current).IsZero() {
		if p.current.RegistrationDefinitionList.NextLink == nil || len(*p.current.RegistrationDefinitionList.NextLink) == 0 {
			return false
		}
		req, err = p.advancer(ctx, p.current)
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		p.err = err
		return false
	}
	resp, err := p.client.pl.Do(req)
	if err != nil {
		p.err = err
		return false
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {
		p.err = p.client.listHandleError(resp)
		return false
	}
	result, err := p.client.listHandleResponse(resp)
	if err != nil {
		p.err = err
		return false
	}
	p.current = result
	return true
}

// PageResponse returns the current RegistrationDefinitionsListResponse page.
func (p *RegistrationDefinitionsListPager) PageResponse() RegistrationDefinitionsListResponse {
	return p.current
}
