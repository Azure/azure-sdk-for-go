//go:build go1.16
// +build go1.16

// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

package armmanagedservices

import (
	"context"
	armruntime "github.com/Azure/azure-sdk-for-go/sdk/azcore/arm/runtime"
	"net/http"
	"time"
)

// MarketplaceRegistrationDefinitionsGetResponse contains the response from method MarketplaceRegistrationDefinitions.Get.
type MarketplaceRegistrationDefinitionsGetResponse struct {
	MarketplaceRegistrationDefinitionsGetResult
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// MarketplaceRegistrationDefinitionsGetResult contains the result from method MarketplaceRegistrationDefinitions.Get.
type MarketplaceRegistrationDefinitionsGetResult struct {
	MarketplaceRegistrationDefinition
}

// MarketplaceRegistrationDefinitionsListResponse contains the response from method MarketplaceRegistrationDefinitions.List.
type MarketplaceRegistrationDefinitionsListResponse struct {
	MarketplaceRegistrationDefinitionsListResult
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// MarketplaceRegistrationDefinitionsListResult contains the result from method MarketplaceRegistrationDefinitions.List.
type MarketplaceRegistrationDefinitionsListResult struct {
	MarketplaceRegistrationDefinitionList
}

// MarketplaceRegistrationDefinitionsWithoutScopeGetResponse contains the response from method MarketplaceRegistrationDefinitionsWithoutScope.Get.
type MarketplaceRegistrationDefinitionsWithoutScopeGetResponse struct {
	MarketplaceRegistrationDefinitionsWithoutScopeGetResult
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// MarketplaceRegistrationDefinitionsWithoutScopeGetResult contains the result from method MarketplaceRegistrationDefinitionsWithoutScope.Get.
type MarketplaceRegistrationDefinitionsWithoutScopeGetResult struct {
	MarketplaceRegistrationDefinition
}

// MarketplaceRegistrationDefinitionsWithoutScopeListResponse contains the response from method MarketplaceRegistrationDefinitionsWithoutScope.List.
type MarketplaceRegistrationDefinitionsWithoutScopeListResponse struct {
	MarketplaceRegistrationDefinitionsWithoutScopeListResult
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// MarketplaceRegistrationDefinitionsWithoutScopeListResult contains the result from method MarketplaceRegistrationDefinitionsWithoutScope.List.
type MarketplaceRegistrationDefinitionsWithoutScopeListResult struct {
	MarketplaceRegistrationDefinitionList
}

// OperationsListResponse contains the response from method Operations.List.
type OperationsListResponse struct {
	OperationsListResult
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// OperationsListResult contains the result from method Operations.List.
type OperationsListResult struct {
	OperationList
}

// RegistrationAssignmentsCreateOrUpdatePollerResponse contains the response from method RegistrationAssignments.CreateOrUpdate.
type RegistrationAssignmentsCreateOrUpdatePollerResponse struct {
	// Poller contains an initialized poller.
	Poller *RegistrationAssignmentsCreateOrUpdatePoller

	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// PollUntilDone will poll the service endpoint until a terminal state is reached or an error is received.
// freq: the time to wait between intervals in absence of a Retry-After header. Allowed minimum is one second.
// A good starting value is 30 seconds. Note that some resources might benefit from a different value.
func (l RegistrationAssignmentsCreateOrUpdatePollerResponse) PollUntilDone(ctx context.Context, freq time.Duration) (RegistrationAssignmentsCreateOrUpdateResponse, error) {
	respType := RegistrationAssignmentsCreateOrUpdateResponse{}
	resp, err := l.Poller.pt.PollUntilDone(ctx, freq, &respType.RegistrationAssignment)
	if err != nil {
		return respType, err
	}
	respType.RawResponse = resp
	return respType, nil
}

// Resume rehydrates a RegistrationAssignmentsCreateOrUpdatePollerResponse from the provided client and resume token.
func (l *RegistrationAssignmentsCreateOrUpdatePollerResponse) Resume(ctx context.Context, client *RegistrationAssignmentsClient, token string) error {
	pt, err := armruntime.NewPollerFromResumeToken("RegistrationAssignmentsClient.CreateOrUpdate", token, client.pl, client.createOrUpdateHandleError)
	if err != nil {
		return err
	}
	poller := &RegistrationAssignmentsCreateOrUpdatePoller{
		pt: pt,
	}
	resp, err := poller.Poll(ctx)
	if err != nil {
		return err
	}
	l.Poller = poller
	l.RawResponse = resp
	return nil
}

// RegistrationAssignmentsCreateOrUpdateResponse contains the response from method RegistrationAssignments.CreateOrUpdate.
type RegistrationAssignmentsCreateOrUpdateResponse struct {
	RegistrationAssignmentsCreateOrUpdateResult
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// RegistrationAssignmentsCreateOrUpdateResult contains the result from method RegistrationAssignments.CreateOrUpdate.
type RegistrationAssignmentsCreateOrUpdateResult struct {
	RegistrationAssignment
}

// RegistrationAssignmentsDeletePollerResponse contains the response from method RegistrationAssignments.Delete.
type RegistrationAssignmentsDeletePollerResponse struct {
	// Poller contains an initialized poller.
	Poller *RegistrationAssignmentsDeletePoller

	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// PollUntilDone will poll the service endpoint until a terminal state is reached or an error is received.
// freq: the time to wait between intervals in absence of a Retry-After header. Allowed minimum is one second.
// A good starting value is 30 seconds. Note that some resources might benefit from a different value.
func (l RegistrationAssignmentsDeletePollerResponse) PollUntilDone(ctx context.Context, freq time.Duration) (RegistrationAssignmentsDeleteResponse, error) {
	respType := RegistrationAssignmentsDeleteResponse{}
	resp, err := l.Poller.pt.PollUntilDone(ctx, freq, nil)
	if err != nil {
		return respType, err
	}
	respType.RawResponse = resp
	return respType, nil
}

// Resume rehydrates a RegistrationAssignmentsDeletePollerResponse from the provided client and resume token.
func (l *RegistrationAssignmentsDeletePollerResponse) Resume(ctx context.Context, client *RegistrationAssignmentsClient, token string) error {
	pt, err := armruntime.NewPollerFromResumeToken("RegistrationAssignmentsClient.Delete", token, client.pl, client.deleteHandleError)
	if err != nil {
		return err
	}
	poller := &RegistrationAssignmentsDeletePoller{
		pt: pt,
	}
	resp, err := poller.Poll(ctx)
	if err != nil {
		return err
	}
	l.Poller = poller
	l.RawResponse = resp
	return nil
}

// RegistrationAssignmentsDeleteResponse contains the response from method RegistrationAssignments.Delete.
type RegistrationAssignmentsDeleteResponse struct {
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// RegistrationAssignmentsGetResponse contains the response from method RegistrationAssignments.Get.
type RegistrationAssignmentsGetResponse struct {
	RegistrationAssignmentsGetResult
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// RegistrationAssignmentsGetResult contains the result from method RegistrationAssignments.Get.
type RegistrationAssignmentsGetResult struct {
	RegistrationAssignment
}

// RegistrationAssignmentsListResponse contains the response from method RegistrationAssignments.List.
type RegistrationAssignmentsListResponse struct {
	RegistrationAssignmentsListResult
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// RegistrationAssignmentsListResult contains the result from method RegistrationAssignments.List.
type RegistrationAssignmentsListResult struct {
	RegistrationAssignmentList
}

// RegistrationDefinitionsCreateOrUpdatePollerResponse contains the response from method RegistrationDefinitions.CreateOrUpdate.
type RegistrationDefinitionsCreateOrUpdatePollerResponse struct {
	// Poller contains an initialized poller.
	Poller *RegistrationDefinitionsCreateOrUpdatePoller

	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// PollUntilDone will poll the service endpoint until a terminal state is reached or an error is received.
// freq: the time to wait between intervals in absence of a Retry-After header. Allowed minimum is one second.
// A good starting value is 30 seconds. Note that some resources might benefit from a different value.
func (l RegistrationDefinitionsCreateOrUpdatePollerResponse) PollUntilDone(ctx context.Context, freq time.Duration) (RegistrationDefinitionsCreateOrUpdateResponse, error) {
	respType := RegistrationDefinitionsCreateOrUpdateResponse{}
	resp, err := l.Poller.pt.PollUntilDone(ctx, freq, &respType.RegistrationDefinition)
	if err != nil {
		return respType, err
	}
	respType.RawResponse = resp
	return respType, nil
}

// Resume rehydrates a RegistrationDefinitionsCreateOrUpdatePollerResponse from the provided client and resume token.
func (l *RegistrationDefinitionsCreateOrUpdatePollerResponse) Resume(ctx context.Context, client *RegistrationDefinitionsClient, token string) error {
	pt, err := armruntime.NewPollerFromResumeToken("RegistrationDefinitionsClient.CreateOrUpdate", token, client.pl, client.createOrUpdateHandleError)
	if err != nil {
		return err
	}
	poller := &RegistrationDefinitionsCreateOrUpdatePoller{
		pt: pt,
	}
	resp, err := poller.Poll(ctx)
	if err != nil {
		return err
	}
	l.Poller = poller
	l.RawResponse = resp
	return nil
}

// RegistrationDefinitionsCreateOrUpdateResponse contains the response from method RegistrationDefinitions.CreateOrUpdate.
type RegistrationDefinitionsCreateOrUpdateResponse struct {
	RegistrationDefinitionsCreateOrUpdateResult
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// RegistrationDefinitionsCreateOrUpdateResult contains the result from method RegistrationDefinitions.CreateOrUpdate.
type RegistrationDefinitionsCreateOrUpdateResult struct {
	RegistrationDefinition
}

// RegistrationDefinitionsDeleteResponse contains the response from method RegistrationDefinitions.Delete.
type RegistrationDefinitionsDeleteResponse struct {
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// RegistrationDefinitionsGetResponse contains the response from method RegistrationDefinitions.Get.
type RegistrationDefinitionsGetResponse struct {
	RegistrationDefinitionsGetResult
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// RegistrationDefinitionsGetResult contains the result from method RegistrationDefinitions.Get.
type RegistrationDefinitionsGetResult struct {
	RegistrationDefinition
}

// RegistrationDefinitionsListResponse contains the response from method RegistrationDefinitions.List.
type RegistrationDefinitionsListResponse struct {
	RegistrationDefinitionsListResult
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// RegistrationDefinitionsListResult contains the result from method RegistrationDefinitions.List.
type RegistrationDefinitionsListResult struct {
	RegistrationDefinitionList
}
