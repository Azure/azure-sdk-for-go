//go:build go1.16
// +build go1.16

// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

package armmanagementgroups

import (
	"context"
	"errors"
	"fmt"
	"net/http"
	"net/url"
	"strconv"
	"strings"

	"github.com/Azure/azure-sdk-for-go/sdk/azcore/arm"
	armruntime "github.com/Azure/azure-sdk-for-go/sdk/azcore/arm/runtime"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/policy"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/runtime"
)

// ManagementGroupsClient contains the methods for the ManagementGroups group.
// Don't use this type directly, use NewManagementGroupsClient() instead.
type ManagementGroupsClient struct {
	ep string
	pl runtime.Pipeline
}

// NewManagementGroupsClient creates a new instance of ManagementGroupsClient with the specified values.
func NewManagementGroupsClient(con *arm.Connection) *ManagementGroupsClient {
	return &ManagementGroupsClient{ep: con.Endpoint(), pl: con.NewPipeline(module, version)}
}

// BeginCreateOrUpdate - Create or update a management group. If a management group is already created and a subsequent create request is issued with different
// properties, the management group properties will be updated.
// If the operation fails it returns the *ErrorResponse error type.
func (client *ManagementGroupsClient) BeginCreateOrUpdate(ctx context.Context, groupID string, createManagementGroupRequest CreateManagementGroupRequest, options *ManagementGroupsBeginCreateOrUpdateOptions) (ManagementGroupsCreateOrUpdatePollerResponse, error) {
	resp, err := client.createOrUpdate(ctx, groupID, createManagementGroupRequest, options)
	if err != nil {
		return ManagementGroupsCreateOrUpdatePollerResponse{}, err
	}
	result := ManagementGroupsCreateOrUpdatePollerResponse{
		RawResponse: resp,
	}
	pt, err := armruntime.NewPoller("ManagementGroupsClient.CreateOrUpdate", "azure-async-operation", resp, client.pl, client.createOrUpdateHandleError)
	if err != nil {
		return ManagementGroupsCreateOrUpdatePollerResponse{}, err
	}
	result.Poller = &ManagementGroupsCreateOrUpdatePoller{
		pt: pt,
	}
	return result, nil
}

// CreateOrUpdate - Create or update a management group. If a management group is already created and a subsequent create request is issued with different
// properties, the management group properties will be updated.
// If the operation fails it returns the *ErrorResponse error type.
func (client *ManagementGroupsClient) createOrUpdate(ctx context.Context, groupID string, createManagementGroupRequest CreateManagementGroupRequest, options *ManagementGroupsBeginCreateOrUpdateOptions) (*http.Response, error) {
	req, err := client.createOrUpdateCreateRequest(ctx, groupID, createManagementGroupRequest, options)
	if err != nil {
		return nil, err
	}
	resp, err := client.pl.Do(req)
	if err != nil {
		return nil, err
	}
	if !runtime.HasStatusCode(resp, http.StatusOK, http.StatusAccepted) {
		return nil, client.createOrUpdateHandleError(resp)
	}
	return resp, nil
}

// createOrUpdateCreateRequest creates the CreateOrUpdate request.
func (client *ManagementGroupsClient) createOrUpdateCreateRequest(ctx context.Context, groupID string, createManagementGroupRequest CreateManagementGroupRequest, options *ManagementGroupsBeginCreateOrUpdateOptions) (*policy.Request, error) {
	urlPath := "/providers/Microsoft.Management/managementGroups/{groupId}"
	if groupID == "" {
		return nil, errors.New("parameter groupID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{groupId}", url.PathEscape(groupID))
	req, err := runtime.NewRequest(ctx, http.MethodPut, runtime.JoinPaths(client.ep, urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("api-version", "2021-04-01")
	req.Raw().URL.RawQuery = reqQP.Encode()
	if options != nil && options.CacheControl != nil {
		req.Raw().Header.Set("Cache-Control", *options.CacheControl)
	}
	req.Raw().Header.Set("Accept", "application/json")
	return req, runtime.MarshalAsJSON(req, createManagementGroupRequest)
}

// createOrUpdateHandleError handles the CreateOrUpdate error response.
func (client *ManagementGroupsClient) createOrUpdateHandleError(resp *http.Response) error {
	body, err := runtime.Payload(resp)
	if err != nil {
		return runtime.NewResponseError(err, resp)
	}
	errType := ErrorResponse{raw: string(body)}
	if err := runtime.UnmarshalAsJSON(resp, &errType); err != nil {
		return runtime.NewResponseError(fmt.Errorf("%s\n%s", string(body), err), resp)
	}
	return runtime.NewResponseError(&errType, resp)
}

// BeginDelete - Delete management group. If a management group contains child resources, the request will fail.
// If the operation fails it returns the *ErrorResponse error type.
func (client *ManagementGroupsClient) BeginDelete(ctx context.Context, groupID string, options *ManagementGroupsBeginDeleteOptions) (ManagementGroupsDeletePollerResponse, error) {
	resp, err := client.deleteOperation(ctx, groupID, options)
	if err != nil {
		return ManagementGroupsDeletePollerResponse{}, err
	}
	result := ManagementGroupsDeletePollerResponse{
		RawResponse: resp,
	}
	pt, err := armruntime.NewPoller("ManagementGroupsClient.Delete", "azure-async-operation", resp, client.pl, client.deleteHandleError)
	if err != nil {
		return ManagementGroupsDeletePollerResponse{}, err
	}
	result.Poller = &ManagementGroupsDeletePoller{
		pt: pt,
	}
	return result, nil
}

// Delete - Delete management group. If a management group contains child resources, the request will fail.
// If the operation fails it returns the *ErrorResponse error type.
func (client *ManagementGroupsClient) deleteOperation(ctx context.Context, groupID string, options *ManagementGroupsBeginDeleteOptions) (*http.Response, error) {
	req, err := client.deleteCreateRequest(ctx, groupID, options)
	if err != nil {
		return nil, err
	}
	resp, err := client.pl.Do(req)
	if err != nil {
		return nil, err
	}
	if !runtime.HasStatusCode(resp, http.StatusAccepted, http.StatusNoContent) {
		return nil, client.deleteHandleError(resp)
	}
	return resp, nil
}

// deleteCreateRequest creates the Delete request.
func (client *ManagementGroupsClient) deleteCreateRequest(ctx context.Context, groupID string, options *ManagementGroupsBeginDeleteOptions) (*policy.Request, error) {
	urlPath := "/providers/Microsoft.Management/managementGroups/{groupId}"
	if groupID == "" {
		return nil, errors.New("parameter groupID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{groupId}", url.PathEscape(groupID))
	req, err := runtime.NewRequest(ctx, http.MethodDelete, runtime.JoinPaths(client.ep, urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("api-version", "2021-04-01")
	req.Raw().URL.RawQuery = reqQP.Encode()
	if options != nil && options.CacheControl != nil {
		req.Raw().Header.Set("Cache-Control", *options.CacheControl)
	}
	req.Raw().Header.Set("Accept", "application/json")
	return req, nil
}

// deleteHandleError handles the Delete error response.
func (client *ManagementGroupsClient) deleteHandleError(resp *http.Response) error {
	body, err := runtime.Payload(resp)
	if err != nil {
		return runtime.NewResponseError(err, resp)
	}
	errType := ErrorResponse{raw: string(body)}
	if err := runtime.UnmarshalAsJSON(resp, &errType); err != nil {
		return runtime.NewResponseError(fmt.Errorf("%s\n%s", string(body), err), resp)
	}
	return runtime.NewResponseError(&errType, resp)
}

// Get - Get the details of the management group.
// If the operation fails it returns the *ErrorResponse error type.
func (client *ManagementGroupsClient) Get(ctx context.Context, groupID string, options *ManagementGroupsGetOptions) (ManagementGroupsGetResponse, error) {
	req, err := client.getCreateRequest(ctx, groupID, options)
	if err != nil {
		return ManagementGroupsGetResponse{}, err
	}
	resp, err := client.pl.Do(req)
	if err != nil {
		return ManagementGroupsGetResponse{}, err
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {
		return ManagementGroupsGetResponse{}, client.getHandleError(resp)
	}
	return client.getHandleResponse(resp)
}

// getCreateRequest creates the Get request.
func (client *ManagementGroupsClient) getCreateRequest(ctx context.Context, groupID string, options *ManagementGroupsGetOptions) (*policy.Request, error) {
	urlPath := "/providers/Microsoft.Management/managementGroups/{groupId}"
	if groupID == "" {
		return nil, errors.New("parameter groupID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{groupId}", url.PathEscape(groupID))
	req, err := runtime.NewRequest(ctx, http.MethodGet, runtime.JoinPaths(client.ep, urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("api-version", "2021-04-01")
	if options != nil && options.Expand != nil {
		reqQP.Set("$expand", string(*options.Expand))
	}
	if options != nil && options.Recurse != nil {
		reqQP.Set("$recurse", strconv.FormatBool(*options.Recurse))
	}
	if options != nil && options.Filter != nil {
		reqQP.Set("$filter", *options.Filter)
	}
	req.Raw().URL.RawQuery = reqQP.Encode()
	if options != nil && options.CacheControl != nil {
		req.Raw().Header.Set("Cache-Control", *options.CacheControl)
	}
	req.Raw().Header.Set("Accept", "application/json")
	return req, nil
}

// getHandleResponse handles the Get response.
func (client *ManagementGroupsClient) getHandleResponse(resp *http.Response) (ManagementGroupsGetResponse, error) {
	result := ManagementGroupsGetResponse{RawResponse: resp}
	if err := runtime.UnmarshalAsJSON(resp, &result.ManagementGroup); err != nil {
		return ManagementGroupsGetResponse{}, err
	}
	return result, nil
}

// getHandleError handles the Get error response.
func (client *ManagementGroupsClient) getHandleError(resp *http.Response) error {
	body, err := runtime.Payload(resp)
	if err != nil {
		return runtime.NewResponseError(err, resp)
	}
	errType := ErrorResponse{raw: string(body)}
	if err := runtime.UnmarshalAsJSON(resp, &errType); err != nil {
		return runtime.NewResponseError(fmt.Errorf("%s\n%s", string(body), err), resp)
	}
	return runtime.NewResponseError(&errType, resp)
}

// GetDescendants - List all entities that descend from a management group.
// If the operation fails it returns the *ErrorResponse error type.
func (client *ManagementGroupsClient) GetDescendants(groupID string, options *ManagementGroupsGetDescendantsOptions) *ManagementGroupsGetDescendantsPager {
	return &ManagementGroupsGetDescendantsPager{
		client: client,
		requester: func(ctx context.Context) (*policy.Request, error) {
			return client.getDescendantsCreateRequest(ctx, groupID, options)
		},
		advancer: func(ctx context.Context, resp ManagementGroupsGetDescendantsResponse) (*policy.Request, error) {
			return runtime.NewRequest(ctx, http.MethodGet, *resp.DescendantListResult.NextLink)
		},
	}
}

// getDescendantsCreateRequest creates the GetDescendants request.
func (client *ManagementGroupsClient) getDescendantsCreateRequest(ctx context.Context, groupID string, options *ManagementGroupsGetDescendantsOptions) (*policy.Request, error) {
	urlPath := "/providers/Microsoft.Management/managementGroups/{groupId}/descendants"
	if groupID == "" {
		return nil, errors.New("parameter groupID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{groupId}", url.PathEscape(groupID))
	req, err := runtime.NewRequest(ctx, http.MethodGet, runtime.JoinPaths(client.ep, urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("api-version", "2021-04-01")
	if options != nil && options.Skiptoken != nil {
		reqQP.Set("$skiptoken", *options.Skiptoken)
	}
	if options != nil && options.Top != nil {
		reqQP.Set("$top", strconv.FormatInt(int64(*options.Top), 10))
	}
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header.Set("Accept", "application/json")
	return req, nil
}

// getDescendantsHandleResponse handles the GetDescendants response.
func (client *ManagementGroupsClient) getDescendantsHandleResponse(resp *http.Response) (ManagementGroupsGetDescendantsResponse, error) {
	result := ManagementGroupsGetDescendantsResponse{RawResponse: resp}
	if err := runtime.UnmarshalAsJSON(resp, &result.DescendantListResult); err != nil {
		return ManagementGroupsGetDescendantsResponse{}, err
	}
	return result, nil
}

// getDescendantsHandleError handles the GetDescendants error response.
func (client *ManagementGroupsClient) getDescendantsHandleError(resp *http.Response) error {
	body, err := runtime.Payload(resp)
	if err != nil {
		return runtime.NewResponseError(err, resp)
	}
	errType := ErrorResponse{raw: string(body)}
	if err := runtime.UnmarshalAsJSON(resp, &errType); err != nil {
		return runtime.NewResponseError(fmt.Errorf("%s\n%s", string(body), err), resp)
	}
	return runtime.NewResponseError(&errType, resp)
}

// List - List management groups for the authenticated user.
// If the operation fails it returns the *ErrorResponse error type.
func (client *ManagementGroupsClient) List(options *ManagementGroupsListOptions) *ManagementGroupsListPager {
	return &ManagementGroupsListPager{
		client: client,
		requester: func(ctx context.Context) (*policy.Request, error) {
			return client.listCreateRequest(ctx, options)
		},
		advancer: func(ctx context.Context, resp ManagementGroupsListResponse) (*policy.Request, error) {
			return runtime.NewRequest(ctx, http.MethodGet, *resp.ManagementGroupListResult.NextLink)
		},
	}
}

// listCreateRequest creates the List request.
func (client *ManagementGroupsClient) listCreateRequest(ctx context.Context, options *ManagementGroupsListOptions) (*policy.Request, error) {
	urlPath := "/providers/Microsoft.Management/managementGroups"
	req, err := runtime.NewRequest(ctx, http.MethodGet, runtime.JoinPaths(client.ep, urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("api-version", "2021-04-01")
	if options != nil && options.Skiptoken != nil {
		reqQP.Set("$skiptoken", *options.Skiptoken)
	}
	req.Raw().URL.RawQuery = reqQP.Encode()
	if options != nil && options.CacheControl != nil {
		req.Raw().Header.Set("Cache-Control", *options.CacheControl)
	}
	req.Raw().Header.Set("Accept", "application/json")
	return req, nil
}

// listHandleResponse handles the List response.
func (client *ManagementGroupsClient) listHandleResponse(resp *http.Response) (ManagementGroupsListResponse, error) {
	result := ManagementGroupsListResponse{RawResponse: resp}
	if err := runtime.UnmarshalAsJSON(resp, &result.ManagementGroupListResult); err != nil {
		return ManagementGroupsListResponse{}, err
	}
	return result, nil
}

// listHandleError handles the List error response.
func (client *ManagementGroupsClient) listHandleError(resp *http.Response) error {
	body, err := runtime.Payload(resp)
	if err != nil {
		return runtime.NewResponseError(err, resp)
	}
	errType := ErrorResponse{raw: string(body)}
	if err := runtime.UnmarshalAsJSON(resp, &errType); err != nil {
		return runtime.NewResponseError(fmt.Errorf("%s\n%s", string(body), err), resp)
	}
	return runtime.NewResponseError(&errType, resp)
}

// Update - Update a management group.
// If the operation fails it returns the *ErrorResponse error type.
func (client *ManagementGroupsClient) Update(ctx context.Context, groupID string, patchGroupRequest PatchManagementGroupRequest, options *ManagementGroupsUpdateOptions) (ManagementGroupsUpdateResponse, error) {
	req, err := client.updateCreateRequest(ctx, groupID, patchGroupRequest, options)
	if err != nil {
		return ManagementGroupsUpdateResponse{}, err
	}
	resp, err := client.pl.Do(req)
	if err != nil {
		return ManagementGroupsUpdateResponse{}, err
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {
		return ManagementGroupsUpdateResponse{}, client.updateHandleError(resp)
	}
	return client.updateHandleResponse(resp)
}

// updateCreateRequest creates the Update request.
func (client *ManagementGroupsClient) updateCreateRequest(ctx context.Context, groupID string, patchGroupRequest PatchManagementGroupRequest, options *ManagementGroupsUpdateOptions) (*policy.Request, error) {
	urlPath := "/providers/Microsoft.Management/managementGroups/{groupId}"
	if groupID == "" {
		return nil, errors.New("parameter groupID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{groupId}", url.PathEscape(groupID))
	req, err := runtime.NewRequest(ctx, http.MethodPatch, runtime.JoinPaths(client.ep, urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("api-version", "2021-04-01")
	req.Raw().URL.RawQuery = reqQP.Encode()
	if options != nil && options.CacheControl != nil {
		req.Raw().Header.Set("Cache-Control", *options.CacheControl)
	}
	req.Raw().Header.Set("Accept", "application/json")
	return req, runtime.MarshalAsJSON(req, patchGroupRequest)
}

// updateHandleResponse handles the Update response.
func (client *ManagementGroupsClient) updateHandleResponse(resp *http.Response) (ManagementGroupsUpdateResponse, error) {
	result := ManagementGroupsUpdateResponse{RawResponse: resp}
	if err := runtime.UnmarshalAsJSON(resp, &result.ManagementGroup); err != nil {
		return ManagementGroupsUpdateResponse{}, err
	}
	return result, nil
}

// updateHandleError handles the Update error response.
func (client *ManagementGroupsClient) updateHandleError(resp *http.Response) error {
	body, err := runtime.Payload(resp)
	if err != nil {
		return runtime.NewResponseError(err, resp)
	}
	errType := ErrorResponse{raw: string(body)}
	if err := runtime.UnmarshalAsJSON(resp, &errType); err != nil {
		return runtime.NewResponseError(fmt.Errorf("%s\n%s", string(body), err), resp)
	}
	return runtime.NewResponseError(&errType, resp)
}
