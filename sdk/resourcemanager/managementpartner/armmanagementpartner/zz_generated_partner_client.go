//go:build go1.16
// +build go1.16

// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

package armmanagementpartner

import (
	"context"
	"errors"
	"fmt"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/arm"
	armruntime "github.com/Azure/azure-sdk-for-go/sdk/azcore/arm/runtime"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/policy"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/runtime"
	"net/http"
	"net/url"
	"strings"
)

// PartnerClient contains the methods for the Partner group.
// Don't use this type directly, use NewPartnerClient() instead.
type PartnerClient struct {
	ep string
	pl runtime.Pipeline
}

// NewPartnerClient creates a new instance of PartnerClient with the specified values.
func NewPartnerClient(credential azcore.TokenCredential, options *arm.ClientOptions) *PartnerClient {
	cp := arm.ClientOptions{}
	if options != nil {
		cp = *options
	}
	if len(cp.Host) == 0 {
		cp.Host = arm.AzurePublicCloud
	}
	return &PartnerClient{ep: string(cp.Host), pl: armruntime.NewPipeline(module, version, credential, &cp)}
}

// Create - Create a management partner for the objectId and tenantId.
// If the operation fails it returns the *Error error type.
func (client *PartnerClient) Create(ctx context.Context, partnerID string, options *PartnerCreateOptions) (PartnerCreateResponse, error) {
	req, err := client.createCreateRequest(ctx, partnerID, options)
	if err != nil {
		return PartnerCreateResponse{}, err
	}
	resp, err := client.pl.Do(req)
	if err != nil {
		return PartnerCreateResponse{}, err
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {
		return PartnerCreateResponse{}, client.createHandleError(resp)
	}
	return client.createHandleResponse(resp)
}

// createCreateRequest creates the Create request.
func (client *PartnerClient) createCreateRequest(ctx context.Context, partnerID string, options *PartnerCreateOptions) (*policy.Request, error) {
	urlPath := "/providers/Microsoft.ManagementPartner/partners/{partnerId}"
	if partnerID == "" {
		return nil, errors.New("parameter partnerID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{partnerId}", url.PathEscape(partnerID))
	req, err := runtime.NewRequest(ctx, http.MethodPut, runtime.JoinPaths(client.ep, urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("api-version", "2018-02-01")
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header.Set("Accept", "application/json")
	return req, nil
}

// createHandleResponse handles the Create response.
func (client *PartnerClient) createHandleResponse(resp *http.Response) (PartnerCreateResponse, error) {
	result := PartnerCreateResponse{RawResponse: resp}
	if err := runtime.UnmarshalAsJSON(resp, &result.PartnerResponse); err != nil {
		return PartnerCreateResponse{}, runtime.NewResponseError(err, resp)
	}
	return result, nil
}

// createHandleError handles the Create error response.
func (client *PartnerClient) createHandleError(resp *http.Response) error {
	body, err := runtime.Payload(resp)
	if err != nil {
		return runtime.NewResponseError(err, resp)
	}
	errType := Error{raw: string(body)}
	if err := runtime.UnmarshalAsJSON(resp, &errType); err != nil {
		return runtime.NewResponseError(fmt.Errorf("%s\n%s", string(body), err), resp)
	}
	return runtime.NewResponseError(&errType, resp)
}

// Delete - Delete the management partner for the objectId and tenantId.
// If the operation fails it returns the *Error error type.
func (client *PartnerClient) Delete(ctx context.Context, partnerID string, options *PartnerDeleteOptions) (PartnerDeleteResponse, error) {
	req, err := client.deleteCreateRequest(ctx, partnerID, options)
	if err != nil {
		return PartnerDeleteResponse{}, err
	}
	resp, err := client.pl.Do(req)
	if err != nil {
		return PartnerDeleteResponse{}, err
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {
		return PartnerDeleteResponse{}, client.deleteHandleError(resp)
	}
	return PartnerDeleteResponse{RawResponse: resp}, nil
}

// deleteCreateRequest creates the Delete request.
func (client *PartnerClient) deleteCreateRequest(ctx context.Context, partnerID string, options *PartnerDeleteOptions) (*policy.Request, error) {
	urlPath := "/providers/Microsoft.ManagementPartner/partners/{partnerId}"
	if partnerID == "" {
		return nil, errors.New("parameter partnerID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{partnerId}", url.PathEscape(partnerID))
	req, err := runtime.NewRequest(ctx, http.MethodDelete, runtime.JoinPaths(client.ep, urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("api-version", "2018-02-01")
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header.Set("Accept", "application/json")
	return req, nil
}

// deleteHandleError handles the Delete error response.
func (client *PartnerClient) deleteHandleError(resp *http.Response) error {
	body, err := runtime.Payload(resp)
	if err != nil {
		return runtime.NewResponseError(err, resp)
	}
	errType := Error{raw: string(body)}
	if err := runtime.UnmarshalAsJSON(resp, &errType); err != nil {
		return runtime.NewResponseError(fmt.Errorf("%s\n%s", string(body), err), resp)
	}
	return runtime.NewResponseError(&errType, resp)
}

// Get - Get the management partner using the partnerId, objectId and tenantId.
// If the operation fails it returns the *Error error type.
func (client *PartnerClient) Get(ctx context.Context, partnerID string, options *PartnerGetOptions) (PartnerGetResponse, error) {
	req, err := client.getCreateRequest(ctx, partnerID, options)
	if err != nil {
		return PartnerGetResponse{}, err
	}
	resp, err := client.pl.Do(req)
	if err != nil {
		return PartnerGetResponse{}, err
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {
		return PartnerGetResponse{}, client.getHandleError(resp)
	}
	return client.getHandleResponse(resp)
}

// getCreateRequest creates the Get request.
func (client *PartnerClient) getCreateRequest(ctx context.Context, partnerID string, options *PartnerGetOptions) (*policy.Request, error) {
	urlPath := "/providers/Microsoft.ManagementPartner/partners/{partnerId}"
	if partnerID == "" {
		return nil, errors.New("parameter partnerID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{partnerId}", url.PathEscape(partnerID))
	req, err := runtime.NewRequest(ctx, http.MethodGet, runtime.JoinPaths(client.ep, urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("api-version", "2018-02-01")
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header.Set("Accept", "application/json")
	return req, nil
}

// getHandleResponse handles the Get response.
func (client *PartnerClient) getHandleResponse(resp *http.Response) (PartnerGetResponse, error) {
	result := PartnerGetResponse{RawResponse: resp}
	if err := runtime.UnmarshalAsJSON(resp, &result.PartnerResponse); err != nil {
		return PartnerGetResponse{}, runtime.NewResponseError(err, resp)
	}
	return result, nil
}

// getHandleError handles the Get error response.
func (client *PartnerClient) getHandleError(resp *http.Response) error {
	body, err := runtime.Payload(resp)
	if err != nil {
		return runtime.NewResponseError(err, resp)
	}
	errType := Error{raw: string(body)}
	if err := runtime.UnmarshalAsJSON(resp, &errType); err != nil {
		return runtime.NewResponseError(fmt.Errorf("%s\n%s", string(body), err), resp)
	}
	return runtime.NewResponseError(&errType, resp)
}

// Update - Update the management partner for the objectId and tenantId.
// If the operation fails it returns the *Error error type.
func (client *PartnerClient) Update(ctx context.Context, partnerID string, options *PartnerUpdateOptions) (PartnerUpdateResponse, error) {
	req, err := client.updateCreateRequest(ctx, partnerID, options)
	if err != nil {
		return PartnerUpdateResponse{}, err
	}
	resp, err := client.pl.Do(req)
	if err != nil {
		return PartnerUpdateResponse{}, err
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {
		return PartnerUpdateResponse{}, client.updateHandleError(resp)
	}
	return client.updateHandleResponse(resp)
}

// updateCreateRequest creates the Update request.
func (client *PartnerClient) updateCreateRequest(ctx context.Context, partnerID string, options *PartnerUpdateOptions) (*policy.Request, error) {
	urlPath := "/providers/Microsoft.ManagementPartner/partners/{partnerId}"
	if partnerID == "" {
		return nil, errors.New("parameter partnerID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{partnerId}", url.PathEscape(partnerID))
	req, err := runtime.NewRequest(ctx, http.MethodPatch, runtime.JoinPaths(client.ep, urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("api-version", "2018-02-01")
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header.Set("Accept", "application/json")
	return req, nil
}

// updateHandleResponse handles the Update response.
func (client *PartnerClient) updateHandleResponse(resp *http.Response) (PartnerUpdateResponse, error) {
	result := PartnerUpdateResponse{RawResponse: resp}
	if err := runtime.UnmarshalAsJSON(resp, &result.PartnerResponse); err != nil {
		return PartnerUpdateResponse{}, runtime.NewResponseError(err, resp)
	}
	return result, nil
}

// updateHandleError handles the Update error response.
func (client *PartnerClient) updateHandleError(resp *http.Response) error {
	body, err := runtime.Payload(resp)
	if err != nil {
		return runtime.NewResponseError(err, resp)
	}
	errType := Error{raw: string(body)}
	if err := runtime.UnmarshalAsJSON(resp, &errType); err != nil {
		return runtime.NewResponseError(fmt.Errorf("%s\n%s", string(body), err), resp)
	}
	return runtime.NewResponseError(&errType, resp)
}
