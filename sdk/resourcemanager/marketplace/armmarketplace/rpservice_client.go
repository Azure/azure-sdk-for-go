//go:build go1.18
// +build go1.18

// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.
// DO NOT EDIT.

package armmarketplace

import (
	"context"
	"errors"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/arm"
	armruntime "github.com/Azure/azure-sdk-for-go/sdk/azcore/arm/runtime"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/cloud"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/policy"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/runtime"
	"net/http"
	"net/url"
	"strings"
)

// RPServiceClient contains the methods for the MarketplaceRPService group.
// Don't use this type directly, use NewRPServiceClient() instead.
type RPServiceClient struct {
	host string
	pl   runtime.Pipeline
}

// NewRPServiceClient creates a new instance of RPServiceClient with the specified values.
// credential - used to authorize requests. Usually a credential from azidentity.
// options - pass nil to accept the default values.
func NewRPServiceClient(credential azcore.TokenCredential, options *arm.ClientOptions) (*RPServiceClient, error) {
	if options == nil {
		options = &arm.ClientOptions{}
	}
	ep := cloud.AzurePublic.Services[cloud.ResourceManager].Endpoint
	if c, ok := options.Cloud.Services[cloud.ResourceManager]; ok {
		ep = c.Endpoint
	}
	pl, err := armruntime.NewPipeline(moduleName, moduleVersion, credential, runtime.PipelineOptions{}, options)
	if err != nil {
		return nil, err
	}
	client := &RPServiceClient{
		host: ep,
		pl:   pl,
	}
	return client, nil
}

// QueryRules - Get a list of all private store rules in the given private store and collection
// If the operation fails it returns an *azcore.ResponseError type.
// Generated from API version 2022-09-01
// privateStoreID - The store ID - must use the tenant ID
// collectionID - The collection ID
// options - RPServiceClientQueryRulesOptions contains the optional parameters for the RPServiceClient.QueryRules method.
func (client *RPServiceClient) QueryRules(ctx context.Context, privateStoreID string, collectionID string, options *RPServiceClientQueryRulesOptions) (RPServiceClientQueryRulesResponse, error) {
	req, err := client.queryRulesCreateRequest(ctx, privateStoreID, collectionID, options)
	if err != nil {
		return RPServiceClientQueryRulesResponse{}, err
	}
	resp, err := client.pl.Do(req)
	if err != nil {
		return RPServiceClientQueryRulesResponse{}, err
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {
		return RPServiceClientQueryRulesResponse{}, runtime.NewResponseError(resp)
	}
	return client.queryRulesHandleResponse(resp)
}

// queryRulesCreateRequest creates the QueryRules request.
func (client *RPServiceClient) queryRulesCreateRequest(ctx context.Context, privateStoreID string, collectionID string, options *RPServiceClientQueryRulesOptions) (*policy.Request, error) {
	urlPath := "/providers/Microsoft.Marketplace/privateStores/{privateStoreId}/collections/{collectionId}/queryRules"
	if privateStoreID == "" {
		return nil, errors.New("parameter privateStoreID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{privateStoreId}", url.PathEscape(privateStoreID))
	if collectionID == "" {
		return nil, errors.New("parameter collectionID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{collectionId}", url.PathEscape(collectionID))
	req, err := runtime.NewRequest(ctx, http.MethodPost, runtime.JoinPaths(client.host, urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("api-version", "2022-09-01")
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header["Accept"] = []string{"application/json"}
	return req, nil
}

// queryRulesHandleResponse handles the QueryRules response.
func (client *RPServiceClient) queryRulesHandleResponse(resp *http.Response) (RPServiceClientQueryRulesResponse, error) {
	result := RPServiceClientQueryRulesResponse{}
	if err := runtime.UnmarshalAsJSON(resp, &result.RuleListResponse); err != nil {
		return RPServiceClientQueryRulesResponse{}, err
	}
	return result, nil
}

// QueryUserRules - All rules approved in the private store that are relevant for user subscriptions
// If the operation fails it returns an *azcore.ResponseError type.
// Generated from API version 2022-09-01
// privateStoreID - The store ID - must use the tenant ID
// options - RPServiceClientQueryUserRulesOptions contains the optional parameters for the RPServiceClient.QueryUserRules
// method.
func (client *RPServiceClient) QueryUserRules(ctx context.Context, privateStoreID string, options *RPServiceClientQueryUserRulesOptions) (RPServiceClientQueryUserRulesResponse, error) {
	req, err := client.queryUserRulesCreateRequest(ctx, privateStoreID, options)
	if err != nil {
		return RPServiceClientQueryUserRulesResponse{}, err
	}
	resp, err := client.pl.Do(req)
	if err != nil {
		return RPServiceClientQueryUserRulesResponse{}, err
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {
		return RPServiceClientQueryUserRulesResponse{}, runtime.NewResponseError(resp)
	}
	return client.queryUserRulesHandleResponse(resp)
}

// queryUserRulesCreateRequest creates the QueryUserRules request.
func (client *RPServiceClient) queryUserRulesCreateRequest(ctx context.Context, privateStoreID string, options *RPServiceClientQueryUserRulesOptions) (*policy.Request, error) {
	urlPath := "/providers/Microsoft.Marketplace/privateStores/{privateStoreId}/queryUserRules"
	if privateStoreID == "" {
		return nil, errors.New("parameter privateStoreID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{privateStoreId}", url.PathEscape(privateStoreID))
	req, err := runtime.NewRequest(ctx, http.MethodPost, runtime.JoinPaths(client.host, urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("api-version", "2022-09-01")
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header["Accept"] = []string{"application/json"}
	if options != nil && options.Payload != nil {
		return req, runtime.MarshalAsJSON(req, *options.Payload)
	}
	return req, nil
}

// queryUserRulesHandleResponse handles the QueryUserRules response.
func (client *RPServiceClient) queryUserRulesHandleResponse(resp *http.Response) (RPServiceClientQueryUserRulesResponse, error) {
	result := RPServiceClientQueryUserRulesResponse{}
	if err := runtime.UnmarshalAsJSON(resp, &result.RuleListResponse); err != nil {
		return RPServiceClientQueryUserRulesResponse{}, err
	}
	return result, nil
}

// SetCollectionRules - Set rule for specific private store and collection
// If the operation fails it returns an *azcore.ResponseError type.
// Generated from API version 2022-09-01
// privateStoreID - The store ID - must use the tenant ID
// collectionID - The collection ID
// options - RPServiceClientSetCollectionRulesOptions contains the optional parameters for the RPServiceClient.SetCollectionRules
// method.
func (client *RPServiceClient) SetCollectionRules(ctx context.Context, privateStoreID string, collectionID string, options *RPServiceClientSetCollectionRulesOptions) (RPServiceClientSetCollectionRulesResponse, error) {
	req, err := client.setCollectionRulesCreateRequest(ctx, privateStoreID, collectionID, options)
	if err != nil {
		return RPServiceClientSetCollectionRulesResponse{}, err
	}
	resp, err := client.pl.Do(req)
	if err != nil {
		return RPServiceClientSetCollectionRulesResponse{}, err
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {
		return RPServiceClientSetCollectionRulesResponse{}, runtime.NewResponseError(resp)
	}
	return RPServiceClientSetCollectionRulesResponse{}, nil
}

// setCollectionRulesCreateRequest creates the SetCollectionRules request.
func (client *RPServiceClient) setCollectionRulesCreateRequest(ctx context.Context, privateStoreID string, collectionID string, options *RPServiceClientSetCollectionRulesOptions) (*policy.Request, error) {
	urlPath := "/providers/Microsoft.Marketplace/privateStores/{privateStoreId}/collections/{collectionId}/setRules"
	if privateStoreID == "" {
		return nil, errors.New("parameter privateStoreID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{privateStoreId}", url.PathEscape(privateStoreID))
	if collectionID == "" {
		return nil, errors.New("parameter collectionID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{collectionId}", url.PathEscape(collectionID))
	req, err := runtime.NewRequest(ctx, http.MethodPost, runtime.JoinPaths(client.host, urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("api-version", "2022-09-01")
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header["Accept"] = []string{"application/json"}
	if options != nil && options.Payload != nil {
		return req, runtime.MarshalAsJSON(req, *options.Payload)
	}
	return req, nil
}
