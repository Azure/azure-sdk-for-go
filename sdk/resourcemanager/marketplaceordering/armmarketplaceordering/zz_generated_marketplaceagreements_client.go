//go:build go1.16
// +build go1.16

// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

package armmarketplaceordering

import (
	"context"
	"errors"
	"fmt"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/arm"
	armruntime "github.com/Azure/azure-sdk-for-go/sdk/azcore/arm/runtime"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/policy"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/runtime"
	"net/http"
	"net/url"
	"strings"
)

// MarketplaceAgreementsClient contains the methods for the MarketplaceAgreements group.
// Don't use this type directly, use NewMarketplaceAgreementsClient() instead.
type MarketplaceAgreementsClient struct {
	ep             string
	pl             runtime.Pipeline
	subscriptionID string
}

// NewMarketplaceAgreementsClient creates a new instance of MarketplaceAgreementsClient with the specified values.
func NewMarketplaceAgreementsClient(subscriptionID string, credential azcore.TokenCredential, options *arm.ClientOptions) *MarketplaceAgreementsClient {
	cp := arm.ClientOptions{}
	if options != nil {
		cp = *options
	}
	if len(cp.Host) == 0 {
		cp.Host = arm.AzurePublicCloud
	}
	return &MarketplaceAgreementsClient{subscriptionID: subscriptionID, ep: string(cp.Host), pl: armruntime.NewPipeline(module, version, credential, &cp)}
}

// Cancel - Cancel marketplace terms.
// If the operation fails it returns the *ErrorResponse error type.
func (client *MarketplaceAgreementsClient) Cancel(ctx context.Context, publisherID string, offerID string, planID string, options *MarketplaceAgreementsCancelOptions) (MarketplaceAgreementsCancelResponse, error) {
	req, err := client.cancelCreateRequest(ctx, publisherID, offerID, planID, options)
	if err != nil {
		return MarketplaceAgreementsCancelResponse{}, err
	}
	resp, err := client.pl.Do(req)
	if err != nil {
		return MarketplaceAgreementsCancelResponse{}, err
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {
		return MarketplaceAgreementsCancelResponse{}, client.cancelHandleError(resp)
	}
	return client.cancelHandleResponse(resp)
}

// cancelCreateRequest creates the Cancel request.
func (client *MarketplaceAgreementsClient) cancelCreateRequest(ctx context.Context, publisherID string, offerID string, planID string, options *MarketplaceAgreementsCancelOptions) (*policy.Request, error) {
	urlPath := "/subscriptions/{subscriptionId}/providers/Microsoft.MarketplaceOrdering/agreements/{publisherId}/offers/{offerId}/plans/{planId}/cancel"
	if client.subscriptionID == "" {
		return nil, errors.New("parameter client.subscriptionID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{subscriptionId}", url.PathEscape(client.subscriptionID))
	if publisherID == "" {
		return nil, errors.New("parameter publisherID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{publisherId}", url.PathEscape(publisherID))
	if offerID == "" {
		return nil, errors.New("parameter offerID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{offerId}", url.PathEscape(offerID))
	if planID == "" {
		return nil, errors.New("parameter planID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{planId}", url.PathEscape(planID))
	req, err := runtime.NewRequest(ctx, http.MethodPost, runtime.JoinPaths(client.ep, urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("api-version", "2021-01-01")
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header.Set("Accept", "application/json")
	return req, nil
}

// cancelHandleResponse handles the Cancel response.
func (client *MarketplaceAgreementsClient) cancelHandleResponse(resp *http.Response) (MarketplaceAgreementsCancelResponse, error) {
	result := MarketplaceAgreementsCancelResponse{RawResponse: resp}
	if err := runtime.UnmarshalAsJSON(resp, &result.AgreementTerms); err != nil {
		return MarketplaceAgreementsCancelResponse{}, runtime.NewResponseError(err, resp)
	}
	return result, nil
}

// cancelHandleError handles the Cancel error response.
func (client *MarketplaceAgreementsClient) cancelHandleError(resp *http.Response) error {
	body, err := runtime.Payload(resp)
	if err != nil {
		return runtime.NewResponseError(err, resp)
	}
	errType := ErrorResponse{raw: string(body)}
	if err := runtime.UnmarshalAsJSON(resp, &errType); err != nil {
		return runtime.NewResponseError(fmt.Errorf("%s\n%s", string(body), err), resp)
	}
	return runtime.NewResponseError(&errType, resp)
}

// Create - Save marketplace terms.
// If the operation fails it returns the *ErrorResponse error type.
func (client *MarketplaceAgreementsClient) Create(ctx context.Context, offerType OfferType, publisherID string, offerID string, planID string, parameters AgreementTerms, options *MarketplaceAgreementsCreateOptions) (MarketplaceAgreementsCreateResponse, error) {
	req, err := client.createCreateRequest(ctx, offerType, publisherID, offerID, planID, parameters, options)
	if err != nil {
		return MarketplaceAgreementsCreateResponse{}, err
	}
	resp, err := client.pl.Do(req)
	if err != nil {
		return MarketplaceAgreementsCreateResponse{}, err
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {
		return MarketplaceAgreementsCreateResponse{}, client.createHandleError(resp)
	}
	return client.createHandleResponse(resp)
}

// createCreateRequest creates the Create request.
func (client *MarketplaceAgreementsClient) createCreateRequest(ctx context.Context, offerType OfferType, publisherID string, offerID string, planID string, parameters AgreementTerms, options *MarketplaceAgreementsCreateOptions) (*policy.Request, error) {
	urlPath := "/subscriptions/{subscriptionId}/providers/Microsoft.MarketplaceOrdering/offerTypes/{offerType}/publishers/{publisherId}/offers/{offerId}/plans/{planId}/agreements/current"
	if offerType == "" {
		return nil, errors.New("parameter offerType cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{offerType}", url.PathEscape(string(offerType)))
	if client.subscriptionID == "" {
		return nil, errors.New("parameter client.subscriptionID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{subscriptionId}", url.PathEscape(client.subscriptionID))
	if publisherID == "" {
		return nil, errors.New("parameter publisherID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{publisherId}", url.PathEscape(publisherID))
	if offerID == "" {
		return nil, errors.New("parameter offerID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{offerId}", url.PathEscape(offerID))
	if planID == "" {
		return nil, errors.New("parameter planID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{planId}", url.PathEscape(planID))
	req, err := runtime.NewRequest(ctx, http.MethodPut, runtime.JoinPaths(client.ep, urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("api-version", "2021-01-01")
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header.Set("Accept", "application/json")
	return req, runtime.MarshalAsJSON(req, parameters)
}

// createHandleResponse handles the Create response.
func (client *MarketplaceAgreementsClient) createHandleResponse(resp *http.Response) (MarketplaceAgreementsCreateResponse, error) {
	result := MarketplaceAgreementsCreateResponse{RawResponse: resp}
	if err := runtime.UnmarshalAsJSON(resp, &result.AgreementTerms); err != nil {
		return MarketplaceAgreementsCreateResponse{}, runtime.NewResponseError(err, resp)
	}
	return result, nil
}

// createHandleError handles the Create error response.
func (client *MarketplaceAgreementsClient) createHandleError(resp *http.Response) error {
	body, err := runtime.Payload(resp)
	if err != nil {
		return runtime.NewResponseError(err, resp)
	}
	errType := ErrorResponse{raw: string(body)}
	if err := runtime.UnmarshalAsJSON(resp, &errType); err != nil {
		return runtime.NewResponseError(fmt.Errorf("%s\n%s", string(body), err), resp)
	}
	return runtime.NewResponseError(&errType, resp)
}

// Get - Get marketplace terms.
// If the operation fails it returns the *ErrorResponse error type.
func (client *MarketplaceAgreementsClient) Get(ctx context.Context, offerType OfferType, publisherID string, offerID string, planID string, options *MarketplaceAgreementsGetOptions) (MarketplaceAgreementsGetResponse, error) {
	req, err := client.getCreateRequest(ctx, offerType, publisherID, offerID, planID, options)
	if err != nil {
		return MarketplaceAgreementsGetResponse{}, err
	}
	resp, err := client.pl.Do(req)
	if err != nil {
		return MarketplaceAgreementsGetResponse{}, err
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {
		return MarketplaceAgreementsGetResponse{}, client.getHandleError(resp)
	}
	return client.getHandleResponse(resp)
}

// getCreateRequest creates the Get request.
func (client *MarketplaceAgreementsClient) getCreateRequest(ctx context.Context, offerType OfferType, publisherID string, offerID string, planID string, options *MarketplaceAgreementsGetOptions) (*policy.Request, error) {
	urlPath := "/subscriptions/{subscriptionId}/providers/Microsoft.MarketplaceOrdering/offerTypes/{offerType}/publishers/{publisherId}/offers/{offerId}/plans/{planId}/agreements/current"
	if client.subscriptionID == "" {
		return nil, errors.New("parameter client.subscriptionID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{subscriptionId}", url.PathEscape(client.subscriptionID))
	if offerType == "" {
		return nil, errors.New("parameter offerType cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{offerType}", url.PathEscape(string(offerType)))
	if publisherID == "" {
		return nil, errors.New("parameter publisherID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{publisherId}", url.PathEscape(publisherID))
	if offerID == "" {
		return nil, errors.New("parameter offerID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{offerId}", url.PathEscape(offerID))
	if planID == "" {
		return nil, errors.New("parameter planID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{planId}", url.PathEscape(planID))
	req, err := runtime.NewRequest(ctx, http.MethodGet, runtime.JoinPaths(client.ep, urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("api-version", "2021-01-01")
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header.Set("Accept", "application/json")
	return req, nil
}

// getHandleResponse handles the Get response.
func (client *MarketplaceAgreementsClient) getHandleResponse(resp *http.Response) (MarketplaceAgreementsGetResponse, error) {
	result := MarketplaceAgreementsGetResponse{RawResponse: resp}
	if err := runtime.UnmarshalAsJSON(resp, &result.AgreementTerms); err != nil {
		return MarketplaceAgreementsGetResponse{}, runtime.NewResponseError(err, resp)
	}
	return result, nil
}

// getHandleError handles the Get error response.
func (client *MarketplaceAgreementsClient) getHandleError(resp *http.Response) error {
	body, err := runtime.Payload(resp)
	if err != nil {
		return runtime.NewResponseError(err, resp)
	}
	errType := ErrorResponse{raw: string(body)}
	if err := runtime.UnmarshalAsJSON(resp, &errType); err != nil {
		return runtime.NewResponseError(fmt.Errorf("%s\n%s", string(body), err), resp)
	}
	return runtime.NewResponseError(&errType, resp)
}

// GetAgreement - Get marketplace agreement.
// If the operation fails it returns the *ErrorResponse error type.
func (client *MarketplaceAgreementsClient) GetAgreement(ctx context.Context, publisherID string, offerID string, planID string, options *MarketplaceAgreementsGetAgreementOptions) (MarketplaceAgreementsGetAgreementResponse, error) {
	req, err := client.getAgreementCreateRequest(ctx, publisherID, offerID, planID, options)
	if err != nil {
		return MarketplaceAgreementsGetAgreementResponse{}, err
	}
	resp, err := client.pl.Do(req)
	if err != nil {
		return MarketplaceAgreementsGetAgreementResponse{}, err
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {
		return MarketplaceAgreementsGetAgreementResponse{}, client.getAgreementHandleError(resp)
	}
	return client.getAgreementHandleResponse(resp)
}

// getAgreementCreateRequest creates the GetAgreement request.
func (client *MarketplaceAgreementsClient) getAgreementCreateRequest(ctx context.Context, publisherID string, offerID string, planID string, options *MarketplaceAgreementsGetAgreementOptions) (*policy.Request, error) {
	urlPath := "/subscriptions/{subscriptionId}/providers/Microsoft.MarketplaceOrdering/agreements/{publisherId}/offers/{offerId}/plans/{planId}"
	if client.subscriptionID == "" {
		return nil, errors.New("parameter client.subscriptionID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{subscriptionId}", url.PathEscape(client.subscriptionID))
	if publisherID == "" {
		return nil, errors.New("parameter publisherID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{publisherId}", url.PathEscape(publisherID))
	if offerID == "" {
		return nil, errors.New("parameter offerID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{offerId}", url.PathEscape(offerID))
	if planID == "" {
		return nil, errors.New("parameter planID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{planId}", url.PathEscape(planID))
	req, err := runtime.NewRequest(ctx, http.MethodGet, runtime.JoinPaths(client.ep, urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("api-version", "2021-01-01")
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header.Set("Accept", "application/json")
	return req, nil
}

// getAgreementHandleResponse handles the GetAgreement response.
func (client *MarketplaceAgreementsClient) getAgreementHandleResponse(resp *http.Response) (MarketplaceAgreementsGetAgreementResponse, error) {
	result := MarketplaceAgreementsGetAgreementResponse{RawResponse: resp}
	if err := runtime.UnmarshalAsJSON(resp, &result.AgreementTerms); err != nil {
		return MarketplaceAgreementsGetAgreementResponse{}, runtime.NewResponseError(err, resp)
	}
	return result, nil
}

// getAgreementHandleError handles the GetAgreement error response.
func (client *MarketplaceAgreementsClient) getAgreementHandleError(resp *http.Response) error {
	body, err := runtime.Payload(resp)
	if err != nil {
		return runtime.NewResponseError(err, resp)
	}
	errType := ErrorResponse{raw: string(body)}
	if err := runtime.UnmarshalAsJSON(resp, &errType); err != nil {
		return runtime.NewResponseError(fmt.Errorf("%s\n%s", string(body), err), resp)
	}
	return runtime.NewResponseError(&errType, resp)
}

// List - List marketplace agreements in the subscription.
// If the operation fails it returns the *ErrorResponse error type.
func (client *MarketplaceAgreementsClient) List(ctx context.Context, options *MarketplaceAgreementsListOptions) (MarketplaceAgreementsListResponse, error) {
	req, err := client.listCreateRequest(ctx, options)
	if err != nil {
		return MarketplaceAgreementsListResponse{}, err
	}
	resp, err := client.pl.Do(req)
	if err != nil {
		return MarketplaceAgreementsListResponse{}, err
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {
		return MarketplaceAgreementsListResponse{}, client.listHandleError(resp)
	}
	return client.listHandleResponse(resp)
}

// listCreateRequest creates the List request.
func (client *MarketplaceAgreementsClient) listCreateRequest(ctx context.Context, options *MarketplaceAgreementsListOptions) (*policy.Request, error) {
	urlPath := "/subscriptions/{subscriptionId}/providers/Microsoft.MarketplaceOrdering/agreements"
	if client.subscriptionID == "" {
		return nil, errors.New("parameter client.subscriptionID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{subscriptionId}", url.PathEscape(client.subscriptionID))
	req, err := runtime.NewRequest(ctx, http.MethodGet, runtime.JoinPaths(client.ep, urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("api-version", "2021-01-01")
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header.Set("Accept", "application/json")
	return req, nil
}

// listHandleResponse handles the List response.
func (client *MarketplaceAgreementsClient) listHandleResponse(resp *http.Response) (MarketplaceAgreementsListResponse, error) {
	result := MarketplaceAgreementsListResponse{RawResponse: resp}
	if err := runtime.UnmarshalAsJSON(resp, &result.AgreementTermsArray); err != nil {
		return MarketplaceAgreementsListResponse{}, runtime.NewResponseError(err, resp)
	}
	return result, nil
}

// listHandleError handles the List error response.
func (client *MarketplaceAgreementsClient) listHandleError(resp *http.Response) error {
	body, err := runtime.Payload(resp)
	if err != nil {
		return runtime.NewResponseError(err, resp)
	}
	errType := ErrorResponse{raw: string(body)}
	if err := runtime.UnmarshalAsJSON(resp, &errType); err != nil {
		return runtime.NewResponseError(fmt.Errorf("%s\n%s", string(body), err), resp)
	}
	return runtime.NewResponseError(&errType, resp)
}

// Sign - Sign marketplace terms.
// If the operation fails it returns the *ErrorResponse error type.
func (client *MarketplaceAgreementsClient) Sign(ctx context.Context, publisherID string, offerID string, planID string, options *MarketplaceAgreementsSignOptions) (MarketplaceAgreementsSignResponse, error) {
	req, err := client.signCreateRequest(ctx, publisherID, offerID, planID, options)
	if err != nil {
		return MarketplaceAgreementsSignResponse{}, err
	}
	resp, err := client.pl.Do(req)
	if err != nil {
		return MarketplaceAgreementsSignResponse{}, err
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {
		return MarketplaceAgreementsSignResponse{}, client.signHandleError(resp)
	}
	return client.signHandleResponse(resp)
}

// signCreateRequest creates the Sign request.
func (client *MarketplaceAgreementsClient) signCreateRequest(ctx context.Context, publisherID string, offerID string, planID string, options *MarketplaceAgreementsSignOptions) (*policy.Request, error) {
	urlPath := "/subscriptions/{subscriptionId}/providers/Microsoft.MarketplaceOrdering/agreements/{publisherId}/offers/{offerId}/plans/{planId}/sign"
	if client.subscriptionID == "" {
		return nil, errors.New("parameter client.subscriptionID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{subscriptionId}", url.PathEscape(client.subscriptionID))
	if publisherID == "" {
		return nil, errors.New("parameter publisherID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{publisherId}", url.PathEscape(publisherID))
	if offerID == "" {
		return nil, errors.New("parameter offerID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{offerId}", url.PathEscape(offerID))
	if planID == "" {
		return nil, errors.New("parameter planID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{planId}", url.PathEscape(planID))
	req, err := runtime.NewRequest(ctx, http.MethodPost, runtime.JoinPaths(client.ep, urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("api-version", "2021-01-01")
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header.Set("Accept", "application/json")
	return req, nil
}

// signHandleResponse handles the Sign response.
func (client *MarketplaceAgreementsClient) signHandleResponse(resp *http.Response) (MarketplaceAgreementsSignResponse, error) {
	result := MarketplaceAgreementsSignResponse{RawResponse: resp}
	if err := runtime.UnmarshalAsJSON(resp, &result.AgreementTerms); err != nil {
		return MarketplaceAgreementsSignResponse{}, runtime.NewResponseError(err, resp)
	}
	return result, nil
}

// signHandleError handles the Sign error response.
func (client *MarketplaceAgreementsClient) signHandleError(resp *http.Response) error {
	body, err := runtime.Payload(resp)
	if err != nil {
		return runtime.NewResponseError(err, resp)
	}
	errType := ErrorResponse{raw: string(body)}
	if err := runtime.UnmarshalAsJSON(resp, &errType); err != nil {
		return runtime.NewResponseError(fmt.Errorf("%s\n%s", string(body), err), resp)
	}
	return runtime.NewResponseError(&errType, resp)
}
