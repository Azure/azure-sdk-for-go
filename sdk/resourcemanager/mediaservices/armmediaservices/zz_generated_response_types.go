//go:build go1.16
// +build go1.16

// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

package armmediaservices

import (
	"context"
	"net/http"
	"time"

	armruntime "github.com/Azure/azure-sdk-for-go/sdk/azcore/arm/runtime"
)

// AccountFiltersCreateOrUpdateResponse contains the response from method AccountFilters.CreateOrUpdate.
type AccountFiltersCreateOrUpdateResponse struct {
	AccountFiltersCreateOrUpdateResult
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// AccountFiltersCreateOrUpdateResult contains the result from method AccountFilters.CreateOrUpdate.
type AccountFiltersCreateOrUpdateResult struct {
	AccountFilter
}

// AccountFiltersDeleteResponse contains the response from method AccountFilters.Delete.
type AccountFiltersDeleteResponse struct {
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// AccountFiltersGetResponse contains the response from method AccountFilters.Get.
type AccountFiltersGetResponse struct {
	AccountFiltersGetResult
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// AccountFiltersGetResult contains the result from method AccountFilters.Get.
type AccountFiltersGetResult struct {
	AccountFilter
}

// AccountFiltersListResponse contains the response from method AccountFilters.List.
type AccountFiltersListResponse struct {
	AccountFiltersListResult
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// AccountFiltersListResult contains the result from method AccountFilters.List.
type AccountFiltersListResult struct {
	AccountFilterCollection
}

// AccountFiltersUpdateResponse contains the response from method AccountFilters.Update.
type AccountFiltersUpdateResponse struct {
	AccountFiltersUpdateResult
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// AccountFiltersUpdateResult contains the result from method AccountFilters.Update.
type AccountFiltersUpdateResult struct {
	AccountFilter
}

// AssetFiltersCreateOrUpdateResponse contains the response from method AssetFilters.CreateOrUpdate.
type AssetFiltersCreateOrUpdateResponse struct {
	AssetFiltersCreateOrUpdateResult
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// AssetFiltersCreateOrUpdateResult contains the result from method AssetFilters.CreateOrUpdate.
type AssetFiltersCreateOrUpdateResult struct {
	AssetFilter
}

// AssetFiltersDeleteResponse contains the response from method AssetFilters.Delete.
type AssetFiltersDeleteResponse struct {
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// AssetFiltersGetResponse contains the response from method AssetFilters.Get.
type AssetFiltersGetResponse struct {
	AssetFiltersGetResult
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// AssetFiltersGetResult contains the result from method AssetFilters.Get.
type AssetFiltersGetResult struct {
	AssetFilter
}

// AssetFiltersListResponse contains the response from method AssetFilters.List.
type AssetFiltersListResponse struct {
	AssetFiltersListResult
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// AssetFiltersListResult contains the result from method AssetFilters.List.
type AssetFiltersListResult struct {
	AssetFilterCollection
}

// AssetFiltersUpdateResponse contains the response from method AssetFilters.Update.
type AssetFiltersUpdateResponse struct {
	AssetFiltersUpdateResult
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// AssetFiltersUpdateResult contains the result from method AssetFilters.Update.
type AssetFiltersUpdateResult struct {
	AssetFilter
}

// AssetsCreateOrUpdateResponse contains the response from method Assets.CreateOrUpdate.
type AssetsCreateOrUpdateResponse struct {
	AssetsCreateOrUpdateResult
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// AssetsCreateOrUpdateResult contains the result from method Assets.CreateOrUpdate.
type AssetsCreateOrUpdateResult struct {
	Asset
}

// AssetsDeleteResponse contains the response from method Assets.Delete.
type AssetsDeleteResponse struct {
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// AssetsGetEncryptionKeyResponse contains the response from method Assets.GetEncryptionKey.
type AssetsGetEncryptionKeyResponse struct {
	AssetsGetEncryptionKeyResult
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// AssetsGetEncryptionKeyResult contains the result from method Assets.GetEncryptionKey.
type AssetsGetEncryptionKeyResult struct {
	StorageEncryptedAssetDecryptionData
}

// AssetsGetResponse contains the response from method Assets.Get.
type AssetsGetResponse struct {
	AssetsGetResult
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// AssetsGetResult contains the result from method Assets.Get.
type AssetsGetResult struct {
	Asset
}

// AssetsListContainerSasResponse contains the response from method Assets.ListContainerSas.
type AssetsListContainerSasResponse struct {
	AssetsListContainerSasResult
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// AssetsListContainerSasResult contains the result from method Assets.ListContainerSas.
type AssetsListContainerSasResult struct {
	AssetContainerSas
}

// AssetsListResponse contains the response from method Assets.List.
type AssetsListResponse struct {
	AssetsListResult
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// AssetsListResult contains the result from method Assets.List.
type AssetsListResult struct {
	AssetCollection
}

// AssetsListStreamingLocatorsResponse contains the response from method Assets.ListStreamingLocators.
type AssetsListStreamingLocatorsResponse struct {
	AssetsListStreamingLocatorsResult
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// AssetsListStreamingLocatorsResult contains the result from method Assets.ListStreamingLocators.
type AssetsListStreamingLocatorsResult struct {
	ListStreamingLocatorsResponse
}

// AssetsUpdateResponse contains the response from method Assets.Update.
type AssetsUpdateResponse struct {
	AssetsUpdateResult
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// AssetsUpdateResult contains the result from method Assets.Update.
type AssetsUpdateResult struct {
	Asset
}

// ContentKeyPoliciesCreateOrUpdateResponse contains the response from method ContentKeyPolicies.CreateOrUpdate.
type ContentKeyPoliciesCreateOrUpdateResponse struct {
	ContentKeyPoliciesCreateOrUpdateResult
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// ContentKeyPoliciesCreateOrUpdateResult contains the result from method ContentKeyPolicies.CreateOrUpdate.
type ContentKeyPoliciesCreateOrUpdateResult struct {
	ContentKeyPolicy
}

// ContentKeyPoliciesDeleteResponse contains the response from method ContentKeyPolicies.Delete.
type ContentKeyPoliciesDeleteResponse struct {
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// ContentKeyPoliciesGetPolicyPropertiesWithSecretsResponse contains the response from method ContentKeyPolicies.GetPolicyPropertiesWithSecrets.
type ContentKeyPoliciesGetPolicyPropertiesWithSecretsResponse struct {
	ContentKeyPoliciesGetPolicyPropertiesWithSecretsResult
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// ContentKeyPoliciesGetPolicyPropertiesWithSecretsResult contains the result from method ContentKeyPolicies.GetPolicyPropertiesWithSecrets.
type ContentKeyPoliciesGetPolicyPropertiesWithSecretsResult struct {
	ContentKeyPolicyProperties
}

// ContentKeyPoliciesGetResponse contains the response from method ContentKeyPolicies.Get.
type ContentKeyPoliciesGetResponse struct {
	ContentKeyPoliciesGetResult
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// ContentKeyPoliciesGetResult contains the result from method ContentKeyPolicies.Get.
type ContentKeyPoliciesGetResult struct {
	ContentKeyPolicy
}

// ContentKeyPoliciesListResponse contains the response from method ContentKeyPolicies.List.
type ContentKeyPoliciesListResponse struct {
	ContentKeyPoliciesListResult
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// ContentKeyPoliciesListResult contains the result from method ContentKeyPolicies.List.
type ContentKeyPoliciesListResult struct {
	ContentKeyPolicyCollection
}

// ContentKeyPoliciesUpdateResponse contains the response from method ContentKeyPolicies.Update.
type ContentKeyPoliciesUpdateResponse struct {
	ContentKeyPoliciesUpdateResult
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// ContentKeyPoliciesUpdateResult contains the result from method ContentKeyPolicies.Update.
type ContentKeyPoliciesUpdateResult struct {
	ContentKeyPolicy
}

// JobsCancelJobResponse contains the response from method Jobs.CancelJob.
type JobsCancelJobResponse struct {
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// JobsCreateResponse contains the response from method Jobs.Create.
type JobsCreateResponse struct {
	JobsCreateResult
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// JobsCreateResult contains the result from method Jobs.Create.
type JobsCreateResult struct {
	Job
}

// JobsDeleteResponse contains the response from method Jobs.Delete.
type JobsDeleteResponse struct {
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// JobsGetResponse contains the response from method Jobs.Get.
type JobsGetResponse struct {
	JobsGetResult
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// JobsGetResult contains the result from method Jobs.Get.
type JobsGetResult struct {
	Job
}

// JobsListResponse contains the response from method Jobs.List.
type JobsListResponse struct {
	JobsListResult
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// JobsListResult contains the result from method Jobs.List.
type JobsListResult struct {
	JobCollection
}

// JobsUpdateResponse contains the response from method Jobs.Update.
type JobsUpdateResponse struct {
	JobsUpdateResult
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// JobsUpdateResult contains the result from method Jobs.Update.
type JobsUpdateResult struct {
	Job
}

// LiveEventsAllocatePollerResponse contains the response from method LiveEvents.Allocate.
type LiveEventsAllocatePollerResponse struct {
	// Poller contains an initialized poller.
	Poller *LiveEventsAllocatePoller

	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// PollUntilDone will poll the service endpoint until a terminal state is reached or an error is received.
func (l LiveEventsAllocatePollerResponse) PollUntilDone(ctx context.Context, freq time.Duration) (LiveEventsAllocateResponse, error) {
	respType := LiveEventsAllocateResponse{}
	resp, err := l.Poller.pt.PollUntilDone(ctx, freq, nil)
	if err != nil {
		return respType, err
	}
	respType.RawResponse = resp
	return respType, nil
}

// Resume rehydrates a LiveEventsAllocatePollerResponse from the provided client and resume token.
func (l *LiveEventsAllocatePollerResponse) Resume(ctx context.Context, client *LiveEventsClient, token string) error {
	pt, err := armruntime.NewPollerFromResumeToken("LiveEventsClient.Allocate", token, client.pl, client.allocateHandleError)
	if err != nil {
		return err
	}
	poller := &LiveEventsAllocatePoller{
		pt: pt,
	}
	resp, err := poller.Poll(ctx)
	if err != nil {
		return err
	}
	l.Poller = poller
	l.RawResponse = resp
	return nil
}

// LiveEventsAllocateResponse contains the response from method LiveEvents.Allocate.
type LiveEventsAllocateResponse struct {
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// LiveEventsCreatePollerResponse contains the response from method LiveEvents.Create.
type LiveEventsCreatePollerResponse struct {
	// Poller contains an initialized poller.
	Poller *LiveEventsCreatePoller

	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// PollUntilDone will poll the service endpoint until a terminal state is reached or an error is received.
func (l LiveEventsCreatePollerResponse) PollUntilDone(ctx context.Context, freq time.Duration) (LiveEventsCreateResponse, error) {
	respType := LiveEventsCreateResponse{}
	resp, err := l.Poller.pt.PollUntilDone(ctx, freq, &respType.LiveEvent)
	if err != nil {
		return respType, err
	}
	respType.RawResponse = resp
	return respType, nil
}

// Resume rehydrates a LiveEventsCreatePollerResponse from the provided client and resume token.
func (l *LiveEventsCreatePollerResponse) Resume(ctx context.Context, client *LiveEventsClient, token string) error {
	pt, err := armruntime.NewPollerFromResumeToken("LiveEventsClient.Create", token, client.pl, client.createHandleError)
	if err != nil {
		return err
	}
	poller := &LiveEventsCreatePoller{
		pt: pt,
	}
	resp, err := poller.Poll(ctx)
	if err != nil {
		return err
	}
	l.Poller = poller
	l.RawResponse = resp
	return nil
}

// LiveEventsCreateResponse contains the response from method LiveEvents.Create.
type LiveEventsCreateResponse struct {
	LiveEventsCreateResult
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// LiveEventsCreateResult contains the result from method LiveEvents.Create.
type LiveEventsCreateResult struct {
	LiveEvent
}

// LiveEventsDeletePollerResponse contains the response from method LiveEvents.Delete.
type LiveEventsDeletePollerResponse struct {
	// Poller contains an initialized poller.
	Poller *LiveEventsDeletePoller

	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// PollUntilDone will poll the service endpoint until a terminal state is reached or an error is received.
func (l LiveEventsDeletePollerResponse) PollUntilDone(ctx context.Context, freq time.Duration) (LiveEventsDeleteResponse, error) {
	respType := LiveEventsDeleteResponse{}
	resp, err := l.Poller.pt.PollUntilDone(ctx, freq, nil)
	if err != nil {
		return respType, err
	}
	respType.RawResponse = resp
	return respType, nil
}

// Resume rehydrates a LiveEventsDeletePollerResponse from the provided client and resume token.
func (l *LiveEventsDeletePollerResponse) Resume(ctx context.Context, client *LiveEventsClient, token string) error {
	pt, err := armruntime.NewPollerFromResumeToken("LiveEventsClient.Delete", token, client.pl, client.deleteHandleError)
	if err != nil {
		return err
	}
	poller := &LiveEventsDeletePoller{
		pt: pt,
	}
	resp, err := poller.Poll(ctx)
	if err != nil {
		return err
	}
	l.Poller = poller
	l.RawResponse = resp
	return nil
}

// LiveEventsDeleteResponse contains the response from method LiveEvents.Delete.
type LiveEventsDeleteResponse struct {
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// LiveEventsGetResponse contains the response from method LiveEvents.Get.
type LiveEventsGetResponse struct {
	LiveEventsGetResult
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// LiveEventsGetResult contains the result from method LiveEvents.Get.
type LiveEventsGetResult struct {
	LiveEvent
}

// LiveEventsListResponse contains the response from method LiveEvents.List.
type LiveEventsListResponse struct {
	LiveEventsListResult
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// LiveEventsListResult contains the result from method LiveEvents.List.
type LiveEventsListResult struct {
	LiveEventListResult
}

// LiveEventsResetPollerResponse contains the response from method LiveEvents.Reset.
type LiveEventsResetPollerResponse struct {
	// Poller contains an initialized poller.
	Poller *LiveEventsResetPoller

	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// PollUntilDone will poll the service endpoint until a terminal state is reached or an error is received.
func (l LiveEventsResetPollerResponse) PollUntilDone(ctx context.Context, freq time.Duration) (LiveEventsResetResponse, error) {
	respType := LiveEventsResetResponse{}
	resp, err := l.Poller.pt.PollUntilDone(ctx, freq, nil)
	if err != nil {
		return respType, err
	}
	respType.RawResponse = resp
	return respType, nil
}

// Resume rehydrates a LiveEventsResetPollerResponse from the provided client and resume token.
func (l *LiveEventsResetPollerResponse) Resume(ctx context.Context, client *LiveEventsClient, token string) error {
	pt, err := armruntime.NewPollerFromResumeToken("LiveEventsClient.Reset", token, client.pl, client.resetHandleError)
	if err != nil {
		return err
	}
	poller := &LiveEventsResetPoller{
		pt: pt,
	}
	resp, err := poller.Poll(ctx)
	if err != nil {
		return err
	}
	l.Poller = poller
	l.RawResponse = resp
	return nil
}

// LiveEventsResetResponse contains the response from method LiveEvents.Reset.
type LiveEventsResetResponse struct {
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// LiveEventsStartPollerResponse contains the response from method LiveEvents.Start.
type LiveEventsStartPollerResponse struct {
	// Poller contains an initialized poller.
	Poller *LiveEventsStartPoller

	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// PollUntilDone will poll the service endpoint until a terminal state is reached or an error is received.
func (l LiveEventsStartPollerResponse) PollUntilDone(ctx context.Context, freq time.Duration) (LiveEventsStartResponse, error) {
	respType := LiveEventsStartResponse{}
	resp, err := l.Poller.pt.PollUntilDone(ctx, freq, nil)
	if err != nil {
		return respType, err
	}
	respType.RawResponse = resp
	return respType, nil
}

// Resume rehydrates a LiveEventsStartPollerResponse from the provided client and resume token.
func (l *LiveEventsStartPollerResponse) Resume(ctx context.Context, client *LiveEventsClient, token string) error {
	pt, err := armruntime.NewPollerFromResumeToken("LiveEventsClient.Start", token, client.pl, client.startHandleError)
	if err != nil {
		return err
	}
	poller := &LiveEventsStartPoller{
		pt: pt,
	}
	resp, err := poller.Poll(ctx)
	if err != nil {
		return err
	}
	l.Poller = poller
	l.RawResponse = resp
	return nil
}

// LiveEventsStartResponse contains the response from method LiveEvents.Start.
type LiveEventsStartResponse struct {
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// LiveEventsStopPollerResponse contains the response from method LiveEvents.Stop.
type LiveEventsStopPollerResponse struct {
	// Poller contains an initialized poller.
	Poller *LiveEventsStopPoller

	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// PollUntilDone will poll the service endpoint until a terminal state is reached or an error is received.
func (l LiveEventsStopPollerResponse) PollUntilDone(ctx context.Context, freq time.Duration) (LiveEventsStopResponse, error) {
	respType := LiveEventsStopResponse{}
	resp, err := l.Poller.pt.PollUntilDone(ctx, freq, nil)
	if err != nil {
		return respType, err
	}
	respType.RawResponse = resp
	return respType, nil
}

// Resume rehydrates a LiveEventsStopPollerResponse from the provided client and resume token.
func (l *LiveEventsStopPollerResponse) Resume(ctx context.Context, client *LiveEventsClient, token string) error {
	pt, err := armruntime.NewPollerFromResumeToken("LiveEventsClient.Stop", token, client.pl, client.stopHandleError)
	if err != nil {
		return err
	}
	poller := &LiveEventsStopPoller{
		pt: pt,
	}
	resp, err := poller.Poll(ctx)
	if err != nil {
		return err
	}
	l.Poller = poller
	l.RawResponse = resp
	return nil
}

// LiveEventsStopResponse contains the response from method LiveEvents.Stop.
type LiveEventsStopResponse struct {
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// LiveEventsUpdatePollerResponse contains the response from method LiveEvents.Update.
type LiveEventsUpdatePollerResponse struct {
	// Poller contains an initialized poller.
	Poller *LiveEventsUpdatePoller

	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// PollUntilDone will poll the service endpoint until a terminal state is reached or an error is received.
func (l LiveEventsUpdatePollerResponse) PollUntilDone(ctx context.Context, freq time.Duration) (LiveEventsUpdateResponse, error) {
	respType := LiveEventsUpdateResponse{}
	resp, err := l.Poller.pt.PollUntilDone(ctx, freq, &respType.LiveEvent)
	if err != nil {
		return respType, err
	}
	respType.RawResponse = resp
	return respType, nil
}

// Resume rehydrates a LiveEventsUpdatePollerResponse from the provided client and resume token.
func (l *LiveEventsUpdatePollerResponse) Resume(ctx context.Context, client *LiveEventsClient, token string) error {
	pt, err := armruntime.NewPollerFromResumeToken("LiveEventsClient.Update", token, client.pl, client.updateHandleError)
	if err != nil {
		return err
	}
	poller := &LiveEventsUpdatePoller{
		pt: pt,
	}
	resp, err := poller.Poll(ctx)
	if err != nil {
		return err
	}
	l.Poller = poller
	l.RawResponse = resp
	return nil
}

// LiveEventsUpdateResponse contains the response from method LiveEvents.Update.
type LiveEventsUpdateResponse struct {
	LiveEventsUpdateResult
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// LiveEventsUpdateResult contains the result from method LiveEvents.Update.
type LiveEventsUpdateResult struct {
	LiveEvent
}

// LiveOutputsCreatePollerResponse contains the response from method LiveOutputs.Create.
type LiveOutputsCreatePollerResponse struct {
	// Poller contains an initialized poller.
	Poller *LiveOutputsCreatePoller

	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// PollUntilDone will poll the service endpoint until a terminal state is reached or an error is received.
func (l LiveOutputsCreatePollerResponse) PollUntilDone(ctx context.Context, freq time.Duration) (LiveOutputsCreateResponse, error) {
	respType := LiveOutputsCreateResponse{}
	resp, err := l.Poller.pt.PollUntilDone(ctx, freq, &respType.LiveOutput)
	if err != nil {
		return respType, err
	}
	respType.RawResponse = resp
	return respType, nil
}

// Resume rehydrates a LiveOutputsCreatePollerResponse from the provided client and resume token.
func (l *LiveOutputsCreatePollerResponse) Resume(ctx context.Context, client *LiveOutputsClient, token string) error {
	pt, err := armruntime.NewPollerFromResumeToken("LiveOutputsClient.Create", token, client.pl, client.createHandleError)
	if err != nil {
		return err
	}
	poller := &LiveOutputsCreatePoller{
		pt: pt,
	}
	resp, err := poller.Poll(ctx)
	if err != nil {
		return err
	}
	l.Poller = poller
	l.RawResponse = resp
	return nil
}

// LiveOutputsCreateResponse contains the response from method LiveOutputs.Create.
type LiveOutputsCreateResponse struct {
	LiveOutputsCreateResult
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// LiveOutputsCreateResult contains the result from method LiveOutputs.Create.
type LiveOutputsCreateResult struct {
	LiveOutput
}

// LiveOutputsDeletePollerResponse contains the response from method LiveOutputs.Delete.
type LiveOutputsDeletePollerResponse struct {
	// Poller contains an initialized poller.
	Poller *LiveOutputsDeletePoller

	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// PollUntilDone will poll the service endpoint until a terminal state is reached or an error is received.
func (l LiveOutputsDeletePollerResponse) PollUntilDone(ctx context.Context, freq time.Duration) (LiveOutputsDeleteResponse, error) {
	respType := LiveOutputsDeleteResponse{}
	resp, err := l.Poller.pt.PollUntilDone(ctx, freq, nil)
	if err != nil {
		return respType, err
	}
	respType.RawResponse = resp
	return respType, nil
}

// Resume rehydrates a LiveOutputsDeletePollerResponse from the provided client and resume token.
func (l *LiveOutputsDeletePollerResponse) Resume(ctx context.Context, client *LiveOutputsClient, token string) error {
	pt, err := armruntime.NewPollerFromResumeToken("LiveOutputsClient.Delete", token, client.pl, client.deleteHandleError)
	if err != nil {
		return err
	}
	poller := &LiveOutputsDeletePoller{
		pt: pt,
	}
	resp, err := poller.Poll(ctx)
	if err != nil {
		return err
	}
	l.Poller = poller
	l.RawResponse = resp
	return nil
}

// LiveOutputsDeleteResponse contains the response from method LiveOutputs.Delete.
type LiveOutputsDeleteResponse struct {
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// LiveOutputsGetResponse contains the response from method LiveOutputs.Get.
type LiveOutputsGetResponse struct {
	LiveOutputsGetResult
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// LiveOutputsGetResult contains the result from method LiveOutputs.Get.
type LiveOutputsGetResult struct {
	LiveOutput
}

// LiveOutputsListResponse contains the response from method LiveOutputs.List.
type LiveOutputsListResponse struct {
	LiveOutputsListResult
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// LiveOutputsListResult contains the result from method LiveOutputs.List.
type LiveOutputsListResult struct {
	LiveOutputListResult
}

// LocationsCheckNameAvailabilityResponse contains the response from method Locations.CheckNameAvailability.
type LocationsCheckNameAvailabilityResponse struct {
	LocationsCheckNameAvailabilityResult
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// LocationsCheckNameAvailabilityResult contains the result from method Locations.CheckNameAvailability.
type LocationsCheckNameAvailabilityResult struct {
	EntityNameAvailabilityCheckOutput
}

// MediaservicesCreateOrUpdateResponse contains the response from method Mediaservices.CreateOrUpdate.
type MediaservicesCreateOrUpdateResponse struct {
	MediaservicesCreateOrUpdateResult
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// MediaservicesCreateOrUpdateResult contains the result from method Mediaservices.CreateOrUpdate.
type MediaservicesCreateOrUpdateResult struct {
	MediaService
}

// MediaservicesDeleteResponse contains the response from method Mediaservices.Delete.
type MediaservicesDeleteResponse struct {
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// MediaservicesGetResponse contains the response from method Mediaservices.Get.
type MediaservicesGetResponse struct {
	MediaservicesGetResult
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// MediaservicesGetResult contains the result from method Mediaservices.Get.
type MediaservicesGetResult struct {
	MediaService
}

// MediaservicesListBySubscriptionResponse contains the response from method Mediaservices.ListBySubscription.
type MediaservicesListBySubscriptionResponse struct {
	MediaservicesListBySubscriptionResult
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// MediaservicesListBySubscriptionResult contains the result from method Mediaservices.ListBySubscription.
type MediaservicesListBySubscriptionResult struct {
	MediaServiceCollection
}

// MediaservicesListEdgePoliciesResponse contains the response from method Mediaservices.ListEdgePolicies.
type MediaservicesListEdgePoliciesResponse struct {
	MediaservicesListEdgePoliciesResult
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// MediaservicesListEdgePoliciesResult contains the result from method Mediaservices.ListEdgePolicies.
type MediaservicesListEdgePoliciesResult struct {
	EdgePolicies
}

// MediaservicesListResponse contains the response from method Mediaservices.List.
type MediaservicesListResponse struct {
	MediaservicesListResult
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// MediaservicesListResult contains the result from method Mediaservices.List.
type MediaservicesListResult struct {
	MediaServiceCollection
}

// MediaservicesSyncStorageKeysResponse contains the response from method Mediaservices.SyncStorageKeys.
type MediaservicesSyncStorageKeysResponse struct {
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// MediaservicesUpdateResponse contains the response from method Mediaservices.Update.
type MediaservicesUpdateResponse struct {
	MediaservicesUpdateResult
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// MediaservicesUpdateResult contains the result from method Mediaservices.Update.
type MediaservicesUpdateResult struct {
	MediaService
}

// OperationsListResponse contains the response from method Operations.List.
type OperationsListResponse struct {
	OperationsListResult
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// OperationsListResult contains the result from method Operations.List.
type OperationsListResult struct {
	OperationCollection
}

// PrivateEndpointConnectionsCreateOrUpdateResponse contains the response from method PrivateEndpointConnections.CreateOrUpdate.
type PrivateEndpointConnectionsCreateOrUpdateResponse struct {
	PrivateEndpointConnectionsCreateOrUpdateResult
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// PrivateEndpointConnectionsCreateOrUpdateResult contains the result from method PrivateEndpointConnections.CreateOrUpdate.
type PrivateEndpointConnectionsCreateOrUpdateResult struct {
	PrivateEndpointConnection
}

// PrivateEndpointConnectionsDeleteResponse contains the response from method PrivateEndpointConnections.Delete.
type PrivateEndpointConnectionsDeleteResponse struct {
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// PrivateEndpointConnectionsGetResponse contains the response from method PrivateEndpointConnections.Get.
type PrivateEndpointConnectionsGetResponse struct {
	PrivateEndpointConnectionsGetResult
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// PrivateEndpointConnectionsGetResult contains the result from method PrivateEndpointConnections.Get.
type PrivateEndpointConnectionsGetResult struct {
	PrivateEndpointConnection
}

// PrivateEndpointConnectionsListResponse contains the response from method PrivateEndpointConnections.List.
type PrivateEndpointConnectionsListResponse struct {
	PrivateEndpointConnectionsListResult
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// PrivateEndpointConnectionsListResult contains the result from method PrivateEndpointConnections.List.
type PrivateEndpointConnectionsListResult struct {
	PrivateEndpointConnectionListResult
}

// PrivateLinkResourcesGetResponse contains the response from method PrivateLinkResources.Get.
type PrivateLinkResourcesGetResponse struct {
	PrivateLinkResourcesGetResult
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// PrivateLinkResourcesGetResult contains the result from method PrivateLinkResources.Get.
type PrivateLinkResourcesGetResult struct {
	PrivateLinkResource
}

// PrivateLinkResourcesListResponse contains the response from method PrivateLinkResources.List.
type PrivateLinkResourcesListResponse struct {
	PrivateLinkResourcesListResult
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// PrivateLinkResourcesListResult contains the result from method PrivateLinkResources.List.
type PrivateLinkResourcesListResult struct {
	PrivateLinkResourceListResult
}

// StreamingEndpointsCreatePollerResponse contains the response from method StreamingEndpoints.Create.
type StreamingEndpointsCreatePollerResponse struct {
	// Poller contains an initialized poller.
	Poller *StreamingEndpointsCreatePoller

	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// PollUntilDone will poll the service endpoint until a terminal state is reached or an error is received.
func (l StreamingEndpointsCreatePollerResponse) PollUntilDone(ctx context.Context, freq time.Duration) (StreamingEndpointsCreateResponse, error) {
	respType := StreamingEndpointsCreateResponse{}
	resp, err := l.Poller.pt.PollUntilDone(ctx, freq, &respType.StreamingEndpoint)
	if err != nil {
		return respType, err
	}
	respType.RawResponse = resp
	return respType, nil
}

// Resume rehydrates a StreamingEndpointsCreatePollerResponse from the provided client and resume token.
func (l *StreamingEndpointsCreatePollerResponse) Resume(ctx context.Context, client *StreamingEndpointsClient, token string) error {
	pt, err := armruntime.NewPollerFromResumeToken("StreamingEndpointsClient.Create", token, client.pl, client.createHandleError)
	if err != nil {
		return err
	}
	poller := &StreamingEndpointsCreatePoller{
		pt: pt,
	}
	resp, err := poller.Poll(ctx)
	if err != nil {
		return err
	}
	l.Poller = poller
	l.RawResponse = resp
	return nil
}

// StreamingEndpointsCreateResponse contains the response from method StreamingEndpoints.Create.
type StreamingEndpointsCreateResponse struct {
	StreamingEndpointsCreateResult
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// StreamingEndpointsCreateResult contains the result from method StreamingEndpoints.Create.
type StreamingEndpointsCreateResult struct {
	StreamingEndpoint
}

// StreamingEndpointsDeletePollerResponse contains the response from method StreamingEndpoints.Delete.
type StreamingEndpointsDeletePollerResponse struct {
	// Poller contains an initialized poller.
	Poller *StreamingEndpointsDeletePoller

	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// PollUntilDone will poll the service endpoint until a terminal state is reached or an error is received.
func (l StreamingEndpointsDeletePollerResponse) PollUntilDone(ctx context.Context, freq time.Duration) (StreamingEndpointsDeleteResponse, error) {
	respType := StreamingEndpointsDeleteResponse{}
	resp, err := l.Poller.pt.PollUntilDone(ctx, freq, nil)
	if err != nil {
		return respType, err
	}
	respType.RawResponse = resp
	return respType, nil
}

// Resume rehydrates a StreamingEndpointsDeletePollerResponse from the provided client and resume token.
func (l *StreamingEndpointsDeletePollerResponse) Resume(ctx context.Context, client *StreamingEndpointsClient, token string) error {
	pt, err := armruntime.NewPollerFromResumeToken("StreamingEndpointsClient.Delete", token, client.pl, client.deleteHandleError)
	if err != nil {
		return err
	}
	poller := &StreamingEndpointsDeletePoller{
		pt: pt,
	}
	resp, err := poller.Poll(ctx)
	if err != nil {
		return err
	}
	l.Poller = poller
	l.RawResponse = resp
	return nil
}

// StreamingEndpointsDeleteResponse contains the response from method StreamingEndpoints.Delete.
type StreamingEndpointsDeleteResponse struct {
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// StreamingEndpointsGetResponse contains the response from method StreamingEndpoints.Get.
type StreamingEndpointsGetResponse struct {
	StreamingEndpointsGetResult
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// StreamingEndpointsGetResult contains the result from method StreamingEndpoints.Get.
type StreamingEndpointsGetResult struct {
	StreamingEndpoint
}

// StreamingEndpointsListResponse contains the response from method StreamingEndpoints.List.
type StreamingEndpointsListResponse struct {
	StreamingEndpointsListResult
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// StreamingEndpointsListResult contains the result from method StreamingEndpoints.List.
type StreamingEndpointsListResult struct {
	StreamingEndpointListResult
}

// StreamingEndpointsScalePollerResponse contains the response from method StreamingEndpoints.Scale.
type StreamingEndpointsScalePollerResponse struct {
	// Poller contains an initialized poller.
	Poller *StreamingEndpointsScalePoller

	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// PollUntilDone will poll the service endpoint until a terminal state is reached or an error is received.
func (l StreamingEndpointsScalePollerResponse) PollUntilDone(ctx context.Context, freq time.Duration) (StreamingEndpointsScaleResponse, error) {
	respType := StreamingEndpointsScaleResponse{}
	resp, err := l.Poller.pt.PollUntilDone(ctx, freq, nil)
	if err != nil {
		return respType, err
	}
	respType.RawResponse = resp
	return respType, nil
}

// Resume rehydrates a StreamingEndpointsScalePollerResponse from the provided client and resume token.
func (l *StreamingEndpointsScalePollerResponse) Resume(ctx context.Context, client *StreamingEndpointsClient, token string) error {
	pt, err := armruntime.NewPollerFromResumeToken("StreamingEndpointsClient.Scale", token, client.pl, client.scaleHandleError)
	if err != nil {
		return err
	}
	poller := &StreamingEndpointsScalePoller{
		pt: pt,
	}
	resp, err := poller.Poll(ctx)
	if err != nil {
		return err
	}
	l.Poller = poller
	l.RawResponse = resp
	return nil
}

// StreamingEndpointsScaleResponse contains the response from method StreamingEndpoints.Scale.
type StreamingEndpointsScaleResponse struct {
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// StreamingEndpointsStartPollerResponse contains the response from method StreamingEndpoints.Start.
type StreamingEndpointsStartPollerResponse struct {
	// Poller contains an initialized poller.
	Poller *StreamingEndpointsStartPoller

	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// PollUntilDone will poll the service endpoint until a terminal state is reached or an error is received.
func (l StreamingEndpointsStartPollerResponse) PollUntilDone(ctx context.Context, freq time.Duration) (StreamingEndpointsStartResponse, error) {
	respType := StreamingEndpointsStartResponse{}
	resp, err := l.Poller.pt.PollUntilDone(ctx, freq, nil)
	if err != nil {
		return respType, err
	}
	respType.RawResponse = resp
	return respType, nil
}

// Resume rehydrates a StreamingEndpointsStartPollerResponse from the provided client and resume token.
func (l *StreamingEndpointsStartPollerResponse) Resume(ctx context.Context, client *StreamingEndpointsClient, token string) error {
	pt, err := armruntime.NewPollerFromResumeToken("StreamingEndpointsClient.Start", token, client.pl, client.startHandleError)
	if err != nil {
		return err
	}
	poller := &StreamingEndpointsStartPoller{
		pt: pt,
	}
	resp, err := poller.Poll(ctx)
	if err != nil {
		return err
	}
	l.Poller = poller
	l.RawResponse = resp
	return nil
}

// StreamingEndpointsStartResponse contains the response from method StreamingEndpoints.Start.
type StreamingEndpointsStartResponse struct {
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// StreamingEndpointsStopPollerResponse contains the response from method StreamingEndpoints.Stop.
type StreamingEndpointsStopPollerResponse struct {
	// Poller contains an initialized poller.
	Poller *StreamingEndpointsStopPoller

	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// PollUntilDone will poll the service endpoint until a terminal state is reached or an error is received.
func (l StreamingEndpointsStopPollerResponse) PollUntilDone(ctx context.Context, freq time.Duration) (StreamingEndpointsStopResponse, error) {
	respType := StreamingEndpointsStopResponse{}
	resp, err := l.Poller.pt.PollUntilDone(ctx, freq, nil)
	if err != nil {
		return respType, err
	}
	respType.RawResponse = resp
	return respType, nil
}

// Resume rehydrates a StreamingEndpointsStopPollerResponse from the provided client and resume token.
func (l *StreamingEndpointsStopPollerResponse) Resume(ctx context.Context, client *StreamingEndpointsClient, token string) error {
	pt, err := armruntime.NewPollerFromResumeToken("StreamingEndpointsClient.Stop", token, client.pl, client.stopHandleError)
	if err != nil {
		return err
	}
	poller := &StreamingEndpointsStopPoller{
		pt: pt,
	}
	resp, err := poller.Poll(ctx)
	if err != nil {
		return err
	}
	l.Poller = poller
	l.RawResponse = resp
	return nil
}

// StreamingEndpointsStopResponse contains the response from method StreamingEndpoints.Stop.
type StreamingEndpointsStopResponse struct {
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// StreamingEndpointsUpdatePollerResponse contains the response from method StreamingEndpoints.Update.
type StreamingEndpointsUpdatePollerResponse struct {
	// Poller contains an initialized poller.
	Poller *StreamingEndpointsUpdatePoller

	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// PollUntilDone will poll the service endpoint until a terminal state is reached or an error is received.
func (l StreamingEndpointsUpdatePollerResponse) PollUntilDone(ctx context.Context, freq time.Duration) (StreamingEndpointsUpdateResponse, error) {
	respType := StreamingEndpointsUpdateResponse{}
	resp, err := l.Poller.pt.PollUntilDone(ctx, freq, &respType.StreamingEndpoint)
	if err != nil {
		return respType, err
	}
	respType.RawResponse = resp
	return respType, nil
}

// Resume rehydrates a StreamingEndpointsUpdatePollerResponse from the provided client and resume token.
func (l *StreamingEndpointsUpdatePollerResponse) Resume(ctx context.Context, client *StreamingEndpointsClient, token string) error {
	pt, err := armruntime.NewPollerFromResumeToken("StreamingEndpointsClient.Update", token, client.pl, client.updateHandleError)
	if err != nil {
		return err
	}
	poller := &StreamingEndpointsUpdatePoller{
		pt: pt,
	}
	resp, err := poller.Poll(ctx)
	if err != nil {
		return err
	}
	l.Poller = poller
	l.RawResponse = resp
	return nil
}

// StreamingEndpointsUpdateResponse contains the response from method StreamingEndpoints.Update.
type StreamingEndpointsUpdateResponse struct {
	StreamingEndpointsUpdateResult
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// StreamingEndpointsUpdateResult contains the result from method StreamingEndpoints.Update.
type StreamingEndpointsUpdateResult struct {
	StreamingEndpoint
}

// StreamingLocatorsCreateResponse contains the response from method StreamingLocators.Create.
type StreamingLocatorsCreateResponse struct {
	StreamingLocatorsCreateResult
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// StreamingLocatorsCreateResult contains the result from method StreamingLocators.Create.
type StreamingLocatorsCreateResult struct {
	StreamingLocator
}

// StreamingLocatorsDeleteResponse contains the response from method StreamingLocators.Delete.
type StreamingLocatorsDeleteResponse struct {
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// StreamingLocatorsGetResponse contains the response from method StreamingLocators.Get.
type StreamingLocatorsGetResponse struct {
	StreamingLocatorsGetResult
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// StreamingLocatorsGetResult contains the result from method StreamingLocators.Get.
type StreamingLocatorsGetResult struct {
	StreamingLocator
}

// StreamingLocatorsListContentKeysResponse contains the response from method StreamingLocators.ListContentKeys.
type StreamingLocatorsListContentKeysResponse struct {
	StreamingLocatorsListContentKeysResult
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// StreamingLocatorsListContentKeysResult contains the result from method StreamingLocators.ListContentKeys.
type StreamingLocatorsListContentKeysResult struct {
	ListContentKeysResponse
}

// StreamingLocatorsListPathsResponse contains the response from method StreamingLocators.ListPaths.
type StreamingLocatorsListPathsResponse struct {
	StreamingLocatorsListPathsResult
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// StreamingLocatorsListPathsResult contains the result from method StreamingLocators.ListPaths.
type StreamingLocatorsListPathsResult struct {
	ListPathsResponse
}

// StreamingLocatorsListResponse contains the response from method StreamingLocators.List.
type StreamingLocatorsListResponse struct {
	StreamingLocatorsListResult
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// StreamingLocatorsListResult contains the result from method StreamingLocators.List.
type StreamingLocatorsListResult struct {
	StreamingLocatorCollection
}

// StreamingPoliciesCreateResponse contains the response from method StreamingPolicies.Create.
type StreamingPoliciesCreateResponse struct {
	StreamingPoliciesCreateResult
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// StreamingPoliciesCreateResult contains the result from method StreamingPolicies.Create.
type StreamingPoliciesCreateResult struct {
	StreamingPolicy
}

// StreamingPoliciesDeleteResponse contains the response from method StreamingPolicies.Delete.
type StreamingPoliciesDeleteResponse struct {
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// StreamingPoliciesGetResponse contains the response from method StreamingPolicies.Get.
type StreamingPoliciesGetResponse struct {
	StreamingPoliciesGetResult
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// StreamingPoliciesGetResult contains the result from method StreamingPolicies.Get.
type StreamingPoliciesGetResult struct {
	StreamingPolicy
}

// StreamingPoliciesListResponse contains the response from method StreamingPolicies.List.
type StreamingPoliciesListResponse struct {
	StreamingPoliciesListResult
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// StreamingPoliciesListResult contains the result from method StreamingPolicies.List.
type StreamingPoliciesListResult struct {
	StreamingPolicyCollection
}

// TransformsCreateOrUpdateResponse contains the response from method Transforms.CreateOrUpdate.
type TransformsCreateOrUpdateResponse struct {
	TransformsCreateOrUpdateResult
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// TransformsCreateOrUpdateResult contains the result from method Transforms.CreateOrUpdate.
type TransformsCreateOrUpdateResult struct {
	Transform
}

// TransformsDeleteResponse contains the response from method Transforms.Delete.
type TransformsDeleteResponse struct {
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// TransformsGetResponse contains the response from method Transforms.Get.
type TransformsGetResponse struct {
	TransformsGetResult
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// TransformsGetResult contains the result from method Transforms.Get.
type TransformsGetResult struct {
	Transform
}

// TransformsListResponse contains the response from method Transforms.List.
type TransformsListResponse struct {
	TransformsListResult
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// TransformsListResult contains the result from method Transforms.List.
type TransformsListResult struct {
	TransformCollection
}

// TransformsUpdateResponse contains the response from method Transforms.Update.
type TransformsUpdateResponse struct {
	TransformsUpdateResult
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// TransformsUpdateResult contains the result from method Transforms.Update.
type TransformsUpdateResult struct {
	Transform
}
