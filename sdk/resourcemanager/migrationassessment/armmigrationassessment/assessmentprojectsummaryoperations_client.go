// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator. DO NOT EDIT.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

package armmigrationassessment

import (
	"context"
	"errors"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/arm"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/policy"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/runtime"
	"net/http"
	"net/url"
	"strings"
)

// AssessmentProjectSummaryOperationsClient contains the methods for the AssessmentProjectSummaryOperations group.
// Don't use this type directly, use NewAssessmentProjectSummaryOperationsClient() instead.
type AssessmentProjectSummaryOperationsClient struct {
	internal       *arm.Client
	subscriptionID string
}

// NewAssessmentProjectSummaryOperationsClient creates a new instance of AssessmentProjectSummaryOperationsClient with the specified values.
//   - subscriptionID - The ID of the target subscription. The value must be an UUID.
//   - credential - used to authorize requests. Usually a credential from azidentity.
//   - options - pass nil to accept the default values.
func NewAssessmentProjectSummaryOperationsClient(subscriptionID string, credential azcore.TokenCredential, options *arm.ClientOptions) (*AssessmentProjectSummaryOperationsClient, error) {
	cl, err := arm.NewClient(moduleName, moduleVersion, credential, options)
	if err != nil {
		return nil, err
	}
	client := &AssessmentProjectSummaryOperationsClient{
		subscriptionID: subscriptionID,
		internal:       cl,
	}
	return client, nil
}

// Get - Get a AssessmentProjectSummary
// If the operation fails it returns an *azcore.ResponseError type.
//
// Generated from API version 2024-01-01-preview
//   - resourceGroupName - The name of the resource group. The name is case insensitive.
//   - projectName - Assessment Project Name
//   - projectSummaryName - Group ARM name
//   - options - AssessmentProjectSummaryOperationsClientGetOptions contains the optional parameters for the AssessmentProjectSummaryOperationsClient.Get
//     method.
func (client *AssessmentProjectSummaryOperationsClient) Get(ctx context.Context, resourceGroupName string, projectName string, projectSummaryName string, options *AssessmentProjectSummaryOperationsClientGetOptions) (AssessmentProjectSummaryOperationsClientGetResponse, error) {
	var err error
	const operationName = "AssessmentProjectSummaryOperationsClient.Get"
	ctx = context.WithValue(ctx, runtime.CtxAPINameKey{}, operationName)
	ctx, endSpan := runtime.StartSpan(ctx, operationName, client.internal.Tracer(), nil)
	defer func() { endSpan(err) }()
	req, err := client.getCreateRequest(ctx, resourceGroupName, projectName, projectSummaryName, options)
	if err != nil {
		return AssessmentProjectSummaryOperationsClientGetResponse{}, err
	}
	httpResp, err := client.internal.Pipeline().Do(req)
	if err != nil {
		return AssessmentProjectSummaryOperationsClientGetResponse{}, err
	}
	if !runtime.HasStatusCode(httpResp, http.StatusOK) {
		err = runtime.NewResponseError(httpResp)
		return AssessmentProjectSummaryOperationsClientGetResponse{}, err
	}
	resp, err := client.getHandleResponse(httpResp)
	return resp, err
}

// getCreateRequest creates the Get request.
func (client *AssessmentProjectSummaryOperationsClient) getCreateRequest(ctx context.Context, resourceGroupName string, projectName string, projectSummaryName string, _ *AssessmentProjectSummaryOperationsClientGetOptions) (*policy.Request, error) {
	urlPath := "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Migrate/assessmentProjects/{projectName}/projectSummary/{projectSummaryName}"
	if client.subscriptionID == "" {
		return nil, errors.New("parameter client.subscriptionID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{subscriptionId}", url.PathEscape(client.subscriptionID))
	if resourceGroupName == "" {
		return nil, errors.New("parameter resourceGroupName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{resourceGroupName}", url.PathEscape(resourceGroupName))
	if projectName == "" {
		return nil, errors.New("parameter projectName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{projectName}", url.PathEscape(projectName))
	if projectSummaryName == "" {
		return nil, errors.New("parameter projectSummaryName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{projectSummaryName}", url.PathEscape(projectSummaryName))
	req, err := runtime.NewRequest(ctx, http.MethodGet, runtime.JoinPaths(client.internal.Endpoint(), urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("api-version", "2024-01-01-preview")
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header["Accept"] = []string{"application/json"}
	return req, nil
}

// getHandleResponse handles the Get response.
func (client *AssessmentProjectSummaryOperationsClient) getHandleResponse(resp *http.Response) (AssessmentProjectSummaryOperationsClientGetResponse, error) {
	result := AssessmentProjectSummaryOperationsClientGetResponse{}
	if err := runtime.UnmarshalAsJSON(resp, &result.AssessmentProjectSummary); err != nil {
		return AssessmentProjectSummaryOperationsClientGetResponse{}, err
	}
	return result, nil
}

// NewListByAssessmentProjectPager - List AssessmentProjectSummary resources by AssessmentProject
//
// Generated from API version 2024-01-01-preview
//   - resourceGroupName - The name of the resource group. The name is case insensitive.
//   - projectName - Assessment Project Name
//   - options - AssessmentProjectSummaryOperationsClientListByAssessmentProjectOptions contains the optional parameters for the
//     AssessmentProjectSummaryOperationsClient.NewListByAssessmentProjectPager method.
func (client *AssessmentProjectSummaryOperationsClient) NewListByAssessmentProjectPager(resourceGroupName string, projectName string, options *AssessmentProjectSummaryOperationsClientListByAssessmentProjectOptions) *runtime.Pager[AssessmentProjectSummaryOperationsClientListByAssessmentProjectResponse] {
	return runtime.NewPager(runtime.PagingHandler[AssessmentProjectSummaryOperationsClientListByAssessmentProjectResponse]{
		More: func(page AssessmentProjectSummaryOperationsClientListByAssessmentProjectResponse) bool {
			return page.NextLink != nil && len(*page.NextLink) > 0
		},
		Fetcher: func(ctx context.Context, page *AssessmentProjectSummaryOperationsClientListByAssessmentProjectResponse) (AssessmentProjectSummaryOperationsClientListByAssessmentProjectResponse, error) {
			ctx = context.WithValue(ctx, runtime.CtxAPINameKey{}, "AssessmentProjectSummaryOperationsClient.NewListByAssessmentProjectPager")
			nextLink := ""
			if page != nil {
				nextLink = *page.NextLink
			}
			resp, err := runtime.FetcherForNextLink(ctx, client.internal.Pipeline(), nextLink, func(ctx context.Context) (*policy.Request, error) {
				return client.listByAssessmentProjectCreateRequest(ctx, resourceGroupName, projectName, options)
			}, nil)
			if err != nil {
				return AssessmentProjectSummaryOperationsClientListByAssessmentProjectResponse{}, err
			}
			return client.listByAssessmentProjectHandleResponse(resp)
		},
		Tracer: client.internal.Tracer(),
	})
}

// listByAssessmentProjectCreateRequest creates the ListByAssessmentProject request.
func (client *AssessmentProjectSummaryOperationsClient) listByAssessmentProjectCreateRequest(ctx context.Context, resourceGroupName string, projectName string, _ *AssessmentProjectSummaryOperationsClientListByAssessmentProjectOptions) (*policy.Request, error) {
	urlPath := "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Migrate/assessmentProjects/{projectName}/projectSummary"
	if client.subscriptionID == "" {
		return nil, errors.New("parameter client.subscriptionID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{subscriptionId}", url.PathEscape(client.subscriptionID))
	if resourceGroupName == "" {
		return nil, errors.New("parameter resourceGroupName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{resourceGroupName}", url.PathEscape(resourceGroupName))
	if projectName == "" {
		return nil, errors.New("parameter projectName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{projectName}", url.PathEscape(projectName))
	req, err := runtime.NewRequest(ctx, http.MethodGet, runtime.JoinPaths(client.internal.Endpoint(), urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("api-version", "2024-01-01-preview")
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header["Accept"] = []string{"application/json"}
	return req, nil
}

// listByAssessmentProjectHandleResponse handles the ListByAssessmentProject response.
func (client *AssessmentProjectSummaryOperationsClient) listByAssessmentProjectHandleResponse(resp *http.Response) (AssessmentProjectSummaryOperationsClientListByAssessmentProjectResponse, error) {
	result := AssessmentProjectSummaryOperationsClientListByAssessmentProjectResponse{}
	if err := runtime.UnmarshalAsJSON(resp, &result.AssessmentProjectSummaryListResult); err != nil {
		return AssessmentProjectSummaryOperationsClientListByAssessmentProjectResponse{}, err
	}
	return result, nil
}
