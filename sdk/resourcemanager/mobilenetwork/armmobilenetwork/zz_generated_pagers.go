//go:build go1.16
// +build go1.16

// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

package armmobilenetwork

import (
	"context"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/policy"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/runtime"
	"net/http"
	"reflect"
)

// AttachedDataNetworksClientListByPacketCoreDataPlanePager provides operations for iterating over paged responses.
type AttachedDataNetworksClientListByPacketCoreDataPlanePager struct {
	client    *AttachedDataNetworksClient
	current   AttachedDataNetworksClientListByPacketCoreDataPlaneResponse
	err       error
	requester func(context.Context) (*policy.Request, error)
	advancer  func(context.Context, AttachedDataNetworksClientListByPacketCoreDataPlaneResponse) (*policy.Request, error)
}

// Err returns the last error encountered while paging.
func (p *AttachedDataNetworksClientListByPacketCoreDataPlanePager) Err() error {
	return p.err
}

// NextPage returns true if the pager advanced to the next page.
// Returns false if there are no more pages or an error occurred.
func (p *AttachedDataNetworksClientListByPacketCoreDataPlanePager) NextPage(ctx context.Context) bool {
	var req *policy.Request
	var err error
	if !reflect.ValueOf(p.current).IsZero() {
		if p.current.AttachedDataNetworkListResult.NextLink == nil || len(*p.current.AttachedDataNetworkListResult.NextLink) == 0 {
			return false
		}
		req, err = p.advancer(ctx, p.current)
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		p.err = err
		return false
	}
	resp, err := p.client.pl.Do(req)
	if err != nil {
		p.err = err
		return false
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {
		p.err = runtime.NewResponseError(resp)
		return false
	}
	result, err := p.client.listByPacketCoreDataPlaneHandleResponse(resp)
	if err != nil {
		p.err = err
		return false
	}
	p.current = result
	return true
}

// PageResponse returns the current AttachedDataNetworksClientListByPacketCoreDataPlaneResponse page.
func (p *AttachedDataNetworksClientListByPacketCoreDataPlanePager) PageResponse() AttachedDataNetworksClientListByPacketCoreDataPlaneResponse {
	return p.current
}

// DataNetworksClientListByMobileNetworkPager provides operations for iterating over paged responses.
type DataNetworksClientListByMobileNetworkPager struct {
	client    *DataNetworksClient
	current   DataNetworksClientListByMobileNetworkResponse
	err       error
	requester func(context.Context) (*policy.Request, error)
	advancer  func(context.Context, DataNetworksClientListByMobileNetworkResponse) (*policy.Request, error)
}

// Err returns the last error encountered while paging.
func (p *DataNetworksClientListByMobileNetworkPager) Err() error {
	return p.err
}

// NextPage returns true if the pager advanced to the next page.
// Returns false if there are no more pages or an error occurred.
func (p *DataNetworksClientListByMobileNetworkPager) NextPage(ctx context.Context) bool {
	var req *policy.Request
	var err error
	if !reflect.ValueOf(p.current).IsZero() {
		if p.current.DataNetworkListResult.NextLink == nil || len(*p.current.DataNetworkListResult.NextLink) == 0 {
			return false
		}
		req, err = p.advancer(ctx, p.current)
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		p.err = err
		return false
	}
	resp, err := p.client.pl.Do(req)
	if err != nil {
		p.err = err
		return false
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {
		p.err = runtime.NewResponseError(resp)
		return false
	}
	result, err := p.client.listByMobileNetworkHandleResponse(resp)
	if err != nil {
		p.err = err
		return false
	}
	p.current = result
	return true
}

// PageResponse returns the current DataNetworksClientListByMobileNetworkResponse page.
func (p *DataNetworksClientListByMobileNetworkPager) PageResponse() DataNetworksClientListByMobileNetworkResponse {
	return p.current
}

// MobileNetworksClientListByResourceGroupPager provides operations for iterating over paged responses.
type MobileNetworksClientListByResourceGroupPager struct {
	client    *MobileNetworksClient
	current   MobileNetworksClientListByResourceGroupResponse
	err       error
	requester func(context.Context) (*policy.Request, error)
	advancer  func(context.Context, MobileNetworksClientListByResourceGroupResponse) (*policy.Request, error)
}

// Err returns the last error encountered while paging.
func (p *MobileNetworksClientListByResourceGroupPager) Err() error {
	return p.err
}

// NextPage returns true if the pager advanced to the next page.
// Returns false if there are no more pages or an error occurred.
func (p *MobileNetworksClientListByResourceGroupPager) NextPage(ctx context.Context) bool {
	var req *policy.Request
	var err error
	if !reflect.ValueOf(p.current).IsZero() {
		if p.current.ListResult.NextLink == nil || len(*p.current.ListResult.NextLink) == 0 {
			return false
		}
		req, err = p.advancer(ctx, p.current)
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		p.err = err
		return false
	}
	resp, err := p.client.pl.Do(req)
	if err != nil {
		p.err = err
		return false
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {
		p.err = runtime.NewResponseError(resp)
		return false
	}
	result, err := p.client.listByResourceGroupHandleResponse(resp)
	if err != nil {
		p.err = err
		return false
	}
	p.current = result
	return true
}

// PageResponse returns the current MobileNetworksClientListByResourceGroupResponse page.
func (p *MobileNetworksClientListByResourceGroupPager) PageResponse() MobileNetworksClientListByResourceGroupResponse {
	return p.current
}

// MobileNetworksClientListBySubscriptionPager provides operations for iterating over paged responses.
type MobileNetworksClientListBySubscriptionPager struct {
	client    *MobileNetworksClient
	current   MobileNetworksClientListBySubscriptionResponse
	err       error
	requester func(context.Context) (*policy.Request, error)
	advancer  func(context.Context, MobileNetworksClientListBySubscriptionResponse) (*policy.Request, error)
}

// Err returns the last error encountered while paging.
func (p *MobileNetworksClientListBySubscriptionPager) Err() error {
	return p.err
}

// NextPage returns true if the pager advanced to the next page.
// Returns false if there are no more pages or an error occurred.
func (p *MobileNetworksClientListBySubscriptionPager) NextPage(ctx context.Context) bool {
	var req *policy.Request
	var err error
	if !reflect.ValueOf(p.current).IsZero() {
		if p.current.ListResult.NextLink == nil || len(*p.current.ListResult.NextLink) == 0 {
			return false
		}
		req, err = p.advancer(ctx, p.current)
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		p.err = err
		return false
	}
	resp, err := p.client.pl.Do(req)
	if err != nil {
		p.err = err
		return false
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {
		p.err = runtime.NewResponseError(resp)
		return false
	}
	result, err := p.client.listBySubscriptionHandleResponse(resp)
	if err != nil {
		p.err = err
		return false
	}
	p.current = result
	return true
}

// PageResponse returns the current MobileNetworksClientListBySubscriptionResponse page.
func (p *MobileNetworksClientListBySubscriptionPager) PageResponse() MobileNetworksClientListBySubscriptionResponse {
	return p.current
}

// OperationsClientListPager provides operations for iterating over paged responses.
type OperationsClientListPager struct {
	client    *OperationsClient
	current   OperationsClientListResponse
	err       error
	requester func(context.Context) (*policy.Request, error)
	advancer  func(context.Context, OperationsClientListResponse) (*policy.Request, error)
}

// Err returns the last error encountered while paging.
func (p *OperationsClientListPager) Err() error {
	return p.err
}

// NextPage returns true if the pager advanced to the next page.
// Returns false if there are no more pages or an error occurred.
func (p *OperationsClientListPager) NextPage(ctx context.Context) bool {
	var req *policy.Request
	var err error
	if !reflect.ValueOf(p.current).IsZero() {
		if p.current.OperationList.NextLink == nil || len(*p.current.OperationList.NextLink) == 0 {
			return false
		}
		req, err = p.advancer(ctx, p.current)
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		p.err = err
		return false
	}
	resp, err := p.client.pl.Do(req)
	if err != nil {
		p.err = err
		return false
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {
		p.err = runtime.NewResponseError(resp)
		return false
	}
	result, err := p.client.listHandleResponse(resp)
	if err != nil {
		p.err = err
		return false
	}
	p.current = result
	return true
}

// PageResponse returns the current OperationsClientListResponse page.
func (p *OperationsClientListPager) PageResponse() OperationsClientListResponse {
	return p.current
}

// PacketCoreControlPlanesClientListByResourceGroupPager provides operations for iterating over paged responses.
type PacketCoreControlPlanesClientListByResourceGroupPager struct {
	client    *PacketCoreControlPlanesClient
	current   PacketCoreControlPlanesClientListByResourceGroupResponse
	err       error
	requester func(context.Context) (*policy.Request, error)
	advancer  func(context.Context, PacketCoreControlPlanesClientListByResourceGroupResponse) (*policy.Request, error)
}

// Err returns the last error encountered while paging.
func (p *PacketCoreControlPlanesClientListByResourceGroupPager) Err() error {
	return p.err
}

// NextPage returns true if the pager advanced to the next page.
// Returns false if there are no more pages or an error occurred.
func (p *PacketCoreControlPlanesClientListByResourceGroupPager) NextPage(ctx context.Context) bool {
	var req *policy.Request
	var err error
	if !reflect.ValueOf(p.current).IsZero() {
		if p.current.PacketCoreControlPlaneListResult.NextLink == nil || len(*p.current.PacketCoreControlPlaneListResult.NextLink) == 0 {
			return false
		}
		req, err = p.advancer(ctx, p.current)
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		p.err = err
		return false
	}
	resp, err := p.client.pl.Do(req)
	if err != nil {
		p.err = err
		return false
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {
		p.err = runtime.NewResponseError(resp)
		return false
	}
	result, err := p.client.listByResourceGroupHandleResponse(resp)
	if err != nil {
		p.err = err
		return false
	}
	p.current = result
	return true
}

// PageResponse returns the current PacketCoreControlPlanesClientListByResourceGroupResponse page.
func (p *PacketCoreControlPlanesClientListByResourceGroupPager) PageResponse() PacketCoreControlPlanesClientListByResourceGroupResponse {
	return p.current
}

// PacketCoreControlPlanesClientListBySubscriptionPager provides operations for iterating over paged responses.
type PacketCoreControlPlanesClientListBySubscriptionPager struct {
	client    *PacketCoreControlPlanesClient
	current   PacketCoreControlPlanesClientListBySubscriptionResponse
	err       error
	requester func(context.Context) (*policy.Request, error)
	advancer  func(context.Context, PacketCoreControlPlanesClientListBySubscriptionResponse) (*policy.Request, error)
}

// Err returns the last error encountered while paging.
func (p *PacketCoreControlPlanesClientListBySubscriptionPager) Err() error {
	return p.err
}

// NextPage returns true if the pager advanced to the next page.
// Returns false if there are no more pages or an error occurred.
func (p *PacketCoreControlPlanesClientListBySubscriptionPager) NextPage(ctx context.Context) bool {
	var req *policy.Request
	var err error
	if !reflect.ValueOf(p.current).IsZero() {
		if p.current.PacketCoreControlPlaneListResult.NextLink == nil || len(*p.current.PacketCoreControlPlaneListResult.NextLink) == 0 {
			return false
		}
		req, err = p.advancer(ctx, p.current)
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		p.err = err
		return false
	}
	resp, err := p.client.pl.Do(req)
	if err != nil {
		p.err = err
		return false
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {
		p.err = runtime.NewResponseError(resp)
		return false
	}
	result, err := p.client.listBySubscriptionHandleResponse(resp)
	if err != nil {
		p.err = err
		return false
	}
	p.current = result
	return true
}

// PageResponse returns the current PacketCoreControlPlanesClientListBySubscriptionResponse page.
func (p *PacketCoreControlPlanesClientListBySubscriptionPager) PageResponse() PacketCoreControlPlanesClientListBySubscriptionResponse {
	return p.current
}

// PacketCoreDataPlanesClientListByPacketCoreControlPlanePager provides operations for iterating over paged responses.
type PacketCoreDataPlanesClientListByPacketCoreControlPlanePager struct {
	client    *PacketCoreDataPlanesClient
	current   PacketCoreDataPlanesClientListByPacketCoreControlPlaneResponse
	err       error
	requester func(context.Context) (*policy.Request, error)
	advancer  func(context.Context, PacketCoreDataPlanesClientListByPacketCoreControlPlaneResponse) (*policy.Request, error)
}

// Err returns the last error encountered while paging.
func (p *PacketCoreDataPlanesClientListByPacketCoreControlPlanePager) Err() error {
	return p.err
}

// NextPage returns true if the pager advanced to the next page.
// Returns false if there are no more pages or an error occurred.
func (p *PacketCoreDataPlanesClientListByPacketCoreControlPlanePager) NextPage(ctx context.Context) bool {
	var req *policy.Request
	var err error
	if !reflect.ValueOf(p.current).IsZero() {
		if p.current.PacketCoreDataPlaneListResult.NextLink == nil || len(*p.current.PacketCoreDataPlaneListResult.NextLink) == 0 {
			return false
		}
		req, err = p.advancer(ctx, p.current)
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		p.err = err
		return false
	}
	resp, err := p.client.pl.Do(req)
	if err != nil {
		p.err = err
		return false
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {
		p.err = runtime.NewResponseError(resp)
		return false
	}
	result, err := p.client.listByPacketCoreControlPlaneHandleResponse(resp)
	if err != nil {
		p.err = err
		return false
	}
	p.current = result
	return true
}

// PageResponse returns the current PacketCoreDataPlanesClientListByPacketCoreControlPlaneResponse page.
func (p *PacketCoreDataPlanesClientListByPacketCoreControlPlanePager) PageResponse() PacketCoreDataPlanesClientListByPacketCoreControlPlaneResponse {
	return p.current
}

// ServicesClientListByMobileNetworkPager provides operations for iterating over paged responses.
type ServicesClientListByMobileNetworkPager struct {
	client    *ServicesClient
	current   ServicesClientListByMobileNetworkResponse
	err       error
	requester func(context.Context) (*policy.Request, error)
	advancer  func(context.Context, ServicesClientListByMobileNetworkResponse) (*policy.Request, error)
}

// Err returns the last error encountered while paging.
func (p *ServicesClientListByMobileNetworkPager) Err() error {
	return p.err
}

// NextPage returns true if the pager advanced to the next page.
// Returns false if there are no more pages or an error occurred.
func (p *ServicesClientListByMobileNetworkPager) NextPage(ctx context.Context) bool {
	var req *policy.Request
	var err error
	if !reflect.ValueOf(p.current).IsZero() {
		if p.current.ServiceListResult.NextLink == nil || len(*p.current.ServiceListResult.NextLink) == 0 {
			return false
		}
		req, err = p.advancer(ctx, p.current)
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		p.err = err
		return false
	}
	resp, err := p.client.pl.Do(req)
	if err != nil {
		p.err = err
		return false
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {
		p.err = runtime.NewResponseError(resp)
		return false
	}
	result, err := p.client.listByMobileNetworkHandleResponse(resp)
	if err != nil {
		p.err = err
		return false
	}
	p.current = result
	return true
}

// PageResponse returns the current ServicesClientListByMobileNetworkResponse page.
func (p *ServicesClientListByMobileNetworkPager) PageResponse() ServicesClientListByMobileNetworkResponse {
	return p.current
}

// SimPoliciesClientListByMobileNetworkPager provides operations for iterating over paged responses.
type SimPoliciesClientListByMobileNetworkPager struct {
	client    *SimPoliciesClient
	current   SimPoliciesClientListByMobileNetworkResponse
	err       error
	requester func(context.Context) (*policy.Request, error)
	advancer  func(context.Context, SimPoliciesClientListByMobileNetworkResponse) (*policy.Request, error)
}

// Err returns the last error encountered while paging.
func (p *SimPoliciesClientListByMobileNetworkPager) Err() error {
	return p.err
}

// NextPage returns true if the pager advanced to the next page.
// Returns false if there are no more pages or an error occurred.
func (p *SimPoliciesClientListByMobileNetworkPager) NextPage(ctx context.Context) bool {
	var req *policy.Request
	var err error
	if !reflect.ValueOf(p.current).IsZero() {
		if p.current.SimPolicyListResult.NextLink == nil || len(*p.current.SimPolicyListResult.NextLink) == 0 {
			return false
		}
		req, err = p.advancer(ctx, p.current)
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		p.err = err
		return false
	}
	resp, err := p.client.pl.Do(req)
	if err != nil {
		p.err = err
		return false
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {
		p.err = runtime.NewResponseError(resp)
		return false
	}
	result, err := p.client.listByMobileNetworkHandleResponse(resp)
	if err != nil {
		p.err = err
		return false
	}
	p.current = result
	return true
}

// PageResponse returns the current SimPoliciesClientListByMobileNetworkResponse page.
func (p *SimPoliciesClientListByMobileNetworkPager) PageResponse() SimPoliciesClientListByMobileNetworkResponse {
	return p.current
}

// SimsClientListByResourceGroupPager provides operations for iterating over paged responses.
type SimsClientListByResourceGroupPager struct {
	client    *SimsClient
	current   SimsClientListByResourceGroupResponse
	err       error
	requester func(context.Context) (*policy.Request, error)
	advancer  func(context.Context, SimsClientListByResourceGroupResponse) (*policy.Request, error)
}

// Err returns the last error encountered while paging.
func (p *SimsClientListByResourceGroupPager) Err() error {
	return p.err
}

// NextPage returns true if the pager advanced to the next page.
// Returns false if there are no more pages or an error occurred.
func (p *SimsClientListByResourceGroupPager) NextPage(ctx context.Context) bool {
	var req *policy.Request
	var err error
	if !reflect.ValueOf(p.current).IsZero() {
		if p.current.SimListResult.NextLink == nil || len(*p.current.SimListResult.NextLink) == 0 {
			return false
		}
		req, err = p.advancer(ctx, p.current)
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		p.err = err
		return false
	}
	resp, err := p.client.pl.Do(req)
	if err != nil {
		p.err = err
		return false
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {
		p.err = runtime.NewResponseError(resp)
		return false
	}
	result, err := p.client.listByResourceGroupHandleResponse(resp)
	if err != nil {
		p.err = err
		return false
	}
	p.current = result
	return true
}

// PageResponse returns the current SimsClientListByResourceGroupResponse page.
func (p *SimsClientListByResourceGroupPager) PageResponse() SimsClientListByResourceGroupResponse {
	return p.current
}

// SimsClientListBySubscriptionPager provides operations for iterating over paged responses.
type SimsClientListBySubscriptionPager struct {
	client    *SimsClient
	current   SimsClientListBySubscriptionResponse
	err       error
	requester func(context.Context) (*policy.Request, error)
	advancer  func(context.Context, SimsClientListBySubscriptionResponse) (*policy.Request, error)
}

// Err returns the last error encountered while paging.
func (p *SimsClientListBySubscriptionPager) Err() error {
	return p.err
}

// NextPage returns true if the pager advanced to the next page.
// Returns false if there are no more pages or an error occurred.
func (p *SimsClientListBySubscriptionPager) NextPage(ctx context.Context) bool {
	var req *policy.Request
	var err error
	if !reflect.ValueOf(p.current).IsZero() {
		if p.current.SimListResult.NextLink == nil || len(*p.current.SimListResult.NextLink) == 0 {
			return false
		}
		req, err = p.advancer(ctx, p.current)
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		p.err = err
		return false
	}
	resp, err := p.client.pl.Do(req)
	if err != nil {
		p.err = err
		return false
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {
		p.err = runtime.NewResponseError(resp)
		return false
	}
	result, err := p.client.listBySubscriptionHandleResponse(resp)
	if err != nil {
		p.err = err
		return false
	}
	p.current = result
	return true
}

// PageResponse returns the current SimsClientListBySubscriptionResponse page.
func (p *SimsClientListBySubscriptionPager) PageResponse() SimsClientListBySubscriptionResponse {
	return p.current
}

// SitesClientListByMobileNetworkPager provides operations for iterating over paged responses.
type SitesClientListByMobileNetworkPager struct {
	client    *SitesClient
	current   SitesClientListByMobileNetworkResponse
	err       error
	requester func(context.Context) (*policy.Request, error)
	advancer  func(context.Context, SitesClientListByMobileNetworkResponse) (*policy.Request, error)
}

// Err returns the last error encountered while paging.
func (p *SitesClientListByMobileNetworkPager) Err() error {
	return p.err
}

// NextPage returns true if the pager advanced to the next page.
// Returns false if there are no more pages or an error occurred.
func (p *SitesClientListByMobileNetworkPager) NextPage(ctx context.Context) bool {
	var req *policy.Request
	var err error
	if !reflect.ValueOf(p.current).IsZero() {
		if p.current.SiteListResult.NextLink == nil || len(*p.current.SiteListResult.NextLink) == 0 {
			return false
		}
		req, err = p.advancer(ctx, p.current)
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		p.err = err
		return false
	}
	resp, err := p.client.pl.Do(req)
	if err != nil {
		p.err = err
		return false
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {
		p.err = runtime.NewResponseError(resp)
		return false
	}
	result, err := p.client.listByMobileNetworkHandleResponse(resp)
	if err != nil {
		p.err = err
		return false
	}
	p.current = result
	return true
}

// PageResponse returns the current SitesClientListByMobileNetworkResponse page.
func (p *SitesClientListByMobileNetworkPager) PageResponse() SitesClientListByMobileNetworkResponse {
	return p.current
}

// SlicesClientListByMobileNetworkPager provides operations for iterating over paged responses.
type SlicesClientListByMobileNetworkPager struct {
	client    *SlicesClient
	current   SlicesClientListByMobileNetworkResponse
	err       error
	requester func(context.Context) (*policy.Request, error)
	advancer  func(context.Context, SlicesClientListByMobileNetworkResponse) (*policy.Request, error)
}

// Err returns the last error encountered while paging.
func (p *SlicesClientListByMobileNetworkPager) Err() error {
	return p.err
}

// NextPage returns true if the pager advanced to the next page.
// Returns false if there are no more pages or an error occurred.
func (p *SlicesClientListByMobileNetworkPager) NextPage(ctx context.Context) bool {
	var req *policy.Request
	var err error
	if !reflect.ValueOf(p.current).IsZero() {
		if p.current.SliceListResult.NextLink == nil || len(*p.current.SliceListResult.NextLink) == 0 {
			return false
		}
		req, err = p.advancer(ctx, p.current)
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		p.err = err
		return false
	}
	resp, err := p.client.pl.Do(req)
	if err != nil {
		p.err = err
		return false
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {
		p.err = runtime.NewResponseError(resp)
		return false
	}
	result, err := p.client.listByMobileNetworkHandleResponse(resp)
	if err != nil {
		p.err = err
		return false
	}
	p.current = result
	return true
}

// PageResponse returns the current SlicesClientListByMobileNetworkResponse page.
func (p *SlicesClientListByMobileNetworkPager) PageResponse() SlicesClientListByMobileNetworkResponse {
	return p.current
}
