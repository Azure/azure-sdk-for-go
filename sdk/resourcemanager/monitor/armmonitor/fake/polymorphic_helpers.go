//go:build go1.18
// +build go1.18

// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator. DO NOT EDIT.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

package fake

import (
	"encoding/json"
	"github.com/Azure/azure-sdk-for-go/sdk/resourcemanager/monitor/armmonitor"
)

func unmarshalMetricAlertCriteriaClassification(rawMsg json.RawMessage) (armmonitor.MetricAlertCriteriaClassification, error) {
	if rawMsg == nil {
		return nil, nil
	}
	var m map[string]any
	if err := json.Unmarshal(rawMsg, &m); err != nil {
		return nil, err
	}
	var b armmonitor.MetricAlertCriteriaClassification
	switch m["odata.type"] {
	case string(armmonitor.OdatatypeMicrosoftAzureMonitorMultipleResourceMultipleMetricCriteria):
		b = &armmonitor.MetricAlertMultipleResourceMultipleMetricCriteria{}
	case string(armmonitor.OdatatypeMicrosoftAzureMonitorSingleResourceMultipleMetricCriteria):
		b = &armmonitor.MetricAlertSingleResourceMultipleMetricCriteria{}
	case string(armmonitor.OdatatypeMicrosoftAzureMonitorWebtestLocationAvailabilityCriteria):
		b = &armmonitor.WebtestLocationAvailabilityCriteria{}
	default:
		b = &armmonitor.MetricAlertCriteria{}
	}
	if err := json.Unmarshal(rawMsg, b); err != nil {
		return nil, err
	}
	return b, nil
}

func unmarshalMultiMetricCriteriaClassification(rawMsg json.RawMessage) (armmonitor.MultiMetricCriteriaClassification, error) {
	if rawMsg == nil {
		return nil, nil
	}
	var m map[string]any
	if err := json.Unmarshal(rawMsg, &m); err != nil {
		return nil, err
	}
	var b armmonitor.MultiMetricCriteriaClassification
	switch m["criterionType"] {
	case string(armmonitor.CriterionTypeDynamicThresholdCriterion):
		b = &armmonitor.DynamicMetricCriteria{}
	case string(armmonitor.CriterionTypeStaticThresholdCriterion):
		b = &armmonitor.MetricCriteria{}
	default:
		b = &armmonitor.MultiMetricCriteria{}
	}
	if err := json.Unmarshal(rawMsg, b); err != nil {
		return nil, err
	}
	return b, nil
}

func unmarshalMultiMetricCriteriaClassificationArray(rawMsg json.RawMessage) ([]armmonitor.MultiMetricCriteriaClassification, error) {
	if rawMsg == nil {
		return nil, nil
	}
	var rawMessages []json.RawMessage
	if err := json.Unmarshal(rawMsg, &rawMessages); err != nil {
		return nil, err
	}
	fArray := make([]armmonitor.MultiMetricCriteriaClassification, len(rawMessages))
	for index, rawMessage := range rawMessages {
		f, err := unmarshalMultiMetricCriteriaClassification(rawMessage)
		if err != nil {
			return nil, err
		}
		fArray[index] = f
	}
	return fArray, nil
}

func unmarshalRuleActionClassification(rawMsg json.RawMessage) (armmonitor.RuleActionClassification, error) {
	if rawMsg == nil {
		return nil, nil
	}
	var m map[string]any
	if err := json.Unmarshal(rawMsg, &m); err != nil {
		return nil, err
	}
	var b armmonitor.RuleActionClassification
	switch m["odata.type"] {
	case "Microsoft.Azure.Management.Insights.Models.RuleEmailAction":
		b = &armmonitor.RuleEmailAction{}
	case "Microsoft.Azure.Management.Insights.Models.RuleWebhookAction":
		b = &armmonitor.RuleWebhookAction{}
	default:
		b = &armmonitor.RuleAction{}
	}
	if err := json.Unmarshal(rawMsg, b); err != nil {
		return nil, err
	}
	return b, nil
}

func unmarshalRuleActionClassificationArray(rawMsg json.RawMessage) ([]armmonitor.RuleActionClassification, error) {
	if rawMsg == nil {
		return nil, nil
	}
	var rawMessages []json.RawMessage
	if err := json.Unmarshal(rawMsg, &rawMessages); err != nil {
		return nil, err
	}
	fArray := make([]armmonitor.RuleActionClassification, len(rawMessages))
	for index, rawMessage := range rawMessages {
		f, err := unmarshalRuleActionClassification(rawMessage)
		if err != nil {
			return nil, err
		}
		fArray[index] = f
	}
	return fArray, nil
}

func unmarshalRuleConditionClassification(rawMsg json.RawMessage) (armmonitor.RuleConditionClassification, error) {
	if rawMsg == nil {
		return nil, nil
	}
	var m map[string]any
	if err := json.Unmarshal(rawMsg, &m); err != nil {
		return nil, err
	}
	var b armmonitor.RuleConditionClassification
	switch m["odata.type"] {
	case "Microsoft.Azure.Management.Insights.Models.LocationThresholdRuleCondition":
		b = &armmonitor.LocationThresholdRuleCondition{}
	case "Microsoft.Azure.Management.Insights.Models.ManagementEventRuleCondition":
		b = &armmonitor.ManagementEventRuleCondition{}
	case "Microsoft.Azure.Management.Insights.Models.ThresholdRuleCondition":
		b = &armmonitor.ThresholdRuleCondition{}
	default:
		b = &armmonitor.RuleCondition{}
	}
	if err := json.Unmarshal(rawMsg, b); err != nil {
		return nil, err
	}
	return b, nil
}

func unmarshalRuleDataSourceClassification(rawMsg json.RawMessage) (armmonitor.RuleDataSourceClassification, error) {
	if rawMsg == nil {
		return nil, nil
	}
	var m map[string]any
	if err := json.Unmarshal(rawMsg, &m); err != nil {
		return nil, err
	}
	var b armmonitor.RuleDataSourceClassification
	switch m["odata.type"] {
	case "Microsoft.Azure.Management.Insights.Models.RuleManagementEventDataSource":
		b = &armmonitor.RuleManagementEventDataSource{}
	case "Microsoft.Azure.Management.Insights.Models.RuleMetricDataSource":
		b = &armmonitor.RuleMetricDataSource{}
	default:
		b = &armmonitor.RuleDataSource{}
	}
	if err := json.Unmarshal(rawMsg, b); err != nil {
		return nil, err
	}
	return b, nil
}
