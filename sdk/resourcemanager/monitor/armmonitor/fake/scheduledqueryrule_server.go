// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator. DO NOT EDIT.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

package fake

import (
	"context"
	"errors"
	"fmt"
	azfake "github.com/Azure/azure-sdk-for-go/sdk/azcore/fake"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/fake/server"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/runtime"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/to"
	"github.com/Azure/azure-sdk-for-go/sdk/resourcemanager/monitor/armmonitor"
	"net/http"
	"net/url"
	"regexp"
)

// ScheduledQueryRuleServer is a fake server for instances of the armmonitor.ScheduledQueryRuleClient type.
type ScheduledQueryRuleServer struct {
	// GetNSP is the fake for method ScheduledQueryRuleClient.GetNSP
	// HTTP status codes to indicate success: http.StatusOK
	GetNSP func(ctx context.Context, resourceGroupName string, ruleName string, networkSecurityPerimeterConfigurationName string, options *armmonitor.ScheduledQueryRuleClientGetNSPOptions) (resp azfake.Responder[armmonitor.ScheduledQueryRuleClientGetNSPResponse], errResp azfake.ErrorResponder)

	// NewListNSPPager is the fake for method ScheduledQueryRuleClient.NewListNSPPager
	// HTTP status codes to indicate success: http.StatusOK
	NewListNSPPager func(resourceGroupName string, ruleName string, options *armmonitor.ScheduledQueryRuleClientListNSPOptions) (resp azfake.PagerResponder[armmonitor.ScheduledQueryRuleClientListNSPResponse])

	// BeginReconcileNSP is the fake for method ScheduledQueryRuleClient.BeginReconcileNSP
	// HTTP status codes to indicate success: http.StatusOK, http.StatusAccepted, http.StatusNoContent
	BeginReconcileNSP func(ctx context.Context, resourceGroupName string, ruleName string, networkSecurityPerimeterConfigurationName string, options *armmonitor.ScheduledQueryRuleClientBeginReconcileNSPOptions) (resp azfake.PollerResponder[armmonitor.ScheduledQueryRuleClientReconcileNSPResponse], errResp azfake.ErrorResponder)
}

// NewScheduledQueryRuleServerTransport creates a new instance of ScheduledQueryRuleServerTransport with the provided implementation.
// The returned ScheduledQueryRuleServerTransport instance is connected to an instance of armmonitor.ScheduledQueryRuleClient via the
// azcore.ClientOptions.Transporter field in the client's constructor parameters.
func NewScheduledQueryRuleServerTransport(srv *ScheduledQueryRuleServer) *ScheduledQueryRuleServerTransport {
	return &ScheduledQueryRuleServerTransport{
		srv:               srv,
		newListNSPPager:   newTracker[azfake.PagerResponder[armmonitor.ScheduledQueryRuleClientListNSPResponse]](),
		beginReconcileNSP: newTracker[azfake.PollerResponder[armmonitor.ScheduledQueryRuleClientReconcileNSPResponse]](),
	}
}

// ScheduledQueryRuleServerTransport connects instances of armmonitor.ScheduledQueryRuleClient to instances of ScheduledQueryRuleServer.
// Don't use this type directly, use NewScheduledQueryRuleServerTransport instead.
type ScheduledQueryRuleServerTransport struct {
	srv               *ScheduledQueryRuleServer
	newListNSPPager   *tracker[azfake.PagerResponder[armmonitor.ScheduledQueryRuleClientListNSPResponse]]
	beginReconcileNSP *tracker[azfake.PollerResponder[armmonitor.ScheduledQueryRuleClientReconcileNSPResponse]]
}

// Do implements the policy.Transporter interface for ScheduledQueryRuleServerTransport.
func (s *ScheduledQueryRuleServerTransport) Do(req *http.Request) (*http.Response, error) {
	rawMethod := req.Context().Value(runtime.CtxAPINameKey{})
	method, ok := rawMethod.(string)
	if !ok {
		return nil, nonRetriableError{errors.New("unable to dispatch request, missing value for CtxAPINameKey")}
	}

	return s.dispatchToMethodFake(req, method)
}

func (s *ScheduledQueryRuleServerTransport) dispatchToMethodFake(req *http.Request, method string) (*http.Response, error) {
	resultChan := make(chan result)
	defer close(resultChan)

	go func() {
		var intercepted bool
		var res result
		if scheduledQueryRuleServerTransportInterceptor != nil {
			res.resp, res.err, intercepted = scheduledQueryRuleServerTransportInterceptor.Do(req)
		}
		if !intercepted {
			switch method {
			case "ScheduledQueryRuleClient.GetNSP":
				res.resp, res.err = s.dispatchGetNSP(req)
			case "ScheduledQueryRuleClient.NewListNSPPager":
				res.resp, res.err = s.dispatchNewListNSPPager(req)
			case "ScheduledQueryRuleClient.BeginReconcileNSP":
				res.resp, res.err = s.dispatchBeginReconcileNSP(req)
			default:
				res.err = fmt.Errorf("unhandled API %s", method)
			}

		}
		select {
		case resultChan <- res:
		case <-req.Context().Done():
		}
	}()

	select {
	case <-req.Context().Done():
		return nil, req.Context().Err()
	case res := <-resultChan:
		return res.resp, res.err
	}
}

func (s *ScheduledQueryRuleServerTransport) dispatchGetNSP(req *http.Request) (*http.Response, error) {
	if s.srv.GetNSP == nil {
		return nil, &nonRetriableError{errors.New("fake for method GetNSP not implemented")}
	}
	const regexStr = `/subscriptions/(?P<subscriptionId>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/resourceGroups/(?P<resourceGroupName>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/providers/Microsoft\.Insights/scheduledQueryRules/(?P<ruleName>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/networkSecurityPerimeterConfigurations/(?P<networkSecurityPerimeterConfigurationName>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)`
	regex := regexp.MustCompile(regexStr)
	matches := regex.FindStringSubmatch(req.URL.EscapedPath())
	if matches == nil || len(matches) < 4 {
		return nil, fmt.Errorf("failed to parse path %s", req.URL.Path)
	}
	resourceGroupNameParam, err := url.PathUnescape(matches[regex.SubexpIndex("resourceGroupName")])
	if err != nil {
		return nil, err
	}
	ruleNameParam, err := url.PathUnescape(matches[regex.SubexpIndex("ruleName")])
	if err != nil {
		return nil, err
	}
	networkSecurityPerimeterConfigurationNameParam, err := url.PathUnescape(matches[regex.SubexpIndex("networkSecurityPerimeterConfigurationName")])
	if err != nil {
		return nil, err
	}
	respr, errRespr := s.srv.GetNSP(req.Context(), resourceGroupNameParam, ruleNameParam, networkSecurityPerimeterConfigurationNameParam, nil)
	if respErr := server.GetError(errRespr, req); respErr != nil {
		return nil, respErr
	}
	respContent := server.GetResponseContent(respr)
	if !contains([]int{http.StatusOK}, respContent.HTTPStatus) {
		return nil, &nonRetriableError{fmt.Errorf("unexpected status code %d. acceptable values are http.StatusOK", respContent.HTTPStatus)}
	}
	resp, err := server.MarshalResponseAsJSON(respContent, server.GetResponse(respr).NetworkSecurityPerimeterConfiguration, req)
	if err != nil {
		return nil, err
	}
	return resp, nil
}

func (s *ScheduledQueryRuleServerTransport) dispatchNewListNSPPager(req *http.Request) (*http.Response, error) {
	if s.srv.NewListNSPPager == nil {
		return nil, &nonRetriableError{errors.New("fake for method NewListNSPPager not implemented")}
	}
	newListNSPPager := s.newListNSPPager.get(req)
	if newListNSPPager == nil {
		const regexStr = `/subscriptions/(?P<subscriptionId>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/resourceGroups/(?P<resourceGroupName>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/providers/Microsoft\.Insights/scheduledQueryRules/(?P<ruleName>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/networkSecurityPerimeterConfigurations`
		regex := regexp.MustCompile(regexStr)
		matches := regex.FindStringSubmatch(req.URL.EscapedPath())
		if matches == nil || len(matches) < 3 {
			return nil, fmt.Errorf("failed to parse path %s", req.URL.Path)
		}
		resourceGroupNameParam, err := url.PathUnescape(matches[regex.SubexpIndex("resourceGroupName")])
		if err != nil {
			return nil, err
		}
		ruleNameParam, err := url.PathUnescape(matches[regex.SubexpIndex("ruleName")])
		if err != nil {
			return nil, err
		}
		resp := s.srv.NewListNSPPager(resourceGroupNameParam, ruleNameParam, nil)
		newListNSPPager = &resp
		s.newListNSPPager.add(req, newListNSPPager)
		server.PagerResponderInjectNextLinks(newListNSPPager, req, func(page *armmonitor.ScheduledQueryRuleClientListNSPResponse, createLink func() string) {
			page.NextLink = to.Ptr(createLink())
		})
	}
	resp, err := server.PagerResponderNext(newListNSPPager, req)
	if err != nil {
		return nil, err
	}
	if !contains([]int{http.StatusOK}, resp.StatusCode) {
		s.newListNSPPager.remove(req)
		return nil, &nonRetriableError{fmt.Errorf("unexpected status code %d. acceptable values are http.StatusOK", resp.StatusCode)}
	}
	if !server.PagerResponderMore(newListNSPPager) {
		s.newListNSPPager.remove(req)
	}
	return resp, nil
}

func (s *ScheduledQueryRuleServerTransport) dispatchBeginReconcileNSP(req *http.Request) (*http.Response, error) {
	if s.srv.BeginReconcileNSP == nil {
		return nil, &nonRetriableError{errors.New("fake for method BeginReconcileNSP not implemented")}
	}
	beginReconcileNSP := s.beginReconcileNSP.get(req)
	if beginReconcileNSP == nil {
		const regexStr = `/subscriptions/(?P<subscriptionId>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/resourceGroups/(?P<resourceGroupName>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/providers/Microsoft\.Insights/scheduledQueryRules/(?P<ruleName>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/networkSecurityPerimeterConfigurations/(?P<networkSecurityPerimeterConfigurationName>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/reconcile`
		regex := regexp.MustCompile(regexStr)
		matches := regex.FindStringSubmatch(req.URL.EscapedPath())
		if matches == nil || len(matches) < 4 {
			return nil, fmt.Errorf("failed to parse path %s", req.URL.Path)
		}
		resourceGroupNameParam, err := url.PathUnescape(matches[regex.SubexpIndex("resourceGroupName")])
		if err != nil {
			return nil, err
		}
		ruleNameParam, err := url.PathUnescape(matches[regex.SubexpIndex("ruleName")])
		if err != nil {
			return nil, err
		}
		networkSecurityPerimeterConfigurationNameParam, err := url.PathUnescape(matches[regex.SubexpIndex("networkSecurityPerimeterConfigurationName")])
		if err != nil {
			return nil, err
		}
		respr, errRespr := s.srv.BeginReconcileNSP(req.Context(), resourceGroupNameParam, ruleNameParam, networkSecurityPerimeterConfigurationNameParam, nil)
		if respErr := server.GetError(errRespr, req); respErr != nil {
			return nil, respErr
		}
		beginReconcileNSP = &respr
		s.beginReconcileNSP.add(req, beginReconcileNSP)
	}

	resp, err := server.PollerResponderNext(beginReconcileNSP, req)
	if err != nil {
		return nil, err
	}

	if !contains([]int{http.StatusOK, http.StatusAccepted, http.StatusNoContent}, resp.StatusCode) {
		s.beginReconcileNSP.remove(req)
		return nil, &nonRetriableError{fmt.Errorf("unexpected status code %d. acceptable values are http.StatusOK, http.StatusAccepted, http.StatusNoContent", resp.StatusCode)}
	}
	if !server.PollerResponderMore(beginReconcileNSP) {
		s.beginReconcileNSP.remove(req)
	}

	return resp, nil
}

// set this to conditionally intercept incoming requests to ScheduledQueryRuleServerTransport
var scheduledQueryRuleServerTransportInterceptor interface {
	// Do returns true if the server transport should use the returned response/error
	Do(*http.Request) (*http.Response, error, bool)
}
