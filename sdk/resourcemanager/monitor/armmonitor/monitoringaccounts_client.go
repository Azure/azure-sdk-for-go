//go:build go1.18
// +build go1.18

// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.
// DO NOT EDIT.

package armmonitor

import (
	"context"
	"errors"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/arm"
	armruntime "github.com/Azure/azure-sdk-for-go/sdk/azcore/arm/runtime"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/cloud"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/policy"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/runtime"
	"net/http"
	"net/url"
	"strings"
)

// MonitoringAccountsClient contains the methods for the MonitoringAccounts group.
// Don't use this type directly, use NewMonitoringAccountsClient() instead.
type MonitoringAccountsClient struct {
	host           string
	subscriptionID string
	pl             runtime.Pipeline
}

// NewMonitoringAccountsClient creates a new instance of MonitoringAccountsClient with the specified values.
// subscriptionID - The ID of the target subscription.
// credential - used to authorize requests. Usually a credential from azidentity.
// options - pass nil to accept the default values.
func NewMonitoringAccountsClient(subscriptionID string, credential azcore.TokenCredential, options *arm.ClientOptions) (*MonitoringAccountsClient, error) {
	if options == nil {
		options = &arm.ClientOptions{}
	}
	ep := cloud.AzurePublic.Services[cloud.ResourceManager].Endpoint
	if c, ok := options.Cloud.Services[cloud.ResourceManager]; ok {
		ep = c.Endpoint
	}
	pl, err := armruntime.NewPipeline(moduleName, moduleVersion, credential, runtime.PipelineOptions{}, options)
	if err != nil {
		return nil, err
	}
	client := &MonitoringAccountsClient{
		subscriptionID: subscriptionID,
		host:           ep,
		pl:             pl,
	}
	return client, nil
}

// Create - Create or update a monitoring account
// If the operation fails it returns an *azcore.ResponseError type.
// Generated from API version 2021-06-03-preview
// resourceGroupName - The name of the resource group. The name is case insensitive.
// monitoringAccountName - The name of the monitoring account. The name is case insensitive
// monitoringAccountProperties - Properties that need to be specified to create a new monitoring account
// options - MonitoringAccountsClientCreateOptions contains the optional parameters for the MonitoringAccountsClient.Create
// method.
func (client *MonitoringAccountsClient) Create(ctx context.Context, resourceGroupName string, monitoringAccountName string, monitoringAccountProperties MonitoringAccountResource, options *MonitoringAccountsClientCreateOptions) (MonitoringAccountsClientCreateResponse, error) {
	req, err := client.createCreateRequest(ctx, resourceGroupName, monitoringAccountName, monitoringAccountProperties, options)
	if err != nil {
		return MonitoringAccountsClientCreateResponse{}, err
	}
	resp, err := client.pl.Do(req)
	if err != nil {
		return MonitoringAccountsClientCreateResponse{}, err
	}
	if !runtime.HasStatusCode(resp, http.StatusOK, http.StatusCreated) {
		return MonitoringAccountsClientCreateResponse{}, runtime.NewResponseError(resp)
	}
	return client.createHandleResponse(resp)
}

// createCreateRequest creates the Create request.
func (client *MonitoringAccountsClient) createCreateRequest(ctx context.Context, resourceGroupName string, monitoringAccountName string, monitoringAccountProperties MonitoringAccountResource, options *MonitoringAccountsClientCreateOptions) (*policy.Request, error) {
	urlPath := "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Monitor/accounts/{monitoringAccountName}"
	if client.subscriptionID == "" {
		return nil, errors.New("parameter client.subscriptionID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{subscriptionId}", url.PathEscape(client.subscriptionID))
	if resourceGroupName == "" {
		return nil, errors.New("parameter resourceGroupName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{resourceGroupName}", url.PathEscape(resourceGroupName))
	if monitoringAccountName == "" {
		return nil, errors.New("parameter monitoringAccountName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{monitoringAccountName}", url.PathEscape(monitoringAccountName))
	req, err := runtime.NewRequest(ctx, http.MethodPut, runtime.JoinPaths(client.host, urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("api-version", "2021-06-03-preview")
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header["Accept"] = []string{"application/json"}
	return req, runtime.MarshalAsJSON(req, monitoringAccountProperties)
}

// createHandleResponse handles the Create response.
func (client *MonitoringAccountsClient) createHandleResponse(resp *http.Response) (MonitoringAccountsClientCreateResponse, error) {
	result := MonitoringAccountsClientCreateResponse{}
	if err := runtime.UnmarshalAsJSON(resp, &result.MonitoringAccountResource); err != nil {
		return MonitoringAccountsClientCreateResponse{}, err
	}
	return result, nil
}

// Delete - Delete an monitoring account
// If the operation fails it returns an *azcore.ResponseError type.
// Generated from API version 2021-06-03-preview
// resourceGroupName - The name of the resource group. The name is case insensitive.
// monitoringAccountName - The name of the monitoring account. The name is case insensitive
// options - MonitoringAccountsClientDeleteOptions contains the optional parameters for the MonitoringAccountsClient.Delete
// method.
func (client *MonitoringAccountsClient) Delete(ctx context.Context, resourceGroupName string, monitoringAccountName string, options *MonitoringAccountsClientDeleteOptions) (MonitoringAccountsClientDeleteResponse, error) {
	req, err := client.deleteCreateRequest(ctx, resourceGroupName, monitoringAccountName, options)
	if err != nil {
		return MonitoringAccountsClientDeleteResponse{}, err
	}
	resp, err := client.pl.Do(req)
	if err != nil {
		return MonitoringAccountsClientDeleteResponse{}, err
	}
	if !runtime.HasStatusCode(resp, http.StatusOK, http.StatusNoContent) {
		return MonitoringAccountsClientDeleteResponse{}, runtime.NewResponseError(resp)
	}
	return MonitoringAccountsClientDeleteResponse{}, nil
}

// deleteCreateRequest creates the Delete request.
func (client *MonitoringAccountsClient) deleteCreateRequest(ctx context.Context, resourceGroupName string, monitoringAccountName string, options *MonitoringAccountsClientDeleteOptions) (*policy.Request, error) {
	urlPath := "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Monitor/accounts/{monitoringAccountName}"
	if client.subscriptionID == "" {
		return nil, errors.New("parameter client.subscriptionID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{subscriptionId}", url.PathEscape(client.subscriptionID))
	if resourceGroupName == "" {
		return nil, errors.New("parameter resourceGroupName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{resourceGroupName}", url.PathEscape(resourceGroupName))
	if monitoringAccountName == "" {
		return nil, errors.New("parameter monitoringAccountName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{monitoringAccountName}", url.PathEscape(monitoringAccountName))
	req, err := runtime.NewRequest(ctx, http.MethodDelete, runtime.JoinPaths(client.host, urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("api-version", "2021-06-03-preview")
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header["Accept"] = []string{"application/json"}
	return req, nil
}

// Get - Returns the specific monitoring account
// If the operation fails it returns an *azcore.ResponseError type.
// Generated from API version 2021-06-03-preview
// resourceGroupName - The name of the resource group. The name is case insensitive.
// monitoringAccountName - The name of the monitoring account. The name is case insensitive
// options - MonitoringAccountsClientGetOptions contains the optional parameters for the MonitoringAccountsClient.Get method.
func (client *MonitoringAccountsClient) Get(ctx context.Context, resourceGroupName string, monitoringAccountName string, options *MonitoringAccountsClientGetOptions) (MonitoringAccountsClientGetResponse, error) {
	req, err := client.getCreateRequest(ctx, resourceGroupName, monitoringAccountName, options)
	if err != nil {
		return MonitoringAccountsClientGetResponse{}, err
	}
	resp, err := client.pl.Do(req)
	if err != nil {
		return MonitoringAccountsClientGetResponse{}, err
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {
		return MonitoringAccountsClientGetResponse{}, runtime.NewResponseError(resp)
	}
	return client.getHandleResponse(resp)
}

// getCreateRequest creates the Get request.
func (client *MonitoringAccountsClient) getCreateRequest(ctx context.Context, resourceGroupName string, monitoringAccountName string, options *MonitoringAccountsClientGetOptions) (*policy.Request, error) {
	urlPath := "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Monitor/accounts/{monitoringAccountName}"
	if client.subscriptionID == "" {
		return nil, errors.New("parameter client.subscriptionID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{subscriptionId}", url.PathEscape(client.subscriptionID))
	if resourceGroupName == "" {
		return nil, errors.New("parameter resourceGroupName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{resourceGroupName}", url.PathEscape(resourceGroupName))
	if monitoringAccountName == "" {
		return nil, errors.New("parameter monitoringAccountName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{monitoringAccountName}", url.PathEscape(monitoringAccountName))
	req, err := runtime.NewRequest(ctx, http.MethodGet, runtime.JoinPaths(client.host, urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("api-version", "2021-06-03-preview")
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header["Accept"] = []string{"application/json"}
	return req, nil
}

// getHandleResponse handles the Get response.
func (client *MonitoringAccountsClient) getHandleResponse(resp *http.Response) (MonitoringAccountsClientGetResponse, error) {
	result := MonitoringAccountsClientGetResponse{}
	if err := runtime.UnmarshalAsJSON(resp, &result.MonitoringAccountResource); err != nil {
		return MonitoringAccountsClientGetResponse{}, err
	}
	return result, nil
}

// NewListByResourceGroupPager - Lists all monitoring accounts in the specified resource group
// Generated from API version 2021-06-03-preview
// resourceGroupName - The name of the resource group. The name is case insensitive.
// options - MonitoringAccountsClientListByResourceGroupOptions contains the optional parameters for the MonitoringAccountsClient.ListByResourceGroup
// method.
func (client *MonitoringAccountsClient) NewListByResourceGroupPager(resourceGroupName string, options *MonitoringAccountsClientListByResourceGroupOptions) *runtime.Pager[MonitoringAccountsClientListByResourceGroupResponse] {
	return runtime.NewPager(runtime.PagingHandler[MonitoringAccountsClientListByResourceGroupResponse]{
		More: func(page MonitoringAccountsClientListByResourceGroupResponse) bool {
			return page.NextLink != nil && len(*page.NextLink) > 0
		},
		Fetcher: func(ctx context.Context, page *MonitoringAccountsClientListByResourceGroupResponse) (MonitoringAccountsClientListByResourceGroupResponse, error) {
			var req *policy.Request
			var err error
			if page == nil {
				req, err = client.listByResourceGroupCreateRequest(ctx, resourceGroupName, options)
			} else {
				req, err = runtime.NewRequest(ctx, http.MethodGet, *page.NextLink)
			}
			if err != nil {
				return MonitoringAccountsClientListByResourceGroupResponse{}, err
			}
			resp, err := client.pl.Do(req)
			if err != nil {
				return MonitoringAccountsClientListByResourceGroupResponse{}, err
			}
			if !runtime.HasStatusCode(resp, http.StatusOK) {
				return MonitoringAccountsClientListByResourceGroupResponse{}, runtime.NewResponseError(resp)
			}
			return client.listByResourceGroupHandleResponse(resp)
		},
	})
}

// listByResourceGroupCreateRequest creates the ListByResourceGroup request.
func (client *MonitoringAccountsClient) listByResourceGroupCreateRequest(ctx context.Context, resourceGroupName string, options *MonitoringAccountsClientListByResourceGroupOptions) (*policy.Request, error) {
	urlPath := "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Monitor/accounts"
	if client.subscriptionID == "" {
		return nil, errors.New("parameter client.subscriptionID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{subscriptionId}", url.PathEscape(client.subscriptionID))
	if resourceGroupName == "" {
		return nil, errors.New("parameter resourceGroupName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{resourceGroupName}", url.PathEscape(resourceGroupName))
	req, err := runtime.NewRequest(ctx, http.MethodGet, runtime.JoinPaths(client.host, urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("api-version", "2021-06-03-preview")
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header["Accept"] = []string{"application/json"}
	return req, nil
}

// listByResourceGroupHandleResponse handles the ListByResourceGroup response.
func (client *MonitoringAccountsClient) listByResourceGroupHandleResponse(resp *http.Response) (MonitoringAccountsClientListByResourceGroupResponse, error) {
	result := MonitoringAccountsClientListByResourceGroupResponse{}
	if err := runtime.UnmarshalAsJSON(resp, &result.MonitoringAccountResourceListResult); err != nil {
		return MonitoringAccountsClientListByResourceGroupResponse{}, err
	}
	return result, nil
}

// NewListBySubscriptionPager - Lists all monitoring accounts in the specified subscription
// Generated from API version 2021-06-03-preview
// options - MonitoringAccountsClientListBySubscriptionOptions contains the optional parameters for the MonitoringAccountsClient.ListBySubscription
// method.
func (client *MonitoringAccountsClient) NewListBySubscriptionPager(options *MonitoringAccountsClientListBySubscriptionOptions) *runtime.Pager[MonitoringAccountsClientListBySubscriptionResponse] {
	return runtime.NewPager(runtime.PagingHandler[MonitoringAccountsClientListBySubscriptionResponse]{
		More: func(page MonitoringAccountsClientListBySubscriptionResponse) bool {
			return page.NextLink != nil && len(*page.NextLink) > 0
		},
		Fetcher: func(ctx context.Context, page *MonitoringAccountsClientListBySubscriptionResponse) (MonitoringAccountsClientListBySubscriptionResponse, error) {
			var req *policy.Request
			var err error
			if page == nil {
				req, err = client.listBySubscriptionCreateRequest(ctx, options)
			} else {
				req, err = runtime.NewRequest(ctx, http.MethodGet, *page.NextLink)
			}
			if err != nil {
				return MonitoringAccountsClientListBySubscriptionResponse{}, err
			}
			resp, err := client.pl.Do(req)
			if err != nil {
				return MonitoringAccountsClientListBySubscriptionResponse{}, err
			}
			if !runtime.HasStatusCode(resp, http.StatusOK) {
				return MonitoringAccountsClientListBySubscriptionResponse{}, runtime.NewResponseError(resp)
			}
			return client.listBySubscriptionHandleResponse(resp)
		},
	})
}

// listBySubscriptionCreateRequest creates the ListBySubscription request.
func (client *MonitoringAccountsClient) listBySubscriptionCreateRequest(ctx context.Context, options *MonitoringAccountsClientListBySubscriptionOptions) (*policy.Request, error) {
	urlPath := "/subscriptions/{subscriptionId}/providers/Microsoft.Monitor/accounts"
	if client.subscriptionID == "" {
		return nil, errors.New("parameter client.subscriptionID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{subscriptionId}", url.PathEscape(client.subscriptionID))
	req, err := runtime.NewRequest(ctx, http.MethodGet, runtime.JoinPaths(client.host, urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("api-version", "2021-06-03-preview")
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header["Accept"] = []string{"application/json"}
	return req, nil
}

// listBySubscriptionHandleResponse handles the ListBySubscription response.
func (client *MonitoringAccountsClient) listBySubscriptionHandleResponse(resp *http.Response) (MonitoringAccountsClientListBySubscriptionResponse, error) {
	result := MonitoringAccountsClientListBySubscriptionResponse{}
	if err := runtime.UnmarshalAsJSON(resp, &result.MonitoringAccountResourceListResult); err != nil {
		return MonitoringAccountsClientListBySubscriptionResponse{}, err
	}
	return result, nil
}

// Update - Updates part of a monitoring account
// If the operation fails it returns an *azcore.ResponseError type.
// Generated from API version 2021-06-03-preview
// resourceGroupName - The name of the resource group. The name is case insensitive.
// monitoringAccountName - The name of the monitoring account. The name is case insensitive
// options - MonitoringAccountsClientUpdateOptions contains the optional parameters for the MonitoringAccountsClient.Update
// method.
func (client *MonitoringAccountsClient) Update(ctx context.Context, resourceGroupName string, monitoringAccountName string, options *MonitoringAccountsClientUpdateOptions) (MonitoringAccountsClientUpdateResponse, error) {
	req, err := client.updateCreateRequest(ctx, resourceGroupName, monitoringAccountName, options)
	if err != nil {
		return MonitoringAccountsClientUpdateResponse{}, err
	}
	resp, err := client.pl.Do(req)
	if err != nil {
		return MonitoringAccountsClientUpdateResponse{}, err
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {
		return MonitoringAccountsClientUpdateResponse{}, runtime.NewResponseError(resp)
	}
	return client.updateHandleResponse(resp)
}

// updateCreateRequest creates the Update request.
func (client *MonitoringAccountsClient) updateCreateRequest(ctx context.Context, resourceGroupName string, monitoringAccountName string, options *MonitoringAccountsClientUpdateOptions) (*policy.Request, error) {
	urlPath := "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Monitor/accounts/{monitoringAccountName}"
	if client.subscriptionID == "" {
		return nil, errors.New("parameter client.subscriptionID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{subscriptionId}", url.PathEscape(client.subscriptionID))
	if resourceGroupName == "" {
		return nil, errors.New("parameter resourceGroupName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{resourceGroupName}", url.PathEscape(resourceGroupName))
	if monitoringAccountName == "" {
		return nil, errors.New("parameter monitoringAccountName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{monitoringAccountName}", url.PathEscape(monitoringAccountName))
	req, err := runtime.NewRequest(ctx, http.MethodPatch, runtime.JoinPaths(client.host, urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("api-version", "2021-06-03-preview")
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header["Accept"] = []string{"application/json"}
	if options != nil && options.MonitoringAccountProperties != nil {
		return req, runtime.MarshalAsJSON(req, *options.MonitoringAccountProperties)
	}
	return req, nil
}

// updateHandleResponse handles the Update response.
func (client *MonitoringAccountsClient) updateHandleResponse(resp *http.Response) (MonitoringAccountsClientUpdateResponse, error) {
	result := MonitoringAccountsClientUpdateResponse{}
	if err := runtime.UnmarshalAsJSON(resp, &result.MonitoringAccountResource); err != nil {
		return MonitoringAccountsClientUpdateResponse{}, err
	}
	return result, nil
}
