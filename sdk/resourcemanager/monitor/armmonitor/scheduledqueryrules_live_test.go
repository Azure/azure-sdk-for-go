//go:build go1.18
// +build go1.18

// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

package armmonitor_test

import (
	"context"
	"testing"

	"github.com/Azure/azure-sdk-for-go/sdk/azcore"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/arm"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/to"
	"github.com/Azure/azure-sdk-for-go/sdk/resourcemanager/internal/testutil"
	"github.com/Azure/azure-sdk-for-go/sdk/resourcemanager/monitor/armmonitor"
	"github.com/Azure/azure-sdk-for-go/sdk/resourcemanager/resources/armresources"
	"github.com/stretchr/testify/suite"
)

type ScheduledqueryrulesTestSuite struct {
	suite.Suite

	ctx               context.Context
	cred              azcore.TokenCredential
	options           *arm.ClientOptions
	ruleName          string
	workspaceId       string
	location          string
	resourceGroupName string
	subscriptionId    string
}

func (testsuite *ScheduledqueryrulesTestSuite) SetupSuite() {
	testutil.StartRecording(testsuite.T(), "sdk/resourcemanager/monitor/armmonitor/testdata")
	testsuite.ctx = context.Background()
	testsuite.cred, testsuite.options = testutil.GetCredAndClientOptions(testsuite.T())
	testsuite.ruleName = testutil.GenerateAlphaNumericID(testsuite.T(), "schedulequeryrulena", 6)
	testsuite.location = testutil.GetEnv("LOCATION", "eastus")
	testsuite.resourceGroupName = testutil.GetEnv("RESOURCE_GROUP_NAME", "scenarioTestTempGroup")
	testsuite.subscriptionId = testutil.GetEnv("AZURE_SUBSCRIPTION_ID", "00000000-0000-0000-0000-000000000000")

	resourceGroup, _, err := testutil.CreateResourceGroup(testsuite.ctx, testsuite.subscriptionId, testsuite.cred, testsuite.options, testsuite.location)
	testsuite.Require().NoError(err)
	testsuite.resourceGroupName = *resourceGroup.Name
	testsuite.Prepare()
}

func (testsuite *ScheduledqueryrulesTestSuite) TearDownSuite() {
	_, err := testutil.DeleteResourceGroup(testsuite.ctx, testsuite.subscriptionId, testsuite.cred, testsuite.options, testsuite.resourceGroupName)
	testsuite.Require().NoError(err)
	testutil.StopRecording(testsuite.T())
}

func TestScheduledqueryrulesTestSuite(t *testing.T) {
	suite.Run(t, new(ScheduledqueryrulesTestSuite))
}

func (testsuite *ScheduledqueryrulesTestSuite) Prepare() {
	var err error
	// From step WorkSpace_Create
	template := map[string]interface{}{
		"$schema":        "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
		"contentVersion": "1.0.0.0",
		"outputs": map[string]interface{}{
			"workspaceId": map[string]interface{}{
				"type":  "string",
				"value": "[resourceId('Microsoft.OperationalInsights/workspaces','workspacena')]",
			},
		},
		"parameters": map[string]interface{}{
			"location": map[string]interface{}{
				"type":         "string",
				"defaultValue": "$(location)",
			},
		},
		"resources": []interface{}{
			map[string]interface{}{
				"name":       "workspacena",
				"type":       "Microsoft.OperationalInsights/workspaces",
				"apiVersion": "2021-12-01-preview",
				"location":   "[parameters('location')]",
				"properties": map[string]interface{}{
					"retentionInDays": float64(30),
					"sku": map[string]interface{}{
						"name": "PerNode",
					},
				},
				"tags": map[string]interface{}{
					"tag1": "value1",
				},
			},
		},
	}
	params := map[string]interface{}{
		"location": map[string]interface{}{"value": testsuite.location},
	}
	deployment := armresources.Deployment{
		Properties: &armresources.DeploymentProperties{
			Template:   template,
			Parameters: params,
			Mode:       to.Ptr(armresources.DeploymentModeIncremental),
		},
	}
	deploymentExtend, err := testutil.CreateDeployment(testsuite.ctx, testsuite.subscriptionId, testsuite.cred, testsuite.options, testsuite.resourceGroupName, "WorkSpace_Create", &deployment)
	testsuite.Require().NoError(err)
	testsuite.workspaceId = deploymentExtend.Properties.Outputs.(map[string]interface{})["workspaceId"].(map[string]interface{})["value"].(string)
}

// Microsoft.Insights/scheduledQueryRules
func (testsuite *ScheduledqueryrulesTestSuite) TestScheduledqueryrule() {
	var err error
	// From step ScheduledQueryRules_Create
	scheduledQueryRulesClient, err := armmonitor.NewScheduledQueryRulesClient(testsuite.subscriptionId, testsuite.cred, testsuite.options)
	testsuite.Require().NoError(err)
	_, err = scheduledQueryRulesClient.CreateOrUpdate(testsuite.ctx, testsuite.resourceGroupName, testsuite.ruleName, armmonitor.LogSearchRuleResource{
		Location: to.Ptr(testsuite.location),
		Properties: &armmonitor.LogSearchRule{
			Description: to.Ptr("log search rule description"),
			Action: &armmonitor.AlertingAction{
				Severity: to.Ptr(armmonitor.AlertSeverityOne),
				Trigger: &armmonitor.TriggerCondition{
					Threshold:         to.Ptr[float64](3),
					ThresholdOperator: to.Ptr(armmonitor.ConditionalOperatorGreaterThan),
					MetricTrigger: &armmonitor.LogMetricTrigger{
						MetricColumn:      to.Ptr("Computer"),
						MetricTriggerType: to.Ptr(armmonitor.MetricTriggerTypeConsecutive),
						Threshold:         to.Ptr[float64](5),
						ThresholdOperator: to.Ptr(armmonitor.ConditionalOperatorGreaterThan),
					},
				},
			},
			Enabled: to.Ptr(armmonitor.Enabled("true")),
			Schedule: &armmonitor.Schedule{
				FrequencyInMinutes:  to.Ptr[int32](15),
				TimeWindowInMinutes: to.Ptr[int32](15),
			},
			Source: &armmonitor.Source{
				DataSourceID: to.Ptr(testsuite.workspaceId),
				Query:        to.Ptr("Heartbeat | summarize AggregatedValue = count() by bin(TimeGenerated, 5m)"),
				QueryType:    to.Ptr(armmonitor.QueryTypeResultCount),
			},
		},
	}, nil)
	testsuite.Require().NoError(err)

	// From step ScheduledQueryRules_ListBySubscription
	scheduledQueryRulesClientNewListBySubscriptionPager := scheduledQueryRulesClient.NewListBySubscriptionPager(&armmonitor.ScheduledQueryRulesClientListBySubscriptionOptions{Filter: nil})
	for scheduledQueryRulesClientNewListBySubscriptionPager.More() {
		_, err := scheduledQueryRulesClientNewListBySubscriptionPager.NextPage(testsuite.ctx)
		testsuite.Require().NoError(err)
		break
	}

	// From step ScheduledQueryRules_ListByResourceGroup
	scheduledQueryRulesClientNewListByResourceGroupPager := scheduledQueryRulesClient.NewListByResourceGroupPager(testsuite.resourceGroupName, &armmonitor.ScheduledQueryRulesClientListByResourceGroupOptions{Filter: nil})
	for scheduledQueryRulesClientNewListByResourceGroupPager.More() {
		_, err := scheduledQueryRulesClientNewListByResourceGroupPager.NextPage(testsuite.ctx)
		testsuite.Require().NoError(err)
		break
	}

	// From step ScheduledQueryRules_Get
	_, err = scheduledQueryRulesClient.Get(testsuite.ctx, testsuite.resourceGroupName, testsuite.ruleName, nil)
	testsuite.Require().NoError(err)

	// From step ScheduledQueryRules_Update
	_, err = scheduledQueryRulesClient.Update(testsuite.ctx, testsuite.resourceGroupName, testsuite.ruleName, armmonitor.LogSearchRuleResourcePatch{
		Properties: &armmonitor.LogSearchRulePatch{
			Enabled: to.Ptr(armmonitor.EnabledTrue),
		},
	}, nil)
	testsuite.Require().NoError(err)

	// From step ScheduledQueryRules_Delete
	_, err = scheduledQueryRulesClient.Delete(testsuite.ctx, testsuite.resourceGroupName, testsuite.ruleName, nil)
	testsuite.Require().NoError(err)
}
