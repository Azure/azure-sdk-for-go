//go:build go1.16
// +build go1.16

// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

package armmysql

import (
	"context"
	"net/http"
	"time"

	armruntime "github.com/Azure/azure-sdk-for-go/sdk/azcore/arm/runtime"
)

// AdvisorsGetResponse contains the response from method Advisors.Get.
type AdvisorsGetResponse struct {
	AdvisorsGetResult
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// AdvisorsGetResult contains the result from method Advisors.Get.
type AdvisorsGetResult struct {
	Advisor
}

// AdvisorsListByServerResponse contains the response from method Advisors.ListByServer.
type AdvisorsListByServerResponse struct {
	AdvisorsListByServerResult
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// AdvisorsListByServerResult contains the result from method Advisors.ListByServer.
type AdvisorsListByServerResult struct {
	AdvisorsResultList
}

// CheckNameAvailabilityExecuteResponse contains the response from method CheckNameAvailability.Execute.
type CheckNameAvailabilityExecuteResponse struct {
	CheckNameAvailabilityExecuteResult
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// CheckNameAvailabilityExecuteResult contains the result from method CheckNameAvailability.Execute.
type CheckNameAvailabilityExecuteResult struct {
	NameAvailability
}

// ConfigurationsCreateOrUpdatePollerResponse contains the response from method Configurations.CreateOrUpdate.
type ConfigurationsCreateOrUpdatePollerResponse struct {
	// Poller contains an initialized poller.
	Poller *ConfigurationsCreateOrUpdatePoller

	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// PollUntilDone will poll the service endpoint until a terminal state is reached or an error is received.
func (l ConfigurationsCreateOrUpdatePollerResponse) PollUntilDone(ctx context.Context, freq time.Duration) (ConfigurationsCreateOrUpdateResponse, error) {
	respType := ConfigurationsCreateOrUpdateResponse{}
	resp, err := l.Poller.pt.PollUntilDone(ctx, freq, &respType.Configuration)
	if err != nil {
		return respType, err
	}
	respType.RawResponse = resp
	return respType, nil
}

// Resume rehydrates a ConfigurationsCreateOrUpdatePollerResponse from the provided client and resume token.
func (l *ConfigurationsCreateOrUpdatePollerResponse) Resume(ctx context.Context, client *ConfigurationsClient, token string) error {
	pt, err := armruntime.NewPollerFromResumeToken("ConfigurationsClient.CreateOrUpdate", token, client.pl, client.createOrUpdateHandleError)
	if err != nil {
		return err
	}
	poller := &ConfigurationsCreateOrUpdatePoller{
		pt: pt,
	}
	resp, err := poller.Poll(ctx)
	if err != nil {
		return err
	}
	l.Poller = poller
	l.RawResponse = resp
	return nil
}

// ConfigurationsCreateOrUpdateResponse contains the response from method Configurations.CreateOrUpdate.
type ConfigurationsCreateOrUpdateResponse struct {
	ConfigurationsCreateOrUpdateResult
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// ConfigurationsCreateOrUpdateResult contains the result from method Configurations.CreateOrUpdate.
type ConfigurationsCreateOrUpdateResult struct {
	Configuration
}

// ConfigurationsGetResponse contains the response from method Configurations.Get.
type ConfigurationsGetResponse struct {
	ConfigurationsGetResult
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// ConfigurationsGetResult contains the result from method Configurations.Get.
type ConfigurationsGetResult struct {
	Configuration
}

// ConfigurationsListByServerResponse contains the response from method Configurations.ListByServer.
type ConfigurationsListByServerResponse struct {
	ConfigurationsListByServerResult
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// ConfigurationsListByServerResult contains the result from method Configurations.ListByServer.
type ConfigurationsListByServerResult struct {
	ConfigurationListResult
}

// DatabasesCreateOrUpdatePollerResponse contains the response from method Databases.CreateOrUpdate.
type DatabasesCreateOrUpdatePollerResponse struct {
	// Poller contains an initialized poller.
	Poller *DatabasesCreateOrUpdatePoller

	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// PollUntilDone will poll the service endpoint until a terminal state is reached or an error is received.
func (l DatabasesCreateOrUpdatePollerResponse) PollUntilDone(ctx context.Context, freq time.Duration) (DatabasesCreateOrUpdateResponse, error) {
	respType := DatabasesCreateOrUpdateResponse{}
	resp, err := l.Poller.pt.PollUntilDone(ctx, freq, &respType.Database)
	if err != nil {
		return respType, err
	}
	respType.RawResponse = resp
	return respType, nil
}

// Resume rehydrates a DatabasesCreateOrUpdatePollerResponse from the provided client and resume token.
func (l *DatabasesCreateOrUpdatePollerResponse) Resume(ctx context.Context, client *DatabasesClient, token string) error {
	pt, err := armruntime.NewPollerFromResumeToken("DatabasesClient.CreateOrUpdate", token, client.pl, client.createOrUpdateHandleError)
	if err != nil {
		return err
	}
	poller := &DatabasesCreateOrUpdatePoller{
		pt: pt,
	}
	resp, err := poller.Poll(ctx)
	if err != nil {
		return err
	}
	l.Poller = poller
	l.RawResponse = resp
	return nil
}

// DatabasesCreateOrUpdateResponse contains the response from method Databases.CreateOrUpdate.
type DatabasesCreateOrUpdateResponse struct {
	DatabasesCreateOrUpdateResult
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// DatabasesCreateOrUpdateResult contains the result from method Databases.CreateOrUpdate.
type DatabasesCreateOrUpdateResult struct {
	Database
}

// DatabasesDeletePollerResponse contains the response from method Databases.Delete.
type DatabasesDeletePollerResponse struct {
	// Poller contains an initialized poller.
	Poller *DatabasesDeletePoller

	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// PollUntilDone will poll the service endpoint until a terminal state is reached or an error is received.
func (l DatabasesDeletePollerResponse) PollUntilDone(ctx context.Context, freq time.Duration) (DatabasesDeleteResponse, error) {
	respType := DatabasesDeleteResponse{}
	resp, err := l.Poller.pt.PollUntilDone(ctx, freq, nil)
	if err != nil {
		return respType, err
	}
	respType.RawResponse = resp
	return respType, nil
}

// Resume rehydrates a DatabasesDeletePollerResponse from the provided client and resume token.
func (l *DatabasesDeletePollerResponse) Resume(ctx context.Context, client *DatabasesClient, token string) error {
	pt, err := armruntime.NewPollerFromResumeToken("DatabasesClient.Delete", token, client.pl, client.deleteHandleError)
	if err != nil {
		return err
	}
	poller := &DatabasesDeletePoller{
		pt: pt,
	}
	resp, err := poller.Poll(ctx)
	if err != nil {
		return err
	}
	l.Poller = poller
	l.RawResponse = resp
	return nil
}

// DatabasesDeleteResponse contains the response from method Databases.Delete.
type DatabasesDeleteResponse struct {
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// DatabasesGetResponse contains the response from method Databases.Get.
type DatabasesGetResponse struct {
	DatabasesGetResult
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// DatabasesGetResult contains the result from method Databases.Get.
type DatabasesGetResult struct {
	Database
}

// DatabasesListByServerResponse contains the response from method Databases.ListByServer.
type DatabasesListByServerResponse struct {
	DatabasesListByServerResult
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// DatabasesListByServerResult contains the result from method Databases.ListByServer.
type DatabasesListByServerResult struct {
	DatabaseListResult
}

// FirewallRulesCreateOrUpdatePollerResponse contains the response from method FirewallRules.CreateOrUpdate.
type FirewallRulesCreateOrUpdatePollerResponse struct {
	// Poller contains an initialized poller.
	Poller *FirewallRulesCreateOrUpdatePoller

	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// PollUntilDone will poll the service endpoint until a terminal state is reached or an error is received.
func (l FirewallRulesCreateOrUpdatePollerResponse) PollUntilDone(ctx context.Context, freq time.Duration) (FirewallRulesCreateOrUpdateResponse, error) {
	respType := FirewallRulesCreateOrUpdateResponse{}
	resp, err := l.Poller.pt.PollUntilDone(ctx, freq, &respType.FirewallRule)
	if err != nil {
		return respType, err
	}
	respType.RawResponse = resp
	return respType, nil
}

// Resume rehydrates a FirewallRulesCreateOrUpdatePollerResponse from the provided client and resume token.
func (l *FirewallRulesCreateOrUpdatePollerResponse) Resume(ctx context.Context, client *FirewallRulesClient, token string) error {
	pt, err := armruntime.NewPollerFromResumeToken("FirewallRulesClient.CreateOrUpdate", token, client.pl, client.createOrUpdateHandleError)
	if err != nil {
		return err
	}
	poller := &FirewallRulesCreateOrUpdatePoller{
		pt: pt,
	}
	resp, err := poller.Poll(ctx)
	if err != nil {
		return err
	}
	l.Poller = poller
	l.RawResponse = resp
	return nil
}

// FirewallRulesCreateOrUpdateResponse contains the response from method FirewallRules.CreateOrUpdate.
type FirewallRulesCreateOrUpdateResponse struct {
	FirewallRulesCreateOrUpdateResult
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// FirewallRulesCreateOrUpdateResult contains the result from method FirewallRules.CreateOrUpdate.
type FirewallRulesCreateOrUpdateResult struct {
	FirewallRule
}

// FirewallRulesDeletePollerResponse contains the response from method FirewallRules.Delete.
type FirewallRulesDeletePollerResponse struct {
	// Poller contains an initialized poller.
	Poller *FirewallRulesDeletePoller

	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// PollUntilDone will poll the service endpoint until a terminal state is reached or an error is received.
func (l FirewallRulesDeletePollerResponse) PollUntilDone(ctx context.Context, freq time.Duration) (FirewallRulesDeleteResponse, error) {
	respType := FirewallRulesDeleteResponse{}
	resp, err := l.Poller.pt.PollUntilDone(ctx, freq, nil)
	if err != nil {
		return respType, err
	}
	respType.RawResponse = resp
	return respType, nil
}

// Resume rehydrates a FirewallRulesDeletePollerResponse from the provided client and resume token.
func (l *FirewallRulesDeletePollerResponse) Resume(ctx context.Context, client *FirewallRulesClient, token string) error {
	pt, err := armruntime.NewPollerFromResumeToken("FirewallRulesClient.Delete", token, client.pl, client.deleteHandleError)
	if err != nil {
		return err
	}
	poller := &FirewallRulesDeletePoller{
		pt: pt,
	}
	resp, err := poller.Poll(ctx)
	if err != nil {
		return err
	}
	l.Poller = poller
	l.RawResponse = resp
	return nil
}

// FirewallRulesDeleteResponse contains the response from method FirewallRules.Delete.
type FirewallRulesDeleteResponse struct {
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// FirewallRulesGetResponse contains the response from method FirewallRules.Get.
type FirewallRulesGetResponse struct {
	FirewallRulesGetResult
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// FirewallRulesGetResult contains the result from method FirewallRules.Get.
type FirewallRulesGetResult struct {
	FirewallRule
}

// FirewallRulesListByServerResponse contains the response from method FirewallRules.ListByServer.
type FirewallRulesListByServerResponse struct {
	FirewallRulesListByServerResult
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// FirewallRulesListByServerResult contains the result from method FirewallRules.ListByServer.
type FirewallRulesListByServerResult struct {
	FirewallRuleListResult
}

// LocationBasedPerformanceTierListResponse contains the response from method LocationBasedPerformanceTier.List.
type LocationBasedPerformanceTierListResponse struct {
	LocationBasedPerformanceTierListResult
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// LocationBasedPerformanceTierListResult contains the result from method LocationBasedPerformanceTier.List.
type LocationBasedPerformanceTierListResult struct {
	PerformanceTierListResult
}

// LocationBasedRecommendedActionSessionsOperationStatusGetResponse contains the response from method LocationBasedRecommendedActionSessionsOperationStatus.Get.
type LocationBasedRecommendedActionSessionsOperationStatusGetResponse struct {
	LocationBasedRecommendedActionSessionsOperationStatusGetResult
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// LocationBasedRecommendedActionSessionsOperationStatusGetResult contains the result from method LocationBasedRecommendedActionSessionsOperationStatus.Get.
type LocationBasedRecommendedActionSessionsOperationStatusGetResult struct {
	RecommendedActionSessionsOperationStatus
}

// LocationBasedRecommendedActionSessionsResultListResponse contains the response from method LocationBasedRecommendedActionSessionsResult.List.
type LocationBasedRecommendedActionSessionsResultListResponse struct {
	LocationBasedRecommendedActionSessionsResultListResult
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// LocationBasedRecommendedActionSessionsResultListResult contains the result from method LocationBasedRecommendedActionSessionsResult.List.
type LocationBasedRecommendedActionSessionsResultListResult struct {
	RecommendationActionsResultList
}

// LogFilesListByServerResponse contains the response from method LogFiles.ListByServer.
type LogFilesListByServerResponse struct {
	LogFilesListByServerResult
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// LogFilesListByServerResult contains the result from method LogFiles.ListByServer.
type LogFilesListByServerResult struct {
	LogFileListResult
}

// MySQLManagementClientCreateRecommendedActionSessionPollerResponse contains the response from method MySQLManagementClient.CreateRecommendedActionSession.
type MySQLManagementClientCreateRecommendedActionSessionPollerResponse struct {
	// Poller contains an initialized poller.
	Poller *MySQLManagementClientCreateRecommendedActionSessionPoller

	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// PollUntilDone will poll the service endpoint until a terminal state is reached or an error is received.
func (l MySQLManagementClientCreateRecommendedActionSessionPollerResponse) PollUntilDone(ctx context.Context, freq time.Duration) (MySQLManagementClientCreateRecommendedActionSessionResponse, error) {
	respType := MySQLManagementClientCreateRecommendedActionSessionResponse{}
	resp, err := l.Poller.pt.PollUntilDone(ctx, freq, nil)
	if err != nil {
		return respType, err
	}
	respType.RawResponse = resp
	return respType, nil
}

// Resume rehydrates a MySQLManagementClientCreateRecommendedActionSessionPollerResponse from the provided client and resume token.
func (l *MySQLManagementClientCreateRecommendedActionSessionPollerResponse) Resume(ctx context.Context, client *MySQLManagementClient, token string) error {
	pt, err := armruntime.NewPollerFromResumeToken("MySQLManagementClient.CreateRecommendedActionSession", token, client.pl, client.createRecommendedActionSessionHandleError)
	if err != nil {
		return err
	}
	poller := &MySQLManagementClientCreateRecommendedActionSessionPoller{
		pt: pt,
	}
	resp, err := poller.Poll(ctx)
	if err != nil {
		return err
	}
	l.Poller = poller
	l.RawResponse = resp
	return nil
}

// MySQLManagementClientCreateRecommendedActionSessionResponse contains the response from method MySQLManagementClient.CreateRecommendedActionSession.
type MySQLManagementClientCreateRecommendedActionSessionResponse struct {
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// MySQLManagementClientResetQueryPerformanceInsightDataResponse contains the response from method MySQLManagementClient.ResetQueryPerformanceInsightData.
type MySQLManagementClientResetQueryPerformanceInsightDataResponse struct {
	MySQLManagementClientResetQueryPerformanceInsightDataResult
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// MySQLManagementClientResetQueryPerformanceInsightDataResult contains the result from method MySQLManagementClient.ResetQueryPerformanceInsightData.
type MySQLManagementClientResetQueryPerformanceInsightDataResult struct {
	QueryPerformanceInsightResetDataResult
}

// OperationsListResponse contains the response from method Operations.List.
type OperationsListResponse struct {
	OperationsListResult
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// OperationsListResult contains the result from method Operations.List.
type OperationsListResult struct {
	OperationListResult
}

// PrivateEndpointConnectionsCreateOrUpdatePollerResponse contains the response from method PrivateEndpointConnections.CreateOrUpdate.
type PrivateEndpointConnectionsCreateOrUpdatePollerResponse struct {
	// Poller contains an initialized poller.
	Poller *PrivateEndpointConnectionsCreateOrUpdatePoller

	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// PollUntilDone will poll the service endpoint until a terminal state is reached or an error is received.
func (l PrivateEndpointConnectionsCreateOrUpdatePollerResponse) PollUntilDone(ctx context.Context, freq time.Duration) (PrivateEndpointConnectionsCreateOrUpdateResponse, error) {
	respType := PrivateEndpointConnectionsCreateOrUpdateResponse{}
	resp, err := l.Poller.pt.PollUntilDone(ctx, freq, &respType.PrivateEndpointConnection)
	if err != nil {
		return respType, err
	}
	respType.RawResponse = resp
	return respType, nil
}

// Resume rehydrates a PrivateEndpointConnectionsCreateOrUpdatePollerResponse from the provided client and resume token.
func (l *PrivateEndpointConnectionsCreateOrUpdatePollerResponse) Resume(ctx context.Context, client *PrivateEndpointConnectionsClient, token string) error {
	pt, err := armruntime.NewPollerFromResumeToken("PrivateEndpointConnectionsClient.CreateOrUpdate", token, client.pl, client.createOrUpdateHandleError)
	if err != nil {
		return err
	}
	poller := &PrivateEndpointConnectionsCreateOrUpdatePoller{
		pt: pt,
	}
	resp, err := poller.Poll(ctx)
	if err != nil {
		return err
	}
	l.Poller = poller
	l.RawResponse = resp
	return nil
}

// PrivateEndpointConnectionsCreateOrUpdateResponse contains the response from method PrivateEndpointConnections.CreateOrUpdate.
type PrivateEndpointConnectionsCreateOrUpdateResponse struct {
	PrivateEndpointConnectionsCreateOrUpdateResult
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// PrivateEndpointConnectionsCreateOrUpdateResult contains the result from method PrivateEndpointConnections.CreateOrUpdate.
type PrivateEndpointConnectionsCreateOrUpdateResult struct {
	PrivateEndpointConnection
}

// PrivateEndpointConnectionsDeletePollerResponse contains the response from method PrivateEndpointConnections.Delete.
type PrivateEndpointConnectionsDeletePollerResponse struct {
	// Poller contains an initialized poller.
	Poller *PrivateEndpointConnectionsDeletePoller

	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// PollUntilDone will poll the service endpoint until a terminal state is reached or an error is received.
func (l PrivateEndpointConnectionsDeletePollerResponse) PollUntilDone(ctx context.Context, freq time.Duration) (PrivateEndpointConnectionsDeleteResponse, error) {
	respType := PrivateEndpointConnectionsDeleteResponse{}
	resp, err := l.Poller.pt.PollUntilDone(ctx, freq, nil)
	if err != nil {
		return respType, err
	}
	respType.RawResponse = resp
	return respType, nil
}

// Resume rehydrates a PrivateEndpointConnectionsDeletePollerResponse from the provided client and resume token.
func (l *PrivateEndpointConnectionsDeletePollerResponse) Resume(ctx context.Context, client *PrivateEndpointConnectionsClient, token string) error {
	pt, err := armruntime.NewPollerFromResumeToken("PrivateEndpointConnectionsClient.Delete", token, client.pl, client.deleteHandleError)
	if err != nil {
		return err
	}
	poller := &PrivateEndpointConnectionsDeletePoller{
		pt: pt,
	}
	resp, err := poller.Poll(ctx)
	if err != nil {
		return err
	}
	l.Poller = poller
	l.RawResponse = resp
	return nil
}

// PrivateEndpointConnectionsDeleteResponse contains the response from method PrivateEndpointConnections.Delete.
type PrivateEndpointConnectionsDeleteResponse struct {
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// PrivateEndpointConnectionsGetResponse contains the response from method PrivateEndpointConnections.Get.
type PrivateEndpointConnectionsGetResponse struct {
	PrivateEndpointConnectionsGetResult
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// PrivateEndpointConnectionsGetResult contains the result from method PrivateEndpointConnections.Get.
type PrivateEndpointConnectionsGetResult struct {
	PrivateEndpointConnection
}

// PrivateEndpointConnectionsListByServerResponse contains the response from method PrivateEndpointConnections.ListByServer.
type PrivateEndpointConnectionsListByServerResponse struct {
	PrivateEndpointConnectionsListByServerResult
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// PrivateEndpointConnectionsListByServerResult contains the result from method PrivateEndpointConnections.ListByServer.
type PrivateEndpointConnectionsListByServerResult struct {
	PrivateEndpointConnectionListResult
}

// PrivateEndpointConnectionsUpdateTagsPollerResponse contains the response from method PrivateEndpointConnections.UpdateTags.
type PrivateEndpointConnectionsUpdateTagsPollerResponse struct {
	// Poller contains an initialized poller.
	Poller *PrivateEndpointConnectionsUpdateTagsPoller

	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// PollUntilDone will poll the service endpoint until a terminal state is reached or an error is received.
func (l PrivateEndpointConnectionsUpdateTagsPollerResponse) PollUntilDone(ctx context.Context, freq time.Duration) (PrivateEndpointConnectionsUpdateTagsResponse, error) {
	respType := PrivateEndpointConnectionsUpdateTagsResponse{}
	resp, err := l.Poller.pt.PollUntilDone(ctx, freq, &respType.PrivateEndpointConnection)
	if err != nil {
		return respType, err
	}
	respType.RawResponse = resp
	return respType, nil
}

// Resume rehydrates a PrivateEndpointConnectionsUpdateTagsPollerResponse from the provided client and resume token.
func (l *PrivateEndpointConnectionsUpdateTagsPollerResponse) Resume(ctx context.Context, client *PrivateEndpointConnectionsClient, token string) error {
	pt, err := armruntime.NewPollerFromResumeToken("PrivateEndpointConnectionsClient.UpdateTags", token, client.pl, client.updateTagsHandleError)
	if err != nil {
		return err
	}
	poller := &PrivateEndpointConnectionsUpdateTagsPoller{
		pt: pt,
	}
	resp, err := poller.Poll(ctx)
	if err != nil {
		return err
	}
	l.Poller = poller
	l.RawResponse = resp
	return nil
}

// PrivateEndpointConnectionsUpdateTagsResponse contains the response from method PrivateEndpointConnections.UpdateTags.
type PrivateEndpointConnectionsUpdateTagsResponse struct {
	PrivateEndpointConnectionsUpdateTagsResult
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// PrivateEndpointConnectionsUpdateTagsResult contains the result from method PrivateEndpointConnections.UpdateTags.
type PrivateEndpointConnectionsUpdateTagsResult struct {
	PrivateEndpointConnection
}

// PrivateLinkResourcesGetResponse contains the response from method PrivateLinkResources.Get.
type PrivateLinkResourcesGetResponse struct {
	PrivateLinkResourcesGetResult
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// PrivateLinkResourcesGetResult contains the result from method PrivateLinkResources.Get.
type PrivateLinkResourcesGetResult struct {
	PrivateLinkResource
}

// PrivateLinkResourcesListByServerResponse contains the response from method PrivateLinkResources.ListByServer.
type PrivateLinkResourcesListByServerResponse struct {
	PrivateLinkResourcesListByServerResult
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// PrivateLinkResourcesListByServerResult contains the result from method PrivateLinkResources.ListByServer.
type PrivateLinkResourcesListByServerResult struct {
	PrivateLinkResourceListResult
}

// QueryTextsGetResponse contains the response from method QueryTexts.Get.
type QueryTextsGetResponse struct {
	QueryTextsGetResult
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// QueryTextsGetResult contains the result from method QueryTexts.Get.
type QueryTextsGetResult struct {
	QueryText
}

// QueryTextsListByServerResponse contains the response from method QueryTexts.ListByServer.
type QueryTextsListByServerResponse struct {
	QueryTextsListByServerResult
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// QueryTextsListByServerResult contains the result from method QueryTexts.ListByServer.
type QueryTextsListByServerResult struct {
	QueryTextsResultList
}

// RecommendedActionsGetResponse contains the response from method RecommendedActions.Get.
type RecommendedActionsGetResponse struct {
	RecommendedActionsGetResult
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// RecommendedActionsGetResult contains the result from method RecommendedActions.Get.
type RecommendedActionsGetResult struct {
	RecommendationAction
}

// RecommendedActionsListByServerResponse contains the response from method RecommendedActions.ListByServer.
type RecommendedActionsListByServerResponse struct {
	RecommendedActionsListByServerResult
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// RecommendedActionsListByServerResult contains the result from method RecommendedActions.ListByServer.
type RecommendedActionsListByServerResult struct {
	RecommendationActionsResultList
}

// RecoverableServersGetResponse contains the response from method RecoverableServers.Get.
type RecoverableServersGetResponse struct {
	RecoverableServersGetResult
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// RecoverableServersGetResult contains the result from method RecoverableServers.Get.
type RecoverableServersGetResult struct {
	RecoverableServerResource
}

// ReplicasListByServerResponse contains the response from method Replicas.ListByServer.
type ReplicasListByServerResponse struct {
	ReplicasListByServerResult
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// ReplicasListByServerResult contains the result from method Replicas.ListByServer.
type ReplicasListByServerResult struct {
	ServerListResult
}

// ServerAdministratorsCreateOrUpdatePollerResponse contains the response from method ServerAdministrators.CreateOrUpdate.
type ServerAdministratorsCreateOrUpdatePollerResponse struct {
	// Poller contains an initialized poller.
	Poller *ServerAdministratorsCreateOrUpdatePoller

	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// PollUntilDone will poll the service endpoint until a terminal state is reached or an error is received.
func (l ServerAdministratorsCreateOrUpdatePollerResponse) PollUntilDone(ctx context.Context, freq time.Duration) (ServerAdministratorsCreateOrUpdateResponse, error) {
	respType := ServerAdministratorsCreateOrUpdateResponse{}
	resp, err := l.Poller.pt.PollUntilDone(ctx, freq, &respType.ServerAdministratorResource)
	if err != nil {
		return respType, err
	}
	respType.RawResponse = resp
	return respType, nil
}

// Resume rehydrates a ServerAdministratorsCreateOrUpdatePollerResponse from the provided client and resume token.
func (l *ServerAdministratorsCreateOrUpdatePollerResponse) Resume(ctx context.Context, client *ServerAdministratorsClient, token string) error {
	pt, err := armruntime.NewPollerFromResumeToken("ServerAdministratorsClient.CreateOrUpdate", token, client.pl, client.createOrUpdateHandleError)
	if err != nil {
		return err
	}
	poller := &ServerAdministratorsCreateOrUpdatePoller{
		pt: pt,
	}
	resp, err := poller.Poll(ctx)
	if err != nil {
		return err
	}
	l.Poller = poller
	l.RawResponse = resp
	return nil
}

// ServerAdministratorsCreateOrUpdateResponse contains the response from method ServerAdministrators.CreateOrUpdate.
type ServerAdministratorsCreateOrUpdateResponse struct {
	ServerAdministratorsCreateOrUpdateResult
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// ServerAdministratorsCreateOrUpdateResult contains the result from method ServerAdministrators.CreateOrUpdate.
type ServerAdministratorsCreateOrUpdateResult struct {
	ServerAdministratorResource
}

// ServerAdministratorsDeletePollerResponse contains the response from method ServerAdministrators.Delete.
type ServerAdministratorsDeletePollerResponse struct {
	// Poller contains an initialized poller.
	Poller *ServerAdministratorsDeletePoller

	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// PollUntilDone will poll the service endpoint until a terminal state is reached or an error is received.
func (l ServerAdministratorsDeletePollerResponse) PollUntilDone(ctx context.Context, freq time.Duration) (ServerAdministratorsDeleteResponse, error) {
	respType := ServerAdministratorsDeleteResponse{}
	resp, err := l.Poller.pt.PollUntilDone(ctx, freq, nil)
	if err != nil {
		return respType, err
	}
	respType.RawResponse = resp
	return respType, nil
}

// Resume rehydrates a ServerAdministratorsDeletePollerResponse from the provided client and resume token.
func (l *ServerAdministratorsDeletePollerResponse) Resume(ctx context.Context, client *ServerAdministratorsClient, token string) error {
	pt, err := armruntime.NewPollerFromResumeToken("ServerAdministratorsClient.Delete", token, client.pl, client.deleteHandleError)
	if err != nil {
		return err
	}
	poller := &ServerAdministratorsDeletePoller{
		pt: pt,
	}
	resp, err := poller.Poll(ctx)
	if err != nil {
		return err
	}
	l.Poller = poller
	l.RawResponse = resp
	return nil
}

// ServerAdministratorsDeleteResponse contains the response from method ServerAdministrators.Delete.
type ServerAdministratorsDeleteResponse struct {
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// ServerAdministratorsGetResponse contains the response from method ServerAdministrators.Get.
type ServerAdministratorsGetResponse struct {
	ServerAdministratorsGetResult
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// ServerAdministratorsGetResult contains the result from method ServerAdministrators.Get.
type ServerAdministratorsGetResult struct {
	ServerAdministratorResource
}

// ServerAdministratorsListResponse contains the response from method ServerAdministrators.List.
type ServerAdministratorsListResponse struct {
	ServerAdministratorsListResult
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// ServerAdministratorsListResult contains the result from method ServerAdministrators.List.
type ServerAdministratorsListResult struct {
	ServerAdministratorResourceListResult
}

// ServerBasedPerformanceTierListResponse contains the response from method ServerBasedPerformanceTier.List.
type ServerBasedPerformanceTierListResponse struct {
	ServerBasedPerformanceTierListResult
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// ServerBasedPerformanceTierListResult contains the result from method ServerBasedPerformanceTier.List.
type ServerBasedPerformanceTierListResult struct {
	PerformanceTierListResult
}

// ServerKeysCreateOrUpdatePollerResponse contains the response from method ServerKeys.CreateOrUpdate.
type ServerKeysCreateOrUpdatePollerResponse struct {
	// Poller contains an initialized poller.
	Poller *ServerKeysCreateOrUpdatePoller

	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// PollUntilDone will poll the service endpoint until a terminal state is reached or an error is received.
func (l ServerKeysCreateOrUpdatePollerResponse) PollUntilDone(ctx context.Context, freq time.Duration) (ServerKeysCreateOrUpdateResponse, error) {
	respType := ServerKeysCreateOrUpdateResponse{}
	resp, err := l.Poller.pt.PollUntilDone(ctx, freq, &respType.ServerKey)
	if err != nil {
		return respType, err
	}
	respType.RawResponse = resp
	return respType, nil
}

// Resume rehydrates a ServerKeysCreateOrUpdatePollerResponse from the provided client and resume token.
func (l *ServerKeysCreateOrUpdatePollerResponse) Resume(ctx context.Context, client *ServerKeysClient, token string) error {
	pt, err := armruntime.NewPollerFromResumeToken("ServerKeysClient.CreateOrUpdate", token, client.pl, client.createOrUpdateHandleError)
	if err != nil {
		return err
	}
	poller := &ServerKeysCreateOrUpdatePoller{
		pt: pt,
	}
	resp, err := poller.Poll(ctx)
	if err != nil {
		return err
	}
	l.Poller = poller
	l.RawResponse = resp
	return nil
}

// ServerKeysCreateOrUpdateResponse contains the response from method ServerKeys.CreateOrUpdate.
type ServerKeysCreateOrUpdateResponse struct {
	ServerKeysCreateOrUpdateResult
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// ServerKeysCreateOrUpdateResult contains the result from method ServerKeys.CreateOrUpdate.
type ServerKeysCreateOrUpdateResult struct {
	ServerKey
}

// ServerKeysDeletePollerResponse contains the response from method ServerKeys.Delete.
type ServerKeysDeletePollerResponse struct {
	// Poller contains an initialized poller.
	Poller *ServerKeysDeletePoller

	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// PollUntilDone will poll the service endpoint until a terminal state is reached or an error is received.
func (l ServerKeysDeletePollerResponse) PollUntilDone(ctx context.Context, freq time.Duration) (ServerKeysDeleteResponse, error) {
	respType := ServerKeysDeleteResponse{}
	resp, err := l.Poller.pt.PollUntilDone(ctx, freq, nil)
	if err != nil {
		return respType, err
	}
	respType.RawResponse = resp
	return respType, nil
}

// Resume rehydrates a ServerKeysDeletePollerResponse from the provided client and resume token.
func (l *ServerKeysDeletePollerResponse) Resume(ctx context.Context, client *ServerKeysClient, token string) error {
	pt, err := armruntime.NewPollerFromResumeToken("ServerKeysClient.Delete", token, client.pl, client.deleteHandleError)
	if err != nil {
		return err
	}
	poller := &ServerKeysDeletePoller{
		pt: pt,
	}
	resp, err := poller.Poll(ctx)
	if err != nil {
		return err
	}
	l.Poller = poller
	l.RawResponse = resp
	return nil
}

// ServerKeysDeleteResponse contains the response from method ServerKeys.Delete.
type ServerKeysDeleteResponse struct {
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// ServerKeysGetResponse contains the response from method ServerKeys.Get.
type ServerKeysGetResponse struct {
	ServerKeysGetResult
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// ServerKeysGetResult contains the result from method ServerKeys.Get.
type ServerKeysGetResult struct {
	ServerKey
}

// ServerKeysListResponse contains the response from method ServerKeys.List.
type ServerKeysListResponse struct {
	ServerKeysListResult
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// ServerKeysListResult contains the result from method ServerKeys.List.
type ServerKeysListResult struct {
	ServerKeyListResult
}

// ServerParametersListUpdateConfigurationsPollerResponse contains the response from method ServerParameters.ListUpdateConfigurations.
type ServerParametersListUpdateConfigurationsPollerResponse struct {
	// Poller contains an initialized poller.
	Poller *ServerParametersListUpdateConfigurationsPoller

	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// PollUntilDone will poll the service endpoint until a terminal state is reached or an error is received.
func (l ServerParametersListUpdateConfigurationsPollerResponse) PollUntilDone(ctx context.Context, freq time.Duration) (ServerParametersListUpdateConfigurationsResponse, error) {
	respType := ServerParametersListUpdateConfigurationsResponse{}
	resp, err := l.Poller.pt.PollUntilDone(ctx, freq, &respType.ConfigurationListResult)
	if err != nil {
		return respType, err
	}
	respType.RawResponse = resp
	return respType, nil
}

// Resume rehydrates a ServerParametersListUpdateConfigurationsPollerResponse from the provided client and resume token.
func (l *ServerParametersListUpdateConfigurationsPollerResponse) Resume(ctx context.Context, client *ServerParametersClient, token string) error {
	pt, err := armruntime.NewPollerFromResumeToken("ServerParametersClient.ListUpdateConfigurations", token, client.pl, client.listUpdateConfigurationsHandleError)
	if err != nil {
		return err
	}
	poller := &ServerParametersListUpdateConfigurationsPoller{
		pt: pt,
	}
	resp, err := poller.Poll(ctx)
	if err != nil {
		return err
	}
	l.Poller = poller
	l.RawResponse = resp
	return nil
}

// ServerParametersListUpdateConfigurationsResponse contains the response from method ServerParameters.ListUpdateConfigurations.
type ServerParametersListUpdateConfigurationsResponse struct {
	ServerParametersListUpdateConfigurationsResult
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// ServerParametersListUpdateConfigurationsResult contains the result from method ServerParameters.ListUpdateConfigurations.
type ServerParametersListUpdateConfigurationsResult struct {
	ConfigurationListResult
}

// ServerSecurityAlertPoliciesCreateOrUpdatePollerResponse contains the response from method ServerSecurityAlertPolicies.CreateOrUpdate.
type ServerSecurityAlertPoliciesCreateOrUpdatePollerResponse struct {
	// Poller contains an initialized poller.
	Poller *ServerSecurityAlertPoliciesCreateOrUpdatePoller

	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// PollUntilDone will poll the service endpoint until a terminal state is reached or an error is received.
func (l ServerSecurityAlertPoliciesCreateOrUpdatePollerResponse) PollUntilDone(ctx context.Context, freq time.Duration) (ServerSecurityAlertPoliciesCreateOrUpdateResponse, error) {
	respType := ServerSecurityAlertPoliciesCreateOrUpdateResponse{}
	resp, err := l.Poller.pt.PollUntilDone(ctx, freq, &respType.ServerSecurityAlertPolicy)
	if err != nil {
		return respType, err
	}
	respType.RawResponse = resp
	return respType, nil
}

// Resume rehydrates a ServerSecurityAlertPoliciesCreateOrUpdatePollerResponse from the provided client and resume token.
func (l *ServerSecurityAlertPoliciesCreateOrUpdatePollerResponse) Resume(ctx context.Context, client *ServerSecurityAlertPoliciesClient, token string) error {
	pt, err := armruntime.NewPollerFromResumeToken("ServerSecurityAlertPoliciesClient.CreateOrUpdate", token, client.pl, client.createOrUpdateHandleError)
	if err != nil {
		return err
	}
	poller := &ServerSecurityAlertPoliciesCreateOrUpdatePoller{
		pt: pt,
	}
	resp, err := poller.Poll(ctx)
	if err != nil {
		return err
	}
	l.Poller = poller
	l.RawResponse = resp
	return nil
}

// ServerSecurityAlertPoliciesCreateOrUpdateResponse contains the response from method ServerSecurityAlertPolicies.CreateOrUpdate.
type ServerSecurityAlertPoliciesCreateOrUpdateResponse struct {
	ServerSecurityAlertPoliciesCreateOrUpdateResult
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// ServerSecurityAlertPoliciesCreateOrUpdateResult contains the result from method ServerSecurityAlertPolicies.CreateOrUpdate.
type ServerSecurityAlertPoliciesCreateOrUpdateResult struct {
	ServerSecurityAlertPolicy
}

// ServerSecurityAlertPoliciesGetResponse contains the response from method ServerSecurityAlertPolicies.Get.
type ServerSecurityAlertPoliciesGetResponse struct {
	ServerSecurityAlertPoliciesGetResult
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// ServerSecurityAlertPoliciesGetResult contains the result from method ServerSecurityAlertPolicies.Get.
type ServerSecurityAlertPoliciesGetResult struct {
	ServerSecurityAlertPolicy
}

// ServerSecurityAlertPoliciesListByServerResponse contains the response from method ServerSecurityAlertPolicies.ListByServer.
type ServerSecurityAlertPoliciesListByServerResponse struct {
	ServerSecurityAlertPoliciesListByServerResult
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// ServerSecurityAlertPoliciesListByServerResult contains the result from method ServerSecurityAlertPolicies.ListByServer.
type ServerSecurityAlertPoliciesListByServerResult struct {
	ServerSecurityAlertPolicyListResult
}

// ServersCreatePollerResponse contains the response from method Servers.Create.
type ServersCreatePollerResponse struct {
	// Poller contains an initialized poller.
	Poller *ServersCreatePoller

	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// PollUntilDone will poll the service endpoint until a terminal state is reached or an error is received.
func (l ServersCreatePollerResponse) PollUntilDone(ctx context.Context, freq time.Duration) (ServersCreateResponse, error) {
	respType := ServersCreateResponse{}
	resp, err := l.Poller.pt.PollUntilDone(ctx, freq, &respType.Server)
	if err != nil {
		return respType, err
	}
	respType.RawResponse = resp
	return respType, nil
}

// Resume rehydrates a ServersCreatePollerResponse from the provided client and resume token.
func (l *ServersCreatePollerResponse) Resume(ctx context.Context, client *ServersClient, token string) error {
	pt, err := armruntime.NewPollerFromResumeToken("ServersClient.Create", token, client.pl, client.createHandleError)
	if err != nil {
		return err
	}
	poller := &ServersCreatePoller{
		pt: pt,
	}
	resp, err := poller.Poll(ctx)
	if err != nil {
		return err
	}
	l.Poller = poller
	l.RawResponse = resp
	return nil
}

// ServersCreateResponse contains the response from method Servers.Create.
type ServersCreateResponse struct {
	ServersCreateResult
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// ServersCreateResult contains the result from method Servers.Create.
type ServersCreateResult struct {
	Server
}

// ServersDeletePollerResponse contains the response from method Servers.Delete.
type ServersDeletePollerResponse struct {
	// Poller contains an initialized poller.
	Poller *ServersDeletePoller

	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// PollUntilDone will poll the service endpoint until a terminal state is reached or an error is received.
func (l ServersDeletePollerResponse) PollUntilDone(ctx context.Context, freq time.Duration) (ServersDeleteResponse, error) {
	respType := ServersDeleteResponse{}
	resp, err := l.Poller.pt.PollUntilDone(ctx, freq, nil)
	if err != nil {
		return respType, err
	}
	respType.RawResponse = resp
	return respType, nil
}

// Resume rehydrates a ServersDeletePollerResponse from the provided client and resume token.
func (l *ServersDeletePollerResponse) Resume(ctx context.Context, client *ServersClient, token string) error {
	pt, err := armruntime.NewPollerFromResumeToken("ServersClient.Delete", token, client.pl, client.deleteHandleError)
	if err != nil {
		return err
	}
	poller := &ServersDeletePoller{
		pt: pt,
	}
	resp, err := poller.Poll(ctx)
	if err != nil {
		return err
	}
	l.Poller = poller
	l.RawResponse = resp
	return nil
}

// ServersDeleteResponse contains the response from method Servers.Delete.
type ServersDeleteResponse struct {
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// ServersGetResponse contains the response from method Servers.Get.
type ServersGetResponse struct {
	ServersGetResult
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// ServersGetResult contains the result from method Servers.Get.
type ServersGetResult struct {
	Server
}

// ServersListByResourceGroupResponse contains the response from method Servers.ListByResourceGroup.
type ServersListByResourceGroupResponse struct {
	ServersListByResourceGroupResult
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// ServersListByResourceGroupResult contains the result from method Servers.ListByResourceGroup.
type ServersListByResourceGroupResult struct {
	ServerListResult
}

// ServersListResponse contains the response from method Servers.List.
type ServersListResponse struct {
	ServersListResult
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// ServersListResult contains the result from method Servers.List.
type ServersListResult struct {
	ServerListResult
}

// ServersRestartPollerResponse contains the response from method Servers.Restart.
type ServersRestartPollerResponse struct {
	// Poller contains an initialized poller.
	Poller *ServersRestartPoller

	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// PollUntilDone will poll the service endpoint until a terminal state is reached or an error is received.
func (l ServersRestartPollerResponse) PollUntilDone(ctx context.Context, freq time.Duration) (ServersRestartResponse, error) {
	respType := ServersRestartResponse{}
	resp, err := l.Poller.pt.PollUntilDone(ctx, freq, nil)
	if err != nil {
		return respType, err
	}
	respType.RawResponse = resp
	return respType, nil
}

// Resume rehydrates a ServersRestartPollerResponse from the provided client and resume token.
func (l *ServersRestartPollerResponse) Resume(ctx context.Context, client *ServersClient, token string) error {
	pt, err := armruntime.NewPollerFromResumeToken("ServersClient.Restart", token, client.pl, client.restartHandleError)
	if err != nil {
		return err
	}
	poller := &ServersRestartPoller{
		pt: pt,
	}
	resp, err := poller.Poll(ctx)
	if err != nil {
		return err
	}
	l.Poller = poller
	l.RawResponse = resp
	return nil
}

// ServersRestartResponse contains the response from method Servers.Restart.
type ServersRestartResponse struct {
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// ServersStartPollerResponse contains the response from method Servers.Start.
type ServersStartPollerResponse struct {
	// Poller contains an initialized poller.
	Poller *ServersStartPoller

	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// PollUntilDone will poll the service endpoint until a terminal state is reached or an error is received.
func (l ServersStartPollerResponse) PollUntilDone(ctx context.Context, freq time.Duration) (ServersStartResponse, error) {
	respType := ServersStartResponse{}
	resp, err := l.Poller.pt.PollUntilDone(ctx, freq, nil)
	if err != nil {
		return respType, err
	}
	respType.RawResponse = resp
	return respType, nil
}

// Resume rehydrates a ServersStartPollerResponse from the provided client and resume token.
func (l *ServersStartPollerResponse) Resume(ctx context.Context, client *ServersClient, token string) error {
	pt, err := armruntime.NewPollerFromResumeToken("ServersClient.Start", token, client.pl, client.startHandleError)
	if err != nil {
		return err
	}
	poller := &ServersStartPoller{
		pt: pt,
	}
	resp, err := poller.Poll(ctx)
	if err != nil {
		return err
	}
	l.Poller = poller
	l.RawResponse = resp
	return nil
}

// ServersStartResponse contains the response from method Servers.Start.
type ServersStartResponse struct {
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// ServersStopPollerResponse contains the response from method Servers.Stop.
type ServersStopPollerResponse struct {
	// Poller contains an initialized poller.
	Poller *ServersStopPoller

	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// PollUntilDone will poll the service endpoint until a terminal state is reached or an error is received.
func (l ServersStopPollerResponse) PollUntilDone(ctx context.Context, freq time.Duration) (ServersStopResponse, error) {
	respType := ServersStopResponse{}
	resp, err := l.Poller.pt.PollUntilDone(ctx, freq, nil)
	if err != nil {
		return respType, err
	}
	respType.RawResponse = resp
	return respType, nil
}

// Resume rehydrates a ServersStopPollerResponse from the provided client and resume token.
func (l *ServersStopPollerResponse) Resume(ctx context.Context, client *ServersClient, token string) error {
	pt, err := armruntime.NewPollerFromResumeToken("ServersClient.Stop", token, client.pl, client.stopHandleError)
	if err != nil {
		return err
	}
	poller := &ServersStopPoller{
		pt: pt,
	}
	resp, err := poller.Poll(ctx)
	if err != nil {
		return err
	}
	l.Poller = poller
	l.RawResponse = resp
	return nil
}

// ServersStopResponse contains the response from method Servers.Stop.
type ServersStopResponse struct {
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// ServersUpdatePollerResponse contains the response from method Servers.Update.
type ServersUpdatePollerResponse struct {
	// Poller contains an initialized poller.
	Poller *ServersUpdatePoller

	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// PollUntilDone will poll the service endpoint until a terminal state is reached or an error is received.
func (l ServersUpdatePollerResponse) PollUntilDone(ctx context.Context, freq time.Duration) (ServersUpdateResponse, error) {
	respType := ServersUpdateResponse{}
	resp, err := l.Poller.pt.PollUntilDone(ctx, freq, &respType.Server)
	if err != nil {
		return respType, err
	}
	respType.RawResponse = resp
	return respType, nil
}

// Resume rehydrates a ServersUpdatePollerResponse from the provided client and resume token.
func (l *ServersUpdatePollerResponse) Resume(ctx context.Context, client *ServersClient, token string) error {
	pt, err := armruntime.NewPollerFromResumeToken("ServersClient.Update", token, client.pl, client.updateHandleError)
	if err != nil {
		return err
	}
	poller := &ServersUpdatePoller{
		pt: pt,
	}
	resp, err := poller.Poll(ctx)
	if err != nil {
		return err
	}
	l.Poller = poller
	l.RawResponse = resp
	return nil
}

// ServersUpdateResponse contains the response from method Servers.Update.
type ServersUpdateResponse struct {
	ServersUpdateResult
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// ServersUpdateResult contains the result from method Servers.Update.
type ServersUpdateResult struct {
	Server
}

// ServersUpgradePollerResponse contains the response from method Servers.Upgrade.
type ServersUpgradePollerResponse struct {
	// Poller contains an initialized poller.
	Poller *ServersUpgradePoller

	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// PollUntilDone will poll the service endpoint until a terminal state is reached or an error is received.
func (l ServersUpgradePollerResponse) PollUntilDone(ctx context.Context, freq time.Duration) (ServersUpgradeResponse, error) {
	respType := ServersUpgradeResponse{}
	resp, err := l.Poller.pt.PollUntilDone(ctx, freq, nil)
	if err != nil {
		return respType, err
	}
	respType.RawResponse = resp
	return respType, nil
}

// Resume rehydrates a ServersUpgradePollerResponse from the provided client and resume token.
func (l *ServersUpgradePollerResponse) Resume(ctx context.Context, client *ServersClient, token string) error {
	pt, err := armruntime.NewPollerFromResumeToken("ServersClient.Upgrade", token, client.pl, client.upgradeHandleError)
	if err != nil {
		return err
	}
	poller := &ServersUpgradePoller{
		pt: pt,
	}
	resp, err := poller.Poll(ctx)
	if err != nil {
		return err
	}
	l.Poller = poller
	l.RawResponse = resp
	return nil
}

// ServersUpgradeResponse contains the response from method Servers.Upgrade.
type ServersUpgradeResponse struct {
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// TopQueryStatisticsGetResponse contains the response from method TopQueryStatistics.Get.
type TopQueryStatisticsGetResponse struct {
	TopQueryStatisticsGetResult
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// TopQueryStatisticsGetResult contains the result from method TopQueryStatistics.Get.
type TopQueryStatisticsGetResult struct {
	QueryStatistic
}

// TopQueryStatisticsListByServerResponse contains the response from method TopQueryStatistics.ListByServer.
type TopQueryStatisticsListByServerResponse struct {
	TopQueryStatisticsListByServerResult
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// TopQueryStatisticsListByServerResult contains the result from method TopQueryStatistics.ListByServer.
type TopQueryStatisticsListByServerResult struct {
	TopQueryStatisticsResultList
}

// VirtualNetworkRulesCreateOrUpdatePollerResponse contains the response from method VirtualNetworkRules.CreateOrUpdate.
type VirtualNetworkRulesCreateOrUpdatePollerResponse struct {
	// Poller contains an initialized poller.
	Poller *VirtualNetworkRulesCreateOrUpdatePoller

	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// PollUntilDone will poll the service endpoint until a terminal state is reached or an error is received.
func (l VirtualNetworkRulesCreateOrUpdatePollerResponse) PollUntilDone(ctx context.Context, freq time.Duration) (VirtualNetworkRulesCreateOrUpdateResponse, error) {
	respType := VirtualNetworkRulesCreateOrUpdateResponse{}
	resp, err := l.Poller.pt.PollUntilDone(ctx, freq, &respType.VirtualNetworkRule)
	if err != nil {
		return respType, err
	}
	respType.RawResponse = resp
	return respType, nil
}

// Resume rehydrates a VirtualNetworkRulesCreateOrUpdatePollerResponse from the provided client and resume token.
func (l *VirtualNetworkRulesCreateOrUpdatePollerResponse) Resume(ctx context.Context, client *VirtualNetworkRulesClient, token string) error {
	pt, err := armruntime.NewPollerFromResumeToken("VirtualNetworkRulesClient.CreateOrUpdate", token, client.pl, client.createOrUpdateHandleError)
	if err != nil {
		return err
	}
	poller := &VirtualNetworkRulesCreateOrUpdatePoller{
		pt: pt,
	}
	resp, err := poller.Poll(ctx)
	if err != nil {
		return err
	}
	l.Poller = poller
	l.RawResponse = resp
	return nil
}

// VirtualNetworkRulesCreateOrUpdateResponse contains the response from method VirtualNetworkRules.CreateOrUpdate.
type VirtualNetworkRulesCreateOrUpdateResponse struct {
	VirtualNetworkRulesCreateOrUpdateResult
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// VirtualNetworkRulesCreateOrUpdateResult contains the result from method VirtualNetworkRules.CreateOrUpdate.
type VirtualNetworkRulesCreateOrUpdateResult struct {
	VirtualNetworkRule
}

// VirtualNetworkRulesDeletePollerResponse contains the response from method VirtualNetworkRules.Delete.
type VirtualNetworkRulesDeletePollerResponse struct {
	// Poller contains an initialized poller.
	Poller *VirtualNetworkRulesDeletePoller

	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// PollUntilDone will poll the service endpoint until a terminal state is reached or an error is received.
func (l VirtualNetworkRulesDeletePollerResponse) PollUntilDone(ctx context.Context, freq time.Duration) (VirtualNetworkRulesDeleteResponse, error) {
	respType := VirtualNetworkRulesDeleteResponse{}
	resp, err := l.Poller.pt.PollUntilDone(ctx, freq, nil)
	if err != nil {
		return respType, err
	}
	respType.RawResponse = resp
	return respType, nil
}

// Resume rehydrates a VirtualNetworkRulesDeletePollerResponse from the provided client and resume token.
func (l *VirtualNetworkRulesDeletePollerResponse) Resume(ctx context.Context, client *VirtualNetworkRulesClient, token string) error {
	pt, err := armruntime.NewPollerFromResumeToken("VirtualNetworkRulesClient.Delete", token, client.pl, client.deleteHandleError)
	if err != nil {
		return err
	}
	poller := &VirtualNetworkRulesDeletePoller{
		pt: pt,
	}
	resp, err := poller.Poll(ctx)
	if err != nil {
		return err
	}
	l.Poller = poller
	l.RawResponse = resp
	return nil
}

// VirtualNetworkRulesDeleteResponse contains the response from method VirtualNetworkRules.Delete.
type VirtualNetworkRulesDeleteResponse struct {
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// VirtualNetworkRulesGetResponse contains the response from method VirtualNetworkRules.Get.
type VirtualNetworkRulesGetResponse struct {
	VirtualNetworkRulesGetResult
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// VirtualNetworkRulesGetResult contains the result from method VirtualNetworkRules.Get.
type VirtualNetworkRulesGetResult struct {
	VirtualNetworkRule
}

// VirtualNetworkRulesListByServerResponse contains the response from method VirtualNetworkRules.ListByServer.
type VirtualNetworkRulesListByServerResponse struct {
	VirtualNetworkRulesListByServerResult
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// VirtualNetworkRulesListByServerResult contains the result from method VirtualNetworkRules.ListByServer.
type VirtualNetworkRulesListByServerResult struct {
	VirtualNetworkRuleListResult
}

// WaitStatisticsGetResponse contains the response from method WaitStatistics.Get.
type WaitStatisticsGetResponse struct {
	WaitStatisticsGetResult
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// WaitStatisticsGetResult contains the result from method WaitStatistics.Get.
type WaitStatisticsGetResult struct {
	WaitStatistic
}

// WaitStatisticsListByServerResponse contains the response from method WaitStatistics.ListByServer.
type WaitStatisticsListByServerResponse struct {
	WaitStatisticsListByServerResult
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// WaitStatisticsListByServerResult contains the result from method WaitStatistics.ListByServer.
type WaitStatisticsListByServerResult struct {
	WaitStatisticsResultList
}
