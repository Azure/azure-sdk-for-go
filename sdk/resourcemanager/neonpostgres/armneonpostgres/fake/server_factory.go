// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) Go Code Generator. DO NOT EDIT.

package fake

import (
	"errors"
	"fmt"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/runtime"
	"net/http"
	"strings"
	"sync"
)

// ServerFactory is a fake server for instances of the armneonpostgres.ClientFactory type.
type ServerFactory struct {
	// BranchesServer contains the fakes for client BranchesClient
	BranchesServer BranchesServer

	// ComputesServer contains the fakes for client ComputesClient
	ComputesServer ComputesServer

	// EndpointsServer contains the fakes for client EndpointsClient
	EndpointsServer EndpointsServer

	// NeonDatabasesServer contains the fakes for client NeonDatabasesClient
	NeonDatabasesServer NeonDatabasesServer

	// NeonRolesServer contains the fakes for client NeonRolesClient
	NeonRolesServer NeonRolesServer

	// OperationsServer contains the fakes for client OperationsClient
	OperationsServer OperationsServer

	// OrganizationsServer contains the fakes for client OrganizationsClient
	OrganizationsServer OrganizationsServer

	// ProjectsServer contains the fakes for client ProjectsClient
	ProjectsServer ProjectsServer
}

// NewServerFactoryTransport creates a new instance of ServerFactoryTransport with the provided implementation.
// The returned ServerFactoryTransport instance is connected to an instance of armneonpostgres.ClientFactory via the
// azcore.ClientOptions.Transporter field in the client's constructor parameters.
func NewServerFactoryTransport(srv *ServerFactory) *ServerFactoryTransport {
	return &ServerFactoryTransport{
		srv: srv,
	}
}

// ServerFactoryTransport connects instances of armneonpostgres.ClientFactory to instances of ServerFactory.
// Don't use this type directly, use NewServerFactoryTransport instead.
type ServerFactoryTransport struct {
	srv                   *ServerFactory
	trMu                  sync.Mutex
	trBranchesServer      *BranchesServerTransport
	trComputesServer      *ComputesServerTransport
	trEndpointsServer     *EndpointsServerTransport
	trNeonDatabasesServer *NeonDatabasesServerTransport
	trNeonRolesServer     *NeonRolesServerTransport
	trOperationsServer    *OperationsServerTransport
	trOrganizationsServer *OrganizationsServerTransport
	trProjectsServer      *ProjectsServerTransport
}

// Do implements the policy.Transporter interface for ServerFactoryTransport.
func (s *ServerFactoryTransport) Do(req *http.Request) (*http.Response, error) {
	rawMethod := req.Context().Value(runtime.CtxAPINameKey{})
	method, ok := rawMethod.(string)
	if !ok {
		return nil, nonRetriableError{errors.New("unable to dispatch request, missing value for CtxAPINameKey")}
	}

	client := method[:strings.Index(method, ".")]
	var resp *http.Response
	var err error

	switch client {
	case "BranchesClient":
		initServer(s, &s.trBranchesServer, func() *BranchesServerTransport { return NewBranchesServerTransport(&s.srv.BranchesServer) })
		resp, err = s.trBranchesServer.Do(req)
	case "ComputesClient":
		initServer(s, &s.trComputesServer, func() *ComputesServerTransport { return NewComputesServerTransport(&s.srv.ComputesServer) })
		resp, err = s.trComputesServer.Do(req)
	case "EndpointsClient":
		initServer(s, &s.trEndpointsServer, func() *EndpointsServerTransport { return NewEndpointsServerTransport(&s.srv.EndpointsServer) })
		resp, err = s.trEndpointsServer.Do(req)
	case "NeonDatabasesClient":
		initServer(s, &s.trNeonDatabasesServer, func() *NeonDatabasesServerTransport {
			return NewNeonDatabasesServerTransport(&s.srv.NeonDatabasesServer)
		})
		resp, err = s.trNeonDatabasesServer.Do(req)
	case "NeonRolesClient":
		initServer(s, &s.trNeonRolesServer, func() *NeonRolesServerTransport { return NewNeonRolesServerTransport(&s.srv.NeonRolesServer) })
		resp, err = s.trNeonRolesServer.Do(req)
	case "OperationsClient":
		initServer(s, &s.trOperationsServer, func() *OperationsServerTransport { return NewOperationsServerTransport(&s.srv.OperationsServer) })
		resp, err = s.trOperationsServer.Do(req)
	case "OrganizationsClient":
		initServer(s, &s.trOrganizationsServer, func() *OrganizationsServerTransport {
			return NewOrganizationsServerTransport(&s.srv.OrganizationsServer)
		})
		resp, err = s.trOrganizationsServer.Do(req)
	case "ProjectsClient":
		initServer(s, &s.trProjectsServer, func() *ProjectsServerTransport { return NewProjectsServerTransport(&s.srv.ProjectsServer) })
		resp, err = s.trProjectsServer.Do(req)
	default:
		err = fmt.Errorf("unhandled client %s", client)
	}

	if err != nil {
		return nil, err
	}

	return resp, nil
}

func initServer[T any](s *ServerFactoryTransport, dst **T, src func() *T) {
	s.trMu.Lock()
	if *dst == nil {
		*dst = src()
	}
	s.trMu.Unlock()
}
