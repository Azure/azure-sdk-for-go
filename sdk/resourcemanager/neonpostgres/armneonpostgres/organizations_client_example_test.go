// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) Go Code Generator. DO NOT EDIT.

package armneonpostgres_test

import (
	"context"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/to"
	"github.com/Azure/azure-sdk-for-go/sdk/azidentity"
	"github.com/Azure/azure-sdk-for-go/sdk/resourcemanager/neonpostgres/armneonpostgres"
	"log"
)

// Generated from example definition: 2025-03-01/Organizations_CreateOrUpdate_MaximumSet_Gen.json
func ExampleOrganizationsClient_BeginCreateOrUpdate() {
	cred, err := azidentity.NewDefaultAzureCredential(nil)
	if err != nil {
		log.Fatalf("failed to obtain a credential: %v", err)
	}
	ctx := context.Background()
	clientFactory, err := armneonpostgres.NewClientFactory("9B8E3300-C5FA-442B-A259-3F6F614D5BD4", cred, nil)
	if err != nil {
		log.Fatalf("failed to create client: %v", err)
	}
	poller, err := clientFactory.NewOrganizationsClient().BeginCreateOrUpdate(ctx, "rgneon", "test-org", armneonpostgres.OrganizationResource{
		Properties: &armneonpostgres.OrganizationProperties{
			MarketplaceDetails: &armneonpostgres.MarketplaceDetails{
				SubscriptionID:     to.Ptr("xfahbbbzwlcwhhjbxarnwfcy"),
				SubscriptionStatus: to.Ptr(armneonpostgres.MarketplaceSubscriptionStatusPendingFulfillmentStart),
				OfferDetails: &armneonpostgres.OfferDetails{
					PublisherID: to.Ptr("eibghzuyqsksouwlgqphhmuxeqeigf"),
					OfferID:     to.Ptr("qscggwfdnippiwrrnmuscg"),
					PlanID:      to.Ptr("sveqoxtdwxutxmtniuufyrdu"),
					PlanName:    to.Ptr("t"),
					TermUnit:    to.Ptr("jnxhyql"),
					TermID:      to.Ptr("uptombvymytfonj"),
				},
			},
			UserDetails: &armneonpostgres.UserDetails{
				FirstName:    to.Ptr("zhelh"),
				LastName:     to.Ptr("zbdhouyeozylnerrc"),
				EmailAddress: to.Ptr("test@contoso.com"),
				Upn:          to.Ptr("mixcikvxlnhkfugetqlngz"),
				PhoneNumber:  to.Ptr("zmejenytglrmjnt"),
			},
			CompanyDetails: &armneonpostgres.CompanyDetails{
				CompanyName:       to.Ptr("xtul"),
				Country:           to.Ptr("ycmyjdcpyjieemfrthfyxdlvn"),
				OfficeAddress:     to.Ptr("icirtoqmmozijk"),
				BusinessPhone:     to.Ptr("hucxvzcvpaupqjkgb"),
				Domain:            to.Ptr("snoshqumfsthyofpnrsgyjhszvgtj"),
				NumberOfEmployees: to.Ptr[int64](12),
			},
			PartnerOrganizationProperties: &armneonpostgres.PartnerOrganizationProperties{
				OrganizationID:   to.Ptr("hzejhmftwsruhwspvtwoy"),
				OrganizationName: to.Ptr("entity-name"),
				SingleSignOnProperties: &armneonpostgres.SingleSignOnProperties{
					SingleSignOnState: to.Ptr(armneonpostgres.SingleSignOnStatesInitial),
					EnterpriseAppID:   to.Ptr("urtjzjfr"),
					SingleSignOnURL:   to.Ptr("gcmlwvtxcsjozitm"),
					AADDomains: []*string{
						to.Ptr("mdzbelaiphukhe"),
					},
				},
			},
			ProjectProperties: &armneonpostgres.ProjectProperties{
				EntityName: to.Ptr("entity-name"),
				Attributes: []*armneonpostgres.Attributes{
					{
						Name:  to.Ptr("trhvzyvaqy"),
						Value: to.Ptr("evpkgsskyavybxwwssm"),
					},
				},
				RegionID:         to.Ptr("tlcltldfrnxh"),
				Storage:          to.Ptr[int64](7),
				PgVersion:        to.Ptr[int32](10),
				HistoryRetention: to.Ptr[int32](7),
				DefaultEndpointSettings: &armneonpostgres.DefaultEndpointSettings{
					AutoscalingLimitMinCu: to.Ptr[float32](26),
					AutoscalingLimitMaxCu: to.Ptr[float32](20),
				},
				Branch: &armneonpostgres.BranchProperties{
					EntityName: to.Ptr("entity-name"),
					Attributes: []*armneonpostgres.Attributes{
						{
							Name:  to.Ptr("trhvzyvaqy"),
							Value: to.Ptr("evpkgsskyavybxwwssm"),
						},
					},
					ProjectID:    to.Ptr("oik"),
					ParentID:     to.Ptr("entity-id"),
					RoleName:     to.Ptr("qrrairsupyosxnqotdwhbpc"),
					DatabaseName: to.Ptr("duhxebzhd"),
					Roles: []*armneonpostgres.NeonRoleProperties{
						{
							EntityName: to.Ptr("entity-name"),
							Attributes: []*armneonpostgres.Attributes{
								{
									Name:  to.Ptr("trhvzyvaqy"),
									Value: to.Ptr("evpkgsskyavybxwwssm"),
								},
							},
							BranchID: to.Ptr("wxbojkmdgaggkfiwqfakdkbyztm"),
							Permissions: []*string{
								to.Ptr("myucqecpjriewzohxvadgkhiudnyx"),
							},
							IsSuperUser: to.Ptr(true),
						},
					},
					Databases: []*armneonpostgres.NeonDatabaseProperties{
						{
							EntityName: to.Ptr("entity-name"),
							Attributes: []*armneonpostgres.Attributes{
								{
									Name:  to.Ptr("trhvzyvaqy"),
									Value: to.Ptr("evpkgsskyavybxwwssm"),
								},
							},
							BranchID:  to.Ptr("orfdwdmzvfvlnrgussvcvoek"),
							OwnerName: to.Ptr("odmbeg"),
						},
					},
					Endpoints: []*armneonpostgres.EndpointProperties{
						{
							EntityName: to.Ptr("entity-name"),
							Attributes: []*armneonpostgres.Attributes{
								{
									Name:  to.Ptr("trhvzyvaqy"),
									Value: to.Ptr("evpkgsskyavybxwwssm"),
								},
							},
							ProjectID:    to.Ptr("rtvdeeflqzlrpfzhjqhcsfbldw"),
							BranchID:     to.Ptr("rzsyrhpfbydxtfkpaa"),
							EndpointType: to.Ptr(armneonpostgres.EndpointTypeReadOnly),
						},
					},
				},
				Roles: []*armneonpostgres.NeonRoleProperties{
					{
						EntityName: to.Ptr("entity-name"),
						Attributes: []*armneonpostgres.Attributes{
							{
								Name:  to.Ptr("trhvzyvaqy"),
								Value: to.Ptr("evpkgsskyavybxwwssm"),
							},
						},
						BranchID: to.Ptr("wxbojkmdgaggkfiwqfakdkbyztm"),
						Permissions: []*string{
							to.Ptr("myucqecpjriewzohxvadgkhiudnyx"),
						},
						IsSuperUser: to.Ptr(true),
					},
				},
				Databases: []*armneonpostgres.NeonDatabaseProperties{
					{
						EntityName: to.Ptr("entity-name"),
						Attributes: []*armneonpostgres.Attributes{
							{
								Name:  to.Ptr("trhvzyvaqy"),
								Value: to.Ptr("evpkgsskyavybxwwssm"),
							},
						},
						BranchID:  to.Ptr("orfdwdmzvfvlnrgussvcvoek"),
						OwnerName: to.Ptr("odmbeg"),
					},
				},
				Endpoints: []*armneonpostgres.EndpointProperties{
					{
						EntityName: to.Ptr("entity-name"),
						Attributes: []*armneonpostgres.Attributes{
							{
								Name:  to.Ptr("trhvzyvaqy"),
								Value: to.Ptr("evpkgsskyavybxwwssm"),
							},
						},
						ProjectID:    to.Ptr("rtvdeeflqzlrpfzhjqhcsfbldw"),
						BranchID:     to.Ptr("rzsyrhpfbydxtfkpaa"),
						EndpointType: to.Ptr(armneonpostgres.EndpointTypeReadOnly),
					},
				},
			},
		},
		Tags: map[string]*string{
			"key8832": to.Ptr("rvukepuxkykdtqjtwk"),
		},
		Location: to.Ptr("kcdph"),
	}, nil)
	if err != nil {
		log.Fatalf("failed to finish the request: %v", err)
	}
	res, err := poller.PollUntilDone(ctx, nil)
	if err != nil {
		log.Fatalf("failed to pull the result: %v", err)
	}
	// You could use response here. We use blank identifier for just demo purposes.
	_ = res
	// If the HTTP response code is 200 as defined in example definition, your response structure would look as follows. Please pay attention that all the values in the output are fake values for just demo purposes.
	// res = armneonpostgres.OrganizationsClientCreateOrUpdateResponse{
	// 	OrganizationResource: &armneonpostgres.OrganizationResource{
	// 		Properties: &armneonpostgres.OrganizationProperties{
	// 			MarketplaceDetails: &armneonpostgres.MarketplaceDetails{
	// 				SubscriptionID: to.Ptr("xfahbbbzwlcwhhjbxarnwfcy"),
	// 				SubscriptionStatus: to.Ptr(armneonpostgres.MarketplaceSubscriptionStatusPendingFulfillmentStart),
	// 				OfferDetails: &armneonpostgres.OfferDetails{
	// 					PublisherID: to.Ptr("eibghzuyqsksouwlgqphhmuxeqeigf"),
	// 					OfferID: to.Ptr("qscggwfdnippiwrrnmuscg"),
	// 					PlanID: to.Ptr("sveqoxtdwxutxmtniuufyrdu"),
	// 					PlanName: to.Ptr("t"),
	// 					TermUnit: to.Ptr("jnxhyql"),
	// 					TermID: to.Ptr("uptombvymytfonj"),
	// 				},
	// 			},
	// 			UserDetails: &armneonpostgres.UserDetails{
	// 				FirstName: to.Ptr("zhelh"),
	// 				LastName: to.Ptr("zbdhouyeozylnerrc"),
	// 				EmailAddress: to.Ptr("test@contoso.com"),
	// 				Upn: to.Ptr("mixcikvxlnhkfugetqlngz"),
	// 				PhoneNumber: to.Ptr("zmejenytglrmjnt"),
	// 			},
	// 			CompanyDetails: &armneonpostgres.CompanyDetails{
	// 				CompanyName: to.Ptr("xtul"),
	// 				Country: to.Ptr("ycmyjdcpyjieemfrthfyxdlvn"),
	// 				OfficeAddress: to.Ptr("icirtoqmmozijk"),
	// 				BusinessPhone: to.Ptr("hucxvzcvpaupqjkgb"),
	// 				Domain: to.Ptr("snoshqumfsthyofpnrsgyjhszvgtj"),
	// 				NumberOfEmployees: to.Ptr[int64](12),
	// 			},
	// 			ProvisioningState: to.Ptr(armneonpostgres.ResourceProvisioningStateSucceeded),
	// 			PartnerOrganizationProperties: &armneonpostgres.PartnerOrganizationProperties{
	// 				OrganizationID: to.Ptr("hzejhmftwsruhwspvtwoy"),
	// 				OrganizationName: to.Ptr("entity-name"),
	// 				SingleSignOnProperties: &armneonpostgres.SingleSignOnProperties{
	// 					SingleSignOnState: to.Ptr(armneonpostgres.SingleSignOnStatesInitial),
	// 					EnterpriseAppID: to.Ptr("urtjzjfr"),
	// 					SingleSignOnURL: to.Ptr("gcmlwvtxcsjozitm"),
	// 					AADDomains: []*string{
	// 						to.Ptr("mdzbelaiphukhe"),
	// 					},
	// 				},
	// 			},
	// 			ProjectProperties: &armneonpostgres.ProjectProperties{
	// 				EntityID: to.Ptr("entity-id"),
	// 				EntityName: to.Ptr("entity-name"),
	// 				CreatedAt: to.Ptr("eazudrgcnzbydedhwcmgwoauc"),
	// 				ProvisioningState: to.Ptr(armneonpostgres.ResourceProvisioningStateSucceeded),
	// 				Attributes: []*armneonpostgres.Attributes{
	// 					{
	// 						Name: to.Ptr("trhvzyvaqy"),
	// 						Value: to.Ptr("evpkgsskyavybxwwssm"),
	// 					},
	// 				},
	// 				RegionID: to.Ptr("tlcltldfrnxh"),
	// 				Storage: to.Ptr[int64](7),
	// 				PgVersion: to.Ptr[int32](10),
	// 				HistoryRetention: to.Ptr[int32](7),
	// 				DefaultEndpointSettings: &armneonpostgres.DefaultEndpointSettings{
	// 					AutoscalingLimitMinCu: to.Ptr[float32](26),
	// 					AutoscalingLimitMaxCu: to.Ptr[float32](20),
	// 				},
	// 				Branch: &armneonpostgres.BranchProperties{
	// 					EntityID: to.Ptr("entity-id"),
	// 					EntityName: to.Ptr("entity-name"),
	// 					CreatedAt: to.Ptr("dzbqaiixq"),
	// 					ProvisioningState: to.Ptr(armneonpostgres.ResourceProvisioningStateSucceeded),
	// 					Attributes: []*armneonpostgres.Attributes{
	// 						{
	// 							Name: to.Ptr("trhvzyvaqy"),
	// 							Value: to.Ptr("evpkgsskyavybxwwssm"),
	// 						},
	// 					},
	// 					ProjectID: to.Ptr("oik"),
	// 					ParentID: to.Ptr("entity-id"),
	// 					RoleName: to.Ptr("qrrairsupyosxnqotdwhbpc"),
	// 					DatabaseName: to.Ptr("duhxebzhd"),
	// 					Roles: []*armneonpostgres.NeonRoleProperties{
	// 						{
	// 							EntityID: to.Ptr("entity-id"),
	// 							EntityName: to.Ptr("entity-name"),
	// 							CreatedAt: to.Ptr("sqpvswctybrhimiwidhnnlxclfry"),
	// 							ProvisioningState: to.Ptr(armneonpostgres.ResourceProvisioningStateSucceeded),
	// 							Attributes: []*armneonpostgres.Attributes{
	// 								{
	// 									Name: to.Ptr("trhvzyvaqy"),
	// 									Value: to.Ptr("evpkgsskyavybxwwssm"),
	// 								},
	// 							},
	// 							BranchID: to.Ptr("wxbojkmdgaggkfiwqfakdkbyztm"),
	// 							Permissions: []*string{
	// 								to.Ptr("myucqecpjriewzohxvadgkhiudnyx"),
	// 							},
	// 							IsSuperUser: to.Ptr(true),
	// 						},
	// 					},
	// 					Databases: []*armneonpostgres.NeonDatabaseProperties{
	// 						{
	// 							EntityID: to.Ptr("entity-id"),
	// 							EntityName: to.Ptr("entity-name"),
	// 							CreatedAt: to.Ptr("wgdmylla"),
	// 							ProvisioningState: to.Ptr(armneonpostgres.ResourceProvisioningStateSucceeded),
	// 							Attributes: []*armneonpostgres.Attributes{
	// 								{
	// 									Name: to.Ptr("trhvzyvaqy"),
	// 									Value: to.Ptr("evpkgsskyavybxwwssm"),
	// 								},
	// 							},
	// 							BranchID: to.Ptr("orfdwdmzvfvlnrgussvcvoek"),
	// 							OwnerName: to.Ptr("odmbeg"),
	// 						},
	// 					},
	// 					Endpoints: []*armneonpostgres.EndpointProperties{
	// 						{
	// 							EntityID: to.Ptr("entity-id"),
	// 							EntityName: to.Ptr("entity-name"),
	// 							CreatedAt: to.Ptr("vhcilurdd"),
	// 							ProvisioningState: to.Ptr(armneonpostgres.ResourceProvisioningStateSucceeded),
	// 							Attributes: []*armneonpostgres.Attributes{
	// 								{
	// 									Name: to.Ptr("trhvzyvaqy"),
	// 									Value: to.Ptr("evpkgsskyavybxwwssm"),
	// 								},
	// 							},
	// 							ProjectID: to.Ptr("rtvdeeflqzlrpfzhjqhcsfbldw"),
	// 							BranchID: to.Ptr("rzsyrhpfbydxtfkpaa"),
	// 							EndpointType: to.Ptr(armneonpostgres.EndpointTypeReadOnly),
	// 						},
	// 					},
	// 				},
	// 				Roles: []*armneonpostgres.NeonRoleProperties{
	// 					{
	// 						EntityID: to.Ptr("entity-id"),
	// 						EntityName: to.Ptr("entity-name"),
	// 						CreatedAt: to.Ptr("sqpvswctybrhimiwidhnnlxclfry"),
	// 						ProvisioningState: to.Ptr(armneonpostgres.ResourceProvisioningStateSucceeded),
	// 						Attributes: []*armneonpostgres.Attributes{
	// 							{
	// 								Name: to.Ptr("trhvzyvaqy"),
	// 								Value: to.Ptr("evpkgsskyavybxwwssm"),
	// 							},
	// 						},
	// 						BranchID: to.Ptr("wxbojkmdgaggkfiwqfakdkbyztm"),
	// 						Permissions: []*string{
	// 							to.Ptr("myucqecpjriewzohxvadgkhiudnyx"),
	// 						},
	// 						IsSuperUser: to.Ptr(true),
	// 					},
	// 				},
	// 				Databases: []*armneonpostgres.NeonDatabaseProperties{
	// 					{
	// 						EntityID: to.Ptr("entity-id"),
	// 						EntityName: to.Ptr("entity-name"),
	// 						CreatedAt: to.Ptr("wgdmylla"),
	// 						ProvisioningState: to.Ptr(armneonpostgres.ResourceProvisioningStateSucceeded),
	// 						Attributes: []*armneonpostgres.Attributes{
	// 							{
	// 								Name: to.Ptr("trhvzyvaqy"),
	// 								Value: to.Ptr("evpkgsskyavybxwwssm"),
	// 							},
	// 						},
	// 						BranchID: to.Ptr("orfdwdmzvfvlnrgussvcvoek"),
	// 						OwnerName: to.Ptr("odmbeg"),
	// 					},
	// 				},
	// 				Endpoints: []*armneonpostgres.EndpointProperties{
	// 					{
	// 						EntityID: to.Ptr("entity-id"),
	// 						EntityName: to.Ptr("entity-name"),
	// 						CreatedAt: to.Ptr("vhcilurdd"),
	// 						ProvisioningState: to.Ptr(armneonpostgres.ResourceProvisioningStateSucceeded),
	// 						Attributes: []*armneonpostgres.Attributes{
	// 							{
	// 								Name: to.Ptr("trhvzyvaqy"),
	// 								Value: to.Ptr("evpkgsskyavybxwwssm"),
	// 							},
	// 						},
	// 						ProjectID: to.Ptr("rtvdeeflqzlrpfzhjqhcsfbldw"),
	// 						BranchID: to.Ptr("rzsyrhpfbydxtfkpaa"),
	// 						EndpointType: to.Ptr(armneonpostgres.EndpointTypeReadOnly),
	// 					},
	// 				},
	// 			},
	// 		},
	// 		Tags: map[string]*string{
	// 			"key8832": to.Ptr("rvukepuxkykdtqjtwk"),
	// 		},
	// 		Location: to.Ptr("kcdph"),
	// 		ID: to.Ptr("/subscriptions/9B8E3300-C5FA-442B-A259-3F6F614D5BD4/resourceGroups/rgneon/providers/Microsoft.Neon/organizations/test-org"),
	// 		Name: to.Ptr("aocvhndykwhgolfixbqhwtmhiriu"),
	// 		Type: to.Ptr("bvtwhithilvtizpde"),
	// 		SystemData: &armneonpostgres.SystemData{
	// 			CreatedBy: to.Ptr("hnyidmqyvvtsddrwkmrqlwtlew"),
	// 			CreatedByType: to.Ptr(armneonpostgres.CreatedByTypeUser),
	// 			CreatedAt: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2025-03-24T04:03:54.769Z"); return t}()),
	// 			LastModifiedBy: to.Ptr("szuncyyauzxhpzlbcvjkeamp"),
	// 			LastModifiedByType: to.Ptr(armneonpostgres.CreatedByTypeUser),
	// 			LastModifiedAt: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2025-03-24T04:03:54.769Z"); return t}()),
	// 		},
	// 	},
	// }
}

// Generated from example definition: 2025-03-01/Organizations_Delete_MaximumSet_Gen.json
func ExampleOrganizationsClient_BeginDelete() {
	cred, err := azidentity.NewDefaultAzureCredential(nil)
	if err != nil {
		log.Fatalf("failed to obtain a credential: %v", err)
	}
	ctx := context.Background()
	clientFactory, err := armneonpostgres.NewClientFactory("9B8E3300-C5FA-442B-A259-3F6F614D5BD4", cred, nil)
	if err != nil {
		log.Fatalf("failed to create client: %v", err)
	}
	poller, err := clientFactory.NewOrganizationsClient().BeginDelete(ctx, "rgneon", "test-org", nil)
	if err != nil {
		log.Fatalf("failed to finish the request: %v", err)
	}
	_, err = poller.PollUntilDone(ctx, nil)
	if err != nil {
		log.Fatalf("failed to pull the result: %v", err)
	}
}

// Generated from example definition: 2025-03-01/Organizations_Get_MaximumSet_Gen.json
func ExampleOrganizationsClient_Get() {
	cred, err := azidentity.NewDefaultAzureCredential(nil)
	if err != nil {
		log.Fatalf("failed to obtain a credential: %v", err)
	}
	ctx := context.Background()
	clientFactory, err := armneonpostgres.NewClientFactory("9B8E3300-C5FA-442B-A259-3F6F614D5BD4", cred, nil)
	if err != nil {
		log.Fatalf("failed to create client: %v", err)
	}
	res, err := clientFactory.NewOrganizationsClient().Get(ctx, "rgneon", "test-org", nil)
	if err != nil {
		log.Fatalf("failed to finish the request: %v", err)
	}
	// You could use response here. We use blank identifier for just demo purposes.
	_ = res
	// If the HTTP response code is 200 as defined in example definition, your response structure would look as follows. Please pay attention that all the values in the output are fake values for just demo purposes.
	// res = armneonpostgres.OrganizationsClientGetResponse{
	// 	OrganizationResource: &armneonpostgres.OrganizationResource{
	// 		Properties: &armneonpostgres.OrganizationProperties{
	// 			MarketplaceDetails: &armneonpostgres.MarketplaceDetails{
	// 				SubscriptionID: to.Ptr("xfahbbbzwlcwhhjbxarnwfcy"),
	// 				SubscriptionStatus: to.Ptr(armneonpostgres.MarketplaceSubscriptionStatusPendingFulfillmentStart),
	// 				OfferDetails: &armneonpostgres.OfferDetails{
	// 					PublisherID: to.Ptr("eibghzuyqsksouwlgqphhmuxeqeigf"),
	// 					OfferID: to.Ptr("qscggwfdnippiwrrnmuscg"),
	// 					PlanID: to.Ptr("sveqoxtdwxutxmtniuufyrdu"),
	// 					PlanName: to.Ptr("t"),
	// 					TermUnit: to.Ptr("jnxhyql"),
	// 					TermID: to.Ptr("uptombvymytfonj"),
	// 				},
	// 			},
	// 			UserDetails: &armneonpostgres.UserDetails{
	// 				FirstName: to.Ptr("zhelh"),
	// 				LastName: to.Ptr("zbdhouyeozylnerrc"),
	// 				EmailAddress: to.Ptr("test@contoso.com"),
	// 				Upn: to.Ptr("mixcikvxlnhkfugetqlngz"),
	// 				PhoneNumber: to.Ptr("zmejenytglrmjnt"),
	// 			},
	// 			CompanyDetails: &armneonpostgres.CompanyDetails{
	// 				CompanyName: to.Ptr("xtul"),
	// 				Country: to.Ptr("ycmyjdcpyjieemfrthfyxdlvn"),
	// 				OfficeAddress: to.Ptr("icirtoqmmozijk"),
	// 				BusinessPhone: to.Ptr("hucxvzcvpaupqjkgb"),
	// 				Domain: to.Ptr("snoshqumfsthyofpnrsgyjhszvgtj"),
	// 				NumberOfEmployees: to.Ptr[int64](12),
	// 			},
	// 			ProvisioningState: to.Ptr(armneonpostgres.ResourceProvisioningStateSucceeded),
	// 			PartnerOrganizationProperties: &armneonpostgres.PartnerOrganizationProperties{
	// 				OrganizationID: to.Ptr("hzejhmftwsruhwspvtwoy"),
	// 				OrganizationName: to.Ptr("entity-name"),
	// 				SingleSignOnProperties: &armneonpostgres.SingleSignOnProperties{
	// 					SingleSignOnState: to.Ptr(armneonpostgres.SingleSignOnStatesInitial),
	// 					EnterpriseAppID: to.Ptr("urtjzjfr"),
	// 					SingleSignOnURL: to.Ptr("gcmlwvtxcsjozitm"),
	// 					AADDomains: []*string{
	// 						to.Ptr("mdzbelaiphukhe"),
	// 					},
	// 				},
	// 			},
	// 			ProjectProperties: &armneonpostgres.ProjectProperties{
	// 				EntityID: to.Ptr("entity-id"),
	// 				EntityName: to.Ptr("entity-name"),
	// 				CreatedAt: to.Ptr("eazudrgcnzbydedhwcmgwoauc"),
	// 				ProvisioningState: to.Ptr(armneonpostgres.ResourceProvisioningStateSucceeded),
	// 				Attributes: []*armneonpostgres.Attributes{
	// 					{
	// 						Name: to.Ptr("trhvzyvaqy"),
	// 						Value: to.Ptr("evpkgsskyavybxwwssm"),
	// 					},
	// 				},
	// 				RegionID: to.Ptr("tlcltldfrnxh"),
	// 				Storage: to.Ptr[int64](7),
	// 				PgVersion: to.Ptr[int32](10),
	// 				HistoryRetention: to.Ptr[int32](7),
	// 				DefaultEndpointSettings: &armneonpostgres.DefaultEndpointSettings{
	// 					AutoscalingLimitMinCu: to.Ptr[float32](26),
	// 					AutoscalingLimitMaxCu: to.Ptr[float32](20),
	// 				},
	// 				Branch: &armneonpostgres.BranchProperties{
	// 					EntityID: to.Ptr("entity-id"),
	// 					EntityName: to.Ptr("entity-name"),
	// 					CreatedAt: to.Ptr("dzbqaiixq"),
	// 					ProvisioningState: to.Ptr(armneonpostgres.ResourceProvisioningStateSucceeded),
	// 					Attributes: []*armneonpostgres.Attributes{
	// 						{
	// 							Name: to.Ptr("trhvzyvaqy"),
	// 							Value: to.Ptr("evpkgsskyavybxwwssm"),
	// 						},
	// 					},
	// 					ProjectID: to.Ptr("oik"),
	// 					ParentID: to.Ptr("entity-id"),
	// 					RoleName: to.Ptr("qrrairsupyosxnqotdwhbpc"),
	// 					DatabaseName: to.Ptr("duhxebzhd"),
	// 					Roles: []*armneonpostgres.NeonRoleProperties{
	// 						{
	// 							EntityID: to.Ptr("entity-id"),
	// 							EntityName: to.Ptr("entity-name"),
	// 							CreatedAt: to.Ptr("sqpvswctybrhimiwidhnnlxclfry"),
	// 							ProvisioningState: to.Ptr(armneonpostgres.ResourceProvisioningStateSucceeded),
	// 							Attributes: []*armneonpostgres.Attributes{
	// 								{
	// 									Name: to.Ptr("trhvzyvaqy"),
	// 									Value: to.Ptr("evpkgsskyavybxwwssm"),
	// 								},
	// 							},
	// 							BranchID: to.Ptr("wxbojkmdgaggkfiwqfakdkbyztm"),
	// 							Permissions: []*string{
	// 								to.Ptr("myucqecpjriewzohxvadgkhiudnyx"),
	// 							},
	// 							IsSuperUser: to.Ptr(true),
	// 						},
	// 					},
	// 					Databases: []*armneonpostgres.NeonDatabaseProperties{
	// 						{
	// 							EntityID: to.Ptr("entity-id"),
	// 							EntityName: to.Ptr("entity-name"),
	// 							CreatedAt: to.Ptr("wgdmylla"),
	// 							ProvisioningState: to.Ptr(armneonpostgres.ResourceProvisioningStateSucceeded),
	// 							Attributes: []*armneonpostgres.Attributes{
	// 								{
	// 									Name: to.Ptr("trhvzyvaqy"),
	// 									Value: to.Ptr("evpkgsskyavybxwwssm"),
	// 								},
	// 							},
	// 							BranchID: to.Ptr("orfdwdmzvfvlnrgussvcvoek"),
	// 							OwnerName: to.Ptr("odmbeg"),
	// 						},
	// 					},
	// 					Endpoints: []*armneonpostgres.EndpointProperties{
	// 						{
	// 							EntityID: to.Ptr("entity-id"),
	// 							EntityName: to.Ptr("entity-name"),
	// 							CreatedAt: to.Ptr("vhcilurdd"),
	// 							ProvisioningState: to.Ptr(armneonpostgres.ResourceProvisioningStateSucceeded),
	// 							Attributes: []*armneonpostgres.Attributes{
	// 								{
	// 									Name: to.Ptr("trhvzyvaqy"),
	// 									Value: to.Ptr("evpkgsskyavybxwwssm"),
	// 								},
	// 							},
	// 							ProjectID: to.Ptr("rtvdeeflqzlrpfzhjqhcsfbldw"),
	// 							BranchID: to.Ptr("rzsyrhpfbydxtfkpaa"),
	// 							EndpointType: to.Ptr(armneonpostgres.EndpointTypeReadOnly),
	// 						},
	// 					},
	// 				},
	// 				Roles: []*armneonpostgres.NeonRoleProperties{
	// 					{
	// 						EntityID: to.Ptr("entity-id"),
	// 						EntityName: to.Ptr("entity-name"),
	// 						CreatedAt: to.Ptr("sqpvswctybrhimiwidhnnlxclfry"),
	// 						ProvisioningState: to.Ptr(armneonpostgres.ResourceProvisioningStateSucceeded),
	// 						Attributes: []*armneonpostgres.Attributes{
	// 							{
	// 								Name: to.Ptr("trhvzyvaqy"),
	// 								Value: to.Ptr("evpkgsskyavybxwwssm"),
	// 							},
	// 						},
	// 						BranchID: to.Ptr("wxbojkmdgaggkfiwqfakdkbyztm"),
	// 						Permissions: []*string{
	// 							to.Ptr("myucqecpjriewzohxvadgkhiudnyx"),
	// 						},
	// 						IsSuperUser: to.Ptr(true),
	// 					},
	// 				},
	// 				Databases: []*armneonpostgres.NeonDatabaseProperties{
	// 					{
	// 						EntityID: to.Ptr("entity-id"),
	// 						EntityName: to.Ptr("entity-name"),
	// 						CreatedAt: to.Ptr("wgdmylla"),
	// 						ProvisioningState: to.Ptr(armneonpostgres.ResourceProvisioningStateSucceeded),
	// 						Attributes: []*armneonpostgres.Attributes{
	// 							{
	// 								Name: to.Ptr("trhvzyvaqy"),
	// 								Value: to.Ptr("evpkgsskyavybxwwssm"),
	// 							},
	// 						},
	// 						BranchID: to.Ptr("orfdwdmzvfvlnrgussvcvoek"),
	// 						OwnerName: to.Ptr("odmbeg"),
	// 					},
	// 				},
	// 				Endpoints: []*armneonpostgres.EndpointProperties{
	// 					{
	// 						EntityID: to.Ptr("entity-id"),
	// 						EntityName: to.Ptr("entity-name"),
	// 						CreatedAt: to.Ptr("vhcilurdd"),
	// 						ProvisioningState: to.Ptr(armneonpostgres.ResourceProvisioningStateSucceeded),
	// 						Attributes: []*armneonpostgres.Attributes{
	// 							{
	// 								Name: to.Ptr("trhvzyvaqy"),
	// 								Value: to.Ptr("evpkgsskyavybxwwssm"),
	// 							},
	// 						},
	// 						ProjectID: to.Ptr("rtvdeeflqzlrpfzhjqhcsfbldw"),
	// 						BranchID: to.Ptr("rzsyrhpfbydxtfkpaa"),
	// 						EndpointType: to.Ptr(armneonpostgres.EndpointTypeReadOnly),
	// 					},
	// 				},
	// 			},
	// 		},
	// 		Tags: map[string]*string{
	// 			"key8832": to.Ptr("rvukepuxkykdtqjtwk"),
	// 		},
	// 		Location: to.Ptr("kcdph"),
	// 		ID: to.Ptr("/subscriptions/9B8E3300-C5FA-442B-A259-3F6F614D5BD4/resourceGroups/rgneon/providers/Microsoft.Neon/organizations/test-org"),
	// 		Name: to.Ptr("aocvhndykwhgolfixbqhwtmhiriu"),
	// 		Type: to.Ptr("bvtwhithilvtizpde"),
	// 		SystemData: &armneonpostgres.SystemData{
	// 			CreatedBy: to.Ptr("hnyidmqyvvtsddrwkmrqlwtlew"),
	// 			CreatedByType: to.Ptr(armneonpostgres.CreatedByTypeUser),
	// 			CreatedAt: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2025-03-24T04:03:54.769Z"); return t}()),
	// 			LastModifiedBy: to.Ptr("szuncyyauzxhpzlbcvjkeamp"),
	// 			LastModifiedByType: to.Ptr(armneonpostgres.CreatedByTypeUser),
	// 			LastModifiedAt: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2025-03-24T04:03:54.769Z"); return t}()),
	// 		},
	// 	},
	// }
}

// Generated from example definition: 2025-03-01/Organizations_GetPostgresVersions_MaximumSet_Gen.json
func ExampleOrganizationsClient_GetPostgresVersions_organizationsGetPostgresVersionsMaximumSet() {
	cred, err := azidentity.NewDefaultAzureCredential(nil)
	if err != nil {
		log.Fatalf("failed to obtain a credential: %v", err)
	}
	ctx := context.Background()
	clientFactory, err := armneonpostgres.NewClientFactory("9B8E3300-C5FA-442B-A259-3F6F614D5BD4", cred, nil)
	if err != nil {
		log.Fatalf("failed to create client: %v", err)
	}
	res, err := clientFactory.NewOrganizationsClient().GetPostgresVersions(ctx, "rgneon", &armneonpostgres.OrganizationsClientGetPostgresVersionsOptions{
		Parameters: &armneonpostgres.PgVersion{
			Version: to.Ptr[int32](7),
		}})
	if err != nil {
		log.Fatalf("failed to finish the request: %v", err)
	}
	// You could use response here. We use blank identifier for just demo purposes.
	_ = res
	// If the HTTP response code is 200 as defined in example definition, your response structure would look as follows. Please pay attention that all the values in the output are fake values for just demo purposes.
	// res = armneonpostgres.OrganizationsClientGetPostgresVersionsResponse{
	// 	PgVersionsResult: &armneonpostgres.PgVersionsResult{
	// 		Versions: []*armneonpostgres.PgVersion{
	// 			{
	// 				Version: to.Ptr[int32](7),
	// 			},
	// 		},
	// 	},
	// }
}

// Generated from example definition: 2025-03-01/Organizations_GetPostgresVersions_MinimumSet_Gen.json
func ExampleOrganizationsClient_GetPostgresVersions_organizationsGetPostgresVersionsMinimumSet() {
	cred, err := azidentity.NewDefaultAzureCredential(nil)
	if err != nil {
		log.Fatalf("failed to obtain a credential: %v", err)
	}
	ctx := context.Background()
	clientFactory, err := armneonpostgres.NewClientFactory("9B8E3300-C5FA-442B-A259-3F6F614D5BD4", cred, nil)
	if err != nil {
		log.Fatalf("failed to create client: %v", err)
	}
	res, err := clientFactory.NewOrganizationsClient().GetPostgresVersions(ctx, "rgneon", nil)
	if err != nil {
		log.Fatalf("failed to finish the request: %v", err)
	}
	// You could use response here. We use blank identifier for just demo purposes.
	_ = res
	// If the HTTP response code is 200 as defined in example definition, your response structure would look as follows. Please pay attention that all the values in the output are fake values for just demo purposes.
	// res = armneonpostgres.OrganizationsClientGetPostgresVersionsResponse{
	// 	PgVersionsResult: &armneonpostgres.PgVersionsResult{
	// 		Versions: []*armneonpostgres.PgVersion{
	// 			{
	// 			},
	// 		},
	// 	},
	// }
}

// Generated from example definition: 2025-03-01/Organizations_ListByResourceGroup_MaximumSet_Gen.json
func ExampleOrganizationsClient_NewListByResourceGroupPager() {
	cred, err := azidentity.NewDefaultAzureCredential(nil)
	if err != nil {
		log.Fatalf("failed to obtain a credential: %v", err)
	}
	ctx := context.Background()
	clientFactory, err := armneonpostgres.NewClientFactory("9B8E3300-C5FA-442B-A259-3F6F614D5BD4", cred, nil)
	if err != nil {
		log.Fatalf("failed to create client: %v", err)
	}
	pager := clientFactory.NewOrganizationsClient().NewListByResourceGroupPager("rgneon", nil)
	for pager.More() {
		page, err := pager.NextPage(ctx)
		if err != nil {
			log.Fatalf("failed to advance page: %v", err)
		}
		for _, v := range page.Value {
			// You could use page here. We use blank identifier for just demo purposes.
			_ = v
		}
		// If the HTTP response code is 200 as defined in example definition, your page structure would look as follows. Please pay attention that all the values in the output are fake values for just demo purposes.
		// page = armneonpostgres.OrganizationsClientListByResourceGroupResponse{
		// 	OrganizationResourceListResult: armneonpostgres.OrganizationResourceListResult{
		// 		Value: []*armneonpostgres.OrganizationResource{
		// 			{
		// 				Properties: &armneonpostgres.OrganizationProperties{
		// 					MarketplaceDetails: &armneonpostgres.MarketplaceDetails{
		// 						SubscriptionID: to.Ptr("xfahbbbzwlcwhhjbxarnwfcy"),
		// 						SubscriptionStatus: to.Ptr(armneonpostgres.MarketplaceSubscriptionStatusPendingFulfillmentStart),
		// 						OfferDetails: &armneonpostgres.OfferDetails{
		// 							PublisherID: to.Ptr("eibghzuyqsksouwlgqphhmuxeqeigf"),
		// 							OfferID: to.Ptr("qscggwfdnippiwrrnmuscg"),
		// 							PlanID: to.Ptr("sveqoxtdwxutxmtniuufyrdu"),
		// 							PlanName: to.Ptr("t"),
		// 							TermUnit: to.Ptr("jnxhyql"),
		// 							TermID: to.Ptr("uptombvymytfonj"),
		// 						},
		// 					},
		// 					UserDetails: &armneonpostgres.UserDetails{
		// 						FirstName: to.Ptr("zhelh"),
		// 						LastName: to.Ptr("zbdhouyeozylnerrc"),
		// 						EmailAddress: to.Ptr("test@contoso.com"),
		// 						Upn: to.Ptr("mixcikvxlnhkfugetqlngz"),
		// 						PhoneNumber: to.Ptr("zmejenytglrmjnt"),
		// 					},
		// 					CompanyDetails: &armneonpostgres.CompanyDetails{
		// 						CompanyName: to.Ptr("xtul"),
		// 						Country: to.Ptr("ycmyjdcpyjieemfrthfyxdlvn"),
		// 						OfficeAddress: to.Ptr("icirtoqmmozijk"),
		// 						BusinessPhone: to.Ptr("hucxvzcvpaupqjkgb"),
		// 						Domain: to.Ptr("snoshqumfsthyofpnrsgyjhszvgtj"),
		// 						NumberOfEmployees: to.Ptr[int64](12),
		// 					},
		// 					ProvisioningState: to.Ptr(armneonpostgres.ResourceProvisioningStateSucceeded),
		// 					PartnerOrganizationProperties: &armneonpostgres.PartnerOrganizationProperties{
		// 						OrganizationID: to.Ptr("hzejhmftwsruhwspvtwoy"),
		// 						OrganizationName: to.Ptr("entity-name"),
		// 						SingleSignOnProperties: &armneonpostgres.SingleSignOnProperties{
		// 							SingleSignOnState: to.Ptr(armneonpostgres.SingleSignOnStatesInitial),
		// 							EnterpriseAppID: to.Ptr("urtjzjfr"),
		// 							SingleSignOnURL: to.Ptr("gcmlwvtxcsjozitm"),
		// 							AADDomains: []*string{
		// 								to.Ptr("mdzbelaiphukhe"),
		// 							},
		// 						},
		// 					},
		// 					ProjectProperties: &armneonpostgres.ProjectProperties{
		// 						EntityID: to.Ptr("entity-id"),
		// 						EntityName: to.Ptr("entity-name"),
		// 						CreatedAt: to.Ptr("eazudrgcnzbydedhwcmgwoauc"),
		// 						ProvisioningState: to.Ptr(armneonpostgres.ResourceProvisioningStateSucceeded),
		// 						Attributes: []*armneonpostgres.Attributes{
		// 							{
		// 								Name: to.Ptr("trhvzyvaqy"),
		// 								Value: to.Ptr("evpkgsskyavybxwwssm"),
		// 							},
		// 						},
		// 						RegionID: to.Ptr("tlcltldfrnxh"),
		// 						Storage: to.Ptr[int64](7),
		// 						PgVersion: to.Ptr[int32](10),
		// 						HistoryRetention: to.Ptr[int32](7),
		// 						DefaultEndpointSettings: &armneonpostgres.DefaultEndpointSettings{
		// 							AutoscalingLimitMinCu: to.Ptr[float32](26),
		// 							AutoscalingLimitMaxCu: to.Ptr[float32](20),
		// 						},
		// 						Branch: &armneonpostgres.BranchProperties{
		// 							EntityID: to.Ptr("entity-id"),
		// 							EntityName: to.Ptr("entity-name"),
		// 							CreatedAt: to.Ptr("dzbqaiixq"),
		// 							ProvisioningState: to.Ptr(armneonpostgres.ResourceProvisioningStateSucceeded),
		// 							Attributes: []*armneonpostgres.Attributes{
		// 								{
		// 									Name: to.Ptr("trhvzyvaqy"),
		// 									Value: to.Ptr("evpkgsskyavybxwwssm"),
		// 								},
		// 							},
		// 							ProjectID: to.Ptr("oik"),
		// 							ParentID: to.Ptr("entity-id"),
		// 							RoleName: to.Ptr("qrrairsupyosxnqotdwhbpc"),
		// 							DatabaseName: to.Ptr("duhxebzhd"),
		// 							Roles: []*armneonpostgres.NeonRoleProperties{
		// 								{
		// 									EntityID: to.Ptr("entity-id"),
		// 									EntityName: to.Ptr("entity-name"),
		// 									CreatedAt: to.Ptr("sqpvswctybrhimiwidhnnlxclfry"),
		// 									ProvisioningState: to.Ptr(armneonpostgres.ResourceProvisioningStateSucceeded),
		// 									Attributes: []*armneonpostgres.Attributes{
		// 										{
		// 											Name: to.Ptr("trhvzyvaqy"),
		// 											Value: to.Ptr("evpkgsskyavybxwwssm"),
		// 										},
		// 									},
		// 									BranchID: to.Ptr("wxbojkmdgaggkfiwqfakdkbyztm"),
		// 									Permissions: []*string{
		// 										to.Ptr("myucqecpjriewzohxvadgkhiudnyx"),
		// 									},
		// 									IsSuperUser: to.Ptr(true),
		// 								},
		// 							},
		// 							Databases: []*armneonpostgres.NeonDatabaseProperties{
		// 								{
		// 									EntityID: to.Ptr("entity-id"),
		// 									EntityName: to.Ptr("entity-name"),
		// 									CreatedAt: to.Ptr("wgdmylla"),
		// 									ProvisioningState: to.Ptr(armneonpostgres.ResourceProvisioningStateSucceeded),
		// 									Attributes: []*armneonpostgres.Attributes{
		// 										{
		// 											Name: to.Ptr("trhvzyvaqy"),
		// 											Value: to.Ptr("evpkgsskyavybxwwssm"),
		// 										},
		// 									},
		// 									BranchID: to.Ptr("orfdwdmzvfvlnrgussvcvoek"),
		// 									OwnerName: to.Ptr("odmbeg"),
		// 								},
		// 							},
		// 							Endpoints: []*armneonpostgres.EndpointProperties{
		// 								{
		// 									EntityID: to.Ptr("entity-id"),
		// 									EntityName: to.Ptr("entity-name"),
		// 									CreatedAt: to.Ptr("vhcilurdd"),
		// 									ProvisioningState: to.Ptr(armneonpostgres.ResourceProvisioningStateSucceeded),
		// 									Attributes: []*armneonpostgres.Attributes{
		// 										{
		// 											Name: to.Ptr("trhvzyvaqy"),
		// 											Value: to.Ptr("evpkgsskyavybxwwssm"),
		// 										},
		// 									},
		// 									ProjectID: to.Ptr("rtvdeeflqzlrpfzhjqhcsfbldw"),
		// 									BranchID: to.Ptr("rzsyrhpfbydxtfkpaa"),
		// 									EndpointType: to.Ptr(armneonpostgres.EndpointTypeReadOnly),
		// 								},
		// 							},
		// 						},
		// 						Roles: []*armneonpostgres.NeonRoleProperties{
		// 							{
		// 								EntityID: to.Ptr("entity-id"),
		// 								EntityName: to.Ptr("entity-name"),
		// 								CreatedAt: to.Ptr("sqpvswctybrhimiwidhnnlxclfry"),
		// 								ProvisioningState: to.Ptr(armneonpostgres.ResourceProvisioningStateSucceeded),
		// 								Attributes: []*armneonpostgres.Attributes{
		// 									{
		// 										Name: to.Ptr("trhvzyvaqy"),
		// 										Value: to.Ptr("evpkgsskyavybxwwssm"),
		// 									},
		// 								},
		// 								BranchID: to.Ptr("wxbojkmdgaggkfiwqfakdkbyztm"),
		// 								Permissions: []*string{
		// 									to.Ptr("myucqecpjriewzohxvadgkhiudnyx"),
		// 								},
		// 								IsSuperUser: to.Ptr(true),
		// 							},
		// 						},
		// 						Databases: []*armneonpostgres.NeonDatabaseProperties{
		// 							{
		// 								EntityID: to.Ptr("entity-id"),
		// 								EntityName: to.Ptr("entity-name"),
		// 								CreatedAt: to.Ptr("wgdmylla"),
		// 								ProvisioningState: to.Ptr(armneonpostgres.ResourceProvisioningStateSucceeded),
		// 								Attributes: []*armneonpostgres.Attributes{
		// 									{
		// 										Name: to.Ptr("trhvzyvaqy"),
		// 										Value: to.Ptr("evpkgsskyavybxwwssm"),
		// 									},
		// 								},
		// 								BranchID: to.Ptr("orfdwdmzvfvlnrgussvcvoek"),
		// 								OwnerName: to.Ptr("odmbeg"),
		// 							},
		// 						},
		// 						Endpoints: []*armneonpostgres.EndpointProperties{
		// 							{
		// 								EntityID: to.Ptr("entity-id"),
		// 								EntityName: to.Ptr("entity-name"),
		// 								CreatedAt: to.Ptr("vhcilurdd"),
		// 								ProvisioningState: to.Ptr(armneonpostgres.ResourceProvisioningStateSucceeded),
		// 								Attributes: []*armneonpostgres.Attributes{
		// 									{
		// 										Name: to.Ptr("trhvzyvaqy"),
		// 										Value: to.Ptr("evpkgsskyavybxwwssm"),
		// 									},
		// 								},
		// 								ProjectID: to.Ptr("rtvdeeflqzlrpfzhjqhcsfbldw"),
		// 								BranchID: to.Ptr("rzsyrhpfbydxtfkpaa"),
		// 								EndpointType: to.Ptr(armneonpostgres.EndpointTypeReadOnly),
		// 							},
		// 						},
		// 					},
		// 				},
		// 				Tags: map[string]*string{
		// 					"key8832": to.Ptr("rvukepuxkykdtqjtwk"),
		// 				},
		// 				Location: to.Ptr("kcdph"),
		// 				ID: to.Ptr("/subscriptions/9B8E3300-C5FA-442B-A259-3F6F614D5BD4/resourceGroups/rgneon/providers/Microsoft.Neon/organizations/organization-name"),
		// 				Name: to.Ptr("aocvhndykwhgolfixbqhwtmhiriu"),
		// 				Type: to.Ptr("bvtwhithilvtizpde"),
		// 				SystemData: &armneonpostgres.SystemData{
		// 					CreatedBy: to.Ptr("hnyidmqyvvtsddrwkmrqlwtlew"),
		// 					CreatedByType: to.Ptr(armneonpostgres.CreatedByTypeUser),
		// 					CreatedAt: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2025-03-24T04:03:54.769Z"); return t}()),
		// 					LastModifiedBy: to.Ptr("szuncyyauzxhpzlbcvjkeamp"),
		// 					LastModifiedByType: to.Ptr(armneonpostgres.CreatedByTypeUser),
		// 					LastModifiedAt: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2025-03-24T04:03:54.769Z"); return t}()),
		// 				},
		// 			},
		// 		},
		// 		NextLink: to.Ptr("https://microsoft.com/a"),
		// 	},
		// }
	}
}

// Generated from example definition: 2025-03-01/Organizations_ListBySubscription_MaximumSet_Gen.json
func ExampleOrganizationsClient_NewListBySubscriptionPager() {
	cred, err := azidentity.NewDefaultAzureCredential(nil)
	if err != nil {
		log.Fatalf("failed to obtain a credential: %v", err)
	}
	ctx := context.Background()
	clientFactory, err := armneonpostgres.NewClientFactory("9B8E3300-C5FA-442B-A259-3F6F614D5BD4", cred, nil)
	if err != nil {
		log.Fatalf("failed to create client: %v", err)
	}
	pager := clientFactory.NewOrganizationsClient().NewListBySubscriptionPager(nil)
	for pager.More() {
		page, err := pager.NextPage(ctx)
		if err != nil {
			log.Fatalf("failed to advance page: %v", err)
		}
		for _, v := range page.Value {
			// You could use page here. We use blank identifier for just demo purposes.
			_ = v
		}
		// If the HTTP response code is 200 as defined in example definition, your page structure would look as follows. Please pay attention that all the values in the output are fake values for just demo purposes.
		// page = armneonpostgres.OrganizationsClientListBySubscriptionResponse{
		// 	OrganizationResourceListResult: armneonpostgres.OrganizationResourceListResult{
		// 		Value: []*armneonpostgres.OrganizationResource{
		// 			{
		// 				Properties: &armneonpostgres.OrganizationProperties{
		// 					MarketplaceDetails: &armneonpostgres.MarketplaceDetails{
		// 						SubscriptionID: to.Ptr("xfahbbbzwlcwhhjbxarnwfcy"),
		// 						SubscriptionStatus: to.Ptr(armneonpostgres.MarketplaceSubscriptionStatusPendingFulfillmentStart),
		// 						OfferDetails: &armneonpostgres.OfferDetails{
		// 							PublisherID: to.Ptr("eibghzuyqsksouwlgqphhmuxeqeigf"),
		// 							OfferID: to.Ptr("qscggwfdnippiwrrnmuscg"),
		// 							PlanID: to.Ptr("sveqoxtdwxutxmtniuufyrdu"),
		// 							PlanName: to.Ptr("t"),
		// 							TermUnit: to.Ptr("jnxhyql"),
		// 							TermID: to.Ptr("uptombvymytfonj"),
		// 						},
		// 					},
		// 					UserDetails: &armneonpostgres.UserDetails{
		// 						FirstName: to.Ptr("zhelh"),
		// 						LastName: to.Ptr("zbdhouyeozylnerrc"),
		// 						EmailAddress: to.Ptr("test@contoso.com"),
		// 						Upn: to.Ptr("mixcikvxlnhkfugetqlngz"),
		// 						PhoneNumber: to.Ptr("zmejenytglrmjnt"),
		// 					},
		// 					CompanyDetails: &armneonpostgres.CompanyDetails{
		// 						CompanyName: to.Ptr("xtul"),
		// 						Country: to.Ptr("ycmyjdcpyjieemfrthfyxdlvn"),
		// 						OfficeAddress: to.Ptr("icirtoqmmozijk"),
		// 						BusinessPhone: to.Ptr("hucxvzcvpaupqjkgb"),
		// 						Domain: to.Ptr("snoshqumfsthyofpnrsgyjhszvgtj"),
		// 						NumberOfEmployees: to.Ptr[int64](12),
		// 					},
		// 					ProvisioningState: to.Ptr(armneonpostgres.ResourceProvisioningStateSucceeded),
		// 					PartnerOrganizationProperties: &armneonpostgres.PartnerOrganizationProperties{
		// 						OrganizationID: to.Ptr("hzejhmftwsruhwspvtwoy"),
		// 						OrganizationName: to.Ptr("entity-name"),
		// 						SingleSignOnProperties: &armneonpostgres.SingleSignOnProperties{
		// 							SingleSignOnState: to.Ptr(armneonpostgres.SingleSignOnStatesInitial),
		// 							EnterpriseAppID: to.Ptr("urtjzjfr"),
		// 							SingleSignOnURL: to.Ptr("gcmlwvtxcsjozitm"),
		// 							AADDomains: []*string{
		// 								to.Ptr("mdzbelaiphukhe"),
		// 							},
		// 						},
		// 					},
		// 					ProjectProperties: &armneonpostgres.ProjectProperties{
		// 						EntityID: to.Ptr("entity-id"),
		// 						EntityName: to.Ptr("entity-name"),
		// 						CreatedAt: to.Ptr("eazudrgcnzbydedhwcmgwoauc"),
		// 						ProvisioningState: to.Ptr(armneonpostgres.ResourceProvisioningStateSucceeded),
		// 						Attributes: []*armneonpostgres.Attributes{
		// 							{
		// 								Name: to.Ptr("trhvzyvaqy"),
		// 								Value: to.Ptr("evpkgsskyavybxwwssm"),
		// 							},
		// 						},
		// 						RegionID: to.Ptr("tlcltldfrnxh"),
		// 						Storage: to.Ptr[int64](7),
		// 						PgVersion: to.Ptr[int32](10),
		// 						HistoryRetention: to.Ptr[int32](7),
		// 						DefaultEndpointSettings: &armneonpostgres.DefaultEndpointSettings{
		// 							AutoscalingLimitMinCu: to.Ptr[float32](26),
		// 							AutoscalingLimitMaxCu: to.Ptr[float32](20),
		// 						},
		// 						Branch: &armneonpostgres.BranchProperties{
		// 							EntityID: to.Ptr("entity-id"),
		// 							EntityName: to.Ptr("entity-name"),
		// 							CreatedAt: to.Ptr("dzbqaiixq"),
		// 							ProvisioningState: to.Ptr(armneonpostgres.ResourceProvisioningStateSucceeded),
		// 							Attributes: []*armneonpostgres.Attributes{
		// 								{
		// 									Name: to.Ptr("trhvzyvaqy"),
		// 									Value: to.Ptr("evpkgsskyavybxwwssm"),
		// 								},
		// 							},
		// 							ProjectID: to.Ptr("oik"),
		// 							ParentID: to.Ptr("entity-id"),
		// 							RoleName: to.Ptr("qrrairsupyosxnqotdwhbpc"),
		// 							DatabaseName: to.Ptr("duhxebzhd"),
		// 							Roles: []*armneonpostgres.NeonRoleProperties{
		// 								{
		// 									EntityID: to.Ptr("entity-id"),
		// 									EntityName: to.Ptr("entity-name"),
		// 									CreatedAt: to.Ptr("sqpvswctybrhimiwidhnnlxclfry"),
		// 									ProvisioningState: to.Ptr(armneonpostgres.ResourceProvisioningStateSucceeded),
		// 									Attributes: []*armneonpostgres.Attributes{
		// 										{
		// 											Name: to.Ptr("trhvzyvaqy"),
		// 											Value: to.Ptr("evpkgsskyavybxwwssm"),
		// 										},
		// 									},
		// 									BranchID: to.Ptr("wxbojkmdgaggkfiwqfakdkbyztm"),
		// 									Permissions: []*string{
		// 										to.Ptr("myucqecpjriewzohxvadgkhiudnyx"),
		// 									},
		// 									IsSuperUser: to.Ptr(true),
		// 								},
		// 							},
		// 							Databases: []*armneonpostgres.NeonDatabaseProperties{
		// 								{
		// 									EntityID: to.Ptr("entity-id"),
		// 									EntityName: to.Ptr("entity-name"),
		// 									CreatedAt: to.Ptr("wgdmylla"),
		// 									ProvisioningState: to.Ptr(armneonpostgres.ResourceProvisioningStateSucceeded),
		// 									Attributes: []*armneonpostgres.Attributes{
		// 										{
		// 											Name: to.Ptr("trhvzyvaqy"),
		// 											Value: to.Ptr("evpkgsskyavybxwwssm"),
		// 										},
		// 									},
		// 									BranchID: to.Ptr("orfdwdmzvfvlnrgussvcvoek"),
		// 									OwnerName: to.Ptr("odmbeg"),
		// 								},
		// 							},
		// 							Endpoints: []*armneonpostgres.EndpointProperties{
		// 								{
		// 									EntityID: to.Ptr("entity-id"),
		// 									EntityName: to.Ptr("entity-name"),
		// 									CreatedAt: to.Ptr("vhcilurdd"),
		// 									ProvisioningState: to.Ptr(armneonpostgres.ResourceProvisioningStateSucceeded),
		// 									Attributes: []*armneonpostgres.Attributes{
		// 										{
		// 											Name: to.Ptr("trhvzyvaqy"),
		// 											Value: to.Ptr("evpkgsskyavybxwwssm"),
		// 										},
		// 									},
		// 									ProjectID: to.Ptr("rtvdeeflqzlrpfzhjqhcsfbldw"),
		// 									BranchID: to.Ptr("rzsyrhpfbydxtfkpaa"),
		// 									EndpointType: to.Ptr(armneonpostgres.EndpointTypeReadOnly),
		// 								},
		// 							},
		// 						},
		// 						Roles: []*armneonpostgres.NeonRoleProperties{
		// 							{
		// 								EntityID: to.Ptr("entity-id"),
		// 								EntityName: to.Ptr("entity-name"),
		// 								CreatedAt: to.Ptr("sqpvswctybrhimiwidhnnlxclfry"),
		// 								ProvisioningState: to.Ptr(armneonpostgres.ResourceProvisioningStateSucceeded),
		// 								Attributes: []*armneonpostgres.Attributes{
		// 									{
		// 										Name: to.Ptr("trhvzyvaqy"),
		// 										Value: to.Ptr("evpkgsskyavybxwwssm"),
		// 									},
		// 								},
		// 								BranchID: to.Ptr("wxbojkmdgaggkfiwqfakdkbyztm"),
		// 								Permissions: []*string{
		// 									to.Ptr("myucqecpjriewzohxvadgkhiudnyx"),
		// 								},
		// 								IsSuperUser: to.Ptr(true),
		// 							},
		// 						},
		// 						Databases: []*armneonpostgres.NeonDatabaseProperties{
		// 							{
		// 								EntityID: to.Ptr("entity-id"),
		// 								EntityName: to.Ptr("entity-name"),
		// 								CreatedAt: to.Ptr("wgdmylla"),
		// 								ProvisioningState: to.Ptr(armneonpostgres.ResourceProvisioningStateSucceeded),
		// 								Attributes: []*armneonpostgres.Attributes{
		// 									{
		// 										Name: to.Ptr("trhvzyvaqy"),
		// 										Value: to.Ptr("evpkgsskyavybxwwssm"),
		// 									},
		// 								},
		// 								BranchID: to.Ptr("orfdwdmzvfvlnrgussvcvoek"),
		// 								OwnerName: to.Ptr("odmbeg"),
		// 							},
		// 						},
		// 						Endpoints: []*armneonpostgres.EndpointProperties{
		// 							{
		// 								EntityID: to.Ptr("entity-id"),
		// 								EntityName: to.Ptr("entity-name"),
		// 								CreatedAt: to.Ptr("vhcilurdd"),
		// 								ProvisioningState: to.Ptr(armneonpostgres.ResourceProvisioningStateSucceeded),
		// 								Attributes: []*armneonpostgres.Attributes{
		// 									{
		// 										Name: to.Ptr("trhvzyvaqy"),
		// 										Value: to.Ptr("evpkgsskyavybxwwssm"),
		// 									},
		// 								},
		// 								ProjectID: to.Ptr("rtvdeeflqzlrpfzhjqhcsfbldw"),
		// 								BranchID: to.Ptr("rzsyrhpfbydxtfkpaa"),
		// 								EndpointType: to.Ptr(armneonpostgres.EndpointTypeReadOnly),
		// 							},
		// 						},
		// 					},
		// 				},
		// 				Tags: map[string]*string{
		// 					"key8832": to.Ptr("rvukepuxkykdtqjtwk"),
		// 				},
		// 				Location: to.Ptr("kcdph"),
		// 				ID: to.Ptr("/subscriptions/9B8E3300-C5FA-442B-A259-3F6F614D5BD4/resourceGroups/rg/providers/Microsoft.Neon/organizations/organizationId"),
		// 				Name: to.Ptr("aocvhndykwhgolfixbqhwtmhiriu"),
		// 				Type: to.Ptr("bvtwhithilvtizpde"),
		// 				SystemData: &armneonpostgres.SystemData{
		// 					CreatedBy: to.Ptr("hnyidmqyvvtsddrwkmrqlwtlew"),
		// 					CreatedByType: to.Ptr(armneonpostgres.CreatedByTypeUser),
		// 					CreatedAt: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2025-03-24T04:03:54.769Z"); return t}()),
		// 					LastModifiedBy: to.Ptr("szuncyyauzxhpzlbcvjkeamp"),
		// 					LastModifiedByType: to.Ptr(armneonpostgres.CreatedByTypeUser),
		// 					LastModifiedAt: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2025-03-24T04:03:54.769Z"); return t}()),
		// 				},
		// 			},
		// 		},
		// 		NextLink: to.Ptr("https://microsoft.com/a"),
		// 	},
		// }
	}
}

// Generated from example definition: 2025-03-01/Organizations_Update_MaximumSet_Gen.json
func ExampleOrganizationsClient_BeginUpdate() {
	cred, err := azidentity.NewDefaultAzureCredential(nil)
	if err != nil {
		log.Fatalf("failed to obtain a credential: %v", err)
	}
	ctx := context.Background()
	clientFactory, err := armneonpostgres.NewClientFactory("9B8E3300-C5FA-442B-A259-3F6F614D5BD4", cred, nil)
	if err != nil {
		log.Fatalf("failed to create client: %v", err)
	}
	poller, err := clientFactory.NewOrganizationsClient().BeginUpdate(ctx, "rgneon", "test-org", armneonpostgres.OrganizationResource{
		Properties: &armneonpostgres.OrganizationProperties{
			UserDetails: &armneonpostgres.UserDetails{
				FirstName:    to.Ptr("zhelh"),
				LastName:     to.Ptr("zbdhouyeozylnerrc"),
				EmailAddress: to.Ptr("test@contoso.com"),
				Upn:          to.Ptr("mixcikvxlnhkfugetqlngz"),
				PhoneNumber:  to.Ptr("zmejenytglrmjnt"),
			},
			CompanyDetails: &armneonpostgres.CompanyDetails{
				CompanyName:       to.Ptr("xtul"),
				Country:           to.Ptr("ycmyjdcpyjieemfrthfyxdlvn"),
				OfficeAddress:     to.Ptr("icirtoqmmozijk"),
				BusinessPhone:     to.Ptr("hucxvzcvpaupqjkgb"),
				Domain:            to.Ptr("snoshqumfsthyofpnrsgyjhszvgtj"),
				NumberOfEmployees: to.Ptr[int64](12),
			},
			PartnerOrganizationProperties: &armneonpostgres.PartnerOrganizationProperties{
				OrganizationID:   to.Ptr("fynmpcbivqkwqdfhrmsyusjd"),
				OrganizationName: to.Ptr("entity-name"),
				SingleSignOnProperties: &armneonpostgres.SingleSignOnProperties{
					SingleSignOnState: to.Ptr(armneonpostgres.SingleSignOnStatesInitial),
					EnterpriseAppID:   to.Ptr("urtjzjfr"),
					SingleSignOnURL:   to.Ptr("gcmlwvtxcsjozitm"),
					AADDomains: []*string{
						to.Ptr("mdzbelaiphukhe"),
					},
				},
			},
			ProjectProperties: &armneonpostgres.ProjectProperties{
				EntityName: to.Ptr("entity-name"),
				Attributes: []*armneonpostgres.Attributes{
					{
						Name:  to.Ptr("trhvzyvaqy"),
						Value: to.Ptr("evpkgsskyavybxwwssm"),
					},
				},
				RegionID:         to.Ptr("vxvmjwuttpiakirzdf"),
				Storage:          to.Ptr[int64](23),
				PgVersion:        to.Ptr[int32](16),
				HistoryRetention: to.Ptr[int32](16),
				DefaultEndpointSettings: &armneonpostgres.DefaultEndpointSettings{
					AutoscalingLimitMinCu: to.Ptr[float32](8),
					AutoscalingLimitMaxCu: to.Ptr[float32](4),
				},
				Branch: &armneonpostgres.BranchProperties{
					EntityName: to.Ptr("entity-name"),
					Attributes: []*armneonpostgres.Attributes{
						{
							Name:  to.Ptr("trhvzyvaqy"),
							Value: to.Ptr("evpkgsskyavybxwwssm"),
						},
					},
					ProjectID:    to.Ptr("oik"),
					ParentID:     to.Ptr("entity-id"),
					RoleName:     to.Ptr("qrrairsupyosxnqotdwhbpc"),
					DatabaseName: to.Ptr("duhxebzhd"),
					Roles: []*armneonpostgres.NeonRoleProperties{
						{
							EntityName: to.Ptr("entity-name"),
							Attributes: []*armneonpostgres.Attributes{
								{
									Name:  to.Ptr("trhvzyvaqy"),
									Value: to.Ptr("evpkgsskyavybxwwssm"),
								},
							},
							BranchID: to.Ptr("wxbojkmdgaggkfiwqfakdkbyztm"),
							Permissions: []*string{
								to.Ptr("myucqecpjriewzohxvadgkhiudnyx"),
							},
							IsSuperUser: to.Ptr(true),
						},
					},
					Databases: []*armneonpostgres.NeonDatabaseProperties{
						{
							EntityName: to.Ptr("entity-name"),
							Attributes: []*armneonpostgres.Attributes{
								{
									Name:  to.Ptr("trhvzyvaqy"),
									Value: to.Ptr("evpkgsskyavybxwwssm"),
								},
							},
							BranchID:  to.Ptr("orfdwdmzvfvlnrgussvcvoek"),
							OwnerName: to.Ptr("odmbeg"),
						},
					},
					Endpoints: []*armneonpostgres.EndpointProperties{
						{
							EntityName: to.Ptr("entity-name"),
							Attributes: []*armneonpostgres.Attributes{
								{
									Name:  to.Ptr("trhvzyvaqy"),
									Value: to.Ptr("evpkgsskyavybxwwssm"),
								},
							},
							ProjectID:    to.Ptr("rtvdeeflqzlrpfzhjqhcsfbldw"),
							BranchID:     to.Ptr("rzsyrhpfbydxtfkpaa"),
							EndpointType: to.Ptr(armneonpostgres.EndpointTypeReadOnly),
						},
					},
				},
				Roles: []*armneonpostgres.NeonRoleProperties{
					{
						EntityName: to.Ptr("entity-name"),
						Attributes: []*armneonpostgres.Attributes{
							{
								Name:  to.Ptr("trhvzyvaqy"),
								Value: to.Ptr("evpkgsskyavybxwwssm"),
							},
						},
						BranchID: to.Ptr("wxbojkmdgaggkfiwqfakdkbyztm"),
						Permissions: []*string{
							to.Ptr("myucqecpjriewzohxvadgkhiudnyx"),
						},
						IsSuperUser: to.Ptr(true),
					},
				},
				Databases: []*armneonpostgres.NeonDatabaseProperties{
					{
						EntityName: to.Ptr("entity-name"),
						Attributes: []*armneonpostgres.Attributes{
							{
								Name:  to.Ptr("trhvzyvaqy"),
								Value: to.Ptr("evpkgsskyavybxwwssm"),
							},
						},
						BranchID:  to.Ptr("orfdwdmzvfvlnrgussvcvoek"),
						OwnerName: to.Ptr("odmbeg"),
					},
				},
				Endpoints: []*armneonpostgres.EndpointProperties{
					{
						EntityName: to.Ptr("entity-name"),
						Attributes: []*armneonpostgres.Attributes{
							{
								Name:  to.Ptr("trhvzyvaqy"),
								Value: to.Ptr("evpkgsskyavybxwwssm"),
							},
						},
						ProjectID:    to.Ptr("rtvdeeflqzlrpfzhjqhcsfbldw"),
						BranchID:     to.Ptr("rzsyrhpfbydxtfkpaa"),
						EndpointType: to.Ptr(armneonpostgres.EndpointTypeReadOnly),
					},
				},
			},
		},
		Tags: map[string]*string{
			"key609": to.Ptr("qyosjypklxtiamqebd"),
		},
	}, nil)
	if err != nil {
		log.Fatalf("failed to finish the request: %v", err)
	}
	res, err := poller.PollUntilDone(ctx, nil)
	if err != nil {
		log.Fatalf("failed to pull the result: %v", err)
	}
	// You could use response here. We use blank identifier for just demo purposes.
	_ = res
	// If the HTTP response code is 200 as defined in example definition, your response structure would look as follows. Please pay attention that all the values in the output are fake values for just demo purposes.
	// res = armneonpostgres.OrganizationsClientUpdateResponse{
	// 	OrganizationResource: &armneonpostgres.OrganizationResource{
	// 		Properties: &armneonpostgres.OrganizationProperties{
	// 			MarketplaceDetails: &armneonpostgres.MarketplaceDetails{
	// 				SubscriptionID: to.Ptr("xfahbbbzwlcwhhjbxarnwfcy"),
	// 				SubscriptionStatus: to.Ptr(armneonpostgres.MarketplaceSubscriptionStatusPendingFulfillmentStart),
	// 				OfferDetails: &armneonpostgres.OfferDetails{
	// 					PublisherID: to.Ptr("eibghzuyqsksouwlgqphhmuxeqeigf"),
	// 					OfferID: to.Ptr("qscggwfdnippiwrrnmuscg"),
	// 					PlanID: to.Ptr("sveqoxtdwxutxmtniuufyrdu"),
	// 					PlanName: to.Ptr("t"),
	// 					TermUnit: to.Ptr("jnxhyql"),
	// 					TermID: to.Ptr("uptombvymytfonj"),
	// 				},
	// 			},
	// 			UserDetails: &armneonpostgres.UserDetails{
	// 				FirstName: to.Ptr("zhelh"),
	// 				LastName: to.Ptr("zbdhouyeozylnerrc"),
	// 				EmailAddress: to.Ptr("test@contoso.com"),
	// 				Upn: to.Ptr("mixcikvxlnhkfugetqlngz"),
	// 				PhoneNumber: to.Ptr("zmejenytglrmjnt"),
	// 			},
	// 			CompanyDetails: &armneonpostgres.CompanyDetails{
	// 				CompanyName: to.Ptr("xtul"),
	// 				Country: to.Ptr("ycmyjdcpyjieemfrthfyxdlvn"),
	// 				OfficeAddress: to.Ptr("icirtoqmmozijk"),
	// 				BusinessPhone: to.Ptr("hucxvzcvpaupqjkgb"),
	// 				Domain: to.Ptr("snoshqumfsthyofpnrsgyjhszvgtj"),
	// 				NumberOfEmployees: to.Ptr[int64](12),
	// 			},
	// 			ProvisioningState: to.Ptr(armneonpostgres.ResourceProvisioningStateSucceeded),
	// 			PartnerOrganizationProperties: &armneonpostgres.PartnerOrganizationProperties{
	// 				OrganizationID: to.Ptr("fynmpcbivqkwqdfhrmsyusjd"),
	// 				OrganizationName: to.Ptr("entity-name"),
	// 				SingleSignOnProperties: &armneonpostgres.SingleSignOnProperties{
	// 					SingleSignOnState: to.Ptr(armneonpostgres.SingleSignOnStatesInitial),
	// 					EnterpriseAppID: to.Ptr("urtjzjfr"),
	// 					SingleSignOnURL: to.Ptr("gcmlwvtxcsjozitm"),
	// 					AADDomains: []*string{
	// 						to.Ptr("mdzbelaiphukhe"),
	// 					},
	// 				},
	// 			},
	// 			ProjectProperties: &armneonpostgres.ProjectProperties{
	// 				EntityID: to.Ptr("entity-id"),
	// 				EntityName: to.Ptr("entity-name"),
	// 				CreatedAt: to.Ptr("eazudrgcnzbydedhwcmgwoauc"),
	// 				ProvisioningState: to.Ptr(armneonpostgres.ResourceProvisioningStateSucceeded),
	// 				Attributes: []*armneonpostgres.Attributes{
	// 					{
	// 						Name: to.Ptr("trhvzyvaqy"),
	// 						Value: to.Ptr("evpkgsskyavybxwwssm"),
	// 					},
	// 				},
	// 				RegionID: to.Ptr("vxvmjwuttpiakirzdf"),
	// 				Storage: to.Ptr[int64](23),
	// 				PgVersion: to.Ptr[int32](16),
	// 				HistoryRetention: to.Ptr[int32](16),
	// 				DefaultEndpointSettings: &armneonpostgres.DefaultEndpointSettings{
	// 					AutoscalingLimitMinCu: to.Ptr[float32](8),
	// 					AutoscalingLimitMaxCu: to.Ptr[float32](4),
	// 				},
	// 				Branch: &armneonpostgres.BranchProperties{
	// 					EntityID: to.Ptr("entity-id"),
	// 					EntityName: to.Ptr("entity-name"),
	// 					CreatedAt: to.Ptr("dzbqaiixq"),
	// 					ProvisioningState: to.Ptr(armneonpostgres.ResourceProvisioningStateSucceeded),
	// 					Attributes: []*armneonpostgres.Attributes{
	// 						{
	// 							Name: to.Ptr("trhvzyvaqy"),
	// 							Value: to.Ptr("evpkgsskyavybxwwssm"),
	// 						},
	// 					},
	// 					ProjectID: to.Ptr("oik"),
	// 					ParentID: to.Ptr("entity-id"),
	// 					RoleName: to.Ptr("qrrairsupyosxnqotdwhbpc"),
	// 					DatabaseName: to.Ptr("duhxebzhd"),
	// 					Roles: []*armneonpostgres.NeonRoleProperties{
	// 						{
	// 							EntityID: to.Ptr("entity-id"),
	// 							EntityName: to.Ptr("entity-name"),
	// 							CreatedAt: to.Ptr("sqpvswctybrhimiwidhnnlxclfry"),
	// 							ProvisioningState: to.Ptr(armneonpostgres.ResourceProvisioningStateSucceeded),
	// 							Attributes: []*armneonpostgres.Attributes{
	// 								{
	// 									Name: to.Ptr("trhvzyvaqy"),
	// 									Value: to.Ptr("evpkgsskyavybxwwssm"),
	// 								},
	// 							},
	// 							BranchID: to.Ptr("wxbojkmdgaggkfiwqfakdkbyztm"),
	// 							Permissions: []*string{
	// 								to.Ptr("myucqecpjriewzohxvadgkhiudnyx"),
	// 							},
	// 							IsSuperUser: to.Ptr(true),
	// 						},
	// 					},
	// 					Databases: []*armneonpostgres.NeonDatabaseProperties{
	// 						{
	// 							EntityID: to.Ptr("entity-id"),
	// 							EntityName: to.Ptr("entity-name"),
	// 							CreatedAt: to.Ptr("wgdmylla"),
	// 							ProvisioningState: to.Ptr(armneonpostgres.ResourceProvisioningStateSucceeded),
	// 							Attributes: []*armneonpostgres.Attributes{
	// 								{
	// 									Name: to.Ptr("trhvzyvaqy"),
	// 									Value: to.Ptr("evpkgsskyavybxwwssm"),
	// 								},
	// 							},
	// 							BranchID: to.Ptr("orfdwdmzvfvlnrgussvcvoek"),
	// 							OwnerName: to.Ptr("odmbeg"),
	// 						},
	// 					},
	// 					Endpoints: []*armneonpostgres.EndpointProperties{
	// 						{
	// 							EntityID: to.Ptr("entity-id"),
	// 							EntityName: to.Ptr("entity-name"),
	// 							CreatedAt: to.Ptr("vhcilurdd"),
	// 							ProvisioningState: to.Ptr(armneonpostgres.ResourceProvisioningStateSucceeded),
	// 							Attributes: []*armneonpostgres.Attributes{
	// 								{
	// 									Name: to.Ptr("trhvzyvaqy"),
	// 									Value: to.Ptr("evpkgsskyavybxwwssm"),
	// 								},
	// 							},
	// 							ProjectID: to.Ptr("rtvdeeflqzlrpfzhjqhcsfbldw"),
	// 							BranchID: to.Ptr("rzsyrhpfbydxtfkpaa"),
	// 							EndpointType: to.Ptr(armneonpostgres.EndpointTypeReadOnly),
	// 						},
	// 					},
	// 				},
	// 				Roles: []*armneonpostgres.NeonRoleProperties{
	// 					{
	// 						EntityID: to.Ptr("entity-id"),
	// 						EntityName: to.Ptr("entity-name"),
	// 						CreatedAt: to.Ptr("sqpvswctybrhimiwidhnnlxclfry"),
	// 						ProvisioningState: to.Ptr(armneonpostgres.ResourceProvisioningStateSucceeded),
	// 						Attributes: []*armneonpostgres.Attributes{
	// 							{
	// 								Name: to.Ptr("trhvzyvaqy"),
	// 								Value: to.Ptr("evpkgsskyavybxwwssm"),
	// 							},
	// 						},
	// 						BranchID: to.Ptr("wxbojkmdgaggkfiwqfakdkbyztm"),
	// 						Permissions: []*string{
	// 							to.Ptr("myucqecpjriewzohxvadgkhiudnyx"),
	// 						},
	// 						IsSuperUser: to.Ptr(true),
	// 					},
	// 				},
	// 				Databases: []*armneonpostgres.NeonDatabaseProperties{
	// 					{
	// 						EntityID: to.Ptr("entity-id"),
	// 						EntityName: to.Ptr("entity-name"),
	// 						CreatedAt: to.Ptr("wgdmylla"),
	// 						ProvisioningState: to.Ptr(armneonpostgres.ResourceProvisioningStateSucceeded),
	// 						Attributes: []*armneonpostgres.Attributes{
	// 							{
	// 								Name: to.Ptr("trhvzyvaqy"),
	// 								Value: to.Ptr("evpkgsskyavybxwwssm"),
	// 							},
	// 						},
	// 						BranchID: to.Ptr("orfdwdmzvfvlnrgussvcvoek"),
	// 						OwnerName: to.Ptr("odmbeg"),
	// 					},
	// 				},
	// 				Endpoints: []*armneonpostgres.EndpointProperties{
	// 					{
	// 						EntityID: to.Ptr("entity-id"),
	// 						EntityName: to.Ptr("entity-name"),
	// 						CreatedAt: to.Ptr("vhcilurdd"),
	// 						ProvisioningState: to.Ptr(armneonpostgres.ResourceProvisioningStateSucceeded),
	// 						Attributes: []*armneonpostgres.Attributes{
	// 							{
	// 								Name: to.Ptr("trhvzyvaqy"),
	// 								Value: to.Ptr("evpkgsskyavybxwwssm"),
	// 							},
	// 						},
	// 						ProjectID: to.Ptr("rtvdeeflqzlrpfzhjqhcsfbldw"),
	// 						BranchID: to.Ptr("rzsyrhpfbydxtfkpaa"),
	// 						EndpointType: to.Ptr(armneonpostgres.EndpointTypeReadOnly),
	// 					},
	// 				},
	// 			},
	// 		},
	// 		Tags: map[string]*string{
	// 			"key8832": to.Ptr("rvukepuxkykdtqjtwk"),
	// 		},
	// 		Location: to.Ptr("kcdph"),
	// 		ID: to.Ptr("/subscriptions/9B8E3300-C5FA-442B-A259-3F6F614D5BD4/resourceGroups/rgneon/providers/Microsoft.Neon/organizations/test-org"),
	// 		Name: to.Ptr("aocvhndykwhgolfixbqhwtmhiriu"),
	// 		Type: to.Ptr("bvtwhithilvtizpde"),
	// 		SystemData: &armneonpostgres.SystemData{
	// 			CreatedBy: to.Ptr("hnyidmqyvvtsddrwkmrqlwtlew"),
	// 			CreatedByType: to.Ptr(armneonpostgres.CreatedByTypeUser),
	// 			CreatedAt: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2025-03-24T04:03:54.769Z"); return t}()),
	// 			LastModifiedBy: to.Ptr("szuncyyauzxhpzlbcvjkeamp"),
	// 			LastModifiedByType: to.Ptr(armneonpostgres.CreatedByTypeUser),
	// 			LastModifiedAt: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2025-03-24T04:03:54.769Z"); return t}()),
	// 		},
	// 	},
	// }
}
