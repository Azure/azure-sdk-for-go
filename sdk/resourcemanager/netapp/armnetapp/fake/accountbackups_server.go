//go:build go1.18
// +build go1.18

// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator. DO NOT EDIT.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

package fake

import (
	"context"
	"errors"
	"fmt"
	azfake "github.com/Azure/azure-sdk-for-go/sdk/azcore/fake"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/fake/server"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/runtime"
	"github.com/Azure/azure-sdk-for-go/sdk/resourcemanager/netapp/armnetapp/v6"
	"net/http"
	"net/url"
	"regexp"
)

// AccountBackupsServer is a fake server for instances of the armnetapp.AccountBackupsClient type.
type AccountBackupsServer struct {
	// BeginDelete is the fake for method AccountBackupsClient.BeginDelete
	// HTTP status codes to indicate success: http.StatusAccepted, http.StatusNoContent
	BeginDelete func(ctx context.Context, resourceGroupName string, accountName string, backupName string, options *armnetapp.AccountBackupsClientBeginDeleteOptions) (resp azfake.PollerResponder[armnetapp.AccountBackupsClientDeleteResponse], errResp azfake.ErrorResponder)

	// Get is the fake for method AccountBackupsClient.Get
	// HTTP status codes to indicate success: http.StatusOK
	Get func(ctx context.Context, resourceGroupName string, accountName string, backupName string, options *armnetapp.AccountBackupsClientGetOptions) (resp azfake.Responder[armnetapp.AccountBackupsClientGetResponse], errResp azfake.ErrorResponder)

	// NewListByNetAppAccountPager is the fake for method AccountBackupsClient.NewListByNetAppAccountPager
	// HTTP status codes to indicate success: http.StatusOK
	NewListByNetAppAccountPager func(resourceGroupName string, accountName string, options *armnetapp.AccountBackupsClientListByNetAppAccountOptions) (resp azfake.PagerResponder[armnetapp.AccountBackupsClientListByNetAppAccountResponse])
}

// NewAccountBackupsServerTransport creates a new instance of AccountBackupsServerTransport with the provided implementation.
// The returned AccountBackupsServerTransport instance is connected to an instance of armnetapp.AccountBackupsClient via the
// azcore.ClientOptions.Transporter field in the client's constructor parameters.
func NewAccountBackupsServerTransport(srv *AccountBackupsServer) *AccountBackupsServerTransport {
	return &AccountBackupsServerTransport{
		srv:                         srv,
		beginDelete:                 newTracker[azfake.PollerResponder[armnetapp.AccountBackupsClientDeleteResponse]](),
		newListByNetAppAccountPager: newTracker[azfake.PagerResponder[armnetapp.AccountBackupsClientListByNetAppAccountResponse]](),
	}
}

// AccountBackupsServerTransport connects instances of armnetapp.AccountBackupsClient to instances of AccountBackupsServer.
// Don't use this type directly, use NewAccountBackupsServerTransport instead.
type AccountBackupsServerTransport struct {
	srv                         *AccountBackupsServer
	beginDelete                 *tracker[azfake.PollerResponder[armnetapp.AccountBackupsClientDeleteResponse]]
	newListByNetAppAccountPager *tracker[azfake.PagerResponder[armnetapp.AccountBackupsClientListByNetAppAccountResponse]]
}

// Do implements the policy.Transporter interface for AccountBackupsServerTransport.
func (a *AccountBackupsServerTransport) Do(req *http.Request) (*http.Response, error) {
	rawMethod := req.Context().Value(runtime.CtxAPINameKey{})
	method, ok := rawMethod.(string)
	if !ok {
		return nil, nonRetriableError{errors.New("unable to dispatch request, missing value for CtxAPINameKey")}
	}

	var resp *http.Response
	var err error

	switch method {
	case "AccountBackupsClient.BeginDelete":
		resp, err = a.dispatchBeginDelete(req)
	case "AccountBackupsClient.Get":
		resp, err = a.dispatchGet(req)
	case "AccountBackupsClient.NewListByNetAppAccountPager":
		resp, err = a.dispatchNewListByNetAppAccountPager(req)
	default:
		err = fmt.Errorf("unhandled API %s", method)
	}

	if err != nil {
		return nil, err
	}

	return resp, nil
}

func (a *AccountBackupsServerTransport) dispatchBeginDelete(req *http.Request) (*http.Response, error) {
	if a.srv.BeginDelete == nil {
		return nil, &nonRetriableError{errors.New("fake for method BeginDelete not implemented")}
	}
	beginDelete := a.beginDelete.get(req)
	if beginDelete == nil {
		const regexStr = `/subscriptions/(?P<subscriptionId>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/resourceGroups/(?P<resourceGroupName>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/providers/Microsoft\.NetApp/netAppAccounts/(?P<accountName>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/accountBackups/(?P<backupName>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)`
		regex := regexp.MustCompile(regexStr)
		matches := regex.FindStringSubmatch(req.URL.EscapedPath())
		if matches == nil || len(matches) < 4 {
			return nil, fmt.Errorf("failed to parse path %s", req.URL.Path)
		}
		resourceGroupNameParam, err := url.PathUnescape(matches[regex.SubexpIndex("resourceGroupName")])
		if err != nil {
			return nil, err
		}
		accountNameParam, err := url.PathUnescape(matches[regex.SubexpIndex("accountName")])
		if err != nil {
			return nil, err
		}
		backupNameParam, err := url.PathUnescape(matches[regex.SubexpIndex("backupName")])
		if err != nil {
			return nil, err
		}
		respr, errRespr := a.srv.BeginDelete(req.Context(), resourceGroupNameParam, accountNameParam, backupNameParam, nil)
		if respErr := server.GetError(errRespr, req); respErr != nil {
			return nil, respErr
		}
		beginDelete = &respr
		a.beginDelete.add(req, beginDelete)
	}

	resp, err := server.PollerResponderNext(beginDelete, req)
	if err != nil {
		return nil, err
	}

	if !contains([]int{http.StatusAccepted, http.StatusNoContent}, resp.StatusCode) {
		a.beginDelete.remove(req)
		return nil, &nonRetriableError{fmt.Errorf("unexpected status code %d. acceptable values are http.StatusAccepted, http.StatusNoContent", resp.StatusCode)}
	}
	if !server.PollerResponderMore(beginDelete) {
		a.beginDelete.remove(req)
	}

	return resp, nil
}

func (a *AccountBackupsServerTransport) dispatchGet(req *http.Request) (*http.Response, error) {
	if a.srv.Get == nil {
		return nil, &nonRetriableError{errors.New("fake for method Get not implemented")}
	}
	const regexStr = `/subscriptions/(?P<subscriptionId>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/resourceGroups/(?P<resourceGroupName>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/providers/Microsoft\.NetApp/netAppAccounts/(?P<accountName>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/accountBackups/(?P<backupName>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)`
	regex := regexp.MustCompile(regexStr)
	matches := regex.FindStringSubmatch(req.URL.EscapedPath())
	if matches == nil || len(matches) < 4 {
		return nil, fmt.Errorf("failed to parse path %s", req.URL.Path)
	}
	resourceGroupNameParam, err := url.PathUnescape(matches[regex.SubexpIndex("resourceGroupName")])
	if err != nil {
		return nil, err
	}
	accountNameParam, err := url.PathUnescape(matches[regex.SubexpIndex("accountName")])
	if err != nil {
		return nil, err
	}
	backupNameParam, err := url.PathUnescape(matches[regex.SubexpIndex("backupName")])
	if err != nil {
		return nil, err
	}
	respr, errRespr := a.srv.Get(req.Context(), resourceGroupNameParam, accountNameParam, backupNameParam, nil)
	if respErr := server.GetError(errRespr, req); respErr != nil {
		return nil, respErr
	}
	respContent := server.GetResponseContent(respr)
	if !contains([]int{http.StatusOK}, respContent.HTTPStatus) {
		return nil, &nonRetriableError{fmt.Errorf("unexpected status code %d. acceptable values are http.StatusOK", respContent.HTTPStatus)}
	}
	resp, err := server.MarshalResponseAsJSON(respContent, server.GetResponse(respr).Backup, req)
	if err != nil {
		return nil, err
	}
	return resp, nil
}

func (a *AccountBackupsServerTransport) dispatchNewListByNetAppAccountPager(req *http.Request) (*http.Response, error) {
	if a.srv.NewListByNetAppAccountPager == nil {
		return nil, &nonRetriableError{errors.New("fake for method NewListByNetAppAccountPager not implemented")}
	}
	newListByNetAppAccountPager := a.newListByNetAppAccountPager.get(req)
	if newListByNetAppAccountPager == nil {
		const regexStr = `/subscriptions/(?P<subscriptionId>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/resourceGroups/(?P<resourceGroupName>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/providers/Microsoft\.NetApp/netAppAccounts/(?P<accountName>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/accountBackups`
		regex := regexp.MustCompile(regexStr)
		matches := regex.FindStringSubmatch(req.URL.EscapedPath())
		if matches == nil || len(matches) < 3 {
			return nil, fmt.Errorf("failed to parse path %s", req.URL.Path)
		}
		qp := req.URL.Query()
		resourceGroupNameParam, err := url.PathUnescape(matches[regex.SubexpIndex("resourceGroupName")])
		if err != nil {
			return nil, err
		}
		accountNameParam, err := url.PathUnescape(matches[regex.SubexpIndex("accountName")])
		if err != nil {
			return nil, err
		}
		includeOnlyBackupsFromDeletedVolumesUnescaped, err := url.QueryUnescape(qp.Get("includeOnlyBackupsFromDeletedVolumes"))
		if err != nil {
			return nil, err
		}
		includeOnlyBackupsFromDeletedVolumesParam := getOptional(includeOnlyBackupsFromDeletedVolumesUnescaped)
		var options *armnetapp.AccountBackupsClientListByNetAppAccountOptions
		if includeOnlyBackupsFromDeletedVolumesParam != nil {
			options = &armnetapp.AccountBackupsClientListByNetAppAccountOptions{
				IncludeOnlyBackupsFromDeletedVolumes: includeOnlyBackupsFromDeletedVolumesParam,
			}
		}
		resp := a.srv.NewListByNetAppAccountPager(resourceGroupNameParam, accountNameParam, options)
		newListByNetAppAccountPager = &resp
		a.newListByNetAppAccountPager.add(req, newListByNetAppAccountPager)
	}
	resp, err := server.PagerResponderNext(newListByNetAppAccountPager, req)
	if err != nil {
		return nil, err
	}
	if !contains([]int{http.StatusOK}, resp.StatusCode) {
		a.newListByNetAppAccountPager.remove(req)
		return nil, &nonRetriableError{fmt.Errorf("unexpected status code %d. acceptable values are http.StatusOK", resp.StatusCode)}
	}
	if !server.PagerResponderMore(newListByNetAppAccountPager) {
		a.newListByNetAppAccountPager.remove(req)
	}
	return resp, nil
}
