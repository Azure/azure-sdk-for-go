//go:build go1.18
// +build go1.18

// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator. DO NOT EDIT.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

package fake

import (
	"context"
	"errors"
	"fmt"
	azfake "github.com/Azure/azure-sdk-for-go/sdk/azcore/fake"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/fake/server"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/runtime"
	"github.com/Azure/azure-sdk-for-go/sdk/resourcemanager/netapp/armnetapp/v6"
	"net/http"
	"net/url"
	"regexp"
)

// VolumeGroupsServer is a fake server for instances of the armnetapp.VolumeGroupsClient type.
type VolumeGroupsServer struct {
	// BeginCreate is the fake for method VolumeGroupsClient.BeginCreate
	// HTTP status codes to indicate success: http.StatusCreated
	BeginCreate func(ctx context.Context, resourceGroupName string, accountName string, volumeGroupName string, body armnetapp.VolumeGroupDetails, options *armnetapp.VolumeGroupsClientBeginCreateOptions) (resp azfake.PollerResponder[armnetapp.VolumeGroupsClientCreateResponse], errResp azfake.ErrorResponder)

	// BeginDelete is the fake for method VolumeGroupsClient.BeginDelete
	// HTTP status codes to indicate success: http.StatusOK, http.StatusAccepted, http.StatusNoContent
	BeginDelete func(ctx context.Context, resourceGroupName string, accountName string, volumeGroupName string, options *armnetapp.VolumeGroupsClientBeginDeleteOptions) (resp azfake.PollerResponder[armnetapp.VolumeGroupsClientDeleteResponse], errResp azfake.ErrorResponder)

	// Get is the fake for method VolumeGroupsClient.Get
	// HTTP status codes to indicate success: http.StatusOK
	Get func(ctx context.Context, resourceGroupName string, accountName string, volumeGroupName string, options *armnetapp.VolumeGroupsClientGetOptions) (resp azfake.Responder[armnetapp.VolumeGroupsClientGetResponse], errResp azfake.ErrorResponder)

	// NewListByNetAppAccountPager is the fake for method VolumeGroupsClient.NewListByNetAppAccountPager
	// HTTP status codes to indicate success: http.StatusOK
	NewListByNetAppAccountPager func(resourceGroupName string, accountName string, options *armnetapp.VolumeGroupsClientListByNetAppAccountOptions) (resp azfake.PagerResponder[armnetapp.VolumeGroupsClientListByNetAppAccountResponse])
}

// NewVolumeGroupsServerTransport creates a new instance of VolumeGroupsServerTransport with the provided implementation.
// The returned VolumeGroupsServerTransport instance is connected to an instance of armnetapp.VolumeGroupsClient via the
// azcore.ClientOptions.Transporter field in the client's constructor parameters.
func NewVolumeGroupsServerTransport(srv *VolumeGroupsServer) *VolumeGroupsServerTransport {
	return &VolumeGroupsServerTransport{
		srv:                         srv,
		beginCreate:                 newTracker[azfake.PollerResponder[armnetapp.VolumeGroupsClientCreateResponse]](),
		beginDelete:                 newTracker[azfake.PollerResponder[armnetapp.VolumeGroupsClientDeleteResponse]](),
		newListByNetAppAccountPager: newTracker[azfake.PagerResponder[armnetapp.VolumeGroupsClientListByNetAppAccountResponse]](),
	}
}

// VolumeGroupsServerTransport connects instances of armnetapp.VolumeGroupsClient to instances of VolumeGroupsServer.
// Don't use this type directly, use NewVolumeGroupsServerTransport instead.
type VolumeGroupsServerTransport struct {
	srv                         *VolumeGroupsServer
	beginCreate                 *tracker[azfake.PollerResponder[armnetapp.VolumeGroupsClientCreateResponse]]
	beginDelete                 *tracker[azfake.PollerResponder[armnetapp.VolumeGroupsClientDeleteResponse]]
	newListByNetAppAccountPager *tracker[azfake.PagerResponder[armnetapp.VolumeGroupsClientListByNetAppAccountResponse]]
}

// Do implements the policy.Transporter interface for VolumeGroupsServerTransport.
func (v *VolumeGroupsServerTransport) Do(req *http.Request) (*http.Response, error) {
	rawMethod := req.Context().Value(runtime.CtxAPINameKey{})
	method, ok := rawMethod.(string)
	if !ok {
		return nil, nonRetriableError{errors.New("unable to dispatch request, missing value for CtxAPINameKey")}
	}

	var resp *http.Response
	var err error

	switch method {
	case "VolumeGroupsClient.BeginCreate":
		resp, err = v.dispatchBeginCreate(req)
	case "VolumeGroupsClient.BeginDelete":
		resp, err = v.dispatchBeginDelete(req)
	case "VolumeGroupsClient.Get":
		resp, err = v.dispatchGet(req)
	case "VolumeGroupsClient.NewListByNetAppAccountPager":
		resp, err = v.dispatchNewListByNetAppAccountPager(req)
	default:
		err = fmt.Errorf("unhandled API %s", method)
	}

	if err != nil {
		return nil, err
	}

	return resp, nil
}

func (v *VolumeGroupsServerTransport) dispatchBeginCreate(req *http.Request) (*http.Response, error) {
	if v.srv.BeginCreate == nil {
		return nil, &nonRetriableError{errors.New("fake for method BeginCreate not implemented")}
	}
	beginCreate := v.beginCreate.get(req)
	if beginCreate == nil {
		const regexStr = `/subscriptions/(?P<subscriptionId>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/resourceGroups/(?P<resourceGroupName>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/providers/Microsoft\.NetApp/netAppAccounts/(?P<accountName>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/volumeGroups/(?P<volumeGroupName>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)`
		regex := regexp.MustCompile(regexStr)
		matches := regex.FindStringSubmatch(req.URL.EscapedPath())
		if matches == nil || len(matches) < 4 {
			return nil, fmt.Errorf("failed to parse path %s", req.URL.Path)
		}
		body, err := server.UnmarshalRequestAsJSON[armnetapp.VolumeGroupDetails](req)
		if err != nil {
			return nil, err
		}
		resourceGroupNameParam, err := url.PathUnescape(matches[regex.SubexpIndex("resourceGroupName")])
		if err != nil {
			return nil, err
		}
		accountNameParam, err := url.PathUnescape(matches[regex.SubexpIndex("accountName")])
		if err != nil {
			return nil, err
		}
		volumeGroupNameParam, err := url.PathUnescape(matches[regex.SubexpIndex("volumeGroupName")])
		if err != nil {
			return nil, err
		}
		respr, errRespr := v.srv.BeginCreate(req.Context(), resourceGroupNameParam, accountNameParam, volumeGroupNameParam, body, nil)
		if respErr := server.GetError(errRespr, req); respErr != nil {
			return nil, respErr
		}
		beginCreate = &respr
		v.beginCreate.add(req, beginCreate)
	}

	resp, err := server.PollerResponderNext(beginCreate, req)
	if err != nil {
		return nil, err
	}

	if !contains([]int{http.StatusCreated}, resp.StatusCode) {
		v.beginCreate.remove(req)
		return nil, &nonRetriableError{fmt.Errorf("unexpected status code %d. acceptable values are http.StatusCreated", resp.StatusCode)}
	}
	if !server.PollerResponderMore(beginCreate) {
		v.beginCreate.remove(req)
	}

	return resp, nil
}

func (v *VolumeGroupsServerTransport) dispatchBeginDelete(req *http.Request) (*http.Response, error) {
	if v.srv.BeginDelete == nil {
		return nil, &nonRetriableError{errors.New("fake for method BeginDelete not implemented")}
	}
	beginDelete := v.beginDelete.get(req)
	if beginDelete == nil {
		const regexStr = `/subscriptions/(?P<subscriptionId>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/resourceGroups/(?P<resourceGroupName>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/providers/Microsoft\.NetApp/netAppAccounts/(?P<accountName>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/volumeGroups/(?P<volumeGroupName>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)`
		regex := regexp.MustCompile(regexStr)
		matches := regex.FindStringSubmatch(req.URL.EscapedPath())
		if matches == nil || len(matches) < 4 {
			return nil, fmt.Errorf("failed to parse path %s", req.URL.Path)
		}
		resourceGroupNameParam, err := url.PathUnescape(matches[regex.SubexpIndex("resourceGroupName")])
		if err != nil {
			return nil, err
		}
		accountNameParam, err := url.PathUnescape(matches[regex.SubexpIndex("accountName")])
		if err != nil {
			return nil, err
		}
		volumeGroupNameParam, err := url.PathUnescape(matches[regex.SubexpIndex("volumeGroupName")])
		if err != nil {
			return nil, err
		}
		respr, errRespr := v.srv.BeginDelete(req.Context(), resourceGroupNameParam, accountNameParam, volumeGroupNameParam, nil)
		if respErr := server.GetError(errRespr, req); respErr != nil {
			return nil, respErr
		}
		beginDelete = &respr
		v.beginDelete.add(req, beginDelete)
	}

	resp, err := server.PollerResponderNext(beginDelete, req)
	if err != nil {
		return nil, err
	}

	if !contains([]int{http.StatusOK, http.StatusAccepted, http.StatusNoContent}, resp.StatusCode) {
		v.beginDelete.remove(req)
		return nil, &nonRetriableError{fmt.Errorf("unexpected status code %d. acceptable values are http.StatusOK, http.StatusAccepted, http.StatusNoContent", resp.StatusCode)}
	}
	if !server.PollerResponderMore(beginDelete) {
		v.beginDelete.remove(req)
	}

	return resp, nil
}

func (v *VolumeGroupsServerTransport) dispatchGet(req *http.Request) (*http.Response, error) {
	if v.srv.Get == nil {
		return nil, &nonRetriableError{errors.New("fake for method Get not implemented")}
	}
	const regexStr = `/subscriptions/(?P<subscriptionId>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/resourceGroups/(?P<resourceGroupName>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/providers/Microsoft\.NetApp/netAppAccounts/(?P<accountName>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/volumeGroups/(?P<volumeGroupName>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)`
	regex := regexp.MustCompile(regexStr)
	matches := regex.FindStringSubmatch(req.URL.EscapedPath())
	if matches == nil || len(matches) < 4 {
		return nil, fmt.Errorf("failed to parse path %s", req.URL.Path)
	}
	resourceGroupNameParam, err := url.PathUnescape(matches[regex.SubexpIndex("resourceGroupName")])
	if err != nil {
		return nil, err
	}
	accountNameParam, err := url.PathUnescape(matches[regex.SubexpIndex("accountName")])
	if err != nil {
		return nil, err
	}
	volumeGroupNameParam, err := url.PathUnescape(matches[regex.SubexpIndex("volumeGroupName")])
	if err != nil {
		return nil, err
	}
	respr, errRespr := v.srv.Get(req.Context(), resourceGroupNameParam, accountNameParam, volumeGroupNameParam, nil)
	if respErr := server.GetError(errRespr, req); respErr != nil {
		return nil, respErr
	}
	respContent := server.GetResponseContent(respr)
	if !contains([]int{http.StatusOK}, respContent.HTTPStatus) {
		return nil, &nonRetriableError{fmt.Errorf("unexpected status code %d. acceptable values are http.StatusOK", respContent.HTTPStatus)}
	}
	resp, err := server.MarshalResponseAsJSON(respContent, server.GetResponse(respr).VolumeGroupDetails, req)
	if err != nil {
		return nil, err
	}
	return resp, nil
}

func (v *VolumeGroupsServerTransport) dispatchNewListByNetAppAccountPager(req *http.Request) (*http.Response, error) {
	if v.srv.NewListByNetAppAccountPager == nil {
		return nil, &nonRetriableError{errors.New("fake for method NewListByNetAppAccountPager not implemented")}
	}
	newListByNetAppAccountPager := v.newListByNetAppAccountPager.get(req)
	if newListByNetAppAccountPager == nil {
		const regexStr = `/subscriptions/(?P<subscriptionId>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/resourceGroups/(?P<resourceGroupName>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/providers/Microsoft\.NetApp/netAppAccounts/(?P<accountName>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/volumeGroups`
		regex := regexp.MustCompile(regexStr)
		matches := regex.FindStringSubmatch(req.URL.EscapedPath())
		if matches == nil || len(matches) < 3 {
			return nil, fmt.Errorf("failed to parse path %s", req.URL.Path)
		}
		resourceGroupNameParam, err := url.PathUnescape(matches[regex.SubexpIndex("resourceGroupName")])
		if err != nil {
			return nil, err
		}
		accountNameParam, err := url.PathUnescape(matches[regex.SubexpIndex("accountName")])
		if err != nil {
			return nil, err
		}
		resp := v.srv.NewListByNetAppAccountPager(resourceGroupNameParam, accountNameParam, nil)
		newListByNetAppAccountPager = &resp
		v.newListByNetAppAccountPager.add(req, newListByNetAppAccountPager)
	}
	resp, err := server.PagerResponderNext(newListByNetAppAccountPager, req)
	if err != nil {
		return nil, err
	}
	if !contains([]int{http.StatusOK}, resp.StatusCode) {
		v.newListByNetAppAccountPager.remove(req)
		return nil, &nonRetriableError{fmt.Errorf("unexpected status code %d. acceptable values are http.StatusOK", resp.StatusCode)}
	}
	if !server.PagerResponderMore(newListByNetAppAccountPager) {
		v.newListByNetAppAccountPager.remove(req)
	}
	return resp, nil
}
