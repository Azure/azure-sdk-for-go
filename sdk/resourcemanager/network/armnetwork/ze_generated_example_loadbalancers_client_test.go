//go:build go1.16
// +build go1.16

// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

package armnetwork_test

import (
	"context"
	"log"

	"time"

	"github.com/Azure/azure-sdk-for-go/sdk/azcore/to"
	"github.com/Azure/azure-sdk-for-go/sdk/azidentity"
	"github.com/Azure/azure-sdk-for-go/sdk/resourcemanager/network/armnetwork"
)

// x-ms-original-file: specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/LoadBalancerDelete.json
func ExampleLoadBalancersClient_BeginDelete() {
	cred, err := azidentity.NewDefaultAzureCredential(nil)
	if err != nil {
		log.Fatalf("failed to obtain a credential: %v", err)
	}
	ctx := context.Background()
	client := armnetwork.NewLoadBalancersClient("<subscription-id>", cred, nil)
	poller, err := client.BeginDelete(ctx,
		"<resource-group-name>",
		"<load-balancer-name>",
		nil)
	if err != nil {
		log.Fatal(err)
	}
	_, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		log.Fatal(err)
	}
}

// x-ms-original-file: specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/LoadBalancerGet.json
func ExampleLoadBalancersClient_Get() {
	cred, err := azidentity.NewDefaultAzureCredential(nil)
	if err != nil {
		log.Fatalf("failed to obtain a credential: %v", err)
	}
	ctx := context.Background()
	client := armnetwork.NewLoadBalancersClient("<subscription-id>", cred, nil)
	res, err := client.Get(ctx,
		"<resource-group-name>",
		"<load-balancer-name>",
		&armnetwork.LoadBalancersClientGetOptions{Expand: nil})
	if err != nil {
		log.Fatal(err)
	}
	log.Printf("Response result: %#v\n", res.LoadBalancersClientGetResult)
}

// x-ms-original-file: specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/LoadBalancerCreate.json
func ExampleLoadBalancersClient_BeginCreateOrUpdate() {
	cred, err := azidentity.NewDefaultAzureCredential(nil)
	if err != nil {
		log.Fatalf("failed to obtain a credential: %v", err)
	}
	ctx := context.Background()
	client := armnetwork.NewLoadBalancersClient("<subscription-id>", cred, nil)
	poller, err := client.BeginCreateOrUpdate(ctx,
		"<resource-group-name>",
		"<load-balancer-name>",
		armnetwork.LoadBalancer{
			Location: to.StringPtr("<location>"),
			Properties: &armnetwork.LoadBalancerPropertiesFormat{
				BackendAddressPools: []*armnetwork.BackendAddressPool{
					{
						Name:       to.StringPtr("<name>"),
						Properties: &armnetwork.BackendAddressPoolPropertiesFormat{},
					}},
				FrontendIPConfigurations: []*armnetwork.FrontendIPConfiguration{
					{
						Name: to.StringPtr("<name>"),
						Properties: &armnetwork.FrontendIPConfigurationPropertiesFormat{
							Subnet: &armnetwork.Subnet{
								ID: to.StringPtr("<id>"),
							},
						},
					}},
				InboundNatPools: []*armnetwork.InboundNatPool{},
				InboundNatRules: []*armnetwork.InboundNatRule{
					{
						Name: to.StringPtr("<name>"),
						Properties: &armnetwork.InboundNatRulePropertiesFormat{
							BackendPort:      to.Int32Ptr(3389),
							EnableFloatingIP: to.BoolPtr(true),
							EnableTCPReset:   to.BoolPtr(false),
							FrontendIPConfiguration: &armnetwork.SubResource{
								ID: to.StringPtr("<id>"),
							},
							FrontendPort:         to.Int32Ptr(3389),
							IdleTimeoutInMinutes: to.Int32Ptr(15),
							Protocol:             armnetwork.TransportProtocol("Tcp").ToPtr(),
						},
					}},
				LoadBalancingRules: []*armnetwork.LoadBalancingRule{
					{
						Name: to.StringPtr("<name>"),
						Properties: &armnetwork.LoadBalancingRulePropertiesFormat{
							BackendAddressPool: &armnetwork.SubResource{
								ID: to.StringPtr("<id>"),
							},
							BackendPort:      to.Int32Ptr(80),
							EnableFloatingIP: to.BoolPtr(true),
							EnableTCPReset:   to.BoolPtr(false),
							FrontendIPConfiguration: &armnetwork.SubResource{
								ID: to.StringPtr("<id>"),
							},
							FrontendPort:         to.Int32Ptr(80),
							IdleTimeoutInMinutes: to.Int32Ptr(15),
							LoadDistribution:     armnetwork.LoadDistribution("Default").ToPtr(),
							Probe: &armnetwork.SubResource{
								ID: to.StringPtr("<id>"),
							},
							Protocol: armnetwork.TransportProtocol("Tcp").ToPtr(),
						},
					}},
				Probes: []*armnetwork.Probe{
					{
						Name: to.StringPtr("<name>"),
						Properties: &armnetwork.ProbePropertiesFormat{
							IntervalInSeconds: to.Int32Ptr(15),
							NumberOfProbes:    to.Int32Ptr(2),
							Port:              to.Int32Ptr(80),
							RequestPath:       to.StringPtr("<request-path>"),
							Protocol:          armnetwork.ProbeProtocol("Http").ToPtr(),
						},
					}},
			},
		},
		nil)
	if err != nil {
		log.Fatal(err)
	}
	res, err := poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		log.Fatal(err)
	}
	log.Printf("Response result: %#v\n", res.LoadBalancersClientCreateOrUpdateResult)
}

// x-ms-original-file: specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/LoadBalancerUpdateTags.json
func ExampleLoadBalancersClient_UpdateTags() {
	cred, err := azidentity.NewDefaultAzureCredential(nil)
	if err != nil {
		log.Fatalf("failed to obtain a credential: %v", err)
	}
	ctx := context.Background()
	client := armnetwork.NewLoadBalancersClient("<subscription-id>", cred, nil)
	res, err := client.UpdateTags(ctx,
		"<resource-group-name>",
		"<load-balancer-name>",
		armnetwork.TagsObject{
			Tags: map[string]*string{
				"tag1": to.StringPtr("value1"),
				"tag2": to.StringPtr("value2"),
			},
		},
		nil)
	if err != nil {
		log.Fatal(err)
	}
	log.Printf("Response result: %#v\n", res.LoadBalancersClientUpdateTagsResult)
}

// x-ms-original-file: specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/LoadBalancerListAll.json
func ExampleLoadBalancersClient_ListAll() {
	cred, err := azidentity.NewDefaultAzureCredential(nil)
	if err != nil {
		log.Fatalf("failed to obtain a credential: %v", err)
	}
	ctx := context.Background()
	client := armnetwork.NewLoadBalancersClient("<subscription-id>", cred, nil)
	pager := client.ListAll(nil)
	for {
		nextResult := pager.NextPage(ctx)
		if err := pager.Err(); err != nil {
			log.Fatalf("failed to advance page: %v", err)
		}
		if !nextResult {
			break
		}
		for _, v := range pager.PageResponse().Value {
			log.Printf("Pager result: %#v\n", v)
		}
	}
}

// x-ms-original-file: specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/LoadBalancerList.json
func ExampleLoadBalancersClient_List() {
	cred, err := azidentity.NewDefaultAzureCredential(nil)
	if err != nil {
		log.Fatalf("failed to obtain a credential: %v", err)
	}
	ctx := context.Background()
	client := armnetwork.NewLoadBalancersClient("<subscription-id>", cred, nil)
	pager := client.List("<resource-group-name>",
		nil)
	for {
		nextResult := pager.NextPage(ctx)
		if err := pager.Err(); err != nil {
			log.Fatalf("failed to advance page: %v", err)
		}
		if !nextResult {
			break
		}
		for _, v := range pager.PageResponse().Value {
			log.Printf("Pager result: %#v\n", v)
		}
	}
}

// x-ms-original-file: specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/QueryInboundNatRulePortMapping.json
func ExampleLoadBalancersClient_BeginListInboundNatRulePortMappings() {
	cred, err := azidentity.NewDefaultAzureCredential(nil)
	if err != nil {
		log.Fatalf("failed to obtain a credential: %v", err)
	}
	ctx := context.Background()
	client := armnetwork.NewLoadBalancersClient("<subscription-id>", cred, nil)
	poller, err := client.BeginListInboundNatRulePortMappings(ctx,
		"<group-name>",
		"<load-balancer-name>",
		"<backend-pool-name>",
		armnetwork.QueryInboundNatRulePortMappingRequest{
			IPAddress: to.StringPtr("<ipaddress>"),
		},
		nil)
	if err != nil {
		log.Fatal(err)
	}
	res, err := poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		log.Fatal(err)
	}
	log.Printf("Response result: %#v\n", res.LoadBalancersClientListInboundNatRulePortMappingsResult)
}
