//go:build go1.16
// +build go1.16

// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

package armnetwork_test

import (
	"context"
	"log"

	"time"

	"github.com/Azure/azure-sdk-for-go/sdk/azcore/to"
	"github.com/Azure/azure-sdk-for-go/sdk/azidentity"
	"github.com/Azure/azure-sdk-for-go/sdk/resourcemanager/network/armnetwork"
)

// x-ms-original-file: specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/VirtualNetworkGatewayConnectionCreate.json
func ExampleVirtualNetworkGatewayConnectionsClient_BeginCreateOrUpdate() {
	cred, err := azidentity.NewDefaultAzureCredential(nil)
	if err != nil {
		log.Fatalf("failed to obtain a credential: %v", err)
	}
	ctx := context.Background()
	client := armnetwork.NewVirtualNetworkGatewayConnectionsClient("<subscription-id>", cred, nil)
	poller, err := client.BeginCreateOrUpdate(ctx,
		"<resource-group-name>",
		"<virtual-network-gateway-connection-name>",
		armnetwork.VirtualNetworkGatewayConnection{
			Location: to.StringPtr("<location>"),
			Properties: &armnetwork.VirtualNetworkGatewayConnectionPropertiesFormat{
				ConnectionMode:     armnetwork.VirtualNetworkGatewayConnectionMode("Default").ToPtr(),
				ConnectionProtocol: armnetwork.VirtualNetworkGatewayConnectionProtocol("IKEv2").ToPtr(),
				ConnectionType:     armnetwork.VirtualNetworkGatewayConnectionType("IPsec").ToPtr(),
				DpdTimeoutSeconds:  to.Int32Ptr(30),
				EgressNatRules: []*armnetwork.SubResource{
					{
						ID: to.StringPtr("<id>"),
					}},
				EnableBgp: to.BoolPtr(false),
				IngressNatRules: []*armnetwork.SubResource{
					{
						ID: to.StringPtr("<id>"),
					}},
				IPSecPolicies: []*armnetwork.IPSecPolicy{},
				LocalNetworkGateway2: &armnetwork.LocalNetworkGateway{
					ID:       to.StringPtr("<id>"),
					Location: to.StringPtr("<location>"),
					Tags:     map[string]*string{},
					Properties: &armnetwork.LocalNetworkGatewayPropertiesFormat{
						GatewayIPAddress: to.StringPtr("<gateway-ipaddress>"),
						LocalNetworkAddressSpace: &armnetwork.AddressSpace{
							AddressPrefixes: []*string{
								to.StringPtr("10.1.0.0/16")},
						},
					},
				},
				RoutingWeight:                  to.Int32Ptr(0),
				SharedKey:                      to.StringPtr("<shared-key>"),
				TrafficSelectorPolicies:        []*armnetwork.TrafficSelectorPolicy{},
				UsePolicyBasedTrafficSelectors: to.BoolPtr(false),
				VirtualNetworkGateway1: &armnetwork.VirtualNetworkGateway{
					ID:       to.StringPtr("<id>"),
					Location: to.StringPtr("<location>"),
					Tags:     map[string]*string{},
					Properties: &armnetwork.VirtualNetworkGatewayPropertiesFormat{
						Active: to.BoolPtr(false),
						BgpSettings: &armnetwork.BgpSettings{
							Asn:               to.Int64Ptr(65514),
							BgpPeeringAddress: to.StringPtr("<bgp-peering-address>"),
							PeerWeight:        to.Int32Ptr(0),
						},
						EnableBgp:   to.BoolPtr(false),
						GatewayType: armnetwork.VirtualNetworkGatewayType("Vpn").ToPtr(),
						IPConfigurations: []*armnetwork.VirtualNetworkGatewayIPConfiguration{
							{
								ID:   to.StringPtr("<id>"),
								Name: to.StringPtr("<name>"),
								Properties: &armnetwork.VirtualNetworkGatewayIPConfigurationPropertiesFormat{
									PrivateIPAllocationMethod: armnetwork.IPAllocationMethod("Dynamic").ToPtr(),
									PublicIPAddress: &armnetwork.SubResource{
										ID: to.StringPtr("<id>"),
									},
									Subnet: &armnetwork.SubResource{
										ID: to.StringPtr("<id>"),
									},
								},
							}},
						SKU: &armnetwork.VirtualNetworkGatewaySKU{
							Name: armnetwork.VirtualNetworkGatewaySKUName("VpnGw1").ToPtr(),
							Tier: armnetwork.VirtualNetworkGatewaySKUTier("VpnGw1").ToPtr(),
						},
						VPNType: armnetwork.VPNType("RouteBased").ToPtr(),
					},
				},
			},
		},
		nil)
	if err != nil {
		log.Fatal(err)
	}
	res, err := poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		log.Fatal(err)
	}
	log.Printf("Response result: %#v\n", res.VirtualNetworkGatewayConnectionsClientCreateOrUpdateResult)
}

// x-ms-original-file: specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/VirtualNetworkGatewayConnectionGet.json
func ExampleVirtualNetworkGatewayConnectionsClient_Get() {
	cred, err := azidentity.NewDefaultAzureCredential(nil)
	if err != nil {
		log.Fatalf("failed to obtain a credential: %v", err)
	}
	ctx := context.Background()
	client := armnetwork.NewVirtualNetworkGatewayConnectionsClient("<subscription-id>", cred, nil)
	res, err := client.Get(ctx,
		"<resource-group-name>",
		"<virtual-network-gateway-connection-name>",
		nil)
	if err != nil {
		log.Fatal(err)
	}
	log.Printf("Response result: %#v\n", res.VirtualNetworkGatewayConnectionsClientGetResult)
}

// x-ms-original-file: specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/VirtualNetworkGatewayConnectionDelete.json
func ExampleVirtualNetworkGatewayConnectionsClient_BeginDelete() {
	cred, err := azidentity.NewDefaultAzureCredential(nil)
	if err != nil {
		log.Fatalf("failed to obtain a credential: %v", err)
	}
	ctx := context.Background()
	client := armnetwork.NewVirtualNetworkGatewayConnectionsClient("<subscription-id>", cred, nil)
	poller, err := client.BeginDelete(ctx,
		"<resource-group-name>",
		"<virtual-network-gateway-connection-name>",
		nil)
	if err != nil {
		log.Fatal(err)
	}
	_, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		log.Fatal(err)
	}
}

// x-ms-original-file: specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/VirtualNetworkGatewayConnectionUpdateTags.json
func ExampleVirtualNetworkGatewayConnectionsClient_BeginUpdateTags() {
	cred, err := azidentity.NewDefaultAzureCredential(nil)
	if err != nil {
		log.Fatalf("failed to obtain a credential: %v", err)
	}
	ctx := context.Background()
	client := armnetwork.NewVirtualNetworkGatewayConnectionsClient("<subscription-id>", cred, nil)
	poller, err := client.BeginUpdateTags(ctx,
		"<resource-group-name>",
		"<virtual-network-gateway-connection-name>",
		armnetwork.TagsObject{
			Tags: map[string]*string{
				"tag1": to.StringPtr("value1"),
				"tag2": to.StringPtr("value2"),
			},
		},
		nil)
	if err != nil {
		log.Fatal(err)
	}
	res, err := poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		log.Fatal(err)
	}
	log.Printf("Response result: %#v\n", res.VirtualNetworkGatewayConnectionsClientUpdateTagsResult)
}

// x-ms-original-file: specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/VirtualNetworkGatewayConnectionSetSharedKey.json
func ExampleVirtualNetworkGatewayConnectionsClient_BeginSetSharedKey() {
	cred, err := azidentity.NewDefaultAzureCredential(nil)
	if err != nil {
		log.Fatalf("failed to obtain a credential: %v", err)
	}
	ctx := context.Background()
	client := armnetwork.NewVirtualNetworkGatewayConnectionsClient("<subscription-id>", cred, nil)
	poller, err := client.BeginSetSharedKey(ctx,
		"<resource-group-name>",
		"<virtual-network-gateway-connection-name>",
		armnetwork.ConnectionSharedKey{
			Value: to.StringPtr("<value>"),
		},
		nil)
	if err != nil {
		log.Fatal(err)
	}
	res, err := poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		log.Fatal(err)
	}
	log.Printf("Response result: %#v\n", res.VirtualNetworkGatewayConnectionsClientSetSharedKeyResult)
}

// x-ms-original-file: specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/VirtualNetworkGatewayConnectionGetSharedKey.json
func ExampleVirtualNetworkGatewayConnectionsClient_GetSharedKey() {
	cred, err := azidentity.NewDefaultAzureCredential(nil)
	if err != nil {
		log.Fatalf("failed to obtain a credential: %v", err)
	}
	ctx := context.Background()
	client := armnetwork.NewVirtualNetworkGatewayConnectionsClient("<subscription-id>", cred, nil)
	res, err := client.GetSharedKey(ctx,
		"<resource-group-name>",
		"<virtual-network-gateway-connection-name>",
		nil)
	if err != nil {
		log.Fatal(err)
	}
	log.Printf("Response result: %#v\n", res.VirtualNetworkGatewayConnectionsClientGetSharedKeyResult)
}

// x-ms-original-file: specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/VirtualNetworkGatewayConnectionsList.json
func ExampleVirtualNetworkGatewayConnectionsClient_List() {
	cred, err := azidentity.NewDefaultAzureCredential(nil)
	if err != nil {
		log.Fatalf("failed to obtain a credential: %v", err)
	}
	ctx := context.Background()
	client := armnetwork.NewVirtualNetworkGatewayConnectionsClient("<subscription-id>", cred, nil)
	pager := client.List("<resource-group-name>",
		nil)
	for {
		nextResult := pager.NextPage(ctx)
		if err := pager.Err(); err != nil {
			log.Fatalf("failed to advance page: %v", err)
		}
		if !nextResult {
			break
		}
		for _, v := range pager.PageResponse().Value {
			log.Printf("Pager result: %#v\n", v)
		}
	}
}

// x-ms-original-file: specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/VirtualNetworkGatewayConnectionResetSharedKey.json
func ExampleVirtualNetworkGatewayConnectionsClient_BeginResetSharedKey() {
	cred, err := azidentity.NewDefaultAzureCredential(nil)
	if err != nil {
		log.Fatalf("failed to obtain a credential: %v", err)
	}
	ctx := context.Background()
	client := armnetwork.NewVirtualNetworkGatewayConnectionsClient("<subscription-id>", cred, nil)
	poller, err := client.BeginResetSharedKey(ctx,
		"<resource-group-name>",
		"<virtual-network-gateway-connection-name>",
		armnetwork.ConnectionResetSharedKey{
			KeyLength: to.Int32Ptr(128),
		},
		nil)
	if err != nil {
		log.Fatal(err)
	}
	res, err := poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		log.Fatal(err)
	}
	log.Printf("Response result: %#v\n", res.VirtualNetworkGatewayConnectionsClientResetSharedKeyResult)
}

// x-ms-original-file: specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/VirtualNetworkGatewayConnectionStartPacketCaptureFilterData.json
func ExampleVirtualNetworkGatewayConnectionsClient_BeginStartPacketCapture() {
	cred, err := azidentity.NewDefaultAzureCredential(nil)
	if err != nil {
		log.Fatalf("failed to obtain a credential: %v", err)
	}
	ctx := context.Background()
	client := armnetwork.NewVirtualNetworkGatewayConnectionsClient("<subscription-id>", cred, nil)
	poller, err := client.BeginStartPacketCapture(ctx,
		"<resource-group-name>",
		"<virtual-network-gateway-connection-name>",
		&armnetwork.VirtualNetworkGatewayConnectionsClientBeginStartPacketCaptureOptions{Parameters: &armnetwork.VPNPacketCaptureStartParameters{
			FilterData: to.StringPtr("<filter-data>"),
		},
		})
	if err != nil {
		log.Fatal(err)
	}
	res, err := poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		log.Fatal(err)
	}
	log.Printf("Response result: %#v\n", res.VirtualNetworkGatewayConnectionsClientStartPacketCaptureResult)
}

// x-ms-original-file: specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/VirtualNetworkGatewayConnectionStopPacketCapture.json
func ExampleVirtualNetworkGatewayConnectionsClient_BeginStopPacketCapture() {
	cred, err := azidentity.NewDefaultAzureCredential(nil)
	if err != nil {
		log.Fatalf("failed to obtain a credential: %v", err)
	}
	ctx := context.Background()
	client := armnetwork.NewVirtualNetworkGatewayConnectionsClient("<subscription-id>", cred, nil)
	poller, err := client.BeginStopPacketCapture(ctx,
		"<resource-group-name>",
		"<virtual-network-gateway-connection-name>",
		armnetwork.VPNPacketCaptureStopParameters{
			SasURL: to.StringPtr("<sas-url>"),
		},
		nil)
	if err != nil {
		log.Fatal(err)
	}
	res, err := poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		log.Fatal(err)
	}
	log.Printf("Response result: %#v\n", res.VirtualNetworkGatewayConnectionsClientStopPacketCaptureResult)
}

// x-ms-original-file: specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/VirtualNetworkGatewayConnectionGetIkeSas.json
func ExampleVirtualNetworkGatewayConnectionsClient_BeginGetIkeSas() {
	cred, err := azidentity.NewDefaultAzureCredential(nil)
	if err != nil {
		log.Fatalf("failed to obtain a credential: %v", err)
	}
	ctx := context.Background()
	client := armnetwork.NewVirtualNetworkGatewayConnectionsClient("<subscription-id>", cred, nil)
	poller, err := client.BeginGetIkeSas(ctx,
		"<resource-group-name>",
		"<virtual-network-gateway-connection-name>",
		nil)
	if err != nil {
		log.Fatal(err)
	}
	res, err := poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		log.Fatal(err)
	}
	log.Printf("Response result: %#v\n", res.VirtualNetworkGatewayConnectionsClientGetIkeSasResult)
}

// x-ms-original-file: specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/VirtualNetworkGatewayConnectionReset.json
func ExampleVirtualNetworkGatewayConnectionsClient_BeginResetConnection() {
	cred, err := azidentity.NewDefaultAzureCredential(nil)
	if err != nil {
		log.Fatalf("failed to obtain a credential: %v", err)
	}
	ctx := context.Background()
	client := armnetwork.NewVirtualNetworkGatewayConnectionsClient("<subscription-id>", cred, nil)
	poller, err := client.BeginResetConnection(ctx,
		"<resource-group-name>",
		"<virtual-network-gateway-connection-name>",
		nil)
	if err != nil {
		log.Fatal(err)
	}
	_, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		log.Fatal(err)
	}
}
