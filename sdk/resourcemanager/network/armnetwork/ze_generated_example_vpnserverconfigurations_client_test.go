//go:build go1.16
// +build go1.16

// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

package armnetwork_test

import (
	"context"
	"log"

	"time"

	"github.com/Azure/azure-sdk-for-go/sdk/azcore/to"
	"github.com/Azure/azure-sdk-for-go/sdk/azidentity"
	"github.com/Azure/azure-sdk-for-go/sdk/resourcemanager/network/armnetwork"
)

// x-ms-original-file: specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/VpnServerConfigurationGet.json
func ExampleVPNServerConfigurationsClient_Get() {
	cred, err := azidentity.NewDefaultAzureCredential(nil)
	if err != nil {
		log.Fatalf("failed to obtain a credential: %v", err)
	}
	ctx := context.Background()
	client := armnetwork.NewVPNServerConfigurationsClient("<subscription-id>", cred, nil)
	res, err := client.Get(ctx,
		"<resource-group-name>",
		"<vpn-server-configuration-name>",
		nil)
	if err != nil {
		log.Fatal(err)
	}
	log.Printf("Response result: %#v\n", res.VPNServerConfigurationsClientGetResult)
}

// x-ms-original-file: specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/VpnServerConfigurationPut.json
func ExampleVPNServerConfigurationsClient_BeginCreateOrUpdate() {
	cred, err := azidentity.NewDefaultAzureCredential(nil)
	if err != nil {
		log.Fatalf("failed to obtain a credential: %v", err)
	}
	ctx := context.Background()
	client := armnetwork.NewVPNServerConfigurationsClient("<subscription-id>", cred, nil)
	poller, err := client.BeginCreateOrUpdate(ctx,
		"<resource-group-name>",
		"<vpn-server-configuration-name>",
		armnetwork.VPNServerConfiguration{
			Location: to.StringPtr("<location>"),
			Tags: map[string]*string{
				"key1": to.StringPtr("value1"),
			},
			Properties: &armnetwork.VPNServerConfigurationProperties{
				RadiusClientRootCertificates: []*armnetwork.VPNServerConfigRadiusClientRootCertificate{
					{
						Name:       to.StringPtr("<name>"),
						Thumbprint: to.StringPtr("<thumbprint>"),
					}},
				RadiusServerRootCertificates: []*armnetwork.VPNServerConfigRadiusServerRootCertificate{
					{
						Name:           to.StringPtr("<name>"),
						PublicCertData: to.StringPtr("<public-cert-data>"),
					}},
				RadiusServers: []*armnetwork.RadiusServer{
					{
						RadiusServerAddress: to.StringPtr("<radius-server-address>"),
						RadiusServerScore:   to.Int64Ptr(25),
						RadiusServerSecret:  to.StringPtr("<radius-server-secret>"),
					}},
				VPNClientIPSecPolicies: []*armnetwork.IPSecPolicy{
					{
						DhGroup:             armnetwork.DhGroup("DHGroup14").ToPtr(),
						IkeEncryption:       armnetwork.IkeEncryption("AES256").ToPtr(),
						IkeIntegrity:        armnetwork.IkeIntegrity("SHA384").ToPtr(),
						IPSecEncryption:     armnetwork.IPSecEncryption("AES256").ToPtr(),
						IPSecIntegrity:      armnetwork.IPSecIntegrity("SHA256").ToPtr(),
						PfsGroup:            armnetwork.PfsGroup("PFS14").ToPtr(),
						SaDataSizeKilobytes: to.Int32Ptr(429497),
						SaLifeTimeSeconds:   to.Int32Ptr(86472),
					}},
				VPNClientRevokedCertificates: []*armnetwork.VPNServerConfigVPNClientRevokedCertificate{
					{
						Name:       to.StringPtr("<name>"),
						Thumbprint: to.StringPtr("<thumbprint>"),
					}},
				VPNClientRootCertificates: []*armnetwork.VPNServerConfigVPNClientRootCertificate{
					{
						Name:           to.StringPtr("<name>"),
						PublicCertData: to.StringPtr("<public-cert-data>"),
					}},
				VPNProtocols: []*armnetwork.VPNGatewayTunnelingProtocol{
					armnetwork.VPNGatewayTunnelingProtocol("IkeV2").ToPtr()},
			},
		},
		nil)
	if err != nil {
		log.Fatal(err)
	}
	res, err := poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		log.Fatal(err)
	}
	log.Printf("Response result: %#v\n", res.VPNServerConfigurationsClientCreateOrUpdateResult)
}

// x-ms-original-file: specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/VpnServerConfigurationUpdateTags.json
func ExampleVPNServerConfigurationsClient_UpdateTags() {
	cred, err := azidentity.NewDefaultAzureCredential(nil)
	if err != nil {
		log.Fatalf("failed to obtain a credential: %v", err)
	}
	ctx := context.Background()
	client := armnetwork.NewVPNServerConfigurationsClient("<subscription-id>", cred, nil)
	res, err := client.UpdateTags(ctx,
		"<resource-group-name>",
		"<vpn-server-configuration-name>",
		armnetwork.TagsObject{
			Tags: map[string]*string{
				"key1": to.StringPtr("value1"),
				"key2": to.StringPtr("value2"),
			},
		},
		nil)
	if err != nil {
		log.Fatal(err)
	}
	log.Printf("Response result: %#v\n", res.VPNServerConfigurationsClientUpdateTagsResult)
}

// x-ms-original-file: specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/VpnServerConfigurationDelete.json
func ExampleVPNServerConfigurationsClient_BeginDelete() {
	cred, err := azidentity.NewDefaultAzureCredential(nil)
	if err != nil {
		log.Fatalf("failed to obtain a credential: %v", err)
	}
	ctx := context.Background()
	client := armnetwork.NewVPNServerConfigurationsClient("<subscription-id>", cred, nil)
	poller, err := client.BeginDelete(ctx,
		"<resource-group-name>",
		"<vpn-server-configuration-name>",
		nil)
	if err != nil {
		log.Fatal(err)
	}
	_, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		log.Fatal(err)
	}
}

// x-ms-original-file: specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/VpnServerConfigurationListByResourceGroup.json
func ExampleVPNServerConfigurationsClient_ListByResourceGroup() {
	cred, err := azidentity.NewDefaultAzureCredential(nil)
	if err != nil {
		log.Fatalf("failed to obtain a credential: %v", err)
	}
	ctx := context.Background()
	client := armnetwork.NewVPNServerConfigurationsClient("<subscription-id>", cred, nil)
	pager := client.ListByResourceGroup("<resource-group-name>",
		nil)
	for {
		nextResult := pager.NextPage(ctx)
		if err := pager.Err(); err != nil {
			log.Fatalf("failed to advance page: %v", err)
		}
		if !nextResult {
			break
		}
		for _, v := range pager.PageResponse().Value {
			log.Printf("Pager result: %#v\n", v)
		}
	}
}

// x-ms-original-file: specification/network/resource-manager/Microsoft.Network/stable/2021-05-01/examples/VpnServerConfigurationList.json
func ExampleVPNServerConfigurationsClient_List() {
	cred, err := azidentity.NewDefaultAzureCredential(nil)
	if err != nil {
		log.Fatalf("failed to obtain a credential: %v", err)
	}
	ctx := context.Background()
	client := armnetwork.NewVPNServerConfigurationsClient("<subscription-id>", cred, nil)
	pager := client.List(nil)
	for {
		nextResult := pager.NextPage(ctx)
		if err := pager.Err(); err != nil {
			log.Fatalf("failed to advance page: %v", err)
		}
		if !nextResult {
			break
		}
		for _, v := range pager.PageResponse().Value {
			log.Printf("Pager result: %#v\n", v)
		}
	}
}
