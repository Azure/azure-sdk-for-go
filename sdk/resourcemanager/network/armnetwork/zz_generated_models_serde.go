//go:build go1.18
// +build go1.18

// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

package armnetwork

import (
	"encoding/json"
	"fmt"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore"
	"reflect"
)

// MarshalJSON implements the json.Marshaller interface for type AddressSpace.
func (a AddressSpace) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "addressPrefixes", a.AddressPrefixes)
	return json.Marshal(objectMap)
}

// MarshalJSON implements the json.Marshaller interface for type ApplicationGateway.
func (a ApplicationGateway) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "etag", a.Etag)
	populate(objectMap, "id", a.ID)
	populate(objectMap, "identity", a.Identity)
	populate(objectMap, "location", a.Location)
	populate(objectMap, "name", a.Name)
	populate(objectMap, "properties", a.Properties)
	populate(objectMap, "tags", a.Tags)
	populate(objectMap, "type", a.Type)
	populate(objectMap, "zones", a.Zones)
	return json.Marshal(objectMap)
}

// MarshalJSON implements the json.Marshaller interface for type ApplicationGatewayAvailableSSLOptions.
func (a ApplicationGatewayAvailableSSLOptions) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "id", a.ID)
	populate(objectMap, "location", a.Location)
	populate(objectMap, "name", a.Name)
	populate(objectMap, "properties", a.Properties)
	populate(objectMap, "tags", a.Tags)
	populate(objectMap, "type", a.Type)
	return json.Marshal(objectMap)
}

// MarshalJSON implements the json.Marshaller interface for type ApplicationGatewayAvailableSSLOptionsPropertiesFormat.
func (a ApplicationGatewayAvailableSSLOptionsPropertiesFormat) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "availableCipherSuites", a.AvailableCipherSuites)
	populate(objectMap, "availableProtocols", a.AvailableProtocols)
	populate(objectMap, "defaultPolicy", a.DefaultPolicy)
	populate(objectMap, "predefinedPolicies", a.PredefinedPolicies)
	return json.Marshal(objectMap)
}

// MarshalJSON implements the json.Marshaller interface for type ApplicationGatewayBackendAddressPoolPropertiesFormat.
func (a ApplicationGatewayBackendAddressPoolPropertiesFormat) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "backendAddresses", a.BackendAddresses)
	populate(objectMap, "backendIPConfigurations", a.BackendIPConfigurations)
	populate(objectMap, "provisioningState", a.ProvisioningState)
	return json.Marshal(objectMap)
}

// MarshalJSON implements the json.Marshaller interface for type ApplicationGatewayBackendHTTPSettingsPropertiesFormat.
func (a ApplicationGatewayBackendHTTPSettingsPropertiesFormat) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "affinityCookieName", a.AffinityCookieName)
	populate(objectMap, "authenticationCertificates", a.AuthenticationCertificates)
	populate(objectMap, "connectionDraining", a.ConnectionDraining)
	populate(objectMap, "cookieBasedAffinity", a.CookieBasedAffinity)
	populate(objectMap, "hostName", a.HostName)
	populate(objectMap, "path", a.Path)
	populate(objectMap, "pickHostNameFromBackendAddress", a.PickHostNameFromBackendAddress)
	populate(objectMap, "port", a.Port)
	populate(objectMap, "probe", a.Probe)
	populate(objectMap, "probeEnabled", a.ProbeEnabled)
	populate(objectMap, "protocol", a.Protocol)
	populate(objectMap, "provisioningState", a.ProvisioningState)
	populate(objectMap, "requestTimeout", a.RequestTimeout)
	populate(objectMap, "trustedRootCertificates", a.TrustedRootCertificates)
	return json.Marshal(objectMap)
}

// MarshalJSON implements the json.Marshaller interface for type ApplicationGatewayBackendSettingsPropertiesFormat.
func (a ApplicationGatewayBackendSettingsPropertiesFormat) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "hostName", a.HostName)
	populate(objectMap, "pickHostNameFromBackendAddress", a.PickHostNameFromBackendAddress)
	populate(objectMap, "port", a.Port)
	populate(objectMap, "probe", a.Probe)
	populate(objectMap, "protocol", a.Protocol)
	populate(objectMap, "provisioningState", a.ProvisioningState)
	populate(objectMap, "timeout", a.Timeout)
	populate(objectMap, "trustedRootCertificates", a.TrustedRootCertificates)
	return json.Marshal(objectMap)
}

// MarshalJSON implements the json.Marshaller interface for type ApplicationGatewayFirewallDisabledRuleGroup.
func (a ApplicationGatewayFirewallDisabledRuleGroup) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "ruleGroupName", a.RuleGroupName)
	populate(objectMap, "rules", a.Rules)
	return json.Marshal(objectMap)
}

// MarshalJSON implements the json.Marshaller interface for type ApplicationGatewayFirewallRuleGroup.
func (a ApplicationGatewayFirewallRuleGroup) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "description", a.Description)
	populate(objectMap, "ruleGroupName", a.RuleGroupName)
	populate(objectMap, "rules", a.Rules)
	return json.Marshal(objectMap)
}

// MarshalJSON implements the json.Marshaller interface for type ApplicationGatewayFirewallRuleSet.
func (a ApplicationGatewayFirewallRuleSet) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "id", a.ID)
	populate(objectMap, "location", a.Location)
	populate(objectMap, "name", a.Name)
	populate(objectMap, "properties", a.Properties)
	populate(objectMap, "tags", a.Tags)
	populate(objectMap, "type", a.Type)
	return json.Marshal(objectMap)
}

// MarshalJSON implements the json.Marshaller interface for type ApplicationGatewayFirewallRuleSetPropertiesFormat.
func (a ApplicationGatewayFirewallRuleSetPropertiesFormat) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "provisioningState", a.ProvisioningState)
	populate(objectMap, "ruleGroups", a.RuleGroups)
	populate(objectMap, "ruleSetType", a.RuleSetType)
	populate(objectMap, "ruleSetVersion", a.RuleSetVersion)
	return json.Marshal(objectMap)
}

// MarshalJSON implements the json.Marshaller interface for type ApplicationGatewayHTTPListenerPropertiesFormat.
func (a ApplicationGatewayHTTPListenerPropertiesFormat) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "customErrorConfigurations", a.CustomErrorConfigurations)
	populate(objectMap, "firewallPolicy", a.FirewallPolicy)
	populate(objectMap, "frontendIPConfiguration", a.FrontendIPConfiguration)
	populate(objectMap, "frontendPort", a.FrontendPort)
	populate(objectMap, "hostName", a.HostName)
	populate(objectMap, "hostNames", a.HostNames)
	populate(objectMap, "protocol", a.Protocol)
	populate(objectMap, "provisioningState", a.ProvisioningState)
	populate(objectMap, "requireServerNameIndication", a.RequireServerNameIndication)
	populate(objectMap, "sslCertificate", a.SSLCertificate)
	populate(objectMap, "sslProfile", a.SSLProfile)
	return json.Marshal(objectMap)
}

// MarshalJSON implements the json.Marshaller interface for type ApplicationGatewayLoadDistributionPolicyPropertiesFormat.
func (a ApplicationGatewayLoadDistributionPolicyPropertiesFormat) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "loadDistributionAlgorithm", a.LoadDistributionAlgorithm)
	populate(objectMap, "loadDistributionTargets", a.LoadDistributionTargets)
	populate(objectMap, "provisioningState", a.ProvisioningState)
	return json.Marshal(objectMap)
}

// MarshalJSON implements the json.Marshaller interface for type ApplicationGatewayPathRulePropertiesFormat.
func (a ApplicationGatewayPathRulePropertiesFormat) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "backendAddressPool", a.BackendAddressPool)
	populate(objectMap, "backendHttpSettings", a.BackendHTTPSettings)
	populate(objectMap, "firewallPolicy", a.FirewallPolicy)
	populate(objectMap, "loadDistributionPolicy", a.LoadDistributionPolicy)
	populate(objectMap, "paths", a.Paths)
	populate(objectMap, "provisioningState", a.ProvisioningState)
	populate(objectMap, "redirectConfiguration", a.RedirectConfiguration)
	populate(objectMap, "rewriteRuleSet", a.RewriteRuleSet)
	return json.Marshal(objectMap)
}

// MarshalJSON implements the json.Marshaller interface for type ApplicationGatewayPrivateLinkConfigurationProperties.
func (a ApplicationGatewayPrivateLinkConfigurationProperties) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "ipConfigurations", a.IPConfigurations)
	populate(objectMap, "provisioningState", a.ProvisioningState)
	return json.Marshal(objectMap)
}

// MarshalJSON implements the json.Marshaller interface for type ApplicationGatewayPrivateLinkResourceProperties.
func (a ApplicationGatewayPrivateLinkResourceProperties) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "groupId", a.GroupID)
	populate(objectMap, "requiredMembers", a.RequiredMembers)
	populate(objectMap, "requiredZoneNames", a.RequiredZoneNames)
	return json.Marshal(objectMap)
}

// MarshalJSON implements the json.Marshaller interface for type ApplicationGatewayProbeHealthResponseMatch.
func (a ApplicationGatewayProbeHealthResponseMatch) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "body", a.Body)
	populate(objectMap, "statusCodes", a.StatusCodes)
	return json.Marshal(objectMap)
}

// MarshalJSON implements the json.Marshaller interface for type ApplicationGatewayPropertiesFormat.
func (a ApplicationGatewayPropertiesFormat) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "authenticationCertificates", a.AuthenticationCertificates)
	populate(objectMap, "autoscaleConfiguration", a.AutoscaleConfiguration)
	populate(objectMap, "backendAddressPools", a.BackendAddressPools)
	populate(objectMap, "backendHttpSettingsCollection", a.BackendHTTPSettingsCollection)
	populate(objectMap, "backendSettingsCollection", a.BackendSettingsCollection)
	populate(objectMap, "customErrorConfigurations", a.CustomErrorConfigurations)
	populate(objectMap, "enableFips", a.EnableFips)
	populate(objectMap, "enableHttp2", a.EnableHTTP2)
	populate(objectMap, "firewallPolicy", a.FirewallPolicy)
	populate(objectMap, "forceFirewallPolicyAssociation", a.ForceFirewallPolicyAssociation)
	populate(objectMap, "frontendIPConfigurations", a.FrontendIPConfigurations)
	populate(objectMap, "frontendPorts", a.FrontendPorts)
	populate(objectMap, "gatewayIPConfigurations", a.GatewayIPConfigurations)
	populate(objectMap, "globalConfiguration", a.GlobalConfiguration)
	populate(objectMap, "httpListeners", a.HTTPListeners)
	populate(objectMap, "listeners", a.Listeners)
	populate(objectMap, "loadDistributionPolicies", a.LoadDistributionPolicies)
	populate(objectMap, "operationalState", a.OperationalState)
	populate(objectMap, "privateEndpointConnections", a.PrivateEndpointConnections)
	populate(objectMap, "privateLinkConfigurations", a.PrivateLinkConfigurations)
	populate(objectMap, "probes", a.Probes)
	populate(objectMap, "provisioningState", a.ProvisioningState)
	populate(objectMap, "redirectConfigurations", a.RedirectConfigurations)
	populate(objectMap, "requestRoutingRules", a.RequestRoutingRules)
	populate(objectMap, "resourceGuid", a.ResourceGUID)
	populate(objectMap, "rewriteRuleSets", a.RewriteRuleSets)
	populate(objectMap, "routingRules", a.RoutingRules)
	populate(objectMap, "sku", a.SKU)
	populate(objectMap, "sslCertificates", a.SSLCertificates)
	populate(objectMap, "sslPolicy", a.SSLPolicy)
	populate(objectMap, "sslProfiles", a.SSLProfiles)
	populate(objectMap, "trustedClientCertificates", a.TrustedClientCertificates)
	populate(objectMap, "trustedRootCertificates", a.TrustedRootCertificates)
	populate(objectMap, "urlPathMaps", a.URLPathMaps)
	populate(objectMap, "webApplicationFirewallConfiguration", a.WebApplicationFirewallConfiguration)
	return json.Marshal(objectMap)
}

// MarshalJSON implements the json.Marshaller interface for type ApplicationGatewayRedirectConfigurationPropertiesFormat.
func (a ApplicationGatewayRedirectConfigurationPropertiesFormat) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "includePath", a.IncludePath)
	populate(objectMap, "includeQueryString", a.IncludeQueryString)
	populate(objectMap, "pathRules", a.PathRules)
	populate(objectMap, "redirectType", a.RedirectType)
	populate(objectMap, "requestRoutingRules", a.RequestRoutingRules)
	populate(objectMap, "targetListener", a.TargetListener)
	populate(objectMap, "targetUrl", a.TargetURL)
	populate(objectMap, "urlPathMaps", a.URLPathMaps)
	return json.Marshal(objectMap)
}

// MarshalJSON implements the json.Marshaller interface for type ApplicationGatewayRewriteRule.
func (a ApplicationGatewayRewriteRule) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "actionSet", a.ActionSet)
	populate(objectMap, "conditions", a.Conditions)
	populate(objectMap, "name", a.Name)
	populate(objectMap, "ruleSequence", a.RuleSequence)
	return json.Marshal(objectMap)
}

// MarshalJSON implements the json.Marshaller interface for type ApplicationGatewayRewriteRuleActionSet.
func (a ApplicationGatewayRewriteRuleActionSet) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "requestHeaderConfigurations", a.RequestHeaderConfigurations)
	populate(objectMap, "responseHeaderConfigurations", a.ResponseHeaderConfigurations)
	populate(objectMap, "urlConfiguration", a.URLConfiguration)
	return json.Marshal(objectMap)
}

// MarshalJSON implements the json.Marshaller interface for type ApplicationGatewayRewriteRuleSetPropertiesFormat.
func (a ApplicationGatewayRewriteRuleSetPropertiesFormat) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "provisioningState", a.ProvisioningState)
	populate(objectMap, "rewriteRules", a.RewriteRules)
	return json.Marshal(objectMap)
}

// MarshalJSON implements the json.Marshaller interface for type ApplicationGatewaySSLPolicy.
func (a ApplicationGatewaySSLPolicy) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "cipherSuites", a.CipherSuites)
	populate(objectMap, "disabledSslProtocols", a.DisabledSSLProtocols)
	populate(objectMap, "minProtocolVersion", a.MinProtocolVersion)
	populate(objectMap, "policyName", a.PolicyName)
	populate(objectMap, "policyType", a.PolicyType)
	return json.Marshal(objectMap)
}

// MarshalJSON implements the json.Marshaller interface for type ApplicationGatewaySSLPredefinedPolicyPropertiesFormat.
func (a ApplicationGatewaySSLPredefinedPolicyPropertiesFormat) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "cipherSuites", a.CipherSuites)
	populate(objectMap, "minProtocolVersion", a.MinProtocolVersion)
	return json.Marshal(objectMap)
}

// MarshalJSON implements the json.Marshaller interface for type ApplicationGatewaySSLProfilePropertiesFormat.
func (a ApplicationGatewaySSLProfilePropertiesFormat) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "clientAuthConfiguration", a.ClientAuthConfiguration)
	populate(objectMap, "provisioningState", a.ProvisioningState)
	populate(objectMap, "sslPolicy", a.SSLPolicy)
	populate(objectMap, "trustedClientCertificates", a.TrustedClientCertificates)
	return json.Marshal(objectMap)
}

// MarshalJSON implements the json.Marshaller interface for type ApplicationGatewayURLPathMapPropertiesFormat.
func (a ApplicationGatewayURLPathMapPropertiesFormat) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "defaultBackendAddressPool", a.DefaultBackendAddressPool)
	populate(objectMap, "defaultBackendHttpSettings", a.DefaultBackendHTTPSettings)
	populate(objectMap, "defaultLoadDistributionPolicy", a.DefaultLoadDistributionPolicy)
	populate(objectMap, "defaultRedirectConfiguration", a.DefaultRedirectConfiguration)
	populate(objectMap, "defaultRewriteRuleSet", a.DefaultRewriteRuleSet)
	populate(objectMap, "pathRules", a.PathRules)
	populate(objectMap, "provisioningState", a.ProvisioningState)
	return json.Marshal(objectMap)
}

// MarshalJSON implements the json.Marshaller interface for type ApplicationGatewayWebApplicationFirewallConfiguration.
func (a ApplicationGatewayWebApplicationFirewallConfiguration) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "disabledRuleGroups", a.DisabledRuleGroups)
	populate(objectMap, "enabled", a.Enabled)
	populate(objectMap, "exclusions", a.Exclusions)
	populate(objectMap, "fileUploadLimitInMb", a.FileUploadLimitInMb)
	populate(objectMap, "firewallMode", a.FirewallMode)
	populate(objectMap, "maxRequestBodySize", a.MaxRequestBodySize)
	populate(objectMap, "maxRequestBodySizeInKb", a.MaxRequestBodySizeInKb)
	populate(objectMap, "requestBodyCheck", a.RequestBodyCheck)
	populate(objectMap, "ruleSetType", a.RuleSetType)
	populate(objectMap, "ruleSetVersion", a.RuleSetVersion)
	return json.Marshal(objectMap)
}

// MarshalJSON implements the json.Marshaller interface for type ApplicationRule.
func (a ApplicationRule) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "description", a.Description)
	populate(objectMap, "destinationAddresses", a.DestinationAddresses)
	populate(objectMap, "fqdnTags", a.FqdnTags)
	populate(objectMap, "name", a.Name)
	populate(objectMap, "protocols", a.Protocols)
	objectMap["ruleType"] = FirewallPolicyRuleTypeApplicationRule
	populate(objectMap, "sourceAddresses", a.SourceAddresses)
	populate(objectMap, "sourceIpGroups", a.SourceIPGroups)
	populate(objectMap, "targetFqdns", a.TargetFqdns)
	populate(objectMap, "targetUrls", a.TargetUrls)
	populate(objectMap, "terminateTLS", a.TerminateTLS)
	populate(objectMap, "webCategories", a.WebCategories)
	return json.Marshal(objectMap)
}

// UnmarshalJSON implements the json.Unmarshaller interface for type ApplicationRule.
func (a *ApplicationRule) UnmarshalJSON(data []byte) error {
	var rawMsg map[string]json.RawMessage
	if err := json.Unmarshal(data, &rawMsg); err != nil {
		return fmt.Errorf("unmarshalling type %T: %v", a, err)
	}
	for key, val := range rawMsg {
		var err error
		switch key {
		case "description":
			err = unpopulate(val, "Description", &a.Description)
			delete(rawMsg, key)
		case "destinationAddresses":
			err = unpopulate(val, "DestinationAddresses", &a.DestinationAddresses)
			delete(rawMsg, key)
		case "fqdnTags":
			err = unpopulate(val, "FqdnTags", &a.FqdnTags)
			delete(rawMsg, key)
		case "name":
			err = unpopulate(val, "Name", &a.Name)
			delete(rawMsg, key)
		case "protocols":
			err = unpopulate(val, "Protocols", &a.Protocols)
			delete(rawMsg, key)
		case "ruleType":
			err = unpopulate(val, "RuleType", &a.RuleType)
			delete(rawMsg, key)
		case "sourceAddresses":
			err = unpopulate(val, "SourceAddresses", &a.SourceAddresses)
			delete(rawMsg, key)
		case "sourceIpGroups":
			err = unpopulate(val, "SourceIPGroups", &a.SourceIPGroups)
			delete(rawMsg, key)
		case "targetFqdns":
			err = unpopulate(val, "TargetFqdns", &a.TargetFqdns)
			delete(rawMsg, key)
		case "targetUrls":
			err = unpopulate(val, "TargetUrls", &a.TargetUrls)
			delete(rawMsg, key)
		case "terminateTLS":
			err = unpopulate(val, "TerminateTLS", &a.TerminateTLS)
			delete(rawMsg, key)
		case "webCategories":
			err = unpopulate(val, "WebCategories", &a.WebCategories)
			delete(rawMsg, key)
		}
		if err != nil {
			return fmt.Errorf("unmarshalling type %T: %v", a, err)
		}
	}
	return nil
}

// MarshalJSON implements the json.Marshaller interface for type ApplicationSecurityGroup.
func (a ApplicationSecurityGroup) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "etag", a.Etag)
	populate(objectMap, "id", a.ID)
	populate(objectMap, "location", a.Location)
	populate(objectMap, "name", a.Name)
	populate(objectMap, "properties", a.Properties)
	populate(objectMap, "tags", a.Tags)
	populate(objectMap, "type", a.Type)
	return json.Marshal(objectMap)
}

// MarshalJSON implements the json.Marshaller interface for type AvailableProvidersListParameters.
func (a AvailableProvidersListParameters) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "azureLocations", a.AzureLocations)
	populate(objectMap, "city", a.City)
	populate(objectMap, "country", a.Country)
	populate(objectMap, "state", a.State)
	return json.Marshal(objectMap)
}

// MarshalJSON implements the json.Marshaller interface for type AzureFirewall.
func (a AzureFirewall) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "etag", a.Etag)
	populate(objectMap, "id", a.ID)
	populate(objectMap, "location", a.Location)
	populate(objectMap, "name", a.Name)
	populate(objectMap, "properties", a.Properties)
	populate(objectMap, "tags", a.Tags)
	populate(objectMap, "type", a.Type)
	populate(objectMap, "zones", a.Zones)
	return json.Marshal(objectMap)
}

// MarshalJSON implements the json.Marshaller interface for type AzureFirewallApplicationRule.
func (a AzureFirewallApplicationRule) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "description", a.Description)
	populate(objectMap, "fqdnTags", a.FqdnTags)
	populate(objectMap, "name", a.Name)
	populate(objectMap, "protocols", a.Protocols)
	populate(objectMap, "sourceAddresses", a.SourceAddresses)
	populate(objectMap, "sourceIpGroups", a.SourceIPGroups)
	populate(objectMap, "targetFqdns", a.TargetFqdns)
	return json.Marshal(objectMap)
}

// MarshalJSON implements the json.Marshaller interface for type AzureFirewallApplicationRuleCollectionPropertiesFormat.
func (a AzureFirewallApplicationRuleCollectionPropertiesFormat) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "action", a.Action)
	populate(objectMap, "priority", a.Priority)
	populate(objectMap, "provisioningState", a.ProvisioningState)
	populate(objectMap, "rules", a.Rules)
	return json.Marshal(objectMap)
}

// MarshalJSON implements the json.Marshaller interface for type AzureFirewallFqdnTag.
func (a AzureFirewallFqdnTag) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "etag", a.Etag)
	populate(objectMap, "id", a.ID)
	populate(objectMap, "location", a.Location)
	populate(objectMap, "name", a.Name)
	populate(objectMap, "properties", a.Properties)
	populate(objectMap, "tags", a.Tags)
	populate(objectMap, "type", a.Type)
	return json.Marshal(objectMap)
}

// MarshalJSON implements the json.Marshaller interface for type AzureFirewallNatRule.
func (a AzureFirewallNatRule) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "description", a.Description)
	populate(objectMap, "destinationAddresses", a.DestinationAddresses)
	populate(objectMap, "destinationPorts", a.DestinationPorts)
	populate(objectMap, "name", a.Name)
	populate(objectMap, "protocols", a.Protocols)
	populate(objectMap, "sourceAddresses", a.SourceAddresses)
	populate(objectMap, "sourceIpGroups", a.SourceIPGroups)
	populate(objectMap, "translatedAddress", a.TranslatedAddress)
	populate(objectMap, "translatedFqdn", a.TranslatedFqdn)
	populate(objectMap, "translatedPort", a.TranslatedPort)
	return json.Marshal(objectMap)
}

// MarshalJSON implements the json.Marshaller interface for type AzureFirewallNatRuleCollectionProperties.
func (a AzureFirewallNatRuleCollectionProperties) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "action", a.Action)
	populate(objectMap, "priority", a.Priority)
	populate(objectMap, "provisioningState", a.ProvisioningState)
	populate(objectMap, "rules", a.Rules)
	return json.Marshal(objectMap)
}

// MarshalJSON implements the json.Marshaller interface for type AzureFirewallNetworkRule.
func (a AzureFirewallNetworkRule) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "description", a.Description)
	populate(objectMap, "destinationAddresses", a.DestinationAddresses)
	populate(objectMap, "destinationFqdns", a.DestinationFqdns)
	populate(objectMap, "destinationIpGroups", a.DestinationIPGroups)
	populate(objectMap, "destinationPorts", a.DestinationPorts)
	populate(objectMap, "name", a.Name)
	populate(objectMap, "protocols", a.Protocols)
	populate(objectMap, "sourceAddresses", a.SourceAddresses)
	populate(objectMap, "sourceIpGroups", a.SourceIPGroups)
	return json.Marshal(objectMap)
}

// MarshalJSON implements the json.Marshaller interface for type AzureFirewallNetworkRuleCollectionPropertiesFormat.
func (a AzureFirewallNetworkRuleCollectionPropertiesFormat) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "action", a.Action)
	populate(objectMap, "priority", a.Priority)
	populate(objectMap, "provisioningState", a.ProvisioningState)
	populate(objectMap, "rules", a.Rules)
	return json.Marshal(objectMap)
}

// MarshalJSON implements the json.Marshaller interface for type AzureFirewallPropertiesFormat.
func (a AzureFirewallPropertiesFormat) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "additionalProperties", a.AdditionalProperties)
	populate(objectMap, "applicationRuleCollections", a.ApplicationRuleCollections)
	populate(objectMap, "firewallPolicy", a.FirewallPolicy)
	populate(objectMap, "hubIPAddresses", a.HubIPAddresses)
	populate(objectMap, "ipConfigurations", a.IPConfigurations)
	populate(objectMap, "ipGroups", a.IPGroups)
	populate(objectMap, "managementIpConfiguration", a.ManagementIPConfiguration)
	populate(objectMap, "natRuleCollections", a.NatRuleCollections)
	populate(objectMap, "networkRuleCollections", a.NetworkRuleCollections)
	populate(objectMap, "provisioningState", a.ProvisioningState)
	populate(objectMap, "sku", a.SKU)
	populate(objectMap, "threatIntelMode", a.ThreatIntelMode)
	populate(objectMap, "virtualHub", a.VirtualHub)
	return json.Marshal(objectMap)
}

// UnmarshalJSON implements the json.Unmarshaller interface for type AzureReachabilityReportLatencyInfo.
func (a *AzureReachabilityReportLatencyInfo) UnmarshalJSON(data []byte) error {
	var rawMsg map[string]json.RawMessage
	if err := json.Unmarshal(data, &rawMsg); err != nil {
		return fmt.Errorf("unmarshalling type %T: %v", a, err)
	}
	for key, val := range rawMsg {
		var err error
		switch key {
		case "score":
			err = unpopulate(val, "Score", &a.Score)
			delete(rawMsg, key)
		case "timeStamp":
			err = unpopulateTimeRFC3339(val, "TimeStamp", &a.TimeStamp)
			delete(rawMsg, key)
		}
		if err != nil {
			return fmt.Errorf("unmarshalling type %T: %v", a, err)
		}
	}
	return nil
}

// MarshalJSON implements the json.Marshaller interface for type AzureReachabilityReportParameters.
func (a AzureReachabilityReportParameters) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "azureLocations", a.AzureLocations)
	populateTimeRFC3339(objectMap, "endTime", a.EndTime)
	populate(objectMap, "providerLocation", a.ProviderLocation)
	populate(objectMap, "providers", a.Providers)
	populateTimeRFC3339(objectMap, "startTime", a.StartTime)
	return json.Marshal(objectMap)
}

// UnmarshalJSON implements the json.Unmarshaller interface for type AzureReachabilityReportParameters.
func (a *AzureReachabilityReportParameters) UnmarshalJSON(data []byte) error {
	var rawMsg map[string]json.RawMessage
	if err := json.Unmarshal(data, &rawMsg); err != nil {
		return fmt.Errorf("unmarshalling type %T: %v", a, err)
	}
	for key, val := range rawMsg {
		var err error
		switch key {
		case "azureLocations":
			err = unpopulate(val, "AzureLocations", &a.AzureLocations)
			delete(rawMsg, key)
		case "endTime":
			err = unpopulateTimeRFC3339(val, "EndTime", &a.EndTime)
			delete(rawMsg, key)
		case "providerLocation":
			err = unpopulate(val, "ProviderLocation", &a.ProviderLocation)
			delete(rawMsg, key)
		case "providers":
			err = unpopulate(val, "Providers", &a.Providers)
			delete(rawMsg, key)
		case "startTime":
			err = unpopulateTimeRFC3339(val, "StartTime", &a.StartTime)
			delete(rawMsg, key)
		}
		if err != nil {
			return fmt.Errorf("unmarshalling type %T: %v", a, err)
		}
	}
	return nil
}

// MarshalJSON implements the json.Marshaller interface for type BGPCommunity.
func (b BGPCommunity) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "communityName", b.CommunityName)
	populate(objectMap, "communityPrefixes", b.CommunityPrefixes)
	populate(objectMap, "communityValue", b.CommunityValue)
	populate(objectMap, "isAuthorizedToUse", b.IsAuthorizedToUse)
	populate(objectMap, "serviceGroup", b.ServiceGroup)
	populate(objectMap, "serviceSupportedRegion", b.ServiceSupportedRegion)
	return json.Marshal(objectMap)
}

// MarshalJSON implements the json.Marshaller interface for type BackendAddressPoolPropertiesFormat.
func (b BackendAddressPoolPropertiesFormat) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "backendIPConfigurations", b.BackendIPConfigurations)
	populate(objectMap, "drainPeriodInSeconds", b.DrainPeriodInSeconds)
	populate(objectMap, "inboundNatRules", b.InboundNatRules)
	populate(objectMap, "loadBalancerBackendAddresses", b.LoadBalancerBackendAddresses)
	populate(objectMap, "loadBalancingRules", b.LoadBalancingRules)
	populate(objectMap, "location", b.Location)
	populate(objectMap, "outboundRule", b.OutboundRule)
	populate(objectMap, "outboundRules", b.OutboundRules)
	populate(objectMap, "provisioningState", b.ProvisioningState)
	populate(objectMap, "tunnelInterfaces", b.TunnelInterfaces)
	return json.Marshal(objectMap)
}

// MarshalJSON implements the json.Marshaller interface for type BastionHost.
func (b BastionHost) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "etag", b.Etag)
	populate(objectMap, "id", b.ID)
	populate(objectMap, "location", b.Location)
	populate(objectMap, "name", b.Name)
	populate(objectMap, "properties", b.Properties)
	populate(objectMap, "sku", b.SKU)
	populate(objectMap, "tags", b.Tags)
	populate(objectMap, "type", b.Type)
	return json.Marshal(objectMap)
}

// MarshalJSON implements the json.Marshaller interface for type BastionHostPropertiesFormat.
func (b BastionHostPropertiesFormat) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "dnsName", b.DNSName)
	populate(objectMap, "disableCopyPaste", b.DisableCopyPaste)
	populate(objectMap, "enableFileCopy", b.EnableFileCopy)
	populate(objectMap, "enableIpConnect", b.EnableIPConnect)
	populate(objectMap, "enableShareableLink", b.EnableShareableLink)
	populate(objectMap, "enableTunneling", b.EnableTunneling)
	populate(objectMap, "ipConfigurations", b.IPConfigurations)
	populate(objectMap, "provisioningState", b.ProvisioningState)
	populate(objectMap, "scaleUnits", b.ScaleUnits)
	return json.Marshal(objectMap)
}

// MarshalJSON implements the json.Marshaller interface for type BastionShareableLinkListRequest.
func (b BastionShareableLinkListRequest) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "vms", b.VMs)
	return json.Marshal(objectMap)
}

// MarshalJSON implements the json.Marshaller interface for type BgpServiceCommunity.
func (b BgpServiceCommunity) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "id", b.ID)
	populate(objectMap, "location", b.Location)
	populate(objectMap, "name", b.Name)
	populate(objectMap, "properties", b.Properties)
	populate(objectMap, "tags", b.Tags)
	populate(objectMap, "type", b.Type)
	return json.Marshal(objectMap)
}

// MarshalJSON implements the json.Marshaller interface for type BgpServiceCommunityPropertiesFormat.
func (b BgpServiceCommunityPropertiesFormat) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "bgpCommunities", b.BgpCommunities)
	populate(objectMap, "serviceName", b.ServiceName)
	return json.Marshal(objectMap)
}

// MarshalJSON implements the json.Marshaller interface for type BgpSettings.
func (b BgpSettings) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "asn", b.Asn)
	populate(objectMap, "bgpPeeringAddress", b.BgpPeeringAddress)
	populate(objectMap, "bgpPeeringAddresses", b.BgpPeeringAddresses)
	populate(objectMap, "peerWeight", b.PeerWeight)
	return json.Marshal(objectMap)
}

// MarshalJSON implements the json.Marshaller interface for type ConfigurationDiagnosticParameters.
func (c ConfigurationDiagnosticParameters) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "profiles", c.Profiles)
	populate(objectMap, "targetResourceId", c.TargetResourceID)
	populate(objectMap, "verbosityLevel", c.VerbosityLevel)
	return json.Marshal(objectMap)
}

// MarshalJSON implements the json.Marshaller interface for type ConnectionMonitor.
func (c ConnectionMonitor) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "location", c.Location)
	populate(objectMap, "properties", c.Properties)
	populate(objectMap, "tags", c.Tags)
	return json.Marshal(objectMap)
}

// MarshalJSON implements the json.Marshaller interface for type ConnectionMonitorEndpointFilter.
func (c ConnectionMonitorEndpointFilter) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "items", c.Items)
	populate(objectMap, "type", c.Type)
	return json.Marshal(objectMap)
}

// MarshalJSON implements the json.Marshaller interface for type ConnectionMonitorEndpointScope.
func (c ConnectionMonitorEndpointScope) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "exclude", c.Exclude)
	populate(objectMap, "include", c.Include)
	return json.Marshal(objectMap)
}

// MarshalJSON implements the json.Marshaller interface for type ConnectionMonitorHTTPConfiguration.
func (c ConnectionMonitorHTTPConfiguration) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "method", c.Method)
	populate(objectMap, "path", c.Path)
	populate(objectMap, "port", c.Port)
	populate(objectMap, "preferHTTPS", c.PreferHTTPS)
	populate(objectMap, "requestHeaders", c.RequestHeaders)
	populate(objectMap, "validStatusCodeRanges", c.ValidStatusCodeRanges)
	return json.Marshal(objectMap)
}

// MarshalJSON implements the json.Marshaller interface for type ConnectionMonitorParameters.
func (c ConnectionMonitorParameters) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "autoStart", c.AutoStart)
	populate(objectMap, "destination", c.Destination)
	populate(objectMap, "endpoints", c.Endpoints)
	populate(objectMap, "monitoringIntervalInSeconds", c.MonitoringIntervalInSeconds)
	populate(objectMap, "notes", c.Notes)
	populate(objectMap, "outputs", c.Outputs)
	populate(objectMap, "source", c.Source)
	populate(objectMap, "testConfigurations", c.TestConfigurations)
	populate(objectMap, "testGroups", c.TestGroups)
	return json.Marshal(objectMap)
}

// MarshalJSON implements the json.Marshaller interface for type ConnectionMonitorResultProperties.
func (c ConnectionMonitorResultProperties) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "autoStart", c.AutoStart)
	populate(objectMap, "connectionMonitorType", c.ConnectionMonitorType)
	populate(objectMap, "destination", c.Destination)
	populate(objectMap, "endpoints", c.Endpoints)
	populate(objectMap, "monitoringIntervalInSeconds", c.MonitoringIntervalInSeconds)
	populate(objectMap, "monitoringStatus", c.MonitoringStatus)
	populate(objectMap, "notes", c.Notes)
	populate(objectMap, "outputs", c.Outputs)
	populate(objectMap, "provisioningState", c.ProvisioningState)
	populate(objectMap, "source", c.Source)
	populateTimeRFC3339(objectMap, "startTime", c.StartTime)
	populate(objectMap, "testConfigurations", c.TestConfigurations)
	populate(objectMap, "testGroups", c.TestGroups)
	return json.Marshal(objectMap)
}

// UnmarshalJSON implements the json.Unmarshaller interface for type ConnectionMonitorResultProperties.
func (c *ConnectionMonitorResultProperties) UnmarshalJSON(data []byte) error {
	var rawMsg map[string]json.RawMessage
	if err := json.Unmarshal(data, &rawMsg); err != nil {
		return fmt.Errorf("unmarshalling type %T: %v", c, err)
	}
	for key, val := range rawMsg {
		var err error
		switch key {
		case "autoStart":
			err = unpopulate(val, "AutoStart", &c.AutoStart)
			delete(rawMsg, key)
		case "connectionMonitorType":
			err = unpopulate(val, "ConnectionMonitorType", &c.ConnectionMonitorType)
			delete(rawMsg, key)
		case "destination":
			err = unpopulate(val, "Destination", &c.Destination)
			delete(rawMsg, key)
		case "endpoints":
			err = unpopulate(val, "Endpoints", &c.Endpoints)
			delete(rawMsg, key)
		case "monitoringIntervalInSeconds":
			err = unpopulate(val, "MonitoringIntervalInSeconds", &c.MonitoringIntervalInSeconds)
			delete(rawMsg, key)
		case "monitoringStatus":
			err = unpopulate(val, "MonitoringStatus", &c.MonitoringStatus)
			delete(rawMsg, key)
		case "notes":
			err = unpopulate(val, "Notes", &c.Notes)
			delete(rawMsg, key)
		case "outputs":
			err = unpopulate(val, "Outputs", &c.Outputs)
			delete(rawMsg, key)
		case "provisioningState":
			err = unpopulate(val, "ProvisioningState", &c.ProvisioningState)
			delete(rawMsg, key)
		case "source":
			err = unpopulate(val, "Source", &c.Source)
			delete(rawMsg, key)
		case "startTime":
			err = unpopulateTimeRFC3339(val, "StartTime", &c.StartTime)
			delete(rawMsg, key)
		case "testConfigurations":
			err = unpopulate(val, "TestConfigurations", &c.TestConfigurations)
			delete(rawMsg, key)
		case "testGroups":
			err = unpopulate(val, "TestGroups", &c.TestGroups)
			delete(rawMsg, key)
		}
		if err != nil {
			return fmt.Errorf("unmarshalling type %T: %v", c, err)
		}
	}
	return nil
}

// MarshalJSON implements the json.Marshaller interface for type ConnectionMonitorTestGroup.
func (c ConnectionMonitorTestGroup) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "destinations", c.Destinations)
	populate(objectMap, "disable", c.Disable)
	populate(objectMap, "name", c.Name)
	populate(objectMap, "sources", c.Sources)
	populate(objectMap, "testConfigurations", c.TestConfigurations)
	return json.Marshal(objectMap)
}

// UnmarshalJSON implements the json.Unmarshaller interface for type ConnectionStateSnapshot.
func (c *ConnectionStateSnapshot) UnmarshalJSON(data []byte) error {
	var rawMsg map[string]json.RawMessage
	if err := json.Unmarshal(data, &rawMsg); err != nil {
		return fmt.Errorf("unmarshalling type %T: %v", c, err)
	}
	for key, val := range rawMsg {
		var err error
		switch key {
		case "avgLatencyInMs":
			err = unpopulate(val, "AvgLatencyInMs", &c.AvgLatencyInMs)
			delete(rawMsg, key)
		case "connectionState":
			err = unpopulate(val, "ConnectionState", &c.ConnectionState)
			delete(rawMsg, key)
		case "endTime":
			err = unpopulateTimeRFC3339(val, "EndTime", &c.EndTime)
			delete(rawMsg, key)
		case "evaluationState":
			err = unpopulate(val, "EvaluationState", &c.EvaluationState)
			delete(rawMsg, key)
		case "hops":
			err = unpopulate(val, "Hops", &c.Hops)
			delete(rawMsg, key)
		case "maxLatencyInMs":
			err = unpopulate(val, "MaxLatencyInMs", &c.MaxLatencyInMs)
			delete(rawMsg, key)
		case "minLatencyInMs":
			err = unpopulate(val, "MinLatencyInMs", &c.MinLatencyInMs)
			delete(rawMsg, key)
		case "probesFailed":
			err = unpopulate(val, "ProbesFailed", &c.ProbesFailed)
			delete(rawMsg, key)
		case "probesSent":
			err = unpopulate(val, "ProbesSent", &c.ProbesSent)
			delete(rawMsg, key)
		case "startTime":
			err = unpopulateTimeRFC3339(val, "StartTime", &c.StartTime)
			delete(rawMsg, key)
		}
		if err != nil {
			return fmt.Errorf("unmarshalling type %T: %v", c, err)
		}
	}
	return nil
}

// MarshalJSON implements the json.Marshaller interface for type ContainerNetworkInterfaceConfigurationPropertiesFormat.
func (c ContainerNetworkInterfaceConfigurationPropertiesFormat) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "containerNetworkInterfaces", c.ContainerNetworkInterfaces)
	populate(objectMap, "ipConfigurations", c.IPConfigurations)
	populate(objectMap, "provisioningState", c.ProvisioningState)
	return json.Marshal(objectMap)
}

// MarshalJSON implements the json.Marshaller interface for type ContainerNetworkInterfacePropertiesFormat.
func (c ContainerNetworkInterfacePropertiesFormat) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "container", c.Container)
	populate(objectMap, "containerNetworkInterfaceConfiguration", c.ContainerNetworkInterfaceConfiguration)
	populate(objectMap, "ipConfigurations", c.IPConfigurations)
	populate(objectMap, "provisioningState", c.ProvisioningState)
	return json.Marshal(objectMap)
}

// MarshalJSON implements the json.Marshaller interface for type CustomDNSConfigPropertiesFormat.
func (c CustomDNSConfigPropertiesFormat) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "fqdn", c.Fqdn)
	populate(objectMap, "ipAddresses", c.IPAddresses)
	return json.Marshal(objectMap)
}

// MarshalJSON implements the json.Marshaller interface for type CustomIPPrefix.
func (c CustomIPPrefix) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "etag", c.Etag)
	populate(objectMap, "extendedLocation", c.ExtendedLocation)
	populate(objectMap, "id", c.ID)
	populate(objectMap, "location", c.Location)
	populate(objectMap, "name", c.Name)
	populate(objectMap, "properties", c.Properties)
	populate(objectMap, "tags", c.Tags)
	populate(objectMap, "type", c.Type)
	populate(objectMap, "zones", c.Zones)
	return json.Marshal(objectMap)
}

// MarshalJSON implements the json.Marshaller interface for type CustomIPPrefixPropertiesFormat.
func (c CustomIPPrefixPropertiesFormat) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "authorizationMessage", c.AuthorizationMessage)
	populate(objectMap, "childCustomIpPrefixes", c.ChildCustomIPPrefixes)
	populate(objectMap, "cidr", c.Cidr)
	populate(objectMap, "commissionedState", c.CommissionedState)
	populate(objectMap, "customIpPrefixParent", c.CustomIPPrefixParent)
	populate(objectMap, "failedReason", c.FailedReason)
	populate(objectMap, "provisioningState", c.ProvisioningState)
	populate(objectMap, "publicIpPrefixes", c.PublicIPPrefixes)
	populate(objectMap, "resourceGuid", c.ResourceGUID)
	populate(objectMap, "signedMessage", c.SignedMessage)
	return json.Marshal(objectMap)
}

// MarshalJSON implements the json.Marshaller interface for type DNSSettings.
func (d DNSSettings) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "enableProxy", d.EnableProxy)
	populate(objectMap, "requireProxyForNetworkRules", d.RequireProxyForNetworkRules)
	populate(objectMap, "servers", d.Servers)
	return json.Marshal(objectMap)
}

// MarshalJSON implements the json.Marshaller interface for type DdosCustomPolicy.
func (d DdosCustomPolicy) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "etag", d.Etag)
	populate(objectMap, "id", d.ID)
	populate(objectMap, "location", d.Location)
	populate(objectMap, "name", d.Name)
	populate(objectMap, "properties", d.Properties)
	populate(objectMap, "tags", d.Tags)
	populate(objectMap, "type", d.Type)
	return json.Marshal(objectMap)
}

// MarshalJSON implements the json.Marshaller interface for type DdosCustomPolicyPropertiesFormat.
func (d DdosCustomPolicyPropertiesFormat) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "protocolCustomSettings", d.ProtocolCustomSettings)
	populate(objectMap, "provisioningState", d.ProvisioningState)
	populate(objectMap, "publicIPAddresses", d.PublicIPAddresses)
	populate(objectMap, "resourceGuid", d.ResourceGUID)
	return json.Marshal(objectMap)
}

// MarshalJSON implements the json.Marshaller interface for type DdosProtectionPlan.
func (d DdosProtectionPlan) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "etag", d.Etag)
	populate(objectMap, "id", d.ID)
	populate(objectMap, "location", d.Location)
	populate(objectMap, "name", d.Name)
	populate(objectMap, "properties", d.Properties)
	populate(objectMap, "tags", d.Tags)
	populate(objectMap, "type", d.Type)
	return json.Marshal(objectMap)
}

// MarshalJSON implements the json.Marshaller interface for type DdosProtectionPlanPropertiesFormat.
func (d DdosProtectionPlanPropertiesFormat) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "provisioningState", d.ProvisioningState)
	populate(objectMap, "resourceGuid", d.ResourceGUID)
	populate(objectMap, "virtualNetworks", d.VirtualNetworks)
	return json.Marshal(objectMap)
}

// MarshalJSON implements the json.Marshaller interface for type DhcpOptions.
func (d DhcpOptions) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "dnsServers", d.DNSServers)
	return json.Marshal(objectMap)
}

// MarshalJSON implements the json.Marshaller interface for type DscpConfiguration.
func (d DscpConfiguration) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "etag", d.Etag)
	populate(objectMap, "id", d.ID)
	populate(objectMap, "location", d.Location)
	populate(objectMap, "name", d.Name)
	populate(objectMap, "properties", d.Properties)
	populate(objectMap, "tags", d.Tags)
	populate(objectMap, "type", d.Type)
	return json.Marshal(objectMap)
}

// MarshalJSON implements the json.Marshaller interface for type DscpConfigurationPropertiesFormat.
func (d DscpConfigurationPropertiesFormat) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "associatedNetworkInterfaces", d.AssociatedNetworkInterfaces)
	populate(objectMap, "destinationIpRanges", d.DestinationIPRanges)
	populate(objectMap, "destinationPortRanges", d.DestinationPortRanges)
	populate(objectMap, "markings", d.Markings)
	populate(objectMap, "protocol", d.Protocol)
	populate(objectMap, "provisioningState", d.ProvisioningState)
	populate(objectMap, "qosCollectionId", d.QosCollectionID)
	populate(objectMap, "qosDefinitionCollection", d.QosDefinitionCollection)
	populate(objectMap, "resourceGuid", d.ResourceGUID)
	populate(objectMap, "sourceIpRanges", d.SourceIPRanges)
	populate(objectMap, "sourcePortRanges", d.SourcePortRanges)
	return json.Marshal(objectMap)
}

// MarshalJSON implements the json.Marshaller interface for type ExclusionManagedRuleGroup.
func (e ExclusionManagedRuleGroup) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "ruleGroupName", e.RuleGroupName)
	populate(objectMap, "rules", e.Rules)
	return json.Marshal(objectMap)
}

// MarshalJSON implements the json.Marshaller interface for type ExclusionManagedRuleSet.
func (e ExclusionManagedRuleSet) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "ruleGroups", e.RuleGroups)
	populate(objectMap, "ruleSetType", e.RuleSetType)
	populate(objectMap, "ruleSetVersion", e.RuleSetVersion)
	return json.Marshal(objectMap)
}

// MarshalJSON implements the json.Marshaller interface for type ExpressRouteCircuit.
func (e ExpressRouteCircuit) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "etag", e.Etag)
	populate(objectMap, "id", e.ID)
	populate(objectMap, "location", e.Location)
	populate(objectMap, "name", e.Name)
	populate(objectMap, "properties", e.Properties)
	populate(objectMap, "sku", e.SKU)
	populate(objectMap, "tags", e.Tags)
	populate(objectMap, "type", e.Type)
	return json.Marshal(objectMap)
}

// MarshalJSON implements the json.Marshaller interface for type ExpressRouteCircuitPeeringConfig.
func (e ExpressRouteCircuitPeeringConfig) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "advertisedCommunities", e.AdvertisedCommunities)
	populate(objectMap, "advertisedPublicPrefixes", e.AdvertisedPublicPrefixes)
	populate(objectMap, "advertisedPublicPrefixesState", e.AdvertisedPublicPrefixesState)
	populate(objectMap, "customerASN", e.CustomerASN)
	populate(objectMap, "legacyMode", e.LegacyMode)
	populate(objectMap, "routingRegistryName", e.RoutingRegistryName)
	return json.Marshal(objectMap)
}

// MarshalJSON implements the json.Marshaller interface for type ExpressRouteCircuitPeeringPropertiesFormat.
func (e ExpressRouteCircuitPeeringPropertiesFormat) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "azureASN", e.AzureASN)
	populate(objectMap, "connections", e.Connections)
	populate(objectMap, "expressRouteConnection", e.ExpressRouteConnection)
	populate(objectMap, "gatewayManagerEtag", e.GatewayManagerEtag)
	populate(objectMap, "ipv6PeeringConfig", e.IPv6PeeringConfig)
	populate(objectMap, "lastModifiedBy", e.LastModifiedBy)
	populate(objectMap, "microsoftPeeringConfig", e.MicrosoftPeeringConfig)
	populate(objectMap, "peerASN", e.PeerASN)
	populate(objectMap, "peeredConnections", e.PeeredConnections)
	populate(objectMap, "peeringType", e.PeeringType)
	populate(objectMap, "primaryAzurePort", e.PrimaryAzurePort)
	populate(objectMap, "primaryPeerAddressPrefix", e.PrimaryPeerAddressPrefix)
	populate(objectMap, "provisioningState", e.ProvisioningState)
	populate(objectMap, "routeFilter", e.RouteFilter)
	populate(objectMap, "secondaryAzurePort", e.SecondaryAzurePort)
	populate(objectMap, "secondaryPeerAddressPrefix", e.SecondaryPeerAddressPrefix)
	populate(objectMap, "sharedKey", e.SharedKey)
	populate(objectMap, "state", e.State)
	populate(objectMap, "stats", e.Stats)
	populate(objectMap, "vlanId", e.VlanID)
	return json.Marshal(objectMap)
}

// MarshalJSON implements the json.Marshaller interface for type ExpressRouteCircuitPropertiesFormat.
func (e ExpressRouteCircuitPropertiesFormat) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "allowClassicOperations", e.AllowClassicOperations)
	populate(objectMap, "authorizationKey", e.AuthorizationKey)
	populate(objectMap, "authorizations", e.Authorizations)
	populate(objectMap, "bandwidthInGbps", e.BandwidthInGbps)
	populate(objectMap, "circuitProvisioningState", e.CircuitProvisioningState)
	populate(objectMap, "expressRoutePort", e.ExpressRoutePort)
	populate(objectMap, "gatewayManagerEtag", e.GatewayManagerEtag)
	populate(objectMap, "globalReachEnabled", e.GlobalReachEnabled)
	populate(objectMap, "peerings", e.Peerings)
	populate(objectMap, "provisioningState", e.ProvisioningState)
	populate(objectMap, "serviceKey", e.ServiceKey)
	populate(objectMap, "serviceProviderNotes", e.ServiceProviderNotes)
	populate(objectMap, "serviceProviderProperties", e.ServiceProviderProperties)
	populate(objectMap, "serviceProviderProvisioningState", e.ServiceProviderProvisioningState)
	populate(objectMap, "stag", e.Stag)
	return json.Marshal(objectMap)
}

// MarshalJSON implements the json.Marshaller interface for type ExpressRouteCrossConnection.
func (e ExpressRouteCrossConnection) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "etag", e.Etag)
	populate(objectMap, "id", e.ID)
	populate(objectMap, "location", e.Location)
	populate(objectMap, "name", e.Name)
	populate(objectMap, "properties", e.Properties)
	populate(objectMap, "tags", e.Tags)
	populate(objectMap, "type", e.Type)
	return json.Marshal(objectMap)
}

// MarshalJSON implements the json.Marshaller interface for type ExpressRouteCrossConnectionProperties.
func (e ExpressRouteCrossConnectionProperties) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "bandwidthInMbps", e.BandwidthInMbps)
	populate(objectMap, "expressRouteCircuit", e.ExpressRouteCircuit)
	populate(objectMap, "peeringLocation", e.PeeringLocation)
	populate(objectMap, "peerings", e.Peerings)
	populate(objectMap, "primaryAzurePort", e.PrimaryAzurePort)
	populate(objectMap, "provisioningState", e.ProvisioningState)
	populate(objectMap, "sTag", e.STag)
	populate(objectMap, "secondaryAzurePort", e.SecondaryAzurePort)
	populate(objectMap, "serviceProviderNotes", e.ServiceProviderNotes)
	populate(objectMap, "serviceProviderProvisioningState", e.ServiceProviderProvisioningState)
	return json.Marshal(objectMap)
}

// MarshalJSON implements the json.Marshaller interface for type ExpressRouteGateway.
func (e ExpressRouteGateway) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "etag", e.Etag)
	populate(objectMap, "id", e.ID)
	populate(objectMap, "location", e.Location)
	populate(objectMap, "name", e.Name)
	populate(objectMap, "properties", e.Properties)
	populate(objectMap, "tags", e.Tags)
	populate(objectMap, "type", e.Type)
	return json.Marshal(objectMap)
}

// MarshalJSON implements the json.Marshaller interface for type ExpressRouteGatewayProperties.
func (e ExpressRouteGatewayProperties) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "autoScaleConfiguration", e.AutoScaleConfiguration)
	populate(objectMap, "expressRouteConnections", e.ExpressRouteConnections)
	populate(objectMap, "provisioningState", e.ProvisioningState)
	populate(objectMap, "virtualHub", e.VirtualHub)
	return json.Marshal(objectMap)
}

// MarshalJSON implements the json.Marshaller interface for type ExpressRoutePort.
func (e ExpressRoutePort) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "etag", e.Etag)
	populate(objectMap, "id", e.ID)
	populate(objectMap, "identity", e.Identity)
	populate(objectMap, "location", e.Location)
	populate(objectMap, "name", e.Name)
	populate(objectMap, "properties", e.Properties)
	populate(objectMap, "tags", e.Tags)
	populate(objectMap, "type", e.Type)
	return json.Marshal(objectMap)
}

// MarshalJSON implements the json.Marshaller interface for type ExpressRoutePortPropertiesFormat.
func (e ExpressRoutePortPropertiesFormat) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "allocationDate", e.AllocationDate)
	populate(objectMap, "bandwidthInGbps", e.BandwidthInGbps)
	populate(objectMap, "circuits", e.Circuits)
	populate(objectMap, "encapsulation", e.Encapsulation)
	populate(objectMap, "etherType", e.EtherType)
	populate(objectMap, "links", e.Links)
	populate(objectMap, "mtu", e.Mtu)
	populate(objectMap, "peeringLocation", e.PeeringLocation)
	populate(objectMap, "provisionedBandwidthInGbps", e.ProvisionedBandwidthInGbps)
	populate(objectMap, "provisioningState", e.ProvisioningState)
	populate(objectMap, "resourceGuid", e.ResourceGUID)
	return json.Marshal(objectMap)
}

// MarshalJSON implements the json.Marshaller interface for type ExpressRoutePortsLocation.
func (e ExpressRoutePortsLocation) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "id", e.ID)
	populate(objectMap, "location", e.Location)
	populate(objectMap, "name", e.Name)
	populate(objectMap, "properties", e.Properties)
	populate(objectMap, "tags", e.Tags)
	populate(objectMap, "type", e.Type)
	return json.Marshal(objectMap)
}

// MarshalJSON implements the json.Marshaller interface for type ExpressRoutePortsLocationPropertiesFormat.
func (e ExpressRoutePortsLocationPropertiesFormat) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "address", e.Address)
	populate(objectMap, "availableBandwidths", e.AvailableBandwidths)
	populate(objectMap, "contact", e.Contact)
	populate(objectMap, "provisioningState", e.ProvisioningState)
	return json.Marshal(objectMap)
}

// MarshalJSON implements the json.Marshaller interface for type ExpressRouteServiceProvider.
func (e ExpressRouteServiceProvider) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "id", e.ID)
	populate(objectMap, "location", e.Location)
	populate(objectMap, "name", e.Name)
	populate(objectMap, "properties", e.Properties)
	populate(objectMap, "tags", e.Tags)
	populate(objectMap, "type", e.Type)
	return json.Marshal(objectMap)
}

// MarshalJSON implements the json.Marshaller interface for type ExpressRouteServiceProviderPropertiesFormat.
func (e ExpressRouteServiceProviderPropertiesFormat) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "bandwidthsOffered", e.BandwidthsOffered)
	populate(objectMap, "peeringLocations", e.PeeringLocations)
	populate(objectMap, "provisioningState", e.ProvisioningState)
	return json.Marshal(objectMap)
}

// MarshalJSON implements the json.Marshaller interface for type FilterItems.
func (f FilterItems) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "field", f.Field)
	populate(objectMap, "values", f.Values)
	return json.Marshal(objectMap)
}

// MarshalJSON implements the json.Marshaller interface for type FirewallPolicy.
func (f FirewallPolicy) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "etag", f.Etag)
	populate(objectMap, "id", f.ID)
	populate(objectMap, "identity", f.Identity)
	populate(objectMap, "location", f.Location)
	populate(objectMap, "name", f.Name)
	populate(objectMap, "properties", f.Properties)
	populate(objectMap, "tags", f.Tags)
	populate(objectMap, "type", f.Type)
	return json.Marshal(objectMap)
}

// MarshalJSON implements the json.Marshaller interface for type FirewallPolicyFilterRuleCollection.
func (f FirewallPolicyFilterRuleCollection) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "action", f.Action)
	populate(objectMap, "name", f.Name)
	populate(objectMap, "priority", f.Priority)
	objectMap["ruleCollectionType"] = FirewallPolicyRuleCollectionTypeFirewallPolicyFilterRuleCollection
	populate(objectMap, "rules", f.Rules)
	return json.Marshal(objectMap)
}

// UnmarshalJSON implements the json.Unmarshaller interface for type FirewallPolicyFilterRuleCollection.
func (f *FirewallPolicyFilterRuleCollection) UnmarshalJSON(data []byte) error {
	var rawMsg map[string]json.RawMessage
	if err := json.Unmarshal(data, &rawMsg); err != nil {
		return fmt.Errorf("unmarshalling type %T: %v", f, err)
	}
	for key, val := range rawMsg {
		var err error
		switch key {
		case "action":
			err = unpopulate(val, "Action", &f.Action)
			delete(rawMsg, key)
		case "name":
			err = unpopulate(val, "Name", &f.Name)
			delete(rawMsg, key)
		case "priority":
			err = unpopulate(val, "Priority", &f.Priority)
			delete(rawMsg, key)
		case "ruleCollectionType":
			err = unpopulate(val, "RuleCollectionType", &f.RuleCollectionType)
			delete(rawMsg, key)
		case "rules":
			f.Rules, err = unmarshalFirewallPolicyRuleClassificationArray(val)
			delete(rawMsg, key)
		}
		if err != nil {
			return fmt.Errorf("unmarshalling type %T: %v", f, err)
		}
	}
	return nil
}

// MarshalJSON implements the json.Marshaller interface for type FirewallPolicyIntrusionDetectionBypassTrafficSpecifications.
func (f FirewallPolicyIntrusionDetectionBypassTrafficSpecifications) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "description", f.Description)
	populate(objectMap, "destinationAddresses", f.DestinationAddresses)
	populate(objectMap, "destinationIpGroups", f.DestinationIPGroups)
	populate(objectMap, "destinationPorts", f.DestinationPorts)
	populate(objectMap, "name", f.Name)
	populate(objectMap, "protocol", f.Protocol)
	populate(objectMap, "sourceAddresses", f.SourceAddresses)
	populate(objectMap, "sourceIpGroups", f.SourceIPGroups)
	return json.Marshal(objectMap)
}

// MarshalJSON implements the json.Marshaller interface for type FirewallPolicyIntrusionDetectionConfiguration.
func (f FirewallPolicyIntrusionDetectionConfiguration) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "bypassTrafficSettings", f.BypassTrafficSettings)
	populate(objectMap, "privateRanges", f.PrivateRanges)
	populate(objectMap, "signatureOverrides", f.SignatureOverrides)
	return json.Marshal(objectMap)
}

// MarshalJSON implements the json.Marshaller interface for type FirewallPolicyLogAnalyticsResources.
func (f FirewallPolicyLogAnalyticsResources) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "defaultWorkspaceId", f.DefaultWorkspaceID)
	populate(objectMap, "workspaces", f.Workspaces)
	return json.Marshal(objectMap)
}

// MarshalJSON implements the json.Marshaller interface for type FirewallPolicyNatRuleCollection.
func (f FirewallPolicyNatRuleCollection) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "action", f.Action)
	populate(objectMap, "name", f.Name)
	populate(objectMap, "priority", f.Priority)
	objectMap["ruleCollectionType"] = FirewallPolicyRuleCollectionTypeFirewallPolicyNatRuleCollection
	populate(objectMap, "rules", f.Rules)
	return json.Marshal(objectMap)
}

// UnmarshalJSON implements the json.Unmarshaller interface for type FirewallPolicyNatRuleCollection.
func (f *FirewallPolicyNatRuleCollection) UnmarshalJSON(data []byte) error {
	var rawMsg map[string]json.RawMessage
	if err := json.Unmarshal(data, &rawMsg); err != nil {
		return fmt.Errorf("unmarshalling type %T: %v", f, err)
	}
	for key, val := range rawMsg {
		var err error
		switch key {
		case "action":
			err = unpopulate(val, "Action", &f.Action)
			delete(rawMsg, key)
		case "name":
			err = unpopulate(val, "Name", &f.Name)
			delete(rawMsg, key)
		case "priority":
			err = unpopulate(val, "Priority", &f.Priority)
			delete(rawMsg, key)
		case "ruleCollectionType":
			err = unpopulate(val, "RuleCollectionType", &f.RuleCollectionType)
			delete(rawMsg, key)
		case "rules":
			f.Rules, err = unmarshalFirewallPolicyRuleClassificationArray(val)
			delete(rawMsg, key)
		}
		if err != nil {
			return fmt.Errorf("unmarshalling type %T: %v", f, err)
		}
	}
	return nil
}

// MarshalJSON implements the json.Marshaller interface for type FirewallPolicyPropertiesFormat.
func (f FirewallPolicyPropertiesFormat) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "basePolicy", f.BasePolicy)
	populate(objectMap, "childPolicies", f.ChildPolicies)
	populate(objectMap, "dnsSettings", f.DNSSettings)
	populate(objectMap, "explicitProxySettings", f.ExplicitProxySettings)
	populate(objectMap, "firewalls", f.Firewalls)
	populate(objectMap, "insights", f.Insights)
	populate(objectMap, "intrusionDetection", f.IntrusionDetection)
	populate(objectMap, "provisioningState", f.ProvisioningState)
	populate(objectMap, "ruleCollectionGroups", f.RuleCollectionGroups)
	populate(objectMap, "sku", f.SKU)
	populate(objectMap, "sql", f.SQL)
	populate(objectMap, "snat", f.Snat)
	populate(objectMap, "threatIntelMode", f.ThreatIntelMode)
	populate(objectMap, "threatIntelWhitelist", f.ThreatIntelWhitelist)
	populate(objectMap, "transportSecurity", f.TransportSecurity)
	return json.Marshal(objectMap)
}

// MarshalJSON implements the json.Marshaller interface for type FirewallPolicyRuleCollectionGroupProperties.
func (f FirewallPolicyRuleCollectionGroupProperties) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "priority", f.Priority)
	populate(objectMap, "provisioningState", f.ProvisioningState)
	populate(objectMap, "ruleCollections", f.RuleCollections)
	return json.Marshal(objectMap)
}

// UnmarshalJSON implements the json.Unmarshaller interface for type FirewallPolicyRuleCollectionGroupProperties.
func (f *FirewallPolicyRuleCollectionGroupProperties) UnmarshalJSON(data []byte) error {
	var rawMsg map[string]json.RawMessage
	if err := json.Unmarshal(data, &rawMsg); err != nil {
		return fmt.Errorf("unmarshalling type %T: %v", f, err)
	}
	for key, val := range rawMsg {
		var err error
		switch key {
		case "priority":
			err = unpopulate(val, "Priority", &f.Priority)
			delete(rawMsg, key)
		case "provisioningState":
			err = unpopulate(val, "ProvisioningState", &f.ProvisioningState)
			delete(rawMsg, key)
		case "ruleCollections":
			f.RuleCollections, err = unmarshalFirewallPolicyRuleCollectionClassificationArray(val)
			delete(rawMsg, key)
		}
		if err != nil {
			return fmt.Errorf("unmarshalling type %T: %v", f, err)
		}
	}
	return nil
}

// MarshalJSON implements the json.Marshaller interface for type FirewallPolicySNAT.
func (f FirewallPolicySNAT) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "privateRanges", f.PrivateRanges)
	return json.Marshal(objectMap)
}

// MarshalJSON implements the json.Marshaller interface for type FirewallPolicyThreatIntelWhitelist.
func (f FirewallPolicyThreatIntelWhitelist) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "fqdns", f.Fqdns)
	populate(objectMap, "ipAddresses", f.IPAddresses)
	return json.Marshal(objectMap)
}

// MarshalJSON implements the json.Marshaller interface for type FlowLog.
func (f FlowLog) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "etag", f.Etag)
	populate(objectMap, "id", f.ID)
	populate(objectMap, "location", f.Location)
	populate(objectMap, "name", f.Name)
	populate(objectMap, "properties", f.Properties)
	populate(objectMap, "tags", f.Tags)
	populate(objectMap, "type", f.Type)
	return json.Marshal(objectMap)
}

// MarshalJSON implements the json.Marshaller interface for type FrontendIPConfiguration.
func (f FrontendIPConfiguration) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "etag", f.Etag)
	populate(objectMap, "id", f.ID)
	populate(objectMap, "name", f.Name)
	populate(objectMap, "properties", f.Properties)
	populate(objectMap, "type", f.Type)
	populate(objectMap, "zones", f.Zones)
	return json.Marshal(objectMap)
}

// MarshalJSON implements the json.Marshaller interface for type FrontendIPConfigurationPropertiesFormat.
func (f FrontendIPConfigurationPropertiesFormat) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "gatewayLoadBalancer", f.GatewayLoadBalancer)
	populate(objectMap, "inboundNatPools", f.InboundNatPools)
	populate(objectMap, "inboundNatRules", f.InboundNatRules)
	populate(objectMap, "loadBalancingRules", f.LoadBalancingRules)
	populate(objectMap, "outboundRules", f.OutboundRules)
	populate(objectMap, "privateIPAddress", f.PrivateIPAddress)
	populate(objectMap, "privateIPAddressVersion", f.PrivateIPAddressVersion)
	populate(objectMap, "privateIPAllocationMethod", f.PrivateIPAllocationMethod)
	populate(objectMap, "provisioningState", f.ProvisioningState)
	populate(objectMap, "publicIPAddress", f.PublicIPAddress)
	populate(objectMap, "publicIPPrefix", f.PublicIPPrefix)
	populate(objectMap, "subnet", f.Subnet)
	return json.Marshal(objectMap)
}

// MarshalJSON implements the json.Marshaller interface for type GetVPNSitesConfigurationRequest.
func (g GetVPNSitesConfigurationRequest) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "outputBlobSasUrl", g.OutputBlobSasURL)
	populate(objectMap, "vpnSites", g.VPNSites)
	return json.Marshal(objectMap)
}

// MarshalJSON implements the json.Marshaller interface for type HTTPConfiguration.
func (h HTTPConfiguration) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "headers", h.Headers)
	populate(objectMap, "method", h.Method)
	populate(objectMap, "validStatusCodes", h.ValidStatusCodes)
	return json.Marshal(objectMap)
}

// MarshalJSON implements the json.Marshaller interface for type HubPublicIPAddresses.
func (h HubPublicIPAddresses) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "addresses", h.Addresses)
	populate(objectMap, "count", h.Count)
	return json.Marshal(objectMap)
}

// MarshalJSON implements the json.Marshaller interface for type HubRoute.
func (h HubRoute) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "destinationType", h.DestinationType)
	populate(objectMap, "destinations", h.Destinations)
	populate(objectMap, "name", h.Name)
	populate(objectMap, "nextHop", h.NextHop)
	populate(objectMap, "nextHopType", h.NextHopType)
	return json.Marshal(objectMap)
}

// MarshalJSON implements the json.Marshaller interface for type HubRouteTableProperties.
func (h HubRouteTableProperties) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "associatedConnections", h.AssociatedConnections)
	populate(objectMap, "labels", h.Labels)
	populate(objectMap, "propagatingConnections", h.PropagatingConnections)
	populate(objectMap, "provisioningState", h.ProvisioningState)
	populate(objectMap, "routes", h.Routes)
	return json.Marshal(objectMap)
}

// MarshalJSON implements the json.Marshaller interface for type IDPSQueryObject.
func (i IDPSQueryObject) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "filters", i.Filters)
	populate(objectMap, "orderBy", i.OrderBy)
	populate(objectMap, "resultsPerPage", i.ResultsPerPage)
	populate(objectMap, "search", i.Search)
	populate(objectMap, "skip", i.Skip)
	return json.Marshal(objectMap)
}

// MarshalJSON implements the json.Marshaller interface for type IPAllocation.
func (i IPAllocation) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "etag", i.Etag)
	populate(objectMap, "id", i.ID)
	populate(objectMap, "location", i.Location)
	populate(objectMap, "name", i.Name)
	populate(objectMap, "properties", i.Properties)
	populate(objectMap, "tags", i.Tags)
	populate(objectMap, "type", i.Type)
	return json.Marshal(objectMap)
}

// MarshalJSON implements the json.Marshaller interface for type IPAllocationPropertiesFormat.
func (i IPAllocationPropertiesFormat) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "allocationTags", i.AllocationTags)
	populate(objectMap, "ipamAllocationId", i.IpamAllocationID)
	populate(objectMap, "prefix", i.Prefix)
	populate(objectMap, "prefixLength", i.PrefixLength)
	populate(objectMap, "prefixType", i.PrefixType)
	populate(objectMap, "subnet", i.Subnet)
	populate(objectMap, "type", i.Type)
	populate(objectMap, "virtualNetwork", i.VirtualNetwork)
	return json.Marshal(objectMap)
}

// MarshalJSON implements the json.Marshaller interface for type IPConfigurationBgpPeeringAddress.
func (i IPConfigurationBgpPeeringAddress) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "customBgpIpAddresses", i.CustomBgpIPAddresses)
	populate(objectMap, "defaultBgpIpAddresses", i.DefaultBgpIPAddresses)
	populate(objectMap, "ipconfigurationId", i.IPConfigurationID)
	populate(objectMap, "tunnelIpAddresses", i.TunnelIPAddresses)
	return json.Marshal(objectMap)
}

// MarshalJSON implements the json.Marshaller interface for type IPGroup.
func (i IPGroup) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "etag", i.Etag)
	populate(objectMap, "id", i.ID)
	populate(objectMap, "location", i.Location)
	populate(objectMap, "name", i.Name)
	populate(objectMap, "properties", i.Properties)
	populate(objectMap, "tags", i.Tags)
	populate(objectMap, "type", i.Type)
	return json.Marshal(objectMap)
}

// MarshalJSON implements the json.Marshaller interface for type IPGroupPropertiesFormat.
func (i IPGroupPropertiesFormat) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "firewallPolicies", i.FirewallPolicies)
	populate(objectMap, "firewalls", i.Firewalls)
	populate(objectMap, "ipAddresses", i.IPAddresses)
	populate(objectMap, "provisioningState", i.ProvisioningState)
	return json.Marshal(objectMap)
}

// MarshalJSON implements the json.Marshaller interface for type InboundSecurityRuleProperties.
func (i InboundSecurityRuleProperties) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "provisioningState", i.ProvisioningState)
	populate(objectMap, "rules", i.Rules)
	return json.Marshal(objectMap)
}

// MarshalJSON implements the json.Marshaller interface for type IntentPolicy.
func (i IntentPolicy) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "etag", i.Etag)
	populate(objectMap, "id", i.ID)
	populate(objectMap, "location", i.Location)
	populate(objectMap, "name", i.Name)
	populate(objectMap, "tags", i.Tags)
	populate(objectMap, "type", i.Type)
	return json.Marshal(objectMap)
}

// MarshalJSON implements the json.Marshaller interface for type Interface.
func (i Interface) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "etag", i.Etag)
	populate(objectMap, "extendedLocation", i.ExtendedLocation)
	populate(objectMap, "id", i.ID)
	populate(objectMap, "location", i.Location)
	populate(objectMap, "name", i.Name)
	populate(objectMap, "properties", i.Properties)
	populate(objectMap, "tags", i.Tags)
	populate(objectMap, "type", i.Type)
	return json.Marshal(objectMap)
}

// MarshalJSON implements the json.Marshaller interface for type InterfaceDNSSettings.
func (i InterfaceDNSSettings) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "appliedDnsServers", i.AppliedDNSServers)
	populate(objectMap, "dnsServers", i.DNSServers)
	populate(objectMap, "internalDnsNameLabel", i.InternalDNSNameLabel)
	populate(objectMap, "internalDomainNameSuffix", i.InternalDomainNameSuffix)
	populate(objectMap, "internalFqdn", i.InternalFqdn)
	return json.Marshal(objectMap)
}

// MarshalJSON implements the json.Marshaller interface for type InterfaceIPConfigurationPrivateLinkConnectionProperties.
func (i InterfaceIPConfigurationPrivateLinkConnectionProperties) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "fqdns", i.Fqdns)
	populate(objectMap, "groupId", i.GroupID)
	populate(objectMap, "requiredMemberName", i.RequiredMemberName)
	return json.Marshal(objectMap)
}

// MarshalJSON implements the json.Marshaller interface for type InterfaceIPConfigurationPropertiesFormat.
func (i InterfaceIPConfigurationPropertiesFormat) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "applicationGatewayBackendAddressPools", i.ApplicationGatewayBackendAddressPools)
	populate(objectMap, "applicationSecurityGroups", i.ApplicationSecurityGroups)
	populate(objectMap, "gatewayLoadBalancer", i.GatewayLoadBalancer)
	populate(objectMap, "loadBalancerBackendAddressPools", i.LoadBalancerBackendAddressPools)
	populate(objectMap, "loadBalancerInboundNatRules", i.LoadBalancerInboundNatRules)
	populate(objectMap, "primary", i.Primary)
	populate(objectMap, "privateIPAddress", i.PrivateIPAddress)
	populate(objectMap, "privateIPAddressVersion", i.PrivateIPAddressVersion)
	populate(objectMap, "privateIPAllocationMethod", i.PrivateIPAllocationMethod)
	populate(objectMap, "privateLinkConnectionProperties", i.PrivateLinkConnectionProperties)
	populate(objectMap, "provisioningState", i.ProvisioningState)
	populate(objectMap, "publicIPAddress", i.PublicIPAddress)
	populate(objectMap, "subnet", i.Subnet)
	populate(objectMap, "virtualNetworkTaps", i.VirtualNetworkTaps)
	return json.Marshal(objectMap)
}

// MarshalJSON implements the json.Marshaller interface for type InterfacePropertiesFormat.
func (i InterfacePropertiesFormat) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "auxiliaryMode", i.AuxiliaryMode)
	populate(objectMap, "dnsSettings", i.DNSSettings)
	populate(objectMap, "dscpConfiguration", i.DscpConfiguration)
	populate(objectMap, "enableAcceleratedNetworking", i.EnableAcceleratedNetworking)
	populate(objectMap, "enableIPForwarding", i.EnableIPForwarding)
	populate(objectMap, "hostedWorkloads", i.HostedWorkloads)
	populate(objectMap, "ipConfigurations", i.IPConfigurations)
	populate(objectMap, "macAddress", i.MacAddress)
	populate(objectMap, "migrationPhase", i.MigrationPhase)
	populate(objectMap, "networkSecurityGroup", i.NetworkSecurityGroup)
	populate(objectMap, "nicType", i.NicType)
	populate(objectMap, "primary", i.Primary)
	populate(objectMap, "privateEndpoint", i.PrivateEndpoint)
	populate(objectMap, "privateLinkService", i.PrivateLinkService)
	populate(objectMap, "provisioningState", i.ProvisioningState)
	populate(objectMap, "resourceGuid", i.ResourceGUID)
	populate(objectMap, "tapConfigurations", i.TapConfigurations)
	populate(objectMap, "virtualMachine", i.VirtualMachine)
	populate(objectMap, "vnetEncryptionSupported", i.VnetEncryptionSupported)
	populate(objectMap, "workloadType", i.WorkloadType)
	return json.Marshal(objectMap)
}

// MarshalJSON implements the json.Marshaller interface for type LoadBalancer.
func (l LoadBalancer) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "etag", l.Etag)
	populate(objectMap, "extendedLocation", l.ExtendedLocation)
	populate(objectMap, "id", l.ID)
	populate(objectMap, "location", l.Location)
	populate(objectMap, "name", l.Name)
	populate(objectMap, "properties", l.Properties)
	populate(objectMap, "sku", l.SKU)
	populate(objectMap, "tags", l.Tags)
	populate(objectMap, "type", l.Type)
	return json.Marshal(objectMap)
}

// MarshalJSON implements the json.Marshaller interface for type LoadBalancerBackendAddressPropertiesFormat.
func (l LoadBalancerBackendAddressPropertiesFormat) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "adminState", l.AdminState)
	populate(objectMap, "ipAddress", l.IPAddress)
	populate(objectMap, "inboundNatRulesPortMapping", l.InboundNatRulesPortMapping)
	populate(objectMap, "loadBalancerFrontendIPConfiguration", l.LoadBalancerFrontendIPConfiguration)
	populate(objectMap, "networkInterfaceIPConfiguration", l.NetworkInterfaceIPConfiguration)
	populate(objectMap, "subnet", l.Subnet)
	populate(objectMap, "virtualNetwork", l.VirtualNetwork)
	return json.Marshal(objectMap)
}

// MarshalJSON implements the json.Marshaller interface for type LoadBalancerPropertiesFormat.
func (l LoadBalancerPropertiesFormat) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "backendAddressPools", l.BackendAddressPools)
	populate(objectMap, "frontendIPConfigurations", l.FrontendIPConfigurations)
	populate(objectMap, "inboundNatPools", l.InboundNatPools)
	populate(objectMap, "inboundNatRules", l.InboundNatRules)
	populate(objectMap, "loadBalancingRules", l.LoadBalancingRules)
	populate(objectMap, "outboundRules", l.OutboundRules)
	populate(objectMap, "probes", l.Probes)
	populate(objectMap, "provisioningState", l.ProvisioningState)
	populate(objectMap, "resourceGuid", l.ResourceGUID)
	return json.Marshal(objectMap)
}

// MarshalJSON implements the json.Marshaller interface for type LoadBalancerVipSwapRequest.
func (l LoadBalancerVipSwapRequest) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "frontendIPConfigurations", l.FrontendIPConfigurations)
	return json.Marshal(objectMap)
}

// MarshalJSON implements the json.Marshaller interface for type LoadBalancingRulePropertiesFormat.
func (l LoadBalancingRulePropertiesFormat) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "backendAddressPool", l.BackendAddressPool)
	populate(objectMap, "backendAddressPools", l.BackendAddressPools)
	populate(objectMap, "backendPort", l.BackendPort)
	populate(objectMap, "disableOutboundSnat", l.DisableOutboundSnat)
	populate(objectMap, "enableFloatingIP", l.EnableFloatingIP)
	populate(objectMap, "enableTcpReset", l.EnableTCPReset)
	populate(objectMap, "frontendIPConfiguration", l.FrontendIPConfiguration)
	populate(objectMap, "frontendPort", l.FrontendPort)
	populate(objectMap, "idleTimeoutInMinutes", l.IdleTimeoutInMinutes)
	populate(objectMap, "loadDistribution", l.LoadDistribution)
	populate(objectMap, "probe", l.Probe)
	populate(objectMap, "protocol", l.Protocol)
	populate(objectMap, "provisioningState", l.ProvisioningState)
	return json.Marshal(objectMap)
}

// MarshalJSON implements the json.Marshaller interface for type LocalNetworkGateway.
func (l LocalNetworkGateway) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "etag", l.Etag)
	populate(objectMap, "id", l.ID)
	populate(objectMap, "location", l.Location)
	populate(objectMap, "name", l.Name)
	populate(objectMap, "properties", l.Properties)
	populate(objectMap, "tags", l.Tags)
	populate(objectMap, "type", l.Type)
	return json.Marshal(objectMap)
}

// MarshalJSON implements the json.Marshaller interface for type ManagedRuleGroupOverride.
func (m ManagedRuleGroupOverride) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "ruleGroupName", m.RuleGroupName)
	populate(objectMap, "rules", m.Rules)
	return json.Marshal(objectMap)
}

// MarshalJSON implements the json.Marshaller interface for type ManagedRuleSet.
func (m ManagedRuleSet) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "ruleGroupOverrides", m.RuleGroupOverrides)
	populate(objectMap, "ruleSetType", m.RuleSetType)
	populate(objectMap, "ruleSetVersion", m.RuleSetVersion)
	return json.Marshal(objectMap)
}

// MarshalJSON implements the json.Marshaller interface for type ManagedRulesDefinition.
func (m ManagedRulesDefinition) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "exclusions", m.Exclusions)
	populate(objectMap, "managedRuleSets", m.ManagedRuleSets)
	return json.Marshal(objectMap)
}

// MarshalJSON implements the json.Marshaller interface for type ManagedServiceIdentity.
func (m ManagedServiceIdentity) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "principalId", m.PrincipalID)
	populate(objectMap, "tenantId", m.TenantID)
	populate(objectMap, "type", m.Type)
	populate(objectMap, "userAssignedIdentities", m.UserAssignedIdentities)
	return json.Marshal(objectMap)
}

// MarshalJSON implements the json.Marshaller interface for type MatchCondition.
func (m MatchCondition) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "matchValues", m.MatchValues)
	populate(objectMap, "matchVariables", m.MatchVariables)
	populate(objectMap, "negationConditon", m.NegationConditon)
	populate(objectMap, "operator", m.Operator)
	populate(objectMap, "transforms", m.Transforms)
	return json.Marshal(objectMap)
}

// MarshalJSON implements the json.Marshaller interface for type NatGateway.
func (n NatGateway) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "etag", n.Etag)
	populate(objectMap, "id", n.ID)
	populate(objectMap, "location", n.Location)
	populate(objectMap, "name", n.Name)
	populate(objectMap, "properties", n.Properties)
	populate(objectMap, "sku", n.SKU)
	populate(objectMap, "tags", n.Tags)
	populate(objectMap, "type", n.Type)
	populate(objectMap, "zones", n.Zones)
	return json.Marshal(objectMap)
}

// MarshalJSON implements the json.Marshaller interface for type NatGatewayPropertiesFormat.
func (n NatGatewayPropertiesFormat) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "idleTimeoutInMinutes", n.IdleTimeoutInMinutes)
	populate(objectMap, "provisioningState", n.ProvisioningState)
	populate(objectMap, "publicIpAddresses", n.PublicIPAddresses)
	populate(objectMap, "publicIpPrefixes", n.PublicIPPrefixes)
	populate(objectMap, "resourceGuid", n.ResourceGUID)
	populate(objectMap, "subnets", n.Subnets)
	return json.Marshal(objectMap)
}

// MarshalJSON implements the json.Marshaller interface for type NatRule.
func (n NatRule) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "description", n.Description)
	populate(objectMap, "destinationAddresses", n.DestinationAddresses)
	populate(objectMap, "destinationPorts", n.DestinationPorts)
	populate(objectMap, "ipProtocols", n.IPProtocols)
	populate(objectMap, "name", n.Name)
	objectMap["ruleType"] = FirewallPolicyRuleTypeNatRule
	populate(objectMap, "sourceAddresses", n.SourceAddresses)
	populate(objectMap, "sourceIpGroups", n.SourceIPGroups)
	populate(objectMap, "translatedAddress", n.TranslatedAddress)
	populate(objectMap, "translatedFqdn", n.TranslatedFqdn)
	populate(objectMap, "translatedPort", n.TranslatedPort)
	return json.Marshal(objectMap)
}

// UnmarshalJSON implements the json.Unmarshaller interface for type NatRule.
func (n *NatRule) UnmarshalJSON(data []byte) error {
	var rawMsg map[string]json.RawMessage
	if err := json.Unmarshal(data, &rawMsg); err != nil {
		return fmt.Errorf("unmarshalling type %T: %v", n, err)
	}
	for key, val := range rawMsg {
		var err error
		switch key {
		case "description":
			err = unpopulate(val, "Description", &n.Description)
			delete(rawMsg, key)
		case "destinationAddresses":
			err = unpopulate(val, "DestinationAddresses", &n.DestinationAddresses)
			delete(rawMsg, key)
		case "destinationPorts":
			err = unpopulate(val, "DestinationPorts", &n.DestinationPorts)
			delete(rawMsg, key)
		case "ipProtocols":
			err = unpopulate(val, "IPProtocols", &n.IPProtocols)
			delete(rawMsg, key)
		case "name":
			err = unpopulate(val, "Name", &n.Name)
			delete(rawMsg, key)
		case "ruleType":
			err = unpopulate(val, "RuleType", &n.RuleType)
			delete(rawMsg, key)
		case "sourceAddresses":
			err = unpopulate(val, "SourceAddresses", &n.SourceAddresses)
			delete(rawMsg, key)
		case "sourceIpGroups":
			err = unpopulate(val, "SourceIPGroups", &n.SourceIPGroups)
			delete(rawMsg, key)
		case "translatedAddress":
			err = unpopulate(val, "TranslatedAddress", &n.TranslatedAddress)
			delete(rawMsg, key)
		case "translatedFqdn":
			err = unpopulate(val, "TranslatedFqdn", &n.TranslatedFqdn)
			delete(rawMsg, key)
		case "translatedPort":
			err = unpopulate(val, "TranslatedPort", &n.TranslatedPort)
			delete(rawMsg, key)
		}
		if err != nil {
			return fmt.Errorf("unmarshalling type %T: %v", n, err)
		}
	}
	return nil
}

// MarshalJSON implements the json.Marshaller interface for type OutboundRulePropertiesFormat.
func (o OutboundRulePropertiesFormat) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "allocatedOutboundPorts", o.AllocatedOutboundPorts)
	populate(objectMap, "backendAddressPool", o.BackendAddressPool)
	populate(objectMap, "enableTcpReset", o.EnableTCPReset)
	populate(objectMap, "frontendIPConfigurations", o.FrontendIPConfigurations)
	populate(objectMap, "idleTimeoutInMinutes", o.IdleTimeoutInMinutes)
	populate(objectMap, "protocol", o.Protocol)
	populate(objectMap, "provisioningState", o.ProvisioningState)
	return json.Marshal(objectMap)
}

// MarshalJSON implements the json.Marshaller interface for type OwaspCrsExclusionEntry.
func (o OwaspCrsExclusionEntry) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "exclusionManagedRuleSets", o.ExclusionManagedRuleSets)
	populate(objectMap, "matchVariable", o.MatchVariable)
	populate(objectMap, "selector", o.Selector)
	populate(objectMap, "selectorMatchOperator", o.SelectorMatchOperator)
	return json.Marshal(objectMap)
}

// MarshalJSON implements the json.Marshaller interface for type P2SConnectionConfigurationProperties.
func (p P2SConnectionConfigurationProperties) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "configurationPolicyGroupAssociations", p.ConfigurationPolicyGroupAssociations)
	populate(objectMap, "enableInternetSecurity", p.EnableInternetSecurity)
	populate(objectMap, "previousConfigurationPolicyGroupAssociations", p.PreviousConfigurationPolicyGroupAssociations)
	populate(objectMap, "provisioningState", p.ProvisioningState)
	populate(objectMap, "routingConfiguration", p.RoutingConfiguration)
	populate(objectMap, "vpnClientAddressPool", p.VPNClientAddressPool)
	return json.Marshal(objectMap)
}

// MarshalJSON implements the json.Marshaller interface for type P2SVPNConnectionHealthRequest.
func (p P2SVPNConnectionHealthRequest) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "outputBlobSasUrl", p.OutputBlobSasURL)
	populate(objectMap, "vpnUserNamesFilter", p.VPNUserNamesFilter)
	return json.Marshal(objectMap)
}

// MarshalJSON implements the json.Marshaller interface for type P2SVPNConnectionRequest.
func (p P2SVPNConnectionRequest) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "vpnConnectionIds", p.VPNConnectionIDs)
	return json.Marshal(objectMap)
}

// MarshalJSON implements the json.Marshaller interface for type P2SVPNGateway.
func (p P2SVPNGateway) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "etag", p.Etag)
	populate(objectMap, "id", p.ID)
	populate(objectMap, "location", p.Location)
	populate(objectMap, "name", p.Name)
	populate(objectMap, "properties", p.Properties)
	populate(objectMap, "tags", p.Tags)
	populate(objectMap, "type", p.Type)
	return json.Marshal(objectMap)
}

// MarshalJSON implements the json.Marshaller interface for type P2SVPNGatewayProperties.
func (p P2SVPNGatewayProperties) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "customDnsServers", p.CustomDNSServers)
	populate(objectMap, "isRoutingPreferenceInternet", p.IsRoutingPreferenceInternet)
	populate(objectMap, "p2SConnectionConfigurations", p.P2SConnectionConfigurations)
	populate(objectMap, "provisioningState", p.ProvisioningState)
	populate(objectMap, "vpnClientConnectionHealth", p.VPNClientConnectionHealth)
	populate(objectMap, "vpnGatewayScaleUnit", p.VPNGatewayScaleUnit)
	populate(objectMap, "vpnServerConfiguration", p.VPNServerConfiguration)
	populate(objectMap, "virtualHub", p.VirtualHub)
	return json.Marshal(objectMap)
}

// MarshalJSON implements the json.Marshaller interface for type PacketCaptureParameters.
func (p PacketCaptureParameters) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "bytesToCapturePerPacket", p.BytesToCapturePerPacket)
	populate(objectMap, "filters", p.Filters)
	populate(objectMap, "storageLocation", p.StorageLocation)
	populate(objectMap, "target", p.Target)
	populate(objectMap, "timeLimitInSeconds", p.TimeLimitInSeconds)
	populate(objectMap, "totalBytesPerSession", p.TotalBytesPerSession)
	return json.Marshal(objectMap)
}

// UnmarshalJSON implements the json.Unmarshaller interface for type PacketCaptureQueryStatusResult.
func (p *PacketCaptureQueryStatusResult) UnmarshalJSON(data []byte) error {
	var rawMsg map[string]json.RawMessage
	if err := json.Unmarshal(data, &rawMsg); err != nil {
		return fmt.Errorf("unmarshalling type %T: %v", p, err)
	}
	for key, val := range rawMsg {
		var err error
		switch key {
		case "captureStartTime":
			err = unpopulateTimeRFC3339(val, "CaptureStartTime", &p.CaptureStartTime)
			delete(rawMsg, key)
		case "id":
			err = unpopulate(val, "ID", &p.ID)
			delete(rawMsg, key)
		case "name":
			err = unpopulate(val, "Name", &p.Name)
			delete(rawMsg, key)
		case "packetCaptureError":
			err = unpopulate(val, "PacketCaptureError", &p.PacketCaptureError)
			delete(rawMsg, key)
		case "packetCaptureStatus":
			err = unpopulate(val, "PacketCaptureStatus", &p.PacketCaptureStatus)
			delete(rawMsg, key)
		case "stopReason":
			err = unpopulate(val, "StopReason", &p.StopReason)
			delete(rawMsg, key)
		}
		if err != nil {
			return fmt.Errorf("unmarshalling type %T: %v", p, err)
		}
	}
	return nil
}

// MarshalJSON implements the json.Marshaller interface for type PacketCaptureResultProperties.
func (p PacketCaptureResultProperties) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "bytesToCapturePerPacket", p.BytesToCapturePerPacket)
	populate(objectMap, "filters", p.Filters)
	populate(objectMap, "provisioningState", p.ProvisioningState)
	populate(objectMap, "storageLocation", p.StorageLocation)
	populate(objectMap, "target", p.Target)
	populate(objectMap, "timeLimitInSeconds", p.TimeLimitInSeconds)
	populate(objectMap, "totalBytesPerSession", p.TotalBytesPerSession)
	return json.Marshal(objectMap)
}

// MarshalJSON implements the json.Marshaller interface for type PatchRouteFilter.
func (p PatchRouteFilter) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "etag", p.Etag)
	populate(objectMap, "id", p.ID)
	populate(objectMap, "name", p.Name)
	populate(objectMap, "properties", p.Properties)
	populate(objectMap, "tags", p.Tags)
	populate(objectMap, "type", p.Type)
	return json.Marshal(objectMap)
}

// MarshalJSON implements the json.Marshaller interface for type PrepareNetworkPoliciesRequest.
func (p PrepareNetworkPoliciesRequest) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "networkIntentPolicyConfigurations", p.NetworkIntentPolicyConfigurations)
	populate(objectMap, "serviceName", p.ServiceName)
	return json.Marshal(objectMap)
}

// MarshalJSON implements the json.Marshaller interface for type PrivateDNSZoneGroupPropertiesFormat.
func (p PrivateDNSZoneGroupPropertiesFormat) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "privateDnsZoneConfigs", p.PrivateDNSZoneConfigs)
	populate(objectMap, "provisioningState", p.ProvisioningState)
	return json.Marshal(objectMap)
}

// MarshalJSON implements the json.Marshaller interface for type PrivateDNSZonePropertiesFormat.
func (p PrivateDNSZonePropertiesFormat) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "privateDnsZoneId", p.PrivateDNSZoneID)
	populate(objectMap, "recordSets", p.RecordSets)
	return json.Marshal(objectMap)
}

// MarshalJSON implements the json.Marshaller interface for type PrivateEndpoint.
func (p PrivateEndpoint) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "etag", p.Etag)
	populate(objectMap, "extendedLocation", p.ExtendedLocation)
	populate(objectMap, "id", p.ID)
	populate(objectMap, "location", p.Location)
	populate(objectMap, "name", p.Name)
	populate(objectMap, "properties", p.Properties)
	populate(objectMap, "tags", p.Tags)
	populate(objectMap, "type", p.Type)
	return json.Marshal(objectMap)
}

// MarshalJSON implements the json.Marshaller interface for type PrivateEndpointProperties.
func (p PrivateEndpointProperties) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "applicationSecurityGroups", p.ApplicationSecurityGroups)
	populate(objectMap, "customDnsConfigs", p.CustomDNSConfigs)
	populate(objectMap, "customNetworkInterfaceName", p.CustomNetworkInterfaceName)
	populate(objectMap, "ipConfigurations", p.IPConfigurations)
	populate(objectMap, "manualPrivateLinkServiceConnections", p.ManualPrivateLinkServiceConnections)
	populate(objectMap, "networkInterfaces", p.NetworkInterfaces)
	populate(objectMap, "privateLinkServiceConnections", p.PrivateLinkServiceConnections)
	populate(objectMap, "provisioningState", p.ProvisioningState)
	populate(objectMap, "subnet", p.Subnet)
	return json.Marshal(objectMap)
}

// MarshalJSON implements the json.Marshaller interface for type PrivateLinkService.
func (p PrivateLinkService) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "etag", p.Etag)
	populate(objectMap, "extendedLocation", p.ExtendedLocation)
	populate(objectMap, "id", p.ID)
	populate(objectMap, "location", p.Location)
	populate(objectMap, "name", p.Name)
	populate(objectMap, "properties", p.Properties)
	populate(objectMap, "tags", p.Tags)
	populate(objectMap, "type", p.Type)
	return json.Marshal(objectMap)
}

// MarshalJSON implements the json.Marshaller interface for type PrivateLinkServiceConnectionProperties.
func (p PrivateLinkServiceConnectionProperties) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "groupIds", p.GroupIDs)
	populate(objectMap, "privateLinkServiceConnectionState", p.PrivateLinkServiceConnectionState)
	populate(objectMap, "privateLinkServiceId", p.PrivateLinkServiceID)
	populate(objectMap, "provisioningState", p.ProvisioningState)
	populate(objectMap, "requestMessage", p.RequestMessage)
	return json.Marshal(objectMap)
}

// MarshalJSON implements the json.Marshaller interface for type PrivateLinkServiceProperties.
func (p PrivateLinkServiceProperties) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "alias", p.Alias)
	populate(objectMap, "autoApproval", p.AutoApproval)
	populate(objectMap, "enableProxyProtocol", p.EnableProxyProtocol)
	populate(objectMap, "fqdns", p.Fqdns)
	populate(objectMap, "ipConfigurations", p.IPConfigurations)
	populate(objectMap, "loadBalancerFrontendIpConfigurations", p.LoadBalancerFrontendIPConfigurations)
	populate(objectMap, "networkInterfaces", p.NetworkInterfaces)
	populate(objectMap, "privateEndpointConnections", p.PrivateEndpointConnections)
	populate(objectMap, "provisioningState", p.ProvisioningState)
	populate(objectMap, "visibility", p.Visibility)
	return json.Marshal(objectMap)
}

// MarshalJSON implements the json.Marshaller interface for type PrivateLinkServicePropertiesAutoApproval.
func (p PrivateLinkServicePropertiesAutoApproval) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "subscriptions", p.Subscriptions)
	return json.Marshal(objectMap)
}

// MarshalJSON implements the json.Marshaller interface for type PrivateLinkServicePropertiesVisibility.
func (p PrivateLinkServicePropertiesVisibility) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "subscriptions", p.Subscriptions)
	return json.Marshal(objectMap)
}

// MarshalJSON implements the json.Marshaller interface for type ProbePropertiesFormat.
func (p ProbePropertiesFormat) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "intervalInSeconds", p.IntervalInSeconds)
	populate(objectMap, "loadBalancingRules", p.LoadBalancingRules)
	populate(objectMap, "numberOfProbes", p.NumberOfProbes)
	populate(objectMap, "port", p.Port)
	populate(objectMap, "protocol", p.Protocol)
	populate(objectMap, "provisioningState", p.ProvisioningState)
	populate(objectMap, "requestPath", p.RequestPath)
	return json.Marshal(objectMap)
}

// MarshalJSON implements the json.Marshaller interface for type Profile.
func (p Profile) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "etag", p.Etag)
	populate(objectMap, "id", p.ID)
	populate(objectMap, "location", p.Location)
	populate(objectMap, "name", p.Name)
	populate(objectMap, "properties", p.Properties)
	populate(objectMap, "tags", p.Tags)
	populate(objectMap, "type", p.Type)
	return json.Marshal(objectMap)
}

// MarshalJSON implements the json.Marshaller interface for type ProfilePropertiesFormat.
func (p ProfilePropertiesFormat) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "containerNetworkInterfaceConfigurations", p.ContainerNetworkInterfaceConfigurations)
	populate(objectMap, "containerNetworkInterfaces", p.ContainerNetworkInterfaces)
	populate(objectMap, "provisioningState", p.ProvisioningState)
	populate(objectMap, "resourceGuid", p.ResourceGUID)
	return json.Marshal(objectMap)
}

// MarshalJSON implements the json.Marshaller interface for type PropagatedRouteTable.
func (p PropagatedRouteTable) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "ids", p.IDs)
	populate(objectMap, "labels", p.Labels)
	return json.Marshal(objectMap)
}

// MarshalJSON implements the json.Marshaller interface for type PublicIPAddress.
func (p PublicIPAddress) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "etag", p.Etag)
	populate(objectMap, "extendedLocation", p.ExtendedLocation)
	populate(objectMap, "id", p.ID)
	populate(objectMap, "location", p.Location)
	populate(objectMap, "name", p.Name)
	populate(objectMap, "properties", p.Properties)
	populate(objectMap, "sku", p.SKU)
	populate(objectMap, "tags", p.Tags)
	populate(objectMap, "type", p.Type)
	populate(objectMap, "zones", p.Zones)
	return json.Marshal(objectMap)
}

// MarshalJSON implements the json.Marshaller interface for type PublicIPAddressPropertiesFormat.
func (p PublicIPAddressPropertiesFormat) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "dnsSettings", p.DNSSettings)
	populate(objectMap, "ddosSettings", p.DdosSettings)
	populate(objectMap, "deleteOption", p.DeleteOption)
	populate(objectMap, "ipAddress", p.IPAddress)
	populate(objectMap, "ipConfiguration", p.IPConfiguration)
	populate(objectMap, "ipTags", p.IPTags)
	populate(objectMap, "idleTimeoutInMinutes", p.IdleTimeoutInMinutes)
	populate(objectMap, "linkedPublicIPAddress", p.LinkedPublicIPAddress)
	populate(objectMap, "migrationPhase", p.MigrationPhase)
	populate(objectMap, "natGateway", p.NatGateway)
	populate(objectMap, "provisioningState", p.ProvisioningState)
	populate(objectMap, "publicIPAddressVersion", p.PublicIPAddressVersion)
	populate(objectMap, "publicIPAllocationMethod", p.PublicIPAllocationMethod)
	populate(objectMap, "publicIPPrefix", p.PublicIPPrefix)
	populate(objectMap, "resourceGuid", p.ResourceGUID)
	populate(objectMap, "servicePublicIPAddress", p.ServicePublicIPAddress)
	return json.Marshal(objectMap)
}

// MarshalJSON implements the json.Marshaller interface for type PublicIPPrefix.
func (p PublicIPPrefix) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "etag", p.Etag)
	populate(objectMap, "extendedLocation", p.ExtendedLocation)
	populate(objectMap, "id", p.ID)
	populate(objectMap, "location", p.Location)
	populate(objectMap, "name", p.Name)
	populate(objectMap, "properties", p.Properties)
	populate(objectMap, "sku", p.SKU)
	populate(objectMap, "tags", p.Tags)
	populate(objectMap, "type", p.Type)
	populate(objectMap, "zones", p.Zones)
	return json.Marshal(objectMap)
}

// MarshalJSON implements the json.Marshaller interface for type PublicIPPrefixPropertiesFormat.
func (p PublicIPPrefixPropertiesFormat) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "customIPPrefix", p.CustomIPPrefix)
	populate(objectMap, "ipPrefix", p.IPPrefix)
	populate(objectMap, "ipTags", p.IPTags)
	populate(objectMap, "loadBalancerFrontendIpConfiguration", p.LoadBalancerFrontendIPConfiguration)
	populate(objectMap, "natGateway", p.NatGateway)
	populate(objectMap, "prefixLength", p.PrefixLength)
	populate(objectMap, "provisioningState", p.ProvisioningState)
	populate(objectMap, "publicIPAddressVersion", p.PublicIPAddressVersion)
	populate(objectMap, "publicIPAddresses", p.PublicIPAddresses)
	populate(objectMap, "resourceGuid", p.ResourceGUID)
	return json.Marshal(objectMap)
}

// MarshalJSON implements the json.Marshaller interface for type QosDefinition.
func (q QosDefinition) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "destinationIpRanges", q.DestinationIPRanges)
	populate(objectMap, "destinationPortRanges", q.DestinationPortRanges)
	populate(objectMap, "markings", q.Markings)
	populate(objectMap, "protocol", q.Protocol)
	populate(objectMap, "sourceIpRanges", q.SourceIPRanges)
	populate(objectMap, "sourcePortRanges", q.SourcePortRanges)
	return json.Marshal(objectMap)
}

// MarshalJSON implements the json.Marshaller interface for type RecordSet.
func (r RecordSet) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "fqdn", r.Fqdn)
	populate(objectMap, "ipAddresses", r.IPAddresses)
	populate(objectMap, "provisioningState", r.ProvisioningState)
	populate(objectMap, "recordSetName", r.RecordSetName)
	populate(objectMap, "recordType", r.RecordType)
	populate(objectMap, "ttl", r.TTL)
	return json.Marshal(objectMap)
}

// MarshalJSON implements the json.Marshaller interface for type Resource.
func (r Resource) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "id", r.ID)
	populate(objectMap, "location", r.Location)
	populate(objectMap, "name", r.Name)
	populate(objectMap, "tags", r.Tags)
	populate(objectMap, "type", r.Type)
	return json.Marshal(objectMap)
}

// MarshalJSON implements the json.Marshaller interface for type ResourceSet.
func (r ResourceSet) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "subscriptions", r.Subscriptions)
	return json.Marshal(objectMap)
}

// MarshalJSON implements the json.Marshaller interface for type RouteFilter.
func (r RouteFilter) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "etag", r.Etag)
	populate(objectMap, "id", r.ID)
	populate(objectMap, "location", r.Location)
	populate(objectMap, "name", r.Name)
	populate(objectMap, "properties", r.Properties)
	populate(objectMap, "tags", r.Tags)
	populate(objectMap, "type", r.Type)
	return json.Marshal(objectMap)
}

// MarshalJSON implements the json.Marshaller interface for type RouteFilterPropertiesFormat.
func (r RouteFilterPropertiesFormat) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "ipv6Peerings", r.IPv6Peerings)
	populate(objectMap, "peerings", r.Peerings)
	populate(objectMap, "provisioningState", r.ProvisioningState)
	populate(objectMap, "rules", r.Rules)
	return json.Marshal(objectMap)
}

// MarshalJSON implements the json.Marshaller interface for type RouteFilterRulePropertiesFormat.
func (r RouteFilterRulePropertiesFormat) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "access", r.Access)
	populate(objectMap, "communities", r.Communities)
	populate(objectMap, "provisioningState", r.ProvisioningState)
	populate(objectMap, "routeFilterRuleType", r.RouteFilterRuleType)
	return json.Marshal(objectMap)
}

// MarshalJSON implements the json.Marshaller interface for type RouteTable.
func (r RouteTable) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "etag", r.Etag)
	populate(objectMap, "id", r.ID)
	populate(objectMap, "location", r.Location)
	populate(objectMap, "name", r.Name)
	populate(objectMap, "properties", r.Properties)
	populate(objectMap, "tags", r.Tags)
	populate(objectMap, "type", r.Type)
	return json.Marshal(objectMap)
}

// MarshalJSON implements the json.Marshaller interface for type RouteTablePropertiesFormat.
func (r RouteTablePropertiesFormat) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "disableBgpRoutePropagation", r.DisableBgpRoutePropagation)
	populate(objectMap, "provisioningState", r.ProvisioningState)
	populate(objectMap, "resourceGuid", r.ResourceGUID)
	populate(objectMap, "routes", r.Routes)
	populate(objectMap, "subnets", r.Subnets)
	return json.Marshal(objectMap)
}

// MarshalJSON implements the json.Marshaller interface for type RoutingIntentProperties.
func (r RoutingIntentProperties) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "provisioningState", r.ProvisioningState)
	populate(objectMap, "routingPolicies", r.RoutingPolicies)
	return json.Marshal(objectMap)
}

// MarshalJSON implements the json.Marshaller interface for type RoutingPolicy.
func (r RoutingPolicy) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "destinations", r.Destinations)
	populate(objectMap, "name", r.Name)
	populate(objectMap, "nextHop", r.NextHop)
	return json.Marshal(objectMap)
}

// MarshalJSON implements the json.Marshaller interface for type Rule.
func (r Rule) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "description", r.Description)
	populate(objectMap, "destinationAddresses", r.DestinationAddresses)
	populate(objectMap, "destinationFqdns", r.DestinationFqdns)
	populate(objectMap, "destinationIpGroups", r.DestinationIPGroups)
	populate(objectMap, "destinationPorts", r.DestinationPorts)
	populate(objectMap, "ipProtocols", r.IPProtocols)
	populate(objectMap, "name", r.Name)
	objectMap["ruleType"] = FirewallPolicyRuleTypeNetworkRule
	populate(objectMap, "sourceAddresses", r.SourceAddresses)
	populate(objectMap, "sourceIpGroups", r.SourceIPGroups)
	return json.Marshal(objectMap)
}

// UnmarshalJSON implements the json.Unmarshaller interface for type Rule.
func (r *Rule) UnmarshalJSON(data []byte) error {
	var rawMsg map[string]json.RawMessage
	if err := json.Unmarshal(data, &rawMsg); err != nil {
		return fmt.Errorf("unmarshalling type %T: %v", r, err)
	}
	for key, val := range rawMsg {
		var err error
		switch key {
		case "description":
			err = unpopulate(val, "Description", &r.Description)
			delete(rawMsg, key)
		case "destinationAddresses":
			err = unpopulate(val, "DestinationAddresses", &r.DestinationAddresses)
			delete(rawMsg, key)
		case "destinationFqdns":
			err = unpopulate(val, "DestinationFqdns", &r.DestinationFqdns)
			delete(rawMsg, key)
		case "destinationIpGroups":
			err = unpopulate(val, "DestinationIPGroups", &r.DestinationIPGroups)
			delete(rawMsg, key)
		case "destinationPorts":
			err = unpopulate(val, "DestinationPorts", &r.DestinationPorts)
			delete(rawMsg, key)
		case "ipProtocols":
			err = unpopulate(val, "IPProtocols", &r.IPProtocols)
			delete(rawMsg, key)
		case "name":
			err = unpopulate(val, "Name", &r.Name)
			delete(rawMsg, key)
		case "ruleType":
			err = unpopulate(val, "RuleType", &r.RuleType)
			delete(rawMsg, key)
		case "sourceAddresses":
			err = unpopulate(val, "SourceAddresses", &r.SourceAddresses)
			delete(rawMsg, key)
		case "sourceIpGroups":
			err = unpopulate(val, "SourceIPGroups", &r.SourceIPGroups)
			delete(rawMsg, key)
		}
		if err != nil {
			return fmt.Errorf("unmarshalling type %T: %v", r, err)
		}
	}
	return nil
}

// MarshalJSON implements the json.Marshaller interface for type SecurityGroup.
func (s SecurityGroup) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "etag", s.Etag)
	populate(objectMap, "id", s.ID)
	populate(objectMap, "location", s.Location)
	populate(objectMap, "name", s.Name)
	populate(objectMap, "properties", s.Properties)
	populate(objectMap, "tags", s.Tags)
	populate(objectMap, "type", s.Type)
	return json.Marshal(objectMap)
}

// MarshalJSON implements the json.Marshaller interface for type SecurityGroupPropertiesFormat.
func (s SecurityGroupPropertiesFormat) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "defaultSecurityRules", s.DefaultSecurityRules)
	populate(objectMap, "flowLogs", s.FlowLogs)
	populate(objectMap, "networkInterfaces", s.NetworkInterfaces)
	populate(objectMap, "provisioningState", s.ProvisioningState)
	populate(objectMap, "resourceGuid", s.ResourceGUID)
	populate(objectMap, "securityRules", s.SecurityRules)
	populate(objectMap, "subnets", s.Subnets)
	return json.Marshal(objectMap)
}

// MarshalJSON implements the json.Marshaller interface for type SecurityPartnerProvider.
func (s SecurityPartnerProvider) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "etag", s.Etag)
	populate(objectMap, "id", s.ID)
	populate(objectMap, "location", s.Location)
	populate(objectMap, "name", s.Name)
	populate(objectMap, "properties", s.Properties)
	populate(objectMap, "tags", s.Tags)
	populate(objectMap, "type", s.Type)
	return json.Marshal(objectMap)
}

// MarshalJSON implements the json.Marshaller interface for type SecurityRulePropertiesFormat.
func (s SecurityRulePropertiesFormat) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "access", s.Access)
	populate(objectMap, "description", s.Description)
	populate(objectMap, "destinationAddressPrefix", s.DestinationAddressPrefix)
	populate(objectMap, "destinationAddressPrefixes", s.DestinationAddressPrefixes)
	populate(objectMap, "destinationApplicationSecurityGroups", s.DestinationApplicationSecurityGroups)
	populate(objectMap, "destinationPortRange", s.DestinationPortRange)
	populate(objectMap, "destinationPortRanges", s.DestinationPortRanges)
	populate(objectMap, "direction", s.Direction)
	populate(objectMap, "priority", s.Priority)
	populate(objectMap, "protocol", s.Protocol)
	populate(objectMap, "provisioningState", s.ProvisioningState)
	populate(objectMap, "sourceAddressPrefix", s.SourceAddressPrefix)
	populate(objectMap, "sourceAddressPrefixes", s.SourceAddressPrefixes)
	populate(objectMap, "sourceApplicationSecurityGroups", s.SourceApplicationSecurityGroups)
	populate(objectMap, "sourcePortRange", s.SourcePortRange)
	populate(objectMap, "sourcePortRanges", s.SourcePortRanges)
	return json.Marshal(objectMap)
}

// MarshalJSON implements the json.Marshaller interface for type ServiceAssociationLinkPropertiesFormat.
func (s ServiceAssociationLinkPropertiesFormat) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "allowDelete", s.AllowDelete)
	populate(objectMap, "link", s.Link)
	populate(objectMap, "linkedResourceType", s.LinkedResourceType)
	populate(objectMap, "locations", s.Locations)
	populate(objectMap, "provisioningState", s.ProvisioningState)
	return json.Marshal(objectMap)
}

// MarshalJSON implements the json.Marshaller interface for type ServiceDelegationPropertiesFormat.
func (s ServiceDelegationPropertiesFormat) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "actions", s.Actions)
	populate(objectMap, "provisioningState", s.ProvisioningState)
	populate(objectMap, "serviceName", s.ServiceName)
	return json.Marshal(objectMap)
}

// MarshalJSON implements the json.Marshaller interface for type ServiceEndpointPolicy.
func (s ServiceEndpointPolicy) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "etag", s.Etag)
	populate(objectMap, "id", s.ID)
	populate(objectMap, "kind", s.Kind)
	populate(objectMap, "location", s.Location)
	populate(objectMap, "name", s.Name)
	populate(objectMap, "properties", s.Properties)
	populate(objectMap, "tags", s.Tags)
	populate(objectMap, "type", s.Type)
	return json.Marshal(objectMap)
}

// MarshalJSON implements the json.Marshaller interface for type ServiceEndpointPolicyDefinitionPropertiesFormat.
func (s ServiceEndpointPolicyDefinitionPropertiesFormat) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "description", s.Description)
	populate(objectMap, "provisioningState", s.ProvisioningState)
	populate(objectMap, "service", s.Service)
	populate(objectMap, "serviceResources", s.ServiceResources)
	return json.Marshal(objectMap)
}

// MarshalJSON implements the json.Marshaller interface for type ServiceEndpointPolicyPropertiesFormat.
func (s ServiceEndpointPolicyPropertiesFormat) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "contextualServiceEndpointPolicies", s.ContextualServiceEndpointPolicies)
	populate(objectMap, "provisioningState", s.ProvisioningState)
	populate(objectMap, "resourceGuid", s.ResourceGUID)
	populate(objectMap, "serviceAlias", s.ServiceAlias)
	populate(objectMap, "serviceEndpointPolicyDefinitions", s.ServiceEndpointPolicyDefinitions)
	populate(objectMap, "subnets", s.Subnets)
	return json.Marshal(objectMap)
}

// MarshalJSON implements the json.Marshaller interface for type ServiceEndpointPropertiesFormat.
func (s ServiceEndpointPropertiesFormat) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "locations", s.Locations)
	populate(objectMap, "provisioningState", s.ProvisioningState)
	populate(objectMap, "service", s.Service)
	return json.Marshal(objectMap)
}

// MarshalJSON implements the json.Marshaller interface for type SessionIDs.
func (s SessionIDs) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "sessionIds", s.SessionIDs)
	return json.Marshal(objectMap)
}

// MarshalJSON implements the json.Marshaller interface for type SignaturesOverrides.
func (s SignaturesOverrides) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "id", s.ID)
	populate(objectMap, "name", s.Name)
	populate(objectMap, "properties", s.Properties)
	populate(objectMap, "type", s.Type)
	return json.Marshal(objectMap)
}

// MarshalJSON implements the json.Marshaller interface for type SignaturesOverridesProperties.
func (s SignaturesOverridesProperties) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "signatures", s.Signatures)
	return json.Marshal(objectMap)
}

// MarshalJSON implements the json.Marshaller interface for type StaticRoute.
func (s StaticRoute) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "addressPrefixes", s.AddressPrefixes)
	populate(objectMap, "name", s.Name)
	populate(objectMap, "nextHopIpAddress", s.NextHopIPAddress)
	return json.Marshal(objectMap)
}

// MarshalJSON implements the json.Marshaller interface for type SubnetPropertiesFormat.
func (s SubnetPropertiesFormat) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "addressPrefix", s.AddressPrefix)
	populate(objectMap, "addressPrefixes", s.AddressPrefixes)
	populate(objectMap, "applicationGatewayIpConfigurations", s.ApplicationGatewayIPConfigurations)
	populate(objectMap, "delegations", s.Delegations)
	populate(objectMap, "ipAllocations", s.IPAllocations)
	populate(objectMap, "ipConfigurationProfiles", s.IPConfigurationProfiles)
	populate(objectMap, "ipConfigurations", s.IPConfigurations)
	populate(objectMap, "natGateway", s.NatGateway)
	populate(objectMap, "networkSecurityGroup", s.NetworkSecurityGroup)
	populate(objectMap, "privateEndpointNetworkPolicies", s.PrivateEndpointNetworkPolicies)
	populate(objectMap, "privateEndpoints", s.PrivateEndpoints)
	populate(objectMap, "privateLinkServiceNetworkPolicies", s.PrivateLinkServiceNetworkPolicies)
	populate(objectMap, "provisioningState", s.ProvisioningState)
	populate(objectMap, "purpose", s.Purpose)
	populate(objectMap, "resourceNavigationLinks", s.ResourceNavigationLinks)
	populate(objectMap, "routeTable", s.RouteTable)
	populate(objectMap, "serviceAssociationLinks", s.ServiceAssociationLinks)
	populate(objectMap, "serviceEndpointPolicies", s.ServiceEndpointPolicies)
	populate(objectMap, "serviceEndpoints", s.ServiceEndpoints)
	return json.Marshal(objectMap)
}

// MarshalJSON implements the json.Marshaller interface for type TagsObject.
func (t TagsObject) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "tags", t.Tags)
	return json.Marshal(objectMap)
}

// UnmarshalJSON implements the json.Unmarshaller interface for type Topology.
func (t *Topology) UnmarshalJSON(data []byte) error {
	var rawMsg map[string]json.RawMessage
	if err := json.Unmarshal(data, &rawMsg); err != nil {
		return fmt.Errorf("unmarshalling type %T: %v", t, err)
	}
	for key, val := range rawMsg {
		var err error
		switch key {
		case "createdDateTime":
			err = unpopulateTimeRFC3339(val, "CreatedDateTime", &t.CreatedDateTime)
			delete(rawMsg, key)
		case "id":
			err = unpopulate(val, "ID", &t.ID)
			delete(rawMsg, key)
		case "lastModified":
			err = unpopulateTimeRFC3339(val, "LastModified", &t.LastModified)
			delete(rawMsg, key)
		case "resources":
			err = unpopulate(val, "Resources", &t.Resources)
			delete(rawMsg, key)
		}
		if err != nil {
			return fmt.Errorf("unmarshalling type %T: %v", t, err)
		}
	}
	return nil
}

// MarshalJSON implements the json.Marshaller interface for type TrafficSelectorPolicy.
func (t TrafficSelectorPolicy) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "localAddressRanges", t.LocalAddressRanges)
	populate(objectMap, "remoteAddressRanges", t.RemoteAddressRanges)
	return json.Marshal(objectMap)
}

// UnmarshalJSON implements the json.Unmarshaller interface for type TroubleshootingResult.
func (t *TroubleshootingResult) UnmarshalJSON(data []byte) error {
	var rawMsg map[string]json.RawMessage
	if err := json.Unmarshal(data, &rawMsg); err != nil {
		return fmt.Errorf("unmarshalling type %T: %v", t, err)
	}
	for key, val := range rawMsg {
		var err error
		switch key {
		case "code":
			err = unpopulate(val, "Code", &t.Code)
			delete(rawMsg, key)
		case "endTime":
			err = unpopulateTimeRFC3339(val, "EndTime", &t.EndTime)
			delete(rawMsg, key)
		case "results":
			err = unpopulate(val, "Results", &t.Results)
			delete(rawMsg, key)
		case "startTime":
			err = unpopulateTimeRFC3339(val, "StartTime", &t.StartTime)
			delete(rawMsg, key)
		}
		if err != nil {
			return fmt.Errorf("unmarshalling type %T: %v", t, err)
		}
	}
	return nil
}

// MarshalJSON implements the json.Marshaller interface for type VM.
func (v VM) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "id", v.ID)
	populate(objectMap, "location", v.Location)
	populate(objectMap, "name", v.Name)
	populate(objectMap, "tags", v.Tags)
	populate(objectMap, "type", v.Type)
	return json.Marshal(objectMap)
}

// MarshalJSON implements the json.Marshaller interface for type VPNClientConfiguration.
func (v VPNClientConfiguration) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "aadAudience", v.AADAudience)
	populate(objectMap, "aadIssuer", v.AADIssuer)
	populate(objectMap, "aadTenant", v.AADTenant)
	populate(objectMap, "radiusServerAddress", v.RadiusServerAddress)
	populate(objectMap, "radiusServerSecret", v.RadiusServerSecret)
	populate(objectMap, "radiusServers", v.RadiusServers)
	populate(objectMap, "vpnAuthenticationTypes", v.VPNAuthenticationTypes)
	populate(objectMap, "vpnClientAddressPool", v.VPNClientAddressPool)
	populate(objectMap, "vpnClientIpsecPolicies", v.VPNClientIPSecPolicies)
	populate(objectMap, "vpnClientProtocols", v.VPNClientProtocols)
	populate(objectMap, "vpnClientRevokedCertificates", v.VPNClientRevokedCertificates)
	populate(objectMap, "vpnClientRootCertificates", v.VPNClientRootCertificates)
	return json.Marshal(objectMap)
}

// MarshalJSON implements the json.Marshaller interface for type VPNClientConnectionHealth.
func (v VPNClientConnectionHealth) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "allocatedIpAddresses", v.AllocatedIPAddresses)
	populate(objectMap, "totalEgressBytesTransferred", v.TotalEgressBytesTransferred)
	populate(objectMap, "totalIngressBytesTransferred", v.TotalIngressBytesTransferred)
	populate(objectMap, "vpnClientConnectionsCount", v.VPNClientConnectionsCount)
	return json.Marshal(objectMap)
}

// MarshalJSON implements the json.Marshaller interface for type VPNClientParameters.
func (v VPNClientParameters) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "authenticationMethod", v.AuthenticationMethod)
	populate(objectMap, "clientRootCertificates", v.ClientRootCertificates)
	populate(objectMap, "processorArchitecture", v.ProcessorArchitecture)
	populate(objectMap, "radiusServerAuthCertificate", v.RadiusServerAuthCertificate)
	return json.Marshal(objectMap)
}

// MarshalJSON implements the json.Marshaller interface for type VPNConnectionPacketCaptureStartParameters.
func (v VPNConnectionPacketCaptureStartParameters) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "filterData", v.FilterData)
	populate(objectMap, "linkConnectionNames", v.LinkConnectionNames)
	return json.Marshal(objectMap)
}

// MarshalJSON implements the json.Marshaller interface for type VPNConnectionPacketCaptureStopParameters.
func (v VPNConnectionPacketCaptureStopParameters) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "linkConnectionNames", v.LinkConnectionNames)
	populate(objectMap, "sasUrl", v.SasURL)
	return json.Marshal(objectMap)
}

// MarshalJSON implements the json.Marshaller interface for type VPNConnectionProperties.
func (v VPNConnectionProperties) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "connectionBandwidth", v.ConnectionBandwidth)
	populate(objectMap, "connectionStatus", v.ConnectionStatus)
	populate(objectMap, "dpdTimeoutSeconds", v.DpdTimeoutSeconds)
	populate(objectMap, "egressBytesTransferred", v.EgressBytesTransferred)
	populate(objectMap, "enableBgp", v.EnableBgp)
	populate(objectMap, "enableInternetSecurity", v.EnableInternetSecurity)
	populate(objectMap, "enableRateLimiting", v.EnableRateLimiting)
	populate(objectMap, "ipsecPolicies", v.IPSecPolicies)
	populate(objectMap, "ingressBytesTransferred", v.IngressBytesTransferred)
	populate(objectMap, "provisioningState", v.ProvisioningState)
	populate(objectMap, "remoteVpnSite", v.RemoteVPNSite)
	populate(objectMap, "routingConfiguration", v.RoutingConfiguration)
	populate(objectMap, "routingWeight", v.RoutingWeight)
	populate(objectMap, "sharedKey", v.SharedKey)
	populate(objectMap, "trafficSelectorPolicies", v.TrafficSelectorPolicies)
	populate(objectMap, "useLocalAzureIpAddress", v.UseLocalAzureIPAddress)
	populate(objectMap, "usePolicyBasedTrafficSelectors", v.UsePolicyBasedTrafficSelectors)
	populate(objectMap, "vpnConnectionProtocolType", v.VPNConnectionProtocolType)
	populate(objectMap, "vpnLinkConnections", v.VPNLinkConnections)
	return json.Marshal(objectMap)
}

// MarshalJSON implements the json.Marshaller interface for type VPNGateway.
func (v VPNGateway) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "etag", v.Etag)
	populate(objectMap, "id", v.ID)
	populate(objectMap, "location", v.Location)
	populate(objectMap, "name", v.Name)
	populate(objectMap, "properties", v.Properties)
	populate(objectMap, "tags", v.Tags)
	populate(objectMap, "type", v.Type)
	return json.Marshal(objectMap)
}

// MarshalJSON implements the json.Marshaller interface for type VPNGatewayNatRuleProperties.
func (v VPNGatewayNatRuleProperties) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "egressVpnSiteLinkConnections", v.EgressVPNSiteLinkConnections)
	populate(objectMap, "externalMappings", v.ExternalMappings)
	populate(objectMap, "ipConfigurationId", v.IPConfigurationID)
	populate(objectMap, "ingressVpnSiteLinkConnections", v.IngressVPNSiteLinkConnections)
	populate(objectMap, "internalMappings", v.InternalMappings)
	populate(objectMap, "mode", v.Mode)
	populate(objectMap, "provisioningState", v.ProvisioningState)
	populate(objectMap, "type", v.Type)
	return json.Marshal(objectMap)
}

// MarshalJSON implements the json.Marshaller interface for type VPNGatewayProperties.
func (v VPNGatewayProperties) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "bgpSettings", v.BgpSettings)
	populate(objectMap, "connections", v.Connections)
	populate(objectMap, "enableBgpRouteTranslationForNat", v.EnableBgpRouteTranslationForNat)
	populate(objectMap, "ipConfigurations", v.IPConfigurations)
	populate(objectMap, "isRoutingPreferenceInternet", v.IsRoutingPreferenceInternet)
	populate(objectMap, "natRules", v.NatRules)
	populate(objectMap, "provisioningState", v.ProvisioningState)
	populate(objectMap, "vpnGatewayScaleUnit", v.VPNGatewayScaleUnit)
	populate(objectMap, "virtualHub", v.VirtualHub)
	return json.Marshal(objectMap)
}

// MarshalJSON implements the json.Marshaller interface for type VPNServerConfiguration.
func (v VPNServerConfiguration) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "etag", v.Etag)
	populate(objectMap, "id", v.ID)
	populate(objectMap, "location", v.Location)
	populate(objectMap, "name", v.Name)
	populate(objectMap, "properties", v.Properties)
	populate(objectMap, "tags", v.Tags)
	populate(objectMap, "type", v.Type)
	return json.Marshal(objectMap)
}

// MarshalJSON implements the json.Marshaller interface for type VPNServerConfigurationPolicyGroupProperties.
func (v VPNServerConfigurationPolicyGroupProperties) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "isDefault", v.IsDefault)
	populate(objectMap, "p2SConnectionConfigurations", v.P2SConnectionConfigurations)
	populate(objectMap, "policyMembers", v.PolicyMembers)
	populate(objectMap, "priority", v.Priority)
	populate(objectMap, "provisioningState", v.ProvisioningState)
	return json.Marshal(objectMap)
}

// MarshalJSON implements the json.Marshaller interface for type VPNServerConfigurationProperties.
func (v VPNServerConfigurationProperties) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "aadAuthenticationParameters", v.AADAuthenticationParameters)
	populate(objectMap, "configurationPolicyGroups", v.ConfigurationPolicyGroups)
	populate(objectMap, "etag", v.Etag)
	populate(objectMap, "name", v.Name)
	populate(objectMap, "p2SVpnGateways", v.P2SVPNGateways)
	populate(objectMap, "provisioningState", v.ProvisioningState)
	populate(objectMap, "radiusClientRootCertificates", v.RadiusClientRootCertificates)
	populate(objectMap, "radiusServerAddress", v.RadiusServerAddress)
	populate(objectMap, "radiusServerRootCertificates", v.RadiusServerRootCertificates)
	populate(objectMap, "radiusServerSecret", v.RadiusServerSecret)
	populate(objectMap, "radiusServers", v.RadiusServers)
	populate(objectMap, "vpnAuthenticationTypes", v.VPNAuthenticationTypes)
	populate(objectMap, "vpnClientIpsecPolicies", v.VPNClientIPSecPolicies)
	populate(objectMap, "vpnClientRevokedCertificates", v.VPNClientRevokedCertificates)
	populate(objectMap, "vpnClientRootCertificates", v.VPNClientRootCertificates)
	populate(objectMap, "vpnProtocols", v.VPNProtocols)
	return json.Marshal(objectMap)
}

// MarshalJSON implements the json.Marshaller interface for type VPNSite.
func (v VPNSite) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "etag", v.Etag)
	populate(objectMap, "id", v.ID)
	populate(objectMap, "location", v.Location)
	populate(objectMap, "name", v.Name)
	populate(objectMap, "properties", v.Properties)
	populate(objectMap, "tags", v.Tags)
	populate(objectMap, "type", v.Type)
	return json.Marshal(objectMap)
}

// MarshalJSON implements the json.Marshaller interface for type VPNSiteLinkConnectionProperties.
func (v VPNSiteLinkConnectionProperties) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "connectionBandwidth", v.ConnectionBandwidth)
	populate(objectMap, "connectionStatus", v.ConnectionStatus)
	populate(objectMap, "egressBytesTransferred", v.EgressBytesTransferred)
	populate(objectMap, "egressNatRules", v.EgressNatRules)
	populate(objectMap, "enableBgp", v.EnableBgp)
	populate(objectMap, "enableRateLimiting", v.EnableRateLimiting)
	populate(objectMap, "ipsecPolicies", v.IPSecPolicies)
	populate(objectMap, "ingressBytesTransferred", v.IngressBytesTransferred)
	populate(objectMap, "ingressNatRules", v.IngressNatRules)
	populate(objectMap, "provisioningState", v.ProvisioningState)
	populate(objectMap, "routingWeight", v.RoutingWeight)
	populate(objectMap, "sharedKey", v.SharedKey)
	populate(objectMap, "useLocalAzureIpAddress", v.UseLocalAzureIPAddress)
	populate(objectMap, "usePolicyBasedTrafficSelectors", v.UsePolicyBasedTrafficSelectors)
	populate(objectMap, "vpnConnectionProtocolType", v.VPNConnectionProtocolType)
	populate(objectMap, "vpnGatewayCustomBgpAddresses", v.VPNGatewayCustomBgpAddresses)
	populate(objectMap, "vpnLinkConnectionMode", v.VPNLinkConnectionMode)
	populate(objectMap, "vpnSiteLink", v.VPNSiteLink)
	return json.Marshal(objectMap)
}

// MarshalJSON implements the json.Marshaller interface for type VPNSiteProperties.
func (v VPNSiteProperties) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "addressSpace", v.AddressSpace)
	populate(objectMap, "bgpProperties", v.BgpProperties)
	populate(objectMap, "deviceProperties", v.DeviceProperties)
	populate(objectMap, "ipAddress", v.IPAddress)
	populate(objectMap, "isSecuritySite", v.IsSecuritySite)
	populate(objectMap, "o365Policy", v.O365Policy)
	populate(objectMap, "provisioningState", v.ProvisioningState)
	populate(objectMap, "siteKey", v.SiteKey)
	populate(objectMap, "vpnSiteLinks", v.VPNSiteLinks)
	populate(objectMap, "virtualWan", v.VirtualWan)
	return json.Marshal(objectMap)
}

// MarshalJSON implements the json.Marshaller interface for type VirtualAppliance.
func (v VirtualAppliance) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "etag", v.Etag)
	populate(objectMap, "id", v.ID)
	populate(objectMap, "identity", v.Identity)
	populate(objectMap, "location", v.Location)
	populate(objectMap, "name", v.Name)
	populate(objectMap, "properties", v.Properties)
	populate(objectMap, "tags", v.Tags)
	populate(objectMap, "type", v.Type)
	return json.Marshal(objectMap)
}

// MarshalJSON implements the json.Marshaller interface for type VirtualAppliancePropertiesFormat.
func (v VirtualAppliancePropertiesFormat) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "addressPrefix", v.AddressPrefix)
	populate(objectMap, "bootStrapConfigurationBlobs", v.BootStrapConfigurationBlobs)
	populate(objectMap, "cloudInitConfiguration", v.CloudInitConfiguration)
	populate(objectMap, "cloudInitConfigurationBlobs", v.CloudInitConfigurationBlobs)
	populate(objectMap, "inboundSecurityRules", v.InboundSecurityRules)
	populate(objectMap, "nvaSku", v.NvaSKU)
	populate(objectMap, "provisioningState", v.ProvisioningState)
	populate(objectMap, "sshPublicKey", v.SSHPublicKey)
	populate(objectMap, "virtualApplianceAsn", v.VirtualApplianceAsn)
	populate(objectMap, "virtualApplianceNics", v.VirtualApplianceNics)
	populate(objectMap, "virtualApplianceSites", v.VirtualApplianceSites)
	populate(objectMap, "virtualHub", v.VirtualHub)
	return json.Marshal(objectMap)
}

// MarshalJSON implements the json.Marshaller interface for type VirtualApplianceSKU.
func (v VirtualApplianceSKU) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "etag", v.Etag)
	populate(objectMap, "id", v.ID)
	populate(objectMap, "location", v.Location)
	populate(objectMap, "name", v.Name)
	populate(objectMap, "properties", v.Properties)
	populate(objectMap, "tags", v.Tags)
	populate(objectMap, "type", v.Type)
	return json.Marshal(objectMap)
}

// MarshalJSON implements the json.Marshaller interface for type VirtualApplianceSKUPropertiesFormat.
func (v VirtualApplianceSKUPropertiesFormat) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "availableScaleUnits", v.AvailableScaleUnits)
	populate(objectMap, "availableVersions", v.AvailableVersions)
	populate(objectMap, "vendor", v.Vendor)
	return json.Marshal(objectMap)
}

// MarshalJSON implements the json.Marshaller interface for type VirtualHub.
func (v VirtualHub) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "etag", v.Etag)
	populate(objectMap, "id", v.ID)
	populate(objectMap, "kind", v.Kind)
	populate(objectMap, "location", v.Location)
	populate(objectMap, "name", v.Name)
	populate(objectMap, "properties", v.Properties)
	populate(objectMap, "tags", v.Tags)
	populate(objectMap, "type", v.Type)
	return json.Marshal(objectMap)
}

// MarshalJSON implements the json.Marshaller interface for type VirtualHubProperties.
func (v VirtualHubProperties) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "addressPrefix", v.AddressPrefix)
	populate(objectMap, "allowBranchToBranchTraffic", v.AllowBranchToBranchTraffic)
	populate(objectMap, "azureFirewall", v.AzureFirewall)
	populate(objectMap, "bgpConnections", v.BgpConnections)
	populate(objectMap, "expressRouteGateway", v.ExpressRouteGateway)
	populate(objectMap, "hubRoutingPreference", v.HubRoutingPreference)
	populate(objectMap, "ipConfigurations", v.IPConfigurations)
	populate(objectMap, "p2SVpnGateway", v.P2SVPNGateway)
	populate(objectMap, "preferredRoutingGateway", v.PreferredRoutingGateway)
	populate(objectMap, "provisioningState", v.ProvisioningState)
	populate(objectMap, "routeTable", v.RouteTable)
	populate(objectMap, "routingState", v.RoutingState)
	populate(objectMap, "sku", v.SKU)
	populate(objectMap, "securityPartnerProvider", v.SecurityPartnerProvider)
	populate(objectMap, "securityProviderName", v.SecurityProviderName)
	populate(objectMap, "vpnGateway", v.VPNGateway)
	populate(objectMap, "virtualHubRouteTableV2s", v.VirtualHubRouteTableV2S)
	populate(objectMap, "virtualRouterAsn", v.VirtualRouterAsn)
	populate(objectMap, "virtualRouterIps", v.VirtualRouterIPs)
	populate(objectMap, "virtualWan", v.VirtualWan)
	return json.Marshal(objectMap)
}

// MarshalJSON implements the json.Marshaller interface for type VirtualHubRoute.
func (v VirtualHubRoute) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "addressPrefixes", v.AddressPrefixes)
	populate(objectMap, "nextHopIpAddress", v.NextHopIPAddress)
	return json.Marshal(objectMap)
}

// MarshalJSON implements the json.Marshaller interface for type VirtualHubRouteTable.
func (v VirtualHubRouteTable) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "routes", v.Routes)
	return json.Marshal(objectMap)
}

// MarshalJSON implements the json.Marshaller interface for type VirtualHubRouteTableV2Properties.
func (v VirtualHubRouteTableV2Properties) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "attachedConnections", v.AttachedConnections)
	populate(objectMap, "provisioningState", v.ProvisioningState)
	populate(objectMap, "routes", v.Routes)
	return json.Marshal(objectMap)
}

// MarshalJSON implements the json.Marshaller interface for type VirtualHubRouteV2.
func (v VirtualHubRouteV2) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "destinationType", v.DestinationType)
	populate(objectMap, "destinations", v.Destinations)
	populate(objectMap, "nextHopType", v.NextHopType)
	populate(objectMap, "nextHops", v.NextHops)
	return json.Marshal(objectMap)
}

// MarshalJSON implements the json.Marshaller interface for type VirtualNetwork.
func (v VirtualNetwork) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "etag", v.Etag)
	populate(objectMap, "extendedLocation", v.ExtendedLocation)
	populate(objectMap, "id", v.ID)
	populate(objectMap, "location", v.Location)
	populate(objectMap, "name", v.Name)
	populate(objectMap, "properties", v.Properties)
	populate(objectMap, "tags", v.Tags)
	populate(objectMap, "type", v.Type)
	return json.Marshal(objectMap)
}

// MarshalJSON implements the json.Marshaller interface for type VirtualNetworkGateway.
func (v VirtualNetworkGateway) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "etag", v.Etag)
	populate(objectMap, "extendedLocation", v.ExtendedLocation)
	populate(objectMap, "id", v.ID)
	populate(objectMap, "location", v.Location)
	populate(objectMap, "name", v.Name)
	populate(objectMap, "properties", v.Properties)
	populate(objectMap, "tags", v.Tags)
	populate(objectMap, "type", v.Type)
	return json.Marshal(objectMap)
}

// MarshalJSON implements the json.Marshaller interface for type VirtualNetworkGatewayConnection.
func (v VirtualNetworkGatewayConnection) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "etag", v.Etag)
	populate(objectMap, "id", v.ID)
	populate(objectMap, "location", v.Location)
	populate(objectMap, "name", v.Name)
	populate(objectMap, "properties", v.Properties)
	populate(objectMap, "tags", v.Tags)
	populate(objectMap, "type", v.Type)
	return json.Marshal(objectMap)
}

// MarshalJSON implements the json.Marshaller interface for type VirtualNetworkGatewayConnectionListEntity.
func (v VirtualNetworkGatewayConnectionListEntity) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "etag", v.Etag)
	populate(objectMap, "id", v.ID)
	populate(objectMap, "location", v.Location)
	populate(objectMap, "name", v.Name)
	populate(objectMap, "properties", v.Properties)
	populate(objectMap, "tags", v.Tags)
	populate(objectMap, "type", v.Type)
	return json.Marshal(objectMap)
}

// MarshalJSON implements the json.Marshaller interface for type VirtualNetworkGatewayConnectionListEntityPropertiesFormat.
func (v VirtualNetworkGatewayConnectionListEntityPropertiesFormat) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "authorizationKey", v.AuthorizationKey)
	populate(objectMap, "connectionMode", v.ConnectionMode)
	populate(objectMap, "connectionProtocol", v.ConnectionProtocol)
	populate(objectMap, "connectionStatus", v.ConnectionStatus)
	populate(objectMap, "connectionType", v.ConnectionType)
	populate(objectMap, "egressBytesTransferred", v.EgressBytesTransferred)
	populate(objectMap, "enableBgp", v.EnableBgp)
	populate(objectMap, "expressRouteGatewayBypass", v.ExpressRouteGatewayBypass)
	populate(objectMap, "gatewayCustomBgpIpAddresses", v.GatewayCustomBgpIPAddresses)
	populate(objectMap, "ipsecPolicies", v.IPSecPolicies)
	populate(objectMap, "ingressBytesTransferred", v.IngressBytesTransferred)
	populate(objectMap, "localNetworkGateway2", v.LocalNetworkGateway2)
	populate(objectMap, "peer", v.Peer)
	populate(objectMap, "provisioningState", v.ProvisioningState)
	populate(objectMap, "resourceGuid", v.ResourceGUID)
	populate(objectMap, "routingWeight", v.RoutingWeight)
	populate(objectMap, "sharedKey", v.SharedKey)
	populate(objectMap, "trafficSelectorPolicies", v.TrafficSelectorPolicies)
	populate(objectMap, "tunnelConnectionStatus", v.TunnelConnectionStatus)
	populate(objectMap, "usePolicyBasedTrafficSelectors", v.UsePolicyBasedTrafficSelectors)
	populate(objectMap, "virtualNetworkGateway1", v.VirtualNetworkGateway1)
	populate(objectMap, "virtualNetworkGateway2", v.VirtualNetworkGateway2)
	return json.Marshal(objectMap)
}

// MarshalJSON implements the json.Marshaller interface for type VirtualNetworkGatewayConnectionPropertiesFormat.
func (v VirtualNetworkGatewayConnectionPropertiesFormat) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "authorizationKey", v.AuthorizationKey)
	populate(objectMap, "connectionMode", v.ConnectionMode)
	populate(objectMap, "connectionProtocol", v.ConnectionProtocol)
	populate(objectMap, "connectionStatus", v.ConnectionStatus)
	populate(objectMap, "connectionType", v.ConnectionType)
	populate(objectMap, "dpdTimeoutSeconds", v.DpdTimeoutSeconds)
	populate(objectMap, "egressBytesTransferred", v.EgressBytesTransferred)
	populate(objectMap, "egressNatRules", v.EgressNatRules)
	populate(objectMap, "enableBgp", v.EnableBgp)
	populate(objectMap, "expressRouteGatewayBypass", v.ExpressRouteGatewayBypass)
	populate(objectMap, "gatewayCustomBgpIpAddresses", v.GatewayCustomBgpIPAddresses)
	populate(objectMap, "ipsecPolicies", v.IPSecPolicies)
	populate(objectMap, "ingressBytesTransferred", v.IngressBytesTransferred)
	populate(objectMap, "ingressNatRules", v.IngressNatRules)
	populate(objectMap, "localNetworkGateway2", v.LocalNetworkGateway2)
	populate(objectMap, "peer", v.Peer)
	populate(objectMap, "provisioningState", v.ProvisioningState)
	populate(objectMap, "resourceGuid", v.ResourceGUID)
	populate(objectMap, "routingWeight", v.RoutingWeight)
	populate(objectMap, "sharedKey", v.SharedKey)
	populate(objectMap, "trafficSelectorPolicies", v.TrafficSelectorPolicies)
	populate(objectMap, "tunnelConnectionStatus", v.TunnelConnectionStatus)
	populate(objectMap, "useLocalAzureIpAddress", v.UseLocalAzureIPAddress)
	populate(objectMap, "usePolicyBasedTrafficSelectors", v.UsePolicyBasedTrafficSelectors)
	populate(objectMap, "virtualNetworkGateway1", v.VirtualNetworkGateway1)
	populate(objectMap, "virtualNetworkGateway2", v.VirtualNetworkGateway2)
	return json.Marshal(objectMap)
}

// MarshalJSON implements the json.Marshaller interface for type VirtualNetworkGatewayNatRuleProperties.
func (v VirtualNetworkGatewayNatRuleProperties) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "externalMappings", v.ExternalMappings)
	populate(objectMap, "ipConfigurationId", v.IPConfigurationID)
	populate(objectMap, "internalMappings", v.InternalMappings)
	populate(objectMap, "mode", v.Mode)
	populate(objectMap, "provisioningState", v.ProvisioningState)
	populate(objectMap, "type", v.Type)
	return json.Marshal(objectMap)
}

// MarshalJSON implements the json.Marshaller interface for type VirtualNetworkGatewayPropertiesFormat.
func (v VirtualNetworkGatewayPropertiesFormat) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "activeActive", v.Active)
	populate(objectMap, "bgpSettings", v.BgpSettings)
	populate(objectMap, "customRoutes", v.CustomRoutes)
	populate(objectMap, "disableIPSecReplayProtection", v.DisableIPSecReplayProtection)
	populate(objectMap, "enableBgp", v.EnableBgp)
	populate(objectMap, "enableBgpRouteTranslationForNat", v.EnableBgpRouteTranslationForNat)
	populate(objectMap, "enableDnsForwarding", v.EnableDNSForwarding)
	populate(objectMap, "enablePrivateIpAddress", v.EnablePrivateIPAddress)
	populate(objectMap, "gatewayDefaultSite", v.GatewayDefaultSite)
	populate(objectMap, "gatewayType", v.GatewayType)
	populate(objectMap, "ipConfigurations", v.IPConfigurations)
	populate(objectMap, "inboundDnsForwardingEndpoint", v.InboundDNSForwardingEndpoint)
	populate(objectMap, "natRules", v.NatRules)
	populate(objectMap, "provisioningState", v.ProvisioningState)
	populate(objectMap, "resourceGuid", v.ResourceGUID)
	populate(objectMap, "sku", v.SKU)
	populate(objectMap, "vNetExtendedLocationResourceId", v.VNetExtendedLocationResourceID)
	populate(objectMap, "vpnClientConfiguration", v.VPNClientConfiguration)
	populate(objectMap, "vpnGatewayGeneration", v.VPNGatewayGeneration)
	populate(objectMap, "vpnType", v.VPNType)
	return json.Marshal(objectMap)
}

// MarshalJSON implements the json.Marshaller interface for type VirtualNetworkPropertiesFormat.
func (v VirtualNetworkPropertiesFormat) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "addressSpace", v.AddressSpace)
	populate(objectMap, "bgpCommunities", v.BgpCommunities)
	populate(objectMap, "ddosProtectionPlan", v.DdosProtectionPlan)
	populate(objectMap, "dhcpOptions", v.DhcpOptions)
	populate(objectMap, "enableDdosProtection", v.EnableDdosProtection)
	populate(objectMap, "enableVmProtection", v.EnableVMProtection)
	populate(objectMap, "encryption", v.Encryption)
	populate(objectMap, "flowTimeoutInMinutes", v.FlowTimeoutInMinutes)
	populate(objectMap, "ipAllocations", v.IPAllocations)
	populate(objectMap, "provisioningState", v.ProvisioningState)
	populate(objectMap, "resourceGuid", v.ResourceGUID)
	populate(objectMap, "subnets", v.Subnets)
	populate(objectMap, "virtualNetworkPeerings", v.VirtualNetworkPeerings)
	return json.Marshal(objectMap)
}

// MarshalJSON implements the json.Marshaller interface for type VirtualNetworkTap.
func (v VirtualNetworkTap) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "etag", v.Etag)
	populate(objectMap, "id", v.ID)
	populate(objectMap, "location", v.Location)
	populate(objectMap, "name", v.Name)
	populate(objectMap, "properties", v.Properties)
	populate(objectMap, "tags", v.Tags)
	populate(objectMap, "type", v.Type)
	return json.Marshal(objectMap)
}

// MarshalJSON implements the json.Marshaller interface for type VirtualNetworkTapPropertiesFormat.
func (v VirtualNetworkTapPropertiesFormat) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "destinationLoadBalancerFrontEndIPConfiguration", v.DestinationLoadBalancerFrontEndIPConfiguration)
	populate(objectMap, "destinationNetworkInterfaceIPConfiguration", v.DestinationNetworkInterfaceIPConfiguration)
	populate(objectMap, "destinationPort", v.DestinationPort)
	populate(objectMap, "networkInterfaceTapConfigurations", v.NetworkInterfaceTapConfigurations)
	populate(objectMap, "provisioningState", v.ProvisioningState)
	populate(objectMap, "resourceGuid", v.ResourceGUID)
	return json.Marshal(objectMap)
}

// MarshalJSON implements the json.Marshaller interface for type VirtualRouter.
func (v VirtualRouter) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "etag", v.Etag)
	populate(objectMap, "id", v.ID)
	populate(objectMap, "location", v.Location)
	populate(objectMap, "name", v.Name)
	populate(objectMap, "properties", v.Properties)
	populate(objectMap, "tags", v.Tags)
	populate(objectMap, "type", v.Type)
	return json.Marshal(objectMap)
}

// MarshalJSON implements the json.Marshaller interface for type VirtualRouterPropertiesFormat.
func (v VirtualRouterPropertiesFormat) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "hostedGateway", v.HostedGateway)
	populate(objectMap, "hostedSubnet", v.HostedSubnet)
	populate(objectMap, "peerings", v.Peerings)
	populate(objectMap, "provisioningState", v.ProvisioningState)
	populate(objectMap, "virtualRouterAsn", v.VirtualRouterAsn)
	populate(objectMap, "virtualRouterIps", v.VirtualRouterIPs)
	return json.Marshal(objectMap)
}

// MarshalJSON implements the json.Marshaller interface for type VirtualWAN.
func (v VirtualWAN) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "etag", v.Etag)
	populate(objectMap, "id", v.ID)
	populate(objectMap, "location", v.Location)
	populate(objectMap, "name", v.Name)
	populate(objectMap, "properties", v.Properties)
	populate(objectMap, "tags", v.Tags)
	populate(objectMap, "type", v.Type)
	return json.Marshal(objectMap)
}

// MarshalJSON implements the json.Marshaller interface for type VirtualWanProperties.
func (v VirtualWanProperties) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "allowBranchToBranchTraffic", v.AllowBranchToBranchTraffic)
	populate(objectMap, "allowVnetToVnetTraffic", v.AllowVnetToVnetTraffic)
	populate(objectMap, "disableVpnEncryption", v.DisableVPNEncryption)
	populate(objectMap, "office365LocalBreakoutCategory", v.Office365LocalBreakoutCategory)
	populate(objectMap, "provisioningState", v.ProvisioningState)
	populate(objectMap, "type", v.Type)
	populate(objectMap, "vpnSites", v.VPNSites)
	populate(objectMap, "virtualHubs", v.VirtualHubs)
	return json.Marshal(objectMap)
}

// MarshalJSON implements the json.Marshaller interface for type VnetRoute.
func (v VnetRoute) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "bgpConnections", v.BgpConnections)
	populate(objectMap, "staticRoutes", v.StaticRoutes)
	return json.Marshal(objectMap)
}

// MarshalJSON implements the json.Marshaller interface for type Watcher.
func (w Watcher) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "etag", w.Etag)
	populate(objectMap, "id", w.ID)
	populate(objectMap, "location", w.Location)
	populate(objectMap, "name", w.Name)
	populate(objectMap, "properties", w.Properties)
	populate(objectMap, "tags", w.Tags)
	populate(objectMap, "type", w.Type)
	return json.Marshal(objectMap)
}

// MarshalJSON implements the json.Marshaller interface for type WebApplicationFirewallCustomRule.
func (w WebApplicationFirewallCustomRule) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "action", w.Action)
	populate(objectMap, "etag", w.Etag)
	populate(objectMap, "matchConditions", w.MatchConditions)
	populate(objectMap, "name", w.Name)
	populate(objectMap, "priority", w.Priority)
	populate(objectMap, "ruleType", w.RuleType)
	return json.Marshal(objectMap)
}

// MarshalJSON implements the json.Marshaller interface for type WebApplicationFirewallPolicy.
func (w WebApplicationFirewallPolicy) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "etag", w.Etag)
	populate(objectMap, "id", w.ID)
	populate(objectMap, "location", w.Location)
	populate(objectMap, "name", w.Name)
	populate(objectMap, "properties", w.Properties)
	populate(objectMap, "tags", w.Tags)
	populate(objectMap, "type", w.Type)
	return json.Marshal(objectMap)
}

// MarshalJSON implements the json.Marshaller interface for type WebApplicationFirewallPolicyPropertiesFormat.
func (w WebApplicationFirewallPolicyPropertiesFormat) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "applicationGateways", w.ApplicationGateways)
	populate(objectMap, "customRules", w.CustomRules)
	populate(objectMap, "httpListeners", w.HTTPListeners)
	populate(objectMap, "managedRules", w.ManagedRules)
	populate(objectMap, "pathBasedRules", w.PathBasedRules)
	populate(objectMap, "policySettings", w.PolicySettings)
	populate(objectMap, "provisioningState", w.ProvisioningState)
	populate(objectMap, "resourceState", w.ResourceState)
	return json.Marshal(objectMap)
}

func populate(m map[string]interface{}, k string, v interface{}) {
	if v == nil {
		return
	} else if azcore.IsNullValue(v) {
		m[k] = nil
	} else if !reflect.ValueOf(v).IsNil() {
		m[k] = v
	}
}

func unpopulate(data json.RawMessage, fn string, v interface{}) error {
	if data == nil {
		return nil
	}
	if err := json.Unmarshal(data, v); err != nil {
		return fmt.Errorf("struct field %s: %v", fn, err)
	}
	return nil
}
