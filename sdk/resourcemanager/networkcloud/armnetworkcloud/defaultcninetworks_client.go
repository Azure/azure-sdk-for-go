//go:build go1.18
// +build go1.18

// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.
// DO NOT EDIT.

package armnetworkcloud

import (
	"context"
	"errors"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/arm"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/policy"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/runtime"
	"net/http"
	"net/url"
	"strings"
)

// DefaultCniNetworksClient contains the methods for the DefaultCniNetworks group.
// Don't use this type directly, use NewDefaultCniNetworksClient() instead.
type DefaultCniNetworksClient struct {
	internal       *arm.Client
	subscriptionID string
}

// NewDefaultCniNetworksClient creates a new instance of DefaultCniNetworksClient with the specified values.
//   - subscriptionID - The ID of the target subscription.
//   - credential - used to authorize requests. Usually a credential from azidentity.
//   - options - pass nil to accept the default values.
func NewDefaultCniNetworksClient(subscriptionID string, credential azcore.TokenCredential, options *arm.ClientOptions) (*DefaultCniNetworksClient, error) {
	cl, err := arm.NewClient(moduleName+".DefaultCniNetworksClient", moduleVersion, credential, options)
	if err != nil {
		return nil, err
	}
	client := &DefaultCniNetworksClient{
		subscriptionID: subscriptionID,
		internal:       cl,
	}
	return client, nil
}

// BeginCreateOrUpdate - Create a new default CNI network or update the properties of the existing default CNI network.
// If the operation fails it returns an *azcore.ResponseError type.
//
// Generated from API version 2022-12-12-preview
//   - resourceGroupName - The name of the resource group. The name is case insensitive.
//   - defaultCniNetworkName - The name of the default CNI network.
//   - defaultCniNetworkParameters - The request body.
//   - options - DefaultCniNetworksClientBeginCreateOrUpdateOptions contains the optional parameters for the DefaultCniNetworksClient.BeginCreateOrUpdate
//     method.
func (client *DefaultCniNetworksClient) BeginCreateOrUpdate(ctx context.Context, resourceGroupName string, defaultCniNetworkName string, defaultCniNetworkParameters DefaultCniNetwork, options *DefaultCniNetworksClientBeginCreateOrUpdateOptions) (*runtime.Poller[DefaultCniNetworksClientCreateOrUpdateResponse], error) {
	if options == nil || options.ResumeToken == "" {
		resp, err := client.createOrUpdate(ctx, resourceGroupName, defaultCniNetworkName, defaultCniNetworkParameters, options)
		if err != nil {
			return nil, err
		}
		return runtime.NewPoller(resp, client.internal.Pipeline(), &runtime.NewPollerOptions[DefaultCniNetworksClientCreateOrUpdateResponse]{
			FinalStateVia: runtime.FinalStateViaAzureAsyncOp,
		})
	} else {
		return runtime.NewPollerFromResumeToken[DefaultCniNetworksClientCreateOrUpdateResponse](options.ResumeToken, client.internal.Pipeline(), nil)
	}
}

// CreateOrUpdate - Create a new default CNI network or update the properties of the existing default CNI network.
// If the operation fails it returns an *azcore.ResponseError type.
//
// Generated from API version 2022-12-12-preview
func (client *DefaultCniNetworksClient) createOrUpdate(ctx context.Context, resourceGroupName string, defaultCniNetworkName string, defaultCniNetworkParameters DefaultCniNetwork, options *DefaultCniNetworksClientBeginCreateOrUpdateOptions) (*http.Response, error) {
	req, err := client.createOrUpdateCreateRequest(ctx, resourceGroupName, defaultCniNetworkName, defaultCniNetworkParameters, options)
	if err != nil {
		return nil, err
	}
	resp, err := client.internal.Pipeline().Do(req)
	if err != nil {
		return nil, err
	}
	if !runtime.HasStatusCode(resp, http.StatusOK, http.StatusCreated) {
		return nil, runtime.NewResponseError(resp)
	}
	return resp, nil
}

// createOrUpdateCreateRequest creates the CreateOrUpdate request.
func (client *DefaultCniNetworksClient) createOrUpdateCreateRequest(ctx context.Context, resourceGroupName string, defaultCniNetworkName string, defaultCniNetworkParameters DefaultCniNetwork, options *DefaultCniNetworksClientBeginCreateOrUpdateOptions) (*policy.Request, error) {
	urlPath := "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.NetworkCloud/defaultCniNetworks/{defaultCniNetworkName}"
	if client.subscriptionID == "" {
		return nil, errors.New("parameter client.subscriptionID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{subscriptionId}", url.PathEscape(client.subscriptionID))
	if resourceGroupName == "" {
		return nil, errors.New("parameter resourceGroupName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{resourceGroupName}", url.PathEscape(resourceGroupName))
	if defaultCniNetworkName == "" {
		return nil, errors.New("parameter defaultCniNetworkName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{defaultCniNetworkName}", url.PathEscape(defaultCniNetworkName))
	req, err := runtime.NewRequest(ctx, http.MethodPut, runtime.JoinPaths(client.internal.Endpoint(), urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("api-version", "2022-12-12-preview")
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header["Accept"] = []string{"application/json"}
	return req, runtime.MarshalAsJSON(req, defaultCniNetworkParameters)
}

// BeginDelete - Delete the provided default CNI network.
// If the operation fails it returns an *azcore.ResponseError type.
//
// Generated from API version 2022-12-12-preview
//   - resourceGroupName - The name of the resource group. The name is case insensitive.
//   - defaultCniNetworkName - The name of the default CNI network.
//   - options - DefaultCniNetworksClientBeginDeleteOptions contains the optional parameters for the DefaultCniNetworksClient.BeginDelete
//     method.
func (client *DefaultCniNetworksClient) BeginDelete(ctx context.Context, resourceGroupName string, defaultCniNetworkName string, options *DefaultCniNetworksClientBeginDeleteOptions) (*runtime.Poller[DefaultCniNetworksClientDeleteResponse], error) {
	if options == nil || options.ResumeToken == "" {
		resp, err := client.deleteOperation(ctx, resourceGroupName, defaultCniNetworkName, options)
		if err != nil {
			return nil, err
		}
		return runtime.NewPoller(resp, client.internal.Pipeline(), &runtime.NewPollerOptions[DefaultCniNetworksClientDeleteResponse]{
			FinalStateVia: runtime.FinalStateViaLocation,
		})
	} else {
		return runtime.NewPollerFromResumeToken[DefaultCniNetworksClientDeleteResponse](options.ResumeToken, client.internal.Pipeline(), nil)
	}
}

// Delete - Delete the provided default CNI network.
// If the operation fails it returns an *azcore.ResponseError type.
//
// Generated from API version 2022-12-12-preview
func (client *DefaultCniNetworksClient) deleteOperation(ctx context.Context, resourceGroupName string, defaultCniNetworkName string, options *DefaultCniNetworksClientBeginDeleteOptions) (*http.Response, error) {
	req, err := client.deleteCreateRequest(ctx, resourceGroupName, defaultCniNetworkName, options)
	if err != nil {
		return nil, err
	}
	resp, err := client.internal.Pipeline().Do(req)
	if err != nil {
		return nil, err
	}
	if !runtime.HasStatusCode(resp, http.StatusOK, http.StatusAccepted, http.StatusNoContent) {
		return nil, runtime.NewResponseError(resp)
	}
	return resp, nil
}

// deleteCreateRequest creates the Delete request.
func (client *DefaultCniNetworksClient) deleteCreateRequest(ctx context.Context, resourceGroupName string, defaultCniNetworkName string, options *DefaultCniNetworksClientBeginDeleteOptions) (*policy.Request, error) {
	urlPath := "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.NetworkCloud/defaultCniNetworks/{defaultCniNetworkName}"
	if client.subscriptionID == "" {
		return nil, errors.New("parameter client.subscriptionID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{subscriptionId}", url.PathEscape(client.subscriptionID))
	if resourceGroupName == "" {
		return nil, errors.New("parameter resourceGroupName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{resourceGroupName}", url.PathEscape(resourceGroupName))
	if defaultCniNetworkName == "" {
		return nil, errors.New("parameter defaultCniNetworkName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{defaultCniNetworkName}", url.PathEscape(defaultCniNetworkName))
	req, err := runtime.NewRequest(ctx, http.MethodDelete, runtime.JoinPaths(client.internal.Endpoint(), urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("api-version", "2022-12-12-preview")
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header["Accept"] = []string{"application/json"}
	return req, nil
}

// Get - Get properties of the provided default CNI network.
// If the operation fails it returns an *azcore.ResponseError type.
//
// Generated from API version 2022-12-12-preview
//   - resourceGroupName - The name of the resource group. The name is case insensitive.
//   - defaultCniNetworkName - The name of the default CNI network.
//   - options - DefaultCniNetworksClientGetOptions contains the optional parameters for the DefaultCniNetworksClient.Get method.
func (client *DefaultCniNetworksClient) Get(ctx context.Context, resourceGroupName string, defaultCniNetworkName string, options *DefaultCniNetworksClientGetOptions) (DefaultCniNetworksClientGetResponse, error) {
	req, err := client.getCreateRequest(ctx, resourceGroupName, defaultCniNetworkName, options)
	if err != nil {
		return DefaultCniNetworksClientGetResponse{}, err
	}
	resp, err := client.internal.Pipeline().Do(req)
	if err != nil {
		return DefaultCniNetworksClientGetResponse{}, err
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {
		return DefaultCniNetworksClientGetResponse{}, runtime.NewResponseError(resp)
	}
	return client.getHandleResponse(resp)
}

// getCreateRequest creates the Get request.
func (client *DefaultCniNetworksClient) getCreateRequest(ctx context.Context, resourceGroupName string, defaultCniNetworkName string, options *DefaultCniNetworksClientGetOptions) (*policy.Request, error) {
	urlPath := "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.NetworkCloud/defaultCniNetworks/{defaultCniNetworkName}"
	if client.subscriptionID == "" {
		return nil, errors.New("parameter client.subscriptionID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{subscriptionId}", url.PathEscape(client.subscriptionID))
	if resourceGroupName == "" {
		return nil, errors.New("parameter resourceGroupName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{resourceGroupName}", url.PathEscape(resourceGroupName))
	if defaultCniNetworkName == "" {
		return nil, errors.New("parameter defaultCniNetworkName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{defaultCniNetworkName}", url.PathEscape(defaultCniNetworkName))
	req, err := runtime.NewRequest(ctx, http.MethodGet, runtime.JoinPaths(client.internal.Endpoint(), urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("api-version", "2022-12-12-preview")
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header["Accept"] = []string{"application/json"}
	return req, nil
}

// getHandleResponse handles the Get response.
func (client *DefaultCniNetworksClient) getHandleResponse(resp *http.Response) (DefaultCniNetworksClientGetResponse, error) {
	result := DefaultCniNetworksClientGetResponse{}
	if err := runtime.UnmarshalAsJSON(resp, &result.DefaultCniNetwork); err != nil {
		return DefaultCniNetworksClientGetResponse{}, err
	}
	return result, nil
}

// NewListByResourceGroupPager - Get a list of default CNI networks in the provided resource group.
//
// Generated from API version 2022-12-12-preview
//   - resourceGroupName - The name of the resource group. The name is case insensitive.
//   - options - DefaultCniNetworksClientListByResourceGroupOptions contains the optional parameters for the DefaultCniNetworksClient.NewListByResourceGroupPager
//     method.
func (client *DefaultCniNetworksClient) NewListByResourceGroupPager(resourceGroupName string, options *DefaultCniNetworksClientListByResourceGroupOptions) *runtime.Pager[DefaultCniNetworksClientListByResourceGroupResponse] {
	return runtime.NewPager(runtime.PagingHandler[DefaultCniNetworksClientListByResourceGroupResponse]{
		More: func(page DefaultCniNetworksClientListByResourceGroupResponse) bool {
			return page.NextLink != nil && len(*page.NextLink) > 0
		},
		Fetcher: func(ctx context.Context, page *DefaultCniNetworksClientListByResourceGroupResponse) (DefaultCniNetworksClientListByResourceGroupResponse, error) {
			var req *policy.Request
			var err error
			if page == nil {
				req, err = client.listByResourceGroupCreateRequest(ctx, resourceGroupName, options)
			} else {
				req, err = runtime.NewRequest(ctx, http.MethodGet, *page.NextLink)
			}
			if err != nil {
				return DefaultCniNetworksClientListByResourceGroupResponse{}, err
			}
			resp, err := client.internal.Pipeline().Do(req)
			if err != nil {
				return DefaultCniNetworksClientListByResourceGroupResponse{}, err
			}
			if !runtime.HasStatusCode(resp, http.StatusOK) {
				return DefaultCniNetworksClientListByResourceGroupResponse{}, runtime.NewResponseError(resp)
			}
			return client.listByResourceGroupHandleResponse(resp)
		},
	})
}

// listByResourceGroupCreateRequest creates the ListByResourceGroup request.
func (client *DefaultCniNetworksClient) listByResourceGroupCreateRequest(ctx context.Context, resourceGroupName string, options *DefaultCniNetworksClientListByResourceGroupOptions) (*policy.Request, error) {
	urlPath := "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.NetworkCloud/defaultCniNetworks"
	if client.subscriptionID == "" {
		return nil, errors.New("parameter client.subscriptionID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{subscriptionId}", url.PathEscape(client.subscriptionID))
	if resourceGroupName == "" {
		return nil, errors.New("parameter resourceGroupName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{resourceGroupName}", url.PathEscape(resourceGroupName))
	req, err := runtime.NewRequest(ctx, http.MethodGet, runtime.JoinPaths(client.internal.Endpoint(), urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("api-version", "2022-12-12-preview")
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header["Accept"] = []string{"application/json"}
	return req, nil
}

// listByResourceGroupHandleResponse handles the ListByResourceGroup response.
func (client *DefaultCniNetworksClient) listByResourceGroupHandleResponse(resp *http.Response) (DefaultCniNetworksClientListByResourceGroupResponse, error) {
	result := DefaultCniNetworksClientListByResourceGroupResponse{}
	if err := runtime.UnmarshalAsJSON(resp, &result.DefaultCniNetworkList); err != nil {
		return DefaultCniNetworksClientListByResourceGroupResponse{}, err
	}
	return result, nil
}

// NewListBySubscriptionPager - Get a list of default CNI networks in the provided subscription.
//
// Generated from API version 2022-12-12-preview
//   - options - DefaultCniNetworksClientListBySubscriptionOptions contains the optional parameters for the DefaultCniNetworksClient.NewListBySubscriptionPager
//     method.
func (client *DefaultCniNetworksClient) NewListBySubscriptionPager(options *DefaultCniNetworksClientListBySubscriptionOptions) *runtime.Pager[DefaultCniNetworksClientListBySubscriptionResponse] {
	return runtime.NewPager(runtime.PagingHandler[DefaultCniNetworksClientListBySubscriptionResponse]{
		More: func(page DefaultCniNetworksClientListBySubscriptionResponse) bool {
			return page.NextLink != nil && len(*page.NextLink) > 0
		},
		Fetcher: func(ctx context.Context, page *DefaultCniNetworksClientListBySubscriptionResponse) (DefaultCniNetworksClientListBySubscriptionResponse, error) {
			var req *policy.Request
			var err error
			if page == nil {
				req, err = client.listBySubscriptionCreateRequest(ctx, options)
			} else {
				req, err = runtime.NewRequest(ctx, http.MethodGet, *page.NextLink)
			}
			if err != nil {
				return DefaultCniNetworksClientListBySubscriptionResponse{}, err
			}
			resp, err := client.internal.Pipeline().Do(req)
			if err != nil {
				return DefaultCniNetworksClientListBySubscriptionResponse{}, err
			}
			if !runtime.HasStatusCode(resp, http.StatusOK) {
				return DefaultCniNetworksClientListBySubscriptionResponse{}, runtime.NewResponseError(resp)
			}
			return client.listBySubscriptionHandleResponse(resp)
		},
	})
}

// listBySubscriptionCreateRequest creates the ListBySubscription request.
func (client *DefaultCniNetworksClient) listBySubscriptionCreateRequest(ctx context.Context, options *DefaultCniNetworksClientListBySubscriptionOptions) (*policy.Request, error) {
	urlPath := "/subscriptions/{subscriptionId}/providers/Microsoft.NetworkCloud/defaultCniNetworks"
	if client.subscriptionID == "" {
		return nil, errors.New("parameter client.subscriptionID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{subscriptionId}", url.PathEscape(client.subscriptionID))
	req, err := runtime.NewRequest(ctx, http.MethodGet, runtime.JoinPaths(client.internal.Endpoint(), urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("api-version", "2022-12-12-preview")
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header["Accept"] = []string{"application/json"}
	return req, nil
}

// listBySubscriptionHandleResponse handles the ListBySubscription response.
func (client *DefaultCniNetworksClient) listBySubscriptionHandleResponse(resp *http.Response) (DefaultCniNetworksClientListBySubscriptionResponse, error) {
	result := DefaultCniNetworksClientListBySubscriptionResponse{}
	if err := runtime.UnmarshalAsJSON(resp, &result.DefaultCniNetworkList); err != nil {
		return DefaultCniNetworksClientListBySubscriptionResponse{}, err
	}
	return result, nil
}

// Update - Update tags associated with the provided default CNI network.
// If the operation fails it returns an *azcore.ResponseError type.
//
// Generated from API version 2022-12-12-preview
//   - resourceGroupName - The name of the resource group. The name is case insensitive.
//   - defaultCniNetworkName - The name of the default CNI network.
//   - defaultCniNetworkUpdateParameters - The request body.
//   - options - DefaultCniNetworksClientUpdateOptions contains the optional parameters for the DefaultCniNetworksClient.Update
//     method.
func (client *DefaultCniNetworksClient) Update(ctx context.Context, resourceGroupName string, defaultCniNetworkName string, defaultCniNetworkUpdateParameters DefaultCniNetworkPatchParameters, options *DefaultCniNetworksClientUpdateOptions) (DefaultCniNetworksClientUpdateResponse, error) {
	req, err := client.updateCreateRequest(ctx, resourceGroupName, defaultCniNetworkName, defaultCniNetworkUpdateParameters, options)
	if err != nil {
		return DefaultCniNetworksClientUpdateResponse{}, err
	}
	resp, err := client.internal.Pipeline().Do(req)
	if err != nil {
		return DefaultCniNetworksClientUpdateResponse{}, err
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {
		return DefaultCniNetworksClientUpdateResponse{}, runtime.NewResponseError(resp)
	}
	return client.updateHandleResponse(resp)
}

// updateCreateRequest creates the Update request.
func (client *DefaultCniNetworksClient) updateCreateRequest(ctx context.Context, resourceGroupName string, defaultCniNetworkName string, defaultCniNetworkUpdateParameters DefaultCniNetworkPatchParameters, options *DefaultCniNetworksClientUpdateOptions) (*policy.Request, error) {
	urlPath := "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.NetworkCloud/defaultCniNetworks/{defaultCniNetworkName}"
	if client.subscriptionID == "" {
		return nil, errors.New("parameter client.subscriptionID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{subscriptionId}", url.PathEscape(client.subscriptionID))
	if resourceGroupName == "" {
		return nil, errors.New("parameter resourceGroupName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{resourceGroupName}", url.PathEscape(resourceGroupName))
	if defaultCniNetworkName == "" {
		return nil, errors.New("parameter defaultCniNetworkName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{defaultCniNetworkName}", url.PathEscape(defaultCniNetworkName))
	req, err := runtime.NewRequest(ctx, http.MethodPatch, runtime.JoinPaths(client.internal.Endpoint(), urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("api-version", "2022-12-12-preview")
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header["Accept"] = []string{"application/json"}
	return req, runtime.MarshalAsJSON(req, defaultCniNetworkUpdateParameters)
}

// updateHandleResponse handles the Update response.
func (client *DefaultCniNetworksClient) updateHandleResponse(resp *http.Response) (DefaultCniNetworksClientUpdateResponse, error) {
	result := DefaultCniNetworksClientUpdateResponse{}
	if err := runtime.UnmarshalAsJSON(resp, &result.DefaultCniNetwork); err != nil {
		return DefaultCniNetworksClientUpdateResponse{}, err
	}
	return result, nil
}
