//go:build go1.18
// +build go1.18

// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.
// DO NOT EDIT.

package armnetworkcloud

import (
	"context"
	"errors"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/arm"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/policy"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/runtime"
	"net/http"
	"net/url"
	"strings"
)

// HybridAksClustersClient contains the methods for the HybridAksClusters group.
// Don't use this type directly, use NewHybridAksClustersClient() instead.
type HybridAksClustersClient struct {
	internal       *arm.Client
	subscriptionID string
}

// NewHybridAksClustersClient creates a new instance of HybridAksClustersClient with the specified values.
//   - subscriptionID - The ID of the target subscription.
//   - credential - used to authorize requests. Usually a credential from azidentity.
//   - options - pass nil to accept the default values.
func NewHybridAksClustersClient(subscriptionID string, credential azcore.TokenCredential, options *arm.ClientOptions) (*HybridAksClustersClient, error) {
	cl, err := arm.NewClient(moduleName+".HybridAksClustersClient", moduleVersion, credential, options)
	if err != nil {
		return nil, err
	}
	client := &HybridAksClustersClient{
		subscriptionID: subscriptionID,
		internal:       cl,
	}
	return client, nil
}

// BeginCreateOrUpdate - Create new additional details related to the Hybrid AKS provisioned cluster or update the existing
// one. All customer initiated requests will be rejected as the life cycle of this resource is managed
// by the system.
// If the operation fails it returns an *azcore.ResponseError type.
//
// Generated from API version 2022-12-12-preview
//   - resourceGroupName - The name of the resource group. The name is case insensitive.
//   - hybridAksClusterName - The name of the Hybrid AKS cluster.
//   - hybridAksClusterParameters - The request body.
//   - options - HybridAksClustersClientBeginCreateOrUpdateOptions contains the optional parameters for the HybridAksClustersClient.BeginCreateOrUpdate
//     method.
func (client *HybridAksClustersClient) BeginCreateOrUpdate(ctx context.Context, resourceGroupName string, hybridAksClusterName string, hybridAksClusterParameters HybridAksCluster, options *HybridAksClustersClientBeginCreateOrUpdateOptions) (*runtime.Poller[HybridAksClustersClientCreateOrUpdateResponse], error) {
	if options == nil || options.ResumeToken == "" {
		resp, err := client.createOrUpdate(ctx, resourceGroupName, hybridAksClusterName, hybridAksClusterParameters, options)
		if err != nil {
			return nil, err
		}
		return runtime.NewPoller(resp, client.internal.Pipeline(), &runtime.NewPollerOptions[HybridAksClustersClientCreateOrUpdateResponse]{
			FinalStateVia: runtime.FinalStateViaAzureAsyncOp,
		})
	} else {
		return runtime.NewPollerFromResumeToken[HybridAksClustersClientCreateOrUpdateResponse](options.ResumeToken, client.internal.Pipeline(), nil)
	}
}

// CreateOrUpdate - Create new additional details related to the Hybrid AKS provisioned cluster or update the existing one.
// All customer initiated requests will be rejected as the life cycle of this resource is managed
// by the system.
// If the operation fails it returns an *azcore.ResponseError type.
//
// Generated from API version 2022-12-12-preview
func (client *HybridAksClustersClient) createOrUpdate(ctx context.Context, resourceGroupName string, hybridAksClusterName string, hybridAksClusterParameters HybridAksCluster, options *HybridAksClustersClientBeginCreateOrUpdateOptions) (*http.Response, error) {
	req, err := client.createOrUpdateCreateRequest(ctx, resourceGroupName, hybridAksClusterName, hybridAksClusterParameters, options)
	if err != nil {
		return nil, err
	}
	resp, err := client.internal.Pipeline().Do(req)
	if err != nil {
		return nil, err
	}
	if !runtime.HasStatusCode(resp, http.StatusOK, http.StatusCreated) {
		return nil, runtime.NewResponseError(resp)
	}
	return resp, nil
}

// createOrUpdateCreateRequest creates the CreateOrUpdate request.
func (client *HybridAksClustersClient) createOrUpdateCreateRequest(ctx context.Context, resourceGroupName string, hybridAksClusterName string, hybridAksClusterParameters HybridAksCluster, options *HybridAksClustersClientBeginCreateOrUpdateOptions) (*policy.Request, error) {
	urlPath := "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.NetworkCloud/hybridAksClusters/{hybridAksClusterName}"
	if client.subscriptionID == "" {
		return nil, errors.New("parameter client.subscriptionID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{subscriptionId}", url.PathEscape(client.subscriptionID))
	if resourceGroupName == "" {
		return nil, errors.New("parameter resourceGroupName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{resourceGroupName}", url.PathEscape(resourceGroupName))
	if hybridAksClusterName == "" {
		return nil, errors.New("parameter hybridAksClusterName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{hybridAksClusterName}", url.PathEscape(hybridAksClusterName))
	req, err := runtime.NewRequest(ctx, http.MethodPut, runtime.JoinPaths(client.internal.Endpoint(), urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("api-version", "2022-12-12-preview")
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header["Accept"] = []string{"application/json"}
	return req, runtime.MarshalAsJSON(req, hybridAksClusterParameters)
}

// BeginDelete - Delete the additional details related to the provided Hybrid AKS provisioned cluster. All customer initiated
// requests will be rejected as the life cycle of this resource is managed by the system.
// If the operation fails it returns an *azcore.ResponseError type.
//
// Generated from API version 2022-12-12-preview
//   - resourceGroupName - The name of the resource group. The name is case insensitive.
//   - hybridAksClusterName - The name of the Hybrid AKS cluster.
//   - options - HybridAksClustersClientBeginDeleteOptions contains the optional parameters for the HybridAksClustersClient.BeginDelete
//     method.
func (client *HybridAksClustersClient) BeginDelete(ctx context.Context, resourceGroupName string, hybridAksClusterName string, options *HybridAksClustersClientBeginDeleteOptions) (*runtime.Poller[HybridAksClustersClientDeleteResponse], error) {
	if options == nil || options.ResumeToken == "" {
		resp, err := client.deleteOperation(ctx, resourceGroupName, hybridAksClusterName, options)
		if err != nil {
			return nil, err
		}
		return runtime.NewPoller(resp, client.internal.Pipeline(), &runtime.NewPollerOptions[HybridAksClustersClientDeleteResponse]{
			FinalStateVia: runtime.FinalStateViaLocation,
		})
	} else {
		return runtime.NewPollerFromResumeToken[HybridAksClustersClientDeleteResponse](options.ResumeToken, client.internal.Pipeline(), nil)
	}
}

// Delete - Delete the additional details related to the provided Hybrid AKS provisioned cluster. All customer initiated requests
// will be rejected as the life cycle of this resource is managed by the system.
// If the operation fails it returns an *azcore.ResponseError type.
//
// Generated from API version 2022-12-12-preview
func (client *HybridAksClustersClient) deleteOperation(ctx context.Context, resourceGroupName string, hybridAksClusterName string, options *HybridAksClustersClientBeginDeleteOptions) (*http.Response, error) {
	req, err := client.deleteCreateRequest(ctx, resourceGroupName, hybridAksClusterName, options)
	if err != nil {
		return nil, err
	}
	resp, err := client.internal.Pipeline().Do(req)
	if err != nil {
		return nil, err
	}
	if !runtime.HasStatusCode(resp, http.StatusOK, http.StatusAccepted, http.StatusNoContent) {
		return nil, runtime.NewResponseError(resp)
	}
	return resp, nil
}

// deleteCreateRequest creates the Delete request.
func (client *HybridAksClustersClient) deleteCreateRequest(ctx context.Context, resourceGroupName string, hybridAksClusterName string, options *HybridAksClustersClientBeginDeleteOptions) (*policy.Request, error) {
	urlPath := "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.NetworkCloud/hybridAksClusters/{hybridAksClusterName}"
	if client.subscriptionID == "" {
		return nil, errors.New("parameter client.subscriptionID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{subscriptionId}", url.PathEscape(client.subscriptionID))
	if resourceGroupName == "" {
		return nil, errors.New("parameter resourceGroupName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{resourceGroupName}", url.PathEscape(resourceGroupName))
	if hybridAksClusterName == "" {
		return nil, errors.New("parameter hybridAksClusterName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{hybridAksClusterName}", url.PathEscape(hybridAksClusterName))
	req, err := runtime.NewRequest(ctx, http.MethodDelete, runtime.JoinPaths(client.internal.Endpoint(), urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("api-version", "2022-12-12-preview")
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header["Accept"] = []string{"application/json"}
	return req, nil
}

// Get - Get the additional details related to the provided Hybrid AKS provisioned cluster.
// If the operation fails it returns an *azcore.ResponseError type.
//
// Generated from API version 2022-12-12-preview
//   - resourceGroupName - The name of the resource group. The name is case insensitive.
//   - hybridAksClusterName - The name of the Hybrid AKS cluster.
//   - options - HybridAksClustersClientGetOptions contains the optional parameters for the HybridAksClustersClient.Get method.
func (client *HybridAksClustersClient) Get(ctx context.Context, resourceGroupName string, hybridAksClusterName string, options *HybridAksClustersClientGetOptions) (HybridAksClustersClientGetResponse, error) {
	req, err := client.getCreateRequest(ctx, resourceGroupName, hybridAksClusterName, options)
	if err != nil {
		return HybridAksClustersClientGetResponse{}, err
	}
	resp, err := client.internal.Pipeline().Do(req)
	if err != nil {
		return HybridAksClustersClientGetResponse{}, err
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {
		return HybridAksClustersClientGetResponse{}, runtime.NewResponseError(resp)
	}
	return client.getHandleResponse(resp)
}

// getCreateRequest creates the Get request.
func (client *HybridAksClustersClient) getCreateRequest(ctx context.Context, resourceGroupName string, hybridAksClusterName string, options *HybridAksClustersClientGetOptions) (*policy.Request, error) {
	urlPath := "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.NetworkCloud/hybridAksClusters/{hybridAksClusterName}"
	if client.subscriptionID == "" {
		return nil, errors.New("parameter client.subscriptionID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{subscriptionId}", url.PathEscape(client.subscriptionID))
	if resourceGroupName == "" {
		return nil, errors.New("parameter resourceGroupName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{resourceGroupName}", url.PathEscape(resourceGroupName))
	if hybridAksClusterName == "" {
		return nil, errors.New("parameter hybridAksClusterName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{hybridAksClusterName}", url.PathEscape(hybridAksClusterName))
	req, err := runtime.NewRequest(ctx, http.MethodGet, runtime.JoinPaths(client.internal.Endpoint(), urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("api-version", "2022-12-12-preview")
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header["Accept"] = []string{"application/json"}
	return req, nil
}

// getHandleResponse handles the Get response.
func (client *HybridAksClustersClient) getHandleResponse(resp *http.Response) (HybridAksClustersClientGetResponse, error) {
	result := HybridAksClustersClientGetResponse{}
	if err := runtime.UnmarshalAsJSON(resp, &result.HybridAksCluster); err != nil {
		return HybridAksClustersClientGetResponse{}, err
	}
	return result, nil
}

// NewListByResourceGroupPager - Get a list of additional details for Hybrid AKS provisioned clusters in the provided resource
// group.
//
// Generated from API version 2022-12-12-preview
//   - resourceGroupName - The name of the resource group. The name is case insensitive.
//   - options - HybridAksClustersClientListByResourceGroupOptions contains the optional parameters for the HybridAksClustersClient.NewListByResourceGroupPager
//     method.
func (client *HybridAksClustersClient) NewListByResourceGroupPager(resourceGroupName string, options *HybridAksClustersClientListByResourceGroupOptions) *runtime.Pager[HybridAksClustersClientListByResourceGroupResponse] {
	return runtime.NewPager(runtime.PagingHandler[HybridAksClustersClientListByResourceGroupResponse]{
		More: func(page HybridAksClustersClientListByResourceGroupResponse) bool {
			return page.NextLink != nil && len(*page.NextLink) > 0
		},
		Fetcher: func(ctx context.Context, page *HybridAksClustersClientListByResourceGroupResponse) (HybridAksClustersClientListByResourceGroupResponse, error) {
			var req *policy.Request
			var err error
			if page == nil {
				req, err = client.listByResourceGroupCreateRequest(ctx, resourceGroupName, options)
			} else {
				req, err = runtime.NewRequest(ctx, http.MethodGet, *page.NextLink)
			}
			if err != nil {
				return HybridAksClustersClientListByResourceGroupResponse{}, err
			}
			resp, err := client.internal.Pipeline().Do(req)
			if err != nil {
				return HybridAksClustersClientListByResourceGroupResponse{}, err
			}
			if !runtime.HasStatusCode(resp, http.StatusOK) {
				return HybridAksClustersClientListByResourceGroupResponse{}, runtime.NewResponseError(resp)
			}
			return client.listByResourceGroupHandleResponse(resp)
		},
	})
}

// listByResourceGroupCreateRequest creates the ListByResourceGroup request.
func (client *HybridAksClustersClient) listByResourceGroupCreateRequest(ctx context.Context, resourceGroupName string, options *HybridAksClustersClientListByResourceGroupOptions) (*policy.Request, error) {
	urlPath := "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.NetworkCloud/hybridAksClusters"
	if client.subscriptionID == "" {
		return nil, errors.New("parameter client.subscriptionID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{subscriptionId}", url.PathEscape(client.subscriptionID))
	if resourceGroupName == "" {
		return nil, errors.New("parameter resourceGroupName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{resourceGroupName}", url.PathEscape(resourceGroupName))
	req, err := runtime.NewRequest(ctx, http.MethodGet, runtime.JoinPaths(client.internal.Endpoint(), urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("api-version", "2022-12-12-preview")
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header["Accept"] = []string{"application/json"}
	return req, nil
}

// listByResourceGroupHandleResponse handles the ListByResourceGroup response.
func (client *HybridAksClustersClient) listByResourceGroupHandleResponse(resp *http.Response) (HybridAksClustersClientListByResourceGroupResponse, error) {
	result := HybridAksClustersClientListByResourceGroupResponse{}
	if err := runtime.UnmarshalAsJSON(resp, &result.HybridAksClusterList); err != nil {
		return HybridAksClustersClientListByResourceGroupResponse{}, err
	}
	return result, nil
}

// NewListBySubscriptionPager - Get a list of additional details related to Hybrid AKS provisioned clusters in the provided
// subscription.
//
// Generated from API version 2022-12-12-preview
//   - options - HybridAksClustersClientListBySubscriptionOptions contains the optional parameters for the HybridAksClustersClient.NewListBySubscriptionPager
//     method.
func (client *HybridAksClustersClient) NewListBySubscriptionPager(options *HybridAksClustersClientListBySubscriptionOptions) *runtime.Pager[HybridAksClustersClientListBySubscriptionResponse] {
	return runtime.NewPager(runtime.PagingHandler[HybridAksClustersClientListBySubscriptionResponse]{
		More: func(page HybridAksClustersClientListBySubscriptionResponse) bool {
			return page.NextLink != nil && len(*page.NextLink) > 0
		},
		Fetcher: func(ctx context.Context, page *HybridAksClustersClientListBySubscriptionResponse) (HybridAksClustersClientListBySubscriptionResponse, error) {
			var req *policy.Request
			var err error
			if page == nil {
				req, err = client.listBySubscriptionCreateRequest(ctx, options)
			} else {
				req, err = runtime.NewRequest(ctx, http.MethodGet, *page.NextLink)
			}
			if err != nil {
				return HybridAksClustersClientListBySubscriptionResponse{}, err
			}
			resp, err := client.internal.Pipeline().Do(req)
			if err != nil {
				return HybridAksClustersClientListBySubscriptionResponse{}, err
			}
			if !runtime.HasStatusCode(resp, http.StatusOK) {
				return HybridAksClustersClientListBySubscriptionResponse{}, runtime.NewResponseError(resp)
			}
			return client.listBySubscriptionHandleResponse(resp)
		},
	})
}

// listBySubscriptionCreateRequest creates the ListBySubscription request.
func (client *HybridAksClustersClient) listBySubscriptionCreateRequest(ctx context.Context, options *HybridAksClustersClientListBySubscriptionOptions) (*policy.Request, error) {
	urlPath := "/subscriptions/{subscriptionId}/providers/Microsoft.NetworkCloud/hybridAksClusters"
	if client.subscriptionID == "" {
		return nil, errors.New("parameter client.subscriptionID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{subscriptionId}", url.PathEscape(client.subscriptionID))
	req, err := runtime.NewRequest(ctx, http.MethodGet, runtime.JoinPaths(client.internal.Endpoint(), urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("api-version", "2022-12-12-preview")
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header["Accept"] = []string{"application/json"}
	return req, nil
}

// listBySubscriptionHandleResponse handles the ListBySubscription response.
func (client *HybridAksClustersClient) listBySubscriptionHandleResponse(resp *http.Response) (HybridAksClustersClientListBySubscriptionResponse, error) {
	result := HybridAksClustersClientListBySubscriptionResponse{}
	if err := runtime.UnmarshalAsJSON(resp, &result.HybridAksClusterList); err != nil {
		return HybridAksClustersClientListBySubscriptionResponse{}, err
	}
	return result, nil
}

// BeginRestartNode - Restart a targeted node of a Hybrid AKS cluster.
// If the operation fails it returns an *azcore.ResponseError type.
//
// Generated from API version 2022-12-12-preview
//   - resourceGroupName - The name of the resource group. The name is case insensitive.
//   - hybridAksClusterName - The name of the Hybrid AKS cluster.
//   - hybridAksClusterRestartNodeParameters - The request body.
//   - options - HybridAksClustersClientBeginRestartNodeOptions contains the optional parameters for the HybridAksClustersClient.BeginRestartNode
//     method.
func (client *HybridAksClustersClient) BeginRestartNode(ctx context.Context, resourceGroupName string, hybridAksClusterName string, hybridAksClusterRestartNodeParameters HybridAksClusterRestartNodeParameters, options *HybridAksClustersClientBeginRestartNodeOptions) (*runtime.Poller[HybridAksClustersClientRestartNodeResponse], error) {
	if options == nil || options.ResumeToken == "" {
		resp, err := client.restartNode(ctx, resourceGroupName, hybridAksClusterName, hybridAksClusterRestartNodeParameters, options)
		if err != nil {
			return nil, err
		}
		return runtime.NewPoller(resp, client.internal.Pipeline(), &runtime.NewPollerOptions[HybridAksClustersClientRestartNodeResponse]{
			FinalStateVia: runtime.FinalStateViaLocation,
		})
	} else {
		return runtime.NewPollerFromResumeToken[HybridAksClustersClientRestartNodeResponse](options.ResumeToken, client.internal.Pipeline(), nil)
	}
}

// RestartNode - Restart a targeted node of a Hybrid AKS cluster.
// If the operation fails it returns an *azcore.ResponseError type.
//
// Generated from API version 2022-12-12-preview
func (client *HybridAksClustersClient) restartNode(ctx context.Context, resourceGroupName string, hybridAksClusterName string, hybridAksClusterRestartNodeParameters HybridAksClusterRestartNodeParameters, options *HybridAksClustersClientBeginRestartNodeOptions) (*http.Response, error) {
	req, err := client.restartNodeCreateRequest(ctx, resourceGroupName, hybridAksClusterName, hybridAksClusterRestartNodeParameters, options)
	if err != nil {
		return nil, err
	}
	resp, err := client.internal.Pipeline().Do(req)
	if err != nil {
		return nil, err
	}
	if !runtime.HasStatusCode(resp, http.StatusAccepted, http.StatusNoContent) {
		return nil, runtime.NewResponseError(resp)
	}
	return resp, nil
}

// restartNodeCreateRequest creates the RestartNode request.
func (client *HybridAksClustersClient) restartNodeCreateRequest(ctx context.Context, resourceGroupName string, hybridAksClusterName string, hybridAksClusterRestartNodeParameters HybridAksClusterRestartNodeParameters, options *HybridAksClustersClientBeginRestartNodeOptions) (*policy.Request, error) {
	urlPath := "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.NetworkCloud/hybridAksClusters/{hybridAksClusterName}/restartNode"
	if client.subscriptionID == "" {
		return nil, errors.New("parameter client.subscriptionID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{subscriptionId}", url.PathEscape(client.subscriptionID))
	if resourceGroupName == "" {
		return nil, errors.New("parameter resourceGroupName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{resourceGroupName}", url.PathEscape(resourceGroupName))
	if hybridAksClusterName == "" {
		return nil, errors.New("parameter hybridAksClusterName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{hybridAksClusterName}", url.PathEscape(hybridAksClusterName))
	req, err := runtime.NewRequest(ctx, http.MethodPost, runtime.JoinPaths(client.internal.Endpoint(), urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("api-version", "2022-12-12-preview")
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header["Accept"] = []string{"application/json"}
	return req, runtime.MarshalAsJSON(req, hybridAksClusterRestartNodeParameters)
}

// Update - Update tags associated with the additional details related to the Hybrid AKS provisioned cluster.
// If the operation fails it returns an *azcore.ResponseError type.
//
// Generated from API version 2022-12-12-preview
//   - resourceGroupName - The name of the resource group. The name is case insensitive.
//   - hybridAksClusterName - The name of the Hybrid AKS cluster.
//   - hybridAksClusterUpdateParameters - The request body.
//   - options - HybridAksClustersClientUpdateOptions contains the optional parameters for the HybridAksClustersClient.Update
//     method.
func (client *HybridAksClustersClient) Update(ctx context.Context, resourceGroupName string, hybridAksClusterName string, hybridAksClusterUpdateParameters HybridAksClusterPatchParameters, options *HybridAksClustersClientUpdateOptions) (HybridAksClustersClientUpdateResponse, error) {
	req, err := client.updateCreateRequest(ctx, resourceGroupName, hybridAksClusterName, hybridAksClusterUpdateParameters, options)
	if err != nil {
		return HybridAksClustersClientUpdateResponse{}, err
	}
	resp, err := client.internal.Pipeline().Do(req)
	if err != nil {
		return HybridAksClustersClientUpdateResponse{}, err
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {
		return HybridAksClustersClientUpdateResponse{}, runtime.NewResponseError(resp)
	}
	return client.updateHandleResponse(resp)
}

// updateCreateRequest creates the Update request.
func (client *HybridAksClustersClient) updateCreateRequest(ctx context.Context, resourceGroupName string, hybridAksClusterName string, hybridAksClusterUpdateParameters HybridAksClusterPatchParameters, options *HybridAksClustersClientUpdateOptions) (*policy.Request, error) {
	urlPath := "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.NetworkCloud/hybridAksClusters/{hybridAksClusterName}"
	if client.subscriptionID == "" {
		return nil, errors.New("parameter client.subscriptionID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{subscriptionId}", url.PathEscape(client.subscriptionID))
	if resourceGroupName == "" {
		return nil, errors.New("parameter resourceGroupName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{resourceGroupName}", url.PathEscape(resourceGroupName))
	if hybridAksClusterName == "" {
		return nil, errors.New("parameter hybridAksClusterName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{hybridAksClusterName}", url.PathEscape(hybridAksClusterName))
	req, err := runtime.NewRequest(ctx, http.MethodPatch, runtime.JoinPaths(client.internal.Endpoint(), urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("api-version", "2022-12-12-preview")
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header["Accept"] = []string{"application/json"}
	return req, runtime.MarshalAsJSON(req, hybridAksClusterUpdateParameters)
}

// updateHandleResponse handles the Update response.
func (client *HybridAksClustersClient) updateHandleResponse(resp *http.Response) (HybridAksClustersClientUpdateResponse, error) {
	result := HybridAksClustersClientUpdateResponse{}
	if err := runtime.UnmarshalAsJSON(resp, &result.HybridAksCluster); err != nil {
		return HybridAksClustersClientUpdateResponse{}, err
	}
	return result, nil
}
