// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) Go Code Generator. DO NOT EDIT.

package armnginx

import "time"

// APIKey - API key resource returned by the service.
type APIKey struct {
	// The resource-specific properties for this resource.
	Properties *APIKeyResponseProperties

	// READ-ONLY; The name of the API Key resource.
	Name *string

	// READ-ONLY; Fully qualified resource ID for the resource. Ex - /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}
	ID *string

	// READ-ONLY; Azure Resource Manager metadata containing createdBy and modifiedBy information.
	SystemData *SystemData

	// READ-ONLY; The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or "Microsoft.Storage/storageAccounts"
	Type *string
}

// APIKeyListResult - The response of a ApiKey list operation.
type APIKeyListResult struct {
	// REQUIRED; The ApiKey items on this page
	Value []*APIKey

	// The link to the next page of items
	NextLink *string
}

// APIKeyRequest - Request payload for creating or updating an API key.
type APIKeyRequest struct {
	// The resource-specific properties for this resource.
	Properties *APIKeyRequestProperties

	// READ-ONLY; The name of the ApiKey
	Name *string

	// READ-ONLY; Fully qualified resource ID for the resource. Ex - /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}
	ID *string

	// READ-ONLY; Azure Resource Manager metadata containing createdBy and modifiedBy information.
	SystemData *SystemData

	// READ-ONLY; The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or "Microsoft.Storage/storageAccounts"
	Type *string
}

// APIKeyRequestProperties - Properties for an API key request.
type APIKeyRequestProperties struct {
	// REQUIRED; Expiry of the key in UTC date-time format.
	EndDateTime *string

	// REQUIRED; The secret text for the API key
	SecretText *string
}

// APIKeyResponseProperties - Properties returned for an API key resource.
type APIKeyResponseProperties struct {
	// REQUIRED; Expiry of the key in UTC date-time format.
	EndDateTime *string

	// REQUIRED; This is the name of the API key.
	Hint *string
}

// AnalysisConfig - Configuration details for analysis.
type AnalysisConfig struct {
	// List of configuration files.
	Files []*ConfigurationFile

	// Configuration package details.
	Package *ConfigurationPackage

	// List of protected files.
	ProtectedFiles []*ConfigurationProtectedFileContent

	// The root file of the NGINX config file(s). It must match one of the files' filepath.
	RootFile *string
}

// AnalysisCreate - The request body for creating an analysis for an NGINX configuration.
type AnalysisCreate struct {
	// REQUIRED; Configuration details for analysis.
	Config *AnalysisConfig
}

// AnalysisDiagnostic - An error object found during the analysis of an NGINX configuration.
type AnalysisDiagnostic struct {
	// REQUIRED; Description of the error.
	Description *string

	// REQUIRED; The directive being analyzed.
	Directive *string

	// REQUIRED; The filepath of the most relevant config file.
	File *string

	// REQUIRED; Line number where the error was found.
	Line *int64

	// REQUIRED; Error message.
	Message *string

	// REQUIRED; Rule that triggered the error.
	Rule *string

	// Unique identifier for the error.
	ID *string
}

// AnalysisResult - The response body for an analysis request. Contains the status of the analysis and any errors.
type AnalysisResult struct {
	// REQUIRED; The status of the analysis.
	Status *string

	// Analysis result data.
	Data *AnalysisResultContent
}

// AnalysisResultContent - Analysis result data containing errors and diagnostics.
type AnalysisResultContent struct {
	// List of diagnostics found during analysis.
	Diagnostics []*DiagnosticItem

	// List of errors found during analysis.
	Errors []*AnalysisDiagnostic
}

// AppProtect - Nginx App Protect configuration.
type AppProtect struct {
	// REQUIRED; Web application firewall settings.
	WebApplicationFirewallSettings *WebApplicationFirewallSettings

	// REQUIRED; Web application firewall status.
	WebApplicationFirewallStatus *WebApplicationFirewallStatus
}

// AutoScaleSettings - Auto-scale settings for the deployment.
type AutoScaleSettings struct {
	// REQUIRED; List of scale profiles.
	Profiles []*ScaleProfile
}

// AutoUpgradeProfile - Auto-upgrade profile for the deployment.
type AutoUpgradeProfile struct {
	// REQUIRED; The upgrade channel.
	UpgradeChannel *string
}

// Certificate - NginxCertificate resource
type Certificate struct {
	// The resource-specific properties for this resource.
	Properties *CertificateProperties

	// READ-ONLY; The name of the Certificate
	Name *string

	// READ-ONLY; Fully qualified resource ID for the resource. Ex - /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}
	ID *string

	// READ-ONLY; Azure Resource Manager metadata containing createdBy and modifiedBy information.
	SystemData *SystemData

	// READ-ONLY; The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or "Microsoft.Storage/storageAccounts"
	Type *string
}

// CertificateErrorResponseBody - Error details for a certificate resource.
type CertificateErrorResponseBody struct {
	// The error code.
	Code *string

	// The error message.
	Message *string
}

// CertificateListResult - The response of a Certificate list operation.
type CertificateListResult struct {
	// REQUIRED; The Certificate items on this page
	Value []*Certificate

	// The link to the next page of items
	NextLink *string
}

// CertificateProperties - Properties of an Nginx certificate resource.
type CertificateProperties struct {
	// Error details for the certificate, if any.
	CertificateError *CertificateErrorResponseBody

	// The virtual path to the certificate file. This is a path that would be used in an Nginx configuration file, for example,
	// /etc/nginx/ssl/cert.pem.
	CertificateVirtualPath *string

	// The creation time of the Key Vault secret in UTC RFC 3339 format.
	// Example: `2025-07-08T10:11:08.856Z`.
	KeyVaultSecretCreated *string

	// The Key Vault secret ID. Example: `https://myvault.vault.azure.net/secrets/mysecret/1234567890abcdef1234567890abcdef`.
	KeyVaultSecretID *string

	// The Key Vault secret version.
	KeyVaultSecretVersion *string

	// The virtual path to the key file. This is a path that would be used in an Nginx configuration file, for example, /etc/nginx/ssl/key.key.
	KeyVirtualPath *string

	// The SHA1 thumbprint of the certificate.
	SHA1Thumbprint *string

	// READ-ONLY; The provisioning state of the certificate.
	ProvisioningState *ProvisioningState
}

// CertificateUpdate - The type used for update operations of the Certificate.
type CertificateUpdate struct {
	// The resource-specific properties for this resource.
	Properties *CertificateUpdateProperties
}

// CertificateUpdateProperties - The updatable properties of the Certificate.
type CertificateUpdateProperties struct {
	// Error details for the certificate, if any.
	CertificateError *CertificateErrorResponseBody

	// The virtual path to the certificate file. This is a path that would be used in an Nginx configuration file, for example,
	// /etc/nginx/ssl/cert.pem.
	CertificateVirtualPath *string

	// The creation time of the Key Vault secret in UTC RFC 3339 format.
	// Example: `2025-07-08T10:11:08.856Z`.
	KeyVaultSecretCreated *string

	// The Key Vault secret ID. Example: `https://myvault.vault.azure.net/secrets/mysecret/1234567890abcdef1234567890abcdef`.
	KeyVaultSecretID *string

	// The Key Vault secret version.
	KeyVaultSecretVersion *string

	// The virtual path to the key file. This is a path that would be used in an Nginx configuration file, for example, /etc/nginx/ssl/key.key.
	KeyVirtualPath *string

	// The SHA1 thumbprint of the certificate.
	SHA1Thumbprint *string
}

// Configuration - Represents an Nginx configuration resource.
type Configuration struct {
	// The resource-specific properties for this resource.
	Properties *ConfigurationResponseProperties

	// READ-ONLY; The name of the Configuration
	Name *string

	// READ-ONLY; Fully qualified resource ID for the resource. Ex - /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}
	ID *string

	// READ-ONLY; Azure Resource Manager metadata containing createdBy and modifiedBy information.
	SystemData *SystemData

	// READ-ONLY; The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or "Microsoft.Storage/storageAccounts"
	Type *string
}

// ConfigurationFile - Represents a configuration file.
type ConfigurationFile struct {
	// File content in Nginx configuration format, base64 encoded.
	Content *string

	// Virtual path of the file.
	VirtualPath *string
}

// ConfigurationListResult - The response of a Configuration list operation.
type ConfigurationListResult struct {
	// REQUIRED; The Configuration items on this page
	Value []*Configuration

	// The link to the next page of items
	NextLink *string
}

// ConfigurationPackage - Represents a configuration package.
type ConfigurationPackage struct {
	// Package data. This is base64 encoded content of the files archive.
	Data *string

	// List of protected files in the package.
	// These are standard file paths relative to the archive uploaded
	ProtectedFiles []*string
}

// ConfigurationProtectedFileContent - Request model for a protected configuration file.
type ConfigurationProtectedFileContent struct {
	// File content in Nginx configuration format, UTF-8 encoded.
	Content *string

	// Content hash of the file using SHA-256 algorithm.
	ContentHash *string

	// Virtual path of the file.
	VirtualPath *string
}

// ConfigurationProtectedFileResult - Response model for a protected configuration file.
type ConfigurationProtectedFileResult struct {
	// Content hash of the file using SHA-256 algorithm.
	ContentHash *string

	// Virtual path of the file.
	VirtualPath *string
}

// ConfigurationRequest - Request model for creating or updating an Nginx configuration.
type ConfigurationRequest struct {
	// The resource-specific properties for this resource.
	Properties *ConfigurationRequestProperties

	// READ-ONLY; The name of the Configuration
	Name *string

	// READ-ONLY; Fully qualified resource ID for the resource. Ex - /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}
	ID *string

	// READ-ONLY; Azure Resource Manager metadata containing createdBy and modifiedBy information.
	SystemData *SystemData

	// READ-ONLY; The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or "Microsoft.Storage/storageAccounts"
	Type *string
}

// ConfigurationRequestProperties - Properties for an Nginx configuration request.
type ConfigurationRequestProperties struct {
	// List of configuration files.
	Files []*ConfigurationFile

	// Configuration package data.
	Package *ConfigurationPackage

	// List of protected file requests.
	ProtectedFiles []*ConfigurationProtectedFileContent

	// Root file path.
	RootFile *string

	// READ-ONLY; Provisioning state of the configuration.
	ProvisioningState *ProvisioningState
}

// ConfigurationResponseProperties - Properties returned for an Nginx configuration resource.
type ConfigurationResponseProperties struct {
	// List of configuration files.
	Files []*ConfigurationFile

	// Configuration package details.
	Package *ConfigurationPackage

	// List of protected files.
	ProtectedFiles []*ConfigurationProtectedFileResult

	// Root file of the configuration.
	RootFile *string

	// READ-ONLY; Provisioning state of the configuration.
	ProvisioningState *ProvisioningState
}

// ConfigurationUpdate - The type used for update operations of the Configuration.
type ConfigurationUpdate struct {
	// The resource-specific properties for this resource.
	Properties *ConfigurationUpdateProperties
}

// ConfigurationUpdateProperties - The updatable properties of the Configuration.
type ConfigurationUpdateProperties struct {
	// List of configuration files.
	Files []*ConfigurationFile

	// Configuration package data.
	Package *ConfigurationPackage

	// List of protected file requests.
	ProtectedFiles []*ConfigurationProtectedFileContent

	// Root file path.
	RootFile *string
}

// Deployment - Represents an Nginx deployment resource.
type Deployment struct {
	// REQUIRED; The geo-location where the resource lives
	Location *string

	// READ-ONLY; The name of the Nginx deployment resource.
	Name *string

	// The managed service identities assigned to this resource.
	Identity *ManagedServiceIdentity

	// The resource-specific properties for this resource.
	Properties *DeploymentProperties

	// The SKU (Stock Keeping Unit) assigned to this resource.
	SKU *SKU

	// Resource tags.
	Tags map[string]*string

	// READ-ONLY; Fully qualified resource ID for the resource. Ex - /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}
	ID *string

	// READ-ONLY; Azure Resource Manager metadata containing createdBy and modifiedBy information.
	SystemData *SystemData

	// READ-ONLY; The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or "Microsoft.Storage/storageAccounts"
	Type *string
}

// DeploymentDefaultWafPolicy - Default WAF policy for a deployment.
type DeploymentDefaultWafPolicy struct {
	// REQUIRED; The raw policy content, base64-encoded.
	Content []byte

	// REQUIRED; The file path where this policy would be placed.
	Filepath *string
}

// DeploymentDefaultWafPolicyListResponse - Response model for listing default WAF policies.
type DeploymentDefaultWafPolicyListResponse struct {
	// REQUIRED; List of default WAF policies.
	Value []*DeploymentDefaultWafPolicy

	// URL to fetch the next page of WAF policies.
	NextLink *string
}

// DeploymentListResult - The response of a NginxDeployment list operation.
type DeploymentListResult struct {
	// REQUIRED; The NginxDeployment items on this page
	Value []*Deployment

	// The link to the next page of items
	NextLink *string
}

// DeploymentProperties - Properties of an Nginx deployment.
type DeploymentProperties struct {
	// REQUIRED; Auto-upgrade profile.
	AutoUpgradeProfile *AutoUpgradeProfile

	// REQUIRED; Dataplane API endpoint.
	DataplaneAPIEndpoint *string

	// REQUIRED; Whether diagnostics support is enabled.
	EnableDiagnosticsSupport *bool

	// REQUIRED; The IP address of the deployment.
	IPAddress *string

	// REQUIRED; Logging configuration.
	Logging *Logging

	// REQUIRED; The network profile.
	NetworkProfile *NetworkProfile

	// REQUIRED; Nginx App Protect configuration.
	NginxAppProtect *AppProtect

	// REQUIRED; The Nginx version.
	NginxVersion *string

	// REQUIRED; Scaling properties.
	ScalingProperties *DeploymentScalingProperties

	// REQUIRED; User profile.
	UserProfile *DeploymentUserProfile

	// READ-ONLY; The provisioning state of the deployment.
	ProvisioningState *ProvisioningState
}

// DeploymentScalingProperties - Scaling properties for the deployment.
type DeploymentScalingProperties struct {
	// REQUIRED; Auto-scale settings.
	AutoScaleSettings *AutoScaleSettings

	// REQUIRED; The capacity of the deployment.
	Capacity *int32
}

// DeploymentUpdate - The type used for update operations of the NginxDeployment.
type DeploymentUpdate struct {
	// The managed service identities assigned to this resource.
	Identity *ManagedServiceIdentity

	// The resource-specific properties for this resource.
	Properties *DeploymentUpdateProperties

	// The SKU (Stock Keeping Unit) assigned to this resource.
	SKU *SKU

	// Resource tags.
	Tags map[string]*string
}

// DeploymentUpdateProperties - The updatable properties of the NginxDeployment.
type DeploymentUpdateProperties struct {
	// Auto-upgrade profile.
	AutoUpgradeProfile *AutoUpgradeProfile

	// Dataplane API endpoint.
	DataplaneAPIEndpoint *string

	// Whether diagnostics support is enabled.
	EnableDiagnosticsSupport *bool

	// The IP address of the deployment.
	IPAddress *string

	// Logging configuration.
	Logging *Logging

	// The network profile.
	NetworkProfile *NetworkProfile

	// Nginx App Protect configuration.
	NginxAppProtect *AppProtect

	// The Nginx version.
	NginxVersion *string

	// Scaling properties.
	ScalingProperties *DeploymentScalingProperties

	// User profile.
	UserProfile *DeploymentUserProfile
}

// DeploymentUserProfile - User profile for the deployment.
type DeploymentUserProfile struct {
	// REQUIRED; The preferred email address.
	PreferredEmail *string
}

// DeploymentWafPolicyApplyingStatus - Applying status for a WAF policy.
type DeploymentWafPolicyApplyingStatus struct {
	// REQUIRED; The apply status code. Can be any free form text
	Code *string

	// REQUIRED; The human-readable apply status.
	DisplayStatus *string

	// REQUIRED; The timestamp when apply status was recorded in UTC.
	Time *string
}

// DeploymentWafPolicyCompilingStatus - Compilation status for a WAF policy.
type DeploymentWafPolicyCompilingStatus struct {
	// REQUIRED; The compilation status code. Can be any free form text
	Code *string

	// REQUIRED; The human-readable compilation status.
	DisplayStatus *string

	// REQUIRED; The timestamp when compilation status was recorded in UTC timezone and RFC 3339 format.
	// Example: `2025-07-08T10:11:08.856Z`.
	Time *string
}

// DeploymentWafPolicyMetadata - Metadata for a WAF policy under an Nginx deployment.
type DeploymentWafPolicyMetadata struct {
	// The resource-specific properties for this resource.
	Properties *DeploymentWafPolicyMetadataProperties

	// READ-ONLY; The name of the NginxDeploymentWafPolicyMetadata
	Name *string

	// READ-ONLY; Fully qualified resource ID for the resource. Ex - /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}
	ID *string

	// READ-ONLY; Azure Resource Manager metadata containing createdBy and modifiedBy information.
	SystemData *SystemData

	// READ-ONLY; The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or "Microsoft.Storage/storageAccounts"
	Type *string
}

// DeploymentWafPolicyMetadataListResult - The response of a NginxDeploymentWafPolicyMetadata list operation.
type DeploymentWafPolicyMetadataListResult struct {
	// REQUIRED; The NginxDeploymentWafPolicyMetadata items on this page
	Value []*DeploymentWafPolicyMetadata

	// The link to the next page of items
	NextLink *string
}

// DeploymentWafPolicyMetadataProperties - Properties of a WAF policy metadata resource.
type DeploymentWafPolicyMetadataProperties struct {
	// REQUIRED; The applying status of the WAF policy metadata.
	ApplyingState *DeploymentWafPolicyApplyingStatus

	// REQUIRED; The compiling status of the WAF policy metadata.
	CompilingState *DeploymentWafPolicyCompilingStatus

	// REQUIRED; The file path of the WAF policy metadata.
	Filepath *string

	// READ-ONLY; The provisioning state of the WAF policy metadata.
	ProvisioningState *ProvisioningState
}

// DeploymentWafPolicyProperties - Properties of a WAF policy resource.
type DeploymentWafPolicyProperties struct {
	// REQUIRED; The applying status of the WAF policy.
	ApplyingState *DeploymentWafPolicyApplyingStatus

	// REQUIRED; The compiling status of the WAF policy.
	CompilingState *DeploymentWafPolicyCompilingStatus

	// REQUIRED; The raw policy content (base64-encoded).
	Content []byte

	// REQUIRED; The file path of the WAF policy.
	Filepath *string

	// READ-ONLY; The provisioning state of the WAF policy.
	ProvisioningState *ProvisioningState
}

// DiagnosticItem - A diagnostic is a message associated with an NGINX config. The Analyzer returns diagnostics with a level
// indicating the importance of the diagnostic with optional category.
type DiagnosticItem struct {
	// REQUIRED; Description of the diagnostic.
	Description *string

	// REQUIRED; The directive being analyzed. This is a free form text that can be used to identify the directive.
	Directive *string

	// REQUIRED; The filepath of the most relevant config file.
	File *string

	// REQUIRED; Warning or Info.
	Level *DiagnosticLevel

	// REQUIRED; Line number where the diagnostic was found.
	Line *int64

	// REQUIRED; Diagnostic message.
	Message *string

	// REQUIRED; Rule that triggered the diagnostic. Rule names can be any free form text that can be used to identify.
	Rule *string

	// Category of warning like Best-practices, Recommendation, Security etc. Can be any free form text.
	Category *string

	// Unique identifier for the diagnostic error type. Generated by the analyzer as a free form text.
	ID *string
}

// FrontendIPConfiguration - Frontend IP configuration.
type FrontendIPConfiguration struct {
	// REQUIRED; Private IP addresses.
	PrivateIPAddresses []*PrivateIPAddress

	// REQUIRED; Public IP addresses.
	PublicIPAddresses []*PublicIPAddress
}

// Logging configuration for the deployment.
type Logging struct {
	// REQUIRED; Storage account configuration.
	StorageAccount *StorageAccount
}

// ManagedServiceIdentity - Managed service identity (system assigned and/or user assigned identities)
type ManagedServiceIdentity struct {
	// REQUIRED; The type of managed identity assigned to this resource.
	Type *ManagedServiceIdentityType

	// The identities assigned to this resource by the user.
	UserAssignedIdentities map[string]*UserAssignedIdentity

	// READ-ONLY; The service principal ID of the system assigned identity. This property will only be provided for a system assigned
	// identity.
	PrincipalID *string

	// READ-ONLY; The tenant ID of the system assigned identity. This property will only be provided for a system assigned identity.
	TenantID *string
}

// NetworkInterfaceConfiguration - Network interface configuration.
type NetworkInterfaceConfiguration struct {
	// REQUIRED; The subnet resource ID.
	SubnetID *string
}

// NetworkProfile - Network profile for the deployment.
type NetworkProfile struct {
	// REQUIRED; Frontend IP configuration.
	FrontEndIPConfiguration *FrontendIPConfiguration

	// REQUIRED; Network interface configuration.
	NetworkInterfaceConfiguration *NetworkInterfaceConfiguration
}

// Operation - REST API Operation
//
// Details of a REST API operation, returned from the Resource Provider Operations API
type Operation struct {
	// Localized display information for this particular operation.
	Display *OperationDisplay

	// READ-ONLY; Extensible enum. Indicates the action type. "Internal" refers to actions that are for internal only APIs.
	ActionType *ActionType

	// READ-ONLY; Whether the operation applies to data-plane. This is "true" for data-plane operations and "false" for Azure
	// Resource Manager/control-plane operations.
	IsDataAction *bool

	// READ-ONLY; The name of the operation, as per Resource-Based Access Control (RBAC). Examples: "Microsoft.Compute/virtualMachines/write",
	// "Microsoft.Compute/virtualMachines/capture/action"
	Name *string

	// READ-ONLY; The intended executor of the operation; as in Resource Based Access Control (RBAC) and audit logs UX. Default
	// value is "user,system"
	Origin *Origin
}

// OperationDisplay - Localized display information for and operation.
type OperationDisplay struct {
	// READ-ONLY; The short, localized friendly description of the operation; suitable for tool tips and detailed views.
	Description *string

	// READ-ONLY; The concise, localized friendly name for the operation; suitable for dropdowns. E.g. "Create or Update Virtual
	// Machine", "Restart Virtual Machine".
	Operation *string

	// READ-ONLY; The localized friendly form of the resource provider name, e.g. "Microsoft Monitoring Insights" or "Microsoft
	// Compute".
	Provider *string

	// READ-ONLY; The localized friendly name of the resource type related to this operation. E.g. "Virtual Machines" or "Job
	// Schedule Collections".
	Resource *string
}

// OperationListResult - A list of REST API operations supported by an Azure Resource Provider. It contains an URL link to
// get the next set of results.
type OperationListResult struct {
	// REQUIRED; The Operation items on this page
	Value []*Operation

	// The link to the next page of items
	NextLink *string
}

// PrivateIPAddress - Private IP address configuration.
type PrivateIPAddress struct {
	// REQUIRED; The private IP address.
	PrivateIPAddress *string

	// REQUIRED; The allocation method for the private IP.
	PrivateIPAllocationMethod *PrivateIPAllocationMethod

	// REQUIRED; The subnet resource ID.
	SubnetID *string
}

// PublicIPAddress - Public IP address reference.
type PublicIPAddress struct {
	// REQUIRED; The resource ID of the public IP address.
	ID *string
}

// SKU - The resource model definition representing SKU
type SKU struct {
	// REQUIRED; The name of the SKU. Ex - P3. It is typically a letter+number code
	Name *string

	// If the SKU supports scale out/in then the capacity integer should be included. If scale out/in is not possible for the
	// resource this may be omitted.
	Capacity *int32

	// If the service has different generations of hardware, for the same SKU, then that can be captured here.
	Family *string

	// The SKU size. When the name field is the combination of tier and some other value, this would be the standalone code.
	Size *string

	// This field is required to be implemented by the Resource Provider if the service has more than one tier, but is not required
	// on a PUT.
	Tier *SKUTier
}

// ScaleProfile - Scale profile for auto-scaling.
type ScaleProfile struct {
	// REQUIRED; Capacity settings for the scale profile.
	Capacity *ScaleProfileCapacity

	// REQUIRED; The name of the scale profile.
	Name *string
}

// ScaleProfileCapacity - Capacity settings for a scale profile.
type ScaleProfileCapacity struct {
	// REQUIRED; Maximum capacity.
	Max *int32

	// REQUIRED; Minimum capacity.
	Min *int32
}

// StorageAccount - Storage account configuration for logging.
type StorageAccount struct {
	// REQUIRED; The storage account name.
	AccountName *string

	// REQUIRED; The container name.
	ContainerName *string
}

// SystemData - Metadata pertaining to creation and last modification of the resource.
type SystemData struct {
	// The timestamp of resource creation (UTC).
	CreatedAt *time.Time

	// The identity that created the resource.
	CreatedBy *string

	// The type of identity that created the resource.
	CreatedByType *CreatedByType

	// The timestamp of resource last modification (UTC)
	LastModifiedAt *time.Time

	// The identity that last modified the resource.
	LastModifiedBy *string

	// The type of identity that last modified the resource.
	LastModifiedByType *CreatedByType
}

// UserAssignedIdentity - User assigned identity properties
type UserAssignedIdentity struct {
	// READ-ONLY; The client ID of the assigned identity.
	ClientID *string

	// READ-ONLY; The principal ID of the assigned identity.
	PrincipalID *string
}

// WafPolicy - Represents a WAF policy resource under a given Nginx deployment.
type WafPolicy struct {
	// The resource-specific properties for this resource.
	Properties *DeploymentWafPolicyProperties

	// READ-ONLY; The name of the WafPolicy
	Name *string

	// READ-ONLY; Fully qualified resource ID for the resource. Ex - /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}
	ID *string

	// READ-ONLY; Azure Resource Manager metadata containing createdBy and modifiedBy information.
	SystemData *SystemData

	// READ-ONLY; The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or "Microsoft.Storage/storageAccounts"
	Type *string
}

// WebApplicationFirewallComponentVersions - Component versions for the web application firewall.
type WebApplicationFirewallComponentVersions struct {
	// REQUIRED; WAF engine version.
	WafEngineVersion *string

	// REQUIRED; WAF Nginx version.
	WafNginxVersion *string
}

// WebApplicationFirewallPackage - Web application firewall package information.
type WebApplicationFirewallPackage struct {
	// REQUIRED; The revision datetime.
	RevisionDatetime *string

	// REQUIRED; The package version.
	Version *string
}

// WebApplicationFirewallSettings - Web application firewall settings.
type WebApplicationFirewallSettings struct {
	// REQUIRED; The activation state of the WAF.
	ActivationState *ActivationState
}

// WebApplicationFirewallStatus - Web application firewall status.
type WebApplicationFirewallStatus struct {
	// REQUIRED; Attack signatures package.
	AttackSignaturesPackage *WebApplicationFirewallPackage

	// REQUIRED; Bot signatures package.
	BotSignaturesPackage *WebApplicationFirewallPackage

	// REQUIRED; Component versions.
	ComponentVersions *WebApplicationFirewallComponentVersions

	// REQUIRED; Threat campaigns package.
	ThreatCampaignsPackage *WebApplicationFirewallPackage

	// REQUIRED; The WAF release version.
	WafRelease *string
}
