// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) Go Code Generator. DO NOT EDIT.

package armnginx

import (
	"context"
	"errors"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/arm"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/policy"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/runtime"
	"net/http"
	"net/url"
	"strings"
)

// WafPoliciesClient - Operations on WAF policies under a given Nginx deployment.
// Don't use this type directly, use NewWafPoliciesClient() instead.
type WafPoliciesClient struct {
	internal       *arm.Client
	subscriptionID string
}

// NewWafPoliciesClient creates a new instance of WafPoliciesClient with the specified values.
//   - subscriptionID - The ID of the target subscription. The value must be an UUID.
//   - credential - used to authorize requests. Usually a credential from azidentity.
//   - options - pass nil to accept the default values.
func NewWafPoliciesClient(subscriptionID string, credential azcore.TokenCredential, options *arm.ClientOptions) (*WafPoliciesClient, error) {
	cl, err := arm.NewClient(moduleName, moduleVersion, credential, options)
	if err != nil {
		return nil, err
	}
	client := &WafPoliciesClient{
		subscriptionID: subscriptionID,
		internal:       cl,
	}
	return client, nil
}

// BeginCreateOrUpdate - Create or update a WAF policy.
// If the operation fails it returns an *azcore.ResponseError type.
//
// Generated from API version 2025-03-01-preview
//   - resourceGroupName - The name of the resource group. The name is case insensitive.
//   - nginxDeploymentName - The name of the Nginx deployment resource.
//   - wafPolicyName - The name of the WafPolicy
//   - resource - Resource create parameters.
//   - options - WafPoliciesClientBeginCreateOrUpdateOptions contains the optional parameters for the WafPoliciesClient.BeginCreateOrUpdate
//     method.
func (client *WafPoliciesClient) BeginCreateOrUpdate(ctx context.Context, resourceGroupName string, nginxDeploymentName string, wafPolicyName string, resource WafPolicy, options *WafPoliciesClientBeginCreateOrUpdateOptions) (*runtime.Poller[WafPoliciesClientCreateOrUpdateResponse], error) {
	if options == nil || options.ResumeToken == "" {
		resp, err := client.createOrUpdate(ctx, resourceGroupName, nginxDeploymentName, wafPolicyName, resource, options)
		if err != nil {
			return nil, err
		}
		poller, err := runtime.NewPoller(resp, client.internal.Pipeline(), &runtime.NewPollerOptions[WafPoliciesClientCreateOrUpdateResponse]{
			Tracer: client.internal.Tracer(),
		})
		return poller, err
	} else {
		return runtime.NewPollerFromResumeToken(options.ResumeToken, client.internal.Pipeline(), &runtime.NewPollerFromResumeTokenOptions[WafPoliciesClientCreateOrUpdateResponse]{
			Tracer: client.internal.Tracer(),
		})
	}
}

// CreateOrUpdate - Create or update a WAF policy.
// If the operation fails it returns an *azcore.ResponseError type.
//
// Generated from API version 2025-03-01-preview
func (client *WafPoliciesClient) createOrUpdate(ctx context.Context, resourceGroupName string, nginxDeploymentName string, wafPolicyName string, resource WafPolicy, options *WafPoliciesClientBeginCreateOrUpdateOptions) (*http.Response, error) {
	var err error
	const operationName = "WafPoliciesClient.BeginCreateOrUpdate"
	ctx = context.WithValue(ctx, runtime.CtxAPINameKey{}, operationName)
	ctx, endSpan := runtime.StartSpan(ctx, operationName, client.internal.Tracer(), nil)
	defer func() { endSpan(err) }()
	req, err := client.createOrUpdateCreateRequest(ctx, resourceGroupName, nginxDeploymentName, wafPolicyName, resource, options)
	if err != nil {
		return nil, err
	}
	httpResp, err := client.internal.Pipeline().Do(req)
	if err != nil {
		return nil, err
	}
	if !runtime.HasStatusCode(httpResp, http.StatusOK, http.StatusCreated) {
		err = runtime.NewResponseError(httpResp)
		return nil, err
	}
	return httpResp, nil
}

// createOrUpdateCreateRequest creates the CreateOrUpdate request.
func (client *WafPoliciesClient) createOrUpdateCreateRequest(ctx context.Context, resourceGroupName string, nginxDeploymentName string, wafPolicyName string, resource WafPolicy, _ *WafPoliciesClientBeginCreateOrUpdateOptions) (*policy.Request, error) {
	urlPath := "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/NGINX.NGINXPLUS/nginxDeployments/{nginxDeploymentName}/wafPolicies/{wafPolicyName}"
	if client.subscriptionID == "" {
		return nil, errors.New("parameter client.subscriptionID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{subscriptionId}", url.PathEscape(client.subscriptionID))
	if resourceGroupName == "" {
		return nil, errors.New("parameter resourceGroupName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{resourceGroupName}", url.PathEscape(resourceGroupName))
	if nginxDeploymentName == "" {
		return nil, errors.New("parameter nginxDeploymentName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{nginxDeploymentName}", url.PathEscape(nginxDeploymentName))
	if wafPolicyName == "" {
		return nil, errors.New("parameter wafPolicyName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{wafPolicyName}", url.PathEscape(wafPolicyName))
	req, err := runtime.NewRequest(ctx, http.MethodPut, runtime.JoinPaths(client.internal.Endpoint(), urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("api-version", "2025-03-01-preview")
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header["Accept"] = []string{"application/json"}
	req.Raw().Header["Content-Type"] = []string{"application/json"}
	if err := runtime.MarshalAsJSON(req, resource); err != nil {
		return nil, err
	}
	return req, nil
}

// BeginDelete - Delete a specific WAF policy.
// If the operation fails it returns an *azcore.ResponseError type.
//
// Generated from API version 2025-03-01-preview
//   - resourceGroupName - The name of the resource group. The name is case insensitive.
//   - nginxDeploymentName - The name of the Nginx deployment resource.
//   - wafPolicyName - The name of the WafPolicy
//   - options - WafPoliciesClientBeginDeleteOptions contains the optional parameters for the WafPoliciesClient.BeginDelete method.
func (client *WafPoliciesClient) BeginDelete(ctx context.Context, resourceGroupName string, nginxDeploymentName string, wafPolicyName string, options *WafPoliciesClientBeginDeleteOptions) (*runtime.Poller[WafPoliciesClientDeleteResponse], error) {
	if options == nil || options.ResumeToken == "" {
		resp, err := client.deleteOperation(ctx, resourceGroupName, nginxDeploymentName, wafPolicyName, options)
		if err != nil {
			return nil, err
		}
		poller, err := runtime.NewPoller(resp, client.internal.Pipeline(), &runtime.NewPollerOptions[WafPoliciesClientDeleteResponse]{
			Tracer: client.internal.Tracer(),
		})
		return poller, err
	} else {
		return runtime.NewPollerFromResumeToken(options.ResumeToken, client.internal.Pipeline(), &runtime.NewPollerFromResumeTokenOptions[WafPoliciesClientDeleteResponse]{
			Tracer: client.internal.Tracer(),
		})
	}
}

// Delete - Delete a specific WAF policy.
// If the operation fails it returns an *azcore.ResponseError type.
//
// Generated from API version 2025-03-01-preview
func (client *WafPoliciesClient) deleteOperation(ctx context.Context, resourceGroupName string, nginxDeploymentName string, wafPolicyName string, options *WafPoliciesClientBeginDeleteOptions) (*http.Response, error) {
	var err error
	const operationName = "WafPoliciesClient.BeginDelete"
	ctx = context.WithValue(ctx, runtime.CtxAPINameKey{}, operationName)
	ctx, endSpan := runtime.StartSpan(ctx, operationName, client.internal.Tracer(), nil)
	defer func() { endSpan(err) }()
	req, err := client.deleteCreateRequest(ctx, resourceGroupName, nginxDeploymentName, wafPolicyName, options)
	if err != nil {
		return nil, err
	}
	httpResp, err := client.internal.Pipeline().Do(req)
	if err != nil {
		return nil, err
	}
	if !runtime.HasStatusCode(httpResp, http.StatusAccepted, http.StatusNoContent) {
		err = runtime.NewResponseError(httpResp)
		return nil, err
	}
	return httpResp, nil
}

// deleteCreateRequest creates the Delete request.
func (client *WafPoliciesClient) deleteCreateRequest(ctx context.Context, resourceGroupName string, nginxDeploymentName string, wafPolicyName string, _ *WafPoliciesClientBeginDeleteOptions) (*policy.Request, error) {
	urlPath := "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/NGINX.NGINXPLUS/nginxDeployments/{nginxDeploymentName}/wafPolicies/{wafPolicyName}"
	if client.subscriptionID == "" {
		return nil, errors.New("parameter client.subscriptionID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{subscriptionId}", url.PathEscape(client.subscriptionID))
	if resourceGroupName == "" {
		return nil, errors.New("parameter resourceGroupName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{resourceGroupName}", url.PathEscape(resourceGroupName))
	if nginxDeploymentName == "" {
		return nil, errors.New("parameter nginxDeploymentName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{nginxDeploymentName}", url.PathEscape(nginxDeploymentName))
	if wafPolicyName == "" {
		return nil, errors.New("parameter wafPolicyName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{wafPolicyName}", url.PathEscape(wafPolicyName))
	req, err := runtime.NewRequest(ctx, http.MethodDelete, runtime.JoinPaths(client.internal.Endpoint(), urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("api-version", "2025-03-01-preview")
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header["Accept"] = []string{"application/json"}
	return req, nil
}

// Get - Read a specific WAF policy.
// If the operation fails it returns an *azcore.ResponseError type.
//
// Generated from API version 2025-03-01-preview
//   - resourceGroupName - The name of the resource group. The name is case insensitive.
//   - nginxDeploymentName - The name of the Nginx deployment resource.
//   - wafPolicyName - The name of the WafPolicy
//   - options - WafPoliciesClientGetOptions contains the optional parameters for the WafPoliciesClient.Get method.
func (client *WafPoliciesClient) Get(ctx context.Context, resourceGroupName string, nginxDeploymentName string, wafPolicyName string, options *WafPoliciesClientGetOptions) (WafPoliciesClientGetResponse, error) {
	var err error
	const operationName = "WafPoliciesClient.Get"
	ctx = context.WithValue(ctx, runtime.CtxAPINameKey{}, operationName)
	ctx, endSpan := runtime.StartSpan(ctx, operationName, client.internal.Tracer(), nil)
	defer func() { endSpan(err) }()
	req, err := client.getCreateRequest(ctx, resourceGroupName, nginxDeploymentName, wafPolicyName, options)
	if err != nil {
		return WafPoliciesClientGetResponse{}, err
	}
	httpResp, err := client.internal.Pipeline().Do(req)
	if err != nil {
		return WafPoliciesClientGetResponse{}, err
	}
	if !runtime.HasStatusCode(httpResp, http.StatusOK) {
		err = runtime.NewResponseError(httpResp)
		return WafPoliciesClientGetResponse{}, err
	}
	resp, err := client.getHandleResponse(httpResp)
	return resp, err
}

// getCreateRequest creates the Get request.
func (client *WafPoliciesClient) getCreateRequest(ctx context.Context, resourceGroupName string, nginxDeploymentName string, wafPolicyName string, _ *WafPoliciesClientGetOptions) (*policy.Request, error) {
	urlPath := "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/NGINX.NGINXPLUS/nginxDeployments/{nginxDeploymentName}/wafPolicies/{wafPolicyName}"
	if client.subscriptionID == "" {
		return nil, errors.New("parameter client.subscriptionID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{subscriptionId}", url.PathEscape(client.subscriptionID))
	if resourceGroupName == "" {
		return nil, errors.New("parameter resourceGroupName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{resourceGroupName}", url.PathEscape(resourceGroupName))
	if nginxDeploymentName == "" {
		return nil, errors.New("parameter nginxDeploymentName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{nginxDeploymentName}", url.PathEscape(nginxDeploymentName))
	if wafPolicyName == "" {
		return nil, errors.New("parameter wafPolicyName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{wafPolicyName}", url.PathEscape(wafPolicyName))
	req, err := runtime.NewRequest(ctx, http.MethodGet, runtime.JoinPaths(client.internal.Endpoint(), urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("api-version", "2025-03-01-preview")
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header["Accept"] = []string{"application/json"}
	return req, nil
}

// getHandleResponse handles the Get response.
func (client *WafPoliciesClient) getHandleResponse(resp *http.Response) (WafPoliciesClientGetResponse, error) {
	result := WafPoliciesClientGetResponse{}
	if err := runtime.UnmarshalAsJSON(resp, &result.WafPolicy); err != nil {
		return WafPoliciesClientGetResponse{}, err
	}
	return result, nil
}

// NewListByDeploymentPager - List all WAF policies in a deployment.
//
// Generated from API version 2025-03-01-preview
//   - resourceGroupName - The name of the resource group. The name is case insensitive.
//   - nginxDeploymentName - The name of the Nginx deployment resource.
//   - options - WafPoliciesClientListByDeploymentOptions contains the optional parameters for the WafPoliciesClient.NewListByDeploymentPager
//     method.
func (client *WafPoliciesClient) NewListByDeploymentPager(resourceGroupName string, nginxDeploymentName string, options *WafPoliciesClientListByDeploymentOptions) *runtime.Pager[WafPoliciesClientListByDeploymentResponse] {
	return runtime.NewPager(runtime.PagingHandler[WafPoliciesClientListByDeploymentResponse]{
		More: func(page WafPoliciesClientListByDeploymentResponse) bool {
			return page.NextLink != nil && len(*page.NextLink) > 0
		},
		Fetcher: func(ctx context.Context, page *WafPoliciesClientListByDeploymentResponse) (WafPoliciesClientListByDeploymentResponse, error) {
			ctx = context.WithValue(ctx, runtime.CtxAPINameKey{}, "WafPoliciesClient.NewListByDeploymentPager")
			nextLink := ""
			if page != nil {
				nextLink = *page.NextLink
			}
			resp, err := runtime.FetcherForNextLink(ctx, client.internal.Pipeline(), nextLink, func(ctx context.Context) (*policy.Request, error) {
				return client.listByDeploymentCreateRequest(ctx, resourceGroupName, nginxDeploymentName, options)
			}, nil)
			if err != nil {
				return WafPoliciesClientListByDeploymentResponse{}, err
			}
			return client.listByDeploymentHandleResponse(resp)
		},
		Tracer: client.internal.Tracer(),
	})
}

// listByDeploymentCreateRequest creates the ListByDeployment request.
func (client *WafPoliciesClient) listByDeploymentCreateRequest(ctx context.Context, resourceGroupName string, nginxDeploymentName string, _ *WafPoliciesClientListByDeploymentOptions) (*policy.Request, error) {
	urlPath := "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/NGINX.NGINXPLUS/nginxDeployments/{nginxDeploymentName}/wafPolicies"
	if client.subscriptionID == "" {
		return nil, errors.New("parameter client.subscriptionID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{subscriptionId}", url.PathEscape(client.subscriptionID))
	if resourceGroupName == "" {
		return nil, errors.New("parameter resourceGroupName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{resourceGroupName}", url.PathEscape(resourceGroupName))
	if nginxDeploymentName == "" {
		return nil, errors.New("parameter nginxDeploymentName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{nginxDeploymentName}", url.PathEscape(nginxDeploymentName))
	req, err := runtime.NewRequest(ctx, http.MethodGet, runtime.JoinPaths(client.internal.Endpoint(), urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("api-version", "2025-03-01-preview")
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header["Accept"] = []string{"application/json"}
	return req, nil
}

// listByDeploymentHandleResponse handles the ListByDeployment response.
func (client *WafPoliciesClient) listByDeploymentHandleResponse(resp *http.Response) (WafPoliciesClientListByDeploymentResponse, error) {
	result := WafPoliciesClientListByDeploymentResponse{}
	if err := runtime.UnmarshalAsJSON(resp, &result.DeploymentWafPolicyMetadataListResult); err != nil {
		return WafPoliciesClientListByDeploymentResponse{}, err
	}
	return result, nil
}
