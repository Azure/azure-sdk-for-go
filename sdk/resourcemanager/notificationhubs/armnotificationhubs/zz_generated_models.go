//go:build go1.16
// +build go1.16

// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

package armnotificationhubs

import (
	"encoding/json"
	"reflect"
	"time"

	"github.com/Azure/azure-sdk-for-go/sdk/azcore"
)

// AdmCredential - Description of a NotificationHub AdmCredential.
type AdmCredential struct {
	// Properties of NotificationHub AdmCredential.
	Properties *AdmCredentialProperties `json:"properties,omitempty"`
}

// AdmCredentialProperties - Description of a NotificationHub AdmCredential.
type AdmCredentialProperties struct {
	// The URL of the authorization token.
	AuthTokenURL *string `json:"authTokenUrl,omitempty"`

	// The client identifier.
	ClientID *string `json:"clientId,omitempty"`

	// The credential secret access key.
	ClientSecret *string `json:"clientSecret,omitempty"`
}

// ApnsCredential - Description of a NotificationHub ApnsCredential.
type ApnsCredential struct {
	// Properties of NotificationHub ApnsCredential.
	Properties *ApnsCredentialProperties `json:"properties,omitempty"`
}

// ApnsCredentialProperties - Description of a NotificationHub ApnsCredential. Note that there is no explicit switch between Certificate and Token Authentication
// Modes. The mode is determined based on the properties passed in.
type ApnsCredentialProperties struct {
	// The APNS certificate. Specify if using Certificate Authentication Mode.
	ApnsCertificate *string `json:"apnsCertificate,omitempty"`

	// The issuer (iss) registered claim key. The value is a 10-character TeamId, obtained from your developer account. Specify if using Token Authentication
	// Mode.
	AppID *string `json:"appId,omitempty"`

	// The name of the application or BundleId. Specify if using Token Authentication Mode.
	AppName *string `json:"appName,omitempty"`

	// The APNS certificate password if it exists.
	CertificateKey *string `json:"certificateKey,omitempty"`

	// The APNS endpoint of this credential. If using Certificate Authentication Mode and Sandbox specify 'gateway.sandbox.push.apple.com'. If using Certificate
	// Authentication Mode and Production specify
	// 'gateway.push.apple.com'. If using Token Authentication Mode and Sandbox specify 'https://api.development.push.apple.com:443/3/device'. If using Token
	// Authentication Mode and Production specify
	// 'https://api.push.apple.com:443/3/device'.
	Endpoint *string `json:"endpoint,omitempty"`

	// A 10-character key identifier (kid) key, obtained from your developer account. Specify if using Token Authentication Mode.
	KeyID *string `json:"keyId,omitempty"`

	// The APNS certificate thumbprint. Specify if using Certificate Authentication Mode.
	Thumbprint *string `json:"thumbprint,omitempty"`

	// Provider Authentication Token, obtained through your developer account. Specify if using Token Authentication Mode.
	Token *string `json:"token,omitempty"`
}

// BaiduCredential - Description of a NotificationHub BaiduCredential.
type BaiduCredential struct {
	// Properties of NotificationHub BaiduCredential.
	Properties *BaiduCredentialProperties `json:"properties,omitempty"`
}

// BaiduCredentialProperties - Description of a NotificationHub BaiduCredential.
type BaiduCredentialProperties struct {
	// Baidu Api Key.
	BaiduAPIKey *string `json:"baiduApiKey,omitempty"`

	// Baidu Endpoint.
	BaiduEndPoint *string `json:"baiduEndPoint,omitempty"`

	// Baidu Secret Key
	BaiduSecretKey *string `json:"baiduSecretKey,omitempty"`
}

// CheckAvailabilityParameters - Parameters supplied to the Check Name Availability for Namespace and NotificationHubs.
type CheckAvailabilityParameters struct {
	// REQUIRED; Resource name
	Name *string `json:"name,omitempty"`

	// True if the name is available and can be used to create new Namespace/NotificationHub. Otherwise false.
	IsAvailiable *bool `json:"isAvailiable,omitempty"`

	// Resource location
	Location *string `json:"location,omitempty"`

	// The sku of the created namespace
	SKU *SKU `json:"sku,omitempty"`

	// Resource tags
	Tags map[string]*string `json:"tags,omitempty"`

	// READ-ONLY; Resource Id
	ID *string `json:"id,omitempty" azure:"ro"`

	// READ-ONLY; Resource type
	Type *string `json:"type,omitempty" azure:"ro"`
}

// MarshalJSON implements the json.Marshaller interface for type CheckAvailabilityParameters.
func (c CheckAvailabilityParameters) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "id", c.ID)
	populate(objectMap, "isAvailiable", c.IsAvailiable)
	populate(objectMap, "location", c.Location)
	populate(objectMap, "name", c.Name)
	populate(objectMap, "sku", c.SKU)
	populate(objectMap, "tags", c.Tags)
	populate(objectMap, "type", c.Type)
	return json.Marshal(objectMap)
}

// CheckAvailabilityResult - Description of a CheckAvailability resource.
type CheckAvailabilityResult struct {
	Resource
	// True if the name is available and can be used to create new Namespace/NotificationHub. Otherwise false.
	IsAvailiable *bool `json:"isAvailiable,omitempty"`
}

// MarshalJSON implements the json.Marshaller interface for type CheckAvailabilityResult.
func (c CheckAvailabilityResult) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	c.Resource.marshalInternal(objectMap)
	populate(objectMap, "isAvailiable", c.IsAvailiable)
	return json.Marshal(objectMap)
}

// DebugSendResponse - Description of a NotificationHub Resource.
type DebugSendResponse struct {
	Resource
	// Properties of the NotificationHub.
	Properties *DebugSendResult `json:"properties,omitempty"`
}

// MarshalJSON implements the json.Marshaller interface for type DebugSendResponse.
func (d DebugSendResponse) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	d.Resource.marshalInternal(objectMap)
	populate(objectMap, "properties", d.Properties)
	return json.Marshal(objectMap)
}

type DebugSendResult struct {
	// send failure
	Failure *float32 `json:"failure,omitempty"`

	// actual failure description
	Results map[string]interface{} `json:"results,omitempty"`

	// successful send
	Success *float32 `json:"success,omitempty"`
}

// ErrorResponse - Error response indicates NotificationHubs service is not able to process the incoming request. The reason is provided in the error message.
// Implements the error and azcore.HTTPResponse interfaces.
type ErrorResponse struct {
	raw string
	// Error code.
	Code *string `json:"code,omitempty"`

	// Error message indicating why the operation failed.
	Message *string `json:"message,omitempty"`
}

// Error implements the error interface for type ErrorResponse.
// The contents of the error text are not contractual and subject to change.
func (e ErrorResponse) Error() string {
	return e.raw
}

// GCMCredential - Description of a NotificationHub GcmCredential.
type GCMCredential struct {
	// Properties of NotificationHub GcmCredential.
	Properties *GCMCredentialProperties `json:"properties,omitempty"`
}

// GCMCredentialProperties - Description of a NotificationHub GcmCredential.
type GCMCredentialProperties struct {
	// The FCM legacy endpoint. Default value is 'https://fcm.googleapis.com/fcm/send'
	GCMEndpoint *string `json:"gcmEndpoint,omitempty"`

	// The Google API key.
	GoogleAPIKey *string `json:"googleApiKey,omitempty"`
}

// MpnsCredential - Description of a NotificationHub MpnsCredential.
type MpnsCredential struct {
	// Properties of NotificationHub MpnsCredential.
	Properties *MpnsCredentialProperties `json:"properties,omitempty"`
}

// MpnsCredentialProperties - Description of a NotificationHub MpnsCredential.
type MpnsCredentialProperties struct {
	// The certificate key for this credential.
	CertificateKey *string `json:"certificateKey,omitempty"`

	// The MPNS certificate.
	MpnsCertificate *string `json:"mpnsCertificate,omitempty"`

	// The MPNS certificate Thumbprint
	Thumbprint *string `json:"thumbprint,omitempty"`
}

// NamespaceCreateOrUpdateParameters - Parameters supplied to the CreateOrUpdate Namespace operation.
type NamespaceCreateOrUpdateParameters struct {
	Resource
	// Properties of the Namespace.
	Properties *NamespaceProperties `json:"properties,omitempty"`
}

// MarshalJSON implements the json.Marshaller interface for type NamespaceCreateOrUpdateParameters.
func (n NamespaceCreateOrUpdateParameters) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	n.Resource.marshalInternal(objectMap)
	populate(objectMap, "properties", n.Properties)
	return json.Marshal(objectMap)
}

// NamespaceListResult - The response of the List Namespace operation.
type NamespaceListResult struct {
	// Link to the next set of results. Not empty if Value contains incomplete list of Namespaces
	NextLink *string `json:"nextLink,omitempty"`

	// Result of the List Namespace operation.
	Value []*NamespaceResource `json:"value,omitempty"`
}

// MarshalJSON implements the json.Marshaller interface for type NamespaceListResult.
func (n NamespaceListResult) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "nextLink", n.NextLink)
	populate(objectMap, "value", n.Value)
	return json.Marshal(objectMap)
}

// NamespacePatchParameters - Parameters supplied to the Patch Namespace operation.
type NamespacePatchParameters struct {
	// The sku of the created namespace
	SKU *SKU `json:"sku,omitempty"`

	// Resource tags
	Tags map[string]*string `json:"tags,omitempty"`
}

// MarshalJSON implements the json.Marshaller interface for type NamespacePatchParameters.
func (n NamespacePatchParameters) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "sku", n.SKU)
	populate(objectMap, "tags", n.Tags)
	return json.Marshal(objectMap)
}

// NamespaceProperties - Namespace properties.
type NamespaceProperties struct {
	// The time the namespace was created.
	CreatedAt *time.Time `json:"createdAt,omitempty"`

	// Whether or not the namespace is set as Critical.
	Critical *bool `json:"critical,omitempty"`

	// Data center for the namespace
	DataCenter *string `json:"dataCenter,omitempty"`

	// Whether or not the namespace is currently enabled.
	Enabled *bool `json:"enabled,omitempty"`

	// The name of the namespace.
	Name *string `json:"name,omitempty"`

	// The namespace type.
	NamespaceType *NamespaceType `json:"namespaceType,omitempty"`

	// Provisioning state of the Namespace.
	ProvisioningState *string `json:"provisioningState,omitempty"`

	// Specifies the targeted region in which the namespace should be created. It can be any of the following values: Australia East, Australia Southeast, Central
	// US, East US, East US 2, West US, North
	// Central US, South Central US, East Asia, Southeast Asia, Brazil South, Japan East, Japan West, North Europe, West Europe
	Region *string `json:"region,omitempty"`

	// ScaleUnit where the namespace gets created
	ScaleUnit *string `json:"scaleUnit,omitempty"`

	// Endpoint you can use to perform NotificationHub operations.
	ServiceBusEndpoint *string `json:"serviceBusEndpoint,omitempty"`

	// Status of the namespace. It can be any of these values:1 = Created/Active2 = Creating3 = Suspended4 = Deleting
	Status *string `json:"status,omitempty"`

	// The Id of the Azure subscription associated with the namespace.
	SubscriptionID *string `json:"subscriptionId,omitempty"`

	// The time the namespace was updated.
	UpdatedAt *time.Time `json:"updatedAt,omitempty"`

	// READ-ONLY; Identifier for Azure Insights metrics
	MetricID *string `json:"metricId,omitempty" azure:"ro"`
}

// MarshalJSON implements the json.Marshaller interface for type NamespaceProperties.
func (n NamespaceProperties) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "createdAt", (*timeRFC3339)(n.CreatedAt))
	populate(objectMap, "critical", n.Critical)
	populate(objectMap, "dataCenter", n.DataCenter)
	populate(objectMap, "enabled", n.Enabled)
	populate(objectMap, "metricId", n.MetricID)
	populate(objectMap, "name", n.Name)
	populate(objectMap, "namespaceType", n.NamespaceType)
	populate(objectMap, "provisioningState", n.ProvisioningState)
	populate(objectMap, "region", n.Region)
	populate(objectMap, "scaleUnit", n.ScaleUnit)
	populate(objectMap, "serviceBusEndpoint", n.ServiceBusEndpoint)
	populate(objectMap, "status", n.Status)
	populate(objectMap, "subscriptionId", n.SubscriptionID)
	populate(objectMap, "updatedAt", (*timeRFC3339)(n.UpdatedAt))
	return json.Marshal(objectMap)
}

// UnmarshalJSON implements the json.Unmarshaller interface for type NamespaceProperties.
func (n *NamespaceProperties) UnmarshalJSON(data []byte) error {
	var rawMsg map[string]json.RawMessage
	if err := json.Unmarshal(data, &rawMsg); err != nil {
		return err
	}
	for key, val := range rawMsg {
		var err error
		switch key {
		case "createdAt":
			var aux timeRFC3339
			err = unpopulate(val, &aux)
			n.CreatedAt = (*time.Time)(&aux)
			delete(rawMsg, key)
		case "critical":
			err = unpopulate(val, &n.Critical)
			delete(rawMsg, key)
		case "dataCenter":
			err = unpopulate(val, &n.DataCenter)
			delete(rawMsg, key)
		case "enabled":
			err = unpopulate(val, &n.Enabled)
			delete(rawMsg, key)
		case "metricId":
			err = unpopulate(val, &n.MetricID)
			delete(rawMsg, key)
		case "name":
			err = unpopulate(val, &n.Name)
			delete(rawMsg, key)
		case "namespaceType":
			err = unpopulate(val, &n.NamespaceType)
			delete(rawMsg, key)
		case "provisioningState":
			err = unpopulate(val, &n.ProvisioningState)
			delete(rawMsg, key)
		case "region":
			err = unpopulate(val, &n.Region)
			delete(rawMsg, key)
		case "scaleUnit":
			err = unpopulate(val, &n.ScaleUnit)
			delete(rawMsg, key)
		case "serviceBusEndpoint":
			err = unpopulate(val, &n.ServiceBusEndpoint)
			delete(rawMsg, key)
		case "status":
			err = unpopulate(val, &n.Status)
			delete(rawMsg, key)
		case "subscriptionId":
			err = unpopulate(val, &n.SubscriptionID)
			delete(rawMsg, key)
		case "updatedAt":
			var aux timeRFC3339
			err = unpopulate(val, &aux)
			n.UpdatedAt = (*time.Time)(&aux)
			delete(rawMsg, key)
		}
		if err != nil {
			return err
		}
	}
	return nil
}

// NamespaceResource - Description of a Namespace resource.
type NamespaceResource struct {
	Resource
	// Properties of the Namespace.
	Properties *NamespaceProperties `json:"properties,omitempty"`
}

// MarshalJSON implements the json.Marshaller interface for type NamespaceResource.
func (n NamespaceResource) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	n.Resource.marshalInternal(objectMap)
	populate(objectMap, "properties", n.Properties)
	return json.Marshal(objectMap)
}

// NamespacesBeginDeleteOptions contains the optional parameters for the Namespaces.BeginDelete method.
type NamespacesBeginDeleteOptions struct {
	// placeholder for future optional parameters
}

// NamespacesCheckAvailabilityOptions contains the optional parameters for the Namespaces.CheckAvailability method.
type NamespacesCheckAvailabilityOptions struct {
	// placeholder for future optional parameters
}

// NamespacesCreateOrUpdateAuthorizationRuleOptions contains the optional parameters for the Namespaces.CreateOrUpdateAuthorizationRule method.
type NamespacesCreateOrUpdateAuthorizationRuleOptions struct {
	// placeholder for future optional parameters
}

// NamespacesCreateOrUpdateOptions contains the optional parameters for the Namespaces.CreateOrUpdate method.
type NamespacesCreateOrUpdateOptions struct {
	// placeholder for future optional parameters
}

// NamespacesDeleteAuthorizationRuleOptions contains the optional parameters for the Namespaces.DeleteAuthorizationRule method.
type NamespacesDeleteAuthorizationRuleOptions struct {
	// placeholder for future optional parameters
}

// NamespacesGetAuthorizationRuleOptions contains the optional parameters for the Namespaces.GetAuthorizationRule method.
type NamespacesGetAuthorizationRuleOptions struct {
	// placeholder for future optional parameters
}

// NamespacesGetOptions contains the optional parameters for the Namespaces.Get method.
type NamespacesGetOptions struct {
	// placeholder for future optional parameters
}

// NamespacesListAllOptions contains the optional parameters for the Namespaces.ListAll method.
type NamespacesListAllOptions struct {
	// placeholder for future optional parameters
}

// NamespacesListAuthorizationRulesOptions contains the optional parameters for the Namespaces.ListAuthorizationRules method.
type NamespacesListAuthorizationRulesOptions struct {
	// placeholder for future optional parameters
}

// NamespacesListKeysOptions contains the optional parameters for the Namespaces.ListKeys method.
type NamespacesListKeysOptions struct {
	// placeholder for future optional parameters
}

// NamespacesListOptions contains the optional parameters for the Namespaces.List method.
type NamespacesListOptions struct {
	// placeholder for future optional parameters
}

// NamespacesPatchOptions contains the optional parameters for the Namespaces.Patch method.
type NamespacesPatchOptions struct {
	// placeholder for future optional parameters
}

// NamespacesRegenerateKeysOptions contains the optional parameters for the Namespaces.RegenerateKeys method.
type NamespacesRegenerateKeysOptions struct {
	// placeholder for future optional parameters
}

// NotificationHubCreateOrUpdateParameters - Parameters supplied to the CreateOrUpdate NotificationHub operation.
type NotificationHubCreateOrUpdateParameters struct {
	Resource
	// REQUIRED; Properties of the NotificationHub.
	Properties *NotificationHubProperties `json:"properties,omitempty"`
}

// MarshalJSON implements the json.Marshaller interface for type NotificationHubCreateOrUpdateParameters.
func (n NotificationHubCreateOrUpdateParameters) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	n.Resource.marshalInternal(objectMap)
	populate(objectMap, "properties", n.Properties)
	return json.Marshal(objectMap)
}

// NotificationHubListResult - The response of the List NotificationHub operation.
type NotificationHubListResult struct {
	// Link to the next set of results. Not empty if Value contains incomplete list of NotificationHub
	NextLink *string `json:"nextLink,omitempty"`

	// Result of the List NotificationHub operation.
	Value []*NotificationHubResource `json:"value,omitempty"`
}

// MarshalJSON implements the json.Marshaller interface for type NotificationHubListResult.
func (n NotificationHubListResult) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "nextLink", n.NextLink)
	populate(objectMap, "value", n.Value)
	return json.Marshal(objectMap)
}

// NotificationHubPatchParameters - Parameters supplied to the patch NotificationHub operation.
type NotificationHubPatchParameters struct {
	Resource
	// Properties of the NotificationHub.
	Properties *NotificationHubProperties `json:"properties,omitempty"`
}

// MarshalJSON implements the json.Marshaller interface for type NotificationHubPatchParameters.
func (n NotificationHubPatchParameters) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	n.Resource.marshalInternal(objectMap)
	populate(objectMap, "properties", n.Properties)
	return json.Marshal(objectMap)
}

// NotificationHubProperties - NotificationHub properties.
type NotificationHubProperties struct {
	// The AdmCredential of the created NotificationHub
	AdmCredential *AdmCredential `json:"admCredential,omitempty"`

	// The ApnsCredential of the created NotificationHub
	ApnsCredential *ApnsCredential `json:"apnsCredential,omitempty"`

	// The AuthorizationRules of the created NotificationHub
	AuthorizationRules []*SharedAccessAuthorizationRuleProperties `json:"authorizationRules,omitempty"`

	// The BaiduCredential of the created NotificationHub
	BaiduCredential *BaiduCredential `json:"baiduCredential,omitempty"`

	// The GcmCredential of the created NotificationHub
	GCMCredential *GCMCredential `json:"gcmCredential,omitempty"`

	// The MpnsCredential of the created NotificationHub
	MpnsCredential *MpnsCredential `json:"mpnsCredential,omitempty"`

	// The NotificationHub name.
	Name *string `json:"name,omitempty"`

	// The RegistrationTtl of the created NotificationHub
	RegistrationTTL *string `json:"registrationTtl,omitempty"`

	// The WnsCredential of the created NotificationHub
	WnsCredential *WnsCredential `json:"wnsCredential,omitempty"`
}

// MarshalJSON implements the json.Marshaller interface for type NotificationHubProperties.
func (n NotificationHubProperties) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "admCredential", n.AdmCredential)
	populate(objectMap, "apnsCredential", n.ApnsCredential)
	populate(objectMap, "authorizationRules", n.AuthorizationRules)
	populate(objectMap, "baiduCredential", n.BaiduCredential)
	populate(objectMap, "gcmCredential", n.GCMCredential)
	populate(objectMap, "mpnsCredential", n.MpnsCredential)
	populate(objectMap, "name", n.Name)
	populate(objectMap, "registrationTtl", n.RegistrationTTL)
	populate(objectMap, "wnsCredential", n.WnsCredential)
	return json.Marshal(objectMap)
}

// NotificationHubResource - Description of a NotificationHub Resource.
type NotificationHubResource struct {
	Resource
	// Properties of the NotificationHub.
	Properties *NotificationHubProperties `json:"properties,omitempty"`
}

// MarshalJSON implements the json.Marshaller interface for type NotificationHubResource.
func (n NotificationHubResource) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	n.Resource.marshalInternal(objectMap)
	populate(objectMap, "properties", n.Properties)
	return json.Marshal(objectMap)
}

// NotificationHubsCheckNotificationHubAvailabilityOptions contains the optional parameters for the NotificationHubs.CheckNotificationHubAvailability method.
type NotificationHubsCheckNotificationHubAvailabilityOptions struct {
	// placeholder for future optional parameters
}

// NotificationHubsCreateOrUpdateAuthorizationRuleOptions contains the optional parameters for the NotificationHubs.CreateOrUpdateAuthorizationRule method.
type NotificationHubsCreateOrUpdateAuthorizationRuleOptions struct {
	// placeholder for future optional parameters
}

// NotificationHubsCreateOrUpdateOptions contains the optional parameters for the NotificationHubs.CreateOrUpdate method.
type NotificationHubsCreateOrUpdateOptions struct {
	// placeholder for future optional parameters
}

// NotificationHubsDebugSendOptions contains the optional parameters for the NotificationHubs.DebugSend method.
type NotificationHubsDebugSendOptions struct {
	// Debug send parameters
	Parameters map[string]interface{}
}

// NotificationHubsDeleteAuthorizationRuleOptions contains the optional parameters for the NotificationHubs.DeleteAuthorizationRule method.
type NotificationHubsDeleteAuthorizationRuleOptions struct {
	// placeholder for future optional parameters
}

// NotificationHubsDeleteOptions contains the optional parameters for the NotificationHubs.Delete method.
type NotificationHubsDeleteOptions struct {
	// placeholder for future optional parameters
}

// NotificationHubsGetAuthorizationRuleOptions contains the optional parameters for the NotificationHubs.GetAuthorizationRule method.
type NotificationHubsGetAuthorizationRuleOptions struct {
	// placeholder for future optional parameters
}

// NotificationHubsGetOptions contains the optional parameters for the NotificationHubs.Get method.
type NotificationHubsGetOptions struct {
	// placeholder for future optional parameters
}

// NotificationHubsGetPnsCredentialsOptions contains the optional parameters for the NotificationHubs.GetPnsCredentials method.
type NotificationHubsGetPnsCredentialsOptions struct {
	// placeholder for future optional parameters
}

// NotificationHubsListAuthorizationRulesOptions contains the optional parameters for the NotificationHubs.ListAuthorizationRules method.
type NotificationHubsListAuthorizationRulesOptions struct {
	// placeholder for future optional parameters
}

// NotificationHubsListKeysOptions contains the optional parameters for the NotificationHubs.ListKeys method.
type NotificationHubsListKeysOptions struct {
	// placeholder for future optional parameters
}

// NotificationHubsListOptions contains the optional parameters for the NotificationHubs.List method.
type NotificationHubsListOptions struct {
	// placeholder for future optional parameters
}

// NotificationHubsPatchOptions contains the optional parameters for the NotificationHubs.Patch method.
type NotificationHubsPatchOptions struct {
	// Parameters supplied to patch a NotificationHub Resource.
	Parameters *NotificationHubPatchParameters
}

// NotificationHubsRegenerateKeysOptions contains the optional parameters for the NotificationHubs.RegenerateKeys method.
type NotificationHubsRegenerateKeysOptions struct {
	// placeholder for future optional parameters
}

// Operation - A NotificationHubs REST API operation
type Operation struct {
	// The object that represents the operation.
	Display *OperationDisplay `json:"display,omitempty"`

	// READ-ONLY; Operation name: {provider}/{resource}/{operation}
	Name *string `json:"name,omitempty" azure:"ro"`
}

// OperationDisplay - The object that represents the operation.
type OperationDisplay struct {
	// READ-ONLY; Operation type: Read, write, delete, etc.
	Operation *string `json:"operation,omitempty" azure:"ro"`

	// READ-ONLY; Service provider: Microsoft.NotificationHubs
	Provider *string `json:"provider,omitempty" azure:"ro"`

	// READ-ONLY; Resource on which the operation is performed: Invoice, etc.
	Resource *string `json:"resource,omitempty" azure:"ro"`
}

// OperationListResult - Result of the request to list NotificationHubs operations. It contains a list of operations and a URL link to get the next set
// of results.
type OperationListResult struct {
	// READ-ONLY; URL to get the next set of operation list results if there are any.
	NextLink *string `json:"nextLink,omitempty" azure:"ro"`

	// READ-ONLY; List of NotificationHubs operations supported by the Microsoft.NotificationHubs resource provider.
	Value []*Operation `json:"value,omitempty" azure:"ro"`
}

// MarshalJSON implements the json.Marshaller interface for type OperationListResult.
func (o OperationListResult) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "nextLink", o.NextLink)
	populate(objectMap, "value", o.Value)
	return json.Marshal(objectMap)
}

// OperationsListOptions contains the optional parameters for the Operations.List method.
type OperationsListOptions struct {
	// placeholder for future optional parameters
}

// PnsCredentialsProperties - Description of a NotificationHub PNS Credentials.
type PnsCredentialsProperties struct {
	// The AdmCredential of the created NotificationHub
	AdmCredential *AdmCredential `json:"admCredential,omitempty"`

	// The ApnsCredential of the created NotificationHub
	ApnsCredential *ApnsCredential `json:"apnsCredential,omitempty"`

	// The BaiduCredential of the created NotificationHub
	BaiduCredential *BaiduCredential `json:"baiduCredential,omitempty"`

	// The GcmCredential of the created NotificationHub
	GCMCredential *GCMCredential `json:"gcmCredential,omitempty"`

	// The MpnsCredential of the created NotificationHub
	MpnsCredential *MpnsCredential `json:"mpnsCredential,omitempty"`

	// The WnsCredential of the created NotificationHub
	WnsCredential *WnsCredential `json:"wnsCredential,omitempty"`
}

// PnsCredentialsResource - Description of a NotificationHub PNS Credentials.
type PnsCredentialsResource struct {
	Resource
	// NotificationHub PNS Credentials.
	Properties *PnsCredentialsProperties `json:"properties,omitempty"`
}

// MarshalJSON implements the json.Marshaller interface for type PnsCredentialsResource.
func (p PnsCredentialsResource) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	p.Resource.marshalInternal(objectMap)
	populate(objectMap, "properties", p.Properties)
	return json.Marshal(objectMap)
}

// PolicykeyResource - Namespace/NotificationHub Regenerate Keys
type PolicykeyResource struct {
	// Name of the key that has to be regenerated for the Namespace/Notification Hub Authorization Rule. The value can be Primary Key/Secondary Key.
	PolicyKey *string `json:"policyKey,omitempty"`
}

type Resource struct {
	// Resource location
	Location *string `json:"location,omitempty"`

	// The sku of the created namespace
	SKU *SKU `json:"sku,omitempty"`

	// Resource tags
	Tags map[string]*string `json:"tags,omitempty"`

	// READ-ONLY; Resource Id
	ID *string `json:"id,omitempty" azure:"ro"`

	// READ-ONLY; Resource name
	Name *string `json:"name,omitempty" azure:"ro"`

	// READ-ONLY; Resource type
	Type *string `json:"type,omitempty" azure:"ro"`
}

// MarshalJSON implements the json.Marshaller interface for type Resource.
func (r Resource) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	r.marshalInternal(objectMap)
	return json.Marshal(objectMap)
}

func (r Resource) marshalInternal(objectMap map[string]interface{}) {
	populate(objectMap, "id", r.ID)
	populate(objectMap, "location", r.Location)
	populate(objectMap, "name", r.Name)
	populate(objectMap, "sku", r.SKU)
	populate(objectMap, "tags", r.Tags)
	populate(objectMap, "type", r.Type)
}

// ResourceListKeys - Namespace/NotificationHub Connection String
type ResourceListKeys struct {
	// KeyName of the created AuthorizationRule
	KeyName *string `json:"keyName,omitempty"`

	// PrimaryConnectionString of the AuthorizationRule.
	PrimaryConnectionString *string `json:"primaryConnectionString,omitempty"`

	// PrimaryKey of the created AuthorizationRule.
	PrimaryKey *string `json:"primaryKey,omitempty"`

	// SecondaryConnectionString of the created AuthorizationRule
	SecondaryConnectionString *string `json:"secondaryConnectionString,omitempty"`

	// SecondaryKey of the created AuthorizationRule
	SecondaryKey *string `json:"secondaryKey,omitempty"`
}

// SKU - The Sku description for a namespace
type SKU struct {
	// REQUIRED; Name of the notification hub sku
	Name *SKUName `json:"name,omitempty"`

	// The capacity of the resource
	Capacity *int32 `json:"capacity,omitempty"`

	// The Sku Family
	Family *string `json:"family,omitempty"`

	// The Sku size
	Size *string `json:"size,omitempty"`

	// The tier of particular sku
	Tier *string `json:"tier,omitempty"`
}

// SharedAccessAuthorizationRuleCreateOrUpdateParameters - Parameters supplied to the CreateOrUpdate Namespace AuthorizationRules.
type SharedAccessAuthorizationRuleCreateOrUpdateParameters struct {
	// REQUIRED; Properties of the Namespace AuthorizationRules.
	Properties *SharedAccessAuthorizationRuleProperties `json:"properties,omitempty"`
}

// SharedAccessAuthorizationRuleListResult - The response of the List Namespace operation.
type SharedAccessAuthorizationRuleListResult struct {
	// Link to the next set of results. Not empty if Value contains incomplete list of AuthorizationRules
	NextLink *string `json:"nextLink,omitempty"`

	// Result of the List AuthorizationRules operation.
	Value []*SharedAccessAuthorizationRuleResource `json:"value,omitempty"`
}

// MarshalJSON implements the json.Marshaller interface for type SharedAccessAuthorizationRuleListResult.
func (s SharedAccessAuthorizationRuleListResult) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "nextLink", s.NextLink)
	populate(objectMap, "value", s.Value)
	return json.Marshal(objectMap)
}

// SharedAccessAuthorizationRuleProperties - SharedAccessAuthorizationRule properties.
type SharedAccessAuthorizationRuleProperties struct {
	// The rights associated with the rule.
	Rights []*AccessRights `json:"rights,omitempty"`

	// READ-ONLY; A string that describes the claim type
	ClaimType *string `json:"claimType,omitempty" azure:"ro"`

	// READ-ONLY; A string that describes the claim value
	ClaimValue *string `json:"claimValue,omitempty" azure:"ro"`

	// READ-ONLY; The created time for this rule
	CreatedTime *string `json:"createdTime,omitempty" azure:"ro"`

	// READ-ONLY; A string that describes the authorization rule.
	KeyName *string `json:"keyName,omitempty" azure:"ro"`

	// READ-ONLY; The last modified time for this rule
	ModifiedTime *string `json:"modifiedTime,omitempty" azure:"ro"`

	// READ-ONLY; A base64-encoded 256-bit primary key for signing and validating the SAS token.
	PrimaryKey *string `json:"primaryKey,omitempty" azure:"ro"`

	// READ-ONLY; The revision number for the rule
	Revision *int32 `json:"revision,omitempty" azure:"ro"`

	// READ-ONLY; A base64-encoded 256-bit primary key for signing and validating the SAS token.
	SecondaryKey *string `json:"secondaryKey,omitempty" azure:"ro"`
}

// MarshalJSON implements the json.Marshaller interface for type SharedAccessAuthorizationRuleProperties.
func (s SharedAccessAuthorizationRuleProperties) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "claimType", s.ClaimType)
	populate(objectMap, "claimValue", s.ClaimValue)
	populate(objectMap, "createdTime", s.CreatedTime)
	populate(objectMap, "keyName", s.KeyName)
	populate(objectMap, "modifiedTime", s.ModifiedTime)
	populate(objectMap, "primaryKey", s.PrimaryKey)
	populate(objectMap, "revision", s.Revision)
	populate(objectMap, "rights", s.Rights)
	populate(objectMap, "secondaryKey", s.SecondaryKey)
	return json.Marshal(objectMap)
}

// SharedAccessAuthorizationRuleResource - Description of a Namespace AuthorizationRules.
type SharedAccessAuthorizationRuleResource struct {
	Resource
	// Properties of the Namespace AuthorizationRule.
	Properties *SharedAccessAuthorizationRuleProperties `json:"properties,omitempty"`
}

// MarshalJSON implements the json.Marshaller interface for type SharedAccessAuthorizationRuleResource.
func (s SharedAccessAuthorizationRuleResource) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	s.Resource.marshalInternal(objectMap)
	populate(objectMap, "properties", s.Properties)
	return json.Marshal(objectMap)
}

type SubResource struct {
	// Resource Id
	ID *string `json:"id,omitempty"`
}

// WnsCredential - Description of a NotificationHub WnsCredential.
type WnsCredential struct {
	// Properties of NotificationHub WnsCredential.
	Properties *WnsCredentialProperties `json:"properties,omitempty"`
}

// WnsCredentialProperties - Description of a NotificationHub WnsCredential.
type WnsCredentialProperties struct {
	// The package ID for this credential.
	PackageSid *string `json:"packageSid,omitempty"`

	// The secret key.
	SecretKey *string `json:"secretKey,omitempty"`

	// The Windows Live endpoint.
	WindowsLiveEndpoint *string `json:"windowsLiveEndpoint,omitempty"`
}

func populate(m map[string]interface{}, k string, v interface{}) {
	if v == nil {
		return
	} else if azcore.IsNullValue(v) {
		m[k] = nil
	} else if !reflect.ValueOf(v).IsNil() {
		m[k] = v
	}
}

func unpopulate(data json.RawMessage, v interface{}) error {
	if data == nil {
		return nil
	}
	return json.Unmarshal(data, v)
}
