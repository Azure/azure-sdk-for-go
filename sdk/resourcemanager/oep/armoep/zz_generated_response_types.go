//go:build go1.16
// +build go1.16

// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

package armoep

import (
	"context"
	armruntime "github.com/Azure/azure-sdk-for-go/sdk/azcore/arm/runtime"
	"net/http"
	"time"
)

// EnergyServicesCreatePollerResponse contains the response from method EnergyServices.Create.
type EnergyServicesCreatePollerResponse struct {
	// Poller contains an initialized poller.
	Poller *EnergyServicesCreatePoller

	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// PollUntilDone will poll the service endpoint until a terminal state is reached or an error is received.
// freq: the time to wait between intervals in absence of a Retry-After header. Allowed minimum is one second.
// A good starting value is 30 seconds. Note that some resources might benefit from a different value.
func (l EnergyServicesCreatePollerResponse) PollUntilDone(ctx context.Context, freq time.Duration) (EnergyServicesCreateResponse, error) {
	respType := EnergyServicesCreateResponse{}
	resp, err := l.Poller.pt.PollUntilDone(ctx, freq, &respType.EnergyService)
	if err != nil {
		return respType, err
	}
	respType.RawResponse = resp
	return respType, nil
}

// Resume rehydrates a EnergyServicesCreatePollerResponse from the provided client and resume token.
func (l *EnergyServicesCreatePollerResponse) Resume(ctx context.Context, client *EnergyServicesClient, token string) error {
	pt, err := armruntime.NewPollerFromResumeToken("EnergyServicesClient.Create", token, client.pl, client.createHandleError)
	if err != nil {
		return err
	}
	poller := &EnergyServicesCreatePoller{
		pt: pt,
	}
	resp, err := poller.Poll(ctx)
	if err != nil {
		return err
	}
	l.Poller = poller
	l.RawResponse = resp
	return nil
}

// EnergyServicesCreateResponse contains the response from method EnergyServices.Create.
type EnergyServicesCreateResponse struct {
	EnergyServicesCreateResult
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// EnergyServicesCreateResult contains the result from method EnergyServices.Create.
type EnergyServicesCreateResult struct {
	EnergyService
}

// EnergyServicesDeletePollerResponse contains the response from method EnergyServices.Delete.
type EnergyServicesDeletePollerResponse struct {
	// Poller contains an initialized poller.
	Poller *EnergyServicesDeletePoller

	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// PollUntilDone will poll the service endpoint until a terminal state is reached or an error is received.
// freq: the time to wait between intervals in absence of a Retry-After header. Allowed minimum is one second.
// A good starting value is 30 seconds. Note that some resources might benefit from a different value.
func (l EnergyServicesDeletePollerResponse) PollUntilDone(ctx context.Context, freq time.Duration) (EnergyServicesDeleteResponse, error) {
	respType := EnergyServicesDeleteResponse{}
	resp, err := l.Poller.pt.PollUntilDone(ctx, freq, nil)
	if err != nil {
		return respType, err
	}
	respType.RawResponse = resp
	return respType, nil
}

// Resume rehydrates a EnergyServicesDeletePollerResponse from the provided client and resume token.
func (l *EnergyServicesDeletePollerResponse) Resume(ctx context.Context, client *EnergyServicesClient, token string) error {
	pt, err := armruntime.NewPollerFromResumeToken("EnergyServicesClient.Delete", token, client.pl, client.deleteHandleError)
	if err != nil {
		return err
	}
	poller := &EnergyServicesDeletePoller{
		pt: pt,
	}
	resp, err := poller.Poll(ctx)
	if err != nil {
		return err
	}
	l.Poller = poller
	l.RawResponse = resp
	return nil
}

// EnergyServicesDeleteResponse contains the response from method EnergyServices.Delete.
type EnergyServicesDeleteResponse struct {
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// EnergyServicesGetResponse contains the response from method EnergyServices.Get.
type EnergyServicesGetResponse struct {
	EnergyServicesGetResult
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// EnergyServicesGetResult contains the result from method EnergyServices.Get.
type EnergyServicesGetResult struct {
	EnergyService
}

// EnergyServicesListByResourceGroupResponse contains the response from method EnergyServices.ListByResourceGroup.
type EnergyServicesListByResourceGroupResponse struct {
	EnergyServicesListByResourceGroupResult
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// EnergyServicesListByResourceGroupResult contains the result from method EnergyServices.ListByResourceGroup.
type EnergyServicesListByResourceGroupResult struct {
	EnergyServiceList
}

// EnergyServicesListBySubscriptionResponse contains the response from method EnergyServices.ListBySubscription.
type EnergyServicesListBySubscriptionResponse struct {
	EnergyServicesListBySubscriptionResult
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// EnergyServicesListBySubscriptionResult contains the result from method EnergyServices.ListBySubscription.
type EnergyServicesListBySubscriptionResult struct {
	EnergyServiceList
}

// EnergyServicesUpdateResponse contains the response from method EnergyServices.Update.
type EnergyServicesUpdateResponse struct {
	EnergyServicesUpdateResult
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// EnergyServicesUpdateResult contains the result from method EnergyServices.Update.
type EnergyServicesUpdateResult struct {
	EnergyService
}

// LocationsCheckNameAvailabilityResponse contains the response from method Locations.CheckNameAvailability.
type LocationsCheckNameAvailabilityResponse struct {
	LocationsCheckNameAvailabilityResult
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// LocationsCheckNameAvailabilityResult contains the result from method Locations.CheckNameAvailability.
type LocationsCheckNameAvailabilityResult struct {
	CheckNameAvailabilityResponse
}

// OperationsListResponse contains the response from method Operations.List.
type OperationsListResponse struct {
	OperationsListResult
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// OperationsListResult contains the result from method Operations.List.
type OperationsListResult struct {
	OperationListResult
}
