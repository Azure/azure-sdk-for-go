// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) Go Code Generator. DO NOT EDIT.

package armonlineexperimentation

import (
	"context"
	"errors"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/arm"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/policy"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/runtime"
	"net/http"
	"net/url"
	"strings"
)

// OnlineExperimentWorkspacesClient contains the methods for the OnlineExperimentWorkspaces group.
// Don't use this type directly, use NewOnlineExperimentWorkspacesClient() instead.
type OnlineExperimentWorkspacesClient struct {
	internal       *arm.Client
	subscriptionID string
}

// NewOnlineExperimentWorkspacesClient creates a new instance of OnlineExperimentWorkspacesClient with the specified values.
//   - subscriptionID - The ID of the target subscription. The value must be an UUID.
//   - credential - used to authorize requests. Usually a credential from azidentity.
//   - options - pass nil to accept the default values.
func NewOnlineExperimentWorkspacesClient(subscriptionID string, credential azcore.TokenCredential, options *arm.ClientOptions) (*OnlineExperimentWorkspacesClient, error) {
	cl, err := arm.NewClient(moduleName, moduleVersion, credential, options)
	if err != nil {
		return nil, err
	}
	client := &OnlineExperimentWorkspacesClient{
		subscriptionID: subscriptionID,
		internal:       cl,
	}
	return client, nil
}

// BeginCreateOrUpdate - Create an experiment workspace, or update an existing workspace
// If the operation fails it returns an *azcore.ResponseError type.
//
// Generated from API version 2025-05-31-preview
//   - resourceGroupName - The name of the resource group. The name is case insensitive.
//   - workspaceName - The name of the OnlineExperimentWorkspace
//   - resource - Resource create parameters.
//   - options - OnlineExperimentWorkspacesClientBeginCreateOrUpdateOptions contains the optional parameters for the OnlineExperimentWorkspacesClient.BeginCreateOrUpdate
//     method.
func (client *OnlineExperimentWorkspacesClient) BeginCreateOrUpdate(ctx context.Context, resourceGroupName string, workspaceName string, resource OnlineExperimentWorkspace, options *OnlineExperimentWorkspacesClientBeginCreateOrUpdateOptions) (*runtime.Poller[OnlineExperimentWorkspacesClientCreateOrUpdateResponse], error) {
	if options == nil || options.ResumeToken == "" {
		resp, err := client.createOrUpdate(ctx, resourceGroupName, workspaceName, resource, options)
		if err != nil {
			return nil, err
		}
		poller, err := runtime.NewPoller(resp, client.internal.Pipeline(), &runtime.NewPollerOptions[OnlineExperimentWorkspacesClientCreateOrUpdateResponse]{
			Tracer: client.internal.Tracer(),
		})
		return poller, err
	} else {
		return runtime.NewPollerFromResumeToken(options.ResumeToken, client.internal.Pipeline(), &runtime.NewPollerFromResumeTokenOptions[OnlineExperimentWorkspacesClientCreateOrUpdateResponse]{
			Tracer: client.internal.Tracer(),
		})
	}
}

// CreateOrUpdate - Create an experiment workspace, or update an existing workspace
// If the operation fails it returns an *azcore.ResponseError type.
//
// Generated from API version 2025-05-31-preview
func (client *OnlineExperimentWorkspacesClient) createOrUpdate(ctx context.Context, resourceGroupName string, workspaceName string, resource OnlineExperimentWorkspace, options *OnlineExperimentWorkspacesClientBeginCreateOrUpdateOptions) (*http.Response, error) {
	var err error
	const operationName = "OnlineExperimentWorkspacesClient.BeginCreateOrUpdate"
	ctx = context.WithValue(ctx, runtime.CtxAPINameKey{}, operationName)
	ctx, endSpan := runtime.StartSpan(ctx, operationName, client.internal.Tracer(), nil)
	defer func() { endSpan(err) }()
	req, err := client.createOrUpdateCreateRequest(ctx, resourceGroupName, workspaceName, resource, options)
	if err != nil {
		return nil, err
	}
	httpResp, err := client.internal.Pipeline().Do(req)
	if err != nil {
		return nil, err
	}
	if !runtime.HasStatusCode(httpResp, http.StatusOK, http.StatusCreated) {
		err = runtime.NewResponseError(httpResp)
		return nil, err
	}
	return httpResp, nil
}

// createOrUpdateCreateRequest creates the CreateOrUpdate request.
func (client *OnlineExperimentWorkspacesClient) createOrUpdateCreateRequest(ctx context.Context, resourceGroupName string, workspaceName string, resource OnlineExperimentWorkspace, _ *OnlineExperimentWorkspacesClientBeginCreateOrUpdateOptions) (*policy.Request, error) {
	urlPath := "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.OnlineExperimentation/workspaces/{workspaceName}"
	if client.subscriptionID == "" {
		return nil, errors.New("parameter client.subscriptionID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{subscriptionId}", url.PathEscape(client.subscriptionID))
	if resourceGroupName == "" {
		return nil, errors.New("parameter resourceGroupName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{resourceGroupName}", url.PathEscape(resourceGroupName))
	if workspaceName == "" {
		return nil, errors.New("parameter workspaceName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{workspaceName}", url.PathEscape(workspaceName))
	req, err := runtime.NewRequest(ctx, http.MethodPut, runtime.JoinPaths(client.internal.Endpoint(), urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("api-version", "2025-05-31-preview")
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header["Accept"] = []string{"application/json"}
	req.Raw().Header["Content-Type"] = []string{"application/json"}
	if err := runtime.MarshalAsJSON(req, resource); err != nil {
		return nil, err
	}
	return req, nil
}

// BeginDelete - Deletes an experiment workspace
// If the operation fails it returns an *azcore.ResponseError type.
//
// Generated from API version 2025-05-31-preview
//   - resourceGroupName - The name of the resource group. The name is case insensitive.
//   - workspaceName - The name of the OnlineExperimentWorkspace
//   - options - OnlineExperimentWorkspacesClientBeginDeleteOptions contains the optional parameters for the OnlineExperimentWorkspacesClient.BeginDelete
//     method.
func (client *OnlineExperimentWorkspacesClient) BeginDelete(ctx context.Context, resourceGroupName string, workspaceName string, options *OnlineExperimentWorkspacesClientBeginDeleteOptions) (*runtime.Poller[OnlineExperimentWorkspacesClientDeleteResponse], error) {
	if options == nil || options.ResumeToken == "" {
		resp, err := client.deleteOperation(ctx, resourceGroupName, workspaceName, options)
		if err != nil {
			return nil, err
		}
		poller, err := runtime.NewPoller(resp, client.internal.Pipeline(), &runtime.NewPollerOptions[OnlineExperimentWorkspacesClientDeleteResponse]{
			Tracer: client.internal.Tracer(),
		})
		return poller, err
	} else {
		return runtime.NewPollerFromResumeToken(options.ResumeToken, client.internal.Pipeline(), &runtime.NewPollerFromResumeTokenOptions[OnlineExperimentWorkspacesClientDeleteResponse]{
			Tracer: client.internal.Tracer(),
		})
	}
}

// Delete - Deletes an experiment workspace
// If the operation fails it returns an *azcore.ResponseError type.
//
// Generated from API version 2025-05-31-preview
func (client *OnlineExperimentWorkspacesClient) deleteOperation(ctx context.Context, resourceGroupName string, workspaceName string, options *OnlineExperimentWorkspacesClientBeginDeleteOptions) (*http.Response, error) {
	var err error
	const operationName = "OnlineExperimentWorkspacesClient.BeginDelete"
	ctx = context.WithValue(ctx, runtime.CtxAPINameKey{}, operationName)
	ctx, endSpan := runtime.StartSpan(ctx, operationName, client.internal.Tracer(), nil)
	defer func() { endSpan(err) }()
	req, err := client.deleteCreateRequest(ctx, resourceGroupName, workspaceName, options)
	if err != nil {
		return nil, err
	}
	httpResp, err := client.internal.Pipeline().Do(req)
	if err != nil {
		return nil, err
	}
	if !runtime.HasStatusCode(httpResp, http.StatusAccepted, http.StatusNoContent) {
		err = runtime.NewResponseError(httpResp)
		return nil, err
	}
	return httpResp, nil
}

// deleteCreateRequest creates the Delete request.
func (client *OnlineExperimentWorkspacesClient) deleteCreateRequest(ctx context.Context, resourceGroupName string, workspaceName string, _ *OnlineExperimentWorkspacesClientBeginDeleteOptions) (*policy.Request, error) {
	urlPath := "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.OnlineExperimentation/workspaces/{workspaceName}"
	if client.subscriptionID == "" {
		return nil, errors.New("parameter client.subscriptionID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{subscriptionId}", url.PathEscape(client.subscriptionID))
	if resourceGroupName == "" {
		return nil, errors.New("parameter resourceGroupName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{resourceGroupName}", url.PathEscape(resourceGroupName))
	if workspaceName == "" {
		return nil, errors.New("parameter workspaceName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{workspaceName}", url.PathEscape(workspaceName))
	req, err := runtime.NewRequest(ctx, http.MethodDelete, runtime.JoinPaths(client.internal.Endpoint(), urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("api-version", "2025-05-31-preview")
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header["Accept"] = []string{"application/json"}
	return req, nil
}

// Get - Gets an experiment workspace
// If the operation fails it returns an *azcore.ResponseError type.
//
// Generated from API version 2025-05-31-preview
//   - resourceGroupName - The name of the resource group. The name is case insensitive.
//   - workspaceName - The name of the OnlineExperimentWorkspace
//   - options - OnlineExperimentWorkspacesClientGetOptions contains the optional parameters for the OnlineExperimentWorkspacesClient.Get
//     method.
func (client *OnlineExperimentWorkspacesClient) Get(ctx context.Context, resourceGroupName string, workspaceName string, options *OnlineExperimentWorkspacesClientGetOptions) (OnlineExperimentWorkspacesClientGetResponse, error) {
	var err error
	const operationName = "OnlineExperimentWorkspacesClient.Get"
	ctx = context.WithValue(ctx, runtime.CtxAPINameKey{}, operationName)
	ctx, endSpan := runtime.StartSpan(ctx, operationName, client.internal.Tracer(), nil)
	defer func() { endSpan(err) }()
	req, err := client.getCreateRequest(ctx, resourceGroupName, workspaceName, options)
	if err != nil {
		return OnlineExperimentWorkspacesClientGetResponse{}, err
	}
	httpResp, err := client.internal.Pipeline().Do(req)
	if err != nil {
		return OnlineExperimentWorkspacesClientGetResponse{}, err
	}
	if !runtime.HasStatusCode(httpResp, http.StatusOK) {
		err = runtime.NewResponseError(httpResp)
		return OnlineExperimentWorkspacesClientGetResponse{}, err
	}
	resp, err := client.getHandleResponse(httpResp)
	return resp, err
}

// getCreateRequest creates the Get request.
func (client *OnlineExperimentWorkspacesClient) getCreateRequest(ctx context.Context, resourceGroupName string, workspaceName string, _ *OnlineExperimentWorkspacesClientGetOptions) (*policy.Request, error) {
	urlPath := "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.OnlineExperimentation/workspaces/{workspaceName}"
	if client.subscriptionID == "" {
		return nil, errors.New("parameter client.subscriptionID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{subscriptionId}", url.PathEscape(client.subscriptionID))
	if resourceGroupName == "" {
		return nil, errors.New("parameter resourceGroupName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{resourceGroupName}", url.PathEscape(resourceGroupName))
	if workspaceName == "" {
		return nil, errors.New("parameter workspaceName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{workspaceName}", url.PathEscape(workspaceName))
	req, err := runtime.NewRequest(ctx, http.MethodGet, runtime.JoinPaths(client.internal.Endpoint(), urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("api-version", "2025-05-31-preview")
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header["Accept"] = []string{"application/json"}
	return req, nil
}

// getHandleResponse handles the Get response.
func (client *OnlineExperimentWorkspacesClient) getHandleResponse(resp *http.Response) (OnlineExperimentWorkspacesClientGetResponse, error) {
	result := OnlineExperimentWorkspacesClientGetResponse{}
	if err := runtime.UnmarshalAsJSON(resp, &result.OnlineExperimentWorkspace); err != nil {
		return OnlineExperimentWorkspacesClientGetResponse{}, err
	}
	return result, nil
}

// NewListByResourceGroupPager - Gets all experiment workspaces in a resource group.
//
// Generated from API version 2025-05-31-preview
//   - resourceGroupName - The name of the resource group. The name is case insensitive.
//   - options - OnlineExperimentWorkspacesClientListByResourceGroupOptions contains the optional parameters for the OnlineExperimentWorkspacesClient.NewListByResourceGroupPager
//     method.
func (client *OnlineExperimentWorkspacesClient) NewListByResourceGroupPager(resourceGroupName string, options *OnlineExperimentWorkspacesClientListByResourceGroupOptions) *runtime.Pager[OnlineExperimentWorkspacesClientListByResourceGroupResponse] {
	return runtime.NewPager(runtime.PagingHandler[OnlineExperimentWorkspacesClientListByResourceGroupResponse]{
		More: func(page OnlineExperimentWorkspacesClientListByResourceGroupResponse) bool {
			return page.NextLink != nil && len(*page.NextLink) > 0
		},
		Fetcher: func(ctx context.Context, page *OnlineExperimentWorkspacesClientListByResourceGroupResponse) (OnlineExperimentWorkspacesClientListByResourceGroupResponse, error) {
			ctx = context.WithValue(ctx, runtime.CtxAPINameKey{}, "OnlineExperimentWorkspacesClient.NewListByResourceGroupPager")
			nextLink := ""
			if page != nil {
				nextLink = *page.NextLink
			}
			resp, err := runtime.FetcherForNextLink(ctx, client.internal.Pipeline(), nextLink, func(ctx context.Context) (*policy.Request, error) {
				return client.listByResourceGroupCreateRequest(ctx, resourceGroupName, options)
			}, nil)
			if err != nil {
				return OnlineExperimentWorkspacesClientListByResourceGroupResponse{}, err
			}
			return client.listByResourceGroupHandleResponse(resp)
		},
		Tracer: client.internal.Tracer(),
	})
}

// listByResourceGroupCreateRequest creates the ListByResourceGroup request.
func (client *OnlineExperimentWorkspacesClient) listByResourceGroupCreateRequest(ctx context.Context, resourceGroupName string, _ *OnlineExperimentWorkspacesClientListByResourceGroupOptions) (*policy.Request, error) {
	urlPath := "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.OnlineExperimentation/workspaces"
	if client.subscriptionID == "" {
		return nil, errors.New("parameter client.subscriptionID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{subscriptionId}", url.PathEscape(client.subscriptionID))
	if resourceGroupName == "" {
		return nil, errors.New("parameter resourceGroupName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{resourceGroupName}", url.PathEscape(resourceGroupName))
	req, err := runtime.NewRequest(ctx, http.MethodGet, runtime.JoinPaths(client.internal.Endpoint(), urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("api-version", "2025-05-31-preview")
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header["Accept"] = []string{"application/json"}
	return req, nil
}

// listByResourceGroupHandleResponse handles the ListByResourceGroup response.
func (client *OnlineExperimentWorkspacesClient) listByResourceGroupHandleResponse(resp *http.Response) (OnlineExperimentWorkspacesClientListByResourceGroupResponse, error) {
	result := OnlineExperimentWorkspacesClientListByResourceGroupResponse{}
	if err := runtime.UnmarshalAsJSON(resp, &result.OnlineExperimentWorkspaceListResult); err != nil {
		return OnlineExperimentWorkspacesClientListByResourceGroupResponse{}, err
	}
	return result, nil
}

// NewListBySubscriptionPager - Gets all experiment workspaces in the specified subscription.
//
// Generated from API version 2025-05-31-preview
//   - options - OnlineExperimentWorkspacesClientListBySubscriptionOptions contains the optional parameters for the OnlineExperimentWorkspacesClient.NewListBySubscriptionPager
//     method.
func (client *OnlineExperimentWorkspacesClient) NewListBySubscriptionPager(options *OnlineExperimentWorkspacesClientListBySubscriptionOptions) *runtime.Pager[OnlineExperimentWorkspacesClientListBySubscriptionResponse] {
	return runtime.NewPager(runtime.PagingHandler[OnlineExperimentWorkspacesClientListBySubscriptionResponse]{
		More: func(page OnlineExperimentWorkspacesClientListBySubscriptionResponse) bool {
			return page.NextLink != nil && len(*page.NextLink) > 0
		},
		Fetcher: func(ctx context.Context, page *OnlineExperimentWorkspacesClientListBySubscriptionResponse) (OnlineExperimentWorkspacesClientListBySubscriptionResponse, error) {
			ctx = context.WithValue(ctx, runtime.CtxAPINameKey{}, "OnlineExperimentWorkspacesClient.NewListBySubscriptionPager")
			nextLink := ""
			if page != nil {
				nextLink = *page.NextLink
			}
			resp, err := runtime.FetcherForNextLink(ctx, client.internal.Pipeline(), nextLink, func(ctx context.Context) (*policy.Request, error) {
				return client.listBySubscriptionCreateRequest(ctx, options)
			}, nil)
			if err != nil {
				return OnlineExperimentWorkspacesClientListBySubscriptionResponse{}, err
			}
			return client.listBySubscriptionHandleResponse(resp)
		},
		Tracer: client.internal.Tracer(),
	})
}

// listBySubscriptionCreateRequest creates the ListBySubscription request.
func (client *OnlineExperimentWorkspacesClient) listBySubscriptionCreateRequest(ctx context.Context, _ *OnlineExperimentWorkspacesClientListBySubscriptionOptions) (*policy.Request, error) {
	urlPath := "/subscriptions/{subscriptionId}/providers/Microsoft.OnlineExperimentation/workspaces"
	if client.subscriptionID == "" {
		return nil, errors.New("parameter client.subscriptionID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{subscriptionId}", url.PathEscape(client.subscriptionID))
	req, err := runtime.NewRequest(ctx, http.MethodGet, runtime.JoinPaths(client.internal.Endpoint(), urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("api-version", "2025-05-31-preview")
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header["Accept"] = []string{"application/json"}
	return req, nil
}

// listBySubscriptionHandleResponse handles the ListBySubscription response.
func (client *OnlineExperimentWorkspacesClient) listBySubscriptionHandleResponse(resp *http.Response) (OnlineExperimentWorkspacesClientListBySubscriptionResponse, error) {
	result := OnlineExperimentWorkspacesClientListBySubscriptionResponse{}
	if err := runtime.UnmarshalAsJSON(resp, &result.OnlineExperimentWorkspaceListResult); err != nil {
		return OnlineExperimentWorkspacesClientListBySubscriptionResponse{}, err
	}
	return result, nil
}

// BeginUpdate - Patch an experiment workspace
// If the operation fails it returns an *azcore.ResponseError type.
//
// Generated from API version 2025-05-31-preview
//   - resourceGroupName - The name of the resource group. The name is case insensitive.
//   - workspaceName - The name of the OnlineExperimentWorkspace
//   - properties - The resource properties to be updated.
//   - options - OnlineExperimentWorkspacesClientBeginUpdateOptions contains the optional parameters for the OnlineExperimentWorkspacesClient.BeginUpdate
//     method.
func (client *OnlineExperimentWorkspacesClient) BeginUpdate(ctx context.Context, resourceGroupName string, workspaceName string, properties OnlineExperimentWorkspacePatch, options *OnlineExperimentWorkspacesClientBeginUpdateOptions) (*runtime.Poller[OnlineExperimentWorkspacesClientUpdateResponse], error) {
	if options == nil || options.ResumeToken == "" {
		resp, err := client.update(ctx, resourceGroupName, workspaceName, properties, options)
		if err != nil {
			return nil, err
		}
		poller, err := runtime.NewPoller(resp, client.internal.Pipeline(), &runtime.NewPollerOptions[OnlineExperimentWorkspacesClientUpdateResponse]{
			Tracer: client.internal.Tracer(),
		})
		return poller, err
	} else {
		return runtime.NewPollerFromResumeToken(options.ResumeToken, client.internal.Pipeline(), &runtime.NewPollerFromResumeTokenOptions[OnlineExperimentWorkspacesClientUpdateResponse]{
			Tracer: client.internal.Tracer(),
		})
	}
}

// Update - Patch an experiment workspace
// If the operation fails it returns an *azcore.ResponseError type.
//
// Generated from API version 2025-05-31-preview
func (client *OnlineExperimentWorkspacesClient) update(ctx context.Context, resourceGroupName string, workspaceName string, properties OnlineExperimentWorkspacePatch, options *OnlineExperimentWorkspacesClientBeginUpdateOptions) (*http.Response, error) {
	var err error
	const operationName = "OnlineExperimentWorkspacesClient.BeginUpdate"
	ctx = context.WithValue(ctx, runtime.CtxAPINameKey{}, operationName)
	ctx, endSpan := runtime.StartSpan(ctx, operationName, client.internal.Tracer(), nil)
	defer func() { endSpan(err) }()
	req, err := client.updateCreateRequest(ctx, resourceGroupName, workspaceName, properties, options)
	if err != nil {
		return nil, err
	}
	httpResp, err := client.internal.Pipeline().Do(req)
	if err != nil {
		return nil, err
	}
	if !runtime.HasStatusCode(httpResp, http.StatusOK, http.StatusAccepted) {
		err = runtime.NewResponseError(httpResp)
		return nil, err
	}
	return httpResp, nil
}

// updateCreateRequest creates the Update request.
func (client *OnlineExperimentWorkspacesClient) updateCreateRequest(ctx context.Context, resourceGroupName string, workspaceName string, properties OnlineExperimentWorkspacePatch, _ *OnlineExperimentWorkspacesClientBeginUpdateOptions) (*policy.Request, error) {
	urlPath := "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.OnlineExperimentation/workspaces/{workspaceName}"
	if client.subscriptionID == "" {
		return nil, errors.New("parameter client.subscriptionID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{subscriptionId}", url.PathEscape(client.subscriptionID))
	if resourceGroupName == "" {
		return nil, errors.New("parameter resourceGroupName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{resourceGroupName}", url.PathEscape(resourceGroupName))
	if workspaceName == "" {
		return nil, errors.New("parameter workspaceName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{workspaceName}", url.PathEscape(workspaceName))
	req, err := runtime.NewRequest(ctx, http.MethodPatch, runtime.JoinPaths(client.internal.Endpoint(), urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("api-version", "2025-05-31-preview")
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header["Accept"] = []string{"application/json"}
	req.Raw().Header["Content-Type"] = []string{"application/json"}
	if err := runtime.MarshalAsJSON(req, properties); err != nil {
		return nil, err
	}
	return req, nil
}
