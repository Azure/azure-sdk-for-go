//go:build go1.18
// +build go1.18

// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator. DO NOT EDIT.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

package fake

import (
	"context"
	"errors"
	"fmt"
	azfake "github.com/Azure/azure-sdk-for-go/sdk/azcore/fake"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/fake/server"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/runtime"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/to"
	"github.com/Azure/azure-sdk-for-go/sdk/resourcemanager/operationalinsights/armoperationalinsights/v2"
	"net/http"
	"net/url"
	"regexp"
)

// QueryPacksServer is a fake server for instances of the armoperationalinsights.QueryPacksClient type.
type QueryPacksServer struct {
	// CreateOrUpdate is the fake for method QueryPacksClient.CreateOrUpdate
	// HTTP status codes to indicate success: http.StatusOK
	CreateOrUpdate func(ctx context.Context, resourceGroupName string, queryPackName string, logAnalyticsQueryPackPayload armoperationalinsights.LogAnalyticsQueryPack, options *armoperationalinsights.QueryPacksClientCreateOrUpdateOptions) (resp azfake.Responder[armoperationalinsights.QueryPacksClientCreateOrUpdateResponse], errResp azfake.ErrorResponder)

	// CreateOrUpdateWithoutName is the fake for method QueryPacksClient.CreateOrUpdateWithoutName
	// HTTP status codes to indicate success: http.StatusCreated
	CreateOrUpdateWithoutName func(ctx context.Context, resourceGroupName string, logAnalyticsQueryPackPayload armoperationalinsights.LogAnalyticsQueryPack, options *armoperationalinsights.QueryPacksClientCreateOrUpdateWithoutNameOptions) (resp azfake.Responder[armoperationalinsights.QueryPacksClientCreateOrUpdateWithoutNameResponse], errResp azfake.ErrorResponder)

	// Delete is the fake for method QueryPacksClient.Delete
	// HTTP status codes to indicate success: http.StatusOK, http.StatusNoContent
	Delete func(ctx context.Context, resourceGroupName string, queryPackName string, options *armoperationalinsights.QueryPacksClientDeleteOptions) (resp azfake.Responder[armoperationalinsights.QueryPacksClientDeleteResponse], errResp azfake.ErrorResponder)

	// Get is the fake for method QueryPacksClient.Get
	// HTTP status codes to indicate success: http.StatusOK
	Get func(ctx context.Context, resourceGroupName string, queryPackName string, options *armoperationalinsights.QueryPacksClientGetOptions) (resp azfake.Responder[armoperationalinsights.QueryPacksClientGetResponse], errResp azfake.ErrorResponder)

	// NewListPager is the fake for method QueryPacksClient.NewListPager
	// HTTP status codes to indicate success: http.StatusOK
	NewListPager func(options *armoperationalinsights.QueryPacksClientListOptions) (resp azfake.PagerResponder[armoperationalinsights.QueryPacksClientListResponse])

	// NewListByResourceGroupPager is the fake for method QueryPacksClient.NewListByResourceGroupPager
	// HTTP status codes to indicate success: http.StatusOK
	NewListByResourceGroupPager func(resourceGroupName string, options *armoperationalinsights.QueryPacksClientListByResourceGroupOptions) (resp azfake.PagerResponder[armoperationalinsights.QueryPacksClientListByResourceGroupResponse])

	// UpdateTags is the fake for method QueryPacksClient.UpdateTags
	// HTTP status codes to indicate success: http.StatusOK
	UpdateTags func(ctx context.Context, resourceGroupName string, queryPackName string, queryPackTags armoperationalinsights.TagsResource, options *armoperationalinsights.QueryPacksClientUpdateTagsOptions) (resp azfake.Responder[armoperationalinsights.QueryPacksClientUpdateTagsResponse], errResp azfake.ErrorResponder)
}

// NewQueryPacksServerTransport creates a new instance of QueryPacksServerTransport with the provided implementation.
// The returned QueryPacksServerTransport instance is connected to an instance of armoperationalinsights.QueryPacksClient via the
// azcore.ClientOptions.Transporter field in the client's constructor parameters.
func NewQueryPacksServerTransport(srv *QueryPacksServer) *QueryPacksServerTransport {
	return &QueryPacksServerTransport{
		srv:                         srv,
		newListPager:                newTracker[azfake.PagerResponder[armoperationalinsights.QueryPacksClientListResponse]](),
		newListByResourceGroupPager: newTracker[azfake.PagerResponder[armoperationalinsights.QueryPacksClientListByResourceGroupResponse]](),
	}
}

// QueryPacksServerTransport connects instances of armoperationalinsights.QueryPacksClient to instances of QueryPacksServer.
// Don't use this type directly, use NewQueryPacksServerTransport instead.
type QueryPacksServerTransport struct {
	srv                         *QueryPacksServer
	newListPager                *tracker[azfake.PagerResponder[armoperationalinsights.QueryPacksClientListResponse]]
	newListByResourceGroupPager *tracker[azfake.PagerResponder[armoperationalinsights.QueryPacksClientListByResourceGroupResponse]]
}

// Do implements the policy.Transporter interface for QueryPacksServerTransport.
func (q *QueryPacksServerTransport) Do(req *http.Request) (*http.Response, error) {
	rawMethod := req.Context().Value(runtime.CtxAPINameKey{})
	method, ok := rawMethod.(string)
	if !ok {
		return nil, nonRetriableError{errors.New("unable to dispatch request, missing value for CtxAPINameKey")}
	}

	var resp *http.Response
	var err error

	switch method {
	case "QueryPacksClient.CreateOrUpdate":
		resp, err = q.dispatchCreateOrUpdate(req)
	case "QueryPacksClient.CreateOrUpdateWithoutName":
		resp, err = q.dispatchCreateOrUpdateWithoutName(req)
	case "QueryPacksClient.Delete":
		resp, err = q.dispatchDelete(req)
	case "QueryPacksClient.Get":
		resp, err = q.dispatchGet(req)
	case "QueryPacksClient.NewListPager":
		resp, err = q.dispatchNewListPager(req)
	case "QueryPacksClient.NewListByResourceGroupPager":
		resp, err = q.dispatchNewListByResourceGroupPager(req)
	case "QueryPacksClient.UpdateTags":
		resp, err = q.dispatchUpdateTags(req)
	default:
		err = fmt.Errorf("unhandled API %s", method)
	}

	if err != nil {
		return nil, err
	}

	return resp, nil
}

func (q *QueryPacksServerTransport) dispatchCreateOrUpdate(req *http.Request) (*http.Response, error) {
	if q.srv.CreateOrUpdate == nil {
		return nil, &nonRetriableError{errors.New("fake for method CreateOrUpdate not implemented")}
	}
	const regexStr = `/subscriptions/(?P<subscriptionId>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/resourceGroups/(?P<resourceGroupName>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/providers/Microsoft\.OperationalInsights/queryPacks/(?P<queryPackName>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)`
	regex := regexp.MustCompile(regexStr)
	matches := regex.FindStringSubmatch(req.URL.EscapedPath())
	if matches == nil || len(matches) < 3 {
		return nil, fmt.Errorf("failed to parse path %s", req.URL.Path)
	}
	body, err := server.UnmarshalRequestAsJSON[armoperationalinsights.LogAnalyticsQueryPack](req)
	if err != nil {
		return nil, err
	}
	resourceGroupNameParam, err := url.PathUnescape(matches[regex.SubexpIndex("resourceGroupName")])
	if err != nil {
		return nil, err
	}
	queryPackNameParam, err := url.PathUnescape(matches[regex.SubexpIndex("queryPackName")])
	if err != nil {
		return nil, err
	}
	respr, errRespr := q.srv.CreateOrUpdate(req.Context(), resourceGroupNameParam, queryPackNameParam, body, nil)
	if respErr := server.GetError(errRespr, req); respErr != nil {
		return nil, respErr
	}
	respContent := server.GetResponseContent(respr)
	if !contains([]int{http.StatusOK}, respContent.HTTPStatus) {
		return nil, &nonRetriableError{fmt.Errorf("unexpected status code %d. acceptable values are http.StatusOK", respContent.HTTPStatus)}
	}
	resp, err := server.MarshalResponseAsJSON(respContent, server.GetResponse(respr).LogAnalyticsQueryPack, req)
	if err != nil {
		return nil, err
	}
	return resp, nil
}

func (q *QueryPacksServerTransport) dispatchCreateOrUpdateWithoutName(req *http.Request) (*http.Response, error) {
	if q.srv.CreateOrUpdateWithoutName == nil {
		return nil, &nonRetriableError{errors.New("fake for method CreateOrUpdateWithoutName not implemented")}
	}
	const regexStr = `/subscriptions/(?P<subscriptionId>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/resourceGroups/(?P<resourceGroupName>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/providers/Microsoft\.OperationalInsights/queryPacks`
	regex := regexp.MustCompile(regexStr)
	matches := regex.FindStringSubmatch(req.URL.EscapedPath())
	if matches == nil || len(matches) < 2 {
		return nil, fmt.Errorf("failed to parse path %s", req.URL.Path)
	}
	body, err := server.UnmarshalRequestAsJSON[armoperationalinsights.LogAnalyticsQueryPack](req)
	if err != nil {
		return nil, err
	}
	resourceGroupNameParam, err := url.PathUnescape(matches[regex.SubexpIndex("resourceGroupName")])
	if err != nil {
		return nil, err
	}
	respr, errRespr := q.srv.CreateOrUpdateWithoutName(req.Context(), resourceGroupNameParam, body, nil)
	if respErr := server.GetError(errRespr, req); respErr != nil {
		return nil, respErr
	}
	respContent := server.GetResponseContent(respr)
	if !contains([]int{http.StatusCreated}, respContent.HTTPStatus) {
		return nil, &nonRetriableError{fmt.Errorf("unexpected status code %d. acceptable values are http.StatusCreated", respContent.HTTPStatus)}
	}
	resp, err := server.MarshalResponseAsJSON(respContent, server.GetResponse(respr).LogAnalyticsQueryPack, req)
	if err != nil {
		return nil, err
	}
	return resp, nil
}

func (q *QueryPacksServerTransport) dispatchDelete(req *http.Request) (*http.Response, error) {
	if q.srv.Delete == nil {
		return nil, &nonRetriableError{errors.New("fake for method Delete not implemented")}
	}
	const regexStr = `/subscriptions/(?P<subscriptionId>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/resourceGroups/(?P<resourceGroupName>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/providers/Microsoft\.OperationalInsights/queryPacks/(?P<queryPackName>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)`
	regex := regexp.MustCompile(regexStr)
	matches := regex.FindStringSubmatch(req.URL.EscapedPath())
	if matches == nil || len(matches) < 3 {
		return nil, fmt.Errorf("failed to parse path %s", req.URL.Path)
	}
	resourceGroupNameParam, err := url.PathUnescape(matches[regex.SubexpIndex("resourceGroupName")])
	if err != nil {
		return nil, err
	}
	queryPackNameParam, err := url.PathUnescape(matches[regex.SubexpIndex("queryPackName")])
	if err != nil {
		return nil, err
	}
	respr, errRespr := q.srv.Delete(req.Context(), resourceGroupNameParam, queryPackNameParam, nil)
	if respErr := server.GetError(errRespr, req); respErr != nil {
		return nil, respErr
	}
	respContent := server.GetResponseContent(respr)
	if !contains([]int{http.StatusOK, http.StatusNoContent}, respContent.HTTPStatus) {
		return nil, &nonRetriableError{fmt.Errorf("unexpected status code %d. acceptable values are http.StatusOK, http.StatusNoContent", respContent.HTTPStatus)}
	}
	resp, err := server.NewResponse(respContent, req, nil)
	if err != nil {
		return nil, err
	}
	return resp, nil
}

func (q *QueryPacksServerTransport) dispatchGet(req *http.Request) (*http.Response, error) {
	if q.srv.Get == nil {
		return nil, &nonRetriableError{errors.New("fake for method Get not implemented")}
	}
	const regexStr = `/subscriptions/(?P<subscriptionId>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/resourceGroups/(?P<resourceGroupName>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/providers/Microsoft\.OperationalInsights/queryPacks/(?P<queryPackName>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)`
	regex := regexp.MustCompile(regexStr)
	matches := regex.FindStringSubmatch(req.URL.EscapedPath())
	if matches == nil || len(matches) < 3 {
		return nil, fmt.Errorf("failed to parse path %s", req.URL.Path)
	}
	resourceGroupNameParam, err := url.PathUnescape(matches[regex.SubexpIndex("resourceGroupName")])
	if err != nil {
		return nil, err
	}
	queryPackNameParam, err := url.PathUnescape(matches[regex.SubexpIndex("queryPackName")])
	if err != nil {
		return nil, err
	}
	respr, errRespr := q.srv.Get(req.Context(), resourceGroupNameParam, queryPackNameParam, nil)
	if respErr := server.GetError(errRespr, req); respErr != nil {
		return nil, respErr
	}
	respContent := server.GetResponseContent(respr)
	if !contains([]int{http.StatusOK}, respContent.HTTPStatus) {
		return nil, &nonRetriableError{fmt.Errorf("unexpected status code %d. acceptable values are http.StatusOK", respContent.HTTPStatus)}
	}
	resp, err := server.MarshalResponseAsJSON(respContent, server.GetResponse(respr).LogAnalyticsQueryPack, req)
	if err != nil {
		return nil, err
	}
	return resp, nil
}

func (q *QueryPacksServerTransport) dispatchNewListPager(req *http.Request) (*http.Response, error) {
	if q.srv.NewListPager == nil {
		return nil, &nonRetriableError{errors.New("fake for method NewListPager not implemented")}
	}
	newListPager := q.newListPager.get(req)
	if newListPager == nil {
		const regexStr = `/subscriptions/(?P<subscriptionId>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/providers/Microsoft\.OperationalInsights/queryPacks`
		regex := regexp.MustCompile(regexStr)
		matches := regex.FindStringSubmatch(req.URL.EscapedPath())
		if matches == nil || len(matches) < 1 {
			return nil, fmt.Errorf("failed to parse path %s", req.URL.Path)
		}
		resp := q.srv.NewListPager(nil)
		newListPager = &resp
		q.newListPager.add(req, newListPager)
		server.PagerResponderInjectNextLinks(newListPager, req, func(page *armoperationalinsights.QueryPacksClientListResponse, createLink func() string) {
			page.NextLink = to.Ptr(createLink())
		})
	}
	resp, err := server.PagerResponderNext(newListPager, req)
	if err != nil {
		return nil, err
	}
	if !contains([]int{http.StatusOK}, resp.StatusCode) {
		q.newListPager.remove(req)
		return nil, &nonRetriableError{fmt.Errorf("unexpected status code %d. acceptable values are http.StatusOK", resp.StatusCode)}
	}
	if !server.PagerResponderMore(newListPager) {
		q.newListPager.remove(req)
	}
	return resp, nil
}

func (q *QueryPacksServerTransport) dispatchNewListByResourceGroupPager(req *http.Request) (*http.Response, error) {
	if q.srv.NewListByResourceGroupPager == nil {
		return nil, &nonRetriableError{errors.New("fake for method NewListByResourceGroupPager not implemented")}
	}
	newListByResourceGroupPager := q.newListByResourceGroupPager.get(req)
	if newListByResourceGroupPager == nil {
		const regexStr = `/subscriptions/(?P<subscriptionId>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/resourceGroups/(?P<resourceGroupName>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/providers/Microsoft\.OperationalInsights/queryPacks`
		regex := regexp.MustCompile(regexStr)
		matches := regex.FindStringSubmatch(req.URL.EscapedPath())
		if matches == nil || len(matches) < 2 {
			return nil, fmt.Errorf("failed to parse path %s", req.URL.Path)
		}
		resourceGroupNameParam, err := url.PathUnescape(matches[regex.SubexpIndex("resourceGroupName")])
		if err != nil {
			return nil, err
		}
		resp := q.srv.NewListByResourceGroupPager(resourceGroupNameParam, nil)
		newListByResourceGroupPager = &resp
		q.newListByResourceGroupPager.add(req, newListByResourceGroupPager)
		server.PagerResponderInjectNextLinks(newListByResourceGroupPager, req, func(page *armoperationalinsights.QueryPacksClientListByResourceGroupResponse, createLink func() string) {
			page.NextLink = to.Ptr(createLink())
		})
	}
	resp, err := server.PagerResponderNext(newListByResourceGroupPager, req)
	if err != nil {
		return nil, err
	}
	if !contains([]int{http.StatusOK}, resp.StatusCode) {
		q.newListByResourceGroupPager.remove(req)
		return nil, &nonRetriableError{fmt.Errorf("unexpected status code %d. acceptable values are http.StatusOK", resp.StatusCode)}
	}
	if !server.PagerResponderMore(newListByResourceGroupPager) {
		q.newListByResourceGroupPager.remove(req)
	}
	return resp, nil
}

func (q *QueryPacksServerTransport) dispatchUpdateTags(req *http.Request) (*http.Response, error) {
	if q.srv.UpdateTags == nil {
		return nil, &nonRetriableError{errors.New("fake for method UpdateTags not implemented")}
	}
	const regexStr = `/subscriptions/(?P<subscriptionId>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/resourceGroups/(?P<resourceGroupName>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/providers/Microsoft\.OperationalInsights/queryPacks/(?P<queryPackName>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)`
	regex := regexp.MustCompile(regexStr)
	matches := regex.FindStringSubmatch(req.URL.EscapedPath())
	if matches == nil || len(matches) < 3 {
		return nil, fmt.Errorf("failed to parse path %s", req.URL.Path)
	}
	body, err := server.UnmarshalRequestAsJSON[armoperationalinsights.TagsResource](req)
	if err != nil {
		return nil, err
	}
	resourceGroupNameParam, err := url.PathUnescape(matches[regex.SubexpIndex("resourceGroupName")])
	if err != nil {
		return nil, err
	}
	queryPackNameParam, err := url.PathUnescape(matches[regex.SubexpIndex("queryPackName")])
	if err != nil {
		return nil, err
	}
	respr, errRespr := q.srv.UpdateTags(req.Context(), resourceGroupNameParam, queryPackNameParam, body, nil)
	if respErr := server.GetError(errRespr, req); respErr != nil {
		return nil, respErr
	}
	respContent := server.GetResponseContent(respr)
	if !contains([]int{http.StatusOK}, respContent.HTTPStatus) {
		return nil, &nonRetriableError{fmt.Errorf("unexpected status code %d. acceptable values are http.StatusOK", respContent.HTTPStatus)}
	}
	resp, err := server.MarshalResponseAsJSON(respContent, server.GetResponse(respr).LogAnalyticsQueryPack, req)
	if err != nil {
		return nil, err
	}
	return resp, nil
}
