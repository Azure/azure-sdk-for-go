//go:build go1.16
// +build go1.16

// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

package armoperationalinsights

import (
	"encoding/json"
	"reflect"
	"time"

	"github.com/Azure/azure-sdk-for-go/sdk/azcore"
)

// AssociatedWorkspace - The list of Log Analytics workspaces associated with the cluster.
type AssociatedWorkspace struct {
	// READ-ONLY; The time of workspace association.
	AssociateDate *string `json:"associateDate,omitempty" azure:"ro"`

	// READ-ONLY; The ResourceId id the assigned workspace.
	ResourceID *string `json:"resourceId,omitempty" azure:"ro"`

	// READ-ONLY; The id of the assigned workspace.
	WorkspaceID *string `json:"workspaceId,omitempty" azure:"ro"`

	// READ-ONLY; The name id the assigned workspace.
	WorkspaceName *string `json:"workspaceName,omitempty" azure:"ro"`
}

// AvailableServiceTier - Service Tier details.
type AvailableServiceTier struct {
	// READ-ONLY; The capacity reservation level in GB per day. Returned for the Capacity Reservation Service Tier.
	CapacityReservationLevel *int64 `json:"capacityReservationLevel,omitempty" azure:"ro"`

	// READ-ONLY; The default retention for the Service Tier, in days.
	DefaultRetention *int64 `json:"defaultRetention,omitempty" azure:"ro"`

	// READ-ONLY; True if the Service Tier is enabled for the workspace.
	Enabled *bool `json:"enabled,omitempty" azure:"ro"`

	// READ-ONLY; Time when the sku was last updated for the workspace. Returned for the Capacity Reservation Service Tier.
	LastSKUUpdate *string `json:"lastSkuUpdate,omitempty" azure:"ro"`

	// READ-ONLY; The maximum retention for the Service Tier, in days.
	MaximumRetention *int64 `json:"maximumRetention,omitempty" azure:"ro"`

	// READ-ONLY; The minimum retention for the Service Tier, in days.
	MinimumRetention *int64 `json:"minimumRetention,omitempty" azure:"ro"`

	// READ-ONLY; The name of the Service Tier.
	ServiceTier *SKUNameEnum `json:"serviceTier,omitempty" azure:"ro"`
}

// AvailableServiceTiersListByWorkspaceOptions contains the optional parameters for the AvailableServiceTiers.ListByWorkspace method.
type AvailableServiceTiersListByWorkspaceOptions struct {
	// placeholder for future optional parameters
}

// AzureEntityResource - The resource model definition for an Azure Resource Manager resource with an etag.
type AzureEntityResource struct {
	Resource
	// READ-ONLY; Resource Etag.
	Etag *string `json:"etag,omitempty" azure:"ro"`
}

// MarshalJSON implements the json.Marshaller interface for type AzureEntityResource.
func (a AzureEntityResource) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	a.marshalInternal(objectMap)
	return json.Marshal(objectMap)
}

func (a AzureEntityResource) marshalInternal(objectMap map[string]interface{}) {
	a.Resource.marshalInternal(objectMap)
	populate(objectMap, "etag", a.Etag)
}

// CapacityReservationProperties - The Capacity Reservation properties.
type CapacityReservationProperties struct {
	// READ-ONLY; The last time Sku was updated.
	LastSKUUpdate *string `json:"lastSkuUpdate,omitempty" azure:"ro"`

	// READ-ONLY; Minimum CapacityReservation value in GB.
	MinCapacity *int64 `json:"minCapacity,omitempty" azure:"ro"`
}

// Cluster - The top level Log Analytics cluster resource container.
type Cluster struct {
	TrackedResource
	// The identity of the resource.
	Identity *Identity `json:"identity,omitempty"`

	// Log Analytics cluster properties.
	Properties *ClusterProperties `json:"properties,omitempty"`

	// The sku properties.
	SKU *ClusterSKU `json:"sku,omitempty"`
}

// MarshalJSON implements the json.Marshaller interface for type Cluster.
func (c Cluster) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	c.TrackedResource.marshalInternal(objectMap)
	populate(objectMap, "identity", c.Identity)
	populate(objectMap, "properties", c.Properties)
	populate(objectMap, "sku", c.SKU)
	return json.Marshal(objectMap)
}

// ClusterListResult - The list clusters operation response.
type ClusterListResult struct {
	// The link used to get the next page of recommendations.
	NextLink *string `json:"nextLink,omitempty"`

	// A list of Log Analytics clusters.
	Value []*Cluster `json:"value,omitempty"`
}

// MarshalJSON implements the json.Marshaller interface for type ClusterListResult.
func (c ClusterListResult) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "nextLink", c.NextLink)
	populate(objectMap, "value", c.Value)
	return json.Marshal(objectMap)
}

// ClusterPatch - The top level Log Analytics cluster resource container.
type ClusterPatch struct {
	// The identity of the resource.
	Identity *Identity `json:"identity,omitempty"`

	// Log Analytics cluster properties.
	Properties *ClusterPatchProperties `json:"properties,omitempty"`

	// The sku properties.
	SKU *ClusterSKU `json:"sku,omitempty"`

	// Resource tags.
	Tags map[string]*string `json:"tags,omitempty"`
}

// MarshalJSON implements the json.Marshaller interface for type ClusterPatch.
func (c ClusterPatch) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "identity", c.Identity)
	populate(objectMap, "properties", c.Properties)
	populate(objectMap, "sku", c.SKU)
	populate(objectMap, "tags", c.Tags)
	return json.Marshal(objectMap)
}

// ClusterPatchProperties - Log Analytics cluster patch properties.
type ClusterPatchProperties struct {
	// The cluster's billing type.
	BillingType *BillingType `json:"billingType,omitempty"`

	// The associated key properties.
	KeyVaultProperties *KeyVaultProperties `json:"keyVaultProperties,omitempty"`
}

// ClusterProperties - Cluster properties.
type ClusterProperties struct {
	// The list of Log Analytics workspaces associated with the cluster
	AssociatedWorkspaces []*AssociatedWorkspace `json:"associatedWorkspaces,omitempty"`

	// The cluster's billing type.
	BillingType *BillingType `json:"billingType,omitempty"`

	// Additional properties for capacity reservation
	CapacityReservationProperties *CapacityReservationProperties `json:"capacityReservationProperties,omitempty"`

	// Sets whether the cluster will support availability zones. This can be set as true only in regions where Azure Data Explorer support Availability Zones.
	// This Property can not be modified after cluster
	// creation. Default value is 'true' if region supports Availability Zones.
	IsAvailabilityZonesEnabled *bool `json:"isAvailabilityZonesEnabled,omitempty"`

	// Configures whether cluster will use double encryption. This Property can not be modified after cluster creation. Default value is 'true'
	IsDoubleEncryptionEnabled *bool `json:"isDoubleEncryptionEnabled,omitempty"`

	// The associated key properties.
	KeyVaultProperties *KeyVaultProperties `json:"keyVaultProperties,omitempty"`

	// READ-ONLY; The ID associated with the cluster.
	ClusterID *string `json:"clusterId,omitempty" azure:"ro"`

	// READ-ONLY; The cluster creation time
	CreatedDate *string `json:"createdDate,omitempty" azure:"ro"`

	// READ-ONLY; The last time the cluster was updated.
	LastModifiedDate *string `json:"lastModifiedDate,omitempty" azure:"ro"`

	// READ-ONLY; The provisioning state of the cluster.
	ProvisioningState *ClusterEntityStatus `json:"provisioningState,omitempty" azure:"ro"`
}

// MarshalJSON implements the json.Marshaller interface for type ClusterProperties.
func (c ClusterProperties) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "associatedWorkspaces", c.AssociatedWorkspaces)
	populate(objectMap, "billingType", c.BillingType)
	populate(objectMap, "capacityReservationProperties", c.CapacityReservationProperties)
	populate(objectMap, "clusterId", c.ClusterID)
	populate(objectMap, "createdDate", c.CreatedDate)
	populate(objectMap, "isAvailabilityZonesEnabled", c.IsAvailabilityZonesEnabled)
	populate(objectMap, "isDoubleEncryptionEnabled", c.IsDoubleEncryptionEnabled)
	populate(objectMap, "keyVaultProperties", c.KeyVaultProperties)
	populate(objectMap, "lastModifiedDate", c.LastModifiedDate)
	populate(objectMap, "provisioningState", c.ProvisioningState)
	return json.Marshal(objectMap)
}

// ClusterSKU - The cluster sku definition.
type ClusterSKU struct {
	// The capacity value
	Capacity *Capacity `json:"capacity,omitempty"`

	// The name of the SKU.
	Name *ClusterSKUNameEnum `json:"name,omitempty"`
}

// ClustersBeginCreateOrUpdateOptions contains the optional parameters for the Clusters.BeginCreateOrUpdate method.
type ClustersBeginCreateOrUpdateOptions struct {
	// placeholder for future optional parameters
}

// ClustersBeginDeleteOptions contains the optional parameters for the Clusters.BeginDelete method.
type ClustersBeginDeleteOptions struct {
	// placeholder for future optional parameters
}

// ClustersGetOptions contains the optional parameters for the Clusters.Get method.
type ClustersGetOptions struct {
	// placeholder for future optional parameters
}

// ClustersListByResourceGroupOptions contains the optional parameters for the Clusters.ListByResourceGroup method.
type ClustersListByResourceGroupOptions struct {
	// placeholder for future optional parameters
}

// ClustersListOptions contains the optional parameters for the Clusters.List method.
type ClustersListOptions struct {
	// placeholder for future optional parameters
}

// ClustersUpdateOptions contains the optional parameters for the Clusters.Update method.
type ClustersUpdateOptions struct {
	// placeholder for future optional parameters
}

// CoreSummary - The core summary of a search.
type CoreSummary struct {
	// REQUIRED; The number of documents of a core summary.
	NumberOfDocuments *int64 `json:"numberOfDocuments,omitempty"`

	// The status of a core summary.
	Status *string `json:"status,omitempty"`
}

// DataExport - The top level data export resource container.
type DataExport struct {
	ProxyResource
	// data export properties.
	Properties *DataExportProperties `json:"properties,omitempty"`
}

// MarshalJSON implements the json.Marshaller interface for type DataExport.
func (d DataExport) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	d.ProxyResource.marshalInternal(objectMap)
	populate(objectMap, "properties", d.Properties)
	return json.Marshal(objectMap)
}

// DataExportListResult - Result of the request to list data exports.
type DataExportListResult struct {
	// List of data export instances within a workspace..
	Value []*DataExport `json:"value,omitempty"`
}

// MarshalJSON implements the json.Marshaller interface for type DataExportListResult.
func (d DataExportListResult) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "value", d.Value)
	return json.Marshal(objectMap)
}

// DataExportProperties - Data Export properties.
type DataExportProperties struct {
	// REQUIRED; An array of tables to export, for example: [“Heartbeat, SecurityEvent”].
	TableNames []*string `json:"tableNames,omitempty"`

	// The latest data export rule modification time.
	CreatedDate *string `json:"createdDate,omitempty"`

	// The data export rule ID.
	DataExportID *string `json:"dataExportId,omitempty"`

	// destination properties.
	Destination *Destination `json:"destination,omitempty"`

	// Active when enabled.
	Enable *bool `json:"enable,omitempty"`

	// Date and time when the export was last modified.
	LastModifiedDate *string `json:"lastModifiedDate,omitempty"`
}

// MarshalJSON implements the json.Marshaller interface for type DataExportProperties.
func (d DataExportProperties) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "createdDate", d.CreatedDate)
	populate(objectMap, "dataExportId", d.DataExportID)
	populate(objectMap, "destination", d.Destination)
	populate(objectMap, "enable", d.Enable)
	populate(objectMap, "lastModifiedDate", d.LastModifiedDate)
	populate(objectMap, "tableNames", d.TableNames)
	return json.Marshal(objectMap)
}

// DataExportsCreateOrUpdateOptions contains the optional parameters for the DataExports.CreateOrUpdate method.
type DataExportsCreateOrUpdateOptions struct {
	// placeholder for future optional parameters
}

// DataExportsDeleteOptions contains the optional parameters for the DataExports.Delete method.
type DataExportsDeleteOptions struct {
	// placeholder for future optional parameters
}

// DataExportsGetOptions contains the optional parameters for the DataExports.Get method.
type DataExportsGetOptions struct {
	// placeholder for future optional parameters
}

// DataExportsListByWorkspaceOptions contains the optional parameters for the DataExports.ListByWorkspace method.
type DataExportsListByWorkspaceOptions struct {
	// placeholder for future optional parameters
}

// DataSource - Datasources under OMS Workspace.
type DataSource struct {
	ProxyResource
	// REQUIRED; The kind of the DataSource.
	Kind *DataSourceKind `json:"kind,omitempty"`

	// REQUIRED; The data source properties in raw json format, each kind of data source have it's own schema.
	Properties map[string]interface{} `json:"properties,omitempty"`

	// The ETag of the data source.
	Etag *string `json:"etag,omitempty"`

	// Resource tags.
	Tags map[string]*string `json:"tags,omitempty"`
}

// MarshalJSON implements the json.Marshaller interface for type DataSource.
func (d DataSource) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	d.ProxyResource.marshalInternal(objectMap)
	populate(objectMap, "etag", d.Etag)
	populate(objectMap, "kind", d.Kind)
	populate(objectMap, "properties", d.Properties)
	populate(objectMap, "tags", d.Tags)
	return json.Marshal(objectMap)
}

// DataSourceFilter - DataSource filter. Right now, only filter by kind is supported.
type DataSourceFilter struct {
	// The kind of the DataSource.
	Kind *DataSourceKind `json:"kind,omitempty"`
}

// DataSourceListResult - The list data source by workspace operation response.
type DataSourceListResult struct {
	// The link (url) to the next page of datasources.
	NextLink *string `json:"nextLink,omitempty"`

	// A list of datasources.
	Value []*DataSource `json:"value,omitempty"`
}

// MarshalJSON implements the json.Marshaller interface for type DataSourceListResult.
func (d DataSourceListResult) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "nextLink", d.NextLink)
	populate(objectMap, "value", d.Value)
	return json.Marshal(objectMap)
}

// DataSourcesCreateOrUpdateOptions contains the optional parameters for the DataSources.CreateOrUpdate method.
type DataSourcesCreateOrUpdateOptions struct {
	// placeholder for future optional parameters
}

// DataSourcesDeleteOptions contains the optional parameters for the DataSources.Delete method.
type DataSourcesDeleteOptions struct {
	// placeholder for future optional parameters
}

// DataSourcesGetOptions contains the optional parameters for the DataSources.Get method.
type DataSourcesGetOptions struct {
	// placeholder for future optional parameters
}

// DataSourcesListByWorkspaceOptions contains the optional parameters for the DataSources.ListByWorkspace method.
type DataSourcesListByWorkspaceOptions struct {
	// Starting point of the collection of data source instances.
	Skiptoken *string
}

// DeletedWorkspacesListByResourceGroupOptions contains the optional parameters for the DeletedWorkspaces.ListByResourceGroup method.
type DeletedWorkspacesListByResourceGroupOptions struct {
	// placeholder for future optional parameters
}

// DeletedWorkspacesListOptions contains the optional parameters for the DeletedWorkspaces.List method.
type DeletedWorkspacesListOptions struct {
	// placeholder for future optional parameters
}

// Destination properties.
type Destination struct {
	// REQUIRED; The destination resource ID. This can be copied from the Properties entry of the destination resource in Azure.
	ResourceID *string `json:"resourceId,omitempty"`

	// destination meta data.
	MetaData *DestinationMetaData `json:"metaData,omitempty"`

	// READ-ONLY; The type of the destination resource
	Type *Type `json:"type,omitempty" azure:"ro"`
}

// DestinationMetaData - Destination meta data.
type DestinationMetaData struct {
	// Optional. Allows to define an Event Hub name. Not applicable when destination is Storage Account.
	EventHubName *string `json:"eventHubName,omitempty"`
}

// ErrorAdditionalInfo - The resource management error additional info.
type ErrorAdditionalInfo struct {
	// READ-ONLY; The additional info.
	Info map[string]interface{} `json:"info,omitempty" azure:"ro"`

	// READ-ONLY; The additional info type.
	Type *string `json:"type,omitempty" azure:"ro"`
}

// ErrorDetail - The error detail.
type ErrorDetail struct {
	// READ-ONLY; The error additional info.
	AdditionalInfo []*ErrorAdditionalInfo `json:"additionalInfo,omitempty" azure:"ro"`

	// READ-ONLY; The error code.
	Code *string `json:"code,omitempty" azure:"ro"`

	// READ-ONLY; The error details.
	Details []*ErrorDetail `json:"details,omitempty" azure:"ro"`

	// READ-ONLY; The error message.
	Message *string `json:"message,omitempty" azure:"ro"`

	// READ-ONLY; The error target.
	Target *string `json:"target,omitempty" azure:"ro"`
}

// MarshalJSON implements the json.Marshaller interface for type ErrorDetail.
func (e ErrorDetail) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "additionalInfo", e.AdditionalInfo)
	populate(objectMap, "code", e.Code)
	populate(objectMap, "details", e.Details)
	populate(objectMap, "message", e.Message)
	populate(objectMap, "target", e.Target)
	return json.Marshal(objectMap)
}

// ErrorResponse - Common error response for all Azure Resource Manager APIs to return error details for failed operations. (This also follows the OData
// error response format.).
// Implements the error and azcore.HTTPResponse interfaces.
type ErrorResponse struct {
	raw string
	// The error object.
	InnerError *ErrorDetail `json:"error,omitempty"`
}

// Error implements the error interface for type ErrorResponse.
// The contents of the error text are not contractual and subject to change.
func (e ErrorResponse) Error() string {
	return e.raw
}

// GatewaysDeleteOptions contains the optional parameters for the Gateways.Delete method.
type GatewaysDeleteOptions struct {
	// placeholder for future optional parameters
}

// Identity for the resource.
type Identity struct {
	// REQUIRED; Type of managed service identity.
	Type *IdentityType `json:"type,omitempty"`

	// The list of user identities associated with the resource. The user identity dictionary key references will be ARM resource ids in the form:
	// '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ManagedIdentity/userAssignedIdentities/{identityName}'.
	UserAssignedIdentities map[string]*UserIdentityProperties `json:"userAssignedIdentities,omitempty"`

	// READ-ONLY; The principal ID of resource identity.
	PrincipalID *string `json:"principalId,omitempty" azure:"ro"`

	// READ-ONLY; The tenant ID of resource.
	TenantID *string `json:"tenantId,omitempty" azure:"ro"`
}

// MarshalJSON implements the json.Marshaller interface for type Identity.
func (i Identity) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "principalId", i.PrincipalID)
	populate(objectMap, "tenantId", i.TenantID)
	populate(objectMap, "type", i.Type)
	populate(objectMap, "userAssignedIdentities", i.UserAssignedIdentities)
	return json.Marshal(objectMap)
}

// IntelligencePack - Intelligence Pack containing a string name and boolean indicating if it's enabled.
type IntelligencePack struct {
	// The display name of the intelligence pack.
	DisplayName *string `json:"displayName,omitempty"`

	// The enabled boolean for the intelligence pack.
	Enabled *bool `json:"enabled,omitempty"`

	// The name of the intelligence pack.
	Name *string `json:"name,omitempty"`
}

// IntelligencePacksDisableOptions contains the optional parameters for the IntelligencePacks.Disable method.
type IntelligencePacksDisableOptions struct {
	// placeholder for future optional parameters
}

// IntelligencePacksEnableOptions contains the optional parameters for the IntelligencePacks.Enable method.
type IntelligencePacksEnableOptions struct {
	// placeholder for future optional parameters
}

// IntelligencePacksListOptions contains the optional parameters for the IntelligencePacks.List method.
type IntelligencePacksListOptions struct {
	// placeholder for future optional parameters
}

// KeyVaultProperties - The key vault properties.
type KeyVaultProperties struct {
	// The name of the key associated with the Log Analytics cluster.
	KeyName *string `json:"keyName,omitempty"`

	// Selected key minimum required size.
	KeyRsaSize *int32 `json:"keyRsaSize,omitempty"`

	// The Key Vault uri which holds they key associated with the Log Analytics cluster.
	KeyVaultURI *string `json:"keyVaultUri,omitempty"`

	// The version of the key associated with the Log Analytics cluster.
	KeyVersion *string `json:"keyVersion,omitempty"`
}

// LinkedService - The top level Linked service resource container.
type LinkedService struct {
	ProxyResource
	// REQUIRED; The properties of the linked service.
	Properties *LinkedServiceProperties `json:"properties,omitempty"`

	// Resource tags.
	Tags map[string]*string `json:"tags,omitempty"`
}

// MarshalJSON implements the json.Marshaller interface for type LinkedService.
func (l LinkedService) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	l.ProxyResource.marshalInternal(objectMap)
	populate(objectMap, "properties", l.Properties)
	populate(objectMap, "tags", l.Tags)
	return json.Marshal(objectMap)
}

// LinkedServiceListResult - The list linked service operation response.
type LinkedServiceListResult struct {
	// The list of linked service instances
	Value []*LinkedService `json:"value,omitempty"`
}

// MarshalJSON implements the json.Marshaller interface for type LinkedServiceListResult.
func (l LinkedServiceListResult) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "value", l.Value)
	return json.Marshal(objectMap)
}

// LinkedServiceProperties - Linked service properties.
type LinkedServiceProperties struct {
	// The provisioning state of the linked service.
	ProvisioningState *LinkedServiceEntityStatus `json:"provisioningState,omitempty"`

	// The resource id of the resource that will be linked to the workspace. This should be used for linking resources which require read access
	ResourceID *string `json:"resourceId,omitempty"`

	// The resource id of the resource that will be linked to the workspace. This should be used for linking resources which require write access
	WriteAccessResourceID *string `json:"writeAccessResourceId,omitempty"`
}

// LinkedServicesBeginCreateOrUpdateOptions contains the optional parameters for the LinkedServices.BeginCreateOrUpdate method.
type LinkedServicesBeginCreateOrUpdateOptions struct {
	// placeholder for future optional parameters
}

// LinkedServicesBeginDeleteOptions contains the optional parameters for the LinkedServices.BeginDelete method.
type LinkedServicesBeginDeleteOptions struct {
	// placeholder for future optional parameters
}

// LinkedServicesGetOptions contains the optional parameters for the LinkedServices.Get method.
type LinkedServicesGetOptions struct {
	// placeholder for future optional parameters
}

// LinkedServicesListByWorkspaceOptions contains the optional parameters for the LinkedServices.ListByWorkspace method.
type LinkedServicesListByWorkspaceOptions struct {
	// placeholder for future optional parameters
}

// LinkedStorageAccountsCreateOrUpdateOptions contains the optional parameters for the LinkedStorageAccounts.CreateOrUpdate method.
type LinkedStorageAccountsCreateOrUpdateOptions struct {
	// placeholder for future optional parameters
}

// LinkedStorageAccountsDeleteOptions contains the optional parameters for the LinkedStorageAccounts.Delete method.
type LinkedStorageAccountsDeleteOptions struct {
	// placeholder for future optional parameters
}

// LinkedStorageAccountsGetOptions contains the optional parameters for the LinkedStorageAccounts.Get method.
type LinkedStorageAccountsGetOptions struct {
	// placeholder for future optional parameters
}

// LinkedStorageAccountsListByWorkspaceOptions contains the optional parameters for the LinkedStorageAccounts.ListByWorkspace method.
type LinkedStorageAccountsListByWorkspaceOptions struct {
	// placeholder for future optional parameters
}

// LinkedStorageAccountsListResult - The list linked storage accounts service operation response.
type LinkedStorageAccountsListResult struct {
	// A list of linked storage accounts instances.
	Value []*LinkedStorageAccountsResource `json:"value,omitempty"`
}

// MarshalJSON implements the json.Marshaller interface for type LinkedStorageAccountsListResult.
func (l LinkedStorageAccountsListResult) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "value", l.Value)
	return json.Marshal(objectMap)
}

// LinkedStorageAccountsProperties - Linked storage accounts properties.
type LinkedStorageAccountsProperties struct {
	// Linked storage accounts resources ids.
	StorageAccountIDs []*string `json:"storageAccountIds,omitempty"`

	// READ-ONLY; Linked storage accounts type.
	DataSourceType *DataSourceType `json:"dataSourceType,omitempty" azure:"ro"`
}

// MarshalJSON implements the json.Marshaller interface for type LinkedStorageAccountsProperties.
func (l LinkedStorageAccountsProperties) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "dataSourceType", l.DataSourceType)
	populate(objectMap, "storageAccountIds", l.StorageAccountIDs)
	return json.Marshal(objectMap)
}

// LinkedStorageAccountsResource - Linked storage accounts top level resource container.
type LinkedStorageAccountsResource struct {
	ProxyResource
	// REQUIRED; Linked storage accounts properties.
	Properties *LinkedStorageAccountsProperties `json:"properties,omitempty"`
}

// MarshalJSON implements the json.Marshaller interface for type LinkedStorageAccountsResource.
func (l LinkedStorageAccountsResource) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	l.ProxyResource.marshalInternal(objectMap)
	populate(objectMap, "properties", l.Properties)
	return json.Marshal(objectMap)
}

// ManagementGroup - A management group that is connected to a workspace
type ManagementGroup struct {
	// The properties of the management group.
	Properties *ManagementGroupProperties `json:"properties,omitempty"`
}

// ManagementGroupProperties - Management group properties.
type ManagementGroupProperties struct {
	// The datetime that the management group was created.
	Created *time.Time `json:"created,omitempty"`

	// The last datetime that the management group received data.
	DataReceived *time.Time `json:"dataReceived,omitempty"`

	// The unique ID of the management group.
	ID *string `json:"id,omitempty"`

	// Gets or sets a value indicating whether the management group is a gateway.
	IsGateway *bool `json:"isGateway,omitempty"`

	// The name of the management group.
	Name *string `json:"name,omitempty"`

	// The SKU of System Center that is managing the management group.
	SKU *string `json:"sku,omitempty"`

	// The number of servers connected to the management group.
	ServerCount *int32 `json:"serverCount,omitempty"`

	// The version of System Center that is managing the management group.
	Version *string `json:"version,omitempty"`
}

// MarshalJSON implements the json.Marshaller interface for type ManagementGroupProperties.
func (m ManagementGroupProperties) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "created", (*timeRFC3339)(m.Created))
	populate(objectMap, "dataReceived", (*timeRFC3339)(m.DataReceived))
	populate(objectMap, "id", m.ID)
	populate(objectMap, "isGateway", m.IsGateway)
	populate(objectMap, "name", m.Name)
	populate(objectMap, "sku", m.SKU)
	populate(objectMap, "serverCount", m.ServerCount)
	populate(objectMap, "version", m.Version)
	return json.Marshal(objectMap)
}

// UnmarshalJSON implements the json.Unmarshaller interface for type ManagementGroupProperties.
func (m *ManagementGroupProperties) UnmarshalJSON(data []byte) error {
	var rawMsg map[string]json.RawMessage
	if err := json.Unmarshal(data, &rawMsg); err != nil {
		return err
	}
	for key, val := range rawMsg {
		var err error
		switch key {
		case "created":
			var aux timeRFC3339
			err = unpopulate(val, &aux)
			m.Created = (*time.Time)(&aux)
			delete(rawMsg, key)
		case "dataReceived":
			var aux timeRFC3339
			err = unpopulate(val, &aux)
			m.DataReceived = (*time.Time)(&aux)
			delete(rawMsg, key)
		case "id":
			err = unpopulate(val, &m.ID)
			delete(rawMsg, key)
		case "isGateway":
			err = unpopulate(val, &m.IsGateway)
			delete(rawMsg, key)
		case "name":
			err = unpopulate(val, &m.Name)
			delete(rawMsg, key)
		case "sku":
			err = unpopulate(val, &m.SKU)
			delete(rawMsg, key)
		case "serverCount":
			err = unpopulate(val, &m.ServerCount)
			delete(rawMsg, key)
		case "version":
			err = unpopulate(val, &m.Version)
			delete(rawMsg, key)
		}
		if err != nil {
			return err
		}
	}
	return nil
}

// ManagementGroupsListOptions contains the optional parameters for the ManagementGroups.List method.
type ManagementGroupsListOptions struct {
	// placeholder for future optional parameters
}

// MetricName - The name of a metric.
type MetricName struct {
	// The localized name of the metric.
	LocalizedValue *string `json:"localizedValue,omitempty"`

	// The system name of the metric.
	Value *string `json:"value,omitempty"`
}

// Operation - Supported operation of OperationalInsights resource provider.
type Operation struct {
	// Display metadata associated with the operation.
	Display *OperationDisplay `json:"display,omitempty"`

	// Operation name: {provider}/{resource}/{operation}
	Name *string `json:"name,omitempty"`
}

// OperationDisplay - Display metadata associated with the operation.
type OperationDisplay struct {
	// Description of operation
	Description *string `json:"description,omitempty"`

	// Type of operation: get, read, delete, etc.
	Operation *string `json:"operation,omitempty"`

	// Service provider: Microsoft OperationsManagement.
	Provider *string `json:"provider,omitempty"`

	// Resource on which the operation is performed etc.
	Resource *string `json:"resource,omitempty"`
}

// OperationListResult - Result of the request to list solution operations.
type OperationListResult struct {
	// List of solution operations supported by the OperationsManagement resource provider.
	Value []*Operation `json:"value,omitempty"`

	// READ-ONLY; URL to get the next set of operation list results if there are any.
	NextLink *string `json:"nextLink,omitempty" azure:"ro"`
}

// MarshalJSON implements the json.Marshaller interface for type OperationListResult.
func (o OperationListResult) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "nextLink", o.NextLink)
	populate(objectMap, "value", o.Value)
	return json.Marshal(objectMap)
}

// OperationStatus - The status of operation.
type OperationStatus struct {
	// The end time of the operation.
	EndTime *string `json:"endTime,omitempty"`

	// The error detail of the operation if any.
	Error *ErrorResponse `json:"error,omitempty"`

	// The operation Id.
	ID *string `json:"id,omitempty"`

	// The operation name.
	Name *string `json:"name,omitempty"`

	// The start time of the operation.
	StartTime *string `json:"startTime,omitempty"`

	// The status of the operation.
	Status *string `json:"status,omitempty"`
}

// OperationStatusesGetOptions contains the optional parameters for the OperationStatuses.Get method.
type OperationStatusesGetOptions struct {
	// placeholder for future optional parameters
}

// OperationsListOptions contains the optional parameters for the Operations.List method.
type OperationsListOptions struct {
	// placeholder for future optional parameters
}

// PrivateLinkScopedResource - The private link scope resource reference.
type PrivateLinkScopedResource struct {
	// The full resource Id of the private link scope resource.
	ResourceID *string `json:"resourceId,omitempty"`

	// The private link scope unique Identifier.
	ScopeID *string `json:"scopeId,omitempty"`
}

// ProxyResource - The resource model definition for a Azure Resource Manager proxy resource. It will not have tags and a location
type ProxyResource struct {
	Resource
}

func (p ProxyResource) marshalInternal(objectMap map[string]interface{}) {
	p.Resource.marshalInternal(objectMap)
}

// Resource - Common fields that are returned in the response for all Azure Resource Manager resources
type Resource struct {
	// READ-ONLY; Fully qualified resource ID for the resource. Ex - /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}
	ID *string `json:"id,omitempty" azure:"ro"`

	// READ-ONLY; The name of the resource
	Name *string `json:"name,omitempty" azure:"ro"`

	// READ-ONLY; The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or "Microsoft.Storage/storageAccounts"
	Type *string `json:"type,omitempty" azure:"ro"`
}

// MarshalJSON implements the json.Marshaller interface for type Resource.
func (r Resource) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	r.marshalInternal(objectMap)
	return json.Marshal(objectMap)
}

func (r Resource) marshalInternal(objectMap map[string]interface{}) {
	populate(objectMap, "id", r.ID)
	populate(objectMap, "name", r.Name)
	populate(objectMap, "type", r.Type)
}

// SavedSearch - Value object for saved search results.
type SavedSearch struct {
	ProxyResource
	// REQUIRED; The properties of the saved search.
	Properties *SavedSearchProperties `json:"properties,omitempty"`

	// The ETag of the saved search. To override an existing saved search, use "*" or specify the current Etag
	Etag *string `json:"etag,omitempty"`
}

// MarshalJSON implements the json.Marshaller interface for type SavedSearch.
func (s SavedSearch) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	s.ProxyResource.marshalInternal(objectMap)
	populate(objectMap, "etag", s.Etag)
	populate(objectMap, "properties", s.Properties)
	return json.Marshal(objectMap)
}

// SavedSearchProperties - Value object for saved search results.
type SavedSearchProperties struct {
	// REQUIRED; The category of the saved search. This helps the user to find a saved search faster.
	Category *string `json:"category,omitempty"`

	// REQUIRED; Saved search display name.
	DisplayName *string `json:"displayName,omitempty"`

	// REQUIRED; The query expression for the saved search.
	Query *string `json:"query,omitempty"`

	// The function alias if query serves as a function.
	FunctionAlias *string `json:"functionAlias,omitempty"`

	// The optional function parameters if query serves as a function. Value should be in the following format: 'param-name1:type1 = defaultvalue1, param-name2:type2
	// = defaultvalue2'. For more examples and
	// proper syntax please refer to https://docs.microsoft.com/en-us/azure/kusto/query/functions/user-defined-functions.
	FunctionParameters *string `json:"functionParameters,omitempty"`

	// The tags attached to the saved search.
	Tags []*Tag `json:"tags,omitempty"`

	// The version number of the query language. The current version is 2 and is the default.
	Version *int64 `json:"version,omitempty"`
}

// MarshalJSON implements the json.Marshaller interface for type SavedSearchProperties.
func (s SavedSearchProperties) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "category", s.Category)
	populate(objectMap, "displayName", s.DisplayName)
	populate(objectMap, "functionAlias", s.FunctionAlias)
	populate(objectMap, "functionParameters", s.FunctionParameters)
	populate(objectMap, "query", s.Query)
	populate(objectMap, "tags", s.Tags)
	populate(objectMap, "version", s.Version)
	return json.Marshal(objectMap)
}

// SavedSearchesCreateOrUpdateOptions contains the optional parameters for the SavedSearches.CreateOrUpdate method.
type SavedSearchesCreateOrUpdateOptions struct {
	// placeholder for future optional parameters
}

// SavedSearchesDeleteOptions contains the optional parameters for the SavedSearches.Delete method.
type SavedSearchesDeleteOptions struct {
	// placeholder for future optional parameters
}

// SavedSearchesGetOptions contains the optional parameters for the SavedSearches.Get method.
type SavedSearchesGetOptions struct {
	// placeholder for future optional parameters
}

// SavedSearchesListByWorkspaceOptions contains the optional parameters for the SavedSearches.ListByWorkspace method.
type SavedSearchesListByWorkspaceOptions struct {
	// placeholder for future optional parameters
}

// SavedSearchesListResult - The saved search list operation response.
type SavedSearchesListResult struct {
	// The array of result values.
	Value []*SavedSearch `json:"value,omitempty"`
}

// MarshalJSON implements the json.Marshaller interface for type SavedSearchesListResult.
func (s SavedSearchesListResult) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "value", s.Value)
	return json.Marshal(objectMap)
}

// SchemaGetOptions contains the optional parameters for the Schema.Get method.
type SchemaGetOptions struct {
	// placeholder for future optional parameters
}

// SearchGetSchemaResponse - The get schema operation response.
type SearchGetSchemaResponse struct {
	// The metadata from search results.
	Metadata *SearchMetadata `json:"metadata,omitempty"`

	// The array of result values.
	Value []*SearchSchemaValue `json:"value,omitempty"`
}

// MarshalJSON implements the json.Marshaller interface for type SearchGetSchemaResponse.
func (s SearchGetSchemaResponse) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "metadata", s.Metadata)
	populate(objectMap, "value", s.Value)
	return json.Marshal(objectMap)
}

// SearchMetadata - Metadata for search results.
type SearchMetadata struct {
	// The aggregated grouping fields.
	AggregatedGroupingFields *string `json:"aggregatedGroupingFields,omitempty"`

	// The aggregated value field.
	AggregatedValueField *string `json:"aggregatedValueField,omitempty"`

	// The core summaries.
	CoreSummaries []*CoreSummary `json:"coreSummaries,omitempty"`

	// The ETag of the search results.
	ETag *string `json:"eTag,omitempty"`

	// The id of the search results request.
	ID *string `json:"id,omitempty"`

	// The time of last update.
	LastUpdated *time.Time `json:"lastUpdated,omitempty"`

	// The max of all aggregates returned in the result set.
	Max *int64 `json:"max,omitempty"`

	// The request time.
	RequestTime *int64 `json:"requestTime,omitempty"`

	// The search result type.
	ResultType *string `json:"resultType,omitempty"`

	// The schema.
	Schema *SearchMetadataSchema `json:"schema,omitempty"`

	// The request id of the search.
	SearchID *string `json:"requestId,omitempty"`

	// How the results are sorted.
	Sort []*SearchSort `json:"sort,omitempty"`

	// The start time for the search.
	StartTime *time.Time `json:"startTime,omitempty"`

	// The status of the search results.
	Status *string `json:"status,omitempty"`

	// The sum of all aggregates returned in the result set.
	Sum *int64 `json:"sum,omitempty"`

	// The number of top search results.
	Top *int64 `json:"top,omitempty"`

	// The total number of search results.
	Total *int64 `json:"total,omitempty"`
}

// MarshalJSON implements the json.Marshaller interface for type SearchMetadata.
func (s SearchMetadata) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "aggregatedGroupingFields", s.AggregatedGroupingFields)
	populate(objectMap, "aggregatedValueField", s.AggregatedValueField)
	populate(objectMap, "coreSummaries", s.CoreSummaries)
	populate(objectMap, "eTag", s.ETag)
	populate(objectMap, "id", s.ID)
	populate(objectMap, "lastUpdated", (*timeRFC3339)(s.LastUpdated))
	populate(objectMap, "max", s.Max)
	populate(objectMap, "requestTime", s.RequestTime)
	populate(objectMap, "resultType", s.ResultType)
	populate(objectMap, "schema", s.Schema)
	populate(objectMap, "requestId", s.SearchID)
	populate(objectMap, "sort", s.Sort)
	populate(objectMap, "startTime", (*timeRFC3339)(s.StartTime))
	populate(objectMap, "status", s.Status)
	populate(objectMap, "sum", s.Sum)
	populate(objectMap, "top", s.Top)
	populate(objectMap, "total", s.Total)
	return json.Marshal(objectMap)
}

// UnmarshalJSON implements the json.Unmarshaller interface for type SearchMetadata.
func (s *SearchMetadata) UnmarshalJSON(data []byte) error {
	var rawMsg map[string]json.RawMessage
	if err := json.Unmarshal(data, &rawMsg); err != nil {
		return err
	}
	for key, val := range rawMsg {
		var err error
		switch key {
		case "aggregatedGroupingFields":
			err = unpopulate(val, &s.AggregatedGroupingFields)
			delete(rawMsg, key)
		case "aggregatedValueField":
			err = unpopulate(val, &s.AggregatedValueField)
			delete(rawMsg, key)
		case "coreSummaries":
			err = unpopulate(val, &s.CoreSummaries)
			delete(rawMsg, key)
		case "eTag":
			err = unpopulate(val, &s.ETag)
			delete(rawMsg, key)
		case "id":
			err = unpopulate(val, &s.ID)
			delete(rawMsg, key)
		case "lastUpdated":
			var aux timeRFC3339
			err = unpopulate(val, &aux)
			s.LastUpdated = (*time.Time)(&aux)
			delete(rawMsg, key)
		case "max":
			err = unpopulate(val, &s.Max)
			delete(rawMsg, key)
		case "requestTime":
			err = unpopulate(val, &s.RequestTime)
			delete(rawMsg, key)
		case "resultType":
			err = unpopulate(val, &s.ResultType)
			delete(rawMsg, key)
		case "schema":
			err = unpopulate(val, &s.Schema)
			delete(rawMsg, key)
		case "requestId":
			err = unpopulate(val, &s.SearchID)
			delete(rawMsg, key)
		case "sort":
			err = unpopulate(val, &s.Sort)
			delete(rawMsg, key)
		case "startTime":
			var aux timeRFC3339
			err = unpopulate(val, &aux)
			s.StartTime = (*time.Time)(&aux)
			delete(rawMsg, key)
		case "status":
			err = unpopulate(val, &s.Status)
			delete(rawMsg, key)
		case "sum":
			err = unpopulate(val, &s.Sum)
			delete(rawMsg, key)
		case "top":
			err = unpopulate(val, &s.Top)
			delete(rawMsg, key)
		case "total":
			err = unpopulate(val, &s.Total)
			delete(rawMsg, key)
		}
		if err != nil {
			return err
		}
	}
	return nil
}

// SearchMetadataSchema - Schema metadata for search.
type SearchMetadataSchema struct {
	// The name of the metadata schema.
	Name *string `json:"name,omitempty"`

	// The version of the metadata schema.
	Version *int32 `json:"version,omitempty"`
}

// SearchSchemaValue - Value object for schema results.
type SearchSchemaValue struct {
	// REQUIRED; The boolean that indicates whether or not the field is a facet.
	Facet *bool `json:"facet,omitempty"`

	// REQUIRED; The boolean that indicates the field is searchable as free text.
	Indexed *bool `json:"indexed,omitempty"`

	// REQUIRED; The boolean that indicates whether or not the field is stored.
	Stored *bool `json:"stored,omitempty"`

	// The display name of the schema.
	DisplayName *string `json:"displayName,omitempty"`

	// The name of the schema.
	Name *string `json:"name,omitempty"`

	// The array of workflows containing the field.
	OwnerType []*string `json:"ownerType,omitempty"`

	// The type.
	Type *string `json:"type,omitempty"`
}

// MarshalJSON implements the json.Marshaller interface for type SearchSchemaValue.
func (s SearchSchemaValue) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "displayName", s.DisplayName)
	populate(objectMap, "facet", s.Facet)
	populate(objectMap, "indexed", s.Indexed)
	populate(objectMap, "name", s.Name)
	populate(objectMap, "ownerType", s.OwnerType)
	populate(objectMap, "stored", s.Stored)
	populate(objectMap, "type", s.Type)
	return json.Marshal(objectMap)
}

// SearchSort - The sort parameters for search.
type SearchSort struct {
	// The name of the field the search query is sorted on.
	Name *string `json:"name,omitempty"`

	// The sort order of the search.
	Order *SearchSortEnum `json:"order,omitempty"`
}

// SharedKeys - The shared keys for a workspace.
type SharedKeys struct {
	// The primary shared key of a workspace.
	PrimarySharedKey *string `json:"primarySharedKey,omitempty"`

	// The secondary shared key of a workspace.
	SecondarySharedKey *string `json:"secondarySharedKey,omitempty"`
}

// SharedKeysGetSharedKeysOptions contains the optional parameters for the SharedKeys.GetSharedKeys method.
type SharedKeysGetSharedKeysOptions struct {
	// placeholder for future optional parameters
}

// SharedKeysRegenerateOptions contains the optional parameters for the SharedKeys.Regenerate method.
type SharedKeysRegenerateOptions struct {
	// placeholder for future optional parameters
}

// StorageAccount - Describes a storage account connection.
type StorageAccount struct {
	// REQUIRED; The Azure Resource Manager ID of the storage account resource.
	ID *string `json:"id,omitempty"`

	// REQUIRED; The storage account key.
	Key *string `json:"key,omitempty"`
}

// StorageInsight - The top level storage insight resource container.
type StorageInsight struct {
	ProxyResource
	// The ETag of the storage insight.
	ETag *string `json:"eTag,omitempty"`

	// Storage insight properties.
	Properties *StorageInsightProperties `json:"properties,omitempty"`

	// Resource tags.
	Tags map[string]*string `json:"tags,omitempty"`
}

// MarshalJSON implements the json.Marshaller interface for type StorageInsight.
func (s StorageInsight) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	s.ProxyResource.marshalInternal(objectMap)
	populate(objectMap, "eTag", s.ETag)
	populate(objectMap, "properties", s.Properties)
	populate(objectMap, "tags", s.Tags)
	return json.Marshal(objectMap)
}

// StorageInsightConfigsCreateOrUpdateOptions contains the optional parameters for the StorageInsightConfigs.CreateOrUpdate method.
type StorageInsightConfigsCreateOrUpdateOptions struct {
	// placeholder for future optional parameters
}

// StorageInsightConfigsDeleteOptions contains the optional parameters for the StorageInsightConfigs.Delete method.
type StorageInsightConfigsDeleteOptions struct {
	// placeholder for future optional parameters
}

// StorageInsightConfigsGetOptions contains the optional parameters for the StorageInsightConfigs.Get method.
type StorageInsightConfigsGetOptions struct {
	// placeholder for future optional parameters
}

// StorageInsightConfigsListByWorkspaceOptions contains the optional parameters for the StorageInsightConfigs.ListByWorkspace method.
type StorageInsightConfigsListByWorkspaceOptions struct {
	// placeholder for future optional parameters
}

// StorageInsightListResult - The list storage insights operation response.
type StorageInsightListResult struct {
	// The link (url) to the next page of results.
	ODataNextLink *string `json:"@odata.nextLink,omitempty"`

	// A list of storage insight items.
	Value []*StorageInsight `json:"value,omitempty"`
}

// MarshalJSON implements the json.Marshaller interface for type StorageInsightListResult.
func (s StorageInsightListResult) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "@odata.nextLink", s.ODataNextLink)
	populate(objectMap, "value", s.Value)
	return json.Marshal(objectMap)
}

// StorageInsightProperties - Storage insight properties.
type StorageInsightProperties struct {
	// REQUIRED; The storage account connection details
	StorageAccount *StorageAccount `json:"storageAccount,omitempty"`

	// The names of the blob containers that the workspace should read
	Containers []*string `json:"containers,omitempty"`

	// The names of the Azure tables that the workspace should read
	Tables []*string `json:"tables,omitempty"`

	// READ-ONLY; The status of the storage insight
	Status *StorageInsightStatus `json:"status,omitempty" azure:"ro"`
}

// MarshalJSON implements the json.Marshaller interface for type StorageInsightProperties.
func (s StorageInsightProperties) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "containers", s.Containers)
	populate(objectMap, "status", s.Status)
	populate(objectMap, "storageAccount", s.StorageAccount)
	populate(objectMap, "tables", s.Tables)
	return json.Marshal(objectMap)
}

// StorageInsightStatus - The status of the storage insight.
type StorageInsightStatus struct {
	// REQUIRED; The state of the storage insight connection to the workspace
	State *StorageInsightState `json:"state,omitempty"`

	// Description of the state of the storage insight.
	Description *string `json:"description,omitempty"`
}

// Tag - A tag of a saved search.
type Tag struct {
	// REQUIRED; The tag name.
	Name *string `json:"name,omitempty"`

	// REQUIRED; The tag value.
	Value *string `json:"value,omitempty"`
}

// TrackedResource - The resource model definition for an Azure Resource Manager tracked top level resource which has 'tags' and a 'location'
type TrackedResource struct {
	Resource
	// REQUIRED; The geo-location where the resource lives
	Location *string `json:"location,omitempty"`

	// Resource tags.
	Tags map[string]*string `json:"tags,omitempty"`
}

// MarshalJSON implements the json.Marshaller interface for type TrackedResource.
func (t TrackedResource) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	t.marshalInternal(objectMap)
	return json.Marshal(objectMap)
}

func (t TrackedResource) marshalInternal(objectMap map[string]interface{}) {
	t.Resource.marshalInternal(objectMap)
	populate(objectMap, "location", t.Location)
	populate(objectMap, "tags", t.Tags)
}

// UsageMetric - A metric describing the usage of a resource.
type UsageMetric struct {
	// The current value of the metric.
	CurrentValue *float64 `json:"currentValue,omitempty"`

	// The quota limit for the metric.
	Limit *float64 `json:"limit,omitempty"`

	// The name of the metric.
	Name *MetricName `json:"name,omitempty"`

	// The time that the metric's value will reset.
	NextResetTime *time.Time `json:"nextResetTime,omitempty"`

	// The quota period that determines the length of time between value resets.
	QuotaPeriod *string `json:"quotaPeriod,omitempty"`

	// The units used for the metric.
	Unit *string `json:"unit,omitempty"`
}

// MarshalJSON implements the json.Marshaller interface for type UsageMetric.
func (u UsageMetric) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "currentValue", u.CurrentValue)
	populate(objectMap, "limit", u.Limit)
	populate(objectMap, "name", u.Name)
	populate(objectMap, "nextResetTime", (*timeRFC3339)(u.NextResetTime))
	populate(objectMap, "quotaPeriod", u.QuotaPeriod)
	populate(objectMap, "unit", u.Unit)
	return json.Marshal(objectMap)
}

// UnmarshalJSON implements the json.Unmarshaller interface for type UsageMetric.
func (u *UsageMetric) UnmarshalJSON(data []byte) error {
	var rawMsg map[string]json.RawMessage
	if err := json.Unmarshal(data, &rawMsg); err != nil {
		return err
	}
	for key, val := range rawMsg {
		var err error
		switch key {
		case "currentValue":
			err = unpopulate(val, &u.CurrentValue)
			delete(rawMsg, key)
		case "limit":
			err = unpopulate(val, &u.Limit)
			delete(rawMsg, key)
		case "name":
			err = unpopulate(val, &u.Name)
			delete(rawMsg, key)
		case "nextResetTime":
			var aux timeRFC3339
			err = unpopulate(val, &aux)
			u.NextResetTime = (*time.Time)(&aux)
			delete(rawMsg, key)
		case "quotaPeriod":
			err = unpopulate(val, &u.QuotaPeriod)
			delete(rawMsg, key)
		case "unit":
			err = unpopulate(val, &u.Unit)
			delete(rawMsg, key)
		}
		if err != nil {
			return err
		}
	}
	return nil
}

// UsagesListOptions contains the optional parameters for the Usages.List method.
type UsagesListOptions struct {
	// placeholder for future optional parameters
}

// UserIdentityProperties - User assigned identity properties.
type UserIdentityProperties struct {
	// READ-ONLY; The client id of user assigned identity.
	ClientID *string `json:"clientId,omitempty" azure:"ro"`

	// READ-ONLY; The principal id of user assigned identity.
	PrincipalID *string `json:"principalId,omitempty" azure:"ro"`
}

// Workspace - The top level Workspace resource container.
type Workspace struct {
	TrackedResource
	// The ETag of the workspace.
	ETag *string `json:"eTag,omitempty"`

	// Workspace properties.
	Properties *WorkspaceProperties `json:"properties,omitempty"`
}

// MarshalJSON implements the json.Marshaller interface for type Workspace.
func (w Workspace) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	w.TrackedResource.marshalInternal(objectMap)
	populate(objectMap, "eTag", w.ETag)
	populate(objectMap, "properties", w.Properties)
	return json.Marshal(objectMap)
}

// WorkspaceCapping - The daily volume cap for ingestion.
type WorkspaceCapping struct {
	// The workspace daily quota for ingestion.
	DailyQuotaGb *float64 `json:"dailyQuotaGb,omitempty"`

	// READ-ONLY; The status of data ingestion for this workspace.
	DataIngestionStatus *DataIngestionStatus `json:"dataIngestionStatus,omitempty" azure:"ro"`

	// READ-ONLY; The time when the quota will be rest.
	QuotaNextResetTime *string `json:"quotaNextResetTime,omitempty" azure:"ro"`
}

// WorkspaceFeatures - Workspace features.
type WorkspaceFeatures struct {
	// OPTIONAL; Contains additional key/value pairs not defined in the schema.
	AdditionalProperties map[string]interface{}

	// Dedicated LA cluster resourceId that is linked to the workspaces.
	ClusterResourceID *string `json:"clusterResourceId,omitempty"`

	// Disable Non-AAD based Auth.
	DisableLocalAuth *bool `json:"disableLocalAuth,omitempty"`

	// Flag that indicate if data should be exported.
	EnableDataExport *bool `json:"enableDataExport,omitempty"`

	// Flag that indicate which permission to use - resource or workspace or both.
	EnableLogAccessUsingOnlyResourcePermissions *bool `json:"enableLogAccessUsingOnlyResourcePermissions,omitempty"`

	// Flag that describes if we want to remove the data after 30 days.
	ImmediatePurgeDataOn30Days *bool `json:"immediatePurgeDataOn30Days,omitempty"`
}

// MarshalJSON implements the json.Marshaller interface for type WorkspaceFeatures.
func (w WorkspaceFeatures) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "clusterResourceId", w.ClusterResourceID)
	populate(objectMap, "disableLocalAuth", w.DisableLocalAuth)
	populate(objectMap, "enableDataExport", w.EnableDataExport)
	populate(objectMap, "enableLogAccessUsingOnlyResourcePermissions", w.EnableLogAccessUsingOnlyResourcePermissions)
	populate(objectMap, "immediatePurgeDataOn30Days", w.ImmediatePurgeDataOn30Days)
	if w.AdditionalProperties != nil {
		for key, val := range w.AdditionalProperties {
			objectMap[key] = val
		}
	}
	return json.Marshal(objectMap)
}

// UnmarshalJSON implements the json.Unmarshaller interface for type WorkspaceFeatures.
func (w *WorkspaceFeatures) UnmarshalJSON(data []byte) error {
	var rawMsg map[string]json.RawMessage
	if err := json.Unmarshal(data, &rawMsg); err != nil {
		return err
	}
	for key, val := range rawMsg {
		var err error
		switch key {
		case "clusterResourceId":
			err = unpopulate(val, &w.ClusterResourceID)
			delete(rawMsg, key)
		case "disableLocalAuth":
			err = unpopulate(val, &w.DisableLocalAuth)
			delete(rawMsg, key)
		case "enableDataExport":
			err = unpopulate(val, &w.EnableDataExport)
			delete(rawMsg, key)
		case "enableLogAccessUsingOnlyResourcePermissions":
			err = unpopulate(val, &w.EnableLogAccessUsingOnlyResourcePermissions)
			delete(rawMsg, key)
		case "immediatePurgeDataOn30Days":
			err = unpopulate(val, &w.ImmediatePurgeDataOn30Days)
			delete(rawMsg, key)
		default:
			if w.AdditionalProperties == nil {
				w.AdditionalProperties = map[string]interface{}{}
			}
			if val != nil {
				var aux interface{}
				err = json.Unmarshal(val, &aux)
				w.AdditionalProperties[key] = aux
			}
			delete(rawMsg, key)
		}
		if err != nil {
			return err
		}
	}
	return nil
}

// WorkspaceListManagementGroupsResult - The list workspace management groups operation response.
type WorkspaceListManagementGroupsResult struct {
	// Gets or sets a list of management groups attached to the workspace.
	Value []*ManagementGroup `json:"value,omitempty"`
}

// MarshalJSON implements the json.Marshaller interface for type WorkspaceListManagementGroupsResult.
func (w WorkspaceListManagementGroupsResult) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "value", w.Value)
	return json.Marshal(objectMap)
}

// WorkspaceListResult - The list workspaces operation response.
type WorkspaceListResult struct {
	// A list of workspaces.
	Value []*Workspace `json:"value,omitempty"`
}

// MarshalJSON implements the json.Marshaller interface for type WorkspaceListResult.
func (w WorkspaceListResult) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "value", w.Value)
	return json.Marshal(objectMap)
}

// WorkspaceListUsagesResult - The list workspace usages operation response.
type WorkspaceListUsagesResult struct {
	// Gets or sets a list of usage metrics for a workspace.
	Value []*UsageMetric `json:"value,omitempty"`
}

// MarshalJSON implements the json.Marshaller interface for type WorkspaceListUsagesResult.
func (w WorkspaceListUsagesResult) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "value", w.Value)
	return json.Marshal(objectMap)
}

// WorkspacePatch - The top level Workspace resource container.
type WorkspacePatch struct {
	AzureEntityResource
	// Workspace properties.
	Properties *WorkspaceProperties `json:"properties,omitempty"`

	// Resource tags. Optional.
	Tags map[string]*string `json:"tags,omitempty"`
}

// MarshalJSON implements the json.Marshaller interface for type WorkspacePatch.
func (w WorkspacePatch) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	w.AzureEntityResource.marshalInternal(objectMap)
	populate(objectMap, "properties", w.Properties)
	populate(objectMap, "tags", w.Tags)
	return json.Marshal(objectMap)
}

// WorkspaceProperties - Workspace properties.
type WorkspaceProperties struct {
	// Workspace features.
	Features *WorkspaceFeatures `json:"features,omitempty"`

	// Indicates whether customer managed storage is mandatory for query management.
	ForceCmkForQuery *bool `json:"forceCmkForQuery,omitempty"`

	// The provisioning state of the workspace.
	ProvisioningState *WorkspaceEntityStatus `json:"provisioningState,omitempty"`

	// The network access type for accessing Log Analytics ingestion.
	PublicNetworkAccessForIngestion *PublicNetworkAccessType `json:"publicNetworkAccessForIngestion,omitempty"`

	// The network access type for accessing Log Analytics query.
	PublicNetworkAccessForQuery *PublicNetworkAccessType `json:"publicNetworkAccessForQuery,omitempty"`

	// The workspace data retention in days. Allowed values are per pricing plan. See pricing tiers documentation for details.
	RetentionInDays *int32 `json:"retentionInDays,omitempty"`

	// The SKU of the workspace.
	SKU *WorkspaceSKU `json:"sku,omitempty"`

	// The daily volume cap for ingestion.
	WorkspaceCapping *WorkspaceCapping `json:"workspaceCapping,omitempty"`

	// READ-ONLY; Workspace creation date.
	CreatedDate *string `json:"createdDate,omitempty" azure:"ro"`

	// READ-ONLY; This is a read-only property. Represents the ID associated with the workspace.
	CustomerID *string `json:"customerId,omitempty" azure:"ro"`

	// READ-ONLY; Workspace modification date.
	ModifiedDate *string `json:"modifiedDate,omitempty" azure:"ro"`

	// READ-ONLY; List of linked private link scope resources.
	PrivateLinkScopedResources []*PrivateLinkScopedResource `json:"privateLinkScopedResources,omitempty" azure:"ro"`
}

// MarshalJSON implements the json.Marshaller interface for type WorkspaceProperties.
func (w WorkspaceProperties) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "createdDate", w.CreatedDate)
	populate(objectMap, "customerId", w.CustomerID)
	populate(objectMap, "features", w.Features)
	populate(objectMap, "forceCmkForQuery", w.ForceCmkForQuery)
	populate(objectMap, "modifiedDate", w.ModifiedDate)
	populate(objectMap, "privateLinkScopedResources", w.PrivateLinkScopedResources)
	populate(objectMap, "provisioningState", w.ProvisioningState)
	populate(objectMap, "publicNetworkAccessForIngestion", w.PublicNetworkAccessForIngestion)
	populate(objectMap, "publicNetworkAccessForQuery", w.PublicNetworkAccessForQuery)
	populate(objectMap, "retentionInDays", w.RetentionInDays)
	populate(objectMap, "sku", w.SKU)
	populate(objectMap, "workspaceCapping", w.WorkspaceCapping)
	return json.Marshal(objectMap)
}

// WorkspacePurgeBody - Describes the body of a purge request for an App Insights Workspace
type WorkspacePurgeBody struct {
	// REQUIRED; The set of columns and filters (queries) to run over them to purge the resulting data.
	Filters []*WorkspacePurgeBodyFilters `json:"filters,omitempty"`

	// REQUIRED; Table from which to purge data.
	Table *string `json:"table,omitempty"`
}

// MarshalJSON implements the json.Marshaller interface for type WorkspacePurgeBody.
func (w WorkspacePurgeBody) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "filters", w.Filters)
	populate(objectMap, "table", w.Table)
	return json.Marshal(objectMap)
}

// WorkspacePurgeBodyFilters - User-defined filters to return data which will be purged from the table.
type WorkspacePurgeBodyFilters struct {
	// The column of the table over which the given query should run
	Column *string `json:"column,omitempty"`

	// When filtering over custom dimensions, this key will be used as the name of the custom dimension.
	Key *string `json:"key,omitempty"`

	// A query operator to evaluate over the provided column and value(s). Supported operators are ==, =~, in, in~, >, >=, <, <=, between, and have the same
	// behavior as they would in a KQL query.
	Operator *string `json:"operator,omitempty"`

	// the value for the operator to function over. This can be a number (e.g., > 100), a string (timestamp >= '2017-09-01') or array of values.
	Value interface{} `json:"value,omitempty"`
}

// WorkspacePurgeGetPurgeStatusOptions contains the optional parameters for the WorkspacePurge.GetPurgeStatus method.
type WorkspacePurgeGetPurgeStatusOptions struct {
	// placeholder for future optional parameters
}

// WorkspacePurgePurgeOptions contains the optional parameters for the WorkspacePurge.Purge method.
type WorkspacePurgePurgeOptions struct {
	// placeholder for future optional parameters
}

// WorkspacePurgeResponse - Response containing operationId for a specific purge action.
type WorkspacePurgeResponse struct {
	// REQUIRED; Id to use when querying for status for a particular purge operation.
	OperationID *string `json:"operationId,omitempty"`
}

// WorkspacePurgeStatusResponse - Response containing status for a specific purge operation.
type WorkspacePurgeStatusResponse struct {
	// REQUIRED; Status of the operation represented by the requested Id.
	Status *PurgeState `json:"status,omitempty"`
}

// WorkspaceSKU - The SKU (tier) of a workspace.
type WorkspaceSKU struct {
	// REQUIRED; The name of the SKU.
	Name *WorkspaceSKUNameEnum `json:"name,omitempty"`

	// The capacity reservation level in GB for this workspace, when CapacityReservation sku is selected.
	CapacityReservationLevel *CapacityReservationLevel `json:"capacityReservationLevel,omitempty"`

	// READ-ONLY; The last time when the sku was updated.
	LastSKUUpdate *string `json:"lastSkuUpdate,omitempty" azure:"ro"`
}

// WorkspacesBeginCreateOrUpdateOptions contains the optional parameters for the Workspaces.BeginCreateOrUpdate method.
type WorkspacesBeginCreateOrUpdateOptions struct {
	// placeholder for future optional parameters
}

// WorkspacesBeginDeleteOptions contains the optional parameters for the Workspaces.BeginDelete method.
type WorkspacesBeginDeleteOptions struct {
	// Deletes the workspace without the recovery option. A workspace that was deleted with this flag cannot be recovered.
	Force *bool
}

// WorkspacesGetOptions contains the optional parameters for the Workspaces.Get method.
type WorkspacesGetOptions struct {
	// placeholder for future optional parameters
}

// WorkspacesListByResourceGroupOptions contains the optional parameters for the Workspaces.ListByResourceGroup method.
type WorkspacesListByResourceGroupOptions struct {
	// placeholder for future optional parameters
}

// WorkspacesListOptions contains the optional parameters for the Workspaces.List method.
type WorkspacesListOptions struct {
	// placeholder for future optional parameters
}

// WorkspacesUpdateOptions contains the optional parameters for the Workspaces.Update method.
type WorkspacesUpdateOptions struct {
	// placeholder for future optional parameters
}

func populate(m map[string]interface{}, k string, v interface{}) {
	if v == nil {
		return
	} else if azcore.IsNullValue(v) {
		m[k] = nil
	} else if !reflect.ValueOf(v).IsNil() {
		m[k] = v
	}
}

func unpopulate(data json.RawMessage, v interface{}) error {
	if data == nil {
		return nil
	}
	return json.Unmarshal(data, v)
}
