//go:build go1.16
// +build go1.16

// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

package armoperationsmanagement

import (
	"encoding/json"
	"reflect"

	"github.com/Azure/azure-sdk-for-go/sdk/azcore"
)

// ArmTemplateParameter - Parameter to pass to ARM template
type ArmTemplateParameter struct {
	// name of the parameter.
	Name *string `json:"name,omitempty"`

	// value for the parameter. In Jtoken
	Value *string `json:"value,omitempty"`
}

// CodeMessageError - The error body contract.
// Implements the error and azcore.HTTPResponse interfaces.
type CodeMessageError struct {
	raw string
	// The error details for a failed request.
	InnerError *CodeMessageErrorError `json:"error,omitempty"`
}

// Error implements the error interface for type CodeMessageError.
// The contents of the error text are not contractual and subject to change.
func (e CodeMessageError) Error() string {
	return e.raw
}

// CodeMessageErrorError - The error details for a failed request.
type CodeMessageErrorError struct {
	// The error type.
	Code *string `json:"code,omitempty"`

	// The error message.
	Message *string `json:"message,omitempty"`
}

// ManagementAssociation - The container for solution.
type ManagementAssociation struct {
	// Resource location
	Location *string `json:"location,omitempty"`

	// Properties for ManagementAssociation object supported by the OperationsManagement resource provider.
	Properties *ManagementAssociationProperties `json:"properties,omitempty"`

	// READ-ONLY; Resource ID.
	ID *string `json:"id,omitempty" azure:"ro"`

	// READ-ONLY; Resource name.
	Name *string `json:"name,omitempty" azure:"ro"`

	// READ-ONLY; Resource type.
	Type *string `json:"type,omitempty" azure:"ro"`
}

// ManagementAssociationProperties - ManagementAssociation properties supported by the OperationsManagement resource provider.
type ManagementAssociationProperties struct {
	// REQUIRED; The applicationId of the appliance for this association.
	ApplicationID *string `json:"applicationId,omitempty"`
}

// ManagementAssociationPropertiesList - the list of ManagementAssociation response
type ManagementAssociationPropertiesList struct {
	// List of Management Association properties within the subscription.
	Value []*ManagementAssociation `json:"value,omitempty"`
}

// MarshalJSON implements the json.Marshaller interface for type ManagementAssociationPropertiesList.
func (m ManagementAssociationPropertiesList) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "value", m.Value)
	return json.Marshal(objectMap)
}

// ManagementAssociationsCreateOrUpdateOptions contains the optional parameters for the ManagementAssociations.CreateOrUpdate method.
type ManagementAssociationsCreateOrUpdateOptions struct {
	// placeholder for future optional parameters
}

// ManagementAssociationsDeleteOptions contains the optional parameters for the ManagementAssociations.Delete method.
type ManagementAssociationsDeleteOptions struct {
	// placeholder for future optional parameters
}

// ManagementAssociationsGetOptions contains the optional parameters for the ManagementAssociations.Get method.
type ManagementAssociationsGetOptions struct {
	// placeholder for future optional parameters
}

// ManagementAssociationsListBySubscriptionOptions contains the optional parameters for the ManagementAssociations.ListBySubscription method.
type ManagementAssociationsListBySubscriptionOptions struct {
	// placeholder for future optional parameters
}

// ManagementConfiguration - The container for solution.
type ManagementConfiguration struct {
	// Resource location
	Location *string `json:"location,omitempty"`

	// Properties for ManagementConfiguration object supported by the OperationsManagement resource provider.
	Properties *ManagementConfigurationProperties `json:"properties,omitempty"`

	// READ-ONLY; Resource ID.
	ID *string `json:"id,omitempty" azure:"ro"`

	// READ-ONLY; Resource name.
	Name *string `json:"name,omitempty" azure:"ro"`

	// READ-ONLY; Resource type.
	Type *string `json:"type,omitempty" azure:"ro"`
}

// ManagementConfigurationProperties - ManagementConfiguration properties supported by the OperationsManagement resource provider.
type ManagementConfigurationProperties struct {
	// REQUIRED; Parameters to run the ARM template
	Parameters []*ArmTemplateParameter `json:"parameters,omitempty"`

	// REQUIRED; The type of the parent resource.
	ParentResourceType *string `json:"parentResourceType,omitempty"`

	// REQUIRED; The Json object containing the ARM template to deploy
	Template map[string]interface{} `json:"template,omitempty"`

	// The applicationId of the appliance for this Management.
	ApplicationID *string `json:"applicationId,omitempty"`

	// READ-ONLY; The provisioning state for the ManagementConfiguration.
	ProvisioningState *string `json:"provisioningState,omitempty" azure:"ro"`
}

// MarshalJSON implements the json.Marshaller interface for type ManagementConfigurationProperties.
func (m ManagementConfigurationProperties) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "applicationId", m.ApplicationID)
	populate(objectMap, "parameters", m.Parameters)
	populate(objectMap, "parentResourceType", m.ParentResourceType)
	populate(objectMap, "provisioningState", m.ProvisioningState)
	populate(objectMap, "template", m.Template)
	return json.Marshal(objectMap)
}

// ManagementConfigurationPropertiesList - the list of ManagementConfiguration response
type ManagementConfigurationPropertiesList struct {
	// List of Management Configuration properties within the subscription.
	Value []*ManagementConfiguration `json:"value,omitempty"`
}

// MarshalJSON implements the json.Marshaller interface for type ManagementConfigurationPropertiesList.
func (m ManagementConfigurationPropertiesList) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "value", m.Value)
	return json.Marshal(objectMap)
}

// ManagementConfigurationsCreateOrUpdateOptions contains the optional parameters for the ManagementConfigurations.CreateOrUpdate method.
type ManagementConfigurationsCreateOrUpdateOptions struct {
	// placeholder for future optional parameters
}

// ManagementConfigurationsDeleteOptions contains the optional parameters for the ManagementConfigurations.Delete method.
type ManagementConfigurationsDeleteOptions struct {
	// placeholder for future optional parameters
}

// ManagementConfigurationsGetOptions contains the optional parameters for the ManagementConfigurations.Get method.
type ManagementConfigurationsGetOptions struct {
	// placeholder for future optional parameters
}

// ManagementConfigurationsListBySubscriptionOptions contains the optional parameters for the ManagementConfigurations.ListBySubscription method.
type ManagementConfigurationsListBySubscriptionOptions struct {
	// placeholder for future optional parameters
}

// Operation - Supported operation of OperationsManagement resource provider.
type Operation struct {
	// Display metadata associated with the operation.
	Display *OperationDisplay `json:"display,omitempty"`

	// Operation name: {provider}/{resource}/{operation}
	Name *string `json:"name,omitempty"`
}

// OperationDisplay - Display metadata associated with the operation.
type OperationDisplay struct {
	// Type of operation: get, read, delete, etc.
	Operation *string `json:"operation,omitempty"`

	// Service provider: Microsoft OperationsManagement.
	Provider *string `json:"provider,omitempty"`

	// Resource on which the operation is performed etc.
	Resource *string `json:"resource,omitempty"`
}

// OperationListResult - Result of the request to list solution operations.
type OperationListResult struct {
	// List of solution operations supported by the OperationsManagement resource provider.
	Value []*Operation `json:"value,omitempty"`
}

// MarshalJSON implements the json.Marshaller interface for type OperationListResult.
func (o OperationListResult) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "value", o.Value)
	return json.Marshal(objectMap)
}

// OperationsListOptions contains the optional parameters for the Operations.List method.
type OperationsListOptions struct {
	// placeholder for future optional parameters
}

// Solution - The container for solution.
type Solution struct {
	// Resource location
	Location *string `json:"location,omitempty"`

	// Plan for solution object supported by the OperationsManagement resource provider.
	Plan *SolutionPlan `json:"plan,omitempty"`

	// Properties for solution object supported by the OperationsManagement resource provider.
	Properties *SolutionProperties `json:"properties,omitempty"`

	// Resource tags
	Tags map[string]*string `json:"tags,omitempty"`

	// READ-ONLY; Resource ID.
	ID *string `json:"id,omitempty" azure:"ro"`

	// READ-ONLY; Resource name.
	Name *string `json:"name,omitempty" azure:"ro"`

	// READ-ONLY; Resource type.
	Type *string `json:"type,omitempty" azure:"ro"`
}

// MarshalJSON implements the json.Marshaller interface for type Solution.
func (s Solution) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "id", s.ID)
	populate(objectMap, "location", s.Location)
	populate(objectMap, "name", s.Name)
	populate(objectMap, "plan", s.Plan)
	populate(objectMap, "properties", s.Properties)
	populate(objectMap, "tags", s.Tags)
	populate(objectMap, "type", s.Type)
	return json.Marshal(objectMap)
}

// SolutionPatch - The properties of a Solution that can be patched.
type SolutionPatch struct {
	// Resource tags
	Tags map[string]*string `json:"tags,omitempty"`
}

// MarshalJSON implements the json.Marshaller interface for type SolutionPatch.
func (s SolutionPatch) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "tags", s.Tags)
	return json.Marshal(objectMap)
}

// SolutionPlan - Plan for solution object supported by the OperationsManagement resource provider.
type SolutionPlan struct {
	// name of the solution to be created. For Microsoft published solution it should be in the format of solutionType(workspaceName). SolutionType part is
	// case sensitive. For third party solution, it can be
	// anything.
	Name *string `json:"name,omitempty"`

	// name of the solution to enabled/add. For Microsoft published gallery solution it should be in the format of OMSGallery/. This is case sensitive
	Product *string `json:"product,omitempty"`

	// promotionCode, Not really used now, can you left as empty
	PromotionCode *string `json:"promotionCode,omitempty"`

	// Publisher name. For gallery solution, it is Microsoft.
	Publisher *string `json:"publisher,omitempty"`
}

// SolutionProperties - Solution properties supported by the OperationsManagement resource provider.
type SolutionProperties struct {
	// REQUIRED; The azure resourceId for the workspace where the solution will be deployed/enabled.
	WorkspaceResourceID *string `json:"workspaceResourceId,omitempty"`

	// The azure resources that will be contained within the solutions. They will be locked and gets deleted automatically when the solution is deleted.
	ContainedResources []*string `json:"containedResources,omitempty"`

	// The resources that will be referenced from this solution. Deleting any of those solution out of band will break the solution.
	ReferencedResources []*string `json:"referencedResources,omitempty"`

	// READ-ONLY; The provisioning state for the solution.
	ProvisioningState *string `json:"provisioningState,omitempty" azure:"ro"`
}

// MarshalJSON implements the json.Marshaller interface for type SolutionProperties.
func (s SolutionProperties) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "containedResources", s.ContainedResources)
	populate(objectMap, "provisioningState", s.ProvisioningState)
	populate(objectMap, "referencedResources", s.ReferencedResources)
	populate(objectMap, "workspaceResourceId", s.WorkspaceResourceID)
	return json.Marshal(objectMap)
}

// SolutionPropertiesList - the list of solution response
type SolutionPropertiesList struct {
	// List of solution properties within the subscription.
	Value []*Solution `json:"value,omitempty"`
}

// MarshalJSON implements the json.Marshaller interface for type SolutionPropertiesList.
func (s SolutionPropertiesList) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "value", s.Value)
	return json.Marshal(objectMap)
}

// SolutionsBeginCreateOrUpdateOptions contains the optional parameters for the Solutions.BeginCreateOrUpdate method.
type SolutionsBeginCreateOrUpdateOptions struct {
	// placeholder for future optional parameters
}

// SolutionsBeginDeleteOptions contains the optional parameters for the Solutions.BeginDelete method.
type SolutionsBeginDeleteOptions struct {
	// placeholder for future optional parameters
}

// SolutionsBeginUpdateOptions contains the optional parameters for the Solutions.BeginUpdate method.
type SolutionsBeginUpdateOptions struct {
	// placeholder for future optional parameters
}

// SolutionsGetOptions contains the optional parameters for the Solutions.Get method.
type SolutionsGetOptions struct {
	// placeholder for future optional parameters
}

// SolutionsListByResourceGroupOptions contains the optional parameters for the Solutions.ListByResourceGroup method.
type SolutionsListByResourceGroupOptions struct {
	// placeholder for future optional parameters
}

// SolutionsListBySubscriptionOptions contains the optional parameters for the Solutions.ListBySubscription method.
type SolutionsListBySubscriptionOptions struct {
	// placeholder for future optional parameters
}

func populate(m map[string]interface{}, k string, v interface{}) {
	if v == nil {
		return
	} else if azcore.IsNullValue(v) {
		m[k] = nil
	} else if !reflect.ValueOf(v).IsNil() {
		m[k] = v
	}
}
