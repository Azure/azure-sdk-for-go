// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) Go Code Generator. DO NOT EDIT.

package armoracledatabase_test

import (
	"context"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/to"
	"github.com/Azure/azure-sdk-for-go/sdk/azidentity"
	"github.com/Azure/azure-sdk-for-go/sdk/resourcemanager/oracledatabase/armoracledatabase/v2"
	"log"
	"time"
)

// Generated from example definition: 2025-09-01/AutonomousDatabases_Action_MaximumSet_Gen.json
func ExampleAutonomousDatabasesClient_BeginAction() {
	cred, err := azidentity.NewDefaultAzureCredential(nil)
	if err != nil {
		log.Fatalf("failed to obtain a credential: %v", err)
	}
	ctx := context.Background()
	clientFactory, err := armoracledatabase.NewClientFactory("00000000-0000-0000-0000-000000000000", cred, nil)
	if err != nil {
		log.Fatalf("failed to create client: %v", err)
	}
	poller, err := clientFactory.NewAutonomousDatabasesClient().BeginAction(ctx, "rgopenapi", "databasedb1", armoracledatabase.AutonomousDatabaseLifecycleAction{
		Action: to.Ptr(armoracledatabase.AutonomousDatabaseLifecycleActionEnumStart),
	}, nil)
	if err != nil {
		log.Fatalf("failed to finish the request: %v", err)
	}
	res, err := poller.PollUntilDone(ctx, nil)
	if err != nil {
		log.Fatalf("failed to pull the result: %v", err)
	}
	// You could use response here. We use blank identifier for just demo purposes.
	_ = res
	// If the HTTP response code is 200 as defined in example definition, your response structure would look as follows. Please pay attention that all the values in the output are fake values for just demo purposes.
	// res = armoracledatabase.AutonomousDatabasesClientActionResponse{
	// 	AutonomousDatabase: &armoracledatabase.AutonomousDatabase{
	// 		Properties: &armoracledatabase.AutonomousDatabaseProperties{
	// 			DataBaseType: to.Ptr(armoracledatabase.DataBaseTypeRegular),
	// 			DisplayName: to.Ptr("example_autonomous_databasedb1"),
	// 			ComputeModel: to.Ptr(armoracledatabase.ComputeModelECPU),
	// 			ComputeCount: to.Ptr[float32](2),
	// 			DataStorageSizeInTbs: to.Ptr[int32](1),
	// 			DbVersion: to.Ptr("18.4.0.0"),
	// 			CharacterSet: to.Ptr("AL32UTF8"),
	// 			NcharacterSet: to.Ptr("AL16UTF16"),
	// 			SubnetID: to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/rg000/providers/Microsoft.Network/virtualNetworks/vnet1/subnets/subnet1"),
	// 			VnetID: to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/rg000/providers/Microsoft.Network/virtualNetworks/vnet1"),
	// 			AutonomousMaintenanceScheduleType: to.Ptr(armoracledatabase.AutonomousMaintenanceScheduleTypeRegular),
	// 			CPUCoreCount: to.Ptr[int32](1),
	// 			CustomerContacts: []*armoracledatabase.CustomerContact{
	// 				{
	// 					Email: to.Ptr("agyiqecugrloatgwpvmilmvutcnyjpxzhbilhhqfvqqblfgursqelzjjnwnmpfstitmcgkovzxnstiqqwjnhwwaufbnkebpqxlqwmfnmtlkgkoxcnjwcnfqbdtokhjalagxphkuiwxtxrzuipokiuczmuwoqoebkjvhytlhtxzshwsdoywluoggznuyuozqibiwdgwqbgnyogysdjpvlowmvuvq"),
	// 				},
	// 			},
	// 			DataStorageSizeInGbs: to.Ptr[int32](1024),
	// 			DbWorkload: to.Ptr(armoracledatabase.WorkloadTypeOLTP),
	// 			IsAutoScalingEnabled: to.Ptr(true),
	// 			IsAutoScalingForStorageEnabled: to.Ptr(true),
	// 			PeerDbIDs: []*string{
	// 				to.Ptr("gpubz"),
	// 			},
	// 			IsLocalDataGuardEnabled: to.Ptr(true),
	// 			IsRemoteDataGuardEnabled: to.Ptr(true),
	// 			LocalDisasterRecoveryType: to.Ptr(armoracledatabase.DisasterRecoveryTypeAdg),
	// 			TimeDisasterRecoveryRoleChanged: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2025-08-01T04:32:58.722Z"); return t}()),
	// 			RemoteDisasterRecoveryConfiguration: &armoracledatabase.DisasterRecoveryConfigurationDetails{
	// 				DisasterRecoveryType: to.Ptr(armoracledatabase.DisasterRecoveryTypeAdg),
	// 				TimeSnapshotStandbyEnabledTill: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2025-08-01T04:32:58.715Z"); return t}()),
	// 				IsSnapshotStandby: to.Ptr(true),
	// 				IsReplicateAutomaticBackups: to.Ptr(true),
	// 			},
	// 			LocalStandbyDb: &armoracledatabase.AutonomousDatabaseStandbySummary{
	// 				LagTimeInSeconds: to.Ptr[int32](13),
	// 				LifecycleState: to.Ptr(armoracledatabase.AutonomousDatabaseLifecycleStateProvisioning),
	// 				LifecycleDetails: to.Ptr("zoiyaaibuuhm"),
	// 				TimeDataGuardRoleChanged: to.Ptr("inggk"),
	// 				TimeDisasterRecoveryRoleChanged: to.Ptr("q"),
	// 			},
	// 			FailedDataRecoveryInSeconds: to.Ptr[int32](27),
	// 			IsMtlsConnectionRequired: to.Ptr(true),
	// 			LicenseModel: to.Ptr(armoracledatabase.LicenseModelBringYourOwnLicense),
	// 			LifecycleDetails: to.Ptr("success"),
	// 			ProvisioningState: to.Ptr(armoracledatabase.AzureResourceProvisioningStateSucceeded),
	// 			LifecycleState: to.Ptr(armoracledatabase.AutonomousDatabaseLifecycleState("Succeeded")),
	// 			ScheduledOperationsList: []*armoracledatabase.ScheduledOperationsType{
	// 				{
	// 					DayOfWeek: &armoracledatabase.DayOfWeek{
	// 						Name: to.Ptr(armoracledatabase.DayOfWeekNameMonday),
	// 					},
	// 					ScheduledStartTime: to.Ptr("lwwvkazgmfremfwhckfb"),
	// 					ScheduledStopTime: to.Ptr("hjwagzxijpiaogulmnmbuqakpqxhkjvaypjqnvbvtjddc"),
	// 				},
	// 			},
	// 			PrivateEndpointIP: to.Ptr("rdlbhw"),
	// 			PrivateEndpointLabel: to.Ptr("worwqllbglhyakksevparfuaivc"),
	// 			OciURL: to.Ptr("https://fake"),
	// 			TimeCreated: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2024-01-09T20:44:09.466Z"); return t}()),
	// 			TimeMaintenanceBegin: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2025-08-01T04:32:58.722Z"); return t}()),
	// 			TimeMaintenanceEnd: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2025-08-01T04:32:58.722Z"); return t}()),
	// 			ActualUsedDataStorageSizeInTbs: to.Ptr[float64](8),
	// 			AllocatedStorageSizeInTbs: to.Ptr[float64](20),
	// 			ApexDetails: &armoracledatabase.ApexDetailsType{
	// 				ApexVersion: to.Ptr("scvpjwygbzqzevlztyfvqiaom"),
	// 				OrdsVersion: to.Ptr("djlwvhpipimxaguklshpppjrzasbk"),
	// 			},
	// 			AvailableUpgradeVersions: []*string{
	// 				to.Ptr("dgvzwolnmulrlwzzazgqm"),
	// 			},
	// 			ConnectionStrings: &armoracledatabase.ConnectionStringType{
	// 				AllConnectionStrings: &armoracledatabase.AllConnectionStringType{
	// 					High: to.Ptr("exdinleextbcjinutlkvnqyxhvandtihncykjzrhfdhfrxdarny"),
	// 					Low: to.Ptr("vurudxqtummqqbnidwthmsqgujufjxwfnejdpuxkgyoxlgqhcgsfjcpzaqeioslpehjfashipdsjhkrpdobstvgxsqrgvcrpbiiabhvymdsylqsjedrimqhtttmszlaqyukopuufbtkbtwgdydrvnvkcdqmphwzpcjxlgefzrdajyczzjdpuzvhqvupbvrpvqhzoaalg"),
	// 					Medium: to.Ptr("ishtubsuzgwtkfdqfgyxjlhehiokdvjfhwqhvmgtuksboshulroytcnubtrxxjbgoutftpzeavbldsoqjwmamgfwevhppyyeckythirzvaqujrjaiqnpyvycakhwgtuftmuxavdgdvbqxgsdqwbnqzmrzymwiydhxekenbweaghgvyveuysxqmovwodzwwfrxhtlcegekjk"),
	// 				},
	// 				Dedicated: to.Ptr("okoggzbidoaknwikuqpvepxvvcseukouprpfrldmakztkleeizbjf"),
	// 				High: to.Ptr("pggylyrivfn"),
	// 				Low: to.Ptr("zrjsbtdbfluaipbzgcvvhyuvqoczjneihaiftkfmuvvyoldslgvvpwthieyrcoxvh"),
	// 				Medium: to.Ptr("ebjnwenxvyeinsabrppychqbcawfxgplfacbsizltwfhpdafbkawopppqsxemlnmrbiqlstjupgdmpfcyyxgofmitbdiarrpprhntntqqjklseigycfcpmmlqiznxzliserjppmgfjatnmtbdxqtlbmrmpfbpoxmyffkkoptpayigeeefmqczroouqjxchswffywpsmyqohbyaclhsrwgqyuuyynvxyyzkche"),
	// 				Profiles: []*armoracledatabase.ProfileType{
	// 					{
	// 						ConsumerGroup: to.Ptr(armoracledatabase.ConsumerGroupHigh),
	// 						DisplayName: to.Ptr("mqqdgidxuovxhcwrkanybxzplautekarsxbcbzlkikpmmvjrdrrkncbamdtcuksplamigrdkydjbzeurbmjgehgppovxqhuzasduwptrlyaurzszzqpztckhpdniepaglzeublbwffxebfespqyfpljlutregvlzzjo"),
	// 						HostFormat: to.Ptr(armoracledatabase.HostFormatTypeFqdn),
	// 						IsRegional: to.Ptr(true),
	// 						Protocol: to.Ptr(armoracledatabase.ProtocolTypeTCP),
	// 						SessionMode: to.Ptr(armoracledatabase.SessionModeTypeDirect),
	// 						SyntaxFormat: to.Ptr(armoracledatabase.SyntaxFormatTypeLong),
	// 						TLSAuthentication: to.Ptr(armoracledatabase.TLSAuthenticationTypeServer),
	// 						Value: to.Ptr("bdrnwqpzbbzdipqqhnroxiuewqg"),
	// 					},
	// 				},
	// 			},
	// 			ConnectionUrls: &armoracledatabase.ConnectionURLType{
	// 				ApexURL: to.Ptr("epnebmudvzijxrfgabsdjewqfotqjmnxvokfhlyklhvtrjpprnqujthmceuhpfuumcbfxktppfguqduzkukxqkofoyyycljjtruyjtoiesxlrwwzonozaxetzrkpmzwasyvryvkryawxxf"),
	// 				DatabaseTransformsURL: to.Ptr("hujiemysucgdgtasazsdtwnxmtjppugunrqnzfzneatukuyzvkfseusjaxrourznsrwxjbvzfansdcyfxnvcyghl"),
	// 				GraphStudioURL: to.Ptr("bucnwmwixwemqqtoozfclfzqenskkyssvcatwbptsezpzdwgnaexgxutsvaibnkawyohqklnktzlhdbhbstm"),
	// 				MachineLearningNotebookURL: to.Ptr("vfhnqsrabxcrjnpqaqkgnpwhxffsqkrgcijdkkvnaoangzkcbgwklufujhmlgydxueybugxzgokxbbappdslttpdthhbmxrgcicqzyjyahjeiqopuglgbjfbhufuvsogquelagbjtyotwhmecwupooitcaftldxjycgfnlilrnicqjxnsucieftadjbvptzltmgqkxhttfkkbutaxvtfzbvbbxbmpxeeyfethpofnmbbqbtlqvnfgelvtjizckgixpptkilcvrntknusvppgnobokjpepynndswcqsnewhfnlxgmownfwfnokhbqulzyuessvxxtcdcnmumbbpjchmjbvjecbbinjolmuoaixzunawlxnoqbpzkczdsubpqpdltnfydwevearrdirzaszsudcxaspozeop"),
	// 				MongoDbURL: to.Ptr("dzmsqtcgsrdgwjlnrfmzcqcrkdqwmjrccxsszwdgpcygywnuurklwthgonxcnwaqcgzoexnaanwzsqwemcijuzxqbrkpvydizjraicgnspizwwnwureyey"),
	// 				OrdsURL: to.Ptr("lmqdgziantbczaneiqxopnaexcroelkbcgggjipzqfhoduwqodoyeghzjyuyhesewopbujxnoiziidhslxdawrfayjvxzjwfobtjrepldlmwhauiurzhbpyxsbueugddmdfindxsdjddqamwbptozzmobugnpezxyxdopripljdwnogjgrjwjfbugdkqrjwzjvavsdmgvspnzcgcjzxauqxqljmfgrtyohfppbmprmexiirvlmymxzyciaraihbwihvahyaciv"),
	// 				SQLDevWebURL: to.Ptr("pktklsvlakmblcakipxy"),
	// 			},
	// 			DataSafeStatus: to.Ptr(armoracledatabase.DataSafeStatusTypeRegistering),
	// 			DatabaseEdition: to.Ptr(armoracledatabase.DatabaseEditionTypeEnterpriseEdition),
	// 			AutonomousDatabaseID: to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/rg000/providers/Oracle.Database/autonomousDatabases/databasedb1"),
	// 			InMemoryAreaInGbs: to.Ptr[int32](29),
	// 			NextLongTermBackupTimeStamp: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2025-08-01T04:32:58.722Z"); return t}()),
	// 			LongTermBackupSchedule: &armoracledatabase.LongTermBackUpScheduleDetails{
	// 				RepeatCadence: to.Ptr(armoracledatabase.RepeatCadenceTypeOneTime),
	// 				TimeOfBackup: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2025-08-01T04:32:58.715Z"); return t}()),
	// 				RetentionPeriodInDays: to.Ptr[int32](188),
	// 				IsDisabled: to.Ptr(true),
	// 			},
	// 			IsPreview: to.Ptr(true),
	// 			LocalAdgAutoFailoverMaxDataLossLimit: to.Ptr[int32](1759),
	// 			MemoryPerOracleComputeUnitInGbs: to.Ptr[int32](17),
	// 			OpenMode: to.Ptr(armoracledatabase.OpenModeTypeReadOnly),
	// 			OperationsInsightsStatus: to.Ptr(armoracledatabase.OperationsInsightsStatusTypeEnabling),
	// 			PermissionLevel: to.Ptr(armoracledatabase.PermissionLevelTypeRestricted),
	// 			PrivateEndpoint: to.Ptr("zsknxwclpifygotuivnzkyy"),
	// 			ProvisionableCpus: []*int32{
	// 				to.Ptr[int32](11),
	// 			},
	// 			Role: to.Ptr(armoracledatabase.RoleTypePrimary),
	// 			ServiceConsoleURL: to.Ptr("vyqingzejychumpyufkkiskxhxtfdqhnkugercwlzgakttvdgkrxckvqkxdxlrqpgqosgobgjzyfdewpvhqthefbhtbkxeocreutrfbwmxnfircxsyevouxqyprlxqnmwvepamsylfibuppyslcxobxyynunowjqzupsmkeuuvkctrywubqafaorernjupfslwdlemro"),
	// 			SQLWebDeveloperURL: to.Ptr("ljdauohhvgrrnnzuuauxcuehjmugbhyqszoqcrwiwqnbuozzccqpizilcijojlnyhljxcorelkqldumfnzuljhpwqcaymbdyhvokpbqqkwrarqfrobbzsfbacdtqprrwnuqwrphqlqzilyoyehjfclemrfgylxgawydpflybcbdptzvlukuqhvtgrtaahpgkwymrfellwpbaklxllpbhtkyvlkqnumnsicpaknacvnlqqiyvwwxusjrzqthptckfuyjpferpwszwargimrpqjbigszibkukbdqzctyvktqzrgmhooimbuiblruulhrumetcllofxpqtjlongqtxtnpgfxojlnkkzwiqxrksqeepzqcqudimxtsthqljievdfhbzraluasdwaenmnipdgsnkxeqrlpygcggsfgsjqdxaxqagvoamckaosdzzltrjqlxyxbiaifrtjcnboziaweiyqenlafpchpjxxolvmsseubbaedachwgzectncatkeihzvdncmmhhwgravfcezhcjbhlvopzbnmtaytzadgdszsxpvygjewkyksmdyzepmdjqbkrakuaolveenpngakvazigbxoihfepvebfzpdfdmqrpyqgsdaraifdtnyopibqjavwhffvpowizaskrjosdpivqsgalwypptcwrfscpaqarlnjjzedjhutykdlgxnmmdmrbovscpvbwoeimqsfmiiyxewjldifllcqbmcpoixhufxbptbjkzsvmxurdzjksqirvvhejsjahvtohzsnxkxnmdgkgprwygcnpkxpgrnurnujwdtgkquzkcaanpaamhbbloywlzftxdrxzuhxdxudixgzuyckwkudtzcwdcnxqwdsojyefojusbfjftrmshziassecmgluwvcmwkcpurxajmwvbfgalhhnbebovzulefrdmhepjzqicqnilorzrtbqhemnxgkifxjjeksokqnezkekqiotwthuocqehxfwazqqonwpisrmapjjbwrrrorzepqcgjhfurxbmsfhvnnlzymavjdmfwhehhvqjdrccgabtbqkceqervrztnmfhjgjcvdeccksykspvtvgldhwuwtgobygzhdomdzthrbbhoqnbxfaamrcznmqegfbswuhypgsivoylcvtcyccvsbsxzgxqeqdslytyezyzwtokvivbvwrohcaselsenmzfevvrjkpeyymjiaegybeumjiggaszdwcwqzispeobhysxameswplkdcwhgdmjplexxkbxdmardfisbaplwtsqpmtachrrtsakzhpzwtwutnmcsuehstovmdxntvpzrzwmkms"),
	// 			SupportedRegionsToCloneTo: []*string{
	// 				to.Ptr("germanywestcentral"),
	// 			},
	// 			TimeDataGuardRoleChanged: to.Ptr("exsyrzikvlzvulmkpjxxetftlanim"),
	// 			TimeDeletionOfFreeAutonomousDatabase: to.Ptr("jtigszni"),
	// 			TimeLocalDataGuardEnabled: to.Ptr("rxmqyrqrdpfvleeer"),
	// 			TimeOfLastFailover: to.Ptr("vpcasufezytnkepvpibgqckn"),
	// 			TimeOfLastRefresh: to.Ptr("tqnkkzisphpiqapurwmpdlb"),
	// 			TimeOfLastRefreshPoint: to.Ptr("jfzhrbodayonnuwacgvwhovjgno"),
	// 			TimeOfLastSwitchover: to.Ptr("uvpwuwthnnbzmdmteqzboaah"),
	// 			TimeReclamationOfFreeAutonomousDatabase: to.Ptr("kekqxlbxjsehiretiq"),
	// 			UsedDataStorageSizeInGbs: to.Ptr[int32](13),
	// 			UsedDataStorageSizeInTbs: to.Ptr[int32](16),
	// 			Ocid: to.Ptr("ocid1..aaaaa"),
	// 			BackupRetentionPeriodInDays: to.Ptr[int32](1),
	// 			WhitelistedIPs: []*string{
	// 				to.Ptr("1.1.1.1"),
	// 				to.Ptr("1.1.1.0/24"),
	// 				to.Ptr("1.1.2.25"),
	// 			},
	// 		},
	// 		Location: to.Ptr("eastus"),
	// 		Tags: map[string]*string{
	// 		},
	// 		ID: to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/rg000/providers/Oracle.Database/autonomousDatabases/databasedb1"),
	// 		Name: to.Ptr("databasedb1"),
	// 		Type: to.Ptr("Oracle.Database/autonomousDatabases"),
	// 		SystemData: &armoracledatabase.SystemData{
	// 			CreatedBy: to.Ptr("sqehacivpuim"),
	// 			CreatedByType: to.Ptr(armoracledatabase.CreatedByTypeUser),
	// 			CreatedAt: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2025-08-01T04:32:58.716Z"); return t}()),
	// 			LastModifiedBy: to.Ptr("axrqfdkqylvjv"),
	// 			LastModifiedByType: to.Ptr(armoracledatabase.CreatedByTypeUser),
	// 			LastModifiedAt: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2025-08-01T04:32:58.716Z"); return t}()),
	// 		},
	// 	},
	// }
}

// Generated from example definition: 2025-09-01/AutonomousDatabases_ChangeDisasterRecoveryConfiguration_MaximumSet_Gen.json
func ExampleAutonomousDatabasesClient_BeginChangeDisasterRecoveryConfiguration_performChangeDisasterRecoveryConfigurationActionOnAutonomousDatabaseGeneratedByMaximumSetRule() {
	cred, err := azidentity.NewDefaultAzureCredential(nil)
	if err != nil {
		log.Fatalf("failed to obtain a credential: %v", err)
	}
	ctx := context.Background()
	clientFactory, err := armoracledatabase.NewClientFactory("00000000-0000-0000-0000-000000000000", cred, nil)
	if err != nil {
		log.Fatalf("failed to create client: %v", err)
	}
	poller, err := clientFactory.NewAutonomousDatabasesClient().BeginChangeDisasterRecoveryConfiguration(ctx, "rgopenapi", "databasedb1", armoracledatabase.DisasterRecoveryConfigurationDetails{
		DisasterRecoveryType:           to.Ptr(armoracledatabase.DisasterRecoveryTypeAdg),
		IsReplicateAutomaticBackups:    to.Ptr(true),
		TimeSnapshotStandbyEnabledTill: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2025-08-01T04:32:58.725Z"); return t }()),
		IsSnapshotStandby:              to.Ptr(true),
	}, nil)
	if err != nil {
		log.Fatalf("failed to finish the request: %v", err)
	}
	res, err := poller.PollUntilDone(ctx, nil)
	if err != nil {
		log.Fatalf("failed to pull the result: %v", err)
	}
	// You could use response here. We use blank identifier for just demo purposes.
	_ = res
	// If the HTTP response code is 200 as defined in example definition, your response structure would look as follows. Please pay attention that all the values in the output are fake values for just demo purposes.
	// res = armoracledatabase.AutonomousDatabasesClientChangeDisasterRecoveryConfigurationResponse{
	// 	AutonomousDatabase: &armoracledatabase.AutonomousDatabase{
	// 		Properties: &armoracledatabase.AutonomousDatabaseProperties{
	// 			DataBaseType: to.Ptr(armoracledatabase.DataBaseTypeRegular),
	// 			DisplayName: to.Ptr("example_autonomous_databasedb1"),
	// 			ComputeModel: to.Ptr(armoracledatabase.ComputeModelECPU),
	// 			ComputeCount: to.Ptr[float32](2),
	// 			DataStorageSizeInTbs: to.Ptr[int32](1),
	// 			DbVersion: to.Ptr("18.4.0.0"),
	// 			CharacterSet: to.Ptr("AL32UTF8"),
	// 			NcharacterSet: to.Ptr("AL16UTF16"),
	// 			SubnetID: to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/rg000/providers/Microsoft.Network/virtualNetworks/vnet1/subnets/subnet1"),
	// 			VnetID: to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/rg000/providers/Microsoft.Network/virtualNetworks/vnet1"),
	// 			AutonomousMaintenanceScheduleType: to.Ptr(armoracledatabase.AutonomousMaintenanceScheduleTypeRegular),
	// 			CPUCoreCount: to.Ptr[int32](1),
	// 			CustomerContacts: []*armoracledatabase.CustomerContact{
	// 				{
	// 					Email: to.Ptr("dummyemail@microsoft.com"),
	// 				},
	// 			},
	// 			DataStorageSizeInGbs: to.Ptr[int32](1024),
	// 			DbWorkload: to.Ptr(armoracledatabase.WorkloadTypeOLTP),
	// 			IsAutoScalingEnabled: to.Ptr(true),
	// 			IsAutoScalingForStorageEnabled: to.Ptr(true),
	// 			PeerDbIDs: []*string{
	// 				to.Ptr("gpubz"),
	// 			},
	// 			IsLocalDataGuardEnabled: to.Ptr(true),
	// 			IsRemoteDataGuardEnabled: to.Ptr(true),
	// 			LocalDisasterRecoveryType: to.Ptr(armoracledatabase.DisasterRecoveryTypeAdg),
	// 			TimeDisasterRecoveryRoleChanged: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2025-08-01T04:32:58.722Z"); return t}()),
	// 			RemoteDisasterRecoveryConfiguration: &armoracledatabase.DisasterRecoveryConfigurationDetails{
	// 				DisasterRecoveryType: to.Ptr(armoracledatabase.DisasterRecoveryTypeAdg),
	// 				TimeSnapshotStandbyEnabledTill: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2025-08-01T04:32:58.715Z"); return t}()),
	// 				IsSnapshotStandby: to.Ptr(true),
	// 				IsReplicateAutomaticBackups: to.Ptr(true),
	// 			},
	// 			LocalStandbyDb: &armoracledatabase.AutonomousDatabaseStandbySummary{
	// 				LagTimeInSeconds: to.Ptr[int32](13),
	// 				LifecycleState: to.Ptr(armoracledatabase.AutonomousDatabaseLifecycleStateProvisioning),
	// 				LifecycleDetails: to.Ptr("zoiyaaibuuhm"),
	// 				TimeDataGuardRoleChanged: to.Ptr("inggk"),
	// 				TimeDisasterRecoveryRoleChanged: to.Ptr("q"),
	// 			},
	// 			FailedDataRecoveryInSeconds: to.Ptr[int32](27),
	// 			IsMtlsConnectionRequired: to.Ptr(true),
	// 			LicenseModel: to.Ptr(armoracledatabase.LicenseModelBringYourOwnLicense),
	// 			LifecycleDetails: to.Ptr("success"),
	// 			ProvisioningState: to.Ptr(armoracledatabase.AzureResourceProvisioningStateSucceeded),
	// 			LifecycleState: to.Ptr(armoracledatabase.AutonomousDatabaseLifecycleState("Succeeded")),
	// 			ScheduledOperationsList: []*armoracledatabase.ScheduledOperationsType{
	// 				{
	// 					DayOfWeek: &armoracledatabase.DayOfWeek{
	// 						Name: to.Ptr(armoracledatabase.DayOfWeekNameMonday),
	// 					},
	// 					ScheduledStartTime: to.Ptr("lwwvkazgmfremfwhckfb"),
	// 					ScheduledStopTime: to.Ptr("hjwagzxijpiaogulmnmbuqakpqxhkjvaypjqnvbvtjddc"),
	// 				},
	// 			},
	// 			PrivateEndpointIP: to.Ptr("rdlbhw"),
	// 			PrivateEndpointLabel: to.Ptr("worwqllbglhyakksevparfuaivc"),
	// 			OciURL: to.Ptr("https://fake"),
	// 			TimeCreated: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2024-01-09T20:44:09.466Z"); return t}()),
	// 			TimeMaintenanceBegin: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2025-08-01T04:32:58.722Z"); return t}()),
	// 			TimeMaintenanceEnd: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2025-08-01T04:32:58.722Z"); return t}()),
	// 			ActualUsedDataStorageSizeInTbs: to.Ptr[float64](8),
	// 			AllocatedStorageSizeInTbs: to.Ptr[float64](20),
	// 			ApexDetails: &armoracledatabase.ApexDetailsType{
	// 				ApexVersion: to.Ptr("scvpjwygbzqzevlztyfvqiaom"),
	// 				OrdsVersion: to.Ptr("djlwvhpipimxaguklshpppjrzasbk"),
	// 			},
	// 			AvailableUpgradeVersions: []*string{
	// 				to.Ptr("dgvzwolnmulrlwzzazgqm"),
	// 			},
	// 			ConnectionStrings: &armoracledatabase.ConnectionStringType{
	// 				AllConnectionStrings: &armoracledatabase.AllConnectionStringType{
	// 					High: to.Ptr("exdinleextbcjinutlkvnqyxhvandtihncykjzrhfdhfrxdarny"),
	// 					Low: to.Ptr("vurudxqtummqqbnidwthmsqgujufjxwfnejdpuxkgyoxlgqhcgsfjcpzaqeioslpehjfashipdsjhkrpdobstvgxsqrgvcrpbiiabhvymdsylqsjedrimqhtttmszlaqyukopuufbtkbtwgdydrvnvkcdqmphwzpcjxlgefzrdajyczzjdpuzvhqvupbvrpvqhzoaalg"),
	// 					Medium: to.Ptr("ishtubsuzgwtkfdqfgyxjlhehiokdvjfhwqhvmgtuksboshulroytcnubtrxxjbgoutftpzeavbldsoqjwmamgfwevhppyyeckythirzvaqujrjaiqnpyvycakhwgtuftmuxavdgdvbqxgsdqwbnqzmrzymwiydhxekenbweaghgvyveuysxqmovwodzwwfrxhtlcegekjk"),
	// 				},
	// 				Dedicated: to.Ptr("okoggzbidoaknwikuqpvepxvvcseukouprpfrldmakztkleeizbjf"),
	// 				High: to.Ptr("pggylyrivfn"),
	// 				Low: to.Ptr("zrjsbtdbfluaipbzgcvvhyuvqoczjneihaiftkfmuvvyoldslgvvpwthieyrcoxvh"),
	// 				Medium: to.Ptr("ebjnwenxvyeinsabrppychqbcawfxgplfacbsizltwfhpdafbkawopppqsxemlnmrbiqlstjupgdmpfcyyxgofmitbdiarrpprhntntqqjklseigycfcpmmlqiznxzliserjppmgfjatnmtbdxqtlbmrmpfbpoxmyffkkoptpayigeeefmqczroouqjxchswffywpsmyqohbyaclhsrwgqyuuyynvxyyzkche"),
	// 				Profiles: []*armoracledatabase.ProfileType{
	// 					{
	// 						ConsumerGroup: to.Ptr(armoracledatabase.ConsumerGroupHigh),
	// 						DisplayName: to.Ptr("mqqdgidxuovxhcwrkanybxzplautekarsxbcbzlkikpmmvjrdrrkncbamdtcuksplamigrdkydjbzeurbmjgehgppovxqhuzasduwptrlyaurzszzqpztckhpdniepaglzeublbwffxebfespqyfpljlutregvlzzjo"),
	// 						HostFormat: to.Ptr(armoracledatabase.HostFormatTypeFqdn),
	// 						IsRegional: to.Ptr(true),
	// 						Protocol: to.Ptr(armoracledatabase.ProtocolTypeTCP),
	// 						SessionMode: to.Ptr(armoracledatabase.SessionModeTypeDirect),
	// 						SyntaxFormat: to.Ptr(armoracledatabase.SyntaxFormatTypeLong),
	// 						TLSAuthentication: to.Ptr(armoracledatabase.TLSAuthenticationTypeServer),
	// 						Value: to.Ptr("bdrnwqpzbbzdipqqhnroxiuewqg"),
	// 					},
	// 				},
	// 			},
	// 			ConnectionUrls: &armoracledatabase.ConnectionURLType{
	// 				ApexURL: to.Ptr("epnebmudvzijxrfgabsdjewqfotqjmnxvokfhlyklhvtrjpprnqujthmceuhpfuumcbfxktppfguqduzkukxqkofoyyycljjtruyjtoiesxlrwwzonozaxetzrkpmzwasyvryvkryawxxf"),
	// 				DatabaseTransformsURL: to.Ptr("hujiemysucgdgtasazsdtwnxmtjppugunrqnzfzneatukuyzvkfseusjaxrourznsrwxjbvzfansdcyfxnvcyghl"),
	// 				GraphStudioURL: to.Ptr("bucnwmwixwemqqtoozfclfzqenskkyssvcatwbptsezpzdwgnaexgxutsvaibnkawyohqklnktzlhdbhbstm"),
	// 				MachineLearningNotebookURL: to.Ptr("vfhnqsrabxcrjnpqaqkgnpwhxffsqkrgcijdkkvnaoangzkcbgwklufujhmlgydxueybugxzgokxbbappdslttpdthhbmxrgcicqzyjyahjeiqopuglgbjfbhufuvsogquelagbjtyotwhmecwupooitcaftldxjycgfnlilrnicqjxnsucieftadjbvptzltmgqkxhttfkkbutaxvtfzbvbbxbmpxeeyfethpofnmbbqbtlqvnfgelvtjizckgixpptkilcvrntknusvppgnobokjpepynndswcqsnewhfnlxgmownfwfnokhbqulzyuessvxxtcdcnmumbbpjchmjbvjecbbinjolmuoaixzunawlxnoqbpzkczdsubpqpdltnfydwevearrdirzaszsudcxaspozeop"),
	// 				MongoDbURL: to.Ptr("dzmsqtcgsrdgwjlnrfmzcqcrkdqwmjrccxsszwdgpcygywnuurklwthgonxcnwaqcgzoexnaanwzsqwemcijuzxqbrkpvydizjraicgnspizwwnwureyey"),
	// 				OrdsURL: to.Ptr("lmqdgziantbczaneiqxopnaexcroelkbcgggjipzqfhoduwqodoyeghzjyuyhesewopbujxnoiziidhslxdawrfayjvxzjwfobtjrepldlmwhauiurzhbpyxsbueugddmdfindxsdjddqamwbptozzmobugnpezxyxdopripljdwnogjgrjwjfbugdkqrjwzjvavsdmgvspnzcgcjzxauqxqljmfgrtyohfppbmprmexiirvlmymxzyciaraihbwihvahyaciv"),
	// 				SQLDevWebURL: to.Ptr("pktklsvlakmblcakipxy"),
	// 			},
	// 			DataSafeStatus: to.Ptr(armoracledatabase.DataSafeStatusTypeRegistering),
	// 			DatabaseEdition: to.Ptr(armoracledatabase.DatabaseEditionTypeEnterpriseEdition),
	// 			AutonomousDatabaseID: to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/rg000/providers/Oracle.Database/autonomousDatabases/databasedb1"),
	// 			InMemoryAreaInGbs: to.Ptr[int32](29),
	// 			NextLongTermBackupTimeStamp: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2025-08-01T04:32:58.722Z"); return t}()),
	// 			LongTermBackupSchedule: &armoracledatabase.LongTermBackUpScheduleDetails{
	// 				RepeatCadence: to.Ptr(armoracledatabase.RepeatCadenceTypeOneTime),
	// 				TimeOfBackup: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2025-08-01T04:32:58.715Z"); return t}()),
	// 				RetentionPeriodInDays: to.Ptr[int32](188),
	// 				IsDisabled: to.Ptr(true),
	// 			},
	// 			IsPreview: to.Ptr(true),
	// 			LocalAdgAutoFailoverMaxDataLossLimit: to.Ptr[int32](1759),
	// 			MemoryPerOracleComputeUnitInGbs: to.Ptr[int32](17),
	// 			OpenMode: to.Ptr(armoracledatabase.OpenModeTypeReadOnly),
	// 			OperationsInsightsStatus: to.Ptr(armoracledatabase.OperationsInsightsStatusTypeEnabling),
	// 			PermissionLevel: to.Ptr(armoracledatabase.PermissionLevelTypeRestricted),
	// 			PrivateEndpoint: to.Ptr("zsknxwclpifygotuivnzkyy"),
	// 			ProvisionableCpus: []*int32{
	// 				to.Ptr[int32](11),
	// 			},
	// 			Role: to.Ptr(armoracledatabase.RoleTypePrimary),
	// 			ServiceConsoleURL: to.Ptr("vyqingzejychumpyufkkiskxhxtfdqhnkugercwlzgakttvdgkrxckvqkxdxlrqpgqosgobgjzyfdewpvhqthefbhtbkxeocreutrfbwmxnfircxsyevouxqyprlxqnmwvepamsylfibuppyslcxobxyynunowjqzupsmkeuuvkctrywubqafaorernjupfslwdlemro"),
	// 			SQLWebDeveloperURL: to.Ptr("ljdauohhvgrrnnzuuauxcuehjmugbhyqszoqcrwiwqnbuozzccqpizilcijojlnyhljxcorelkqldumfnzuljhpwqcaymbdyhvokpbqqkwrarqfrobbzsfbacdtqprrwnuqwrphqlqzilyoyehjfclemrfgylxgawydpflybcbdptzvlukuqhvtgrtaahpgkwymrfellwpbaklxllpbhtkyvlkqnumnsicpaknacvnlqqiyvwwxusjrzqthptckfuyjpferpwszwargimrpqjbigszibkukbdqzctyvktqzrgmhooimbuiblruulhrumetcllofxpqtjlongqtxtnpgfxojlnkkzwiqxrksqeepzqcqudimxtsthqljievdfhbzraluasdwaenmnipdgsnkxeqrlpygcggsfgsjqdxaxqagvoamckaosdzzltrjqlxyxbiaifrtjcnboziaweiyqenlafpchpjxxolvmsseubbaedachwgzectncatkeihzvdncmmhhwgravfcezhcjbhlvopzbnmtaytzadgdszsxpvygjewkyksmdyzepmdjqbkrakuaolveenpngakvazigbxoihfepvebfzpdfdmqrpyqgsdaraifdtnyopibqjavwhffvpowizaskrjosdpivqsgalwypptcwrfscpaqarlnjjzedjhutykdlgxnmmdmrbovscpvbwoeimqsfmiiyxewjldifllcqbmcpoixhufxbptbjkzsvmxurdzjksqirvvhejsjahvtohzsnxkxnmdgkgprwygcnpkxpgrnurnujwdtgkquzkcaanpaamhbbloywlzftxdrxzuhxdxudixgzuyckwkudtzcwdcnxqwdsojyefojusbfjftrmshziassecmgluwvcmwkcpurxajmwvbfgalhhnbebovzulefrdmhepjzqicqnilorzrtbqhemnxgkifxjjeksokqnezkekqiotwthuocqehxfwazqqonwpisrmapjjbwrrrorzepqcgjhfurxbmsfhvnnlzymavjdmfwhehhvqjdrccgabtbqkceqervrztnmfhjgjcvdeccksykspvtvgldhwuwtgobygzhdomdzthrbbhoqnbxfaamrcznmqegfbswuhypgsivoylcvtcyccvsbsxzgxqeqdslytyezyzwtokvivbvwrohcaselsenmzfevvrjkpeyymjiaegybeumjiggaszdwcwqzispeobhysxameswplkdcwhgdmjplexxkbxdmardfisbaplwtsqpmtachrrtsakzhpzwtwutnmcsuehstovmdxntvpzrzwmkms"),
	// 			SupportedRegionsToCloneTo: []*string{
	// 				to.Ptr("germanywestcentral"),
	// 			},
	// 			TimeDataGuardRoleChanged: to.Ptr("exsyrzikvlzvulmkpjxxetftlanim"),
	// 			TimeDeletionOfFreeAutonomousDatabase: to.Ptr("jtigszni"),
	// 			TimeLocalDataGuardEnabled: to.Ptr("rxmqyrqrdpfvleeer"),
	// 			TimeOfLastFailover: to.Ptr("vpcasufezytnkepvpibgqckn"),
	// 			TimeOfLastRefresh: to.Ptr("tqnkkzisphpiqapurwmpdlb"),
	// 			TimeOfLastRefreshPoint: to.Ptr("jfzhrbodayonnuwacgvwhovjgno"),
	// 			TimeOfLastSwitchover: to.Ptr("uvpwuwthnnbzmdmteqzboaah"),
	// 			TimeReclamationOfFreeAutonomousDatabase: to.Ptr("kekqxlbxjsehiretiq"),
	// 			UsedDataStorageSizeInGbs: to.Ptr[int32](13),
	// 			UsedDataStorageSizeInTbs: to.Ptr[int32](16),
	// 			Ocid: to.Ptr("ocid1..aaaaa"),
	// 			BackupRetentionPeriodInDays: to.Ptr[int32](1),
	// 			WhitelistedIPs: []*string{
	// 				to.Ptr("1.1.1.1"),
	// 				to.Ptr("1.1.1.0/24"),
	// 				to.Ptr("1.1.2.25"),
	// 			},
	// 		},
	// 		Location: to.Ptr("eastus"),
	// 		Tags: map[string]*string{
	// 		},
	// 		ID: to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/rg000/providers/Oracle.Database/autonomousDatabases/databasedb1"),
	// 		Name: to.Ptr("databasedb1"),
	// 		Type: to.Ptr("Oracle.Database/autonomousDatabases"),
	// 		SystemData: &armoracledatabase.SystemData{
	// 			CreatedBy: to.Ptr("sqehacivpuim"),
	// 			CreatedByType: to.Ptr(armoracledatabase.CreatedByTypeUser),
	// 			CreatedAt: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2025-08-01T04:32:58.716Z"); return t}()),
	// 			LastModifiedBy: to.Ptr("axrqfdkqylvjv"),
	// 			LastModifiedByType: to.Ptr(armoracledatabase.CreatedByTypeUser),
	// 			LastModifiedAt: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2025-08-01T04:32:58.716Z"); return t}()),
	// 		},
	// 	},
	// }
}

// Generated from example definition: 2025-09-01/autonomousDatabase_changeDisasterRecoveryConfiguration.json
func ExampleAutonomousDatabasesClient_BeginChangeDisasterRecoveryConfiguration_autonomousDatabasesChangeDisasterRecoveryConfiguration() {
	cred, err := azidentity.NewDefaultAzureCredential(nil)
	if err != nil {
		log.Fatalf("failed to obtain a credential: %v", err)
	}
	ctx := context.Background()
	clientFactory, err := armoracledatabase.NewClientFactory("00000000-0000-0000-0000-000000000000", cred, nil)
	if err != nil {
		log.Fatalf("failed to create client: %v", err)
	}
	poller, err := clientFactory.NewAutonomousDatabasesClient().BeginChangeDisasterRecoveryConfiguration(ctx, "rg000", "databasedb1", armoracledatabase.DisasterRecoveryConfigurationDetails{
		DisasterRecoveryType:        to.Ptr(armoracledatabase.DisasterRecoveryTypeAdg),
		IsReplicateAutomaticBackups: to.Ptr(false),
	}, nil)
	if err != nil {
		log.Fatalf("failed to finish the request: %v", err)
	}
	res, err := poller.PollUntilDone(ctx, nil)
	if err != nil {
		log.Fatalf("failed to pull the result: %v", err)
	}
	// You could use response here. We use blank identifier for just demo purposes.
	_ = res
	// If the HTTP response code is 200 as defined in example definition, your response structure would look as follows. Please pay attention that all the values in the output are fake values for just demo purposes.
	// res = armoracledatabase.AutonomousDatabasesClientChangeDisasterRecoveryConfigurationResponse{
	// 	AutonomousDatabase: &armoracledatabase.AutonomousDatabase{
	// 		ID: to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/rg000/providers/Oracle.Database/autonomousDatabases/databasedb1"),
	// 		Type: to.Ptr("Oracle.Database/autonomousDatabases"),
	// 		Location: to.Ptr("eastus"),
	// 		Tags: map[string]*string{
	// 			"tagK1": to.Ptr("tagV1"),
	// 		},
	// 		Properties: &armoracledatabase.AutonomousDatabaseProperties{
	// 			AutonomousDatabaseID: to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/rg000/providers/Oracle.Database/autonomousDatabases/databasedb1"),
	// 			AutonomousMaintenanceScheduleType: to.Ptr(armoracledatabase.AutonomousMaintenanceScheduleTypeRegular),
	// 			CharacterSet: to.Ptr("AL32UTF8"),
	// 			NcharacterSet: to.Ptr("AL16UTF16"),
	// 			ComputeCount: to.Ptr[float32](2),
	// 			ComputeModel: to.Ptr(armoracledatabase.ComputeModelECPU),
	// 			CPUCoreCount: to.Ptr[int32](1),
	// 			DataStorageSizeInGbs: to.Ptr[int32](1024),
	// 			DataStorageSizeInTbs: to.Ptr[int32](1),
	// 			DatabaseEdition: to.Ptr(armoracledatabase.DatabaseEditionTypeEnterpriseEdition),
	// 			DataBaseType: to.Ptr(armoracledatabase.DataBaseTypeRegular),
	// 			DbVersion: to.Ptr("19c"),
	// 			DisplayName: to.Ptr("example_autonomous_databasedb1"),
	// 			IsAutoScalingEnabled: to.Ptr(false),
	// 			IsAutoScalingForStorageEnabled: to.Ptr(false),
	// 			IsLocalDataGuardEnabled: to.Ptr(false),
	// 			IsRemoteDataGuardEnabled: to.Ptr(true),
	// 			TimeDisasterRecoveryRoleChanged: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2024-07-30T18:22:10.970Z"); return t}()),
	// 			TimeDataGuardRoleChanged: to.Ptr("2024-07-30T18:22:10.970Z"),
	// 			TimeLocalDataGuardEnabled: to.Ptr("2024-07-04T01:02:36.782Z"),
	// 			LocalDisasterRecoveryType: to.Ptr(armoracledatabase.DisasterRecoveryTypeBackupBased),
	// 			RemoteDisasterRecoveryConfiguration: &armoracledatabase.DisasterRecoveryConfigurationDetails{
	// 				DisasterRecoveryType: to.Ptr(armoracledatabase.DisasterRecoveryTypeBackupBased),
	// 				IsReplicateAutomaticBackups: to.Ptr(false),
	// 			},
	// 			Role: to.Ptr(armoracledatabase.RoleTypeBackupCopy),
	// 			PeerDbIDs: []*string{
	// 				to.Ptr("ocid1.bbbbb"),
	// 			},
	// 			IsMtlsConnectionRequired: to.Ptr(true),
	// 			LicenseModel: to.Ptr(armoracledatabase.LicenseModelBringYourOwnLicense),
	// 			LifecycleState: to.Ptr(armoracledatabase.AutonomousDatabaseLifecycleStateUpdating),
	// 			SubnetID: to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/rg000/providers/Microsoft.Network/virtualNetworks/vnet1/subnets/subnet1"),
	// 			VnetID: to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/rg000/providers/Microsoft.Network/virtualNetworks/vnet1"),
	// 			ProvisioningState: to.Ptr(armoracledatabase.AzureResourceProvisioningStateProvisioning),
	// 			OciURL: to.Ptr("https://fake"),
	// 			TimeCreated: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2024-01-20T21:20:08.070Z"); return t}()),
	// 			Ocid: to.Ptr("ocid1..aaaaa"),
	// 			WhitelistedIPs: []*string{
	// 				to.Ptr("1.1.1.1"),
	// 				to.Ptr("1.1.1.0/24"),
	// 				to.Ptr("1.1.2.25"),
	// 			},
	// 		},
	// 	},
	// }
}

// Generated from example definition: 2025-09-01/AutonomousDatabases_CreateOrUpdate_MaximumSet_Gen.json
func ExampleAutonomousDatabasesClient_BeginCreateOrUpdate_createAutonomousDatabaseGeneratedByMaximumSetRule() {
	cred, err := azidentity.NewDefaultAzureCredential(nil)
	if err != nil {
		log.Fatalf("failed to obtain a credential: %v", err)
	}
	ctx := context.Background()
	clientFactory, err := armoracledatabase.NewClientFactory("00000000-0000-0000-0000-000000000000", cred, nil)
	if err != nil {
		log.Fatalf("failed to create client: %v", err)
	}
	poller, err := clientFactory.NewAutonomousDatabasesClient().BeginCreateOrUpdate(ctx, "rgopenapi", "databasedb1", armoracledatabase.AutonomousDatabase{
		Properties: &armoracledatabase.AutonomousDatabaseProperties{
			DataBaseType:                      to.Ptr(armoracledatabase.DataBaseTypeRegular),
			DisplayName:                       to.Ptr("example_autonomous_databasedb1"),
			ComputeModel:                      to.Ptr(armoracledatabase.ComputeModelECPU),
			ComputeCount:                      to.Ptr[float32](2),
			DataStorageSizeInTbs:              to.Ptr[int32](1),
			AdminPassword:                     to.Ptr("********"),
			DbVersion:                         to.Ptr("18.4.0.0"),
			CharacterSet:                      to.Ptr("AL32UTF8"),
			NcharacterSet:                     to.Ptr("AL16UTF16"),
			SubnetID:                          to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/rg000/providers/Microsoft.Network/virtualNetworks/vnet1/subnets/subnet1"),
			VnetID:                            to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/rg000/providers/Microsoft.Network/virtualNetworks/vnet1"),
			AutonomousMaintenanceScheduleType: to.Ptr(armoracledatabase.AutonomousMaintenanceScheduleTypeRegular),
			CPUCoreCount:                      to.Ptr[int32](1),
			CustomerContacts: []*armoracledatabase.CustomerContact{
				{
					Email: to.Ptr("agyiqecugrloatgwpvmilmvutcnyjpxzhbilhhqfvqqblfgursqelzjjnwnmpfstitmcgkovzxnstiqqwjnhwwaufbnkebpqxlqwmfnmtlkgkoxcnjwcnfqbdtokhjalagxphkuiwxtxrzuipokiuczmuwoqoebkjvhytlhtxzshwsdoywluoggznuyuozqibiwdgwqbgnyogysdjpvlowmvuvq"),
				},
			},
			DataStorageSizeInGbs:           to.Ptr[int32](1024),
			DbWorkload:                     to.Ptr(armoracledatabase.WorkloadTypeOLTP),
			IsAutoScalingEnabled:           to.Ptr(true),
			IsAutoScalingForStorageEnabled: to.Ptr(true),
			PeerDbID:                       to.Ptr("jghxnzevghltfytskymsxgyrugfedzchifwoezwbcwzzvpikoqqjcdiesbidbeqkmncodchlmktetjlgjgbaofwpwmpvckmusaunrzdrctypasgcabyjwxwzkodwugdpeprikvxygxyb"),
			IsLocalDataGuardEnabled:        to.Ptr(true),
			LocalDisasterRecoveryType:      to.Ptr(armoracledatabase.DisasterRecoveryTypeAdg),
			RemoteDisasterRecoveryConfiguration: &armoracledatabase.DisasterRecoveryConfigurationDetails{
				DisasterRecoveryType:           to.Ptr(armoracledatabase.DisasterRecoveryTypeAdg),
				TimeSnapshotStandbyEnabledTill: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2025-08-01T04:32:58.715Z"); return t }()),
				IsSnapshotStandby:              to.Ptr(true),
				IsReplicateAutomaticBackups:    to.Ptr(true),
			},
			LocalStandbyDb: &armoracledatabase.AutonomousDatabaseStandbySummary{
				LagTimeInSeconds:                to.Ptr[int32](13),
				LifecycleState:                  to.Ptr(armoracledatabase.AutonomousDatabaseLifecycleStateProvisioning),
				LifecycleDetails:                to.Ptr("zoiyaaibuuhm"),
				TimeDataGuardRoleChanged:        to.Ptr("inggk"),
				TimeDisasterRecoveryRoleChanged: to.Ptr("q"),
			},
			IsMtlsConnectionRequired:                 to.Ptr(true),
			IsPreviewVersionWithServiceTermsAccepted: to.Ptr(true),
			LicenseModel:                             to.Ptr(armoracledatabase.LicenseModelBringYourOwnLicense),
			LifecycleState:                           to.Ptr(armoracledatabase.AutonomousDatabaseLifecycleState("Succeeded")),
			ScheduledOperationsList: []*armoracledatabase.ScheduledOperationsType{
				{
					DayOfWeek: &armoracledatabase.DayOfWeek{
						Name: to.Ptr(armoracledatabase.DayOfWeekNameMonday),
					},
					ScheduledStartTime: to.Ptr("lwwvkazgmfremfwhckfb"),
					ScheduledStopTime:  to.Ptr("hjwagzxijpiaogulmnmbuqakpqxhkjvaypjqnvbvtjddc"),
				},
			},
			PrivateEndpointIP:    to.Ptr("rdlbhw"),
			PrivateEndpointLabel: to.Ptr("worwqllbglhyakksevparfuaivc"),
			ApexDetails: &armoracledatabase.ApexDetailsType{
				ApexVersion: to.Ptr("scvpjwygbzqzevlztyfvqiaom"),
				OrdsVersion: to.Ptr("djlwvhpipimxaguklshpppjrzasbk"),
			},
			ConnectionStrings: &armoracledatabase.ConnectionStringType{
				AllConnectionStrings: &armoracledatabase.AllConnectionStringType{
					High:   to.Ptr("exdinleextbcjinutlkvnqyxhvandtihncykjzrhfdhfrxdarny"),
					Low:    to.Ptr("vurudxqtummqqbnidwthmsqgujufjxwfnejdpuxkgyoxlgqhcgsfjcpzaqeioslpehjfashipdsjhkrpdobstvgxsqrgvcrpbiiabhvymdsylqsjedrimqhtttmszlaqyukopuufbtkbtwgdydrvnvkcdqmphwzpcjxlgefzrdajyczzjdpuzvhqvupbvrpvqhzoaalg"),
					Medium: to.Ptr("ishtubsuzgwtkfdqfgyxjlhehiokdvjfhwqhvmgtuksboshulroytcnubtrxxjbgoutftpzeavbldsoqjwmamgfwevhppyyeckythirzvaqujrjaiqnpyvycakhwgtuftmuxavdgdvbqxgsdqwbnqzmrzymwiydhxekenbweaghgvyveuysxqmovwodzwwfrxhtlcegekjk"),
				},
				Dedicated: to.Ptr("okoggzbidoaknwikuqpvepxvvcseukouprpfrldmakztkleeizbjf"),
				High:      to.Ptr("pggylyrivfn"),
				Low:       to.Ptr("zrjsbtdbfluaipbzgcvvhyuvqoczjneihaiftkfmuvvyoldslgvvpwthieyrcoxvh"),
				Medium:    to.Ptr("ebjnwenxvyeinsabrppychqbcawfxgplfacbsizltwfhpdafbkawopppqsxemlnmrbiqlstjupgdmpfcyyxgofmitbdiarrpprhntntqqjklseigycfcpmmlqiznxzliserjppmgfjatnmtbdxqtlbmrmpfbpoxmyffkkoptpayigeeefmqczroouqjxchswffywpsmyqohbyaclhsrwgqyuuyynvxyyzkche"),
				Profiles: []*armoracledatabase.ProfileType{
					{
						ConsumerGroup:     to.Ptr(armoracledatabase.ConsumerGroupHigh),
						DisplayName:       to.Ptr("mqqdgidxuovxhcwrkanybxzplautekarsxbcbzlkikpmmvjrdrrkncbamdtcuksplamigrdkydjbzeurbmjgehgppovxqhuzasduwptrlyaurzszzqpztckhpdniepaglzeublbwffxebfespqyfpljlutregvlzzjo"),
						HostFormat:        to.Ptr(armoracledatabase.HostFormatTypeFqdn),
						IsRegional:        to.Ptr(true),
						Protocol:          to.Ptr(armoracledatabase.ProtocolTypeTCP),
						SessionMode:       to.Ptr(armoracledatabase.SessionModeTypeDirect),
						SyntaxFormat:      to.Ptr(armoracledatabase.SyntaxFormatTypeLong),
						TLSAuthentication: to.Ptr(armoracledatabase.TLSAuthenticationTypeServer),
						Value:             to.Ptr("bdrnwqpzbbzdipqqhnroxiuewqg"),
					},
				},
			},
			ConnectionUrls: &armoracledatabase.ConnectionURLType{
				ApexURL:                    to.Ptr("epnebmudvzijxrfgabsdjewqfotqjmnxvokfhlyklhvtrjpprnqujthmceuhpfuumcbfxktppfguqduzkukxqkofoyyycljjtruyjtoiesxlrwwzonozaxetzrkpmzwasyvryvkryawxxf"),
				DatabaseTransformsURL:      to.Ptr("hujiemysucgdgtasazsdtwnxmtjppugunrqnzfzneatukuyzvkfseusjaxrourznsrwxjbvzfansdcyfxnvcyghl"),
				GraphStudioURL:             to.Ptr("bucnwmwixwemqqtoozfclfzqenskkyssvcatwbptsezpzdwgnaexgxutsvaibnkawyohqklnktzlhdbhbstm"),
				MachineLearningNotebookURL: to.Ptr("vfhnqsrabxcrjnpqaqkgnpwhxffsqkrgcijdkkvnaoangzkcbgwklufujhmlgydxueybugxzgokxbbappdslttpdthhbmxrgcicqzyjyahjeiqopuglgbjfbhufuvsogquelagbjtyotwhmecwupooitcaftldxjycgfnlilrnicqjxnsucieftadjbvptzltmgqkxhttfkkbutaxvtfzbvbbxbmpxeeyfethpofnmbbqbtlqvnfgelvtjizckgixpptkilcvrntknusvppgnobokjpepynndswcqsnewhfnlxgmownfwfnokhbqulzyuessvxxtcdcnmumbbpjchmjbvjecbbinjolmuoaixzunawlxnoqbpzkczdsubpqpdltnfydwevearrdirzaszsudcxaspozeop"),
				MongoDbURL:                 to.Ptr("dzmsqtcgsrdgwjlnrfmzcqcrkdqwmjrccxsszwdgpcygywnuurklwthgonxcnwaqcgzoexnaanwzsqwemcijuzxqbrkpvydizjraicgnspizwwnwureyey"),
				OrdsURL:                    to.Ptr("lmqdgziantbczaneiqxopnaexcroelkbcgggjipzqfhoduwqodoyeghzjyuyhesewopbujxnoiziidhslxdawrfayjvxzjwfobtjrepldlmwhauiurzhbpyxsbueugddmdfindxsdjddqamwbptozzmobugnpezxyxdopripljdwnogjgrjwjfbugdkqrjwzjvavsdmgvspnzcgcjzxauqxqljmfgrtyohfppbmprmexiirvlmymxzyciaraihbwihvahyaciv"),
				SQLDevWebURL:               to.Ptr("pktklsvlakmblcakipxy"),
			},
			DataSafeStatus:       to.Ptr(armoracledatabase.DataSafeStatusTypeRegistering),
			DatabaseEdition:      to.Ptr(armoracledatabase.DatabaseEditionTypeEnterpriseEdition),
			AutonomousDatabaseID: to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/rg000/providers/Oracle.Database/autonomousDatabases/databasedb1"),
			LongTermBackupSchedule: &armoracledatabase.LongTermBackUpScheduleDetails{
				RepeatCadence:         to.Ptr(armoracledatabase.RepeatCadenceTypeOneTime),
				TimeOfBackup:          to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2025-08-01T04:32:58.715Z"); return t }()),
				RetentionPeriodInDays: to.Ptr[int32](188),
				IsDisabled:            to.Ptr(true),
			},
			LocalAdgAutoFailoverMaxDataLossLimit: to.Ptr[int32](1759),
			OpenMode:                             to.Ptr(armoracledatabase.OpenModeTypeReadOnly),
			OperationsInsightsStatus:             to.Ptr(armoracledatabase.OperationsInsightsStatusTypeEnabling),
			PermissionLevel:                      to.Ptr(armoracledatabase.PermissionLevelTypeRestricted),
			Role:                                 to.Ptr(armoracledatabase.RoleTypePrimary),
			Ocid:                                 to.Ptr("ocid1..aaaaa"),
			BackupRetentionPeriodInDays:          to.Ptr[int32](1),
			WhitelistedIPs: []*string{
				to.Ptr("1.1.1.1"),
				to.Ptr("1.1.1.0/24"),
				to.Ptr("1.1.2.25"),
			},
		},
		Location: to.Ptr("eastus"),
		Tags:     map[string]*string{},
	}, nil)
	if err != nil {
		log.Fatalf("failed to finish the request: %v", err)
	}
	res, err := poller.PollUntilDone(ctx, nil)
	if err != nil {
		log.Fatalf("failed to pull the result: %v", err)
	}
	// You could use response here. We use blank identifier for just demo purposes.
	_ = res
	// If the HTTP response code is 200 as defined in example definition, your response structure would look as follows. Please pay attention that all the values in the output are fake values for just demo purposes.
	// res = armoracledatabase.AutonomousDatabasesClientCreateOrUpdateResponse{
	// 	AutonomousDatabase: &armoracledatabase.AutonomousDatabase{
	// 		Properties: &armoracledatabase.AutonomousDatabaseProperties{
	// 			DataBaseType: to.Ptr(armoracledatabase.DataBaseTypeRegular),
	// 			DisplayName: to.Ptr("example_autonomous_databasedb1"),
	// 			ComputeModel: to.Ptr(armoracledatabase.ComputeModelECPU),
	// 			ComputeCount: to.Ptr[float32](2),
	// 			DataStorageSizeInTbs: to.Ptr[int32](1),
	// 			DbVersion: to.Ptr("18.4.0.0"),
	// 			CharacterSet: to.Ptr("AL32UTF8"),
	// 			NcharacterSet: to.Ptr("AL16UTF16"),
	// 			SubnetID: to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/rg000/providers/Microsoft.Network/virtualNetworks/vnet1/subnets/subnet1"),
	// 			VnetID: to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/rg000/providers/Microsoft.Network/virtualNetworks/vnet1"),
	// 			AutonomousMaintenanceScheduleType: to.Ptr(armoracledatabase.AutonomousMaintenanceScheduleTypeRegular),
	// 			CPUCoreCount: to.Ptr[int32](1),
	// 			CustomerContacts: []*armoracledatabase.CustomerContact{
	// 				{
	// 					Email: to.Ptr("agyiqecugrloatgwpvmilmvutcnyjpxzhbilhhqfvqqblfgursqelzjjnwnmpfstitmcgkovzxnstiqqwjnhwwaufbnkebpqxlqwmfnmtlkgkoxcnjwcnfqbdtokhjalagxphkuiwxtxrzuipokiuczmuwoqoebkjvhytlhtxzshwsdoywluoggznuyuozqibiwdgwqbgnyogysdjpvlowmvuvq"),
	// 				},
	// 			},
	// 			DataStorageSizeInGbs: to.Ptr[int32](1024),
	// 			DbWorkload: to.Ptr(armoracledatabase.WorkloadTypeOLTP),
	// 			IsAutoScalingEnabled: to.Ptr(true),
	// 			IsAutoScalingForStorageEnabled: to.Ptr(true),
	// 			PeerDbIDs: []*string{
	// 				to.Ptr("gpubz"),
	// 			},
	// 			IsLocalDataGuardEnabled: to.Ptr(true),
	// 			IsRemoteDataGuardEnabled: to.Ptr(true),
	// 			LocalDisasterRecoveryType: to.Ptr(armoracledatabase.DisasterRecoveryTypeAdg),
	// 			TimeDisasterRecoveryRoleChanged: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2025-08-01T04:32:58.722Z"); return t}()),
	// 			RemoteDisasterRecoveryConfiguration: &armoracledatabase.DisasterRecoveryConfigurationDetails{
	// 				DisasterRecoveryType: to.Ptr(armoracledatabase.DisasterRecoveryTypeAdg),
	// 				TimeSnapshotStandbyEnabledTill: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2025-08-01T04:32:58.715Z"); return t}()),
	// 				IsSnapshotStandby: to.Ptr(true),
	// 				IsReplicateAutomaticBackups: to.Ptr(true),
	// 			},
	// 			LocalStandbyDb: &armoracledatabase.AutonomousDatabaseStandbySummary{
	// 				LagTimeInSeconds: to.Ptr[int32](13),
	// 				LifecycleState: to.Ptr(armoracledatabase.AutonomousDatabaseLifecycleStateProvisioning),
	// 				LifecycleDetails: to.Ptr("zoiyaaibuuhm"),
	// 				TimeDataGuardRoleChanged: to.Ptr("inggk"),
	// 				TimeDisasterRecoveryRoleChanged: to.Ptr("q"),
	// 			},
	// 			FailedDataRecoveryInSeconds: to.Ptr[int32](27),
	// 			IsMtlsConnectionRequired: to.Ptr(true),
	// 			LicenseModel: to.Ptr(armoracledatabase.LicenseModelBringYourOwnLicense),
	// 			LifecycleDetails: to.Ptr("success"),
	// 			ProvisioningState: to.Ptr(armoracledatabase.AzureResourceProvisioningStateSucceeded),
	// 			LifecycleState: to.Ptr(armoracledatabase.AutonomousDatabaseLifecycleState("Succeeded")),
	// 			ScheduledOperationsList: []*armoracledatabase.ScheduledOperationsType{
	// 				{
	// 					DayOfWeek: &armoracledatabase.DayOfWeek{
	// 						Name: to.Ptr(armoracledatabase.DayOfWeekNameMonday),
	// 					},
	// 					ScheduledStartTime: to.Ptr("lwwvkazgmfremfwhckfb"),
	// 					ScheduledStopTime: to.Ptr("hjwagzxijpiaogulmnmbuqakpqxhkjvaypjqnvbvtjddc"),
	// 				},
	// 			},
	// 			PrivateEndpointIP: to.Ptr("rdlbhw"),
	// 			PrivateEndpointLabel: to.Ptr("worwqllbglhyakksevparfuaivc"),
	// 			OciURL: to.Ptr("https://fake"),
	// 			TimeCreated: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2024-01-09T20:44:09.466Z"); return t}()),
	// 			TimeMaintenanceBegin: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2025-08-01T04:32:58.722Z"); return t}()),
	// 			TimeMaintenanceEnd: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2025-08-01T04:32:58.722Z"); return t}()),
	// 			ActualUsedDataStorageSizeInTbs: to.Ptr[float64](8),
	// 			AllocatedStorageSizeInTbs: to.Ptr[float64](20),
	// 			ApexDetails: &armoracledatabase.ApexDetailsType{
	// 				ApexVersion: to.Ptr("scvpjwygbzqzevlztyfvqiaom"),
	// 				OrdsVersion: to.Ptr("djlwvhpipimxaguklshpppjrzasbk"),
	// 			},
	// 			AvailableUpgradeVersions: []*string{
	// 				to.Ptr("dgvzwolnmulrlwzzazgqm"),
	// 			},
	// 			ConnectionStrings: &armoracledatabase.ConnectionStringType{
	// 				AllConnectionStrings: &armoracledatabase.AllConnectionStringType{
	// 					High: to.Ptr("exdinleextbcjinutlkvnqyxhvandtihncykjzrhfdhfrxdarny"),
	// 					Low: to.Ptr("vurudxqtummqqbnidwthmsqgujufjxwfnejdpuxkgyoxlgqhcgsfjcpzaqeioslpehjfashipdsjhkrpdobstvgxsqrgvcrpbiiabhvymdsylqsjedrimqhtttmszlaqyukopuufbtkbtwgdydrvnvkcdqmphwzpcjxlgefzrdajyczzjdpuzvhqvupbvrpvqhzoaalg"),
	// 					Medium: to.Ptr("ishtubsuzgwtkfdqfgyxjlhehiokdvjfhwqhvmgtuksboshulroytcnubtrxxjbgoutftpzeavbldsoqjwmamgfwevhppyyeckythirzvaqujrjaiqnpyvycakhwgtuftmuxavdgdvbqxgsdqwbnqzmrzymwiydhxekenbweaghgvyveuysxqmovwodzwwfrxhtlcegekjk"),
	// 				},
	// 				Dedicated: to.Ptr("okoggzbidoaknwikuqpvepxvvcseukouprpfrldmakztkleeizbjf"),
	// 				High: to.Ptr("pggylyrivfn"),
	// 				Low: to.Ptr("zrjsbtdbfluaipbzgcvvhyuvqoczjneihaiftkfmuvvyoldslgvvpwthieyrcoxvh"),
	// 				Medium: to.Ptr("ebjnwenxvyeinsabrppychqbcawfxgplfacbsizltwfhpdafbkawopppqsxemlnmrbiqlstjupgdmpfcyyxgofmitbdiarrpprhntntqqjklseigycfcpmmlqiznxzliserjppmgfjatnmtbdxqtlbmrmpfbpoxmyffkkoptpayigeeefmqczroouqjxchswffywpsmyqohbyaclhsrwgqyuuyynvxyyzkche"),
	// 				Profiles: []*armoracledatabase.ProfileType{
	// 					{
	// 						ConsumerGroup: to.Ptr(armoracledatabase.ConsumerGroupHigh),
	// 						DisplayName: to.Ptr("mqqdgidxuovxhcwrkanybxzplautekarsxbcbzlkikpmmvjrdrrkncbamdtcuksplamigrdkydjbzeurbmjgehgppovxqhuzasduwptrlyaurzszzqpztckhpdniepaglzeublbwffxebfespqyfpljlutregvlzzjo"),
	// 						HostFormat: to.Ptr(armoracledatabase.HostFormatTypeFqdn),
	// 						IsRegional: to.Ptr(true),
	// 						Protocol: to.Ptr(armoracledatabase.ProtocolTypeTCP),
	// 						SessionMode: to.Ptr(armoracledatabase.SessionModeTypeDirect),
	// 						SyntaxFormat: to.Ptr(armoracledatabase.SyntaxFormatTypeLong),
	// 						TLSAuthentication: to.Ptr(armoracledatabase.TLSAuthenticationTypeServer),
	// 						Value: to.Ptr("bdrnwqpzbbzdipqqhnroxiuewqg"),
	// 					},
	// 				},
	// 			},
	// 			ConnectionUrls: &armoracledatabase.ConnectionURLType{
	// 				ApexURL: to.Ptr("epnebmudvzijxrfgabsdjewqfotqjmnxvokfhlyklhvtrjpprnqujthmceuhpfuumcbfxktppfguqduzkukxqkofoyyycljjtruyjtoiesxlrwwzonozaxetzrkpmzwasyvryvkryawxxf"),
	// 				DatabaseTransformsURL: to.Ptr("hujiemysucgdgtasazsdtwnxmtjppugunrqnzfzneatukuyzvkfseusjaxrourznsrwxjbvzfansdcyfxnvcyghl"),
	// 				GraphStudioURL: to.Ptr("bucnwmwixwemqqtoozfclfzqenskkyssvcatwbptsezpzdwgnaexgxutsvaibnkawyohqklnktzlhdbhbstm"),
	// 				MachineLearningNotebookURL: to.Ptr("vfhnqsrabxcrjnpqaqkgnpwhxffsqkrgcijdkkvnaoangzkcbgwklufujhmlgydxueybugxzgokxbbappdslttpdthhbmxrgcicqzyjyahjeiqopuglgbjfbhufuvsogquelagbjtyotwhmecwupooitcaftldxjycgfnlilrnicqjxnsucieftadjbvptzltmgqkxhttfkkbutaxvtfzbvbbxbmpxeeyfethpofnmbbqbtlqvnfgelvtjizckgixpptkilcvrntknusvppgnobokjpepynndswcqsnewhfnlxgmownfwfnokhbqulzyuessvxxtcdcnmumbbpjchmjbvjecbbinjolmuoaixzunawlxnoqbpzkczdsubpqpdltnfydwevearrdirzaszsudcxaspozeop"),
	// 				MongoDbURL: to.Ptr("dzmsqtcgsrdgwjlnrfmzcqcrkdqwmjrccxsszwdgpcygywnuurklwthgonxcnwaqcgzoexnaanwzsqwemcijuzxqbrkpvydizjraicgnspizwwnwureyey"),
	// 				OrdsURL: to.Ptr("lmqdgziantbczaneiqxopnaexcroelkbcgggjipzqfhoduwqodoyeghzjyuyhesewopbujxnoiziidhslxdawrfayjvxzjwfobtjrepldlmwhauiurzhbpyxsbueugddmdfindxsdjddqamwbptozzmobugnpezxyxdopripljdwnogjgrjwjfbugdkqrjwzjvavsdmgvspnzcgcjzxauqxqljmfgrtyohfppbmprmexiirvlmymxzyciaraihbwihvahyaciv"),
	// 				SQLDevWebURL: to.Ptr("pktklsvlakmblcakipxy"),
	// 			},
	// 			DataSafeStatus: to.Ptr(armoracledatabase.DataSafeStatusTypeRegistering),
	// 			DatabaseEdition: to.Ptr(armoracledatabase.DatabaseEditionTypeEnterpriseEdition),
	// 			AutonomousDatabaseID: to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/rg000/providers/Oracle.Database/autonomousDatabases/databasedb1"),
	// 			InMemoryAreaInGbs: to.Ptr[int32](29),
	// 			NextLongTermBackupTimeStamp: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2025-08-01T04:32:58.722Z"); return t}()),
	// 			LongTermBackupSchedule: &armoracledatabase.LongTermBackUpScheduleDetails{
	// 				RepeatCadence: to.Ptr(armoracledatabase.RepeatCadenceTypeOneTime),
	// 				TimeOfBackup: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2025-08-01T04:32:58.715Z"); return t}()),
	// 				RetentionPeriodInDays: to.Ptr[int32](188),
	// 				IsDisabled: to.Ptr(true),
	// 			},
	// 			IsPreview: to.Ptr(true),
	// 			LocalAdgAutoFailoverMaxDataLossLimit: to.Ptr[int32](1759),
	// 			MemoryPerOracleComputeUnitInGbs: to.Ptr[int32](17),
	// 			OpenMode: to.Ptr(armoracledatabase.OpenModeTypeReadOnly),
	// 			OperationsInsightsStatus: to.Ptr(armoracledatabase.OperationsInsightsStatusTypeEnabling),
	// 			PermissionLevel: to.Ptr(armoracledatabase.PermissionLevelTypeRestricted),
	// 			PrivateEndpoint: to.Ptr("zsknxwclpifygotuivnzkyy"),
	// 			ProvisionableCpus: []*int32{
	// 				to.Ptr[int32](11),
	// 			},
	// 			Role: to.Ptr(armoracledatabase.RoleTypePrimary),
	// 			ServiceConsoleURL: to.Ptr("vyqingzejychumpyufkkiskxhxtfdqhnkugercwlzgakttvdgkrxckvqkxdxlrqpgqosgobgjzyfdewpvhqthefbhtbkxeocreutrfbwmxnfircxsyevouxqyprlxqnmwvepamsylfibuppyslcxobxyynunowjqzupsmkeuuvkctrywubqafaorernjupfslwdlemro"),
	// 			SQLWebDeveloperURL: to.Ptr("ljdauohhvgrrnnzuuauxcuehjmugbhyqszoqcrwiwqnbuozzccqpizilcijojlnyhljxcorelkqldumfnzuljhpwqcaymbdyhvokpbqqkwrarqfrobbzsfbacdtqprrwnuqwrphqlqzilyoyehjfclemrfgylxgawydpflybcbdptzvlukuqhvtgrtaahpgkwymrfellwpbaklxllpbhtkyvlkqnumnsicpaknacvnlqqiyvwwxusjrzqthptckfuyjpferpwszwargimrpqjbigszibkukbdqzctyvktqzrgmhooimbuiblruulhrumetcllofxpqtjlongqtxtnpgfxojlnkkzwiqxrksqeepzqcqudimxtsthqljievdfhbzraluasdwaenmnipdgsnkxeqrlpygcggsfgsjqdxaxqagvoamckaosdzzltrjqlxyxbiaifrtjcnboziaweiyqenlafpchpjxxolvmsseubbaedachwgzectncatkeihzvdncmmhhwgravfcezhcjbhlvopzbnmtaytzadgdszsxpvygjewkyksmdyzepmdjqbkrakuaolveenpngakvazigbxoihfepvebfzpdfdmqrpyqgsdaraifdtnyopibqjavwhffvpowizaskrjosdpivqsgalwypptcwrfscpaqarlnjjzedjhutykdlgxnmmdmrbovscpvbwoeimqsfmiiyxewjldifllcqbmcpoixhufxbptbjkzsvmxurdzjksqirvvhejsjahvtohzsnxkxnmdgkgprwygcnpkxpgrnurnujwdtgkquzkcaanpaamhbbloywlzftxdrxzuhxdxudixgzuyckwkudtzcwdcnxqwdsojyefojusbfjftrmshziassecmgluwvcmwkcpurxajmwvbfgalhhnbebovzulefrdmhepjzqicqnilorzrtbqhemnxgkifxjjeksokqnezkekqiotwthuocqehxfwazqqonwpisrmapjjbwrrrorzepqcgjhfurxbmsfhvnnlzymavjdmfwhehhvqjdrccgabtbqkceqervrztnmfhjgjcvdeccksykspvtvgldhwuwtgobygzhdomdzthrbbhoqnbxfaamrcznmqegfbswuhypgsivoylcvtcyccvsbsxzgxqeqdslytyezyzwtokvivbvwrohcaselsenmzfevvrjkpeyymjiaegybeumjiggaszdwcwqzispeobhysxameswplkdcwhgdmjplexxkbxdmardfisbaplwtsqpmtachrrtsakzhpzwtwutnmcsuehstovmdxntvpzrzwmkms"),
	// 			SupportedRegionsToCloneTo: []*string{
	// 				to.Ptr("germanywestcentral"),
	// 			},
	// 			TimeDataGuardRoleChanged: to.Ptr("exsyrzikvlzvulmkpjxxetftlanim"),
	// 			TimeDeletionOfFreeAutonomousDatabase: to.Ptr("jtigszni"),
	// 			TimeLocalDataGuardEnabled: to.Ptr("rxmqyrqrdpfvleeer"),
	// 			TimeOfLastFailover: to.Ptr("vpcasufezytnkepvpibgqckn"),
	// 			TimeOfLastRefresh: to.Ptr("tqnkkzisphpiqapurwmpdlb"),
	// 			TimeOfLastRefreshPoint: to.Ptr("jfzhrbodayonnuwacgvwhovjgno"),
	// 			TimeOfLastSwitchover: to.Ptr("uvpwuwthnnbzmdmteqzboaah"),
	// 			TimeReclamationOfFreeAutonomousDatabase: to.Ptr("kekqxlbxjsehiretiq"),
	// 			UsedDataStorageSizeInGbs: to.Ptr[int32](13),
	// 			UsedDataStorageSizeInTbs: to.Ptr[int32](16),
	// 			Ocid: to.Ptr("ocid1..aaaaa"),
	// 			BackupRetentionPeriodInDays: to.Ptr[int32](1),
	// 			WhitelistedIPs: []*string{
	// 				to.Ptr("1.1.1.1"),
	// 				to.Ptr("1.1.1.0/24"),
	// 				to.Ptr("1.1.2.25"),
	// 			},
	// 		},
	// 		Location: to.Ptr("eastus"),
	// 		Tags: map[string]*string{
	// 		},
	// 		ID: to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/rg000/providers/Oracle.Database/autonomousDatabases/databasedb1"),
	// 		Name: to.Ptr("databasedb1"),
	// 		Type: to.Ptr("Oracle.Database/autonomousDatabases"),
	// 		SystemData: &armoracledatabase.SystemData{
	// 			CreatedBy: to.Ptr("sqehacivpuim"),
	// 			CreatedByType: to.Ptr(armoracledatabase.CreatedByTypeUser),
	// 			CreatedAt: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2025-08-01T04:32:58.716Z"); return t}()),
	// 			LastModifiedBy: to.Ptr("axrqfdkqylvjv"),
	// 			LastModifiedByType: to.Ptr(armoracledatabase.CreatedByTypeUser),
	// 			LastModifiedAt: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2025-08-01T04:32:58.716Z"); return t}()),
	// 		},
	// 	},
	// }
}

// Generated from example definition: 2025-09-01/autonomousDatabaseClone_create.json
func ExampleAutonomousDatabasesClient_BeginCreateOrUpdate_autonomousDatabasesCreateOrUpdateClone() {
	cred, err := azidentity.NewDefaultAzureCredential(nil)
	if err != nil {
		log.Fatalf("failed to obtain a credential: %v", err)
	}
	ctx := context.Background()
	clientFactory, err := armoracledatabase.NewClientFactory("00000000-0000-0000-0000-000000000000", cred, nil)
	if err != nil {
		log.Fatalf("failed to create client: %v", err)
	}
	poller, err := clientFactory.NewAutonomousDatabasesClient().BeginCreateOrUpdate(ctx, "rg000", "databasedb1", armoracledatabase.AutonomousDatabase{
		Properties: &armoracledatabase.AutonomousDatabaseCloneProperties{
			DataBaseType:         to.Ptr(armoracledatabase.DataBaseTypeClone),
			SourceID:             to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/rg000/providers/Oracle.Database/autonomousDatabases/databasedb1"),
			CloneType:            to.Ptr(armoracledatabase.CloneTypeFull),
			DisplayName:          to.Ptr("example_autonomous_databasedb1_clone"),
			ComputeModel:         to.Ptr(armoracledatabase.ComputeModelECPU),
			ComputeCount:         to.Ptr[float32](2),
			DataStorageSizeInTbs: to.Ptr[int32](1),
			CharacterSet:         to.Ptr("AL32UTF8"),
			NcharacterSet:        to.Ptr("AL16UTF16"),
			AdminPassword:        to.Ptr("********"),
			SubnetID:             to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/rg000/providers/Microsoft.Network/virtualNetworks/vnet1/subnets/subnet1"),
			VnetID:               to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/rg000/providers/Microsoft.Network/virtualNetworks/vnet1"),
		},
		Location: to.Ptr("eastus"),
		Tags: map[string]*string{
			"tagK1": to.Ptr("tagV1"),
		},
	}, nil)
	if err != nil {
		log.Fatalf("failed to finish the request: %v", err)
	}
	res, err := poller.PollUntilDone(ctx, nil)
	if err != nil {
		log.Fatalf("failed to pull the result: %v", err)
	}
	// You could use response here. We use blank identifier for just demo purposes.
	_ = res
	// If the HTTP response code is 200 as defined in example definition, your response structure would look as follows. Please pay attention that all the values in the output are fake values for just demo purposes.
	// res = armoracledatabase.AutonomousDatabasesClientCreateOrUpdateResponse{
	// 	AutonomousDatabase: &armoracledatabase.AutonomousDatabase{
	// 		ID: to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/rg000/providers/Oracle.Database/autonomousDatabases/databasedb1"),
	// 		Type: to.Ptr("Oracle.Database/autonomousDatabases"),
	// 		Location: to.Ptr("eastus"),
	// 		Tags: map[string]*string{
	// 			"tagK1": to.Ptr("tagV1"),
	// 		},
	// 		Properties: &armoracledatabase.AutonomousDatabaseCloneProperties{
	// 			AutonomousDatabaseID: to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/rg000/providers/Oracle.Database/autonomousDatabases/databasedb1Clone"),
	// 			AutonomousMaintenanceScheduleType: to.Ptr(armoracledatabase.AutonomousMaintenanceScheduleTypeRegular),
	// 			CharacterSet: to.Ptr("AL32UTF8"),
	// 			NcharacterSet: to.Ptr("AL16UTF16"),
	// 			ComputeCount: to.Ptr[float32](2),
	// 			ComputeModel: to.Ptr(armoracledatabase.ComputeModelECPU),
	// 			CPUCoreCount: to.Ptr[int32](1),
	// 			CloneType: to.Ptr(armoracledatabase.CloneTypeFull),
	// 			DataStorageSizeInGbs: to.Ptr[int32](1024),
	// 			DataStorageSizeInTbs: to.Ptr[int32](1),
	// 			DatabaseEdition: to.Ptr(armoracledatabase.DatabaseEditionTypeEnterpriseEdition),
	// 			DataBaseType: to.Ptr(armoracledatabase.DataBaseTypeClone),
	// 			DbVersion: to.Ptr("18.4.0.0"),
	// 			DisplayName: to.Ptr("example_autonomous_databasedb1"),
	// 			IsAutoScalingEnabled: to.Ptr(false),
	// 			IsAutoScalingForStorageEnabled: to.Ptr(false),
	// 			IsLocalDataGuardEnabled: to.Ptr(false),
	// 			IsMtlsConnectionRequired: to.Ptr(true),
	// 			LicenseModel: to.Ptr(armoracledatabase.LicenseModelBringYourOwnLicense),
	// 			LifecycleState: to.Ptr(armoracledatabase.AutonomousDatabaseLifecycleState("Succeeded")),
	// 			LifecycleDetails: to.Ptr("success"),
	// 			SourceID: to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/rg000/providers/Oracle.Database/autonomousDatabases/databasedb1"),
	// 			SubnetID: to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/rg000/providers/Microsoft.Network/virtualNetworks/vnet1/subnets/subnet1"),
	// 			VnetID: to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/rg000/providers/Microsoft.Network/virtualNetworks/vnet1"),
	// 			ProvisioningState: to.Ptr(armoracledatabase.AzureResourceProvisioningStateSucceeded),
	// 			OciURL: to.Ptr("https://fake"),
	// 			TimeCreated: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2024-01-09T20:44:09.466Z"); return t}()),
	// 			Ocid: to.Ptr("ocid1..aaaaa"),
	// 			WhitelistedIPs: []*string{
	// 				to.Ptr("1.1.1.1"),
	// 				to.Ptr("1.1.1.0/24"),
	// 				to.Ptr("1.1.2.25"),
	// 			},
	// 		},
	// 	},
	// }
}

// Generated from example definition: 2025-09-01/autonomousDatabase_create.json
func ExampleAutonomousDatabasesClient_BeginCreateOrUpdate_autonomousDatabasesCreateOrUpdate() {
	cred, err := azidentity.NewDefaultAzureCredential(nil)
	if err != nil {
		log.Fatalf("failed to obtain a credential: %v", err)
	}
	ctx := context.Background()
	clientFactory, err := armoracledatabase.NewClientFactory("00000000-0000-0000-0000-000000000000", cred, nil)
	if err != nil {
		log.Fatalf("failed to create client: %v", err)
	}
	poller, err := clientFactory.NewAutonomousDatabasesClient().BeginCreateOrUpdate(ctx, "rg000", "databasedb1", armoracledatabase.AutonomousDatabase{
		Properties: &armoracledatabase.AutonomousDatabaseProperties{
			DataBaseType:         to.Ptr(armoracledatabase.DataBaseTypeRegular),
			DisplayName:          to.Ptr("example_autonomous_databasedb1"),
			ComputeModel:         to.Ptr(armoracledatabase.ComputeModelECPU),
			ComputeCount:         to.Ptr[float32](2),
			DataStorageSizeInTbs: to.Ptr[int32](1),
			AdminPassword:        to.Ptr("********"),
			DbVersion:            to.Ptr("18.4.0.0"),
			CharacterSet:         to.Ptr("AL32UTF8"),
			NcharacterSet:        to.Ptr("AL16UTF16"),
			SubnetID:             to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/rg000/providers/Microsoft.Network/virtualNetworks/vnet1/subnets/subnet1"),
			VnetID:               to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/rg000/providers/Microsoft.Network/virtualNetworks/vnet1"),
		},
		Location: to.Ptr("eastus"),
		Tags: map[string]*string{
			"tagK1": to.Ptr("tagV1"),
		},
	}, nil)
	if err != nil {
		log.Fatalf("failed to finish the request: %v", err)
	}
	res, err := poller.PollUntilDone(ctx, nil)
	if err != nil {
		log.Fatalf("failed to pull the result: %v", err)
	}
	// You could use response here. We use blank identifier for just demo purposes.
	_ = res
	// If the HTTP response code is 200 as defined in example definition, your response structure would look as follows. Please pay attention that all the values in the output are fake values for just demo purposes.
	// res = armoracledatabase.AutonomousDatabasesClientCreateOrUpdateResponse{
	// 	AutonomousDatabase: &armoracledatabase.AutonomousDatabase{
	// 		ID: to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/rg000/providers/Oracle.Database/autonomousDatabases/databasedb1"),
	// 		Type: to.Ptr("Oracle.Database/autonomousDatabases"),
	// 		Location: to.Ptr("eastus"),
	// 		Tags: map[string]*string{
	// 			"tagK1": to.Ptr("tagV1"),
	// 		},
	// 		Properties: &armoracledatabase.AutonomousDatabaseProperties{
	// 			AutonomousDatabaseID: to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/rg000/providers/Oracle.Database/autonomousDatabases/databasedb1"),
	// 			AutonomousMaintenanceScheduleType: to.Ptr(armoracledatabase.AutonomousMaintenanceScheduleTypeRegular),
	// 			CharacterSet: to.Ptr("AL32UTF8"),
	// 			NcharacterSet: to.Ptr("AL16UTF16"),
	// 			ComputeCount: to.Ptr[float32](2),
	// 			ComputeModel: to.Ptr(armoracledatabase.ComputeModelECPU),
	// 			CPUCoreCount: to.Ptr[int32](1),
	// 			DataStorageSizeInGbs: to.Ptr[int32](1024),
	// 			DataStorageSizeInTbs: to.Ptr[int32](1),
	// 			DatabaseEdition: to.Ptr(armoracledatabase.DatabaseEditionTypeEnterpriseEdition),
	// 			DataBaseType: to.Ptr(armoracledatabase.DataBaseTypeRegular),
	// 			DbVersion: to.Ptr("18.4.0.0"),
	// 			DisplayName: to.Ptr("example_autonomous_databasedb1"),
	// 			IsAutoScalingEnabled: to.Ptr(false),
	// 			IsAutoScalingForStorageEnabled: to.Ptr(false),
	// 			IsLocalDataGuardEnabled: to.Ptr(false),
	// 			IsMtlsConnectionRequired: to.Ptr(true),
	// 			LicenseModel: to.Ptr(armoracledatabase.LicenseModelBringYourOwnLicense),
	// 			LifecycleState: to.Ptr(armoracledatabase.AutonomousDatabaseLifecycleState("Succeeded")),
	// 			LifecycleDetails: to.Ptr("success"),
	// 			SubnetID: to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/rg000/providers/Microsoft.Network/virtualNetworks/vnet1/subnets/subnet1"),
	// 			VnetID: to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/rg000/providers/Microsoft.Network/virtualNetworks/vnet1"),
	// 			ProvisioningState: to.Ptr(armoracledatabase.AzureResourceProvisioningStateSucceeded),
	// 			OciURL: to.Ptr("https://fake"),
	// 			TimeCreated: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2024-01-09T20:44:09.466Z"); return t}()),
	// 			Ocid: to.Ptr("ocid1..aaaaa"),
	// 			WhitelistedIPs: []*string{
	// 				to.Ptr("1.1.1.1"),
	// 				to.Ptr("1.1.1.0/24"),
	// 				to.Ptr("1.1.2.25"),
	// 			},
	// 		},
	// 	},
	// }
}

// Generated from example definition: 2025-09-01/AutonomousDatabases_Delete_MaximumSet_Gen.json
func ExampleAutonomousDatabasesClient_BeginDelete_deleteAutonomousDatabaseGeneratedByMaximumSetRule() {
	cred, err := azidentity.NewDefaultAzureCredential(nil)
	if err != nil {
		log.Fatalf("failed to obtain a credential: %v", err)
	}
	ctx := context.Background()
	clientFactory, err := armoracledatabase.NewClientFactory("00000000-0000-0000-0000-000000000000", cred, nil)
	if err != nil {
		log.Fatalf("failed to create client: %v", err)
	}
	poller, err := clientFactory.NewAutonomousDatabasesClient().BeginDelete(ctx, "rgopenapi", "databasedb1", nil)
	if err != nil {
		log.Fatalf("failed to finish the request: %v", err)
	}
	_, err = poller.PollUntilDone(ctx, nil)
	if err != nil {
		log.Fatalf("failed to pull the result: %v", err)
	}
}

// Generated from example definition: 2025-09-01/autonomousDatabase_delete.json
func ExampleAutonomousDatabasesClient_BeginDelete_autonomousDatabasesDelete() {
	cred, err := azidentity.NewDefaultAzureCredential(nil)
	if err != nil {
		log.Fatalf("failed to obtain a credential: %v", err)
	}
	ctx := context.Background()
	clientFactory, err := armoracledatabase.NewClientFactory("00000000-0000-0000-0000-000000000000", cred, nil)
	if err != nil {
		log.Fatalf("failed to create client: %v", err)
	}
	poller, err := clientFactory.NewAutonomousDatabasesClient().BeginDelete(ctx, "rg000", "databasedb1", nil)
	if err != nil {
		log.Fatalf("failed to finish the request: %v", err)
	}
	_, err = poller.PollUntilDone(ctx, nil)
	if err != nil {
		log.Fatalf("failed to pull the result: %v", err)
	}
}

// Generated from example definition: 2025-09-01/AutonomousDatabases_Failover_MaximumSet_Gen.json
func ExampleAutonomousDatabasesClient_BeginFailover_performFailoverActionOnAutonomousDatabaseGeneratedByMaximumSetRule() {
	cred, err := azidentity.NewDefaultAzureCredential(nil)
	if err != nil {
		log.Fatalf("failed to obtain a credential: %v", err)
	}
	ctx := context.Background()
	clientFactory, err := armoracledatabase.NewClientFactory("00000000-0000-0000-0000-000000000000", cred, nil)
	if err != nil {
		log.Fatalf("failed to create client: %v", err)
	}
	poller, err := clientFactory.NewAutonomousDatabasesClient().BeginFailover(ctx, "rgopenapi", "databasedb1*", armoracledatabase.PeerDbDetails{
		PeerDbID:       to.Ptr("peerDbId"),
		PeerDbOcid:     to.Ptr("yozpqyefqhirkybmzwgoidyl"),
		PeerDbLocation: to.Ptr("cxlzbzbfzi"),
	}, nil)
	if err != nil {
		log.Fatalf("failed to finish the request: %v", err)
	}
	res, err := poller.PollUntilDone(ctx, nil)
	if err != nil {
		log.Fatalf("failed to pull the result: %v", err)
	}
	// You could use response here. We use blank identifier for just demo purposes.
	_ = res
	// If the HTTP response code is 200 as defined in example definition, your response structure would look as follows. Please pay attention that all the values in the output are fake values for just demo purposes.
	// res = armoracledatabase.AutonomousDatabasesClientFailoverResponse{
	// 	AutonomousDatabase: &armoracledatabase.AutonomousDatabase{
	// 		Properties: &armoracledatabase.AutonomousDatabaseProperties{
	// 			DataBaseType: to.Ptr(armoracledatabase.DataBaseTypeRegular),
	// 			DisplayName: to.Ptr("example_autonomous_databasedb1"),
	// 			ComputeModel: to.Ptr(armoracledatabase.ComputeModelECPU),
	// 			ComputeCount: to.Ptr[float32](2),
	// 			DataStorageSizeInTbs: to.Ptr[int32](1),
	// 			DbVersion: to.Ptr("18.4.0.0"),
	// 			CharacterSet: to.Ptr("AL32UTF8"),
	// 			NcharacterSet: to.Ptr("AL16UTF16"),
	// 			SubnetID: to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/rg000/providers/Microsoft.Network/virtualNetworks/vnet1/subnets/subnet1"),
	// 			VnetID: to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/rg000/providers/Microsoft.Network/virtualNetworks/vnet1"),
	// 			AutonomousMaintenanceScheduleType: to.Ptr(armoracledatabase.AutonomousMaintenanceScheduleTypeRegular),
	// 			CPUCoreCount: to.Ptr[int32](1),
	// 			CustomerContacts: []*armoracledatabase.CustomerContact{
	// 				{
	// 					Email: to.Ptr("agyiqecugrloatgwpvmilmvutcnyjpxzhbilhhqfvqqblfgursqelzjjnwnmpfstitmcgkovzxnstiqqwjnhwwaufbnkebpqxlqwmfnmtlkgkoxcnjwcnfqbdtokhjalagxphkuiwxtxrzuipokiuczmuwoqoebkjvhytlhtxzshwsdoywluoggznuyuozqibiwdgwqbgnyogysdjpvlowmvuvq"),
	// 				},
	// 			},
	// 			DataStorageSizeInGbs: to.Ptr[int32](1024),
	// 			DbWorkload: to.Ptr(armoracledatabase.WorkloadTypeOLTP),
	// 			IsAutoScalingEnabled: to.Ptr(true),
	// 			IsAutoScalingForStorageEnabled: to.Ptr(true),
	// 			PeerDbIDs: []*string{
	// 				to.Ptr("gpubz"),
	// 			},
	// 			IsLocalDataGuardEnabled: to.Ptr(true),
	// 			IsRemoteDataGuardEnabled: to.Ptr(true),
	// 			LocalDisasterRecoveryType: to.Ptr(armoracledatabase.DisasterRecoveryTypeAdg),
	// 			TimeDisasterRecoveryRoleChanged: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2025-08-01T04:32:58.722Z"); return t}()),
	// 			RemoteDisasterRecoveryConfiguration: &armoracledatabase.DisasterRecoveryConfigurationDetails{
	// 				DisasterRecoveryType: to.Ptr(armoracledatabase.DisasterRecoveryTypeAdg),
	// 				TimeSnapshotStandbyEnabledTill: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2025-08-01T04:32:58.715Z"); return t}()),
	// 				IsSnapshotStandby: to.Ptr(true),
	// 				IsReplicateAutomaticBackups: to.Ptr(true),
	// 			},
	// 			LocalStandbyDb: &armoracledatabase.AutonomousDatabaseStandbySummary{
	// 				LagTimeInSeconds: to.Ptr[int32](13),
	// 				LifecycleState: to.Ptr(armoracledatabase.AutonomousDatabaseLifecycleStateProvisioning),
	// 				LifecycleDetails: to.Ptr("zoiyaaibuuhm"),
	// 				TimeDataGuardRoleChanged: to.Ptr("inggk"),
	// 				TimeDisasterRecoveryRoleChanged: to.Ptr("q"),
	// 			},
	// 			FailedDataRecoveryInSeconds: to.Ptr[int32](27),
	// 			IsMtlsConnectionRequired: to.Ptr(true),
	// 			LicenseModel: to.Ptr(armoracledatabase.LicenseModelBringYourOwnLicense),
	// 			LifecycleDetails: to.Ptr("success"),
	// 			ProvisioningState: to.Ptr(armoracledatabase.AzureResourceProvisioningStateSucceeded),
	// 			LifecycleState: to.Ptr(armoracledatabase.AutonomousDatabaseLifecycleState("Succeeded")),
	// 			ScheduledOperationsList: []*armoracledatabase.ScheduledOperationsType{
	// 				{
	// 					DayOfWeek: &armoracledatabase.DayOfWeek{
	// 						Name: to.Ptr(armoracledatabase.DayOfWeekNameMonday),
	// 					},
	// 					ScheduledStartTime: to.Ptr("lwwvkazgmfremfwhckfb"),
	// 					ScheduledStopTime: to.Ptr("hjwagzxijpiaogulmnmbuqakpqxhkjvaypjqnvbvtjddc"),
	// 				},
	// 			},
	// 			PrivateEndpointIP: to.Ptr("rdlbhw"),
	// 			PrivateEndpointLabel: to.Ptr("worwqllbglhyakksevparfuaivc"),
	// 			OciURL: to.Ptr("https://fake"),
	// 			TimeCreated: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2024-01-09T20:44:09.466Z"); return t}()),
	// 			TimeMaintenanceBegin: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2025-08-01T04:32:58.722Z"); return t}()),
	// 			TimeMaintenanceEnd: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2025-08-01T04:32:58.722Z"); return t}()),
	// 			ActualUsedDataStorageSizeInTbs: to.Ptr[float64](8),
	// 			AllocatedStorageSizeInTbs: to.Ptr[float64](20),
	// 			ApexDetails: &armoracledatabase.ApexDetailsType{
	// 				ApexVersion: to.Ptr("scvpjwygbzqzevlztyfvqiaom"),
	// 				OrdsVersion: to.Ptr("djlwvhpipimxaguklshpppjrzasbk"),
	// 			},
	// 			AvailableUpgradeVersions: []*string{
	// 				to.Ptr("dgvzwolnmulrlwzzazgqm"),
	// 			},
	// 			ConnectionStrings: &armoracledatabase.ConnectionStringType{
	// 				AllConnectionStrings: &armoracledatabase.AllConnectionStringType{
	// 					High: to.Ptr("exdinleextbcjinutlkvnqyxhvandtihncykjzrhfdhfrxdarny"),
	// 					Low: to.Ptr("vurudxqtummqqbnidwthmsqgujufjxwfnejdpuxkgyoxlgqhcgsfjcpzaqeioslpehjfashipdsjhkrpdobstvgxsqrgvcrpbiiabhvymdsylqsjedrimqhtttmszlaqyukopuufbtkbtwgdydrvnvkcdqmphwzpcjxlgefzrdajyczzjdpuzvhqvupbvrpvqhzoaalg"),
	// 					Medium: to.Ptr("ishtubsuzgwtkfdqfgyxjlhehiokdvjfhwqhvmgtuksboshulroytcnubtrxxjbgoutftpzeavbldsoqjwmamgfwevhppyyeckythirzvaqujrjaiqnpyvycakhwgtuftmuxavdgdvbqxgsdqwbnqzmrzymwiydhxekenbweaghgvyveuysxqmovwodzwwfrxhtlcegekjk"),
	// 				},
	// 				Dedicated: to.Ptr("okoggzbidoaknwikuqpvepxvvcseukouprpfrldmakztkleeizbjf"),
	// 				High: to.Ptr("pggylyrivfn"),
	// 				Low: to.Ptr("zrjsbtdbfluaipbzgcvvhyuvqoczjneihaiftkfmuvvyoldslgvvpwthieyrcoxvh"),
	// 				Medium: to.Ptr("ebjnwenxvyeinsabrppychqbcawfxgplfacbsizltwfhpdafbkawopppqsxemlnmrbiqlstjupgdmpfcyyxgofmitbdiarrpprhntntqqjklseigycfcpmmlqiznxzliserjppmgfjatnmtbdxqtlbmrmpfbpoxmyffkkoptpayigeeefmqczroouqjxchswffywpsmyqohbyaclhsrwgqyuuyynvxyyzkche"),
	// 				Profiles: []*armoracledatabase.ProfileType{
	// 					{
	// 						ConsumerGroup: to.Ptr(armoracledatabase.ConsumerGroupHigh),
	// 						DisplayName: to.Ptr("mqqdgidxuovxhcwrkanybxzplautekarsxbcbzlkikpmmvjrdrrkncbamdtcuksplamigrdkydjbzeurbmjgehgppovxqhuzasduwptrlyaurzszzqpztckhpdniepaglzeublbwffxebfespqyfpljlutregvlzzjo"),
	// 						HostFormat: to.Ptr(armoracledatabase.HostFormatTypeFqdn),
	// 						IsRegional: to.Ptr(true),
	// 						Protocol: to.Ptr(armoracledatabase.ProtocolTypeTCP),
	// 						SessionMode: to.Ptr(armoracledatabase.SessionModeTypeDirect),
	// 						SyntaxFormat: to.Ptr(armoracledatabase.SyntaxFormatTypeLong),
	// 						TLSAuthentication: to.Ptr(armoracledatabase.TLSAuthenticationTypeServer),
	// 						Value: to.Ptr("bdrnwqpzbbzdipqqhnroxiuewqg"),
	// 					},
	// 				},
	// 			},
	// 			ConnectionUrls: &armoracledatabase.ConnectionURLType{
	// 				ApexURL: to.Ptr("epnebmudvzijxrfgabsdjewqfotqjmnxvokfhlyklhvtrjpprnqujthmceuhpfuumcbfxktppfguqduzkukxqkofoyyycljjtruyjtoiesxlrwwzonozaxetzrkpmzwasyvryvkryawxxf"),
	// 				DatabaseTransformsURL: to.Ptr("hujiemysucgdgtasazsdtwnxmtjppugunrqnzfzneatukuyzvkfseusjaxrourznsrwxjbvzfansdcyfxnvcyghl"),
	// 				GraphStudioURL: to.Ptr("bucnwmwixwemqqtoozfclfzqenskkyssvcatwbptsezpzdwgnaexgxutsvaibnkawyohqklnktzlhdbhbstm"),
	// 				MachineLearningNotebookURL: to.Ptr("vfhnqsrabxcrjnpqaqkgnpwhxffsqkrgcijdkkvnaoangzkcbgwklufujhmlgydxueybugxzgokxbbappdslttpdthhbmxrgcicqzyjyahjeiqopuglgbjfbhufuvsogquelagbjtyotwhmecwupooitcaftldxjycgfnlilrnicqjxnsucieftadjbvptzltmgqkxhttfkkbutaxvtfzbvbbxbmpxeeyfethpofnmbbqbtlqvnfgelvtjizckgixpptkilcvrntknusvppgnobokjpepynndswcqsnewhfnlxgmownfwfnokhbqulzyuessvxxtcdcnmumbbpjchmjbvjecbbinjolmuoaixzunawlxnoqbpzkczdsubpqpdltnfydwevearrdirzaszsudcxaspozeop"),
	// 				MongoDbURL: to.Ptr("dzmsqtcgsrdgwjlnrfmzcqcrkdqwmjrccxsszwdgpcygywnuurklwthgonxcnwaqcgzoexnaanwzsqwemcijuzxqbrkpvydizjraicgnspizwwnwureyey"),
	// 				OrdsURL: to.Ptr("lmqdgziantbczaneiqxopnaexcroelkbcgggjipzqfhoduwqodoyeghzjyuyhesewopbujxnoiziidhslxdawrfayjvxzjwfobtjrepldlmwhauiurzhbpyxsbueugddmdfindxsdjddqamwbptozzmobugnpezxyxdopripljdwnogjgrjwjfbugdkqrjwzjvavsdmgvspnzcgcjzxauqxqljmfgrtyohfppbmprmexiirvlmymxzyciaraihbwihvahyaciv"),
	// 				SQLDevWebURL: to.Ptr("pktklsvlakmblcakipxy"),
	// 			},
	// 			DataSafeStatus: to.Ptr(armoracledatabase.DataSafeStatusTypeRegistering),
	// 			DatabaseEdition: to.Ptr(armoracledatabase.DatabaseEditionTypeEnterpriseEdition),
	// 			AutonomousDatabaseID: to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/rg000/providers/Oracle.Database/autonomousDatabases/databasedb1"),
	// 			InMemoryAreaInGbs: to.Ptr[int32](29),
	// 			NextLongTermBackupTimeStamp: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2025-08-01T04:32:58.722Z"); return t}()),
	// 			LongTermBackupSchedule: &armoracledatabase.LongTermBackUpScheduleDetails{
	// 				RepeatCadence: to.Ptr(armoracledatabase.RepeatCadenceTypeOneTime),
	// 				TimeOfBackup: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2025-08-01T04:32:58.715Z"); return t}()),
	// 				RetentionPeriodInDays: to.Ptr[int32](188),
	// 				IsDisabled: to.Ptr(true),
	// 			},
	// 			IsPreview: to.Ptr(true),
	// 			LocalAdgAutoFailoverMaxDataLossLimit: to.Ptr[int32](1759),
	// 			MemoryPerOracleComputeUnitInGbs: to.Ptr[int32](17),
	// 			OpenMode: to.Ptr(armoracledatabase.OpenModeTypeReadOnly),
	// 			OperationsInsightsStatus: to.Ptr(armoracledatabase.OperationsInsightsStatusTypeEnabling),
	// 			PermissionLevel: to.Ptr(armoracledatabase.PermissionLevelTypeRestricted),
	// 			PrivateEndpoint: to.Ptr("zsknxwclpifygotuivnzkyy"),
	// 			ProvisionableCpus: []*int32{
	// 				to.Ptr[int32](11),
	// 			},
	// 			Role: to.Ptr(armoracledatabase.RoleTypePrimary),
	// 			ServiceConsoleURL: to.Ptr("vyqingzejychumpyufkkiskxhxtfdqhnkugercwlzgakttvdgkrxckvqkxdxlrqpgqosgobgjzyfdewpvhqthefbhtbkxeocreutrfbwmxnfircxsyevouxqyprlxqnmwvepamsylfibuppyslcxobxyynunowjqzupsmkeuuvkctrywubqafaorernjupfslwdlemro"),
	// 			SQLWebDeveloperURL: to.Ptr("ljdauohhvgrrnnzuuauxcuehjmugbhyqszoqcrwiwqnbuozzccqpizilcijojlnyhljxcorelkqldumfnzuljhpwqcaymbdyhvokpbqqkwrarqfrobbzsfbacdtqprrwnuqwrphqlqzilyoyehjfclemrfgylxgawydpflybcbdptzvlukuqhvtgrtaahpgkwymrfellwpbaklxllpbhtkyvlkqnumnsicpaknacvnlqqiyvwwxusjrzqthptckfuyjpferpwszwargimrpqjbigszibkukbdqzctyvktqzrgmhooimbuiblruulhrumetcllofxpqtjlongqtxtnpgfxojlnkkzwiqxrksqeepzqcqudimxtsthqljievdfhbzraluasdwaenmnipdgsnkxeqrlpygcggsfgsjqdxaxqagvoamckaosdzzltrjqlxyxbiaifrtjcnboziaweiyqenlafpchpjxxolvmsseubbaedachwgzectncatkeihzvdncmmhhwgravfcezhcjbhlvopzbnmtaytzadgdszsxpvygjewkyksmdyzepmdjqbkrakuaolveenpngakvazigbxoihfepvebfzpdfdmqrpyqgsdaraifdtnyopibqjavwhffvpowizaskrjosdpivqsgalwypptcwrfscpaqarlnjjzedjhutykdlgxnmmdmrbovscpvbwoeimqsfmiiyxewjldifllcqbmcpoixhufxbptbjkzsvmxurdzjksqirvvhejsjahvtohzsnxkxnmdgkgprwygcnpkxpgrnurnujwdtgkquzkcaanpaamhbbloywlzftxdrxzuhxdxudixgzuyckwkudtzcwdcnxqwdsojyefojusbfjftrmshziassecmgluwvcmwkcpurxajmwvbfgalhhnbebovzulefrdmhepjzqicqnilorzrtbqhemnxgkifxjjeksokqnezkekqiotwthuocqehxfwazqqonwpisrmapjjbwrrrorzepqcgjhfurxbmsfhvnnlzymavjdmfwhehhvqjdrccgabtbqkceqervrztnmfhjgjcvdeccksykspvtvgldhwuwtgobygzhdomdzthrbbhoqnbxfaamrcznmqegfbswuhypgsivoylcvtcyccvsbsxzgxqeqdslytyezyzwtokvivbvwrohcaselsenmzfevvrjkpeyymjiaegybeumjiggaszdwcwqzispeobhysxameswplkdcwhgdmjplexxkbxdmardfisbaplwtsqpmtachrrtsakzhpzwtwutnmcsuehstovmdxntvpzrzwmkms"),
	// 			SupportedRegionsToCloneTo: []*string{
	// 				to.Ptr("germanywestcentral"),
	// 			},
	// 			TimeDataGuardRoleChanged: to.Ptr("exsyrzikvlzvulmkpjxxetftlanim"),
	// 			TimeDeletionOfFreeAutonomousDatabase: to.Ptr("jtigszni"),
	// 			TimeLocalDataGuardEnabled: to.Ptr("rxmqyrqrdpfvleeer"),
	// 			TimeOfLastFailover: to.Ptr("vpcasufezytnkepvpibgqckn"),
	// 			TimeOfLastRefresh: to.Ptr("tqnkkzisphpiqapurwmpdlb"),
	// 			TimeOfLastRefreshPoint: to.Ptr("jfzhrbodayonnuwacgvwhovjgno"),
	// 			TimeOfLastSwitchover: to.Ptr("uvpwuwthnnbzmdmteqzboaah"),
	// 			TimeReclamationOfFreeAutonomousDatabase: to.Ptr("kekqxlbxjsehiretiq"),
	// 			UsedDataStorageSizeInGbs: to.Ptr[int32](13),
	// 			UsedDataStorageSizeInTbs: to.Ptr[int32](16),
	// 			Ocid: to.Ptr("ocid1..aaaaa"),
	// 			BackupRetentionPeriodInDays: to.Ptr[int32](1),
	// 			WhitelistedIPs: []*string{
	// 				to.Ptr("1.1.1.1"),
	// 				to.Ptr("1.1.1.0/24"),
	// 				to.Ptr("1.1.2.25"),
	// 			},
	// 		},
	// 		Location: to.Ptr("eastus"),
	// 		Tags: map[string]*string{
	// 		},
	// 		ID: to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/rg000/providers/Oracle.Database/autonomousDatabases/databasedb1"),
	// 		Name: to.Ptr("databasedb1"),
	// 		Type: to.Ptr("Oracle.Database/autonomousDatabases"),
	// 		SystemData: &armoracledatabase.SystemData{
	// 			CreatedBy: to.Ptr("sqehacivpuim"),
	// 			CreatedByType: to.Ptr(armoracledatabase.CreatedByTypeUser),
	// 			CreatedAt: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2025-08-01T04:32:58.716Z"); return t}()),
	// 			LastModifiedBy: to.Ptr("axrqfdkqylvjv"),
	// 			LastModifiedByType: to.Ptr(armoracledatabase.CreatedByTypeUser),
	// 			LastModifiedAt: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2025-08-01T04:32:58.716Z"); return t}()),
	// 		},
	// 	},
	// }
}

// Generated from example definition: 2025-09-01/autonomousDatabase_failover.json
func ExampleAutonomousDatabasesClient_BeginFailover_autonomousDatabasesFailover() {
	cred, err := azidentity.NewDefaultAzureCredential(nil)
	if err != nil {
		log.Fatalf("failed to obtain a credential: %v", err)
	}
	ctx := context.Background()
	clientFactory, err := armoracledatabase.NewClientFactory("00000000-0000-0000-0000-000000000000", cred, nil)
	if err != nil {
		log.Fatalf("failed to create client: %v", err)
	}
	poller, err := clientFactory.NewAutonomousDatabasesClient().BeginFailover(ctx, "rg000", "databasedb1", armoracledatabase.PeerDbDetails{
		PeerDbID: to.Ptr("peerDbId"),
	}, nil)
	if err != nil {
		log.Fatalf("failed to finish the request: %v", err)
	}
	res, err := poller.PollUntilDone(ctx, nil)
	if err != nil {
		log.Fatalf("failed to pull the result: %v", err)
	}
	// You could use response here. We use blank identifier for just demo purposes.
	_ = res
	// If the HTTP response code is 200 as defined in example definition, your response structure would look as follows. Please pay attention that all the values in the output are fake values for just demo purposes.
	// res = armoracledatabase.AutonomousDatabasesClientFailoverResponse{
	// 	AutonomousDatabase: &armoracledatabase.AutonomousDatabase{
	// 		ID: to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/rg000/providers/Oracle.Database/autonomousDatabases/databasedb1"),
	// 		Type: to.Ptr("Oracle.Database/autonomousDatabases"),
	// 		Location: to.Ptr("eastus"),
	// 		Tags: map[string]*string{
	// 			"tagK1": to.Ptr("tagV1"),
	// 		},
	// 		Properties: &armoracledatabase.AutonomousDatabaseProperties{
	// 			AutonomousDatabaseID: to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/rg000/providers/Oracle.Database/autonomousDatabases/databasedb1"),
	// 			AutonomousMaintenanceScheduleType: to.Ptr(armoracledatabase.AutonomousMaintenanceScheduleTypeRegular),
	// 			CharacterSet: to.Ptr("AL32UTF8"),
	// 			NcharacterSet: to.Ptr("AL16UTF16"),
	// 			ComputeCount: to.Ptr[float32](2),
	// 			ComputeModel: to.Ptr(armoracledatabase.ComputeModelECPU),
	// 			CPUCoreCount: to.Ptr[int32](1),
	// 			DataStorageSizeInGbs: to.Ptr[int32](1024),
	// 			DataStorageSizeInTbs: to.Ptr[int32](1),
	// 			DatabaseEdition: to.Ptr(armoracledatabase.DatabaseEditionTypeEnterpriseEdition),
	// 			DataBaseType: to.Ptr(armoracledatabase.DataBaseTypeRegular),
	// 			DbVersion: to.Ptr("18.4.0.0"),
	// 			DisplayName: to.Ptr("example_autonomous_databasedb1"),
	// 			IsAutoScalingEnabled: to.Ptr(false),
	// 			IsAutoScalingForStorageEnabled: to.Ptr(false),
	// 			IsLocalDataGuardEnabled: to.Ptr(true),
	// 			TimeLocalDataGuardEnabled: to.Ptr("2024-02-28T19:03:43.714Z"),
	// 			LocalDisasterRecoveryType: to.Ptr(armoracledatabase.DisasterRecoveryTypeAdg),
	// 			LocalAdgAutoFailoverMaxDataLossLimit: to.Ptr[int32](300),
	// 			Role: to.Ptr(armoracledatabase.RoleTypePrimary),
	// 			LocalStandbyDb: &armoracledatabase.AutonomousDatabaseStandbySummary{
	// 				LifecycleState: to.Ptr(armoracledatabase.AutonomousDatabaseLifecycleStateRoleChangeInProgress),
	// 			},
	// 			IsMtlsConnectionRequired: to.Ptr(true),
	// 			LicenseModel: to.Ptr(armoracledatabase.LicenseModelBringYourOwnLicense),
	// 			LifecycleState: to.Ptr(armoracledatabase.AutonomousDatabaseLifecycleStateUpdating),
	// 			SubnetID: to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/rg000/providers/Microsoft.Network/virtualNetworks/vnet1/subnets/subnet1"),
	// 			VnetID: to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/rg000/providers/Microsoft.Network/virtualNetworks/vnet1"),
	// 			ProvisioningState: to.Ptr(armoracledatabase.AzureResourceProvisioningStateProvisioning),
	// 			OciURL: to.Ptr("https://fake"),
	// 			TimeCreated: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2024-01-09T20:44:09.466Z"); return t}()),
	// 			Ocid: to.Ptr("ocid1..aaaaa"),
	// 			WhitelistedIPs: []*string{
	// 				to.Ptr("1.1.1.1"),
	// 				to.Ptr("1.1.1.0/24"),
	// 				to.Ptr("1.1.2.25"),
	// 			},
	// 		},
	// 	},
	// }
}

// Generated from example definition: 2025-09-01/AutonomousDatabases_GenerateWallet_MaximumSet_Gen.json
func ExampleAutonomousDatabasesClient_GenerateWallet_generateWalletActionOnAutonomousDatabaseGeneratedByMaximumSetRule() {
	cred, err := azidentity.NewDefaultAzureCredential(nil)
	if err != nil {
		log.Fatalf("failed to obtain a credential: %v", err)
	}
	ctx := context.Background()
	clientFactory, err := armoracledatabase.NewClientFactory("00000000-0000-0000-0000-000000000000", cred, nil)
	if err != nil {
		log.Fatalf("failed to create client: %v", err)
	}
	res, err := clientFactory.NewAutonomousDatabasesClient().GenerateWallet(ctx, "rgopenapi", "databasedb1", armoracledatabase.GenerateAutonomousDatabaseWalletDetails{
		GenerateType: to.Ptr(armoracledatabase.GenerateTypeSingle),
		IsRegional:   to.Ptr(true),
		Password:     to.Ptr("********"),
	}, nil)
	if err != nil {
		log.Fatalf("failed to finish the request: %v", err)
	}
	// You could use response here. We use blank identifier for just demo purposes.
	_ = res
	// If the HTTP response code is 200 as defined in example definition, your response structure would look as follows. Please pay attention that all the values in the output are fake values for just demo purposes.
	// res = armoracledatabase.AutonomousDatabasesClientGenerateWalletResponse{
	// 	AutonomousDatabaseWalletFile: &armoracledatabase.AutonomousDatabaseWalletFile{
	// 		WalletFiles: to.Ptr("testEncodedFiles"),
	// 	},
	// }
}

// Generated from example definition: 2025-09-01/autonomousDatabase_generateWallet.json
func ExampleAutonomousDatabasesClient_GenerateWallet_autonomousDatabasesGenerateWallet() {
	cred, err := azidentity.NewDefaultAzureCredential(nil)
	if err != nil {
		log.Fatalf("failed to obtain a credential: %v", err)
	}
	ctx := context.Background()
	clientFactory, err := armoracledatabase.NewClientFactory("00000000-0000-0000-0000-000000000000", cred, nil)
	if err != nil {
		log.Fatalf("failed to create client: %v", err)
	}
	res, err := clientFactory.NewAutonomousDatabasesClient().GenerateWallet(ctx, "rg000", "databasedb1", armoracledatabase.GenerateAutonomousDatabaseWalletDetails{
		GenerateType: to.Ptr(armoracledatabase.GenerateTypeSingle),
		IsRegional:   to.Ptr(false),
		Password:     to.Ptr("********"),
	}, nil)
	if err != nil {
		log.Fatalf("failed to finish the request: %v", err)
	}
	// You could use response here. We use blank identifier for just demo purposes.
	_ = res
	// If the HTTP response code is 200 as defined in example definition, your response structure would look as follows. Please pay attention that all the values in the output are fake values for just demo purposes.
	// res = armoracledatabase.AutonomousDatabasesClientGenerateWalletResponse{
	// 	AutonomousDatabaseWalletFile: &armoracledatabase.AutonomousDatabaseWalletFile{
	// 		WalletFiles: to.Ptr("testEncodedFiles"),
	// 	},
	// }
}

// Generated from example definition: 2025-09-01/AutonomousDatabases_Get_MaximumSet_Gen.json
func ExampleAutonomousDatabasesClient_Get_getAutonomousDatabaseGeneratedByMaximumSetRule() {
	cred, err := azidentity.NewDefaultAzureCredential(nil)
	if err != nil {
		log.Fatalf("failed to obtain a credential: %v", err)
	}
	ctx := context.Background()
	clientFactory, err := armoracledatabase.NewClientFactory("00000000-0000-0000-0000-000000000000", cred, nil)
	if err != nil {
		log.Fatalf("failed to create client: %v", err)
	}
	res, err := clientFactory.NewAutonomousDatabasesClient().Get(ctx, "rgopenapi", "database1", nil)
	if err != nil {
		log.Fatalf("failed to finish the request: %v", err)
	}
	// You could use response here. We use blank identifier for just demo purposes.
	_ = res
	// If the HTTP response code is 200 as defined in example definition, your response structure would look as follows. Please pay attention that all the values in the output are fake values for just demo purposes.
	// res = armoracledatabase.AutonomousDatabasesClientGetResponse{
	// 	AutonomousDatabase: &armoracledatabase.AutonomousDatabase{
	// 		Properties: &armoracledatabase.AutonomousDatabaseProperties{
	// 			DataBaseType: to.Ptr(armoracledatabase.DataBaseTypeRegular),
	// 			DisplayName: to.Ptr("example_autonomous_databasedb1"),
	// 			ComputeModel: to.Ptr(armoracledatabase.ComputeModelECPU),
	// 			ComputeCount: to.Ptr[float32](2),
	// 			DataStorageSizeInTbs: to.Ptr[int32](1),
	// 			DbVersion: to.Ptr("18.4.0.0"),
	// 			CharacterSet: to.Ptr("AL32UTF8"),
	// 			NcharacterSet: to.Ptr("AL16UTF16"),
	// 			SubnetID: to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/rg000/providers/Microsoft.Network/virtualNetworks/vnet1/subnets/subnet1"),
	// 			VnetID: to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/rg000/providers/Microsoft.Network/virtualNetworks/vnet1"),
	// 			AutonomousMaintenanceScheduleType: to.Ptr(armoracledatabase.AutonomousMaintenanceScheduleTypeRegular),
	// 			CPUCoreCount: to.Ptr[int32](1),
	// 			CustomerContacts: []*armoracledatabase.CustomerContact{
	// 				{
	// 					Email: to.Ptr("dummayemail@microsoft.com"),
	// 				},
	// 			},
	// 			DataStorageSizeInGbs: to.Ptr[int32](1024),
	// 			DbWorkload: to.Ptr(armoracledatabase.WorkloadTypeOLTP),
	// 			IsAutoScalingEnabled: to.Ptr(true),
	// 			IsAutoScalingForStorageEnabled: to.Ptr(true),
	// 			PeerDbIDs: []*string{
	// 				to.Ptr("gpubz"),
	// 			},
	// 			IsLocalDataGuardEnabled: to.Ptr(true),
	// 			IsRemoteDataGuardEnabled: to.Ptr(true),
	// 			LocalDisasterRecoveryType: to.Ptr(armoracledatabase.DisasterRecoveryTypeAdg),
	// 			TimeDisasterRecoveryRoleChanged: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2025-08-01T04:32:58.722Z"); return t}()),
	// 			RemoteDisasterRecoveryConfiguration: &armoracledatabase.DisasterRecoveryConfigurationDetails{
	// 				DisasterRecoveryType: to.Ptr(armoracledatabase.DisasterRecoveryTypeAdg),
	// 				TimeSnapshotStandbyEnabledTill: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2025-08-01T04:32:58.715Z"); return t}()),
	// 				IsSnapshotStandby: to.Ptr(true),
	// 				IsReplicateAutomaticBackups: to.Ptr(true),
	// 			},
	// 			LocalStandbyDb: &armoracledatabase.AutonomousDatabaseStandbySummary{
	// 				LagTimeInSeconds: to.Ptr[int32](13),
	// 				LifecycleState: to.Ptr(armoracledatabase.AutonomousDatabaseLifecycleStateProvisioning),
	// 				LifecycleDetails: to.Ptr("zoiyaaibuuhm"),
	// 				TimeDataGuardRoleChanged: to.Ptr("inggk"),
	// 				TimeDisasterRecoveryRoleChanged: to.Ptr("q"),
	// 			},
	// 			FailedDataRecoveryInSeconds: to.Ptr[int32](27),
	// 			IsMtlsConnectionRequired: to.Ptr(true),
	// 			LicenseModel: to.Ptr(armoracledatabase.LicenseModelBringYourOwnLicense),
	// 			LifecycleDetails: to.Ptr("success"),
	// 			ProvisioningState: to.Ptr(armoracledatabase.AzureResourceProvisioningStateSucceeded),
	// 			LifecycleState: to.Ptr(armoracledatabase.AutonomousDatabaseLifecycleState("Succeeded")),
	// 			ScheduledOperationsList: []*armoracledatabase.ScheduledOperationsType{
	// 				{
	// 					DayOfWeek: &armoracledatabase.DayOfWeek{
	// 						Name: to.Ptr(armoracledatabase.DayOfWeekNameMonday),
	// 					},
	// 					ScheduledStartTime: to.Ptr("lwwvkazgmfremfwhckfb"),
	// 					ScheduledStopTime: to.Ptr("hjwagzxijpiaogulmnmbuqakpqxhkjvaypjqnvbvtjddc"),
	// 				},
	// 			},
	// 			PrivateEndpointIP: to.Ptr("rdlbhw"),
	// 			PrivateEndpointLabel: to.Ptr("worwqllbglhyakksevparfuaivc"),
	// 			OciURL: to.Ptr("https://fake"),
	// 			TimeCreated: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2024-01-09T20:44:09.466Z"); return t}()),
	// 			TimeMaintenanceBegin: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2025-08-01T04:32:58.722Z"); return t}()),
	// 			TimeMaintenanceEnd: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2025-08-01T04:32:58.722Z"); return t}()),
	// 			ActualUsedDataStorageSizeInTbs: to.Ptr[float64](8),
	// 			AllocatedStorageSizeInTbs: to.Ptr[float64](20),
	// 			ApexDetails: &armoracledatabase.ApexDetailsType{
	// 				ApexVersion: to.Ptr("scvpjwygbzqzevlztyfvqiaom"),
	// 				OrdsVersion: to.Ptr("djlwvhpipimxaguklshpppjrzasbk"),
	// 			},
	// 			AvailableUpgradeVersions: []*string{
	// 				to.Ptr("dgvzwolnmulrlwzzazgqm"),
	// 			},
	// 			ConnectionStrings: &armoracledatabase.ConnectionStringType{
	// 				AllConnectionStrings: &armoracledatabase.AllConnectionStringType{
	// 					High: to.Ptr("exdinleextbcjinutlkvnqyxhvandtihncykjzrhfdhfrxdarny"),
	// 					Low: to.Ptr("vurudxqtummqqbnidwthmsqgujufjxwfnejdpuxkgyoxlgqhcgsfjcpzaqeioslpehjfashipdsjhkrpdobstvgxsqrgvcrpbiiabhvymdsylqsjedrimqhtttmszlaqyukopuufbtkbtwgdydrvnvkcdqmphwzpcjxlgefzrdajyczzjdpuzvhqvupbvrpvqhzoaalg"),
	// 					Medium: to.Ptr("ishtubsuzgwtkfdqfgyxjlhehiokdvjfhwqhvmgtuksboshulroytcnubtrxxjbgoutftpzeavbldsoqjwmamgfwevhppyyeckythirzvaqujrjaiqnpyvycakhwgtuftmuxavdgdvbqxgsdqwbnqzmrzymwiydhxekenbweaghgvyveuysxqmovwodzwwfrxhtlcegekjk"),
	// 				},
	// 				Dedicated: to.Ptr("okoggzbidoaknwikuqpvepxvvcseukouprpfrldmakztkleeizbjf"),
	// 				High: to.Ptr("pggylyrivfn"),
	// 				Low: to.Ptr("zrjsbtdbfluaipbzgcvvhyuvqoczjneihaiftkfmuvvyoldslgvvpwthieyrcoxvh"),
	// 				Medium: to.Ptr("ebjnwenxvyeinsabrppychqbcawfxgplfacbsizltwfhpdafbkawopppqsxemlnmrbiqlstjupgdmpfcyyxgofmitbdiarrpprhntntqqjklseigycfcpmmlqiznxzliserjppmgfjatnmtbdxqtlbmrmpfbpoxmyffkkoptpayigeeefmqczroouqjxchswffywpsmyqohbyaclhsrwgqyuuyynvxyyzkche"),
	// 				Profiles: []*armoracledatabase.ProfileType{
	// 					{
	// 						ConsumerGroup: to.Ptr(armoracledatabase.ConsumerGroupHigh),
	// 						DisplayName: to.Ptr("mqqdgidxuovxhcwrkanybxzplautekarsxbcbzlkikpmmvjrdrrkncbamdtcuksplamigrdkydjbzeurbmjgehgppovxqhuzasduwptrlyaurzszzqpztckhpdniepaglzeublbwffxebfespqyfpljlutregvlzzjo"),
	// 						HostFormat: to.Ptr(armoracledatabase.HostFormatTypeFqdn),
	// 						IsRegional: to.Ptr(true),
	// 						Protocol: to.Ptr(armoracledatabase.ProtocolTypeTCP),
	// 						SessionMode: to.Ptr(armoracledatabase.SessionModeTypeDirect),
	// 						SyntaxFormat: to.Ptr(armoracledatabase.SyntaxFormatTypeLong),
	// 						TLSAuthentication: to.Ptr(armoracledatabase.TLSAuthenticationTypeServer),
	// 						Value: to.Ptr("bdrnwqpzbbzdipqqhnroxiuewqg"),
	// 					},
	// 				},
	// 			},
	// 			ConnectionUrls: &armoracledatabase.ConnectionURLType{
	// 				ApexURL: to.Ptr("epnebmudvzijxrfgabsdjewqfotqjmnxvokfhlyklhvtrjpprnqujthmceuhpfuumcbfxktppfguqduzkukxqkofoyyycljjtruyjtoiesxlrwwzonozaxetzrkpmzwasyvryvkryawxxf"),
	// 				DatabaseTransformsURL: to.Ptr("hujiemysucgdgtasazsdtwnxmtjppugunrqnzfzneatukuyzvkfseusjaxrourznsrwxjbvzfansdcyfxnvcyghl"),
	// 				GraphStudioURL: to.Ptr("bucnwmwixwemqqtoozfclfzqenskkyssvcatwbptsezpzdwgnaexgxutsvaibnkawyohqklnktzlhdbhbstm"),
	// 				MachineLearningNotebookURL: to.Ptr("vfhnqsrabxcrjnpqaqkgnpwhxffsqkrgcijdkkvnaoangzkcbgwklufujhmlgydxueybugxzgokxbbappdslttpdthhbmxrgcicqzyjyahjeiqopuglgbjfbhufuvsogquelagbjtyotwhmecwupooitcaftldxjycgfnlilrnicqjxnsucieftadjbvptzltmgqkxhttfkkbutaxvtfzbvbbxbmpxeeyfethpofnmbbqbtlqvnfgelvtjizckgixpptkilcvrntknusvppgnobokjpepynndswcqsnewhfnlxgmownfwfnokhbqulzyuessvxxtcdcnmumbbpjchmjbvjecbbinjolmuoaixzunawlxnoqbpzkczdsubpqpdltnfydwevearrdirzaszsudcxaspozeop"),
	// 				MongoDbURL: to.Ptr("dzmsqtcgsrdgwjlnrfmzcqcrkdqwmjrccxsszwdgpcygywnuurklwthgonxcnwaqcgzoexnaanwzsqwemcijuzxqbrkpvydizjraicgnspizwwnwureyey"),
	// 				OrdsURL: to.Ptr("lmqdgziantbczaneiqxopnaexcroelkbcgggjipzqfhoduwqodoyeghzjyuyhesewopbujxnoiziidhslxdawrfayjvxzjwfobtjrepldlmwhauiurzhbpyxsbueugddmdfindxsdjddqamwbptozzmobugnpezxyxdopripljdwnogjgrjwjfbugdkqrjwzjvavsdmgvspnzcgcjzxauqxqljmfgrtyohfppbmprmexiirvlmymxzyciaraihbwihvahyaciv"),
	// 				SQLDevWebURL: to.Ptr("pktklsvlakmblcakipxy"),
	// 			},
	// 			DataSafeStatus: to.Ptr(armoracledatabase.DataSafeStatusTypeRegistering),
	// 			DatabaseEdition: to.Ptr(armoracledatabase.DatabaseEditionTypeEnterpriseEdition),
	// 			AutonomousDatabaseID: to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/rg000/providers/Oracle.Database/autonomousDatabases/databasedb1"),
	// 			InMemoryAreaInGbs: to.Ptr[int32](29),
	// 			NextLongTermBackupTimeStamp: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2025-08-01T04:32:58.722Z"); return t}()),
	// 			LongTermBackupSchedule: &armoracledatabase.LongTermBackUpScheduleDetails{
	// 				RepeatCadence: to.Ptr(armoracledatabase.RepeatCadenceTypeOneTime),
	// 				TimeOfBackup: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2025-08-01T04:32:58.715Z"); return t}()),
	// 				RetentionPeriodInDays: to.Ptr[int32](188),
	// 				IsDisabled: to.Ptr(true),
	// 			},
	// 			IsPreview: to.Ptr(true),
	// 			LocalAdgAutoFailoverMaxDataLossLimit: to.Ptr[int32](1759),
	// 			MemoryPerOracleComputeUnitInGbs: to.Ptr[int32](17),
	// 			OpenMode: to.Ptr(armoracledatabase.OpenModeTypeReadOnly),
	// 			OperationsInsightsStatus: to.Ptr(armoracledatabase.OperationsInsightsStatusTypeEnabling),
	// 			PermissionLevel: to.Ptr(armoracledatabase.PermissionLevelTypeRestricted),
	// 			PrivateEndpoint: to.Ptr("zsknxwclpifygotuivnzkyy"),
	// 			ProvisionableCpus: []*int32{
	// 				to.Ptr[int32](11),
	// 			},
	// 			Role: to.Ptr(armoracledatabase.RoleTypePrimary),
	// 			ServiceConsoleURL: to.Ptr("vyqingzejychumpyufkkiskxhxtfdqhnkugercwlzgakttvdgkrxckvqkxdxlrqpgqosgobgjzyfdewpvhqthefbhtbkxeocreutrfbwmxnfircxsyevouxqyprlxqnmwvepamsylfibuppyslcxobxyynunowjqzupsmkeuuvkctrywubqafaorernjupfslwdlemro"),
	// 			SQLWebDeveloperURL: to.Ptr("ljdauohhvgrrnnzuuauxcuehjmugbhyqszoqcrwiwqnbuozzccqpizilcijojlnyhljxcorelkqldumfnzuljhpwqcaymbdyhvokpbqqkwrarqfrobbzsfbacdtqprrwnuqwrphqlqzilyoyehjfclemrfgylxgawydpflybcbdptzvlukuqhvtgrtaahpgkwymrfellwpbaklxllpbhtkyvlkqnumnsicpaknacvnlqqiyvwwxusjrzqthptckfuyjpferpwszwargimrpqjbigszibkukbdqzctyvktqzrgmhooimbuiblruulhrumetcllofxpqtjlongqtxtnpgfxojlnkkzwiqxrksqeepzqcqudimxtsthqljievdfhbzraluasdwaenmnipdgsnkxeqrlpygcggsfgsjqdxaxqagvoamckaosdzzltrjqlxyxbiaifrtjcnboziaweiyqenlafpchpjxxolvmsseubbaedachwgzectncatkeihzvdncmmhhwgravfcezhcjbhlvopzbnmtaytzadgdszsxpvygjewkyksmdyzepmdjqbkrakuaolveenpngakvazigbxoihfepvebfzpdfdmqrpyqgsdaraifdtnyopibqjavwhffvpowizaskrjosdpivqsgalwypptcwrfscpaqarlnjjzedjhutykdlgxnmmdmrbovscpvbwoeimqsfmiiyxewjldifllcqbmcpoixhufxbptbjkzsvmxurdzjksqirvvhejsjahvtohzsnxkxnmdgkgprwygcnpkxpgrnurnujwdtgkquzkcaanpaamhbbloywlzftxdrxzuhxdxudixgzuyckwkudtzcwdcnxqwdsojyefojusbfjftrmshziassecmgluwvcmwkcpurxajmwvbfgalhhnbebovzulefrdmhepjzqicqnilorzrtbqhemnxgkifxjjeksokqnezkekqiotwthuocqehxfwazqqonwpisrmapjjbwrrrorzepqcgjhfurxbmsfhvnnlzymavjdmfwhehhvqjdrccgabtbqkceqervrztnmfhjgjcvdeccksykspvtvgldhwuwtgobygzhdomdzthrbbhoqnbxfaamrcznmqegfbswuhypgsivoylcvtcyccvsbsxzgxqeqdslytyezyzwtokvivbvwrohcaselsenmzfevvrjkpeyymjiaegybeumjiggaszdwcwqzispeobhysxameswplkdcwhgdmjplexxkbxdmardfisbaplwtsqpmtachrrtsakzhpzwtwutnmcsuehstovmdxntvpzrzwmkms"),
	// 			SupportedRegionsToCloneTo: []*string{
	// 				to.Ptr("germancywestcentral"),
	// 			},
	// 			TimeDataGuardRoleChanged: to.Ptr("exsyrzikvlzvulmkpjxxetftlanim"),
	// 			TimeDeletionOfFreeAutonomousDatabase: to.Ptr("jtigszni"),
	// 			TimeLocalDataGuardEnabled: to.Ptr("rxmqyrqrdpfvleeer"),
	// 			TimeOfLastFailover: to.Ptr("vpcasufezytnkepvpibgqckn"),
	// 			TimeOfLastRefresh: to.Ptr("tqnkkzisphpiqapurwmpdlb"),
	// 			TimeOfLastRefreshPoint: to.Ptr("jfzhrbodayonnuwacgvwhovjgno"),
	// 			TimeOfLastSwitchover: to.Ptr("uvpwuwthnnbzmdmteqzboaah"),
	// 			TimeReclamationOfFreeAutonomousDatabase: to.Ptr("kekqxlbxjsehiretiq"),
	// 			UsedDataStorageSizeInGbs: to.Ptr[int32](13),
	// 			UsedDataStorageSizeInTbs: to.Ptr[int32](16),
	// 			Ocid: to.Ptr("ocid1..aaaaa"),
	// 			BackupRetentionPeriodInDays: to.Ptr[int32](1),
	// 			WhitelistedIPs: []*string{
	// 				to.Ptr("1.1.1.1"),
	// 				to.Ptr("1.1.1.0/24"),
	// 				to.Ptr("1.1.2.25"),
	// 			},
	// 		},
	// 		Location: to.Ptr("eastus"),
	// 		Tags: map[string]*string{
	// 		},
	// 		ID: to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/rg000/providers/Oracle.Database/autonomousDatabases/databasedb1"),
	// 		Name: to.Ptr("database1"),
	// 		Type: to.Ptr("Oracle.Database/autonomousDatabases"),
	// 		SystemData: &armoracledatabase.SystemData{
	// 			CreatedBy: to.Ptr("sqehacivpuim"),
	// 			CreatedByType: to.Ptr(armoracledatabase.CreatedByTypeUser),
	// 			CreatedAt: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2025-08-01T04:32:58.716Z"); return t}()),
	// 			LastModifiedBy: to.Ptr("axrqfdkqylvjv"),
	// 			LastModifiedByType: to.Ptr(armoracledatabase.CreatedByTypeUser),
	// 			LastModifiedAt: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2025-08-01T04:32:58.716Z"); return t}()),
	// 		},
	// 	},
	// }
}

// Generated from example definition: 2025-09-01/autonomousDatabase_get.json
func ExampleAutonomousDatabasesClient_Get_autonomousDatabasesGet() {
	cred, err := azidentity.NewDefaultAzureCredential(nil)
	if err != nil {
		log.Fatalf("failed to obtain a credential: %v", err)
	}
	ctx := context.Background()
	clientFactory, err := armoracledatabase.NewClientFactory("00000000-0000-0000-0000-000000000000", cred, nil)
	if err != nil {
		log.Fatalf("failed to create client: %v", err)
	}
	res, err := clientFactory.NewAutonomousDatabasesClient().Get(ctx, "rg000", "databasedb1", nil)
	if err != nil {
		log.Fatalf("failed to finish the request: %v", err)
	}
	// You could use response here. We use blank identifier for just demo purposes.
	_ = res
	// If the HTTP response code is 200 as defined in example definition, your response structure would look as follows. Please pay attention that all the values in the output are fake values for just demo purposes.
	// res = armoracledatabase.AutonomousDatabasesClientGetResponse{
	// 	AutonomousDatabase: &armoracledatabase.AutonomousDatabase{
	// 		ID: to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/rg000/providers/Oracle.Database/autonomousDatabases/databasedb1"),
	// 		Type: to.Ptr("Oracle.Database/autonomousDatabases"),
	// 		Location: to.Ptr("eastus"),
	// 		Tags: map[string]*string{
	// 			"tagK1": to.Ptr("tagV1"),
	// 		},
	// 		Properties: &armoracledatabase.AutonomousDatabaseProperties{
	// 			AutonomousDatabaseID: to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/rg000/providers/Oracle.Database/autonomousDatabases/databasedb1"),
	// 			AutonomousMaintenanceScheduleType: to.Ptr(armoracledatabase.AutonomousMaintenanceScheduleTypeRegular),
	// 			CharacterSet: to.Ptr("AL32UTF8"),
	// 			NcharacterSet: to.Ptr("AL16UTF16"),
	// 			ComputeCount: to.Ptr[float32](2),
	// 			ComputeModel: to.Ptr(armoracledatabase.ComputeModelECPU),
	// 			CPUCoreCount: to.Ptr[int32](1),
	// 			DataStorageSizeInGbs: to.Ptr[int32](1024),
	// 			DataStorageSizeInTbs: to.Ptr[int32](1),
	// 			DatabaseEdition: to.Ptr(armoracledatabase.DatabaseEditionTypeEnterpriseEdition),
	// 			DataBaseType: to.Ptr(armoracledatabase.DataBaseTypeRegular),
	// 			DbVersion: to.Ptr("18.4.0.0"),
	// 			DisplayName: to.Ptr("example_autonomous_databasedb1"),
	// 			IsAutoScalingEnabled: to.Ptr(false),
	// 			IsAutoScalingForStorageEnabled: to.Ptr(false),
	// 			IsLocalDataGuardEnabled: to.Ptr(false),
	// 			IsMtlsConnectionRequired: to.Ptr(true),
	// 			LicenseModel: to.Ptr(armoracledatabase.LicenseModelBringYourOwnLicense),
	// 			LifecycleState: to.Ptr(armoracledatabase.AutonomousDatabaseLifecycleState("Succeeded")),
	// 			LifecycleDetails: to.Ptr("success"),
	// 			SubnetID: to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/rg000/providers/Microsoft.Network/virtualNetworks/vnet1/subnets/subnet1"),
	// 			VnetID: to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/rg000/providers/Microsoft.Network/virtualNetworks/vnet1"),
	// 			ProvisioningState: to.Ptr(armoracledatabase.AzureResourceProvisioningStateSucceeded),
	// 			OciURL: to.Ptr("https://fake"),
	// 			TimeCreated: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2024-01-09T20:44:09.466Z"); return t}()),
	// 			Ocid: to.Ptr("ocid1..aaaaa"),
	// 			WhitelistedIPs: []*string{
	// 				to.Ptr("1.1.1.1"),
	// 				to.Ptr("1.1.1.0/24"),
	// 				to.Ptr("1.1.2.25"),
	// 			},
	// 		},
	// 	},
	// }
}

// Generated from example definition: 2025-09-01/AutonomousDatabases_ListByResourceGroup_MaximumSet_Gen.json
func ExampleAutonomousDatabasesClient_NewListByResourceGroupPager_listAutonomousDatabaseByResourceGroupGeneratedByMaximumSetRule() {
	cred, err := azidentity.NewDefaultAzureCredential(nil)
	if err != nil {
		log.Fatalf("failed to obtain a credential: %v", err)
	}
	ctx := context.Background()
	clientFactory, err := armoracledatabase.NewClientFactory("00000000-0000-0000-0000-000000000000", cred, nil)
	if err != nil {
		log.Fatalf("failed to create client: %v", err)
	}
	pager := clientFactory.NewAutonomousDatabasesClient().NewListByResourceGroupPager("rgopenapi", nil)
	for pager.More() {
		page, err := pager.NextPage(ctx)
		if err != nil {
			log.Fatalf("failed to advance page: %v", err)
		}
		for _, v := range page.Value {
			// You could use page here. We use blank identifier for just demo purposes.
			_ = v
		}
		// If the HTTP response code is 200 as defined in example definition, your page structure would look as follows. Please pay attention that all the values in the output are fake values for just demo purposes.
		// page = armoracledatabase.AutonomousDatabasesClientListByResourceGroupResponse{
		// 	AutonomousDatabaseListResult: armoracledatabase.AutonomousDatabaseListResult{
		// 		Value: []*armoracledatabase.AutonomousDatabase{
		// 			{
		// 				ID: to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/rg000/providers/Oracle.Database/autonomousDatabases/databasedb1"),
		// 				Type: to.Ptr("Oracle.Database/autonomousDatabases"),
		// 				Location: to.Ptr("eastus"),
		// 				Tags: map[string]*string{
		// 				},
		// 				Properties: &armoracledatabase.AutonomousDatabaseProperties{
		// 					AutonomousDatabaseID: to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/rg000/providers/Oracle.Database/autonomousDatabases/databasedb1"),
		// 					ActualUsedDataStorageSizeInTbs: to.Ptr[float64](3),
		// 					AutonomousMaintenanceScheduleType: to.Ptr(armoracledatabase.AutonomousMaintenanceScheduleTypeRegular),
		// 					CharacterSet: to.Ptr("AL32UTF8"),
		// 					NcharacterSet: to.Ptr("AL16UTF16"),
		// 					ComputeCount: to.Ptr[float32](2),
		// 					ComputeModel: to.Ptr(armoracledatabase.ComputeModelECPU),
		// 					CPUCoreCount: to.Ptr[int32](1),
		// 					CustomerContacts: []*armoracledatabase.CustomerContact{
		// 						{
		// 							Email: to.Ptr("agyiqecugrloatgwpvmilmvutcnyjpxzhbilhhqfvqqblfgursqelzjjnwnmpfstitmcgkovzxnstiqqwjnhwwaufbnkebpqxlqwmfnmtlkgkoxcnjwcnfqbdtokhjalagxphkuiwxtxrzuipokiuczmuwoqoebkjvhytlhtxzshwsdoywluoggznuyuozqibiwdgwqbgnyogysdjpvlowmvuvq"),
		// 						},
		// 					},
		// 					DataStorageSizeInGbs: to.Ptr[int32](1024),
		// 					DataStorageSizeInTbs: to.Ptr[int32](1),
		// 					DatabaseEdition: to.Ptr(armoracledatabase.DatabaseEditionTypeEnterpriseEdition),
		// 					DataBaseType: to.Ptr(armoracledatabase.DataBaseTypeRegular),
		// 					DbVersion: to.Ptr("18.4.0.0"),
		// 					DisplayName: to.Ptr("example_autonomous_databasedb1"),
		// 					IsAutoScalingEnabled: to.Ptr(true),
		// 					IsAutoScalingForStorageEnabled: to.Ptr(true),
		// 					IsLocalDataGuardEnabled: to.Ptr(true),
		// 					IsMtlsConnectionRequired: to.Ptr(true),
		// 					LicenseModel: to.Ptr(armoracledatabase.LicenseModelBringYourOwnLicense),
		// 					LifecycleState: to.Ptr(armoracledatabase.AutonomousDatabaseLifecycleState("Succeeded")),
		// 					LifecycleDetails: to.Ptr("success"),
		// 					PrivateEndpointIP: to.Ptr("nnoxtfettnhwhhjdtylhkhwj"),
		// 					PrivateEndpointLabel: to.Ptr("j"),
		// 					SubnetID: to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/rg000/providers/Microsoft.Network/virtualNetworks/vnet1/subnets/subnet1"),
		// 					VnetID: to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/rg000/providers/Microsoft.Network/virtualNetworks/vnet1"),
		// 					ProvisioningState: to.Ptr(armoracledatabase.AzureResourceProvisioningStateSucceeded),
		// 					OciURL: to.Ptr("https://fake"),
		// 					TimeCreated: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2024-01-09T20:44:09.466Z"); return t}()),
		// 					TimeMaintenanceBegin: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2025-08-01T04:32:58.715Z"); return t}()),
		// 					TimeMaintenanceEnd: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2025-08-01T04:32:58.715Z"); return t}()),
		// 					UsedDataStorageSizeInGbs: to.Ptr[int32](12),
		// 					UsedDataStorageSizeInTbs: to.Ptr[int32](15),
		// 					Ocid: to.Ptr("ocid1..aaaaa"),
		// 					WhitelistedIPs: []*string{
		// 						to.Ptr("1.1.1.1"),
		// 						to.Ptr("1.1.1.0/24"),
		// 						to.Ptr("1.1.2.25"),
		// 					},
		// 					DbWorkload: to.Ptr(armoracledatabase.WorkloadTypeOLTP),
		// 					PeerDbIDs: []*string{
		// 						to.Ptr("jflsgwiukjeriuohebig"),
		// 					},
		// 					IsRemoteDataGuardEnabled: to.Ptr(true),
		// 					LocalDisasterRecoveryType: to.Ptr(armoracledatabase.DisasterRecoveryTypeAdg),
		// 					TimeDisasterRecoveryRoleChanged: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2025-08-01T04:32:58.712Z"); return t}()),
		// 					RemoteDisasterRecoveryConfiguration: &armoracledatabase.DisasterRecoveryConfigurationDetails{
		// 						DisasterRecoveryType: to.Ptr(armoracledatabase.DisasterRecoveryTypeAdg),
		// 						TimeSnapshotStandbyEnabledTill: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2025-08-01T04:32:58.715Z"); return t}()),
		// 						IsSnapshotStandby: to.Ptr(true),
		// 						IsReplicateAutomaticBackups: to.Ptr(true),
		// 					},
		// 					LocalStandbyDb: &armoracledatabase.AutonomousDatabaseStandbySummary{
		// 						LagTimeInSeconds: to.Ptr[int32](13),
		// 						LifecycleState: to.Ptr(armoracledatabase.AutonomousDatabaseLifecycleStateProvisioning),
		// 						LifecycleDetails: to.Ptr("zoiyaaibuuhm"),
		// 						TimeDataGuardRoleChanged: to.Ptr("inggk"),
		// 						TimeDisasterRecoveryRoleChanged: to.Ptr("q"),
		// 					},
		// 					FailedDataRecoveryInSeconds: to.Ptr[int32](11),
		// 					ScheduledOperationsList: []*armoracledatabase.ScheduledOperationsType{
		// 						{
		// 							DayOfWeek: &armoracledatabase.DayOfWeek{
		// 								Name: to.Ptr(armoracledatabase.DayOfWeekNameMonday),
		// 							},
		// 							ScheduledStartTime: to.Ptr("lwwvkazgmfremfwhckfb"),
		// 							ScheduledStopTime: to.Ptr("hjwagzxijpiaogulmnmbuqakpqxhkjvaypjqnvbvtjddc"),
		// 						},
		// 					},
		// 					AllocatedStorageSizeInTbs: to.Ptr[float64](1),
		// 					ApexDetails: &armoracledatabase.ApexDetailsType{
		// 						ApexVersion: to.Ptr("scvpjwygbzqzevlztyfvqiaom"),
		// 						OrdsVersion: to.Ptr("djlwvhpipimxaguklshpppjrzasbk"),
		// 					},
		// 					AvailableUpgradeVersions: []*string{
		// 						to.Ptr("yegwifyowsnpndi"),
		// 					},
		// 					ConnectionStrings: &armoracledatabase.ConnectionStringType{
		// 						AllConnectionStrings: &armoracledatabase.AllConnectionStringType{
		// 							High: to.Ptr("exdinleextbcjinutlkvnqyxhvandtihncykjzrhfdhfrxdarny"),
		// 							Low: to.Ptr("vurudxqtummqqbnidwthmsqgujufjxwfnejdpuxkgyoxlgqhcgsfjcpzaqeioslpehjfashipdsjhkrpdobstvgxsqrgvcrpbiiabhvymdsylqsjedrimqhtttmszlaqyukopuufbtkbtwgdydrvnvkcdqmphwzpcjxlgefzrdajyczzjdpuzvhqvupbvrpvqhzoaalg"),
		// 							Medium: to.Ptr("ishtubsuzgwtkfdqfgyxjlhehiokdvjfhwqhvmgtuksboshulroytcnubtrxxjbgoutftpzeavbldsoqjwmamgfwevhppyyeckythirzvaqujrjaiqnpyvycakhwgtuftmuxavdgdvbqxgsdqwbnqzmrzymwiydhxekenbweaghgvyveuysxqmovwodzwwfrxhtlcegekjk"),
		// 						},
		// 						Dedicated: to.Ptr("okoggzbidoaknwikuqpvepxvvcseukouprpfrldmakztkleeizbjf"),
		// 						High: to.Ptr("pggylyrivfn"),
		// 						Low: to.Ptr("zrjsbtdbfluaipbzgcvvhyuvqoczjneihaiftkfmuvvyoldslgvvpwthieyrcoxvh"),
		// 						Medium: to.Ptr("ebjnwenxvyeinsabrppychqbcawfxgplfacbsizltwfhpdafbkawopppqsxemlnmrbiqlstjupgdmpfcyyxgofmitbdiarrpprhntntqqjklseigycfcpmmlqiznxzliserjppmgfjatnmtbdxqtlbmrmpfbpoxmyffkkoptpayigeeefmqczroouqjxchswffywpsmyqohbyaclhsrwgqyuuyynvxyyzkche"),
		// 						Profiles: []*armoracledatabase.ProfileType{
		// 							{
		// 								ConsumerGroup: to.Ptr(armoracledatabase.ConsumerGroupHigh),
		// 								DisplayName: to.Ptr("mqqdgidxuovxhcwrkanybxzplautekarsxbcbzlkikpmmvjrdrrkncbamdtcuksplamigrdkydjbzeurbmjgehgppovxqhuzasduwptrlyaurzszzqpztckhpdniepaglzeublbwffxebfespqyfpljlutregvlzzjo"),
		// 								HostFormat: to.Ptr(armoracledatabase.HostFormatTypeFqdn),
		// 								IsRegional: to.Ptr(true),
		// 								Protocol: to.Ptr(armoracledatabase.ProtocolTypeTCP),
		// 								SessionMode: to.Ptr(armoracledatabase.SessionModeTypeDirect),
		// 								SyntaxFormat: to.Ptr(armoracledatabase.SyntaxFormatTypeLong),
		// 								TLSAuthentication: to.Ptr(armoracledatabase.TLSAuthenticationTypeServer),
		// 								Value: to.Ptr("bdrnwqpzbbzdipqqhnroxiuewqg"),
		// 							},
		// 						},
		// 					},
		// 					ConnectionUrls: &armoracledatabase.ConnectionURLType{
		// 						ApexURL: to.Ptr("epnebmudvzijxrfgabsdjewqfotqjmnxvokfhlyklhvtrjpprnqujthmceuhpfuumcbfxktppfguqduzkukxqkofoyyycljjtruyjtoiesxlrwwzonozaxetzrkpmzwasyvryvkryawxxf"),
		// 						DatabaseTransformsURL: to.Ptr("hujiemysucgdgtasazsdtwnxmtjppugunrqnzfzneatukuyzvkfseusjaxrourznsrwxjbvzfansdcyfxnvcyghl"),
		// 						GraphStudioURL: to.Ptr("bucnwmwixwemqqtoozfclfzqenskkyssvcatwbptsezpzdwgnaexgxutsvaibnkawyohqklnktzlhdbhbstm"),
		// 						MachineLearningNotebookURL: to.Ptr("vfhnqsrabxcrjnpqaqkgnpwhxffsqkrgcijdkkvnaoangzkcbgwklufujhmlgydxueybugxzgokxbbappdslttpdthhbmxrgcicqzyjyahjeiqopuglgbjfbhufuvsogquelagbjtyotwhmecwupooitcaftldxjycgfnlilrnicqjxnsucieftadjbvptzltmgqkxhttfkkbutaxvtfzbvbbxbmpxeeyfethpofnmbbqbtlqvnfgelvtjizckgixpptkilcvrntknusvppgnobokjpepynndswcqsnewhfnlxgmownfwfnokhbqulzyuessvxxtcdcnmumbbpjchmjbvjecbbinjolmuoaixzunawlxnoqbpzkczdsubpqpdltnfydwevearrdirzaszsudcxaspozeop"),
		// 						MongoDbURL: to.Ptr("dzmsqtcgsrdgwjlnrfmzcqcrkdqwmjrccxsszwdgpcygywnuurklwthgonxcnwaqcgzoexnaanwzsqwemcijuzxqbrkpvydizjraicgnspizwwnwureyey"),
		// 						OrdsURL: to.Ptr("lmqdgziantbczaneiqxopnaexcroelkbcgggjipzqfhoduwqodoyeghzjyuyhesewopbujxnoiziidhslxdawrfayjvxzjwfobtjrepldlmwhauiurzhbpyxsbueugddmdfindxsdjddqamwbptozzmobugnpezxyxdopripljdwnogjgrjwjfbugdkqrjwzjvavsdmgvspnzcgcjzxauqxqljmfgrtyohfppbmprmexiirvlmymxzyciaraihbwihvahyaciv"),
		// 						SQLDevWebURL: to.Ptr("pktklsvlakmblcakipxy"),
		// 					},
		// 					DataSafeStatus: to.Ptr(armoracledatabase.DataSafeStatusTypeRegistering),
		// 					InMemoryAreaInGbs: to.Ptr[int32](23),
		// 					NextLongTermBackupTimeStamp: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2025-08-01T04:32:58.715Z"); return t}()),
		// 					LongTermBackupSchedule: &armoracledatabase.LongTermBackUpScheduleDetails{
		// 						RepeatCadence: to.Ptr(armoracledatabase.RepeatCadenceTypeOneTime),
		// 						TimeOfBackup: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2025-08-01T04:32:58.715Z"); return t}()),
		// 						RetentionPeriodInDays: to.Ptr[int32](188),
		// 						IsDisabled: to.Ptr(true),
		// 					},
		// 					IsPreview: to.Ptr(true),
		// 					LocalAdgAutoFailoverMaxDataLossLimit: to.Ptr[int32](2449),
		// 					MemoryPerOracleComputeUnitInGbs: to.Ptr[int32](11),
		// 					OpenMode: to.Ptr(armoracledatabase.OpenModeTypeReadOnly),
		// 					OperationsInsightsStatus: to.Ptr(armoracledatabase.OperationsInsightsStatusTypeEnabling),
		// 					PermissionLevel: to.Ptr(armoracledatabase.PermissionLevelTypeRestricted),
		// 					PrivateEndpoint: to.Ptr("rlhggatujqzocvibe"),
		// 					ProvisionableCpus: []*int32{
		// 						to.Ptr[int32](21),
		// 					},
		// 					Role: to.Ptr(armoracledatabase.RoleTypePrimary),
		// 					ServiceConsoleURL: to.Ptr("threiehxxauchaokxangmgukvgbefpwaoneyhdhkmizdccxkkyedotccorydefqkbqhpdifguchutkzvrbmqnzdjpnnkgjfnwxgxbvvhzkfqmavkrkvixvcjinvrlyvebcnljyerhwgisubnoldediofuctetnrbf"),
		// 					SQLWebDeveloperURL: to.Ptr("xmpfnyypagnejpkyklestynmjsdqqwcvfjkmguyplihtznhosjvlbcxgeeonyzkovfrprcdqurmvydhkvbqhrnmiroimtcbybfkkicnettcfrgmgkgbjxmwfnylsevpkdyjrvwjldufrdtmjwiksmmvuzlyxiuatcaseobsicuodznlrvmspfwypjuifgzpofynrbzrlscpqbsnrsnopdnbmupbsfzthjsgzxqnbmvyswxwnfckitncvurypweezyzgoxtntrwpejwjabrybrknoqabeywjotpkqrfghqtatmnxbsastycrhjzevpcjynumkguifkoxdawodjgjsfydhmvkagjeumihyhzcbqcvtcwymbhrvdhpumcxlmdantnthjkjcfjkmszsolqtozlguvvnprkjfmnmqyxkuzzkbngtlusasqyzdszamzczzjnbtqqnqtdrjraekwvzcuzouxdhvnlgdvtsfztyabrbrsjdwxdksgmfoeeoqgazdw"),
		// 					SupportedRegionsToCloneTo: []*string{
		// 						to.Ptr("bgllibqtbp"),
		// 						to.Ptr("bgllibqtbp"),
		// 						to.Ptr("bgllibqtbp"),
		// 						to.Ptr("bgllibqtbp"),
		// 						to.Ptr("bgllibqtbp"),
		// 						to.Ptr("bgllibqtbp"),
		// 						to.Ptr("bgllibqtbp"),
		// 						to.Ptr("bgllibqtbp"),
		// 						to.Ptr("bgllibqtbp"),
		// 						to.Ptr("bgllibqtbp"),
		// 						to.Ptr("bgllibqtbp"),
		// 						to.Ptr("bgllibqtbp"),
		// 						to.Ptr("bgllibqtbp"),
		// 						to.Ptr("bgllibqtbp"),
		// 						to.Ptr("bgllibqtbp"),
		// 						to.Ptr("bgllibqtbp"),
		// 						to.Ptr("bgllibqtbp"),
		// 						to.Ptr("bgllibqtbp"),
		// 						to.Ptr("bgllibqtbp"),
		// 						to.Ptr("bgllibqtbp"),
		// 						to.Ptr("bgllibqtbp"),
		// 						to.Ptr("bgllibqtbp"),
		// 						to.Ptr("bgllibqtbp"),
		// 						to.Ptr("bgllibqtbp"),
		// 						to.Ptr("bgllibqtbp"),
		// 						to.Ptr("bgllibqtbp"),
		// 						to.Ptr("bgllibqtbp"),
		// 						to.Ptr("bgllibqtbp"),
		// 						to.Ptr("bgllibqtbp"),
		// 					},
		// 					TimeDataGuardRoleChanged: to.Ptr("wkompilkf"),
		// 					TimeDeletionOfFreeAutonomousDatabase: to.Ptr("ybhhebydubpqmcmfxip"),
		// 					TimeLocalDataGuardEnabled: to.Ptr("xrevlcxoiocqbvoiguqg"),
		// 					TimeOfLastFailover: to.Ptr("xgvir"),
		// 					TimeOfLastRefresh: to.Ptr("jpszxyfjatlkawkovzcrykgcfkn"),
		// 					TimeOfLastRefreshPoint: to.Ptr("nlukypraetzzkzsbfxbfwddqzl"),
		// 					TimeOfLastSwitchover: to.Ptr("fufkopddvnvcqmplnaffcke"),
		// 					TimeReclamationOfFreeAutonomousDatabase: to.Ptr("kyltyw"),
		// 					BackupRetentionPeriodInDays: to.Ptr[int32](24),
		// 				},
		// 				Name: to.Ptr("xyrqhmcykunr"),
		// 				SystemData: &armoracledatabase.SystemData{
		// 					CreatedBy: to.Ptr("sqehacivpuim"),
		// 					CreatedByType: to.Ptr(armoracledatabase.CreatedByTypeUser),
		// 					CreatedAt: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2025-08-01T04:32:58.716Z"); return t}()),
		// 					LastModifiedBy: to.Ptr("axrqfdkqylvjv"),
		// 					LastModifiedByType: to.Ptr(armoracledatabase.CreatedByTypeUser),
		// 					LastModifiedAt: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2025-08-01T04:32:58.716Z"); return t}()),
		// 				},
		// 			},
		// 		},
		// 		NextLink: to.Ptr("https://microsoft.com/a"),
		// 	},
		// }
	}
}

// Generated from example definition: 2025-09-01/AutonomousDatabases_ListByResourceGroup_MinimumSet_Gen.json
func ExampleAutonomousDatabasesClient_NewListByResourceGroupPager_listAutonomousDatabaseByResourceGroupGeneratedByMinimumSetRule() {
	cred, err := azidentity.NewDefaultAzureCredential(nil)
	if err != nil {
		log.Fatalf("failed to obtain a credential: %v", err)
	}
	ctx := context.Background()
	clientFactory, err := armoracledatabase.NewClientFactory("00000000-0000-0000-0000-000000000000", cred, nil)
	if err != nil {
		log.Fatalf("failed to create client: %v", err)
	}
	pager := clientFactory.NewAutonomousDatabasesClient().NewListByResourceGroupPager("rgopenapi", nil)
	for pager.More() {
		page, err := pager.NextPage(ctx)
		if err != nil {
			log.Fatalf("failed to advance page: %v", err)
		}
		for _, v := range page.Value {
			// You could use page here. We use blank identifier for just demo purposes.
			_ = v
		}
		// If the HTTP response code is 200 as defined in example definition, your page structure would look as follows. Please pay attention that all the values in the output are fake values for just demo purposes.
		// page = armoracledatabase.AutonomousDatabasesClientListByResourceGroupResponse{
		// 	AutonomousDatabaseListResult: armoracledatabase.AutonomousDatabaseListResult{
		// 		Value: []*armoracledatabase.AutonomousDatabase{
		// 			{
		// 				ID: to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/rg000/providers/Oracle.Database/autonomousDatabases/databasedb1"),
		// 				Location: to.Ptr("eastus"),
		// 			},
		// 		},
		// 	},
		// }
	}
}

// Generated from example definition: 2025-09-01/autonomousDatabase_listByResourceGroup.json
func ExampleAutonomousDatabasesClient_NewListByResourceGroupPager_autonomousDatabasesListByResourceGroup() {
	cred, err := azidentity.NewDefaultAzureCredential(nil)
	if err != nil {
		log.Fatalf("failed to obtain a credential: %v", err)
	}
	ctx := context.Background()
	clientFactory, err := armoracledatabase.NewClientFactory("00000000-0000-0000-0000-000000000000", cred, nil)
	if err != nil {
		log.Fatalf("failed to create client: %v", err)
	}
	pager := clientFactory.NewAutonomousDatabasesClient().NewListByResourceGroupPager("rg000", nil)
	for pager.More() {
		page, err := pager.NextPage(ctx)
		if err != nil {
			log.Fatalf("failed to advance page: %v", err)
		}
		for _, v := range page.Value {
			// You could use page here. We use blank identifier for just demo purposes.
			_ = v
		}
		// If the HTTP response code is 200 as defined in example definition, your page structure would look as follows. Please pay attention that all the values in the output are fake values for just demo purposes.
		// page = armoracledatabase.AutonomousDatabasesClientListByResourceGroupResponse{
		// 	AutonomousDatabaseListResult: armoracledatabase.AutonomousDatabaseListResult{
		// 		Value: []*armoracledatabase.AutonomousDatabase{
		// 			{
		// 				ID: to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/rg000/providers/Oracle.Database/autonomousDatabases/databasedb1"),
		// 				Type: to.Ptr("Oracle.Database/autonomousDatabases"),
		// 				Location: to.Ptr("eastus"),
		// 				Tags: map[string]*string{
		// 					"tagK1": to.Ptr("tagV1"),
		// 				},
		// 				Properties: &armoracledatabase.AutonomousDatabaseProperties{
		// 					AutonomousDatabaseID: to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/rg000/providers/Oracle.Database/autonomousDatabases/databasedb1"),
		// 					AutonomousMaintenanceScheduleType: to.Ptr(armoracledatabase.AutonomousMaintenanceScheduleTypeRegular),
		// 					CharacterSet: to.Ptr("AL32UTF8"),
		// 					NcharacterSet: to.Ptr("AL16UTF16"),
		// 					ComputeCount: to.Ptr[float32](2),
		// 					ComputeModel: to.Ptr(armoracledatabase.ComputeModelECPU),
		// 					CPUCoreCount: to.Ptr[int32](1),
		// 					DataStorageSizeInGbs: to.Ptr[int32](1024),
		// 					DataStorageSizeInTbs: to.Ptr[int32](1),
		// 					DatabaseEdition: to.Ptr(armoracledatabase.DatabaseEditionTypeEnterpriseEdition),
		// 					DataBaseType: to.Ptr(armoracledatabase.DataBaseTypeRegular),
		// 					DbVersion: to.Ptr("18.4.0.0"),
		// 					DisplayName: to.Ptr("example_autonomous_databasedb1"),
		// 					IsAutoScalingEnabled: to.Ptr(false),
		// 					IsAutoScalingForStorageEnabled: to.Ptr(false),
		// 					IsLocalDataGuardEnabled: to.Ptr(false),
		// 					IsMtlsConnectionRequired: to.Ptr(true),
		// 					LicenseModel: to.Ptr(armoracledatabase.LicenseModelBringYourOwnLicense),
		// 					LifecycleState: to.Ptr(armoracledatabase.AutonomousDatabaseLifecycleState("Succeeded")),
		// 					LifecycleDetails: to.Ptr("success"),
		// 					SubnetID: to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/rg000/providers/Microsoft.Network/virtualNetworks/vnet1/subnets/subnet1"),
		// 					VnetID: to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/rg000/providers/Microsoft.Network/virtualNetworks/vnet1"),
		// 					ProvisioningState: to.Ptr(armoracledatabase.AzureResourceProvisioningStateSucceeded),
		// 					OciURL: to.Ptr("https://fake"),
		// 					TimeCreated: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2024-01-09T20:44:09.466Z"); return t}()),
		// 					Ocid: to.Ptr("ocid1..aaaaa"),
		// 					WhitelistedIPs: []*string{
		// 						to.Ptr("1.1.1.1"),
		// 						to.Ptr("1.1.1.0/24"),
		// 						to.Ptr("1.1.2.25"),
		// 					},
		// 				},
		// 			},
		// 		},
		// 	},
		// }
	}
}

// Generated from example definition: 2025-09-01/AutonomousDatabases_ListBySubscription_MaximumSet_Gen.json
func ExampleAutonomousDatabasesClient_NewListBySubscriptionPager_listAutonomousDatabaseBySubscriptionGeneratedByMaximumSetRule() {
	cred, err := azidentity.NewDefaultAzureCredential(nil)
	if err != nil {
		log.Fatalf("failed to obtain a credential: %v", err)
	}
	ctx := context.Background()
	clientFactory, err := armoracledatabase.NewClientFactory("00000000-0000-0000-0000-000000000000", cred, nil)
	if err != nil {
		log.Fatalf("failed to create client: %v", err)
	}
	pager := clientFactory.NewAutonomousDatabasesClient().NewListBySubscriptionPager(nil)
	for pager.More() {
		page, err := pager.NextPage(ctx)
		if err != nil {
			log.Fatalf("failed to advance page: %v", err)
		}
		for _, v := range page.Value {
			// You could use page here. We use blank identifier for just demo purposes.
			_ = v
		}
		// If the HTTP response code is 200 as defined in example definition, your page structure would look as follows. Please pay attention that all the values in the output are fake values for just demo purposes.
		// page = armoracledatabase.AutonomousDatabasesClientListBySubscriptionResponse{
		// 	AutonomousDatabaseListResult: armoracledatabase.AutonomousDatabaseListResult{
		// 		Value: []*armoracledatabase.AutonomousDatabase{
		// 			{
		// 				ID: to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/rg000/providers/Oracle.Database/autonomousDatabases/databasedb1"),
		// 				Type: to.Ptr("Oracle.Database/autonomousDatabases"),
		// 				Location: to.Ptr("eastus"),
		// 				Tags: map[string]*string{
		// 				},
		// 				Properties: &armoracledatabase.AutonomousDatabaseProperties{
		// 					AutonomousDatabaseID: to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/rg000/providers/Oracle.Database/autonomousDatabases/databasedb1"),
		// 					ActualUsedDataStorageSizeInTbs: to.Ptr[float64](3),
		// 					AutonomousMaintenanceScheduleType: to.Ptr(armoracledatabase.AutonomousMaintenanceScheduleTypeRegular),
		// 					CharacterSet: to.Ptr("AL32UTF8"),
		// 					NcharacterSet: to.Ptr("AL16UTF16"),
		// 					ComputeCount: to.Ptr[float32](2),
		// 					ComputeModel: to.Ptr(armoracledatabase.ComputeModelECPU),
		// 					CPUCoreCount: to.Ptr[int32](1),
		// 					CustomerContacts: []*armoracledatabase.CustomerContact{
		// 						{
		// 							Email: to.Ptr("agyiqecugrloatgwpvmilmvutcnyjpxzhbilhhqfvqqblfgursqelzjjnwnmpfstitmcgkovzxnstiqqwjnhwwaufbnkebpqxlqwmfnmtlkgkoxcnjwcnfqbdtokhjalagxphkuiwxtxrzuipokiuczmuwoqoebkjvhytlhtxzshwsdoywluoggznuyuozqibiwdgwqbgnyogysdjpvlowmvuvq"),
		// 						},
		// 					},
		// 					DataStorageSizeInGbs: to.Ptr[int32](1024),
		// 					DataStorageSizeInTbs: to.Ptr[int32](1),
		// 					DatabaseEdition: to.Ptr(armoracledatabase.DatabaseEditionTypeEnterpriseEdition),
		// 					DataBaseType: to.Ptr(armoracledatabase.DataBaseTypeRegular),
		// 					DbVersion: to.Ptr("18.4.0.0"),
		// 					DisplayName: to.Ptr("example_autonomous_databasedb1"),
		// 					IsAutoScalingEnabled: to.Ptr(true),
		// 					IsAutoScalingForStorageEnabled: to.Ptr(true),
		// 					IsLocalDataGuardEnabled: to.Ptr(true),
		// 					IsMtlsConnectionRequired: to.Ptr(true),
		// 					LicenseModel: to.Ptr(armoracledatabase.LicenseModelBringYourOwnLicense),
		// 					LifecycleState: to.Ptr(armoracledatabase.AutonomousDatabaseLifecycleState("Succeeded")),
		// 					LifecycleDetails: to.Ptr("success"),
		// 					PrivateEndpointIP: to.Ptr("nnoxtfettnhwhhjdtylhkhwj"),
		// 					PrivateEndpointLabel: to.Ptr("j"),
		// 					SubnetID: to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/rg000/providers/Microsoft.Network/virtualNetworks/vnet1/subnets/subnet1"),
		// 					VnetID: to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/rg000/providers/Microsoft.Network/virtualNetworks/vnet1"),
		// 					ProvisioningState: to.Ptr(armoracledatabase.AzureResourceProvisioningStateSucceeded),
		// 					OciURL: to.Ptr("https://fake"),
		// 					TimeCreated: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2024-01-09T20:44:09.466Z"); return t}()),
		// 					TimeMaintenanceBegin: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2025-08-01T04:32:58.715Z"); return t}()),
		// 					TimeMaintenanceEnd: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2025-08-01T04:32:58.715Z"); return t}()),
		// 					UsedDataStorageSizeInGbs: to.Ptr[int32](12),
		// 					UsedDataStorageSizeInTbs: to.Ptr[int32](15),
		// 					Ocid: to.Ptr("ocid1..aaaaa"),
		// 					WhitelistedIPs: []*string{
		// 						to.Ptr("1.1.1.1"),
		// 						to.Ptr("1.1.1.0/24"),
		// 						to.Ptr("1.1.2.25"),
		// 					},
		// 					DbWorkload: to.Ptr(armoracledatabase.WorkloadTypeOLTP),
		// 					PeerDbIDs: []*string{
		// 						to.Ptr("jflsgwiukjeriuohebig"),
		// 					},
		// 					IsRemoteDataGuardEnabled: to.Ptr(true),
		// 					LocalDisasterRecoveryType: to.Ptr(armoracledatabase.DisasterRecoveryTypeAdg),
		// 					TimeDisasterRecoveryRoleChanged: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2025-08-01T04:32:58.712Z"); return t}()),
		// 					RemoteDisasterRecoveryConfiguration: &armoracledatabase.DisasterRecoveryConfigurationDetails{
		// 						DisasterRecoveryType: to.Ptr(armoracledatabase.DisasterRecoveryTypeAdg),
		// 						TimeSnapshotStandbyEnabledTill: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2025-08-01T04:32:58.715Z"); return t}()),
		// 						IsSnapshotStandby: to.Ptr(true),
		// 						IsReplicateAutomaticBackups: to.Ptr(true),
		// 					},
		// 					LocalStandbyDb: &armoracledatabase.AutonomousDatabaseStandbySummary{
		// 						LagTimeInSeconds: to.Ptr[int32](13),
		// 						LifecycleState: to.Ptr(armoracledatabase.AutonomousDatabaseLifecycleStateProvisioning),
		// 						LifecycleDetails: to.Ptr("zoiyaaibuuhm"),
		// 						TimeDataGuardRoleChanged: to.Ptr("inggk"),
		// 						TimeDisasterRecoveryRoleChanged: to.Ptr("q"),
		// 					},
		// 					FailedDataRecoveryInSeconds: to.Ptr[int32](11),
		// 					ScheduledOperationsList: []*armoracledatabase.ScheduledOperationsType{
		// 						{
		// 							DayOfWeek: &armoracledatabase.DayOfWeek{
		// 								Name: to.Ptr(armoracledatabase.DayOfWeekNameMonday),
		// 							},
		// 							ScheduledStartTime: to.Ptr("lwwvkazgmfremfwhckfb"),
		// 							ScheduledStopTime: to.Ptr("hjwagzxijpiaogulmnmbuqakpqxhkjvaypjqnvbvtjddc"),
		// 						},
		// 					},
		// 					AllocatedStorageSizeInTbs: to.Ptr[float64](1),
		// 					ApexDetails: &armoracledatabase.ApexDetailsType{
		// 						ApexVersion: to.Ptr("scvpjwygbzqzevlztyfvqiaom"),
		// 						OrdsVersion: to.Ptr("djlwvhpipimxaguklshpppjrzasbk"),
		// 					},
		// 					AvailableUpgradeVersions: []*string{
		// 						to.Ptr("yegwifyowsnpndi"),
		// 					},
		// 					ConnectionStrings: &armoracledatabase.ConnectionStringType{
		// 						AllConnectionStrings: &armoracledatabase.AllConnectionStringType{
		// 							High: to.Ptr("exdinleextbcjinutlkvnqyxhvandtihncykjzrhfdhfrxdarny"),
		// 							Low: to.Ptr("vurudxqtummqqbnidwthmsqgujufjxwfnejdpuxkgyoxlgqhcgsfjcpzaqeioslpehjfashipdsjhkrpdobstvgxsqrgvcrpbiiabhvymdsylqsjedrimqhtttmszlaqyukopuufbtkbtwgdydrvnvkcdqmphwzpcjxlgefzrdajyczzjdpuzvhqvupbvrpvqhzoaalg"),
		// 							Medium: to.Ptr("ishtubsuzgwtkfdqfgyxjlhehiokdvjfhwqhvmgtuksboshulroytcnubtrxxjbgoutftpzeavbldsoqjwmamgfwevhppyyeckythirzvaqujrjaiqnpyvycakhwgtuftmuxavdgdvbqxgsdqwbnqzmrzymwiydhxekenbweaghgvyveuysxqmovwodzwwfrxhtlcegekjk"),
		// 						},
		// 						Dedicated: to.Ptr("okoggzbidoaknwikuqpvepxvvcseukouprpfrldmakztkleeizbjf"),
		// 						High: to.Ptr("pggylyrivfn"),
		// 						Low: to.Ptr("zrjsbtdbfluaipbzgcvvhyuvqoczjneihaiftkfmuvvyoldslgvvpwthieyrcoxvh"),
		// 						Medium: to.Ptr("ebjnwenxvyeinsabrppychqbcawfxgplfacbsizltwfhpdafbkawopppqsxemlnmrbiqlstjupgdmpfcyyxgofmitbdiarrpprhntntqqjklseigycfcpmmlqiznxzliserjppmgfjatnmtbdxqtlbmrmpfbpoxmyffkkoptpayigeeefmqczroouqjxchswffywpsmyqohbyaclhsrwgqyuuyynvxyyzkche"),
		// 						Profiles: []*armoracledatabase.ProfileType{
		// 							{
		// 								ConsumerGroup: to.Ptr(armoracledatabase.ConsumerGroupHigh),
		// 								DisplayName: to.Ptr("mqqdgidxuovxhcwrkanybxzplautekarsxbcbzlkikpmmvjrdrrkncbamdtcuksplamigrdkydjbzeurbmjgehgppovxqhuzasduwptrlyaurzszzqpztckhpdniepaglzeublbwffxebfespqyfpljlutregvlzzjo"),
		// 								HostFormat: to.Ptr(armoracledatabase.HostFormatTypeFqdn),
		// 								IsRegional: to.Ptr(true),
		// 								Protocol: to.Ptr(armoracledatabase.ProtocolTypeTCP),
		// 								SessionMode: to.Ptr(armoracledatabase.SessionModeTypeDirect),
		// 								SyntaxFormat: to.Ptr(armoracledatabase.SyntaxFormatTypeLong),
		// 								TLSAuthentication: to.Ptr(armoracledatabase.TLSAuthenticationTypeServer),
		// 								Value: to.Ptr("bdrnwqpzbbzdipqqhnroxiuewqg"),
		// 							},
		// 						},
		// 					},
		// 					ConnectionUrls: &armoracledatabase.ConnectionURLType{
		// 						ApexURL: to.Ptr("epnebmudvzijxrfgabsdjewqfotqjmnxvokfhlyklhvtrjpprnqujthmceuhpfuumcbfxktppfguqduzkukxqkofoyyycljjtruyjtoiesxlrwwzonozaxetzrkpmzwasyvryvkryawxxf"),
		// 						DatabaseTransformsURL: to.Ptr("hujiemysucgdgtasazsdtwnxmtjppugunrqnzfzneatukuyzvkfseusjaxrourznsrwxjbvzfansdcyfxnvcyghl"),
		// 						GraphStudioURL: to.Ptr("bucnwmwixwemqqtoozfclfzqenskkyssvcatwbptsezpzdwgnaexgxutsvaibnkawyohqklnktzlhdbhbstm"),
		// 						MachineLearningNotebookURL: to.Ptr("vfhnqsrabxcrjnpqaqkgnpwhxffsqkrgcijdkkvnaoangzkcbgwklufujhmlgydxueybugxzgokxbbappdslttpdthhbmxrgcicqzyjyahjeiqopuglgbjfbhufuvsogquelagbjtyotwhmecwupooitcaftldxjycgfnlilrnicqjxnsucieftadjbvptzltmgqkxhttfkkbutaxvtfzbvbbxbmpxeeyfethpofnmbbqbtlqvnfgelvtjizckgixpptkilcvrntknusvppgnobokjpepynndswcqsnewhfnlxgmownfwfnokhbqulzyuessvxxtcdcnmumbbpjchmjbvjecbbinjolmuoaixzunawlxnoqbpzkczdsubpqpdltnfydwevearrdirzaszsudcxaspozeop"),
		// 						MongoDbURL: to.Ptr("dzmsqtcgsrdgwjlnrfmzcqcrkdqwmjrccxsszwdgpcygywnuurklwthgonxcnwaqcgzoexnaanwzsqwemcijuzxqbrkpvydizjraicgnspizwwnwureyey"),
		// 						OrdsURL: to.Ptr("lmqdgziantbczaneiqxopnaexcroelkbcgggjipzqfhoduwqodoyeghzjyuyhesewopbujxnoiziidhslxdawrfayjvxzjwfobtjrepldlmwhauiurzhbpyxsbueugddmdfindxsdjddqamwbptozzmobugnpezxyxdopripljdwnogjgrjwjfbugdkqrjwzjvavsdmgvspnzcgcjzxauqxqljmfgrtyohfppbmprmexiirvlmymxzyciaraihbwihvahyaciv"),
		// 						SQLDevWebURL: to.Ptr("pktklsvlakmblcakipxy"),
		// 					},
		// 					DataSafeStatus: to.Ptr(armoracledatabase.DataSafeStatusTypeRegistering),
		// 					InMemoryAreaInGbs: to.Ptr[int32](23),
		// 					NextLongTermBackupTimeStamp: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2025-08-01T04:32:58.715Z"); return t}()),
		// 					LongTermBackupSchedule: &armoracledatabase.LongTermBackUpScheduleDetails{
		// 						RepeatCadence: to.Ptr(armoracledatabase.RepeatCadenceTypeOneTime),
		// 						TimeOfBackup: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2025-08-01T04:32:58.715Z"); return t}()),
		// 						RetentionPeriodInDays: to.Ptr[int32](188),
		// 						IsDisabled: to.Ptr(true),
		// 					},
		// 					IsPreview: to.Ptr(true),
		// 					LocalAdgAutoFailoverMaxDataLossLimit: to.Ptr[int32](2449),
		// 					MemoryPerOracleComputeUnitInGbs: to.Ptr[int32](11),
		// 					OpenMode: to.Ptr(armoracledatabase.OpenModeTypeReadOnly),
		// 					OperationsInsightsStatus: to.Ptr(armoracledatabase.OperationsInsightsStatusTypeEnabling),
		// 					PermissionLevel: to.Ptr(armoracledatabase.PermissionLevelTypeRestricted),
		// 					PrivateEndpoint: to.Ptr("rlhggatujqzocvibe"),
		// 					ProvisionableCpus: []*int32{
		// 						to.Ptr[int32](21),
		// 					},
		// 					Role: to.Ptr(armoracledatabase.RoleTypePrimary),
		// 					ServiceConsoleURL: to.Ptr("threiehxxauchaokxangmgukvgbefpwaoneyhdhkmizdccxkkyedotccorydefqkbqhpdifguchutkzvrbmqnzdjpnnkgjfnwxgxbvvhzkfqmavkrkvixvcjinvrlyvebcnljyerhwgisubnoldediofuctetnrbf"),
		// 					SQLWebDeveloperURL: to.Ptr("xmpfnyypagnejpkyklestynmjsdqqwcvfjkmguyplihtznhosjvlbcxgeeonyzkovfrprcdqurmvydhkvbqhrnmiroimtcbybfkkicnettcfrgmgkgbjxmwfnylsevpkdyjrvwjldufrdtmjwiksmmvuzlyxiuatcaseobsicuodznlrvmspfwypjuifgzpofynrbzrlscpqbsnrsnopdnbmupbsfzthjsgzxqnbmvyswxwnfckitncvurypweezyzgoxtntrwpejwjabrybrknoqabeywjotpkqrfghqtatmnxbsastycrhjzevpcjynumkguifkoxdawodjgjsfydhmvkagjeumihyhzcbqcvtcwymbhrvdhpumcxlmdantnthjkjcfjkmszsolqtozlguvvnprkjfmnmqyxkuzzkbngtlusasqyzdszamzczzjnbtqqnqtdrjraekwvzcuzouxdhvnlgdvtsfztyabrbrsjdwxdksgmfoeeoqgazdw"),
		// 					SupportedRegionsToCloneTo: []*string{
		// 						to.Ptr("bgllibqtbp"),
		// 						to.Ptr("bgllibqtbp"),
		// 						to.Ptr("bgllibqtbp"),
		// 						to.Ptr("bgllibqtbp"),
		// 						to.Ptr("bgllibqtbp"),
		// 						to.Ptr("bgllibqtbp"),
		// 						to.Ptr("bgllibqtbp"),
		// 						to.Ptr("bgllibqtbp"),
		// 						to.Ptr("bgllibqtbp"),
		// 						to.Ptr("bgllibqtbp"),
		// 						to.Ptr("bgllibqtbp"),
		// 						to.Ptr("bgllibqtbp"),
		// 						to.Ptr("bgllibqtbp"),
		// 						to.Ptr("bgllibqtbp"),
		// 						to.Ptr("bgllibqtbp"),
		// 						to.Ptr("bgllibqtbp"),
		// 						to.Ptr("bgllibqtbp"),
		// 						to.Ptr("bgllibqtbp"),
		// 						to.Ptr("bgllibqtbp"),
		// 						to.Ptr("bgllibqtbp"),
		// 						to.Ptr("bgllibqtbp"),
		// 						to.Ptr("bgllibqtbp"),
		// 						to.Ptr("bgllibqtbp"),
		// 						to.Ptr("bgllibqtbp"),
		// 						to.Ptr("bgllibqtbp"),
		// 						to.Ptr("bgllibqtbp"),
		// 						to.Ptr("bgllibqtbp"),
		// 						to.Ptr("bgllibqtbp"),
		// 						to.Ptr("bgllibqtbp"),
		// 					},
		// 					TimeDataGuardRoleChanged: to.Ptr("wkompilkf"),
		// 					TimeDeletionOfFreeAutonomousDatabase: to.Ptr("ybhhebydubpqmcmfxip"),
		// 					TimeLocalDataGuardEnabled: to.Ptr("xrevlcxoiocqbvoiguqg"),
		// 					TimeOfLastFailover: to.Ptr("xgvir"),
		// 					TimeOfLastRefresh: to.Ptr("jpszxyfjatlkawkovzcrykgcfkn"),
		// 					TimeOfLastRefreshPoint: to.Ptr("nlukypraetzzkzsbfxbfwddqzl"),
		// 					TimeOfLastSwitchover: to.Ptr("fufkopddvnvcqmplnaffcke"),
		// 					TimeReclamationOfFreeAutonomousDatabase: to.Ptr("kyltyw"),
		// 					BackupRetentionPeriodInDays: to.Ptr[int32](24),
		// 				},
		// 				Name: to.Ptr("xyrqhmcykunr"),
		// 				SystemData: &armoracledatabase.SystemData{
		// 					CreatedBy: to.Ptr("sqehacivpuim"),
		// 					CreatedByType: to.Ptr(armoracledatabase.CreatedByTypeUser),
		// 					CreatedAt: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2025-08-01T04:32:58.716Z"); return t}()),
		// 					LastModifiedBy: to.Ptr("axrqfdkqylvjv"),
		// 					LastModifiedByType: to.Ptr(armoracledatabase.CreatedByTypeUser),
		// 					LastModifiedAt: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2025-08-01T04:32:58.716Z"); return t}()),
		// 				},
		// 			},
		// 		},
		// 		NextLink: to.Ptr("https://microsoft.com/a"),
		// 	},
		// }
	}
}

// Generated from example definition: 2025-09-01/AutonomousDatabases_ListBySubscription_MinimumSet_Gen.json
func ExampleAutonomousDatabasesClient_NewListBySubscriptionPager_listAutonomousDatabaseBySubscriptionGeneratedByMinimumSetRule() {
	cred, err := azidentity.NewDefaultAzureCredential(nil)
	if err != nil {
		log.Fatalf("failed to obtain a credential: %v", err)
	}
	ctx := context.Background()
	clientFactory, err := armoracledatabase.NewClientFactory("00000000-0000-0000-0000-000000000000", cred, nil)
	if err != nil {
		log.Fatalf("failed to create client: %v", err)
	}
	pager := clientFactory.NewAutonomousDatabasesClient().NewListBySubscriptionPager(nil)
	for pager.More() {
		page, err := pager.NextPage(ctx)
		if err != nil {
			log.Fatalf("failed to advance page: %v", err)
		}
		for _, v := range page.Value {
			// You could use page here. We use blank identifier for just demo purposes.
			_ = v
		}
		// If the HTTP response code is 200 as defined in example definition, your page structure would look as follows. Please pay attention that all the values in the output are fake values for just demo purposes.
		// page = armoracledatabase.AutonomousDatabasesClientListBySubscriptionResponse{
		// 	AutonomousDatabaseListResult: armoracledatabase.AutonomousDatabaseListResult{
		// 		Value: []*armoracledatabase.AutonomousDatabase{
		// 			{
		// 				ID: to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/rg000/providers/Oracle.Database/locations/eastus"),
		// 				Location: to.Ptr("eastus"),
		// 			},
		// 		},
		// 	},
		// }
	}
}

// Generated from example definition: 2025-09-01/autonomousDatabase_listBySubscription.json
func ExampleAutonomousDatabasesClient_NewListBySubscriptionPager_autonomousDatabasesListBySubscription() {
	cred, err := azidentity.NewDefaultAzureCredential(nil)
	if err != nil {
		log.Fatalf("failed to obtain a credential: %v", err)
	}
	ctx := context.Background()
	clientFactory, err := armoracledatabase.NewClientFactory("00000000-0000-0000-0000-000000000000", cred, nil)
	if err != nil {
		log.Fatalf("failed to create client: %v", err)
	}
	pager := clientFactory.NewAutonomousDatabasesClient().NewListBySubscriptionPager(nil)
	for pager.More() {
		page, err := pager.NextPage(ctx)
		if err != nil {
			log.Fatalf("failed to advance page: %v", err)
		}
		for _, v := range page.Value {
			// You could use page here. We use blank identifier for just demo purposes.
			_ = v
		}
		// If the HTTP response code is 200 as defined in example definition, your page structure would look as follows. Please pay attention that all the values in the output are fake values for just demo purposes.
		// page = armoracledatabase.AutonomousDatabasesClientListBySubscriptionResponse{
		// 	AutonomousDatabaseListResult: armoracledatabase.AutonomousDatabaseListResult{
		// 		Value: []*armoracledatabase.AutonomousDatabase{
		// 			{
		// 				ID: to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/rg000/providers/Oracle.Database/autonomousDatabases/databasedb1"),
		// 				Type: to.Ptr("Oracle.Database/autonomousDatabases"),
		// 				Location: to.Ptr("eastus"),
		// 				Tags: map[string]*string{
		// 					"tagK1": to.Ptr("tagV1"),
		// 				},
		// 				Properties: &armoracledatabase.AutonomousDatabaseProperties{
		// 					AutonomousDatabaseID: to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/rg000/providers/Oracle.Database/autonomousDatabases/databasedb1"),
		// 					AutonomousMaintenanceScheduleType: to.Ptr(armoracledatabase.AutonomousMaintenanceScheduleTypeRegular),
		// 					CharacterSet: to.Ptr("AL32UTF8"),
		// 					NcharacterSet: to.Ptr("AL16UTF16"),
		// 					ComputeCount: to.Ptr[float32](2),
		// 					ComputeModel: to.Ptr(armoracledatabase.ComputeModelECPU),
		// 					CPUCoreCount: to.Ptr[int32](1),
		// 					DataStorageSizeInGbs: to.Ptr[int32](1024),
		// 					DataStorageSizeInTbs: to.Ptr[int32](1),
		// 					DatabaseEdition: to.Ptr(armoracledatabase.DatabaseEditionTypeEnterpriseEdition),
		// 					DataBaseType: to.Ptr(armoracledatabase.DataBaseTypeRegular),
		// 					DbVersion: to.Ptr("18.4.0.0"),
		// 					DisplayName: to.Ptr("example_autonomous_databasedb1"),
		// 					IsAutoScalingEnabled: to.Ptr(false),
		// 					IsAutoScalingForStorageEnabled: to.Ptr(false),
		// 					IsLocalDataGuardEnabled: to.Ptr(false),
		// 					IsMtlsConnectionRequired: to.Ptr(true),
		// 					LicenseModel: to.Ptr(armoracledatabase.LicenseModelBringYourOwnLicense),
		// 					LifecycleState: to.Ptr(armoracledatabase.AutonomousDatabaseLifecycleState("Succeeded")),
		// 					LifecycleDetails: to.Ptr("success"),
		// 					SubnetID: to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/rg000/providers/Microsoft.Network/virtualNetworks/vnet1/subnets/subnet1"),
		// 					VnetID: to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/rg000/providers/Microsoft.Network/virtualNetworks/vnet1"),
		// 					ProvisioningState: to.Ptr(armoracledatabase.AzureResourceProvisioningStateSucceeded),
		// 					OciURL: to.Ptr("https://fake"),
		// 					TimeCreated: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2024-01-09T20:44:09.466Z"); return t}()),
		// 					Ocid: to.Ptr("ocid1..aaaaa"),
		// 					WhitelistedIPs: []*string{
		// 						to.Ptr("1.1.1.1"),
		// 						to.Ptr("1.1.1.0/24"),
		// 						to.Ptr("1.1.2.25"),
		// 					},
		// 				},
		// 			},
		// 		},
		// 	},
		// }
	}
}

// Generated from example definition: 2025-09-01/AutonomousDatabases_Restore_MaximumSet_Gen.json
func ExampleAutonomousDatabasesClient_BeginRestore_performRestoreActionOnAutonomousDatabaseGeneratedByMaximumSetRule() {
	cred, err := azidentity.NewDefaultAzureCredential(nil)
	if err != nil {
		log.Fatalf("failed to obtain a credential: %v", err)
	}
	ctx := context.Background()
	clientFactory, err := armoracledatabase.NewClientFactory("00000000-0000-0000-0000-000000000000", cred, nil)
	if err != nil {
		log.Fatalf("failed to create client: %v", err)
	}
	poller, err := clientFactory.NewAutonomousDatabasesClient().BeginRestore(ctx, "rgopenapi", "database1", armoracledatabase.RestoreAutonomousDatabaseDetails{
		Timestamp: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2024-04-23T00:00:00.000Z"); return t }()),
	}, nil)
	if err != nil {
		log.Fatalf("failed to finish the request: %v", err)
	}
	res, err := poller.PollUntilDone(ctx, nil)
	if err != nil {
		log.Fatalf("failed to pull the result: %v", err)
	}
	// You could use response here. We use blank identifier for just demo purposes.
	_ = res
	// If the HTTP response code is 200 as defined in example definition, your response structure would look as follows. Please pay attention that all the values in the output are fake values for just demo purposes.
	// res = armoracledatabase.AutonomousDatabasesClientRestoreResponse{
	// 	AutonomousDatabase: &armoracledatabase.AutonomousDatabase{
	// 		Properties: &armoracledatabase.AutonomousDatabaseProperties{
	// 			DataBaseType: to.Ptr(armoracledatabase.DataBaseTypeRegular),
	// 			DisplayName: to.Ptr("example_autonomous_databasedb1"),
	// 			ComputeModel: to.Ptr(armoracledatabase.ComputeModelECPU),
	// 			ComputeCount: to.Ptr[float32](2),
	// 			DataStorageSizeInTbs: to.Ptr[int32](1),
	// 			DbVersion: to.Ptr("18.4.0.0"),
	// 			CharacterSet: to.Ptr("AL32UTF8"),
	// 			NcharacterSet: to.Ptr("AL16UTF16"),
	// 			SubnetID: to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/rg000/providers/Microsoft.Network/virtualNetworks/vnet1/subnets/subnet1"),
	// 			VnetID: to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/rg000/providers/Microsoft.Network/virtualNetworks/vnet1"),
	// 			AutonomousMaintenanceScheduleType: to.Ptr(armoracledatabase.AutonomousMaintenanceScheduleTypeRegular),
	// 			CPUCoreCount: to.Ptr[int32](1),
	// 			CustomerContacts: []*armoracledatabase.CustomerContact{
	// 				{
	// 					Email: to.Ptr("agyiqecugrloatgwpvmilmvutcnyjpxzhbilhhqfvqqblfgursqelzjjnwnmpfstitmcgkovzxnstiqqwjnhwwaufbnkebpqxlqwmfnmtlkgkoxcnjwcnfqbdtokhjalagxphkuiwxtxrzuipokiuczmuwoqoebkjvhytlhtxzshwsdoywluoggznuyuozqibiwdgwqbgnyogysdjpvlowmvuvq"),
	// 				},
	// 			},
	// 			DataStorageSizeInGbs: to.Ptr[int32](1024),
	// 			DbWorkload: to.Ptr(armoracledatabase.WorkloadTypeOLTP),
	// 			IsAutoScalingEnabled: to.Ptr(true),
	// 			IsAutoScalingForStorageEnabled: to.Ptr(true),
	// 			PeerDbIDs: []*string{
	// 				to.Ptr("gpubz"),
	// 			},
	// 			IsLocalDataGuardEnabled: to.Ptr(true),
	// 			IsRemoteDataGuardEnabled: to.Ptr(true),
	// 			LocalDisasterRecoveryType: to.Ptr(armoracledatabase.DisasterRecoveryTypeAdg),
	// 			TimeDisasterRecoveryRoleChanged: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2025-08-01T04:32:58.722Z"); return t}()),
	// 			RemoteDisasterRecoveryConfiguration: &armoracledatabase.DisasterRecoveryConfigurationDetails{
	// 				DisasterRecoveryType: to.Ptr(armoracledatabase.DisasterRecoveryTypeAdg),
	// 				TimeSnapshotStandbyEnabledTill: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2025-08-01T04:32:58.715Z"); return t}()),
	// 				IsSnapshotStandby: to.Ptr(true),
	// 				IsReplicateAutomaticBackups: to.Ptr(true),
	// 			},
	// 			LocalStandbyDb: &armoracledatabase.AutonomousDatabaseStandbySummary{
	// 				LagTimeInSeconds: to.Ptr[int32](13),
	// 				LifecycleState: to.Ptr(armoracledatabase.AutonomousDatabaseLifecycleStateProvisioning),
	// 				LifecycleDetails: to.Ptr("zoiyaaibuuhm"),
	// 				TimeDataGuardRoleChanged: to.Ptr("inggk"),
	// 				TimeDisasterRecoveryRoleChanged: to.Ptr("q"),
	// 			},
	// 			FailedDataRecoveryInSeconds: to.Ptr[int32](27),
	// 			IsMtlsConnectionRequired: to.Ptr(true),
	// 			LicenseModel: to.Ptr(armoracledatabase.LicenseModelBringYourOwnLicense),
	// 			LifecycleDetails: to.Ptr("success"),
	// 			ProvisioningState: to.Ptr(armoracledatabase.AzureResourceProvisioningStateSucceeded),
	// 			LifecycleState: to.Ptr(armoracledatabase.AutonomousDatabaseLifecycleState("Succeeded")),
	// 			ScheduledOperationsList: []*armoracledatabase.ScheduledOperationsType{
	// 				{
	// 					DayOfWeek: &armoracledatabase.DayOfWeek{
	// 						Name: to.Ptr(armoracledatabase.DayOfWeekNameMonday),
	// 					},
	// 					ScheduledStartTime: to.Ptr("lwwvkazgmfremfwhckfb"),
	// 					ScheduledStopTime: to.Ptr("hjwagzxijpiaogulmnmbuqakpqxhkjvaypjqnvbvtjddc"),
	// 				},
	// 			},
	// 			PrivateEndpointIP: to.Ptr("rdlbhw"),
	// 			PrivateEndpointLabel: to.Ptr("worwqllbglhyakksevparfuaivc"),
	// 			OciURL: to.Ptr("https://fake"),
	// 			TimeCreated: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2024-01-09T20:44:09.466Z"); return t}()),
	// 			TimeMaintenanceBegin: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2025-08-01T04:32:58.722Z"); return t}()),
	// 			TimeMaintenanceEnd: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2025-08-01T04:32:58.722Z"); return t}()),
	// 			ActualUsedDataStorageSizeInTbs: to.Ptr[float64](8),
	// 			AllocatedStorageSizeInTbs: to.Ptr[float64](20),
	// 			ApexDetails: &armoracledatabase.ApexDetailsType{
	// 				ApexVersion: to.Ptr("scvpjwygbzqzevlztyfvqiaom"),
	// 				OrdsVersion: to.Ptr("djlwvhpipimxaguklshpppjrzasbk"),
	// 			},
	// 			AvailableUpgradeVersions: []*string{
	// 				to.Ptr("dgvzwolnmulrlwzzazgqm"),
	// 			},
	// 			ConnectionStrings: &armoracledatabase.ConnectionStringType{
	// 				AllConnectionStrings: &armoracledatabase.AllConnectionStringType{
	// 					High: to.Ptr("exdinleextbcjinutlkvnqyxhvandtihncykjzrhfdhfrxdarny"),
	// 					Low: to.Ptr("vurudxqtummqqbnidwthmsqgujufjxwfnejdpuxkgyoxlgqhcgsfjcpzaqeioslpehjfashipdsjhkrpdobstvgxsqrgvcrpbiiabhvymdsylqsjedrimqhtttmszlaqyukopuufbtkbtwgdydrvnvkcdqmphwzpcjxlgefzrdajyczzjdpuzvhqvupbvrpvqhzoaalg"),
	// 					Medium: to.Ptr("ishtubsuzgwtkfdqfgyxjlhehiokdvjfhwqhvmgtuksboshulroytcnubtrxxjbgoutftpzeavbldsoqjwmamgfwevhppyyeckythirzvaqujrjaiqnpyvycakhwgtuftmuxavdgdvbqxgsdqwbnqzmrzymwiydhxekenbweaghgvyveuysxqmovwodzwwfrxhtlcegekjk"),
	// 				},
	// 				Dedicated: to.Ptr("okoggzbidoaknwikuqpvepxvvcseukouprpfrldmakztkleeizbjf"),
	// 				High: to.Ptr("pggylyrivfn"),
	// 				Low: to.Ptr("zrjsbtdbfluaipbzgcvvhyuvqoczjneihaiftkfmuvvyoldslgvvpwthieyrcoxvh"),
	// 				Medium: to.Ptr("ebjnwenxvyeinsabrppychqbcawfxgplfacbsizltwfhpdafbkawopppqsxemlnmrbiqlstjupgdmpfcyyxgofmitbdiarrpprhntntqqjklseigycfcpmmlqiznxzliserjppmgfjatnmtbdxqtlbmrmpfbpoxmyffkkoptpayigeeefmqczroouqjxchswffywpsmyqohbyaclhsrwgqyuuyynvxyyzkche"),
	// 				Profiles: []*armoracledatabase.ProfileType{
	// 					{
	// 						ConsumerGroup: to.Ptr(armoracledatabase.ConsumerGroupHigh),
	// 						DisplayName: to.Ptr("mqqdgidxuovxhcwrkanybxzplautekarsxbcbzlkikpmmvjrdrrkncbamdtcuksplamigrdkydjbzeurbmjgehgppovxqhuzasduwptrlyaurzszzqpztckhpdniepaglzeublbwffxebfespqyfpljlutregvlzzjo"),
	// 						HostFormat: to.Ptr(armoracledatabase.HostFormatTypeFqdn),
	// 						IsRegional: to.Ptr(true),
	// 						Protocol: to.Ptr(armoracledatabase.ProtocolTypeTCP),
	// 						SessionMode: to.Ptr(armoracledatabase.SessionModeTypeDirect),
	// 						SyntaxFormat: to.Ptr(armoracledatabase.SyntaxFormatTypeLong),
	// 						TLSAuthentication: to.Ptr(armoracledatabase.TLSAuthenticationTypeServer),
	// 						Value: to.Ptr("bdrnwqpzbbzdipqqhnroxiuewqg"),
	// 					},
	// 				},
	// 			},
	// 			ConnectionUrls: &armoracledatabase.ConnectionURLType{
	// 				ApexURL: to.Ptr("epnebmudvzijxrfgabsdjewqfotqjmnxvokfhlyklhvtrjpprnqujthmceuhpfuumcbfxktppfguqduzkukxqkofoyyycljjtruyjtoiesxlrwwzonozaxetzrkpmzwasyvryvkryawxxf"),
	// 				DatabaseTransformsURL: to.Ptr("hujiemysucgdgtasazsdtwnxmtjppugunrqnzfzneatukuyzvkfseusjaxrourznsrwxjbvzfansdcyfxnvcyghl"),
	// 				GraphStudioURL: to.Ptr("bucnwmwixwemqqtoozfclfzqenskkyssvcatwbptsezpzdwgnaexgxutsvaibnkawyohqklnktzlhdbhbstm"),
	// 				MachineLearningNotebookURL: to.Ptr("vfhnqsrabxcrjnpqaqkgnpwhxffsqkrgcijdkkvnaoangzkcbgwklufujhmlgydxueybugxzgokxbbappdslttpdthhbmxrgcicqzyjyahjeiqopuglgbjfbhufuvsogquelagbjtyotwhmecwupooitcaftldxjycgfnlilrnicqjxnsucieftadjbvptzltmgqkxhttfkkbutaxvtfzbvbbxbmpxeeyfethpofnmbbqbtlqvnfgelvtjizckgixpptkilcvrntknusvppgnobokjpepynndswcqsnewhfnlxgmownfwfnokhbqulzyuessvxxtcdcnmumbbpjchmjbvjecbbinjolmuoaixzunawlxnoqbpzkczdsubpqpdltnfydwevearrdirzaszsudcxaspozeop"),
	// 				MongoDbURL: to.Ptr("dzmsqtcgsrdgwjlnrfmzcqcrkdqwmjrccxsszwdgpcygywnuurklwthgonxcnwaqcgzoexnaanwzsqwemcijuzxqbrkpvydizjraicgnspizwwnwureyey"),
	// 				OrdsURL: to.Ptr("lmqdgziantbczaneiqxopnaexcroelkbcgggjipzqfhoduwqodoyeghzjyuyhesewopbujxnoiziidhslxdawrfayjvxzjwfobtjrepldlmwhauiurzhbpyxsbueugddmdfindxsdjddqamwbptozzmobugnpezxyxdopripljdwnogjgrjwjfbugdkqrjwzjvavsdmgvspnzcgcjzxauqxqljmfgrtyohfppbmprmexiirvlmymxzyciaraihbwihvahyaciv"),
	// 				SQLDevWebURL: to.Ptr("pktklsvlakmblcakipxy"),
	// 			},
	// 			DataSafeStatus: to.Ptr(armoracledatabase.DataSafeStatusTypeRegistering),
	// 			DatabaseEdition: to.Ptr(armoracledatabase.DatabaseEditionTypeEnterpriseEdition),
	// 			AutonomousDatabaseID: to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/rg000/providers/Oracle.Database/autonomousDatabases/databasedb1"),
	// 			InMemoryAreaInGbs: to.Ptr[int32](29),
	// 			NextLongTermBackupTimeStamp: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2025-08-01T04:32:58.722Z"); return t}()),
	// 			LongTermBackupSchedule: &armoracledatabase.LongTermBackUpScheduleDetails{
	// 				RepeatCadence: to.Ptr(armoracledatabase.RepeatCadenceTypeOneTime),
	// 				TimeOfBackup: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2025-08-01T04:32:58.715Z"); return t}()),
	// 				RetentionPeriodInDays: to.Ptr[int32](188),
	// 				IsDisabled: to.Ptr(true),
	// 			},
	// 			IsPreview: to.Ptr(true),
	// 			LocalAdgAutoFailoverMaxDataLossLimit: to.Ptr[int32](1759),
	// 			MemoryPerOracleComputeUnitInGbs: to.Ptr[int32](17),
	// 			OpenMode: to.Ptr(armoracledatabase.OpenModeTypeReadOnly),
	// 			OperationsInsightsStatus: to.Ptr(armoracledatabase.OperationsInsightsStatusTypeEnabling),
	// 			PermissionLevel: to.Ptr(armoracledatabase.PermissionLevelTypeRestricted),
	// 			PrivateEndpoint: to.Ptr("zsknxwclpifygotuivnzkyy"),
	// 			ProvisionableCpus: []*int32{
	// 				to.Ptr[int32](11),
	// 			},
	// 			Role: to.Ptr(armoracledatabase.RoleTypePrimary),
	// 			ServiceConsoleURL: to.Ptr("vyqingzejychumpyufkkiskxhxtfdqhnkugercwlzgakttvdgkrxckvqkxdxlrqpgqosgobgjzyfdewpvhqthefbhtbkxeocreutrfbwmxnfircxsyevouxqyprlxqnmwvepamsylfibuppyslcxobxyynunowjqzupsmkeuuvkctrywubqafaorernjupfslwdlemro"),
	// 			SQLWebDeveloperURL: to.Ptr("ljdauohhvgrrnnzuuauxcuehjmugbhyqszoqcrwiwqnbuozzccqpizilcijojlnyhljxcorelkqldumfnzuljhpwqcaymbdyhvokpbqqkwrarqfrobbzsfbacdtqprrwnuqwrphqlqzilyoyehjfclemrfgylxgawydpflybcbdptzvlukuqhvtgrtaahpgkwymrfellwpbaklxllpbhtkyvlkqnumnsicpaknacvnlqqiyvwwxusjrzqthptckfuyjpferpwszwargimrpqjbigszibkukbdqzctyvktqzrgmhooimbuiblruulhrumetcllofxpqtjlongqtxtnpgfxojlnkkzwiqxrksqeepzqcqudimxtsthqljievdfhbzraluasdwaenmnipdgsnkxeqrlpygcggsfgsjqdxaxqagvoamckaosdzzltrjqlxyxbiaifrtjcnboziaweiyqenlafpchpjxxolvmsseubbaedachwgzectncatkeihzvdncmmhhwgravfcezhcjbhlvopzbnmtaytzadgdszsxpvygjewkyksmdyzepmdjqbkrakuaolveenpngakvazigbxoihfepvebfzpdfdmqrpyqgsdaraifdtnyopibqjavwhffvpowizaskrjosdpivqsgalwypptcwrfscpaqarlnjjzedjhutykdlgxnmmdmrbovscpvbwoeimqsfmiiyxewjldifllcqbmcpoixhufxbptbjkzsvmxurdzjksqirvvhejsjahvtohzsnxkxnmdgkgprwygcnpkxpgrnurnujwdtgkquzkcaanpaamhbbloywlzftxdrxzuhxdxudixgzuyckwkudtzcwdcnxqwdsojyefojusbfjftrmshziassecmgluwvcmwkcpurxajmwvbfgalhhnbebovzulefrdmhepjzqicqnilorzrtbqhemnxgkifxjjeksokqnezkekqiotwthuocqehxfwazqqonwpisrmapjjbwrrrorzepqcgjhfurxbmsfhvnnlzymavjdmfwhehhvqjdrccgabtbqkceqervrztnmfhjgjcvdeccksykspvtvgldhwuwtgobygzhdomdzthrbbhoqnbxfaamrcznmqegfbswuhypgsivoylcvtcyccvsbsxzgxqeqdslytyezyzwtokvivbvwrohcaselsenmzfevvrjkpeyymjiaegybeumjiggaszdwcwqzispeobhysxameswplkdcwhgdmjplexxkbxdmardfisbaplwtsqpmtachrrtsakzhpzwtwutnmcsuehstovmdxntvpzrzwmkms"),
	// 			SupportedRegionsToCloneTo: []*string{
	// 				to.Ptr("germancywestcentral"),
	// 			},
	// 			TimeDataGuardRoleChanged: to.Ptr("exsyrzikvlzvulmkpjxxetftlanim"),
	// 			TimeDeletionOfFreeAutonomousDatabase: to.Ptr("jtigszni"),
	// 			TimeLocalDataGuardEnabled: to.Ptr("rxmqyrqrdpfvleeer"),
	// 			TimeOfLastFailover: to.Ptr("vpcasufezytnkepvpibgqckn"),
	// 			TimeOfLastRefresh: to.Ptr("tqnkkzisphpiqapurwmpdlb"),
	// 			TimeOfLastRefreshPoint: to.Ptr("jfzhrbodayonnuwacgvwhovjgno"),
	// 			TimeOfLastSwitchover: to.Ptr("uvpwuwthnnbzmdmteqzboaah"),
	// 			TimeReclamationOfFreeAutonomousDatabase: to.Ptr("kekqxlbxjsehiretiq"),
	// 			UsedDataStorageSizeInGbs: to.Ptr[int32](13),
	// 			UsedDataStorageSizeInTbs: to.Ptr[int32](16),
	// 			Ocid: to.Ptr("ocid1..aaaaa"),
	// 			BackupRetentionPeriodInDays: to.Ptr[int32](1),
	// 			WhitelistedIPs: []*string{
	// 				to.Ptr("1.1.1.1"),
	// 				to.Ptr("1.1.1.0/24"),
	// 				to.Ptr("1.1.2.25"),
	// 			},
	// 		},
	// 		Location: to.Ptr("eastus"),
	// 		Tags: map[string]*string{
	// 		},
	// 		ID: to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/rg000/providers/Oracle.Database/autonomousDatabases/databasedb1"),
	// 		Name: to.Ptr("databasedb1"),
	// 		Type: to.Ptr("Oracle.Database/autonomousDatabases"),
	// 		SystemData: &armoracledatabase.SystemData{
	// 			CreatedBy: to.Ptr("sqehacivpuim"),
	// 			CreatedByType: to.Ptr(armoracledatabase.CreatedByTypeUser),
	// 			CreatedAt: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2025-08-01T04:32:58.716Z"); return t}()),
	// 			LastModifiedBy: to.Ptr("axrqfdkqylvjv"),
	// 			LastModifiedByType: to.Ptr(armoracledatabase.CreatedByTypeUser),
	// 			LastModifiedAt: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2025-08-01T04:32:58.716Z"); return t}()),
	// 		},
	// 	},
	// }
}

// Generated from example definition: 2025-09-01/autonomousDatabase_restore.json
func ExampleAutonomousDatabasesClient_BeginRestore_autonomousDatabasesRestore() {
	cred, err := azidentity.NewDefaultAzureCredential(nil)
	if err != nil {
		log.Fatalf("failed to obtain a credential: %v", err)
	}
	ctx := context.Background()
	clientFactory, err := armoracledatabase.NewClientFactory("00000000-0000-0000-0000-000000000000", cred, nil)
	if err != nil {
		log.Fatalf("failed to create client: %v", err)
	}
	poller, err := clientFactory.NewAutonomousDatabasesClient().BeginRestore(ctx, "rg000", "databasedb1", armoracledatabase.RestoreAutonomousDatabaseDetails{
		Timestamp: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2024-04-23T00:00:00.000Z"); return t }()),
	}, nil)
	if err != nil {
		log.Fatalf("failed to finish the request: %v", err)
	}
	res, err := poller.PollUntilDone(ctx, nil)
	if err != nil {
		log.Fatalf("failed to pull the result: %v", err)
	}
	// You could use response here. We use blank identifier for just demo purposes.
	_ = res
	// If the HTTP response code is 200 as defined in example definition, your response structure would look as follows. Please pay attention that all the values in the output are fake values for just demo purposes.
	// res = armoracledatabase.AutonomousDatabasesClientRestoreResponse{
	// 	AutonomousDatabase: &armoracledatabase.AutonomousDatabase{
	// 		ID: to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/rg000/providers/Oracle.Database/autonomousDatabases/databasedb1"),
	// 		Type: to.Ptr("Oracle.Database/autonomousDatabases"),
	// 		Location: to.Ptr("eastus"),
	// 		Tags: map[string]*string{
	// 			"tagK1": to.Ptr("tagV1"),
	// 		},
	// 		Properties: &armoracledatabase.AutonomousDatabaseProperties{
	// 			AutonomousDatabaseID: to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/rg000/providers/Oracle.Database/autonomousDatabases/databasedb1"),
	// 			AutonomousMaintenanceScheduleType: to.Ptr(armoracledatabase.AutonomousMaintenanceScheduleTypeRegular),
	// 			BackupRetentionPeriodInDays: to.Ptr[int32](60),
	// 			CharacterSet: to.Ptr("AL32UTF8"),
	// 			NcharacterSet: to.Ptr("AL16UTF16"),
	// 			ComputeCount: to.Ptr[float32](2),
	// 			ComputeModel: to.Ptr(armoracledatabase.ComputeModelECPU),
	// 			CPUCoreCount: to.Ptr[int32](1),
	// 			DataStorageSizeInGbs: to.Ptr[int32](1024),
	// 			DataStorageSizeInTbs: to.Ptr[int32](1),
	// 			DatabaseEdition: to.Ptr(armoracledatabase.DatabaseEditionTypeEnterpriseEdition),
	// 			DataBaseType: to.Ptr(armoracledatabase.DataBaseTypeRegular),
	// 			DbVersion: to.Ptr("18.4.0.0"),
	// 			DisplayName: to.Ptr("example_autonomous_databasedb1"),
	// 			IsAutoScalingEnabled: to.Ptr(false),
	// 			IsAutoScalingForStorageEnabled: to.Ptr(false),
	// 			IsLocalDataGuardEnabled: to.Ptr(false),
	// 			IsMtlsConnectionRequired: to.Ptr(true),
	// 			LicenseModel: to.Ptr(armoracledatabase.LicenseModelBringYourOwnLicense),
	// 			LifecycleState: to.Ptr(armoracledatabase.AutonomousDatabaseLifecycleStateRestoreInProgress),
	// 			LifecycleDetails: to.Ptr(""),
	// 			NextLongTermBackupTimeStamp: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2024-04-24T21:03:41.000Z"); return t}()),
	// 			LongTermBackupSchedule: &armoracledatabase.LongTermBackUpScheduleDetails{
	// 				RepeatCadence: to.Ptr(armoracledatabase.RepeatCadenceTypeWeekly),
	// 				RetentionPeriodInDays: to.Ptr[int32](365),
	// 				TimeOfBackup: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2024-04-21T21:03:41.309Z"); return t}()),
	// 			},
	// 			SubnetID: to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/rg000/providers/Microsoft.Network/virtualNetworks/vnet1/subnets/subnet1"),
	// 			VnetID: to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/rg000/providers/Microsoft.Network/virtualNetworks/vnet1"),
	// 			ProvisioningState: to.Ptr(armoracledatabase.AzureResourceProvisioningStateSucceeded),
	// 			OciURL: to.Ptr("https://fake"),
	// 			TimeCreated: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2024-01-09T20:44:09.466Z"); return t}()),
	// 			Ocid: to.Ptr("ocid1..aaaaa"),
	// 			WhitelistedIPs: []*string{
	// 				to.Ptr("1.1.1.1"),
	// 				to.Ptr("1.1.1.0/24"),
	// 				to.Ptr("1.1.2.25"),
	// 			},
	// 		},
	// 	},
	// }
}

// Generated from example definition: 2025-09-01/AutonomousDatabases_Shrink_MaximumSet_Gen.json
func ExampleAutonomousDatabasesClient_BeginShrink() {
	cred, err := azidentity.NewDefaultAzureCredential(nil)
	if err != nil {
		log.Fatalf("failed to obtain a credential: %v", err)
	}
	ctx := context.Background()
	clientFactory, err := armoracledatabase.NewClientFactory("00000000-0000-0000-0000-000000000000", cred, nil)
	if err != nil {
		log.Fatalf("failed to create client: %v", err)
	}
	poller, err := clientFactory.NewAutonomousDatabasesClient().BeginShrink(ctx, "rgopenapi", "database1", nil)
	if err != nil {
		log.Fatalf("failed to finish the request: %v", err)
	}
	res, err := poller.PollUntilDone(ctx, nil)
	if err != nil {
		log.Fatalf("failed to pull the result: %v", err)
	}
	// You could use response here. We use blank identifier for just demo purposes.
	_ = res
	// If the HTTP response code is 200 as defined in example definition, your response structure would look as follows. Please pay attention that all the values in the output are fake values for just demo purposes.
	// res = armoracledatabase.AutonomousDatabasesClientShrinkResponse{
	// 	AutonomousDatabase: &armoracledatabase.AutonomousDatabase{
	// 		Properties: &armoracledatabase.AutonomousDatabaseProperties{
	// 			DataBaseType: to.Ptr(armoracledatabase.DataBaseTypeRegular),
	// 			DisplayName: to.Ptr("example_autonomous_databasedb1"),
	// 			ComputeModel: to.Ptr(armoracledatabase.ComputeModelECPU),
	// 			ComputeCount: to.Ptr[float32](2),
	// 			DataStorageSizeInTbs: to.Ptr[int32](1),
	// 			DbVersion: to.Ptr("18.4.0.0"),
	// 			CharacterSet: to.Ptr("AL32UTF8"),
	// 			NcharacterSet: to.Ptr("AL16UTF16"),
	// 			SubnetID: to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/rg000/providers/Microsoft.Network/virtualNetworks/vnet1/subnets/subnet1"),
	// 			VnetID: to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/rg000/providers/Microsoft.Network/virtualNetworks/vnet1"),
	// 			AutonomousMaintenanceScheduleType: to.Ptr(armoracledatabase.AutonomousMaintenanceScheduleTypeRegular),
	// 			CPUCoreCount: to.Ptr[int32](1),
	// 			CustomerContacts: []*armoracledatabase.CustomerContact{
	// 				{
	// 					Email: to.Ptr("agyiqecugrloatgwpvmilmvutcnyjpxzhbilhhqfvqqblfgursqelzjjnwnmpfstitmcgkovzxnstiqqwjnhwwaufbnkebpqxlqwmfnmtlkgkoxcnjwcnfqbdtokhjalagxphkuiwxtxrzuipokiuczmuwoqoebkjvhytlhtxzshwsdoywluoggznuyuozqibiwdgwqbgnyogysdjpvlowmvuvq"),
	// 				},
	// 			},
	// 			DataStorageSizeInGbs: to.Ptr[int32](1024),
	// 			DbWorkload: to.Ptr(armoracledatabase.WorkloadTypeOLTP),
	// 			IsAutoScalingEnabled: to.Ptr(true),
	// 			IsAutoScalingForStorageEnabled: to.Ptr(true),
	// 			PeerDbIDs: []*string{
	// 				to.Ptr("gpubz"),
	// 			},
	// 			IsLocalDataGuardEnabled: to.Ptr(true),
	// 			IsRemoteDataGuardEnabled: to.Ptr(true),
	// 			LocalDisasterRecoveryType: to.Ptr(armoracledatabase.DisasterRecoveryTypeAdg),
	// 			TimeDisasterRecoveryRoleChanged: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2025-08-01T04:32:58.722Z"); return t}()),
	// 			RemoteDisasterRecoveryConfiguration: &armoracledatabase.DisasterRecoveryConfigurationDetails{
	// 				DisasterRecoveryType: to.Ptr(armoracledatabase.DisasterRecoveryTypeAdg),
	// 				TimeSnapshotStandbyEnabledTill: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2025-08-01T04:32:58.715Z"); return t}()),
	// 				IsSnapshotStandby: to.Ptr(true),
	// 				IsReplicateAutomaticBackups: to.Ptr(true),
	// 			},
	// 			LocalStandbyDb: &armoracledatabase.AutonomousDatabaseStandbySummary{
	// 				LagTimeInSeconds: to.Ptr[int32](13),
	// 				LifecycleState: to.Ptr(armoracledatabase.AutonomousDatabaseLifecycleStateProvisioning),
	// 				LifecycleDetails: to.Ptr("zoiyaaibuuhm"),
	// 				TimeDataGuardRoleChanged: to.Ptr("inggk"),
	// 				TimeDisasterRecoveryRoleChanged: to.Ptr("q"),
	// 			},
	// 			FailedDataRecoveryInSeconds: to.Ptr[int32](27),
	// 			IsMtlsConnectionRequired: to.Ptr(true),
	// 			LicenseModel: to.Ptr(armoracledatabase.LicenseModelBringYourOwnLicense),
	// 			LifecycleDetails: to.Ptr("success"),
	// 			ProvisioningState: to.Ptr(armoracledatabase.AzureResourceProvisioningStateSucceeded),
	// 			LifecycleState: to.Ptr(armoracledatabase.AutonomousDatabaseLifecycleState("Succeeded")),
	// 			ScheduledOperationsList: []*armoracledatabase.ScheduledOperationsType{
	// 				{
	// 					DayOfWeek: &armoracledatabase.DayOfWeek{
	// 						Name: to.Ptr(armoracledatabase.DayOfWeekNameMonday),
	// 					},
	// 					ScheduledStartTime: to.Ptr("lwwvkazgmfremfwhckfb"),
	// 					ScheduledStopTime: to.Ptr("hjwagzxijpiaogulmnmbuqakpqxhkjvaypjqnvbvtjddc"),
	// 				},
	// 			},
	// 			PrivateEndpointIP: to.Ptr("rdlbhw"),
	// 			PrivateEndpointLabel: to.Ptr("worwqllbglhyakksevparfuaivc"),
	// 			OciURL: to.Ptr("https://fake"),
	// 			TimeCreated: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2024-01-09T20:44:09.466Z"); return t}()),
	// 			TimeMaintenanceBegin: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2025-08-01T04:32:58.722Z"); return t}()),
	// 			TimeMaintenanceEnd: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2025-08-01T04:32:58.722Z"); return t}()),
	// 			ActualUsedDataStorageSizeInTbs: to.Ptr[float64](8),
	// 			AllocatedStorageSizeInTbs: to.Ptr[float64](20),
	// 			ApexDetails: &armoracledatabase.ApexDetailsType{
	// 				ApexVersion: to.Ptr("scvpjwygbzqzevlztyfvqiaom"),
	// 				OrdsVersion: to.Ptr("djlwvhpipimxaguklshpppjrzasbk"),
	// 			},
	// 			AvailableUpgradeVersions: []*string{
	// 				to.Ptr("dgvzwolnmulrlwzzazgqm"),
	// 			},
	// 			ConnectionStrings: &armoracledatabase.ConnectionStringType{
	// 				AllConnectionStrings: &armoracledatabase.AllConnectionStringType{
	// 					High: to.Ptr("exdinleextbcjinutlkvnqyxhvandtihncykjzrhfdhfrxdarny"),
	// 					Low: to.Ptr("vurudxqtummqqbnidwthmsqgujufjxwfnejdpuxkgyoxlgqhcgsfjcpzaqeioslpehjfashipdsjhkrpdobstvgxsqrgvcrpbiiabhvymdsylqsjedrimqhtttmszlaqyukopuufbtkbtwgdydrvnvkcdqmphwzpcjxlgefzrdajyczzjdpuzvhqvupbvrpvqhzoaalg"),
	// 					Medium: to.Ptr("ishtubsuzgwtkfdqfgyxjlhehiokdvjfhwqhvmgtuksboshulroytcnubtrxxjbgoutftpzeavbldsoqjwmamgfwevhppyyeckythirzvaqujrjaiqnpyvycakhwgtuftmuxavdgdvbqxgsdqwbnqzmrzymwiydhxekenbweaghgvyveuysxqmovwodzwwfrxhtlcegekjk"),
	// 				},
	// 				Dedicated: to.Ptr("okoggzbidoaknwikuqpvepxvvcseukouprpfrldmakztkleeizbjf"),
	// 				High: to.Ptr("pggylyrivfn"),
	// 				Low: to.Ptr("zrjsbtdbfluaipbzgcvvhyuvqoczjneihaiftkfmuvvyoldslgvvpwthieyrcoxvh"),
	// 				Medium: to.Ptr("ebjnwenxvyeinsabrppychqbcawfxgplfacbsizltwfhpdafbkawopppqsxemlnmrbiqlstjupgdmpfcyyxgofmitbdiarrpprhntntqqjklseigycfcpmmlqiznxzliserjppmgfjatnmtbdxqtlbmrmpfbpoxmyffkkoptpayigeeefmqczroouqjxchswffywpsmyqohbyaclhsrwgqyuuyynvxyyzkche"),
	// 				Profiles: []*armoracledatabase.ProfileType{
	// 					{
	// 						ConsumerGroup: to.Ptr(armoracledatabase.ConsumerGroupHigh),
	// 						DisplayName: to.Ptr("mqqdgidxuovxhcwrkanybxzplautekarsxbcbzlkikpmmvjrdrrkncbamdtcuksplamigrdkydjbzeurbmjgehgppovxqhuzasduwptrlyaurzszzqpztckhpdniepaglzeublbwffxebfespqyfpljlutregvlzzjo"),
	// 						HostFormat: to.Ptr(armoracledatabase.HostFormatTypeFqdn),
	// 						IsRegional: to.Ptr(true),
	// 						Protocol: to.Ptr(armoracledatabase.ProtocolTypeTCP),
	// 						SessionMode: to.Ptr(armoracledatabase.SessionModeTypeDirect),
	// 						SyntaxFormat: to.Ptr(armoracledatabase.SyntaxFormatTypeLong),
	// 						TLSAuthentication: to.Ptr(armoracledatabase.TLSAuthenticationTypeServer),
	// 						Value: to.Ptr("bdrnwqpzbbzdipqqhnroxiuewqg"),
	// 					},
	// 				},
	// 			},
	// 			ConnectionUrls: &armoracledatabase.ConnectionURLType{
	// 				ApexURL: to.Ptr("epnebmudvzijxrfgabsdjewqfotqjmnxvokfhlyklhvtrjpprnqujthmceuhpfuumcbfxktppfguqduzkukxqkofoyyycljjtruyjtoiesxlrwwzonozaxetzrkpmzwasyvryvkryawxxf"),
	// 				DatabaseTransformsURL: to.Ptr("hujiemysucgdgtasazsdtwnxmtjppugunrqnzfzneatukuyzvkfseusjaxrourznsrwxjbvzfansdcyfxnvcyghl"),
	// 				GraphStudioURL: to.Ptr("bucnwmwixwemqqtoozfclfzqenskkyssvcatwbptsezpzdwgnaexgxutsvaibnkawyohqklnktzlhdbhbstm"),
	// 				MachineLearningNotebookURL: to.Ptr("vfhnqsrabxcrjnpqaqkgnpwhxffsqkrgcijdkkvnaoangzkcbgwklufujhmlgydxueybugxzgokxbbappdslttpdthhbmxrgcicqzyjyahjeiqopuglgbjfbhufuvsogquelagbjtyotwhmecwupooitcaftldxjycgfnlilrnicqjxnsucieftadjbvptzltmgqkxhttfkkbutaxvtfzbvbbxbmpxeeyfethpofnmbbqbtlqvnfgelvtjizckgixpptkilcvrntknusvppgnobokjpepynndswcqsnewhfnlxgmownfwfnokhbqulzyuessvxxtcdcnmumbbpjchmjbvjecbbinjolmuoaixzunawlxnoqbpzkczdsubpqpdltnfydwevearrdirzaszsudcxaspozeop"),
	// 				MongoDbURL: to.Ptr("dzmsqtcgsrdgwjlnrfmzcqcrkdqwmjrccxsszwdgpcygywnuurklwthgonxcnwaqcgzoexnaanwzsqwemcijuzxqbrkpvydizjraicgnspizwwnwureyey"),
	// 				OrdsURL: to.Ptr("lmqdgziantbczaneiqxopnaexcroelkbcgggjipzqfhoduwqodoyeghzjyuyhesewopbujxnoiziidhslxdawrfayjvxzjwfobtjrepldlmwhauiurzhbpyxsbueugddmdfindxsdjddqamwbptozzmobugnpezxyxdopripljdwnogjgrjwjfbugdkqrjwzjvavsdmgvspnzcgcjzxauqxqljmfgrtyohfppbmprmexiirvlmymxzyciaraihbwihvahyaciv"),
	// 				SQLDevWebURL: to.Ptr("pktklsvlakmblcakipxy"),
	// 			},
	// 			DataSafeStatus: to.Ptr(armoracledatabase.DataSafeStatusTypeRegistering),
	// 			DatabaseEdition: to.Ptr(armoracledatabase.DatabaseEditionTypeEnterpriseEdition),
	// 			AutonomousDatabaseID: to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/rg000/providers/Oracle.Database/autonomousDatabases/databasedb1"),
	// 			InMemoryAreaInGbs: to.Ptr[int32](29),
	// 			NextLongTermBackupTimeStamp: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2025-08-01T04:32:58.722Z"); return t}()),
	// 			LongTermBackupSchedule: &armoracledatabase.LongTermBackUpScheduleDetails{
	// 				RepeatCadence: to.Ptr(armoracledatabase.RepeatCadenceTypeOneTime),
	// 				TimeOfBackup: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2025-08-01T04:32:58.715Z"); return t}()),
	// 				RetentionPeriodInDays: to.Ptr[int32](188),
	// 				IsDisabled: to.Ptr(true),
	// 			},
	// 			IsPreview: to.Ptr(true),
	// 			LocalAdgAutoFailoverMaxDataLossLimit: to.Ptr[int32](1759),
	// 			MemoryPerOracleComputeUnitInGbs: to.Ptr[int32](17),
	// 			OpenMode: to.Ptr(armoracledatabase.OpenModeTypeReadOnly),
	// 			OperationsInsightsStatus: to.Ptr(armoracledatabase.OperationsInsightsStatusTypeEnabling),
	// 			PermissionLevel: to.Ptr(armoracledatabase.PermissionLevelTypeRestricted),
	// 			PrivateEndpoint: to.Ptr("zsknxwclpifygotuivnzkyy"),
	// 			ProvisionableCpus: []*int32{
	// 				to.Ptr[int32](11),
	// 			},
	// 			Role: to.Ptr(armoracledatabase.RoleTypePrimary),
	// 			ServiceConsoleURL: to.Ptr("vyqingzejychumpyufkkiskxhxtfdqhnkugercwlzgakttvdgkrxckvqkxdxlrqpgqosgobgjzyfdewpvhqthefbhtbkxeocreutrfbwmxnfircxsyevouxqyprlxqnmwvepamsylfibuppyslcxobxyynunowjqzupsmkeuuvkctrywubqafaorernjupfslwdlemro"),
	// 			SQLWebDeveloperURL: to.Ptr("ljdauohhvgrrnnzuuauxcuehjmugbhyqszoqcrwiwqnbuozzccqpizilcijojlnyhljxcorelkqldumfnzuljhpwqcaymbdyhvokpbqqkwrarqfrobbzsfbacdtqprrwnuqwrphqlqzilyoyehjfclemrfgylxgawydpflybcbdptzvlukuqhvtgrtaahpgkwymrfellwpbaklxllpbhtkyvlkqnumnsicpaknacvnlqqiyvwwxusjrzqthptckfuyjpferpwszwargimrpqjbigszibkukbdqzctyvktqzrgmhooimbuiblruulhrumetcllofxpqtjlongqtxtnpgfxojlnkkzwiqxrksqeepzqcqudimxtsthqljievdfhbzraluasdwaenmnipdgsnkxeqrlpygcggsfgsjqdxaxqagvoamckaosdzzltrjqlxyxbiaifrtjcnboziaweiyqenlafpchpjxxolvmsseubbaedachwgzectncatkeihzvdncmmhhwgravfcezhcjbhlvopzbnmtaytzadgdszsxpvygjewkyksmdyzepmdjqbkrakuaolveenpngakvazigbxoihfepvebfzpdfdmqrpyqgsdaraifdtnyopibqjavwhffvpowizaskrjosdpivqsgalwypptcwrfscpaqarlnjjzedjhutykdlgxnmmdmrbovscpvbwoeimqsfmiiyxewjldifllcqbmcpoixhufxbptbjkzsvmxurdzjksqirvvhejsjahvtohzsnxkxnmdgkgprwygcnpkxpgrnurnujwdtgkquzkcaanpaamhbbloywlzftxdrxzuhxdxudixgzuyckwkudtzcwdcnxqwdsojyefojusbfjftrmshziassecmgluwvcmwkcpurxajmwvbfgalhhnbebovzulefrdmhepjzqicqnilorzrtbqhemnxgkifxjjeksokqnezkekqiotwthuocqehxfwazqqonwpisrmapjjbwrrrorzepqcgjhfurxbmsfhvnnlzymavjdmfwhehhvqjdrccgabtbqkceqervrztnmfhjgjcvdeccksykspvtvgldhwuwtgobygzhdomdzthrbbhoqnbxfaamrcznmqegfbswuhypgsivoylcvtcyccvsbsxzgxqeqdslytyezyzwtokvivbvwrohcaselsenmzfevvrjkpeyymjiaegybeumjiggaszdwcwqzispeobhysxameswplkdcwhgdmjplexxkbxdmardfisbaplwtsqpmtachrrtsakzhpzwtwutnmcsuehstovmdxntvpzrzwmkms"),
	// 			SupportedRegionsToCloneTo: []*string{
	// 				to.Ptr("germancywestcentral"),
	// 			},
	// 			TimeDataGuardRoleChanged: to.Ptr("exsyrzikvlzvulmkpjxxetftlanim"),
	// 			TimeDeletionOfFreeAutonomousDatabase: to.Ptr("jtigszni"),
	// 			TimeLocalDataGuardEnabled: to.Ptr("rxmqyrqrdpfvleeer"),
	// 			TimeOfLastFailover: to.Ptr("vpcasufezytnkepvpibgqckn"),
	// 			TimeOfLastRefresh: to.Ptr("tqnkkzisphpiqapurwmpdlb"),
	// 			TimeOfLastRefreshPoint: to.Ptr("jfzhrbodayonnuwacgvwhovjgno"),
	// 			TimeOfLastSwitchover: to.Ptr("uvpwuwthnnbzmdmteqzboaah"),
	// 			TimeReclamationOfFreeAutonomousDatabase: to.Ptr("kekqxlbxjsehiretiq"),
	// 			UsedDataStorageSizeInGbs: to.Ptr[int32](13),
	// 			UsedDataStorageSizeInTbs: to.Ptr[int32](16),
	// 			Ocid: to.Ptr("ocid1..aaaaa"),
	// 			BackupRetentionPeriodInDays: to.Ptr[int32](1),
	// 			WhitelistedIPs: []*string{
	// 				to.Ptr("1.1.1.1"),
	// 				to.Ptr("1.1.1.0/24"),
	// 				to.Ptr("1.1.2.25"),
	// 			},
	// 		},
	// 		Location: to.Ptr("eastus"),
	// 		Tags: map[string]*string{
	// 		},
	// 		ID: to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/rg000/providers/Oracle.Database/autonomousDatabases/databasedb1"),
	// 		Name: to.Ptr("databasedb1"),
	// 		Type: to.Ptr("Oracle.Database/autonomousDatabases"),
	// 		SystemData: &armoracledatabase.SystemData{
	// 			CreatedBy: to.Ptr("sqehacivpuim"),
	// 			CreatedByType: to.Ptr(armoracledatabase.CreatedByTypeUser),
	// 			CreatedAt: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2025-08-01T04:32:58.716Z"); return t}()),
	// 			LastModifiedBy: to.Ptr("axrqfdkqylvjv"),
	// 			LastModifiedByType: to.Ptr(armoracledatabase.CreatedByTypeUser),
	// 			LastModifiedAt: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2025-08-01T04:32:58.716Z"); return t}()),
	// 		},
	// 	},
	// }
}

// Generated from example definition: 2025-09-01/AutonomousDatabases_Switchover_MaximumSet_Gen.json
func ExampleAutonomousDatabasesClient_BeginSwitchover_performSwitchoverActionOnAutonomousDatabaseGeneratedByMaximumSetRule() {
	cred, err := azidentity.NewDefaultAzureCredential(nil)
	if err != nil {
		log.Fatalf("failed to obtain a credential: %v", err)
	}
	ctx := context.Background()
	clientFactory, err := armoracledatabase.NewClientFactory("00000000-0000-0000-0000-000000000000", cred, nil)
	if err != nil {
		log.Fatalf("failed to create client: %v", err)
	}
	poller, err := clientFactory.NewAutonomousDatabasesClient().BeginSwitchover(ctx, "rgopenapi", "databasedb1", armoracledatabase.PeerDbDetails{
		PeerDbID:       to.Ptr("peerDbId"),
		PeerDbOcid:     to.Ptr("yozpqyefqhirkybmzwgoidyl"),
		PeerDbLocation: to.Ptr("cxlzbzbfzi"),
	}, nil)
	if err != nil {
		log.Fatalf("failed to finish the request: %v", err)
	}
	res, err := poller.PollUntilDone(ctx, nil)
	if err != nil {
		log.Fatalf("failed to pull the result: %v", err)
	}
	// You could use response here. We use blank identifier for just demo purposes.
	_ = res
	// If the HTTP response code is 200 as defined in example definition, your response structure would look as follows. Please pay attention that all the values in the output are fake values for just demo purposes.
	// res = armoracledatabase.AutonomousDatabasesClientSwitchoverResponse{
	// 	AutonomousDatabase: &armoracledatabase.AutonomousDatabase{
	// 		Properties: &armoracledatabase.AutonomousDatabaseProperties{
	// 			DataBaseType: to.Ptr(armoracledatabase.DataBaseTypeRegular),
	// 			DisplayName: to.Ptr("example_autonomous_databasedb1"),
	// 			ComputeModel: to.Ptr(armoracledatabase.ComputeModelECPU),
	// 			ComputeCount: to.Ptr[float32](2),
	// 			DataStorageSizeInTbs: to.Ptr[int32](1),
	// 			DbVersion: to.Ptr("18.4.0.0"),
	// 			CharacterSet: to.Ptr("AL32UTF8"),
	// 			NcharacterSet: to.Ptr("AL16UTF16"),
	// 			SubnetID: to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/rg000/providers/Microsoft.Network/virtualNetworks/vnet1/subnets/subnet1"),
	// 			VnetID: to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/rg000/providers/Microsoft.Network/virtualNetworks/vnet1"),
	// 			AutonomousMaintenanceScheduleType: to.Ptr(armoracledatabase.AutonomousMaintenanceScheduleTypeRegular),
	// 			CPUCoreCount: to.Ptr[int32](1),
	// 			CustomerContacts: []*armoracledatabase.CustomerContact{
	// 				{
	// 					Email: to.Ptr("agyiqecugrloatgwpvmilmvutcnyjpxzhbilhhqfvqqblfgursqelzjjnwnmpfstitmcgkovzxnstiqqwjnhwwaufbnkebpqxlqwmfnmtlkgkoxcnjwcnfqbdtokhjalagxphkuiwxtxrzuipokiuczmuwoqoebkjvhytlhtxzshwsdoywluoggznuyuozqibiwdgwqbgnyogysdjpvlowmvuvq"),
	// 				},
	// 			},
	// 			DataStorageSizeInGbs: to.Ptr[int32](1024),
	// 			DbWorkload: to.Ptr(armoracledatabase.WorkloadTypeOLTP),
	// 			IsAutoScalingEnabled: to.Ptr(true),
	// 			IsAutoScalingForStorageEnabled: to.Ptr(true),
	// 			PeerDbIDs: []*string{
	// 				to.Ptr("gpubz"),
	// 			},
	// 			IsLocalDataGuardEnabled: to.Ptr(true),
	// 			IsRemoteDataGuardEnabled: to.Ptr(true),
	// 			LocalDisasterRecoveryType: to.Ptr(armoracledatabase.DisasterRecoveryTypeAdg),
	// 			TimeDisasterRecoveryRoleChanged: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2025-08-01T04:32:58.722Z"); return t}()),
	// 			RemoteDisasterRecoveryConfiguration: &armoracledatabase.DisasterRecoveryConfigurationDetails{
	// 				DisasterRecoveryType: to.Ptr(armoracledatabase.DisasterRecoveryTypeAdg),
	// 				TimeSnapshotStandbyEnabledTill: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2025-08-01T04:32:58.715Z"); return t}()),
	// 				IsSnapshotStandby: to.Ptr(true),
	// 				IsReplicateAutomaticBackups: to.Ptr(true),
	// 			},
	// 			LocalStandbyDb: &armoracledatabase.AutonomousDatabaseStandbySummary{
	// 				LagTimeInSeconds: to.Ptr[int32](13),
	// 				LifecycleState: to.Ptr(armoracledatabase.AutonomousDatabaseLifecycleStateProvisioning),
	// 				LifecycleDetails: to.Ptr("zoiyaaibuuhm"),
	// 				TimeDataGuardRoleChanged: to.Ptr("inggk"),
	// 				TimeDisasterRecoveryRoleChanged: to.Ptr("q"),
	// 			},
	// 			FailedDataRecoveryInSeconds: to.Ptr[int32](27),
	// 			IsMtlsConnectionRequired: to.Ptr(true),
	// 			LicenseModel: to.Ptr(armoracledatabase.LicenseModelBringYourOwnLicense),
	// 			LifecycleDetails: to.Ptr("success"),
	// 			ProvisioningState: to.Ptr(armoracledatabase.AzureResourceProvisioningStateSucceeded),
	// 			LifecycleState: to.Ptr(armoracledatabase.AutonomousDatabaseLifecycleState("Succeeded")),
	// 			ScheduledOperationsList: []*armoracledatabase.ScheduledOperationsType{
	// 				{
	// 					DayOfWeek: &armoracledatabase.DayOfWeek{
	// 						Name: to.Ptr(armoracledatabase.DayOfWeekNameMonday),
	// 					},
	// 					ScheduledStartTime: to.Ptr("lwwvkazgmfremfwhckfb"),
	// 					ScheduledStopTime: to.Ptr("hjwagzxijpiaogulmnmbuqakpqxhkjvaypjqnvbvtjddc"),
	// 				},
	// 			},
	// 			PrivateEndpointIP: to.Ptr("rdlbhw"),
	// 			PrivateEndpointLabel: to.Ptr("worwqllbglhyakksevparfuaivc"),
	// 			OciURL: to.Ptr("https://fake"),
	// 			TimeCreated: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2024-01-09T20:44:09.466Z"); return t}()),
	// 			TimeMaintenanceBegin: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2025-08-01T04:32:58.722Z"); return t}()),
	// 			TimeMaintenanceEnd: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2025-08-01T04:32:58.722Z"); return t}()),
	// 			ActualUsedDataStorageSizeInTbs: to.Ptr[float64](8),
	// 			AllocatedStorageSizeInTbs: to.Ptr[float64](20),
	// 			ApexDetails: &armoracledatabase.ApexDetailsType{
	// 				ApexVersion: to.Ptr("scvpjwygbzqzevlztyfvqiaom"),
	// 				OrdsVersion: to.Ptr("djlwvhpipimxaguklshpppjrzasbk"),
	// 			},
	// 			AvailableUpgradeVersions: []*string{
	// 				to.Ptr("dgvzwolnmulrlwzzazgqm"),
	// 			},
	// 			ConnectionStrings: &armoracledatabase.ConnectionStringType{
	// 				AllConnectionStrings: &armoracledatabase.AllConnectionStringType{
	// 					High: to.Ptr("exdinleextbcjinutlkvnqyxhvandtihncykjzrhfdhfrxdarny"),
	// 					Low: to.Ptr("vurudxqtummqqbnidwthmsqgujufjxwfnejdpuxkgyoxlgqhcgsfjcpzaqeioslpehjfashipdsjhkrpdobstvgxsqrgvcrpbiiabhvymdsylqsjedrimqhtttmszlaqyukopuufbtkbtwgdydrvnvkcdqmphwzpcjxlgefzrdajyczzjdpuzvhqvupbvrpvqhzoaalg"),
	// 					Medium: to.Ptr("ishtubsuzgwtkfdqfgyxjlhehiokdvjfhwqhvmgtuksboshulroytcnubtrxxjbgoutftpzeavbldsoqjwmamgfwevhppyyeckythirzvaqujrjaiqnpyvycakhwgtuftmuxavdgdvbqxgsdqwbnqzmrzymwiydhxekenbweaghgvyveuysxqmovwodzwwfrxhtlcegekjk"),
	// 				},
	// 				Dedicated: to.Ptr("okoggzbidoaknwikuqpvepxvvcseukouprpfrldmakztkleeizbjf"),
	// 				High: to.Ptr("pggylyrivfn"),
	// 				Low: to.Ptr("zrjsbtdbfluaipbzgcvvhyuvqoczjneihaiftkfmuvvyoldslgvvpwthieyrcoxvh"),
	// 				Medium: to.Ptr("ebjnwenxvyeinsabrppychqbcawfxgplfacbsizltwfhpdafbkawopppqsxemlnmrbiqlstjupgdmpfcyyxgofmitbdiarrpprhntntqqjklseigycfcpmmlqiznxzliserjppmgfjatnmtbdxqtlbmrmpfbpoxmyffkkoptpayigeeefmqczroouqjxchswffywpsmyqohbyaclhsrwgqyuuyynvxyyzkche"),
	// 				Profiles: []*armoracledatabase.ProfileType{
	// 					{
	// 						ConsumerGroup: to.Ptr(armoracledatabase.ConsumerGroupHigh),
	// 						DisplayName: to.Ptr("mqqdgidxuovxhcwrkanybxzplautekarsxbcbzlkikpmmvjrdrrkncbamdtcuksplamigrdkydjbzeurbmjgehgppovxqhuzasduwptrlyaurzszzqpztckhpdniepaglzeublbwffxebfespqyfpljlutregvlzzjo"),
	// 						HostFormat: to.Ptr(armoracledatabase.HostFormatTypeFqdn),
	// 						IsRegional: to.Ptr(true),
	// 						Protocol: to.Ptr(armoracledatabase.ProtocolTypeTCP),
	// 						SessionMode: to.Ptr(armoracledatabase.SessionModeTypeDirect),
	// 						SyntaxFormat: to.Ptr(armoracledatabase.SyntaxFormatTypeLong),
	// 						TLSAuthentication: to.Ptr(armoracledatabase.TLSAuthenticationTypeServer),
	// 						Value: to.Ptr("bdrnwqpzbbzdipqqhnroxiuewqg"),
	// 					},
	// 				},
	// 			},
	// 			ConnectionUrls: &armoracledatabase.ConnectionURLType{
	// 				ApexURL: to.Ptr("epnebmudvzijxrfgabsdjewqfotqjmnxvokfhlyklhvtrjpprnqujthmceuhpfuumcbfxktppfguqduzkukxqkofoyyycljjtruyjtoiesxlrwwzonozaxetzrkpmzwasyvryvkryawxxf"),
	// 				DatabaseTransformsURL: to.Ptr("hujiemysucgdgtasazsdtwnxmtjppugunrqnzfzneatukuyzvkfseusjaxrourznsrwxjbvzfansdcyfxnvcyghl"),
	// 				GraphStudioURL: to.Ptr("bucnwmwixwemqqtoozfclfzqenskkyssvcatwbptsezpzdwgnaexgxutsvaibnkawyohqklnktzlhdbhbstm"),
	// 				MachineLearningNotebookURL: to.Ptr("vfhnqsrabxcrjnpqaqkgnpwhxffsqkrgcijdkkvnaoangzkcbgwklufujhmlgydxueybugxzgokxbbappdslttpdthhbmxrgcicqzyjyahjeiqopuglgbjfbhufuvsogquelagbjtyotwhmecwupooitcaftldxjycgfnlilrnicqjxnsucieftadjbvptzltmgqkxhttfkkbutaxvtfzbvbbxbmpxeeyfethpofnmbbqbtlqvnfgelvtjizckgixpptkilcvrntknusvppgnobokjpepynndswcqsnewhfnlxgmownfwfnokhbqulzyuessvxxtcdcnmumbbpjchmjbvjecbbinjolmuoaixzunawlxnoqbpzkczdsubpqpdltnfydwevearrdirzaszsudcxaspozeop"),
	// 				MongoDbURL: to.Ptr("dzmsqtcgsrdgwjlnrfmzcqcrkdqwmjrccxsszwdgpcygywnuurklwthgonxcnwaqcgzoexnaanwzsqwemcijuzxqbrkpvydizjraicgnspizwwnwureyey"),
	// 				OrdsURL: to.Ptr("lmqdgziantbczaneiqxopnaexcroelkbcgggjipzqfhoduwqodoyeghzjyuyhesewopbujxnoiziidhslxdawrfayjvxzjwfobtjrepldlmwhauiurzhbpyxsbueugddmdfindxsdjddqamwbptozzmobugnpezxyxdopripljdwnogjgrjwjfbugdkqrjwzjvavsdmgvspnzcgcjzxauqxqljmfgrtyohfppbmprmexiirvlmymxzyciaraihbwihvahyaciv"),
	// 				SQLDevWebURL: to.Ptr("pktklsvlakmblcakipxy"),
	// 			},
	// 			DataSafeStatus: to.Ptr(armoracledatabase.DataSafeStatusTypeRegistering),
	// 			DatabaseEdition: to.Ptr(armoracledatabase.DatabaseEditionTypeEnterpriseEdition),
	// 			AutonomousDatabaseID: to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/rg000/providers/Oracle.Database/autonomousDatabases/databasedb1"),
	// 			InMemoryAreaInGbs: to.Ptr[int32](29),
	// 			NextLongTermBackupTimeStamp: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2025-08-01T04:32:58.722Z"); return t}()),
	// 			LongTermBackupSchedule: &armoracledatabase.LongTermBackUpScheduleDetails{
	// 				RepeatCadence: to.Ptr(armoracledatabase.RepeatCadenceTypeOneTime),
	// 				TimeOfBackup: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2025-08-01T04:32:58.715Z"); return t}()),
	// 				RetentionPeriodInDays: to.Ptr[int32](188),
	// 				IsDisabled: to.Ptr(true),
	// 			},
	// 			IsPreview: to.Ptr(true),
	// 			LocalAdgAutoFailoverMaxDataLossLimit: to.Ptr[int32](1759),
	// 			MemoryPerOracleComputeUnitInGbs: to.Ptr[int32](17),
	// 			OpenMode: to.Ptr(armoracledatabase.OpenModeTypeReadOnly),
	// 			OperationsInsightsStatus: to.Ptr(armoracledatabase.OperationsInsightsStatusTypeEnabling),
	// 			PermissionLevel: to.Ptr(armoracledatabase.PermissionLevelTypeRestricted),
	// 			PrivateEndpoint: to.Ptr("zsknxwclpifygotuivnzkyy"),
	// 			ProvisionableCpus: []*int32{
	// 				to.Ptr[int32](11),
	// 			},
	// 			Role: to.Ptr(armoracledatabase.RoleTypePrimary),
	// 			ServiceConsoleURL: to.Ptr("vyqingzejychumpyufkkiskxhxtfdqhnkugercwlzgakttvdgkrxckvqkxdxlrqpgqosgobgjzyfdewpvhqthefbhtbkxeocreutrfbwmxnfircxsyevouxqyprlxqnmwvepamsylfibuppyslcxobxyynunowjqzupsmkeuuvkctrywubqafaorernjupfslwdlemro"),
	// 			SQLWebDeveloperURL: to.Ptr("ljdauohhvgrrnnzuuauxcuehjmugbhyqszoqcrwiwqnbuozzccqpizilcijojlnyhljxcorelkqldumfnzuljhpwqcaymbdyhvokpbqqkwrarqfrobbzsfbacdtqprrwnuqwrphqlqzilyoyehjfclemrfgylxgawydpflybcbdptzvlukuqhvtgrtaahpgkwymrfellwpbaklxllpbhtkyvlkqnumnsicpaknacvnlqqiyvwwxusjrzqthptckfuyjpferpwszwargimrpqjbigszibkukbdqzctyvktqzrgmhooimbuiblruulhrumetcllofxpqtjlongqtxtnpgfxojlnkkzwiqxrksqeepzqcqudimxtsthqljievdfhbzraluasdwaenmnipdgsnkxeqrlpygcggsfgsjqdxaxqagvoamckaosdzzltrjqlxyxbiaifrtjcnboziaweiyqenlafpchpjxxolvmsseubbaedachwgzectncatkeihzvdncmmhhwgravfcezhcjbhlvopzbnmtaytzadgdszsxpvygjewkyksmdyzepmdjqbkrakuaolveenpngakvazigbxoihfepvebfzpdfdmqrpyqgsdaraifdtnyopibqjavwhffvpowizaskrjosdpivqsgalwypptcwrfscpaqarlnjjzedjhutykdlgxnmmdmrbovscpvbwoeimqsfmiiyxewjldifllcqbmcpoixhufxbptbjkzsvmxurdzjksqirvvhejsjahvtohzsnxkxnmdgkgprwygcnpkxpgrnurnujwdtgkquzkcaanpaamhbbloywlzftxdrxzuhxdxudixgzuyckwkudtzcwdcnxqwdsojyefojusbfjftrmshziassecmgluwvcmwkcpurxajmwvbfgalhhnbebovzulefrdmhepjzqicqnilorzrtbqhemnxgkifxjjeksokqnezkekqiotwthuocqehxfwazqqonwpisrmapjjbwrrrorzepqcgjhfurxbmsfhvnnlzymavjdmfwhehhvqjdrccgabtbqkceqervrztnmfhjgjcvdeccksykspvtvgldhwuwtgobygzhdomdzthrbbhoqnbxfaamrcznmqegfbswuhypgsivoylcvtcyccvsbsxzgxqeqdslytyezyzwtokvivbvwrohcaselsenmzfevvrjkpeyymjiaegybeumjiggaszdwcwqzispeobhysxameswplkdcwhgdmjplexxkbxdmardfisbaplwtsqpmtachrrtsakzhpzwtwutnmcsuehstovmdxntvpzrzwmkms"),
	// 			SupportedRegionsToCloneTo: []*string{
	// 				to.Ptr("germancywestcentral"),
	// 			},
	// 			TimeDataGuardRoleChanged: to.Ptr("exsyrzikvlzvulmkpjxxetftlanim"),
	// 			TimeDeletionOfFreeAutonomousDatabase: to.Ptr("jtigszni"),
	// 			TimeLocalDataGuardEnabled: to.Ptr("rxmqyrqrdpfvleeer"),
	// 			TimeOfLastFailover: to.Ptr("vpcasufezytnkepvpibgqckn"),
	// 			TimeOfLastRefresh: to.Ptr("tqnkkzisphpiqapurwmpdlb"),
	// 			TimeOfLastRefreshPoint: to.Ptr("jfzhrbodayonnuwacgvwhovjgno"),
	// 			TimeOfLastSwitchover: to.Ptr("uvpwuwthnnbzmdmteqzboaah"),
	// 			TimeReclamationOfFreeAutonomousDatabase: to.Ptr("kekqxlbxjsehiretiq"),
	// 			UsedDataStorageSizeInGbs: to.Ptr[int32](13),
	// 			UsedDataStorageSizeInTbs: to.Ptr[int32](16),
	// 			Ocid: to.Ptr("ocid1..aaaaa"),
	// 			BackupRetentionPeriodInDays: to.Ptr[int32](1),
	// 			WhitelistedIPs: []*string{
	// 				to.Ptr("1.1.1.1"),
	// 				to.Ptr("1.1.1.0/24"),
	// 				to.Ptr("1.1.2.25"),
	// 			},
	// 		},
	// 		Location: to.Ptr("eastus"),
	// 		Tags: map[string]*string{
	// 		},
	// 		ID: to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/rg000/providers/Oracle.Database/autonomousDatabases/databasedb1"),
	// 		Name: to.Ptr("databasedb1"),
	// 		Type: to.Ptr("Oracle.Database/autonomousDatabases"),
	// 		SystemData: &armoracledatabase.SystemData{
	// 			CreatedBy: to.Ptr("sqehacivpuim"),
	// 			CreatedByType: to.Ptr(armoracledatabase.CreatedByTypeUser),
	// 			CreatedAt: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2025-08-01T04:32:58.716Z"); return t}()),
	// 			LastModifiedBy: to.Ptr("axrqfdkqylvjv"),
	// 			LastModifiedByType: to.Ptr(armoracledatabase.CreatedByTypeUser),
	// 			LastModifiedAt: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2025-08-01T04:32:58.716Z"); return t}()),
	// 		},
	// 	},
	// }
}

// Generated from example definition: 2025-09-01/autonomousDatabase_switchover.json
func ExampleAutonomousDatabasesClient_BeginSwitchover_autonomousDatabasesSwitchover() {
	cred, err := azidentity.NewDefaultAzureCredential(nil)
	if err != nil {
		log.Fatalf("failed to obtain a credential: %v", err)
	}
	ctx := context.Background()
	clientFactory, err := armoracledatabase.NewClientFactory("00000000-0000-0000-0000-000000000000", cred, nil)
	if err != nil {
		log.Fatalf("failed to create client: %v", err)
	}
	poller, err := clientFactory.NewAutonomousDatabasesClient().BeginSwitchover(ctx, "rg000", "databasedb1", armoracledatabase.PeerDbDetails{
		PeerDbID: to.Ptr("peerDbId"),
	}, nil)
	if err != nil {
		log.Fatalf("failed to finish the request: %v", err)
	}
	res, err := poller.PollUntilDone(ctx, nil)
	if err != nil {
		log.Fatalf("failed to pull the result: %v", err)
	}
	// You could use response here. We use blank identifier for just demo purposes.
	_ = res
	// If the HTTP response code is 200 as defined in example definition, your response structure would look as follows. Please pay attention that all the values in the output are fake values for just demo purposes.
	// res = armoracledatabase.AutonomousDatabasesClientSwitchoverResponse{
	// 	AutonomousDatabase: &armoracledatabase.AutonomousDatabase{
	// 		ID: to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/rg000/providers/Oracle.Database/autonomousDatabases/databasedb1"),
	// 		Type: to.Ptr("Oracle.Database/autonomousDatabases"),
	// 		Location: to.Ptr("eastus"),
	// 		Tags: map[string]*string{
	// 			"tagK1": to.Ptr("tagV1"),
	// 		},
	// 		Properties: &armoracledatabase.AutonomousDatabaseProperties{
	// 			AutonomousDatabaseID: to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/rg000/providers/Oracle.Database/autonomousDatabases/databasedb1"),
	// 			AutonomousMaintenanceScheduleType: to.Ptr(armoracledatabase.AutonomousMaintenanceScheduleTypeRegular),
	// 			CharacterSet: to.Ptr("AL32UTF8"),
	// 			NcharacterSet: to.Ptr("AL16UTF16"),
	// 			ComputeCount: to.Ptr[float32](2),
	// 			ComputeModel: to.Ptr(armoracledatabase.ComputeModelECPU),
	// 			CPUCoreCount: to.Ptr[int32](1),
	// 			DataStorageSizeInGbs: to.Ptr[int32](1024),
	// 			DataStorageSizeInTbs: to.Ptr[int32](1),
	// 			DatabaseEdition: to.Ptr(armoracledatabase.DatabaseEditionTypeEnterpriseEdition),
	// 			DataBaseType: to.Ptr(armoracledatabase.DataBaseTypeRegular),
	// 			DbVersion: to.Ptr("18.4.0.0"),
	// 			DisplayName: to.Ptr("example_autonomous_databasedb1"),
	// 			IsAutoScalingEnabled: to.Ptr(false),
	// 			IsAutoScalingForStorageEnabled: to.Ptr(false),
	// 			IsLocalDataGuardEnabled: to.Ptr(false),
	// 			LocalDisasterRecoveryType: to.Ptr(armoracledatabase.DisasterRecoveryTypeBackupBased),
	// 			Role: to.Ptr(armoracledatabase.RoleTypePrimary),
	// 			LocalStandbyDb: &armoracledatabase.AutonomousDatabaseStandbySummary{
	// 				LifecycleState: to.Ptr(armoracledatabase.AutonomousDatabaseLifecycleStateRoleChangeInProgress),
	// 			},
	// 			IsMtlsConnectionRequired: to.Ptr(true),
	// 			LicenseModel: to.Ptr(armoracledatabase.LicenseModelBringYourOwnLicense),
	// 			LifecycleState: to.Ptr(armoracledatabase.AutonomousDatabaseLifecycleStateUpdating),
	// 			SubnetID: to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/rg000/providers/Microsoft.Network/virtualNetworks/vnet1/subnets/subnet1"),
	// 			VnetID: to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/rg000/providers/Microsoft.Network/virtualNetworks/vnet1"),
	// 			ProvisioningState: to.Ptr(armoracledatabase.AzureResourceProvisioningStateProvisioning),
	// 			OciURL: to.Ptr("https://fake"),
	// 			TimeCreated: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2024-01-09T20:44:09.466Z"); return t}()),
	// 			TimeOfLastSwitchover: to.Ptr("2024-02-27T18:37:08.069Z"),
	// 			Ocid: to.Ptr("ocid1..aaaaa"),
	// 			WhitelistedIPs: []*string{
	// 				to.Ptr("1.1.1.1"),
	// 				to.Ptr("1.1.1.0/24"),
	// 				to.Ptr("1.1.2.25"),
	// 			},
	// 		},
	// 	},
	// }
}

// Generated from example definition: 2025-09-01/AutonomousDatabases_Update_MaximumSet_Gen.json
func ExampleAutonomousDatabasesClient_BeginUpdate_patchAutonomousDatabaseGeneratedByMaximumSetRule() {
	cred, err := azidentity.NewDefaultAzureCredential(nil)
	if err != nil {
		log.Fatalf("failed to obtain a credential: %v", err)
	}
	ctx := context.Background()
	clientFactory, err := armoracledatabase.NewClientFactory("00000000-0000-0000-0000-000000000000", cred, nil)
	if err != nil {
		log.Fatalf("failed to create client: %v", err)
	}
	poller, err := clientFactory.NewAutonomousDatabasesClient().BeginUpdate(ctx, "rgopenapi", "databasedb1", armoracledatabase.AutonomousDatabaseUpdate{
		Tags: map[string]*string{
			"key9827": to.Ptr("bygpoqozrwfyiootncgcqq"),
		},
		Properties: &armoracledatabase.AutonomousDatabaseUpdateProperties{
			AdminPassword:                     to.Ptr("<a-password-goes-here>"),
			AutonomousMaintenanceScheduleType: to.Ptr(armoracledatabase.AutonomousMaintenanceScheduleTypeEarly),
			ComputeCount:                      to.Ptr[float32](56.1),
			CPUCoreCount:                      to.Ptr[int32](45),
			CustomerContacts: []*armoracledatabase.CustomerContact{
				{
					Email: to.Ptr("dummyemail@microsoft.com"),
				},
			},
			DataStorageSizeInTbs:           to.Ptr[int32](133),
			DataStorageSizeInGbs:           to.Ptr[int32](175271),
			DisplayName:                    to.Ptr("lrdrjpyyvufnxdzpwvlkmfukpstrjftdxcejcxtnqhxqbhvtzeiokllnspotsqeggddxkjjtf"),
			IsAutoScalingEnabled:           to.Ptr(true),
			IsAutoScalingForStorageEnabled: to.Ptr(true),
			PeerDbID:                       to.Ptr("qmpfwtvpfvbgmulethqznsyyjlpxmyfqfanrymzqsgraavtmlqqbexpzguyqybngoupbshlzpxv"),
			IsLocalDataGuardEnabled:        to.Ptr(true),
			IsMtlsConnectionRequired:       to.Ptr(true),
			LicenseModel:                   to.Ptr(armoracledatabase.LicenseModelLicenseIncluded),
			ScheduledOperationsList: []*armoracledatabase.ScheduledOperationsTypeUpdate{
				{
					DayOfWeek: &armoracledatabase.DayOfWeekUpdate{
						Name: to.Ptr(armoracledatabase.DayOfWeekNameMonday),
					},
					ScheduledStartTime: to.Ptr("lwwvkazgmfremfwhckfb"),
					ScheduledStopTime:  to.Ptr("hjwagzxijpiaogulmnmbuqakpqxhkjvaypjqnvbvtjddc"),
				},
			},
			DatabaseEdition: to.Ptr(armoracledatabase.DatabaseEditionTypeStandardEdition),
			LongTermBackupSchedule: &armoracledatabase.LongTermBackUpScheduleDetails{
				RepeatCadence:         to.Ptr(armoracledatabase.RepeatCadenceTypeOneTime),
				TimeOfBackup:          to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2025-08-01T04:32:58.715Z"); return t }()),
				RetentionPeriodInDays: to.Ptr[int32](188),
				IsDisabled:            to.Ptr(true),
			},
			LocalAdgAutoFailoverMaxDataLossLimit: to.Ptr[int32](212),
			OpenMode:                             to.Ptr(armoracledatabase.OpenModeTypeReadOnly),
			PermissionLevel:                      to.Ptr(armoracledatabase.PermissionLevelTypeRestricted),
			Role:                                 to.Ptr(armoracledatabase.RoleTypePrimary),
			BackupRetentionPeriodInDays:          to.Ptr[int32](12),
			WhitelistedIPs: []*string{
				to.Ptr("kfierlppwurtqrhfxwgfgrnqtmvraignzwsddwmpdijeveuevuoejfmbjvpnlrmmdflilxcwkkzvdofctsdjfxrrrwctihhnchtrouauesqbmlcqhzwnppnhrtitecenlfyshassvajukbwxudhlwixkvkgsessvshcwmleoqujeemwenhwlsccbcjnnviugzgylsxkssalqoicatcvkahogdvweymhdxboyqwhaxuzlmrdbvgbnnetobkbwygcsflzanwknlybvvzgjzjirpfrksbxwgllgfxwdflcisvxpkjecpgdaxccqkzxofedkrawvhzeabmunpykwd"),
			},
		},
	}, nil)
	if err != nil {
		log.Fatalf("failed to finish the request: %v", err)
	}
	res, err := poller.PollUntilDone(ctx, nil)
	if err != nil {
		log.Fatalf("failed to pull the result: %v", err)
	}
	// You could use response here. We use blank identifier for just demo purposes.
	_ = res
	// If the HTTP response code is 200 as defined in example definition, your response structure would look as follows. Please pay attention that all the values in the output are fake values for just demo purposes.
	// res = armoracledatabase.AutonomousDatabasesClientUpdateResponse{
	// 	AutonomousDatabase: &armoracledatabase.AutonomousDatabase{
	// 		Properties: &armoracledatabase.AutonomousDatabaseProperties{
	// 			DataBaseType: to.Ptr(armoracledatabase.DataBaseTypeRegular),
	// 			DisplayName: to.Ptr("example_autonomous_databasedb1"),
	// 			ComputeModel: to.Ptr(armoracledatabase.ComputeModelECPU),
	// 			ComputeCount: to.Ptr[float32](2),
	// 			DataStorageSizeInTbs: to.Ptr[int32](1),
	// 			DbVersion: to.Ptr("18.4.0.0"),
	// 			CharacterSet: to.Ptr("AL32UTF8"),
	// 			NcharacterSet: to.Ptr("AL16UTF16"),
	// 			SubnetID: to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/rg000/providers/Microsoft.Network/virtualNetworks/vnet1/subnets/subnet1"),
	// 			VnetID: to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/rg000/providers/Microsoft.Network/virtualNetworks/vnet1"),
	// 			AutonomousMaintenanceScheduleType: to.Ptr(armoracledatabase.AutonomousMaintenanceScheduleTypeRegular),
	// 			CPUCoreCount: to.Ptr[int32](1),
	// 			CustomerContacts: []*armoracledatabase.CustomerContact{
	// 				{
	// 					Email: to.Ptr("dummyemail@microsoft.com"),
	// 				},
	// 			},
	// 			DataStorageSizeInGbs: to.Ptr[int32](1024),
	// 			DbWorkload: to.Ptr(armoracledatabase.WorkloadTypeOLTP),
	// 			IsAutoScalingEnabled: to.Ptr(true),
	// 			IsAutoScalingForStorageEnabled: to.Ptr(true),
	// 			PeerDbIDs: []*string{
	// 				to.Ptr("gpubz"),
	// 			},
	// 			IsLocalDataGuardEnabled: to.Ptr(true),
	// 			IsRemoteDataGuardEnabled: to.Ptr(true),
	// 			LocalDisasterRecoveryType: to.Ptr(armoracledatabase.DisasterRecoveryTypeAdg),
	// 			TimeDisasterRecoveryRoleChanged: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2025-08-01T04:32:58.722Z"); return t}()),
	// 			RemoteDisasterRecoveryConfiguration: &armoracledatabase.DisasterRecoveryConfigurationDetails{
	// 				DisasterRecoveryType: to.Ptr(armoracledatabase.DisasterRecoveryTypeAdg),
	// 				TimeSnapshotStandbyEnabledTill: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2025-08-01T04:32:58.715Z"); return t}()),
	// 				IsSnapshotStandby: to.Ptr(true),
	// 				IsReplicateAutomaticBackups: to.Ptr(true),
	// 			},
	// 			LocalStandbyDb: &armoracledatabase.AutonomousDatabaseStandbySummary{
	// 				LagTimeInSeconds: to.Ptr[int32](13),
	// 				LifecycleState: to.Ptr(armoracledatabase.AutonomousDatabaseLifecycleStateProvisioning),
	// 				LifecycleDetails: to.Ptr("zoiyaaibuuhm"),
	// 				TimeDataGuardRoleChanged: to.Ptr("inggk"),
	// 				TimeDisasterRecoveryRoleChanged: to.Ptr("q"),
	// 			},
	// 			FailedDataRecoveryInSeconds: to.Ptr[int32](27),
	// 			IsMtlsConnectionRequired: to.Ptr(true),
	// 			LicenseModel: to.Ptr(armoracledatabase.LicenseModelBringYourOwnLicense),
	// 			LifecycleDetails: to.Ptr("success"),
	// 			ProvisioningState: to.Ptr(armoracledatabase.AzureResourceProvisioningStateSucceeded),
	// 			LifecycleState: to.Ptr(armoracledatabase.AutonomousDatabaseLifecycleState("Succeeded")),
	// 			ScheduledOperationsList: []*armoracledatabase.ScheduledOperationsType{
	// 				{
	// 					DayOfWeek: &armoracledatabase.DayOfWeek{
	// 						Name: to.Ptr(armoracledatabase.DayOfWeekNameMonday),
	// 					},
	// 					ScheduledStartTime: to.Ptr("lwwvkazgmfremfwhckfb"),
	// 					ScheduledStopTime: to.Ptr("hjwagzxijpiaogulmnmbuqakpqxhkjvaypjqnvbvtjddc"),
	// 				},
	// 			},
	// 			PrivateEndpointIP: to.Ptr("rdlbhw"),
	// 			PrivateEndpointLabel: to.Ptr("worwqllbglhyakksevparfuaivc"),
	// 			OciURL: to.Ptr("https://fake"),
	// 			TimeCreated: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2024-01-09T20:44:09.466Z"); return t}()),
	// 			TimeMaintenanceBegin: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2025-08-01T04:32:58.722Z"); return t}()),
	// 			TimeMaintenanceEnd: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2025-08-01T04:32:58.722Z"); return t}()),
	// 			ActualUsedDataStorageSizeInTbs: to.Ptr[float64](8),
	// 			AllocatedStorageSizeInTbs: to.Ptr[float64](20),
	// 			ApexDetails: &armoracledatabase.ApexDetailsType{
	// 				ApexVersion: to.Ptr("scvpjwygbzqzevlztyfvqiaom"),
	// 				OrdsVersion: to.Ptr("djlwvhpipimxaguklshpppjrzasbk"),
	// 			},
	// 			AvailableUpgradeVersions: []*string{
	// 				to.Ptr("dgvzwolnmulrlwzzazgqm"),
	// 			},
	// 			ConnectionStrings: &armoracledatabase.ConnectionStringType{
	// 				AllConnectionStrings: &armoracledatabase.AllConnectionStringType{
	// 					High: to.Ptr("exdinleextbcjinutlkvnqyxhvandtihncykjzrhfdhfrxdarny"),
	// 					Low: to.Ptr("vurudxqtummqqbnidwthmsqgujufjxwfnejdpuxkgyoxlgqhcgsfjcpzaqeioslpehjfashipdsjhkrpdobstvgxsqrgvcrpbiiabhvymdsylqsjedrimqhtttmszlaqyukopuufbtkbtwgdydrvnvkcdqmphwzpcjxlgefzrdajyczzjdpuzvhqvupbvrpvqhzoaalg"),
	// 					Medium: to.Ptr("ishtubsuzgwtkfdqfgyxjlhehiokdvjfhwqhvmgtuksboshulroytcnubtrxxjbgoutftpzeavbldsoqjwmamgfwevhppyyeckythirzvaqujrjaiqnpyvycakhwgtuftmuxavdgdvbqxgsdqwbnqzmrzymwiydhxekenbweaghgvyveuysxqmovwodzwwfrxhtlcegekjk"),
	// 				},
	// 				Dedicated: to.Ptr("okoggzbidoaknwikuqpvepxvvcseukouprpfrldmakztkleeizbjf"),
	// 				High: to.Ptr("pggylyrivfn"),
	// 				Low: to.Ptr("zrjsbtdbfluaipbzgcvvhyuvqoczjneihaiftkfmuvvyoldslgvvpwthieyrcoxvh"),
	// 				Medium: to.Ptr("ebjnwenxvyeinsabrppychqbcawfxgplfacbsizltwfhpdafbkawopppqsxemlnmrbiqlstjupgdmpfcyyxgofmitbdiarrpprhntntqqjklseigycfcpmmlqiznxzliserjppmgfjatnmtbdxqtlbmrmpfbpoxmyffkkoptpayigeeefmqczroouqjxchswffywpsmyqohbyaclhsrwgqyuuyynvxyyzkche"),
	// 				Profiles: []*armoracledatabase.ProfileType{
	// 					{
	// 						ConsumerGroup: to.Ptr(armoracledatabase.ConsumerGroupHigh),
	// 						DisplayName: to.Ptr("mqqdgidxuovxhcwrkanybxzplautekarsxbcbzlkikpmmvjrdrrkncbamdtcuksplamigrdkydjbzeurbmjgehgppovxqhuzasduwptrlyaurzszzqpztckhpdniepaglzeublbwffxebfespqyfpljlutregvlzzjo"),
	// 						HostFormat: to.Ptr(armoracledatabase.HostFormatTypeFqdn),
	// 						IsRegional: to.Ptr(true),
	// 						Protocol: to.Ptr(armoracledatabase.ProtocolTypeTCP),
	// 						SessionMode: to.Ptr(armoracledatabase.SessionModeTypeDirect),
	// 						SyntaxFormat: to.Ptr(armoracledatabase.SyntaxFormatTypeLong),
	// 						TLSAuthentication: to.Ptr(armoracledatabase.TLSAuthenticationTypeServer),
	// 						Value: to.Ptr("bdrnwqpzbbzdipqqhnroxiuewqg"),
	// 					},
	// 				},
	// 			},
	// 			ConnectionUrls: &armoracledatabase.ConnectionURLType{
	// 				ApexURL: to.Ptr("epnebmudvzijxrfgabsdjewqfotqjmnxvokfhlyklhvtrjpprnqujthmceuhpfuumcbfxktppfguqduzkukxqkofoyyycljjtruyjtoiesxlrwwzonozaxetzrkpmzwasyvryvkryawxxf"),
	// 				DatabaseTransformsURL: to.Ptr("hujiemysucgdgtasazsdtwnxmtjppugunrqnzfzneatukuyzvkfseusjaxrourznsrwxjbvzfansdcyfxnvcyghl"),
	// 				GraphStudioURL: to.Ptr("bucnwmwixwemqqtoozfclfzqenskkyssvcatwbptsezpzdwgnaexgxutsvaibnkawyohqklnktzlhdbhbstm"),
	// 				MachineLearningNotebookURL: to.Ptr("vfhnqsrabxcrjnpqaqkgnpwhxffsqkrgcijdkkvnaoangzkcbgwklufujhmlgydxueybugxzgokxbbappdslttpdthhbmxrgcicqzyjyahjeiqopuglgbjfbhufuvsogquelagbjtyotwhmecwupooitcaftldxjycgfnlilrnicqjxnsucieftadjbvptzltmgqkxhttfkkbutaxvtfzbvbbxbmpxeeyfethpofnmbbqbtlqvnfgelvtjizckgixpptkilcvrntknusvppgnobokjpepynndswcqsnewhfnlxgmownfwfnokhbqulzyuessvxxtcdcnmumbbpjchmjbvjecbbinjolmuoaixzunawlxnoqbpzkczdsubpqpdltnfydwevearrdirzaszsudcxaspozeop"),
	// 				MongoDbURL: to.Ptr("dzmsqtcgsrdgwjlnrfmzcqcrkdqwmjrccxsszwdgpcygywnuurklwthgonxcnwaqcgzoexnaanwzsqwemcijuzxqbrkpvydizjraicgnspizwwnwureyey"),
	// 				OrdsURL: to.Ptr("lmqdgziantbczaneiqxopnaexcroelkbcgggjipzqfhoduwqodoyeghzjyuyhesewopbujxnoiziidhslxdawrfayjvxzjwfobtjrepldlmwhauiurzhbpyxsbueugddmdfindxsdjddqamwbptozzmobugnpezxyxdopripljdwnogjgrjwjfbugdkqrjwzjvavsdmgvspnzcgcjzxauqxqljmfgrtyohfppbmprmexiirvlmymxzyciaraihbwihvahyaciv"),
	// 				SQLDevWebURL: to.Ptr("pktklsvlakmblcakipxy"),
	// 			},
	// 			DataSafeStatus: to.Ptr(armoracledatabase.DataSafeStatusTypeRegistering),
	// 			DatabaseEdition: to.Ptr(armoracledatabase.DatabaseEditionTypeEnterpriseEdition),
	// 			AutonomousDatabaseID: to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/rg000/providers/Oracle.Database/autonomousDatabases/databasedb1"),
	// 			InMemoryAreaInGbs: to.Ptr[int32](29),
	// 			NextLongTermBackupTimeStamp: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2025-08-01T04:32:58.722Z"); return t}()),
	// 			LongTermBackupSchedule: &armoracledatabase.LongTermBackUpScheduleDetails{
	// 				RepeatCadence: to.Ptr(armoracledatabase.RepeatCadenceTypeOneTime),
	// 				TimeOfBackup: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2025-08-01T04:32:58.715Z"); return t}()),
	// 				RetentionPeriodInDays: to.Ptr[int32](188),
	// 				IsDisabled: to.Ptr(true),
	// 			},
	// 			IsPreview: to.Ptr(true),
	// 			LocalAdgAutoFailoverMaxDataLossLimit: to.Ptr[int32](1759),
	// 			MemoryPerOracleComputeUnitInGbs: to.Ptr[int32](17),
	// 			OpenMode: to.Ptr(armoracledatabase.OpenModeTypeReadOnly),
	// 			OperationsInsightsStatus: to.Ptr(armoracledatabase.OperationsInsightsStatusTypeEnabling),
	// 			PermissionLevel: to.Ptr(armoracledatabase.PermissionLevelTypeRestricted),
	// 			PrivateEndpoint: to.Ptr("zsknxwclpifygotuivnzkyy"),
	// 			ProvisionableCpus: []*int32{
	// 				to.Ptr[int32](11),
	// 			},
	// 			Role: to.Ptr(armoracledatabase.RoleTypePrimary),
	// 			ServiceConsoleURL: to.Ptr("vyqingzejychumpyufkkiskxhxtfdqhnkugercwlzgakttvdgkrxckvqkxdxlrqpgqosgobgjzyfdewpvhqthefbhtbkxeocreutrfbwmxnfircxsyevouxqyprlxqnmwvepamsylfibuppyslcxobxyynunowjqzupsmkeuuvkctrywubqafaorernjupfslwdlemro"),
	// 			SQLWebDeveloperURL: to.Ptr("ljdauohhvgrrnnzuuauxcuehjmugbhyqszoqcrwiwqnbuozzccqpizilcijojlnyhljxcorelkqldumfnzuljhpwqcaymbdyhvokpbqqkwrarqfrobbzsfbacdtqprrwnuqwrphqlqzilyoyehjfclemrfgylxgawydpflybcbdptzvlukuqhvtgrtaahpgkwymrfellwpbaklxllpbhtkyvlkqnumnsicpaknacvnlqqiyvwwxusjrzqthptckfuyjpferpwszwargimrpqjbigszibkukbdqzctyvktqzrgmhooimbuiblruulhrumetcllofxpqtjlongqtxtnpgfxojlnkkzwiqxrksqeepzqcqudimxtsthqljievdfhbzraluasdwaenmnipdgsnkxeqrlpygcggsfgsjqdxaxqagvoamckaosdzzltrjqlxyxbiaifrtjcnboziaweiyqenlafpchpjxxolvmsseubbaedachwgzectncatkeihzvdncmmhhwgravfcezhcjbhlvopzbnmtaytzadgdszsxpvygjewkyksmdyzepmdjqbkrakuaolveenpngakvazigbxoihfepvebfzpdfdmqrpyqgsdaraifdtnyopibqjavwhffvpowizaskrjosdpivqsgalwypptcwrfscpaqarlnjjzedjhutykdlgxnmmdmrbovscpvbwoeimqsfmiiyxewjldifllcqbmcpoixhufxbptbjkzsvmxurdzjksqirvvhejsjahvtohzsnxkxnmdgkgprwygcnpkxpgrnurnujwdtgkquzkcaanpaamhbbloywlzftxdrxzuhxdxudixgzuyckwkudtzcwdcnxqwdsojyefojusbfjftrmshziassecmgluwvcmwkcpurxajmwvbfgalhhnbebovzulefrdmhepjzqicqnilorzrtbqhemnxgkifxjjeksokqnezkekqiotwthuocqehxfwazqqonwpisrmapjjbwrrrorzepqcgjhfurxbmsfhvnnlzymavjdmfwhehhvqjdrccgabtbqkceqervrztnmfhjgjcvdeccksykspvtvgldhwuwtgobygzhdomdzthrbbhoqnbxfaamrcznmqegfbswuhypgsivoylcvtcyccvsbsxzgxqeqdslytyezyzwtokvivbvwrohcaselsenmzfevvrjkpeyymjiaegybeumjiggaszdwcwqzispeobhysxameswplkdcwhgdmjplexxkbxdmardfisbaplwtsqpmtachrrtsakzhpzwtwutnmcsuehstovmdxntvpzrzwmkms"),
	// 			SupportedRegionsToCloneTo: []*string{
	// 				to.Ptr("germanywestcentral"),
	// 			},
	// 			TimeDataGuardRoleChanged: to.Ptr("exsyrzikvlzvulmkpjxxetftlanim"),
	// 			TimeDeletionOfFreeAutonomousDatabase: to.Ptr("jtigszni"),
	// 			TimeLocalDataGuardEnabled: to.Ptr("rxmqyrqrdpfvleeer"),
	// 			TimeOfLastFailover: to.Ptr("vpcasufezytnkepvpibgqckn"),
	// 			TimeOfLastRefresh: to.Ptr("tqnkkzisphpiqapurwmpdlb"),
	// 			TimeOfLastRefreshPoint: to.Ptr("jfzhrbodayonnuwacgvwhovjgno"),
	// 			TimeOfLastSwitchover: to.Ptr("uvpwuwthnnbzmdmteqzboaah"),
	// 			TimeReclamationOfFreeAutonomousDatabase: to.Ptr("kekqxlbxjsehiretiq"),
	// 			UsedDataStorageSizeInGbs: to.Ptr[int32](13),
	// 			UsedDataStorageSizeInTbs: to.Ptr[int32](16),
	// 			Ocid: to.Ptr("ocid1..aaaaa"),
	// 			BackupRetentionPeriodInDays: to.Ptr[int32](1),
	// 			WhitelistedIPs: []*string{
	// 				to.Ptr("kfierlppwurtqrhfxwgfgrnqtmvraignzwsddwmpdijeveuevuoejfmbjvpnlrmmdflilxcwkkzvdofctsdjfxrrrwctihhnchtrouauesqbmlcqhzwnppnhrtitecenlfyshassvajukbwxudhlwixkvkgsessvshcwmleoqujeemwenhwlsccbcjnnviugzgylsxkssalqoicatcvkahogdvweymhdxboyqwhaxuzlmrdbvgbnnetobkbwygcsflzanwknlybvvzgjzjirpfrksbxwgllgfxwdflcisvxpkjecpgdaxccqkzxofedkrawvhzeabmunpykwd"),
	// 				to.Ptr("1.1.1.0/24"),
	// 				to.Ptr("1.1.2.25"),
	// 			},
	// 		},
	// 		Location: to.Ptr("eastus"),
	// 		Tags: map[string]*string{
	// 		},
	// 		ID: to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/rg000/providers/Oracle.Database/autonomousDatabases/databasedb1"),
	// 		Name: to.Ptr("databasedb1"),
	// 		Type: to.Ptr("Oracle.Database/autonomousDatabases"),
	// 		SystemData: &armoracledatabase.SystemData{
	// 			CreatedBy: to.Ptr("sqehacivpuim"),
	// 			CreatedByType: to.Ptr(armoracledatabase.CreatedByTypeUser),
	// 			CreatedAt: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2025-08-01T04:32:58.716Z"); return t}()),
	// 			LastModifiedBy: to.Ptr("axrqfdkqylvjv"),
	// 			LastModifiedByType: to.Ptr(armoracledatabase.CreatedByTypeUser),
	// 			LastModifiedAt: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2025-08-01T04:32:58.716Z"); return t}()),
	// 		},
	// 	},
	// }
}

// Generated from example definition: 2025-09-01/autonomousDatabase_patch.json
func ExampleAutonomousDatabasesClient_BeginUpdate_autonomousDatabasesUpdate() {
	cred, err := azidentity.NewDefaultAzureCredential(nil)
	if err != nil {
		log.Fatalf("failed to obtain a credential: %v", err)
	}
	ctx := context.Background()
	clientFactory, err := armoracledatabase.NewClientFactory("00000000-0000-0000-0000-000000000000", cred, nil)
	if err != nil {
		log.Fatalf("failed to create client: %v", err)
	}
	poller, err := clientFactory.NewAutonomousDatabasesClient().BeginUpdate(ctx, "rg000", "databasedb1", armoracledatabase.AutonomousDatabaseUpdate{}, nil)
	if err != nil {
		log.Fatalf("failed to finish the request: %v", err)
	}
	res, err := poller.PollUntilDone(ctx, nil)
	if err != nil {
		log.Fatalf("failed to pull the result: %v", err)
	}
	// You could use response here. We use blank identifier for just demo purposes.
	_ = res
	// If the HTTP response code is 200 as defined in example definition, your response structure would look as follows. Please pay attention that all the values in the output are fake values for just demo purposes.
	// res = armoracledatabase.AutonomousDatabasesClientUpdateResponse{
	// 	AutonomousDatabase: &armoracledatabase.AutonomousDatabase{
	// 		ID: to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/rg000/providers/Oracle.Database/autonomousDatabases/databasedb1"),
	// 		Type: to.Ptr("Oracle.Database/autonomousDatabases"),
	// 		Location: to.Ptr("eastus"),
	// 		Tags: map[string]*string{
	// 			"tagK1": to.Ptr("tagV1"),
	// 		},
	// 		Properties: &armoracledatabase.AutonomousDatabaseProperties{
	// 			AutonomousDatabaseID: to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/rg000/providers/Oracle.Database/autonomousDatabases/databasedb1"),
	// 			AutonomousMaintenanceScheduleType: to.Ptr(armoracledatabase.AutonomousMaintenanceScheduleTypeRegular),
	// 			CharacterSet: to.Ptr("AL32UTF8"),
	// 			NcharacterSet: to.Ptr("AL16UTF16"),
	// 			ComputeCount: to.Ptr[float32](2),
	// 			ComputeModel: to.Ptr(armoracledatabase.ComputeModelECPU),
	// 			CPUCoreCount: to.Ptr[int32](1),
	// 			DataStorageSizeInGbs: to.Ptr[int32](1024),
	// 			DataStorageSizeInTbs: to.Ptr[int32](1),
	// 			DatabaseEdition: to.Ptr(armoracledatabase.DatabaseEditionTypeEnterpriseEdition),
	// 			DataBaseType: to.Ptr(armoracledatabase.DataBaseTypeRegular),
	// 			DbVersion: to.Ptr("18.4.0.0"),
	// 			DisplayName: to.Ptr("example_autonomous_databasedb1"),
	// 			IsAutoScalingEnabled: to.Ptr(false),
	// 			IsAutoScalingForStorageEnabled: to.Ptr(false),
	// 			IsLocalDataGuardEnabled: to.Ptr(false),
	// 			IsMtlsConnectionRequired: to.Ptr(true),
	// 			LicenseModel: to.Ptr(armoracledatabase.LicenseModelBringYourOwnLicense),
	// 			LifecycleState: to.Ptr(armoracledatabase.AutonomousDatabaseLifecycleState("Succeeded")),
	// 			LifecycleDetails: to.Ptr("success"),
	// 			SubnetID: to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/rg000/providers/Microsoft.Network/virtualNetworks/vnet1/subnets/subnet1"),
	// 			VnetID: to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/rg000/providers/Microsoft.Network/virtualNetworks/vnet1"),
	// 			ProvisioningState: to.Ptr(armoracledatabase.AzureResourceProvisioningStateSucceeded),
	// 			OciURL: to.Ptr("https://fake"),
	// 			TimeCreated: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2024-01-09T20:44:09.466Z"); return t}()),
	// 			Ocid: to.Ptr("ocid1..aaaaa"),
	// 			WhitelistedIPs: []*string{
	// 				to.Ptr("1.1.1.1"),
	// 				to.Ptr("1.1.1.0/24"),
	// 				to.Ptr("1.1.2.25"),
	// 			},
	// 		},
	// 	},
	// }
}
