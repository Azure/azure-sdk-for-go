//go:build go1.18
// +build go1.18

// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator. DO NOT EDIT.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

package armoracledatabase

const (
	moduleName    = "github.com/Azure/azure-sdk-for-go/sdk/resourcemanager/oracledatabase/armoracledatabase"
	moduleVersion = "v1.0.0"
)

// ActionType - Enum. Indicates the action type. "Internal" refers to actions that are for internal only APIs.
type ActionType string

const (
	ActionTypeInternal ActionType = "Internal"
)

// PossibleActionTypeValues returns the possible values for the ActionType const type.
func PossibleActionTypeValues() []ActionType {
	return []ActionType{
		ActionTypeInternal,
	}
}

// AutonomousDatabaseBackupLifecycleState - Autonomous database backup lifecycle state enum
type AutonomousDatabaseBackupLifecycleState string

const (
	// AutonomousDatabaseBackupLifecycleStateActive - AutonomousDatabase backup is active
	AutonomousDatabaseBackupLifecycleStateActive AutonomousDatabaseBackupLifecycleState = "Active"
	// AutonomousDatabaseBackupLifecycleStateCreating - AutonomousDatabase backup is creating
	AutonomousDatabaseBackupLifecycleStateCreating AutonomousDatabaseBackupLifecycleState = "Creating"
	// AutonomousDatabaseBackupLifecycleStateDeleting - AutonomousDatabase backup is deleting
	AutonomousDatabaseBackupLifecycleStateDeleting AutonomousDatabaseBackupLifecycleState = "Deleting"
	// AutonomousDatabaseBackupLifecycleStateFailed - AutonomousDatabase backup is failed
	AutonomousDatabaseBackupLifecycleStateFailed AutonomousDatabaseBackupLifecycleState = "Failed"
	// AutonomousDatabaseBackupLifecycleStateUpdating - AutonomousDatabase backup is updating
	AutonomousDatabaseBackupLifecycleStateUpdating AutonomousDatabaseBackupLifecycleState = "Updating"
)

// PossibleAutonomousDatabaseBackupLifecycleStateValues returns the possible values for the AutonomousDatabaseBackupLifecycleState const type.
func PossibleAutonomousDatabaseBackupLifecycleStateValues() []AutonomousDatabaseBackupLifecycleState {
	return []AutonomousDatabaseBackupLifecycleState{
		AutonomousDatabaseBackupLifecycleStateActive,
		AutonomousDatabaseBackupLifecycleStateCreating,
		AutonomousDatabaseBackupLifecycleStateDeleting,
		AutonomousDatabaseBackupLifecycleStateFailed,
		AutonomousDatabaseBackupLifecycleStateUpdating,
	}
}

// AutonomousDatabaseBackupType - Autonomous database backup type enum
type AutonomousDatabaseBackupType string

const (
	// AutonomousDatabaseBackupTypeFull - Full backup
	AutonomousDatabaseBackupTypeFull AutonomousDatabaseBackupType = "Full"
	// AutonomousDatabaseBackupTypeIncremental - Incremental backup
	AutonomousDatabaseBackupTypeIncremental AutonomousDatabaseBackupType = "Incremental"
	// AutonomousDatabaseBackupTypeLongTerm - LongTerm backup
	AutonomousDatabaseBackupTypeLongTerm AutonomousDatabaseBackupType = "LongTerm"
)

// PossibleAutonomousDatabaseBackupTypeValues returns the possible values for the AutonomousDatabaseBackupType const type.
func PossibleAutonomousDatabaseBackupTypeValues() []AutonomousDatabaseBackupType {
	return []AutonomousDatabaseBackupType{
		AutonomousDatabaseBackupTypeFull,
		AutonomousDatabaseBackupTypeIncremental,
		AutonomousDatabaseBackupTypeLongTerm,
	}
}

// AutonomousDatabaseLifecycleState - Autonomous database lifecycle state enum
type AutonomousDatabaseLifecycleState string

const (
	// AutonomousDatabaseLifecycleStateAvailable - Indicates that resource in Available state
	AutonomousDatabaseLifecycleStateAvailable AutonomousDatabaseLifecycleState = "Available"
	// AutonomousDatabaseLifecycleStateAvailableNeedsAttention - Indicates that resource is available but needs attention
	AutonomousDatabaseLifecycleStateAvailableNeedsAttention AutonomousDatabaseLifecycleState = "AvailableNeedsAttention"
	// AutonomousDatabaseLifecycleStateBackupInProgress - Indicates that resource in BackupInProgress state
	AutonomousDatabaseLifecycleStateBackupInProgress AutonomousDatabaseLifecycleState = "BackupInProgress"
	// AutonomousDatabaseLifecycleStateInaccessible - IIndicates that resource in Inaccessible state
	AutonomousDatabaseLifecycleStateInaccessible AutonomousDatabaseLifecycleState = "Inaccessible"
	// AutonomousDatabaseLifecycleStateMaintenanceInProgress - Indicates that resource maintenance in progress state
	AutonomousDatabaseLifecycleStateMaintenanceInProgress AutonomousDatabaseLifecycleState = "MaintenanceInProgress"
	// AutonomousDatabaseLifecycleStateProvisioning - Indicates that resource in Provisioning state
	AutonomousDatabaseLifecycleStateProvisioning AutonomousDatabaseLifecycleState = "Provisioning"
	// AutonomousDatabaseLifecycleStateRecreating - Indicates that resource in Recreating state
	AutonomousDatabaseLifecycleStateRecreating AutonomousDatabaseLifecycleState = "Recreating"
	// AutonomousDatabaseLifecycleStateRestarting - Indicates that resource in Restarting state
	AutonomousDatabaseLifecycleStateRestarting AutonomousDatabaseLifecycleState = "Restarting"
	// AutonomousDatabaseLifecycleStateRestoreFailed - Indicates that resource in RestoreFailed state
	AutonomousDatabaseLifecycleStateRestoreFailed AutonomousDatabaseLifecycleState = "RestoreFailed"
	// AutonomousDatabaseLifecycleStateRestoreInProgress - Indicates that resource in RestoreInProgress state
	AutonomousDatabaseLifecycleStateRestoreInProgress AutonomousDatabaseLifecycleState = "RestoreInProgress"
	// AutonomousDatabaseLifecycleStateRoleChangeInProgress - Indicates that resource role change in progress state
	AutonomousDatabaseLifecycleStateRoleChangeInProgress AutonomousDatabaseLifecycleState = "RoleChangeInProgress"
	// AutonomousDatabaseLifecycleStateScaleInProgress - Indicates that resource in ScaleInProgress state
	AutonomousDatabaseLifecycleStateScaleInProgress AutonomousDatabaseLifecycleState = "ScaleInProgress"
	// AutonomousDatabaseLifecycleStateStandby - Indicates that resource in Standby state
	AutonomousDatabaseLifecycleStateStandby AutonomousDatabaseLifecycleState = "Standby"
	// AutonomousDatabaseLifecycleStateStarting - Indicates that resource in Starting state
	AutonomousDatabaseLifecycleStateStarting AutonomousDatabaseLifecycleState = "Starting"
	// AutonomousDatabaseLifecycleStateStopped - Indicates that resource in Stopped state
	AutonomousDatabaseLifecycleStateStopped AutonomousDatabaseLifecycleState = "Stopped"
	// AutonomousDatabaseLifecycleStateStopping - Indicates that resource in Stopping state
	AutonomousDatabaseLifecycleStateStopping AutonomousDatabaseLifecycleState = "Stopping"
	// AutonomousDatabaseLifecycleStateTerminated - Indicates that resource in Terminated state
	AutonomousDatabaseLifecycleStateTerminated AutonomousDatabaseLifecycleState = "Terminated"
	// AutonomousDatabaseLifecycleStateTerminating - Indicates that resource in Terminating state
	AutonomousDatabaseLifecycleStateTerminating AutonomousDatabaseLifecycleState = "Terminating"
	// AutonomousDatabaseLifecycleStateUnavailable - Indicates that resource in Unavailable state
	AutonomousDatabaseLifecycleStateUnavailable AutonomousDatabaseLifecycleState = "Unavailable"
	// AutonomousDatabaseLifecycleStateUpdating - Indicates that resource in Updating state
	AutonomousDatabaseLifecycleStateUpdating AutonomousDatabaseLifecycleState = "Updating"
	// AutonomousDatabaseLifecycleStateUpgrading - Indicates that resource in Upgrading state
	AutonomousDatabaseLifecycleStateUpgrading AutonomousDatabaseLifecycleState = "Upgrading"
)

// PossibleAutonomousDatabaseLifecycleStateValues returns the possible values for the AutonomousDatabaseLifecycleState const type.
func PossibleAutonomousDatabaseLifecycleStateValues() []AutonomousDatabaseLifecycleState {
	return []AutonomousDatabaseLifecycleState{
		AutonomousDatabaseLifecycleStateAvailable,
		AutonomousDatabaseLifecycleStateAvailableNeedsAttention,
		AutonomousDatabaseLifecycleStateBackupInProgress,
		AutonomousDatabaseLifecycleStateInaccessible,
		AutonomousDatabaseLifecycleStateMaintenanceInProgress,
		AutonomousDatabaseLifecycleStateProvisioning,
		AutonomousDatabaseLifecycleStateRecreating,
		AutonomousDatabaseLifecycleStateRestarting,
		AutonomousDatabaseLifecycleStateRestoreFailed,
		AutonomousDatabaseLifecycleStateRestoreInProgress,
		AutonomousDatabaseLifecycleStateRoleChangeInProgress,
		AutonomousDatabaseLifecycleStateScaleInProgress,
		AutonomousDatabaseLifecycleStateStandby,
		AutonomousDatabaseLifecycleStateStarting,
		AutonomousDatabaseLifecycleStateStopped,
		AutonomousDatabaseLifecycleStateStopping,
		AutonomousDatabaseLifecycleStateTerminated,
		AutonomousDatabaseLifecycleStateTerminating,
		AutonomousDatabaseLifecycleStateUnavailable,
		AutonomousDatabaseLifecycleStateUpdating,
		AutonomousDatabaseLifecycleStateUpgrading,
	}
}

// AutonomousMaintenanceScheduleType - Autonomous database maintenance schedule type enum.
type AutonomousMaintenanceScheduleType string

const (
	// AutonomousMaintenanceScheduleTypeEarly - Early maintenance schedule
	AutonomousMaintenanceScheduleTypeEarly AutonomousMaintenanceScheduleType = "Early"
	// AutonomousMaintenanceScheduleTypeRegular - Regular maintenance schedule
	AutonomousMaintenanceScheduleTypeRegular AutonomousMaintenanceScheduleType = "Regular"
)

// PossibleAutonomousMaintenanceScheduleTypeValues returns the possible values for the AutonomousMaintenanceScheduleType const type.
func PossibleAutonomousMaintenanceScheduleTypeValues() []AutonomousMaintenanceScheduleType {
	return []AutonomousMaintenanceScheduleType{
		AutonomousMaintenanceScheduleTypeEarly,
		AutonomousMaintenanceScheduleTypeRegular,
	}
}

// AzureResourceProvisioningState - Azure Resource Provisioning State enum
type AzureResourceProvisioningState string

const (
	// AzureResourceProvisioningStateCanceled - Resource creation was canceled.
	AzureResourceProvisioningStateCanceled AzureResourceProvisioningState = "Canceled"
	// AzureResourceProvisioningStateFailed - Resource creation failed.
	AzureResourceProvisioningStateFailed AzureResourceProvisioningState = "Failed"
	// AzureResourceProvisioningStateProvisioning - Indicates that resource in Provisioning state
	AzureResourceProvisioningStateProvisioning AzureResourceProvisioningState = "Provisioning"
	// AzureResourceProvisioningStateSucceeded - Resource has been created.
	AzureResourceProvisioningStateSucceeded AzureResourceProvisioningState = "Succeeded"
)

// PossibleAzureResourceProvisioningStateValues returns the possible values for the AzureResourceProvisioningState const type.
func PossibleAzureResourceProvisioningStateValues() []AzureResourceProvisioningState {
	return []AzureResourceProvisioningState{
		AzureResourceProvisioningStateCanceled,
		AzureResourceProvisioningStateFailed,
		AzureResourceProvisioningStateProvisioning,
		AzureResourceProvisioningStateSucceeded,
	}
}

// CloneType - Clone type enum
type CloneType string

const (
	// CloneTypeFull - Full clone
	CloneTypeFull CloneType = "Full"
	// CloneTypeMetadata - Metadata only
	CloneTypeMetadata CloneType = "Metadata"
)

// PossibleCloneTypeValues returns the possible values for the CloneType const type.
func PossibleCloneTypeValues() []CloneType {
	return []CloneType{
		CloneTypeFull,
		CloneTypeMetadata,
	}
}

// CloudAccountProvisioningState - CloudAccountProvisioningState enum
type CloudAccountProvisioningState string

const (
	// CloudAccountProvisioningStateAvailable - Available - State when Oracle cloud account cloud linking is complete and it is
	// available
	CloudAccountProvisioningStateAvailable CloudAccountProvisioningState = "Available"
	// CloudAccountProvisioningStatePending - Pending - Initial state when Oracle cloud account is not configured
	CloudAccountProvisioningStatePending CloudAccountProvisioningState = "Pending"
	// CloudAccountProvisioningStateProvisioning - Provisioning - State when Oracle cloud account is being provisioned
	CloudAccountProvisioningStateProvisioning CloudAccountProvisioningState = "Provisioning"
)

// PossibleCloudAccountProvisioningStateValues returns the possible values for the CloudAccountProvisioningState const type.
func PossibleCloudAccountProvisioningStateValues() []CloudAccountProvisioningState {
	return []CloudAccountProvisioningState{
		CloudAccountProvisioningStateAvailable,
		CloudAccountProvisioningStatePending,
		CloudAccountProvisioningStateProvisioning,
	}
}

// CloudExadataInfrastructureLifecycleState - CloudExadataInfrastructureLifecycleState enum
type CloudExadataInfrastructureLifecycleState string

const (
	// CloudExadataInfrastructureLifecycleStateAvailable - Indicates that resource in Available state
	CloudExadataInfrastructureLifecycleStateAvailable CloudExadataInfrastructureLifecycleState = "Available"
	// CloudExadataInfrastructureLifecycleStateFailed - Indicates that resource in Failed state
	CloudExadataInfrastructureLifecycleStateFailed CloudExadataInfrastructureLifecycleState = "Failed"
	// CloudExadataInfrastructureLifecycleStateMaintenanceInProgress - Indicates that resource maintenance in progress state
	CloudExadataInfrastructureLifecycleStateMaintenanceInProgress CloudExadataInfrastructureLifecycleState = "MaintenanceInProgress"
	// CloudExadataInfrastructureLifecycleStateProvisioning - Indicates that resource in Provisioning state
	CloudExadataInfrastructureLifecycleStateProvisioning CloudExadataInfrastructureLifecycleState = "Provisioning"
	// CloudExadataInfrastructureLifecycleStateTerminated - Indicates that resource in Terminated state
	CloudExadataInfrastructureLifecycleStateTerminated CloudExadataInfrastructureLifecycleState = "Terminated"
	// CloudExadataInfrastructureLifecycleStateTerminating - Indicates that resource in Terminating state
	CloudExadataInfrastructureLifecycleStateTerminating CloudExadataInfrastructureLifecycleState = "Terminating"
	// CloudExadataInfrastructureLifecycleStateUpdating - Indicates that resource in Updating state
	CloudExadataInfrastructureLifecycleStateUpdating CloudExadataInfrastructureLifecycleState = "Updating"
)

// PossibleCloudExadataInfrastructureLifecycleStateValues returns the possible values for the CloudExadataInfrastructureLifecycleState const type.
func PossibleCloudExadataInfrastructureLifecycleStateValues() []CloudExadataInfrastructureLifecycleState {
	return []CloudExadataInfrastructureLifecycleState{
		CloudExadataInfrastructureLifecycleStateAvailable,
		CloudExadataInfrastructureLifecycleStateFailed,
		CloudExadataInfrastructureLifecycleStateMaintenanceInProgress,
		CloudExadataInfrastructureLifecycleStateProvisioning,
		CloudExadataInfrastructureLifecycleStateTerminated,
		CloudExadataInfrastructureLifecycleStateTerminating,
		CloudExadataInfrastructureLifecycleStateUpdating,
	}
}

// CloudVMClusterLifecycleState - Cloud VM Cluster lifecycle state enum
type CloudVMClusterLifecycleState string

const (
	// CloudVMClusterLifecycleStateAvailable - Indicates that resource in Available state
	CloudVMClusterLifecycleStateAvailable CloudVMClusterLifecycleState = "Available"
	// CloudVMClusterLifecycleStateFailed - Indicates that resource in Failed state
	CloudVMClusterLifecycleStateFailed CloudVMClusterLifecycleState = "Failed"
	// CloudVMClusterLifecycleStateMaintenanceInProgress - Indicates that resource Maintenance in progress state
	CloudVMClusterLifecycleStateMaintenanceInProgress CloudVMClusterLifecycleState = "MaintenanceInProgress"
	// CloudVMClusterLifecycleStateProvisioning - Indicates that resource in Provisioning state
	CloudVMClusterLifecycleStateProvisioning CloudVMClusterLifecycleState = "Provisioning"
	// CloudVMClusterLifecycleStateTerminated - Indicates that resource in Terminated state
	CloudVMClusterLifecycleStateTerminated CloudVMClusterLifecycleState = "Terminated"
	// CloudVMClusterLifecycleStateTerminating - Indicates that resource in Terminating state
	CloudVMClusterLifecycleStateTerminating CloudVMClusterLifecycleState = "Terminating"
	// CloudVMClusterLifecycleStateUpdating - Indicates that resource in Updating state
	CloudVMClusterLifecycleStateUpdating CloudVMClusterLifecycleState = "Updating"
)

// PossibleCloudVMClusterLifecycleStateValues returns the possible values for the CloudVMClusterLifecycleState const type.
func PossibleCloudVMClusterLifecycleStateValues() []CloudVMClusterLifecycleState {
	return []CloudVMClusterLifecycleState{
		CloudVMClusterLifecycleStateAvailable,
		CloudVMClusterLifecycleStateFailed,
		CloudVMClusterLifecycleStateMaintenanceInProgress,
		CloudVMClusterLifecycleStateProvisioning,
		CloudVMClusterLifecycleStateTerminated,
		CloudVMClusterLifecycleStateTerminating,
		CloudVMClusterLifecycleStateUpdating,
	}
}

// ComputeModel - Compute model enum
type ComputeModel string

const (
	// ComputeModelECPU - ECPU model type
	ComputeModelECPU ComputeModel = "ECPU"
	// ComputeModelOCPU - OCPU model type
	ComputeModelOCPU ComputeModel = "OCPU"
)

// PossibleComputeModelValues returns the possible values for the ComputeModel const type.
func PossibleComputeModelValues() []ComputeModel {
	return []ComputeModel{
		ComputeModelECPU,
		ComputeModelOCPU,
	}
}

// ConsumerGroup - Consumer group enum.
type ConsumerGroup string

const (
	// ConsumerGroupHigh - High group
	ConsumerGroupHigh ConsumerGroup = "High"
	// ConsumerGroupLow - Low group
	ConsumerGroupLow ConsumerGroup = "Low"
	// ConsumerGroupMedium - Medium group
	ConsumerGroupMedium ConsumerGroup = "Medium"
	// ConsumerGroupTp - TP group
	ConsumerGroupTp ConsumerGroup = "Tp"
	// ConsumerGroupTpurgent - TPurgent group
	ConsumerGroupTpurgent ConsumerGroup = "Tpurgent"
)

// PossibleConsumerGroupValues returns the possible values for the ConsumerGroup const type.
func PossibleConsumerGroupValues() []ConsumerGroup {
	return []ConsumerGroup{
		ConsumerGroupHigh,
		ConsumerGroupLow,
		ConsumerGroupMedium,
		ConsumerGroupTp,
		ConsumerGroupTpurgent,
	}
}

// CreatedByType - The type of identity that created the resource.
type CreatedByType string

const (
	CreatedByTypeApplication     CreatedByType = "Application"
	CreatedByTypeKey             CreatedByType = "Key"
	CreatedByTypeManagedIdentity CreatedByType = "ManagedIdentity"
	CreatedByTypeUser            CreatedByType = "User"
)

// PossibleCreatedByTypeValues returns the possible values for the CreatedByType const type.
func PossibleCreatedByTypeValues() []CreatedByType {
	return []CreatedByType{
		CreatedByTypeApplication,
		CreatedByTypeKey,
		CreatedByTypeManagedIdentity,
		CreatedByTypeUser,
	}
}

// DNSPrivateViewsLifecycleState - DNS Private Views lifecycle state enum
type DNSPrivateViewsLifecycleState string

const (
	// DNSPrivateViewsLifecycleStateActive - DNS Private View is active
	DNSPrivateViewsLifecycleStateActive DNSPrivateViewsLifecycleState = "Active"
	// DNSPrivateViewsLifecycleStateDeleted - DNS Private View is deleted
	DNSPrivateViewsLifecycleStateDeleted DNSPrivateViewsLifecycleState = "Deleted"
	// DNSPrivateViewsLifecycleStateDeleting - DNS Private View is deleting
	DNSPrivateViewsLifecycleStateDeleting DNSPrivateViewsLifecycleState = "Deleting"
	// DNSPrivateViewsLifecycleStateUpdating - DNS Private View is updating
	DNSPrivateViewsLifecycleStateUpdating DNSPrivateViewsLifecycleState = "Updating"
)

// PossibleDNSPrivateViewsLifecycleStateValues returns the possible values for the DNSPrivateViewsLifecycleState const type.
func PossibleDNSPrivateViewsLifecycleStateValues() []DNSPrivateViewsLifecycleState {
	return []DNSPrivateViewsLifecycleState{
		DNSPrivateViewsLifecycleStateActive,
		DNSPrivateViewsLifecycleStateDeleted,
		DNSPrivateViewsLifecycleStateDeleting,
		DNSPrivateViewsLifecycleStateUpdating,
	}
}

// DNSPrivateZonesLifecycleState - DNS Private Zones lifecycle state enum
type DNSPrivateZonesLifecycleState string

const (
	// DNSPrivateZonesLifecycleStateActive - DNS Private Zones is active
	DNSPrivateZonesLifecycleStateActive DNSPrivateZonesLifecycleState = "Active"
	// DNSPrivateZonesLifecycleStateCreating - DNS Private Zones is creating
	DNSPrivateZonesLifecycleStateCreating DNSPrivateZonesLifecycleState = "Creating"
	// DNSPrivateZonesLifecycleStateDeleted - DNS Private Zones is deleted
	DNSPrivateZonesLifecycleStateDeleted DNSPrivateZonesLifecycleState = "Deleted"
	// DNSPrivateZonesLifecycleStateDeleting - DNS Private Zones is deleting
	DNSPrivateZonesLifecycleStateDeleting DNSPrivateZonesLifecycleState = "Deleting"
	// DNSPrivateZonesLifecycleStateUpdating - DNS Private Zones is updating
	DNSPrivateZonesLifecycleStateUpdating DNSPrivateZonesLifecycleState = "Updating"
)

// PossibleDNSPrivateZonesLifecycleStateValues returns the possible values for the DNSPrivateZonesLifecycleState const type.
func PossibleDNSPrivateZonesLifecycleStateValues() []DNSPrivateZonesLifecycleState {
	return []DNSPrivateZonesLifecycleState{
		DNSPrivateZonesLifecycleStateActive,
		DNSPrivateZonesLifecycleStateCreating,
		DNSPrivateZonesLifecycleStateDeleted,
		DNSPrivateZonesLifecycleStateDeleting,
		DNSPrivateZonesLifecycleStateUpdating,
	}
}

// DataBaseType - Database type enum
type DataBaseType string

const (
	// DataBaseTypeClone - Clone DB
	DataBaseTypeClone DataBaseType = "Clone"
	// DataBaseTypeRegular - Regular DB
	DataBaseTypeRegular DataBaseType = "Regular"
)

// PossibleDataBaseTypeValues returns the possible values for the DataBaseType const type.
func PossibleDataBaseTypeValues() []DataBaseType {
	return []DataBaseType{
		DataBaseTypeClone,
		DataBaseTypeRegular,
	}
}

// DataSafeStatusType - DataSafe status type enum.
type DataSafeStatusType string

const (
	// DataSafeStatusTypeDeregistering - Deregistering status
	DataSafeStatusTypeDeregistering DataSafeStatusType = "Deregistering"
	// DataSafeStatusTypeFailed - Failed status
	DataSafeStatusTypeFailed DataSafeStatusType = "Failed"
	// DataSafeStatusTypeNotRegistered - NotRegistered status
	DataSafeStatusTypeNotRegistered DataSafeStatusType = "NotRegistered"
	// DataSafeStatusTypeRegistered - Registered status
	DataSafeStatusTypeRegistered DataSafeStatusType = "Registered"
	// DataSafeStatusTypeRegistering - Registering status
	DataSafeStatusTypeRegistering DataSafeStatusType = "Registering"
)

// PossibleDataSafeStatusTypeValues returns the possible values for the DataSafeStatusType const type.
func PossibleDataSafeStatusTypeValues() []DataSafeStatusType {
	return []DataSafeStatusType{
		DataSafeStatusTypeDeregistering,
		DataSafeStatusTypeFailed,
		DataSafeStatusTypeNotRegistered,
		DataSafeStatusTypeRegistered,
		DataSafeStatusTypeRegistering,
	}
}

// DatabaseEditionType - Database edition type enum.
type DatabaseEditionType string

const (
	// DatabaseEditionTypeEnterpriseEdition - Enterprise edition
	DatabaseEditionTypeEnterpriseEdition DatabaseEditionType = "EnterpriseEdition"
	// DatabaseEditionTypeStandardEdition - Standard edition
	DatabaseEditionTypeStandardEdition DatabaseEditionType = "StandardEdition"
)

// PossibleDatabaseEditionTypeValues returns the possible values for the DatabaseEditionType const type.
func PossibleDatabaseEditionTypeValues() []DatabaseEditionType {
	return []DatabaseEditionType{
		DatabaseEditionTypeEnterpriseEdition,
		DatabaseEditionTypeStandardEdition,
	}
}

// DayOfWeekName - DayOfWeekName enum
type DayOfWeekName string

const (
	// DayOfWeekNameFriday - Friday value
	DayOfWeekNameFriday DayOfWeekName = "Friday"
	// DayOfWeekNameMonday - Monday value
	DayOfWeekNameMonday DayOfWeekName = "Monday"
	// DayOfWeekNameSaturday - Saturday value
	DayOfWeekNameSaturday DayOfWeekName = "Saturday"
	// DayOfWeekNameSunday - Sunday value
	DayOfWeekNameSunday DayOfWeekName = "Sunday"
	// DayOfWeekNameThursday - Thursday value
	DayOfWeekNameThursday DayOfWeekName = "Thursday"
	// DayOfWeekNameTuesday - Tuesday value
	DayOfWeekNameTuesday DayOfWeekName = "Tuesday"
	// DayOfWeekNameWednesday - Wednesday value
	DayOfWeekNameWednesday DayOfWeekName = "Wednesday"
)

// PossibleDayOfWeekNameValues returns the possible values for the DayOfWeekName const type.
func PossibleDayOfWeekNameValues() []DayOfWeekName {
	return []DayOfWeekName{
		DayOfWeekNameFriday,
		DayOfWeekNameMonday,
		DayOfWeekNameSaturday,
		DayOfWeekNameSunday,
		DayOfWeekNameThursday,
		DayOfWeekNameTuesday,
		DayOfWeekNameWednesday,
	}
}

// DbNodeActionEnum - DbNode action enum
type DbNodeActionEnum string

const (
	// DbNodeActionEnumReset - Reset DbNode
	DbNodeActionEnumReset DbNodeActionEnum = "Reset"
	// DbNodeActionEnumSoftReset - Soft reset DbNode
	DbNodeActionEnumSoftReset DbNodeActionEnum = "SoftReset"
	// DbNodeActionEnumStart - Start DbNode
	DbNodeActionEnumStart DbNodeActionEnum = "Start"
	// DbNodeActionEnumStop - Stop DbNode
	DbNodeActionEnumStop DbNodeActionEnum = "Stop"
)

// PossibleDbNodeActionEnumValues returns the possible values for the DbNodeActionEnum const type.
func PossibleDbNodeActionEnumValues() []DbNodeActionEnum {
	return []DbNodeActionEnum{
		DbNodeActionEnumReset,
		DbNodeActionEnumSoftReset,
		DbNodeActionEnumStart,
		DbNodeActionEnumStop,
	}
}

// DbNodeMaintenanceType - The type of database node maintenance.
type DbNodeMaintenanceType string

const (
	// DbNodeMaintenanceTypeVmdbRebootMigration - VMDB reboot migration maintenance type
	DbNodeMaintenanceTypeVmdbRebootMigration DbNodeMaintenanceType = "VmdbRebootMigration"
)

// PossibleDbNodeMaintenanceTypeValues returns the possible values for the DbNodeMaintenanceType const type.
func PossibleDbNodeMaintenanceTypeValues() []DbNodeMaintenanceType {
	return []DbNodeMaintenanceType{
		DbNodeMaintenanceTypeVmdbRebootMigration,
	}
}

// DbNodeProvisioningState - DnNode provisioning state enum
type DbNodeProvisioningState string

const (
	// DbNodeProvisioningStateAvailable - Indicates that resource in Available state
	DbNodeProvisioningStateAvailable DbNodeProvisioningState = "Available"
	// DbNodeProvisioningStateFailed - Indicates that resource in Failed state
	DbNodeProvisioningStateFailed DbNodeProvisioningState = "Failed"
	// DbNodeProvisioningStateProvisioning - Indicates that resource in Provisioning state
	DbNodeProvisioningStateProvisioning DbNodeProvisioningState = "Provisioning"
	// DbNodeProvisioningStateStarting - Indicates that resource in Starting state
	DbNodeProvisioningStateStarting DbNodeProvisioningState = "Starting"
	// DbNodeProvisioningStateStopped - Indicates that resource in Stopped state
	DbNodeProvisioningStateStopped DbNodeProvisioningState = "Stopped"
	// DbNodeProvisioningStateStopping - Indicates that resource in Stopping state
	DbNodeProvisioningStateStopping DbNodeProvisioningState = "Stopping"
	// DbNodeProvisioningStateTerminated - Indicates that resource in Terminated state
	DbNodeProvisioningStateTerminated DbNodeProvisioningState = "Terminated"
	// DbNodeProvisioningStateTerminating - Indicates that resource in Terminating state
	DbNodeProvisioningStateTerminating DbNodeProvisioningState = "Terminating"
	// DbNodeProvisioningStateUpdating - Indicates that resource in Updating state
	DbNodeProvisioningStateUpdating DbNodeProvisioningState = "Updating"
)

// PossibleDbNodeProvisioningStateValues returns the possible values for the DbNodeProvisioningState const type.
func PossibleDbNodeProvisioningStateValues() []DbNodeProvisioningState {
	return []DbNodeProvisioningState{
		DbNodeProvisioningStateAvailable,
		DbNodeProvisioningStateFailed,
		DbNodeProvisioningStateProvisioning,
		DbNodeProvisioningStateStarting,
		DbNodeProvisioningStateStopped,
		DbNodeProvisioningStateStopping,
		DbNodeProvisioningStateTerminated,
		DbNodeProvisioningStateTerminating,
		DbNodeProvisioningStateUpdating,
	}
}

// DbServerPatchingStatus - DB Server patching status enum
type DbServerPatchingStatus string

const (
	// DbServerPatchingStatusComplete - Patching completed
	DbServerPatchingStatusComplete DbServerPatchingStatus = "Complete"
	// DbServerPatchingStatusFailed - Patching failed
	DbServerPatchingStatusFailed DbServerPatchingStatus = "Failed"
	// DbServerPatchingStatusMaintenanceInProgress - Patching in progress
	DbServerPatchingStatusMaintenanceInProgress DbServerPatchingStatus = "MaintenanceInProgress"
	// DbServerPatchingStatusScheduled - Patching scheduled
	DbServerPatchingStatusScheduled DbServerPatchingStatus = "Scheduled"
)

// PossibleDbServerPatchingStatusValues returns the possible values for the DbServerPatchingStatus const type.
func PossibleDbServerPatchingStatusValues() []DbServerPatchingStatus {
	return []DbServerPatchingStatus{
		DbServerPatchingStatusComplete,
		DbServerPatchingStatusFailed,
		DbServerPatchingStatusMaintenanceInProgress,
		DbServerPatchingStatusScheduled,
	}
}

// DbServerProvisioningState - DbServerProvisioningState enum
type DbServerProvisioningState string

const (
	// DbServerProvisioningStateAvailable - Indicates that resource in Available state
	DbServerProvisioningStateAvailable DbServerProvisioningState = "Available"
	// DbServerProvisioningStateCreating - Indicates that resource in Creating state
	DbServerProvisioningStateCreating DbServerProvisioningState = "Creating"
	// DbServerProvisioningStateDeleted - Indicates that resource in Deleted state
	DbServerProvisioningStateDeleted DbServerProvisioningState = "Deleted"
	// DbServerProvisioningStateDeleting - Indicates that resource in Deleting state
	DbServerProvisioningStateDeleting DbServerProvisioningState = "Deleting"
	// DbServerProvisioningStateMaintenanceInProgress - Indicates that resource maintenance in progress state
	DbServerProvisioningStateMaintenanceInProgress DbServerProvisioningState = "MaintenanceInProgress"
	// DbServerProvisioningStateUnavailable - Indicates that resource in Unavailable state
	DbServerProvisioningStateUnavailable DbServerProvisioningState = "Unavailable"
)

// PossibleDbServerProvisioningStateValues returns the possible values for the DbServerProvisioningState const type.
func PossibleDbServerProvisioningStateValues() []DbServerProvisioningState {
	return []DbServerProvisioningState{
		DbServerProvisioningStateAvailable,
		DbServerProvisioningStateCreating,
		DbServerProvisioningStateDeleted,
		DbServerProvisioningStateDeleting,
		DbServerProvisioningStateMaintenanceInProgress,
		DbServerProvisioningStateUnavailable,
	}
}

// DisasterRecoveryType - Disaster recovery type enum.
type DisasterRecoveryType string

const (
	// DisasterRecoveryTypeAdg - ADG type
	DisasterRecoveryTypeAdg DisasterRecoveryType = "Adg"
	// DisasterRecoveryTypeBackupBased - Backup based type
	DisasterRecoveryTypeBackupBased DisasterRecoveryType = "BackupBased"
)

// PossibleDisasterRecoveryTypeValues returns the possible values for the DisasterRecoveryType const type.
func PossibleDisasterRecoveryTypeValues() []DisasterRecoveryType {
	return []DisasterRecoveryType{
		DisasterRecoveryTypeAdg,
		DisasterRecoveryTypeBackupBased,
	}
}

// DiskRedundancy - Disk redundancy enum
type DiskRedundancy string

const (
	// DiskRedundancyHigh - High redundancy
	DiskRedundancyHigh DiskRedundancy = "High"
	// DiskRedundancyNormal - Normal redundancy
	DiskRedundancyNormal DiskRedundancy = "Normal"
)

// PossibleDiskRedundancyValues returns the possible values for the DiskRedundancy const type.
func PossibleDiskRedundancyValues() []DiskRedundancy {
	return []DiskRedundancy{
		DiskRedundancyHigh,
		DiskRedundancyNormal,
	}
}

// GenerateType - Generate type enum
type GenerateType string

const (
	// GenerateTypeAll - Generate all
	GenerateTypeAll GenerateType = "All"
	// GenerateTypeSingle - Generate single
	GenerateTypeSingle GenerateType = "Single"
)

// PossibleGenerateTypeValues returns the possible values for the GenerateType const type.
func PossibleGenerateTypeValues() []GenerateType {
	return []GenerateType{
		GenerateTypeAll,
		GenerateTypeSingle,
	}
}

// HostFormatType - Host format type enum.
type HostFormatType string

const (
	// HostFormatTypeFqdn - FQDN format
	HostFormatTypeFqdn HostFormatType = "Fqdn"
	// HostFormatTypeIP - IP format
	HostFormatTypeIP HostFormatType = "Ip"
)

// PossibleHostFormatTypeValues returns the possible values for the HostFormatType const type.
func PossibleHostFormatTypeValues() []HostFormatType {
	return []HostFormatType{
		HostFormatTypeFqdn,
		HostFormatTypeIP,
	}
}

// Intent - Intent enum
type Intent string

const (
	// IntentReset - Reset intent
	IntentReset Intent = "Reset"
	// IntentRetain - Retain intent
	IntentRetain Intent = "Retain"
)

// PossibleIntentValues returns the possible values for the Intent const type.
func PossibleIntentValues() []Intent {
	return []Intent{
		IntentReset,
		IntentRetain,
	}
}

// IormLifecycleState - ORM lifecycle state enum
type IormLifecycleState string

const (
	// IormLifecycleStateBootStrapping - Indicates that resource in Provisioning state
	IormLifecycleStateBootStrapping IormLifecycleState = "BootStrapping"
	// IormLifecycleStateDisabled - Indicates that resource in Disabled state
	IormLifecycleStateDisabled IormLifecycleState = "Disabled"
	// IormLifecycleStateEnabled - Indicates that resource in Enabled state
	IormLifecycleStateEnabled IormLifecycleState = "Enabled"
	// IormLifecycleStateFailed - Indicates that resource in Failed state
	IormLifecycleStateFailed IormLifecycleState = "Failed"
	// IormLifecycleStateUpdating - Indicates that resource in Updating state
	IormLifecycleStateUpdating IormLifecycleState = "Updating"
)

// PossibleIormLifecycleStateValues returns the possible values for the IormLifecycleState const type.
func PossibleIormLifecycleStateValues() []IormLifecycleState {
	return []IormLifecycleState{
		IormLifecycleStateBootStrapping,
		IormLifecycleStateDisabled,
		IormLifecycleStateEnabled,
		IormLifecycleStateFailed,
		IormLifecycleStateUpdating,
	}
}

// LicenseModel - LicenseModel enum
type LicenseModel string

const (
	// LicenseModelBringYourOwnLicense - Bring Your Own License
	LicenseModelBringYourOwnLicense LicenseModel = "BringYourOwnLicense"
	// LicenseModelLicenseIncluded - License included
	LicenseModelLicenseIncluded LicenseModel = "LicenseIncluded"
)

// PossibleLicenseModelValues returns the possible values for the LicenseModel const type.
func PossibleLicenseModelValues() []LicenseModel {
	return []LicenseModel{
		LicenseModelBringYourOwnLicense,
		LicenseModelLicenseIncluded,
	}
}

// MonthName - MonthName enum
type MonthName string

const (
	// MonthNameApril - April value
	MonthNameApril MonthName = "April"
	// MonthNameAugust - August value
	MonthNameAugust MonthName = "August"
	// MonthNameDecember - December value
	MonthNameDecember MonthName = "December"
	// MonthNameFebruary - February value
	MonthNameFebruary MonthName = "February"
	// MonthNameJanuary - January value
	MonthNameJanuary MonthName = "January"
	// MonthNameJuly - July value
	MonthNameJuly MonthName = "July"
	// MonthNameJune - June value
	MonthNameJune MonthName = "June"
	// MonthNameMarch - March value
	MonthNameMarch MonthName = "March"
	// MonthNameMay - May value
	MonthNameMay MonthName = "May"
	// MonthNameNovember - November value
	MonthNameNovember MonthName = "November"
	// MonthNameOctober - October value
	MonthNameOctober MonthName = "October"
	// MonthNameSeptember - September value
	MonthNameSeptember MonthName = "September"
)

// PossibleMonthNameValues returns the possible values for the MonthName const type.
func PossibleMonthNameValues() []MonthName {
	return []MonthName{
		MonthNameApril,
		MonthNameAugust,
		MonthNameDecember,
		MonthNameFebruary,
		MonthNameJanuary,
		MonthNameJuly,
		MonthNameJune,
		MonthNameMarch,
		MonthNameMay,
		MonthNameNovember,
		MonthNameOctober,
		MonthNameSeptember,
	}
}

// Objective - Objective enum
type Objective string

const (
	// ObjectiveAuto - Auto objective
	ObjectiveAuto Objective = "Auto"
	// ObjectiveBalanced - Balanced objective
	ObjectiveBalanced Objective = "Balanced"
	// ObjectiveBasic - Basic objective
	ObjectiveBasic Objective = "Basic"
	// ObjectiveHighThroughput - High throughput objective
	ObjectiveHighThroughput Objective = "HighThroughput"
	// ObjectiveLowLatency - Low latency objective
	ObjectiveLowLatency Objective = "LowLatency"
)

// PossibleObjectiveValues returns the possible values for the Objective const type.
func PossibleObjectiveValues() []Objective {
	return []Objective{
		ObjectiveAuto,
		ObjectiveBalanced,
		ObjectiveBasic,
		ObjectiveHighThroughput,
		ObjectiveLowLatency,
	}
}

// OpenModeType - Open mode type enum.
type OpenModeType string

const (
	// OpenModeTypeReadOnly - ReadOnly mode
	OpenModeTypeReadOnly OpenModeType = "ReadOnly"
	// OpenModeTypeReadWrite - ReadWrite mode
	OpenModeTypeReadWrite OpenModeType = "ReadWrite"
)

// PossibleOpenModeTypeValues returns the possible values for the OpenModeType const type.
func PossibleOpenModeTypeValues() []OpenModeType {
	return []OpenModeType{
		OpenModeTypeReadOnly,
		OpenModeTypeReadWrite,
	}
}

// OperationsInsightsStatusType - Operations Insights status type enum.
type OperationsInsightsStatusType string

const (
	// OperationsInsightsStatusTypeDisabling - Disabling status
	OperationsInsightsStatusTypeDisabling OperationsInsightsStatusType = "Disabling"
	// OperationsInsightsStatusTypeEnabled - Enabled status
	OperationsInsightsStatusTypeEnabled OperationsInsightsStatusType = "Enabled"
	// OperationsInsightsStatusTypeEnabling - Enabling status
	OperationsInsightsStatusTypeEnabling OperationsInsightsStatusType = "Enabling"
	// OperationsInsightsStatusTypeFailedDisabling - FailedDisabling status
	OperationsInsightsStatusTypeFailedDisabling OperationsInsightsStatusType = "FailedDisabling"
	// OperationsInsightsStatusTypeFailedEnabling - FailedEnabling status
	OperationsInsightsStatusTypeFailedEnabling OperationsInsightsStatusType = "FailedEnabling"
	// OperationsInsightsStatusTypeNotEnabled - NotEnabled status
	OperationsInsightsStatusTypeNotEnabled OperationsInsightsStatusType = "NotEnabled"
)

// PossibleOperationsInsightsStatusTypeValues returns the possible values for the OperationsInsightsStatusType const type.
func PossibleOperationsInsightsStatusTypeValues() []OperationsInsightsStatusType {
	return []OperationsInsightsStatusType{
		OperationsInsightsStatusTypeDisabling,
		OperationsInsightsStatusTypeEnabled,
		OperationsInsightsStatusTypeEnabling,
		OperationsInsightsStatusTypeFailedDisabling,
		OperationsInsightsStatusTypeFailedEnabling,
		OperationsInsightsStatusTypeNotEnabled,
	}
}

// OracleSubscriptionProvisioningState - OracleSubscriptionProvisioningState enum
type OracleSubscriptionProvisioningState string

const (
	// OracleSubscriptionProvisioningStateCanceled - Resource creation was canceled.
	OracleSubscriptionProvisioningStateCanceled OracleSubscriptionProvisioningState = "Canceled"
	// OracleSubscriptionProvisioningStateFailed - Resource creation failed.
	OracleSubscriptionProvisioningStateFailed OracleSubscriptionProvisioningState = "Failed"
	// OracleSubscriptionProvisioningStateSucceeded - Resource has been created.
	OracleSubscriptionProvisioningStateSucceeded OracleSubscriptionProvisioningState = "Succeeded"
)

// PossibleOracleSubscriptionProvisioningStateValues returns the possible values for the OracleSubscriptionProvisioningState const type.
func PossibleOracleSubscriptionProvisioningStateValues() []OracleSubscriptionProvisioningState {
	return []OracleSubscriptionProvisioningState{
		OracleSubscriptionProvisioningStateCanceled,
		OracleSubscriptionProvisioningStateFailed,
		OracleSubscriptionProvisioningStateSucceeded,
	}
}

// Origin - The intended executor of the operation; as in Resource Based Access Control (RBAC) and audit logs UX. Default
// value is "user,system"
type Origin string

const (
	OriginSystem     Origin = "system"
	OriginUser       Origin = "user"
	OriginUserSystem Origin = "user,system"
)

// PossibleOriginValues returns the possible values for the Origin const type.
func PossibleOriginValues() []Origin {
	return []Origin{
		OriginSystem,
		OriginUser,
		OriginUserSystem,
	}
}

// PatchingMode - Patching mode enum
type PatchingMode string

const (
	// PatchingModeNonRolling - Non Rolling patching
	PatchingModeNonRolling PatchingMode = "NonRolling"
	// PatchingModeRolling - Rolling patching
	PatchingModeRolling PatchingMode = "Rolling"
)

// PossiblePatchingModeValues returns the possible values for the PatchingMode const type.
func PossiblePatchingModeValues() []PatchingMode {
	return []PatchingMode{
		PatchingModeNonRolling,
		PatchingModeRolling,
	}
}

// PermissionLevelType - Permission level type enum.
type PermissionLevelType string

const (
	// PermissionLevelTypeRestricted - Restricted permission level
	PermissionLevelTypeRestricted PermissionLevelType = "Restricted"
	// PermissionLevelTypeUnrestricted - Unrestricted permission level
	PermissionLevelTypeUnrestricted PermissionLevelType = "Unrestricted"
)

// PossiblePermissionLevelTypeValues returns the possible values for the PermissionLevelType const type.
func PossiblePermissionLevelTypeValues() []PermissionLevelType {
	return []PermissionLevelType{
		PermissionLevelTypeRestricted,
		PermissionLevelTypeUnrestricted,
	}
}

// Preference - Preference enum
type Preference string

const (
	// PreferenceCustomPreference - Custom preference
	PreferenceCustomPreference Preference = "CustomPreference"
	// PreferenceNoPreference - No preference
	PreferenceNoPreference Preference = "NoPreference"
)

// PossiblePreferenceValues returns the possible values for the Preference const type.
func PossiblePreferenceValues() []Preference {
	return []Preference{
		PreferenceCustomPreference,
		PreferenceNoPreference,
	}
}

// ProtocolType - Protocol type enum.
type ProtocolType string

const (
	// ProtocolTypeTCP - TCP protocol
	ProtocolTypeTCP ProtocolType = "TCP"
	// ProtocolTypeTCPS - TCPS protocol
	ProtocolTypeTCPS ProtocolType = "TCPS"
)

// PossibleProtocolTypeValues returns the possible values for the ProtocolType const type.
func PossibleProtocolTypeValues() []ProtocolType {
	return []ProtocolType{
		ProtocolTypeTCP,
		ProtocolTypeTCPS,
	}
}

// RefreshableModelType - Refreshable model type enum
type RefreshableModelType string

const (
	// RefreshableModelTypeAutomatic - Automatic refreshable model type
	RefreshableModelTypeAutomatic RefreshableModelType = "Automatic"
	// RefreshableModelTypeManual - Manual refreshable model type
	RefreshableModelTypeManual RefreshableModelType = "Manual"
)

// PossibleRefreshableModelTypeValues returns the possible values for the RefreshableModelType const type.
func PossibleRefreshableModelTypeValues() []RefreshableModelType {
	return []RefreshableModelType{
		RefreshableModelTypeAutomatic,
		RefreshableModelTypeManual,
	}
}

// RefreshableStatusType - Refreshable status type enum.
type RefreshableStatusType string

const (
	// RefreshableStatusTypeNotRefreshing - NotRefreshing status
	RefreshableStatusTypeNotRefreshing RefreshableStatusType = "NotRefreshing"
	// RefreshableStatusTypeRefreshing - Refreshing status
	RefreshableStatusTypeRefreshing RefreshableStatusType = "Refreshing"
)

// PossibleRefreshableStatusTypeValues returns the possible values for the RefreshableStatusType const type.
func PossibleRefreshableStatusTypeValues() []RefreshableStatusType {
	return []RefreshableStatusType{
		RefreshableStatusTypeNotRefreshing,
		RefreshableStatusTypeRefreshing,
	}
}

// RepeatCadenceType - Repeat cadence type enum
type RepeatCadenceType string

const (
	// RepeatCadenceTypeMonthly - Repeat monthly
	RepeatCadenceTypeMonthly RepeatCadenceType = "Monthly"
	// RepeatCadenceTypeOneTime - Repeat one time
	RepeatCadenceTypeOneTime RepeatCadenceType = "OneTime"
	// RepeatCadenceTypeWeekly - Repeat weekly
	RepeatCadenceTypeWeekly RepeatCadenceType = "Weekly"
	// RepeatCadenceTypeYearly - Repeat yearly
	RepeatCadenceTypeYearly RepeatCadenceType = "Yearly"
)

// PossibleRepeatCadenceTypeValues returns the possible values for the RepeatCadenceType const type.
func PossibleRepeatCadenceTypeValues() []RepeatCadenceType {
	return []RepeatCadenceType{
		RepeatCadenceTypeMonthly,
		RepeatCadenceTypeOneTime,
		RepeatCadenceTypeWeekly,
		RepeatCadenceTypeYearly,
	}
}

// ResourceProvisioningState - The provisioning state of a resource type.
type ResourceProvisioningState string

const (
	// ResourceProvisioningStateCanceled - Resource creation was canceled.
	ResourceProvisioningStateCanceled ResourceProvisioningState = "Canceled"
	// ResourceProvisioningStateFailed - Resource creation failed.
	ResourceProvisioningStateFailed ResourceProvisioningState = "Failed"
	// ResourceProvisioningStateSucceeded - Resource has been created.
	ResourceProvisioningStateSucceeded ResourceProvisioningState = "Succeeded"
)

// PossibleResourceProvisioningStateValues returns the possible values for the ResourceProvisioningState const type.
func PossibleResourceProvisioningStateValues() []ResourceProvisioningState {
	return []ResourceProvisioningState{
		ResourceProvisioningStateCanceled,
		ResourceProvisioningStateFailed,
		ResourceProvisioningStateSucceeded,
	}
}

// RoleType - Role type enum.
type RoleType string

const (
	// RoleTypeBackupCopy - BackupCopy role
	RoleTypeBackupCopy RoleType = "BackupCopy"
	// RoleTypeDisabledStandby - DisabledStandby role
	RoleTypeDisabledStandby RoleType = "DisabledStandby"
	// RoleTypePrimary - Primary role
	RoleTypePrimary RoleType = "Primary"
	// RoleTypeSnapshotStandby - SnapshotStandby role
	RoleTypeSnapshotStandby RoleType = "SnapshotStandby"
	// RoleTypeStandby - Standby role
	RoleTypeStandby RoleType = "Standby"
)

// PossibleRoleTypeValues returns the possible values for the RoleType const type.
func PossibleRoleTypeValues() []RoleType {
	return []RoleType{
		RoleTypeBackupCopy,
		RoleTypeDisabledStandby,
		RoleTypePrimary,
		RoleTypeSnapshotStandby,
		RoleTypeStandby,
	}
}

// SessionModeType - Session mode type enum.
type SessionModeType string

const (
	// SessionModeTypeDirect - Direct session mode
	SessionModeTypeDirect SessionModeType = "Direct"
	// SessionModeTypeRedirect - Redirect session mode
	SessionModeTypeRedirect SessionModeType = "Redirect"
)

// PossibleSessionModeTypeValues returns the possible values for the SessionModeType const type.
func PossibleSessionModeTypeValues() []SessionModeType {
	return []SessionModeType{
		SessionModeTypeDirect,
		SessionModeTypeRedirect,
	}
}

// SourceType - Source type enum.
type SourceType string

const (
	// SourceTypeBackupFromID - Backup from ID source
	SourceTypeBackupFromID SourceType = "BackupFromId"
	// SourceTypeBackupFromTimestamp - Backup from timestamp source
	SourceTypeBackupFromTimestamp SourceType = "BackupFromTimestamp"
	// SourceTypeCloneToRefreshable - Clone to refreshable source
	SourceTypeCloneToRefreshable SourceType = "CloneToRefreshable"
	// SourceTypeCrossRegionDataguard - Cross region dataguard source
	SourceTypeCrossRegionDataguard SourceType = "CrossRegionDataguard"
	// SourceTypeCrossRegionDisasterRecovery - cross region disaster recovery source
	SourceTypeCrossRegionDisasterRecovery SourceType = "CrossRegionDisasterRecovery"
	// SourceTypeDatabase - Database source
	SourceTypeDatabase SourceType = "Database"
	// SourceTypeNone - None source
	SourceTypeNone SourceType = "None"
)

// PossibleSourceTypeValues returns the possible values for the SourceType const type.
func PossibleSourceTypeValues() []SourceType {
	return []SourceType{
		SourceTypeBackupFromID,
		SourceTypeBackupFromTimestamp,
		SourceTypeCloneToRefreshable,
		SourceTypeCrossRegionDataguard,
		SourceTypeCrossRegionDisasterRecovery,
		SourceTypeDatabase,
		SourceTypeNone,
	}
}

// SyntaxFormatType - Syntax format type enum.
type SyntaxFormatType string

const (
	// SyntaxFormatTypeEzconnect - Ezconnect format
	SyntaxFormatTypeEzconnect SyntaxFormatType = "Ezconnect"
	// SyntaxFormatTypeEzconnectplus - Ezconnectplus format
	SyntaxFormatTypeEzconnectplus SyntaxFormatType = "Ezconnectplus"
	// SyntaxFormatTypeLong - Long format
	SyntaxFormatTypeLong SyntaxFormatType = "Long"
)

// PossibleSyntaxFormatTypeValues returns the possible values for the SyntaxFormatType const type.
func PossibleSyntaxFormatTypeValues() []SyntaxFormatType {
	return []SyntaxFormatType{
		SyntaxFormatTypeEzconnect,
		SyntaxFormatTypeEzconnectplus,
		SyntaxFormatTypeLong,
	}
}

// TLSAuthenticationType - TLS authentication type enum.
type TLSAuthenticationType string

const (
	// TLSAuthenticationTypeMutual - Mutual TLS
	TLSAuthenticationTypeMutual TLSAuthenticationType = "Mutual"
	// TLSAuthenticationTypeServer - Server authentication
	TLSAuthenticationTypeServer TLSAuthenticationType = "Server"
)

// PossibleTLSAuthenticationTypeValues returns the possible values for the TLSAuthenticationType const type.
func PossibleTLSAuthenticationTypeValues() []TLSAuthenticationType {
	return []TLSAuthenticationType{
		TLSAuthenticationTypeMutual,
		TLSAuthenticationTypeServer,
	}
}

// VirtualNetworkAddressLifecycleState - VirtualNetworkAddressLifecycleState enum
type VirtualNetworkAddressLifecycleState string

const (
	// VirtualNetworkAddressLifecycleStateAvailable - Indicates that resource in Available state
	VirtualNetworkAddressLifecycleStateAvailable VirtualNetworkAddressLifecycleState = "Available"
	// VirtualNetworkAddressLifecycleStateFailed - Indicates that resource in Failed state
	VirtualNetworkAddressLifecycleStateFailed VirtualNetworkAddressLifecycleState = "Failed"
	// VirtualNetworkAddressLifecycleStateProvisioning - Indicates that resource in Provisioning state
	VirtualNetworkAddressLifecycleStateProvisioning VirtualNetworkAddressLifecycleState = "Provisioning"
	// VirtualNetworkAddressLifecycleStateTerminated - Indicates that resource in Terminated state
	VirtualNetworkAddressLifecycleStateTerminated VirtualNetworkAddressLifecycleState = "Terminated"
	// VirtualNetworkAddressLifecycleStateTerminating - Indicates that resource in Terminating state
	VirtualNetworkAddressLifecycleStateTerminating VirtualNetworkAddressLifecycleState = "Terminating"
)

// PossibleVirtualNetworkAddressLifecycleStateValues returns the possible values for the VirtualNetworkAddressLifecycleState const type.
func PossibleVirtualNetworkAddressLifecycleStateValues() []VirtualNetworkAddressLifecycleState {
	return []VirtualNetworkAddressLifecycleState{
		VirtualNetworkAddressLifecycleStateAvailable,
		VirtualNetworkAddressLifecycleStateFailed,
		VirtualNetworkAddressLifecycleStateProvisioning,
		VirtualNetworkAddressLifecycleStateTerminated,
		VirtualNetworkAddressLifecycleStateTerminating,
	}
}

// WorkloadType - WorkloadType enum
type WorkloadType string

const (
	// WorkloadTypeAJD - AJD - indicates an Autonomous JSON Database
	WorkloadTypeAJD WorkloadType = "AJD"
	// WorkloadTypeAPEX - APEX - indicates an Autonomous Database with the Oracle APEX Application Development workload type.
	WorkloadTypeAPEX WorkloadType = "APEX"
	// WorkloadTypeDW - DW - indicates an Autonomous Data Warehouse database
	WorkloadTypeDW WorkloadType = "DW"
	// WorkloadTypeOLTP - OLTP - indicates an Autonomous Transaction Processing database
	WorkloadTypeOLTP WorkloadType = "OLTP"
)

// PossibleWorkloadTypeValues returns the possible values for the WorkloadType const type.
func PossibleWorkloadTypeValues() []WorkloadType {
	return []WorkloadType{
		WorkloadTypeAJD,
		WorkloadTypeAPEX,
		WorkloadTypeDW,
		WorkloadTypeOLTP,
	}
}

// ZoneType - Zone type enum
type ZoneType string

const (
	// ZoneTypePrimary - Primary zone
	ZoneTypePrimary ZoneType = "Primary"
	// ZoneTypeSecondary - Secondary zone
	ZoneTypeSecondary ZoneType = "Secondary"
)

// PossibleZoneTypeValues returns the possible values for the ZoneType const type.
func PossibleZoneTypeValues() []ZoneType {
	return []ZoneType{
		ZoneTypePrimary,
		ZoneTypeSecondary,
	}
}
