// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) Go Code Generator. DO NOT EDIT.

package fake

import (
	"context"
	"errors"
	"fmt"
	azfake "github.com/Azure/azure-sdk-for-go/sdk/azcore/fake"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/fake/server"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/runtime"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/to"
	"github.com/Azure/azure-sdk-for-go/sdk/resourcemanager/oracledatabase/armoracledatabase"
	"net/http"
	"net/url"
	"regexp"
)

// AutonomousDatabaseNationalCharacterSetsServer is a fake server for instances of the armoracledatabase.AutonomousDatabaseNationalCharacterSetsClient type.
type AutonomousDatabaseNationalCharacterSetsServer struct {
	// Get is the fake for method AutonomousDatabaseNationalCharacterSetsClient.Get
	// HTTP status codes to indicate success: http.StatusOK
	Get func(ctx context.Context, location string, adbsncharsetname string, options *armoracledatabase.AutonomousDatabaseNationalCharacterSetsClientGetOptions) (resp azfake.Responder[armoracledatabase.AutonomousDatabaseNationalCharacterSetsClientGetResponse], errResp azfake.ErrorResponder)

	// NewListByLocationPager is the fake for method AutonomousDatabaseNationalCharacterSetsClient.NewListByLocationPager
	// HTTP status codes to indicate success: http.StatusOK
	NewListByLocationPager func(location string, options *armoracledatabase.AutonomousDatabaseNationalCharacterSetsClientListByLocationOptions) (resp azfake.PagerResponder[armoracledatabase.AutonomousDatabaseNationalCharacterSetsClientListByLocationResponse])
}

// NewAutonomousDatabaseNationalCharacterSetsServerTransport creates a new instance of AutonomousDatabaseNationalCharacterSetsServerTransport with the provided implementation.
// The returned AutonomousDatabaseNationalCharacterSetsServerTransport instance is connected to an instance of armoracledatabase.AutonomousDatabaseNationalCharacterSetsClient via the
// azcore.ClientOptions.Transporter field in the client's constructor parameters.
func NewAutonomousDatabaseNationalCharacterSetsServerTransport(srv *AutonomousDatabaseNationalCharacterSetsServer) *AutonomousDatabaseNationalCharacterSetsServerTransport {
	return &AutonomousDatabaseNationalCharacterSetsServerTransport{
		srv:                    srv,
		newListByLocationPager: newTracker[azfake.PagerResponder[armoracledatabase.AutonomousDatabaseNationalCharacterSetsClientListByLocationResponse]](),
	}
}

// AutonomousDatabaseNationalCharacterSetsServerTransport connects instances of armoracledatabase.AutonomousDatabaseNationalCharacterSetsClient to instances of AutonomousDatabaseNationalCharacterSetsServer.
// Don't use this type directly, use NewAutonomousDatabaseNationalCharacterSetsServerTransport instead.
type AutonomousDatabaseNationalCharacterSetsServerTransport struct {
	srv                    *AutonomousDatabaseNationalCharacterSetsServer
	newListByLocationPager *tracker[azfake.PagerResponder[armoracledatabase.AutonomousDatabaseNationalCharacterSetsClientListByLocationResponse]]
}

// Do implements the policy.Transporter interface for AutonomousDatabaseNationalCharacterSetsServerTransport.
func (a *AutonomousDatabaseNationalCharacterSetsServerTransport) Do(req *http.Request) (*http.Response, error) {
	rawMethod := req.Context().Value(runtime.CtxAPINameKey{})
	method, ok := rawMethod.(string)
	if !ok {
		return nil, nonRetriableError{errors.New("unable to dispatch request, missing value for CtxAPINameKey")}
	}

	return a.dispatchToMethodFake(req, method)
}

func (a *AutonomousDatabaseNationalCharacterSetsServerTransport) dispatchToMethodFake(req *http.Request, method string) (*http.Response, error) {
	resultChan := make(chan result)
	defer close(resultChan)

	go func() {
		var intercepted bool
		var res result
		if autonomousDatabaseNationalCharacterSetsServerTransportInterceptor != nil {
			res.resp, res.err, intercepted = autonomousDatabaseNationalCharacterSetsServerTransportInterceptor.Do(req)
		}
		if !intercepted {
			switch method {
			case "AutonomousDatabaseNationalCharacterSetsClient.Get":
				res.resp, res.err = a.dispatchGet(req)
			case "AutonomousDatabaseNationalCharacterSetsClient.NewListByLocationPager":
				res.resp, res.err = a.dispatchNewListByLocationPager(req)
			default:
				res.err = fmt.Errorf("unhandled API %s", method)
			}

		}
		select {
		case resultChan <- res:
		case <-req.Context().Done():
		}
	}()

	select {
	case <-req.Context().Done():
		return nil, req.Context().Err()
	case res := <-resultChan:
		return res.resp, res.err
	}
}

func (a *AutonomousDatabaseNationalCharacterSetsServerTransport) dispatchGet(req *http.Request) (*http.Response, error) {
	if a.srv.Get == nil {
		return nil, &nonRetriableError{errors.New("fake for method Get not implemented")}
	}
	const regexStr = `/subscriptions/(?P<subscriptionId>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/providers/Oracle\.Database/locations/(?P<location>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/autonomousDatabaseNationalCharacterSets/(?P<adbsncharsetname>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)`
	regex := regexp.MustCompile(regexStr)
	matches := regex.FindStringSubmatch(req.URL.EscapedPath())
	if len(matches) < 4 {
		return nil, fmt.Errorf("failed to parse path %s", req.URL.Path)
	}
	locationParam, err := url.PathUnescape(matches[regex.SubexpIndex("location")])
	if err != nil {
		return nil, err
	}
	adbsncharsetnameParam, err := url.PathUnescape(matches[regex.SubexpIndex("adbsncharsetname")])
	if err != nil {
		return nil, err
	}
	respr, errRespr := a.srv.Get(req.Context(), locationParam, adbsncharsetnameParam, nil)
	if respErr := server.GetError(errRespr, req); respErr != nil {
		return nil, respErr
	}
	respContent := server.GetResponseContent(respr)
	if !contains([]int{http.StatusOK}, respContent.HTTPStatus) {
		return nil, &nonRetriableError{fmt.Errorf("unexpected status code %d. acceptable values are http.StatusOK", respContent.HTTPStatus)}
	}
	resp, err := server.MarshalResponseAsJSON(respContent, server.GetResponse(respr).AutonomousDatabaseNationalCharacterSet, req)
	if err != nil {
		return nil, err
	}
	return resp, nil
}

func (a *AutonomousDatabaseNationalCharacterSetsServerTransport) dispatchNewListByLocationPager(req *http.Request) (*http.Response, error) {
	if a.srv.NewListByLocationPager == nil {
		return nil, &nonRetriableError{errors.New("fake for method NewListByLocationPager not implemented")}
	}
	newListByLocationPager := a.newListByLocationPager.get(req)
	if newListByLocationPager == nil {
		const regexStr = `/subscriptions/(?P<subscriptionId>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/providers/Oracle\.Database/locations/(?P<location>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/autonomousDatabaseNationalCharacterSets`
		regex := regexp.MustCompile(regexStr)
		matches := regex.FindStringSubmatch(req.URL.EscapedPath())
		if len(matches) < 3 {
			return nil, fmt.Errorf("failed to parse path %s", req.URL.Path)
		}
		locationParam, err := url.PathUnescape(matches[regex.SubexpIndex("location")])
		if err != nil {
			return nil, err
		}
		resp := a.srv.NewListByLocationPager(locationParam, nil)
		newListByLocationPager = &resp
		a.newListByLocationPager.add(req, newListByLocationPager)
		server.PagerResponderInjectNextLinks(newListByLocationPager, req, func(page *armoracledatabase.AutonomousDatabaseNationalCharacterSetsClientListByLocationResponse, createLink func() string) {
			page.NextLink = to.Ptr(createLink())
		})
	}
	resp, err := server.PagerResponderNext(newListByLocationPager, req)
	if err != nil {
		return nil, err
	}
	if !contains([]int{http.StatusOK}, resp.StatusCode) {
		a.newListByLocationPager.remove(req)
		return nil, &nonRetriableError{fmt.Errorf("unexpected status code %d. acceptable values are http.StatusOK", resp.StatusCode)}
	}
	if !server.PagerResponderMore(newListByLocationPager) {
		a.newListByLocationPager.remove(req)
	}
	return resp, nil
}

// set this to conditionally intercept incoming requests to AutonomousDatabaseNationalCharacterSetsServerTransport
var autonomousDatabaseNationalCharacterSetsServerTransportInterceptor interface {
	// Do returns true if the server transport should use the returned response/error
	Do(*http.Request) (*http.Response, error, bool)
}
