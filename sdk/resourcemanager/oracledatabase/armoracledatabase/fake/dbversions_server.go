// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) Go Code Generator. DO NOT EDIT.

package fake

import (
	"context"
	"errors"
	"fmt"
	azfake "github.com/Azure/azure-sdk-for-go/sdk/azcore/fake"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/fake/server"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/runtime"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/to"
	"github.com/Azure/azure-sdk-for-go/sdk/resourcemanager/oracledatabase/armoracledatabase"
	"net/http"
	"net/url"
	"regexp"
	"strconv"
)

// DbVersionsServer is a fake server for instances of the armoracledatabase.DbVersionsClient type.
type DbVersionsServer struct {
	// Get is the fake for method DbVersionsClient.Get
	// HTTP status codes to indicate success: http.StatusOK
	Get func(ctx context.Context, location string, dbversionsname string, options *armoracledatabase.DbVersionsClientGetOptions) (resp azfake.Responder[armoracledatabase.DbVersionsClientGetResponse], errResp azfake.ErrorResponder)

	// NewListByLocationPager is the fake for method DbVersionsClient.NewListByLocationPager
	// HTTP status codes to indicate success: http.StatusOK
	NewListByLocationPager func(location string, options *armoracledatabase.DbVersionsClientListByLocationOptions) (resp azfake.PagerResponder[armoracledatabase.DbVersionsClientListByLocationResponse])
}

// NewDbVersionsServerTransport creates a new instance of DbVersionsServerTransport with the provided implementation.
// The returned DbVersionsServerTransport instance is connected to an instance of armoracledatabase.DbVersionsClient via the
// azcore.ClientOptions.Transporter field in the client's constructor parameters.
func NewDbVersionsServerTransport(srv *DbVersionsServer) *DbVersionsServerTransport {
	return &DbVersionsServerTransport{
		srv:                    srv,
		newListByLocationPager: newTracker[azfake.PagerResponder[armoracledatabase.DbVersionsClientListByLocationResponse]](),
	}
}

// DbVersionsServerTransport connects instances of armoracledatabase.DbVersionsClient to instances of DbVersionsServer.
// Don't use this type directly, use NewDbVersionsServerTransport instead.
type DbVersionsServerTransport struct {
	srv                    *DbVersionsServer
	newListByLocationPager *tracker[azfake.PagerResponder[armoracledatabase.DbVersionsClientListByLocationResponse]]
}

// Do implements the policy.Transporter interface for DbVersionsServerTransport.
func (d *DbVersionsServerTransport) Do(req *http.Request) (*http.Response, error) {
	rawMethod := req.Context().Value(runtime.CtxAPINameKey{})
	method, ok := rawMethod.(string)
	if !ok {
		return nil, nonRetriableError{errors.New("unable to dispatch request, missing value for CtxAPINameKey")}
	}

	return d.dispatchToMethodFake(req, method)
}

func (d *DbVersionsServerTransport) dispatchToMethodFake(req *http.Request, method string) (*http.Response, error) {
	resultChan := make(chan result)
	defer close(resultChan)

	go func() {
		var intercepted bool
		var res result
		if dbVersionsServerTransportInterceptor != nil {
			res.resp, res.err, intercepted = dbVersionsServerTransportInterceptor.Do(req)
		}
		if !intercepted {
			switch method {
			case "DbVersionsClient.Get":
				res.resp, res.err = d.dispatchGet(req)
			case "DbVersionsClient.NewListByLocationPager":
				res.resp, res.err = d.dispatchNewListByLocationPager(req)
			default:
				res.err = fmt.Errorf("unhandled API %s", method)
			}

		}
		select {
		case resultChan <- res:
		case <-req.Context().Done():
		}
	}()

	select {
	case <-req.Context().Done():
		return nil, req.Context().Err()
	case res := <-resultChan:
		return res.resp, res.err
	}
}

func (d *DbVersionsServerTransport) dispatchGet(req *http.Request) (*http.Response, error) {
	if d.srv.Get == nil {
		return nil, &nonRetriableError{errors.New("fake for method Get not implemented")}
	}
	const regexStr = `/subscriptions/(?P<subscriptionId>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/providers/Oracle\.Database/locations/(?P<location>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/dbSystemDbVersions/(?P<dbversionsname>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)`
	regex := regexp.MustCompile(regexStr)
	matches := regex.FindStringSubmatch(req.URL.EscapedPath())
	if len(matches) < 4 {
		return nil, fmt.Errorf("failed to parse path %s", req.URL.Path)
	}
	locationParam, err := url.PathUnescape(matches[regex.SubexpIndex("location")])
	if err != nil {
		return nil, err
	}
	dbversionsnameParam, err := url.PathUnescape(matches[regex.SubexpIndex("dbversionsname")])
	if err != nil {
		return nil, err
	}
	respr, errRespr := d.srv.Get(req.Context(), locationParam, dbversionsnameParam, nil)
	if respErr := server.GetError(errRespr, req); respErr != nil {
		return nil, respErr
	}
	respContent := server.GetResponseContent(respr)
	if !contains([]int{http.StatusOK}, respContent.HTTPStatus) {
		return nil, &nonRetriableError{fmt.Errorf("unexpected status code %d. acceptable values are http.StatusOK", respContent.HTTPStatus)}
	}
	resp, err := server.MarshalResponseAsJSON(respContent, server.GetResponse(respr).DbVersion, req)
	if err != nil {
		return nil, err
	}
	return resp, nil
}

func (d *DbVersionsServerTransport) dispatchNewListByLocationPager(req *http.Request) (*http.Response, error) {
	if d.srv.NewListByLocationPager == nil {
		return nil, &nonRetriableError{errors.New("fake for method NewListByLocationPager not implemented")}
	}
	newListByLocationPager := d.newListByLocationPager.get(req)
	if newListByLocationPager == nil {
		const regexStr = `/subscriptions/(?P<subscriptionId>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/providers/Oracle\.Database/locations/(?P<location>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/dbSystemDbVersions`
		regex := regexp.MustCompile(regexStr)
		matches := regex.FindStringSubmatch(req.URL.EscapedPath())
		if len(matches) < 3 {
			return nil, fmt.Errorf("failed to parse path %s", req.URL.Path)
		}
		qp := req.URL.Query()
		locationParam, err := url.PathUnescape(matches[regex.SubexpIndex("location")])
		if err != nil {
			return nil, err
		}
		dbSystemShapeUnescaped, err := url.QueryUnescape(qp.Get("dbSystemShape"))
		if err != nil {
			return nil, err
		}
		dbSystemShapeParam := getOptional(armoracledatabase.BaseDbSystemShapes(dbSystemShapeUnescaped))
		dbSystemIDUnescaped, err := url.QueryUnescape(qp.Get("dbSystemId"))
		if err != nil {
			return nil, err
		}
		dbSystemIDParam := getOptional(dbSystemIDUnescaped)
		storageManagementUnescaped, err := url.QueryUnescape(qp.Get("storageManagement"))
		if err != nil {
			return nil, err
		}
		storageManagementParam := getOptional(armoracledatabase.StorageManagementType(storageManagementUnescaped))
		isUpgradeSupportedUnescaped, err := url.QueryUnescape(qp.Get("isUpgradeSupported"))
		if err != nil {
			return nil, err
		}
		isUpgradeSupportedParam, err := parseOptional(isUpgradeSupportedUnescaped, strconv.ParseBool)
		if err != nil {
			return nil, err
		}
		isDatabaseSoftwareImageSupportedUnescaped, err := url.QueryUnescape(qp.Get("isDatabaseSoftwareImageSupported"))
		if err != nil {
			return nil, err
		}
		isDatabaseSoftwareImageSupportedParam, err := parseOptional(isDatabaseSoftwareImageSupportedUnescaped, strconv.ParseBool)
		if err != nil {
			return nil, err
		}
		shapeFamilyUnescaped, err := url.QueryUnescape(qp.Get("shapeFamily"))
		if err != nil {
			return nil, err
		}
		shapeFamilyParam := getOptional(armoracledatabase.ShapeFamilyType(shapeFamilyUnescaped))
		var options *armoracledatabase.DbVersionsClientListByLocationOptions
		if dbSystemShapeParam != nil || dbSystemIDParam != nil || storageManagementParam != nil || isUpgradeSupportedParam != nil || isDatabaseSoftwareImageSupportedParam != nil || shapeFamilyParam != nil {
			options = &armoracledatabase.DbVersionsClientListByLocationOptions{
				DbSystemShape:                    dbSystemShapeParam,
				DbSystemID:                       dbSystemIDParam,
				StorageManagement:                storageManagementParam,
				IsUpgradeSupported:               isUpgradeSupportedParam,
				IsDatabaseSoftwareImageSupported: isDatabaseSoftwareImageSupportedParam,
				ShapeFamily:                      shapeFamilyParam,
			}
		}
		resp := d.srv.NewListByLocationPager(locationParam, options)
		newListByLocationPager = &resp
		d.newListByLocationPager.add(req, newListByLocationPager)
		server.PagerResponderInjectNextLinks(newListByLocationPager, req, func(page *armoracledatabase.DbVersionsClientListByLocationResponse, createLink func() string) {
			page.NextLink = to.Ptr(createLink())
		})
	}
	resp, err := server.PagerResponderNext(newListByLocationPager, req)
	if err != nil {
		return nil, err
	}
	if !contains([]int{http.StatusOK}, resp.StatusCode) {
		d.newListByLocationPager.remove(req)
		return nil, &nonRetriableError{fmt.Errorf("unexpected status code %d. acceptable values are http.StatusOK", resp.StatusCode)}
	}
	if !server.PagerResponderMore(newListByLocationPager) {
		d.newListByLocationPager.remove(req)
	}
	return resp, nil
}

// set this to conditionally intercept incoming requests to DbVersionsServerTransport
var dbVersionsServerTransportInterceptor interface {
	// Do returns true if the server transport should use the returned response/error
	Do(*http.Request) (*http.Response, error, bool)
}
