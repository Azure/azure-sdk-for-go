//go:build go1.18
// +build go1.18

// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator. DO NOT EDIT.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

package fake

import (
	"context"
	"errors"
	"fmt"
	azfake "github.com/Azure/azure-sdk-for-go/sdk/azcore/fake"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/fake/server"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/runtime"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/to"
	"github.com/Azure/azure-sdk-for-go/sdk/resourcemanager/oracledatabase/armoracledatabase"
	"net/http"
	"net/url"
	"regexp"
)

// DNSPrivateViewsServer is a fake server for instances of the armoracledatabase.DNSPrivateViewsClient type.
type DNSPrivateViewsServer struct {
	// Get is the fake for method DNSPrivateViewsClient.Get
	// HTTP status codes to indicate success: http.StatusOK
	Get func(ctx context.Context, location string, dnsprivateviewocid string, options *armoracledatabase.DNSPrivateViewsClientGetOptions) (resp azfake.Responder[armoracledatabase.DNSPrivateViewsClientGetResponse], errResp azfake.ErrorResponder)

	// NewListByLocationPager is the fake for method DNSPrivateViewsClient.NewListByLocationPager
	// HTTP status codes to indicate success: http.StatusOK
	NewListByLocationPager func(location string, options *armoracledatabase.DNSPrivateViewsClientListByLocationOptions) (resp azfake.PagerResponder[armoracledatabase.DNSPrivateViewsClientListByLocationResponse])
}

// NewDNSPrivateViewsServerTransport creates a new instance of DNSPrivateViewsServerTransport with the provided implementation.
// The returned DNSPrivateViewsServerTransport instance is connected to an instance of armoracledatabase.DNSPrivateViewsClient via the
// azcore.ClientOptions.Transporter field in the client's constructor parameters.
func NewDNSPrivateViewsServerTransport(srv *DNSPrivateViewsServer) *DNSPrivateViewsServerTransport {
	return &DNSPrivateViewsServerTransport{
		srv:                    srv,
		newListByLocationPager: newTracker[azfake.PagerResponder[armoracledatabase.DNSPrivateViewsClientListByLocationResponse]](),
	}
}

// DNSPrivateViewsServerTransport connects instances of armoracledatabase.DNSPrivateViewsClient to instances of DNSPrivateViewsServer.
// Don't use this type directly, use NewDNSPrivateViewsServerTransport instead.
type DNSPrivateViewsServerTransport struct {
	srv                    *DNSPrivateViewsServer
	newListByLocationPager *tracker[azfake.PagerResponder[armoracledatabase.DNSPrivateViewsClientListByLocationResponse]]
}

// Do implements the policy.Transporter interface for DNSPrivateViewsServerTransport.
func (d *DNSPrivateViewsServerTransport) Do(req *http.Request) (*http.Response, error) {
	rawMethod := req.Context().Value(runtime.CtxAPINameKey{})
	method, ok := rawMethod.(string)
	if !ok {
		return nil, nonRetriableError{errors.New("unable to dispatch request, missing value for CtxAPINameKey")}
	}

	var resp *http.Response
	var err error

	switch method {
	case "DNSPrivateViewsClient.Get":
		resp, err = d.dispatchGet(req)
	case "DNSPrivateViewsClient.NewListByLocationPager":
		resp, err = d.dispatchNewListByLocationPager(req)
	default:
		err = fmt.Errorf("unhandled API %s", method)
	}

	if err != nil {
		return nil, err
	}

	return resp, nil
}

func (d *DNSPrivateViewsServerTransport) dispatchGet(req *http.Request) (*http.Response, error) {
	if d.srv.Get == nil {
		return nil, &nonRetriableError{errors.New("fake for method Get not implemented")}
	}
	const regexStr = `/subscriptions/(?P<subscriptionId>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/providers/Oracle\.Database/locations/(?P<location>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/dnsPrivateViews/(?P<dnsprivateviewocid>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)`
	regex := regexp.MustCompile(regexStr)
	matches := regex.FindStringSubmatch(req.URL.EscapedPath())
	if matches == nil || len(matches) < 3 {
		return nil, fmt.Errorf("failed to parse path %s", req.URL.Path)
	}
	locationParam, err := url.PathUnescape(matches[regex.SubexpIndex("location")])
	if err != nil {
		return nil, err
	}
	dnsprivateviewocidParam, err := url.PathUnescape(matches[regex.SubexpIndex("dnsprivateviewocid")])
	if err != nil {
		return nil, err
	}
	respr, errRespr := d.srv.Get(req.Context(), locationParam, dnsprivateviewocidParam, nil)
	if respErr := server.GetError(errRespr, req); respErr != nil {
		return nil, respErr
	}
	respContent := server.GetResponseContent(respr)
	if !contains([]int{http.StatusOK}, respContent.HTTPStatus) {
		return nil, &nonRetriableError{fmt.Errorf("unexpected status code %d. acceptable values are http.StatusOK", respContent.HTTPStatus)}
	}
	resp, err := server.MarshalResponseAsJSON(respContent, server.GetResponse(respr).DNSPrivateView, req)
	if err != nil {
		return nil, err
	}
	return resp, nil
}

func (d *DNSPrivateViewsServerTransport) dispatchNewListByLocationPager(req *http.Request) (*http.Response, error) {
	if d.srv.NewListByLocationPager == nil {
		return nil, &nonRetriableError{errors.New("fake for method NewListByLocationPager not implemented")}
	}
	newListByLocationPager := d.newListByLocationPager.get(req)
	if newListByLocationPager == nil {
		const regexStr = `/subscriptions/(?P<subscriptionId>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/providers/Oracle\.Database/locations/(?P<location>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/dnsPrivateViews`
		regex := regexp.MustCompile(regexStr)
		matches := regex.FindStringSubmatch(req.URL.EscapedPath())
		if matches == nil || len(matches) < 2 {
			return nil, fmt.Errorf("failed to parse path %s", req.URL.Path)
		}
		locationParam, err := url.PathUnescape(matches[regex.SubexpIndex("location")])
		if err != nil {
			return nil, err
		}
		resp := d.srv.NewListByLocationPager(locationParam, nil)
		newListByLocationPager = &resp
		d.newListByLocationPager.add(req, newListByLocationPager)
		server.PagerResponderInjectNextLinks(newListByLocationPager, req, func(page *armoracledatabase.DNSPrivateViewsClientListByLocationResponse, createLink func() string) {
			page.NextLink = to.Ptr(createLink())
		})
	}
	resp, err := server.PagerResponderNext(newListByLocationPager, req)
	if err != nil {
		return nil, err
	}
	if !contains([]int{http.StatusOK}, resp.StatusCode) {
		d.newListByLocationPager.remove(req)
		return nil, &nonRetriableError{fmt.Errorf("unexpected status code %d. acceptable values are http.StatusOK", resp.StatusCode)}
	}
	if !server.PagerResponderMore(newListByLocationPager) {
		d.newListByLocationPager.remove(req)
	}
	return resp, nil
}
