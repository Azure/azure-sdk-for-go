// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) Go Code Generator. DO NOT EDIT.

package fake

import (
	"context"
	"errors"
	"fmt"
	azfake "github.com/Azure/azure-sdk-for-go/sdk/azcore/fake"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/fake/server"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/runtime"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/to"
	"github.com/Azure/azure-sdk-for-go/sdk/resourcemanager/paloaltonetworksngfw/armpanngfw/v2"
	"net/http"
	"net/url"
	"regexp"
)

// MetricsObjectFirewallServer is a fake server for instances of the armpanngfw.MetricsObjectFirewallClient type.
type MetricsObjectFirewallServer struct {
	// BeginCreateOrUpdate is the fake for method MetricsObjectFirewallClient.BeginCreateOrUpdate
	// HTTP status codes to indicate success: http.StatusOK, http.StatusCreated
	BeginCreateOrUpdate func(ctx context.Context, resourceGroupName string, firewallName string, resource armpanngfw.MetricsObjectFirewallResource, options *armpanngfw.MetricsObjectFirewallClientBeginCreateOrUpdateOptions) (resp azfake.PollerResponder[armpanngfw.MetricsObjectFirewallClientCreateOrUpdateResponse], errResp azfake.ErrorResponder)

	// BeginDelete is the fake for method MetricsObjectFirewallClient.BeginDelete
	// HTTP status codes to indicate success: http.StatusOK, http.StatusAccepted, http.StatusNoContent
	BeginDelete func(ctx context.Context, resourceGroupName string, firewallName string, options *armpanngfw.MetricsObjectFirewallClientBeginDeleteOptions) (resp azfake.PollerResponder[armpanngfw.MetricsObjectFirewallClientDeleteResponse], errResp azfake.ErrorResponder)

	// Get is the fake for method MetricsObjectFirewallClient.Get
	// HTTP status codes to indicate success: http.StatusOK
	Get func(ctx context.Context, resourceGroupName string, firewallName string, options *armpanngfw.MetricsObjectFirewallClientGetOptions) (resp azfake.Responder[armpanngfw.MetricsObjectFirewallClientGetResponse], errResp azfake.ErrorResponder)

	// NewListByFirewallsPager is the fake for method MetricsObjectFirewallClient.NewListByFirewallsPager
	// HTTP status codes to indicate success: http.StatusOK
	NewListByFirewallsPager func(resourceGroupName string, firewallName string, options *armpanngfw.MetricsObjectFirewallClientListByFirewallsOptions) (resp azfake.PagerResponder[armpanngfw.MetricsObjectFirewallClientListByFirewallsResponse])
}

// NewMetricsObjectFirewallServerTransport creates a new instance of MetricsObjectFirewallServerTransport with the provided implementation.
// The returned MetricsObjectFirewallServerTransport instance is connected to an instance of armpanngfw.MetricsObjectFirewallClient via the
// azcore.ClientOptions.Transporter field in the client's constructor parameters.
func NewMetricsObjectFirewallServerTransport(srv *MetricsObjectFirewallServer) *MetricsObjectFirewallServerTransport {
	return &MetricsObjectFirewallServerTransport{
		srv:                     srv,
		beginCreateOrUpdate:     newTracker[azfake.PollerResponder[armpanngfw.MetricsObjectFirewallClientCreateOrUpdateResponse]](),
		beginDelete:             newTracker[azfake.PollerResponder[armpanngfw.MetricsObjectFirewallClientDeleteResponse]](),
		newListByFirewallsPager: newTracker[azfake.PagerResponder[armpanngfw.MetricsObjectFirewallClientListByFirewallsResponse]](),
	}
}

// MetricsObjectFirewallServerTransport connects instances of armpanngfw.MetricsObjectFirewallClient to instances of MetricsObjectFirewallServer.
// Don't use this type directly, use NewMetricsObjectFirewallServerTransport instead.
type MetricsObjectFirewallServerTransport struct {
	srv                     *MetricsObjectFirewallServer
	beginCreateOrUpdate     *tracker[azfake.PollerResponder[armpanngfw.MetricsObjectFirewallClientCreateOrUpdateResponse]]
	beginDelete             *tracker[azfake.PollerResponder[armpanngfw.MetricsObjectFirewallClientDeleteResponse]]
	newListByFirewallsPager *tracker[azfake.PagerResponder[armpanngfw.MetricsObjectFirewallClientListByFirewallsResponse]]
}

// Do implements the policy.Transporter interface for MetricsObjectFirewallServerTransport.
func (m *MetricsObjectFirewallServerTransport) Do(req *http.Request) (*http.Response, error) {
	rawMethod := req.Context().Value(runtime.CtxAPINameKey{})
	method, ok := rawMethod.(string)
	if !ok {
		return nil, nonRetriableError{errors.New("unable to dispatch request, missing value for CtxAPINameKey")}
	}

	return m.dispatchToMethodFake(req, method)
}

func (m *MetricsObjectFirewallServerTransport) dispatchToMethodFake(req *http.Request, method string) (*http.Response, error) {
	resultChan := make(chan result)
	defer close(resultChan)

	go func() {
		var intercepted bool
		var res result
		if metricsObjectFirewallServerTransportInterceptor != nil {
			res.resp, res.err, intercepted = metricsObjectFirewallServerTransportInterceptor.Do(req)
		}
		if !intercepted {
			switch method {
			case "MetricsObjectFirewallClient.BeginCreateOrUpdate":
				res.resp, res.err = m.dispatchBeginCreateOrUpdate(req)
			case "MetricsObjectFirewallClient.BeginDelete":
				res.resp, res.err = m.dispatchBeginDelete(req)
			case "MetricsObjectFirewallClient.Get":
				res.resp, res.err = m.dispatchGet(req)
			case "MetricsObjectFirewallClient.NewListByFirewallsPager":
				res.resp, res.err = m.dispatchNewListByFirewallsPager(req)
			default:
				res.err = fmt.Errorf("unhandled API %s", method)
			}

		}
		select {
		case resultChan <- res:
		case <-req.Context().Done():
		}
	}()

	select {
	case <-req.Context().Done():
		return nil, req.Context().Err()
	case res := <-resultChan:
		return res.resp, res.err
	}
}

func (m *MetricsObjectFirewallServerTransport) dispatchBeginCreateOrUpdate(req *http.Request) (*http.Response, error) {
	if m.srv.BeginCreateOrUpdate == nil {
		return nil, &nonRetriableError{errors.New("fake for method BeginCreateOrUpdate not implemented")}
	}
	beginCreateOrUpdate := m.beginCreateOrUpdate.get(req)
	if beginCreateOrUpdate == nil {
		const regexStr = `/subscriptions/(?P<subscriptionId>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/resourceGroups/(?P<resourceGroupName>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/providers/PaloAltoNetworks\.Cloudngfw/firewalls/(?P<firewallName>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/metrics/default`
		regex := regexp.MustCompile(regexStr)
		matches := regex.FindStringSubmatch(req.URL.EscapedPath())
		if len(matches) < 4 {
			return nil, fmt.Errorf("failed to parse path %s", req.URL.Path)
		}
		body, err := server.UnmarshalRequestAsJSON[armpanngfw.MetricsObjectFirewallResource](req)
		if err != nil {
			return nil, err
		}
		resourceGroupNameParam, err := url.PathUnescape(matches[regex.SubexpIndex("resourceGroupName")])
		if err != nil {
			return nil, err
		}
		firewallNameParam, err := url.PathUnescape(matches[regex.SubexpIndex("firewallName")])
		if err != nil {
			return nil, err
		}
		respr, errRespr := m.srv.BeginCreateOrUpdate(req.Context(), resourceGroupNameParam, firewallNameParam, body, nil)
		if respErr := server.GetError(errRespr, req); respErr != nil {
			return nil, respErr
		}
		beginCreateOrUpdate = &respr
		m.beginCreateOrUpdate.add(req, beginCreateOrUpdate)
	}

	resp, err := server.PollerResponderNext(beginCreateOrUpdate, req)
	if err != nil {
		return nil, err
	}

	if !contains([]int{http.StatusOK, http.StatusCreated}, resp.StatusCode) {
		m.beginCreateOrUpdate.remove(req)
		return nil, &nonRetriableError{fmt.Errorf("unexpected status code %d. acceptable values are http.StatusOK, http.StatusCreated", resp.StatusCode)}
	}
	if !server.PollerResponderMore(beginCreateOrUpdate) {
		m.beginCreateOrUpdate.remove(req)
	}

	return resp, nil
}

func (m *MetricsObjectFirewallServerTransport) dispatchBeginDelete(req *http.Request) (*http.Response, error) {
	if m.srv.BeginDelete == nil {
		return nil, &nonRetriableError{errors.New("fake for method BeginDelete not implemented")}
	}
	beginDelete := m.beginDelete.get(req)
	if beginDelete == nil {
		const regexStr = `/subscriptions/(?P<subscriptionId>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/resourceGroups/(?P<resourceGroupName>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/providers/PaloAltoNetworks\.Cloudngfw/firewalls/(?P<firewallName>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/metrics/default`
		regex := regexp.MustCompile(regexStr)
		matches := regex.FindStringSubmatch(req.URL.EscapedPath())
		if len(matches) < 4 {
			return nil, fmt.Errorf("failed to parse path %s", req.URL.Path)
		}
		resourceGroupNameParam, err := url.PathUnescape(matches[regex.SubexpIndex("resourceGroupName")])
		if err != nil {
			return nil, err
		}
		firewallNameParam, err := url.PathUnescape(matches[regex.SubexpIndex("firewallName")])
		if err != nil {
			return nil, err
		}
		respr, errRespr := m.srv.BeginDelete(req.Context(), resourceGroupNameParam, firewallNameParam, nil)
		if respErr := server.GetError(errRespr, req); respErr != nil {
			return nil, respErr
		}
		beginDelete = &respr
		m.beginDelete.add(req, beginDelete)
	}

	resp, err := server.PollerResponderNext(beginDelete, req)
	if err != nil {
		return nil, err
	}

	if !contains([]int{http.StatusOK, http.StatusAccepted, http.StatusNoContent}, resp.StatusCode) {
		m.beginDelete.remove(req)
		return nil, &nonRetriableError{fmt.Errorf("unexpected status code %d. acceptable values are http.StatusOK, http.StatusAccepted, http.StatusNoContent", resp.StatusCode)}
	}
	if !server.PollerResponderMore(beginDelete) {
		m.beginDelete.remove(req)
	}

	return resp, nil
}

func (m *MetricsObjectFirewallServerTransport) dispatchGet(req *http.Request) (*http.Response, error) {
	if m.srv.Get == nil {
		return nil, &nonRetriableError{errors.New("fake for method Get not implemented")}
	}
	const regexStr = `/subscriptions/(?P<subscriptionId>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/resourceGroups/(?P<resourceGroupName>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/providers/PaloAltoNetworks\.Cloudngfw/firewalls/(?P<firewallName>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/metrics/default`
	regex := regexp.MustCompile(regexStr)
	matches := regex.FindStringSubmatch(req.URL.EscapedPath())
	if len(matches) < 4 {
		return nil, fmt.Errorf("failed to parse path %s", req.URL.Path)
	}
	resourceGroupNameParam, err := url.PathUnescape(matches[regex.SubexpIndex("resourceGroupName")])
	if err != nil {
		return nil, err
	}
	firewallNameParam, err := url.PathUnescape(matches[regex.SubexpIndex("firewallName")])
	if err != nil {
		return nil, err
	}
	respr, errRespr := m.srv.Get(req.Context(), resourceGroupNameParam, firewallNameParam, nil)
	if respErr := server.GetError(errRespr, req); respErr != nil {
		return nil, respErr
	}
	respContent := server.GetResponseContent(respr)
	if !contains([]int{http.StatusOK}, respContent.HTTPStatus) {
		return nil, &nonRetriableError{fmt.Errorf("unexpected status code %d. acceptable values are http.StatusOK", respContent.HTTPStatus)}
	}
	resp, err := server.MarshalResponseAsJSON(respContent, server.GetResponse(respr).MetricsObjectFirewallResource, req)
	if err != nil {
		return nil, err
	}
	return resp, nil
}

func (m *MetricsObjectFirewallServerTransport) dispatchNewListByFirewallsPager(req *http.Request) (*http.Response, error) {
	if m.srv.NewListByFirewallsPager == nil {
		return nil, &nonRetriableError{errors.New("fake for method NewListByFirewallsPager not implemented")}
	}
	newListByFirewallsPager := m.newListByFirewallsPager.get(req)
	if newListByFirewallsPager == nil {
		const regexStr = `/subscriptions/(?P<subscriptionId>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/resourceGroups/(?P<resourceGroupName>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/providers/PaloAltoNetworks\.Cloudngfw/firewalls/(?P<firewallName>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/metrics`
		regex := regexp.MustCompile(regexStr)
		matches := regex.FindStringSubmatch(req.URL.EscapedPath())
		if len(matches) < 4 {
			return nil, fmt.Errorf("failed to parse path %s", req.URL.Path)
		}
		resourceGroupNameParam, err := url.PathUnescape(matches[regex.SubexpIndex("resourceGroupName")])
		if err != nil {
			return nil, err
		}
		firewallNameParam, err := url.PathUnescape(matches[regex.SubexpIndex("firewallName")])
		if err != nil {
			return nil, err
		}
		resp := m.srv.NewListByFirewallsPager(resourceGroupNameParam, firewallNameParam, nil)
		newListByFirewallsPager = &resp
		m.newListByFirewallsPager.add(req, newListByFirewallsPager)
		server.PagerResponderInjectNextLinks(newListByFirewallsPager, req, func(page *armpanngfw.MetricsObjectFirewallClientListByFirewallsResponse, createLink func() string) {
			page.NextLink = to.Ptr(createLink())
		})
	}
	resp, err := server.PagerResponderNext(newListByFirewallsPager, req)
	if err != nil {
		return nil, err
	}
	if !contains([]int{http.StatusOK}, resp.StatusCode) {
		m.newListByFirewallsPager.remove(req)
		return nil, &nonRetriableError{fmt.Errorf("unexpected status code %d. acceptable values are http.StatusOK", resp.StatusCode)}
	}
	if !server.PagerResponderMore(newListByFirewallsPager) {
		m.newListByFirewallsPager.remove(req)
	}
	return resp, nil
}

// set this to conditionally intercept incoming requests to MetricsObjectFirewallServerTransport
var metricsObjectFirewallServerTransportInterceptor interface {
	// Do returns true if the server transport should use the returned response/error
	Do(*http.Request) (*http.Response, error, bool)
}
