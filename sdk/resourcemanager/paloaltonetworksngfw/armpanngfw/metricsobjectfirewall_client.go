// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) Go Code Generator. DO NOT EDIT.

package armpanngfw

import (
	"context"
	"errors"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/arm"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/policy"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/runtime"
	"net/http"
	"net/url"
	"strings"
)

// MetricsObjectFirewallClient contains the methods for the MetricsObjectFirewall group.
// Don't use this type directly, use NewMetricsObjectFirewallClient() instead.
type MetricsObjectFirewallClient struct {
	internal       *arm.Client
	subscriptionID string
}

// NewMetricsObjectFirewallClient creates a new instance of MetricsObjectFirewallClient with the specified values.
//   - subscriptionID - The ID of the target subscription. The value must be an UUID.
//   - credential - used to authorize requests. Usually a credential from azidentity.
//   - options - Contains optional client configuration. Pass nil to accept the default values.
func NewMetricsObjectFirewallClient(subscriptionID string, credential azcore.TokenCredential, options *arm.ClientOptions) (*MetricsObjectFirewallClient, error) {
	cl, err := arm.NewClient(moduleName, moduleVersion, credential, options)
	if err != nil {
		return nil, err
	}
	client := &MetricsObjectFirewallClient{
		subscriptionID: subscriptionID,
		internal:       cl,
	}
	return client, nil
}

// BeginCreateOrUpdate - Create a MetricsObjectFirewallResource
// If the operation fails it returns an *azcore.ResponseError type.
//
// Generated from API version 2025-10-08
//   - resourceGroupName - The name of the resource group. The name is case insensitive.
//   - firewallName - Firewall resource name
//   - resource - Resource create parameters.
//   - options - MetricsObjectFirewallClientBeginCreateOrUpdateOptions contains the optional parameters for the MetricsObjectFirewallClient.BeginCreateOrUpdate
//     method.
func (client *MetricsObjectFirewallClient) BeginCreateOrUpdate(ctx context.Context, resourceGroupName string, firewallName string, resource MetricsObjectFirewallResource, options *MetricsObjectFirewallClientBeginCreateOrUpdateOptions) (*runtime.Poller[MetricsObjectFirewallClientCreateOrUpdateResponse], error) {
	if options == nil || options.ResumeToken == "" {
		resp, err := client.createOrUpdate(ctx, resourceGroupName, firewallName, resource, options)
		if err != nil {
			return nil, err
		}
		poller, err := runtime.NewPoller(resp, client.internal.Pipeline(), &runtime.NewPollerOptions[MetricsObjectFirewallClientCreateOrUpdateResponse]{
			Tracer: client.internal.Tracer(),
		})
		return poller, err
	} else {
		return runtime.NewPollerFromResumeToken(options.ResumeToken, client.internal.Pipeline(), &runtime.NewPollerFromResumeTokenOptions[MetricsObjectFirewallClientCreateOrUpdateResponse]{
			Tracer: client.internal.Tracer(),
		})
	}
}

// CreateOrUpdate - Create a MetricsObjectFirewallResource
// If the operation fails it returns an *azcore.ResponseError type.
//
// Generated from API version 2025-10-08
func (client *MetricsObjectFirewallClient) createOrUpdate(ctx context.Context, resourceGroupName string, firewallName string, resource MetricsObjectFirewallResource, options *MetricsObjectFirewallClientBeginCreateOrUpdateOptions) (*http.Response, error) {
	var err error
	const operationName = "MetricsObjectFirewallClient.BeginCreateOrUpdate"
	ctx = context.WithValue(ctx, runtime.CtxAPINameKey{}, operationName)
	ctx, endSpan := runtime.StartSpan(ctx, operationName, client.internal.Tracer(), nil)
	defer func() { endSpan(err) }()
	req, err := client.createOrUpdateCreateRequest(ctx, resourceGroupName, firewallName, resource, options)
	if err != nil {
		return nil, err
	}
	httpResp, err := client.internal.Pipeline().Do(req)
	if err != nil {
		return nil, err
	}
	if !runtime.HasStatusCode(httpResp, http.StatusOK, http.StatusCreated) {
		err = runtime.NewResponseError(httpResp)
		return nil, err
	}
	return httpResp, nil
}

// createOrUpdateCreateRequest creates the CreateOrUpdate request.
func (client *MetricsObjectFirewallClient) createOrUpdateCreateRequest(ctx context.Context, resourceGroupName string, firewallName string, resource MetricsObjectFirewallResource, _ *MetricsObjectFirewallClientBeginCreateOrUpdateOptions) (*policy.Request, error) {
	urlPath := "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/PaloAltoNetworks.Cloudngfw/firewalls/{firewallName}/metrics/default"
	if client.subscriptionID == "" {
		return nil, errors.New("parameter client.subscriptionID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{subscriptionId}", url.PathEscape(client.subscriptionID))
	if resourceGroupName == "" {
		return nil, errors.New("parameter resourceGroupName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{resourceGroupName}", url.PathEscape(resourceGroupName))
	if firewallName == "" {
		return nil, errors.New("parameter firewallName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{firewallName}", url.PathEscape(firewallName))
	req, err := runtime.NewRequest(ctx, http.MethodPut, runtime.JoinPaths(client.internal.Endpoint(), urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("api-version", "2025-10-08")
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header["Accept"] = []string{"application/json"}
	req.Raw().Header["Content-Type"] = []string{"application/json"}
	if err := runtime.MarshalAsJSON(req, resource); err != nil {
		return nil, err
	}
	return req, nil
}

// BeginDelete - Delete a MetricsObjectFirewallResource
// If the operation fails it returns an *azcore.ResponseError type.
//
// Generated from API version 2025-10-08
//   - resourceGroupName - The name of the resource group. The name is case insensitive.
//   - firewallName - Firewall resource name
//   - options - MetricsObjectFirewallClientBeginDeleteOptions contains the optional parameters for the MetricsObjectFirewallClient.BeginDelete
//     method.
func (client *MetricsObjectFirewallClient) BeginDelete(ctx context.Context, resourceGroupName string, firewallName string, options *MetricsObjectFirewallClientBeginDeleteOptions) (*runtime.Poller[MetricsObjectFirewallClientDeleteResponse], error) {
	if options == nil || options.ResumeToken == "" {
		resp, err := client.deleteOperation(ctx, resourceGroupName, firewallName, options)
		if err != nil {
			return nil, err
		}
		poller, err := runtime.NewPoller(resp, client.internal.Pipeline(), &runtime.NewPollerOptions[MetricsObjectFirewallClientDeleteResponse]{
			FinalStateVia: runtime.FinalStateViaAzureAsyncOp,
			Tracer:        client.internal.Tracer(),
		})
		return poller, err
	} else {
		return runtime.NewPollerFromResumeToken(options.ResumeToken, client.internal.Pipeline(), &runtime.NewPollerFromResumeTokenOptions[MetricsObjectFirewallClientDeleteResponse]{
			Tracer: client.internal.Tracer(),
		})
	}
}

// Delete - Delete a MetricsObjectFirewallResource
// If the operation fails it returns an *azcore.ResponseError type.
//
// Generated from API version 2025-10-08
func (client *MetricsObjectFirewallClient) deleteOperation(ctx context.Context, resourceGroupName string, firewallName string, options *MetricsObjectFirewallClientBeginDeleteOptions) (*http.Response, error) {
	var err error
	const operationName = "MetricsObjectFirewallClient.BeginDelete"
	ctx = context.WithValue(ctx, runtime.CtxAPINameKey{}, operationName)
	ctx, endSpan := runtime.StartSpan(ctx, operationName, client.internal.Tracer(), nil)
	defer func() { endSpan(err) }()
	req, err := client.deleteCreateRequest(ctx, resourceGroupName, firewallName, options)
	if err != nil {
		return nil, err
	}
	httpResp, err := client.internal.Pipeline().Do(req)
	if err != nil {
		return nil, err
	}
	if !runtime.HasStatusCode(httpResp, http.StatusAccepted, http.StatusNoContent) {
		err = runtime.NewResponseError(httpResp)
		return nil, err
	}
	return httpResp, nil
}

// deleteCreateRequest creates the Delete request.
func (client *MetricsObjectFirewallClient) deleteCreateRequest(ctx context.Context, resourceGroupName string, firewallName string, _ *MetricsObjectFirewallClientBeginDeleteOptions) (*policy.Request, error) {
	urlPath := "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/PaloAltoNetworks.Cloudngfw/firewalls/{firewallName}/metrics/default"
	if client.subscriptionID == "" {
		return nil, errors.New("parameter client.subscriptionID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{subscriptionId}", url.PathEscape(client.subscriptionID))
	if resourceGroupName == "" {
		return nil, errors.New("parameter resourceGroupName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{resourceGroupName}", url.PathEscape(resourceGroupName))
	if firewallName == "" {
		return nil, errors.New("parameter firewallName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{firewallName}", url.PathEscape(firewallName))
	req, err := runtime.NewRequest(ctx, http.MethodDelete, runtime.JoinPaths(client.internal.Endpoint(), urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("api-version", "2025-10-08")
	req.Raw().URL.RawQuery = reqQP.Encode()
	return req, nil
}

// Get - Get a MetricsObjectFirewallResource
// If the operation fails it returns an *azcore.ResponseError type.
//
// Generated from API version 2025-10-08
//   - resourceGroupName - The name of the resource group. The name is case insensitive.
//   - firewallName - Firewall resource name
//   - options - MetricsObjectFirewallClientGetOptions contains the optional parameters for the MetricsObjectFirewallClient.Get
//     method.
func (client *MetricsObjectFirewallClient) Get(ctx context.Context, resourceGroupName string, firewallName string, options *MetricsObjectFirewallClientGetOptions) (MetricsObjectFirewallClientGetResponse, error) {
	var err error
	const operationName = "MetricsObjectFirewallClient.Get"
	ctx = context.WithValue(ctx, runtime.CtxAPINameKey{}, operationName)
	ctx, endSpan := runtime.StartSpan(ctx, operationName, client.internal.Tracer(), nil)
	defer func() { endSpan(err) }()
	req, err := client.getCreateRequest(ctx, resourceGroupName, firewallName, options)
	if err != nil {
		return MetricsObjectFirewallClientGetResponse{}, err
	}
	httpResp, err := client.internal.Pipeline().Do(req)
	if err != nil {
		return MetricsObjectFirewallClientGetResponse{}, err
	}
	if !runtime.HasStatusCode(httpResp, http.StatusOK) {
		err = runtime.NewResponseError(httpResp)
		return MetricsObjectFirewallClientGetResponse{}, err
	}
	resp, err := client.getHandleResponse(httpResp)
	return resp, err
}

// getCreateRequest creates the Get request.
func (client *MetricsObjectFirewallClient) getCreateRequest(ctx context.Context, resourceGroupName string, firewallName string, _ *MetricsObjectFirewallClientGetOptions) (*policy.Request, error) {
	urlPath := "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/PaloAltoNetworks.Cloudngfw/firewalls/{firewallName}/metrics/default"
	if client.subscriptionID == "" {
		return nil, errors.New("parameter client.subscriptionID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{subscriptionId}", url.PathEscape(client.subscriptionID))
	if resourceGroupName == "" {
		return nil, errors.New("parameter resourceGroupName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{resourceGroupName}", url.PathEscape(resourceGroupName))
	if firewallName == "" {
		return nil, errors.New("parameter firewallName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{firewallName}", url.PathEscape(firewallName))
	req, err := runtime.NewRequest(ctx, http.MethodGet, runtime.JoinPaths(client.internal.Endpoint(), urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("api-version", "2025-10-08")
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header["Accept"] = []string{"application/json"}
	return req, nil
}

// getHandleResponse handles the Get response.
func (client *MetricsObjectFirewallClient) getHandleResponse(resp *http.Response) (MetricsObjectFirewallClientGetResponse, error) {
	result := MetricsObjectFirewallClientGetResponse{}
	if err := runtime.UnmarshalAsJSON(resp, &result.MetricsObjectFirewallResource); err != nil {
		return MetricsObjectFirewallClientGetResponse{}, err
	}
	return result, nil
}

// NewListByFirewallsPager - List MetricsObjectFirewallResource resources by Firewalls
//
// Generated from API version 2025-10-08
//   - resourceGroupName - The name of the resource group. The name is case insensitive.
//   - firewallName - Firewall resource name
//   - options - MetricsObjectFirewallClientListByFirewallsOptions contains the optional parameters for the MetricsObjectFirewallClient.NewListByFirewallsPager
//     method.
func (client *MetricsObjectFirewallClient) NewListByFirewallsPager(resourceGroupName string, firewallName string, options *MetricsObjectFirewallClientListByFirewallsOptions) *runtime.Pager[MetricsObjectFirewallClientListByFirewallsResponse] {
	return runtime.NewPager(runtime.PagingHandler[MetricsObjectFirewallClientListByFirewallsResponse]{
		More: func(page MetricsObjectFirewallClientListByFirewallsResponse) bool {
			return page.NextLink != nil && len(*page.NextLink) > 0
		},
		Fetcher: func(ctx context.Context, page *MetricsObjectFirewallClientListByFirewallsResponse) (MetricsObjectFirewallClientListByFirewallsResponse, error) {
			ctx = context.WithValue(ctx, runtime.CtxAPINameKey{}, "MetricsObjectFirewallClient.NewListByFirewallsPager")
			nextLink := ""
			if page != nil {
				nextLink = *page.NextLink
			}
			resp, err := runtime.FetcherForNextLink(ctx, client.internal.Pipeline(), nextLink, func(ctx context.Context) (*policy.Request, error) {
				return client.listByFirewallsCreateRequest(ctx, resourceGroupName, firewallName, options)
			}, nil)
			if err != nil {
				return MetricsObjectFirewallClientListByFirewallsResponse{}, err
			}
			return client.listByFirewallsHandleResponse(resp)
		},
		Tracer: client.internal.Tracer(),
	})
}

// listByFirewallsCreateRequest creates the ListByFirewalls request.
func (client *MetricsObjectFirewallClient) listByFirewallsCreateRequest(ctx context.Context, resourceGroupName string, firewallName string, _ *MetricsObjectFirewallClientListByFirewallsOptions) (*policy.Request, error) {
	urlPath := "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/PaloAltoNetworks.Cloudngfw/firewalls/{firewallName}/metrics"
	if client.subscriptionID == "" {
		return nil, errors.New("parameter client.subscriptionID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{subscriptionId}", url.PathEscape(client.subscriptionID))
	if resourceGroupName == "" {
		return nil, errors.New("parameter resourceGroupName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{resourceGroupName}", url.PathEscape(resourceGroupName))
	if firewallName == "" {
		return nil, errors.New("parameter firewallName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{firewallName}", url.PathEscape(firewallName))
	req, err := runtime.NewRequest(ctx, http.MethodGet, runtime.JoinPaths(client.internal.Endpoint(), urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("api-version", "2025-10-08")
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header["Accept"] = []string{"application/json"}
	return req, nil
}

// listByFirewallsHandleResponse handles the ListByFirewalls response.
func (client *MetricsObjectFirewallClient) listByFirewallsHandleResponse(resp *http.Response) (MetricsObjectFirewallClientListByFirewallsResponse, error) {
	result := MetricsObjectFirewallClientListByFirewallsResponse{}
	if err := runtime.UnmarshalAsJSON(resp, &result.MetricsObjectFirewallResourceListResult); err != nil {
		return MetricsObjectFirewallClientListByFirewallsResponse{}, err
	}
	return result, nil
}
