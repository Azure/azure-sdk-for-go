// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) Go Code Generator. DO NOT EDIT.

package armpeering

import (
	"context"
	"errors"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/arm"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/policy"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/runtime"
	"net/http"
	"net/url"
	"strings"
)

// Client - Peering Client
// Don't use this type directly, use NewClient() instead.
type Client struct {
	internal       *arm.Client
	subscriptionID string
}

// NewClient creates a new instance of Client with the specified values.
//   - subscriptionID - The ID of the target subscription. The value must be an UUID.
//   - credential - used to authorize requests. Usually a credential from azidentity.
//   - options - Contains optional client configuration. Pass nil to accept the default values.
func NewClient(subscriptionID string, credential azcore.TokenCredential, options *arm.ClientOptions) (*Client, error) {
	cl, err := arm.NewClient(moduleName, moduleVersion, credential, options)
	if err != nil {
		return nil, err
	}
	client := &Client{
		subscriptionID: subscriptionID,
		internal:       cl,
	}
	return client, nil
}

// NewCdnPeeringPrefixesClient creates a new instance of [CdnPeeringPrefixesClient].
func (client *Client) NewCdnPeeringPrefixesClient() *CdnPeeringPrefixesClient {
	return &CdnPeeringPrefixesClient{
		internal:       client.internal,
		subscriptionID: client.subscriptionID,
	}
}

// NewConnectionMonitorTestsClient creates a new instance of [ConnectionMonitorTestsClient].
func (client *Client) NewConnectionMonitorTestsClient() *ConnectionMonitorTestsClient {
	return &ConnectionMonitorTestsClient{
		internal:       client.internal,
		subscriptionID: client.subscriptionID,
	}
}

// NewLegacyPeeringsClient creates a new instance of [LegacyPeeringsClient].
func (client *Client) NewLegacyPeeringsClient() *LegacyPeeringsClient {
	return &LegacyPeeringsClient{
		internal:       client.internal,
		subscriptionID: client.subscriptionID,
	}
}

// NewLocationsClient creates a new instance of [LocationsClient].
func (client *Client) NewLocationsClient() *LocationsClient {
	return &LocationsClient{
		internal:       client.internal,
		subscriptionID: client.subscriptionID,
	}
}

// NewLookingGlassClient creates a new instance of [LookingGlassClient].
func (client *Client) NewLookingGlassClient() *LookingGlassClient {
	return &LookingGlassClient{
		internal:       client.internal,
		subscriptionID: client.subscriptionID,
	}
}

// NewOperationsClient creates a new instance of [OperationsClient].
func (client *Client) NewOperationsClient() *OperationsClient {
	return &OperationsClient{
		internal:       client.internal,
		subscriptionID: client.subscriptionID,
	}
}

// NewPeerAsnsClient creates a new instance of [PeerAsnsClient].
func (client *Client) NewPeerAsnsClient() *PeerAsnsClient {
	return &PeerAsnsClient{
		internal:       client.internal,
		subscriptionID: client.subscriptionID,
	}
}

// NewPeeringsClient creates a new instance of [PeeringsClient].
func (client *Client) NewPeeringsClient() *PeeringsClient {
	return &PeeringsClient{
		internal:       client.internal,
		subscriptionID: client.subscriptionID,
	}
}

// NewPrefixesClient creates a new instance of [PrefixesClient].
func (client *Client) NewPrefixesClient() *PrefixesClient {
	return &PrefixesClient{
		internal:       client.internal,
		subscriptionID: client.subscriptionID,
	}
}

// NewReceivedRoutesClient creates a new instance of [ReceivedRoutesClient].
func (client *Client) NewReceivedRoutesClient() *ReceivedRoutesClient {
	return &ReceivedRoutesClient{
		internal:       client.internal,
		subscriptionID: client.subscriptionID,
	}
}

// NewRegisteredAsnsClient creates a new instance of [RegisteredAsnsClient].
func (client *Client) NewRegisteredAsnsClient() *RegisteredAsnsClient {
	return &RegisteredAsnsClient{
		internal:       client.internal,
		subscriptionID: client.subscriptionID,
	}
}

// NewRegisteredPrefixesClient creates a new instance of [RegisteredPrefixesClient].
func (client *Client) NewRegisteredPrefixesClient() *RegisteredPrefixesClient {
	return &RegisteredPrefixesClient{
		internal:       client.internal,
		subscriptionID: client.subscriptionID,
	}
}

// NewRpUnbilledPrefixesClient creates a new instance of [RpUnbilledPrefixesClient].
func (client *Client) NewRpUnbilledPrefixesClient() *RpUnbilledPrefixesClient {
	return &RpUnbilledPrefixesClient{
		internal:       client.internal,
		subscriptionID: client.subscriptionID,
	}
}

// NewServiceCountriesClient creates a new instance of [ServiceCountriesClient].
func (client *Client) NewServiceCountriesClient() *ServiceCountriesClient {
	return &ServiceCountriesClient{
		internal:       client.internal,
		subscriptionID: client.subscriptionID,
	}
}

// NewServiceLocationsClient creates a new instance of [ServiceLocationsClient].
func (client *Client) NewServiceLocationsClient() *ServiceLocationsClient {
	return &ServiceLocationsClient{
		internal:       client.internal,
		subscriptionID: client.subscriptionID,
	}
}

// NewServiceProvidersClient creates a new instance of [ServiceProvidersClient].
func (client *Client) NewServiceProvidersClient() *ServiceProvidersClient {
	return &ServiceProvidersClient{
		internal:       client.internal,
		subscriptionID: client.subscriptionID,
	}
}

// NewServicesClient creates a new instance of [ServicesClient].
func (client *Client) NewServicesClient() *ServicesClient {
	return &ServicesClient{
		internal:       client.internal,
		subscriptionID: client.subscriptionID,
	}
}

// CheckServiceProviderAvailability - Checks if the peering service provider is present within 1000 miles of customer's location
// If the operation fails it returns an *azcore.ResponseError type.
//
// Generated from API version 2025-05-01
//   - checkServiceProviderAvailabilityInput - The request body
//   - options - ClientCheckServiceProviderAvailabilityOptions contains the optional parameters for the Client.CheckServiceProviderAvailability
//     method.
func (client *Client) CheckServiceProviderAvailability(ctx context.Context, checkServiceProviderAvailabilityInput CheckServiceProviderAvailabilityInput, options *ClientCheckServiceProviderAvailabilityOptions) (ClientCheckServiceProviderAvailabilityResponse, error) {
	var err error
	const operationName = "Client.CheckServiceProviderAvailability"
	ctx = context.WithValue(ctx, runtime.CtxAPINameKey{}, operationName)
	ctx, endSpan := runtime.StartSpan(ctx, operationName, client.internal.Tracer(), nil)
	defer func() { endSpan(err) }()
	req, err := client.checkServiceProviderAvailabilityCreateRequest(ctx, checkServiceProviderAvailabilityInput, options)
	if err != nil {
		return ClientCheckServiceProviderAvailabilityResponse{}, err
	}
	httpResp, err := client.internal.Pipeline().Do(req)
	if err != nil {
		return ClientCheckServiceProviderAvailabilityResponse{}, err
	}
	if !runtime.HasStatusCode(httpResp, http.StatusOK) {
		err = runtime.NewResponseError(httpResp)
		return ClientCheckServiceProviderAvailabilityResponse{}, err
	}
	resp, err := client.checkServiceProviderAvailabilityHandleResponse(httpResp)
	return resp, err
}

// checkServiceProviderAvailabilityCreateRequest creates the CheckServiceProviderAvailability request.
func (client *Client) checkServiceProviderAvailabilityCreateRequest(ctx context.Context, checkServiceProviderAvailabilityInput CheckServiceProviderAvailabilityInput, _ *ClientCheckServiceProviderAvailabilityOptions) (*policy.Request, error) {
	urlPath := "/subscriptions/{subscriptionId}/providers/Microsoft.Peering/checkServiceProviderAvailability"
	if client.subscriptionID == "" {
		return nil, errors.New("parameter client.subscriptionID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{subscriptionId}", url.PathEscape(client.subscriptionID))
	req, err := runtime.NewRequest(ctx, http.MethodPost, runtime.JoinPaths(client.internal.Endpoint(), urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("api-version", "2025-05-01")
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header["Accept"] = []string{"application/json"}
	req.Raw().Header["Content-Type"] = []string{"application/json"}
	if err := runtime.MarshalAsJSON(req, checkServiceProviderAvailabilityInput); err != nil {
		return nil, err
	}
	return req, nil
}

// checkServiceProviderAvailabilityHandleResponse handles the CheckServiceProviderAvailability response.
func (client *Client) checkServiceProviderAvailabilityHandleResponse(resp *http.Response) (ClientCheckServiceProviderAvailabilityResponse, error) {
	result := ClientCheckServiceProviderAvailabilityResponse{}
	if val := resp.Header.Get("content-type"); val != "" {
		result.ContentType = &val
	}
	if err := runtime.UnmarshalAsJSON(resp, &result.Value); err != nil {
		return ClientCheckServiceProviderAvailabilityResponse{}, err
	}
	return result, nil
}
