// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) Go Code Generator. DO NOT EDIT.

package fake

import (
	"context"
	"errors"
	"fmt"
	azfake "github.com/Azure/azure-sdk-for-go/sdk/azcore/fake"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/fake/server"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/runtime"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/to"
	"github.com/Azure/azure-sdk-for-go/sdk/resourcemanager/peering/armpeering/v2"
	"net/http"
	"net/url"
	"regexp"
)

// RegisteredPrefixesServer is a fake server for instances of the armpeering.RegisteredPrefixesClient type.
type RegisteredPrefixesServer struct {
	// CreateOrUpdate is the fake for method RegisteredPrefixesClient.CreateOrUpdate
	// HTTP status codes to indicate success: http.StatusOK, http.StatusCreated
	CreateOrUpdate func(ctx context.Context, resourceGroupName string, peeringName string, registeredPrefixName string, registeredPrefix armpeering.RegisteredPrefix, options *armpeering.RegisteredPrefixesClientCreateOrUpdateOptions) (resp azfake.Responder[armpeering.RegisteredPrefixesClientCreateOrUpdateResponse], errResp azfake.ErrorResponder)

	// Delete is the fake for method RegisteredPrefixesClient.Delete
	// HTTP status codes to indicate success: http.StatusOK, http.StatusNoContent
	Delete func(ctx context.Context, resourceGroupName string, peeringName string, registeredPrefixName string, options *armpeering.RegisteredPrefixesClientDeleteOptions) (resp azfake.Responder[armpeering.RegisteredPrefixesClientDeleteResponse], errResp azfake.ErrorResponder)

	// Get is the fake for method RegisteredPrefixesClient.Get
	// HTTP status codes to indicate success: http.StatusOK
	Get func(ctx context.Context, resourceGroupName string, peeringName string, registeredPrefixName string, options *armpeering.RegisteredPrefixesClientGetOptions) (resp azfake.Responder[armpeering.RegisteredPrefixesClientGetResponse], errResp azfake.ErrorResponder)

	// NewListByPeeringPager is the fake for method RegisteredPrefixesClient.NewListByPeeringPager
	// HTTP status codes to indicate success: http.StatusOK
	NewListByPeeringPager func(resourceGroupName string, peeringName string, options *armpeering.RegisteredPrefixesClientListByPeeringOptions) (resp azfake.PagerResponder[armpeering.RegisteredPrefixesClientListByPeeringResponse])

	// Validate is the fake for method RegisteredPrefixesClient.Validate
	// HTTP status codes to indicate success: http.StatusOK
	Validate func(ctx context.Context, resourceGroupName string, peeringName string, registeredPrefixName string, options *armpeering.RegisteredPrefixesClientValidateOptions) (resp azfake.Responder[armpeering.RegisteredPrefixesClientValidateResponse], errResp azfake.ErrorResponder)
}

// NewRegisteredPrefixesServerTransport creates a new instance of RegisteredPrefixesServerTransport with the provided implementation.
// The returned RegisteredPrefixesServerTransport instance is connected to an instance of armpeering.RegisteredPrefixesClient via the
// azcore.ClientOptions.Transporter field in the client's constructor parameters.
func NewRegisteredPrefixesServerTransport(srv *RegisteredPrefixesServer) *RegisteredPrefixesServerTransport {
	return &RegisteredPrefixesServerTransport{
		srv:                   srv,
		newListByPeeringPager: newTracker[azfake.PagerResponder[armpeering.RegisteredPrefixesClientListByPeeringResponse]](),
	}
}

// RegisteredPrefixesServerTransport connects instances of armpeering.RegisteredPrefixesClient to instances of RegisteredPrefixesServer.
// Don't use this type directly, use NewRegisteredPrefixesServerTransport instead.
type RegisteredPrefixesServerTransport struct {
	srv                   *RegisteredPrefixesServer
	newListByPeeringPager *tracker[azfake.PagerResponder[armpeering.RegisteredPrefixesClientListByPeeringResponse]]
}

// Do implements the policy.Transporter interface for RegisteredPrefixesServerTransport.
func (r *RegisteredPrefixesServerTransport) Do(req *http.Request) (*http.Response, error) {
	rawMethod := req.Context().Value(runtime.CtxAPINameKey{})
	method, ok := rawMethod.(string)
	if !ok {
		return nil, nonRetriableError{errors.New("unable to dispatch request, missing value for CtxAPINameKey")}
	}

	return r.dispatchToMethodFake(req, method)
}

func (r *RegisteredPrefixesServerTransport) dispatchToMethodFake(req *http.Request, method string) (*http.Response, error) {
	resultChan := make(chan result)
	defer close(resultChan)

	go func() {
		var intercepted bool
		var res result
		if registeredPrefixesServerTransportInterceptor != nil {
			res.resp, res.err, intercepted = registeredPrefixesServerTransportInterceptor.Do(req)
		}
		if !intercepted {
			switch method {
			case "RegisteredPrefixesClient.CreateOrUpdate":
				res.resp, res.err = r.dispatchCreateOrUpdate(req)
			case "RegisteredPrefixesClient.Delete":
				res.resp, res.err = r.dispatchDelete(req)
			case "RegisteredPrefixesClient.Get":
				res.resp, res.err = r.dispatchGet(req)
			case "RegisteredPrefixesClient.NewListByPeeringPager":
				res.resp, res.err = r.dispatchNewListByPeeringPager(req)
			case "RegisteredPrefixesClient.Validate":
				res.resp, res.err = r.dispatchValidate(req)
			default:
				res.err = fmt.Errorf("unhandled API %s", method)
			}

		}
		select {
		case resultChan <- res:
		case <-req.Context().Done():
		}
	}()

	select {
	case <-req.Context().Done():
		return nil, req.Context().Err()
	case res := <-resultChan:
		return res.resp, res.err
	}
}

func (r *RegisteredPrefixesServerTransport) dispatchCreateOrUpdate(req *http.Request) (*http.Response, error) {
	if r.srv.CreateOrUpdate == nil {
		return nil, &nonRetriableError{errors.New("fake for method CreateOrUpdate not implemented")}
	}
	const regexStr = `/subscriptions/(?P<subscriptionId>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/resourceGroups/(?P<resourceGroupName>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/providers/Microsoft\.Peering/peerings/(?P<peeringName>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/registeredPrefixes/(?P<registeredPrefixName>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)`
	regex := regexp.MustCompile(regexStr)
	matches := regex.FindStringSubmatch(req.URL.EscapedPath())
	if len(matches) < 5 {
		return nil, fmt.Errorf("failed to parse path %s", req.URL.Path)
	}
	body, err := server.UnmarshalRequestAsJSON[armpeering.RegisteredPrefix](req)
	if err != nil {
		return nil, err
	}
	resourceGroupNameParam, err := url.PathUnescape(matches[regex.SubexpIndex("resourceGroupName")])
	if err != nil {
		return nil, err
	}
	peeringNameParam, err := url.PathUnescape(matches[regex.SubexpIndex("peeringName")])
	if err != nil {
		return nil, err
	}
	registeredPrefixNameParam, err := url.PathUnescape(matches[regex.SubexpIndex("registeredPrefixName")])
	if err != nil {
		return nil, err
	}
	respr, errRespr := r.srv.CreateOrUpdate(req.Context(), resourceGroupNameParam, peeringNameParam, registeredPrefixNameParam, body, nil)
	if respErr := server.GetError(errRespr, req); respErr != nil {
		return nil, respErr
	}
	respContent := server.GetResponseContent(respr)
	if !contains([]int{http.StatusOK, http.StatusCreated}, respContent.HTTPStatus) {
		return nil, &nonRetriableError{fmt.Errorf("unexpected status code %d. acceptable values are http.StatusOK, http.StatusCreated", respContent.HTTPStatus)}
	}
	resp, err := server.MarshalResponseAsJSON(respContent, server.GetResponse(respr).RegisteredPrefix, req)
	if err != nil {
		return nil, err
	}
	return resp, nil
}

func (r *RegisteredPrefixesServerTransport) dispatchDelete(req *http.Request) (*http.Response, error) {
	if r.srv.Delete == nil {
		return nil, &nonRetriableError{errors.New("fake for method Delete not implemented")}
	}
	const regexStr = `/subscriptions/(?P<subscriptionId>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/resourceGroups/(?P<resourceGroupName>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/providers/Microsoft\.Peering/peerings/(?P<peeringName>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/registeredPrefixes/(?P<registeredPrefixName>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)`
	regex := regexp.MustCompile(regexStr)
	matches := regex.FindStringSubmatch(req.URL.EscapedPath())
	if len(matches) < 5 {
		return nil, fmt.Errorf("failed to parse path %s", req.URL.Path)
	}
	resourceGroupNameParam, err := url.PathUnescape(matches[regex.SubexpIndex("resourceGroupName")])
	if err != nil {
		return nil, err
	}
	peeringNameParam, err := url.PathUnescape(matches[regex.SubexpIndex("peeringName")])
	if err != nil {
		return nil, err
	}
	registeredPrefixNameParam, err := url.PathUnescape(matches[regex.SubexpIndex("registeredPrefixName")])
	if err != nil {
		return nil, err
	}
	respr, errRespr := r.srv.Delete(req.Context(), resourceGroupNameParam, peeringNameParam, registeredPrefixNameParam, nil)
	if respErr := server.GetError(errRespr, req); respErr != nil {
		return nil, respErr
	}
	respContent := server.GetResponseContent(respr)
	if !contains([]int{http.StatusOK, http.StatusNoContent}, respContent.HTTPStatus) {
		return nil, &nonRetriableError{fmt.Errorf("unexpected status code %d. acceptable values are http.StatusOK, http.StatusNoContent", respContent.HTTPStatus)}
	}
	resp, err := server.NewResponse(respContent, req, nil)
	if err != nil {
		return nil, err
	}
	return resp, nil
}

func (r *RegisteredPrefixesServerTransport) dispatchGet(req *http.Request) (*http.Response, error) {
	if r.srv.Get == nil {
		return nil, &nonRetriableError{errors.New("fake for method Get not implemented")}
	}
	const regexStr = `/subscriptions/(?P<subscriptionId>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/resourceGroups/(?P<resourceGroupName>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/providers/Microsoft\.Peering/peerings/(?P<peeringName>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/registeredPrefixes/(?P<registeredPrefixName>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)`
	regex := regexp.MustCompile(regexStr)
	matches := regex.FindStringSubmatch(req.URL.EscapedPath())
	if len(matches) < 5 {
		return nil, fmt.Errorf("failed to parse path %s", req.URL.Path)
	}
	resourceGroupNameParam, err := url.PathUnescape(matches[regex.SubexpIndex("resourceGroupName")])
	if err != nil {
		return nil, err
	}
	peeringNameParam, err := url.PathUnescape(matches[regex.SubexpIndex("peeringName")])
	if err != nil {
		return nil, err
	}
	registeredPrefixNameParam, err := url.PathUnescape(matches[regex.SubexpIndex("registeredPrefixName")])
	if err != nil {
		return nil, err
	}
	respr, errRespr := r.srv.Get(req.Context(), resourceGroupNameParam, peeringNameParam, registeredPrefixNameParam, nil)
	if respErr := server.GetError(errRespr, req); respErr != nil {
		return nil, respErr
	}
	respContent := server.GetResponseContent(respr)
	if !contains([]int{http.StatusOK}, respContent.HTTPStatus) {
		return nil, &nonRetriableError{fmt.Errorf("unexpected status code %d. acceptable values are http.StatusOK", respContent.HTTPStatus)}
	}
	resp, err := server.MarshalResponseAsJSON(respContent, server.GetResponse(respr).RegisteredPrefix, req)
	if err != nil {
		return nil, err
	}
	return resp, nil
}

func (r *RegisteredPrefixesServerTransport) dispatchNewListByPeeringPager(req *http.Request) (*http.Response, error) {
	if r.srv.NewListByPeeringPager == nil {
		return nil, &nonRetriableError{errors.New("fake for method NewListByPeeringPager not implemented")}
	}
	newListByPeeringPager := r.newListByPeeringPager.get(req)
	if newListByPeeringPager == nil {
		const regexStr = `/subscriptions/(?P<subscriptionId>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/resourceGroups/(?P<resourceGroupName>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/providers/Microsoft\.Peering/peerings/(?P<peeringName>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/registeredPrefixes`
		regex := regexp.MustCompile(regexStr)
		matches := regex.FindStringSubmatch(req.URL.EscapedPath())
		if len(matches) < 4 {
			return nil, fmt.Errorf("failed to parse path %s", req.URL.Path)
		}
		resourceGroupNameParam, err := url.PathUnescape(matches[regex.SubexpIndex("resourceGroupName")])
		if err != nil {
			return nil, err
		}
		peeringNameParam, err := url.PathUnescape(matches[regex.SubexpIndex("peeringName")])
		if err != nil {
			return nil, err
		}
		resp := r.srv.NewListByPeeringPager(resourceGroupNameParam, peeringNameParam, nil)
		newListByPeeringPager = &resp
		r.newListByPeeringPager.add(req, newListByPeeringPager)
		server.PagerResponderInjectNextLinks(newListByPeeringPager, req, func(page *armpeering.RegisteredPrefixesClientListByPeeringResponse, createLink func() string) {
			page.NextLink = to.Ptr(createLink())
		})
	}
	resp, err := server.PagerResponderNext(newListByPeeringPager, req)
	if err != nil {
		return nil, err
	}
	if !contains([]int{http.StatusOK}, resp.StatusCode) {
		r.newListByPeeringPager.remove(req)
		return nil, &nonRetriableError{fmt.Errorf("unexpected status code %d. acceptable values are http.StatusOK", resp.StatusCode)}
	}
	if !server.PagerResponderMore(newListByPeeringPager) {
		r.newListByPeeringPager.remove(req)
	}
	return resp, nil
}

func (r *RegisteredPrefixesServerTransport) dispatchValidate(req *http.Request) (*http.Response, error) {
	if r.srv.Validate == nil {
		return nil, &nonRetriableError{errors.New("fake for method Validate not implemented")}
	}
	const regexStr = `/subscriptions/(?P<subscriptionId>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/resourceGroups/(?P<resourceGroupName>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/providers/Microsoft\.Peering/peerings/(?P<peeringName>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/registeredPrefixes/(?P<registeredPrefixName>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/validate`
	regex := regexp.MustCompile(regexStr)
	matches := regex.FindStringSubmatch(req.URL.EscapedPath())
	if len(matches) < 5 {
		return nil, fmt.Errorf("failed to parse path %s", req.URL.Path)
	}
	resourceGroupNameParam, err := url.PathUnescape(matches[regex.SubexpIndex("resourceGroupName")])
	if err != nil {
		return nil, err
	}
	peeringNameParam, err := url.PathUnescape(matches[regex.SubexpIndex("peeringName")])
	if err != nil {
		return nil, err
	}
	registeredPrefixNameParam, err := url.PathUnescape(matches[regex.SubexpIndex("registeredPrefixName")])
	if err != nil {
		return nil, err
	}
	respr, errRespr := r.srv.Validate(req.Context(), resourceGroupNameParam, peeringNameParam, registeredPrefixNameParam, nil)
	if respErr := server.GetError(errRespr, req); respErr != nil {
		return nil, respErr
	}
	respContent := server.GetResponseContent(respr)
	if !contains([]int{http.StatusOK}, respContent.HTTPStatus) {
		return nil, &nonRetriableError{fmt.Errorf("unexpected status code %d. acceptable values are http.StatusOK", respContent.HTTPStatus)}
	}
	resp, err := server.MarshalResponseAsJSON(respContent, server.GetResponse(respr).RegisteredPrefix, req)
	if err != nil {
		return nil, err
	}
	return resp, nil
}

// set this to conditionally intercept incoming requests to RegisteredPrefixesServerTransport
var registeredPrefixesServerTransportInterceptor interface {
	// Do returns true if the server transport should use the returned response/error
	Do(*http.Request) (*http.Response, error, bool)
}
