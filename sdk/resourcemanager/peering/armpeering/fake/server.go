// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) Go Code Generator. DO NOT EDIT.

package fake

import (
	"context"
	"errors"
	"fmt"
	azfake "github.com/Azure/azure-sdk-for-go/sdk/azcore/fake"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/fake/server"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/runtime"
	"github.com/Azure/azure-sdk-for-go/sdk/resourcemanager/peering/armpeering/v2"
	"net/http"
	"regexp"
	"strings"
	"sync"
)

// Server is a fake server for instances of the armpeering.Client type.
type Server struct {
	// CdnPeeringPrefixesServer contains the fakes for client CdnPeeringPrefixesClient
	CdnPeeringPrefixesServer CdnPeeringPrefixesServer

	// ConnectionMonitorTestsServer contains the fakes for client ConnectionMonitorTestsClient
	ConnectionMonitorTestsServer ConnectionMonitorTestsServer

	// LegacyPeeringsServer contains the fakes for client LegacyPeeringsClient
	LegacyPeeringsServer LegacyPeeringsServer

	// LocationsServer contains the fakes for client LocationsClient
	LocationsServer LocationsServer

	// LookingGlassServer contains the fakes for client LookingGlassClient
	LookingGlassServer LookingGlassServer

	// OperationsServer contains the fakes for client OperationsClient
	OperationsServer OperationsServer

	// PeerAsnsServer contains the fakes for client PeerAsnsClient
	PeerAsnsServer PeerAsnsServer

	// PeeringsServer contains the fakes for client PeeringsClient
	PeeringsServer PeeringsServer

	// PrefixesServer contains the fakes for client PrefixesClient
	PrefixesServer PrefixesServer

	// ReceivedRoutesServer contains the fakes for client ReceivedRoutesClient
	ReceivedRoutesServer ReceivedRoutesServer

	// RegisteredAsnsServer contains the fakes for client RegisteredAsnsClient
	RegisteredAsnsServer RegisteredAsnsServer

	// RegisteredPrefixesServer contains the fakes for client RegisteredPrefixesClient
	RegisteredPrefixesServer RegisteredPrefixesServer

	// RpUnbilledPrefixesServer contains the fakes for client RpUnbilledPrefixesClient
	RpUnbilledPrefixesServer RpUnbilledPrefixesServer

	// ServiceCountriesServer contains the fakes for client ServiceCountriesClient
	ServiceCountriesServer ServiceCountriesServer

	// ServiceLocationsServer contains the fakes for client ServiceLocationsClient
	ServiceLocationsServer ServiceLocationsServer

	// ServiceProvidersServer contains the fakes for client ServiceProvidersClient
	ServiceProvidersServer ServiceProvidersServer

	// ServicesServer contains the fakes for client ServicesClient
	ServicesServer ServicesServer

	// CheckServiceProviderAvailability is the fake for method Client.CheckServiceProviderAvailability
	// HTTP status codes to indicate success: http.StatusOK
	CheckServiceProviderAvailability func(ctx context.Context, checkServiceProviderAvailabilityInput armpeering.CheckServiceProviderAvailabilityInput, options *armpeering.ClientCheckServiceProviderAvailabilityOptions) (resp azfake.Responder[armpeering.ClientCheckServiceProviderAvailabilityResponse], errResp azfake.ErrorResponder)
}

// NewServerTransport creates a new instance of ServerTransport with the provided implementation.
// The returned ServerTransport instance is connected to an instance of armpeering.Client via the
// azcore.ClientOptions.Transporter field in the client's constructor parameters.
func NewServerTransport(srv *Server) *ServerTransport {
	return &ServerTransport{srv: srv}
}

// ServerTransport connects instances of armpeering.Client to instances of Server.
// Don't use this type directly, use NewServerTransport instead.
type ServerTransport struct {
	srv                            *Server
	trMu                           sync.Mutex
	trCdnPeeringPrefixesServer     *CdnPeeringPrefixesServerTransport
	trConnectionMonitorTestsServer *ConnectionMonitorTestsServerTransport
	trLegacyPeeringsServer         *LegacyPeeringsServerTransport
	trLocationsServer              *LocationsServerTransport
	trLookingGlassServer           *LookingGlassServerTransport
	trOperationsServer             *OperationsServerTransport
	trPeerAsnsServer               *PeerAsnsServerTransport
	trPeeringsServer               *PeeringsServerTransport
	trPrefixesServer               *PrefixesServerTransport
	trReceivedRoutesServer         *ReceivedRoutesServerTransport
	trRegisteredAsnsServer         *RegisteredAsnsServerTransport
	trRegisteredPrefixesServer     *RegisteredPrefixesServerTransport
	trRpUnbilledPrefixesServer     *RpUnbilledPrefixesServerTransport
	trServiceCountriesServer       *ServiceCountriesServerTransport
	trServiceLocationsServer       *ServiceLocationsServerTransport
	trServiceProvidersServer       *ServiceProvidersServerTransport
	trServicesServer               *ServicesServerTransport
}

// Do implements the policy.Transporter interface for ServerTransport.
func (s *ServerTransport) Do(req *http.Request) (*http.Response, error) {
	rawMethod := req.Context().Value(runtime.CtxAPINameKey{})
	method, ok := rawMethod.(string)
	if !ok {
		return nil, nonRetriableError{errors.New("unable to dispatch request, missing value for CtxAPINameKey")}
	}

	if client := method[:strings.Index(method, ".")]; client != "Client" {
		return s.dispatchToClientFake(req, client)
	}
	return s.dispatchToMethodFake(req, method)
}

func (s *ServerTransport) dispatchToClientFake(req *http.Request, client string) (*http.Response, error) {
	var resp *http.Response
	var err error

	switch client {
	case "CdnPeeringPrefixesClient":
		initServer(&s.trMu, &s.trCdnPeeringPrefixesServer, func() *CdnPeeringPrefixesServerTransport {
			return NewCdnPeeringPrefixesServerTransport(&s.srv.CdnPeeringPrefixesServer)
		})
		resp, err = s.trCdnPeeringPrefixesServer.Do(req)
	case "ConnectionMonitorTestsClient":
		initServer(&s.trMu, &s.trConnectionMonitorTestsServer, func() *ConnectionMonitorTestsServerTransport {
			return NewConnectionMonitorTestsServerTransport(&s.srv.ConnectionMonitorTestsServer)
		})
		resp, err = s.trConnectionMonitorTestsServer.Do(req)
	case "LegacyPeeringsClient":
		initServer(&s.trMu, &s.trLegacyPeeringsServer, func() *LegacyPeeringsServerTransport {
			return NewLegacyPeeringsServerTransport(&s.srv.LegacyPeeringsServer)
		})
		resp, err = s.trLegacyPeeringsServer.Do(req)
	case "LocationsClient":
		initServer(&s.trMu, &s.trLocationsServer, func() *LocationsServerTransport {
			return NewLocationsServerTransport(&s.srv.LocationsServer)
		})
		resp, err = s.trLocationsServer.Do(req)
	case "LookingGlassClient":
		initServer(&s.trMu, &s.trLookingGlassServer, func() *LookingGlassServerTransport {
			return NewLookingGlassServerTransport(&s.srv.LookingGlassServer)
		})
		resp, err = s.trLookingGlassServer.Do(req)
	case "OperationsClient":
		initServer(&s.trMu, &s.trOperationsServer, func() *OperationsServerTransport {
			return NewOperationsServerTransport(&s.srv.OperationsServer)
		})
		resp, err = s.trOperationsServer.Do(req)
	case "PeerAsnsClient":
		initServer(&s.trMu, &s.trPeerAsnsServer, func() *PeerAsnsServerTransport {
			return NewPeerAsnsServerTransport(&s.srv.PeerAsnsServer)
		})
		resp, err = s.trPeerAsnsServer.Do(req)
	case "PeeringsClient":
		initServer(&s.trMu, &s.trPeeringsServer, func() *PeeringsServerTransport {
			return NewPeeringsServerTransport(&s.srv.PeeringsServer)
		})
		resp, err = s.trPeeringsServer.Do(req)
	case "PrefixesClient":
		initServer(&s.trMu, &s.trPrefixesServer, func() *PrefixesServerTransport {
			return NewPrefixesServerTransport(&s.srv.PrefixesServer)
		})
		resp, err = s.trPrefixesServer.Do(req)
	case "ReceivedRoutesClient":
		initServer(&s.trMu, &s.trReceivedRoutesServer, func() *ReceivedRoutesServerTransport {
			return NewReceivedRoutesServerTransport(&s.srv.ReceivedRoutesServer)
		})
		resp, err = s.trReceivedRoutesServer.Do(req)
	case "RegisteredAsnsClient":
		initServer(&s.trMu, &s.trRegisteredAsnsServer, func() *RegisteredAsnsServerTransport {
			return NewRegisteredAsnsServerTransport(&s.srv.RegisteredAsnsServer)
		})
		resp, err = s.trRegisteredAsnsServer.Do(req)
	case "RegisteredPrefixesClient":
		initServer(&s.trMu, &s.trRegisteredPrefixesServer, func() *RegisteredPrefixesServerTransport {
			return NewRegisteredPrefixesServerTransport(&s.srv.RegisteredPrefixesServer)
		})
		resp, err = s.trRegisteredPrefixesServer.Do(req)
	case "RpUnbilledPrefixesClient":
		initServer(&s.trMu, &s.trRpUnbilledPrefixesServer, func() *RpUnbilledPrefixesServerTransport {
			return NewRpUnbilledPrefixesServerTransport(&s.srv.RpUnbilledPrefixesServer)
		})
		resp, err = s.trRpUnbilledPrefixesServer.Do(req)
	case "ServiceCountriesClient":
		initServer(&s.trMu, &s.trServiceCountriesServer, func() *ServiceCountriesServerTransport {
			return NewServiceCountriesServerTransport(&s.srv.ServiceCountriesServer)
		})
		resp, err = s.trServiceCountriesServer.Do(req)
	case "ServiceLocationsClient":
		initServer(&s.trMu, &s.trServiceLocationsServer, func() *ServiceLocationsServerTransport {
			return NewServiceLocationsServerTransport(&s.srv.ServiceLocationsServer)
		})
		resp, err = s.trServiceLocationsServer.Do(req)
	case "ServiceProvidersClient":
		initServer(&s.trMu, &s.trServiceProvidersServer, func() *ServiceProvidersServerTransport {
			return NewServiceProvidersServerTransport(&s.srv.ServiceProvidersServer)
		})
		resp, err = s.trServiceProvidersServer.Do(req)
	case "ServicesClient":
		initServer(&s.trMu, &s.trServicesServer, func() *ServicesServerTransport {
			return NewServicesServerTransport(&s.srv.ServicesServer)
		})
		resp, err = s.trServicesServer.Do(req)
	default:
		err = fmt.Errorf("unhandled client %s", client)
	}

	return resp, err
}

func (s *ServerTransport) dispatchToMethodFake(req *http.Request, method string) (*http.Response, error) {
	resultChan := make(chan result)
	defer close(resultChan)

	go func() {
		var intercepted bool
		var res result
		if serverTransportInterceptor != nil {
			res.resp, res.err, intercepted = serverTransportInterceptor.Do(req)
		}
		if !intercepted {
			switch method {
			case "Client.CheckServiceProviderAvailability":
				res.resp, res.err = s.dispatchCheckServiceProviderAvailability(req)
			default:
				res.err = fmt.Errorf("unhandled API %s", method)
			}

		}
		select {
		case resultChan <- res:
		case <-req.Context().Done():
		}
	}()

	select {
	case <-req.Context().Done():
		return nil, req.Context().Err()
	case res := <-resultChan:
		return res.resp, res.err
	}
}

func (s *ServerTransport) dispatchCheckServiceProviderAvailability(req *http.Request) (*http.Response, error) {
	if s.srv.CheckServiceProviderAvailability == nil {
		return nil, &nonRetriableError{errors.New("fake for method CheckServiceProviderAvailability not implemented")}
	}
	const regexStr = `/subscriptions/(?P<subscriptionId>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/providers/Microsoft\.Peering/checkServiceProviderAvailability`
	regex := regexp.MustCompile(regexStr)
	matches := regex.FindStringSubmatch(req.URL.EscapedPath())
	if len(matches) < 2 {
		return nil, fmt.Errorf("failed to parse path %s", req.URL.Path)
	}
	body, err := server.UnmarshalRequestAsJSON[armpeering.CheckServiceProviderAvailabilityInput](req)
	if err != nil {
		return nil, err
	}
	respr, errRespr := s.srv.CheckServiceProviderAvailability(req.Context(), body, nil)
	if respErr := server.GetError(errRespr, req); respErr != nil {
		return nil, respErr
	}
	respContent := server.GetResponseContent(respr)
	if !contains([]int{http.StatusOK}, respContent.HTTPStatus) {
		return nil, &nonRetriableError{fmt.Errorf("unexpected status code %d. acceptable values are http.StatusOK", respContent.HTTPStatus)}
	}
	resp, err := server.MarshalResponseAsJSON(respContent, server.GetResponse(respr).Value, req)
	if err != nil {
		return nil, err
	}
	if val := server.GetResponse(respr).ContentType; val != nil {
		resp.Header.Set("content-type", "application/json")
	}
	return resp, nil
}

// set this to conditionally intercept incoming requests to ServerTransport
var serverTransportInterceptor interface {
	// Do returns true if the server transport should use the returned response/error
	Do(*http.Request) (*http.Response, error, bool)
}
