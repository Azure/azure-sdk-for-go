//go:build go1.16
// +build go1.16

// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

package armpeering

import (
	"encoding/json"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore"
	"reflect"
)

// BgpSession - The properties that define a BGP session.
type BgpSession struct {
	// The MD5 authentication key of the session.
	MD5AuthenticationKey *string `json:"md5AuthenticationKey,omitempty"`

	// The maximum number of prefixes advertised over the IPv4 session.
	MaxPrefixesAdvertisedV4 *int32 `json:"maxPrefixesAdvertisedV4,omitempty"`

	// The maximum number of prefixes advertised over the IPv6 session.
	MaxPrefixesAdvertisedV6 *int32 `json:"maxPrefixesAdvertisedV6,omitempty"`

	// The IPv4 session address on peer's end.
	PeerSessionIPv4Address *string `json:"peerSessionIPv4Address,omitempty"`

	// The IPv6 session address on peer's end.
	PeerSessionIPv6Address *string `json:"peerSessionIPv6Address,omitempty"`

	// The IPv4 prefix that contains both ends' IPv4 addresses.
	SessionPrefixV4 *string `json:"sessionPrefixV4,omitempty"`

	// The IPv6 prefix that contains both ends' IPv6 addresses.
	SessionPrefixV6 *string `json:"sessionPrefixV6,omitempty"`

	// READ-ONLY; The IPv4 session address on Microsoft's end.
	MicrosoftSessionIPv4Address *string `json:"microsoftSessionIPv4Address,omitempty" azure:"ro"`

	// READ-ONLY; The IPv6 session address on Microsoft's end.
	MicrosoftSessionIPv6Address *string `json:"microsoftSessionIPv6Address,omitempty" azure:"ro"`

	// READ-ONLY; The state of the IPv4 session.
	SessionStateV4 *SessionStateV4 `json:"sessionStateV4,omitempty" azure:"ro"`

	// READ-ONLY; The state of the IPv6 session.
	SessionStateV6 *SessionStateV6 `json:"sessionStateV6,omitempty" azure:"ro"`
}

// CheckServiceProviderAvailabilityInput - Class for CheckServiceProviderAvailabilityInput
type CheckServiceProviderAvailabilityInput struct {
	// Gets or sets the PeeringServiceLocation
	PeeringServiceLocation *string `json:"peeringServiceLocation,omitempty"`

	// Gets or sets the PeeringServiceProvider
	PeeringServiceProvider *string `json:"peeringServiceProvider,omitempty"`
}

// ContactInfo - The contact information of the peer.
type ContactInfo struct {
	// The list of email addresses.
	Emails []*string `json:"emails,omitempty"`

	// The list of contact numbers.
	Phone []*string `json:"phone,omitempty"`
}

// MarshalJSON implements the json.Marshaller interface for type ContactInfo.
func (c ContactInfo) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "emails", c.Emails)
	populate(objectMap, "phone", c.Phone)
	return json.Marshal(objectMap)
}

// DirectConnection - The properties that define a direct connection.
type DirectConnection struct {
	// The bandwidth of the connection.
	BandwidthInMbps *int32 `json:"bandwidthInMbps,omitempty"`

	// The BGP session associated with the connection.
	BgpSession *BgpSession `json:"bgpSession,omitempty"`

	// The unique identifier (GUID) for the connection.
	ConnectionIdentifier *string `json:"connectionIdentifier,omitempty"`

	// The PeeringDB.com ID of the facility at which the connection has to be set up.
	PeeringDBFacilityID *int32 `json:"peeringDBFacilityId,omitempty"`

	// The bandwidth that is actually provisioned.
	ProvisionedBandwidthInMbps *int32 `json:"provisionedBandwidthInMbps,omitempty"`

	// The field indicating if Microsoft provides session ip addresses.
	SessionAddressProvider *SessionAddressProvider `json:"sessionAddressProvider,omitempty"`

	// The flag that indicates whether or not the connection is used for peering service.
	UseForPeeringService *bool `json:"useForPeeringService,omitempty"`

	// READ-ONLY; The state of the connection.
	ConnectionState *ConnectionState `json:"connectionState,omitempty" azure:"ro"`
}

// DirectPeeringFacility - The properties that define a direct peering facility.
type DirectPeeringFacility struct {
	// The address of the direct peering facility.
	Address *string `json:"address,omitempty"`

	// The type of the direct peering.
	DirectPeeringType *DirectPeeringType `json:"directPeeringType,omitempty"`

	// The PeeringDB.com ID of the facility.
	PeeringDBFacilityID *int32 `json:"peeringDBFacilityId,omitempty"`

	// The PeeringDB.com URL of the facility.
	PeeringDBFacilityLink *string `json:"peeringDBFacilityLink,omitempty"`
}

// ErrorResponse - The error response that indicates why an operation has failed.
// Implements the error and azcore.HTTPResponse interfaces.
type ErrorResponse struct {
	raw string
	// READ-ONLY; The error code.
	Code *string `json:"code,omitempty" azure:"ro"`

	// READ-ONLY; The error message.
	Message *string `json:"message,omitempty" azure:"ro"`
}

// Error implements the error interface for type ErrorResponse.
// The contents of the error text are not contractual and subject to change.
func (e ErrorResponse) Error() string {
	return e.raw
}

// ExchangeConnection - The properties that define an exchange connection.
type ExchangeConnection struct {
	// The BGP session associated with the connection.
	BgpSession *BgpSession `json:"bgpSession,omitempty"`

	// The unique identifier (GUID) for the connection.
	ConnectionIdentifier *string `json:"connectionIdentifier,omitempty"`

	// The PeeringDB.com ID of the facility at which the connection has to be set up.
	PeeringDBFacilityID *int32 `json:"peeringDBFacilityId,omitempty"`

	// READ-ONLY; The state of the connection.
	ConnectionState *ConnectionState `json:"connectionState,omitempty" azure:"ro"`
}

// ExchangePeeringFacility - The properties that define an exchange peering facility.
type ExchangePeeringFacility struct {
	// The bandwidth of the connection between Microsoft and the exchange peering facility.
	BandwidthInMbps *int32 `json:"bandwidthInMbps,omitempty"`

	// The name of the exchange peering facility.
	ExchangeName *string `json:"exchangeName,omitempty"`

	// The IPv4 prefixes associated with the exchange peering facility.
	FacilityIPv4Prefix *string `json:"facilityIPv4Prefix,omitempty"`

	// The IPv6 prefixes associated with the exchange peering facility.
	FacilityIPv6Prefix *string `json:"facilityIPv6Prefix,omitempty"`

	// The IPv4 address of Microsoft at the exchange peering facility.
	MicrosoftIPv4Address *string `json:"microsoftIPv4Address,omitempty"`

	// The IPv6 address of Microsoft at the exchange peering facility.
	MicrosoftIPv6Address *string `json:"microsoftIPv6Address,omitempty"`

	// The PeeringDB.com ID of the facility.
	PeeringDBFacilityID *int32 `json:"peeringDBFacilityId,omitempty"`

	// The PeeringDB.com URL of the facility.
	PeeringDBFacilityLink *string `json:"peeringDBFacilityLink,omitempty"`
}

// LegacyPeeringsListOptions contains the optional parameters for the LegacyPeerings.List method.
type LegacyPeeringsListOptions struct {
	// placeholder for future optional parameters
}

// Operation - The peering API operation.
type Operation struct {
	// READ-ONLY; The information related to the operation.
	Display *OperationDisplayInfo `json:"display,omitempty" azure:"ro"`

	// READ-ONLY; The flag that indicates whether the operation applies to data plane.
	IsDataAction *bool `json:"isDataAction,omitempty" azure:"ro"`

	// READ-ONLY; The name of the operation.
	Name *string `json:"name,omitempty" azure:"ro"`
}

// OperationDisplayInfo - The information related to the operation.
type OperationDisplayInfo struct {
	// READ-ONLY; The description of the operation.
	Description *string `json:"description,omitempty" azure:"ro"`

	// READ-ONLY; The name of the operation.
	Operation *string `json:"operation,omitempty" azure:"ro"`

	// READ-ONLY; The name of the resource provider.
	Provider *string `json:"provider,omitempty" azure:"ro"`

	// READ-ONLY; The type of the resource.
	Resource *string `json:"resource,omitempty" azure:"ro"`
}

// OperationListResult - The paginated list of peering API operations.
type OperationListResult struct {
	// The link to fetch the next page of peering API operations.
	NextLink *string `json:"nextLink,omitempty"`

	// The list of peering API operations.
	Value []*Operation `json:"value,omitempty"`
}

// MarshalJSON implements the json.Marshaller interface for type OperationListResult.
func (o OperationListResult) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "nextLink", o.NextLink)
	populate(objectMap, "value", o.Value)
	return json.Marshal(objectMap)
}

// OperationsListOptions contains the optional parameters for the Operations.List method.
type OperationsListOptions struct {
	// placeholder for future optional parameters
}

// PeerAsn - The essential information related to the peer's ASN.
type PeerAsn struct {
	Resource
	// The properties that define a peer's ASN.
	Properties *PeerAsnProperties `json:"properties,omitempty"`
}

// MarshalJSON implements the json.Marshaller interface for type PeerAsn.
func (p PeerAsn) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	p.Resource.marshalInternal(objectMap)
	populate(objectMap, "properties", p.Properties)
	return json.Marshal(objectMap)
}

// PeerAsnListResult - The paginated list of peer ASNs.
type PeerAsnListResult struct {
	// The link to fetch the next page of peer ASNs.
	NextLink *string `json:"nextLink,omitempty"`

	// The list of peer ASNs.
	Value []*PeerAsn `json:"value,omitempty"`
}

// MarshalJSON implements the json.Marshaller interface for type PeerAsnListResult.
func (p PeerAsnListResult) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "nextLink", p.NextLink)
	populate(objectMap, "value", p.Value)
	return json.Marshal(objectMap)
}

// PeerAsnProperties - The properties that define a peer's ASN.
type PeerAsnProperties struct {
	// The Autonomous System Number (ASN) of the peer.
	PeerAsn *int32 `json:"peerAsn,omitempty"`

	// The contact information of the peer.
	PeerContactInfo *ContactInfo `json:"peerContactInfo,omitempty"`

	// The name of the peer.
	PeerName *string `json:"peerName,omitempty"`

	// The validation state of the ASN associated with the peer.
	ValidationState *ValidationState `json:"validationState,omitempty"`
}

// PeerAsnsCreateOrUpdateOptions contains the optional parameters for the PeerAsns.CreateOrUpdate method.
type PeerAsnsCreateOrUpdateOptions struct {
	// placeholder for future optional parameters
}

// PeerAsnsDeleteOptions contains the optional parameters for the PeerAsns.Delete method.
type PeerAsnsDeleteOptions struct {
	// placeholder for future optional parameters
}

// PeerAsnsGetOptions contains the optional parameters for the PeerAsns.Get method.
type PeerAsnsGetOptions struct {
	// placeholder for future optional parameters
}

// PeerAsnsListBySubscriptionOptions contains the optional parameters for the PeerAsns.ListBySubscription method.
type PeerAsnsListBySubscriptionOptions struct {
	// placeholder for future optional parameters
}

// Peering is a logical representation of a set of connections to the Microsoft Cloud Edge at a location.
type Peering struct {
	Resource
	// REQUIRED; The kind of the peering.
	Kind *Kind `json:"kind,omitempty"`

	// REQUIRED; The location of the resource.
	Location *string `json:"location,omitempty"`

	// REQUIRED; The SKU that defines the tier and kind of the peering.
	SKU *PeeringSKU `json:"sku,omitempty"`

	// The properties that define a peering.
	Properties *PeeringProperties `json:"properties,omitempty"`

	// The resource tags.
	Tags map[string]*string `json:"tags,omitempty"`
}

// MarshalJSON implements the json.Marshaller interface for type Peering.
func (p Peering) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	p.Resource.marshalInternal(objectMap)
	populate(objectMap, "kind", p.Kind)
	populate(objectMap, "location", p.Location)
	populate(objectMap, "properties", p.Properties)
	populate(objectMap, "sku", p.SKU)
	populate(objectMap, "tags", p.Tags)
	return json.Marshal(objectMap)
}

// PeeringBandwidthOffer - The properties that define a peering bandwidth offer.
type PeeringBandwidthOffer struct {
	// The name of the bandwidth offer.
	OfferName *string `json:"offerName,omitempty"`

	// The value of the bandwidth offer in Mbps.
	ValueInMbps *int32 `json:"valueInMbps,omitempty"`
}

// PeeringListResult - The paginated list of peerings.
type PeeringListResult struct {
	// The link to fetch the next page of peerings.
	NextLink *string `json:"nextLink,omitempty"`

	// The list of peerings.
	Value []*Peering `json:"value,omitempty"`
}

// MarshalJSON implements the json.Marshaller interface for type PeeringListResult.
func (p PeeringListResult) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "nextLink", p.NextLink)
	populate(objectMap, "value", p.Value)
	return json.Marshal(objectMap)
}

// PeeringLocation - Peering location is where connectivity could be established to the Microsoft Cloud Edge.
type PeeringLocation struct {
	Resource
	// The kind of peering that the peering location supports.
	Kind *Kind `json:"kind,omitempty"`

	// The properties that define a peering location.
	Properties *PeeringLocationProperties `json:"properties,omitempty"`
}

// MarshalJSON implements the json.Marshaller interface for type PeeringLocation.
func (p PeeringLocation) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	p.Resource.marshalInternal(objectMap)
	populate(objectMap, "kind", p.Kind)
	populate(objectMap, "properties", p.Properties)
	return json.Marshal(objectMap)
}

// PeeringLocationListResult - The paginated list of peering locations.
type PeeringLocationListResult struct {
	// The link to fetch the next page of peering locations.
	NextLink *string `json:"nextLink,omitempty"`

	// The list of peering locations.
	Value []*PeeringLocation `json:"value,omitempty"`
}

// MarshalJSON implements the json.Marshaller interface for type PeeringLocationListResult.
func (p PeeringLocationListResult) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "nextLink", p.NextLink)
	populate(objectMap, "value", p.Value)
	return json.Marshal(objectMap)
}

// PeeringLocationProperties - The properties that define a peering location.
type PeeringLocationProperties struct {
	// The Azure region associated with the peering location.
	AzureRegion *string `json:"azureRegion,omitempty"`

	// The country in which the peering location exists.
	Country *string `json:"country,omitempty"`

	// The properties that define a direct peering location.
	Direct *PeeringLocationPropertiesDirect `json:"direct,omitempty"`

	// The properties that define an exchange peering location.
	Exchange *PeeringLocationPropertiesExchange `json:"exchange,omitempty"`

	// The name of the peering location.
	PeeringLocation *string `json:"peeringLocation,omitempty"`
}

// PeeringLocationPropertiesDirect - The properties that define a direct peering location.
type PeeringLocationPropertiesDirect struct {
	// The list of bandwidth offers available at the peering location.
	BandwidthOffers []*PeeringBandwidthOffer `json:"bandwidthOffers,omitempty"`

	// The list of direct peering facilities at the peering location.
	PeeringFacilities []*DirectPeeringFacility `json:"peeringFacilities,omitempty"`
}

// MarshalJSON implements the json.Marshaller interface for type PeeringLocationPropertiesDirect.
func (p PeeringLocationPropertiesDirect) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "bandwidthOffers", p.BandwidthOffers)
	populate(objectMap, "peeringFacilities", p.PeeringFacilities)
	return json.Marshal(objectMap)
}

// PeeringLocationPropertiesExchange - The properties that define an exchange peering location.
type PeeringLocationPropertiesExchange struct {
	// The list of exchange peering facilities at the peering location.
	PeeringFacilities []*ExchangePeeringFacility `json:"peeringFacilities,omitempty"`
}

// MarshalJSON implements the json.Marshaller interface for type PeeringLocationPropertiesExchange.
func (p PeeringLocationPropertiesExchange) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "peeringFacilities", p.PeeringFacilities)
	return json.Marshal(objectMap)
}

// PeeringLocationsListOptions contains the optional parameters for the PeeringLocations.List method.
type PeeringLocationsListOptions struct {
	// The type of direct peering.
	DirectPeeringType *Enum15
}

// PeeringManagementClientCheckServiceProviderAvailabilityOptions contains the optional parameters for the PeeringManagementClient.CheckServiceProviderAvailability
// method.
type PeeringManagementClientCheckServiceProviderAvailabilityOptions struct {
	// placeholder for future optional parameters
}

// PeeringProperties - The properties that define connectivity to the Microsoft Cloud Edge.
type PeeringProperties struct {
	// The properties that define a direct peering.
	Direct *PeeringPropertiesDirect `json:"direct,omitempty"`

	// The properties that define an exchange peering.
	Exchange *PeeringPropertiesExchange `json:"exchange,omitempty"`

	// The location of the peering.
	PeeringLocation *string `json:"peeringLocation,omitempty"`

	// READ-ONLY; The provisioning state of the resource.
	ProvisioningState *ProvisioningState `json:"provisioningState,omitempty" azure:"ro"`
}

// PeeringPropertiesDirect - The properties that define a direct peering.
type PeeringPropertiesDirect struct {
	// The set of connections that constitute a direct peering.
	Connections []*DirectConnection `json:"connections,omitempty"`

	// The type of direct peering.
	DirectPeeringType *DirectPeeringType `json:"directPeeringType,omitempty"`

	// The reference of the peer ASN.
	PeerAsn *SubResource `json:"peerAsn,omitempty"`

	// The flag that indicates whether or not the peering is used for peering service.
	UseForPeeringService *bool `json:"useForPeeringService,omitempty"`
}

// MarshalJSON implements the json.Marshaller interface for type PeeringPropertiesDirect.
func (p PeeringPropertiesDirect) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "connections", p.Connections)
	populate(objectMap, "directPeeringType", p.DirectPeeringType)
	populate(objectMap, "peerAsn", p.PeerAsn)
	populate(objectMap, "useForPeeringService", p.UseForPeeringService)
	return json.Marshal(objectMap)
}

// PeeringPropertiesExchange - The properties that define an exchange peering.
type PeeringPropertiesExchange struct {
	// The set of connections that constitute an exchange peering.
	Connections []*ExchangeConnection `json:"connections,omitempty"`

	// The reference of the peer ASN.
	PeerAsn *SubResource `json:"peerAsn,omitempty"`
}

// MarshalJSON implements the json.Marshaller interface for type PeeringPropertiesExchange.
func (p PeeringPropertiesExchange) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "connections", p.Connections)
	populate(objectMap, "peerAsn", p.PeerAsn)
	return json.Marshal(objectMap)
}

// PeeringSKU - The SKU that defines the tier and kind of the peering.
type PeeringSKU struct {
	// The family of the peering SKU.
	Family *Family `json:"family,omitempty"`

	// The name of the peering SKU.
	Name *Name `json:"name,omitempty"`

	// The size of the peering SKU.
	Size *Size `json:"size,omitempty"`

	// The tier of the peering SKU.
	Tier *Tier `json:"tier,omitempty"`
}

// PeeringService - Peering Service
type PeeringService struct {
	Resource
	// REQUIRED; The location of the resource.
	Location *string `json:"location,omitempty"`

	// The properties that define a peering service.
	Properties *PeeringServiceProperties `json:"properties,omitempty"`

	// The resource tags.
	Tags map[string]*string `json:"tags,omitempty"`
}

// MarshalJSON implements the json.Marshaller interface for type PeeringService.
func (p PeeringService) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	p.Resource.marshalInternal(objectMap)
	populate(objectMap, "location", p.Location)
	populate(objectMap, "properties", p.Properties)
	populate(objectMap, "tags", p.Tags)
	return json.Marshal(objectMap)
}

// PeeringServiceListResult - The paginated list of peering services.
type PeeringServiceListResult struct {
	// The link to fetch the next page of peering services.
	NextLink *string `json:"nextLink,omitempty"`

	// The list of peering services.
	Value []*PeeringService `json:"value,omitempty"`
}

// MarshalJSON implements the json.Marshaller interface for type PeeringServiceListResult.
func (p PeeringServiceListResult) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "nextLink", p.NextLink)
	populate(objectMap, "value", p.Value)
	return json.Marshal(objectMap)
}

// PeeringServiceLocation - PeeringService location
type PeeringServiceLocation struct {
	Resource
	// The properties that define a peering service location.
	Properties *PeeringServiceLocationProperties `json:"properties,omitempty"`
}

// MarshalJSON implements the json.Marshaller interface for type PeeringServiceLocation.
func (p PeeringServiceLocation) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	p.Resource.marshalInternal(objectMap)
	populate(objectMap, "properties", p.Properties)
	return json.Marshal(objectMap)
}

// PeeringServiceLocationListResult - The paginated list of peering service locations.
type PeeringServiceLocationListResult struct {
	// The link to fetch the next page of peering service locations.
	NextLink *string `json:"nextLink,omitempty"`

	// The list of peering service locations.
	Value []*PeeringServiceLocation `json:"value,omitempty"`
}

// MarshalJSON implements the json.Marshaller interface for type PeeringServiceLocationListResult.
func (p PeeringServiceLocationListResult) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "nextLink", p.NextLink)
	populate(objectMap, "value", p.Value)
	return json.Marshal(objectMap)
}

// PeeringServiceLocationProperties - The properties that define connectivity to the Peering Service Location.
type PeeringServiceLocationProperties struct {
	// Azure region for the location
	AzureRegion *string `json:"azureRegion,omitempty"`

	// Country of the customer
	Country *string `json:"country,omitempty"`

	// State of the customer
	State *string `json:"state,omitempty"`
}

// PeeringServiceLocationsListOptions contains the optional parameters for the PeeringServiceLocations.List method.
type PeeringServiceLocationsListOptions struct {
	// placeholder for future optional parameters
}

// PeeringServicePrefix - The peering service prefix class.
type PeeringServicePrefix struct {
	Resource
	// Gets or sets the peering prefix properties.
	Properties *PeeringServicePrefixProperties `json:"properties,omitempty"`
}

// MarshalJSON implements the json.Marshaller interface for type PeeringServicePrefix.
func (p PeeringServicePrefix) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	p.Resource.marshalInternal(objectMap)
	populate(objectMap, "properties", p.Properties)
	return json.Marshal(objectMap)
}

// PeeringServicePrefixListResult - The paginated list of [T].
type PeeringServicePrefixListResult struct {
	// The link to fetch the next page of [T].
	NextLink *string `json:"nextLink,omitempty"`

	// The list of [T].
	Value []*PeeringServicePrefix `json:"value,omitempty"`
}

// MarshalJSON implements the json.Marshaller interface for type PeeringServicePrefixListResult.
func (p PeeringServicePrefixListResult) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "nextLink", p.NextLink)
	populate(objectMap, "value", p.Value)
	return json.Marshal(objectMap)
}

// PeeringServicePrefixProperties - The peering service prefix properties class.
type PeeringServicePrefixProperties struct {
	// The prefix learned type
	LearnedType *LearnedType `json:"learnedType,omitempty"`

	// Valid route prefix
	Prefix *string `json:"prefix,omitempty"`

	// The prefix validation state
	PrefixValidationState *PrefixValidationState `json:"prefixValidationState,omitempty"`

	// READ-ONLY; The provisioning state of the resource.
	ProvisioningState *ProvisioningState `json:"provisioningState,omitempty" azure:"ro"`
}

// PeeringServicePrefixesCreateOrUpdateOptions contains the optional parameters for the PeeringServicePrefixes.CreateOrUpdate method.
type PeeringServicePrefixesCreateOrUpdateOptions struct {
	// placeholder for future optional parameters
}

// PeeringServicePrefixesDeleteOptions contains the optional parameters for the PeeringServicePrefixes.Delete method.
type PeeringServicePrefixesDeleteOptions struct {
	// placeholder for future optional parameters
}

// PeeringServicePrefixesGetOptions contains the optional parameters for the PeeringServicePrefixes.Get method.
type PeeringServicePrefixesGetOptions struct {
	// placeholder for future optional parameters
}

// PeeringServiceProperties - The properties that define connectivity to the Peering Service.
type PeeringServiceProperties struct {
	// The PeeringServiceLocation of the Customer.
	PeeringServiceLocation *string `json:"peeringServiceLocation,omitempty"`

	// The MAPS Provider Name.
	PeeringServiceProvider *string `json:"peeringServiceProvider,omitempty"`

	// READ-ONLY; The provisioning state of the resource.
	ProvisioningState *ProvisioningState `json:"provisioningState,omitempty" azure:"ro"`
}

// PeeringServiceProvider - PeeringService provider
type PeeringServiceProvider struct {
	Resource
	// The properties that define a peering service provider.
	Properties *PeeringServiceProviderProperties `json:"properties,omitempty"`
}

// MarshalJSON implements the json.Marshaller interface for type PeeringServiceProvider.
func (p PeeringServiceProvider) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	p.Resource.marshalInternal(objectMap)
	populate(objectMap, "properties", p.Properties)
	return json.Marshal(objectMap)
}

// PeeringServiceProviderListResult - The paginated list of peering service providers.
type PeeringServiceProviderListResult struct {
	// The link to fetch the next page of peering service providers.
	NextLink *string `json:"nextLink,omitempty"`

	// The list of peering service providers.
	Value []*PeeringServiceProvider `json:"value,omitempty"`
}

// MarshalJSON implements the json.Marshaller interface for type PeeringServiceProviderListResult.
func (p PeeringServiceProviderListResult) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "nextLink", p.NextLink)
	populate(objectMap, "value", p.Value)
	return json.Marshal(objectMap)
}

// PeeringServiceProviderProperties - The properties that define connectivity to the Peering Service Provider.
type PeeringServiceProviderProperties struct {
	// The name of the service provider.
	ServiceProviderName *string `json:"serviceProviderName,omitempty"`
}

// PeeringServiceProvidersListOptions contains the optional parameters for the PeeringServiceProviders.List method.
type PeeringServiceProvidersListOptions struct {
	// placeholder for future optional parameters
}

// PeeringServicesCreateOrUpdateOptions contains the optional parameters for the PeeringServices.CreateOrUpdate method.
type PeeringServicesCreateOrUpdateOptions struct {
	// placeholder for future optional parameters
}

// PeeringServicesDeleteOptions contains the optional parameters for the PeeringServices.Delete method.
type PeeringServicesDeleteOptions struct {
	// placeholder for future optional parameters
}

// PeeringServicesGetOptions contains the optional parameters for the PeeringServices.Get method.
type PeeringServicesGetOptions struct {
	// placeholder for future optional parameters
}

// PeeringServicesListByResourceGroupOptions contains the optional parameters for the PeeringServices.ListByResourceGroup method.
type PeeringServicesListByResourceGroupOptions struct {
	// placeholder for future optional parameters
}

// PeeringServicesListBySubscriptionOptions contains the optional parameters for the PeeringServices.ListBySubscription method.
type PeeringServicesListBySubscriptionOptions struct {
	// placeholder for future optional parameters
}

// PeeringServicesUpdateOptions contains the optional parameters for the PeeringServices.Update method.
type PeeringServicesUpdateOptions struct {
	// placeholder for future optional parameters
}

// PeeringsCreateOrUpdateOptions contains the optional parameters for the Peerings.CreateOrUpdate method.
type PeeringsCreateOrUpdateOptions struct {
	// placeholder for future optional parameters
}

// PeeringsDeleteOptions contains the optional parameters for the Peerings.Delete method.
type PeeringsDeleteOptions struct {
	// placeholder for future optional parameters
}

// PeeringsGetOptions contains the optional parameters for the Peerings.Get method.
type PeeringsGetOptions struct {
	// placeholder for future optional parameters
}

// PeeringsListByResourceGroupOptions contains the optional parameters for the Peerings.ListByResourceGroup method.
type PeeringsListByResourceGroupOptions struct {
	// placeholder for future optional parameters
}

// PeeringsListBySubscriptionOptions contains the optional parameters for the Peerings.ListBySubscription method.
type PeeringsListBySubscriptionOptions struct {
	// placeholder for future optional parameters
}

// PeeringsUpdateOptions contains the optional parameters for the Peerings.Update method.
type PeeringsUpdateOptions struct {
	// placeholder for future optional parameters
}

// PrefixesListByPeeringServiceOptions contains the optional parameters for the Prefixes.ListByPeeringService method.
type PrefixesListByPeeringServiceOptions struct {
	// placeholder for future optional parameters
}

// Resource - The ARM resource class.
type Resource struct {
	// READ-ONLY; The ID of the resource.
	ID *string `json:"id,omitempty" azure:"ro"`

	// READ-ONLY; The name of the resource.
	Name *string `json:"name,omitempty" azure:"ro"`

	// READ-ONLY; The type of the resource.
	Type *string `json:"type,omitempty" azure:"ro"`
}

// MarshalJSON implements the json.Marshaller interface for type Resource.
func (r Resource) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	r.marshalInternal(objectMap)
	return json.Marshal(objectMap)
}

func (r Resource) marshalInternal(objectMap map[string]interface{}) {
	populate(objectMap, "id", r.ID)
	populate(objectMap, "name", r.Name)
	populate(objectMap, "type", r.Type)
}

// ResourceTags - The resource tags.
type ResourceTags struct {
	// Gets or sets the tags, a dictionary of descriptors arm object
	Tags map[string]*string `json:"tags,omitempty"`
}

// MarshalJSON implements the json.Marshaller interface for type ResourceTags.
func (r ResourceTags) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "tags", r.Tags)
	return json.Marshal(objectMap)
}

// SubResource - The sub resource.
type SubResource struct {
	// The identifier of the referenced resource.
	ID *string `json:"id,omitempty"`
}

func populate(m map[string]interface{}, k string, v interface{}) {
	if v == nil {
		return
	} else if azcore.IsNullValue(v) {
		m[k] = nil
	} else if !reflect.ValueOf(v).IsNil() {
		m[k] = v
	}
}
