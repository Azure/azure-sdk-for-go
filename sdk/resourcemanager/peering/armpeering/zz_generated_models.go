//go:build go1.16
// +build go1.16

// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

package armpeering

import (
	"encoding/json"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore"
	"reflect"
)

// BandwidthOffer - The properties that define a peering bandwidth offer.
type BandwidthOffer struct {
	// The name of the bandwidth offer.
	OfferName *string `json:"offerName,omitempty"`

	// The value of the bandwidth offer in Mbps.
	ValueInMbps *int32 `json:"valueInMbps,omitempty"`
}

// BgpSession - The properties that define a BGP session.
type BgpSession struct {
	// The MD5 authentication key of the session.
	MD5AuthenticationKey *string `json:"md5AuthenticationKey,omitempty"`

	// The maximum number of prefixes advertised over the IPv4 session.
	MaxPrefixesAdvertisedV4 *int32 `json:"maxPrefixesAdvertisedV4,omitempty"`

	// The maximum number of prefixes advertised over the IPv6 session.
	MaxPrefixesAdvertisedV6 *int32 `json:"maxPrefixesAdvertisedV6,omitempty"`

	// The IPv4 session address on peer's end.
	PeerSessionIPv4Address *string `json:"peerSessionIPv4Address,omitempty"`

	// The IPv6 session address on peer's end.
	PeerSessionIPv6Address *string `json:"peerSessionIPv6Address,omitempty"`

	// The IPv4 prefix that contains both ends' IPv4 addresses.
	SessionPrefixV4 *string `json:"sessionPrefixV4,omitempty"`

	// The IPv6 prefix that contains both ends' IPv6 addresses.
	SessionPrefixV6 *string `json:"sessionPrefixV6,omitempty"`

	// READ-ONLY; The IPv4 session address on Microsoft's end.
	MicrosoftSessionIPv4Address *string `json:"microsoftSessionIPv4Address,omitempty" azure:"ro"`

	// READ-ONLY; The IPv6 session address on Microsoft's end.
	MicrosoftSessionIPv6Address *string `json:"microsoftSessionIPv6Address,omitempty" azure:"ro"`

	// READ-ONLY; The state of the IPv4 session.
	SessionStateV4 *SessionStateV4 `json:"sessionStateV4,omitempty" azure:"ro"`

	// READ-ONLY; The state of the IPv6 session.
	SessionStateV6 *SessionStateV6 `json:"sessionStateV6,omitempty" azure:"ro"`
}

// CheckServiceProviderAvailabilityInput - Class for CheckServiceProviderAvailabilityInput
type CheckServiceProviderAvailabilityInput struct {
	// Gets or sets the PeeringServiceLocation
	PeeringServiceLocation *string `json:"peeringServiceLocation,omitempty"`

	// Gets or sets the PeeringServiceProvider
	PeeringServiceProvider *string `json:"peeringServiceProvider,omitempty"`
}

// ContactInfo - The contact information of the peer.
type ContactInfo struct {
	// The list of email addresses.
	Emails []*string `json:"emails,omitempty"`

	// The list of contact numbers.
	Phone []*string `json:"phone,omitempty"`
}

// MarshalJSON implements the json.Marshaller interface for type ContactInfo.
func (c ContactInfo) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "emails", c.Emails)
	populate(objectMap, "phone", c.Phone)
	return json.Marshal(objectMap)
}

// DirectConnection - The properties that define a direct connection.
type DirectConnection struct {
	// The bandwidth of the connection.
	BandwidthInMbps *int32 `json:"bandwidthInMbps,omitempty"`

	// The BGP session associated with the connection.
	BgpSession *BgpSession `json:"bgpSession,omitempty"`

	// The unique identifier (GUID) for the connection.
	ConnectionIdentifier *string `json:"connectionIdentifier,omitempty"`

	// The PeeringDB.com ID of the facility at which the connection has to be set up.
	PeeringDBFacilityID *int32 `json:"peeringDBFacilityId,omitempty"`

	// The bandwidth that is actually provisioned.
	ProvisionedBandwidthInMbps *int32 `json:"provisionedBandwidthInMbps,omitempty"`

	// The field indicating if Microsoft provides session ip addresses.
	SessionAddressProvider *SessionAddressProvider `json:"sessionAddressProvider,omitempty"`

	// The flag that indicates whether or not the connection is used for peering service.
	UseForPeeringService *bool `json:"useForPeeringService,omitempty"`

	// READ-ONLY; The state of the connection.
	ConnectionState *ConnectionState `json:"connectionState,omitempty" azure:"ro"`
}

// DirectPeeringFacility - The properties that define a direct peering facility.
type DirectPeeringFacility struct {
	// The address of the direct peering facility.
	Address *string `json:"address,omitempty"`

	// The type of the direct peering.
	DirectPeeringType *DirectPeeringType `json:"directPeeringType,omitempty"`

	// The PeeringDB.com ID of the facility.
	PeeringDBFacilityID *int32 `json:"peeringDBFacilityId,omitempty"`

	// The PeeringDB.com URL of the facility.
	PeeringDBFacilityLink *string `json:"peeringDBFacilityLink,omitempty"`
}

// ErrorResponse - The error response that indicates why an operation has failed.
type ErrorResponse struct {
	// READ-ONLY; The error code.
	Code *string `json:"code,omitempty" azure:"ro"`

	// READ-ONLY; The error message.
	Message *string `json:"message,omitempty" azure:"ro"`
}

// ExchangeConnection - The properties that define an exchange connection.
type ExchangeConnection struct {
	// The BGP session associated with the connection.
	BgpSession *BgpSession `json:"bgpSession,omitempty"`

	// The unique identifier (GUID) for the connection.
	ConnectionIdentifier *string `json:"connectionIdentifier,omitempty"`

	// The PeeringDB.com ID of the facility at which the connection has to be set up.
	PeeringDBFacilityID *int32 `json:"peeringDBFacilityId,omitempty"`

	// READ-ONLY; The state of the connection.
	ConnectionState *ConnectionState `json:"connectionState,omitempty" azure:"ro"`
}

// ExchangePeeringFacility - The properties that define an exchange peering facility.
type ExchangePeeringFacility struct {
	// The bandwidth of the connection between Microsoft and the exchange peering facility.
	BandwidthInMbps *int32 `json:"bandwidthInMbps,omitempty"`

	// The name of the exchange peering facility.
	ExchangeName *string `json:"exchangeName,omitempty"`

	// The IPv4 prefixes associated with the exchange peering facility.
	FacilityIPv4Prefix *string `json:"facilityIPv4Prefix,omitempty"`

	// The IPv6 prefixes associated with the exchange peering facility.
	FacilityIPv6Prefix *string `json:"facilityIPv6Prefix,omitempty"`

	// The IPv4 address of Microsoft at the exchange peering facility.
	MicrosoftIPv4Address *string `json:"microsoftIPv4Address,omitempty"`

	// The IPv6 address of Microsoft at the exchange peering facility.
	MicrosoftIPv6Address *string `json:"microsoftIPv6Address,omitempty"`

	// The PeeringDB.com ID of the facility.
	PeeringDBFacilityID *int32 `json:"peeringDBFacilityId,omitempty"`

	// The PeeringDB.com URL of the facility.
	PeeringDBFacilityLink *string `json:"peeringDBFacilityLink,omitempty"`
}

// LegacyPeeringsClientListOptions contains the optional parameters for the LegacyPeeringsClient.List method.
type LegacyPeeringsClientListOptions struct {
	// placeholder for future optional parameters
}

// ListResult - The paginated list of peerings.
type ListResult struct {
	// The link to fetch the next page of peerings.
	NextLink *string `json:"nextLink,omitempty"`

	// The list of peerings.
	Value []*Peering `json:"value,omitempty"`
}

// MarshalJSON implements the json.Marshaller interface for type ListResult.
func (l ListResult) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "nextLink", l.NextLink)
	populate(objectMap, "value", l.Value)
	return json.Marshal(objectMap)
}

// Location - Peering location is where connectivity could be established to the Microsoft Cloud Edge.
type Location struct {
	// The kind of peering that the peering location supports.
	Kind *Kind `json:"kind,omitempty"`

	// The properties that define a peering location.
	Properties *LocationProperties `json:"properties,omitempty"`

	// READ-ONLY; The ID of the resource.
	ID *string `json:"id,omitempty" azure:"ro"`

	// READ-ONLY; The name of the resource.
	Name *string `json:"name,omitempty" azure:"ro"`

	// READ-ONLY; The type of the resource.
	Type *string `json:"type,omitempty" azure:"ro"`
}

// LocationListResult - The paginated list of peering locations.
type LocationListResult struct {
	// The link to fetch the next page of peering locations.
	NextLink *string `json:"nextLink,omitempty"`

	// The list of peering locations.
	Value []*Location `json:"value,omitempty"`
}

// MarshalJSON implements the json.Marshaller interface for type LocationListResult.
func (l LocationListResult) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "nextLink", l.NextLink)
	populate(objectMap, "value", l.Value)
	return json.Marshal(objectMap)
}

// LocationProperties - The properties that define a peering location.
type LocationProperties struct {
	// The Azure region associated with the peering location.
	AzureRegion *string `json:"azureRegion,omitempty"`

	// The country in which the peering location exists.
	Country *string `json:"country,omitempty"`

	// The properties that define a direct peering location.
	Direct *LocationPropertiesDirect `json:"direct,omitempty"`

	// The properties that define an exchange peering location.
	Exchange *LocationPropertiesExchange `json:"exchange,omitempty"`

	// The name of the peering location.
	PeeringLocation *string `json:"peeringLocation,omitempty"`
}

// LocationPropertiesDirect - The properties that define a direct peering location.
type LocationPropertiesDirect struct {
	// The list of bandwidth offers available at the peering location.
	BandwidthOffers []*BandwidthOffer `json:"bandwidthOffers,omitempty"`

	// The list of direct peering facilities at the peering location.
	PeeringFacilities []*DirectPeeringFacility `json:"peeringFacilities,omitempty"`
}

// MarshalJSON implements the json.Marshaller interface for type LocationPropertiesDirect.
func (l LocationPropertiesDirect) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "bandwidthOffers", l.BandwidthOffers)
	populate(objectMap, "peeringFacilities", l.PeeringFacilities)
	return json.Marshal(objectMap)
}

// LocationPropertiesExchange - The properties that define an exchange peering location.
type LocationPropertiesExchange struct {
	// The list of exchange peering facilities at the peering location.
	PeeringFacilities []*ExchangePeeringFacility `json:"peeringFacilities,omitempty"`
}

// MarshalJSON implements the json.Marshaller interface for type LocationPropertiesExchange.
func (l LocationPropertiesExchange) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "peeringFacilities", l.PeeringFacilities)
	return json.Marshal(objectMap)
}

// LocationsClientListOptions contains the optional parameters for the LocationsClient.List method.
type LocationsClientListOptions struct {
	// The type of direct peering.
	DirectPeeringType *Enum15
}

// ManagementClientCheckServiceProviderAvailabilityOptions contains the optional parameters for the ManagementClient.CheckServiceProviderAvailability
// method.
type ManagementClientCheckServiceProviderAvailabilityOptions struct {
	// placeholder for future optional parameters
}

// Operation - The peering API operation.
type Operation struct {
	// READ-ONLY; The information related to the operation.
	Display *OperationDisplayInfo `json:"display,omitempty" azure:"ro"`

	// READ-ONLY; The flag that indicates whether the operation applies to data plane.
	IsDataAction *bool `json:"isDataAction,omitempty" azure:"ro"`

	// READ-ONLY; The name of the operation.
	Name *string `json:"name,omitempty" azure:"ro"`
}

// OperationDisplayInfo - The information related to the operation.
type OperationDisplayInfo struct {
	// READ-ONLY; The description of the operation.
	Description *string `json:"description,omitempty" azure:"ro"`

	// READ-ONLY; The name of the operation.
	Operation *string `json:"operation,omitempty" azure:"ro"`

	// READ-ONLY; The name of the resource provider.
	Provider *string `json:"provider,omitempty" azure:"ro"`

	// READ-ONLY; The type of the resource.
	Resource *string `json:"resource,omitempty" azure:"ro"`
}

// OperationListResult - The paginated list of peering API operations.
type OperationListResult struct {
	// The link to fetch the next page of peering API operations.
	NextLink *string `json:"nextLink,omitempty"`

	// The list of peering API operations.
	Value []*Operation `json:"value,omitempty"`
}

// MarshalJSON implements the json.Marshaller interface for type OperationListResult.
func (o OperationListResult) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "nextLink", o.NextLink)
	populate(objectMap, "value", o.Value)
	return json.Marshal(objectMap)
}

// OperationsClientListOptions contains the optional parameters for the OperationsClient.List method.
type OperationsClientListOptions struct {
	// placeholder for future optional parameters
}

// PeerAsn - The essential information related to the peer's ASN.
type PeerAsn struct {
	// The properties that define a peer's ASN.
	Properties *PeerAsnProperties `json:"properties,omitempty"`

	// READ-ONLY; The ID of the resource.
	ID *string `json:"id,omitempty" azure:"ro"`

	// READ-ONLY; The name of the resource.
	Name *string `json:"name,omitempty" azure:"ro"`

	// READ-ONLY; The type of the resource.
	Type *string `json:"type,omitempty" azure:"ro"`
}

// PeerAsnListResult - The paginated list of peer ASNs.
type PeerAsnListResult struct {
	// The link to fetch the next page of peer ASNs.
	NextLink *string `json:"nextLink,omitempty"`

	// The list of peer ASNs.
	Value []*PeerAsn `json:"value,omitempty"`
}

// MarshalJSON implements the json.Marshaller interface for type PeerAsnListResult.
func (p PeerAsnListResult) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "nextLink", p.NextLink)
	populate(objectMap, "value", p.Value)
	return json.Marshal(objectMap)
}

// PeerAsnProperties - The properties that define a peer's ASN.
type PeerAsnProperties struct {
	// The Autonomous System Number (ASN) of the peer.
	PeerAsn *int32 `json:"peerAsn,omitempty"`

	// The contact information of the peer.
	PeerContactInfo *ContactInfo `json:"peerContactInfo,omitempty"`

	// The name of the peer.
	PeerName *string `json:"peerName,omitempty"`

	// The validation state of the ASN associated with the peer.
	ValidationState *ValidationState `json:"validationState,omitempty"`
}

// PeerAsnsClientCreateOrUpdateOptions contains the optional parameters for the PeerAsnsClient.CreateOrUpdate method.
type PeerAsnsClientCreateOrUpdateOptions struct {
	// placeholder for future optional parameters
}

// PeerAsnsClientDeleteOptions contains the optional parameters for the PeerAsnsClient.Delete method.
type PeerAsnsClientDeleteOptions struct {
	// placeholder for future optional parameters
}

// PeerAsnsClientGetOptions contains the optional parameters for the PeerAsnsClient.Get method.
type PeerAsnsClientGetOptions struct {
	// placeholder for future optional parameters
}

// PeerAsnsClientListBySubscriptionOptions contains the optional parameters for the PeerAsnsClient.ListBySubscription method.
type PeerAsnsClientListBySubscriptionOptions struct {
	// placeholder for future optional parameters
}

// Peering is a logical representation of a set of connections to the Microsoft Cloud Edge at a location.
type Peering struct {
	// REQUIRED; The kind of the peering.
	Kind *Kind `json:"kind,omitempty"`

	// REQUIRED; The location of the resource.
	Location *string `json:"location,omitempty"`

	// REQUIRED; The SKU that defines the tier and kind of the peering.
	SKU *SKU `json:"sku,omitempty"`

	// The properties that define a peering.
	Properties *Properties `json:"properties,omitempty"`

	// The resource tags.
	Tags map[string]*string `json:"tags,omitempty"`

	// READ-ONLY; The ID of the resource.
	ID *string `json:"id,omitempty" azure:"ro"`

	// READ-ONLY; The name of the resource.
	Name *string `json:"name,omitempty" azure:"ro"`

	// READ-ONLY; The type of the resource.
	Type *string `json:"type,omitempty" azure:"ro"`
}

// MarshalJSON implements the json.Marshaller interface for type Peering.
func (p Peering) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "id", p.ID)
	populate(objectMap, "kind", p.Kind)
	populate(objectMap, "location", p.Location)
	populate(objectMap, "name", p.Name)
	populate(objectMap, "properties", p.Properties)
	populate(objectMap, "sku", p.SKU)
	populate(objectMap, "tags", p.Tags)
	populate(objectMap, "type", p.Type)
	return json.Marshal(objectMap)
}

// PeeringsClientCreateOrUpdateOptions contains the optional parameters for the PeeringsClient.CreateOrUpdate method.
type PeeringsClientCreateOrUpdateOptions struct {
	// placeholder for future optional parameters
}

// PeeringsClientDeleteOptions contains the optional parameters for the PeeringsClient.Delete method.
type PeeringsClientDeleteOptions struct {
	// placeholder for future optional parameters
}

// PeeringsClientGetOptions contains the optional parameters for the PeeringsClient.Get method.
type PeeringsClientGetOptions struct {
	// placeholder for future optional parameters
}

// PeeringsClientListByResourceGroupOptions contains the optional parameters for the PeeringsClient.ListByResourceGroup method.
type PeeringsClientListByResourceGroupOptions struct {
	// placeholder for future optional parameters
}

// PeeringsClientListBySubscriptionOptions contains the optional parameters for the PeeringsClient.ListBySubscription method.
type PeeringsClientListBySubscriptionOptions struct {
	// placeholder for future optional parameters
}

// PeeringsClientUpdateOptions contains the optional parameters for the PeeringsClient.Update method.
type PeeringsClientUpdateOptions struct {
	// placeholder for future optional parameters
}

// PrefixesClientListByPeeringServiceOptions contains the optional parameters for the PrefixesClient.ListByPeeringService
// method.
type PrefixesClientListByPeeringServiceOptions struct {
	// placeholder for future optional parameters
}

// Properties - The properties that define connectivity to the Microsoft Cloud Edge.
type Properties struct {
	// The properties that define a direct peering.
	Direct *PropertiesDirect `json:"direct,omitempty"`

	// The properties that define an exchange peering.
	Exchange *PropertiesExchange `json:"exchange,omitempty"`

	// The location of the peering.
	PeeringLocation *string `json:"peeringLocation,omitempty"`

	// READ-ONLY; The provisioning state of the resource.
	ProvisioningState *ProvisioningState `json:"provisioningState,omitempty" azure:"ro"`
}

// PropertiesDirect - The properties that define a direct peering.
type PropertiesDirect struct {
	// The set of connections that constitute a direct peering.
	Connections []*DirectConnection `json:"connections,omitempty"`

	// The type of direct peering.
	DirectPeeringType *DirectPeeringType `json:"directPeeringType,omitempty"`

	// The reference of the peer ASN.
	PeerAsn *SubResource `json:"peerAsn,omitempty"`

	// The flag that indicates whether or not the peering is used for peering service.
	UseForPeeringService *bool `json:"useForPeeringService,omitempty"`
}

// MarshalJSON implements the json.Marshaller interface for type PropertiesDirect.
func (p PropertiesDirect) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "connections", p.Connections)
	populate(objectMap, "directPeeringType", p.DirectPeeringType)
	populate(objectMap, "peerAsn", p.PeerAsn)
	populate(objectMap, "useForPeeringService", p.UseForPeeringService)
	return json.Marshal(objectMap)
}

// PropertiesExchange - The properties that define an exchange peering.
type PropertiesExchange struct {
	// The set of connections that constitute an exchange peering.
	Connections []*ExchangeConnection `json:"connections,omitempty"`

	// The reference of the peer ASN.
	PeerAsn *SubResource `json:"peerAsn,omitempty"`
}

// MarshalJSON implements the json.Marshaller interface for type PropertiesExchange.
func (p PropertiesExchange) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "connections", p.Connections)
	populate(objectMap, "peerAsn", p.PeerAsn)
	return json.Marshal(objectMap)
}

// Resource - The ARM resource class.
type Resource struct {
	// READ-ONLY; The ID of the resource.
	ID *string `json:"id,omitempty" azure:"ro"`

	// READ-ONLY; The name of the resource.
	Name *string `json:"name,omitempty" azure:"ro"`

	// READ-ONLY; The type of the resource.
	Type *string `json:"type,omitempty" azure:"ro"`
}

// ResourceTags - The resource tags.
type ResourceTags struct {
	// Gets or sets the tags, a dictionary of descriptors arm object
	Tags map[string]*string `json:"tags,omitempty"`
}

// MarshalJSON implements the json.Marshaller interface for type ResourceTags.
func (r ResourceTags) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "tags", r.Tags)
	return json.Marshal(objectMap)
}

// SKU - The SKU that defines the tier and kind of the peering.
type SKU struct {
	// The family of the peering SKU.
	Family *Family `json:"family,omitempty"`

	// The name of the peering SKU.
	Name *Name `json:"name,omitempty"`

	// The size of the peering SKU.
	Size *Size `json:"size,omitempty"`

	// The tier of the peering SKU.
	Tier *Tier `json:"tier,omitempty"`
}

// Service - Peering Service
type Service struct {
	// REQUIRED; The location of the resource.
	Location *string `json:"location,omitempty"`

	// The properties that define a peering service.
	Properties *ServiceProperties `json:"properties,omitempty"`

	// The resource tags.
	Tags map[string]*string `json:"tags,omitempty"`

	// READ-ONLY; The ID of the resource.
	ID *string `json:"id,omitempty" azure:"ro"`

	// READ-ONLY; The name of the resource.
	Name *string `json:"name,omitempty" azure:"ro"`

	// READ-ONLY; The type of the resource.
	Type *string `json:"type,omitempty" azure:"ro"`
}

// MarshalJSON implements the json.Marshaller interface for type Service.
func (s Service) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "id", s.ID)
	populate(objectMap, "location", s.Location)
	populate(objectMap, "name", s.Name)
	populate(objectMap, "properties", s.Properties)
	populate(objectMap, "tags", s.Tags)
	populate(objectMap, "type", s.Type)
	return json.Marshal(objectMap)
}

// ServiceListResult - The paginated list of peering services.
type ServiceListResult struct {
	// The link to fetch the next page of peering services.
	NextLink *string `json:"nextLink,omitempty"`

	// The list of peering services.
	Value []*Service `json:"value,omitempty"`
}

// MarshalJSON implements the json.Marshaller interface for type ServiceListResult.
func (s ServiceListResult) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "nextLink", s.NextLink)
	populate(objectMap, "value", s.Value)
	return json.Marshal(objectMap)
}

// ServiceLocation - PeeringService location
type ServiceLocation struct {
	// The properties that define a peering service location.
	Properties *ServiceLocationProperties `json:"properties,omitempty"`

	// READ-ONLY; The ID of the resource.
	ID *string `json:"id,omitempty" azure:"ro"`

	// READ-ONLY; The name of the resource.
	Name *string `json:"name,omitempty" azure:"ro"`

	// READ-ONLY; The type of the resource.
	Type *string `json:"type,omitempty" azure:"ro"`
}

// ServiceLocationListResult - The paginated list of peering service locations.
type ServiceLocationListResult struct {
	// The link to fetch the next page of peering service locations.
	NextLink *string `json:"nextLink,omitempty"`

	// The list of peering service locations.
	Value []*ServiceLocation `json:"value,omitempty"`
}

// MarshalJSON implements the json.Marshaller interface for type ServiceLocationListResult.
func (s ServiceLocationListResult) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "nextLink", s.NextLink)
	populate(objectMap, "value", s.Value)
	return json.Marshal(objectMap)
}

// ServiceLocationProperties - The properties that define connectivity to the Peering Service Location.
type ServiceLocationProperties struct {
	// Azure region for the location
	AzureRegion *string `json:"azureRegion,omitempty"`

	// Country of the customer
	Country *string `json:"country,omitempty"`

	// State of the customer
	State *string `json:"state,omitempty"`
}

// ServiceLocationsClientListOptions contains the optional parameters for the ServiceLocationsClient.List method.
type ServiceLocationsClientListOptions struct {
	// placeholder for future optional parameters
}

// ServicePrefix - The peering service prefix class.
type ServicePrefix struct {
	// Gets or sets the peering prefix properties.
	Properties *ServicePrefixProperties `json:"properties,omitempty"`

	// READ-ONLY; The ID of the resource.
	ID *string `json:"id,omitempty" azure:"ro"`

	// READ-ONLY; The name of the resource.
	Name *string `json:"name,omitempty" azure:"ro"`

	// READ-ONLY; The type of the resource.
	Type *string `json:"type,omitempty" azure:"ro"`
}

// ServicePrefixListResult - The paginated list of [T].
type ServicePrefixListResult struct {
	// The link to fetch the next page of [T].
	NextLink *string `json:"nextLink,omitempty"`

	// The list of [T].
	Value []*ServicePrefix `json:"value,omitempty"`
}

// MarshalJSON implements the json.Marshaller interface for type ServicePrefixListResult.
func (s ServicePrefixListResult) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "nextLink", s.NextLink)
	populate(objectMap, "value", s.Value)
	return json.Marshal(objectMap)
}

// ServicePrefixProperties - The peering service prefix properties class.
type ServicePrefixProperties struct {
	// The prefix learned type
	LearnedType *LearnedType `json:"learnedType,omitempty"`

	// Valid route prefix
	Prefix *string `json:"prefix,omitempty"`

	// The prefix validation state
	PrefixValidationState *PrefixValidationState `json:"prefixValidationState,omitempty"`

	// READ-ONLY; The provisioning state of the resource.
	ProvisioningState *ProvisioningState `json:"provisioningState,omitempty" azure:"ro"`
}

// ServicePrefixesClientCreateOrUpdateOptions contains the optional parameters for the ServicePrefixesClient.CreateOrUpdate
// method.
type ServicePrefixesClientCreateOrUpdateOptions struct {
	// placeholder for future optional parameters
}

// ServicePrefixesClientDeleteOptions contains the optional parameters for the ServicePrefixesClient.Delete method.
type ServicePrefixesClientDeleteOptions struct {
	// placeholder for future optional parameters
}

// ServicePrefixesClientGetOptions contains the optional parameters for the ServicePrefixesClient.Get method.
type ServicePrefixesClientGetOptions struct {
	// placeholder for future optional parameters
}

// ServiceProperties - The properties that define connectivity to the Peering Service.
type ServiceProperties struct {
	// The PeeringServiceLocation of the Customer.
	PeeringServiceLocation *string `json:"peeringServiceLocation,omitempty"`

	// The MAPS Provider Name.
	PeeringServiceProvider *string `json:"peeringServiceProvider,omitempty"`

	// READ-ONLY; The provisioning state of the resource.
	ProvisioningState *ProvisioningState `json:"provisioningState,omitempty" azure:"ro"`
}

// ServiceProvider - PeeringService provider
type ServiceProvider struct {
	// The properties that define a peering service provider.
	Properties *ServiceProviderProperties `json:"properties,omitempty"`

	// READ-ONLY; The ID of the resource.
	ID *string `json:"id,omitempty" azure:"ro"`

	// READ-ONLY; The name of the resource.
	Name *string `json:"name,omitempty" azure:"ro"`

	// READ-ONLY; The type of the resource.
	Type *string `json:"type,omitempty" azure:"ro"`
}

// ServiceProviderListResult - The paginated list of peering service providers.
type ServiceProviderListResult struct {
	// The link to fetch the next page of peering service providers.
	NextLink *string `json:"nextLink,omitempty"`

	// The list of peering service providers.
	Value []*ServiceProvider `json:"value,omitempty"`
}

// MarshalJSON implements the json.Marshaller interface for type ServiceProviderListResult.
func (s ServiceProviderListResult) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "nextLink", s.NextLink)
	populate(objectMap, "value", s.Value)
	return json.Marshal(objectMap)
}

// ServiceProviderProperties - The properties that define connectivity to the Peering Service Provider.
type ServiceProviderProperties struct {
	// The name of the service provider.
	ServiceProviderName *string `json:"serviceProviderName,omitempty"`
}

// ServiceProvidersClientListOptions contains the optional parameters for the ServiceProvidersClient.List method.
type ServiceProvidersClientListOptions struct {
	// placeholder for future optional parameters
}

// ServicesClientCreateOrUpdateOptions contains the optional parameters for the ServicesClient.CreateOrUpdate method.
type ServicesClientCreateOrUpdateOptions struct {
	// placeholder for future optional parameters
}

// ServicesClientDeleteOptions contains the optional parameters for the ServicesClient.Delete method.
type ServicesClientDeleteOptions struct {
	// placeholder for future optional parameters
}

// ServicesClientGetOptions contains the optional parameters for the ServicesClient.Get method.
type ServicesClientGetOptions struct {
	// placeholder for future optional parameters
}

// ServicesClientListByResourceGroupOptions contains the optional parameters for the ServicesClient.ListByResourceGroup method.
type ServicesClientListByResourceGroupOptions struct {
	// placeholder for future optional parameters
}

// ServicesClientListBySubscriptionOptions contains the optional parameters for the ServicesClient.ListBySubscription method.
type ServicesClientListBySubscriptionOptions struct {
	// placeholder for future optional parameters
}

// ServicesClientUpdateOptions contains the optional parameters for the ServicesClient.Update method.
type ServicesClientUpdateOptions struct {
	// placeholder for future optional parameters
}

// SubResource - The sub resource.
type SubResource struct {
	// The identifier of the referenced resource.
	ID *string `json:"id,omitempty"`
}

func populate(m map[string]interface{}, k string, v interface{}) {
	if v == nil {
		return
	} else if azcore.IsNullValue(v) {
		m[k] = nil
	} else if !reflect.ValueOf(v).IsNil() {
		m[k] = v
	}
}
