// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) Go Code Generator. DO NOT EDIT.

package armplaceholder

import (
	"context"
	"errors"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/arm"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/policy"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/runtime"
	"net/http"
	"net/url"
	"strings"
)

// DisconnectedOperationsClient contains the methods for the DisconnectedOperations group.
// Don't use this type directly, use NewDisconnectedOperationsClient() instead.
type DisconnectedOperationsClient struct {
	internal       *arm.Client
	subscriptionID string
}

// NewDisconnectedOperationsClient creates a new instance of DisconnectedOperationsClient with the specified values.
//   - subscriptionID - The ID of the target subscription. The value must be an UUID.
//   - credential - used to authorize requests. Usually a credential from azidentity.
//   - options - pass nil to accept the default values.
func NewDisconnectedOperationsClient(subscriptionID string, credential azcore.TokenCredential, options *arm.ClientOptions) (*DisconnectedOperationsClient, error) {
	cl, err := arm.NewClient(moduleName, moduleVersion, credential, options)
	if err != nil {
		return nil, err
	}
	client := &DisconnectedOperationsClient{
		subscriptionID: subscriptionID,
		internal:       cl,
	}
	return client, nil
}

// BeginCreateOrUpdate - Create a DisconnectedOperation
// If the operation fails it returns an *azcore.ResponseError type.
//
// Generated from API version 2025-06-01-preview
//   - resourceGroupName - The name of the resource group. The name is case insensitive.
//   - name - Name of the resource
//   - resource - Resource create parameters.
//   - options - DisconnectedOperationsClientBeginCreateOrUpdateOptions contains the optional parameters for the DisconnectedOperationsClient.BeginCreateOrUpdate
//     method.
func (client *DisconnectedOperationsClient) BeginCreateOrUpdate(ctx context.Context, resourceGroupName string, name string, resource DisconnectedOperation, options *DisconnectedOperationsClientBeginCreateOrUpdateOptions) (*runtime.Poller[DisconnectedOperationsClientCreateOrUpdateResponse], error) {
	if options == nil || options.ResumeToken == "" {
		resp, err := client.createOrUpdate(ctx, resourceGroupName, name, resource, options)
		if err != nil {
			return nil, err
		}
		poller, err := runtime.NewPoller(resp, client.internal.Pipeline(), &runtime.NewPollerOptions[DisconnectedOperationsClientCreateOrUpdateResponse]{
			Tracer: client.internal.Tracer(),
		})
		return poller, err
	} else {
		return runtime.NewPollerFromResumeToken(options.ResumeToken, client.internal.Pipeline(), &runtime.NewPollerFromResumeTokenOptions[DisconnectedOperationsClientCreateOrUpdateResponse]{
			Tracer: client.internal.Tracer(),
		})
	}
}

// CreateOrUpdate - Create a DisconnectedOperation
// If the operation fails it returns an *azcore.ResponseError type.
//
// Generated from API version 2025-06-01-preview
func (client *DisconnectedOperationsClient) createOrUpdate(ctx context.Context, resourceGroupName string, name string, resource DisconnectedOperation, options *DisconnectedOperationsClientBeginCreateOrUpdateOptions) (*http.Response, error) {
	var err error
	const operationName = "DisconnectedOperationsClient.BeginCreateOrUpdate"
	ctx = context.WithValue(ctx, runtime.CtxAPINameKey{}, operationName)
	ctx, endSpan := runtime.StartSpan(ctx, operationName, client.internal.Tracer(), nil)
	defer func() { endSpan(err) }()
	req, err := client.createOrUpdateCreateRequest(ctx, resourceGroupName, name, resource, options)
	if err != nil {
		return nil, err
	}
	httpResp, err := client.internal.Pipeline().Do(req)
	if err != nil {
		return nil, err
	}
	if !runtime.HasStatusCode(httpResp, http.StatusOK, http.StatusCreated) {
		err = runtime.NewResponseError(httpResp)
		return nil, err
	}
	return httpResp, nil
}

// createOrUpdateCreateRequest creates the CreateOrUpdate request.
func (client *DisconnectedOperationsClient) createOrUpdateCreateRequest(ctx context.Context, resourceGroupName string, name string, resource DisconnectedOperation, _ *DisconnectedOperationsClientBeginCreateOrUpdateOptions) (*policy.Request, error) {
	urlPath := "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Edge/disconnectedOperations/{name}"
	if client.subscriptionID == "" {
		return nil, errors.New("parameter client.subscriptionID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{subscriptionId}", url.PathEscape(client.subscriptionID))
	if resourceGroupName == "" {
		return nil, errors.New("parameter resourceGroupName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{resourceGroupName}", url.PathEscape(resourceGroupName))
	if name == "" {
		return nil, errors.New("parameter name cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{name}", url.PathEscape(name))
	req, err := runtime.NewRequest(ctx, http.MethodPut, runtime.JoinPaths(client.internal.Endpoint(), urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("api-version", "2025-06-01-preview")
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header["Accept"] = []string{"application/json"}
	req.Raw().Header["Content-Type"] = []string{"application/json"}
	if err := runtime.MarshalAsJSON(req, resource); err != nil {
		return nil, err
	}
	return req, nil
}

// BeginDelete - Delete a DisconnectedOperation
// If the operation fails it returns an *azcore.ResponseError type.
//
// Generated from API version 2025-06-01-preview
//   - resourceGroupName - The name of the resource group. The name is case insensitive.
//   - name - Name of the resource
//   - options - DisconnectedOperationsClientBeginDeleteOptions contains the optional parameters for the DisconnectedOperationsClient.BeginDelete
//     method.
func (client *DisconnectedOperationsClient) BeginDelete(ctx context.Context, resourceGroupName string, name string, options *DisconnectedOperationsClientBeginDeleteOptions) (*runtime.Poller[DisconnectedOperationsClientDeleteResponse], error) {
	if options == nil || options.ResumeToken == "" {
		resp, err := client.deleteOperation(ctx, resourceGroupName, name, options)
		if err != nil {
			return nil, err
		}
		poller, err := runtime.NewPoller(resp, client.internal.Pipeline(), &runtime.NewPollerOptions[DisconnectedOperationsClientDeleteResponse]{
			Tracer: client.internal.Tracer(),
		})
		return poller, err
	} else {
		return runtime.NewPollerFromResumeToken(options.ResumeToken, client.internal.Pipeline(), &runtime.NewPollerFromResumeTokenOptions[DisconnectedOperationsClientDeleteResponse]{
			Tracer: client.internal.Tracer(),
		})
	}
}

// Delete - Delete a DisconnectedOperation
// If the operation fails it returns an *azcore.ResponseError type.
//
// Generated from API version 2025-06-01-preview
func (client *DisconnectedOperationsClient) deleteOperation(ctx context.Context, resourceGroupName string, name string, options *DisconnectedOperationsClientBeginDeleteOptions) (*http.Response, error) {
	var err error
	const operationName = "DisconnectedOperationsClient.BeginDelete"
	ctx = context.WithValue(ctx, runtime.CtxAPINameKey{}, operationName)
	ctx, endSpan := runtime.StartSpan(ctx, operationName, client.internal.Tracer(), nil)
	defer func() { endSpan(err) }()
	req, err := client.deleteCreateRequest(ctx, resourceGroupName, name, options)
	if err != nil {
		return nil, err
	}
	httpResp, err := client.internal.Pipeline().Do(req)
	if err != nil {
		return nil, err
	}
	if !runtime.HasStatusCode(httpResp, http.StatusAccepted, http.StatusNoContent) {
		err = runtime.NewResponseError(httpResp)
		return nil, err
	}
	return httpResp, nil
}

// deleteCreateRequest creates the Delete request.
func (client *DisconnectedOperationsClient) deleteCreateRequest(ctx context.Context, resourceGroupName string, name string, _ *DisconnectedOperationsClientBeginDeleteOptions) (*policy.Request, error) {
	urlPath := "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Edge/disconnectedOperations/{name}"
	if client.subscriptionID == "" {
		return nil, errors.New("parameter client.subscriptionID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{subscriptionId}", url.PathEscape(client.subscriptionID))
	if resourceGroupName == "" {
		return nil, errors.New("parameter resourceGroupName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{resourceGroupName}", url.PathEscape(resourceGroupName))
	if name == "" {
		return nil, errors.New("parameter name cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{name}", url.PathEscape(name))
	req, err := runtime.NewRequest(ctx, http.MethodDelete, runtime.JoinPaths(client.internal.Endpoint(), urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("api-version", "2025-06-01-preview")
	req.Raw().URL.RawQuery = reqQP.Encode()
	return req, nil
}

// Get - Get a DisconnectedOperation
// If the operation fails it returns an *azcore.ResponseError type.
//
// Generated from API version 2025-06-01-preview
//   - resourceGroupName - The name of the resource group. The name is case insensitive.
//   - name - Name of the resource
//   - options - DisconnectedOperationsClientGetOptions contains the optional parameters for the DisconnectedOperationsClient.Get
//     method.
func (client *DisconnectedOperationsClient) Get(ctx context.Context, resourceGroupName string, name string, options *DisconnectedOperationsClientGetOptions) (DisconnectedOperationsClientGetResponse, error) {
	var err error
	const operationName = "DisconnectedOperationsClient.Get"
	ctx = context.WithValue(ctx, runtime.CtxAPINameKey{}, operationName)
	ctx, endSpan := runtime.StartSpan(ctx, operationName, client.internal.Tracer(), nil)
	defer func() { endSpan(err) }()
	req, err := client.getCreateRequest(ctx, resourceGroupName, name, options)
	if err != nil {
		return DisconnectedOperationsClientGetResponse{}, err
	}
	httpResp, err := client.internal.Pipeline().Do(req)
	if err != nil {
		return DisconnectedOperationsClientGetResponse{}, err
	}
	if !runtime.HasStatusCode(httpResp, http.StatusOK) {
		err = runtime.NewResponseError(httpResp)
		return DisconnectedOperationsClientGetResponse{}, err
	}
	resp, err := client.getHandleResponse(httpResp)
	return resp, err
}

// getCreateRequest creates the Get request.
func (client *DisconnectedOperationsClient) getCreateRequest(ctx context.Context, resourceGroupName string, name string, _ *DisconnectedOperationsClientGetOptions) (*policy.Request, error) {
	urlPath := "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Edge/disconnectedOperations/{name}"
	if client.subscriptionID == "" {
		return nil, errors.New("parameter client.subscriptionID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{subscriptionId}", url.PathEscape(client.subscriptionID))
	if resourceGroupName == "" {
		return nil, errors.New("parameter resourceGroupName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{resourceGroupName}", url.PathEscape(resourceGroupName))
	if name == "" {
		return nil, errors.New("parameter name cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{name}", url.PathEscape(name))
	req, err := runtime.NewRequest(ctx, http.MethodGet, runtime.JoinPaths(client.internal.Endpoint(), urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("api-version", "2025-06-01-preview")
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header["Accept"] = []string{"application/json"}
	return req, nil
}

// getHandleResponse handles the Get response.
func (client *DisconnectedOperationsClient) getHandleResponse(resp *http.Response) (DisconnectedOperationsClientGetResponse, error) {
	result := DisconnectedOperationsClientGetResponse{}
	if err := runtime.UnmarshalAsJSON(resp, &result.DisconnectedOperation); err != nil {
		return DisconnectedOperationsClientGetResponse{}, err
	}
	return result, nil
}

// NewListByResourceGroupPager - List DisconnectedOperation resources by resource group
//
// Generated from API version 2025-06-01-preview
//   - resourceGroupName - The name of the resource group. The name is case insensitive.
//   - options - DisconnectedOperationsClientListByResourceGroupOptions contains the optional parameters for the DisconnectedOperationsClient.NewListByResourceGroupPager
//     method.
func (client *DisconnectedOperationsClient) NewListByResourceGroupPager(resourceGroupName string, options *DisconnectedOperationsClientListByResourceGroupOptions) *runtime.Pager[DisconnectedOperationsClientListByResourceGroupResponse] {
	return runtime.NewPager(runtime.PagingHandler[DisconnectedOperationsClientListByResourceGroupResponse]{
		More: func(page DisconnectedOperationsClientListByResourceGroupResponse) bool {
			return page.NextLink != nil && len(*page.NextLink) > 0
		},
		Fetcher: func(ctx context.Context, page *DisconnectedOperationsClientListByResourceGroupResponse) (DisconnectedOperationsClientListByResourceGroupResponse, error) {
			ctx = context.WithValue(ctx, runtime.CtxAPINameKey{}, "DisconnectedOperationsClient.NewListByResourceGroupPager")
			nextLink := ""
			if page != nil {
				nextLink = *page.NextLink
			}
			resp, err := runtime.FetcherForNextLink(ctx, client.internal.Pipeline(), nextLink, func(ctx context.Context) (*policy.Request, error) {
				return client.listByResourceGroupCreateRequest(ctx, resourceGroupName, options)
			}, nil)
			if err != nil {
				return DisconnectedOperationsClientListByResourceGroupResponse{}, err
			}
			return client.listByResourceGroupHandleResponse(resp)
		},
		Tracer: client.internal.Tracer(),
	})
}

// listByResourceGroupCreateRequest creates the ListByResourceGroup request.
func (client *DisconnectedOperationsClient) listByResourceGroupCreateRequest(ctx context.Context, resourceGroupName string, _ *DisconnectedOperationsClientListByResourceGroupOptions) (*policy.Request, error) {
	urlPath := "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Edge/disconnectedOperations"
	if client.subscriptionID == "" {
		return nil, errors.New("parameter client.subscriptionID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{subscriptionId}", url.PathEscape(client.subscriptionID))
	if resourceGroupName == "" {
		return nil, errors.New("parameter resourceGroupName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{resourceGroupName}", url.PathEscape(resourceGroupName))
	req, err := runtime.NewRequest(ctx, http.MethodGet, runtime.JoinPaths(client.internal.Endpoint(), urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("api-version", "2025-06-01-preview")
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header["Accept"] = []string{"application/json"}
	return req, nil
}

// listByResourceGroupHandleResponse handles the ListByResourceGroup response.
func (client *DisconnectedOperationsClient) listByResourceGroupHandleResponse(resp *http.Response) (DisconnectedOperationsClientListByResourceGroupResponse, error) {
	result := DisconnectedOperationsClientListByResourceGroupResponse{}
	if err := runtime.UnmarshalAsJSON(resp, &result.DisconnectedOperationListResult); err != nil {
		return DisconnectedOperationsClientListByResourceGroupResponse{}, err
	}
	return result, nil
}

// NewListBySubscriptionPager - List DisconnectedOperation resources by subscription ID
//
// Generated from API version 2025-06-01-preview
//   - options - DisconnectedOperationsClientListBySubscriptionOptions contains the optional parameters for the DisconnectedOperationsClient.NewListBySubscriptionPager
//     method.
func (client *DisconnectedOperationsClient) NewListBySubscriptionPager(options *DisconnectedOperationsClientListBySubscriptionOptions) *runtime.Pager[DisconnectedOperationsClientListBySubscriptionResponse] {
	return runtime.NewPager(runtime.PagingHandler[DisconnectedOperationsClientListBySubscriptionResponse]{
		More: func(page DisconnectedOperationsClientListBySubscriptionResponse) bool {
			return page.NextLink != nil && len(*page.NextLink) > 0
		},
		Fetcher: func(ctx context.Context, page *DisconnectedOperationsClientListBySubscriptionResponse) (DisconnectedOperationsClientListBySubscriptionResponse, error) {
			ctx = context.WithValue(ctx, runtime.CtxAPINameKey{}, "DisconnectedOperationsClient.NewListBySubscriptionPager")
			nextLink := ""
			if page != nil {
				nextLink = *page.NextLink
			}
			resp, err := runtime.FetcherForNextLink(ctx, client.internal.Pipeline(), nextLink, func(ctx context.Context) (*policy.Request, error) {
				return client.listBySubscriptionCreateRequest(ctx, options)
			}, nil)
			if err != nil {
				return DisconnectedOperationsClientListBySubscriptionResponse{}, err
			}
			return client.listBySubscriptionHandleResponse(resp)
		},
		Tracer: client.internal.Tracer(),
	})
}

// listBySubscriptionCreateRequest creates the ListBySubscription request.
func (client *DisconnectedOperationsClient) listBySubscriptionCreateRequest(ctx context.Context, _ *DisconnectedOperationsClientListBySubscriptionOptions) (*policy.Request, error) {
	urlPath := "/subscriptions/{subscriptionId}/providers/Microsoft.Edge/disconnectedOperations"
	if client.subscriptionID == "" {
		return nil, errors.New("parameter client.subscriptionID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{subscriptionId}", url.PathEscape(client.subscriptionID))
	req, err := runtime.NewRequest(ctx, http.MethodGet, runtime.JoinPaths(client.internal.Endpoint(), urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("api-version", "2025-06-01-preview")
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header["Accept"] = []string{"application/json"}
	return req, nil
}

// listBySubscriptionHandleResponse handles the ListBySubscription response.
func (client *DisconnectedOperationsClient) listBySubscriptionHandleResponse(resp *http.Response) (DisconnectedOperationsClientListBySubscriptionResponse, error) {
	result := DisconnectedOperationsClientListBySubscriptionResponse{}
	if err := runtime.UnmarshalAsJSON(resp, &result.DisconnectedOperationListResult); err != nil {
		return DisconnectedOperationsClientListBySubscriptionResponse{}, err
	}
	return result, nil
}

// ListDeploymentManifest - get deployment manifest.
// If the operation fails it returns an *azcore.ResponseError type.
//
// Generated from API version 2025-06-01-preview
//   - resourceGroupName - The name of the resource group. The name is case insensitive.
//   - name - Name of the resource
//   - options - DisconnectedOperationsClientListDeploymentManifestOptions contains the optional parameters for the DisconnectedOperationsClient.ListDeploymentManifest
//     method.
func (client *DisconnectedOperationsClient) ListDeploymentManifest(ctx context.Context, resourceGroupName string, name string, options *DisconnectedOperationsClientListDeploymentManifestOptions) (DisconnectedOperationsClientListDeploymentManifestResponse, error) {
	var err error
	const operationName = "DisconnectedOperationsClient.ListDeploymentManifest"
	ctx = context.WithValue(ctx, runtime.CtxAPINameKey{}, operationName)
	ctx, endSpan := runtime.StartSpan(ctx, operationName, client.internal.Tracer(), nil)
	defer func() { endSpan(err) }()
	req, err := client.listDeploymentManifestCreateRequest(ctx, resourceGroupName, name, options)
	if err != nil {
		return DisconnectedOperationsClientListDeploymentManifestResponse{}, err
	}
	httpResp, err := client.internal.Pipeline().Do(req)
	if err != nil {
		return DisconnectedOperationsClientListDeploymentManifestResponse{}, err
	}
	if !runtime.HasStatusCode(httpResp, http.StatusOK) {
		err = runtime.NewResponseError(httpResp)
		return DisconnectedOperationsClientListDeploymentManifestResponse{}, err
	}
	resp, err := client.listDeploymentManifestHandleResponse(httpResp)
	return resp, err
}

// listDeploymentManifestCreateRequest creates the ListDeploymentManifest request.
func (client *DisconnectedOperationsClient) listDeploymentManifestCreateRequest(ctx context.Context, resourceGroupName string, name string, _ *DisconnectedOperationsClientListDeploymentManifestOptions) (*policy.Request, error) {
	urlPath := "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Edge/disconnectedOperations/{name}/listDeploymentManifest"
	if client.subscriptionID == "" {
		return nil, errors.New("parameter client.subscriptionID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{subscriptionId}", url.PathEscape(client.subscriptionID))
	if resourceGroupName == "" {
		return nil, errors.New("parameter resourceGroupName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{resourceGroupName}", url.PathEscape(resourceGroupName))
	if name == "" {
		return nil, errors.New("parameter name cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{name}", url.PathEscape(name))
	req, err := runtime.NewRequest(ctx, http.MethodPost, runtime.JoinPaths(client.internal.Endpoint(), urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("api-version", "2025-06-01-preview")
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header["Accept"] = []string{"application/json"}
	return req, nil
}

// listDeploymentManifestHandleResponse handles the ListDeploymentManifest response.
func (client *DisconnectedOperationsClient) listDeploymentManifestHandleResponse(resp *http.Response) (DisconnectedOperationsClientListDeploymentManifestResponse, error) {
	result := DisconnectedOperationsClientListDeploymentManifestResponse{}
	if err := runtime.UnmarshalAsJSON(resp, &result.DisconnectedOperationDeploymentManifest); err != nil {
		return DisconnectedOperationsClientListDeploymentManifestResponse{}, err
	}
	return result, nil
}

// Update - Update a DisconnectedOperation
// If the operation fails it returns an *azcore.ResponseError type.
//
// Generated from API version 2025-06-01-preview
//   - resourceGroupName - The name of the resource group. The name is case insensitive.
//   - name - Name of the resource
//   - properties - The resource properties to be updated.
//   - options - DisconnectedOperationsClientUpdateOptions contains the optional parameters for the DisconnectedOperationsClient.Update
//     method.
func (client *DisconnectedOperationsClient) Update(ctx context.Context, resourceGroupName string, name string, properties DisconnectedOperationUpdate, options *DisconnectedOperationsClientUpdateOptions) (DisconnectedOperationsClientUpdateResponse, error) {
	var err error
	const operationName = "DisconnectedOperationsClient.Update"
	ctx = context.WithValue(ctx, runtime.CtxAPINameKey{}, operationName)
	ctx, endSpan := runtime.StartSpan(ctx, operationName, client.internal.Tracer(), nil)
	defer func() { endSpan(err) }()
	req, err := client.updateCreateRequest(ctx, resourceGroupName, name, properties, options)
	if err != nil {
		return DisconnectedOperationsClientUpdateResponse{}, err
	}
	httpResp, err := client.internal.Pipeline().Do(req)
	if err != nil {
		return DisconnectedOperationsClientUpdateResponse{}, err
	}
	if !runtime.HasStatusCode(httpResp, http.StatusOK) {
		err = runtime.NewResponseError(httpResp)
		return DisconnectedOperationsClientUpdateResponse{}, err
	}
	resp, err := client.updateHandleResponse(httpResp)
	return resp, err
}

// updateCreateRequest creates the Update request.
func (client *DisconnectedOperationsClient) updateCreateRequest(ctx context.Context, resourceGroupName string, name string, properties DisconnectedOperationUpdate, _ *DisconnectedOperationsClientUpdateOptions) (*policy.Request, error) {
	urlPath := "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Edge/disconnectedOperations/{name}"
	if client.subscriptionID == "" {
		return nil, errors.New("parameter client.subscriptionID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{subscriptionId}", url.PathEscape(client.subscriptionID))
	if resourceGroupName == "" {
		return nil, errors.New("parameter resourceGroupName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{resourceGroupName}", url.PathEscape(resourceGroupName))
	if name == "" {
		return nil, errors.New("parameter name cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{name}", url.PathEscape(name))
	req, err := runtime.NewRequest(ctx, http.MethodPatch, runtime.JoinPaths(client.internal.Endpoint(), urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("api-version", "2025-06-01-preview")
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header["Accept"] = []string{"application/json"}
	req.Raw().Header["Content-Type"] = []string{"application/json"}
	if err := runtime.MarshalAsJSON(req, properties); err != nil {
		return nil, err
	}
	return req, nil
}

// updateHandleResponse handles the Update response.
func (client *DisconnectedOperationsClient) updateHandleResponse(resp *http.Response) (DisconnectedOperationsClientUpdateResponse, error) {
	result := DisconnectedOperationsClientUpdateResponse{}
	if err := runtime.UnmarshalAsJSON(resp, &result.DisconnectedOperation); err != nil {
		return DisconnectedOperationsClientUpdateResponse{}, err
	}
	return result, nil
}
