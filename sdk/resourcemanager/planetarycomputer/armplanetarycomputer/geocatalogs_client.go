// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) Go Code Generator. DO NOT EDIT.

package armplanetarycomputer

import (
	"context"
	"errors"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/arm"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/policy"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/runtime"
	"net/http"
	"net/url"
	"strings"
)

// GeoCatalogsClient contains the methods for the GeoCatalogs group.
// Don't use this type directly, use NewGeoCatalogsClient() instead.
type GeoCatalogsClient struct {
	internal       *arm.Client
	subscriptionID string
}

// NewGeoCatalogsClient creates a new instance of GeoCatalogsClient with the specified values.
//   - subscriptionID - The ID of the target subscription. The value must be an UUID.
//   - credential - used to authorize requests. Usually a credential from azidentity.
//   - options - pass nil to accept the default values.
func NewGeoCatalogsClient(subscriptionID string, credential azcore.TokenCredential, options *arm.ClientOptions) (*GeoCatalogsClient, error) {
	cl, err := arm.NewClient(moduleName, moduleVersion, credential, options)
	if err != nil {
		return nil, err
	}
	client := &GeoCatalogsClient{
		subscriptionID: subscriptionID,
		internal:       cl,
	}
	return client, nil
}

// BeginCreate - Create a GeoCatalog
// If the operation fails it returns an *azcore.ResponseError type.
//
// Generated from API version 2025-02-11-preview
//   - resourceGroupName - The name of the resource group. The name is case insensitive.
//   - catalogName - The name of the catalog
//   - resource - Resource create parameters.
//   - options - GeoCatalogsClientBeginCreateOptions contains the optional parameters for the GeoCatalogsClient.BeginCreate method.
func (client *GeoCatalogsClient) BeginCreate(ctx context.Context, resourceGroupName string, catalogName string, resource GeoCatalog, options *GeoCatalogsClientBeginCreateOptions) (*runtime.Poller[GeoCatalogsClientCreateResponse], error) {
	if options == nil || options.ResumeToken == "" {
		resp, err := client.create(ctx, resourceGroupName, catalogName, resource, options)
		if err != nil {
			return nil, err
		}
		poller, err := runtime.NewPoller(resp, client.internal.Pipeline(), &runtime.NewPollerOptions[GeoCatalogsClientCreateResponse]{
			Tracer: client.internal.Tracer(),
		})
		return poller, err
	} else {
		return runtime.NewPollerFromResumeToken(options.ResumeToken, client.internal.Pipeline(), &runtime.NewPollerFromResumeTokenOptions[GeoCatalogsClientCreateResponse]{
			Tracer: client.internal.Tracer(),
		})
	}
}

// Create - Create a GeoCatalog
// If the operation fails it returns an *azcore.ResponseError type.
//
// Generated from API version 2025-02-11-preview
func (client *GeoCatalogsClient) create(ctx context.Context, resourceGroupName string, catalogName string, resource GeoCatalog, options *GeoCatalogsClientBeginCreateOptions) (*http.Response, error) {
	var err error
	const operationName = "GeoCatalogsClient.BeginCreate"
	ctx = context.WithValue(ctx, runtime.CtxAPINameKey{}, operationName)
	ctx, endSpan := runtime.StartSpan(ctx, operationName, client.internal.Tracer(), nil)
	defer func() { endSpan(err) }()
	req, err := client.createCreateRequest(ctx, resourceGroupName, catalogName, resource, options)
	if err != nil {
		return nil, err
	}
	httpResp, err := client.internal.Pipeline().Do(req)
	if err != nil {
		return nil, err
	}
	if !runtime.HasStatusCode(httpResp, http.StatusOK, http.StatusCreated) {
		err = runtime.NewResponseError(httpResp)
		return nil, err
	}
	return httpResp, nil
}

// createCreateRequest creates the Create request.
func (client *GeoCatalogsClient) createCreateRequest(ctx context.Context, resourceGroupName string, catalogName string, resource GeoCatalog, _ *GeoCatalogsClientBeginCreateOptions) (*policy.Request, error) {
	urlPath := "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Orbital/geoCatalogs/{catalogName}"
	if client.subscriptionID == "" {
		return nil, errors.New("parameter client.subscriptionID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{subscriptionId}", url.PathEscape(client.subscriptionID))
	if resourceGroupName == "" {
		return nil, errors.New("parameter resourceGroupName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{resourceGroupName}", url.PathEscape(resourceGroupName))
	if catalogName == "" {
		return nil, errors.New("parameter catalogName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{catalogName}", url.PathEscape(catalogName))
	req, err := runtime.NewRequest(ctx, http.MethodPut, runtime.JoinPaths(client.internal.Endpoint(), urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("api-version", "2025-02-11-preview")
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header["Accept"] = []string{"application/json"}
	req.Raw().Header["Content-Type"] = []string{"application/json"}
	if err := runtime.MarshalAsJSON(req, resource); err != nil {
		return nil, err
	}
	return req, nil
}

// BeginDelete - Delete a GeoCatalog
// If the operation fails it returns an *azcore.ResponseError type.
//
// Generated from API version 2025-02-11-preview
//   - resourceGroupName - The name of the resource group. The name is case insensitive.
//   - catalogName - The name of the catalog
//   - options - GeoCatalogsClientBeginDeleteOptions contains the optional parameters for the GeoCatalogsClient.BeginDelete method.
func (client *GeoCatalogsClient) BeginDelete(ctx context.Context, resourceGroupName string, catalogName string, options *GeoCatalogsClientBeginDeleteOptions) (*runtime.Poller[GeoCatalogsClientDeleteResponse], error) {
	if options == nil || options.ResumeToken == "" {
		resp, err := client.deleteOperation(ctx, resourceGroupName, catalogName, options)
		if err != nil {
			return nil, err
		}
		poller, err := runtime.NewPoller(resp, client.internal.Pipeline(), &runtime.NewPollerOptions[GeoCatalogsClientDeleteResponse]{
			Tracer: client.internal.Tracer(),
		})
		return poller, err
	} else {
		return runtime.NewPollerFromResumeToken(options.ResumeToken, client.internal.Pipeline(), &runtime.NewPollerFromResumeTokenOptions[GeoCatalogsClientDeleteResponse]{
			Tracer: client.internal.Tracer(),
		})
	}
}

// Delete - Delete a GeoCatalog
// If the operation fails it returns an *azcore.ResponseError type.
//
// Generated from API version 2025-02-11-preview
func (client *GeoCatalogsClient) deleteOperation(ctx context.Context, resourceGroupName string, catalogName string, options *GeoCatalogsClientBeginDeleteOptions) (*http.Response, error) {
	var err error
	const operationName = "GeoCatalogsClient.BeginDelete"
	ctx = context.WithValue(ctx, runtime.CtxAPINameKey{}, operationName)
	ctx, endSpan := runtime.StartSpan(ctx, operationName, client.internal.Tracer(), nil)
	defer func() { endSpan(err) }()
	req, err := client.deleteCreateRequest(ctx, resourceGroupName, catalogName, options)
	if err != nil {
		return nil, err
	}
	httpResp, err := client.internal.Pipeline().Do(req)
	if err != nil {
		return nil, err
	}
	if !runtime.HasStatusCode(httpResp, http.StatusAccepted, http.StatusNoContent) {
		err = runtime.NewResponseError(httpResp)
		return nil, err
	}
	return httpResp, nil
}

// deleteCreateRequest creates the Delete request.
func (client *GeoCatalogsClient) deleteCreateRequest(ctx context.Context, resourceGroupName string, catalogName string, _ *GeoCatalogsClientBeginDeleteOptions) (*policy.Request, error) {
	urlPath := "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Orbital/geoCatalogs/{catalogName}"
	if client.subscriptionID == "" {
		return nil, errors.New("parameter client.subscriptionID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{subscriptionId}", url.PathEscape(client.subscriptionID))
	if resourceGroupName == "" {
		return nil, errors.New("parameter resourceGroupName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{resourceGroupName}", url.PathEscape(resourceGroupName))
	if catalogName == "" {
		return nil, errors.New("parameter catalogName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{catalogName}", url.PathEscape(catalogName))
	req, err := runtime.NewRequest(ctx, http.MethodDelete, runtime.JoinPaths(client.internal.Endpoint(), urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("api-version", "2025-02-11-preview")
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header["Accept"] = []string{"application/json"}
	return req, nil
}

// Get - Get a GeoCatalog
// If the operation fails it returns an *azcore.ResponseError type.
//
// Generated from API version 2025-02-11-preview
//   - resourceGroupName - The name of the resource group. The name is case insensitive.
//   - catalogName - The name of the catalog
//   - options - GeoCatalogsClientGetOptions contains the optional parameters for the GeoCatalogsClient.Get method.
func (client *GeoCatalogsClient) Get(ctx context.Context, resourceGroupName string, catalogName string, options *GeoCatalogsClientGetOptions) (GeoCatalogsClientGetResponse, error) {
	var err error
	const operationName = "GeoCatalogsClient.Get"
	ctx = context.WithValue(ctx, runtime.CtxAPINameKey{}, operationName)
	ctx, endSpan := runtime.StartSpan(ctx, operationName, client.internal.Tracer(), nil)
	defer func() { endSpan(err) }()
	req, err := client.getCreateRequest(ctx, resourceGroupName, catalogName, options)
	if err != nil {
		return GeoCatalogsClientGetResponse{}, err
	}
	httpResp, err := client.internal.Pipeline().Do(req)
	if err != nil {
		return GeoCatalogsClientGetResponse{}, err
	}
	if !runtime.HasStatusCode(httpResp, http.StatusOK) {
		err = runtime.NewResponseError(httpResp)
		return GeoCatalogsClientGetResponse{}, err
	}
	resp, err := client.getHandleResponse(httpResp)
	return resp, err
}

// getCreateRequest creates the Get request.
func (client *GeoCatalogsClient) getCreateRequest(ctx context.Context, resourceGroupName string, catalogName string, _ *GeoCatalogsClientGetOptions) (*policy.Request, error) {
	urlPath := "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Orbital/geoCatalogs/{catalogName}"
	if client.subscriptionID == "" {
		return nil, errors.New("parameter client.subscriptionID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{subscriptionId}", url.PathEscape(client.subscriptionID))
	if resourceGroupName == "" {
		return nil, errors.New("parameter resourceGroupName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{resourceGroupName}", url.PathEscape(resourceGroupName))
	if catalogName == "" {
		return nil, errors.New("parameter catalogName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{catalogName}", url.PathEscape(catalogName))
	req, err := runtime.NewRequest(ctx, http.MethodGet, runtime.JoinPaths(client.internal.Endpoint(), urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("api-version", "2025-02-11-preview")
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header["Accept"] = []string{"application/json"}
	return req, nil
}

// getHandleResponse handles the Get response.
func (client *GeoCatalogsClient) getHandleResponse(resp *http.Response) (GeoCatalogsClientGetResponse, error) {
	result := GeoCatalogsClientGetResponse{}
	if err := runtime.UnmarshalAsJSON(resp, &result.GeoCatalog); err != nil {
		return GeoCatalogsClientGetResponse{}, err
	}
	return result, nil
}

// NewListByResourceGroupPager - List GeoCatalog resources by resource group
//
// Generated from API version 2025-02-11-preview
//   - resourceGroupName - The name of the resource group. The name is case insensitive.
//   - options - GeoCatalogsClientListByResourceGroupOptions contains the optional parameters for the GeoCatalogsClient.NewListByResourceGroupPager
//     method.
func (client *GeoCatalogsClient) NewListByResourceGroupPager(resourceGroupName string, options *GeoCatalogsClientListByResourceGroupOptions) *runtime.Pager[GeoCatalogsClientListByResourceGroupResponse] {
	return runtime.NewPager(runtime.PagingHandler[GeoCatalogsClientListByResourceGroupResponse]{
		More: func(page GeoCatalogsClientListByResourceGroupResponse) bool {
			return page.NextLink != nil && len(*page.NextLink) > 0
		},
		Fetcher: func(ctx context.Context, page *GeoCatalogsClientListByResourceGroupResponse) (GeoCatalogsClientListByResourceGroupResponse, error) {
			ctx = context.WithValue(ctx, runtime.CtxAPINameKey{}, "GeoCatalogsClient.NewListByResourceGroupPager")
			nextLink := ""
			if page != nil {
				nextLink = *page.NextLink
			}
			resp, err := runtime.FetcherForNextLink(ctx, client.internal.Pipeline(), nextLink, func(ctx context.Context) (*policy.Request, error) {
				return client.listByResourceGroupCreateRequest(ctx, resourceGroupName, options)
			}, nil)
			if err != nil {
				return GeoCatalogsClientListByResourceGroupResponse{}, err
			}
			return client.listByResourceGroupHandleResponse(resp)
		},
		Tracer: client.internal.Tracer(),
	})
}

// listByResourceGroupCreateRequest creates the ListByResourceGroup request.
func (client *GeoCatalogsClient) listByResourceGroupCreateRequest(ctx context.Context, resourceGroupName string, _ *GeoCatalogsClientListByResourceGroupOptions) (*policy.Request, error) {
	urlPath := "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Orbital/geoCatalogs"
	if client.subscriptionID == "" {
		return nil, errors.New("parameter client.subscriptionID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{subscriptionId}", url.PathEscape(client.subscriptionID))
	if resourceGroupName == "" {
		return nil, errors.New("parameter resourceGroupName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{resourceGroupName}", url.PathEscape(resourceGroupName))
	req, err := runtime.NewRequest(ctx, http.MethodGet, runtime.JoinPaths(client.internal.Endpoint(), urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("api-version", "2025-02-11-preview")
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header["Accept"] = []string{"application/json"}
	return req, nil
}

// listByResourceGroupHandleResponse handles the ListByResourceGroup response.
func (client *GeoCatalogsClient) listByResourceGroupHandleResponse(resp *http.Response) (GeoCatalogsClientListByResourceGroupResponse, error) {
	result := GeoCatalogsClientListByResourceGroupResponse{}
	if err := runtime.UnmarshalAsJSON(resp, &result.GeoCatalogListResult); err != nil {
		return GeoCatalogsClientListByResourceGroupResponse{}, err
	}
	return result, nil
}

// NewListBySubscriptionPager - List GeoCatalog resources by subscription ID
//
// Generated from API version 2025-02-11-preview
//   - options - GeoCatalogsClientListBySubscriptionOptions contains the optional parameters for the GeoCatalogsClient.NewListBySubscriptionPager
//     method.
func (client *GeoCatalogsClient) NewListBySubscriptionPager(options *GeoCatalogsClientListBySubscriptionOptions) *runtime.Pager[GeoCatalogsClientListBySubscriptionResponse] {
	return runtime.NewPager(runtime.PagingHandler[GeoCatalogsClientListBySubscriptionResponse]{
		More: func(page GeoCatalogsClientListBySubscriptionResponse) bool {
			return page.NextLink != nil && len(*page.NextLink) > 0
		},
		Fetcher: func(ctx context.Context, page *GeoCatalogsClientListBySubscriptionResponse) (GeoCatalogsClientListBySubscriptionResponse, error) {
			ctx = context.WithValue(ctx, runtime.CtxAPINameKey{}, "GeoCatalogsClient.NewListBySubscriptionPager")
			nextLink := ""
			if page != nil {
				nextLink = *page.NextLink
			}
			resp, err := runtime.FetcherForNextLink(ctx, client.internal.Pipeline(), nextLink, func(ctx context.Context) (*policy.Request, error) {
				return client.listBySubscriptionCreateRequest(ctx, options)
			}, nil)
			if err != nil {
				return GeoCatalogsClientListBySubscriptionResponse{}, err
			}
			return client.listBySubscriptionHandleResponse(resp)
		},
		Tracer: client.internal.Tracer(),
	})
}

// listBySubscriptionCreateRequest creates the ListBySubscription request.
func (client *GeoCatalogsClient) listBySubscriptionCreateRequest(ctx context.Context, _ *GeoCatalogsClientListBySubscriptionOptions) (*policy.Request, error) {
	urlPath := "/subscriptions/{subscriptionId}/providers/Microsoft.Orbital/geoCatalogs"
	if client.subscriptionID == "" {
		return nil, errors.New("parameter client.subscriptionID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{subscriptionId}", url.PathEscape(client.subscriptionID))
	req, err := runtime.NewRequest(ctx, http.MethodGet, runtime.JoinPaths(client.internal.Endpoint(), urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("api-version", "2025-02-11-preview")
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header["Accept"] = []string{"application/json"}
	return req, nil
}

// listBySubscriptionHandleResponse handles the ListBySubscription response.
func (client *GeoCatalogsClient) listBySubscriptionHandleResponse(resp *http.Response) (GeoCatalogsClientListBySubscriptionResponse, error) {
	result := GeoCatalogsClientListBySubscriptionResponse{}
	if err := runtime.UnmarshalAsJSON(resp, &result.GeoCatalogListResult); err != nil {
		return GeoCatalogsClientListBySubscriptionResponse{}, err
	}
	return result, nil
}

// BeginUpdate - Update a GeoCatalog
// If the operation fails it returns an *azcore.ResponseError type.
//
// Generated from API version 2025-02-11-preview
//   - resourceGroupName - The name of the resource group. The name is case insensitive.
//   - catalogName - The name of the catalog
//   - properties - The resource properties to be updated.
//   - options - GeoCatalogsClientBeginUpdateOptions contains the optional parameters for the GeoCatalogsClient.BeginUpdate method.
func (client *GeoCatalogsClient) BeginUpdate(ctx context.Context, resourceGroupName string, catalogName string, properties GeoCatalogUpdate, options *GeoCatalogsClientBeginUpdateOptions) (*runtime.Poller[GeoCatalogsClientUpdateResponse], error) {
	if options == nil || options.ResumeToken == "" {
		resp, err := client.update(ctx, resourceGroupName, catalogName, properties, options)
		if err != nil {
			return nil, err
		}
		poller, err := runtime.NewPoller(resp, client.internal.Pipeline(), &runtime.NewPollerOptions[GeoCatalogsClientUpdateResponse]{
			Tracer: client.internal.Tracer(),
		})
		return poller, err
	} else {
		return runtime.NewPollerFromResumeToken(options.ResumeToken, client.internal.Pipeline(), &runtime.NewPollerFromResumeTokenOptions[GeoCatalogsClientUpdateResponse]{
			Tracer: client.internal.Tracer(),
		})
	}
}

// Update - Update a GeoCatalog
// If the operation fails it returns an *azcore.ResponseError type.
//
// Generated from API version 2025-02-11-preview
func (client *GeoCatalogsClient) update(ctx context.Context, resourceGroupName string, catalogName string, properties GeoCatalogUpdate, options *GeoCatalogsClientBeginUpdateOptions) (*http.Response, error) {
	var err error
	const operationName = "GeoCatalogsClient.BeginUpdate"
	ctx = context.WithValue(ctx, runtime.CtxAPINameKey{}, operationName)
	ctx, endSpan := runtime.StartSpan(ctx, operationName, client.internal.Tracer(), nil)
	defer func() { endSpan(err) }()
	req, err := client.updateCreateRequest(ctx, resourceGroupName, catalogName, properties, options)
	if err != nil {
		return nil, err
	}
	httpResp, err := client.internal.Pipeline().Do(req)
	if err != nil {
		return nil, err
	}
	if !runtime.HasStatusCode(httpResp, http.StatusOK, http.StatusAccepted) {
		err = runtime.NewResponseError(httpResp)
		return nil, err
	}
	return httpResp, nil
}

// updateCreateRequest creates the Update request.
func (client *GeoCatalogsClient) updateCreateRequest(ctx context.Context, resourceGroupName string, catalogName string, properties GeoCatalogUpdate, _ *GeoCatalogsClientBeginUpdateOptions) (*policy.Request, error) {
	urlPath := "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Orbital/geoCatalogs/{catalogName}"
	if client.subscriptionID == "" {
		return nil, errors.New("parameter client.subscriptionID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{subscriptionId}", url.PathEscape(client.subscriptionID))
	if resourceGroupName == "" {
		return nil, errors.New("parameter resourceGroupName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{resourceGroupName}", url.PathEscape(resourceGroupName))
	if catalogName == "" {
		return nil, errors.New("parameter catalogName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{catalogName}", url.PathEscape(catalogName))
	req, err := runtime.NewRequest(ctx, http.MethodPatch, runtime.JoinPaths(client.internal.Endpoint(), urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("api-version", "2025-02-11-preview")
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header["Accept"] = []string{"application/json"}
	req.Raw().Header["Content-Type"] = []string{"application/json"}
	if err := runtime.MarshalAsJSON(req, properties); err != nil {
		return nil, err
	}
	return req, nil
}
