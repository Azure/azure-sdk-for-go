// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) Go Code Generator. DO NOT EDIT.

package fake

import (
	"context"
	"errors"
	"fmt"
	azfake "github.com/Azure/azure-sdk-for-go/sdk/azcore/fake"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/fake/server"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/runtime"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/to"
	"github.com/Azure/azure-sdk-for-go/sdk/resourcemanager/playwright/armplaywright"
	"net/http"
	"net/url"
	"regexp"
)

// WorkspaceQuotasServer is a fake server for instances of the armplaywright.WorkspaceQuotasClient type.
type WorkspaceQuotasServer struct {
	// Get is the fake for method WorkspaceQuotasClient.Get
	// HTTP status codes to indicate success: http.StatusOK
	Get func(ctx context.Context, resourceGroupName string, playwrightWorkspaceName string, quotaName armplaywright.QuotaName, options *armplaywright.WorkspaceQuotasClientGetOptions) (resp azfake.Responder[armplaywright.WorkspaceQuotasClientGetResponse], errResp azfake.ErrorResponder)

	// NewListByPlaywrightWorkspacePager is the fake for method WorkspaceQuotasClient.NewListByPlaywrightWorkspacePager
	// HTTP status codes to indicate success: http.StatusOK
	NewListByPlaywrightWorkspacePager func(resourceGroupName string, playwrightWorkspaceName string, options *armplaywright.WorkspaceQuotasClientListByPlaywrightWorkspaceOptions) (resp azfake.PagerResponder[armplaywright.WorkspaceQuotasClientListByPlaywrightWorkspaceResponse])
}

// NewWorkspaceQuotasServerTransport creates a new instance of WorkspaceQuotasServerTransport with the provided implementation.
// The returned WorkspaceQuotasServerTransport instance is connected to an instance of armplaywright.WorkspaceQuotasClient via the
// azcore.ClientOptions.Transporter field in the client's constructor parameters.
func NewWorkspaceQuotasServerTransport(srv *WorkspaceQuotasServer) *WorkspaceQuotasServerTransport {
	return &WorkspaceQuotasServerTransport{
		srv:                               srv,
		newListByPlaywrightWorkspacePager: newTracker[azfake.PagerResponder[armplaywright.WorkspaceQuotasClientListByPlaywrightWorkspaceResponse]](),
	}
}

// WorkspaceQuotasServerTransport connects instances of armplaywright.WorkspaceQuotasClient to instances of WorkspaceQuotasServer.
// Don't use this type directly, use NewWorkspaceQuotasServerTransport instead.
type WorkspaceQuotasServerTransport struct {
	srv                               *WorkspaceQuotasServer
	newListByPlaywrightWorkspacePager *tracker[azfake.PagerResponder[armplaywright.WorkspaceQuotasClientListByPlaywrightWorkspaceResponse]]
}

// Do implements the policy.Transporter interface for WorkspaceQuotasServerTransport.
func (w *WorkspaceQuotasServerTransport) Do(req *http.Request) (*http.Response, error) {
	rawMethod := req.Context().Value(runtime.CtxAPINameKey{})
	method, ok := rawMethod.(string)
	if !ok {
		return nil, nonRetriableError{errors.New("unable to dispatch request, missing value for CtxAPINameKey")}
	}

	return w.dispatchToMethodFake(req, method)
}

func (w *WorkspaceQuotasServerTransport) dispatchToMethodFake(req *http.Request, method string) (*http.Response, error) {
	resultChan := make(chan result)
	defer close(resultChan)

	go func() {
		var intercepted bool
		var res result
		if workspaceQuotasServerTransportInterceptor != nil {
			res.resp, res.err, intercepted = workspaceQuotasServerTransportInterceptor.Do(req)
		}
		if !intercepted {
			switch method {
			case "WorkspaceQuotasClient.Get":
				res.resp, res.err = w.dispatchGet(req)
			case "WorkspaceQuotasClient.NewListByPlaywrightWorkspacePager":
				res.resp, res.err = w.dispatchNewListByPlaywrightWorkspacePager(req)
			default:
				res.err = fmt.Errorf("unhandled API %s", method)
			}

		}
		select {
		case resultChan <- res:
		case <-req.Context().Done():
		}
	}()

	select {
	case <-req.Context().Done():
		return nil, req.Context().Err()
	case res := <-resultChan:
		return res.resp, res.err
	}
}

func (w *WorkspaceQuotasServerTransport) dispatchGet(req *http.Request) (*http.Response, error) {
	if w.srv.Get == nil {
		return nil, &nonRetriableError{errors.New("fake for method Get not implemented")}
	}
	const regexStr = `/subscriptions/(?P<subscriptionId>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/resourceGroups/(?P<resourceGroupName>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/providers/Microsoft\.LoadTestService/playwrightWorkspaces/(?P<playwrightWorkspaceName>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/quotas/(?P<quotaName>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)`
	regex := regexp.MustCompile(regexStr)
	matches := regex.FindStringSubmatch(req.URL.EscapedPath())
	if len(matches) < 5 {
		return nil, fmt.Errorf("failed to parse path %s", req.URL.Path)
	}
	resourceGroupNameParam, err := url.PathUnescape(matches[regex.SubexpIndex("resourceGroupName")])
	if err != nil {
		return nil, err
	}
	playwrightWorkspaceNameParam, err := url.PathUnescape(matches[regex.SubexpIndex("playwrightWorkspaceName")])
	if err != nil {
		return nil, err
	}
	quotaNameParam, err := parseWithCast(matches[regex.SubexpIndex("quotaName")], func(v string) (armplaywright.QuotaName, error) {
		p, unescapeErr := url.PathUnescape(v)
		if unescapeErr != nil {
			return "", unescapeErr
		}
		return armplaywright.QuotaName(p), nil
	})
	if err != nil {
		return nil, err
	}
	respr, errRespr := w.srv.Get(req.Context(), resourceGroupNameParam, playwrightWorkspaceNameParam, quotaNameParam, nil)
	if respErr := server.GetError(errRespr, req); respErr != nil {
		return nil, respErr
	}
	respContent := server.GetResponseContent(respr)
	if !contains([]int{http.StatusOK}, respContent.HTTPStatus) {
		return nil, &nonRetriableError{fmt.Errorf("unexpected status code %d. acceptable values are http.StatusOK", respContent.HTTPStatus)}
	}
	resp, err := server.MarshalResponseAsJSON(respContent, server.GetResponse(respr).WorkspaceQuota, req)
	if err != nil {
		return nil, err
	}
	return resp, nil
}

func (w *WorkspaceQuotasServerTransport) dispatchNewListByPlaywrightWorkspacePager(req *http.Request) (*http.Response, error) {
	if w.srv.NewListByPlaywrightWorkspacePager == nil {
		return nil, &nonRetriableError{errors.New("fake for method NewListByPlaywrightWorkspacePager not implemented")}
	}
	newListByPlaywrightWorkspacePager := w.newListByPlaywrightWorkspacePager.get(req)
	if newListByPlaywrightWorkspacePager == nil {
		const regexStr = `/subscriptions/(?P<subscriptionId>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/resourceGroups/(?P<resourceGroupName>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/providers/Microsoft\.LoadTestService/playwrightWorkspaces/(?P<playwrightWorkspaceName>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/quotas`
		regex := regexp.MustCompile(regexStr)
		matches := regex.FindStringSubmatch(req.URL.EscapedPath())
		if len(matches) < 4 {
			return nil, fmt.Errorf("failed to parse path %s", req.URL.Path)
		}
		resourceGroupNameParam, err := url.PathUnescape(matches[regex.SubexpIndex("resourceGroupName")])
		if err != nil {
			return nil, err
		}
		playwrightWorkspaceNameParam, err := url.PathUnescape(matches[regex.SubexpIndex("playwrightWorkspaceName")])
		if err != nil {
			return nil, err
		}
		resp := w.srv.NewListByPlaywrightWorkspacePager(resourceGroupNameParam, playwrightWorkspaceNameParam, nil)
		newListByPlaywrightWorkspacePager = &resp
		w.newListByPlaywrightWorkspacePager.add(req, newListByPlaywrightWorkspacePager)
		server.PagerResponderInjectNextLinks(newListByPlaywrightWorkspacePager, req, func(page *armplaywright.WorkspaceQuotasClientListByPlaywrightWorkspaceResponse, createLink func() string) {
			page.NextLink = to.Ptr(createLink())
		})
	}
	resp, err := server.PagerResponderNext(newListByPlaywrightWorkspacePager, req)
	if err != nil {
		return nil, err
	}
	if !contains([]int{http.StatusOK}, resp.StatusCode) {
		w.newListByPlaywrightWorkspacePager.remove(req)
		return nil, &nonRetriableError{fmt.Errorf("unexpected status code %d. acceptable values are http.StatusOK", resp.StatusCode)}
	}
	if !server.PagerResponderMore(newListByPlaywrightWorkspacePager) {
		w.newListByPlaywrightWorkspacePager.remove(req)
	}
	return resp, nil
}

// set this to conditionally intercept incoming requests to WorkspaceQuotasServerTransport
var workspaceQuotasServerTransportInterceptor interface {
	// Do returns true if the server transport should use the returned response/error
	Do(*http.Request) (*http.Response, error, bool)
}
