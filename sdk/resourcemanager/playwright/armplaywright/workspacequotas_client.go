// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) Go Code Generator. DO NOT EDIT.

package armplaywright

import (
	"context"
	"errors"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/arm"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/policy"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/runtime"
	"net/http"
	"net/url"
	"strings"
)

// WorkspaceQuotasClient contains the methods for the WorkspaceQuotas group.
// Don't use this type directly, use NewWorkspaceQuotasClient() instead.
type WorkspaceQuotasClient struct {
	internal       *arm.Client
	subscriptionID string
}

// NewWorkspaceQuotasClient creates a new instance of WorkspaceQuotasClient with the specified values.
//   - subscriptionID - The ID of the target subscription. The value must be an UUID.
//   - credential - used to authorize requests. Usually a credential from azidentity.
//   - options - pass nil to accept the default values.
func NewWorkspaceQuotasClient(subscriptionID string, credential azcore.TokenCredential, options *arm.ClientOptions) (*WorkspaceQuotasClient, error) {
	cl, err := arm.NewClient(moduleName, moduleVersion, credential, options)
	if err != nil {
		return nil, err
	}
	client := &WorkspaceQuotasClient{
		subscriptionID: subscriptionID,
		internal:       cl,
	}
	return client, nil
}

// Get - Get Playwright workspace quota resource by name.
// If the operation fails it returns an *azcore.ResponseError type.
//
// Generated from API version 2025-07-01-preview
//   - resourceGroupName - The name of the resource group. The name is case insensitive.
//   - playwrightWorkspaceName - The name of the PlaywrightWorkspace
//   - quotaName - The name of the PlaywrightWorkspaceQuota
//   - options - WorkspaceQuotasClientGetOptions contains the optional parameters for the WorkspaceQuotasClient.Get method.
func (client *WorkspaceQuotasClient) Get(ctx context.Context, resourceGroupName string, playwrightWorkspaceName string, quotaName QuotaName, options *WorkspaceQuotasClientGetOptions) (WorkspaceQuotasClientGetResponse, error) {
	var err error
	const operationName = "WorkspaceQuotasClient.Get"
	ctx = context.WithValue(ctx, runtime.CtxAPINameKey{}, operationName)
	ctx, endSpan := runtime.StartSpan(ctx, operationName, client.internal.Tracer(), nil)
	defer func() { endSpan(err) }()
	req, err := client.getCreateRequest(ctx, resourceGroupName, playwrightWorkspaceName, quotaName, options)
	if err != nil {
		return WorkspaceQuotasClientGetResponse{}, err
	}
	httpResp, err := client.internal.Pipeline().Do(req)
	if err != nil {
		return WorkspaceQuotasClientGetResponse{}, err
	}
	if !runtime.HasStatusCode(httpResp, http.StatusOK) {
		err = runtime.NewResponseError(httpResp)
		return WorkspaceQuotasClientGetResponse{}, err
	}
	resp, err := client.getHandleResponse(httpResp)
	return resp, err
}

// getCreateRequest creates the Get request.
func (client *WorkspaceQuotasClient) getCreateRequest(ctx context.Context, resourceGroupName string, playwrightWorkspaceName string, quotaName QuotaName, _ *WorkspaceQuotasClientGetOptions) (*policy.Request, error) {
	urlPath := "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.LoadTestService/playwrightWorkspaces/{playwrightWorkspaceName}/quotas/{quotaName}"
	if client.subscriptionID == "" {
		return nil, errors.New("parameter client.subscriptionID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{subscriptionId}", url.PathEscape(client.subscriptionID))
	if resourceGroupName == "" {
		return nil, errors.New("parameter resourceGroupName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{resourceGroupName}", url.PathEscape(resourceGroupName))
	if playwrightWorkspaceName == "" {
		return nil, errors.New("parameter playwrightWorkspaceName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{playwrightWorkspaceName}", url.PathEscape(playwrightWorkspaceName))
	if quotaName == "" {
		return nil, errors.New("parameter quotaName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{quotaName}", url.PathEscape(string(quotaName)))
	req, err := runtime.NewRequest(ctx, http.MethodGet, runtime.JoinPaths(client.internal.Endpoint(), urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("api-version", "2025-07-01-preview")
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header["Accept"] = []string{"application/json"}
	return req, nil
}

// getHandleResponse handles the Get response.
func (client *WorkspaceQuotasClient) getHandleResponse(resp *http.Response) (WorkspaceQuotasClientGetResponse, error) {
	result := WorkspaceQuotasClientGetResponse{}
	if err := runtime.UnmarshalAsJSON(resp, &result.WorkspaceQuota); err != nil {
		return WorkspaceQuotasClientGetResponse{}, err
	}
	return result, nil
}

// NewListByPlaywrightWorkspacePager - List quota resources for a given Playwright workspace resource.
//
// Generated from API version 2025-07-01-preview
//   - resourceGroupName - The name of the resource group. The name is case insensitive.
//   - playwrightWorkspaceName - The name of the PlaywrightWorkspace
//   - options - WorkspaceQuotasClientListByPlaywrightWorkspaceOptions contains the optional parameters for the WorkspaceQuotasClient.NewListByPlaywrightWorkspacePager
//     method.
func (client *WorkspaceQuotasClient) NewListByPlaywrightWorkspacePager(resourceGroupName string, playwrightWorkspaceName string, options *WorkspaceQuotasClientListByPlaywrightWorkspaceOptions) *runtime.Pager[WorkspaceQuotasClientListByPlaywrightWorkspaceResponse] {
	return runtime.NewPager(runtime.PagingHandler[WorkspaceQuotasClientListByPlaywrightWorkspaceResponse]{
		More: func(page WorkspaceQuotasClientListByPlaywrightWorkspaceResponse) bool {
			return page.NextLink != nil && len(*page.NextLink) > 0
		},
		Fetcher: func(ctx context.Context, page *WorkspaceQuotasClientListByPlaywrightWorkspaceResponse) (WorkspaceQuotasClientListByPlaywrightWorkspaceResponse, error) {
			ctx = context.WithValue(ctx, runtime.CtxAPINameKey{}, "WorkspaceQuotasClient.NewListByPlaywrightWorkspacePager")
			nextLink := ""
			if page != nil {
				nextLink = *page.NextLink
			}
			resp, err := runtime.FetcherForNextLink(ctx, client.internal.Pipeline(), nextLink, func(ctx context.Context) (*policy.Request, error) {
				return client.listByPlaywrightWorkspaceCreateRequest(ctx, resourceGroupName, playwrightWorkspaceName, options)
			}, nil)
			if err != nil {
				return WorkspaceQuotasClientListByPlaywrightWorkspaceResponse{}, err
			}
			return client.listByPlaywrightWorkspaceHandleResponse(resp)
		},
		Tracer: client.internal.Tracer(),
	})
}

// listByPlaywrightWorkspaceCreateRequest creates the ListByPlaywrightWorkspace request.
func (client *WorkspaceQuotasClient) listByPlaywrightWorkspaceCreateRequest(ctx context.Context, resourceGroupName string, playwrightWorkspaceName string, _ *WorkspaceQuotasClientListByPlaywrightWorkspaceOptions) (*policy.Request, error) {
	urlPath := "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.LoadTestService/playwrightWorkspaces/{playwrightWorkspaceName}/quotas"
	if client.subscriptionID == "" {
		return nil, errors.New("parameter client.subscriptionID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{subscriptionId}", url.PathEscape(client.subscriptionID))
	if resourceGroupName == "" {
		return nil, errors.New("parameter resourceGroupName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{resourceGroupName}", url.PathEscape(resourceGroupName))
	if playwrightWorkspaceName == "" {
		return nil, errors.New("parameter playwrightWorkspaceName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{playwrightWorkspaceName}", url.PathEscape(playwrightWorkspaceName))
	req, err := runtime.NewRequest(ctx, http.MethodGet, runtime.JoinPaths(client.internal.Endpoint(), urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("api-version", "2025-07-01-preview")
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header["Accept"] = []string{"application/json"}
	return req, nil
}

// listByPlaywrightWorkspaceHandleResponse handles the ListByPlaywrightWorkspace response.
func (client *WorkspaceQuotasClient) listByPlaywrightWorkspaceHandleResponse(resp *http.Response) (WorkspaceQuotasClientListByPlaywrightWorkspaceResponse, error) {
	result := WorkspaceQuotasClientListByPlaywrightWorkspaceResponse{}
	if err := runtime.UnmarshalAsJSON(resp, &result.WorkspaceQuotaListResult); err != nil {
		return WorkspaceQuotasClientListByPlaywrightWorkspaceResponse{}, err
	}
	return result, nil
}
