// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) Go Code Generator. DO NOT EDIT.

package armpostgresql

import (
	"context"
	"errors"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/arm"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/policy"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/runtime"
	"net/http"
	"net/url"
	"strings"
)

// BackupsLongTermRetentionClient contains the methods for the BackupsLongTermRetention group.
// Don't use this type directly, use NewBackupsLongTermRetentionClient() instead.
type BackupsLongTermRetentionClient struct {
	internal       *arm.Client
	subscriptionID string
}

// NewBackupsLongTermRetentionClient creates a new instance of BackupsLongTermRetentionClient with the specified values.
//   - subscriptionID - The ID of the target subscription. The value must be an UUID.
//   - credential - used to authorize requests. Usually a credential from azidentity.
//   - options - Contains optional client configuration. Pass nil to accept the default values.
func NewBackupsLongTermRetentionClient(subscriptionID string, credential azcore.TokenCredential, options *arm.ClientOptions) (*BackupsLongTermRetentionClient, error) {
	cl, err := arm.NewClient(moduleName, moduleVersion, credential, options)
	if err != nil {
		return nil, err
	}
	client := &BackupsLongTermRetentionClient{
		subscriptionID: subscriptionID,
		internal:       cl,
	}
	return client, nil
}

// CheckPrerequisites - Performs all checks required for a long term retention backup operation to succeed.
// If the operation fails it returns an *azcore.ResponseError type.
//
// Generated from API version 2025-08-01
//   - resourceGroupName - The name of the resource group. The name is case insensitive.
//   - serverName - The name of the server.
//   - parameters - Request body for operation
//   - options - BackupsLongTermRetentionClientCheckPrerequisitesOptions contains the optional parameters for the BackupsLongTermRetentionClient.CheckPrerequisites
//     method.
func (client *BackupsLongTermRetentionClient) CheckPrerequisites(ctx context.Context, resourceGroupName string, serverName string, parameters LtrPreBackupRequest, options *BackupsLongTermRetentionClientCheckPrerequisitesOptions) (BackupsLongTermRetentionClientCheckPrerequisitesResponse, error) {
	var err error
	const operationName = "BackupsLongTermRetentionClient.CheckPrerequisites"
	ctx = context.WithValue(ctx, runtime.CtxAPINameKey{}, operationName)
	ctx, endSpan := runtime.StartSpan(ctx, operationName, client.internal.Tracer(), nil)
	defer func() { endSpan(err) }()
	req, err := client.checkPrerequisitesCreateRequest(ctx, resourceGroupName, serverName, parameters, options)
	if err != nil {
		return BackupsLongTermRetentionClientCheckPrerequisitesResponse{}, err
	}
	httpResp, err := client.internal.Pipeline().Do(req)
	if err != nil {
		return BackupsLongTermRetentionClientCheckPrerequisitesResponse{}, err
	}
	if !runtime.HasStatusCode(httpResp, http.StatusOK) {
		err = runtime.NewResponseError(httpResp)
		return BackupsLongTermRetentionClientCheckPrerequisitesResponse{}, err
	}
	resp, err := client.checkPrerequisitesHandleResponse(httpResp)
	return resp, err
}

// checkPrerequisitesCreateRequest creates the CheckPrerequisites request.
func (client *BackupsLongTermRetentionClient) checkPrerequisitesCreateRequest(ctx context.Context, resourceGroupName string, serverName string, parameters LtrPreBackupRequest, _ *BackupsLongTermRetentionClientCheckPrerequisitesOptions) (*policy.Request, error) {
	urlPath := "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DBforPostgreSQL/flexibleServers/{serverName}/ltrPreBackup"
	if client.subscriptionID == "" {
		return nil, errors.New("parameter client.subscriptionID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{subscriptionId}", url.PathEscape(client.subscriptionID))
	if resourceGroupName == "" {
		return nil, errors.New("parameter resourceGroupName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{resourceGroupName}", url.PathEscape(resourceGroupName))
	if serverName == "" {
		return nil, errors.New("parameter serverName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{serverName}", url.PathEscape(serverName))
	req, err := runtime.NewRequest(ctx, http.MethodPost, runtime.JoinPaths(client.internal.Endpoint(), urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("api-version", "2025-08-01")
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header["Accept"] = []string{"application/json"}
	req.Raw().Header["Content-Type"] = []string{"application/json"}
	if err := runtime.MarshalAsJSON(req, parameters); err != nil {
		return nil, err
	}
	return req, nil
}

// checkPrerequisitesHandleResponse handles the CheckPrerequisites response.
func (client *BackupsLongTermRetentionClient) checkPrerequisitesHandleResponse(resp *http.Response) (BackupsLongTermRetentionClientCheckPrerequisitesResponse, error) {
	result := BackupsLongTermRetentionClientCheckPrerequisitesResponse{}
	if val := resp.Header.Get("x-ms-request-id"); val != "" {
		result.XMSRequestID = &val
	}
	if err := runtime.UnmarshalAsJSON(resp, &result.LtrPreBackupResponse); err != nil {
		return BackupsLongTermRetentionClientCheckPrerequisitesResponse{}, err
	}
	return result, nil
}

// Get - Gets the results of a long retention backup operation for a server.
// If the operation fails it returns an *azcore.ResponseError type.
//
// Generated from API version 2025-08-01
//   - resourceGroupName - The name of the resource group. The name is case insensitive.
//   - serverName - The name of the server.
//   - backupName - The name of the backup.
//   - options - BackupsLongTermRetentionClientGetOptions contains the optional parameters for the BackupsLongTermRetentionClient.Get
//     method.
func (client *BackupsLongTermRetentionClient) Get(ctx context.Context, resourceGroupName string, serverName string, backupName string, options *BackupsLongTermRetentionClientGetOptions) (BackupsLongTermRetentionClientGetResponse, error) {
	var err error
	const operationName = "BackupsLongTermRetentionClient.Get"
	ctx = context.WithValue(ctx, runtime.CtxAPINameKey{}, operationName)
	ctx, endSpan := runtime.StartSpan(ctx, operationName, client.internal.Tracer(), nil)
	defer func() { endSpan(err) }()
	req, err := client.getCreateRequest(ctx, resourceGroupName, serverName, backupName, options)
	if err != nil {
		return BackupsLongTermRetentionClientGetResponse{}, err
	}
	httpResp, err := client.internal.Pipeline().Do(req)
	if err != nil {
		return BackupsLongTermRetentionClientGetResponse{}, err
	}
	if !runtime.HasStatusCode(httpResp, http.StatusOK) {
		err = runtime.NewResponseError(httpResp)
		return BackupsLongTermRetentionClientGetResponse{}, err
	}
	resp, err := client.getHandleResponse(httpResp)
	return resp, err
}

// getCreateRequest creates the Get request.
func (client *BackupsLongTermRetentionClient) getCreateRequest(ctx context.Context, resourceGroupName string, serverName string, backupName string, _ *BackupsLongTermRetentionClientGetOptions) (*policy.Request, error) {
	urlPath := "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DBforPostgreSQL/flexibleServers/{serverName}/ltrBackupOperations/{backupName}"
	if client.subscriptionID == "" {
		return nil, errors.New("parameter client.subscriptionID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{subscriptionId}", url.PathEscape(client.subscriptionID))
	if resourceGroupName == "" {
		return nil, errors.New("parameter resourceGroupName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{resourceGroupName}", url.PathEscape(resourceGroupName))
	if serverName == "" {
		return nil, errors.New("parameter serverName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{serverName}", url.PathEscape(serverName))
	if backupName == "" {
		return nil, errors.New("parameter backupName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{backupName}", url.PathEscape(backupName))
	req, err := runtime.NewRequest(ctx, http.MethodGet, runtime.JoinPaths(client.internal.Endpoint(), urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("api-version", "2025-08-01")
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header["Accept"] = []string{"application/json"}
	return req, nil
}

// getHandleResponse handles the Get response.
func (client *BackupsLongTermRetentionClient) getHandleResponse(resp *http.Response) (BackupsLongTermRetentionClientGetResponse, error) {
	result := BackupsLongTermRetentionClientGetResponse{}
	if err := runtime.UnmarshalAsJSON(resp, &result.BackupsLongTermRetentionOperation); err != nil {
		return BackupsLongTermRetentionClientGetResponse{}, err
	}
	return result, nil
}

// NewListByServerPager - Lists the results of the long term retention backup operations for a server.
//
// Generated from API version 2025-08-01
//   - resourceGroupName - The name of the resource group. The name is case insensitive.
//   - serverName - The name of the server.
//   - options - BackupsLongTermRetentionClientListByServerOptions contains the optional parameters for the BackupsLongTermRetentionClient.NewListByServerPager
//     method.
func (client *BackupsLongTermRetentionClient) NewListByServerPager(resourceGroupName string, serverName string, options *BackupsLongTermRetentionClientListByServerOptions) *runtime.Pager[BackupsLongTermRetentionClientListByServerResponse] {
	return runtime.NewPager(runtime.PagingHandler[BackupsLongTermRetentionClientListByServerResponse]{
		More: func(page BackupsLongTermRetentionClientListByServerResponse) bool {
			return page.NextLink != nil && len(*page.NextLink) > 0
		},
		Fetcher: func(ctx context.Context, page *BackupsLongTermRetentionClientListByServerResponse) (BackupsLongTermRetentionClientListByServerResponse, error) {
			ctx = context.WithValue(ctx, runtime.CtxAPINameKey{}, "BackupsLongTermRetentionClient.NewListByServerPager")
			nextLink := ""
			if page != nil {
				nextLink = *page.NextLink
			}
			resp, err := runtime.FetcherForNextLink(ctx, client.internal.Pipeline(), nextLink, func(ctx context.Context) (*policy.Request, error) {
				return client.listByServerCreateRequest(ctx, resourceGroupName, serverName, options)
			}, nil)
			if err != nil {
				return BackupsLongTermRetentionClientListByServerResponse{}, err
			}
			return client.listByServerHandleResponse(resp)
		},
		Tracer: client.internal.Tracer(),
	})
}

// listByServerCreateRequest creates the ListByServer request.
func (client *BackupsLongTermRetentionClient) listByServerCreateRequest(ctx context.Context, resourceGroupName string, serverName string, _ *BackupsLongTermRetentionClientListByServerOptions) (*policy.Request, error) {
	urlPath := "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DBforPostgreSQL/flexibleServers/{serverName}/ltrBackupOperations"
	if client.subscriptionID == "" {
		return nil, errors.New("parameter client.subscriptionID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{subscriptionId}", url.PathEscape(client.subscriptionID))
	if resourceGroupName == "" {
		return nil, errors.New("parameter resourceGroupName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{resourceGroupName}", url.PathEscape(resourceGroupName))
	if serverName == "" {
		return nil, errors.New("parameter serverName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{serverName}", url.PathEscape(serverName))
	req, err := runtime.NewRequest(ctx, http.MethodGet, runtime.JoinPaths(client.internal.Endpoint(), urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("api-version", "2025-08-01")
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header["Accept"] = []string{"application/json"}
	return req, nil
}

// listByServerHandleResponse handles the ListByServer response.
func (client *BackupsLongTermRetentionClient) listByServerHandleResponse(resp *http.Response) (BackupsLongTermRetentionClientListByServerResponse, error) {
	result := BackupsLongTermRetentionClientListByServerResponse{}
	if err := runtime.UnmarshalAsJSON(resp, &result.LtrServerBackupOperationList); err != nil {
		return BackupsLongTermRetentionClientListByServerResponse{}, err
	}
	return result, nil
}

// BeginStart - Initiates a long term retention backup.
// If the operation fails it returns an *azcore.ResponseError type.
//
// Generated from API version 2025-08-01
//   - resourceGroupName - The name of the resource group. The name is case insensitive.
//   - serverName - The name of the server.
//   - parameters - Request body for operation
//   - options - BackupsLongTermRetentionClientBeginStartOptions contains the optional parameters for the BackupsLongTermRetentionClient.BeginStart
//     method.
func (client *BackupsLongTermRetentionClient) BeginStart(ctx context.Context, resourceGroupName string, serverName string, parameters BackupsLongTermRetentionRequest, options *BackupsLongTermRetentionClientBeginStartOptions) (*runtime.Poller[BackupsLongTermRetentionClientStartResponse], error) {
	if options == nil || options.ResumeToken == "" {
		resp, err := client.start(ctx, resourceGroupName, serverName, parameters, options)
		if err != nil {
			return nil, err
		}
		poller, err := runtime.NewPoller(resp, client.internal.Pipeline(), &runtime.NewPollerOptions[BackupsLongTermRetentionClientStartResponse]{
			Tracer: client.internal.Tracer(),
		})
		return poller, err
	} else {
		return runtime.NewPollerFromResumeToken(options.ResumeToken, client.internal.Pipeline(), &runtime.NewPollerFromResumeTokenOptions[BackupsLongTermRetentionClientStartResponse]{
			Tracer: client.internal.Tracer(),
		})
	}
}

// Start - Initiates a long term retention backup.
// If the operation fails it returns an *azcore.ResponseError type.
//
// Generated from API version 2025-08-01
func (client *BackupsLongTermRetentionClient) start(ctx context.Context, resourceGroupName string, serverName string, parameters BackupsLongTermRetentionRequest, options *BackupsLongTermRetentionClientBeginStartOptions) (*http.Response, error) {
	var err error
	const operationName = "BackupsLongTermRetentionClient.BeginStart"
	ctx = context.WithValue(ctx, runtime.CtxAPINameKey{}, operationName)
	ctx, endSpan := runtime.StartSpan(ctx, operationName, client.internal.Tracer(), nil)
	defer func() { endSpan(err) }()
	req, err := client.startCreateRequest(ctx, resourceGroupName, serverName, parameters, options)
	if err != nil {
		return nil, err
	}
	httpResp, err := client.internal.Pipeline().Do(req)
	if err != nil {
		return nil, err
	}
	if !runtime.HasStatusCode(httpResp, http.StatusOK, http.StatusAccepted) {
		err = runtime.NewResponseError(httpResp)
		return nil, err
	}
	return httpResp, nil
}

// startCreateRequest creates the Start request.
func (client *BackupsLongTermRetentionClient) startCreateRequest(ctx context.Context, resourceGroupName string, serverName string, parameters BackupsLongTermRetentionRequest, _ *BackupsLongTermRetentionClientBeginStartOptions) (*policy.Request, error) {
	urlPath := "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DBforPostgreSQL/flexibleServers/{serverName}/startLtrBackup"
	if client.subscriptionID == "" {
		return nil, errors.New("parameter client.subscriptionID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{subscriptionId}", url.PathEscape(client.subscriptionID))
	if resourceGroupName == "" {
		return nil, errors.New("parameter resourceGroupName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{resourceGroupName}", url.PathEscape(resourceGroupName))
	if serverName == "" {
		return nil, errors.New("parameter serverName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{serverName}", url.PathEscape(serverName))
	req, err := runtime.NewRequest(ctx, http.MethodPost, runtime.JoinPaths(client.internal.Endpoint(), urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("api-version", "2025-08-01")
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header["Accept"] = []string{"application/json"}
	req.Raw().Header["Content-Type"] = []string{"application/json"}
	if err := runtime.MarshalAsJSON(req, parameters); err != nil {
		return nil, err
	}
	return req, nil
}
