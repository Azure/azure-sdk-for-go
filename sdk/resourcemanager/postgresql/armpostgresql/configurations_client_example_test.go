// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) Go Code Generator. DO NOT EDIT.

package armpostgresql_test

import (
	"context"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/to"
	"github.com/Azure/azure-sdk-for-go/sdk/azidentity"
	"github.com/Azure/azure-sdk-for-go/sdk/resourcemanager/postgresql/armpostgresql/v2"
	"log"
)

// Generated from example definition: 2025-08-01/ConfigurationsGet.json
func ExampleConfigurationsClient_Get() {
	cred, err := azidentity.NewDefaultAzureCredential(nil)
	if err != nil {
		log.Fatalf("failed to obtain a credential: %v", err)
	}
	ctx := context.Background()
	clientFactory, err := armpostgresql.NewClientFactory("ffffffff-ffff-ffff-ffff-ffffffffffff", cred, nil)
	if err != nil {
		log.Fatalf("failed to create client: %v", err)
	}
	res, err := clientFactory.NewConfigurationsClient().Get(ctx, "exampleresourcegroup", "exampleserver", "array_nulls", nil)
	if err != nil {
		log.Fatalf("failed to finish the request: %v", err)
	}
	// You could use response here. We use blank identifier for just demo purposes.
	_ = res
	// If the HTTP response code is 200 as defined in example definition, your response structure would look as follows. Please pay attention that all the values in the output are fake values for just demo purposes.
	// res = armpostgresql.ConfigurationsClientGetResponse{
	// 	Configuration: &armpostgresql.Configuration{
	// 		Name: to.Ptr("array_nulls"),
	// 		Type: to.Ptr("Microsoft.DBforPostgreSQL/flexibleServers/configurations"),
	// 		ID: to.Ptr("/subscriptions/ffffffff-ffff-ffff-ffff-ffffffffffff/resourceGroups/exampleresourcegroup/providers/Microsoft.DBforPostgreSQL/flexibleServers/exampleserver/configurations/array_nulls"),
	// 		Properties: &armpostgresql.ConfigurationProperties{
	// 			Description: to.Ptr("Enables input of NULL (case insensitive) to be considered as NULL value rather than the literal String 'NULL'."),
	// 			AllowedValues: to.Ptr("on,off"),
	// 			DataType: to.Ptr(armpostgresql.ConfigurationDataTypeBoolean),
	// 			DefaultValue: to.Ptr("on"),
	// 			DocumentationLink: to.Ptr("https://www.postgresql.org/docs/13/runtime-config-compatible.html#GUC-ARRAY-NULLS"),
	// 			IsConfigPendingRestart: to.Ptr(false),
	// 			IsDynamicConfig: to.Ptr(true),
	// 			IsReadOnly: to.Ptr(false),
	// 			Source: to.Ptr("system-default"),
	// 			Value: to.Ptr("on"),
	// 		},
	// 	},
	// }
}

// Generated from example definition: 2025-08-01/ConfigurationsListByServer.json
func ExampleConfigurationsClient_NewListByServerPager() {
	cred, err := azidentity.NewDefaultAzureCredential(nil)
	if err != nil {
		log.Fatalf("failed to obtain a credential: %v", err)
	}
	ctx := context.Background()
	clientFactory, err := armpostgresql.NewClientFactory("ffffffff-ffff-ffff-ffff-ffffffffffff", cred, nil)
	if err != nil {
		log.Fatalf("failed to create client: %v", err)
	}
	pager := clientFactory.NewConfigurationsClient().NewListByServerPager("exampleresourcegroup", "exampleserver", nil)
	for pager.More() {
		page, err := pager.NextPage(ctx)
		if err != nil {
			log.Fatalf("failed to advance page: %v", err)
		}
		for _, v := range page.Value {
			// You could use page here. We use blank identifier for just demo purposes.
			_ = v
		}
		// If the HTTP response code is 200 as defined in example definition, your page structure would look as follows. Please pay attention that all the values in the output are fake values for just demo purposes.
		// page = armpostgresql.ConfigurationsClientListByServerResponse{
		// 	ConfigurationList: armpostgresql.ConfigurationList{
		// 		NextLink: to.Ptr("https://management.azure.com/subscriptions/ffffffff-ffff-ffff-ffff-ffffffffffff//resourceGroups/exampleresourcegroup/providers/Microsoft.DBforPostgreSQL/flexibleServers/exampleserver/configurations?api-version=2025-06-01-preview&$skiptoken=skiptoken"),
		// 		Value: []*armpostgresql.Configuration{
		// 			{
		// 				Name: to.Ptr("allow_in_place_tablespaces"),
		// 				Type: to.Ptr("Microsoft.DBforPostgreSQL/flexibleServers/configurations"),
		// 				ID: to.Ptr("/subscriptions/ffffffff-ffff-ffff-ffff-ffffffffffff/resourceGroups/exampleresourcegroup/providers/Microsoft.DBforPostgreSQL/flexibleServers/exampleserver/configurations/allow_in_place_tablespaces"),
		// 				Properties: &armpostgresql.ConfigurationProperties{
		// 					Description: to.Ptr("Allows tablespaces directly inside pg_tblspc, for testing."),
		// 					AllowedValues: to.Ptr("on,off"),
		// 					DataType: to.Ptr(armpostgresql.ConfigurationDataTypeBoolean),
		// 					DefaultValue: to.Ptr("off"),
		// 					DocumentationLink: to.Ptr("https://www.postgresql.org/docs/13/runtime-config-developer.html#GUC-ALLOW-IN-PLACE-TABLESPACES"),
		// 					IsConfigPendingRestart: to.Ptr(false),
		// 					IsDynamicConfig: to.Ptr(true),
		// 					IsReadOnly: to.Ptr(true),
		// 					Source: to.Ptr("system-default"),
		// 					Value: to.Ptr("off"),
		// 				},
		// 			},
		// 			{
		// 				Name: to.Ptr("allow_system_table_mods"),
		// 				Type: to.Ptr("Microsoft.DBforPostgreSQL/flexibleServers/configurations"),
		// 				ID: to.Ptr("/subscriptions/ffffffff-ffff-ffff-ffff-ffffffffffff/resourceGroups/exampleresourcegroup/providers/Microsoft.DBforPostgreSQL/flexibleServers/exampleserver/configurations/allow_system_table_mods"),
		// 				Properties: &armpostgresql.ConfigurationProperties{
		// 					Description: to.Ptr("Allows modifications of the structure of system tables."),
		// 					AllowedValues: to.Ptr("on,off"),
		// 					DataType: to.Ptr(armpostgresql.ConfigurationDataTypeBoolean),
		// 					DefaultValue: to.Ptr("off"),
		// 					DocumentationLink: to.Ptr("https://www.postgresql.org/docs/13/runtime-config-developer.html#GUC-ALLOW-SYSTEM-TABLE-MODS"),
		// 					IsConfigPendingRestart: to.Ptr(false),
		// 					IsDynamicConfig: to.Ptr(true),
		// 					IsReadOnly: to.Ptr(true),
		// 					Source: to.Ptr("system-default"),
		// 					Value: to.Ptr("off"),
		// 				},
		// 			},
		// 			{
		// 				Name: to.Ptr("application_name"),
		// 				Type: to.Ptr("Microsoft.DBforPostgreSQL/flexibleServers/configurations"),
		// 				ID: to.Ptr("/subscriptions/ffffffff-ffff-ffff-ffff-ffffffffffff/resourceGroups/exampleresourcegroup/providers/Microsoft.DBforPostgreSQL/flexibleServers/exampleserver/configurations/application_name"),
		// 				Properties: &armpostgresql.ConfigurationProperties{
		// 					Description: to.Ptr("Sets the application name to be reported in statistics and logs."),
		// 					AllowedValues: to.Ptr("[A-Za-z0-9._-]*"),
		// 					DataType: to.Ptr(armpostgresql.ConfigurationDataTypeString),
		// 					DefaultValue: to.Ptr(""),
		// 					DocumentationLink: to.Ptr("https://www.postgresql.org/docs/13/libpq-connect.html#LIBPQ-CONNECT-APPLICATION-NAME"),
		// 					IsConfigPendingRestart: to.Ptr(false),
		// 					IsDynamicConfig: to.Ptr(true),
		// 					IsReadOnly: to.Ptr(false),
		// 					Source: to.Ptr("system-default"),
		// 					Value: to.Ptr(""),
		// 				},
		// 			},
		// 			{
		// 				Name: to.Ptr("archive_cleanup_command"),
		// 				Type: to.Ptr("Microsoft.DBforPostgreSQL/flexibleServers/configurations"),
		// 				ID: to.Ptr("/subscriptions/ffffffff-ffff-ffff-ffff-ffffffffffff/resourceGroups/exampleresourcegroup/providers/Microsoft.DBforPostgreSQL/flexibleServers/exampleserver/configurations/archive_cleanup_command"),
		// 				Properties: &armpostgresql.ConfigurationProperties{
		// 					Description: to.Ptr("Sets the shell command that will be executed at every restart point."),
		// 					AllowedValues: to.Ptr(".*"),
		// 					DataType: to.Ptr(armpostgresql.ConfigurationDataTypeString),
		// 					DefaultValue: to.Ptr(""),
		// 					DocumentationLink: to.Ptr("https://www.postgresql.org/docs/13/runtime-config-wal.html#GUC-ARCHIVE-CLEANUP-COMMAND"),
		// 					IsConfigPendingRestart: to.Ptr(false),
		// 					IsDynamicConfig: to.Ptr(true),
		// 					IsReadOnly: to.Ptr(true),
		// 					Source: to.Ptr("system-default"),
		// 					Value: to.Ptr(""),
		// 				},
		// 			},
		// 			{
		// 				Name: to.Ptr("archive_command"),
		// 				Type: to.Ptr("Microsoft.DBforPostgreSQL/flexibleServers/configurations"),
		// 				ID: to.Ptr("/subscriptions/ffffffff-ffff-ffff-ffff-ffffffffffff/resourceGroups/exampleresourcegroup/providers/Microsoft.DBforPostgreSQL/flexibleServers/exampleserver/configurations/archive_command"),
		// 				Properties: &armpostgresql.ConfigurationProperties{
		// 					Description: to.Ptr("Sets the shell command that will be called to archive a WAL file."),
		// 					AllowedValues: to.Ptr(".*"),
		// 					DataType: to.Ptr(armpostgresql.ConfigurationDataTypeString),
		// 					DefaultValue: to.Ptr(""),
		// 					DocumentationLink: to.Ptr("https://www.postgresql.org/docs/13/runtime-config-wal.html#GUC-ARCHIVE-COMMAND"),
		// 					IsConfigPendingRestart: to.Ptr(false),
		// 					IsDynamicConfig: to.Ptr(true),
		// 					IsReadOnly: to.Ptr(true),
		// 					Source: to.Ptr("user-override"),
		// 					Value: to.Ptr("BlobLogUpload.sh %f %p"),
		// 				},
		// 			},
		// 			{
		// 				Name: to.Ptr("archive_mode"),
		// 				Type: to.Ptr("Microsoft.DBforPostgreSQL/flexibleServers/configurations"),
		// 				ID: to.Ptr("/subscriptions/ffffffff-ffff-ffff-ffff-ffffffffffff/resourceGroups/exampleresourcegroup/providers/Microsoft.DBforPostgreSQL/flexibleServers/exampleserver/configurations/archive_mode"),
		// 				Properties: &armpostgresql.ConfigurationProperties{
		// 					Description: to.Ptr("Allows archiving of WAL files using archive_command."),
		// 					AllowedValues: to.Ptr("always,on,off"),
		// 					DataType: to.Ptr(armpostgresql.ConfigurationDataTypeEnumeration),
		// 					DefaultValue: to.Ptr("off"),
		// 					DocumentationLink: to.Ptr("https://www.postgresql.org/docs/13/runtime-config-wal.html#GUC-ARCHIVE-MODE"),
		// 					IsConfigPendingRestart: to.Ptr(false),
		// 					IsDynamicConfig: to.Ptr(false),
		// 					IsReadOnly: to.Ptr(true),
		// 					Source: to.Ptr("user-override"),
		// 					Value: to.Ptr("always"),
		// 				},
		// 			},
		// 			{
		// 				Name: to.Ptr("archive_timeout"),
		// 				Type: to.Ptr("Microsoft.DBforPostgreSQL/flexibleServers/configurations"),
		// 				ID: to.Ptr("/subscriptions/ffffffff-ffff-ffff-ffff-ffffffffffff/resourceGroups/exampleresourcegroup/providers/Microsoft.DBforPostgreSQL/flexibleServers/exampleserver/configurations/archive_timeout"),
		// 				Properties: &armpostgresql.ConfigurationProperties{
		// 					Description: to.Ptr("Forces a switch to the next WAL file if a new file has not been started within N seconds."),
		// 					AllowedValues: to.Ptr("0-1073741823"),
		// 					DataType: to.Ptr(armpostgresql.ConfigurationDataTypeInteger),
		// 					DefaultValue: to.Ptr("300"),
		// 					DocumentationLink: to.Ptr("https://www.postgresql.org/docs/13/runtime-config-wal.html#GUC-ARCHIVE-TIMEOUT"),
		// 					IsConfigPendingRestart: to.Ptr(false),
		// 					IsDynamicConfig: to.Ptr(true),
		// 					IsReadOnly: to.Ptr(true),
		// 					Source: to.Ptr("system-default"),
		// 					Unit: to.Ptr("seconds"),
		// 					Value: to.Ptr("300"),
		// 				},
		// 			},
		// 			{
		// 				Name: to.Ptr("array_nulls"),
		// 				Type: to.Ptr("Microsoft.DBforPostgreSQL/flexibleServers/configurations"),
		// 				ID: to.Ptr("/subscriptions/ffffffff-ffff-ffff-ffff-ffffffffffff/resourceGroups/exampleresourcegroup/providers/Microsoft.DBforPostgreSQL/flexibleServers/exampleserver/configurations/array_nulls"),
		// 				Properties: &armpostgresql.ConfigurationProperties{
		// 					Description: to.Ptr("Enables input of NULL (case insensitive) to be considered as NULL value rather than the literal String 'NULL'."),
		// 					AllowedValues: to.Ptr("on,off"),
		// 					DataType: to.Ptr(armpostgresql.ConfigurationDataTypeBoolean),
		// 					DefaultValue: to.Ptr("on"),
		// 					DocumentationLink: to.Ptr("https://www.postgresql.org/docs/13/runtime-config-compatible.html#GUC-ARRAY-NULLS"),
		// 					IsConfigPendingRestart: to.Ptr(false),
		// 					IsDynamicConfig: to.Ptr(true),
		// 					IsReadOnly: to.Ptr(false),
		// 					Source: to.Ptr("system-default"),
		// 					Value: to.Ptr("on"),
		// 				},
		// 			},
		// 			{
		// 				Name: to.Ptr("authentication_timeout"),
		// 				Type: to.Ptr("Microsoft.DBforPostgreSQL/flexibleServers/configurations"),
		// 				ID: to.Ptr("/subscriptions/ffffffff-ffff-ffff-ffff-ffffffffffff/resourceGroups/exampleresourcegroup/providers/Microsoft.DBforPostgreSQL/flexibleServers/exampleserver/configurations/authentication_timeout"),
		// 				Properties: &armpostgresql.ConfigurationProperties{
		// 					Description: to.Ptr("Sets the maximum allowed time to complete client authentication."),
		// 					AllowedValues: to.Ptr("1-600"),
		// 					DataType: to.Ptr(armpostgresql.ConfigurationDataTypeInteger),
		// 					DefaultValue: to.Ptr("60"),
		// 					DocumentationLink: to.Ptr("https://www.postgresql.org/docs/13/runtime-config-connection.html#GUC-AUTHENTICATION-TIMEOUT"),
		// 					IsConfigPendingRestart: to.Ptr(false),
		// 					IsDynamicConfig: to.Ptr(true),
		// 					IsReadOnly: to.Ptr(true),
		// 					Source: to.Ptr("user-override"),
		// 					Unit: to.Ptr("seconds"),
		// 					Value: to.Ptr("30"),
		// 				},
		// 			},
		// 			{
		// 				Name: to.Ptr("auto_explain.log_analyze"),
		// 				Type: to.Ptr("Microsoft.DBforPostgreSQL/flexibleServers/configurations"),
		// 				ID: to.Ptr("/subscriptions/ffffffff-ffff-ffff-ffff-ffffffffffff/resourceGroups/exampleresourcegroup/providers/Microsoft.DBforPostgreSQL/flexibleServers/exampleserver/configurations/auto_explain.log_analyze"),
		// 				Properties: &armpostgresql.ConfigurationProperties{
		// 					Description: to.Ptr("Use EXPLAIN ANALYZE for plan logging."),
		// 					AllowedValues: to.Ptr("on,off"),
		// 					DataType: to.Ptr(armpostgresql.ConfigurationDataTypeBoolean),
		// 					DefaultValue: to.Ptr("off"),
		// 					DocumentationLink: to.Ptr("https://www.postgresql.org/docs/13/auto-explain.html#id-1.11.7.13.5.3.2.1.3"),
		// 					IsConfigPendingRestart: to.Ptr(false),
		// 					IsDynamicConfig: to.Ptr(true),
		// 					IsReadOnly: to.Ptr(false),
		// 					Source: to.Ptr("system-default"),
		// 					Value: to.Ptr("off"),
		// 				},
		// 			},
		// 			{
		// 				Name: to.Ptr("auto_explain.log_buffers"),
		// 				Type: to.Ptr("Microsoft.DBforPostgreSQL/flexibleServers/configurations"),
		// 				ID: to.Ptr("/subscriptions/ffffffff-ffff-ffff-ffff-ffffffffffff/resourceGroups/exampleresourcegroup/providers/Microsoft.DBforPostgreSQL/flexibleServers/exampleserver/configurations/auto_explain.log_buffers"),
		// 				Properties: &armpostgresql.ConfigurationProperties{
		// 					Description: to.Ptr("Log buffers usage."),
		// 					AllowedValues: to.Ptr("on,off"),
		// 					DataType: to.Ptr(armpostgresql.ConfigurationDataTypeBoolean),
		// 					DefaultValue: to.Ptr("off"),
		// 					DocumentationLink: to.Ptr("https://www.postgresql.org/docs/13/auto-explain.html#id-1.11.7.13.5.3.3.1.3"),
		// 					IsConfigPendingRestart: to.Ptr(false),
		// 					IsDynamicConfig: to.Ptr(true),
		// 					IsReadOnly: to.Ptr(false),
		// 					Source: to.Ptr("system-default"),
		// 					Value: to.Ptr("off"),
		// 				},
		// 			},
		// 			{
		// 				Name: to.Ptr("auto_explain.log_format"),
		// 				Type: to.Ptr("Microsoft.DBforPostgreSQL/flexibleServers/configurations"),
		// 				ID: to.Ptr("/subscriptions/ffffffff-ffff-ffff-ffff-ffffffffffff/resourceGroups/exampleresourcegroup/providers/Microsoft.DBforPostgreSQL/flexibleServers/exampleserver/configurations/auto_explain.log_format"),
		// 				Properties: &armpostgresql.ConfigurationProperties{
		// 					Description: to.Ptr("EXPLAIN format to be used for plan logging."),
		// 					AllowedValues: to.Ptr("text,xml,json,yaml"),
		// 					DataType: to.Ptr(armpostgresql.ConfigurationDataTypeEnumeration),
		// 					DefaultValue: to.Ptr("text"),
		// 					DocumentationLink: to.Ptr("https://www.postgresql.org/docs/13/auto-explain.html#id-1.11.7.13.5.3.9.1.3"),
		// 					IsConfigPendingRestart: to.Ptr(false),
		// 					IsDynamicConfig: to.Ptr(true),
		// 					IsReadOnly: to.Ptr(false),
		// 					Source: to.Ptr("system-default"),
		// 					Value: to.Ptr("text"),
		// 				},
		// 			},
		// 			{
		// 				Name: to.Ptr("auto_explain.log_level"),
		// 				Type: to.Ptr("Microsoft.DBforPostgreSQL/flexibleServers/configurations"),
		// 				ID: to.Ptr("/subscriptions/ffffffff-ffff-ffff-ffff-ffffffffffff/resourceGroups/exampleresourcegroup/providers/Microsoft.DBforPostgreSQL/flexibleServers/exampleserver/configurations/auto_explain.log_level"),
		// 				Properties: &armpostgresql.ConfigurationProperties{
		// 					Description: to.Ptr("Log level for the plan."),
		// 					AllowedValues: to.Ptr("debug5,debug4,debug3,debug2,debug1,debug,info,notice,warning,log"),
		// 					DataType: to.Ptr(armpostgresql.ConfigurationDataTypeEnumeration),
		// 					DefaultValue: to.Ptr("log"),
		// 					DocumentationLink: to.Ptr("https://www.postgresql.org/docs/13/auto-explain.html#id-1.11.7.13.5.3.10.1.3"),
		// 					IsConfigPendingRestart: to.Ptr(false),
		// 					IsDynamicConfig: to.Ptr(true),
		// 					IsReadOnly: to.Ptr(false),
		// 					Source: to.Ptr("system-default"),
		// 					Value: to.Ptr("log"),
		// 				},
		// 			},
		// 			{
		// 				Name: to.Ptr("auto_explain.log_min_duration"),
		// 				Type: to.Ptr("Microsoft.DBforPostgreSQL/flexibleServers/configurations"),
		// 				ID: to.Ptr("/subscriptions/ffffffff-ffff-ffff-ffff-ffffffffffff/resourceGroups/exampleresourcegroup/providers/Microsoft.DBforPostgreSQL/flexibleServers/exampleserver/configurations/auto_explain.log_min_duration"),
		// 				Properties: &armpostgresql.ConfigurationProperties{
		// 					Description: to.Ptr("Sets the minimum execution time above which plans will be logged. Zero prints all plans. -1 turns this feature off."),
		// 					AllowedValues: to.Ptr("-1-2147483647"),
		// 					DataType: to.Ptr(armpostgresql.ConfigurationDataTypeInteger),
		// 					DefaultValue: to.Ptr("-1"),
		// 					DocumentationLink: to.Ptr("https://www.postgresql.org/docs/13/auto-explain.html#id-1.11.7.13.5.3.1.1.3"),
		// 					IsConfigPendingRestart: to.Ptr(false),
		// 					IsDynamicConfig: to.Ptr(true),
		// 					IsReadOnly: to.Ptr(false),
		// 					Source: to.Ptr("system-default"),
		// 					Unit: to.Ptr("milliseconds"),
		// 					Value: to.Ptr("-1"),
		// 				},
		// 			},
		// 			{
		// 				Name: to.Ptr("auto_explain.log_nested_statements"),
		// 				Type: to.Ptr("Microsoft.DBforPostgreSQL/flexibleServers/configurations"),
		// 				ID: to.Ptr("/subscriptions/ffffffff-ffff-ffff-ffff-ffffffffffff/resourceGroups/exampleresourcegroup/providers/Microsoft.DBforPostgreSQL/flexibleServers/exampleserver/configurations/auto_explain.log_nested_statements"),
		// 				Properties: &armpostgresql.ConfigurationProperties{
		// 					Description: to.Ptr("Log nested statements."),
		// 					AllowedValues: to.Ptr("on,off"),
		// 					DataType: to.Ptr(armpostgresql.ConfigurationDataTypeBoolean),
		// 					DefaultValue: to.Ptr("off"),
		// 					DocumentationLink: to.Ptr("https://www.postgresql.org/docs/13/auto-explain.html#id-1.11.7.13.5.3.11.1.3"),
		// 					IsConfigPendingRestart: to.Ptr(false),
		// 					IsDynamicConfig: to.Ptr(true),
		// 					IsReadOnly: to.Ptr(false),
		// 					Source: to.Ptr("system-default"),
		// 					Value: to.Ptr("off"),
		// 				},
		// 			},
		// 			{
		// 				Name: to.Ptr("auto_explain.log_settings"),
		// 				Type: to.Ptr("Microsoft.DBforPostgreSQL/flexibleServers/configurations"),
		// 				ID: to.Ptr("/subscriptions/ffffffff-ffff-ffff-ffff-ffffffffffff/resourceGroups/exampleresourcegroup/providers/Microsoft.DBforPostgreSQL/flexibleServers/exampleserver/configurations/auto_explain.log_settings"),
		// 				Properties: &armpostgresql.ConfigurationProperties{
		// 					Description: to.Ptr("Log modified configuration parameters affecting query planning."),
		// 					AllowedValues: to.Ptr("on,off"),
		// 					DataType: to.Ptr(armpostgresql.ConfigurationDataTypeBoolean),
		// 					DefaultValue: to.Ptr("off"),
		// 					DocumentationLink: to.Ptr("https://www.postgresql.org/docs/13/auto-explain.html#id-1.11.7.13.5.3.8.1.3"),
		// 					IsConfigPendingRestart: to.Ptr(false),
		// 					IsDynamicConfig: to.Ptr(true),
		// 					IsReadOnly: to.Ptr(false),
		// 					Source: to.Ptr("system-default"),
		// 					Value: to.Ptr("off"),
		// 				},
		// 			},
		// 			{
		// 				Name: to.Ptr("auto_explain.log_timing"),
		// 				Type: to.Ptr("Microsoft.DBforPostgreSQL/flexibleServers/configurations"),
		// 				ID: to.Ptr("/subscriptions/ffffffff-ffff-ffff-ffff-ffffffffffff/resourceGroups/exampleresourcegroup/providers/Microsoft.DBforPostgreSQL/flexibleServers/exampleserver/configurations/auto_explain.log_timing"),
		// 				Properties: &armpostgresql.ConfigurationProperties{
		// 					Description: to.Ptr("Collect timing data, not just row counts."),
		// 					AllowedValues: to.Ptr("on,off"),
		// 					DataType: to.Ptr(armpostgresql.ConfigurationDataTypeBoolean),
		// 					DefaultValue: to.Ptr("on"),
		// 					DocumentationLink: to.Ptr("https://www.postgresql.org/docs/13/auto-explain.html#id-1.11.7.13.5.3.5.1.3"),
		// 					IsConfigPendingRestart: to.Ptr(false),
		// 					IsDynamicConfig: to.Ptr(true),
		// 					IsReadOnly: to.Ptr(false),
		// 					Source: to.Ptr("system-default"),
		// 					Value: to.Ptr("on"),
		// 				},
		// 			},
		// 			{
		// 				Name: to.Ptr("auto_explain.log_triggers"),
		// 				Type: to.Ptr("Microsoft.DBforPostgreSQL/flexibleServers/configurations"),
		// 				ID: to.Ptr("/subscriptions/ffffffff-ffff-ffff-ffff-ffffffffffff/resourceGroups/exampleresourcegroup/providers/Microsoft.DBforPostgreSQL/flexibleServers/exampleserver/configurations/auto_explain.log_triggers"),
		// 				Properties: &armpostgresql.ConfigurationProperties{
		// 					Description: to.Ptr("Include trigger statistics in plans. This has no effect unless log_analyze is also set."),
		// 					AllowedValues: to.Ptr("on,off"),
		// 					DataType: to.Ptr(armpostgresql.ConfigurationDataTypeBoolean),
		// 					DefaultValue: to.Ptr("off"),
		// 					DocumentationLink: to.Ptr("https://www.postgresql.org/docs/13/auto-explain.html#id-1.11.7.13.5.3.6.1.3"),
		// 					IsConfigPendingRestart: to.Ptr(false),
		// 					IsDynamicConfig: to.Ptr(true),
		// 					IsReadOnly: to.Ptr(false),
		// 					Source: to.Ptr("system-default"),
		// 					Value: to.Ptr("off"),
		// 				},
		// 			},
		// 			{
		// 				Name: to.Ptr("auto_explain.log_verbose"),
		// 				Type: to.Ptr("Microsoft.DBforPostgreSQL/flexibleServers/configurations"),
		// 				ID: to.Ptr("/subscriptions/ffffffff-ffff-ffff-ffff-ffffffffffff/resourceGroups/exampleresourcegroup/providers/Microsoft.DBforPostgreSQL/flexibleServers/exampleserver/configurations/auto_explain.log_verbose"),
		// 				Properties: &armpostgresql.ConfigurationProperties{
		// 					Description: to.Ptr("Use EXPLAIN VERBOSE for plan logging."),
		// 					AllowedValues: to.Ptr("on,off"),
		// 					DataType: to.Ptr(armpostgresql.ConfigurationDataTypeBoolean),
		// 					DefaultValue: to.Ptr("off"),
		// 					DocumentationLink: to.Ptr("https://www.postgresql.org/docs/13/auto-explain.html#id-1.11.7.13.5.3.7.1.3"),
		// 					IsConfigPendingRestart: to.Ptr(false),
		// 					IsDynamicConfig: to.Ptr(true),
		// 					IsReadOnly: to.Ptr(false),
		// 					Source: to.Ptr("system-default"),
		// 					Value: to.Ptr("off"),
		// 				},
		// 			},
		// 			{
		// 				Name: to.Ptr("auto_explain.log_wal"),
		// 				Type: to.Ptr("Microsoft.DBforPostgreSQL/flexibleServers/configurations"),
		// 				ID: to.Ptr("/subscriptions/ffffffff-ffff-ffff-ffff-ffffffffffff/resourceGroups/exampleresourcegroup/providers/Microsoft.DBforPostgreSQL/flexibleServers/exampleserver/configurations/auto_explain.log_wal"),
		// 				Properties: &armpostgresql.ConfigurationProperties{
		// 					Description: to.Ptr("Log WAL usage."),
		// 					AllowedValues: to.Ptr("on,off"),
		// 					DataType: to.Ptr(armpostgresql.ConfigurationDataTypeBoolean),
		// 					DefaultValue: to.Ptr("off"),
		// 					DocumentationLink: to.Ptr("https://www.postgresql.org/docs/13/auto-explain.html#id-1.11.7.13.5.3.4.1.3"),
		// 					IsConfigPendingRestart: to.Ptr(false),
		// 					IsDynamicConfig: to.Ptr(true),
		// 					IsReadOnly: to.Ptr(false),
		// 					Source: to.Ptr("system-default"),
		// 					Value: to.Ptr("off"),
		// 				},
		// 			},
		// 			{
		// 				Name: to.Ptr("auto_explain.sample_rate"),
		// 				Type: to.Ptr("Microsoft.DBforPostgreSQL/flexibleServers/configurations"),
		// 				ID: to.Ptr("/subscriptions/ffffffff-ffff-ffff-ffff-ffffffffffff/resourceGroups/exampleresourcegroup/providers/Microsoft.DBforPostgreSQL/flexibleServers/exampleserver/configurations/auto_explain.sample_rate"),
		// 				Properties: &armpostgresql.ConfigurationProperties{
		// 					Description: to.Ptr("Fraction of queries to process."),
		// 					AllowedValues: to.Ptr("0.0-1.0"),
		// 					DataType: to.Ptr(armpostgresql.ConfigurationDataTypeNumeric),
		// 					DefaultValue: to.Ptr("1.0"),
		// 					DocumentationLink: to.Ptr("https://www.postgresql.org/docs/13/auto-explain.html#id-1.11.7.13.5.3.12.1.3"),
		// 					IsConfigPendingRestart: to.Ptr(false),
		// 					IsDynamicConfig: to.Ptr(true),
		// 					IsReadOnly: to.Ptr(false),
		// 					Source: to.Ptr("system-default"),
		// 					Value: to.Ptr("1.0"),
		// 				},
		// 			},
		// 			{
		// 				Name: to.Ptr("autovacuum"),
		// 				Type: to.Ptr("Microsoft.DBforPostgreSQL/flexibleServers/configurations"),
		// 				ID: to.Ptr("/subscriptions/ffffffff-ffff-ffff-ffff-ffffffffffff/resourceGroups/exampleresourcegroup/providers/Microsoft.DBforPostgreSQL/flexibleServers/exampleserver/configurations/autovacuum"),
		// 				Properties: &armpostgresql.ConfigurationProperties{
		// 					Description: to.Ptr("Controls whether the server should run the autovacuum subprocess."),
		// 					AllowedValues: to.Ptr("on,off"),
		// 					DataType: to.Ptr(armpostgresql.ConfigurationDataTypeBoolean),
		// 					DefaultValue: to.Ptr("on"),
		// 					DocumentationLink: to.Ptr("https://www.postgresql.org/docs/13/runtime-config-autovacuum.html#GUC-AUTOVACUUM"),
		// 					IsConfigPendingRestart: to.Ptr(false),
		// 					IsDynamicConfig: to.Ptr(true),
		// 					IsReadOnly: to.Ptr(false),
		// 					Source: to.Ptr("system-default"),
		// 					Value: to.Ptr("on"),
		// 				},
		// 			},
		// 			{
		// 				Name: to.Ptr("autovacuum_analyze_scale_factor"),
		// 				Type: to.Ptr("Microsoft.DBforPostgreSQL/flexibleServers/configurations"),
		// 				ID: to.Ptr("/subscriptions/ffffffff-ffff-ffff-ffff-ffffffffffff/resourceGroups/exampleresourcegroup/providers/Microsoft.DBforPostgreSQL/flexibleServers/exampleserver/configurations/autovacuum_analyze_scale_factor"),
		// 				Properties: &armpostgresql.ConfigurationProperties{
		// 					Description: to.Ptr("Specifies a fraction of the table size to add to autovacuum_vacuum_threshold when deciding whether to trigger a VACUUM."),
		// 					AllowedValues: to.Ptr("0-100"),
		// 					DataType: to.Ptr(armpostgresql.ConfigurationDataTypeNumeric),
		// 					DefaultValue: to.Ptr("0.1"),
		// 					DocumentationLink: to.Ptr("https://www.postgresql.org/docs/13/runtime-config-autovacuum.html#GUC-AUTOVACUUM-ANALYZE-SCALE-FACTOR"),
		// 					IsConfigPendingRestart: to.Ptr(false),
		// 					IsDynamicConfig: to.Ptr(true),
		// 					IsReadOnly: to.Ptr(false),
		// 					Source: to.Ptr("system-default"),
		// 					Value: to.Ptr("0.1"),
		// 				},
		// 			},
		// 			{
		// 				Name: to.Ptr("autovacuum_analyze_threshold"),
		// 				Type: to.Ptr("Microsoft.DBforPostgreSQL/flexibleServers/configurations"),
		// 				ID: to.Ptr("/subscriptions/ffffffff-ffff-ffff-ffff-ffffffffffff/resourceGroups/exampleresourcegroup/providers/Microsoft.DBforPostgreSQL/flexibleServers/exampleserver/configurations/autovacuum_analyze_threshold"),
		// 				Properties: &armpostgresql.ConfigurationProperties{
		// 					Description: to.Ptr("Sets the minimum number of inserted, updated or deleted tuples needed to trigger an ANALYZE in any one table."),
		// 					AllowedValues: to.Ptr("0-2147483647"),
		// 					DataType: to.Ptr(armpostgresql.ConfigurationDataTypeInteger),
		// 					DefaultValue: to.Ptr("50"),
		// 					DocumentationLink: to.Ptr("https://www.postgresql.org/docs/13/runtime-config-autovacuum.html#GUC-AUTOVACUUM-ANALYZE-THRESHOLD"),
		// 					IsConfigPendingRestart: to.Ptr(false),
		// 					IsDynamicConfig: to.Ptr(true),
		// 					IsReadOnly: to.Ptr(false),
		// 					Source: to.Ptr("system-default"),
		// 					Value: to.Ptr("50"),
		// 				},
		// 			},
		// 			{
		// 				Name: to.Ptr("autovacuum_freeze_max_age"),
		// 				Type: to.Ptr("Microsoft.DBforPostgreSQL/flexibleServers/configurations"),
		// 				ID: to.Ptr("/subscriptions/ffffffff-ffff-ffff-ffff-ffffffffffff/resourceGroups/exampleresourcegroup/providers/Microsoft.DBforPostgreSQL/flexibleServers/exampleserver/configurations/autovacuum_freeze_max_age"),
		// 				Properties: &armpostgresql.ConfigurationProperties{
		// 					Description: to.Ptr("Maximum age (in transactions) before triggering autovacuum on a table to prevent transaction ID wraparound."),
		// 					AllowedValues: to.Ptr("100000-2000000000"),
		// 					DataType: to.Ptr(armpostgresql.ConfigurationDataTypeInteger),
		// 					DefaultValue: to.Ptr("200000000"),
		// 					DocumentationLink: to.Ptr("https://www.postgresql.org/docs/13/runtime-config-autovacuum.html#GUC-AUTOVACUUM-FREEZE-MAX-AGE"),
		// 					IsConfigPendingRestart: to.Ptr(false),
		// 					IsDynamicConfig: to.Ptr(false),
		// 					IsReadOnly: to.Ptr(false),
		// 					Source: to.Ptr("system-default"),
		// 					Value: to.Ptr("200000000"),
		// 				},
		// 			},
		// 			{
		// 				Name: to.Ptr("autovacuum_max_workers"),
		// 				Type: to.Ptr("Microsoft.DBforPostgreSQL/flexibleServers/configurations"),
		// 				ID: to.Ptr("/subscriptions/ffffffff-ffff-ffff-ffff-ffffffffffff/resourceGroups/exampleresourcegroup/providers/Microsoft.DBforPostgreSQL/flexibleServers/exampleserver/configurations/autovacuum_max_workers"),
		// 				Properties: &armpostgresql.ConfigurationProperties{
		// 					Description: to.Ptr("Sets the maximum number of simultaneously running autovacuum worker processes."),
		// 					AllowedValues: to.Ptr("1-262143"),
		// 					DataType: to.Ptr(armpostgresql.ConfigurationDataTypeInteger),
		// 					DefaultValue: to.Ptr("3"),
		// 					DocumentationLink: to.Ptr("https://www.postgresql.org/docs/13/runtime-config-autovacuum.html#GUC-AUTOVACUUM-MAX-WORKERS"),
		// 					IsConfigPendingRestart: to.Ptr(false),
		// 					IsDynamicConfig: to.Ptr(false),
		// 					IsReadOnly: to.Ptr(false),
		// 					Source: to.Ptr("system-default"),
		// 					Value: to.Ptr("3"),
		// 				},
		// 			},
		// 			{
		// 				Name: to.Ptr("autovacuum_multixact_freeze_max_age"),
		// 				Type: to.Ptr("Microsoft.DBforPostgreSQL/flexibleServers/configurations"),
		// 				ID: to.Ptr("/subscriptions/ffffffff-ffff-ffff-ffff-ffffffffffff/resourceGroups/exampleresourcegroup/providers/Microsoft.DBforPostgreSQL/flexibleServers/exampleserver/configurations/autovacuum_multixact_freeze_max_age"),
		// 				Properties: &armpostgresql.ConfigurationProperties{
		// 					Description: to.Ptr("Maximum age (in multixact) before triggering autovacuum on a table to prevent multixact wraparound."),
		// 					AllowedValues: to.Ptr("10000-2000000000"),
		// 					DataType: to.Ptr(armpostgresql.ConfigurationDataTypeInteger),
		// 					DefaultValue: to.Ptr("400000000"),
		// 					DocumentationLink: to.Ptr("https://www.postgresql.org/docs/13/runtime-config-autovacuum.html#GUC-AUTOVACUUM-MULTIXACT-FREEZE-MAX-AGE"),
		// 					IsConfigPendingRestart: to.Ptr(false),
		// 					IsDynamicConfig: to.Ptr(false),
		// 					IsReadOnly: to.Ptr(false),
		// 					Source: to.Ptr("system-default"),
		// 					Value: to.Ptr("400000000"),
		// 				},
		// 			},
		// 			{
		// 				Name: to.Ptr("autovacuum_naptime"),
		// 				Type: to.Ptr("Microsoft.DBforPostgreSQL/flexibleServers/configurations"),
		// 				ID: to.Ptr("/subscriptions/ffffffff-ffff-ffff-ffff-ffffffffffff/resourceGroups/exampleresourcegroup/providers/Microsoft.DBforPostgreSQL/flexibleServers/exampleserver/configurations/autovacuum_naptime"),
		// 				Properties: &armpostgresql.ConfigurationProperties{
		// 					Description: to.Ptr("Sets minimum delay between autovacuum runs on any given database."),
		// 					AllowedValues: to.Ptr("1-2147483"),
		// 					DataType: to.Ptr(armpostgresql.ConfigurationDataTypeInteger),
		// 					DefaultValue: to.Ptr("60"),
		// 					DocumentationLink: to.Ptr("https://www.postgresql.org/docs/13/runtime-config-autovacuum.html#GUC-AUTOVACUUM-NAPTIME"),
		// 					IsConfigPendingRestart: to.Ptr(false),
		// 					IsDynamicConfig: to.Ptr(true),
		// 					IsReadOnly: to.Ptr(false),
		// 					Source: to.Ptr("system-default"),
		// 					Unit: to.Ptr("seconds"),
		// 					Value: to.Ptr("60"),
		// 				},
		// 			},
		// 			{
		// 				Name: to.Ptr("autovacuum_vacuum_cost_delay"),
		// 				Type: to.Ptr("Microsoft.DBforPostgreSQL/flexibleServers/configurations"),
		// 				ID: to.Ptr("/subscriptions/ffffffff-ffff-ffff-ffff-ffffffffffff/resourceGroups/exampleresourcegroup/providers/Microsoft.DBforPostgreSQL/flexibleServers/exampleserver/configurations/autovacuum_vacuum_cost_delay"),
		// 				Properties: &armpostgresql.ConfigurationProperties{
		// 					Description: to.Ptr("Sets cost delay value (milliseconds) that will be used in automatic VACUUM operations."),
		// 					AllowedValues: to.Ptr("-1-100"),
		// 					DataType: to.Ptr(armpostgresql.ConfigurationDataTypeInteger),
		// 					DefaultValue: to.Ptr("2"),
		// 					DocumentationLink: to.Ptr("https://www.postgresql.org/docs/13/runtime-config-autovacuum.html#GUC-AUTOVACUUM-VACUUM-COST-DELAY"),
		// 					IsConfigPendingRestart: to.Ptr(false),
		// 					IsDynamicConfig: to.Ptr(true),
		// 					IsReadOnly: to.Ptr(false),
		// 					Source: to.Ptr("system-default"),
		// 					Unit: to.Ptr("milliseconds"),
		// 					Value: to.Ptr("2"),
		// 				},
		// 			},
		// 			{
		// 				Name: to.Ptr("autovacuum_vacuum_cost_limit"),
		// 				Type: to.Ptr("Microsoft.DBforPostgreSQL/flexibleServers/configurations"),
		// 				ID: to.Ptr("/subscriptions/ffffffff-ffff-ffff-ffff-ffffffffffff/resourceGroups/exampleresourcegroup/providers/Microsoft.DBforPostgreSQL/flexibleServers/exampleserver/configurations/autovacuum_vacuum_cost_limit"),
		// 				Properties: &armpostgresql.ConfigurationProperties{
		// 					Description: to.Ptr("Sets cost limit value that will be used in automatic VACUUM operations."),
		// 					AllowedValues: to.Ptr("-1-10000"),
		// 					DataType: to.Ptr(armpostgresql.ConfigurationDataTypeInteger),
		// 					DefaultValue: to.Ptr("-1"),
		// 					DocumentationLink: to.Ptr("https://www.postgresql.org/docs/13/runtime-config-autovacuum.html#GUC-AUTOVACUUM-VACUUM-COST-LIMIT"),
		// 					IsConfigPendingRestart: to.Ptr(false),
		// 					IsDynamicConfig: to.Ptr(true),
		// 					IsReadOnly: to.Ptr(false),
		// 					Source: to.Ptr("system-default"),
		// 					Value: to.Ptr("-1"),
		// 				},
		// 			},
		// 			{
		// 				Name: to.Ptr("autovacuum_vacuum_insert_scale_factor"),
		// 				Type: to.Ptr("Microsoft.DBforPostgreSQL/flexibleServers/configurations"),
		// 				ID: to.Ptr("/subscriptions/ffffffff-ffff-ffff-ffff-ffffffffffff/resourceGroups/exampleresourcegroup/providers/Microsoft.DBforPostgreSQL/flexibleServers/exampleserver/configurations/autovacuum_vacuum_insert_scale_factor"),
		// 				Properties: &armpostgresql.ConfigurationProperties{
		// 					Description: to.Ptr("Specifies a fraction of the table size to add to autovacuum_vacuum_insert_threshold when deciding whether to trigger a VACUUM."),
		// 					AllowedValues: to.Ptr("0-100"),
		// 					DataType: to.Ptr(armpostgresql.ConfigurationDataTypeNumeric),
		// 					DefaultValue: to.Ptr("0.2"),
		// 					DocumentationLink: to.Ptr("https://www.postgresql.org/docs/13/runtime-config-autovacuum.html#GUC-AUTOVACUUM-VACUUM-INSERT-SCALE-FACTOR"),
		// 					IsConfigPendingRestart: to.Ptr(false),
		// 					IsDynamicConfig: to.Ptr(true),
		// 					IsReadOnly: to.Ptr(false),
		// 					Source: to.Ptr("system-default"),
		// 					Value: to.Ptr("0.2"),
		// 				},
		// 			},
		// 			{
		// 				Name: to.Ptr("autovacuum_vacuum_insert_threshold"),
		// 				Type: to.Ptr("Microsoft.DBforPostgreSQL/flexibleServers/configurations"),
		// 				ID: to.Ptr("/subscriptions/ffffffff-ffff-ffff-ffff-ffffffffffff/resourceGroups/exampleresourcegroup/providers/Microsoft.DBforPostgreSQL/flexibleServers/exampleserver/configurations/autovacuum_vacuum_insert_threshold"),
		// 				Properties: &armpostgresql.ConfigurationProperties{
		// 					Description: to.Ptr("Specifies the number of inserted tuples needed to trigger a VACUUM in any one table."),
		// 					AllowedValues: to.Ptr("-1-2147483647"),
		// 					DataType: to.Ptr(armpostgresql.ConfigurationDataTypeInteger),
		// 					DefaultValue: to.Ptr("1000"),
		// 					DocumentationLink: to.Ptr("https://www.postgresql.org/docs/13/runtime-config-autovacuum.html#GUC-AUTOVACUUM-VACUUM-INSERT-THRESHOLD"),
		// 					IsConfigPendingRestart: to.Ptr(false),
		// 					IsDynamicConfig: to.Ptr(true),
		// 					IsReadOnly: to.Ptr(false),
		// 					Source: to.Ptr("system-default"),
		// 					Value: to.Ptr("1000"),
		// 				},
		// 			},
		// 			{
		// 				Name: to.Ptr("autovacuum_vacuum_scale_factor"),
		// 				Type: to.Ptr("Microsoft.DBforPostgreSQL/flexibleServers/configurations"),
		// 				ID: to.Ptr("/subscriptions/ffffffff-ffff-ffff-ffff-ffffffffffff/resourceGroups/exampleresourcegroup/providers/Microsoft.DBforPostgreSQL/flexibleServers/exampleserver/configurations/autovacuum_vacuum_scale_factor"),
		// 				Properties: &armpostgresql.ConfigurationProperties{
		// 					Description: to.Ptr("Specifies a fraction of the table size to add to autovacuum_vacuum_threshold when deciding whether to trigger a VACUUM."),
		// 					AllowedValues: to.Ptr("0-100"),
		// 					DataType: to.Ptr(armpostgresql.ConfigurationDataTypeNumeric),
		// 					DefaultValue: to.Ptr("0.2"),
		// 					DocumentationLink: to.Ptr("https://www.postgresql.org/docs/13/runtime-config-autovacuum.html#GUC-AUTOVACUUM-VACUUM-SCALE-FACTOR"),
		// 					IsConfigPendingRestart: to.Ptr(false),
		// 					IsDynamicConfig: to.Ptr(true),
		// 					IsReadOnly: to.Ptr(false),
		// 					Source: to.Ptr("system-default"),
		// 					Value: to.Ptr("0.2"),
		// 				},
		// 			},
		// 			{
		// 				Name: to.Ptr("autovacuum_vacuum_threshold"),
		// 				Type: to.Ptr("Microsoft.DBforPostgreSQL/flexibleServers/configurations"),
		// 				ID: to.Ptr("/subscriptions/ffffffff-ffff-ffff-ffff-ffffffffffff/resourceGroups/exampleresourcegroup/providers/Microsoft.DBforPostgreSQL/flexibleServers/exampleserver/configurations/autovacuum_vacuum_threshold"),
		// 				Properties: &armpostgresql.ConfigurationProperties{
		// 					Description: to.Ptr("Specifies the minimum number of updated or deleted tuples needed to trigger a VACUUM in any one table."),
		// 					AllowedValues: to.Ptr("0-2147483647"),
		// 					DataType: to.Ptr(armpostgresql.ConfigurationDataTypeInteger),
		// 					DefaultValue: to.Ptr("50"),
		// 					DocumentationLink: to.Ptr("https://www.postgresql.org/docs/13/runtime-config-autovacuum.html#GUC-AUTOVACUUM-VACUUM-THRESHOLD"),
		// 					IsConfigPendingRestart: to.Ptr(false),
		// 					IsDynamicConfig: to.Ptr(true),
		// 					IsReadOnly: to.Ptr(false),
		// 					Source: to.Ptr("system-default"),
		// 					Value: to.Ptr("50"),
		// 				},
		// 			},
		// 			{
		// 				Name: to.Ptr("autovacuum_work_mem"),
		// 				Type: to.Ptr("Microsoft.DBforPostgreSQL/flexibleServers/configurations"),
		// 				ID: to.Ptr("/subscriptions/ffffffff-ffff-ffff-ffff-ffffffffffff/resourceGroups/exampleresourcegroup/providers/Microsoft.DBforPostgreSQL/flexibleServers/exampleserver/configurations/autovacuum_work_mem"),
		// 				Properties: &armpostgresql.ConfigurationProperties{
		// 					Description: to.Ptr("Sets the maximum memory to be used by each autovacuum worker process."),
		// 					AllowedValues: to.Ptr("-1-2097151"),
		// 					DataType: to.Ptr(armpostgresql.ConfigurationDataTypeInteger),
		// 					DefaultValue: to.Ptr("-1"),
		// 					DocumentationLink: to.Ptr("https://www.postgresql.org/docs/13/runtime-config-resource.html#GUC-AUTOVACUUM-WORK-MEM"),
		// 					IsConfigPendingRestart: to.Ptr(false),
		// 					IsDynamicConfig: to.Ptr(true),
		// 					IsReadOnly: to.Ptr(false),
		// 					Source: to.Ptr("system-default"),
		// 					Unit: to.Ptr("KB"),
		// 					Value: to.Ptr("-1"),
		// 				},
		// 			},
		// 			{
		// 				Name: to.Ptr("azure.accepted_password_auth_method"),
		// 				Type: to.Ptr("Microsoft.DBforPostgreSQL/flexibleServers/configurations"),
		// 				ID: to.Ptr("/subscriptions/ffffffff-ffff-ffff-ffff-ffffffffffff/resourceGroups/exampleresourcegroup/providers/Microsoft.DBforPostgreSQL/flexibleServers/exampleserver/configurations/azure.accepted_password_auth_method"),
		// 				Properties: &armpostgresql.ConfigurationProperties{
		// 					Description: to.Ptr("Accepted password authentication method."),
		// 					AllowedValues: to.Ptr("md5,scram-sha-256"),
		// 					DataType: to.Ptr(armpostgresql.ConfigurationDataTypeSet),
		// 					DefaultValue: to.Ptr("md5"),
		// 					DocumentationLink: to.Ptr("https://go.microsoft.com/fwlink/?linkid=2274147"),
		// 					IsConfigPendingRestart: to.Ptr(false),
		// 					IsDynamicConfig: to.Ptr(true),
		// 					IsReadOnly: to.Ptr(false),
		// 					Source: to.Ptr("system-default"),
		// 					Value: to.Ptr("md5"),
		// 				},
		// 			},
		// 			{
		// 				Name: to.Ptr("azure.enable_temp_tablespaces_on_local_ssd"),
		// 				Type: to.Ptr("Microsoft.DBforPostgreSQL/flexibleServers/configurations"),
		// 				ID: to.Ptr("/subscriptions/ffffffff-ffff-ffff-ffff-ffffffffffff/resourceGroups/exampleresourcegroup/providers/Microsoft.DBforPostgreSQL/flexibleServers/exampleserver/configurations/azure.enable_temp_tablespaces_on_local_ssd"),
		// 				Properties: &armpostgresql.ConfigurationProperties{
		// 					Description: to.Ptr("Create temp tablespace on ephemeral disk."),
		// 					AllowedValues: to.Ptr("on,off"),
		// 					DataType: to.Ptr(armpostgresql.ConfigurationDataTypeBoolean),
		// 					DefaultValue: to.Ptr("on"),
		// 					IsConfigPendingRestart: to.Ptr(false),
		// 					IsDynamicConfig: to.Ptr(true),
		// 					IsReadOnly: to.Ptr(false),
		// 					Source: to.Ptr("system-default"),
		// 					Value: to.Ptr("on"),
		// 				},
		// 			},
		// 			{
		// 				Name: to.Ptr("azure.extensions"),
		// 				Type: to.Ptr("Microsoft.DBforPostgreSQL/flexibleServers/configurations"),
		// 				ID: to.Ptr("/subscriptions/ffffffff-ffff-ffff-ffff-ffffffffffff/resourceGroups/exampleresourcegroup/providers/Microsoft.DBforPostgreSQL/flexibleServers/exampleserver/configurations/azure.extensions"),
		// 				Properties: &armpostgresql.ConfigurationProperties{
		// 					Description: to.Ptr("Specifies which extensions are allowed to be created in the server."),
		// 					AllowedValues: to.Ptr(",address_standardizer,address_standardizer_data_us,age,amcheck,anon,azure_ai,azure_storage,bloom,btree_gin,btree_gist,citext,cube,dblink,dict_int,dict_xsyn,earthdistance,fuzzystrmatch,hll,hstore,hypopg,intagg,intarray,isn,lo,login_hook,ltree,oracle_fdw,orafce,pageinspect,pg_buffercache,pg_cron,pg_freespacemap,pg_hint_plan,pg_partman,pg_prewarm,pg_repack,pg_squeeze,pg_stat_statements,pg_trgm,pg_visibility,pgaudit,pgcrypto,pglogical,pgrouting,pgrowlocks,pgstattuple,plpgsql,plv8,postgis,postgis_raster,postgis_sfcgal,postgis_tiger_geocoder,postgis_topology,postgres_fdw,postgres_protobuf,semver,session_variable,sslinfo,tablefunc,tdigest,tds_fdw,timescaledb,topn,tsm_system_rows,tsm_system_time,unaccent,uuid-ossp,vector"),
		// 					DataType: to.Ptr(armpostgresql.ConfigurationDataTypeSet),
		// 					DefaultValue: to.Ptr(""),
		// 					DocumentationLink: to.Ptr("https://go.microsoft.com/fwlink/?linkid=2274269"),
		// 					IsConfigPendingRestart: to.Ptr(false),
		// 					IsDynamicConfig: to.Ptr(true),
		// 					IsReadOnly: to.Ptr(false),
		// 					Source: to.Ptr("system-default"),
		// 					Value: to.Ptr(""),
		// 				},
		// 			},
		// 			{
		// 				Name: to.Ptr("azure.single_to_flex_migration"),
		// 				Type: to.Ptr("Microsoft.DBforPostgreSQL/flexibleServers/configurations"),
		// 				ID: to.Ptr("/subscriptions/ffffffff-ffff-ffff-ffff-ffffffffffff/resourceGroups/exampleresourcegroup/providers/Microsoft.DBforPostgreSQL/flexibleServers/exampleserver/configurations/azure.single_to_flex_migration"),
		// 				Properties: &armpostgresql.ConfigurationProperties{
		// 					Description: to.Ptr("Specifies if this is a server created for migrating from Azure Database for PostgreSQL Single Server to Flexible Server."),
		// 					AllowedValues: to.Ptr("on,off"),
		// 					DataType: to.Ptr(armpostgresql.ConfigurationDataTypeBoolean),
		// 					DefaultValue: to.Ptr("off"),
		// 					IsConfigPendingRestart: to.Ptr(false),
		// 					IsDynamicConfig: to.Ptr(true),
		// 					IsReadOnly: to.Ptr(true),
		// 					Source: to.Ptr("system-default"),
		// 					Value: to.Ptr("off"),
		// 				},
		// 			},
		// 			{
		// 				Name: to.Ptr("azure_storage.allow_network_access"),
		// 				Type: to.Ptr("Microsoft.DBforPostgreSQL/flexibleServers/configurations"),
		// 				ID: to.Ptr("/subscriptions/ffffffff-ffff-ffff-ffff-ffffffffffff/resourceGroups/exampleresourcegroup/providers/Microsoft.DBforPostgreSQL/flexibleServers/exampleserver/configurations/azure_storage.allow_network_access"),
		// 				Properties: &armpostgresql.ConfigurationProperties{
		// 					Description: to.Ptr("Allow accessing data from blob storage in extension azure_storage."),
		// 					AllowedValues: to.Ptr("on,off"),
		// 					DataType: to.Ptr(armpostgresql.ConfigurationDataTypeBoolean),
		// 					DefaultValue: to.Ptr("on"),
		// 					IsConfigPendingRestart: to.Ptr(false),
		// 					IsDynamicConfig: to.Ptr(true),
		// 					IsReadOnly: to.Ptr(false),
		// 					Source: to.Ptr("system-default"),
		// 					Value: to.Ptr("on"),
		// 				},
		// 			},
		// 			{
		// 				Name: to.Ptr("azure_storage.blob_block_size_mb"),
		// 				Type: to.Ptr("Microsoft.DBforPostgreSQL/flexibleServers/configurations"),
		// 				ID: to.Ptr("/subscriptions/ffffffff-ffff-ffff-ffff-ffffffffffff/resourceGroups/exampleresourcegroup/providers/Microsoft.DBforPostgreSQL/flexibleServers/exampleserver/configurations/azure_storage.blob_block_size_mb"),
		// 				Properties: &armpostgresql.ConfigurationProperties{
		// 					Description: to.Ptr("Blob block size in megabytes for blob_put in extension azure_storage."),
		// 					AllowedValues: to.Ptr("1-4000"),
		// 					DataType: to.Ptr(armpostgresql.ConfigurationDataTypeInteger),
		// 					DefaultValue: to.Ptr("512"),
		// 					DocumentationLink: to.Ptr("https://learn.microsoft.com/en-us/rest/api/storageservices/put-block?tabs=azure-ad#remarks"),
		// 					IsConfigPendingRestart: to.Ptr(false),
		// 					IsDynamicConfig: to.Ptr(true),
		// 					IsReadOnly: to.Ptr(true),
		// 					Source: to.Ptr("system-default"),
		// 					Unit: to.Ptr("megabytes"),
		// 					Value: to.Ptr("512"),
		// 				},
		// 			},
		// 			{
		// 				Name: to.Ptr("azure_storage.public_account_access"),
		// 				Type: to.Ptr("Microsoft.DBforPostgreSQL/flexibleServers/configurations"),
		// 				ID: to.Ptr("/subscriptions/ffffffff-ffff-ffff-ffff-ffffffffffff/resourceGroups/exampleresourcegroup/providers/Microsoft.DBforPostgreSQL/flexibleServers/exampleserver/configurations/azure_storage.public_account_access"),
		// 				Properties: &armpostgresql.ConfigurationProperties{
		// 					Description: to.Ptr("Allow all users to access data from public storage accounts in extension azure_storage."),
		// 					AllowedValues: to.Ptr("on,off"),
		// 					DataType: to.Ptr(armpostgresql.ConfigurationDataTypeBoolean),
		// 					DefaultValue: to.Ptr("on"),
		// 					IsConfigPendingRestart: to.Ptr(false),
		// 					IsDynamicConfig: to.Ptr(true),
		// 					IsReadOnly: to.Ptr(false),
		// 					Source: to.Ptr("system-default"),
		// 					Value: to.Ptr("on"),
		// 				},
		// 			},
		// 			{
		// 				Name: to.Ptr("backend_flush_after"),
		// 				Type: to.Ptr("Microsoft.DBforPostgreSQL/flexibleServers/configurations"),
		// 				ID: to.Ptr("/subscriptions/ffffffff-ffff-ffff-ffff-ffffffffffff/resourceGroups/exampleresourcegroup/providers/Microsoft.DBforPostgreSQL/flexibleServers/exampleserver/configurations/backend_flush_after"),
		// 				Properties: &armpostgresql.ConfigurationProperties{
		// 					Description: to.Ptr("Number of pages after which previously performed writes are flushed to disk."),
		// 					AllowedValues: to.Ptr("0-256"),
		// 					DataType: to.Ptr(armpostgresql.ConfigurationDataTypeInteger),
		// 					DefaultValue: to.Ptr("256"),
		// 					DocumentationLink: to.Ptr("https://www.postgresql.org/docs/13/runtime-config-resource.html#GUC-BACKEND-FLUSH-AFTER"),
		// 					IsConfigPendingRestart: to.Ptr(false),
		// 					IsDynamicConfig: to.Ptr(true),
		// 					IsReadOnly: to.Ptr(false),
		// 					Source: to.Ptr("system-default"),
		// 					Unit: to.Ptr("8KB"),
		// 					Value: to.Ptr("256"),
		// 				},
		// 			},
		// 			{
		// 				Name: to.Ptr("backslash_quote"),
		// 				Type: to.Ptr("Microsoft.DBforPostgreSQL/flexibleServers/configurations"),
		// 				ID: to.Ptr("/subscriptions/ffffffff-ffff-ffff-ffff-ffffffffffff/resourceGroups/exampleresourcegroup/providers/Microsoft.DBforPostgreSQL/flexibleServers/exampleserver/configurations/backslash_quote"),
		// 				Properties: &armpostgresql.ConfigurationProperties{
		// 					Description: to.Ptr("Sets whether \"\\'\" is allowed in string literals."),
		// 					AllowedValues: to.Ptr("safe_encoding,on,off"),
		// 					DataType: to.Ptr(armpostgresql.ConfigurationDataTypeEnumeration),
		// 					DefaultValue: to.Ptr("safe_encoding"),
		// 					DocumentationLink: to.Ptr("https://www.postgresql.org/docs/13/runtime-config-compatible.html#GUC-BACKSLASH-QUOTE"),
		// 					IsConfigPendingRestart: to.Ptr(false),
		// 					IsDynamicConfig: to.Ptr(true),
		// 					IsReadOnly: to.Ptr(false),
		// 					Source: to.Ptr("system-default"),
		// 					Value: to.Ptr("safe_encoding"),
		// 				},
		// 			},
		// 			{
		// 				Name: to.Ptr("backtrace_functions"),
		// 				Type: to.Ptr("Microsoft.DBforPostgreSQL/flexibleServers/configurations"),
		// 				ID: to.Ptr("/subscriptions/ffffffff-ffff-ffff-ffff-ffffffffffff/resourceGroups/exampleresourcegroup/providers/Microsoft.DBforPostgreSQL/flexibleServers/exampleserver/configurations/backtrace_functions"),
		// 				Properties: &armpostgresql.ConfigurationProperties{
		// 					Description: to.Ptr("Log backtrace for errors in these functions."),
		// 					AllowedValues: to.Ptr(".*"),
		// 					DataType: to.Ptr(armpostgresql.ConfigurationDataTypeString),
		// 					DefaultValue: to.Ptr(""),
		// 					DocumentationLink: to.Ptr("https://www.postgresql.org/docs/13/runtime-config-developer.html#GUC-BACKTRACE-FUNCTIONS"),
		// 					IsConfigPendingRestart: to.Ptr(false),
		// 					IsDynamicConfig: to.Ptr(true),
		// 					IsReadOnly: to.Ptr(true),
		// 					Source: to.Ptr("system-default"),
		// 					Value: to.Ptr(""),
		// 				},
		// 			},
		// 			{
		// 				Name: to.Ptr("bgwriter_delay"),
		// 				Type: to.Ptr("Microsoft.DBforPostgreSQL/flexibleServers/configurations"),
		// 				ID: to.Ptr("/subscriptions/ffffffff-ffff-ffff-ffff-ffffffffffff/resourceGroups/exampleresourcegroup/providers/Microsoft.DBforPostgreSQL/flexibleServers/exampleserver/configurations/bgwriter_delay"),
		// 				Properties: &armpostgresql.ConfigurationProperties{
		// 					Description: to.Ptr("Specifies the delay between activity rounds for the background writer. In each round the writer issues writes for some number of dirty buffers."),
		// 					AllowedValues: to.Ptr("10-10000"),
		// 					DataType: to.Ptr(armpostgresql.ConfigurationDataTypeInteger),
		// 					DefaultValue: to.Ptr("20"),
		// 					DocumentationLink: to.Ptr("https://www.postgresql.org/docs/13/runtime-config-resource.html#GUC-BGWRITER-DELAY"),
		// 					IsConfigPendingRestart: to.Ptr(false),
		// 					IsDynamicConfig: to.Ptr(true),
		// 					IsReadOnly: to.Ptr(false),
		// 					Source: to.Ptr("system-default"),
		// 					Unit: to.Ptr("milliseconds"),
		// 					Value: to.Ptr("20"),
		// 				},
		// 			},
		// 			{
		// 				Name: to.Ptr("bgwriter_flush_after"),
		// 				Type: to.Ptr("Microsoft.DBforPostgreSQL/flexibleServers/configurations"),
		// 				ID: to.Ptr("/subscriptions/ffffffff-ffff-ffff-ffff-ffffffffffff/resourceGroups/exampleresourcegroup/providers/Microsoft.DBforPostgreSQL/flexibleServers/exampleserver/configurations/bgwriter_flush_after"),
		// 				Properties: &armpostgresql.ConfigurationProperties{
		// 					Description: to.Ptr("Number of pages after which previously performed writes by the background writer are flushed to disk."),
		// 					AllowedValues: to.Ptr("0-256"),
		// 					DataType: to.Ptr(armpostgresql.ConfigurationDataTypeInteger),
		// 					DefaultValue: to.Ptr("64"),
		// 					DocumentationLink: to.Ptr("https://www.postgresql.org/docs/13/runtime-config-resource.html#GUC-BGWRITER-FLUSH-AFTER"),
		// 					IsConfigPendingRestart: to.Ptr(false),
		// 					IsDynamicConfig: to.Ptr(true),
		// 					IsReadOnly: to.Ptr(false),
		// 					Source: to.Ptr("system-default"),
		// 					Unit: to.Ptr("8KB"),
		// 					Value: to.Ptr("64"),
		// 				},
		// 			},
		// 			{
		// 				Name: to.Ptr("bgwriter_lru_maxpages"),
		// 				Type: to.Ptr("Microsoft.DBforPostgreSQL/flexibleServers/configurations"),
		// 				ID: to.Ptr("/subscriptions/ffffffff-ffff-ffff-ffff-ffffffffffff/resourceGroups/exampleresourcegroup/providers/Microsoft.DBforPostgreSQL/flexibleServers/exampleserver/configurations/bgwriter_lru_maxpages"),
		// 				Properties: &armpostgresql.ConfigurationProperties{
		// 					Description: to.Ptr("In each round, no more than this many buffers will be written by the background writer."),
		// 					AllowedValues: to.Ptr("0-1073741823"),
		// 					DataType: to.Ptr(armpostgresql.ConfigurationDataTypeInteger),
		// 					DefaultValue: to.Ptr("100"),
		// 					DocumentationLink: to.Ptr("https://www.postgresql.org/docs/13/runtime-config-resource.html#GUC-BGWRITER-LRU-MAXPAGES"),
		// 					IsConfigPendingRestart: to.Ptr(false),
		// 					IsDynamicConfig: to.Ptr(true),
		// 					IsReadOnly: to.Ptr(false),
		// 					Source: to.Ptr("system-default"),
		// 					Value: to.Ptr("100"),
		// 				},
		// 			},
		// 			{
		// 				Name: to.Ptr("bgwriter_lru_multiplier"),
		// 				Type: to.Ptr("Microsoft.DBforPostgreSQL/flexibleServers/configurations"),
		// 				ID: to.Ptr("/subscriptions/ffffffff-ffff-ffff-ffff-ffffffffffff/resourceGroups/exampleresourcegroup/providers/Microsoft.DBforPostgreSQL/flexibleServers/exampleserver/configurations/bgwriter_lru_multiplier"),
		// 				Properties: &armpostgresql.ConfigurationProperties{
		// 					Description: to.Ptr("The average recent need of buffers is multiplied by bgwriter_lru_multiplier to arrive at an estimate of the number of buffers that will be needed during the next round."),
		// 					AllowedValues: to.Ptr("0-10"),
		// 					DataType: to.Ptr(armpostgresql.ConfigurationDataTypeNumeric),
		// 					DefaultValue: to.Ptr("2"),
		// 					DocumentationLink: to.Ptr("https://www.postgresql.org/docs/13/runtime-config-resource.html#GUC-BGWRITER-LRU-MULTIPLIER"),
		// 					IsConfigPendingRestart: to.Ptr(false),
		// 					IsDynamicConfig: to.Ptr(true),
		// 					IsReadOnly: to.Ptr(false),
		// 					Source: to.Ptr("system-default"),
		// 					Value: to.Ptr("2"),
		// 				},
		// 			},
		// 			{
		// 				Name: to.Ptr("block_size"),
		// 				Type: to.Ptr("Microsoft.DBforPostgreSQL/flexibleServers/configurations"),
		// 				ID: to.Ptr("/subscriptions/ffffffff-ffff-ffff-ffff-ffffffffffff/resourceGroups/exampleresourcegroup/providers/Microsoft.DBforPostgreSQL/flexibleServers/exampleserver/configurations/block_size"),
		// 				Properties: &armpostgresql.ConfigurationProperties{
		// 					Description: to.Ptr("Shows the size of a disk block."),
		// 					AllowedValues: to.Ptr("8192-8192"),
		// 					DataType: to.Ptr(armpostgresql.ConfigurationDataTypeInteger),
		// 					DefaultValue: to.Ptr("8192"),
		// 					DocumentationLink: to.Ptr("https://www.postgresql.org/docs/13/runtime-config-preset.html#GUC-BLOCK-SIZE"),
		// 					IsConfigPendingRestart: to.Ptr(false),
		// 					IsDynamicConfig: to.Ptr(true),
		// 					IsReadOnly: to.Ptr(true),
		// 					Source: to.Ptr("system-default"),
		// 					Value: to.Ptr("8192"),
		// 				},
		// 			},
		// 			{
		// 				Name: to.Ptr("bonjour"),
		// 				Type: to.Ptr("Microsoft.DBforPostgreSQL/flexibleServers/configurations"),
		// 				ID: to.Ptr("/subscriptions/ffffffff-ffff-ffff-ffff-ffffffffffff/resourceGroups/exampleresourcegroup/providers/Microsoft.DBforPostgreSQL/flexibleServers/exampleserver/configurations/bonjour"),
		// 				Properties: &armpostgresql.ConfigurationProperties{
		// 					Description: to.Ptr("Enables advertising the server via Bonjour."),
		// 					AllowedValues: to.Ptr("on,off"),
		// 					DataType: to.Ptr(armpostgresql.ConfigurationDataTypeBoolean),
		// 					DefaultValue: to.Ptr("off"),
		// 					DocumentationLink: to.Ptr("https://www.postgresql.org/docs/13/runtime-config-connection.html#GUC-BONJOUR"),
		// 					IsConfigPendingRestart: to.Ptr(false),
		// 					IsDynamicConfig: to.Ptr(false),
		// 					IsReadOnly: to.Ptr(true),
		// 					Source: to.Ptr("system-default"),
		// 					Value: to.Ptr("off"),
		// 				},
		// 			},
		// 			{
		// 				Name: to.Ptr("bonjour_name"),
		// 				Type: to.Ptr("Microsoft.DBforPostgreSQL/flexibleServers/configurations"),
		// 				ID: to.Ptr("/subscriptions/ffffffff-ffff-ffff-ffff-ffffffffffff/resourceGroups/exampleresourcegroup/providers/Microsoft.DBforPostgreSQL/flexibleServers/exampleserver/configurations/bonjour_name"),
		// 				Properties: &armpostgresql.ConfigurationProperties{
		// 					Description: to.Ptr("Sets the Bonjour service name."),
		// 					AllowedValues: to.Ptr(".*"),
		// 					DataType: to.Ptr(armpostgresql.ConfigurationDataTypeString),
		// 					DefaultValue: to.Ptr(""),
		// 					DocumentationLink: to.Ptr("https://www.postgresql.org/docs/13/runtime-config-connection.html#GUC-BONJOUR-NAME"),
		// 					IsConfigPendingRestart: to.Ptr(false),
		// 					IsDynamicConfig: to.Ptr(false),
		// 					IsReadOnly: to.Ptr(true),
		// 					Source: to.Ptr("system-default"),
		// 					Value: to.Ptr(""),
		// 				},
		// 			},
		// 			{
		// 				Name: to.Ptr("bytea_output"),
		// 				Type: to.Ptr("Microsoft.DBforPostgreSQL/flexibleServers/configurations"),
		// 				ID: to.Ptr("/subscriptions/ffffffff-ffff-ffff-ffff-ffffffffffff/resourceGroups/exampleresourcegroup/providers/Microsoft.DBforPostgreSQL/flexibleServers/exampleserver/configurations/bytea_output"),
		// 				Properties: &armpostgresql.ConfigurationProperties{
		// 					Description: to.Ptr("Sets the output format for values of type bytea. Valid values are hex (the default) and escape (the traditional PostgreSQL format)."),
		// 					AllowedValues: to.Ptr("escape,hex"),
		// 					DataType: to.Ptr(armpostgresql.ConfigurationDataTypeEnumeration),
		// 					DefaultValue: to.Ptr("hex"),
		// 					DocumentationLink: to.Ptr("https://www.postgresql.org/docs/13/runtime-config-client.html#GUC-BYTEA-OUTPUT"),
		// 					IsConfigPendingRestart: to.Ptr(false),
		// 					IsDynamicConfig: to.Ptr(true),
		// 					IsReadOnly: to.Ptr(false),
		// 					Source: to.Ptr("system-default"),
		// 					Value: to.Ptr("hex"),
		// 				},
		// 			},
		// 			{
		// 				Name: to.Ptr("check_function_bodies"),
		// 				Type: to.Ptr("Microsoft.DBforPostgreSQL/flexibleServers/configurations"),
		// 				ID: to.Ptr("/subscriptions/ffffffff-ffff-ffff-ffff-ffffffffffff/resourceGroups/exampleresourcegroup/providers/Microsoft.DBforPostgreSQL/flexibleServers/exampleserver/configurations/check_function_bodies"),
		// 				Properties: &armpostgresql.ConfigurationProperties{
		// 					Description: to.Ptr("Checks function bodies during CREATE FUNCTION."),
		// 					AllowedValues: to.Ptr("on,off"),
		// 					DataType: to.Ptr(armpostgresql.ConfigurationDataTypeBoolean),
		// 					DefaultValue: to.Ptr("on"),
		// 					DocumentationLink: to.Ptr("https://www.postgresql.org/docs/13/runtime-config-client.html#GUC-CHECK-FUNCTION-BODIES"),
		// 					IsConfigPendingRestart: to.Ptr(false),
		// 					IsDynamicConfig: to.Ptr(true),
		// 					IsReadOnly: to.Ptr(false),
		// 					Source: to.Ptr("system-default"),
		// 					Value: to.Ptr("on"),
		// 				},
		// 			},
		// 			{
		// 				Name: to.Ptr("checkpoint_completion_target"),
		// 				Type: to.Ptr("Microsoft.DBforPostgreSQL/flexibleServers/configurations"),
		// 				ID: to.Ptr("/subscriptions/ffffffff-ffff-ffff-ffff-ffffffffffff/resourceGroups/exampleresourcegroup/providers/Microsoft.DBforPostgreSQL/flexibleServers/exampleserver/configurations/checkpoint_completion_target"),
		// 				Properties: &armpostgresql.ConfigurationProperties{
		// 					Description: to.Ptr("Specifies the target of checkpoint completion, as a fraction of total time between checkpoints."),
		// 					AllowedValues: to.Ptr("0-1"),
		// 					DataType: to.Ptr(armpostgresql.ConfigurationDataTypeNumeric),
		// 					DefaultValue: to.Ptr("0.9"),
		// 					DocumentationLink: to.Ptr("https://www.postgresql.org/docs/13/runtime-config-wal.html#GUC-CHECKPOINT-COMPLETION-TARGET"),
		// 					IsConfigPendingRestart: to.Ptr(false),
		// 					IsDynamicConfig: to.Ptr(true),
		// 					IsReadOnly: to.Ptr(false),
		// 					Source: to.Ptr("system-default"),
		// 					Value: to.Ptr("0.9"),
		// 				},
		// 			},
		// 			{
		// 				Name: to.Ptr("checkpoint_flush_after"),
		// 				Type: to.Ptr("Microsoft.DBforPostgreSQL/flexibleServers/configurations"),
		// 				ID: to.Ptr("/subscriptions/ffffffff-ffff-ffff-ffff-ffffffffffff/resourceGroups/exampleresourcegroup/providers/Microsoft.DBforPostgreSQL/flexibleServers/exampleserver/configurations/checkpoint_flush_after"),
		// 				Properties: &armpostgresql.ConfigurationProperties{
		// 					Description: to.Ptr("Number of pages after which previously performed writes are flushed to disk."),
		// 					AllowedValues: to.Ptr("0-256"),
		// 					DataType: to.Ptr(armpostgresql.ConfigurationDataTypeInteger),
		// 					DefaultValue: to.Ptr("32"),
		// 					DocumentationLink: to.Ptr("https://www.postgresql.org/docs/13/runtime-config-wal.html#GUC-CHECKPOINT-FLUSH-AFTER"),
		// 					IsConfigPendingRestart: to.Ptr(false),
		// 					IsDynamicConfig: to.Ptr(true),
		// 					IsReadOnly: to.Ptr(true),
		// 					Source: to.Ptr("system-default"),
		// 					Unit: to.Ptr("8KB"),
		// 					Value: to.Ptr("32"),
		// 				},
		// 			},
		// 			{
		// 				Name: to.Ptr("checkpoint_timeout"),
		// 				Type: to.Ptr("Microsoft.DBforPostgreSQL/flexibleServers/configurations"),
		// 				ID: to.Ptr("/subscriptions/ffffffff-ffff-ffff-ffff-ffffffffffff/resourceGroups/exampleresourcegroup/providers/Microsoft.DBforPostgreSQL/flexibleServers/exampleserver/configurations/checkpoint_timeout"),
		// 				Properties: &armpostgresql.ConfigurationProperties{
		// 					Description: to.Ptr("Maximum time between automatic WAL checkpoints, in seconds. The valid range is between 30 seconds and one day."),
		// 					AllowedValues: to.Ptr("30-86400"),
		// 					DataType: to.Ptr(armpostgresql.ConfigurationDataTypeInteger),
		// 					DefaultValue: to.Ptr("600"),
		// 					DocumentationLink: to.Ptr("https://www.postgresql.org/docs/13/runtime-config-wal.html#GUC-CHECKPOINT-TIMEOUT"),
		// 					IsConfigPendingRestart: to.Ptr(false),
		// 					IsDynamicConfig: to.Ptr(true),
		// 					IsReadOnly: to.Ptr(false),
		// 					Source: to.Ptr("system-default"),
		// 					Unit: to.Ptr("seconds"),
		// 					Value: to.Ptr("600"),
		// 				},
		// 			},
		// 			{
		// 				Name: to.Ptr("checkpoint_warning"),
		// 				Type: to.Ptr("Microsoft.DBforPostgreSQL/flexibleServers/configurations"),
		// 				ID: to.Ptr("/subscriptions/ffffffff-ffff-ffff-ffff-ffffffffffff/resourceGroups/exampleresourcegroup/providers/Microsoft.DBforPostgreSQL/flexibleServers/exampleserver/configurations/checkpoint_warning"),
		// 				Properties: &armpostgresql.ConfigurationProperties{
		// 					Description: to.Ptr("Writes a warning message if checkpoints caused by the filling of WAL segment more frequently than this."),
		// 					AllowedValues: to.Ptr("0-2147483647"),
		// 					DataType: to.Ptr(armpostgresql.ConfigurationDataTypeInteger),
		// 					DefaultValue: to.Ptr("30"),
		// 					DocumentationLink: to.Ptr("https://www.postgresql.org/docs/13/runtime-config-wal.html#GUC-CHECKPOINT-WARNING"),
		// 					IsConfigPendingRestart: to.Ptr(false),
		// 					IsDynamicConfig: to.Ptr(true),
		// 					IsReadOnly: to.Ptr(false),
		// 					Source: to.Ptr("system-default"),
		// 					Unit: to.Ptr("seconds"),
		// 					Value: to.Ptr("30"),
		// 				},
		// 			},
		// 			{
		// 				Name: to.Ptr("client_encoding"),
		// 				Type: to.Ptr("Microsoft.DBforPostgreSQL/flexibleServers/configurations"),
		// 				ID: to.Ptr("/subscriptions/ffffffff-ffff-ffff-ffff-ffffffffffff/resourceGroups/exampleresourcegroup/providers/Microsoft.DBforPostgreSQL/flexibleServers/exampleserver/configurations/client_encoding"),
		// 				Properties: &armpostgresql.ConfigurationProperties{
		// 					Description: to.Ptr("Sets the client-side encoding (character set). The default is to use the database encoding."),
		// 					AllowedValues: to.Ptr("BIG5,EUC_CN,EUC_JP,EUC_JIS_2004,EUC_KR,EUC_TW,GB18030,GBK,ISO_8859_5,ISO_8859_6,ISO_8859_7,ISO_8859_8,JOHAB,KOI8R,KOI8U,LATIN1,LATIN2,LATIN3,LATIN4,LATIN5,LATIN6,LATIN7,LATIN8,LATIN9,LATIN10,MULE_INTERNAL,SJIS,SHIFT_JIS_2004,SQL_ASCII,UHC,UTF8,WIN866,WIN874,WIN1250,WIN1251,WIN1252,WIN1253,WIN1254,WIN1255,WIN1256,WIN1257,WIN1258"),
		// 					DataType: to.Ptr(armpostgresql.ConfigurationDataTypeEnumeration),
		// 					DefaultValue: to.Ptr("UTF8"),
		// 					DocumentationLink: to.Ptr("https://www.postgresql.org/docs/13/runtime-config-client.html#GUC-CLIENT-ENCODING"),
		// 					IsConfigPendingRestart: to.Ptr(false),
		// 					IsDynamicConfig: to.Ptr(true),
		// 					IsReadOnly: to.Ptr(false),
		// 					Source: to.Ptr("system-default"),
		// 					Value: to.Ptr("UTF8"),
		// 				},
		// 			},
		// 			{
		// 				Name: to.Ptr("client_min_messages"),
		// 				Type: to.Ptr("Microsoft.DBforPostgreSQL/flexibleServers/configurations"),
		// 				ID: to.Ptr("/subscriptions/ffffffff-ffff-ffff-ffff-ffffffffffff/resourceGroups/exampleresourcegroup/providers/Microsoft.DBforPostgreSQL/flexibleServers/exampleserver/configurations/client_min_messages"),
		// 				Properties: &armpostgresql.ConfigurationProperties{
		// 					Description: to.Ptr("Controls the message levels that are sent to the client."),
		// 					AllowedValues: to.Ptr("debug5,debug4,debug3,debug2,debug1,log,notice,warning,error"),
		// 					DataType: to.Ptr(armpostgresql.ConfigurationDataTypeEnumeration),
		// 					DefaultValue: to.Ptr("notice"),
		// 					DocumentationLink: to.Ptr("https://www.postgresql.org/docs/13/runtime-config-client.html#GUC-CLIENT-MIN-MESSAGES"),
		// 					IsConfigPendingRestart: to.Ptr(false),
		// 					IsDynamicConfig: to.Ptr(true),
		// 					IsReadOnly: to.Ptr(false),
		// 					Source: to.Ptr("system-default"),
		// 					Value: to.Ptr("notice"),
		// 				},
		// 			},
		// 			{
		// 				Name: to.Ptr("cluster_name"),
		// 				Type: to.Ptr("Microsoft.DBforPostgreSQL/flexibleServers/configurations"),
		// 				ID: to.Ptr("/subscriptions/ffffffff-ffff-ffff-ffff-ffffffffffff/resourceGroups/exampleresourcegroup/providers/Microsoft.DBforPostgreSQL/flexibleServers/exampleserver/configurations/cluster_name"),
		// 				Properties: &armpostgresql.ConfigurationProperties{
		// 					Description: to.Ptr("Sets the name of the cluster, which is included in the process title."),
		// 					AllowedValues: to.Ptr(".*"),
		// 					DataType: to.Ptr(armpostgresql.ConfigurationDataTypeString),
		// 					DefaultValue: to.Ptr(""),
		// 					IsConfigPendingRestart: to.Ptr(false),
		// 					IsDynamicConfig: to.Ptr(false),
		// 					IsReadOnly: to.Ptr(true),
		// 					Source: to.Ptr("system-default"),
		// 					Value: to.Ptr(""),
		// 				},
		// 			},
		// 			{
		// 				Name: to.Ptr("commit_delay"),
		// 				Type: to.Ptr("Microsoft.DBforPostgreSQL/flexibleServers/configurations"),
		// 				ID: to.Ptr("/subscriptions/ffffffff-ffff-ffff-ffff-ffffffffffff/resourceGroups/exampleresourcegroup/providers/Microsoft.DBforPostgreSQL/flexibleServers/exampleserver/configurations/commit_delay"),
		// 				Properties: &armpostgresql.ConfigurationProperties{
		// 					Description: to.Ptr("Sets the delay in microseconds between transaction commit and flushing WAL to disk."),
		// 					AllowedValues: to.Ptr("0-100000"),
		// 					DataType: to.Ptr(armpostgresql.ConfigurationDataTypeInteger),
		// 					DefaultValue: to.Ptr("0"),
		// 					DocumentationLink: to.Ptr("https://www.postgresql.org/docs/13/runtime-config-wal.html#GUC-COMMIT-DELAY"),
		// 					IsConfigPendingRestart: to.Ptr(false),
		// 					IsDynamicConfig: to.Ptr(true),
		// 					IsReadOnly: to.Ptr(false),
		// 					Source: to.Ptr("system-default"),
		// 					Unit: to.Ptr("microseconds"),
		// 					Value: to.Ptr("0"),
		// 				},
		// 			},
		// 			{
		// 				Name: to.Ptr("commit_siblings"),
		// 				Type: to.Ptr("Microsoft.DBforPostgreSQL/flexibleServers/configurations"),
		// 				ID: to.Ptr("/subscriptions/ffffffff-ffff-ffff-ffff-ffffffffffff/resourceGroups/exampleresourcegroup/providers/Microsoft.DBforPostgreSQL/flexibleServers/exampleserver/configurations/commit_siblings"),
		// 				Properties: &armpostgresql.ConfigurationProperties{
		// 					Description: to.Ptr("Sets the minimum concurrent open transactions before performing commit_delay."),
		// 					AllowedValues: to.Ptr("0-1000"),
		// 					DataType: to.Ptr(armpostgresql.ConfigurationDataTypeInteger),
		// 					DefaultValue: to.Ptr("5"),
		// 					DocumentationLink: to.Ptr("https://www.postgresql.org/docs/13/runtime-config-wal.html#GUC-COMMIT-SIBLINGS"),
		// 					IsConfigPendingRestart: to.Ptr(false),
		// 					IsDynamicConfig: to.Ptr(true),
		// 					IsReadOnly: to.Ptr(false),
		// 					Source: to.Ptr("system-default"),
		// 					Value: to.Ptr("5"),
		// 				},
		// 			},
		// 			{
		// 				Name: to.Ptr("config_file"),
		// 				Type: to.Ptr("Microsoft.DBforPostgreSQL/flexibleServers/configurations"),
		// 				ID: to.Ptr("/subscriptions/ffffffff-ffff-ffff-ffff-ffffffffffff/resourceGroups/exampleresourcegroup/providers/Microsoft.DBforPostgreSQL/flexibleServers/exampleserver/configurations/config_file"),
		// 				Properties: &armpostgresql.ConfigurationProperties{
		// 					Description: to.Ptr("Sets the server's main configuration file."),
		// 					AllowedValues: to.Ptr(".*"),
		// 					DataType: to.Ptr(armpostgresql.ConfigurationDataTypeString),
		// 					DefaultValue: to.Ptr(""),
		// 					DocumentationLink: to.Ptr("https://www.postgresql.org/docs/13/runtime-config-file-locations.html#GUC-CONFIG-FILE"),
		// 					IsConfigPendingRestart: to.Ptr(false),
		// 					IsDynamicConfig: to.Ptr(false),
		// 					IsReadOnly: to.Ptr(true),
		// 					Source: to.Ptr("user-override"),
		// 					Value: to.Ptr("/datadrive/pg/data/postgresql.conf"),
		// 				},
		// 			},
		// 			{
		// 				Name: to.Ptr("connection_throttle.bucket_limit"),
		// 				Type: to.Ptr("Microsoft.DBforPostgreSQL/flexibleServers/configurations"),
		// 				ID: to.Ptr("/subscriptions/ffffffff-ffff-ffff-ffff-ffffffffffff/resourceGroups/exampleresourcegroup/providers/Microsoft.DBforPostgreSQL/flexibleServers/exampleserver/configurations/connection_throttle.bucket_limit"),
		// 				Properties: &armpostgresql.ConfigurationProperties{
		// 					Description: to.Ptr("Max login tokens per bucket."),
		// 					AllowedValues: to.Ptr("1-2147483647"),
		// 					DataType: to.Ptr(armpostgresql.ConfigurationDataTypeInteger),
		// 					DefaultValue: to.Ptr("2000"),
		// 					IsConfigPendingRestart: to.Ptr(false),
		// 					IsDynamicConfig: to.Ptr(true),
		// 					IsReadOnly: to.Ptr(false),
		// 					Source: to.Ptr("system-default"),
		// 					Value: to.Ptr("2000"),
		// 				},
		// 			},
		// 			{
		// 				Name: to.Ptr("connection_throttle.enable"),
		// 				Type: to.Ptr("Microsoft.DBforPostgreSQL/flexibleServers/configurations"),
		// 				ID: to.Ptr("/subscriptions/ffffffff-ffff-ffff-ffff-ffffffffffff/resourceGroups/exampleresourcegroup/providers/Microsoft.DBforPostgreSQL/flexibleServers/exampleserver/configurations/connection_throttle.enable"),
		// 				Properties: &armpostgresql.ConfigurationProperties{
		// 					Description: to.Ptr("Enables temporary connection throttling per IP for too many login failures."),
		// 					AllowedValues: to.Ptr("on,off"),
		// 					DataType: to.Ptr(armpostgresql.ConfigurationDataTypeBoolean),
		// 					DefaultValue: to.Ptr("off"),
		// 					IsConfigPendingRestart: to.Ptr(false),
		// 					IsDynamicConfig: to.Ptr(true),
		// 					IsReadOnly: to.Ptr(false),
		// 					Source: to.Ptr("system-default"),
		// 					Value: to.Ptr("off"),
		// 				},
		// 			},
		// 			{
		// 				Name: to.Ptr("connection_throttle.factor_bias"),
		// 				Type: to.Ptr("Microsoft.DBforPostgreSQL/flexibleServers/configurations"),
		// 				ID: to.Ptr("/subscriptions/ffffffff-ffff-ffff-ffff-ffffffffffff/resourceGroups/exampleresourcegroup/providers/Microsoft.DBforPostgreSQL/flexibleServers/exampleserver/configurations/connection_throttle.factor_bias"),
		// 				Properties: &armpostgresql.ConfigurationProperties{
		// 					Description: to.Ptr("The factor bias for calculating number of tokens for an IP's bucket."),
		// 					AllowedValues: to.Ptr("0.0-0.9"),
		// 					DataType: to.Ptr(armpostgresql.ConfigurationDataTypeNumeric),
		// 					DefaultValue: to.Ptr("0.8"),
		// 					IsConfigPendingRestart: to.Ptr(false),
		// 					IsDynamicConfig: to.Ptr(true),
		// 					IsReadOnly: to.Ptr(false),
		// 					Source: to.Ptr("system-default"),
		// 					Value: to.Ptr("0.8"),
		// 				},
		// 			},
		// 			{
		// 				Name: to.Ptr("connection_throttle.hash_entries_max"),
		// 				Type: to.Ptr("Microsoft.DBforPostgreSQL/flexibleServers/configurations"),
		// 				ID: to.Ptr("/subscriptions/ffffffff-ffff-ffff-ffff-ffffffffffff/resourceGroups/exampleresourcegroup/providers/Microsoft.DBforPostgreSQL/flexibleServers/exampleserver/configurations/connection_throttle.hash_entries_max"),
		// 				Properties: &armpostgresql.ConfigurationProperties{
		// 					Description: to.Ptr("Max number of entries in the login failures hash table."),
		// 					AllowedValues: to.Ptr("1-2147483647"),
		// 					DataType: to.Ptr(armpostgresql.ConfigurationDataTypeInteger),
		// 					DefaultValue: to.Ptr("500"),
		// 					IsConfigPendingRestart: to.Ptr(false),
		// 					IsDynamicConfig: to.Ptr(true),
		// 					IsReadOnly: to.Ptr(false),
		// 					Source: to.Ptr("system-default"),
		// 					Value: to.Ptr("500"),
		// 				},
		// 			},
		// 			{
		// 				Name: to.Ptr("connection_throttle.reset_time"),
		// 				Type: to.Ptr("Microsoft.DBforPostgreSQL/flexibleServers/configurations"),
		// 				ID: to.Ptr("/subscriptions/ffffffff-ffff-ffff-ffff-ffffffffffff/resourceGroups/exampleresourcegroup/providers/Microsoft.DBforPostgreSQL/flexibleServers/exampleserver/configurations/connection_throttle.reset_time"),
		// 				Properties: &armpostgresql.ConfigurationProperties{
		// 					Description: to.Ptr("Time between resetting the login bucket."),
		// 					AllowedValues: to.Ptr("1-2147483647"),
		// 					DataType: to.Ptr(armpostgresql.ConfigurationDataTypeInteger),
		// 					DefaultValue: to.Ptr("120"),
		// 					IsConfigPendingRestart: to.Ptr(false),
		// 					IsDynamicConfig: to.Ptr(true),
		// 					IsReadOnly: to.Ptr(false),
		// 					Source: to.Ptr("system-default"),
		// 					Unit: to.Ptr("seconds"),
		// 					Value: to.Ptr("120"),
		// 				},
		// 			},
		// 			{
		// 				Name: to.Ptr("connection_throttle.restore_factor"),
		// 				Type: to.Ptr("Microsoft.DBforPostgreSQL/flexibleServers/configurations"),
		// 				ID: to.Ptr("/subscriptions/ffffffff-ffff-ffff-ffff-ffffffffffff/resourceGroups/exampleresourcegroup/providers/Microsoft.DBforPostgreSQL/flexibleServers/exampleserver/configurations/connection_throttle.restore_factor"),
		// 				Properties: &armpostgresql.ConfigurationProperties{
		// 					Description: to.Ptr("Factor to increase number of tokens by for IPs with low failure rate."),
		// 					AllowedValues: to.Ptr("1.0-100.0"),
		// 					DataType: to.Ptr(armpostgresql.ConfigurationDataTypeNumeric),
		// 					DefaultValue: to.Ptr("2"),
		// 					IsConfigPendingRestart: to.Ptr(false),
		// 					IsDynamicConfig: to.Ptr(true),
		// 					IsReadOnly: to.Ptr(false),
		// 					Source: to.Ptr("system-default"),
		// 					Value: to.Ptr("2"),
		// 				},
		// 			},
		// 			{
		// 				Name: to.Ptr("connection_throttle.update_time"),
		// 				Type: to.Ptr("Microsoft.DBforPostgreSQL/flexibleServers/configurations"),
		// 				ID: to.Ptr("/subscriptions/ffffffff-ffff-ffff-ffff-ffffffffffff/resourceGroups/exampleresourcegroup/providers/Microsoft.DBforPostgreSQL/flexibleServers/exampleserver/configurations/connection_throttle.update_time"),
		// 				Properties: &armpostgresql.ConfigurationProperties{
		// 					Description: to.Ptr("Time between updating the login bucket."),
		// 					AllowedValues: to.Ptr("1-2147483647"),
		// 					DataType: to.Ptr(armpostgresql.ConfigurationDataTypeInteger),
		// 					DefaultValue: to.Ptr("20"),
		// 					IsConfigPendingRestart: to.Ptr(false),
		// 					IsDynamicConfig: to.Ptr(true),
		// 					IsReadOnly: to.Ptr(false),
		// 					Source: to.Ptr("system-default"),
		// 					Unit: to.Ptr("seconds"),
		// 					Value: to.Ptr("20"),
		// 				},
		// 			},
		// 			{
		// 				Name: to.Ptr("constraint_exclusion"),
		// 				Type: to.Ptr("Microsoft.DBforPostgreSQL/flexibleServers/configurations"),
		// 				ID: to.Ptr("/subscriptions/ffffffff-ffff-ffff-ffff-ffffffffffff/resourceGroups/exampleresourcegroup/providers/Microsoft.DBforPostgreSQL/flexibleServers/exampleserver/configurations/constraint_exclusion"),
		// 				Properties: &armpostgresql.ConfigurationProperties{
		// 					Description: to.Ptr("Controls the query planner's use of table constraints to optimize queries."),
		// 					AllowedValues: to.Ptr("partition,on,off"),
		// 					DataType: to.Ptr(armpostgresql.ConfigurationDataTypeEnumeration),
		// 					DefaultValue: to.Ptr("partition"),
		// 					DocumentationLink: to.Ptr("https://www.postgresql.org/docs/13/runtime-config-query.html#GUC-CONSTRAINT-EXCLUSION"),
		// 					IsConfigPendingRestart: to.Ptr(false),
		// 					IsDynamicConfig: to.Ptr(true),
		// 					IsReadOnly: to.Ptr(false),
		// 					Source: to.Ptr("system-default"),
		// 					Value: to.Ptr("partition"),
		// 				},
		// 			},
		// 			{
		// 				Name: to.Ptr("cpu_index_tuple_cost"),
		// 				Type: to.Ptr("Microsoft.DBforPostgreSQL/flexibleServers/configurations"),
		// 				ID: to.Ptr("/subscriptions/ffffffff-ffff-ffff-ffff-ffffffffffff/resourceGroups/exampleresourcegroup/providers/Microsoft.DBforPostgreSQL/flexibleServers/exampleserver/configurations/cpu_index_tuple_cost"),
		// 				Properties: &armpostgresql.ConfigurationProperties{
		// 					Description: to.Ptr("Sets the planner's estimate of the cost of processing each index entry during an index scan."),
		// 					AllowedValues: to.Ptr("0-1.79769e+308"),
		// 					DataType: to.Ptr(armpostgresql.ConfigurationDataTypeNumeric),
		// 					DefaultValue: to.Ptr("0.005"),
		// 					DocumentationLink: to.Ptr("https://www.postgresql.org/docs/13/runtime-config-query.html#GUC-CPU-INDEX-TUPLE-COST"),
		// 					IsConfigPendingRestart: to.Ptr(false),
		// 					IsDynamicConfig: to.Ptr(true),
		// 					IsReadOnly: to.Ptr(false),
		// 					Source: to.Ptr("system-default"),
		// 					Value: to.Ptr("0.005"),
		// 				},
		// 			},
		// 			{
		// 				Name: to.Ptr("cpu_operator_cost"),
		// 				Type: to.Ptr("Microsoft.DBforPostgreSQL/flexibleServers/configurations"),
		// 				ID: to.Ptr("/subscriptions/ffffffff-ffff-ffff-ffff-ffffffffffff/resourceGroups/exampleresourcegroup/providers/Microsoft.DBforPostgreSQL/flexibleServers/exampleserver/configurations/cpu_operator_cost"),
		// 				Properties: &armpostgresql.ConfigurationProperties{
		// 					Description: to.Ptr("Sets the planner's estimate of the cost of processing each operator or function executed during a query."),
		// 					AllowedValues: to.Ptr("0-1.79769e+308"),
		// 					DataType: to.Ptr(armpostgresql.ConfigurationDataTypeNumeric),
		// 					DefaultValue: to.Ptr("0.0025"),
		// 					DocumentationLink: to.Ptr("https://www.postgresql.org/docs/13/runtime-config-query.html#GUC-CPU-OPERATOR-COST"),
		// 					IsConfigPendingRestart: to.Ptr(false),
		// 					IsDynamicConfig: to.Ptr(true),
		// 					IsReadOnly: to.Ptr(false),
		// 					Source: to.Ptr("system-default"),
		// 					Value: to.Ptr("0.0025"),
		// 				},
		// 			},
		// 			{
		// 				Name: to.Ptr("cpu_tuple_cost"),
		// 				Type: to.Ptr("Microsoft.DBforPostgreSQL/flexibleServers/configurations"),
		// 				ID: to.Ptr("/subscriptions/ffffffff-ffff-ffff-ffff-ffffffffffff/resourceGroups/exampleresourcegroup/providers/Microsoft.DBforPostgreSQL/flexibleServers/exampleserver/configurations/cpu_tuple_cost"),
		// 				Properties: &armpostgresql.ConfigurationProperties{
		// 					Description: to.Ptr("Sets the planner's estimate of the cost of processing each row during a query."),
		// 					AllowedValues: to.Ptr("0-1.79769e+308"),
		// 					DataType: to.Ptr(armpostgresql.ConfigurationDataTypeNumeric),
		// 					DefaultValue: to.Ptr("0.01"),
		// 					DocumentationLink: to.Ptr("https://www.postgresql.org/docs/13/runtime-config-query.html#GUC-CPU-TUPLE-COST"),
		// 					IsConfigPendingRestart: to.Ptr(false),
		// 					IsDynamicConfig: to.Ptr(true),
		// 					IsReadOnly: to.Ptr(false),
		// 					Source: to.Ptr("system-default"),
		// 					Value: to.Ptr("0.01"),
		// 				},
		// 			},
		// 			{
		// 				Name: to.Ptr("cron.database_name"),
		// 				Type: to.Ptr("Microsoft.DBforPostgreSQL/flexibleServers/configurations"),
		// 				ID: to.Ptr("/subscriptions/ffffffff-ffff-ffff-ffff-ffffffffffff/resourceGroups/exampleresourcegroup/providers/Microsoft.DBforPostgreSQL/flexibleServers/exampleserver/configurations/cron.database_name"),
		// 				Properties: &armpostgresql.ConfigurationProperties{
		// 					Description: to.Ptr("Sets the database in which pg_cron metadata is kept."),
		// 					AllowedValues: to.Ptr("[A-Za-z0-9_]+"),
		// 					DataType: to.Ptr(armpostgresql.ConfigurationDataTypeString),
		// 					DefaultValue: to.Ptr("postgres"),
		// 					DocumentationLink: to.Ptr("https://github.com/citusdata/pg_cron"),
		// 					IsConfigPendingRestart: to.Ptr(false),
		// 					IsDynamicConfig: to.Ptr(false),
		// 					IsReadOnly: to.Ptr(false),
		// 					Source: to.Ptr("system-default"),
		// 					Value: to.Ptr("postgres"),
		// 				},
		// 			},
		// 			{
		// 				Name: to.Ptr("cron.log_run"),
		// 				Type: to.Ptr("Microsoft.DBforPostgreSQL/flexibleServers/configurations"),
		// 				ID: to.Ptr("/subscriptions/ffffffff-ffff-ffff-ffff-ffffffffffff/resourceGroups/exampleresourcegroup/providers/Microsoft.DBforPostgreSQL/flexibleServers/exampleserver/configurations/cron.log_run"),
		// 				Properties: &armpostgresql.ConfigurationProperties{
		// 					Description: to.Ptr("Log all jobs runs into the job_run_details table."),
		// 					AllowedValues: to.Ptr("on,off"),
		// 					DataType: to.Ptr(armpostgresql.ConfigurationDataTypeBoolean),
		// 					DefaultValue: to.Ptr("on"),
		// 					DocumentationLink: to.Ptr("https://github.com/citusdata/pg_cron"),
		// 					IsConfigPendingRestart: to.Ptr(false),
		// 					IsDynamicConfig: to.Ptr(false),
		// 					IsReadOnly: to.Ptr(false),
		// 					Source: to.Ptr("system-default"),
		// 					Value: to.Ptr("on"),
		// 				},
		// 			},
		// 			{
		// 				Name: to.Ptr("cron.log_statement"),
		// 				Type: to.Ptr("Microsoft.DBforPostgreSQL/flexibleServers/configurations"),
		// 				ID: to.Ptr("/subscriptions/ffffffff-ffff-ffff-ffff-ffffffffffff/resourceGroups/exampleresourcegroup/providers/Microsoft.DBforPostgreSQL/flexibleServers/exampleserver/configurations/cron.log_statement"),
		// 				Properties: &armpostgresql.ConfigurationProperties{
		// 					Description: to.Ptr("Log all cron statements prior to execution."),
		// 					AllowedValues: to.Ptr("on,off"),
		// 					DataType: to.Ptr(armpostgresql.ConfigurationDataTypeBoolean),
		// 					DefaultValue: to.Ptr("on"),
		// 					DocumentationLink: to.Ptr("https://github.com/citusdata/pg_cron"),
		// 					IsConfigPendingRestart: to.Ptr(false),
		// 					IsDynamicConfig: to.Ptr(false),
		// 					IsReadOnly: to.Ptr(false),
		// 					Source: to.Ptr("system-default"),
		// 					Value: to.Ptr("on"),
		// 				},
		// 			},
		// 			{
		// 				Name: to.Ptr("cron.max_running_jobs"),
		// 				Type: to.Ptr("Microsoft.DBforPostgreSQL/flexibleServers/configurations"),
		// 				ID: to.Ptr("/subscriptions/ffffffff-ffff-ffff-ffff-ffffffffffff/resourceGroups/exampleresourcegroup/providers/Microsoft.DBforPostgreSQL/flexibleServers/exampleserver/configurations/cron.max_running_jobs"),
		// 				Properties: &armpostgresql.ConfigurationProperties{
		// 					Description: to.Ptr("Sets the maximum number of jobs that can run concurrently. This value is limited by max_connections."),
		// 					AllowedValues: to.Ptr("0-5000"),
		// 					DataType: to.Ptr(armpostgresql.ConfigurationDataTypeInteger),
		// 					DefaultValue: to.Ptr("32"),
		// 					DocumentationLink: to.Ptr("https://github.com/citusdata/pg_cron"),
		// 					IsConfigPendingRestart: to.Ptr(false),
		// 					IsDynamicConfig: to.Ptr(false),
		// 					IsReadOnly: to.Ptr(false),
		// 					Source: to.Ptr("system-default"),
		// 					Value: to.Ptr("32"),
		// 				},
		// 			},
		// 			{
		// 				Name: to.Ptr("cursor_tuple_fraction"),
		// 				Type: to.Ptr("Microsoft.DBforPostgreSQL/flexibleServers/configurations"),
		// 				ID: to.Ptr("/subscriptions/ffffffff-ffff-ffff-ffff-ffffffffffff/resourceGroups/exampleresourcegroup/providers/Microsoft.DBforPostgreSQL/flexibleServers/exampleserver/configurations/cursor_tuple_fraction"),
		// 				Properties: &armpostgresql.ConfigurationProperties{
		// 					Description: to.Ptr("Sets the planner's estimate of the fraction of a cursor's rows that will be retrieved."),
		// 					AllowedValues: to.Ptr("0-1"),
		// 					DataType: to.Ptr(armpostgresql.ConfigurationDataTypeNumeric),
		// 					DefaultValue: to.Ptr("0.1"),
		// 					DocumentationLink: to.Ptr("https://www.postgresql.org/docs/13/runtime-config-query.html#GUC-CURSOR-TUPLE-FRACTION"),
		// 					IsConfigPendingRestart: to.Ptr(false),
		// 					IsDynamicConfig: to.Ptr(true),
		// 					IsReadOnly: to.Ptr(false),
		// 					Source: to.Ptr("system-default"),
		// 					Value: to.Ptr("0.1"),
		// 				},
		// 			},
		// 			{
		// 				Name: to.Ptr("data_checksums"),
		// 				Type: to.Ptr("Microsoft.DBforPostgreSQL/flexibleServers/configurations"),
		// 				ID: to.Ptr("/subscriptions/ffffffff-ffff-ffff-ffff-ffffffffffff/resourceGroups/exampleresourcegroup/providers/Microsoft.DBforPostgreSQL/flexibleServers/exampleserver/configurations/data_checksums"),
		// 				Properties: &armpostgresql.ConfigurationProperties{
		// 					Description: to.Ptr("Shows whether data checksums are turned on for this cluster."),
		// 					AllowedValues: to.Ptr("on,off"),
		// 					DataType: to.Ptr(armpostgresql.ConfigurationDataTypeBoolean),
		// 					DefaultValue: to.Ptr("off"),
		// 					DocumentationLink: to.Ptr("https://www.postgresql.org/docs/13/runtime-config-preset.html#GUC-DATA-CHECKSUMS"),
		// 					IsConfigPendingRestart: to.Ptr(false),
		// 					IsDynamicConfig: to.Ptr(true),
		// 					IsReadOnly: to.Ptr(true),
		// 					Source: to.Ptr("user-override"),
		// 					Value: to.Ptr("on"),
		// 				},
		// 			},
		// 			{
		// 				Name: to.Ptr("data_directory"),
		// 				Type: to.Ptr("Microsoft.DBforPostgreSQL/flexibleServers/configurations"),
		// 				ID: to.Ptr("/subscriptions/ffffffff-ffff-ffff-ffff-ffffffffffff/resourceGroups/exampleresourcegroup/providers/Microsoft.DBforPostgreSQL/flexibleServers/exampleserver/configurations/data_directory"),
		// 				Properties: &armpostgresql.ConfigurationProperties{
		// 					Description: to.Ptr("Sets the server's data directory."),
		// 					AllowedValues: to.Ptr(".*"),
		// 					DataType: to.Ptr(armpostgresql.ConfigurationDataTypeString),
		// 					DefaultValue: to.Ptr(""),
		// 					DocumentationLink: to.Ptr("https://www.postgresql.org/docs/13/runtime-config-file-locations.html#GUC-DATA-DIRECTORY"),
		// 					IsConfigPendingRestart: to.Ptr(false),
		// 					IsDynamicConfig: to.Ptr(false),
		// 					IsReadOnly: to.Ptr(true),
		// 					Source: to.Ptr("user-override"),
		// 					Value: to.Ptr("/datadrive/pg/data"),
		// 				},
		// 			},
		// 			{
		// 				Name: to.Ptr("data_directory_mode"),
		// 				Type: to.Ptr("Microsoft.DBforPostgreSQL/flexibleServers/configurations"),
		// 				ID: to.Ptr("/subscriptions/ffffffff-ffff-ffff-ffff-ffffffffffff/resourceGroups/exampleresourcegroup/providers/Microsoft.DBforPostgreSQL/flexibleServers/exampleserver/configurations/data_directory_mode"),
		// 				Properties: &armpostgresql.ConfigurationProperties{
		// 					Description: to.Ptr("Mode of the data directory."),
		// 					AllowedValues: to.Ptr("0-511"),
		// 					DataType: to.Ptr(armpostgresql.ConfigurationDataTypeInteger),
		// 					DefaultValue: to.Ptr("448"),
		// 					DocumentationLink: to.Ptr("https://www.postgresql.org/docs/13/runtime-config-preset.html#GUC-DATA-DIRECTORY-MODE"),
		// 					IsConfigPendingRestart: to.Ptr(false),
		// 					IsDynamicConfig: to.Ptr(true),
		// 					IsReadOnly: to.Ptr(true),
		// 					Source: to.Ptr("user-override"),
		// 					Value: to.Ptr("0700"),
		// 				},
		// 			},
		// 			{
		// 				Name: to.Ptr("data_sync_retry"),
		// 				Type: to.Ptr("Microsoft.DBforPostgreSQL/flexibleServers/configurations"),
		// 				ID: to.Ptr("/subscriptions/ffffffff-ffff-ffff-ffff-ffffffffffff/resourceGroups/exampleresourcegroup/providers/Microsoft.DBforPostgreSQL/flexibleServers/exampleserver/configurations/data_sync_retry"),
		// 				Properties: &armpostgresql.ConfigurationProperties{
		// 					Description: to.Ptr("Whether to continue running after a failure to sync data files."),
		// 					AllowedValues: to.Ptr("on,off"),
		// 					DataType: to.Ptr(armpostgresql.ConfigurationDataTypeBoolean),
		// 					DefaultValue: to.Ptr("off"),
		// 					DocumentationLink: to.Ptr("https://www.postgresql.org/docs/13/runtime-config-error-handling.html#GUC-DATA-SYNC-RETRY"),
		// 					IsConfigPendingRestart: to.Ptr(false),
		// 					IsDynamicConfig: to.Ptr(false),
		// 					IsReadOnly: to.Ptr(true),
		// 					Source: to.Ptr("system-default"),
		// 					Value: to.Ptr("off"),
		// 				},
		// 			},
		// 			{
		// 				Name: to.Ptr("DateStyle"),
		// 				Type: to.Ptr("Microsoft.DBforPostgreSQL/flexibleServers/configurations"),
		// 				ID: to.Ptr("/subscriptions/ffffffff-ffff-ffff-ffff-ffffffffffff/resourceGroups/exampleresourcegroup/providers/Microsoft.DBforPostgreSQL/flexibleServers/exampleserver/configurations/DateStyle"),
		// 				Properties: &armpostgresql.ConfigurationProperties{
		// 					Description: to.Ptr("Sets the display format for date and time values."),
		// 					AllowedValues: to.Ptr("(ISO|POSTGRES|SQL|GERMAN)(, (DMY|MDY|YMD))?"),
		// 					DataType: to.Ptr(armpostgresql.ConfigurationDataTypeString),
		// 					DefaultValue: to.Ptr("ISO, MDY"),
		// 					DocumentationLink: to.Ptr("https://www.postgresql.org/docs/13/runtime-config-client.html#GUC-DATESTYLE"),
		// 					IsConfigPendingRestart: to.Ptr(false),
		// 					IsDynamicConfig: to.Ptr(true),
		// 					IsReadOnly: to.Ptr(false),
		// 					Source: to.Ptr("system-default"),
		// 					Value: to.Ptr("ISO, MDY"),
		// 				},
		// 			},
		// 			{
		// 				Name: to.Ptr("db_user_namespace"),
		// 				Type: to.Ptr("Microsoft.DBforPostgreSQL/flexibleServers/configurations"),
		// 				ID: to.Ptr("/subscriptions/ffffffff-ffff-ffff-ffff-ffffffffffff/resourceGroups/exampleresourcegroup/providers/Microsoft.DBforPostgreSQL/flexibleServers/exampleserver/configurations/db_user_namespace"),
		// 				Properties: &armpostgresql.ConfigurationProperties{
		// 					Description: to.Ptr("Enables per-database user names."),
		// 					AllowedValues: to.Ptr("on,off"),
		// 					DataType: to.Ptr(armpostgresql.ConfigurationDataTypeBoolean),
		// 					DefaultValue: to.Ptr("off"),
		// 					DocumentationLink: to.Ptr("https://www.postgresql.org/docs/13/runtime-config-connection.html#GUC-DB-USER-NAMESPACE"),
		// 					IsConfigPendingRestart: to.Ptr(false),
		// 					IsDynamicConfig: to.Ptr(true),
		// 					IsReadOnly: to.Ptr(true),
		// 					Source: to.Ptr("system-default"),
		// 					Value: to.Ptr("off"),
		// 				},
		// 			},
		// 			{
		// 				Name: to.Ptr("deadlock_timeout"),
		// 				Type: to.Ptr("Microsoft.DBforPostgreSQL/flexibleServers/configurations"),
		// 				ID: to.Ptr("/subscriptions/ffffffff-ffff-ffff-ffff-ffffffffffff/resourceGroups/exampleresourcegroup/providers/Microsoft.DBforPostgreSQL/flexibleServers/exampleserver/configurations/deadlock_timeout"),
		// 				Properties: &armpostgresql.ConfigurationProperties{
		// 					Description: to.Ptr("Sets the amount of time, in milliseconds, to wait on a lock before checking for deadlock."),
		// 					AllowedValues: to.Ptr("1-2147483647"),
		// 					DataType: to.Ptr(armpostgresql.ConfigurationDataTypeInteger),
		// 					DefaultValue: to.Ptr("1000"),
		// 					DocumentationLink: to.Ptr("https://www.postgresql.org/docs/13/runtime-config-locks.html#GUC-DEADLOCK-TIMEOUT"),
		// 					IsConfigPendingRestart: to.Ptr(false),
		// 					IsDynamicConfig: to.Ptr(true),
		// 					IsReadOnly: to.Ptr(false),
		// 					Source: to.Ptr("system-default"),
		// 					Unit: to.Ptr("milliseconds"),
		// 					Value: to.Ptr("1000"),
		// 				},
		// 			},
		// 			{
		// 				Name: to.Ptr("debug_assertions"),
		// 				Type: to.Ptr("Microsoft.DBforPostgreSQL/flexibleServers/configurations"),
		// 				ID: to.Ptr("/subscriptions/ffffffff-ffff-ffff-ffff-ffffffffffff/resourceGroups/exampleresourcegroup/providers/Microsoft.DBforPostgreSQL/flexibleServers/exampleserver/configurations/debug_assertions"),
		// 				Properties: &armpostgresql.ConfigurationProperties{
		// 					Description: to.Ptr("Shows whether the running server has assertion checks enabled."),
		// 					AllowedValues: to.Ptr("on,off"),
		// 					DataType: to.Ptr(armpostgresql.ConfigurationDataTypeBoolean),
		// 					DefaultValue: to.Ptr("off"),
		// 					IsConfigPendingRestart: to.Ptr(false),
		// 					IsDynamicConfig: to.Ptr(true),
		// 					IsReadOnly: to.Ptr(true),
		// 					Source: to.Ptr("system-default"),
		// 					Value: to.Ptr("off"),
		// 				},
		// 			},
		// 			{
		// 				Name: to.Ptr("debug_pretty_print"),
		// 				Type: to.Ptr("Microsoft.DBforPostgreSQL/flexibleServers/configurations"),
		// 				ID: to.Ptr("/subscriptions/ffffffff-ffff-ffff-ffff-ffffffffffff/resourceGroups/exampleresourcegroup/providers/Microsoft.DBforPostgreSQL/flexibleServers/exampleserver/configurations/debug_pretty_print"),
		// 				Properties: &armpostgresql.ConfigurationProperties{
		// 					Description: to.Ptr("Indents parse and plan tree displays."),
		// 					AllowedValues: to.Ptr("on,off"),
		// 					DataType: to.Ptr(armpostgresql.ConfigurationDataTypeBoolean),
		// 					DefaultValue: to.Ptr("on"),
		// 					DocumentationLink: to.Ptr("https://www.postgresql.org/docs/13/runtime-config-logging.html#id-1.6.6.11.5.3.3.1.3"),
		// 					IsConfigPendingRestart: to.Ptr(false),
		// 					IsDynamicConfig: to.Ptr(true),
		// 					IsReadOnly: to.Ptr(false),
		// 					Source: to.Ptr("system-default"),
		// 					Value: to.Ptr("on"),
		// 				},
		// 			},
		// 			{
		// 				Name: to.Ptr("debug_print_parse"),
		// 				Type: to.Ptr("Microsoft.DBforPostgreSQL/flexibleServers/configurations"),
		// 				ID: to.Ptr("/subscriptions/ffffffff-ffff-ffff-ffff-ffffffffffff/resourceGroups/exampleresourcegroup/providers/Microsoft.DBforPostgreSQL/flexibleServers/exampleserver/configurations/debug_print_parse"),
		// 				Properties: &armpostgresql.ConfigurationProperties{
		// 					Description: to.Ptr("Logs each query's parse tree."),
		// 					AllowedValues: to.Ptr("on,off"),
		// 					DataType: to.Ptr(armpostgresql.ConfigurationDataTypeBoolean),
		// 					DefaultValue: to.Ptr("off"),
		// 					DocumentationLink: to.Ptr("https://www.postgresql.org/docs/13/runtime-config-logging.html#id-1.6.6.11.5.3.2.1.3"),
		// 					IsConfigPendingRestart: to.Ptr(false),
		// 					IsDynamicConfig: to.Ptr(true),
		// 					IsReadOnly: to.Ptr(false),
		// 					Source: to.Ptr("system-default"),
		// 					Value: to.Ptr("off"),
		// 				},
		// 			},
		// 			{
		// 				Name: to.Ptr("debug_print_plan"),
		// 				Type: to.Ptr("Microsoft.DBforPostgreSQL/flexibleServers/configurations"),
		// 				ID: to.Ptr("/subscriptions/ffffffff-ffff-ffff-ffff-ffffffffffff/resourceGroups/exampleresourcegroup/providers/Microsoft.DBforPostgreSQL/flexibleServers/exampleserver/configurations/debug_print_plan"),
		// 				Properties: &armpostgresql.ConfigurationProperties{
		// 					Description: to.Ptr("Logs each query's execution plan."),
		// 					AllowedValues: to.Ptr("on,off"),
		// 					DataType: to.Ptr(armpostgresql.ConfigurationDataTypeBoolean),
		// 					DefaultValue: to.Ptr("off"),
		// 					DocumentationLink: to.Ptr("https://www.postgresql.org/docs/13/runtime-config-logging.html#id-1.6.6.11.5.3.2.1.3"),
		// 					IsConfigPendingRestart: to.Ptr(false),
		// 					IsDynamicConfig: to.Ptr(true),
		// 					IsReadOnly: to.Ptr(false),
		// 					Source: to.Ptr("system-default"),
		// 					Value: to.Ptr("off"),
		// 				},
		// 			},
		// 			{
		// 				Name: to.Ptr("debug_print_rewritten"),
		// 				Type: to.Ptr("Microsoft.DBforPostgreSQL/flexibleServers/configurations"),
		// 				ID: to.Ptr("/subscriptions/ffffffff-ffff-ffff-ffff-ffffffffffff/resourceGroups/exampleresourcegroup/providers/Microsoft.DBforPostgreSQL/flexibleServers/exampleserver/configurations/debug_print_rewritten"),
		// 				Properties: &armpostgresql.ConfigurationProperties{
		// 					Description: to.Ptr("Logs each query's rewritten parse tree."),
		// 					AllowedValues: to.Ptr("on,off"),
		// 					DataType: to.Ptr(armpostgresql.ConfigurationDataTypeBoolean),
		// 					DefaultValue: to.Ptr("off"),
		// 					DocumentationLink: to.Ptr("https://www.postgresql.org/docs/13/runtime-config-logging.html#id-1.6.6.11.5.3.2.1.3"),
		// 					IsConfigPendingRestart: to.Ptr(false),
		// 					IsDynamicConfig: to.Ptr(true),
		// 					IsReadOnly: to.Ptr(false),
		// 					Source: to.Ptr("system-default"),
		// 					Value: to.Ptr("off"),
		// 				},
		// 			},
		// 			{
		// 				Name: to.Ptr("default_statistics_target"),
		// 				Type: to.Ptr("Microsoft.DBforPostgreSQL/flexibleServers/configurations"),
		// 				ID: to.Ptr("/subscriptions/ffffffff-ffff-ffff-ffff-ffffffffffff/resourceGroups/exampleresourcegroup/providers/Microsoft.DBforPostgreSQL/flexibleServers/exampleserver/configurations/default_statistics_target"),
		// 				Properties: &armpostgresql.ConfigurationProperties{
		// 					Description: to.Ptr("Sets the default statistics target for table columns without a column-specific target."),
		// 					AllowedValues: to.Ptr("1-10000"),
		// 					DataType: to.Ptr(armpostgresql.ConfigurationDataTypeInteger),
		// 					DefaultValue: to.Ptr("100"),
		// 					DocumentationLink: to.Ptr("https://www.postgresql.org/docs/13/runtime-config-query.html#GUC-DEFAULT-STATISTICS-TARGET"),
		// 					IsConfigPendingRestart: to.Ptr(false),
		// 					IsDynamicConfig: to.Ptr(true),
		// 					IsReadOnly: to.Ptr(false),
		// 					Source: to.Ptr("system-default"),
		// 					Value: to.Ptr("100"),
		// 				},
		// 			},
		// 			{
		// 				Name: to.Ptr("default_table_access_method"),
		// 				Type: to.Ptr("Microsoft.DBforPostgreSQL/flexibleServers/configurations"),
		// 				ID: to.Ptr("/subscriptions/ffffffff-ffff-ffff-ffff-ffffffffffff/resourceGroups/exampleresourcegroup/providers/Microsoft.DBforPostgreSQL/flexibleServers/exampleserver/configurations/default_table_access_method"),
		// 				Properties: &armpostgresql.ConfigurationProperties{
		// 					Description: to.Ptr("Sets the default table access method for new tables."),
		// 					AllowedValues: to.Ptr(".*"),
		// 					DataType: to.Ptr(armpostgresql.ConfigurationDataTypeString),
		// 					DefaultValue: to.Ptr("heap"),
		// 					DocumentationLink: to.Ptr("https://www.postgresql.org/docs/13/runtime-config-client.html#GUC-DEFAULT-TABLE-ACCESS-METHOD"),
		// 					IsConfigPendingRestart: to.Ptr(false),
		// 					IsDynamicConfig: to.Ptr(true),
		// 					IsReadOnly: to.Ptr(true),
		// 					Source: to.Ptr("system-default"),
		// 					Value: to.Ptr("heap"),
		// 				},
		// 			},
		// 			{
		// 				Name: to.Ptr("default_tablespace"),
		// 				Type: to.Ptr("Microsoft.DBforPostgreSQL/flexibleServers/configurations"),
		// 				ID: to.Ptr("/subscriptions/ffffffff-ffff-ffff-ffff-ffffffffffff/resourceGroups/exampleresourcegroup/providers/Microsoft.DBforPostgreSQL/flexibleServers/exampleserver/configurations/default_tablespace"),
		// 				Properties: &armpostgresql.ConfigurationProperties{
		// 					Description: to.Ptr("Sets the default tablespace to create tables and indexes in."),
		// 					AllowedValues: to.Ptr("[A-Za-z._]*"),
		// 					DataType: to.Ptr(armpostgresql.ConfigurationDataTypeString),
		// 					DefaultValue: to.Ptr(""),
		// 					DocumentationLink: to.Ptr("https://www.postgresql.org/docs/13/runtime-config-client.html#GUC-DEFAULT-TABLESPACE"),
		// 					IsConfigPendingRestart: to.Ptr(false),
		// 					IsDynamicConfig: to.Ptr(true),
		// 					IsReadOnly: to.Ptr(false),
		// 					Source: to.Ptr("system-default"),
		// 					Value: to.Ptr(""),
		// 				},
		// 			},
		// 			{
		// 				Name: to.Ptr("default_text_search_config"),
		// 				Type: to.Ptr("Microsoft.DBforPostgreSQL/flexibleServers/configurations"),
		// 				ID: to.Ptr("/subscriptions/ffffffff-ffff-ffff-ffff-ffffffffffff/resourceGroups/exampleresourcegroup/providers/Microsoft.DBforPostgreSQL/flexibleServers/exampleserver/configurations/default_text_search_config"),
		// 				Properties: &armpostgresql.ConfigurationProperties{
		// 					Description: to.Ptr("Selects the text search configuration that is used by those variants of the text search functions that do not have an explicit argument specifying it."),
		// 					AllowedValues: to.Ptr("[A-Za-z._]+"),
		// 					DataType: to.Ptr(armpostgresql.ConfigurationDataTypeString),
		// 					DefaultValue: to.Ptr("pg_catalog.english"),
		// 					DocumentationLink: to.Ptr("https://www.postgresql.org/docs/13/runtime-config-client.html#GUC-DEFAULT-TEXT-SEARCH-CONFIG"),
		// 					IsConfigPendingRestart: to.Ptr(false),
		// 					IsDynamicConfig: to.Ptr(true),
		// 					IsReadOnly: to.Ptr(false),
		// 					Source: to.Ptr("system-default"),
		// 					Value: to.Ptr("pg_catalog.english"),
		// 				},
		// 			},
		// 			{
		// 				Name: to.Ptr("default_transaction_deferrable"),
		// 				Type: to.Ptr("Microsoft.DBforPostgreSQL/flexibleServers/configurations"),
		// 				ID: to.Ptr("/subscriptions/ffffffff-ffff-ffff-ffff-ffffffffffff/resourceGroups/exampleresourcegroup/providers/Microsoft.DBforPostgreSQL/flexibleServers/exampleserver/configurations/default_transaction_deferrable"),
		// 				Properties: &armpostgresql.ConfigurationProperties{
		// 					Description: to.Ptr("This parameter controls the default deferrable status of each new transaction. It has no effect on read-write transactions or those operating at isolation levels lower than serializable."),
		// 					AllowedValues: to.Ptr("on,off"),
		// 					DataType: to.Ptr(armpostgresql.ConfigurationDataTypeBoolean),
		// 					DefaultValue: to.Ptr("off"),
		// 					DocumentationLink: to.Ptr("https://www.postgresql.org/docs/13/runtime-config-client.html#GUC-DEFAULT-TRANSACTION-DEFERRABLE"),
		// 					IsConfigPendingRestart: to.Ptr(false),
		// 					IsDynamicConfig: to.Ptr(true),
		// 					IsReadOnly: to.Ptr(false),
		// 					Source: to.Ptr("system-default"),
		// 					Value: to.Ptr("off"),
		// 				},
		// 			},
		// 			{
		// 				Name: to.Ptr("default_transaction_isolation"),
		// 				Type: to.Ptr("Microsoft.DBforPostgreSQL/flexibleServers/configurations"),
		// 				ID: to.Ptr("/subscriptions/ffffffff-ffff-ffff-ffff-ffffffffffff/resourceGroups/exampleresourcegroup/providers/Microsoft.DBforPostgreSQL/flexibleServers/exampleserver/configurations/default_transaction_isolation"),
		// 				Properties: &armpostgresql.ConfigurationProperties{
		// 					Description: to.Ptr("This parameter controls the default isolation level of each new transaction. The default is 'read committed'."),
		// 					AllowedValues: to.Ptr("serializable,repeatable read,read committed,read uncommitted"),
		// 					DataType: to.Ptr(armpostgresql.ConfigurationDataTypeEnumeration),
		// 					DefaultValue: to.Ptr("read committed"),
		// 					DocumentationLink: to.Ptr("https://www.postgresql.org/docs/13/runtime-config-client.html#GUC-DEFAULT-TRANSACTION-ISOLATION"),
		// 					IsConfigPendingRestart: to.Ptr(false),
		// 					IsDynamicConfig: to.Ptr(true),
		// 					IsReadOnly: to.Ptr(false),
		// 					Source: to.Ptr("system-default"),
		// 					Value: to.Ptr("read committed"),
		// 				},
		// 			},
		// 			{
		// 				Name: to.Ptr("default_transaction_read_only"),
		// 				Type: to.Ptr("Microsoft.DBforPostgreSQL/flexibleServers/configurations"),
		// 				ID: to.Ptr("/subscriptions/ffffffff-ffff-ffff-ffff-ffffffffffff/resourceGroups/exampleresourcegroup/providers/Microsoft.DBforPostgreSQL/flexibleServers/exampleserver/configurations/default_transaction_read_only"),
		// 				Properties: &armpostgresql.ConfigurationProperties{
		// 					Description: to.Ptr("Sets the default read-only status of each new transaction."),
		// 					AllowedValues: to.Ptr("on,off"),
		// 					DataType: to.Ptr(armpostgresql.ConfigurationDataTypeBoolean),
		// 					DefaultValue: to.Ptr("off"),
		// 					DocumentationLink: to.Ptr("https://www.postgresql.org/docs/13/runtime-config-client.html#GUC-DEFAULT-TRANSACTION-READ-ONLY"),
		// 					IsConfigPendingRestart: to.Ptr(false),
		// 					IsDynamicConfig: to.Ptr(true),
		// 					IsReadOnly: to.Ptr(false),
		// 					Source: to.Ptr("system-default"),
		// 					Value: to.Ptr("off"),
		// 				},
		// 			},
		// 			{
		// 				Name: to.Ptr("dynamic_library_path"),
		// 				Type: to.Ptr("Microsoft.DBforPostgreSQL/flexibleServers/configurations"),
		// 				ID: to.Ptr("/subscriptions/ffffffff-ffff-ffff-ffff-ffffffffffff/resourceGroups/exampleresourcegroup/providers/Microsoft.DBforPostgreSQL/flexibleServers/exampleserver/configurations/dynamic_library_path"),
		// 				Properties: &armpostgresql.ConfigurationProperties{
		// 					Description: to.Ptr("Sets the path for dynamically loadable modules."),
		// 					AllowedValues: to.Ptr(".*"),
		// 					DataType: to.Ptr(armpostgresql.ConfigurationDataTypeString),
		// 					DefaultValue: to.Ptr("$libdir"),
		// 					DocumentationLink: to.Ptr("https://www.postgresql.org/docs/13/runtime-config-client.html#GUC-DYNAMIC-LIBRARY-PATH"),
		// 					IsConfigPendingRestart: to.Ptr(false),
		// 					IsDynamicConfig: to.Ptr(true),
		// 					IsReadOnly: to.Ptr(true),
		// 					Source: to.Ptr("system-default"),
		// 					Value: to.Ptr("$libdir"),
		// 				},
		// 			},
		// 			{
		// 				Name: to.Ptr("dynamic_shared_memory_type"),
		// 				Type: to.Ptr("Microsoft.DBforPostgreSQL/flexibleServers/configurations"),
		// 				ID: to.Ptr("/subscriptions/ffffffff-ffff-ffff-ffff-ffffffffffff/resourceGroups/exampleresourcegroup/providers/Microsoft.DBforPostgreSQL/flexibleServers/exampleserver/configurations/dynamic_shared_memory_type"),
		// 				Properties: &armpostgresql.ConfigurationProperties{
		// 					Description: to.Ptr("Selects the dynamic shared memory implementation used."),
		// 					AllowedValues: to.Ptr("posix,sysv,mmap"),
		// 					DataType: to.Ptr(armpostgresql.ConfigurationDataTypeEnumeration),
		// 					DefaultValue: to.Ptr("posix"),
		// 					DocumentationLink: to.Ptr("https://www.postgresql.org/docs/13/runtime-config-resource.html#GUC-DYNAMIC-SHARED-MEMORY-TYPE"),
		// 					IsConfigPendingRestart: to.Ptr(false),
		// 					IsDynamicConfig: to.Ptr(false),
		// 					IsReadOnly: to.Ptr(true),
		// 					Source: to.Ptr("system-default"),
		// 					Value: to.Ptr("posix"),
		// 				},
		// 			},
		// 			{
		// 				Name: to.Ptr("effective_cache_size"),
		// 				Type: to.Ptr("Microsoft.DBforPostgreSQL/flexibleServers/configurations"),
		// 				ID: to.Ptr("/subscriptions/ffffffff-ffff-ffff-ffff-ffffffffffff/resourceGroups/exampleresourcegroup/providers/Microsoft.DBforPostgreSQL/flexibleServers/exampleserver/configurations/effective_cache_size"),
		// 				Properties: &armpostgresql.ConfigurationProperties{
		// 					Description: to.Ptr("Sets the planner's assumption about the size of the disk cache."),
		// 					AllowedValues: to.Ptr("1-2147483647"),
		// 					DataType: to.Ptr(armpostgresql.ConfigurationDataTypeInteger),
		// 					DefaultValue: to.Ptr("1572864"),
		// 					DocumentationLink: to.Ptr("https://www.postgresql.org/docs/13/runtime-config-query.html#GUC-EFFECTIVE-CACHE-SIZE"),
		// 					IsConfigPendingRestart: to.Ptr(false),
		// 					IsDynamicConfig: to.Ptr(true),
		// 					IsReadOnly: to.Ptr(false),
		// 					Source: to.Ptr("system-default"),
		// 					Unit: to.Ptr("8KB"),
		// 					Value: to.Ptr("1572864"),
		// 				},
		// 			},
		// 			{
		// 				Name: to.Ptr("effective_io_concurrency"),
		// 				Type: to.Ptr("Microsoft.DBforPostgreSQL/flexibleServers/configurations"),
		// 				ID: to.Ptr("/subscriptions/ffffffff-ffff-ffff-ffff-ffffffffffff/resourceGroups/exampleresourcegroup/providers/Microsoft.DBforPostgreSQL/flexibleServers/exampleserver/configurations/effective_io_concurrency"),
		// 				Properties: &armpostgresql.ConfigurationProperties{
		// 					Description: to.Ptr("Sets the number of concurrent disk I/O operations that PostgreSQL expects can be executed simultaneously."),
		// 					AllowedValues: to.Ptr("0-1000"),
		// 					DataType: to.Ptr(armpostgresql.ConfigurationDataTypeInteger),
		// 					DefaultValue: to.Ptr("1"),
		// 					DocumentationLink: to.Ptr("https://www.postgresql.org/docs/13/runtime-config-resource.html#GUC-EFFECTIVE-IO-CONCURRENCY"),
		// 					IsConfigPendingRestart: to.Ptr(false),
		// 					IsDynamicConfig: to.Ptr(true),
		// 					IsReadOnly: to.Ptr(false),
		// 					Source: to.Ptr("system-default"),
		// 					Value: to.Ptr("1"),
		// 				},
		// 			},
		// 			{
		// 				Name: to.Ptr("enable_bitmapscan"),
		// 				Type: to.Ptr("Microsoft.DBforPostgreSQL/flexibleServers/configurations"),
		// 				ID: to.Ptr("/subscriptions/ffffffff-ffff-ffff-ffff-ffffffffffff/resourceGroups/exampleresourcegroup/providers/Microsoft.DBforPostgreSQL/flexibleServers/exampleserver/configurations/enable_bitmapscan"),
		// 				Properties: &armpostgresql.ConfigurationProperties{
		// 					Description: to.Ptr("Enables the planner's use of bitmap-scan plans."),
		// 					AllowedValues: to.Ptr("on,off"),
		// 					DataType: to.Ptr(armpostgresql.ConfigurationDataTypeBoolean),
		// 					DefaultValue: to.Ptr("on"),
		// 					DocumentationLink: to.Ptr("https://www.postgresql.org/docs/13/runtime-config-query.html#GUC-ENABLE-BITMAPSCAN"),
		// 					IsConfigPendingRestart: to.Ptr(false),
		// 					IsDynamicConfig: to.Ptr(true),
		// 					IsReadOnly: to.Ptr(false),
		// 					Source: to.Ptr("system-default"),
		// 					Value: to.Ptr("on"),
		// 				},
		// 			},
		// 			{
		// 				Name: to.Ptr("enable_gathermerge"),
		// 				Type: to.Ptr("Microsoft.DBforPostgreSQL/flexibleServers/configurations"),
		// 				ID: to.Ptr("/subscriptions/ffffffff-ffff-ffff-ffff-ffffffffffff/resourceGroups/exampleresourcegroup/providers/Microsoft.DBforPostgreSQL/flexibleServers/exampleserver/configurations/enable_gathermerge"),
		// 				Properties: &armpostgresql.ConfigurationProperties{
		// 					Description: to.Ptr("Enables the planner's use of gather merge plans."),
		// 					AllowedValues: to.Ptr("on,off"),
		// 					DataType: to.Ptr(armpostgresql.ConfigurationDataTypeBoolean),
		// 					DefaultValue: to.Ptr("on"),
		// 					DocumentationLink: to.Ptr("https://www.postgresql.org/docs/13/runtime-config-query.html#GUC-ENABLE-GATHERMERGE"),
		// 					IsConfigPendingRestart: to.Ptr(false),
		// 					IsDynamicConfig: to.Ptr(true),
		// 					IsReadOnly: to.Ptr(false),
		// 					Source: to.Ptr("system-default"),
		// 					Value: to.Ptr("on"),
		// 				},
		// 			},
		// 			{
		// 				Name: to.Ptr("enable_hashagg"),
		// 				Type: to.Ptr("Microsoft.DBforPostgreSQL/flexibleServers/configurations"),
		// 				ID: to.Ptr("/subscriptions/ffffffff-ffff-ffff-ffff-ffffffffffff/resourceGroups/exampleresourcegroup/providers/Microsoft.DBforPostgreSQL/flexibleServers/exampleserver/configurations/enable_hashagg"),
		// 				Properties: &armpostgresql.ConfigurationProperties{
		// 					Description: to.Ptr("Enables the planner's use of hashed aggregation plans."),
		// 					AllowedValues: to.Ptr("on,off"),
		// 					DataType: to.Ptr(armpostgresql.ConfigurationDataTypeBoolean),
		// 					DefaultValue: to.Ptr("on"),
		// 					DocumentationLink: to.Ptr("https://www.postgresql.org/docs/13/runtime-config-query.html#GUC-ENABLE-HASHAGG"),
		// 					IsConfigPendingRestart: to.Ptr(false),
		// 					IsDynamicConfig: to.Ptr(true),
		// 					IsReadOnly: to.Ptr(false),
		// 					Source: to.Ptr("system-default"),
		// 					Value: to.Ptr("on"),
		// 				},
		// 			},
		// 			{
		// 				Name: to.Ptr("enable_hashjoin"),
		// 				Type: to.Ptr("Microsoft.DBforPostgreSQL/flexibleServers/configurations"),
		// 				ID: to.Ptr("/subscriptions/ffffffff-ffff-ffff-ffff-ffffffffffff/resourceGroups/exampleresourcegroup/providers/Microsoft.DBforPostgreSQL/flexibleServers/exampleserver/configurations/enable_hashjoin"),
		// 				Properties: &armpostgresql.ConfigurationProperties{
		// 					Description: to.Ptr("Enables the planner's use of hash join plans."),
		// 					AllowedValues: to.Ptr("on,off"),
		// 					DataType: to.Ptr(armpostgresql.ConfigurationDataTypeBoolean),
		// 					DefaultValue: to.Ptr("on"),
		// 					DocumentationLink: to.Ptr("https://www.postgresql.org/docs/13/runtime-config-query.html#GUC-ENABLE-HASHJOIN"),
		// 					IsConfigPendingRestart: to.Ptr(false),
		// 					IsDynamicConfig: to.Ptr(true),
		// 					IsReadOnly: to.Ptr(false),
		// 					Source: to.Ptr("system-default"),
		// 					Value: to.Ptr("on"),
		// 				},
		// 			},
		// 			{
		// 				Name: to.Ptr("enable_incremental_sort"),
		// 				Type: to.Ptr("Microsoft.DBforPostgreSQL/flexibleServers/configurations"),
		// 				ID: to.Ptr("/subscriptions/ffffffff-ffff-ffff-ffff-ffffffffffff/resourceGroups/exampleresourcegroup/providers/Microsoft.DBforPostgreSQL/flexibleServers/exampleserver/configurations/enable_incremental_sort"),
		// 				Properties: &armpostgresql.ConfigurationProperties{
		// 					Description: to.Ptr("Enables the planner's use of incremental sort steps."),
		// 					AllowedValues: to.Ptr("on,off"),
		// 					DataType: to.Ptr(armpostgresql.ConfigurationDataTypeBoolean),
		// 					DefaultValue: to.Ptr("on"),
		// 					DocumentationLink: to.Ptr("https://www.postgresql.org/docs/13/runtime-config-query.html#GUC-ENABLE-INCREMENTAL-SORT"),
		// 					IsConfigPendingRestart: to.Ptr(false),
		// 					IsDynamicConfig: to.Ptr(true),
		// 					IsReadOnly: to.Ptr(false),
		// 					Source: to.Ptr("system-default"),
		// 					Value: to.Ptr("on"),
		// 				},
		// 			},
		// 			{
		// 				Name: to.Ptr("enable_indexonlyscan"),
		// 				Type: to.Ptr("Microsoft.DBforPostgreSQL/flexibleServers/configurations"),
		// 				ID: to.Ptr("/subscriptions/ffffffff-ffff-ffff-ffff-ffffffffffff/resourceGroups/exampleresourcegroup/providers/Microsoft.DBforPostgreSQL/flexibleServers/exampleserver/configurations/enable_indexonlyscan"),
		// 				Properties: &armpostgresql.ConfigurationProperties{
		// 					Description: to.Ptr("Enables the planner's use of index-only-scan plans."),
		// 					AllowedValues: to.Ptr("on,off"),
		// 					DataType: to.Ptr(armpostgresql.ConfigurationDataTypeBoolean),
		// 					DefaultValue: to.Ptr("on"),
		// 					DocumentationLink: to.Ptr("https://www.postgresql.org/docs/13/runtime-config-query.html#GUC-ENABLE-INDEXONLYSCAN"),
		// 					IsConfigPendingRestart: to.Ptr(false),
		// 					IsDynamicConfig: to.Ptr(true),
		// 					IsReadOnly: to.Ptr(false),
		// 					Source: to.Ptr("system-default"),
		// 					Value: to.Ptr("on"),
		// 				},
		// 			},
		// 			{
		// 				Name: to.Ptr("enable_indexscan"),
		// 				Type: to.Ptr("Microsoft.DBforPostgreSQL/flexibleServers/configurations"),
		// 				ID: to.Ptr("/subscriptions/ffffffff-ffff-ffff-ffff-ffffffffffff/resourceGroups/exampleresourcegroup/providers/Microsoft.DBforPostgreSQL/flexibleServers/exampleserver/configurations/enable_indexscan"),
		// 				Properties: &armpostgresql.ConfigurationProperties{
		// 					Description: to.Ptr("Enables the planner's use of index-scan plans."),
		// 					AllowedValues: to.Ptr("on,off"),
		// 					DataType: to.Ptr(armpostgresql.ConfigurationDataTypeBoolean),
		// 					DefaultValue: to.Ptr("on"),
		// 					DocumentationLink: to.Ptr("https://www.postgresql.org/docs/13/runtime-config-query.html#GUC-ENABLE-INDEXSCAN"),
		// 					IsConfigPendingRestart: to.Ptr(false),
		// 					IsDynamicConfig: to.Ptr(true),
		// 					IsReadOnly: to.Ptr(false),
		// 					Source: to.Ptr("system-default"),
		// 					Value: to.Ptr("on"),
		// 				},
		// 			},
		// 			{
		// 				Name: to.Ptr("enable_material"),
		// 				Type: to.Ptr("Microsoft.DBforPostgreSQL/flexibleServers/configurations"),
		// 				ID: to.Ptr("/subscriptions/ffffffff-ffff-ffff-ffff-ffffffffffff/resourceGroups/exampleresourcegroup/providers/Microsoft.DBforPostgreSQL/flexibleServers/exampleserver/configurations/enable_material"),
		// 				Properties: &armpostgresql.ConfigurationProperties{
		// 					Description: to.Ptr("Enables the planner's use of materialization."),
		// 					AllowedValues: to.Ptr("on,off"),
		// 					DataType: to.Ptr(armpostgresql.ConfigurationDataTypeBoolean),
		// 					DefaultValue: to.Ptr("on"),
		// 					DocumentationLink: to.Ptr("https://www.postgresql.org/docs/13/runtime-config-query.html#GUC-ENABLE-MATERIAL"),
		// 					IsConfigPendingRestart: to.Ptr(false),
		// 					IsDynamicConfig: to.Ptr(true),
		// 					IsReadOnly: to.Ptr(false),
		// 					Source: to.Ptr("system-default"),
		// 					Value: to.Ptr("on"),
		// 				},
		// 			},
		// 			{
		// 				Name: to.Ptr("enable_mergejoin"),
		// 				Type: to.Ptr("Microsoft.DBforPostgreSQL/flexibleServers/configurations"),
		// 				ID: to.Ptr("/subscriptions/ffffffff-ffff-ffff-ffff-ffffffffffff/resourceGroups/exampleresourcegroup/providers/Microsoft.DBforPostgreSQL/flexibleServers/exampleserver/configurations/enable_mergejoin"),
		// 				Properties: &armpostgresql.ConfigurationProperties{
		// 					Description: to.Ptr("Enables the planner's use of merge join plans."),
		// 					AllowedValues: to.Ptr("on,off"),
		// 					DataType: to.Ptr(armpostgresql.ConfigurationDataTypeBoolean),
		// 					DefaultValue: to.Ptr("on"),
		// 					DocumentationLink: to.Ptr("https://www.postgresql.org/docs/13/runtime-config-query.html#GUC-ENABLE-MERGEJOIN"),
		// 					IsConfigPendingRestart: to.Ptr(false),
		// 					IsDynamicConfig: to.Ptr(true),
		// 					IsReadOnly: to.Ptr(false),
		// 					Source: to.Ptr("system-default"),
		// 					Value: to.Ptr("on"),
		// 				},
		// 			},
		// 			{
		// 				Name: to.Ptr("enable_nestloop"),
		// 				Type: to.Ptr("Microsoft.DBforPostgreSQL/flexibleServers/configurations"),
		// 				ID: to.Ptr("/subscriptions/ffffffff-ffff-ffff-ffff-ffffffffffff/resourceGroups/exampleresourcegroup/providers/Microsoft.DBforPostgreSQL/flexibleServers/exampleserver/configurations/enable_nestloop"),
		// 				Properties: &armpostgresql.ConfigurationProperties{
		// 					Description: to.Ptr("Enables the planner's use of nested loop join plans."),
		// 					AllowedValues: to.Ptr("on,off"),
		// 					DataType: to.Ptr(armpostgresql.ConfigurationDataTypeBoolean),
		// 					DefaultValue: to.Ptr("on"),
		// 					DocumentationLink: to.Ptr("https://www.postgresql.org/docs/13/runtime-config-query.html#GUC-ENABLE-NESTLOOP"),
		// 					IsConfigPendingRestart: to.Ptr(false),
		// 					IsDynamicConfig: to.Ptr(true),
		// 					IsReadOnly: to.Ptr(false),
		// 					Source: to.Ptr("system-default"),
		// 					Value: to.Ptr("on"),
		// 				},
		// 			},
		// 			{
		// 				Name: to.Ptr("enable_parallel_append"),
		// 				Type: to.Ptr("Microsoft.DBforPostgreSQL/flexibleServers/configurations"),
		// 				ID: to.Ptr("/subscriptions/ffffffff-ffff-ffff-ffff-ffffffffffff/resourceGroups/exampleresourcegroup/providers/Microsoft.DBforPostgreSQL/flexibleServers/exampleserver/configurations/enable_parallel_append"),
		// 				Properties: &armpostgresql.ConfigurationProperties{
		// 					Description: to.Ptr("Enables the planner's use of parallel append plans."),
		// 					AllowedValues: to.Ptr("on,off"),
		// 					DataType: to.Ptr(armpostgresql.ConfigurationDataTypeBoolean),
		// 					DefaultValue: to.Ptr("on"),
		// 					DocumentationLink: to.Ptr("https://www.postgresql.org/docs/13/runtime-config-query.html#GUC-ENABLE-PARALLEL-APPEND"),
		// 					IsConfigPendingRestart: to.Ptr(false),
		// 					IsDynamicConfig: to.Ptr(true),
		// 					IsReadOnly: to.Ptr(true),
		// 					Source: to.Ptr("system-default"),
		// 					Value: to.Ptr("on"),
		// 				},
		// 			},
		// 			{
		// 				Name: to.Ptr("enable_parallel_hash"),
		// 				Type: to.Ptr("Microsoft.DBforPostgreSQL/flexibleServers/configurations"),
		// 				ID: to.Ptr("/subscriptions/ffffffff-ffff-ffff-ffff-ffffffffffff/resourceGroups/exampleresourcegroup/providers/Microsoft.DBforPostgreSQL/flexibleServers/exampleserver/configurations/enable_parallel_hash"),
		// 				Properties: &armpostgresql.ConfigurationProperties{
		// 					Description: to.Ptr("Enables the planner's use of parallel hash plans."),
		// 					AllowedValues: to.Ptr("on,off"),
		// 					DataType: to.Ptr(armpostgresql.ConfigurationDataTypeBoolean),
		// 					DefaultValue: to.Ptr("on"),
		// 					DocumentationLink: to.Ptr("https://www.postgresql.org/docs/13/runtime-config-query.html#GUC-ENABLE-PARALLEL-HASH"),
		// 					IsConfigPendingRestart: to.Ptr(false),
		// 					IsDynamicConfig: to.Ptr(true),
		// 					IsReadOnly: to.Ptr(true),
		// 					Source: to.Ptr("system-default"),
		// 					Value: to.Ptr("on"),
		// 				},
		// 			},
		// 			{
		// 				Name: to.Ptr("enable_partition_pruning"),
		// 				Type: to.Ptr("Microsoft.DBforPostgreSQL/flexibleServers/configurations"),
		// 				ID: to.Ptr("/subscriptions/ffffffff-ffff-ffff-ffff-ffffffffffff/resourceGroups/exampleresourcegroup/providers/Microsoft.DBforPostgreSQL/flexibleServers/exampleserver/configurations/enable_partition_pruning"),
		// 				Properties: &armpostgresql.ConfigurationProperties{
		// 					Description: to.Ptr("Enables plan-time and run-time partition pruning."),
		// 					AllowedValues: to.Ptr("on,off"),
		// 					DataType: to.Ptr(armpostgresql.ConfigurationDataTypeBoolean),
		// 					DefaultValue: to.Ptr("on"),
		// 					DocumentationLink: to.Ptr("https://www.postgresql.org/docs/13/runtime-config-query.html#GUC-ENABLE-PARTITION-PRUNING"),
		// 					IsConfigPendingRestart: to.Ptr(false),
		// 					IsDynamicConfig: to.Ptr(true),
		// 					IsReadOnly: to.Ptr(true),
		// 					Source: to.Ptr("system-default"),
		// 					Value: to.Ptr("on"),
		// 				},
		// 			},
		// 			{
		// 				Name: to.Ptr("enable_partitionwise_aggregate"),
		// 				Type: to.Ptr("Microsoft.DBforPostgreSQL/flexibleServers/configurations"),
		// 				ID: to.Ptr("/subscriptions/ffffffff-ffff-ffff-ffff-ffffffffffff/resourceGroups/exampleresourcegroup/providers/Microsoft.DBforPostgreSQL/flexibleServers/exampleserver/configurations/enable_partitionwise_aggregate"),
		// 				Properties: &armpostgresql.ConfigurationProperties{
		// 					Description: to.Ptr("Enables or disables the query planner's use of partitionwise grouping or aggregation, which allows grouping or aggregation on a partitioned tables performed separately for each partition."),
		// 					AllowedValues: to.Ptr("on,off"),
		// 					DataType: to.Ptr(armpostgresql.ConfigurationDataTypeBoolean),
		// 					DefaultValue: to.Ptr("off"),
		// 					DocumentationLink: to.Ptr("https://www.postgresql.org/docs/13/runtime-config-query.html#GUC-ENABLE-PARTITIONWISE-AGGREGATE"),
		// 					IsConfigPendingRestart: to.Ptr(false),
		// 					IsDynamicConfig: to.Ptr(true),
		// 					IsReadOnly: to.Ptr(false),
		// 					Source: to.Ptr("system-default"),
		// 					Value: to.Ptr("off"),
		// 				},
		// 			},
		// 			{
		// 				Name: to.Ptr("enable_partitionwise_join"),
		// 				Type: to.Ptr("Microsoft.DBforPostgreSQL/flexibleServers/configurations"),
		// 				ID: to.Ptr("/subscriptions/ffffffff-ffff-ffff-ffff-ffffffffffff/resourceGroups/exampleresourcegroup/providers/Microsoft.DBforPostgreSQL/flexibleServers/exampleserver/configurations/enable_partitionwise_join"),
		// 				Properties: &armpostgresql.ConfigurationProperties{
		// 					Description: to.Ptr("Enables or disables the query planner's use of partitionwise join, which allows a join between partitioned tables to be performed by joining the matching partitions."),
		// 					AllowedValues: to.Ptr("on,off"),
		// 					DataType: to.Ptr(armpostgresql.ConfigurationDataTypeBoolean),
		// 					DefaultValue: to.Ptr("off"),
		// 					DocumentationLink: to.Ptr("https://www.postgresql.org/docs/13/runtime-config-query.html#GUC-ENABLE-PARTITIONWISE-JOIN"),
		// 					IsConfigPendingRestart: to.Ptr(false),
		// 					IsDynamicConfig: to.Ptr(true),
		// 					IsReadOnly: to.Ptr(false),
		// 					Source: to.Ptr("system-default"),
		// 					Value: to.Ptr("off"),
		// 				},
		// 			},
		// 			{
		// 				Name: to.Ptr("enable_seqscan"),
		// 				Type: to.Ptr("Microsoft.DBforPostgreSQL/flexibleServers/configurations"),
		// 				ID: to.Ptr("/subscriptions/ffffffff-ffff-ffff-ffff-ffffffffffff/resourceGroups/exampleresourcegroup/providers/Microsoft.DBforPostgreSQL/flexibleServers/exampleserver/configurations/enable_seqscan"),
		// 				Properties: &armpostgresql.ConfigurationProperties{
		// 					Description: to.Ptr("Enables the planner's use of sequential-scan plans."),
		// 					AllowedValues: to.Ptr("on,off"),
		// 					DataType: to.Ptr(armpostgresql.ConfigurationDataTypeBoolean),
		// 					DefaultValue: to.Ptr("on"),
		// 					DocumentationLink: to.Ptr("https://www.postgresql.org/docs/13/runtime-config-query.html#GUC-ENABLE-SEQSCAN"),
		// 					IsConfigPendingRestart: to.Ptr(false),
		// 					IsDynamicConfig: to.Ptr(true),
		// 					IsReadOnly: to.Ptr(false),
		// 					Source: to.Ptr("system-default"),
		// 					Value: to.Ptr("on"),
		// 				},
		// 			},
		// 			{
		// 				Name: to.Ptr("enable_sort"),
		// 				Type: to.Ptr("Microsoft.DBforPostgreSQL/flexibleServers/configurations"),
		// 				ID: to.Ptr("/subscriptions/ffffffff-ffff-ffff-ffff-ffffffffffff/resourceGroups/exampleresourcegroup/providers/Microsoft.DBforPostgreSQL/flexibleServers/exampleserver/configurations/enable_sort"),
		// 				Properties: &armpostgresql.ConfigurationProperties{
		// 					Description: to.Ptr("Enables the planner's use of explicit sort steps."),
		// 					AllowedValues: to.Ptr("on,off"),
		// 					DataType: to.Ptr(armpostgresql.ConfigurationDataTypeBoolean),
		// 					DefaultValue: to.Ptr("on"),
		// 					DocumentationLink: to.Ptr("https://www.postgresql.org/docs/13/runtime-config-query.html#GUC-ENABLE-SORT"),
		// 					IsConfigPendingRestart: to.Ptr(false),
		// 					IsDynamicConfig: to.Ptr(true),
		// 					IsReadOnly: to.Ptr(false),
		// 					Source: to.Ptr("system-default"),
		// 					Value: to.Ptr("on"),
		// 				},
		// 			},
		// 			{
		// 				Name: to.Ptr("enable_tidscan"),
		// 				Type: to.Ptr("Microsoft.DBforPostgreSQL/flexibleServers/configurations"),
		// 				ID: to.Ptr("/subscriptions/ffffffff-ffff-ffff-ffff-ffffffffffff/resourceGroups/exampleresourcegroup/providers/Microsoft.DBforPostgreSQL/flexibleServers/exampleserver/configurations/enable_tidscan"),
		// 				Properties: &armpostgresql.ConfigurationProperties{
		// 					Description: to.Ptr("Enables the planner's use of TID scan plans."),
		// 					AllowedValues: to.Ptr("on,off"),
		// 					DataType: to.Ptr(armpostgresql.ConfigurationDataTypeBoolean),
		// 					DefaultValue: to.Ptr("on"),
		// 					DocumentationLink: to.Ptr("https://www.postgresql.org/docs/13/runtime-config-query.html#GUC-ENABLE-TIDSCAN"),
		// 					IsConfigPendingRestart: to.Ptr(false),
		// 					IsDynamicConfig: to.Ptr(true),
		// 					IsReadOnly: to.Ptr(false),
		// 					Source: to.Ptr("system-default"),
		// 					Value: to.Ptr("on"),
		// 				},
		// 			},
		// 			{
		// 				Name: to.Ptr("escape_string_warning"),
		// 				Type: to.Ptr("Microsoft.DBforPostgreSQL/flexibleServers/configurations"),
		// 				ID: to.Ptr("/subscriptions/ffffffff-ffff-ffff-ffff-ffffffffffff/resourceGroups/exampleresourcegroup/providers/Microsoft.DBforPostgreSQL/flexibleServers/exampleserver/configurations/escape_string_warning"),
		// 				Properties: &armpostgresql.ConfigurationProperties{
		// 					Description: to.Ptr("Warns about backslash escapes in ordinary string literals."),
		// 					AllowedValues: to.Ptr("on,off"),
		// 					DataType: to.Ptr(armpostgresql.ConfigurationDataTypeBoolean),
		// 					DefaultValue: to.Ptr("on"),
		// 					DocumentationLink: to.Ptr("https://www.postgresql.org/docs/13/runtime-config-compatible.html#GUC-ESCAPE-STRING-WARNING"),
		// 					IsConfigPendingRestart: to.Ptr(false),
		// 					IsDynamicConfig: to.Ptr(true),
		// 					IsReadOnly: to.Ptr(false),
		// 					Source: to.Ptr("system-default"),
		// 					Value: to.Ptr("on"),
		// 				},
		// 			},
		// 			{
		// 				Name: to.Ptr("event_source"),
		// 				Type: to.Ptr("Microsoft.DBforPostgreSQL/flexibleServers/configurations"),
		// 				ID: to.Ptr("/subscriptions/ffffffff-ffff-ffff-ffff-ffffffffffff/resourceGroups/exampleresourcegroup/providers/Microsoft.DBforPostgreSQL/flexibleServers/exampleserver/configurations/event_source"),
		// 				Properties: &armpostgresql.ConfigurationProperties{
		// 					Description: to.Ptr("Sets the application name used to identify PostgreSQL messages in the event log."),
		// 					AllowedValues: to.Ptr(".*"),
		// 					DataType: to.Ptr(armpostgresql.ConfigurationDataTypeString),
		// 					DefaultValue: to.Ptr("PostgreSQL"),
		// 					DocumentationLink: to.Ptr("https://www.postgresql.org/docs/13/runtime-config-logging.html#GUC-EVENT-SOURCE"),
		// 					IsConfigPendingRestart: to.Ptr(false),
		// 					IsDynamicConfig: to.Ptr(false),
		// 					IsReadOnly: to.Ptr(true),
		// 					Source: to.Ptr("system-default"),
		// 					Value: to.Ptr("PostgreSQL"),
		// 				},
		// 			},
		// 			{
		// 				Name: to.Ptr("exit_on_error"),
		// 				Type: to.Ptr("Microsoft.DBforPostgreSQL/flexibleServers/configurations"),
		// 				ID: to.Ptr("/subscriptions/ffffffff-ffff-ffff-ffff-ffffffffffff/resourceGroups/exampleresourcegroup/providers/Microsoft.DBforPostgreSQL/flexibleServers/exampleserver/configurations/exit_on_error"),
		// 				Properties: &armpostgresql.ConfigurationProperties{
		// 					Description: to.Ptr("Terminates session on any error."),
		// 					AllowedValues: to.Ptr("on,off"),
		// 					DataType: to.Ptr(armpostgresql.ConfigurationDataTypeBoolean),
		// 					DefaultValue: to.Ptr("off"),
		// 					DocumentationLink: to.Ptr("https://www.postgresql.org/docs/13/runtime-config-error-handling.html#GUC-EXIT-ON-ERROR"),
		// 					IsConfigPendingRestart: to.Ptr(false),
		// 					IsDynamicConfig: to.Ptr(true),
		// 					IsReadOnly: to.Ptr(false),
		// 					Source: to.Ptr("system-default"),
		// 					Value: to.Ptr("off"),
		// 				},
		// 			},
		// 			{
		// 				Name: to.Ptr("external_pid_file"),
		// 				Type: to.Ptr("Microsoft.DBforPostgreSQL/flexibleServers/configurations"),
		// 				ID: to.Ptr("/subscriptions/ffffffff-ffff-ffff-ffff-ffffffffffff/resourceGroups/exampleresourcegroup/providers/Microsoft.DBforPostgreSQL/flexibleServers/exampleserver/configurations/external_pid_file"),
		// 				Properties: &armpostgresql.ConfigurationProperties{
		// 					Description: to.Ptr("Writes the postmaster PID to the specified file."),
		// 					AllowedValues: to.Ptr(".*"),
		// 					DataType: to.Ptr(armpostgresql.ConfigurationDataTypeString),
		// 					DefaultValue: to.Ptr(""),
		// 					DocumentationLink: to.Ptr("https://www.postgresql.org/docs/13/runtime-config-file-locations.html#GUC-EXTERNAL-PID-FILE"),
		// 					IsConfigPendingRestart: to.Ptr(false),
		// 					IsDynamicConfig: to.Ptr(false),
		// 					IsReadOnly: to.Ptr(true),
		// 					Source: to.Ptr("system-default"),
		// 					Value: to.Ptr(""),
		// 				},
		// 			},
		// 			{
		// 				Name: to.Ptr("extra_float_digits"),
		// 				Type: to.Ptr("Microsoft.DBforPostgreSQL/flexibleServers/configurations"),
		// 				ID: to.Ptr("/subscriptions/ffffffff-ffff-ffff-ffff-ffffffffffff/resourceGroups/exampleresourcegroup/providers/Microsoft.DBforPostgreSQL/flexibleServers/exampleserver/configurations/extra_float_digits"),
		// 				Properties: &armpostgresql.ConfigurationProperties{
		// 					Description: to.Ptr("Sets the number of digits displayed for floating-point values."),
		// 					AllowedValues: to.Ptr("-15-3"),
		// 					DataType: to.Ptr(armpostgresql.ConfigurationDataTypeInteger),
		// 					DefaultValue: to.Ptr("1"),
		// 					DocumentationLink: to.Ptr("https://www.postgresql.org/docs/13/runtime-config-client.html#GUC-EXTRA-FLOAT-DIGITS"),
		// 					IsConfigPendingRestart: to.Ptr(false),
		// 					IsDynamicConfig: to.Ptr(true),
		// 					IsReadOnly: to.Ptr(false),
		// 					Source: to.Ptr("system-default"),
		// 					Value: to.Ptr("1"),
		// 				},
		// 			},
		// 			{
		// 				Name: to.Ptr("force_parallel_mode"),
		// 				Type: to.Ptr("Microsoft.DBforPostgreSQL/flexibleServers/configurations"),
		// 				ID: to.Ptr("/subscriptions/ffffffff-ffff-ffff-ffff-ffffffffffff/resourceGroups/exampleresourcegroup/providers/Microsoft.DBforPostgreSQL/flexibleServers/exampleserver/configurations/force_parallel_mode"),
		// 				Properties: &armpostgresql.ConfigurationProperties{
		// 					Description: to.Ptr("Forces use of parallel query facilities."),
		// 					AllowedValues: to.Ptr("off,on,regress"),
		// 					DataType: to.Ptr(armpostgresql.ConfigurationDataTypeEnumeration),
		// 					DefaultValue: to.Ptr("off"),
		// 					DocumentationLink: to.Ptr("https://www.postgresql.org/docs/13/runtime-config-query.html#GUC-FORCE-PARALLEL-MODE"),
		// 					IsConfigPendingRestart: to.Ptr(false),
		// 					IsDynamicConfig: to.Ptr(true),
		// 					IsReadOnly: to.Ptr(false),
		// 					Source: to.Ptr("system-default"),
		// 					Value: to.Ptr("off"),
		// 				},
		// 			},
		// 			{
		// 				Name: to.Ptr("from_collapse_limit"),
		// 				Type: to.Ptr("Microsoft.DBforPostgreSQL/flexibleServers/configurations"),
		// 				ID: to.Ptr("/subscriptions/ffffffff-ffff-ffff-ffff-ffffffffffff/resourceGroups/exampleresourcegroup/providers/Microsoft.DBforPostgreSQL/flexibleServers/exampleserver/configurations/from_collapse_limit"),
		// 				Properties: &armpostgresql.ConfigurationProperties{
		// 					Description: to.Ptr("The planner will merge sub-queries into upper queries upto this limit in FROM clause. Smaller values reduce planning time but might yield inferior query plans."),
		// 					AllowedValues: to.Ptr("1-2147483647"),
		// 					DataType: to.Ptr(armpostgresql.ConfigurationDataTypeInteger),
		// 					DefaultValue: to.Ptr("8"),
		// 					DocumentationLink: to.Ptr("https://www.postgresql.org/docs/13/runtime-config-query.html#GUC-FROM-COLLAPSE-LIMIT"),
		// 					IsConfigPendingRestart: to.Ptr(false),
		// 					IsDynamicConfig: to.Ptr(true),
		// 					IsReadOnly: to.Ptr(false),
		// 					Source: to.Ptr("system-default"),
		// 					Value: to.Ptr("8"),
		// 				},
		// 			},
		// 			{
		// 				Name: to.Ptr("fsync"),
		// 				Type: to.Ptr("Microsoft.DBforPostgreSQL/flexibleServers/configurations"),
		// 				ID: to.Ptr("/subscriptions/ffffffff-ffff-ffff-ffff-ffffffffffff/resourceGroups/exampleresourcegroup/providers/Microsoft.DBforPostgreSQL/flexibleServers/exampleserver/configurations/fsync"),
		// 				Properties: &armpostgresql.ConfigurationProperties{
		// 					Description: to.Ptr("Forces synchronization of updates to disk."),
		// 					AllowedValues: to.Ptr("on,off"),
		// 					DataType: to.Ptr(armpostgresql.ConfigurationDataTypeBoolean),
		// 					DefaultValue: to.Ptr("on"),
		// 					DocumentationLink: to.Ptr("https://www.postgresql.org/docs/13/runtime-config-wal.html#GUC-FSYNC"),
		// 					IsConfigPendingRestart: to.Ptr(false),
		// 					IsDynamicConfig: to.Ptr(true),
		// 					IsReadOnly: to.Ptr(true),
		// 					Source: to.Ptr("system-default"),
		// 					Value: to.Ptr("on"),
		// 				},
		// 			},
		// 			{
		// 				Name: to.Ptr("full_page_writes"),
		// 				Type: to.Ptr("Microsoft.DBforPostgreSQL/flexibleServers/configurations"),
		// 				ID: to.Ptr("/subscriptions/ffffffff-ffff-ffff-ffff-ffffffffffff/resourceGroups/exampleresourcegroup/providers/Microsoft.DBforPostgreSQL/flexibleServers/exampleserver/configurations/full_page_writes"),
		// 				Properties: &armpostgresql.ConfigurationProperties{
		// 					Description: to.Ptr("Writes full pages to WAL when first modified after a checkpoint."),
		// 					AllowedValues: to.Ptr("on,off"),
		// 					DataType: to.Ptr(armpostgresql.ConfigurationDataTypeBoolean),
		// 					DefaultValue: to.Ptr("on"),
		// 					DocumentationLink: to.Ptr("https://www.postgresql.org/docs/13/runtime-config-wal.html#GUC-FULL-PAGE-WRITES"),
		// 					IsConfigPendingRestart: to.Ptr(false),
		// 					IsDynamicConfig: to.Ptr(true),
		// 					IsReadOnly: to.Ptr(true),
		// 					Source: to.Ptr("system-default"),
		// 					Value: to.Ptr("on"),
		// 				},
		// 			},
		// 			{
		// 				Name: to.Ptr("geqo"),
		// 				Type: to.Ptr("Microsoft.DBforPostgreSQL/flexibleServers/configurations"),
		// 				ID: to.Ptr("/subscriptions/ffffffff-ffff-ffff-ffff-ffffffffffff/resourceGroups/exampleresourcegroup/providers/Microsoft.DBforPostgreSQL/flexibleServers/exampleserver/configurations/geqo"),
		// 				Properties: &armpostgresql.ConfigurationProperties{
		// 					Description: to.Ptr("Enables genetic query optimization."),
		// 					AllowedValues: to.Ptr("on,off"),
		// 					DataType: to.Ptr(armpostgresql.ConfigurationDataTypeBoolean),
		// 					DefaultValue: to.Ptr("on"),
		// 					DocumentationLink: to.Ptr("https://www.postgresql.org/docs/13/runtime-config-query.html#GUC-GEQO"),
		// 					IsConfigPendingRestart: to.Ptr(false),
		// 					IsDynamicConfig: to.Ptr(true),
		// 					IsReadOnly: to.Ptr(false),
		// 					Source: to.Ptr("system-default"),
		// 					Value: to.Ptr("on"),
		// 				},
		// 			},
		// 			{
		// 				Name: to.Ptr("geqo_effort"),
		// 				Type: to.Ptr("Microsoft.DBforPostgreSQL/flexibleServers/configurations"),
		// 				ID: to.Ptr("/subscriptions/ffffffff-ffff-ffff-ffff-ffffffffffff/resourceGroups/exampleresourcegroup/providers/Microsoft.DBforPostgreSQL/flexibleServers/exampleserver/configurations/geqo_effort"),
		// 				Properties: &armpostgresql.ConfigurationProperties{
		// 					Description: to.Ptr("GEQO: effort is used to set the default for other GEQO parameters."),
		// 					AllowedValues: to.Ptr("1-10"),
		// 					DataType: to.Ptr(armpostgresql.ConfigurationDataTypeInteger),
		// 					DefaultValue: to.Ptr("5"),
		// 					DocumentationLink: to.Ptr("https://www.postgresql.org/docs/13/runtime-config-query.html#GUC-GEQO-EFFORT"),
		// 					IsConfigPendingRestart: to.Ptr(false),
		// 					IsDynamicConfig: to.Ptr(true),
		// 					IsReadOnly: to.Ptr(false),
		// 					Source: to.Ptr("system-default"),
		// 					Value: to.Ptr("5"),
		// 				},
		// 			},
		// 			{
		// 				Name: to.Ptr("geqo_generations"),
		// 				Type: to.Ptr("Microsoft.DBforPostgreSQL/flexibleServers/configurations"),
		// 				ID: to.Ptr("/subscriptions/ffffffff-ffff-ffff-ffff-ffffffffffff/resourceGroups/exampleresourcegroup/providers/Microsoft.DBforPostgreSQL/flexibleServers/exampleserver/configurations/geqo_generations"),
		// 				Properties: &armpostgresql.ConfigurationProperties{
		// 					Description: to.Ptr("GEQO: number of iterations of the algorithm."),
		// 					AllowedValues: to.Ptr("0-2147483647"),
		// 					DataType: to.Ptr(armpostgresql.ConfigurationDataTypeInteger),
		// 					DefaultValue: to.Ptr("0"),
		// 					DocumentationLink: to.Ptr("https://www.postgresql.org/docs/13/runtime-config-query.html#GUC-GEQO-GENERATIONS"),
		// 					IsConfigPendingRestart: to.Ptr(false),
		// 					IsDynamicConfig: to.Ptr(true),
		// 					IsReadOnly: to.Ptr(false),
		// 					Source: to.Ptr("system-default"),
		// 					Value: to.Ptr("0"),
		// 				},
		// 			},
		// 			{
		// 				Name: to.Ptr("geqo_pool_size"),
		// 				Type: to.Ptr("Microsoft.DBforPostgreSQL/flexibleServers/configurations"),
		// 				ID: to.Ptr("/subscriptions/ffffffff-ffff-ffff-ffff-ffffffffffff/resourceGroups/exampleresourcegroup/providers/Microsoft.DBforPostgreSQL/flexibleServers/exampleserver/configurations/geqo_pool_size"),
		// 				Properties: &armpostgresql.ConfigurationProperties{
		// 					Description: to.Ptr("GEQO: number of individuals in the population."),
		// 					AllowedValues: to.Ptr("0-2147483647"),
		// 					DataType: to.Ptr(armpostgresql.ConfigurationDataTypeInteger),
		// 					DefaultValue: to.Ptr("0"),
		// 					DocumentationLink: to.Ptr("https://www.postgresql.org/docs/13/runtime-config-query.html#GUC-GEQO-POOL-SIZE"),
		// 					IsConfigPendingRestart: to.Ptr(false),
		// 					IsDynamicConfig: to.Ptr(true),
		// 					IsReadOnly: to.Ptr(false),
		// 					Source: to.Ptr("system-default"),
		// 					Value: to.Ptr("0"),
		// 				},
		// 			},
		// 			{
		// 				Name: to.Ptr("geqo_seed"),
		// 				Type: to.Ptr("Microsoft.DBforPostgreSQL/flexibleServers/configurations"),
		// 				ID: to.Ptr("/subscriptions/ffffffff-ffff-ffff-ffff-ffffffffffff/resourceGroups/exampleresourcegroup/providers/Microsoft.DBforPostgreSQL/flexibleServers/exampleserver/configurations/geqo_seed"),
		// 				Properties: &armpostgresql.ConfigurationProperties{
		// 					Description: to.Ptr("GEQO: seed for random path selection."),
		// 					AllowedValues: to.Ptr("0-1"),
		// 					DataType: to.Ptr(armpostgresql.ConfigurationDataTypeNumeric),
		// 					DefaultValue: to.Ptr("0"),
		// 					DocumentationLink: to.Ptr("https://www.postgresql.org/docs/13/runtime-config-query.html#GUC-GEQO-SEED"),
		// 					IsConfigPendingRestart: to.Ptr(false),
		// 					IsDynamicConfig: to.Ptr(true),
		// 					IsReadOnly: to.Ptr(false),
		// 					Source: to.Ptr("system-default"),
		// 					Value: to.Ptr("0"),
		// 				},
		// 			},
		// 			{
		// 				Name: to.Ptr("geqo_selection_bias"),
		// 				Type: to.Ptr("Microsoft.DBforPostgreSQL/flexibleServers/configurations"),
		// 				ID: to.Ptr("/subscriptions/ffffffff-ffff-ffff-ffff-ffffffffffff/resourceGroups/exampleresourcegroup/providers/Microsoft.DBforPostgreSQL/flexibleServers/exampleserver/configurations/geqo_selection_bias"),
		// 				Properties: &armpostgresql.ConfigurationProperties{
		// 					Description: to.Ptr("GEQO: selective pressure within the population."),
		// 					AllowedValues: to.Ptr("1.5-2"),
		// 					DataType: to.Ptr(armpostgresql.ConfigurationDataTypeNumeric),
		// 					DefaultValue: to.Ptr("2"),
		// 					DocumentationLink: to.Ptr("https://www.postgresql.org/docs/13/runtime-config-query.html#GUC-GEQO-SELECTION-BIAS"),
		// 					IsConfigPendingRestart: to.Ptr(false),
		// 					IsDynamicConfig: to.Ptr(true),
		// 					IsReadOnly: to.Ptr(false),
		// 					Source: to.Ptr("system-default"),
		// 					Value: to.Ptr("2"),
		// 				},
		// 			},
		// 			{
		// 				Name: to.Ptr("geqo_threshold"),
		// 				Type: to.Ptr("Microsoft.DBforPostgreSQL/flexibleServers/configurations"),
		// 				ID: to.Ptr("/subscriptions/ffffffff-ffff-ffff-ffff-ffffffffffff/resourceGroups/exampleresourcegroup/providers/Microsoft.DBforPostgreSQL/flexibleServers/exampleserver/configurations/geqo_threshold"),
		// 				Properties: &armpostgresql.ConfigurationProperties{
		// 					Description: to.Ptr("Sets the threshold of FROM items beyond which GEQO is used."),
		// 					AllowedValues: to.Ptr("2-2147483647"),
		// 					DataType: to.Ptr(armpostgresql.ConfigurationDataTypeInteger),
		// 					DefaultValue: to.Ptr("12"),
		// 					DocumentationLink: to.Ptr("https://www.postgresql.org/docs/13/runtime-config-query.html#GUC-GEQO-THRESHOLD"),
		// 					IsConfigPendingRestart: to.Ptr(false),
		// 					IsDynamicConfig: to.Ptr(true),
		// 					IsReadOnly: to.Ptr(false),
		// 					Source: to.Ptr("system-default"),
		// 					Value: to.Ptr("12"),
		// 				},
		// 			},
		// 			{
		// 				Name: to.Ptr("gin_fuzzy_search_limit"),
		// 				Type: to.Ptr("Microsoft.DBforPostgreSQL/flexibleServers/configurations"),
		// 				ID: to.Ptr("/subscriptions/ffffffff-ffff-ffff-ffff-ffffffffffff/resourceGroups/exampleresourcegroup/providers/Microsoft.DBforPostgreSQL/flexibleServers/exampleserver/configurations/gin_fuzzy_search_limit"),
		// 				Properties: &armpostgresql.ConfigurationProperties{
		// 					Description: to.Ptr("Sets the maximum allowed result for exact search by GIN."),
		// 					AllowedValues: to.Ptr("0-2147483647"),
		// 					DataType: to.Ptr(armpostgresql.ConfigurationDataTypeInteger),
		// 					DefaultValue: to.Ptr("0"),
		// 					DocumentationLink: to.Ptr("https://www.postgresql.org/docs/13/runtime-config-client.html#GUC-GIN-FUZZY-SEARCH-LIMIT"),
		// 					IsConfigPendingRestart: to.Ptr(false),
		// 					IsDynamicConfig: to.Ptr(true),
		// 					IsReadOnly: to.Ptr(false),
		// 					Source: to.Ptr("system-default"),
		// 					Value: to.Ptr("0"),
		// 				},
		// 			},
		// 			{
		// 				Name: to.Ptr("gin_pending_list_limit"),
		// 				Type: to.Ptr("Microsoft.DBforPostgreSQL/flexibleServers/configurations"),
		// 				ID: to.Ptr("/subscriptions/ffffffff-ffff-ffff-ffff-ffffffffffff/resourceGroups/exampleresourcegroup/providers/Microsoft.DBforPostgreSQL/flexibleServers/exampleserver/configurations/gin_pending_list_limit"),
		// 				Properties: &armpostgresql.ConfigurationProperties{
		// 					Description: to.Ptr("Sets the maximum size of the pending list for GIN index."),
		// 					AllowedValues: to.Ptr("64-2097151"),
		// 					DataType: to.Ptr(armpostgresql.ConfigurationDataTypeInteger),
		// 					DefaultValue: to.Ptr("4096"),
		// 					DocumentationLink: to.Ptr("https://www.postgresql.org/docs/13/runtime-config-client.html#GUC-GIN-PENDING-LIST-LIMIT"),
		// 					IsConfigPendingRestart: to.Ptr(false),
		// 					IsDynamicConfig: to.Ptr(true),
		// 					IsReadOnly: to.Ptr(false),
		// 					Source: to.Ptr("system-default"),
		// 					Unit: to.Ptr("KB"),
		// 					Value: to.Ptr("4096"),
		// 				},
		// 			},
		// 			{
		// 				Name: to.Ptr("hash_mem_multiplier"),
		// 				Type: to.Ptr("Microsoft.DBforPostgreSQL/flexibleServers/configurations"),
		// 				ID: to.Ptr("/subscriptions/ffffffff-ffff-ffff-ffff-ffffffffffff/resourceGroups/exampleresourcegroup/providers/Microsoft.DBforPostgreSQL/flexibleServers/exampleserver/configurations/hash_mem_multiplier"),
		// 				Properties: &armpostgresql.ConfigurationProperties{
		// 					Description: to.Ptr("Multiple of work_mem to use for hash tables."),
		// 					AllowedValues: to.Ptr("1-1000"),
		// 					DataType: to.Ptr(armpostgresql.ConfigurationDataTypeNumeric),
		// 					DefaultValue: to.Ptr("1"),
		// 					DocumentationLink: to.Ptr("https://www.postgresql.org/docs/13/runtime-config-resource.html#GUC-HASH-MEM-MULTIPLIER"),
		// 					IsConfigPendingRestart: to.Ptr(false),
		// 					IsDynamicConfig: to.Ptr(true),
		// 					IsReadOnly: to.Ptr(false),
		// 					Source: to.Ptr("system-default"),
		// 					Value: to.Ptr("1"),
		// 				},
		// 			},
		// 			{
		// 				Name: to.Ptr("hba_file"),
		// 				Type: to.Ptr("Microsoft.DBforPostgreSQL/flexibleServers/configurations"),
		// 				ID: to.Ptr("/subscriptions/ffffffff-ffff-ffff-ffff-ffffffffffff/resourceGroups/exampleresourcegroup/providers/Microsoft.DBforPostgreSQL/flexibleServers/exampleserver/configurations/hba_file"),
		// 				Properties: &armpostgresql.ConfigurationProperties{
		// 					Description: to.Ptr("Sets the server's \"hba\" configuration file."),
		// 					AllowedValues: to.Ptr(".*"),
		// 					DataType: to.Ptr(armpostgresql.ConfigurationDataTypeString),
		// 					DefaultValue: to.Ptr(""),
		// 					DocumentationLink: to.Ptr("https://www.postgresql.org/docs/13/runtime-config-file-locations.html#GUC-HBA-FILE"),
		// 					IsConfigPendingRestart: to.Ptr(false),
		// 					IsDynamicConfig: to.Ptr(false),
		// 					IsReadOnly: to.Ptr(true),
		// 					Source: to.Ptr("user-override"),
		// 					Value: to.Ptr("/datadrive/pg/data/pg_hba.conf"),
		// 				},
		// 			},
		// 			{
		// 				Name: to.Ptr("hot_standby"),
		// 				Type: to.Ptr("Microsoft.DBforPostgreSQL/flexibleServers/configurations"),
		// 				ID: to.Ptr("/subscriptions/ffffffff-ffff-ffff-ffff-ffffffffffff/resourceGroups/exampleresourcegroup/providers/Microsoft.DBforPostgreSQL/flexibleServers/exampleserver/configurations/hot_standby"),
		// 				Properties: &armpostgresql.ConfigurationProperties{
		// 					Description: to.Ptr("Allows connections and queries during recovery."),
		// 					AllowedValues: to.Ptr("on,off"),
		// 					DataType: to.Ptr(armpostgresql.ConfigurationDataTypeBoolean),
		// 					DefaultValue: to.Ptr("on"),
		// 					DocumentationLink: to.Ptr("https://www.postgresql.org/docs/13/runtime-config-replication.html#GUC-HOT-STANDBY"),
		// 					IsConfigPendingRestart: to.Ptr(false),
		// 					IsDynamicConfig: to.Ptr(false),
		// 					IsReadOnly: to.Ptr(true),
		// 					Source: to.Ptr("system-default"),
		// 					Value: to.Ptr("on"),
		// 				},
		// 			},
		// 			{
		// 				Name: to.Ptr("hot_standby_feedback"),
		// 				Type: to.Ptr("Microsoft.DBforPostgreSQL/flexibleServers/configurations"),
		// 				ID: to.Ptr("/subscriptions/ffffffff-ffff-ffff-ffff-ffffffffffff/resourceGroups/exampleresourcegroup/providers/Microsoft.DBforPostgreSQL/flexibleServers/exampleserver/configurations/hot_standby_feedback"),
		// 				Properties: &armpostgresql.ConfigurationProperties{
		// 					Description: to.Ptr("Enables/disables the option whether hot standby needs to send feedback to the primary or upstream standby about queries currently executing on the standby."),
		// 					AllowedValues: to.Ptr("on,off"),
		// 					DataType: to.Ptr(armpostgresql.ConfigurationDataTypeBoolean),
		// 					DefaultValue: to.Ptr("off"),
		// 					DocumentationLink: to.Ptr("https://www.postgresql.org/docs/13/runtime-config-replication.html#GUC-HOT-STANDBY-FEEDBACK"),
		// 					IsConfigPendingRestart: to.Ptr(false),
		// 					IsDynamicConfig: to.Ptr(true),
		// 					IsReadOnly: to.Ptr(false),
		// 					Source: to.Ptr("system-default"),
		// 					Value: to.Ptr("off"),
		// 				},
		// 			},
		// 			{
		// 				Name: to.Ptr("huge_pages"),
		// 				Type: to.Ptr("Microsoft.DBforPostgreSQL/flexibleServers/configurations"),
		// 				ID: to.Ptr("/subscriptions/ffffffff-ffff-ffff-ffff-ffffffffffff/resourceGroups/exampleresourcegroup/providers/Microsoft.DBforPostgreSQL/flexibleServers/exampleserver/configurations/huge_pages"),
		// 				Properties: &armpostgresql.ConfigurationProperties{
		// 					Description: to.Ptr("Enables/disables the use of huge memory pages. This setting is not applicable to servers having less than 4 vCores."),
		// 					AllowedValues: to.Ptr("on,off,try"),
		// 					DataType: to.Ptr(armpostgresql.ConfigurationDataTypeEnumeration),
		// 					DefaultValue: to.Ptr("try"),
		// 					DocumentationLink: to.Ptr("https://www.postgresql.org/docs/13/runtime-config-resource.html#GUC-HUGE-PAGES"),
		// 					IsConfigPendingRestart: to.Ptr(false),
		// 					IsDynamicConfig: to.Ptr(false),
		// 					IsReadOnly: to.Ptr(false),
		// 					Source: to.Ptr("system-default"),
		// 					Value: to.Ptr("try"),
		// 				},
		// 			},
		// 			{
		// 				Name: to.Ptr("ident_file"),
		// 				Type: to.Ptr("Microsoft.DBforPostgreSQL/flexibleServers/configurations"),
		// 				ID: to.Ptr("/subscriptions/ffffffff-ffff-ffff-ffff-ffffffffffff/resourceGroups/exampleresourcegroup/providers/Microsoft.DBforPostgreSQL/flexibleServers/exampleserver/configurations/ident_file"),
		// 				Properties: &armpostgresql.ConfigurationProperties{
		// 					Description: to.Ptr("Sets the server's \"ident\" configuration file."),
		// 					AllowedValues: to.Ptr(".*"),
		// 					DataType: to.Ptr(armpostgresql.ConfigurationDataTypeString),
		// 					DefaultValue: to.Ptr(""),
		// 					DocumentationLink: to.Ptr("https://www.postgresql.org/docs/13/runtime-config-file-locations.html#GUC-IDENT-FILE"),
		// 					IsConfigPendingRestart: to.Ptr(false),
		// 					IsDynamicConfig: to.Ptr(false),
		// 					IsReadOnly: to.Ptr(true),
		// 					Source: to.Ptr("user-override"),
		// 					Value: to.Ptr("/datadrive/pg/data/pg_ident.conf"),
		// 				},
		// 			},
		// 			{
		// 				Name: to.Ptr("idle_in_transaction_session_timeout"),
		// 				Type: to.Ptr("Microsoft.DBforPostgreSQL/flexibleServers/configurations"),
		// 				ID: to.Ptr("/subscriptions/ffffffff-ffff-ffff-ffff-ffffffffffff/resourceGroups/exampleresourcegroup/providers/Microsoft.DBforPostgreSQL/flexibleServers/exampleserver/configurations/idle_in_transaction_session_timeout"),
		// 				Properties: &armpostgresql.ConfigurationProperties{
		// 					Description: to.Ptr("Sets the maximum allowed duration of any idling transaction."),
		// 					AllowedValues: to.Ptr("0-2147483647"),
		// 					DataType: to.Ptr(armpostgresql.ConfigurationDataTypeInteger),
		// 					DefaultValue: to.Ptr("0"),
		// 					DocumentationLink: to.Ptr("https://www.postgresql.org/docs/13/runtime-config-client.html#GUC-IDLE-IN-TRANSACTION-SESSION-TIMEOUT"),
		// 					IsConfigPendingRestart: to.Ptr(false),
		// 					IsDynamicConfig: to.Ptr(true),
		// 					IsReadOnly: to.Ptr(false),
		// 					Source: to.Ptr("system-default"),
		// 					Unit: to.Ptr("milliseconds"),
		// 					Value: to.Ptr("0"),
		// 				},
		// 			},
		// 			{
		// 				Name: to.Ptr("ignore_checksum_failure"),
		// 				Type: to.Ptr("Microsoft.DBforPostgreSQL/flexibleServers/configurations"),
		// 				ID: to.Ptr("/subscriptions/ffffffff-ffff-ffff-ffff-ffffffffffff/resourceGroups/exampleresourcegroup/providers/Microsoft.DBforPostgreSQL/flexibleServers/exampleserver/configurations/ignore_checksum_failure"),
		// 				Properties: &armpostgresql.ConfigurationProperties{
		// 					Description: to.Ptr("Continues processing after a checksum failure."),
		// 					AllowedValues: to.Ptr("on,off"),
		// 					DataType: to.Ptr(armpostgresql.ConfigurationDataTypeBoolean),
		// 					DefaultValue: to.Ptr("off"),
		// 					DocumentationLink: to.Ptr("https://www.postgresql.org/docs/13/runtime-config-developer.html#GUC-IGNORE-CHECKSUM-FAILURE"),
		// 					IsConfigPendingRestart: to.Ptr(false),
		// 					IsDynamicConfig: to.Ptr(true),
		// 					IsReadOnly: to.Ptr(true),
		// 					Source: to.Ptr("system-default"),
		// 					Value: to.Ptr("off"),
		// 				},
		// 			},
		// 			{
		// 				Name: to.Ptr("ignore_invalid_pages"),
		// 				Type: to.Ptr("Microsoft.DBforPostgreSQL/flexibleServers/configurations"),
		// 				ID: to.Ptr("/subscriptions/ffffffff-ffff-ffff-ffff-ffffffffffff/resourceGroups/exampleresourcegroup/providers/Microsoft.DBforPostgreSQL/flexibleServers/exampleserver/configurations/ignore_invalid_pages"),
		// 				Properties: &armpostgresql.ConfigurationProperties{
		// 					Description: to.Ptr("Continues recovery after an invalid pages failure."),
		// 					AllowedValues: to.Ptr("on,off"),
		// 					DataType: to.Ptr(armpostgresql.ConfigurationDataTypeBoolean),
		// 					DefaultValue: to.Ptr("off"),
		// 					DocumentationLink: to.Ptr("https://www.postgresql.org/docs/13/runtime-config-developer.html#GUC-IGNORE-INVALID-PAGES"),
		// 					IsConfigPendingRestart: to.Ptr(false),
		// 					IsDynamicConfig: to.Ptr(false),
		// 					IsReadOnly: to.Ptr(true),
		// 					Source: to.Ptr("system-default"),
		// 					Value: to.Ptr("off"),
		// 				},
		// 			},
		// 			{
		// 				Name: to.Ptr("ignore_system_indexes"),
		// 				Type: to.Ptr("Microsoft.DBforPostgreSQL/flexibleServers/configurations"),
		// 				ID: to.Ptr("/subscriptions/ffffffff-ffff-ffff-ffff-ffffffffffff/resourceGroups/exampleresourcegroup/providers/Microsoft.DBforPostgreSQL/flexibleServers/exampleserver/configurations/ignore_system_indexes"),
		// 				Properties: &armpostgresql.ConfigurationProperties{
		// 					Description: to.Ptr("Disables reading from system indexes."),
		// 					AllowedValues: to.Ptr("on,off"),
		// 					DataType: to.Ptr(armpostgresql.ConfigurationDataTypeBoolean),
		// 					DefaultValue: to.Ptr("off"),
		// 					DocumentationLink: to.Ptr("https://www.postgresql.org/docs/13/runtime-config-developer.html#GUC-IGNORE-SYSTEM-INDEXES"),
		// 					IsConfigPendingRestart: to.Ptr(false),
		// 					IsDynamicConfig: to.Ptr(true),
		// 					IsReadOnly: to.Ptr(true),
		// 					Source: to.Ptr("system-default"),
		// 					Value: to.Ptr("off"),
		// 				},
		// 			},
		// 			{
		// 				Name: to.Ptr("index_tuning.analysis_interval"),
		// 				Type: to.Ptr("Microsoft.DBforPostgreSQL/flexibleServers/configurations"),
		// 				ID: to.Ptr("/subscriptions/ffffffff-ffff-ffff-ffff-ffffffffffff/resourceGroups/exampleresourcegroup/providers/Microsoft.DBforPostgreSQL/flexibleServers/exampleserver/configurations/index_tuning.analysis_interval"),
		// 				Properties: &armpostgresql.ConfigurationProperties{
		// 					Description: to.Ptr("Sets the frequency at which each index optimization session is triggered when index_tuning.mode is set to 'REPORT'."),
		// 					AllowedValues: to.Ptr("60-10080"),
		// 					DataType: to.Ptr(armpostgresql.ConfigurationDataTypeInteger),
		// 					DefaultValue: to.Ptr("720"),
		// 					DocumentationLink: to.Ptr("https://go.microsoft.com/fwlink/?linkid=2274149"),
		// 					IsConfigPendingRestart: to.Ptr(false),
		// 					IsDynamicConfig: to.Ptr(true),
		// 					IsReadOnly: to.Ptr(false),
		// 					Source: to.Ptr("system-default"),
		// 					Unit: to.Ptr("minutes"),
		// 					Value: to.Ptr("720"),
		// 				},
		// 			},
		// 			{
		// 				Name: to.Ptr("index_tuning.max_columns_per_index"),
		// 				Type: to.Ptr("Microsoft.DBforPostgreSQL/flexibleServers/configurations"),
		// 				ID: to.Ptr("/subscriptions/ffffffff-ffff-ffff-ffff-ffffffffffff/resourceGroups/exampleresourcegroup/providers/Microsoft.DBforPostgreSQL/flexibleServers/exampleserver/configurations/index_tuning.max_columns_per_index"),
		// 				Properties: &armpostgresql.ConfigurationProperties{
		// 					Description: to.Ptr("Maximum number of columns that can be part of the index key for any recommended index."),
		// 					AllowedValues: to.Ptr("1-10"),
		// 					DataType: to.Ptr(armpostgresql.ConfigurationDataTypeInteger),
		// 					DefaultValue: to.Ptr("2"),
		// 					DocumentationLink: to.Ptr("https://go.microsoft.com/fwlink/?linkid=2274149"),
		// 					IsConfigPendingRestart: to.Ptr(false),
		// 					IsDynamicConfig: to.Ptr(true),
		// 					IsReadOnly: to.Ptr(false),
		// 					Source: to.Ptr("system-default"),
		// 					Value: to.Ptr("2"),
		// 				},
		// 			},
		// 			{
		// 				Name: to.Ptr("index_tuning.max_index_count"),
		// 				Type: to.Ptr("Microsoft.DBforPostgreSQL/flexibleServers/configurations"),
		// 				ID: to.Ptr("/subscriptions/ffffffff-ffff-ffff-ffff-ffffffffffff/resourceGroups/exampleresourcegroup/providers/Microsoft.DBforPostgreSQL/flexibleServers/exampleserver/configurations/index_tuning.max_index_count"),
		// 				Properties: &armpostgresql.ConfigurationProperties{
		// 					Description: to.Ptr("Maximum number of indexes that can be recommended for each database during one optimization session."),
		// 					AllowedValues: to.Ptr("1-25"),
		// 					DataType: to.Ptr(armpostgresql.ConfigurationDataTypeInteger),
		// 					DefaultValue: to.Ptr("10"),
		// 					DocumentationLink: to.Ptr("https://go.microsoft.com/fwlink/?linkid=2274149"),
		// 					IsConfigPendingRestart: to.Ptr(false),
		// 					IsDynamicConfig: to.Ptr(true),
		// 					IsReadOnly: to.Ptr(false),
		// 					Source: to.Ptr("system-default"),
		// 					Value: to.Ptr("10"),
		// 				},
		// 			},
		// 			{
		// 				Name: to.Ptr("index_tuning.max_indexes_per_table"),
		// 				Type: to.Ptr("Microsoft.DBforPostgreSQL/flexibleServers/configurations"),
		// 				ID: to.Ptr("/subscriptions/ffffffff-ffff-ffff-ffff-ffffffffffff/resourceGroups/exampleresourcegroup/providers/Microsoft.DBforPostgreSQL/flexibleServers/exampleserver/configurations/index_tuning.max_indexes_per_table"),
		// 				Properties: &armpostgresql.ConfigurationProperties{
		// 					Description: to.Ptr("Maximum number of indexes that can be recommended for each table."),
		// 					AllowedValues: to.Ptr("1-25"),
		// 					DataType: to.Ptr(armpostgresql.ConfigurationDataTypeInteger),
		// 					DefaultValue: to.Ptr("10"),
		// 					DocumentationLink: to.Ptr("https://go.microsoft.com/fwlink/?linkid=2274149"),
		// 					IsConfigPendingRestart: to.Ptr(false),
		// 					IsDynamicConfig: to.Ptr(true),
		// 					IsReadOnly: to.Ptr(false),
		// 					Source: to.Ptr("system-default"),
		// 					Value: to.Ptr("10"),
		// 				},
		// 			},
		// 			{
		// 				Name: to.Ptr("index_tuning.max_queries_per_database"),
		// 				Type: to.Ptr("Microsoft.DBforPostgreSQL/flexibleServers/configurations"),
		// 				ID: to.Ptr("/subscriptions/ffffffff-ffff-ffff-ffff-ffffffffffff/resourceGroups/exampleresourcegroup/providers/Microsoft.DBforPostgreSQL/flexibleServers/exampleserver/configurations/index_tuning.max_queries_per_database"),
		// 				Properties: &armpostgresql.ConfigurationProperties{
		// 					Description: to.Ptr("Number of slowest queries per database for which indexes can be recommended."),
		// 					AllowedValues: to.Ptr("5-100"),
		// 					DataType: to.Ptr(armpostgresql.ConfigurationDataTypeInteger),
		// 					DefaultValue: to.Ptr("25"),
		// 					DocumentationLink: to.Ptr("https://go.microsoft.com/fwlink/?linkid=2274149"),
		// 					IsConfigPendingRestart: to.Ptr(false),
		// 					IsDynamicConfig: to.Ptr(true),
		// 					IsReadOnly: to.Ptr(false),
		// 					Source: to.Ptr("system-default"),
		// 					Value: to.Ptr("25"),
		// 				},
		// 			},
		// 			{
		// 				Name: to.Ptr("index_tuning.max_regression_factor"),
		// 				Type: to.Ptr("Microsoft.DBforPostgreSQL/flexibleServers/configurations"),
		// 				ID: to.Ptr("/subscriptions/ffffffff-ffff-ffff-ffff-ffffffffffff/resourceGroups/exampleresourcegroup/providers/Microsoft.DBforPostgreSQL/flexibleServers/exampleserver/configurations/index_tuning.max_regression_factor"),
		// 				Properties: &armpostgresql.ConfigurationProperties{
		// 					Description: to.Ptr("Acceptable regression introduced by a recommended index on any of the queries analyzed during one optimization session."),
		// 					AllowedValues: to.Ptr("0.05-0.2"),
		// 					DataType: to.Ptr(armpostgresql.ConfigurationDataTypeNumeric),
		// 					DefaultValue: to.Ptr("0.1"),
		// 					DocumentationLink: to.Ptr("https://go.microsoft.com/fwlink/?linkid=2274149"),
		// 					IsConfigPendingRestart: to.Ptr(false),
		// 					IsDynamicConfig: to.Ptr(true),
		// 					IsReadOnly: to.Ptr(false),
		// 					Source: to.Ptr("system-default"),
		// 					Unit: to.Ptr("percentage"),
		// 					Value: to.Ptr("0.1"),
		// 				},
		// 			},
		// 			{
		// 				Name: to.Ptr("index_tuning.max_total_size_factor"),
		// 				Type: to.Ptr("Microsoft.DBforPostgreSQL/flexibleServers/configurations"),
		// 				ID: to.Ptr("/subscriptions/ffffffff-ffff-ffff-ffff-ffffffffffff/resourceGroups/exampleresourcegroup/providers/Microsoft.DBforPostgreSQL/flexibleServers/exampleserver/configurations/index_tuning.max_total_size_factor"),
		// 				Properties: &armpostgresql.ConfigurationProperties{
		// 					Description: to.Ptr("Maximum total size, in percentage of total disk space, that all recommended indexes for any given database can use."),
		// 					AllowedValues: to.Ptr("0-1.0"),
		// 					DataType: to.Ptr(armpostgresql.ConfigurationDataTypeNumeric),
		// 					DefaultValue: to.Ptr("0.1"),
		// 					DocumentationLink: to.Ptr("https://go.microsoft.com/fwlink/?linkid=2274149"),
		// 					IsConfigPendingRestart: to.Ptr(false),
		// 					IsDynamicConfig: to.Ptr(true),
		// 					IsReadOnly: to.Ptr(false),
		// 					Source: to.Ptr("system-default"),
		// 					Unit: to.Ptr("percentage"),
		// 					Value: to.Ptr("0.1"),
		// 				},
		// 			},
		// 			{
		// 				Name: to.Ptr("index_tuning.min_improvement_factor"),
		// 				Type: to.Ptr("Microsoft.DBforPostgreSQL/flexibleServers/configurations"),
		// 				ID: to.Ptr("/subscriptions/ffffffff-ffff-ffff-ffff-ffffffffffff/resourceGroups/exampleresourcegroup/providers/Microsoft.DBforPostgreSQL/flexibleServers/exampleserver/configurations/index_tuning.min_improvement_factor"),
		// 				Properties: &armpostgresql.ConfigurationProperties{
		// 					Description: to.Ptr("Cost improvement that a recommended index must provide to at least one of the queries analyzed during one optimization session."),
		// 					AllowedValues: to.Ptr("0-20.0"),
		// 					DataType: to.Ptr(armpostgresql.ConfigurationDataTypeNumeric),
		// 					DefaultValue: to.Ptr("0.2"),
		// 					DocumentationLink: to.Ptr("https://go.microsoft.com/fwlink/?linkid=2274149"),
		// 					IsConfigPendingRestart: to.Ptr(false),
		// 					IsDynamicConfig: to.Ptr(true),
		// 					IsReadOnly: to.Ptr(false),
		// 					Source: to.Ptr("system-default"),
		// 					Unit: to.Ptr("percentage"),
		// 					Value: to.Ptr("0.2"),
		// 				},
		// 			},
		// 			{
		// 				Name: to.Ptr("index_tuning.mode"),
		// 				Type: to.Ptr("Microsoft.DBforPostgreSQL/flexibleServers/configurations"),
		// 				ID: to.Ptr("/subscriptions/ffffffff-ffff-ffff-ffff-ffffffffffff/resourceGroups/exampleresourcegroup/providers/Microsoft.DBforPostgreSQL/flexibleServers/exampleserver/configurations/index_tuning.mode"),
		// 				Properties: &armpostgresql.ConfigurationProperties{
		// 					Description: to.Ptr("Configures index optimization as disabled ('OFF') or enabled to only emit recommendation. Requires Query Store to be enabled by setting pg_qs.query_capture_mode to 'TOP' or 'ALL'."),
		// 					AllowedValues: to.Ptr("off,report"),
		// 					DataType: to.Ptr(armpostgresql.ConfigurationDataTypeEnumeration),
		// 					DefaultValue: to.Ptr("off"),
		// 					DocumentationLink: to.Ptr("https://go.microsoft.com/fwlink/?linkid=2274149"),
		// 					IsConfigPendingRestart: to.Ptr(false),
		// 					IsDynamicConfig: to.Ptr(true),
		// 					IsReadOnly: to.Ptr(false),
		// 					Source: to.Ptr("system-default"),
		// 					Value: to.Ptr("off"),
		// 				},
		// 			},
		// 			{
		// 				Name: to.Ptr("index_tuning.unused_dml_per_table"),
		// 				Type: to.Ptr("Microsoft.DBforPostgreSQL/flexibleServers/configurations"),
		// 				ID: to.Ptr("/subscriptions/ffffffff-ffff-ffff-ffff-ffffffffffff/resourceGroups/exampleresourcegroup/providers/Microsoft.DBforPostgreSQL/flexibleServers/exampleserver/configurations/index_tuning.unused_dml_per_table"),
		// 				Properties: &armpostgresql.ConfigurationProperties{
		// 					Description: to.Ptr("Minimum number of daily average DML operations affecting the table, so that their unused indexes are considered for dropping."),
		// 					AllowedValues: to.Ptr("0-9999999"),
		// 					DataType: to.Ptr(armpostgresql.ConfigurationDataTypeInteger),
		// 					DefaultValue: to.Ptr("1000"),
		// 					DocumentationLink: to.Ptr("https://go.microsoft.com/fwlink/?linkid=2274149"),
		// 					IsConfigPendingRestart: to.Ptr(false),
		// 					IsDynamicConfig: to.Ptr(true),
		// 					IsReadOnly: to.Ptr(false),
		// 					Source: to.Ptr("system-default"),
		// 					Value: to.Ptr("1000"),
		// 				},
		// 			},
		// 			{
		// 				Name: to.Ptr("index_tuning.unused_min_period"),
		// 				Type: to.Ptr("Microsoft.DBforPostgreSQL/flexibleServers/configurations"),
		// 				ID: to.Ptr("/subscriptions/ffffffff-ffff-ffff-ffff-ffffffffffff/resourceGroups/exampleresourcegroup/providers/Microsoft.DBforPostgreSQL/flexibleServers/exampleserver/configurations/index_tuning.unused_min_period"),
		// 				Properties: &armpostgresql.ConfigurationProperties{
		// 					Description: to.Ptr("Minimum number of days the index has not been used, based on system statistics, so that it is considered for dropping."),
		// 					AllowedValues: to.Ptr("30-720"),
		// 					DataType: to.Ptr(armpostgresql.ConfigurationDataTypeInteger),
		// 					DefaultValue: to.Ptr("35"),
		// 					DocumentationLink: to.Ptr("https://go.microsoft.com/fwlink/?linkid=2274149"),
		// 					IsConfigPendingRestart: to.Ptr(false),
		// 					IsDynamicConfig: to.Ptr(true),
		// 					IsReadOnly: to.Ptr(false),
		// 					Source: to.Ptr("system-default"),
		// 					Unit: to.Ptr("days"),
		// 					Value: to.Ptr("35"),
		// 				},
		// 			},
		// 			{
		// 				Name: to.Ptr("index_tuning.unused_reads_per_table"),
		// 				Type: to.Ptr("Microsoft.DBforPostgreSQL/flexibleServers/configurations"),
		// 				ID: to.Ptr("/subscriptions/ffffffff-ffff-ffff-ffff-ffffffffffff/resourceGroups/exampleresourcegroup/providers/Microsoft.DBforPostgreSQL/flexibleServers/exampleserver/configurations/index_tuning.unused_reads_per_table"),
		// 				Properties: &armpostgresql.ConfigurationProperties{
		// 					Description: to.Ptr("Minimum number of daily average read operations affecting the table, so that their unused indexes are considered for dropping."),
		// 					AllowedValues: to.Ptr("0-9999999"),
		// 					DataType: to.Ptr(armpostgresql.ConfigurationDataTypeInteger),
		// 					DefaultValue: to.Ptr("1000"),
		// 					DocumentationLink: to.Ptr("https://go.microsoft.com/fwlink/?linkid=2274149"),
		// 					IsConfigPendingRestart: to.Ptr(false),
		// 					IsDynamicConfig: to.Ptr(true),
		// 					IsReadOnly: to.Ptr(false),
		// 					Source: to.Ptr("system-default"),
		// 					Value: to.Ptr("1000"),
		// 				},
		// 			},
		// 			{
		// 				Name: to.Ptr("integer_datetimes"),
		// 				Type: to.Ptr("Microsoft.DBforPostgreSQL/flexibleServers/configurations"),
		// 				ID: to.Ptr("/subscriptions/ffffffff-ffff-ffff-ffff-ffffffffffff/resourceGroups/exampleresourcegroup/providers/Microsoft.DBforPostgreSQL/flexibleServers/exampleserver/configurations/integer_datetimes"),
		// 				Properties: &armpostgresql.ConfigurationProperties{
		// 					Description: to.Ptr("Datetimes are integer based."),
		// 					AllowedValues: to.Ptr("on,off"),
		// 					DataType: to.Ptr(armpostgresql.ConfigurationDataTypeBoolean),
		// 					DefaultValue: to.Ptr("on"),
		// 					DocumentationLink: to.Ptr("https://www.postgresql.org/docs/13/runtime-config-preset.html#GUC-INTEGER-DATETIMES"),
		// 					IsConfigPendingRestart: to.Ptr(false),
		// 					IsDynamicConfig: to.Ptr(true),
		// 					IsReadOnly: to.Ptr(true),
		// 					Source: to.Ptr("system-default"),
		// 					Value: to.Ptr("on"),
		// 				},
		// 			},
		// 			{
		// 				Name: to.Ptr("intelligent_tuning"),
		// 				Type: to.Ptr("Microsoft.DBforPostgreSQL/flexibleServers/configurations"),
		// 				ID: to.Ptr("/subscriptions/ffffffff-ffff-ffff-ffff-ffffffffffff/resourceGroups/exampleresourcegroup/providers/Microsoft.DBforPostgreSQL/flexibleServers/exampleserver/configurations/intelligent_tuning"),
		// 				Properties: &armpostgresql.ConfigurationProperties{
		// 					Description: to.Ptr("Enables intelligent tuning"),
		// 					AllowedValues: to.Ptr("on,off"),
		// 					DataType: to.Ptr(armpostgresql.ConfigurationDataTypeBoolean),
		// 					DefaultValue: to.Ptr("off"),
		// 					DocumentationLink: to.Ptr("https://go.microsoft.com/fwlink/?linkid=2274150"),
		// 					IsConfigPendingRestart: to.Ptr(false),
		// 					IsDynamicConfig: to.Ptr(true),
		// 					IsReadOnly: to.Ptr(false),
		// 					Source: to.Ptr("system-default"),
		// 					Value: to.Ptr("off"),
		// 				},
		// 			},
		// 			{
		// 				Name: to.Ptr("intelligent_tuning.metric_targets"),
		// 				Type: to.Ptr("Microsoft.DBforPostgreSQL/flexibleServers/configurations"),
		// 				ID: to.Ptr("/subscriptions/ffffffff-ffff-ffff-ffff-ffffffffffff/resourceGroups/exampleresourcegroup/providers/Microsoft.DBforPostgreSQL/flexibleServers/exampleserver/configurations/intelligent_tuning.metric_targets"),
		// 				Properties: &armpostgresql.ConfigurationProperties{
		// 					Description: to.Ptr("Specifies which metrics will be adjusted by intelligent tuning."),
		// 					AllowedValues: to.Ptr("none,Storage-checkpoint_completion_target,Storage-min_wal_size,Storage-max_wal_size,Storage-bgwriter_delay,tuning-autovacuum,all"),
		// 					DataType: to.Ptr(armpostgresql.ConfigurationDataTypeSet),
		// 					DefaultValue: to.Ptr("none"),
		// 					DocumentationLink: to.Ptr("https://go.microsoft.com/fwlink/?linkid=2274150"),
		// 					IsConfigPendingRestart: to.Ptr(false),
		// 					IsDynamicConfig: to.Ptr(true),
		// 					IsReadOnly: to.Ptr(false),
		// 					Source: to.Ptr("system-default"),
		// 					Value: to.Ptr("none"),
		// 				},
		// 			},
		// 			{
		// 				Name: to.Ptr("IntervalStyle"),
		// 				Type: to.Ptr("Microsoft.DBforPostgreSQL/flexibleServers/configurations"),
		// 				ID: to.Ptr("/subscriptions/ffffffff-ffff-ffff-ffff-ffffffffffff/resourceGroups/exampleresourcegroup/providers/Microsoft.DBforPostgreSQL/flexibleServers/exampleserver/configurations/IntervalStyle"),
		// 				Properties: &armpostgresql.ConfigurationProperties{
		// 					Description: to.Ptr("Sets the display format for interval values."),
		// 					AllowedValues: to.Ptr("postgres,postgres_verbose,sql_standard,iso_8601"),
		// 					DataType: to.Ptr(armpostgresql.ConfigurationDataTypeEnumeration),
		// 					DefaultValue: to.Ptr("postgres"),
		// 					DocumentationLink: to.Ptr("https://www.postgresql.org/docs/13/runtime-config-client.html#GUC-INTERVALSTYLE"),
		// 					IsConfigPendingRestart: to.Ptr(false),
		// 					IsDynamicConfig: to.Ptr(true),
		// 					IsReadOnly: to.Ptr(false),
		// 					Source: to.Ptr("system-default"),
		// 					Value: to.Ptr("postgres"),
		// 				},
		// 			},
		// 			{
		// 				Name: to.Ptr("jit"),
		// 				Type: to.Ptr("Microsoft.DBforPostgreSQL/flexibleServers/configurations"),
		// 				ID: to.Ptr("/subscriptions/ffffffff-ffff-ffff-ffff-ffffffffffff/resourceGroups/exampleresourcegroup/providers/Microsoft.DBforPostgreSQL/flexibleServers/exampleserver/configurations/jit"),
		// 				Properties: &armpostgresql.ConfigurationProperties{
		// 					Description: to.Ptr("Determines whether JIT compilation may be used by PostgreSQL."),
		// 					AllowedValues: to.Ptr("on, off"),
		// 					DataType: to.Ptr(armpostgresql.ConfigurationDataTypeBoolean),
		// 					DefaultValue: to.Ptr("off"),
		// 					DocumentationLink: to.Ptr("https://www.postgresql.org/docs/13/runtime-config-query.html#GUC-JIT"),
		// 					IsConfigPendingRestart: to.Ptr(false),
		// 					IsDynamicConfig: to.Ptr(true),
		// 					IsReadOnly: to.Ptr(false),
		// 					Source: to.Ptr("system-default"),
		// 					Value: to.Ptr("off"),
		// 				},
		// 			},
		// 			{
		// 				Name: to.Ptr("jit_above_cost"),
		// 				Type: to.Ptr("Microsoft.DBforPostgreSQL/flexibleServers/configurations"),
		// 				ID: to.Ptr("/subscriptions/ffffffff-ffff-ffff-ffff-ffffffffffff/resourceGroups/exampleresourcegroup/providers/Microsoft.DBforPostgreSQL/flexibleServers/exampleserver/configurations/jit_above_cost"),
		// 				Properties: &armpostgresql.ConfigurationProperties{
		// 					Description: to.Ptr("Sets the query cost above which JIT compilation is activated, if enabled."),
		// 					AllowedValues: to.Ptr("-1-2147483647"),
		// 					DataType: to.Ptr(armpostgresql.ConfigurationDataTypeInteger),
		// 					DefaultValue: to.Ptr("100000"),
		// 					DocumentationLink: to.Ptr("https://www.postgresql.org/docs/13/runtime-config-query.html#GUC-JIT-ABOVE-COST"),
		// 					IsConfigPendingRestart: to.Ptr(false),
		// 					IsDynamicConfig: to.Ptr(true),
		// 					IsReadOnly: to.Ptr(false),
		// 					Source: to.Ptr("system-default"),
		// 					Value: to.Ptr("100000"),
		// 				},
		// 			},
		// 			{
		// 				Name: to.Ptr("jit_debugging_support"),
		// 				Type: to.Ptr("Microsoft.DBforPostgreSQL/flexibleServers/configurations"),
		// 				ID: to.Ptr("/subscriptions/ffffffff-ffff-ffff-ffff-ffffffffffff/resourceGroups/exampleresourcegroup/providers/Microsoft.DBforPostgreSQL/flexibleServers/exampleserver/configurations/jit_debugging_support"),
		// 				Properties: &armpostgresql.ConfigurationProperties{
		// 					Description: to.Ptr("Register JIT compiled function with debugger."),
		// 					AllowedValues: to.Ptr("on,off"),
		// 					DataType: to.Ptr(armpostgresql.ConfigurationDataTypeBoolean),
		// 					DefaultValue: to.Ptr("off"),
		// 					DocumentationLink: to.Ptr("https://www.postgresql.org/docs/13/runtime-config-developer.html#GUC-JIT-DEBUGGING-SUPPORT"),
		// 					IsConfigPendingRestart: to.Ptr(false),
		// 					IsDynamicConfig: to.Ptr(true),
		// 					IsReadOnly: to.Ptr(true),
		// 					Source: to.Ptr("system-default"),
		// 					Value: to.Ptr("off"),
		// 				},
		// 			},
		// 			{
		// 				Name: to.Ptr("jit_dump_bitcode"),
		// 				Type: to.Ptr("Microsoft.DBforPostgreSQL/flexibleServers/configurations"),
		// 				ID: to.Ptr("/subscriptions/ffffffff-ffff-ffff-ffff-ffffffffffff/resourceGroups/exampleresourcegroup/providers/Microsoft.DBforPostgreSQL/flexibleServers/exampleserver/configurations/jit_dump_bitcode"),
		// 				Properties: &armpostgresql.ConfigurationProperties{
		// 					Description: to.Ptr("Write out LLVM bitcode to facilitate JIT debugging."),
		// 					AllowedValues: to.Ptr("on,off"),
		// 					DataType: to.Ptr(armpostgresql.ConfigurationDataTypeBoolean),
		// 					DefaultValue: to.Ptr("off"),
		// 					DocumentationLink: to.Ptr("https://www.postgresql.org/docs/13/runtime-config-developer.html#GUC-JIT-DUMP-BITCODE"),
		// 					IsConfigPendingRestart: to.Ptr(false),
		// 					IsDynamicConfig: to.Ptr(true),
		// 					IsReadOnly: to.Ptr(true),
		// 					Source: to.Ptr("system-default"),
		// 					Value: to.Ptr("off"),
		// 				},
		// 			},
		// 			{
		// 				Name: to.Ptr("jit_expressions"),
		// 				Type: to.Ptr("Microsoft.DBforPostgreSQL/flexibleServers/configurations"),
		// 				ID: to.Ptr("/subscriptions/ffffffff-ffff-ffff-ffff-ffffffffffff/resourceGroups/exampleresourcegroup/providers/Microsoft.DBforPostgreSQL/flexibleServers/exampleserver/configurations/jit_expressions"),
		// 				Properties: &armpostgresql.ConfigurationProperties{
		// 					Description: to.Ptr("Allow JIT compilation of expressions."),
		// 					AllowedValues: to.Ptr("on,off"),
		// 					DataType: to.Ptr(armpostgresql.ConfigurationDataTypeBoolean),
		// 					DefaultValue: to.Ptr("on"),
		// 					DocumentationLink: to.Ptr("https://www.postgresql.org/docs/13/runtime-config-developer.html#GUC-JIT-EXPRESSIONS"),
		// 					IsConfigPendingRestart: to.Ptr(false),
		// 					IsDynamicConfig: to.Ptr(true),
		// 					IsReadOnly: to.Ptr(true),
		// 					Source: to.Ptr("system-default"),
		// 					Value: to.Ptr("on"),
		// 				},
		// 			},
		// 			{
		// 				Name: to.Ptr("jit_inline_above_cost"),
		// 				Type: to.Ptr("Microsoft.DBforPostgreSQL/flexibleServers/configurations"),
		// 				ID: to.Ptr("/subscriptions/ffffffff-ffff-ffff-ffff-ffffffffffff/resourceGroups/exampleresourcegroup/providers/Microsoft.DBforPostgreSQL/flexibleServers/exampleserver/configurations/jit_inline_above_cost"),
		// 				Properties: &armpostgresql.ConfigurationProperties{
		// 					Description: to.Ptr("Sets the query cost above which JIT compilation attempts to inline functions and operators."),
		// 					AllowedValues: to.Ptr("-1-2147483647"),
		// 					DataType: to.Ptr(armpostgresql.ConfigurationDataTypeInteger),
		// 					DefaultValue: to.Ptr("500000"),
		// 					DocumentationLink: to.Ptr("https://www.postgresql.org/docs/13/runtime-config-query.html#GUC-JIT-INLINE-ABOVE-COST"),
		// 					IsConfigPendingRestart: to.Ptr(false),
		// 					IsDynamicConfig: to.Ptr(true),
		// 					IsReadOnly: to.Ptr(false),
		// 					Source: to.Ptr("system-default"),
		// 					Value: to.Ptr("500000"),
		// 				},
		// 			},
		// 			{
		// 				Name: to.Ptr("jit_optimize_above_cost"),
		// 				Type: to.Ptr("Microsoft.DBforPostgreSQL/flexibleServers/configurations"),
		// 				ID: to.Ptr("/subscriptions/ffffffff-ffff-ffff-ffff-ffffffffffff/resourceGroups/exampleresourcegroup/providers/Microsoft.DBforPostgreSQL/flexibleServers/exampleserver/configurations/jit_optimize_above_cost"),
		// 				Properties: &armpostgresql.ConfigurationProperties{
		// 					Description: to.Ptr("Sets the query cost above which JIT compilation applies expensive optimizations."),
		// 					AllowedValues: to.Ptr("-1-2147483647"),
		// 					DataType: to.Ptr(armpostgresql.ConfigurationDataTypeInteger),
		// 					DefaultValue: to.Ptr("500000"),
		// 					DocumentationLink: to.Ptr("https://www.postgresql.org/docs/13/runtime-config-query.html#GUC-JIT-OPTIMIZE-ABOVE-COST"),
		// 					IsConfigPendingRestart: to.Ptr(false),
		// 					IsDynamicConfig: to.Ptr(true),
		// 					IsReadOnly: to.Ptr(false),
		// 					Source: to.Ptr("system-default"),
		// 					Value: to.Ptr("500000"),
		// 				},
		// 			},
		// 			{
		// 				Name: to.Ptr("jit_profiling_support"),
		// 				Type: to.Ptr("Microsoft.DBforPostgreSQL/flexibleServers/configurations"),
		// 				ID: to.Ptr("/subscriptions/ffffffff-ffff-ffff-ffff-ffffffffffff/resourceGroups/exampleresourcegroup/providers/Microsoft.DBforPostgreSQL/flexibleServers/exampleserver/configurations/jit_profiling_support"),
		// 				Properties: &armpostgresql.ConfigurationProperties{
		// 					Description: to.Ptr("Register JIT compiled function with perf profiler."),
		// 					AllowedValues: to.Ptr("on,off"),
		// 					DataType: to.Ptr(armpostgresql.ConfigurationDataTypeBoolean),
		// 					DefaultValue: to.Ptr("off"),
		// 					DocumentationLink: to.Ptr("https://www.postgresql.org/docs/13/runtime-config-developer.html#GUC-JIT-PROFILING-SUPPORT"),
		// 					IsConfigPendingRestart: to.Ptr(false),
		// 					IsDynamicConfig: to.Ptr(true),
		// 					IsReadOnly: to.Ptr(true),
		// 					Source: to.Ptr("system-default"),
		// 					Value: to.Ptr("off"),
		// 				},
		// 			},
		// 			{
		// 				Name: to.Ptr("jit_provider"),
		// 				Type: to.Ptr("Microsoft.DBforPostgreSQL/flexibleServers/configurations"),
		// 				ID: to.Ptr("/subscriptions/ffffffff-ffff-ffff-ffff-ffffffffffff/resourceGroups/exampleresourcegroup/providers/Microsoft.DBforPostgreSQL/flexibleServers/exampleserver/configurations/jit_provider"),
		// 				Properties: &armpostgresql.ConfigurationProperties{
		// 					Description: to.Ptr("JIT provider to use."),
		// 					AllowedValues: to.Ptr(".*"),
		// 					DataType: to.Ptr(armpostgresql.ConfigurationDataTypeString),
		// 					DefaultValue: to.Ptr("llvmjit"),
		// 					DocumentationLink: to.Ptr("https://www.postgresql.org/docs/13/runtime-config-client.html#GUC-JIT-PROVIDER"),
		// 					IsConfigPendingRestart: to.Ptr(false),
		// 					IsDynamicConfig: to.Ptr(false),
		// 					IsReadOnly: to.Ptr(true),
		// 					Source: to.Ptr("system-default"),
		// 					Value: to.Ptr("llvmjit"),
		// 				},
		// 			},
		// 			{
		// 				Name: to.Ptr("jit_tuple_deforming"),
		// 				Type: to.Ptr("Microsoft.DBforPostgreSQL/flexibleServers/configurations"),
		// 				ID: to.Ptr("/subscriptions/ffffffff-ffff-ffff-ffff-ffffffffffff/resourceGroups/exampleresourcegroup/providers/Microsoft.DBforPostgreSQL/flexibleServers/exampleserver/configurations/jit_tuple_deforming"),
		// 				Properties: &armpostgresql.ConfigurationProperties{
		// 					Description: to.Ptr("Allow JIT compilation of tuple deforming."),
		// 					AllowedValues: to.Ptr("on,off"),
		// 					DataType: to.Ptr(armpostgresql.ConfigurationDataTypeBoolean),
		// 					DefaultValue: to.Ptr("on"),
		// 					DocumentationLink: to.Ptr("https://www.postgresql.org/docs/13/runtime-config-developer.html#GUC-JIT-TUPLE-DEFORMING"),
		// 					IsConfigPendingRestart: to.Ptr(false),
		// 					IsDynamicConfig: to.Ptr(true),
		// 					IsReadOnly: to.Ptr(true),
		// 					Source: to.Ptr("system-default"),
		// 					Value: to.Ptr("on"),
		// 				},
		// 			},
		// 			{
		// 				Name: to.Ptr("join_collapse_limit"),
		// 				Type: to.Ptr("Microsoft.DBforPostgreSQL/flexibleServers/configurations"),
		// 				ID: to.Ptr("/subscriptions/ffffffff-ffff-ffff-ffff-ffffffffffff/resourceGroups/exampleresourcegroup/providers/Microsoft.DBforPostgreSQL/flexibleServers/exampleserver/configurations/join_collapse_limit"),
		// 				Properties: &armpostgresql.ConfigurationProperties{
		// 					Description: to.Ptr("Sets the FROM-list size beyond which JOIN constructs are not flattened."),
		// 					AllowedValues: to.Ptr("1-2147483647"),
		// 					DataType: to.Ptr(armpostgresql.ConfigurationDataTypeInteger),
		// 					DefaultValue: to.Ptr("8"),
		// 					DocumentationLink: to.Ptr("https://www.postgresql.org/docs/13/runtime-config-query.html#GUC-JOIN-COLLAPSE-LIMIT"),
		// 					IsConfigPendingRestart: to.Ptr(false),
		// 					IsDynamicConfig: to.Ptr(true),
		// 					IsReadOnly: to.Ptr(false),
		// 					Source: to.Ptr("system-default"),
		// 					Value: to.Ptr("8"),
		// 				},
		// 			},
		// 			{
		// 				Name: to.Ptr("krb_caseins_users"),
		// 				Type: to.Ptr("Microsoft.DBforPostgreSQL/flexibleServers/configurations"),
		// 				ID: to.Ptr("/subscriptions/ffffffff-ffff-ffff-ffff-ffffffffffff/resourceGroups/exampleresourcegroup/providers/Microsoft.DBforPostgreSQL/flexibleServers/exampleserver/configurations/krb_caseins_users"),
		// 				Properties: &armpostgresql.ConfigurationProperties{
		// 					Description: to.Ptr("Sets whether Kerberos and GSSAPI user names should be treated as case-insensitive."),
		// 					AllowedValues: to.Ptr("on,off"),
		// 					DataType: to.Ptr(armpostgresql.ConfigurationDataTypeBoolean),
		// 					DefaultValue: to.Ptr("off"),
		// 					DocumentationLink: to.Ptr("https://www.postgresql.org/docs/13/runtime-config-connection.html#GUC-KRB-CASEINS-USERS"),
		// 					IsConfigPendingRestart: to.Ptr(false),
		// 					IsDynamicConfig: to.Ptr(true),
		// 					IsReadOnly: to.Ptr(true),
		// 					Source: to.Ptr("system-default"),
		// 					Value: to.Ptr("off"),
		// 				},
		// 			},
		// 			{
		// 				Name: to.Ptr("krb_server_keyfile"),
		// 				Type: to.Ptr("Microsoft.DBforPostgreSQL/flexibleServers/configurations"),
		// 				ID: to.Ptr("/subscriptions/ffffffff-ffff-ffff-ffff-ffffffffffff/resourceGroups/exampleresourcegroup/providers/Microsoft.DBforPostgreSQL/flexibleServers/exampleserver/configurations/krb_server_keyfile"),
		// 				Properties: &armpostgresql.ConfigurationProperties{
		// 					Description: to.Ptr("Sets the location of the Kerberos server key file."),
		// 					AllowedValues: to.Ptr(".*"),
		// 					DataType: to.Ptr(armpostgresql.ConfigurationDataTypeString),
		// 					DefaultValue: to.Ptr(""),
		// 					DocumentationLink: to.Ptr("https://www.postgresql.org/docs/13/runtime-config-connection.html#GUC-KRB-SERVER-KEYFILE"),
		// 					IsConfigPendingRestart: to.Ptr(false),
		// 					IsDynamicConfig: to.Ptr(true),
		// 					IsReadOnly: to.Ptr(true),
		// 					Source: to.Ptr("system-default"),
		// 					Value: to.Ptr(""),
		// 				},
		// 			},
		// 			{
		// 				Name: to.Ptr("lc_collate"),
		// 				Type: to.Ptr("Microsoft.DBforPostgreSQL/flexibleServers/configurations"),
		// 				ID: to.Ptr("/subscriptions/ffffffff-ffff-ffff-ffff-ffffffffffff/resourceGroups/exampleresourcegroup/providers/Microsoft.DBforPostgreSQL/flexibleServers/exampleserver/configurations/lc_collate"),
		// 				Properties: &armpostgresql.ConfigurationProperties{
		// 					Description: to.Ptr("Shows the collation order locale."),
		// 					AllowedValues: to.Ptr(".*"),
		// 					DataType: to.Ptr(armpostgresql.ConfigurationDataTypeString),
		// 					DefaultValue: to.Ptr("C"),
		// 					DocumentationLink: to.Ptr("https://www.postgresql.org/docs/13/locale.html"),
		// 					IsConfigPendingRestart: to.Ptr(false),
		// 					IsDynamicConfig: to.Ptr(true),
		// 					IsReadOnly: to.Ptr(true),
		// 					Source: to.Ptr("user-override"),
		// 					Value: to.Ptr("en_US.utf8"),
		// 				},
		// 			},
		// 			{
		// 				Name: to.Ptr("lc_ctype"),
		// 				Type: to.Ptr("Microsoft.DBforPostgreSQL/flexibleServers/configurations"),
		// 				ID: to.Ptr("/subscriptions/ffffffff-ffff-ffff-ffff-ffffffffffff/resourceGroups/exampleresourcegroup/providers/Microsoft.DBforPostgreSQL/flexibleServers/exampleserver/configurations/lc_ctype"),
		// 				Properties: &armpostgresql.ConfigurationProperties{
		// 					Description: to.Ptr("Shows the character classification and case conversion locale."),
		// 					AllowedValues: to.Ptr(".*"),
		// 					DataType: to.Ptr(armpostgresql.ConfigurationDataTypeString),
		// 					DefaultValue: to.Ptr("C"),
		// 					DocumentationLink: to.Ptr("https://www.postgresql.org/docs/13/locale.html"),
		// 					IsConfigPendingRestart: to.Ptr(false),
		// 					IsDynamicConfig: to.Ptr(true),
		// 					IsReadOnly: to.Ptr(true),
		// 					Source: to.Ptr("user-override"),
		// 					Value: to.Ptr("en_US.utf8"),
		// 				},
		// 			},
		// 			{
		// 				Name: to.Ptr("lc_messages"),
		// 				Type: to.Ptr("Microsoft.DBforPostgreSQL/flexibleServers/configurations"),
		// 				ID: to.Ptr("/subscriptions/ffffffff-ffff-ffff-ffff-ffffffffffff/resourceGroups/exampleresourcegroup/providers/Microsoft.DBforPostgreSQL/flexibleServers/exampleserver/configurations/lc_messages"),
		// 				Properties: &armpostgresql.ConfigurationProperties{
		// 					Description: to.Ptr("Sets the language in which messages are displayed."),
		// 					AllowedValues: to.Ptr(".*"),
		// 					DataType: to.Ptr(armpostgresql.ConfigurationDataTypeString),
		// 					DefaultValue: to.Ptr(""),
		// 					DocumentationLink: to.Ptr("https://www.postgresql.org/docs/13/runtime-config-client.html#GUC-LC-MESSAGES"),
		// 					IsConfigPendingRestart: to.Ptr(false),
		// 					IsDynamicConfig: to.Ptr(true),
		// 					IsReadOnly: to.Ptr(true),
		// 					Source: to.Ptr("user-override"),
		// 					Value: to.Ptr("en_US.utf8"),
		// 				},
		// 			},
		// 			{
		// 				Name: to.Ptr("lc_monetary"),
		// 				Type: to.Ptr("Microsoft.DBforPostgreSQL/flexibleServers/configurations"),
		// 				ID: to.Ptr("/subscriptions/ffffffff-ffff-ffff-ffff-ffffffffffff/resourceGroups/exampleresourcegroup/providers/Microsoft.DBforPostgreSQL/flexibleServers/exampleserver/configurations/lc_monetary"),
		// 				Properties: &armpostgresql.ConfigurationProperties{
		// 					Description: to.Ptr("Sets the locale for formatting monetary amounts."),
		// 					AllowedValues: to.Ptr("[A-Za-z0-9._ -]+"),
		// 					DataType: to.Ptr(armpostgresql.ConfigurationDataTypeString),
		// 					DefaultValue: to.Ptr("en_US.utf-8"),
		// 					DocumentationLink: to.Ptr("https://www.postgresql.org/docs/13/runtime-config-client.html#GUC-LC-MONETARY"),
		// 					IsConfigPendingRestart: to.Ptr(false),
		// 					IsDynamicConfig: to.Ptr(true),
		// 					IsReadOnly: to.Ptr(false),
		// 					Source: to.Ptr("system-default"),
		// 					Value: to.Ptr("en_US.utf-8"),
		// 				},
		// 			},
		// 			{
		// 				Name: to.Ptr("lc_numeric"),
		// 				Type: to.Ptr("Microsoft.DBforPostgreSQL/flexibleServers/configurations"),
		// 				ID: to.Ptr("/subscriptions/ffffffff-ffff-ffff-ffff-ffffffffffff/resourceGroups/exampleresourcegroup/providers/Microsoft.DBforPostgreSQL/flexibleServers/exampleserver/configurations/lc_numeric"),
		// 				Properties: &armpostgresql.ConfigurationProperties{
		// 					Description: to.Ptr("Sets the locale for formatting numbers."),
		// 					AllowedValues: to.Ptr("[A-Za-z0-9._ -]+"),
		// 					DataType: to.Ptr(armpostgresql.ConfigurationDataTypeString),
		// 					DefaultValue: to.Ptr("en_US.utf-8"),
		// 					DocumentationLink: to.Ptr("https://www.postgresql.org/docs/13/runtime-config-client.html#GUC-LC-NUMERIC"),
		// 					IsConfigPendingRestart: to.Ptr(false),
		// 					IsDynamicConfig: to.Ptr(true),
		// 					IsReadOnly: to.Ptr(false),
		// 					Source: to.Ptr("system-default"),
		// 					Value: to.Ptr("en_US.utf-8"),
		// 				},
		// 			},
		// 			{
		// 				Name: to.Ptr("lc_time"),
		// 				Type: to.Ptr("Microsoft.DBforPostgreSQL/flexibleServers/configurations"),
		// 				ID: to.Ptr("/subscriptions/ffffffff-ffff-ffff-ffff-ffffffffffff/resourceGroups/exampleresourcegroup/providers/Microsoft.DBforPostgreSQL/flexibleServers/exampleserver/configurations/lc_time"),
		// 				Properties: &armpostgresql.ConfigurationProperties{
		// 					Description: to.Ptr("Sets the locale for formatting date and time values."),
		// 					AllowedValues: to.Ptr(".*"),
		// 					DataType: to.Ptr(armpostgresql.ConfigurationDataTypeString),
		// 					DefaultValue: to.Ptr("C"),
		// 					DocumentationLink: to.Ptr("https://www.postgresql.org/docs/13/runtime-config-client.html#GUC-LC-TIME"),
		// 					IsConfigPendingRestart: to.Ptr(false),
		// 					IsDynamicConfig: to.Ptr(true),
		// 					IsReadOnly: to.Ptr(true),
		// 					Source: to.Ptr("user-override"),
		// 					Value: to.Ptr("en_US.utf8"),
		// 				},
		// 			},
		// 			{
		// 				Name: to.Ptr("listen_addresses"),
		// 				Type: to.Ptr("Microsoft.DBforPostgreSQL/flexibleServers/configurations"),
		// 				ID: to.Ptr("/subscriptions/ffffffff-ffff-ffff-ffff-ffffffffffff/resourceGroups/exampleresourcegroup/providers/Microsoft.DBforPostgreSQL/flexibleServers/exampleserver/configurations/listen_addresses"),
		// 				Properties: &armpostgresql.ConfigurationProperties{
		// 					Description: to.Ptr("Sets the host name or IP address(es) to listen to."),
		// 					AllowedValues: to.Ptr(".*"),
		// 					DataType: to.Ptr(armpostgresql.ConfigurationDataTypeString),
		// 					DefaultValue: to.Ptr("localhost"),
		// 					DocumentationLink: to.Ptr("https://www.postgresql.org/docs/13/runtime-config-connection.html#GUC-LISTEN-ADDRESSES"),
		// 					IsConfigPendingRestart: to.Ptr(false),
		// 					IsDynamicConfig: to.Ptr(false),
		// 					IsReadOnly: to.Ptr(true),
		// 					Source: to.Ptr("user-override"),
		// 					Value: to.Ptr("*"),
		// 				},
		// 			},
		// 			{
		// 				Name: to.Ptr("lo_compat_privileges"),
		// 				Type: to.Ptr("Microsoft.DBforPostgreSQL/flexibleServers/configurations"),
		// 				ID: to.Ptr("/subscriptions/ffffffff-ffff-ffff-ffff-ffffffffffff/resourceGroups/exampleresourcegroup/providers/Microsoft.DBforPostgreSQL/flexibleServers/exampleserver/configurations/lo_compat_privileges"),
		// 				Properties: &armpostgresql.ConfigurationProperties{
		// 					Description: to.Ptr("Enables backward compatibility mode for privilege checks on large objects."),
		// 					AllowedValues: to.Ptr("on,off"),
		// 					DataType: to.Ptr(armpostgresql.ConfigurationDataTypeBoolean),
		// 					DefaultValue: to.Ptr("off"),
		// 					DocumentationLink: to.Ptr("https://www.postgresql.org/docs/13/runtime-config-compatible.html#GUC-LO-COMPAT-PRIVILEGES"),
		// 					IsConfigPendingRestart: to.Ptr(false),
		// 					IsDynamicConfig: to.Ptr(true),
		// 					IsReadOnly: to.Ptr(false),
		// 					Source: to.Ptr("system-default"),
		// 					Value: to.Ptr("off"),
		// 				},
		// 			},
		// 			{
		// 				Name: to.Ptr("local_preload_libraries"),
		// 				Type: to.Ptr("Microsoft.DBforPostgreSQL/flexibleServers/configurations"),
		// 				ID: to.Ptr("/subscriptions/ffffffff-ffff-ffff-ffff-ffffffffffff/resourceGroups/exampleresourcegroup/providers/Microsoft.DBforPostgreSQL/flexibleServers/exampleserver/configurations/local_preload_libraries"),
		// 				Properties: &armpostgresql.ConfigurationProperties{
		// 					Description: to.Ptr("Lists unprivileged shared libraries to preload into each backend."),
		// 					AllowedValues: to.Ptr(".*"),
		// 					DataType: to.Ptr(armpostgresql.ConfigurationDataTypeString),
		// 					DefaultValue: to.Ptr(""),
		// 					DocumentationLink: to.Ptr("https://www.postgresql.org/docs/13/runtime-config-client.html#GUC-LOCAL-PRELOAD-LIBRARIES"),
		// 					IsConfigPendingRestart: to.Ptr(false),
		// 					IsDynamicConfig: to.Ptr(true),
		// 					IsReadOnly: to.Ptr(true),
		// 					Source: to.Ptr("system-default"),
		// 					Value: to.Ptr(""),
		// 				},
		// 			},
		// 			{
		// 				Name: to.Ptr("lock_timeout"),
		// 				Type: to.Ptr("Microsoft.DBforPostgreSQL/flexibleServers/configurations"),
		// 				ID: to.Ptr("/subscriptions/ffffffff-ffff-ffff-ffff-ffffffffffff/resourceGroups/exampleresourcegroup/providers/Microsoft.DBforPostgreSQL/flexibleServers/exampleserver/configurations/lock_timeout"),
		// 				Properties: &armpostgresql.ConfigurationProperties{
		// 					Description: to.Ptr("Sets the maximum allowed duration (in milliseconds) of any wait for a lock. 0 turns this off."),
		// 					AllowedValues: to.Ptr("0-2147483647"),
		// 					DataType: to.Ptr(armpostgresql.ConfigurationDataTypeInteger),
		// 					DefaultValue: to.Ptr("0"),
		// 					DocumentationLink: to.Ptr("https://www.postgresql.org/docs/13/runtime-config-client.html#GUC-LOCK-TIMEOUT"),
		// 					IsConfigPendingRestart: to.Ptr(false),
		// 					IsDynamicConfig: to.Ptr(true),
		// 					IsReadOnly: to.Ptr(false),
		// 					Source: to.Ptr("system-default"),
		// 					Unit: to.Ptr("milliseconds"),
		// 					Value: to.Ptr("0"),
		// 				},
		// 			},
		// 			{
		// 				Name: to.Ptr("log_autovacuum_min_duration"),
		// 				Type: to.Ptr("Microsoft.DBforPostgreSQL/flexibleServers/configurations"),
		// 				ID: to.Ptr("/subscriptions/ffffffff-ffff-ffff-ffff-ffffffffffff/resourceGroups/exampleresourcegroup/providers/Microsoft.DBforPostgreSQL/flexibleServers/exampleserver/configurations/log_autovacuum_min_duration"),
		// 				Properties: &armpostgresql.ConfigurationProperties{
		// 					Description: to.Ptr("Sets the minimum execution time above which autovacuum actions will be logged."),
		// 					AllowedValues: to.Ptr("-1-2147483647"),
		// 					DataType: to.Ptr(armpostgresql.ConfigurationDataTypeInteger),
		// 					DefaultValue: to.Ptr("-1"),
		// 					DocumentationLink: to.Ptr("https://www.postgresql.org/docs/13/runtime-config-autovacuum.html#id-1.6.6.13.4.2.1.3"),
		// 					IsConfigPendingRestart: to.Ptr(false),
		// 					IsDynamicConfig: to.Ptr(true),
		// 					IsReadOnly: to.Ptr(false),
		// 					Source: to.Ptr("system-default"),
		// 					Unit: to.Ptr("milliseconds"),
		// 					Value: to.Ptr("-1"),
		// 				},
		// 			},
		// 			{
		// 				Name: to.Ptr("log_checkpoints"),
		// 				Type: to.Ptr("Microsoft.DBforPostgreSQL/flexibleServers/configurations"),
		// 				ID: to.Ptr("/subscriptions/ffffffff-ffff-ffff-ffff-ffffffffffff/resourceGroups/exampleresourcegroup/providers/Microsoft.DBforPostgreSQL/flexibleServers/exampleserver/configurations/log_checkpoints"),
		// 				Properties: &armpostgresql.ConfigurationProperties{
		// 					Description: to.Ptr("Logs each checkpoint."),
		// 					AllowedValues: to.Ptr("on,off"),
		// 					DataType: to.Ptr(armpostgresql.ConfigurationDataTypeBoolean),
		// 					DefaultValue: to.Ptr("on"),
		// 					DocumentationLink: to.Ptr("https://www.postgresql.org/docs/13/runtime-config-logging.html#GUC-LOG-CHECKPOINTS"),
		// 					IsConfigPendingRestart: to.Ptr(false),
		// 					IsDynamicConfig: to.Ptr(true),
		// 					IsReadOnly: to.Ptr(false),
		// 					Source: to.Ptr("system-default"),
		// 					Value: to.Ptr("on"),
		// 				},
		// 			},
		// 			{
		// 				Name: to.Ptr("log_connections"),
		// 				Type: to.Ptr("Microsoft.DBforPostgreSQL/flexibleServers/configurations"),
		// 				ID: to.Ptr("/subscriptions/ffffffff-ffff-ffff-ffff-ffffffffffff/resourceGroups/exampleresourcegroup/providers/Microsoft.DBforPostgreSQL/flexibleServers/exampleserver/configurations/log_connections"),
		// 				Properties: &armpostgresql.ConfigurationProperties{
		// 					Description: to.Ptr("Causes each attempted connection to the server to be logged, as well as successful completion of client authentication."),
		// 					AllowedValues: to.Ptr("on,off"),
		// 					DataType: to.Ptr(armpostgresql.ConfigurationDataTypeBoolean),
		// 					DefaultValue: to.Ptr("on"),
		// 					DocumentationLink: to.Ptr("https://www.postgresql.org/docs/13/runtime-config-logging.html#GUC-LOG-CONNECTIONS"),
		// 					IsConfigPendingRestart: to.Ptr(false),
		// 					IsDynamicConfig: to.Ptr(true),
		// 					IsReadOnly: to.Ptr(false),
		// 					Source: to.Ptr("system-default"),
		// 					Value: to.Ptr("on"),
		// 				},
		// 			},
		// 			{
		// 				Name: to.Ptr("log_destination"),
		// 				Type: to.Ptr("Microsoft.DBforPostgreSQL/flexibleServers/configurations"),
		// 				ID: to.Ptr("/subscriptions/ffffffff-ffff-ffff-ffff-ffffffffffff/resourceGroups/exampleresourcegroup/providers/Microsoft.DBforPostgreSQL/flexibleServers/exampleserver/configurations/log_destination"),
		// 				Properties: &armpostgresql.ConfigurationProperties{
		// 					Description: to.Ptr("Sets the destination for server log output."),
		// 					AllowedValues: to.Ptr("stderr,csvlog"),
		// 					DataType: to.Ptr(armpostgresql.ConfigurationDataTypeEnumeration),
		// 					DefaultValue: to.Ptr("stderr"),
		// 					DocumentationLink: to.Ptr("https://www.postgresql.org/docs/13/runtime-config-logging.html#GUC-LOG-DESTINATION"),
		// 					IsConfigPendingRestart: to.Ptr(false),
		// 					IsDynamicConfig: to.Ptr(true),
		// 					IsReadOnly: to.Ptr(false),
		// 					Source: to.Ptr("system-default"),
		// 					Value: to.Ptr("stderr"),
		// 				},
		// 			},
		// 			{
		// 				Name: to.Ptr("log_directory"),
		// 				Type: to.Ptr("Microsoft.DBforPostgreSQL/flexibleServers/configurations"),
		// 				ID: to.Ptr("/subscriptions/ffffffff-ffff-ffff-ffff-ffffffffffff/resourceGroups/exampleresourcegroup/providers/Microsoft.DBforPostgreSQL/flexibleServers/exampleserver/configurations/log_directory"),
		// 				Properties: &armpostgresql.ConfigurationProperties{
		// 					Description: to.Ptr("Sets the destination directory for log files."),
		// 					AllowedValues: to.Ptr(".*"),
		// 					DataType: to.Ptr(armpostgresql.ConfigurationDataTypeString),
		// 					DefaultValue: to.Ptr("log"),
		// 					DocumentationLink: to.Ptr("https://www.postgresql.org/docs/13/runtime-config-logging.html#GUC-LOG-DIRECTORY"),
		// 					IsConfigPendingRestart: to.Ptr(false),
		// 					IsDynamicConfig: to.Ptr(true),
		// 					IsReadOnly: to.Ptr(true),
		// 					Source: to.Ptr("system-default"),
		// 					Value: to.Ptr("log"),
		// 				},
		// 			},
		// 			{
		// 				Name: to.Ptr("log_disconnections"),
		// 				Type: to.Ptr("Microsoft.DBforPostgreSQL/flexibleServers/configurations"),
		// 				ID: to.Ptr("/subscriptions/ffffffff-ffff-ffff-ffff-ffffffffffff/resourceGroups/exampleresourcegroup/providers/Microsoft.DBforPostgreSQL/flexibleServers/exampleserver/configurations/log_disconnections"),
		// 				Properties: &armpostgresql.ConfigurationProperties{
		// 					Description: to.Ptr("Logs end of a session, including duration."),
		// 					AllowedValues: to.Ptr("on,off"),
		// 					DataType: to.Ptr(armpostgresql.ConfigurationDataTypeBoolean),
		// 					DefaultValue: to.Ptr("on"),
		// 					DocumentationLink: to.Ptr("https://www.postgresql.org/docs/13/runtime-config-logging.html#GUC-LOG-DISCONNECTIONS"),
		// 					IsConfigPendingRestart: to.Ptr(false),
		// 					IsDynamicConfig: to.Ptr(true),
		// 					IsReadOnly: to.Ptr(false),
		// 					Source: to.Ptr("system-default"),
		// 					Value: to.Ptr("on"),
		// 				},
		// 			},
		// 			{
		// 				Name: to.Ptr("log_duration"),
		// 				Type: to.Ptr("Microsoft.DBforPostgreSQL/flexibleServers/configurations"),
		// 				ID: to.Ptr("/subscriptions/ffffffff-ffff-ffff-ffff-ffffffffffff/resourceGroups/exampleresourcegroup/providers/Microsoft.DBforPostgreSQL/flexibleServers/exampleserver/configurations/log_duration"),
		// 				Properties: &armpostgresql.ConfigurationProperties{
		// 					Description: to.Ptr("Logs the duration of each completed SQL statement."),
		// 					AllowedValues: to.Ptr("on,off"),
		// 					DataType: to.Ptr(armpostgresql.ConfigurationDataTypeBoolean),
		// 					DefaultValue: to.Ptr("off"),
		// 					DocumentationLink: to.Ptr("https://www.postgresql.org/docs/13/runtime-config-logging.html#GUC-LOG-DURATION"),
		// 					IsConfigPendingRestart: to.Ptr(false),
		// 					IsDynamicConfig: to.Ptr(true),
		// 					IsReadOnly: to.Ptr(false),
		// 					Source: to.Ptr("system-default"),
		// 					Value: to.Ptr("off"),
		// 				},
		// 			},
		// 			{
		// 				Name: to.Ptr("log_error_verbosity"),
		// 				Type: to.Ptr("Microsoft.DBforPostgreSQL/flexibleServers/configurations"),
		// 				ID: to.Ptr("/subscriptions/ffffffff-ffff-ffff-ffff-ffffffffffff/resourceGroups/exampleresourcegroup/providers/Microsoft.DBforPostgreSQL/flexibleServers/exampleserver/configurations/log_error_verbosity"),
		// 				Properties: &armpostgresql.ConfigurationProperties{
		// 					Description: to.Ptr("Controls the amount of detail written in the server log for each message that is logged."),
		// 					AllowedValues: to.Ptr("terse,default,verbose"),
		// 					DataType: to.Ptr(armpostgresql.ConfigurationDataTypeEnumeration),
		// 					DefaultValue: to.Ptr("default"),
		// 					DocumentationLink: to.Ptr("https://www.postgresql.org/docs/13/runtime-config-logging.html#GUC-LOG-ERROR-VERBOSITY"),
		// 					IsConfigPendingRestart: to.Ptr(false),
		// 					IsDynamicConfig: to.Ptr(true),
		// 					IsReadOnly: to.Ptr(false),
		// 					Source: to.Ptr("system-default"),
		// 					Value: to.Ptr("default"),
		// 				},
		// 			},
		// 			{
		// 				Name: to.Ptr("log_executor_stats"),
		// 				Type: to.Ptr("Microsoft.DBforPostgreSQL/flexibleServers/configurations"),
		// 				ID: to.Ptr("/subscriptions/ffffffff-ffff-ffff-ffff-ffffffffffff/resourceGroups/exampleresourcegroup/providers/Microsoft.DBforPostgreSQL/flexibleServers/exampleserver/configurations/log_executor_stats"),
		// 				Properties: &armpostgresql.ConfigurationProperties{
		// 					Description: to.Ptr("Writes executor performance statistics to the server log."),
		// 					AllowedValues: to.Ptr("on,off"),
		// 					DataType: to.Ptr(armpostgresql.ConfigurationDataTypeBoolean),
		// 					DefaultValue: to.Ptr("off"),
		// 					DocumentationLink: to.Ptr("https://www.postgresql.org/docs/13/runtime-config-statistics.html#id-1.6.6.12.3.2.1.4.3"),
		// 					IsConfigPendingRestart: to.Ptr(false),
		// 					IsDynamicConfig: to.Ptr(true),
		// 					IsReadOnly: to.Ptr(true),
		// 					Source: to.Ptr("system-default"),
		// 					Value: to.Ptr("off"),
		// 				},
		// 			},
		// 			{
		// 				Name: to.Ptr("log_file_mode"),
		// 				Type: to.Ptr("Microsoft.DBforPostgreSQL/flexibleServers/configurations"),
		// 				ID: to.Ptr("/subscriptions/ffffffff-ffff-ffff-ffff-ffffffffffff/resourceGroups/exampleresourcegroup/providers/Microsoft.DBforPostgreSQL/flexibleServers/exampleserver/configurations/log_file_mode"),
		// 				Properties: &armpostgresql.ConfigurationProperties{
		// 					Description: to.Ptr("Sets the file permissions for log files."),
		// 					AllowedValues: to.Ptr("0-511"),
		// 					DataType: to.Ptr(armpostgresql.ConfigurationDataTypeInteger),
		// 					DefaultValue: to.Ptr("384"),
		// 					DocumentationLink: to.Ptr("https://www.postgresql.org/docs/13/runtime-config-logging.html#GUC-LOG-FILE-MODE"),
		// 					IsConfigPendingRestart: to.Ptr(false),
		// 					IsDynamicConfig: to.Ptr(true),
		// 					IsReadOnly: to.Ptr(true),
		// 					Source: to.Ptr("user-override"),
		// 					Value: to.Ptr("0600"),
		// 				},
		// 			},
		// 			{
		// 				Name: to.Ptr("log_filename"),
		// 				Type: to.Ptr("Microsoft.DBforPostgreSQL/flexibleServers/configurations"),
		// 				ID: to.Ptr("/subscriptions/ffffffff-ffff-ffff-ffff-ffffffffffff/resourceGroups/exampleresourcegroup/providers/Microsoft.DBforPostgreSQL/flexibleServers/exampleserver/configurations/log_filename"),
		// 				Properties: &armpostgresql.ConfigurationProperties{
		// 					Description: to.Ptr("Sets the file name pattern for log files."),
		// 					AllowedValues: to.Ptr(".*"),
		// 					DataType: to.Ptr(armpostgresql.ConfigurationDataTypeString),
		// 					DefaultValue: to.Ptr("postgresql-%Y-%m-%d_%H%M%S.log"),
		// 					DocumentationLink: to.Ptr("https://www.postgresql.org/docs/13/runtime-config-logging.html#GUC-LOG-FILENAME"),
		// 					IsConfigPendingRestart: to.Ptr(false),
		// 					IsDynamicConfig: to.Ptr(true),
		// 					IsReadOnly: to.Ptr(true),
		// 					Source: to.Ptr("system-default"),
		// 					Value: to.Ptr("postgresql-%Y-%m-%d_%H%M%S.log"),
		// 				},
		// 			},
		// 			{
		// 				Name: to.Ptr("log_hostname"),
		// 				Type: to.Ptr("Microsoft.DBforPostgreSQL/flexibleServers/configurations"),
		// 				ID: to.Ptr("/subscriptions/ffffffff-ffff-ffff-ffff-ffffffffffff/resourceGroups/exampleresourcegroup/providers/Microsoft.DBforPostgreSQL/flexibleServers/exampleserver/configurations/log_hostname"),
		// 				Properties: &armpostgresql.ConfigurationProperties{
		// 					Description: to.Ptr("Logs the host name in the connection logs."),
		// 					AllowedValues: to.Ptr("on,off"),
		// 					DataType: to.Ptr(armpostgresql.ConfigurationDataTypeBoolean),
		// 					DefaultValue: to.Ptr("off"),
		// 					DocumentationLink: to.Ptr("https://www.postgresql.org/docs/13/runtime-config-logging.html#GUC-LOG-HOSTNAME"),
		// 					IsConfigPendingRestart: to.Ptr(false),
		// 					IsDynamicConfig: to.Ptr(true),
		// 					IsReadOnly: to.Ptr(false),
		// 					Source: to.Ptr("system-default"),
		// 					Value: to.Ptr("off"),
		// 				},
		// 			},
		// 			{
		// 				Name: to.Ptr("log_line_prefix"),
		// 				Type: to.Ptr("Microsoft.DBforPostgreSQL/flexibleServers/configurations"),
		// 				ID: to.Ptr("/subscriptions/ffffffff-ffff-ffff-ffff-ffffffffffff/resourceGroups/exampleresourcegroup/providers/Microsoft.DBforPostgreSQL/flexibleServers/exampleserver/configurations/log_line_prefix"),
		// 				Properties: &armpostgresql.ConfigurationProperties{
		// 					Description: to.Ptr("Sets the printf-style string that is output at the beginning of each log line."),
		// 					AllowedValues: to.Ptr("[^']*"),
		// 					DataType: to.Ptr(armpostgresql.ConfigurationDataTypeString),
		// 					DefaultValue: to.Ptr("%t-%c-"),
		// 					DocumentationLink: to.Ptr("https://www.postgresql.org/docs/13/runtime-config-logging.html#GUC-LOG-LINE-PREFIX"),
		// 					IsConfigPendingRestart: to.Ptr(false),
		// 					IsDynamicConfig: to.Ptr(true),
		// 					IsReadOnly: to.Ptr(false),
		// 					Source: to.Ptr("system-default"),
		// 					Value: to.Ptr("%t-%c-"),
		// 				},
		// 			},
		// 			{
		// 				Name: to.Ptr("log_lock_waits"),
		// 				Type: to.Ptr("Microsoft.DBforPostgreSQL/flexibleServers/configurations"),
		// 				ID: to.Ptr("/subscriptions/ffffffff-ffff-ffff-ffff-ffffffffffff/resourceGroups/exampleresourcegroup/providers/Microsoft.DBforPostgreSQL/flexibleServers/exampleserver/configurations/log_lock_waits"),
		// 				Properties: &armpostgresql.ConfigurationProperties{
		// 					Description: to.Ptr("Controls whether a log message is produced when a session waits longer than deadlock_timeout to acquire a lock."),
		// 					AllowedValues: to.Ptr("on,off"),
		// 					DataType: to.Ptr(armpostgresql.ConfigurationDataTypeBoolean),
		// 					DefaultValue: to.Ptr("off"),
		// 					DocumentationLink: to.Ptr("https://www.postgresql.org/docs/13/runtime-config-logging.html#GUC-LOG-LOCK-WAITS"),
		// 					IsConfigPendingRestart: to.Ptr(false),
		// 					IsDynamicConfig: to.Ptr(true),
		// 					IsReadOnly: to.Ptr(false),
		// 					Source: to.Ptr("system-default"),
		// 					Value: to.Ptr("off"),
		// 				},
		// 			},
		// 			{
		// 				Name: to.Ptr("log_min_duration_sample"),
		// 				Type: to.Ptr("Microsoft.DBforPostgreSQL/flexibleServers/configurations"),
		// 				ID: to.Ptr("/subscriptions/ffffffff-ffff-ffff-ffff-ffffffffffff/resourceGroups/exampleresourcegroup/providers/Microsoft.DBforPostgreSQL/flexibleServers/exampleserver/configurations/log_min_duration_sample"),
		// 				Properties: &armpostgresql.ConfigurationProperties{
		// 					Description: to.Ptr("Sets the minimum execution time above which a sample of statements will be logged. Sampling is determined by log_statement_sample_rate."),
		// 					AllowedValues: to.Ptr("-1-2147483647"),
		// 					DataType: to.Ptr(armpostgresql.ConfigurationDataTypeInteger),
		// 					DefaultValue: to.Ptr("-1"),
		// 					DocumentationLink: to.Ptr("https://www.postgresql.org/docs/13/runtime-config-logging.html#GUC-LOG-MIN-DURATION-SAMPLE"),
		// 					IsConfigPendingRestart: to.Ptr(false),
		// 					IsDynamicConfig: to.Ptr(true),
		// 					IsReadOnly: to.Ptr(false),
		// 					Source: to.Ptr("system-default"),
		// 					Unit: to.Ptr("milliseconds"),
		// 					Value: to.Ptr("-1"),
		// 				},
		// 			},
		// 			{
		// 				Name: to.Ptr("log_min_duration_statement"),
		// 				Type: to.Ptr("Microsoft.DBforPostgreSQL/flexibleServers/configurations"),
		// 				ID: to.Ptr("/subscriptions/ffffffff-ffff-ffff-ffff-ffffffffffff/resourceGroups/exampleresourcegroup/providers/Microsoft.DBforPostgreSQL/flexibleServers/exampleserver/configurations/log_min_duration_statement"),
		// 				Properties: &armpostgresql.ConfigurationProperties{
		// 					Description: to.Ptr("Sets the minimum execution time (in milliseconds) above which statements will be logged. -1 disables logging statement durations."),
		// 					AllowedValues: to.Ptr("-1-2147483647"),
		// 					DataType: to.Ptr(armpostgresql.ConfigurationDataTypeInteger),
		// 					DefaultValue: to.Ptr("-1"),
		// 					DocumentationLink: to.Ptr("https://www.postgresql.org/docs/13/runtime-config-logging.html#GUC-LOG-MIN-DURATION-STATEMENT"),
		// 					IsConfigPendingRestart: to.Ptr(false),
		// 					IsDynamicConfig: to.Ptr(true),
		// 					IsReadOnly: to.Ptr(false),
		// 					Source: to.Ptr("system-default"),
		// 					Unit: to.Ptr("milliseconds"),
		// 					Value: to.Ptr("-1"),
		// 				},
		// 			},
		// 			{
		// 				Name: to.Ptr("log_min_error_statement"),
		// 				Type: to.Ptr("Microsoft.DBforPostgreSQL/flexibleServers/configurations"),
		// 				ID: to.Ptr("/subscriptions/ffffffff-ffff-ffff-ffff-ffffffffffff/resourceGroups/exampleresourcegroup/providers/Microsoft.DBforPostgreSQL/flexibleServers/exampleserver/configurations/log_min_error_statement"),
		// 				Properties: &armpostgresql.ConfigurationProperties{
		// 					Description: to.Ptr("Causes all statements generating error at or above this level to be logged."),
		// 					AllowedValues: to.Ptr("debug5,debug4,debug3,debug2,debug1,info,notice,warning,error,log,fatal,panic"),
		// 					DataType: to.Ptr(armpostgresql.ConfigurationDataTypeEnumeration),
		// 					DefaultValue: to.Ptr("error"),
		// 					DocumentationLink: to.Ptr("https://www.postgresql.org/docs/13/runtime-config-logging.html#GUC-LOG-MIN-ERROR-STATEMENT"),
		// 					IsConfigPendingRestart: to.Ptr(false),
		// 					IsDynamicConfig: to.Ptr(true),
		// 					IsReadOnly: to.Ptr(false),
		// 					Source: to.Ptr("system-default"),
		// 					Value: to.Ptr("error"),
		// 				},
		// 			},
		// 			{
		// 				Name: to.Ptr("log_min_messages"),
		// 				Type: to.Ptr("Microsoft.DBforPostgreSQL/flexibleServers/configurations"),
		// 				ID: to.Ptr("/subscriptions/ffffffff-ffff-ffff-ffff-ffffffffffff/resourceGroups/exampleresourcegroup/providers/Microsoft.DBforPostgreSQL/flexibleServers/exampleserver/configurations/log_min_messages"),
		// 				Properties: &armpostgresql.ConfigurationProperties{
		// 					Description: to.Ptr("Controls which message levels are written to the server log."),
		// 					AllowedValues: to.Ptr("debug5,debug4,debug3,debug2,debug1,info,notice,warning,error,log,fatal,panic"),
		// 					DataType: to.Ptr(armpostgresql.ConfigurationDataTypeEnumeration),
		// 					DefaultValue: to.Ptr("warning"),
		// 					DocumentationLink: to.Ptr("https://www.postgresql.org/docs/13/runtime-config-logging.html#GUC-LOG-MIN-MESSAGES"),
		// 					IsConfigPendingRestart: to.Ptr(false),
		// 					IsDynamicConfig: to.Ptr(true),
		// 					IsReadOnly: to.Ptr(false),
		// 					Source: to.Ptr("system-default"),
		// 					Value: to.Ptr("warning"),
		// 				},
		// 			},
		// 			{
		// 				Name: to.Ptr("log_parameter_max_length"),
		// 				Type: to.Ptr("Microsoft.DBforPostgreSQL/flexibleServers/configurations"),
		// 				ID: to.Ptr("/subscriptions/ffffffff-ffff-ffff-ffff-ffffffffffff/resourceGroups/exampleresourcegroup/providers/Microsoft.DBforPostgreSQL/flexibleServers/exampleserver/configurations/log_parameter_max_length"),
		// 				Properties: &armpostgresql.ConfigurationProperties{
		// 					Description: to.Ptr("When logging statements, limit logged parameter values to first N bytes."),
		// 					AllowedValues: to.Ptr("-1-1073741823"),
		// 					DataType: to.Ptr(armpostgresql.ConfigurationDataTypeInteger),
		// 					DefaultValue: to.Ptr("-1"),
		// 					DocumentationLink: to.Ptr("https://www.postgresql.org/docs/13/runtime-config-logging.html#GUC-LOG-PARAMETER-MAX-LENGTH"),
		// 					IsConfigPendingRestart: to.Ptr(false),
		// 					IsDynamicConfig: to.Ptr(true),
		// 					IsReadOnly: to.Ptr(false),
		// 					Source: to.Ptr("system-default"),
		// 					Unit: to.Ptr("bytes"),
		// 					Value: to.Ptr("-1"),
		// 				},
		// 			},
		// 			{
		// 				Name: to.Ptr("log_parameter_max_length_on_error"),
		// 				Type: to.Ptr("Microsoft.DBforPostgreSQL/flexibleServers/configurations"),
		// 				ID: to.Ptr("/subscriptions/ffffffff-ffff-ffff-ffff-ffffffffffff/resourceGroups/exampleresourcegroup/providers/Microsoft.DBforPostgreSQL/flexibleServers/exampleserver/configurations/log_parameter_max_length_on_error"),
		// 				Properties: &armpostgresql.ConfigurationProperties{
		// 					Description: to.Ptr("When reporting an error, limit logged parameter values to first N bytes."),
		// 					AllowedValues: to.Ptr("-1-1073741823"),
		// 					DataType: to.Ptr(armpostgresql.ConfigurationDataTypeInteger),
		// 					DefaultValue: to.Ptr("0"),
		// 					DocumentationLink: to.Ptr("https://www.postgresql.org/docs/13/runtime-config-logging.html#GUC-LOG-PARAMETER-MAX-LENGTH-ON-ERROR"),
		// 					IsConfigPendingRestart: to.Ptr(false),
		// 					IsDynamicConfig: to.Ptr(true),
		// 					IsReadOnly: to.Ptr(false),
		// 					Source: to.Ptr("system-default"),
		// 					Unit: to.Ptr("bytes"),
		// 					Value: to.Ptr("0"),
		// 				},
		// 			},
		// 			{
		// 				Name: to.Ptr("log_parser_stats"),
		// 				Type: to.Ptr("Microsoft.DBforPostgreSQL/flexibleServers/configurations"),
		// 				ID: to.Ptr("/subscriptions/ffffffff-ffff-ffff-ffff-ffffffffffff/resourceGroups/exampleresourcegroup/providers/Microsoft.DBforPostgreSQL/flexibleServers/exampleserver/configurations/log_parser_stats"),
		// 				Properties: &armpostgresql.ConfigurationProperties{
		// 					Description: to.Ptr("Writes parser performance statistics to the server log."),
		// 					AllowedValues: to.Ptr("on,off"),
		// 					DataType: to.Ptr(armpostgresql.ConfigurationDataTypeBoolean),
		// 					DefaultValue: to.Ptr("off"),
		// 					DocumentationLink: to.Ptr("https://www.postgresql.org/docs/13/runtime-config-statistics.html#id-1.6.6.12.3.2.1.4.3"),
		// 					IsConfigPendingRestart: to.Ptr(false),
		// 					IsDynamicConfig: to.Ptr(true),
		// 					IsReadOnly: to.Ptr(true),
		// 					Source: to.Ptr("system-default"),
		// 					Value: to.Ptr("off"),
		// 				},
		// 			},
		// 			{
		// 				Name: to.Ptr("log_planner_stats"),
		// 				Type: to.Ptr("Microsoft.DBforPostgreSQL/flexibleServers/configurations"),
		// 				ID: to.Ptr("/subscriptions/ffffffff-ffff-ffff-ffff-ffffffffffff/resourceGroups/exampleresourcegroup/providers/Microsoft.DBforPostgreSQL/flexibleServers/exampleserver/configurations/log_planner_stats"),
		// 				Properties: &armpostgresql.ConfigurationProperties{
		// 					Description: to.Ptr("Writes planner performance statistics to the server log."),
		// 					AllowedValues: to.Ptr("on,off"),
		// 					DataType: to.Ptr(armpostgresql.ConfigurationDataTypeBoolean),
		// 					DefaultValue: to.Ptr("off"),
		// 					DocumentationLink: to.Ptr("https://www.postgresql.org/docs/13/runtime-config-statistics.html#id-1.6.6.12.3.2.1.4.3"),
		// 					IsConfigPendingRestart: to.Ptr(false),
		// 					IsDynamicConfig: to.Ptr(true),
		// 					IsReadOnly: to.Ptr(true),
		// 					Source: to.Ptr("system-default"),
		// 					Value: to.Ptr("off"),
		// 				},
		// 			},
		// 			{
		// 				Name: to.Ptr("log_replication_commands"),
		// 				Type: to.Ptr("Microsoft.DBforPostgreSQL/flexibleServers/configurations"),
		// 				ID: to.Ptr("/subscriptions/ffffffff-ffff-ffff-ffff-ffffffffffff/resourceGroups/exampleresourcegroup/providers/Microsoft.DBforPostgreSQL/flexibleServers/exampleserver/configurations/log_replication_commands"),
		// 				Properties: &armpostgresql.ConfigurationProperties{
		// 					Description: to.Ptr("Logs each replication command."),
		// 					AllowedValues: to.Ptr("on,off"),
		// 					DataType: to.Ptr(armpostgresql.ConfigurationDataTypeBoolean),
		// 					DefaultValue: to.Ptr("on"),
		// 					DocumentationLink: to.Ptr("https://www.postgresql.org/docs/13/runtime-config-logging.html#GUC-LOG-REPLICATION-COMMANDS"),
		// 					IsConfigPendingRestart: to.Ptr(false),
		// 					IsDynamicConfig: to.Ptr(true),
		// 					IsReadOnly: to.Ptr(true),
		// 					Source: to.Ptr("system-default"),
		// 					Value: to.Ptr("on"),
		// 				},
		// 			},
		// 			{
		// 				Name: to.Ptr("log_rotation_age"),
		// 				Type: to.Ptr("Microsoft.DBforPostgreSQL/flexibleServers/configurations"),
		// 				ID: to.Ptr("/subscriptions/ffffffff-ffff-ffff-ffff-ffffffffffff/resourceGroups/exampleresourcegroup/providers/Microsoft.DBforPostgreSQL/flexibleServers/exampleserver/configurations/log_rotation_age"),
		// 				Properties: &armpostgresql.ConfigurationProperties{
		// 					Description: to.Ptr("Automatic log file rotation will occur after N minutes."),
		// 					AllowedValues: to.Ptr("0-35791394"),
		// 					DataType: to.Ptr(armpostgresql.ConfigurationDataTypeInteger),
		// 					DefaultValue: to.Ptr("1440"),
		// 					DocumentationLink: to.Ptr("https://www.postgresql.org/docs/13/runtime-config-logging.html#GUC-LOG-ROTATION-AGE"),
		// 					IsConfigPendingRestart: to.Ptr(false),
		// 					IsDynamicConfig: to.Ptr(true),
		// 					IsReadOnly: to.Ptr(true),
		// 					Source: to.Ptr("user-override"),
		// 					Unit: to.Ptr("minutes"),
		// 					Value: to.Ptr("60"),
		// 				},
		// 			},
		// 			{
		// 				Name: to.Ptr("log_rotation_size"),
		// 				Type: to.Ptr("Microsoft.DBforPostgreSQL/flexibleServers/configurations"),
		// 				ID: to.Ptr("/subscriptions/ffffffff-ffff-ffff-ffff-ffffffffffff/resourceGroups/exampleresourcegroup/providers/Microsoft.DBforPostgreSQL/flexibleServers/exampleserver/configurations/log_rotation_size"),
		// 				Properties: &armpostgresql.ConfigurationProperties{
		// 					Description: to.Ptr("Automatic log file rotation will occur after N kilobytes."),
		// 					AllowedValues: to.Ptr("0-2097151"),
		// 					DataType: to.Ptr(armpostgresql.ConfigurationDataTypeInteger),
		// 					DefaultValue: to.Ptr("10240"),
		// 					DocumentationLink: to.Ptr("https://www.postgresql.org/docs/13/runtime-config-logging.html#GUC-LOG-ROTATION-SIZE"),
		// 					IsConfigPendingRestart: to.Ptr(false),
		// 					IsDynamicConfig: to.Ptr(true),
		// 					IsReadOnly: to.Ptr(true),
		// 					Source: to.Ptr("user-override"),
		// 					Unit: to.Ptr("KB"),
		// 					Value: to.Ptr("102400"),
		// 				},
		// 			},
		// 			{
		// 				Name: to.Ptr("log_statement"),
		// 				Type: to.Ptr("Microsoft.DBforPostgreSQL/flexibleServers/configurations"),
		// 				ID: to.Ptr("/subscriptions/ffffffff-ffff-ffff-ffff-ffffffffffff/resourceGroups/exampleresourcegroup/providers/Microsoft.DBforPostgreSQL/flexibleServers/exampleserver/configurations/log_statement"),
		// 				Properties: &armpostgresql.ConfigurationProperties{
		// 					Description: to.Ptr("Sets the type of statements logged."),
		// 					AllowedValues: to.Ptr("none,ddl,mod,all"),
		// 					DataType: to.Ptr(armpostgresql.ConfigurationDataTypeEnumeration),
		// 					DefaultValue: to.Ptr("none"),
		// 					DocumentationLink: to.Ptr("https://www.postgresql.org/docs/13/runtime-config-logging.html#GUC-LOG-STATEMENT"),
		// 					IsConfigPendingRestart: to.Ptr(false),
		// 					IsDynamicConfig: to.Ptr(true),
		// 					IsReadOnly: to.Ptr(false),
		// 					Source: to.Ptr("system-default"),
		// 					Value: to.Ptr("none"),
		// 				},
		// 			},
		// 			{
		// 				Name: to.Ptr("log_statement_sample_rate"),
		// 				Type: to.Ptr("Microsoft.DBforPostgreSQL/flexibleServers/configurations"),
		// 				ID: to.Ptr("/subscriptions/ffffffff-ffff-ffff-ffff-ffffffffffff/resourceGroups/exampleresourcegroup/providers/Microsoft.DBforPostgreSQL/flexibleServers/exampleserver/configurations/log_statement_sample_rate"),
		// 				Properties: &armpostgresql.ConfigurationProperties{
		// 					Description: to.Ptr("Fraction of statements exceeding log_min_duration_sample to be logged."),
		// 					AllowedValues: to.Ptr("0-1"),
		// 					DataType: to.Ptr(armpostgresql.ConfigurationDataTypeNumeric),
		// 					DefaultValue: to.Ptr("1"),
		// 					DocumentationLink: to.Ptr("https://www.postgresql.org/docs/13/runtime-config-logging.html#GUC-LOG-STATEMENT-SAMPLE-RATE"),
		// 					IsConfigPendingRestart: to.Ptr(false),
		// 					IsDynamicConfig: to.Ptr(true),
		// 					IsReadOnly: to.Ptr(false),
		// 					Source: to.Ptr("system-default"),
		// 					Value: to.Ptr("1"),
		// 				},
		// 			},
		// 			{
		// 				Name: to.Ptr("log_statement_stats"),
		// 				Type: to.Ptr("Microsoft.DBforPostgreSQL/flexibleServers/configurations"),
		// 				ID: to.Ptr("/subscriptions/ffffffff-ffff-ffff-ffff-ffffffffffff/resourceGroups/exampleresourcegroup/providers/Microsoft.DBforPostgreSQL/flexibleServers/exampleserver/configurations/log_statement_stats"),
		// 				Properties: &armpostgresql.ConfigurationProperties{
		// 					Description: to.Ptr("For each query, writes cumulative performance statistics to the server log."),
		// 					AllowedValues: to.Ptr("on,off"),
		// 					DataType: to.Ptr(armpostgresql.ConfigurationDataTypeBoolean),
		// 					DefaultValue: to.Ptr("off"),
		// 					DocumentationLink: to.Ptr("https://www.postgresql.org/docs/13/runtime-config-statistics.html#id-1.6.6.12.3.2.1.4.3"),
		// 					IsConfigPendingRestart: to.Ptr(false),
		// 					IsDynamicConfig: to.Ptr(true),
		// 					IsReadOnly: to.Ptr(false),
		// 					Source: to.Ptr("system-default"),
		// 					Value: to.Ptr("off"),
		// 				},
		// 			},
		// 			{
		// 				Name: to.Ptr("log_temp_files"),
		// 				Type: to.Ptr("Microsoft.DBforPostgreSQL/flexibleServers/configurations"),
		// 				ID: to.Ptr("/subscriptions/ffffffff-ffff-ffff-ffff-ffffffffffff/resourceGroups/exampleresourcegroup/providers/Microsoft.DBforPostgreSQL/flexibleServers/exampleserver/configurations/log_temp_files"),
		// 				Properties: &armpostgresql.ConfigurationProperties{
		// 					Description: to.Ptr("Logs the use of temporary files larger than this number of kilobytes."),
		// 					AllowedValues: to.Ptr("-1-2147483647"),
		// 					DataType: to.Ptr(armpostgresql.ConfigurationDataTypeInteger),
		// 					DefaultValue: to.Ptr("-1"),
		// 					DocumentationLink: to.Ptr("https://www.postgresql.org/docs/13/runtime-config-logging.html#GUC-LOG-TEMP-FILES"),
		// 					IsConfigPendingRestart: to.Ptr(false),
		// 					IsDynamicConfig: to.Ptr(true),
		// 					IsReadOnly: to.Ptr(false),
		// 					Source: to.Ptr("system-default"),
		// 					Unit: to.Ptr("KB"),
		// 					Value: to.Ptr("-1"),
		// 				},
		// 			},
		// 			{
		// 				Name: to.Ptr("log_timezone"),
		// 				Type: to.Ptr("Microsoft.DBforPostgreSQL/flexibleServers/configurations"),
		// 				ID: to.Ptr("/subscriptions/ffffffff-ffff-ffff-ffff-ffffffffffff/resourceGroups/exampleresourcegroup/providers/Microsoft.DBforPostgreSQL/flexibleServers/exampleserver/configurations/log_timezone"),
		// 				Properties: &armpostgresql.ConfigurationProperties{
		// 					Description: to.Ptr("Sets the time zone to use in log messages."),
		// 					AllowedValues: to.Ptr(".*"),
		// 					DataType: to.Ptr(armpostgresql.ConfigurationDataTypeString),
		// 					DefaultValue: to.Ptr("GMT"),
		// 					DocumentationLink: to.Ptr("https://www.postgresql.org/docs/13/runtime-config-logging.html#GUC-LOG-TIMEZONE"),
		// 					IsConfigPendingRestart: to.Ptr(false),
		// 					IsDynamicConfig: to.Ptr(true),
		// 					IsReadOnly: to.Ptr(true),
		// 					Source: to.Ptr("user-override"),
		// 					Value: to.Ptr("UTC"),
		// 				},
		// 			},
		// 			{
		// 				Name: to.Ptr("log_transaction_sample_rate"),
		// 				Type: to.Ptr("Microsoft.DBforPostgreSQL/flexibleServers/configurations"),
		// 				ID: to.Ptr("/subscriptions/ffffffff-ffff-ffff-ffff-ffffffffffff/resourceGroups/exampleresourcegroup/providers/Microsoft.DBforPostgreSQL/flexibleServers/exampleserver/configurations/log_transaction_sample_rate"),
		// 				Properties: &armpostgresql.ConfigurationProperties{
		// 					Description: to.Ptr("Set the fraction of transactions to log for new transactions."),
		// 					AllowedValues: to.Ptr("0-1"),
		// 					DataType: to.Ptr(armpostgresql.ConfigurationDataTypeNumeric),
		// 					DefaultValue: to.Ptr("0"),
		// 					DocumentationLink: to.Ptr("https://www.postgresql.org/docs/13/runtime-config-logging.html#GUC-LOG-TRANSACTION-SAMPLE-RATE"),
		// 					IsConfigPendingRestart: to.Ptr(false),
		// 					IsDynamicConfig: to.Ptr(true),
		// 					IsReadOnly: to.Ptr(true),
		// 					Source: to.Ptr("system-default"),
		// 					Value: to.Ptr("0"),
		// 				},
		// 			},
		// 			{
		// 				Name: to.Ptr("log_truncate_on_rotation"),
		// 				Type: to.Ptr("Microsoft.DBforPostgreSQL/flexibleServers/configurations"),
		// 				ID: to.Ptr("/subscriptions/ffffffff-ffff-ffff-ffff-ffffffffffff/resourceGroups/exampleresourcegroup/providers/Microsoft.DBforPostgreSQL/flexibleServers/exampleserver/configurations/log_truncate_on_rotation"),
		// 				Properties: &armpostgresql.ConfigurationProperties{
		// 					Description: to.Ptr("Truncate existing log files of same name during log rotation."),
		// 					AllowedValues: to.Ptr("on,off"),
		// 					DataType: to.Ptr(armpostgresql.ConfigurationDataTypeBoolean),
		// 					DefaultValue: to.Ptr("off"),
		// 					DocumentationLink: to.Ptr("https://www.postgresql.org/docs/13/runtime-config-logging.html#GUC-LOG-TRUNCATE-ON-ROTATION"),
		// 					IsConfigPendingRestart: to.Ptr(false),
		// 					IsDynamicConfig: to.Ptr(true),
		// 					IsReadOnly: to.Ptr(true),
		// 					Source: to.Ptr("system-default"),
		// 					Value: to.Ptr("off"),
		// 				},
		// 			},
		// 			{
		// 				Name: to.Ptr("logfiles.download_enable"),
		// 				Type: to.Ptr("Microsoft.DBforPostgreSQL/flexibleServers/configurations"),
		// 				ID: to.Ptr("/subscriptions/ffffffff-ffff-ffff-ffff-ffffffffffff/resourceGroups/exampleresourcegroup/providers/Microsoft.DBforPostgreSQL/flexibleServers/exampleserver/configurations/logfiles.download_enable"),
		// 				Properties: &armpostgresql.ConfigurationProperties{
		// 					Description: to.Ptr("Enables or disables server logs functionality."),
		// 					AllowedValues: to.Ptr("on,off"),
		// 					DataType: to.Ptr(armpostgresql.ConfigurationDataTypeBoolean),
		// 					DefaultValue: to.Ptr("off"),
		// 					DocumentationLink: to.Ptr("https://go.microsoft.com/fwlink/?linkid=2274270"),
		// 					IsConfigPendingRestart: to.Ptr(false),
		// 					IsDynamicConfig: to.Ptr(true),
		// 					IsReadOnly: to.Ptr(false),
		// 					Source: to.Ptr("system-default"),
		// 					Value: to.Ptr("off"),
		// 				},
		// 			},
		// 			{
		// 				Name: to.Ptr("logfiles.retention_days"),
		// 				Type: to.Ptr("Microsoft.DBforPostgreSQL/flexibleServers/configurations"),
		// 				ID: to.Ptr("/subscriptions/ffffffff-ffff-ffff-ffff-ffffffffffff/resourceGroups/exampleresourcegroup/providers/Microsoft.DBforPostgreSQL/flexibleServers/exampleserver/configurations/logfiles.retention_days"),
		// 				Properties: &armpostgresql.ConfigurationProperties{
		// 					Description: to.Ptr("Sets the retention period window in days for server logs - after this time data will be deleted."),
		// 					AllowedValues: to.Ptr("1-7"),
		// 					DataType: to.Ptr(armpostgresql.ConfigurationDataTypeInteger),
		// 					DefaultValue: to.Ptr("3"),
		// 					DocumentationLink: to.Ptr("https://go.microsoft.com/fwlink/?linkid=2274270"),
		// 					IsConfigPendingRestart: to.Ptr(false),
		// 					IsDynamicConfig: to.Ptr(true),
		// 					IsReadOnly: to.Ptr(false),
		// 					Source: to.Ptr("system-default"),
		// 					Value: to.Ptr("3"),
		// 				},
		// 			},
		// 			{
		// 				Name: to.Ptr("logging_collector"),
		// 				Type: to.Ptr("Microsoft.DBforPostgreSQL/flexibleServers/configurations"),
		// 				ID: to.Ptr("/subscriptions/ffffffff-ffff-ffff-ffff-ffffffffffff/resourceGroups/exampleresourcegroup/providers/Microsoft.DBforPostgreSQL/flexibleServers/exampleserver/configurations/logging_collector"),
		// 				Properties: &armpostgresql.ConfigurationProperties{
		// 					Description: to.Ptr("Start a subprocess to capture stderr output and/or csvlogs into log files."),
		// 					AllowedValues: to.Ptr("on,off"),
		// 					DataType: to.Ptr(armpostgresql.ConfigurationDataTypeBoolean),
		// 					DefaultValue: to.Ptr("off"),
		// 					DocumentationLink: to.Ptr("https://www.postgresql.org/docs/13/runtime-config-logging.html#GUC-LOGGING-COLLECTOR"),
		// 					IsConfigPendingRestart: to.Ptr(false),
		// 					IsDynamicConfig: to.Ptr(false),
		// 					IsReadOnly: to.Ptr(true),
		// 					Source: to.Ptr("system-default"),
		// 					Value: to.Ptr("off"),
		// 				},
		// 			},
		// 			{
		// 				Name: to.Ptr("logical_decoding_work_mem"),
		// 				Type: to.Ptr("Microsoft.DBforPostgreSQL/flexibleServers/configurations"),
		// 				ID: to.Ptr("/subscriptions/ffffffff-ffff-ffff-ffff-ffffffffffff/resourceGroups/exampleresourcegroup/providers/Microsoft.DBforPostgreSQL/flexibleServers/exampleserver/configurations/logical_decoding_work_mem"),
		// 				Properties: &armpostgresql.ConfigurationProperties{
		// 					Description: to.Ptr("Sets the maximum memory to be used for logical decoding."),
		// 					AllowedValues: to.Ptr("64-2147483647"),
		// 					DataType: to.Ptr(armpostgresql.ConfigurationDataTypeInteger),
		// 					DefaultValue: to.Ptr("65536"),
		// 					DocumentationLink: to.Ptr("https://www.postgresql.org/docs/13/runtime-config-resource.html#GUC-LOGICAL-DECODING-WORK-MEM"),
		// 					IsConfigPendingRestart: to.Ptr(false),
		// 					IsDynamicConfig: to.Ptr(true),
		// 					IsReadOnly: to.Ptr(false),
		// 					Source: to.Ptr("system-default"),
		// 					Unit: to.Ptr("KB"),
		// 					Value: to.Ptr("65536"),
		// 				},
		// 			},
		// 			{
		// 				Name: to.Ptr("maintenance_io_concurrency"),
		// 				Type: to.Ptr("Microsoft.DBforPostgreSQL/flexibleServers/configurations"),
		// 				ID: to.Ptr("/subscriptions/ffffffff-ffff-ffff-ffff-ffffffffffff/resourceGroups/exampleresourcegroup/providers/Microsoft.DBforPostgreSQL/flexibleServers/exampleserver/configurations/maintenance_io_concurrency"),
		// 				Properties: &armpostgresql.ConfigurationProperties{
		// 					Description: to.Ptr("A variant of effective_io_concurrency that is used for maintenance work."),
		// 					AllowedValues: to.Ptr("0-1000"),
		// 					DataType: to.Ptr(armpostgresql.ConfigurationDataTypeInteger),
		// 					DefaultValue: to.Ptr("10"),
		// 					DocumentationLink: to.Ptr("https://www.postgresql.org/docs/13/runtime-config-resource.html#GUC-MAINTENANCE-IO-CONCURRENCY"),
		// 					IsConfigPendingRestart: to.Ptr(false),
		// 					IsDynamicConfig: to.Ptr(true),
		// 					IsReadOnly: to.Ptr(true),
		// 					Source: to.Ptr("system-default"),
		// 					Value: to.Ptr("10"),
		// 				},
		// 			},
		// 			{
		// 				Name: to.Ptr("maintenance_work_mem"),
		// 				Type: to.Ptr("Microsoft.DBforPostgreSQL/flexibleServers/configurations"),
		// 				ID: to.Ptr("/subscriptions/ffffffff-ffff-ffff-ffff-ffffffffffff/resourceGroups/exampleresourcegroup/providers/Microsoft.DBforPostgreSQL/flexibleServers/exampleserver/configurations/maintenance_work_mem"),
		// 				Properties: &armpostgresql.ConfigurationProperties{
		// 					Description: to.Ptr("Sets the maximum memory to be used for maintenance operations such as VACUUM, Create Index."),
		// 					AllowedValues: to.Ptr("1024-2097151"),
		// 					DataType: to.Ptr(armpostgresql.ConfigurationDataTypeInteger),
		// 					DefaultValue: to.Ptr("274432"),
		// 					DocumentationLink: to.Ptr("https://www.postgresql.org/docs/13/runtime-config-resource.html#GUC-MAINTENANCE-WORK-MEM"),
		// 					IsConfigPendingRestart: to.Ptr(false),
		// 					IsDynamicConfig: to.Ptr(true),
		// 					IsReadOnly: to.Ptr(false),
		// 					Source: to.Ptr("system-default"),
		// 					Unit: to.Ptr("KB"),
		// 					Value: to.Ptr("274432"),
		// 				},
		// 			},
		// 			{
		// 				Name: to.Ptr("max_connections"),
		// 				Type: to.Ptr("Microsoft.DBforPostgreSQL/flexibleServers/configurations"),
		// 				ID: to.Ptr("/subscriptions/ffffffff-ffff-ffff-ffff-ffffffffffff/resourceGroups/exampleresourcegroup/providers/Microsoft.DBforPostgreSQL/flexibleServers/exampleserver/configurations/max_connections"),
		// 				Properties: &armpostgresql.ConfigurationProperties{
		// 					Description: to.Ptr("Sets the maximum number of concurrent connections to the database server."),
		// 					AllowedValues: to.Ptr("25-5000"),
		// 					DataType: to.Ptr(armpostgresql.ConfigurationDataTypeInteger),
		// 					DefaultValue: to.Ptr("1718"),
		// 					DocumentationLink: to.Ptr("https://www.postgresql.org/docs/13/runtime-config-connection.html#GUC-MAX-CONNECTIONS"),
		// 					IsConfigPendingRestart: to.Ptr(false),
		// 					IsDynamicConfig: to.Ptr(false),
		// 					IsReadOnly: to.Ptr(false),
		// 					Source: to.Ptr("system-default"),
		// 					Value: to.Ptr("1718"),
		// 				},
		// 			},
		// 			{
		// 				Name: to.Ptr("max_files_per_process"),
		// 				Type: to.Ptr("Microsoft.DBforPostgreSQL/flexibleServers/configurations"),
		// 				ID: to.Ptr("/subscriptions/ffffffff-ffff-ffff-ffff-ffffffffffff/resourceGroups/exampleresourcegroup/providers/Microsoft.DBforPostgreSQL/flexibleServers/exampleserver/configurations/max_files_per_process"),
		// 				Properties: &armpostgresql.ConfigurationProperties{
		// 					Description: to.Ptr("Sets the maximum number of simultaneously open files for each server process."),
		// 					AllowedValues: to.Ptr("64-2147483647"),
		// 					DataType: to.Ptr(armpostgresql.ConfigurationDataTypeInteger),
		// 					DefaultValue: to.Ptr("1000"),
		// 					DocumentationLink: to.Ptr("https://www.postgresql.org/docs/13/runtime-config-resource.html#GUC-MAX-FILES-PER-PROCESS"),
		// 					IsConfigPendingRestart: to.Ptr(false),
		// 					IsDynamicConfig: to.Ptr(false),
		// 					IsReadOnly: to.Ptr(true),
		// 					Source: to.Ptr("system-default"),
		// 					Value: to.Ptr("1000"),
		// 				},
		// 			},
		// 			{
		// 				Name: to.Ptr("max_function_args"),
		// 				Type: to.Ptr("Microsoft.DBforPostgreSQL/flexibleServers/configurations"),
		// 				ID: to.Ptr("/subscriptions/ffffffff-ffff-ffff-ffff-ffffffffffff/resourceGroups/exampleresourcegroup/providers/Microsoft.DBforPostgreSQL/flexibleServers/exampleserver/configurations/max_function_args"),
		// 				Properties: &armpostgresql.ConfigurationProperties{
		// 					Description: to.Ptr("Shows the maximum number of function arguments."),
		// 					AllowedValues: to.Ptr("100-100"),
		// 					DataType: to.Ptr(armpostgresql.ConfigurationDataTypeInteger),
		// 					DefaultValue: to.Ptr("100"),
		// 					DocumentationLink: to.Ptr("https://www.postgresql.org/docs/13/runtime-config-preset.html#GUC-MAX-FUNCTION-ARGS"),
		// 					IsConfigPendingRestart: to.Ptr(false),
		// 					IsDynamicConfig: to.Ptr(true),
		// 					IsReadOnly: to.Ptr(true),
		// 					Source: to.Ptr("system-default"),
		// 					Value: to.Ptr("100"),
		// 				},
		// 			},
		// 			{
		// 				Name: to.Ptr("max_identifier_length"),
		// 				Type: to.Ptr("Microsoft.DBforPostgreSQL/flexibleServers/configurations"),
		// 				ID: to.Ptr("/subscriptions/ffffffff-ffff-ffff-ffff-ffffffffffff/resourceGroups/exampleresourcegroup/providers/Microsoft.DBforPostgreSQL/flexibleServers/exampleserver/configurations/max_identifier_length"),
		// 				Properties: &armpostgresql.ConfigurationProperties{
		// 					Description: to.Ptr("Shows the maximum identifier length."),
		// 					AllowedValues: to.Ptr("63-63"),
		// 					DataType: to.Ptr(armpostgresql.ConfigurationDataTypeInteger),
		// 					DefaultValue: to.Ptr("63"),
		// 					DocumentationLink: to.Ptr("https://www.postgresql.org/docs/13/runtime-config-preset.html#GUC-MAX-IDENTIFIER-LENGTH"),
		// 					IsConfigPendingRestart: to.Ptr(false),
		// 					IsDynamicConfig: to.Ptr(true),
		// 					IsReadOnly: to.Ptr(true),
		// 					Source: to.Ptr("system-default"),
		// 					Value: to.Ptr("63"),
		// 				},
		// 			},
		// 			{
		// 				Name: to.Ptr("max_index_keys"),
		// 				Type: to.Ptr("Microsoft.DBforPostgreSQL/flexibleServers/configurations"),
		// 				ID: to.Ptr("/subscriptions/ffffffff-ffff-ffff-ffff-ffffffffffff/resourceGroups/exampleresourcegroup/providers/Microsoft.DBforPostgreSQL/flexibleServers/exampleserver/configurations/max_index_keys"),
		// 				Properties: &armpostgresql.ConfigurationProperties{
		// 					Description: to.Ptr("Shows the maximum number of index keys."),
		// 					AllowedValues: to.Ptr("32-32"),
		// 					DataType: to.Ptr(armpostgresql.ConfigurationDataTypeInteger),
		// 					DefaultValue: to.Ptr("32"),
		// 					DocumentationLink: to.Ptr("https://www.postgresql.org/docs/13/runtime-config-preset.html#GUC-MAX-INDEX-KEYS"),
		// 					IsConfigPendingRestart: to.Ptr(false),
		// 					IsDynamicConfig: to.Ptr(true),
		// 					IsReadOnly: to.Ptr(true),
		// 					Source: to.Ptr("system-default"),
		// 					Value: to.Ptr("32"),
		// 				},
		// 			},
		// 			{
		// 				Name: to.Ptr("max_locks_per_transaction"),
		// 				Type: to.Ptr("Microsoft.DBforPostgreSQL/flexibleServers/configurations"),
		// 				ID: to.Ptr("/subscriptions/ffffffff-ffff-ffff-ffff-ffffffffffff/resourceGroups/exampleresourcegroup/providers/Microsoft.DBforPostgreSQL/flexibleServers/exampleserver/configurations/max_locks_per_transaction"),
		// 				Properties: &armpostgresql.ConfigurationProperties{
		// 					Description: to.Ptr("Sets the maximum number of locks can be taken per transaction. When running a replica server, you must set this parameter to the same or higher value than on the master server."),
		// 					AllowedValues: to.Ptr("10-8388608"),
		// 					DataType: to.Ptr(armpostgresql.ConfigurationDataTypeInteger),
		// 					DefaultValue: to.Ptr("64"),
		// 					DocumentationLink: to.Ptr("https://www.postgresql.org/docs/13/runtime-config-locks.html#GUC-MAX-LOCKS-PER-TRANSACTION"),
		// 					IsConfigPendingRestart: to.Ptr(false),
		// 					IsDynamicConfig: to.Ptr(false),
		// 					IsReadOnly: to.Ptr(false),
		// 					Source: to.Ptr("system-default"),
		// 					Value: to.Ptr("64"),
		// 				},
		// 			},
		// 			{
		// 				Name: to.Ptr("max_logical_replication_workers"),
		// 				Type: to.Ptr("Microsoft.DBforPostgreSQL/flexibleServers/configurations"),
		// 				ID: to.Ptr("/subscriptions/ffffffff-ffff-ffff-ffff-ffffffffffff/resourceGroups/exampleresourcegroup/providers/Microsoft.DBforPostgreSQL/flexibleServers/exampleserver/configurations/max_logical_replication_workers"),
		// 				Properties: &armpostgresql.ConfigurationProperties{
		// 					Description: to.Ptr("Specifies maximum number of logical replication workers. This includes both apply workers and table synchronization workers."),
		// 					AllowedValues: to.Ptr("0-262143"),
		// 					DataType: to.Ptr(armpostgresql.ConfigurationDataTypeInteger),
		// 					DefaultValue: to.Ptr("4"),
		// 					DocumentationLink: to.Ptr("https://www.postgresql.org/docs/13/runtime-config-replication.html#GUC-MAX-LOGICAL-REPLICATION-WORKERS"),
		// 					IsConfigPendingRestart: to.Ptr(false),
		// 					IsDynamicConfig: to.Ptr(false),
		// 					IsReadOnly: to.Ptr(false),
		// 					Source: to.Ptr("system-default"),
		// 					Value: to.Ptr("4"),
		// 				},
		// 			},
		// 			{
		// 				Name: to.Ptr("max_parallel_maintenance_workers"),
		// 				Type: to.Ptr("Microsoft.DBforPostgreSQL/flexibleServers/configurations"),
		// 				ID: to.Ptr("/subscriptions/ffffffff-ffff-ffff-ffff-ffffffffffff/resourceGroups/exampleresourcegroup/providers/Microsoft.DBforPostgreSQL/flexibleServers/exampleserver/configurations/max_parallel_maintenance_workers"),
		// 				Properties: &armpostgresql.ConfigurationProperties{
		// 					Description: to.Ptr("Sets the maximum number of parallel processes per maintenance operation."),
		// 					AllowedValues: to.Ptr("0-64"),
		// 					DataType: to.Ptr(armpostgresql.ConfigurationDataTypeInteger),
		// 					DefaultValue: to.Ptr("2"),
		// 					DocumentationLink: to.Ptr("https://www.postgresql.org/docs/13/runtime-config-resource.html#GUC-MAX-PARALLEL-WORKERS-MAINTENANCE"),
		// 					IsConfigPendingRestart: to.Ptr(false),
		// 					IsDynamicConfig: to.Ptr(true),
		// 					IsReadOnly: to.Ptr(false),
		// 					Source: to.Ptr("system-default"),
		// 					Value: to.Ptr("2"),
		// 				},
		// 			},
		// 			{
		// 				Name: to.Ptr("max_parallel_workers"),
		// 				Type: to.Ptr("Microsoft.DBforPostgreSQL/flexibleServers/configurations"),
		// 				ID: to.Ptr("/subscriptions/ffffffff-ffff-ffff-ffff-ffffffffffff/resourceGroups/exampleresourcegroup/providers/Microsoft.DBforPostgreSQL/flexibleServers/exampleserver/configurations/max_parallel_workers"),
		// 				Properties: &armpostgresql.ConfigurationProperties{
		// 					Description: to.Ptr("Sets the maximum number of workers than can be supported for parallel operations."),
		// 					AllowedValues: to.Ptr("0-1024"),
		// 					DataType: to.Ptr(armpostgresql.ConfigurationDataTypeInteger),
		// 					DefaultValue: to.Ptr("8"),
		// 					DocumentationLink: to.Ptr("https://www.postgresql.org/docs/13/runtime-config-resource.html#GUC-MAX-PARALLEL-WORKERS"),
		// 					IsConfigPendingRestart: to.Ptr(false),
		// 					IsDynamicConfig: to.Ptr(true),
		// 					IsReadOnly: to.Ptr(false),
		// 					Source: to.Ptr("system-default"),
		// 					Value: to.Ptr("8"),
		// 				},
		// 			},
		// 			{
		// 				Name: to.Ptr("max_parallel_workers_per_gather"),
		// 				Type: to.Ptr("Microsoft.DBforPostgreSQL/flexibleServers/configurations"),
		// 				ID: to.Ptr("/subscriptions/ffffffff-ffff-ffff-ffff-ffffffffffff/resourceGroups/exampleresourcegroup/providers/Microsoft.DBforPostgreSQL/flexibleServers/exampleserver/configurations/max_parallel_workers_per_gather"),
		// 				Properties: &armpostgresql.ConfigurationProperties{
		// 					Description: to.Ptr("Sets the maximum number of parallel processes per executor node."),
		// 					AllowedValues: to.Ptr("0-1024"),
		// 					DataType: to.Ptr(armpostgresql.ConfigurationDataTypeInteger),
		// 					DefaultValue: to.Ptr("2"),
		// 					DocumentationLink: to.Ptr("https://www.postgresql.org/docs/13/runtime-config-resource.html#GUC-MAX-PARALLEL-WORKERS-PER-GATHER"),
		// 					IsConfigPendingRestart: to.Ptr(false),
		// 					IsDynamicConfig: to.Ptr(true),
		// 					IsReadOnly: to.Ptr(false),
		// 					Source: to.Ptr("system-default"),
		// 					Value: to.Ptr("2"),
		// 				},
		// 			},
		// 			{
		// 				Name: to.Ptr("max_pred_locks_per_page"),
		// 				Type: to.Ptr("Microsoft.DBforPostgreSQL/flexibleServers/configurations"),
		// 				ID: to.Ptr("/subscriptions/ffffffff-ffff-ffff-ffff-ffffffffffff/resourceGroups/exampleresourcegroup/providers/Microsoft.DBforPostgreSQL/flexibleServers/exampleserver/configurations/max_pred_locks_per_page"),
		// 				Properties: &armpostgresql.ConfigurationProperties{
		// 					Description: to.Ptr("Sets the maximum number of predicate-locked tuples per page."),
		// 					AllowedValues: to.Ptr("0-2147483647"),
		// 					DataType: to.Ptr(armpostgresql.ConfigurationDataTypeInteger),
		// 					DefaultValue: to.Ptr("2"),
		// 					DocumentationLink: to.Ptr("https://www.postgresql.org/docs/13/runtime-config-locks.html#GUC-MAX-PRED-LOCKS-PER-PAGE"),
		// 					IsConfigPendingRestart: to.Ptr(false),
		// 					IsDynamicConfig: to.Ptr(true),
		// 					IsReadOnly: to.Ptr(false),
		// 					Source: to.Ptr("system-default"),
		// 					Value: to.Ptr("2"),
		// 				},
		// 			},
		// 			{
		// 				Name: to.Ptr("max_pred_locks_per_relation"),
		// 				Type: to.Ptr("Microsoft.DBforPostgreSQL/flexibleServers/configurations"),
		// 				ID: to.Ptr("/subscriptions/ffffffff-ffff-ffff-ffff-ffffffffffff/resourceGroups/exampleresourcegroup/providers/Microsoft.DBforPostgreSQL/flexibleServers/exampleserver/configurations/max_pred_locks_per_relation"),
		// 				Properties: &armpostgresql.ConfigurationProperties{
		// 					Description: to.Ptr("Sets the maximum number of predicate-locked pages and tuples per relation."),
		// 					AllowedValues: to.Ptr("-2147483648-2147483647"),
		// 					DataType: to.Ptr(armpostgresql.ConfigurationDataTypeInteger),
		// 					DefaultValue: to.Ptr("-2"),
		// 					DocumentationLink: to.Ptr("https://www.postgresql.org/docs/13/runtime-config-locks.html#GUC-MAX-PRED-LOCKS-PER-RELATION"),
		// 					IsConfigPendingRestart: to.Ptr(false),
		// 					IsDynamicConfig: to.Ptr(true),
		// 					IsReadOnly: to.Ptr(false),
		// 					Source: to.Ptr("system-default"),
		// 					Value: to.Ptr("-2"),
		// 				},
		// 			},
		// 			{
		// 				Name: to.Ptr("max_pred_locks_per_transaction"),
		// 				Type: to.Ptr("Microsoft.DBforPostgreSQL/flexibleServers/configurations"),
		// 				ID: to.Ptr("/subscriptions/ffffffff-ffff-ffff-ffff-ffffffffffff/resourceGroups/exampleresourcegroup/providers/Microsoft.DBforPostgreSQL/flexibleServers/exampleserver/configurations/max_pred_locks_per_transaction"),
		// 				Properties: &armpostgresql.ConfigurationProperties{
		// 					Description: to.Ptr("Sets the maximum number of predicate locks per transaction."),
		// 					AllowedValues: to.Ptr("10-2147483647"),
		// 					DataType: to.Ptr(armpostgresql.ConfigurationDataTypeInteger),
		// 					DefaultValue: to.Ptr("64"),
		// 					DocumentationLink: to.Ptr("https://www.postgresql.org/docs/13/runtime-config-locks.html#GUC-MAX-PRED-LOCKS-PER-TRANSACTION"),
		// 					IsConfigPendingRestart: to.Ptr(false),
		// 					IsDynamicConfig: to.Ptr(false),
		// 					IsReadOnly: to.Ptr(true),
		// 					Source: to.Ptr("system-default"),
		// 					Value: to.Ptr("64"),
		// 				},
		// 			},
		// 			{
		// 				Name: to.Ptr("max_prepared_transactions"),
		// 				Type: to.Ptr("Microsoft.DBforPostgreSQL/flexibleServers/configurations"),
		// 				ID: to.Ptr("/subscriptions/ffffffff-ffff-ffff-ffff-ffffffffffff/resourceGroups/exampleresourcegroup/providers/Microsoft.DBforPostgreSQL/flexibleServers/exampleserver/configurations/max_prepared_transactions"),
		// 				Properties: &armpostgresql.ConfigurationProperties{
		// 					Description: to.Ptr("Sets the maximum number of simultaneously prepared transactions. When running a replica server, you must set this parameter to the same or higher value than on the primary server."),
		// 					AllowedValues: to.Ptr("0-262143"),
		// 					DataType: to.Ptr(armpostgresql.ConfigurationDataTypeInteger),
		// 					DefaultValue: to.Ptr("0"),
		// 					DocumentationLink: to.Ptr("https://www.postgresql.org/docs/13/runtime-config-resource.html#GUC-MAX-PREPARED-TRANSACTIONS"),
		// 					IsConfigPendingRestart: to.Ptr(false),
		// 					IsDynamicConfig: to.Ptr(false),
		// 					IsReadOnly: to.Ptr(false),
		// 					Source: to.Ptr("system-default"),
		// 					Value: to.Ptr("0"),
		// 				},
		// 			},
		// 			{
		// 				Name: to.Ptr("max_replication_slots"),
		// 				Type: to.Ptr("Microsoft.DBforPostgreSQL/flexibleServers/configurations"),
		// 				ID: to.Ptr("/subscriptions/ffffffff-ffff-ffff-ffff-ffffffffffff/resourceGroups/exampleresourcegroup/providers/Microsoft.DBforPostgreSQL/flexibleServers/exampleserver/configurations/max_replication_slots"),
		// 				Properties: &armpostgresql.ConfigurationProperties{
		// 					Description: to.Ptr("Specifies the maximum number of replication slots that the server can support."),
		// 					AllowedValues: to.Ptr("2-262143"),
		// 					DataType: to.Ptr(armpostgresql.ConfigurationDataTypeInteger),
		// 					DefaultValue: to.Ptr("10"),
		// 					DocumentationLink: to.Ptr("https://www.postgresql.org/docs/13/runtime-config-replication.html#GUC-MAX-REPLICATION-SLOTS"),
		// 					IsConfigPendingRestart: to.Ptr(false),
		// 					IsDynamicConfig: to.Ptr(false),
		// 					IsReadOnly: to.Ptr(false),
		// 					Source: to.Ptr("system-default"),
		// 					Value: to.Ptr("10"),
		// 				},
		// 			},
		// 			{
		// 				Name: to.Ptr("max_slot_wal_keep_size"),
		// 				Type: to.Ptr("Microsoft.DBforPostgreSQL/flexibleServers/configurations"),
		// 				ID: to.Ptr("/subscriptions/ffffffff-ffff-ffff-ffff-ffffffffffff/resourceGroups/exampleresourcegroup/providers/Microsoft.DBforPostgreSQL/flexibleServers/exampleserver/configurations/max_slot_wal_keep_size"),
		// 				Properties: &armpostgresql.ConfigurationProperties{
		// 					Description: to.Ptr("Sets the maximum WAL size that can be reserved by replication slots."),
		// 					AllowedValues: to.Ptr("-1-2147483647"),
		// 					DataType: to.Ptr(armpostgresql.ConfigurationDataTypeInteger),
		// 					DefaultValue: to.Ptr("-1"),
		// 					DocumentationLink: to.Ptr("https://www.postgresql.org/docs/13/runtime-config-replication.html#GUC-MAX-SLOT-WAL-KEEP-SIZE"),
		// 					IsConfigPendingRestart: to.Ptr(false),
		// 					IsDynamicConfig: to.Ptr(true),
		// 					IsReadOnly: to.Ptr(true),
		// 					Source: to.Ptr("system-default"),
		// 					Unit: to.Ptr("megabytes"),
		// 					Value: to.Ptr("-1"),
		// 				},
		// 			},
		// 			{
		// 				Name: to.Ptr("max_stack_depth"),
		// 				Type: to.Ptr("Microsoft.DBforPostgreSQL/flexibleServers/configurations"),
		// 				ID: to.Ptr("/subscriptions/ffffffff-ffff-ffff-ffff-ffffffffffff/resourceGroups/exampleresourcegroup/providers/Microsoft.DBforPostgreSQL/flexibleServers/exampleserver/configurations/max_stack_depth"),
		// 				Properties: &armpostgresql.ConfigurationProperties{
		// 					Description: to.Ptr("Sets the maximum stack depth, in kilobytes."),
		// 					AllowedValues: to.Ptr("100-2147483647"),
		// 					DataType: to.Ptr(armpostgresql.ConfigurationDataTypeInteger),
		// 					DefaultValue: to.Ptr("100"),
		// 					DocumentationLink: to.Ptr("https://www.postgresql.org/docs/13/runtime-config-resource.html#GUC-MAX-STACK-DEPTH"),
		// 					IsConfigPendingRestart: to.Ptr(false),
		// 					IsDynamicConfig: to.Ptr(true),
		// 					IsReadOnly: to.Ptr(true),
		// 					Source: to.Ptr("user-override"),
		// 					Unit: to.Ptr("KB"),
		// 					Value: to.Ptr("2048"),
		// 				},
		// 			},
		// 			{
		// 				Name: to.Ptr("max_standby_archive_delay"),
		// 				Type: to.Ptr("Microsoft.DBforPostgreSQL/flexibleServers/configurations"),
		// 				ID: to.Ptr("/subscriptions/ffffffff-ffff-ffff-ffff-ffffffffffff/resourceGroups/exampleresourcegroup/providers/Microsoft.DBforPostgreSQL/flexibleServers/exampleserver/configurations/max_standby_archive_delay"),
		// 				Properties: &armpostgresql.ConfigurationProperties{
		// 					Description: to.Ptr("Sets the maximum delay before canceling queries that conflict when a hot standby server is processing archived WAL data."),
		// 					AllowedValues: to.Ptr("-1-2147483647"),
		// 					DataType: to.Ptr(armpostgresql.ConfigurationDataTypeInteger),
		// 					DefaultValue: to.Ptr("30000"),
		// 					DocumentationLink: to.Ptr("https://www.postgresql.org/docs/13/runtime-config-replication.html#GUC-MAX-STANDBY-ARCHIVE-DELAY"),
		// 					IsConfigPendingRestart: to.Ptr(false),
		// 					IsDynamicConfig: to.Ptr(true),
		// 					IsReadOnly: to.Ptr(false),
		// 					Source: to.Ptr("system-default"),
		// 					Unit: to.Ptr("milliseconds"),
		// 					Value: to.Ptr("30000"),
		// 				},
		// 			},
		// 			{
		// 				Name: to.Ptr("max_standby_streaming_delay"),
		// 				Type: to.Ptr("Microsoft.DBforPostgreSQL/flexibleServers/configurations"),
		// 				ID: to.Ptr("/subscriptions/ffffffff-ffff-ffff-ffff-ffffffffffff/resourceGroups/exampleresourcegroup/providers/Microsoft.DBforPostgreSQL/flexibleServers/exampleserver/configurations/max_standby_streaming_delay"),
		// 				Properties: &armpostgresql.ConfigurationProperties{
		// 					Description: to.Ptr("Sets the maximum delay before canceling queries that conflict when a hot standby server is processing streamed WAL data."),
		// 					AllowedValues: to.Ptr("-1-2147483647"),
		// 					DataType: to.Ptr(armpostgresql.ConfigurationDataTypeInteger),
		// 					DefaultValue: to.Ptr("30000"),
		// 					DocumentationLink: to.Ptr("https://www.postgresql.org/docs/13/runtime-config-replication.html#GUC-MAX-STANDBY-STREAMING-DELAY"),
		// 					IsConfigPendingRestart: to.Ptr(false),
		// 					IsDynamicConfig: to.Ptr(true),
		// 					IsReadOnly: to.Ptr(false),
		// 					Source: to.Ptr("system-default"),
		// 					Unit: to.Ptr("milliseconds"),
		// 					Value: to.Ptr("30000"),
		// 				},
		// 			},
		// 			{
		// 				Name: to.Ptr("max_sync_workers_per_subscription"),
		// 				Type: to.Ptr("Microsoft.DBforPostgreSQL/flexibleServers/configurations"),
		// 				ID: to.Ptr("/subscriptions/ffffffff-ffff-ffff-ffff-ffffffffffff/resourceGroups/exampleresourcegroup/providers/Microsoft.DBforPostgreSQL/flexibleServers/exampleserver/configurations/max_sync_workers_per_subscription"),
		// 				Properties: &armpostgresql.ConfigurationProperties{
		// 					Description: to.Ptr("Maximum number of table synchronization workers per subscription."),
		// 					AllowedValues: to.Ptr("0-262143"),
		// 					DataType: to.Ptr(armpostgresql.ConfigurationDataTypeInteger),
		// 					DefaultValue: to.Ptr("2"),
		// 					DocumentationLink: to.Ptr("https://www.postgresql.org/docs/13/runtime-config-replication.html#GUC-MAX-SYNC-WORKERS-PER-SUBSCRIPTION"),
		// 					IsConfigPendingRestart: to.Ptr(false),
		// 					IsDynamicConfig: to.Ptr(true),
		// 					IsReadOnly: to.Ptr(false),
		// 					Source: to.Ptr("system-default"),
		// 					Value: to.Ptr("2"),
		// 				},
		// 			},
		// 			{
		// 				Name: to.Ptr("max_wal_senders"),
		// 				Type: to.Ptr("Microsoft.DBforPostgreSQL/flexibleServers/configurations"),
		// 				ID: to.Ptr("/subscriptions/ffffffff-ffff-ffff-ffff-ffffffffffff/resourceGroups/exampleresourcegroup/providers/Microsoft.DBforPostgreSQL/flexibleServers/exampleserver/configurations/max_wal_senders"),
		// 				Properties: &armpostgresql.ConfigurationProperties{
		// 					Description: to.Ptr("Sets the maximum number of simultaneously running WAL sender processes."),
		// 					AllowedValues: to.Ptr("5-100"),
		// 					DataType: to.Ptr(armpostgresql.ConfigurationDataTypeInteger),
		// 					DefaultValue: to.Ptr("10"),
		// 					DocumentationLink: to.Ptr("https://www.postgresql.org/docs/13/runtime-config-replication.html#GUC-MAX-WAL-SENDERS"),
		// 					IsConfigPendingRestart: to.Ptr(false),
		// 					IsDynamicConfig: to.Ptr(false),
		// 					IsReadOnly: to.Ptr(false),
		// 					Source: to.Ptr("system-default"),
		// 					Value: to.Ptr("10"),
		// 				},
		// 			},
		// 			{
		// 				Name: to.Ptr("max_wal_size"),
		// 				Type: to.Ptr("Microsoft.DBforPostgreSQL/flexibleServers/configurations"),
		// 				ID: to.Ptr("/subscriptions/ffffffff-ffff-ffff-ffff-ffffffffffff/resourceGroups/exampleresourcegroup/providers/Microsoft.DBforPostgreSQL/flexibleServers/exampleserver/configurations/max_wal_size"),
		// 				Properties: &armpostgresql.ConfigurationProperties{
		// 					Description: to.Ptr("Maximum size to let the WAL grow before triggering automatic checkpoint."),
		// 					AllowedValues: to.Ptr("32-65536"),
		// 					DataType: to.Ptr(armpostgresql.ConfigurationDataTypeInteger),
		// 					DefaultValue: to.Ptr("2048"),
		// 					DocumentationLink: to.Ptr("https://www.postgresql.org/docs/13/runtime-config-wal.html#GUC-MAX-WAL-SIZE"),
		// 					IsConfigPendingRestart: to.Ptr(false),
		// 					IsDynamicConfig: to.Ptr(true),
		// 					IsReadOnly: to.Ptr(false),
		// 					Source: to.Ptr("system-default"),
		// 					Unit: to.Ptr("megabytes"),
		// 					Value: to.Ptr("2048"),
		// 				},
		// 			},
		// 			{
		// 				Name: to.Ptr("max_worker_processes"),
		// 				Type: to.Ptr("Microsoft.DBforPostgreSQL/flexibleServers/configurations"),
		// 				ID: to.Ptr("/subscriptions/ffffffff-ffff-ffff-ffff-ffffffffffff/resourceGroups/exampleresourcegroup/providers/Microsoft.DBforPostgreSQL/flexibleServers/exampleserver/configurations/max_worker_processes"),
		// 				Properties: &armpostgresql.ConfigurationProperties{
		// 					Description: to.Ptr("Sets the maximum number of background processes that the system can support."),
		// 					AllowedValues: to.Ptr("0-262143"),
		// 					DataType: to.Ptr(armpostgresql.ConfigurationDataTypeInteger),
		// 					DefaultValue: to.Ptr("8"),
		// 					DocumentationLink: to.Ptr("https://www.postgresql.org/docs/13/runtime-config-resource.html#GUC-MAX-WORKER-PROCESSES"),
		// 					IsConfigPendingRestart: to.Ptr(false),
		// 					IsDynamicConfig: to.Ptr(false),
		// 					IsReadOnly: to.Ptr(false),
		// 					Source: to.Ptr("system-default"),
		// 					Value: to.Ptr("8"),
		// 				},
		// 			},
		// 			{
		// 				Name: to.Ptr("metrics.autovacuum_diagnostics"),
		// 				Type: to.Ptr("Microsoft.DBforPostgreSQL/flexibleServers/configurations"),
		// 				ID: to.Ptr("/subscriptions/ffffffff-ffff-ffff-ffff-ffffffffffff/resourceGroups/exampleresourcegroup/providers/Microsoft.DBforPostgreSQL/flexibleServers/exampleserver/configurations/metrics.autovacuum_diagnostics"),
		// 				Properties: &armpostgresql.ConfigurationProperties{
		// 					Description: to.Ptr("Enables metrics collection for all table statistics within a database"),
		// 					AllowedValues: to.Ptr("on,off"),
		// 					DataType: to.Ptr(armpostgresql.ConfigurationDataTypeBoolean),
		// 					DefaultValue: to.Ptr("off"),
		// 					DocumentationLink: to.Ptr("https://go.microsoft.com/fwlink/?linkid=2274151"),
		// 					IsConfigPendingRestart: to.Ptr(false),
		// 					IsDynamicConfig: to.Ptr(true),
		// 					IsReadOnly: to.Ptr(false),
		// 					Source: to.Ptr("system-default"),
		// 					Value: to.Ptr("off"),
		// 				},
		// 			},
		// 			{
		// 				Name: to.Ptr("metrics.collector_database_activity"),
		// 				Type: to.Ptr("Microsoft.DBforPostgreSQL/flexibleServers/configurations"),
		// 				ID: to.Ptr("/subscriptions/ffffffff-ffff-ffff-ffff-ffffffffffff/resourceGroups/exampleresourcegroup/providers/Microsoft.DBforPostgreSQL/flexibleServers/exampleserver/configurations/metrics.collector_database_activity"),
		// 				Properties: &armpostgresql.ConfigurationProperties{
		// 					Description: to.Ptr("Enables metrics collection for database and activity statistics"),
		// 					AllowedValues: to.Ptr("on,off"),
		// 					DataType: to.Ptr(armpostgresql.ConfigurationDataTypeBoolean),
		// 					DefaultValue: to.Ptr("off"),
		// 					DocumentationLink: to.Ptr("https://go.microsoft.com/fwlink/?linkid=2274151"),
		// 					IsConfigPendingRestart: to.Ptr(false),
		// 					IsDynamicConfig: to.Ptr(true),
		// 					IsReadOnly: to.Ptr(false),
		// 					Source: to.Ptr("system-default"),
		// 					Value: to.Ptr("off"),
		// 				},
		// 			},
		// 			{
		// 				Name: to.Ptr("metrics.pgbouncer_diagnostics"),
		// 				Type: to.Ptr("Microsoft.DBforPostgreSQL/flexibleServers/configurations"),
		// 				ID: to.Ptr("/subscriptions/ffffffff-ffff-ffff-ffff-ffffffffffff/resourceGroups/exampleresourcegroup/providers/Microsoft.DBforPostgreSQL/flexibleServers/exampleserver/configurations/metrics.pgbouncer_diagnostics"),
		// 				Properties: &armpostgresql.ConfigurationProperties{
		// 					Description: to.Ptr("Enables metrics collection for PgBouncer."),
		// 					AllowedValues: to.Ptr("on,off"),
		// 					DataType: to.Ptr(armpostgresql.ConfigurationDataTypeBoolean),
		// 					DefaultValue: to.Ptr("off"),
		// 					DocumentationLink: to.Ptr("https://go.microsoft.com/fwlink/?linkid=2274151"),
		// 					IsConfigPendingRestart: to.Ptr(false),
		// 					IsDynamicConfig: to.Ptr(true),
		// 					IsReadOnly: to.Ptr(false),
		// 					Source: to.Ptr("system-default"),
		// 					Value: to.Ptr("off"),
		// 				},
		// 			},
		// 			{
		// 				Name: to.Ptr("min_parallel_index_scan_size"),
		// 				Type: to.Ptr("Microsoft.DBforPostgreSQL/flexibleServers/configurations"),
		// 				ID: to.Ptr("/subscriptions/ffffffff-ffff-ffff-ffff-ffffffffffff/resourceGroups/exampleresourcegroup/providers/Microsoft.DBforPostgreSQL/flexibleServers/exampleserver/configurations/min_parallel_index_scan_size"),
		// 				Properties: &armpostgresql.ConfigurationProperties{
		// 					Description: to.Ptr("Sets the minimum amount of index data for a parallel scan."),
		// 					AllowedValues: to.Ptr("0-715827882"),
		// 					DataType: to.Ptr(armpostgresql.ConfigurationDataTypeInteger),
		// 					DefaultValue: to.Ptr("64"),
		// 					DocumentationLink: to.Ptr("https://www.postgresql.org/docs/13/runtime-config-query.html#GUC-MIN-PARALLEL-INDEX-SCAN-SIZE"),
		// 					IsConfigPendingRestart: to.Ptr(false),
		// 					IsDynamicConfig: to.Ptr(true),
		// 					IsReadOnly: to.Ptr(false),
		// 					Source: to.Ptr("system-default"),
		// 					Unit: to.Ptr("8KB"),
		// 					Value: to.Ptr("64"),
		// 				},
		// 			},
		// 			{
		// 				Name: to.Ptr("min_parallel_table_scan_size"),
		// 				Type: to.Ptr("Microsoft.DBforPostgreSQL/flexibleServers/configurations"),
		// 				ID: to.Ptr("/subscriptions/ffffffff-ffff-ffff-ffff-ffffffffffff/resourceGroups/exampleresourcegroup/providers/Microsoft.DBforPostgreSQL/flexibleServers/exampleserver/configurations/min_parallel_table_scan_size"),
		// 				Properties: &armpostgresql.ConfigurationProperties{
		// 					Description: to.Ptr("Sets the minimum amount of table data that must be scanned for a parallel scan to be considered."),
		// 					AllowedValues: to.Ptr("0-715827882"),
		// 					DataType: to.Ptr(armpostgresql.ConfigurationDataTypeInteger),
		// 					DefaultValue: to.Ptr("1024"),
		// 					DocumentationLink: to.Ptr("https://www.postgresql.org/docs/13/runtime-config-query.html#GUC-MIN-PARALLEL-TABLE-SCAN-SIZE"),
		// 					IsConfigPendingRestart: to.Ptr(false),
		// 					IsDynamicConfig: to.Ptr(true),
		// 					IsReadOnly: to.Ptr(false),
		// 					Source: to.Ptr("system-default"),
		// 					Unit: to.Ptr("8KB"),
		// 					Value: to.Ptr("1024"),
		// 				},
		// 			},
		// 			{
		// 				Name: to.Ptr("min_wal_size"),
		// 				Type: to.Ptr("Microsoft.DBforPostgreSQL/flexibleServers/configurations"),
		// 				ID: to.Ptr("/subscriptions/ffffffff-ffff-ffff-ffff-ffffffffffff/resourceGroups/exampleresourcegroup/providers/Microsoft.DBforPostgreSQL/flexibleServers/exampleserver/configurations/min_wal_size"),
		// 				Properties: &armpostgresql.ConfigurationProperties{
		// 					Description: to.Ptr("Sets the minimum size to shrink the WAL to."),
		// 					AllowedValues: to.Ptr("32-2097151"),
		// 					DataType: to.Ptr(armpostgresql.ConfigurationDataTypeInteger),
		// 					DefaultValue: to.Ptr("80"),
		// 					DocumentationLink: to.Ptr("https://www.postgresql.org/docs/13/runtime-config-wal.html#GUC-MIN-WAL-SIZE"),
		// 					IsConfigPendingRestart: to.Ptr(false),
		// 					IsDynamicConfig: to.Ptr(true),
		// 					IsReadOnly: to.Ptr(false),
		// 					Source: to.Ptr("system-default"),
		// 					Unit: to.Ptr("megabytes"),
		// 					Value: to.Ptr("80"),
		// 				},
		// 			},
		// 			{
		// 				Name: to.Ptr("parallel_leader_participation"),
		// 				Type: to.Ptr("Microsoft.DBforPostgreSQL/flexibleServers/configurations"),
		// 				ID: to.Ptr("/subscriptions/ffffffff-ffff-ffff-ffff-ffffffffffff/resourceGroups/exampleresourcegroup/providers/Microsoft.DBforPostgreSQL/flexibleServers/exampleserver/configurations/parallel_leader_participation"),
		// 				Properties: &armpostgresql.ConfigurationProperties{
		// 					Description: to.Ptr("Controls whether Gather and Gather Merge also run subplans."),
		// 					AllowedValues: to.Ptr("on,off"),
		// 					DataType: to.Ptr(armpostgresql.ConfigurationDataTypeBoolean),
		// 					DefaultValue: to.Ptr("on"),
		// 					IsConfigPendingRestart: to.Ptr(false),
		// 					IsDynamicConfig: to.Ptr(true),
		// 					IsReadOnly: to.Ptr(true),
		// 					Source: to.Ptr("system-default"),
		// 					Value: to.Ptr("on"),
		// 				},
		// 			},
		// 			{
		// 				Name: to.Ptr("parallel_setup_cost"),
		// 				Type: to.Ptr("Microsoft.DBforPostgreSQL/flexibleServers/configurations"),
		// 				ID: to.Ptr("/subscriptions/ffffffff-ffff-ffff-ffff-ffffffffffff/resourceGroups/exampleresourcegroup/providers/Microsoft.DBforPostgreSQL/flexibleServers/exampleserver/configurations/parallel_setup_cost"),
		// 				Properties: &armpostgresql.ConfigurationProperties{
		// 					Description: to.Ptr("Sets the planner's estimate of the cost of starting up worker processes for parallel query."),
		// 					AllowedValues: to.Ptr("0-1.79769e+308"),
		// 					DataType: to.Ptr(armpostgresql.ConfigurationDataTypeNumeric),
		// 					DefaultValue: to.Ptr("1000"),
		// 					DocumentationLink: to.Ptr("https://www.postgresql.org/docs/13/runtime-config-query.html#GUC-PARALLEL-SETUP-COST"),
		// 					IsConfigPendingRestart: to.Ptr(false),
		// 					IsDynamicConfig: to.Ptr(true),
		// 					IsReadOnly: to.Ptr(false),
		// 					Source: to.Ptr("system-default"),
		// 					Value: to.Ptr("1000"),
		// 				},
		// 			},
		// 			{
		// 				Name: to.Ptr("parallel_tuple_cost"),
		// 				Type: to.Ptr("Microsoft.DBforPostgreSQL/flexibleServers/configurations"),
		// 				ID: to.Ptr("/subscriptions/ffffffff-ffff-ffff-ffff-ffffffffffff/resourceGroups/exampleresourcegroup/providers/Microsoft.DBforPostgreSQL/flexibleServers/exampleserver/configurations/parallel_tuple_cost"),
		// 				Properties: &armpostgresql.ConfigurationProperties{
		// 					Description: to.Ptr("Sets the planner's estimate of the cost of passing each tuple (row) from worker to master backend."),
		// 					AllowedValues: to.Ptr("0-1.79769e+308"),
		// 					DataType: to.Ptr(armpostgresql.ConfigurationDataTypeNumeric),
		// 					DefaultValue: to.Ptr("0.1"),
		// 					DocumentationLink: to.Ptr("https://www.postgresql.org/docs/13/runtime-config-query.html#GUC-PARALLEL-TUPLE-COST"),
		// 					IsConfigPendingRestart: to.Ptr(false),
		// 					IsDynamicConfig: to.Ptr(true),
		// 					IsReadOnly: to.Ptr(false),
		// 					Source: to.Ptr("system-default"),
		// 					Value: to.Ptr("0.1"),
		// 				},
		// 			},
		// 			{
		// 				Name: to.Ptr("password_encryption"),
		// 				Type: to.Ptr("Microsoft.DBforPostgreSQL/flexibleServers/configurations"),
		// 				ID: to.Ptr("/subscriptions/ffffffff-ffff-ffff-ffff-ffffffffffff/resourceGroups/exampleresourcegroup/providers/Microsoft.DBforPostgreSQL/flexibleServers/exampleserver/configurations/password_encryption"),
		// 				Properties: &armpostgresql.ConfigurationProperties{
		// 					Description: to.Ptr("Determines the algorithm to use to encrypt the password."),
		// 					AllowedValues: to.Ptr("md5,scram-sha-256"),
		// 					DataType: to.Ptr(armpostgresql.ConfigurationDataTypeEnumeration),
		// 					DefaultValue: to.Ptr("md5"),
		// 					DocumentationLink: to.Ptr("https://www.postgresql.org/docs/13/runtime-config-connection.html#GUC-PASSWORD-ENCRYPTION"),
		// 					IsConfigPendingRestart: to.Ptr(false),
		// 					IsDynamicConfig: to.Ptr(true),
		// 					IsReadOnly: to.Ptr(false),
		// 					Source: to.Ptr("system-default"),
		// 					Value: to.Ptr("md5"),
		// 				},
		// 			},
		// 			{
		// 				Name: to.Ptr("pg_partman_bgw.analyze"),
		// 				Type: to.Ptr("Microsoft.DBforPostgreSQL/flexibleServers/configurations"),
		// 				ID: to.Ptr("/subscriptions/ffffffff-ffff-ffff-ffff-ffffffffffff/resourceGroups/exampleresourcegroup/providers/Microsoft.DBforPostgreSQL/flexibleServers/exampleserver/configurations/pg_partman_bgw.analyze"),
		// 				Properties: &armpostgresql.ConfigurationProperties{
		// 					Description: to.Ptr("Same purpose as the p_analyze argument to run_maintenance()."),
		// 					AllowedValues: to.Ptr("on,off"),
		// 					DataType: to.Ptr(armpostgresql.ConfigurationDataTypeBoolean),
		// 					DefaultValue: to.Ptr("off"),
		// 					DocumentationLink: to.Ptr("https://github.com/pgpartman/pg_partman"),
		// 					IsConfigPendingRestart: to.Ptr(false),
		// 					IsDynamicConfig: to.Ptr(true),
		// 					IsReadOnly: to.Ptr(false),
		// 					Source: to.Ptr("system-default"),
		// 					Value: to.Ptr("off"),
		// 				},
		// 			},
		// 			{
		// 				Name: to.Ptr("pg_partman_bgw.dbname"),
		// 				Type: to.Ptr("Microsoft.DBforPostgreSQL/flexibleServers/configurations"),
		// 				ID: to.Ptr("/subscriptions/ffffffff-ffff-ffff-ffff-ffffffffffff/resourceGroups/exampleresourcegroup/providers/Microsoft.DBforPostgreSQL/flexibleServers/exampleserver/configurations/pg_partman_bgw.dbname"),
		// 				Properties: &armpostgresql.ConfigurationProperties{
		// 					Description: to.Ptr("Required. The database(s) that run_maintenance() will run on. If more than one, use a comma separated list. If not set, BGW will do nothing."),
		// 					AllowedValues: to.Ptr("[A-Za-z0-9_,-]*"),
		// 					DataType: to.Ptr(armpostgresql.ConfigurationDataTypeString),
		// 					DefaultValue: to.Ptr(""),
		// 					DocumentationLink: to.Ptr("https://github.com/pgpartman/pg_partman"),
		// 					IsConfigPendingRestart: to.Ptr(false),
		// 					IsDynamicConfig: to.Ptr(true),
		// 					IsReadOnly: to.Ptr(false),
		// 					Source: to.Ptr("system-default"),
		// 					Value: to.Ptr(""),
		// 				},
		// 			},
		// 			{
		// 				Name: to.Ptr("pg_partman_bgw.interval"),
		// 				Type: to.Ptr("Microsoft.DBforPostgreSQL/flexibleServers/configurations"),
		// 				ID: to.Ptr("/subscriptions/ffffffff-ffff-ffff-ffff-ffffffffffff/resourceGroups/exampleresourcegroup/providers/Microsoft.DBforPostgreSQL/flexibleServers/exampleserver/configurations/pg_partman_bgw.interval"),
		// 				Properties: &armpostgresql.ConfigurationProperties{
		// 					Description: to.Ptr("Number of seconds between calls to run_maintenance()."),
		// 					AllowedValues: to.Ptr("1-315360000"),
		// 					DataType: to.Ptr(armpostgresql.ConfigurationDataTypeInteger),
		// 					DefaultValue: to.Ptr("3600"),
		// 					DocumentationLink: to.Ptr("https://github.com/pgpartman/pg_partman"),
		// 					IsConfigPendingRestart: to.Ptr(false),
		// 					IsDynamicConfig: to.Ptr(true),
		// 					IsReadOnly: to.Ptr(false),
		// 					Source: to.Ptr("system-default"),
		// 					Unit: to.Ptr("seconds"),
		// 					Value: to.Ptr("3600"),
		// 				},
		// 			},
		// 			{
		// 				Name: to.Ptr("pg_partman_bgw.jobmon"),
		// 				Type: to.Ptr("Microsoft.DBforPostgreSQL/flexibleServers/configurations"),
		// 				ID: to.Ptr("/subscriptions/ffffffff-ffff-ffff-ffff-ffffffffffff/resourceGroups/exampleresourcegroup/providers/Microsoft.DBforPostgreSQL/flexibleServers/exampleserver/configurations/pg_partman_bgw.jobmon"),
		// 				Properties: &armpostgresql.ConfigurationProperties{
		// 					Description: to.Ptr("Same purpose as the p_jobmon argument to run_maintenance()."),
		// 					AllowedValues: to.Ptr("on,off"),
		// 					DataType: to.Ptr(armpostgresql.ConfigurationDataTypeBoolean),
		// 					DefaultValue: to.Ptr("on"),
		// 					DocumentationLink: to.Ptr("https://github.com/pgpartman/pg_partman"),
		// 					IsConfigPendingRestart: to.Ptr(false),
		// 					IsDynamicConfig: to.Ptr(true),
		// 					IsReadOnly: to.Ptr(false),
		// 					Source: to.Ptr("system-default"),
		// 					Value: to.Ptr("on"),
		// 				},
		// 			},
		// 			{
		// 				Name: to.Ptr("pg_partman_bgw.role"),
		// 				Type: to.Ptr("Microsoft.DBforPostgreSQL/flexibleServers/configurations"),
		// 				ID: to.Ptr("/subscriptions/ffffffff-ffff-ffff-ffff-ffffffffffff/resourceGroups/exampleresourcegroup/providers/Microsoft.DBforPostgreSQL/flexibleServers/exampleserver/configurations/pg_partman_bgw.role"),
		// 				Properties: &armpostgresql.ConfigurationProperties{
		// 					Description: to.Ptr("The role that run_maintenance() will run as. Default is postgres. Only a single role name is allowed."),
		// 					AllowedValues: to.Ptr("[A-Za-z\\._]*"),
		// 					DataType: to.Ptr(armpostgresql.ConfigurationDataTypeString),
		// 					DefaultValue: to.Ptr(""),
		// 					DocumentationLink: to.Ptr("https://github.com/pgpartman/pg_partman"),
		// 					IsConfigPendingRestart: to.Ptr(false),
		// 					IsDynamicConfig: to.Ptr(true),
		// 					IsReadOnly: to.Ptr(false),
		// 					Source: to.Ptr("system-default"),
		// 					Value: to.Ptr(""),
		// 				},
		// 			},
		// 			{
		// 				Name: to.Ptr("pg_qs.interval_length_minutes"),
		// 				Type: to.Ptr("Microsoft.DBforPostgreSQL/flexibleServers/configurations"),
		// 				ID: to.Ptr("/subscriptions/ffffffff-ffff-ffff-ffff-ffffffffffff/resourceGroups/exampleresourcegroup/providers/Microsoft.DBforPostgreSQL/flexibleServers/exampleserver/configurations/pg_qs.interval_length_minutes"),
		// 				Properties: &armpostgresql.ConfigurationProperties{
		// 					Description: to.Ptr("Sets the query_store capture interval in minutes for pg_qs - this is the frequency of data persistence."),
		// 					AllowedValues: to.Ptr("1-30"),
		// 					DataType: to.Ptr(armpostgresql.ConfigurationDataTypeInteger),
		// 					DefaultValue: to.Ptr("15"),
		// 					DocumentationLink: to.Ptr("https://go.microsoft.com/fwlink/?linkid=2274607"),
		// 					IsConfigPendingRestart: to.Ptr(false),
		// 					IsDynamicConfig: to.Ptr(false),
		// 					IsReadOnly: to.Ptr(false),
		// 					Source: to.Ptr("system-default"),
		// 					Unit: to.Ptr("minutes"),
		// 					Value: to.Ptr("15"),
		// 				},
		// 			},
		// 			{
		// 				Name: to.Ptr("pg_qs.is_enabled_fs"),
		// 				Type: to.Ptr("Microsoft.DBforPostgreSQL/flexibleServers/configurations"),
		// 				ID: to.Ptr("/subscriptions/ffffffff-ffff-ffff-ffff-ffffffffffff/resourceGroups/exampleresourcegroup/providers/Microsoft.DBforPostgreSQL/flexibleServers/exampleserver/configurations/pg_qs.is_enabled_fs"),
		// 				Properties: &armpostgresql.ConfigurationProperties{
		// 					Description: to.Ptr("Internal Use Only: This parameter is used as a feature override switch. If it shows as off, Query Store will be disabled despite the value set for pg_qs.query_capture_mode."),
		// 					AllowedValues: to.Ptr("on,off"),
		// 					DataType: to.Ptr(armpostgresql.ConfigurationDataTypeBoolean),
		// 					DefaultValue: to.Ptr("on"),
		// 					DocumentationLink: to.Ptr("https://go.microsoft.com/fwlink/?linkid=2274607"),
		// 					IsConfigPendingRestart: to.Ptr(false),
		// 					IsDynamicConfig: to.Ptr(true),
		// 					IsReadOnly: to.Ptr(true),
		// 					Source: to.Ptr("system-default"),
		// 					Value: to.Ptr("on"),
		// 				},
		// 			},
		// 			{
		// 				Name: to.Ptr("pg_qs.max_plan_size"),
		// 				Type: to.Ptr("Microsoft.DBforPostgreSQL/flexibleServers/configurations"),
		// 				ID: to.Ptr("/subscriptions/ffffffff-ffff-ffff-ffff-ffffffffffff/resourceGroups/exampleresourcegroup/providers/Microsoft.DBforPostgreSQL/flexibleServers/exampleserver/configurations/pg_qs.max_plan_size"),
		// 				Properties: &armpostgresql.ConfigurationProperties{
		// 					Description: to.Ptr("Sets the maximum number of bytes that will be saved for query plan text  for pg_qs; longer plans will be truncated."),
		// 					AllowedValues: to.Ptr("100-10000"),
		// 					DataType: to.Ptr(armpostgresql.ConfigurationDataTypeInteger),
		// 					DefaultValue: to.Ptr("7500"),
		// 					DocumentationLink: to.Ptr("https://go.microsoft.com/fwlink/?linkid=2274607"),
		// 					IsConfigPendingRestart: to.Ptr(false),
		// 					IsDynamicConfig: to.Ptr(true),
		// 					IsReadOnly: to.Ptr(false),
		// 					Source: to.Ptr("system-default"),
		// 					Unit: to.Ptr("bytes"),
		// 					Value: to.Ptr("7500"),
		// 				},
		// 			},
		// 			{
		// 				Name: to.Ptr("pg_qs.max_query_text_length"),
		// 				Type: to.Ptr("Microsoft.DBforPostgreSQL/flexibleServers/configurations"),
		// 				ID: to.Ptr("/subscriptions/ffffffff-ffff-ffff-ffff-ffffffffffff/resourceGroups/exampleresourcegroup/providers/Microsoft.DBforPostgreSQL/flexibleServers/exampleserver/configurations/pg_qs.max_query_text_length"),
		// 				Properties: &armpostgresql.ConfigurationProperties{
		// 					Description: to.Ptr("Sets the maximum query text length that will be saved; longer queries will be truncated."),
		// 					AllowedValues: to.Ptr("100-10000"),
		// 					DataType: to.Ptr(armpostgresql.ConfigurationDataTypeInteger),
		// 					DefaultValue: to.Ptr("6000"),
		// 					DocumentationLink: to.Ptr("https://go.microsoft.com/fwlink/?linkid=2274607"),
		// 					IsConfigPendingRestart: to.Ptr(false),
		// 					IsDynamicConfig: to.Ptr(true),
		// 					IsReadOnly: to.Ptr(false),
		// 					Source: to.Ptr("system-default"),
		// 					Unit: to.Ptr("bytes"),
		// 					Value: to.Ptr("6000"),
		// 				},
		// 			},
		// 			{
		// 				Name: to.Ptr("pg_qs.parameters_capture_mode"),
		// 				Type: to.Ptr("Microsoft.DBforPostgreSQL/flexibleServers/configurations"),
		// 				ID: to.Ptr("/subscriptions/ffffffff-ffff-ffff-ffff-ffffffffffff/resourceGroups/exampleresourcegroup/providers/Microsoft.DBforPostgreSQL/flexibleServers/exampleserver/configurations/pg_qs.parameters_capture_mode"),
		// 				Properties: &armpostgresql.ConfigurationProperties{
		// 					Description: to.Ptr("Whether and when to capture query positional parameters."),
		// 					AllowedValues: to.Ptr("capture_parameterless_only,capture_first_sample"),
		// 					DataType: to.Ptr(armpostgresql.ConfigurationDataTypeEnumeration),
		// 					DefaultValue: to.Ptr("capture_parameterless_only"),
		// 					DocumentationLink: to.Ptr("https://go.microsoft.com/fwlink/?linkid=2274607"),
		// 					IsConfigPendingRestart: to.Ptr(false),
		// 					IsDynamicConfig: to.Ptr(true),
		// 					IsReadOnly: to.Ptr(false),
		// 					Source: to.Ptr("system-default"),
		// 					Value: to.Ptr("capture_parameterless_only"),
		// 				},
		// 			},
		// 			{
		// 				Name: to.Ptr("pg_qs.query_capture_mode"),
		// 				Type: to.Ptr("Microsoft.DBforPostgreSQL/flexibleServers/configurations"),
		// 				ID: to.Ptr("/subscriptions/ffffffff-ffff-ffff-ffff-ffffffffffff/resourceGroups/exampleresourcegroup/providers/Microsoft.DBforPostgreSQL/flexibleServers/exampleserver/configurations/pg_qs.query_capture_mode"),
		// 				Properties: &armpostgresql.ConfigurationProperties{
		// 					Description: to.Ptr("Sets query capture mode for query store. None disables any capturing."),
		// 					AllowedValues: to.Ptr("top,all,none"),
		// 					DataType: to.Ptr(armpostgresql.ConfigurationDataTypeEnumeration),
		// 					DefaultValue: to.Ptr("none"),
		// 					DocumentationLink: to.Ptr("https://go.microsoft.com/fwlink/?linkid=2274607"),
		// 					IsConfigPendingRestart: to.Ptr(false),
		// 					IsDynamicConfig: to.Ptr(true),
		// 					IsReadOnly: to.Ptr(false),
		// 					Source: to.Ptr("system-default"),
		// 					Value: to.Ptr("none"),
		// 				},
		// 			},
		// 			{
		// 				Name: to.Ptr("pg_qs.retention_period_in_days"),
		// 				Type: to.Ptr("Microsoft.DBforPostgreSQL/flexibleServers/configurations"),
		// 				ID: to.Ptr("/subscriptions/ffffffff-ffff-ffff-ffff-ffffffffffff/resourceGroups/exampleresourcegroup/providers/Microsoft.DBforPostgreSQL/flexibleServers/exampleserver/configurations/pg_qs.retention_period_in_days"),
		// 				Properties: &armpostgresql.ConfigurationProperties{
		// 					Description: to.Ptr("Sets the retention period window in days for pg_qs - after this time data will be deleted."),
		// 					AllowedValues: to.Ptr("1-30"),
		// 					DataType: to.Ptr(armpostgresql.ConfigurationDataTypeInteger),
		// 					DefaultValue: to.Ptr("7"),
		// 					DocumentationLink: to.Ptr("https://go.microsoft.com/fwlink/?linkid=2274607"),
		// 					IsConfigPendingRestart: to.Ptr(false),
		// 					IsDynamicConfig: to.Ptr(true),
		// 					IsReadOnly: to.Ptr(false),
		// 					Source: to.Ptr("system-default"),
		// 					Value: to.Ptr("7"),
		// 				},
		// 			},
		// 			{
		// 				Name: to.Ptr("pg_qs.store_query_plans"),
		// 				Type: to.Ptr("Microsoft.DBforPostgreSQL/flexibleServers/configurations"),
		// 				ID: to.Ptr("/subscriptions/ffffffff-ffff-ffff-ffff-ffffffffffff/resourceGroups/exampleresourcegroup/providers/Microsoft.DBforPostgreSQL/flexibleServers/exampleserver/configurations/pg_qs.store_query_plans"),
		// 				Properties: &armpostgresql.ConfigurationProperties{
		// 					Description: to.Ptr("Turns saving query plans on or off for pg_qs "),
		// 					AllowedValues: to.Ptr("on,off"),
		// 					DataType: to.Ptr(armpostgresql.ConfigurationDataTypeBoolean),
		// 					DefaultValue: to.Ptr("off"),
		// 					DocumentationLink: to.Ptr("https://go.microsoft.com/fwlink/?linkid=2274607"),
		// 					IsConfigPendingRestart: to.Ptr(false),
		// 					IsDynamicConfig: to.Ptr(true),
		// 					IsReadOnly: to.Ptr(false),
		// 					Source: to.Ptr("system-default"),
		// 					Value: to.Ptr("off"),
		// 				},
		// 			},
		// 			{
		// 				Name: to.Ptr("pg_qs.track_utility"),
		// 				Type: to.Ptr("Microsoft.DBforPostgreSQL/flexibleServers/configurations"),
		// 				ID: to.Ptr("/subscriptions/ffffffff-ffff-ffff-ffff-ffffffffffff/resourceGroups/exampleresourcegroup/providers/Microsoft.DBforPostgreSQL/flexibleServers/exampleserver/configurations/pg_qs.track_utility"),
		// 				Properties: &armpostgresql.ConfigurationProperties{
		// 					Description: to.Ptr("Selects whether utility commands are tracked by pg_qs."),
		// 					AllowedValues: to.Ptr("on,off"),
		// 					DataType: to.Ptr(armpostgresql.ConfigurationDataTypeBoolean),
		// 					DefaultValue: to.Ptr("on"),
		// 					DocumentationLink: to.Ptr("https://go.microsoft.com/fwlink/?linkid=2274607"),
		// 					IsConfigPendingRestart: to.Ptr(false),
		// 					IsDynamicConfig: to.Ptr(true),
		// 					IsReadOnly: to.Ptr(false),
		// 					Source: to.Ptr("system-default"),
		// 					Value: to.Ptr("on"),
		// 				},
		// 			},
		// 			{
		// 				Name: to.Ptr("pg_stat_statements.max"),
		// 				Type: to.Ptr("Microsoft.DBforPostgreSQL/flexibleServers/configurations"),
		// 				ID: to.Ptr("/subscriptions/ffffffff-ffff-ffff-ffff-ffffffffffff/resourceGroups/exampleresourcegroup/providers/Microsoft.DBforPostgreSQL/flexibleServers/exampleserver/configurations/pg_stat_statements.max"),
		// 				Properties: &armpostgresql.ConfigurationProperties{
		// 					Description: to.Ptr("Sets the maximum number of statements tracked by pg_stat_statements."),
		// 					AllowedValues: to.Ptr("100-2147483647"),
		// 					DataType: to.Ptr(armpostgresql.ConfigurationDataTypeInteger),
		// 					DefaultValue: to.Ptr("5000"),
		// 					DocumentationLink: to.Ptr("https://www.postgresql.org/docs/13/pgstatstatements.html"),
		// 					IsConfigPendingRestart: to.Ptr(false),
		// 					IsDynamicConfig: to.Ptr(false),
		// 					IsReadOnly: to.Ptr(false),
		// 					Source: to.Ptr("system-default"),
		// 					Value: to.Ptr("5000"),
		// 				},
		// 			},
		// 			{
		// 				Name: to.Ptr("pg_stat_statements.save"),
		// 				Type: to.Ptr("Microsoft.DBforPostgreSQL/flexibleServers/configurations"),
		// 				ID: to.Ptr("/subscriptions/ffffffff-ffff-ffff-ffff-ffffffffffff/resourceGroups/exampleresourcegroup/providers/Microsoft.DBforPostgreSQL/flexibleServers/exampleserver/configurations/pg_stat_statements.save"),
		// 				Properties: &armpostgresql.ConfigurationProperties{
		// 					Description: to.Ptr("Save pg_stat_statements statistics across server shutdowns."),
		// 					AllowedValues: to.Ptr("on,off"),
		// 					DataType: to.Ptr(armpostgresql.ConfigurationDataTypeBoolean),
		// 					DefaultValue: to.Ptr("on"),
		// 					DocumentationLink: to.Ptr("https://www.postgresql.org/docs/13/pgstatstatements.html"),
		// 					IsConfigPendingRestart: to.Ptr(false),
		// 					IsDynamicConfig: to.Ptr(true),
		// 					IsReadOnly: to.Ptr(false),
		// 					Source: to.Ptr("system-default"),
		// 					Value: to.Ptr("on"),
		// 				},
		// 			},
		// 			{
		// 				Name: to.Ptr("pg_stat_statements.track"),
		// 				Type: to.Ptr("Microsoft.DBforPostgreSQL/flexibleServers/configurations"),
		// 				ID: to.Ptr("/subscriptions/ffffffff-ffff-ffff-ffff-ffffffffffff/resourceGroups/exampleresourcegroup/providers/Microsoft.DBforPostgreSQL/flexibleServers/exampleserver/configurations/pg_stat_statements.track"),
		// 				Properties: &armpostgresql.ConfigurationProperties{
		// 					Description: to.Ptr("Controls which statements are counted by pg_stat_statements."),
		// 					AllowedValues: to.Ptr("top,all,none"),
		// 					DataType: to.Ptr(armpostgresql.ConfigurationDataTypeEnumeration),
		// 					DefaultValue: to.Ptr("none"),
		// 					DocumentationLink: to.Ptr("https://www.postgresql.org/docs/13/pgstatstatements.html"),
		// 					IsConfigPendingRestart: to.Ptr(false),
		// 					IsDynamicConfig: to.Ptr(true),
		// 					IsReadOnly: to.Ptr(false),
		// 					Source: to.Ptr("system-default"),
		// 					Value: to.Ptr("none"),
		// 				},
		// 			},
		// 			{
		// 				Name: to.Ptr("pg_stat_statements.track_utility"),
		// 				Type: to.Ptr("Microsoft.DBforPostgreSQL/flexibleServers/configurations"),
		// 				ID: to.Ptr("/subscriptions/ffffffff-ffff-ffff-ffff-ffffffffffff/resourceGroups/exampleresourcegroup/providers/Microsoft.DBforPostgreSQL/flexibleServers/exampleserver/configurations/pg_stat_statements.track_utility"),
		// 				Properties: &armpostgresql.ConfigurationProperties{
		// 					Description: to.Ptr("Selects whether utility commands are tracked by pg_stat_statements."),
		// 					AllowedValues: to.Ptr("on,off"),
		// 					DataType: to.Ptr(armpostgresql.ConfigurationDataTypeBoolean),
		// 					DefaultValue: to.Ptr("on"),
		// 					DocumentationLink: to.Ptr("https://www.postgresql.org/docs/13/pgstatstatements.html"),
		// 					IsConfigPendingRestart: to.Ptr(false),
		// 					IsDynamicConfig: to.Ptr(true),
		// 					IsReadOnly: to.Ptr(false),
		// 					Source: to.Ptr("system-default"),
		// 					Value: to.Ptr("on"),
		// 				},
		// 			},
		// 			{
		// 				Name: to.Ptr("pgaudit.log"),
		// 				Type: to.Ptr("Microsoft.DBforPostgreSQL/flexibleServers/configurations"),
		// 				ID: to.Ptr("/subscriptions/ffffffff-ffff-ffff-ffff-ffffffffffff/resourceGroups/exampleresourcegroup/providers/Microsoft.DBforPostgreSQL/flexibleServers/exampleserver/configurations/pgaudit.log"),
		// 				Properties: &armpostgresql.ConfigurationProperties{
		// 					Description: to.Ptr("Specifies which classes of statements will be logged by session audit logging."),
		// 					AllowedValues: to.Ptr("none,read,write,function,role,ddl,misc,all"),
		// 					DataType: to.Ptr(armpostgresql.ConfigurationDataTypeSet),
		// 					DefaultValue: to.Ptr("none"),
		// 					DocumentationLink: to.Ptr("https://github.com/pgaudit/pgaudit/blob/master/README.md"),
		// 					IsConfigPendingRestart: to.Ptr(false),
		// 					IsDynamicConfig: to.Ptr(true),
		// 					IsReadOnly: to.Ptr(false),
		// 					Source: to.Ptr("system-default"),
		// 					Value: to.Ptr("none"),
		// 				},
		// 			},
		// 			{
		// 				Name: to.Ptr("pgaudit.log_catalog"),
		// 				Type: to.Ptr("Microsoft.DBforPostgreSQL/flexibleServers/configurations"),
		// 				ID: to.Ptr("/subscriptions/ffffffff-ffff-ffff-ffff-ffffffffffff/resourceGroups/exampleresourcegroup/providers/Microsoft.DBforPostgreSQL/flexibleServers/exampleserver/configurations/pgaudit.log_catalog"),
		// 				Properties: &armpostgresql.ConfigurationProperties{
		// 					Description: to.Ptr("Specifies that session logging should be enabled in the case where all relations in a statement are in pg_catalog."),
		// 					AllowedValues: to.Ptr("on,off"),
		// 					DataType: to.Ptr(armpostgresql.ConfigurationDataTypeBoolean),
		// 					DefaultValue: to.Ptr("on"),
		// 					DocumentationLink: to.Ptr("https://github.com/pgaudit/pgaudit/blob/master/README.md"),
		// 					IsConfigPendingRestart: to.Ptr(false),
		// 					IsDynamicConfig: to.Ptr(true),
		// 					IsReadOnly: to.Ptr(false),
		// 					Source: to.Ptr("system-default"),
		// 					Value: to.Ptr("on"),
		// 				},
		// 			},
		// 			{
		// 				Name: to.Ptr("pgaudit.log_client"),
		// 				Type: to.Ptr("Microsoft.DBforPostgreSQL/flexibleServers/configurations"),
		// 				ID: to.Ptr("/subscriptions/ffffffff-ffff-ffff-ffff-ffffffffffff/resourceGroups/exampleresourcegroup/providers/Microsoft.DBforPostgreSQL/flexibleServers/exampleserver/configurations/pgaudit.log_client"),
		// 				Properties: &armpostgresql.ConfigurationProperties{
		// 					Description: to.Ptr("Specifies whether audit messages should be visible to client."),
		// 					AllowedValues: to.Ptr("on,off"),
		// 					DataType: to.Ptr(armpostgresql.ConfigurationDataTypeBoolean),
		// 					DefaultValue: to.Ptr("off"),
		// 					DocumentationLink: to.Ptr("https://github.com/pgaudit/pgaudit/blob/master/README.md"),
		// 					IsConfigPendingRestart: to.Ptr(false),
		// 					IsDynamicConfig: to.Ptr(true),
		// 					IsReadOnly: to.Ptr(false),
		// 					Source: to.Ptr("system-default"),
		// 					Value: to.Ptr("off"),
		// 				},
		// 			},
		// 			{
		// 				Name: to.Ptr("pgaudit.log_level"),
		// 				Type: to.Ptr("Microsoft.DBforPostgreSQL/flexibleServers/configurations"),
		// 				ID: to.Ptr("/subscriptions/ffffffff-ffff-ffff-ffff-ffffffffffff/resourceGroups/exampleresourcegroup/providers/Microsoft.DBforPostgreSQL/flexibleServers/exampleserver/configurations/pgaudit.log_level"),
		// 				Properties: &armpostgresql.ConfigurationProperties{
		// 					Description: to.Ptr("Specifies the log level that will be used for log entries."),
		// 					AllowedValues: to.Ptr(",debug5,debug4,debug3,debug2,debug1,info,notice,warning,log"),
		// 					DataType: to.Ptr(armpostgresql.ConfigurationDataTypeEnumeration),
		// 					DefaultValue: to.Ptr("log"),
		// 					DocumentationLink: to.Ptr("https://github.com/pgaudit/pgaudit/blob/master/README.md"),
		// 					IsConfigPendingRestart: to.Ptr(false),
		// 					IsDynamicConfig: to.Ptr(true),
		// 					IsReadOnly: to.Ptr(false),
		// 					Source: to.Ptr("system-default"),
		// 					Value: to.Ptr("log"),
		// 				},
		// 			},
		// 			{
		// 				Name: to.Ptr("pgaudit.log_parameter"),
		// 				Type: to.Ptr("Microsoft.DBforPostgreSQL/flexibleServers/configurations"),
		// 				ID: to.Ptr("/subscriptions/ffffffff-ffff-ffff-ffff-ffffffffffff/resourceGroups/exampleresourcegroup/providers/Microsoft.DBforPostgreSQL/flexibleServers/exampleserver/configurations/pgaudit.log_parameter"),
		// 				Properties: &armpostgresql.ConfigurationProperties{
		// 					Description: to.Ptr("Specifies that audit logging should include the parameters that were passed with the statement."),
		// 					AllowedValues: to.Ptr("on,off"),
		// 					DataType: to.Ptr(armpostgresql.ConfigurationDataTypeBoolean),
		// 					DefaultValue: to.Ptr("off"),
		// 					DocumentationLink: to.Ptr("https://github.com/pgaudit/pgaudit/blob/master/README.md"),
		// 					IsConfigPendingRestart: to.Ptr(false),
		// 					IsDynamicConfig: to.Ptr(true),
		// 					IsReadOnly: to.Ptr(false),
		// 					Source: to.Ptr("system-default"),
		// 					Value: to.Ptr("off"),
		// 				},
		// 			},
		// 			{
		// 				Name: to.Ptr("pgaudit.log_relation"),
		// 				Type: to.Ptr("Microsoft.DBforPostgreSQL/flexibleServers/configurations"),
		// 				ID: to.Ptr("/subscriptions/ffffffff-ffff-ffff-ffff-ffffffffffff/resourceGroups/exampleresourcegroup/providers/Microsoft.DBforPostgreSQL/flexibleServers/exampleserver/configurations/pgaudit.log_relation"),
		// 				Properties: &armpostgresql.ConfigurationProperties{
		// 					Description: to.Ptr("Specifies whether session audit logging should create a separate log entry for each relation referenced in a SELECT or DML statement."),
		// 					AllowedValues: to.Ptr("on,off"),
		// 					DataType: to.Ptr(armpostgresql.ConfigurationDataTypeBoolean),
		// 					DefaultValue: to.Ptr("off"),
		// 					DocumentationLink: to.Ptr("https://github.com/pgaudit/pgaudit/blob/master/README.md"),
		// 					IsConfigPendingRestart: to.Ptr(false),
		// 					IsDynamicConfig: to.Ptr(true),
		// 					IsReadOnly: to.Ptr(false),
		// 					Source: to.Ptr("system-default"),
		// 					Value: to.Ptr("off"),
		// 				},
		// 			},
		// 			{
		// 				Name: to.Ptr("pgaudit.log_statement_once"),
		// 				Type: to.Ptr("Microsoft.DBforPostgreSQL/flexibleServers/configurations"),
		// 				ID: to.Ptr("/subscriptions/ffffffff-ffff-ffff-ffff-ffffffffffff/resourceGroups/exampleresourcegroup/providers/Microsoft.DBforPostgreSQL/flexibleServers/exampleserver/configurations/pgaudit.log_statement_once"),
		// 				Properties: &armpostgresql.ConfigurationProperties{
		// 					Description: to.Ptr("Specifies whether logging will include the statement text and parameters with the first log entry for a statement/substatement combination or with every entry."),
		// 					AllowedValues: to.Ptr("on,off"),
		// 					DataType: to.Ptr(armpostgresql.ConfigurationDataTypeBoolean),
		// 					DefaultValue: to.Ptr("off"),
		// 					DocumentationLink: to.Ptr("https://github.com/pgaudit/pgaudit/blob/master/README.md"),
		// 					IsConfigPendingRestart: to.Ptr(false),
		// 					IsDynamicConfig: to.Ptr(true),
		// 					IsReadOnly: to.Ptr(false),
		// 					Source: to.Ptr("system-default"),
		// 					Value: to.Ptr("off"),
		// 				},
		// 			},
		// 			{
		// 				Name: to.Ptr("pgaudit.role"),
		// 				Type: to.Ptr("Microsoft.DBforPostgreSQL/flexibleServers/configurations"),
		// 				ID: to.Ptr("/subscriptions/ffffffff-ffff-ffff-ffff-ffffffffffff/resourceGroups/exampleresourcegroup/providers/Microsoft.DBforPostgreSQL/flexibleServers/exampleserver/configurations/pgaudit.role"),
		// 				Properties: &armpostgresql.ConfigurationProperties{
		// 					Description: to.Ptr("Specifies the master role to use for object audit logging."),
		// 					AllowedValues: to.Ptr("[A-Za-z\\._]*"),
		// 					DataType: to.Ptr(armpostgresql.ConfigurationDataTypeString),
		// 					DefaultValue: to.Ptr(""),
		// 					DocumentationLink: to.Ptr("https://github.com/pgaudit/pgaudit/blob/master/README.md"),
		// 					IsConfigPendingRestart: to.Ptr(false),
		// 					IsDynamicConfig: to.Ptr(true),
		// 					IsReadOnly: to.Ptr(false),
		// 					Source: to.Ptr("system-default"),
		// 					Value: to.Ptr(""),
		// 				},
		// 			},
		// 			{
		// 				Name: to.Ptr("pgbouncer.enabled"),
		// 				Type: to.Ptr("Microsoft.DBforPostgreSQL/flexibleServers/configurations"),
		// 				ID: to.Ptr("/subscriptions/ffffffff-ffff-ffff-ffff-ffffffffffff/resourceGroups/exampleresourcegroup/providers/Microsoft.DBforPostgreSQL/flexibleServers/exampleserver/configurations/pgbouncer.enabled"),
		// 				Properties: &armpostgresql.ConfigurationProperties{
		// 					Description: to.Ptr("Denotes if pgBouncer service is enabled."),
		// 					AllowedValues: to.Ptr("true, false"),
		// 					DataType: to.Ptr(armpostgresql.ConfigurationDataTypeBoolean),
		// 					DefaultValue: to.Ptr("false"),
		// 					DocumentationLink: to.Ptr("https://www.pgbouncer.org/config.html"),
		// 					IsConfigPendingRestart: to.Ptr(false),
		// 					IsDynamicConfig: to.Ptr(true),
		// 					IsReadOnly: to.Ptr(false),
		// 					Source: to.Ptr("system-default"),
		// 					Value: to.Ptr("false"),
		// 				},
		// 			},
		// 			{
		// 				Name: to.Ptr("pglogical.batch_inserts"),
		// 				Type: to.Ptr("Microsoft.DBforPostgreSQL/flexibleServers/configurations"),
		// 				ID: to.Ptr("/subscriptions/ffffffff-ffff-ffff-ffff-ffffffffffff/resourceGroups/exampleresourcegroup/providers/Microsoft.DBforPostgreSQL/flexibleServers/exampleserver/configurations/pglogical.batch_inserts"),
		// 				Properties: &armpostgresql.ConfigurationProperties{
		// 					Description: to.Ptr("Tells PGLogical to use batch insert mechanism if possible."),
		// 					AllowedValues: to.Ptr("on,off"),
		// 					DataType: to.Ptr(armpostgresql.ConfigurationDataTypeBoolean),
		// 					DefaultValue: to.Ptr("on"),
		// 					DocumentationLink: to.Ptr("https://github.com/ArmMbedCloud/pglogical"),
		// 					IsConfigPendingRestart: to.Ptr(false),
		// 					IsDynamicConfig: to.Ptr(true),
		// 					IsReadOnly: to.Ptr(false),
		// 					Source: to.Ptr("system-default"),
		// 					Value: to.Ptr("on"),
		// 				},
		// 			},
		// 			{
		// 				Name: to.Ptr("pglogical.conflict_log_level"),
		// 				Type: to.Ptr("Microsoft.DBforPostgreSQL/flexibleServers/configurations"),
		// 				ID: to.Ptr("/subscriptions/ffffffff-ffff-ffff-ffff-ffffffffffff/resourceGroups/exampleresourcegroup/providers/Microsoft.DBforPostgreSQL/flexibleServers/exampleserver/configurations/pglogical.conflict_log_level"),
		// 				Properties: &armpostgresql.ConfigurationProperties{
		// 					Description: to.Ptr("Sets the log level for reporting detected conflicts when the pglogical.conflict_resolution is set to anything else than error."),
		// 					AllowedValues: to.Ptr("debug5,debug4,debug3,debug2,debug1,info,notice,warning,error,log,fatal,panic"),
		// 					DataType: to.Ptr(armpostgresql.ConfigurationDataTypeEnumeration),
		// 					DefaultValue: to.Ptr("log"),
		// 					DocumentationLink: to.Ptr("https://github.com/ArmMbedCloud/pglogical"),
		// 					IsConfigPendingRestart: to.Ptr(false),
		// 					IsDynamicConfig: to.Ptr(true),
		// 					IsReadOnly: to.Ptr(false),
		// 					Source: to.Ptr("system-default"),
		// 					Value: to.Ptr("log"),
		// 				},
		// 			},
		// 			{
		// 				Name: to.Ptr("pglogical.conflict_resolution"),
		// 				Type: to.Ptr("Microsoft.DBforPostgreSQL/flexibleServers/configurations"),
		// 				ID: to.Ptr("/subscriptions/ffffffff-ffff-ffff-ffff-ffffffffffff/resourceGroups/exampleresourcegroup/providers/Microsoft.DBforPostgreSQL/flexibleServers/exampleserver/configurations/pglogical.conflict_resolution"),
		// 				Properties: &armpostgresql.ConfigurationProperties{
		// 					Description: to.Ptr("Sets the resolution method for any detected conflicts between local data and incoming changes."),
		// 					AllowedValues: to.Ptr("error,apply_remote,keep_local,last_update_wins,first_update_wins"),
		// 					DataType: to.Ptr(armpostgresql.ConfigurationDataTypeEnumeration),
		// 					DefaultValue: to.Ptr("apply_remote"),
		// 					DocumentationLink: to.Ptr("https://github.com/ArmMbedCloud/pglogical"),
		// 					IsConfigPendingRestart: to.Ptr(false),
		// 					IsDynamicConfig: to.Ptr(true),
		// 					IsReadOnly: to.Ptr(false),
		// 					Source: to.Ptr("system-default"),
		// 					Value: to.Ptr("apply_remote"),
		// 				},
		// 			},
		// 			{
		// 				Name: to.Ptr("pglogical.use_spi"),
		// 				Type: to.Ptr("Microsoft.DBforPostgreSQL/flexibleServers/configurations"),
		// 				ID: to.Ptr("/subscriptions/ffffffff-ffff-ffff-ffff-ffffffffffff/resourceGroups/exampleresourcegroup/providers/Microsoft.DBforPostgreSQL/flexibleServers/exampleserver/configurations/pglogical.use_spi"),
		// 				Properties: &armpostgresql.ConfigurationProperties{
		// 					Description: to.Ptr("Tells PGLogical to use SPI interface to form actual SQL (INSERT, UPDATE, DELETE) statements to apply incoming changes instead of using internal low level interface."),
		// 					AllowedValues: to.Ptr("on,off"),
		// 					DataType: to.Ptr(armpostgresql.ConfigurationDataTypeBoolean),
		// 					DefaultValue: to.Ptr("off"),
		// 					DocumentationLink: to.Ptr("https://github.com/ArmMbedCloud/pglogical"),
		// 					IsConfigPendingRestart: to.Ptr(false),
		// 					IsDynamicConfig: to.Ptr(true),
		// 					IsReadOnly: to.Ptr(false),
		// 					Source: to.Ptr("system-default"),
		// 					Value: to.Ptr("off"),
		// 				},
		// 			},
		// 			{
		// 				Name: to.Ptr("pgms_stats.is_enabled_fs"),
		// 				Type: to.Ptr("Microsoft.DBforPostgreSQL/flexibleServers/configurations"),
		// 				ID: to.Ptr("/subscriptions/ffffffff-ffff-ffff-ffff-ffffffffffff/resourceGroups/exampleresourcegroup/providers/Microsoft.DBforPostgreSQL/flexibleServers/exampleserver/configurations/pgms_stats.is_enabled_fs"),
		// 				Properties: &armpostgresql.ConfigurationProperties{
		// 					Description: to.Ptr("Internal Use Only: This parameter is used as a feature override switch."),
		// 					AllowedValues: to.Ptr("on,off"),
		// 					DataType: to.Ptr(armpostgresql.ConfigurationDataTypeBoolean),
		// 					DefaultValue: to.Ptr("on"),
		// 					IsConfigPendingRestart: to.Ptr(false),
		// 					IsDynamicConfig: to.Ptr(true),
		// 					IsReadOnly: to.Ptr(true),
		// 					Source: to.Ptr("system-default"),
		// 					Value: to.Ptr("on"),
		// 				},
		// 			},
		// 			{
		// 				Name: to.Ptr("pgms_wait_sampling.history_period"),
		// 				Type: to.Ptr("Microsoft.DBforPostgreSQL/flexibleServers/configurations"),
		// 				ID: to.Ptr("/subscriptions/ffffffff-ffff-ffff-ffff-ffffffffffff/resourceGroups/exampleresourcegroup/providers/Microsoft.DBforPostgreSQL/flexibleServers/exampleserver/configurations/pgms_wait_sampling.history_period"),
		// 				Properties: &armpostgresql.ConfigurationProperties{
		// 					Description: to.Ptr("Set the frequency, in milliseconds, at which wait events are sampled."),
		// 					AllowedValues: to.Ptr("1-600000"),
		// 					DataType: to.Ptr(armpostgresql.ConfigurationDataTypeInteger),
		// 					DefaultValue: to.Ptr("100"),
		// 					DocumentationLink: to.Ptr("https://go.microsoft.com/fwlink/?linkid=2274607"),
		// 					IsConfigPendingRestart: to.Ptr(false),
		// 					IsDynamicConfig: to.Ptr(true),
		// 					IsReadOnly: to.Ptr(false),
		// 					Source: to.Ptr("system-default"),
		// 					Unit: to.Ptr("milliseconds"),
		// 					Value: to.Ptr("100"),
		// 				},
		// 			},
		// 			{
		// 				Name: to.Ptr("pgms_wait_sampling.is_enabled_fs"),
		// 				Type: to.Ptr("Microsoft.DBforPostgreSQL/flexibleServers/configurations"),
		// 				ID: to.Ptr("/subscriptions/ffffffff-ffff-ffff-ffff-ffffffffffff/resourceGroups/exampleresourcegroup/providers/Microsoft.DBforPostgreSQL/flexibleServers/exampleserver/configurations/pgms_wait_sampling.is_enabled_fs"),
		// 				Properties: &armpostgresql.ConfigurationProperties{
		// 					Description: to.Ptr("Internal Use Only: This parameter is used as a feature override switch. If it shows as off, wait sampling will be disabled despite the value set for pgms_wait_sampling.query_capture_mode."),
		// 					AllowedValues: to.Ptr("on,off"),
		// 					DataType: to.Ptr(armpostgresql.ConfigurationDataTypeBoolean),
		// 					DefaultValue: to.Ptr("on"),
		// 					DocumentationLink: to.Ptr("https://go.microsoft.com/fwlink/?linkid=2274607"),
		// 					IsConfigPendingRestart: to.Ptr(false),
		// 					IsDynamicConfig: to.Ptr(true),
		// 					IsReadOnly: to.Ptr(true),
		// 					Source: to.Ptr("system-default"),
		// 					Value: to.Ptr("on"),
		// 				},
		// 			},
		// 			{
		// 				Name: to.Ptr("pgms_wait_sampling.query_capture_mode"),
		// 				Type: to.Ptr("Microsoft.DBforPostgreSQL/flexibleServers/configurations"),
		// 				ID: to.Ptr("/subscriptions/ffffffff-ffff-ffff-ffff-ffffffffffff/resourceGroups/exampleresourcegroup/providers/Microsoft.DBforPostgreSQL/flexibleServers/exampleserver/configurations/pgms_wait_sampling.query_capture_mode"),
		// 				Properties: &armpostgresql.ConfigurationProperties{
		// 					Description: to.Ptr("Selects which statements are tracked by the pgms_wait_sampling extension."),
		// 					AllowedValues: to.Ptr("all,none"),
		// 					DataType: to.Ptr(armpostgresql.ConfigurationDataTypeEnumeration),
		// 					DefaultValue: to.Ptr("none"),
		// 					DocumentationLink: to.Ptr("https://go.microsoft.com/fwlink/?linkid=2274607"),
		// 					IsConfigPendingRestart: to.Ptr(false),
		// 					IsDynamicConfig: to.Ptr(true),
		// 					IsReadOnly: to.Ptr(false),
		// 					Source: to.Ptr("system-default"),
		// 					Value: to.Ptr("none"),
		// 				},
		// 			},
		// 			{
		// 				Name: to.Ptr("plan_cache_mode"),
		// 				Type: to.Ptr("Microsoft.DBforPostgreSQL/flexibleServers/configurations"),
		// 				ID: to.Ptr("/subscriptions/ffffffff-ffff-ffff-ffff-ffffffffffff/resourceGroups/exampleresourcegroup/providers/Microsoft.DBforPostgreSQL/flexibleServers/exampleserver/configurations/plan_cache_mode"),
		// 				Properties: &armpostgresql.ConfigurationProperties{
		// 					Description: to.Ptr("Controls the planner's selection of custom or generic plan."),
		// 					AllowedValues: to.Ptr("auto,force_generic_plan,force_custom_plan"),
		// 					DataType: to.Ptr(armpostgresql.ConfigurationDataTypeEnumeration),
		// 					DefaultValue: to.Ptr("auto"),
		// 					DocumentationLink: to.Ptr("https://www.postgresql.org/docs/13/runtime-config-query.html#id-1.6.6.10.5.2.9.1.3"),
		// 					IsConfigPendingRestart: to.Ptr(false),
		// 					IsDynamicConfig: to.Ptr(true),
		// 					IsReadOnly: to.Ptr(true),
		// 					Source: to.Ptr("system-default"),
		// 					Value: to.Ptr("auto"),
		// 				},
		// 			},
		// 			{
		// 				Name: to.Ptr("port"),
		// 				Type: to.Ptr("Microsoft.DBforPostgreSQL/flexibleServers/configurations"),
		// 				ID: to.Ptr("/subscriptions/ffffffff-ffff-ffff-ffff-ffffffffffff/resourceGroups/exampleresourcegroup/providers/Microsoft.DBforPostgreSQL/flexibleServers/exampleserver/configurations/port"),
		// 				Properties: &armpostgresql.ConfigurationProperties{
		// 					Description: to.Ptr("Sets the TCP port the server listens on."),
		// 					AllowedValues: to.Ptr("1-65535"),
		// 					DataType: to.Ptr(armpostgresql.ConfigurationDataTypeInteger),
		// 					DefaultValue: to.Ptr("5432"),
		// 					DocumentationLink: to.Ptr("https://www.postgresql.org/docs/13/runtime-config-connection.html#GUC-PORT"),
		// 					IsConfigPendingRestart: to.Ptr(false),
		// 					IsDynamicConfig: to.Ptr(false),
		// 					IsReadOnly: to.Ptr(true),
		// 					Source: to.Ptr("system-default"),
		// 					Value: to.Ptr("5432"),
		// 				},
		// 			},
		// 			{
		// 				Name: to.Ptr("post_auth_delay"),
		// 				Type: to.Ptr("Microsoft.DBforPostgreSQL/flexibleServers/configurations"),
		// 				ID: to.Ptr("/subscriptions/ffffffff-ffff-ffff-ffff-ffffffffffff/resourceGroups/exampleresourcegroup/providers/Microsoft.DBforPostgreSQL/flexibleServers/exampleserver/configurations/post_auth_delay"),
		// 				Properties: &armpostgresql.ConfigurationProperties{
		// 					Description: to.Ptr("Waits N seconds on connection startup after authentication."),
		// 					AllowedValues: to.Ptr("0-2147"),
		// 					DataType: to.Ptr(armpostgresql.ConfigurationDataTypeInteger),
		// 					DefaultValue: to.Ptr("0"),
		// 					DocumentationLink: to.Ptr("https://www.postgresql.org/docs/13/runtime-config-developer.html#GUC-POST-AUTH-DELAY"),
		// 					IsConfigPendingRestart: to.Ptr(false),
		// 					IsDynamicConfig: to.Ptr(true),
		// 					IsReadOnly: to.Ptr(true),
		// 					Source: to.Ptr("system-default"),
		// 					Unit: to.Ptr("seconds"),
		// 					Value: to.Ptr("0"),
		// 				},
		// 			},
		// 			{
		// 				Name: to.Ptr("postgis.gdal_enabled_drivers"),
		// 				Type: to.Ptr("Microsoft.DBforPostgreSQL/flexibleServers/configurations"),
		// 				ID: to.Ptr("/subscriptions/ffffffff-ffff-ffff-ffff-ffffffffffff/resourceGroups/exampleresourcegroup/providers/Microsoft.DBforPostgreSQL/flexibleServers/exampleserver/configurations/postgis.gdal_enabled_drivers"),
		// 				Properties: &armpostgresql.ConfigurationProperties{
		// 					Description: to.Ptr("Controls postgis GDAL enabled driver settings."),
		// 					AllowedValues: to.Ptr("DISABLE_ALL,ENABLE_ALL"),
		// 					DataType: to.Ptr(armpostgresql.ConfigurationDataTypeEnumeration),
		// 					DefaultValue: to.Ptr("DISABLE_ALL"),
		// 					DocumentationLink: to.Ptr("https://postgis.net/docs/postgis_gdal_enabled_drivers.html"),
		// 					IsConfigPendingRestart: to.Ptr(false),
		// 					IsDynamicConfig: to.Ptr(true),
		// 					IsReadOnly: to.Ptr(false),
		// 					Source: to.Ptr("system-default"),
		// 					Value: to.Ptr("DISABLE_ALL"),
		// 				},
		// 			},
		// 			{
		// 				Name: to.Ptr("pre_auth_delay"),
		// 				Type: to.Ptr("Microsoft.DBforPostgreSQL/flexibleServers/configurations"),
		// 				ID: to.Ptr("/subscriptions/ffffffff-ffff-ffff-ffff-ffffffffffff/resourceGroups/exampleresourcegroup/providers/Microsoft.DBforPostgreSQL/flexibleServers/exampleserver/configurations/pre_auth_delay"),
		// 				Properties: &armpostgresql.ConfigurationProperties{
		// 					Description: to.Ptr("Waits N seconds on connection startup before authentication."),
		// 					AllowedValues: to.Ptr("0-60"),
		// 					DataType: to.Ptr(armpostgresql.ConfigurationDataTypeInteger),
		// 					DefaultValue: to.Ptr("0"),
		// 					DocumentationLink: to.Ptr("https://www.postgresql.org/docs/13/runtime-config-developer.html#GUC-PRE-AUTH-DELAY"),
		// 					IsConfigPendingRestart: to.Ptr(false),
		// 					IsDynamicConfig: to.Ptr(true),
		// 					IsReadOnly: to.Ptr(true),
		// 					Source: to.Ptr("system-default"),
		// 					Unit: to.Ptr("seconds"),
		// 					Value: to.Ptr("0"),
		// 				},
		// 			},
		// 			{
		// 				Name: to.Ptr("primary_conninfo"),
		// 				Type: to.Ptr("Microsoft.DBforPostgreSQL/flexibleServers/configurations"),
		// 				ID: to.Ptr("/subscriptions/ffffffff-ffff-ffff-ffff-ffffffffffff/resourceGroups/exampleresourcegroup/providers/Microsoft.DBforPostgreSQL/flexibleServers/exampleserver/configurations/primary_conninfo"),
		// 				Properties: &armpostgresql.ConfigurationProperties{
		// 					Description: to.Ptr("Sets the connection string to be used to connect to the sending server."),
		// 					AllowedValues: to.Ptr(".*"),
		// 					DataType: to.Ptr(armpostgresql.ConfigurationDataTypeString),
		// 					DefaultValue: to.Ptr(""),
		// 					DocumentationLink: to.Ptr("https://www.postgresql.org/docs/13/runtime-config-replication.html#GUC-PRIMARY-CONNINFO"),
		// 					IsConfigPendingRestart: to.Ptr(false),
		// 					IsDynamicConfig: to.Ptr(true),
		// 					IsReadOnly: to.Ptr(true),
		// 					Source: to.Ptr("system-default"),
		// 					Value: to.Ptr(""),
		// 				},
		// 			},
		// 			{
		// 				Name: to.Ptr("primary_slot_name"),
		// 				Type: to.Ptr("Microsoft.DBforPostgreSQL/flexibleServers/configurations"),
		// 				ID: to.Ptr("/subscriptions/ffffffff-ffff-ffff-ffff-ffffffffffff/resourceGroups/exampleresourcegroup/providers/Microsoft.DBforPostgreSQL/flexibleServers/exampleserver/configurations/primary_slot_name"),
		// 				Properties: &armpostgresql.ConfigurationProperties{
		// 					Description: to.Ptr("Sets the name of the replication slot to use on the sending server."),
		// 					AllowedValues: to.Ptr(".*"),
		// 					DataType: to.Ptr(armpostgresql.ConfigurationDataTypeString),
		// 					DefaultValue: to.Ptr(""),
		// 					DocumentationLink: to.Ptr("https://www.postgresql.org/docs/13/runtime-config-replication.html#GUC-PRIMARY-SLOT-NAME"),
		// 					IsConfigPendingRestart: to.Ptr(false),
		// 					IsDynamicConfig: to.Ptr(true),
		// 					IsReadOnly: to.Ptr(true),
		// 					Source: to.Ptr("system-default"),
		// 					Value: to.Ptr(""),
		// 				},
		// 			},
		// 			{
		// 				Name: to.Ptr("promote_trigger_file"),
		// 				Type: to.Ptr("Microsoft.DBforPostgreSQL/flexibleServers/configurations"),
		// 				ID: to.Ptr("/subscriptions/ffffffff-ffff-ffff-ffff-ffffffffffff/resourceGroups/exampleresourcegroup/providers/Microsoft.DBforPostgreSQL/flexibleServers/exampleserver/configurations/promote_trigger_file"),
		// 				Properties: &armpostgresql.ConfigurationProperties{
		// 					Description: to.Ptr("Specifies a file name whose presence ends recovery in the standby."),
		// 					AllowedValues: to.Ptr(".*"),
		// 					DataType: to.Ptr(armpostgresql.ConfigurationDataTypeString),
		// 					DefaultValue: to.Ptr(""),
		// 					IsConfigPendingRestart: to.Ptr(false),
		// 					IsDynamicConfig: to.Ptr(true),
		// 					IsReadOnly: to.Ptr(true),
		// 					Source: to.Ptr("system-default"),
		// 					Value: to.Ptr(""),
		// 				},
		// 			},
		// 			{
		// 				Name: to.Ptr("quote_all_identifiers"),
		// 				Type: to.Ptr("Microsoft.DBforPostgreSQL/flexibleServers/configurations"),
		// 				ID: to.Ptr("/subscriptions/ffffffff-ffff-ffff-ffff-ffffffffffff/resourceGroups/exampleresourcegroup/providers/Microsoft.DBforPostgreSQL/flexibleServers/exampleserver/configurations/quote_all_identifiers"),
		// 				Properties: &armpostgresql.ConfigurationProperties{
		// 					Description: to.Ptr("When generating SQL fragments, quotes all identifiers."),
		// 					AllowedValues: to.Ptr("on,off"),
		// 					DataType: to.Ptr(armpostgresql.ConfigurationDataTypeBoolean),
		// 					DefaultValue: to.Ptr("off"),
		// 					DocumentationLink: to.Ptr("https://www.postgresql.org/docs/13/runtime-config-compatible.html#GUC-QUOTE-ALL-IDENTIFIERS"),
		// 					IsConfigPendingRestart: to.Ptr(false),
		// 					IsDynamicConfig: to.Ptr(true),
		// 					IsReadOnly: to.Ptr(false),
		// 					Source: to.Ptr("system-default"),
		// 					Value: to.Ptr("off"),
		// 				},
		// 			},
		// 			{
		// 				Name: to.Ptr("random_page_cost"),
		// 				Type: to.Ptr("Microsoft.DBforPostgreSQL/flexibleServers/configurations"),
		// 				ID: to.Ptr("/subscriptions/ffffffff-ffff-ffff-ffff-ffffffffffff/resourceGroups/exampleresourcegroup/providers/Microsoft.DBforPostgreSQL/flexibleServers/exampleserver/configurations/random_page_cost"),
		// 				Properties: &armpostgresql.ConfigurationProperties{
		// 					Description: to.Ptr("Sets the planner's estimate of the cost of a nonsequentially fetched disk page."),
		// 					AllowedValues: to.Ptr("0-1.79769e+308"),
		// 					DataType: to.Ptr(armpostgresql.ConfigurationDataTypeNumeric),
		// 					DefaultValue: to.Ptr("2"),
		// 					DocumentationLink: to.Ptr("https://www.postgresql.org/docs/13/runtime-config-query.html#GUC-RANDOM-PAGE-COST"),
		// 					IsConfigPendingRestart: to.Ptr(false),
		// 					IsDynamicConfig: to.Ptr(true),
		// 					IsReadOnly: to.Ptr(false),
		// 					Source: to.Ptr("system-default"),
		// 					Value: to.Ptr("2"),
		// 				},
		// 			},
		// 			{
		// 				Name: to.Ptr("recovery_end_command"),
		// 				Type: to.Ptr("Microsoft.DBforPostgreSQL/flexibleServers/configurations"),
		// 				ID: to.Ptr("/subscriptions/ffffffff-ffff-ffff-ffff-ffffffffffff/resourceGroups/exampleresourcegroup/providers/Microsoft.DBforPostgreSQL/flexibleServers/exampleserver/configurations/recovery_end_command"),
		// 				Properties: &armpostgresql.ConfigurationProperties{
		// 					Description: to.Ptr("Sets the shell command that will be executed once at the end of recovery."),
		// 					AllowedValues: to.Ptr(".*"),
		// 					DataType: to.Ptr(armpostgresql.ConfigurationDataTypeString),
		// 					DefaultValue: to.Ptr(""),
		// 					DocumentationLink: to.Ptr("https://www.postgresql.org/docs/13/runtime-config-wal.html#GUC-RECOVERY-END-COMMAND"),
		// 					IsConfigPendingRestart: to.Ptr(false),
		// 					IsDynamicConfig: to.Ptr(true),
		// 					IsReadOnly: to.Ptr(true),
		// 					Source: to.Ptr("system-default"),
		// 					Value: to.Ptr(""),
		// 				},
		// 			},
		// 			{
		// 				Name: to.Ptr("recovery_min_apply_delay"),
		// 				Type: to.Ptr("Microsoft.DBforPostgreSQL/flexibleServers/configurations"),
		// 				ID: to.Ptr("/subscriptions/ffffffff-ffff-ffff-ffff-ffffffffffff/resourceGroups/exampleresourcegroup/providers/Microsoft.DBforPostgreSQL/flexibleServers/exampleserver/configurations/recovery_min_apply_delay"),
		// 				Properties: &armpostgresql.ConfigurationProperties{
		// 					Description: to.Ptr("Sets the minimum delay for applying changes during recovery."),
		// 					AllowedValues: to.Ptr("0-2147483647"),
		// 					DataType: to.Ptr(armpostgresql.ConfigurationDataTypeInteger),
		// 					DefaultValue: to.Ptr("0"),
		// 					DocumentationLink: to.Ptr("https://www.postgresql.org/docs/13/runtime-config-replication.html#GUC-RECOVERY-MIN-APPLY-DELAY"),
		// 					IsConfigPendingRestart: to.Ptr(false),
		// 					IsDynamicConfig: to.Ptr(true),
		// 					IsReadOnly: to.Ptr(true),
		// 					Source: to.Ptr("system-default"),
		// 					Unit: to.Ptr("milliseconds"),
		// 					Value: to.Ptr("0"),
		// 				},
		// 			},
		// 			{
		// 				Name: to.Ptr("recovery_target"),
		// 				Type: to.Ptr("Microsoft.DBforPostgreSQL/flexibleServers/configurations"),
		// 				ID: to.Ptr("/subscriptions/ffffffff-ffff-ffff-ffff-ffffffffffff/resourceGroups/exampleresourcegroup/providers/Microsoft.DBforPostgreSQL/flexibleServers/exampleserver/configurations/recovery_target"),
		// 				Properties: &armpostgresql.ConfigurationProperties{
		// 					Description: to.Ptr("Set to \"immediate\" to end recovery as soon as a consistent state is reached."),
		// 					AllowedValues: to.Ptr(".*"),
		// 					DataType: to.Ptr(armpostgresql.ConfigurationDataTypeString),
		// 					DefaultValue: to.Ptr(""),
		// 					DocumentationLink: to.Ptr("https://www.postgresql.org/docs/13/runtime-config-wal.html#GUC-RECOVERY-TARGET"),
		// 					IsConfigPendingRestart: to.Ptr(false),
		// 					IsDynamicConfig: to.Ptr(false),
		// 					IsReadOnly: to.Ptr(true),
		// 					Source: to.Ptr("system-default"),
		// 					Value: to.Ptr(""),
		// 				},
		// 			},
		// 			{
		// 				Name: to.Ptr("recovery_target_action"),
		// 				Type: to.Ptr("Microsoft.DBforPostgreSQL/flexibleServers/configurations"),
		// 				ID: to.Ptr("/subscriptions/ffffffff-ffff-ffff-ffff-ffffffffffff/resourceGroups/exampleresourcegroup/providers/Microsoft.DBforPostgreSQL/flexibleServers/exampleserver/configurations/recovery_target_action"),
		// 				Properties: &armpostgresql.ConfigurationProperties{
		// 					Description: to.Ptr("Sets the action to perform upon reaching the recovery target."),
		// 					AllowedValues: to.Ptr("pause,promote,shutdown"),
		// 					DataType: to.Ptr(armpostgresql.ConfigurationDataTypeEnumeration),
		// 					DefaultValue: to.Ptr("pause"),
		// 					DocumentationLink: to.Ptr("https://www.postgresql.org/docs/13/runtime-config-wal.html#GUC-RECOVERY-TARGET-ACTION"),
		// 					IsConfigPendingRestart: to.Ptr(false),
		// 					IsDynamicConfig: to.Ptr(false),
		// 					IsReadOnly: to.Ptr(true),
		// 					Source: to.Ptr("system-default"),
		// 					Value: to.Ptr("pause"),
		// 				},
		// 			},
		// 			{
		// 				Name: to.Ptr("recovery_target_inclusive"),
		// 				Type: to.Ptr("Microsoft.DBforPostgreSQL/flexibleServers/configurations"),
		// 				ID: to.Ptr("/subscriptions/ffffffff-ffff-ffff-ffff-ffffffffffff/resourceGroups/exampleresourcegroup/providers/Microsoft.DBforPostgreSQL/flexibleServers/exampleserver/configurations/recovery_target_inclusive"),
		// 				Properties: &armpostgresql.ConfigurationProperties{
		// 					Description: to.Ptr("Sets whether to include or exclude transaction with recovery target."),
		// 					AllowedValues: to.Ptr("on,off"),
		// 					DataType: to.Ptr(armpostgresql.ConfigurationDataTypeBoolean),
		// 					DefaultValue: to.Ptr("on"),
		// 					DocumentationLink: to.Ptr("https://www.postgresql.org/docs/13/runtime-config-wal.html#GUC-RECOVERY-TARGET-INCLUSIVE"),
		// 					IsConfigPendingRestart: to.Ptr(false),
		// 					IsDynamicConfig: to.Ptr(false),
		// 					IsReadOnly: to.Ptr(true),
		// 					Source: to.Ptr("system-default"),
		// 					Value: to.Ptr("on"),
		// 				},
		// 			},
		// 			{
		// 				Name: to.Ptr("recovery_target_lsn"),
		// 				Type: to.Ptr("Microsoft.DBforPostgreSQL/flexibleServers/configurations"),
		// 				ID: to.Ptr("/subscriptions/ffffffff-ffff-ffff-ffff-ffffffffffff/resourceGroups/exampleresourcegroup/providers/Microsoft.DBforPostgreSQL/flexibleServers/exampleserver/configurations/recovery_target_lsn"),
		// 				Properties: &armpostgresql.ConfigurationProperties{
		// 					Description: to.Ptr("Sets the LSN of the write-ahead log location up to which recovery will proceed."),
		// 					AllowedValues: to.Ptr(".*"),
		// 					DataType: to.Ptr(armpostgresql.ConfigurationDataTypeString),
		// 					DefaultValue: to.Ptr(""),
		// 					DocumentationLink: to.Ptr("https://www.postgresql.org/docs/13/runtime-config-wal.html#GUC-RECOVERY-TARGET-LSN"),
		// 					IsConfigPendingRestart: to.Ptr(false),
		// 					IsDynamicConfig: to.Ptr(false),
		// 					IsReadOnly: to.Ptr(true),
		// 					Source: to.Ptr("system-default"),
		// 					Value: to.Ptr(""),
		// 				},
		// 			},
		// 			{
		// 				Name: to.Ptr("recovery_target_name"),
		// 				Type: to.Ptr("Microsoft.DBforPostgreSQL/flexibleServers/configurations"),
		// 				ID: to.Ptr("/subscriptions/ffffffff-ffff-ffff-ffff-ffffffffffff/resourceGroups/exampleresourcegroup/providers/Microsoft.DBforPostgreSQL/flexibleServers/exampleserver/configurations/recovery_target_name"),
		// 				Properties: &armpostgresql.ConfigurationProperties{
		// 					Description: to.Ptr("Sets the named restore point up to which recovery will proceed."),
		// 					AllowedValues: to.Ptr(".*"),
		// 					DataType: to.Ptr(armpostgresql.ConfigurationDataTypeString),
		// 					DefaultValue: to.Ptr(""),
		// 					DocumentationLink: to.Ptr("https://www.postgresql.org/docs/13/runtime-config-wal.html#GUC-RECOVERY-TARGET-NAME"),
		// 					IsConfigPendingRestart: to.Ptr(false),
		// 					IsDynamicConfig: to.Ptr(false),
		// 					IsReadOnly: to.Ptr(true),
		// 					Source: to.Ptr("system-default"),
		// 					Value: to.Ptr(""),
		// 				},
		// 			},
		// 			{
		// 				Name: to.Ptr("recovery_target_time"),
		// 				Type: to.Ptr("Microsoft.DBforPostgreSQL/flexibleServers/configurations"),
		// 				ID: to.Ptr("/subscriptions/ffffffff-ffff-ffff-ffff-ffffffffffff/resourceGroups/exampleresourcegroup/providers/Microsoft.DBforPostgreSQL/flexibleServers/exampleserver/configurations/recovery_target_time"),
		// 				Properties: &armpostgresql.ConfigurationProperties{
		// 					Description: to.Ptr("Sets the time stamp up to which recovery will proceed."),
		// 					AllowedValues: to.Ptr(".*"),
		// 					DataType: to.Ptr(armpostgresql.ConfigurationDataTypeString),
		// 					DefaultValue: to.Ptr(""),
		// 					DocumentationLink: to.Ptr("https://www.postgresql.org/docs/13/runtime-config-wal.html#GUC-RECOVERY-TARGET-TIME"),
		// 					IsConfigPendingRestart: to.Ptr(false),
		// 					IsDynamicConfig: to.Ptr(false),
		// 					IsReadOnly: to.Ptr(true),
		// 					Source: to.Ptr("system-default"),
		// 					Value: to.Ptr(""),
		// 				},
		// 			},
		// 			{
		// 				Name: to.Ptr("recovery_target_timeline"),
		// 				Type: to.Ptr("Microsoft.DBforPostgreSQL/flexibleServers/configurations"),
		// 				ID: to.Ptr("/subscriptions/ffffffff-ffff-ffff-ffff-ffffffffffff/resourceGroups/exampleresourcegroup/providers/Microsoft.DBforPostgreSQL/flexibleServers/exampleserver/configurations/recovery_target_timeline"),
		// 				Properties: &armpostgresql.ConfigurationProperties{
		// 					Description: to.Ptr("Specifies the timeline to recover into."),
		// 					AllowedValues: to.Ptr(".*"),
		// 					DataType: to.Ptr(armpostgresql.ConfigurationDataTypeString),
		// 					DefaultValue: to.Ptr("latest"),
		// 					DocumentationLink: to.Ptr("https://www.postgresql.org/docs/13/runtime-config-wal.html#GUC-RECOVERY-TARGET-TIMELINE"),
		// 					IsConfigPendingRestart: to.Ptr(false),
		// 					IsDynamicConfig: to.Ptr(false),
		// 					IsReadOnly: to.Ptr(true),
		// 					Source: to.Ptr("system-default"),
		// 					Value: to.Ptr("latest"),
		// 				},
		// 			},
		// 			{
		// 				Name: to.Ptr("recovery_target_xid"),
		// 				Type: to.Ptr("Microsoft.DBforPostgreSQL/flexibleServers/configurations"),
		// 				ID: to.Ptr("/subscriptions/ffffffff-ffff-ffff-ffff-ffffffffffff/resourceGroups/exampleresourcegroup/providers/Microsoft.DBforPostgreSQL/flexibleServers/exampleserver/configurations/recovery_target_xid"),
		// 				Properties: &armpostgresql.ConfigurationProperties{
		// 					Description: to.Ptr("Sets the transaction ID up to which recovery will proceed."),
		// 					AllowedValues: to.Ptr(".*"),
		// 					DataType: to.Ptr(armpostgresql.ConfigurationDataTypeString),
		// 					DefaultValue: to.Ptr(""),
		// 					DocumentationLink: to.Ptr("https://www.postgresql.org/docs/13/runtime-config-wal.html#GUC-RECOVERY-TARGET-XID"),
		// 					IsConfigPendingRestart: to.Ptr(false),
		// 					IsDynamicConfig: to.Ptr(false),
		// 					IsReadOnly: to.Ptr(true),
		// 					Source: to.Ptr("system-default"),
		// 					Value: to.Ptr(""),
		// 				},
		// 			},
		// 			{
		// 				Name: to.Ptr("require_secure_transport"),
		// 				Type: to.Ptr("Microsoft.DBforPostgreSQL/flexibleServers/configurations"),
		// 				ID: to.Ptr("/subscriptions/ffffffff-ffff-ffff-ffff-ffffffffffff/resourceGroups/exampleresourcegroup/providers/Microsoft.DBforPostgreSQL/flexibleServers/exampleserver/configurations/require_secure_transport"),
		// 				Properties: &armpostgresql.ConfigurationProperties{
		// 					Description: to.Ptr("Whether client connections to the server are required to use some form of secure transport."),
		// 					AllowedValues: to.Ptr("on,off"),
		// 					DataType: to.Ptr(armpostgresql.ConfigurationDataTypeBoolean),
		// 					DefaultValue: to.Ptr("on"),
		// 					DocumentationLink: to.Ptr("https://go.microsoft.com/fwlink/?linkid=2282200"),
		// 					IsConfigPendingRestart: to.Ptr(false),
		// 					IsDynamicConfig: to.Ptr(true),
		// 					IsReadOnly: to.Ptr(false),
		// 					Source: to.Ptr("system-default"),
		// 					Value: to.Ptr("on"),
		// 				},
		// 			},
		// 			{
		// 				Name: to.Ptr("reserved_connections"),
		// 				Type: to.Ptr("Microsoft.DBforPostgreSQL/flexibleServers/configurations"),
		// 				ID: to.Ptr("/subscriptions/ffffffff-ffff-ffff-ffff-ffffffffffff/resourceGroups/exampleresourcegroup/providers/Microsoft.DBforPostgreSQL/flexibleServers/exampleserver/configurations/reserved_connections"),
		// 				Properties: &armpostgresql.ConfigurationProperties{
		// 					Description: to.Ptr("Sets the number of connections slots reserved for replication users and super users."),
		// 					AllowedValues: to.Ptr("0-262143"),
		// 					DataType: to.Ptr(armpostgresql.ConfigurationDataTypeInteger),
		// 					DefaultValue: to.Ptr("5"),
		// 					IsConfigPendingRestart: to.Ptr(false),
		// 					IsDynamicConfig: to.Ptr(false),
		// 					IsReadOnly: to.Ptr(true),
		// 					Source: to.Ptr("system-default"),
		// 					Value: to.Ptr("5"),
		// 				},
		// 			},
		// 			{
		// 				Name: to.Ptr("restart_after_crash"),
		// 				Type: to.Ptr("Microsoft.DBforPostgreSQL/flexibleServers/configurations"),
		// 				ID: to.Ptr("/subscriptions/ffffffff-ffff-ffff-ffff-ffffffffffff/resourceGroups/exampleresourcegroup/providers/Microsoft.DBforPostgreSQL/flexibleServers/exampleserver/configurations/restart_after_crash"),
		// 				Properties: &armpostgresql.ConfigurationProperties{
		// 					Description: to.Ptr("Reinitialize server after backend crash."),
		// 					AllowedValues: to.Ptr("on,off"),
		// 					DataType: to.Ptr(armpostgresql.ConfigurationDataTypeBoolean),
		// 					DefaultValue: to.Ptr("on"),
		// 					DocumentationLink: to.Ptr("https://www.postgresql.org/docs/13/runtime-config-error-handling.html#GUC-RESTART-AFTER-CRASH"),
		// 					IsConfigPendingRestart: to.Ptr(false),
		// 					IsDynamicConfig: to.Ptr(true),
		// 					IsReadOnly: to.Ptr(true),
		// 					Source: to.Ptr("system-default"),
		// 					Value: to.Ptr("on"),
		// 				},
		// 			},
		// 			{
		// 				Name: to.Ptr("restore_command"),
		// 				Type: to.Ptr("Microsoft.DBforPostgreSQL/flexibleServers/configurations"),
		// 				ID: to.Ptr("/subscriptions/ffffffff-ffff-ffff-ffff-ffffffffffff/resourceGroups/exampleresourcegroup/providers/Microsoft.DBforPostgreSQL/flexibleServers/exampleserver/configurations/restore_command"),
		// 				Properties: &armpostgresql.ConfigurationProperties{
		// 					Description: to.Ptr("Sets the shell command that will be called to retrieve an archived WAL file."),
		// 					AllowedValues: to.Ptr(".*"),
		// 					DataType: to.Ptr(armpostgresql.ConfigurationDataTypeString),
		// 					DefaultValue: to.Ptr(""),
		// 					IsConfigPendingRestart: to.Ptr(false),
		// 					IsDynamicConfig: to.Ptr(true),
		// 					IsReadOnly: to.Ptr(true),
		// 					Source: to.Ptr("system-default"),
		// 					Value: to.Ptr(""),
		// 				},
		// 			},
		// 			{
		// 				Name: to.Ptr("row_security"),
		// 				Type: to.Ptr("Microsoft.DBforPostgreSQL/flexibleServers/configurations"),
		// 				ID: to.Ptr("/subscriptions/ffffffff-ffff-ffff-ffff-ffffffffffff/resourceGroups/exampleresourcegroup/providers/Microsoft.DBforPostgreSQL/flexibleServers/exampleserver/configurations/row_security"),
		// 				Properties: &armpostgresql.ConfigurationProperties{
		// 					Description: to.Ptr("Enables row security."),
		// 					AllowedValues: to.Ptr("on,off"),
		// 					DataType: to.Ptr(armpostgresql.ConfigurationDataTypeBoolean),
		// 					DefaultValue: to.Ptr("on"),
		// 					IsConfigPendingRestart: to.Ptr(false),
		// 					IsDynamicConfig: to.Ptr(true),
		// 					IsReadOnly: to.Ptr(false),
		// 					Source: to.Ptr("system-default"),
		// 					Value: to.Ptr("on"),
		// 				},
		// 			},
		// 			{
		// 				Name: to.Ptr("search_path"),
		// 				Type: to.Ptr("Microsoft.DBforPostgreSQL/flexibleServers/configurations"),
		// 				ID: to.Ptr("/subscriptions/ffffffff-ffff-ffff-ffff-ffffffffffff/resourceGroups/exampleresourcegroup/providers/Microsoft.DBforPostgreSQL/flexibleServers/exampleserver/configurations/search_path"),
		// 				Properties: &armpostgresql.ConfigurationProperties{
		// 					Description: to.Ptr("Sets the schema search order for names that are not schema-qualified."),
		// 					AllowedValues: to.Ptr("[A-Za-z0-9.\"$,_ -]+"),
		// 					DataType: to.Ptr(armpostgresql.ConfigurationDataTypeString),
		// 					DefaultValue: to.Ptr("\"$user\", public"),
		// 					DocumentationLink: to.Ptr("https://www.postgresql.org/docs/13/runtime-config-client.html#GUC-SEARCH-PATH"),
		// 					IsConfigPendingRestart: to.Ptr(false),
		// 					IsDynamicConfig: to.Ptr(true),
		// 					IsReadOnly: to.Ptr(false),
		// 					Source: to.Ptr("system-default"),
		// 					Value: to.Ptr("\"$user\", public"),
		// 				},
		// 			},
		// 			{
		// 				Name: to.Ptr("segment_size"),
		// 				Type: to.Ptr("Microsoft.DBforPostgreSQL/flexibleServers/configurations"),
		// 				ID: to.Ptr("/subscriptions/ffffffff-ffff-ffff-ffff-ffffffffffff/resourceGroups/exampleresourcegroup/providers/Microsoft.DBforPostgreSQL/flexibleServers/exampleserver/configurations/segment_size"),
		// 				Properties: &armpostgresql.ConfigurationProperties{
		// 					Description: to.Ptr("Shows the number of pages per disk file."),
		// 					AllowedValues: to.Ptr("131072-131072"),
		// 					DataType: to.Ptr(armpostgresql.ConfigurationDataTypeInteger),
		// 					DefaultValue: to.Ptr("131072"),
		// 					DocumentationLink: to.Ptr("https://www.postgresql.org/docs/13/runtime-config-preset.html#GUC-SEGMENT-SIZE"),
		// 					IsConfigPendingRestart: to.Ptr(false),
		// 					IsDynamicConfig: to.Ptr(true),
		// 					IsReadOnly: to.Ptr(true),
		// 					Source: to.Ptr("system-default"),
		// 					Unit: to.Ptr("8KB"),
		// 					Value: to.Ptr("131072"),
		// 				},
		// 			},
		// 			{
		// 				Name: to.Ptr("seq_page_cost"),
		// 				Type: to.Ptr("Microsoft.DBforPostgreSQL/flexibleServers/configurations"),
		// 				ID: to.Ptr("/subscriptions/ffffffff-ffff-ffff-ffff-ffffffffffff/resourceGroups/exampleresourcegroup/providers/Microsoft.DBforPostgreSQL/flexibleServers/exampleserver/configurations/seq_page_cost"),
		// 				Properties: &armpostgresql.ConfigurationProperties{
		// 					Description: to.Ptr("Sets the planner's estimate of the cost of a sequentially fetched disk page."),
		// 					AllowedValues: to.Ptr("0-1.79769e+308"),
		// 					DataType: to.Ptr(armpostgresql.ConfigurationDataTypeNumeric),
		// 					DefaultValue: to.Ptr("1"),
		// 					DocumentationLink: to.Ptr("https://www.postgresql.org/docs/13/runtime-config-query.html#GUC-SEQ-PAGE-COST"),
		// 					IsConfigPendingRestart: to.Ptr(false),
		// 					IsDynamicConfig: to.Ptr(true),
		// 					IsReadOnly: to.Ptr(false),
		// 					Source: to.Ptr("system-default"),
		// 					Value: to.Ptr("1"),
		// 				},
		// 			},
		// 			{
		// 				Name: to.Ptr("server_encoding"),
		// 				Type: to.Ptr("Microsoft.DBforPostgreSQL/flexibleServers/configurations"),
		// 				ID: to.Ptr("/subscriptions/ffffffff-ffff-ffff-ffff-ffffffffffff/resourceGroups/exampleresourcegroup/providers/Microsoft.DBforPostgreSQL/flexibleServers/exampleserver/configurations/server_encoding"),
		// 				Properties: &armpostgresql.ConfigurationProperties{
		// 					Description: to.Ptr("Sets the server (database) character set encoding."),
		// 					AllowedValues: to.Ptr(".*"),
		// 					DataType: to.Ptr(armpostgresql.ConfigurationDataTypeString),
		// 					DefaultValue: to.Ptr("SQL_ASCII"),
		// 					DocumentationLink: to.Ptr("https://www.postgresql.org/docs/13/runtime-config-preset.html#GUC-SERVER-ENCODING"),
		// 					IsConfigPendingRestart: to.Ptr(false),
		// 					IsDynamicConfig: to.Ptr(true),
		// 					IsReadOnly: to.Ptr(true),
		// 					Source: to.Ptr("user-override"),
		// 					Value: to.Ptr("UTF8"),
		// 				},
		// 			},
		// 			{
		// 				Name: to.Ptr("server_version"),
		// 				Type: to.Ptr("Microsoft.DBforPostgreSQL/flexibleServers/configurations"),
		// 				ID: to.Ptr("/subscriptions/ffffffff-ffff-ffff-ffff-ffffffffffff/resourceGroups/exampleresourcegroup/providers/Microsoft.DBforPostgreSQL/flexibleServers/exampleserver/configurations/server_version"),
		// 				Properties: &armpostgresql.ConfigurationProperties{
		// 					Description: to.Ptr("Shows the server version."),
		// 					AllowedValues: to.Ptr(".*"),
		// 					DataType: to.Ptr(armpostgresql.ConfigurationDataTypeString),
		// 					DefaultValue: to.Ptr("13.11"),
		// 					DocumentationLink: to.Ptr("https://www.postgresql.org/docs/13/runtime-config-preset.html#GUC-SERVER-VERSION"),
		// 					IsConfigPendingRestart: to.Ptr(false),
		// 					IsDynamicConfig: to.Ptr(true),
		// 					IsReadOnly: to.Ptr(true),
		// 					Source: to.Ptr("user-override"),
		// 					Value: to.Ptr("13.16"),
		// 				},
		// 			},
		// 			{
		// 				Name: to.Ptr("server_version_num"),
		// 				Type: to.Ptr("Microsoft.DBforPostgreSQL/flexibleServers/configurations"),
		// 				ID: to.Ptr("/subscriptions/ffffffff-ffff-ffff-ffff-ffffffffffff/resourceGroups/exampleresourcegroup/providers/Microsoft.DBforPostgreSQL/flexibleServers/exampleserver/configurations/server_version_num"),
		// 				Properties: &armpostgresql.ConfigurationProperties{
		// 					Description: to.Ptr("Shows the server version as an integer."),
		// 					AllowedValues: to.Ptr("130011-130011"),
		// 					DataType: to.Ptr(armpostgresql.ConfigurationDataTypeInteger),
		// 					DefaultValue: to.Ptr("130011"),
		// 					DocumentationLink: to.Ptr("https://www.postgresql.org/docs/13/runtime-config-preset.html#GUC-SERVER-VERSION-NUM"),
		// 					IsConfigPendingRestart: to.Ptr(false),
		// 					IsDynamicConfig: to.Ptr(true),
		// 					IsReadOnly: to.Ptr(true),
		// 					Source: to.Ptr("user-override"),
		// 					Value: to.Ptr("130016"),
		// 				},
		// 			},
		// 			{
		// 				Name: to.Ptr("session_preload_libraries"),
		// 				Type: to.Ptr("Microsoft.DBforPostgreSQL/flexibleServers/configurations"),
		// 				ID: to.Ptr("/subscriptions/ffffffff-ffff-ffff-ffff-ffffffffffff/resourceGroups/exampleresourcegroup/providers/Microsoft.DBforPostgreSQL/flexibleServers/exampleserver/configurations/session_preload_libraries"),
		// 				Properties: &armpostgresql.ConfigurationProperties{
		// 					Description: to.Ptr("Lists shared libraries to preload into each backend."),
		// 					AllowedValues: to.Ptr(",login_hook"),
		// 					DataType: to.Ptr(armpostgresql.ConfigurationDataTypeSet),
		// 					DefaultValue: to.Ptr(""),
		// 					DocumentationLink: to.Ptr("https://www.postgresql.org/docs/13/runtime-config-client.html#GUC-SESSION-PRELOAD-LIBRARIES"),
		// 					IsConfigPendingRestart: to.Ptr(false),
		// 					IsDynamicConfig: to.Ptr(true),
		// 					IsReadOnly: to.Ptr(false),
		// 					Source: to.Ptr("system-default"),
		// 					Value: to.Ptr(""),
		// 				},
		// 			},
		// 			{
		// 				Name: to.Ptr("session_replication_role"),
		// 				Type: to.Ptr("Microsoft.DBforPostgreSQL/flexibleServers/configurations"),
		// 				ID: to.Ptr("/subscriptions/ffffffff-ffff-ffff-ffff-ffffffffffff/resourceGroups/exampleresourcegroup/providers/Microsoft.DBforPostgreSQL/flexibleServers/exampleserver/configurations/session_replication_role"),
		// 				Properties: &armpostgresql.ConfigurationProperties{
		// 					Description: to.Ptr("Controls firing of replication-related triggers and rules for the current session."),
		// 					AllowedValues: to.Ptr("origin,replica,local"),
		// 					DataType: to.Ptr(armpostgresql.ConfigurationDataTypeEnumeration),
		// 					DefaultValue: to.Ptr("origin"),
		// 					DocumentationLink: to.Ptr("https://www.postgresql.org/docs/13/runtime-config-client.html#GUC-SESSION-REPLICATION-ROLE"),
		// 					IsConfigPendingRestart: to.Ptr(false),
		// 					IsDynamicConfig: to.Ptr(true),
		// 					IsReadOnly: to.Ptr(false),
		// 					Source: to.Ptr("system-default"),
		// 					Value: to.Ptr("origin"),
		// 				},
		// 			},
		// 			{
		// 				Name: to.Ptr("shared_buffers"),
		// 				Type: to.Ptr("Microsoft.DBforPostgreSQL/flexibleServers/configurations"),
		// 				ID: to.Ptr("/subscriptions/ffffffff-ffff-ffff-ffff-ffffffffffff/resourceGroups/exampleresourcegroup/providers/Microsoft.DBforPostgreSQL/flexibleServers/exampleserver/configurations/shared_buffers"),
		// 				Properties: &armpostgresql.ConfigurationProperties{
		// 					Description: to.Ptr("Sets the number of shared memory buffers used by the server. Unit is 8kb. Allowed values are inside the range of 10% - 75% of available memory."),
		// 					AllowedValues: to.Ptr("16-1073741823"),
		// 					DataType: to.Ptr(armpostgresql.ConfigurationDataTypeInteger),
		// 					DefaultValue: to.Ptr("524288"),
		// 					DocumentationLink: to.Ptr("https://www.postgresql.org/docs/13/runtime-config-resource.html#GUC-SHARED-BUFFERS"),
		// 					IsConfigPendingRestart: to.Ptr(false),
		// 					IsDynamicConfig: to.Ptr(false),
		// 					IsReadOnly: to.Ptr(false),
		// 					Source: to.Ptr("system-default"),
		// 					Unit: to.Ptr("8KB"),
		// 					Value: to.Ptr("524288"),
		// 				},
		// 			},
		// 			{
		// 				Name: to.Ptr("shared_memory_type"),
		// 				Type: to.Ptr("Microsoft.DBforPostgreSQL/flexibleServers/configurations"),
		// 				ID: to.Ptr("/subscriptions/ffffffff-ffff-ffff-ffff-ffffffffffff/resourceGroups/exampleresourcegroup/providers/Microsoft.DBforPostgreSQL/flexibleServers/exampleserver/configurations/shared_memory_type"),
		// 				Properties: &armpostgresql.ConfigurationProperties{
		// 					Description: to.Ptr("Selects the shared memory implementation used for the main shared memory region."),
		// 					AllowedValues: to.Ptr("sysv,mmap"),
		// 					DataType: to.Ptr(armpostgresql.ConfigurationDataTypeEnumeration),
		// 					DefaultValue: to.Ptr("mmap"),
		// 					DocumentationLink: to.Ptr("https://www.postgresql.org/docs/13/runtime-config-resource.html#GUC-SHARED-MEMORY-TYPE"),
		// 					IsConfigPendingRestart: to.Ptr(false),
		// 					IsDynamicConfig: to.Ptr(false),
		// 					IsReadOnly: to.Ptr(true),
		// 					Source: to.Ptr("system-default"),
		// 					Value: to.Ptr("mmap"),
		// 				},
		// 			},
		// 			{
		// 				Name: to.Ptr("shared_preload_libraries"),
		// 				Type: to.Ptr("Microsoft.DBforPostgreSQL/flexibleServers/configurations"),
		// 				ID: to.Ptr("/subscriptions/ffffffff-ffff-ffff-ffff-ffffffffffff/resourceGroups/exampleresourcegroup/providers/Microsoft.DBforPostgreSQL/flexibleServers/exampleserver/configurations/shared_preload_libraries"),
		// 				Properties: &armpostgresql.ConfigurationProperties{
		// 					Description: to.Ptr("Sets which shared libraries are preloaded at server start."),
		// 					AllowedValues: to.Ptr(",age,anon,auto_explain,azure_storage,pg_cron,pg_failover_slots,pg_hint_plan,pg_partman_bgw,pg_prewarm,pg_squeeze,pg_stat_statements,pgaudit,pglogical,timescaledb,wal2json"),
		// 					DataType: to.Ptr(armpostgresql.ConfigurationDataTypeSet),
		// 					DefaultValue: to.Ptr("pg_cron,pg_stat_statements"),
		// 					DocumentationLink: to.Ptr("https://www.postgresql.org/docs/13/runtime-config-client.html#GUC-SHARED-PRELOAD-LIBRARIES"),
		// 					IsConfigPendingRestart: to.Ptr(false),
		// 					IsDynamicConfig: to.Ptr(false),
		// 					IsReadOnly: to.Ptr(false),
		// 					Source: to.Ptr("system-default"),
		// 					Value: to.Ptr("pg_cron,pg_stat_statements"),
		// 				},
		// 			},
		// 			{
		// 				Name: to.Ptr("ssl"),
		// 				Type: to.Ptr("Microsoft.DBforPostgreSQL/flexibleServers/configurations"),
		// 				ID: to.Ptr("/subscriptions/ffffffff-ffff-ffff-ffff-ffffffffffff/resourceGroups/exampleresourcegroup/providers/Microsoft.DBforPostgreSQL/flexibleServers/exampleserver/configurations/ssl"),
		// 				Properties: &armpostgresql.ConfigurationProperties{
		// 					Description: to.Ptr("Enables SSL connections."),
		// 					AllowedValues: to.Ptr("on,off"),
		// 					DataType: to.Ptr(armpostgresql.ConfigurationDataTypeBoolean),
		// 					DefaultValue: to.Ptr("off"),
		// 					DocumentationLink: to.Ptr("https://www.postgresql.org/docs/13/runtime-config-connection.html#GUC-SSL"),
		// 					IsConfigPendingRestart: to.Ptr(false),
		// 					IsDynamicConfig: to.Ptr(true),
		// 					IsReadOnly: to.Ptr(true),
		// 					Source: to.Ptr("user-override"),
		// 					Value: to.Ptr("on"),
		// 				},
		// 			},
		// 			{
		// 				Name: to.Ptr("ssl_ca_file"),
		// 				Type: to.Ptr("Microsoft.DBforPostgreSQL/flexibleServers/configurations"),
		// 				ID: to.Ptr("/subscriptions/ffffffff-ffff-ffff-ffff-ffffffffffff/resourceGroups/exampleresourcegroup/providers/Microsoft.DBforPostgreSQL/flexibleServers/exampleserver/configurations/ssl_ca_file"),
		// 				Properties: &armpostgresql.ConfigurationProperties{
		// 					Description: to.Ptr("Location of the SSL certificate authority file."),
		// 					AllowedValues: to.Ptr(".*"),
		// 					DataType: to.Ptr(armpostgresql.ConfigurationDataTypeString),
		// 					DefaultValue: to.Ptr(""),
		// 					DocumentationLink: to.Ptr("https://www.postgresql.org/docs/13/runtime-config-connection.html#GUC-SSL-CA-FILE"),
		// 					IsConfigPendingRestart: to.Ptr(false),
		// 					IsDynamicConfig: to.Ptr(true),
		// 					IsReadOnly: to.Ptr(true),
		// 					Source: to.Ptr("user-override"),
		// 					Value: to.Ptr("/datadrive/certs/ca.pem"),
		// 				},
		// 			},
		// 			{
		// 				Name: to.Ptr("ssl_cert_file"),
		// 				Type: to.Ptr("Microsoft.DBforPostgreSQL/flexibleServers/configurations"),
		// 				ID: to.Ptr("/subscriptions/ffffffff-ffff-ffff-ffff-ffffffffffff/resourceGroups/exampleresourcegroup/providers/Microsoft.DBforPostgreSQL/flexibleServers/exampleserver/configurations/ssl_cert_file"),
		// 				Properties: &armpostgresql.ConfigurationProperties{
		// 					Description: to.Ptr("Location of the SSL server certificate file."),
		// 					AllowedValues: to.Ptr(".*"),
		// 					DataType: to.Ptr(armpostgresql.ConfigurationDataTypeString),
		// 					DefaultValue: to.Ptr("server.crt"),
		// 					DocumentationLink: to.Ptr("https://www.postgresql.org/docs/13/runtime-config-connection.html#GUC-SSL-CERT-FILE"),
		// 					IsConfigPendingRestart: to.Ptr(false),
		// 					IsDynamicConfig: to.Ptr(true),
		// 					IsReadOnly: to.Ptr(true),
		// 					Source: to.Ptr("user-override"),
		// 					Value: to.Ptr("/datadrive/certs/cert.pem"),
		// 				},
		// 			},
		// 			{
		// 				Name: to.Ptr("ssl_ciphers"),
		// 				Type: to.Ptr("Microsoft.DBforPostgreSQL/flexibleServers/configurations"),
		// 				ID: to.Ptr("/subscriptions/ffffffff-ffff-ffff-ffff-ffffffffffff/resourceGroups/exampleresourcegroup/providers/Microsoft.DBforPostgreSQL/flexibleServers/exampleserver/configurations/ssl_ciphers"),
		// 				Properties: &armpostgresql.ConfigurationProperties{
		// 					Description: to.Ptr("Sets the list of allowed SSL ciphers."),
		// 					AllowedValues: to.Ptr(".*"),
		// 					DataType: to.Ptr(armpostgresql.ConfigurationDataTypeString),
		// 					DefaultValue: to.Ptr("HIGH:MEDIUM:+3DES:!aNULL"),
		// 					DocumentationLink: to.Ptr("https://www.postgresql.org/docs/13/runtime-config-connection.html#GUC-SSL-CIPHERS"),
		// 					IsConfigPendingRestart: to.Ptr(false),
		// 					IsDynamicConfig: to.Ptr(true),
		// 					IsReadOnly: to.Ptr(true),
		// 					Source: to.Ptr("user-override"),
		// 					Value: to.Ptr("ECDHE-ECDSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-CHACHA20-POLY1305:ECDHE-RSA-CHACHA20-POLY1305:ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-GCM-SHA256"),
		// 				},
		// 			},
		// 			{
		// 				Name: to.Ptr("ssl_crl_file"),
		// 				Type: to.Ptr("Microsoft.DBforPostgreSQL/flexibleServers/configurations"),
		// 				ID: to.Ptr("/subscriptions/ffffffff-ffff-ffff-ffff-ffffffffffff/resourceGroups/exampleresourcegroup/providers/Microsoft.DBforPostgreSQL/flexibleServers/exampleserver/configurations/ssl_crl_file"),
		// 				Properties: &armpostgresql.ConfigurationProperties{
		// 					Description: to.Ptr("Location of the SSL certificate revocation list file."),
		// 					AllowedValues: to.Ptr(".*"),
		// 					DataType: to.Ptr(armpostgresql.ConfigurationDataTypeString),
		// 					DefaultValue: to.Ptr(""),
		// 					DocumentationLink: to.Ptr("https://www.postgresql.org/docs/13/runtime-config-connection.html#GUC-SSL-CRL-FILE"),
		// 					IsConfigPendingRestart: to.Ptr(false),
		// 					IsDynamicConfig: to.Ptr(true),
		// 					IsReadOnly: to.Ptr(true),
		// 					Source: to.Ptr("system-default"),
		// 					Value: to.Ptr(""),
		// 				},
		// 			},
		// 			{
		// 				Name: to.Ptr("ssl_dh_params_file"),
		// 				Type: to.Ptr("Microsoft.DBforPostgreSQL/flexibleServers/configurations"),
		// 				ID: to.Ptr("/subscriptions/ffffffff-ffff-ffff-ffff-ffffffffffff/resourceGroups/exampleresourcegroup/providers/Microsoft.DBforPostgreSQL/flexibleServers/exampleserver/configurations/ssl_dh_params_file"),
		// 				Properties: &armpostgresql.ConfigurationProperties{
		// 					Description: to.Ptr("Location of the SSL DH parameters file."),
		// 					AllowedValues: to.Ptr(".*"),
		// 					DataType: to.Ptr(armpostgresql.ConfigurationDataTypeString),
		// 					DefaultValue: to.Ptr(""),
		// 					DocumentationLink: to.Ptr("https://www.postgresql.org/docs/13/runtime-config-connection.html#GUC-SSL-DH-PARAMS-FILE"),
		// 					IsConfigPendingRestart: to.Ptr(false),
		// 					IsDynamicConfig: to.Ptr(true),
		// 					IsReadOnly: to.Ptr(true),
		// 					Source: to.Ptr("system-default"),
		// 					Value: to.Ptr(""),
		// 				},
		// 			},
		// 			{
		// 				Name: to.Ptr("ssl_ecdh_curve"),
		// 				Type: to.Ptr("Microsoft.DBforPostgreSQL/flexibleServers/configurations"),
		// 				ID: to.Ptr("/subscriptions/ffffffff-ffff-ffff-ffff-ffffffffffff/resourceGroups/exampleresourcegroup/providers/Microsoft.DBforPostgreSQL/flexibleServers/exampleserver/configurations/ssl_ecdh_curve"),
		// 				Properties: &armpostgresql.ConfigurationProperties{
		// 					Description: to.Ptr("Sets the curve to use for ECDH."),
		// 					AllowedValues: to.Ptr(".*"),
		// 					DataType: to.Ptr(armpostgresql.ConfigurationDataTypeString),
		// 					DefaultValue: to.Ptr("prime256v1"),
		// 					DocumentationLink: to.Ptr("https://www.postgresql.org/docs/13/runtime-config-connection.html#GUC-SSL-ECDH-CURVE"),
		// 					IsConfigPendingRestart: to.Ptr(false),
		// 					IsDynamicConfig: to.Ptr(true),
		// 					IsReadOnly: to.Ptr(true),
		// 					Source: to.Ptr("system-default"),
		// 					Value: to.Ptr("prime256v1"),
		// 				},
		// 			},
		// 			{
		// 				Name: to.Ptr("ssl_key_file"),
		// 				Type: to.Ptr("Microsoft.DBforPostgreSQL/flexibleServers/configurations"),
		// 				ID: to.Ptr("/subscriptions/ffffffff-ffff-ffff-ffff-ffffffffffff/resourceGroups/exampleresourcegroup/providers/Microsoft.DBforPostgreSQL/flexibleServers/exampleserver/configurations/ssl_key_file"),
		// 				Properties: &armpostgresql.ConfigurationProperties{
		// 					Description: to.Ptr("Location of the SSL server private key file."),
		// 					AllowedValues: to.Ptr(".*"),
		// 					DataType: to.Ptr(armpostgresql.ConfigurationDataTypeString),
		// 					DefaultValue: to.Ptr("server.key"),
		// 					DocumentationLink: to.Ptr("https://www.postgresql.org/docs/13/runtime-config-connection.html#GUC-SSL-KEY-FILE"),
		// 					IsConfigPendingRestart: to.Ptr(false),
		// 					IsDynamicConfig: to.Ptr(true),
		// 					IsReadOnly: to.Ptr(true),
		// 					Source: to.Ptr("user-override"),
		// 					Value: to.Ptr("/datadrive/certs/key.pem"),
		// 				},
		// 			},
		// 			{
		// 				Name: to.Ptr("ssl_library"),
		// 				Type: to.Ptr("Microsoft.DBforPostgreSQL/flexibleServers/configurations"),
		// 				ID: to.Ptr("/subscriptions/ffffffff-ffff-ffff-ffff-ffffffffffff/resourceGroups/exampleresourcegroup/providers/Microsoft.DBforPostgreSQL/flexibleServers/exampleserver/configurations/ssl_library"),
		// 				Properties: &armpostgresql.ConfigurationProperties{
		// 					Description: to.Ptr("Name of the SSL library."),
		// 					AllowedValues: to.Ptr(".*"),
		// 					DataType: to.Ptr(armpostgresql.ConfigurationDataTypeString),
		// 					DefaultValue: to.Ptr("OpenSSL"),
		// 					DocumentationLink: to.Ptr("https://www.postgresql.org/docs/13/runtime-config-preset.html#GUC-SSL-LIBRARY"),
		// 					IsConfigPendingRestart: to.Ptr(false),
		// 					IsDynamicConfig: to.Ptr(true),
		// 					IsReadOnly: to.Ptr(true),
		// 					Source: to.Ptr("system-default"),
		// 					Value: to.Ptr("OpenSSL"),
		// 				},
		// 			},
		// 			{
		// 				Name: to.Ptr("ssl_max_protocol_version"),
		// 				Type: to.Ptr("Microsoft.DBforPostgreSQL/flexibleServers/configurations"),
		// 				ID: to.Ptr("/subscriptions/ffffffff-ffff-ffff-ffff-ffffffffffff/resourceGroups/exampleresourcegroup/providers/Microsoft.DBforPostgreSQL/flexibleServers/exampleserver/configurations/ssl_max_protocol_version"),
		// 				Properties: &armpostgresql.ConfigurationProperties{
		// 					Description: to.Ptr("Sets the maximum SSL/TLS protocol version to use."),
		// 					AllowedValues: to.Ptr(",TLSv1.2,TLSv1.3"),
		// 					DataType: to.Ptr(armpostgresql.ConfigurationDataTypeEnumeration),
		// 					DefaultValue: to.Ptr(""),
		// 					DocumentationLink: to.Ptr("https://www.postgresql.org/docs/13/runtime-config-connection.html#GUC-SSL-MAX-PROTOCOL-VERSION"),
		// 					IsConfigPendingRestart: to.Ptr(false),
		// 					IsDynamicConfig: to.Ptr(true),
		// 					IsReadOnly: to.Ptr(false),
		// 					Source: to.Ptr("system-default"),
		// 					Value: to.Ptr(""),
		// 				},
		// 			},
		// 			{
		// 				Name: to.Ptr("ssl_min_protocol_version"),
		// 				Type: to.Ptr("Microsoft.DBforPostgreSQL/flexibleServers/configurations"),
		// 				ID: to.Ptr("/subscriptions/ffffffff-ffff-ffff-ffff-ffffffffffff/resourceGroups/exampleresourcegroup/providers/Microsoft.DBforPostgreSQL/flexibleServers/exampleserver/configurations/ssl_min_protocol_version"),
		// 				Properties: &armpostgresql.ConfigurationProperties{
		// 					Description: to.Ptr("Sets the minimum SSL/TLS protocol version to use."),
		// 					AllowedValues: to.Ptr("TLSv1.2,TLSv1.3"),
		// 					DataType: to.Ptr(armpostgresql.ConfigurationDataTypeEnumeration),
		// 					DefaultValue: to.Ptr("TLSv1.2"),
		// 					DocumentationLink: to.Ptr("https://www.postgresql.org/docs/13/runtime-config-connection.html#GUC-SSL-MIN-PROTOCOL-VERSION"),
		// 					IsConfigPendingRestart: to.Ptr(false),
		// 					IsDynamicConfig: to.Ptr(true),
		// 					IsReadOnly: to.Ptr(false),
		// 					Source: to.Ptr("system-default"),
		// 					Value: to.Ptr("TLSv1.2"),
		// 				},
		// 			},
		// 			{
		// 				Name: to.Ptr("ssl_passphrase_command"),
		// 				Type: to.Ptr("Microsoft.DBforPostgreSQL/flexibleServers/configurations"),
		// 				ID: to.Ptr("/subscriptions/ffffffff-ffff-ffff-ffff-ffffffffffff/resourceGroups/exampleresourcegroup/providers/Microsoft.DBforPostgreSQL/flexibleServers/exampleserver/configurations/ssl_passphrase_command"),
		// 				Properties: &armpostgresql.ConfigurationProperties{
		// 					Description: to.Ptr("Command to obtain passphrases for SSL."),
		// 					AllowedValues: to.Ptr(".*"),
		// 					DataType: to.Ptr(armpostgresql.ConfigurationDataTypeString),
		// 					DefaultValue: to.Ptr(""),
		// 					DocumentationLink: to.Ptr("https://www.postgresql.org/docs/13/runtime-config-connection.html#GUC-SSL-PASSPHRASE-COMMAND"),
		// 					IsConfigPendingRestart: to.Ptr(false),
		// 					IsDynamicConfig: to.Ptr(true),
		// 					IsReadOnly: to.Ptr(true),
		// 					Source: to.Ptr("system-default"),
		// 					Value: to.Ptr(""),
		// 				},
		// 			},
		// 			{
		// 				Name: to.Ptr("ssl_passphrase_command_supports_reload"),
		// 				Type: to.Ptr("Microsoft.DBforPostgreSQL/flexibleServers/configurations"),
		// 				ID: to.Ptr("/subscriptions/ffffffff-ffff-ffff-ffff-ffffffffffff/resourceGroups/exampleresourcegroup/providers/Microsoft.DBforPostgreSQL/flexibleServers/exampleserver/configurations/ssl_passphrase_command_supports_reload"),
		// 				Properties: &armpostgresql.ConfigurationProperties{
		// 					Description: to.Ptr("Also use ssl_passphrase_command during server reload."),
		// 					AllowedValues: to.Ptr("on,off"),
		// 					DataType: to.Ptr(armpostgresql.ConfigurationDataTypeBoolean),
		// 					DefaultValue: to.Ptr("off"),
		// 					DocumentationLink: to.Ptr("https://www.postgresql.org/docs/13/runtime-config-connection.html#GUC-SSL-PASSPHRASE-COMMAND-SUPPORTS-RELOAD"),
		// 					IsConfigPendingRestart: to.Ptr(false),
		// 					IsDynamicConfig: to.Ptr(true),
		// 					IsReadOnly: to.Ptr(true),
		// 					Source: to.Ptr("system-default"),
		// 					Value: to.Ptr("off"),
		// 				},
		// 			},
		// 			{
		// 				Name: to.Ptr("ssl_prefer_server_ciphers"),
		// 				Type: to.Ptr("Microsoft.DBforPostgreSQL/flexibleServers/configurations"),
		// 				ID: to.Ptr("/subscriptions/ffffffff-ffff-ffff-ffff-ffffffffffff/resourceGroups/exampleresourcegroup/providers/Microsoft.DBforPostgreSQL/flexibleServers/exampleserver/configurations/ssl_prefer_server_ciphers"),
		// 				Properties: &armpostgresql.ConfigurationProperties{
		// 					Description: to.Ptr("Give priority to server ciphersuite order."),
		// 					AllowedValues: to.Ptr("on,off"),
		// 					DataType: to.Ptr(armpostgresql.ConfigurationDataTypeBoolean),
		// 					DefaultValue: to.Ptr("on"),
		// 					DocumentationLink: to.Ptr("https://www.postgresql.org/docs/13/runtime-config-connection.html#GUC-SSL-PREFER-SERVER-CIPHERS"),
		// 					IsConfigPendingRestart: to.Ptr(false),
		// 					IsDynamicConfig: to.Ptr(true),
		// 					IsReadOnly: to.Ptr(true),
		// 					Source: to.Ptr("system-default"),
		// 					Value: to.Ptr("on"),
		// 				},
		// 			},
		// 			{
		// 				Name: to.Ptr("standard_conforming_strings"),
		// 				Type: to.Ptr("Microsoft.DBforPostgreSQL/flexibleServers/configurations"),
		// 				ID: to.Ptr("/subscriptions/ffffffff-ffff-ffff-ffff-ffffffffffff/resourceGroups/exampleresourcegroup/providers/Microsoft.DBforPostgreSQL/flexibleServers/exampleserver/configurations/standard_conforming_strings"),
		// 				Properties: &armpostgresql.ConfigurationProperties{
		// 					Description: to.Ptr("Causes '...' strings to treat backslashes literally."),
		// 					AllowedValues: to.Ptr("on,off"),
		// 					DataType: to.Ptr(armpostgresql.ConfigurationDataTypeBoolean),
		// 					DefaultValue: to.Ptr("on"),
		// 					DocumentationLink: to.Ptr("https://www.postgresql.org/docs/13/runtime-config-compatible.html#GUC-STANDARD-CONFORMING-STRINGS"),
		// 					IsConfigPendingRestart: to.Ptr(false),
		// 					IsDynamicConfig: to.Ptr(true),
		// 					IsReadOnly: to.Ptr(false),
		// 					Source: to.Ptr("system-default"),
		// 					Value: to.Ptr("on"),
		// 				},
		// 			},
		// 			{
		// 				Name: to.Ptr("statement_timeout"),
		// 				Type: to.Ptr("Microsoft.DBforPostgreSQL/flexibleServers/configurations"),
		// 				ID: to.Ptr("/subscriptions/ffffffff-ffff-ffff-ffff-ffffffffffff/resourceGroups/exampleresourcegroup/providers/Microsoft.DBforPostgreSQL/flexibleServers/exampleserver/configurations/statement_timeout"),
		// 				Properties: &armpostgresql.ConfigurationProperties{
		// 					Description: to.Ptr("Sets the maximum allowed duration (in milliseconds) of any statement. 0 turns this off."),
		// 					AllowedValues: to.Ptr("0-2147483647"),
		// 					DataType: to.Ptr(armpostgresql.ConfigurationDataTypeInteger),
		// 					DefaultValue: to.Ptr("0"),
		// 					DocumentationLink: to.Ptr("https://www.postgresql.org/docs/13/runtime-config-client.html#GUC-STATEMENT-TIMEOUT"),
		// 					IsConfigPendingRestart: to.Ptr(false),
		// 					IsDynamicConfig: to.Ptr(true),
		// 					IsReadOnly: to.Ptr(false),
		// 					Source: to.Ptr("system-default"),
		// 					Unit: to.Ptr("milliseconds"),
		// 					Value: to.Ptr("0"),
		// 				},
		// 			},
		// 			{
		// 				Name: to.Ptr("stats_temp_directory"),
		// 				Type: to.Ptr("Microsoft.DBforPostgreSQL/flexibleServers/configurations"),
		// 				ID: to.Ptr("/subscriptions/ffffffff-ffff-ffff-ffff-ffffffffffff/resourceGroups/exampleresourcegroup/providers/Microsoft.DBforPostgreSQL/flexibleServers/exampleserver/configurations/stats_temp_directory"),
		// 				Properties: &armpostgresql.ConfigurationProperties{
		// 					Description: to.Ptr("Writes temporary statistics files to the specified directory."),
		// 					AllowedValues: to.Ptr(".*"),
		// 					DataType: to.Ptr(armpostgresql.ConfigurationDataTypeString),
		// 					DefaultValue: to.Ptr("pg_stat_tmp"),
		// 					DocumentationLink: to.Ptr("https://www.postgresql.org/docs/13/runtime-config-statistics.html#GUC-STATS-TEMP-DIRECTORY"),
		// 					IsConfigPendingRestart: to.Ptr(false),
		// 					IsDynamicConfig: to.Ptr(true),
		// 					IsReadOnly: to.Ptr(true),
		// 					Source: to.Ptr("system-default"),
		// 					Value: to.Ptr("pg_stat_tmp"),
		// 				},
		// 			},
		// 			{
		// 				Name: to.Ptr("superuser_reserved_connections"),
		// 				Type: to.Ptr("Microsoft.DBforPostgreSQL/flexibleServers/configurations"),
		// 				ID: to.Ptr("/subscriptions/ffffffff-ffff-ffff-ffff-ffffffffffff/resourceGroups/exampleresourcegroup/providers/Microsoft.DBforPostgreSQL/flexibleServers/exampleserver/configurations/superuser_reserved_connections"),
		// 				Properties: &armpostgresql.ConfigurationProperties{
		// 					Description: to.Ptr("Sets the number of connection slots reserved for superusers."),
		// 					AllowedValues: to.Ptr("0-262143"),
		// 					DataType: to.Ptr(armpostgresql.ConfigurationDataTypeInteger),
		// 					DefaultValue: to.Ptr("10"),
		// 					DocumentationLink: to.Ptr("https://www.postgresql.org/docs/13/runtime-config-connection.html#GUC-SUPERUSER-RESERVED-CONNECTIONS"),
		// 					IsConfigPendingRestart: to.Ptr(false),
		// 					IsDynamicConfig: to.Ptr(false),
		// 					IsReadOnly: to.Ptr(true),
		// 					Source: to.Ptr("system-default"),
		// 					Value: to.Ptr("10"),
		// 				},
		// 			},
		// 			{
		// 				Name: to.Ptr("synchronize_seqscans"),
		// 				Type: to.Ptr("Microsoft.DBforPostgreSQL/flexibleServers/configurations"),
		// 				ID: to.Ptr("/subscriptions/ffffffff-ffff-ffff-ffff-ffffffffffff/resourceGroups/exampleresourcegroup/providers/Microsoft.DBforPostgreSQL/flexibleServers/exampleserver/configurations/synchronize_seqscans"),
		// 				Properties: &armpostgresql.ConfigurationProperties{
		// 					Description: to.Ptr("Enables synchronized sequential scans."),
		// 					AllowedValues: to.Ptr("on,off"),
		// 					DataType: to.Ptr(armpostgresql.ConfigurationDataTypeBoolean),
		// 					DefaultValue: to.Ptr("on"),
		// 					DocumentationLink: to.Ptr("https://www.postgresql.org/docs/13/runtime-config-compatible.html#GUC-SYNCHRONIZE-SEQSCANS"),
		// 					IsConfigPendingRestart: to.Ptr(false),
		// 					IsDynamicConfig: to.Ptr(true),
		// 					IsReadOnly: to.Ptr(false),
		// 					Source: to.Ptr("system-default"),
		// 					Value: to.Ptr("on"),
		// 				},
		// 			},
		// 			{
		// 				Name: to.Ptr("synchronous_commit"),
		// 				Type: to.Ptr("Microsoft.DBforPostgreSQL/flexibleServers/configurations"),
		// 				ID: to.Ptr("/subscriptions/ffffffff-ffff-ffff-ffff-ffffffffffff/resourceGroups/exampleresourcegroup/providers/Microsoft.DBforPostgreSQL/flexibleServers/exampleserver/configurations/synchronous_commit"),
		// 				Properties: &armpostgresql.ConfigurationProperties{
		// 					Description: to.Ptr("Sets the current transaction's synchronization level."),
		// 					AllowedValues: to.Ptr("local,remote_write,on,off"),
		// 					DataType: to.Ptr(armpostgresql.ConfigurationDataTypeEnumeration),
		// 					DefaultValue: to.Ptr("on"),
		// 					DocumentationLink: to.Ptr("https://www.postgresql.org/docs/13/runtime-config-wal.html#GUC-SYNCHRONOUS-COMMIT"),
		// 					IsConfigPendingRestart: to.Ptr(false),
		// 					IsDynamicConfig: to.Ptr(true),
		// 					IsReadOnly: to.Ptr(true),
		// 					Source: to.Ptr("system-default"),
		// 					Value: to.Ptr("on"),
		// 				},
		// 			},
		// 			{
		// 				Name: to.Ptr("synchronous_standby_names"),
		// 				Type: to.Ptr("Microsoft.DBforPostgreSQL/flexibleServers/configurations"),
		// 				ID: to.Ptr("/subscriptions/ffffffff-ffff-ffff-ffff-ffffffffffff/resourceGroups/exampleresourcegroup/providers/Microsoft.DBforPostgreSQL/flexibleServers/exampleserver/configurations/synchronous_standby_names"),
		// 				Properties: &armpostgresql.ConfigurationProperties{
		// 					Description: to.Ptr("Number of synchronous standbys and list of names of potential synchronous ones."),
		// 					AllowedValues: to.Ptr(".*"),
		// 					DataType: to.Ptr(armpostgresql.ConfigurationDataTypeString),
		// 					DefaultValue: to.Ptr(""),
		// 					DocumentationLink: to.Ptr("https://www.postgresql.org/docs/13/runtime-config-replication.html#GUC-SYNCHRONOUS-STANDBY-NAMES"),
		// 					IsConfigPendingRestart: to.Ptr(false),
		// 					IsDynamicConfig: to.Ptr(true),
		// 					IsReadOnly: to.Ptr(true),
		// 					Source: to.Ptr("system-default"),
		// 					Value: to.Ptr(""),
		// 				},
		// 			},
		// 			{
		// 				Name: to.Ptr("syslog_facility"),
		// 				Type: to.Ptr("Microsoft.DBforPostgreSQL/flexibleServers/configurations"),
		// 				ID: to.Ptr("/subscriptions/ffffffff-ffff-ffff-ffff-ffffffffffff/resourceGroups/exampleresourcegroup/providers/Microsoft.DBforPostgreSQL/flexibleServers/exampleserver/configurations/syslog_facility"),
		// 				Properties: &armpostgresql.ConfigurationProperties{
		// 					Description: to.Ptr("Sets the syslog \"facility\" to be used when syslog enabled."),
		// 					AllowedValues: to.Ptr("local0,local1,local2,local3,local4,local5,local6,local7"),
		// 					DataType: to.Ptr(armpostgresql.ConfigurationDataTypeEnumeration),
		// 					DefaultValue: to.Ptr("local0"),
		// 					DocumentationLink: to.Ptr("https://www.postgresql.org/docs/13/runtime-config-logging.html#GUC-SYSLOG-FACILITY"),
		// 					IsConfigPendingRestart: to.Ptr(false),
		// 					IsDynamicConfig: to.Ptr(true),
		// 					IsReadOnly: to.Ptr(true),
		// 					Source: to.Ptr("system-default"),
		// 					Value: to.Ptr("local0"),
		// 				},
		// 			},
		// 			{
		// 				Name: to.Ptr("syslog_ident"),
		// 				Type: to.Ptr("Microsoft.DBforPostgreSQL/flexibleServers/configurations"),
		// 				ID: to.Ptr("/subscriptions/ffffffff-ffff-ffff-ffff-ffffffffffff/resourceGroups/exampleresourcegroup/providers/Microsoft.DBforPostgreSQL/flexibleServers/exampleserver/configurations/syslog_ident"),
		// 				Properties: &armpostgresql.ConfigurationProperties{
		// 					Description: to.Ptr("Sets the program name used to identify PostgreSQL messages in syslog."),
		// 					AllowedValues: to.Ptr(".*"),
		// 					DataType: to.Ptr(armpostgresql.ConfigurationDataTypeString),
		// 					DefaultValue: to.Ptr("postgres"),
		// 					DocumentationLink: to.Ptr("https://www.postgresql.org/docs/13/runtime-config-logging.html#GUC-SYSLOG-IDENT"),
		// 					IsConfigPendingRestart: to.Ptr(false),
		// 					IsDynamicConfig: to.Ptr(true),
		// 					IsReadOnly: to.Ptr(true),
		// 					Source: to.Ptr("system-default"),
		// 					Value: to.Ptr("postgres"),
		// 				},
		// 			},
		// 			{
		// 				Name: to.Ptr("syslog_sequence_numbers"),
		// 				Type: to.Ptr("Microsoft.DBforPostgreSQL/flexibleServers/configurations"),
		// 				ID: to.Ptr("/subscriptions/ffffffff-ffff-ffff-ffff-ffffffffffff/resourceGroups/exampleresourcegroup/providers/Microsoft.DBforPostgreSQL/flexibleServers/exampleserver/configurations/syslog_sequence_numbers"),
		// 				Properties: &armpostgresql.ConfigurationProperties{
		// 					Description: to.Ptr("Add sequence number to syslog messages to avoid duplicate suppression."),
		// 					AllowedValues: to.Ptr("on,off"),
		// 					DataType: to.Ptr(armpostgresql.ConfigurationDataTypeBoolean),
		// 					DefaultValue: to.Ptr("on"),
		// 					DocumentationLink: to.Ptr("https://www.postgresql.org/docs/13/runtime-config-logging.html#GUC-SYSLOG-SEQUENCE-NUMBERS"),
		// 					IsConfigPendingRestart: to.Ptr(false),
		// 					IsDynamicConfig: to.Ptr(true),
		// 					IsReadOnly: to.Ptr(true),
		// 					Source: to.Ptr("system-default"),
		// 					Value: to.Ptr("on"),
		// 				},
		// 			},
		// 			{
		// 				Name: to.Ptr("syslog_split_messages"),
		// 				Type: to.Ptr("Microsoft.DBforPostgreSQL/flexibleServers/configurations"),
		// 				ID: to.Ptr("/subscriptions/ffffffff-ffff-ffff-ffff-ffffffffffff/resourceGroups/exampleresourcegroup/providers/Microsoft.DBforPostgreSQL/flexibleServers/exampleserver/configurations/syslog_split_messages"),
		// 				Properties: &armpostgresql.ConfigurationProperties{
		// 					Description: to.Ptr("Split messages sent to syslog by lines and to fit into 1024 bytes."),
		// 					AllowedValues: to.Ptr("on,off"),
		// 					DataType: to.Ptr(armpostgresql.ConfigurationDataTypeBoolean),
		// 					DefaultValue: to.Ptr("on"),
		// 					DocumentationLink: to.Ptr("https://www.postgresql.org/docs/13/runtime-config-logging.html#GUC-SYSLOG-SPLIT-MESSAGES"),
		// 					IsConfigPendingRestart: to.Ptr(false),
		// 					IsDynamicConfig: to.Ptr(true),
		// 					IsReadOnly: to.Ptr(true),
		// 					Source: to.Ptr("system-default"),
		// 					Value: to.Ptr("on"),
		// 				},
		// 			},
		// 			{
		// 				Name: to.Ptr("tcp_keepalives_count"),
		// 				Type: to.Ptr("Microsoft.DBforPostgreSQL/flexibleServers/configurations"),
		// 				ID: to.Ptr("/subscriptions/ffffffff-ffff-ffff-ffff-ffffffffffff/resourceGroups/exampleresourcegroup/providers/Microsoft.DBforPostgreSQL/flexibleServers/exampleserver/configurations/tcp_keepalives_count"),
		// 				Properties: &armpostgresql.ConfigurationProperties{
		// 					Description: to.Ptr("Specifies the number of TCP keepalives that can be lost before the server's connection to the client is considered dead."),
		// 					AllowedValues: to.Ptr("0-2147483647"),
		// 					DataType: to.Ptr(armpostgresql.ConfigurationDataTypeInteger),
		// 					DefaultValue: to.Ptr("9"),
		// 					DocumentationLink: to.Ptr("https://www.postgresql.org/docs/13/runtime-config-connection.html#GUC-TCP-KEEPALIVES-COUNT"),
		// 					IsConfigPendingRestart: to.Ptr(false),
		// 					IsDynamicConfig: to.Ptr(true),
		// 					IsReadOnly: to.Ptr(false),
		// 					Source: to.Ptr("system-default"),
		// 					Value: to.Ptr("9"),
		// 				},
		// 			},
		// 			{
		// 				Name: to.Ptr("tcp_keepalives_idle"),
		// 				Type: to.Ptr("Microsoft.DBforPostgreSQL/flexibleServers/configurations"),
		// 				ID: to.Ptr("/subscriptions/ffffffff-ffff-ffff-ffff-ffffffffffff/resourceGroups/exampleresourcegroup/providers/Microsoft.DBforPostgreSQL/flexibleServers/exampleserver/configurations/tcp_keepalives_idle"),
		// 				Properties: &armpostgresql.ConfigurationProperties{
		// 					Description: to.Ptr("Specifies the number of seconds of inactivity after which TCP should send a keepalive message to the client."),
		// 					AllowedValues: to.Ptr("0-2147483647"),
		// 					DataType: to.Ptr(armpostgresql.ConfigurationDataTypeInteger),
		// 					DefaultValue: to.Ptr("120"),
		// 					DocumentationLink: to.Ptr("https://www.postgresql.org/docs/13/runtime-config-connection.html#GUC-TCP-KEEPALIVES-IDLE"),
		// 					IsConfigPendingRestart: to.Ptr(false),
		// 					IsDynamicConfig: to.Ptr(true),
		// 					IsReadOnly: to.Ptr(false),
		// 					Source: to.Ptr("system-default"),
		// 					Unit: to.Ptr("seconds"),
		// 					Value: to.Ptr("120"),
		// 				},
		// 			},
		// 			{
		// 				Name: to.Ptr("tcp_keepalives_interval"),
		// 				Type: to.Ptr("Microsoft.DBforPostgreSQL/flexibleServers/configurations"),
		// 				ID: to.Ptr("/subscriptions/ffffffff-ffff-ffff-ffff-ffffffffffff/resourceGroups/exampleresourcegroup/providers/Microsoft.DBforPostgreSQL/flexibleServers/exampleserver/configurations/tcp_keepalives_interval"),
		// 				Properties: &armpostgresql.ConfigurationProperties{
		// 					Description: to.Ptr("Specifies the number of seconds after which a TCP keepalive message that is not acknowledged by the client should be retransmitted."),
		// 					AllowedValues: to.Ptr("0-2147483647"),
		// 					DataType: to.Ptr(armpostgresql.ConfigurationDataTypeInteger),
		// 					DefaultValue: to.Ptr("30"),
		// 					DocumentationLink: to.Ptr("https://www.postgresql.org/docs/13/runtime-config-connection.html#GUC-TCP-KEEPALIVES-INTERVAL"),
		// 					IsConfigPendingRestart: to.Ptr(false),
		// 					IsDynamicConfig: to.Ptr(true),
		// 					IsReadOnly: to.Ptr(false),
		// 					Source: to.Ptr("system-default"),
		// 					Unit: to.Ptr("seconds"),
		// 					Value: to.Ptr("30"),
		// 				},
		// 			},
		// 			{
		// 				Name: to.Ptr("tcp_user_timeout"),
		// 				Type: to.Ptr("Microsoft.DBforPostgreSQL/flexibleServers/configurations"),
		// 				ID: to.Ptr("/subscriptions/ffffffff-ffff-ffff-ffff-ffffffffffff/resourceGroups/exampleresourcegroup/providers/Microsoft.DBforPostgreSQL/flexibleServers/exampleserver/configurations/tcp_user_timeout"),
		// 				Properties: &armpostgresql.ConfigurationProperties{
		// 					Description: to.Ptr("Specifies the amount of time that transmitted data may remain unacknowledged before the TCP connection is forcibly closed."),
		// 					AllowedValues: to.Ptr("0-2147483647"),
		// 					DataType: to.Ptr(armpostgresql.ConfigurationDataTypeInteger),
		// 					DefaultValue: to.Ptr("0"),
		// 					DocumentationLink: to.Ptr("https://www.postgresql.org/docs/13/runtime-config-connection.html#GUC-TCP-USER-TIMEOUT"),
		// 					IsConfigPendingRestart: to.Ptr(false),
		// 					IsDynamicConfig: to.Ptr(true),
		// 					IsReadOnly: to.Ptr(false),
		// 					Source: to.Ptr("system-default"),
		// 					Unit: to.Ptr("milliseconds"),
		// 					Value: to.Ptr("0"),
		// 				},
		// 			},
		// 			{
		// 				Name: to.Ptr("temp_buffers"),
		// 				Type: to.Ptr("Microsoft.DBforPostgreSQL/flexibleServers/configurations"),
		// 				ID: to.Ptr("/subscriptions/ffffffff-ffff-ffff-ffff-ffffffffffff/resourceGroups/exampleresourcegroup/providers/Microsoft.DBforPostgreSQL/flexibleServers/exampleserver/configurations/temp_buffers"),
		// 				Properties: &armpostgresql.ConfigurationProperties{
		// 					Description: to.Ptr("Sets the maximum number of temporary buffers used by each database session."),
		// 					AllowedValues: to.Ptr("100-1073741823"),
		// 					DataType: to.Ptr(armpostgresql.ConfigurationDataTypeInteger),
		// 					DefaultValue: to.Ptr("1024"),
		// 					DocumentationLink: to.Ptr("https://www.postgresql.org/docs/13/runtime-config-resource.html#GUC-TEMP-BUFFERS"),
		// 					IsConfigPendingRestart: to.Ptr(false),
		// 					IsDynamicConfig: to.Ptr(true),
		// 					IsReadOnly: to.Ptr(false),
		// 					Source: to.Ptr("system-default"),
		// 					Unit: to.Ptr("8KB"),
		// 					Value: to.Ptr("1024"),
		// 				},
		// 			},
		// 			{
		// 				Name: to.Ptr("temp_file_limit"),
		// 				Type: to.Ptr("Microsoft.DBforPostgreSQL/flexibleServers/configurations"),
		// 				ID: to.Ptr("/subscriptions/ffffffff-ffff-ffff-ffff-ffffffffffff/resourceGroups/exampleresourcegroup/providers/Microsoft.DBforPostgreSQL/flexibleServers/exampleserver/configurations/temp_file_limit"),
		// 				Properties: &armpostgresql.ConfigurationProperties{
		// 					Description: to.Ptr("Limits the total size of all temporary files used by each process."),
		// 					AllowedValues: to.Ptr("-1-2147483647"),
		// 					DataType: to.Ptr(armpostgresql.ConfigurationDataTypeInteger),
		// 					DefaultValue: to.Ptr("-1"),
		// 					DocumentationLink: to.Ptr("https://www.postgresql.org/docs/13/runtime-config-resource.html#GUC-TEMP-FILE-LIMIT"),
		// 					IsConfigPendingRestart: to.Ptr(false),
		// 					IsDynamicConfig: to.Ptr(true),
		// 					IsReadOnly: to.Ptr(false),
		// 					Source: to.Ptr("system-default"),
		// 					Unit: to.Ptr("KB"),
		// 					Value: to.Ptr("-1"),
		// 				},
		// 			},
		// 			{
		// 				Name: to.Ptr("temp_tablespaces"),
		// 				Type: to.Ptr("Microsoft.DBforPostgreSQL/flexibleServers/configurations"),
		// 				ID: to.Ptr("/subscriptions/ffffffff-ffff-ffff-ffff-ffffffffffff/resourceGroups/exampleresourcegroup/providers/Microsoft.DBforPostgreSQL/flexibleServers/exampleserver/configurations/temp_tablespaces"),
		// 				Properties: &armpostgresql.ConfigurationProperties{
		// 					Description: to.Ptr("Sets the default tablespace(s) to use for temporary tables and sort files if not specified in the CREATE command."),
		// 					AllowedValues: to.Ptr("[A-Za-z._]*"),
		// 					DataType: to.Ptr(armpostgresql.ConfigurationDataTypeString),
		// 					DefaultValue: to.Ptr(""),
		// 					DocumentationLink: to.Ptr("https://www.postgresql.org/docs/13/runtime-config-client.html#GUC-TEMP-TABLESPACES"),
		// 					IsConfigPendingRestart: to.Ptr(false),
		// 					IsDynamicConfig: to.Ptr(true),
		// 					IsReadOnly: to.Ptr(false),
		// 					Source: to.Ptr("user-override"),
		// 					Value: to.Ptr("temptblspace"),
		// 				},
		// 			},
		// 			{
		// 				Name: to.Ptr("TimeZone"),
		// 				Type: to.Ptr("Microsoft.DBforPostgreSQL/flexibleServers/configurations"),
		// 				ID: to.Ptr("/subscriptions/ffffffff-ffff-ffff-ffff-ffffffffffff/resourceGroups/exampleresourcegroup/providers/Microsoft.DBforPostgreSQL/flexibleServers/exampleserver/configurations/TimeZone"),
		// 				Properties: &armpostgresql.ConfigurationProperties{
		// 					Description: to.Ptr("Sets the time zone for displaying and interpreting time stamps."),
		// 					AllowedValues: to.Ptr("[A-Za-z0-9/+_-]+"),
		// 					DataType: to.Ptr(armpostgresql.ConfigurationDataTypeString),
		// 					DefaultValue: to.Ptr("UTC"),
		// 					DocumentationLink: to.Ptr("https://www.postgresql.org/docs/13/runtime-config-client.html#GUC-TIMEZONE"),
		// 					IsConfigPendingRestart: to.Ptr(false),
		// 					IsDynamicConfig: to.Ptr(true),
		// 					IsReadOnly: to.Ptr(false),
		// 					Source: to.Ptr("system-default"),
		// 					Value: to.Ptr("UTC"),
		// 				},
		// 			},
		// 			{
		// 				Name: to.Ptr("timezone_abbreviations"),
		// 				Type: to.Ptr("Microsoft.DBforPostgreSQL/flexibleServers/configurations"),
		// 				ID: to.Ptr("/subscriptions/ffffffff-ffff-ffff-ffff-ffffffffffff/resourceGroups/exampleresourcegroup/providers/Microsoft.DBforPostgreSQL/flexibleServers/exampleserver/configurations/timezone_abbreviations"),
		// 				Properties: &armpostgresql.ConfigurationProperties{
		// 					Description: to.Ptr("Selects a file of time zone abbreviations."),
		// 					AllowedValues: to.Ptr(".*"),
		// 					DataType: to.Ptr(armpostgresql.ConfigurationDataTypeString),
		// 					DefaultValue: to.Ptr(""),
		// 					DocumentationLink: to.Ptr("https://www.postgresql.org/docs/13/runtime-config-client.html#GUC-TIMEZONE-ABBREVIATIONS"),
		// 					IsConfigPendingRestart: to.Ptr(false),
		// 					IsDynamicConfig: to.Ptr(true),
		// 					IsReadOnly: to.Ptr(true),
		// 					Source: to.Ptr("user-override"),
		// 					Value: to.Ptr("Default"),
		// 				},
		// 			},
		// 			{
		// 				Name: to.Ptr("trace_notify"),
		// 				Type: to.Ptr("Microsoft.DBforPostgreSQL/flexibleServers/configurations"),
		// 				ID: to.Ptr("/subscriptions/ffffffff-ffff-ffff-ffff-ffffffffffff/resourceGroups/exampleresourcegroup/providers/Microsoft.DBforPostgreSQL/flexibleServers/exampleserver/configurations/trace_notify"),
		// 				Properties: &armpostgresql.ConfigurationProperties{
		// 					Description: to.Ptr("Generates debugging output for LISTEN and NOTIFY."),
		// 					AllowedValues: to.Ptr("on,off"),
		// 					DataType: to.Ptr(armpostgresql.ConfigurationDataTypeBoolean),
		// 					DefaultValue: to.Ptr("off"),
		// 					DocumentationLink: to.Ptr("https://www.postgresql.org/docs/13/runtime-config-developer.html#GUC-TRACE-NOTIFY"),
		// 					IsConfigPendingRestart: to.Ptr(false),
		// 					IsDynamicConfig: to.Ptr(true),
		// 					IsReadOnly: to.Ptr(true),
		// 					Source: to.Ptr("system-default"),
		// 					Value: to.Ptr("off"),
		// 				},
		// 			},
		// 			{
		// 				Name: to.Ptr("trace_recovery_messages"),
		// 				Type: to.Ptr("Microsoft.DBforPostgreSQL/flexibleServers/configurations"),
		// 				ID: to.Ptr("/subscriptions/ffffffff-ffff-ffff-ffff-ffffffffffff/resourceGroups/exampleresourcegroup/providers/Microsoft.DBforPostgreSQL/flexibleServers/exampleserver/configurations/trace_recovery_messages"),
		// 				Properties: &armpostgresql.ConfigurationProperties{
		// 					Description: to.Ptr("Enables logging of recovery-related debugging information."),
		// 					AllowedValues: to.Ptr("debug5,debug4,debug3,debug2,debug1,log,notice,warning,error"),
		// 					DataType: to.Ptr(armpostgresql.ConfigurationDataTypeEnumeration),
		// 					DefaultValue: to.Ptr("log"),
		// 					DocumentationLink: to.Ptr("https://www.postgresql.org/docs/13/runtime-config-developer.html#GUC-TRACE-RECOVERY-MESSAGES"),
		// 					IsConfigPendingRestart: to.Ptr(false),
		// 					IsDynamicConfig: to.Ptr(true),
		// 					IsReadOnly: to.Ptr(true),
		// 					Source: to.Ptr("system-default"),
		// 					Value: to.Ptr("log"),
		// 				},
		// 			},
		// 			{
		// 				Name: to.Ptr("trace_sort"),
		// 				Type: to.Ptr("Microsoft.DBforPostgreSQL/flexibleServers/configurations"),
		// 				ID: to.Ptr("/subscriptions/ffffffff-ffff-ffff-ffff-ffffffffffff/resourceGroups/exampleresourcegroup/providers/Microsoft.DBforPostgreSQL/flexibleServers/exampleserver/configurations/trace_sort"),
		// 				Properties: &armpostgresql.ConfigurationProperties{
		// 					Description: to.Ptr("Emit information about resource usage in sorting."),
		// 					AllowedValues: to.Ptr("on,off"),
		// 					DataType: to.Ptr(armpostgresql.ConfigurationDataTypeBoolean),
		// 					DefaultValue: to.Ptr("off"),
		// 					DocumentationLink: to.Ptr("https://www.postgresql.org/docs/13/runtime-config-developer.html#GUC-TRACE-SORT"),
		// 					IsConfigPendingRestart: to.Ptr(false),
		// 					IsDynamicConfig: to.Ptr(true),
		// 					IsReadOnly: to.Ptr(true),
		// 					Source: to.Ptr("system-default"),
		// 					Value: to.Ptr("off"),
		// 				},
		// 			},
		// 			{
		// 				Name: to.Ptr("track_activities"),
		// 				Type: to.Ptr("Microsoft.DBforPostgreSQL/flexibleServers/configurations"),
		// 				ID: to.Ptr("/subscriptions/ffffffff-ffff-ffff-ffff-ffffffffffff/resourceGroups/exampleresourcegroup/providers/Microsoft.DBforPostgreSQL/flexibleServers/exampleserver/configurations/track_activities"),
		// 				Properties: &armpostgresql.ConfigurationProperties{
		// 					Description: to.Ptr("Collects information about executing commands for each session."),
		// 					AllowedValues: to.Ptr("on,off"),
		// 					DataType: to.Ptr(armpostgresql.ConfigurationDataTypeBoolean),
		// 					DefaultValue: to.Ptr("on"),
		// 					DocumentationLink: to.Ptr("https://www.postgresql.org/docs/13/runtime-config-statistics.html#GUC-TRACK-ACTIVITIES"),
		// 					IsConfigPendingRestart: to.Ptr(false),
		// 					IsDynamicConfig: to.Ptr(true),
		// 					IsReadOnly: to.Ptr(false),
		// 					Source: to.Ptr("system-default"),
		// 					Value: to.Ptr("on"),
		// 				},
		// 			},
		// 			{
		// 				Name: to.Ptr("track_activity_query_size"),
		// 				Type: to.Ptr("Microsoft.DBforPostgreSQL/flexibleServers/configurations"),
		// 				ID: to.Ptr("/subscriptions/ffffffff-ffff-ffff-ffff-ffffffffffff/resourceGroups/exampleresourcegroup/providers/Microsoft.DBforPostgreSQL/flexibleServers/exampleserver/configurations/track_activity_query_size"),
		// 				Properties: &armpostgresql.ConfigurationProperties{
		// 					Description: to.Ptr("Sets the amount of memory reserved for pg_stat_activity.query, in bytes."),
		// 					AllowedValues: to.Ptr("100-102400"),
		// 					DataType: to.Ptr(armpostgresql.ConfigurationDataTypeInteger),
		// 					DefaultValue: to.Ptr("1024"),
		// 					DocumentationLink: to.Ptr("https://www.postgresql.org/docs/13/runtime-config-statistics.html#GUC-TRACK-ACTIVITY-QUERY-SIZE"),
		// 					IsConfigPendingRestart: to.Ptr(false),
		// 					IsDynamicConfig: to.Ptr(false),
		// 					IsReadOnly: to.Ptr(false),
		// 					Source: to.Ptr("system-default"),
		// 					Unit: to.Ptr("bytes"),
		// 					Value: to.Ptr("1024"),
		// 				},
		// 			},
		// 			{
		// 				Name: to.Ptr("track_commit_timestamp"),
		// 				Type: to.Ptr("Microsoft.DBforPostgreSQL/flexibleServers/configurations"),
		// 				ID: to.Ptr("/subscriptions/ffffffff-ffff-ffff-ffff-ffffffffffff/resourceGroups/exampleresourcegroup/providers/Microsoft.DBforPostgreSQL/flexibleServers/exampleserver/configurations/track_commit_timestamp"),
		// 				Properties: &armpostgresql.ConfigurationProperties{
		// 					Description: to.Ptr("Collects transaction commit time."),
		// 					AllowedValues: to.Ptr("on,off"),
		// 					DataType: to.Ptr(armpostgresql.ConfigurationDataTypeBoolean),
		// 					DefaultValue: to.Ptr("off"),
		// 					DocumentationLink: to.Ptr("https://www.postgresql.org/docs/13/runtime-config-replication.html#GUC-TRACK-COMMIT-TIMESTAMP"),
		// 					IsConfigPendingRestart: to.Ptr(false),
		// 					IsDynamicConfig: to.Ptr(false),
		// 					IsReadOnly: to.Ptr(false),
		// 					Source: to.Ptr("system-default"),
		// 					Value: to.Ptr("off"),
		// 				},
		// 			},
		// 			{
		// 				Name: to.Ptr("track_counts"),
		// 				Type: to.Ptr("Microsoft.DBforPostgreSQL/flexibleServers/configurations"),
		// 				ID: to.Ptr("/subscriptions/ffffffff-ffff-ffff-ffff-ffffffffffff/resourceGroups/exampleresourcegroup/providers/Microsoft.DBforPostgreSQL/flexibleServers/exampleserver/configurations/track_counts"),
		// 				Properties: &armpostgresql.ConfigurationProperties{
		// 					Description: to.Ptr("Enables collection of statistics on database activity"),
		// 					AllowedValues: to.Ptr("on,off"),
		// 					DataType: to.Ptr(armpostgresql.ConfigurationDataTypeBoolean),
		// 					DefaultValue: to.Ptr("on"),
		// 					DocumentationLink: to.Ptr("https://www.postgresql.org/docs/13/runtime-config-statistics.html#GUC-TRACK-COUNTS"),
		// 					IsConfigPendingRestart: to.Ptr(false),
		// 					IsDynamicConfig: to.Ptr(true),
		// 					IsReadOnly: to.Ptr(false),
		// 					Source: to.Ptr("system-default"),
		// 					Value: to.Ptr("on"),
		// 				},
		// 			},
		// 			{
		// 				Name: to.Ptr("track_functions"),
		// 				Type: to.Ptr("Microsoft.DBforPostgreSQL/flexibleServers/configurations"),
		// 				ID: to.Ptr("/subscriptions/ffffffff-ffff-ffff-ffff-ffffffffffff/resourceGroups/exampleresourcegroup/providers/Microsoft.DBforPostgreSQL/flexibleServers/exampleserver/configurations/track_functions"),
		// 				Properties: &armpostgresql.ConfigurationProperties{
		// 					Description: to.Ptr("Enables tracking of function call counts and time used."),
		// 					AllowedValues: to.Ptr("none,pl,all"),
		// 					DataType: to.Ptr(armpostgresql.ConfigurationDataTypeEnumeration),
		// 					DefaultValue: to.Ptr("none"),
		// 					DocumentationLink: to.Ptr("https://www.postgresql.org/docs/13/runtime-config-statistics.html#GUC-TRACK-FUNCTIONS"),
		// 					IsConfigPendingRestart: to.Ptr(false),
		// 					IsDynamicConfig: to.Ptr(true),
		// 					IsReadOnly: to.Ptr(false),
		// 					Source: to.Ptr("system-default"),
		// 					Value: to.Ptr("none"),
		// 				},
		// 			},
		// 			{
		// 				Name: to.Ptr("track_io_timing"),
		// 				Type: to.Ptr("Microsoft.DBforPostgreSQL/flexibleServers/configurations"),
		// 				ID: to.Ptr("/subscriptions/ffffffff-ffff-ffff-ffff-ffffffffffff/resourceGroups/exampleresourcegroup/providers/Microsoft.DBforPostgreSQL/flexibleServers/exampleserver/configurations/track_io_timing"),
		// 				Properties: &armpostgresql.ConfigurationProperties{
		// 					Description: to.Ptr("Enables timing of database I/O calls."),
		// 					AllowedValues: to.Ptr("on,off"),
		// 					DataType: to.Ptr(armpostgresql.ConfigurationDataTypeBoolean),
		// 					DefaultValue: to.Ptr("off"),
		// 					DocumentationLink: to.Ptr("https://www.postgresql.org/docs/13/runtime-config-statistics.html#GUC-TRACK-IO-TIMING"),
		// 					IsConfigPendingRestart: to.Ptr(false),
		// 					IsDynamicConfig: to.Ptr(true),
		// 					IsReadOnly: to.Ptr(false),
		// 					Source: to.Ptr("system-default"),
		// 					Value: to.Ptr("off"),
		// 				},
		// 			},
		// 			{
		// 				Name: to.Ptr("transaction_deferrable"),
		// 				Type: to.Ptr("Microsoft.DBforPostgreSQL/flexibleServers/configurations"),
		// 				ID: to.Ptr("/subscriptions/ffffffff-ffff-ffff-ffff-ffffffffffff/resourceGroups/exampleresourcegroup/providers/Microsoft.DBforPostgreSQL/flexibleServers/exampleserver/configurations/transaction_deferrable"),
		// 				Properties: &armpostgresql.ConfigurationProperties{
		// 					Description: to.Ptr("Whether to defer a read-only serializable transaction until it can be executed with no possible serialization failures."),
		// 					AllowedValues: to.Ptr("on,off"),
		// 					DataType: to.Ptr(armpostgresql.ConfigurationDataTypeBoolean),
		// 					DefaultValue: to.Ptr("off"),
		// 					DocumentationLink: to.Ptr("https://www.postgresql.org/docs/13/runtime-config-client.html#GUC-TRANSACTION-DEFERRABLE"),
		// 					IsConfigPendingRestart: to.Ptr(false),
		// 					IsDynamicConfig: to.Ptr(true),
		// 					IsReadOnly: to.Ptr(true),
		// 					Source: to.Ptr("system-default"),
		// 					Value: to.Ptr("off"),
		// 				},
		// 			},
		// 			{
		// 				Name: to.Ptr("transaction_isolation"),
		// 				Type: to.Ptr("Microsoft.DBforPostgreSQL/flexibleServers/configurations"),
		// 				ID: to.Ptr("/subscriptions/ffffffff-ffff-ffff-ffff-ffffffffffff/resourceGroups/exampleresourcegroup/providers/Microsoft.DBforPostgreSQL/flexibleServers/exampleserver/configurations/transaction_isolation"),
		// 				Properties: &armpostgresql.ConfigurationProperties{
		// 					Description: to.Ptr("Sets the current transaction's isolation level."),
		// 					AllowedValues: to.Ptr("serializable,repeatable read,read committed,read uncommitted"),
		// 					DataType: to.Ptr(armpostgresql.ConfigurationDataTypeEnumeration),
		// 					DefaultValue: to.Ptr("read committed"),
		// 					DocumentationLink: to.Ptr("https://www.postgresql.org/docs/13/runtime-config-client.html#GUC-TRANSACTION-ISOLATION"),
		// 					IsConfigPendingRestart: to.Ptr(false),
		// 					IsDynamicConfig: to.Ptr(true),
		// 					IsReadOnly: to.Ptr(true),
		// 					Source: to.Ptr("system-default"),
		// 					Value: to.Ptr("read committed"),
		// 				},
		// 			},
		// 			{
		// 				Name: to.Ptr("transaction_read_only"),
		// 				Type: to.Ptr("Microsoft.DBforPostgreSQL/flexibleServers/configurations"),
		// 				ID: to.Ptr("/subscriptions/ffffffff-ffff-ffff-ffff-ffffffffffff/resourceGroups/exampleresourcegroup/providers/Microsoft.DBforPostgreSQL/flexibleServers/exampleserver/configurations/transaction_read_only"),
		// 				Properties: &armpostgresql.ConfigurationProperties{
		// 					Description: to.Ptr("Sets the current transaction's read-only status."),
		// 					AllowedValues: to.Ptr("on,off"),
		// 					DataType: to.Ptr(armpostgresql.ConfigurationDataTypeBoolean),
		// 					DefaultValue: to.Ptr("off"),
		// 					DocumentationLink: to.Ptr("https://www.postgresql.org/docs/13/runtime-config-client.html#GUC-TRANSACTION-READ-ONLY"),
		// 					IsConfigPendingRestart: to.Ptr(false),
		// 					IsDynamicConfig: to.Ptr(true),
		// 					IsReadOnly: to.Ptr(true),
		// 					Source: to.Ptr("system-default"),
		// 					Value: to.Ptr("off"),
		// 				},
		// 			},
		// 			{
		// 				Name: to.Ptr("transform_null_equals"),
		// 				Type: to.Ptr("Microsoft.DBforPostgreSQL/flexibleServers/configurations"),
		// 				ID: to.Ptr("/subscriptions/ffffffff-ffff-ffff-ffff-ffffffffffff/resourceGroups/exampleresourcegroup/providers/Microsoft.DBforPostgreSQL/flexibleServers/exampleserver/configurations/transform_null_equals"),
		// 				Properties: &armpostgresql.ConfigurationProperties{
		// 					Description: to.Ptr("When on, expressions of the form expr = NULL (or NULL = expr) are treated as expr IS NULL, that is, they return true if expr evaluates to the null value, and false otherwise."),
		// 					AllowedValues: to.Ptr("on,off"),
		// 					DataType: to.Ptr(armpostgresql.ConfigurationDataTypeBoolean),
		// 					DefaultValue: to.Ptr("off"),
		// 					DocumentationLink: to.Ptr("https://www.postgresql.org/docs/13/runtime-config-compatible.html#GUC-TRANSFORM-NULL-EQUALS"),
		// 					IsConfigPendingRestart: to.Ptr(false),
		// 					IsDynamicConfig: to.Ptr(true),
		// 					IsReadOnly: to.Ptr(false),
		// 					Source: to.Ptr("system-default"),
		// 					Value: to.Ptr("off"),
		// 				},
		// 			},
		// 			{
		// 				Name: to.Ptr("unix_socket_directories"),
		// 				Type: to.Ptr("Microsoft.DBforPostgreSQL/flexibleServers/configurations"),
		// 				ID: to.Ptr("/subscriptions/ffffffff-ffff-ffff-ffff-ffffffffffff/resourceGroups/exampleresourcegroup/providers/Microsoft.DBforPostgreSQL/flexibleServers/exampleserver/configurations/unix_socket_directories"),
		// 				Properties: &armpostgresql.ConfigurationProperties{
		// 					Description: to.Ptr("Sets the directories where Unix-domain sockets will be created."),
		// 					AllowedValues: to.Ptr(".*"),
		// 					DataType: to.Ptr(armpostgresql.ConfigurationDataTypeString),
		// 					DefaultValue: to.Ptr("/tmp"),
		// 					DocumentationLink: to.Ptr("https://www.postgresql.org/docs/13/runtime-config-connection.html#GUC-UNIX-SOCKET-DIRECTORIES"),
		// 					IsConfigPendingRestart: to.Ptr(false),
		// 					IsDynamicConfig: to.Ptr(false),
		// 					IsReadOnly: to.Ptr(true),
		// 					Source: to.Ptr("system-default"),
		// 					Value: to.Ptr("/tmp"),
		// 				},
		// 			},
		// 			{
		// 				Name: to.Ptr("unix_socket_group"),
		// 				Type: to.Ptr("Microsoft.DBforPostgreSQL/flexibleServers/configurations"),
		// 				ID: to.Ptr("/subscriptions/ffffffff-ffff-ffff-ffff-ffffffffffff/resourceGroups/exampleresourcegroup/providers/Microsoft.DBforPostgreSQL/flexibleServers/exampleserver/configurations/unix_socket_group"),
		// 				Properties: &armpostgresql.ConfigurationProperties{
		// 					Description: to.Ptr("Sets the owning group of the Unix-domain socket."),
		// 					AllowedValues: to.Ptr(".*"),
		// 					DataType: to.Ptr(armpostgresql.ConfigurationDataTypeString),
		// 					DefaultValue: to.Ptr(""),
		// 					DocumentationLink: to.Ptr("https://www.postgresql.org/docs/13/runtime-config-connection.html#GUC-UNIX-SOCKET-GROUP"),
		// 					IsConfigPendingRestart: to.Ptr(false),
		// 					IsDynamicConfig: to.Ptr(false),
		// 					IsReadOnly: to.Ptr(true),
		// 					Source: to.Ptr("system-default"),
		// 					Value: to.Ptr(""),
		// 				},
		// 			},
		// 			{
		// 				Name: to.Ptr("unix_socket_permissions"),
		// 				Type: to.Ptr("Microsoft.DBforPostgreSQL/flexibleServers/configurations"),
		// 				ID: to.Ptr("/subscriptions/ffffffff-ffff-ffff-ffff-ffffffffffff/resourceGroups/exampleresourcegroup/providers/Microsoft.DBforPostgreSQL/flexibleServers/exampleserver/configurations/unix_socket_permissions"),
		// 				Properties: &armpostgresql.ConfigurationProperties{
		// 					Description: to.Ptr("Sets the access permissions of the Unix-domain socket."),
		// 					AllowedValues: to.Ptr("0-511"),
		// 					DataType: to.Ptr(armpostgresql.ConfigurationDataTypeInteger),
		// 					DefaultValue: to.Ptr("511"),
		// 					DocumentationLink: to.Ptr("https://www.postgresql.org/docs/13/runtime-config-connection.html#GUC-UNIX-SOCKET-PERMISSIONS"),
		// 					IsConfigPendingRestart: to.Ptr(false),
		// 					IsDynamicConfig: to.Ptr(false),
		// 					IsReadOnly: to.Ptr(true),
		// 					Source: to.Ptr("user-override"),
		// 					Value: to.Ptr("0777"),
		// 				},
		// 			},
		// 			{
		// 				Name: to.Ptr("update_process_title"),
		// 				Type: to.Ptr("Microsoft.DBforPostgreSQL/flexibleServers/configurations"),
		// 				ID: to.Ptr("/subscriptions/ffffffff-ffff-ffff-ffff-ffffffffffff/resourceGroups/exampleresourcegroup/providers/Microsoft.DBforPostgreSQL/flexibleServers/exampleserver/configurations/update_process_title"),
		// 				Properties: &armpostgresql.ConfigurationProperties{
		// 					Description: to.Ptr("Updates the process title to show the active SQL command."),
		// 					AllowedValues: to.Ptr("on,off"),
		// 					DataType: to.Ptr(armpostgresql.ConfigurationDataTypeBoolean),
		// 					DefaultValue: to.Ptr("on"),
		// 					DocumentationLink: to.Ptr("https://www.postgresql.org/docs/13/runtime-config-logging.html#GUC-UPDATE-PROCESS-TITLE"),
		// 					IsConfigPendingRestart: to.Ptr(false),
		// 					IsDynamicConfig: to.Ptr(true),
		// 					IsReadOnly: to.Ptr(true),
		// 					Source: to.Ptr("system-default"),
		// 					Value: to.Ptr("on"),
		// 				},
		// 			},
		// 			{
		// 				Name: to.Ptr("vacuum_cleanup_index_scale_factor"),
		// 				Type: to.Ptr("Microsoft.DBforPostgreSQL/flexibleServers/configurations"),
		// 				ID: to.Ptr("/subscriptions/ffffffff-ffff-ffff-ffff-ffffffffffff/resourceGroups/exampleresourcegroup/providers/Microsoft.DBforPostgreSQL/flexibleServers/exampleserver/configurations/vacuum_cleanup_index_scale_factor"),
		// 				Properties: &armpostgresql.ConfigurationProperties{
		// 					Description: to.Ptr("Number of tuple inserts prior to index cleanup as a fraction of reltuples."),
		// 					AllowedValues: to.Ptr("0-1e+10"),
		// 					DataType: to.Ptr(armpostgresql.ConfigurationDataTypeNumeric),
		// 					DefaultValue: to.Ptr("0.1"),
		// 					IsConfigPendingRestart: to.Ptr(false),
		// 					IsDynamicConfig: to.Ptr(true),
		// 					IsReadOnly: to.Ptr(true),
		// 					Source: to.Ptr("system-default"),
		// 					Value: to.Ptr("0.1"),
		// 				},
		// 			},
		// 			{
		// 				Name: to.Ptr("vacuum_cost_delay"),
		// 				Type: to.Ptr("Microsoft.DBforPostgreSQL/flexibleServers/configurations"),
		// 				ID: to.Ptr("/subscriptions/ffffffff-ffff-ffff-ffff-ffffffffffff/resourceGroups/exampleresourcegroup/providers/Microsoft.DBforPostgreSQL/flexibleServers/exampleserver/configurations/vacuum_cost_delay"),
		// 				Properties: &armpostgresql.ConfigurationProperties{
		// 					Description: to.Ptr("the amount of time (in milliseconds) that the vacuum process will sleep when the cost limit has been exceeded."),
		// 					AllowedValues: to.Ptr("0-100"),
		// 					DataType: to.Ptr(armpostgresql.ConfigurationDataTypeInteger),
		// 					DefaultValue: to.Ptr("0"),
		// 					DocumentationLink: to.Ptr("https://www.postgresql.org/docs/13/runtime-config-resource.html#GUC-VACUUM-COST-DELAY"),
		// 					IsConfigPendingRestart: to.Ptr(false),
		// 					IsDynamicConfig: to.Ptr(true),
		// 					IsReadOnly: to.Ptr(false),
		// 					Source: to.Ptr("system-default"),
		// 					Unit: to.Ptr("milliseconds"),
		// 					Value: to.Ptr("0"),
		// 				},
		// 			},
		// 			{
		// 				Name: to.Ptr("vacuum_cost_limit"),
		// 				Type: to.Ptr("Microsoft.DBforPostgreSQL/flexibleServers/configurations"),
		// 				ID: to.Ptr("/subscriptions/ffffffff-ffff-ffff-ffff-ffffffffffff/resourceGroups/exampleresourcegroup/providers/Microsoft.DBforPostgreSQL/flexibleServers/exampleserver/configurations/vacuum_cost_limit"),
		// 				Properties: &armpostgresql.ConfigurationProperties{
		// 					Description: to.Ptr("The accumulated cost that will cause the vacuuming process to sleep."),
		// 					AllowedValues: to.Ptr("1-10000"),
		// 					DataType: to.Ptr(armpostgresql.ConfigurationDataTypeInteger),
		// 					DefaultValue: to.Ptr("200"),
		// 					DocumentationLink: to.Ptr("https://www.postgresql.org/docs/13/runtime-config-resource.html#GUC-VACUUM-COST-LIMIT"),
		// 					IsConfigPendingRestart: to.Ptr(false),
		// 					IsDynamicConfig: to.Ptr(true),
		// 					IsReadOnly: to.Ptr(false),
		// 					Source: to.Ptr("system-default"),
		// 					Value: to.Ptr("200"),
		// 				},
		// 			},
		// 			{
		// 				Name: to.Ptr("vacuum_cost_page_dirty"),
		// 				Type: to.Ptr("Microsoft.DBforPostgreSQL/flexibleServers/configurations"),
		// 				ID: to.Ptr("/subscriptions/ffffffff-ffff-ffff-ffff-ffffffffffff/resourceGroups/exampleresourcegroup/providers/Microsoft.DBforPostgreSQL/flexibleServers/exampleserver/configurations/vacuum_cost_page_dirty"),
		// 				Properties: &armpostgresql.ConfigurationProperties{
		// 					Description: to.Ptr("The estimated cost charged when vacuum modifies a block that was previously clean."),
		// 					AllowedValues: to.Ptr("0-10000"),
		// 					DataType: to.Ptr(armpostgresql.ConfigurationDataTypeInteger),
		// 					DefaultValue: to.Ptr("20"),
		// 					DocumentationLink: to.Ptr("https://www.postgresql.org/docs/13/runtime-config-resource.html#GUC-VACUUM-COST-PAGE-DIRTY"),
		// 					IsConfigPendingRestart: to.Ptr(false),
		// 					IsDynamicConfig: to.Ptr(true),
		// 					IsReadOnly: to.Ptr(false),
		// 					Source: to.Ptr("system-default"),
		// 					Value: to.Ptr("20"),
		// 				},
		// 			},
		// 			{
		// 				Name: to.Ptr("vacuum_cost_page_hit"),
		// 				Type: to.Ptr("Microsoft.DBforPostgreSQL/flexibleServers/configurations"),
		// 				ID: to.Ptr("/subscriptions/ffffffff-ffff-ffff-ffff-ffffffffffff/resourceGroups/exampleresourcegroup/providers/Microsoft.DBforPostgreSQL/flexibleServers/exampleserver/configurations/vacuum_cost_page_hit"),
		// 				Properties: &armpostgresql.ConfigurationProperties{
		// 					Description: to.Ptr("The estimated cost for vacuuming a buffer found in the shared buffer cache."),
		// 					AllowedValues: to.Ptr("0-10000"),
		// 					DataType: to.Ptr(armpostgresql.ConfigurationDataTypeInteger),
		// 					DefaultValue: to.Ptr("1"),
		// 					DocumentationLink: to.Ptr("https://www.postgresql.org/docs/13/runtime-config-resource.html#GUC-VACUUM-COST-PAGE-HIT"),
		// 					IsConfigPendingRestart: to.Ptr(false),
		// 					IsDynamicConfig: to.Ptr(true),
		// 					IsReadOnly: to.Ptr(false),
		// 					Source: to.Ptr("system-default"),
		// 					Value: to.Ptr("1"),
		// 				},
		// 			},
		// 			{
		// 				Name: to.Ptr("vacuum_cost_page_miss"),
		// 				Type: to.Ptr("Microsoft.DBforPostgreSQL/flexibleServers/configurations"),
		// 				ID: to.Ptr("/subscriptions/ffffffff-ffff-ffff-ffff-ffffffffffff/resourceGroups/exampleresourcegroup/providers/Microsoft.DBforPostgreSQL/flexibleServers/exampleserver/configurations/vacuum_cost_page_miss"),
		// 				Properties: &armpostgresql.ConfigurationProperties{
		// 					Description: to.Ptr("The estimated cost for vacuuming a buffer that must be read from disk."),
		// 					AllowedValues: to.Ptr("0-10000"),
		// 					DataType: to.Ptr(armpostgresql.ConfigurationDataTypeInteger),
		// 					DefaultValue: to.Ptr("10"),
		// 					DocumentationLink: to.Ptr("https://www.postgresql.org/docs/13/runtime-config-resource.html#GUC-VACUUM-COST-PAGE-MISS"),
		// 					IsConfigPendingRestart: to.Ptr(false),
		// 					IsDynamicConfig: to.Ptr(true),
		// 					IsReadOnly: to.Ptr(false),
		// 					Source: to.Ptr("system-default"),
		// 					Value: to.Ptr("10"),
		// 				},
		// 			},
		// 			{
		// 				Name: to.Ptr("vacuum_defer_cleanup_age"),
		// 				Type: to.Ptr("Microsoft.DBforPostgreSQL/flexibleServers/configurations"),
		// 				ID: to.Ptr("/subscriptions/ffffffff-ffff-ffff-ffff-ffffffffffff/resourceGroups/exampleresourcegroup/providers/Microsoft.DBforPostgreSQL/flexibleServers/exampleserver/configurations/vacuum_defer_cleanup_age"),
		// 				Properties: &armpostgresql.ConfigurationProperties{
		// 					Description: to.Ptr("Specifies the number of transactions by which VACUUM and HOT updates will defer cleanup of dead row versions."),
		// 					AllowedValues: to.Ptr("0-1000000"),
		// 					DataType: to.Ptr(armpostgresql.ConfigurationDataTypeInteger),
		// 					DefaultValue: to.Ptr("0"),
		// 					DocumentationLink: to.Ptr("https://www.postgresql.org/docs/13/runtime-config-replication.html#GUC-VACUUM-DEFER-CLEANUP-AGE"),
		// 					IsConfigPendingRestart: to.Ptr(false),
		// 					IsDynamicConfig: to.Ptr(true),
		// 					IsReadOnly: to.Ptr(false),
		// 					Source: to.Ptr("system-default"),
		// 					Value: to.Ptr("0"),
		// 				},
		// 			},
		// 			{
		// 				Name: to.Ptr("vacuum_freeze_min_age"),
		// 				Type: to.Ptr("Microsoft.DBforPostgreSQL/flexibleServers/configurations"),
		// 				ID: to.Ptr("/subscriptions/ffffffff-ffff-ffff-ffff-ffffffffffff/resourceGroups/exampleresourcegroup/providers/Microsoft.DBforPostgreSQL/flexibleServers/exampleserver/configurations/vacuum_freeze_min_age"),
		// 				Properties: &armpostgresql.ConfigurationProperties{
		// 					Description: to.Ptr("Specifies the cutoff age (in transactions) that VACUUM should use to decide whether to freeze row versions while scanning a table."),
		// 					AllowedValues: to.Ptr("0-1000000000"),
		// 					DataType: to.Ptr(armpostgresql.ConfigurationDataTypeInteger),
		// 					DefaultValue: to.Ptr("50000000"),
		// 					DocumentationLink: to.Ptr("https://www.postgresql.org/docs/13/runtime-config-client.html#GUC-VACUUM-FREEZE-MIN-AGE"),
		// 					IsConfigPendingRestart: to.Ptr(false),
		// 					IsDynamicConfig: to.Ptr(true),
		// 					IsReadOnly: to.Ptr(false),
		// 					Source: to.Ptr("system-default"),
		// 					Value: to.Ptr("50000000"),
		// 				},
		// 			},
		// 			{
		// 				Name: to.Ptr("vacuum_freeze_table_age"),
		// 				Type: to.Ptr("Microsoft.DBforPostgreSQL/flexibleServers/configurations"),
		// 				ID: to.Ptr("/subscriptions/ffffffff-ffff-ffff-ffff-ffffffffffff/resourceGroups/exampleresourcegroup/providers/Microsoft.DBforPostgreSQL/flexibleServers/exampleserver/configurations/vacuum_freeze_table_age"),
		// 				Properties: &armpostgresql.ConfigurationProperties{
		// 					Description: to.Ptr("Age at which VACUUM should scan whole table to freeze tuples."),
		// 					AllowedValues: to.Ptr("0-2000000000"),
		// 					DataType: to.Ptr(armpostgresql.ConfigurationDataTypeInteger),
		// 					DefaultValue: to.Ptr("150000000"),
		// 					DocumentationLink: to.Ptr("https://www.postgresql.org/docs/13/runtime-config-client.html#GUC-VACUUM-FREEZE-TABLE-AGE"),
		// 					IsConfigPendingRestart: to.Ptr(false),
		// 					IsDynamicConfig: to.Ptr(true),
		// 					IsReadOnly: to.Ptr(false),
		// 					Source: to.Ptr("system-default"),
		// 					Value: to.Ptr("150000000"),
		// 				},
		// 			},
		// 			{
		// 				Name: to.Ptr("vacuum_multixact_freeze_min_age"),
		// 				Type: to.Ptr("Microsoft.DBforPostgreSQL/flexibleServers/configurations"),
		// 				ID: to.Ptr("/subscriptions/ffffffff-ffff-ffff-ffff-ffffffffffff/resourceGroups/exampleresourcegroup/providers/Microsoft.DBforPostgreSQL/flexibleServers/exampleserver/configurations/vacuum_multixact_freeze_min_age"),
		// 				Properties: &armpostgresql.ConfigurationProperties{
		// 					Description: to.Ptr("Specifies the cutoff age (in multixacts) that VACUUM should use to decide whether to replace multixact IDs with a newer transaction ID or multixact ID while scanning a table."),
		// 					AllowedValues: to.Ptr("0-1000000000"),
		// 					DataType: to.Ptr(armpostgresql.ConfigurationDataTypeInteger),
		// 					DefaultValue: to.Ptr("5000000"),
		// 					DocumentationLink: to.Ptr("https://www.postgresql.org/docs/13/runtime-config-client.html#GUC-VACUUM-MULTIXACT-FREEZE-MIN-AGE"),
		// 					IsConfigPendingRestart: to.Ptr(false),
		// 					IsDynamicConfig: to.Ptr(true),
		// 					IsReadOnly: to.Ptr(false),
		// 					Source: to.Ptr("system-default"),
		// 					Value: to.Ptr("5000000"),
		// 				},
		// 			},
		// 			{
		// 				Name: to.Ptr("vacuum_multixact_freeze_table_age"),
		// 				Type: to.Ptr("Microsoft.DBforPostgreSQL/flexibleServers/configurations"),
		// 				ID: to.Ptr("/subscriptions/ffffffff-ffff-ffff-ffff-ffffffffffff/resourceGroups/exampleresourcegroup/providers/Microsoft.DBforPostgreSQL/flexibleServers/exampleserver/configurations/vacuum_multixact_freeze_table_age"),
		// 				Properties: &armpostgresql.ConfigurationProperties{
		// 					Description: to.Ptr("VACUUM performs a full table scan to freeze rows if the table has reached the age specified by this setting."),
		// 					AllowedValues: to.Ptr("0-2000000000"),
		// 					DataType: to.Ptr(armpostgresql.ConfigurationDataTypeInteger),
		// 					DefaultValue: to.Ptr("150000000"),
		// 					DocumentationLink: to.Ptr("https://www.postgresql.org/docs/13/runtime-config-client.html#GUC-VACUUM-MULTIXACT-FREEZE-TABLE-AGE"),
		// 					IsConfigPendingRestart: to.Ptr(false),
		// 					IsDynamicConfig: to.Ptr(true),
		// 					IsReadOnly: to.Ptr(false),
		// 					Source: to.Ptr("system-default"),
		// 					Value: to.Ptr("150000000"),
		// 				},
		// 			},
		// 			{
		// 				Name: to.Ptr("wal_block_size"),
		// 				Type: to.Ptr("Microsoft.DBforPostgreSQL/flexibleServers/configurations"),
		// 				ID: to.Ptr("/subscriptions/ffffffff-ffff-ffff-ffff-ffffffffffff/resourceGroups/exampleresourcegroup/providers/Microsoft.DBforPostgreSQL/flexibleServers/exampleserver/configurations/wal_block_size"),
		// 				Properties: &armpostgresql.ConfigurationProperties{
		// 					Description: to.Ptr("Shows the block size in the write ahead log."),
		// 					AllowedValues: to.Ptr("8192-8192"),
		// 					DataType: to.Ptr(armpostgresql.ConfigurationDataTypeInteger),
		// 					DefaultValue: to.Ptr("8192"),
		// 					DocumentationLink: to.Ptr("https://www.postgresql.org/docs/13/runtime-config-preset.html#GUC-WAL-BLOCK-SIZE"),
		// 					IsConfigPendingRestart: to.Ptr(false),
		// 					IsDynamicConfig: to.Ptr(true),
		// 					IsReadOnly: to.Ptr(true),
		// 					Source: to.Ptr("system-default"),
		// 					Value: to.Ptr("8192"),
		// 				},
		// 			},
		// 			{
		// 				Name: to.Ptr("wal_buffers"),
		// 				Type: to.Ptr("Microsoft.DBforPostgreSQL/flexibleServers/configurations"),
		// 				ID: to.Ptr("/subscriptions/ffffffff-ffff-ffff-ffff-ffffffffffff/resourceGroups/exampleresourcegroup/providers/Microsoft.DBforPostgreSQL/flexibleServers/exampleserver/configurations/wal_buffers"),
		// 				Properties: &armpostgresql.ConfigurationProperties{
		// 					Description: to.Ptr("Sets the number of disk-page buffers in shared memory for WAL. Unit is 8kb."),
		// 					AllowedValues: to.Ptr("-1-262143"),
		// 					DataType: to.Ptr(armpostgresql.ConfigurationDataTypeInteger),
		// 					DefaultValue: to.Ptr("2048"),
		// 					DocumentationLink: to.Ptr("https://www.postgresql.org/docs/13/runtime-config-wal.html#GUC-WAL-BUFFERS"),
		// 					IsConfigPendingRestart: to.Ptr(false),
		// 					IsDynamicConfig: to.Ptr(false),
		// 					IsReadOnly: to.Ptr(false),
		// 					Source: to.Ptr("system-default"),
		// 					Unit: to.Ptr("8KB"),
		// 					Value: to.Ptr("2048"),
		// 				},
		// 			},
		// 			{
		// 				Name: to.Ptr("wal_compression"),
		// 				Type: to.Ptr("Microsoft.DBforPostgreSQL/flexibleServers/configurations"),
		// 				ID: to.Ptr("/subscriptions/ffffffff-ffff-ffff-ffff-ffffffffffff/resourceGroups/exampleresourcegroup/providers/Microsoft.DBforPostgreSQL/flexibleServers/exampleserver/configurations/wal_compression"),
		// 				Properties: &armpostgresql.ConfigurationProperties{
		// 					Description: to.Ptr("Compresses full-page writes written in WAL file."),
		// 					AllowedValues: to.Ptr("on,off"),
		// 					DataType: to.Ptr(armpostgresql.ConfigurationDataTypeBoolean),
		// 					DefaultValue: to.Ptr("on"),
		// 					DocumentationLink: to.Ptr("https://www.postgresql.org/docs/13/runtime-config-wal.html#GUC-WAL-COMPRESSION"),
		// 					IsConfigPendingRestart: to.Ptr(false),
		// 					IsDynamicConfig: to.Ptr(true),
		// 					IsReadOnly: to.Ptr(false),
		// 					Source: to.Ptr("system-default"),
		// 					Value: to.Ptr("on"),
		// 				},
		// 			},
		// 			{
		// 				Name: to.Ptr("wal_consistency_checking"),
		// 				Type: to.Ptr("Microsoft.DBforPostgreSQL/flexibleServers/configurations"),
		// 				ID: to.Ptr("/subscriptions/ffffffff-ffff-ffff-ffff-ffffffffffff/resourceGroups/exampleresourcegroup/providers/Microsoft.DBforPostgreSQL/flexibleServers/exampleserver/configurations/wal_consistency_checking"),
		// 				Properties: &armpostgresql.ConfigurationProperties{
		// 					Description: to.Ptr("Sets the WAL resource managers for which WAL consistency checks are done."),
		// 					AllowedValues: to.Ptr(".*"),
		// 					DataType: to.Ptr(armpostgresql.ConfigurationDataTypeString),
		// 					DefaultValue: to.Ptr(""),
		// 					DocumentationLink: to.Ptr("https://www.postgresql.org/docs/13/runtime-config-developer.html#GUC-WAL-CONSISTENCY-CHECKING"),
		// 					IsConfigPendingRestart: to.Ptr(false),
		// 					IsDynamicConfig: to.Ptr(true),
		// 					IsReadOnly: to.Ptr(true),
		// 					Source: to.Ptr("system-default"),
		// 					Value: to.Ptr(""),
		// 				},
		// 			},
		// 			{
		// 				Name: to.Ptr("wal_init_zero"),
		// 				Type: to.Ptr("Microsoft.DBforPostgreSQL/flexibleServers/configurations"),
		// 				ID: to.Ptr("/subscriptions/ffffffff-ffff-ffff-ffff-ffffffffffff/resourceGroups/exampleresourcegroup/providers/Microsoft.DBforPostgreSQL/flexibleServers/exampleserver/configurations/wal_init_zero"),
		// 				Properties: &armpostgresql.ConfigurationProperties{
		// 					Description: to.Ptr("Writes zeroes to new WAL files before first use."),
		// 					AllowedValues: to.Ptr("on,off"),
		// 					DataType: to.Ptr(armpostgresql.ConfigurationDataTypeBoolean),
		// 					DefaultValue: to.Ptr("on"),
		// 					DocumentationLink: to.Ptr("https://www.postgresql.org/docs/13/runtime-config-wal.html#GUC-WAL-INIT-ZERO"),
		// 					IsConfigPendingRestart: to.Ptr(false),
		// 					IsDynamicConfig: to.Ptr(true),
		// 					IsReadOnly: to.Ptr(true),
		// 					Source: to.Ptr("system-default"),
		// 					Value: to.Ptr("on"),
		// 				},
		// 			},
		// 			{
		// 				Name: to.Ptr("wal_keep_size"),
		// 				Type: to.Ptr("Microsoft.DBforPostgreSQL/flexibleServers/configurations"),
		// 				ID: to.Ptr("/subscriptions/ffffffff-ffff-ffff-ffff-ffffffffffff/resourceGroups/exampleresourcegroup/providers/Microsoft.DBforPostgreSQL/flexibleServers/exampleserver/configurations/wal_keep_size"),
		// 				Properties: &armpostgresql.ConfigurationProperties{
		// 					Description: to.Ptr("Sets the size of WAL files held for standby servers."),
		// 					AllowedValues: to.Ptr("0-2147483647"),
		// 					DataType: to.Ptr(armpostgresql.ConfigurationDataTypeInteger),
		// 					DefaultValue: to.Ptr("0"),
		// 					DocumentationLink: to.Ptr("https://www.postgresql.org/docs/13/runtime-config-replication.html#GUC-WAL-KEEP-SIZE"),
		// 					IsConfigPendingRestart: to.Ptr(false),
		// 					IsDynamicConfig: to.Ptr(true),
		// 					IsReadOnly: to.Ptr(true),
		// 					Source: to.Ptr("user-override"),
		// 					Unit: to.Ptr("megabytes"),
		// 					Value: to.Ptr("400"),
		// 				},
		// 			},
		// 			{
		// 				Name: to.Ptr("wal_level"),
		// 				Type: to.Ptr("Microsoft.DBforPostgreSQL/flexibleServers/configurations"),
		// 				ID: to.Ptr("/subscriptions/ffffffff-ffff-ffff-ffff-ffffffffffff/resourceGroups/exampleresourcegroup/providers/Microsoft.DBforPostgreSQL/flexibleServers/exampleserver/configurations/wal_level"),
		// 				Properties: &armpostgresql.ConfigurationProperties{
		// 					Description: to.Ptr("It determines how much information is written to the WAL."),
		// 					AllowedValues: to.Ptr("replica,logical"),
		// 					DataType: to.Ptr(armpostgresql.ConfigurationDataTypeEnumeration),
		// 					DefaultValue: to.Ptr("replica"),
		// 					DocumentationLink: to.Ptr("https://www.postgresql.org/docs/13/runtime-config-wal.html#GUC-WAL-LEVEL"),
		// 					IsConfigPendingRestart: to.Ptr(false),
		// 					IsDynamicConfig: to.Ptr(false),
		// 					IsReadOnly: to.Ptr(false),
		// 					Source: to.Ptr("system-default"),
		// 					Value: to.Ptr("replica"),
		// 				},
		// 			},
		// 			{
		// 				Name: to.Ptr("wal_log_hints"),
		// 				Type: to.Ptr("Microsoft.DBforPostgreSQL/flexibleServers/configurations"),
		// 				ID: to.Ptr("/subscriptions/ffffffff-ffff-ffff-ffff-ffffffffffff/resourceGroups/exampleresourcegroup/providers/Microsoft.DBforPostgreSQL/flexibleServers/exampleserver/configurations/wal_log_hints"),
		// 				Properties: &armpostgresql.ConfigurationProperties{
		// 					Description: to.Ptr("Writes full pages to WAL when first modified after a checkpoint, even for a non-critical modification."),
		// 					AllowedValues: to.Ptr("on,off"),
		// 					DataType: to.Ptr(armpostgresql.ConfigurationDataTypeBoolean),
		// 					DefaultValue: to.Ptr("off"),
		// 					DocumentationLink: to.Ptr("https://www.postgresql.org/docs/13/runtime-config-wal.html#GUC-WAL-LOG-HINTS"),
		// 					IsConfigPendingRestart: to.Ptr(false),
		// 					IsDynamicConfig: to.Ptr(false),
		// 					IsReadOnly: to.Ptr(true),
		// 					Source: to.Ptr("system-default"),
		// 					Value: to.Ptr("off"),
		// 				},
		// 			},
		// 			{
		// 				Name: to.Ptr("wal_receiver_create_temp_slot"),
		// 				Type: to.Ptr("Microsoft.DBforPostgreSQL/flexibleServers/configurations"),
		// 				ID: to.Ptr("/subscriptions/ffffffff-ffff-ffff-ffff-ffffffffffff/resourceGroups/exampleresourcegroup/providers/Microsoft.DBforPostgreSQL/flexibleServers/exampleserver/configurations/wal_receiver_create_temp_slot"),
		// 				Properties: &armpostgresql.ConfigurationProperties{
		// 					Description: to.Ptr("Sets whether a WAL receiver should create a temporary replication slot if no permanent slot is configured."),
		// 					AllowedValues: to.Ptr("on,off"),
		// 					DataType: to.Ptr(armpostgresql.ConfigurationDataTypeBoolean),
		// 					DefaultValue: to.Ptr("off"),
		// 					DocumentationLink: to.Ptr("https://www.postgresql.org/docs/13/runtime-config-replication.html#GUC-WAL-RECEIVER-CREATE-TEMP-SLOT"),
		// 					IsConfigPendingRestart: to.Ptr(false),
		// 					IsDynamicConfig: to.Ptr(true),
		// 					IsReadOnly: to.Ptr(true),
		// 					Source: to.Ptr("system-default"),
		// 					Value: to.Ptr("off"),
		// 				},
		// 			},
		// 			{
		// 				Name: to.Ptr("wal_receiver_status_interval"),
		// 				Type: to.Ptr("Microsoft.DBforPostgreSQL/flexibleServers/configurations"),
		// 				ID: to.Ptr("/subscriptions/ffffffff-ffff-ffff-ffff-ffffffffffff/resourceGroups/exampleresourcegroup/providers/Microsoft.DBforPostgreSQL/flexibleServers/exampleserver/configurations/wal_receiver_status_interval"),
		// 				Properties: &armpostgresql.ConfigurationProperties{
		// 					Description: to.Ptr("Sets the maximum interval between WAL receiver status reports to the primary."),
		// 					AllowedValues: to.Ptr("0-2147483"),
		// 					DataType: to.Ptr(armpostgresql.ConfigurationDataTypeInteger),
		// 					DefaultValue: to.Ptr("10"),
		// 					DocumentationLink: to.Ptr("https://www.postgresql.org/docs/13/runtime-config-replication.html#GUC-WAL-RECEIVER-STATUS-INTERVAL"),
		// 					IsConfigPendingRestart: to.Ptr(false),
		// 					IsDynamicConfig: to.Ptr(true),
		// 					IsReadOnly: to.Ptr(false),
		// 					Source: to.Ptr("system-default"),
		// 					Unit: to.Ptr("seconds"),
		// 					Value: to.Ptr("10"),
		// 				},
		// 			},
		// 			{
		// 				Name: to.Ptr("wal_receiver_timeout"),
		// 				Type: to.Ptr("Microsoft.DBforPostgreSQL/flexibleServers/configurations"),
		// 				ID: to.Ptr("/subscriptions/ffffffff-ffff-ffff-ffff-ffffffffffff/resourceGroups/exampleresourcegroup/providers/Microsoft.DBforPostgreSQL/flexibleServers/exampleserver/configurations/wal_receiver_timeout"),
		// 				Properties: &armpostgresql.ConfigurationProperties{
		// 					Description: to.Ptr("Sets the maximum wait time to receive data from the sending server."),
		// 					AllowedValues: to.Ptr("0-2147483647"),
		// 					DataType: to.Ptr(armpostgresql.ConfigurationDataTypeInteger),
		// 					DefaultValue: to.Ptr("60000"),
		// 					DocumentationLink: to.Ptr("https://www.postgresql.org/docs/13/runtime-config-replication.html#GUC-WAL-RECEIVER-TIMEOUT"),
		// 					IsConfigPendingRestart: to.Ptr(false),
		// 					IsDynamicConfig: to.Ptr(true),
		// 					IsReadOnly: to.Ptr(false),
		// 					Source: to.Ptr("system-default"),
		// 					Unit: to.Ptr("milliseconds"),
		// 					Value: to.Ptr("60000"),
		// 				},
		// 			},
		// 			{
		// 				Name: to.Ptr("wal_recycle"),
		// 				Type: to.Ptr("Microsoft.DBforPostgreSQL/flexibleServers/configurations"),
		// 				ID: to.Ptr("/subscriptions/ffffffff-ffff-ffff-ffff-ffffffffffff/resourceGroups/exampleresourcegroup/providers/Microsoft.DBforPostgreSQL/flexibleServers/exampleserver/configurations/wal_recycle"),
		// 				Properties: &armpostgresql.ConfigurationProperties{
		// 					Description: to.Ptr("Recycles WAL files by renaming them."),
		// 					AllowedValues: to.Ptr("on,off"),
		// 					DataType: to.Ptr(armpostgresql.ConfigurationDataTypeBoolean),
		// 					DefaultValue: to.Ptr("on"),
		// 					DocumentationLink: to.Ptr("https://www.postgresql.org/docs/13/runtime-config-wal.html#GUC-WAL-RECYCLE"),
		// 					IsConfigPendingRestart: to.Ptr(false),
		// 					IsDynamicConfig: to.Ptr(true),
		// 					IsReadOnly: to.Ptr(true),
		// 					Source: to.Ptr("system-default"),
		// 					Value: to.Ptr("on"),
		// 				},
		// 			},
		// 			{
		// 				Name: to.Ptr("wal_retrieve_retry_interval"),
		// 				Type: to.Ptr("Microsoft.DBforPostgreSQL/flexibleServers/configurations"),
		// 				ID: to.Ptr("/subscriptions/ffffffff-ffff-ffff-ffff-ffffffffffff/resourceGroups/exampleresourcegroup/providers/Microsoft.DBforPostgreSQL/flexibleServers/exampleserver/configurations/wal_retrieve_retry_interval"),
		// 				Properties: &armpostgresql.ConfigurationProperties{
		// 					Description: to.Ptr("Sets the time to wait before retrying to retrieve WAL after a failed attempt."),
		// 					AllowedValues: to.Ptr("1-2147483647"),
		// 					DataType: to.Ptr(armpostgresql.ConfigurationDataTypeInteger),
		// 					DefaultValue: to.Ptr("5000"),
		// 					DocumentationLink: to.Ptr("https://www.postgresql.org/docs/13/runtime-config-replication.html#GUC-WAL-RETRIEVE-RETRY-INTERVAL"),
		// 					IsConfigPendingRestart: to.Ptr(false),
		// 					IsDynamicConfig: to.Ptr(true),
		// 					IsReadOnly: to.Ptr(true),
		// 					Source: to.Ptr("system-default"),
		// 					Unit: to.Ptr("milliseconds"),
		// 					Value: to.Ptr("5000"),
		// 				},
		// 			},
		// 			{
		// 				Name: to.Ptr("wal_segment_size"),
		// 				Type: to.Ptr("Microsoft.DBforPostgreSQL/flexibleServers/configurations"),
		// 				ID: to.Ptr("/subscriptions/ffffffff-ffff-ffff-ffff-ffffffffffff/resourceGroups/exampleresourcegroup/providers/Microsoft.DBforPostgreSQL/flexibleServers/exampleserver/configurations/wal_segment_size"),
		// 				Properties: &armpostgresql.ConfigurationProperties{
		// 					Description: to.Ptr("Shows the size of write ahead log segments."),
		// 					AllowedValues: to.Ptr("1048576-1073741824"),
		// 					DataType: to.Ptr(armpostgresql.ConfigurationDataTypeInteger),
		// 					DefaultValue: to.Ptr("16777216"),
		// 					DocumentationLink: to.Ptr("https://www.postgresql.org/docs/13/runtime-config-preset.html#GUC-WAL-SEGMENT-SIZE"),
		// 					IsConfigPendingRestart: to.Ptr(false),
		// 					IsDynamicConfig: to.Ptr(true),
		// 					IsReadOnly: to.Ptr(true),
		// 					Source: to.Ptr("system-default"),
		// 					Unit: to.Ptr("bytes"),
		// 					Value: to.Ptr("16777216"),
		// 				},
		// 			},
		// 			{
		// 				Name: to.Ptr("wal_sender_timeout"),
		// 				Type: to.Ptr("Microsoft.DBforPostgreSQL/flexibleServers/configurations"),
		// 				ID: to.Ptr("/subscriptions/ffffffff-ffff-ffff-ffff-ffffffffffff/resourceGroups/exampleresourcegroup/providers/Microsoft.DBforPostgreSQL/flexibleServers/exampleserver/configurations/wal_sender_timeout"),
		// 				Properties: &armpostgresql.ConfigurationProperties{
		// 					Description: to.Ptr("Sets the maximum time to wait for WAL replication."),
		// 					AllowedValues: to.Ptr("0-2147483647"),
		// 					DataType: to.Ptr(armpostgresql.ConfigurationDataTypeInteger),
		// 					DefaultValue: to.Ptr("60000"),
		// 					DocumentationLink: to.Ptr("https://www.postgresql.org/docs/13/runtime-config-replication.html#GUC-WAL-SENDER-TIMEOUT"),
		// 					IsConfigPendingRestart: to.Ptr(false),
		// 					IsDynamicConfig: to.Ptr(true),
		// 					IsReadOnly: to.Ptr(false),
		// 					Source: to.Ptr("system-default"),
		// 					Unit: to.Ptr("milliseconds"),
		// 					Value: to.Ptr("60000"),
		// 				},
		// 			},
		// 			{
		// 				Name: to.Ptr("wal_skip_threshold"),
		// 				Type: to.Ptr("Microsoft.DBforPostgreSQL/flexibleServers/configurations"),
		// 				ID: to.Ptr("/subscriptions/ffffffff-ffff-ffff-ffff-ffffffffffff/resourceGroups/exampleresourcegroup/providers/Microsoft.DBforPostgreSQL/flexibleServers/exampleserver/configurations/wal_skip_threshold"),
		// 				Properties: &armpostgresql.ConfigurationProperties{
		// 					Description: to.Ptr("Size of new file to fsync instead of writing WAL."),
		// 					AllowedValues: to.Ptr("0-2147483647"),
		// 					DataType: to.Ptr(armpostgresql.ConfigurationDataTypeInteger),
		// 					DefaultValue: to.Ptr("2048"),
		// 					DocumentationLink: to.Ptr("https://www.postgresql.org/docs/13/runtime-config-wal.html#GUC-WAL-SKIP-THRESHOLD"),
		// 					IsConfigPendingRestart: to.Ptr(false),
		// 					IsDynamicConfig: to.Ptr(true),
		// 					IsReadOnly: to.Ptr(true),
		// 					Source: to.Ptr("system-default"),
		// 					Unit: to.Ptr("KB"),
		// 					Value: to.Ptr("2048"),
		// 				},
		// 			},
		// 			{
		// 				Name: to.Ptr("wal_sync_method"),
		// 				Type: to.Ptr("Microsoft.DBforPostgreSQL/flexibleServers/configurations"),
		// 				ID: to.Ptr("/subscriptions/ffffffff-ffff-ffff-ffff-ffffffffffff/resourceGroups/exampleresourcegroup/providers/Microsoft.DBforPostgreSQL/flexibleServers/exampleserver/configurations/wal_sync_method"),
		// 				Properties: &armpostgresql.ConfigurationProperties{
		// 					Description: to.Ptr("Selects the method used for forcing WAL updates to disk."),
		// 					AllowedValues: to.Ptr("fsync,fdatasync,open_sync,open_datasync"),
		// 					DataType: to.Ptr(armpostgresql.ConfigurationDataTypeEnumeration),
		// 					DefaultValue: to.Ptr("fdatasync"),
		// 					DocumentationLink: to.Ptr("https://www.postgresql.org/docs/13/runtime-config-wal.html#GUC-WAL-SYNC-METHOD"),
		// 					IsConfigPendingRestart: to.Ptr(false),
		// 					IsDynamicConfig: to.Ptr(true),
		// 					IsReadOnly: to.Ptr(true),
		// 					Source: to.Ptr("system-default"),
		// 					Value: to.Ptr("fdatasync"),
		// 				},
		// 			},
		// 			{
		// 				Name: to.Ptr("wal_writer_delay"),
		// 				Type: to.Ptr("Microsoft.DBforPostgreSQL/flexibleServers/configurations"),
		// 				ID: to.Ptr("/subscriptions/ffffffff-ffff-ffff-ffff-ffffffffffff/resourceGroups/exampleresourcegroup/providers/Microsoft.DBforPostgreSQL/flexibleServers/exampleserver/configurations/wal_writer_delay"),
		// 				Properties: &armpostgresql.ConfigurationProperties{
		// 					Description: to.Ptr("Time interval between WAL flushes performed by the WAL writer."),
		// 					AllowedValues: to.Ptr("1-10000"),
		// 					DataType: to.Ptr(armpostgresql.ConfigurationDataTypeInteger),
		// 					DefaultValue: to.Ptr("200"),
		// 					DocumentationLink: to.Ptr("https://www.postgresql.org/docs/13/runtime-config-wal.html#GUC-WAL-WRITER-DELAY"),
		// 					IsConfigPendingRestart: to.Ptr(false),
		// 					IsDynamicConfig: to.Ptr(true),
		// 					IsReadOnly: to.Ptr(false),
		// 					Source: to.Ptr("system-default"),
		// 					Unit: to.Ptr("milliseconds"),
		// 					Value: to.Ptr("200"),
		// 				},
		// 			},
		// 			{
		// 				Name: to.Ptr("wal_writer_flush_after"),
		// 				Type: to.Ptr("Microsoft.DBforPostgreSQL/flexibleServers/configurations"),
		// 				ID: to.Ptr("/subscriptions/ffffffff-ffff-ffff-ffff-ffffffffffff/resourceGroups/exampleresourcegroup/providers/Microsoft.DBforPostgreSQL/flexibleServers/exampleserver/configurations/wal_writer_flush_after"),
		// 				Properties: &armpostgresql.ConfigurationProperties{
		// 					Description: to.Ptr("Amount of WAL written out by WAL writer that triggers a flush."),
		// 					AllowedValues: to.Ptr("0-2147483647"),
		// 					DataType: to.Ptr(armpostgresql.ConfigurationDataTypeInteger),
		// 					DefaultValue: to.Ptr("128"),
		// 					DocumentationLink: to.Ptr("https://www.postgresql.org/docs/13/runtime-config-wal.html#GUC-WAL-WRITER-FLUSH-AFTER"),
		// 					IsConfigPendingRestart: to.Ptr(false),
		// 					IsDynamicConfig: to.Ptr(true),
		// 					IsReadOnly: to.Ptr(false),
		// 					Source: to.Ptr("system-default"),
		// 					Unit: to.Ptr("8KB"),
		// 					Value: to.Ptr("128"),
		// 				},
		// 			},
		// 			{
		// 				Name: to.Ptr("work_mem"),
		// 				Type: to.Ptr("Microsoft.DBforPostgreSQL/flexibleServers/configurations"),
		// 				ID: to.Ptr("/subscriptions/ffffffff-ffff-ffff-ffff-ffffffffffff/resourceGroups/exampleresourcegroup/providers/Microsoft.DBforPostgreSQL/flexibleServers/exampleserver/configurations/work_mem"),
		// 				Properties: &armpostgresql.ConfigurationProperties{
		// 					Description: to.Ptr("Sets the amount of memory to be used by internal sort operations and hash tables before writing to temporary disk files."),
		// 					AllowedValues: to.Ptr("4096-2097151"),
		// 					DataType: to.Ptr(armpostgresql.ConfigurationDataTypeInteger),
		// 					DefaultValue: to.Ptr("4096"),
		// 					DocumentationLink: to.Ptr("https://www.postgresql.org/docs/13/runtime-config-resource.html#GUC-WORK-MEM"),
		// 					IsConfigPendingRestart: to.Ptr(false),
		// 					IsDynamicConfig: to.Ptr(true),
		// 					IsReadOnly: to.Ptr(false),
		// 					Source: to.Ptr("system-default"),
		// 					Unit: to.Ptr("KB"),
		// 					Value: to.Ptr("4096"),
		// 				},
		// 			},
		// 			{
		// 				Name: to.Ptr("xmlbinary"),
		// 				Type: to.Ptr("Microsoft.DBforPostgreSQL/flexibleServers/configurations"),
		// 				ID: to.Ptr("/subscriptions/ffffffff-ffff-ffff-ffff-ffffffffffff/resourceGroups/exampleresourcegroup/providers/Microsoft.DBforPostgreSQL/flexibleServers/exampleserver/configurations/xmlbinary"),
		// 				Properties: &armpostgresql.ConfigurationProperties{
		// 					Description: to.Ptr("Sets how binary values are to be encoded in XML."),
		// 					AllowedValues: to.Ptr("base64,hex"),
		// 					DataType: to.Ptr(armpostgresql.ConfigurationDataTypeEnumeration),
		// 					DefaultValue: to.Ptr("base64"),
		// 					DocumentationLink: to.Ptr("https://www.postgresql.org/docs/13/runtime-config-client.html#GUC-XMLBINARY"),
		// 					IsConfigPendingRestart: to.Ptr(false),
		// 					IsDynamicConfig: to.Ptr(true),
		// 					IsReadOnly: to.Ptr(false),
		// 					Source: to.Ptr("system-default"),
		// 					Value: to.Ptr("base64"),
		// 				},
		// 			},
		// 			{
		// 				Name: to.Ptr("xmloption"),
		// 				Type: to.Ptr("Microsoft.DBforPostgreSQL/flexibleServers/configurations"),
		// 				ID: to.Ptr("/subscriptions/ffffffff-ffff-ffff-ffff-ffffffffffff/resourceGroups/exampleresourcegroup/providers/Microsoft.DBforPostgreSQL/flexibleServers/exampleserver/configurations/xmloption"),
		// 				Properties: &armpostgresql.ConfigurationProperties{
		// 					Description: to.Ptr("Sets whether XML data in implicit parsing and serialization operations is to be considered as documents or content fragments."),
		// 					AllowedValues: to.Ptr("content,document"),
		// 					DataType: to.Ptr(armpostgresql.ConfigurationDataTypeEnumeration),
		// 					DefaultValue: to.Ptr("content"),
		// 					DocumentationLink: to.Ptr("https://www.postgresql.org/docs/13/runtime-config-client.html#GUC-XMLOPTION"),
		// 					IsConfigPendingRestart: to.Ptr(false),
		// 					IsDynamicConfig: to.Ptr(true),
		// 					IsReadOnly: to.Ptr(false),
		// 					Source: to.Ptr("system-default"),
		// 					Value: to.Ptr("content"),
		// 				},
		// 			},
		// 			{
		// 				Name: to.Ptr("zero_damaged_pages"),
		// 				Type: to.Ptr("Microsoft.DBforPostgreSQL/flexibleServers/configurations"),
		// 				ID: to.Ptr("/subscriptions/ffffffff-ffff-ffff-ffff-ffffffffffff/resourceGroups/exampleresourcegroup/providers/Microsoft.DBforPostgreSQL/flexibleServers/exampleserver/configurations/zero_damaged_pages"),
		// 				Properties: &armpostgresql.ConfigurationProperties{
		// 					Description: to.Ptr("Continues processing past damaged page headers."),
		// 					AllowedValues: to.Ptr("on,off"),
		// 					DataType: to.Ptr(armpostgresql.ConfigurationDataTypeBoolean),
		// 					DefaultValue: to.Ptr("off"),
		// 					DocumentationLink: to.Ptr("https://www.postgresql.org/docs/13/runtime-config-developer.html#GUC-ZERO-DAMAGED-PAGES"),
		// 					IsConfigPendingRestart: to.Ptr(false),
		// 					IsDynamicConfig: to.Ptr(true),
		// 					IsReadOnly: to.Ptr(true),
		// 					Source: to.Ptr("system-default"),
		// 					Value: to.Ptr("off"),
		// 				},
		// 			},
		// 		},
		// 	},
		// }
	}
}

// Generated from example definition: 2025-08-01/ConfigurationsUpdateUsingPut.json
func ExampleConfigurationsClient_BeginPut() {
	cred, err := azidentity.NewDefaultAzureCredential(nil)
	if err != nil {
		log.Fatalf("failed to obtain a credential: %v", err)
	}
	ctx := context.Background()
	clientFactory, err := armpostgresql.NewClientFactory("ffffffff-ffff-ffff-ffff-ffffffffffff", cred, nil)
	if err != nil {
		log.Fatalf("failed to create client: %v", err)
	}
	poller, err := clientFactory.NewConfigurationsClient().BeginPut(ctx, "exampleresourcegroup", "exampleserver", "constraint_exclusion", armpostgresql.ConfigurationForUpdate{
		Properties: &armpostgresql.ConfigurationProperties{
			Source: to.Ptr("user-override"),
			Value:  to.Ptr("on"),
		},
	}, nil)
	if err != nil {
		log.Fatalf("failed to finish the request: %v", err)
	}
	_, err = poller.PollUntilDone(ctx, nil)
	if err != nil {
		log.Fatalf("failed to pull the result: %v", err)
	}
}

// Generated from example definition: 2025-08-01/ConfigurationsUpdate.json
func ExampleConfigurationsClient_BeginUpdate() {
	cred, err := azidentity.NewDefaultAzureCredential(nil)
	if err != nil {
		log.Fatalf("failed to obtain a credential: %v", err)
	}
	ctx := context.Background()
	clientFactory, err := armpostgresql.NewClientFactory("ffffffff-ffff-ffff-ffff-ffffffffffff", cred, nil)
	if err != nil {
		log.Fatalf("failed to create client: %v", err)
	}
	poller, err := clientFactory.NewConfigurationsClient().BeginUpdate(ctx, "exampleresourcegroup", "exampleserver", "constraint_exclusion", armpostgresql.ConfigurationForUpdate{
		Properties: &armpostgresql.ConfigurationProperties{
			Source: to.Ptr("user-override"),
			Value:  to.Ptr("on"),
		},
	}, nil)
	if err != nil {
		log.Fatalf("failed to finish the request: %v", err)
	}
	_, err = poller.PollUntilDone(ctx, nil)
	if err != nil {
		log.Fatalf("failed to pull the result: %v", err)
	}
}
