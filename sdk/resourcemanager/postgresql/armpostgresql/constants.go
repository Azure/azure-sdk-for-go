// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) Go Code Generator. DO NOT EDIT.

package armpostgresql

// AzureManagedDiskPerformanceTier - Storage tier of a server.
type AzureManagedDiskPerformanceTier string

const (
	AzureManagedDiskPerformanceTierP1  AzureManagedDiskPerformanceTier = "P1"
	AzureManagedDiskPerformanceTierP10 AzureManagedDiskPerformanceTier = "P10"
	AzureManagedDiskPerformanceTierP15 AzureManagedDiskPerformanceTier = "P15"
	AzureManagedDiskPerformanceTierP2  AzureManagedDiskPerformanceTier = "P2"
	AzureManagedDiskPerformanceTierP20 AzureManagedDiskPerformanceTier = "P20"
	AzureManagedDiskPerformanceTierP3  AzureManagedDiskPerformanceTier = "P3"
	AzureManagedDiskPerformanceTierP30 AzureManagedDiskPerformanceTier = "P30"
	AzureManagedDiskPerformanceTierP4  AzureManagedDiskPerformanceTier = "P4"
	AzureManagedDiskPerformanceTierP40 AzureManagedDiskPerformanceTier = "P40"
	AzureManagedDiskPerformanceTierP50 AzureManagedDiskPerformanceTier = "P50"
	AzureManagedDiskPerformanceTierP6  AzureManagedDiskPerformanceTier = "P6"
	AzureManagedDiskPerformanceTierP60 AzureManagedDiskPerformanceTier = "P60"
	AzureManagedDiskPerformanceTierP70 AzureManagedDiskPerformanceTier = "P70"
	AzureManagedDiskPerformanceTierP80 AzureManagedDiskPerformanceTier = "P80"
)

// PossibleAzureManagedDiskPerformanceTierValues returns the possible values for the AzureManagedDiskPerformanceTier const type.
func PossibleAzureManagedDiskPerformanceTierValues() []AzureManagedDiskPerformanceTier {
	return []AzureManagedDiskPerformanceTier{
		AzureManagedDiskPerformanceTierP1,
		AzureManagedDiskPerformanceTierP10,
		AzureManagedDiskPerformanceTierP15,
		AzureManagedDiskPerformanceTierP2,
		AzureManagedDiskPerformanceTierP20,
		AzureManagedDiskPerformanceTierP3,
		AzureManagedDiskPerformanceTierP30,
		AzureManagedDiskPerformanceTierP4,
		AzureManagedDiskPerformanceTierP40,
		AzureManagedDiskPerformanceTierP50,
		AzureManagedDiskPerformanceTierP6,
		AzureManagedDiskPerformanceTierP60,
		AzureManagedDiskPerformanceTierP70,
		AzureManagedDiskPerformanceTierP80,
	}
}

// BackupType - Type of backup.
type BackupType string

const (
	BackupTypeCustomerOnDemand BackupType = "Customer On-Demand"
	BackupTypeFull             BackupType = "Full"
)

// PossibleBackupTypeValues returns the possible values for the BackupType const type.
func PossibleBackupTypeValues() []BackupType {
	return []BackupType{
		BackupTypeCustomerOnDemand,
		BackupTypeFull,
	}
}

// Cancel - Indicates if cancel must be triggered for the entire migration.
type Cancel string

const (
	CancelFalse Cancel = "False"
	CancelTrue  Cancel = "True"
)

// PossibleCancelValues returns the possible values for the Cancel const type.
func PossibleCancelValues() []Cancel {
	return []Cancel{
		CancelFalse,
		CancelTrue,
	}
}

// CapabilityStatus - The status of the capability.
type CapabilityStatus string

const (
	CapabilityStatusAvailable CapabilityStatus = "Available"
	CapabilityStatusDefault   CapabilityStatus = "Default"
	CapabilityStatusDisabled  CapabilityStatus = "Disabled"
	CapabilityStatusVisible   CapabilityStatus = "Visible"
)

// PossibleCapabilityStatusValues returns the possible values for the CapabilityStatus const type.
func PossibleCapabilityStatusValues() []CapabilityStatus {
	return []CapabilityStatus{
		CapabilityStatusAvailable,
		CapabilityStatusDefault,
		CapabilityStatusDisabled,
		CapabilityStatusVisible,
	}
}

// CheckNameAvailabilityReason - Possible reasons for a name not being available.
type CheckNameAvailabilityReason string

const (
	// CheckNameAvailabilityReasonAlreadyExists - Name already exists.
	CheckNameAvailabilityReasonAlreadyExists CheckNameAvailabilityReason = "AlreadyExists"
	// CheckNameAvailabilityReasonInvalid - Name is invalid.
	CheckNameAvailabilityReasonInvalid CheckNameAvailabilityReason = "Invalid"
)

// PossibleCheckNameAvailabilityReasonValues returns the possible values for the CheckNameAvailabilityReason const type.
func PossibleCheckNameAvailabilityReasonValues() []CheckNameAvailabilityReason {
	return []CheckNameAvailabilityReason{
		CheckNameAvailabilityReasonAlreadyExists,
		CheckNameAvailabilityReasonInvalid,
	}
}

// ConfigurationDataType - Data type of the configuration (also known as server parameter).
type ConfigurationDataType string

const (
	ConfigurationDataTypeBoolean     ConfigurationDataType = "Boolean"
	ConfigurationDataTypeEnumeration ConfigurationDataType = "Enumeration"
	ConfigurationDataTypeInteger     ConfigurationDataType = "Integer"
	ConfigurationDataTypeNumeric     ConfigurationDataType = "Numeric"
	ConfigurationDataTypeSet         ConfigurationDataType = "Set"
	ConfigurationDataTypeString      ConfigurationDataType = "String"
)

// PossibleConfigurationDataTypeValues returns the possible values for the ConfigurationDataType const type.
func PossibleConfigurationDataTypeValues() []ConfigurationDataType {
	return []ConfigurationDataType{
		ConfigurationDataTypeBoolean,
		ConfigurationDataTypeEnumeration,
		ConfigurationDataTypeInteger,
		ConfigurationDataTypeNumeric,
		ConfigurationDataTypeSet,
		ConfigurationDataTypeString,
	}
}

// CreateMode - Creation mode of a new server.
type CreateMode string

const (
	CreateModeCreate             CreateMode = "Create"
	CreateModeDefault            CreateMode = "Default"
	CreateModeGeoRestore         CreateMode = "GeoRestore"
	CreateModePointInTimeRestore CreateMode = "PointInTimeRestore"
	CreateModeReplica            CreateMode = "Replica"
	CreateModeReviveDropped      CreateMode = "ReviveDropped"
	CreateModeUpdate             CreateMode = "Update"
)

// PossibleCreateModeValues returns the possible values for the CreateMode const type.
func PossibleCreateModeValues() []CreateMode {
	return []CreateMode{
		CreateModeCreate,
		CreateModeDefault,
		CreateModeGeoRestore,
		CreateModePointInTimeRestore,
		CreateModeReplica,
		CreateModeReviveDropped,
		CreateModeUpdate,
	}
}

// CreateModeForPatch - Update mode of an existing server.
type CreateModeForPatch string

const (
	CreateModeForPatchDefault CreateModeForPatch = "Default"
	CreateModeForPatchUpdate  CreateModeForPatch = "Update"
)

// PossibleCreateModeForPatchValues returns the possible values for the CreateModeForPatch const type.
func PossibleCreateModeForPatchValues() []CreateModeForPatch {
	return []CreateModeForPatch{
		CreateModeForPatchDefault,
		CreateModeForPatchUpdate,
	}
}

// CreatedByType - The kind of entity that created the resource.
type CreatedByType string

const (
	// CreatedByTypeApplication - The entity was created by an application.
	CreatedByTypeApplication CreatedByType = "Application"
	// CreatedByTypeKey - The entity was created by a key.
	CreatedByTypeKey CreatedByType = "Key"
	// CreatedByTypeManagedIdentity - The entity was created by a managed identity.
	CreatedByTypeManagedIdentity CreatedByType = "ManagedIdentity"
	// CreatedByTypeUser - The entity was created by a user.
	CreatedByTypeUser CreatedByType = "User"
)

// PossibleCreatedByTypeValues returns the possible values for the CreatedByType const type.
func PossibleCreatedByTypeValues() []CreatedByType {
	return []CreatedByType{
		CreatedByTypeApplication,
		CreatedByTypeKey,
		CreatedByTypeManagedIdentity,
		CreatedByTypeUser,
	}
}

// DataEncryptionType - Data encryption type used by a server.
type DataEncryptionType string

const (
	DataEncryptionTypeAzureKeyVault DataEncryptionType = "AzureKeyVault"
	DataEncryptionTypeSystemManaged DataEncryptionType = "SystemManaged"
)

// PossibleDataEncryptionTypeValues returns the possible values for the DataEncryptionType const type.
func PossibleDataEncryptionTypeValues() []DataEncryptionType {
	return []DataEncryptionType{
		DataEncryptionTypeAzureKeyVault,
		DataEncryptionTypeSystemManaged,
	}
}

// EncryptionKeyStatus - Status of key used by a server configured with data encryption based on customer managed key, to
// encrypt the primary storage associated to the server.
type EncryptionKeyStatus string

const (
	EncryptionKeyStatusInvalid EncryptionKeyStatus = "Invalid"
	EncryptionKeyStatusValid   EncryptionKeyStatus = "Valid"
)

// PossibleEncryptionKeyStatusValues returns the possible values for the EncryptionKeyStatus const type.
func PossibleEncryptionKeyStatusValues() []EncryptionKeyStatus {
	return []EncryptionKeyStatus{
		EncryptionKeyStatusInvalid,
		EncryptionKeyStatusValid,
	}
}

// ExecutionStatus - Service-set extensible enum indicating the status of operation
type ExecutionStatus string

const (
	ExecutionStatusCancelled ExecutionStatus = "Cancelled"
	ExecutionStatusFailed    ExecutionStatus = "Failed"
	ExecutionStatusRunning   ExecutionStatus = "Running"
	ExecutionStatusSucceeded ExecutionStatus = "Succeeded"
)

// PossibleExecutionStatusValues returns the possible values for the ExecutionStatus const type.
func PossibleExecutionStatusValues() []ExecutionStatus {
	return []ExecutionStatus{
		ExecutionStatusCancelled,
		ExecutionStatusFailed,
		ExecutionStatusRunning,
		ExecutionStatusSucceeded,
	}
}

// FailoverMode - Failover mode.
type FailoverMode string

const (
	FailoverModeForcedFailover    FailoverMode = "ForcedFailover"
	FailoverModeForcedSwitchover  FailoverMode = "ForcedSwitchover"
	FailoverModePlannedFailover   FailoverMode = "PlannedFailover"
	FailoverModePlannedSwitchover FailoverMode = "PlannedSwitchover"
)

// PossibleFailoverModeValues returns the possible values for the FailoverMode const type.
func PossibleFailoverModeValues() []FailoverMode {
	return []FailoverMode{
		FailoverModeForcedFailover,
		FailoverModeForcedSwitchover,
		FailoverModePlannedFailover,
		FailoverModePlannedSwitchover,
	}
}

// FastProvisioningSupport - Indicates if fast provisioning is supported. 'Enabled' means fast provisioning is supported.
// 'Disabled' stands for fast provisioning is not supported. Will be deprecated in the future. Look to Supported Features
// for 'FastProvisioning'.
type FastProvisioningSupport string

const (
	FastProvisioningSupportDisabled FastProvisioningSupport = "Disabled"
	FastProvisioningSupportEnabled  FastProvisioningSupport = "Enabled"
)

// PossibleFastProvisioningSupportValues returns the possible values for the FastProvisioningSupport const type.
func PossibleFastProvisioningSupportValues() []FastProvisioningSupport {
	return []FastProvisioningSupport{
		FastProvisioningSupportDisabled,
		FastProvisioningSupportEnabled,
	}
}

// FeatureStatus - Status of the feature. Indicates if the feature is enabled or not.
type FeatureStatus string

const (
	FeatureStatusDisabled FeatureStatus = "Disabled"
	FeatureStatusEnabled  FeatureStatus = "Enabled"
)

// PossibleFeatureStatusValues returns the possible values for the FeatureStatus const type.
func PossibleFeatureStatusValues() []FeatureStatus {
	return []FeatureStatus{
		FeatureStatusDisabled,
		FeatureStatusEnabled,
	}
}

// FlexibleServerHighAvailabilityMode - Modes of high availability supported for this compute.
type FlexibleServerHighAvailabilityMode string

const (
	FlexibleServerHighAvailabilityModeDisabled      FlexibleServerHighAvailabilityMode = "Disabled"
	FlexibleServerHighAvailabilityModeSameZone      FlexibleServerHighAvailabilityMode = "SameZone"
	FlexibleServerHighAvailabilityModeZoneRedundant FlexibleServerHighAvailabilityMode = "ZoneRedundant"
)

// PossibleFlexibleServerHighAvailabilityModeValues returns the possible values for the FlexibleServerHighAvailabilityMode const type.
func PossibleFlexibleServerHighAvailabilityModeValues() []FlexibleServerHighAvailabilityMode {
	return []FlexibleServerHighAvailabilityMode{
		FlexibleServerHighAvailabilityModeDisabled,
		FlexibleServerHighAvailabilityModeSameZone,
		FlexibleServerHighAvailabilityModeZoneRedundant,
	}
}

// GeographicallyRedundantBackup - Indicates if the server is configured to create geographically redundant backups.
type GeographicallyRedundantBackup string

const (
	GeographicallyRedundantBackupDisabled GeographicallyRedundantBackup = "Disabled"
	GeographicallyRedundantBackupEnabled  GeographicallyRedundantBackup = "Enabled"
)

// PossibleGeographicallyRedundantBackupValues returns the possible values for the GeographicallyRedundantBackup const type.
func PossibleGeographicallyRedundantBackupValues() []GeographicallyRedundantBackup {
	return []GeographicallyRedundantBackup{
		GeographicallyRedundantBackupDisabled,
		GeographicallyRedundantBackupEnabled,
	}
}

// GeographicallyRedundantBackupSupport - Indicates if geographically redundant backups are supported in this location. 'Enabled'
// means geographically redundant backups are supported. 'Disabled' stands for geographically redundant backup is not supported.
// Will be deprecated in the future. Look to Supported Features for 'GeoBackup'.
type GeographicallyRedundantBackupSupport string

const (
	GeographicallyRedundantBackupSupportDisabled GeographicallyRedundantBackupSupport = "Disabled"
	GeographicallyRedundantBackupSupportEnabled  GeographicallyRedundantBackupSupport = "Enabled"
)

// PossibleGeographicallyRedundantBackupSupportValues returns the possible values for the GeographicallyRedundantBackupSupport const type.
func PossibleGeographicallyRedundantBackupSupportValues() []GeographicallyRedundantBackupSupport {
	return []GeographicallyRedundantBackupSupport{
		GeographicallyRedundantBackupSupportDisabled,
		GeographicallyRedundantBackupSupportEnabled,
	}
}

// HighAvailabilityMode - Modes of high availability supported for this compute.
type HighAvailabilityMode string

const (
	HighAvailabilityModeSameZone      HighAvailabilityMode = "SameZone"
	HighAvailabilityModeZoneRedundant HighAvailabilityMode = "ZoneRedundant"
)

// PossibleHighAvailabilityModeValues returns the possible values for the HighAvailabilityMode const type.
func PossibleHighAvailabilityModeValues() []HighAvailabilityMode {
	return []HighAvailabilityMode{
		HighAvailabilityModeSameZone,
		HighAvailabilityModeZoneRedundant,
	}
}

// HighAvailabilityState - Possible states of the standby server created when high availability is set to SameZone or ZoneRedundant.
type HighAvailabilityState string

const (
	HighAvailabilityStateCreatingStandby HighAvailabilityState = "CreatingStandby"
	HighAvailabilityStateFailingOver     HighAvailabilityState = "FailingOver"
	HighAvailabilityStateHealthy         HighAvailabilityState = "Healthy"
	HighAvailabilityStateNotEnabled      HighAvailabilityState = "NotEnabled"
	HighAvailabilityStateRemovingStandby HighAvailabilityState = "RemovingStandby"
	HighAvailabilityStateReplicatingData HighAvailabilityState = "ReplicatingData"
)

// PossibleHighAvailabilityStateValues returns the possible values for the HighAvailabilityState const type.
func PossibleHighAvailabilityStateValues() []HighAvailabilityState {
	return []HighAvailabilityState{
		HighAvailabilityStateCreatingStandby,
		HighAvailabilityStateFailingOver,
		HighAvailabilityStateHealthy,
		HighAvailabilityStateNotEnabled,
		HighAvailabilityStateRemovingStandby,
		HighAvailabilityStateReplicatingData,
	}
}

// IdentityType - Types of identities associated with a server.
type IdentityType string

const (
	IdentityTypeNone                       IdentityType = "None"
	IdentityTypeSystemAssigned             IdentityType = "SystemAssigned"
	IdentityTypeSystemAssignedUserAssigned IdentityType = "SystemAssigned,UserAssigned"
	IdentityTypeUserAssigned               IdentityType = "UserAssigned"
)

// PossibleIdentityTypeValues returns the possible values for the IdentityType const type.
func PossibleIdentityTypeValues() []IdentityType {
	return []IdentityType{
		IdentityTypeNone,
		IdentityTypeSystemAssigned,
		IdentityTypeSystemAssignedUserAssigned,
		IdentityTypeUserAssigned,
	}
}

// LocationRestricted - Indicates if this location is restricted. 'Enabled' means location is restricted. 'Disabled' stands
// for location is not restricted. Will be deprecated in the future. Look to Supported Features for 'Restricted'.
type LocationRestricted string

const (
	LocationRestrictedDisabled LocationRestricted = "Disabled"
	LocationRestrictedEnabled  LocationRestricted = "Enabled"
)

// PossibleLocationRestrictedValues returns the possible values for the LocationRestricted const type.
func PossibleLocationRestrictedValues() []LocationRestricted {
	return []LocationRestricted{
		LocationRestrictedDisabled,
		LocationRestrictedEnabled,
	}
}

// LogicalReplicationOnSourceServer - Indicates whether to setup logical replication on source server, if needed.
type LogicalReplicationOnSourceServer string

const (
	LogicalReplicationOnSourceServerFalse LogicalReplicationOnSourceServer = "False"
	LogicalReplicationOnSourceServerTrue  LogicalReplicationOnSourceServer = "True"
)

// PossibleLogicalReplicationOnSourceServerValues returns the possible values for the LogicalReplicationOnSourceServer const type.
func PossibleLogicalReplicationOnSourceServerValues() []LogicalReplicationOnSourceServer {
	return []LogicalReplicationOnSourceServer{
		LogicalReplicationOnSourceServerFalse,
		LogicalReplicationOnSourceServerTrue,
	}
}

// MicrosoftEntraAuth - Indicates if the server supports Microsoft Entra authentication.
type MicrosoftEntraAuth string

const (
	MicrosoftEntraAuthDisabled MicrosoftEntraAuth = "Disabled"
	MicrosoftEntraAuthEnabled  MicrosoftEntraAuth = "Enabled"
)

// PossibleMicrosoftEntraAuthValues returns the possible values for the MicrosoftEntraAuth const type.
func PossibleMicrosoftEntraAuthValues() []MicrosoftEntraAuth {
	return []MicrosoftEntraAuth{
		MicrosoftEntraAuthDisabled,
		MicrosoftEntraAuthEnabled,
	}
}

// MigrateRolesAndPermissions - Indicates if roles and permissions must be migrated.
type MigrateRolesAndPermissions string

const (
	MigrateRolesAndPermissionsFalse MigrateRolesAndPermissions = "False"
	MigrateRolesAndPermissionsTrue  MigrateRolesAndPermissions = "True"
)

// PossibleMigrateRolesAndPermissionsValues returns the possible values for the MigrateRolesAndPermissions const type.
func PossibleMigrateRolesAndPermissionsValues() []MigrateRolesAndPermissions {
	return []MigrateRolesAndPermissions{
		MigrateRolesAndPermissionsFalse,
		MigrateRolesAndPermissionsTrue,
	}
}

// MigrationDatabaseState - Migration state of a database.
type MigrationDatabaseState string

const (
	MigrationDatabaseStateCanceled                 MigrationDatabaseState = "Canceled"
	MigrationDatabaseStateCanceling                MigrationDatabaseState = "Canceling"
	MigrationDatabaseStateFailed                   MigrationDatabaseState = "Failed"
	MigrationDatabaseStateInProgress               MigrationDatabaseState = "InProgress"
	MigrationDatabaseStateSucceeded                MigrationDatabaseState = "Succeeded"
	MigrationDatabaseStateWaitingForCutoverTrigger MigrationDatabaseState = "WaitingForCutoverTrigger"
)

// PossibleMigrationDatabaseStateValues returns the possible values for the MigrationDatabaseState const type.
func PossibleMigrationDatabaseStateValues() []MigrationDatabaseState {
	return []MigrationDatabaseState{
		MigrationDatabaseStateCanceled,
		MigrationDatabaseStateCanceling,
		MigrationDatabaseStateFailed,
		MigrationDatabaseStateInProgress,
		MigrationDatabaseStateSucceeded,
		MigrationDatabaseStateWaitingForCutoverTrigger,
	}
}

type MigrationListFilter string

const (
	MigrationListFilterActive MigrationListFilter = "Active"
	MigrationListFilterAll    MigrationListFilter = "All"
)

// PossibleMigrationListFilterValues returns the possible values for the MigrationListFilter const type.
func PossibleMigrationListFilterValues() []MigrationListFilter {
	return []MigrationListFilter{
		MigrationListFilterActive,
		MigrationListFilterAll,
	}
}

// MigrationMode - Mode used to perform the migration: Online or Offline.
type MigrationMode string

const (
	MigrationModeOffline MigrationMode = "Offline"
	MigrationModeOnline  MigrationMode = "Online"
)

// PossibleMigrationModeValues returns the possible values for the MigrationMode const type.
func PossibleMigrationModeValues() []MigrationMode {
	return []MigrationMode{
		MigrationModeOffline,
		MigrationModeOnline,
	}
}

// MigrationNameAvailabilityReason - Migration name availability reason.
type MigrationNameAvailabilityReason string

const (
	MigrationNameAvailabilityReasonAlreadyExists MigrationNameAvailabilityReason = "AlreadyExists"
	MigrationNameAvailabilityReasonInvalid       MigrationNameAvailabilityReason = "Invalid"
)

// PossibleMigrationNameAvailabilityReasonValues returns the possible values for the MigrationNameAvailabilityReason const type.
func PossibleMigrationNameAvailabilityReasonValues() []MigrationNameAvailabilityReason {
	return []MigrationNameAvailabilityReason{
		MigrationNameAvailabilityReasonAlreadyExists,
		MigrationNameAvailabilityReasonInvalid,
	}
}

// MigrationOption - Supported option for a migration
type MigrationOption string

const (
	MigrationOptionMigrate            MigrationOption = "Migrate"
	MigrationOptionValidate           MigrationOption = "Validate"
	MigrationOptionValidateAndMigrate MigrationOption = "ValidateAndMigrate"
)

// PossibleMigrationOptionValues returns the possible values for the MigrationOption const type.
func PossibleMigrationOptionValues() []MigrationOption {
	return []MigrationOption{
		MigrationOptionMigrate,
		MigrationOptionValidate,
		MigrationOptionValidateAndMigrate,
	}
}

// MigrationState - State of migration.
type MigrationState string

const (
	MigrationStateCanceled             MigrationState = "Canceled"
	MigrationStateCleaningUp           MigrationState = "CleaningUp"
	MigrationStateFailed               MigrationState = "Failed"
	MigrationStateInProgress           MigrationState = "InProgress"
	MigrationStateSucceeded            MigrationState = "Succeeded"
	MigrationStateValidationFailed     MigrationState = "ValidationFailed"
	MigrationStateWaitingForUserAction MigrationState = "WaitingForUserAction"
)

// PossibleMigrationStateValues returns the possible values for the MigrationState const type.
func PossibleMigrationStateValues() []MigrationState {
	return []MigrationState{
		MigrationStateCanceled,
		MigrationStateCleaningUp,
		MigrationStateFailed,
		MigrationStateInProgress,
		MigrationStateSucceeded,
		MigrationStateValidationFailed,
		MigrationStateWaitingForUserAction,
	}
}

// MigrationSubstate - Substate of migration.
type MigrationSubstate string

const (
	MigrationSubstateCancelingRequestedDBMigrations                     MigrationSubstate = "CancelingRequestedDBMigrations"
	MigrationSubstateCompleted                                          MigrationSubstate = "Completed"
	MigrationSubstateCompletingMigration                                MigrationSubstate = "CompletingMigration"
	MigrationSubstateMigratingData                                      MigrationSubstate = "MigratingData"
	MigrationSubstatePerformingPreRequisiteSteps                        MigrationSubstate = "PerformingPreRequisiteSteps"
	MigrationSubstateValidationInProgress                               MigrationSubstate = "ValidationInProgress"
	MigrationSubstateWaitingForCutoverTrigger                           MigrationSubstate = "WaitingForCutoverTrigger"
	MigrationSubstateWaitingForDBsToMigrateSpecification                MigrationSubstate = "WaitingForDBsToMigrateSpecification"
	MigrationSubstateWaitingForDataMigrationScheduling                  MigrationSubstate = "WaitingForDataMigrationScheduling"
	MigrationSubstateWaitingForDataMigrationWindow                      MigrationSubstate = "WaitingForDataMigrationWindow"
	MigrationSubstateWaitingForLogicalReplicationSetupRequestOnSourceDB MigrationSubstate = "WaitingForLogicalReplicationSetupRequestOnSourceDB"
	MigrationSubstateWaitingForTargetDBOverwriteConfirmation            MigrationSubstate = "WaitingForTargetDBOverwriteConfirmation"
)

// PossibleMigrationSubstateValues returns the possible values for the MigrationSubstate const type.
func PossibleMigrationSubstateValues() []MigrationSubstate {
	return []MigrationSubstate{
		MigrationSubstateCancelingRequestedDBMigrations,
		MigrationSubstateCompleted,
		MigrationSubstateCompletingMigration,
		MigrationSubstateMigratingData,
		MigrationSubstatePerformingPreRequisiteSteps,
		MigrationSubstateValidationInProgress,
		MigrationSubstateWaitingForCutoverTrigger,
		MigrationSubstateWaitingForDBsToMigrateSpecification,
		MigrationSubstateWaitingForDataMigrationScheduling,
		MigrationSubstateWaitingForDataMigrationWindow,
		MigrationSubstateWaitingForLogicalReplicationSetupRequestOnSourceDB,
		MigrationSubstateWaitingForTargetDBOverwriteConfirmation,
	}
}

// OnlineStorageResizeSupport - Indicates if resizing the storage, without interrupting the operation of the database engine,
// is supported in this location for the given subscription. 'Enabled' means resizing the storage without interrupting the
// operation of the database engine is supported. 'Disabled' means resizing the storage without interrupting the operation
// of the database engine is not supported. Will be deprecated in the future. Look to Supported Features for 'OnlineResize'.
type OnlineStorageResizeSupport string

const (
	OnlineStorageResizeSupportDisabled OnlineStorageResizeSupport = "Disabled"
	OnlineStorageResizeSupportEnabled  OnlineStorageResizeSupport = "Enabled"
)

// PossibleOnlineStorageResizeSupportValues returns the possible values for the OnlineStorageResizeSupport const type.
func PossibleOnlineStorageResizeSupportValues() []OnlineStorageResizeSupport {
	return []OnlineStorageResizeSupport{
		OnlineStorageResizeSupportDisabled,
		OnlineStorageResizeSupportEnabled,
	}
}

// OperationOrigin - Intended executor of the operation.
type OperationOrigin string

const (
	OperationOriginNotSpecified OperationOrigin = "NotSpecified"
	OperationOriginSystem       OperationOrigin = "system"
	OperationOriginUser         OperationOrigin = "user"
)

// PossibleOperationOriginValues returns the possible values for the OperationOrigin const type.
func PossibleOperationOriginValues() []OperationOrigin {
	return []OperationOrigin{
		OperationOriginNotSpecified,
		OperationOriginSystem,
		OperationOriginUser,
	}
}

// OverwriteDatabasesOnTargetServer - Indicates if databases on the target server can be overwritten when already present.
// If set to 'False', when the migration workflow detects that the database already exists on the target server, it will wait
// for a confirmation.
type OverwriteDatabasesOnTargetServer string

const (
	OverwriteDatabasesOnTargetServerFalse OverwriteDatabasesOnTargetServer = "False"
	OverwriteDatabasesOnTargetServerTrue  OverwriteDatabasesOnTargetServer = "True"
)

// PossibleOverwriteDatabasesOnTargetServerValues returns the possible values for the OverwriteDatabasesOnTargetServer const type.
func PossibleOverwriteDatabasesOnTargetServerValues() []OverwriteDatabasesOnTargetServer {
	return []OverwriteDatabasesOnTargetServer{
		OverwriteDatabasesOnTargetServerFalse,
		OverwriteDatabasesOnTargetServerTrue,
	}
}

// PasswordBasedAuth - Indicates if the server supports password based authentication.
type PasswordBasedAuth string

const (
	PasswordBasedAuthDisabled PasswordBasedAuth = "Disabled"
	PasswordBasedAuthEnabled  PasswordBasedAuth = "Enabled"
)

// PossiblePasswordBasedAuthValues returns the possible values for the PasswordBasedAuth const type.
func PossiblePasswordBasedAuthValues() []PasswordBasedAuth {
	return []PasswordBasedAuth{
		PasswordBasedAuthDisabled,
		PasswordBasedAuthEnabled,
	}
}

// PostgresMajorVersion - Major version of PostgreSQL database engine.
type PostgresMajorVersion string

const (
	PostgresMajorVersion11 PostgresMajorVersion = "11"
	PostgresMajorVersion12 PostgresMajorVersion = "12"
	PostgresMajorVersion13 PostgresMajorVersion = "13"
	PostgresMajorVersion14 PostgresMajorVersion = "14"
	PostgresMajorVersion15 PostgresMajorVersion = "15"
	PostgresMajorVersion16 PostgresMajorVersion = "16"
	PostgresMajorVersion17 PostgresMajorVersion = "17"
	PostgresMajorVersion18 PostgresMajorVersion = "18"
)

// PossiblePostgresMajorVersionValues returns the possible values for the PostgresMajorVersion const type.
func PossiblePostgresMajorVersionValues() []PostgresMajorVersion {
	return []PostgresMajorVersion{
		PostgresMajorVersion11,
		PostgresMajorVersion12,
		PostgresMajorVersion13,
		PostgresMajorVersion14,
		PostgresMajorVersion15,
		PostgresMajorVersion16,
		PostgresMajorVersion17,
		PostgresMajorVersion18,
	}
}

// PrincipalType - Type of Microsoft Entra principal to which the server administrator is associated.
type PrincipalType string

const (
	// PrincipalTypeGroup - A Microsoft Entra group.
	PrincipalTypeGroup PrincipalType = "Group"
	// PrincipalTypeServicePrincipal - A Microsoft Entra service principal, typically representing an application or service identity
	PrincipalTypeServicePrincipal PrincipalType = "ServicePrincipal"
	// PrincipalTypeUnknown - The principal type is not known or not specified.
	PrincipalTypeUnknown PrincipalType = "Unknown"
	// PrincipalTypeUser - A Microsoft Entra user.
	PrincipalTypeUser PrincipalType = "User"
)

// PossiblePrincipalTypeValues returns the possible values for the PrincipalType const type.
func PossiblePrincipalTypeValues() []PrincipalType {
	return []PrincipalType{
		PrincipalTypeGroup,
		PrincipalTypeServicePrincipal,
		PrincipalTypeUnknown,
		PrincipalTypeUser,
	}
}

// PrivateEndpointConnectionProvisioningState - The current provisioning state.
type PrivateEndpointConnectionProvisioningState string

const (
	// PrivateEndpointConnectionProvisioningStateCreating - Connection is being created
	PrivateEndpointConnectionProvisioningStateCreating PrivateEndpointConnectionProvisioningState = "Creating"
	// PrivateEndpointConnectionProvisioningStateDeleting - Connection is being deleted
	PrivateEndpointConnectionProvisioningStateDeleting PrivateEndpointConnectionProvisioningState = "Deleting"
	// PrivateEndpointConnectionProvisioningStateFailed - Connection provisioning has failed
	PrivateEndpointConnectionProvisioningStateFailed PrivateEndpointConnectionProvisioningState = "Failed"
	// PrivateEndpointConnectionProvisioningStateSucceeded - Connection has been provisioned
	PrivateEndpointConnectionProvisioningStateSucceeded PrivateEndpointConnectionProvisioningState = "Succeeded"
)

// PossiblePrivateEndpointConnectionProvisioningStateValues returns the possible values for the PrivateEndpointConnectionProvisioningState const type.
func PossiblePrivateEndpointConnectionProvisioningStateValues() []PrivateEndpointConnectionProvisioningState {
	return []PrivateEndpointConnectionProvisioningState{
		PrivateEndpointConnectionProvisioningStateCreating,
		PrivateEndpointConnectionProvisioningStateDeleting,
		PrivateEndpointConnectionProvisioningStateFailed,
		PrivateEndpointConnectionProvisioningStateSucceeded,
	}
}

// PrivateEndpointServiceConnectionStatus - The private endpoint connection status.
type PrivateEndpointServiceConnectionStatus string

const (
	// PrivateEndpointServiceConnectionStatusApproved - Connection approved
	PrivateEndpointServiceConnectionStatusApproved PrivateEndpointServiceConnectionStatus = "Approved"
	// PrivateEndpointServiceConnectionStatusPending - Connection waiting for approval or rejection
	PrivateEndpointServiceConnectionStatusPending PrivateEndpointServiceConnectionStatus = "Pending"
	// PrivateEndpointServiceConnectionStatusRejected - Connection Rejected
	PrivateEndpointServiceConnectionStatusRejected PrivateEndpointServiceConnectionStatus = "Rejected"
)

// PossiblePrivateEndpointServiceConnectionStatusValues returns the possible values for the PrivateEndpointServiceConnectionStatus const type.
func PossiblePrivateEndpointServiceConnectionStatusValues() []PrivateEndpointServiceConnectionStatus {
	return []PrivateEndpointServiceConnectionStatus{
		PrivateEndpointServiceConnectionStatusApproved,
		PrivateEndpointServiceConnectionStatusPending,
		PrivateEndpointServiceConnectionStatusRejected,
	}
}

// ReadReplicaPromoteMode - Type of operation to apply on the read replica. This property is write only. Standalone means
// that the read replica will be promoted to a standalone server, and will become a completely independent entity from the
// replication set. Switchover means that the read replica will roles with the primary server.
type ReadReplicaPromoteMode string

const (
	// ReadReplicaPromoteModeStandalone - Read replica will become an independent server.
	ReadReplicaPromoteModeStandalone ReadReplicaPromoteMode = "Standalone"
	// ReadReplicaPromoteModeSwitchover - Read replica will swap roles with primary server.
	ReadReplicaPromoteModeSwitchover ReadReplicaPromoteMode = "Switchover"
)

// PossibleReadReplicaPromoteModeValues returns the possible values for the ReadReplicaPromoteMode const type.
func PossibleReadReplicaPromoteModeValues() []ReadReplicaPromoteMode {
	return []ReadReplicaPromoteMode{
		ReadReplicaPromoteModeStandalone,
		ReadReplicaPromoteModeSwitchover,
	}
}

// ReadReplicaPromoteOption - Data synchronization option to use when processing the operation specified in the promoteMode
// property. This property is write only.
type ReadReplicaPromoteOption string

const (
	// ReadReplicaPromoteOptionForced - The operation will not wait for data in the read replica to be synchronized with its source
	// server, before it initiates the operation.
	ReadReplicaPromoteOptionForced ReadReplicaPromoteOption = "Forced"
	// ReadReplicaPromoteOptionPlanned - The operation will wait for data in the read replica to be fully synchronized with its
	// source server, before it initiates the operation.
	ReadReplicaPromoteOptionPlanned ReadReplicaPromoteOption = "Planned"
)

// PossibleReadReplicaPromoteOptionValues returns the possible values for the ReadReplicaPromoteOption const type.
func PossibleReadReplicaPromoteOptionValues() []ReadReplicaPromoteOption {
	return []ReadReplicaPromoteOption{
		ReadReplicaPromoteOptionForced,
		ReadReplicaPromoteOptionPlanned,
	}
}

// RecommendationType - Type for this recommendation.
type RecommendationType string

const (
	RecommendationTypeAnalyzeTable RecommendationType = "AnalyzeTable"
	RecommendationTypeCreateIndex  RecommendationType = "CreateIndex"
	RecommendationTypeDropIndex    RecommendationType = "DropIndex"
	RecommendationTypeReIndex      RecommendationType = "ReIndex"
)

// PossibleRecommendationTypeValues returns the possible values for the RecommendationType const type.
func PossibleRecommendationTypeValues() []RecommendationType {
	return []RecommendationType{
		RecommendationTypeAnalyzeTable,
		RecommendationTypeCreateIndex,
		RecommendationTypeDropIndex,
		RecommendationTypeReIndex,
	}
}

// ReplicationRole - Role of the server in a replication set.
type ReplicationRole string

const (
	ReplicationRoleAsyncReplica    ReplicationRole = "AsyncReplica"
	ReplicationRoleGeoAsyncReplica ReplicationRole = "GeoAsyncReplica"
	ReplicationRoleNone            ReplicationRole = "None"
	ReplicationRolePrimary         ReplicationRole = "Primary"
)

// PossibleReplicationRoleValues returns the possible values for the ReplicationRole const type.
func PossibleReplicationRoleValues() []ReplicationRole {
	return []ReplicationRole{
		ReplicationRoleAsyncReplica,
		ReplicationRoleGeoAsyncReplica,
		ReplicationRoleNone,
		ReplicationRolePrimary,
	}
}

// ReplicationState - Indicates the replication state of a read replica. This property is returned only when the target server
// is a read replica. Possible values are Active, Broken, Catchup, Provisioning, Reconfiguring, and Updating
type ReplicationState string

const (
	// ReplicationStateActive - The read replica server is fully synchronized and actively replicating data from the primary server.
	ReplicationStateActive ReplicationState = "Active"
	// ReplicationStateBroken - Replication has failed or been interrupted.
	ReplicationStateBroken ReplicationState = "Broken"
	// ReplicationStateCatchup - The read replica server is behind the primary server and is currently catching up with pending
	// changes.
	ReplicationStateCatchup ReplicationState = "Catchup"
	// ReplicationStateProvisioning - The read replica server is being created and is in process of getting initialized.
	ReplicationStateProvisioning ReplicationState = "Provisioning"
	// ReplicationStateReconfiguring - The read replica server is being reconfigured, possibly due to changes in source or settings.
	ReplicationStateReconfiguring ReplicationState = "Reconfiguring"
	// ReplicationStateUpdating - The read replica server is undergoing some changes it can be changing compute size of promoting
	// it to primary server.
	ReplicationStateUpdating ReplicationState = "Updating"
)

// PossibleReplicationStateValues returns the possible values for the ReplicationState const type.
func PossibleReplicationStateValues() []ReplicationState {
	return []ReplicationState{
		ReplicationStateActive,
		ReplicationStateBroken,
		ReplicationStateCatchup,
		ReplicationStateProvisioning,
		ReplicationStateReconfiguring,
		ReplicationStateUpdating,
	}
}

// SKUTier - Tier of the compute assigned to a server.
type SKUTier string

const (
	SKUTierBurstable       SKUTier = "Burstable"
	SKUTierGeneralPurpose  SKUTier = "GeneralPurpose"
	SKUTierMemoryOptimized SKUTier = "MemoryOptimized"
)

// PossibleSKUTierValues returns the possible values for the SKUTier const type.
func PossibleSKUTierValues() []SKUTier {
	return []SKUTier{
		SKUTierBurstable,
		SKUTierGeneralPurpose,
		SKUTierMemoryOptimized,
	}
}

// SSLMode - SSL mode used by a migration. Default SSL mode for 'PostgreSQLSingleServer' is 'VerifyFull'. Default SSL mode
// for other source types is 'Prefer'.
type SSLMode string

const (
	SSLModePrefer     SSLMode = "Prefer"
	SSLModeRequire    SSLMode = "Require"
	SSLModeVerifyCA   SSLMode = "VerifyCA"
	SSLModeVerifyFull SSLMode = "VerifyFull"
)

// PossibleSSLModeValues returns the possible values for the SSLMode const type.
func PossibleSSLModeValues() []SSLMode {
	return []SSLMode{
		SSLModePrefer,
		SSLModeRequire,
		SSLModeVerifyCA,
		SSLModeVerifyFull,
	}
}

// ServerPublicNetworkAccessState - Indicates if public network access is enabled or not.
type ServerPublicNetworkAccessState string

const (
	ServerPublicNetworkAccessStateDisabled ServerPublicNetworkAccessState = "Disabled"
	ServerPublicNetworkAccessStateEnabled  ServerPublicNetworkAccessState = "Enabled"
)

// PossibleServerPublicNetworkAccessStateValues returns the possible values for the ServerPublicNetworkAccessState const type.
func PossibleServerPublicNetworkAccessStateValues() []ServerPublicNetworkAccessState {
	return []ServerPublicNetworkAccessState{
		ServerPublicNetworkAccessStateDisabled,
		ServerPublicNetworkAccessStateEnabled,
	}
}

// ServerState - Possible states of a server.
type ServerState string

const (
	ServerStateDisabled     ServerState = "Disabled"
	ServerStateDropping     ServerState = "Dropping"
	ServerStateInaccessible ServerState = "Inaccessible"
	ServerStateProvisioning ServerState = "Provisioning"
	ServerStateReady        ServerState = "Ready"
	ServerStateRestarting   ServerState = "Restarting"
	ServerStateStarting     ServerState = "Starting"
	ServerStateStopped      ServerState = "Stopped"
	ServerStateStopping     ServerState = "Stopping"
	ServerStateUpdating     ServerState = "Updating"
)

// PossibleServerStateValues returns the possible values for the ServerState const type.
func PossibleServerStateValues() []ServerState {
	return []ServerState{
		ServerStateDisabled,
		ServerStateDropping,
		ServerStateInaccessible,
		ServerStateProvisioning,
		ServerStateReady,
		ServerStateRestarting,
		ServerStateStarting,
		ServerStateStopped,
		ServerStateStopping,
		ServerStateUpdating,
	}
}

// SourceType - Source server type used for the migration: ApsaraDB_RDS, AWS, AWS_AURORA, AWS_EC2, AWS_RDS, AzureVM, Crunchy_PostgreSQL,
// Digital_Ocean_Droplets, Digital_Ocean_PostgreSQL, EDB, EDB_Oracle_Server, EDB_PostgreSQL, GCP, GCP_AlloyDB, GCP_CloudSQL,
// GCP_Compute, Heroku_PostgreSQL, Huawei_Compute, Huawei_RDS, OnPremises, PostgreSQLCosmosDB, PostgreSQLFlexibleServer, PostgreSQLSingleServer,
// or Supabase_PostgreSQL
type SourceType string

const (
	SourceTypeAWS                      SourceType = "AWS"
	SourceTypeAWSAURORA                SourceType = "AWS_AURORA"
	SourceTypeAWSEC2                   SourceType = "AWS_EC2"
	SourceTypeAWSRDS                   SourceType = "AWS_RDS"
	SourceTypeApsaraDBRDS              SourceType = "ApsaraDB_RDS"
	SourceTypeAzureVM                  SourceType = "AzureVM"
	SourceTypeCrunchyPostgreSQL        SourceType = "Crunchy_PostgreSQL"
	SourceTypeDigitalOceanDroplets     SourceType = "Digital_Ocean_Droplets"
	SourceTypeDigitalOceanPostgreSQL   SourceType = "Digital_Ocean_PostgreSQL"
	SourceTypeEDB                      SourceType = "EDB"
	SourceTypeEDBOracleServer          SourceType = "EDB_Oracle_Server"
	SourceTypeEDBPostgreSQL            SourceType = "EDB_PostgreSQL"
	SourceTypeGCP                      SourceType = "GCP"
	SourceTypeGCPAlloyDB               SourceType = "GCP_AlloyDB"
	SourceTypeGCPCloudSQL              SourceType = "GCP_CloudSQL"
	SourceTypeGCPCompute               SourceType = "GCP_Compute"
	SourceTypeHerokuPostgreSQL         SourceType = "Heroku_PostgreSQL"
	SourceTypeHuaweiCompute            SourceType = "Huawei_Compute"
	SourceTypeHuaweiRDS                SourceType = "Huawei_RDS"
	SourceTypeOnPremises               SourceType = "OnPremises"
	SourceTypePostgreSQLCosmosDB       SourceType = "PostgreSQLCosmosDB"
	SourceTypePostgreSQLFlexibleServer SourceType = "PostgreSQLFlexibleServer"
	SourceTypePostgreSQLSingleServer   SourceType = "PostgreSQLSingleServer"
	SourceTypeSupabasePostgreSQL       SourceType = "Supabase_PostgreSQL"
)

// PossibleSourceTypeValues returns the possible values for the SourceType const type.
func PossibleSourceTypeValues() []SourceType {
	return []SourceType{
		SourceTypeAWS,
		SourceTypeAWSAURORA,
		SourceTypeAWSEC2,
		SourceTypeAWSRDS,
		SourceTypeApsaraDBRDS,
		SourceTypeAzureVM,
		SourceTypeCrunchyPostgreSQL,
		SourceTypeDigitalOceanDroplets,
		SourceTypeDigitalOceanPostgreSQL,
		SourceTypeEDB,
		SourceTypeEDBOracleServer,
		SourceTypeEDBPostgreSQL,
		SourceTypeGCP,
		SourceTypeGCPAlloyDB,
		SourceTypeGCPCloudSQL,
		SourceTypeGCPCompute,
		SourceTypeHerokuPostgreSQL,
		SourceTypeHuaweiCompute,
		SourceTypeHuaweiRDS,
		SourceTypeOnPremises,
		SourceTypePostgreSQLCosmosDB,
		SourceTypePostgreSQLFlexibleServer,
		SourceTypePostgreSQLSingleServer,
		SourceTypeSupabasePostgreSQL,
	}
}

// StartDataMigration - Indicates if data migration must start right away.
type StartDataMigration string

const (
	StartDataMigrationFalse StartDataMigration = "False"
	StartDataMigrationTrue  StartDataMigration = "True"
)

// PossibleStartDataMigrationValues returns the possible values for the StartDataMigration const type.
func PossibleStartDataMigrationValues() []StartDataMigration {
	return []StartDataMigration{
		StartDataMigrationFalse,
		StartDataMigrationTrue,
	}
}

// StorageAutoGrow - Flag to enable or disable the automatic growth of storage size of a server when available space is nearing
// zero and conditions allow for automatically growing storage size.
type StorageAutoGrow string

const (
	StorageAutoGrowDisabled StorageAutoGrow = "Disabled"
	StorageAutoGrowEnabled  StorageAutoGrow = "Enabled"
)

// PossibleStorageAutoGrowValues returns the possible values for the StorageAutoGrow const type.
func PossibleStorageAutoGrowValues() []StorageAutoGrow {
	return []StorageAutoGrow{
		StorageAutoGrowDisabled,
		StorageAutoGrowEnabled,
	}
}

// StorageAutoGrowthSupport - Indicates if storage autogrow is supported in this location. 'Enabled' means storage autogrow
// is supported. 'Disabled' stands for storage autogrow is not supported. Will be deprecated in the future. Look to Supported
// Features for 'StorageAutoGrowth'.
type StorageAutoGrowthSupport string

const (
	StorageAutoGrowthSupportDisabled StorageAutoGrowthSupport = "Disabled"
	StorageAutoGrowthSupportEnabled  StorageAutoGrowthSupport = "Enabled"
)

// PossibleStorageAutoGrowthSupportValues returns the possible values for the StorageAutoGrowthSupport const type.
func PossibleStorageAutoGrowthSupportValues() []StorageAutoGrowthSupport {
	return []StorageAutoGrowthSupport{
		StorageAutoGrowthSupportDisabled,
		StorageAutoGrowthSupportEnabled,
	}
}

// StorageType - Type of storage assigned to a server. Allowed values are Premium_LRS, PremiumV2_LRS, or UltraSSD_LRS. If
// not specified, it defaults to Premium_LRS.
type StorageType string

const (
	StorageTypePremiumLRS   StorageType = "Premium_LRS"
	StorageTypePremiumV2LRS StorageType = "PremiumV2_LRS"
	StorageTypeUltraSSDLRS  StorageType = "UltraSSD_LRS"
)

// PossibleStorageTypeValues returns the possible values for the StorageType const type.
func PossibleStorageTypeValues() []StorageType {
	return []StorageType{
		StorageTypePremiumLRS,
		StorageTypePremiumV2LRS,
		StorageTypeUltraSSDLRS,
	}
}

type ThreatProtectionName string

const (
	ThreatProtectionNameDefault ThreatProtectionName = "Default"
)

// PossibleThreatProtectionNameValues returns the possible values for the ThreatProtectionName const type.
func PossibleThreatProtectionNameValues() []ThreatProtectionName {
	return []ThreatProtectionName{
		ThreatProtectionNameDefault,
	}
}

// ThreatProtectionState - Specifies the state of the advanced threat protection, whether it is enabled, disabled, or a state
// has not been applied yet on the server.
type ThreatProtectionState string

const (
	ThreatProtectionStateDisabled ThreatProtectionState = "Disabled"
	ThreatProtectionStateEnabled  ThreatProtectionState = "Enabled"
)

// PossibleThreatProtectionStateValues returns the possible values for the ThreatProtectionState const type.
func PossibleThreatProtectionStateValues() []ThreatProtectionState {
	return []ThreatProtectionState{
		ThreatProtectionStateDisabled,
		ThreatProtectionStateEnabled,
	}
}

// TriggerCutover - Indicates if cutover must be triggered for the entire migration.
type TriggerCutover string

const (
	TriggerCutoverFalse TriggerCutover = "False"
	TriggerCutoverTrue  TriggerCutover = "True"
)

// PossibleTriggerCutoverValues returns the possible values for the TriggerCutover const type.
func PossibleTriggerCutoverValues() []TriggerCutover {
	return []TriggerCutover{
		TriggerCutoverFalse,
		TriggerCutoverTrue,
	}
}

type TuningOption string

const (
	TuningOptionIndex TuningOption = "index"
	TuningOptionTable TuningOption = "table"
)

// PossibleTuningOptionValues returns the possible values for the TuningOption const type.
func PossibleTuningOptionValues() []TuningOption {
	return []TuningOption{
		TuningOptionIndex,
		TuningOptionTable,
	}
}

// ValidationState - Validation status for migration.
type ValidationState string

const (
	ValidationStateFailed    ValidationState = "Failed"
	ValidationStateSucceeded ValidationState = "Succeeded"
	ValidationStateWarning   ValidationState = "Warning"
)

// PossibleValidationStateValues returns the possible values for the ValidationState const type.
func PossibleValidationStateValues() []ValidationState {
	return []ValidationState{
		ValidationStateFailed,
		ValidationStateSucceeded,
		ValidationStateWarning,
	}
}

// VirtualEndpointType - Type of endpoint for the virtual endpoints.
type VirtualEndpointType string

const (
	VirtualEndpointTypeReadWrite VirtualEndpointType = "ReadWrite"
)

// PossibleVirtualEndpointTypeValues returns the possible values for the VirtualEndpointType const type.
func PossibleVirtualEndpointTypeValues() []VirtualEndpointType {
	return []VirtualEndpointType{
		VirtualEndpointTypeReadWrite,
	}
}

// ZoneRedundantHighAvailabilityAndGeographicallyRedundantBackupSupport - Indicates if high availability with zone redundancy
// is supported in conjunction with geographically redundant backups in this location. 'Enabled' means high availability with
// zone redundancy is supported in conjunction with geographically redundant backups is supported. 'Disabled' stands for high
// availability with zone redundancy is supported in conjunction with geographically redundant backups is not supported. Will
// be deprecated in the future. Look to Supported Features for 'ZoneRedundantHaAndGeoBackup'.
type ZoneRedundantHighAvailabilityAndGeographicallyRedundantBackupSupport string

const (
	ZoneRedundantHighAvailabilityAndGeographicallyRedundantBackupSupportDisabled ZoneRedundantHighAvailabilityAndGeographicallyRedundantBackupSupport = "Disabled"
	ZoneRedundantHighAvailabilityAndGeographicallyRedundantBackupSupportEnabled  ZoneRedundantHighAvailabilityAndGeographicallyRedundantBackupSupport = "Enabled"
)

// PossibleZoneRedundantHighAvailabilityAndGeographicallyRedundantBackupSupportValues returns the possible values for the ZoneRedundantHighAvailabilityAndGeographicallyRedundantBackupSupport const type.
func PossibleZoneRedundantHighAvailabilityAndGeographicallyRedundantBackupSupportValues() []ZoneRedundantHighAvailabilityAndGeographicallyRedundantBackupSupport {
	return []ZoneRedundantHighAvailabilityAndGeographicallyRedundantBackupSupport{
		ZoneRedundantHighAvailabilityAndGeographicallyRedundantBackupSupportDisabled,
		ZoneRedundantHighAvailabilityAndGeographicallyRedundantBackupSupportEnabled,
	}
}

// ZoneRedundantHighAvailabilitySupport - Indicates if high availability with zone redundancy is supported in this location.
// 'Enabled' means high availability with zone redundancy is supported. 'Disabled' stands for high availability with zone
// redundancy is not supported. Will be deprecated in the future. Look to Supported Features for 'ZoneRedundantHa'.
type ZoneRedundantHighAvailabilitySupport string

const (
	ZoneRedundantHighAvailabilitySupportDisabled ZoneRedundantHighAvailabilitySupport = "Disabled"
	ZoneRedundantHighAvailabilitySupportEnabled  ZoneRedundantHighAvailabilitySupport = "Enabled"
)

// PossibleZoneRedundantHighAvailabilitySupportValues returns the possible values for the ZoneRedundantHighAvailabilitySupport const type.
func PossibleZoneRedundantHighAvailabilitySupportValues() []ZoneRedundantHighAvailabilitySupport {
	return []ZoneRedundantHighAvailabilitySupport{
		ZoneRedundantHighAvailabilitySupportDisabled,
		ZoneRedundantHighAvailabilitySupportEnabled,
	}
}
