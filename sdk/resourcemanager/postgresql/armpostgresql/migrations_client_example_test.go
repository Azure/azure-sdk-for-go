// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) Go Code Generator. DO NOT EDIT.

package armpostgresql_test

import (
	"context"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/to"
	"github.com/Azure/azure-sdk-for-go/sdk/azidentity"
	"github.com/Azure/azure-sdk-for-go/sdk/resourcemanager/postgresql/armpostgresql/v2"
	"log"
)

// Generated from example definition: 2025-08-01/MigrationsCancel.json
func ExampleMigrationsClient_Cancel() {
	cred, err := azidentity.NewDefaultAzureCredential(nil)
	if err != nil {
		log.Fatalf("failed to obtain a credential: %v", err)
	}
	ctx := context.Background()
	clientFactory, err := armpostgresql.NewClientFactory("ffffffff-ffff-ffff-ffff-ffffffffffff", cred, nil)
	if err != nil {
		log.Fatalf("failed to create client: %v", err)
	}
	res, err := clientFactory.NewMigrationsClient().Cancel(ctx, "exampleresourcegroup", "exampleserver", "examplemigration", nil)
	if err != nil {
		log.Fatalf("failed to finish the request: %v", err)
	}
	// You could use response here. We use blank identifier for just demo purposes.
	_ = res
	// If the HTTP response code is 200 as defined in example definition, your response structure would look as follows. Please pay attention that all the values in the output are fake values for just demo purposes.
	// res = armpostgresql.MigrationsClientCancelResponse{
	// 	Migration: &armpostgresql.Migration{
	// 		Name: to.Ptr("examplemigration"),
	// 		Type: to.Ptr("Microsoft.DBforPostgreSQL/flexibleServers/migrations"),
	// 		ID: to.Ptr("/subscriptions/ffffffff-ffff-ffff-ffff-ffffffffffff/resourceGroups/exampleresourcegroup/providers/Microsoft.DBforPostgreSQL/flexibleServers/exampletarget/migrations/examplemigration"),
	// 		Location: to.Ptr("East US"),
	// 		Properties: &armpostgresql.MigrationProperties{
	// 			CurrentStatus: &armpostgresql.MigrationStatus{
	// 				CurrentSubStateDetails: &armpostgresql.MigrationSubstateDetails{
	// 					CurrentSubState: to.Ptr(armpostgresql.MigrationSubstatePerformingPreRequisiteSteps),
	// 					DbDetails: map[string]*armpostgresql.DatabaseMigrationState{
	// 					},
	// 				},
	// 				State: to.Ptr(armpostgresql.MigrationStateInProgress),
	// 			},
	// 			DbsToMigrate: []*string{
	// 				to.Ptr("exampledatabase1"),
	// 				to.Ptr("exampledatabase2"),
	// 				to.Ptr("exampledatabase3"),
	// 				to.Ptr("exampledatabase4"),
	// 			},
	// 			MigrateRoles: to.Ptr(armpostgresql.MigrateRolesAndPermissionsFalse),
	// 			MigrationID: to.Ptr("bbbbbbbb-bbbb-bbbb-bbbb-bbbbbbbbbbbb"),
	// 			MigrationMode: to.Ptr(armpostgresql.MigrationModeOffline),
	// 			MigrationOption: to.Ptr(armpostgresql.MigrationOptionValidateAndMigrate),
	// 			MigrationWindowStartTimeInUTC: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2025-06-01T18:30:22.12345Z"); return t}()),
	// 			OverwriteDbsInTarget: to.Ptr(armpostgresql.OverwriteDatabasesOnTargetServerTrue),
	// 			SetupLogicalReplicationOnSourceDbIfNeeded: to.Ptr(armpostgresql.LogicalReplicationOnSourceServerTrue),
	// 			SourceDbServerResourceID: to.Ptr("examplesource:5432@exampleadministratorlogin"),
	// 			SourceType: to.Ptr(armpostgresql.SourceTypeOnPremises),
	// 			SSLMode: to.Ptr(armpostgresql.SSLModePrefer),
	// 			TargetDbServerMetadata: &armpostgresql.DbServerMetadata{
	// 				Location: to.Ptr("East US"),
	// 				SKU: &armpostgresql.ServerSKU{
	// 					Name: to.Ptr("Standard_D4ds_v4"),
	// 					Tier: to.Ptr(armpostgresql.SKUTierGeneralPurpose),
	// 				},
	// 				StorageMb: to.Ptr[int32](131072),
	// 				Version: to.Ptr("17"),
	// 			},
	// 			TargetDbServerResourceID: to.Ptr("/subscriptions/ffffffff-ffff-ffff-ffff-ffffffffffff/resourceGroups/exampleresourcegroup/providers/Microsoft.DBForPostgreSql/flexibleServers/exampletarget"),
	// 			TriggerCutover: to.Ptr(armpostgresql.TriggerCutoverTrue),
	// 		},
	// 	},
	// }
}

// Generated from example definition: 2025-08-01/MigrationsCheckNameAvailability.json
func ExampleMigrationsClient_CheckNameAvailability() {
	cred, err := azidentity.NewDefaultAzureCredential(nil)
	if err != nil {
		log.Fatalf("failed to obtain a credential: %v", err)
	}
	ctx := context.Background()
	clientFactory, err := armpostgresql.NewClientFactory("ffffffff-ffff-ffff-ffff-ffffffffffff", cred, nil)
	if err != nil {
		log.Fatalf("failed to create client: %v", err)
	}
	res, err := clientFactory.NewMigrationsClient().CheckNameAvailability(ctx, "exampleresourcegroup", "exampleserver", armpostgresql.MigrationNameAvailability{
		Name: to.Ptr("examplemigration"),
		Type: to.Ptr("Microsoft.DBforPostgreSQL/flexibleServers/migrations"),
	}, nil)
	if err != nil {
		log.Fatalf("failed to finish the request: %v", err)
	}
	// You could use response here. We use blank identifier for just demo purposes.
	_ = res
	// If the HTTP response code is 200 as defined in example definition, your response structure would look as follows. Please pay attention that all the values in the output are fake values for just demo purposes.
	// res = armpostgresql.MigrationsClientCheckNameAvailabilityResponse{
	// 	MigrationNameAvailability: &armpostgresql.MigrationNameAvailability{
	// 		Name: to.Ptr("naexamplemigration"),
	// 		Type: to.Ptr("Microsoft.DBforPostgreSQL/flexibleServers/migrations"),
	// 		NameAvailable: to.Ptr(true),
	// 	},
	// }
}

// Generated from example definition: 2025-08-01/MigrationsCreate.json
func ExampleMigrationsClient_Create_createAMigration() {
	cred, err := azidentity.NewDefaultAzureCredential(nil)
	if err != nil {
		log.Fatalf("failed to obtain a credential: %v", err)
	}
	ctx := context.Background()
	clientFactory, err := armpostgresql.NewClientFactory("ffffffff-ffff-ffff-ffff-ffffffffffff", cred, nil)
	if err != nil {
		log.Fatalf("failed to create client: %v", err)
	}
	res, err := clientFactory.NewMigrationsClient().Create(ctx, "exampleresourcegroup", "exampleserver", "examplemigration", armpostgresql.Migration{
		Location: to.Ptr("eastus"),
		Properties: &armpostgresql.MigrationProperties{
			DbsToMigrate: []*string{
				to.Ptr("exampledatabase1"),
				to.Ptr("exampledatabase2"),
				to.Ptr("exampledatabase3"),
				to.Ptr("exampledatabase4"),
			},
			MigrationMode:        to.Ptr(armpostgresql.MigrationModeOffline),
			OverwriteDbsInTarget: to.Ptr(armpostgresql.OverwriteDatabasesOnTargetServerTrue),
			SecretParameters: &armpostgresql.MigrationSecretParameters{
				AdminCredentials: &armpostgresql.AdminCredentials{
					SourceServerPassword: to.Ptr("examplesourcepassword"),
					TargetServerPassword: to.Ptr("exampletargetpassword"),
				},
			},
			SourceDbServerResourceID: to.Ptr("/subscriptions/ffffffff-ffff-ffff-ffff-ffffffffffff/resourceGroups/exampleresourcegroup/providers/Microsoft.DBForPostgreSql/servers/examplesource"),
		},
	}, nil)
	if err != nil {
		log.Fatalf("failed to finish the request: %v", err)
	}
	// You could use response here. We use blank identifier for just demo purposes.
	_ = res
	// If the HTTP response code is 200 as defined in example definition, your response structure would look as follows. Please pay attention that all the values in the output are fake values for just demo purposes.
	// res = armpostgresql.MigrationsClientCreateResponse{
	// 	Migration: &armpostgresql.Migration{
	// 		Name: to.Ptr("examplemigration"),
	// 		Type: to.Ptr("Microsoft.DBForPostgreSql/flexibleServers/migrations"),
	// 		ID: to.Ptr("/subscriptions/ffffffff-ffff-ffff-ffff-ffffffffffff/resourceGroups/exampleresourcegroup/providers/Microsoft.DBForPostgreSql/flexibleServers/exampletarget/migrations/examplemigration"),
	// 		Location: to.Ptr("eastus"),
	// 		Properties: &armpostgresql.MigrationProperties{
	// 			CurrentStatus: &armpostgresql.MigrationStatus{
	// 				CurrentSubStateDetails: &armpostgresql.MigrationSubstateDetails{
	// 					CurrentSubState: to.Ptr(armpostgresql.MigrationSubstatePerformingPreRequisiteSteps),
	// 				},
	// 				Error: to.Ptr(""),
	// 				State: to.Ptr(armpostgresql.MigrationStateInProgress),
	// 			},
	// 			DbsToMigrate: []*string{
	// 				to.Ptr("exampledatabase1"),
	// 				to.Ptr("exampledatabase2"),
	// 				to.Ptr("exampledatabase3"),
	// 				to.Ptr("exampledatabase4"),
	// 			},
	// 			MigrateRoles: to.Ptr(armpostgresql.MigrateRolesAndPermissionsFalse),
	// 			MigrationID: to.Ptr("d3ceacbb-a5fd-43dc-a9db-6022b5154856"),
	// 			MigrationWindowStartTimeInUTC: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2025-06-01T18:30:22.123456Z"); return t}()),
	// 			OverwriteDbsInTarget: to.Ptr(armpostgresql.OverwriteDatabasesOnTargetServerTrue),
	// 			SetupLogicalReplicationOnSourceDbIfNeeded: to.Ptr(armpostgresql.LogicalReplicationOnSourceServerFalse),
	// 			SourceDbServerResourceID: to.Ptr("/subscriptions/ffffffff-ffff-ffff-ffff-ffffffffffff/resourceGroups/exampleresourcegroup/providers/Microsoft.DBForPostgreSql/servers/examplesource"),
	// 			StartDataMigration: to.Ptr(armpostgresql.StartDataMigrationFalse),
	// 			TargetDbServerResourceID: to.Ptr("/subscriptions/ffffffff-ffff-ffff-ffff-ffffffffffff/resourceGroups/exampleresourcegroup/providers/Microsoft.DBForPostgreSql/flexibleServers/exampletarget"),
	// 			TriggerCutover: to.Ptr(armpostgresql.TriggerCutoverFalse),
	// 		},
	// 		Tags: map[string]*string{
	// 			"key1624": to.Ptr("aaaaaaaaaaaaaaaaaaaaaaaaaaaaaa"),
	// 		},
	// 	},
	// }
}

// Generated from example definition: 2025-08-01/MigrationsCreateOtherSourceTypesValidateMigrate.json
func ExampleMigrationsClient_Create_createAMigrationWithOtherSourceTypeForValidatingAndMigrating() {
	cred, err := azidentity.NewDefaultAzureCredential(nil)
	if err != nil {
		log.Fatalf("failed to obtain a credential: %v", err)
	}
	ctx := context.Background()
	clientFactory, err := armpostgresql.NewClientFactory("ffffffff-ffff-ffff-ffff-ffffffffffff", cred, nil)
	if err != nil {
		log.Fatalf("failed to create client: %v", err)
	}
	res, err := clientFactory.NewMigrationsClient().Create(ctx, "exampleresourcegroup", "exampleserver", "examplemigration", armpostgresql.Migration{
		Location: to.Ptr("eastus"),
		Properties: &armpostgresql.MigrationProperties{
			DbsToMigrate: []*string{
				to.Ptr("exampledatabase1"),
				to.Ptr("exampledatabase2"),
				to.Ptr("exampledatabase3"),
				to.Ptr("exampledatabase4"),
			},
			MigrationMode:        to.Ptr(armpostgresql.MigrationModeOffline),
			MigrationOption:      to.Ptr(armpostgresql.MigrationOptionValidateAndMigrate),
			OverwriteDbsInTarget: to.Ptr(armpostgresql.OverwriteDatabasesOnTargetServerTrue),
			SecretParameters: &armpostgresql.MigrationSecretParameters{
				AdminCredentials: &armpostgresql.AdminCredentials{
					SourceServerPassword: to.Ptr("examplesourcepassword"),
					TargetServerPassword: to.Ptr("exampletargetpassword"),
				},
			},
			SourceDbServerResourceID: to.Ptr("examplesource:5432@exampleuser"),
			SourceType:               to.Ptr(armpostgresql.SourceTypeOnPremises),
			SSLMode:                  to.Ptr(armpostgresql.SSLModePrefer),
		},
	}, nil)
	if err != nil {
		log.Fatalf("failed to finish the request: %v", err)
	}
	// You could use response here. We use blank identifier for just demo purposes.
	_ = res
	// If the HTTP response code is 200 as defined in example definition, your response structure would look as follows. Please pay attention that all the values in the output are fake values for just demo purposes.
	// res = armpostgresql.MigrationsClientCreateResponse{
	// 	Migration: &armpostgresql.Migration{
	// 		Name: to.Ptr("examplemigration"),
	// 		Type: to.Ptr("Microsoft.DBForPostgreSql/flexibleServers/migrations"),
	// 		ID: to.Ptr("/subscriptions/ffffffff-ffff-ffff-ffff-ffffffffffff/resourceGroups/exampleresourcegroup/providers/Microsoft.DBForPostgreSql/flexibleServers/exampletarget/migrations/examplemigration"),
	// 		Location: to.Ptr("eastus"),
	// 		Properties: &armpostgresql.MigrationProperties{
	// 			CurrentStatus: &armpostgresql.MigrationStatus{
	// 				CurrentSubStateDetails: &armpostgresql.MigrationSubstateDetails{
	// 					CurrentSubState: to.Ptr(armpostgresql.MigrationSubstateValidationInProgress),
	// 				},
	// 				Error: to.Ptr(""),
	// 				State: to.Ptr(armpostgresql.MigrationStateInProgress),
	// 			},
	// 			DbsToMigrate: []*string{
	// 				to.Ptr("exampledatabase1"),
	// 				to.Ptr("exampledatabase2"),
	// 				to.Ptr("exampledatabase3"),
	// 				to.Ptr("exampledatabase4"),
	// 			},
	// 			MigrateRoles: to.Ptr(armpostgresql.MigrateRolesAndPermissionsFalse),
	// 			MigrationID: to.Ptr("d3ceacbb-a5fd-43dc-a9db-6022b5154856"),
	// 			MigrationOption: to.Ptr(armpostgresql.MigrationOptionValidateAndMigrate),
	// 			MigrationWindowStartTimeInUTC: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2025-06-01T18:30:22.123456Z"); return t}()),
	// 			OverwriteDbsInTarget: to.Ptr(armpostgresql.OverwriteDatabasesOnTargetServerTrue),
	// 			SetupLogicalReplicationOnSourceDbIfNeeded: to.Ptr(armpostgresql.LogicalReplicationOnSourceServerFalse),
	// 			SourceDbServerResourceID: to.Ptr("examplesource:5432@exampleuser"),
	// 			SourceType: to.Ptr(armpostgresql.SourceTypeOnPremises),
	// 			SSLMode: to.Ptr(armpostgresql.SSLModePrefer),
	// 			StartDataMigration: to.Ptr(armpostgresql.StartDataMigrationFalse),
	// 			TargetDbServerResourceID: to.Ptr("/subscriptions/ffffffff-ffff-ffff-ffff-ffffffffffff/resourceGroups/exampleresourcegroup/providers/Microsoft.DBForPostgreSql/flexibleServers/exampletarget"),
	// 			TriggerCutover: to.Ptr(armpostgresql.TriggerCutoverFalse),
	// 		},
	// 		Tags: map[string]*string{
	// 			"key1624": to.Ptr("aaaaaaaaaaaaaaaaaaaaaaaaaaaaaa"),
	// 		},
	// 	},
	// }
}

// Generated from example definition: 2025-08-01/MigrationsCreateValidateOnly.json
func ExampleMigrationsClient_Create_createAMigrationForValidatingOnly() {
	cred, err := azidentity.NewDefaultAzureCredential(nil)
	if err != nil {
		log.Fatalf("failed to obtain a credential: %v", err)
	}
	ctx := context.Background()
	clientFactory, err := armpostgresql.NewClientFactory("ffffffff-ffff-ffff-ffff-ffffffffffff", cred, nil)
	if err != nil {
		log.Fatalf("failed to create client: %v", err)
	}
	res, err := clientFactory.NewMigrationsClient().Create(ctx, "exampleresourcegroup", "exampleserver", "examplemigration", armpostgresql.Migration{
		Location: to.Ptr("eastus"),
		Properties: &armpostgresql.MigrationProperties{
			DbsToMigrate: []*string{
				to.Ptr("exampledatabase1"),
				to.Ptr("exampledatabase2"),
				to.Ptr("exampledatabase3"),
				to.Ptr("exampledatabase4"),
			},
			MigrationMode:        to.Ptr(armpostgresql.MigrationModeOffline),
			MigrationOption:      to.Ptr(armpostgresql.MigrationOptionValidate),
			OverwriteDbsInTarget: to.Ptr(armpostgresql.OverwriteDatabasesOnTargetServerTrue),
			SecretParameters: &armpostgresql.MigrationSecretParameters{
				AdminCredentials: &armpostgresql.AdminCredentials{
					SourceServerPassword: to.Ptr("examplesourcepassword"),
					TargetServerPassword: to.Ptr("exampletargetpassword"),
				},
			},
			SourceDbServerResourceID: to.Ptr("/subscriptions/ffffffff-ffff-ffff-ffff-ffffffffffff/resourceGroups/exampleresourcegroup/providers/Microsoft.DBForPostgreSql/servers/examplesource"),
		},
	}, nil)
	if err != nil {
		log.Fatalf("failed to finish the request: %v", err)
	}
	// You could use response here. We use blank identifier for just demo purposes.
	_ = res
	// If the HTTP response code is 200 as defined in example definition, your response structure would look as follows. Please pay attention that all the values in the output are fake values for just demo purposes.
	// res = armpostgresql.MigrationsClientCreateResponse{
	// 	Migration: &armpostgresql.Migration{
	// 		Name: to.Ptr("examplemigration"),
	// 		Type: to.Ptr("Microsoft.DBForPostgreSql/flexibleServers/migrations"),
	// 		ID: to.Ptr("/subscriptions/ffffffff-ffff-ffff-ffff-ffffffffffff/resourceGroups/exampleresourcegroup/providers/Microsoft.DBForPostgreSql/flexibleServers/exampletarget/migrations/examplemigration"),
	// 		Location: to.Ptr("eastus"),
	// 		Properties: &armpostgresql.MigrationProperties{
	// 			CurrentStatus: &armpostgresql.MigrationStatus{
	// 				CurrentSubStateDetails: &armpostgresql.MigrationSubstateDetails{
	// 					CurrentSubState: to.Ptr(armpostgresql.MigrationSubstateValidationInProgress),
	// 				},
	// 				Error: to.Ptr(""),
	// 				State: to.Ptr(armpostgresql.MigrationStateInProgress),
	// 			},
	// 			DbsToMigrate: []*string{
	// 				to.Ptr("exampledatabase1"),
	// 				to.Ptr("exampledatabase2"),
	// 				to.Ptr("exampledatabase3"),
	// 				to.Ptr("exampledatabase4"),
	// 			},
	// 			MigrateRoles: to.Ptr(armpostgresql.MigrateRolesAndPermissionsFalse),
	// 			MigrationID: to.Ptr("d3ceacbb-a5fd-43dc-a9db-6022b5154856"),
	// 			MigrationOption: to.Ptr(armpostgresql.MigrationOptionValidate),
	// 			MigrationWindowStartTimeInUTC: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2025-06-01T18:30:22.123456Z"); return t}()),
	// 			OverwriteDbsInTarget: to.Ptr(armpostgresql.OverwriteDatabasesOnTargetServerTrue),
	// 			SetupLogicalReplicationOnSourceDbIfNeeded: to.Ptr(armpostgresql.LogicalReplicationOnSourceServerFalse),
	// 			SourceDbServerResourceID: to.Ptr("/subscriptions/ffffffff-ffff-ffff-ffff-ffffffffffff/resourceGroups/exampleresourcegroup/providers/Microsoft.DBForPostgreSql/servers/examplesource"),
	// 			StartDataMigration: to.Ptr(armpostgresql.StartDataMigrationFalse),
	// 			TargetDbServerResourceID: to.Ptr("/subscriptions/ffffffff-ffff-ffff-ffff-ffffffffffff/resourceGroups/exampleresourcegroup/providers/Microsoft.DBForPostgreSql/flexibleServers/exampletarget"),
	// 			TriggerCutover: to.Ptr(armpostgresql.TriggerCutoverFalse),
	// 		},
	// 		Tags: map[string]*string{
	// 			"key1624": to.Ptr("aaaaaaaaaaaaaaaaaaaaaaaaaaaaaa"),
	// 		},
	// 	},
	// }
}

// Generated from example definition: 2025-08-01/MigrationsCreateWithFullyQualifiedDomainName.json
func ExampleMigrationsClient_Create_createAMigrationWithFullyQualifiedDomainNamesForSourceAndTargetServers() {
	cred, err := azidentity.NewDefaultAzureCredential(nil)
	if err != nil {
		log.Fatalf("failed to obtain a credential: %v", err)
	}
	ctx := context.Background()
	clientFactory, err := armpostgresql.NewClientFactory("ffffffff-ffff-ffff-ffff-ffffffffffff", cred, nil)
	if err != nil {
		log.Fatalf("failed to create client: %v", err)
	}
	res, err := clientFactory.NewMigrationsClient().Create(ctx, "exampleresourcegroup", "exampleserver", "examplemigration", armpostgresql.Migration{
		Location: to.Ptr("eastus"),
		Properties: &armpostgresql.MigrationProperties{
			DbsToMigrate: []*string{
				to.Ptr("exampledatabase1"),
				to.Ptr("exampledatabase2"),
				to.Ptr("exampledatabase3"),
				to.Ptr("exampledatabase4"),
			},
			MigrationMode:        to.Ptr(armpostgresql.MigrationModeOffline),
			OverwriteDbsInTarget: to.Ptr(armpostgresql.OverwriteDatabasesOnTargetServerTrue),
			SecretParameters: &armpostgresql.MigrationSecretParameters{
				AdminCredentials: &armpostgresql.AdminCredentials{
					SourceServerPassword: to.Ptr("xxxxxxxx"),
					TargetServerPassword: to.Ptr("xxxxxxxx"),
				},
			},
			SourceDbServerFullyQualifiedDomainName: to.Ptr("examplesource.contoso.com"),
			SourceDbServerResourceID:               to.Ptr("/subscriptions/ffffffff-ffff-ffff-ffff-ffffffffffff/resourceGroups/exampleresourcegroup/providers/Microsoft.DBForPostgreSql/servers/examplesource"),
			TargetDbServerFullyQualifiedDomainName: to.Ptr("exampletarget.contoso.com"),
		},
	}, nil)
	if err != nil {
		log.Fatalf("failed to finish the request: %v", err)
	}
	// You could use response here. We use blank identifier for just demo purposes.
	_ = res
	// If the HTTP response code is 200 as defined in example definition, your response structure would look as follows. Please pay attention that all the values in the output are fake values for just demo purposes.
	// res = armpostgresql.MigrationsClientCreateResponse{
	// 	Migration: &armpostgresql.Migration{
	// 		Name: to.Ptr("examplemigration"),
	// 		Type: to.Ptr("Microsoft.DBForPostgreSql/flexibleServers/migrations"),
	// 		ID: to.Ptr("/subscriptions/ffffffff-ffff-ffff-ffff-ffffffffffff/resourceGroups/exampleresourcegroup/providers/Microsoft.DBForPostgreSql/flexibleServers/exampletarget/migrations/examplemigration"),
	// 		Location: to.Ptr("eastus"),
	// 		Properties: &armpostgresql.MigrationProperties{
	// 			CurrentStatus: &armpostgresql.MigrationStatus{
	// 				CurrentSubStateDetails: &armpostgresql.MigrationSubstateDetails{
	// 					CurrentSubState: to.Ptr(armpostgresql.MigrationSubstatePerformingPreRequisiteSteps),
	// 				},
	// 				Error: to.Ptr(""),
	// 				State: to.Ptr(armpostgresql.MigrationStateInProgress),
	// 			},
	// 			DbsToMigrate: []*string{
	// 				to.Ptr("exampledatabase1"),
	// 				to.Ptr("exampledatabase2"),
	// 				to.Ptr("exampledatabase3"),
	// 				to.Ptr("exampledatabase4"),
	// 			},
	// 			MigrateRoles: to.Ptr(armpostgresql.MigrateRolesAndPermissionsFalse),
	// 			MigrationID: to.Ptr("d3ceacbb-a5fd-43dc-a9db-6022b5154856"),
	// 			MigrationWindowStartTimeInUTC: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2025-06-01T18:30:22.123456Z"); return t}()),
	// 			OverwriteDbsInTarget: to.Ptr(armpostgresql.OverwriteDatabasesOnTargetServerTrue),
	// 			SetupLogicalReplicationOnSourceDbIfNeeded: to.Ptr(armpostgresql.LogicalReplicationOnSourceServerFalse),
	// 			SourceDbServerFullyQualifiedDomainName: to.Ptr("examplesource.contoso.com"),
	// 			SourceDbServerResourceID: to.Ptr("/subscriptions/ffffffff-ffff-ffff-ffff-ffffffffffff/resourceGroups/exampleresourcegroup/providers/Microsoft.DBForPostgreSql/servers/examplesource"),
	// 			StartDataMigration: to.Ptr(armpostgresql.StartDataMigrationFalse),
	// 			TargetDbServerFullyQualifiedDomainName: to.Ptr("exampletarget.contoso.com"),
	// 			TargetDbServerResourceID: to.Ptr("/subscriptions/ffffffff-ffff-ffff-ffff-ffffffffffff/resourceGroups/exampleresourcegroup/providers/Microsoft.DBForPostgreSql/flexibleServers/exampletarget"),
	// 			TriggerCutover: to.Ptr(armpostgresql.TriggerCutoverFalse),
	// 		},
	// 		Tags: map[string]*string{
	// 			"key1624": to.Ptr("aaaaaaaaaaaaaaaaaaaaaaaaaaaaaa"),
	// 		},
	// 	},
	// }
}

// Generated from example definition: 2025-08-01/MigrationsCreateWithOtherUsers.json
func ExampleMigrationsClient_Create_createAMigrationSpecifyingUserNames() {
	cred, err := azidentity.NewDefaultAzureCredential(nil)
	if err != nil {
		log.Fatalf("failed to obtain a credential: %v", err)
	}
	ctx := context.Background()
	clientFactory, err := armpostgresql.NewClientFactory("ffffffff-ffff-ffff-ffff-ffffffffffff", cred, nil)
	if err != nil {
		log.Fatalf("failed to create client: %v", err)
	}
	res, err := clientFactory.NewMigrationsClient().Create(ctx, "exampleresourcegroup", "exampleserver", "examplemigration", armpostgresql.Migration{
		Location: to.Ptr("eastus"),
		Properties: &armpostgresql.MigrationProperties{
			DbsToMigrate: []*string{
				to.Ptr("exampledatabase1"),
				to.Ptr("exampledatabase2"),
				to.Ptr("exampledatabase3"),
				to.Ptr("exampledatabase4"),
			},
			MigrationMode: to.Ptr(armpostgresql.MigrationModeOffline),
			SecretParameters: &armpostgresql.MigrationSecretParameters{
				AdminCredentials: &armpostgresql.AdminCredentials{
					SourceServerPassword: to.Ptr("examplesourcepassword"),
					TargetServerPassword: to.Ptr("exampletargetpassword"),
				},
				SourceServerUsername: to.Ptr("newadmin@examplesource"),
				TargetServerUsername: to.Ptr("targetadmin"),
			},
			SourceDbServerResourceID: to.Ptr("/subscriptions/ffffffff-ffff-ffff-ffff-ffffffffffff/resourceGroups/exampleresourcegroup/providers/Microsoft.DBForPostgreSql/servers/examplesource"),
		},
	}, nil)
	if err != nil {
		log.Fatalf("failed to finish the request: %v", err)
	}
	// You could use response here. We use blank identifier for just demo purposes.
	_ = res
	// If the HTTP response code is 200 as defined in example definition, your response structure would look as follows. Please pay attention that all the values in the output are fake values for just demo purposes.
	// res = armpostgresql.MigrationsClientCreateResponse{
	// 	Migration: &armpostgresql.Migration{
	// 		Name: to.Ptr("examplemigration"),
	// 		Type: to.Ptr("Microsoft.DBForPostgreSql/flexibleServers/migrations"),
	// 		ID: to.Ptr("/subscriptions/ffffffff-ffff-ffff-ffff-ffffffffffff/resourceGroups/exampleresourcegroup/providers/Microsoft.DBForPostgreSql/flexibleServers/exampletarget/migrations/examplemigration"),
	// 		Location: to.Ptr("eastus"),
	// 		Properties: &armpostgresql.MigrationProperties{
	// 			CurrentStatus: &armpostgresql.MigrationStatus{
	// 				CurrentSubStateDetails: &armpostgresql.MigrationSubstateDetails{
	// 					CurrentSubState: to.Ptr(armpostgresql.MigrationSubstatePerformingPreRequisiteSteps),
	// 				},
	// 				Error: to.Ptr(""),
	// 				State: to.Ptr(armpostgresql.MigrationStateInProgress),
	// 			},
	// 			DbsToMigrate: []*string{
	// 				to.Ptr("exampledatabase1"),
	// 				to.Ptr("exampledatabase2"),
	// 				to.Ptr("exampledatabase3"),
	// 				to.Ptr("exampledatabase4"),
	// 			},
	// 			MigrateRoles: to.Ptr(armpostgresql.MigrateRolesAndPermissionsFalse),
	// 			MigrationID: to.Ptr("d3ceacbb-a5fd-43dc-a9db-6022b5154856"),
	// 			MigrationMode: to.Ptr(armpostgresql.MigrationModeOffline),
	// 			MigrationWindowStartTimeInUTC: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2025-06-01T18:30:22.123456Z"); return t}()),
	// 			OverwriteDbsInTarget: to.Ptr(armpostgresql.OverwriteDatabasesOnTargetServerFalse),
	// 			SetupLogicalReplicationOnSourceDbIfNeeded: to.Ptr(armpostgresql.LogicalReplicationOnSourceServerFalse),
	// 			SourceDbServerResourceID: to.Ptr("/subscriptions/ffffffff-ffff-ffff-ffff-ffffffffffff/resourceGroups/exampleresourcegroup/providers/Microsoft.DBForPostgreSql/servers/examplesource"),
	// 			StartDataMigration: to.Ptr(armpostgresql.StartDataMigrationFalse),
	// 			TargetDbServerResourceID: to.Ptr("/subscriptions/ffffffff-ffff-ffff-ffff-ffffffffffff/resourceGroups/exampleresourcegroup/providers/Microsoft.DBForPostgreSql/flexibleServers/exampletarget"),
	// 			TriggerCutover: to.Ptr(armpostgresql.TriggerCutoverFalse),
	// 		},
	// 		Tags: map[string]*string{
	// 			"key1624": to.Ptr("aaaaaaaaaaaaaaaaaaaaaaaaaaaaaa"),
	// 		},
	// 	},
	// }
}

// Generated from example definition: 2025-08-01/MigrationsCreateWithPrivateEndpointServers.json
func ExampleMigrationsClient_Create_createAMigrationWithPrivateEndpoint() {
	cred, err := azidentity.NewDefaultAzureCredential(nil)
	if err != nil {
		log.Fatalf("failed to obtain a credential: %v", err)
	}
	ctx := context.Background()
	clientFactory, err := armpostgresql.NewClientFactory("ffffffff-ffff-ffff-ffff-ffffffffffff", cred, nil)
	if err != nil {
		log.Fatalf("failed to create client: %v", err)
	}
	res, err := clientFactory.NewMigrationsClient().Create(ctx, "exampleresourcegroup", "exampleserver", "examplemigration", armpostgresql.Migration{
		Location: to.Ptr("eastus"),
		Properties: &armpostgresql.MigrationProperties{
			DbsToMigrate: []*string{
				to.Ptr("exampledatabase1"),
				to.Ptr("exampledatabase2"),
				to.Ptr("exampledatabase3"),
				to.Ptr("exampledatabase4"),
			},
			MigrationInstanceResourceID: to.Ptr("/subscriptions/ffffffff-ffff-ffff-ffff-ffffffffffff/resourceGroups/exampleresourcegroup/providers/Microsoft.DBForPostgreSql/flexibleServers/examplesourcemigration"),
			MigrationMode:               to.Ptr(armpostgresql.MigrationModeOffline),
			OverwriteDbsInTarget:        to.Ptr(armpostgresql.OverwriteDatabasesOnTargetServerTrue),
			SecretParameters: &armpostgresql.MigrationSecretParameters{
				AdminCredentials: &armpostgresql.AdminCredentials{
					SourceServerPassword: to.Ptr("examplesourcepassword"),
					TargetServerPassword: to.Ptr("exampletargetpassword"),
				},
			},
			SourceDbServerResourceID: to.Ptr("/subscriptions/ffffffff-ffff-ffff-ffff-ffffffffffff/resourceGroups/exampleresourcegroup/providers/Microsoft.DBForPostgreSql/servers/examplesource"),
		},
	}, nil)
	if err != nil {
		log.Fatalf("failed to finish the request: %v", err)
	}
	// You could use response here. We use blank identifier for just demo purposes.
	_ = res
	// If the HTTP response code is 200 as defined in example definition, your response structure would look as follows. Please pay attention that all the values in the output are fake values for just demo purposes.
	// res = armpostgresql.MigrationsClientCreateResponse{
	// 	Migration: &armpostgresql.Migration{
	// 		Name: to.Ptr("examplemigration"),
	// 		Type: to.Ptr("Microsoft.DBForPostgreSql/flexibleServers/migrations"),
	// 		ID: to.Ptr("/subscriptions/ffffffff-ffff-ffff-ffff-ffffffffffff/resourceGroups/exampleresourcegroup/providers/Microsoft.DBForPostgreSql/flexibleServers/exampletarget/migrations/examplemigration"),
	// 		Location: to.Ptr("eastus"),
	// 		Properties: &armpostgresql.MigrationProperties{
	// 			CurrentStatus: &armpostgresql.MigrationStatus{
	// 				CurrentSubStateDetails: &armpostgresql.MigrationSubstateDetails{
	// 					CurrentSubState: to.Ptr(armpostgresql.MigrationSubstatePerformingPreRequisiteSteps),
	// 				},
	// 				Error: to.Ptr(""),
	// 				State: to.Ptr(armpostgresql.MigrationStateInProgress),
	// 			},
	// 			DbsToMigrate: []*string{
	// 				to.Ptr("exampledatabase1"),
	// 				to.Ptr("exampledatabase2"),
	// 				to.Ptr("exampledatabase3"),
	// 				to.Ptr("exampledatabase4"),
	// 			},
	// 			MigrateRoles: to.Ptr(armpostgresql.MigrateRolesAndPermissionsFalse),
	// 			MigrationID: to.Ptr("d3ceacbb-a5fd-43dc-a9db-6022b5154856"),
	// 			MigrationInstanceResourceID: to.Ptr("/subscriptions/ffffffff-ffff-ffff-ffff-ffffffffffff/resourceGroups/exampleresourcegroup/providers/Microsoft.DBForPostgreSql/flexibleServers/examplesourcemigration"),
	// 			MigrationWindowStartTimeInUTC: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2025-06-01T18:30:22.123456Z"); return t}()),
	// 			OverwriteDbsInTarget: to.Ptr(armpostgresql.OverwriteDatabasesOnTargetServerTrue),
	// 			SetupLogicalReplicationOnSourceDbIfNeeded: to.Ptr(armpostgresql.LogicalReplicationOnSourceServerFalse),
	// 			SourceDbServerResourceID: to.Ptr("/subscriptions/ffffffff-ffff-ffff-ffff-ffffffffffff/resourceGroups/exampleresourcegroup/providers/Microsoft.DBForPostgreSql/servers/examplesource"),
	// 			StartDataMigration: to.Ptr(armpostgresql.StartDataMigrationFalse),
	// 			TargetDbServerResourceID: to.Ptr("/subscriptions/ffffffff-ffff-ffff-ffff-ffffffffffff/resourceGroups/exampleresourcegroup/providers/Microsoft.DBForPostgreSql/flexibleServers/exampletarget"),
	// 			TriggerCutover: to.Ptr(armpostgresql.TriggerCutoverFalse),
	// 		},
	// 		Tags: map[string]*string{
	// 			"key1624": to.Ptr("aaaaaaaaaaaaaaaaaaaaaaaaaaaaaa"),
	// 		},
	// 	},
	// }
}

// Generated from example definition: 2025-08-01/MigrationsCreateWithRoles.json
func ExampleMigrationsClient_Create_createAMigrationWithRoles() {
	cred, err := azidentity.NewDefaultAzureCredential(nil)
	if err != nil {
		log.Fatalf("failed to obtain a credential: %v", err)
	}
	ctx := context.Background()
	clientFactory, err := armpostgresql.NewClientFactory("ffffffff-ffff-ffff-ffff-ffffffffffff", cred, nil)
	if err != nil {
		log.Fatalf("failed to create client: %v", err)
	}
	res, err := clientFactory.NewMigrationsClient().Create(ctx, "exampleresourcegroup", "exampleserver", "examplemigration", armpostgresql.Migration{
		Location: to.Ptr("eastus"),
		Properties: &armpostgresql.MigrationProperties{
			DbsToMigrate: []*string{
				to.Ptr("exampledatabase1"),
				to.Ptr("exampledatabase2"),
				to.Ptr("exampledatabase3"),
				to.Ptr("exampledatabase4"),
			},
			MigrateRoles:         to.Ptr(armpostgresql.MigrateRolesAndPermissionsTrue),
			MigrationMode:        to.Ptr(armpostgresql.MigrationModeOffline),
			OverwriteDbsInTarget: to.Ptr(armpostgresql.OverwriteDatabasesOnTargetServerTrue),
			SecretParameters: &armpostgresql.MigrationSecretParameters{
				AdminCredentials: &armpostgresql.AdminCredentials{
					SourceServerPassword: to.Ptr("examplesourcepassword"),
					TargetServerPassword: to.Ptr("exampletargetpassword"),
				},
			},
			SourceDbServerResourceID: to.Ptr("/subscriptions/ffffffff-ffff-ffff-ffff-ffffffffffff/resourceGroups/exampleresourcegroup/providers/Microsoft.DBForPostgreSql/servers/examplesource"),
		},
	}, nil)
	if err != nil {
		log.Fatalf("failed to finish the request: %v", err)
	}
	// You could use response here. We use blank identifier for just demo purposes.
	_ = res
	// If the HTTP response code is 200 as defined in example definition, your response structure would look as follows. Please pay attention that all the values in the output are fake values for just demo purposes.
	// res = armpostgresql.MigrationsClientCreateResponse{
	// 	Migration: &armpostgresql.Migration{
	// 		Name: to.Ptr("examplemigration"),
	// 		Type: to.Ptr("Microsoft.DBForPostgreSql/flexibleServers/migrations"),
	// 		ID: to.Ptr("/subscriptions/ffffffff-ffff-ffff-ffff-ffffffffffff/resourceGroups/exampleresourcegroup/providers/Microsoft.DBForPostgreSql/flexibleServers/exampletarget/migrations/examplemigration"),
	// 		Location: to.Ptr("eastus"),
	// 		Properties: &armpostgresql.MigrationProperties{
	// 			CurrentStatus: &armpostgresql.MigrationStatus{
	// 				CurrentSubStateDetails: &armpostgresql.MigrationSubstateDetails{
	// 					CurrentSubState: to.Ptr(armpostgresql.MigrationSubstatePerformingPreRequisiteSteps),
	// 				},
	// 				Error: to.Ptr(""),
	// 				State: to.Ptr(armpostgresql.MigrationStateInProgress),
	// 			},
	// 			DbsToMigrate: []*string{
	// 				to.Ptr("exampledatabase1"),
	// 				to.Ptr("exampledatabase2"),
	// 				to.Ptr("exampledatabase3"),
	// 				to.Ptr("exampledatabase4"),
	// 			},
	// 			MigrateRoles: to.Ptr(armpostgresql.MigrateRolesAndPermissionsTrue),
	// 			MigrationID: to.Ptr("d3ceacbb-a5fd-43dc-a9db-6022b5154856"),
	// 			MigrationWindowStartTimeInUTC: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2025-06-01T18:30:22.123456Z"); return t}()),
	// 			OverwriteDbsInTarget: to.Ptr(armpostgresql.OverwriteDatabasesOnTargetServerTrue),
	// 			SetupLogicalReplicationOnSourceDbIfNeeded: to.Ptr(armpostgresql.LogicalReplicationOnSourceServerFalse),
	// 			SourceDbServerResourceID: to.Ptr("/subscriptions/ffffffff-ffff-ffff-ffff-ffffffffffff/resourceGroups/exampleresourcegroup/providers/Microsoft.DBForPostgreSql/servers/examplesource"),
	// 			StartDataMigration: to.Ptr(armpostgresql.StartDataMigrationFalse),
	// 			TargetDbServerResourceID: to.Ptr("/subscriptions/ffffffff-ffff-ffff-ffff-ffffffffffff/resourceGroups/exampleresourcegroup/providers/Microsoft.DBForPostgreSql/flexibleServers/exampletarget"),
	// 			TriggerCutover: to.Ptr(armpostgresql.TriggerCutoverFalse),
	// 		},
	// 		Tags: map[string]*string{
	// 			"key1624": to.Ptr("aaaaaaaaaaaaaaaaaaaaaaaaaaaaaa"),
	// 		},
	// 	},
	// }
}

// Generated from example definition: 2025-08-01/MigrationsGet.json
func ExampleMigrationsClient_Get_getInformationAboutAMigration() {
	cred, err := azidentity.NewDefaultAzureCredential(nil)
	if err != nil {
		log.Fatalf("failed to obtain a credential: %v", err)
	}
	ctx := context.Background()
	clientFactory, err := armpostgresql.NewClientFactory("ffffffff-ffff-ffff-ffff-ffffffffffff", cred, nil)
	if err != nil {
		log.Fatalf("failed to create client: %v", err)
	}
	res, err := clientFactory.NewMigrationsClient().Get(ctx, "exampleresourcegroup", "exampleserver", "examplemigration", nil)
	if err != nil {
		log.Fatalf("failed to finish the request: %v", err)
	}
	// You could use response here. We use blank identifier for just demo purposes.
	_ = res
	// If the HTTP response code is 200 as defined in example definition, your response structure would look as follows. Please pay attention that all the values in the output are fake values for just demo purposes.
	// res = armpostgresql.MigrationsClientGetResponse{
	// 	Migration: &armpostgresql.Migration{
	// 		Name: to.Ptr("examplemigration"),
	// 		Type: to.Ptr("Microsoft.DBForPostgreSql/flexibleServers/migrations"),
	// 		ID: to.Ptr("/subscriptions/ffffffff-ffff-ffff-ffff-ffffffffffff/resourceGroups/exampleresourcegroup/providers/Microsoft.DBForPostgreSql/flexibleServers/exampletarget/migrations/examplemigration"),
	// 		Location: to.Ptr("eastus"),
	// 		Properties: &armpostgresql.MigrationProperties{
	// 			CurrentStatus: &armpostgresql.MigrationStatus{
	// 				CurrentSubStateDetails: &armpostgresql.MigrationSubstateDetails{
	// 					CurrentSubState: to.Ptr(armpostgresql.MigrationSubstatePerformingPreRequisiteSteps),
	// 				},
	// 				Error: to.Ptr(""),
	// 				State: to.Ptr(armpostgresql.MigrationStateInProgress),
	// 			},
	// 			DbsToMigrate: []*string{
	// 				to.Ptr("exampledatabase1"),
	// 				to.Ptr("exampledatabase2"),
	// 				to.Ptr("exampledatabase3"),
	// 				to.Ptr("exampledatabase4"),
	// 			},
	// 			MigrateRoles: to.Ptr(armpostgresql.MigrateRolesAndPermissionsFalse),
	// 			MigrationID: to.Ptr("d3ceacbb-a5fd-43dc-a9db-6022b5154856"),
	// 			MigrationWindowStartTimeInUTC: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2025-06-01T18:30:22.123456Z"); return t}()),
	// 			OverwriteDbsInTarget: to.Ptr(armpostgresql.OverwriteDatabasesOnTargetServerFalse),
	// 			SetupLogicalReplicationOnSourceDbIfNeeded: to.Ptr(armpostgresql.LogicalReplicationOnSourceServerFalse),
	// 			SourceDbServerMetadata: &armpostgresql.DbServerMetadata{
	// 				Location: to.Ptr("eastus"),
	// 				SKU: &armpostgresql.ServerSKU{
	// 					Name: to.Ptr("B_Gen5_2"),
	// 					Tier: to.Ptr(armpostgresql.SKUTier("Basic")),
	// 				},
	// 				StorageMb: to.Ptr[int32](1024),
	// 				Version: to.Ptr("10"),
	// 			},
	// 			SourceDbServerResourceID: to.Ptr("/subscriptions/ffffffff-ffff-ffff-ffff-ffffffffffff/resourceGroups/exampleresourcegroup/providers/Microsoft.DBForPostgreSql/servers/examplesource"),
	// 			StartDataMigration: to.Ptr(armpostgresql.StartDataMigrationFalse),
	// 			TargetDbServerMetadata: &armpostgresql.DbServerMetadata{
	// 				Location: to.Ptr("eastus"),
	// 				SKU: &armpostgresql.ServerSKU{
	// 					Name: to.Ptr("Standard_D4ds_v5"),
	// 					Tier: to.Ptr(armpostgresql.SKUTierGeneralPurpose),
	// 				},
	// 				StorageMb: to.Ptr[int32](2048),
	// 				Version: to.Ptr("17"),
	// 			},
	// 			TargetDbServerResourceID: to.Ptr("/subscriptions/ffffffff-ffff-ffff-ffff-ffffffffffff/resourceGroups/exampleresourcegroup/providers/Microsoft.DBForPostgreSql/flexibleServers/exampletarget"),
	// 			TriggerCutover: to.Ptr(armpostgresql.TriggerCutoverFalse),
	// 		},
	// 	},
	// }
}

// Generated from example definition: 2025-08-01/MigrationsGetMigrationWithSuccessfulValidationAndMigration.json
func ExampleMigrationsClient_Get_getInformationAboutAMigrationWithSuccessfulValidationAndSuccessfulMigration() {
	cred, err := azidentity.NewDefaultAzureCredential(nil)
	if err != nil {
		log.Fatalf("failed to obtain a credential: %v", err)
	}
	ctx := context.Background()
	clientFactory, err := armpostgresql.NewClientFactory("ffffffff-ffff-ffff-ffff-ffffffffffff", cred, nil)
	if err != nil {
		log.Fatalf("failed to create client: %v", err)
	}
	res, err := clientFactory.NewMigrationsClient().Get(ctx, "exampleresourcegroup", "exampleserver", "examplemigration", nil)
	if err != nil {
		log.Fatalf("failed to finish the request: %v", err)
	}
	// You could use response here. We use blank identifier for just demo purposes.
	_ = res
	// If the HTTP response code is 200 as defined in example definition, your response structure would look as follows. Please pay attention that all the values in the output are fake values for just demo purposes.
	// res = armpostgresql.MigrationsClientGetResponse{
	// 	Migration: &armpostgresql.Migration{
	// 		Name: to.Ptr("examplemigration"),
	// 		Type: to.Ptr("Microsoft.DBForPostgreSql/flexibleServers/migrations"),
	// 		ID: to.Ptr("/subscriptions/ffffffff-ffff-ffff-ffff-ffffffffffff/resourceGroups/exampleresourcegroup/providers/Microsoft.DBForPostgreSql/flexibleServers/exampletarget/migrations/examplemigration"),
	// 		Location: to.Ptr("eastus"),
	// 		Properties: &armpostgresql.MigrationProperties{
	// 			CurrentStatus: &armpostgresql.MigrationStatus{
	// 				CurrentSubStateDetails: &armpostgresql.MigrationSubstateDetails{
	// 					CurrentSubState: to.Ptr(armpostgresql.MigrationSubstateCompleted),
	// 					DbDetails: map[string]*armpostgresql.DatabaseMigrationState{
	// 						"exampledatabase": &armpostgresql.DatabaseMigrationState{
	// 							AppliedChanges: to.Ptr[int32](0),
	// 							CdcDeleteCounter: to.Ptr[int32](0),
	// 							CdcInsertCounter: to.Ptr[int32](0),
	// 							CdcUpdateCounter: to.Ptr[int32](0),
	// 							DatabaseName: to.Ptr("exampledatabase"),
	// 							EndedOn: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2025-06-01T20:30:22.123456Z"); return t}()),
	// 							FullLoadCompletedTables: to.Ptr[int32](10),
	// 							FullLoadErroredTables: to.Ptr[int32](0),
	// 							FullLoadLoadingTables: to.Ptr[int32](0),
	// 							FullLoadQueuedTables: to.Ptr[int32](0),
	// 							IncomingChanges: to.Ptr[int32](0),
	// 							Latency: to.Ptr[int32](0),
	// 							MigrationState: to.Ptr(armpostgresql.MigrationDatabaseStateSucceeded),
	// 							StartedOn: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2025-06-01T18:30:22.123456Z"); return t}()),
	// 						},
	// 					},
	// 					ValidationDetails: &armpostgresql.ValidationDetails{
	// 						DbLevelValidationDetails: []*armpostgresql.DbLevelValidationStatus{
	// 							{
	// 								DatabaseName: to.Ptr("exampledatabase"),
	// 								EndedOn: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2025-06-01T20:30:22.123456Z"); return t}()),
	// 								StartedOn: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2025-06-01T18:30:22.123456Z"); return t}()),
	// 								Summary: []*armpostgresql.ValidationSummaryItem{
	// 									{
	// 										Type: to.Ptr("SchemaValidation"),
	// 										State: to.Ptr(armpostgresql.ValidationStateSucceeded),
	// 									},
	// 									{
	// 										Type: to.Ptr("ExtensionsValidation"),
	// 										State: to.Ptr(armpostgresql.ValidationStateSucceeded),
	// 									},
	// 									{
	// 										Type: to.Ptr("CollationsValidation"),
	// 										State: to.Ptr(armpostgresql.ValidationStateSucceeded),
	// 									},
	// 								},
	// 							},
	// 						},
	// 						ServerLevelValidationDetails: []*armpostgresql.ValidationSummaryItem{
	// 							{
	// 								Type: to.Ptr("AuthenticationAndConnectivityValidation"),
	// 								State: to.Ptr(armpostgresql.ValidationStateSucceeded),
	// 							},
	// 							{
	// 								Type: to.Ptr("SourceVersionValidation"),
	// 								State: to.Ptr(armpostgresql.ValidationStateSucceeded),
	// 							},
	// 							{
	// 								Type: to.Ptr("ServerParametersValidation"),
	// 								State: to.Ptr(armpostgresql.ValidationStateSucceeded),
	// 							},
	// 						},
	// 						Status: to.Ptr(armpostgresql.ValidationStateSucceeded),
	// 						ValidationEndTimeInUTC: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2025-06-01T20:30:22.123456Z"); return t}()),
	// 						ValidationStartTimeInUTC: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2025-06-01T18:30:22.123456Z"); return t}()),
	// 					},
	// 				},
	// 				State: to.Ptr(armpostgresql.MigrationStateSucceeded),
	// 			},
	// 			DbsToMigrate: []*string{
	// 				to.Ptr("exampledatabase"),
	// 			},
	// 			MigrateRoles: to.Ptr(armpostgresql.MigrateRolesAndPermissionsFalse),
	// 			MigrationID: to.Ptr("f2354e72-2828-4a19-ad20-b4cd9e2673c1"),
	// 			MigrationMode: to.Ptr(armpostgresql.MigrationModeOffline),
	// 			MigrationOption: to.Ptr(armpostgresql.MigrationOptionValidateAndMigrate),
	// 			MigrationWindowEndTimeInUTC: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2025-06-01T20:30:22.123456Z"); return t}()),
	// 			MigrationWindowStartTimeInUTC: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2025-06-01T18:30:22.123456Z"); return t}()),
	// 			OverwriteDbsInTarget: to.Ptr(armpostgresql.OverwriteDatabasesOnTargetServerTrue),
	// 			SetupLogicalReplicationOnSourceDbIfNeeded: to.Ptr(armpostgresql.LogicalReplicationOnSourceServerTrue),
	// 			SourceDbServerResourceID: to.Ptr("20.228.214.65:5432@postgres"),
	// 			TargetDbServerResourceID: to.Ptr("/subscriptions/ffffffff-ffff-ffff-ffff-ffffffffffff/resourceGroups/exampleresourcegroup/providers/Microsoft.DBForPostgreSql/flexibleServers/exampletarget"),
	// 			TriggerCutover: to.Ptr(armpostgresql.TriggerCutoverTrue),
	// 		},
	// 	},
	// }
}

// Generated from example definition: 2025-08-01/MigrationsGetMigrationWithSuccessfulValidationButMigrationFailure.json
func ExampleMigrationsClient_Get_getInformationAboutAMigrationWithSuccessfulValidationButFailedMigration() {
	cred, err := azidentity.NewDefaultAzureCredential(nil)
	if err != nil {
		log.Fatalf("failed to obtain a credential: %v", err)
	}
	ctx := context.Background()
	clientFactory, err := armpostgresql.NewClientFactory("ffffffff-ffff-ffff-ffff-ffffffffffff", cred, nil)
	if err != nil {
		log.Fatalf("failed to create client: %v", err)
	}
	res, err := clientFactory.NewMigrationsClient().Get(ctx, "exampleresourcegroup", "exampleserver", "examplemigration", nil)
	if err != nil {
		log.Fatalf("failed to finish the request: %v", err)
	}
	// You could use response here. We use blank identifier for just demo purposes.
	_ = res
	// If the HTTP response code is 200 as defined in example definition, your response structure would look as follows. Please pay attention that all the values in the output are fake values for just demo purposes.
	// res = armpostgresql.MigrationsClientGetResponse{
	// 	Migration: &armpostgresql.Migration{
	// 		Name: to.Ptr("examplemigration"),
	// 		Type: to.Ptr("Microsoft.DBForPostgreSql/flexibleServers/migrations"),
	// 		ID: to.Ptr("/subscriptions/ffffffff-ffff-ffff-ffff-ffffffffffff/resourceGroups/exampleresourcegroup/providers/Microsoft.DBForPostgreSql/flexibleServers/exampletarget/migrations/examplemigration"),
	// 		Location: to.Ptr("eastus"),
	// 		Properties: &armpostgresql.MigrationProperties{
	// 			CurrentStatus: &armpostgresql.MigrationStatus{
	// 				CurrentSubStateDetails: &armpostgresql.MigrationSubstateDetails{
	// 					CurrentSubState: to.Ptr(armpostgresql.MigrationSubstateCompleted),
	// 					DbDetails: map[string]*armpostgresql.DatabaseMigrationState{
	// 						"exampledatabase": &armpostgresql.DatabaseMigrationState{
	// 							AppliedChanges: to.Ptr[int32](0),
	// 							CdcDeleteCounter: to.Ptr[int32](0),
	// 							CdcInsertCounter: to.Ptr[int32](0),
	// 							CdcUpdateCounter: to.Ptr[int32](0),
	// 							DatabaseName: to.Ptr("exampledatabase"),
	// 							EndedOn: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2025-06-01T20:30:22.123456Z"); return t}()),
	// 							FullLoadCompletedTables: to.Ptr[int32](0),
	// 							FullLoadErroredTables: to.Ptr[int32](0),
	// 							FullLoadLoadingTables: to.Ptr[int32](0),
	// 							FullLoadQueuedTables: to.Ptr[int32](0),
	// 							IncomingChanges: to.Ptr[int32](0),
	// 							Latency: to.Ptr[int32](0),
	// 							Message: to.Ptr("Collation/Encoding not Supported Error:  User defined Collations are present in the source database. Please drop them before retrying the migration."),
	// 							MigrationState: to.Ptr(armpostgresql.MigrationDatabaseStateFailed),
	// 							StartedOn: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2025-06-01T18:30:22.123456Z"); return t}()),
	// 						},
	// 					},
	// 					ValidationDetails: &armpostgresql.ValidationDetails{
	// 						DbLevelValidationDetails: []*armpostgresql.DbLevelValidationStatus{
	// 							{
	// 								DatabaseName: to.Ptr("address_standardizer"),
	// 								EndedOn: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2025-06-01T20:30:22.123456Z"); return t}()),
	// 								StartedOn: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2025-06-01T18:30:22.123456Z"); return t}()),
	// 								Summary: []*armpostgresql.ValidationSummaryItem{
	// 									{
	// 										Type: to.Ptr("ExtensionsValidation"),
	// 										State: to.Ptr(armpostgresql.ValidationStateSucceeded),
	// 									},
	// 								},
	// 							},
	// 						},
	// 						ServerLevelValidationDetails: []*armpostgresql.ValidationSummaryItem{
	// 							{
	// 								Type: to.Ptr("AuthenticationAndConnectivityValidation"),
	// 								State: to.Ptr(armpostgresql.ValidationStateSucceeded),
	// 							},
	// 						},
	// 						Status: to.Ptr(armpostgresql.ValidationStateSucceeded),
	// 						ValidationEndTimeInUTC: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2025-06-01T20:30:22.123456Z"); return t}()),
	// 						ValidationStartTimeInUTC: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2025-06-01T18:30:22.123456Z"); return t}()),
	// 					},
	// 				},
	// 				Error: to.Ptr("exampledatabase: Collation/Encoding not Supported Error:  User defined Collations are present in the source database. Please drop them before retrying the migration."),
	// 				State: to.Ptr(armpostgresql.MigrationStateFailed),
	// 			},
	// 			DbsToMigrate: []*string{
	// 				to.Ptr("exampledatabase"),
	// 			},
	// 			MigrateRoles: to.Ptr(armpostgresql.MigrateRolesAndPermissionsFalse),
	// 			MigrationID: to.Ptr("da52db29-cfeb-4670-a1ad-683edb14c621"),
	// 			MigrationMode: to.Ptr(armpostgresql.MigrationModeOffline),
	// 			MigrationOption: to.Ptr(armpostgresql.MigrationOptionValidateAndMigrate),
	// 			MigrationWindowEndTimeInUTC: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2025-06-01T20:30:22.123456Z"); return t}()),
	// 			MigrationWindowStartTimeInUTC: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2025-06-01T18:30:22.123456Z"); return t}()),
	// 			OverwriteDbsInTarget: to.Ptr(armpostgresql.OverwriteDatabasesOnTargetServerTrue),
	// 			SetupLogicalReplicationOnSourceDbIfNeeded: to.Ptr(armpostgresql.LogicalReplicationOnSourceServerTrue),
	// 			SourceDbServerMetadata: &armpostgresql.DbServerMetadata{
	// 				Location: to.Ptr("eastus"),
	// 				SKU: &armpostgresql.ServerSKU{
	// 				},
	// 				StorageMb: to.Ptr[int32](102400),
	// 			},
	// 			SourceDbServerResourceID: to.Ptr("/subscriptions/ffffffff-ffff-ffff-ffff-ffffffffffff/resourceGroups/exampleresourcegroup/providers/Microsoft.DBforPostgreSQL/servers/examplesource"),
	// 			TargetDbServerMetadata: &armpostgresql.DbServerMetadata{
	// 				Location: to.Ptr("eastus"),
	// 				SKU: &armpostgresql.ServerSKU{
	// 					Name: to.Ptr("Standard_D2ds_v4"),
	// 					Tier: to.Ptr(armpostgresql.SKUTier("Standard_D2ds_v4")),
	// 				},
	// 				StorageMb: to.Ptr[int32](131072),
	// 			},
	// 			TargetDbServerResourceID: to.Ptr("/subscriptions/ffffffff-ffff-ffff-ffff-ffffffffffff/resourceGroups/exampleresourcegroup/providers/Microsoft.DBforPostgreSQL/flexibleServers/exampletarget"),
	// 		},
	// 	},
	// }
}

// Generated from example definition: 2025-08-01/MigrationsGetMigrationWithSuccessfulValidationOnly.json
func ExampleMigrationsClient_Get_getInformationAboutAMigrationWithSuccessfulValidationOnly() {
	cred, err := azidentity.NewDefaultAzureCredential(nil)
	if err != nil {
		log.Fatalf("failed to obtain a credential: %v", err)
	}
	ctx := context.Background()
	clientFactory, err := armpostgresql.NewClientFactory("ffffffff-ffff-ffff-ffff-ffffffffffff", cred, nil)
	if err != nil {
		log.Fatalf("failed to create client: %v", err)
	}
	res, err := clientFactory.NewMigrationsClient().Get(ctx, "exampleresourcegroup", "exampleserver", "examplemigration", nil)
	if err != nil {
		log.Fatalf("failed to finish the request: %v", err)
	}
	// You could use response here. We use blank identifier for just demo purposes.
	_ = res
	// If the HTTP response code is 200 as defined in example definition, your response structure would look as follows. Please pay attention that all the values in the output are fake values for just demo purposes.
	// res = armpostgresql.MigrationsClientGetResponse{
	// 	Migration: &armpostgresql.Migration{
	// 		Name: to.Ptr("examplemigration"),
	// 		Type: to.Ptr("Microsoft.DBForPostgreSql/flexibleServers/migrations"),
	// 		ID: to.Ptr("/subscriptions/ffffffff-ffff-ffff-ffff-ffffffffffff/resourceGroups/exampleresourcegroup/providers/Microsoft.DBForPostgreSql/flexibleServers/exampletarget/migrations/examplemigration"),
	// 		Location: to.Ptr("eastus"),
	// 		Properties: &armpostgresql.MigrationProperties{
	// 			CurrentStatus: &armpostgresql.MigrationStatus{
	// 				CurrentSubStateDetails: &armpostgresql.MigrationSubstateDetails{
	// 					CurrentSubState: to.Ptr(armpostgresql.MigrationSubstateCompleted),
	// 					DbDetails: map[string]*armpostgresql.DatabaseMigrationState{
	// 					},
	// 					ValidationDetails: &armpostgresql.ValidationDetails{
	// 						DbLevelValidationDetails: []*armpostgresql.DbLevelValidationStatus{
	// 							{
	// 								DatabaseName: to.Ptr("UnknownCollationTest"),
	// 								EndedOn: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2025-06-01T20:30:22.123456Z"); return t}()),
	// 								StartedOn: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2025-06-01T18:30:22.123456Z"); return t}()),
	// 								Summary: []*armpostgresql.ValidationSummaryItem{
	// 									{
	// 										Type: to.Ptr("SchemaValidation"),
	// 										State: to.Ptr(armpostgresql.ValidationStateSucceeded),
	// 									},
	// 									{
	// 										Type: to.Ptr("ExtensionsValidation"),
	// 										State: to.Ptr(armpostgresql.ValidationStateSucceeded),
	// 									},
	// 									{
	// 										Type: to.Ptr("CollationsValidation"),
	// 										State: to.Ptr(armpostgresql.ValidationStateSucceeded),
	// 									},
	// 								},
	// 							},
	// 						},
	// 						ServerLevelValidationDetails: []*armpostgresql.ValidationSummaryItem{
	// 							{
	// 								Type: to.Ptr("AuthenticationAndConnectivityValidation"),
	// 								State: to.Ptr(armpostgresql.ValidationStateSucceeded),
	// 							},
	// 							{
	// 								Type: to.Ptr("SourceVersionValidation"),
	// 								State: to.Ptr(armpostgresql.ValidationStateSucceeded),
	// 							},
	// 							{
	// 								Type: to.Ptr("ServerParametersValidation"),
	// 								State: to.Ptr(armpostgresql.ValidationStateSucceeded),
	// 							},
	// 						},
	// 						Status: to.Ptr(armpostgresql.ValidationStateSucceeded),
	// 						ValidationEndTimeInUTC: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2025-06-01T20:30:22.123456Z"); return t}()),
	// 						ValidationStartTimeInUTC: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2025-06-01T18:30:22.123456Z"); return t}()),
	// 					},
	// 				},
	// 				State: to.Ptr(armpostgresql.MigrationStateSucceeded),
	// 			},
	// 			DbsToMigrate: []*string{
	// 				to.Ptr("UnknownCollationTest"),
	// 			},
	// 			MigrateRoles: to.Ptr(armpostgresql.MigrateRolesAndPermissionsFalse),
	// 			MigrationID: to.Ptr("77840327-7be8-44b8-adc0-af0ccccfeb36"),
	// 			MigrationMode: to.Ptr(armpostgresql.MigrationModeOffline),
	// 			MigrationOption: to.Ptr(armpostgresql.MigrationOptionValidate),
	// 			MigrationWindowEndTimeInUTC: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2025-06-01T20:30:22.123456Z"); return t}()),
	// 			MigrationWindowStartTimeInUTC: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2025-06-01T18:30:22.123456Z"); return t}()),
	// 			OverwriteDbsInTarget: to.Ptr(armpostgresql.OverwriteDatabasesOnTargetServerTrue),
	// 			SetupLogicalReplicationOnSourceDbIfNeeded: to.Ptr(armpostgresql.LogicalReplicationOnSourceServerTrue),
	// 			SourceDbServerResourceID: to.Ptr("20.228.214.65:5432@postgres"),
	// 			TargetDbServerResourceID: to.Ptr("/subscriptions/ffffffff-ffff-ffff-ffff-ffffffffffff/resourceGroups/exampleresourcegroup/providers/Microsoft.DBForPostgreSql/flexibleServers/exampletarget"),
	// 			TriggerCutover: to.Ptr(armpostgresql.TriggerCutoverTrue),
	// 		},
	// 	},
	// }
}

// Generated from example definition: 2025-08-01/MigrationsGetMigrationWithValidationFailures.json
func ExampleMigrationsClient_Get_getInformationAboutAMigrationWithValidationFailures() {
	cred, err := azidentity.NewDefaultAzureCredential(nil)
	if err != nil {
		log.Fatalf("failed to obtain a credential: %v", err)
	}
	ctx := context.Background()
	clientFactory, err := armpostgresql.NewClientFactory("ffffffff-ffff-ffff-ffff-ffffffffffff", cred, nil)
	if err != nil {
		log.Fatalf("failed to create client: %v", err)
	}
	res, err := clientFactory.NewMigrationsClient().Get(ctx, "exampleresourcegroup", "exampleserver", "examplemigration", nil)
	if err != nil {
		log.Fatalf("failed to finish the request: %v", err)
	}
	// You could use response here. We use blank identifier for just demo purposes.
	_ = res
	// If the HTTP response code is 200 as defined in example definition, your response structure would look as follows. Please pay attention that all the values in the output are fake values for just demo purposes.
	// res = armpostgresql.MigrationsClientGetResponse{
	// 	Migration: &armpostgresql.Migration{
	// 		Name: to.Ptr("examplemigration"),
	// 		Type: to.Ptr("Microsoft.DBforPostgreSQL/flexibleServers/migrations"),
	// 		ID: to.Ptr("/subscriptions/ffffffff-ffff-ffff-ffff-ffffffffffff/resourceGroups/exampleresourcegroup/providers/Microsoft.DBforPostgreSQL/flexibleServers/exampletarget/migrations/examplemigration"),
	// 		Location: to.Ptr("eastus"),
	// 		Properties: &armpostgresql.MigrationProperties{
	// 			CurrentStatus: &armpostgresql.MigrationStatus{
	// 				CurrentSubStateDetails: &armpostgresql.MigrationSubstateDetails{
	// 					CurrentSubState: to.Ptr(armpostgresql.MigrationSubstateCompleted),
	// 					DbDetails: map[string]*armpostgresql.DatabaseMigrationState{
	// 					},
	// 					ValidationDetails: &armpostgresql.ValidationDetails{
	// 						DbLevelValidationDetails: []*armpostgresql.DbLevelValidationStatus{
	// 							{
	// 								DatabaseName: to.Ptr("exampledatabase1"),
	// 								EndedOn: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2025-06-01T20:30:22.123456Z"); return t}()),
	// 								StartedOn: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2025-06-01T18:30:22.123456Z"); return t}()),
	// 								Summary: []*armpostgresql.ValidationSummaryItem{
	// 									{
	// 										Type: to.Ptr("SchemaValidation"),
	// 										State: to.Ptr(armpostgresql.ValidationStateSucceeded),
	// 									},
	// 									{
	// 										Type: to.Ptr("ExtensionsValidation"),
	// 										Messages: []*armpostgresql.ValidationMessage{
	// 											{
	// 												Message: to.Ptr("Unsupported Extension. Single to Flex migration tool does not support migration of databases having postgres_fdw extension. Consider performing the migration through other migration tools such as pg_dump/pg_restore (https://aka.ms/migrate-using-pgdump-restore)"),
	// 												State: to.Ptr(armpostgresql.ValidationStateFailed),
	// 											},
	// 										},
	// 										State: to.Ptr(armpostgresql.ValidationStateFailed),
	// 									},
	// 									{
	// 										Type: to.Ptr("CollationsValidation"),
	// 										State: to.Ptr(armpostgresql.ValidationStateSucceeded),
	// 									},
	// 								},
	// 							},
	// 							{
	// 								DatabaseName: to.Ptr("exampledatabase2"),
	// 								EndedOn: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2025-06-01T20:30:22.123456Z"); return t}()),
	// 								StartedOn: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2025-06-01T18:30:22.123456Z"); return t}()),
	// 								Summary: []*armpostgresql.ValidationSummaryItem{
	// 									{
	// 										Type: to.Ptr("SchemaValidation"),
	// 										State: to.Ptr(armpostgresql.ValidationStateSucceeded),
	// 									},
	// 									{
	// 										Type: to.Ptr("ExtensionsValidation"),
	// 										State: to.Ptr(armpostgresql.ValidationStateSucceeded),
	// 									},
	// 									{
	// 										Type: to.Ptr("CollationsValidation"),
	// 										State: to.Ptr(armpostgresql.ValidationStateSucceeded),
	// 									},
	// 								},
	// 							},
	// 							{
	// 								DatabaseName: to.Ptr("exampledatabase3"),
	// 								EndedOn: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2025-06-01T20:30:22.123456Z"); return t}()),
	// 								StartedOn: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2025-06-01T18:30:22.123456Z"); return t}()),
	// 								Summary: []*armpostgresql.ValidationSummaryItem{
	// 									{
	// 										Type: to.Ptr("SchemaValidation"),
	// 										State: to.Ptr(armpostgresql.ValidationStateSucceeded),
	// 									},
	// 									{
	// 										Type: to.Ptr("ExtensionsValidation"),
	// 										State: to.Ptr(armpostgresql.ValidationStateSucceeded),
	// 									},
	// 									{
	// 										Type: to.Ptr("CollationsValidation"),
	// 										State: to.Ptr(armpostgresql.ValidationStateSucceeded),
	// 									},
	// 								},
	// 							},
	// 							{
	// 								DatabaseName: to.Ptr("exampledatabase4"),
	// 								EndedOn: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2025-06-01T20:30:22.123456Z"); return t}()),
	// 								StartedOn: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2025-06-01T18:30:22.123456Z"); return t}()),
	// 								Summary: []*armpostgresql.ValidationSummaryItem{
	// 									{
	// 										Type: to.Ptr("SchemaValidation"),
	// 										State: to.Ptr(armpostgresql.ValidationStateSucceeded),
	// 									},
	// 									{
	// 										Type: to.Ptr("ExtensionsValidation"),
	// 										State: to.Ptr(armpostgresql.ValidationStateSucceeded),
	// 									},
	// 								},
	// 							},
	// 							{
	// 								DatabaseName: to.Ptr("exampledatabase5"),
	// 								EndedOn: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2025-06-01T20:30:22.123456Z"); return t}()),
	// 								StartedOn: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2025-06-01T18:30:22.123456Z"); return t}()),
	// 								Summary: []*armpostgresql.ValidationSummaryItem{
	// 									{
	// 										Type: to.Ptr("SchemaValidation"),
	// 										State: to.Ptr(armpostgresql.ValidationStateSucceeded),
	// 									},
	// 									{
	// 										Type: to.Ptr("ExtensionsValidation"),
	// 										State: to.Ptr(armpostgresql.ValidationStateSucceeded),
	// 									},
	// 								},
	// 							},
	// 							{
	// 								DatabaseName: to.Ptr("exampledatabase6"),
	// 								EndedOn: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2025-06-01T20:30:22.123456Z"); return t}()),
	// 								StartedOn: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2025-06-01T18:30:22.123456Z"); return t}()),
	// 								Summary: []*armpostgresql.ValidationSummaryItem{
	// 									{
	// 										Type: to.Ptr("SchemaValidation"),
	// 										State: to.Ptr(armpostgresql.ValidationStateSucceeded),
	// 									},
	// 									{
	// 										Type: to.Ptr("ExtensionsValidation"),
	// 										State: to.Ptr(armpostgresql.ValidationStateSucceeded),
	// 									},
	// 								},
	// 							},
	// 							{
	// 								DatabaseName: to.Ptr("exampledatabase7"),
	// 								EndedOn: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2025-06-01T20:30:22.123456Z"); return t}()),
	// 								StartedOn: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2025-06-01T18:30:22.123456Z"); return t}()),
	// 								Summary: []*armpostgresql.ValidationSummaryItem{
	// 									{
	// 										Type: to.Ptr("SchemaValidation"),
	// 										State: to.Ptr(armpostgresql.ValidationStateSucceeded),
	// 									},
	// 									{
	// 										Type: to.Ptr("ExtensionsValidation"),
	// 										Messages: []*armpostgresql.ValidationMessage{
	// 											{
	// 												Message: to.Ptr("Unsupported Extension. Single to Flex migration tool does not support migration of databases having postgres_fdw extension. Consider performing the migration through other migration tools such as pg_dump/pg_restore (https://aka.ms/migrate-using-pgdump-restore)"),
	// 												State: to.Ptr(armpostgresql.ValidationStateFailed),
	// 											},
	// 										},
	// 										State: to.Ptr(armpostgresql.ValidationStateFailed),
	// 									},
	// 								},
	// 							},
	// 						},
	// 						ServerLevelValidationDetails: []*armpostgresql.ValidationSummaryItem{
	// 							{
	// 								Type: to.Ptr("AuthenticationAndConnectivityValidation"),
	// 								State: to.Ptr(armpostgresql.ValidationStateSucceeded),
	// 							},
	// 							{
	// 								Type: to.Ptr("SourceVersionValidation"),
	// 								State: to.Ptr(armpostgresql.ValidationStateSucceeded),
	// 							},
	// 							{
	// 								Type: to.Ptr("ServerParametersValidation"),
	// 								State: to.Ptr(armpostgresql.ValidationStateSucceeded),
	// 							},
	// 						},
	// 						Status: to.Ptr(armpostgresql.ValidationStateFailed),
	// 						ValidationEndTimeInUTC: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2025-06-01T20:30:22.123456Z"); return t}()),
	// 						ValidationStartTimeInUTC: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2025-06-01T18:30:22.123456Z"); return t}()),
	// 					},
	// 				},
	// 				State: to.Ptr(armpostgresql.MigrationStateValidationFailed),
	// 			},
	// 			DbsToMigrate: []*string{
	// 				to.Ptr("exampledatabase1"),
	// 				to.Ptr("exampledatabase2"),
	// 				to.Ptr("exampledatabase3"),
	// 				to.Ptr("exampledatabase4"),
	// 				to.Ptr("exampledatabase5"),
	// 				to.Ptr("exampledatabase6"),
	// 				to.Ptr("exampledatabase7"),
	// 			},
	// 			MigrateRoles: to.Ptr(armpostgresql.MigrateRolesAndPermissionsFalse),
	// 			MigrationID: to.Ptr("a3e2d3cc-b139-4201-9431-e4f3003140fd"),
	// 			MigrationMode: to.Ptr(armpostgresql.MigrationModeOffline),
	// 			MigrationOption: to.Ptr(armpostgresql.MigrationOptionValidate),
	// 			MigrationWindowEndTimeInUTC: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2025-06-01T20:30:22.123456Z"); return t}()),
	// 			MigrationWindowStartTimeInUTC: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2025-06-01T18:30:22.123456Z"); return t}()),
	// 			OverwriteDbsInTarget: to.Ptr(armpostgresql.OverwriteDatabasesOnTargetServerTrue),
	// 			SetupLogicalReplicationOnSourceDbIfNeeded: to.Ptr(armpostgresql.LogicalReplicationOnSourceServerTrue),
	// 			SourceDbServerResourceID: to.Ptr("20.228.214.65:5432@postgres"),
	// 			TargetDbServerResourceID: to.Ptr("/subscriptions/ffffffff-ffff-ffff-ffff-ffffffffffff/resourceGroups/exampleresourcegroup/providers/Microsoft.DBforPostgreSQL/flexibleServers/exampletarget"),
	// 			TriggerCutover: to.Ptr(armpostgresql.TriggerCutoverTrue),
	// 		},
	// 	},
	// }
}

// Generated from example definition: 2025-08-01/MigrationsListByTargetServer.json
func ExampleMigrationsClient_NewListByTargetServerPager() {
	cred, err := azidentity.NewDefaultAzureCredential(nil)
	if err != nil {
		log.Fatalf("failed to obtain a credential: %v", err)
	}
	ctx := context.Background()
	clientFactory, err := armpostgresql.NewClientFactory("ffffffff-ffff-ffff-ffff-ffffffffffff", cred, nil)
	if err != nil {
		log.Fatalf("failed to create client: %v", err)
	}
	pager := clientFactory.NewMigrationsClient().NewListByTargetServerPager("exampleresourcegroup", "exampleserver", &armpostgresql.MigrationsClientListByTargetServerOptions{
		MigrationListFilter: to.Ptr(armpostgresql.MigrationListFilterAll)})
	for pager.More() {
		page, err := pager.NextPage(ctx)
		if err != nil {
			log.Fatalf("failed to advance page: %v", err)
		}
		for _, v := range page.Value {
			// You could use page here. We use blank identifier for just demo purposes.
			_ = v
		}
		// If the HTTP response code is 200 as defined in example definition, your page structure would look as follows. Please pay attention that all the values in the output are fake values for just demo purposes.
		// page = armpostgresql.MigrationsClientListByTargetServerResponse{
		// 	MigrationList: armpostgresql.MigrationList{
		// 		Value: []*armpostgresql.Migration{
		// 			{
		// 				Name: to.Ptr("examplemigration"),
		// 				Type: to.Ptr("Microsoft.DBForPostgreSql/flexibleServers/migrations"),
		// 				ID: to.Ptr("/subscriptions/ffffffff-ffff-ffff-ffff-ffffffffffff/resourceGroups/exampleresourcegroup/providers/Microsoft.DBForPostgreSql/flexibleServers/exampletarget/migrations/examplemigration"),
		// 				Location: to.Ptr("eastus"),
		// 				Properties: &armpostgresql.MigrationProperties{
		// 					CurrentStatus: &armpostgresql.MigrationStatus{
		// 						CurrentSubStateDetails: &armpostgresql.MigrationSubstateDetails{
		// 							CurrentSubState: to.Ptr(armpostgresql.MigrationSubstatePerformingPreRequisiteSteps),
		// 						},
		// 						Error: to.Ptr(""),
		// 						State: to.Ptr(armpostgresql.MigrationStateInProgress),
		// 					},
		// 					DbsToMigrate: []*string{
		// 						to.Ptr("exampledatabase1"),
		// 						to.Ptr("exampledatabase2"),
		// 						to.Ptr("exampledatabase3"),
		// 						to.Ptr("exampledatabase4"),
		// 					},
		// 					MigrateRoles: to.Ptr(armpostgresql.MigrateRolesAndPermissionsFalse),
		// 					MigrationID: to.Ptr("d3ceacbb-a5fd-43dc-a9db-6022b5154856"),
		// 					MigrationWindowStartTimeInUTC: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2025-06-01T20:30:22.123456Z"); return t}()),
		// 					OverwriteDbsInTarget: to.Ptr(armpostgresql.OverwriteDatabasesOnTargetServerFalse),
		// 					SetupLogicalReplicationOnSourceDbIfNeeded: to.Ptr(armpostgresql.LogicalReplicationOnSourceServerFalse),
		// 					SourceDbServerMetadata: &armpostgresql.DbServerMetadata{
		// 						Location: to.Ptr("eastus"),
		// 						SKU: &armpostgresql.ServerSKU{
		// 							Name: to.Ptr("B_Gen5_2"),
		// 							Tier: to.Ptr(armpostgresql.SKUTier("Basic")),
		// 						},
		// 						StorageMb: to.Ptr[int32](1024),
		// 						Version: to.Ptr("10"),
		// 					},
		// 					SourceDbServerResourceID: to.Ptr("/subscriptions/ffffffff-ffff-ffff-ffff-ffffffffffff/resourceGroups/exampleresourcegroup/providers/Microsoft.DBForPostgreSql/servers/examplesource"),
		// 					StartDataMigration: to.Ptr(armpostgresql.StartDataMigrationFalse),
		// 					TargetDbServerMetadata: &armpostgresql.DbServerMetadata{
		// 						Location: to.Ptr("eastus"),
		// 						SKU: &armpostgresql.ServerSKU{
		// 							Name: to.Ptr("Standard_D4ds_v5"),
		// 							Tier: to.Ptr(armpostgresql.SKUTierGeneralPurpose),
		// 						},
		// 						StorageMb: to.Ptr[int32](2048),
		// 						Version: to.Ptr("17"),
		// 					},
		// 					TargetDbServerResourceID: to.Ptr("/subscriptions/ffffffff-ffff-ffff-ffff-ffffffffffff/resourceGroups/exampleresourcegroup/providers/Microsoft.DBForPostgreSql/flexibleServers/exampletarget"),
		// 					TriggerCutover: to.Ptr(armpostgresql.TriggerCutoverFalse),
		// 				},
		// 			},
		// 		},
		// 	},
		// }
	}
}

// Generated from example definition: 2025-08-01/MigrationsUpdate.json
func ExampleMigrationsClient_Update() {
	cred, err := azidentity.NewDefaultAzureCredential(nil)
	if err != nil {
		log.Fatalf("failed to obtain a credential: %v", err)
	}
	ctx := context.Background()
	clientFactory, err := armpostgresql.NewClientFactory("ffffffff-ffff-ffff-ffff-ffffffffffff", cred, nil)
	if err != nil {
		log.Fatalf("failed to create client: %v", err)
	}
	res, err := clientFactory.NewMigrationsClient().Update(ctx, "exampleresourcegroup", "exampleserver", "examplemigration", armpostgresql.MigrationResourceForPatch{
		Properties: &armpostgresql.MigrationPropertiesForPatch{
			SetupLogicalReplicationOnSourceDbIfNeeded: to.Ptr(armpostgresql.LogicalReplicationOnSourceServerTrue),
		},
	}, nil)
	if err != nil {
		log.Fatalf("failed to finish the request: %v", err)
	}
	// You could use response here. We use blank identifier for just demo purposes.
	_ = res
	// If the HTTP response code is 200 as defined in example definition, your response structure would look as follows. Please pay attention that all the values in the output are fake values for just demo purposes.
	// res = armpostgresql.MigrationsClientUpdateResponse{
	// 	Migration: &armpostgresql.Migration{
	// 		Name: to.Ptr("examplemigration"),
	// 		Type: to.Ptr("Microsoft.DBForPostgreSql/flexibleServers/migrations"),
	// 		ID: to.Ptr("/subscriptions/ffffffff-ffff-ffff-ffff-ffffffffffff/resourceGroups/exampleresourcegroup/providers/Microsoft.DBForPostgreSql/flexibleServers/exampletarget/migrations/examplemigration"),
	// 		Location: to.Ptr("eastus"),
	// 		Properties: &armpostgresql.MigrationProperties{
	// 			CurrentStatus: &armpostgresql.MigrationStatus{
	// 				CurrentSubStateDetails: &armpostgresql.MigrationSubstateDetails{
	// 					CurrentSubState: to.Ptr(armpostgresql.MigrationSubstatePerformingPreRequisiteSteps),
	// 				},
	// 				Error: to.Ptr(""),
	// 				State: to.Ptr(armpostgresql.MigrationStateInProgress),
	// 			},
	// 			DbsToMigrate: []*string{
	// 				to.Ptr("exampledatabase1"),
	// 				to.Ptr("exampledatabase2"),
	// 				to.Ptr("exampledatabase3"),
	// 				to.Ptr("exampledatabase4"),
	// 			},
	// 			MigrateRoles: to.Ptr(armpostgresql.MigrateRolesAndPermissionsFalse),
	// 			MigrationID: to.Ptr("d3ceacbb-a5fd-43dc-a9db-6022b5154856"),
	// 			MigrationWindowStartTimeInUTC: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2025-06-01T20:30:22.123456Z"); return t}()),
	// 			OverwriteDbsInTarget: to.Ptr(armpostgresql.OverwriteDatabasesOnTargetServerFalse),
	// 			SetupLogicalReplicationOnSourceDbIfNeeded: to.Ptr(armpostgresql.LogicalReplicationOnSourceServerTrue),
	// 			SourceDbServerMetadata: &armpostgresql.DbServerMetadata{
	// 				Location: to.Ptr("eastus"),
	// 				SKU: &armpostgresql.ServerSKU{
	// 					Name: to.Ptr("B_Gen5_2"),
	// 					Tier: to.Ptr(armpostgresql.SKUTier("Basic")),
	// 				},
	// 				StorageMb: to.Ptr[int32](1024),
	// 				Version: to.Ptr("10"),
	// 			},
	// 			SourceDbServerResourceID: to.Ptr("/subscriptions/ffffffff-ffff-ffff-ffff-ffffffffffff/resourceGroups/exampleresourcegroup/providers/Microsoft.DBForPostgreSql/servers/examplesource"),
	// 			StartDataMigration: to.Ptr(armpostgresql.StartDataMigrationFalse),
	// 			TargetDbServerMetadata: &armpostgresql.DbServerMetadata{
	// 				Location: to.Ptr("eastus"),
	// 				SKU: &armpostgresql.ServerSKU{
	// 					Name: to.Ptr("Standard_D4ds_v5"),
	// 					Tier: to.Ptr(armpostgresql.SKUTierGeneralPurpose),
	// 				},
	// 				StorageMb: to.Ptr[int32](2048),
	// 				Version: to.Ptr("17"),
	// 			},
	// 			TargetDbServerResourceID: to.Ptr("/subscriptions/ffffffff-ffff-ffff-ffff-ffffffffffff/resourceGroups/exampleresourcegroup/providers/Microsoft.DBForPostgreSql/flexibleServers/exampletarget"),
	// 			TriggerCutover: to.Ptr(armpostgresql.TriggerCutoverFalse),
	// 		},
	// 	},
	// }
}
