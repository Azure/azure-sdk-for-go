// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) Go Code Generator. DO NOT EDIT.

package armpostgresql

import "time"

// AdminCredentials - Credentials of administrator users for source and target servers.
type AdminCredentials struct {
	// REQUIRED; Password for the user of the source server.
	SourceServerPassword *string

	// REQUIRED; Password for the user of the target server.
	TargetServerPassword *string
}

// AdminCredentialsForPatch - Credentials of administrator users for source and target servers.
type AdminCredentialsForPatch struct {
	// Password for the user of the source server.
	SourceServerPassword *string

	// Password for the user of the target server.
	TargetServerPassword *string
}

// AdministratorMicrosoftEntra - Server administrator associated to a Microsoft Entra principal.
type AdministratorMicrosoftEntra struct {
	// REQUIRED; Properties of a server administrator associated to a Microsoft Entra principal.
	Properties *AdministratorMicrosoftEntraProperties

	// READ-ONLY; Fully qualified resource ID for the resource. Ex - /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}
	ID *string

	// READ-ONLY; The name of the resource
	Name *string

	// READ-ONLY; Azure Resource Manager metadata containing createdBy and modifiedBy information.
	SystemData *SystemData

	// READ-ONLY; The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or "Microsoft.Storage/storageAccounts"
	Type *string
}

// AdministratorMicrosoftEntraAdd - Server administrator associated to a Microsoft Entra principal.
type AdministratorMicrosoftEntraAdd struct {
	// Properties of the server administrator associated to a Microsoft Entra principal.
	Properties *AdministratorMicrosoftEntraPropertiesForAdd
}

// AdministratorMicrosoftEntraList - List of server administrators associated to Microsoft Entra principals.
type AdministratorMicrosoftEntraList struct {
	// REQUIRED; The AdministratorMicrosoftEntra items on this page
	Value []*AdministratorMicrosoftEntra

	// The link to the next page of items
	NextLink *string
}

// AdministratorMicrosoftEntraProperties - Properties of a server administrator associated to a Microsoft Entra principal.
type AdministratorMicrosoftEntraProperties struct {
	// Object identifier of the Microsoft Entra principal.
	ObjectID *string

	// Name of the Microsoft Entra principal.
	PrincipalName *string

	// Type of Microsoft Entra principal to which the server administrator is associated.
	PrincipalType *PrincipalType

	// Identifier of the tenant in which the Microsoft Entra principal exists.
	TenantID *string
}

// AdministratorMicrosoftEntraPropertiesForAdd - Properties of a server administrator associated to a Microsoft Entra principal.
type AdministratorMicrosoftEntraPropertiesForAdd struct {
	// Name of the Microsoft Entra principal.
	PrincipalName *string

	// Type of Microsoft Entra principal to which the server administrator is associated.
	PrincipalType *PrincipalType

	// Identifier of the tenant in which the Microsoft Entra principal exists.
	TenantID *string
}

// AdvancedThreatProtectionSettingsList - List of advanced threat protection settings for a server.
type AdvancedThreatProtectionSettingsList struct {
	// READ-ONLY; The AdvancedThreatProtectionSettingsModel items on this page
	Value []*AdvancedThreatProtectionSettingsModel

	// The link to the next page of items
	NextLink *string
}

// AdvancedThreatProtectionSettingsModel - Advanced threat protection settings of the server.
type AdvancedThreatProtectionSettingsModel struct {
	// Advanced threat protection properties.
	Properties *AdvancedThreatProtectionSettingsProperties

	// READ-ONLY; Fully qualified resource ID for the resource. Ex - /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}
	ID *string

	// READ-ONLY; The name of the resource
	Name *string

	// READ-ONLY; Azure Resource Manager metadata containing createdBy and modifiedBy information.
	SystemData *SystemData

	// READ-ONLY; The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or "Microsoft.Storage/storageAccounts"
	Type *string
}

// AdvancedThreatProtectionSettingsProperties - Properties of advanced threat protection state for a server.
type AdvancedThreatProtectionSettingsProperties struct {
	// REQUIRED; Specifies the state of the advanced threat protection, whether it is enabled, disabled, or a state has not been
	// applied yet on the server.
	State *ThreatProtectionState

	// READ-ONLY; Specifies the creation time (UTC) of the policy.
	CreationTime *time.Time
}

// AuthConfig - Authentication configuration properties of a server.
type AuthConfig struct {
	// Indicates if the server supports Microsoft Entra authentication.
	ActiveDirectoryAuth *MicrosoftEntraAuth

	// Indicates if the server supports password based authentication.
	PasswordAuth *PasswordBasedAuth

	// Identifier of the tenant of the delegated resource.
	TenantID *string
}

// AuthConfigForPatch - Authentication configuration properties of a server.
type AuthConfigForPatch struct {
	// Indicates if the server supports Microsoft Entra authentication.
	ActiveDirectoryAuth *MicrosoftEntraAuth

	// Indicates if the server supports password based authentication.
	PasswordAuth *PasswordBasedAuth

	// Identifier of the tenant of the delegated resource.
	TenantID *string
}

// Backup properties of a server.
type Backup struct {
	// Backup retention days for the server.
	BackupRetentionDays *int32

	// Indicates if the server is configured to create geographically redundant backups.
	GeoRedundantBackup *GeographicallyRedundantBackup

	// READ-ONLY; Earliest restore point time (ISO8601 format) for a server.
	EarliestRestoreDate *time.Time
}

// BackupAutomaticAndOnDemand - Properties of a backup.
type BackupAutomaticAndOnDemand struct {
	// Properties of a backup.
	Properties *BackupAutomaticAndOnDemandProperties

	// READ-ONLY; Fully qualified resource ID for the resource. Ex - /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}
	ID *string

	// READ-ONLY; The name of the resource
	Name *string

	// READ-ONLY; Azure Resource Manager metadata containing createdBy and modifiedBy information.
	SystemData *SystemData

	// READ-ONLY; The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or "Microsoft.Storage/storageAccounts"
	Type *string
}

// BackupAutomaticAndOnDemandList - List of backups.
type BackupAutomaticAndOnDemandList struct {
	// REQUIRED; The BackupAutomaticAndOnDemand items on this page
	Value []*BackupAutomaticAndOnDemand

	// The link to the next page of items
	NextLink *string
}

// BackupAutomaticAndOnDemandProperties - Properties of a backup.
type BackupAutomaticAndOnDemandProperties struct {
	// Type of backup.
	BackupType *BackupType

	// Time(ISO8601 format) at which the backup was completed.
	CompletedTime *time.Time

	// Source of the backup.
	Source *string
}

// BackupForPatch - Backup properties of a server.
type BackupForPatch struct {
	// Backup retention days for the server.
	BackupRetentionDays *int32

	// READ-ONLY; Earliest restore point time (ISO8601 format) for a server.
	EarliestRestoreDate *time.Time

	// READ-ONLY; Indicates if the server is configured to create geographically redundant backups.
	GeoRedundantBackup *GeographicallyRedundantBackup
}

// BackupSettings - The settings for the long term backup.
type BackupSettings struct {
	// REQUIRED; Backup Name for the current backup
	BackupName *string
}

// BackupStoreDetails - Details about the target where the backup content will be stored.
type BackupStoreDetails struct {
	// REQUIRED; List of SAS uri of storage containers where backup data is to be streamed/copied.
	SasURIList []*string
}

// BackupsLongTermRetentionOperation - Response for the LTR backup Operation API call
type BackupsLongTermRetentionOperation struct {
	// Long Term Retention Backup Operation Resource Properties
	Properties *LtrBackupOperationResponseProperties

	// READ-ONLY; Fully qualified resource ID for the resource. Ex - /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}
	ID *string

	// READ-ONLY; The name of the resource
	Name *string

	// READ-ONLY; Azure Resource Manager metadata containing createdBy and modifiedBy information.
	SystemData *SystemData

	// READ-ONLY; The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or "Microsoft.Storage/storageAccounts"
	Type *string
}

// BackupsLongTermRetentionRequest - The request that is made for a long term retention backup.
type BackupsLongTermRetentionRequest struct {
	// REQUIRED; Backup Settings
	BackupSettings *BackupSettings

	// REQUIRED; Backup store detail for target server
	TargetDetails *BackupStoreDetails
}

// BackupsLongTermRetentionResponse - Response for the LTR backup API call
type BackupsLongTermRetentionResponse struct {
	// Long Term Retention Backup Operation Resource Properties
	Properties *LtrBackupOperationResponseProperties
}

// BackupsLongTermRetentionResponseProperties - Response for the pre-backup request.
type BackupsLongTermRetentionResponseProperties struct {
	// REQUIRED; Number of storage containers the plugin will use during backup. More than one containers may be used for size
	// limitations, parallelism, or redundancy etc.
	NumberOfContainers *int32
}

// Capability for the Azure Database for PostgreSQL flexible server.
type Capability struct {
	// Name of flexible servers capabilities.
	Name *string

	// READ-ONLY; Indicates if fast provisioning is supported. 'Enabled' means fast provisioning is supported. 'Disabled' stands
	// for fast provisioning is not supported. Will be deprecated in the future. Look to Supported Features for 'FastProvisioning'.
	FastProvisioningSupported *FastProvisioningSupport

	// READ-ONLY; Indicates if geographically redundant backups are supported in this location. 'Enabled' means geographically
	// redundant backups are supported. 'Disabled' stands for geographically redundant backup is not supported. Will be deprecated
	// in the future. Look to Supported Features for 'GeoBackup'.
	GeoBackupSupported *GeographicallyRedundantBackupSupport

	// READ-ONLY; Indicates if resizing the storage, without interrupting the operation of the database engine, is supported in
	// this location for the given subscription. 'Enabled' means resizing the storage without interrupting the operation of the
	// database engine is supported. 'Disabled' means resizing the storage without interrupting the operation of the database
	// engine is not supported. Will be deprecated in the future. Look to Supported Features for 'OnlineResize'.
	OnlineResizeSupported *OnlineStorageResizeSupport

	// READ-ONLY; The reason for the capability not being available.
	Reason *string

	// READ-ONLY; Indicates if this location is restricted. 'Enabled' means location is restricted. 'Disabled' stands for location
	// is not restricted. Will be deprecated in the future. Look to Supported Features for 'Restricted'.
	Restricted *LocationRestricted

	// READ-ONLY; The status of the capability.
	Status *CapabilityStatus

	// READ-ONLY; Indicates if storage autogrow is supported in this location. 'Enabled' means storage autogrow is supported.
	// 'Disabled' stands for storage autogrow is not supported. Will be deprecated in the future. Look to Supported Features for
	// 'StorageAutoGrowth'.
	StorageAutoGrowthSupported *StorageAutoGrowthSupport

	// READ-ONLY; List of compute tiers supporting fast provisioning.
	SupportedFastProvisioningEditions []*FastProvisioningEditionCapability

	// READ-ONLY; Features supported.
	SupportedFeatures []*SupportedFeature

	// READ-ONLY; List of supported compute tiers.
	SupportedServerEditions []*ServerEditionCapability

	// READ-ONLY; List of supported major versions of PostgreSQL database engine.
	SupportedServerVersions []*ServerVersionCapability

	// READ-ONLY; Indicates if high availability with zone redundancy is supported in conjunction with geographically redundant
	// backups in this location. 'Enabled' means high availability with zone redundancy is supported in conjunction with geographically
	// redundant backups is supported. 'Disabled' stands for high availability with zone redundancy is supported in conjunction
	// with geographically redundant backups is not supported. Will be deprecated in the future. Look to Supported Features for
	// 'ZoneRedundantHaAndGeoBackup'.
	ZoneRedundantHaAndGeoBackupSupported *ZoneRedundantHighAvailabilityAndGeographicallyRedundantBackupSupport

	// READ-ONLY; Indicates if high availability with zone redundancy is supported in this location. 'Enabled' means high availability
	// with zone redundancy is supported. 'Disabled' stands for high availability with zone redundancy is not supported. Will
	// be deprecated in the future. Look to Supported Features for 'ZoneRedundantHa'.
	ZoneRedundantHaSupported *ZoneRedundantHighAvailabilitySupport
}

// CapabilityList - List of capabilities for the Azure Database for PostgreSQL flexible server.
type CapabilityList struct {
	// READ-ONLY; The Capability items on this page
	Value []*Capability

	// The link to the next page of items
	NextLink *string
}

// CapturedLog - Log file.
type CapturedLog struct {
	// Properties of a log file.
	Properties *CapturedLogProperties

	// READ-ONLY; Fully qualified resource ID for the resource. Ex - /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}
	ID *string

	// READ-ONLY; The name of the resource
	Name *string

	// READ-ONLY; Azure Resource Manager metadata containing createdBy and modifiedBy information.
	SystemData *SystemData

	// READ-ONLY; The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or "Microsoft.Storage/storageAccounts"
	Type *string
}

// CapturedLogList - List of log files.
type CapturedLogList struct {
	// REQUIRED; The CapturedLog items on this page
	Value []*CapturedLog

	// The link to the next page of items
	NextLink *string
}

// CapturedLogProperties - Properties of a log file.
type CapturedLogProperties struct {
	// Creation timestamp of the log file.
	CreatedTime *time.Time

	// Last modified timestamp of the log file.
	LastModifiedTime *time.Time

	// Size (in KB) of the log file.
	SizeInKb *int64

	// Type of log file. Can be 'ServerLogs' or 'UpgradeLogs'.
	Type *string

	// URL to download the log file from.
	URL *string
}

// CheckNameAvailabilityRequest - The check availability request body.
type CheckNameAvailabilityRequest struct {
	// The name of the resource for which availability needs to be checked.
	Name *string

	// The resource type.
	Type *string
}

// Cluster properties of a server.
type Cluster struct {
	// Number of nodes assigned to the elastic cluster.
	ClusterSize *int32

	// Default database name for the elastic cluster.
	DefaultDatabaseName *string
}

// Configuration (also known as server parameter).
type Configuration struct {
	// Properties of a configuration (also known as server parameter).
	Properties *ConfigurationProperties

	// READ-ONLY; Fully qualified resource ID for the resource. Ex - /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}
	ID *string

	// READ-ONLY; The name of the resource
	Name *string

	// READ-ONLY; Azure Resource Manager metadata containing createdBy and modifiedBy information.
	SystemData *SystemData

	// READ-ONLY; The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or "Microsoft.Storage/storageAccounts"
	Type *string
}

// ConfigurationForUpdate - Configuration (also known as server parameter).
type ConfigurationForUpdate struct {
	// Properties of a configuration (also known as server parameter).
	Properties *ConfigurationProperties
}

// ConfigurationList - List of configurations (also known as server parameters).
type ConfigurationList struct {
	// REQUIRED; The Configuration items on this page
	Value []*Configuration

	// The link to the next page of items
	NextLink *string
}

// ConfigurationProperties - Properties of a configuration (also known as server parameter).
type ConfigurationProperties struct {
	// Source of the value assigned to the configuration (also known as server parameter). Required to update the value assigned
	// to a specific modifiable configuration.
	Source *string

	// Value of the configuration (also known as server parameter). Required to update the value assigned to a specific modifiable
	// configuration.
	Value *string

	// READ-ONLY; Allowed values of the configuration (also known as server parameter).
	AllowedValues *string

	// READ-ONLY; Data type of the configuration (also known as server parameter).
	DataType *ConfigurationDataType

	// READ-ONLY; Value assigned by default to the configuration (also known as server parameter).
	DefaultValue *string

	// READ-ONLY; Description of the configuration (also known as server parameter).
	Description *string

	// READ-ONLY; Link pointing to the documentation of the configuration (also known as server parameter).
	DocumentationLink *string

	// READ-ONLY; Indicates if the value assigned to the configuration (also known as server parameter) is pending a server restart
	// for it to take effect.
	IsConfigPendingRestart *bool

	// READ-ONLY; Indicates if it's a dynamic (true) or static (false) configuration (also known as server parameter). Static
	// server parameters require a server restart after changing the value assigned to them, for the change to take effect. Dynamic
	// server parameters do not require a server restart after changing the value assigned to them, for the change to take effect.
	IsDynamicConfig *bool

	// READ-ONLY; Indicates if it's a read-only (true) or modifiable (false) configuration (also known as server parameter).
	IsReadOnly *bool

	// READ-ONLY; Units in which the configuration (also known as server parameter) value is expressed.
	Unit *string
}

// DataEncryption - Data encryption properties of a server.
type DataEncryption struct {
	// Identifier of the user assigned managed identity used to access the key in Azure Key Vault for data encryption of the geographically
	// redundant storage associated to a server that is configured to support geographically redundant backups.
	GeoBackupKeyURI *string

	// Identifier of the user assigned managed identity used to access the key in Azure Key Vault for data encryption of the geographically
	// redundant storage associated to a server that is configured to support geographically redundant backups.
	GeoBackupUserAssignedIdentityID *string

	// URI of the key in Azure Key Vault used for data encryption of the primary storage associated to a server.
	PrimaryKeyURI *string

	// Identifier of the user assigned managed identity used to access the key in Azure Key Vault for data encryption of the primary
	// storage associated to a server.
	PrimaryUserAssignedIdentityID *string

	// Data encryption type used by a server.
	Type *DataEncryptionType

	// READ-ONLY; Status of key used by a server configured with data encryption based on customer managed key, to encrypt the
	// geographically redundant storage associated to the server when it is configured to support geographically redundant backups.
	GeoBackupEncryptionKeyStatus *EncryptionKeyStatus

	// READ-ONLY; Status of key used by a server configured with data encryption based on customer managed key, to encrypt the
	// primary storage associated to the server.
	PrimaryEncryptionKeyStatus *EncryptionKeyStatus
}

// Database - Represents a database.
type Database struct {
	// Properties of a database.
	Properties *DatabaseProperties

	// READ-ONLY; Fully qualified resource ID for the resource. Ex - /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}
	ID *string

	// READ-ONLY; The name of the resource
	Name *string

	// READ-ONLY; Azure Resource Manager metadata containing createdBy and modifiedBy information.
	SystemData *SystemData

	// READ-ONLY; The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or "Microsoft.Storage/storageAccounts"
	Type *string
}

// DatabaseList - List of all databases in a server.
type DatabaseList struct {
	// REQUIRED; The Database items on this page
	Value []*Database

	// The link to the next page of items
	NextLink *string
}

// DatabaseMigrationState - Migration state of a database.
type DatabaseMigrationState struct {
	// Change Data Capture applied changes counter.
	AppliedChanges *int32

	// Change Data Capture delete counter.
	CdcDeleteCounter *int32

	// Change Data Capture insert counter.
	CdcInsertCounter *int32

	// Change Data Capture update counter.
	CdcUpdateCounter *int32

	// Name of database.
	DatabaseName *string

	// End time of a migration state.
	EndedOn *time.Time

	// Number of tables loaded during the migration of a database.
	FullLoadCompletedTables *int32

	// Number of tables encountering errors during the migration of a database.
	FullLoadErroredTables *int32

	// Number of tables loading during the migration of a database.
	FullLoadLoadingTables *int32

	// Number of tables queued for the migration of a database.
	FullLoadQueuedTables *int32

	// Change Data Capture incoming changes counter.
	IncomingChanges *int32

	// Lag in seconds between source and target during online phase.
	Latency *int32

	// Error message, if any, for the migration state.
	Message *string

	// Migration operation of a database.
	MigrationOperation *string

	// Migration state of a database.
	MigrationState *MigrationDatabaseState

	// Start time of a migration state.
	StartedOn *time.Time
}

// DatabaseProperties - Properties of a database.
type DatabaseProperties struct {
	// Character set of the database.
	Charset *string

	// Collation of the database.
	Collation *string
}

// DbLevelValidationStatus - Validation status summary for a database.
type DbLevelValidationStatus struct {
	// Name of database.
	DatabaseName *string

	// End time of a database level validation.
	EndedOn *time.Time

	// Start time of a database level validation.
	StartedOn *time.Time

	// Summary of database level validations.
	Summary []*ValidationSummaryItem
}

// DbServerMetadata - Database server metadata.
type DbServerMetadata struct {
	// Compute tier and size of the database server. This object is empty for an Azure Database for PostgreSQL single server.
	SKU *ServerSKU

	// Storage size (in MB) for database server.
	StorageMb *int32

	// Major version of PostgreSQL database engine.
	Version *string

	// READ-ONLY; Location of database server.
	Location *string
}

// DelegatedSubnetUsage - Delegated subnet usage data.
type DelegatedSubnetUsage struct {
	// READ-ONLY; Name of the delegated subnet for which IP addresses are in use
	SubnetName *string

	// READ-ONLY; Number of IP addresses used by the delegated subnet
	Usage *int64
}

// FastProvisioningEditionCapability - Capability of a fast provisioning compute tier.
type FastProvisioningEditionCapability struct {
	// READ-ONLY; The reason for the capability not being available.
	Reason *string

	// READ-ONLY; Count of servers in cache matching this specification.
	ServerCount *int32

	// READ-ONLY; The status of the capability.
	Status *CapabilityStatus

	// READ-ONLY; Compute name (SKU) supporting fast provisioning.
	SupportedSKU *string

	// READ-ONLY; Major version of PostgreSQL database engine supporting fast provisioning.
	SupportedServerVersions *string

	// READ-ONLY; Storage size (in GB) supporting fast provisioning.
	SupportedStorageGb *int32

	// READ-ONLY; Compute tier supporting fast provisioning.
	SupportedTier *string
}

// FirewallRule - Firewall rule.
type FirewallRule struct {
	// REQUIRED; Properties of a firewall rule.
	Properties *FirewallRuleProperties

	// READ-ONLY; Fully qualified resource ID for the resource. Ex - /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}
	ID *string

	// READ-ONLY; The name of the resource
	Name *string

	// READ-ONLY; Azure Resource Manager metadata containing createdBy and modifiedBy information.
	SystemData *SystemData

	// READ-ONLY; The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or "Microsoft.Storage/storageAccounts"
	Type *string
}

// FirewallRuleList - List of firewall rules.
type FirewallRuleList struct {
	// REQUIRED; The FirewallRule items on this page
	Value []*FirewallRule

	// The link to the next page of items
	NextLink *string
}

// FirewallRuleProperties - Properties of a firewall rule.
type FirewallRuleProperties struct {
	// REQUIRED; IP address defining the end of the range of addresses of a firewall rule. Must be expressed in IPv4 format.
	EndIPAddress *string

	// REQUIRED; IP address defining the start of the range of addresses of a firewall rule. Must be expressed in IPv4 format.
	StartIPAddress *string
}

// HighAvailability - High availability properties of a server.
type HighAvailability struct {
	// High availability mode for a server.
	Mode *FlexibleServerHighAvailabilityMode

	// Availability zone associated to the standby server created when high availability is set to SameZone or ZoneRedundant.
	StandbyAvailabilityZone *string

	// READ-ONLY; Possible states of the standby server created when high availability is set to SameZone or ZoneRedundant.
	State *HighAvailabilityState
}

// HighAvailabilityForPatch - High availability properties of a server.
type HighAvailabilityForPatch struct {
	// High availability mode for a server.
	Mode *FlexibleServerHighAvailabilityMode

	// Availability zone associated to the standby server created when high availability is set to SameZone or ZoneRedundant.
	StandbyAvailabilityZone *string

	// READ-ONLY; Possible states of the standby server created when high availability is set to SameZone or ZoneRedundant.
	State *HighAvailabilityState
}

// ImpactRecord - Impact on some metric if this recommended action is applied.
type ImpactRecord struct {
	// Absolute value.
	AbsoluteValue *float64

	// Dimension name.
	DimensionName *string

	// Optional property that can be used to store the identifier of the query, if the metric is for a specific query.
	QueryID *int64

	// Dimension unit.
	Unit *string
}

// LtrBackupOperationResponseProperties - Response for the backup request.
type LtrBackupOperationResponseProperties struct {
	// REQUIRED; Start time of the operation.
	StartTime *time.Time

	// REQUIRED; Service-set extensible enum indicating the status of operation
	Status *ExecutionStatus

	// Metadata to be stored in RP. Store everything that will be required to perform a successful restore using this Recovery
	// point. e.g. Versions, DataFormat etc
	BackupMetadata *string

	// Name of Backup operation
	BackupName *string

	// Data transferred in bytes
	DataTransferredInBytes *int64

	// Size of datasource in bytes
	DatasourceSizeInBytes *int64

	// End time of the operation.
	EndTime *time.Time

	// PercentageCompleted
	PercentComplete *float64

	// READ-ONLY; The error code.
	ErrorCode *string

	// READ-ONLY; The error message.
	ErrorMessage *string
}

// LtrPreBackupRequest - A request that is made for pre-backup.
type LtrPreBackupRequest struct {
	// REQUIRED; Backup Settings
	BackupSettings *BackupSettings
}

// LtrPreBackupResponse - Response for the LTR pre-backup API call
type LtrPreBackupResponse struct {
	// REQUIRED; Additional Properties for the pre backup response
	Properties *BackupsLongTermRetentionResponseProperties
}

// LtrServerBackupOperationList - A list of long term retention backup operations for server.
type LtrServerBackupOperationList struct {
	// REQUIRED; The BackupsLongTermRetentionOperation items on this page
	Value []*BackupsLongTermRetentionOperation

	// The link to the next page of items
	NextLink *string
}

// MaintenanceWindow - Maintenance window properties of a server.
type MaintenanceWindow struct {
	// Indicates whether custom window is enabled or disabled.
	CustomWindow *string

	// Day of the week to be used for maintenance window.
	DayOfWeek *int32

	// Start hour to be used for maintenance window.
	StartHour *int32

	// Start minute to be used for maintenance window.
	StartMinute *int32
}

// MaintenanceWindowForPatch - Maintenance window properties of a server.
type MaintenanceWindowForPatch struct {
	// Indicates whether custom window is enabled or disabled.
	CustomWindow *string

	// Day of the week to be used for maintenance window.
	DayOfWeek *int32

	// Start hour to be used for maintenance window.
	StartHour *int32

	// Start minute to be used for maintenance window.
	StartMinute *int32
}

// Migration - Properties of a migration.
type Migration struct {
	// REQUIRED; The geo-location where the resource lives
	Location *string

	// Migration properties.
	Properties *MigrationProperties

	// Resource tags.
	Tags map[string]*string

	// READ-ONLY; Fully qualified resource ID for the resource. Ex - /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}
	ID *string

	// READ-ONLY; The name of the resource
	Name *string

	// READ-ONLY; Azure Resource Manager metadata containing createdBy and modifiedBy information.
	SystemData *SystemData

	// READ-ONLY; The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or "Microsoft.Storage/storageAccounts"
	Type *string
}

// MigrationList - List of migrations.
type MigrationList struct {
	// READ-ONLY; The Migration items on this page
	Value []*Migration

	// The link to the next page of items
	NextLink *string
}

// MigrationNameAvailability - Availability of a migration name.
type MigrationNameAvailability struct {
	// REQUIRED; Name of the migration to check for validity and availability.
	Name *string

	// REQUIRED; Type of resource.
	Type *string

	// READ-ONLY; Migration name availability message.
	Message *string

	// READ-ONLY; Indicates if the migration name is available.
	NameAvailable *bool

	// READ-ONLY; Migration name availability reason.
	Reason *MigrationNameAvailabilityReason
}

// MigrationProperties - Migration.
type MigrationProperties struct {
	// Indicates if cancel must be triggered for the entire migration.
	Cancel *Cancel

	// When you want to trigger cancel for specific databases set 'triggerCutover' to 'True' and the names of the specific databases
	// in this array.
	DbsToCancelMigrationOn []*string

	// Names of databases to migrate.
	DbsToMigrate []*string

	// When you want to trigger cutover for specific databases set 'triggerCutover' to 'True' and the names of the specific databases
	// in this array.
	DbsToTriggerCutoverOn []*string

	// Indicates if roles and permissions must be migrated.
	MigrateRoles *MigrateRolesAndPermissions

	// Identifier of the private endpoint migration instance.
	MigrationInstanceResourceID *string

	// Mode used to perform the migration: Online or Offline.
	MigrationMode *MigrationMode

	// Supported option for a migration.
	MigrationOption *MigrationOption

	// End time (UTC) for migration window.
	MigrationWindowEndTimeInUTC *time.Time

	// Start time (UTC) for migration window.
	MigrationWindowStartTimeInUTC *time.Time

	// Indicates if databases on the target server can be overwritten when already present. If set to 'False', when the migration
	// workflow detects that the database already exists on the target server, it will wait for a confirmation.
	OverwriteDbsInTarget *OverwriteDatabasesOnTargetServer

	// SSL mode used by a migration. Default SSL mode for 'PostgreSQLSingleServer' is 'VerifyFull'. Default SSL mode for other
	// source types is 'Prefer'.
	SSLMode *SSLMode

	// Migration secret parameters.
	SecretParameters *MigrationSecretParameters

	// Indicates whether to setup logical replication on source server, if needed.
	SetupLogicalReplicationOnSourceDbIfNeeded *LogicalReplicationOnSourceServer

	// Fully qualified domain name (FQDN) or IP address of the source server. This property is optional. When provided, the migration
	// service will always use it to connect to the source server.
	SourceDbServerFullyQualifiedDomainName *string

	// Identifier of the source database server resource, when 'sourceType' is 'PostgreSQLSingleServer'. For other source types
	// this must be set to ipaddress:port@username or hostname:port@username.
	SourceDbServerResourceID *string

	// Source server type used for the migration: ApsaraDB_RDS, AWS, AWS_AURORA, AWS_EC2, AWS_RDS, AzureVM, Crunchy_PostgreSQL,
	// Digital_Ocean_Droplets, Digital_Ocean_PostgreSQL, EDB, EDB_Oracle_Server, EDB_PostgreSQL, GCP, GCP_AlloyDB, GCP_CloudSQL,
	// GCP_Compute, Heroku_PostgreSQL, Huawei_Compute, Huawei_RDS, OnPremises, PostgreSQLCosmosDB, PostgreSQLFlexibleServer, PostgreSQLSingleServer,
	// or Supabase_PostgreSQL
	SourceType *SourceType

	// Indicates if data migration must start right away.
	StartDataMigration *StartDataMigration

	// Fully qualified domain name (FQDN) or IP address of the target server. This property is optional. When provided, the migration
	// service will always use it to connect to the target server.
	TargetDbServerFullyQualifiedDomainName *string

	// Indicates if cutover must be triggered for the entire migration.
	TriggerCutover *TriggerCutover

	// READ-ONLY; Current status of a migration.
	CurrentStatus *MigrationStatus

	// READ-ONLY; Identifier of a migration.
	MigrationID *string

	// READ-ONLY; Metadata of source database server.
	SourceDbServerMetadata *DbServerMetadata

	// READ-ONLY; Metadata of target database server.
	TargetDbServerMetadata *DbServerMetadata

	// READ-ONLY; Identifier of the target database server resource.
	TargetDbServerResourceID *string
}

// MigrationPropertiesForPatch - Migration properties.
type MigrationPropertiesForPatch struct {
	// Indicates if cancel must be triggered for the entire migration.
	Cancel *Cancel

	// When you want to trigger cancel for specific databases set 'triggerCutover' to 'True' and the names of the specific databases
	// in this array.
	DbsToCancelMigrationOn []*string

	// Names of databases to migrate.
	DbsToMigrate []*string

	// When you want to trigger cutover for specific databases set 'triggerCutover' to 'True' and the names of the specific databases
	// in this array.
	DbsToTriggerCutoverOn []*string

	// Indicates if roles and permissions must be migrated.
	MigrateRoles *MigrateRolesAndPermissions

	// Mode used to perform the migration: Online or Offline.
	MigrationMode *MigrationMode

	// Start time (UTC) for migration window.
	MigrationWindowStartTimeInUTC *time.Time

	// Indicates if databases on the target server can be overwritten when already present. If set to 'False', when the migration
	// workflow detects that the database already exists on the target server, it will wait for a confirmation.
	OverwriteDbsInTarget *OverwriteDatabasesOnTargetServer

	// Migration secret parameters.
	SecretParameters *MigrationSecretParametersForPatch

	// Indicates whether to setup logical replication on source server, if needed.
	SetupLogicalReplicationOnSourceDbIfNeeded *LogicalReplicationOnSourceServer

	// Fully qualified domain name (FQDN) or IP address of the source server. This property is optional. When provided, the migration
	// service will always use it to connect to the source server.
	SourceDbServerFullyQualifiedDomainName *string

	// Identifier of the source database server resource, when 'sourceType' is 'PostgreSQLSingleServer'. For other source types
	// this must be set to ipaddress:port@username or hostname:port@username.
	SourceDbServerResourceID *string

	// Indicates if data migration must start right away.
	StartDataMigration *StartDataMigration

	// Fully qualified domain name (FQDN) or IP address of the target server. This property is optional. When provided, the migration
	// service will always use it to connect to the target server.
	TargetDbServerFullyQualifiedDomainName *string

	// Indicates if cutover must be triggered for the entire migration.
	TriggerCutover *TriggerCutover
}

// MigrationResourceForPatch - Migration.
type MigrationResourceForPatch struct {
	// Migration properties.
	Properties *MigrationPropertiesForPatch

	// Application-specific metadata in the form of key-value pairs.
	Tags map[string]*string
}

// MigrationSecretParameters - Migration secret parameters.
type MigrationSecretParameters struct {
	// REQUIRED; Credentials of administrator users for source and target servers.
	AdminCredentials *AdminCredentials

	// Gets or sets the name of the user for the source server. This user doesn't need to be an administrator.
	SourceServerUsername *string

	// Gets or sets the name of the user for the target server. This user doesn't need to be an administrator.
	TargetServerUsername *string
}

// MigrationSecretParametersForPatch - Migration secret parameters.
type MigrationSecretParametersForPatch struct {
	// Credentials of administrator users for source and target servers.
	AdminCredentials *AdminCredentialsForPatch

	// Gets or sets the name of the user for the source server. This user doesn't need to be an administrator.
	SourceServerUsername *string

	// Gets or sets the name of the user for the target server. This user doesn't need to be an administrator.
	TargetServerUsername *string
}

// MigrationStatus - State of migration.
type MigrationStatus struct {
	// READ-ONLY; Current migration sub state details.
	CurrentSubStateDetails *MigrationSubstateDetails

	// READ-ONLY; Error message, if any, for the migration state.
	Error *string

	// READ-ONLY; State of migration.
	State *MigrationState
}

// MigrationSubstateDetails - Details of migration substate.
type MigrationSubstateDetails struct {
	DbDetails         map[string]*DatabaseMigrationState
	ValidationDetails *ValidationDetails

	// READ-ONLY; Substate of migration.
	CurrentSubState *MigrationSubstate
}

// NameAvailabilityModel - Availability of a name.
type NameAvailabilityModel struct {
	// Detailed reason why the given name is not available.
	Message *string

	// Indicates if the resource name is available.
	NameAvailable *bool

	// The reason why the given name is not available.
	Reason *CheckNameAvailabilityReason

	// READ-ONLY; Name for which validity and availability was checked.
	Name *string

	// READ-ONLY; Type of resource. It can be 'Microsoft.DBforPostgreSQL/flexibleServers' or 'Microsoft.DBforPostgreSQL/flexibleServers/virtualendpoints'.
	Type *string
}

// NameProperty - Name property for quota usage
type NameProperty struct {
	// Localized name
	LocalizedValue *string

	// Name value
	Value *string
}

// Network properties of a server.
type Network struct {
	// Resource identifier of the delegated subnet. Required during creation of a new server, in case you want the server to be
	// integrated into your own virtual network. For an update operation, you only have to provide this property if you want to
	// change the value assigned for the private DNS zone.
	DelegatedSubnetResourceID *string

	// Identifier of the private DNS zone. Required during creation of a new server, in case you want the server to be integrated
	// into your own virtual network. For an update operation, you only have to provide this property if you want to change the
	// value assigned for the private DNS zone.
	PrivateDNSZoneArmResourceID *string

	// Indicates if public network access is enabled or not. This is only supported for servers that are not integrated into a
	// virtual network which is owned and provided by customer when server is deployed.
	PublicNetworkAccess *ServerPublicNetworkAccessState
}

// ObjectRecommendation - Object recommendation properties.
type ObjectRecommendation struct {
	// Always empty.
	Kind *string

	// READ-ONLY; Fully qualified resource ID for the resource. Ex - /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}
	ID *string

	// READ-ONLY; The name of the resource
	Name *string

	// READ-ONLY; Properties of an object recommendation.
	Properties *ObjectRecommendationProperties

	// READ-ONLY; Azure Resource Manager metadata containing createdBy and modifiedBy information.
	SystemData *SystemData

	// READ-ONLY; The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or "Microsoft.Storage/storageAccounts"
	Type *string
}

// ObjectRecommendationDetails - Recommendation details for the recommended action.
type ObjectRecommendationDetails struct {
	// Database name.
	DatabaseName *string

	// Index included columns.
	IncludedColumns []*string

	// Index columns.
	IndexColumns []*string

	// Index name.
	IndexName *string

	// Index type.
	IndexType *string

	// Schema name.
	Schema *string

	// Table name.
	Table *string
}

// ObjectRecommendationList - List of available object recommendations.
type ObjectRecommendationList struct {
	// REQUIRED; The ObjectRecommendation items on this page
	Value []*ObjectRecommendation

	// The link to the next page of items
	NextLink *string
}

// ObjectRecommendationProperties - Object recommendation properties.
type ObjectRecommendationProperties struct {
	// Workload information for the recommended action.
	AnalyzedWorkload *ObjectRecommendationPropertiesAnalyzedWorkload

	// Current state.
	CurrentState *string

	// Implementation details for the recommended action.
	ImplementationDetails *ObjectRecommendationPropertiesImplementationDetails

	// List of identifiers for all queries identified as targets for improvement if the recommendation is applied. The list is
	// only populated for CREATE INDEX recommendations.
	ImprovedQueryIDs []*int64

	// Creation time (UTC) of this recommendation.
	InitialRecommendedTime *time.Time

	// Last time (UTC) that this recommendation was produced.
	LastRecommendedTime *time.Time

	// Reason for this recommendation.
	RecommendationReason *string

	// Type for this recommendation.
	RecommendationType *RecommendationType

	// Number of times this recommendation has been produced.
	TimesRecommended *int32

	// READ-ONLY; Recommendation details for the recommended action.
	Details *ObjectRecommendationDetails

	// READ-ONLY; Estimated impact of this recommended action.
	EstimatedImpact []*ImpactRecord
}

// ObjectRecommendationPropertiesAnalyzedWorkload - Workload information for the recommended action.
type ObjectRecommendationPropertiesAnalyzedWorkload struct {
	// End time (UTC) of the workload analyzed.
	EndTime *time.Time

	// Number of queries from the workload that were examined to produce this recommendation. For DROP INDEX recommendations it's
	// 0 (zero).
	QueryCount *int32

	// Start time (UTC) of the workload analyzed.
	StartTime *time.Time
}

// ObjectRecommendationPropertiesImplementationDetails - Implementation details for the recommended action.
type ObjectRecommendationPropertiesImplementationDetails struct {
	// Method of implementation for recommended action.
	Method *string

	// Implementation script for the recommended action.
	Script *string
}

// Operation - REST API operation definition.
type Operation struct {
	// Indicates if the operation is a data action.
	IsDataAction *bool

	// READ-ONLY; Localized display information for this particular operation or action.
	Display *OperationDisplay

	// READ-ONLY; Name of the operation being performed on this particular object.
	Name *string

	// READ-ONLY; Intended executor of the operation.
	Origin *OperationOrigin

	// READ-ONLY; Additional descriptions for the operation.
	Properties map[string]any
}

// OperationDisplay - Display metadata associated with the operation.
type OperationDisplay struct {
	// READ-ONLY; Description of the operation.
	Description *string

	// READ-ONLY; Name of the operation.
	Operation *string

	// READ-ONLY; Name of the resource provider.
	Provider *string

	// READ-ONLY; Type of resource on which the operation is performed.
	Resource *string
}

// OperationList - Paged collection of Operation items
type OperationList struct {
	// REQUIRED; The Operation items on this page
	Value []*Operation

	// The link to the next page of items
	NextLink *string
}

// PrivateEndpoint - The private endpoint resource.
type PrivateEndpoint struct {
	// READ-ONLY; The resource identifier of the private endpoint
	ID *string
}

// PrivateEndpointConnection - The private endpoint connection resource.
type PrivateEndpointConnection struct {
	// Resource properties.
	Properties *PrivateEndpointConnectionProperties

	// READ-ONLY; Fully qualified resource ID for the resource. Ex - /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}
	ID *string

	// READ-ONLY; The name of the resource
	Name *string

	// READ-ONLY; Azure Resource Manager metadata containing createdBy and modifiedBy information.
	SystemData *SystemData

	// READ-ONLY; The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or "Microsoft.Storage/storageAccounts"
	Type *string
}

// PrivateEndpointConnectionList - List of private endpoint connections.
type PrivateEndpointConnectionList struct {
	// READ-ONLY; The PrivateEndpointConnection items on this page
	Value []*PrivateEndpointConnection

	// The link to the next page of items
	NextLink *string
}

// PrivateEndpointConnectionProperties - Properties of the private endpoint connection.
type PrivateEndpointConnectionProperties struct {
	// REQUIRED; A collection of information about the state of the connection between service consumer and provider.
	PrivateLinkServiceConnectionState *PrivateLinkServiceConnectionState

	// The private endpoint resource.
	PrivateEndpoint *PrivateEndpoint

	// READ-ONLY; The group ids for the private endpoint resource.
	GroupIDs []*string

	// READ-ONLY; The provisioning state of the private endpoint connection resource.
	ProvisioningState *PrivateEndpointConnectionProvisioningState
}

// PrivateLinkResource - A private link resource.
type PrivateLinkResource struct {
	// Resource properties.
	Properties *PrivateLinkResourceProperties

	// READ-ONLY; Fully qualified resource ID for the resource. Ex - /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}
	ID *string

	// READ-ONLY; The name of the resource
	Name *string

	// READ-ONLY; Azure Resource Manager metadata containing createdBy and modifiedBy information.
	SystemData *SystemData

	// READ-ONLY; The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or "Microsoft.Storage/storageAccounts"
	Type *string
}

// PrivateLinkResourceList - A list of private link resources
type PrivateLinkResourceList struct {
	// READ-ONLY; The PrivateLinkResource items on this page
	Value []*PrivateLinkResource

	// The link to the next page of items
	NextLink *string
}

// PrivateLinkResourceProperties - Properties of a private link resource.
type PrivateLinkResourceProperties struct {
	// The private link resource private link DNS zone name.
	RequiredZoneNames []*string

	// READ-ONLY; The private link resource group id.
	GroupID *string

	// READ-ONLY; The private link resource required member names.
	RequiredMembers []*string
}

// PrivateLinkServiceConnectionState - A collection of information about the state of the connection between service consumer
// and provider.
type PrivateLinkServiceConnectionState struct {
	// A message indicating if changes on the service provider require any updates on the consumer.
	ActionsRequired *string

	// The reason for approval/rejection of the connection.
	Description *string

	// Indicates whether the connection has been Approved/Rejected/Removed by the owner of the service.
	Status *PrivateEndpointServiceConnectionStatus
}

// QuotaUsage - Quota usage for servers
type QuotaUsage struct {
	// Current Quota usage value
	CurrentValue *int64

	// Fully qualified ARM resource Id
	ID *string

	// Quota limit
	Limit *int64

	// Name of quota usage for servers
	Name *NameProperty

	// Quota unit
	Unit *string
}

// QuotaUsageList - Capability for the PostgreSQL server
type QuotaUsageList struct {
	// READ-ONLY; The QuotaUsage items on this page
	Value []*QuotaUsage

	// The link to the next page of items
	NextLink *string
}

// Replica properties of a server.
type Replica struct {
	// Type of operation to apply on the read replica. This property is write only. Standalone means that the read replica will
	// be promoted to a standalone server, and will become a completely independent entity from the replication set. Switchover
	// means that the read replica will roles with the primary server.
	PromoteMode *ReadReplicaPromoteMode

	// Data synchronization option to use when processing the operation specified in the promoteMode property. This property is
	// write only.
	PromoteOption *ReadReplicaPromoteOption

	// Role of the server in a replication set.
	Role *ReplicationRole

	// READ-ONLY; Maximum number of read replicas allowed for a server.
	Capacity *int32

	// READ-ONLY; Indicates the replication state of a read replica. This property is returned only when the target server is
	// a read replica. Possible values are Active, Broken, Catchup, Provisioning, Reconfiguring, and Updating
	ReplicationState *ReplicationState
}

// RestartParameter - PostgreSQL database engine restart parameters.
type RestartParameter struct {
	// Failover mode.
	FailoverMode *FailoverMode

	// Indicates if restart the PostgreSQL database engine should failover or switch over from primary to standby. This only works
	// if server has high availability enabled.
	RestartWithFailover *bool
}

// SKU - Compute information of a server.
type SKU struct {
	// REQUIRED; Name by which is known a given compute size assigned to a server.
	Name *string

	// REQUIRED; Tier of the compute assigned to a server.
	Tier *SKUTier
}

// SKUForPatch - Compute information of a server.
type SKUForPatch struct {
	// Name by which is known a given compute size assigned to a server.
	Name *string

	// Tier of the compute assigned to a server.
	Tier *SKUTier
}

// Server - Properties of a server.
type Server struct {
	// REQUIRED; The geo-location where the resource lives
	Location *string

	// User assigned managed identities assigned to the server.
	Identity *UserAssignedIdentity

	// Properties of a server.
	Properties *ServerProperties

	// Compute tier and size of a server.
	SKU *SKU

	// Resource tags.
	Tags map[string]*string

	// READ-ONLY; Fully qualified resource ID for the resource. Ex - /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}
	ID *string

	// READ-ONLY; The name of the resource
	Name *string

	// READ-ONLY; Azure Resource Manager metadata containing createdBy and modifiedBy information.
	SystemData *SystemData

	// READ-ONLY; The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or "Microsoft.Storage/storageAccounts"
	Type *string
}

// ServerEditionCapability - Capabilities in terms of compute tier.
type ServerEditionCapability struct {
	// READ-ONLY; Default compute name (SKU) for this computer tier.
	DefaultSKUName *string

	// READ-ONLY; Name of compute tier.
	Name *string

	// READ-ONLY; The reason for the capability not being available.
	Reason *string

	// READ-ONLY; The status of the capability.
	Status *CapabilityStatus

	// READ-ONLY; List of supported compute names (SKUs).
	SupportedServerSKUs []*ServerSKUCapability

	// READ-ONLY; List of storage editions supported by this compute tier and compute name.
	SupportedStorageEditions []*StorageEditionCapability
}

// ServerForPatch - Represents a server to be updated.
type ServerForPatch struct {
	// Describes the identity of the application.
	Identity *UserAssignedIdentity

	// Properties of the server.
	Properties *ServerPropertiesForPatch

	// Compute tier and size of a server.
	SKU *SKUForPatch

	// Application-specific metadata in the form of key-value pairs.
	Tags map[string]*string
}

// ServerList - A list of servers.
type ServerList struct {
	// REQUIRED; The Server items on this page
	Value []*Server

	// The link to the next page of items
	NextLink *string
}

// ServerProperties - Properties of a server.
type ServerProperties struct {
	// Name of the login designated as the first password based administrator assigned to your instance of PostgreSQL. Must be
	// specified the first time that you enable password based authentication on a server. Once set to a given value, it cannot
	// be changed for the rest of the life of a server. If you disable password based authentication on a server which had it
	// enabled, this password based role isn't deleted.
	AdministratorLogin *string

	// Password assigned to the administrator login. As long as password authentication is enabled, this password can be changed
	// at any time.
	AdministratorLoginPassword *string

	// Authentication configuration properties of a server.
	AuthConfig *AuthConfig

	// Availability zone of a server.
	AvailabilityZone *string

	// Backup properties of a server.
	Backup *Backup

	// Cluster properties of a server.
	Cluster *Cluster

	// Creation mode of a new server.
	CreateMode *CreateMode

	// Data encryption properties of a server.
	DataEncryption *DataEncryption

	// High availability properties of a server.
	HighAvailability *HighAvailability

	// Maintenance window properties of a server.
	MaintenanceWindow *MaintenanceWindow

	// Network properties of a server. Only required if you want your server to be integrated into a virtual network provided
	// by customer.
	Network *Network

	// Creation time (in ISO8601 format) of the backup which you want to restore in the new server. It's required when 'createMode'
	// is 'PointInTimeRestore', 'GeoRestore', or 'ReviveDropped'.
	PointInTimeUTC *time.Time

	// Read replica properties of a server. Required only in case that you want to promote a server.
	Replica *Replica

	// Role of the server in a replication set.
	ReplicationRole *ReplicationRole

	// Identifier of the server to be used as the source of the new server. Required when 'createMode' is 'PointInTimeRestore',
	// 'GeoRestore', 'Replica', or 'ReviveDropped'. This property is returned only when the target server is a read replica.
	SourceServerResourceID *string

	// Storage properties of a server.
	Storage *Storage

	// Major version of PostgreSQL database engine.
	Version *PostgresMajorVersion

	// READ-ONLY; Fully qualified domain name of a server.
	FullyQualifiedDomainName *string

	// READ-ONLY; Minor version of PostgreSQL database engine.
	MinorVersion *string

	// READ-ONLY; List of private endpoint connections associated with the specified server.
	PrivateEndpointConnections []*PrivateEndpointConnection

	// READ-ONLY; Maximum number of read replicas allowed for a server.
	ReplicaCapacity *int32

	// READ-ONLY; Possible states of a server.
	State *ServerState
}

// ServerPropertiesForPatch - Properties of a server.
type ServerPropertiesForPatch struct {
	// Password assigned to the administrator login. As long as password authentication is enabled, this password can be changed
	// at any time.
	AdministratorLoginPassword *string

	// Authentication configuration properties of a server.
	AuthConfig *AuthConfigForPatch

	// Backup properties of a server.
	Backup *BackupForPatch

	// Cluster properties of a server.
	Cluster *Cluster

	// Update mode of an existing server.
	CreateMode *CreateModeForPatch

	// Data encryption properties of a server.
	DataEncryption *DataEncryption

	// High availability properties of a server.
	HighAvailability *HighAvailabilityForPatch

	// Maintenance window properties of a server.
	MaintenanceWindow *MaintenanceWindowForPatch

	// Network properties of a server. Only required if you want your server to be integrated into a virtual network provided
	// by customer.
	Network *Network

	// Read replica properties of a server. Required only in case that you want to promote a server.
	Replica *Replica

	// Role of the server in a replication set.
	ReplicationRole *ReplicationRole

	// Storage properties of a server.
	Storage *Storage

	// Major version of PostgreSQL database engine.
	Version *PostgresMajorVersion

	// READ-ONLY; Name of the login designated as the first password based administrator assigned to your instance of PostgreSQL.
	// Must be specified the first time that you enable password based authentication on a server. Once set to a given value,
	// it cannot be changed for the rest of the life of a server. If you disable password based authentication on a server which
	// had it enabled, this password based role isn't deleted.
	AdministratorLogin *string
}

// ServerSKU - Compute information of a server.
type ServerSKU struct {
	// Compute tier and size of the database server. This object is empty for an Azure Database for PostgreSQL single server.
	Name *string

	// Tier of the compute assigned to a server.
	Tier *SKUTier
}

// ServerSKUCapability - Capabilities in terms of compute.
type ServerSKUCapability struct {
	// READ-ONLY; Name of the compute (SKU).
	Name *string

	// READ-ONLY; The reason for the capability not being available.
	Reason *string

	// READ-ONLY; Security profile of the compute. Indicates if it's a Confidential Compute virtual machine.
	SecurityProfile *string

	// READ-ONLY; The status of the capability.
	Status *CapabilityStatus

	// READ-ONLY; Features supported.
	SupportedFeatures []*SupportedFeature

	// READ-ONLY; Modes of high availability supported for this compute.
	SupportedHaMode []*HighAvailabilityMode

	// READ-ONLY; Maximum IOPS supported by this compute.
	SupportedIops *int32

	// READ-ONLY; Supported memory (in MB) per virtual core assigned to this compute.
	SupportedMemoryPerVcoreMb *int64

	// READ-ONLY; List of supported availability zones. E.g. '1', '2', '3'
	SupportedZones []*string

	// READ-ONLY; vCores available for this compute.
	VCores *int32
}

// ServerVersionCapability - Capabilities in terms of major versions of PostgreSQL database engine.
type ServerVersionCapability struct {
	// READ-ONLY; Major version of PostgreSQL database engine.
	Name *string

	// READ-ONLY; The reason for the capability not being available.
	Reason *string

	// READ-ONLY; The status of the capability.
	Status *CapabilityStatus

	// READ-ONLY; Features supported.
	SupportedFeatures []*SupportedFeature

	// READ-ONLY; Major versions of PostgreSQL database engine to which this version can be automatically upgraded.
	SupportedVersionsToUpgrade []*string
}

// Storage properties of a server.
type Storage struct {
	// Flag to enable or disable the automatic growth of storage size of a server when available space is nearing zero and conditions
	// allow for automatically growing storage size.
	AutoGrow *StorageAutoGrow

	// Maximum IOPS supported for storage. Required when type of storage is PremiumV2_LRS or UltraSSD_LRS.
	Iops *int32

	// Size of storage assigned to a server.
	StorageSizeGB *int32

	// Maximum throughput supported for storage. Required when type of storage is PremiumV2_LRS or UltraSSD_LRS.
	Throughput *int32

	// Storage tier of a server.
	Tier *AzureManagedDiskPerformanceTier

	// Type of storage assigned to a server. Allowed values are Premium_LRS, PremiumV2_LRS, or UltraSSD_LRS. If not specified,
	// it defaults to Premium_LRS.
	Type *StorageType
}

// StorageEditionCapability - Capabilities in terms of storage tier.
type StorageEditionCapability struct {
	// READ-ONLY; Default storage size (in MB) for this storage tier.
	DefaultStorageSizeMb *int64

	// READ-ONLY; Name of storage tier.
	Name *string

	// READ-ONLY; The reason for the capability not being available.
	Reason *string

	// READ-ONLY; The status of the capability.
	Status *CapabilityStatus

	// READ-ONLY; Configurations of storage supported for this storage tier.
	SupportedStorageMb []*StorageMbCapability
}

// StorageMbCapability - Storage size (in MB) capability.
type StorageMbCapability struct {
	// READ-ONLY; Default IOPS for this tier and storage size.
	DefaultIopsTier *string

	// READ-ONLY; Maximum supported size (in MB) of storage.
	MaximumStorageSizeMb *int64

	// READ-ONLY; The reason for the capability not being available.
	Reason *string

	// READ-ONLY; The status of the capability.
	Status *CapabilityStatus

	// READ-ONLY; Minimum supported size (in MB) of storage.
	StorageSizeMb *int64

	// READ-ONLY; Minimum IOPS supported by the storage size.
	SupportedIops *int32

	// READ-ONLY; List of all supported storage tiers for this tier and storage size.
	SupportedIopsTiers []*StorageTierCapability

	// READ-ONLY; Maximum IOPS supported by the storage size.
	SupportedMaximumIops *int32

	// READ-ONLY; Maximum supported throughput (in MB/s) of storage.
	SupportedMaximumThroughput *int32

	// READ-ONLY; Minimum supported throughput (in MB/s) of storage.
	SupportedThroughput *int32
}

// StorageTierCapability - Capability of a storage tier.
type StorageTierCapability struct {
	// READ-ONLY; Supported IOPS for the storage tier.
	Iops *int32

	// READ-ONLY; Name of the storage tier.
	Name *string

	// READ-ONLY; The reason for the capability not being available.
	Reason *string

	// READ-ONLY; The status of the capability.
	Status *CapabilityStatus
}

// SupportedFeature - Features supported.
type SupportedFeature struct {
	// READ-ONLY; Name of the feature.
	Name *string

	// READ-ONLY; Status of the feature. Indicates if the feature is enabled or not.
	Status *FeatureStatus
}

// SystemData - Metadata pertaining to creation and last modification of the resource.
type SystemData struct {
	// The timestamp of resource creation (UTC).
	CreatedAt *time.Time

	// The identity that created the resource.
	CreatedBy *string

	// The type of identity that created the resource.
	CreatedByType *CreatedByType

	// The timestamp of resource last modification (UTC)
	LastModifiedAt *time.Time

	// The identity that last modified the resource.
	LastModifiedBy *string

	// The type of identity that last modified the resource.
	LastModifiedByType *CreatedByType
}

// TuningOptions - Impact on some metric if this recommended action is applied.
type TuningOptions struct {
	// READ-ONLY; Fully qualified resource ID for the resource. Ex - /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}
	ID *string

	// READ-ONLY; The name of the resource
	Name *string

	// READ-ONLY; Azure Resource Manager metadata containing createdBy and modifiedBy information.
	SystemData *SystemData

	// READ-ONLY; The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or "Microsoft.Storage/storageAccounts"
	Type *string
}

// TuningOptionsList - List of server tuning options.
type TuningOptionsList struct {
	// REQUIRED; The TuningOptions items on this page
	Value []*TuningOptions

	// The link to the next page of items
	NextLink *string
}

// UserAssignedIdentity - Identities associated with a server.
type UserAssignedIdentity struct {
	// REQUIRED; Types of identities associated with a server.
	Type *IdentityType

	// Identifier of the object of the service principal associated to the user assigned managed identity.
	PrincipalID *string

	// Map of user assigned managed identities.
	UserAssignedIdentities map[string]*UserIdentity

	// READ-ONLY; Identifier of the tenant of a server.
	TenantID *string
}

// UserIdentity - User assigned managed identity associated with a server.
type UserIdentity struct {
	// Identifier of the client of the service principal associated to the user assigned managed identity.
	ClientID *string

	// Identifier of the object of the service principal associated to the user assigned managed identity.
	PrincipalID *string
}

// ValidationDetails - Details for the validation for migration.
type ValidationDetails struct {
	// Details of server level validations.
	DbLevelValidationDetails []*DbLevelValidationStatus

	// Details of server level validations.
	ServerLevelValidationDetails []*ValidationSummaryItem

	// Validation status for migration.
	Status *ValidationState

	// End time (UTC) for validation.
	ValidationEndTimeInUTC *time.Time

	// Start time (UTC) for validation.
	ValidationStartTimeInUTC *time.Time
}

// ValidationMessage - Validation message object.
type ValidationMessage struct {
	// Validation message string.
	Message *string

	// Severity of validation message.
	State *ValidationState
}

// ValidationSummaryItem - Validation summary object.
type ValidationSummaryItem struct {
	// Validation messages.
	Messages []*ValidationMessage

	// Validation status for migration.
	State *ValidationState

	// Validation type.
	Type *string
}

// VirtualEndpoint - Pair of virtual endpoints for a server.
type VirtualEndpoint struct {
	// Properties of the pair of virtual endpoints.
	Properties *VirtualEndpointResourceProperties

	// READ-ONLY; Fully qualified resource ID for the resource. Ex - /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}
	ID *string

	// READ-ONLY; The name of the resource
	Name *string

	// READ-ONLY; Azure Resource Manager metadata containing createdBy and modifiedBy information.
	SystemData *SystemData

	// READ-ONLY; The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or "Microsoft.Storage/storageAccounts"
	Type *string
}

// VirtualEndpointResourceForPatch - Pair of virtual endpoints for a server.
type VirtualEndpointResourceForPatch struct {
	// Properties of the pair of virtual endpoints.
	Properties *VirtualEndpointResourceProperties
}

// VirtualEndpointResourceProperties - Properties of a pair of virtual endpoints.
type VirtualEndpointResourceProperties struct {
	// Type of endpoint for the virtual endpoints.
	EndpointType *VirtualEndpointType

	// List of servers that one of the virtual endpoints can refer to.
	Members []*string

	// READ-ONLY; List of virtual endpoints for a server.
	VirtualEndpoints []*string
}

// VirtualEndpointsList - List of virtual endpoints.
type VirtualEndpointsList struct {
	// REQUIRED; The VirtualEndpoint items on this page
	Value []*VirtualEndpoint

	// The link to the next page of items
	NextLink *string
}

// VirtualNetworkSubnetUsageModel - Virtual network subnet usage data.
type VirtualNetworkSubnetUsageModel struct {
	// READ-ONLY
	DelegatedSubnetsUsage []*DelegatedSubnetUsage

	// READ-ONLY; location of the delegated subnet usage
	Location *string

	// READ-ONLY; subscriptionId of the delegated subnet usage
	SubscriptionID *string
}

// VirtualNetworkSubnetUsageParameter - Virtual network subnet usage parameter
type VirtualNetworkSubnetUsageParameter struct {
	// Virtual network resource id.
	VirtualNetworkArmResourceID *string
}
