// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) Go Code Generator. DO NOT EDIT.

package armpostgresql_test

import (
	"context"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/to"
	"github.com/Azure/azure-sdk-for-go/sdk/azidentity"
	"github.com/Azure/azure-sdk-for-go/sdk/resourcemanager/postgresql/armpostgresql/v2"
	"log"
	"time"
)

// Generated from example definition: 2025-08-01/ServersClusterCreate.json
func ExampleServersClient_BeginCreateOrUpdate_createANewElasticCluster() {
	cred, err := azidentity.NewDefaultAzureCredential(nil)
	if err != nil {
		log.Fatalf("failed to obtain a credential: %v", err)
	}
	ctx := context.Background()
	clientFactory, err := armpostgresql.NewClientFactory("ffffffff-ffff-ffff-ffff-ffffffffffff", cred, nil)
	if err != nil {
		log.Fatalf("failed to create client: %v", err)
	}
	poller, err := clientFactory.NewServersClient().BeginCreateOrUpdate(ctx, "exampleresourcegroup", "exampleserver", armpostgresql.Server{
		Location: to.Ptr("eastus"),
		Properties: &armpostgresql.ServerProperties{
			AdministratorLogin:         to.Ptr("examplelogin"),
			AdministratorLoginPassword: to.Ptr("examplepassword"),
			Backup: &armpostgresql.Backup{
				BackupRetentionDays: to.Ptr[int32](7),
				GeoRedundantBackup:  to.Ptr(armpostgresql.GeographicallyRedundantBackupDisabled),
			},
			Cluster: &armpostgresql.Cluster{
				ClusterSize:         to.Ptr[int32](2),
				DefaultDatabaseName: to.Ptr("clusterdb"),
			},
			CreateMode: to.Ptr(armpostgresql.CreateModeCreate),
			HighAvailability: &armpostgresql.HighAvailability{
				Mode: to.Ptr(armpostgresql.FlexibleServerHighAvailabilityModeDisabled),
			},
			Network: &armpostgresql.Network{
				PublicNetworkAccess: to.Ptr(armpostgresql.ServerPublicNetworkAccessStateDisabled),
			},
			Storage: &armpostgresql.Storage{
				AutoGrow:      to.Ptr(armpostgresql.StorageAutoGrowDisabled),
				StorageSizeGB: to.Ptr[int32](256),
				Tier:          to.Ptr(armpostgresql.AzureManagedDiskPerformanceTierP15),
			},
			Version: to.Ptr(armpostgresql.PostgresMajorVersion16),
		},
		SKU: &armpostgresql.SKU{
			Name: to.Ptr("Standard_D4ds_v5"),
			Tier: to.Ptr(armpostgresql.SKUTierGeneralPurpose),
		},
	}, nil)
	if err != nil {
		log.Fatalf("failed to finish the request: %v", err)
	}
	_, err = poller.PollUntilDone(ctx, nil)
	if err != nil {
		log.Fatalf("failed to pull the result: %v", err)
	}
}

// Generated from example definition: 2025-08-01/ServersCreateGeoRestoreWithDataEncryptionEnabled.json
func ExampleServersClient_BeginCreateOrUpdate_createANewServerUsingARestoreOfAGeographicallyRedundantBackupOfAnExistingServerWithDataEncryptionBasedOnCustomerManagedKey() {
	cred, err := azidentity.NewDefaultAzureCredential(nil)
	if err != nil {
		log.Fatalf("failed to obtain a credential: %v", err)
	}
	ctx := context.Background()
	clientFactory, err := armpostgresql.NewClientFactory("ffffffff-ffff-ffff-ffff-ffffffffffff", cred, nil)
	if err != nil {
		log.Fatalf("failed to create client: %v", err)
	}
	poller, err := clientFactory.NewServersClient().BeginCreateOrUpdate(ctx, "exampleresourcegroup", "exampleserver", armpostgresql.Server{
		Identity: &armpostgresql.UserAssignedIdentity{
			Type: to.Ptr(armpostgresql.IdentityTypeUserAssigned),
			UserAssignedIdentities: map[string]*armpostgresql.UserIdentity{
				"/subscriptions/ffffffff-ffff-ffff-ffff-ffffffffffff/resourceGroups/exampleresourcegroup/providers/Microsoft.ManagedIdentity/userAssignedIdentities/examplegeoredundantidentity": {},
				"/subscriptions/ffffffff-ffff-ffff-ffff-ffffffffffff/resourceGroups/exampleresourcegroup/providers/Microsoft.ManagedIdentity/userAssignedIdentities/exampleprimaryidentity":      {},
			},
		},
		Location: to.Ptr("eastus"),
		Properties: &armpostgresql.ServerProperties{
			CreateMode: to.Ptr(armpostgresql.CreateModeGeoRestore),
			DataEncryption: &armpostgresql.DataEncryption{
				Type:                            to.Ptr(armpostgresql.DataEncryptionTypeAzureKeyVault),
				GeoBackupKeyURI:                 to.Ptr("https://examplegeoredundantkeyvault.vault.azure.net/keys/examplekey/yyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyy"),
				GeoBackupUserAssignedIdentityID: to.Ptr("/subscriptions/ffffffff-ffff-ffff-ffff-ffffffffffff/resourceGroups/exampleresourcegroup/providers/Microsoft.ManagedIdentity/userAssignedIdentities/examplegeoredundantidentity"),
				PrimaryKeyURI:                   to.Ptr("https://exampleprimarykeyvault.vault.azure.net/keys/examplekey/xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx"),
				PrimaryUserAssignedIdentityID:   to.Ptr("/subscriptions/ffffffff-ffff-ffff-ffff-ffffffffffff/resourceGroups/exampleresourcegroup/providers/Microsoft.ManagedIdentity/userAssignedIdentities/exampleprimaryidentity"),
			},
			PointInTimeUTC:         to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2025-06-01T18:35:22.123456Z"); return t }()),
			SourceServerResourceID: to.Ptr("/subscriptions/ffffffff-ffff-ffff-ffff-ffffffffffff/resourceGroups/exampleresourcegroup/providers/Microsoft.DBforPostgreSQL/flexibleServers/examplesourceserver"),
		},
	}, nil)
	if err != nil {
		log.Fatalf("failed to finish the request: %v", err)
	}
	_, err = poller.PollUntilDone(ctx, nil)
	if err != nil {
		log.Fatalf("failed to pull the result: %v", err)
	}
}

// Generated from example definition: 2025-08-01/ServersCreateGeoRestoreWithDataEncryptionEnabledAutoUpdate.json
func ExampleServersClient_BeginCreateOrUpdate_createANewServerUsingARestoreOfAGeographicallyRedundantBackupOfAnExistingServerWithDataEncryptionBasedOnCustomerManagedKeyWithAutomaticKeyVersionUpdate() {
	cred, err := azidentity.NewDefaultAzureCredential(nil)
	if err != nil {
		log.Fatalf("failed to obtain a credential: %v", err)
	}
	ctx := context.Background()
	clientFactory, err := armpostgresql.NewClientFactory("ffffffff-ffff-ffff-ffff-ffffffffffff", cred, nil)
	if err != nil {
		log.Fatalf("failed to create client: %v", err)
	}
	poller, err := clientFactory.NewServersClient().BeginCreateOrUpdate(ctx, "exampleresourcegroup", "exampleserver", armpostgresql.Server{
		Identity: &armpostgresql.UserAssignedIdentity{
			Type: to.Ptr(armpostgresql.IdentityTypeUserAssigned),
			UserAssignedIdentities: map[string]*armpostgresql.UserIdentity{
				"/subscriptions/ffffffff-ffff-ffff-ffff-ffffffffffff/resourceGroups/exampleresourcegroup/providers/Microsoft.ManagedIdentity/userAssignedIdentities/examplegeoredundantidentity": {},
				"/subscriptions/ffffffff-ffff-ffff-ffff-ffffffffffff/resourceGroups/exampleresourcegroup/providers/Microsoft.ManagedIdentity/userAssignedIdentities/exampleprimaryidentity":      {},
			},
		},
		Location: to.Ptr("eastus"),
		Properties: &armpostgresql.ServerProperties{
			CreateMode: to.Ptr(armpostgresql.CreateModeGeoRestore),
			DataEncryption: &armpostgresql.DataEncryption{
				Type:                            to.Ptr(armpostgresql.DataEncryptionTypeAzureKeyVault),
				GeoBackupKeyURI:                 to.Ptr("https://examplegeoredundantkeyvault.vault.azure.net/keys/examplekey"),
				GeoBackupUserAssignedIdentityID: to.Ptr("/subscriptions/ffffffff-ffff-ffff-ffff-ffffffffffff/resourceGroups/exampleresourcegroup/providers/Microsoft.ManagedIdentity/userAssignedIdentities/examplegeoredundantidentity"),
				PrimaryKeyURI:                   to.Ptr("https://exampleprimarykeyvault.vault.azure.net/keys/examplekey"),
				PrimaryUserAssignedIdentityID:   to.Ptr("/subscriptions/ffffffff-ffff-ffff-ffff-ffffffffffff/resourceGroups/exampleresourcegroup/providers/Microsoft.ManagedIdentity/userAssignedIdentities/exampleprimaryidentity"),
			},
			PointInTimeUTC:         to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2025-06-01T18:35:22.123456Z"); return t }()),
			SourceServerResourceID: to.Ptr("/subscriptions/ffffffff-ffff-ffff-ffff-ffffffffffff/resourceGroups/exampleresourcegroup/providers/Microsoft.DBforPostgreSQL/flexibleServers/examplesourceserver"),
		},
	}, nil)
	if err != nil {
		log.Fatalf("failed to finish the request: %v", err)
	}
	_, err = poller.PollUntilDone(ctx, nil)
	if err != nil {
		log.Fatalf("failed to pull the result: %v", err)
	}
}

// Generated from example definition: 2025-08-01/ServersCreateInMicrosoftOwnedVirtualNetworkWithZoneRedundantHighAvailability.json
func ExampleServersClient_BeginCreateOrUpdate_createANewServerInMicrosoftOwnedVirtualNetworkWithZoneRedundantHighAvailability() {
	cred, err := azidentity.NewDefaultAzureCredential(nil)
	if err != nil {
		log.Fatalf("failed to obtain a credential: %v", err)
	}
	ctx := context.Background()
	clientFactory, err := armpostgresql.NewClientFactory("ffffffff-ffff-ffff-ffff-ffffffffffff", cred, nil)
	if err != nil {
		log.Fatalf("failed to create client: %v", err)
	}
	poller, err := clientFactory.NewServersClient().BeginCreateOrUpdate(ctx, "exampleresourcegroup", "exampleserver", armpostgresql.Server{
		Location: to.Ptr("eastus"),
		Properties: &armpostgresql.ServerProperties{
			AdministratorLogin:         to.Ptr("exampleadministratorlogin"),
			AdministratorLoginPassword: to.Ptr("examplepassword"),
			AvailabilityZone:           to.Ptr("1"),
			Backup: &armpostgresql.Backup{
				BackupRetentionDays: to.Ptr[int32](7),
				GeoRedundantBackup:  to.Ptr(armpostgresql.GeographicallyRedundantBackupEnabled),
			},
			CreateMode: to.Ptr(armpostgresql.CreateModeCreate),
			HighAvailability: &armpostgresql.HighAvailability{
				Mode: to.Ptr(armpostgresql.FlexibleServerHighAvailabilityModeZoneRedundant),
			},
			Network: &armpostgresql.Network{
				PublicNetworkAccess: to.Ptr(armpostgresql.ServerPublicNetworkAccessStateEnabled),
			},
			Storage: &armpostgresql.Storage{
				AutoGrow:      to.Ptr(armpostgresql.StorageAutoGrowDisabled),
				StorageSizeGB: to.Ptr[int32](512),
				Tier:          to.Ptr(armpostgresql.AzureManagedDiskPerformanceTierP20),
			},
			Version: to.Ptr(armpostgresql.PostgresMajorVersion17),
		},
		SKU: &armpostgresql.SKU{
			Name: to.Ptr("Standard_D4ds_v5"),
			Tier: to.Ptr(armpostgresql.SKUTierGeneralPurpose),
		},
		Tags: map[string]*string{
			"InCustomerVnet":  to.Ptr("false"),
			"InMicrosoftVnet": to.Ptr("true"),
		},
	}, nil)
	if err != nil {
		log.Fatalf("failed to finish the request: %v", err)
	}
	_, err = poller.PollUntilDone(ctx, nil)
	if err != nil {
		log.Fatalf("failed to pull the result: %v", err)
	}
}

// Generated from example definition: 2025-08-01/ServersCreateInYourOwnVirtualNetworkWithSameZoneHighAvailability.json
func ExampleServersClient_BeginCreateOrUpdate_createANewServerInYourOwnVirtualNetworkWithSameZoneHighAvailability() {
	cred, err := azidentity.NewDefaultAzureCredential(nil)
	if err != nil {
		log.Fatalf("failed to obtain a credential: %v", err)
	}
	ctx := context.Background()
	clientFactory, err := armpostgresql.NewClientFactory("ffffffff-ffff-ffff-ffff-ffffffffffff", cred, nil)
	if err != nil {
		log.Fatalf("failed to create client: %v", err)
	}
	poller, err := clientFactory.NewServersClient().BeginCreateOrUpdate(ctx, "exampleresourcegroup", "exampleserver", armpostgresql.Server{
		Location: to.Ptr("eastus"),
		Properties: &armpostgresql.ServerProperties{
			AdministratorLogin:         to.Ptr("exampleadministratorlogin"),
			AdministratorLoginPassword: to.Ptr("examplepassword"),
			AvailabilityZone:           to.Ptr("1"),
			Backup: &armpostgresql.Backup{
				BackupRetentionDays: to.Ptr[int32](7),
				GeoRedundantBackup:  to.Ptr(armpostgresql.GeographicallyRedundantBackupEnabled),
			},
			CreateMode: to.Ptr(armpostgresql.CreateModeCreate),
			HighAvailability: &armpostgresql.HighAvailability{
				Mode: to.Ptr(armpostgresql.FlexibleServerHighAvailabilityModeSameZone),
			},
			Network: &armpostgresql.Network{
				DelegatedSubnetResourceID:   to.Ptr("/subscriptions/ffffffff-ffff-ffff-ffff-ffffffffffff/resourceGroups/exampleresourcegroup/providers/Microsoft.Network/virtualNetworks/examplevirtualnetwork/subnets/examplesubnet"),
				PrivateDNSZoneArmResourceID: to.Ptr("/subscriptions/ffffffff-ffff-ffff-ffff-ffffffffffff/resourceGroups/exampleresourcegroup/providers/Microsoft.Network/privateDnsZones/exampleprivatednszone.private.postgres.database"),
			},
			Storage: &armpostgresql.Storage{
				AutoGrow:      to.Ptr(armpostgresql.StorageAutoGrowDisabled),
				StorageSizeGB: to.Ptr[int32](512),
				Tier:          to.Ptr(armpostgresql.AzureManagedDiskPerformanceTierP20),
			},
			Version: to.Ptr(armpostgresql.PostgresMajorVersion17),
		},
		SKU: &armpostgresql.SKU{
			Name: to.Ptr("Standard_D4ds_v5"),
			Tier: to.Ptr(armpostgresql.SKUTierGeneralPurpose),
		},
		Tags: map[string]*string{
			"InCustomerVnet":  to.Ptr("true"),
			"InMicrosoftVnet": to.Ptr("false"),
		},
	}, nil)
	if err != nil {
		log.Fatalf("failed to finish the request: %v", err)
	}
	_, err = poller.PollUntilDone(ctx, nil)
	if err != nil {
		log.Fatalf("failed to pull the result: %v", err)
	}
}

// Generated from example definition: 2025-08-01/ServersCreatePointInTimeRestore.json
func ExampleServersClient_BeginCreateOrUpdate_createANewServerUsingAPointInTimeRestoreOfABackupOfAnExistingServer() {
	cred, err := azidentity.NewDefaultAzureCredential(nil)
	if err != nil {
		log.Fatalf("failed to obtain a credential: %v", err)
	}
	ctx := context.Background()
	clientFactory, err := armpostgresql.NewClientFactory("ffffffff-ffff-ffff-ffff-ffffffffffff", cred, nil)
	if err != nil {
		log.Fatalf("failed to create client: %v", err)
	}
	poller, err := clientFactory.NewServersClient().BeginCreateOrUpdate(ctx, "exampleresourcegroup", "exampleserver", armpostgresql.Server{
		Location: to.Ptr("eastus"),
		Properties: &armpostgresql.ServerProperties{
			CreateMode:             to.Ptr(armpostgresql.CreateModePointInTimeRestore),
			PointInTimeUTC:         to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2025-06-01T18:35:22.123456Z"); return t }()),
			SourceServerResourceID: to.Ptr("/subscriptions/ffffffff-ffff-ffff-ffff-ffffffffffff/resourceGroups/exampleresourcegroup/providers/Microsoft.DBforPostgreSQL/flexibleServers/examplesourceserver"),
		},
	}, nil)
	if err != nil {
		log.Fatalf("failed to finish the request: %v", err)
	}
	_, err = poller.PollUntilDone(ctx, nil)
	if err != nil {
		log.Fatalf("failed to pull the result: %v", err)
	}
}

// Generated from example definition: 2025-08-01/ServersCreateReplica.json
func ExampleServersClient_BeginCreateOrUpdate_createAReadReplicaOfAnExistingServer() {
	cred, err := azidentity.NewDefaultAzureCredential(nil)
	if err != nil {
		log.Fatalf("failed to obtain a credential: %v", err)
	}
	ctx := context.Background()
	clientFactory, err := armpostgresql.NewClientFactory("ffffffff-ffff-ffff-ffff-ffffffffffff", cred, nil)
	if err != nil {
		log.Fatalf("failed to create client: %v", err)
	}
	poller, err := clientFactory.NewServersClient().BeginCreateOrUpdate(ctx, "exampleresourcegroup", "exampleserver", armpostgresql.Server{
		Identity: &armpostgresql.UserAssignedIdentity{
			Type: to.Ptr(armpostgresql.IdentityTypeUserAssigned),
			UserAssignedIdentities: map[string]*armpostgresql.UserIdentity{
				"/subscriptions/ffffffff-ffff-ffff-ffff-ffffffffffff/resourceGroups/exampleresourcegroup/providers/Microsoft.ManagedIdentity/userAssignedIdentities/exampleprimaryidentity": {},
			},
		},
		Location: to.Ptr("eastus"),
		Properties: &armpostgresql.ServerProperties{
			CreateMode: to.Ptr(armpostgresql.CreateModeReplica),
			DataEncryption: &armpostgresql.DataEncryption{
				Type:                            to.Ptr(armpostgresql.DataEncryptionTypeAzureKeyVault),
				GeoBackupKeyURI:                 to.Ptr(""),
				GeoBackupUserAssignedIdentityID: to.Ptr(""),
				PrimaryKeyURI:                   to.Ptr("https://exampleprimarykeyvault.vault.azure.net/keys/examplekey/xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx"),
				PrimaryUserAssignedIdentityID:   to.Ptr("/subscriptions/ffffffff-ffff-ffff-ffff-ffffffffffff/resourceGroups/exampleresourcegroup/providers/Microsoft.ManagedIdentity/userAssignedIdentities/exampleprimaryidentity"),
			},
			PointInTimeUTC:         to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2025-06-01T18:35:22.123456Z"); return t }()),
			SourceServerResourceID: to.Ptr("/subscriptions/ffffffff-ffff-ffff-ffff-ffffffffffff/resourceGroups/exampleresourcegroup/providers/Microsoft.DBforPostgreSQL/flexibleServers/examplesourceserver"),
		},
	}, nil)
	if err != nil {
		log.Fatalf("failed to finish the request: %v", err)
	}
	_, err = poller.PollUntilDone(ctx, nil)
	if err != nil {
		log.Fatalf("failed to pull the result: %v", err)
	}
}

// Generated from example definition: 2025-08-01/ServersCreateReviveDropped.json
func ExampleServersClient_BeginCreateOrUpdate_createANewServerUsingABackupOfAServerThatWasDeletedOrDroppedRecently() {
	cred, err := azidentity.NewDefaultAzureCredential(nil)
	if err != nil {
		log.Fatalf("failed to obtain a credential: %v", err)
	}
	ctx := context.Background()
	clientFactory, err := armpostgresql.NewClientFactory("ffffffff-ffff-ffff-ffff-ffffffffffff", cred, nil)
	if err != nil {
		log.Fatalf("failed to create client: %v", err)
	}
	poller, err := clientFactory.NewServersClient().BeginCreateOrUpdate(ctx, "exampleresourcegroup", "exampleserver", armpostgresql.Server{
		Location: to.Ptr("eastus"),
		Properties: &armpostgresql.ServerProperties{
			CreateMode:             to.Ptr(armpostgresql.CreateModeReviveDropped),
			PointInTimeUTC:         to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2025-06-01T18:30:22.123456Z"); return t }()),
			SourceServerResourceID: to.Ptr("/subscriptions/ffffffff-ffff-ffff-ffff-ffffffffffff/resourceGroups/exampleresourcegroup/providers/Microsoft.DBforPostgreSQL/flexibleServers/exampledeletedserver"),
		},
	}, nil)
	if err != nil {
		log.Fatalf("failed to finish the request: %v", err)
	}
	_, err = poller.PollUntilDone(ctx, nil)
	if err != nil {
		log.Fatalf("failed to pull the result: %v", err)
	}
}

// Generated from example definition: 2025-08-01/ServersCreateWithDataEncryptionEnabled.json
func ExampleServersClient_BeginCreateOrUpdate_createANewServerWithDataEncryptionBasedOnCustomerManagedKey() {
	cred, err := azidentity.NewDefaultAzureCredential(nil)
	if err != nil {
		log.Fatalf("failed to obtain a credential: %v", err)
	}
	ctx := context.Background()
	clientFactory, err := armpostgresql.NewClientFactory("ffffffff-ffff-ffff-ffff-ffffffffffff", cred, nil)
	if err != nil {
		log.Fatalf("failed to create client: %v", err)
	}
	poller, err := clientFactory.NewServersClient().BeginCreateOrUpdate(ctx, "exampleresourcegroup", "exampleserver", armpostgresql.Server{
		Identity: &armpostgresql.UserAssignedIdentity{
			Type: to.Ptr(armpostgresql.IdentityTypeUserAssigned),
			UserAssignedIdentities: map[string]*armpostgresql.UserIdentity{
				"/subscriptions/ffffffff-ffff-ffff-ffff-ffffffffffff/resourceGroups/exampleresourcegroup/providers/Microsoft.ManagedIdentity/userAssignedIdentities/exampleprimaryidentity": {},
			},
		},
		Location: to.Ptr("eastus"),
		Properties: &armpostgresql.ServerProperties{
			AdministratorLogin:         to.Ptr("exampleadministratorlogin"),
			AdministratorLoginPassword: to.Ptr("examplepassword"),
			AvailabilityZone:           to.Ptr("1"),
			Backup: &armpostgresql.Backup{
				BackupRetentionDays: to.Ptr[int32](7),
				GeoRedundantBackup:  to.Ptr(armpostgresql.GeographicallyRedundantBackupDisabled),
			},
			CreateMode: to.Ptr(armpostgresql.CreateModeCreate),
			DataEncryption: &armpostgresql.DataEncryption{
				Type:                            to.Ptr(armpostgresql.DataEncryptionTypeAzureKeyVault),
				GeoBackupKeyURI:                 to.Ptr(""),
				GeoBackupUserAssignedIdentityID: to.Ptr(""),
				PrimaryKeyURI:                   to.Ptr("https://exampleprimarykeyvault.vault.azure.net/keys/examplekey/xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx"),
				PrimaryUserAssignedIdentityID:   to.Ptr("/subscriptions/ffffffff-ffff-ffff-ffff-ffffffffffff/resourceGroups/exampleresourcegroup/providers/Microsoft.ManagedIdentity/userAssignedIdentities/exampleprimaryidentity"),
			},
			HighAvailability: &armpostgresql.HighAvailability{
				Mode: to.Ptr(armpostgresql.FlexibleServerHighAvailabilityModeZoneRedundant),
			},
			Network: &armpostgresql.Network{
				DelegatedSubnetResourceID:   to.Ptr("/subscriptions/ffffffff-ffff-ffff-ffff-ffffffffffff/resourceGroups/exampleresourcegroup/providers/Microsoft.Network/virtualNetworks/examplevirtualnetwork/subnets/examplesubnet"),
				PrivateDNSZoneArmResourceID: to.Ptr("/subscriptions/ffffffff-ffff-ffff-ffff-ffffffffffff/resourcegroups/exampleresourcegroup/providers/Microsoft.Network/privateDnsZones/exampleprivatednszone.postgres.database.azure.com"),
			},
			Storage: &armpostgresql.Storage{
				AutoGrow:      to.Ptr(armpostgresql.StorageAutoGrowDisabled),
				StorageSizeGB: to.Ptr[int32](512),
				Tier:          to.Ptr(armpostgresql.AzureManagedDiskPerformanceTierP20),
			},
			Version: to.Ptr(armpostgresql.PostgresMajorVersion17),
		},
		SKU: &armpostgresql.SKU{
			Name: to.Ptr("Standard_D4ds_v5"),
			Tier: to.Ptr(armpostgresql.SKUTierGeneralPurpose),
		},
	}, nil)
	if err != nil {
		log.Fatalf("failed to finish the request: %v", err)
	}
	_, err = poller.PollUntilDone(ctx, nil)
	if err != nil {
		log.Fatalf("failed to pull the result: %v", err)
	}
}

// Generated from example definition: 2025-08-01/ServersCreateWithDataEncryptionEnabledAutoUpdate.json
func ExampleServersClient_BeginCreateOrUpdate_createANewServerWithDataEncryptionBasedOnCustomerManagedKeyWithAutomaticKeyVersionUpdate() {
	cred, err := azidentity.NewDefaultAzureCredential(nil)
	if err != nil {
		log.Fatalf("failed to obtain a credential: %v", err)
	}
	ctx := context.Background()
	clientFactory, err := armpostgresql.NewClientFactory("ffffffff-ffff-ffff-ffff-ffffffffffff", cred, nil)
	if err != nil {
		log.Fatalf("failed to create client: %v", err)
	}
	poller, err := clientFactory.NewServersClient().BeginCreateOrUpdate(ctx, "exampleresourcegroup", "exampleserver", armpostgresql.Server{
		Identity: &armpostgresql.UserAssignedIdentity{
			Type: to.Ptr(armpostgresql.IdentityTypeUserAssigned),
			UserAssignedIdentities: map[string]*armpostgresql.UserIdentity{
				"/subscriptions/ffffffff-ffff-ffff-ffff-ffffffffffff/resourceGroups/exampleresourcegroup/providers/Microsoft.ManagedIdentity/userAssignedIdentities/exampleprimaryidentity": {},
			},
		},
		Location: to.Ptr("eastus"),
		Properties: &armpostgresql.ServerProperties{
			AdministratorLogin:         to.Ptr("exampleadministratorlogin"),
			AdministratorLoginPassword: to.Ptr("examplepassword"),
			AvailabilityZone:           to.Ptr("1"),
			Backup: &armpostgresql.Backup{
				BackupRetentionDays: to.Ptr[int32](7),
				GeoRedundantBackup:  to.Ptr(armpostgresql.GeographicallyRedundantBackupDisabled),
			},
			CreateMode: to.Ptr(armpostgresql.CreateModeCreate),
			DataEncryption: &armpostgresql.DataEncryption{
				Type:                            to.Ptr(armpostgresql.DataEncryptionTypeAzureKeyVault),
				GeoBackupKeyURI:                 to.Ptr(""),
				GeoBackupUserAssignedIdentityID: to.Ptr(""),
				PrimaryKeyURI:                   to.Ptr("https://exampleprimarykeyvault.vault.azure.net/keys/examplekey"),
				PrimaryUserAssignedIdentityID:   to.Ptr("/subscriptions/ffffffff-ffff-ffff-ffff-ffffffffffff/resourceGroups/exampleresourcegroup/providers/Microsoft.ManagedIdentity/userAssignedIdentities/exampleprimaryidentity"),
			},
			HighAvailability: &armpostgresql.HighAvailability{
				Mode: to.Ptr(armpostgresql.FlexibleServerHighAvailabilityModeZoneRedundant),
			},
			Network: &armpostgresql.Network{
				DelegatedSubnetResourceID:   to.Ptr("/subscriptions/ffffffff-ffff-ffff-ffff-ffffffffffff/resourceGroups/exampleresourcegroup/providers/Microsoft.Network/virtualNetworks/examplevirtualnetwork/subnets/examplesubnet"),
				PrivateDNSZoneArmResourceID: to.Ptr("/subscriptions/ffffffff-ffff-ffff-ffff-ffffffffffff/resourcegroups/exampleresourcegroup/providers/Microsoft.Network/privateDnsZones/exampleprivatednszone.postgres.database.azure.com"),
			},
			Storage: &armpostgresql.Storage{
				AutoGrow:      to.Ptr(armpostgresql.StorageAutoGrowDisabled),
				StorageSizeGB: to.Ptr[int32](512),
				Tier:          to.Ptr(armpostgresql.AzureManagedDiskPerformanceTierP20),
			},
			Version: to.Ptr(armpostgresql.PostgresMajorVersion17),
		},
		SKU: &armpostgresql.SKU{
			Name: to.Ptr("Standard_D4ds_v5"),
			Tier: to.Ptr(armpostgresql.SKUTierGeneralPurpose),
		},
	}, nil)
	if err != nil {
		log.Fatalf("failed to finish the request: %v", err)
	}
	_, err = poller.PollUntilDone(ctx, nil)
	if err != nil {
		log.Fatalf("failed to pull the result: %v", err)
	}
}

// Generated from example definition: 2025-08-01/ServersCreateWithMicrosoftEntraEnabledInYourOwnVirtualNetworkWithoutHighAvailability.json
func ExampleServersClient_BeginCreateOrUpdate_createANewServerWithMicrosoftEntraAuthenticationEnabledInYourOwnVirtualNetworkAndWithoutHighAvailability() {
	cred, err := azidentity.NewDefaultAzureCredential(nil)
	if err != nil {
		log.Fatalf("failed to obtain a credential: %v", err)
	}
	ctx := context.Background()
	clientFactory, err := armpostgresql.NewClientFactory("ffffffff-ffff-ffff-ffff-ffffffffffff", cred, nil)
	if err != nil {
		log.Fatalf("failed to create client: %v", err)
	}
	poller, err := clientFactory.NewServersClient().BeginCreateOrUpdate(ctx, "exampleresourcegroup", "exampleserver", armpostgresql.Server{
		Location: to.Ptr("eastus"),
		Properties: &armpostgresql.ServerProperties{
			AdministratorLogin:         to.Ptr("exampleadministratorlogin"),
			AdministratorLoginPassword: to.Ptr("examplepassword"),
			AuthConfig: &armpostgresql.AuthConfig{
				ActiveDirectoryAuth: to.Ptr(armpostgresql.MicrosoftEntraAuthEnabled),
				PasswordAuth:        to.Ptr(armpostgresql.PasswordBasedAuthEnabled),
				TenantID:            to.Ptr("tttttt-tttt-tttt-tttt-tttttttttttt"),
			},
			AvailabilityZone: to.Ptr("1"),
			Backup: &armpostgresql.Backup{
				BackupRetentionDays: to.Ptr[int32](7),
				GeoRedundantBackup:  to.Ptr(armpostgresql.GeographicallyRedundantBackupDisabled),
			},
			CreateMode: to.Ptr(armpostgresql.CreateModeCreate),
			DataEncryption: &armpostgresql.DataEncryption{
				Type: to.Ptr(armpostgresql.DataEncryptionTypeSystemManaged),
			},
			HighAvailability: &armpostgresql.HighAvailability{
				Mode: to.Ptr(armpostgresql.FlexibleServerHighAvailabilityModeDisabled),
			},
			Network: &armpostgresql.Network{
				DelegatedSubnetResourceID:   to.Ptr("/subscriptions/ffffffff-ffff-ffff-ffff-ffffffffffff/resourceGroups/exampleresourcegroup/providers/Microsoft.Network/virtualNetworks/examplevirtualnetwork/subnets/examplesubnet"),
				PrivateDNSZoneArmResourceID: to.Ptr("/subscriptions/ffffffff-ffff-ffff-ffff-ffffffffffff/resourcegroups/exampleresourcegroup/providers/Microsoft.Network/privateDnsZones/exampleprivatednszone.postgres.database.azure.com"),
			},
			Storage: &armpostgresql.Storage{
				AutoGrow:      to.Ptr(armpostgresql.StorageAutoGrowDisabled),
				StorageSizeGB: to.Ptr[int32](512),
				Tier:          to.Ptr(armpostgresql.AzureManagedDiskPerformanceTierP20),
			},
			Version: to.Ptr(armpostgresql.PostgresMajorVersion17),
		},
		SKU: &armpostgresql.SKU{
			Name: to.Ptr("Standard_D4ds_v5"),
			Tier: to.Ptr(armpostgresql.SKUTierGeneralPurpose),
		},
	}, nil)
	if err != nil {
		log.Fatalf("failed to finish the request: %v", err)
	}
	_, err = poller.PollUntilDone(ctx, nil)
	if err != nil {
		log.Fatalf("failed to pull the result: %v", err)
	}
}

// Generated from example definition: 2025-08-01/ServersDelete.json
func ExampleServersClient_BeginDelete() {
	cred, err := azidentity.NewDefaultAzureCredential(nil)
	if err != nil {
		log.Fatalf("failed to obtain a credential: %v", err)
	}
	ctx := context.Background()
	clientFactory, err := armpostgresql.NewClientFactory("ffffffff-ffff-ffff-ffff-ffffffffffff", cred, nil)
	if err != nil {
		log.Fatalf("failed to create client: %v", err)
	}
	poller, err := clientFactory.NewServersClient().BeginDelete(ctx, "exampleresourcegroup", "exampleserver", nil)
	if err != nil {
		log.Fatalf("failed to finish the request: %v", err)
	}
	_, err = poller.PollUntilDone(ctx, nil)
	if err != nil {
		log.Fatalf("failed to pull the result: %v", err)
	}
}

// Generated from example definition: 2025-08-01/ServersGet.json
func ExampleServersClient_Get_getInformationAboutAnExistingServer() {
	cred, err := azidentity.NewDefaultAzureCredential(nil)
	if err != nil {
		log.Fatalf("failed to obtain a credential: %v", err)
	}
	ctx := context.Background()
	clientFactory, err := armpostgresql.NewClientFactory("ffffffff-ffff-ffff-ffff-ffffffffffff", cred, nil)
	if err != nil {
		log.Fatalf("failed to create client: %v", err)
	}
	res, err := clientFactory.NewServersClient().Get(ctx, "exampleresourcegroup", "exampleserver", nil)
	if err != nil {
		log.Fatalf("failed to finish the request: %v", err)
	}
	// You could use response here. We use blank identifier for just demo purposes.
	_ = res
	// If the HTTP response code is 200 as defined in example definition, your response structure would look as follows. Please pay attention that all the values in the output are fake values for just demo purposes.
	// res = armpostgresql.ServersClientGetResponse{
	// 	Server: &armpostgresql.Server{
	// 		Name: to.Ptr("exampleserver"),
	// 		Type: to.Ptr("Microsoft.DBforPostgreSQL/flexibleServers"),
	// 		ID: to.Ptr("/subscriptions/ffffffff-ffff-ffff-ffff-ffffffffffff/resourceGroups/exampleresourcegroup/providers/Microsoft.DBforPostgreSQL/flexibleServers/exampleserver"),
	// 		Location: to.Ptr("eastus"),
	// 		Properties: &armpostgresql.ServerProperties{
	// 			AdministratorLogin: to.Ptr("exampleadministratorlogin"),
	// 			AuthConfig: &armpostgresql.AuthConfig{
	// 				ActiveDirectoryAuth: to.Ptr(armpostgresql.MicrosoftEntraAuthDisabled),
	// 				PasswordAuth: to.Ptr(armpostgresql.PasswordBasedAuthEnabled),
	// 			},
	// 			AvailabilityZone: to.Ptr("1"),
	// 			Backup: &armpostgresql.Backup{
	// 				BackupRetentionDays: to.Ptr[int32](7),
	// 				EarliestRestoreDate: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2025-06-01T18:35:22.123456Z"); return t}()),
	// 				GeoRedundantBackup: to.Ptr(armpostgresql.GeographicallyRedundantBackupEnabled),
	// 			},
	// 			DataEncryption: &armpostgresql.DataEncryption{
	// 				Type: to.Ptr(armpostgresql.DataEncryptionTypeSystemManaged),
	// 			},
	// 			FullyQualifiedDomainName: to.Ptr("exampleserver.postgres.database.azure.com"),
	// 			HighAvailability: &armpostgresql.HighAvailability{
	// 				Mode: to.Ptr(armpostgresql.FlexibleServerHighAvailabilityModeDisabled),
	// 				State: to.Ptr(armpostgresql.HighAvailabilityStateNotEnabled),
	// 			},
	// 			MaintenanceWindow: &armpostgresql.MaintenanceWindow{
	// 				CustomWindow: to.Ptr("Disabled"),
	// 				DayOfWeek: to.Ptr[int32](0),
	// 				StartHour: to.Ptr[int32](0),
	// 				StartMinute: to.Ptr[int32](0),
	// 			},
	// 			MinorVersion: to.Ptr("5"),
	// 			Network: &armpostgresql.Network{
	// 				PublicNetworkAccess: to.Ptr(armpostgresql.ServerPublicNetworkAccessStateEnabled),
	// 			},
	// 			PrivateEndpointConnections: []*armpostgresql.PrivateEndpointConnection{
	// 			},
	// 			Replica: &armpostgresql.Replica{
	// 				Capacity: to.Ptr[int32](5),
	// 				Role: to.Ptr(armpostgresql.ReplicationRolePrimary),
	// 			},
	// 			ReplicaCapacity: to.Ptr[int32](5),
	// 			ReplicationRole: to.Ptr(armpostgresql.ReplicationRolePrimary),
	// 			State: to.Ptr(armpostgresql.ServerStateReady),
	// 			Storage: &armpostgresql.Storage{
	// 				Type: to.Ptr(armpostgresql.StorageType("")),
	// 				AutoGrow: to.Ptr(armpostgresql.StorageAutoGrowDisabled),
	// 				Iops: to.Ptr[int32](500),
	// 				StorageSizeGB: to.Ptr[int32](128),
	// 				Tier: to.Ptr(armpostgresql.AzureManagedDiskPerformanceTierP10),
	// 			},
	// 			Version: to.Ptr(armpostgresql.PostgresMajorVersion17),
	// 		},
	// 		SKU: &armpostgresql.SKU{
	// 			Name: to.Ptr("Standard_D4ds_v5"),
	// 			Tier: to.Ptr(armpostgresql.SKUTierGeneralPurpose),
	// 		},
	// 		SystemData: &armpostgresql.SystemData{
	// 			CreatedAt: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2025-06-01T18:30:22.123456Z"); return t}()),
	// 		},
	// 	},
	// }
}

// Generated from example definition: 2025-08-01/ServersGetWithPrivateEndpoints.json
func ExampleServersClient_Get_getInformationAboutAnExistingServerThatIsnTIntegratedIntoAVirtualNetworkProvidedByCustomerAndHasPrivateEndpointConnections() {
	cred, err := azidentity.NewDefaultAzureCredential(nil)
	if err != nil {
		log.Fatalf("failed to obtain a credential: %v", err)
	}
	ctx := context.Background()
	clientFactory, err := armpostgresql.NewClientFactory("ffffffff-ffff-ffff-ffff-ffffffffffff", cred, nil)
	if err != nil {
		log.Fatalf("failed to create client: %v", err)
	}
	res, err := clientFactory.NewServersClient().Get(ctx, "exampleresourcegroup", "exampleserver", nil)
	if err != nil {
		log.Fatalf("failed to finish the request: %v", err)
	}
	// You could use response here. We use blank identifier for just demo purposes.
	_ = res
	// If the HTTP response code is 200 as defined in example definition, your response structure would look as follows. Please pay attention that all the values in the output are fake values for just demo purposes.
	// res = armpostgresql.ServersClientGetResponse{
	// 	Server: &armpostgresql.Server{
	// 		Name: to.Ptr("exampleserver"),
	// 		Type: to.Ptr("Microsoft.DBforPostgreSQL/flexibleServers"),
	// 		ID: to.Ptr("/subscriptions/ffffffff-ffff-ffff-ffff-ffffffffffff/resourceGroups/exampleresourcegroup/providers/Microsoft.DBforPostgreSQL/flexibleServers/exampleserver"),
	// 		Location: to.Ptr("eastus"),
	// 		Properties: &armpostgresql.ServerProperties{
	// 			AdministratorLogin: to.Ptr("exampleadministratorlogin"),
	// 			AuthConfig: &armpostgresql.AuthConfig{
	// 				ActiveDirectoryAuth: to.Ptr(armpostgresql.MicrosoftEntraAuthDisabled),
	// 				PasswordAuth: to.Ptr(armpostgresql.PasswordBasedAuthEnabled),
	// 			},
	// 			AvailabilityZone: to.Ptr("1"),
	// 			Backup: &armpostgresql.Backup{
	// 				BackupRetentionDays: to.Ptr[int32](7),
	// 				EarliestRestoreDate: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2025-06-01T18:35:22.123456Z"); return t}()),
	// 				GeoRedundantBackup: to.Ptr(armpostgresql.GeographicallyRedundantBackupDisabled),
	// 			},
	// 			FullyQualifiedDomainName: to.Ptr("exampleserver.postgres.database.azure.com"),
	// 			HighAvailability: &armpostgresql.HighAvailability{
	// 				Mode: to.Ptr(armpostgresql.FlexibleServerHighAvailabilityModeDisabled),
	// 				State: to.Ptr(armpostgresql.HighAvailabilityStateNotEnabled),
	// 			},
	// 			MaintenanceWindow: &armpostgresql.MaintenanceWindow{
	// 				CustomWindow: to.Ptr("Disabled"),
	// 				DayOfWeek: to.Ptr[int32](0),
	// 				StartHour: to.Ptr[int32](0),
	// 				StartMinute: to.Ptr[int32](0),
	// 			},
	// 			MinorVersion: to.Ptr("5"),
	// 			Network: &armpostgresql.Network{
	// 				PublicNetworkAccess: to.Ptr(armpostgresql.ServerPublicNetworkAccessStateEnabled),
	// 			},
	// 			PrivateEndpointConnections: []*armpostgresql.PrivateEndpointConnection{
	// 				{
	// 					Name: to.Ptr("exampleprivateendpoint.40c899c7-5847-493e-9c9e-d0a0c90aaf92"),
	// 					Type: to.Ptr("Microsoft.DBforPostgreSQL/flexibleServers/privateEndpointConnections"),
	// 					ID: to.Ptr("/subscriptions/ffffffff-ffff-ffff-ffff-ffffffffffff/resourceGroups/exampleresourcegroup/providers/Microsoft.DBforPostgreSQL/flexibleServers/exampleserver/privateEndpointConnections/exampleprivateendpoint.40c899c7-5847-493e-9c9e-d0a0c90aaf92"),
	// 					Properties: &armpostgresql.PrivateEndpointConnectionProperties{
	// 						GroupIDs: []*string{
	// 							to.Ptr("postgresqlServer"),
	// 						},
	// 						PrivateEndpoint: &armpostgresql.PrivateEndpoint{
	// 							ID: to.Ptr("/subscriptions/ffffffff-ffff-ffff-ffff-ffffffffffff/resourceGroups/exampleprivateendpointresourcegroup/providers/Microsoft.Network/privateEndpoints/exampleprivateendpoint"),
	// 						},
	// 						PrivateLinkServiceConnectionState: &armpostgresql.PrivateLinkServiceConnectionState{
	// 							Description: to.Ptr("Auto-Approved"),
	// 							ActionsRequired: to.Ptr("None"),
	// 							Status: to.Ptr(armpostgresql.PrivateEndpointServiceConnectionStatusApproved),
	// 						},
	// 						ProvisioningState: to.Ptr(armpostgresql.PrivateEndpointConnectionProvisioningStateSucceeded),
	// 					},
	// 				},
	// 			},
	// 			State: to.Ptr(armpostgresql.ServerStateReady),
	// 			Storage: &armpostgresql.Storage{
	// 				AutoGrow: to.Ptr(armpostgresql.StorageAutoGrowDisabled),
	// 				Iops: to.Ptr[int32](2300),
	// 				StorageSizeGB: to.Ptr[int32](512),
	// 				Tier: to.Ptr(armpostgresql.AzureManagedDiskPerformanceTierP20),
	// 			},
	// 			Version: to.Ptr(armpostgresql.PostgresMajorVersion17),
	// 		},
	// 		SKU: &armpostgresql.SKU{
	// 			Name: to.Ptr("Standard_D4ds_v5"),
	// 			Tier: to.Ptr(armpostgresql.SKUTierGeneralPurpose),
	// 		},
	// 	},
	// }
}

// Generated from example definition: 2025-08-01/ServersGetWithVnet.json
func ExampleServersClient_Get_getInformationAboutAnExistingServerThatIsIntegratedIntoAVirtualNetworkProvidedByCustomer() {
	cred, err := azidentity.NewDefaultAzureCredential(nil)
	if err != nil {
		log.Fatalf("failed to obtain a credential: %v", err)
	}
	ctx := context.Background()
	clientFactory, err := armpostgresql.NewClientFactory("ffffffff-ffff-ffff-ffff-ffffffffffff", cred, nil)
	if err != nil {
		log.Fatalf("failed to create client: %v", err)
	}
	res, err := clientFactory.NewServersClient().Get(ctx, "exampleresourcegroup", "exampleserver", nil)
	if err != nil {
		log.Fatalf("failed to finish the request: %v", err)
	}
	// You could use response here. We use blank identifier for just demo purposes.
	_ = res
	// If the HTTP response code is 200 as defined in example definition, your response structure would look as follows. Please pay attention that all the values in the output are fake values for just demo purposes.
	// res = armpostgresql.ServersClientGetResponse{
	// 	Server: &armpostgresql.Server{
	// 		Name: to.Ptr("exampleserver"),
	// 		Type: to.Ptr("Microsoft.DBforPostgreSQL/flexibleServers"),
	// 		ID: to.Ptr("/subscriptions/ffffffff-ffff-ffff-ffff-ffffffffffff/resourceGroups/exampleresourcegroup/providers/Microsoft.DBforPostgreSQL/flexibleServers/exampleserver"),
	// 		Location: to.Ptr("eastus"),
	// 		Properties: &armpostgresql.ServerProperties{
	// 			AdministratorLogin: to.Ptr("exampleadministratorlogin"),
	// 			AuthConfig: &armpostgresql.AuthConfig{
	// 				ActiveDirectoryAuth: to.Ptr(armpostgresql.MicrosoftEntraAuthDisabled),
	// 				PasswordAuth: to.Ptr(armpostgresql.PasswordBasedAuthEnabled),
	// 			},
	// 			AvailabilityZone: to.Ptr("1"),
	// 			Backup: &armpostgresql.Backup{
	// 				BackupRetentionDays: to.Ptr[int32](7),
	// 				EarliestRestoreDate: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2025-06-01T18:35:22.123456Z"); return t}()),
	// 				GeoRedundantBackup: to.Ptr(armpostgresql.GeographicallyRedundantBackupEnabled),
	// 			},
	// 			DataEncryption: &armpostgresql.DataEncryption{
	// 				Type: to.Ptr(armpostgresql.DataEncryptionTypeSystemManaged),
	// 			},
	// 			FullyQualifiedDomainName: to.Ptr("exampleserver.postgres.database.azure.com"),
	// 			HighAvailability: &armpostgresql.HighAvailability{
	// 				Mode: to.Ptr(armpostgresql.FlexibleServerHighAvailabilityModeZoneRedundant),
	// 				StandbyAvailabilityZone: to.Ptr("2"),
	// 				State: to.Ptr(armpostgresql.HighAvailabilityStateHealthy),
	// 			},
	// 			MaintenanceWindow: &armpostgresql.MaintenanceWindow{
	// 				CustomWindow: to.Ptr("Disabled"),
	// 				DayOfWeek: to.Ptr[int32](0),
	// 				StartHour: to.Ptr[int32](0),
	// 				StartMinute: to.Ptr[int32](0),
	// 			},
	// 			MinorVersion: to.Ptr("5"),
	// 			Network: &armpostgresql.Network{
	// 				DelegatedSubnetResourceID: to.Ptr("/subscriptions/ffffffff-ffff-ffff-ffff-ffffffffffff/resourceGroups/exampleresourcegroup/providers/Microsoft.Network/virtualNetworks/examplevirtualnetwork/subnets/examplesubnet"),
	// 				PrivateDNSZoneArmResourceID: to.Ptr("/subscriptions/ffffffff-ffff-ffff-ffff-ffffffffffff/resourceGroups/exampleresourcegroup/providers/Microsoft.Network/privateDnsZones/exampleserver.private.postgres.database.azure.com"),
	// 				PublicNetworkAccess: to.Ptr(armpostgresql.ServerPublicNetworkAccessStateDisabled),
	// 			},
	// 			Replica: &armpostgresql.Replica{
	// 				Capacity: to.Ptr[int32](5),
	// 				Role: to.Ptr(armpostgresql.ReplicationRolePrimary),
	// 			},
	// 			ReplicaCapacity: to.Ptr[int32](5),
	// 			ReplicationRole: to.Ptr(armpostgresql.ReplicationRolePrimary),
	// 			State: to.Ptr(armpostgresql.ServerStateReady),
	// 			Storage: &armpostgresql.Storage{
	// 				Type: to.Ptr(armpostgresql.StorageType("")),
	// 				AutoGrow: to.Ptr(armpostgresql.StorageAutoGrowDisabled),
	// 				Iops: to.Ptr[int32](2300),
	// 				StorageSizeGB: to.Ptr[int32](512),
	// 				Tier: to.Ptr(armpostgresql.AzureManagedDiskPerformanceTierP20),
	// 			},
	// 			Version: to.Ptr(armpostgresql.PostgresMajorVersion17),
	// 		},
	// 		SKU: &armpostgresql.SKU{
	// 			Name: to.Ptr("Standard_D4ds_v5"),
	// 			Tier: to.Ptr(armpostgresql.SKUTierGeneralPurpose),
	// 		},
	// 		SystemData: &armpostgresql.SystemData{
	// 			CreatedAt: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2025-06-01T18:30:22.123456Z"); return t}()),
	// 		},
	// 		Tags: map[string]*string{
	// 			"VnetServer": to.Ptr("1"),
	// 		},
	// 	},
	// }
}

// Generated from example definition: 2025-08-01/ServersListByResourceGroup.json
func ExampleServersClient_NewListByResourceGroupPager() {
	cred, err := azidentity.NewDefaultAzureCredential(nil)
	if err != nil {
		log.Fatalf("failed to obtain a credential: %v", err)
	}
	ctx := context.Background()
	clientFactory, err := armpostgresql.NewClientFactory("ffffffff-ffff-ffff-ffff-ffffffffffff", cred, nil)
	if err != nil {
		log.Fatalf("failed to create client: %v", err)
	}
	pager := clientFactory.NewServersClient().NewListByResourceGroupPager("exampleresourcegroup", nil)
	for pager.More() {
		page, err := pager.NextPage(ctx)
		if err != nil {
			log.Fatalf("failed to advance page: %v", err)
		}
		for _, v := range page.Value {
			// You could use page here. We use blank identifier for just demo purposes.
			_ = v
		}
		// If the HTTP response code is 200 as defined in example definition, your page structure would look as follows. Please pay attention that all the values in the output are fake values for just demo purposes.
		// page = armpostgresql.ServersClientListByResourceGroupResponse{
		// 	ServerList: armpostgresql.ServerList{
		// 		NextLink: to.Ptr("https://management.azure.com/subscriptions/ffffffff-ffff-ffff-ffff-ffffffffffff/resourceGroups/exampleresourcegroup/providers/Microsoft.DBforPostgreSQL/flexibleServers?api-version=2025-06-01-preview&$skiptoken=skiptoken"),
		// 		Value: []*armpostgresql.Server{
		// 			{
		// 				Name: to.Ptr("exampleserver1"),
		// 				Type: to.Ptr("Microsoft.DBforPostgreSQL/flexibleServers"),
		// 				ID: to.Ptr("/subscriptions/ffffffff-ffff-ffff-ffff-ffffffffffff/resourceGroups/exampleresourcegroup/providers/Microsoft.DBforPostgreSQL/flexibleServers/exampleserver1"),
		// 				Location: to.Ptr("eastus"),
		// 				Properties: &armpostgresql.ServerProperties{
		// 					AdministratorLogin: to.Ptr("exampleadministratorlogin"),
		// 					AuthConfig: &armpostgresql.AuthConfig{
		// 						ActiveDirectoryAuth: to.Ptr(armpostgresql.MicrosoftEntraAuthEnabled),
		// 						PasswordAuth: to.Ptr(armpostgresql.PasswordBasedAuthEnabled),
		// 						TenantID: to.Ptr("tttttt-tttt-tttt-tttt-tttttttttttt"),
		// 					},
		// 					AvailabilityZone: to.Ptr("1"),
		// 					Backup: &armpostgresql.Backup{
		// 						BackupRetentionDays: to.Ptr[int32](7),
		// 						EarliestRestoreDate: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2025-06-01T18:35:22.123456Z"); return t}()),
		// 						GeoRedundantBackup: to.Ptr(armpostgresql.GeographicallyRedundantBackupEnabled),
		// 					},
		// 					DataEncryption: &armpostgresql.DataEncryption{
		// 						Type: to.Ptr(armpostgresql.DataEncryptionTypeSystemManaged),
		// 					},
		// 					FullyQualifiedDomainName: to.Ptr("exampleserver1.postgres.database.azure.com"),
		// 					HighAvailability: &armpostgresql.HighAvailability{
		// 						Mode: to.Ptr(armpostgresql.FlexibleServerHighAvailabilityModeZoneRedundant),
		// 						StandbyAvailabilityZone: to.Ptr("2"),
		// 						State: to.Ptr(armpostgresql.HighAvailabilityStateHealthy),
		// 					},
		// 					MaintenanceWindow: &armpostgresql.MaintenanceWindow{
		// 						CustomWindow: to.Ptr("Disabled"),
		// 						DayOfWeek: to.Ptr[int32](0),
		// 						StartHour: to.Ptr[int32](0),
		// 						StartMinute: to.Ptr[int32](0),
		// 					},
		// 					MinorVersion: to.Ptr("5"),
		// 					Network: &armpostgresql.Network{
		// 						DelegatedSubnetResourceID: to.Ptr("/subscriptions/ffffffff-ffff-ffff-ffff-ffffffffffff/resourceGroups/exampleresourcegroup/providers/Microsoft.Network/virtualNetworks/examplevirtualnetwork/subnets/examplesubnet"),
		// 						PrivateDNSZoneArmResourceID: to.Ptr("/subscriptions/ffffffff-ffff-ffff-ffff-ffffffffffff/resourceGroups/exampleresourcegroup/providers/Microsoft.Network/privateDnsZones/exampleserver1.private.postgres.database.azure.com"),
		// 						PublicNetworkAccess: to.Ptr(armpostgresql.ServerPublicNetworkAccessStateDisabled),
		// 					},
		// 					Replica: &armpostgresql.Replica{
		// 						Capacity: to.Ptr[int32](5),
		// 						Role: to.Ptr(armpostgresql.ReplicationRolePrimary),
		// 					},
		// 					ReplicaCapacity: to.Ptr[int32](5),
		// 					ReplicationRole: to.Ptr(armpostgresql.ReplicationRolePrimary),
		// 					State: to.Ptr(armpostgresql.ServerStateReady),
		// 					Storage: &armpostgresql.Storage{
		// 						Type: to.Ptr(armpostgresql.StorageType("")),
		// 						AutoGrow: to.Ptr(armpostgresql.StorageAutoGrowDisabled),
		// 						Iops: to.Ptr[int32](2300),
		// 						StorageSizeGB: to.Ptr[int32](512),
		// 						Tier: to.Ptr(armpostgresql.AzureManagedDiskPerformanceTierP20),
		// 					},
		// 					Version: to.Ptr(armpostgresql.PostgresMajorVersion17),
		// 				},
		// 				SKU: &armpostgresql.SKU{
		// 					Name: to.Ptr("Standard_D4ds_v5"),
		// 					Tier: to.Ptr(armpostgresql.SKUTierGeneralPurpose),
		// 				},
		// 				SystemData: &armpostgresql.SystemData{
		// 					CreatedAt: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2025-06-01T18:30:22.123456Z"); return t}()),
		// 				},
		// 				Tags: map[string]*string{
		// 					"VnetServer": to.Ptr("1"),
		// 				},
		// 			},
		// 			{
		// 				Name: to.Ptr("exampleserver2"),
		// 				Type: to.Ptr("Microsoft.DBforPostgreSQL/flexibleServers"),
		// 				ID: to.Ptr("/subscriptions/ffffffff-ffff-ffff-ffff-ffffffffffff/resourceGroups/exampleresourcegroup/providers/Microsoft.DBforPostgreSQL/flexibleServers/exampleserver2"),
		// 				Identity: &armpostgresql.UserAssignedIdentity{
		// 					Type: to.Ptr(armpostgresql.IdentityTypeSystemAssignedUserAssigned),
		// 					PrincipalID: to.Ptr("rrrrrrrr-rrrr-rrrr-rrrr-rrrrrrrrrrrr"),
		// 					TenantID: to.Ptr("tttttt-tttt-tttt-tttt-tttttttttttt"),
		// 					UserAssignedIdentities: map[string]*armpostgresql.UserIdentity{
		// 						"/subscriptions/ffffffff-ffff-ffff-ffff-ffffffffffff/resourceGroups/exampleresourcegroup/providers/Microsoft.ManagedIdentity/userAssignedIdentities/exampleprimaryidentity": &armpostgresql.UserIdentity{
		// 							ClientID: to.Ptr("tttttt-tttt-tttt-tttt-tttttttttttt"),
		// 							PrincipalID: to.Ptr("pppppppp-pppp-pppp-pppp-pppppppppppp"),
		// 						},
		// 					},
		// 				},
		// 				Location: to.Ptr("eastus"),
		// 				Properties: &armpostgresql.ServerProperties{
		// 					AdministratorLogin: to.Ptr("exampleadministratorlogin"),
		// 					AuthConfig: &armpostgresql.AuthConfig{
		// 						ActiveDirectoryAuth: to.Ptr(armpostgresql.MicrosoftEntraAuthEnabled),
		// 						PasswordAuth: to.Ptr(armpostgresql.PasswordBasedAuthEnabled),
		// 						TenantID: to.Ptr("tttttt-tttt-tttt-tttt-tttttttttttt"),
		// 					},
		// 					AvailabilityZone: to.Ptr("1"),
		// 					Backup: &armpostgresql.Backup{
		// 						BackupRetentionDays: to.Ptr[int32](7),
		// 						EarliestRestoreDate: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2025-06-01T19:35:22.123456Z"); return t}()),
		// 						GeoRedundantBackup: to.Ptr(armpostgresql.GeographicallyRedundantBackupDisabled),
		// 					},
		// 					DataEncryption: &armpostgresql.DataEncryption{
		// 						Type: to.Ptr(armpostgresql.DataEncryptionTypeAzureKeyVault),
		// 						PrimaryEncryptionKeyStatus: to.Ptr(armpostgresql.EncryptionKeyStatusValid),
		// 						PrimaryKeyURI: to.Ptr("https://examplekeyvault.vault.azure.net/keys/examplekey/xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx"),
		// 						PrimaryUserAssignedIdentityID: to.Ptr("/subscriptions/ffffffff-ffff-ffff-ffff-ffffffffffff/resourceGroups/exampleresourcegroup/providers/Microsoft.ManagedIdentity/userAssignedIdentities/exampleprimaryidentity"),
		// 					},
		// 					FullyQualifiedDomainName: to.Ptr("exampleserver2.postgres.database.azure.com"),
		// 					HighAvailability: &armpostgresql.HighAvailability{
		// 						Mode: to.Ptr(armpostgresql.FlexibleServerHighAvailabilityModeDisabled),
		// 						State: to.Ptr(armpostgresql.HighAvailabilityStateNotEnabled),
		// 					},
		// 					MaintenanceWindow: &armpostgresql.MaintenanceWindow{
		// 						CustomWindow: to.Ptr("Disabled"),
		// 						DayOfWeek: to.Ptr[int32](0),
		// 						StartHour: to.Ptr[int32](0),
		// 						StartMinute: to.Ptr[int32](0),
		// 					},
		// 					MinorVersion: to.Ptr("5"),
		// 					Network: &armpostgresql.Network{
		// 						PublicNetworkAccess: to.Ptr(armpostgresql.ServerPublicNetworkAccessStateEnabled),
		// 					},
		// 					PrivateEndpointConnections: []*armpostgresql.PrivateEndpointConnection{
		// 					},
		// 					Replica: &armpostgresql.Replica{
		// 						Capacity: to.Ptr[int32](5),
		// 						Role: to.Ptr(armpostgresql.ReplicationRolePrimary),
		// 					},
		// 					ReplicaCapacity: to.Ptr[int32](5),
		// 					ReplicationRole: to.Ptr(armpostgresql.ReplicationRolePrimary),
		// 					State: to.Ptr(armpostgresql.ServerStateReady),
		// 					Storage: &armpostgresql.Storage{
		// 						Type: to.Ptr(armpostgresql.StorageType("")),
		// 						AutoGrow: to.Ptr(armpostgresql.StorageAutoGrowDisabled),
		// 						Iops: to.Ptr[int32](500),
		// 						StorageSizeGB: to.Ptr[int32](128),
		// 						Tier: to.Ptr(armpostgresql.AzureManagedDiskPerformanceTierP10),
		// 					},
		// 					Version: to.Ptr(armpostgresql.PostgresMajorVersion17),
		// 				},
		// 				SKU: &armpostgresql.SKU{
		// 					Name: to.Ptr("Standard_D4ds_v5"),
		// 					Tier: to.Ptr(armpostgresql.SKUTierGeneralPurpose),
		// 				},
		// 				SystemData: &armpostgresql.SystemData{
		// 					CreatedAt: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2025-06-01T19:30:22.123456Z"); return t}()),
		// 				},
		// 				Tags: map[string]*string{
		// 				},
		// 			},
		// 		},
		// 	},
		// }
	}
}

// Generated from example definition: 2025-08-01/ServersListBySubscription.json
func ExampleServersClient_NewListBySubscriptionPager() {
	cred, err := azidentity.NewDefaultAzureCredential(nil)
	if err != nil {
		log.Fatalf("failed to obtain a credential: %v", err)
	}
	ctx := context.Background()
	clientFactory, err := armpostgresql.NewClientFactory("ffffffff-ffff-ffff-ffff-ffffffffffff", cred, nil)
	if err != nil {
		log.Fatalf("failed to create client: %v", err)
	}
	pager := clientFactory.NewServersClient().NewListBySubscriptionPager(nil)
	for pager.More() {
		page, err := pager.NextPage(ctx)
		if err != nil {
			log.Fatalf("failed to advance page: %v", err)
		}
		for _, v := range page.Value {
			// You could use page here. We use blank identifier for just demo purposes.
			_ = v
		}
		// If the HTTP response code is 200 as defined in example definition, your page structure would look as follows. Please pay attention that all the values in the output are fake values for just demo purposes.
		// page = armpostgresql.ServersClientListBySubscriptionResponse{
		// 	ServerList: armpostgresql.ServerList{
		// 		NextLink: to.Ptr("https://management.azure.com/subscriptions/ffffffff-ffff-ffff-ffff-ffffffffffff/providers/Microsoft.DBforPostgreSQL/flexibleServers?api-version=2025-06-01-preview&$skiptoken=skiptoken"),
		// 		Value: []*armpostgresql.Server{
		// 			{
		// 				Name: to.Ptr("exampleserver1"),
		// 				Type: to.Ptr("Microsoft.DBforPostgreSQL/flexibleServers"),
		// 				ID: to.Ptr("/subscriptions/ffffffff-ffff-ffff-ffff-ffffffffffff/resourceGroups/exampleresourcegroup1/providers/Microsoft.DBforPostgreSQL/flexibleServers/exampleserver1"),
		// 				Location: to.Ptr("eastus"),
		// 				Properties: &armpostgresql.ServerProperties{
		// 					AdministratorLogin: to.Ptr("exampleadministratorlogin"),
		// 					AuthConfig: &armpostgresql.AuthConfig{
		// 						ActiveDirectoryAuth: to.Ptr(armpostgresql.MicrosoftEntraAuthEnabled),
		// 						PasswordAuth: to.Ptr(armpostgresql.PasswordBasedAuthEnabled),
		// 						TenantID: to.Ptr("tttttt-tttt-tttt-tttt-tttttttttttt"),
		// 					},
		// 					AvailabilityZone: to.Ptr("1"),
		// 					Backup: &armpostgresql.Backup{
		// 						BackupRetentionDays: to.Ptr[int32](7),
		// 						EarliestRestoreDate: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2025-06-01T18:35:22.123456Z"); return t}()),
		// 						GeoRedundantBackup: to.Ptr(armpostgresql.GeographicallyRedundantBackupEnabled),
		// 					},
		// 					DataEncryption: &armpostgresql.DataEncryption{
		// 						Type: to.Ptr(armpostgresql.DataEncryptionTypeSystemManaged),
		// 					},
		// 					FullyQualifiedDomainName: to.Ptr("exampleserver1.postgres.database.azure.com"),
		// 					HighAvailability: &armpostgresql.HighAvailability{
		// 						Mode: to.Ptr(armpostgresql.FlexibleServerHighAvailabilityModeZoneRedundant),
		// 						StandbyAvailabilityZone: to.Ptr("2"),
		// 						State: to.Ptr(armpostgresql.HighAvailabilityStateHealthy),
		// 					},
		// 					MaintenanceWindow: &armpostgresql.MaintenanceWindow{
		// 						CustomWindow: to.Ptr("Disabled"),
		// 						DayOfWeek: to.Ptr[int32](0),
		// 						StartHour: to.Ptr[int32](0),
		// 						StartMinute: to.Ptr[int32](0),
		// 					},
		// 					MinorVersion: to.Ptr("5"),
		// 					Network: &armpostgresql.Network{
		// 						DelegatedSubnetResourceID: to.Ptr("/subscriptions/ffffffff-ffff-ffff-ffff-ffffffffffff/resourceGroups/exampleresourcegroup1/providers/Microsoft.Network/virtualNetworks/examplevirtualnetwork1/subnets/examplesubnet1"),
		// 						PrivateDNSZoneArmResourceID: to.Ptr("/subscriptions/ffffffff-ffff-ffff-ffff-ffffffffffff/resourceGroups/exampleresourcegroup1/providers/Microsoft.Network/privateDnsZones/exampleprivatednszone1.postgres.database.azure.com"),
		// 						PublicNetworkAccess: to.Ptr(armpostgresql.ServerPublicNetworkAccessStateDisabled),
		// 					},
		// 					Replica: &armpostgresql.Replica{
		// 						Capacity: to.Ptr[int32](5),
		// 						Role: to.Ptr(armpostgresql.ReplicationRolePrimary),
		// 					},
		// 					ReplicaCapacity: to.Ptr[int32](5),
		// 					ReplicationRole: to.Ptr(armpostgresql.ReplicationRolePrimary),
		// 					State: to.Ptr(armpostgresql.ServerStateReady),
		// 					Storage: &armpostgresql.Storage{
		// 						Type: to.Ptr(armpostgresql.StorageType("")),
		// 						AutoGrow: to.Ptr(armpostgresql.StorageAutoGrowDisabled),
		// 						Iops: to.Ptr[int32](2300),
		// 						StorageSizeGB: to.Ptr[int32](512),
		// 						Tier: to.Ptr(armpostgresql.AzureManagedDiskPerformanceTierP20),
		// 					},
		// 					Version: to.Ptr(armpostgresql.PostgresMajorVersion17),
		// 				},
		// 				SKU: &armpostgresql.SKU{
		// 					Name: to.Ptr("Standard_D4ds_v5"),
		// 					Tier: to.Ptr(armpostgresql.SKUTierGeneralPurpose),
		// 				},
		// 				SystemData: &armpostgresql.SystemData{
		// 					CreatedAt: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2025-06-01T18:30:22.123456Z"); return t}()),
		// 				},
		// 				Tags: map[string]*string{
		// 					"VnetServer": to.Ptr("1"),
		// 				},
		// 			},
		// 			{
		// 				Name: to.Ptr("exampleserver2"),
		// 				Type: to.Ptr("Microsoft.DBforPostgreSQL/flexibleServers"),
		// 				ID: to.Ptr("/subscriptions/ffffffff-ffff-ffff-ffff-ffffffffffff/resourceGroups/exampleresourcegroup2/providers/Microsoft.DBforPostgreSQL/flexibleServers/exampleserver2"),
		// 				Location: to.Ptr("eastus"),
		// 				Properties: &armpostgresql.ServerProperties{
		// 					AdministratorLogin: to.Ptr("exampleadministratorlogin"),
		// 					AuthConfig: &armpostgresql.AuthConfig{
		// 						ActiveDirectoryAuth: to.Ptr(armpostgresql.MicrosoftEntraAuthEnabled),
		// 						PasswordAuth: to.Ptr(armpostgresql.PasswordBasedAuthEnabled),
		// 						TenantID: to.Ptr("tttttt-tttt-tttt-tttt-tttttttttttt"),
		// 					},
		// 					AvailabilityZone: to.Ptr("2"),
		// 					Backup: &armpostgresql.Backup{
		// 						BackupRetentionDays: to.Ptr[int32](7),
		// 						EarliestRestoreDate: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2025-06-01T19:35:22.123456Z"); return t}()),
		// 						GeoRedundantBackup: to.Ptr(armpostgresql.GeographicallyRedundantBackupEnabled),
		// 					},
		// 					DataEncryption: &armpostgresql.DataEncryption{
		// 						Type: to.Ptr(armpostgresql.DataEncryptionTypeSystemManaged),
		// 					},
		// 					FullyQualifiedDomainName: to.Ptr("exampleserver2.postgres.database.azure.com"),
		// 					HighAvailability: &armpostgresql.HighAvailability{
		// 						Mode: to.Ptr(armpostgresql.FlexibleServerHighAvailabilityModeZoneRedundant),
		// 						StandbyAvailabilityZone: to.Ptr("1"),
		// 						State: to.Ptr(armpostgresql.HighAvailabilityStateHealthy),
		// 					},
		// 					MaintenanceWindow: &armpostgresql.MaintenanceWindow{
		// 						CustomWindow: to.Ptr("Disabled"),
		// 						DayOfWeek: to.Ptr[int32](0),
		// 						StartHour: to.Ptr[int32](0),
		// 						StartMinute: to.Ptr[int32](0),
		// 					},
		// 					MinorVersion: to.Ptr("5"),
		// 					Network: &armpostgresql.Network{
		// 						PublicNetworkAccess: to.Ptr(armpostgresql.ServerPublicNetworkAccessStateEnabled),
		// 					},
		// 					PrivateEndpointConnections: []*armpostgresql.PrivateEndpointConnection{
		// 					},
		// 					Replica: &armpostgresql.Replica{
		// 						Capacity: to.Ptr[int32](5),
		// 						Role: to.Ptr(armpostgresql.ReplicationRolePrimary),
		// 					},
		// 					ReplicaCapacity: to.Ptr[int32](5),
		// 					ReplicationRole: to.Ptr(armpostgresql.ReplicationRolePrimary),
		// 					State: to.Ptr(armpostgresql.ServerStateReady),
		// 					Storage: &armpostgresql.Storage{
		// 						Type: to.Ptr(armpostgresql.StorageType("")),
		// 						AutoGrow: to.Ptr(armpostgresql.StorageAutoGrowDisabled),
		// 						Iops: to.Ptr[int32](500),
		// 						StorageSizeGB: to.Ptr[int32](128),
		// 						Tier: to.Ptr(armpostgresql.AzureManagedDiskPerformanceTierP10),
		// 					},
		// 					Version: to.Ptr(armpostgresql.PostgresMajorVersion17),
		// 				},
		// 				SKU: &armpostgresql.SKU{
		// 					Name: to.Ptr("Standard_D4ds_v5"),
		// 					Tier: to.Ptr(armpostgresql.SKUTierGeneralPurpose),
		// 				},
		// 				SystemData: &armpostgresql.SystemData{
		// 					CreatedAt: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2025-06-01T19:30:22.123456Z"); return t}()),
		// 				},
		// 				Tags: map[string]*string{
		// 				},
		// 			},
		// 			{
		// 				Name: to.Ptr("exampleserver3"),
		// 				Type: to.Ptr("Microsoft.DBforPostgreSQL/flexibleServers"),
		// 				ID: to.Ptr("/subscriptions/ffffffff-ffff-ffff-ffff-ffffffffffff/resourceGroups/exampleresourcegroup3/providers/Microsoft.DBforPostgreSQL/flexibleServers/exampleserver3"),
		// 				Identity: &armpostgresql.UserAssignedIdentity{
		// 					Type: to.Ptr(armpostgresql.IdentityTypeSystemAssignedUserAssigned),
		// 					PrincipalID: to.Ptr("rrrrrrrr-rrrr-rrrr-rrrr-rrrrrrrrrrrr"),
		// 					TenantID: to.Ptr("tttttt-tttt-tttt-tttt-tttttttttttt"),
		// 					UserAssignedIdentities: map[string]*armpostgresql.UserIdentity{
		// 						"/subscriptions/ffffffff-ffff-ffff-ffff-ffffffffffff/resourceGroups/exampleresourcegroup3/providers/Microsoft.ManagedIdentity/userAssignedIdentities/exampleprimaryidentity3": &armpostgresql.UserIdentity{
		// 							ClientID: to.Ptr("tttttt-tttt-tttt-tttt-tttttttttttt"),
		// 							PrincipalID: to.Ptr("pppppppp-pppp-pppp-pppp-pppppppppppp"),
		// 						},
		// 					},
		// 				},
		// 				Location: to.Ptr("eastus"),
		// 				Properties: &armpostgresql.ServerProperties{
		// 					AdministratorLogin: to.Ptr("exampleadministratorlogin"),
		// 					AuthConfig: &armpostgresql.AuthConfig{
		// 						ActiveDirectoryAuth: to.Ptr(armpostgresql.MicrosoftEntraAuthEnabled),
		// 						PasswordAuth: to.Ptr(armpostgresql.PasswordBasedAuthEnabled),
		// 						TenantID: to.Ptr("tttttt-tttt-tttt-tttt-tttttttttttt"),
		// 					},
		// 					AvailabilityZone: to.Ptr("1"),
		// 					Backup: &armpostgresql.Backup{
		// 						BackupRetentionDays: to.Ptr[int32](7),
		// 						EarliestRestoreDate: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2025-06-01T20:35:22.123456Z"); return t}()),
		// 						GeoRedundantBackup: to.Ptr(armpostgresql.GeographicallyRedundantBackupDisabled),
		// 					},
		// 					DataEncryption: &armpostgresql.DataEncryption{
		// 						Type: to.Ptr(armpostgresql.DataEncryptionTypeAzureKeyVault),
		// 						PrimaryEncryptionKeyStatus: to.Ptr(armpostgresql.EncryptionKeyStatusValid),
		// 						PrimaryKeyURI: to.Ptr("https://examplekeyvault3.vault.azure.net/keys/examplekey/xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx"),
		// 						PrimaryUserAssignedIdentityID: to.Ptr("/subscriptions/ffffffff-ffff-ffff-ffff-ffffffffffff/resourceGroups/exampleresourcegroup3/providers/Microsoft.ManagedIdentity/userAssignedIdentities/exampleprimaryidentity3"),
		// 					},
		// 					FullyQualifiedDomainName: to.Ptr("exampleserver3.postgres.database.azure.com"),
		// 					HighAvailability: &armpostgresql.HighAvailability{
		// 						Mode: to.Ptr(armpostgresql.FlexibleServerHighAvailabilityModeDisabled),
		// 						State: to.Ptr(armpostgresql.HighAvailabilityStateNotEnabled),
		// 					},
		// 					MaintenanceWindow: &armpostgresql.MaintenanceWindow{
		// 						CustomWindow: to.Ptr("Disabled"),
		// 						DayOfWeek: to.Ptr[int32](0),
		// 						StartHour: to.Ptr[int32](0),
		// 						StartMinute: to.Ptr[int32](0),
		// 					},
		// 					MinorVersion: to.Ptr("5"),
		// 					Network: &armpostgresql.Network{
		// 						PublicNetworkAccess: to.Ptr(armpostgresql.ServerPublicNetworkAccessStateEnabled),
		// 					},
		// 					PrivateEndpointConnections: []*armpostgresql.PrivateEndpointConnection{
		// 					},
		// 					Replica: &armpostgresql.Replica{
		// 						Capacity: to.Ptr[int32](5),
		// 						Role: to.Ptr(armpostgresql.ReplicationRolePrimary),
		// 					},
		// 					ReplicaCapacity: to.Ptr[int32](5),
		// 					ReplicationRole: to.Ptr(armpostgresql.ReplicationRolePrimary),
		// 					State: to.Ptr(armpostgresql.ServerStateReady),
		// 					Storage: &armpostgresql.Storage{
		// 						Type: to.Ptr(armpostgresql.StorageType("")),
		// 						AutoGrow: to.Ptr(armpostgresql.StorageAutoGrowDisabled),
		// 						Iops: to.Ptr[int32](500),
		// 						StorageSizeGB: to.Ptr[int32](128),
		// 						Tier: to.Ptr(armpostgresql.AzureManagedDiskPerformanceTierP10),
		// 					},
		// 					Version: to.Ptr(armpostgresql.PostgresMajorVersion17),
		// 				},
		// 				SKU: &armpostgresql.SKU{
		// 					Name: to.Ptr("Standard_D4ds_v5"),
		// 					Tier: to.Ptr(armpostgresql.SKUTierGeneralPurpose),
		// 				},
		// 				SystemData: &armpostgresql.SystemData{
		// 					CreatedAt: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2025-06-01T20:30:22.123456Z"); return t}()),
		// 				},
		// 				Tags: map[string]*string{
		// 				},
		// 			},
		// 			{
		// 				Name: to.Ptr("exampleserver4"),
		// 				Type: to.Ptr("Microsoft.DBforPostgreSQL/flexibleServers"),
		// 				ID: to.Ptr("/subscriptions/ffffffff-ffff-ffff-ffff-ffffffffffff/resourceGroups/exampleresourcegroup4/providers/Microsoft.DBforPostgreSQL/flexibleServers/exampleserver4"),
		// 				Location: to.Ptr("eastus"),
		// 				Properties: &armpostgresql.ServerProperties{
		// 					AdministratorLogin: to.Ptr("exampleadministratorlogin"),
		// 					AuthConfig: &armpostgresql.AuthConfig{
		// 						ActiveDirectoryAuth: to.Ptr(armpostgresql.MicrosoftEntraAuthDisabled),
		// 						PasswordAuth: to.Ptr(armpostgresql.PasswordBasedAuthEnabled),
		// 					},
		// 					AvailabilityZone: to.Ptr("2"),
		// 					Backup: &armpostgresql.Backup{
		// 						BackupRetentionDays: to.Ptr[int32](7),
		// 						EarliestRestoreDate: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2025-06-01T21:35:22.123456Z"); return t}()),
		// 						GeoRedundantBackup: to.Ptr(armpostgresql.GeographicallyRedundantBackupDisabled),
		// 					},
		// 					DataEncryption: &armpostgresql.DataEncryption{
		// 						Type: to.Ptr(armpostgresql.DataEncryptionTypeSystemManaged),
		// 					},
		// 					FullyQualifiedDomainName: to.Ptr("exampleserver4.postgres.database.azure.com"),
		// 					HighAvailability: &armpostgresql.HighAvailability{
		// 						Mode: to.Ptr(armpostgresql.FlexibleServerHighAvailabilityModeDisabled),
		// 						State: to.Ptr(armpostgresql.HighAvailabilityStateNotEnabled),
		// 					},
		// 					MaintenanceWindow: &armpostgresql.MaintenanceWindow{
		// 						CustomWindow: to.Ptr("Disabled"),
		// 						DayOfWeek: to.Ptr[int32](0),
		// 						StartHour: to.Ptr[int32](0),
		// 						StartMinute: to.Ptr[int32](0),
		// 					},
		// 					MinorVersion: to.Ptr("5"),
		// 					Network: &armpostgresql.Network{
		// 						PublicNetworkAccess: to.Ptr(armpostgresql.ServerPublicNetworkAccessStateEnabled),
		// 					},
		// 					PrivateEndpointConnections: []*armpostgresql.PrivateEndpointConnection{
		// 					},
		// 					Replica: &armpostgresql.Replica{
		// 						Capacity: to.Ptr[int32](5),
		// 						Role: to.Ptr(armpostgresql.ReplicationRolePrimary),
		// 					},
		// 					ReplicaCapacity: to.Ptr[int32](5),
		// 					ReplicationRole: to.Ptr(armpostgresql.ReplicationRolePrimary),
		// 					State: to.Ptr(armpostgresql.ServerStateReady),
		// 					Storage: &armpostgresql.Storage{
		// 						Type: to.Ptr(armpostgresql.StorageTypePremiumV2LRS),
		// 						AutoGrow: to.Ptr(armpostgresql.StorageAutoGrowDisabled),
		// 						Iops: to.Ptr[int32](3000),
		// 						StorageSizeGB: to.Ptr[int32](512),
		// 						Throughput: to.Ptr[int32](125),
		// 					},
		// 					Version: to.Ptr(armpostgresql.PostgresMajorVersion17),
		// 				},
		// 				SKU: &armpostgresql.SKU{
		// 					Name: to.Ptr("Standard_D4ds_v5"),
		// 					Tier: to.Ptr(armpostgresql.SKUTierGeneralPurpose),
		// 				},
		// 				SystemData: &armpostgresql.SystemData{
		// 					CreatedAt: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2025-06-01T21:30:22.123456Z"); return t}()),
		// 				},
		// 				Tags: map[string]*string{
		// 				},
		// 			},
		// 		},
		// 	},
		// }
	}
}

// Generated from example definition: 2025-08-01/ServersRestart.json
func ExampleServersClient_BeginRestart_restartPostgreSqlDatabaseEngineInAServer() {
	cred, err := azidentity.NewDefaultAzureCredential(nil)
	if err != nil {
		log.Fatalf("failed to obtain a credential: %v", err)
	}
	ctx := context.Background()
	clientFactory, err := armpostgresql.NewClientFactory("ffffffff-ffff-ffff-ffff-ffffffffffff", cred, nil)
	if err != nil {
		log.Fatalf("failed to create client: %v", err)
	}
	poller, err := clientFactory.NewServersClient().BeginRestart(ctx, "exampleresourcegroup", "exampleserver", nil)
	if err != nil {
		log.Fatalf("failed to finish the request: %v", err)
	}
	_, err = poller.PollUntilDone(ctx, nil)
	if err != nil {
		log.Fatalf("failed to pull the result: %v", err)
	}
}

// Generated from example definition: 2025-08-01/ServersRestartWithFailover.json
func ExampleServersClient_BeginRestart_restartPostgreSqlDatabaseEngineInAServerWithAForcedFailoverToStandbyServer() {
	cred, err := azidentity.NewDefaultAzureCredential(nil)
	if err != nil {
		log.Fatalf("failed to obtain a credential: %v", err)
	}
	ctx := context.Background()
	clientFactory, err := armpostgresql.NewClientFactory("ffffffff-ffff-ffff-ffff-ffffffffffff", cred, nil)
	if err != nil {
		log.Fatalf("failed to create client: %v", err)
	}
	poller, err := clientFactory.NewServersClient().BeginRestart(ctx, "exampleresourcegroup", "exampleserver", &armpostgresql.ServersClientBeginRestartOptions{
		Parameters: &armpostgresql.RestartParameter{
			FailoverMode:        to.Ptr(armpostgresql.FailoverModeForcedFailover),
			RestartWithFailover: to.Ptr(true),
		}})
	if err != nil {
		log.Fatalf("failed to finish the request: %v", err)
	}
	_, err = poller.PollUntilDone(ctx, nil)
	if err != nil {
		log.Fatalf("failed to pull the result: %v", err)
	}
}

// Generated from example definition: 2025-08-01/ServersStart.json
func ExampleServersClient_BeginStart() {
	cred, err := azidentity.NewDefaultAzureCredential(nil)
	if err != nil {
		log.Fatalf("failed to obtain a credential: %v", err)
	}
	ctx := context.Background()
	clientFactory, err := armpostgresql.NewClientFactory("ffffffff-ffff-ffff-ffff-ffffffffffff", cred, nil)
	if err != nil {
		log.Fatalf("failed to create client: %v", err)
	}
	poller, err := clientFactory.NewServersClient().BeginStart(ctx, "exampleresourcegroup", "exampleserver", nil)
	if err != nil {
		log.Fatalf("failed to finish the request: %v", err)
	}
	_, err = poller.PollUntilDone(ctx, nil)
	if err != nil {
		log.Fatalf("failed to pull the result: %v", err)
	}
}

// Generated from example definition: 2025-08-01/ServersStop.json
func ExampleServersClient_BeginStop() {
	cred, err := azidentity.NewDefaultAzureCredential(nil)
	if err != nil {
		log.Fatalf("failed to obtain a credential: %v", err)
	}
	ctx := context.Background()
	clientFactory, err := armpostgresql.NewClientFactory("ffffffff-ffff-ffff-ffff-ffffffffffff", cred, nil)
	if err != nil {
		log.Fatalf("failed to create client: %v", err)
	}
	poller, err := clientFactory.NewServersClient().BeginStop(ctx, "exampleresourcegroup", "exampleserver", nil)
	if err != nil {
		log.Fatalf("failed to finish the request: %v", err)
	}
	_, err = poller.PollUntilDone(ctx, nil)
	if err != nil {
		log.Fatalf("failed to pull the result: %v", err)
	}
}

// Generated from example definition: 2025-08-01/ServersPromoteReplicaAsForcedStandaloneServer.json
func ExampleServersClient_BeginUpdate_promoteAReadReplicaToAStandaloneServerWithForcedDataSynchronizationMeaningThatItDoesnTWaitForDataInTheReadReplicaToBeSynchronizedWithItsSourceServerBeforeItInitiatesThePromotionToAStandaloneServer() {
	cred, err := azidentity.NewDefaultAzureCredential(nil)
	if err != nil {
		log.Fatalf("failed to obtain a credential: %v", err)
	}
	ctx := context.Background()
	clientFactory, err := armpostgresql.NewClientFactory("ffffffff-ffff-ffff-ffff-ffffffffffff", cred, nil)
	if err != nil {
		log.Fatalf("failed to create client: %v", err)
	}
	poller, err := clientFactory.NewServersClient().BeginUpdate(ctx, "exampleresourcegroup", "exampleserver", armpostgresql.ServerForPatch{
		Properties: &armpostgresql.ServerPropertiesForPatch{
			Replica: &armpostgresql.Replica{
				PromoteMode:   to.Ptr(armpostgresql.ReadReplicaPromoteModeStandalone),
				PromoteOption: to.Ptr(armpostgresql.ReadReplicaPromoteOptionForced),
			},
		},
	}, nil)
	if err != nil {
		log.Fatalf("failed to finish the request: %v", err)
	}
	_, err = poller.PollUntilDone(ctx, nil)
	if err != nil {
		log.Fatalf("failed to pull the result: %v", err)
	}
}

// Generated from example definition: 2025-08-01/ServersPromoteReplicaAsForcedSwitchover.json
func ExampleServersClient_BeginUpdate_switchOverAReadReplicaToPrimaryServerWithForcedDataSynchronizationMeaningThatItDoesnTWaitForDataInTheReadReplicaToBeSynchronizedWithItsSourceServerBeforeItInitiatesTheSwitchingOfRolesBetweenTheReadReplicaAndThePrimaryServer() {
	cred, err := azidentity.NewDefaultAzureCredential(nil)
	if err != nil {
		log.Fatalf("failed to obtain a credential: %v", err)
	}
	ctx := context.Background()
	clientFactory, err := armpostgresql.NewClientFactory("ffffffff-ffff-ffff-ffff-ffffffffffff", cred, nil)
	if err != nil {
		log.Fatalf("failed to create client: %v", err)
	}
	poller, err := clientFactory.NewServersClient().BeginUpdate(ctx, "exampleresourcegroup", "exampleserver", armpostgresql.ServerForPatch{
		Properties: &armpostgresql.ServerPropertiesForPatch{
			Replica: &armpostgresql.Replica{
				PromoteMode:   to.Ptr(armpostgresql.ReadReplicaPromoteModeSwitchover),
				PromoteOption: to.Ptr(armpostgresql.ReadReplicaPromoteOptionForced),
			},
		},
	}, nil)
	if err != nil {
		log.Fatalf("failed to finish the request: %v", err)
	}
	_, err = poller.PollUntilDone(ctx, nil)
	if err != nil {
		log.Fatalf("failed to pull the result: %v", err)
	}
}

// Generated from example definition: 2025-08-01/ServersPromoteReplicaAsPlannedStandaloneServer.json
func ExampleServersClient_BeginUpdate_promoteAReadReplicaToAStandaloneServerWithPlannedDataSynchronizationMeaningThatItWaitsForDataInTheReadReplicaToBeFullySynchronizedWithItsSourceServerBeforeItInitiatesThePromotionToAStandaloneServer() {
	cred, err := azidentity.NewDefaultAzureCredential(nil)
	if err != nil {
		log.Fatalf("failed to obtain a credential: %v", err)
	}
	ctx := context.Background()
	clientFactory, err := armpostgresql.NewClientFactory("ffffffff-ffff-ffff-ffff-ffffffffffff", cred, nil)
	if err != nil {
		log.Fatalf("failed to create client: %v", err)
	}
	poller, err := clientFactory.NewServersClient().BeginUpdate(ctx, "exampleresourcegroup", "exampleserver", armpostgresql.ServerForPatch{
		Properties: &armpostgresql.ServerPropertiesForPatch{
			Replica: &armpostgresql.Replica{
				PromoteMode:   to.Ptr(armpostgresql.ReadReplicaPromoteModeStandalone),
				PromoteOption: to.Ptr(armpostgresql.ReadReplicaPromoteOptionPlanned),
			},
		},
	}, nil)
	if err != nil {
		log.Fatalf("failed to finish the request: %v", err)
	}
	_, err = poller.PollUntilDone(ctx, nil)
	if err != nil {
		log.Fatalf("failed to pull the result: %v", err)
	}
}

// Generated from example definition: 2025-08-01/ServersPromoteReplicaAsPlannedSwitchover.json
func ExampleServersClient_BeginUpdate_switchOverAReadReplicaToPrimaryServerWithPlannedDataSynchronizationMeaningThatItWaitsForDataInTheReadReplicaToBeFullySynchronizedWithItsSourceServerBeforeItInitiatesTheSwitchingOfRolesBetweenTheReadReplicaAndThePrimaryServer() {
	cred, err := azidentity.NewDefaultAzureCredential(nil)
	if err != nil {
		log.Fatalf("failed to obtain a credential: %v", err)
	}
	ctx := context.Background()
	clientFactory, err := armpostgresql.NewClientFactory("ffffffff-ffff-ffff-ffff-ffffffffffff", cred, nil)
	if err != nil {
		log.Fatalf("failed to create client: %v", err)
	}
	poller, err := clientFactory.NewServersClient().BeginUpdate(ctx, "exampleresourcegroup", "exampleserver", armpostgresql.ServerForPatch{
		Properties: &armpostgresql.ServerPropertiesForPatch{
			Replica: &armpostgresql.Replica{
				PromoteMode:   to.Ptr(armpostgresql.ReadReplicaPromoteModeSwitchover),
				PromoteOption: to.Ptr(armpostgresql.ReadReplicaPromoteOptionPlanned),
			},
		},
	}, nil)
	if err != nil {
		log.Fatalf("failed to finish the request: %v", err)
	}
	_, err = poller.PollUntilDone(ctx, nil)
	if err != nil {
		log.Fatalf("failed to pull the result: %v", err)
	}
}

// Generated from example definition: 2025-08-01/ServersUpdate.json
func ExampleServersClient_BeginUpdate_updateAnExistingServer() {
	cred, err := azidentity.NewDefaultAzureCredential(nil)
	if err != nil {
		log.Fatalf("failed to obtain a credential: %v", err)
	}
	ctx := context.Background()
	clientFactory, err := armpostgresql.NewClientFactory("ffffffff-ffff-ffff-ffff-ffffffffffff", cred, nil)
	if err != nil {
		log.Fatalf("failed to create client: %v", err)
	}
	poller, err := clientFactory.NewServersClient().BeginUpdate(ctx, "exampleresourcegroup", "exampleserver", armpostgresql.ServerForPatch{
		Properties: &armpostgresql.ServerPropertiesForPatch{
			AdministratorLoginPassword: to.Ptr("examplenewpassword"),
			Backup: &armpostgresql.BackupForPatch{
				BackupRetentionDays: to.Ptr[int32](20),
			},
			CreateMode: to.Ptr(armpostgresql.CreateModeForPatchUpdate),
			Storage: &armpostgresql.Storage{
				AutoGrow:      to.Ptr(armpostgresql.StorageAutoGrowEnabled),
				StorageSizeGB: to.Ptr[int32](1024),
				Tier:          to.Ptr(armpostgresql.AzureManagedDiskPerformanceTierP30),
			},
		},
		SKU: &armpostgresql.SKUForPatch{
			Name: to.Ptr("Standard_D8s_v3"),
			Tier: to.Ptr(armpostgresql.SKUTierGeneralPurpose),
		},
	}, nil)
	if err != nil {
		log.Fatalf("failed to finish the request: %v", err)
	}
	_, err = poller.PollUntilDone(ctx, nil)
	if err != nil {
		log.Fatalf("failed to pull the result: %v", err)
	}
}

// Generated from example definition: 2025-08-01/ServersUpdateWithCustomMaintenanceWindow.json
func ExampleServersClient_BeginUpdate_updateAnExistingServerWithCustomMaintenanceWindow() {
	cred, err := azidentity.NewDefaultAzureCredential(nil)
	if err != nil {
		log.Fatalf("failed to obtain a credential: %v", err)
	}
	ctx := context.Background()
	clientFactory, err := armpostgresql.NewClientFactory("ffffffff-ffff-ffff-ffff-ffffffffffff", cred, nil)
	if err != nil {
		log.Fatalf("failed to create client: %v", err)
	}
	poller, err := clientFactory.NewServersClient().BeginUpdate(ctx, "exampleresourcegroup", "exampleserver", armpostgresql.ServerForPatch{
		Properties: &armpostgresql.ServerPropertiesForPatch{
			CreateMode: to.Ptr(armpostgresql.CreateModeForPatchUpdate),
			MaintenanceWindow: &armpostgresql.MaintenanceWindowForPatch{
				CustomWindow: to.Ptr("Enabled"),
				DayOfWeek:    to.Ptr[int32](0),
				StartHour:    to.Ptr[int32](8),
				StartMinute:  to.Ptr[int32](0),
			},
		},
	}, nil)
	if err != nil {
		log.Fatalf("failed to finish the request: %v", err)
	}
	_, err = poller.PollUntilDone(ctx, nil)
	if err != nil {
		log.Fatalf("failed to pull the result: %v", err)
	}
}

// Generated from example definition: 2025-08-01/ServersUpdateWithDataEncryptionEnabled.json
func ExampleServersClient_BeginUpdate_updateAnExistingServerWithDataEncryptionBasedOnCustomerManagedKey() {
	cred, err := azidentity.NewDefaultAzureCredential(nil)
	if err != nil {
		log.Fatalf("failed to obtain a credential: %v", err)
	}
	ctx := context.Background()
	clientFactory, err := armpostgresql.NewClientFactory("ffffffff-ffff-ffff-ffff-ffffffffffff", cred, nil)
	if err != nil {
		log.Fatalf("failed to create client: %v", err)
	}
	poller, err := clientFactory.NewServersClient().BeginUpdate(ctx, "exampleresourcegroup", "exampleserver", armpostgresql.ServerForPatch{
		Identity: &armpostgresql.UserAssignedIdentity{
			Type: to.Ptr(armpostgresql.IdentityTypeUserAssigned),
			UserAssignedIdentities: map[string]*armpostgresql.UserIdentity{
				"/subscriptions/ffffffff-ffff-ffff-ffff-ffffffffffff/resourceGroups/exampleresourcegroup/providers/Microsoft.ManagedIdentity/userAssignedIdentities/examplegeoredundantidentity": {},
				"/subscriptions/ffffffff-ffff-ffff-ffff-ffffffffffff/resourceGroups/exampleresourcegroup/providers/Microsoft.ManagedIdentity/userAssignedIdentities/exampleprimaryidentity":      {},
			},
		},
		Properties: &armpostgresql.ServerPropertiesForPatch{
			AdministratorLoginPassword: to.Ptr("examplenewpassword"),
			Backup: &armpostgresql.BackupForPatch{
				BackupRetentionDays: to.Ptr[int32](20),
			},
			CreateMode: to.Ptr(armpostgresql.CreateModeForPatchUpdate),
			DataEncryption: &armpostgresql.DataEncryption{
				Type:                            to.Ptr(armpostgresql.DataEncryptionTypeAzureKeyVault),
				GeoBackupKeyURI:                 to.Ptr("https://examplegeoredundantkeyvault.vault.azure.net/keys/examplekey/yyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyy"),
				GeoBackupUserAssignedIdentityID: to.Ptr("/subscriptions/ffffffff-ffff-ffff-ffff-ffffffffffff/resourceGroups/exampleresourcegroup/providers/Microsoft.ManagedIdentity/userAssignedIdentities/examplegeoredundantidentity"),
				PrimaryKeyURI:                   to.Ptr("https://exampleprimarykeyvault.vault.azure.net/keys/examplekey/xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx"),
				PrimaryUserAssignedIdentityID:   to.Ptr("/subscriptions/ffffffff-ffff-ffff-ffff-ffffffffffff/resourceGroups/exampleresourcegroup/providers/Microsoft.ManagedIdentity/userAssignedIdentities/exampleprimaryidentity"),
			},
		},
		SKU: &armpostgresql.SKUForPatch{
			Name: to.Ptr("Standard_D8s_v3"),
			Tier: to.Ptr(armpostgresql.SKUTierGeneralPurpose),
		},
	}, nil)
	if err != nil {
		log.Fatalf("failed to finish the request: %v", err)
	}
	_, err = poller.PollUntilDone(ctx, nil)
	if err != nil {
		log.Fatalf("failed to pull the result: %v", err)
	}
}

// Generated from example definition: 2025-08-01/ServersUpdateWithDataEncryptionEnabledAutoUpdate.json
func ExampleServersClient_BeginUpdate_updateAnExistingServerWithDataEncryptionBasedOnCustomerManagedKeyWithAutomaticKeyVersionUpdate() {
	cred, err := azidentity.NewDefaultAzureCredential(nil)
	if err != nil {
		log.Fatalf("failed to obtain a credential: %v", err)
	}
	ctx := context.Background()
	clientFactory, err := armpostgresql.NewClientFactory("ffffffff-ffff-ffff-ffff-ffffffffffff", cred, nil)
	if err != nil {
		log.Fatalf("failed to create client: %v", err)
	}
	poller, err := clientFactory.NewServersClient().BeginUpdate(ctx, "exampleresourcegroup", "exampleserver", armpostgresql.ServerForPatch{
		Identity: &armpostgresql.UserAssignedIdentity{
			Type: to.Ptr(armpostgresql.IdentityTypeUserAssigned),
			UserAssignedIdentities: map[string]*armpostgresql.UserIdentity{
				"/subscriptions/ffffffff-ffff-ffff-ffff-ffffffffffff/resourceGroups/exampleresourcegroup/providers/Microsoft.ManagedIdentity/userAssignedIdentities/examplegeoredundantidentity": {},
				"/subscriptions/ffffffff-ffff-ffff-ffff-ffffffffffff/resourceGroups/exampleresourcegroup/providers/Microsoft.ManagedIdentity/userAssignedIdentities/exampleprimaryidentity":      {},
			},
		},
		Properties: &armpostgresql.ServerPropertiesForPatch{
			AdministratorLoginPassword: to.Ptr("examplenewpassword"),
			Backup: &armpostgresql.BackupForPatch{
				BackupRetentionDays: to.Ptr[int32](20),
			},
			CreateMode: to.Ptr(armpostgresql.CreateModeForPatchUpdate),
			DataEncryption: &armpostgresql.DataEncryption{
				Type:                            to.Ptr(armpostgresql.DataEncryptionTypeAzureKeyVault),
				GeoBackupKeyURI:                 to.Ptr("https://examplegeoredundantkeyvault.vault.azure.net/keys/examplekey"),
				GeoBackupUserAssignedIdentityID: to.Ptr("/subscriptions/ffffffff-ffff-ffff-ffff-ffffffffffff/resourceGroups/exampleresourcegroup/providers/Microsoft.ManagedIdentity/userAssignedIdentities/examplegeoredundantidentity"),
				PrimaryKeyURI:                   to.Ptr("https://exampleprimarykeyvault.vault.azure.net/keys/examplekey"),
				PrimaryUserAssignedIdentityID:   to.Ptr("/subscriptions/ffffffff-ffff-ffff-ffff-ffffffffffff/resourceGroups/exampleresourcegroup/providers/Microsoft.ManagedIdentity/userAssignedIdentities/exampleprimaryidentity"),
			},
		},
		SKU: &armpostgresql.SKUForPatch{
			Name: to.Ptr("Standard_D8s_v3"),
			Tier: to.Ptr(armpostgresql.SKUTierGeneralPurpose),
		},
	}, nil)
	if err != nil {
		log.Fatalf("failed to finish the request: %v", err)
	}
	_, err = poller.PollUntilDone(ctx, nil)
	if err != nil {
		log.Fatalf("failed to pull the result: %v", err)
	}
}

// Generated from example definition: 2025-08-01/ServersUpdateWithMajorVersionUpgrade.json
func ExampleServersClient_BeginUpdate_updateAnExistingServerToUpgradeTheMajorVersionOfPostgreSqlDatabaseEngine() {
	cred, err := azidentity.NewDefaultAzureCredential(nil)
	if err != nil {
		log.Fatalf("failed to obtain a credential: %v", err)
	}
	ctx := context.Background()
	clientFactory, err := armpostgresql.NewClientFactory("ffffffff-ffff-ffff-ffff-ffffffffffff", cred, nil)
	if err != nil {
		log.Fatalf("failed to create client: %v", err)
	}
	poller, err := clientFactory.NewServersClient().BeginUpdate(ctx, "exampleresourcegroup", "exampleserver", armpostgresql.ServerForPatch{
		Properties: &armpostgresql.ServerPropertiesForPatch{
			CreateMode: to.Ptr(armpostgresql.CreateModeForPatchUpdate),
			Version:    to.Ptr(armpostgresql.PostgresMajorVersion17),
		},
	}, nil)
	if err != nil {
		log.Fatalf("failed to finish the request: %v", err)
	}
	_, err = poller.PollUntilDone(ctx, nil)
	if err != nil {
		log.Fatalf("failed to pull the result: %v", err)
	}
}

// Generated from example definition: 2025-08-01/ServersUpdateWithMicrosoftEntraEnabled.json
func ExampleServersClient_BeginUpdate_updateAnExistingServerWithMicrosoftEntraAuthenticationEnabled() {
	cred, err := azidentity.NewDefaultAzureCredential(nil)
	if err != nil {
		log.Fatalf("failed to obtain a credential: %v", err)
	}
	ctx := context.Background()
	clientFactory, err := armpostgresql.NewClientFactory("ffffffff-ffff-ffff-ffff-ffffffffffff", cred, nil)
	if err != nil {
		log.Fatalf("failed to create client: %v", err)
	}
	poller, err := clientFactory.NewServersClient().BeginUpdate(ctx, "exampleresourcegroup", "exampleserver", armpostgresql.ServerForPatch{
		Properties: &armpostgresql.ServerPropertiesForPatch{
			AdministratorLoginPassword: to.Ptr("examplenewpassword"),
			AuthConfig: &armpostgresql.AuthConfigForPatch{
				ActiveDirectoryAuth: to.Ptr(armpostgresql.MicrosoftEntraAuthEnabled),
				PasswordAuth:        to.Ptr(armpostgresql.PasswordBasedAuthEnabled),
				TenantID:            to.Ptr("tttttt-tttt-tttt-tttt-tttttttttttt"),
			},
			Backup: &armpostgresql.BackupForPatch{
				BackupRetentionDays: to.Ptr[int32](20),
			},
			CreateMode: to.Ptr(armpostgresql.CreateModeForPatchUpdate),
			Storage: &armpostgresql.Storage{
				AutoGrow:      to.Ptr(armpostgresql.StorageAutoGrowDisabled),
				StorageSizeGB: to.Ptr[int32](1024),
				Tier:          to.Ptr(armpostgresql.AzureManagedDiskPerformanceTierP30),
			},
		},
		SKU: &armpostgresql.SKUForPatch{
			Name: to.Ptr("Standard_D8s_v3"),
			Tier: to.Ptr(armpostgresql.SKUTierGeneralPurpose),
		},
	}, nil)
	if err != nil {
		log.Fatalf("failed to finish the request: %v", err)
	}
	_, err = poller.PollUntilDone(ctx, nil)
	if err != nil {
		log.Fatalf("failed to pull the result: %v", err)
	}
}
