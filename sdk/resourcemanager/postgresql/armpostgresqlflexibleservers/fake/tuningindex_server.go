// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator. DO NOT EDIT.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

package fake

import (
	"errors"
	"fmt"
	azfake "github.com/Azure/azure-sdk-for-go/sdk/azcore/fake"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/fake/server"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/runtime"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/to"
	"github.com/Azure/azure-sdk-for-go/sdk/resourcemanager/postgresql/armpostgresqlflexibleservers/v5"
	"net/http"
	"net/url"
	"regexp"
)

// TuningIndexServer is a fake server for instances of the armpostgresqlflexibleservers.TuningIndexClient type.
type TuningIndexServer struct {
	// NewListRecommendationsPager is the fake for method TuningIndexClient.NewListRecommendationsPager
	// HTTP status codes to indicate success: http.StatusOK
	NewListRecommendationsPager func(resourceGroupName string, serverName string, tuningOption armpostgresqlflexibleservers.TuningOptionEnum, options *armpostgresqlflexibleservers.TuningIndexClientListRecommendationsOptions) (resp azfake.PagerResponder[armpostgresqlflexibleservers.TuningIndexClientListRecommendationsResponse])
}

// NewTuningIndexServerTransport creates a new instance of TuningIndexServerTransport with the provided implementation.
// The returned TuningIndexServerTransport instance is connected to an instance of armpostgresqlflexibleservers.TuningIndexClient via the
// azcore.ClientOptions.Transporter field in the client's constructor parameters.
func NewTuningIndexServerTransport(srv *TuningIndexServer) *TuningIndexServerTransport {
	return &TuningIndexServerTransport{
		srv:                         srv,
		newListRecommendationsPager: newTracker[azfake.PagerResponder[armpostgresqlflexibleservers.TuningIndexClientListRecommendationsResponse]](),
	}
}

// TuningIndexServerTransport connects instances of armpostgresqlflexibleservers.TuningIndexClient to instances of TuningIndexServer.
// Don't use this type directly, use NewTuningIndexServerTransport instead.
type TuningIndexServerTransport struct {
	srv                         *TuningIndexServer
	newListRecommendationsPager *tracker[azfake.PagerResponder[armpostgresqlflexibleservers.TuningIndexClientListRecommendationsResponse]]
}

// Do implements the policy.Transporter interface for TuningIndexServerTransport.
func (t *TuningIndexServerTransport) Do(req *http.Request) (*http.Response, error) {
	rawMethod := req.Context().Value(runtime.CtxAPINameKey{})
	method, ok := rawMethod.(string)
	if !ok {
		return nil, nonRetriableError{errors.New("unable to dispatch request, missing value for CtxAPINameKey")}
	}

	return t.dispatchToMethodFake(req, method)
}

func (t *TuningIndexServerTransport) dispatchToMethodFake(req *http.Request, method string) (*http.Response, error) {
	resultChan := make(chan result)
	defer close(resultChan)

	go func() {
		var intercepted bool
		var res result
		if tuningIndexServerTransportInterceptor != nil {
			res.resp, res.err, intercepted = tuningIndexServerTransportInterceptor.Do(req)
		}
		if !intercepted {
			switch method {
			case "TuningIndexClient.NewListRecommendationsPager":
				res.resp, res.err = t.dispatchNewListRecommendationsPager(req)
			default:
				res.err = fmt.Errorf("unhandled API %s", method)
			}

		}
		select {
		case resultChan <- res:
		case <-req.Context().Done():
		}
	}()

	select {
	case <-req.Context().Done():
		return nil, req.Context().Err()
	case res := <-resultChan:
		return res.resp, res.err
	}
}

func (t *TuningIndexServerTransport) dispatchNewListRecommendationsPager(req *http.Request) (*http.Response, error) {
	if t.srv.NewListRecommendationsPager == nil {
		return nil, &nonRetriableError{errors.New("fake for method NewListRecommendationsPager not implemented")}
	}
	newListRecommendationsPager := t.newListRecommendationsPager.get(req)
	if newListRecommendationsPager == nil {
		const regexStr = `/subscriptions/(?P<subscriptionId>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/resourceGroups/(?P<resourceGroupName>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/providers/Microsoft\.DBforPostgreSQL/flexibleServers/(?P<serverName>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/tuningOptions/(?P<tuningOption>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/recommendations`
		regex := regexp.MustCompile(regexStr)
		matches := regex.FindStringSubmatch(req.URL.EscapedPath())
		if matches == nil || len(matches) < 4 {
			return nil, fmt.Errorf("failed to parse path %s", req.URL.Path)
		}
		qp := req.URL.Query()
		resourceGroupNameParam, err := url.PathUnescape(matches[regex.SubexpIndex("resourceGroupName")])
		if err != nil {
			return nil, err
		}
		serverNameParam, err := url.PathUnescape(matches[regex.SubexpIndex("serverName")])
		if err != nil {
			return nil, err
		}
		tuningOptionParam, err := parseWithCast(matches[regex.SubexpIndex("tuningOption")], func(v string) (armpostgresqlflexibleservers.TuningOptionEnum, error) {
			p, unescapeErr := url.PathUnescape(v)
			if unescapeErr != nil {
				return "", unescapeErr
			}
			return armpostgresqlflexibleservers.TuningOptionEnum(p), nil
		})
		if err != nil {
			return nil, err
		}
		recommendationTypeUnescaped, err := url.QueryUnescape(qp.Get("recommendationType"))
		if err != nil {
			return nil, err
		}
		recommendationTypeParam := getOptional(armpostgresqlflexibleservers.RecommendationType(recommendationTypeUnescaped))
		var options *armpostgresqlflexibleservers.TuningIndexClientListRecommendationsOptions
		if recommendationTypeParam != nil {
			options = &armpostgresqlflexibleservers.TuningIndexClientListRecommendationsOptions{
				RecommendationType: recommendationTypeParam,
			}
		}
		resp := t.srv.NewListRecommendationsPager(resourceGroupNameParam, serverNameParam, tuningOptionParam, options)
		newListRecommendationsPager = &resp
		t.newListRecommendationsPager.add(req, newListRecommendationsPager)
		server.PagerResponderInjectNextLinks(newListRecommendationsPager, req, func(page *armpostgresqlflexibleservers.TuningIndexClientListRecommendationsResponse, createLink func() string) {
			page.NextLink = to.Ptr(createLink())
		})
	}
	resp, err := server.PagerResponderNext(newListRecommendationsPager, req)
	if err != nil {
		return nil, err
	}
	if !contains([]int{http.StatusOK}, resp.StatusCode) {
		t.newListRecommendationsPager.remove(req)
		return nil, &nonRetriableError{fmt.Errorf("unexpected status code %d. acceptable values are http.StatusOK", resp.StatusCode)}
	}
	if !server.PagerResponderMore(newListRecommendationsPager) {
		t.newListRecommendationsPager.remove(req)
	}
	return resp, nil
}

// set this to conditionally intercept incoming requests to TuningIndexServerTransport
var tuningIndexServerTransportInterceptor interface {
	// Do returns true if the server transport should use the returned response/error
	Do(*http.Request) (*http.Response, error, bool)
}
