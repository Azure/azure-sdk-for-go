//go:build go1.16
// +build go1.16

// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

package armpostgresqlhsc

import (
	"encoding/json"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore"
	"reflect"
	"time"
)

// CloudError - An error response from the Batch service.
// Implements the error and azcore.HTTPResponse interfaces.
type CloudError struct {
	raw string
	// The error.
	InnerError *CloudErrorBody `json:"error,omitempty"`
}

// Error implements the error interface for type CloudError.
// The contents of the error text are not contractual and subject to change.
func (e CloudError) Error() string {
	return e.raw
}

// CloudErrorBody - An error response from the Batch service.
type CloudErrorBody struct {
	// An identifier for the error. Codes are invariant and are intended to be consumed programmatically.
	Code *string `json:"code,omitempty"`

	// A list of additional details about the error.
	Details []*CloudErrorBody `json:"details,omitempty"`

	// A message describing the error, intended to be suitable for display in a user interface.
	Message *string `json:"message,omitempty"`

	// The target of the particular error. For example, the name of the property in error.
	Target *string `json:"target,omitempty"`
}

// MarshalJSON implements the json.Marshaller interface for type CloudErrorBody.
func (c CloudErrorBody) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "code", c.Code)
	populate(objectMap, "details", c.Details)
	populate(objectMap, "message", c.Message)
	populate(objectMap, "target", c.Target)
	return json.Marshal(objectMap)
}

// ConfigurationsBeginUpdateOptions contains the optional parameters for the Configurations.BeginUpdate method.
type ConfigurationsBeginUpdateOptions struct {
	// placeholder for future optional parameters
}

// ConfigurationsGetOptions contains the optional parameters for the Configurations.Get method.
type ConfigurationsGetOptions struct {
	// placeholder for future optional parameters
}

// ConfigurationsListByServerGroupOptions contains the optional parameters for the Configurations.ListByServerGroup method.
type ConfigurationsListByServerGroupOptions struct {
	// placeholder for future optional parameters
}

// ConfigurationsListByServerOptions contains the optional parameters for the Configurations.ListByServer method.
type ConfigurationsListByServerOptions struct {
	// placeholder for future optional parameters
}

// FirewallRule - Represents a server group firewall rule.
type FirewallRule struct {
	ProxyResource
	// REQUIRED; The properties of a firewall rule.
	Properties *FirewallRuleProperties `json:"properties,omitempty"`

	// READ-ONLY; The system metadata relating to this resource
	SystemData *SystemData `json:"systemData,omitempty" azure:"ro"`
}

// MarshalJSON implements the json.Marshaller interface for type FirewallRule.
func (f FirewallRule) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	f.ProxyResource.marshalInternal(objectMap)
	populate(objectMap, "properties", f.Properties)
	populate(objectMap, "systemData", f.SystemData)
	return json.Marshal(objectMap)
}

// FirewallRuleListResult - A list of firewall rules.
type FirewallRuleListResult struct {
	// The list of firewall rules in a server group.
	Value []*FirewallRule `json:"value,omitempty"`
}

// MarshalJSON implements the json.Marshaller interface for type FirewallRuleListResult.
func (f FirewallRuleListResult) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "value", f.Value)
	return json.Marshal(objectMap)
}

// FirewallRuleProperties - The properties of a server group firewall rule.
type FirewallRuleProperties struct {
	// REQUIRED; The end IP address of the server group firewall rule. Must be IPv4 format.
	EndIPAddress *string `json:"endIpAddress,omitempty"`

	// REQUIRED; The start IP address of the server group firewall rule. Must be IPv4 format.
	StartIPAddress *string `json:"startIpAddress,omitempty"`
}

// FirewallRulesBeginCreateOrUpdateOptions contains the optional parameters for the FirewallRules.BeginCreateOrUpdate method.
type FirewallRulesBeginCreateOrUpdateOptions struct {
	// placeholder for future optional parameters
}

// FirewallRulesBeginDeleteOptions contains the optional parameters for the FirewallRules.BeginDelete method.
type FirewallRulesBeginDeleteOptions struct {
	// placeholder for future optional parameters
}

// FirewallRulesGetOptions contains the optional parameters for the FirewallRules.Get method.
type FirewallRulesGetOptions struct {
	// placeholder for future optional parameters
}

// FirewallRulesListByServerGroupOptions contains the optional parameters for the FirewallRules.ListByServerGroup method.
type FirewallRulesListByServerGroupOptions struct {
	// placeholder for future optional parameters
}

// MaintenanceWindow - Maintenance window of a server group.
type MaintenanceWindow struct {
	// indicates whether custom window is enabled or disabled
	CustomWindow *string `json:"customWindow,omitempty"`

	// day of week for maintenance window
	DayOfWeek *int32 `json:"dayOfWeek,omitempty"`

	// start hour for maintenance window
	StartHour *int32 `json:"startHour,omitempty"`

	// start minute for maintenance window
	StartMinute *int32 `json:"startMinute,omitempty"`
}

// NameAvailability - Represents a resource name availability.
type NameAvailability struct {
	// Error Message.
	Message *string `json:"message,omitempty"`

	// name of the PostgreSQL server.
	Name *string `json:"name,omitempty"`

	// Indicates whether the resource name is available.
	NameAvailable *bool `json:"nameAvailable,omitempty"`

	// type of the server
	Type *string `json:"type,omitempty"`
}

// NameAvailabilityRequest - Request from client to check resource name availability.
type NameAvailabilityRequest struct {
	// REQUIRED; Resource name to verify.
	Name *string `json:"name,omitempty"`

	// REQUIRED; Resource type used for verification.
	Type *string `json:"type,omitempty"`
}

// Operation - REST API operation definition.
type Operation struct {
	// Indicates whether the operation is a data action
	IsDataAction *bool `json:"isDataAction,omitempty"`

	// READ-ONLY; The localized display information for this particular operation or action.
	Display *OperationDisplay `json:"display,omitempty" azure:"ro"`

	// READ-ONLY; The name of the operation being performed on this particular object.
	Name *string `json:"name,omitempty" azure:"ro"`

	// READ-ONLY; The intended executor of the operation.
	Origin *OperationOrigin `json:"origin,omitempty" azure:"ro"`

	// READ-ONLY; Additional descriptions for the operation.
	Properties map[string]map[string]interface{} `json:"properties,omitempty" azure:"ro"`
}

// MarshalJSON implements the json.Marshaller interface for type Operation.
func (o Operation) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "display", o.Display)
	populate(objectMap, "isDataAction", o.IsDataAction)
	populate(objectMap, "name", o.Name)
	populate(objectMap, "origin", o.Origin)
	populate(objectMap, "properties", o.Properties)
	return json.Marshal(objectMap)
}

// OperationDisplay - Display metadata associated with the operation.
type OperationDisplay struct {
	// READ-ONLY; Operation description.
	Description *string `json:"description,omitempty" azure:"ro"`

	// READ-ONLY; Localized friendly name for the operation.
	Operation *string `json:"operation,omitempty" azure:"ro"`

	// READ-ONLY; Operation resource provider name.
	Provider *string `json:"provider,omitempty" azure:"ro"`

	// READ-ONLY; Resource on which the operation is performed.
	Resource *string `json:"resource,omitempty" azure:"ro"`
}

// OperationListResult - A list of resource provider operations.
type OperationListResult struct {
	// Collection of available operation details
	Value []*Operation `json:"value,omitempty"`

	// READ-ONLY; URL client should use to fetch the next page (per server side paging). It's null for now, added for future use.
	NextLink *string `json:"nextLink,omitempty" azure:"ro"`
}

// MarshalJSON implements the json.Marshaller interface for type OperationListResult.
func (o OperationListResult) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "nextLink", o.NextLink)
	populate(objectMap, "value", o.Value)
	return json.Marshal(objectMap)
}

// OperationsListOptions contains the optional parameters for the Operations.List method.
type OperationsListOptions struct {
	// placeholder for future optional parameters
}

// ProxyResource - The resource model definition for a Azure Resource Manager proxy resource. It will not have tags and a location
type ProxyResource struct {
	Resource
}

func (p ProxyResource) marshalInternal(objectMap map[string]interface{}) {
	p.Resource.marshalInternal(objectMap)
}

// Resource - Common fields that are returned in the response for all Azure Resource Manager resources
type Resource struct {
	// READ-ONLY; Fully qualified resource ID for the resource. Ex - /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}
	ID *string `json:"id,omitempty" azure:"ro"`

	// READ-ONLY; The name of the resource
	Name *string `json:"name,omitempty" azure:"ro"`

	// READ-ONLY; The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or "Microsoft.Storage/storageAccounts"
	Type *string `json:"type,omitempty" azure:"ro"`
}

// MarshalJSON implements the json.Marshaller interface for type Resource.
func (r Resource) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	r.marshalInternal(objectMap)
	return json.Marshal(objectMap)
}

func (r Resource) marshalInternal(objectMap map[string]interface{}) {
	populate(objectMap, "id", r.ID)
	populate(objectMap, "name", r.Name)
	populate(objectMap, "type", r.Type)
}

// Role - Represents a server group role.
type Role struct {
	ProxyResource
	// The properties of a role.
	Properties *RoleProperties `json:"properties,omitempty"`

	// READ-ONLY; The system metadata relating to this resource
	SystemData *SystemData `json:"systemData,omitempty" azure:"ro"`
}

// MarshalJSON implements the json.Marshaller interface for type Role.
func (r Role) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	r.ProxyResource.marshalInternal(objectMap)
	populate(objectMap, "properties", r.Properties)
	populate(objectMap, "systemData", r.SystemData)
	return json.Marshal(objectMap)
}

// RoleListResult - A list of roles.
type RoleListResult struct {
	// The list of roles in a server group.
	Value []*Role `json:"value,omitempty"`
}

// MarshalJSON implements the json.Marshaller interface for type RoleListResult.
func (r RoleListResult) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "value", r.Value)
	return json.Marshal(objectMap)
}

// RoleProperties - The properties of a server group role.
type RoleProperties struct {
	// REQUIRED; The password of the server group role.
	Password *string `json:"password,omitempty"`
}

// RolesBeginCreateOptions contains the optional parameters for the Roles.BeginCreate method.
type RolesBeginCreateOptions struct {
	// placeholder for future optional parameters
}

// RolesBeginDeleteOptions contains the optional parameters for the Roles.BeginDelete method.
type RolesBeginDeleteOptions struct {
	// placeholder for future optional parameters
}

// RolesListByServerGroupOptions contains the optional parameters for the Roles.ListByServerGroup method.
type RolesListByServerGroupOptions struct {
	// placeholder for future optional parameters
}

// ServerConfiguration - Represents a configuration.
type ServerConfiguration struct {
	ProxyResource
	// The properties of a configuration.
	Properties *ServerConfigurationProperties `json:"properties,omitempty"`

	// READ-ONLY; The system metadata relating to this resource
	SystemData *SystemData `json:"systemData,omitempty" azure:"ro"`
}

// MarshalJSON implements the json.Marshaller interface for type ServerConfiguration.
func (s ServerConfiguration) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	s.ProxyResource.marshalInternal(objectMap)
	populate(objectMap, "properties", s.Properties)
	populate(objectMap, "systemData", s.SystemData)
	return json.Marshal(objectMap)
}

// ServerConfigurationListResult - A list of server configurations.
type ServerConfigurationListResult struct {
	// The list of server configurations.
	Value []*ServerConfiguration `json:"value,omitempty"`

	// READ-ONLY; Link to retrieve next page of results.
	NextLink *string `json:"nextLink,omitempty" azure:"ro"`
}

// MarshalJSON implements the json.Marshaller interface for type ServerConfigurationListResult.
func (s ServerConfigurationListResult) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "nextLink", s.NextLink)
	populate(objectMap, "value", s.Value)
	return json.Marshal(objectMap)
}

// ServerConfigurationProperties - The properties of a configuration.
type ServerConfigurationProperties struct {
	// REQUIRED; Value of the configuration.
	Value *string `json:"value,omitempty"`

	// READ-ONLY; Allowed values of the configuration.
	AllowedValues *string `json:"allowedValues,omitempty" azure:"ro"`

	// READ-ONLY; Data type of the configuration.
	DataType *ConfigurationDataType `json:"dataType,omitempty" azure:"ro"`

	// READ-ONLY; Default value of the configuration.
	DefaultValue *string `json:"defaultValue,omitempty" azure:"ro"`

	// READ-ONLY; Description of the configuration.
	Description *string `json:"description,omitempty" azure:"ro"`

	// READ-ONLY; Source of the configuration.
	Source *string `json:"source,omitempty" azure:"ro"`
}

// ServerGroup - Represents a server group for create.
type ServerGroup struct {
	TrackedResource
	// Properties of the server group create.
	Properties *ServerGroupProperties `json:"properties,omitempty"`

	// READ-ONLY; The system metadata relating to this resource
	SystemData *SystemData `json:"systemData,omitempty" azure:"ro"`
}

// MarshalJSON implements the json.Marshaller interface for type ServerGroup.
func (s ServerGroup) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	s.TrackedResource.marshalInternal(objectMap)
	populate(objectMap, "properties", s.Properties)
	populate(objectMap, "systemData", s.SystemData)
	return json.Marshal(objectMap)
}

// ServerGroupConfiguration - Represents the configuration list of server role groups in a server group.
type ServerGroupConfiguration struct {
	ProxyResource
	// The properties of server group configuration.
	Properties *ServerGroupConfigurationProperties `json:"properties,omitempty"`

	// READ-ONLY; The system metadata relating to this resource
	SystemData *SystemData `json:"systemData,omitempty" azure:"ro"`
}

// MarshalJSON implements the json.Marshaller interface for type ServerGroupConfiguration.
func (s ServerGroupConfiguration) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	s.ProxyResource.marshalInternal(objectMap)
	populate(objectMap, "properties", s.Properties)
	populate(objectMap, "systemData", s.SystemData)
	return json.Marshal(objectMap)
}

// ServerGroupConfigurationListResult - A list of server group configurations.
type ServerGroupConfigurationListResult struct {
	// The list of server group configurations.
	Value []*ServerGroupConfiguration `json:"value,omitempty"`

	// READ-ONLY; Link to retrieve next page of results.
	NextLink *string `json:"nextLink,omitempty" azure:"ro"`
}

// MarshalJSON implements the json.Marshaller interface for type ServerGroupConfigurationListResult.
func (s ServerGroupConfigurationListResult) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "nextLink", s.NextLink)
	populate(objectMap, "value", s.Value)
	return json.Marshal(objectMap)
}

// ServerGroupConfigurationProperties - The properties of server group configuration.
type ServerGroupConfigurationProperties struct {
	// REQUIRED; The list of server role group configuration values.
	ServerRoleGroupConfigurations []*ServerRoleGroupConfiguration `json:"serverRoleGroupConfigurations,omitempty"`

	// READ-ONLY; Allowed values of the configuration.
	AllowedValues *string `json:"allowedValues,omitempty" azure:"ro"`

	// READ-ONLY; Data type of the configuration.
	DataType *ConfigurationDataType `json:"dataType,omitempty" azure:"ro"`

	// READ-ONLY; Description of the configuration.
	Description *string `json:"description,omitempty" azure:"ro"`
}

// MarshalJSON implements the json.Marshaller interface for type ServerGroupConfigurationProperties.
func (s ServerGroupConfigurationProperties) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "allowedValues", s.AllowedValues)
	populate(objectMap, "dataType", s.DataType)
	populate(objectMap, "description", s.Description)
	populate(objectMap, "serverRoleGroupConfigurations", s.ServerRoleGroupConfigurations)
	return json.Marshal(objectMap)
}

// ServerGroupForUpdate - Represents a server group for update.
type ServerGroupForUpdate struct {
	// The location the resource resides in.
	Location *string `json:"location,omitempty"`

	// Properties of the server group.
	Properties *ServerGroupPropertiesForUpdate `json:"properties,omitempty"`

	// Application-specific metadata in the form of key-value pairs.
	Tags map[string]*string `json:"tags,omitempty"`
}

// MarshalJSON implements the json.Marshaller interface for type ServerGroupForUpdate.
func (s ServerGroupForUpdate) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "location", s.Location)
	populate(objectMap, "properties", s.Properties)
	populate(objectMap, "tags", s.Tags)
	return json.Marshal(objectMap)
}

// ServerGroupListResult - A list of server groups.
type ServerGroupListResult struct {
	// The list of server groups
	Value []*ServerGroup `json:"value,omitempty"`

	// READ-ONLY; The link used to get the next page of operations.
	NextLink *string `json:"nextLink,omitempty" azure:"ro"`
}

// MarshalJSON implements the json.Marshaller interface for type ServerGroupListResult.
func (s ServerGroupListResult) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "nextLink", s.NextLink)
	populate(objectMap, "value", s.Value)
	return json.Marshal(objectMap)
}

// ServerGroupProperties - The properties used to create a new server group.
type ServerGroupProperties struct {
	// The administrator's login name of servers in server group. Can only be specified when the server is being created (and is required for creation).
	AdministratorLogin *string `json:"administratorLogin,omitempty"`

	// The password of the administrator login.
	AdministratorLoginPassword *string `json:"administratorLoginPassword,omitempty"`

	// Availability Zone information of the server group.
	AvailabilityZone *string `json:"availabilityZone,omitempty"`

	// The backup retention days for server group.
	BackupRetentionDays *int32 `json:"backupRetentionDays,omitempty"`

	// The Citus version of server group.
	CitusVersion *CitusVersion `json:"citusVersion,omitempty"`

	// The mode to create a new server group.
	CreateMode *CreateMode `json:"createMode,omitempty"`

	// The delegated subnet arguments for a server group.
	DelegatedSubnetArguments *ServerGroupPropertiesDelegatedSubnetArguments `json:"delegatedSubnetArguments,omitempty"`

	// If Citus MX is enabled or not for the server group.
	EnableMx *bool `json:"enableMx,omitempty"`

	// If shards on coordinator is enabled or not for the server group.
	EnableShardsOnCoordinator *bool `json:"enableShardsOnCoordinator,omitempty"`

	// If ZFS compression is enabled or not for the server group.
	EnableZfs *bool `json:"enableZfs,omitempty"`

	// Maintenance window of a server group.
	MaintenanceWindow *MaintenanceWindow `json:"maintenanceWindow,omitempty"`

	// Restore point creation time (ISO8601 format), specifying the time to restore from. It's required when 'createMode' is 'PointInTimeRestore'
	PointInTimeUTC *time.Time `json:"pointInTimeUTC,omitempty"`

	// The PostgreSQL version of server group.
	PostgresqlVersion *PostgreSQLVersion `json:"postgresqlVersion,omitempty"`

	// The private dns zone arguments for a server group.
	PrivateDNSZoneArguments *ServerGroupPropertiesPrivateDNSZoneArguments `json:"privateDnsZoneArguments,omitempty"`

	// The list of server role groups.
	ServerRoleGroups []*ServerRoleGroup `json:"serverRoleGroups,omitempty"`

	// The source server group location to restore from. It's required when 'createMode' is 'PointInTimeRestore' or 'ReadReplica'
	SourceLocation *string `json:"sourceLocation,omitempty"`

	// The source resource group name to restore from. It's required when 'createMode' is 'PointInTimeRestore' or 'ReadReplica'
	SourceResourceGroupName *string `json:"sourceResourceGroupName,omitempty"`

	// The source server group name to restore from. It's required when 'createMode' is 'PointInTimeRestore' or 'ReadReplica'
	SourceServerGroupName *string `json:"sourceServerGroupName,omitempty"`

	// The source subscription id to restore from. It's required when 'createMode' is 'PointInTimeRestore' or 'ReadReplica'
	SourceSubscriptionID *string `json:"sourceSubscriptionId,omitempty"`

	// Standby Availability Zone information of the server group.
	StandbyAvailabilityZone *string `json:"standbyAvailabilityZone,omitempty"`

	// READ-ONLY; The earliest restore point time (ISO8601 format) for server group.
	EarliestRestoreTime *time.Time `json:"earliestRestoreTime,omitempty" azure:"ro"`

	// READ-ONLY; The array of read replica server groups.
	ReadReplicas []*string `json:"readReplicas,omitempty" azure:"ro"`

	// READ-ONLY; The resource provider type of server group.
	ResourceProviderType *ResourceProviderType `json:"resourceProviderType,omitempty" azure:"ro"`

	// READ-ONLY; The source server group id for read replica server groups.
	SourceServerGroup *string `json:"sourceServerGroup,omitempty" azure:"ro"`

	// READ-ONLY; A state of a server group that is visible to user.
	State *ServerState `json:"state,omitempty" azure:"ro"`
}

// MarshalJSON implements the json.Marshaller interface for type ServerGroupProperties.
func (s ServerGroupProperties) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "administratorLogin", s.AdministratorLogin)
	populate(objectMap, "administratorLoginPassword", s.AdministratorLoginPassword)
	populate(objectMap, "availabilityZone", s.AvailabilityZone)
	populate(objectMap, "backupRetentionDays", s.BackupRetentionDays)
	populate(objectMap, "citusVersion", s.CitusVersion)
	populate(objectMap, "createMode", s.CreateMode)
	populate(objectMap, "delegatedSubnetArguments", s.DelegatedSubnetArguments)
	populateTimeRFC3339(objectMap, "earliestRestoreTime", s.EarliestRestoreTime)
	populate(objectMap, "enableMx", s.EnableMx)
	populate(objectMap, "enableShardsOnCoordinator", s.EnableShardsOnCoordinator)
	populate(objectMap, "enableZfs", s.EnableZfs)
	populate(objectMap, "maintenanceWindow", s.MaintenanceWindow)
	populateTimeRFC3339(objectMap, "pointInTimeUTC", s.PointInTimeUTC)
	populate(objectMap, "postgresqlVersion", s.PostgresqlVersion)
	populate(objectMap, "privateDnsZoneArguments", s.PrivateDNSZoneArguments)
	populate(objectMap, "readReplicas", s.ReadReplicas)
	populate(objectMap, "resourceProviderType", s.ResourceProviderType)
	populate(objectMap, "serverRoleGroups", s.ServerRoleGroups)
	populate(objectMap, "sourceLocation", s.SourceLocation)
	populate(objectMap, "sourceResourceGroupName", s.SourceResourceGroupName)
	populate(objectMap, "sourceServerGroup", s.SourceServerGroup)
	populate(objectMap, "sourceServerGroupName", s.SourceServerGroupName)
	populate(objectMap, "sourceSubscriptionId", s.SourceSubscriptionID)
	populate(objectMap, "standbyAvailabilityZone", s.StandbyAvailabilityZone)
	populate(objectMap, "state", s.State)
	return json.Marshal(objectMap)
}

// UnmarshalJSON implements the json.Unmarshaller interface for type ServerGroupProperties.
func (s *ServerGroupProperties) UnmarshalJSON(data []byte) error {
	var rawMsg map[string]json.RawMessage
	if err := json.Unmarshal(data, &rawMsg); err != nil {
		return err
	}
	for key, val := range rawMsg {
		var err error
		switch key {
		case "administratorLogin":
			err = unpopulate(val, &s.AdministratorLogin)
			delete(rawMsg, key)
		case "administratorLoginPassword":
			err = unpopulate(val, &s.AdministratorLoginPassword)
			delete(rawMsg, key)
		case "availabilityZone":
			err = unpopulate(val, &s.AvailabilityZone)
			delete(rawMsg, key)
		case "backupRetentionDays":
			err = unpopulate(val, &s.BackupRetentionDays)
			delete(rawMsg, key)
		case "citusVersion":
			err = unpopulate(val, &s.CitusVersion)
			delete(rawMsg, key)
		case "createMode":
			err = unpopulate(val, &s.CreateMode)
			delete(rawMsg, key)
		case "delegatedSubnetArguments":
			err = unpopulate(val, &s.DelegatedSubnetArguments)
			delete(rawMsg, key)
		case "earliestRestoreTime":
			err = unpopulateTimeRFC3339(val, &s.EarliestRestoreTime)
			delete(rawMsg, key)
		case "enableMx":
			err = unpopulate(val, &s.EnableMx)
			delete(rawMsg, key)
		case "enableShardsOnCoordinator":
			err = unpopulate(val, &s.EnableShardsOnCoordinator)
			delete(rawMsg, key)
		case "enableZfs":
			err = unpopulate(val, &s.EnableZfs)
			delete(rawMsg, key)
		case "maintenanceWindow":
			err = unpopulate(val, &s.MaintenanceWindow)
			delete(rawMsg, key)
		case "pointInTimeUTC":
			err = unpopulateTimeRFC3339(val, &s.PointInTimeUTC)
			delete(rawMsg, key)
		case "postgresqlVersion":
			err = unpopulate(val, &s.PostgresqlVersion)
			delete(rawMsg, key)
		case "privateDnsZoneArguments":
			err = unpopulate(val, &s.PrivateDNSZoneArguments)
			delete(rawMsg, key)
		case "readReplicas":
			err = unpopulate(val, &s.ReadReplicas)
			delete(rawMsg, key)
		case "resourceProviderType":
			err = unpopulate(val, &s.ResourceProviderType)
			delete(rawMsg, key)
		case "serverRoleGroups":
			err = unpopulate(val, &s.ServerRoleGroups)
			delete(rawMsg, key)
		case "sourceLocation":
			err = unpopulate(val, &s.SourceLocation)
			delete(rawMsg, key)
		case "sourceResourceGroupName":
			err = unpopulate(val, &s.SourceResourceGroupName)
			delete(rawMsg, key)
		case "sourceServerGroup":
			err = unpopulate(val, &s.SourceServerGroup)
			delete(rawMsg, key)
		case "sourceServerGroupName":
			err = unpopulate(val, &s.SourceServerGroupName)
			delete(rawMsg, key)
		case "sourceSubscriptionId":
			err = unpopulate(val, &s.SourceSubscriptionID)
			delete(rawMsg, key)
		case "standbyAvailabilityZone":
			err = unpopulate(val, &s.StandbyAvailabilityZone)
			delete(rawMsg, key)
		case "state":
			err = unpopulate(val, &s.State)
			delete(rawMsg, key)
		}
		if err != nil {
			return err
		}
	}
	return nil
}

// ServerGroupPropertiesDelegatedSubnetArguments - The delegated subnet arguments for a server group.
type ServerGroupPropertiesDelegatedSubnetArguments struct {
	// delegated subnet arm resource id.
	SubnetArmResourceID *string `json:"subnetArmResourceId,omitempty"`
}

// ServerGroupPropertiesForUpdate - The properties used to update a server group.
type ServerGroupPropertiesForUpdate struct {
	// The password of the administrator login.
	AdministratorLoginPassword *string `json:"administratorLoginPassword,omitempty"`

	// Availability Zone information of the server group.
	AvailabilityZone *string `json:"availabilityZone,omitempty"`

	// The backup retention days for server group.
	BackupRetentionDays *int32 `json:"backupRetentionDays,omitempty"`

	// The Citus version of server group.
	CitusVersion *CitusVersion `json:"citusVersion,omitempty"`

	// If shards on coordinator is enabled or not for the server group.
	EnableShardsOnCoordinator *bool `json:"enableShardsOnCoordinator,omitempty"`

	// Maintenance window of a server group.
	MaintenanceWindow *MaintenanceWindow `json:"maintenanceWindow,omitempty"`

	// The PostgreSQL version of server group.
	PostgresqlVersion *PostgreSQLVersion `json:"postgresqlVersion,omitempty"`

	// The list of server role groups.
	ServerRoleGroups []*ServerRoleGroup `json:"serverRoleGroups,omitempty"`

	// Standby Availability Zone information of the server group.
	StandbyAvailabilityZone *string `json:"standbyAvailabilityZone,omitempty"`
}

// MarshalJSON implements the json.Marshaller interface for type ServerGroupPropertiesForUpdate.
func (s ServerGroupPropertiesForUpdate) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "administratorLoginPassword", s.AdministratorLoginPassword)
	populate(objectMap, "availabilityZone", s.AvailabilityZone)
	populate(objectMap, "backupRetentionDays", s.BackupRetentionDays)
	populate(objectMap, "citusVersion", s.CitusVersion)
	populate(objectMap, "enableShardsOnCoordinator", s.EnableShardsOnCoordinator)
	populate(objectMap, "maintenanceWindow", s.MaintenanceWindow)
	populate(objectMap, "postgresqlVersion", s.PostgresqlVersion)
	populate(objectMap, "serverRoleGroups", s.ServerRoleGroups)
	populate(objectMap, "standbyAvailabilityZone", s.StandbyAvailabilityZone)
	return json.Marshal(objectMap)
}

// ServerGroupPropertiesPrivateDNSZoneArguments - The private dns zone arguments for a server group.
type ServerGroupPropertiesPrivateDNSZoneArguments struct {
	// private dns zone arm resource id.
	PrivateDNSZoneArmResourceID *string `json:"privateDnsZoneArmResourceId,omitempty"`
}

// ServerGroupServer - Represents a server in a server group.
type ServerGroupServer struct {
	ProxyResource
	// The properties of a server in a server group.
	Properties *ServerGroupServerProperties `json:"properties,omitempty"`

	// READ-ONLY; The system metadata relating to this resource
	SystemData *SystemData `json:"systemData,omitempty" azure:"ro"`
}

// MarshalJSON implements the json.Marshaller interface for type ServerGroupServer.
func (s ServerGroupServer) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	s.ProxyResource.marshalInternal(objectMap)
	populate(objectMap, "properties", s.Properties)
	populate(objectMap, "systemData", s.SystemData)
	return json.Marshal(objectMap)
}

// ServerGroupServerListResult - A list of servers in a server group.
type ServerGroupServerListResult struct {
	// The list of servers in a server group.
	Value []*ServerGroupServer `json:"value,omitempty"`
}

// MarshalJSON implements the json.Marshaller interface for type ServerGroupServerListResult.
func (s ServerGroupServerListResult) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "value", s.Value)
	return json.Marshal(objectMap)
}

// ServerGroupServerProperties - The properties of a server in server group.
type ServerGroupServerProperties struct {
	ServerProperties
	// The administrator's login name of a servers in server group.
	AdministratorLogin *string `json:"administratorLogin,omitempty"`

	// Availability Zone information of the server group.
	AvailabilityZone *string `json:"availabilityZone,omitempty"`

	// The Citus version of server.
	CitusVersion *CitusVersion `json:"citusVersion,omitempty"`

	// The PostgreSQL version of server.
	PostgresqlVersion *PostgreSQLVersion `json:"postgresqlVersion,omitempty"`

	// The role of server in the server group.
	Role *ServerRole `json:"role,omitempty"`

	// Standby Availability Zone information of the server group.
	StandbyAvailabilityZone *string `json:"standbyAvailabilityZone,omitempty"`

	// READ-ONLY; The fully qualified domain name of a server.
	FullyQualifiedDomainName *string `json:"fullyQualifiedDomainName,omitempty" azure:"ro"`

	// READ-ONLY; A state of a server group that is visible to user for HA feature.
	HaState *ServerHaState `json:"haState,omitempty" azure:"ro"`

	// READ-ONLY; A state of a server that is visible to user.
	State *ServerState `json:"state,omitempty" azure:"ro"`
}

// MarshalJSON implements the json.Marshaller interface for type ServerGroupServerProperties.
func (s ServerGroupServerProperties) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	s.ServerProperties.marshalInternal(objectMap)
	populate(objectMap, "administratorLogin", s.AdministratorLogin)
	populate(objectMap, "availabilityZone", s.AvailabilityZone)
	populate(objectMap, "citusVersion", s.CitusVersion)
	populate(objectMap, "fullyQualifiedDomainName", s.FullyQualifiedDomainName)
	populate(objectMap, "haState", s.HaState)
	populate(objectMap, "postgresqlVersion", s.PostgresqlVersion)
	populate(objectMap, "role", s.Role)
	populate(objectMap, "standbyAvailabilityZone", s.StandbyAvailabilityZone)
	populate(objectMap, "state", s.State)
	return json.Marshal(objectMap)
}

// ServerGroupsBeginCreateOrUpdateOptions contains the optional parameters for the ServerGroups.BeginCreateOrUpdate method.
type ServerGroupsBeginCreateOrUpdateOptions struct {
	// placeholder for future optional parameters
}

// ServerGroupsBeginDeleteOptions contains the optional parameters for the ServerGroups.BeginDelete method.
type ServerGroupsBeginDeleteOptions struct {
	// placeholder for future optional parameters
}

// ServerGroupsBeginRestartOptions contains the optional parameters for the ServerGroups.BeginRestart method.
type ServerGroupsBeginRestartOptions struct {
	// placeholder for future optional parameters
}

// ServerGroupsBeginStartOptions contains the optional parameters for the ServerGroups.BeginStart method.
type ServerGroupsBeginStartOptions struct {
	// placeholder for future optional parameters
}

// ServerGroupsBeginStopOptions contains the optional parameters for the ServerGroups.BeginStop method.
type ServerGroupsBeginStopOptions struct {
	// placeholder for future optional parameters
}

// ServerGroupsBeginUpdateOptions contains the optional parameters for the ServerGroups.BeginUpdate method.
type ServerGroupsBeginUpdateOptions struct {
	// placeholder for future optional parameters
}

// ServerGroupsCheckNameAvailabilityOptions contains the optional parameters for the ServerGroups.CheckNameAvailability method.
type ServerGroupsCheckNameAvailabilityOptions struct {
	// placeholder for future optional parameters
}

// ServerGroupsGetOptions contains the optional parameters for the ServerGroups.Get method.
type ServerGroupsGetOptions struct {
	// placeholder for future optional parameters
}

// ServerGroupsListByResourceGroupOptions contains the optional parameters for the ServerGroups.ListByResourceGroup method.
type ServerGroupsListByResourceGroupOptions struct {
	// placeholder for future optional parameters
}

// ServerGroupsListOptions contains the optional parameters for the ServerGroups.List method.
type ServerGroupsListOptions struct {
	// placeholder for future optional parameters
}

// ServerNameItem - The name object for a server.
type ServerNameItem struct {
	// The name of a server.
	Name *string `json:"name,omitempty"`

	// READ-ONLY; The fully qualified domain name of a server.
	FullyQualifiedDomainName *string `json:"fullyQualifiedDomainName,omitempty" azure:"ro"`
}

// ServerProperties - The properties of a server.
type ServerProperties struct {
	// If high availability is enabled or not for the server.
	EnableHa *bool `json:"enableHa,omitempty"`

	// The edition of a server (default: GeneralPurpose).
	ServerEdition *ServerEdition `json:"serverEdition,omitempty"`

	// The storage of a server in MB (max: 2097152 = 2TiB).
	StorageQuotaInMb *int64 `json:"storageQuotaInMb,omitempty"`

	// The vCores count of a server (max: 64).
	VCores *int64 `json:"vCores,omitempty"`

	// READ-ONLY; If public IP is requested or not for a server.
	EnablePublicIP *bool `json:"enablePublicIp,omitempty" azure:"ro"`
}

// MarshalJSON implements the json.Marshaller interface for type ServerProperties.
func (s ServerProperties) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	s.marshalInternal(objectMap)
	return json.Marshal(objectMap)
}

func (s ServerProperties) marshalInternal(objectMap map[string]interface{}) {
	populate(objectMap, "enableHa", s.EnableHa)
	populate(objectMap, "enablePublicIp", s.EnablePublicIP)
	populate(objectMap, "serverEdition", s.ServerEdition)
	populate(objectMap, "storageQuotaInMb", s.StorageQuotaInMb)
	populate(objectMap, "vCores", s.VCores)
}

// ServerRoleGroup - Represents a server role group.
type ServerRoleGroup struct {
	ServerProperties
	// The name of the server role group.
	Name *string `json:"name,omitempty"`

	// The role of servers in the server role group.
	Role *ServerRole `json:"role,omitempty"`

	// The number of servers in the server role group.
	ServerCount *int32 `json:"serverCount,omitempty"`

	// READ-ONLY; The list of server names in the server role group.
	ServerNames []*ServerNameItem `json:"serverNames,omitempty" azure:"ro"`
}

// MarshalJSON implements the json.Marshaller interface for type ServerRoleGroup.
func (s ServerRoleGroup) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	s.ServerProperties.marshalInternal(objectMap)
	populate(objectMap, "name", s.Name)
	populate(objectMap, "role", s.Role)
	populate(objectMap, "serverCount", s.ServerCount)
	populate(objectMap, "serverNames", s.ServerNames)
	return json.Marshal(objectMap)
}

// ServerRoleGroupConfiguration - Represents server role group configuration value.
type ServerRoleGroupConfiguration struct {
	// REQUIRED; The role of servers in the server role group.
	Role *ServerRole `json:"role,omitempty"`

	// REQUIRED; Value of the configuration.
	Value *string `json:"value,omitempty"`

	// READ-ONLY; Default value of the configuration.
	DefaultValue *string `json:"defaultValue,omitempty" azure:"ro"`

	// READ-ONLY; Source of the configuration.
	Source *string `json:"source,omitempty" azure:"ro"`
}

// ServersGetOptions contains the optional parameters for the Servers.Get method.
type ServersGetOptions struct {
	// placeholder for future optional parameters
}

// ServersListByServerGroupOptions contains the optional parameters for the Servers.ListByServerGroup method.
type ServersListByServerGroupOptions struct {
	// placeholder for future optional parameters
}

// SystemData - Metadata pertaining to creation and last modification of the resource.
type SystemData struct {
	// The timestamp of resource creation (UTC).
	CreatedAt *time.Time `json:"createdAt,omitempty"`

	// The identity that created the resource.
	CreatedBy *string `json:"createdBy,omitempty"`

	// The type of identity that created the resource.
	CreatedByType *CreatedByType `json:"createdByType,omitempty"`

	// The timestamp of resource last modification (UTC)
	LastModifiedAt *time.Time `json:"lastModifiedAt,omitempty"`

	// The identity that last modified the resource.
	LastModifiedBy *string `json:"lastModifiedBy,omitempty"`

	// The type of identity that last modified the resource.
	LastModifiedByType *CreatedByType `json:"lastModifiedByType,omitempty"`
}

// MarshalJSON implements the json.Marshaller interface for type SystemData.
func (s SystemData) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populateTimeRFC3339(objectMap, "createdAt", s.CreatedAt)
	populate(objectMap, "createdBy", s.CreatedBy)
	populate(objectMap, "createdByType", s.CreatedByType)
	populateTimeRFC3339(objectMap, "lastModifiedAt", s.LastModifiedAt)
	populate(objectMap, "lastModifiedBy", s.LastModifiedBy)
	populate(objectMap, "lastModifiedByType", s.LastModifiedByType)
	return json.Marshal(objectMap)
}

// UnmarshalJSON implements the json.Unmarshaller interface for type SystemData.
func (s *SystemData) UnmarshalJSON(data []byte) error {
	var rawMsg map[string]json.RawMessage
	if err := json.Unmarshal(data, &rawMsg); err != nil {
		return err
	}
	for key, val := range rawMsg {
		var err error
		switch key {
		case "createdAt":
			err = unpopulateTimeRFC3339(val, &s.CreatedAt)
			delete(rawMsg, key)
		case "createdBy":
			err = unpopulate(val, &s.CreatedBy)
			delete(rawMsg, key)
		case "createdByType":
			err = unpopulate(val, &s.CreatedByType)
			delete(rawMsg, key)
		case "lastModifiedAt":
			err = unpopulateTimeRFC3339(val, &s.LastModifiedAt)
			delete(rawMsg, key)
		case "lastModifiedBy":
			err = unpopulate(val, &s.LastModifiedBy)
			delete(rawMsg, key)
		case "lastModifiedByType":
			err = unpopulate(val, &s.LastModifiedByType)
			delete(rawMsg, key)
		}
		if err != nil {
			return err
		}
	}
	return nil
}

// TrackedResource - The resource model definition for an Azure Resource Manager tracked top level resource which has 'tags' and a 'location'
type TrackedResource struct {
	Resource
	// REQUIRED; The geo-location where the resource lives
	Location *string `json:"location,omitempty"`

	// Resource tags.
	Tags map[string]*string `json:"tags,omitempty"`
}

// MarshalJSON implements the json.Marshaller interface for type TrackedResource.
func (t TrackedResource) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	t.marshalInternal(objectMap)
	return json.Marshal(objectMap)
}

func (t TrackedResource) marshalInternal(objectMap map[string]interface{}) {
	t.Resource.marshalInternal(objectMap)
	populate(objectMap, "location", t.Location)
	populate(objectMap, "tags", t.Tags)
}

func populate(m map[string]interface{}, k string, v interface{}) {
	if v == nil {
		return
	} else if azcore.IsNullValue(v) {
		m[k] = nil
	} else if !reflect.ValueOf(v).IsNil() {
		m[k] = v
	}
}

func unpopulate(data json.RawMessage, v interface{}) error {
	if data == nil {
		return nil
	}
	return json.Unmarshal(data, v)
}
