//go:build go1.16
// +build go1.16

// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

package armpostgresqlhsc

import (
	"context"
	armruntime "github.com/Azure/azure-sdk-for-go/sdk/azcore/arm/runtime"
	"net/http"
	"time"
)

// ConfigurationsClientGetResponse contains the response from method ConfigurationsClient.Get.
type ConfigurationsClientGetResponse struct {
	ConfigurationsClientGetResult
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// ConfigurationsClientGetResult contains the result from method ConfigurationsClient.Get.
type ConfigurationsClientGetResult struct {
	ServerGroupConfiguration
}

// ConfigurationsClientListByServerGroupResponse contains the response from method ConfigurationsClient.ListByServerGroup.
type ConfigurationsClientListByServerGroupResponse struct {
	ConfigurationsClientListByServerGroupResult
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// ConfigurationsClientListByServerGroupResult contains the result from method ConfigurationsClient.ListByServerGroup.
type ConfigurationsClientListByServerGroupResult struct {
	ServerGroupConfigurationListResult
}

// ConfigurationsClientListByServerResponse contains the response from method ConfigurationsClient.ListByServer.
type ConfigurationsClientListByServerResponse struct {
	ConfigurationsClientListByServerResult
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// ConfigurationsClientListByServerResult contains the result from method ConfigurationsClient.ListByServer.
type ConfigurationsClientListByServerResult struct {
	ServerConfigurationListResult
}

// ConfigurationsClientUpdatePollerResponse contains the response from method ConfigurationsClient.Update.
type ConfigurationsClientUpdatePollerResponse struct {
	// Poller contains an initialized poller.
	Poller *ConfigurationsClientUpdatePoller

	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// PollUntilDone will poll the service endpoint until a terminal state is reached or an error is received.
// freq: the time to wait between intervals in absence of a Retry-After header. Allowed minimum is one second.
// A good starting value is 30 seconds. Note that some resources might benefit from a different value.
func (l ConfigurationsClientUpdatePollerResponse) PollUntilDone(ctx context.Context, freq time.Duration) (ConfigurationsClientUpdateResponse, error) {
	respType := ConfigurationsClientUpdateResponse{}
	resp, err := l.Poller.pt.PollUntilDone(ctx, freq, &respType.ServerGroupConfiguration)
	if err != nil {
		return respType, err
	}
	respType.RawResponse = resp
	return respType, nil
}

// Resume rehydrates a ConfigurationsClientUpdatePollerResponse from the provided client and resume token.
func (l *ConfigurationsClientUpdatePollerResponse) Resume(ctx context.Context, client *ConfigurationsClient, token string) error {
	pt, err := armruntime.NewPollerFromResumeToken("ConfigurationsClient.Update", token, client.pl)
	if err != nil {
		return err
	}
	poller := &ConfigurationsClientUpdatePoller{
		pt: pt,
	}
	resp, err := poller.Poll(ctx)
	if err != nil {
		return err
	}
	l.Poller = poller
	l.RawResponse = resp
	return nil
}

// ConfigurationsClientUpdateResponse contains the response from method ConfigurationsClient.Update.
type ConfigurationsClientUpdateResponse struct {
	ConfigurationsClientUpdateResult
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// ConfigurationsClientUpdateResult contains the result from method ConfigurationsClient.Update.
type ConfigurationsClientUpdateResult struct {
	ServerGroupConfiguration
}

// FirewallRulesClientCreateOrUpdatePollerResponse contains the response from method FirewallRulesClient.CreateOrUpdate.
type FirewallRulesClientCreateOrUpdatePollerResponse struct {
	// Poller contains an initialized poller.
	Poller *FirewallRulesClientCreateOrUpdatePoller

	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// PollUntilDone will poll the service endpoint until a terminal state is reached or an error is received.
// freq: the time to wait between intervals in absence of a Retry-After header. Allowed minimum is one second.
// A good starting value is 30 seconds. Note that some resources might benefit from a different value.
func (l FirewallRulesClientCreateOrUpdatePollerResponse) PollUntilDone(ctx context.Context, freq time.Duration) (FirewallRulesClientCreateOrUpdateResponse, error) {
	respType := FirewallRulesClientCreateOrUpdateResponse{}
	resp, err := l.Poller.pt.PollUntilDone(ctx, freq, &respType.FirewallRule)
	if err != nil {
		return respType, err
	}
	respType.RawResponse = resp
	return respType, nil
}

// Resume rehydrates a FirewallRulesClientCreateOrUpdatePollerResponse from the provided client and resume token.
func (l *FirewallRulesClientCreateOrUpdatePollerResponse) Resume(ctx context.Context, client *FirewallRulesClient, token string) error {
	pt, err := armruntime.NewPollerFromResumeToken("FirewallRulesClient.CreateOrUpdate", token, client.pl)
	if err != nil {
		return err
	}
	poller := &FirewallRulesClientCreateOrUpdatePoller{
		pt: pt,
	}
	resp, err := poller.Poll(ctx)
	if err != nil {
		return err
	}
	l.Poller = poller
	l.RawResponse = resp
	return nil
}

// FirewallRulesClientCreateOrUpdateResponse contains the response from method FirewallRulesClient.CreateOrUpdate.
type FirewallRulesClientCreateOrUpdateResponse struct {
	FirewallRulesClientCreateOrUpdateResult
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// FirewallRulesClientCreateOrUpdateResult contains the result from method FirewallRulesClient.CreateOrUpdate.
type FirewallRulesClientCreateOrUpdateResult struct {
	FirewallRule
}

// FirewallRulesClientDeletePollerResponse contains the response from method FirewallRulesClient.Delete.
type FirewallRulesClientDeletePollerResponse struct {
	// Poller contains an initialized poller.
	Poller *FirewallRulesClientDeletePoller

	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// PollUntilDone will poll the service endpoint until a terminal state is reached or an error is received.
// freq: the time to wait between intervals in absence of a Retry-After header. Allowed minimum is one second.
// A good starting value is 30 seconds. Note that some resources might benefit from a different value.
func (l FirewallRulesClientDeletePollerResponse) PollUntilDone(ctx context.Context, freq time.Duration) (FirewallRulesClientDeleteResponse, error) {
	respType := FirewallRulesClientDeleteResponse{}
	resp, err := l.Poller.pt.PollUntilDone(ctx, freq, nil)
	if err != nil {
		return respType, err
	}
	respType.RawResponse = resp
	return respType, nil
}

// Resume rehydrates a FirewallRulesClientDeletePollerResponse from the provided client and resume token.
func (l *FirewallRulesClientDeletePollerResponse) Resume(ctx context.Context, client *FirewallRulesClient, token string) error {
	pt, err := armruntime.NewPollerFromResumeToken("FirewallRulesClient.Delete", token, client.pl)
	if err != nil {
		return err
	}
	poller := &FirewallRulesClientDeletePoller{
		pt: pt,
	}
	resp, err := poller.Poll(ctx)
	if err != nil {
		return err
	}
	l.Poller = poller
	l.RawResponse = resp
	return nil
}

// FirewallRulesClientDeleteResponse contains the response from method FirewallRulesClient.Delete.
type FirewallRulesClientDeleteResponse struct {
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// FirewallRulesClientGetResponse contains the response from method FirewallRulesClient.Get.
type FirewallRulesClientGetResponse struct {
	FirewallRulesClientGetResult
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// FirewallRulesClientGetResult contains the result from method FirewallRulesClient.Get.
type FirewallRulesClientGetResult struct {
	FirewallRule
}

// FirewallRulesClientListByServerGroupResponse contains the response from method FirewallRulesClient.ListByServerGroup.
type FirewallRulesClientListByServerGroupResponse struct {
	FirewallRulesClientListByServerGroupResult
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// FirewallRulesClientListByServerGroupResult contains the result from method FirewallRulesClient.ListByServerGroup.
type FirewallRulesClientListByServerGroupResult struct {
	FirewallRuleListResult
}

// OperationsClientListResponse contains the response from method OperationsClient.List.
type OperationsClientListResponse struct {
	OperationsClientListResult
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// OperationsClientListResult contains the result from method OperationsClient.List.
type OperationsClientListResult struct {
	OperationListResult
}

// RolesClientCreatePollerResponse contains the response from method RolesClient.Create.
type RolesClientCreatePollerResponse struct {
	// Poller contains an initialized poller.
	Poller *RolesClientCreatePoller

	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// PollUntilDone will poll the service endpoint until a terminal state is reached or an error is received.
// freq: the time to wait between intervals in absence of a Retry-After header. Allowed minimum is one second.
// A good starting value is 30 seconds. Note that some resources might benefit from a different value.
func (l RolesClientCreatePollerResponse) PollUntilDone(ctx context.Context, freq time.Duration) (RolesClientCreateResponse, error) {
	respType := RolesClientCreateResponse{}
	resp, err := l.Poller.pt.PollUntilDone(ctx, freq, &respType.Role)
	if err != nil {
		return respType, err
	}
	respType.RawResponse = resp
	return respType, nil
}

// Resume rehydrates a RolesClientCreatePollerResponse from the provided client and resume token.
func (l *RolesClientCreatePollerResponse) Resume(ctx context.Context, client *RolesClient, token string) error {
	pt, err := armruntime.NewPollerFromResumeToken("RolesClient.Create", token, client.pl)
	if err != nil {
		return err
	}
	poller := &RolesClientCreatePoller{
		pt: pt,
	}
	resp, err := poller.Poll(ctx)
	if err != nil {
		return err
	}
	l.Poller = poller
	l.RawResponse = resp
	return nil
}

// RolesClientCreateResponse contains the response from method RolesClient.Create.
type RolesClientCreateResponse struct {
	RolesClientCreateResult
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// RolesClientCreateResult contains the result from method RolesClient.Create.
type RolesClientCreateResult struct {
	Role
}

// RolesClientDeletePollerResponse contains the response from method RolesClient.Delete.
type RolesClientDeletePollerResponse struct {
	// Poller contains an initialized poller.
	Poller *RolesClientDeletePoller

	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// PollUntilDone will poll the service endpoint until a terminal state is reached or an error is received.
// freq: the time to wait between intervals in absence of a Retry-After header. Allowed minimum is one second.
// A good starting value is 30 seconds. Note that some resources might benefit from a different value.
func (l RolesClientDeletePollerResponse) PollUntilDone(ctx context.Context, freq time.Duration) (RolesClientDeleteResponse, error) {
	respType := RolesClientDeleteResponse{}
	resp, err := l.Poller.pt.PollUntilDone(ctx, freq, nil)
	if err != nil {
		return respType, err
	}
	respType.RawResponse = resp
	return respType, nil
}

// Resume rehydrates a RolesClientDeletePollerResponse from the provided client and resume token.
func (l *RolesClientDeletePollerResponse) Resume(ctx context.Context, client *RolesClient, token string) error {
	pt, err := armruntime.NewPollerFromResumeToken("RolesClient.Delete", token, client.pl)
	if err != nil {
		return err
	}
	poller := &RolesClientDeletePoller{
		pt: pt,
	}
	resp, err := poller.Poll(ctx)
	if err != nil {
		return err
	}
	l.Poller = poller
	l.RawResponse = resp
	return nil
}

// RolesClientDeleteResponse contains the response from method RolesClient.Delete.
type RolesClientDeleteResponse struct {
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// RolesClientListByServerGroupResponse contains the response from method RolesClient.ListByServerGroup.
type RolesClientListByServerGroupResponse struct {
	RolesClientListByServerGroupResult
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// RolesClientListByServerGroupResult contains the result from method RolesClient.ListByServerGroup.
type RolesClientListByServerGroupResult struct {
	RoleListResult
}

// ServerGroupsClientCheckNameAvailabilityResponse contains the response from method ServerGroupsClient.CheckNameAvailability.
type ServerGroupsClientCheckNameAvailabilityResponse struct {
	ServerGroupsClientCheckNameAvailabilityResult
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// ServerGroupsClientCheckNameAvailabilityResult contains the result from method ServerGroupsClient.CheckNameAvailability.
type ServerGroupsClientCheckNameAvailabilityResult struct {
	NameAvailability
}

// ServerGroupsClientCreateOrUpdatePollerResponse contains the response from method ServerGroupsClient.CreateOrUpdate.
type ServerGroupsClientCreateOrUpdatePollerResponse struct {
	// Poller contains an initialized poller.
	Poller *ServerGroupsClientCreateOrUpdatePoller

	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// PollUntilDone will poll the service endpoint until a terminal state is reached or an error is received.
// freq: the time to wait between intervals in absence of a Retry-After header. Allowed minimum is one second.
// A good starting value is 30 seconds. Note that some resources might benefit from a different value.
func (l ServerGroupsClientCreateOrUpdatePollerResponse) PollUntilDone(ctx context.Context, freq time.Duration) (ServerGroupsClientCreateOrUpdateResponse, error) {
	respType := ServerGroupsClientCreateOrUpdateResponse{}
	resp, err := l.Poller.pt.PollUntilDone(ctx, freq, &respType.ServerGroup)
	if err != nil {
		return respType, err
	}
	respType.RawResponse = resp
	return respType, nil
}

// Resume rehydrates a ServerGroupsClientCreateOrUpdatePollerResponse from the provided client and resume token.
func (l *ServerGroupsClientCreateOrUpdatePollerResponse) Resume(ctx context.Context, client *ServerGroupsClient, token string) error {
	pt, err := armruntime.NewPollerFromResumeToken("ServerGroupsClient.CreateOrUpdate", token, client.pl)
	if err != nil {
		return err
	}
	poller := &ServerGroupsClientCreateOrUpdatePoller{
		pt: pt,
	}
	resp, err := poller.Poll(ctx)
	if err != nil {
		return err
	}
	l.Poller = poller
	l.RawResponse = resp
	return nil
}

// ServerGroupsClientCreateOrUpdateResponse contains the response from method ServerGroupsClient.CreateOrUpdate.
type ServerGroupsClientCreateOrUpdateResponse struct {
	ServerGroupsClientCreateOrUpdateResult
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// ServerGroupsClientCreateOrUpdateResult contains the result from method ServerGroupsClient.CreateOrUpdate.
type ServerGroupsClientCreateOrUpdateResult struct {
	ServerGroup
}

// ServerGroupsClientDeletePollerResponse contains the response from method ServerGroupsClient.Delete.
type ServerGroupsClientDeletePollerResponse struct {
	// Poller contains an initialized poller.
	Poller *ServerGroupsClientDeletePoller

	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// PollUntilDone will poll the service endpoint until a terminal state is reached or an error is received.
// freq: the time to wait between intervals in absence of a Retry-After header. Allowed minimum is one second.
// A good starting value is 30 seconds. Note that some resources might benefit from a different value.
func (l ServerGroupsClientDeletePollerResponse) PollUntilDone(ctx context.Context, freq time.Duration) (ServerGroupsClientDeleteResponse, error) {
	respType := ServerGroupsClientDeleteResponse{}
	resp, err := l.Poller.pt.PollUntilDone(ctx, freq, nil)
	if err != nil {
		return respType, err
	}
	respType.RawResponse = resp
	return respType, nil
}

// Resume rehydrates a ServerGroupsClientDeletePollerResponse from the provided client and resume token.
func (l *ServerGroupsClientDeletePollerResponse) Resume(ctx context.Context, client *ServerGroupsClient, token string) error {
	pt, err := armruntime.NewPollerFromResumeToken("ServerGroupsClient.Delete", token, client.pl)
	if err != nil {
		return err
	}
	poller := &ServerGroupsClientDeletePoller{
		pt: pt,
	}
	resp, err := poller.Poll(ctx)
	if err != nil {
		return err
	}
	l.Poller = poller
	l.RawResponse = resp
	return nil
}

// ServerGroupsClientDeleteResponse contains the response from method ServerGroupsClient.Delete.
type ServerGroupsClientDeleteResponse struct {
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// ServerGroupsClientGetResponse contains the response from method ServerGroupsClient.Get.
type ServerGroupsClientGetResponse struct {
	ServerGroupsClientGetResult
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// ServerGroupsClientGetResult contains the result from method ServerGroupsClient.Get.
type ServerGroupsClientGetResult struct {
	ServerGroup
}

// ServerGroupsClientListByResourceGroupResponse contains the response from method ServerGroupsClient.ListByResourceGroup.
type ServerGroupsClientListByResourceGroupResponse struct {
	ServerGroupsClientListByResourceGroupResult
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// ServerGroupsClientListByResourceGroupResult contains the result from method ServerGroupsClient.ListByResourceGroup.
type ServerGroupsClientListByResourceGroupResult struct {
	ServerGroupListResult
}

// ServerGroupsClientListResponse contains the response from method ServerGroupsClient.List.
type ServerGroupsClientListResponse struct {
	ServerGroupsClientListResult
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// ServerGroupsClientListResult contains the result from method ServerGroupsClient.List.
type ServerGroupsClientListResult struct {
	ServerGroupListResult
}

// ServerGroupsClientRestartPollerResponse contains the response from method ServerGroupsClient.Restart.
type ServerGroupsClientRestartPollerResponse struct {
	// Poller contains an initialized poller.
	Poller *ServerGroupsClientRestartPoller

	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// PollUntilDone will poll the service endpoint until a terminal state is reached or an error is received.
// freq: the time to wait between intervals in absence of a Retry-After header. Allowed minimum is one second.
// A good starting value is 30 seconds. Note that some resources might benefit from a different value.
func (l ServerGroupsClientRestartPollerResponse) PollUntilDone(ctx context.Context, freq time.Duration) (ServerGroupsClientRestartResponse, error) {
	respType := ServerGroupsClientRestartResponse{}
	resp, err := l.Poller.pt.PollUntilDone(ctx, freq, nil)
	if err != nil {
		return respType, err
	}
	respType.RawResponse = resp
	return respType, nil
}

// Resume rehydrates a ServerGroupsClientRestartPollerResponse from the provided client and resume token.
func (l *ServerGroupsClientRestartPollerResponse) Resume(ctx context.Context, client *ServerGroupsClient, token string) error {
	pt, err := armruntime.NewPollerFromResumeToken("ServerGroupsClient.Restart", token, client.pl)
	if err != nil {
		return err
	}
	poller := &ServerGroupsClientRestartPoller{
		pt: pt,
	}
	resp, err := poller.Poll(ctx)
	if err != nil {
		return err
	}
	l.Poller = poller
	l.RawResponse = resp
	return nil
}

// ServerGroupsClientRestartResponse contains the response from method ServerGroupsClient.Restart.
type ServerGroupsClientRestartResponse struct {
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// ServerGroupsClientStartPollerResponse contains the response from method ServerGroupsClient.Start.
type ServerGroupsClientStartPollerResponse struct {
	// Poller contains an initialized poller.
	Poller *ServerGroupsClientStartPoller

	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// PollUntilDone will poll the service endpoint until a terminal state is reached or an error is received.
// freq: the time to wait between intervals in absence of a Retry-After header. Allowed minimum is one second.
// A good starting value is 30 seconds. Note that some resources might benefit from a different value.
func (l ServerGroupsClientStartPollerResponse) PollUntilDone(ctx context.Context, freq time.Duration) (ServerGroupsClientStartResponse, error) {
	respType := ServerGroupsClientStartResponse{}
	resp, err := l.Poller.pt.PollUntilDone(ctx, freq, nil)
	if err != nil {
		return respType, err
	}
	respType.RawResponse = resp
	return respType, nil
}

// Resume rehydrates a ServerGroupsClientStartPollerResponse from the provided client and resume token.
func (l *ServerGroupsClientStartPollerResponse) Resume(ctx context.Context, client *ServerGroupsClient, token string) error {
	pt, err := armruntime.NewPollerFromResumeToken("ServerGroupsClient.Start", token, client.pl)
	if err != nil {
		return err
	}
	poller := &ServerGroupsClientStartPoller{
		pt: pt,
	}
	resp, err := poller.Poll(ctx)
	if err != nil {
		return err
	}
	l.Poller = poller
	l.RawResponse = resp
	return nil
}

// ServerGroupsClientStartResponse contains the response from method ServerGroupsClient.Start.
type ServerGroupsClientStartResponse struct {
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// ServerGroupsClientStopPollerResponse contains the response from method ServerGroupsClient.Stop.
type ServerGroupsClientStopPollerResponse struct {
	// Poller contains an initialized poller.
	Poller *ServerGroupsClientStopPoller

	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// PollUntilDone will poll the service endpoint until a terminal state is reached or an error is received.
// freq: the time to wait between intervals in absence of a Retry-After header. Allowed minimum is one second.
// A good starting value is 30 seconds. Note that some resources might benefit from a different value.
func (l ServerGroupsClientStopPollerResponse) PollUntilDone(ctx context.Context, freq time.Duration) (ServerGroupsClientStopResponse, error) {
	respType := ServerGroupsClientStopResponse{}
	resp, err := l.Poller.pt.PollUntilDone(ctx, freq, nil)
	if err != nil {
		return respType, err
	}
	respType.RawResponse = resp
	return respType, nil
}

// Resume rehydrates a ServerGroupsClientStopPollerResponse from the provided client and resume token.
func (l *ServerGroupsClientStopPollerResponse) Resume(ctx context.Context, client *ServerGroupsClient, token string) error {
	pt, err := armruntime.NewPollerFromResumeToken("ServerGroupsClient.Stop", token, client.pl)
	if err != nil {
		return err
	}
	poller := &ServerGroupsClientStopPoller{
		pt: pt,
	}
	resp, err := poller.Poll(ctx)
	if err != nil {
		return err
	}
	l.Poller = poller
	l.RawResponse = resp
	return nil
}

// ServerGroupsClientStopResponse contains the response from method ServerGroupsClient.Stop.
type ServerGroupsClientStopResponse struct {
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// ServerGroupsClientUpdatePollerResponse contains the response from method ServerGroupsClient.Update.
type ServerGroupsClientUpdatePollerResponse struct {
	// Poller contains an initialized poller.
	Poller *ServerGroupsClientUpdatePoller

	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// PollUntilDone will poll the service endpoint until a terminal state is reached or an error is received.
// freq: the time to wait between intervals in absence of a Retry-After header. Allowed minimum is one second.
// A good starting value is 30 seconds. Note that some resources might benefit from a different value.
func (l ServerGroupsClientUpdatePollerResponse) PollUntilDone(ctx context.Context, freq time.Duration) (ServerGroupsClientUpdateResponse, error) {
	respType := ServerGroupsClientUpdateResponse{}
	resp, err := l.Poller.pt.PollUntilDone(ctx, freq, &respType.ServerGroup)
	if err != nil {
		return respType, err
	}
	respType.RawResponse = resp
	return respType, nil
}

// Resume rehydrates a ServerGroupsClientUpdatePollerResponse from the provided client and resume token.
func (l *ServerGroupsClientUpdatePollerResponse) Resume(ctx context.Context, client *ServerGroupsClient, token string) error {
	pt, err := armruntime.NewPollerFromResumeToken("ServerGroupsClient.Update", token, client.pl)
	if err != nil {
		return err
	}
	poller := &ServerGroupsClientUpdatePoller{
		pt: pt,
	}
	resp, err := poller.Poll(ctx)
	if err != nil {
		return err
	}
	l.Poller = poller
	l.RawResponse = resp
	return nil
}

// ServerGroupsClientUpdateResponse contains the response from method ServerGroupsClient.Update.
type ServerGroupsClientUpdateResponse struct {
	ServerGroupsClientUpdateResult
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// ServerGroupsClientUpdateResult contains the result from method ServerGroupsClient.Update.
type ServerGroupsClientUpdateResult struct {
	ServerGroup
}

// ServersClientGetResponse contains the response from method ServersClient.Get.
type ServersClientGetResponse struct {
	ServersClientGetResult
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// ServersClientGetResult contains the result from method ServersClient.Get.
type ServersClientGetResult struct {
	ServerGroupServer
}

// ServersClientListByServerGroupResponse contains the response from method ServersClient.ListByServerGroup.
type ServersClientListByServerGroupResponse struct {
	ServersClientListByServerGroupResult
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// ServersClientListByServerGroupResult contains the result from method ServersClient.ListByServerGroup.
type ServersClientListByServerGroupResult struct {
	ServerGroupServerListResult
}
