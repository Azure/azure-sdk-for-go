//go:build go1.16
// +build go1.16

// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

package armprivatedns

import (
	"context"
	armruntime "github.com/Azure/azure-sdk-for-go/sdk/azcore/arm/runtime"
	"net/http"
	"time"
)

// PrivateZonesClientCreateOrUpdatePollerResponse contains the response from method PrivateZonesClient.CreateOrUpdate.
type PrivateZonesClientCreateOrUpdatePollerResponse struct {
	// Poller contains an initialized poller.
	Poller *PrivateZonesClientCreateOrUpdatePoller

	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// PollUntilDone will poll the service endpoint until a terminal state is reached or an error is received.
// freq: the time to wait between intervals in absence of a Retry-After header. Allowed minimum is one second.
// A good starting value is 30 seconds. Note that some resources might benefit from a different value.
func (l PrivateZonesClientCreateOrUpdatePollerResponse) PollUntilDone(ctx context.Context, freq time.Duration) (PrivateZonesClientCreateOrUpdateResponse, error) {
	respType := PrivateZonesClientCreateOrUpdateResponse{}
	resp, err := l.Poller.pt.PollUntilDone(ctx, freq, &respType.PrivateZone)
	if err != nil {
		return respType, err
	}
	respType.RawResponse = resp
	return respType, nil
}

// Resume rehydrates a PrivateZonesClientCreateOrUpdatePollerResponse from the provided client and resume token.
func (l *PrivateZonesClientCreateOrUpdatePollerResponse) Resume(ctx context.Context, client *PrivateZonesClient, token string) error {
	pt, err := armruntime.NewPollerFromResumeToken("PrivateZonesClient.CreateOrUpdate", token, client.pl)
	if err != nil {
		return err
	}
	poller := &PrivateZonesClientCreateOrUpdatePoller{
		pt: pt,
	}
	resp, err := poller.Poll(ctx)
	if err != nil {
		return err
	}
	l.Poller = poller
	l.RawResponse = resp
	return nil
}

// PrivateZonesClientCreateOrUpdateResponse contains the response from method PrivateZonesClient.CreateOrUpdate.
type PrivateZonesClientCreateOrUpdateResponse struct {
	PrivateZonesClientCreateOrUpdateResult
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// PrivateZonesClientCreateOrUpdateResult contains the result from method PrivateZonesClient.CreateOrUpdate.
type PrivateZonesClientCreateOrUpdateResult struct {
	PrivateZone
}

// PrivateZonesClientDeletePollerResponse contains the response from method PrivateZonesClient.Delete.
type PrivateZonesClientDeletePollerResponse struct {
	// Poller contains an initialized poller.
	Poller *PrivateZonesClientDeletePoller

	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// PollUntilDone will poll the service endpoint until a terminal state is reached or an error is received.
// freq: the time to wait between intervals in absence of a Retry-After header. Allowed minimum is one second.
// A good starting value is 30 seconds. Note that some resources might benefit from a different value.
func (l PrivateZonesClientDeletePollerResponse) PollUntilDone(ctx context.Context, freq time.Duration) (PrivateZonesClientDeleteResponse, error) {
	respType := PrivateZonesClientDeleteResponse{}
	resp, err := l.Poller.pt.PollUntilDone(ctx, freq, nil)
	if err != nil {
		return respType, err
	}
	respType.RawResponse = resp
	return respType, nil
}

// Resume rehydrates a PrivateZonesClientDeletePollerResponse from the provided client and resume token.
func (l *PrivateZonesClientDeletePollerResponse) Resume(ctx context.Context, client *PrivateZonesClient, token string) error {
	pt, err := armruntime.NewPollerFromResumeToken("PrivateZonesClient.Delete", token, client.pl)
	if err != nil {
		return err
	}
	poller := &PrivateZonesClientDeletePoller{
		pt: pt,
	}
	resp, err := poller.Poll(ctx)
	if err != nil {
		return err
	}
	l.Poller = poller
	l.RawResponse = resp
	return nil
}

// PrivateZonesClientDeleteResponse contains the response from method PrivateZonesClient.Delete.
type PrivateZonesClientDeleteResponse struct {
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// PrivateZonesClientGetResponse contains the response from method PrivateZonesClient.Get.
type PrivateZonesClientGetResponse struct {
	PrivateZonesClientGetResult
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// PrivateZonesClientGetResult contains the result from method PrivateZonesClient.Get.
type PrivateZonesClientGetResult struct {
	PrivateZone
}

// PrivateZonesClientListByResourceGroupResponse contains the response from method PrivateZonesClient.ListByResourceGroup.
type PrivateZonesClientListByResourceGroupResponse struct {
	PrivateZonesClientListByResourceGroupResult
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// PrivateZonesClientListByResourceGroupResult contains the result from method PrivateZonesClient.ListByResourceGroup.
type PrivateZonesClientListByResourceGroupResult struct {
	PrivateZoneListResult
}

// PrivateZonesClientListResponse contains the response from method PrivateZonesClient.List.
type PrivateZonesClientListResponse struct {
	PrivateZonesClientListResult
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// PrivateZonesClientListResult contains the result from method PrivateZonesClient.List.
type PrivateZonesClientListResult struct {
	PrivateZoneListResult
}

// PrivateZonesClientUpdatePollerResponse contains the response from method PrivateZonesClient.Update.
type PrivateZonesClientUpdatePollerResponse struct {
	// Poller contains an initialized poller.
	Poller *PrivateZonesClientUpdatePoller

	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// PollUntilDone will poll the service endpoint until a terminal state is reached or an error is received.
// freq: the time to wait between intervals in absence of a Retry-After header. Allowed minimum is one second.
// A good starting value is 30 seconds. Note that some resources might benefit from a different value.
func (l PrivateZonesClientUpdatePollerResponse) PollUntilDone(ctx context.Context, freq time.Duration) (PrivateZonesClientUpdateResponse, error) {
	respType := PrivateZonesClientUpdateResponse{}
	resp, err := l.Poller.pt.PollUntilDone(ctx, freq, &respType.PrivateZone)
	if err != nil {
		return respType, err
	}
	respType.RawResponse = resp
	return respType, nil
}

// Resume rehydrates a PrivateZonesClientUpdatePollerResponse from the provided client and resume token.
func (l *PrivateZonesClientUpdatePollerResponse) Resume(ctx context.Context, client *PrivateZonesClient, token string) error {
	pt, err := armruntime.NewPollerFromResumeToken("PrivateZonesClient.Update", token, client.pl)
	if err != nil {
		return err
	}
	poller := &PrivateZonesClientUpdatePoller{
		pt: pt,
	}
	resp, err := poller.Poll(ctx)
	if err != nil {
		return err
	}
	l.Poller = poller
	l.RawResponse = resp
	return nil
}

// PrivateZonesClientUpdateResponse contains the response from method PrivateZonesClient.Update.
type PrivateZonesClientUpdateResponse struct {
	PrivateZonesClientUpdateResult
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// PrivateZonesClientUpdateResult contains the result from method PrivateZonesClient.Update.
type PrivateZonesClientUpdateResult struct {
	PrivateZone
}

// RecordSetsClientCreateOrUpdateResponse contains the response from method RecordSetsClient.CreateOrUpdate.
type RecordSetsClientCreateOrUpdateResponse struct {
	RecordSetsClientCreateOrUpdateResult
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// RecordSetsClientCreateOrUpdateResult contains the result from method RecordSetsClient.CreateOrUpdate.
type RecordSetsClientCreateOrUpdateResult struct {
	RecordSet
}

// RecordSetsClientDeleteResponse contains the response from method RecordSetsClient.Delete.
type RecordSetsClientDeleteResponse struct {
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// RecordSetsClientGetResponse contains the response from method RecordSetsClient.Get.
type RecordSetsClientGetResponse struct {
	RecordSetsClientGetResult
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// RecordSetsClientGetResult contains the result from method RecordSetsClient.Get.
type RecordSetsClientGetResult struct {
	RecordSet
}

// RecordSetsClientListByTypeResponse contains the response from method RecordSetsClient.ListByType.
type RecordSetsClientListByTypeResponse struct {
	RecordSetsClientListByTypeResult
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// RecordSetsClientListByTypeResult contains the result from method RecordSetsClient.ListByType.
type RecordSetsClientListByTypeResult struct {
	RecordSetListResult
}

// RecordSetsClientListResponse contains the response from method RecordSetsClient.List.
type RecordSetsClientListResponse struct {
	RecordSetsClientListResult
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// RecordSetsClientListResult contains the result from method RecordSetsClient.List.
type RecordSetsClientListResult struct {
	RecordSetListResult
}

// RecordSetsClientUpdateResponse contains the response from method RecordSetsClient.Update.
type RecordSetsClientUpdateResponse struct {
	RecordSetsClientUpdateResult
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// RecordSetsClientUpdateResult contains the result from method RecordSetsClient.Update.
type RecordSetsClientUpdateResult struct {
	RecordSet
}

// VirtualNetworkLinksClientCreateOrUpdatePollerResponse contains the response from method VirtualNetworkLinksClient.CreateOrUpdate.
type VirtualNetworkLinksClientCreateOrUpdatePollerResponse struct {
	// Poller contains an initialized poller.
	Poller *VirtualNetworkLinksClientCreateOrUpdatePoller

	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// PollUntilDone will poll the service endpoint until a terminal state is reached or an error is received.
// freq: the time to wait between intervals in absence of a Retry-After header. Allowed minimum is one second.
// A good starting value is 30 seconds. Note that some resources might benefit from a different value.
func (l VirtualNetworkLinksClientCreateOrUpdatePollerResponse) PollUntilDone(ctx context.Context, freq time.Duration) (VirtualNetworkLinksClientCreateOrUpdateResponse, error) {
	respType := VirtualNetworkLinksClientCreateOrUpdateResponse{}
	resp, err := l.Poller.pt.PollUntilDone(ctx, freq, &respType.VirtualNetworkLink)
	if err != nil {
		return respType, err
	}
	respType.RawResponse = resp
	return respType, nil
}

// Resume rehydrates a VirtualNetworkLinksClientCreateOrUpdatePollerResponse from the provided client and resume token.
func (l *VirtualNetworkLinksClientCreateOrUpdatePollerResponse) Resume(ctx context.Context, client *VirtualNetworkLinksClient, token string) error {
	pt, err := armruntime.NewPollerFromResumeToken("VirtualNetworkLinksClient.CreateOrUpdate", token, client.pl)
	if err != nil {
		return err
	}
	poller := &VirtualNetworkLinksClientCreateOrUpdatePoller{
		pt: pt,
	}
	resp, err := poller.Poll(ctx)
	if err != nil {
		return err
	}
	l.Poller = poller
	l.RawResponse = resp
	return nil
}

// VirtualNetworkLinksClientCreateOrUpdateResponse contains the response from method VirtualNetworkLinksClient.CreateOrUpdate.
type VirtualNetworkLinksClientCreateOrUpdateResponse struct {
	VirtualNetworkLinksClientCreateOrUpdateResult
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// VirtualNetworkLinksClientCreateOrUpdateResult contains the result from method VirtualNetworkLinksClient.CreateOrUpdate.
type VirtualNetworkLinksClientCreateOrUpdateResult struct {
	VirtualNetworkLink
}

// VirtualNetworkLinksClientDeletePollerResponse contains the response from method VirtualNetworkLinksClient.Delete.
type VirtualNetworkLinksClientDeletePollerResponse struct {
	// Poller contains an initialized poller.
	Poller *VirtualNetworkLinksClientDeletePoller

	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// PollUntilDone will poll the service endpoint until a terminal state is reached or an error is received.
// freq: the time to wait between intervals in absence of a Retry-After header. Allowed minimum is one second.
// A good starting value is 30 seconds. Note that some resources might benefit from a different value.
func (l VirtualNetworkLinksClientDeletePollerResponse) PollUntilDone(ctx context.Context, freq time.Duration) (VirtualNetworkLinksClientDeleteResponse, error) {
	respType := VirtualNetworkLinksClientDeleteResponse{}
	resp, err := l.Poller.pt.PollUntilDone(ctx, freq, nil)
	if err != nil {
		return respType, err
	}
	respType.RawResponse = resp
	return respType, nil
}

// Resume rehydrates a VirtualNetworkLinksClientDeletePollerResponse from the provided client and resume token.
func (l *VirtualNetworkLinksClientDeletePollerResponse) Resume(ctx context.Context, client *VirtualNetworkLinksClient, token string) error {
	pt, err := armruntime.NewPollerFromResumeToken("VirtualNetworkLinksClient.Delete", token, client.pl)
	if err != nil {
		return err
	}
	poller := &VirtualNetworkLinksClientDeletePoller{
		pt: pt,
	}
	resp, err := poller.Poll(ctx)
	if err != nil {
		return err
	}
	l.Poller = poller
	l.RawResponse = resp
	return nil
}

// VirtualNetworkLinksClientDeleteResponse contains the response from method VirtualNetworkLinksClient.Delete.
type VirtualNetworkLinksClientDeleteResponse struct {
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// VirtualNetworkLinksClientGetResponse contains the response from method VirtualNetworkLinksClient.Get.
type VirtualNetworkLinksClientGetResponse struct {
	VirtualNetworkLinksClientGetResult
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// VirtualNetworkLinksClientGetResult contains the result from method VirtualNetworkLinksClient.Get.
type VirtualNetworkLinksClientGetResult struct {
	VirtualNetworkLink
}

// VirtualNetworkLinksClientListResponse contains the response from method VirtualNetworkLinksClient.List.
type VirtualNetworkLinksClientListResponse struct {
	VirtualNetworkLinksClientListResult
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// VirtualNetworkLinksClientListResult contains the result from method VirtualNetworkLinksClient.List.
type VirtualNetworkLinksClientListResult struct {
	VirtualNetworkLinkListResult
}

// VirtualNetworkLinksClientUpdatePollerResponse contains the response from method VirtualNetworkLinksClient.Update.
type VirtualNetworkLinksClientUpdatePollerResponse struct {
	// Poller contains an initialized poller.
	Poller *VirtualNetworkLinksClientUpdatePoller

	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// PollUntilDone will poll the service endpoint until a terminal state is reached or an error is received.
// freq: the time to wait between intervals in absence of a Retry-After header. Allowed minimum is one second.
// A good starting value is 30 seconds. Note that some resources might benefit from a different value.
func (l VirtualNetworkLinksClientUpdatePollerResponse) PollUntilDone(ctx context.Context, freq time.Duration) (VirtualNetworkLinksClientUpdateResponse, error) {
	respType := VirtualNetworkLinksClientUpdateResponse{}
	resp, err := l.Poller.pt.PollUntilDone(ctx, freq, &respType.VirtualNetworkLink)
	if err != nil {
		return respType, err
	}
	respType.RawResponse = resp
	return respType, nil
}

// Resume rehydrates a VirtualNetworkLinksClientUpdatePollerResponse from the provided client and resume token.
func (l *VirtualNetworkLinksClientUpdatePollerResponse) Resume(ctx context.Context, client *VirtualNetworkLinksClient, token string) error {
	pt, err := armruntime.NewPollerFromResumeToken("VirtualNetworkLinksClient.Update", token, client.pl)
	if err != nil {
		return err
	}
	poller := &VirtualNetworkLinksClientUpdatePoller{
		pt: pt,
	}
	resp, err := poller.Poll(ctx)
	if err != nil {
		return err
	}
	l.Poller = poller
	l.RawResponse = resp
	return nil
}

// VirtualNetworkLinksClientUpdateResponse contains the response from method VirtualNetworkLinksClient.Update.
type VirtualNetworkLinksClientUpdateResponse struct {
	VirtualNetworkLinksClientUpdateResult
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// VirtualNetworkLinksClientUpdateResult contains the result from method VirtualNetworkLinksClient.Update.
type VirtualNetworkLinksClientUpdateResult struct {
	VirtualNetworkLink
}
