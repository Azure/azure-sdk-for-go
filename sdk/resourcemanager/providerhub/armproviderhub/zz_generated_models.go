//go:build go1.16
// +build go1.16

// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

package armproviderhub

import (
	"encoding/json"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore"
	"reflect"
	"time"
)

type AuthorizationActionMapping struct {
	Desired  *string `json:"desired,omitempty"`
	Original *string `json:"original,omitempty"`
}

type CanaryTrafficRegionRolloutConfiguration struct {
	Regions     []*string `json:"regions,omitempty"`
	SkipRegions []*string `json:"skipRegions,omitempty"`
}

// MarshalJSON implements the json.Marshaller interface for type CanaryTrafficRegionRolloutConfiguration.
func (c CanaryTrafficRegionRolloutConfiguration) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	c.marshalInternal(objectMap)
	return json.Marshal(objectMap)
}

func (c CanaryTrafficRegionRolloutConfiguration) marshalInternal(objectMap map[string]interface{}) {
	populate(objectMap, "regions", c.Regions)
	populate(objectMap, "skipRegions", c.SkipRegions)
}

type CheckNameAvailabilitySpecifications struct {
	EnableDefaultValidation           *bool     `json:"enableDefaultValidation,omitempty"`
	ResourceTypesWithCustomValidation []*string `json:"resourceTypesWithCustomValidation,omitempty"`
}

// MarshalJSON implements the json.Marshaller interface for type CheckNameAvailabilitySpecifications.
func (c CheckNameAvailabilitySpecifications) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	c.marshalInternal(objectMap)
	return json.Marshal(objectMap)
}

func (c CheckNameAvailabilitySpecifications) marshalInternal(objectMap map[string]interface{}) {
	populate(objectMap, "enableDefaultValidation", c.EnableDefaultValidation)
	populate(objectMap, "resourceTypesWithCustomValidation", c.ResourceTypesWithCustomValidation)
}

type CheckinManifestInfo struct {
	// REQUIRED
	IsCheckedIn *bool `json:"isCheckedIn,omitempty"`

	// REQUIRED
	StatusMessage *string `json:"statusMessage,omitempty"`
	CommitID      *string `json:"commitId,omitempty"`
	PullRequest   *string `json:"pullRequest,omitempty"`
}

type CheckinManifestParams struct {
	// REQUIRED; The baseline ARM manifest location supplied to the checkin manifest operation.
	BaselineArmManifestLocation *string `json:"baselineArmManifestLocation,omitempty"`

	// REQUIRED; The environment supplied to the checkin manifest operation.
	Environment *string `json:"environment,omitempty"`
}

// CustomRollout - Rollout details.
type CustomRollout struct {
	ProxyResource
	// REQUIRED; Properties of the rollout.
	Properties *CustomRolloutProperties `json:"properties,omitempty"`
}

type CustomRolloutArrayResponseWithContinuation struct {
	// The URL to get to the next set of results, if there are any.
	NextLink *string          `json:"nextLink,omitempty"`
	Value    []*CustomRollout `json:"value,omitempty"`
}

// MarshalJSON implements the json.Marshaller interface for type CustomRolloutArrayResponseWithContinuation.
func (c CustomRolloutArrayResponseWithContinuation) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "nextLink", c.NextLink)
	populate(objectMap, "value", c.Value)
	return json.Marshal(objectMap)
}

// CustomRolloutProperties - Properties of the rollout.
type CustomRolloutProperties struct {
	CustomRolloutPropertiesAutoGenerated
}

type CustomRolloutPropertiesAutoGenerated struct {
	// REQUIRED
	Specification     *CustomRolloutPropertiesSpecification `json:"specification,omitempty"`
	ProvisioningState *ProvisioningState                    `json:"provisioningState,omitempty"`
	Status            *CustomRolloutPropertiesStatus        `json:"status,omitempty"`
}

type CustomRolloutPropertiesSpecification struct {
	CustomRolloutSpecification
}

type CustomRolloutPropertiesStatus struct {
	CustomRolloutStatus
}

type CustomRolloutSpecification struct {
	// REQUIRED
	Canary                    *CustomRolloutSpecificationCanary               `json:"canary,omitempty"`
	ProviderRegistration      *CustomRolloutSpecificationProviderRegistration `json:"providerRegistration,omitempty"`
	ResourceTypeRegistrations []*ResourceTypeRegistration                     `json:"resourceTypeRegistrations,omitempty"`
}

// MarshalJSON implements the json.Marshaller interface for type CustomRolloutSpecification.
func (c CustomRolloutSpecification) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	c.marshalInternal(objectMap)
	return json.Marshal(objectMap)
}

func (c CustomRolloutSpecification) marshalInternal(objectMap map[string]interface{}) {
	populate(objectMap, "canary", c.Canary)
	populate(objectMap, "providerRegistration", c.ProviderRegistration)
	populate(objectMap, "resourceTypeRegistrations", c.ResourceTypeRegistrations)
}

type CustomRolloutSpecificationCanary struct {
	TrafficRegions
}

type CustomRolloutSpecificationProviderRegistration struct {
	ProviderRegistration
}

type CustomRolloutStatus struct {
	CompletedRegions []*string `json:"completedRegions,omitempty"`

	// Dictionary of
	FailedOrSkippedRegions map[string]*ExtendedErrorInfo `json:"failedOrSkippedRegions,omitempty"`
}

// MarshalJSON implements the json.Marshaller interface for type CustomRolloutStatus.
func (c CustomRolloutStatus) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	c.marshalInternal(objectMap)
	return json.Marshal(objectMap)
}

func (c CustomRolloutStatus) marshalInternal(objectMap map[string]interface{}) {
	populate(objectMap, "completedRegions", c.CompletedRegions)
	populate(objectMap, "failedOrSkippedRegions", c.FailedOrSkippedRegions)
}

// CustomRolloutsCreateOrUpdateOptions contains the optional parameters for the CustomRollouts.CreateOrUpdate method.
type CustomRolloutsCreateOrUpdateOptions struct {
	// placeholder for future optional parameters
}

// CustomRolloutsGetOptions contains the optional parameters for the CustomRollouts.Get method.
type CustomRolloutsGetOptions struct {
	// placeholder for future optional parameters
}

// CustomRolloutsListByProviderRegistrationOptions contains the optional parameters for the CustomRollouts.ListByProviderRegistration method.
type CustomRolloutsListByProviderRegistrationOptions struct {
	// placeholder for future optional parameters
}

// DefaultRollout - Default rollout definition.
type DefaultRollout struct {
	ProxyResource
	// Properties of the rollout.
	Properties *DefaultRolloutProperties `json:"properties,omitempty"`
}

type DefaultRolloutArrayResponseWithContinuation struct {
	// The URL to get to the next set of results, if there are any.
	NextLink *string           `json:"nextLink,omitempty"`
	Value    []*DefaultRollout `json:"value,omitempty"`
}

// MarshalJSON implements the json.Marshaller interface for type DefaultRolloutArrayResponseWithContinuation.
func (d DefaultRolloutArrayResponseWithContinuation) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "nextLink", d.NextLink)
	populate(objectMap, "value", d.Value)
	return json.Marshal(objectMap)
}

// DefaultRolloutProperties - Properties of the rollout.
type DefaultRolloutProperties struct {
	DefaultRolloutPropertiesAutoGenerated
}

type DefaultRolloutPropertiesAutoGenerated struct {
	ProvisioningState *ProvisioningState                     `json:"provisioningState,omitempty"`
	Specification     *DefaultRolloutPropertiesSpecification `json:"specification,omitempty"`
	Status            *DefaultRolloutPropertiesStatus        `json:"status,omitempty"`
}

type DefaultRolloutPropertiesSpecification struct {
	DefaultRolloutSpecification
}

type DefaultRolloutPropertiesStatus struct {
	DefaultRolloutStatus
}

type DefaultRolloutSpecification struct {
	Canary                    *DefaultRolloutSpecificationCanary                 `json:"canary,omitempty"`
	HighTraffic               *DefaultRolloutSpecificationHighTraffic            `json:"highTraffic,omitempty"`
	LowTraffic                *DefaultRolloutSpecificationLowTraffic             `json:"lowTraffic,omitempty"`
	MediumTraffic             *DefaultRolloutSpecificationMediumTraffic          `json:"mediumTraffic,omitempty"`
	ProviderRegistration      *DefaultRolloutSpecificationProviderRegistration   `json:"providerRegistration,omitempty"`
	ResourceTypeRegistrations []*ResourceTypeRegistration                        `json:"resourceTypeRegistrations,omitempty"`
	RestOfTheWorldGroupOne    *DefaultRolloutSpecificationRestOfTheWorldGroupOne `json:"restOfTheWorldGroupOne,omitempty"`
	RestOfTheWorldGroupTwo    *DefaultRolloutSpecificationRestOfTheWorldGroupTwo `json:"restOfTheWorldGroupTwo,omitempty"`
}

// MarshalJSON implements the json.Marshaller interface for type DefaultRolloutSpecification.
func (d DefaultRolloutSpecification) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	d.marshalInternal(objectMap)
	return json.Marshal(objectMap)
}

func (d DefaultRolloutSpecification) marshalInternal(objectMap map[string]interface{}) {
	populate(objectMap, "canary", d.Canary)
	populate(objectMap, "highTraffic", d.HighTraffic)
	populate(objectMap, "lowTraffic", d.LowTraffic)
	populate(objectMap, "mediumTraffic", d.MediumTraffic)
	populate(objectMap, "providerRegistration", d.ProviderRegistration)
	populate(objectMap, "resourceTypeRegistrations", d.ResourceTypeRegistrations)
	populate(objectMap, "restOfTheWorldGroupOne", d.RestOfTheWorldGroupOne)
	populate(objectMap, "restOfTheWorldGroupTwo", d.RestOfTheWorldGroupTwo)
}

type DefaultRolloutSpecificationCanary struct {
	CanaryTrafficRegionRolloutConfiguration
}

type DefaultRolloutSpecificationHighTraffic struct {
	TrafficRegionRolloutConfiguration
}

type DefaultRolloutSpecificationLowTraffic struct {
	TrafficRegionRolloutConfiguration
}

type DefaultRolloutSpecificationMediumTraffic struct {
	TrafficRegionRolloutConfiguration
}

type DefaultRolloutSpecificationProviderRegistration struct {
	ProviderRegistration
}

type DefaultRolloutSpecificationRestOfTheWorldGroupOne struct {
	TrafficRegionRolloutConfiguration
}

type DefaultRolloutSpecificationRestOfTheWorldGroupTwo struct {
	TrafficRegionRolloutConfiguration
}

type DefaultRolloutStatus struct {
	RolloutStatusBase
	NextTrafficRegion                *TrafficRegionCategory            `json:"nextTrafficRegion,omitempty"`
	NextTrafficRegionScheduledTime   *time.Time                        `json:"nextTrafficRegionScheduledTime,omitempty"`
	SubscriptionReregistrationResult *SubscriptionReregistrationResult `json:"subscriptionReregistrationResult,omitempty"`
}

// MarshalJSON implements the json.Marshaller interface for type DefaultRolloutStatus.
func (d DefaultRolloutStatus) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	d.marshalInternal(objectMap)
	return json.Marshal(objectMap)
}

// UnmarshalJSON implements the json.Unmarshaller interface for type DefaultRolloutStatus.
func (d *DefaultRolloutStatus) UnmarshalJSON(data []byte) error {
	var rawMsg map[string]json.RawMessage
	if err := json.Unmarshal(data, &rawMsg); err != nil {
		return err
	}
	return d.unmarshalInternal(rawMsg)
}

func (d DefaultRolloutStatus) marshalInternal(objectMap map[string]interface{}) {
	d.RolloutStatusBase.marshalInternal(objectMap)
	populate(objectMap, "nextTrafficRegion", d.NextTrafficRegion)
	populateTimeRFC3339(objectMap, "nextTrafficRegionScheduledTime", d.NextTrafficRegionScheduledTime)
	populate(objectMap, "subscriptionReregistrationResult", d.SubscriptionReregistrationResult)
}

func (d *DefaultRolloutStatus) unmarshalInternal(rawMsg map[string]json.RawMessage) error {
	for key, val := range rawMsg {
		var err error
		switch key {
		case "nextTrafficRegion":
			err = unpopulate(val, &d.NextTrafficRegion)
			delete(rawMsg, key)
		case "nextTrafficRegionScheduledTime":
			err = unpopulateTimeRFC3339(val, &d.NextTrafficRegionScheduledTime)
			delete(rawMsg, key)
		case "subscriptionReregistrationResult":
			err = unpopulate(val, &d.SubscriptionReregistrationResult)
			delete(rawMsg, key)
		}
		if err != nil {
			return err
		}
	}
	if err := d.RolloutStatusBase.unmarshalInternal(rawMsg); err != nil {
		return err
	}
	return nil
}

// DefaultRolloutsBeginCreateOrUpdateOptions contains the optional parameters for the DefaultRollouts.BeginCreateOrUpdate method.
type DefaultRolloutsBeginCreateOrUpdateOptions struct {
	// placeholder for future optional parameters
}

// DefaultRolloutsDeleteOptions contains the optional parameters for the DefaultRollouts.Delete method.
type DefaultRolloutsDeleteOptions struct {
	// placeholder for future optional parameters
}

// DefaultRolloutsGetOptions contains the optional parameters for the DefaultRollouts.Get method.
type DefaultRolloutsGetOptions struct {
	// placeholder for future optional parameters
}

// DefaultRolloutsListByProviderRegistrationOptions contains the optional parameters for the DefaultRollouts.ListByProviderRegistration method.
type DefaultRolloutsListByProviderRegistrationOptions struct {
	// placeholder for future optional parameters
}

// DefaultRolloutsStopOptions contains the optional parameters for the DefaultRollouts.Stop method.
type DefaultRolloutsStopOptions struct {
	// placeholder for future optional parameters
}

// Error - Standard error object.
type Error struct {
	// READ-ONLY; Server-defined set of error codes.
	Code *string `json:"code,omitempty" azure:"ro"`

	// READ-ONLY; Array of details about specific errors that led to this reported error.
	Details []*Error `json:"details,omitempty" azure:"ro"`

	// READ-ONLY; Object containing more specific information than the current object about the error.
	InnerError *ErrorInnerError `json:"innerError,omitempty" azure:"ro"`

	// READ-ONLY; Human-readable representation of the error.
	Message *string `json:"message,omitempty" azure:"ro"`

	// READ-ONLY; Target of the error.
	Target *string `json:"target,omitempty" azure:"ro"`
}

// MarshalJSON implements the json.Marshaller interface for type Error.
func (e Error) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	e.marshalInternal(objectMap)
	return json.Marshal(objectMap)
}

func (e Error) marshalInternal(objectMap map[string]interface{}) {
	populate(objectMap, "code", e.Code)
	populate(objectMap, "details", e.Details)
	populate(objectMap, "innerError", e.InnerError)
	populate(objectMap, "message", e.Message)
	populate(objectMap, "target", e.Target)
}

// ErrorInnerError - Object containing more specific information than the current object about the error.
type ErrorInnerError struct {
	InnerError
}

// ErrorResponse - Standard error response.
// Implements the error and azcore.HTTPResponse interfaces.
type ErrorResponse struct {
	raw string
	// Standard error object.
	InnerError *ErrorResponseError `json:"error,omitempty"`
}

// Error implements the error interface for type ErrorResponse.
// The contents of the error text are not contractual and subject to change.
func (e ErrorResponse) Error() string {
	return e.raw
}

// ErrorResponseError - Standard error object.
type ErrorResponseError struct {
	Error
}

type ExtendedErrorInfo struct {
	AdditionalInfo []*TypedErrorInfo    `json:"additionalInfo,omitempty"`
	Code           *string              `json:"code,omitempty"`
	Details        []*ExtendedErrorInfo `json:"details,omitempty"`
	Message        *string              `json:"message,omitempty"`
	Target         *string              `json:"target,omitempty"`
}

// MarshalJSON implements the json.Marshaller interface for type ExtendedErrorInfo.
func (e ExtendedErrorInfo) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "additionalInfo", e.AdditionalInfo)
	populate(objectMap, "code", e.Code)
	populate(objectMap, "details", e.Details)
	populate(objectMap, "message", e.Message)
	populate(objectMap, "target", e.Target)
	return json.Marshal(objectMap)
}

type ExtendedLocationOptions struct {
	SupportedPolicy *string `json:"supportedPolicy,omitempty"`
	Type            *string `json:"type,omitempty"`
}

type ExtensionOptions struct {
	Request  []*ExtensionOptionType `json:"request,omitempty"`
	Response []*ExtensionOptionType `json:"response,omitempty"`
}

// MarshalJSON implements the json.Marshaller interface for type ExtensionOptions.
func (e ExtensionOptions) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	e.marshalInternal(objectMap)
	return json.Marshal(objectMap)
}

func (e ExtensionOptions) marshalInternal(objectMap map[string]interface{}) {
	populate(objectMap, "request", e.Request)
	populate(objectMap, "response", e.Response)
}

type FeaturesRule struct {
	// REQUIRED
	RequiredFeaturesPolicy *FeaturesPolicy `json:"requiredFeaturesPolicy,omitempty"`
}

type IdentityManagement struct {
	Type *IdentityManagementTypes `json:"type,omitempty"`
}

type IdentityManagementProperties struct {
	ApplicationID *string                  `json:"applicationId,omitempty"`
	Type          *IdentityManagementTypes `json:"type,omitempty"`
}

// InnerError - Inner error containing list of errors.
type InnerError struct {
	// OPTIONAL; Contains additional key/value pairs not defined in the schema.
	AdditionalProperties map[string]map[string]interface{}

	// READ-ONLY; Specific error code than was provided by the containing error.
	Code *string `json:"code,omitempty" azure:"ro"`

	// READ-ONLY; Object containing more specific information than the current object about the error.
	InnerError map[string]interface{} `json:"innerError,omitempty" azure:"ro"`
}

// MarshalJSON implements the json.Marshaller interface for type InnerError.
func (i InnerError) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	i.marshalInternal(objectMap)
	return json.Marshal(objectMap)
}

// UnmarshalJSON implements the json.Unmarshaller interface for type InnerError.
func (i *InnerError) UnmarshalJSON(data []byte) error {
	var rawMsg map[string]json.RawMessage
	if err := json.Unmarshal(data, &rawMsg); err != nil {
		return err
	}
	return i.unmarshalInternal(rawMsg)
}

func (i InnerError) marshalInternal(objectMap map[string]interface{}) {
	populate(objectMap, "code", i.Code)
	populate(objectMap, "innerError", i.InnerError)
	if i.AdditionalProperties != nil {
		for key, val := range i.AdditionalProperties {
			objectMap[key] = val
		}
	}
}

func (i *InnerError) unmarshalInternal(rawMsg map[string]json.RawMessage) error {
	for key, val := range rawMsg {
		var err error
		switch key {
		case "code":
			err = unpopulate(val, &i.Code)
			delete(rawMsg, key)
		case "innerError":
			err = unpopulate(val, &i.InnerError)
			delete(rawMsg, key)
		default:
			if i.AdditionalProperties == nil {
				i.AdditionalProperties = map[string]map[string]interface{}{}
			}
			if val != nil {
				var aux map[string]interface{}
				err = json.Unmarshal(val, &aux)
				i.AdditionalProperties[key] = aux
			}
			delete(rawMsg, key)
		}
		if err != nil {
			return err
		}
	}
	return nil
}

type LightHouseAuthorization struct {
	// REQUIRED
	PrincipalID *string `json:"principalId,omitempty"`

	// REQUIRED
	RoleDefinitionID *string `json:"roleDefinitionId,omitempty"`
}

type LinkedAccessCheck struct {
	ActionName       *string `json:"actionName,omitempty"`
	LinkedAction     *string `json:"linkedAction,omitempty"`
	LinkedActionVerb *string `json:"linkedActionVerb,omitempty"`
	LinkedProperty   *string `json:"linkedProperty,omitempty"`
	LinkedType       *string `json:"linkedType,omitempty"`
}

type LinkedOperationRule struct {
	// REQUIRED
	LinkedAction *LinkedAction `json:"linkedAction,omitempty"`

	// REQUIRED
	LinkedOperation *LinkedOperation `json:"linkedOperation,omitempty"`
}

type LoggingHiddenPropertyPath struct {
	HiddenPathsOnRequest  []*string `json:"hiddenPathsOnRequest,omitempty"`
	HiddenPathsOnResponse []*string `json:"hiddenPathsOnResponse,omitempty"`
}

// MarshalJSON implements the json.Marshaller interface for type LoggingHiddenPropertyPath.
func (l LoggingHiddenPropertyPath) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	l.marshalInternal(objectMap)
	return json.Marshal(objectMap)
}

func (l LoggingHiddenPropertyPath) marshalInternal(objectMap map[string]interface{}) {
	populate(objectMap, "hiddenPathsOnRequest", l.HiddenPathsOnRequest)
	populate(objectMap, "hiddenPathsOnResponse", l.HiddenPathsOnResponse)
}

type LoggingRule struct {
	// REQUIRED
	Action *string `json:"action,omitempty"`

	// REQUIRED
	DetailLevel *LoggingDetails `json:"detailLevel,omitempty"`

	// REQUIRED
	Direction           *LoggingDirections              `json:"direction,omitempty"`
	HiddenPropertyPaths *LoggingRuleHiddenPropertyPaths `json:"hiddenPropertyPaths,omitempty"`
}

type LoggingRuleHiddenPropertyPaths struct {
	LoggingHiddenPropertyPath
}

type NotificationEndpoint struct {
	Locations               []*string `json:"locations,omitempty"`
	NotificationDestination *string   `json:"notificationDestination,omitempty"`
}

// MarshalJSON implements the json.Marshaller interface for type NotificationEndpoint.
func (n NotificationEndpoint) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "locations", n.Locations)
	populate(objectMap, "notificationDestination", n.NotificationDestination)
	return json.Marshal(objectMap)
}

// NotificationRegistration - The notification registration definition.
type NotificationRegistration struct {
	Resource
	Properties *NotificationRegistrationProperties `json:"properties,omitempty"`
}

type NotificationRegistrationArrayResponseWithContinuation struct {
	// The URL to get to the next set of results, if there are any.
	NextLink *string                     `json:"nextLink,omitempty"`
	Value    []*NotificationRegistration `json:"value,omitempty"`
}

// MarshalJSON implements the json.Marshaller interface for type NotificationRegistrationArrayResponseWithContinuation.
func (n NotificationRegistrationArrayResponseWithContinuation) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "nextLink", n.NextLink)
	populate(objectMap, "value", n.Value)
	return json.Marshal(objectMap)
}

type NotificationRegistrationProperties struct {
	NotificationRegistrationPropertiesAutoGenerated
}

type NotificationRegistrationPropertiesAutoGenerated struct {
	IncludedEvents        []*string               `json:"includedEvents,omitempty"`
	MessageScope          *MessageScope           `json:"messageScope,omitempty"`
	NotificationEndpoints []*NotificationEndpoint `json:"notificationEndpoints,omitempty"`
	NotificationMode      *NotificationMode       `json:"notificationMode,omitempty"`
	ProvisioningState     *ProvisioningState      `json:"provisioningState,omitempty"`
}

// MarshalJSON implements the json.Marshaller interface for type NotificationRegistrationPropertiesAutoGenerated.
func (n NotificationRegistrationPropertiesAutoGenerated) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	n.marshalInternal(objectMap)
	return json.Marshal(objectMap)
}

func (n NotificationRegistrationPropertiesAutoGenerated) marshalInternal(objectMap map[string]interface{}) {
	populate(objectMap, "includedEvents", n.IncludedEvents)
	populate(objectMap, "messageScope", n.MessageScope)
	populate(objectMap, "notificationEndpoints", n.NotificationEndpoints)
	populate(objectMap, "notificationMode", n.NotificationMode)
	populate(objectMap, "provisioningState", n.ProvisioningState)
}

// NotificationRegistrationsCreateOrUpdateOptions contains the optional parameters for the NotificationRegistrations.CreateOrUpdate method.
type NotificationRegistrationsCreateOrUpdateOptions struct {
	// placeholder for future optional parameters
}

// NotificationRegistrationsDeleteOptions contains the optional parameters for the NotificationRegistrations.Delete method.
type NotificationRegistrationsDeleteOptions struct {
	// placeholder for future optional parameters
}

// NotificationRegistrationsGetOptions contains the optional parameters for the NotificationRegistrations.Get method.
type NotificationRegistrationsGetOptions struct {
	// placeholder for future optional parameters
}

// NotificationRegistrationsListByProviderRegistrationOptions contains the optional parameters for the NotificationRegistrations.ListByProviderRegistration
// method.
type NotificationRegistrationsListByProviderRegistrationOptions struct {
	// placeholder for future optional parameters
}

type OperationsContent struct {
	Resource
	// Operations content.
	Properties *OperationsDefinition `json:"properties,omitempty"`
}

// OperationsCreateOrUpdateOptions contains the optional parameters for the Operations.CreateOrUpdate method.
type OperationsCreateOrUpdateOptions struct {
	// placeholder for future optional parameters
}

// OperationsDefinition - Properties of an Operation.
type OperationsDefinition struct {
	// REQUIRED; Display information of the operation.
	Display *OperationsDefinitionDisplay `json:"display,omitempty"`

	// REQUIRED; Name of the operation.
	Name       *string                         `json:"name,omitempty"`
	ActionType *OperationsDefinitionActionType `json:"actionType,omitempty"`

	// Indicates whether the operation applies to data-plane.
	IsDataAction *bool                       `json:"isDataAction,omitempty"`
	Origin       *OperationsDefinitionOrigin `json:"origin,omitempty"`

	// Anything
	Properties interface{} `json:"properties,omitempty"`
}

type OperationsDefinitionArrayResponseWithContinuation struct {
	// The URL to get to the next set of results, if there are any.
	NextLink *string                 `json:"nextLink,omitempty"`
	Value    []*OperationsDefinition `json:"value,omitempty"`
}

// MarshalJSON implements the json.Marshaller interface for type OperationsDefinitionArrayResponseWithContinuation.
func (o OperationsDefinitionArrayResponseWithContinuation) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "nextLink", o.NextLink)
	populate(objectMap, "value", o.Value)
	return json.Marshal(objectMap)
}

// OperationsDefinitionDisplay - Display information of the operation.
type OperationsDefinitionDisplay struct {
	OperationsDisplayDefinition
}

// OperationsDeleteOptions contains the optional parameters for the Operations.Delete method.
type OperationsDeleteOptions struct {
	// placeholder for future optional parameters
}

type OperationsDisplayDefinition struct {
	// REQUIRED
	Description *string `json:"description,omitempty"`

	// REQUIRED
	Operation *string `json:"operation,omitempty"`

	// REQUIRED
	Provider *string `json:"provider,omitempty"`

	// REQUIRED
	Resource *string `json:"resource,omitempty"`
}

// OperationsListByProviderRegistrationOptions contains the optional parameters for the Operations.ListByProviderRegistration method.
type OperationsListByProviderRegistrationOptions struct {
	// placeholder for future optional parameters
}

// OperationsListOptions contains the optional parameters for the Operations.List method.
type OperationsListOptions struct {
	// placeholder for future optional parameters
}

type OperationsPutContent struct {
	// REQUIRED
	Contents []*OperationsDefinition `json:"contents,omitempty"`
}

// MarshalJSON implements the json.Marshaller interface for type OperationsPutContent.
func (o OperationsPutContent) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "contents", o.Contents)
	return json.Marshal(objectMap)
}

// ProviderHubCheckinManifestOptions contains the optional parameters for the ProviderHub.CheckinManifest method.
type ProviderHubCheckinManifestOptions struct {
	// placeholder for future optional parameters
}

// ProviderHubGenerateManifestOptions contains the optional parameters for the ProviderHub.GenerateManifest method.
type ProviderHubGenerateManifestOptions struct {
	// placeholder for future optional parameters
}

type ProviderHubMetadata struct {
	ProviderAuthentication          *ProviderHubMetadataProviderAuthentication          `json:"providerAuthentication,omitempty"`
	ProviderAuthorizations          []*ResourceProviderAuthorization                    `json:"providerAuthorizations,omitempty"`
	ThirdPartyProviderAuthorization *ProviderHubMetadataThirdPartyProviderAuthorization `json:"thirdPartyProviderAuthorization,omitempty"`
}

// MarshalJSON implements the json.Marshaller interface for type ProviderHubMetadata.
func (p ProviderHubMetadata) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	p.marshalInternal(objectMap)
	return json.Marshal(objectMap)
}

func (p ProviderHubMetadata) marshalInternal(objectMap map[string]interface{}) {
	populate(objectMap, "providerAuthentication", p.ProviderAuthentication)
	populate(objectMap, "providerAuthorizations", p.ProviderAuthorizations)
	populate(objectMap, "thirdPartyProviderAuthorization", p.ThirdPartyProviderAuthorization)
}

type ProviderHubMetadataProviderAuthentication struct {
	ResourceProviderAuthentication
}

type ProviderHubMetadataThirdPartyProviderAuthorization struct {
	ThirdPartyProviderAuthorization
}

type ProviderRegistration struct {
	ProxyResource
	Properties *ProviderRegistrationProperties `json:"properties,omitempty"`
}

type ProviderRegistrationArrayResponseWithContinuation struct {
	// The URL to get to the next set of results, if there are any.
	NextLink *string                 `json:"nextLink,omitempty"`
	Value    []*ProviderRegistration `json:"value,omitempty"`
}

// MarshalJSON implements the json.Marshaller interface for type ProviderRegistrationArrayResponseWithContinuation.
func (p ProviderRegistrationArrayResponseWithContinuation) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "nextLink", p.NextLink)
	populate(objectMap, "value", p.Value)
	return json.Marshal(objectMap)
}

type ProviderRegistrationProperties struct {
	ProviderRegistrationPropertiesAutoGenerated
}

type ProviderRegistrationPropertiesAutoGenerated struct {
	ResourceProviderManifestProperties
	ProviderHubMetadata                             *ProviderRegistrationPropertiesProviderHubMetadata                             `json:"providerHubMetadata,omitempty"`
	ProvisioningState                               *ProvisioningState                                                             `json:"provisioningState,omitempty"`
	SubscriptionLifecycleNotificationSpecifications *ProviderRegistrationPropertiesSubscriptionLifecycleNotificationSpecifications `json:"subscriptionLifecycleNotificationSpecifications,omitempty"`
}

// MarshalJSON implements the json.Marshaller interface for type ProviderRegistrationPropertiesAutoGenerated.
func (p ProviderRegistrationPropertiesAutoGenerated) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	p.marshalInternal(objectMap)
	return json.Marshal(objectMap)
}

func (p ProviderRegistrationPropertiesAutoGenerated) marshalInternal(objectMap map[string]interface{}) {
	p.ResourceProviderManifestProperties.marshalInternal(objectMap)
	populate(objectMap, "providerHubMetadata", p.ProviderHubMetadata)
	populate(objectMap, "provisioningState", p.ProvisioningState)
	populate(objectMap, "subscriptionLifecycleNotificationSpecifications", p.SubscriptionLifecycleNotificationSpecifications)
}

type ProviderRegistrationPropertiesProviderHubMetadata struct {
	ProviderHubMetadata
}

type ProviderRegistrationPropertiesSubscriptionLifecycleNotificationSpecifications struct {
	SubscriptionLifecycleNotificationSpecifications
}

// ProviderRegistrationsBeginCreateOrUpdateOptions contains the optional parameters for the ProviderRegistrations.BeginCreateOrUpdate method.
type ProviderRegistrationsBeginCreateOrUpdateOptions struct {
	// placeholder for future optional parameters
}

// ProviderRegistrationsDeleteOptions contains the optional parameters for the ProviderRegistrations.Delete method.
type ProviderRegistrationsDeleteOptions struct {
	// placeholder for future optional parameters
}

// ProviderRegistrationsGenerateOperationsOptions contains the optional parameters for the ProviderRegistrations.GenerateOperations method.
type ProviderRegistrationsGenerateOperationsOptions struct {
	// placeholder for future optional parameters
}

// ProviderRegistrationsGetOptions contains the optional parameters for the ProviderRegistrations.Get method.
type ProviderRegistrationsGetOptions struct {
	// placeholder for future optional parameters
}

// ProviderRegistrationsListOptions contains the optional parameters for the ProviderRegistrations.List method.
type ProviderRegistrationsListOptions struct {
	// placeholder for future optional parameters
}

// ProxyResource - The resource model definition for a Azure Resource Manager proxy resource. It will not have tags and a location
type ProxyResource struct {
	Resource
}

type ReRegisterSubscriptionMetadata struct {
	// REQUIRED
	Enabled          *bool  `json:"enabled,omitempty"`
	ConcurrencyLimit *int32 `json:"concurrencyLimit,omitempty"`
}

type RequestHeaderOptions struct {
	OptInHeaders *OptInHeaderType `json:"optInHeaders,omitempty"`
}

// Resource - Common fields that are returned in the response for all Azure Resource Manager resources
type Resource struct {
	// READ-ONLY; Fully qualified resource ID for the resource. Ex - /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}
	ID *string `json:"id,omitempty" azure:"ro"`

	// READ-ONLY; The name of the resource
	Name *string `json:"name,omitempty" azure:"ro"`

	// READ-ONLY; The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or "Microsoft.Storage/storageAccounts"
	Type *string `json:"type,omitempty" azure:"ro"`
}

type ResourceMovePolicy struct {
	CrossResourceGroupMoveEnabled *bool `json:"crossResourceGroupMoveEnabled,omitempty"`
	CrossSubscriptionMoveEnabled  *bool `json:"crossSubscriptionMoveEnabled,omitempty"`
	ValidationRequired            *bool `json:"validationRequired,omitempty"`
}

type ResourceProviderAuthentication struct {
	// REQUIRED
	AllowedAudiences []*string `json:"allowedAudiences,omitempty"`
}

// MarshalJSON implements the json.Marshaller interface for type ResourceProviderAuthentication.
func (r ResourceProviderAuthentication) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	r.marshalInternal(objectMap)
	return json.Marshal(objectMap)
}

func (r ResourceProviderAuthentication) marshalInternal(objectMap map[string]interface{}) {
	populate(objectMap, "allowedAudiences", r.AllowedAudiences)
}

type ResourceProviderAuthorization struct {
	ApplicationID             *string `json:"applicationId,omitempty"`
	ManagedByRoleDefinitionID *string `json:"managedByRoleDefinitionId,omitempty"`
	RoleDefinitionID          *string `json:"roleDefinitionId,omitempty"`
}

type ResourceProviderCapabilities struct {
	// REQUIRED
	Effect *ResourceProviderCapabilitiesEffect `json:"effect,omitempty"`

	// REQUIRED
	QuotaID          *string   `json:"quotaId,omitempty"`
	RequiredFeatures []*string `json:"requiredFeatures,omitempty"`
}

// MarshalJSON implements the json.Marshaller interface for type ResourceProviderCapabilities.
func (r ResourceProviderCapabilities) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "effect", r.Effect)
	populate(objectMap, "quotaId", r.QuotaID)
	populate(objectMap, "requiredFeatures", r.RequiredFeatures)
	return json.Marshal(objectMap)
}

type ResourceProviderEndpoint struct {
	APIVersions      []*string                             `json:"apiVersions,omitempty"`
	Enabled          *bool                                 `json:"enabled,omitempty"`
	EndpointURI      *string                               `json:"endpointUri,omitempty"`
	FeaturesRule     *ResourceProviderEndpointFeaturesRule `json:"featuresRule,omitempty"`
	Locations        []*string                             `json:"locations,omitempty"`
	RequiredFeatures []*string                             `json:"requiredFeatures,omitempty"`
	Timeout          *string                               `json:"timeout,omitempty"`
}

// MarshalJSON implements the json.Marshaller interface for type ResourceProviderEndpoint.
func (r ResourceProviderEndpoint) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "apiVersions", r.APIVersions)
	populate(objectMap, "enabled", r.Enabled)
	populate(objectMap, "endpointUri", r.EndpointURI)
	populate(objectMap, "featuresRule", r.FeaturesRule)
	populate(objectMap, "locations", r.Locations)
	populate(objectMap, "requiredFeatures", r.RequiredFeatures)
	populate(objectMap, "timeout", r.Timeout)
	return json.Marshal(objectMap)
}

type ResourceProviderEndpointFeaturesRule struct {
	FeaturesRule
}

type ResourceProviderManagement struct {
	IncidentContactEmail   *string                                         `json:"incidentContactEmail,omitempty"`
	IncidentRoutingService *string                                         `json:"incidentRoutingService,omitempty"`
	IncidentRoutingTeam    *string                                         `json:"incidentRoutingTeam,omitempty"`
	ManifestOwners         []*string                                       `json:"manifestOwners,omitempty"`
	ResourceAccessPolicy   *ResourceProviderManagementResourceAccessPolicy `json:"resourceAccessPolicy,omitempty"`
	ResourceAccessRoles    []interface{}                                   `json:"resourceAccessRoles,omitempty"`
	SchemaOwners           []*string                                       `json:"schemaOwners,omitempty"`
	ServiceTreeInfos       []*ServiceTreeInfo                              `json:"serviceTreeInfos,omitempty"`
}

// MarshalJSON implements the json.Marshaller interface for type ResourceProviderManagement.
func (r ResourceProviderManagement) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	r.marshalInternal(objectMap)
	return json.Marshal(objectMap)
}

func (r ResourceProviderManagement) marshalInternal(objectMap map[string]interface{}) {
	populate(objectMap, "incidentContactEmail", r.IncidentContactEmail)
	populate(objectMap, "incidentRoutingService", r.IncidentRoutingService)
	populate(objectMap, "incidentRoutingTeam", r.IncidentRoutingTeam)
	populate(objectMap, "manifestOwners", r.ManifestOwners)
	populate(objectMap, "resourceAccessPolicy", r.ResourceAccessPolicy)
	populate(objectMap, "resourceAccessRoles", r.ResourceAccessRoles)
	populate(objectMap, "schemaOwners", r.SchemaOwners)
	populate(objectMap, "serviceTreeInfos", r.ServiceTreeInfos)
}

type ResourceProviderManifest struct {
	Capabilities                []*ResourceProviderCapabilities       `json:"capabilities,omitempty"`
	FeaturesRule                *ResourceProviderManifestFeaturesRule `json:"featuresRule,omitempty"`
	GlobalNotificationEndpoints []*ResourceProviderEndpoint           `json:"globalNotificationEndpoints,omitempty"`
	Management                  *ResourceProviderManifestManagement   `json:"management,omitempty"`

	// Anything
	Metadata                       interface{}                                             `json:"metadata,omitempty"`
	Namespace                      *string                                                 `json:"namespace,omitempty"`
	ProviderAuthentication         *ResourceProviderManifestProviderAuthentication         `json:"providerAuthentication,omitempty"`
	ProviderAuthorizations         []*ResourceProviderAuthorization                        `json:"providerAuthorizations,omitempty"`
	ProviderType                   *ResourceProviderType                                   `json:"providerType,omitempty"`
	ProviderVersion                *string                                                 `json:"providerVersion,omitempty"`
	ReRegisterSubscriptionMetadata *ResourceProviderManifestReRegisterSubscriptionMetadata `json:"reRegisterSubscriptionMetadata,omitempty"`
	RequestHeaderOptions           *ResourceProviderManifestRequestHeaderOptions           `json:"requestHeaderOptions,omitempty"`
	RequiredFeatures               []*string                                               `json:"requiredFeatures,omitempty"`
	ResourceTypes                  []*ResourceType                                         `json:"resourceTypes,omitempty"`
}

// MarshalJSON implements the json.Marshaller interface for type ResourceProviderManifest.
func (r ResourceProviderManifest) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "capabilities", r.Capabilities)
	populate(objectMap, "featuresRule", r.FeaturesRule)
	populate(objectMap, "globalNotificationEndpoints", r.GlobalNotificationEndpoints)
	populate(objectMap, "management", r.Management)
	populate(objectMap, "metadata", r.Metadata)
	populate(objectMap, "namespace", r.Namespace)
	populate(objectMap, "providerAuthentication", r.ProviderAuthentication)
	populate(objectMap, "providerAuthorizations", r.ProviderAuthorizations)
	populate(objectMap, "providerType", r.ProviderType)
	populate(objectMap, "providerVersion", r.ProviderVersion)
	populate(objectMap, "reRegisterSubscriptionMetadata", r.ReRegisterSubscriptionMetadata)
	populate(objectMap, "requestHeaderOptions", r.RequestHeaderOptions)
	populate(objectMap, "requiredFeatures", r.RequiredFeatures)
	populate(objectMap, "resourceTypes", r.ResourceTypes)
	return json.Marshal(objectMap)
}

type ResourceProviderManifestFeaturesRule struct {
	FeaturesRule
}

type ResourceProviderManifestManagement struct {
	ResourceProviderManagement
}

type ResourceProviderManifestProperties struct {
	Capabilities []*ResourceProviderCapabilities                 `json:"capabilities,omitempty"`
	FeaturesRule *ResourceProviderManifestPropertiesFeaturesRule `json:"featuresRule,omitempty"`
	Management   *ResourceProviderManifestPropertiesManagement   `json:"management,omitempty"`

	// Anything
	Metadata                  interface{}                                                  `json:"metadata,omitempty"`
	Namespace                 *string                                                      `json:"namespace,omitempty"`
	ProviderAuthentication    *ResourceProviderManifestPropertiesProviderAuthentication    `json:"providerAuthentication,omitempty"`
	ProviderAuthorizations    []*ResourceProviderAuthorization                             `json:"providerAuthorizations,omitempty"`
	ProviderType              *ResourceProviderType                                        `json:"providerType,omitempty"`
	ProviderVersion           *string                                                      `json:"providerVersion,omitempty"`
	RequestHeaderOptions      *ResourceProviderManifestPropertiesRequestHeaderOptions      `json:"requestHeaderOptions,omitempty"`
	RequiredFeatures          []*string                                                    `json:"requiredFeatures,omitempty"`
	TemplateDeploymentOptions *ResourceProviderManifestPropertiesTemplateDeploymentOptions `json:"templateDeploymentOptions,omitempty"`
}

// MarshalJSON implements the json.Marshaller interface for type ResourceProviderManifestProperties.
func (r ResourceProviderManifestProperties) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	r.marshalInternal(objectMap)
	return json.Marshal(objectMap)
}

func (r ResourceProviderManifestProperties) marshalInternal(objectMap map[string]interface{}) {
	populate(objectMap, "capabilities", r.Capabilities)
	populate(objectMap, "featuresRule", r.FeaturesRule)
	populate(objectMap, "management", r.Management)
	populate(objectMap, "metadata", r.Metadata)
	populate(objectMap, "namespace", r.Namespace)
	populate(objectMap, "providerAuthentication", r.ProviderAuthentication)
	populate(objectMap, "providerAuthorizations", r.ProviderAuthorizations)
	populate(objectMap, "providerType", r.ProviderType)
	populate(objectMap, "providerVersion", r.ProviderVersion)
	populate(objectMap, "requestHeaderOptions", r.RequestHeaderOptions)
	populate(objectMap, "requiredFeatures", r.RequiredFeatures)
	populate(objectMap, "templateDeploymentOptions", r.TemplateDeploymentOptions)
}

type ResourceProviderManifestPropertiesFeaturesRule struct {
	FeaturesRule
}

type ResourceProviderManifestPropertiesManagement struct {
	ResourceProviderManagement
}

type ResourceProviderManifestPropertiesProviderAuthentication struct {
	ResourceProviderAuthentication
}

type ResourceProviderManifestPropertiesRequestHeaderOptions struct {
	RequestHeaderOptions
}

type ResourceProviderManifestPropertiesTemplateDeploymentOptions struct {
	TemplateDeploymentOptions
}

type ResourceProviderManifestProviderAuthentication struct {
	ResourceProviderAuthentication
}

type ResourceProviderManifestReRegisterSubscriptionMetadata struct {
	ReRegisterSubscriptionMetadata
}

type ResourceProviderManifestRequestHeaderOptions struct {
	RequestHeaderOptions
}

type ResourceType struct {
	AllowedUnauthorizedActions  []*string                       `json:"allowedUnauthorizedActions,omitempty"`
	AuthorizationActionMappings []*AuthorizationActionMapping   `json:"authorizationActionMappings,omitempty"`
	DefaultAPIVersion           *string                         `json:"defaultApiVersion,omitempty"`
	DisallowedActionVerbs       []*string                       `json:"disallowedActionVerbs,omitempty"`
	Endpoints                   []*ResourceProviderEndpoint     `json:"endpoints,omitempty"`
	ExtendedLocations           []*ExtendedLocationOptions      `json:"extendedLocations,omitempty"`
	FeaturesRule                *ResourceTypeFeaturesRule       `json:"featuresRule,omitempty"`
	IdentityManagement          *ResourceTypeIdentityManagement `json:"identityManagement,omitempty"`
	LinkedAccessChecks          []*LinkedAccessCheck            `json:"linkedAccessChecks,omitempty"`
	LinkedOperationRules        []*LinkedOperationRule          `json:"linkedOperationRules,omitempty"`
	LoggingRules                []*LoggingRule                  `json:"loggingRules,omitempty"`
	MarketplaceType             *ResourceTypeMarketplaceType    `json:"marketplaceType,omitempty"`

	// Anything
	Metadata                 interface{}                           `json:"metadata,omitempty"`
	Name                     *string                               `json:"name,omitempty"`
	RequestHeaderOptions     *ResourceTypeRequestHeaderOptions     `json:"requestHeaderOptions,omitempty"`
	RequiredFeatures         []*string                             `json:"requiredFeatures,omitempty"`
	ResourceDeletionPolicy   *ManifestResourceDeletionPolicy       `json:"resourceDeletionPolicy,omitempty"`
	ResourceValidation       *ResourceValidation                   `json:"resourceValidation,omitempty"`
	RoutingType              *RoutingType                          `json:"routingType,omitempty"`
	SKULink                  *string                               `json:"skuLink,omitempty"`
	ServiceTreeInfos         []*ServiceTreeInfo                    `json:"serviceTreeInfos,omitempty"`
	SubscriptionStateRules   []*SubscriptionStateRule              `json:"subscriptionStateRules,omitempty"`
	TemplateDeploymentPolicy *ResourceTypeTemplateDeploymentPolicy `json:"templateDeploymentPolicy,omitempty"`
	ThrottlingRules          []*ThrottlingRule                     `json:"throttlingRules,omitempty"`
}

// MarshalJSON implements the json.Marshaller interface for type ResourceType.
func (r ResourceType) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "allowedUnauthorizedActions", r.AllowedUnauthorizedActions)
	populate(objectMap, "authorizationActionMappings", r.AuthorizationActionMappings)
	populate(objectMap, "defaultApiVersion", r.DefaultAPIVersion)
	populate(objectMap, "disallowedActionVerbs", r.DisallowedActionVerbs)
	populate(objectMap, "endpoints", r.Endpoints)
	populate(objectMap, "extendedLocations", r.ExtendedLocations)
	populate(objectMap, "featuresRule", r.FeaturesRule)
	populate(objectMap, "identityManagement", r.IdentityManagement)
	populate(objectMap, "linkedAccessChecks", r.LinkedAccessChecks)
	populate(objectMap, "linkedOperationRules", r.LinkedOperationRules)
	populate(objectMap, "loggingRules", r.LoggingRules)
	populate(objectMap, "marketplaceType", r.MarketplaceType)
	populate(objectMap, "metadata", r.Metadata)
	populate(objectMap, "name", r.Name)
	populate(objectMap, "requestHeaderOptions", r.RequestHeaderOptions)
	populate(objectMap, "requiredFeatures", r.RequiredFeatures)
	populate(objectMap, "resourceDeletionPolicy", r.ResourceDeletionPolicy)
	populate(objectMap, "resourceValidation", r.ResourceValidation)
	populate(objectMap, "routingType", r.RoutingType)
	populate(objectMap, "skuLink", r.SKULink)
	populate(objectMap, "serviceTreeInfos", r.ServiceTreeInfos)
	populate(objectMap, "subscriptionStateRules", r.SubscriptionStateRules)
	populate(objectMap, "templateDeploymentPolicy", r.TemplateDeploymentPolicy)
	populate(objectMap, "throttlingRules", r.ThrottlingRules)
	return json.Marshal(objectMap)
}

type ResourceTypeEndpoint struct {
	APIVersions      []*string                         `json:"apiVersions,omitempty"`
	Enabled          *bool                             `json:"enabled,omitempty"`
	Extensions       []*ResourceTypeExtension          `json:"extensions,omitempty"`
	FeaturesRule     *ResourceTypeEndpointFeaturesRule `json:"featuresRule,omitempty"`
	Locations        []*string                         `json:"locations,omitempty"`
	RequiredFeatures []*string                         `json:"requiredFeatures,omitempty"`
	Timeout          *string                           `json:"timeout,omitempty"`
}

// MarshalJSON implements the json.Marshaller interface for type ResourceTypeEndpoint.
func (r ResourceTypeEndpoint) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "apiVersions", r.APIVersions)
	populate(objectMap, "enabled", r.Enabled)
	populate(objectMap, "extensions", r.Extensions)
	populate(objectMap, "featuresRule", r.FeaturesRule)
	populate(objectMap, "locations", r.Locations)
	populate(objectMap, "requiredFeatures", r.RequiredFeatures)
	populate(objectMap, "timeout", r.Timeout)
	return json.Marshal(objectMap)
}

type ResourceTypeEndpointFeaturesRule struct {
	FeaturesRule
}

type ResourceTypeExtension struct {
	EndpointURI         *string              `json:"endpointUri,omitempty"`
	ExtensionCategories []*ExtensionCategory `json:"extensionCategories,omitempty"`
	Timeout             *string              `json:"timeout,omitempty"`
}

// MarshalJSON implements the json.Marshaller interface for type ResourceTypeExtension.
func (r ResourceTypeExtension) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "endpointUri", r.EndpointURI)
	populate(objectMap, "extensionCategories", r.ExtensionCategories)
	populate(objectMap, "timeout", r.Timeout)
	return json.Marshal(objectMap)
}

type ResourceTypeExtensionOptions struct {
	ResourceCreationBegin *ResourceTypeExtensionOptionsResourceCreationBegin `json:"resourceCreationBegin,omitempty"`
}

type ResourceTypeExtensionOptionsResourceCreationBegin struct {
	ExtensionOptions
}

type ResourceTypeFeaturesRule struct {
	FeaturesRule
}

type ResourceTypeIdentityManagement struct {
	IdentityManagement
}

type ResourceTypeRegistration struct {
	ProxyResource
	Properties *ResourceTypeRegistrationProperties `json:"properties,omitempty"`
}

type ResourceTypeRegistrationArrayResponseWithContinuation struct {
	// The URL to get to the next set of results, if there are any.
	NextLink *string                     `json:"nextLink,omitempty"`
	Value    []*ResourceTypeRegistration `json:"value,omitempty"`
}

// MarshalJSON implements the json.Marshaller interface for type ResourceTypeRegistrationArrayResponseWithContinuation.
func (r ResourceTypeRegistrationArrayResponseWithContinuation) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "nextLink", r.NextLink)
	populate(objectMap, "value", r.Value)
	return json.Marshal(objectMap)
}

type ResourceTypeRegistrationProperties struct {
	ResourceTypeRegistrationPropertiesAutoGenerated
}

type ResourceTypeRegistrationPropertiesAutoGenerated struct {
	AllowedUnauthorizedActions                      []*string                                                                          `json:"allowedUnauthorizedActions,omitempty"`
	AuthorizationActionMappings                     []*AuthorizationActionMapping                                                      `json:"authorizationActionMappings,omitempty"`
	CheckNameAvailabilitySpecifications             *ResourceTypeRegistrationPropertiesCheckNameAvailabilitySpecifications             `json:"checkNameAvailabilitySpecifications,omitempty"`
	DefaultAPIVersion                               *string                                                                            `json:"defaultApiVersion,omitempty"`
	DisallowedActionVerbs                           []*string                                                                          `json:"disallowedActionVerbs,omitempty"`
	EnableAsyncOperation                            *bool                                                                              `json:"enableAsyncOperation,omitempty"`
	EnableThirdPartyS2S                             *bool                                                                              `json:"enableThirdPartyS2S,omitempty"`
	Endpoints                                       []*ResourceTypeEndpoint                                                            `json:"endpoints,omitempty"`
	ExtendedLocations                               []*ExtendedLocationOptions                                                         `json:"extendedLocations,omitempty"`
	ExtensionOptions                                *ResourceTypeRegistrationPropertiesExtensionOptions                                `json:"extensionOptions,omitempty"`
	FeaturesRule                                    *ResourceTypeRegistrationPropertiesFeaturesRule                                    `json:"featuresRule,omitempty"`
	IdentityManagement                              *ResourceTypeRegistrationPropertiesIdentityManagement                              `json:"identityManagement,omitempty"`
	IsPureProxy                                     *bool                                                                              `json:"isPureProxy,omitempty"`
	LinkedAccessChecks                              []*LinkedAccessCheck                                                               `json:"linkedAccessChecks,omitempty"`
	LoggingRules                                    []*LoggingRule                                                                     `json:"loggingRules,omitempty"`
	MarketplaceType                                 *ResourceTypeRegistrationPropertiesMarketplaceType                                 `json:"marketplaceType,omitempty"`
	ProvisioningState                               *ProvisioningState                                                                 `json:"provisioningState,omitempty"`
	Regionality                                     *Regionality                                                                       `json:"regionality,omitempty"`
	RequestHeaderOptions                            *ResourceTypeRegistrationPropertiesRequestHeaderOptions                            `json:"requestHeaderOptions,omitempty"`
	RequiredFeatures                                []*string                                                                          `json:"requiredFeatures,omitempty"`
	ResourceDeletionPolicy                          *ResourceDeletionPolicy                                                            `json:"resourceDeletionPolicy,omitempty"`
	ResourceMovePolicy                              *ResourceTypeRegistrationPropertiesResourceMovePolicy                              `json:"resourceMovePolicy,omitempty"`
	RoutingType                                     *RoutingType                                                                       `json:"routingType,omitempty"`
	ServiceTreeInfos                                []*ServiceTreeInfo                                                                 `json:"serviceTreeInfos,omitempty"`
	SubscriptionLifecycleNotificationSpecifications *ResourceTypeRegistrationPropertiesSubscriptionLifecycleNotificationSpecifications `json:"subscriptionLifecycleNotificationSpecifications,omitempty"`
	SubscriptionStateRules                          []*SubscriptionStateRule                                                           `json:"subscriptionStateRules,omitempty"`
	SwaggerSpecifications                           []*SwaggerSpecification                                                            `json:"swaggerSpecifications,omitempty"`
	TemplateDeploymentOptions                       *ResourceTypeRegistrationPropertiesTemplateDeploymentOptions                       `json:"templateDeploymentOptions,omitempty"`
	ThrottlingRules                                 []*ThrottlingRule                                                                  `json:"throttlingRules,omitempty"`
}

// MarshalJSON implements the json.Marshaller interface for type ResourceTypeRegistrationPropertiesAutoGenerated.
func (r ResourceTypeRegistrationPropertiesAutoGenerated) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	r.marshalInternal(objectMap)
	return json.Marshal(objectMap)
}

func (r ResourceTypeRegistrationPropertiesAutoGenerated) marshalInternal(objectMap map[string]interface{}) {
	populate(objectMap, "allowedUnauthorizedActions", r.AllowedUnauthorizedActions)
	populate(objectMap, "authorizationActionMappings", r.AuthorizationActionMappings)
	populate(objectMap, "checkNameAvailabilitySpecifications", r.CheckNameAvailabilitySpecifications)
	populate(objectMap, "defaultApiVersion", r.DefaultAPIVersion)
	populate(objectMap, "disallowedActionVerbs", r.DisallowedActionVerbs)
	populate(objectMap, "enableAsyncOperation", r.EnableAsyncOperation)
	populate(objectMap, "enableThirdPartyS2S", r.EnableThirdPartyS2S)
	populate(objectMap, "endpoints", r.Endpoints)
	populate(objectMap, "extendedLocations", r.ExtendedLocations)
	populate(objectMap, "extensionOptions", r.ExtensionOptions)
	populate(objectMap, "featuresRule", r.FeaturesRule)
	populate(objectMap, "identityManagement", r.IdentityManagement)
	populate(objectMap, "isPureProxy", r.IsPureProxy)
	populate(objectMap, "linkedAccessChecks", r.LinkedAccessChecks)
	populate(objectMap, "loggingRules", r.LoggingRules)
	populate(objectMap, "marketplaceType", r.MarketplaceType)
	populate(objectMap, "provisioningState", r.ProvisioningState)
	populate(objectMap, "regionality", r.Regionality)
	populate(objectMap, "requestHeaderOptions", r.RequestHeaderOptions)
	populate(objectMap, "requiredFeatures", r.RequiredFeatures)
	populate(objectMap, "resourceDeletionPolicy", r.ResourceDeletionPolicy)
	populate(objectMap, "resourceMovePolicy", r.ResourceMovePolicy)
	populate(objectMap, "routingType", r.RoutingType)
	populate(objectMap, "serviceTreeInfos", r.ServiceTreeInfos)
	populate(objectMap, "subscriptionLifecycleNotificationSpecifications", r.SubscriptionLifecycleNotificationSpecifications)
	populate(objectMap, "subscriptionStateRules", r.SubscriptionStateRules)
	populate(objectMap, "swaggerSpecifications", r.SwaggerSpecifications)
	populate(objectMap, "templateDeploymentOptions", r.TemplateDeploymentOptions)
	populate(objectMap, "throttlingRules", r.ThrottlingRules)
}

type ResourceTypeRegistrationPropertiesCheckNameAvailabilitySpecifications struct {
	CheckNameAvailabilitySpecifications
}

type ResourceTypeRegistrationPropertiesExtensionOptions struct {
	ResourceTypeExtensionOptions
}

type ResourceTypeRegistrationPropertiesFeaturesRule struct {
	FeaturesRule
}

type ResourceTypeRegistrationPropertiesIdentityManagement struct {
	IdentityManagementProperties
}

type ResourceTypeRegistrationPropertiesRequestHeaderOptions struct {
	RequestHeaderOptions
}

type ResourceTypeRegistrationPropertiesResourceMovePolicy struct {
	ResourceMovePolicy
}

type ResourceTypeRegistrationPropertiesSubscriptionLifecycleNotificationSpecifications struct {
	SubscriptionLifecycleNotificationSpecifications
}

type ResourceTypeRegistrationPropertiesTemplateDeploymentOptions struct {
	TemplateDeploymentOptions
}

// ResourceTypeRegistrationsBeginCreateOrUpdateOptions contains the optional parameters for the ResourceTypeRegistrations.BeginCreateOrUpdate method.
type ResourceTypeRegistrationsBeginCreateOrUpdateOptions struct {
	// placeholder for future optional parameters
}

// ResourceTypeRegistrationsDeleteOptions contains the optional parameters for the ResourceTypeRegistrations.Delete method.
type ResourceTypeRegistrationsDeleteOptions struct {
	// placeholder for future optional parameters
}

// ResourceTypeRegistrationsGetOptions contains the optional parameters for the ResourceTypeRegistrations.Get method.
type ResourceTypeRegistrationsGetOptions struct {
	// placeholder for future optional parameters
}

// ResourceTypeRegistrationsListByProviderRegistrationOptions contains the optional parameters for the ResourceTypeRegistrations.ListByProviderRegistration
// method.
type ResourceTypeRegistrationsListByProviderRegistrationOptions struct {
	// placeholder for future optional parameters
}

type ResourceTypeRequestHeaderOptions struct {
	RequestHeaderOptions
}

type ResourceTypeSKU struct {
	// REQUIRED
	SKUSettings       []*SKUSetting      `json:"skuSettings,omitempty"`
	ProvisioningState *ProvisioningState `json:"provisioningState,omitempty"`
}

// MarshalJSON implements the json.Marshaller interface for type ResourceTypeSKU.
func (r ResourceTypeSKU) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	r.marshalInternal(objectMap)
	return json.Marshal(objectMap)
}

func (r ResourceTypeSKU) marshalInternal(objectMap map[string]interface{}) {
	populate(objectMap, "provisioningState", r.ProvisioningState)
	populate(objectMap, "skuSettings", r.SKUSettings)
}

type ResourceTypeTemplateDeploymentPolicy struct {
	TemplateDeploymentPolicy
}

type RolloutStatusBase struct {
	CompletedRegions []*string `json:"completedRegions,omitempty"`

	// Dictionary of
	FailedOrSkippedRegions map[string]*ExtendedErrorInfo `json:"failedOrSkippedRegions,omitempty"`
}

// MarshalJSON implements the json.Marshaller interface for type RolloutStatusBase.
func (r RolloutStatusBase) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	r.marshalInternal(objectMap)
	return json.Marshal(objectMap)
}

// UnmarshalJSON implements the json.Unmarshaller interface for type RolloutStatusBase.
func (r *RolloutStatusBase) UnmarshalJSON(data []byte) error {
	var rawMsg map[string]json.RawMessage
	if err := json.Unmarshal(data, &rawMsg); err != nil {
		return err
	}
	return r.unmarshalInternal(rawMsg)
}

func (r RolloutStatusBase) marshalInternal(objectMap map[string]interface{}) {
	populate(objectMap, "completedRegions", r.CompletedRegions)
	populate(objectMap, "failedOrSkippedRegions", r.FailedOrSkippedRegions)
}

func (r *RolloutStatusBase) unmarshalInternal(rawMsg map[string]json.RawMessage) error {
	for key, val := range rawMsg {
		var err error
		switch key {
		case "completedRegions":
			err = unpopulate(val, &r.CompletedRegions)
			delete(rawMsg, key)
		case "failedOrSkippedRegions":
			err = unpopulate(val, &r.FailedOrSkippedRegions)
			delete(rawMsg, key)
		}
		if err != nil {
			return err
		}
	}
	return nil
}

type SKUCapability struct {
	// REQUIRED
	Name *string `json:"name,omitempty"`

	// REQUIRED
	Value *string `json:"value,omitempty"`
}

type SKUCapacity struct {
	// REQUIRED
	Minimum   *int32        `json:"minimum,omitempty"`
	Default   *int32        `json:"default,omitempty"`
	Maximum   *int32        `json:"maximum,omitempty"`
	ScaleType *SKUScaleType `json:"scaleType,omitempty"`
}

type SKUCost struct {
	// REQUIRED
	MeterID      *string `json:"meterId,omitempty"`
	ExtendedUnit *string `json:"extendedUnit,omitempty"`
	Quantity     *int32  `json:"quantity,omitempty"`
}

type SKULocationInfo struct {
	// REQUIRED
	Location          *string              `json:"location,omitempty"`
	ExtendedLocations []*string            `json:"extendedLocations,omitempty"`
	Type              *SKULocationInfoType `json:"type,omitempty"`
	ZoneDetails       []*SKUZoneDetail     `json:"zoneDetails,omitempty"`
	Zones             []*string            `json:"zones,omitempty"`
}

// MarshalJSON implements the json.Marshaller interface for type SKULocationInfo.
func (s SKULocationInfo) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "extendedLocations", s.ExtendedLocations)
	populate(objectMap, "location", s.Location)
	populate(objectMap, "type", s.Type)
	populate(objectMap, "zoneDetails", s.ZoneDetails)
	populate(objectMap, "zones", s.Zones)
	return json.Marshal(objectMap)
}

type SKUResource struct {
	ProxyResource
	Properties *SKUResourceProperties `json:"properties,omitempty"`
}

type SKUResourceArrayResponseWithContinuation struct {
	// The URL to get to the next set of results, if there are any.
	NextLink *string        `json:"nextLink,omitempty"`
	Value    []*SKUResource `json:"value,omitempty"`
}

// MarshalJSON implements the json.Marshaller interface for type SKUResourceArrayResponseWithContinuation.
func (s SKUResourceArrayResponseWithContinuation) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "nextLink", s.NextLink)
	populate(objectMap, "value", s.Value)
	return json.Marshal(objectMap)
}

type SKUResourceProperties struct {
	ResourceTypeSKU
}

type SKUSetting struct {
	// REQUIRED
	Name             *string             `json:"name,omitempty"`
	Capabilities     []*SKUCapability    `json:"capabilities,omitempty"`
	Capacity         *SKUSettingCapacity `json:"capacity,omitempty"`
	Costs            []*SKUCost          `json:"costs,omitempty"`
	Family           *string             `json:"family,omitempty"`
	Kind             *string             `json:"kind,omitempty"`
	LocationInfo     []*SKULocationInfo  `json:"locationInfo,omitempty"`
	Locations        []*string           `json:"locations,omitempty"`
	RequiredFeatures []*string           `json:"requiredFeatures,omitempty"`
	RequiredQuotaIDs []*string           `json:"requiredQuotaIds,omitempty"`
	Size             *string             `json:"size,omitempty"`
	Tier             *string             `json:"tier,omitempty"`
}

// MarshalJSON implements the json.Marshaller interface for type SKUSetting.
func (s SKUSetting) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "capabilities", s.Capabilities)
	populate(objectMap, "capacity", s.Capacity)
	populate(objectMap, "costs", s.Costs)
	populate(objectMap, "family", s.Family)
	populate(objectMap, "kind", s.Kind)
	populate(objectMap, "locationInfo", s.LocationInfo)
	populate(objectMap, "locations", s.Locations)
	populate(objectMap, "name", s.Name)
	populate(objectMap, "requiredFeatures", s.RequiredFeatures)
	populate(objectMap, "requiredQuotaIds", s.RequiredQuotaIDs)
	populate(objectMap, "size", s.Size)
	populate(objectMap, "tier", s.Tier)
	return json.Marshal(objectMap)
}

type SKUSettingCapacity struct {
	SKUCapacity
}

type SKUZoneDetail struct {
	Capabilities []*SKUCapability `json:"capabilities,omitempty"`
	Name         []*string        `json:"name,omitempty"`
}

// MarshalJSON implements the json.Marshaller interface for type SKUZoneDetail.
func (s SKUZoneDetail) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "capabilities", s.Capabilities)
	populate(objectMap, "name", s.Name)
	return json.Marshal(objectMap)
}

// SKUsCreateOrUpdateNestedResourceTypeFirstOptions contains the optional parameters for the SKUs.CreateOrUpdateNestedResourceTypeFirst method.
type SKUsCreateOrUpdateNestedResourceTypeFirstOptions struct {
	// placeholder for future optional parameters
}

// SKUsCreateOrUpdateNestedResourceTypeSecondOptions contains the optional parameters for the SKUs.CreateOrUpdateNestedResourceTypeSecond method.
type SKUsCreateOrUpdateNestedResourceTypeSecondOptions struct {
	// placeholder for future optional parameters
}

// SKUsCreateOrUpdateNestedResourceTypeThirdOptions contains the optional parameters for the SKUs.CreateOrUpdateNestedResourceTypeThird method.
type SKUsCreateOrUpdateNestedResourceTypeThirdOptions struct {
	// placeholder for future optional parameters
}

// SKUsCreateOrUpdateOptions contains the optional parameters for the SKUs.CreateOrUpdate method.
type SKUsCreateOrUpdateOptions struct {
	// placeholder for future optional parameters
}

// SKUsDeleteNestedResourceTypeFirstOptions contains the optional parameters for the SKUs.DeleteNestedResourceTypeFirst method.
type SKUsDeleteNestedResourceTypeFirstOptions struct {
	// placeholder for future optional parameters
}

// SKUsDeleteNestedResourceTypeSecondOptions contains the optional parameters for the SKUs.DeleteNestedResourceTypeSecond method.
type SKUsDeleteNestedResourceTypeSecondOptions struct {
	// placeholder for future optional parameters
}

// SKUsDeleteNestedResourceTypeThirdOptions contains the optional parameters for the SKUs.DeleteNestedResourceTypeThird method.
type SKUsDeleteNestedResourceTypeThirdOptions struct {
	// placeholder for future optional parameters
}

// SKUsDeleteOptions contains the optional parameters for the SKUs.Delete method.
type SKUsDeleteOptions struct {
	// placeholder for future optional parameters
}

// SKUsGetNestedResourceTypeFirstOptions contains the optional parameters for the SKUs.GetNestedResourceTypeFirst method.
type SKUsGetNestedResourceTypeFirstOptions struct {
	// placeholder for future optional parameters
}

// SKUsGetNestedResourceTypeSecondOptions contains the optional parameters for the SKUs.GetNestedResourceTypeSecond method.
type SKUsGetNestedResourceTypeSecondOptions struct {
	// placeholder for future optional parameters
}

// SKUsGetNestedResourceTypeThirdOptions contains the optional parameters for the SKUs.GetNestedResourceTypeThird method.
type SKUsGetNestedResourceTypeThirdOptions struct {
	// placeholder for future optional parameters
}

// SKUsGetOptions contains the optional parameters for the SKUs.Get method.
type SKUsGetOptions struct {
	// placeholder for future optional parameters
}

// SKUsListByResourceTypeRegistrationsNestedResourceTypeFirstOptions contains the optional parameters for the SKUs.ListByResourceTypeRegistrationsNestedResourceTypeFirst
// method.
type SKUsListByResourceTypeRegistrationsNestedResourceTypeFirstOptions struct {
	// placeholder for future optional parameters
}

// SKUsListByResourceTypeRegistrationsNestedResourceTypeSecondOptions contains the optional parameters for the SKUs.ListByResourceTypeRegistrationsNestedResourceTypeSecond
// method.
type SKUsListByResourceTypeRegistrationsNestedResourceTypeSecondOptions struct {
	// placeholder for future optional parameters
}

// SKUsListByResourceTypeRegistrationsNestedResourceTypeThirdOptions contains the optional parameters for the SKUs.ListByResourceTypeRegistrationsNestedResourceTypeThird
// method.
type SKUsListByResourceTypeRegistrationsNestedResourceTypeThirdOptions struct {
	// placeholder for future optional parameters
}

// SKUsListByResourceTypeRegistrationsOptions contains the optional parameters for the SKUs.ListByResourceTypeRegistrations method.
type SKUsListByResourceTypeRegistrationsOptions struct {
	// placeholder for future optional parameters
}

type ServiceTreeInfo struct {
	ComponentID *string `json:"componentId,omitempty"`
	ServiceID   *string `json:"serviceId,omitempty"`
}

type SubscriptionLifecycleNotificationSpecifications struct {
	SoftDeleteTTL                    *string                            `json:"softDeleteTTL,omitempty"`
	SubscriptionStateOverrideActions []*SubscriptionStateOverrideAction `json:"subscriptionStateOverrideActions,omitempty"`
}

// MarshalJSON implements the json.Marshaller interface for type SubscriptionLifecycleNotificationSpecifications.
func (s SubscriptionLifecycleNotificationSpecifications) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	s.marshalInternal(objectMap)
	return json.Marshal(objectMap)
}

func (s SubscriptionLifecycleNotificationSpecifications) marshalInternal(objectMap map[string]interface{}) {
	populate(objectMap, "softDeleteTTL", s.SoftDeleteTTL)
	populate(objectMap, "subscriptionStateOverrideActions", s.SubscriptionStateOverrideActions)
}

type SubscriptionStateOverrideAction struct {
	// REQUIRED
	Action *SubscriptionNotificationOperation `json:"action,omitempty"`

	// REQUIRED
	State *SubscriptionTransitioningState `json:"state,omitempty"`
}

type SubscriptionStateRule struct {
	AllowedActions []*string          `json:"allowedActions,omitempty"`
	State          *SubscriptionState `json:"state,omitempty"`
}

// MarshalJSON implements the json.Marshaller interface for type SubscriptionStateRule.
func (s SubscriptionStateRule) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "allowedActions", s.AllowedActions)
	populate(objectMap, "state", s.State)
	return json.Marshal(objectMap)
}

type SwaggerSpecification struct {
	APIVersions          []*string `json:"apiVersions,omitempty"`
	SwaggerSpecFolderURI *string   `json:"swaggerSpecFolderUri,omitempty"`
}

// MarshalJSON implements the json.Marshaller interface for type SwaggerSpecification.
func (s SwaggerSpecification) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "apiVersions", s.APIVersions)
	populate(objectMap, "swaggerSpecFolderUri", s.SwaggerSpecFolderURI)
	return json.Marshal(objectMap)
}

type TemplateDeploymentOptions struct {
	PreflightOptions   []*PreflightOption `json:"preflightOptions,omitempty"`
	PreflightSupported *bool              `json:"preflightSupported,omitempty"`
}

// MarshalJSON implements the json.Marshaller interface for type TemplateDeploymentOptions.
func (t TemplateDeploymentOptions) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	t.marshalInternal(objectMap)
	return json.Marshal(objectMap)
}

func (t TemplateDeploymentOptions) marshalInternal(objectMap map[string]interface{}) {
	populate(objectMap, "preflightOptions", t.PreflightOptions)
	populate(objectMap, "preflightSupported", t.PreflightSupported)
}

type TemplateDeploymentPolicy struct {
	// REQUIRED
	Capabilities *TemplateDeploymentCapabilities `json:"capabilities,omitempty"`

	// REQUIRED
	PreflightOptions *TemplateDeploymentPreflightOptions `json:"preflightOptions,omitempty"`
}

type ThirdPartyProviderAuthorization struct {
	Authorizations    []*LightHouseAuthorization `json:"authorizations,omitempty"`
	ManagedByTenantID *string                    `json:"managedByTenantId,omitempty"`
}

// MarshalJSON implements the json.Marshaller interface for type ThirdPartyProviderAuthorization.
func (t ThirdPartyProviderAuthorization) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	t.marshalInternal(objectMap)
	return json.Marshal(objectMap)
}

func (t ThirdPartyProviderAuthorization) marshalInternal(objectMap map[string]interface{}) {
	populate(objectMap, "authorizations", t.Authorizations)
	populate(objectMap, "managedByTenantId", t.ManagedByTenantID)
}

type ThrottlingMetric struct {
	// REQUIRED
	Limit *int64 `json:"limit,omitempty"`

	// REQUIRED
	Type     *ThrottlingMetricType `json:"type,omitempty"`
	Interval *string               `json:"interval,omitempty"`
}

type ThrottlingRule struct {
	// REQUIRED
	Action *string `json:"action,omitempty"`

	// REQUIRED
	Metrics          []*ThrottlingMetric `json:"metrics,omitempty"`
	RequiredFeatures []*string           `json:"requiredFeatures,omitempty"`
}

// MarshalJSON implements the json.Marshaller interface for type ThrottlingRule.
func (t ThrottlingRule) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "action", t.Action)
	populate(objectMap, "metrics", t.Metrics)
	populate(objectMap, "requiredFeatures", t.RequiredFeatures)
	return json.Marshal(objectMap)
}

type TrafficRegionRolloutConfiguration struct {
	TrafficRegions
	WaitDuration *string `json:"waitDuration,omitempty"`
}

// MarshalJSON implements the json.Marshaller interface for type TrafficRegionRolloutConfiguration.
func (t TrafficRegionRolloutConfiguration) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	t.marshalInternal(objectMap)
	return json.Marshal(objectMap)
}

func (t TrafficRegionRolloutConfiguration) marshalInternal(objectMap map[string]interface{}) {
	t.TrafficRegions.marshalInternal(objectMap)
	populate(objectMap, "waitDuration", t.WaitDuration)
}

type TrafficRegions struct {
	Regions []*string `json:"regions,omitempty"`
}

// MarshalJSON implements the json.Marshaller interface for type TrafficRegions.
func (t TrafficRegions) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	t.marshalInternal(objectMap)
	return json.Marshal(objectMap)
}

func (t TrafficRegions) marshalInternal(objectMap map[string]interface{}) {
	populate(objectMap, "regions", t.Regions)
}

type TypedErrorInfo struct {
	// REQUIRED
	Type *string `json:"type,omitempty"`

	// READ-ONLY; Any object
	Info map[string]interface{} `json:"info,omitempty" azure:"ro"`
}

func populate(m map[string]interface{}, k string, v interface{}) {
	if v == nil {
		return
	} else if azcore.IsNullValue(v) {
		m[k] = nil
	} else if !reflect.ValueOf(v).IsNil() {
		m[k] = v
	}
}

func unpopulate(data json.RawMessage, v interface{}) error {
	if data == nil {
		return nil
	}
	return json.Unmarshal(data, v)
}
