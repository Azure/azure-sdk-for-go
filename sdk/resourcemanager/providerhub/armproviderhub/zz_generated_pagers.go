//go:build go1.16
// +build go1.16

// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

package armproviderhub

import (
	"context"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/policy"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/runtime"
	"net/http"
	"reflect"
)

// CustomRolloutsListByProviderRegistrationPager provides operations for iterating over paged responses.
type CustomRolloutsListByProviderRegistrationPager struct {
	client    *CustomRolloutsClient
	current   CustomRolloutsListByProviderRegistrationResponse
	err       error
	requester func(context.Context) (*policy.Request, error)
	advancer  func(context.Context, CustomRolloutsListByProviderRegistrationResponse) (*policy.Request, error)
}

// Err returns the last error encountered while paging.
func (p *CustomRolloutsListByProviderRegistrationPager) Err() error {
	return p.err
}

// NextPage returns true if the pager advanced to the next page.
// Returns false if there are no more pages or an error occurred.
func (p *CustomRolloutsListByProviderRegistrationPager) NextPage(ctx context.Context) bool {
	var req *policy.Request
	var err error
	if !reflect.ValueOf(p.current).IsZero() {
		if p.current.CustomRolloutArrayResponseWithContinuation.NextLink == nil || len(*p.current.CustomRolloutArrayResponseWithContinuation.NextLink) == 0 {
			return false
		}
		req, err = p.advancer(ctx, p.current)
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		p.err = err
		return false
	}
	resp, err := p.client.pl.Do(req)
	if err != nil {
		p.err = err
		return false
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {
		p.err = p.client.listByProviderRegistrationHandleError(resp)
		return false
	}
	result, err := p.client.listByProviderRegistrationHandleResponse(resp)
	if err != nil {
		p.err = err
		return false
	}
	p.current = result
	return true
}

// PageResponse returns the current CustomRolloutsListByProviderRegistrationResponse page.
func (p *CustomRolloutsListByProviderRegistrationPager) PageResponse() CustomRolloutsListByProviderRegistrationResponse {
	return p.current
}

// DefaultRolloutsListByProviderRegistrationPager provides operations for iterating over paged responses.
type DefaultRolloutsListByProviderRegistrationPager struct {
	client    *DefaultRolloutsClient
	current   DefaultRolloutsListByProviderRegistrationResponse
	err       error
	requester func(context.Context) (*policy.Request, error)
	advancer  func(context.Context, DefaultRolloutsListByProviderRegistrationResponse) (*policy.Request, error)
}

// Err returns the last error encountered while paging.
func (p *DefaultRolloutsListByProviderRegistrationPager) Err() error {
	return p.err
}

// NextPage returns true if the pager advanced to the next page.
// Returns false if there are no more pages or an error occurred.
func (p *DefaultRolloutsListByProviderRegistrationPager) NextPage(ctx context.Context) bool {
	var req *policy.Request
	var err error
	if !reflect.ValueOf(p.current).IsZero() {
		if p.current.DefaultRolloutArrayResponseWithContinuation.NextLink == nil || len(*p.current.DefaultRolloutArrayResponseWithContinuation.NextLink) == 0 {
			return false
		}
		req, err = p.advancer(ctx, p.current)
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		p.err = err
		return false
	}
	resp, err := p.client.pl.Do(req)
	if err != nil {
		p.err = err
		return false
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {
		p.err = p.client.listByProviderRegistrationHandleError(resp)
		return false
	}
	result, err := p.client.listByProviderRegistrationHandleResponse(resp)
	if err != nil {
		p.err = err
		return false
	}
	p.current = result
	return true
}

// PageResponse returns the current DefaultRolloutsListByProviderRegistrationResponse page.
func (p *DefaultRolloutsListByProviderRegistrationPager) PageResponse() DefaultRolloutsListByProviderRegistrationResponse {
	return p.current
}

// NotificationRegistrationsListByProviderRegistrationPager provides operations for iterating over paged responses.
type NotificationRegistrationsListByProviderRegistrationPager struct {
	client    *NotificationRegistrationsClient
	current   NotificationRegistrationsListByProviderRegistrationResponse
	err       error
	requester func(context.Context) (*policy.Request, error)
	advancer  func(context.Context, NotificationRegistrationsListByProviderRegistrationResponse) (*policy.Request, error)
}

// Err returns the last error encountered while paging.
func (p *NotificationRegistrationsListByProviderRegistrationPager) Err() error {
	return p.err
}

// NextPage returns true if the pager advanced to the next page.
// Returns false if there are no more pages or an error occurred.
func (p *NotificationRegistrationsListByProviderRegistrationPager) NextPage(ctx context.Context) bool {
	var req *policy.Request
	var err error
	if !reflect.ValueOf(p.current).IsZero() {
		if p.current.NotificationRegistrationArrayResponseWithContinuation.NextLink == nil || len(*p.current.NotificationRegistrationArrayResponseWithContinuation.NextLink) == 0 {
			return false
		}
		req, err = p.advancer(ctx, p.current)
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		p.err = err
		return false
	}
	resp, err := p.client.pl.Do(req)
	if err != nil {
		p.err = err
		return false
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {
		p.err = p.client.listByProviderRegistrationHandleError(resp)
		return false
	}
	result, err := p.client.listByProviderRegistrationHandleResponse(resp)
	if err != nil {
		p.err = err
		return false
	}
	p.current = result
	return true
}

// PageResponse returns the current NotificationRegistrationsListByProviderRegistrationResponse page.
func (p *NotificationRegistrationsListByProviderRegistrationPager) PageResponse() NotificationRegistrationsListByProviderRegistrationResponse {
	return p.current
}

// OperationsListPager provides operations for iterating over paged responses.
type OperationsListPager struct {
	client    *OperationsClient
	current   OperationsListResponse
	err       error
	requester func(context.Context) (*policy.Request, error)
	advancer  func(context.Context, OperationsListResponse) (*policy.Request, error)
}

// Err returns the last error encountered while paging.
func (p *OperationsListPager) Err() error {
	return p.err
}

// NextPage returns true if the pager advanced to the next page.
// Returns false if there are no more pages or an error occurred.
func (p *OperationsListPager) NextPage(ctx context.Context) bool {
	var req *policy.Request
	var err error
	if !reflect.ValueOf(p.current).IsZero() {
		if p.current.OperationsDefinitionArrayResponseWithContinuation.NextLink == nil || len(*p.current.OperationsDefinitionArrayResponseWithContinuation.NextLink) == 0 {
			return false
		}
		req, err = p.advancer(ctx, p.current)
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		p.err = err
		return false
	}
	resp, err := p.client.pl.Do(req)
	if err != nil {
		p.err = err
		return false
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {
		p.err = p.client.listHandleError(resp)
		return false
	}
	result, err := p.client.listHandleResponse(resp)
	if err != nil {
		p.err = err
		return false
	}
	p.current = result
	return true
}

// PageResponse returns the current OperationsListResponse page.
func (p *OperationsListPager) PageResponse() OperationsListResponse {
	return p.current
}

// ProviderRegistrationsListPager provides operations for iterating over paged responses.
type ProviderRegistrationsListPager struct {
	client    *ProviderRegistrationsClient
	current   ProviderRegistrationsListResponse
	err       error
	requester func(context.Context) (*policy.Request, error)
	advancer  func(context.Context, ProviderRegistrationsListResponse) (*policy.Request, error)
}

// Err returns the last error encountered while paging.
func (p *ProviderRegistrationsListPager) Err() error {
	return p.err
}

// NextPage returns true if the pager advanced to the next page.
// Returns false if there are no more pages or an error occurred.
func (p *ProviderRegistrationsListPager) NextPage(ctx context.Context) bool {
	var req *policy.Request
	var err error
	if !reflect.ValueOf(p.current).IsZero() {
		if p.current.ProviderRegistrationArrayResponseWithContinuation.NextLink == nil || len(*p.current.ProviderRegistrationArrayResponseWithContinuation.NextLink) == 0 {
			return false
		}
		req, err = p.advancer(ctx, p.current)
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		p.err = err
		return false
	}
	resp, err := p.client.pl.Do(req)
	if err != nil {
		p.err = err
		return false
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {
		p.err = p.client.listHandleError(resp)
		return false
	}
	result, err := p.client.listHandleResponse(resp)
	if err != nil {
		p.err = err
		return false
	}
	p.current = result
	return true
}

// PageResponse returns the current ProviderRegistrationsListResponse page.
func (p *ProviderRegistrationsListPager) PageResponse() ProviderRegistrationsListResponse {
	return p.current
}

// ResourceTypeRegistrationsListByProviderRegistrationPager provides operations for iterating over paged responses.
type ResourceTypeRegistrationsListByProviderRegistrationPager struct {
	client    *ResourceTypeRegistrationsClient
	current   ResourceTypeRegistrationsListByProviderRegistrationResponse
	err       error
	requester func(context.Context) (*policy.Request, error)
	advancer  func(context.Context, ResourceTypeRegistrationsListByProviderRegistrationResponse) (*policy.Request, error)
}

// Err returns the last error encountered while paging.
func (p *ResourceTypeRegistrationsListByProviderRegistrationPager) Err() error {
	return p.err
}

// NextPage returns true if the pager advanced to the next page.
// Returns false if there are no more pages or an error occurred.
func (p *ResourceTypeRegistrationsListByProviderRegistrationPager) NextPage(ctx context.Context) bool {
	var req *policy.Request
	var err error
	if !reflect.ValueOf(p.current).IsZero() {
		if p.current.ResourceTypeRegistrationArrayResponseWithContinuation.NextLink == nil || len(*p.current.ResourceTypeRegistrationArrayResponseWithContinuation.NextLink) == 0 {
			return false
		}
		req, err = p.advancer(ctx, p.current)
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		p.err = err
		return false
	}
	resp, err := p.client.pl.Do(req)
	if err != nil {
		p.err = err
		return false
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {
		p.err = p.client.listByProviderRegistrationHandleError(resp)
		return false
	}
	result, err := p.client.listByProviderRegistrationHandleResponse(resp)
	if err != nil {
		p.err = err
		return false
	}
	p.current = result
	return true
}

// PageResponse returns the current ResourceTypeRegistrationsListByProviderRegistrationResponse page.
func (p *ResourceTypeRegistrationsListByProviderRegistrationPager) PageResponse() ResourceTypeRegistrationsListByProviderRegistrationResponse {
	return p.current
}

// SKUsListByResourceTypeRegistrationsNestedResourceTypeFirstPager provides operations for iterating over paged responses.
type SKUsListByResourceTypeRegistrationsNestedResourceTypeFirstPager struct {
	client    *SKUsClient
	current   SKUsListByResourceTypeRegistrationsNestedResourceTypeFirstResponse
	err       error
	requester func(context.Context) (*policy.Request, error)
	advancer  func(context.Context, SKUsListByResourceTypeRegistrationsNestedResourceTypeFirstResponse) (*policy.Request, error)
}

// Err returns the last error encountered while paging.
func (p *SKUsListByResourceTypeRegistrationsNestedResourceTypeFirstPager) Err() error {
	return p.err
}

// NextPage returns true if the pager advanced to the next page.
// Returns false if there are no more pages or an error occurred.
func (p *SKUsListByResourceTypeRegistrationsNestedResourceTypeFirstPager) NextPage(ctx context.Context) bool {
	var req *policy.Request
	var err error
	if !reflect.ValueOf(p.current).IsZero() {
		if p.current.SKUResourceArrayResponseWithContinuation.NextLink == nil || len(*p.current.SKUResourceArrayResponseWithContinuation.NextLink) == 0 {
			return false
		}
		req, err = p.advancer(ctx, p.current)
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		p.err = err
		return false
	}
	resp, err := p.client.pl.Do(req)
	if err != nil {
		p.err = err
		return false
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {
		p.err = p.client.listByResourceTypeRegistrationsNestedResourceTypeFirstHandleError(resp)
		return false
	}
	result, err := p.client.listByResourceTypeRegistrationsNestedResourceTypeFirstHandleResponse(resp)
	if err != nil {
		p.err = err
		return false
	}
	p.current = result
	return true
}

// PageResponse returns the current SKUsListByResourceTypeRegistrationsNestedResourceTypeFirstResponse page.
func (p *SKUsListByResourceTypeRegistrationsNestedResourceTypeFirstPager) PageResponse() SKUsListByResourceTypeRegistrationsNestedResourceTypeFirstResponse {
	return p.current
}

// SKUsListByResourceTypeRegistrationsNestedResourceTypeSecondPager provides operations for iterating over paged responses.
type SKUsListByResourceTypeRegistrationsNestedResourceTypeSecondPager struct {
	client    *SKUsClient
	current   SKUsListByResourceTypeRegistrationsNestedResourceTypeSecondResponse
	err       error
	requester func(context.Context) (*policy.Request, error)
	advancer  func(context.Context, SKUsListByResourceTypeRegistrationsNestedResourceTypeSecondResponse) (*policy.Request, error)
}

// Err returns the last error encountered while paging.
func (p *SKUsListByResourceTypeRegistrationsNestedResourceTypeSecondPager) Err() error {
	return p.err
}

// NextPage returns true if the pager advanced to the next page.
// Returns false if there are no more pages or an error occurred.
func (p *SKUsListByResourceTypeRegistrationsNestedResourceTypeSecondPager) NextPage(ctx context.Context) bool {
	var req *policy.Request
	var err error
	if !reflect.ValueOf(p.current).IsZero() {
		if p.current.SKUResourceArrayResponseWithContinuation.NextLink == nil || len(*p.current.SKUResourceArrayResponseWithContinuation.NextLink) == 0 {
			return false
		}
		req, err = p.advancer(ctx, p.current)
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		p.err = err
		return false
	}
	resp, err := p.client.pl.Do(req)
	if err != nil {
		p.err = err
		return false
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {
		p.err = p.client.listByResourceTypeRegistrationsNestedResourceTypeSecondHandleError(resp)
		return false
	}
	result, err := p.client.listByResourceTypeRegistrationsNestedResourceTypeSecondHandleResponse(resp)
	if err != nil {
		p.err = err
		return false
	}
	p.current = result
	return true
}

// PageResponse returns the current SKUsListByResourceTypeRegistrationsNestedResourceTypeSecondResponse page.
func (p *SKUsListByResourceTypeRegistrationsNestedResourceTypeSecondPager) PageResponse() SKUsListByResourceTypeRegistrationsNestedResourceTypeSecondResponse {
	return p.current
}

// SKUsListByResourceTypeRegistrationsNestedResourceTypeThirdPager provides operations for iterating over paged responses.
type SKUsListByResourceTypeRegistrationsNestedResourceTypeThirdPager struct {
	client    *SKUsClient
	current   SKUsListByResourceTypeRegistrationsNestedResourceTypeThirdResponse
	err       error
	requester func(context.Context) (*policy.Request, error)
	advancer  func(context.Context, SKUsListByResourceTypeRegistrationsNestedResourceTypeThirdResponse) (*policy.Request, error)
}

// Err returns the last error encountered while paging.
func (p *SKUsListByResourceTypeRegistrationsNestedResourceTypeThirdPager) Err() error {
	return p.err
}

// NextPage returns true if the pager advanced to the next page.
// Returns false if there are no more pages or an error occurred.
func (p *SKUsListByResourceTypeRegistrationsNestedResourceTypeThirdPager) NextPage(ctx context.Context) bool {
	var req *policy.Request
	var err error
	if !reflect.ValueOf(p.current).IsZero() {
		if p.current.SKUResourceArrayResponseWithContinuation.NextLink == nil || len(*p.current.SKUResourceArrayResponseWithContinuation.NextLink) == 0 {
			return false
		}
		req, err = p.advancer(ctx, p.current)
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		p.err = err
		return false
	}
	resp, err := p.client.pl.Do(req)
	if err != nil {
		p.err = err
		return false
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {
		p.err = p.client.listByResourceTypeRegistrationsNestedResourceTypeThirdHandleError(resp)
		return false
	}
	result, err := p.client.listByResourceTypeRegistrationsNestedResourceTypeThirdHandleResponse(resp)
	if err != nil {
		p.err = err
		return false
	}
	p.current = result
	return true
}

// PageResponse returns the current SKUsListByResourceTypeRegistrationsNestedResourceTypeThirdResponse page.
func (p *SKUsListByResourceTypeRegistrationsNestedResourceTypeThirdPager) PageResponse() SKUsListByResourceTypeRegistrationsNestedResourceTypeThirdResponse {
	return p.current
}

// SKUsListByResourceTypeRegistrationsPager provides operations for iterating over paged responses.
type SKUsListByResourceTypeRegistrationsPager struct {
	client    *SKUsClient
	current   SKUsListByResourceTypeRegistrationsResponse
	err       error
	requester func(context.Context) (*policy.Request, error)
	advancer  func(context.Context, SKUsListByResourceTypeRegistrationsResponse) (*policy.Request, error)
}

// Err returns the last error encountered while paging.
func (p *SKUsListByResourceTypeRegistrationsPager) Err() error {
	return p.err
}

// NextPage returns true if the pager advanced to the next page.
// Returns false if there are no more pages or an error occurred.
func (p *SKUsListByResourceTypeRegistrationsPager) NextPage(ctx context.Context) bool {
	var req *policy.Request
	var err error
	if !reflect.ValueOf(p.current).IsZero() {
		if p.current.SKUResourceArrayResponseWithContinuation.NextLink == nil || len(*p.current.SKUResourceArrayResponseWithContinuation.NextLink) == 0 {
			return false
		}
		req, err = p.advancer(ctx, p.current)
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		p.err = err
		return false
	}
	resp, err := p.client.pl.Do(req)
	if err != nil {
		p.err = err
		return false
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {
		p.err = p.client.listByResourceTypeRegistrationsHandleError(resp)
		return false
	}
	result, err := p.client.listByResourceTypeRegistrationsHandleResponse(resp)
	if err != nil {
		p.err = err
		return false
	}
	p.current = result
	return true
}

// PageResponse returns the current SKUsListByResourceTypeRegistrationsResponse page.
func (p *SKUsListByResourceTypeRegistrationsPager) PageResponse() SKUsListByResourceTypeRegistrationsResponse {
	return p.current
}
