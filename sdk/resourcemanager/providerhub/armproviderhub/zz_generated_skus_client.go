//go:build go1.16
// +build go1.16

// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

package armproviderhub

import (
	"context"
	"errors"
	"fmt"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/arm"
	armruntime "github.com/Azure/azure-sdk-for-go/sdk/azcore/arm/runtime"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/policy"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/runtime"
	"net/http"
	"net/url"
	"strings"
)

// SKUsClient contains the methods for the SKUs group.
// Don't use this type directly, use NewSKUsClient() instead.
type SKUsClient struct {
	ep             string
	pl             runtime.Pipeline
	subscriptionID string
}

// NewSKUsClient creates a new instance of SKUsClient with the specified values.
func NewSKUsClient(subscriptionID string, credential azcore.TokenCredential, options *arm.ClientOptions) *SKUsClient {
	cp := arm.ClientOptions{}
	if options != nil {
		cp = *options
	}
	if len(cp.Host) == 0 {
		cp.Host = arm.AzurePublicCloud
	}
	return &SKUsClient{subscriptionID: subscriptionID, ep: string(cp.Host), pl: armruntime.NewPipeline(module, version, credential, &cp)}
}

// CreateOrUpdate - Creates or updates the resource type skus in the given resource type.
// If the operation fails it returns the *ErrorResponse error type.
func (client *SKUsClient) CreateOrUpdate(ctx context.Context, providerNamespace string, resourceType string, sku string, properties SKUResource, options *SKUsCreateOrUpdateOptions) (SKUsCreateOrUpdateResponse, error) {
	req, err := client.createOrUpdateCreateRequest(ctx, providerNamespace, resourceType, sku, properties, options)
	if err != nil {
		return SKUsCreateOrUpdateResponse{}, err
	}
	resp, err := client.pl.Do(req)
	if err != nil {
		return SKUsCreateOrUpdateResponse{}, err
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {
		return SKUsCreateOrUpdateResponse{}, client.createOrUpdateHandleError(resp)
	}
	return client.createOrUpdateHandleResponse(resp)
}

// createOrUpdateCreateRequest creates the CreateOrUpdate request.
func (client *SKUsClient) createOrUpdateCreateRequest(ctx context.Context, providerNamespace string, resourceType string, sku string, properties SKUResource, options *SKUsCreateOrUpdateOptions) (*policy.Request, error) {
	urlPath := "/subscriptions/{subscriptionId}/providers/Microsoft.ProviderHub/providerRegistrations/{providerNamespace}/resourcetypeRegistrations/{resourceType}/skus/{sku}"
	if client.subscriptionID == "" {
		return nil, errors.New("parameter client.subscriptionID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{subscriptionId}", url.PathEscape(client.subscriptionID))
	if providerNamespace == "" {
		return nil, errors.New("parameter providerNamespace cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{providerNamespace}", url.PathEscape(providerNamespace))
	if resourceType == "" {
		return nil, errors.New("parameter resourceType cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{resourceType}", url.PathEscape(resourceType))
	if sku == "" {
		return nil, errors.New("parameter sku cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{sku}", url.PathEscape(sku))
	req, err := runtime.NewRequest(ctx, http.MethodPut, runtime.JoinPaths(client.ep, urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("api-version", "2020-11-20")
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header.Set("Accept", "application/json")
	return req, runtime.MarshalAsJSON(req, properties)
}

// createOrUpdateHandleResponse handles the CreateOrUpdate response.
func (client *SKUsClient) createOrUpdateHandleResponse(resp *http.Response) (SKUsCreateOrUpdateResponse, error) {
	result := SKUsCreateOrUpdateResponse{RawResponse: resp}
	if err := runtime.UnmarshalAsJSON(resp, &result.SKUResource); err != nil {
		return SKUsCreateOrUpdateResponse{}, runtime.NewResponseError(err, resp)
	}
	return result, nil
}

// createOrUpdateHandleError handles the CreateOrUpdate error response.
func (client *SKUsClient) createOrUpdateHandleError(resp *http.Response) error {
	body, err := runtime.Payload(resp)
	if err != nil {
		return runtime.NewResponseError(err, resp)
	}
	errType := ErrorResponse{raw: string(body)}
	if err := runtime.UnmarshalAsJSON(resp, &errType); err != nil {
		return runtime.NewResponseError(fmt.Errorf("%s\n%s", string(body), err), resp)
	}
	return runtime.NewResponseError(&errType, resp)
}

// CreateOrUpdateNestedResourceTypeFirst - Creates or updates the resource type skus in the given resource type.
// If the operation fails it returns the *ErrorResponse error type.
func (client *SKUsClient) CreateOrUpdateNestedResourceTypeFirst(ctx context.Context, providerNamespace string, resourceType string, nestedResourceTypeFirst string, sku string, properties SKUResource, options *SKUsCreateOrUpdateNestedResourceTypeFirstOptions) (SKUsCreateOrUpdateNestedResourceTypeFirstResponse, error) {
	req, err := client.createOrUpdateNestedResourceTypeFirstCreateRequest(ctx, providerNamespace, resourceType, nestedResourceTypeFirst, sku, properties, options)
	if err != nil {
		return SKUsCreateOrUpdateNestedResourceTypeFirstResponse{}, err
	}
	resp, err := client.pl.Do(req)
	if err != nil {
		return SKUsCreateOrUpdateNestedResourceTypeFirstResponse{}, err
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {
		return SKUsCreateOrUpdateNestedResourceTypeFirstResponse{}, client.createOrUpdateNestedResourceTypeFirstHandleError(resp)
	}
	return client.createOrUpdateNestedResourceTypeFirstHandleResponse(resp)
}

// createOrUpdateNestedResourceTypeFirstCreateRequest creates the CreateOrUpdateNestedResourceTypeFirst request.
func (client *SKUsClient) createOrUpdateNestedResourceTypeFirstCreateRequest(ctx context.Context, providerNamespace string, resourceType string, nestedResourceTypeFirst string, sku string, properties SKUResource, options *SKUsCreateOrUpdateNestedResourceTypeFirstOptions) (*policy.Request, error) {
	urlPath := "/subscriptions/{subscriptionId}/providers/Microsoft.ProviderHub/providerRegistrations/{providerNamespace}/resourcetypeRegistrations/{resourceType}/resourcetypeRegistrations/{nestedResourceTypeFirst}/skus/{sku}"
	if client.subscriptionID == "" {
		return nil, errors.New("parameter client.subscriptionID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{subscriptionId}", url.PathEscape(client.subscriptionID))
	if providerNamespace == "" {
		return nil, errors.New("parameter providerNamespace cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{providerNamespace}", url.PathEscape(providerNamespace))
	if resourceType == "" {
		return nil, errors.New("parameter resourceType cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{resourceType}", url.PathEscape(resourceType))
	if nestedResourceTypeFirst == "" {
		return nil, errors.New("parameter nestedResourceTypeFirst cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{nestedResourceTypeFirst}", url.PathEscape(nestedResourceTypeFirst))
	if sku == "" {
		return nil, errors.New("parameter sku cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{sku}", url.PathEscape(sku))
	req, err := runtime.NewRequest(ctx, http.MethodPut, runtime.JoinPaths(client.ep, urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("api-version", "2020-11-20")
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header.Set("Accept", "application/json")
	return req, runtime.MarshalAsJSON(req, properties)
}

// createOrUpdateNestedResourceTypeFirstHandleResponse handles the CreateOrUpdateNestedResourceTypeFirst response.
func (client *SKUsClient) createOrUpdateNestedResourceTypeFirstHandleResponse(resp *http.Response) (SKUsCreateOrUpdateNestedResourceTypeFirstResponse, error) {
	result := SKUsCreateOrUpdateNestedResourceTypeFirstResponse{RawResponse: resp}
	if err := runtime.UnmarshalAsJSON(resp, &result.SKUResource); err != nil {
		return SKUsCreateOrUpdateNestedResourceTypeFirstResponse{}, runtime.NewResponseError(err, resp)
	}
	return result, nil
}

// createOrUpdateNestedResourceTypeFirstHandleError handles the CreateOrUpdateNestedResourceTypeFirst error response.
func (client *SKUsClient) createOrUpdateNestedResourceTypeFirstHandleError(resp *http.Response) error {
	body, err := runtime.Payload(resp)
	if err != nil {
		return runtime.NewResponseError(err, resp)
	}
	errType := ErrorResponse{raw: string(body)}
	if err := runtime.UnmarshalAsJSON(resp, &errType); err != nil {
		return runtime.NewResponseError(fmt.Errorf("%s\n%s", string(body), err), resp)
	}
	return runtime.NewResponseError(&errType, resp)
}

// CreateOrUpdateNestedResourceTypeSecond - Creates or updates the resource type skus in the given resource type.
// If the operation fails it returns the *ErrorResponse error type.
func (client *SKUsClient) CreateOrUpdateNestedResourceTypeSecond(ctx context.Context, providerNamespace string, resourceType string, nestedResourceTypeFirst string, nestedResourceTypeSecond string, sku string, properties SKUResource, options *SKUsCreateOrUpdateNestedResourceTypeSecondOptions) (SKUsCreateOrUpdateNestedResourceTypeSecondResponse, error) {
	req, err := client.createOrUpdateNestedResourceTypeSecondCreateRequest(ctx, providerNamespace, resourceType, nestedResourceTypeFirst, nestedResourceTypeSecond, sku, properties, options)
	if err != nil {
		return SKUsCreateOrUpdateNestedResourceTypeSecondResponse{}, err
	}
	resp, err := client.pl.Do(req)
	if err != nil {
		return SKUsCreateOrUpdateNestedResourceTypeSecondResponse{}, err
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {
		return SKUsCreateOrUpdateNestedResourceTypeSecondResponse{}, client.createOrUpdateNestedResourceTypeSecondHandleError(resp)
	}
	return client.createOrUpdateNestedResourceTypeSecondHandleResponse(resp)
}

// createOrUpdateNestedResourceTypeSecondCreateRequest creates the CreateOrUpdateNestedResourceTypeSecond request.
func (client *SKUsClient) createOrUpdateNestedResourceTypeSecondCreateRequest(ctx context.Context, providerNamespace string, resourceType string, nestedResourceTypeFirst string, nestedResourceTypeSecond string, sku string, properties SKUResource, options *SKUsCreateOrUpdateNestedResourceTypeSecondOptions) (*policy.Request, error) {
	urlPath := "/subscriptions/{subscriptionId}/providers/Microsoft.ProviderHub/providerRegistrations/{providerNamespace}/resourcetypeRegistrations/{resourceType}/resourcetypeRegistrations/{nestedResourceTypeFirst}/resourcetypeRegistrations/{nestedResourceTypeSecond}/skus/{sku}"
	if client.subscriptionID == "" {
		return nil, errors.New("parameter client.subscriptionID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{subscriptionId}", url.PathEscape(client.subscriptionID))
	if providerNamespace == "" {
		return nil, errors.New("parameter providerNamespace cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{providerNamespace}", url.PathEscape(providerNamespace))
	if resourceType == "" {
		return nil, errors.New("parameter resourceType cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{resourceType}", url.PathEscape(resourceType))
	if nestedResourceTypeFirst == "" {
		return nil, errors.New("parameter nestedResourceTypeFirst cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{nestedResourceTypeFirst}", url.PathEscape(nestedResourceTypeFirst))
	if nestedResourceTypeSecond == "" {
		return nil, errors.New("parameter nestedResourceTypeSecond cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{nestedResourceTypeSecond}", url.PathEscape(nestedResourceTypeSecond))
	if sku == "" {
		return nil, errors.New("parameter sku cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{sku}", url.PathEscape(sku))
	req, err := runtime.NewRequest(ctx, http.MethodPut, runtime.JoinPaths(client.ep, urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("api-version", "2020-11-20")
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header.Set("Accept", "application/json")
	return req, runtime.MarshalAsJSON(req, properties)
}

// createOrUpdateNestedResourceTypeSecondHandleResponse handles the CreateOrUpdateNestedResourceTypeSecond response.
func (client *SKUsClient) createOrUpdateNestedResourceTypeSecondHandleResponse(resp *http.Response) (SKUsCreateOrUpdateNestedResourceTypeSecondResponse, error) {
	result := SKUsCreateOrUpdateNestedResourceTypeSecondResponse{RawResponse: resp}
	if err := runtime.UnmarshalAsJSON(resp, &result.SKUResource); err != nil {
		return SKUsCreateOrUpdateNestedResourceTypeSecondResponse{}, runtime.NewResponseError(err, resp)
	}
	return result, nil
}

// createOrUpdateNestedResourceTypeSecondHandleError handles the CreateOrUpdateNestedResourceTypeSecond error response.
func (client *SKUsClient) createOrUpdateNestedResourceTypeSecondHandleError(resp *http.Response) error {
	body, err := runtime.Payload(resp)
	if err != nil {
		return runtime.NewResponseError(err, resp)
	}
	errType := ErrorResponse{raw: string(body)}
	if err := runtime.UnmarshalAsJSON(resp, &errType); err != nil {
		return runtime.NewResponseError(fmt.Errorf("%s\n%s", string(body), err), resp)
	}
	return runtime.NewResponseError(&errType, resp)
}

// CreateOrUpdateNestedResourceTypeThird - Creates or updates the resource type skus in the given resource type.
// If the operation fails it returns the *ErrorResponse error type.
func (client *SKUsClient) CreateOrUpdateNestedResourceTypeThird(ctx context.Context, providerNamespace string, resourceType string, nestedResourceTypeFirst string, nestedResourceTypeSecond string, nestedResourceTypeThird string, sku string, properties SKUResource, options *SKUsCreateOrUpdateNestedResourceTypeThirdOptions) (SKUsCreateOrUpdateNestedResourceTypeThirdResponse, error) {
	req, err := client.createOrUpdateNestedResourceTypeThirdCreateRequest(ctx, providerNamespace, resourceType, nestedResourceTypeFirst, nestedResourceTypeSecond, nestedResourceTypeThird, sku, properties, options)
	if err != nil {
		return SKUsCreateOrUpdateNestedResourceTypeThirdResponse{}, err
	}
	resp, err := client.pl.Do(req)
	if err != nil {
		return SKUsCreateOrUpdateNestedResourceTypeThirdResponse{}, err
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {
		return SKUsCreateOrUpdateNestedResourceTypeThirdResponse{}, client.createOrUpdateNestedResourceTypeThirdHandleError(resp)
	}
	return client.createOrUpdateNestedResourceTypeThirdHandleResponse(resp)
}

// createOrUpdateNestedResourceTypeThirdCreateRequest creates the CreateOrUpdateNestedResourceTypeThird request.
func (client *SKUsClient) createOrUpdateNestedResourceTypeThirdCreateRequest(ctx context.Context, providerNamespace string, resourceType string, nestedResourceTypeFirst string, nestedResourceTypeSecond string, nestedResourceTypeThird string, sku string, properties SKUResource, options *SKUsCreateOrUpdateNestedResourceTypeThirdOptions) (*policy.Request, error) {
	urlPath := "/subscriptions/{subscriptionId}/providers/Microsoft.ProviderHub/providerRegistrations/{providerNamespace}/resourcetypeRegistrations/{resourceType}/resourcetypeRegistrations/{nestedResourceTypeFirst}/resourcetypeRegistrations/{nestedResourceTypeSecond}/resourcetypeRegistrations/{nestedResourceTypeThird}/skus/{sku}"
	if client.subscriptionID == "" {
		return nil, errors.New("parameter client.subscriptionID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{subscriptionId}", url.PathEscape(client.subscriptionID))
	if providerNamespace == "" {
		return nil, errors.New("parameter providerNamespace cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{providerNamespace}", url.PathEscape(providerNamespace))
	if resourceType == "" {
		return nil, errors.New("parameter resourceType cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{resourceType}", url.PathEscape(resourceType))
	if nestedResourceTypeFirst == "" {
		return nil, errors.New("parameter nestedResourceTypeFirst cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{nestedResourceTypeFirst}", url.PathEscape(nestedResourceTypeFirst))
	if nestedResourceTypeSecond == "" {
		return nil, errors.New("parameter nestedResourceTypeSecond cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{nestedResourceTypeSecond}", url.PathEscape(nestedResourceTypeSecond))
	if nestedResourceTypeThird == "" {
		return nil, errors.New("parameter nestedResourceTypeThird cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{nestedResourceTypeThird}", url.PathEscape(nestedResourceTypeThird))
	if sku == "" {
		return nil, errors.New("parameter sku cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{sku}", url.PathEscape(sku))
	req, err := runtime.NewRequest(ctx, http.MethodPut, runtime.JoinPaths(client.ep, urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("api-version", "2020-11-20")
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header.Set("Accept", "application/json")
	return req, runtime.MarshalAsJSON(req, properties)
}

// createOrUpdateNestedResourceTypeThirdHandleResponse handles the CreateOrUpdateNestedResourceTypeThird response.
func (client *SKUsClient) createOrUpdateNestedResourceTypeThirdHandleResponse(resp *http.Response) (SKUsCreateOrUpdateNestedResourceTypeThirdResponse, error) {
	result := SKUsCreateOrUpdateNestedResourceTypeThirdResponse{RawResponse: resp}
	if err := runtime.UnmarshalAsJSON(resp, &result.SKUResource); err != nil {
		return SKUsCreateOrUpdateNestedResourceTypeThirdResponse{}, runtime.NewResponseError(err, resp)
	}
	return result, nil
}

// createOrUpdateNestedResourceTypeThirdHandleError handles the CreateOrUpdateNestedResourceTypeThird error response.
func (client *SKUsClient) createOrUpdateNestedResourceTypeThirdHandleError(resp *http.Response) error {
	body, err := runtime.Payload(resp)
	if err != nil {
		return runtime.NewResponseError(err, resp)
	}
	errType := ErrorResponse{raw: string(body)}
	if err := runtime.UnmarshalAsJSON(resp, &errType); err != nil {
		return runtime.NewResponseError(fmt.Errorf("%s\n%s", string(body), err), resp)
	}
	return runtime.NewResponseError(&errType, resp)
}

// Delete - Deletes a resource type sku.
// If the operation fails it returns the *ErrorResponse error type.
func (client *SKUsClient) Delete(ctx context.Context, providerNamespace string, resourceType string, sku string, options *SKUsDeleteOptions) (SKUsDeleteResponse, error) {
	req, err := client.deleteCreateRequest(ctx, providerNamespace, resourceType, sku, options)
	if err != nil {
		return SKUsDeleteResponse{}, err
	}
	resp, err := client.pl.Do(req)
	if err != nil {
		return SKUsDeleteResponse{}, err
	}
	if !runtime.HasStatusCode(resp, http.StatusOK, http.StatusNoContent) {
		return SKUsDeleteResponse{}, client.deleteHandleError(resp)
	}
	return SKUsDeleteResponse{RawResponse: resp}, nil
}

// deleteCreateRequest creates the Delete request.
func (client *SKUsClient) deleteCreateRequest(ctx context.Context, providerNamespace string, resourceType string, sku string, options *SKUsDeleteOptions) (*policy.Request, error) {
	urlPath := "/subscriptions/{subscriptionId}/providers/Microsoft.ProviderHub/providerRegistrations/{providerNamespace}/resourcetypeRegistrations/{resourceType}/skus/{sku}"
	if client.subscriptionID == "" {
		return nil, errors.New("parameter client.subscriptionID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{subscriptionId}", url.PathEscape(client.subscriptionID))
	if providerNamespace == "" {
		return nil, errors.New("parameter providerNamespace cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{providerNamespace}", url.PathEscape(providerNamespace))
	if resourceType == "" {
		return nil, errors.New("parameter resourceType cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{resourceType}", url.PathEscape(resourceType))
	if sku == "" {
		return nil, errors.New("parameter sku cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{sku}", url.PathEscape(sku))
	req, err := runtime.NewRequest(ctx, http.MethodDelete, runtime.JoinPaths(client.ep, urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("api-version", "2020-11-20")
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header.Set("Accept", "application/json")
	return req, nil
}

// deleteHandleError handles the Delete error response.
func (client *SKUsClient) deleteHandleError(resp *http.Response) error {
	body, err := runtime.Payload(resp)
	if err != nil {
		return runtime.NewResponseError(err, resp)
	}
	errType := ErrorResponse{raw: string(body)}
	if err := runtime.UnmarshalAsJSON(resp, &errType); err != nil {
		return runtime.NewResponseError(fmt.Errorf("%s\n%s", string(body), err), resp)
	}
	return runtime.NewResponseError(&errType, resp)
}

// DeleteNestedResourceTypeFirst - Deletes a resource type sku.
// If the operation fails it returns the *ErrorResponse error type.
func (client *SKUsClient) DeleteNestedResourceTypeFirst(ctx context.Context, providerNamespace string, resourceType string, nestedResourceTypeFirst string, sku string, options *SKUsDeleteNestedResourceTypeFirstOptions) (SKUsDeleteNestedResourceTypeFirstResponse, error) {
	req, err := client.deleteNestedResourceTypeFirstCreateRequest(ctx, providerNamespace, resourceType, nestedResourceTypeFirst, sku, options)
	if err != nil {
		return SKUsDeleteNestedResourceTypeFirstResponse{}, err
	}
	resp, err := client.pl.Do(req)
	if err != nil {
		return SKUsDeleteNestedResourceTypeFirstResponse{}, err
	}
	if !runtime.HasStatusCode(resp, http.StatusOK, http.StatusNoContent) {
		return SKUsDeleteNestedResourceTypeFirstResponse{}, client.deleteNestedResourceTypeFirstHandleError(resp)
	}
	return SKUsDeleteNestedResourceTypeFirstResponse{RawResponse: resp}, nil
}

// deleteNestedResourceTypeFirstCreateRequest creates the DeleteNestedResourceTypeFirst request.
func (client *SKUsClient) deleteNestedResourceTypeFirstCreateRequest(ctx context.Context, providerNamespace string, resourceType string, nestedResourceTypeFirst string, sku string, options *SKUsDeleteNestedResourceTypeFirstOptions) (*policy.Request, error) {
	urlPath := "/subscriptions/{subscriptionId}/providers/Microsoft.ProviderHub/providerRegistrations/{providerNamespace}/resourcetypeRegistrations/{resourceType}/resourcetypeRegistrations/{nestedResourceTypeFirst}/skus/{sku}"
	if client.subscriptionID == "" {
		return nil, errors.New("parameter client.subscriptionID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{subscriptionId}", url.PathEscape(client.subscriptionID))
	if providerNamespace == "" {
		return nil, errors.New("parameter providerNamespace cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{providerNamespace}", url.PathEscape(providerNamespace))
	if resourceType == "" {
		return nil, errors.New("parameter resourceType cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{resourceType}", url.PathEscape(resourceType))
	if nestedResourceTypeFirst == "" {
		return nil, errors.New("parameter nestedResourceTypeFirst cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{nestedResourceTypeFirst}", url.PathEscape(nestedResourceTypeFirst))
	if sku == "" {
		return nil, errors.New("parameter sku cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{sku}", url.PathEscape(sku))
	req, err := runtime.NewRequest(ctx, http.MethodDelete, runtime.JoinPaths(client.ep, urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("api-version", "2020-11-20")
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header.Set("Accept", "application/json")
	return req, nil
}

// deleteNestedResourceTypeFirstHandleError handles the DeleteNestedResourceTypeFirst error response.
func (client *SKUsClient) deleteNestedResourceTypeFirstHandleError(resp *http.Response) error {
	body, err := runtime.Payload(resp)
	if err != nil {
		return runtime.NewResponseError(err, resp)
	}
	errType := ErrorResponse{raw: string(body)}
	if err := runtime.UnmarshalAsJSON(resp, &errType); err != nil {
		return runtime.NewResponseError(fmt.Errorf("%s\n%s", string(body), err), resp)
	}
	return runtime.NewResponseError(&errType, resp)
}

// DeleteNestedResourceTypeSecond - Deletes a resource type sku.
// If the operation fails it returns the *ErrorResponse error type.
func (client *SKUsClient) DeleteNestedResourceTypeSecond(ctx context.Context, providerNamespace string, resourceType string, nestedResourceTypeFirst string, nestedResourceTypeSecond string, sku string, options *SKUsDeleteNestedResourceTypeSecondOptions) (SKUsDeleteNestedResourceTypeSecondResponse, error) {
	req, err := client.deleteNestedResourceTypeSecondCreateRequest(ctx, providerNamespace, resourceType, nestedResourceTypeFirst, nestedResourceTypeSecond, sku, options)
	if err != nil {
		return SKUsDeleteNestedResourceTypeSecondResponse{}, err
	}
	resp, err := client.pl.Do(req)
	if err != nil {
		return SKUsDeleteNestedResourceTypeSecondResponse{}, err
	}
	if !runtime.HasStatusCode(resp, http.StatusOK, http.StatusNoContent) {
		return SKUsDeleteNestedResourceTypeSecondResponse{}, client.deleteNestedResourceTypeSecondHandleError(resp)
	}
	return SKUsDeleteNestedResourceTypeSecondResponse{RawResponse: resp}, nil
}

// deleteNestedResourceTypeSecondCreateRequest creates the DeleteNestedResourceTypeSecond request.
func (client *SKUsClient) deleteNestedResourceTypeSecondCreateRequest(ctx context.Context, providerNamespace string, resourceType string, nestedResourceTypeFirst string, nestedResourceTypeSecond string, sku string, options *SKUsDeleteNestedResourceTypeSecondOptions) (*policy.Request, error) {
	urlPath := "/subscriptions/{subscriptionId}/providers/Microsoft.ProviderHub/providerRegistrations/{providerNamespace}/resourcetypeRegistrations/{resourceType}/resourcetypeRegistrations/{nestedResourceTypeFirst}/resourcetypeRegistrations/{nestedResourceTypeSecond}/skus/{sku}"
	if client.subscriptionID == "" {
		return nil, errors.New("parameter client.subscriptionID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{subscriptionId}", url.PathEscape(client.subscriptionID))
	if providerNamespace == "" {
		return nil, errors.New("parameter providerNamespace cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{providerNamespace}", url.PathEscape(providerNamespace))
	if resourceType == "" {
		return nil, errors.New("parameter resourceType cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{resourceType}", url.PathEscape(resourceType))
	if nestedResourceTypeFirst == "" {
		return nil, errors.New("parameter nestedResourceTypeFirst cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{nestedResourceTypeFirst}", url.PathEscape(nestedResourceTypeFirst))
	if nestedResourceTypeSecond == "" {
		return nil, errors.New("parameter nestedResourceTypeSecond cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{nestedResourceTypeSecond}", url.PathEscape(nestedResourceTypeSecond))
	if sku == "" {
		return nil, errors.New("parameter sku cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{sku}", url.PathEscape(sku))
	req, err := runtime.NewRequest(ctx, http.MethodDelete, runtime.JoinPaths(client.ep, urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("api-version", "2020-11-20")
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header.Set("Accept", "application/json")
	return req, nil
}

// deleteNestedResourceTypeSecondHandleError handles the DeleteNestedResourceTypeSecond error response.
func (client *SKUsClient) deleteNestedResourceTypeSecondHandleError(resp *http.Response) error {
	body, err := runtime.Payload(resp)
	if err != nil {
		return runtime.NewResponseError(err, resp)
	}
	errType := ErrorResponse{raw: string(body)}
	if err := runtime.UnmarshalAsJSON(resp, &errType); err != nil {
		return runtime.NewResponseError(fmt.Errorf("%s\n%s", string(body), err), resp)
	}
	return runtime.NewResponseError(&errType, resp)
}

// DeleteNestedResourceTypeThird - Deletes a resource type sku.
// If the operation fails it returns the *ErrorResponse error type.
func (client *SKUsClient) DeleteNestedResourceTypeThird(ctx context.Context, providerNamespace string, resourceType string, nestedResourceTypeFirst string, nestedResourceTypeSecond string, nestedResourceTypeThird string, sku string, options *SKUsDeleteNestedResourceTypeThirdOptions) (SKUsDeleteNestedResourceTypeThirdResponse, error) {
	req, err := client.deleteNestedResourceTypeThirdCreateRequest(ctx, providerNamespace, resourceType, nestedResourceTypeFirst, nestedResourceTypeSecond, nestedResourceTypeThird, sku, options)
	if err != nil {
		return SKUsDeleteNestedResourceTypeThirdResponse{}, err
	}
	resp, err := client.pl.Do(req)
	if err != nil {
		return SKUsDeleteNestedResourceTypeThirdResponse{}, err
	}
	if !runtime.HasStatusCode(resp, http.StatusOK, http.StatusNoContent) {
		return SKUsDeleteNestedResourceTypeThirdResponse{}, client.deleteNestedResourceTypeThirdHandleError(resp)
	}
	return SKUsDeleteNestedResourceTypeThirdResponse{RawResponse: resp}, nil
}

// deleteNestedResourceTypeThirdCreateRequest creates the DeleteNestedResourceTypeThird request.
func (client *SKUsClient) deleteNestedResourceTypeThirdCreateRequest(ctx context.Context, providerNamespace string, resourceType string, nestedResourceTypeFirst string, nestedResourceTypeSecond string, nestedResourceTypeThird string, sku string, options *SKUsDeleteNestedResourceTypeThirdOptions) (*policy.Request, error) {
	urlPath := "/subscriptions/{subscriptionId}/providers/Microsoft.ProviderHub/providerRegistrations/{providerNamespace}/resourcetypeRegistrations/{resourceType}/resourcetypeRegistrations/{nestedResourceTypeFirst}/resourcetypeRegistrations/{nestedResourceTypeSecond}/resourcetypeRegistrations/{nestedResourceTypeThird}/skus/{sku}"
	if client.subscriptionID == "" {
		return nil, errors.New("parameter client.subscriptionID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{subscriptionId}", url.PathEscape(client.subscriptionID))
	if providerNamespace == "" {
		return nil, errors.New("parameter providerNamespace cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{providerNamespace}", url.PathEscape(providerNamespace))
	if resourceType == "" {
		return nil, errors.New("parameter resourceType cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{resourceType}", url.PathEscape(resourceType))
	if nestedResourceTypeFirst == "" {
		return nil, errors.New("parameter nestedResourceTypeFirst cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{nestedResourceTypeFirst}", url.PathEscape(nestedResourceTypeFirst))
	if nestedResourceTypeSecond == "" {
		return nil, errors.New("parameter nestedResourceTypeSecond cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{nestedResourceTypeSecond}", url.PathEscape(nestedResourceTypeSecond))
	if nestedResourceTypeThird == "" {
		return nil, errors.New("parameter nestedResourceTypeThird cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{nestedResourceTypeThird}", url.PathEscape(nestedResourceTypeThird))
	if sku == "" {
		return nil, errors.New("parameter sku cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{sku}", url.PathEscape(sku))
	req, err := runtime.NewRequest(ctx, http.MethodDelete, runtime.JoinPaths(client.ep, urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("api-version", "2020-11-20")
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header.Set("Accept", "application/json")
	return req, nil
}

// deleteNestedResourceTypeThirdHandleError handles the DeleteNestedResourceTypeThird error response.
func (client *SKUsClient) deleteNestedResourceTypeThirdHandleError(resp *http.Response) error {
	body, err := runtime.Payload(resp)
	if err != nil {
		return runtime.NewResponseError(err, resp)
	}
	errType := ErrorResponse{raw: string(body)}
	if err := runtime.UnmarshalAsJSON(resp, &errType); err != nil {
		return runtime.NewResponseError(fmt.Errorf("%s\n%s", string(body), err), resp)
	}
	return runtime.NewResponseError(&errType, resp)
}

// Get - Gets the sku details for the given resource type and sku name.
// If the operation fails it returns the *ErrorResponse error type.
func (client *SKUsClient) Get(ctx context.Context, providerNamespace string, resourceType string, sku string, options *SKUsGetOptions) (SKUsGetResponse, error) {
	req, err := client.getCreateRequest(ctx, providerNamespace, resourceType, sku, options)
	if err != nil {
		return SKUsGetResponse{}, err
	}
	resp, err := client.pl.Do(req)
	if err != nil {
		return SKUsGetResponse{}, err
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {
		return SKUsGetResponse{}, client.getHandleError(resp)
	}
	return client.getHandleResponse(resp)
}

// getCreateRequest creates the Get request.
func (client *SKUsClient) getCreateRequest(ctx context.Context, providerNamespace string, resourceType string, sku string, options *SKUsGetOptions) (*policy.Request, error) {
	urlPath := "/subscriptions/{subscriptionId}/providers/Microsoft.ProviderHub/providerRegistrations/{providerNamespace}/resourcetypeRegistrations/{resourceType}/skus/{sku}"
	if client.subscriptionID == "" {
		return nil, errors.New("parameter client.subscriptionID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{subscriptionId}", url.PathEscape(client.subscriptionID))
	if providerNamespace == "" {
		return nil, errors.New("parameter providerNamespace cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{providerNamespace}", url.PathEscape(providerNamespace))
	if resourceType == "" {
		return nil, errors.New("parameter resourceType cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{resourceType}", url.PathEscape(resourceType))
	if sku == "" {
		return nil, errors.New("parameter sku cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{sku}", url.PathEscape(sku))
	req, err := runtime.NewRequest(ctx, http.MethodGet, runtime.JoinPaths(client.ep, urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("api-version", "2020-11-20")
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header.Set("Accept", "application/json")
	return req, nil
}

// getHandleResponse handles the Get response.
func (client *SKUsClient) getHandleResponse(resp *http.Response) (SKUsGetResponse, error) {
	result := SKUsGetResponse{RawResponse: resp}
	if err := runtime.UnmarshalAsJSON(resp, &result.SKUResource); err != nil {
		return SKUsGetResponse{}, runtime.NewResponseError(err, resp)
	}
	return result, nil
}

// getHandleError handles the Get error response.
func (client *SKUsClient) getHandleError(resp *http.Response) error {
	body, err := runtime.Payload(resp)
	if err != nil {
		return runtime.NewResponseError(err, resp)
	}
	errType := ErrorResponse{raw: string(body)}
	if err := runtime.UnmarshalAsJSON(resp, &errType); err != nil {
		return runtime.NewResponseError(fmt.Errorf("%s\n%s", string(body), err), resp)
	}
	return runtime.NewResponseError(&errType, resp)
}

// GetNestedResourceTypeFirst - Gets the sku details for the given resource type and sku name.
// If the operation fails it returns the *ErrorResponse error type.
func (client *SKUsClient) GetNestedResourceTypeFirst(ctx context.Context, providerNamespace string, resourceType string, nestedResourceTypeFirst string, sku string, options *SKUsGetNestedResourceTypeFirstOptions) (SKUsGetNestedResourceTypeFirstResponse, error) {
	req, err := client.getNestedResourceTypeFirstCreateRequest(ctx, providerNamespace, resourceType, nestedResourceTypeFirst, sku, options)
	if err != nil {
		return SKUsGetNestedResourceTypeFirstResponse{}, err
	}
	resp, err := client.pl.Do(req)
	if err != nil {
		return SKUsGetNestedResourceTypeFirstResponse{}, err
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {
		return SKUsGetNestedResourceTypeFirstResponse{}, client.getNestedResourceTypeFirstHandleError(resp)
	}
	return client.getNestedResourceTypeFirstHandleResponse(resp)
}

// getNestedResourceTypeFirstCreateRequest creates the GetNestedResourceTypeFirst request.
func (client *SKUsClient) getNestedResourceTypeFirstCreateRequest(ctx context.Context, providerNamespace string, resourceType string, nestedResourceTypeFirst string, sku string, options *SKUsGetNestedResourceTypeFirstOptions) (*policy.Request, error) {
	urlPath := "/subscriptions/{subscriptionId}/providers/Microsoft.ProviderHub/providerRegistrations/{providerNamespace}/resourcetypeRegistrations/{resourceType}/resourcetypeRegistrations/{nestedResourceTypeFirst}/skus/{sku}"
	if client.subscriptionID == "" {
		return nil, errors.New("parameter client.subscriptionID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{subscriptionId}", url.PathEscape(client.subscriptionID))
	if providerNamespace == "" {
		return nil, errors.New("parameter providerNamespace cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{providerNamespace}", url.PathEscape(providerNamespace))
	if resourceType == "" {
		return nil, errors.New("parameter resourceType cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{resourceType}", url.PathEscape(resourceType))
	if nestedResourceTypeFirst == "" {
		return nil, errors.New("parameter nestedResourceTypeFirst cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{nestedResourceTypeFirst}", url.PathEscape(nestedResourceTypeFirst))
	if sku == "" {
		return nil, errors.New("parameter sku cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{sku}", url.PathEscape(sku))
	req, err := runtime.NewRequest(ctx, http.MethodGet, runtime.JoinPaths(client.ep, urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("api-version", "2020-11-20")
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header.Set("Accept", "application/json")
	return req, nil
}

// getNestedResourceTypeFirstHandleResponse handles the GetNestedResourceTypeFirst response.
func (client *SKUsClient) getNestedResourceTypeFirstHandleResponse(resp *http.Response) (SKUsGetNestedResourceTypeFirstResponse, error) {
	result := SKUsGetNestedResourceTypeFirstResponse{RawResponse: resp}
	if err := runtime.UnmarshalAsJSON(resp, &result.SKUResource); err != nil {
		return SKUsGetNestedResourceTypeFirstResponse{}, runtime.NewResponseError(err, resp)
	}
	return result, nil
}

// getNestedResourceTypeFirstHandleError handles the GetNestedResourceTypeFirst error response.
func (client *SKUsClient) getNestedResourceTypeFirstHandleError(resp *http.Response) error {
	body, err := runtime.Payload(resp)
	if err != nil {
		return runtime.NewResponseError(err, resp)
	}
	errType := ErrorResponse{raw: string(body)}
	if err := runtime.UnmarshalAsJSON(resp, &errType); err != nil {
		return runtime.NewResponseError(fmt.Errorf("%s\n%s", string(body), err), resp)
	}
	return runtime.NewResponseError(&errType, resp)
}

// GetNestedResourceTypeSecond - Gets the sku details for the given resource type and sku name.
// If the operation fails it returns the *ErrorResponse error type.
func (client *SKUsClient) GetNestedResourceTypeSecond(ctx context.Context, providerNamespace string, resourceType string, nestedResourceTypeFirst string, nestedResourceTypeSecond string, sku string, options *SKUsGetNestedResourceTypeSecondOptions) (SKUsGetNestedResourceTypeSecondResponse, error) {
	req, err := client.getNestedResourceTypeSecondCreateRequest(ctx, providerNamespace, resourceType, nestedResourceTypeFirst, nestedResourceTypeSecond, sku, options)
	if err != nil {
		return SKUsGetNestedResourceTypeSecondResponse{}, err
	}
	resp, err := client.pl.Do(req)
	if err != nil {
		return SKUsGetNestedResourceTypeSecondResponse{}, err
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {
		return SKUsGetNestedResourceTypeSecondResponse{}, client.getNestedResourceTypeSecondHandleError(resp)
	}
	return client.getNestedResourceTypeSecondHandleResponse(resp)
}

// getNestedResourceTypeSecondCreateRequest creates the GetNestedResourceTypeSecond request.
func (client *SKUsClient) getNestedResourceTypeSecondCreateRequest(ctx context.Context, providerNamespace string, resourceType string, nestedResourceTypeFirst string, nestedResourceTypeSecond string, sku string, options *SKUsGetNestedResourceTypeSecondOptions) (*policy.Request, error) {
	urlPath := "/subscriptions/{subscriptionId}/providers/Microsoft.ProviderHub/providerRegistrations/{providerNamespace}/resourcetypeRegistrations/{resourceType}/resourcetypeRegistrations/{nestedResourceTypeFirst}/resourcetypeRegistrations/{nestedResourceTypeSecond}/skus/{sku}"
	if client.subscriptionID == "" {
		return nil, errors.New("parameter client.subscriptionID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{subscriptionId}", url.PathEscape(client.subscriptionID))
	if providerNamespace == "" {
		return nil, errors.New("parameter providerNamespace cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{providerNamespace}", url.PathEscape(providerNamespace))
	if resourceType == "" {
		return nil, errors.New("parameter resourceType cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{resourceType}", url.PathEscape(resourceType))
	if nestedResourceTypeFirst == "" {
		return nil, errors.New("parameter nestedResourceTypeFirst cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{nestedResourceTypeFirst}", url.PathEscape(nestedResourceTypeFirst))
	if nestedResourceTypeSecond == "" {
		return nil, errors.New("parameter nestedResourceTypeSecond cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{nestedResourceTypeSecond}", url.PathEscape(nestedResourceTypeSecond))
	if sku == "" {
		return nil, errors.New("parameter sku cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{sku}", url.PathEscape(sku))
	req, err := runtime.NewRequest(ctx, http.MethodGet, runtime.JoinPaths(client.ep, urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("api-version", "2020-11-20")
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header.Set("Accept", "application/json")
	return req, nil
}

// getNestedResourceTypeSecondHandleResponse handles the GetNestedResourceTypeSecond response.
func (client *SKUsClient) getNestedResourceTypeSecondHandleResponse(resp *http.Response) (SKUsGetNestedResourceTypeSecondResponse, error) {
	result := SKUsGetNestedResourceTypeSecondResponse{RawResponse: resp}
	if err := runtime.UnmarshalAsJSON(resp, &result.SKUResource); err != nil {
		return SKUsGetNestedResourceTypeSecondResponse{}, runtime.NewResponseError(err, resp)
	}
	return result, nil
}

// getNestedResourceTypeSecondHandleError handles the GetNestedResourceTypeSecond error response.
func (client *SKUsClient) getNestedResourceTypeSecondHandleError(resp *http.Response) error {
	body, err := runtime.Payload(resp)
	if err != nil {
		return runtime.NewResponseError(err, resp)
	}
	errType := ErrorResponse{raw: string(body)}
	if err := runtime.UnmarshalAsJSON(resp, &errType); err != nil {
		return runtime.NewResponseError(fmt.Errorf("%s\n%s", string(body), err), resp)
	}
	return runtime.NewResponseError(&errType, resp)
}

// GetNestedResourceTypeThird - Gets the sku details for the given resource type and sku name.
// If the operation fails it returns the *ErrorResponse error type.
func (client *SKUsClient) GetNestedResourceTypeThird(ctx context.Context, providerNamespace string, resourceType string, nestedResourceTypeFirst string, nestedResourceTypeSecond string, nestedResourceTypeThird string, sku string, options *SKUsGetNestedResourceTypeThirdOptions) (SKUsGetNestedResourceTypeThirdResponse, error) {
	req, err := client.getNestedResourceTypeThirdCreateRequest(ctx, providerNamespace, resourceType, nestedResourceTypeFirst, nestedResourceTypeSecond, nestedResourceTypeThird, sku, options)
	if err != nil {
		return SKUsGetNestedResourceTypeThirdResponse{}, err
	}
	resp, err := client.pl.Do(req)
	if err != nil {
		return SKUsGetNestedResourceTypeThirdResponse{}, err
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {
		return SKUsGetNestedResourceTypeThirdResponse{}, client.getNestedResourceTypeThirdHandleError(resp)
	}
	return client.getNestedResourceTypeThirdHandleResponse(resp)
}

// getNestedResourceTypeThirdCreateRequest creates the GetNestedResourceTypeThird request.
func (client *SKUsClient) getNestedResourceTypeThirdCreateRequest(ctx context.Context, providerNamespace string, resourceType string, nestedResourceTypeFirst string, nestedResourceTypeSecond string, nestedResourceTypeThird string, sku string, options *SKUsGetNestedResourceTypeThirdOptions) (*policy.Request, error) {
	urlPath := "/subscriptions/{subscriptionId}/providers/Microsoft.ProviderHub/providerRegistrations/{providerNamespace}/resourcetypeRegistrations/{resourceType}/resourcetypeRegistrations/{nestedResourceTypeFirst}/resourcetypeRegistrations/{nestedResourceTypeSecond}/resourcetypeRegistrations/{nestedResourceTypeThird}/skus/{sku}"
	if client.subscriptionID == "" {
		return nil, errors.New("parameter client.subscriptionID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{subscriptionId}", url.PathEscape(client.subscriptionID))
	if providerNamespace == "" {
		return nil, errors.New("parameter providerNamespace cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{providerNamespace}", url.PathEscape(providerNamespace))
	if resourceType == "" {
		return nil, errors.New("parameter resourceType cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{resourceType}", url.PathEscape(resourceType))
	if nestedResourceTypeFirst == "" {
		return nil, errors.New("parameter nestedResourceTypeFirst cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{nestedResourceTypeFirst}", url.PathEscape(nestedResourceTypeFirst))
	if nestedResourceTypeSecond == "" {
		return nil, errors.New("parameter nestedResourceTypeSecond cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{nestedResourceTypeSecond}", url.PathEscape(nestedResourceTypeSecond))
	if nestedResourceTypeThird == "" {
		return nil, errors.New("parameter nestedResourceTypeThird cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{nestedResourceTypeThird}", url.PathEscape(nestedResourceTypeThird))
	if sku == "" {
		return nil, errors.New("parameter sku cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{sku}", url.PathEscape(sku))
	req, err := runtime.NewRequest(ctx, http.MethodGet, runtime.JoinPaths(client.ep, urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("api-version", "2020-11-20")
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header.Set("Accept", "application/json")
	return req, nil
}

// getNestedResourceTypeThirdHandleResponse handles the GetNestedResourceTypeThird response.
func (client *SKUsClient) getNestedResourceTypeThirdHandleResponse(resp *http.Response) (SKUsGetNestedResourceTypeThirdResponse, error) {
	result := SKUsGetNestedResourceTypeThirdResponse{RawResponse: resp}
	if err := runtime.UnmarshalAsJSON(resp, &result.SKUResource); err != nil {
		return SKUsGetNestedResourceTypeThirdResponse{}, runtime.NewResponseError(err, resp)
	}
	return result, nil
}

// getNestedResourceTypeThirdHandleError handles the GetNestedResourceTypeThird error response.
func (client *SKUsClient) getNestedResourceTypeThirdHandleError(resp *http.Response) error {
	body, err := runtime.Payload(resp)
	if err != nil {
		return runtime.NewResponseError(err, resp)
	}
	errType := ErrorResponse{raw: string(body)}
	if err := runtime.UnmarshalAsJSON(resp, &errType); err != nil {
		return runtime.NewResponseError(fmt.Errorf("%s\n%s", string(body), err), resp)
	}
	return runtime.NewResponseError(&errType, resp)
}

// ListByResourceTypeRegistrations - Gets the list of skus for the given resource type.
// If the operation fails it returns the *ErrorResponse error type.
func (client *SKUsClient) ListByResourceTypeRegistrations(providerNamespace string, resourceType string, options *SKUsListByResourceTypeRegistrationsOptions) *SKUsListByResourceTypeRegistrationsPager {
	return &SKUsListByResourceTypeRegistrationsPager{
		client: client,
		requester: func(ctx context.Context) (*policy.Request, error) {
			return client.listByResourceTypeRegistrationsCreateRequest(ctx, providerNamespace, resourceType, options)
		},
		advancer: func(ctx context.Context, resp SKUsListByResourceTypeRegistrationsResponse) (*policy.Request, error) {
			return runtime.NewRequest(ctx, http.MethodGet, *resp.SKUResourceArrayResponseWithContinuation.NextLink)
		},
	}
}

// listByResourceTypeRegistrationsCreateRequest creates the ListByResourceTypeRegistrations request.
func (client *SKUsClient) listByResourceTypeRegistrationsCreateRequest(ctx context.Context, providerNamespace string, resourceType string, options *SKUsListByResourceTypeRegistrationsOptions) (*policy.Request, error) {
	urlPath := "/subscriptions/{subscriptionId}/providers/Microsoft.ProviderHub/providerRegistrations/{providerNamespace}/resourcetypeRegistrations/{resourceType}/skus"
	if client.subscriptionID == "" {
		return nil, errors.New("parameter client.subscriptionID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{subscriptionId}", url.PathEscape(client.subscriptionID))
	if providerNamespace == "" {
		return nil, errors.New("parameter providerNamespace cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{providerNamespace}", url.PathEscape(providerNamespace))
	if resourceType == "" {
		return nil, errors.New("parameter resourceType cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{resourceType}", url.PathEscape(resourceType))
	req, err := runtime.NewRequest(ctx, http.MethodGet, runtime.JoinPaths(client.ep, urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("api-version", "2020-11-20")
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header.Set("Accept", "application/json")
	return req, nil
}

// listByResourceTypeRegistrationsHandleResponse handles the ListByResourceTypeRegistrations response.
func (client *SKUsClient) listByResourceTypeRegistrationsHandleResponse(resp *http.Response) (SKUsListByResourceTypeRegistrationsResponse, error) {
	result := SKUsListByResourceTypeRegistrationsResponse{RawResponse: resp}
	if err := runtime.UnmarshalAsJSON(resp, &result.SKUResourceArrayResponseWithContinuation); err != nil {
		return SKUsListByResourceTypeRegistrationsResponse{}, runtime.NewResponseError(err, resp)
	}
	return result, nil
}

// listByResourceTypeRegistrationsHandleError handles the ListByResourceTypeRegistrations error response.
func (client *SKUsClient) listByResourceTypeRegistrationsHandleError(resp *http.Response) error {
	body, err := runtime.Payload(resp)
	if err != nil {
		return runtime.NewResponseError(err, resp)
	}
	errType := ErrorResponse{raw: string(body)}
	if err := runtime.UnmarshalAsJSON(resp, &errType); err != nil {
		return runtime.NewResponseError(fmt.Errorf("%s\n%s", string(body), err), resp)
	}
	return runtime.NewResponseError(&errType, resp)
}

// ListByResourceTypeRegistrationsNestedResourceTypeFirst - Gets the list of skus for the given resource type.
// If the operation fails it returns the *ErrorResponse error type.
func (client *SKUsClient) ListByResourceTypeRegistrationsNestedResourceTypeFirst(providerNamespace string, resourceType string, nestedResourceTypeFirst string, options *SKUsListByResourceTypeRegistrationsNestedResourceTypeFirstOptions) *SKUsListByResourceTypeRegistrationsNestedResourceTypeFirstPager {
	return &SKUsListByResourceTypeRegistrationsNestedResourceTypeFirstPager{
		client: client,
		requester: func(ctx context.Context) (*policy.Request, error) {
			return client.listByResourceTypeRegistrationsNestedResourceTypeFirstCreateRequest(ctx, providerNamespace, resourceType, nestedResourceTypeFirst, options)
		},
		advancer: func(ctx context.Context, resp SKUsListByResourceTypeRegistrationsNestedResourceTypeFirstResponse) (*policy.Request, error) {
			return runtime.NewRequest(ctx, http.MethodGet, *resp.SKUResourceArrayResponseWithContinuation.NextLink)
		},
	}
}

// listByResourceTypeRegistrationsNestedResourceTypeFirstCreateRequest creates the ListByResourceTypeRegistrationsNestedResourceTypeFirst request.
func (client *SKUsClient) listByResourceTypeRegistrationsNestedResourceTypeFirstCreateRequest(ctx context.Context, providerNamespace string, resourceType string, nestedResourceTypeFirst string, options *SKUsListByResourceTypeRegistrationsNestedResourceTypeFirstOptions) (*policy.Request, error) {
	urlPath := "/subscriptions/{subscriptionId}/providers/Microsoft.ProviderHub/providerRegistrations/{providerNamespace}/resourcetypeRegistrations/{resourceType}/resourcetypeRegistrations/{nestedResourceTypeFirst}/skus"
	if client.subscriptionID == "" {
		return nil, errors.New("parameter client.subscriptionID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{subscriptionId}", url.PathEscape(client.subscriptionID))
	if providerNamespace == "" {
		return nil, errors.New("parameter providerNamespace cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{providerNamespace}", url.PathEscape(providerNamespace))
	if resourceType == "" {
		return nil, errors.New("parameter resourceType cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{resourceType}", url.PathEscape(resourceType))
	if nestedResourceTypeFirst == "" {
		return nil, errors.New("parameter nestedResourceTypeFirst cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{nestedResourceTypeFirst}", url.PathEscape(nestedResourceTypeFirst))
	req, err := runtime.NewRequest(ctx, http.MethodGet, runtime.JoinPaths(client.ep, urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("api-version", "2020-11-20")
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header.Set("Accept", "application/json")
	return req, nil
}

// listByResourceTypeRegistrationsNestedResourceTypeFirstHandleResponse handles the ListByResourceTypeRegistrationsNestedResourceTypeFirst response.
func (client *SKUsClient) listByResourceTypeRegistrationsNestedResourceTypeFirstHandleResponse(resp *http.Response) (SKUsListByResourceTypeRegistrationsNestedResourceTypeFirstResponse, error) {
	result := SKUsListByResourceTypeRegistrationsNestedResourceTypeFirstResponse{RawResponse: resp}
	if err := runtime.UnmarshalAsJSON(resp, &result.SKUResourceArrayResponseWithContinuation); err != nil {
		return SKUsListByResourceTypeRegistrationsNestedResourceTypeFirstResponse{}, runtime.NewResponseError(err, resp)
	}
	return result, nil
}

// listByResourceTypeRegistrationsNestedResourceTypeFirstHandleError handles the ListByResourceTypeRegistrationsNestedResourceTypeFirst error response.
func (client *SKUsClient) listByResourceTypeRegistrationsNestedResourceTypeFirstHandleError(resp *http.Response) error {
	body, err := runtime.Payload(resp)
	if err != nil {
		return runtime.NewResponseError(err, resp)
	}
	errType := ErrorResponse{raw: string(body)}
	if err := runtime.UnmarshalAsJSON(resp, &errType); err != nil {
		return runtime.NewResponseError(fmt.Errorf("%s\n%s", string(body), err), resp)
	}
	return runtime.NewResponseError(&errType, resp)
}

// ListByResourceTypeRegistrationsNestedResourceTypeSecond - Gets the list of skus for the given resource type.
// If the operation fails it returns the *ErrorResponse error type.
func (client *SKUsClient) ListByResourceTypeRegistrationsNestedResourceTypeSecond(providerNamespace string, resourceType string, nestedResourceTypeFirst string, nestedResourceTypeSecond string, options *SKUsListByResourceTypeRegistrationsNestedResourceTypeSecondOptions) *SKUsListByResourceTypeRegistrationsNestedResourceTypeSecondPager {
	return &SKUsListByResourceTypeRegistrationsNestedResourceTypeSecondPager{
		client: client,
		requester: func(ctx context.Context) (*policy.Request, error) {
			return client.listByResourceTypeRegistrationsNestedResourceTypeSecondCreateRequest(ctx, providerNamespace, resourceType, nestedResourceTypeFirst, nestedResourceTypeSecond, options)
		},
		advancer: func(ctx context.Context, resp SKUsListByResourceTypeRegistrationsNestedResourceTypeSecondResponse) (*policy.Request, error) {
			return runtime.NewRequest(ctx, http.MethodGet, *resp.SKUResourceArrayResponseWithContinuation.NextLink)
		},
	}
}

// listByResourceTypeRegistrationsNestedResourceTypeSecondCreateRequest creates the ListByResourceTypeRegistrationsNestedResourceTypeSecond request.
func (client *SKUsClient) listByResourceTypeRegistrationsNestedResourceTypeSecondCreateRequest(ctx context.Context, providerNamespace string, resourceType string, nestedResourceTypeFirst string, nestedResourceTypeSecond string, options *SKUsListByResourceTypeRegistrationsNestedResourceTypeSecondOptions) (*policy.Request, error) {
	urlPath := "/subscriptions/{subscriptionId}/providers/Microsoft.ProviderHub/providerRegistrations/{providerNamespace}/resourcetypeRegistrations/{resourceType}/resourcetypeRegistrations/{nestedResourceTypeFirst}/resourcetypeRegistrations/{nestedResourceTypeSecond}/skus"
	if client.subscriptionID == "" {
		return nil, errors.New("parameter client.subscriptionID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{subscriptionId}", url.PathEscape(client.subscriptionID))
	if providerNamespace == "" {
		return nil, errors.New("parameter providerNamespace cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{providerNamespace}", url.PathEscape(providerNamespace))
	if resourceType == "" {
		return nil, errors.New("parameter resourceType cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{resourceType}", url.PathEscape(resourceType))
	if nestedResourceTypeFirst == "" {
		return nil, errors.New("parameter nestedResourceTypeFirst cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{nestedResourceTypeFirst}", url.PathEscape(nestedResourceTypeFirst))
	if nestedResourceTypeSecond == "" {
		return nil, errors.New("parameter nestedResourceTypeSecond cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{nestedResourceTypeSecond}", url.PathEscape(nestedResourceTypeSecond))
	req, err := runtime.NewRequest(ctx, http.MethodGet, runtime.JoinPaths(client.ep, urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("api-version", "2020-11-20")
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header.Set("Accept", "application/json")
	return req, nil
}

// listByResourceTypeRegistrationsNestedResourceTypeSecondHandleResponse handles the ListByResourceTypeRegistrationsNestedResourceTypeSecond response.
func (client *SKUsClient) listByResourceTypeRegistrationsNestedResourceTypeSecondHandleResponse(resp *http.Response) (SKUsListByResourceTypeRegistrationsNestedResourceTypeSecondResponse, error) {
	result := SKUsListByResourceTypeRegistrationsNestedResourceTypeSecondResponse{RawResponse: resp}
	if err := runtime.UnmarshalAsJSON(resp, &result.SKUResourceArrayResponseWithContinuation); err != nil {
		return SKUsListByResourceTypeRegistrationsNestedResourceTypeSecondResponse{}, runtime.NewResponseError(err, resp)
	}
	return result, nil
}

// listByResourceTypeRegistrationsNestedResourceTypeSecondHandleError handles the ListByResourceTypeRegistrationsNestedResourceTypeSecond error response.
func (client *SKUsClient) listByResourceTypeRegistrationsNestedResourceTypeSecondHandleError(resp *http.Response) error {
	body, err := runtime.Payload(resp)
	if err != nil {
		return runtime.NewResponseError(err, resp)
	}
	errType := ErrorResponse{raw: string(body)}
	if err := runtime.UnmarshalAsJSON(resp, &errType); err != nil {
		return runtime.NewResponseError(fmt.Errorf("%s\n%s", string(body), err), resp)
	}
	return runtime.NewResponseError(&errType, resp)
}

// ListByResourceTypeRegistrationsNestedResourceTypeThird - Gets the list of skus for the given resource type.
// If the operation fails it returns the *ErrorResponse error type.
func (client *SKUsClient) ListByResourceTypeRegistrationsNestedResourceTypeThird(providerNamespace string, resourceType string, nestedResourceTypeFirst string, nestedResourceTypeSecond string, nestedResourceTypeThird string, options *SKUsListByResourceTypeRegistrationsNestedResourceTypeThirdOptions) *SKUsListByResourceTypeRegistrationsNestedResourceTypeThirdPager {
	return &SKUsListByResourceTypeRegistrationsNestedResourceTypeThirdPager{
		client: client,
		requester: func(ctx context.Context) (*policy.Request, error) {
			return client.listByResourceTypeRegistrationsNestedResourceTypeThirdCreateRequest(ctx, providerNamespace, resourceType, nestedResourceTypeFirst, nestedResourceTypeSecond, nestedResourceTypeThird, options)
		},
		advancer: func(ctx context.Context, resp SKUsListByResourceTypeRegistrationsNestedResourceTypeThirdResponse) (*policy.Request, error) {
			return runtime.NewRequest(ctx, http.MethodGet, *resp.SKUResourceArrayResponseWithContinuation.NextLink)
		},
	}
}

// listByResourceTypeRegistrationsNestedResourceTypeThirdCreateRequest creates the ListByResourceTypeRegistrationsNestedResourceTypeThird request.
func (client *SKUsClient) listByResourceTypeRegistrationsNestedResourceTypeThirdCreateRequest(ctx context.Context, providerNamespace string, resourceType string, nestedResourceTypeFirst string, nestedResourceTypeSecond string, nestedResourceTypeThird string, options *SKUsListByResourceTypeRegistrationsNestedResourceTypeThirdOptions) (*policy.Request, error) {
	urlPath := "/subscriptions/{subscriptionId}/providers/Microsoft.ProviderHub/providerRegistrations/{providerNamespace}/resourcetypeRegistrations/{resourceType}/resourcetypeRegistrations/{nestedResourceTypeFirst}/resourcetypeRegistrations/{nestedResourceTypeSecond}/resourcetypeRegistrations/{nestedResourceTypeThird}/skus"
	if client.subscriptionID == "" {
		return nil, errors.New("parameter client.subscriptionID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{subscriptionId}", url.PathEscape(client.subscriptionID))
	if providerNamespace == "" {
		return nil, errors.New("parameter providerNamespace cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{providerNamespace}", url.PathEscape(providerNamespace))
	if resourceType == "" {
		return nil, errors.New("parameter resourceType cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{resourceType}", url.PathEscape(resourceType))
	if nestedResourceTypeFirst == "" {
		return nil, errors.New("parameter nestedResourceTypeFirst cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{nestedResourceTypeFirst}", url.PathEscape(nestedResourceTypeFirst))
	if nestedResourceTypeSecond == "" {
		return nil, errors.New("parameter nestedResourceTypeSecond cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{nestedResourceTypeSecond}", url.PathEscape(nestedResourceTypeSecond))
	if nestedResourceTypeThird == "" {
		return nil, errors.New("parameter nestedResourceTypeThird cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{nestedResourceTypeThird}", url.PathEscape(nestedResourceTypeThird))
	req, err := runtime.NewRequest(ctx, http.MethodGet, runtime.JoinPaths(client.ep, urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("api-version", "2020-11-20")
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header.Set("Accept", "application/json")
	return req, nil
}

// listByResourceTypeRegistrationsNestedResourceTypeThirdHandleResponse handles the ListByResourceTypeRegistrationsNestedResourceTypeThird response.
func (client *SKUsClient) listByResourceTypeRegistrationsNestedResourceTypeThirdHandleResponse(resp *http.Response) (SKUsListByResourceTypeRegistrationsNestedResourceTypeThirdResponse, error) {
	result := SKUsListByResourceTypeRegistrationsNestedResourceTypeThirdResponse{RawResponse: resp}
	if err := runtime.UnmarshalAsJSON(resp, &result.SKUResourceArrayResponseWithContinuation); err != nil {
		return SKUsListByResourceTypeRegistrationsNestedResourceTypeThirdResponse{}, runtime.NewResponseError(err, resp)
	}
	return result, nil
}

// listByResourceTypeRegistrationsNestedResourceTypeThirdHandleError handles the ListByResourceTypeRegistrationsNestedResourceTypeThird error response.
func (client *SKUsClient) listByResourceTypeRegistrationsNestedResourceTypeThirdHandleError(resp *http.Response) error {
	body, err := runtime.Payload(resp)
	if err != nil {
		return runtime.NewResponseError(err, resp)
	}
	errType := ErrorResponse{raw: string(body)}
	if err := runtime.UnmarshalAsJSON(resp, &errType); err != nil {
		return runtime.NewResponseError(fmt.Errorf("%s\n%s", string(body), err), resp)
	}
	return runtime.NewResponseError(&errType, resp)
}
