// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) Go Code Generator. DO NOT EDIT.

package fake

import (
	"context"
	"errors"
	"fmt"
	azfake "github.com/Azure/azure-sdk-for-go/sdk/azcore/fake"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/fake/server"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/runtime"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/to"
	"github.com/Azure/azure-sdk-for-go/sdk/resourcemanager/purestorageblock/armpurestorageblock"
	"net/http"
	"net/url"
	"regexp"
)

// AvsVMsServer is a fake server for instances of the armpurestorageblock.AvsVMsClient type.
type AvsVMsServer struct {
	// BeginDelete is the fake for method AvsVMsClient.BeginDelete
	// HTTP status codes to indicate success: http.StatusOK, http.StatusAccepted, http.StatusNoContent
	BeginDelete func(ctx context.Context, resourceGroupName string, storagePoolName string, avsVMID string, options *armpurestorageblock.AvsVMsClientBeginDeleteOptions) (resp azfake.PollerResponder[armpurestorageblock.AvsVMsClientDeleteResponse], errResp azfake.ErrorResponder)

	// Get is the fake for method AvsVMsClient.Get
	// HTTP status codes to indicate success: http.StatusOK
	Get func(ctx context.Context, resourceGroupName string, storagePoolName string, avsVMID string, options *armpurestorageblock.AvsVMsClientGetOptions) (resp azfake.Responder[armpurestorageblock.AvsVMsClientGetResponse], errResp azfake.ErrorResponder)

	// NewListByStoragePoolPager is the fake for method AvsVMsClient.NewListByStoragePoolPager
	// HTTP status codes to indicate success: http.StatusOK
	NewListByStoragePoolPager func(resourceGroupName string, storagePoolName string, options *armpurestorageblock.AvsVMsClientListByStoragePoolOptions) (resp azfake.PagerResponder[armpurestorageblock.AvsVMsClientListByStoragePoolResponse])

	// BeginUpdate is the fake for method AvsVMsClient.BeginUpdate
	// HTTP status codes to indicate success: http.StatusOK, http.StatusAccepted
	BeginUpdate func(ctx context.Context, resourceGroupName string, storagePoolName string, avsVMID string, properties armpurestorageblock.AvsVMUpdate, options *armpurestorageblock.AvsVMsClientBeginUpdateOptions) (resp azfake.PollerResponder[armpurestorageblock.AvsVMsClientUpdateResponse], errResp azfake.ErrorResponder)
}

// NewAvsVMsServerTransport creates a new instance of AvsVMsServerTransport with the provided implementation.
// The returned AvsVMsServerTransport instance is connected to an instance of armpurestorageblock.AvsVMsClient via the
// azcore.ClientOptions.Transporter field in the client's constructor parameters.
func NewAvsVMsServerTransport(srv *AvsVMsServer) *AvsVMsServerTransport {
	return &AvsVMsServerTransport{
		srv:                       srv,
		beginDelete:               newTracker[azfake.PollerResponder[armpurestorageblock.AvsVMsClientDeleteResponse]](),
		newListByStoragePoolPager: newTracker[azfake.PagerResponder[armpurestorageblock.AvsVMsClientListByStoragePoolResponse]](),
		beginUpdate:               newTracker[azfake.PollerResponder[armpurestorageblock.AvsVMsClientUpdateResponse]](),
	}
}

// AvsVMsServerTransport connects instances of armpurestorageblock.AvsVMsClient to instances of AvsVMsServer.
// Don't use this type directly, use NewAvsVMsServerTransport instead.
type AvsVMsServerTransport struct {
	srv                       *AvsVMsServer
	beginDelete               *tracker[azfake.PollerResponder[armpurestorageblock.AvsVMsClientDeleteResponse]]
	newListByStoragePoolPager *tracker[azfake.PagerResponder[armpurestorageblock.AvsVMsClientListByStoragePoolResponse]]
	beginUpdate               *tracker[azfake.PollerResponder[armpurestorageblock.AvsVMsClientUpdateResponse]]
}

// Do implements the policy.Transporter interface for AvsVMsServerTransport.
func (a *AvsVMsServerTransport) Do(req *http.Request) (*http.Response, error) {
	rawMethod := req.Context().Value(runtime.CtxAPINameKey{})
	method, ok := rawMethod.(string)
	if !ok {
		return nil, nonRetriableError{errors.New("unable to dispatch request, missing value for CtxAPINameKey")}
	}

	return a.dispatchToMethodFake(req, method)
}

func (a *AvsVMsServerTransport) dispatchToMethodFake(req *http.Request, method string) (*http.Response, error) {
	resultChan := make(chan result)
	defer close(resultChan)

	go func() {
		var intercepted bool
		var res result
		if avsVMSServerTransportInterceptor != nil {
			res.resp, res.err, intercepted = avsVMSServerTransportInterceptor.Do(req)
		}
		if !intercepted {
			switch method {
			case "AvsVMsClient.BeginDelete":
				res.resp, res.err = a.dispatchBeginDelete(req)
			case "AvsVMsClient.Get":
				res.resp, res.err = a.dispatchGet(req)
			case "AvsVMsClient.NewListByStoragePoolPager":
				res.resp, res.err = a.dispatchNewListByStoragePoolPager(req)
			case "AvsVMsClient.BeginUpdate":
				res.resp, res.err = a.dispatchBeginUpdate(req)
			default:
				res.err = fmt.Errorf("unhandled API %s", method)
			}

		}
		select {
		case resultChan <- res:
		case <-req.Context().Done():
		}
	}()

	select {
	case <-req.Context().Done():
		return nil, req.Context().Err()
	case res := <-resultChan:
		return res.resp, res.err
	}
}

func (a *AvsVMsServerTransport) dispatchBeginDelete(req *http.Request) (*http.Response, error) {
	if a.srv.BeginDelete == nil {
		return nil, &nonRetriableError{errors.New("fake for method BeginDelete not implemented")}
	}
	beginDelete := a.beginDelete.get(req)
	if beginDelete == nil {
		const regexStr = `/subscriptions/(?P<subscriptionId>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/resourceGroups/(?P<resourceGroupName>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/providers/PureStorage\.Block/storagePools/(?P<storagePoolName>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/avsVms/(?P<avsVmId>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)`
		regex := regexp.MustCompile(regexStr)
		matches := regex.FindStringSubmatch(req.URL.EscapedPath())
		if len(matches) < 5 {
			return nil, fmt.Errorf("failed to parse path %s", req.URL.Path)
		}
		resourceGroupNameParam, err := url.PathUnescape(matches[regex.SubexpIndex("resourceGroupName")])
		if err != nil {
			return nil, err
		}
		storagePoolNameParam, err := url.PathUnescape(matches[regex.SubexpIndex("storagePoolName")])
		if err != nil {
			return nil, err
		}
		avsVMIDParam, err := url.PathUnescape(matches[regex.SubexpIndex("avsVmId")])
		if err != nil {
			return nil, err
		}
		respr, errRespr := a.srv.BeginDelete(req.Context(), resourceGroupNameParam, storagePoolNameParam, avsVMIDParam, nil)
		if respErr := server.GetError(errRespr, req); respErr != nil {
			return nil, respErr
		}
		beginDelete = &respr
		a.beginDelete.add(req, beginDelete)
	}

	resp, err := server.PollerResponderNext(beginDelete, req)
	if err != nil {
		return nil, err
	}

	if !contains([]int{http.StatusOK, http.StatusAccepted, http.StatusNoContent}, resp.StatusCode) {
		a.beginDelete.remove(req)
		return nil, &nonRetriableError{fmt.Errorf("unexpected status code %d. acceptable values are http.StatusOK, http.StatusAccepted, http.StatusNoContent", resp.StatusCode)}
	}
	if !server.PollerResponderMore(beginDelete) {
		a.beginDelete.remove(req)
	}

	return resp, nil
}

func (a *AvsVMsServerTransport) dispatchGet(req *http.Request) (*http.Response, error) {
	if a.srv.Get == nil {
		return nil, &nonRetriableError{errors.New("fake for method Get not implemented")}
	}
	const regexStr = `/subscriptions/(?P<subscriptionId>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/resourceGroups/(?P<resourceGroupName>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/providers/PureStorage\.Block/storagePools/(?P<storagePoolName>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/avsVms/(?P<avsVmId>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)`
	regex := regexp.MustCompile(regexStr)
	matches := regex.FindStringSubmatch(req.URL.EscapedPath())
	if len(matches) < 5 {
		return nil, fmt.Errorf("failed to parse path %s", req.URL.Path)
	}
	resourceGroupNameParam, err := url.PathUnescape(matches[regex.SubexpIndex("resourceGroupName")])
	if err != nil {
		return nil, err
	}
	storagePoolNameParam, err := url.PathUnescape(matches[regex.SubexpIndex("storagePoolName")])
	if err != nil {
		return nil, err
	}
	avsVMIDParam, err := url.PathUnescape(matches[regex.SubexpIndex("avsVmId")])
	if err != nil {
		return nil, err
	}
	respr, errRespr := a.srv.Get(req.Context(), resourceGroupNameParam, storagePoolNameParam, avsVMIDParam, nil)
	if respErr := server.GetError(errRespr, req); respErr != nil {
		return nil, respErr
	}
	respContent := server.GetResponseContent(respr)
	if !contains([]int{http.StatusOK}, respContent.HTTPStatus) {
		return nil, &nonRetriableError{fmt.Errorf("unexpected status code %d. acceptable values are http.StatusOK", respContent.HTTPStatus)}
	}
	resp, err := server.MarshalResponseAsJSON(respContent, server.GetResponse(respr).AvsVM, req)
	if err != nil {
		return nil, err
	}
	return resp, nil
}

func (a *AvsVMsServerTransport) dispatchNewListByStoragePoolPager(req *http.Request) (*http.Response, error) {
	if a.srv.NewListByStoragePoolPager == nil {
		return nil, &nonRetriableError{errors.New("fake for method NewListByStoragePoolPager not implemented")}
	}
	newListByStoragePoolPager := a.newListByStoragePoolPager.get(req)
	if newListByStoragePoolPager == nil {
		const regexStr = `/subscriptions/(?P<subscriptionId>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/resourceGroups/(?P<resourceGroupName>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/providers/PureStorage\.Block/storagePools/(?P<storagePoolName>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/avsVms`
		regex := regexp.MustCompile(regexStr)
		matches := regex.FindStringSubmatch(req.URL.EscapedPath())
		if len(matches) < 4 {
			return nil, fmt.Errorf("failed to parse path %s", req.URL.Path)
		}
		resourceGroupNameParam, err := url.PathUnescape(matches[regex.SubexpIndex("resourceGroupName")])
		if err != nil {
			return nil, err
		}
		storagePoolNameParam, err := url.PathUnescape(matches[regex.SubexpIndex("storagePoolName")])
		if err != nil {
			return nil, err
		}
		resp := a.srv.NewListByStoragePoolPager(resourceGroupNameParam, storagePoolNameParam, nil)
		newListByStoragePoolPager = &resp
		a.newListByStoragePoolPager.add(req, newListByStoragePoolPager)
		server.PagerResponderInjectNextLinks(newListByStoragePoolPager, req, func(page *armpurestorageblock.AvsVMsClientListByStoragePoolResponse, createLink func() string) {
			page.NextLink = to.Ptr(createLink())
		})
	}
	resp, err := server.PagerResponderNext(newListByStoragePoolPager, req)
	if err != nil {
		return nil, err
	}
	if !contains([]int{http.StatusOK}, resp.StatusCode) {
		a.newListByStoragePoolPager.remove(req)
		return nil, &nonRetriableError{fmt.Errorf("unexpected status code %d. acceptable values are http.StatusOK", resp.StatusCode)}
	}
	if !server.PagerResponderMore(newListByStoragePoolPager) {
		a.newListByStoragePoolPager.remove(req)
	}
	return resp, nil
}

func (a *AvsVMsServerTransport) dispatchBeginUpdate(req *http.Request) (*http.Response, error) {
	if a.srv.BeginUpdate == nil {
		return nil, &nonRetriableError{errors.New("fake for method BeginUpdate not implemented")}
	}
	beginUpdate := a.beginUpdate.get(req)
	if beginUpdate == nil {
		const regexStr = `/subscriptions/(?P<subscriptionId>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/resourceGroups/(?P<resourceGroupName>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/providers/PureStorage\.Block/storagePools/(?P<storagePoolName>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/avsVms/(?P<avsVmId>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)`
		regex := regexp.MustCompile(regexStr)
		matches := regex.FindStringSubmatch(req.URL.EscapedPath())
		if len(matches) < 5 {
			return nil, fmt.Errorf("failed to parse path %s", req.URL.Path)
		}
		body, err := server.UnmarshalRequestAsJSON[armpurestorageblock.AvsVMUpdate](req)
		if err != nil {
			return nil, err
		}
		resourceGroupNameParam, err := url.PathUnescape(matches[regex.SubexpIndex("resourceGroupName")])
		if err != nil {
			return nil, err
		}
		storagePoolNameParam, err := url.PathUnescape(matches[regex.SubexpIndex("storagePoolName")])
		if err != nil {
			return nil, err
		}
		avsVMIDParam, err := url.PathUnescape(matches[regex.SubexpIndex("avsVmId")])
		if err != nil {
			return nil, err
		}
		respr, errRespr := a.srv.BeginUpdate(req.Context(), resourceGroupNameParam, storagePoolNameParam, avsVMIDParam, body, nil)
		if respErr := server.GetError(errRespr, req); respErr != nil {
			return nil, respErr
		}
		beginUpdate = &respr
		a.beginUpdate.add(req, beginUpdate)
	}

	resp, err := server.PollerResponderNext(beginUpdate, req)
	if err != nil {
		return nil, err
	}

	if !contains([]int{http.StatusOK, http.StatusAccepted}, resp.StatusCode) {
		a.beginUpdate.remove(req)
		return nil, &nonRetriableError{fmt.Errorf("unexpected status code %d. acceptable values are http.StatusOK, http.StatusAccepted", resp.StatusCode)}
	}
	if !server.PollerResponderMore(beginUpdate) {
		a.beginUpdate.remove(req)
	}

	return resp, nil
}

// set this to conditionally intercept incoming requests to AvsVMsServerTransport
var avsVMSServerTransportInterceptor interface {
	// Do returns true if the server transport should use the returned response/error
	Do(*http.Request) (*http.Response, error, bool)
}
