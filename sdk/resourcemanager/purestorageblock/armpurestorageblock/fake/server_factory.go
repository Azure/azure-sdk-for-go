// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) Go Code Generator. DO NOT EDIT.

package fake

import (
	"errors"
	"fmt"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/runtime"
	"net/http"
	"strings"
	"sync"
)

// ServerFactory is a fake server for instances of the armpurestorageblock.ClientFactory type.
type ServerFactory struct {
	// AvsStorageContainerVolumesServer contains the fakes for client AvsStorageContainerVolumesClient
	AvsStorageContainerVolumesServer AvsStorageContainerVolumesServer

	// AvsStorageContainersServer contains the fakes for client AvsStorageContainersClient
	AvsStorageContainersServer AvsStorageContainersServer

	// AvsVMVolumesServer contains the fakes for client AvsVMVolumesClient
	AvsVMVolumesServer AvsVMVolumesServer

	// AvsVMsServer contains the fakes for client AvsVMsClient
	AvsVMsServer AvsVMsServer

	// OperationsServer contains the fakes for client OperationsClient
	OperationsServer OperationsServer

	// ReservationsServer contains the fakes for client ReservationsClient
	ReservationsServer ReservationsServer

	// StoragePoolsServer contains the fakes for client StoragePoolsClient
	StoragePoolsServer StoragePoolsServer
}

// NewServerFactoryTransport creates a new instance of ServerFactoryTransport with the provided implementation.
// The returned ServerFactoryTransport instance is connected to an instance of armpurestorageblock.ClientFactory via the
// azcore.ClientOptions.Transporter field in the client's constructor parameters.
func NewServerFactoryTransport(srv *ServerFactory) *ServerFactoryTransport {
	return &ServerFactoryTransport{
		srv: srv,
	}
}

// ServerFactoryTransport connects instances of armpurestorageblock.ClientFactory to instances of ServerFactory.
// Don't use this type directly, use NewServerFactoryTransport instead.
type ServerFactoryTransport struct {
	srv                                *ServerFactory
	trMu                               sync.Mutex
	trAvsStorageContainerVolumesServer *AvsStorageContainerVolumesServerTransport
	trAvsStorageContainersServer       *AvsStorageContainersServerTransport
	trAvsVMVolumesServer               *AvsVMVolumesServerTransport
	trAvsVMsServer                     *AvsVMsServerTransport
	trOperationsServer                 *OperationsServerTransport
	trReservationsServer               *ReservationsServerTransport
	trStoragePoolsServer               *StoragePoolsServerTransport
}

// Do implements the policy.Transporter interface for ServerFactoryTransport.
func (s *ServerFactoryTransport) Do(req *http.Request) (*http.Response, error) {
	rawMethod := req.Context().Value(runtime.CtxAPINameKey{})
	method, ok := rawMethod.(string)
	if !ok {
		return nil, nonRetriableError{errors.New("unable to dispatch request, missing value for CtxAPINameKey")}
	}

	client := method[:strings.Index(method, ".")]
	var resp *http.Response
	var err error

	switch client {
	case "AvsStorageContainerVolumesClient":
		initServer(s, &s.trAvsStorageContainerVolumesServer, func() *AvsStorageContainerVolumesServerTransport {
			return NewAvsStorageContainerVolumesServerTransport(&s.srv.AvsStorageContainerVolumesServer)
		})
		resp, err = s.trAvsStorageContainerVolumesServer.Do(req)
	case "AvsStorageContainersClient":
		initServer(s, &s.trAvsStorageContainersServer, func() *AvsStorageContainersServerTransport {
			return NewAvsStorageContainersServerTransport(&s.srv.AvsStorageContainersServer)
		})
		resp, err = s.trAvsStorageContainersServer.Do(req)
	case "AvsVMVolumesClient":
		initServer(s, &s.trAvsVMVolumesServer, func() *AvsVMVolumesServerTransport { return NewAvsVMVolumesServerTransport(&s.srv.AvsVMVolumesServer) })
		resp, err = s.trAvsVMVolumesServer.Do(req)
	case "AvsVMsClient":
		initServer(s, &s.trAvsVMsServer, func() *AvsVMsServerTransport { return NewAvsVMsServerTransport(&s.srv.AvsVMsServer) })
		resp, err = s.trAvsVMsServer.Do(req)
	case "OperationsClient":
		initServer(s, &s.trOperationsServer, func() *OperationsServerTransport { return NewOperationsServerTransport(&s.srv.OperationsServer) })
		resp, err = s.trOperationsServer.Do(req)
	case "ReservationsClient":
		initServer(s, &s.trReservationsServer, func() *ReservationsServerTransport { return NewReservationsServerTransport(&s.srv.ReservationsServer) })
		resp, err = s.trReservationsServer.Do(req)
	case "StoragePoolsClient":
		initServer(s, &s.trStoragePoolsServer, func() *StoragePoolsServerTransport { return NewStoragePoolsServerTransport(&s.srv.StoragePoolsServer) })
		resp, err = s.trStoragePoolsServer.Do(req)
	default:
		err = fmt.Errorf("unhandled client %s", client)
	}

	if err != nil {
		return nil, err
	}

	return resp, nil
}

func initServer[T any](s *ServerFactoryTransport, dst **T, src func() *T) {
	s.trMu.Lock()
	if *dst == nil {
		*dst = src()
	}
	s.trMu.Unlock()
}
