//go:build go1.16
// +build go1.16

// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

package armquota

import (
	"context"
	armruntime "github.com/Azure/azure-sdk-for-go/sdk/azcore/arm/runtime"
	"net/http"
	"time"
)

// QuotaCreateOrUpdatePollerResponse contains the response from method Quota.CreateOrUpdate.
type QuotaCreateOrUpdatePollerResponse struct {
	// Poller contains an initialized poller.
	Poller *QuotaCreateOrUpdatePoller

	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// PollUntilDone will poll the service endpoint until a terminal state is reached or an error is received.
// freq: the time to wait between intervals in absence of a Retry-After header. Allowed minimum is one second.
// A good starting value is 30 seconds. Note that some resources might benefit from a different value.
func (l QuotaCreateOrUpdatePollerResponse) PollUntilDone(ctx context.Context, freq time.Duration) (QuotaCreateOrUpdateResponse, error) {
	respType := QuotaCreateOrUpdateResponse{}
	resp, err := l.Poller.pt.PollUntilDone(ctx, freq, &respType.CurrentQuotaLimitBase)
	if err != nil {
		return respType, err
	}
	respType.RawResponse = resp
	return respType, nil
}

// Resume rehydrates a QuotaCreateOrUpdatePollerResponse from the provided client and resume token.
func (l *QuotaCreateOrUpdatePollerResponse) Resume(ctx context.Context, client *QuotaClient, token string) error {
	pt, err := armruntime.NewPollerFromResumeToken("QuotaClient.CreateOrUpdate", token, client.pl, client.createOrUpdateHandleError)
	if err != nil {
		return err
	}
	poller := &QuotaCreateOrUpdatePoller{
		pt: pt,
	}
	resp, err := poller.Poll(ctx)
	if err != nil {
		return err
	}
	l.Poller = poller
	l.RawResponse = resp
	return nil
}

// QuotaCreateOrUpdateResponse contains the response from method Quota.CreateOrUpdate.
type QuotaCreateOrUpdateResponse struct {
	QuotaCreateOrUpdateResult
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// QuotaCreateOrUpdateResult contains the result from method Quota.CreateOrUpdate.
type QuotaCreateOrUpdateResult struct {
	CurrentQuotaLimitBase
}

// QuotaGetResponse contains the response from method Quota.Get.
type QuotaGetResponse struct {
	QuotaGetResult
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// QuotaGetResult contains the result from method Quota.Get.
type QuotaGetResult struct {
	CurrentQuotaLimitBase
	// ETag contains the information returned from the ETag header response.
	ETag *string
}

// QuotaListResponse contains the response from method Quota.List.
type QuotaListResponse struct {
	QuotaListResult
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// QuotaListResult contains the result from method Quota.List.
type QuotaListResult struct {
	QuotaLimits
	// ETag contains the information returned from the ETag header response.
	ETag *string
}

// QuotaOperationListResponse contains the response from method QuotaOperation.List.
type QuotaOperationListResponse struct {
	QuotaOperationListResult
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// QuotaOperationListResult contains the result from method QuotaOperation.List.
type QuotaOperationListResult struct {
	OperationList
}

// QuotaRequestStatusGetResponse contains the response from method QuotaRequestStatus.Get.
type QuotaRequestStatusGetResponse struct {
	QuotaRequestStatusGetResult
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// QuotaRequestStatusGetResult contains the result from method QuotaRequestStatus.Get.
type QuotaRequestStatusGetResult struct {
	QuotaRequestDetails
}

// QuotaRequestStatusListResponse contains the response from method QuotaRequestStatus.List.
type QuotaRequestStatusListResponse struct {
	QuotaRequestStatusListResult
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// QuotaRequestStatusListResult contains the result from method QuotaRequestStatus.List.
type QuotaRequestStatusListResult struct {
	QuotaRequestDetailsList
}

// QuotaUpdatePollerResponse contains the response from method Quota.Update.
type QuotaUpdatePollerResponse struct {
	// Poller contains an initialized poller.
	Poller *QuotaUpdatePoller

	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// PollUntilDone will poll the service endpoint until a terminal state is reached or an error is received.
// freq: the time to wait between intervals in absence of a Retry-After header. Allowed minimum is one second.
// A good starting value is 30 seconds. Note that some resources might benefit from a different value.
func (l QuotaUpdatePollerResponse) PollUntilDone(ctx context.Context, freq time.Duration) (QuotaUpdateResponse, error) {
	respType := QuotaUpdateResponse{}
	resp, err := l.Poller.pt.PollUntilDone(ctx, freq, &respType.CurrentQuotaLimitBase)
	if err != nil {
		return respType, err
	}
	respType.RawResponse = resp
	return respType, nil
}

// Resume rehydrates a QuotaUpdatePollerResponse from the provided client and resume token.
func (l *QuotaUpdatePollerResponse) Resume(ctx context.Context, client *QuotaClient, token string) error {
	pt, err := armruntime.NewPollerFromResumeToken("QuotaClient.Update", token, client.pl, client.updateHandleError)
	if err != nil {
		return err
	}
	poller := &QuotaUpdatePoller{
		pt: pt,
	}
	resp, err := poller.Poll(ctx)
	if err != nil {
		return err
	}
	l.Poller = poller
	l.RawResponse = resp
	return nil
}

// QuotaUpdateResponse contains the response from method Quota.Update.
type QuotaUpdateResponse struct {
	QuotaUpdateResult
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// QuotaUpdateResult contains the result from method Quota.Update.
type QuotaUpdateResult struct {
	CurrentQuotaLimitBase
}

// UsagesGetResponse contains the response from method Usages.Get.
type UsagesGetResponse struct {
	UsagesGetResult
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// UsagesGetResult contains the result from method Usages.Get.
type UsagesGetResult struct {
	CurrentUsagesBase
	// ETag contains the information returned from the ETag header response.
	ETag *string
}

// UsagesListResponse contains the response from method Usages.List.
type UsagesListResponse struct {
	UsagesListResult
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// UsagesListResult contains the result from method Usages.List.
type UsagesListResult struct {
	UsagesLimits
	// ETag contains the information returned from the ETag header response.
	ETag *string
}
