//go:build go1.18
// +build go1.18

// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.
// DO NOT EDIT.

package armrecommendationsservice

import (
	"context"
	"errors"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/arm"
	armruntime "github.com/Azure/azure-sdk-for-go/sdk/azcore/arm/runtime"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/cloud"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/policy"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/runtime"
	"net/http"
	"net/url"
	"strings"
)

// ModelingClient contains the methods for the Modeling group.
// Don't use this type directly, use NewModelingClient() instead.
type ModelingClient struct {
	host           string
	subscriptionID string
	pl             runtime.Pipeline
}

// NewModelingClient creates a new instance of ModelingClient with the specified values.
// subscriptionID - The ID of the target subscription.
// credential - used to authorize requests. Usually a credential from azidentity.
// options - pass nil to accept the default values.
func NewModelingClient(subscriptionID string, credential azcore.TokenCredential, options *arm.ClientOptions) (*ModelingClient, error) {
	if options == nil {
		options = &arm.ClientOptions{}
	}
	ep := cloud.AzurePublic.Services[cloud.ResourceManager].Endpoint
	if c, ok := options.Cloud.Services[cloud.ResourceManager]; ok {
		ep = c.Endpoint
	}
	pl, err := armruntime.NewPipeline(moduleName, moduleVersion, credential, runtime.PipelineOptions{}, options)
	if err != nil {
		return nil, err
	}
	client := &ModelingClient{
		subscriptionID: subscriptionID,
		host:           ep,
		pl:             pl,
	}
	return client, nil
}

// BeginCreateOrUpdate - Creates or updates Modeling resource.
// If the operation fails it returns an *azcore.ResponseError type.
// Generated from API version 2022-03-01-preview
// resourceGroupName - The name of the resource group. The name is case insensitive.
// accountName - The name of the RecommendationsService Account resource.
// modelingName - The name of the Modeling resource.
// body - Modeling resource details.
// options - ModelingClientBeginCreateOrUpdateOptions contains the optional parameters for the ModelingClient.BeginCreateOrUpdate
// method.
func (client *ModelingClient) BeginCreateOrUpdate(ctx context.Context, resourceGroupName string, accountName string, modelingName string, body ModelingResource, options *ModelingClientBeginCreateOrUpdateOptions) (*runtime.Poller[ModelingClientCreateOrUpdateResponse], error) {
	if options == nil || options.ResumeToken == "" {
		resp, err := client.createOrUpdate(ctx, resourceGroupName, accountName, modelingName, body, options)
		if err != nil {
			return nil, err
		}
		return runtime.NewPoller(resp, client.pl, &runtime.NewPollerOptions[ModelingClientCreateOrUpdateResponse]{
			FinalStateVia: runtime.FinalStateViaAzureAsyncOp,
		})
	} else {
		return runtime.NewPollerFromResumeToken[ModelingClientCreateOrUpdateResponse](options.ResumeToken, client.pl, nil)
	}
}

// CreateOrUpdate - Creates or updates Modeling resource.
// If the operation fails it returns an *azcore.ResponseError type.
// Generated from API version 2022-03-01-preview
func (client *ModelingClient) createOrUpdate(ctx context.Context, resourceGroupName string, accountName string, modelingName string, body ModelingResource, options *ModelingClientBeginCreateOrUpdateOptions) (*http.Response, error) {
	req, err := client.createOrUpdateCreateRequest(ctx, resourceGroupName, accountName, modelingName, body, options)
	if err != nil {
		return nil, err
	}
	resp, err := client.pl.Do(req)
	if err != nil {
		return nil, err
	}
	if !runtime.HasStatusCode(resp, http.StatusOK, http.StatusCreated) {
		return nil, runtime.NewResponseError(resp)
	}
	return resp, nil
}

// createOrUpdateCreateRequest creates the CreateOrUpdate request.
func (client *ModelingClient) createOrUpdateCreateRequest(ctx context.Context, resourceGroupName string, accountName string, modelingName string, body ModelingResource, options *ModelingClientBeginCreateOrUpdateOptions) (*policy.Request, error) {
	urlPath := "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.RecommendationsService/accounts/{accountName}/modeling/{modelingName}"
	if client.subscriptionID == "" {
		return nil, errors.New("parameter client.subscriptionID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{subscriptionId}", url.PathEscape(client.subscriptionID))
	if resourceGroupName == "" {
		return nil, errors.New("parameter resourceGroupName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{resourceGroupName}", url.PathEscape(resourceGroupName))
	if accountName == "" {
		return nil, errors.New("parameter accountName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{accountName}", url.PathEscape(accountName))
	if modelingName == "" {
		return nil, errors.New("parameter modelingName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{modelingName}", url.PathEscape(modelingName))
	req, err := runtime.NewRequest(ctx, http.MethodPut, runtime.JoinPaths(client.host, urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("api-version", "2022-03-01-preview")
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header["Accept"] = []string{"application/json"}
	return req, runtime.MarshalAsJSON(req, body)
}

// BeginDelete - Deletes Modeling resources of a given name.
// If the operation fails it returns an *azcore.ResponseError type.
// Generated from API version 2022-03-01-preview
// resourceGroupName - The name of the resource group. The name is case insensitive.
// accountName - The name of the RecommendationsService Account resource.
// modelingName - The name of the Modeling resource.
// options - ModelingClientBeginDeleteOptions contains the optional parameters for the ModelingClient.BeginDelete method.
func (client *ModelingClient) BeginDelete(ctx context.Context, resourceGroupName string, accountName string, modelingName string, options *ModelingClientBeginDeleteOptions) (*runtime.Poller[ModelingClientDeleteResponse], error) {
	if options == nil || options.ResumeToken == "" {
		resp, err := client.deleteOperation(ctx, resourceGroupName, accountName, modelingName, options)
		if err != nil {
			return nil, err
		}
		return runtime.NewPoller(resp, client.pl, &runtime.NewPollerOptions[ModelingClientDeleteResponse]{
			FinalStateVia: runtime.FinalStateViaAzureAsyncOp,
		})
	} else {
		return runtime.NewPollerFromResumeToken[ModelingClientDeleteResponse](options.ResumeToken, client.pl, nil)
	}
}

// Delete - Deletes Modeling resources of a given name.
// If the operation fails it returns an *azcore.ResponseError type.
// Generated from API version 2022-03-01-preview
func (client *ModelingClient) deleteOperation(ctx context.Context, resourceGroupName string, accountName string, modelingName string, options *ModelingClientBeginDeleteOptions) (*http.Response, error) {
	req, err := client.deleteCreateRequest(ctx, resourceGroupName, accountName, modelingName, options)
	if err != nil {
		return nil, err
	}
	resp, err := client.pl.Do(req)
	if err != nil {
		return nil, err
	}
	if !runtime.HasStatusCode(resp, http.StatusOK, http.StatusAccepted, http.StatusNoContent) {
		return nil, runtime.NewResponseError(resp)
	}
	return resp, nil
}

// deleteCreateRequest creates the Delete request.
func (client *ModelingClient) deleteCreateRequest(ctx context.Context, resourceGroupName string, accountName string, modelingName string, options *ModelingClientBeginDeleteOptions) (*policy.Request, error) {
	urlPath := "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.RecommendationsService/accounts/{accountName}/modeling/{modelingName}"
	if client.subscriptionID == "" {
		return nil, errors.New("parameter client.subscriptionID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{subscriptionId}", url.PathEscape(client.subscriptionID))
	if resourceGroupName == "" {
		return nil, errors.New("parameter resourceGroupName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{resourceGroupName}", url.PathEscape(resourceGroupName))
	if accountName == "" {
		return nil, errors.New("parameter accountName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{accountName}", url.PathEscape(accountName))
	if modelingName == "" {
		return nil, errors.New("parameter modelingName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{modelingName}", url.PathEscape(modelingName))
	req, err := runtime.NewRequest(ctx, http.MethodDelete, runtime.JoinPaths(client.host, urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("api-version", "2022-03-01-preview")
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header["Accept"] = []string{"application/json"}
	return req, nil
}

// Get - Returns Modeling resources for a given name.
// If the operation fails it returns an *azcore.ResponseError type.
// Generated from API version 2022-03-01-preview
// resourceGroupName - The name of the resource group. The name is case insensitive.
// accountName - The name of the RecommendationsService Account resource.
// modelingName - The name of the Modeling resource.
// options - ModelingClientGetOptions contains the optional parameters for the ModelingClient.Get method.
func (client *ModelingClient) Get(ctx context.Context, resourceGroupName string, accountName string, modelingName string, options *ModelingClientGetOptions) (ModelingClientGetResponse, error) {
	req, err := client.getCreateRequest(ctx, resourceGroupName, accountName, modelingName, options)
	if err != nil {
		return ModelingClientGetResponse{}, err
	}
	resp, err := client.pl.Do(req)
	if err != nil {
		return ModelingClientGetResponse{}, err
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {
		return ModelingClientGetResponse{}, runtime.NewResponseError(resp)
	}
	return client.getHandleResponse(resp)
}

// getCreateRequest creates the Get request.
func (client *ModelingClient) getCreateRequest(ctx context.Context, resourceGroupName string, accountName string, modelingName string, options *ModelingClientGetOptions) (*policy.Request, error) {
	urlPath := "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.RecommendationsService/accounts/{accountName}/modeling/{modelingName}"
	if client.subscriptionID == "" {
		return nil, errors.New("parameter client.subscriptionID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{subscriptionId}", url.PathEscape(client.subscriptionID))
	if resourceGroupName == "" {
		return nil, errors.New("parameter resourceGroupName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{resourceGroupName}", url.PathEscape(resourceGroupName))
	if accountName == "" {
		return nil, errors.New("parameter accountName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{accountName}", url.PathEscape(accountName))
	if modelingName == "" {
		return nil, errors.New("parameter modelingName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{modelingName}", url.PathEscape(modelingName))
	req, err := runtime.NewRequest(ctx, http.MethodGet, runtime.JoinPaths(client.host, urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("api-version", "2022-03-01-preview")
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header["Accept"] = []string{"application/json"}
	return req, nil
}

// getHandleResponse handles the Get response.
func (client *ModelingClient) getHandleResponse(resp *http.Response) (ModelingClientGetResponse, error) {
	result := ModelingClientGetResponse{}
	if err := runtime.UnmarshalAsJSON(resp, &result.ModelingResource); err != nil {
		return ModelingClientGetResponse{}, err
	}
	return result, nil
}

// NewListByAccountResourcePager - Returns list of Modeling resources for a given Account name.
// If the operation fails it returns an *azcore.ResponseError type.
// Generated from API version 2022-03-01-preview
// resourceGroupName - The name of the resource group. The name is case insensitive.
// accountName - The name of the RecommendationsService Account resource.
// options - ModelingClientListByAccountResourceOptions contains the optional parameters for the ModelingClient.ListByAccountResource
// method.
func (client *ModelingClient) NewListByAccountResourcePager(resourceGroupName string, accountName string, options *ModelingClientListByAccountResourceOptions) *runtime.Pager[ModelingClientListByAccountResourceResponse] {
	return runtime.NewPager(runtime.PagingHandler[ModelingClientListByAccountResourceResponse]{
		More: func(page ModelingClientListByAccountResourceResponse) bool {
			return page.NextLink != nil && len(*page.NextLink) > 0
		},
		Fetcher: func(ctx context.Context, page *ModelingClientListByAccountResourceResponse) (ModelingClientListByAccountResourceResponse, error) {
			var req *policy.Request
			var err error
			if page == nil {
				req, err = client.listByAccountResourceCreateRequest(ctx, resourceGroupName, accountName, options)
			} else {
				req, err = runtime.NewRequest(ctx, http.MethodGet, *page.NextLink)
			}
			if err != nil {
				return ModelingClientListByAccountResourceResponse{}, err
			}
			resp, err := client.pl.Do(req)
			if err != nil {
				return ModelingClientListByAccountResourceResponse{}, err
			}
			if !runtime.HasStatusCode(resp, http.StatusOK) {
				return ModelingClientListByAccountResourceResponse{}, runtime.NewResponseError(resp)
			}
			return client.listByAccountResourceHandleResponse(resp)
		},
	})
}

// listByAccountResourceCreateRequest creates the ListByAccountResource request.
func (client *ModelingClient) listByAccountResourceCreateRequest(ctx context.Context, resourceGroupName string, accountName string, options *ModelingClientListByAccountResourceOptions) (*policy.Request, error) {
	urlPath := "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.RecommendationsService/accounts/{accountName}/modeling"
	if client.subscriptionID == "" {
		return nil, errors.New("parameter client.subscriptionID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{subscriptionId}", url.PathEscape(client.subscriptionID))
	if resourceGroupName == "" {
		return nil, errors.New("parameter resourceGroupName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{resourceGroupName}", url.PathEscape(resourceGroupName))
	if accountName == "" {
		return nil, errors.New("parameter accountName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{accountName}", url.PathEscape(accountName))
	req, err := runtime.NewRequest(ctx, http.MethodGet, runtime.JoinPaths(client.host, urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("api-version", "2022-03-01-preview")
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header["Accept"] = []string{"application/json"}
	return req, nil
}

// listByAccountResourceHandleResponse handles the ListByAccountResource response.
func (client *ModelingClient) listByAccountResourceHandleResponse(resp *http.Response) (ModelingClientListByAccountResourceResponse, error) {
	result := ModelingClientListByAccountResourceResponse{}
	if err := runtime.UnmarshalAsJSON(resp, &result.ModelingResourceList); err != nil {
		return ModelingClientListByAccountResourceResponse{}, err
	}
	return result, nil
}

// BeginUpdate - Updates Modeling resource details.
// If the operation fails it returns an *azcore.ResponseError type.
// Generated from API version 2022-03-01-preview
// resourceGroupName - The name of the resource group. The name is case insensitive.
// accountName - The name of the RecommendationsService Account resource.
// modelingName - The name of the Modeling resource.
// body - Modeling resource patch details.
// options - ModelingClientBeginUpdateOptions contains the optional parameters for the ModelingClient.BeginUpdate method.
func (client *ModelingClient) BeginUpdate(ctx context.Context, resourceGroupName string, accountName string, modelingName string, body ModelingPatchResource, options *ModelingClientBeginUpdateOptions) (*runtime.Poller[ModelingClientUpdateResponse], error) {
	if options == nil || options.ResumeToken == "" {
		resp, err := client.update(ctx, resourceGroupName, accountName, modelingName, body, options)
		if err != nil {
			return nil, err
		}
		return runtime.NewPoller(resp, client.pl, &runtime.NewPollerOptions[ModelingClientUpdateResponse]{
			FinalStateVia: runtime.FinalStateViaAzureAsyncOp,
		})
	} else {
		return runtime.NewPollerFromResumeToken[ModelingClientUpdateResponse](options.ResumeToken, client.pl, nil)
	}
}

// Update - Updates Modeling resource details.
// If the operation fails it returns an *azcore.ResponseError type.
// Generated from API version 2022-03-01-preview
func (client *ModelingClient) update(ctx context.Context, resourceGroupName string, accountName string, modelingName string, body ModelingPatchResource, options *ModelingClientBeginUpdateOptions) (*http.Response, error) {
	req, err := client.updateCreateRequest(ctx, resourceGroupName, accountName, modelingName, body, options)
	if err != nil {
		return nil, err
	}
	resp, err := client.pl.Do(req)
	if err != nil {
		return nil, err
	}
	if !runtime.HasStatusCode(resp, http.StatusOK, http.StatusAccepted) {
		return nil, runtime.NewResponseError(resp)
	}
	return resp, nil
}

// updateCreateRequest creates the Update request.
func (client *ModelingClient) updateCreateRequest(ctx context.Context, resourceGroupName string, accountName string, modelingName string, body ModelingPatchResource, options *ModelingClientBeginUpdateOptions) (*policy.Request, error) {
	urlPath := "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.RecommendationsService/accounts/{accountName}/modeling/{modelingName}"
	if client.subscriptionID == "" {
		return nil, errors.New("parameter client.subscriptionID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{subscriptionId}", url.PathEscape(client.subscriptionID))
	if resourceGroupName == "" {
		return nil, errors.New("parameter resourceGroupName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{resourceGroupName}", url.PathEscape(resourceGroupName))
	if accountName == "" {
		return nil, errors.New("parameter accountName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{accountName}", url.PathEscape(accountName))
	if modelingName == "" {
		return nil, errors.New("parameter modelingName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{modelingName}", url.PathEscape(modelingName))
	req, err := runtime.NewRequest(ctx, http.MethodPatch, runtime.JoinPaths(client.host, urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("api-version", "2022-03-01-preview")
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header["Accept"] = []string{"application/json"}
	return req, runtime.MarshalAsJSON(req, body)
}
