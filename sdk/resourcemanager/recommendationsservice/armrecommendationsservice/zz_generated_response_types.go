//go:build go1.16
// +build go1.16

// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

package armrecommendationsservice

import (
	"context"
	armruntime "github.com/Azure/azure-sdk-for-go/sdk/azcore/arm/runtime"
	"net/http"
	"time"
)

// AccountsClientCheckNameAvailabilityResponse contains the response from method AccountsClient.CheckNameAvailability.
type AccountsClientCheckNameAvailabilityResponse struct {
	AccountsClientCheckNameAvailabilityResult
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// AccountsClientCheckNameAvailabilityResult contains the result from method AccountsClient.CheckNameAvailability.
type AccountsClientCheckNameAvailabilityResult struct {
	CheckNameAvailabilityResponse
}

// AccountsClientCreateOrUpdatePollerResponse contains the response from method AccountsClient.CreateOrUpdate.
type AccountsClientCreateOrUpdatePollerResponse struct {
	// Poller contains an initialized poller.
	Poller *AccountsClientCreateOrUpdatePoller

	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// PollUntilDone will poll the service endpoint until a terminal state is reached or an error is received.
// freq: the time to wait between intervals in absence of a Retry-After header. Allowed minimum is one second.
// A good starting value is 30 seconds. Note that some resources might benefit from a different value.
func (l AccountsClientCreateOrUpdatePollerResponse) PollUntilDone(ctx context.Context, freq time.Duration) (AccountsClientCreateOrUpdateResponse, error) {
	respType := AccountsClientCreateOrUpdateResponse{}
	resp, err := l.Poller.pt.PollUntilDone(ctx, freq, &respType.AccountResource)
	if err != nil {
		return respType, err
	}
	respType.RawResponse = resp
	return respType, nil
}

// Resume rehydrates a AccountsClientCreateOrUpdatePollerResponse from the provided client and resume token.
func (l *AccountsClientCreateOrUpdatePollerResponse) Resume(ctx context.Context, client *AccountsClient, token string) error {
	pt, err := armruntime.NewPollerFromResumeToken("AccountsClient.CreateOrUpdate", token, client.pl)
	if err != nil {
		return err
	}
	poller := &AccountsClientCreateOrUpdatePoller{
		pt: pt,
	}
	resp, err := poller.Poll(ctx)
	if err != nil {
		return err
	}
	l.Poller = poller
	l.RawResponse = resp
	return nil
}

// AccountsClientCreateOrUpdateResponse contains the response from method AccountsClient.CreateOrUpdate.
type AccountsClientCreateOrUpdateResponse struct {
	AccountsClientCreateOrUpdateResult
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// AccountsClientCreateOrUpdateResult contains the result from method AccountsClient.CreateOrUpdate.
type AccountsClientCreateOrUpdateResult struct {
	AccountResource
}

// AccountsClientDeletePollerResponse contains the response from method AccountsClient.Delete.
type AccountsClientDeletePollerResponse struct {
	// Poller contains an initialized poller.
	Poller *AccountsClientDeletePoller

	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// PollUntilDone will poll the service endpoint until a terminal state is reached or an error is received.
// freq: the time to wait between intervals in absence of a Retry-After header. Allowed minimum is one second.
// A good starting value is 30 seconds. Note that some resources might benefit from a different value.
func (l AccountsClientDeletePollerResponse) PollUntilDone(ctx context.Context, freq time.Duration) (AccountsClientDeleteResponse, error) {
	respType := AccountsClientDeleteResponse{}
	resp, err := l.Poller.pt.PollUntilDone(ctx, freq, nil)
	if err != nil {
		return respType, err
	}
	respType.RawResponse = resp
	return respType, nil
}

// Resume rehydrates a AccountsClientDeletePollerResponse from the provided client and resume token.
func (l *AccountsClientDeletePollerResponse) Resume(ctx context.Context, client *AccountsClient, token string) error {
	pt, err := armruntime.NewPollerFromResumeToken("AccountsClient.Delete", token, client.pl)
	if err != nil {
		return err
	}
	poller := &AccountsClientDeletePoller{
		pt: pt,
	}
	resp, err := poller.Poll(ctx)
	if err != nil {
		return err
	}
	l.Poller = poller
	l.RawResponse = resp
	return nil
}

// AccountsClientDeleteResponse contains the response from method AccountsClient.Delete.
type AccountsClientDeleteResponse struct {
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// AccountsClientGetResponse contains the response from method AccountsClient.Get.
type AccountsClientGetResponse struct {
	AccountsClientGetResult
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// AccountsClientGetResult contains the result from method AccountsClient.Get.
type AccountsClientGetResult struct {
	AccountResource
}

// AccountsClientGetStatusResponse contains the response from method AccountsClient.GetStatus.
type AccountsClientGetStatusResponse struct {
	AccountsClientGetStatusResult
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// AccountsClientGetStatusResult contains the result from method AccountsClient.GetStatus.
type AccountsClientGetStatusResult struct {
	AccountStatus
}

// AccountsClientListByResourceGroupResponse contains the response from method AccountsClient.ListByResourceGroup.
type AccountsClientListByResourceGroupResponse struct {
	AccountsClientListByResourceGroupResult
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// AccountsClientListByResourceGroupResult contains the result from method AccountsClient.ListByResourceGroup.
type AccountsClientListByResourceGroupResult struct {
	AccountResourceList
}

// AccountsClientListBySubscriptionResponse contains the response from method AccountsClient.ListBySubscription.
type AccountsClientListBySubscriptionResponse struct {
	AccountsClientListBySubscriptionResult
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// AccountsClientListBySubscriptionResult contains the result from method AccountsClient.ListBySubscription.
type AccountsClientListBySubscriptionResult struct {
	AccountResourceList
}

// AccountsClientUpdatePollerResponse contains the response from method AccountsClient.Update.
type AccountsClientUpdatePollerResponse struct {
	// Poller contains an initialized poller.
	Poller *AccountsClientUpdatePoller

	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// PollUntilDone will poll the service endpoint until a terminal state is reached or an error is received.
// freq: the time to wait between intervals in absence of a Retry-After header. Allowed minimum is one second.
// A good starting value is 30 seconds. Note that some resources might benefit from a different value.
func (l AccountsClientUpdatePollerResponse) PollUntilDone(ctx context.Context, freq time.Duration) (AccountsClientUpdateResponse, error) {
	respType := AccountsClientUpdateResponse{}
	resp, err := l.Poller.pt.PollUntilDone(ctx, freq, &respType.AccountResource)
	if err != nil {
		return respType, err
	}
	respType.RawResponse = resp
	return respType, nil
}

// Resume rehydrates a AccountsClientUpdatePollerResponse from the provided client and resume token.
func (l *AccountsClientUpdatePollerResponse) Resume(ctx context.Context, client *AccountsClient, token string) error {
	pt, err := armruntime.NewPollerFromResumeToken("AccountsClient.Update", token, client.pl)
	if err != nil {
		return err
	}
	poller := &AccountsClientUpdatePoller{
		pt: pt,
	}
	resp, err := poller.Poll(ctx)
	if err != nil {
		return err
	}
	l.Poller = poller
	l.RawResponse = resp
	return nil
}

// AccountsClientUpdateResponse contains the response from method AccountsClient.Update.
type AccountsClientUpdateResponse struct {
	AccountsClientUpdateResult
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// AccountsClientUpdateResult contains the result from method AccountsClient.Update.
type AccountsClientUpdateResult struct {
	AccountResource
}

// ModelingClientCreateOrUpdatePollerResponse contains the response from method ModelingClient.CreateOrUpdate.
type ModelingClientCreateOrUpdatePollerResponse struct {
	// Poller contains an initialized poller.
	Poller *ModelingClientCreateOrUpdatePoller

	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// PollUntilDone will poll the service endpoint until a terminal state is reached or an error is received.
// freq: the time to wait between intervals in absence of a Retry-After header. Allowed minimum is one second.
// A good starting value is 30 seconds. Note that some resources might benefit from a different value.
func (l ModelingClientCreateOrUpdatePollerResponse) PollUntilDone(ctx context.Context, freq time.Duration) (ModelingClientCreateOrUpdateResponse, error) {
	respType := ModelingClientCreateOrUpdateResponse{}
	resp, err := l.Poller.pt.PollUntilDone(ctx, freq, &respType.ModelingResource)
	if err != nil {
		return respType, err
	}
	respType.RawResponse = resp
	return respType, nil
}

// Resume rehydrates a ModelingClientCreateOrUpdatePollerResponse from the provided client and resume token.
func (l *ModelingClientCreateOrUpdatePollerResponse) Resume(ctx context.Context, client *ModelingClient, token string) error {
	pt, err := armruntime.NewPollerFromResumeToken("ModelingClient.CreateOrUpdate", token, client.pl)
	if err != nil {
		return err
	}
	poller := &ModelingClientCreateOrUpdatePoller{
		pt: pt,
	}
	resp, err := poller.Poll(ctx)
	if err != nil {
		return err
	}
	l.Poller = poller
	l.RawResponse = resp
	return nil
}

// ModelingClientCreateOrUpdateResponse contains the response from method ModelingClient.CreateOrUpdate.
type ModelingClientCreateOrUpdateResponse struct {
	ModelingClientCreateOrUpdateResult
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// ModelingClientCreateOrUpdateResult contains the result from method ModelingClient.CreateOrUpdate.
type ModelingClientCreateOrUpdateResult struct {
	ModelingResource
}

// ModelingClientDeletePollerResponse contains the response from method ModelingClient.Delete.
type ModelingClientDeletePollerResponse struct {
	// Poller contains an initialized poller.
	Poller *ModelingClientDeletePoller

	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// PollUntilDone will poll the service endpoint until a terminal state is reached or an error is received.
// freq: the time to wait between intervals in absence of a Retry-After header. Allowed minimum is one second.
// A good starting value is 30 seconds. Note that some resources might benefit from a different value.
func (l ModelingClientDeletePollerResponse) PollUntilDone(ctx context.Context, freq time.Duration) (ModelingClientDeleteResponse, error) {
	respType := ModelingClientDeleteResponse{}
	resp, err := l.Poller.pt.PollUntilDone(ctx, freq, nil)
	if err != nil {
		return respType, err
	}
	respType.RawResponse = resp
	return respType, nil
}

// Resume rehydrates a ModelingClientDeletePollerResponse from the provided client and resume token.
func (l *ModelingClientDeletePollerResponse) Resume(ctx context.Context, client *ModelingClient, token string) error {
	pt, err := armruntime.NewPollerFromResumeToken("ModelingClient.Delete", token, client.pl)
	if err != nil {
		return err
	}
	poller := &ModelingClientDeletePoller{
		pt: pt,
	}
	resp, err := poller.Poll(ctx)
	if err != nil {
		return err
	}
	l.Poller = poller
	l.RawResponse = resp
	return nil
}

// ModelingClientDeleteResponse contains the response from method ModelingClient.Delete.
type ModelingClientDeleteResponse struct {
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// ModelingClientGetResponse contains the response from method ModelingClient.Get.
type ModelingClientGetResponse struct {
	ModelingClientGetResult
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// ModelingClientGetResult contains the result from method ModelingClient.Get.
type ModelingClientGetResult struct {
	ModelingResource
}

// ModelingClientListByAccountResourceResponse contains the response from method ModelingClient.ListByAccountResource.
type ModelingClientListByAccountResourceResponse struct {
	ModelingClientListByAccountResourceResult
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// ModelingClientListByAccountResourceResult contains the result from method ModelingClient.ListByAccountResource.
type ModelingClientListByAccountResourceResult struct {
	ModelingResourceList
}

// ModelingClientUpdatePollerResponse contains the response from method ModelingClient.Update.
type ModelingClientUpdatePollerResponse struct {
	// Poller contains an initialized poller.
	Poller *ModelingClientUpdatePoller

	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// PollUntilDone will poll the service endpoint until a terminal state is reached or an error is received.
// freq: the time to wait between intervals in absence of a Retry-After header. Allowed minimum is one second.
// A good starting value is 30 seconds. Note that some resources might benefit from a different value.
func (l ModelingClientUpdatePollerResponse) PollUntilDone(ctx context.Context, freq time.Duration) (ModelingClientUpdateResponse, error) {
	respType := ModelingClientUpdateResponse{}
	resp, err := l.Poller.pt.PollUntilDone(ctx, freq, &respType.ModelingResource)
	if err != nil {
		return respType, err
	}
	respType.RawResponse = resp
	return respType, nil
}

// Resume rehydrates a ModelingClientUpdatePollerResponse from the provided client and resume token.
func (l *ModelingClientUpdatePollerResponse) Resume(ctx context.Context, client *ModelingClient, token string) error {
	pt, err := armruntime.NewPollerFromResumeToken("ModelingClient.Update", token, client.pl)
	if err != nil {
		return err
	}
	poller := &ModelingClientUpdatePoller{
		pt: pt,
	}
	resp, err := poller.Poll(ctx)
	if err != nil {
		return err
	}
	l.Poller = poller
	l.RawResponse = resp
	return nil
}

// ModelingClientUpdateResponse contains the response from method ModelingClient.Update.
type ModelingClientUpdateResponse struct {
	ModelingClientUpdateResult
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// ModelingClientUpdateResult contains the result from method ModelingClient.Update.
type ModelingClientUpdateResult struct {
	ModelingResource
}

// OperationStatusesClientGetResponse contains the response from method OperationStatusesClient.Get.
type OperationStatusesClientGetResponse struct {
	OperationStatusesClientGetResult
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// OperationStatusesClientGetResult contains the result from method OperationStatusesClient.Get.
type OperationStatusesClientGetResult struct {
	OperationStatusResult
}

// OperationsClientListResponse contains the response from method OperationsClient.List.
type OperationsClientListResponse struct {
	OperationsClientListResult
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// OperationsClientListResult contains the result from method OperationsClient.List.
type OperationsClientListResult struct {
	OperationListResult
}

// ServiceEndpointsClientCreateOrUpdatePollerResponse contains the response from method ServiceEndpointsClient.CreateOrUpdate.
type ServiceEndpointsClientCreateOrUpdatePollerResponse struct {
	// Poller contains an initialized poller.
	Poller *ServiceEndpointsClientCreateOrUpdatePoller

	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// PollUntilDone will poll the service endpoint until a terminal state is reached or an error is received.
// freq: the time to wait between intervals in absence of a Retry-After header. Allowed minimum is one second.
// A good starting value is 30 seconds. Note that some resources might benefit from a different value.
func (l ServiceEndpointsClientCreateOrUpdatePollerResponse) PollUntilDone(ctx context.Context, freq time.Duration) (ServiceEndpointsClientCreateOrUpdateResponse, error) {
	respType := ServiceEndpointsClientCreateOrUpdateResponse{}
	resp, err := l.Poller.pt.PollUntilDone(ctx, freq, &respType.ServiceEndpointResource)
	if err != nil {
		return respType, err
	}
	respType.RawResponse = resp
	return respType, nil
}

// Resume rehydrates a ServiceEndpointsClientCreateOrUpdatePollerResponse from the provided client and resume token.
func (l *ServiceEndpointsClientCreateOrUpdatePollerResponse) Resume(ctx context.Context, client *ServiceEndpointsClient, token string) error {
	pt, err := armruntime.NewPollerFromResumeToken("ServiceEndpointsClient.CreateOrUpdate", token, client.pl)
	if err != nil {
		return err
	}
	poller := &ServiceEndpointsClientCreateOrUpdatePoller{
		pt: pt,
	}
	resp, err := poller.Poll(ctx)
	if err != nil {
		return err
	}
	l.Poller = poller
	l.RawResponse = resp
	return nil
}

// ServiceEndpointsClientCreateOrUpdateResponse contains the response from method ServiceEndpointsClient.CreateOrUpdate.
type ServiceEndpointsClientCreateOrUpdateResponse struct {
	ServiceEndpointsClientCreateOrUpdateResult
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// ServiceEndpointsClientCreateOrUpdateResult contains the result from method ServiceEndpointsClient.CreateOrUpdate.
type ServiceEndpointsClientCreateOrUpdateResult struct {
	ServiceEndpointResource
}

// ServiceEndpointsClientDeletePollerResponse contains the response from method ServiceEndpointsClient.Delete.
type ServiceEndpointsClientDeletePollerResponse struct {
	// Poller contains an initialized poller.
	Poller *ServiceEndpointsClientDeletePoller

	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// PollUntilDone will poll the service endpoint until a terminal state is reached or an error is received.
// freq: the time to wait between intervals in absence of a Retry-After header. Allowed minimum is one second.
// A good starting value is 30 seconds. Note that some resources might benefit from a different value.
func (l ServiceEndpointsClientDeletePollerResponse) PollUntilDone(ctx context.Context, freq time.Duration) (ServiceEndpointsClientDeleteResponse, error) {
	respType := ServiceEndpointsClientDeleteResponse{}
	resp, err := l.Poller.pt.PollUntilDone(ctx, freq, nil)
	if err != nil {
		return respType, err
	}
	respType.RawResponse = resp
	return respType, nil
}

// Resume rehydrates a ServiceEndpointsClientDeletePollerResponse from the provided client and resume token.
func (l *ServiceEndpointsClientDeletePollerResponse) Resume(ctx context.Context, client *ServiceEndpointsClient, token string) error {
	pt, err := armruntime.NewPollerFromResumeToken("ServiceEndpointsClient.Delete", token, client.pl)
	if err != nil {
		return err
	}
	poller := &ServiceEndpointsClientDeletePoller{
		pt: pt,
	}
	resp, err := poller.Poll(ctx)
	if err != nil {
		return err
	}
	l.Poller = poller
	l.RawResponse = resp
	return nil
}

// ServiceEndpointsClientDeleteResponse contains the response from method ServiceEndpointsClient.Delete.
type ServiceEndpointsClientDeleteResponse struct {
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// ServiceEndpointsClientGetResponse contains the response from method ServiceEndpointsClient.Get.
type ServiceEndpointsClientGetResponse struct {
	ServiceEndpointsClientGetResult
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// ServiceEndpointsClientGetResult contains the result from method ServiceEndpointsClient.Get.
type ServiceEndpointsClientGetResult struct {
	ServiceEndpointResource
}

// ServiceEndpointsClientListByAccountResourceResponse contains the response from method ServiceEndpointsClient.ListByAccountResource.
type ServiceEndpointsClientListByAccountResourceResponse struct {
	ServiceEndpointsClientListByAccountResourceResult
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// ServiceEndpointsClientListByAccountResourceResult contains the result from method ServiceEndpointsClient.ListByAccountResource.
type ServiceEndpointsClientListByAccountResourceResult struct {
	ServiceEndpointResourceList
}

// ServiceEndpointsClientUpdatePollerResponse contains the response from method ServiceEndpointsClient.Update.
type ServiceEndpointsClientUpdatePollerResponse struct {
	// Poller contains an initialized poller.
	Poller *ServiceEndpointsClientUpdatePoller

	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// PollUntilDone will poll the service endpoint until a terminal state is reached or an error is received.
// freq: the time to wait between intervals in absence of a Retry-After header. Allowed minimum is one second.
// A good starting value is 30 seconds. Note that some resources might benefit from a different value.
func (l ServiceEndpointsClientUpdatePollerResponse) PollUntilDone(ctx context.Context, freq time.Duration) (ServiceEndpointsClientUpdateResponse, error) {
	respType := ServiceEndpointsClientUpdateResponse{}
	resp, err := l.Poller.pt.PollUntilDone(ctx, freq, &respType.ServiceEndpointResource)
	if err != nil {
		return respType, err
	}
	respType.RawResponse = resp
	return respType, nil
}

// Resume rehydrates a ServiceEndpointsClientUpdatePollerResponse from the provided client and resume token.
func (l *ServiceEndpointsClientUpdatePollerResponse) Resume(ctx context.Context, client *ServiceEndpointsClient, token string) error {
	pt, err := armruntime.NewPollerFromResumeToken("ServiceEndpointsClient.Update", token, client.pl)
	if err != nil {
		return err
	}
	poller := &ServiceEndpointsClientUpdatePoller{
		pt: pt,
	}
	resp, err := poller.Poll(ctx)
	if err != nil {
		return err
	}
	l.Poller = poller
	l.RawResponse = resp
	return nil
}

// ServiceEndpointsClientUpdateResponse contains the response from method ServiceEndpointsClient.Update.
type ServiceEndpointsClientUpdateResponse struct {
	ServiceEndpointsClientUpdateResult
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// ServiceEndpointsClientUpdateResult contains the result from method ServiceEndpointsClient.Update.
type ServiceEndpointsClientUpdateResult struct {
	ServiceEndpointResource
}
