//go:build go1.16
// +build go1.16

// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

package armrecommendationsservice

import (
	"context"
	"errors"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/arm"
	armruntime "github.com/Azure/azure-sdk-for-go/sdk/azcore/arm/runtime"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/policy"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/runtime"
	"net/http"
	"net/url"
	"strings"
)

// ServiceEndpointsClient contains the methods for the ServiceEndpoints group.
// Don't use this type directly, use NewServiceEndpointsClient() instead.
type ServiceEndpointsClient struct {
	host           string
	subscriptionID string
	pl             runtime.Pipeline
}

// NewServiceEndpointsClient creates a new instance of ServiceEndpointsClient with the specified values.
// subscriptionID - The ID of the target subscription.
// credential - used to authorize requests. Usually a credential from azidentity.
// options - pass nil to accept the default values.
func NewServiceEndpointsClient(subscriptionID string, credential azcore.TokenCredential, options *arm.ClientOptions) *ServiceEndpointsClient {
	if options == nil {
		options = &arm.ClientOptions{}
	}
	ep := options.Endpoint
	if len(ep) == 0 {
		ep = arm.AzurePublicCloud
	}
	client := &ServiceEndpointsClient{
		subscriptionID: subscriptionID,
		host:           string(ep),
		pl:             armruntime.NewPipeline(moduleName, moduleVersion, credential, runtime.PipelineOptions{}, options),
	}
	return client
}

// BeginCreateOrUpdate - Creates or updates ServiceEndpoint resource.
// If the operation fails it returns an *azcore.ResponseError type.
// resourceGroupName - The name of the resource group. The name is case insensitive.
// accountName - The name of the RecommendationsService Account resource.
// serviceEndpointName - The name of the ServiceEndpoint resource.
// body - ServiceEndpoint resource details.
// options - ServiceEndpointsClientBeginCreateOrUpdateOptions contains the optional parameters for the ServiceEndpointsClient.BeginCreateOrUpdate
// method.
func (client *ServiceEndpointsClient) BeginCreateOrUpdate(ctx context.Context, resourceGroupName string, accountName string, serviceEndpointName string, body ServiceEndpointResource, options *ServiceEndpointsClientBeginCreateOrUpdateOptions) (ServiceEndpointsClientCreateOrUpdatePollerResponse, error) {
	resp, err := client.createOrUpdate(ctx, resourceGroupName, accountName, serviceEndpointName, body, options)
	if err != nil {
		return ServiceEndpointsClientCreateOrUpdatePollerResponse{}, err
	}
	result := ServiceEndpointsClientCreateOrUpdatePollerResponse{
		RawResponse: resp,
	}
	pt, err := armruntime.NewPoller("ServiceEndpointsClient.CreateOrUpdate", "azure-async-operation", resp, client.pl)
	if err != nil {
		return ServiceEndpointsClientCreateOrUpdatePollerResponse{}, err
	}
	result.Poller = &ServiceEndpointsClientCreateOrUpdatePoller{
		pt: pt,
	}
	return result, nil
}

// CreateOrUpdate - Creates or updates ServiceEndpoint resource.
// If the operation fails it returns an *azcore.ResponseError type.
func (client *ServiceEndpointsClient) createOrUpdate(ctx context.Context, resourceGroupName string, accountName string, serviceEndpointName string, body ServiceEndpointResource, options *ServiceEndpointsClientBeginCreateOrUpdateOptions) (*http.Response, error) {
	req, err := client.createOrUpdateCreateRequest(ctx, resourceGroupName, accountName, serviceEndpointName, body, options)
	if err != nil {
		return nil, err
	}
	resp, err := client.pl.Do(req)
	if err != nil {
		return nil, err
	}
	if !runtime.HasStatusCode(resp, http.StatusOK, http.StatusCreated) {
		return nil, runtime.NewResponseError(resp)
	}
	return resp, nil
}

// createOrUpdateCreateRequest creates the CreateOrUpdate request.
func (client *ServiceEndpointsClient) createOrUpdateCreateRequest(ctx context.Context, resourceGroupName string, accountName string, serviceEndpointName string, body ServiceEndpointResource, options *ServiceEndpointsClientBeginCreateOrUpdateOptions) (*policy.Request, error) {
	urlPath := "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.RecommendationsService/accounts/{accountName}/serviceEndpoints/{serviceEndpointName}"
	if client.subscriptionID == "" {
		return nil, errors.New("parameter client.subscriptionID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{subscriptionId}", url.PathEscape(client.subscriptionID))
	if resourceGroupName == "" {
		return nil, errors.New("parameter resourceGroupName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{resourceGroupName}", url.PathEscape(resourceGroupName))
	if accountName == "" {
		return nil, errors.New("parameter accountName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{accountName}", url.PathEscape(accountName))
	if serviceEndpointName == "" {
		return nil, errors.New("parameter serviceEndpointName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{serviceEndpointName}", url.PathEscape(serviceEndpointName))
	req, err := runtime.NewRequest(ctx, http.MethodPut, runtime.JoinPaths(client.host, urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("api-version", "2022-02-01")
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header.Set("Accept", "application/json")
	return req, runtime.MarshalAsJSON(req, body)
}

// BeginDelete - Deletes ServiceEndpoint resources of a given name.
// If the operation fails it returns an *azcore.ResponseError type.
// resourceGroupName - The name of the resource group. The name is case insensitive.
// accountName - The name of the RecommendationsService Account resource.
// serviceEndpointName - The name of the ServiceEndpoint resource.
// options - ServiceEndpointsClientBeginDeleteOptions contains the optional parameters for the ServiceEndpointsClient.BeginDelete
// method.
func (client *ServiceEndpointsClient) BeginDelete(ctx context.Context, resourceGroupName string, accountName string, serviceEndpointName string, options *ServiceEndpointsClientBeginDeleteOptions) (ServiceEndpointsClientDeletePollerResponse, error) {
	resp, err := client.deleteOperation(ctx, resourceGroupName, accountName, serviceEndpointName, options)
	if err != nil {
		return ServiceEndpointsClientDeletePollerResponse{}, err
	}
	result := ServiceEndpointsClientDeletePollerResponse{
		RawResponse: resp,
	}
	pt, err := armruntime.NewPoller("ServiceEndpointsClient.Delete", "azure-async-operation", resp, client.pl)
	if err != nil {
		return ServiceEndpointsClientDeletePollerResponse{}, err
	}
	result.Poller = &ServiceEndpointsClientDeletePoller{
		pt: pt,
	}
	return result, nil
}

// Delete - Deletes ServiceEndpoint resources of a given name.
// If the operation fails it returns an *azcore.ResponseError type.
func (client *ServiceEndpointsClient) deleteOperation(ctx context.Context, resourceGroupName string, accountName string, serviceEndpointName string, options *ServiceEndpointsClientBeginDeleteOptions) (*http.Response, error) {
	req, err := client.deleteCreateRequest(ctx, resourceGroupName, accountName, serviceEndpointName, options)
	if err != nil {
		return nil, err
	}
	resp, err := client.pl.Do(req)
	if err != nil {
		return nil, err
	}
	if !runtime.HasStatusCode(resp, http.StatusOK, http.StatusAccepted, http.StatusNoContent) {
		return nil, runtime.NewResponseError(resp)
	}
	return resp, nil
}

// deleteCreateRequest creates the Delete request.
func (client *ServiceEndpointsClient) deleteCreateRequest(ctx context.Context, resourceGroupName string, accountName string, serviceEndpointName string, options *ServiceEndpointsClientBeginDeleteOptions) (*policy.Request, error) {
	urlPath := "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.RecommendationsService/accounts/{accountName}/serviceEndpoints/{serviceEndpointName}"
	if client.subscriptionID == "" {
		return nil, errors.New("parameter client.subscriptionID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{subscriptionId}", url.PathEscape(client.subscriptionID))
	if resourceGroupName == "" {
		return nil, errors.New("parameter resourceGroupName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{resourceGroupName}", url.PathEscape(resourceGroupName))
	if accountName == "" {
		return nil, errors.New("parameter accountName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{accountName}", url.PathEscape(accountName))
	if serviceEndpointName == "" {
		return nil, errors.New("parameter serviceEndpointName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{serviceEndpointName}", url.PathEscape(serviceEndpointName))
	req, err := runtime.NewRequest(ctx, http.MethodDelete, runtime.JoinPaths(client.host, urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("api-version", "2022-02-01")
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header.Set("Accept", "application/json")
	return req, nil
}

// Get - Returns ServiceEndpoint resources for a given name.
// If the operation fails it returns an *azcore.ResponseError type.
// resourceGroupName - The name of the resource group. The name is case insensitive.
// accountName - The name of the RecommendationsService Account resource.
// serviceEndpointName - The name of the ServiceEndpoint resource.
// options - ServiceEndpointsClientGetOptions contains the optional parameters for the ServiceEndpointsClient.Get method.
func (client *ServiceEndpointsClient) Get(ctx context.Context, resourceGroupName string, accountName string, serviceEndpointName string, options *ServiceEndpointsClientGetOptions) (ServiceEndpointsClientGetResponse, error) {
	req, err := client.getCreateRequest(ctx, resourceGroupName, accountName, serviceEndpointName, options)
	if err != nil {
		return ServiceEndpointsClientGetResponse{}, err
	}
	resp, err := client.pl.Do(req)
	if err != nil {
		return ServiceEndpointsClientGetResponse{}, err
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {
		return ServiceEndpointsClientGetResponse{}, runtime.NewResponseError(resp)
	}
	return client.getHandleResponse(resp)
}

// getCreateRequest creates the Get request.
func (client *ServiceEndpointsClient) getCreateRequest(ctx context.Context, resourceGroupName string, accountName string, serviceEndpointName string, options *ServiceEndpointsClientGetOptions) (*policy.Request, error) {
	urlPath := "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.RecommendationsService/accounts/{accountName}/serviceEndpoints/{serviceEndpointName}"
	if client.subscriptionID == "" {
		return nil, errors.New("parameter client.subscriptionID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{subscriptionId}", url.PathEscape(client.subscriptionID))
	if resourceGroupName == "" {
		return nil, errors.New("parameter resourceGroupName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{resourceGroupName}", url.PathEscape(resourceGroupName))
	if accountName == "" {
		return nil, errors.New("parameter accountName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{accountName}", url.PathEscape(accountName))
	if serviceEndpointName == "" {
		return nil, errors.New("parameter serviceEndpointName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{serviceEndpointName}", url.PathEscape(serviceEndpointName))
	req, err := runtime.NewRequest(ctx, http.MethodGet, runtime.JoinPaths(client.host, urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("api-version", "2022-02-01")
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header.Set("Accept", "application/json")
	return req, nil
}

// getHandleResponse handles the Get response.
func (client *ServiceEndpointsClient) getHandleResponse(resp *http.Response) (ServiceEndpointsClientGetResponse, error) {
	result := ServiceEndpointsClientGetResponse{RawResponse: resp}
	if err := runtime.UnmarshalAsJSON(resp, &result.ServiceEndpointResource); err != nil {
		return ServiceEndpointsClientGetResponse{}, err
	}
	return result, nil
}

// ListByAccountResource - Returns list of ServiceEndpoint resources for a given Account name.
// If the operation fails it returns an *azcore.ResponseError type.
// resourceGroupName - The name of the resource group. The name is case insensitive.
// accountName - The name of the RecommendationsService Account resource.
// options - ServiceEndpointsClientListByAccountResourceOptions contains the optional parameters for the ServiceEndpointsClient.ListByAccountResource
// method.
func (client *ServiceEndpointsClient) ListByAccountResource(resourceGroupName string, accountName string, options *ServiceEndpointsClientListByAccountResourceOptions) *ServiceEndpointsClientListByAccountResourcePager {
	return &ServiceEndpointsClientListByAccountResourcePager{
		client: client,
		requester: func(ctx context.Context) (*policy.Request, error) {
			return client.listByAccountResourceCreateRequest(ctx, resourceGroupName, accountName, options)
		},
		advancer: func(ctx context.Context, resp ServiceEndpointsClientListByAccountResourceResponse) (*policy.Request, error) {
			return runtime.NewRequest(ctx, http.MethodGet, *resp.ServiceEndpointResourceList.NextLink)
		},
	}
}

// listByAccountResourceCreateRequest creates the ListByAccountResource request.
func (client *ServiceEndpointsClient) listByAccountResourceCreateRequest(ctx context.Context, resourceGroupName string, accountName string, options *ServiceEndpointsClientListByAccountResourceOptions) (*policy.Request, error) {
	urlPath := "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.RecommendationsService/accounts/{accountName}/serviceEndpoints"
	if client.subscriptionID == "" {
		return nil, errors.New("parameter client.subscriptionID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{subscriptionId}", url.PathEscape(client.subscriptionID))
	if resourceGroupName == "" {
		return nil, errors.New("parameter resourceGroupName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{resourceGroupName}", url.PathEscape(resourceGroupName))
	if accountName == "" {
		return nil, errors.New("parameter accountName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{accountName}", url.PathEscape(accountName))
	req, err := runtime.NewRequest(ctx, http.MethodGet, runtime.JoinPaths(client.host, urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("api-version", "2022-02-01")
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header.Set("Accept", "application/json")
	return req, nil
}

// listByAccountResourceHandleResponse handles the ListByAccountResource response.
func (client *ServiceEndpointsClient) listByAccountResourceHandleResponse(resp *http.Response) (ServiceEndpointsClientListByAccountResourceResponse, error) {
	result := ServiceEndpointsClientListByAccountResourceResponse{RawResponse: resp}
	if err := runtime.UnmarshalAsJSON(resp, &result.ServiceEndpointResourceList); err != nil {
		return ServiceEndpointsClientListByAccountResourceResponse{}, err
	}
	return result, nil
}

// BeginUpdate - Updates ServiceEndpoint resource details.
// If the operation fails it returns an *azcore.ResponseError type.
// resourceGroupName - The name of the resource group. The name is case insensitive.
// accountName - The name of the RecommendationsService Account resource.
// serviceEndpointName - The name of the ServiceEndpoint resource.
// body - ServiceEndpoint resource patch details.
// options - ServiceEndpointsClientBeginUpdateOptions contains the optional parameters for the ServiceEndpointsClient.BeginUpdate
// method.
func (client *ServiceEndpointsClient) BeginUpdate(ctx context.Context, resourceGroupName string, accountName string, serviceEndpointName string, body ServiceEndpointPatchResource, options *ServiceEndpointsClientBeginUpdateOptions) (ServiceEndpointsClientUpdatePollerResponse, error) {
	resp, err := client.update(ctx, resourceGroupName, accountName, serviceEndpointName, body, options)
	if err != nil {
		return ServiceEndpointsClientUpdatePollerResponse{}, err
	}
	result := ServiceEndpointsClientUpdatePollerResponse{
		RawResponse: resp,
	}
	pt, err := armruntime.NewPoller("ServiceEndpointsClient.Update", "azure-async-operation", resp, client.pl)
	if err != nil {
		return ServiceEndpointsClientUpdatePollerResponse{}, err
	}
	result.Poller = &ServiceEndpointsClientUpdatePoller{
		pt: pt,
	}
	return result, nil
}

// Update - Updates ServiceEndpoint resource details.
// If the operation fails it returns an *azcore.ResponseError type.
func (client *ServiceEndpointsClient) update(ctx context.Context, resourceGroupName string, accountName string, serviceEndpointName string, body ServiceEndpointPatchResource, options *ServiceEndpointsClientBeginUpdateOptions) (*http.Response, error) {
	req, err := client.updateCreateRequest(ctx, resourceGroupName, accountName, serviceEndpointName, body, options)
	if err != nil {
		return nil, err
	}
	resp, err := client.pl.Do(req)
	if err != nil {
		return nil, err
	}
	if !runtime.HasStatusCode(resp, http.StatusOK, http.StatusAccepted) {
		return nil, runtime.NewResponseError(resp)
	}
	return resp, nil
}

// updateCreateRequest creates the Update request.
func (client *ServiceEndpointsClient) updateCreateRequest(ctx context.Context, resourceGroupName string, accountName string, serviceEndpointName string, body ServiceEndpointPatchResource, options *ServiceEndpointsClientBeginUpdateOptions) (*policy.Request, error) {
	urlPath := "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.RecommendationsService/accounts/{accountName}/serviceEndpoints/{serviceEndpointName}"
	if client.subscriptionID == "" {
		return nil, errors.New("parameter client.subscriptionID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{subscriptionId}", url.PathEscape(client.subscriptionID))
	if resourceGroupName == "" {
		return nil, errors.New("parameter resourceGroupName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{resourceGroupName}", url.PathEscape(resourceGroupName))
	if accountName == "" {
		return nil, errors.New("parameter accountName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{accountName}", url.PathEscape(accountName))
	if serviceEndpointName == "" {
		return nil, errors.New("parameter serviceEndpointName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{serviceEndpointName}", url.PathEscape(serviceEndpointName))
	req, err := runtime.NewRequest(ctx, http.MethodPatch, runtime.JoinPaths(client.host, urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("api-version", "2022-02-01")
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header.Set("Accept", "application/json")
	return req, runtime.MarshalAsJSON(req, body)
}
