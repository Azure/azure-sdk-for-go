// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) Go Code Generator. DO NOT EDIT.

package armrecoveryservices

import (
	"context"
	"errors"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/arm"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/policy"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/runtime"
	"net/http"
	"net/url"
	"strings"
)

// DeletedVaultsClient contains the methods for the DeletedVaults group.
// Don't use this type directly, use NewDeletedVaultsClient() instead.
type DeletedVaultsClient struct {
	internal       *arm.Client
	subscriptionID string
}

// NewDeletedVaultsClient creates a new instance of DeletedVaultsClient with the specified values.
//   - subscriptionID - The ID of the target subscription. The value must be an UUID.
//   - credential - used to authorize requests. Usually a credential from azidentity.
//   - options - pass nil to accept the default values.
func NewDeletedVaultsClient(subscriptionID string, credential azcore.TokenCredential, options *arm.ClientOptions) (*DeletedVaultsClient, error) {
	cl, err := arm.NewClient(moduleName, moduleVersion, credential, options)
	if err != nil {
		return nil, err
	}
	client := &DeletedVaultsClient{
		subscriptionID: subscriptionID,
		internal:       cl,
	}
	return client, nil
}

// Get - Get a specific deleted vault.
// If the operation fails it returns an *azcore.ResponseError type.
//
// Generated from API version 2025-08-01
//   - location - The location name.
//   - deletedVaultName - The name of the DeletedVault
//   - options - DeletedVaultsClientGetOptions contains the optional parameters for the DeletedVaultsClient.Get method.
func (client *DeletedVaultsClient) Get(ctx context.Context, location string, deletedVaultName string, options *DeletedVaultsClientGetOptions) (DeletedVaultsClientGetResponse, error) {
	var err error
	const operationName = "DeletedVaultsClient.Get"
	ctx = context.WithValue(ctx, runtime.CtxAPINameKey{}, operationName)
	ctx, endSpan := runtime.StartSpan(ctx, operationName, client.internal.Tracer(), nil)
	defer func() { endSpan(err) }()
	req, err := client.getCreateRequest(ctx, location, deletedVaultName, options)
	if err != nil {
		return DeletedVaultsClientGetResponse{}, err
	}
	httpResp, err := client.internal.Pipeline().Do(req)
	if err != nil {
		return DeletedVaultsClientGetResponse{}, err
	}
	if !runtime.HasStatusCode(httpResp, http.StatusOK) {
		err = runtime.NewResponseError(httpResp)
		return DeletedVaultsClientGetResponse{}, err
	}
	resp, err := client.getHandleResponse(httpResp)
	return resp, err
}

// getCreateRequest creates the Get request.
func (client *DeletedVaultsClient) getCreateRequest(ctx context.Context, location string, deletedVaultName string, _ *DeletedVaultsClientGetOptions) (*policy.Request, error) {
	urlPath := "/subscriptions/{subscriptionId}/providers/Microsoft.RecoveryServices/locations/{location}/deletedVaults/{deletedVaultName}"
	if client.subscriptionID == "" {
		return nil, errors.New("parameter client.subscriptionID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{subscriptionId}", url.PathEscape(client.subscriptionID))
	if location == "" {
		return nil, errors.New("parameter location cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{location}", url.PathEscape(location))
	if deletedVaultName == "" {
		return nil, errors.New("parameter deletedVaultName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{deletedVaultName}", url.PathEscape(deletedVaultName))
	req, err := runtime.NewRequest(ctx, http.MethodGet, runtime.JoinPaths(client.internal.Endpoint(), urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("api-version", "2025-08-01")
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header["Accept"] = []string{"application/json"}
	return req, nil
}

// getHandleResponse handles the Get response.
func (client *DeletedVaultsClient) getHandleResponse(resp *http.Response) (DeletedVaultsClientGetResponse, error) {
	result := DeletedVaultsClientGetResponse{}
	if err := runtime.UnmarshalAsJSON(resp, &result.DeletedVault); err != nil {
		return DeletedVaultsClientGetResponse{}, err
	}
	return result, nil
}

// GetOperationStatus - Get the operation status of a deleted vault.
// If the operation fails it returns an *azcore.ResponseError type.
//
// Generated from API version 2025-08-01
//   - location - The location name.
//   - deletedVaultName - The name of deleted vault.
//   - options - DeletedVaultsClientGetOperationStatusOptions contains the optional parameters for the DeletedVaultsClient.GetOperationStatus
//     method.
func (client *DeletedVaultsClient) GetOperationStatus(ctx context.Context, location string, deletedVaultName string, operationID string, options *DeletedVaultsClientGetOperationStatusOptions) (DeletedVaultsClientGetOperationStatusResponse, error) {
	var err error
	const operationName = "DeletedVaultsClient.GetOperationStatus"
	ctx = context.WithValue(ctx, runtime.CtxAPINameKey{}, operationName)
	ctx, endSpan := runtime.StartSpan(ctx, operationName, client.internal.Tracer(), nil)
	defer func() { endSpan(err) }()
	req, err := client.getOperationStatusCreateRequest(ctx, location, deletedVaultName, operationID, options)
	if err != nil {
		return DeletedVaultsClientGetOperationStatusResponse{}, err
	}
	httpResp, err := client.internal.Pipeline().Do(req)
	if err != nil {
		return DeletedVaultsClientGetOperationStatusResponse{}, err
	}
	if !runtime.HasStatusCode(httpResp, http.StatusOK) {
		err = runtime.NewResponseError(httpResp)
		return DeletedVaultsClientGetOperationStatusResponse{}, err
	}
	resp, err := client.getOperationStatusHandleResponse(httpResp)
	return resp, err
}

// getOperationStatusCreateRequest creates the GetOperationStatus request.
func (client *DeletedVaultsClient) getOperationStatusCreateRequest(ctx context.Context, location string, deletedVaultName string, operationID string, _ *DeletedVaultsClientGetOperationStatusOptions) (*policy.Request, error) {
	urlPath := "/subscriptions/{subscriptionId}/providers/Microsoft.RecoveryServices/locations/{location}/deletedVaults/{deletedVaultName}/operations/{operationId}"
	if client.subscriptionID == "" {
		return nil, errors.New("parameter client.subscriptionID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{subscriptionId}", url.PathEscape(client.subscriptionID))
	if location == "" {
		return nil, errors.New("parameter location cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{location}", url.PathEscape(location))
	if deletedVaultName == "" {
		return nil, errors.New("parameter deletedVaultName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{deletedVaultName}", url.PathEscape(deletedVaultName))
	if operationID == "" {
		return nil, errors.New("parameter operationID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{operationId}", url.PathEscape(operationID))
	req, err := runtime.NewRequest(ctx, http.MethodGet, runtime.JoinPaths(client.internal.Endpoint(), urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("api-version", "2025-08-01")
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header["Accept"] = []string{"application/json"}
	return req, nil
}

// getOperationStatusHandleResponse handles the GetOperationStatus response.
func (client *DeletedVaultsClient) getOperationStatusHandleResponse(resp *http.Response) (DeletedVaultsClientGetOperationStatusResponse, error) {
	result := DeletedVaultsClientGetOperationStatusResponse{}
	if err := runtime.UnmarshalAsJSON(resp, &result.OperationResource); err != nil {
		return DeletedVaultsClientGetOperationStatusResponse{}, err
	}
	return result, nil
}

// NewListBySubscriptionIDPager - List deleted vaults in a subscription.
//
// Generated from API version 2025-08-01
//   - location - The name of the Azure region.
//   - options - DeletedVaultsClientListBySubscriptionIDOptions contains the optional parameters for the DeletedVaultsClient.NewListBySubscriptionIDPager
//     method.
func (client *DeletedVaultsClient) NewListBySubscriptionIDPager(location string, options *DeletedVaultsClientListBySubscriptionIDOptions) *runtime.Pager[DeletedVaultsClientListBySubscriptionIDResponse] {
	return runtime.NewPager(runtime.PagingHandler[DeletedVaultsClientListBySubscriptionIDResponse]{
		More: func(page DeletedVaultsClientListBySubscriptionIDResponse) bool {
			return page.NextLink != nil && len(*page.NextLink) > 0
		},
		Fetcher: func(ctx context.Context, page *DeletedVaultsClientListBySubscriptionIDResponse) (DeletedVaultsClientListBySubscriptionIDResponse, error) {
			ctx = context.WithValue(ctx, runtime.CtxAPINameKey{}, "DeletedVaultsClient.NewListBySubscriptionIDPager")
			nextLink := ""
			if page != nil {
				nextLink = *page.NextLink
			}
			resp, err := runtime.FetcherForNextLink(ctx, client.internal.Pipeline(), nextLink, func(ctx context.Context) (*policy.Request, error) {
				return client.listBySubscriptionIDCreateRequest(ctx, location, options)
			}, nil)
			if err != nil {
				return DeletedVaultsClientListBySubscriptionIDResponse{}, err
			}
			return client.listBySubscriptionIDHandleResponse(resp)
		},
		Tracer: client.internal.Tracer(),
	})
}

// listBySubscriptionIDCreateRequest creates the ListBySubscriptionID request.
func (client *DeletedVaultsClient) listBySubscriptionIDCreateRequest(ctx context.Context, location string, _ *DeletedVaultsClientListBySubscriptionIDOptions) (*policy.Request, error) {
	urlPath := "/subscriptions/{subscriptionId}/providers/Microsoft.RecoveryServices/locations/{location}/deletedVaults"
	if client.subscriptionID == "" {
		return nil, errors.New("parameter client.subscriptionID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{subscriptionId}", url.PathEscape(client.subscriptionID))
	if location == "" {
		return nil, errors.New("parameter location cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{location}", url.PathEscape(location))
	req, err := runtime.NewRequest(ctx, http.MethodGet, runtime.JoinPaths(client.internal.Endpoint(), urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("api-version", "2025-08-01")
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header["Accept"] = []string{"application/json"}
	return req, nil
}

// listBySubscriptionIDHandleResponse handles the ListBySubscriptionID response.
func (client *DeletedVaultsClient) listBySubscriptionIDHandleResponse(resp *http.Response) (DeletedVaultsClientListBySubscriptionIDResponse, error) {
	result := DeletedVaultsClientListBySubscriptionIDResponse{}
	if err := runtime.UnmarshalAsJSON(resp, &result.DeletedVaultList); err != nil {
		return DeletedVaultsClientListBySubscriptionIDResponse{}, err
	}
	return result, nil
}

// BeginUndelete - Start undelete of a deleted vault.
// If the operation fails it returns an *azcore.ResponseError type.
//
// Generated from API version 2025-08-01
//   - location - The location name.
//   - deletedVaultName - The name of the DeletedVault
//   - body - The content of the action request
//   - options - DeletedVaultsClientBeginUndeleteOptions contains the optional parameters for the DeletedVaultsClient.BeginUndelete
//     method.
func (client *DeletedVaultsClient) BeginUndelete(ctx context.Context, location string, deletedVaultName string, body DeletedVaultUndeleteInput, options *DeletedVaultsClientBeginUndeleteOptions) (*runtime.Poller[DeletedVaultsClientUndeleteResponse], error) {
	if options == nil || options.ResumeToken == "" {
		resp, err := client.undelete(ctx, location, deletedVaultName, body, options)
		if err != nil {
			return nil, err
		}
		poller, err := runtime.NewPoller(resp, client.internal.Pipeline(), &runtime.NewPollerOptions[DeletedVaultsClientUndeleteResponse]{
			Tracer: client.internal.Tracer(),
		})
		return poller, err
	} else {
		return runtime.NewPollerFromResumeToken(options.ResumeToken, client.internal.Pipeline(), &runtime.NewPollerFromResumeTokenOptions[DeletedVaultsClientUndeleteResponse]{
			Tracer: client.internal.Tracer(),
		})
	}
}

// Undelete - Start undelete of a deleted vault.
// If the operation fails it returns an *azcore.ResponseError type.
//
// Generated from API version 2025-08-01
func (client *DeletedVaultsClient) undelete(ctx context.Context, location string, deletedVaultName string, body DeletedVaultUndeleteInput, options *DeletedVaultsClientBeginUndeleteOptions) (*http.Response, error) {
	var err error
	const operationName = "DeletedVaultsClient.BeginUndelete"
	ctx = context.WithValue(ctx, runtime.CtxAPINameKey{}, operationName)
	ctx, endSpan := runtime.StartSpan(ctx, operationName, client.internal.Tracer(), nil)
	defer func() { endSpan(err) }()
	req, err := client.undeleteCreateRequest(ctx, location, deletedVaultName, body, options)
	if err != nil {
		return nil, err
	}
	httpResp, err := client.internal.Pipeline().Do(req)
	if err != nil {
		return nil, err
	}
	if !runtime.HasStatusCode(httpResp, http.StatusOK, http.StatusAccepted) {
		err = runtime.NewResponseError(httpResp)
		return nil, err
	}
	return httpResp, nil
}

// undeleteCreateRequest creates the Undelete request.
func (client *DeletedVaultsClient) undeleteCreateRequest(ctx context.Context, location string, deletedVaultName string, body DeletedVaultUndeleteInput, _ *DeletedVaultsClientBeginUndeleteOptions) (*policy.Request, error) {
	urlPath := "/subscriptions/{subscriptionId}/providers/Microsoft.RecoveryServices/locations/{location}/deletedVaults/{deletedVaultName}/undelete"
	if client.subscriptionID == "" {
		return nil, errors.New("parameter client.subscriptionID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{subscriptionId}", url.PathEscape(client.subscriptionID))
	if location == "" {
		return nil, errors.New("parameter location cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{location}", url.PathEscape(location))
	if deletedVaultName == "" {
		return nil, errors.New("parameter deletedVaultName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{deletedVaultName}", url.PathEscape(deletedVaultName))
	req, err := runtime.NewRequest(ctx, http.MethodPost, runtime.JoinPaths(client.internal.Endpoint(), urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("api-version", "2025-08-01")
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header["Accept"] = []string{"application/json"}
	req.Raw().Header["Content-Type"] = []string{"application/json"}
	if err := runtime.MarshalAsJSON(req, body); err != nil {
		return nil, err
	}
	return req, nil
}
