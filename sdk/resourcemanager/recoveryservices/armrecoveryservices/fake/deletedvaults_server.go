// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) Go Code Generator. DO NOT EDIT.

package fake

import (
	"context"
	"errors"
	"fmt"
	azfake "github.com/Azure/azure-sdk-for-go/sdk/azcore/fake"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/fake/server"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/runtime"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/to"
	"github.com/Azure/azure-sdk-for-go/sdk/resourcemanager/recoveryservices/armrecoveryservices/v3"
	"net/http"
	"net/url"
	"regexp"
)

// DeletedVaultsServer is a fake server for instances of the armrecoveryservices.DeletedVaultsClient type.
type DeletedVaultsServer struct {
	// Get is the fake for method DeletedVaultsClient.Get
	// HTTP status codes to indicate success: http.StatusOK
	Get func(ctx context.Context, location string, deletedVaultName string, options *armrecoveryservices.DeletedVaultsClientGetOptions) (resp azfake.Responder[armrecoveryservices.DeletedVaultsClientGetResponse], errResp azfake.ErrorResponder)

	// GetOperationStatus is the fake for method DeletedVaultsClient.GetOperationStatus
	// HTTP status codes to indicate success: http.StatusOK
	GetOperationStatus func(ctx context.Context, location string, deletedVaultName string, operationID string, options *armrecoveryservices.DeletedVaultsClientGetOperationStatusOptions) (resp azfake.Responder[armrecoveryservices.DeletedVaultsClientGetOperationStatusResponse], errResp azfake.ErrorResponder)

	// NewListBySubscriptionIDPager is the fake for method DeletedVaultsClient.NewListBySubscriptionIDPager
	// HTTP status codes to indicate success: http.StatusOK
	NewListBySubscriptionIDPager func(location string, options *armrecoveryservices.DeletedVaultsClientListBySubscriptionIDOptions) (resp azfake.PagerResponder[armrecoveryservices.DeletedVaultsClientListBySubscriptionIDResponse])

	// BeginUndelete is the fake for method DeletedVaultsClient.BeginUndelete
	// HTTP status codes to indicate success: http.StatusOK, http.StatusAccepted, http.StatusNoContent
	BeginUndelete func(ctx context.Context, location string, deletedVaultName string, body armrecoveryservices.DeletedVaultUndeleteInput, options *armrecoveryservices.DeletedVaultsClientBeginUndeleteOptions) (resp azfake.PollerResponder[armrecoveryservices.DeletedVaultsClientUndeleteResponse], errResp azfake.ErrorResponder)
}

// NewDeletedVaultsServerTransport creates a new instance of DeletedVaultsServerTransport with the provided implementation.
// The returned DeletedVaultsServerTransport instance is connected to an instance of armrecoveryservices.DeletedVaultsClient via the
// azcore.ClientOptions.Transporter field in the client's constructor parameters.
func NewDeletedVaultsServerTransport(srv *DeletedVaultsServer) *DeletedVaultsServerTransport {
	return &DeletedVaultsServerTransport{
		srv:                          srv,
		newListBySubscriptionIDPager: newTracker[azfake.PagerResponder[armrecoveryservices.DeletedVaultsClientListBySubscriptionIDResponse]](),
		beginUndelete:                newTracker[azfake.PollerResponder[armrecoveryservices.DeletedVaultsClientUndeleteResponse]](),
	}
}

// DeletedVaultsServerTransport connects instances of armrecoveryservices.DeletedVaultsClient to instances of DeletedVaultsServer.
// Don't use this type directly, use NewDeletedVaultsServerTransport instead.
type DeletedVaultsServerTransport struct {
	srv                          *DeletedVaultsServer
	newListBySubscriptionIDPager *tracker[azfake.PagerResponder[armrecoveryservices.DeletedVaultsClientListBySubscriptionIDResponse]]
	beginUndelete                *tracker[azfake.PollerResponder[armrecoveryservices.DeletedVaultsClientUndeleteResponse]]
}

// Do implements the policy.Transporter interface for DeletedVaultsServerTransport.
func (d *DeletedVaultsServerTransport) Do(req *http.Request) (*http.Response, error) {
	rawMethod := req.Context().Value(runtime.CtxAPINameKey{})
	method, ok := rawMethod.(string)
	if !ok {
		return nil, nonRetriableError{errors.New("unable to dispatch request, missing value for CtxAPINameKey")}
	}

	return d.dispatchToMethodFake(req, method)
}

func (d *DeletedVaultsServerTransport) dispatchToMethodFake(req *http.Request, method string) (*http.Response, error) {
	resultChan := make(chan result)
	defer close(resultChan)

	go func() {
		var intercepted bool
		var res result
		if deletedVaultsServerTransportInterceptor != nil {
			res.resp, res.err, intercepted = deletedVaultsServerTransportInterceptor.Do(req)
		}
		if !intercepted {
			switch method {
			case "DeletedVaultsClient.Get":
				res.resp, res.err = d.dispatchGet(req)
			case "DeletedVaultsClient.GetOperationStatus":
				res.resp, res.err = d.dispatchGetOperationStatus(req)
			case "DeletedVaultsClient.NewListBySubscriptionIDPager":
				res.resp, res.err = d.dispatchNewListBySubscriptionIDPager(req)
			case "DeletedVaultsClient.BeginUndelete":
				res.resp, res.err = d.dispatchBeginUndelete(req)
			default:
				res.err = fmt.Errorf("unhandled API %s", method)
			}

		}
		select {
		case resultChan <- res:
		case <-req.Context().Done():
		}
	}()

	select {
	case <-req.Context().Done():
		return nil, req.Context().Err()
	case res := <-resultChan:
		return res.resp, res.err
	}
}

func (d *DeletedVaultsServerTransport) dispatchGet(req *http.Request) (*http.Response, error) {
	if d.srv.Get == nil {
		return nil, &nonRetriableError{errors.New("fake for method Get not implemented")}
	}
	const regexStr = `/subscriptions/(?P<subscriptionId>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/providers/Microsoft\.RecoveryServices/locations/(?P<location>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/deletedVaults/(?P<deletedVaultName>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)`
	regex := regexp.MustCompile(regexStr)
	matches := regex.FindStringSubmatch(req.URL.EscapedPath())
	if len(matches) < 4 {
		return nil, fmt.Errorf("failed to parse path %s", req.URL.Path)
	}
	locationParam, err := url.PathUnescape(matches[regex.SubexpIndex("location")])
	if err != nil {
		return nil, err
	}
	deletedVaultNameParam, err := url.PathUnescape(matches[regex.SubexpIndex("deletedVaultName")])
	if err != nil {
		return nil, err
	}
	respr, errRespr := d.srv.Get(req.Context(), locationParam, deletedVaultNameParam, nil)
	if respErr := server.GetError(errRespr, req); respErr != nil {
		return nil, respErr
	}
	respContent := server.GetResponseContent(respr)
	if !contains([]int{http.StatusOK}, respContent.HTTPStatus) {
		return nil, &nonRetriableError{fmt.Errorf("unexpected status code %d. acceptable values are http.StatusOK", respContent.HTTPStatus)}
	}
	resp, err := server.MarshalResponseAsJSON(respContent, server.GetResponse(respr).DeletedVault, req)
	if err != nil {
		return nil, err
	}
	return resp, nil
}

func (d *DeletedVaultsServerTransport) dispatchGetOperationStatus(req *http.Request) (*http.Response, error) {
	if d.srv.GetOperationStatus == nil {
		return nil, &nonRetriableError{errors.New("fake for method GetOperationStatus not implemented")}
	}
	const regexStr = `/subscriptions/(?P<subscriptionId>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/providers/Microsoft\.RecoveryServices/locations/(?P<location>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/deletedVaults/(?P<deletedVaultName>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/operations/(?P<operationId>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)`
	regex := regexp.MustCompile(regexStr)
	matches := regex.FindStringSubmatch(req.URL.EscapedPath())
	if len(matches) < 5 {
		return nil, fmt.Errorf("failed to parse path %s", req.URL.Path)
	}
	locationParam, err := url.PathUnescape(matches[regex.SubexpIndex("location")])
	if err != nil {
		return nil, err
	}
	deletedVaultNameParam, err := url.PathUnescape(matches[regex.SubexpIndex("deletedVaultName")])
	if err != nil {
		return nil, err
	}
	operationIDParam, err := url.PathUnescape(matches[regex.SubexpIndex("operationId")])
	if err != nil {
		return nil, err
	}
	respr, errRespr := d.srv.GetOperationStatus(req.Context(), locationParam, deletedVaultNameParam, operationIDParam, nil)
	if respErr := server.GetError(errRespr, req); respErr != nil {
		return nil, respErr
	}
	respContent := server.GetResponseContent(respr)
	if !contains([]int{http.StatusOK}, respContent.HTTPStatus) {
		return nil, &nonRetriableError{fmt.Errorf("unexpected status code %d. acceptable values are http.StatusOK", respContent.HTTPStatus)}
	}
	resp, err := server.MarshalResponseAsJSON(respContent, server.GetResponse(respr).OperationResource, req)
	if err != nil {
		return nil, err
	}
	return resp, nil
}

func (d *DeletedVaultsServerTransport) dispatchNewListBySubscriptionIDPager(req *http.Request) (*http.Response, error) {
	if d.srv.NewListBySubscriptionIDPager == nil {
		return nil, &nonRetriableError{errors.New("fake for method NewListBySubscriptionIDPager not implemented")}
	}
	newListBySubscriptionIDPager := d.newListBySubscriptionIDPager.get(req)
	if newListBySubscriptionIDPager == nil {
		const regexStr = `/subscriptions/(?P<subscriptionId>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/providers/Microsoft\.RecoveryServices/locations/(?P<location>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/deletedVaults`
		regex := regexp.MustCompile(regexStr)
		matches := regex.FindStringSubmatch(req.URL.EscapedPath())
		if len(matches) < 3 {
			return nil, fmt.Errorf("failed to parse path %s", req.URL.Path)
		}
		locationParam, err := url.PathUnescape(matches[regex.SubexpIndex("location")])
		if err != nil {
			return nil, err
		}
		resp := d.srv.NewListBySubscriptionIDPager(locationParam, nil)
		newListBySubscriptionIDPager = &resp
		d.newListBySubscriptionIDPager.add(req, newListBySubscriptionIDPager)
		server.PagerResponderInjectNextLinks(newListBySubscriptionIDPager, req, func(page *armrecoveryservices.DeletedVaultsClientListBySubscriptionIDResponse, createLink func() string) {
			page.NextLink = to.Ptr(createLink())
		})
	}
	resp, err := server.PagerResponderNext(newListBySubscriptionIDPager, req)
	if err != nil {
		return nil, err
	}
	if !contains([]int{http.StatusOK}, resp.StatusCode) {
		d.newListBySubscriptionIDPager.remove(req)
		return nil, &nonRetriableError{fmt.Errorf("unexpected status code %d. acceptable values are http.StatusOK", resp.StatusCode)}
	}
	if !server.PagerResponderMore(newListBySubscriptionIDPager) {
		d.newListBySubscriptionIDPager.remove(req)
	}
	return resp, nil
}

func (d *DeletedVaultsServerTransport) dispatchBeginUndelete(req *http.Request) (*http.Response, error) {
	if d.srv.BeginUndelete == nil {
		return nil, &nonRetriableError{errors.New("fake for method BeginUndelete not implemented")}
	}
	beginUndelete := d.beginUndelete.get(req)
	if beginUndelete == nil {
		const regexStr = `/subscriptions/(?P<subscriptionId>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/providers/Microsoft\.RecoveryServices/locations/(?P<location>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/deletedVaults/(?P<deletedVaultName>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/undelete`
		regex := regexp.MustCompile(regexStr)
		matches := regex.FindStringSubmatch(req.URL.EscapedPath())
		if len(matches) < 4 {
			return nil, fmt.Errorf("failed to parse path %s", req.URL.Path)
		}
		body, err := server.UnmarshalRequestAsJSON[armrecoveryservices.DeletedVaultUndeleteInput](req)
		if err != nil {
			return nil, err
		}
		locationParam, err := url.PathUnescape(matches[regex.SubexpIndex("location")])
		if err != nil {
			return nil, err
		}
		deletedVaultNameParam, err := url.PathUnescape(matches[regex.SubexpIndex("deletedVaultName")])
		if err != nil {
			return nil, err
		}
		respr, errRespr := d.srv.BeginUndelete(req.Context(), locationParam, deletedVaultNameParam, body, nil)
		if respErr := server.GetError(errRespr, req); respErr != nil {
			return nil, respErr
		}
		beginUndelete = &respr
		d.beginUndelete.add(req, beginUndelete)
	}

	resp, err := server.PollerResponderNext(beginUndelete, req)
	if err != nil {
		return nil, err
	}

	if !contains([]int{http.StatusOK, http.StatusAccepted, http.StatusNoContent}, resp.StatusCode) {
		d.beginUndelete.remove(req)
		return nil, &nonRetriableError{fmt.Errorf("unexpected status code %d. acceptable values are http.StatusOK, http.StatusAccepted, http.StatusNoContent", resp.StatusCode)}
	}
	if !server.PollerResponderMore(beginUndelete) {
		d.beginUndelete.remove(req)
	}

	return resp, nil
}

// set this to conditionally intercept incoming requests to DeletedVaultsServerTransport
var deletedVaultsServerTransportInterceptor interface {
	// Do returns true if the server transport should use the returned response/error
	Do(*http.Request) (*http.Response, error, bool)
}
