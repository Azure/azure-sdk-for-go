//go:build go1.16
// +build go1.16

// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

package armrecoveryservices

import (
	"context"
	"errors"
	"net/http"
	"net/url"
	"strings"

	"github.com/Azure/azure-sdk-for-go/sdk/azcore/arm"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/policy"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/runtime"
)

// UsagesClient contains the methods for the Usages group.
// Don't use this type directly, use NewUsagesClient() instead.
type UsagesClient struct {
	ep             string
	pl             runtime.Pipeline
	subscriptionID string
}

// NewUsagesClient creates a new instance of UsagesClient with the specified values.
func NewUsagesClient(con *arm.Connection, subscriptionID string) *UsagesClient {
	return &UsagesClient{ep: con.Endpoint(), pl: con.NewPipeline(module, version), subscriptionID: subscriptionID}
}

// ListByVaults - Fetches the usages of the vault.
// If the operation fails it returns a generic error.
func (client *UsagesClient) ListByVaults(ctx context.Context, resourceGroupName string, vaultName string, options *UsagesListByVaultsOptions) (UsagesListByVaultsResponse, error) {
	req, err := client.listByVaultsCreateRequest(ctx, resourceGroupName, vaultName, options)
	if err != nil {
		return UsagesListByVaultsResponse{}, err
	}
	resp, err := client.pl.Do(req)
	if err != nil {
		return UsagesListByVaultsResponse{}, err
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {
		return UsagesListByVaultsResponse{}, client.listByVaultsHandleError(resp)
	}
	return client.listByVaultsHandleResponse(resp)
}

// listByVaultsCreateRequest creates the ListByVaults request.
func (client *UsagesClient) listByVaultsCreateRequest(ctx context.Context, resourceGroupName string, vaultName string, options *UsagesListByVaultsOptions) (*policy.Request, error) {
	urlPath := "/Subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.RecoveryServices/vaults/{vaultName}/usages"
	if client.subscriptionID == "" {
		return nil, errors.New("parameter client.subscriptionID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{subscriptionId}", url.PathEscape(client.subscriptionID))
	if resourceGroupName == "" {
		return nil, errors.New("parameter resourceGroupName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{resourceGroupName}", url.PathEscape(resourceGroupName))
	if vaultName == "" {
		return nil, errors.New("parameter vaultName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{vaultName}", url.PathEscape(vaultName))
	req, err := runtime.NewRequest(ctx, http.MethodGet, runtime.JoinPaths(client.ep, urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("api-version", "2021-08-01")
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header.Set("Accept", "application/json")
	return req, nil
}

// listByVaultsHandleResponse handles the ListByVaults response.
func (client *UsagesClient) listByVaultsHandleResponse(resp *http.Response) (UsagesListByVaultsResponse, error) {
	result := UsagesListByVaultsResponse{RawResponse: resp}
	if err := runtime.UnmarshalAsJSON(resp, &result.VaultUsageList); err != nil {
		return UsagesListByVaultsResponse{}, err
	}
	return result, nil
}

// listByVaultsHandleError handles the ListByVaults error response.
func (client *UsagesClient) listByVaultsHandleError(resp *http.Response) error {
	body, err := runtime.Payload(resp)
	if err != nil {
		return runtime.NewResponseError(err, resp)
	}
	if len(body) == 0 {
		return runtime.NewResponseError(errors.New(resp.Status), resp)
	}
	return runtime.NewResponseError(errors.New(string(body)), resp)
}
