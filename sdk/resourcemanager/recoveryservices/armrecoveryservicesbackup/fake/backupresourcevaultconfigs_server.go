//go:build go1.18
// +build go1.18

// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator. DO NOT EDIT.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

package fake

import (
	"context"
	"errors"
	"fmt"
	azfake "github.com/Azure/azure-sdk-for-go/sdk/azcore/fake"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/fake/server"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/runtime"
	"github.com/Azure/azure-sdk-for-go/sdk/resourcemanager/recoveryservices/armrecoveryservicesbackup/v3"
	"net/http"
	"net/url"
	"regexp"
)

// BackupResourceVaultConfigsServer is a fake server for instances of the armrecoveryservicesbackup.BackupResourceVaultConfigsClient type.
type BackupResourceVaultConfigsServer struct {
	// Get is the fake for method BackupResourceVaultConfigsClient.Get
	// HTTP status codes to indicate success: http.StatusOK
	Get func(ctx context.Context, vaultName string, resourceGroupName string, options *armrecoveryservicesbackup.BackupResourceVaultConfigsClientGetOptions) (resp azfake.Responder[armrecoveryservicesbackup.BackupResourceVaultConfigsClientGetResponse], errResp azfake.ErrorResponder)

	// Put is the fake for method BackupResourceVaultConfigsClient.Put
	// HTTP status codes to indicate success: http.StatusOK
	Put func(ctx context.Context, vaultName string, resourceGroupName string, parameters armrecoveryservicesbackup.BackupResourceVaultConfigResource, options *armrecoveryservicesbackup.BackupResourceVaultConfigsClientPutOptions) (resp azfake.Responder[armrecoveryservicesbackup.BackupResourceVaultConfigsClientPutResponse], errResp azfake.ErrorResponder)

	// Update is the fake for method BackupResourceVaultConfigsClient.Update
	// HTTP status codes to indicate success: http.StatusOK
	Update func(ctx context.Context, vaultName string, resourceGroupName string, parameters armrecoveryservicesbackup.BackupResourceVaultConfigResource, options *armrecoveryservicesbackup.BackupResourceVaultConfigsClientUpdateOptions) (resp azfake.Responder[armrecoveryservicesbackup.BackupResourceVaultConfigsClientUpdateResponse], errResp azfake.ErrorResponder)
}

// NewBackupResourceVaultConfigsServerTransport creates a new instance of BackupResourceVaultConfigsServerTransport with the provided implementation.
// The returned BackupResourceVaultConfigsServerTransport instance is connected to an instance of armrecoveryservicesbackup.BackupResourceVaultConfigsClient via the
// azcore.ClientOptions.Transporter field in the client's constructor parameters.
func NewBackupResourceVaultConfigsServerTransport(srv *BackupResourceVaultConfigsServer) *BackupResourceVaultConfigsServerTransport {
	return &BackupResourceVaultConfigsServerTransport{srv: srv}
}

// BackupResourceVaultConfigsServerTransport connects instances of armrecoveryservicesbackup.BackupResourceVaultConfigsClient to instances of BackupResourceVaultConfigsServer.
// Don't use this type directly, use NewBackupResourceVaultConfigsServerTransport instead.
type BackupResourceVaultConfigsServerTransport struct {
	srv *BackupResourceVaultConfigsServer
}

// Do implements the policy.Transporter interface for BackupResourceVaultConfigsServerTransport.
func (b *BackupResourceVaultConfigsServerTransport) Do(req *http.Request) (*http.Response, error) {
	rawMethod := req.Context().Value(runtime.CtxAPINameKey{})
	method, ok := rawMethod.(string)
	if !ok {
		return nil, nonRetriableError{errors.New("unable to dispatch request, missing value for CtxAPINameKey")}
	}

	var resp *http.Response
	var err error

	switch method {
	case "BackupResourceVaultConfigsClient.Get":
		resp, err = b.dispatchGet(req)
	case "BackupResourceVaultConfigsClient.Put":
		resp, err = b.dispatchPut(req)
	case "BackupResourceVaultConfigsClient.Update":
		resp, err = b.dispatchUpdate(req)
	default:
		err = fmt.Errorf("unhandled API %s", method)
	}

	if err != nil {
		return nil, err
	}

	return resp, nil
}

func (b *BackupResourceVaultConfigsServerTransport) dispatchGet(req *http.Request) (*http.Response, error) {
	if b.srv.Get == nil {
		return nil, &nonRetriableError{errors.New("fake for method Get not implemented")}
	}
	const regexStr = `/subscriptions/(?P<subscriptionId>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/resourceGroups/(?P<resourceGroupName>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/providers/Microsoft\.RecoveryServices/vaults/(?P<vaultName>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/backupconfig/vaultconfig`
	regex := regexp.MustCompile(regexStr)
	matches := regex.FindStringSubmatch(req.URL.EscapedPath())
	if matches == nil || len(matches) < 3 {
		return nil, fmt.Errorf("failed to parse path %s", req.URL.Path)
	}
	vaultNameParam, err := url.PathUnescape(matches[regex.SubexpIndex("vaultName")])
	if err != nil {
		return nil, err
	}
	resourceGroupNameParam, err := url.PathUnescape(matches[regex.SubexpIndex("resourceGroupName")])
	if err != nil {
		return nil, err
	}
	respr, errRespr := b.srv.Get(req.Context(), vaultNameParam, resourceGroupNameParam, nil)
	if respErr := server.GetError(errRespr, req); respErr != nil {
		return nil, respErr
	}
	respContent := server.GetResponseContent(respr)
	if !contains([]int{http.StatusOK}, respContent.HTTPStatus) {
		return nil, &nonRetriableError{fmt.Errorf("unexpected status code %d. acceptable values are http.StatusOK", respContent.HTTPStatus)}
	}
	resp, err := server.MarshalResponseAsJSON(respContent, server.GetResponse(respr).BackupResourceVaultConfigResource, req)
	if err != nil {
		return nil, err
	}
	return resp, nil
}

func (b *BackupResourceVaultConfigsServerTransport) dispatchPut(req *http.Request) (*http.Response, error) {
	if b.srv.Put == nil {
		return nil, &nonRetriableError{errors.New("fake for method Put not implemented")}
	}
	const regexStr = `/subscriptions/(?P<subscriptionId>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/resourceGroups/(?P<resourceGroupName>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/providers/Microsoft\.RecoveryServices/vaults/(?P<vaultName>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/backupconfig/vaultconfig`
	regex := regexp.MustCompile(regexStr)
	matches := regex.FindStringSubmatch(req.URL.EscapedPath())
	if matches == nil || len(matches) < 3 {
		return nil, fmt.Errorf("failed to parse path %s", req.URL.Path)
	}
	body, err := server.UnmarshalRequestAsJSON[armrecoveryservicesbackup.BackupResourceVaultConfigResource](req)
	if err != nil {
		return nil, err
	}
	vaultNameParam, err := url.PathUnescape(matches[regex.SubexpIndex("vaultName")])
	if err != nil {
		return nil, err
	}
	resourceGroupNameParam, err := url.PathUnescape(matches[regex.SubexpIndex("resourceGroupName")])
	if err != nil {
		return nil, err
	}
	respr, errRespr := b.srv.Put(req.Context(), vaultNameParam, resourceGroupNameParam, body, nil)
	if respErr := server.GetError(errRespr, req); respErr != nil {
		return nil, respErr
	}
	respContent := server.GetResponseContent(respr)
	if !contains([]int{http.StatusOK}, respContent.HTTPStatus) {
		return nil, &nonRetriableError{fmt.Errorf("unexpected status code %d. acceptable values are http.StatusOK", respContent.HTTPStatus)}
	}
	resp, err := server.MarshalResponseAsJSON(respContent, server.GetResponse(respr).BackupResourceVaultConfigResource, req)
	if err != nil {
		return nil, err
	}
	return resp, nil
}

func (b *BackupResourceVaultConfigsServerTransport) dispatchUpdate(req *http.Request) (*http.Response, error) {
	if b.srv.Update == nil {
		return nil, &nonRetriableError{errors.New("fake for method Update not implemented")}
	}
	const regexStr = `/subscriptions/(?P<subscriptionId>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/resourceGroups/(?P<resourceGroupName>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/providers/Microsoft\.RecoveryServices/vaults/(?P<vaultName>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/backupconfig/vaultconfig`
	regex := regexp.MustCompile(regexStr)
	matches := regex.FindStringSubmatch(req.URL.EscapedPath())
	if matches == nil || len(matches) < 3 {
		return nil, fmt.Errorf("failed to parse path %s", req.URL.Path)
	}
	body, err := server.UnmarshalRequestAsJSON[armrecoveryservicesbackup.BackupResourceVaultConfigResource](req)
	if err != nil {
		return nil, err
	}
	vaultNameParam, err := url.PathUnescape(matches[regex.SubexpIndex("vaultName")])
	if err != nil {
		return nil, err
	}
	resourceGroupNameParam, err := url.PathUnescape(matches[regex.SubexpIndex("resourceGroupName")])
	if err != nil {
		return nil, err
	}
	respr, errRespr := b.srv.Update(req.Context(), vaultNameParam, resourceGroupNameParam, body, nil)
	if respErr := server.GetError(errRespr, req); respErr != nil {
		return nil, respErr
	}
	respContent := server.GetResponseContent(respr)
	if !contains([]int{http.StatusOK}, respContent.HTTPStatus) {
		return nil, &nonRetriableError{fmt.Errorf("unexpected status code %d. acceptable values are http.StatusOK", respContent.HTTPStatus)}
	}
	resp, err := server.MarshalResponseAsJSON(respContent, server.GetResponse(respr).BackupResourceVaultConfigResource, req)
	if err != nil {
		return nil, err
	}
	return resp, nil
}
