//go:build go1.18
// +build go1.18

// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator. DO NOT EDIT.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

package fake

import (
	"context"
	"errors"
	"fmt"
	azfake "github.com/Azure/azure-sdk-for-go/sdk/azcore/fake"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/fake/server"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/runtime"
	"github.com/Azure/azure-sdk-for-go/sdk/resourcemanager/recoveryservices/armrecoveryservicesbackup/v3"
	"net/http"
	"net/url"
	"reflect"
	"regexp"
)

// SecurityPINsServer is a fake server for instances of the armrecoveryservicesbackup.SecurityPINsClient type.
type SecurityPINsServer struct {
	// Get is the fake for method SecurityPINsClient.Get
	// HTTP status codes to indicate success: http.StatusOK
	Get func(ctx context.Context, vaultName string, resourceGroupName string, options *armrecoveryservicesbackup.SecurityPINsClientGetOptions) (resp azfake.Responder[armrecoveryservicesbackup.SecurityPINsClientGetResponse], errResp azfake.ErrorResponder)
}

// NewSecurityPINsServerTransport creates a new instance of SecurityPINsServerTransport with the provided implementation.
// The returned SecurityPINsServerTransport instance is connected to an instance of armrecoveryservicesbackup.SecurityPINsClient via the
// azcore.ClientOptions.Transporter field in the client's constructor parameters.
func NewSecurityPINsServerTransport(srv *SecurityPINsServer) *SecurityPINsServerTransport {
	return &SecurityPINsServerTransport{srv: srv}
}

// SecurityPINsServerTransport connects instances of armrecoveryservicesbackup.SecurityPINsClient to instances of SecurityPINsServer.
// Don't use this type directly, use NewSecurityPINsServerTransport instead.
type SecurityPINsServerTransport struct {
	srv *SecurityPINsServer
}

// Do implements the policy.Transporter interface for SecurityPINsServerTransport.
func (s *SecurityPINsServerTransport) Do(req *http.Request) (*http.Response, error) {
	rawMethod := req.Context().Value(runtime.CtxAPINameKey{})
	method, ok := rawMethod.(string)
	if !ok {
		return nil, nonRetriableError{errors.New("unable to dispatch request, missing value for CtxAPINameKey")}
	}

	var resp *http.Response
	var err error

	switch method {
	case "SecurityPINsClient.Get":
		resp, err = s.dispatchGet(req)
	default:
		err = fmt.Errorf("unhandled API %s", method)
	}

	if err != nil {
		return nil, err
	}

	return resp, nil
}

func (s *SecurityPINsServerTransport) dispatchGet(req *http.Request) (*http.Response, error) {
	if s.srv.Get == nil {
		return nil, &nonRetriableError{errors.New("fake for method Get not implemented")}
	}
	const regexStr = `/subscriptions/(?P<subscriptionId>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/resourceGroups/(?P<resourceGroupName>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/providers/Microsoft\.RecoveryServices/vaults/(?P<vaultName>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/backupSecurityPIN`
	regex := regexp.MustCompile(regexStr)
	matches := regex.FindStringSubmatch(req.URL.EscapedPath())
	if matches == nil || len(matches) < 3 {
		return nil, fmt.Errorf("failed to parse path %s", req.URL.Path)
	}
	body, err := server.UnmarshalRequestAsJSON[armrecoveryservicesbackup.SecurityPinBase](req)
	if err != nil {
		return nil, err
	}
	vaultNameParam, err := url.PathUnescape(matches[regex.SubexpIndex("vaultName")])
	if err != nil {
		return nil, err
	}
	resourceGroupNameParam, err := url.PathUnescape(matches[regex.SubexpIndex("resourceGroupName")])
	if err != nil {
		return nil, err
	}
	var options *armrecoveryservicesbackup.SecurityPINsClientGetOptions
	if !reflect.ValueOf(body).IsZero() {
		options = &armrecoveryservicesbackup.SecurityPINsClientGetOptions{
			Parameters: &body,
		}
	}
	respr, errRespr := s.srv.Get(req.Context(), vaultNameParam, resourceGroupNameParam, options)
	if respErr := server.GetError(errRespr, req); respErr != nil {
		return nil, respErr
	}
	respContent := server.GetResponseContent(respr)
	if !contains([]int{http.StatusOK}, respContent.HTTPStatus) {
		return nil, &nonRetriableError{fmt.Errorf("unexpected status code %d. acceptable values are http.StatusOK", respContent.HTTPStatus)}
	}
	resp, err := server.MarshalResponseAsJSON(respContent, server.GetResponse(respr).TokenInformation, req)
	if err != nil {
		return nil, err
	}
	return resp, nil
}
