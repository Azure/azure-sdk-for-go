//go:build go1.16
// +build go1.16

// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

package armrecoveryservicesbackup_test

import (
	"context"
	"log"

	"time"

	"github.com/Azure/azure-sdk-for-go/sdk/azcore/to"
	"github.com/Azure/azure-sdk-for-go/sdk/azidentity"
	"github.com/Azure/azure-sdk-for-go/sdk/resourcemanager/recoveryservices/armrecoveryservicesbackup"
)

// x-ms-original-file: specification/recoveryservicesbackup/resource-manager/Microsoft.RecoveryServices/stable/2021-12-01/examples/BackupDataMove/BackupDataMoveOperationStatus_Get.json
func ExampleClient_GetOperationStatus() {
	cred, err := azidentity.NewDefaultAzureCredential(nil)
	if err != nil {
		log.Fatalf("failed to obtain a credential: %v", err)
	}
	ctx := context.Background()
	client := armrecoveryservicesbackup.NewClient("<subscription-id>", cred, nil)
	res, err := client.GetOperationStatus(ctx,
		"<vault-name>",
		"<resource-group-name>",
		"<operation-id>",
		nil)
	if err != nil {
		log.Fatal(err)
	}
	log.Printf("Response result: %#v\n", res.ClientGetOperationStatusResult)
}

// x-ms-original-file: specification/recoveryservicesbackup/resource-manager/Microsoft.RecoveryServices/stable/2021-12-01/examples/BackupDataMove/PrepareDataMove_Post.json
func ExampleClient_BeginBMSPrepareDataMove() {
	cred, err := azidentity.NewDefaultAzureCredential(nil)
	if err != nil {
		log.Fatalf("failed to obtain a credential: %v", err)
	}
	ctx := context.Background()
	client := armrecoveryservicesbackup.NewClient("<subscription-id>", cred, nil)
	poller, err := client.BeginBMSPrepareDataMove(ctx,
		"<vault-name>",
		"<resource-group-name>",
		armrecoveryservicesbackup.PrepareDataMoveRequest{
			DataMoveLevel:    armrecoveryservicesbackup.DataMoveLevel("Vault").ToPtr(),
			TargetRegion:     to.StringPtr("<target-region>"),
			TargetResourceID: to.StringPtr("<target-resource-id>"),
		},
		nil)
	if err != nil {
		log.Fatal(err)
	}
	_, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		log.Fatal(err)
	}
}

// x-ms-original-file: specification/recoveryservicesbackup/resource-manager/Microsoft.RecoveryServices/stable/2021-12-01/examples/BackupDataMove/TriggerDataMove_Post.json
func ExampleClient_BeginBMSTriggerDataMove() {
	cred, err := azidentity.NewDefaultAzureCredential(nil)
	if err != nil {
		log.Fatalf("failed to obtain a credential: %v", err)
	}
	ctx := context.Background()
	client := armrecoveryservicesbackup.NewClient("<subscription-id>", cred, nil)
	poller, err := client.BeginBMSTriggerDataMove(ctx,
		"<vault-name>",
		"<resource-group-name>",
		armrecoveryservicesbackup.TriggerDataMoveRequest{
			CorrelationID:    to.StringPtr("<correlation-id>"),
			DataMoveLevel:    armrecoveryservicesbackup.DataMoveLevel("Vault").ToPtr(),
			SourceRegion:     to.StringPtr("<source-region>"),
			SourceResourceID: to.StringPtr("<source-resource-id>"),
		},
		nil)
	if err != nil {
		log.Fatal(err)
	}
	_, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		log.Fatal(err)
	}
}

// x-ms-original-file: specification/recoveryservicesbackup/resource-manager/Microsoft.RecoveryServices/stable/2021-12-01/examples/TriggerRecoveryPointMove_Post.json
func ExampleClient_BeginMoveRecoveryPoint() {
	cred, err := azidentity.NewDefaultAzureCredential(nil)
	if err != nil {
		log.Fatalf("failed to obtain a credential: %v", err)
	}
	ctx := context.Background()
	client := armrecoveryservicesbackup.NewClient("<subscription-id>", cred, nil)
	poller, err := client.BeginMoveRecoveryPoint(ctx,
		"<vault-name>",
		"<resource-group-name>",
		"<fabric-name>",
		"<container-name>",
		"<protected-item-name>",
		"<recovery-point-id>",
		armrecoveryservicesbackup.MoveRPAcrossTiersRequest{
			ObjectType:     to.StringPtr("<object-type>"),
			SourceTierType: armrecoveryservicesbackup.RecoveryPointTierTypeHardenedRP.ToPtr(),
			TargetTierType: armrecoveryservicesbackup.RecoveryPointTierTypeArchivedRP.ToPtr(),
		},
		nil)
	if err != nil {
		log.Fatal(err)
	}
	_, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		log.Fatal(err)
	}
}
