//go:build go1.16
// +build go1.16

// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

package armrecoveryservicesbackup

import (
	"context"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/policy"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/runtime"
	"net/http"
	"reflect"
)

// BackupEnginesListPager provides operations for iterating over paged responses.
type BackupEnginesListPager struct {
	client    *BackupEnginesClient
	current   BackupEnginesListResponse
	err       error
	requester func(context.Context) (*policy.Request, error)
	advancer  func(context.Context, BackupEnginesListResponse) (*policy.Request, error)
}

// Err returns the last error encountered while paging.
func (p *BackupEnginesListPager) Err() error {
	return p.err
}

// NextPage returns true if the pager advanced to the next page.
// Returns false if there are no more pages or an error occurred.
func (p *BackupEnginesListPager) NextPage(ctx context.Context) bool {
	var req *policy.Request
	var err error
	if !reflect.ValueOf(p.current).IsZero() {
		if p.current.BackupEngineBaseResourceList.NextLink == nil || len(*p.current.BackupEngineBaseResourceList.NextLink) == 0 {
			return false
		}
		req, err = p.advancer(ctx, p.current)
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		p.err = err
		return false
	}
	resp, err := p.client.pl.Do(req)
	if err != nil {
		p.err = err
		return false
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {
		p.err = p.client.listHandleError(resp)
		return false
	}
	result, err := p.client.listHandleResponse(resp)
	if err != nil {
		p.err = err
		return false
	}
	p.current = result
	return true
}

// PageResponse returns the current BackupEnginesListResponse page.
func (p *BackupEnginesListPager) PageResponse() BackupEnginesListResponse {
	return p.current
}

// BackupJobsListPager provides operations for iterating over paged responses.
type BackupJobsListPager struct {
	client    *BackupJobsClient
	current   BackupJobsListResponse
	err       error
	requester func(context.Context) (*policy.Request, error)
	advancer  func(context.Context, BackupJobsListResponse) (*policy.Request, error)
}

// Err returns the last error encountered while paging.
func (p *BackupJobsListPager) Err() error {
	return p.err
}

// NextPage returns true if the pager advanced to the next page.
// Returns false if there are no more pages or an error occurred.
func (p *BackupJobsListPager) NextPage(ctx context.Context) bool {
	var req *policy.Request
	var err error
	if !reflect.ValueOf(p.current).IsZero() {
		if p.current.JobResourceList.NextLink == nil || len(*p.current.JobResourceList.NextLink) == 0 {
			return false
		}
		req, err = p.advancer(ctx, p.current)
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		p.err = err
		return false
	}
	resp, err := p.client.pl.Do(req)
	if err != nil {
		p.err = err
		return false
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {
		p.err = p.client.listHandleError(resp)
		return false
	}
	result, err := p.client.listHandleResponse(resp)
	if err != nil {
		p.err = err
		return false
	}
	p.current = result
	return true
}

// PageResponse returns the current BackupJobsListResponse page.
func (p *BackupJobsListPager) PageResponse() BackupJobsListResponse {
	return p.current
}

// BackupPoliciesListPager provides operations for iterating over paged responses.
type BackupPoliciesListPager struct {
	client    *BackupPoliciesClient
	current   BackupPoliciesListResponse
	err       error
	requester func(context.Context) (*policy.Request, error)
	advancer  func(context.Context, BackupPoliciesListResponse) (*policy.Request, error)
}

// Err returns the last error encountered while paging.
func (p *BackupPoliciesListPager) Err() error {
	return p.err
}

// NextPage returns true if the pager advanced to the next page.
// Returns false if there are no more pages or an error occurred.
func (p *BackupPoliciesListPager) NextPage(ctx context.Context) bool {
	var req *policy.Request
	var err error
	if !reflect.ValueOf(p.current).IsZero() {
		if p.current.ProtectionPolicyResourceList.NextLink == nil || len(*p.current.ProtectionPolicyResourceList.NextLink) == 0 {
			return false
		}
		req, err = p.advancer(ctx, p.current)
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		p.err = err
		return false
	}
	resp, err := p.client.pl.Do(req)
	if err != nil {
		p.err = err
		return false
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {
		p.err = p.client.listHandleError(resp)
		return false
	}
	result, err := p.client.listHandleResponse(resp)
	if err != nil {
		p.err = err
		return false
	}
	p.current = result
	return true
}

// PageResponse returns the current BackupPoliciesListResponse page.
func (p *BackupPoliciesListPager) PageResponse() BackupPoliciesListResponse {
	return p.current
}

// BackupProtectableItemsListPager provides operations for iterating over paged responses.
type BackupProtectableItemsListPager struct {
	client    *BackupProtectableItemsClient
	current   BackupProtectableItemsListResponse
	err       error
	requester func(context.Context) (*policy.Request, error)
	advancer  func(context.Context, BackupProtectableItemsListResponse) (*policy.Request, error)
}

// Err returns the last error encountered while paging.
func (p *BackupProtectableItemsListPager) Err() error {
	return p.err
}

// NextPage returns true if the pager advanced to the next page.
// Returns false if there are no more pages or an error occurred.
func (p *BackupProtectableItemsListPager) NextPage(ctx context.Context) bool {
	var req *policy.Request
	var err error
	if !reflect.ValueOf(p.current).IsZero() {
		if p.current.WorkloadProtectableItemResourceList.NextLink == nil || len(*p.current.WorkloadProtectableItemResourceList.NextLink) == 0 {
			return false
		}
		req, err = p.advancer(ctx, p.current)
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		p.err = err
		return false
	}
	resp, err := p.client.pl.Do(req)
	if err != nil {
		p.err = err
		return false
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {
		p.err = p.client.listHandleError(resp)
		return false
	}
	result, err := p.client.listHandleResponse(resp)
	if err != nil {
		p.err = err
		return false
	}
	p.current = result
	return true
}

// PageResponse returns the current BackupProtectableItemsListResponse page.
func (p *BackupProtectableItemsListPager) PageResponse() BackupProtectableItemsListResponse {
	return p.current
}

// BackupProtectedItemsListPager provides operations for iterating over paged responses.
type BackupProtectedItemsListPager struct {
	client    *BackupProtectedItemsClient
	current   BackupProtectedItemsListResponse
	err       error
	requester func(context.Context) (*policy.Request, error)
	advancer  func(context.Context, BackupProtectedItemsListResponse) (*policy.Request, error)
}

// Err returns the last error encountered while paging.
func (p *BackupProtectedItemsListPager) Err() error {
	return p.err
}

// NextPage returns true if the pager advanced to the next page.
// Returns false if there are no more pages or an error occurred.
func (p *BackupProtectedItemsListPager) NextPage(ctx context.Context) bool {
	var req *policy.Request
	var err error
	if !reflect.ValueOf(p.current).IsZero() {
		if p.current.ProtectedItemResourceList.NextLink == nil || len(*p.current.ProtectedItemResourceList.NextLink) == 0 {
			return false
		}
		req, err = p.advancer(ctx, p.current)
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		p.err = err
		return false
	}
	resp, err := p.client.pl.Do(req)
	if err != nil {
		p.err = err
		return false
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {
		p.err = p.client.listHandleError(resp)
		return false
	}
	result, err := p.client.listHandleResponse(resp)
	if err != nil {
		p.err = err
		return false
	}
	p.current = result
	return true
}

// PageResponse returns the current BackupProtectedItemsListResponse page.
func (p *BackupProtectedItemsListPager) PageResponse() BackupProtectedItemsListResponse {
	return p.current
}

// BackupProtectionContainersListPager provides operations for iterating over paged responses.
type BackupProtectionContainersListPager struct {
	client    *BackupProtectionContainersClient
	current   BackupProtectionContainersListResponse
	err       error
	requester func(context.Context) (*policy.Request, error)
	advancer  func(context.Context, BackupProtectionContainersListResponse) (*policy.Request, error)
}

// Err returns the last error encountered while paging.
func (p *BackupProtectionContainersListPager) Err() error {
	return p.err
}

// NextPage returns true if the pager advanced to the next page.
// Returns false if there are no more pages or an error occurred.
func (p *BackupProtectionContainersListPager) NextPage(ctx context.Context) bool {
	var req *policy.Request
	var err error
	if !reflect.ValueOf(p.current).IsZero() {
		if p.current.ProtectionContainerResourceList.NextLink == nil || len(*p.current.ProtectionContainerResourceList.NextLink) == 0 {
			return false
		}
		req, err = p.advancer(ctx, p.current)
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		p.err = err
		return false
	}
	resp, err := p.client.pl.Do(req)
	if err != nil {
		p.err = err
		return false
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {
		p.err = p.client.listHandleError(resp)
		return false
	}
	result, err := p.client.listHandleResponse(resp)
	if err != nil {
		p.err = err
		return false
	}
	p.current = result
	return true
}

// PageResponse returns the current BackupProtectionContainersListResponse page.
func (p *BackupProtectionContainersListPager) PageResponse() BackupProtectionContainersListResponse {
	return p.current
}

// BackupProtectionIntentListPager provides operations for iterating over paged responses.
type BackupProtectionIntentListPager struct {
	client    *BackupProtectionIntentClient
	current   BackupProtectionIntentListResponse
	err       error
	requester func(context.Context) (*policy.Request, error)
	advancer  func(context.Context, BackupProtectionIntentListResponse) (*policy.Request, error)
}

// Err returns the last error encountered while paging.
func (p *BackupProtectionIntentListPager) Err() error {
	return p.err
}

// NextPage returns true if the pager advanced to the next page.
// Returns false if there are no more pages or an error occurred.
func (p *BackupProtectionIntentListPager) NextPage(ctx context.Context) bool {
	var req *policy.Request
	var err error
	if !reflect.ValueOf(p.current).IsZero() {
		if p.current.ProtectionIntentResourceList.NextLink == nil || len(*p.current.ProtectionIntentResourceList.NextLink) == 0 {
			return false
		}
		req, err = p.advancer(ctx, p.current)
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		p.err = err
		return false
	}
	resp, err := p.client.pl.Do(req)
	if err != nil {
		p.err = err
		return false
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {
		p.err = p.client.listHandleError(resp)
		return false
	}
	result, err := p.client.listHandleResponse(resp)
	if err != nil {
		p.err = err
		return false
	}
	p.current = result
	return true
}

// PageResponse returns the current BackupProtectionIntentListResponse page.
func (p *BackupProtectionIntentListPager) PageResponse() BackupProtectionIntentListResponse {
	return p.current
}

// BackupWorkloadItemsListPager provides operations for iterating over paged responses.
type BackupWorkloadItemsListPager struct {
	client    *BackupWorkloadItemsClient
	current   BackupWorkloadItemsListResponse
	err       error
	requester func(context.Context) (*policy.Request, error)
	advancer  func(context.Context, BackupWorkloadItemsListResponse) (*policy.Request, error)
}

// Err returns the last error encountered while paging.
func (p *BackupWorkloadItemsListPager) Err() error {
	return p.err
}

// NextPage returns true if the pager advanced to the next page.
// Returns false if there are no more pages or an error occurred.
func (p *BackupWorkloadItemsListPager) NextPage(ctx context.Context) bool {
	var req *policy.Request
	var err error
	if !reflect.ValueOf(p.current).IsZero() {
		if p.current.WorkloadItemResourceList.NextLink == nil || len(*p.current.WorkloadItemResourceList.NextLink) == 0 {
			return false
		}
		req, err = p.advancer(ctx, p.current)
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		p.err = err
		return false
	}
	resp, err := p.client.pl.Do(req)
	if err != nil {
		p.err = err
		return false
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {
		p.err = p.client.listHandleError(resp)
		return false
	}
	result, err := p.client.listHandleResponse(resp)
	if err != nil {
		p.err = err
		return false
	}
	p.current = result
	return true
}

// PageResponse returns the current BackupWorkloadItemsListResponse page.
func (p *BackupWorkloadItemsListPager) PageResponse() BackupWorkloadItemsListResponse {
	return p.current
}

// OperationsListPager provides operations for iterating over paged responses.
type OperationsListPager struct {
	client    *OperationsClient
	current   OperationsListResponse
	err       error
	requester func(context.Context) (*policy.Request, error)
	advancer  func(context.Context, OperationsListResponse) (*policy.Request, error)
}

// Err returns the last error encountered while paging.
func (p *OperationsListPager) Err() error {
	return p.err
}

// NextPage returns true if the pager advanced to the next page.
// Returns false if there are no more pages or an error occurred.
func (p *OperationsListPager) NextPage(ctx context.Context) bool {
	var req *policy.Request
	var err error
	if !reflect.ValueOf(p.current).IsZero() {
		if p.current.ClientDiscoveryResponse.NextLink == nil || len(*p.current.ClientDiscoveryResponse.NextLink) == 0 {
			return false
		}
		req, err = p.advancer(ctx, p.current)
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		p.err = err
		return false
	}
	resp, err := p.client.pl.Do(req)
	if err != nil {
		p.err = err
		return false
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {
		p.err = p.client.listHandleError(resp)
		return false
	}
	result, err := p.client.listHandleResponse(resp)
	if err != nil {
		p.err = err
		return false
	}
	p.current = result
	return true
}

// PageResponse returns the current OperationsListResponse page.
func (p *OperationsListPager) PageResponse() OperationsListResponse {
	return p.current
}

// ProtectableContainersListPager provides operations for iterating over paged responses.
type ProtectableContainersListPager struct {
	client    *ProtectableContainersClient
	current   ProtectableContainersListResponse
	err       error
	requester func(context.Context) (*policy.Request, error)
	advancer  func(context.Context, ProtectableContainersListResponse) (*policy.Request, error)
}

// Err returns the last error encountered while paging.
func (p *ProtectableContainersListPager) Err() error {
	return p.err
}

// NextPage returns true if the pager advanced to the next page.
// Returns false if there are no more pages or an error occurred.
func (p *ProtectableContainersListPager) NextPage(ctx context.Context) bool {
	var req *policy.Request
	var err error
	if !reflect.ValueOf(p.current).IsZero() {
		if p.current.ProtectableContainerResourceList.NextLink == nil || len(*p.current.ProtectableContainerResourceList.NextLink) == 0 {
			return false
		}
		req, err = p.advancer(ctx, p.current)
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		p.err = err
		return false
	}
	resp, err := p.client.pl.Do(req)
	if err != nil {
		p.err = err
		return false
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {
		p.err = p.client.listHandleError(resp)
		return false
	}
	result, err := p.client.listHandleResponse(resp)
	if err != nil {
		p.err = err
		return false
	}
	p.current = result
	return true
}

// PageResponse returns the current ProtectableContainersListResponse page.
func (p *ProtectableContainersListPager) PageResponse() ProtectableContainersListResponse {
	return p.current
}

// RecoveryPointsListPager provides operations for iterating over paged responses.
type RecoveryPointsListPager struct {
	client    *RecoveryPointsClient
	current   RecoveryPointsListResponse
	err       error
	requester func(context.Context) (*policy.Request, error)
	advancer  func(context.Context, RecoveryPointsListResponse) (*policy.Request, error)
}

// Err returns the last error encountered while paging.
func (p *RecoveryPointsListPager) Err() error {
	return p.err
}

// NextPage returns true if the pager advanced to the next page.
// Returns false if there are no more pages or an error occurred.
func (p *RecoveryPointsListPager) NextPage(ctx context.Context) bool {
	var req *policy.Request
	var err error
	if !reflect.ValueOf(p.current).IsZero() {
		if p.current.RecoveryPointResourceList.NextLink == nil || len(*p.current.RecoveryPointResourceList.NextLink) == 0 {
			return false
		}
		req, err = p.advancer(ctx, p.current)
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		p.err = err
		return false
	}
	resp, err := p.client.pl.Do(req)
	if err != nil {
		p.err = err
		return false
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {
		p.err = p.client.listHandleError(resp)
		return false
	}
	result, err := p.client.listHandleResponse(resp)
	if err != nil {
		p.err = err
		return false
	}
	p.current = result
	return true
}

// PageResponse returns the current RecoveryPointsListResponse page.
func (p *RecoveryPointsListPager) PageResponse() RecoveryPointsListResponse {
	return p.current
}

// RecoveryPointsRecommendedForMoveListPager provides operations for iterating over paged responses.
type RecoveryPointsRecommendedForMoveListPager struct {
	client    *RecoveryPointsRecommendedForMoveClient
	current   RecoveryPointsRecommendedForMoveListResponse
	err       error
	requester func(context.Context) (*policy.Request, error)
	advancer  func(context.Context, RecoveryPointsRecommendedForMoveListResponse) (*policy.Request, error)
}

// Err returns the last error encountered while paging.
func (p *RecoveryPointsRecommendedForMoveListPager) Err() error {
	return p.err
}

// NextPage returns true if the pager advanced to the next page.
// Returns false if there are no more pages or an error occurred.
func (p *RecoveryPointsRecommendedForMoveListPager) NextPage(ctx context.Context) bool {
	var req *policy.Request
	var err error
	if !reflect.ValueOf(p.current).IsZero() {
		if p.current.RecoveryPointResourceList.NextLink == nil || len(*p.current.RecoveryPointResourceList.NextLink) == 0 {
			return false
		}
		req, err = p.advancer(ctx, p.current)
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		p.err = err
		return false
	}
	resp, err := p.client.pl.Do(req)
	if err != nil {
		p.err = err
		return false
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {
		p.err = p.client.listHandleError(resp)
		return false
	}
	result, err := p.client.listHandleResponse(resp)
	if err != nil {
		p.err = err
		return false
	}
	p.current = result
	return true
}

// PageResponse returns the current RecoveryPointsRecommendedForMoveListResponse page.
func (p *RecoveryPointsRecommendedForMoveListPager) PageResponse() RecoveryPointsRecommendedForMoveListResponse {
	return p.current
}

// ResourceGuardProxiesGetPager provides operations for iterating over paged responses.
type ResourceGuardProxiesGetPager struct {
	client    *ResourceGuardProxiesClient
	current   ResourceGuardProxiesGetResponse
	err       error
	requester func(context.Context) (*policy.Request, error)
	advancer  func(context.Context, ResourceGuardProxiesGetResponse) (*policy.Request, error)
}

// Err returns the last error encountered while paging.
func (p *ResourceGuardProxiesGetPager) Err() error {
	return p.err
}

// NextPage returns true if the pager advanced to the next page.
// Returns false if there are no more pages or an error occurred.
func (p *ResourceGuardProxiesGetPager) NextPage(ctx context.Context) bool {
	var req *policy.Request
	var err error
	if !reflect.ValueOf(p.current).IsZero() {
		if p.current.ResourceGuardProxyBaseResourceList.NextLink == nil || len(*p.current.ResourceGuardProxyBaseResourceList.NextLink) == 0 {
			return false
		}
		req, err = p.advancer(ctx, p.current)
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		p.err = err
		return false
	}
	resp, err := p.client.pl.Do(req)
	if err != nil {
		p.err = err
		return false
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {
		p.err = p.client.getHandleError(resp)
		return false
	}
	result, err := p.client.getHandleResponse(resp)
	if err != nil {
		p.err = err
		return false
	}
	p.current = result
	return true
}

// PageResponse returns the current ResourceGuardProxiesGetResponse page.
func (p *ResourceGuardProxiesGetPager) PageResponse() ResourceGuardProxiesGetResponse {
	return p.current
}
