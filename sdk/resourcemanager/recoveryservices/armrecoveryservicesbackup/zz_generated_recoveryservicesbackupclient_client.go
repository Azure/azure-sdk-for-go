//go:build go1.16
// +build go1.16

// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

package armrecoveryservicesbackup

import (
	"context"
	"errors"
	"fmt"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/arm"
	armruntime "github.com/Azure/azure-sdk-for-go/sdk/azcore/arm/runtime"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/policy"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/runtime"
	"net/http"
	"net/url"
	"strings"
)

// RecoveryServicesBackupClient contains the methods for the RecoveryServicesBackupClient group.
// Don't use this type directly, use NewRecoveryServicesBackupClient() instead.
type RecoveryServicesBackupClient struct {
	ep             string
	pl             runtime.Pipeline
	subscriptionID string
}

// NewRecoveryServicesBackupClient creates a new instance of RecoveryServicesBackupClient with the specified values.
func NewRecoveryServicesBackupClient(subscriptionID string, credential azcore.TokenCredential, options *arm.ClientOptions) *RecoveryServicesBackupClient {
	cp := arm.ClientOptions{}
	if options != nil {
		cp = *options
	}
	if len(cp.Host) == 0 {
		cp.Host = arm.AzurePublicCloud
	}
	return &RecoveryServicesBackupClient{subscriptionID: subscriptionID, ep: string(cp.Host), pl: armruntime.NewPipeline(module, version, credential, &cp)}
}

// BeginBMSPrepareDataMove - Prepares source vault for Data Move operation
// If the operation fails it returns the *NewErrorResponse error type.
func (client *RecoveryServicesBackupClient) BeginBMSPrepareDataMove(ctx context.Context, vaultName string, resourceGroupName string, parameters PrepareDataMoveRequest, options *RecoveryServicesBackupClientBeginBMSPrepareDataMoveOptions) (RecoveryServicesBackupClientBMSPrepareDataMovePollerResponse, error) {
	resp, err := client.bMSPrepareDataMove(ctx, vaultName, resourceGroupName, parameters, options)
	if err != nil {
		return RecoveryServicesBackupClientBMSPrepareDataMovePollerResponse{}, err
	}
	result := RecoveryServicesBackupClientBMSPrepareDataMovePollerResponse{
		RawResponse: resp,
	}
	pt, err := armruntime.NewPoller("RecoveryServicesBackupClient.BMSPrepareDataMove", "", resp, client.pl, client.bmsPrepareDataMoveHandleError)
	if err != nil {
		return RecoveryServicesBackupClientBMSPrepareDataMovePollerResponse{}, err
	}
	result.Poller = &RecoveryServicesBackupClientBMSPrepareDataMovePoller{
		pt: pt,
	}
	return result, nil
}

// BMSPrepareDataMove - Prepares source vault for Data Move operation
// If the operation fails it returns the *NewErrorResponse error type.
func (client *RecoveryServicesBackupClient) bMSPrepareDataMove(ctx context.Context, vaultName string, resourceGroupName string, parameters PrepareDataMoveRequest, options *RecoveryServicesBackupClientBeginBMSPrepareDataMoveOptions) (*http.Response, error) {
	req, err := client.bmsPrepareDataMoveCreateRequest(ctx, vaultName, resourceGroupName, parameters, options)
	if err != nil {
		return nil, err
	}
	resp, err := client.pl.Do(req)
	if err != nil {
		return nil, err
	}
	if !runtime.HasStatusCode(resp, http.StatusOK, http.StatusAccepted) {
		return nil, client.bmsPrepareDataMoveHandleError(resp)
	}
	return resp, nil
}

// bmsPrepareDataMoveCreateRequest creates the BMSPrepareDataMove request.
func (client *RecoveryServicesBackupClient) bmsPrepareDataMoveCreateRequest(ctx context.Context, vaultName string, resourceGroupName string, parameters PrepareDataMoveRequest, options *RecoveryServicesBackupClientBeginBMSPrepareDataMoveOptions) (*policy.Request, error) {
	urlPath := "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.RecoveryServices/vaults/{vaultName}/backupstorageconfig/vaultstorageconfig/prepareDataMove"
	if vaultName == "" {
		return nil, errors.New("parameter vaultName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{vaultName}", url.PathEscape(vaultName))
	if resourceGroupName == "" {
		return nil, errors.New("parameter resourceGroupName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{resourceGroupName}", url.PathEscape(resourceGroupName))
	if client.subscriptionID == "" {
		return nil, errors.New("parameter client.subscriptionID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{subscriptionId}", url.PathEscape(client.subscriptionID))
	req, err := runtime.NewRequest(ctx, http.MethodPost, runtime.JoinPaths(client.ep, urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("api-version", "2021-08-01")
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header.Set("Accept", "application/json")
	return req, runtime.MarshalAsJSON(req, parameters)
}

// bmsPrepareDataMoveHandleError handles the BMSPrepareDataMove error response.
func (client *RecoveryServicesBackupClient) bmsPrepareDataMoveHandleError(resp *http.Response) error {
	body, err := runtime.Payload(resp)
	if err != nil {
		return runtime.NewResponseError(err, resp)
	}
	errType := NewErrorResponse{raw: string(body)}
	if err := runtime.UnmarshalAsJSON(resp, &errType); err != nil {
		return runtime.NewResponseError(fmt.Errorf("%s\n%s", string(body), err), resp)
	}
	return runtime.NewResponseError(&errType, resp)
}

// BeginBMSTriggerDataMove - Triggers Data Move Operation on target vault
// If the operation fails it returns the *NewErrorResponse error type.
func (client *RecoveryServicesBackupClient) BeginBMSTriggerDataMove(ctx context.Context, vaultName string, resourceGroupName string, parameters TriggerDataMoveRequest, options *RecoveryServicesBackupClientBeginBMSTriggerDataMoveOptions) (RecoveryServicesBackupClientBMSTriggerDataMovePollerResponse, error) {
	resp, err := client.bMSTriggerDataMove(ctx, vaultName, resourceGroupName, parameters, options)
	if err != nil {
		return RecoveryServicesBackupClientBMSTriggerDataMovePollerResponse{}, err
	}
	result := RecoveryServicesBackupClientBMSTriggerDataMovePollerResponse{
		RawResponse: resp,
	}
	pt, err := armruntime.NewPoller("RecoveryServicesBackupClient.BMSTriggerDataMove", "", resp, client.pl, client.bmsTriggerDataMoveHandleError)
	if err != nil {
		return RecoveryServicesBackupClientBMSTriggerDataMovePollerResponse{}, err
	}
	result.Poller = &RecoveryServicesBackupClientBMSTriggerDataMovePoller{
		pt: pt,
	}
	return result, nil
}

// BMSTriggerDataMove - Triggers Data Move Operation on target vault
// If the operation fails it returns the *NewErrorResponse error type.
func (client *RecoveryServicesBackupClient) bMSTriggerDataMove(ctx context.Context, vaultName string, resourceGroupName string, parameters TriggerDataMoveRequest, options *RecoveryServicesBackupClientBeginBMSTriggerDataMoveOptions) (*http.Response, error) {
	req, err := client.bmsTriggerDataMoveCreateRequest(ctx, vaultName, resourceGroupName, parameters, options)
	if err != nil {
		return nil, err
	}
	resp, err := client.pl.Do(req)
	if err != nil {
		return nil, err
	}
	if !runtime.HasStatusCode(resp, http.StatusOK, http.StatusAccepted) {
		return nil, client.bmsTriggerDataMoveHandleError(resp)
	}
	return resp, nil
}

// bmsTriggerDataMoveCreateRequest creates the BMSTriggerDataMove request.
func (client *RecoveryServicesBackupClient) bmsTriggerDataMoveCreateRequest(ctx context.Context, vaultName string, resourceGroupName string, parameters TriggerDataMoveRequest, options *RecoveryServicesBackupClientBeginBMSTriggerDataMoveOptions) (*policy.Request, error) {
	urlPath := "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.RecoveryServices/vaults/{vaultName}/backupstorageconfig/vaultstorageconfig/triggerDataMove"
	if vaultName == "" {
		return nil, errors.New("parameter vaultName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{vaultName}", url.PathEscape(vaultName))
	if resourceGroupName == "" {
		return nil, errors.New("parameter resourceGroupName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{resourceGroupName}", url.PathEscape(resourceGroupName))
	if client.subscriptionID == "" {
		return nil, errors.New("parameter client.subscriptionID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{subscriptionId}", url.PathEscape(client.subscriptionID))
	req, err := runtime.NewRequest(ctx, http.MethodPost, runtime.JoinPaths(client.ep, urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("api-version", "2021-08-01")
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header.Set("Accept", "application/json")
	return req, runtime.MarshalAsJSON(req, parameters)
}

// bmsTriggerDataMoveHandleError handles the BMSTriggerDataMove error response.
func (client *RecoveryServicesBackupClient) bmsTriggerDataMoveHandleError(resp *http.Response) error {
	body, err := runtime.Payload(resp)
	if err != nil {
		return runtime.NewResponseError(err, resp)
	}
	errType := NewErrorResponse{raw: string(body)}
	if err := runtime.UnmarshalAsJSON(resp, &errType); err != nil {
		return runtime.NewResponseError(fmt.Errorf("%s\n%s", string(body), err), resp)
	}
	return runtime.NewResponseError(&errType, resp)
}

// GetOperationStatus - Fetches operation status for data move operation on vault
// If the operation fails it returns the *NewErrorResponse error type.
func (client *RecoveryServicesBackupClient) GetOperationStatus(ctx context.Context, vaultName string, resourceGroupName string, operationID string, options *RecoveryServicesBackupClientGetOperationStatusOptions) (RecoveryServicesBackupClientGetOperationStatusResponse, error) {
	req, err := client.getOperationStatusCreateRequest(ctx, vaultName, resourceGroupName, operationID, options)
	if err != nil {
		return RecoveryServicesBackupClientGetOperationStatusResponse{}, err
	}
	resp, err := client.pl.Do(req)
	if err != nil {
		return RecoveryServicesBackupClientGetOperationStatusResponse{}, err
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {
		return RecoveryServicesBackupClientGetOperationStatusResponse{}, client.getOperationStatusHandleError(resp)
	}
	return client.getOperationStatusHandleResponse(resp)
}

// getOperationStatusCreateRequest creates the GetOperationStatus request.
func (client *RecoveryServicesBackupClient) getOperationStatusCreateRequest(ctx context.Context, vaultName string, resourceGroupName string, operationID string, options *RecoveryServicesBackupClientGetOperationStatusOptions) (*policy.Request, error) {
	urlPath := "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.RecoveryServices/vaults/{vaultName}/backupstorageconfig/vaultstorageconfig/operationStatus/{operationId}"
	if vaultName == "" {
		return nil, errors.New("parameter vaultName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{vaultName}", url.PathEscape(vaultName))
	if resourceGroupName == "" {
		return nil, errors.New("parameter resourceGroupName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{resourceGroupName}", url.PathEscape(resourceGroupName))
	if client.subscriptionID == "" {
		return nil, errors.New("parameter client.subscriptionID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{subscriptionId}", url.PathEscape(client.subscriptionID))
	if operationID == "" {
		return nil, errors.New("parameter operationID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{operationId}", url.PathEscape(operationID))
	req, err := runtime.NewRequest(ctx, http.MethodGet, runtime.JoinPaths(client.ep, urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("api-version", "2021-08-01")
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header.Set("Accept", "application/json")
	return req, nil
}

// getOperationStatusHandleResponse handles the GetOperationStatus response.
func (client *RecoveryServicesBackupClient) getOperationStatusHandleResponse(resp *http.Response) (RecoveryServicesBackupClientGetOperationStatusResponse, error) {
	result := RecoveryServicesBackupClientGetOperationStatusResponse{RawResponse: resp}
	if err := runtime.UnmarshalAsJSON(resp, &result.OperationStatus); err != nil {
		return RecoveryServicesBackupClientGetOperationStatusResponse{}, runtime.NewResponseError(err, resp)
	}
	return result, nil
}

// getOperationStatusHandleError handles the GetOperationStatus error response.
func (client *RecoveryServicesBackupClient) getOperationStatusHandleError(resp *http.Response) error {
	body, err := runtime.Payload(resp)
	if err != nil {
		return runtime.NewResponseError(err, resp)
	}
	errType := NewErrorResponse{raw: string(body)}
	if err := runtime.UnmarshalAsJSON(resp, &errType); err != nil {
		return runtime.NewResponseError(fmt.Errorf("%s\n%s", string(body), err), resp)
	}
	return runtime.NewResponseError(&errType, resp)
}

// BeginMoveRecoveryPoint - Move recovery point from one datastore to another store.
// If the operation fails it returns the *CloudError error type.
func (client *RecoveryServicesBackupClient) BeginMoveRecoveryPoint(ctx context.Context, vaultName string, resourceGroupName string, fabricName string, containerName string, protectedItemName string, recoveryPointID string, parameters MoveRPAcrossTiersRequest, options *RecoveryServicesBackupClientBeginMoveRecoveryPointOptions) (RecoveryServicesBackupClientMoveRecoveryPointPollerResponse, error) {
	resp, err := client.moveRecoveryPoint(ctx, vaultName, resourceGroupName, fabricName, containerName, protectedItemName, recoveryPointID, parameters, options)
	if err != nil {
		return RecoveryServicesBackupClientMoveRecoveryPointPollerResponse{}, err
	}
	result := RecoveryServicesBackupClientMoveRecoveryPointPollerResponse{
		RawResponse: resp,
	}
	pt, err := armruntime.NewPoller("RecoveryServicesBackupClient.MoveRecoveryPoint", "", resp, client.pl, client.moveRecoveryPointHandleError)
	if err != nil {
		return RecoveryServicesBackupClientMoveRecoveryPointPollerResponse{}, err
	}
	result.Poller = &RecoveryServicesBackupClientMoveRecoveryPointPoller{
		pt: pt,
	}
	return result, nil
}

// MoveRecoveryPoint - Move recovery point from one datastore to another store.
// If the operation fails it returns the *CloudError error type.
func (client *RecoveryServicesBackupClient) moveRecoveryPoint(ctx context.Context, vaultName string, resourceGroupName string, fabricName string, containerName string, protectedItemName string, recoveryPointID string, parameters MoveRPAcrossTiersRequest, options *RecoveryServicesBackupClientBeginMoveRecoveryPointOptions) (*http.Response, error) {
	req, err := client.moveRecoveryPointCreateRequest(ctx, vaultName, resourceGroupName, fabricName, containerName, protectedItemName, recoveryPointID, parameters, options)
	if err != nil {
		return nil, err
	}
	resp, err := client.pl.Do(req)
	if err != nil {
		return nil, err
	}
	if !runtime.HasStatusCode(resp, http.StatusAccepted) {
		return nil, client.moveRecoveryPointHandleError(resp)
	}
	return resp, nil
}

// moveRecoveryPointCreateRequest creates the MoveRecoveryPoint request.
func (client *RecoveryServicesBackupClient) moveRecoveryPointCreateRequest(ctx context.Context, vaultName string, resourceGroupName string, fabricName string, containerName string, protectedItemName string, recoveryPointID string, parameters MoveRPAcrossTiersRequest, options *RecoveryServicesBackupClientBeginMoveRecoveryPointOptions) (*policy.Request, error) {
	urlPath := "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.RecoveryServices/vaults/{vaultName}/backupFabrics/{fabricName}/protectionContainers/{containerName}/protectedItems/{protectedItemName}/recoveryPoints/{recoveryPointId}/move"
	if vaultName == "" {
		return nil, errors.New("parameter vaultName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{vaultName}", url.PathEscape(vaultName))
	if resourceGroupName == "" {
		return nil, errors.New("parameter resourceGroupName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{resourceGroupName}", url.PathEscape(resourceGroupName))
	if client.subscriptionID == "" {
		return nil, errors.New("parameter client.subscriptionID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{subscriptionId}", url.PathEscape(client.subscriptionID))
	if fabricName == "" {
		return nil, errors.New("parameter fabricName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{fabricName}", url.PathEscape(fabricName))
	if containerName == "" {
		return nil, errors.New("parameter containerName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{containerName}", url.PathEscape(containerName))
	if protectedItemName == "" {
		return nil, errors.New("parameter protectedItemName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{protectedItemName}", url.PathEscape(protectedItemName))
	if recoveryPointID == "" {
		return nil, errors.New("parameter recoveryPointID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{recoveryPointId}", url.PathEscape(recoveryPointID))
	req, err := runtime.NewRequest(ctx, http.MethodPost, runtime.JoinPaths(client.ep, urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("api-version", "2021-08-01")
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header.Set("Accept", "application/json")
	return req, runtime.MarshalAsJSON(req, parameters)
}

// moveRecoveryPointHandleError handles the MoveRecoveryPoint error response.
func (client *RecoveryServicesBackupClient) moveRecoveryPointHandleError(resp *http.Response) error {
	body, err := runtime.Payload(resp)
	if err != nil {
		return runtime.NewResponseError(err, resp)
	}
	errType := CloudError{raw: string(body)}
	if err := runtime.UnmarshalAsJSON(resp, &errType); err != nil {
		return runtime.NewResponseError(fmt.Errorf("%s\n%s", string(body), err), resp)
	}
	return runtime.NewResponseError(&errType, resp)
}
