//go:build go1.16
// +build go1.16

// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

package armrecoveryservicessiterecovery

import (
	"context"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/policy"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/runtime"
	"net/http"
	"reflect"
)

// MigrationRecoveryPointsClientListByReplicationMigrationItemsPager provides operations for iterating over paged responses.
type MigrationRecoveryPointsClientListByReplicationMigrationItemsPager struct {
	client    *MigrationRecoveryPointsClient
	current   MigrationRecoveryPointsClientListByReplicationMigrationItemsResponse
	err       error
	requester func(context.Context) (*policy.Request, error)
	advancer  func(context.Context, MigrationRecoveryPointsClientListByReplicationMigrationItemsResponse) (*policy.Request, error)
}

// Err returns the last error encountered while paging.
func (p *MigrationRecoveryPointsClientListByReplicationMigrationItemsPager) Err() error {
	return p.err
}

// NextPage returns true if the pager advanced to the next page.
// Returns false if there are no more pages or an error occurred.
func (p *MigrationRecoveryPointsClientListByReplicationMigrationItemsPager) NextPage(ctx context.Context) bool {
	var req *policy.Request
	var err error
	if !reflect.ValueOf(p.current).IsZero() {
		if p.current.MigrationRecoveryPointCollection.NextLink == nil || len(*p.current.MigrationRecoveryPointCollection.NextLink) == 0 {
			return false
		}
		req, err = p.advancer(ctx, p.current)
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		p.err = err
		return false
	}
	resp, err := p.client.pl.Do(req)
	if err != nil {
		p.err = err
		return false
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {
		p.err = runtime.NewResponseError(resp)
		return false
	}
	result, err := p.client.listByReplicationMigrationItemsHandleResponse(resp)
	if err != nil {
		p.err = err
		return false
	}
	p.current = result
	return true
}

// PageResponse returns the current MigrationRecoveryPointsClientListByReplicationMigrationItemsResponse page.
func (p *MigrationRecoveryPointsClientListByReplicationMigrationItemsPager) PageResponse() MigrationRecoveryPointsClientListByReplicationMigrationItemsResponse {
	return p.current
}

// OperationsClientListPager provides operations for iterating over paged responses.
type OperationsClientListPager struct {
	client    *OperationsClient
	current   OperationsClientListResponse
	err       error
	requester func(context.Context) (*policy.Request, error)
	advancer  func(context.Context, OperationsClientListResponse) (*policy.Request, error)
}

// Err returns the last error encountered while paging.
func (p *OperationsClientListPager) Err() error {
	return p.err
}

// NextPage returns true if the pager advanced to the next page.
// Returns false if there are no more pages or an error occurred.
func (p *OperationsClientListPager) NextPage(ctx context.Context) bool {
	var req *policy.Request
	var err error
	if !reflect.ValueOf(p.current).IsZero() {
		if p.current.OperationsDiscoveryCollection.NextLink == nil || len(*p.current.OperationsDiscoveryCollection.NextLink) == 0 {
			return false
		}
		req, err = p.advancer(ctx, p.current)
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		p.err = err
		return false
	}
	resp, err := p.client.pl.Do(req)
	if err != nil {
		p.err = err
		return false
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {
		p.err = runtime.NewResponseError(resp)
		return false
	}
	result, err := p.client.listHandleResponse(resp)
	if err != nil {
		p.err = err
		return false
	}
	p.current = result
	return true
}

// PageResponse returns the current OperationsClientListResponse page.
func (p *OperationsClientListPager) PageResponse() OperationsClientListResponse {
	return p.current
}

// RecoveryPointsClientListByReplicationProtectedItemsPager provides operations for iterating over paged responses.
type RecoveryPointsClientListByReplicationProtectedItemsPager struct {
	client    *RecoveryPointsClient
	current   RecoveryPointsClientListByReplicationProtectedItemsResponse
	err       error
	requester func(context.Context) (*policy.Request, error)
	advancer  func(context.Context, RecoveryPointsClientListByReplicationProtectedItemsResponse) (*policy.Request, error)
}

// Err returns the last error encountered while paging.
func (p *RecoveryPointsClientListByReplicationProtectedItemsPager) Err() error {
	return p.err
}

// NextPage returns true if the pager advanced to the next page.
// Returns false if there are no more pages or an error occurred.
func (p *RecoveryPointsClientListByReplicationProtectedItemsPager) NextPage(ctx context.Context) bool {
	var req *policy.Request
	var err error
	if !reflect.ValueOf(p.current).IsZero() {
		if p.current.RecoveryPointCollection.NextLink == nil || len(*p.current.RecoveryPointCollection.NextLink) == 0 {
			return false
		}
		req, err = p.advancer(ctx, p.current)
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		p.err = err
		return false
	}
	resp, err := p.client.pl.Do(req)
	if err != nil {
		p.err = err
		return false
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {
		p.err = runtime.NewResponseError(resp)
		return false
	}
	result, err := p.client.listByReplicationProtectedItemsHandleResponse(resp)
	if err != nil {
		p.err = err
		return false
	}
	p.current = result
	return true
}

// PageResponse returns the current RecoveryPointsClientListByReplicationProtectedItemsResponse page.
func (p *RecoveryPointsClientListByReplicationProtectedItemsPager) PageResponse() RecoveryPointsClientListByReplicationProtectedItemsResponse {
	return p.current
}

// ReplicationAlertSettingsClientListPager provides operations for iterating over paged responses.
type ReplicationAlertSettingsClientListPager struct {
	client    *ReplicationAlertSettingsClient
	current   ReplicationAlertSettingsClientListResponse
	err       error
	requester func(context.Context) (*policy.Request, error)
	advancer  func(context.Context, ReplicationAlertSettingsClientListResponse) (*policy.Request, error)
}

// Err returns the last error encountered while paging.
func (p *ReplicationAlertSettingsClientListPager) Err() error {
	return p.err
}

// NextPage returns true if the pager advanced to the next page.
// Returns false if there are no more pages or an error occurred.
func (p *ReplicationAlertSettingsClientListPager) NextPage(ctx context.Context) bool {
	var req *policy.Request
	var err error
	if !reflect.ValueOf(p.current).IsZero() {
		if p.current.AlertCollection.NextLink == nil || len(*p.current.AlertCollection.NextLink) == 0 {
			return false
		}
		req, err = p.advancer(ctx, p.current)
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		p.err = err
		return false
	}
	resp, err := p.client.pl.Do(req)
	if err != nil {
		p.err = err
		return false
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {
		p.err = runtime.NewResponseError(resp)
		return false
	}
	result, err := p.client.listHandleResponse(resp)
	if err != nil {
		p.err = err
		return false
	}
	p.current = result
	return true
}

// PageResponse returns the current ReplicationAlertSettingsClientListResponse page.
func (p *ReplicationAlertSettingsClientListPager) PageResponse() ReplicationAlertSettingsClientListResponse {
	return p.current
}

// ReplicationAppliancesClientListPager provides operations for iterating over paged responses.
type ReplicationAppliancesClientListPager struct {
	client    *ReplicationAppliancesClient
	current   ReplicationAppliancesClientListResponse
	err       error
	requester func(context.Context) (*policy.Request, error)
	advancer  func(context.Context, ReplicationAppliancesClientListResponse) (*policy.Request, error)
}

// Err returns the last error encountered while paging.
func (p *ReplicationAppliancesClientListPager) Err() error {
	return p.err
}

// NextPage returns true if the pager advanced to the next page.
// Returns false if there are no more pages or an error occurred.
func (p *ReplicationAppliancesClientListPager) NextPage(ctx context.Context) bool {
	var req *policy.Request
	var err error
	if !reflect.ValueOf(p.current).IsZero() {
		if p.current.ApplianceCollection.NextLink == nil || len(*p.current.ApplianceCollection.NextLink) == 0 {
			return false
		}
		req, err = p.advancer(ctx, p.current)
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		p.err = err
		return false
	}
	resp, err := p.client.pl.Do(req)
	if err != nil {
		p.err = err
		return false
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {
		p.err = runtime.NewResponseError(resp)
		return false
	}
	result, err := p.client.listHandleResponse(resp)
	if err != nil {
		p.err = err
		return false
	}
	p.current = result
	return true
}

// PageResponse returns the current ReplicationAppliancesClientListResponse page.
func (p *ReplicationAppliancesClientListPager) PageResponse() ReplicationAppliancesClientListResponse {
	return p.current
}

// ReplicationEventsClientListPager provides operations for iterating over paged responses.
type ReplicationEventsClientListPager struct {
	client    *ReplicationEventsClient
	current   ReplicationEventsClientListResponse
	err       error
	requester func(context.Context) (*policy.Request, error)
	advancer  func(context.Context, ReplicationEventsClientListResponse) (*policy.Request, error)
}

// Err returns the last error encountered while paging.
func (p *ReplicationEventsClientListPager) Err() error {
	return p.err
}

// NextPage returns true if the pager advanced to the next page.
// Returns false if there are no more pages or an error occurred.
func (p *ReplicationEventsClientListPager) NextPage(ctx context.Context) bool {
	var req *policy.Request
	var err error
	if !reflect.ValueOf(p.current).IsZero() {
		if p.current.EventCollection.NextLink == nil || len(*p.current.EventCollection.NextLink) == 0 {
			return false
		}
		req, err = p.advancer(ctx, p.current)
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		p.err = err
		return false
	}
	resp, err := p.client.pl.Do(req)
	if err != nil {
		p.err = err
		return false
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {
		p.err = runtime.NewResponseError(resp)
		return false
	}
	result, err := p.client.listHandleResponse(resp)
	if err != nil {
		p.err = err
		return false
	}
	p.current = result
	return true
}

// PageResponse returns the current ReplicationEventsClientListResponse page.
func (p *ReplicationEventsClientListPager) PageResponse() ReplicationEventsClientListResponse {
	return p.current
}

// ReplicationFabricsClientListPager provides operations for iterating over paged responses.
type ReplicationFabricsClientListPager struct {
	client    *ReplicationFabricsClient
	current   ReplicationFabricsClientListResponse
	err       error
	requester func(context.Context) (*policy.Request, error)
	advancer  func(context.Context, ReplicationFabricsClientListResponse) (*policy.Request, error)
}

// Err returns the last error encountered while paging.
func (p *ReplicationFabricsClientListPager) Err() error {
	return p.err
}

// NextPage returns true if the pager advanced to the next page.
// Returns false if there are no more pages or an error occurred.
func (p *ReplicationFabricsClientListPager) NextPage(ctx context.Context) bool {
	var req *policy.Request
	var err error
	if !reflect.ValueOf(p.current).IsZero() {
		if p.current.FabricCollection.NextLink == nil || len(*p.current.FabricCollection.NextLink) == 0 {
			return false
		}
		req, err = p.advancer(ctx, p.current)
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		p.err = err
		return false
	}
	resp, err := p.client.pl.Do(req)
	if err != nil {
		p.err = err
		return false
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {
		p.err = runtime.NewResponseError(resp)
		return false
	}
	result, err := p.client.listHandleResponse(resp)
	if err != nil {
		p.err = err
		return false
	}
	p.current = result
	return true
}

// PageResponse returns the current ReplicationFabricsClientListResponse page.
func (p *ReplicationFabricsClientListPager) PageResponse() ReplicationFabricsClientListResponse {
	return p.current
}

// ReplicationJobsClientListPager provides operations for iterating over paged responses.
type ReplicationJobsClientListPager struct {
	client    *ReplicationJobsClient
	current   ReplicationJobsClientListResponse
	err       error
	requester func(context.Context) (*policy.Request, error)
	advancer  func(context.Context, ReplicationJobsClientListResponse) (*policy.Request, error)
}

// Err returns the last error encountered while paging.
func (p *ReplicationJobsClientListPager) Err() error {
	return p.err
}

// NextPage returns true if the pager advanced to the next page.
// Returns false if there are no more pages or an error occurred.
func (p *ReplicationJobsClientListPager) NextPage(ctx context.Context) bool {
	var req *policy.Request
	var err error
	if !reflect.ValueOf(p.current).IsZero() {
		if p.current.JobCollection.NextLink == nil || len(*p.current.JobCollection.NextLink) == 0 {
			return false
		}
		req, err = p.advancer(ctx, p.current)
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		p.err = err
		return false
	}
	resp, err := p.client.pl.Do(req)
	if err != nil {
		p.err = err
		return false
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {
		p.err = runtime.NewResponseError(resp)
		return false
	}
	result, err := p.client.listHandleResponse(resp)
	if err != nil {
		p.err = err
		return false
	}
	p.current = result
	return true
}

// PageResponse returns the current ReplicationJobsClientListResponse page.
func (p *ReplicationJobsClientListPager) PageResponse() ReplicationJobsClientListResponse {
	return p.current
}

// ReplicationLogicalNetworksClientListByReplicationFabricsPager provides operations for iterating over paged responses.
type ReplicationLogicalNetworksClientListByReplicationFabricsPager struct {
	client    *ReplicationLogicalNetworksClient
	current   ReplicationLogicalNetworksClientListByReplicationFabricsResponse
	err       error
	requester func(context.Context) (*policy.Request, error)
	advancer  func(context.Context, ReplicationLogicalNetworksClientListByReplicationFabricsResponse) (*policy.Request, error)
}

// Err returns the last error encountered while paging.
func (p *ReplicationLogicalNetworksClientListByReplicationFabricsPager) Err() error {
	return p.err
}

// NextPage returns true if the pager advanced to the next page.
// Returns false if there are no more pages or an error occurred.
func (p *ReplicationLogicalNetworksClientListByReplicationFabricsPager) NextPage(ctx context.Context) bool {
	var req *policy.Request
	var err error
	if !reflect.ValueOf(p.current).IsZero() {
		if p.current.LogicalNetworkCollection.NextLink == nil || len(*p.current.LogicalNetworkCollection.NextLink) == 0 {
			return false
		}
		req, err = p.advancer(ctx, p.current)
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		p.err = err
		return false
	}
	resp, err := p.client.pl.Do(req)
	if err != nil {
		p.err = err
		return false
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {
		p.err = runtime.NewResponseError(resp)
		return false
	}
	result, err := p.client.listByReplicationFabricsHandleResponse(resp)
	if err != nil {
		p.err = err
		return false
	}
	p.current = result
	return true
}

// PageResponse returns the current ReplicationLogicalNetworksClientListByReplicationFabricsResponse page.
func (p *ReplicationLogicalNetworksClientListByReplicationFabricsPager) PageResponse() ReplicationLogicalNetworksClientListByReplicationFabricsResponse {
	return p.current
}

// ReplicationMigrationItemsClientListByReplicationProtectionContainersPager provides operations for iterating over paged responses.
type ReplicationMigrationItemsClientListByReplicationProtectionContainersPager struct {
	client    *ReplicationMigrationItemsClient
	current   ReplicationMigrationItemsClientListByReplicationProtectionContainersResponse
	err       error
	requester func(context.Context) (*policy.Request, error)
	advancer  func(context.Context, ReplicationMigrationItemsClientListByReplicationProtectionContainersResponse) (*policy.Request, error)
}

// Err returns the last error encountered while paging.
func (p *ReplicationMigrationItemsClientListByReplicationProtectionContainersPager) Err() error {
	return p.err
}

// NextPage returns true if the pager advanced to the next page.
// Returns false if there are no more pages or an error occurred.
func (p *ReplicationMigrationItemsClientListByReplicationProtectionContainersPager) NextPage(ctx context.Context) bool {
	var req *policy.Request
	var err error
	if !reflect.ValueOf(p.current).IsZero() {
		if p.current.MigrationItemCollection.NextLink == nil || len(*p.current.MigrationItemCollection.NextLink) == 0 {
			return false
		}
		req, err = p.advancer(ctx, p.current)
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		p.err = err
		return false
	}
	resp, err := p.client.pl.Do(req)
	if err != nil {
		p.err = err
		return false
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {
		p.err = runtime.NewResponseError(resp)
		return false
	}
	result, err := p.client.listByReplicationProtectionContainersHandleResponse(resp)
	if err != nil {
		p.err = err
		return false
	}
	p.current = result
	return true
}

// PageResponse returns the current ReplicationMigrationItemsClientListByReplicationProtectionContainersResponse page.
func (p *ReplicationMigrationItemsClientListByReplicationProtectionContainersPager) PageResponse() ReplicationMigrationItemsClientListByReplicationProtectionContainersResponse {
	return p.current
}

// ReplicationMigrationItemsClientListPager provides operations for iterating over paged responses.
type ReplicationMigrationItemsClientListPager struct {
	client    *ReplicationMigrationItemsClient
	current   ReplicationMigrationItemsClientListResponse
	err       error
	requester func(context.Context) (*policy.Request, error)
	advancer  func(context.Context, ReplicationMigrationItemsClientListResponse) (*policy.Request, error)
}

// Err returns the last error encountered while paging.
func (p *ReplicationMigrationItemsClientListPager) Err() error {
	return p.err
}

// NextPage returns true if the pager advanced to the next page.
// Returns false if there are no more pages or an error occurred.
func (p *ReplicationMigrationItemsClientListPager) NextPage(ctx context.Context) bool {
	var req *policy.Request
	var err error
	if !reflect.ValueOf(p.current).IsZero() {
		if p.current.MigrationItemCollection.NextLink == nil || len(*p.current.MigrationItemCollection.NextLink) == 0 {
			return false
		}
		req, err = p.advancer(ctx, p.current)
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		p.err = err
		return false
	}
	resp, err := p.client.pl.Do(req)
	if err != nil {
		p.err = err
		return false
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {
		p.err = runtime.NewResponseError(resp)
		return false
	}
	result, err := p.client.listHandleResponse(resp)
	if err != nil {
		p.err = err
		return false
	}
	p.current = result
	return true
}

// PageResponse returns the current ReplicationMigrationItemsClientListResponse page.
func (p *ReplicationMigrationItemsClientListPager) PageResponse() ReplicationMigrationItemsClientListResponse {
	return p.current
}

// ReplicationNetworkMappingsClientListByReplicationNetworksPager provides operations for iterating over paged responses.
type ReplicationNetworkMappingsClientListByReplicationNetworksPager struct {
	client    *ReplicationNetworkMappingsClient
	current   ReplicationNetworkMappingsClientListByReplicationNetworksResponse
	err       error
	requester func(context.Context) (*policy.Request, error)
	advancer  func(context.Context, ReplicationNetworkMappingsClientListByReplicationNetworksResponse) (*policy.Request, error)
}

// Err returns the last error encountered while paging.
func (p *ReplicationNetworkMappingsClientListByReplicationNetworksPager) Err() error {
	return p.err
}

// NextPage returns true if the pager advanced to the next page.
// Returns false if there are no more pages or an error occurred.
func (p *ReplicationNetworkMappingsClientListByReplicationNetworksPager) NextPage(ctx context.Context) bool {
	var req *policy.Request
	var err error
	if !reflect.ValueOf(p.current).IsZero() {
		if p.current.NetworkMappingCollection.NextLink == nil || len(*p.current.NetworkMappingCollection.NextLink) == 0 {
			return false
		}
		req, err = p.advancer(ctx, p.current)
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		p.err = err
		return false
	}
	resp, err := p.client.pl.Do(req)
	if err != nil {
		p.err = err
		return false
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {
		p.err = runtime.NewResponseError(resp)
		return false
	}
	result, err := p.client.listByReplicationNetworksHandleResponse(resp)
	if err != nil {
		p.err = err
		return false
	}
	p.current = result
	return true
}

// PageResponse returns the current ReplicationNetworkMappingsClientListByReplicationNetworksResponse page.
func (p *ReplicationNetworkMappingsClientListByReplicationNetworksPager) PageResponse() ReplicationNetworkMappingsClientListByReplicationNetworksResponse {
	return p.current
}

// ReplicationNetworkMappingsClientListPager provides operations for iterating over paged responses.
type ReplicationNetworkMappingsClientListPager struct {
	client    *ReplicationNetworkMappingsClient
	current   ReplicationNetworkMappingsClientListResponse
	err       error
	requester func(context.Context) (*policy.Request, error)
	advancer  func(context.Context, ReplicationNetworkMappingsClientListResponse) (*policy.Request, error)
}

// Err returns the last error encountered while paging.
func (p *ReplicationNetworkMappingsClientListPager) Err() error {
	return p.err
}

// NextPage returns true if the pager advanced to the next page.
// Returns false if there are no more pages or an error occurred.
func (p *ReplicationNetworkMappingsClientListPager) NextPage(ctx context.Context) bool {
	var req *policy.Request
	var err error
	if !reflect.ValueOf(p.current).IsZero() {
		if p.current.NetworkMappingCollection.NextLink == nil || len(*p.current.NetworkMappingCollection.NextLink) == 0 {
			return false
		}
		req, err = p.advancer(ctx, p.current)
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		p.err = err
		return false
	}
	resp, err := p.client.pl.Do(req)
	if err != nil {
		p.err = err
		return false
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {
		p.err = runtime.NewResponseError(resp)
		return false
	}
	result, err := p.client.listHandleResponse(resp)
	if err != nil {
		p.err = err
		return false
	}
	p.current = result
	return true
}

// PageResponse returns the current ReplicationNetworkMappingsClientListResponse page.
func (p *ReplicationNetworkMappingsClientListPager) PageResponse() ReplicationNetworkMappingsClientListResponse {
	return p.current
}

// ReplicationNetworksClientListByReplicationFabricsPager provides operations for iterating over paged responses.
type ReplicationNetworksClientListByReplicationFabricsPager struct {
	client    *ReplicationNetworksClient
	current   ReplicationNetworksClientListByReplicationFabricsResponse
	err       error
	requester func(context.Context) (*policy.Request, error)
	advancer  func(context.Context, ReplicationNetworksClientListByReplicationFabricsResponse) (*policy.Request, error)
}

// Err returns the last error encountered while paging.
func (p *ReplicationNetworksClientListByReplicationFabricsPager) Err() error {
	return p.err
}

// NextPage returns true if the pager advanced to the next page.
// Returns false if there are no more pages or an error occurred.
func (p *ReplicationNetworksClientListByReplicationFabricsPager) NextPage(ctx context.Context) bool {
	var req *policy.Request
	var err error
	if !reflect.ValueOf(p.current).IsZero() {
		if p.current.NetworkCollection.NextLink == nil || len(*p.current.NetworkCollection.NextLink) == 0 {
			return false
		}
		req, err = p.advancer(ctx, p.current)
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		p.err = err
		return false
	}
	resp, err := p.client.pl.Do(req)
	if err != nil {
		p.err = err
		return false
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {
		p.err = runtime.NewResponseError(resp)
		return false
	}
	result, err := p.client.listByReplicationFabricsHandleResponse(resp)
	if err != nil {
		p.err = err
		return false
	}
	p.current = result
	return true
}

// PageResponse returns the current ReplicationNetworksClientListByReplicationFabricsResponse page.
func (p *ReplicationNetworksClientListByReplicationFabricsPager) PageResponse() ReplicationNetworksClientListByReplicationFabricsResponse {
	return p.current
}

// ReplicationNetworksClientListPager provides operations for iterating over paged responses.
type ReplicationNetworksClientListPager struct {
	client    *ReplicationNetworksClient
	current   ReplicationNetworksClientListResponse
	err       error
	requester func(context.Context) (*policy.Request, error)
	advancer  func(context.Context, ReplicationNetworksClientListResponse) (*policy.Request, error)
}

// Err returns the last error encountered while paging.
func (p *ReplicationNetworksClientListPager) Err() error {
	return p.err
}

// NextPage returns true if the pager advanced to the next page.
// Returns false if there are no more pages or an error occurred.
func (p *ReplicationNetworksClientListPager) NextPage(ctx context.Context) bool {
	var req *policy.Request
	var err error
	if !reflect.ValueOf(p.current).IsZero() {
		if p.current.NetworkCollection.NextLink == nil || len(*p.current.NetworkCollection.NextLink) == 0 {
			return false
		}
		req, err = p.advancer(ctx, p.current)
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		p.err = err
		return false
	}
	resp, err := p.client.pl.Do(req)
	if err != nil {
		p.err = err
		return false
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {
		p.err = runtime.NewResponseError(resp)
		return false
	}
	result, err := p.client.listHandleResponse(resp)
	if err != nil {
		p.err = err
		return false
	}
	p.current = result
	return true
}

// PageResponse returns the current ReplicationNetworksClientListResponse page.
func (p *ReplicationNetworksClientListPager) PageResponse() ReplicationNetworksClientListResponse {
	return p.current
}

// ReplicationPoliciesClientListPager provides operations for iterating over paged responses.
type ReplicationPoliciesClientListPager struct {
	client    *ReplicationPoliciesClient
	current   ReplicationPoliciesClientListResponse
	err       error
	requester func(context.Context) (*policy.Request, error)
	advancer  func(context.Context, ReplicationPoliciesClientListResponse) (*policy.Request, error)
}

// Err returns the last error encountered while paging.
func (p *ReplicationPoliciesClientListPager) Err() error {
	return p.err
}

// NextPage returns true if the pager advanced to the next page.
// Returns false if there are no more pages or an error occurred.
func (p *ReplicationPoliciesClientListPager) NextPage(ctx context.Context) bool {
	var req *policy.Request
	var err error
	if !reflect.ValueOf(p.current).IsZero() {
		if p.current.PolicyCollection.NextLink == nil || len(*p.current.PolicyCollection.NextLink) == 0 {
			return false
		}
		req, err = p.advancer(ctx, p.current)
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		p.err = err
		return false
	}
	resp, err := p.client.pl.Do(req)
	if err != nil {
		p.err = err
		return false
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {
		p.err = runtime.NewResponseError(resp)
		return false
	}
	result, err := p.client.listHandleResponse(resp)
	if err != nil {
		p.err = err
		return false
	}
	p.current = result
	return true
}

// PageResponse returns the current ReplicationPoliciesClientListResponse page.
func (p *ReplicationPoliciesClientListPager) PageResponse() ReplicationPoliciesClientListResponse {
	return p.current
}

// ReplicationProtectableItemsClientListByReplicationProtectionContainersPager provides operations for iterating over paged responses.
type ReplicationProtectableItemsClientListByReplicationProtectionContainersPager struct {
	client    *ReplicationProtectableItemsClient
	current   ReplicationProtectableItemsClientListByReplicationProtectionContainersResponse
	err       error
	requester func(context.Context) (*policy.Request, error)
	advancer  func(context.Context, ReplicationProtectableItemsClientListByReplicationProtectionContainersResponse) (*policy.Request, error)
}

// Err returns the last error encountered while paging.
func (p *ReplicationProtectableItemsClientListByReplicationProtectionContainersPager) Err() error {
	return p.err
}

// NextPage returns true if the pager advanced to the next page.
// Returns false if there are no more pages or an error occurred.
func (p *ReplicationProtectableItemsClientListByReplicationProtectionContainersPager) NextPage(ctx context.Context) bool {
	var req *policy.Request
	var err error
	if !reflect.ValueOf(p.current).IsZero() {
		if p.current.ProtectableItemCollection.NextLink == nil || len(*p.current.ProtectableItemCollection.NextLink) == 0 {
			return false
		}
		req, err = p.advancer(ctx, p.current)
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		p.err = err
		return false
	}
	resp, err := p.client.pl.Do(req)
	if err != nil {
		p.err = err
		return false
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {
		p.err = runtime.NewResponseError(resp)
		return false
	}
	result, err := p.client.listByReplicationProtectionContainersHandleResponse(resp)
	if err != nil {
		p.err = err
		return false
	}
	p.current = result
	return true
}

// PageResponse returns the current ReplicationProtectableItemsClientListByReplicationProtectionContainersResponse page.
func (p *ReplicationProtectableItemsClientListByReplicationProtectionContainersPager) PageResponse() ReplicationProtectableItemsClientListByReplicationProtectionContainersResponse {
	return p.current
}

// ReplicationProtectedItemsClientListByReplicationProtectionContainersPager provides operations for iterating over paged responses.
type ReplicationProtectedItemsClientListByReplicationProtectionContainersPager struct {
	client    *ReplicationProtectedItemsClient
	current   ReplicationProtectedItemsClientListByReplicationProtectionContainersResponse
	err       error
	requester func(context.Context) (*policy.Request, error)
	advancer  func(context.Context, ReplicationProtectedItemsClientListByReplicationProtectionContainersResponse) (*policy.Request, error)
}

// Err returns the last error encountered while paging.
func (p *ReplicationProtectedItemsClientListByReplicationProtectionContainersPager) Err() error {
	return p.err
}

// NextPage returns true if the pager advanced to the next page.
// Returns false if there are no more pages or an error occurred.
func (p *ReplicationProtectedItemsClientListByReplicationProtectionContainersPager) NextPage(ctx context.Context) bool {
	var req *policy.Request
	var err error
	if !reflect.ValueOf(p.current).IsZero() {
		if p.current.ReplicationProtectedItemCollection.NextLink == nil || len(*p.current.ReplicationProtectedItemCollection.NextLink) == 0 {
			return false
		}
		req, err = p.advancer(ctx, p.current)
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		p.err = err
		return false
	}
	resp, err := p.client.pl.Do(req)
	if err != nil {
		p.err = err
		return false
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {
		p.err = runtime.NewResponseError(resp)
		return false
	}
	result, err := p.client.listByReplicationProtectionContainersHandleResponse(resp)
	if err != nil {
		p.err = err
		return false
	}
	p.current = result
	return true
}

// PageResponse returns the current ReplicationProtectedItemsClientListByReplicationProtectionContainersResponse page.
func (p *ReplicationProtectedItemsClientListByReplicationProtectionContainersPager) PageResponse() ReplicationProtectedItemsClientListByReplicationProtectionContainersResponse {
	return p.current
}

// ReplicationProtectedItemsClientListPager provides operations for iterating over paged responses.
type ReplicationProtectedItemsClientListPager struct {
	client    *ReplicationProtectedItemsClient
	current   ReplicationProtectedItemsClientListResponse
	err       error
	requester func(context.Context) (*policy.Request, error)
	advancer  func(context.Context, ReplicationProtectedItemsClientListResponse) (*policy.Request, error)
}

// Err returns the last error encountered while paging.
func (p *ReplicationProtectedItemsClientListPager) Err() error {
	return p.err
}

// NextPage returns true if the pager advanced to the next page.
// Returns false if there are no more pages or an error occurred.
func (p *ReplicationProtectedItemsClientListPager) NextPage(ctx context.Context) bool {
	var req *policy.Request
	var err error
	if !reflect.ValueOf(p.current).IsZero() {
		if p.current.ReplicationProtectedItemCollection.NextLink == nil || len(*p.current.ReplicationProtectedItemCollection.NextLink) == 0 {
			return false
		}
		req, err = p.advancer(ctx, p.current)
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		p.err = err
		return false
	}
	resp, err := p.client.pl.Do(req)
	if err != nil {
		p.err = err
		return false
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {
		p.err = runtime.NewResponseError(resp)
		return false
	}
	result, err := p.client.listHandleResponse(resp)
	if err != nil {
		p.err = err
		return false
	}
	p.current = result
	return true
}

// PageResponse returns the current ReplicationProtectedItemsClientListResponse page.
func (p *ReplicationProtectedItemsClientListPager) PageResponse() ReplicationProtectedItemsClientListResponse {
	return p.current
}

// ReplicationProtectionContainerMappingsClientListByReplicationProtectionContainersPager provides operations for iterating over paged responses.
type ReplicationProtectionContainerMappingsClientListByReplicationProtectionContainersPager struct {
	client    *ReplicationProtectionContainerMappingsClient
	current   ReplicationProtectionContainerMappingsClientListByReplicationProtectionContainersResponse
	err       error
	requester func(context.Context) (*policy.Request, error)
	advancer  func(context.Context, ReplicationProtectionContainerMappingsClientListByReplicationProtectionContainersResponse) (*policy.Request, error)
}

// Err returns the last error encountered while paging.
func (p *ReplicationProtectionContainerMappingsClientListByReplicationProtectionContainersPager) Err() error {
	return p.err
}

// NextPage returns true if the pager advanced to the next page.
// Returns false if there are no more pages or an error occurred.
func (p *ReplicationProtectionContainerMappingsClientListByReplicationProtectionContainersPager) NextPage(ctx context.Context) bool {
	var req *policy.Request
	var err error
	if !reflect.ValueOf(p.current).IsZero() {
		if p.current.ProtectionContainerMappingCollection.NextLink == nil || len(*p.current.ProtectionContainerMappingCollection.NextLink) == 0 {
			return false
		}
		req, err = p.advancer(ctx, p.current)
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		p.err = err
		return false
	}
	resp, err := p.client.pl.Do(req)
	if err != nil {
		p.err = err
		return false
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {
		p.err = runtime.NewResponseError(resp)
		return false
	}
	result, err := p.client.listByReplicationProtectionContainersHandleResponse(resp)
	if err != nil {
		p.err = err
		return false
	}
	p.current = result
	return true
}

// PageResponse returns the current ReplicationProtectionContainerMappingsClientListByReplicationProtectionContainersResponse page.
func (p *ReplicationProtectionContainerMappingsClientListByReplicationProtectionContainersPager) PageResponse() ReplicationProtectionContainerMappingsClientListByReplicationProtectionContainersResponse {
	return p.current
}

// ReplicationProtectionContainerMappingsClientListPager provides operations for iterating over paged responses.
type ReplicationProtectionContainerMappingsClientListPager struct {
	client    *ReplicationProtectionContainerMappingsClient
	current   ReplicationProtectionContainerMappingsClientListResponse
	err       error
	requester func(context.Context) (*policy.Request, error)
	advancer  func(context.Context, ReplicationProtectionContainerMappingsClientListResponse) (*policy.Request, error)
}

// Err returns the last error encountered while paging.
func (p *ReplicationProtectionContainerMappingsClientListPager) Err() error {
	return p.err
}

// NextPage returns true if the pager advanced to the next page.
// Returns false if there are no more pages or an error occurred.
func (p *ReplicationProtectionContainerMappingsClientListPager) NextPage(ctx context.Context) bool {
	var req *policy.Request
	var err error
	if !reflect.ValueOf(p.current).IsZero() {
		if p.current.ProtectionContainerMappingCollection.NextLink == nil || len(*p.current.ProtectionContainerMappingCollection.NextLink) == 0 {
			return false
		}
		req, err = p.advancer(ctx, p.current)
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		p.err = err
		return false
	}
	resp, err := p.client.pl.Do(req)
	if err != nil {
		p.err = err
		return false
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {
		p.err = runtime.NewResponseError(resp)
		return false
	}
	result, err := p.client.listHandleResponse(resp)
	if err != nil {
		p.err = err
		return false
	}
	p.current = result
	return true
}

// PageResponse returns the current ReplicationProtectionContainerMappingsClientListResponse page.
func (p *ReplicationProtectionContainerMappingsClientListPager) PageResponse() ReplicationProtectionContainerMappingsClientListResponse {
	return p.current
}

// ReplicationProtectionContainersClientListByReplicationFabricsPager provides operations for iterating over paged responses.
type ReplicationProtectionContainersClientListByReplicationFabricsPager struct {
	client    *ReplicationProtectionContainersClient
	current   ReplicationProtectionContainersClientListByReplicationFabricsResponse
	err       error
	requester func(context.Context) (*policy.Request, error)
	advancer  func(context.Context, ReplicationProtectionContainersClientListByReplicationFabricsResponse) (*policy.Request, error)
}

// Err returns the last error encountered while paging.
func (p *ReplicationProtectionContainersClientListByReplicationFabricsPager) Err() error {
	return p.err
}

// NextPage returns true if the pager advanced to the next page.
// Returns false if there are no more pages or an error occurred.
func (p *ReplicationProtectionContainersClientListByReplicationFabricsPager) NextPage(ctx context.Context) bool {
	var req *policy.Request
	var err error
	if !reflect.ValueOf(p.current).IsZero() {
		if p.current.ProtectionContainerCollection.NextLink == nil || len(*p.current.ProtectionContainerCollection.NextLink) == 0 {
			return false
		}
		req, err = p.advancer(ctx, p.current)
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		p.err = err
		return false
	}
	resp, err := p.client.pl.Do(req)
	if err != nil {
		p.err = err
		return false
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {
		p.err = runtime.NewResponseError(resp)
		return false
	}
	result, err := p.client.listByReplicationFabricsHandleResponse(resp)
	if err != nil {
		p.err = err
		return false
	}
	p.current = result
	return true
}

// PageResponse returns the current ReplicationProtectionContainersClientListByReplicationFabricsResponse page.
func (p *ReplicationProtectionContainersClientListByReplicationFabricsPager) PageResponse() ReplicationProtectionContainersClientListByReplicationFabricsResponse {
	return p.current
}

// ReplicationProtectionContainersClientListPager provides operations for iterating over paged responses.
type ReplicationProtectionContainersClientListPager struct {
	client    *ReplicationProtectionContainersClient
	current   ReplicationProtectionContainersClientListResponse
	err       error
	requester func(context.Context) (*policy.Request, error)
	advancer  func(context.Context, ReplicationProtectionContainersClientListResponse) (*policy.Request, error)
}

// Err returns the last error encountered while paging.
func (p *ReplicationProtectionContainersClientListPager) Err() error {
	return p.err
}

// NextPage returns true if the pager advanced to the next page.
// Returns false if there are no more pages or an error occurred.
func (p *ReplicationProtectionContainersClientListPager) NextPage(ctx context.Context) bool {
	var req *policy.Request
	var err error
	if !reflect.ValueOf(p.current).IsZero() {
		if p.current.ProtectionContainerCollection.NextLink == nil || len(*p.current.ProtectionContainerCollection.NextLink) == 0 {
			return false
		}
		req, err = p.advancer(ctx, p.current)
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		p.err = err
		return false
	}
	resp, err := p.client.pl.Do(req)
	if err != nil {
		p.err = err
		return false
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {
		p.err = runtime.NewResponseError(resp)
		return false
	}
	result, err := p.client.listHandleResponse(resp)
	if err != nil {
		p.err = err
		return false
	}
	p.current = result
	return true
}

// PageResponse returns the current ReplicationProtectionContainersClientListResponse page.
func (p *ReplicationProtectionContainersClientListPager) PageResponse() ReplicationProtectionContainersClientListResponse {
	return p.current
}

// ReplicationProtectionIntentsClientListPager provides operations for iterating over paged responses.
type ReplicationProtectionIntentsClientListPager struct {
	client    *ReplicationProtectionIntentsClient
	current   ReplicationProtectionIntentsClientListResponse
	err       error
	requester func(context.Context) (*policy.Request, error)
	advancer  func(context.Context, ReplicationProtectionIntentsClientListResponse) (*policy.Request, error)
}

// Err returns the last error encountered while paging.
func (p *ReplicationProtectionIntentsClientListPager) Err() error {
	return p.err
}

// NextPage returns true if the pager advanced to the next page.
// Returns false if there are no more pages or an error occurred.
func (p *ReplicationProtectionIntentsClientListPager) NextPage(ctx context.Context) bool {
	var req *policy.Request
	var err error
	if !reflect.ValueOf(p.current).IsZero() {
		if p.current.ReplicationProtectionIntentCollection.NextLink == nil || len(*p.current.ReplicationProtectionIntentCollection.NextLink) == 0 {
			return false
		}
		req, err = p.advancer(ctx, p.current)
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		p.err = err
		return false
	}
	resp, err := p.client.pl.Do(req)
	if err != nil {
		p.err = err
		return false
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {
		p.err = runtime.NewResponseError(resp)
		return false
	}
	result, err := p.client.listHandleResponse(resp)
	if err != nil {
		p.err = err
		return false
	}
	p.current = result
	return true
}

// PageResponse returns the current ReplicationProtectionIntentsClientListResponse page.
func (p *ReplicationProtectionIntentsClientListPager) PageResponse() ReplicationProtectionIntentsClientListResponse {
	return p.current
}

// ReplicationRecoveryPlansClientListPager provides operations for iterating over paged responses.
type ReplicationRecoveryPlansClientListPager struct {
	client    *ReplicationRecoveryPlansClient
	current   ReplicationRecoveryPlansClientListResponse
	err       error
	requester func(context.Context) (*policy.Request, error)
	advancer  func(context.Context, ReplicationRecoveryPlansClientListResponse) (*policy.Request, error)
}

// Err returns the last error encountered while paging.
func (p *ReplicationRecoveryPlansClientListPager) Err() error {
	return p.err
}

// NextPage returns true if the pager advanced to the next page.
// Returns false if there are no more pages or an error occurred.
func (p *ReplicationRecoveryPlansClientListPager) NextPage(ctx context.Context) bool {
	var req *policy.Request
	var err error
	if !reflect.ValueOf(p.current).IsZero() {
		if p.current.RecoveryPlanCollection.NextLink == nil || len(*p.current.RecoveryPlanCollection.NextLink) == 0 {
			return false
		}
		req, err = p.advancer(ctx, p.current)
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		p.err = err
		return false
	}
	resp, err := p.client.pl.Do(req)
	if err != nil {
		p.err = err
		return false
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {
		p.err = runtime.NewResponseError(resp)
		return false
	}
	result, err := p.client.listHandleResponse(resp)
	if err != nil {
		p.err = err
		return false
	}
	p.current = result
	return true
}

// PageResponse returns the current ReplicationRecoveryPlansClientListResponse page.
func (p *ReplicationRecoveryPlansClientListPager) PageResponse() ReplicationRecoveryPlansClientListResponse {
	return p.current
}

// ReplicationRecoveryServicesProvidersClientListByReplicationFabricsPager provides operations for iterating over paged responses.
type ReplicationRecoveryServicesProvidersClientListByReplicationFabricsPager struct {
	client    *ReplicationRecoveryServicesProvidersClient
	current   ReplicationRecoveryServicesProvidersClientListByReplicationFabricsResponse
	err       error
	requester func(context.Context) (*policy.Request, error)
	advancer  func(context.Context, ReplicationRecoveryServicesProvidersClientListByReplicationFabricsResponse) (*policy.Request, error)
}

// Err returns the last error encountered while paging.
func (p *ReplicationRecoveryServicesProvidersClientListByReplicationFabricsPager) Err() error {
	return p.err
}

// NextPage returns true if the pager advanced to the next page.
// Returns false if there are no more pages or an error occurred.
func (p *ReplicationRecoveryServicesProvidersClientListByReplicationFabricsPager) NextPage(ctx context.Context) bool {
	var req *policy.Request
	var err error
	if !reflect.ValueOf(p.current).IsZero() {
		if p.current.RecoveryServicesProviderCollection.NextLink == nil || len(*p.current.RecoveryServicesProviderCollection.NextLink) == 0 {
			return false
		}
		req, err = p.advancer(ctx, p.current)
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		p.err = err
		return false
	}
	resp, err := p.client.pl.Do(req)
	if err != nil {
		p.err = err
		return false
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {
		p.err = runtime.NewResponseError(resp)
		return false
	}
	result, err := p.client.listByReplicationFabricsHandleResponse(resp)
	if err != nil {
		p.err = err
		return false
	}
	p.current = result
	return true
}

// PageResponse returns the current ReplicationRecoveryServicesProvidersClientListByReplicationFabricsResponse page.
func (p *ReplicationRecoveryServicesProvidersClientListByReplicationFabricsPager) PageResponse() ReplicationRecoveryServicesProvidersClientListByReplicationFabricsResponse {
	return p.current
}

// ReplicationRecoveryServicesProvidersClientListPager provides operations for iterating over paged responses.
type ReplicationRecoveryServicesProvidersClientListPager struct {
	client    *ReplicationRecoveryServicesProvidersClient
	current   ReplicationRecoveryServicesProvidersClientListResponse
	err       error
	requester func(context.Context) (*policy.Request, error)
	advancer  func(context.Context, ReplicationRecoveryServicesProvidersClientListResponse) (*policy.Request, error)
}

// Err returns the last error encountered while paging.
func (p *ReplicationRecoveryServicesProvidersClientListPager) Err() error {
	return p.err
}

// NextPage returns true if the pager advanced to the next page.
// Returns false if there are no more pages or an error occurred.
func (p *ReplicationRecoveryServicesProvidersClientListPager) NextPage(ctx context.Context) bool {
	var req *policy.Request
	var err error
	if !reflect.ValueOf(p.current).IsZero() {
		if p.current.RecoveryServicesProviderCollection.NextLink == nil || len(*p.current.RecoveryServicesProviderCollection.NextLink) == 0 {
			return false
		}
		req, err = p.advancer(ctx, p.current)
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		p.err = err
		return false
	}
	resp, err := p.client.pl.Do(req)
	if err != nil {
		p.err = err
		return false
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {
		p.err = runtime.NewResponseError(resp)
		return false
	}
	result, err := p.client.listHandleResponse(resp)
	if err != nil {
		p.err = err
		return false
	}
	p.current = result
	return true
}

// PageResponse returns the current ReplicationRecoveryServicesProvidersClientListResponse page.
func (p *ReplicationRecoveryServicesProvidersClientListPager) PageResponse() ReplicationRecoveryServicesProvidersClientListResponse {
	return p.current
}

// ReplicationStorageClassificationMappingsClientListByReplicationStorageClassificationsPager provides operations for iterating over paged responses.
type ReplicationStorageClassificationMappingsClientListByReplicationStorageClassificationsPager struct {
	client    *ReplicationStorageClassificationMappingsClient
	current   ReplicationStorageClassificationMappingsClientListByReplicationStorageClassificationsResponse
	err       error
	requester func(context.Context) (*policy.Request, error)
	advancer  func(context.Context, ReplicationStorageClassificationMappingsClientListByReplicationStorageClassificationsResponse) (*policy.Request, error)
}

// Err returns the last error encountered while paging.
func (p *ReplicationStorageClassificationMappingsClientListByReplicationStorageClassificationsPager) Err() error {
	return p.err
}

// NextPage returns true if the pager advanced to the next page.
// Returns false if there are no more pages or an error occurred.
func (p *ReplicationStorageClassificationMappingsClientListByReplicationStorageClassificationsPager) NextPage(ctx context.Context) bool {
	var req *policy.Request
	var err error
	if !reflect.ValueOf(p.current).IsZero() {
		if p.current.StorageClassificationMappingCollection.NextLink == nil || len(*p.current.StorageClassificationMappingCollection.NextLink) == 0 {
			return false
		}
		req, err = p.advancer(ctx, p.current)
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		p.err = err
		return false
	}
	resp, err := p.client.pl.Do(req)
	if err != nil {
		p.err = err
		return false
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {
		p.err = runtime.NewResponseError(resp)
		return false
	}
	result, err := p.client.listByReplicationStorageClassificationsHandleResponse(resp)
	if err != nil {
		p.err = err
		return false
	}
	p.current = result
	return true
}

// PageResponse returns the current ReplicationStorageClassificationMappingsClientListByReplicationStorageClassificationsResponse page.
func (p *ReplicationStorageClassificationMappingsClientListByReplicationStorageClassificationsPager) PageResponse() ReplicationStorageClassificationMappingsClientListByReplicationStorageClassificationsResponse {
	return p.current
}

// ReplicationStorageClassificationMappingsClientListPager provides operations for iterating over paged responses.
type ReplicationStorageClassificationMappingsClientListPager struct {
	client    *ReplicationStorageClassificationMappingsClient
	current   ReplicationStorageClassificationMappingsClientListResponse
	err       error
	requester func(context.Context) (*policy.Request, error)
	advancer  func(context.Context, ReplicationStorageClassificationMappingsClientListResponse) (*policy.Request, error)
}

// Err returns the last error encountered while paging.
func (p *ReplicationStorageClassificationMappingsClientListPager) Err() error {
	return p.err
}

// NextPage returns true if the pager advanced to the next page.
// Returns false if there are no more pages or an error occurred.
func (p *ReplicationStorageClassificationMappingsClientListPager) NextPage(ctx context.Context) bool {
	var req *policy.Request
	var err error
	if !reflect.ValueOf(p.current).IsZero() {
		if p.current.StorageClassificationMappingCollection.NextLink == nil || len(*p.current.StorageClassificationMappingCollection.NextLink) == 0 {
			return false
		}
		req, err = p.advancer(ctx, p.current)
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		p.err = err
		return false
	}
	resp, err := p.client.pl.Do(req)
	if err != nil {
		p.err = err
		return false
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {
		p.err = runtime.NewResponseError(resp)
		return false
	}
	result, err := p.client.listHandleResponse(resp)
	if err != nil {
		p.err = err
		return false
	}
	p.current = result
	return true
}

// PageResponse returns the current ReplicationStorageClassificationMappingsClientListResponse page.
func (p *ReplicationStorageClassificationMappingsClientListPager) PageResponse() ReplicationStorageClassificationMappingsClientListResponse {
	return p.current
}

// ReplicationStorageClassificationsClientListByReplicationFabricsPager provides operations for iterating over paged responses.
type ReplicationStorageClassificationsClientListByReplicationFabricsPager struct {
	client    *ReplicationStorageClassificationsClient
	current   ReplicationStorageClassificationsClientListByReplicationFabricsResponse
	err       error
	requester func(context.Context) (*policy.Request, error)
	advancer  func(context.Context, ReplicationStorageClassificationsClientListByReplicationFabricsResponse) (*policy.Request, error)
}

// Err returns the last error encountered while paging.
func (p *ReplicationStorageClassificationsClientListByReplicationFabricsPager) Err() error {
	return p.err
}

// NextPage returns true if the pager advanced to the next page.
// Returns false if there are no more pages or an error occurred.
func (p *ReplicationStorageClassificationsClientListByReplicationFabricsPager) NextPage(ctx context.Context) bool {
	var req *policy.Request
	var err error
	if !reflect.ValueOf(p.current).IsZero() {
		if p.current.StorageClassificationCollection.NextLink == nil || len(*p.current.StorageClassificationCollection.NextLink) == 0 {
			return false
		}
		req, err = p.advancer(ctx, p.current)
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		p.err = err
		return false
	}
	resp, err := p.client.pl.Do(req)
	if err != nil {
		p.err = err
		return false
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {
		p.err = runtime.NewResponseError(resp)
		return false
	}
	result, err := p.client.listByReplicationFabricsHandleResponse(resp)
	if err != nil {
		p.err = err
		return false
	}
	p.current = result
	return true
}

// PageResponse returns the current ReplicationStorageClassificationsClientListByReplicationFabricsResponse page.
func (p *ReplicationStorageClassificationsClientListByReplicationFabricsPager) PageResponse() ReplicationStorageClassificationsClientListByReplicationFabricsResponse {
	return p.current
}

// ReplicationStorageClassificationsClientListPager provides operations for iterating over paged responses.
type ReplicationStorageClassificationsClientListPager struct {
	client    *ReplicationStorageClassificationsClient
	current   ReplicationStorageClassificationsClientListResponse
	err       error
	requester func(context.Context) (*policy.Request, error)
	advancer  func(context.Context, ReplicationStorageClassificationsClientListResponse) (*policy.Request, error)
}

// Err returns the last error encountered while paging.
func (p *ReplicationStorageClassificationsClientListPager) Err() error {
	return p.err
}

// NextPage returns true if the pager advanced to the next page.
// Returns false if there are no more pages or an error occurred.
func (p *ReplicationStorageClassificationsClientListPager) NextPage(ctx context.Context) bool {
	var req *policy.Request
	var err error
	if !reflect.ValueOf(p.current).IsZero() {
		if p.current.StorageClassificationCollection.NextLink == nil || len(*p.current.StorageClassificationCollection.NextLink) == 0 {
			return false
		}
		req, err = p.advancer(ctx, p.current)
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		p.err = err
		return false
	}
	resp, err := p.client.pl.Do(req)
	if err != nil {
		p.err = err
		return false
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {
		p.err = runtime.NewResponseError(resp)
		return false
	}
	result, err := p.client.listHandleResponse(resp)
	if err != nil {
		p.err = err
		return false
	}
	p.current = result
	return true
}

// PageResponse returns the current ReplicationStorageClassificationsClientListResponse page.
func (p *ReplicationStorageClassificationsClientListPager) PageResponse() ReplicationStorageClassificationsClientListResponse {
	return p.current
}

// ReplicationVaultSettingClientListPager provides operations for iterating over paged responses.
type ReplicationVaultSettingClientListPager struct {
	client    *ReplicationVaultSettingClient
	current   ReplicationVaultSettingClientListResponse
	err       error
	requester func(context.Context) (*policy.Request, error)
	advancer  func(context.Context, ReplicationVaultSettingClientListResponse) (*policy.Request, error)
}

// Err returns the last error encountered while paging.
func (p *ReplicationVaultSettingClientListPager) Err() error {
	return p.err
}

// NextPage returns true if the pager advanced to the next page.
// Returns false if there are no more pages or an error occurred.
func (p *ReplicationVaultSettingClientListPager) NextPage(ctx context.Context) bool {
	var req *policy.Request
	var err error
	if !reflect.ValueOf(p.current).IsZero() {
		if p.current.VaultSettingCollection.NextLink == nil || len(*p.current.VaultSettingCollection.NextLink) == 0 {
			return false
		}
		req, err = p.advancer(ctx, p.current)
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		p.err = err
		return false
	}
	resp, err := p.client.pl.Do(req)
	if err != nil {
		p.err = err
		return false
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {
		p.err = runtime.NewResponseError(resp)
		return false
	}
	result, err := p.client.listHandleResponse(resp)
	if err != nil {
		p.err = err
		return false
	}
	p.current = result
	return true
}

// PageResponse returns the current ReplicationVaultSettingClientListResponse page.
func (p *ReplicationVaultSettingClientListPager) PageResponse() ReplicationVaultSettingClientListResponse {
	return p.current
}

// ReplicationvCentersClientListByReplicationFabricsPager provides operations for iterating over paged responses.
type ReplicationvCentersClientListByReplicationFabricsPager struct {
	client    *ReplicationvCentersClient
	current   ReplicationvCentersClientListByReplicationFabricsResponse
	err       error
	requester func(context.Context) (*policy.Request, error)
	advancer  func(context.Context, ReplicationvCentersClientListByReplicationFabricsResponse) (*policy.Request, error)
}

// Err returns the last error encountered while paging.
func (p *ReplicationvCentersClientListByReplicationFabricsPager) Err() error {
	return p.err
}

// NextPage returns true if the pager advanced to the next page.
// Returns false if there are no more pages or an error occurred.
func (p *ReplicationvCentersClientListByReplicationFabricsPager) NextPage(ctx context.Context) bool {
	var req *policy.Request
	var err error
	if !reflect.ValueOf(p.current).IsZero() {
		if p.current.VCenterCollection.NextLink == nil || len(*p.current.VCenterCollection.NextLink) == 0 {
			return false
		}
		req, err = p.advancer(ctx, p.current)
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		p.err = err
		return false
	}
	resp, err := p.client.pl.Do(req)
	if err != nil {
		p.err = err
		return false
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {
		p.err = runtime.NewResponseError(resp)
		return false
	}
	result, err := p.client.listByReplicationFabricsHandleResponse(resp)
	if err != nil {
		p.err = err
		return false
	}
	p.current = result
	return true
}

// PageResponse returns the current ReplicationvCentersClientListByReplicationFabricsResponse page.
func (p *ReplicationvCentersClientListByReplicationFabricsPager) PageResponse() ReplicationvCentersClientListByReplicationFabricsResponse {
	return p.current
}

// ReplicationvCentersClientListPager provides operations for iterating over paged responses.
type ReplicationvCentersClientListPager struct {
	client    *ReplicationvCentersClient
	current   ReplicationvCentersClientListResponse
	err       error
	requester func(context.Context) (*policy.Request, error)
	advancer  func(context.Context, ReplicationvCentersClientListResponse) (*policy.Request, error)
}

// Err returns the last error encountered while paging.
func (p *ReplicationvCentersClientListPager) Err() error {
	return p.err
}

// NextPage returns true if the pager advanced to the next page.
// Returns false if there are no more pages or an error occurred.
func (p *ReplicationvCentersClientListPager) NextPage(ctx context.Context) bool {
	var req *policy.Request
	var err error
	if !reflect.ValueOf(p.current).IsZero() {
		if p.current.VCenterCollection.NextLink == nil || len(*p.current.VCenterCollection.NextLink) == 0 {
			return false
		}
		req, err = p.advancer(ctx, p.current)
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		p.err = err
		return false
	}
	resp, err := p.client.pl.Do(req)
	if err != nil {
		p.err = err
		return false
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {
		p.err = runtime.NewResponseError(resp)
		return false
	}
	result, err := p.client.listHandleResponse(resp)
	if err != nil {
		p.err = err
		return false
	}
	p.current = result
	return true
}

// PageResponse returns the current ReplicationvCentersClientListResponse page.
func (p *ReplicationvCentersClientListPager) PageResponse() ReplicationvCentersClientListResponse {
	return p.current
}

// TargetComputeSizesClientListByReplicationProtectedItemsPager provides operations for iterating over paged responses.
type TargetComputeSizesClientListByReplicationProtectedItemsPager struct {
	client    *TargetComputeSizesClient
	current   TargetComputeSizesClientListByReplicationProtectedItemsResponse
	err       error
	requester func(context.Context) (*policy.Request, error)
	advancer  func(context.Context, TargetComputeSizesClientListByReplicationProtectedItemsResponse) (*policy.Request, error)
}

// Err returns the last error encountered while paging.
func (p *TargetComputeSizesClientListByReplicationProtectedItemsPager) Err() error {
	return p.err
}

// NextPage returns true if the pager advanced to the next page.
// Returns false if there are no more pages or an error occurred.
func (p *TargetComputeSizesClientListByReplicationProtectedItemsPager) NextPage(ctx context.Context) bool {
	var req *policy.Request
	var err error
	if !reflect.ValueOf(p.current).IsZero() {
		if p.current.TargetComputeSizeCollection.NextLink == nil || len(*p.current.TargetComputeSizeCollection.NextLink) == 0 {
			return false
		}
		req, err = p.advancer(ctx, p.current)
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		p.err = err
		return false
	}
	resp, err := p.client.pl.Do(req)
	if err != nil {
		p.err = err
		return false
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {
		p.err = runtime.NewResponseError(resp)
		return false
	}
	result, err := p.client.listByReplicationProtectedItemsHandleResponse(resp)
	if err != nil {
		p.err = err
		return false
	}
	p.current = result
	return true
}

// PageResponse returns the current TargetComputeSizesClientListByReplicationProtectedItemsResponse page.
func (p *TargetComputeSizesClientListByReplicationProtectedItemsPager) PageResponse() TargetComputeSizesClientListByReplicationProtectedItemsResponse {
	return p.current
}
