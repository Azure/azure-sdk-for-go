//go:build go1.16
// +build go1.16

// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

package armrecoveryservicessiterecovery

import (
	"context"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/policy"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/runtime"
	"net/http"
	"reflect"
)

// MigrationRecoveryPointsListByReplicationMigrationItemsPager provides operations for iterating over paged responses.
type MigrationRecoveryPointsListByReplicationMigrationItemsPager struct {
	client    *MigrationRecoveryPointsClient
	current   MigrationRecoveryPointsListByReplicationMigrationItemsResponse
	err       error
	requester func(context.Context) (*policy.Request, error)
	advancer  func(context.Context, MigrationRecoveryPointsListByReplicationMigrationItemsResponse) (*policy.Request, error)
}

// Err returns the last error encountered while paging.
func (p *MigrationRecoveryPointsListByReplicationMigrationItemsPager) Err() error {
	return p.err
}

// NextPage returns true if the pager advanced to the next page.
// Returns false if there are no more pages or an error occurred.
func (p *MigrationRecoveryPointsListByReplicationMigrationItemsPager) NextPage(ctx context.Context) bool {
	var req *policy.Request
	var err error
	if !reflect.ValueOf(p.current).IsZero() {
		if p.current.MigrationRecoveryPointCollection.NextLink == nil || len(*p.current.MigrationRecoveryPointCollection.NextLink) == 0 {
			return false
		}
		req, err = p.advancer(ctx, p.current)
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		p.err = err
		return false
	}
	resp, err := p.client.pl.Do(req)
	if err != nil {
		p.err = err
		return false
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {
		p.err = p.client.listByReplicationMigrationItemsHandleError(resp)
		return false
	}
	result, err := p.client.listByReplicationMigrationItemsHandleResponse(resp)
	if err != nil {
		p.err = err
		return false
	}
	p.current = result
	return true
}

// PageResponse returns the current MigrationRecoveryPointsListByReplicationMigrationItemsResponse page.
func (p *MigrationRecoveryPointsListByReplicationMigrationItemsPager) PageResponse() MigrationRecoveryPointsListByReplicationMigrationItemsResponse {
	return p.current
}

// OperationsListPager provides operations for iterating over paged responses.
type OperationsListPager struct {
	client    *OperationsClient
	current   OperationsListResponse
	err       error
	requester func(context.Context) (*policy.Request, error)
	advancer  func(context.Context, OperationsListResponse) (*policy.Request, error)
}

// Err returns the last error encountered while paging.
func (p *OperationsListPager) Err() error {
	return p.err
}

// NextPage returns true if the pager advanced to the next page.
// Returns false if there are no more pages or an error occurred.
func (p *OperationsListPager) NextPage(ctx context.Context) bool {
	var req *policy.Request
	var err error
	if !reflect.ValueOf(p.current).IsZero() {
		if p.current.OperationsDiscoveryCollection.NextLink == nil || len(*p.current.OperationsDiscoveryCollection.NextLink) == 0 {
			return false
		}
		req, err = p.advancer(ctx, p.current)
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		p.err = err
		return false
	}
	resp, err := p.client.pl.Do(req)
	if err != nil {
		p.err = err
		return false
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {
		p.err = p.client.listHandleError(resp)
		return false
	}
	result, err := p.client.listHandleResponse(resp)
	if err != nil {
		p.err = err
		return false
	}
	p.current = result
	return true
}

// PageResponse returns the current OperationsListResponse page.
func (p *OperationsListPager) PageResponse() OperationsListResponse {
	return p.current
}

// RecoveryPointsListByReplicationProtectedItemsPager provides operations for iterating over paged responses.
type RecoveryPointsListByReplicationProtectedItemsPager struct {
	client    *RecoveryPointsClient
	current   RecoveryPointsListByReplicationProtectedItemsResponse
	err       error
	requester func(context.Context) (*policy.Request, error)
	advancer  func(context.Context, RecoveryPointsListByReplicationProtectedItemsResponse) (*policy.Request, error)
}

// Err returns the last error encountered while paging.
func (p *RecoveryPointsListByReplicationProtectedItemsPager) Err() error {
	return p.err
}

// NextPage returns true if the pager advanced to the next page.
// Returns false if there are no more pages or an error occurred.
func (p *RecoveryPointsListByReplicationProtectedItemsPager) NextPage(ctx context.Context) bool {
	var req *policy.Request
	var err error
	if !reflect.ValueOf(p.current).IsZero() {
		if p.current.RecoveryPointCollection.NextLink == nil || len(*p.current.RecoveryPointCollection.NextLink) == 0 {
			return false
		}
		req, err = p.advancer(ctx, p.current)
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		p.err = err
		return false
	}
	resp, err := p.client.pl.Do(req)
	if err != nil {
		p.err = err
		return false
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {
		p.err = p.client.listByReplicationProtectedItemsHandleError(resp)
		return false
	}
	result, err := p.client.listByReplicationProtectedItemsHandleResponse(resp)
	if err != nil {
		p.err = err
		return false
	}
	p.current = result
	return true
}

// PageResponse returns the current RecoveryPointsListByReplicationProtectedItemsResponse page.
func (p *RecoveryPointsListByReplicationProtectedItemsPager) PageResponse() RecoveryPointsListByReplicationProtectedItemsResponse {
	return p.current
}

// ReplicationAlertSettingsListPager provides operations for iterating over paged responses.
type ReplicationAlertSettingsListPager struct {
	client    *ReplicationAlertSettingsClient
	current   ReplicationAlertSettingsListResponse
	err       error
	requester func(context.Context) (*policy.Request, error)
	advancer  func(context.Context, ReplicationAlertSettingsListResponse) (*policy.Request, error)
}

// Err returns the last error encountered while paging.
func (p *ReplicationAlertSettingsListPager) Err() error {
	return p.err
}

// NextPage returns true if the pager advanced to the next page.
// Returns false if there are no more pages or an error occurred.
func (p *ReplicationAlertSettingsListPager) NextPage(ctx context.Context) bool {
	var req *policy.Request
	var err error
	if !reflect.ValueOf(p.current).IsZero() {
		if p.current.AlertCollection.NextLink == nil || len(*p.current.AlertCollection.NextLink) == 0 {
			return false
		}
		req, err = p.advancer(ctx, p.current)
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		p.err = err
		return false
	}
	resp, err := p.client.pl.Do(req)
	if err != nil {
		p.err = err
		return false
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {
		p.err = p.client.listHandleError(resp)
		return false
	}
	result, err := p.client.listHandleResponse(resp)
	if err != nil {
		p.err = err
		return false
	}
	p.current = result
	return true
}

// PageResponse returns the current ReplicationAlertSettingsListResponse page.
func (p *ReplicationAlertSettingsListPager) PageResponse() ReplicationAlertSettingsListResponse {
	return p.current
}

// ReplicationEventsListPager provides operations for iterating over paged responses.
type ReplicationEventsListPager struct {
	client    *ReplicationEventsClient
	current   ReplicationEventsListResponse
	err       error
	requester func(context.Context) (*policy.Request, error)
	advancer  func(context.Context, ReplicationEventsListResponse) (*policy.Request, error)
}

// Err returns the last error encountered while paging.
func (p *ReplicationEventsListPager) Err() error {
	return p.err
}

// NextPage returns true if the pager advanced to the next page.
// Returns false if there are no more pages or an error occurred.
func (p *ReplicationEventsListPager) NextPage(ctx context.Context) bool {
	var req *policy.Request
	var err error
	if !reflect.ValueOf(p.current).IsZero() {
		if p.current.EventCollection.NextLink == nil || len(*p.current.EventCollection.NextLink) == 0 {
			return false
		}
		req, err = p.advancer(ctx, p.current)
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		p.err = err
		return false
	}
	resp, err := p.client.pl.Do(req)
	if err != nil {
		p.err = err
		return false
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {
		p.err = p.client.listHandleError(resp)
		return false
	}
	result, err := p.client.listHandleResponse(resp)
	if err != nil {
		p.err = err
		return false
	}
	p.current = result
	return true
}

// PageResponse returns the current ReplicationEventsListResponse page.
func (p *ReplicationEventsListPager) PageResponse() ReplicationEventsListResponse {
	return p.current
}

// ReplicationFabricsListPager provides operations for iterating over paged responses.
type ReplicationFabricsListPager struct {
	client    *ReplicationFabricsClient
	current   ReplicationFabricsListResponse
	err       error
	requester func(context.Context) (*policy.Request, error)
	advancer  func(context.Context, ReplicationFabricsListResponse) (*policy.Request, error)
}

// Err returns the last error encountered while paging.
func (p *ReplicationFabricsListPager) Err() error {
	return p.err
}

// NextPage returns true if the pager advanced to the next page.
// Returns false if there are no more pages or an error occurred.
func (p *ReplicationFabricsListPager) NextPage(ctx context.Context) bool {
	var req *policy.Request
	var err error
	if !reflect.ValueOf(p.current).IsZero() {
		if p.current.FabricCollection.NextLink == nil || len(*p.current.FabricCollection.NextLink) == 0 {
			return false
		}
		req, err = p.advancer(ctx, p.current)
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		p.err = err
		return false
	}
	resp, err := p.client.pl.Do(req)
	if err != nil {
		p.err = err
		return false
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {
		p.err = p.client.listHandleError(resp)
		return false
	}
	result, err := p.client.listHandleResponse(resp)
	if err != nil {
		p.err = err
		return false
	}
	p.current = result
	return true
}

// PageResponse returns the current ReplicationFabricsListResponse page.
func (p *ReplicationFabricsListPager) PageResponse() ReplicationFabricsListResponse {
	return p.current
}

// ReplicationJobsListPager provides operations for iterating over paged responses.
type ReplicationJobsListPager struct {
	client    *ReplicationJobsClient
	current   ReplicationJobsListResponse
	err       error
	requester func(context.Context) (*policy.Request, error)
	advancer  func(context.Context, ReplicationJobsListResponse) (*policy.Request, error)
}

// Err returns the last error encountered while paging.
func (p *ReplicationJobsListPager) Err() error {
	return p.err
}

// NextPage returns true if the pager advanced to the next page.
// Returns false if there are no more pages or an error occurred.
func (p *ReplicationJobsListPager) NextPage(ctx context.Context) bool {
	var req *policy.Request
	var err error
	if !reflect.ValueOf(p.current).IsZero() {
		if p.current.JobCollection.NextLink == nil || len(*p.current.JobCollection.NextLink) == 0 {
			return false
		}
		req, err = p.advancer(ctx, p.current)
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		p.err = err
		return false
	}
	resp, err := p.client.pl.Do(req)
	if err != nil {
		p.err = err
		return false
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {
		p.err = p.client.listHandleError(resp)
		return false
	}
	result, err := p.client.listHandleResponse(resp)
	if err != nil {
		p.err = err
		return false
	}
	p.current = result
	return true
}

// PageResponse returns the current ReplicationJobsListResponse page.
func (p *ReplicationJobsListPager) PageResponse() ReplicationJobsListResponse {
	return p.current
}

// ReplicationLogicalNetworksListByReplicationFabricsPager provides operations for iterating over paged responses.
type ReplicationLogicalNetworksListByReplicationFabricsPager struct {
	client    *ReplicationLogicalNetworksClient
	current   ReplicationLogicalNetworksListByReplicationFabricsResponse
	err       error
	requester func(context.Context) (*policy.Request, error)
	advancer  func(context.Context, ReplicationLogicalNetworksListByReplicationFabricsResponse) (*policy.Request, error)
}

// Err returns the last error encountered while paging.
func (p *ReplicationLogicalNetworksListByReplicationFabricsPager) Err() error {
	return p.err
}

// NextPage returns true if the pager advanced to the next page.
// Returns false if there are no more pages or an error occurred.
func (p *ReplicationLogicalNetworksListByReplicationFabricsPager) NextPage(ctx context.Context) bool {
	var req *policy.Request
	var err error
	if !reflect.ValueOf(p.current).IsZero() {
		if p.current.LogicalNetworkCollection.NextLink == nil || len(*p.current.LogicalNetworkCollection.NextLink) == 0 {
			return false
		}
		req, err = p.advancer(ctx, p.current)
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		p.err = err
		return false
	}
	resp, err := p.client.pl.Do(req)
	if err != nil {
		p.err = err
		return false
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {
		p.err = p.client.listByReplicationFabricsHandleError(resp)
		return false
	}
	result, err := p.client.listByReplicationFabricsHandleResponse(resp)
	if err != nil {
		p.err = err
		return false
	}
	p.current = result
	return true
}

// PageResponse returns the current ReplicationLogicalNetworksListByReplicationFabricsResponse page.
func (p *ReplicationLogicalNetworksListByReplicationFabricsPager) PageResponse() ReplicationLogicalNetworksListByReplicationFabricsResponse {
	return p.current
}

// ReplicationMigrationItemsListByReplicationProtectionContainersPager provides operations for iterating over paged responses.
type ReplicationMigrationItemsListByReplicationProtectionContainersPager struct {
	client    *ReplicationMigrationItemsClient
	current   ReplicationMigrationItemsListByReplicationProtectionContainersResponse
	err       error
	requester func(context.Context) (*policy.Request, error)
	advancer  func(context.Context, ReplicationMigrationItemsListByReplicationProtectionContainersResponse) (*policy.Request, error)
}

// Err returns the last error encountered while paging.
func (p *ReplicationMigrationItemsListByReplicationProtectionContainersPager) Err() error {
	return p.err
}

// NextPage returns true if the pager advanced to the next page.
// Returns false if there are no more pages or an error occurred.
func (p *ReplicationMigrationItemsListByReplicationProtectionContainersPager) NextPage(ctx context.Context) bool {
	var req *policy.Request
	var err error
	if !reflect.ValueOf(p.current).IsZero() {
		if p.current.MigrationItemCollection.NextLink == nil || len(*p.current.MigrationItemCollection.NextLink) == 0 {
			return false
		}
		req, err = p.advancer(ctx, p.current)
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		p.err = err
		return false
	}
	resp, err := p.client.pl.Do(req)
	if err != nil {
		p.err = err
		return false
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {
		p.err = p.client.listByReplicationProtectionContainersHandleError(resp)
		return false
	}
	result, err := p.client.listByReplicationProtectionContainersHandleResponse(resp)
	if err != nil {
		p.err = err
		return false
	}
	p.current = result
	return true
}

// PageResponse returns the current ReplicationMigrationItemsListByReplicationProtectionContainersResponse page.
func (p *ReplicationMigrationItemsListByReplicationProtectionContainersPager) PageResponse() ReplicationMigrationItemsListByReplicationProtectionContainersResponse {
	return p.current
}

// ReplicationMigrationItemsListPager provides operations for iterating over paged responses.
type ReplicationMigrationItemsListPager struct {
	client    *ReplicationMigrationItemsClient
	current   ReplicationMigrationItemsListResponse
	err       error
	requester func(context.Context) (*policy.Request, error)
	advancer  func(context.Context, ReplicationMigrationItemsListResponse) (*policy.Request, error)
}

// Err returns the last error encountered while paging.
func (p *ReplicationMigrationItemsListPager) Err() error {
	return p.err
}

// NextPage returns true if the pager advanced to the next page.
// Returns false if there are no more pages or an error occurred.
func (p *ReplicationMigrationItemsListPager) NextPage(ctx context.Context) bool {
	var req *policy.Request
	var err error
	if !reflect.ValueOf(p.current).IsZero() {
		if p.current.MigrationItemCollection.NextLink == nil || len(*p.current.MigrationItemCollection.NextLink) == 0 {
			return false
		}
		req, err = p.advancer(ctx, p.current)
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		p.err = err
		return false
	}
	resp, err := p.client.pl.Do(req)
	if err != nil {
		p.err = err
		return false
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {
		p.err = p.client.listHandleError(resp)
		return false
	}
	result, err := p.client.listHandleResponse(resp)
	if err != nil {
		p.err = err
		return false
	}
	p.current = result
	return true
}

// PageResponse returns the current ReplicationMigrationItemsListResponse page.
func (p *ReplicationMigrationItemsListPager) PageResponse() ReplicationMigrationItemsListResponse {
	return p.current
}

// ReplicationNetworkMappingsListByReplicationNetworksPager provides operations for iterating over paged responses.
type ReplicationNetworkMappingsListByReplicationNetworksPager struct {
	client    *ReplicationNetworkMappingsClient
	current   ReplicationNetworkMappingsListByReplicationNetworksResponse
	err       error
	requester func(context.Context) (*policy.Request, error)
	advancer  func(context.Context, ReplicationNetworkMappingsListByReplicationNetworksResponse) (*policy.Request, error)
}

// Err returns the last error encountered while paging.
func (p *ReplicationNetworkMappingsListByReplicationNetworksPager) Err() error {
	return p.err
}

// NextPage returns true if the pager advanced to the next page.
// Returns false if there are no more pages or an error occurred.
func (p *ReplicationNetworkMappingsListByReplicationNetworksPager) NextPage(ctx context.Context) bool {
	var req *policy.Request
	var err error
	if !reflect.ValueOf(p.current).IsZero() {
		if p.current.NetworkMappingCollection.NextLink == nil || len(*p.current.NetworkMappingCollection.NextLink) == 0 {
			return false
		}
		req, err = p.advancer(ctx, p.current)
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		p.err = err
		return false
	}
	resp, err := p.client.pl.Do(req)
	if err != nil {
		p.err = err
		return false
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {
		p.err = p.client.listByReplicationNetworksHandleError(resp)
		return false
	}
	result, err := p.client.listByReplicationNetworksHandleResponse(resp)
	if err != nil {
		p.err = err
		return false
	}
	p.current = result
	return true
}

// PageResponse returns the current ReplicationNetworkMappingsListByReplicationNetworksResponse page.
func (p *ReplicationNetworkMappingsListByReplicationNetworksPager) PageResponse() ReplicationNetworkMappingsListByReplicationNetworksResponse {
	return p.current
}

// ReplicationNetworkMappingsListPager provides operations for iterating over paged responses.
type ReplicationNetworkMappingsListPager struct {
	client    *ReplicationNetworkMappingsClient
	current   ReplicationNetworkMappingsListResponse
	err       error
	requester func(context.Context) (*policy.Request, error)
	advancer  func(context.Context, ReplicationNetworkMappingsListResponse) (*policy.Request, error)
}

// Err returns the last error encountered while paging.
func (p *ReplicationNetworkMappingsListPager) Err() error {
	return p.err
}

// NextPage returns true if the pager advanced to the next page.
// Returns false if there are no more pages or an error occurred.
func (p *ReplicationNetworkMappingsListPager) NextPage(ctx context.Context) bool {
	var req *policy.Request
	var err error
	if !reflect.ValueOf(p.current).IsZero() {
		if p.current.NetworkMappingCollection.NextLink == nil || len(*p.current.NetworkMappingCollection.NextLink) == 0 {
			return false
		}
		req, err = p.advancer(ctx, p.current)
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		p.err = err
		return false
	}
	resp, err := p.client.pl.Do(req)
	if err != nil {
		p.err = err
		return false
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {
		p.err = p.client.listHandleError(resp)
		return false
	}
	result, err := p.client.listHandleResponse(resp)
	if err != nil {
		p.err = err
		return false
	}
	p.current = result
	return true
}

// PageResponse returns the current ReplicationNetworkMappingsListResponse page.
func (p *ReplicationNetworkMappingsListPager) PageResponse() ReplicationNetworkMappingsListResponse {
	return p.current
}

// ReplicationNetworksListByReplicationFabricsPager provides operations for iterating over paged responses.
type ReplicationNetworksListByReplicationFabricsPager struct {
	client    *ReplicationNetworksClient
	current   ReplicationNetworksListByReplicationFabricsResponse
	err       error
	requester func(context.Context) (*policy.Request, error)
	advancer  func(context.Context, ReplicationNetworksListByReplicationFabricsResponse) (*policy.Request, error)
}

// Err returns the last error encountered while paging.
func (p *ReplicationNetworksListByReplicationFabricsPager) Err() error {
	return p.err
}

// NextPage returns true if the pager advanced to the next page.
// Returns false if there are no more pages or an error occurred.
func (p *ReplicationNetworksListByReplicationFabricsPager) NextPage(ctx context.Context) bool {
	var req *policy.Request
	var err error
	if !reflect.ValueOf(p.current).IsZero() {
		if p.current.NetworkCollection.NextLink == nil || len(*p.current.NetworkCollection.NextLink) == 0 {
			return false
		}
		req, err = p.advancer(ctx, p.current)
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		p.err = err
		return false
	}
	resp, err := p.client.pl.Do(req)
	if err != nil {
		p.err = err
		return false
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {
		p.err = p.client.listByReplicationFabricsHandleError(resp)
		return false
	}
	result, err := p.client.listByReplicationFabricsHandleResponse(resp)
	if err != nil {
		p.err = err
		return false
	}
	p.current = result
	return true
}

// PageResponse returns the current ReplicationNetworksListByReplicationFabricsResponse page.
func (p *ReplicationNetworksListByReplicationFabricsPager) PageResponse() ReplicationNetworksListByReplicationFabricsResponse {
	return p.current
}

// ReplicationNetworksListPager provides operations for iterating over paged responses.
type ReplicationNetworksListPager struct {
	client    *ReplicationNetworksClient
	current   ReplicationNetworksListResponse
	err       error
	requester func(context.Context) (*policy.Request, error)
	advancer  func(context.Context, ReplicationNetworksListResponse) (*policy.Request, error)
}

// Err returns the last error encountered while paging.
func (p *ReplicationNetworksListPager) Err() error {
	return p.err
}

// NextPage returns true if the pager advanced to the next page.
// Returns false if there are no more pages or an error occurred.
func (p *ReplicationNetworksListPager) NextPage(ctx context.Context) bool {
	var req *policy.Request
	var err error
	if !reflect.ValueOf(p.current).IsZero() {
		if p.current.NetworkCollection.NextLink == nil || len(*p.current.NetworkCollection.NextLink) == 0 {
			return false
		}
		req, err = p.advancer(ctx, p.current)
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		p.err = err
		return false
	}
	resp, err := p.client.pl.Do(req)
	if err != nil {
		p.err = err
		return false
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {
		p.err = p.client.listHandleError(resp)
		return false
	}
	result, err := p.client.listHandleResponse(resp)
	if err != nil {
		p.err = err
		return false
	}
	p.current = result
	return true
}

// PageResponse returns the current ReplicationNetworksListResponse page.
func (p *ReplicationNetworksListPager) PageResponse() ReplicationNetworksListResponse {
	return p.current
}

// ReplicationPoliciesListPager provides operations for iterating over paged responses.
type ReplicationPoliciesListPager struct {
	client    *ReplicationPoliciesClient
	current   ReplicationPoliciesListResponse
	err       error
	requester func(context.Context) (*policy.Request, error)
	advancer  func(context.Context, ReplicationPoliciesListResponse) (*policy.Request, error)
}

// Err returns the last error encountered while paging.
func (p *ReplicationPoliciesListPager) Err() error {
	return p.err
}

// NextPage returns true if the pager advanced to the next page.
// Returns false if there are no more pages or an error occurred.
func (p *ReplicationPoliciesListPager) NextPage(ctx context.Context) bool {
	var req *policy.Request
	var err error
	if !reflect.ValueOf(p.current).IsZero() {
		if p.current.PolicyCollection.NextLink == nil || len(*p.current.PolicyCollection.NextLink) == 0 {
			return false
		}
		req, err = p.advancer(ctx, p.current)
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		p.err = err
		return false
	}
	resp, err := p.client.pl.Do(req)
	if err != nil {
		p.err = err
		return false
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {
		p.err = p.client.listHandleError(resp)
		return false
	}
	result, err := p.client.listHandleResponse(resp)
	if err != nil {
		p.err = err
		return false
	}
	p.current = result
	return true
}

// PageResponse returns the current ReplicationPoliciesListResponse page.
func (p *ReplicationPoliciesListPager) PageResponse() ReplicationPoliciesListResponse {
	return p.current
}

// ReplicationProtectableItemsListByReplicationProtectionContainersPager provides operations for iterating over paged responses.
type ReplicationProtectableItemsListByReplicationProtectionContainersPager struct {
	client    *ReplicationProtectableItemsClient
	current   ReplicationProtectableItemsListByReplicationProtectionContainersResponse
	err       error
	requester func(context.Context) (*policy.Request, error)
	advancer  func(context.Context, ReplicationProtectableItemsListByReplicationProtectionContainersResponse) (*policy.Request, error)
}

// Err returns the last error encountered while paging.
func (p *ReplicationProtectableItemsListByReplicationProtectionContainersPager) Err() error {
	return p.err
}

// NextPage returns true if the pager advanced to the next page.
// Returns false if there are no more pages or an error occurred.
func (p *ReplicationProtectableItemsListByReplicationProtectionContainersPager) NextPage(ctx context.Context) bool {
	var req *policy.Request
	var err error
	if !reflect.ValueOf(p.current).IsZero() {
		if p.current.ProtectableItemCollection.NextLink == nil || len(*p.current.ProtectableItemCollection.NextLink) == 0 {
			return false
		}
		req, err = p.advancer(ctx, p.current)
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		p.err = err
		return false
	}
	resp, err := p.client.pl.Do(req)
	if err != nil {
		p.err = err
		return false
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {
		p.err = p.client.listByReplicationProtectionContainersHandleError(resp)
		return false
	}
	result, err := p.client.listByReplicationProtectionContainersHandleResponse(resp)
	if err != nil {
		p.err = err
		return false
	}
	p.current = result
	return true
}

// PageResponse returns the current ReplicationProtectableItemsListByReplicationProtectionContainersResponse page.
func (p *ReplicationProtectableItemsListByReplicationProtectionContainersPager) PageResponse() ReplicationProtectableItemsListByReplicationProtectionContainersResponse {
	return p.current
}

// ReplicationProtectedItemsListByReplicationProtectionContainersPager provides operations for iterating over paged responses.
type ReplicationProtectedItemsListByReplicationProtectionContainersPager struct {
	client    *ReplicationProtectedItemsClient
	current   ReplicationProtectedItemsListByReplicationProtectionContainersResponse
	err       error
	requester func(context.Context) (*policy.Request, error)
	advancer  func(context.Context, ReplicationProtectedItemsListByReplicationProtectionContainersResponse) (*policy.Request, error)
}

// Err returns the last error encountered while paging.
func (p *ReplicationProtectedItemsListByReplicationProtectionContainersPager) Err() error {
	return p.err
}

// NextPage returns true if the pager advanced to the next page.
// Returns false if there are no more pages or an error occurred.
func (p *ReplicationProtectedItemsListByReplicationProtectionContainersPager) NextPage(ctx context.Context) bool {
	var req *policy.Request
	var err error
	if !reflect.ValueOf(p.current).IsZero() {
		if p.current.ReplicationProtectedItemCollection.NextLink == nil || len(*p.current.ReplicationProtectedItemCollection.NextLink) == 0 {
			return false
		}
		req, err = p.advancer(ctx, p.current)
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		p.err = err
		return false
	}
	resp, err := p.client.pl.Do(req)
	if err != nil {
		p.err = err
		return false
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {
		p.err = p.client.listByReplicationProtectionContainersHandleError(resp)
		return false
	}
	result, err := p.client.listByReplicationProtectionContainersHandleResponse(resp)
	if err != nil {
		p.err = err
		return false
	}
	p.current = result
	return true
}

// PageResponse returns the current ReplicationProtectedItemsListByReplicationProtectionContainersResponse page.
func (p *ReplicationProtectedItemsListByReplicationProtectionContainersPager) PageResponse() ReplicationProtectedItemsListByReplicationProtectionContainersResponse {
	return p.current
}

// ReplicationProtectedItemsListPager provides operations for iterating over paged responses.
type ReplicationProtectedItemsListPager struct {
	client    *ReplicationProtectedItemsClient
	current   ReplicationProtectedItemsListResponse
	err       error
	requester func(context.Context) (*policy.Request, error)
	advancer  func(context.Context, ReplicationProtectedItemsListResponse) (*policy.Request, error)
}

// Err returns the last error encountered while paging.
func (p *ReplicationProtectedItemsListPager) Err() error {
	return p.err
}

// NextPage returns true if the pager advanced to the next page.
// Returns false if there are no more pages or an error occurred.
func (p *ReplicationProtectedItemsListPager) NextPage(ctx context.Context) bool {
	var req *policy.Request
	var err error
	if !reflect.ValueOf(p.current).IsZero() {
		if p.current.ReplicationProtectedItemCollection.NextLink == nil || len(*p.current.ReplicationProtectedItemCollection.NextLink) == 0 {
			return false
		}
		req, err = p.advancer(ctx, p.current)
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		p.err = err
		return false
	}
	resp, err := p.client.pl.Do(req)
	if err != nil {
		p.err = err
		return false
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {
		p.err = p.client.listHandleError(resp)
		return false
	}
	result, err := p.client.listHandleResponse(resp)
	if err != nil {
		p.err = err
		return false
	}
	p.current = result
	return true
}

// PageResponse returns the current ReplicationProtectedItemsListResponse page.
func (p *ReplicationProtectedItemsListPager) PageResponse() ReplicationProtectedItemsListResponse {
	return p.current
}

// ReplicationProtectionContainerMappingsListByReplicationProtectionContainersPager provides operations for iterating over paged responses.
type ReplicationProtectionContainerMappingsListByReplicationProtectionContainersPager struct {
	client    *ReplicationProtectionContainerMappingsClient
	current   ReplicationProtectionContainerMappingsListByReplicationProtectionContainersResponse
	err       error
	requester func(context.Context) (*policy.Request, error)
	advancer  func(context.Context, ReplicationProtectionContainerMappingsListByReplicationProtectionContainersResponse) (*policy.Request, error)
}

// Err returns the last error encountered while paging.
func (p *ReplicationProtectionContainerMappingsListByReplicationProtectionContainersPager) Err() error {
	return p.err
}

// NextPage returns true if the pager advanced to the next page.
// Returns false if there are no more pages or an error occurred.
func (p *ReplicationProtectionContainerMappingsListByReplicationProtectionContainersPager) NextPage(ctx context.Context) bool {
	var req *policy.Request
	var err error
	if !reflect.ValueOf(p.current).IsZero() {
		if p.current.ProtectionContainerMappingCollection.NextLink == nil || len(*p.current.ProtectionContainerMappingCollection.NextLink) == 0 {
			return false
		}
		req, err = p.advancer(ctx, p.current)
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		p.err = err
		return false
	}
	resp, err := p.client.pl.Do(req)
	if err != nil {
		p.err = err
		return false
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {
		p.err = p.client.listByReplicationProtectionContainersHandleError(resp)
		return false
	}
	result, err := p.client.listByReplicationProtectionContainersHandleResponse(resp)
	if err != nil {
		p.err = err
		return false
	}
	p.current = result
	return true
}

// PageResponse returns the current ReplicationProtectionContainerMappingsListByReplicationProtectionContainersResponse page.
func (p *ReplicationProtectionContainerMappingsListByReplicationProtectionContainersPager) PageResponse() ReplicationProtectionContainerMappingsListByReplicationProtectionContainersResponse {
	return p.current
}

// ReplicationProtectionContainerMappingsListPager provides operations for iterating over paged responses.
type ReplicationProtectionContainerMappingsListPager struct {
	client    *ReplicationProtectionContainerMappingsClient
	current   ReplicationProtectionContainerMappingsListResponse
	err       error
	requester func(context.Context) (*policy.Request, error)
	advancer  func(context.Context, ReplicationProtectionContainerMappingsListResponse) (*policy.Request, error)
}

// Err returns the last error encountered while paging.
func (p *ReplicationProtectionContainerMappingsListPager) Err() error {
	return p.err
}

// NextPage returns true if the pager advanced to the next page.
// Returns false if there are no more pages or an error occurred.
func (p *ReplicationProtectionContainerMappingsListPager) NextPage(ctx context.Context) bool {
	var req *policy.Request
	var err error
	if !reflect.ValueOf(p.current).IsZero() {
		if p.current.ProtectionContainerMappingCollection.NextLink == nil || len(*p.current.ProtectionContainerMappingCollection.NextLink) == 0 {
			return false
		}
		req, err = p.advancer(ctx, p.current)
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		p.err = err
		return false
	}
	resp, err := p.client.pl.Do(req)
	if err != nil {
		p.err = err
		return false
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {
		p.err = p.client.listHandleError(resp)
		return false
	}
	result, err := p.client.listHandleResponse(resp)
	if err != nil {
		p.err = err
		return false
	}
	p.current = result
	return true
}

// PageResponse returns the current ReplicationProtectionContainerMappingsListResponse page.
func (p *ReplicationProtectionContainerMappingsListPager) PageResponse() ReplicationProtectionContainerMappingsListResponse {
	return p.current
}

// ReplicationProtectionContainersListByReplicationFabricsPager provides operations for iterating over paged responses.
type ReplicationProtectionContainersListByReplicationFabricsPager struct {
	client    *ReplicationProtectionContainersClient
	current   ReplicationProtectionContainersListByReplicationFabricsResponse
	err       error
	requester func(context.Context) (*policy.Request, error)
	advancer  func(context.Context, ReplicationProtectionContainersListByReplicationFabricsResponse) (*policy.Request, error)
}

// Err returns the last error encountered while paging.
func (p *ReplicationProtectionContainersListByReplicationFabricsPager) Err() error {
	return p.err
}

// NextPage returns true if the pager advanced to the next page.
// Returns false if there are no more pages or an error occurred.
func (p *ReplicationProtectionContainersListByReplicationFabricsPager) NextPage(ctx context.Context) bool {
	var req *policy.Request
	var err error
	if !reflect.ValueOf(p.current).IsZero() {
		if p.current.ProtectionContainerCollection.NextLink == nil || len(*p.current.ProtectionContainerCollection.NextLink) == 0 {
			return false
		}
		req, err = p.advancer(ctx, p.current)
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		p.err = err
		return false
	}
	resp, err := p.client.pl.Do(req)
	if err != nil {
		p.err = err
		return false
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {
		p.err = p.client.listByReplicationFabricsHandleError(resp)
		return false
	}
	result, err := p.client.listByReplicationFabricsHandleResponse(resp)
	if err != nil {
		p.err = err
		return false
	}
	p.current = result
	return true
}

// PageResponse returns the current ReplicationProtectionContainersListByReplicationFabricsResponse page.
func (p *ReplicationProtectionContainersListByReplicationFabricsPager) PageResponse() ReplicationProtectionContainersListByReplicationFabricsResponse {
	return p.current
}

// ReplicationProtectionContainersListPager provides operations for iterating over paged responses.
type ReplicationProtectionContainersListPager struct {
	client    *ReplicationProtectionContainersClient
	current   ReplicationProtectionContainersListResponse
	err       error
	requester func(context.Context) (*policy.Request, error)
	advancer  func(context.Context, ReplicationProtectionContainersListResponse) (*policy.Request, error)
}

// Err returns the last error encountered while paging.
func (p *ReplicationProtectionContainersListPager) Err() error {
	return p.err
}

// NextPage returns true if the pager advanced to the next page.
// Returns false if there are no more pages or an error occurred.
func (p *ReplicationProtectionContainersListPager) NextPage(ctx context.Context) bool {
	var req *policy.Request
	var err error
	if !reflect.ValueOf(p.current).IsZero() {
		if p.current.ProtectionContainerCollection.NextLink == nil || len(*p.current.ProtectionContainerCollection.NextLink) == 0 {
			return false
		}
		req, err = p.advancer(ctx, p.current)
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		p.err = err
		return false
	}
	resp, err := p.client.pl.Do(req)
	if err != nil {
		p.err = err
		return false
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {
		p.err = p.client.listHandleError(resp)
		return false
	}
	result, err := p.client.listHandleResponse(resp)
	if err != nil {
		p.err = err
		return false
	}
	p.current = result
	return true
}

// PageResponse returns the current ReplicationProtectionContainersListResponse page.
func (p *ReplicationProtectionContainersListPager) PageResponse() ReplicationProtectionContainersListResponse {
	return p.current
}

// ReplicationProtectionIntentsListPager provides operations for iterating over paged responses.
type ReplicationProtectionIntentsListPager struct {
	client    *ReplicationProtectionIntentsClient
	current   ReplicationProtectionIntentsListResponse
	err       error
	requester func(context.Context) (*policy.Request, error)
	advancer  func(context.Context, ReplicationProtectionIntentsListResponse) (*policy.Request, error)
}

// Err returns the last error encountered while paging.
func (p *ReplicationProtectionIntentsListPager) Err() error {
	return p.err
}

// NextPage returns true if the pager advanced to the next page.
// Returns false if there are no more pages or an error occurred.
func (p *ReplicationProtectionIntentsListPager) NextPage(ctx context.Context) bool {
	var req *policy.Request
	var err error
	if !reflect.ValueOf(p.current).IsZero() {
		if p.current.ReplicationProtectionIntentCollection.NextLink == nil || len(*p.current.ReplicationProtectionIntentCollection.NextLink) == 0 {
			return false
		}
		req, err = p.advancer(ctx, p.current)
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		p.err = err
		return false
	}
	resp, err := p.client.pl.Do(req)
	if err != nil {
		p.err = err
		return false
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {
		p.err = p.client.listHandleError(resp)
		return false
	}
	result, err := p.client.listHandleResponse(resp)
	if err != nil {
		p.err = err
		return false
	}
	p.current = result
	return true
}

// PageResponse returns the current ReplicationProtectionIntentsListResponse page.
func (p *ReplicationProtectionIntentsListPager) PageResponse() ReplicationProtectionIntentsListResponse {
	return p.current
}

// ReplicationRecoveryPlansListPager provides operations for iterating over paged responses.
type ReplicationRecoveryPlansListPager struct {
	client    *ReplicationRecoveryPlansClient
	current   ReplicationRecoveryPlansListResponse
	err       error
	requester func(context.Context) (*policy.Request, error)
	advancer  func(context.Context, ReplicationRecoveryPlansListResponse) (*policy.Request, error)
}

// Err returns the last error encountered while paging.
func (p *ReplicationRecoveryPlansListPager) Err() error {
	return p.err
}

// NextPage returns true if the pager advanced to the next page.
// Returns false if there are no more pages or an error occurred.
func (p *ReplicationRecoveryPlansListPager) NextPage(ctx context.Context) bool {
	var req *policy.Request
	var err error
	if !reflect.ValueOf(p.current).IsZero() {
		if p.current.RecoveryPlanCollection.NextLink == nil || len(*p.current.RecoveryPlanCollection.NextLink) == 0 {
			return false
		}
		req, err = p.advancer(ctx, p.current)
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		p.err = err
		return false
	}
	resp, err := p.client.pl.Do(req)
	if err != nil {
		p.err = err
		return false
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {
		p.err = p.client.listHandleError(resp)
		return false
	}
	result, err := p.client.listHandleResponse(resp)
	if err != nil {
		p.err = err
		return false
	}
	p.current = result
	return true
}

// PageResponse returns the current ReplicationRecoveryPlansListResponse page.
func (p *ReplicationRecoveryPlansListPager) PageResponse() ReplicationRecoveryPlansListResponse {
	return p.current
}

// ReplicationRecoveryServicesProvidersListByReplicationFabricsPager provides operations for iterating over paged responses.
type ReplicationRecoveryServicesProvidersListByReplicationFabricsPager struct {
	client    *ReplicationRecoveryServicesProvidersClient
	current   ReplicationRecoveryServicesProvidersListByReplicationFabricsResponse
	err       error
	requester func(context.Context) (*policy.Request, error)
	advancer  func(context.Context, ReplicationRecoveryServicesProvidersListByReplicationFabricsResponse) (*policy.Request, error)
}

// Err returns the last error encountered while paging.
func (p *ReplicationRecoveryServicesProvidersListByReplicationFabricsPager) Err() error {
	return p.err
}

// NextPage returns true if the pager advanced to the next page.
// Returns false if there are no more pages or an error occurred.
func (p *ReplicationRecoveryServicesProvidersListByReplicationFabricsPager) NextPage(ctx context.Context) bool {
	var req *policy.Request
	var err error
	if !reflect.ValueOf(p.current).IsZero() {
		if p.current.RecoveryServicesProviderCollection.NextLink == nil || len(*p.current.RecoveryServicesProviderCollection.NextLink) == 0 {
			return false
		}
		req, err = p.advancer(ctx, p.current)
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		p.err = err
		return false
	}
	resp, err := p.client.pl.Do(req)
	if err != nil {
		p.err = err
		return false
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {
		p.err = p.client.listByReplicationFabricsHandleError(resp)
		return false
	}
	result, err := p.client.listByReplicationFabricsHandleResponse(resp)
	if err != nil {
		p.err = err
		return false
	}
	p.current = result
	return true
}

// PageResponse returns the current ReplicationRecoveryServicesProvidersListByReplicationFabricsResponse page.
func (p *ReplicationRecoveryServicesProvidersListByReplicationFabricsPager) PageResponse() ReplicationRecoveryServicesProvidersListByReplicationFabricsResponse {
	return p.current
}

// ReplicationRecoveryServicesProvidersListPager provides operations for iterating over paged responses.
type ReplicationRecoveryServicesProvidersListPager struct {
	client    *ReplicationRecoveryServicesProvidersClient
	current   ReplicationRecoveryServicesProvidersListResponse
	err       error
	requester func(context.Context) (*policy.Request, error)
	advancer  func(context.Context, ReplicationRecoveryServicesProvidersListResponse) (*policy.Request, error)
}

// Err returns the last error encountered while paging.
func (p *ReplicationRecoveryServicesProvidersListPager) Err() error {
	return p.err
}

// NextPage returns true if the pager advanced to the next page.
// Returns false if there are no more pages or an error occurred.
func (p *ReplicationRecoveryServicesProvidersListPager) NextPage(ctx context.Context) bool {
	var req *policy.Request
	var err error
	if !reflect.ValueOf(p.current).IsZero() {
		if p.current.RecoveryServicesProviderCollection.NextLink == nil || len(*p.current.RecoveryServicesProviderCollection.NextLink) == 0 {
			return false
		}
		req, err = p.advancer(ctx, p.current)
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		p.err = err
		return false
	}
	resp, err := p.client.pl.Do(req)
	if err != nil {
		p.err = err
		return false
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {
		p.err = p.client.listHandleError(resp)
		return false
	}
	result, err := p.client.listHandleResponse(resp)
	if err != nil {
		p.err = err
		return false
	}
	p.current = result
	return true
}

// PageResponse returns the current ReplicationRecoveryServicesProvidersListResponse page.
func (p *ReplicationRecoveryServicesProvidersListPager) PageResponse() ReplicationRecoveryServicesProvidersListResponse {
	return p.current
}

// ReplicationStorageClassificationMappingsListByReplicationStorageClassificationsPager provides operations for iterating over paged responses.
type ReplicationStorageClassificationMappingsListByReplicationStorageClassificationsPager struct {
	client    *ReplicationStorageClassificationMappingsClient
	current   ReplicationStorageClassificationMappingsListByReplicationStorageClassificationsResponse
	err       error
	requester func(context.Context) (*policy.Request, error)
	advancer  func(context.Context, ReplicationStorageClassificationMappingsListByReplicationStorageClassificationsResponse) (*policy.Request, error)
}

// Err returns the last error encountered while paging.
func (p *ReplicationStorageClassificationMappingsListByReplicationStorageClassificationsPager) Err() error {
	return p.err
}

// NextPage returns true if the pager advanced to the next page.
// Returns false if there are no more pages or an error occurred.
func (p *ReplicationStorageClassificationMappingsListByReplicationStorageClassificationsPager) NextPage(ctx context.Context) bool {
	var req *policy.Request
	var err error
	if !reflect.ValueOf(p.current).IsZero() {
		if p.current.StorageClassificationMappingCollection.NextLink == nil || len(*p.current.StorageClassificationMappingCollection.NextLink) == 0 {
			return false
		}
		req, err = p.advancer(ctx, p.current)
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		p.err = err
		return false
	}
	resp, err := p.client.pl.Do(req)
	if err != nil {
		p.err = err
		return false
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {
		p.err = p.client.listByReplicationStorageClassificationsHandleError(resp)
		return false
	}
	result, err := p.client.listByReplicationStorageClassificationsHandleResponse(resp)
	if err != nil {
		p.err = err
		return false
	}
	p.current = result
	return true
}

// PageResponse returns the current ReplicationStorageClassificationMappingsListByReplicationStorageClassificationsResponse page.
func (p *ReplicationStorageClassificationMappingsListByReplicationStorageClassificationsPager) PageResponse() ReplicationStorageClassificationMappingsListByReplicationStorageClassificationsResponse {
	return p.current
}

// ReplicationStorageClassificationMappingsListPager provides operations for iterating over paged responses.
type ReplicationStorageClassificationMappingsListPager struct {
	client    *ReplicationStorageClassificationMappingsClient
	current   ReplicationStorageClassificationMappingsListResponse
	err       error
	requester func(context.Context) (*policy.Request, error)
	advancer  func(context.Context, ReplicationStorageClassificationMappingsListResponse) (*policy.Request, error)
}

// Err returns the last error encountered while paging.
func (p *ReplicationStorageClassificationMappingsListPager) Err() error {
	return p.err
}

// NextPage returns true if the pager advanced to the next page.
// Returns false if there are no more pages or an error occurred.
func (p *ReplicationStorageClassificationMappingsListPager) NextPage(ctx context.Context) bool {
	var req *policy.Request
	var err error
	if !reflect.ValueOf(p.current).IsZero() {
		if p.current.StorageClassificationMappingCollection.NextLink == nil || len(*p.current.StorageClassificationMappingCollection.NextLink) == 0 {
			return false
		}
		req, err = p.advancer(ctx, p.current)
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		p.err = err
		return false
	}
	resp, err := p.client.pl.Do(req)
	if err != nil {
		p.err = err
		return false
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {
		p.err = p.client.listHandleError(resp)
		return false
	}
	result, err := p.client.listHandleResponse(resp)
	if err != nil {
		p.err = err
		return false
	}
	p.current = result
	return true
}

// PageResponse returns the current ReplicationStorageClassificationMappingsListResponse page.
func (p *ReplicationStorageClassificationMappingsListPager) PageResponse() ReplicationStorageClassificationMappingsListResponse {
	return p.current
}

// ReplicationStorageClassificationsListByReplicationFabricsPager provides operations for iterating over paged responses.
type ReplicationStorageClassificationsListByReplicationFabricsPager struct {
	client    *ReplicationStorageClassificationsClient
	current   ReplicationStorageClassificationsListByReplicationFabricsResponse
	err       error
	requester func(context.Context) (*policy.Request, error)
	advancer  func(context.Context, ReplicationStorageClassificationsListByReplicationFabricsResponse) (*policy.Request, error)
}

// Err returns the last error encountered while paging.
func (p *ReplicationStorageClassificationsListByReplicationFabricsPager) Err() error {
	return p.err
}

// NextPage returns true if the pager advanced to the next page.
// Returns false if there are no more pages or an error occurred.
func (p *ReplicationStorageClassificationsListByReplicationFabricsPager) NextPage(ctx context.Context) bool {
	var req *policy.Request
	var err error
	if !reflect.ValueOf(p.current).IsZero() {
		if p.current.StorageClassificationCollection.NextLink == nil || len(*p.current.StorageClassificationCollection.NextLink) == 0 {
			return false
		}
		req, err = p.advancer(ctx, p.current)
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		p.err = err
		return false
	}
	resp, err := p.client.pl.Do(req)
	if err != nil {
		p.err = err
		return false
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {
		p.err = p.client.listByReplicationFabricsHandleError(resp)
		return false
	}
	result, err := p.client.listByReplicationFabricsHandleResponse(resp)
	if err != nil {
		p.err = err
		return false
	}
	p.current = result
	return true
}

// PageResponse returns the current ReplicationStorageClassificationsListByReplicationFabricsResponse page.
func (p *ReplicationStorageClassificationsListByReplicationFabricsPager) PageResponse() ReplicationStorageClassificationsListByReplicationFabricsResponse {
	return p.current
}

// ReplicationStorageClassificationsListPager provides operations for iterating over paged responses.
type ReplicationStorageClassificationsListPager struct {
	client    *ReplicationStorageClassificationsClient
	current   ReplicationStorageClassificationsListResponse
	err       error
	requester func(context.Context) (*policy.Request, error)
	advancer  func(context.Context, ReplicationStorageClassificationsListResponse) (*policy.Request, error)
}

// Err returns the last error encountered while paging.
func (p *ReplicationStorageClassificationsListPager) Err() error {
	return p.err
}

// NextPage returns true if the pager advanced to the next page.
// Returns false if there are no more pages or an error occurred.
func (p *ReplicationStorageClassificationsListPager) NextPage(ctx context.Context) bool {
	var req *policy.Request
	var err error
	if !reflect.ValueOf(p.current).IsZero() {
		if p.current.StorageClassificationCollection.NextLink == nil || len(*p.current.StorageClassificationCollection.NextLink) == 0 {
			return false
		}
		req, err = p.advancer(ctx, p.current)
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		p.err = err
		return false
	}
	resp, err := p.client.pl.Do(req)
	if err != nil {
		p.err = err
		return false
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {
		p.err = p.client.listHandleError(resp)
		return false
	}
	result, err := p.client.listHandleResponse(resp)
	if err != nil {
		p.err = err
		return false
	}
	p.current = result
	return true
}

// PageResponse returns the current ReplicationStorageClassificationsListResponse page.
func (p *ReplicationStorageClassificationsListPager) PageResponse() ReplicationStorageClassificationsListResponse {
	return p.current
}

// ReplicationVaultSettingListPager provides operations for iterating over paged responses.
type ReplicationVaultSettingListPager struct {
	client    *ReplicationVaultSettingClient
	current   ReplicationVaultSettingListResponse
	err       error
	requester func(context.Context) (*policy.Request, error)
	advancer  func(context.Context, ReplicationVaultSettingListResponse) (*policy.Request, error)
}

// Err returns the last error encountered while paging.
func (p *ReplicationVaultSettingListPager) Err() error {
	return p.err
}

// NextPage returns true if the pager advanced to the next page.
// Returns false if there are no more pages or an error occurred.
func (p *ReplicationVaultSettingListPager) NextPage(ctx context.Context) bool {
	var req *policy.Request
	var err error
	if !reflect.ValueOf(p.current).IsZero() {
		if p.current.VaultSettingCollection.NextLink == nil || len(*p.current.VaultSettingCollection.NextLink) == 0 {
			return false
		}
		req, err = p.advancer(ctx, p.current)
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		p.err = err
		return false
	}
	resp, err := p.client.pl.Do(req)
	if err != nil {
		p.err = err
		return false
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {
		p.err = p.client.listHandleError(resp)
		return false
	}
	result, err := p.client.listHandleResponse(resp)
	if err != nil {
		p.err = err
		return false
	}
	p.current = result
	return true
}

// PageResponse returns the current ReplicationVaultSettingListResponse page.
func (p *ReplicationVaultSettingListPager) PageResponse() ReplicationVaultSettingListResponse {
	return p.current
}

// ReplicationvCentersListByReplicationFabricsPager provides operations for iterating over paged responses.
type ReplicationvCentersListByReplicationFabricsPager struct {
	client    *ReplicationvCentersClient
	current   ReplicationvCentersListByReplicationFabricsResponse
	err       error
	requester func(context.Context) (*policy.Request, error)
	advancer  func(context.Context, ReplicationvCentersListByReplicationFabricsResponse) (*policy.Request, error)
}

// Err returns the last error encountered while paging.
func (p *ReplicationvCentersListByReplicationFabricsPager) Err() error {
	return p.err
}

// NextPage returns true if the pager advanced to the next page.
// Returns false if there are no more pages or an error occurred.
func (p *ReplicationvCentersListByReplicationFabricsPager) NextPage(ctx context.Context) bool {
	var req *policy.Request
	var err error
	if !reflect.ValueOf(p.current).IsZero() {
		if p.current.VCenterCollection.NextLink == nil || len(*p.current.VCenterCollection.NextLink) == 0 {
			return false
		}
		req, err = p.advancer(ctx, p.current)
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		p.err = err
		return false
	}
	resp, err := p.client.pl.Do(req)
	if err != nil {
		p.err = err
		return false
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {
		p.err = p.client.listByReplicationFabricsHandleError(resp)
		return false
	}
	result, err := p.client.listByReplicationFabricsHandleResponse(resp)
	if err != nil {
		p.err = err
		return false
	}
	p.current = result
	return true
}

// PageResponse returns the current ReplicationvCentersListByReplicationFabricsResponse page.
func (p *ReplicationvCentersListByReplicationFabricsPager) PageResponse() ReplicationvCentersListByReplicationFabricsResponse {
	return p.current
}

// ReplicationvCentersListPager provides operations for iterating over paged responses.
type ReplicationvCentersListPager struct {
	client    *ReplicationvCentersClient
	current   ReplicationvCentersListResponse
	err       error
	requester func(context.Context) (*policy.Request, error)
	advancer  func(context.Context, ReplicationvCentersListResponse) (*policy.Request, error)
}

// Err returns the last error encountered while paging.
func (p *ReplicationvCentersListPager) Err() error {
	return p.err
}

// NextPage returns true if the pager advanced to the next page.
// Returns false if there are no more pages or an error occurred.
func (p *ReplicationvCentersListPager) NextPage(ctx context.Context) bool {
	var req *policy.Request
	var err error
	if !reflect.ValueOf(p.current).IsZero() {
		if p.current.VCenterCollection.NextLink == nil || len(*p.current.VCenterCollection.NextLink) == 0 {
			return false
		}
		req, err = p.advancer(ctx, p.current)
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		p.err = err
		return false
	}
	resp, err := p.client.pl.Do(req)
	if err != nil {
		p.err = err
		return false
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {
		p.err = p.client.listHandleError(resp)
		return false
	}
	result, err := p.client.listHandleResponse(resp)
	if err != nil {
		p.err = err
		return false
	}
	p.current = result
	return true
}

// PageResponse returns the current ReplicationvCentersListResponse page.
func (p *ReplicationvCentersListPager) PageResponse() ReplicationvCentersListResponse {
	return p.current
}

// TargetComputeSizesListByReplicationProtectedItemsPager provides operations for iterating over paged responses.
type TargetComputeSizesListByReplicationProtectedItemsPager struct {
	client    *TargetComputeSizesClient
	current   TargetComputeSizesListByReplicationProtectedItemsResponse
	err       error
	requester func(context.Context) (*policy.Request, error)
	advancer  func(context.Context, TargetComputeSizesListByReplicationProtectedItemsResponse) (*policy.Request, error)
}

// Err returns the last error encountered while paging.
func (p *TargetComputeSizesListByReplicationProtectedItemsPager) Err() error {
	return p.err
}

// NextPage returns true if the pager advanced to the next page.
// Returns false if there are no more pages or an error occurred.
func (p *TargetComputeSizesListByReplicationProtectedItemsPager) NextPage(ctx context.Context) bool {
	var req *policy.Request
	var err error
	if !reflect.ValueOf(p.current).IsZero() {
		if p.current.TargetComputeSizeCollection.NextLink == nil || len(*p.current.TargetComputeSizeCollection.NextLink) == 0 {
			return false
		}
		req, err = p.advancer(ctx, p.current)
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		p.err = err
		return false
	}
	resp, err := p.client.pl.Do(req)
	if err != nil {
		p.err = err
		return false
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {
		p.err = p.client.listByReplicationProtectedItemsHandleError(resp)
		return false
	}
	result, err := p.client.listByReplicationProtectedItemsHandleResponse(resp)
	if err != nil {
		p.err = err
		return false
	}
	p.current = result
	return true
}

// PageResponse returns the current TargetComputeSizesListByReplicationProtectedItemsResponse page.
func (p *TargetComputeSizesListByReplicationProtectedItemsPager) PageResponse() TargetComputeSizesListByReplicationProtectedItemsResponse {
	return p.current
}
