//go:build go1.16
// +build go1.16

// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

package armrecoveryservicessiterecovery

import (
	"context"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore"
	"net/http"
)

// ReplicationFabricsClientCheckConsistencyPoller provides polling facilities until the operation reaches a terminal state.
type ReplicationFabricsClientCheckConsistencyPoller struct {
	pt *azcore.Poller
}

// Done returns true if the LRO has reached a terminal state.
func (p *ReplicationFabricsClientCheckConsistencyPoller) Done() bool {
	return p.pt.Done()
}

// Poll fetches the latest state of the LRO.  It returns an HTTP response or error.
// If the LRO has completed successfully, the poller's state is updated and the HTTP
// response is returned.
// If the LRO has completed with failure or was cancelled, the poller's state is
// updated and the error is returned.
// If the LRO has not reached a terminal state, the poller's state is updated and
// the latest HTTP response is returned.
// If Poll fails, the poller's state is unmodified and the error is returned.
// Calling Poll on an LRO that has reached a terminal state will return the final
// HTTP response or error.
func (p *ReplicationFabricsClientCheckConsistencyPoller) Poll(ctx context.Context) (*http.Response, error) {
	return p.pt.Poll(ctx)
}

// FinalResponse performs a final GET to the service and returns the final response
// for the polling operation. If there is an error performing the final GET then an error is returned.
// If the final GET succeeded then the final ReplicationFabricsClientCheckConsistencyResponse will be returned.
func (p *ReplicationFabricsClientCheckConsistencyPoller) FinalResponse(ctx context.Context) (ReplicationFabricsClientCheckConsistencyResponse, error) {
	respType := ReplicationFabricsClientCheckConsistencyResponse{}
	resp, err := p.pt.FinalResponse(ctx, &respType.Fabric)
	if err != nil {
		return ReplicationFabricsClientCheckConsistencyResponse{}, err
	}
	respType.RawResponse = resp
	return respType, nil
}

// ResumeToken returns a value representing the poller that can be used to resume
// the LRO at a later time. ResumeTokens are unique per service operation.
func (p *ReplicationFabricsClientCheckConsistencyPoller) ResumeToken() (string, error) {
	return p.pt.ResumeToken()
}

// ReplicationFabricsClientCreatePoller provides polling facilities until the operation reaches a terminal state.
type ReplicationFabricsClientCreatePoller struct {
	pt *azcore.Poller
}

// Done returns true if the LRO has reached a terminal state.
func (p *ReplicationFabricsClientCreatePoller) Done() bool {
	return p.pt.Done()
}

// Poll fetches the latest state of the LRO.  It returns an HTTP response or error.
// If the LRO has completed successfully, the poller's state is updated and the HTTP
// response is returned.
// If the LRO has completed with failure or was cancelled, the poller's state is
// updated and the error is returned.
// If the LRO has not reached a terminal state, the poller's state is updated and
// the latest HTTP response is returned.
// If Poll fails, the poller's state is unmodified and the error is returned.
// Calling Poll on an LRO that has reached a terminal state will return the final
// HTTP response or error.
func (p *ReplicationFabricsClientCreatePoller) Poll(ctx context.Context) (*http.Response, error) {
	return p.pt.Poll(ctx)
}

// FinalResponse performs a final GET to the service and returns the final response
// for the polling operation. If there is an error performing the final GET then an error is returned.
// If the final GET succeeded then the final ReplicationFabricsClientCreateResponse will be returned.
func (p *ReplicationFabricsClientCreatePoller) FinalResponse(ctx context.Context) (ReplicationFabricsClientCreateResponse, error) {
	respType := ReplicationFabricsClientCreateResponse{}
	resp, err := p.pt.FinalResponse(ctx, &respType.Fabric)
	if err != nil {
		return ReplicationFabricsClientCreateResponse{}, err
	}
	respType.RawResponse = resp
	return respType, nil
}

// ResumeToken returns a value representing the poller that can be used to resume
// the LRO at a later time. ResumeTokens are unique per service operation.
func (p *ReplicationFabricsClientCreatePoller) ResumeToken() (string, error) {
	return p.pt.ResumeToken()
}

// ReplicationFabricsClientDeletePoller provides polling facilities until the operation reaches a terminal state.
type ReplicationFabricsClientDeletePoller struct {
	pt *azcore.Poller
}

// Done returns true if the LRO has reached a terminal state.
func (p *ReplicationFabricsClientDeletePoller) Done() bool {
	return p.pt.Done()
}

// Poll fetches the latest state of the LRO.  It returns an HTTP response or error.
// If the LRO has completed successfully, the poller's state is updated and the HTTP
// response is returned.
// If the LRO has completed with failure or was cancelled, the poller's state is
// updated and the error is returned.
// If the LRO has not reached a terminal state, the poller's state is updated and
// the latest HTTP response is returned.
// If Poll fails, the poller's state is unmodified and the error is returned.
// Calling Poll on an LRO that has reached a terminal state will return the final
// HTTP response or error.
func (p *ReplicationFabricsClientDeletePoller) Poll(ctx context.Context) (*http.Response, error) {
	return p.pt.Poll(ctx)
}

// FinalResponse performs a final GET to the service and returns the final response
// for the polling operation. If there is an error performing the final GET then an error is returned.
// If the final GET succeeded then the final ReplicationFabricsClientDeleteResponse will be returned.
func (p *ReplicationFabricsClientDeletePoller) FinalResponse(ctx context.Context) (ReplicationFabricsClientDeleteResponse, error) {
	respType := ReplicationFabricsClientDeleteResponse{}
	resp, err := p.pt.FinalResponse(ctx, nil)
	if err != nil {
		return ReplicationFabricsClientDeleteResponse{}, err
	}
	respType.RawResponse = resp
	return respType, nil
}

// ResumeToken returns a value representing the poller that can be used to resume
// the LRO at a later time. ResumeTokens are unique per service operation.
func (p *ReplicationFabricsClientDeletePoller) ResumeToken() (string, error) {
	return p.pt.ResumeToken()
}

// ReplicationFabricsClientMigrateToAADPoller provides polling facilities until the operation reaches a terminal state.
type ReplicationFabricsClientMigrateToAADPoller struct {
	pt *azcore.Poller
}

// Done returns true if the LRO has reached a terminal state.
func (p *ReplicationFabricsClientMigrateToAADPoller) Done() bool {
	return p.pt.Done()
}

// Poll fetches the latest state of the LRO.  It returns an HTTP response or error.
// If the LRO has completed successfully, the poller's state is updated and the HTTP
// response is returned.
// If the LRO has completed with failure or was cancelled, the poller's state is
// updated and the error is returned.
// If the LRO has not reached a terminal state, the poller's state is updated and
// the latest HTTP response is returned.
// If Poll fails, the poller's state is unmodified and the error is returned.
// Calling Poll on an LRO that has reached a terminal state will return the final
// HTTP response or error.
func (p *ReplicationFabricsClientMigrateToAADPoller) Poll(ctx context.Context) (*http.Response, error) {
	return p.pt.Poll(ctx)
}

// FinalResponse performs a final GET to the service and returns the final response
// for the polling operation. If there is an error performing the final GET then an error is returned.
// If the final GET succeeded then the final ReplicationFabricsClientMigrateToAADResponse will be returned.
func (p *ReplicationFabricsClientMigrateToAADPoller) FinalResponse(ctx context.Context) (ReplicationFabricsClientMigrateToAADResponse, error) {
	respType := ReplicationFabricsClientMigrateToAADResponse{}
	resp, err := p.pt.FinalResponse(ctx, nil)
	if err != nil {
		return ReplicationFabricsClientMigrateToAADResponse{}, err
	}
	respType.RawResponse = resp
	return respType, nil
}

// ResumeToken returns a value representing the poller that can be used to resume
// the LRO at a later time. ResumeTokens are unique per service operation.
func (p *ReplicationFabricsClientMigrateToAADPoller) ResumeToken() (string, error) {
	return p.pt.ResumeToken()
}

// ReplicationFabricsClientPurgePoller provides polling facilities until the operation reaches a terminal state.
type ReplicationFabricsClientPurgePoller struct {
	pt *azcore.Poller
}

// Done returns true if the LRO has reached a terminal state.
func (p *ReplicationFabricsClientPurgePoller) Done() bool {
	return p.pt.Done()
}

// Poll fetches the latest state of the LRO.  It returns an HTTP response or error.
// If the LRO has completed successfully, the poller's state is updated and the HTTP
// response is returned.
// If the LRO has completed with failure or was cancelled, the poller's state is
// updated and the error is returned.
// If the LRO has not reached a terminal state, the poller's state is updated and
// the latest HTTP response is returned.
// If Poll fails, the poller's state is unmodified and the error is returned.
// Calling Poll on an LRO that has reached a terminal state will return the final
// HTTP response or error.
func (p *ReplicationFabricsClientPurgePoller) Poll(ctx context.Context) (*http.Response, error) {
	return p.pt.Poll(ctx)
}

// FinalResponse performs a final GET to the service and returns the final response
// for the polling operation. If there is an error performing the final GET then an error is returned.
// If the final GET succeeded then the final ReplicationFabricsClientPurgeResponse will be returned.
func (p *ReplicationFabricsClientPurgePoller) FinalResponse(ctx context.Context) (ReplicationFabricsClientPurgeResponse, error) {
	respType := ReplicationFabricsClientPurgeResponse{}
	resp, err := p.pt.FinalResponse(ctx, nil)
	if err != nil {
		return ReplicationFabricsClientPurgeResponse{}, err
	}
	respType.RawResponse = resp
	return respType, nil
}

// ResumeToken returns a value representing the poller that can be used to resume
// the LRO at a later time. ResumeTokens are unique per service operation.
func (p *ReplicationFabricsClientPurgePoller) ResumeToken() (string, error) {
	return p.pt.ResumeToken()
}

// ReplicationFabricsClientReassociateGatewayPoller provides polling facilities until the operation reaches a terminal state.
type ReplicationFabricsClientReassociateGatewayPoller struct {
	pt *azcore.Poller
}

// Done returns true if the LRO has reached a terminal state.
func (p *ReplicationFabricsClientReassociateGatewayPoller) Done() bool {
	return p.pt.Done()
}

// Poll fetches the latest state of the LRO.  It returns an HTTP response or error.
// If the LRO has completed successfully, the poller's state is updated and the HTTP
// response is returned.
// If the LRO has completed with failure or was cancelled, the poller's state is
// updated and the error is returned.
// If the LRO has not reached a terminal state, the poller's state is updated and
// the latest HTTP response is returned.
// If Poll fails, the poller's state is unmodified and the error is returned.
// Calling Poll on an LRO that has reached a terminal state will return the final
// HTTP response or error.
func (p *ReplicationFabricsClientReassociateGatewayPoller) Poll(ctx context.Context) (*http.Response, error) {
	return p.pt.Poll(ctx)
}

// FinalResponse performs a final GET to the service and returns the final response
// for the polling operation. If there is an error performing the final GET then an error is returned.
// If the final GET succeeded then the final ReplicationFabricsClientReassociateGatewayResponse will be returned.
func (p *ReplicationFabricsClientReassociateGatewayPoller) FinalResponse(ctx context.Context) (ReplicationFabricsClientReassociateGatewayResponse, error) {
	respType := ReplicationFabricsClientReassociateGatewayResponse{}
	resp, err := p.pt.FinalResponse(ctx, &respType.Fabric)
	if err != nil {
		return ReplicationFabricsClientReassociateGatewayResponse{}, err
	}
	respType.RawResponse = resp
	return respType, nil
}

// ResumeToken returns a value representing the poller that can be used to resume
// the LRO at a later time. ResumeTokens are unique per service operation.
func (p *ReplicationFabricsClientReassociateGatewayPoller) ResumeToken() (string, error) {
	return p.pt.ResumeToken()
}

// ReplicationFabricsClientRenewCertificatePoller provides polling facilities until the operation reaches a terminal state.
type ReplicationFabricsClientRenewCertificatePoller struct {
	pt *azcore.Poller
}

// Done returns true if the LRO has reached a terminal state.
func (p *ReplicationFabricsClientRenewCertificatePoller) Done() bool {
	return p.pt.Done()
}

// Poll fetches the latest state of the LRO.  It returns an HTTP response or error.
// If the LRO has completed successfully, the poller's state is updated and the HTTP
// response is returned.
// If the LRO has completed with failure or was cancelled, the poller's state is
// updated and the error is returned.
// If the LRO has not reached a terminal state, the poller's state is updated and
// the latest HTTP response is returned.
// If Poll fails, the poller's state is unmodified and the error is returned.
// Calling Poll on an LRO that has reached a terminal state will return the final
// HTTP response or error.
func (p *ReplicationFabricsClientRenewCertificatePoller) Poll(ctx context.Context) (*http.Response, error) {
	return p.pt.Poll(ctx)
}

// FinalResponse performs a final GET to the service and returns the final response
// for the polling operation. If there is an error performing the final GET then an error is returned.
// If the final GET succeeded then the final ReplicationFabricsClientRenewCertificateResponse will be returned.
func (p *ReplicationFabricsClientRenewCertificatePoller) FinalResponse(ctx context.Context) (ReplicationFabricsClientRenewCertificateResponse, error) {
	respType := ReplicationFabricsClientRenewCertificateResponse{}
	resp, err := p.pt.FinalResponse(ctx, &respType.Fabric)
	if err != nil {
		return ReplicationFabricsClientRenewCertificateResponse{}, err
	}
	respType.RawResponse = resp
	return respType, nil
}

// ResumeToken returns a value representing the poller that can be used to resume
// the LRO at a later time. ResumeTokens are unique per service operation.
func (p *ReplicationFabricsClientRenewCertificatePoller) ResumeToken() (string, error) {
	return p.pt.ResumeToken()
}

// ReplicationJobsClientCancelPoller provides polling facilities until the operation reaches a terminal state.
type ReplicationJobsClientCancelPoller struct {
	pt *azcore.Poller
}

// Done returns true if the LRO has reached a terminal state.
func (p *ReplicationJobsClientCancelPoller) Done() bool {
	return p.pt.Done()
}

// Poll fetches the latest state of the LRO.  It returns an HTTP response or error.
// If the LRO has completed successfully, the poller's state is updated and the HTTP
// response is returned.
// If the LRO has completed with failure or was cancelled, the poller's state is
// updated and the error is returned.
// If the LRO has not reached a terminal state, the poller's state is updated and
// the latest HTTP response is returned.
// If Poll fails, the poller's state is unmodified and the error is returned.
// Calling Poll on an LRO that has reached a terminal state will return the final
// HTTP response or error.
func (p *ReplicationJobsClientCancelPoller) Poll(ctx context.Context) (*http.Response, error) {
	return p.pt.Poll(ctx)
}

// FinalResponse performs a final GET to the service and returns the final response
// for the polling operation. If there is an error performing the final GET then an error is returned.
// If the final GET succeeded then the final ReplicationJobsClientCancelResponse will be returned.
func (p *ReplicationJobsClientCancelPoller) FinalResponse(ctx context.Context) (ReplicationJobsClientCancelResponse, error) {
	respType := ReplicationJobsClientCancelResponse{}
	resp, err := p.pt.FinalResponse(ctx, &respType.Job)
	if err != nil {
		return ReplicationJobsClientCancelResponse{}, err
	}
	respType.RawResponse = resp
	return respType, nil
}

// ResumeToken returns a value representing the poller that can be used to resume
// the LRO at a later time. ResumeTokens are unique per service operation.
func (p *ReplicationJobsClientCancelPoller) ResumeToken() (string, error) {
	return p.pt.ResumeToken()
}

// ReplicationJobsClientExportPoller provides polling facilities until the operation reaches a terminal state.
type ReplicationJobsClientExportPoller struct {
	pt *azcore.Poller
}

// Done returns true if the LRO has reached a terminal state.
func (p *ReplicationJobsClientExportPoller) Done() bool {
	return p.pt.Done()
}

// Poll fetches the latest state of the LRO.  It returns an HTTP response or error.
// If the LRO has completed successfully, the poller's state is updated and the HTTP
// response is returned.
// If the LRO has completed with failure or was cancelled, the poller's state is
// updated and the error is returned.
// If the LRO has not reached a terminal state, the poller's state is updated and
// the latest HTTP response is returned.
// If Poll fails, the poller's state is unmodified and the error is returned.
// Calling Poll on an LRO that has reached a terminal state will return the final
// HTTP response or error.
func (p *ReplicationJobsClientExportPoller) Poll(ctx context.Context) (*http.Response, error) {
	return p.pt.Poll(ctx)
}

// FinalResponse performs a final GET to the service and returns the final response
// for the polling operation. If there is an error performing the final GET then an error is returned.
// If the final GET succeeded then the final ReplicationJobsClientExportResponse will be returned.
func (p *ReplicationJobsClientExportPoller) FinalResponse(ctx context.Context) (ReplicationJobsClientExportResponse, error) {
	respType := ReplicationJobsClientExportResponse{}
	resp, err := p.pt.FinalResponse(ctx, &respType.Job)
	if err != nil {
		return ReplicationJobsClientExportResponse{}, err
	}
	respType.RawResponse = resp
	return respType, nil
}

// ResumeToken returns a value representing the poller that can be used to resume
// the LRO at a later time. ResumeTokens are unique per service operation.
func (p *ReplicationJobsClientExportPoller) ResumeToken() (string, error) {
	return p.pt.ResumeToken()
}

// ReplicationJobsClientRestartPoller provides polling facilities until the operation reaches a terminal state.
type ReplicationJobsClientRestartPoller struct {
	pt *azcore.Poller
}

// Done returns true if the LRO has reached a terminal state.
func (p *ReplicationJobsClientRestartPoller) Done() bool {
	return p.pt.Done()
}

// Poll fetches the latest state of the LRO.  It returns an HTTP response or error.
// If the LRO has completed successfully, the poller's state is updated and the HTTP
// response is returned.
// If the LRO has completed with failure or was cancelled, the poller's state is
// updated and the error is returned.
// If the LRO has not reached a terminal state, the poller's state is updated and
// the latest HTTP response is returned.
// If Poll fails, the poller's state is unmodified and the error is returned.
// Calling Poll on an LRO that has reached a terminal state will return the final
// HTTP response or error.
func (p *ReplicationJobsClientRestartPoller) Poll(ctx context.Context) (*http.Response, error) {
	return p.pt.Poll(ctx)
}

// FinalResponse performs a final GET to the service and returns the final response
// for the polling operation. If there is an error performing the final GET then an error is returned.
// If the final GET succeeded then the final ReplicationJobsClientRestartResponse will be returned.
func (p *ReplicationJobsClientRestartPoller) FinalResponse(ctx context.Context) (ReplicationJobsClientRestartResponse, error) {
	respType := ReplicationJobsClientRestartResponse{}
	resp, err := p.pt.FinalResponse(ctx, &respType.Job)
	if err != nil {
		return ReplicationJobsClientRestartResponse{}, err
	}
	respType.RawResponse = resp
	return respType, nil
}

// ResumeToken returns a value representing the poller that can be used to resume
// the LRO at a later time. ResumeTokens are unique per service operation.
func (p *ReplicationJobsClientRestartPoller) ResumeToken() (string, error) {
	return p.pt.ResumeToken()
}

// ReplicationJobsClientResumePoller provides polling facilities until the operation reaches a terminal state.
type ReplicationJobsClientResumePoller struct {
	pt *azcore.Poller
}

// Done returns true if the LRO has reached a terminal state.
func (p *ReplicationJobsClientResumePoller) Done() bool {
	return p.pt.Done()
}

// Poll fetches the latest state of the LRO.  It returns an HTTP response or error.
// If the LRO has completed successfully, the poller's state is updated and the HTTP
// response is returned.
// If the LRO has completed with failure or was cancelled, the poller's state is
// updated and the error is returned.
// If the LRO has not reached a terminal state, the poller's state is updated and
// the latest HTTP response is returned.
// If Poll fails, the poller's state is unmodified and the error is returned.
// Calling Poll on an LRO that has reached a terminal state will return the final
// HTTP response or error.
func (p *ReplicationJobsClientResumePoller) Poll(ctx context.Context) (*http.Response, error) {
	return p.pt.Poll(ctx)
}

// FinalResponse performs a final GET to the service and returns the final response
// for the polling operation. If there is an error performing the final GET then an error is returned.
// If the final GET succeeded then the final ReplicationJobsClientResumeResponse will be returned.
func (p *ReplicationJobsClientResumePoller) FinalResponse(ctx context.Context) (ReplicationJobsClientResumeResponse, error) {
	respType := ReplicationJobsClientResumeResponse{}
	resp, err := p.pt.FinalResponse(ctx, &respType.Job)
	if err != nil {
		return ReplicationJobsClientResumeResponse{}, err
	}
	respType.RawResponse = resp
	return respType, nil
}

// ResumeToken returns a value representing the poller that can be used to resume
// the LRO at a later time. ResumeTokens are unique per service operation.
func (p *ReplicationJobsClientResumePoller) ResumeToken() (string, error) {
	return p.pt.ResumeToken()
}

// ReplicationMigrationItemsClientCreatePoller provides polling facilities until the operation reaches a terminal state.
type ReplicationMigrationItemsClientCreatePoller struct {
	pt *azcore.Poller
}

// Done returns true if the LRO has reached a terminal state.
func (p *ReplicationMigrationItemsClientCreatePoller) Done() bool {
	return p.pt.Done()
}

// Poll fetches the latest state of the LRO.  It returns an HTTP response or error.
// If the LRO has completed successfully, the poller's state is updated and the HTTP
// response is returned.
// If the LRO has completed with failure or was cancelled, the poller's state is
// updated and the error is returned.
// If the LRO has not reached a terminal state, the poller's state is updated and
// the latest HTTP response is returned.
// If Poll fails, the poller's state is unmodified and the error is returned.
// Calling Poll on an LRO that has reached a terminal state will return the final
// HTTP response or error.
func (p *ReplicationMigrationItemsClientCreatePoller) Poll(ctx context.Context) (*http.Response, error) {
	return p.pt.Poll(ctx)
}

// FinalResponse performs a final GET to the service and returns the final response
// for the polling operation. If there is an error performing the final GET then an error is returned.
// If the final GET succeeded then the final ReplicationMigrationItemsClientCreateResponse will be returned.
func (p *ReplicationMigrationItemsClientCreatePoller) FinalResponse(ctx context.Context) (ReplicationMigrationItemsClientCreateResponse, error) {
	respType := ReplicationMigrationItemsClientCreateResponse{}
	resp, err := p.pt.FinalResponse(ctx, &respType.MigrationItem)
	if err != nil {
		return ReplicationMigrationItemsClientCreateResponse{}, err
	}
	respType.RawResponse = resp
	return respType, nil
}

// ResumeToken returns a value representing the poller that can be used to resume
// the LRO at a later time. ResumeTokens are unique per service operation.
func (p *ReplicationMigrationItemsClientCreatePoller) ResumeToken() (string, error) {
	return p.pt.ResumeToken()
}

// ReplicationMigrationItemsClientDeletePoller provides polling facilities until the operation reaches a terminal state.
type ReplicationMigrationItemsClientDeletePoller struct {
	pt *azcore.Poller
}

// Done returns true if the LRO has reached a terminal state.
func (p *ReplicationMigrationItemsClientDeletePoller) Done() bool {
	return p.pt.Done()
}

// Poll fetches the latest state of the LRO.  It returns an HTTP response or error.
// If the LRO has completed successfully, the poller's state is updated and the HTTP
// response is returned.
// If the LRO has completed with failure or was cancelled, the poller's state is
// updated and the error is returned.
// If the LRO has not reached a terminal state, the poller's state is updated and
// the latest HTTP response is returned.
// If Poll fails, the poller's state is unmodified and the error is returned.
// Calling Poll on an LRO that has reached a terminal state will return the final
// HTTP response or error.
func (p *ReplicationMigrationItemsClientDeletePoller) Poll(ctx context.Context) (*http.Response, error) {
	return p.pt.Poll(ctx)
}

// FinalResponse performs a final GET to the service and returns the final response
// for the polling operation. If there is an error performing the final GET then an error is returned.
// If the final GET succeeded then the final ReplicationMigrationItemsClientDeleteResponse will be returned.
func (p *ReplicationMigrationItemsClientDeletePoller) FinalResponse(ctx context.Context) (ReplicationMigrationItemsClientDeleteResponse, error) {
	respType := ReplicationMigrationItemsClientDeleteResponse{}
	resp, err := p.pt.FinalResponse(ctx, nil)
	if err != nil {
		return ReplicationMigrationItemsClientDeleteResponse{}, err
	}
	respType.RawResponse = resp
	return respType, nil
}

// ResumeToken returns a value representing the poller that can be used to resume
// the LRO at a later time. ResumeTokens are unique per service operation.
func (p *ReplicationMigrationItemsClientDeletePoller) ResumeToken() (string, error) {
	return p.pt.ResumeToken()
}

// ReplicationMigrationItemsClientMigratePoller provides polling facilities until the operation reaches a terminal state.
type ReplicationMigrationItemsClientMigratePoller struct {
	pt *azcore.Poller
}

// Done returns true if the LRO has reached a terminal state.
func (p *ReplicationMigrationItemsClientMigratePoller) Done() bool {
	return p.pt.Done()
}

// Poll fetches the latest state of the LRO.  It returns an HTTP response or error.
// If the LRO has completed successfully, the poller's state is updated and the HTTP
// response is returned.
// If the LRO has completed with failure or was cancelled, the poller's state is
// updated and the error is returned.
// If the LRO has not reached a terminal state, the poller's state is updated and
// the latest HTTP response is returned.
// If Poll fails, the poller's state is unmodified and the error is returned.
// Calling Poll on an LRO that has reached a terminal state will return the final
// HTTP response or error.
func (p *ReplicationMigrationItemsClientMigratePoller) Poll(ctx context.Context) (*http.Response, error) {
	return p.pt.Poll(ctx)
}

// FinalResponse performs a final GET to the service and returns the final response
// for the polling operation. If there is an error performing the final GET then an error is returned.
// If the final GET succeeded then the final ReplicationMigrationItemsClientMigrateResponse will be returned.
func (p *ReplicationMigrationItemsClientMigratePoller) FinalResponse(ctx context.Context) (ReplicationMigrationItemsClientMigrateResponse, error) {
	respType := ReplicationMigrationItemsClientMigrateResponse{}
	resp, err := p.pt.FinalResponse(ctx, &respType.MigrationItem)
	if err != nil {
		return ReplicationMigrationItemsClientMigrateResponse{}, err
	}
	respType.RawResponse = resp
	return respType, nil
}

// ResumeToken returns a value representing the poller that can be used to resume
// the LRO at a later time. ResumeTokens are unique per service operation.
func (p *ReplicationMigrationItemsClientMigratePoller) ResumeToken() (string, error) {
	return p.pt.ResumeToken()
}

// ReplicationMigrationItemsClientResyncPoller provides polling facilities until the operation reaches a terminal state.
type ReplicationMigrationItemsClientResyncPoller struct {
	pt *azcore.Poller
}

// Done returns true if the LRO has reached a terminal state.
func (p *ReplicationMigrationItemsClientResyncPoller) Done() bool {
	return p.pt.Done()
}

// Poll fetches the latest state of the LRO.  It returns an HTTP response or error.
// If the LRO has completed successfully, the poller's state is updated and the HTTP
// response is returned.
// If the LRO has completed with failure or was cancelled, the poller's state is
// updated and the error is returned.
// If the LRO has not reached a terminal state, the poller's state is updated and
// the latest HTTP response is returned.
// If Poll fails, the poller's state is unmodified and the error is returned.
// Calling Poll on an LRO that has reached a terminal state will return the final
// HTTP response or error.
func (p *ReplicationMigrationItemsClientResyncPoller) Poll(ctx context.Context) (*http.Response, error) {
	return p.pt.Poll(ctx)
}

// FinalResponse performs a final GET to the service and returns the final response
// for the polling operation. If there is an error performing the final GET then an error is returned.
// If the final GET succeeded then the final ReplicationMigrationItemsClientResyncResponse will be returned.
func (p *ReplicationMigrationItemsClientResyncPoller) FinalResponse(ctx context.Context) (ReplicationMigrationItemsClientResyncResponse, error) {
	respType := ReplicationMigrationItemsClientResyncResponse{}
	resp, err := p.pt.FinalResponse(ctx, &respType.MigrationItem)
	if err != nil {
		return ReplicationMigrationItemsClientResyncResponse{}, err
	}
	respType.RawResponse = resp
	return respType, nil
}

// ResumeToken returns a value representing the poller that can be used to resume
// the LRO at a later time. ResumeTokens are unique per service operation.
func (p *ReplicationMigrationItemsClientResyncPoller) ResumeToken() (string, error) {
	return p.pt.ResumeToken()
}

// ReplicationMigrationItemsClientTestMigrateCleanupPoller provides polling facilities until the operation reaches a terminal state.
type ReplicationMigrationItemsClientTestMigrateCleanupPoller struct {
	pt *azcore.Poller
}

// Done returns true if the LRO has reached a terminal state.
func (p *ReplicationMigrationItemsClientTestMigrateCleanupPoller) Done() bool {
	return p.pt.Done()
}

// Poll fetches the latest state of the LRO.  It returns an HTTP response or error.
// If the LRO has completed successfully, the poller's state is updated and the HTTP
// response is returned.
// If the LRO has completed with failure or was cancelled, the poller's state is
// updated and the error is returned.
// If the LRO has not reached a terminal state, the poller's state is updated and
// the latest HTTP response is returned.
// If Poll fails, the poller's state is unmodified and the error is returned.
// Calling Poll on an LRO that has reached a terminal state will return the final
// HTTP response or error.
func (p *ReplicationMigrationItemsClientTestMigrateCleanupPoller) Poll(ctx context.Context) (*http.Response, error) {
	return p.pt.Poll(ctx)
}

// FinalResponse performs a final GET to the service and returns the final response
// for the polling operation. If there is an error performing the final GET then an error is returned.
// If the final GET succeeded then the final ReplicationMigrationItemsClientTestMigrateCleanupResponse will be returned.
func (p *ReplicationMigrationItemsClientTestMigrateCleanupPoller) FinalResponse(ctx context.Context) (ReplicationMigrationItemsClientTestMigrateCleanupResponse, error) {
	respType := ReplicationMigrationItemsClientTestMigrateCleanupResponse{}
	resp, err := p.pt.FinalResponse(ctx, &respType.MigrationItem)
	if err != nil {
		return ReplicationMigrationItemsClientTestMigrateCleanupResponse{}, err
	}
	respType.RawResponse = resp
	return respType, nil
}

// ResumeToken returns a value representing the poller that can be used to resume
// the LRO at a later time. ResumeTokens are unique per service operation.
func (p *ReplicationMigrationItemsClientTestMigrateCleanupPoller) ResumeToken() (string, error) {
	return p.pt.ResumeToken()
}

// ReplicationMigrationItemsClientTestMigratePoller provides polling facilities until the operation reaches a terminal state.
type ReplicationMigrationItemsClientTestMigratePoller struct {
	pt *azcore.Poller
}

// Done returns true if the LRO has reached a terminal state.
func (p *ReplicationMigrationItemsClientTestMigratePoller) Done() bool {
	return p.pt.Done()
}

// Poll fetches the latest state of the LRO.  It returns an HTTP response or error.
// If the LRO has completed successfully, the poller's state is updated and the HTTP
// response is returned.
// If the LRO has completed with failure or was cancelled, the poller's state is
// updated and the error is returned.
// If the LRO has not reached a terminal state, the poller's state is updated and
// the latest HTTP response is returned.
// If Poll fails, the poller's state is unmodified and the error is returned.
// Calling Poll on an LRO that has reached a terminal state will return the final
// HTTP response or error.
func (p *ReplicationMigrationItemsClientTestMigratePoller) Poll(ctx context.Context) (*http.Response, error) {
	return p.pt.Poll(ctx)
}

// FinalResponse performs a final GET to the service and returns the final response
// for the polling operation. If there is an error performing the final GET then an error is returned.
// If the final GET succeeded then the final ReplicationMigrationItemsClientTestMigrateResponse will be returned.
func (p *ReplicationMigrationItemsClientTestMigratePoller) FinalResponse(ctx context.Context) (ReplicationMigrationItemsClientTestMigrateResponse, error) {
	respType := ReplicationMigrationItemsClientTestMigrateResponse{}
	resp, err := p.pt.FinalResponse(ctx, &respType.MigrationItem)
	if err != nil {
		return ReplicationMigrationItemsClientTestMigrateResponse{}, err
	}
	respType.RawResponse = resp
	return respType, nil
}

// ResumeToken returns a value representing the poller that can be used to resume
// the LRO at a later time. ResumeTokens are unique per service operation.
func (p *ReplicationMigrationItemsClientTestMigratePoller) ResumeToken() (string, error) {
	return p.pt.ResumeToken()
}

// ReplicationMigrationItemsClientUpdatePoller provides polling facilities until the operation reaches a terminal state.
type ReplicationMigrationItemsClientUpdatePoller struct {
	pt *azcore.Poller
}

// Done returns true if the LRO has reached a terminal state.
func (p *ReplicationMigrationItemsClientUpdatePoller) Done() bool {
	return p.pt.Done()
}

// Poll fetches the latest state of the LRO.  It returns an HTTP response or error.
// If the LRO has completed successfully, the poller's state is updated and the HTTP
// response is returned.
// If the LRO has completed with failure or was cancelled, the poller's state is
// updated and the error is returned.
// If the LRO has not reached a terminal state, the poller's state is updated and
// the latest HTTP response is returned.
// If Poll fails, the poller's state is unmodified and the error is returned.
// Calling Poll on an LRO that has reached a terminal state will return the final
// HTTP response or error.
func (p *ReplicationMigrationItemsClientUpdatePoller) Poll(ctx context.Context) (*http.Response, error) {
	return p.pt.Poll(ctx)
}

// FinalResponse performs a final GET to the service and returns the final response
// for the polling operation. If there is an error performing the final GET then an error is returned.
// If the final GET succeeded then the final ReplicationMigrationItemsClientUpdateResponse will be returned.
func (p *ReplicationMigrationItemsClientUpdatePoller) FinalResponse(ctx context.Context) (ReplicationMigrationItemsClientUpdateResponse, error) {
	respType := ReplicationMigrationItemsClientUpdateResponse{}
	resp, err := p.pt.FinalResponse(ctx, &respType.MigrationItem)
	if err != nil {
		return ReplicationMigrationItemsClientUpdateResponse{}, err
	}
	respType.RawResponse = resp
	return respType, nil
}

// ResumeToken returns a value representing the poller that can be used to resume
// the LRO at a later time. ResumeTokens are unique per service operation.
func (p *ReplicationMigrationItemsClientUpdatePoller) ResumeToken() (string, error) {
	return p.pt.ResumeToken()
}

// ReplicationNetworkMappingsClientCreatePoller provides polling facilities until the operation reaches a terminal state.
type ReplicationNetworkMappingsClientCreatePoller struct {
	pt *azcore.Poller
}

// Done returns true if the LRO has reached a terminal state.
func (p *ReplicationNetworkMappingsClientCreatePoller) Done() bool {
	return p.pt.Done()
}

// Poll fetches the latest state of the LRO.  It returns an HTTP response or error.
// If the LRO has completed successfully, the poller's state is updated and the HTTP
// response is returned.
// If the LRO has completed with failure or was cancelled, the poller's state is
// updated and the error is returned.
// If the LRO has not reached a terminal state, the poller's state is updated and
// the latest HTTP response is returned.
// If Poll fails, the poller's state is unmodified and the error is returned.
// Calling Poll on an LRO that has reached a terminal state will return the final
// HTTP response or error.
func (p *ReplicationNetworkMappingsClientCreatePoller) Poll(ctx context.Context) (*http.Response, error) {
	return p.pt.Poll(ctx)
}

// FinalResponse performs a final GET to the service and returns the final response
// for the polling operation. If there is an error performing the final GET then an error is returned.
// If the final GET succeeded then the final ReplicationNetworkMappingsClientCreateResponse will be returned.
func (p *ReplicationNetworkMappingsClientCreatePoller) FinalResponse(ctx context.Context) (ReplicationNetworkMappingsClientCreateResponse, error) {
	respType := ReplicationNetworkMappingsClientCreateResponse{}
	resp, err := p.pt.FinalResponse(ctx, &respType.NetworkMapping)
	if err != nil {
		return ReplicationNetworkMappingsClientCreateResponse{}, err
	}
	respType.RawResponse = resp
	return respType, nil
}

// ResumeToken returns a value representing the poller that can be used to resume
// the LRO at a later time. ResumeTokens are unique per service operation.
func (p *ReplicationNetworkMappingsClientCreatePoller) ResumeToken() (string, error) {
	return p.pt.ResumeToken()
}

// ReplicationNetworkMappingsClientDeletePoller provides polling facilities until the operation reaches a terminal state.
type ReplicationNetworkMappingsClientDeletePoller struct {
	pt *azcore.Poller
}

// Done returns true if the LRO has reached a terminal state.
func (p *ReplicationNetworkMappingsClientDeletePoller) Done() bool {
	return p.pt.Done()
}

// Poll fetches the latest state of the LRO.  It returns an HTTP response or error.
// If the LRO has completed successfully, the poller's state is updated and the HTTP
// response is returned.
// If the LRO has completed with failure or was cancelled, the poller's state is
// updated and the error is returned.
// If the LRO has not reached a terminal state, the poller's state is updated and
// the latest HTTP response is returned.
// If Poll fails, the poller's state is unmodified and the error is returned.
// Calling Poll on an LRO that has reached a terminal state will return the final
// HTTP response or error.
func (p *ReplicationNetworkMappingsClientDeletePoller) Poll(ctx context.Context) (*http.Response, error) {
	return p.pt.Poll(ctx)
}

// FinalResponse performs a final GET to the service and returns the final response
// for the polling operation. If there is an error performing the final GET then an error is returned.
// If the final GET succeeded then the final ReplicationNetworkMappingsClientDeleteResponse will be returned.
func (p *ReplicationNetworkMappingsClientDeletePoller) FinalResponse(ctx context.Context) (ReplicationNetworkMappingsClientDeleteResponse, error) {
	respType := ReplicationNetworkMappingsClientDeleteResponse{}
	resp, err := p.pt.FinalResponse(ctx, nil)
	if err != nil {
		return ReplicationNetworkMappingsClientDeleteResponse{}, err
	}
	respType.RawResponse = resp
	return respType, nil
}

// ResumeToken returns a value representing the poller that can be used to resume
// the LRO at a later time. ResumeTokens are unique per service operation.
func (p *ReplicationNetworkMappingsClientDeletePoller) ResumeToken() (string, error) {
	return p.pt.ResumeToken()
}

// ReplicationNetworkMappingsClientUpdatePoller provides polling facilities until the operation reaches a terminal state.
type ReplicationNetworkMappingsClientUpdatePoller struct {
	pt *azcore.Poller
}

// Done returns true if the LRO has reached a terminal state.
func (p *ReplicationNetworkMappingsClientUpdatePoller) Done() bool {
	return p.pt.Done()
}

// Poll fetches the latest state of the LRO.  It returns an HTTP response or error.
// If the LRO has completed successfully, the poller's state is updated and the HTTP
// response is returned.
// If the LRO has completed with failure or was cancelled, the poller's state is
// updated and the error is returned.
// If the LRO has not reached a terminal state, the poller's state is updated and
// the latest HTTP response is returned.
// If Poll fails, the poller's state is unmodified and the error is returned.
// Calling Poll on an LRO that has reached a terminal state will return the final
// HTTP response or error.
func (p *ReplicationNetworkMappingsClientUpdatePoller) Poll(ctx context.Context) (*http.Response, error) {
	return p.pt.Poll(ctx)
}

// FinalResponse performs a final GET to the service and returns the final response
// for the polling operation. If there is an error performing the final GET then an error is returned.
// If the final GET succeeded then the final ReplicationNetworkMappingsClientUpdateResponse will be returned.
func (p *ReplicationNetworkMappingsClientUpdatePoller) FinalResponse(ctx context.Context) (ReplicationNetworkMappingsClientUpdateResponse, error) {
	respType := ReplicationNetworkMappingsClientUpdateResponse{}
	resp, err := p.pt.FinalResponse(ctx, &respType.NetworkMapping)
	if err != nil {
		return ReplicationNetworkMappingsClientUpdateResponse{}, err
	}
	respType.RawResponse = resp
	return respType, nil
}

// ResumeToken returns a value representing the poller that can be used to resume
// the LRO at a later time. ResumeTokens are unique per service operation.
func (p *ReplicationNetworkMappingsClientUpdatePoller) ResumeToken() (string, error) {
	return p.pt.ResumeToken()
}

// ReplicationPoliciesClientCreatePoller provides polling facilities until the operation reaches a terminal state.
type ReplicationPoliciesClientCreatePoller struct {
	pt *azcore.Poller
}

// Done returns true if the LRO has reached a terminal state.
func (p *ReplicationPoliciesClientCreatePoller) Done() bool {
	return p.pt.Done()
}

// Poll fetches the latest state of the LRO.  It returns an HTTP response or error.
// If the LRO has completed successfully, the poller's state is updated and the HTTP
// response is returned.
// If the LRO has completed with failure or was cancelled, the poller's state is
// updated and the error is returned.
// If the LRO has not reached a terminal state, the poller's state is updated and
// the latest HTTP response is returned.
// If Poll fails, the poller's state is unmodified and the error is returned.
// Calling Poll on an LRO that has reached a terminal state will return the final
// HTTP response or error.
func (p *ReplicationPoliciesClientCreatePoller) Poll(ctx context.Context) (*http.Response, error) {
	return p.pt.Poll(ctx)
}

// FinalResponse performs a final GET to the service and returns the final response
// for the polling operation. If there is an error performing the final GET then an error is returned.
// If the final GET succeeded then the final ReplicationPoliciesClientCreateResponse will be returned.
func (p *ReplicationPoliciesClientCreatePoller) FinalResponse(ctx context.Context) (ReplicationPoliciesClientCreateResponse, error) {
	respType := ReplicationPoliciesClientCreateResponse{}
	resp, err := p.pt.FinalResponse(ctx, &respType.Policy)
	if err != nil {
		return ReplicationPoliciesClientCreateResponse{}, err
	}
	respType.RawResponse = resp
	return respType, nil
}

// ResumeToken returns a value representing the poller that can be used to resume
// the LRO at a later time. ResumeTokens are unique per service operation.
func (p *ReplicationPoliciesClientCreatePoller) ResumeToken() (string, error) {
	return p.pt.ResumeToken()
}

// ReplicationPoliciesClientDeletePoller provides polling facilities until the operation reaches a terminal state.
type ReplicationPoliciesClientDeletePoller struct {
	pt *azcore.Poller
}

// Done returns true if the LRO has reached a terminal state.
func (p *ReplicationPoliciesClientDeletePoller) Done() bool {
	return p.pt.Done()
}

// Poll fetches the latest state of the LRO.  It returns an HTTP response or error.
// If the LRO has completed successfully, the poller's state is updated and the HTTP
// response is returned.
// If the LRO has completed with failure or was cancelled, the poller's state is
// updated and the error is returned.
// If the LRO has not reached a terminal state, the poller's state is updated and
// the latest HTTP response is returned.
// If Poll fails, the poller's state is unmodified and the error is returned.
// Calling Poll on an LRO that has reached a terminal state will return the final
// HTTP response or error.
func (p *ReplicationPoliciesClientDeletePoller) Poll(ctx context.Context) (*http.Response, error) {
	return p.pt.Poll(ctx)
}

// FinalResponse performs a final GET to the service and returns the final response
// for the polling operation. If there is an error performing the final GET then an error is returned.
// If the final GET succeeded then the final ReplicationPoliciesClientDeleteResponse will be returned.
func (p *ReplicationPoliciesClientDeletePoller) FinalResponse(ctx context.Context) (ReplicationPoliciesClientDeleteResponse, error) {
	respType := ReplicationPoliciesClientDeleteResponse{}
	resp, err := p.pt.FinalResponse(ctx, nil)
	if err != nil {
		return ReplicationPoliciesClientDeleteResponse{}, err
	}
	respType.RawResponse = resp
	return respType, nil
}

// ResumeToken returns a value representing the poller that can be used to resume
// the LRO at a later time. ResumeTokens are unique per service operation.
func (p *ReplicationPoliciesClientDeletePoller) ResumeToken() (string, error) {
	return p.pt.ResumeToken()
}

// ReplicationPoliciesClientUpdatePoller provides polling facilities until the operation reaches a terminal state.
type ReplicationPoliciesClientUpdatePoller struct {
	pt *azcore.Poller
}

// Done returns true if the LRO has reached a terminal state.
func (p *ReplicationPoliciesClientUpdatePoller) Done() bool {
	return p.pt.Done()
}

// Poll fetches the latest state of the LRO.  It returns an HTTP response or error.
// If the LRO has completed successfully, the poller's state is updated and the HTTP
// response is returned.
// If the LRO has completed with failure or was cancelled, the poller's state is
// updated and the error is returned.
// If the LRO has not reached a terminal state, the poller's state is updated and
// the latest HTTP response is returned.
// If Poll fails, the poller's state is unmodified and the error is returned.
// Calling Poll on an LRO that has reached a terminal state will return the final
// HTTP response or error.
func (p *ReplicationPoliciesClientUpdatePoller) Poll(ctx context.Context) (*http.Response, error) {
	return p.pt.Poll(ctx)
}

// FinalResponse performs a final GET to the service and returns the final response
// for the polling operation. If there is an error performing the final GET then an error is returned.
// If the final GET succeeded then the final ReplicationPoliciesClientUpdateResponse will be returned.
func (p *ReplicationPoliciesClientUpdatePoller) FinalResponse(ctx context.Context) (ReplicationPoliciesClientUpdateResponse, error) {
	respType := ReplicationPoliciesClientUpdateResponse{}
	resp, err := p.pt.FinalResponse(ctx, &respType.Policy)
	if err != nil {
		return ReplicationPoliciesClientUpdateResponse{}, err
	}
	respType.RawResponse = resp
	return respType, nil
}

// ResumeToken returns a value representing the poller that can be used to resume
// the LRO at a later time. ResumeTokens are unique per service operation.
func (p *ReplicationPoliciesClientUpdatePoller) ResumeToken() (string, error) {
	return p.pt.ResumeToken()
}

// ReplicationProtectedItemsClientAddDisksPoller provides polling facilities until the operation reaches a terminal state.
type ReplicationProtectedItemsClientAddDisksPoller struct {
	pt *azcore.Poller
}

// Done returns true if the LRO has reached a terminal state.
func (p *ReplicationProtectedItemsClientAddDisksPoller) Done() bool {
	return p.pt.Done()
}

// Poll fetches the latest state of the LRO.  It returns an HTTP response or error.
// If the LRO has completed successfully, the poller's state is updated and the HTTP
// response is returned.
// If the LRO has completed with failure or was cancelled, the poller's state is
// updated and the error is returned.
// If the LRO has not reached a terminal state, the poller's state is updated and
// the latest HTTP response is returned.
// If Poll fails, the poller's state is unmodified and the error is returned.
// Calling Poll on an LRO that has reached a terminal state will return the final
// HTTP response or error.
func (p *ReplicationProtectedItemsClientAddDisksPoller) Poll(ctx context.Context) (*http.Response, error) {
	return p.pt.Poll(ctx)
}

// FinalResponse performs a final GET to the service and returns the final response
// for the polling operation. If there is an error performing the final GET then an error is returned.
// If the final GET succeeded then the final ReplicationProtectedItemsClientAddDisksResponse will be returned.
func (p *ReplicationProtectedItemsClientAddDisksPoller) FinalResponse(ctx context.Context) (ReplicationProtectedItemsClientAddDisksResponse, error) {
	respType := ReplicationProtectedItemsClientAddDisksResponse{}
	resp, err := p.pt.FinalResponse(ctx, &respType.ReplicationProtectedItem)
	if err != nil {
		return ReplicationProtectedItemsClientAddDisksResponse{}, err
	}
	respType.RawResponse = resp
	return respType, nil
}

// ResumeToken returns a value representing the poller that can be used to resume
// the LRO at a later time. ResumeTokens are unique per service operation.
func (p *ReplicationProtectedItemsClientAddDisksPoller) ResumeToken() (string, error) {
	return p.pt.ResumeToken()
}

// ReplicationProtectedItemsClientApplyRecoveryPointPoller provides polling facilities until the operation reaches a terminal state.
type ReplicationProtectedItemsClientApplyRecoveryPointPoller struct {
	pt *azcore.Poller
}

// Done returns true if the LRO has reached a terminal state.
func (p *ReplicationProtectedItemsClientApplyRecoveryPointPoller) Done() bool {
	return p.pt.Done()
}

// Poll fetches the latest state of the LRO.  It returns an HTTP response or error.
// If the LRO has completed successfully, the poller's state is updated and the HTTP
// response is returned.
// If the LRO has completed with failure or was cancelled, the poller's state is
// updated and the error is returned.
// If the LRO has not reached a terminal state, the poller's state is updated and
// the latest HTTP response is returned.
// If Poll fails, the poller's state is unmodified and the error is returned.
// Calling Poll on an LRO that has reached a terminal state will return the final
// HTTP response or error.
func (p *ReplicationProtectedItemsClientApplyRecoveryPointPoller) Poll(ctx context.Context) (*http.Response, error) {
	return p.pt.Poll(ctx)
}

// FinalResponse performs a final GET to the service and returns the final response
// for the polling operation. If there is an error performing the final GET then an error is returned.
// If the final GET succeeded then the final ReplicationProtectedItemsClientApplyRecoveryPointResponse will be returned.
func (p *ReplicationProtectedItemsClientApplyRecoveryPointPoller) FinalResponse(ctx context.Context) (ReplicationProtectedItemsClientApplyRecoveryPointResponse, error) {
	respType := ReplicationProtectedItemsClientApplyRecoveryPointResponse{}
	resp, err := p.pt.FinalResponse(ctx, &respType.ReplicationProtectedItem)
	if err != nil {
		return ReplicationProtectedItemsClientApplyRecoveryPointResponse{}, err
	}
	respType.RawResponse = resp
	return respType, nil
}

// ResumeToken returns a value representing the poller that can be used to resume
// the LRO at a later time. ResumeTokens are unique per service operation.
func (p *ReplicationProtectedItemsClientApplyRecoveryPointPoller) ResumeToken() (string, error) {
	return p.pt.ResumeToken()
}

// ReplicationProtectedItemsClientCreatePoller provides polling facilities until the operation reaches a terminal state.
type ReplicationProtectedItemsClientCreatePoller struct {
	pt *azcore.Poller
}

// Done returns true if the LRO has reached a terminal state.
func (p *ReplicationProtectedItemsClientCreatePoller) Done() bool {
	return p.pt.Done()
}

// Poll fetches the latest state of the LRO.  It returns an HTTP response or error.
// If the LRO has completed successfully, the poller's state is updated and the HTTP
// response is returned.
// If the LRO has completed with failure or was cancelled, the poller's state is
// updated and the error is returned.
// If the LRO has not reached a terminal state, the poller's state is updated and
// the latest HTTP response is returned.
// If Poll fails, the poller's state is unmodified and the error is returned.
// Calling Poll on an LRO that has reached a terminal state will return the final
// HTTP response or error.
func (p *ReplicationProtectedItemsClientCreatePoller) Poll(ctx context.Context) (*http.Response, error) {
	return p.pt.Poll(ctx)
}

// FinalResponse performs a final GET to the service and returns the final response
// for the polling operation. If there is an error performing the final GET then an error is returned.
// If the final GET succeeded then the final ReplicationProtectedItemsClientCreateResponse will be returned.
func (p *ReplicationProtectedItemsClientCreatePoller) FinalResponse(ctx context.Context) (ReplicationProtectedItemsClientCreateResponse, error) {
	respType := ReplicationProtectedItemsClientCreateResponse{}
	resp, err := p.pt.FinalResponse(ctx, &respType.ReplicationProtectedItem)
	if err != nil {
		return ReplicationProtectedItemsClientCreateResponse{}, err
	}
	respType.RawResponse = resp
	return respType, nil
}

// ResumeToken returns a value representing the poller that can be used to resume
// the LRO at a later time. ResumeTokens are unique per service operation.
func (p *ReplicationProtectedItemsClientCreatePoller) ResumeToken() (string, error) {
	return p.pt.ResumeToken()
}

// ReplicationProtectedItemsClientDeletePoller provides polling facilities until the operation reaches a terminal state.
type ReplicationProtectedItemsClientDeletePoller struct {
	pt *azcore.Poller
}

// Done returns true if the LRO has reached a terminal state.
func (p *ReplicationProtectedItemsClientDeletePoller) Done() bool {
	return p.pt.Done()
}

// Poll fetches the latest state of the LRO.  It returns an HTTP response or error.
// If the LRO has completed successfully, the poller's state is updated and the HTTP
// response is returned.
// If the LRO has completed with failure or was cancelled, the poller's state is
// updated and the error is returned.
// If the LRO has not reached a terminal state, the poller's state is updated and
// the latest HTTP response is returned.
// If Poll fails, the poller's state is unmodified and the error is returned.
// Calling Poll on an LRO that has reached a terminal state will return the final
// HTTP response or error.
func (p *ReplicationProtectedItemsClientDeletePoller) Poll(ctx context.Context) (*http.Response, error) {
	return p.pt.Poll(ctx)
}

// FinalResponse performs a final GET to the service and returns the final response
// for the polling operation. If there is an error performing the final GET then an error is returned.
// If the final GET succeeded then the final ReplicationProtectedItemsClientDeleteResponse will be returned.
func (p *ReplicationProtectedItemsClientDeletePoller) FinalResponse(ctx context.Context) (ReplicationProtectedItemsClientDeleteResponse, error) {
	respType := ReplicationProtectedItemsClientDeleteResponse{}
	resp, err := p.pt.FinalResponse(ctx, nil)
	if err != nil {
		return ReplicationProtectedItemsClientDeleteResponse{}, err
	}
	respType.RawResponse = resp
	return respType, nil
}

// ResumeToken returns a value representing the poller that can be used to resume
// the LRO at a later time. ResumeTokens are unique per service operation.
func (p *ReplicationProtectedItemsClientDeletePoller) ResumeToken() (string, error) {
	return p.pt.ResumeToken()
}

// ReplicationProtectedItemsClientFailoverCancelPoller provides polling facilities until the operation reaches a terminal state.
type ReplicationProtectedItemsClientFailoverCancelPoller struct {
	pt *azcore.Poller
}

// Done returns true if the LRO has reached a terminal state.
func (p *ReplicationProtectedItemsClientFailoverCancelPoller) Done() bool {
	return p.pt.Done()
}

// Poll fetches the latest state of the LRO.  It returns an HTTP response or error.
// If the LRO has completed successfully, the poller's state is updated and the HTTP
// response is returned.
// If the LRO has completed with failure or was cancelled, the poller's state is
// updated and the error is returned.
// If the LRO has not reached a terminal state, the poller's state is updated and
// the latest HTTP response is returned.
// If Poll fails, the poller's state is unmodified and the error is returned.
// Calling Poll on an LRO that has reached a terminal state will return the final
// HTTP response or error.
func (p *ReplicationProtectedItemsClientFailoverCancelPoller) Poll(ctx context.Context) (*http.Response, error) {
	return p.pt.Poll(ctx)
}

// FinalResponse performs a final GET to the service and returns the final response
// for the polling operation. If there is an error performing the final GET then an error is returned.
// If the final GET succeeded then the final ReplicationProtectedItemsClientFailoverCancelResponse will be returned.
func (p *ReplicationProtectedItemsClientFailoverCancelPoller) FinalResponse(ctx context.Context) (ReplicationProtectedItemsClientFailoverCancelResponse, error) {
	respType := ReplicationProtectedItemsClientFailoverCancelResponse{}
	resp, err := p.pt.FinalResponse(ctx, &respType.ReplicationProtectedItem)
	if err != nil {
		return ReplicationProtectedItemsClientFailoverCancelResponse{}, err
	}
	respType.RawResponse = resp
	return respType, nil
}

// ResumeToken returns a value representing the poller that can be used to resume
// the LRO at a later time. ResumeTokens are unique per service operation.
func (p *ReplicationProtectedItemsClientFailoverCancelPoller) ResumeToken() (string, error) {
	return p.pt.ResumeToken()
}

// ReplicationProtectedItemsClientFailoverCommitPoller provides polling facilities until the operation reaches a terminal state.
type ReplicationProtectedItemsClientFailoverCommitPoller struct {
	pt *azcore.Poller
}

// Done returns true if the LRO has reached a terminal state.
func (p *ReplicationProtectedItemsClientFailoverCommitPoller) Done() bool {
	return p.pt.Done()
}

// Poll fetches the latest state of the LRO.  It returns an HTTP response or error.
// If the LRO has completed successfully, the poller's state is updated and the HTTP
// response is returned.
// If the LRO has completed with failure or was cancelled, the poller's state is
// updated and the error is returned.
// If the LRO has not reached a terminal state, the poller's state is updated and
// the latest HTTP response is returned.
// If Poll fails, the poller's state is unmodified and the error is returned.
// Calling Poll on an LRO that has reached a terminal state will return the final
// HTTP response or error.
func (p *ReplicationProtectedItemsClientFailoverCommitPoller) Poll(ctx context.Context) (*http.Response, error) {
	return p.pt.Poll(ctx)
}

// FinalResponse performs a final GET to the service and returns the final response
// for the polling operation. If there is an error performing the final GET then an error is returned.
// If the final GET succeeded then the final ReplicationProtectedItemsClientFailoverCommitResponse will be returned.
func (p *ReplicationProtectedItemsClientFailoverCommitPoller) FinalResponse(ctx context.Context) (ReplicationProtectedItemsClientFailoverCommitResponse, error) {
	respType := ReplicationProtectedItemsClientFailoverCommitResponse{}
	resp, err := p.pt.FinalResponse(ctx, &respType.ReplicationProtectedItem)
	if err != nil {
		return ReplicationProtectedItemsClientFailoverCommitResponse{}, err
	}
	respType.RawResponse = resp
	return respType, nil
}

// ResumeToken returns a value representing the poller that can be used to resume
// the LRO at a later time. ResumeTokens are unique per service operation.
func (p *ReplicationProtectedItemsClientFailoverCommitPoller) ResumeToken() (string, error) {
	return p.pt.ResumeToken()
}

// ReplicationProtectedItemsClientPlannedFailoverPoller provides polling facilities until the operation reaches a terminal state.
type ReplicationProtectedItemsClientPlannedFailoverPoller struct {
	pt *azcore.Poller
}

// Done returns true if the LRO has reached a terminal state.
func (p *ReplicationProtectedItemsClientPlannedFailoverPoller) Done() bool {
	return p.pt.Done()
}

// Poll fetches the latest state of the LRO.  It returns an HTTP response or error.
// If the LRO has completed successfully, the poller's state is updated and the HTTP
// response is returned.
// If the LRO has completed with failure or was cancelled, the poller's state is
// updated and the error is returned.
// If the LRO has not reached a terminal state, the poller's state is updated and
// the latest HTTP response is returned.
// If Poll fails, the poller's state is unmodified and the error is returned.
// Calling Poll on an LRO that has reached a terminal state will return the final
// HTTP response or error.
func (p *ReplicationProtectedItemsClientPlannedFailoverPoller) Poll(ctx context.Context) (*http.Response, error) {
	return p.pt.Poll(ctx)
}

// FinalResponse performs a final GET to the service and returns the final response
// for the polling operation. If there is an error performing the final GET then an error is returned.
// If the final GET succeeded then the final ReplicationProtectedItemsClientPlannedFailoverResponse will be returned.
func (p *ReplicationProtectedItemsClientPlannedFailoverPoller) FinalResponse(ctx context.Context) (ReplicationProtectedItemsClientPlannedFailoverResponse, error) {
	respType := ReplicationProtectedItemsClientPlannedFailoverResponse{}
	resp, err := p.pt.FinalResponse(ctx, &respType.ReplicationProtectedItem)
	if err != nil {
		return ReplicationProtectedItemsClientPlannedFailoverResponse{}, err
	}
	respType.RawResponse = resp
	return respType, nil
}

// ResumeToken returns a value representing the poller that can be used to resume
// the LRO at a later time. ResumeTokens are unique per service operation.
func (p *ReplicationProtectedItemsClientPlannedFailoverPoller) ResumeToken() (string, error) {
	return p.pt.ResumeToken()
}

// ReplicationProtectedItemsClientPurgePoller provides polling facilities until the operation reaches a terminal state.
type ReplicationProtectedItemsClientPurgePoller struct {
	pt *azcore.Poller
}

// Done returns true if the LRO has reached a terminal state.
func (p *ReplicationProtectedItemsClientPurgePoller) Done() bool {
	return p.pt.Done()
}

// Poll fetches the latest state of the LRO.  It returns an HTTP response or error.
// If the LRO has completed successfully, the poller's state is updated and the HTTP
// response is returned.
// If the LRO has completed with failure or was cancelled, the poller's state is
// updated and the error is returned.
// If the LRO has not reached a terminal state, the poller's state is updated and
// the latest HTTP response is returned.
// If Poll fails, the poller's state is unmodified and the error is returned.
// Calling Poll on an LRO that has reached a terminal state will return the final
// HTTP response or error.
func (p *ReplicationProtectedItemsClientPurgePoller) Poll(ctx context.Context) (*http.Response, error) {
	return p.pt.Poll(ctx)
}

// FinalResponse performs a final GET to the service and returns the final response
// for the polling operation. If there is an error performing the final GET then an error is returned.
// If the final GET succeeded then the final ReplicationProtectedItemsClientPurgeResponse will be returned.
func (p *ReplicationProtectedItemsClientPurgePoller) FinalResponse(ctx context.Context) (ReplicationProtectedItemsClientPurgeResponse, error) {
	respType := ReplicationProtectedItemsClientPurgeResponse{}
	resp, err := p.pt.FinalResponse(ctx, nil)
	if err != nil {
		return ReplicationProtectedItemsClientPurgeResponse{}, err
	}
	respType.RawResponse = resp
	return respType, nil
}

// ResumeToken returns a value representing the poller that can be used to resume
// the LRO at a later time. ResumeTokens are unique per service operation.
func (p *ReplicationProtectedItemsClientPurgePoller) ResumeToken() (string, error) {
	return p.pt.ResumeToken()
}

// ReplicationProtectedItemsClientRemoveDisksPoller provides polling facilities until the operation reaches a terminal state.
type ReplicationProtectedItemsClientRemoveDisksPoller struct {
	pt *azcore.Poller
}

// Done returns true if the LRO has reached a terminal state.
func (p *ReplicationProtectedItemsClientRemoveDisksPoller) Done() bool {
	return p.pt.Done()
}

// Poll fetches the latest state of the LRO.  It returns an HTTP response or error.
// If the LRO has completed successfully, the poller's state is updated and the HTTP
// response is returned.
// If the LRO has completed with failure or was cancelled, the poller's state is
// updated and the error is returned.
// If the LRO has not reached a terminal state, the poller's state is updated and
// the latest HTTP response is returned.
// If Poll fails, the poller's state is unmodified and the error is returned.
// Calling Poll on an LRO that has reached a terminal state will return the final
// HTTP response or error.
func (p *ReplicationProtectedItemsClientRemoveDisksPoller) Poll(ctx context.Context) (*http.Response, error) {
	return p.pt.Poll(ctx)
}

// FinalResponse performs a final GET to the service and returns the final response
// for the polling operation. If there is an error performing the final GET then an error is returned.
// If the final GET succeeded then the final ReplicationProtectedItemsClientRemoveDisksResponse will be returned.
func (p *ReplicationProtectedItemsClientRemoveDisksPoller) FinalResponse(ctx context.Context) (ReplicationProtectedItemsClientRemoveDisksResponse, error) {
	respType := ReplicationProtectedItemsClientRemoveDisksResponse{}
	resp, err := p.pt.FinalResponse(ctx, &respType.ReplicationProtectedItem)
	if err != nil {
		return ReplicationProtectedItemsClientRemoveDisksResponse{}, err
	}
	respType.RawResponse = resp
	return respType, nil
}

// ResumeToken returns a value representing the poller that can be used to resume
// the LRO at a later time. ResumeTokens are unique per service operation.
func (p *ReplicationProtectedItemsClientRemoveDisksPoller) ResumeToken() (string, error) {
	return p.pt.ResumeToken()
}

// ReplicationProtectedItemsClientRepairReplicationPoller provides polling facilities until the operation reaches a terminal state.
type ReplicationProtectedItemsClientRepairReplicationPoller struct {
	pt *azcore.Poller
}

// Done returns true if the LRO has reached a terminal state.
func (p *ReplicationProtectedItemsClientRepairReplicationPoller) Done() bool {
	return p.pt.Done()
}

// Poll fetches the latest state of the LRO.  It returns an HTTP response or error.
// If the LRO has completed successfully, the poller's state is updated and the HTTP
// response is returned.
// If the LRO has completed with failure or was cancelled, the poller's state is
// updated and the error is returned.
// If the LRO has not reached a terminal state, the poller's state is updated and
// the latest HTTP response is returned.
// If Poll fails, the poller's state is unmodified and the error is returned.
// Calling Poll on an LRO that has reached a terminal state will return the final
// HTTP response or error.
func (p *ReplicationProtectedItemsClientRepairReplicationPoller) Poll(ctx context.Context) (*http.Response, error) {
	return p.pt.Poll(ctx)
}

// FinalResponse performs a final GET to the service and returns the final response
// for the polling operation. If there is an error performing the final GET then an error is returned.
// If the final GET succeeded then the final ReplicationProtectedItemsClientRepairReplicationResponse will be returned.
func (p *ReplicationProtectedItemsClientRepairReplicationPoller) FinalResponse(ctx context.Context) (ReplicationProtectedItemsClientRepairReplicationResponse, error) {
	respType := ReplicationProtectedItemsClientRepairReplicationResponse{}
	resp, err := p.pt.FinalResponse(ctx, &respType.ReplicationProtectedItem)
	if err != nil {
		return ReplicationProtectedItemsClientRepairReplicationResponse{}, err
	}
	respType.RawResponse = resp
	return respType, nil
}

// ResumeToken returns a value representing the poller that can be used to resume
// the LRO at a later time. ResumeTokens are unique per service operation.
func (p *ReplicationProtectedItemsClientRepairReplicationPoller) ResumeToken() (string, error) {
	return p.pt.ResumeToken()
}

// ReplicationProtectedItemsClientReprotectPoller provides polling facilities until the operation reaches a terminal state.
type ReplicationProtectedItemsClientReprotectPoller struct {
	pt *azcore.Poller
}

// Done returns true if the LRO has reached a terminal state.
func (p *ReplicationProtectedItemsClientReprotectPoller) Done() bool {
	return p.pt.Done()
}

// Poll fetches the latest state of the LRO.  It returns an HTTP response or error.
// If the LRO has completed successfully, the poller's state is updated and the HTTP
// response is returned.
// If the LRO has completed with failure or was cancelled, the poller's state is
// updated and the error is returned.
// If the LRO has not reached a terminal state, the poller's state is updated and
// the latest HTTP response is returned.
// If Poll fails, the poller's state is unmodified and the error is returned.
// Calling Poll on an LRO that has reached a terminal state will return the final
// HTTP response or error.
func (p *ReplicationProtectedItemsClientReprotectPoller) Poll(ctx context.Context) (*http.Response, error) {
	return p.pt.Poll(ctx)
}

// FinalResponse performs a final GET to the service and returns the final response
// for the polling operation. If there is an error performing the final GET then an error is returned.
// If the final GET succeeded then the final ReplicationProtectedItemsClientReprotectResponse will be returned.
func (p *ReplicationProtectedItemsClientReprotectPoller) FinalResponse(ctx context.Context) (ReplicationProtectedItemsClientReprotectResponse, error) {
	respType := ReplicationProtectedItemsClientReprotectResponse{}
	resp, err := p.pt.FinalResponse(ctx, &respType.ReplicationProtectedItem)
	if err != nil {
		return ReplicationProtectedItemsClientReprotectResponse{}, err
	}
	respType.RawResponse = resp
	return respType, nil
}

// ResumeToken returns a value representing the poller that can be used to resume
// the LRO at a later time. ResumeTokens are unique per service operation.
func (p *ReplicationProtectedItemsClientReprotectPoller) ResumeToken() (string, error) {
	return p.pt.ResumeToken()
}

// ReplicationProtectedItemsClientResolveHealthErrorsPoller provides polling facilities until the operation reaches a terminal state.
type ReplicationProtectedItemsClientResolveHealthErrorsPoller struct {
	pt *azcore.Poller
}

// Done returns true if the LRO has reached a terminal state.
func (p *ReplicationProtectedItemsClientResolveHealthErrorsPoller) Done() bool {
	return p.pt.Done()
}

// Poll fetches the latest state of the LRO.  It returns an HTTP response or error.
// If the LRO has completed successfully, the poller's state is updated and the HTTP
// response is returned.
// If the LRO has completed with failure or was cancelled, the poller's state is
// updated and the error is returned.
// If the LRO has not reached a terminal state, the poller's state is updated and
// the latest HTTP response is returned.
// If Poll fails, the poller's state is unmodified and the error is returned.
// Calling Poll on an LRO that has reached a terminal state will return the final
// HTTP response or error.
func (p *ReplicationProtectedItemsClientResolveHealthErrorsPoller) Poll(ctx context.Context) (*http.Response, error) {
	return p.pt.Poll(ctx)
}

// FinalResponse performs a final GET to the service and returns the final response
// for the polling operation. If there is an error performing the final GET then an error is returned.
// If the final GET succeeded then the final ReplicationProtectedItemsClientResolveHealthErrorsResponse will be returned.
func (p *ReplicationProtectedItemsClientResolveHealthErrorsPoller) FinalResponse(ctx context.Context) (ReplicationProtectedItemsClientResolveHealthErrorsResponse, error) {
	respType := ReplicationProtectedItemsClientResolveHealthErrorsResponse{}
	resp, err := p.pt.FinalResponse(ctx, &respType.ReplicationProtectedItem)
	if err != nil {
		return ReplicationProtectedItemsClientResolveHealthErrorsResponse{}, err
	}
	respType.RawResponse = resp
	return respType, nil
}

// ResumeToken returns a value representing the poller that can be used to resume
// the LRO at a later time. ResumeTokens are unique per service operation.
func (p *ReplicationProtectedItemsClientResolveHealthErrorsPoller) ResumeToken() (string, error) {
	return p.pt.ResumeToken()
}

// ReplicationProtectedItemsClientSwitchProviderPoller provides polling facilities until the operation reaches a terminal state.
type ReplicationProtectedItemsClientSwitchProviderPoller struct {
	pt *azcore.Poller
}

// Done returns true if the LRO has reached a terminal state.
func (p *ReplicationProtectedItemsClientSwitchProviderPoller) Done() bool {
	return p.pt.Done()
}

// Poll fetches the latest state of the LRO.  It returns an HTTP response or error.
// If the LRO has completed successfully, the poller's state is updated and the HTTP
// response is returned.
// If the LRO has completed with failure or was cancelled, the poller's state is
// updated and the error is returned.
// If the LRO has not reached a terminal state, the poller's state is updated and
// the latest HTTP response is returned.
// If Poll fails, the poller's state is unmodified and the error is returned.
// Calling Poll on an LRO that has reached a terminal state will return the final
// HTTP response or error.
func (p *ReplicationProtectedItemsClientSwitchProviderPoller) Poll(ctx context.Context) (*http.Response, error) {
	return p.pt.Poll(ctx)
}

// FinalResponse performs a final GET to the service and returns the final response
// for the polling operation. If there is an error performing the final GET then an error is returned.
// If the final GET succeeded then the final ReplicationProtectedItemsClientSwitchProviderResponse will be returned.
func (p *ReplicationProtectedItemsClientSwitchProviderPoller) FinalResponse(ctx context.Context) (ReplicationProtectedItemsClientSwitchProviderResponse, error) {
	respType := ReplicationProtectedItemsClientSwitchProviderResponse{}
	resp, err := p.pt.FinalResponse(ctx, &respType.ReplicationProtectedItem)
	if err != nil {
		return ReplicationProtectedItemsClientSwitchProviderResponse{}, err
	}
	respType.RawResponse = resp
	return respType, nil
}

// ResumeToken returns a value representing the poller that can be used to resume
// the LRO at a later time. ResumeTokens are unique per service operation.
func (p *ReplicationProtectedItemsClientSwitchProviderPoller) ResumeToken() (string, error) {
	return p.pt.ResumeToken()
}

// ReplicationProtectedItemsClientTestFailoverCleanupPoller provides polling facilities until the operation reaches a terminal state.
type ReplicationProtectedItemsClientTestFailoverCleanupPoller struct {
	pt *azcore.Poller
}

// Done returns true if the LRO has reached a terminal state.
func (p *ReplicationProtectedItemsClientTestFailoverCleanupPoller) Done() bool {
	return p.pt.Done()
}

// Poll fetches the latest state of the LRO.  It returns an HTTP response or error.
// If the LRO has completed successfully, the poller's state is updated and the HTTP
// response is returned.
// If the LRO has completed with failure or was cancelled, the poller's state is
// updated and the error is returned.
// If the LRO has not reached a terminal state, the poller's state is updated and
// the latest HTTP response is returned.
// If Poll fails, the poller's state is unmodified and the error is returned.
// Calling Poll on an LRO that has reached a terminal state will return the final
// HTTP response or error.
func (p *ReplicationProtectedItemsClientTestFailoverCleanupPoller) Poll(ctx context.Context) (*http.Response, error) {
	return p.pt.Poll(ctx)
}

// FinalResponse performs a final GET to the service and returns the final response
// for the polling operation. If there is an error performing the final GET then an error is returned.
// If the final GET succeeded then the final ReplicationProtectedItemsClientTestFailoverCleanupResponse will be returned.
func (p *ReplicationProtectedItemsClientTestFailoverCleanupPoller) FinalResponse(ctx context.Context) (ReplicationProtectedItemsClientTestFailoverCleanupResponse, error) {
	respType := ReplicationProtectedItemsClientTestFailoverCleanupResponse{}
	resp, err := p.pt.FinalResponse(ctx, &respType.ReplicationProtectedItem)
	if err != nil {
		return ReplicationProtectedItemsClientTestFailoverCleanupResponse{}, err
	}
	respType.RawResponse = resp
	return respType, nil
}

// ResumeToken returns a value representing the poller that can be used to resume
// the LRO at a later time. ResumeTokens are unique per service operation.
func (p *ReplicationProtectedItemsClientTestFailoverCleanupPoller) ResumeToken() (string, error) {
	return p.pt.ResumeToken()
}

// ReplicationProtectedItemsClientTestFailoverPoller provides polling facilities until the operation reaches a terminal state.
type ReplicationProtectedItemsClientTestFailoverPoller struct {
	pt *azcore.Poller
}

// Done returns true if the LRO has reached a terminal state.
func (p *ReplicationProtectedItemsClientTestFailoverPoller) Done() bool {
	return p.pt.Done()
}

// Poll fetches the latest state of the LRO.  It returns an HTTP response or error.
// If the LRO has completed successfully, the poller's state is updated and the HTTP
// response is returned.
// If the LRO has completed with failure or was cancelled, the poller's state is
// updated and the error is returned.
// If the LRO has not reached a terminal state, the poller's state is updated and
// the latest HTTP response is returned.
// If Poll fails, the poller's state is unmodified and the error is returned.
// Calling Poll on an LRO that has reached a terminal state will return the final
// HTTP response or error.
func (p *ReplicationProtectedItemsClientTestFailoverPoller) Poll(ctx context.Context) (*http.Response, error) {
	return p.pt.Poll(ctx)
}

// FinalResponse performs a final GET to the service and returns the final response
// for the polling operation. If there is an error performing the final GET then an error is returned.
// If the final GET succeeded then the final ReplicationProtectedItemsClientTestFailoverResponse will be returned.
func (p *ReplicationProtectedItemsClientTestFailoverPoller) FinalResponse(ctx context.Context) (ReplicationProtectedItemsClientTestFailoverResponse, error) {
	respType := ReplicationProtectedItemsClientTestFailoverResponse{}
	resp, err := p.pt.FinalResponse(ctx, &respType.ReplicationProtectedItem)
	if err != nil {
		return ReplicationProtectedItemsClientTestFailoverResponse{}, err
	}
	respType.RawResponse = resp
	return respType, nil
}

// ResumeToken returns a value representing the poller that can be used to resume
// the LRO at a later time. ResumeTokens are unique per service operation.
func (p *ReplicationProtectedItemsClientTestFailoverPoller) ResumeToken() (string, error) {
	return p.pt.ResumeToken()
}

// ReplicationProtectedItemsClientUnplannedFailoverPoller provides polling facilities until the operation reaches a terminal state.
type ReplicationProtectedItemsClientUnplannedFailoverPoller struct {
	pt *azcore.Poller
}

// Done returns true if the LRO has reached a terminal state.
func (p *ReplicationProtectedItemsClientUnplannedFailoverPoller) Done() bool {
	return p.pt.Done()
}

// Poll fetches the latest state of the LRO.  It returns an HTTP response or error.
// If the LRO has completed successfully, the poller's state is updated and the HTTP
// response is returned.
// If the LRO has completed with failure or was cancelled, the poller's state is
// updated and the error is returned.
// If the LRO has not reached a terminal state, the poller's state is updated and
// the latest HTTP response is returned.
// If Poll fails, the poller's state is unmodified and the error is returned.
// Calling Poll on an LRO that has reached a terminal state will return the final
// HTTP response or error.
func (p *ReplicationProtectedItemsClientUnplannedFailoverPoller) Poll(ctx context.Context) (*http.Response, error) {
	return p.pt.Poll(ctx)
}

// FinalResponse performs a final GET to the service and returns the final response
// for the polling operation. If there is an error performing the final GET then an error is returned.
// If the final GET succeeded then the final ReplicationProtectedItemsClientUnplannedFailoverResponse will be returned.
func (p *ReplicationProtectedItemsClientUnplannedFailoverPoller) FinalResponse(ctx context.Context) (ReplicationProtectedItemsClientUnplannedFailoverResponse, error) {
	respType := ReplicationProtectedItemsClientUnplannedFailoverResponse{}
	resp, err := p.pt.FinalResponse(ctx, &respType.ReplicationProtectedItem)
	if err != nil {
		return ReplicationProtectedItemsClientUnplannedFailoverResponse{}, err
	}
	respType.RawResponse = resp
	return respType, nil
}

// ResumeToken returns a value representing the poller that can be used to resume
// the LRO at a later time. ResumeTokens are unique per service operation.
func (p *ReplicationProtectedItemsClientUnplannedFailoverPoller) ResumeToken() (string, error) {
	return p.pt.ResumeToken()
}

// ReplicationProtectedItemsClientUpdateAppliancePoller provides polling facilities until the operation reaches a terminal state.
type ReplicationProtectedItemsClientUpdateAppliancePoller struct {
	pt *azcore.Poller
}

// Done returns true if the LRO has reached a terminal state.
func (p *ReplicationProtectedItemsClientUpdateAppliancePoller) Done() bool {
	return p.pt.Done()
}

// Poll fetches the latest state of the LRO.  It returns an HTTP response or error.
// If the LRO has completed successfully, the poller's state is updated and the HTTP
// response is returned.
// If the LRO has completed with failure or was cancelled, the poller's state is
// updated and the error is returned.
// If the LRO has not reached a terminal state, the poller's state is updated and
// the latest HTTP response is returned.
// If Poll fails, the poller's state is unmodified and the error is returned.
// Calling Poll on an LRO that has reached a terminal state will return the final
// HTTP response or error.
func (p *ReplicationProtectedItemsClientUpdateAppliancePoller) Poll(ctx context.Context) (*http.Response, error) {
	return p.pt.Poll(ctx)
}

// FinalResponse performs a final GET to the service and returns the final response
// for the polling operation. If there is an error performing the final GET then an error is returned.
// If the final GET succeeded then the final ReplicationProtectedItemsClientUpdateApplianceResponse will be returned.
func (p *ReplicationProtectedItemsClientUpdateAppliancePoller) FinalResponse(ctx context.Context) (ReplicationProtectedItemsClientUpdateApplianceResponse, error) {
	respType := ReplicationProtectedItemsClientUpdateApplianceResponse{}
	resp, err := p.pt.FinalResponse(ctx, &respType.ReplicationProtectedItem)
	if err != nil {
		return ReplicationProtectedItemsClientUpdateApplianceResponse{}, err
	}
	respType.RawResponse = resp
	return respType, nil
}

// ResumeToken returns a value representing the poller that can be used to resume
// the LRO at a later time. ResumeTokens are unique per service operation.
func (p *ReplicationProtectedItemsClientUpdateAppliancePoller) ResumeToken() (string, error) {
	return p.pt.ResumeToken()
}

// ReplicationProtectedItemsClientUpdateMobilityServicePoller provides polling facilities until the operation reaches a terminal state.
type ReplicationProtectedItemsClientUpdateMobilityServicePoller struct {
	pt *azcore.Poller
}

// Done returns true if the LRO has reached a terminal state.
func (p *ReplicationProtectedItemsClientUpdateMobilityServicePoller) Done() bool {
	return p.pt.Done()
}

// Poll fetches the latest state of the LRO.  It returns an HTTP response or error.
// If the LRO has completed successfully, the poller's state is updated and the HTTP
// response is returned.
// If the LRO has completed with failure or was cancelled, the poller's state is
// updated and the error is returned.
// If the LRO has not reached a terminal state, the poller's state is updated and
// the latest HTTP response is returned.
// If Poll fails, the poller's state is unmodified and the error is returned.
// Calling Poll on an LRO that has reached a terminal state will return the final
// HTTP response or error.
func (p *ReplicationProtectedItemsClientUpdateMobilityServicePoller) Poll(ctx context.Context) (*http.Response, error) {
	return p.pt.Poll(ctx)
}

// FinalResponse performs a final GET to the service and returns the final response
// for the polling operation. If there is an error performing the final GET then an error is returned.
// If the final GET succeeded then the final ReplicationProtectedItemsClientUpdateMobilityServiceResponse will be returned.
func (p *ReplicationProtectedItemsClientUpdateMobilityServicePoller) FinalResponse(ctx context.Context) (ReplicationProtectedItemsClientUpdateMobilityServiceResponse, error) {
	respType := ReplicationProtectedItemsClientUpdateMobilityServiceResponse{}
	resp, err := p.pt.FinalResponse(ctx, &respType.ReplicationProtectedItem)
	if err != nil {
		return ReplicationProtectedItemsClientUpdateMobilityServiceResponse{}, err
	}
	respType.RawResponse = resp
	return respType, nil
}

// ResumeToken returns a value representing the poller that can be used to resume
// the LRO at a later time. ResumeTokens are unique per service operation.
func (p *ReplicationProtectedItemsClientUpdateMobilityServicePoller) ResumeToken() (string, error) {
	return p.pt.ResumeToken()
}

// ReplicationProtectedItemsClientUpdatePoller provides polling facilities until the operation reaches a terminal state.
type ReplicationProtectedItemsClientUpdatePoller struct {
	pt *azcore.Poller
}

// Done returns true if the LRO has reached a terminal state.
func (p *ReplicationProtectedItemsClientUpdatePoller) Done() bool {
	return p.pt.Done()
}

// Poll fetches the latest state of the LRO.  It returns an HTTP response or error.
// If the LRO has completed successfully, the poller's state is updated and the HTTP
// response is returned.
// If the LRO has completed with failure or was cancelled, the poller's state is
// updated and the error is returned.
// If the LRO has not reached a terminal state, the poller's state is updated and
// the latest HTTP response is returned.
// If Poll fails, the poller's state is unmodified and the error is returned.
// Calling Poll on an LRO that has reached a terminal state will return the final
// HTTP response or error.
func (p *ReplicationProtectedItemsClientUpdatePoller) Poll(ctx context.Context) (*http.Response, error) {
	return p.pt.Poll(ctx)
}

// FinalResponse performs a final GET to the service and returns the final response
// for the polling operation. If there is an error performing the final GET then an error is returned.
// If the final GET succeeded then the final ReplicationProtectedItemsClientUpdateResponse will be returned.
func (p *ReplicationProtectedItemsClientUpdatePoller) FinalResponse(ctx context.Context) (ReplicationProtectedItemsClientUpdateResponse, error) {
	respType := ReplicationProtectedItemsClientUpdateResponse{}
	resp, err := p.pt.FinalResponse(ctx, &respType.ReplicationProtectedItem)
	if err != nil {
		return ReplicationProtectedItemsClientUpdateResponse{}, err
	}
	respType.RawResponse = resp
	return respType, nil
}

// ResumeToken returns a value representing the poller that can be used to resume
// the LRO at a later time. ResumeTokens are unique per service operation.
func (p *ReplicationProtectedItemsClientUpdatePoller) ResumeToken() (string, error) {
	return p.pt.ResumeToken()
}

// ReplicationProtectionContainerMappingsClientCreatePoller provides polling facilities until the operation reaches a terminal state.
type ReplicationProtectionContainerMappingsClientCreatePoller struct {
	pt *azcore.Poller
}

// Done returns true if the LRO has reached a terminal state.
func (p *ReplicationProtectionContainerMappingsClientCreatePoller) Done() bool {
	return p.pt.Done()
}

// Poll fetches the latest state of the LRO.  It returns an HTTP response or error.
// If the LRO has completed successfully, the poller's state is updated and the HTTP
// response is returned.
// If the LRO has completed with failure or was cancelled, the poller's state is
// updated and the error is returned.
// If the LRO has not reached a terminal state, the poller's state is updated and
// the latest HTTP response is returned.
// If Poll fails, the poller's state is unmodified and the error is returned.
// Calling Poll on an LRO that has reached a terminal state will return the final
// HTTP response or error.
func (p *ReplicationProtectionContainerMappingsClientCreatePoller) Poll(ctx context.Context) (*http.Response, error) {
	return p.pt.Poll(ctx)
}

// FinalResponse performs a final GET to the service and returns the final response
// for the polling operation. If there is an error performing the final GET then an error is returned.
// If the final GET succeeded then the final ReplicationProtectionContainerMappingsClientCreateResponse will be returned.
func (p *ReplicationProtectionContainerMappingsClientCreatePoller) FinalResponse(ctx context.Context) (ReplicationProtectionContainerMappingsClientCreateResponse, error) {
	respType := ReplicationProtectionContainerMappingsClientCreateResponse{}
	resp, err := p.pt.FinalResponse(ctx, &respType.ProtectionContainerMapping)
	if err != nil {
		return ReplicationProtectionContainerMappingsClientCreateResponse{}, err
	}
	respType.RawResponse = resp
	return respType, nil
}

// ResumeToken returns a value representing the poller that can be used to resume
// the LRO at a later time. ResumeTokens are unique per service operation.
func (p *ReplicationProtectionContainerMappingsClientCreatePoller) ResumeToken() (string, error) {
	return p.pt.ResumeToken()
}

// ReplicationProtectionContainerMappingsClientDeletePoller provides polling facilities until the operation reaches a terminal state.
type ReplicationProtectionContainerMappingsClientDeletePoller struct {
	pt *azcore.Poller
}

// Done returns true if the LRO has reached a terminal state.
func (p *ReplicationProtectionContainerMappingsClientDeletePoller) Done() bool {
	return p.pt.Done()
}

// Poll fetches the latest state of the LRO.  It returns an HTTP response or error.
// If the LRO has completed successfully, the poller's state is updated and the HTTP
// response is returned.
// If the LRO has completed with failure or was cancelled, the poller's state is
// updated and the error is returned.
// If the LRO has not reached a terminal state, the poller's state is updated and
// the latest HTTP response is returned.
// If Poll fails, the poller's state is unmodified and the error is returned.
// Calling Poll on an LRO that has reached a terminal state will return the final
// HTTP response or error.
func (p *ReplicationProtectionContainerMappingsClientDeletePoller) Poll(ctx context.Context) (*http.Response, error) {
	return p.pt.Poll(ctx)
}

// FinalResponse performs a final GET to the service and returns the final response
// for the polling operation. If there is an error performing the final GET then an error is returned.
// If the final GET succeeded then the final ReplicationProtectionContainerMappingsClientDeleteResponse will be returned.
func (p *ReplicationProtectionContainerMappingsClientDeletePoller) FinalResponse(ctx context.Context) (ReplicationProtectionContainerMappingsClientDeleteResponse, error) {
	respType := ReplicationProtectionContainerMappingsClientDeleteResponse{}
	resp, err := p.pt.FinalResponse(ctx, nil)
	if err != nil {
		return ReplicationProtectionContainerMappingsClientDeleteResponse{}, err
	}
	respType.RawResponse = resp
	return respType, nil
}

// ResumeToken returns a value representing the poller that can be used to resume
// the LRO at a later time. ResumeTokens are unique per service operation.
func (p *ReplicationProtectionContainerMappingsClientDeletePoller) ResumeToken() (string, error) {
	return p.pt.ResumeToken()
}

// ReplicationProtectionContainerMappingsClientPurgePoller provides polling facilities until the operation reaches a terminal state.
type ReplicationProtectionContainerMappingsClientPurgePoller struct {
	pt *azcore.Poller
}

// Done returns true if the LRO has reached a terminal state.
func (p *ReplicationProtectionContainerMappingsClientPurgePoller) Done() bool {
	return p.pt.Done()
}

// Poll fetches the latest state of the LRO.  It returns an HTTP response or error.
// If the LRO has completed successfully, the poller's state is updated and the HTTP
// response is returned.
// If the LRO has completed with failure or was cancelled, the poller's state is
// updated and the error is returned.
// If the LRO has not reached a terminal state, the poller's state is updated and
// the latest HTTP response is returned.
// If Poll fails, the poller's state is unmodified and the error is returned.
// Calling Poll on an LRO that has reached a terminal state will return the final
// HTTP response or error.
func (p *ReplicationProtectionContainerMappingsClientPurgePoller) Poll(ctx context.Context) (*http.Response, error) {
	return p.pt.Poll(ctx)
}

// FinalResponse performs a final GET to the service and returns the final response
// for the polling operation. If there is an error performing the final GET then an error is returned.
// If the final GET succeeded then the final ReplicationProtectionContainerMappingsClientPurgeResponse will be returned.
func (p *ReplicationProtectionContainerMappingsClientPurgePoller) FinalResponse(ctx context.Context) (ReplicationProtectionContainerMappingsClientPurgeResponse, error) {
	respType := ReplicationProtectionContainerMappingsClientPurgeResponse{}
	resp, err := p.pt.FinalResponse(ctx, nil)
	if err != nil {
		return ReplicationProtectionContainerMappingsClientPurgeResponse{}, err
	}
	respType.RawResponse = resp
	return respType, nil
}

// ResumeToken returns a value representing the poller that can be used to resume
// the LRO at a later time. ResumeTokens are unique per service operation.
func (p *ReplicationProtectionContainerMappingsClientPurgePoller) ResumeToken() (string, error) {
	return p.pt.ResumeToken()
}

// ReplicationProtectionContainerMappingsClientUpdatePoller provides polling facilities until the operation reaches a terminal state.
type ReplicationProtectionContainerMappingsClientUpdatePoller struct {
	pt *azcore.Poller
}

// Done returns true if the LRO has reached a terminal state.
func (p *ReplicationProtectionContainerMappingsClientUpdatePoller) Done() bool {
	return p.pt.Done()
}

// Poll fetches the latest state of the LRO.  It returns an HTTP response or error.
// If the LRO has completed successfully, the poller's state is updated and the HTTP
// response is returned.
// If the LRO has completed with failure or was cancelled, the poller's state is
// updated and the error is returned.
// If the LRO has not reached a terminal state, the poller's state is updated and
// the latest HTTP response is returned.
// If Poll fails, the poller's state is unmodified and the error is returned.
// Calling Poll on an LRO that has reached a terminal state will return the final
// HTTP response or error.
func (p *ReplicationProtectionContainerMappingsClientUpdatePoller) Poll(ctx context.Context) (*http.Response, error) {
	return p.pt.Poll(ctx)
}

// FinalResponse performs a final GET to the service and returns the final response
// for the polling operation. If there is an error performing the final GET then an error is returned.
// If the final GET succeeded then the final ReplicationProtectionContainerMappingsClientUpdateResponse will be returned.
func (p *ReplicationProtectionContainerMappingsClientUpdatePoller) FinalResponse(ctx context.Context) (ReplicationProtectionContainerMappingsClientUpdateResponse, error) {
	respType := ReplicationProtectionContainerMappingsClientUpdateResponse{}
	resp, err := p.pt.FinalResponse(ctx, &respType.ProtectionContainerMapping)
	if err != nil {
		return ReplicationProtectionContainerMappingsClientUpdateResponse{}, err
	}
	respType.RawResponse = resp
	return respType, nil
}

// ResumeToken returns a value representing the poller that can be used to resume
// the LRO at a later time. ResumeTokens are unique per service operation.
func (p *ReplicationProtectionContainerMappingsClientUpdatePoller) ResumeToken() (string, error) {
	return p.pt.ResumeToken()
}

// ReplicationProtectionContainersClientCreatePoller provides polling facilities until the operation reaches a terminal state.
type ReplicationProtectionContainersClientCreatePoller struct {
	pt *azcore.Poller
}

// Done returns true if the LRO has reached a terminal state.
func (p *ReplicationProtectionContainersClientCreatePoller) Done() bool {
	return p.pt.Done()
}

// Poll fetches the latest state of the LRO.  It returns an HTTP response or error.
// If the LRO has completed successfully, the poller's state is updated and the HTTP
// response is returned.
// If the LRO has completed with failure or was cancelled, the poller's state is
// updated and the error is returned.
// If the LRO has not reached a terminal state, the poller's state is updated and
// the latest HTTP response is returned.
// If Poll fails, the poller's state is unmodified and the error is returned.
// Calling Poll on an LRO that has reached a terminal state will return the final
// HTTP response or error.
func (p *ReplicationProtectionContainersClientCreatePoller) Poll(ctx context.Context) (*http.Response, error) {
	return p.pt.Poll(ctx)
}

// FinalResponse performs a final GET to the service and returns the final response
// for the polling operation. If there is an error performing the final GET then an error is returned.
// If the final GET succeeded then the final ReplicationProtectionContainersClientCreateResponse will be returned.
func (p *ReplicationProtectionContainersClientCreatePoller) FinalResponse(ctx context.Context) (ReplicationProtectionContainersClientCreateResponse, error) {
	respType := ReplicationProtectionContainersClientCreateResponse{}
	resp, err := p.pt.FinalResponse(ctx, &respType.ProtectionContainer)
	if err != nil {
		return ReplicationProtectionContainersClientCreateResponse{}, err
	}
	respType.RawResponse = resp
	return respType, nil
}

// ResumeToken returns a value representing the poller that can be used to resume
// the LRO at a later time. ResumeTokens are unique per service operation.
func (p *ReplicationProtectionContainersClientCreatePoller) ResumeToken() (string, error) {
	return p.pt.ResumeToken()
}

// ReplicationProtectionContainersClientDeletePoller provides polling facilities until the operation reaches a terminal state.
type ReplicationProtectionContainersClientDeletePoller struct {
	pt *azcore.Poller
}

// Done returns true if the LRO has reached a terminal state.
func (p *ReplicationProtectionContainersClientDeletePoller) Done() bool {
	return p.pt.Done()
}

// Poll fetches the latest state of the LRO.  It returns an HTTP response or error.
// If the LRO has completed successfully, the poller's state is updated and the HTTP
// response is returned.
// If the LRO has completed with failure or was cancelled, the poller's state is
// updated and the error is returned.
// If the LRO has not reached a terminal state, the poller's state is updated and
// the latest HTTP response is returned.
// If Poll fails, the poller's state is unmodified and the error is returned.
// Calling Poll on an LRO that has reached a terminal state will return the final
// HTTP response or error.
func (p *ReplicationProtectionContainersClientDeletePoller) Poll(ctx context.Context) (*http.Response, error) {
	return p.pt.Poll(ctx)
}

// FinalResponse performs a final GET to the service and returns the final response
// for the polling operation. If there is an error performing the final GET then an error is returned.
// If the final GET succeeded then the final ReplicationProtectionContainersClientDeleteResponse will be returned.
func (p *ReplicationProtectionContainersClientDeletePoller) FinalResponse(ctx context.Context) (ReplicationProtectionContainersClientDeleteResponse, error) {
	respType := ReplicationProtectionContainersClientDeleteResponse{}
	resp, err := p.pt.FinalResponse(ctx, nil)
	if err != nil {
		return ReplicationProtectionContainersClientDeleteResponse{}, err
	}
	respType.RawResponse = resp
	return respType, nil
}

// ResumeToken returns a value representing the poller that can be used to resume
// the LRO at a later time. ResumeTokens are unique per service operation.
func (p *ReplicationProtectionContainersClientDeletePoller) ResumeToken() (string, error) {
	return p.pt.ResumeToken()
}

// ReplicationProtectionContainersClientDiscoverProtectableItemPoller provides polling facilities until the operation reaches a terminal state.
type ReplicationProtectionContainersClientDiscoverProtectableItemPoller struct {
	pt *azcore.Poller
}

// Done returns true if the LRO has reached a terminal state.
func (p *ReplicationProtectionContainersClientDiscoverProtectableItemPoller) Done() bool {
	return p.pt.Done()
}

// Poll fetches the latest state of the LRO.  It returns an HTTP response or error.
// If the LRO has completed successfully, the poller's state is updated and the HTTP
// response is returned.
// If the LRO has completed with failure or was cancelled, the poller's state is
// updated and the error is returned.
// If the LRO has not reached a terminal state, the poller's state is updated and
// the latest HTTP response is returned.
// If Poll fails, the poller's state is unmodified and the error is returned.
// Calling Poll on an LRO that has reached a terminal state will return the final
// HTTP response or error.
func (p *ReplicationProtectionContainersClientDiscoverProtectableItemPoller) Poll(ctx context.Context) (*http.Response, error) {
	return p.pt.Poll(ctx)
}

// FinalResponse performs a final GET to the service and returns the final response
// for the polling operation. If there is an error performing the final GET then an error is returned.
// If the final GET succeeded then the final ReplicationProtectionContainersClientDiscoverProtectableItemResponse will be returned.
func (p *ReplicationProtectionContainersClientDiscoverProtectableItemPoller) FinalResponse(ctx context.Context) (ReplicationProtectionContainersClientDiscoverProtectableItemResponse, error) {
	respType := ReplicationProtectionContainersClientDiscoverProtectableItemResponse{}
	resp, err := p.pt.FinalResponse(ctx, &respType.ProtectionContainer)
	if err != nil {
		return ReplicationProtectionContainersClientDiscoverProtectableItemResponse{}, err
	}
	respType.RawResponse = resp
	return respType, nil
}

// ResumeToken returns a value representing the poller that can be used to resume
// the LRO at a later time. ResumeTokens are unique per service operation.
func (p *ReplicationProtectionContainersClientDiscoverProtectableItemPoller) ResumeToken() (string, error) {
	return p.pt.ResumeToken()
}

// ReplicationProtectionContainersClientSwitchProtectionPoller provides polling facilities until the operation reaches a terminal state.
type ReplicationProtectionContainersClientSwitchProtectionPoller struct {
	pt *azcore.Poller
}

// Done returns true if the LRO has reached a terminal state.
func (p *ReplicationProtectionContainersClientSwitchProtectionPoller) Done() bool {
	return p.pt.Done()
}

// Poll fetches the latest state of the LRO.  It returns an HTTP response or error.
// If the LRO has completed successfully, the poller's state is updated and the HTTP
// response is returned.
// If the LRO has completed with failure or was cancelled, the poller's state is
// updated and the error is returned.
// If the LRO has not reached a terminal state, the poller's state is updated and
// the latest HTTP response is returned.
// If Poll fails, the poller's state is unmodified and the error is returned.
// Calling Poll on an LRO that has reached a terminal state will return the final
// HTTP response or error.
func (p *ReplicationProtectionContainersClientSwitchProtectionPoller) Poll(ctx context.Context) (*http.Response, error) {
	return p.pt.Poll(ctx)
}

// FinalResponse performs a final GET to the service and returns the final response
// for the polling operation. If there is an error performing the final GET then an error is returned.
// If the final GET succeeded then the final ReplicationProtectionContainersClientSwitchProtectionResponse will be returned.
func (p *ReplicationProtectionContainersClientSwitchProtectionPoller) FinalResponse(ctx context.Context) (ReplicationProtectionContainersClientSwitchProtectionResponse, error) {
	respType := ReplicationProtectionContainersClientSwitchProtectionResponse{}
	resp, err := p.pt.FinalResponse(ctx, &respType.ProtectionContainer)
	if err != nil {
		return ReplicationProtectionContainersClientSwitchProtectionResponse{}, err
	}
	respType.RawResponse = resp
	return respType, nil
}

// ResumeToken returns a value representing the poller that can be used to resume
// the LRO at a later time. ResumeTokens are unique per service operation.
func (p *ReplicationProtectionContainersClientSwitchProtectionPoller) ResumeToken() (string, error) {
	return p.pt.ResumeToken()
}

// ReplicationRecoveryPlansClientCreatePoller provides polling facilities until the operation reaches a terminal state.
type ReplicationRecoveryPlansClientCreatePoller struct {
	pt *azcore.Poller
}

// Done returns true if the LRO has reached a terminal state.
func (p *ReplicationRecoveryPlansClientCreatePoller) Done() bool {
	return p.pt.Done()
}

// Poll fetches the latest state of the LRO.  It returns an HTTP response or error.
// If the LRO has completed successfully, the poller's state is updated and the HTTP
// response is returned.
// If the LRO has completed with failure or was cancelled, the poller's state is
// updated and the error is returned.
// If the LRO has not reached a terminal state, the poller's state is updated and
// the latest HTTP response is returned.
// If Poll fails, the poller's state is unmodified and the error is returned.
// Calling Poll on an LRO that has reached a terminal state will return the final
// HTTP response or error.
func (p *ReplicationRecoveryPlansClientCreatePoller) Poll(ctx context.Context) (*http.Response, error) {
	return p.pt.Poll(ctx)
}

// FinalResponse performs a final GET to the service and returns the final response
// for the polling operation. If there is an error performing the final GET then an error is returned.
// If the final GET succeeded then the final ReplicationRecoveryPlansClientCreateResponse will be returned.
func (p *ReplicationRecoveryPlansClientCreatePoller) FinalResponse(ctx context.Context) (ReplicationRecoveryPlansClientCreateResponse, error) {
	respType := ReplicationRecoveryPlansClientCreateResponse{}
	resp, err := p.pt.FinalResponse(ctx, &respType.RecoveryPlan)
	if err != nil {
		return ReplicationRecoveryPlansClientCreateResponse{}, err
	}
	respType.RawResponse = resp
	return respType, nil
}

// ResumeToken returns a value representing the poller that can be used to resume
// the LRO at a later time. ResumeTokens are unique per service operation.
func (p *ReplicationRecoveryPlansClientCreatePoller) ResumeToken() (string, error) {
	return p.pt.ResumeToken()
}

// ReplicationRecoveryPlansClientDeletePoller provides polling facilities until the operation reaches a terminal state.
type ReplicationRecoveryPlansClientDeletePoller struct {
	pt *azcore.Poller
}

// Done returns true if the LRO has reached a terminal state.
func (p *ReplicationRecoveryPlansClientDeletePoller) Done() bool {
	return p.pt.Done()
}

// Poll fetches the latest state of the LRO.  It returns an HTTP response or error.
// If the LRO has completed successfully, the poller's state is updated and the HTTP
// response is returned.
// If the LRO has completed with failure or was cancelled, the poller's state is
// updated and the error is returned.
// If the LRO has not reached a terminal state, the poller's state is updated and
// the latest HTTP response is returned.
// If Poll fails, the poller's state is unmodified and the error is returned.
// Calling Poll on an LRO that has reached a terminal state will return the final
// HTTP response or error.
func (p *ReplicationRecoveryPlansClientDeletePoller) Poll(ctx context.Context) (*http.Response, error) {
	return p.pt.Poll(ctx)
}

// FinalResponse performs a final GET to the service and returns the final response
// for the polling operation. If there is an error performing the final GET then an error is returned.
// If the final GET succeeded then the final ReplicationRecoveryPlansClientDeleteResponse will be returned.
func (p *ReplicationRecoveryPlansClientDeletePoller) FinalResponse(ctx context.Context) (ReplicationRecoveryPlansClientDeleteResponse, error) {
	respType := ReplicationRecoveryPlansClientDeleteResponse{}
	resp, err := p.pt.FinalResponse(ctx, nil)
	if err != nil {
		return ReplicationRecoveryPlansClientDeleteResponse{}, err
	}
	respType.RawResponse = resp
	return respType, nil
}

// ResumeToken returns a value representing the poller that can be used to resume
// the LRO at a later time. ResumeTokens are unique per service operation.
func (p *ReplicationRecoveryPlansClientDeletePoller) ResumeToken() (string, error) {
	return p.pt.ResumeToken()
}

// ReplicationRecoveryPlansClientFailoverCancelPoller provides polling facilities until the operation reaches a terminal state.
type ReplicationRecoveryPlansClientFailoverCancelPoller struct {
	pt *azcore.Poller
}

// Done returns true if the LRO has reached a terminal state.
func (p *ReplicationRecoveryPlansClientFailoverCancelPoller) Done() bool {
	return p.pt.Done()
}

// Poll fetches the latest state of the LRO.  It returns an HTTP response or error.
// If the LRO has completed successfully, the poller's state is updated and the HTTP
// response is returned.
// If the LRO has completed with failure or was cancelled, the poller's state is
// updated and the error is returned.
// If the LRO has not reached a terminal state, the poller's state is updated and
// the latest HTTP response is returned.
// If Poll fails, the poller's state is unmodified and the error is returned.
// Calling Poll on an LRO that has reached a terminal state will return the final
// HTTP response or error.
func (p *ReplicationRecoveryPlansClientFailoverCancelPoller) Poll(ctx context.Context) (*http.Response, error) {
	return p.pt.Poll(ctx)
}

// FinalResponse performs a final GET to the service and returns the final response
// for the polling operation. If there is an error performing the final GET then an error is returned.
// If the final GET succeeded then the final ReplicationRecoveryPlansClientFailoverCancelResponse will be returned.
func (p *ReplicationRecoveryPlansClientFailoverCancelPoller) FinalResponse(ctx context.Context) (ReplicationRecoveryPlansClientFailoverCancelResponse, error) {
	respType := ReplicationRecoveryPlansClientFailoverCancelResponse{}
	resp, err := p.pt.FinalResponse(ctx, &respType.RecoveryPlan)
	if err != nil {
		return ReplicationRecoveryPlansClientFailoverCancelResponse{}, err
	}
	respType.RawResponse = resp
	return respType, nil
}

// ResumeToken returns a value representing the poller that can be used to resume
// the LRO at a later time. ResumeTokens are unique per service operation.
func (p *ReplicationRecoveryPlansClientFailoverCancelPoller) ResumeToken() (string, error) {
	return p.pt.ResumeToken()
}

// ReplicationRecoveryPlansClientFailoverCommitPoller provides polling facilities until the operation reaches a terminal state.
type ReplicationRecoveryPlansClientFailoverCommitPoller struct {
	pt *azcore.Poller
}

// Done returns true if the LRO has reached a terminal state.
func (p *ReplicationRecoveryPlansClientFailoverCommitPoller) Done() bool {
	return p.pt.Done()
}

// Poll fetches the latest state of the LRO.  It returns an HTTP response or error.
// If the LRO has completed successfully, the poller's state is updated and the HTTP
// response is returned.
// If the LRO has completed with failure or was cancelled, the poller's state is
// updated and the error is returned.
// If the LRO has not reached a terminal state, the poller's state is updated and
// the latest HTTP response is returned.
// If Poll fails, the poller's state is unmodified and the error is returned.
// Calling Poll on an LRO that has reached a terminal state will return the final
// HTTP response or error.
func (p *ReplicationRecoveryPlansClientFailoverCommitPoller) Poll(ctx context.Context) (*http.Response, error) {
	return p.pt.Poll(ctx)
}

// FinalResponse performs a final GET to the service and returns the final response
// for the polling operation. If there is an error performing the final GET then an error is returned.
// If the final GET succeeded then the final ReplicationRecoveryPlansClientFailoverCommitResponse will be returned.
func (p *ReplicationRecoveryPlansClientFailoverCommitPoller) FinalResponse(ctx context.Context) (ReplicationRecoveryPlansClientFailoverCommitResponse, error) {
	respType := ReplicationRecoveryPlansClientFailoverCommitResponse{}
	resp, err := p.pt.FinalResponse(ctx, &respType.RecoveryPlan)
	if err != nil {
		return ReplicationRecoveryPlansClientFailoverCommitResponse{}, err
	}
	respType.RawResponse = resp
	return respType, nil
}

// ResumeToken returns a value representing the poller that can be used to resume
// the LRO at a later time. ResumeTokens are unique per service operation.
func (p *ReplicationRecoveryPlansClientFailoverCommitPoller) ResumeToken() (string, error) {
	return p.pt.ResumeToken()
}

// ReplicationRecoveryPlansClientPlannedFailoverPoller provides polling facilities until the operation reaches a terminal state.
type ReplicationRecoveryPlansClientPlannedFailoverPoller struct {
	pt *azcore.Poller
}

// Done returns true if the LRO has reached a terminal state.
func (p *ReplicationRecoveryPlansClientPlannedFailoverPoller) Done() bool {
	return p.pt.Done()
}

// Poll fetches the latest state of the LRO.  It returns an HTTP response or error.
// If the LRO has completed successfully, the poller's state is updated and the HTTP
// response is returned.
// If the LRO has completed with failure or was cancelled, the poller's state is
// updated and the error is returned.
// If the LRO has not reached a terminal state, the poller's state is updated and
// the latest HTTP response is returned.
// If Poll fails, the poller's state is unmodified and the error is returned.
// Calling Poll on an LRO that has reached a terminal state will return the final
// HTTP response or error.
func (p *ReplicationRecoveryPlansClientPlannedFailoverPoller) Poll(ctx context.Context) (*http.Response, error) {
	return p.pt.Poll(ctx)
}

// FinalResponse performs a final GET to the service and returns the final response
// for the polling operation. If there is an error performing the final GET then an error is returned.
// If the final GET succeeded then the final ReplicationRecoveryPlansClientPlannedFailoverResponse will be returned.
func (p *ReplicationRecoveryPlansClientPlannedFailoverPoller) FinalResponse(ctx context.Context) (ReplicationRecoveryPlansClientPlannedFailoverResponse, error) {
	respType := ReplicationRecoveryPlansClientPlannedFailoverResponse{}
	resp, err := p.pt.FinalResponse(ctx, &respType.RecoveryPlan)
	if err != nil {
		return ReplicationRecoveryPlansClientPlannedFailoverResponse{}, err
	}
	respType.RawResponse = resp
	return respType, nil
}

// ResumeToken returns a value representing the poller that can be used to resume
// the LRO at a later time. ResumeTokens are unique per service operation.
func (p *ReplicationRecoveryPlansClientPlannedFailoverPoller) ResumeToken() (string, error) {
	return p.pt.ResumeToken()
}

// ReplicationRecoveryPlansClientReprotectPoller provides polling facilities until the operation reaches a terminal state.
type ReplicationRecoveryPlansClientReprotectPoller struct {
	pt *azcore.Poller
}

// Done returns true if the LRO has reached a terminal state.
func (p *ReplicationRecoveryPlansClientReprotectPoller) Done() bool {
	return p.pt.Done()
}

// Poll fetches the latest state of the LRO.  It returns an HTTP response or error.
// If the LRO has completed successfully, the poller's state is updated and the HTTP
// response is returned.
// If the LRO has completed with failure or was cancelled, the poller's state is
// updated and the error is returned.
// If the LRO has not reached a terminal state, the poller's state is updated and
// the latest HTTP response is returned.
// If Poll fails, the poller's state is unmodified and the error is returned.
// Calling Poll on an LRO that has reached a terminal state will return the final
// HTTP response or error.
func (p *ReplicationRecoveryPlansClientReprotectPoller) Poll(ctx context.Context) (*http.Response, error) {
	return p.pt.Poll(ctx)
}

// FinalResponse performs a final GET to the service and returns the final response
// for the polling operation. If there is an error performing the final GET then an error is returned.
// If the final GET succeeded then the final ReplicationRecoveryPlansClientReprotectResponse will be returned.
func (p *ReplicationRecoveryPlansClientReprotectPoller) FinalResponse(ctx context.Context) (ReplicationRecoveryPlansClientReprotectResponse, error) {
	respType := ReplicationRecoveryPlansClientReprotectResponse{}
	resp, err := p.pt.FinalResponse(ctx, &respType.RecoveryPlan)
	if err != nil {
		return ReplicationRecoveryPlansClientReprotectResponse{}, err
	}
	respType.RawResponse = resp
	return respType, nil
}

// ResumeToken returns a value representing the poller that can be used to resume
// the LRO at a later time. ResumeTokens are unique per service operation.
func (p *ReplicationRecoveryPlansClientReprotectPoller) ResumeToken() (string, error) {
	return p.pt.ResumeToken()
}

// ReplicationRecoveryPlansClientTestFailoverCleanupPoller provides polling facilities until the operation reaches a terminal state.
type ReplicationRecoveryPlansClientTestFailoverCleanupPoller struct {
	pt *azcore.Poller
}

// Done returns true if the LRO has reached a terminal state.
func (p *ReplicationRecoveryPlansClientTestFailoverCleanupPoller) Done() bool {
	return p.pt.Done()
}

// Poll fetches the latest state of the LRO.  It returns an HTTP response or error.
// If the LRO has completed successfully, the poller's state is updated and the HTTP
// response is returned.
// If the LRO has completed with failure or was cancelled, the poller's state is
// updated and the error is returned.
// If the LRO has not reached a terminal state, the poller's state is updated and
// the latest HTTP response is returned.
// If Poll fails, the poller's state is unmodified and the error is returned.
// Calling Poll on an LRO that has reached a terminal state will return the final
// HTTP response or error.
func (p *ReplicationRecoveryPlansClientTestFailoverCleanupPoller) Poll(ctx context.Context) (*http.Response, error) {
	return p.pt.Poll(ctx)
}

// FinalResponse performs a final GET to the service and returns the final response
// for the polling operation. If there is an error performing the final GET then an error is returned.
// If the final GET succeeded then the final ReplicationRecoveryPlansClientTestFailoverCleanupResponse will be returned.
func (p *ReplicationRecoveryPlansClientTestFailoverCleanupPoller) FinalResponse(ctx context.Context) (ReplicationRecoveryPlansClientTestFailoverCleanupResponse, error) {
	respType := ReplicationRecoveryPlansClientTestFailoverCleanupResponse{}
	resp, err := p.pt.FinalResponse(ctx, &respType.RecoveryPlan)
	if err != nil {
		return ReplicationRecoveryPlansClientTestFailoverCleanupResponse{}, err
	}
	respType.RawResponse = resp
	return respType, nil
}

// ResumeToken returns a value representing the poller that can be used to resume
// the LRO at a later time. ResumeTokens are unique per service operation.
func (p *ReplicationRecoveryPlansClientTestFailoverCleanupPoller) ResumeToken() (string, error) {
	return p.pt.ResumeToken()
}

// ReplicationRecoveryPlansClientTestFailoverPoller provides polling facilities until the operation reaches a terminal state.
type ReplicationRecoveryPlansClientTestFailoverPoller struct {
	pt *azcore.Poller
}

// Done returns true if the LRO has reached a terminal state.
func (p *ReplicationRecoveryPlansClientTestFailoverPoller) Done() bool {
	return p.pt.Done()
}

// Poll fetches the latest state of the LRO.  It returns an HTTP response or error.
// If the LRO has completed successfully, the poller's state is updated and the HTTP
// response is returned.
// If the LRO has completed with failure or was cancelled, the poller's state is
// updated and the error is returned.
// If the LRO has not reached a terminal state, the poller's state is updated and
// the latest HTTP response is returned.
// If Poll fails, the poller's state is unmodified and the error is returned.
// Calling Poll on an LRO that has reached a terminal state will return the final
// HTTP response or error.
func (p *ReplicationRecoveryPlansClientTestFailoverPoller) Poll(ctx context.Context) (*http.Response, error) {
	return p.pt.Poll(ctx)
}

// FinalResponse performs a final GET to the service and returns the final response
// for the polling operation. If there is an error performing the final GET then an error is returned.
// If the final GET succeeded then the final ReplicationRecoveryPlansClientTestFailoverResponse will be returned.
func (p *ReplicationRecoveryPlansClientTestFailoverPoller) FinalResponse(ctx context.Context) (ReplicationRecoveryPlansClientTestFailoverResponse, error) {
	respType := ReplicationRecoveryPlansClientTestFailoverResponse{}
	resp, err := p.pt.FinalResponse(ctx, &respType.RecoveryPlan)
	if err != nil {
		return ReplicationRecoveryPlansClientTestFailoverResponse{}, err
	}
	respType.RawResponse = resp
	return respType, nil
}

// ResumeToken returns a value representing the poller that can be used to resume
// the LRO at a later time. ResumeTokens are unique per service operation.
func (p *ReplicationRecoveryPlansClientTestFailoverPoller) ResumeToken() (string, error) {
	return p.pt.ResumeToken()
}

// ReplicationRecoveryPlansClientUnplannedFailoverPoller provides polling facilities until the operation reaches a terminal state.
type ReplicationRecoveryPlansClientUnplannedFailoverPoller struct {
	pt *azcore.Poller
}

// Done returns true if the LRO has reached a terminal state.
func (p *ReplicationRecoveryPlansClientUnplannedFailoverPoller) Done() bool {
	return p.pt.Done()
}

// Poll fetches the latest state of the LRO.  It returns an HTTP response or error.
// If the LRO has completed successfully, the poller's state is updated and the HTTP
// response is returned.
// If the LRO has completed with failure or was cancelled, the poller's state is
// updated and the error is returned.
// If the LRO has not reached a terminal state, the poller's state is updated and
// the latest HTTP response is returned.
// If Poll fails, the poller's state is unmodified and the error is returned.
// Calling Poll on an LRO that has reached a terminal state will return the final
// HTTP response or error.
func (p *ReplicationRecoveryPlansClientUnplannedFailoverPoller) Poll(ctx context.Context) (*http.Response, error) {
	return p.pt.Poll(ctx)
}

// FinalResponse performs a final GET to the service and returns the final response
// for the polling operation. If there is an error performing the final GET then an error is returned.
// If the final GET succeeded then the final ReplicationRecoveryPlansClientUnplannedFailoverResponse will be returned.
func (p *ReplicationRecoveryPlansClientUnplannedFailoverPoller) FinalResponse(ctx context.Context) (ReplicationRecoveryPlansClientUnplannedFailoverResponse, error) {
	respType := ReplicationRecoveryPlansClientUnplannedFailoverResponse{}
	resp, err := p.pt.FinalResponse(ctx, &respType.RecoveryPlan)
	if err != nil {
		return ReplicationRecoveryPlansClientUnplannedFailoverResponse{}, err
	}
	respType.RawResponse = resp
	return respType, nil
}

// ResumeToken returns a value representing the poller that can be used to resume
// the LRO at a later time. ResumeTokens are unique per service operation.
func (p *ReplicationRecoveryPlansClientUnplannedFailoverPoller) ResumeToken() (string, error) {
	return p.pt.ResumeToken()
}

// ReplicationRecoveryPlansClientUpdatePoller provides polling facilities until the operation reaches a terminal state.
type ReplicationRecoveryPlansClientUpdatePoller struct {
	pt *azcore.Poller
}

// Done returns true if the LRO has reached a terminal state.
func (p *ReplicationRecoveryPlansClientUpdatePoller) Done() bool {
	return p.pt.Done()
}

// Poll fetches the latest state of the LRO.  It returns an HTTP response or error.
// If the LRO has completed successfully, the poller's state is updated and the HTTP
// response is returned.
// If the LRO has completed with failure or was cancelled, the poller's state is
// updated and the error is returned.
// If the LRO has not reached a terminal state, the poller's state is updated and
// the latest HTTP response is returned.
// If Poll fails, the poller's state is unmodified and the error is returned.
// Calling Poll on an LRO that has reached a terminal state will return the final
// HTTP response or error.
func (p *ReplicationRecoveryPlansClientUpdatePoller) Poll(ctx context.Context) (*http.Response, error) {
	return p.pt.Poll(ctx)
}

// FinalResponse performs a final GET to the service and returns the final response
// for the polling operation. If there is an error performing the final GET then an error is returned.
// If the final GET succeeded then the final ReplicationRecoveryPlansClientUpdateResponse will be returned.
func (p *ReplicationRecoveryPlansClientUpdatePoller) FinalResponse(ctx context.Context) (ReplicationRecoveryPlansClientUpdateResponse, error) {
	respType := ReplicationRecoveryPlansClientUpdateResponse{}
	resp, err := p.pt.FinalResponse(ctx, &respType.RecoveryPlan)
	if err != nil {
		return ReplicationRecoveryPlansClientUpdateResponse{}, err
	}
	respType.RawResponse = resp
	return respType, nil
}

// ResumeToken returns a value representing the poller that can be used to resume
// the LRO at a later time. ResumeTokens are unique per service operation.
func (p *ReplicationRecoveryPlansClientUpdatePoller) ResumeToken() (string, error) {
	return p.pt.ResumeToken()
}

// ReplicationRecoveryServicesProvidersClientCreatePoller provides polling facilities until the operation reaches a terminal state.
type ReplicationRecoveryServicesProvidersClientCreatePoller struct {
	pt *azcore.Poller
}

// Done returns true if the LRO has reached a terminal state.
func (p *ReplicationRecoveryServicesProvidersClientCreatePoller) Done() bool {
	return p.pt.Done()
}

// Poll fetches the latest state of the LRO.  It returns an HTTP response or error.
// If the LRO has completed successfully, the poller's state is updated and the HTTP
// response is returned.
// If the LRO has completed with failure or was cancelled, the poller's state is
// updated and the error is returned.
// If the LRO has not reached a terminal state, the poller's state is updated and
// the latest HTTP response is returned.
// If Poll fails, the poller's state is unmodified and the error is returned.
// Calling Poll on an LRO that has reached a terminal state will return the final
// HTTP response or error.
func (p *ReplicationRecoveryServicesProvidersClientCreatePoller) Poll(ctx context.Context) (*http.Response, error) {
	return p.pt.Poll(ctx)
}

// FinalResponse performs a final GET to the service and returns the final response
// for the polling operation. If there is an error performing the final GET then an error is returned.
// If the final GET succeeded then the final ReplicationRecoveryServicesProvidersClientCreateResponse will be returned.
func (p *ReplicationRecoveryServicesProvidersClientCreatePoller) FinalResponse(ctx context.Context) (ReplicationRecoveryServicesProvidersClientCreateResponse, error) {
	respType := ReplicationRecoveryServicesProvidersClientCreateResponse{}
	resp, err := p.pt.FinalResponse(ctx, &respType.RecoveryServicesProvider)
	if err != nil {
		return ReplicationRecoveryServicesProvidersClientCreateResponse{}, err
	}
	respType.RawResponse = resp
	return respType, nil
}

// ResumeToken returns a value representing the poller that can be used to resume
// the LRO at a later time. ResumeTokens are unique per service operation.
func (p *ReplicationRecoveryServicesProvidersClientCreatePoller) ResumeToken() (string, error) {
	return p.pt.ResumeToken()
}

// ReplicationRecoveryServicesProvidersClientDeletePoller provides polling facilities until the operation reaches a terminal state.
type ReplicationRecoveryServicesProvidersClientDeletePoller struct {
	pt *azcore.Poller
}

// Done returns true if the LRO has reached a terminal state.
func (p *ReplicationRecoveryServicesProvidersClientDeletePoller) Done() bool {
	return p.pt.Done()
}

// Poll fetches the latest state of the LRO.  It returns an HTTP response or error.
// If the LRO has completed successfully, the poller's state is updated and the HTTP
// response is returned.
// If the LRO has completed with failure or was cancelled, the poller's state is
// updated and the error is returned.
// If the LRO has not reached a terminal state, the poller's state is updated and
// the latest HTTP response is returned.
// If Poll fails, the poller's state is unmodified and the error is returned.
// Calling Poll on an LRO that has reached a terminal state will return the final
// HTTP response or error.
func (p *ReplicationRecoveryServicesProvidersClientDeletePoller) Poll(ctx context.Context) (*http.Response, error) {
	return p.pt.Poll(ctx)
}

// FinalResponse performs a final GET to the service and returns the final response
// for the polling operation. If there is an error performing the final GET then an error is returned.
// If the final GET succeeded then the final ReplicationRecoveryServicesProvidersClientDeleteResponse will be returned.
func (p *ReplicationRecoveryServicesProvidersClientDeletePoller) FinalResponse(ctx context.Context) (ReplicationRecoveryServicesProvidersClientDeleteResponse, error) {
	respType := ReplicationRecoveryServicesProvidersClientDeleteResponse{}
	resp, err := p.pt.FinalResponse(ctx, nil)
	if err != nil {
		return ReplicationRecoveryServicesProvidersClientDeleteResponse{}, err
	}
	respType.RawResponse = resp
	return respType, nil
}

// ResumeToken returns a value representing the poller that can be used to resume
// the LRO at a later time. ResumeTokens are unique per service operation.
func (p *ReplicationRecoveryServicesProvidersClientDeletePoller) ResumeToken() (string, error) {
	return p.pt.ResumeToken()
}

// ReplicationRecoveryServicesProvidersClientPurgePoller provides polling facilities until the operation reaches a terminal state.
type ReplicationRecoveryServicesProvidersClientPurgePoller struct {
	pt *azcore.Poller
}

// Done returns true if the LRO has reached a terminal state.
func (p *ReplicationRecoveryServicesProvidersClientPurgePoller) Done() bool {
	return p.pt.Done()
}

// Poll fetches the latest state of the LRO.  It returns an HTTP response or error.
// If the LRO has completed successfully, the poller's state is updated and the HTTP
// response is returned.
// If the LRO has completed with failure or was cancelled, the poller's state is
// updated and the error is returned.
// If the LRO has not reached a terminal state, the poller's state is updated and
// the latest HTTP response is returned.
// If Poll fails, the poller's state is unmodified and the error is returned.
// Calling Poll on an LRO that has reached a terminal state will return the final
// HTTP response or error.
func (p *ReplicationRecoveryServicesProvidersClientPurgePoller) Poll(ctx context.Context) (*http.Response, error) {
	return p.pt.Poll(ctx)
}

// FinalResponse performs a final GET to the service and returns the final response
// for the polling operation. If there is an error performing the final GET then an error is returned.
// If the final GET succeeded then the final ReplicationRecoveryServicesProvidersClientPurgeResponse will be returned.
func (p *ReplicationRecoveryServicesProvidersClientPurgePoller) FinalResponse(ctx context.Context) (ReplicationRecoveryServicesProvidersClientPurgeResponse, error) {
	respType := ReplicationRecoveryServicesProvidersClientPurgeResponse{}
	resp, err := p.pt.FinalResponse(ctx, nil)
	if err != nil {
		return ReplicationRecoveryServicesProvidersClientPurgeResponse{}, err
	}
	respType.RawResponse = resp
	return respType, nil
}

// ResumeToken returns a value representing the poller that can be used to resume
// the LRO at a later time. ResumeTokens are unique per service operation.
func (p *ReplicationRecoveryServicesProvidersClientPurgePoller) ResumeToken() (string, error) {
	return p.pt.ResumeToken()
}

// ReplicationRecoveryServicesProvidersClientRefreshProviderPoller provides polling facilities until the operation reaches a terminal state.
type ReplicationRecoveryServicesProvidersClientRefreshProviderPoller struct {
	pt *azcore.Poller
}

// Done returns true if the LRO has reached a terminal state.
func (p *ReplicationRecoveryServicesProvidersClientRefreshProviderPoller) Done() bool {
	return p.pt.Done()
}

// Poll fetches the latest state of the LRO.  It returns an HTTP response or error.
// If the LRO has completed successfully, the poller's state is updated and the HTTP
// response is returned.
// If the LRO has completed with failure or was cancelled, the poller's state is
// updated and the error is returned.
// If the LRO has not reached a terminal state, the poller's state is updated and
// the latest HTTP response is returned.
// If Poll fails, the poller's state is unmodified and the error is returned.
// Calling Poll on an LRO that has reached a terminal state will return the final
// HTTP response or error.
func (p *ReplicationRecoveryServicesProvidersClientRefreshProviderPoller) Poll(ctx context.Context) (*http.Response, error) {
	return p.pt.Poll(ctx)
}

// FinalResponse performs a final GET to the service and returns the final response
// for the polling operation. If there is an error performing the final GET then an error is returned.
// If the final GET succeeded then the final ReplicationRecoveryServicesProvidersClientRefreshProviderResponse will be returned.
func (p *ReplicationRecoveryServicesProvidersClientRefreshProviderPoller) FinalResponse(ctx context.Context) (ReplicationRecoveryServicesProvidersClientRefreshProviderResponse, error) {
	respType := ReplicationRecoveryServicesProvidersClientRefreshProviderResponse{}
	resp, err := p.pt.FinalResponse(ctx, &respType.RecoveryServicesProvider)
	if err != nil {
		return ReplicationRecoveryServicesProvidersClientRefreshProviderResponse{}, err
	}
	respType.RawResponse = resp
	return respType, nil
}

// ResumeToken returns a value representing the poller that can be used to resume
// the LRO at a later time. ResumeTokens are unique per service operation.
func (p *ReplicationRecoveryServicesProvidersClientRefreshProviderPoller) ResumeToken() (string, error) {
	return p.pt.ResumeToken()
}

// ReplicationStorageClassificationMappingsClientCreatePoller provides polling facilities until the operation reaches a terminal state.
type ReplicationStorageClassificationMappingsClientCreatePoller struct {
	pt *azcore.Poller
}

// Done returns true if the LRO has reached a terminal state.
func (p *ReplicationStorageClassificationMappingsClientCreatePoller) Done() bool {
	return p.pt.Done()
}

// Poll fetches the latest state of the LRO.  It returns an HTTP response or error.
// If the LRO has completed successfully, the poller's state is updated and the HTTP
// response is returned.
// If the LRO has completed with failure or was cancelled, the poller's state is
// updated and the error is returned.
// If the LRO has not reached a terminal state, the poller's state is updated and
// the latest HTTP response is returned.
// If Poll fails, the poller's state is unmodified and the error is returned.
// Calling Poll on an LRO that has reached a terminal state will return the final
// HTTP response or error.
func (p *ReplicationStorageClassificationMappingsClientCreatePoller) Poll(ctx context.Context) (*http.Response, error) {
	return p.pt.Poll(ctx)
}

// FinalResponse performs a final GET to the service and returns the final response
// for the polling operation. If there is an error performing the final GET then an error is returned.
// If the final GET succeeded then the final ReplicationStorageClassificationMappingsClientCreateResponse will be returned.
func (p *ReplicationStorageClassificationMappingsClientCreatePoller) FinalResponse(ctx context.Context) (ReplicationStorageClassificationMappingsClientCreateResponse, error) {
	respType := ReplicationStorageClassificationMappingsClientCreateResponse{}
	resp, err := p.pt.FinalResponse(ctx, &respType.StorageClassificationMapping)
	if err != nil {
		return ReplicationStorageClassificationMappingsClientCreateResponse{}, err
	}
	respType.RawResponse = resp
	return respType, nil
}

// ResumeToken returns a value representing the poller that can be used to resume
// the LRO at a later time. ResumeTokens are unique per service operation.
func (p *ReplicationStorageClassificationMappingsClientCreatePoller) ResumeToken() (string, error) {
	return p.pt.ResumeToken()
}

// ReplicationStorageClassificationMappingsClientDeletePoller provides polling facilities until the operation reaches a terminal state.
type ReplicationStorageClassificationMappingsClientDeletePoller struct {
	pt *azcore.Poller
}

// Done returns true if the LRO has reached a terminal state.
func (p *ReplicationStorageClassificationMappingsClientDeletePoller) Done() bool {
	return p.pt.Done()
}

// Poll fetches the latest state of the LRO.  It returns an HTTP response or error.
// If the LRO has completed successfully, the poller's state is updated and the HTTP
// response is returned.
// If the LRO has completed with failure or was cancelled, the poller's state is
// updated and the error is returned.
// If the LRO has not reached a terminal state, the poller's state is updated and
// the latest HTTP response is returned.
// If Poll fails, the poller's state is unmodified and the error is returned.
// Calling Poll on an LRO that has reached a terminal state will return the final
// HTTP response or error.
func (p *ReplicationStorageClassificationMappingsClientDeletePoller) Poll(ctx context.Context) (*http.Response, error) {
	return p.pt.Poll(ctx)
}

// FinalResponse performs a final GET to the service and returns the final response
// for the polling operation. If there is an error performing the final GET then an error is returned.
// If the final GET succeeded then the final ReplicationStorageClassificationMappingsClientDeleteResponse will be returned.
func (p *ReplicationStorageClassificationMappingsClientDeletePoller) FinalResponse(ctx context.Context) (ReplicationStorageClassificationMappingsClientDeleteResponse, error) {
	respType := ReplicationStorageClassificationMappingsClientDeleteResponse{}
	resp, err := p.pt.FinalResponse(ctx, nil)
	if err != nil {
		return ReplicationStorageClassificationMappingsClientDeleteResponse{}, err
	}
	respType.RawResponse = resp
	return respType, nil
}

// ResumeToken returns a value representing the poller that can be used to resume
// the LRO at a later time. ResumeTokens are unique per service operation.
func (p *ReplicationStorageClassificationMappingsClientDeletePoller) ResumeToken() (string, error) {
	return p.pt.ResumeToken()
}

// ReplicationVaultHealthClientRefreshPoller provides polling facilities until the operation reaches a terminal state.
type ReplicationVaultHealthClientRefreshPoller struct {
	pt *azcore.Poller
}

// Done returns true if the LRO has reached a terminal state.
func (p *ReplicationVaultHealthClientRefreshPoller) Done() bool {
	return p.pt.Done()
}

// Poll fetches the latest state of the LRO.  It returns an HTTP response or error.
// If the LRO has completed successfully, the poller's state is updated and the HTTP
// response is returned.
// If the LRO has completed with failure or was cancelled, the poller's state is
// updated and the error is returned.
// If the LRO has not reached a terminal state, the poller's state is updated and
// the latest HTTP response is returned.
// If Poll fails, the poller's state is unmodified and the error is returned.
// Calling Poll on an LRO that has reached a terminal state will return the final
// HTTP response or error.
func (p *ReplicationVaultHealthClientRefreshPoller) Poll(ctx context.Context) (*http.Response, error) {
	return p.pt.Poll(ctx)
}

// FinalResponse performs a final GET to the service and returns the final response
// for the polling operation. If there is an error performing the final GET then an error is returned.
// If the final GET succeeded then the final ReplicationVaultHealthClientRefreshResponse will be returned.
func (p *ReplicationVaultHealthClientRefreshPoller) FinalResponse(ctx context.Context) (ReplicationVaultHealthClientRefreshResponse, error) {
	respType := ReplicationVaultHealthClientRefreshResponse{}
	resp, err := p.pt.FinalResponse(ctx, &respType.VaultHealthDetails)
	if err != nil {
		return ReplicationVaultHealthClientRefreshResponse{}, err
	}
	respType.RawResponse = resp
	return respType, nil
}

// ResumeToken returns a value representing the poller that can be used to resume
// the LRO at a later time. ResumeTokens are unique per service operation.
func (p *ReplicationVaultHealthClientRefreshPoller) ResumeToken() (string, error) {
	return p.pt.ResumeToken()
}

// ReplicationVaultSettingClientCreatePoller provides polling facilities until the operation reaches a terminal state.
type ReplicationVaultSettingClientCreatePoller struct {
	pt *azcore.Poller
}

// Done returns true if the LRO has reached a terminal state.
func (p *ReplicationVaultSettingClientCreatePoller) Done() bool {
	return p.pt.Done()
}

// Poll fetches the latest state of the LRO.  It returns an HTTP response or error.
// If the LRO has completed successfully, the poller's state is updated and the HTTP
// response is returned.
// If the LRO has completed with failure or was cancelled, the poller's state is
// updated and the error is returned.
// If the LRO has not reached a terminal state, the poller's state is updated and
// the latest HTTP response is returned.
// If Poll fails, the poller's state is unmodified and the error is returned.
// Calling Poll on an LRO that has reached a terminal state will return the final
// HTTP response or error.
func (p *ReplicationVaultSettingClientCreatePoller) Poll(ctx context.Context) (*http.Response, error) {
	return p.pt.Poll(ctx)
}

// FinalResponse performs a final GET to the service and returns the final response
// for the polling operation. If there is an error performing the final GET then an error is returned.
// If the final GET succeeded then the final ReplicationVaultSettingClientCreateResponse will be returned.
func (p *ReplicationVaultSettingClientCreatePoller) FinalResponse(ctx context.Context) (ReplicationVaultSettingClientCreateResponse, error) {
	respType := ReplicationVaultSettingClientCreateResponse{}
	resp, err := p.pt.FinalResponse(ctx, &respType.VaultSetting)
	if err != nil {
		return ReplicationVaultSettingClientCreateResponse{}, err
	}
	respType.RawResponse = resp
	return respType, nil
}

// ResumeToken returns a value representing the poller that can be used to resume
// the LRO at a later time. ResumeTokens are unique per service operation.
func (p *ReplicationVaultSettingClientCreatePoller) ResumeToken() (string, error) {
	return p.pt.ResumeToken()
}

// ReplicationvCentersClientCreatePoller provides polling facilities until the operation reaches a terminal state.
type ReplicationvCentersClientCreatePoller struct {
	pt *azcore.Poller
}

// Done returns true if the LRO has reached a terminal state.
func (p *ReplicationvCentersClientCreatePoller) Done() bool {
	return p.pt.Done()
}

// Poll fetches the latest state of the LRO.  It returns an HTTP response or error.
// If the LRO has completed successfully, the poller's state is updated and the HTTP
// response is returned.
// If the LRO has completed with failure or was cancelled, the poller's state is
// updated and the error is returned.
// If the LRO has not reached a terminal state, the poller's state is updated and
// the latest HTTP response is returned.
// If Poll fails, the poller's state is unmodified and the error is returned.
// Calling Poll on an LRO that has reached a terminal state will return the final
// HTTP response or error.
func (p *ReplicationvCentersClientCreatePoller) Poll(ctx context.Context) (*http.Response, error) {
	return p.pt.Poll(ctx)
}

// FinalResponse performs a final GET to the service and returns the final response
// for the polling operation. If there is an error performing the final GET then an error is returned.
// If the final GET succeeded then the final ReplicationvCentersClientCreateResponse will be returned.
func (p *ReplicationvCentersClientCreatePoller) FinalResponse(ctx context.Context) (ReplicationvCentersClientCreateResponse, error) {
	respType := ReplicationvCentersClientCreateResponse{}
	resp, err := p.pt.FinalResponse(ctx, &respType.VCenter)
	if err != nil {
		return ReplicationvCentersClientCreateResponse{}, err
	}
	respType.RawResponse = resp
	return respType, nil
}

// ResumeToken returns a value representing the poller that can be used to resume
// the LRO at a later time. ResumeTokens are unique per service operation.
func (p *ReplicationvCentersClientCreatePoller) ResumeToken() (string, error) {
	return p.pt.ResumeToken()
}

// ReplicationvCentersClientDeletePoller provides polling facilities until the operation reaches a terminal state.
type ReplicationvCentersClientDeletePoller struct {
	pt *azcore.Poller
}

// Done returns true if the LRO has reached a terminal state.
func (p *ReplicationvCentersClientDeletePoller) Done() bool {
	return p.pt.Done()
}

// Poll fetches the latest state of the LRO.  It returns an HTTP response or error.
// If the LRO has completed successfully, the poller's state is updated and the HTTP
// response is returned.
// If the LRO has completed with failure or was cancelled, the poller's state is
// updated and the error is returned.
// If the LRO has not reached a terminal state, the poller's state is updated and
// the latest HTTP response is returned.
// If Poll fails, the poller's state is unmodified and the error is returned.
// Calling Poll on an LRO that has reached a terminal state will return the final
// HTTP response or error.
func (p *ReplicationvCentersClientDeletePoller) Poll(ctx context.Context) (*http.Response, error) {
	return p.pt.Poll(ctx)
}

// FinalResponse performs a final GET to the service and returns the final response
// for the polling operation. If there is an error performing the final GET then an error is returned.
// If the final GET succeeded then the final ReplicationvCentersClientDeleteResponse will be returned.
func (p *ReplicationvCentersClientDeletePoller) FinalResponse(ctx context.Context) (ReplicationvCentersClientDeleteResponse, error) {
	respType := ReplicationvCentersClientDeleteResponse{}
	resp, err := p.pt.FinalResponse(ctx, nil)
	if err != nil {
		return ReplicationvCentersClientDeleteResponse{}, err
	}
	respType.RawResponse = resp
	return respType, nil
}

// ResumeToken returns a value representing the poller that can be used to resume
// the LRO at a later time. ResumeTokens are unique per service operation.
func (p *ReplicationvCentersClientDeletePoller) ResumeToken() (string, error) {
	return p.pt.ResumeToken()
}

// ReplicationvCentersClientUpdatePoller provides polling facilities until the operation reaches a terminal state.
type ReplicationvCentersClientUpdatePoller struct {
	pt *azcore.Poller
}

// Done returns true if the LRO has reached a terminal state.
func (p *ReplicationvCentersClientUpdatePoller) Done() bool {
	return p.pt.Done()
}

// Poll fetches the latest state of the LRO.  It returns an HTTP response or error.
// If the LRO has completed successfully, the poller's state is updated and the HTTP
// response is returned.
// If the LRO has completed with failure or was cancelled, the poller's state is
// updated and the error is returned.
// If the LRO has not reached a terminal state, the poller's state is updated and
// the latest HTTP response is returned.
// If Poll fails, the poller's state is unmodified and the error is returned.
// Calling Poll on an LRO that has reached a terminal state will return the final
// HTTP response or error.
func (p *ReplicationvCentersClientUpdatePoller) Poll(ctx context.Context) (*http.Response, error) {
	return p.pt.Poll(ctx)
}

// FinalResponse performs a final GET to the service and returns the final response
// for the polling operation. If there is an error performing the final GET then an error is returned.
// If the final GET succeeded then the final ReplicationvCentersClientUpdateResponse will be returned.
func (p *ReplicationvCentersClientUpdatePoller) FinalResponse(ctx context.Context) (ReplicationvCentersClientUpdateResponse, error) {
	respType := ReplicationvCentersClientUpdateResponse{}
	resp, err := p.pt.FinalResponse(ctx, &respType.VCenter)
	if err != nil {
		return ReplicationvCentersClientUpdateResponse{}, err
	}
	respType.RawResponse = resp
	return respType, nil
}

// ResumeToken returns a value representing the poller that can be used to resume
// the LRO at a later time. ResumeTokens are unique per service operation.
func (p *ReplicationvCentersClientUpdatePoller) ResumeToken() (string, error) {
	return p.pt.ResumeToken()
}
