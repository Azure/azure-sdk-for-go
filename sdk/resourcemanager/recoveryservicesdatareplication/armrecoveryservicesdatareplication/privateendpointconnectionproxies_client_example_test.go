// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) Go Code Generator. DO NOT EDIT.

package armrecoveryservicesdatareplication_test

import (
	"context"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/to"
	"github.com/Azure/azure-sdk-for-go/sdk/azidentity"
	"github.com/Azure/azure-sdk-for-go/sdk/resourcemanager/recoveryservicesdatareplication/armrecoveryservicesdatareplication"
	"log"
)

// Generated from example definition: 2024-09-01/PrivateEndpointConnectionProxy_Create.json
func ExamplePrivateEndpointConnectionProxiesClient_Create() {
	cred, err := azidentity.NewDefaultAzureCredential(nil)
	if err != nil {
		log.Fatalf("failed to obtain a credential: %v", err)
	}
	ctx := context.Background()
	clientFactory, err := armrecoveryservicesdatareplication.NewClientFactory("930CEC23-4430-4513-B855-DBA237E2F3BF", cred, nil)
	if err != nil {
		log.Fatalf("failed to create client: %v", err)
	}
	res, err := clientFactory.NewPrivateEndpointConnectionProxiesClient().Create(ctx, "rgswagger_2024-09-01", "4", "d", armrecoveryservicesdatareplication.PrivateEndpointConnectionProxy{
		Etag: to.Ptr("hruibxrezstxroxrxweh"),
		Properties: &armrecoveryservicesdatareplication.PrivateEndpointConnectionProxyProperties{
			RemotePrivateEndpoint: &armrecoveryservicesdatareplication.RemotePrivateEndpoint{
				ID: to.Ptr("yipalno"),
				PrivateLinkServiceConnections: []*armrecoveryservicesdatareplication.PrivateLinkServiceConnection{
					{
						Name: to.Ptr("jqwntlzfsksl"),
						GroupIDs: []*string{
							to.Ptr("hvejynjktikteipnioyeja"),
						},
						RequestMessage: to.Ptr("bukgzpkvcvfbmcdmpcbiigbvugicqa"),
					},
				},
				ManualPrivateLinkServiceConnections: []*armrecoveryservicesdatareplication.PrivateLinkServiceConnection{
					{
						Name: to.Ptr("jqwntlzfsksl"),
						GroupIDs: []*string{
							to.Ptr("hvejynjktikteipnioyeja"),
						},
						RequestMessage: to.Ptr("bukgzpkvcvfbmcdmpcbiigbvugicqa"),
					},
				},
				PrivateLinkServiceProxies: []*armrecoveryservicesdatareplication.PrivateLinkServiceProxy{
					{
						ID: to.Ptr("nzqxevuyqeedrqnkbnlcyrrrbzxvl"),
						RemotePrivateLinkServiceConnectionState: &armrecoveryservicesdatareplication.PrivateLinkServiceConnectionState{
							Status:          to.Ptr(armrecoveryservicesdatareplication.PrivateEndpointConnectionStatusApproved),
							Description:     to.Ptr("y"),
							ActionsRequired: to.Ptr("afwbq"),
						},
						RemotePrivateEndpointConnection: &armrecoveryservicesdatareplication.RemotePrivateEndpointConnection{
							ID: to.Ptr("ocunsgawjsqohkrcyxiv"),
						},
						GroupConnectivityInformation: []*armrecoveryservicesdatareplication.GroupConnectivityInformation{
							{
								GroupID:    to.Ptr("per"),
								MemberName: to.Ptr("ybptuypgdqoxkuwqx"),
								CustomerVisibleFqdns: []*string{
									to.Ptr("vedcg"),
								},
								InternalFqdn:                to.Ptr("maqavwhxwzzhbzjbryyquvitmup"),
								RedirectMapID:               to.Ptr("pezncxcq"),
								PrivateLinkServiceArmRegion: to.Ptr("rerkqqxinteevmlbrdkktaqhcch"),
							},
						},
					},
				},
				ConnectionDetails: []*armrecoveryservicesdatareplication.ConnectionDetails{
					{
						ID:               to.Ptr("lenqkogzkes"),
						PrivateIPAddress: to.Ptr("cyiacdzzyqmxjpijjbwgasegehtqe"),
						LinkIdentifier:   to.Ptr("ravfufhkdowufd"),
						GroupID:          to.Ptr("pjrlygpadir"),
						MemberName:       to.Ptr("ybuysjrlfupewxe"),
					},
				},
			},
		},
	}, nil)
	if err != nil {
		log.Fatalf("failed to finish the request: %v", err)
	}
	// You could use response here. We use blank identifier for just demo purposes.
	_ = res
	// If the HTTP response code is 200 as defined in example definition, your response structure would look as follows. Please pay attention that all the values in the output are fake values for just demo purposes.
	// res = armrecoveryservicesdatareplication.PrivateEndpointConnectionProxiesClientCreateResponse{
	// 	PrivateEndpointConnectionProxy: &armrecoveryservicesdatareplication.PrivateEndpointConnectionProxy{
	// 		ID: to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/group1/providers/Microsoft.DataReplication/replicationVaults/vault1/privateEndpointConnectionProxies/proxy1"),
	// 		Name: to.Ptr("wrbeymbilwm"),
	// 		Type: to.Ptr("xpfgxxykisvjcifsnlvtgjakwifak"),
	// 		Etag: to.Ptr("hruibxrezstxroxrxweh"),
	// 		Properties: &armrecoveryservicesdatareplication.PrivateEndpointConnectionProxyProperties{
	// 			RemotePrivateEndpoint: &armrecoveryservicesdatareplication.RemotePrivateEndpoint{
	// 				ID: to.Ptr("yipalno"),
	// 				PrivateLinkServiceConnections: []*armrecoveryservicesdatareplication.PrivateLinkServiceConnection{
	// 					{
	// 						Name: to.Ptr("jqwntlzfsksl"),
	// 						GroupIDs: []*string{
	// 							to.Ptr("hvejynjktikteipnioyeja"),
	// 						},
	// 						RequestMessage: to.Ptr("bukgzpkvcvfbmcdmpcbiigbvugicqa"),
	// 					},
	// 				},
	// 				ManualPrivateLinkServiceConnections: []*armrecoveryservicesdatareplication.PrivateLinkServiceConnection{
	// 					{
	// 						Name: to.Ptr("jqwntlzfsksl"),
	// 						GroupIDs: []*string{
	// 							to.Ptr("hvejynjktikteipnioyeja"),
	// 						},
	// 						RequestMessage: to.Ptr("bukgzpkvcvfbmcdmpcbiigbvugicqa"),
	// 					},
	// 				},
	// 				PrivateLinkServiceProxies: []*armrecoveryservicesdatareplication.PrivateLinkServiceProxy{
	// 					{
	// 						ID: to.Ptr("nzqxevuyqeedrqnkbnlcyrrrbzxvl"),
	// 						RemotePrivateLinkServiceConnectionState: &armrecoveryservicesdatareplication.PrivateLinkServiceConnectionState{
	// 							Status: to.Ptr(armrecoveryservicesdatareplication.PrivateEndpointConnectionStatusApproved),
	// 							Description: to.Ptr("y"),
	// 							ActionsRequired: to.Ptr("afwbq"),
	// 						},
	// 						RemotePrivateEndpointConnection: &armrecoveryservicesdatareplication.RemotePrivateEndpointConnection{
	// 							ID: to.Ptr("ocunsgawjsqohkrcyxiv"),
	// 						},
	// 						GroupConnectivityInformation: []*armrecoveryservicesdatareplication.GroupConnectivityInformation{
	// 							{
	// 								GroupID: to.Ptr("per"),
	// 								MemberName: to.Ptr("ybptuypgdqoxkuwqx"),
	// 								CustomerVisibleFqdns: []*string{
	// 									to.Ptr("vedcg"),
	// 								},
	// 								InternalFqdn: to.Ptr("maqavwhxwzzhbzjbryyquvitmup"),
	// 								RedirectMapID: to.Ptr("pezncxcq"),
	// 								PrivateLinkServiceArmRegion: to.Ptr("rerkqqxinteevmlbrdkktaqhcch"),
	// 							},
	// 						},
	// 					},
	// 				},
	// 				ConnectionDetails: []*armrecoveryservicesdatareplication.ConnectionDetails{
	// 					{
	// 						ID: to.Ptr("lenqkogzkes"),
	// 						PrivateIPAddress: to.Ptr("cyiacdzzyqmxjpijjbwgasegehtqe"),
	// 						LinkIdentifier: to.Ptr("ravfufhkdowufd"),
	// 						GroupID: to.Ptr("pjrlygpadir"),
	// 						MemberName: to.Ptr("ybuysjrlfupewxe"),
	// 					},
	// 				},
	// 			},
	// 		},
	// 	},
	// }
}

// Generated from example definition: 2024-09-01/PrivateEndpointConnectionProxy_Delete.json
func ExamplePrivateEndpointConnectionProxiesClient_BeginDelete() {
	cred, err := azidentity.NewDefaultAzureCredential(nil)
	if err != nil {
		log.Fatalf("failed to obtain a credential: %v", err)
	}
	ctx := context.Background()
	clientFactory, err := armrecoveryservicesdatareplication.NewClientFactory("930CEC23-4430-4513-B855-DBA237E2F3BF", cred, nil)
	if err != nil {
		log.Fatalf("failed to create client: %v", err)
	}
	poller, err := clientFactory.NewPrivateEndpointConnectionProxiesClient().BeginDelete(ctx, "rgswagger_2024-09-01", "4", "d", nil)
	if err != nil {
		log.Fatalf("failed to finish the request: %v", err)
	}
	_, err = poller.PollUntilDone(ctx, nil)
	if err != nil {
		log.Fatalf("failed to pull the result: %v", err)
	}
}

// Generated from example definition: 2024-09-01/PrivateEndpointConnectionProxy_Get.json
func ExamplePrivateEndpointConnectionProxiesClient_Get() {
	cred, err := azidentity.NewDefaultAzureCredential(nil)
	if err != nil {
		log.Fatalf("failed to obtain a credential: %v", err)
	}
	ctx := context.Background()
	clientFactory, err := armrecoveryservicesdatareplication.NewClientFactory("930CEC23-4430-4513-B855-DBA237E2F3BF", cred, nil)
	if err != nil {
		log.Fatalf("failed to create client: %v", err)
	}
	res, err := clientFactory.NewPrivateEndpointConnectionProxiesClient().Get(ctx, "rgswagger_2024-09-01", "4", "d", nil)
	if err != nil {
		log.Fatalf("failed to finish the request: %v", err)
	}
	// You could use response here. We use blank identifier for just demo purposes.
	_ = res
	// If the HTTP response code is 200 as defined in example definition, your response structure would look as follows. Please pay attention that all the values in the output are fake values for just demo purposes.
	// res = armrecoveryservicesdatareplication.PrivateEndpointConnectionProxiesClientGetResponse{
	// 	PrivateEndpointConnectionProxy: &armrecoveryservicesdatareplication.PrivateEndpointConnectionProxy{
	// 		ID: to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/group1/providers/Microsoft.DataReplication/replicationVaults/vault1/privateEndpointConnectionProxies/proxy1"),
	// 		Name: to.Ptr("wrbeymbilwm"),
	// 		Type: to.Ptr("xpfgxxykisvjcifsnlvtgjakwifak"),
	// 		Etag: to.Ptr("hruibxrezstxroxrxweh"),
	// 		Properties: &armrecoveryservicesdatareplication.PrivateEndpointConnectionProxyProperties{
	// 			RemotePrivateEndpoint: &armrecoveryservicesdatareplication.RemotePrivateEndpoint{
	// 				ID: to.Ptr("yipalno"),
	// 				PrivateLinkServiceConnections: []*armrecoveryservicesdatareplication.PrivateLinkServiceConnection{
	// 					{
	// 						Name: to.Ptr("jqwntlzfsksl"),
	// 						GroupIDs: []*string{
	// 							to.Ptr("hvejynjktikteipnioyeja"),
	// 						},
	// 						RequestMessage: to.Ptr("bukgzpkvcvfbmcdmpcbiigbvugicqa"),
	// 					},
	// 				},
	// 				ManualPrivateLinkServiceConnections: []*armrecoveryservicesdatareplication.PrivateLinkServiceConnection{
	// 					{
	// 						Name: to.Ptr("jqwntlzfsksl"),
	// 						GroupIDs: []*string{
	// 							to.Ptr("hvejynjktikteipnioyeja"),
	// 						},
	// 						RequestMessage: to.Ptr("bukgzpkvcvfbmcdmpcbiigbvugicqa"),
	// 					},
	// 				},
	// 				PrivateLinkServiceProxies: []*armrecoveryservicesdatareplication.PrivateLinkServiceProxy{
	// 					{
	// 						ID: to.Ptr("nzqxevuyqeedrqnkbnlcyrrrbzxvl"),
	// 						RemotePrivateLinkServiceConnectionState: &armrecoveryservicesdatareplication.PrivateLinkServiceConnectionState{
	// 							Status: to.Ptr(armrecoveryservicesdatareplication.PrivateEndpointConnectionStatusApproved),
	// 							Description: to.Ptr("y"),
	// 							ActionsRequired: to.Ptr("afwbq"),
	// 						},
	// 						RemotePrivateEndpointConnection: &armrecoveryservicesdatareplication.RemotePrivateEndpointConnection{
	// 							ID: to.Ptr("ocunsgawjsqohkrcyxiv"),
	// 						},
	// 						GroupConnectivityInformation: []*armrecoveryservicesdatareplication.GroupConnectivityInformation{
	// 							{
	// 								GroupID: to.Ptr("per"),
	// 								MemberName: to.Ptr("ybptuypgdqoxkuwqx"),
	// 								CustomerVisibleFqdns: []*string{
	// 									to.Ptr("vedcg"),
	// 								},
	// 								InternalFqdn: to.Ptr("maqavwhxwzzhbzjbryyquvitmup"),
	// 								RedirectMapID: to.Ptr("pezncxcq"),
	// 								PrivateLinkServiceArmRegion: to.Ptr("rerkqqxinteevmlbrdkktaqhcch"),
	// 							},
	// 						},
	// 					},
	// 				},
	// 				ConnectionDetails: []*armrecoveryservicesdatareplication.ConnectionDetails{
	// 					{
	// 						ID: to.Ptr("lenqkogzkes"),
	// 						PrivateIPAddress: to.Ptr("cyiacdzzyqmxjpijjbwgasegehtqe"),
	// 						LinkIdentifier: to.Ptr("ravfufhkdowufd"),
	// 						GroupID: to.Ptr("pjrlygpadir"),
	// 						MemberName: to.Ptr("ybuysjrlfupewxe"),
	// 					},
	// 				},
	// 			},
	// 		},
	// 	},
	// }
}

// Generated from example definition: 2024-09-01/PrivateEndpointConnectionProxy_List.json
func ExamplePrivateEndpointConnectionProxiesClient_NewListPager() {
	cred, err := azidentity.NewDefaultAzureCredential(nil)
	if err != nil {
		log.Fatalf("failed to obtain a credential: %v", err)
	}
	ctx := context.Background()
	clientFactory, err := armrecoveryservicesdatareplication.NewClientFactory("930CEC23-4430-4513-B855-DBA237E2F3BF", cred, nil)
	if err != nil {
		log.Fatalf("failed to create client: %v", err)
	}
	pager := clientFactory.NewPrivateEndpointConnectionProxiesClient().NewListPager("rgswagger_2024-09-01", "4", nil)
	for pager.More() {
		page, err := pager.NextPage(ctx)
		if err != nil {
			log.Fatalf("failed to advance page: %v", err)
		}
		for _, v := range page.Value {
			// You could use page here. We use blank identifier for just demo purposes.
			_ = v
		}
		// If the HTTP response code is 200 as defined in example definition, your page structure would look as follows. Please pay attention that all the values in the output are fake values for just demo purposes.
		// page = armrecoveryservicesdatareplication.PrivateEndpointConnectionProxiesClientListResponse{
		// 	PrivateEndpointConnectionProxyListResult: armrecoveryservicesdatareplication.PrivateEndpointConnectionProxyListResult{
		// 		Value: []*armrecoveryservicesdatareplication.PrivateEndpointConnectionProxy{
		// 			{
		// 				ID: to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/group1/providers/Microsoft.DataReplication/replicationVaults/vault1/privateEndpointConnectionProxies/proxy1"),
		// 				Name: to.Ptr("wrbeymbilwm"),
		// 				Type: to.Ptr("xpfgxxykisvjcifsnlvtgjakwifak"),
		// 				Etag: to.Ptr("hruibxrezstxroxrxweh"),
		// 				Properties: &armrecoveryservicesdatareplication.PrivateEndpointConnectionProxyProperties{
		// 					RemotePrivateEndpoint: &armrecoveryservicesdatareplication.RemotePrivateEndpoint{
		// 						ID: to.Ptr("yipalno"),
		// 						PrivateLinkServiceConnections: []*armrecoveryservicesdatareplication.PrivateLinkServiceConnection{
		// 							{
		// 								Name: to.Ptr("jqwntlzfsksl"),
		// 								GroupIDs: []*string{
		// 									to.Ptr("hvejynjktikteipnioyeja"),
		// 								},
		// 								RequestMessage: to.Ptr("bukgzpkvcvfbmcdmpcbiigbvugicqa"),
		// 							},
		// 						},
		// 						ManualPrivateLinkServiceConnections: []*armrecoveryservicesdatareplication.PrivateLinkServiceConnection{
		// 							{
		// 								Name: to.Ptr("jqwntlzfsksl"),
		// 								GroupIDs: []*string{
		// 									to.Ptr("hvejynjktikteipnioyeja"),
		// 								},
		// 								RequestMessage: to.Ptr("bukgzpkvcvfbmcdmpcbiigbvugicqa"),
		// 							},
		// 						},
		// 						PrivateLinkServiceProxies: []*armrecoveryservicesdatareplication.PrivateLinkServiceProxy{
		// 							{
		// 								ID: to.Ptr("nzqxevuyqeedrqnkbnlcyrrrbzxvl"),
		// 								RemotePrivateLinkServiceConnectionState: &armrecoveryservicesdatareplication.PrivateLinkServiceConnectionState{
		// 									Status: to.Ptr(armrecoveryservicesdatareplication.PrivateEndpointConnectionStatusApproved),
		// 									Description: to.Ptr("y"),
		// 									ActionsRequired: to.Ptr("afwbq"),
		// 								},
		// 								RemotePrivateEndpointConnection: &armrecoveryservicesdatareplication.RemotePrivateEndpointConnection{
		// 									ID: to.Ptr("ocunsgawjsqohkrcyxiv"),
		// 								},
		// 								GroupConnectivityInformation: []*armrecoveryservicesdatareplication.GroupConnectivityInformation{
		// 									{
		// 										GroupID: to.Ptr("per"),
		// 										MemberName: to.Ptr("ybptuypgdqoxkuwqx"),
		// 										CustomerVisibleFqdns: []*string{
		// 											to.Ptr("vedcg"),
		// 										},
		// 										InternalFqdn: to.Ptr("maqavwhxwzzhbzjbryyquvitmup"),
		// 										RedirectMapID: to.Ptr("pezncxcq"),
		// 										PrivateLinkServiceArmRegion: to.Ptr("rerkqqxinteevmlbrdkktaqhcch"),
		// 									},
		// 								},
		// 							},
		// 						},
		// 						ConnectionDetails: []*armrecoveryservicesdatareplication.ConnectionDetails{
		// 							{
		// 								ID: to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/group1/providers/Microsoft.DataReplication/replicationVaults/vault1/privateEndpointConnections/connection1"),
		// 								PrivateIPAddress: to.Ptr("cyiacdzzyqmxjpijjbwgasegehtqe"),
		// 								LinkIdentifier: to.Ptr("ravfufhkdowufd"),
		// 								GroupID: to.Ptr("pjrlygpadir"),
		// 								MemberName: to.Ptr("ybuysjrlfupewxe"),
		// 							},
		// 						},
		// 					},
		// 				},
		// 			},
		// 		},
		// 	},
		// }
	}
}

// Generated from example definition: 2024-09-01/PrivateEndpointConnectionProxy_Validate.json
func ExamplePrivateEndpointConnectionProxiesClient_Validate() {
	cred, err := azidentity.NewDefaultAzureCredential(nil)
	if err != nil {
		log.Fatalf("failed to obtain a credential: %v", err)
	}
	ctx := context.Background()
	clientFactory, err := armrecoveryservicesdatareplication.NewClientFactory("930CEC23-4430-4513-B855-DBA237E2F3BF", cred, nil)
	if err != nil {
		log.Fatalf("failed to create client: %v", err)
	}
	res, err := clientFactory.NewPrivateEndpointConnectionProxiesClient().Validate(ctx, "rgswagger_2024-09-01", "4", "d", armrecoveryservicesdatareplication.PrivateEndpointConnectionProxy{
		Etag: to.Ptr("hruibxrezstxroxrxweh"),
		Properties: &armrecoveryservicesdatareplication.PrivateEndpointConnectionProxyProperties{
			RemotePrivateEndpoint: &armrecoveryservicesdatareplication.RemotePrivateEndpoint{
				ID: to.Ptr("yipalno"),
				PrivateLinkServiceConnections: []*armrecoveryservicesdatareplication.PrivateLinkServiceConnection{
					{
						Name: to.Ptr("jqwntlzfsksl"),
						GroupIDs: []*string{
							to.Ptr("hvejynjktikteipnioyeja"),
						},
						RequestMessage: to.Ptr("bukgzpkvcvfbmcdmpcbiigbvugicqa"),
					},
				},
				ManualPrivateLinkServiceConnections: []*armrecoveryservicesdatareplication.PrivateLinkServiceConnection{
					{
						Name: to.Ptr("jqwntlzfsksl"),
						GroupIDs: []*string{
							to.Ptr("hvejynjktikteipnioyeja"),
						},
						RequestMessage: to.Ptr("bukgzpkvcvfbmcdmpcbiigbvugicqa"),
					},
				},
				PrivateLinkServiceProxies: []*armrecoveryservicesdatareplication.PrivateLinkServiceProxy{
					{
						ID: to.Ptr("nzqxevuyqeedrqnkbnlcyrrrbzxvl"),
						RemotePrivateLinkServiceConnectionState: &armrecoveryservicesdatareplication.PrivateLinkServiceConnectionState{
							Status:          to.Ptr(armrecoveryservicesdatareplication.PrivateEndpointConnectionStatusApproved),
							Description:     to.Ptr("y"),
							ActionsRequired: to.Ptr("afwbq"),
						},
						RemotePrivateEndpointConnection: &armrecoveryservicesdatareplication.RemotePrivateEndpointConnection{
							ID: to.Ptr("ocunsgawjsqohkrcyxiv"),
						},
						GroupConnectivityInformation: []*armrecoveryservicesdatareplication.GroupConnectivityInformation{
							{
								GroupID:    to.Ptr("per"),
								MemberName: to.Ptr("ybptuypgdqoxkuwqx"),
								CustomerVisibleFqdns: []*string{
									to.Ptr("vedcg"),
								},
								InternalFqdn:                to.Ptr("maqavwhxwzzhbzjbryyquvitmup"),
								RedirectMapID:               to.Ptr("pezncxcq"),
								PrivateLinkServiceArmRegion: to.Ptr("rerkqqxinteevmlbrdkktaqhcch"),
							},
						},
					},
				},
				ConnectionDetails: []*armrecoveryservicesdatareplication.ConnectionDetails{
					{
						ID:               to.Ptr("lenqkogzkes"),
						PrivateIPAddress: to.Ptr("cyiacdzzyqmxjpijjbwgasegehtqe"),
						LinkIdentifier:   to.Ptr("ravfufhkdowufd"),
						GroupID:          to.Ptr("pjrlygpadir"),
						MemberName:       to.Ptr("ybuysjrlfupewxe"),
					},
				},
			},
		},
	}, nil)
	if err != nil {
		log.Fatalf("failed to finish the request: %v", err)
	}
	// You could use response here. We use blank identifier for just demo purposes.
	_ = res
	// If the HTTP response code is 200 as defined in example definition, your response structure would look as follows. Please pay attention that all the values in the output are fake values for just demo purposes.
	// res = armrecoveryservicesdatareplication.PrivateEndpointConnectionProxiesClientValidateResponse{
	// 	PrivateEndpointConnectionProxy: &armrecoveryservicesdatareplication.PrivateEndpointConnectionProxy{
	// 		ID: to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/group1/providers/Microsoft.DataReplication/replicationVaults/vault1/privateEndpointConnectionProxies/proxy1"),
	// 		Name: to.Ptr("wrbeymbilwm"),
	// 		Type: to.Ptr("xpfgxxykisvjcifsnlvtgjakwifak"),
	// 		Etag: to.Ptr("hruibxrezstxroxrxweh"),
	// 		Properties: &armrecoveryservicesdatareplication.PrivateEndpointConnectionProxyProperties{
	// 			RemotePrivateEndpoint: &armrecoveryservicesdatareplication.RemotePrivateEndpoint{
	// 				ID: to.Ptr("yipalno"),
	// 				PrivateLinkServiceConnections: []*armrecoveryservicesdatareplication.PrivateLinkServiceConnection{
	// 					{
	// 						Name: to.Ptr("jqwntlzfsksl"),
	// 						GroupIDs: []*string{
	// 							to.Ptr("hvejynjktikteipnioyeja"),
	// 						},
	// 						RequestMessage: to.Ptr("bukgzpkvcvfbmcdmpcbiigbvugicqa"),
	// 					},
	// 				},
	// 				ManualPrivateLinkServiceConnections: []*armrecoveryservicesdatareplication.PrivateLinkServiceConnection{
	// 					{
	// 						Name: to.Ptr("jqwntlzfsksl"),
	// 						GroupIDs: []*string{
	// 							to.Ptr("hvejynjktikteipnioyeja"),
	// 						},
	// 						RequestMessage: to.Ptr("bukgzpkvcvfbmcdmpcbiigbvugicqa"),
	// 					},
	// 				},
	// 				PrivateLinkServiceProxies: []*armrecoveryservicesdatareplication.PrivateLinkServiceProxy{
	// 					{
	// 						ID: to.Ptr("nzqxevuyqeedrqnkbnlcyrrrbzxvl"),
	// 						RemotePrivateLinkServiceConnectionState: &armrecoveryservicesdatareplication.PrivateLinkServiceConnectionState{
	// 							Status: to.Ptr(armrecoveryservicesdatareplication.PrivateEndpointConnectionStatusApproved),
	// 							Description: to.Ptr("y"),
	// 							ActionsRequired: to.Ptr("afwbq"),
	// 						},
	// 						RemotePrivateEndpointConnection: &armrecoveryservicesdatareplication.RemotePrivateEndpointConnection{
	// 							ID: to.Ptr("ocunsgawjsqohkrcyxiv"),
	// 						},
	// 						GroupConnectivityInformation: []*armrecoveryservicesdatareplication.GroupConnectivityInformation{
	// 							{
	// 								GroupID: to.Ptr("per"),
	// 								MemberName: to.Ptr("ybptuypgdqoxkuwqx"),
	// 								CustomerVisibleFqdns: []*string{
	// 									to.Ptr("vedcg"),
	// 								},
	// 								InternalFqdn: to.Ptr("maqavwhxwzzhbzjbryyquvitmup"),
	// 								RedirectMapID: to.Ptr("pezncxcq"),
	// 								PrivateLinkServiceArmRegion: to.Ptr("rerkqqxinteevmlbrdkktaqhcch"),
	// 							},
	// 						},
	// 					},
	// 				},
	// 				ConnectionDetails: []*armrecoveryservicesdatareplication.ConnectionDetails{
	// 					{
	// 						ID: to.Ptr("lenqkogzkes"),
	// 						PrivateIPAddress: to.Ptr("cyiacdzzyqmxjpijjbwgasegehtqe"),
	// 						LinkIdentifier: to.Ptr("ravfufhkdowufd"),
	// 						GroupID: to.Ptr("pjrlygpadir"),
	// 						MemberName: to.Ptr("ybuysjrlfupewxe"),
	// 					},
	// 				},
	// 			},
	// 		},
	// 	},
	// }
}
