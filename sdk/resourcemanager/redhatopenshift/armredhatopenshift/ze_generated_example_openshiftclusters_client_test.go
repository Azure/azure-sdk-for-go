//go:build go1.16
// +build go1.16

// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

package armredhatopenshift_test

import (
	"context"
	"log"

	"time"

	"github.com/Azure/azure-sdk-for-go/sdk/azcore/to"
	"github.com/Azure/azure-sdk-for-go/sdk/azidentity"
	"github.com/Azure/azure-sdk-for-go/sdk/resourcemanager/redhatopenshift/armredhatopenshift"
)

// x-ms-original-file: specification/redhatopenshift/resource-manager/Microsoft.RedHatOpenShift/stable/2020-04-30/examples/OpenShiftClusters_List.json
func ExampleOpenShiftClustersClient_List() {
	cred, err := azidentity.NewDefaultAzureCredential(nil)
	if err != nil {
		log.Fatalf("failed to obtain a credential: %v", err)
	}
	ctx := context.Background()
	client := armredhatopenshift.NewOpenShiftClustersClient("<subscription-id>", cred, nil)
	pager := client.List(nil)
	for pager.NextPage(ctx) {
		if err := pager.Err(); err != nil {
			log.Fatalf("failed to advance page: %v", err)
		}
		for _, v := range pager.PageResponse().Value {
			log.Printf("OpenShiftCluster.ID: %s\n", *v.ID)
		}
	}
}

// x-ms-original-file: specification/redhatopenshift/resource-manager/Microsoft.RedHatOpenShift/stable/2020-04-30/examples/OpenShiftClusters_ListByResourceGroup.json
func ExampleOpenShiftClustersClient_ListByResourceGroup() {
	cred, err := azidentity.NewDefaultAzureCredential(nil)
	if err != nil {
		log.Fatalf("failed to obtain a credential: %v", err)
	}
	ctx := context.Background()
	client := armredhatopenshift.NewOpenShiftClustersClient("<subscription-id>", cred, nil)
	pager := client.ListByResourceGroup("<resource-group-name>",
		nil)
	for pager.NextPage(ctx) {
		if err := pager.Err(); err != nil {
			log.Fatalf("failed to advance page: %v", err)
		}
		for _, v := range pager.PageResponse().Value {
			log.Printf("OpenShiftCluster.ID: %s\n", *v.ID)
		}
	}
}

// x-ms-original-file: specification/redhatopenshift/resource-manager/Microsoft.RedHatOpenShift/stable/2020-04-30/examples/OpenShiftClusters_Get.json
func ExampleOpenShiftClustersClient_Get() {
	cred, err := azidentity.NewDefaultAzureCredential(nil)
	if err != nil {
		log.Fatalf("failed to obtain a credential: %v", err)
	}
	ctx := context.Background()
	client := armredhatopenshift.NewOpenShiftClustersClient("<subscription-id>", cred, nil)
	res, err := client.Get(ctx,
		"<resource-group-name>",
		"<resource-name>",
		nil)
	if err != nil {
		log.Fatal(err)
	}
	log.Printf("OpenShiftCluster.ID: %s\n", *res.ID)
}

// x-ms-original-file: specification/redhatopenshift/resource-manager/Microsoft.RedHatOpenShift/stable/2020-04-30/examples/OpenShiftClusters_CreateOrUpdate.json
func ExampleOpenShiftClustersClient_BeginCreateOrUpdate() {
	cred, err := azidentity.NewDefaultAzureCredential(nil)
	if err != nil {
		log.Fatalf("failed to obtain a credential: %v", err)
	}
	ctx := context.Background()
	client := armredhatopenshift.NewOpenShiftClustersClient("<subscription-id>", cred, nil)
	poller, err := client.BeginCreateOrUpdate(ctx,
		"<resource-group-name>",
		"<resource-name>",
		armredhatopenshift.OpenShiftCluster{
			TrackedResource: armredhatopenshift.TrackedResource{
				Location: to.StringPtr("<location>"),
				Tags: map[string]*string{
					"key": to.StringPtr("value"),
				},
			},
			Properties: &armredhatopenshift.OpenShiftClusterProperties{
				ApiserverProfile: &armredhatopenshift.APIServerProfile{
					Visibility: armredhatopenshift.VisibilityPublic.ToPtr(),
				},
				ClusterProfile: &armredhatopenshift.ClusterProfile{
					Domain:          to.StringPtr("<domain>"),
					PullSecret:      to.StringPtr("<pull-secret>"),
					ResourceGroupID: to.StringPtr("<resource-group-id>"),
				},
				ConsoleProfile: &armredhatopenshift.ConsoleProfile{},
				IngressProfiles: []*armredhatopenshift.IngressProfile{
					{
						Name:       to.StringPtr("<name>"),
						Visibility: armredhatopenshift.VisibilityPublic.ToPtr(),
					}},
				MasterProfile: &armredhatopenshift.MasterProfile{
					SubnetID: to.StringPtr("<subnet-id>"),
					VMSize:   armredhatopenshift.VMSizeStandardD8SV3.ToPtr(),
				},
				NetworkProfile: &armredhatopenshift.NetworkProfile{
					PodCidr:     to.StringPtr("<pod-cidr>"),
					ServiceCidr: to.StringPtr("<service-cidr>"),
				},
				ServicePrincipalProfile: &armredhatopenshift.ServicePrincipalProfile{
					ClientID:     to.StringPtr("<client-id>"),
					ClientSecret: to.StringPtr("<client-secret>"),
				},
				WorkerProfiles: []*armredhatopenshift.WorkerProfile{
					{
						Name:       to.StringPtr("<name>"),
						Count:      to.Int32Ptr(3),
						DiskSizeGB: to.Int32Ptr(128),
						SubnetID:   to.StringPtr("<subnet-id>"),
						VMSize:     armredhatopenshift.VMSizeStandardD2SV3.ToPtr(),
					}},
			},
		},
		nil)
	if err != nil {
		log.Fatal(err)
	}
	res, err := poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		log.Fatal(err)
	}
	log.Printf("OpenShiftCluster.ID: %s\n", *res.ID)
}

// x-ms-original-file: specification/redhatopenshift/resource-manager/Microsoft.RedHatOpenShift/stable/2020-04-30/examples/OpenShiftClusters_Delete.json
func ExampleOpenShiftClustersClient_BeginDelete() {
	cred, err := azidentity.NewDefaultAzureCredential(nil)
	if err != nil {
		log.Fatalf("failed to obtain a credential: %v", err)
	}
	ctx := context.Background()
	client := armredhatopenshift.NewOpenShiftClustersClient("<subscription-id>", cred, nil)
	poller, err := client.BeginDelete(ctx,
		"<resource-group-name>",
		"<resource-name>",
		nil)
	if err != nil {
		log.Fatal(err)
	}
	_, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		log.Fatal(err)
	}
}

// x-ms-original-file: specification/redhatopenshift/resource-manager/Microsoft.RedHatOpenShift/stable/2020-04-30/examples/OpenShiftClusters_Update.json
func ExampleOpenShiftClustersClient_BeginUpdate() {
	cred, err := azidentity.NewDefaultAzureCredential(nil)
	if err != nil {
		log.Fatalf("failed to obtain a credential: %v", err)
	}
	ctx := context.Background()
	client := armredhatopenshift.NewOpenShiftClustersClient("<subscription-id>", cred, nil)
	poller, err := client.BeginUpdate(ctx,
		"<resource-group-name>",
		"<resource-name>",
		armredhatopenshift.OpenShiftClusterUpdate{
			Properties: &armredhatopenshift.OpenShiftClusterProperties{
				ApiserverProfile: &armredhatopenshift.APIServerProfile{
					Visibility: armredhatopenshift.VisibilityPublic.ToPtr(),
				},
				ClusterProfile: &armredhatopenshift.ClusterProfile{
					Domain:          to.StringPtr("<domain>"),
					PullSecret:      to.StringPtr("<pull-secret>"),
					ResourceGroupID: to.StringPtr("<resource-group-id>"),
				},
				ConsoleProfile: &armredhatopenshift.ConsoleProfile{},
				IngressProfiles: []*armredhatopenshift.IngressProfile{
					{
						Name:       to.StringPtr("<name>"),
						Visibility: armredhatopenshift.VisibilityPublic.ToPtr(),
					}},
				MasterProfile: &armredhatopenshift.MasterProfile{
					SubnetID: to.StringPtr("<subnet-id>"),
					VMSize:   armredhatopenshift.VMSizeStandardD8SV3.ToPtr(),
				},
				NetworkProfile: &armredhatopenshift.NetworkProfile{
					PodCidr:     to.StringPtr("<pod-cidr>"),
					ServiceCidr: to.StringPtr("<service-cidr>"),
				},
				ServicePrincipalProfile: &armredhatopenshift.ServicePrincipalProfile{
					ClientID:     to.StringPtr("<client-id>"),
					ClientSecret: to.StringPtr("<client-secret>"),
				},
				WorkerProfiles: []*armredhatopenshift.WorkerProfile{
					{
						Name:       to.StringPtr("<name>"),
						Count:      to.Int32Ptr(3),
						DiskSizeGB: to.Int32Ptr(128),
						SubnetID:   to.StringPtr("<subnet-id>"),
						VMSize:     armredhatopenshift.VMSizeStandardD2SV3.ToPtr(),
					}},
			},
			Tags: map[string]*string{
				"key": to.StringPtr("value"),
			},
		},
		nil)
	if err != nil {
		log.Fatal(err)
	}
	res, err := poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		log.Fatal(err)
	}
	log.Printf("OpenShiftCluster.ID: %s\n", *res.ID)
}

// x-ms-original-file: specification/redhatopenshift/resource-manager/Microsoft.RedHatOpenShift/stable/2020-04-30/examples/OpenShiftClusters_ListCredentials.json
func ExampleOpenShiftClustersClient_ListCredentials() {
	cred, err := azidentity.NewDefaultAzureCredential(nil)
	if err != nil {
		log.Fatalf("failed to obtain a credential: %v", err)
	}
	ctx := context.Background()
	client := armredhatopenshift.NewOpenShiftClustersClient("<subscription-id>", cred, nil)
	_, err = client.ListCredentials(ctx,
		"<resource-group-name>",
		"<resource-name>",
		nil)
	if err != nil {
		log.Fatal(err)
	}
}
