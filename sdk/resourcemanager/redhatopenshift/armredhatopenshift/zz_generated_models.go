//go:build go1.16
// +build go1.16

// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

package armredhatopenshift

import (
	"encoding/json"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore"
	"reflect"
)

// APIServerProfile represents an API server profile.
type APIServerProfile struct {
	// The IP of the cluster API server (immutable).
	IP *string `json:"ip,omitempty"`

	// The URL to access the cluster API server (immutable).
	URL *string `json:"url,omitempty"`

	// API server visibility (immutable).
	Visibility *Visibility `json:"visibility,omitempty"`
}

// CloudError represents a cloud error.
// Implements the error and azcore.HTTPResponse interfaces.
type CloudError struct {
	raw string
	// An error response from the service.
	InnerError *CloudErrorBody `json:"error,omitempty"`
}

// Error implements the error interface for type CloudError.
// The contents of the error text are not contractual and subject to change.
func (e CloudError) Error() string {
	return e.raw
}

// CloudErrorBody represents the body of a cloud error.
type CloudErrorBody struct {
	// An identifier for the error. Codes are invariant and are intended to be consumed programmatically.
	Code *string `json:"code,omitempty"`

	// A list of additional details about the error.
	Details []*CloudErrorBody `json:"details,omitempty"`

	// A message describing the error, intended to be suitable for display in a user interface.
	Message *string `json:"message,omitempty"`

	// The target of the particular error. For example, the name of the property in error.
	Target *string `json:"target,omitempty"`
}

// MarshalJSON implements the json.Marshaller interface for type CloudErrorBody.
func (c CloudErrorBody) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "code", c.Code)
	populate(objectMap, "details", c.Details)
	populate(objectMap, "message", c.Message)
	populate(objectMap, "target", c.Target)
	return json.Marshal(objectMap)
}

// ClusterProfile represents a cluster profile.
type ClusterProfile struct {
	// The domain for the cluster (immutable).
	Domain *string `json:"domain,omitempty"`

	// The pull secret for the cluster (immutable).
	PullSecret *string `json:"pullSecret,omitempty"`

	// The ID of the cluster resource group (immutable).
	ResourceGroupID *string `json:"resourceGroupId,omitempty"`

	// The version of the cluster (immutable).
	Version *string `json:"version,omitempty"`
}

// ConsoleProfile represents a console profile.
type ConsoleProfile struct {
	// The URL to access the cluster console (immutable).
	URL *string `json:"url,omitempty"`
}

// Display represents the display details of an operation.
type Display struct {
	// Friendly name of the operation.
	Description *string `json:"description,omitempty"`

	// Operation type: read, write, delete, listKeys/action, etc.
	Operation *string `json:"operation,omitempty"`

	// Friendly name of the resource provider.
	Provider *string `json:"provider,omitempty"`

	// Resource type on which the operation is performed.
	Resource *string `json:"resource,omitempty"`
}

// IngressProfile represents an ingress profile.
type IngressProfile struct {
	// The IP of the ingress (immutable).
	IP *string `json:"ip,omitempty"`

	// The ingress profile name. Must be "default" (immutable).
	Name *string `json:"name,omitempty"`

	// Ingress visibility (immutable).
	Visibility *Visibility `json:"visibility,omitempty"`
}

// MasterProfile represents a master profile.
type MasterProfile struct {
	// The Azure resource ID of the master subnet (immutable).
	SubnetID *string `json:"subnetId,omitempty"`

	// The size of the master VMs (immutable).
	VMSize *VMSize `json:"vmSize,omitempty"`
}

// NetworkProfile represents a network profile.
type NetworkProfile struct {
	// The CIDR used for OpenShift/Kubernetes Pods (immutable).
	PodCidr *string `json:"podCidr,omitempty"`

	// The CIDR used for OpenShift/Kubernetes Services (immutable).
	ServiceCidr *string `json:"serviceCidr,omitempty"`
}

// OpenShiftCluster represents an Azure Red Hat OpenShift cluster.
type OpenShiftCluster struct {
	TrackedResource
	// The cluster properties.
	Properties *OpenShiftClusterProperties `json:"properties,omitempty"`
}

// MarshalJSON implements the json.Marshaller interface for type OpenShiftCluster.
func (o OpenShiftCluster) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	o.TrackedResource.marshalInternal(objectMap)
	populate(objectMap, "properties", o.Properties)
	return json.Marshal(objectMap)
}

// OpenShiftClusterCredentials represents an OpenShift cluster's credentials
type OpenShiftClusterCredentials struct {
	// The password for the kubeadmin user
	KubeadminPassword *string `json:"kubeadminPassword,omitempty"`

	// The username for the kubeadmin user
	KubeadminUsername *string `json:"kubeadminUsername,omitempty"`
}

// OpenShiftClusterList represents a list of OpenShift clusters.
type OpenShiftClusterList struct {
	// The link used to get the next page of operations.
	NextLink *string `json:"nextLink,omitempty"`

	// The list of OpenShift clusters.
	Value []*OpenShiftCluster `json:"value,omitempty"`
}

// MarshalJSON implements the json.Marshaller interface for type OpenShiftClusterList.
func (o OpenShiftClusterList) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "nextLink", o.NextLink)
	populate(objectMap, "value", o.Value)
	return json.Marshal(objectMap)
}

// OpenShiftClusterProperties represents an OpenShift cluster's properties.
type OpenShiftClusterProperties struct {
	// The cluster API server profile.
	ApiserverProfile *APIServerProfile `json:"apiserverProfile,omitempty"`

	// The cluster profile.
	ClusterProfile *ClusterProfile `json:"clusterProfile,omitempty"`

	// The console profile.
	ConsoleProfile *ConsoleProfile `json:"consoleProfile,omitempty"`

	// The cluster ingress profiles.
	IngressProfiles []*IngressProfile `json:"ingressProfiles,omitempty"`

	// The cluster master profile.
	MasterProfile *MasterProfile `json:"masterProfile,omitempty"`

	// The cluster network profile.
	NetworkProfile *NetworkProfile `json:"networkProfile,omitempty"`

	// The cluster provisioning state (immutable).
	ProvisioningState *ProvisioningState `json:"provisioningState,omitempty"`

	// The cluster service principal profile.
	ServicePrincipalProfile *ServicePrincipalProfile `json:"servicePrincipalProfile,omitempty"`

	// The cluster worker profiles.
	WorkerProfiles []*WorkerProfile `json:"workerProfiles,omitempty"`
}

// MarshalJSON implements the json.Marshaller interface for type OpenShiftClusterProperties.
func (o OpenShiftClusterProperties) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "apiserverProfile", o.ApiserverProfile)
	populate(objectMap, "clusterProfile", o.ClusterProfile)
	populate(objectMap, "consoleProfile", o.ConsoleProfile)
	populate(objectMap, "ingressProfiles", o.IngressProfiles)
	populate(objectMap, "masterProfile", o.MasterProfile)
	populate(objectMap, "networkProfile", o.NetworkProfile)
	populate(objectMap, "provisioningState", o.ProvisioningState)
	populate(objectMap, "servicePrincipalProfile", o.ServicePrincipalProfile)
	populate(objectMap, "workerProfiles", o.WorkerProfiles)
	return json.Marshal(objectMap)
}

// OpenShiftClusterUpdate - OpenShiftCluster represents an Azure Red Hat OpenShift cluster.
type OpenShiftClusterUpdate struct {
	// The cluster properties.
	Properties *OpenShiftClusterProperties `json:"properties,omitempty"`

	// The resource tags.
	Tags map[string]*string `json:"tags,omitempty"`
}

// MarshalJSON implements the json.Marshaller interface for type OpenShiftClusterUpdate.
func (o OpenShiftClusterUpdate) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "properties", o.Properties)
	populate(objectMap, "tags", o.Tags)
	return json.Marshal(objectMap)
}

// OpenShiftClustersBeginCreateOrUpdateOptions contains the optional parameters for the OpenShiftClusters.BeginCreateOrUpdate method.
type OpenShiftClustersBeginCreateOrUpdateOptions struct {
	// placeholder for future optional parameters
}

// OpenShiftClustersBeginDeleteOptions contains the optional parameters for the OpenShiftClusters.BeginDelete method.
type OpenShiftClustersBeginDeleteOptions struct {
	// placeholder for future optional parameters
}

// OpenShiftClustersBeginUpdateOptions contains the optional parameters for the OpenShiftClusters.BeginUpdate method.
type OpenShiftClustersBeginUpdateOptions struct {
	// placeholder for future optional parameters
}

// OpenShiftClustersGetOptions contains the optional parameters for the OpenShiftClusters.Get method.
type OpenShiftClustersGetOptions struct {
	// placeholder for future optional parameters
}

// OpenShiftClustersListByResourceGroupOptions contains the optional parameters for the OpenShiftClusters.ListByResourceGroup method.
type OpenShiftClustersListByResourceGroupOptions struct {
	// placeholder for future optional parameters
}

// OpenShiftClustersListCredentialsOptions contains the optional parameters for the OpenShiftClusters.ListCredentials method.
type OpenShiftClustersListCredentialsOptions struct {
	// placeholder for future optional parameters
}

// OpenShiftClustersListOptions contains the optional parameters for the OpenShiftClusters.List method.
type OpenShiftClustersListOptions struct {
	// placeholder for future optional parameters
}

// Operation represents an RP operation.
type Operation struct {
	// The object that describes the operation.
	Display *Display `json:"display,omitempty"`

	// Operation name: {provider}/{resource}/{operation}.
	Name *string `json:"name,omitempty"`

	// Sources of requests to this operation. Comma separated list with valid values user or system, e.g. "user,system".
	Origin *string `json:"origin,omitempty"`
}

// OperationList represents an RP operation list.
type OperationList struct {
	// The link used to get the next page of operations.
	NextLink *string `json:"nextLink,omitempty"`

	// List of operations supported by the resource provider.
	Value []*Operation `json:"value,omitempty"`
}

// MarshalJSON implements the json.Marshaller interface for type OperationList.
func (o OperationList) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "nextLink", o.NextLink)
	populate(objectMap, "value", o.Value)
	return json.Marshal(objectMap)
}

// OperationsListOptions contains the optional parameters for the Operations.List method.
type OperationsListOptions struct {
	// placeholder for future optional parameters
}

// Resource - Common fields that are returned in the response for all Azure Resource Manager resources
type Resource struct {
	// READ-ONLY; Fully qualified resource ID for the resource. Ex - /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}
	ID *string `json:"id,omitempty" azure:"ro"`

	// READ-ONLY; The name of the resource
	Name *string `json:"name,omitempty" azure:"ro"`

	// READ-ONLY; The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or "Microsoft.Storage/storageAccounts"
	Type *string `json:"type,omitempty" azure:"ro"`
}

// MarshalJSON implements the json.Marshaller interface for type Resource.
func (r Resource) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	r.marshalInternal(objectMap)
	return json.Marshal(objectMap)
}

func (r Resource) marshalInternal(objectMap map[string]interface{}) {
	populate(objectMap, "id", r.ID)
	populate(objectMap, "name", r.Name)
	populate(objectMap, "type", r.Type)
}

// ServicePrincipalProfile represents a service principal profile.
type ServicePrincipalProfile struct {
	// The client ID used for the cluster (immutable).
	ClientID *string `json:"clientId,omitempty"`

	// The client secret used for the cluster (immutable).
	ClientSecret *string `json:"clientSecret,omitempty"`
}

// TrackedResource - The resource model definition for an Azure Resource Manager tracked top level resource which has 'tags' and a 'location'
type TrackedResource struct {
	Resource
	// REQUIRED; The geo-location where the resource lives
	Location *string `json:"location,omitempty"`

	// Resource tags.
	Tags map[string]*string `json:"tags,omitempty"`
}

// MarshalJSON implements the json.Marshaller interface for type TrackedResource.
func (t TrackedResource) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	t.marshalInternal(objectMap)
	return json.Marshal(objectMap)
}

func (t TrackedResource) marshalInternal(objectMap map[string]interface{}) {
	t.Resource.marshalInternal(objectMap)
	populate(objectMap, "location", t.Location)
	populate(objectMap, "tags", t.Tags)
}

// WorkerProfile represents a worker profile.
type WorkerProfile struct {
	// The number of worker VMs. Must be between 3 and 20 (immutable).
	Count *int32 `json:"count,omitempty"`

	// The disk size of the worker VMs. Must be 128 or greater (immutable).
	DiskSizeGB *int32 `json:"diskSizeGB,omitempty"`

	// The worker profile name. Must be "worker" (immutable).
	Name *string `json:"name,omitempty"`

	// The Azure resource ID of the worker subnet (immutable).
	SubnetID *string `json:"subnetId,omitempty"`

	// The size of the worker VMs (immutable).
	VMSize *VMSize `json:"vmSize,omitempty"`
}

func populate(m map[string]interface{}, k string, v interface{}) {
	if v == nil {
		return
	} else if azcore.IsNullValue(v) {
		m[k] = nil
	} else if !reflect.ValueOf(v).IsNil() {
		m[k] = v
	}
}
