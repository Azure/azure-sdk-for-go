//go:build go1.16
// +build go1.16

// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

package armredis

import (
	"encoding/json"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore"
	"reflect"
	"time"
)

// AccessKeys - Redis cache access keys.
type AccessKeys struct {
	// READ-ONLY; The current primary key that clients can use to authenticate with Redis cache.
	PrimaryKey *string `json:"primaryKey,omitempty" azure:"ro"`

	// READ-ONLY; The current secondary key that clients can use to authenticate with Redis cache.
	SecondaryKey *string `json:"secondaryKey,omitempty" azure:"ro"`
}

// CheckNameAvailabilityParameters - Parameters body to pass for resource name availability check.
type CheckNameAvailabilityParameters struct {
	// REQUIRED; Resource name.
	Name *string `json:"name,omitempty"`

	// REQUIRED; Resource type. The only legal value of this property for checking redis cache name availability is 'Microsoft.Cache/redis'.
	Type *string `json:"type,omitempty"`
}

// ClientBeginCreateOptions contains the optional parameters for the Client.BeginCreate method.
type ClientBeginCreateOptions struct {
	// placeholder for future optional parameters
}

// ClientBeginDeleteOptions contains the optional parameters for the Client.BeginDelete method.
type ClientBeginDeleteOptions struct {
	// placeholder for future optional parameters
}

// ClientBeginExportDataOptions contains the optional parameters for the Client.BeginExportData method.
type ClientBeginExportDataOptions struct {
	// placeholder for future optional parameters
}

// ClientBeginImportDataOptions contains the optional parameters for the Client.BeginImportData method.
type ClientBeginImportDataOptions struct {
	// placeholder for future optional parameters
}

// ClientCheckNameAvailabilityOptions contains the optional parameters for the Client.CheckNameAvailability method.
type ClientCheckNameAvailabilityOptions struct {
	// placeholder for future optional parameters
}

// ClientForceRebootOptions contains the optional parameters for the Client.ForceReboot method.
type ClientForceRebootOptions struct {
	// placeholder for future optional parameters
}

// ClientGetOptions contains the optional parameters for the Client.Get method.
type ClientGetOptions struct {
	// placeholder for future optional parameters
}

// ClientListByResourceGroupOptions contains the optional parameters for the Client.ListByResourceGroup method.
type ClientListByResourceGroupOptions struct {
	// placeholder for future optional parameters
}

// ClientListBySubscriptionOptions contains the optional parameters for the Client.ListBySubscription method.
type ClientListBySubscriptionOptions struct {
	// placeholder for future optional parameters
}

// ClientListKeysOptions contains the optional parameters for the Client.ListKeys method.
type ClientListKeysOptions struct {
	// placeholder for future optional parameters
}

// ClientListUpgradeNotificationsOptions contains the optional parameters for the Client.ListUpgradeNotifications method.
type ClientListUpgradeNotificationsOptions struct {
	// placeholder for future optional parameters
}

// ClientRegenerateKeyOptions contains the optional parameters for the Client.RegenerateKey method.
type ClientRegenerateKeyOptions struct {
	// placeholder for future optional parameters
}

// ClientUpdateOptions contains the optional parameters for the Client.Update method.
type ClientUpdateOptions struct {
	// placeholder for future optional parameters
}

// CommonProperties - Create/Update/Get common properties of the redis cache.
type CommonProperties struct {
	// Specifies whether the non-ssl Redis server port (6379) is enabled.
	EnableNonSSLPort *bool `json:"enableNonSslPort,omitempty"`

	// Optional: requires clients to use a specified TLS version (or higher) to connect (e,g, '1.0', '1.1', '1.2')
	MinimumTLSVersion *TLSVersion `json:"minimumTlsVersion,omitempty"`

	// Whether or not public endpoint access is allowed for this cache. Value is optional but if passed in, must be 'Enabled'
	// or 'Disabled'. If 'Disabled', private endpoints are the exclusive access method.
	// Default value is 'Enabled'
	PublicNetworkAccess *PublicNetworkAccess `json:"publicNetworkAccess,omitempty"`

	// All Redis Settings. Few possible keys:
	// rdb-backup-enabled,rdb-storage-connection-string,rdb-backup-frequency,maxmemory-delta,maxmemory-policy,notify-keyspace-events,maxmemory-samples,slowlog-log-slower-than,slowlog-max-len,list-max-ziplist-entries,list-max-ziplist-value,hash-max-ziplist-entries,hash-max-ziplist-value,set-max-intset-entries,zset-max-ziplist-entries,zset-max-ziplist-value
	// etc.
	RedisConfiguration *CommonPropertiesRedisConfiguration `json:"redisConfiguration,omitempty"`

	// Redis version. Only major version will be used in PUT/PATCH request with current valid values: (4, 6)
	RedisVersion *string `json:"redisVersion,omitempty"`

	// The number of replicas to be created per primary.
	ReplicasPerMaster *int32 `json:"replicasPerMaster,omitempty"`

	// The number of replicas to be created per primary.
	ReplicasPerPrimary *int32 `json:"replicasPerPrimary,omitempty"`

	// The number of shards to be created on a Premium Cluster Cache.
	ShardCount *int32 `json:"shardCount,omitempty"`

	// A dictionary of tenant settings
	TenantSettings map[string]*string `json:"tenantSettings,omitempty"`
}

// MarshalJSON implements the json.Marshaller interface for type CommonProperties.
func (c CommonProperties) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "enableNonSslPort", c.EnableNonSSLPort)
	populate(objectMap, "minimumTlsVersion", c.MinimumTLSVersion)
	populate(objectMap, "publicNetworkAccess", c.PublicNetworkAccess)
	populate(objectMap, "redisConfiguration", c.RedisConfiguration)
	populate(objectMap, "redisVersion", c.RedisVersion)
	populate(objectMap, "replicasPerMaster", c.ReplicasPerMaster)
	populate(objectMap, "replicasPerPrimary", c.ReplicasPerPrimary)
	populate(objectMap, "shardCount", c.ShardCount)
	populate(objectMap, "tenantSettings", c.TenantSettings)
	return json.Marshal(objectMap)
}

// CommonPropertiesRedisConfiguration - All Redis Settings. Few possible keys:
// rdb-backup-enabled,rdb-storage-connection-string,rdb-backup-frequency,maxmemory-delta,maxmemory-policy,notify-keyspace-events,maxmemory-samples,slowlog-log-slower-than,slowlog-max-len,list-max-ziplist-entries,list-max-ziplist-value,hash-max-ziplist-entries,hash-max-ziplist-value,set-max-intset-entries,zset-max-ziplist-entries,zset-max-ziplist-value
// etc.
type CommonPropertiesRedisConfiguration struct {
	// OPTIONAL; Contains additional key/value pairs not defined in the schema.
	AdditionalProperties map[string]interface{}

	// First storage account connection string
	AofStorageConnectionString0 *string `json:"aof-storage-connection-string-0,omitempty"`

	// Second storage account connection string
	AofStorageConnectionString1 *string `json:"aof-storage-connection-string-1,omitempty"`

	// Value in megabytes reserved for fragmentation per shard
	MaxfragmentationmemoryReserved *string `json:"maxfragmentationmemory-reserved,omitempty"`

	// Value in megabytes reserved for non-cache usage per shard e.g. failover.
	MaxmemoryDelta *string `json:"maxmemory-delta,omitempty"`

	// The eviction strategy used when your data won't fit within its memory limit.
	MaxmemoryPolicy *string `json:"maxmemory-policy,omitempty"`

	// Value in megabytes reserved for non-cache usage per shard e.g. failover.
	MaxmemoryReserved *string `json:"maxmemory-reserved,omitempty"`

	// Specifies whether the rdb backup is enabled
	RdbBackupEnabled *string `json:"rdb-backup-enabled,omitempty"`

	// Specifies the frequency for creating rdb backup
	RdbBackupFrequency *string `json:"rdb-backup-frequency,omitempty"`

	// Specifies the maximum number of snapshots for rdb backup
	RdbBackupMaxSnapshotCount *string `json:"rdb-backup-max-snapshot-count,omitempty"`

	// The storage account connection string for storing rdb file
	RdbStorageConnectionString *string `json:"rdb-storage-connection-string,omitempty"`

	// READ-ONLY; The max clients config
	Maxclients *string `json:"maxclients,omitempty" azure:"ro"`

	// READ-ONLY; Preferred auth method to communicate to storage account used for data archive, specify SAS or ManagedIdentity,
	// default value is SAS
	PreferredDataArchiveAuthMethod *string `json:"preferred-data-archive-auth-method,omitempty" azure:"ro"`

	// READ-ONLY; Preferred auth method to communicate to storage account used for data persistence, specify SAS or ManagedIdentity,
	// default value is SAS
	PreferredDataPersistenceAuthMethod *string `json:"preferred-data-persistence-auth-method,omitempty" azure:"ro"`
}

// MarshalJSON implements the json.Marshaller interface for type CommonPropertiesRedisConfiguration.
func (c CommonPropertiesRedisConfiguration) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "aof-storage-connection-string-0", c.AofStorageConnectionString0)
	populate(objectMap, "aof-storage-connection-string-1", c.AofStorageConnectionString1)
	populate(objectMap, "maxclients", c.Maxclients)
	populate(objectMap, "maxfragmentationmemory-reserved", c.MaxfragmentationmemoryReserved)
	populate(objectMap, "maxmemory-delta", c.MaxmemoryDelta)
	populate(objectMap, "maxmemory-policy", c.MaxmemoryPolicy)
	populate(objectMap, "maxmemory-reserved", c.MaxmemoryReserved)
	populate(objectMap, "preferred-data-archive-auth-method", c.PreferredDataArchiveAuthMethod)
	populate(objectMap, "preferred-data-persistence-auth-method", c.PreferredDataPersistenceAuthMethod)
	populate(objectMap, "rdb-backup-enabled", c.RdbBackupEnabled)
	populate(objectMap, "rdb-backup-frequency", c.RdbBackupFrequency)
	populate(objectMap, "rdb-backup-max-snapshot-count", c.RdbBackupMaxSnapshotCount)
	populate(objectMap, "rdb-storage-connection-string", c.RdbStorageConnectionString)
	if c.AdditionalProperties != nil {
		for key, val := range c.AdditionalProperties {
			objectMap[key] = val
		}
	}
	return json.Marshal(objectMap)
}

// UnmarshalJSON implements the json.Unmarshaller interface for type CommonPropertiesRedisConfiguration.
func (c *CommonPropertiesRedisConfiguration) UnmarshalJSON(data []byte) error {
	var rawMsg map[string]json.RawMessage
	if err := json.Unmarshal(data, &rawMsg); err != nil {
		return err
	}
	for key, val := range rawMsg {
		var err error
		switch key {
		case "aof-storage-connection-string-0":
			err = unpopulate(val, &c.AofStorageConnectionString0)
			delete(rawMsg, key)
		case "aof-storage-connection-string-1":
			err = unpopulate(val, &c.AofStorageConnectionString1)
			delete(rawMsg, key)
		case "maxclients":
			err = unpopulate(val, &c.Maxclients)
			delete(rawMsg, key)
		case "maxfragmentationmemory-reserved":
			err = unpopulate(val, &c.MaxfragmentationmemoryReserved)
			delete(rawMsg, key)
		case "maxmemory-delta":
			err = unpopulate(val, &c.MaxmemoryDelta)
			delete(rawMsg, key)
		case "maxmemory-policy":
			err = unpopulate(val, &c.MaxmemoryPolicy)
			delete(rawMsg, key)
		case "maxmemory-reserved":
			err = unpopulate(val, &c.MaxmemoryReserved)
			delete(rawMsg, key)
		case "preferred-data-archive-auth-method":
			err = unpopulate(val, &c.PreferredDataArchiveAuthMethod)
			delete(rawMsg, key)
		case "preferred-data-persistence-auth-method":
			err = unpopulate(val, &c.PreferredDataPersistenceAuthMethod)
			delete(rawMsg, key)
		case "rdb-backup-enabled":
			err = unpopulate(val, &c.RdbBackupEnabled)
			delete(rawMsg, key)
		case "rdb-backup-frequency":
			err = unpopulate(val, &c.RdbBackupFrequency)
			delete(rawMsg, key)
		case "rdb-backup-max-snapshot-count":
			err = unpopulate(val, &c.RdbBackupMaxSnapshotCount)
			delete(rawMsg, key)
		case "rdb-storage-connection-string":
			err = unpopulate(val, &c.RdbStorageConnectionString)
			delete(rawMsg, key)
		default:
			if c.AdditionalProperties == nil {
				c.AdditionalProperties = map[string]interface{}{}
			}
			if val != nil {
				var aux interface{}
				err = json.Unmarshal(val, &aux)
				c.AdditionalProperties[key] = aux
			}
			delete(rawMsg, key)
		}
		if err != nil {
			return err
		}
	}
	return nil
}

// CreateParameters - Parameters supplied to the Create Redis operation.
type CreateParameters struct {
	// REQUIRED; The geo-location where the resource lives
	Location *string `json:"location,omitempty"`

	// REQUIRED; Redis cache properties.
	Properties *CreateProperties `json:"properties,omitempty"`

	// The identity of the resource.
	Identity *ManagedServiceIdentity `json:"identity,omitempty"`

	// Resource tags.
	Tags map[string]*string `json:"tags,omitempty"`

	// A list of availability zones denoting where the resource needs to come from.
	Zones []*string `json:"zones,omitempty"`
}

// MarshalJSON implements the json.Marshaller interface for type CreateParameters.
func (c CreateParameters) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "identity", c.Identity)
	populate(objectMap, "location", c.Location)
	populate(objectMap, "properties", c.Properties)
	populate(objectMap, "tags", c.Tags)
	populate(objectMap, "zones", c.Zones)
	return json.Marshal(objectMap)
}

// CreateProperties - Properties supplied to Create Redis operation.
type CreateProperties struct {
	// REQUIRED; The SKU of the Redis cache to deploy.
	SKU *SKU `json:"sku,omitempty"`

	// Specifies whether the non-ssl Redis server port (6379) is enabled.
	EnableNonSSLPort *bool `json:"enableNonSslPort,omitempty"`

	// Optional: requires clients to use a specified TLS version (or higher) to connect (e,g, '1.0', '1.1', '1.2')
	MinimumTLSVersion *TLSVersion `json:"minimumTlsVersion,omitempty"`

	// Whether or not public endpoint access is allowed for this cache. Value is optional but if passed in, must be 'Enabled'
	// or 'Disabled'. If 'Disabled', private endpoints are the exclusive access method.
	// Default value is 'Enabled'
	PublicNetworkAccess *PublicNetworkAccess `json:"publicNetworkAccess,omitempty"`

	// All Redis Settings. Few possible keys:
	// rdb-backup-enabled,rdb-storage-connection-string,rdb-backup-frequency,maxmemory-delta,maxmemory-policy,notify-keyspace-events,maxmemory-samples,slowlog-log-slower-than,slowlog-max-len,list-max-ziplist-entries,list-max-ziplist-value,hash-max-ziplist-entries,hash-max-ziplist-value,set-max-intset-entries,zset-max-ziplist-entries,zset-max-ziplist-value
	// etc.
	RedisConfiguration *CommonPropertiesRedisConfiguration `json:"redisConfiguration,omitempty"`

	// Redis version. Only major version will be used in PUT/PATCH request with current valid values: (4, 6)
	RedisVersion *string `json:"redisVersion,omitempty"`

	// The number of replicas to be created per primary.
	ReplicasPerMaster *int32 `json:"replicasPerMaster,omitempty"`

	// The number of replicas to be created per primary.
	ReplicasPerPrimary *int32 `json:"replicasPerPrimary,omitempty"`

	// The number of shards to be created on a Premium Cluster Cache.
	ShardCount *int32 `json:"shardCount,omitempty"`

	// Static IP address. Optionally, may be specified when deploying a Redis cache inside an existing Azure Virtual Network;
	// auto assigned by default.
	StaticIP *string `json:"staticIP,omitempty"`

	// The full resource ID of a subnet in a virtual network to deploy the Redis cache in. Example format:
	// /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/Microsoft.{Network|ClassicNetwork}/VirtualNetworks/vnet1/subnets/subnet1
	SubnetID *string `json:"subnetId,omitempty"`

	// A dictionary of tenant settings
	TenantSettings map[string]*string `json:"tenantSettings,omitempty"`
}

// MarshalJSON implements the json.Marshaller interface for type CreateProperties.
func (c CreateProperties) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "enableNonSslPort", c.EnableNonSSLPort)
	populate(objectMap, "minimumTlsVersion", c.MinimumTLSVersion)
	populate(objectMap, "publicNetworkAccess", c.PublicNetworkAccess)
	populate(objectMap, "redisConfiguration", c.RedisConfiguration)
	populate(objectMap, "redisVersion", c.RedisVersion)
	populate(objectMap, "replicasPerMaster", c.ReplicasPerMaster)
	populate(objectMap, "replicasPerPrimary", c.ReplicasPerPrimary)
	populate(objectMap, "sku", c.SKU)
	populate(objectMap, "shardCount", c.ShardCount)
	populate(objectMap, "staticIP", c.StaticIP)
	populate(objectMap, "subnetId", c.SubnetID)
	populate(objectMap, "tenantSettings", c.TenantSettings)
	return json.Marshal(objectMap)
}

// ExportRDBParameters - Parameters for Redis export operation.
type ExportRDBParameters struct {
	// REQUIRED; Container name to export to.
	Container *string `json:"container,omitempty"`

	// REQUIRED; Prefix to use for exported files.
	Prefix *string `json:"prefix,omitempty"`

	// File format.
	Format *string `json:"format,omitempty"`
}

// FirewallRule - A firewall rule on a redis cache has a name, and describes a contiguous range of IP addresses permitted
// to connect
type FirewallRule struct {
	// REQUIRED; redis cache firewall rule properties
	Properties *FirewallRuleProperties `json:"properties,omitempty"`

	// READ-ONLY; Fully qualified resource ID for the resource. Ex - /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}
	ID *string `json:"id,omitempty" azure:"ro"`

	// READ-ONLY; The name of the resource
	Name *string `json:"name,omitempty" azure:"ro"`

	// READ-ONLY; The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or "Microsoft.Storage/storageAccounts"
	Type *string `json:"type,omitempty" azure:"ro"`
}

// FirewallRuleCreateParameters - Parameters required for creating a firewall rule on redis cache. (Note, you can just use
// the FirewallRule type instead now.)
type FirewallRuleCreateParameters struct {
	// REQUIRED; redis cache firewall rule properties
	Properties *FirewallRuleProperties `json:"properties,omitempty"`

	// READ-ONLY; Fully qualified resource ID for the resource. Ex - /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}
	ID *string `json:"id,omitempty" azure:"ro"`

	// READ-ONLY; The name of the resource
	Name *string `json:"name,omitempty" azure:"ro"`

	// READ-ONLY; The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or "Microsoft.Storage/storageAccounts"
	Type *string `json:"type,omitempty" azure:"ro"`
}

// FirewallRuleListResult - The response of list firewall rules Redis operation.
type FirewallRuleListResult struct {
	// Results of the list firewall rules operation.
	Value []*FirewallRule `json:"value,omitempty"`

	// READ-ONLY; Link for next page of results.
	NextLink *string `json:"nextLink,omitempty" azure:"ro"`
}

// MarshalJSON implements the json.Marshaller interface for type FirewallRuleListResult.
func (f FirewallRuleListResult) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "nextLink", f.NextLink)
	populate(objectMap, "value", f.Value)
	return json.Marshal(objectMap)
}

// FirewallRuleProperties - Specifies a range of IP addresses permitted to connect to the cache
type FirewallRuleProperties struct {
	// REQUIRED; highest IP address included in the range
	EndIP *string `json:"endIP,omitempty"`

	// REQUIRED; lowest IP address included in the range
	StartIP *string `json:"startIP,omitempty"`
}

// FirewallRulesClientCreateOrUpdateOptions contains the optional parameters for the FirewallRulesClient.CreateOrUpdate method.
type FirewallRulesClientCreateOrUpdateOptions struct {
	// placeholder for future optional parameters
}

// FirewallRulesClientDeleteOptions contains the optional parameters for the FirewallRulesClient.Delete method.
type FirewallRulesClientDeleteOptions struct {
	// placeholder for future optional parameters
}

// FirewallRulesClientGetOptions contains the optional parameters for the FirewallRulesClient.Get method.
type FirewallRulesClientGetOptions struct {
	// placeholder for future optional parameters
}

// FirewallRulesClientListOptions contains the optional parameters for the FirewallRulesClient.List method.
type FirewallRulesClientListOptions struct {
	// placeholder for future optional parameters
}

// ForceRebootResponse - Response to force reboot for Redis cache.
type ForceRebootResponse struct {
	// READ-ONLY; Status message
	Message *string `json:"message,omitempty" azure:"ro"`
}

// ImportRDBParameters - Parameters for Redis import operation.
type ImportRDBParameters struct {
	// REQUIRED; files to import.
	Files []*string `json:"files,omitempty"`

	// File format.
	Format *string `json:"format,omitempty"`
}

// MarshalJSON implements the json.Marshaller interface for type ImportRDBParameters.
func (i ImportRDBParameters) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "files", i.Files)
	populate(objectMap, "format", i.Format)
	return json.Marshal(objectMap)
}

// InstanceDetails - Details of single instance of redis.
type InstanceDetails struct {
	// READ-ONLY; Specifies whether the instance is a primary node.
	IsMaster *bool `json:"isMaster,omitempty" azure:"ro"`

	// READ-ONLY; Specifies whether the instance is a primary node.
	IsPrimary *bool `json:"isPrimary,omitempty" azure:"ro"`

	// READ-ONLY; If enableNonSslPort is true, provides Redis instance Non-SSL port.
	NonSSLPort *int32 `json:"nonSslPort,omitempty" azure:"ro"`

	// READ-ONLY; Redis instance SSL port.
	SSLPort *int32 `json:"sslPort,omitempty" azure:"ro"`

	// READ-ONLY; If clustering is enabled, the Shard ID of Redis Instance
	ShardID *int32 `json:"shardId,omitempty" azure:"ro"`

	// READ-ONLY; If the Cache uses availability zones, specifies availability zone where this instance is located.
	Zone *string `json:"zone,omitempty" azure:"ro"`
}

// LinkedServer - Linked server Id
type LinkedServer struct {
	// READ-ONLY; Linked server Id.
	ID *string `json:"id,omitempty" azure:"ro"`
}

// LinkedServerClientBeginCreateOptions contains the optional parameters for the LinkedServerClient.BeginCreate method.
type LinkedServerClientBeginCreateOptions struct {
	// placeholder for future optional parameters
}

// LinkedServerClientDeleteOptions contains the optional parameters for the LinkedServerClient.Delete method.
type LinkedServerClientDeleteOptions struct {
	// placeholder for future optional parameters
}

// LinkedServerClientGetOptions contains the optional parameters for the LinkedServerClient.Get method.
type LinkedServerClientGetOptions struct {
	// placeholder for future optional parameters
}

// LinkedServerClientListOptions contains the optional parameters for the LinkedServerClient.List method.
type LinkedServerClientListOptions struct {
	// placeholder for future optional parameters
}

// LinkedServerCreateParameters - Parameter required for creating a linked server to redis cache.
type LinkedServerCreateParameters struct {
	// REQUIRED; Properties required to create a linked server.
	Properties *LinkedServerCreateProperties `json:"properties,omitempty"`
}

// LinkedServerCreateProperties - Create properties for a linked server
type LinkedServerCreateProperties struct {
	// REQUIRED; Fully qualified resourceId of the linked redis cache.
	LinkedRedisCacheID *string `json:"linkedRedisCacheId,omitempty"`

	// REQUIRED; Location of the linked redis cache.
	LinkedRedisCacheLocation *string `json:"linkedRedisCacheLocation,omitempty"`

	// REQUIRED; Role of the linked server.
	ServerRole *ReplicationRole `json:"serverRole,omitempty"`
}

// LinkedServerProperties - Properties of a linked server to be returned in get/put response
type LinkedServerProperties struct {
	// REQUIRED; Fully qualified resourceId of the linked redis cache.
	LinkedRedisCacheID *string `json:"linkedRedisCacheId,omitempty"`

	// REQUIRED; Location of the linked redis cache.
	LinkedRedisCacheLocation *string `json:"linkedRedisCacheLocation,omitempty"`

	// REQUIRED; Role of the linked server.
	ServerRole *ReplicationRole `json:"serverRole,omitempty"`

	// READ-ONLY; Terminal state of the link between primary and secondary redis cache.
	ProvisioningState *string `json:"provisioningState,omitempty" azure:"ro"`
}

// LinkedServerWithProperties - Response to put/get linked server (with properties) for Redis cache.
type LinkedServerWithProperties struct {
	// Properties of the linked server.
	Properties *LinkedServerProperties `json:"properties,omitempty"`

	// READ-ONLY; Fully qualified resource ID for the resource. Ex - /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}
	ID *string `json:"id,omitempty" azure:"ro"`

	// READ-ONLY; The name of the resource
	Name *string `json:"name,omitempty" azure:"ro"`

	// READ-ONLY; The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or "Microsoft.Storage/storageAccounts"
	Type *string `json:"type,omitempty" azure:"ro"`
}

// LinkedServerWithPropertiesList - List of linked servers (with properties) of a Redis cache.
type LinkedServerWithPropertiesList struct {
	// List of linked servers (with properties) of a Redis cache.
	Value []*LinkedServerWithProperties `json:"value,omitempty"`

	// READ-ONLY; Link for next set.
	NextLink *string `json:"nextLink,omitempty" azure:"ro"`
}

// MarshalJSON implements the json.Marshaller interface for type LinkedServerWithPropertiesList.
func (l LinkedServerWithPropertiesList) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "nextLink", l.NextLink)
	populate(objectMap, "value", l.Value)
	return json.Marshal(objectMap)
}

// ListResult - The response of list Redis operation.
type ListResult struct {
	// List of Redis cache instances.
	Value []*ResourceInfo `json:"value,omitempty"`

	// READ-ONLY; Link for next page of results.
	NextLink *string `json:"nextLink,omitempty" azure:"ro"`
}

// MarshalJSON implements the json.Marshaller interface for type ListResult.
func (l ListResult) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "nextLink", l.NextLink)
	populate(objectMap, "value", l.Value)
	return json.Marshal(objectMap)
}

// ManagedServiceIdentity - Managed service identity (system assigned and/or user assigned identities)
type ManagedServiceIdentity struct {
	// REQUIRED; Type of managed service identity (where both SystemAssigned and UserAssigned types are allowed).
	Type *ManagedServiceIdentityType `json:"type,omitempty"`

	// The set of user assigned identities associated with the resource. The userAssignedIdentities dictionary keys will be ARM
	// resource ids in the form:
	// '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ManagedIdentity/userAssignedIdentities/{identityName}.
	// The dictionary values can be empty objects ({}) in
	// requests.
	UserAssignedIdentities map[string]*UserAssignedIdentity `json:"userAssignedIdentities,omitempty"`

	// READ-ONLY; The service principal ID of the system assigned identity. This property will only be provided for a system assigned
	// identity.
	PrincipalID *string `json:"principalId,omitempty" azure:"ro"`

	// READ-ONLY; The tenant ID of the system assigned identity. This property will only be provided for a system assigned identity.
	TenantID *string `json:"tenantId,omitempty" azure:"ro"`
}

// MarshalJSON implements the json.Marshaller interface for type ManagedServiceIdentity.
func (m ManagedServiceIdentity) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "principalId", m.PrincipalID)
	populate(objectMap, "tenantId", m.TenantID)
	populate(objectMap, "type", m.Type)
	populate(objectMap, "userAssignedIdentities", m.UserAssignedIdentities)
	return json.Marshal(objectMap)
}

// NotificationListResponse - The response of listUpgradeNotifications.
type NotificationListResponse struct {
	// List of all notifications.
	Value []*UpgradeNotification `json:"value,omitempty"`

	// READ-ONLY; Link for next set of notifications.
	NextLink *string `json:"nextLink,omitempty" azure:"ro"`
}

// MarshalJSON implements the json.Marshaller interface for type NotificationListResponse.
func (n NotificationListResponse) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "nextLink", n.NextLink)
	populate(objectMap, "value", n.Value)
	return json.Marshal(objectMap)
}

// Operation - REST API operation
type Operation struct {
	// The object that describes the operation.
	Display *OperationDisplay `json:"display,omitempty"`

	// Operation name: {provider}/{resource}/{operation}
	Name *string `json:"name,omitempty"`
}

// OperationDisplay - The object that describes the operation.
type OperationDisplay struct {
	// Friendly name of the operation
	Description *string `json:"description,omitempty"`

	// Operation type: read, write, delete, listKeys/action, etc.
	Operation *string `json:"operation,omitempty"`

	// Friendly name of the resource provider
	Provider *string `json:"provider,omitempty"`

	// Resource type on which the operation is performed.
	Resource *string `json:"resource,omitempty"`
}

// OperationListResult - Result of the request to list REST API operations. It contains a list of operations and a URL nextLink
// to get the next set of results.
type OperationListResult struct {
	// List of operations supported by the resource provider.
	Value []*Operation `json:"value,omitempty"`

	// READ-ONLY; URL to get the next set of operation list results if there are any.
	NextLink *string `json:"nextLink,omitempty" azure:"ro"`
}

// MarshalJSON implements the json.Marshaller interface for type OperationListResult.
func (o OperationListResult) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "nextLink", o.NextLink)
	populate(objectMap, "value", o.Value)
	return json.Marshal(objectMap)
}

// OperationsClientListOptions contains the optional parameters for the OperationsClient.List method.
type OperationsClientListOptions struct {
	// placeholder for future optional parameters
}

// PatchSchedule - Response to put/get patch schedules for Redis cache.
type PatchSchedule struct {
	// REQUIRED; List of patch schedules for a Redis cache.
	Properties *ScheduleEntries `json:"properties,omitempty"`

	// READ-ONLY; Fully qualified resource ID for the resource. Ex - /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}
	ID *string `json:"id,omitempty" azure:"ro"`

	// READ-ONLY; The name of the resource
	Name *string `json:"name,omitempty" azure:"ro"`

	// READ-ONLY; The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or "Microsoft.Storage/storageAccounts"
	Type *string `json:"type,omitempty" azure:"ro"`
}

// PatchScheduleListResult - The response of list patch schedules Redis operation.
type PatchScheduleListResult struct {
	// Results of the list patch schedules operation.
	Value []*PatchSchedule `json:"value,omitempty"`

	// READ-ONLY; Link for next page of results.
	NextLink *string `json:"nextLink,omitempty" azure:"ro"`
}

// MarshalJSON implements the json.Marshaller interface for type PatchScheduleListResult.
func (p PatchScheduleListResult) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "nextLink", p.NextLink)
	populate(objectMap, "value", p.Value)
	return json.Marshal(objectMap)
}

// PatchSchedulesClientCreateOrUpdateOptions contains the optional parameters for the PatchSchedulesClient.CreateOrUpdate
// method.
type PatchSchedulesClientCreateOrUpdateOptions struct {
	// placeholder for future optional parameters
}

// PatchSchedulesClientDeleteOptions contains the optional parameters for the PatchSchedulesClient.Delete method.
type PatchSchedulesClientDeleteOptions struct {
	// placeholder for future optional parameters
}

// PatchSchedulesClientGetOptions contains the optional parameters for the PatchSchedulesClient.Get method.
type PatchSchedulesClientGetOptions struct {
	// placeholder for future optional parameters
}

// PatchSchedulesClientListByRedisResourceOptions contains the optional parameters for the PatchSchedulesClient.ListByRedisResource
// method.
type PatchSchedulesClientListByRedisResourceOptions struct {
	// placeholder for future optional parameters
}

// PrivateEndpoint - The Private Endpoint resource.
type PrivateEndpoint struct {
	// READ-ONLY; The ARM identifier for Private Endpoint
	ID *string `json:"id,omitempty" azure:"ro"`
}

// PrivateEndpointConnection - The Private Endpoint Connection resource.
type PrivateEndpointConnection struct {
	// Resource properties.
	Properties *PrivateEndpointConnectionProperties `json:"properties,omitempty"`

	// READ-ONLY; Fully qualified resource ID for the resource. Ex - /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}
	ID *string `json:"id,omitempty" azure:"ro"`

	// READ-ONLY; The name of the resource
	Name *string `json:"name,omitempty" azure:"ro"`

	// READ-ONLY; The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or "Microsoft.Storage/storageAccounts"
	Type *string `json:"type,omitempty" azure:"ro"`
}

// PrivateEndpointConnectionListResult - List of private endpoint connection associated with the specified storage account
type PrivateEndpointConnectionListResult struct {
	// Array of private endpoint connections
	Value []*PrivateEndpointConnection `json:"value,omitempty"`
}

// MarshalJSON implements the json.Marshaller interface for type PrivateEndpointConnectionListResult.
func (p PrivateEndpointConnectionListResult) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "value", p.Value)
	return json.Marshal(objectMap)
}

// PrivateEndpointConnectionProperties - Properties of the PrivateEndpointConnectProperties.
type PrivateEndpointConnectionProperties struct {
	// REQUIRED; A collection of information about the state of the connection between service consumer and provider.
	PrivateLinkServiceConnectionState *PrivateLinkServiceConnectionState `json:"privateLinkServiceConnectionState,omitempty"`

	// The resource of private end point.
	PrivateEndpoint *PrivateEndpoint `json:"privateEndpoint,omitempty"`

	// READ-ONLY; The provisioning state of the private endpoint connection resource.
	ProvisioningState *PrivateEndpointConnectionProvisioningState `json:"provisioningState,omitempty" azure:"ro"`
}

// PrivateEndpointConnectionsClientBeginPutOptions contains the optional parameters for the PrivateEndpointConnectionsClient.BeginPut
// method.
type PrivateEndpointConnectionsClientBeginPutOptions struct {
	// placeholder for future optional parameters
}

// PrivateEndpointConnectionsClientDeleteOptions contains the optional parameters for the PrivateEndpointConnectionsClient.Delete
// method.
type PrivateEndpointConnectionsClientDeleteOptions struct {
	// placeholder for future optional parameters
}

// PrivateEndpointConnectionsClientGetOptions contains the optional parameters for the PrivateEndpointConnectionsClient.Get
// method.
type PrivateEndpointConnectionsClientGetOptions struct {
	// placeholder for future optional parameters
}

// PrivateEndpointConnectionsClientListOptions contains the optional parameters for the PrivateEndpointConnectionsClient.List
// method.
type PrivateEndpointConnectionsClientListOptions struct {
	// placeholder for future optional parameters
}

// PrivateLinkResource - A private link resource
type PrivateLinkResource struct {
	// Resource properties.
	Properties *PrivateLinkResourceProperties `json:"properties,omitempty"`

	// READ-ONLY; Fully qualified resource ID for the resource. Ex - /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}
	ID *string `json:"id,omitempty" azure:"ro"`

	// READ-ONLY; The name of the resource
	Name *string `json:"name,omitempty" azure:"ro"`

	// READ-ONLY; The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or "Microsoft.Storage/storageAccounts"
	Type *string `json:"type,omitempty" azure:"ro"`
}

// PrivateLinkResourceListResult - A list of private link resources
type PrivateLinkResourceListResult struct {
	// Array of private link resources
	Value []*PrivateLinkResource `json:"value,omitempty"`
}

// MarshalJSON implements the json.Marshaller interface for type PrivateLinkResourceListResult.
func (p PrivateLinkResourceListResult) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "value", p.Value)
	return json.Marshal(objectMap)
}

// PrivateLinkResourceProperties - Properties of a private link resource.
type PrivateLinkResourceProperties struct {
	// The private link resource Private link DNS zone name.
	RequiredZoneNames []*string `json:"requiredZoneNames,omitempty"`

	// READ-ONLY; The private link resource group id.
	GroupID *string `json:"groupId,omitempty" azure:"ro"`

	// READ-ONLY; The private link resource required member names.
	RequiredMembers []*string `json:"requiredMembers,omitempty" azure:"ro"`
}

// MarshalJSON implements the json.Marshaller interface for type PrivateLinkResourceProperties.
func (p PrivateLinkResourceProperties) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "groupId", p.GroupID)
	populate(objectMap, "requiredMembers", p.RequiredMembers)
	populate(objectMap, "requiredZoneNames", p.RequiredZoneNames)
	return json.Marshal(objectMap)
}

// PrivateLinkResourcesClientListByRedisCacheOptions contains the optional parameters for the PrivateLinkResourcesClient.ListByRedisCache
// method.
type PrivateLinkResourcesClientListByRedisCacheOptions struct {
	// placeholder for future optional parameters
}

// PrivateLinkServiceConnectionState - A collection of information about the state of the connection between service consumer
// and provider.
type PrivateLinkServiceConnectionState struct {
	// A message indicating if changes on the service provider require any updates on the consumer.
	ActionsRequired *string `json:"actionsRequired,omitempty"`

	// The reason for approval/rejection of the connection.
	Description *string `json:"description,omitempty"`

	// Indicates whether the connection has been Approved/Rejected/Removed by the owner of the service.
	Status *PrivateEndpointServiceConnectionStatus `json:"status,omitempty"`
}

// Properties of the redis cache.
type Properties struct {
	// REQUIRED; The SKU of the Redis cache to deploy.
	SKU *SKU `json:"sku,omitempty"`

	// Specifies whether the non-ssl Redis server port (6379) is enabled.
	EnableNonSSLPort *bool `json:"enableNonSslPort,omitempty"`

	// Optional: requires clients to use a specified TLS version (or higher) to connect (e,g, '1.0', '1.1', '1.2')
	MinimumTLSVersion *TLSVersion `json:"minimumTlsVersion,omitempty"`

	// Whether or not public endpoint access is allowed for this cache. Value is optional but if passed in, must be 'Enabled'
	// or 'Disabled'. If 'Disabled', private endpoints are the exclusive access method.
	// Default value is 'Enabled'
	PublicNetworkAccess *PublicNetworkAccess `json:"publicNetworkAccess,omitempty"`

	// All Redis Settings. Few possible keys:
	// rdb-backup-enabled,rdb-storage-connection-string,rdb-backup-frequency,maxmemory-delta,maxmemory-policy,notify-keyspace-events,maxmemory-samples,slowlog-log-slower-than,slowlog-max-len,list-max-ziplist-entries,list-max-ziplist-value,hash-max-ziplist-entries,hash-max-ziplist-value,set-max-intset-entries,zset-max-ziplist-entries,zset-max-ziplist-value
	// etc.
	RedisConfiguration *CommonPropertiesRedisConfiguration `json:"redisConfiguration,omitempty"`

	// Redis version. Only major version will be used in PUT/PATCH request with current valid values: (4, 6)
	RedisVersion *string `json:"redisVersion,omitempty"`

	// The number of replicas to be created per primary.
	ReplicasPerMaster *int32 `json:"replicasPerMaster,omitempty"`

	// The number of replicas to be created per primary.
	ReplicasPerPrimary *int32 `json:"replicasPerPrimary,omitempty"`

	// The number of shards to be created on a Premium Cluster Cache.
	ShardCount *int32 `json:"shardCount,omitempty"`

	// Static IP address. Optionally, may be specified when deploying a Redis cache inside an existing Azure Virtual Network;
	// auto assigned by default.
	StaticIP *string `json:"staticIP,omitempty"`

	// The full resource ID of a subnet in a virtual network to deploy the Redis cache in. Example format:
	// /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/Microsoft.{Network|ClassicNetwork}/VirtualNetworks/vnet1/subnets/subnet1
	SubnetID *string `json:"subnetId,omitempty"`

	// A dictionary of tenant settings
	TenantSettings map[string]*string `json:"tenantSettings,omitempty"`

	// READ-ONLY; The keys of the Redis cache - not set if this object is not the response to Create or Update redis cache
	AccessKeys *AccessKeys `json:"accessKeys,omitempty" azure:"ro"`

	// READ-ONLY; Redis host name.
	HostName *string `json:"hostName,omitempty" azure:"ro"`

	// READ-ONLY; List of the Redis instances associated with the cache
	Instances []*InstanceDetails `json:"instances,omitempty" azure:"ro"`

	// READ-ONLY; List of the linked servers associated with the cache
	LinkedServers []*LinkedServer `json:"linkedServers,omitempty" azure:"ro"`

	// READ-ONLY; Redis non-SSL port.
	Port *int32 `json:"port,omitempty" azure:"ro"`

	// READ-ONLY; List of private endpoint connection associated with the specified redis cache
	PrivateEndpointConnections []*PrivateEndpointConnection `json:"privateEndpointConnections,omitempty" azure:"ro"`

	// READ-ONLY; Redis instance provisioning status.
	ProvisioningState *ProvisioningState `json:"provisioningState,omitempty" azure:"ro"`

	// READ-ONLY; Redis SSL port.
	SSLPort *int32 `json:"sslPort,omitempty" azure:"ro"`
}

// MarshalJSON implements the json.Marshaller interface for type Properties.
func (p Properties) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "accessKeys", p.AccessKeys)
	populate(objectMap, "enableNonSslPort", p.EnableNonSSLPort)
	populate(objectMap, "hostName", p.HostName)
	populate(objectMap, "instances", p.Instances)
	populate(objectMap, "linkedServers", p.LinkedServers)
	populate(objectMap, "minimumTlsVersion", p.MinimumTLSVersion)
	populate(objectMap, "port", p.Port)
	populate(objectMap, "privateEndpointConnections", p.PrivateEndpointConnections)
	populate(objectMap, "provisioningState", p.ProvisioningState)
	populate(objectMap, "publicNetworkAccess", p.PublicNetworkAccess)
	populate(objectMap, "redisConfiguration", p.RedisConfiguration)
	populate(objectMap, "redisVersion", p.RedisVersion)
	populate(objectMap, "replicasPerMaster", p.ReplicasPerMaster)
	populate(objectMap, "replicasPerPrimary", p.ReplicasPerPrimary)
	populate(objectMap, "sku", p.SKU)
	populate(objectMap, "sslPort", p.SSLPort)
	populate(objectMap, "shardCount", p.ShardCount)
	populate(objectMap, "staticIP", p.StaticIP)
	populate(objectMap, "subnetId", p.SubnetID)
	populate(objectMap, "tenantSettings", p.TenantSettings)
	return json.Marshal(objectMap)
}

// ProxyResource - The resource model definition for a Azure Resource Manager proxy resource. It will not have tags and a
// location
type ProxyResource struct {
	// READ-ONLY; Fully qualified resource ID for the resource. Ex - /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}
	ID *string `json:"id,omitempty" azure:"ro"`

	// READ-ONLY; The name of the resource
	Name *string `json:"name,omitempty" azure:"ro"`

	// READ-ONLY; The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or "Microsoft.Storage/storageAccounts"
	Type *string `json:"type,omitempty" azure:"ro"`
}

// RebootParameters - Specifies which Redis node(s) to reboot.
type RebootParameters struct {
	// A list of redis instances to reboot, specified by per-instance SSL ports or non-SSL ports.
	Ports []*int32 `json:"ports,omitempty"`

	// Which Redis node(s) to reboot. Depending on this value data loss is possible.
	RebootType *RebootType `json:"rebootType,omitempty"`

	// If clustering is enabled, the ID of the shard to be rebooted.
	ShardID *int32 `json:"shardId,omitempty"`
}

// MarshalJSON implements the json.Marshaller interface for type RebootParameters.
func (r RebootParameters) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "ports", r.Ports)
	populate(objectMap, "rebootType", r.RebootType)
	populate(objectMap, "shardId", r.ShardID)
	return json.Marshal(objectMap)
}

// RegenerateKeyParameters - Specifies which Redis access keys to reset.
type RegenerateKeyParameters struct {
	// REQUIRED; The Redis access key to regenerate.
	KeyType *RedisKeyType `json:"keyType,omitempty"`
}

// Resource - Common fields that are returned in the response for all Azure Resource Manager resources
type Resource struct {
	// READ-ONLY; Fully qualified resource ID for the resource. Ex - /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}
	ID *string `json:"id,omitempty" azure:"ro"`

	// READ-ONLY; The name of the resource
	Name *string `json:"name,omitempty" azure:"ro"`

	// READ-ONLY; The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or "Microsoft.Storage/storageAccounts"
	Type *string `json:"type,omitempty" azure:"ro"`
}

// ResourceInfo - A single Redis item in List or Get Operation.
type ResourceInfo struct {
	// REQUIRED; The geo-location where the resource lives
	Location *string `json:"location,omitempty"`

	// REQUIRED; Redis cache properties.
	Properties *Properties `json:"properties,omitempty"`

	// The identity of the resource.
	Identity *ManagedServiceIdentity `json:"identity,omitempty"`

	// Resource tags.
	Tags map[string]*string `json:"tags,omitempty"`

	// A list of availability zones denoting where the resource needs to come from.
	Zones []*string `json:"zones,omitempty"`

	// READ-ONLY; Fully qualified resource ID for the resource. Ex - /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}
	ID *string `json:"id,omitempty" azure:"ro"`

	// READ-ONLY; The name of the resource
	Name *string `json:"name,omitempty" azure:"ro"`

	// READ-ONLY; The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or "Microsoft.Storage/storageAccounts"
	Type *string `json:"type,omitempty" azure:"ro"`
}

// MarshalJSON implements the json.Marshaller interface for type ResourceInfo.
func (r ResourceInfo) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "id", r.ID)
	populate(objectMap, "identity", r.Identity)
	populate(objectMap, "location", r.Location)
	populate(objectMap, "name", r.Name)
	populate(objectMap, "properties", r.Properties)
	populate(objectMap, "tags", r.Tags)
	populate(objectMap, "type", r.Type)
	populate(objectMap, "zones", r.Zones)
	return json.Marshal(objectMap)
}

// SKU parameters supplied to the create Redis operation.
type SKU struct {
	// REQUIRED; The size of the Redis cache to deploy. Valid values: for C (Basic/Standard) family (0, 1, 2, 3, 4, 5, 6), for
	// P (Premium) family (1, 2, 3, 4).
	Capacity *int32 `json:"capacity,omitempty"`

	// REQUIRED; The SKU family to use. Valid values: (C, P). (C = Basic/Standard, P = Premium).
	Family *SKUFamily `json:"family,omitempty"`

	// REQUIRED; The type of Redis cache to deploy. Valid values: (Basic, Standard, Premium)
	Name *SKUName `json:"name,omitempty"`
}

// ScheduleEntries - List of patch schedules for a Redis cache.
type ScheduleEntries struct {
	// REQUIRED; List of patch schedules for a Redis cache.
	ScheduleEntries []*ScheduleEntry `json:"scheduleEntries,omitempty"`
}

// MarshalJSON implements the json.Marshaller interface for type ScheduleEntries.
func (s ScheduleEntries) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "scheduleEntries", s.ScheduleEntries)
	return json.Marshal(objectMap)
}

// ScheduleEntry - Patch schedule entry for a Premium Redis Cache.
type ScheduleEntry struct {
	// REQUIRED; Day of the week when a cache can be patched.
	DayOfWeek *DayOfWeek `json:"dayOfWeek,omitempty"`

	// REQUIRED; Start hour after which cache patching can start.
	StartHourUTC *int32 `json:"startHourUtc,omitempty"`

	// ISO8601 timespan specifying how much time cache patching can take.
	MaintenanceWindow *string `json:"maintenanceWindow,omitempty"`
}

// TrackedResource - The resource model definition for an Azure Resource Manager tracked top level resource which has 'tags'
// and a 'location'
type TrackedResource struct {
	// REQUIRED; The geo-location where the resource lives
	Location *string `json:"location,omitempty"`

	// Resource tags.
	Tags map[string]*string `json:"tags,omitempty"`

	// READ-ONLY; Fully qualified resource ID for the resource. Ex - /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}
	ID *string `json:"id,omitempty" azure:"ro"`

	// READ-ONLY; The name of the resource
	Name *string `json:"name,omitempty" azure:"ro"`

	// READ-ONLY; The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or "Microsoft.Storage/storageAccounts"
	Type *string `json:"type,omitempty" azure:"ro"`
}

// MarshalJSON implements the json.Marshaller interface for type TrackedResource.
func (t TrackedResource) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "id", t.ID)
	populate(objectMap, "location", t.Location)
	populate(objectMap, "name", t.Name)
	populate(objectMap, "tags", t.Tags)
	populate(objectMap, "type", t.Type)
	return json.Marshal(objectMap)
}

// UpdateParameters - Parameters supplied to the Update Redis operation.
type UpdateParameters struct {
	// The identity of the resource.
	Identity *ManagedServiceIdentity `json:"identity,omitempty"`

	// Redis cache properties.
	Properties *UpdateProperties `json:"properties,omitempty"`

	// Resource tags.
	Tags map[string]*string `json:"tags,omitempty"`
}

// MarshalJSON implements the json.Marshaller interface for type UpdateParameters.
func (u UpdateParameters) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "identity", u.Identity)
	populate(objectMap, "properties", u.Properties)
	populate(objectMap, "tags", u.Tags)
	return json.Marshal(objectMap)
}

// UpdateProperties - Patchable properties of the redis cache.
type UpdateProperties struct {
	// Specifies whether the non-ssl Redis server port (6379) is enabled.
	EnableNonSSLPort *bool `json:"enableNonSslPort,omitempty"`

	// Optional: requires clients to use a specified TLS version (or higher) to connect (e,g, '1.0', '1.1', '1.2')
	MinimumTLSVersion *TLSVersion `json:"minimumTlsVersion,omitempty"`

	// Whether or not public endpoint access is allowed for this cache. Value is optional but if passed in, must be 'Enabled'
	// or 'Disabled'. If 'Disabled', private endpoints are the exclusive access method.
	// Default value is 'Enabled'
	PublicNetworkAccess *PublicNetworkAccess `json:"publicNetworkAccess,omitempty"`

	// All Redis Settings. Few possible keys:
	// rdb-backup-enabled,rdb-storage-connection-string,rdb-backup-frequency,maxmemory-delta,maxmemory-policy,notify-keyspace-events,maxmemory-samples,slowlog-log-slower-than,slowlog-max-len,list-max-ziplist-entries,list-max-ziplist-value,hash-max-ziplist-entries,hash-max-ziplist-value,set-max-intset-entries,zset-max-ziplist-entries,zset-max-ziplist-value
	// etc.
	RedisConfiguration *CommonPropertiesRedisConfiguration `json:"redisConfiguration,omitempty"`

	// Redis version. Only major version will be used in PUT/PATCH request with current valid values: (4, 6)
	RedisVersion *string `json:"redisVersion,omitempty"`

	// The number of replicas to be created per primary.
	ReplicasPerMaster *int32 `json:"replicasPerMaster,omitempty"`

	// The number of replicas to be created per primary.
	ReplicasPerPrimary *int32 `json:"replicasPerPrimary,omitempty"`

	// The SKU of the Redis cache to deploy.
	SKU *SKU `json:"sku,omitempty"`

	// The number of shards to be created on a Premium Cluster Cache.
	ShardCount *int32 `json:"shardCount,omitempty"`

	// A dictionary of tenant settings
	TenantSettings map[string]*string `json:"tenantSettings,omitempty"`
}

// MarshalJSON implements the json.Marshaller interface for type UpdateProperties.
func (u UpdateProperties) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "enableNonSslPort", u.EnableNonSSLPort)
	populate(objectMap, "minimumTlsVersion", u.MinimumTLSVersion)
	populate(objectMap, "publicNetworkAccess", u.PublicNetworkAccess)
	populate(objectMap, "redisConfiguration", u.RedisConfiguration)
	populate(objectMap, "redisVersion", u.RedisVersion)
	populate(objectMap, "replicasPerMaster", u.ReplicasPerMaster)
	populate(objectMap, "replicasPerPrimary", u.ReplicasPerPrimary)
	populate(objectMap, "sku", u.SKU)
	populate(objectMap, "shardCount", u.ShardCount)
	populate(objectMap, "tenantSettings", u.TenantSettings)
	return json.Marshal(objectMap)
}

// UpgradeNotification - Properties of upgrade notification.
type UpgradeNotification struct {
	// READ-ONLY; Name of upgrade notification.
	Name *string `json:"name,omitempty" azure:"ro"`

	// READ-ONLY; Timestamp when upgrade notification occurred.
	Timestamp *time.Time `json:"timestamp,omitempty" azure:"ro"`

	// READ-ONLY; Details about this upgrade notification
	UpsellNotification map[string]*string `json:"upsellNotification,omitempty" azure:"ro"`
}

// MarshalJSON implements the json.Marshaller interface for type UpgradeNotification.
func (u UpgradeNotification) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "name", u.Name)
	populateTimeRFC3339(objectMap, "timestamp", u.Timestamp)
	populate(objectMap, "upsellNotification", u.UpsellNotification)
	return json.Marshal(objectMap)
}

// UnmarshalJSON implements the json.Unmarshaller interface for type UpgradeNotification.
func (u *UpgradeNotification) UnmarshalJSON(data []byte) error {
	var rawMsg map[string]json.RawMessage
	if err := json.Unmarshal(data, &rawMsg); err != nil {
		return err
	}
	for key, val := range rawMsg {
		var err error
		switch key {
		case "name":
			err = unpopulate(val, &u.Name)
			delete(rawMsg, key)
		case "timestamp":
			err = unpopulateTimeRFC3339(val, &u.Timestamp)
			delete(rawMsg, key)
		case "upsellNotification":
			err = unpopulate(val, &u.UpsellNotification)
			delete(rawMsg, key)
		}
		if err != nil {
			return err
		}
	}
	return nil
}

// UserAssignedIdentity - User assigned identity properties
type UserAssignedIdentity struct {
	// READ-ONLY; The client ID of the assigned identity.
	ClientID *string `json:"clientId,omitempty" azure:"ro"`

	// READ-ONLY; The principal ID of the assigned identity.
	PrincipalID *string `json:"principalId,omitempty" azure:"ro"`
}

func populate(m map[string]interface{}, k string, v interface{}) {
	if v == nil {
		return
	} else if azcore.IsNullValue(v) {
		m[k] = nil
	} else if !reflect.ValueOf(v).IsNil() {
		m[k] = v
	}
}

func unpopulate(data json.RawMessage, v interface{}) error {
	if data == nil {
		return nil
	}
	return json.Unmarshal(data, v)
}
