// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) Go Code Generator. DO NOT EDIT.

package armregulatedenvironmentmanagement

import (
	"context"
	"errors"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/arm"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/policy"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/runtime"
	"net/http"
	"net/url"
	"strings"
)

// LandingZoneConfigurationOperationsClient contains the methods for the LandingZoneConfigurationOperations group.
// Don't use this type directly, use NewLandingZoneConfigurationOperationsClient() instead.
type LandingZoneConfigurationOperationsClient struct {
	internal       *arm.Client
	subscriptionID string
}

// NewLandingZoneConfigurationOperationsClient creates a new instance of LandingZoneConfigurationOperationsClient with the specified values.
//   - subscriptionID - The ID of the target subscription. The value must be an UUID.
//   - credential - used to authorize requests. Usually a credential from azidentity.
//   - options - pass nil to accept the default values.
func NewLandingZoneConfigurationOperationsClient(subscriptionID string, credential azcore.TokenCredential, options *arm.ClientOptions) (*LandingZoneConfigurationOperationsClient, error) {
	cl, err := arm.NewClient(moduleName, moduleVersion, credential, options)
	if err != nil {
		return nil, err
	}
	client := &LandingZoneConfigurationOperationsClient{
		subscriptionID: subscriptionID,
		internal:       cl,
	}
	return client, nil
}

// BeginCreate - Create a landing zone configuration.
// If the operation fails it returns an *azcore.ResponseError type.
//
// Generated from API version 2025-02-27-preview
//   - resourceGroupName - The name of the resource group. The name is case insensitive.
//   - landingZoneAccountName - The landing zone account.
//   - landingZoneConfigurationName - The landing zone configuration name
//   - resource - Resource create parameters.
//   - options - LandingZoneConfigurationOperationsClientBeginCreateOptions contains the optional parameters for the LandingZoneConfigurationOperationsClient.BeginCreate
//     method.
func (client *LandingZoneConfigurationOperationsClient) BeginCreate(ctx context.Context, resourceGroupName string, landingZoneAccountName string, landingZoneConfigurationName string, resource LZConfiguration, options *LandingZoneConfigurationOperationsClientBeginCreateOptions) (*runtime.Poller[LandingZoneConfigurationOperationsClientCreateResponse], error) {
	if options == nil || options.ResumeToken == "" {
		resp, err := client.create(ctx, resourceGroupName, landingZoneAccountName, landingZoneConfigurationName, resource, options)
		if err != nil {
			return nil, err
		}
		poller, err := runtime.NewPoller(resp, client.internal.Pipeline(), &runtime.NewPollerOptions[LandingZoneConfigurationOperationsClientCreateResponse]{
			Tracer: client.internal.Tracer(),
		})
		return poller, err
	} else {
		return runtime.NewPollerFromResumeToken(options.ResumeToken, client.internal.Pipeline(), &runtime.NewPollerFromResumeTokenOptions[LandingZoneConfigurationOperationsClientCreateResponse]{
			Tracer: client.internal.Tracer(),
		})
	}
}

// Create - Create a landing zone configuration.
// If the operation fails it returns an *azcore.ResponseError type.
//
// Generated from API version 2025-02-27-preview
func (client *LandingZoneConfigurationOperationsClient) create(ctx context.Context, resourceGroupName string, landingZoneAccountName string, landingZoneConfigurationName string, resource LZConfiguration, options *LandingZoneConfigurationOperationsClientBeginCreateOptions) (*http.Response, error) {
	var err error
	const operationName = "LandingZoneConfigurationOperationsClient.BeginCreate"
	ctx = context.WithValue(ctx, runtime.CtxAPINameKey{}, operationName)
	ctx, endSpan := runtime.StartSpan(ctx, operationName, client.internal.Tracer(), nil)
	defer func() { endSpan(err) }()
	req, err := client.createCreateRequest(ctx, resourceGroupName, landingZoneAccountName, landingZoneConfigurationName, resource, options)
	if err != nil {
		return nil, err
	}
	httpResp, err := client.internal.Pipeline().Do(req)
	if err != nil {
		return nil, err
	}
	if !runtime.HasStatusCode(httpResp, http.StatusOK, http.StatusCreated) {
		err = runtime.NewResponseError(httpResp)
		return nil, err
	}
	return httpResp, nil
}

// createCreateRequest creates the Create request.
func (client *LandingZoneConfigurationOperationsClient) createCreateRequest(ctx context.Context, resourceGroupName string, landingZoneAccountName string, landingZoneConfigurationName string, resource LZConfiguration, _ *LandingZoneConfigurationOperationsClientBeginCreateOptions) (*policy.Request, error) {
	urlPath := "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Sovereign/landingZoneAccounts/{landingZoneAccountName}/landingZoneConfigurations/{landingZoneConfigurationName}"
	if client.subscriptionID == "" {
		return nil, errors.New("parameter client.subscriptionID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{subscriptionId}", url.PathEscape(client.subscriptionID))
	if resourceGroupName == "" {
		return nil, errors.New("parameter resourceGroupName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{resourceGroupName}", url.PathEscape(resourceGroupName))
	if landingZoneAccountName == "" {
		return nil, errors.New("parameter landingZoneAccountName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{landingZoneAccountName}", url.PathEscape(landingZoneAccountName))
	if landingZoneConfigurationName == "" {
		return nil, errors.New("parameter landingZoneConfigurationName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{landingZoneConfigurationName}", url.PathEscape(landingZoneConfigurationName))
	req, err := runtime.NewRequest(ctx, http.MethodPut, runtime.JoinPaths(client.internal.Endpoint(), urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("api-version", "2025-02-27-preview")
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header["Accept"] = []string{"application/json"}
	req.Raw().Header["Content-Type"] = []string{"application/json"}
	if err := runtime.MarshalAsJSON(req, resource); err != nil {
		return nil, err
	}
	return req, nil
}

// BeginCreateCopy - Create a duplicate of the landing zone configuration.
// If the operation fails it returns an *azcore.ResponseError type.
//
// Generated from API version 2025-02-27-preview
//   - resourceGroupName - The name of the resource group. The name is case insensitive.
//   - landingZoneAccountName - The landing zone account.
//   - landingZoneConfigurationName - The landing zone configuration name
//   - body - The content of the action request
//   - options - LandingZoneConfigurationOperationsClientBeginCreateCopyOptions contains the optional parameters for the LandingZoneConfigurationOperationsClient.BeginCreateCopy
//     method.
func (client *LandingZoneConfigurationOperationsClient) BeginCreateCopy(ctx context.Context, resourceGroupName string, landingZoneAccountName string, landingZoneConfigurationName string, body CreateLZConfigurationCopyRequest, options *LandingZoneConfigurationOperationsClientBeginCreateCopyOptions) (*runtime.Poller[LandingZoneConfigurationOperationsClientCreateCopyResponse], error) {
	if options == nil || options.ResumeToken == "" {
		resp, err := client.createCopy(ctx, resourceGroupName, landingZoneAccountName, landingZoneConfigurationName, body, options)
		if err != nil {
			return nil, err
		}
		poller, err := runtime.NewPoller(resp, client.internal.Pipeline(), &runtime.NewPollerOptions[LandingZoneConfigurationOperationsClientCreateCopyResponse]{
			Tracer: client.internal.Tracer(),
		})
		return poller, err
	} else {
		return runtime.NewPollerFromResumeToken(options.ResumeToken, client.internal.Pipeline(), &runtime.NewPollerFromResumeTokenOptions[LandingZoneConfigurationOperationsClientCreateCopyResponse]{
			Tracer: client.internal.Tracer(),
		})
	}
}

// CreateCopy - Create a duplicate of the landing zone configuration.
// If the operation fails it returns an *azcore.ResponseError type.
//
// Generated from API version 2025-02-27-preview
func (client *LandingZoneConfigurationOperationsClient) createCopy(ctx context.Context, resourceGroupName string, landingZoneAccountName string, landingZoneConfigurationName string, body CreateLZConfigurationCopyRequest, options *LandingZoneConfigurationOperationsClientBeginCreateCopyOptions) (*http.Response, error) {
	var err error
	const operationName = "LandingZoneConfigurationOperationsClient.BeginCreateCopy"
	ctx = context.WithValue(ctx, runtime.CtxAPINameKey{}, operationName)
	ctx, endSpan := runtime.StartSpan(ctx, operationName, client.internal.Tracer(), nil)
	defer func() { endSpan(err) }()
	req, err := client.createCopyCreateRequest(ctx, resourceGroupName, landingZoneAccountName, landingZoneConfigurationName, body, options)
	if err != nil {
		return nil, err
	}
	httpResp, err := client.internal.Pipeline().Do(req)
	if err != nil {
		return nil, err
	}
	if !runtime.HasStatusCode(httpResp, http.StatusOK, http.StatusAccepted) {
		err = runtime.NewResponseError(httpResp)
		return nil, err
	}
	return httpResp, nil
}

// createCopyCreateRequest creates the CreateCopy request.
func (client *LandingZoneConfigurationOperationsClient) createCopyCreateRequest(ctx context.Context, resourceGroupName string, landingZoneAccountName string, landingZoneConfigurationName string, body CreateLZConfigurationCopyRequest, _ *LandingZoneConfigurationOperationsClientBeginCreateCopyOptions) (*policy.Request, error) {
	urlPath := "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Sovereign/landingZoneAccounts/{landingZoneAccountName}/landingZoneConfigurations/{landingZoneConfigurationName}/createCopy"
	if client.subscriptionID == "" {
		return nil, errors.New("parameter client.subscriptionID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{subscriptionId}", url.PathEscape(client.subscriptionID))
	if resourceGroupName == "" {
		return nil, errors.New("parameter resourceGroupName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{resourceGroupName}", url.PathEscape(resourceGroupName))
	if landingZoneAccountName == "" {
		return nil, errors.New("parameter landingZoneAccountName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{landingZoneAccountName}", url.PathEscape(landingZoneAccountName))
	if landingZoneConfigurationName == "" {
		return nil, errors.New("parameter landingZoneConfigurationName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{landingZoneConfigurationName}", url.PathEscape(landingZoneConfigurationName))
	req, err := runtime.NewRequest(ctx, http.MethodPost, runtime.JoinPaths(client.internal.Endpoint(), urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("api-version", "2025-02-27-preview")
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header["Accept"] = []string{"application/json"}
	req.Raw().Header["Content-Type"] = []string{"application/json"}
	if err := runtime.MarshalAsJSON(req, body); err != nil {
		return nil, err
	}
	return req, nil
}

// BeginDelete - Delete a landing zone configuration.
// If the operation fails it returns an *azcore.ResponseError type.
//
// Generated from API version 2025-02-27-preview
//   - resourceGroupName - The name of the resource group. The name is case insensitive.
//   - landingZoneAccountName - The landing zone account.
//   - landingZoneConfigurationName - The landing zone configuration name
//   - options - LandingZoneConfigurationOperationsClientBeginDeleteOptions contains the optional parameters for the LandingZoneConfigurationOperationsClient.BeginDelete
//     method.
func (client *LandingZoneConfigurationOperationsClient) BeginDelete(ctx context.Context, resourceGroupName string, landingZoneAccountName string, landingZoneConfigurationName string, options *LandingZoneConfigurationOperationsClientBeginDeleteOptions) (*runtime.Poller[LandingZoneConfigurationOperationsClientDeleteResponse], error) {
	if options == nil || options.ResumeToken == "" {
		resp, err := client.deleteOperation(ctx, resourceGroupName, landingZoneAccountName, landingZoneConfigurationName, options)
		if err != nil {
			return nil, err
		}
		poller, err := runtime.NewPoller(resp, client.internal.Pipeline(), &runtime.NewPollerOptions[LandingZoneConfigurationOperationsClientDeleteResponse]{
			Tracer: client.internal.Tracer(),
		})
		return poller, err
	} else {
		return runtime.NewPollerFromResumeToken(options.ResumeToken, client.internal.Pipeline(), &runtime.NewPollerFromResumeTokenOptions[LandingZoneConfigurationOperationsClientDeleteResponse]{
			Tracer: client.internal.Tracer(),
		})
	}
}

// Delete - Delete a landing zone configuration.
// If the operation fails it returns an *azcore.ResponseError type.
//
// Generated from API version 2025-02-27-preview
func (client *LandingZoneConfigurationOperationsClient) deleteOperation(ctx context.Context, resourceGroupName string, landingZoneAccountName string, landingZoneConfigurationName string, options *LandingZoneConfigurationOperationsClientBeginDeleteOptions) (*http.Response, error) {
	var err error
	const operationName = "LandingZoneConfigurationOperationsClient.BeginDelete"
	ctx = context.WithValue(ctx, runtime.CtxAPINameKey{}, operationName)
	ctx, endSpan := runtime.StartSpan(ctx, operationName, client.internal.Tracer(), nil)
	defer func() { endSpan(err) }()
	req, err := client.deleteCreateRequest(ctx, resourceGroupName, landingZoneAccountName, landingZoneConfigurationName, options)
	if err != nil {
		return nil, err
	}
	httpResp, err := client.internal.Pipeline().Do(req)
	if err != nil {
		return nil, err
	}
	if !runtime.HasStatusCode(httpResp, http.StatusAccepted, http.StatusNoContent) {
		err = runtime.NewResponseError(httpResp)
		return nil, err
	}
	return httpResp, nil
}

// deleteCreateRequest creates the Delete request.
func (client *LandingZoneConfigurationOperationsClient) deleteCreateRequest(ctx context.Context, resourceGroupName string, landingZoneAccountName string, landingZoneConfigurationName string, _ *LandingZoneConfigurationOperationsClientBeginDeleteOptions) (*policy.Request, error) {
	urlPath := "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Sovereign/landingZoneAccounts/{landingZoneAccountName}/landingZoneConfigurations/{landingZoneConfigurationName}"
	if client.subscriptionID == "" {
		return nil, errors.New("parameter client.subscriptionID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{subscriptionId}", url.PathEscape(client.subscriptionID))
	if resourceGroupName == "" {
		return nil, errors.New("parameter resourceGroupName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{resourceGroupName}", url.PathEscape(resourceGroupName))
	if landingZoneAccountName == "" {
		return nil, errors.New("parameter landingZoneAccountName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{landingZoneAccountName}", url.PathEscape(landingZoneAccountName))
	if landingZoneConfigurationName == "" {
		return nil, errors.New("parameter landingZoneConfigurationName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{landingZoneConfigurationName}", url.PathEscape(landingZoneConfigurationName))
	req, err := runtime.NewRequest(ctx, http.MethodDelete, runtime.JoinPaths(client.internal.Endpoint(), urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("api-version", "2025-02-27-preview")
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header["Accept"] = []string{"application/json"}
	return req, nil
}

// BeginGenerateLandingZone - Generate infrastructure as code (IaC) for a landing zone deployment.
// If the operation fails it returns an *azcore.ResponseError type.
//
// Generated from API version 2025-02-27-preview
//   - resourceGroupName - The name of the resource group. The name is case insensitive.
//   - landingZoneAccountName - The landing zone account.
//   - landingZoneConfigurationName - The landing zone configuration name
//   - body - The content of the action request
//   - options - LandingZoneConfigurationOperationsClientBeginGenerateLandingZoneOptions contains the optional parameters for
//     the LandingZoneConfigurationOperationsClient.BeginGenerateLandingZone method.
func (client *LandingZoneConfigurationOperationsClient) BeginGenerateLandingZone(ctx context.Context, resourceGroupName string, landingZoneAccountName string, landingZoneConfigurationName string, body GenerateLandingZoneRequest, options *LandingZoneConfigurationOperationsClientBeginGenerateLandingZoneOptions) (*runtime.Poller[LandingZoneConfigurationOperationsClientGenerateLandingZoneResponse], error) {
	if options == nil || options.ResumeToken == "" {
		resp, err := client.generateLandingZone(ctx, resourceGroupName, landingZoneAccountName, landingZoneConfigurationName, body, options)
		if err != nil {
			return nil, err
		}
		poller, err := runtime.NewPoller(resp, client.internal.Pipeline(), &runtime.NewPollerOptions[LandingZoneConfigurationOperationsClientGenerateLandingZoneResponse]{
			Tracer: client.internal.Tracer(),
		})
		return poller, err
	} else {
		return runtime.NewPollerFromResumeToken(options.ResumeToken, client.internal.Pipeline(), &runtime.NewPollerFromResumeTokenOptions[LandingZoneConfigurationOperationsClientGenerateLandingZoneResponse]{
			Tracer: client.internal.Tracer(),
		})
	}
}

// GenerateLandingZone - Generate infrastructure as code (IaC) for a landing zone deployment.
// If the operation fails it returns an *azcore.ResponseError type.
//
// Generated from API version 2025-02-27-preview
func (client *LandingZoneConfigurationOperationsClient) generateLandingZone(ctx context.Context, resourceGroupName string, landingZoneAccountName string, landingZoneConfigurationName string, body GenerateLandingZoneRequest, options *LandingZoneConfigurationOperationsClientBeginGenerateLandingZoneOptions) (*http.Response, error) {
	var err error
	const operationName = "LandingZoneConfigurationOperationsClient.BeginGenerateLandingZone"
	ctx = context.WithValue(ctx, runtime.CtxAPINameKey{}, operationName)
	ctx, endSpan := runtime.StartSpan(ctx, operationName, client.internal.Tracer(), nil)
	defer func() { endSpan(err) }()
	req, err := client.generateLandingZoneCreateRequest(ctx, resourceGroupName, landingZoneAccountName, landingZoneConfigurationName, body, options)
	if err != nil {
		return nil, err
	}
	httpResp, err := client.internal.Pipeline().Do(req)
	if err != nil {
		return nil, err
	}
	if !runtime.HasStatusCode(httpResp, http.StatusOK, http.StatusAccepted) {
		err = runtime.NewResponseError(httpResp)
		return nil, err
	}
	return httpResp, nil
}

// generateLandingZoneCreateRequest creates the GenerateLandingZone request.
func (client *LandingZoneConfigurationOperationsClient) generateLandingZoneCreateRequest(ctx context.Context, resourceGroupName string, landingZoneAccountName string, landingZoneConfigurationName string, body GenerateLandingZoneRequest, _ *LandingZoneConfigurationOperationsClientBeginGenerateLandingZoneOptions) (*policy.Request, error) {
	urlPath := "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Sovereign/landingZoneAccounts/{landingZoneAccountName}/landingZoneConfigurations/{landingZoneConfigurationName}/generateLandingZone"
	if client.subscriptionID == "" {
		return nil, errors.New("parameter client.subscriptionID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{subscriptionId}", url.PathEscape(client.subscriptionID))
	if resourceGroupName == "" {
		return nil, errors.New("parameter resourceGroupName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{resourceGroupName}", url.PathEscape(resourceGroupName))
	if landingZoneAccountName == "" {
		return nil, errors.New("parameter landingZoneAccountName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{landingZoneAccountName}", url.PathEscape(landingZoneAccountName))
	if landingZoneConfigurationName == "" {
		return nil, errors.New("parameter landingZoneConfigurationName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{landingZoneConfigurationName}", url.PathEscape(landingZoneConfigurationName))
	req, err := runtime.NewRequest(ctx, http.MethodPost, runtime.JoinPaths(client.internal.Endpoint(), urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("api-version", "2025-02-27-preview")
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header["Accept"] = []string{"application/json"}
	req.Raw().Header["Content-Type"] = []string{"application/json"}
	if err := runtime.MarshalAsJSON(req, body); err != nil {
		return nil, err
	}
	return req, nil
}

// Get - Get a landing zone configuration.
// If the operation fails it returns an *azcore.ResponseError type.
//
// Generated from API version 2025-02-27-preview
//   - resourceGroupName - The name of the resource group. The name is case insensitive.
//   - landingZoneAccountName - The landing zone account.
//   - landingZoneConfigurationName - The landing zone configuration name
//   - options - LandingZoneConfigurationOperationsClientGetOptions contains the optional parameters for the LandingZoneConfigurationOperationsClient.Get
//     method.
func (client *LandingZoneConfigurationOperationsClient) Get(ctx context.Context, resourceGroupName string, landingZoneAccountName string, landingZoneConfigurationName string, options *LandingZoneConfigurationOperationsClientGetOptions) (LandingZoneConfigurationOperationsClientGetResponse, error) {
	var err error
	const operationName = "LandingZoneConfigurationOperationsClient.Get"
	ctx = context.WithValue(ctx, runtime.CtxAPINameKey{}, operationName)
	ctx, endSpan := runtime.StartSpan(ctx, operationName, client.internal.Tracer(), nil)
	defer func() { endSpan(err) }()
	req, err := client.getCreateRequest(ctx, resourceGroupName, landingZoneAccountName, landingZoneConfigurationName, options)
	if err != nil {
		return LandingZoneConfigurationOperationsClientGetResponse{}, err
	}
	httpResp, err := client.internal.Pipeline().Do(req)
	if err != nil {
		return LandingZoneConfigurationOperationsClientGetResponse{}, err
	}
	if !runtime.HasStatusCode(httpResp, http.StatusOK) {
		err = runtime.NewResponseError(httpResp)
		return LandingZoneConfigurationOperationsClientGetResponse{}, err
	}
	resp, err := client.getHandleResponse(httpResp)
	return resp, err
}

// getCreateRequest creates the Get request.
func (client *LandingZoneConfigurationOperationsClient) getCreateRequest(ctx context.Context, resourceGroupName string, landingZoneAccountName string, landingZoneConfigurationName string, _ *LandingZoneConfigurationOperationsClientGetOptions) (*policy.Request, error) {
	urlPath := "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Sovereign/landingZoneAccounts/{landingZoneAccountName}/landingZoneConfigurations/{landingZoneConfigurationName}"
	if client.subscriptionID == "" {
		return nil, errors.New("parameter client.subscriptionID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{subscriptionId}", url.PathEscape(client.subscriptionID))
	if resourceGroupName == "" {
		return nil, errors.New("parameter resourceGroupName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{resourceGroupName}", url.PathEscape(resourceGroupName))
	if landingZoneAccountName == "" {
		return nil, errors.New("parameter landingZoneAccountName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{landingZoneAccountName}", url.PathEscape(landingZoneAccountName))
	if landingZoneConfigurationName == "" {
		return nil, errors.New("parameter landingZoneConfigurationName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{landingZoneConfigurationName}", url.PathEscape(landingZoneConfigurationName))
	req, err := runtime.NewRequest(ctx, http.MethodGet, runtime.JoinPaths(client.internal.Endpoint(), urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("api-version", "2025-02-27-preview")
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header["Accept"] = []string{"application/json"}
	return req, nil
}

// getHandleResponse handles the Get response.
func (client *LandingZoneConfigurationOperationsClient) getHandleResponse(resp *http.Response) (LandingZoneConfigurationOperationsClientGetResponse, error) {
	result := LandingZoneConfigurationOperationsClientGetResponse{}
	if err := runtime.UnmarshalAsJSON(resp, &result.LZConfiguration); err != nil {
		return LandingZoneConfigurationOperationsClientGetResponse{}, err
	}
	return result, nil
}

// NewListByResourceGroupPager - List the landing zone configurations within a resource group.
//
// Generated from API version 2025-02-27-preview
//   - resourceGroupName - The name of the resource group. The name is case insensitive.
//   - landingZoneAccountName - The landing zone account.
//   - options - LandingZoneConfigurationOperationsClientListByResourceGroupOptions contains the optional parameters for the LandingZoneConfigurationOperationsClient.NewListByResourceGroupPager
//     method.
func (client *LandingZoneConfigurationOperationsClient) NewListByResourceGroupPager(resourceGroupName string, landingZoneAccountName string, options *LandingZoneConfigurationOperationsClientListByResourceGroupOptions) *runtime.Pager[LandingZoneConfigurationOperationsClientListByResourceGroupResponse] {
	return runtime.NewPager(runtime.PagingHandler[LandingZoneConfigurationOperationsClientListByResourceGroupResponse]{
		More: func(page LandingZoneConfigurationOperationsClientListByResourceGroupResponse) bool {
			return page.NextLink != nil && len(*page.NextLink) > 0
		},
		Fetcher: func(ctx context.Context, page *LandingZoneConfigurationOperationsClientListByResourceGroupResponse) (LandingZoneConfigurationOperationsClientListByResourceGroupResponse, error) {
			ctx = context.WithValue(ctx, runtime.CtxAPINameKey{}, "LandingZoneConfigurationOperationsClient.NewListByResourceGroupPager")
			nextLink := ""
			if page != nil {
				nextLink = *page.NextLink
			}
			resp, err := runtime.FetcherForNextLink(ctx, client.internal.Pipeline(), nextLink, func(ctx context.Context) (*policy.Request, error) {
				return client.listByResourceGroupCreateRequest(ctx, resourceGroupName, landingZoneAccountName, options)
			}, nil)
			if err != nil {
				return LandingZoneConfigurationOperationsClientListByResourceGroupResponse{}, err
			}
			return client.listByResourceGroupHandleResponse(resp)
		},
		Tracer: client.internal.Tracer(),
	})
}

// listByResourceGroupCreateRequest creates the ListByResourceGroup request.
func (client *LandingZoneConfigurationOperationsClient) listByResourceGroupCreateRequest(ctx context.Context, resourceGroupName string, landingZoneAccountName string, _ *LandingZoneConfigurationOperationsClientListByResourceGroupOptions) (*policy.Request, error) {
	urlPath := "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Sovereign/landingZoneAccounts/{landingZoneAccountName}/landingZoneConfigurations"
	if client.subscriptionID == "" {
		return nil, errors.New("parameter client.subscriptionID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{subscriptionId}", url.PathEscape(client.subscriptionID))
	if resourceGroupName == "" {
		return nil, errors.New("parameter resourceGroupName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{resourceGroupName}", url.PathEscape(resourceGroupName))
	if landingZoneAccountName == "" {
		return nil, errors.New("parameter landingZoneAccountName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{landingZoneAccountName}", url.PathEscape(landingZoneAccountName))
	req, err := runtime.NewRequest(ctx, http.MethodGet, runtime.JoinPaths(client.internal.Endpoint(), urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("api-version", "2025-02-27-preview")
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header["Accept"] = []string{"application/json"}
	return req, nil
}

// listByResourceGroupHandleResponse handles the ListByResourceGroup response.
func (client *LandingZoneConfigurationOperationsClient) listByResourceGroupHandleResponse(resp *http.Response) (LandingZoneConfigurationOperationsClientListByResourceGroupResponse, error) {
	result := LandingZoneConfigurationOperationsClientListByResourceGroupResponse{}
	if err := runtime.UnmarshalAsJSON(resp, &result.LandingZoneConfigurationResourceListResult); err != nil {
		return LandingZoneConfigurationOperationsClientListByResourceGroupResponse{}, err
	}
	return result, nil
}

// NewListBySubscriptionPager - List the landing zone configurations within a subscription.
//
// Generated from API version 2025-02-27-preview
//   - landingZoneAccountName - The landing zone account.
//   - options - LandingZoneConfigurationOperationsClientListBySubscriptionOptions contains the optional parameters for the LandingZoneConfigurationOperationsClient.NewListBySubscriptionPager
//     method.
func (client *LandingZoneConfigurationOperationsClient) NewListBySubscriptionPager(landingZoneAccountName string, options *LandingZoneConfigurationOperationsClientListBySubscriptionOptions) *runtime.Pager[LandingZoneConfigurationOperationsClientListBySubscriptionResponse] {
	return runtime.NewPager(runtime.PagingHandler[LandingZoneConfigurationOperationsClientListBySubscriptionResponse]{
		More: func(page LandingZoneConfigurationOperationsClientListBySubscriptionResponse) bool {
			return page.NextLink != nil && len(*page.NextLink) > 0
		},
		Fetcher: func(ctx context.Context, page *LandingZoneConfigurationOperationsClientListBySubscriptionResponse) (LandingZoneConfigurationOperationsClientListBySubscriptionResponse, error) {
			ctx = context.WithValue(ctx, runtime.CtxAPINameKey{}, "LandingZoneConfigurationOperationsClient.NewListBySubscriptionPager")
			nextLink := ""
			if page != nil {
				nextLink = *page.NextLink
			}
			resp, err := runtime.FetcherForNextLink(ctx, client.internal.Pipeline(), nextLink, func(ctx context.Context) (*policy.Request, error) {
				return client.listBySubscriptionCreateRequest(ctx, landingZoneAccountName, options)
			}, nil)
			if err != nil {
				return LandingZoneConfigurationOperationsClientListBySubscriptionResponse{}, err
			}
			return client.listBySubscriptionHandleResponse(resp)
		},
		Tracer: client.internal.Tracer(),
	})
}

// listBySubscriptionCreateRequest creates the ListBySubscription request.
func (client *LandingZoneConfigurationOperationsClient) listBySubscriptionCreateRequest(ctx context.Context, landingZoneAccountName string, _ *LandingZoneConfigurationOperationsClientListBySubscriptionOptions) (*policy.Request, error) {
	urlPath := "/subscriptions/{subscriptionId}/providers/Microsoft.Sovereign/landingZoneAccounts/{landingZoneAccountName}/landingZoneConfigurations"
	if client.subscriptionID == "" {
		return nil, errors.New("parameter client.subscriptionID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{subscriptionId}", url.PathEscape(client.subscriptionID))
	if landingZoneAccountName == "" {
		return nil, errors.New("parameter landingZoneAccountName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{landingZoneAccountName}", url.PathEscape(landingZoneAccountName))
	req, err := runtime.NewRequest(ctx, http.MethodGet, runtime.JoinPaths(client.internal.Endpoint(), urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("api-version", "2025-02-27-preview")
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header["Accept"] = []string{"application/json"}
	return req, nil
}

// listBySubscriptionHandleResponse handles the ListBySubscription response.
func (client *LandingZoneConfigurationOperationsClient) listBySubscriptionHandleResponse(resp *http.Response) (LandingZoneConfigurationOperationsClientListBySubscriptionResponse, error) {
	result := LandingZoneConfigurationOperationsClientListBySubscriptionResponse{}
	if err := runtime.UnmarshalAsJSON(resp, &result.LandingZoneConfigurationResourceListResult); err != nil {
		return LandingZoneConfigurationOperationsClientListBySubscriptionResponse{}, err
	}
	return result, nil
}

// BeginUpdate - Update a landing zone configuration.
// If the operation fails it returns an *azcore.ResponseError type.
//
// Generated from API version 2025-02-27-preview
//   - resourceGroupName - The name of the resource group. The name is case insensitive.
//   - landingZoneAccountName - The landing zone account.
//   - landingZoneConfigurationName - The landing zone configuration name
//   - properties - The resource properties to be updated.
//   - options - LandingZoneConfigurationOperationsClientBeginUpdateOptions contains the optional parameters for the LandingZoneConfigurationOperationsClient.BeginUpdate
//     method.
func (client *LandingZoneConfigurationOperationsClient) BeginUpdate(ctx context.Context, resourceGroupName string, landingZoneAccountName string, landingZoneConfigurationName string, properties LZConfiguration, options *LandingZoneConfigurationOperationsClientBeginUpdateOptions) (*runtime.Poller[LandingZoneConfigurationOperationsClientUpdateResponse], error) {
	if options == nil || options.ResumeToken == "" {
		resp, err := client.update(ctx, resourceGroupName, landingZoneAccountName, landingZoneConfigurationName, properties, options)
		if err != nil {
			return nil, err
		}
		poller, err := runtime.NewPoller(resp, client.internal.Pipeline(), &runtime.NewPollerOptions[LandingZoneConfigurationOperationsClientUpdateResponse]{
			Tracer: client.internal.Tracer(),
		})
		return poller, err
	} else {
		return runtime.NewPollerFromResumeToken(options.ResumeToken, client.internal.Pipeline(), &runtime.NewPollerFromResumeTokenOptions[LandingZoneConfigurationOperationsClientUpdateResponse]{
			Tracer: client.internal.Tracer(),
		})
	}
}

// Update - Update a landing zone configuration.
// If the operation fails it returns an *azcore.ResponseError type.
//
// Generated from API version 2025-02-27-preview
func (client *LandingZoneConfigurationOperationsClient) update(ctx context.Context, resourceGroupName string, landingZoneAccountName string, landingZoneConfigurationName string, properties LZConfiguration, options *LandingZoneConfigurationOperationsClientBeginUpdateOptions) (*http.Response, error) {
	var err error
	const operationName = "LandingZoneConfigurationOperationsClient.BeginUpdate"
	ctx = context.WithValue(ctx, runtime.CtxAPINameKey{}, operationName)
	ctx, endSpan := runtime.StartSpan(ctx, operationName, client.internal.Tracer(), nil)
	defer func() { endSpan(err) }()
	req, err := client.updateCreateRequest(ctx, resourceGroupName, landingZoneAccountName, landingZoneConfigurationName, properties, options)
	if err != nil {
		return nil, err
	}
	httpResp, err := client.internal.Pipeline().Do(req)
	if err != nil {
		return nil, err
	}
	if !runtime.HasStatusCode(httpResp, http.StatusOK, http.StatusAccepted) {
		err = runtime.NewResponseError(httpResp)
		return nil, err
	}
	return httpResp, nil
}

// updateCreateRequest creates the Update request.
func (client *LandingZoneConfigurationOperationsClient) updateCreateRequest(ctx context.Context, resourceGroupName string, landingZoneAccountName string, landingZoneConfigurationName string, properties LZConfiguration, _ *LandingZoneConfigurationOperationsClientBeginUpdateOptions) (*policy.Request, error) {
	urlPath := "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Sovereign/landingZoneAccounts/{landingZoneAccountName}/landingZoneConfigurations/{landingZoneConfigurationName}"
	if client.subscriptionID == "" {
		return nil, errors.New("parameter client.subscriptionID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{subscriptionId}", url.PathEscape(client.subscriptionID))
	if resourceGroupName == "" {
		return nil, errors.New("parameter resourceGroupName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{resourceGroupName}", url.PathEscape(resourceGroupName))
	if landingZoneAccountName == "" {
		return nil, errors.New("parameter landingZoneAccountName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{landingZoneAccountName}", url.PathEscape(landingZoneAccountName))
	if landingZoneConfigurationName == "" {
		return nil, errors.New("parameter landingZoneConfigurationName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{landingZoneConfigurationName}", url.PathEscape(landingZoneConfigurationName))
	req, err := runtime.NewRequest(ctx, http.MethodPatch, runtime.JoinPaths(client.internal.Endpoint(), urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("api-version", "2025-02-27-preview")
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header["Accept"] = []string{"application/json"}
	req.Raw().Header["Content-Type"] = []string{"application/json"}
	if err := runtime.MarshalAsJSON(req, properties); err != nil {
		return nil, err
	}
	return req, nil
}

// BeginUpdateAuthoringStatus - Update the authoring status on a landing zone configuration.
// If the operation fails it returns an *azcore.ResponseError type.
//
// Generated from API version 2025-02-27-preview
//   - resourceGroupName - The name of the resource group. The name is case insensitive.
//   - landingZoneAccountName - The landing zone account.
//   - landingZoneConfigurationName - The landing zone configuration name
//   - body - The content of the action request
//   - options - LandingZoneConfigurationOperationsClientBeginUpdateAuthoringStatusOptions contains the optional parameters for
//     the LandingZoneConfigurationOperationsClient.BeginUpdateAuthoringStatus method.
func (client *LandingZoneConfigurationOperationsClient) BeginUpdateAuthoringStatus(ctx context.Context, resourceGroupName string, landingZoneAccountName string, landingZoneConfigurationName string, body UpdateAuthoringStatusRequest, options *LandingZoneConfigurationOperationsClientBeginUpdateAuthoringStatusOptions) (*runtime.Poller[LandingZoneConfigurationOperationsClientUpdateAuthoringStatusResponse], error) {
	if options == nil || options.ResumeToken == "" {
		resp, err := client.updateAuthoringStatus(ctx, resourceGroupName, landingZoneAccountName, landingZoneConfigurationName, body, options)
		if err != nil {
			return nil, err
		}
		poller, err := runtime.NewPoller(resp, client.internal.Pipeline(), &runtime.NewPollerOptions[LandingZoneConfigurationOperationsClientUpdateAuthoringStatusResponse]{
			Tracer: client.internal.Tracer(),
		})
		return poller, err
	} else {
		return runtime.NewPollerFromResumeToken(options.ResumeToken, client.internal.Pipeline(), &runtime.NewPollerFromResumeTokenOptions[LandingZoneConfigurationOperationsClientUpdateAuthoringStatusResponse]{
			Tracer: client.internal.Tracer(),
		})
	}
}

// UpdateAuthoringStatus - Update the authoring status on a landing zone configuration.
// If the operation fails it returns an *azcore.ResponseError type.
//
// Generated from API version 2025-02-27-preview
func (client *LandingZoneConfigurationOperationsClient) updateAuthoringStatus(ctx context.Context, resourceGroupName string, landingZoneAccountName string, landingZoneConfigurationName string, body UpdateAuthoringStatusRequest, options *LandingZoneConfigurationOperationsClientBeginUpdateAuthoringStatusOptions) (*http.Response, error) {
	var err error
	const operationName = "LandingZoneConfigurationOperationsClient.BeginUpdateAuthoringStatus"
	ctx = context.WithValue(ctx, runtime.CtxAPINameKey{}, operationName)
	ctx, endSpan := runtime.StartSpan(ctx, operationName, client.internal.Tracer(), nil)
	defer func() { endSpan(err) }()
	req, err := client.updateAuthoringStatusCreateRequest(ctx, resourceGroupName, landingZoneAccountName, landingZoneConfigurationName, body, options)
	if err != nil {
		return nil, err
	}
	httpResp, err := client.internal.Pipeline().Do(req)
	if err != nil {
		return nil, err
	}
	if !runtime.HasStatusCode(httpResp, http.StatusOK, http.StatusAccepted) {
		err = runtime.NewResponseError(httpResp)
		return nil, err
	}
	return httpResp, nil
}

// updateAuthoringStatusCreateRequest creates the UpdateAuthoringStatus request.
func (client *LandingZoneConfigurationOperationsClient) updateAuthoringStatusCreateRequest(ctx context.Context, resourceGroupName string, landingZoneAccountName string, landingZoneConfigurationName string, body UpdateAuthoringStatusRequest, _ *LandingZoneConfigurationOperationsClientBeginUpdateAuthoringStatusOptions) (*policy.Request, error) {
	urlPath := "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Sovereign/landingZoneAccounts/{landingZoneAccountName}/landingZoneConfigurations/{landingZoneConfigurationName}/updateAuthoringStatus"
	if client.subscriptionID == "" {
		return nil, errors.New("parameter client.subscriptionID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{subscriptionId}", url.PathEscape(client.subscriptionID))
	if resourceGroupName == "" {
		return nil, errors.New("parameter resourceGroupName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{resourceGroupName}", url.PathEscape(resourceGroupName))
	if landingZoneAccountName == "" {
		return nil, errors.New("parameter landingZoneAccountName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{landingZoneAccountName}", url.PathEscape(landingZoneAccountName))
	if landingZoneConfigurationName == "" {
		return nil, errors.New("parameter landingZoneConfigurationName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{landingZoneConfigurationName}", url.PathEscape(landingZoneConfigurationName))
	req, err := runtime.NewRequest(ctx, http.MethodPost, runtime.JoinPaths(client.internal.Endpoint(), urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("api-version", "2025-02-27-preview")
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header["Accept"] = []string{"application/json"}
	req.Raw().Header["Content-Type"] = []string{"application/json"}
	if err := runtime.MarshalAsJSON(req, body); err != nil {
		return nil, err
	}
	return req, nil
}
