// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) Go Code Generator. DO NOT EDIT.

package armregulatedenvironmentmanagement_test

import (
	"context"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/to"
	"github.com/Azure/azure-sdk-for-go/sdk/azidentity"
	"github.com/Azure/azure-sdk-for-go/sdk/resourcemanager/regulatedenvironmentmanagement/armregulatedenvironmentmanagement"
	"log"
)

// Generated from example definition: 2025-02-27-preview/LandingZoneConfigurationOperations_Create.json
func ExampleLandingZoneConfigurationOperationsClient_BeginCreate() {
	cred, err := azidentity.NewDefaultAzureCredential(nil)
	if err != nil {
		log.Fatalf("failed to obtain a credential: %v", err)
	}
	ctx := context.Background()
	clientFactory, err := armregulatedenvironmentmanagement.NewClientFactory("00000000-0000-0000-0000-000000000001", cred, nil)
	if err != nil {
		log.Fatalf("failed to create client: %v", err)
	}
	poller, err := clientFactory.NewLandingZoneConfigurationOperationsClient().BeginCreate(ctx, "rg-examplegroup", "ExampleLZA", "ExampleLZC", armregulatedenvironmentmanagement.LandingZoneConfigurationResource{
		Properties: &armregulatedenvironmentmanagement.LandingZoneConfigurationResourceProperties{
			DdosProtectionCreationOption:        to.Ptr(armregulatedenvironmentmanagement.ResourceCreationOptionsUseExisting),
			ExistingDdosProtectionID:            to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000001/resourceGroups/rg-examplegroup/providers/Microsoft.Network/ddosProtectionPlans/ddos-example"),
			LogAnalyticsWorkspaceCreationOption: to.Ptr(armregulatedenvironmentmanagement.ResourceCreationOptionsUseExisting),
			ExistingLogAnalyticsWorkspaceID:     to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000001/resourceGroups/rg-examplegroup/providers/Microsoft.OperationalInsights/workspaces/log-example"),
			Tags: []*armregulatedenvironmentmanagement.Tags{
				{
					Name:  to.Ptr("tag1"),
					Value: to.Ptr("Lorem"),
				},
				{
					Name:  to.Ptr("tag2"),
					Value: to.Ptr("Ipsum"),
				},
			},
			FirewallCreationOption:     to.Ptr(armregulatedenvironmentmanagement.FirewallCreationOptionsPremium),
			FirewallSubnetCidrBlock:    to.Ptr("10.20.254.0/24"),
			GatewaySubnetCidrBlock:     to.Ptr("10.20.252.0/24"),
			LogRetentionInDays:         to.Ptr[int64](540),
			HubNetworkCidrBlock:        to.Ptr("10.20.0.0/16"),
			AzureBastionCreationOption: to.Ptr(armregulatedenvironmentmanagement.ResourceCreationOptionsUseExisting),
			ExistingAzureBastionID:     to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000001/resourceGroups/rg-examplegroup/providers/Microsoft.Network/bastionHosts/bas-example"),
			LandingZonesMgChildren: []*armregulatedenvironmentmanagement.LandingZoneManagementGroupProperties{
				{
					PolicyInitiativesAssignmentProperties: []*armregulatedenvironmentmanagement.PolicyInitiativeAssignmentProperties{},
					Name:                                  to.Ptr("Corp"),
				},
				{
					PolicyInitiativesAssignmentProperties: []*armregulatedenvironmentmanagement.PolicyInitiativeAssignmentProperties{},
					Name:                                  to.Ptr("Online"),
				},
				{
					PolicyInitiativesAssignmentProperties: []*armregulatedenvironmentmanagement.PolicyInitiativeAssignmentProperties{
						{
							PolicyInitiativeID:   to.Ptr("/providers/Microsoft.Authorization/policySetDefinitions/03de05a4-c324-4ccd-882f-a814ea8ab9ea"),
							AssignmentParameters: map[string]any{},
						},
					},
					Name: to.Ptr("Confidential Corp"),
				},
				{
					PolicyInitiativesAssignmentProperties: []*armregulatedenvironmentmanagement.PolicyInitiativeAssignmentProperties{
						{
							PolicyInitiativeID:   to.Ptr("/providers/Microsoft.Authorization/policySetDefinitions/03de05a4-c324-4ccd-882f-a814ea8ab9ea"),
							AssignmentParameters: map[string]any{},
						},
					},
					Name: to.Ptr("Confidential Online"),
				},
			},
			TopLevelMgMetadata: &armregulatedenvironmentmanagement.ManagementGroupProperties{
				PolicyInitiativesAssignmentProperties: []*armregulatedenvironmentmanagement.PolicyInitiativeAssignmentProperties{
					{
						PolicyInitiativeID: to.Ptr("/providers/Microsoft.Authorization/policySetDefinitions/c1cbff38-87c0-4b9f-9f70-035c7a3b5523"),
						AssignmentParameters: map[string]any{
							"listOfAllowedLocations": {
								"swedencentral",
								"eastus2",
								"uksouth",
							},
						},
					},
				},
			},
			LandingZonesMgMetadata: &armregulatedenvironmentmanagement.ManagementGroupProperties{
				PolicyInitiativesAssignmentProperties: []*armregulatedenvironmentmanagement.PolicyInitiativeAssignmentProperties{
					{
						PolicyInitiativeID: to.Ptr("/providers/Microsoft.Authorization/policySetDefinitions/c1cbff38-87c0-4b9f-9f70-035c7a3b5523"),
						AssignmentParameters: map[string]any{
							"listOfAllowedLocations": {
								"swedencentral",
							},
						},
					},
				},
			},
			PlatformMgMetadata: &armregulatedenvironmentmanagement.ManagementGroupProperties{
				PolicyInitiativesAssignmentProperties: []*armregulatedenvironmentmanagement.PolicyInitiativeAssignmentProperties{
					{
						PolicyInitiativeID: to.Ptr("/providers/Microsoft.Authorization/policySetDefinitions/c1cbff38-87c0-4b9f-9f70-035c7a3b5523"),
						AssignmentParameters: map[string]any{
							"listOfAllowedLocations": {
								"swedencentral",
							},
						},
					},
				},
			},
			PlatformManagementMgMetadata: &armregulatedenvironmentmanagement.ManagementGroupProperties{
				PolicyInitiativesAssignmentProperties: []*armregulatedenvironmentmanagement.PolicyInitiativeAssignmentProperties{
					{
						PolicyInitiativeID: to.Ptr("/providers/Microsoft.Authorization/policySetDefinitions/c1cbff38-87c0-4b9f-9f70-035c7a3b5523"),
						AssignmentParameters: map[string]any{
							"listOfAllowedLocations": {
								"swedencentral",
							},
						},
					},
				},
			},
			PlatformConnectivityMgMetadata: &armregulatedenvironmentmanagement.ManagementGroupProperties{
				PolicyInitiativesAssignmentProperties: []*armregulatedenvironmentmanagement.PolicyInitiativeAssignmentProperties{
					{
						PolicyInitiativeID: to.Ptr("/providers/Microsoft.Authorization/policySetDefinitions/c1cbff38-87c0-4b9f-9f70-035c7a3b5523"),
						AssignmentParameters: map[string]any{
							"listOfAllowedLocations": {
								"swedencentral",
							},
						},
					},
				},
			},
			PlatformIdentityMgMetadata: &armregulatedenvironmentmanagement.ManagementGroupProperties{
				PolicyInitiativesAssignmentProperties: []*armregulatedenvironmentmanagement.PolicyInitiativeAssignmentProperties{
					{
						PolicyInitiativeID: to.Ptr("/providers/Microsoft.Authorization/policySetDefinitions/c1cbff38-87c0-4b9f-9f70-035c7a3b5523"),
						AssignmentParameters: map[string]any{
							"listOfAllowedLocations": {
								"swedencentral",
							},
						},
					},
				},
			},
			DecommissionedMgMetadata: &armregulatedenvironmentmanagement.DecommissionedManagementGroupProperties{
				PolicyInitiativesAssignmentProperties: []*armregulatedenvironmentmanagement.PolicyInitiativeAssignmentProperties{
					{
						PolicyInitiativeID: to.Ptr("/providers/Microsoft.Authorization/policySetDefinitions/c1cbff38-87c0-4b9f-9f70-035c7a3b5523"),
						AssignmentParameters: map[string]any{
							"listOfAllowedLocations": {
								"swedencentral",
							},
						},
					},
				},
				Create: to.Ptr(true),
			},
			SandboxMgMetadata: &armregulatedenvironmentmanagement.SandboxManagementGroupProperties{
				PolicyInitiativesAssignmentProperties: []*armregulatedenvironmentmanagement.PolicyInitiativeAssignmentProperties{
					{
						PolicyInitiativeID: to.Ptr("/providers/Microsoft.Authorization/policySetDefinitions/c1cbff38-87c0-4b9f-9f70-035c7a3b5523"),
						AssignmentParameters: map[string]any{
							"listOfAllowedLocations": {
								"swedencentral",
							},
						},
					},
				},
				Create: to.Ptr(true),
			},
			ManagedIdentity: &armregulatedenvironmentmanagement.ManagedIdentityProperties{
				Type:                           to.Ptr(armregulatedenvironmentmanagement.ManagedIdentityResourceTypeUserAssigned),
				UserAssignedIdentityResourceID: to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000001/resourceGroups/rg-examplegroup/providers/Microsoft.ManagedIdentity/userAssignedIdentities/mi-example"),
			},
			PlatformMgChildren: []*armregulatedenvironmentmanagement.PlatformManagementGroupProperties{
				{
					PolicyInitiativesAssignmentProperties: []*armregulatedenvironmentmanagement.PolicyInitiativeAssignmentProperties{
						{
							PolicyInitiativeID: to.Ptr("/providers/Microsoft.Authorization/policySetDefinitions/c1cbff38-87c0-4b9f-9f70-035c7a3b5523"),
							AssignmentParameters: map[string]any{
								"listOfAllowedLocations": {
									"swedencentral",
								},
							},
						},
					},
					Name: to.Ptr("Telemetry"),
				},
				{
					PolicyInitiativesAssignmentProperties: []*armregulatedenvironmentmanagement.PolicyInitiativeAssignmentProperties{
						{
							PolicyInitiativeID: to.Ptr("/providers/Microsoft.Authorization/policySetDefinitions/c1cbff38-87c0-4b9f-9f70-035c7a3b5523"),
							AssignmentParameters: map[string]any{
								"listOfAllowedLocations": {
									"swedencentral",
								},
							},
						},
					},
					Name: to.Ptr("Security"),
				},
			},
			NamingConventionFormula: to.Ptr("{ResourceTypeAbbreviation}-{DeploymentPrefix}-Contoso-{DeploymentSuffix}-{Environment}"),
			CustomNamingConvention: []*armregulatedenvironmentmanagement.CustomNamingConvention{
				{
					ResourceType: to.Ptr(armregulatedenvironmentmanagement.ResourceTypeDdosProtectionPlans),
					Formula:      to.Ptr("{ResourceTypeAbbreviation}-{DeploymentPrefix}-Contoso-{DeploymentSuffix}"),
				},
			},
		},
	}, nil)
	if err != nil {
		log.Fatalf("failed to finish the request: %v", err)
	}
	res, err := poller.PollUntilDone(ctx, nil)
	if err != nil {
		log.Fatalf("failed to pull the result: %v", err)
	}
	// You could use response here. We use blank identifier for just demo purposes.
	_ = res
	// If the HTTP response code is 200 as defined in example definition, your response structure would look as follows. Please pay attention that all the values in the output are fake values for just demo purposes.
	// res = armregulatedenvironmentmanagement.LandingZoneConfigurationOperationsClientCreateResponse{
	// 	LandingZoneConfigurationResource: &armregulatedenvironmentmanagement.LandingZoneConfigurationResource{
	// 		Properties: &armregulatedenvironmentmanagement.LandingZoneConfigurationResourceProperties{
	// 			ProvisioningState: to.Ptr(armregulatedenvironmentmanagement.ProvisioningStateSucceeded),
	// 			AuthoringStatus: to.Ptr(armregulatedenvironmentmanagement.AuthoringStatusAuthoring),
	// 			DdosProtectionCreationOption: to.Ptr(armregulatedenvironmentmanagement.ResourceCreationOptionsUseExisting),
	// 			ExistingDdosProtectionID: to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000001/resourceGroups/rg-examplegroup/providers/Microsoft.Network/ddosProtectionPlans/ddos-example"),
	// 			LogAnalyticsWorkspaceCreationOption: to.Ptr(armregulatedenvironmentmanagement.ResourceCreationOptionsUseExisting),
	// 			ExistingLogAnalyticsWorkspaceID: to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000001/resourceGroups/rg-examplegroup/providers/Microsoft.OperationalInsights/workspaces/log-example"),
	// 			Tags: []*armregulatedenvironmentmanagement.Tags{
	// 				{
	// 					Name: to.Ptr("tag1"),
	// 					Value: to.Ptr("Lorem"),
	// 				},
	// 				{
	// 					Name: to.Ptr("tag2"),
	// 					Value: to.Ptr("Ipsum"),
	// 				},
	// 			},
	// 			FirewallCreationOption: to.Ptr(armregulatedenvironmentmanagement.FirewallCreationOptionsPremium),
	// 			FirewallSubnetCidrBlock: to.Ptr("10.20.254.0/24"),
	// 			GatewaySubnetCidrBlock: to.Ptr("10.20.252.0/24"),
	// 			LogRetentionInDays: to.Ptr[int64](540),
	// 			HubNetworkCidrBlock: to.Ptr("10.20.0.0/16"),
	// 			AzureBastionCreationOption: to.Ptr(armregulatedenvironmentmanagement.ResourceCreationOptionsUseExisting),
	// 			ExistingAzureBastionID: to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000001/resourceGroups/rg-examplegroup/providers/Microsoft.Network/bastionHosts/bas-example"),
	// 			LandingZonesMgChildren: []*armregulatedenvironmentmanagement.LandingZoneManagementGroupProperties{
	// 				{
	// 					PolicyInitiativesAssignmentProperties: []*armregulatedenvironmentmanagement.PolicyInitiativeAssignmentProperties{
	// 					},
	// 					Name: to.Ptr("Corp"),
	// 				},
	// 				{
	// 					PolicyInitiativesAssignmentProperties: []*armregulatedenvironmentmanagement.PolicyInitiativeAssignmentProperties{
	// 					},
	// 					Name: to.Ptr("Online"),
	// 				},
	// 				{
	// 					PolicyInitiativesAssignmentProperties: []*armregulatedenvironmentmanagement.PolicyInitiativeAssignmentProperties{
	// 						{
	// 							PolicyInitiativeID: to.Ptr("/providers/Microsoft.Authorization/policySetDefinitions/03de05a4-c324-4ccd-882f-a814ea8ab9ea"),
	// 							AssignmentParameters: map[string]any{
	// 							},
	// 						},
	// 					},
	// 					Name: to.Ptr("Confidential Corp"),
	// 				},
	// 				{
	// 					PolicyInitiativesAssignmentProperties: []*armregulatedenvironmentmanagement.PolicyInitiativeAssignmentProperties{
	// 						{
	// 							PolicyInitiativeID: to.Ptr("/providers/Microsoft.Authorization/policySetDefinitions/03de05a4-c324-4ccd-882f-a814ea8ab9ea"),
	// 							AssignmentParameters: map[string]any{
	// 							},
	// 						},
	// 					},
	// 					Name: to.Ptr("Confidential Online"),
	// 				},
	// 			},
	// 			TopLevelMgMetadata: &armregulatedenvironmentmanagement.ManagementGroupProperties{
	// 				PolicyInitiativesAssignmentProperties: []*armregulatedenvironmentmanagement.PolicyInitiativeAssignmentProperties{
	// 					{
	// 						PolicyInitiativeID: to.Ptr("/providers/Microsoft.Authorization/policySetDefinitions/c1cbff38-87c0-4b9f-9f70-035c7a3b5523"),
	// 						AssignmentParameters: map[string]any{
	// 							"listOfAllowedLocations": any{
	// 								"swedencentral",
	// 								"eastus2",
	// 								"uksouth",
	// 							},
	// 						},
	// 					},
	// 				},
	// 			},
	// 			LandingZonesMgMetadata: &armregulatedenvironmentmanagement.ManagementGroupProperties{
	// 				PolicyInitiativesAssignmentProperties: []*armregulatedenvironmentmanagement.PolicyInitiativeAssignmentProperties{
	// 					{
	// 						PolicyInitiativeID: to.Ptr("/providers/Microsoft.Authorization/policySetDefinitions/c1cbff38-87c0-4b9f-9f70-035c7a3b5523"),
	// 						AssignmentParameters: map[string]any{
	// 							"listOfAllowedLocations": any{
	// 								"swedencentral",
	// 							},
	// 						},
	// 					},
	// 				},
	// 			},
	// 			PlatformMgMetadata: &armregulatedenvironmentmanagement.ManagementGroupProperties{
	// 				PolicyInitiativesAssignmentProperties: []*armregulatedenvironmentmanagement.PolicyInitiativeAssignmentProperties{
	// 					{
	// 						PolicyInitiativeID: to.Ptr("/providers/Microsoft.Authorization/policySetDefinitions/c1cbff38-87c0-4b9f-9f70-035c7a3b5523"),
	// 						AssignmentParameters: map[string]any{
	// 							"listOfAllowedLocations": any{
	// 								"swedencentral",
	// 							},
	// 						},
	// 					},
	// 				},
	// 			},
	// 			PlatformManagementMgMetadata: &armregulatedenvironmentmanagement.ManagementGroupProperties{
	// 				PolicyInitiativesAssignmentProperties: []*armregulatedenvironmentmanagement.PolicyInitiativeAssignmentProperties{
	// 					{
	// 						PolicyInitiativeID: to.Ptr("/providers/Microsoft.Authorization/policySetDefinitions/c1cbff38-87c0-4b9f-9f70-035c7a3b5523"),
	// 						AssignmentParameters: map[string]any{
	// 							"listOfAllowedLocations": any{
	// 								"swedencentral",
	// 							},
	// 						},
	// 					},
	// 				},
	// 			},
	// 			PlatformConnectivityMgMetadata: &armregulatedenvironmentmanagement.ManagementGroupProperties{
	// 				PolicyInitiativesAssignmentProperties: []*armregulatedenvironmentmanagement.PolicyInitiativeAssignmentProperties{
	// 					{
	// 						PolicyInitiativeID: to.Ptr("/providers/Microsoft.Authorization/policySetDefinitions/c1cbff38-87c0-4b9f-9f70-035c7a3b5523"),
	// 						AssignmentParameters: map[string]any{
	// 							"listOfAllowedLocations": any{
	// 								"swedencentral",
	// 							},
	// 						},
	// 					},
	// 				},
	// 			},
	// 			PlatformIdentityMgMetadata: &armregulatedenvironmentmanagement.ManagementGroupProperties{
	// 				PolicyInitiativesAssignmentProperties: []*armregulatedenvironmentmanagement.PolicyInitiativeAssignmentProperties{
	// 					{
	// 						PolicyInitiativeID: to.Ptr("/providers/Microsoft.Authorization/policySetDefinitions/c1cbff38-87c0-4b9f-9f70-035c7a3b5523"),
	// 						AssignmentParameters: map[string]any{
	// 							"listOfAllowedLocations": any{
	// 								"swedencentral",
	// 							},
	// 						},
	// 					},
	// 				},
	// 			},
	// 			DecommissionedMgMetadata: &armregulatedenvironmentmanagement.DecommissionedManagementGroupProperties{
	// 				PolicyInitiativesAssignmentProperties: []*armregulatedenvironmentmanagement.PolicyInitiativeAssignmentProperties{
	// 					{
	// 						PolicyInitiativeID: to.Ptr("/providers/Microsoft.Authorization/policySetDefinitions/c1cbff38-87c0-4b9f-9f70-035c7a3b5523"),
	// 						AssignmentParameters: map[string]any{
	// 							"listOfAllowedLocations": any{
	// 								"swedencentral",
	// 							},
	// 						},
	// 					},
	// 				},
	// 				Create: to.Ptr(true),
	// 			},
	// 			SandboxMgMetadata: &armregulatedenvironmentmanagement.SandboxManagementGroupProperties{
	// 				PolicyInitiativesAssignmentProperties: []*armregulatedenvironmentmanagement.PolicyInitiativeAssignmentProperties{
	// 					{
	// 						PolicyInitiativeID: to.Ptr("/providers/Microsoft.Authorization/policySetDefinitions/c1cbff38-87c0-4b9f-9f70-035c7a3b5523"),
	// 						AssignmentParameters: map[string]any{
	// 							"listOfAllowedLocations": any{
	// 								"swedencentral",
	// 							},
	// 						},
	// 					},
	// 				},
	// 				Create: to.Ptr(true),
	// 			},
	// 			ManagedIdentity: &armregulatedenvironmentmanagement.ManagedIdentityProperties{
	// 				Type: to.Ptr(armregulatedenvironmentmanagement.ManagedIdentityResourceTypeUserAssigned),
	// 				UserAssignedIdentityResourceID: to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000001/resourceGroups/rg-examplegroup/providers/Microsoft.ManagedIdentity/userAssignedIdentities/mi-example"),
	// 			},
	// 			PlatformMgChildren: []*armregulatedenvironmentmanagement.PlatformManagementGroupProperties{
	// 				{
	// 					PolicyInitiativesAssignmentProperties: []*armregulatedenvironmentmanagement.PolicyInitiativeAssignmentProperties{
	// 						{
	// 							PolicyInitiativeID: to.Ptr("/providers/Microsoft.Authorization/policySetDefinitions/c1cbff38-87c0-4b9f-9f70-035c7a3b5523"),
	// 							AssignmentParameters: map[string]any{
	// 								"listOfAllowedLocations": any{
	// 									"swedencentral",
	// 								},
	// 							},
	// 						},
	// 					},
	// 					Name: to.Ptr("Telemetry"),
	// 				},
	// 				{
	// 					PolicyInitiativesAssignmentProperties: []*armregulatedenvironmentmanagement.PolicyInitiativeAssignmentProperties{
	// 						{
	// 							PolicyInitiativeID: to.Ptr("/providers/Microsoft.Authorization/policySetDefinitions/c1cbff38-87c0-4b9f-9f70-035c7a3b5523"),
	// 							AssignmentParameters: map[string]any{
	// 								"listOfAllowedLocations": any{
	// 									"swedencentral",
	// 								},
	// 							},
	// 						},
	// 					},
	// 					Name: to.Ptr("Security"),
	// 				},
	// 			},
	// 			NamingConventionFormula: to.Ptr("{ResourceTypeAbbreviation}-{DeploymentPrefix}-Contoso-{DeploymentSuffix}-{Environment}"),
	// 			CustomNamingConvention: []*armregulatedenvironmentmanagement.CustomNamingConvention{
	// 				{
	// 					ResourceType: to.Ptr(armregulatedenvironmentmanagement.ResourceTypeDdosProtectionPlans),
	// 					Formula: to.Ptr("{ResourceTypeAbbreviation}-{DeploymentPrefix}-Contoso-{DeploymentSuffix}"),
	// 				},
	// 			},
	// 		},
	// 		ID: to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000001/resourceGroups/rg-examplegroup/providers/Microsoft.Sovereign/landingZoneAccounts/ExampleLZA/landingZoneConfigurations/ExampleLZC"),
	// 		Name: to.Ptr("ExampleLZC"),
	// 		Type: to.Ptr("microsoft.sovereign/landingzoneaccounts/landingzoneconfigurations"),
	// 		SystemData: &armregulatedenvironmentmanagement.SystemData{
	// 			CreatedBy: to.Ptr("example@example.com"),
	// 			CreatedByType: to.Ptr(armregulatedenvironmentmanagement.CreatedByTypeUser),
	// 			CreatedAt: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2024-09-25T20:19:04.5255905Z"); return t}()),
	// 			LastModifiedBy: to.Ptr("example@example.com"),
	// 			LastModifiedByType: to.Ptr(armregulatedenvironmentmanagement.CreatedByTypeUser),
	// 			LastModifiedAt: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2024-09-25T20:19:04.5255905Z"); return t}()),
	// 		},
	// 	},
	// }
}

// Generated from example definition: 2025-02-27-preview/LandingZoneConfigurationOperations_CreateCopy.json
func ExampleLandingZoneConfigurationOperationsClient_BeginCreateCopy() {
	cred, err := azidentity.NewDefaultAzureCredential(nil)
	if err != nil {
		log.Fatalf("failed to obtain a credential: %v", err)
	}
	ctx := context.Background()
	clientFactory, err := armregulatedenvironmentmanagement.NewClientFactory("9B52DE5E-FE73-4C8B-8968-1E8F0097DDB8", cred, nil)
	if err != nil {
		log.Fatalf("failed to create client: %v", err)
	}
	poller, err := clientFactory.NewLandingZoneConfigurationOperationsClient().BeginCreateCopy(ctx, "ExampleResourceGroup", "SampleLZA", "ExampleLZC", armregulatedenvironmentmanagement.CreateLandingZoneConfigurationCopyRequest{
		Name: to.Ptr("LandingZoneConfiguration"),
	}, nil)
	if err != nil {
		log.Fatalf("failed to finish the request: %v", err)
	}
	res, err := poller.PollUntilDone(ctx, nil)
	if err != nil {
		log.Fatalf("failed to pull the result: %v", err)
	}
	// You could use response here. We use blank identifier for just demo purposes.
	_ = res
	// If the HTTP response code is 200 as defined in example definition, your response structure would look as follows. Please pay attention that all the values in the output are fake values for just demo purposes.
	// res = armregulatedenvironmentmanagement.LandingZoneConfigurationOperationsClientCreateCopyResponse{
	// 	CreateLandingZoneConfigurationCopyResponse: &armregulatedenvironmentmanagement.CreateLandingZoneConfigurationCopyResponse{
	// 		CopiedLandingZoneConfigurationID: to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000001/resourceGroups/TestResourceGroup/providers/Microsoft.Sovereign/landingZoneAccounts/SampleLZA/landingZoneConfigurations/Copy-ExampleLZC"),
	// 	},
	// }
}

// Generated from example definition: 2025-02-27-preview/LandingZoneConfigurationOperations_Delete.json
func ExampleLandingZoneConfigurationOperationsClient_BeginDelete() {
	cred, err := azidentity.NewDefaultAzureCredential(nil)
	if err != nil {
		log.Fatalf("failed to obtain a credential: %v", err)
	}
	ctx := context.Background()
	clientFactory, err := armregulatedenvironmentmanagement.NewClientFactory("9B52DE5E-FE73-4C8B-8968-1E8F0097DDB8", cred, nil)
	if err != nil {
		log.Fatalf("failed to create client: %v", err)
	}
	poller, err := clientFactory.NewLandingZoneConfigurationOperationsClient().BeginDelete(ctx, "ExampleResourceGroup", "SampleLZA", "ExampleLZC", nil)
	if err != nil {
		log.Fatalf("failed to finish the request: %v", err)
	}
	_, err = poller.PollUntilDone(ctx, nil)
	if err != nil {
		log.Fatalf("failed to pull the result: %v", err)
	}
}

// Generated from example definition: 2025-02-27-preview/LandingZoneConfigurationOperations_GenerateLandingZone.json
func ExampleLandingZoneConfigurationOperationsClient_BeginGenerateLandingZone() {
	cred, err := azidentity.NewDefaultAzureCredential(nil)
	if err != nil {
		log.Fatalf("failed to obtain a credential: %v", err)
	}
	ctx := context.Background()
	clientFactory, err := armregulatedenvironmentmanagement.NewClientFactory("00000000-0000-0000-0000-000000000000", cred, nil)
	if err != nil {
		log.Fatalf("failed to create client: %v", err)
	}
	poller, err := clientFactory.NewLandingZoneConfigurationOperationsClient().BeginGenerateLandingZone(ctx, "ExampleResourceGroup", "SampleLZA", "ExampleLZC", armregulatedenvironmentmanagement.GenerateLandingZoneRequest{
		InfrastructureAsCodeOutputOptions:  to.Ptr(armregulatedenvironmentmanagement.InfrastructureAsCodeOutputOptionsBicep),
		DeploymentPrefix:                   to.Ptr("mcfs"),
		TopLevelMgDisplayName:              to.Ptr("TestMG"),
		DeploymentLocation:                 to.Ptr("eastus"),
		ExistingManagementSubscriptionID:   to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000001"),
		ExistingIdentitySubscriptionID:     to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000002"),
		ExistingConnectivitySubscriptionID: to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000003"),
		DeploymentSuffix:                   to.Ptr("test"),
		Organization:                       to.Ptr("test"),
		Environment:                        to.Ptr("QA"),
	}, nil)
	if err != nil {
		log.Fatalf("failed to finish the request: %v", err)
	}
	res, err := poller.PollUntilDone(ctx, nil)
	if err != nil {
		log.Fatalf("failed to pull the result: %v", err)
	}
	// You could use response here. We use blank identifier for just demo purposes.
	_ = res
	// If the HTTP response code is 200 as defined in example definition, your response structure would look as follows. Please pay attention that all the values in the output are fake values for just demo purposes.
	// res = armregulatedenvironmentmanagement.LandingZoneConfigurationOperationsClientGenerateLandingZoneResponse{
	// 	GenerateLandingZoneResponse: &armregulatedenvironmentmanagement.GenerateLandingZoneResponse{
	// 		TopLevelMgDisplayName: to.Ptr("MCFS"),
	// 		LandingZoneConfigurationName: to.Ptr("ExampleLZC"),
	// 	},
	// }
}

// Generated from example definition: 2025-02-27-preview/LandingZoneConfigurationOperations_Get.json
func ExampleLandingZoneConfigurationOperationsClient_Get() {
	cred, err := azidentity.NewDefaultAzureCredential(nil)
	if err != nil {
		log.Fatalf("failed to obtain a credential: %v", err)
	}
	ctx := context.Background()
	clientFactory, err := armregulatedenvironmentmanagement.NewClientFactory("00000000-0000-0000-0000-000000000001", cred, nil)
	if err != nil {
		log.Fatalf("failed to create client: %v", err)
	}
	res, err := clientFactory.NewLandingZoneConfigurationOperationsClient().Get(ctx, "rgsovereign", "SampleLZA", "SampleLZC", nil)
	if err != nil {
		log.Fatalf("failed to finish the request: %v", err)
	}
	// You could use response here. We use blank identifier for just demo purposes.
	_ = res
	// If the HTTP response code is 200 as defined in example definition, your response structure would look as follows. Please pay attention that all the values in the output are fake values for just demo purposes.
	// res = armregulatedenvironmentmanagement.LandingZoneConfigurationOperationsClientGetResponse{
	// 	LandingZoneConfigurationResource: &armregulatedenvironmentmanagement.LandingZoneConfigurationResource{
	// 		Properties: &armregulatedenvironmentmanagement.LandingZoneConfigurationResourceProperties{
	// 			ProvisioningState: to.Ptr(armregulatedenvironmentmanagement.ProvisioningStateSucceeded),
	// 			AuthoringStatus: to.Ptr(armregulatedenvironmentmanagement.AuthoringStatusAuthoring),
	// 			DdosProtectionCreationOption: to.Ptr(armregulatedenvironmentmanagement.ResourceCreationOptionsYes),
	// 			LogAnalyticsWorkspaceCreationOption: to.Ptr(armregulatedenvironmentmanagement.ResourceCreationOptionsNo),
	// 			FirewallCreationOption: to.Ptr(armregulatedenvironmentmanagement.FirewallCreationOptionsStandard),
	// 			LogRetentionInDays: to.Ptr[int64](540),
	// 			HubNetworkCidrBlock: to.Ptr("10.20.255.0/24"),
	// 			AzureBastionCreationOption: to.Ptr(armregulatedenvironmentmanagement.ResourceCreationOptionsYes),
	// 			Tags: []*armregulatedenvironmentmanagement.Tags{
	// 				{
	// 					Name: to.Ptr("tag1"),
	// 					Value: to.Ptr("do"),
	// 				},
	// 				{
	// 					Name: to.Ptr("tag2"),
	// 					Value: to.Ptr("do"),
	// 				},
	// 			},
	// 			FirewallSubnetCidrBlock: to.Ptr("10.20.255.0/24"),
	// 			GatewaySubnetCidrBlock: to.Ptr("10.20.255.0/24"),
	// 			AzureBastionSubnetCidrBlock: to.Ptr("10.20.255.0/24"),
	// 			LandingZonesMgChildren: []*armregulatedenvironmentmanagement.LandingZoneManagementGroupProperties{
	// 				{
	// 					PolicyInitiativesAssignmentProperties: []*armregulatedenvironmentmanagement.PolicyInitiativeAssignmentProperties{
	// 					},
	// 					Name: to.Ptr("Corp"),
	// 				},
	// 			},
	// 			TopLevelMgMetadata: &armregulatedenvironmentmanagement.ManagementGroupProperties{
	// 				PolicyInitiativesAssignmentProperties: []*armregulatedenvironmentmanagement.PolicyInitiativeAssignmentProperties{
	// 					{
	// 						PolicyInitiativeID: to.Ptr("/providers/Microsoft.Authorization/policySetDefinitions/00000000-0000-0000-0000-000000000002"),
	// 						AssignmentParameters: map[string]any{
	// 							"Effect": "Audit",
	// 						},
	// 					},
	// 				},
	// 			},
	// 			LandingZonesMgMetadata: &armregulatedenvironmentmanagement.ManagementGroupProperties{
	// 				PolicyInitiativesAssignmentProperties: []*armregulatedenvironmentmanagement.PolicyInitiativeAssignmentProperties{
	// 				},
	// 			},
	// 			PlatformMgMetadata: &armregulatedenvironmentmanagement.ManagementGroupProperties{
	// 				PolicyInitiativesAssignmentProperties: []*armregulatedenvironmentmanagement.PolicyInitiativeAssignmentProperties{
	// 				},
	// 			},
	// 			PlatformManagementMgMetadata: &armregulatedenvironmentmanagement.ManagementGroupProperties{
	// 				PolicyInitiativesAssignmentProperties: []*armregulatedenvironmentmanagement.PolicyInitiativeAssignmentProperties{
	// 				},
	// 			},
	// 			PlatformConnectivityMgMetadata: &armregulatedenvironmentmanagement.ManagementGroupProperties{
	// 				PolicyInitiativesAssignmentProperties: []*armregulatedenvironmentmanagement.PolicyInitiativeAssignmentProperties{
	// 				},
	// 			},
	// 			PlatformIdentityMgMetadata: &armregulatedenvironmentmanagement.ManagementGroupProperties{
	// 				PolicyInitiativesAssignmentProperties: []*armregulatedenvironmentmanagement.PolicyInitiativeAssignmentProperties{
	// 				},
	// 			},
	// 			DecommissionedMgMetadata: &armregulatedenvironmentmanagement.DecommissionedManagementGroupProperties{
	// 				PolicyInitiativesAssignmentProperties: []*armregulatedenvironmentmanagement.PolicyInitiativeAssignmentProperties{
	// 				},
	// 				Create: to.Ptr(false),
	// 			},
	// 			SandboxMgMetadata: &armregulatedenvironmentmanagement.SandboxManagementGroupProperties{
	// 				PolicyInitiativesAssignmentProperties: []*armregulatedenvironmentmanagement.PolicyInitiativeAssignmentProperties{
	// 				},
	// 				Create: to.Ptr(true),
	// 			},
	// 			ManagedIdentity: &armregulatedenvironmentmanagement.ManagedIdentityProperties{
	// 				Type: to.Ptr(armregulatedenvironmentmanagement.ManagedIdentityResourceTypeSystemAssigned),
	// 			},
	// 			PlatformMgChildren: []*armregulatedenvironmentmanagement.PlatformManagementGroupProperties{
	// 				{
	// 					PolicyInitiativesAssignmentProperties: []*armregulatedenvironmentmanagement.PolicyInitiativeAssignmentProperties{
	// 					},
	// 					Name: to.Ptr("childmg1"),
	// 				},
	// 				{
	// 					PolicyInitiativesAssignmentProperties: []*armregulatedenvironmentmanagement.PolicyInitiativeAssignmentProperties{
	// 					},
	// 					Name: to.Ptr("childmg2"),
	// 				},
	// 			},
	// 			NamingConventionFormula: to.Ptr("{ResourceTypeAbbreviation}"),
	// 			CustomNamingConvention: []*armregulatedenvironmentmanagement.CustomNamingConvention{
	// 				{
	// 					Formula: to.Ptr("{DeploymentSuffix}"),
	// 					ResourceType: to.Ptr(armregulatedenvironmentmanagement.ResourceTypeAzureFirewalls),
	// 				},
	// 			},
	// 		},
	// 		ID: to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000001/resourceGroups/TestResourceGroup/providers/Microsoft.Sovereign/landingZoneAccounts/SampleLZA/landingZoneConfigurations/SampleLZC"),
	// 		Name: to.Ptr("SampleLZC"),
	// 		Type: to.Ptr("microsoft.sovereign/landingzoneaccounts/landingzoneconfigurations"),
	// 		SystemData: &armregulatedenvironmentmanagement.SystemData{
	// 			CreatedBy: to.Ptr("example@example.com"),
	// 			CreatedByType: to.Ptr(armregulatedenvironmentmanagement.CreatedByTypeUser),
	// 			CreatedAt: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2025-01-25T20:19:04.5255905Z"); return t}()),
	// 			LastModifiedBy: to.Ptr("example@example.com"),
	// 			LastModifiedByType: to.Ptr(armregulatedenvironmentmanagement.CreatedByTypeUser),
	// 			LastModifiedAt: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2025-01-25T20:19:04.5255905Z"); return t}()),
	// 		},
	// 	},
	// }
}

// Generated from example definition: 2025-02-27-preview/LandingZoneConfigurationOperations_ListByResourceGroup.json
func ExampleLandingZoneConfigurationOperationsClient_NewListByResourceGroupPager() {
	cred, err := azidentity.NewDefaultAzureCredential(nil)
	if err != nil {
		log.Fatalf("failed to obtain a credential: %v", err)
	}
	ctx := context.Background()
	clientFactory, err := armregulatedenvironmentmanagement.NewClientFactory("00000000-0000-0000-0000-000000000001", cred, nil)
	if err != nil {
		log.Fatalf("failed to create client: %v", err)
	}
	pager := clientFactory.NewLandingZoneConfigurationOperationsClient().NewListByResourceGroupPager("ExampleResourceGroup", "ExampleLZA", nil)
	for pager.More() {
		page, err := pager.NextPage(ctx)
		if err != nil {
			log.Fatalf("failed to advance page: %v", err)
		}
		for _, v := range page.Value {
			// You could use page here. We use blank identifier for just demo purposes.
			_ = v
		}
		// If the HTTP response code is 200 as defined in example definition, your page structure would look as follows. Please pay attention that all the values in the output are fake values for just demo purposes.
		// page = armregulatedenvironmentmanagement.LandingZoneConfigurationOperationsClientListByResourceGroupResponse{
		// 	LandingZoneConfigurationResourceListResult: armregulatedenvironmentmanagement.LandingZoneConfigurationResourceListResult{
		// 		Value: []*armregulatedenvironmentmanagement.LandingZoneConfigurationResource{
		// 			{
		// 				Properties: &armregulatedenvironmentmanagement.LandingZoneConfigurationResourceProperties{
		// 					ProvisioningState: to.Ptr(armregulatedenvironmentmanagement.ProvisioningStateSucceeded),
		// 					AuthoringStatus: to.Ptr(armregulatedenvironmentmanagement.AuthoringStatusAuthoring),
		// 					DdosProtectionCreationOption: to.Ptr(armregulatedenvironmentmanagement.ResourceCreationOptionsYes),
		// 					LogAnalyticsWorkspaceCreationOption: to.Ptr(armregulatedenvironmentmanagement.ResourceCreationOptionsNo),
		// 					FirewallCreationOption: to.Ptr(armregulatedenvironmentmanagement.FirewallCreationOptionsStandard),
		// 					LogRetentionInDays: to.Ptr[int64](540),
		// 					HubNetworkCidrBlock: to.Ptr("10.20.255.0/24"),
		// 					AzureBastionCreationOption: to.Ptr(armregulatedenvironmentmanagement.ResourceCreationOptionsYes),
		// 					Tags: []*armregulatedenvironmentmanagement.Tags{
		// 						{
		// 							Name: to.Ptr("tag1"),
		// 							Value: to.Ptr("do"),
		// 						},
		// 						{
		// 							Name: to.Ptr("tag2"),
		// 							Value: to.Ptr("do"),
		// 						},
		// 					},
		// 					FirewallSubnetCidrBlock: to.Ptr("10.20.255.0/24"),
		// 					GatewaySubnetCidrBlock: to.Ptr("10.20.255.0/24"),
		// 					AzureBastionSubnetCidrBlock: to.Ptr("10.20.255.0/24"),
		// 					LandingZonesMgChildren: []*armregulatedenvironmentmanagement.LandingZoneManagementGroupProperties{
		// 						{
		// 							PolicyInitiativesAssignmentProperties: []*armregulatedenvironmentmanagement.PolicyInitiativeAssignmentProperties{
		// 							},
		// 							Name: to.Ptr("Corp"),
		// 						},
		// 					},
		// 					TopLevelMgMetadata: &armregulatedenvironmentmanagement.ManagementGroupProperties{
		// 						PolicyInitiativesAssignmentProperties: []*armregulatedenvironmentmanagement.PolicyInitiativeAssignmentProperties{
		// 							{
		// 								PolicyInitiativeID: to.Ptr("/providers/Microsoft.Authorization/policySetDefinitions/0a2ebd47-3fb9-4735-a006-b7f31ddadd9f"),
		// 								AssignmentParameters: map[string]any{
		// 									"Effect": "Audit",
		// 								},
		// 							},
		// 						},
		// 					},
		// 					LandingZonesMgMetadata: &armregulatedenvironmentmanagement.ManagementGroupProperties{
		// 						PolicyInitiativesAssignmentProperties: []*armregulatedenvironmentmanagement.PolicyInitiativeAssignmentProperties{
		// 						},
		// 					},
		// 					PlatformMgMetadata: &armregulatedenvironmentmanagement.ManagementGroupProperties{
		// 						PolicyInitiativesAssignmentProperties: []*armregulatedenvironmentmanagement.PolicyInitiativeAssignmentProperties{
		// 						},
		// 					},
		// 					PlatformManagementMgMetadata: &armregulatedenvironmentmanagement.ManagementGroupProperties{
		// 						PolicyInitiativesAssignmentProperties: []*armregulatedenvironmentmanagement.PolicyInitiativeAssignmentProperties{
		// 						},
		// 					},
		// 					PlatformConnectivityMgMetadata: &armregulatedenvironmentmanagement.ManagementGroupProperties{
		// 						PolicyInitiativesAssignmentProperties: []*armregulatedenvironmentmanagement.PolicyInitiativeAssignmentProperties{
		// 						},
		// 					},
		// 					PlatformIdentityMgMetadata: &armregulatedenvironmentmanagement.ManagementGroupProperties{
		// 						PolicyInitiativesAssignmentProperties: []*armregulatedenvironmentmanagement.PolicyInitiativeAssignmentProperties{
		// 						},
		// 					},
		// 					DecommissionedMgMetadata: &armregulatedenvironmentmanagement.DecommissionedManagementGroupProperties{
		// 						PolicyInitiativesAssignmentProperties: []*armregulatedenvironmentmanagement.PolicyInitiativeAssignmentProperties{
		// 						},
		// 						Create: to.Ptr(false),
		// 					},
		// 					SandboxMgMetadata: &armregulatedenvironmentmanagement.SandboxManagementGroupProperties{
		// 						PolicyInitiativesAssignmentProperties: []*armregulatedenvironmentmanagement.PolicyInitiativeAssignmentProperties{
		// 						},
		// 						Create: to.Ptr(true),
		// 					},
		// 					ManagedIdentity: &armregulatedenvironmentmanagement.ManagedIdentityProperties{
		// 						Type: to.Ptr(armregulatedenvironmentmanagement.ManagedIdentityResourceTypeSystemAssigned),
		// 					},
		// 					PlatformMgChildren: []*armregulatedenvironmentmanagement.PlatformManagementGroupProperties{
		// 						{
		// 							PolicyInitiativesAssignmentProperties: []*armregulatedenvironmentmanagement.PolicyInitiativeAssignmentProperties{
		// 							},
		// 							Name: to.Ptr("childmg1"),
		// 						},
		// 						{
		// 							PolicyInitiativesAssignmentProperties: []*armregulatedenvironmentmanagement.PolicyInitiativeAssignmentProperties{
		// 							},
		// 							Name: to.Ptr("childmg2"),
		// 						},
		// 					},
		// 					NamingConventionFormula: to.Ptr("{ResourceTypeAbbreviation}"),
		// 					CustomNamingConvention: []*armregulatedenvironmentmanagement.CustomNamingConvention{
		// 						{
		// 							Formula: to.Ptr("{DeploymentSuffix}"),
		// 							ResourceType: to.Ptr(armregulatedenvironmentmanagement.ResourceTypeAzureFirewalls),
		// 						},
		// 					},
		// 				},
		// 				ID: to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000001/resourceGroups/TestResourceGroup/providers/Microsoft.Sovereign/landingZoneAccounts/ExampleLZA/landingZoneConfigurations/ExampleLZC"),
		// 				Name: to.Ptr("ExampleLZC"),
		// 				Type: to.Ptr("microsoft.sovereign/landingzoneaccounts/landingzoneconfigurations"),
		// 				SystemData: &armregulatedenvironmentmanagement.SystemData{
		// 					CreatedBy: to.Ptr("example@example.com"),
		// 					CreatedByType: to.Ptr(armregulatedenvironmentmanagement.CreatedByTypeUser),
		// 					CreatedAt: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2025-01-25T20:19:04.5255905Z"); return t}()),
		// 					LastModifiedBy: to.Ptr("example@example.com"),
		// 					LastModifiedByType: to.Ptr(armregulatedenvironmentmanagement.CreatedByTypeUser),
		// 					LastModifiedAt: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2025-01-25T20:19:04.5255905Z"); return t}()),
		// 				},
		// 			},
		// 		},
		// 		NextLink: to.Ptr("https://microsoft.com/a"),
		// 	},
		// }
	}
}

// Generated from example definition: 2025-02-27-preview/LandingZoneConfigurationOperations_ListBySubscription.json
func ExampleLandingZoneConfigurationOperationsClient_NewListBySubscriptionPager() {
	cred, err := azidentity.NewDefaultAzureCredential(nil)
	if err != nil {
		log.Fatalf("failed to obtain a credential: %v", err)
	}
	ctx := context.Background()
	clientFactory, err := armregulatedenvironmentmanagement.NewClientFactory("00000000-0000-0000-0000-000000000001", cred, nil)
	if err != nil {
		log.Fatalf("failed to create client: %v", err)
	}
	pager := clientFactory.NewLandingZoneConfigurationOperationsClient().NewListBySubscriptionPager("ExampleLZA", nil)
	for pager.More() {
		page, err := pager.NextPage(ctx)
		if err != nil {
			log.Fatalf("failed to advance page: %v", err)
		}
		for _, v := range page.Value {
			// You could use page here. We use blank identifier for just demo purposes.
			_ = v
		}
		// If the HTTP response code is 200 as defined in example definition, your page structure would look as follows. Please pay attention that all the values in the output are fake values for just demo purposes.
		// page = armregulatedenvironmentmanagement.LandingZoneConfigurationOperationsClientListBySubscriptionResponse{
		// 	LandingZoneConfigurationResourceListResult: armregulatedenvironmentmanagement.LandingZoneConfigurationResourceListResult{
		// 		Value: []*armregulatedenvironmentmanagement.LandingZoneConfigurationResource{
		// 			{
		// 				Properties: &armregulatedenvironmentmanagement.LandingZoneConfigurationResourceProperties{
		// 					ProvisioningState: to.Ptr(armregulatedenvironmentmanagement.ProvisioningStateSucceeded),
		// 					AuthoringStatus: to.Ptr(armregulatedenvironmentmanagement.AuthoringStatusAuthoring),
		// 					DdosProtectionCreationOption: to.Ptr(armregulatedenvironmentmanagement.ResourceCreationOptionsYes),
		// 					LogAnalyticsWorkspaceCreationOption: to.Ptr(armregulatedenvironmentmanagement.ResourceCreationOptionsNo),
		// 					FirewallCreationOption: to.Ptr(armregulatedenvironmentmanagement.FirewallCreationOptionsStandard),
		// 					LogRetentionInDays: to.Ptr[int64](540),
		// 					HubNetworkCidrBlock: to.Ptr("10.20.255.0/24"),
		// 					AzureBastionCreationOption: to.Ptr(armregulatedenvironmentmanagement.ResourceCreationOptionsYes),
		// 					Tags: []*armregulatedenvironmentmanagement.Tags{
		// 						{
		// 							Name: to.Ptr("tag1"),
		// 							Value: to.Ptr("do"),
		// 						},
		// 						{
		// 							Name: to.Ptr("tag2"),
		// 							Value: to.Ptr("do"),
		// 						},
		// 					},
		// 					FirewallSubnetCidrBlock: to.Ptr("10.20.255.0/24"),
		// 					GatewaySubnetCidrBlock: to.Ptr("10.20.255.0/24"),
		// 					AzureBastionSubnetCidrBlock: to.Ptr("10.20.255.0/24"),
		// 					LandingZonesMgChildren: []*armregulatedenvironmentmanagement.LandingZoneManagementGroupProperties{
		// 						{
		// 							PolicyInitiativesAssignmentProperties: []*armregulatedenvironmentmanagement.PolicyInitiativeAssignmentProperties{
		// 							},
		// 							Name: to.Ptr("Corp"),
		// 						},
		// 					},
		// 					TopLevelMgMetadata: &armregulatedenvironmentmanagement.ManagementGroupProperties{
		// 						PolicyInitiativesAssignmentProperties: []*armregulatedenvironmentmanagement.PolicyInitiativeAssignmentProperties{
		// 							{
		// 								PolicyInitiativeID: to.Ptr("/providers/Microsoft.Authorization/policySetDefinitions/0a2ebd47-3fb9-4735-a006-b7f31ddadd9f"),
		// 								AssignmentParameters: map[string]any{
		// 									"Effect": "Audit",
		// 								},
		// 							},
		// 						},
		// 					},
		// 					LandingZonesMgMetadata: &armregulatedenvironmentmanagement.ManagementGroupProperties{
		// 						PolicyInitiativesAssignmentProperties: []*armregulatedenvironmentmanagement.PolicyInitiativeAssignmentProperties{
		// 						},
		// 					},
		// 					PlatformMgMetadata: &armregulatedenvironmentmanagement.ManagementGroupProperties{
		// 						PolicyInitiativesAssignmentProperties: []*armregulatedenvironmentmanagement.PolicyInitiativeAssignmentProperties{
		// 						},
		// 					},
		// 					PlatformManagementMgMetadata: &armregulatedenvironmentmanagement.ManagementGroupProperties{
		// 						PolicyInitiativesAssignmentProperties: []*armregulatedenvironmentmanagement.PolicyInitiativeAssignmentProperties{
		// 						},
		// 					},
		// 					PlatformConnectivityMgMetadata: &armregulatedenvironmentmanagement.ManagementGroupProperties{
		// 						PolicyInitiativesAssignmentProperties: []*armregulatedenvironmentmanagement.PolicyInitiativeAssignmentProperties{
		// 						},
		// 					},
		// 					PlatformIdentityMgMetadata: &armregulatedenvironmentmanagement.ManagementGroupProperties{
		// 						PolicyInitiativesAssignmentProperties: []*armregulatedenvironmentmanagement.PolicyInitiativeAssignmentProperties{
		// 						},
		// 					},
		// 					DecommissionedMgMetadata: &armregulatedenvironmentmanagement.DecommissionedManagementGroupProperties{
		// 						PolicyInitiativesAssignmentProperties: []*armregulatedenvironmentmanagement.PolicyInitiativeAssignmentProperties{
		// 						},
		// 						Create: to.Ptr(false),
		// 					},
		// 					SandboxMgMetadata: &armregulatedenvironmentmanagement.SandboxManagementGroupProperties{
		// 						PolicyInitiativesAssignmentProperties: []*armregulatedenvironmentmanagement.PolicyInitiativeAssignmentProperties{
		// 						},
		// 						Create: to.Ptr(true),
		// 					},
		// 					ManagedIdentity: &armregulatedenvironmentmanagement.ManagedIdentityProperties{
		// 						Type: to.Ptr(armregulatedenvironmentmanagement.ManagedIdentityResourceTypeSystemAssigned),
		// 					},
		// 					PlatformMgChildren: []*armregulatedenvironmentmanagement.PlatformManagementGroupProperties{
		// 						{
		// 							PolicyInitiativesAssignmentProperties: []*armregulatedenvironmentmanagement.PolicyInitiativeAssignmentProperties{
		// 							},
		// 							Name: to.Ptr("childmg1"),
		// 						},
		// 						{
		// 							PolicyInitiativesAssignmentProperties: []*armregulatedenvironmentmanagement.PolicyInitiativeAssignmentProperties{
		// 							},
		// 							Name: to.Ptr("childmg2"),
		// 						},
		// 					},
		// 					NamingConventionFormula: to.Ptr("{ResourceTypeAbbreviation}"),
		// 					CustomNamingConvention: []*armregulatedenvironmentmanagement.CustomNamingConvention{
		// 						{
		// 							Formula: to.Ptr("{DeploymentSuffix}"),
		// 							ResourceType: to.Ptr(armregulatedenvironmentmanagement.ResourceTypeAzureFirewalls),
		// 						},
		// 					},
		// 				},
		// 				ID: to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000001/resourceGroups/TestResourceGroup/providers/Microsoft.Sovereign/landingZoneAccounts/ExampleLZA/landingZoneConfigurations/ExampleLZC"),
		// 				Name: to.Ptr("ExampleLZC"),
		// 				Type: to.Ptr("microsoft.sovereign/landingzoneaccounts/landingzoneconfigurations"),
		// 				SystemData: &armregulatedenvironmentmanagement.SystemData{
		// 					CreatedBy: to.Ptr("example@example.com"),
		// 					CreatedByType: to.Ptr(armregulatedenvironmentmanagement.CreatedByTypeUser),
		// 					CreatedAt: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2025-01-25T20:19:04.5255905Z"); return t}()),
		// 					LastModifiedBy: to.Ptr("example@example.com"),
		// 					LastModifiedByType: to.Ptr(armregulatedenvironmentmanagement.CreatedByTypeUser),
		// 					LastModifiedAt: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2025-01-25T20:19:04.5255905Z"); return t}()),
		// 				},
		// 			},
		// 		},
		// 		NextLink: to.Ptr("https://microsoft.com/a"),
		// 	},
		// }
	}
}

// Generated from example definition: 2025-02-27-preview/LandingZoneConfigurationOperations_Update.json
func ExampleLandingZoneConfigurationOperationsClient_BeginUpdate() {
	cred, err := azidentity.NewDefaultAzureCredential(nil)
	if err != nil {
		log.Fatalf("failed to obtain a credential: %v", err)
	}
	ctx := context.Background()
	clientFactory, err := armregulatedenvironmentmanagement.NewClientFactory("00000000-0000-0000-0000-000000000001", cred, nil)
	if err != nil {
		log.Fatalf("failed to create client: %v", err)
	}
	poller, err := clientFactory.NewLandingZoneConfigurationOperationsClient().BeginUpdate(ctx, "ExampleResourceGroup", "ExampleLZA", "ExampleLZC", armregulatedenvironmentmanagement.LandingZoneConfigurationResource{
		Properties: &armregulatedenvironmentmanagement.LandingZoneConfigurationResourceProperties{
			DdosProtectionCreationOption:        to.Ptr(armregulatedenvironmentmanagement.ResourceCreationOptionsYes),
			LogAnalyticsWorkspaceCreationOption: to.Ptr(armregulatedenvironmentmanagement.ResourceCreationOptionsNo),
			FirewallCreationOption:              to.Ptr(armregulatedenvironmentmanagement.FirewallCreationOptionsStandard),
			LogRetentionInDays:                  to.Ptr[int64](540),
			HubNetworkCidrBlock:                 to.Ptr("10.20.255.0/24"),
			AzureBastionCreationOption:          to.Ptr(armregulatedenvironmentmanagement.ResourceCreationOptionsYes),
			Tags: []*armregulatedenvironmentmanagement.Tags{
				{
					Name:  to.Ptr("tag1"),
					Value: to.Ptr("do"),
				},
				{
					Name:  to.Ptr("tag2"),
					Value: to.Ptr("do"),
				},
			},
			FirewallSubnetCidrBlock:     to.Ptr("10.20.255.0/24"),
			GatewaySubnetCidrBlock:      to.Ptr("10.20.255.0/24"),
			AzureBastionSubnetCidrBlock: to.Ptr("10.20.255.0/24"),
			LandingZonesMgChildren: []*armregulatedenvironmentmanagement.LandingZoneManagementGroupProperties{
				{
					PolicyInitiativesAssignmentProperties: []*armregulatedenvironmentmanagement.PolicyInitiativeAssignmentProperties{},
					Name:                                  to.Ptr("Corp"),
				},
			},
			TopLevelMgMetadata: &armregulatedenvironmentmanagement.ManagementGroupProperties{
				PolicyInitiativesAssignmentProperties: []*armregulatedenvironmentmanagement.PolicyInitiativeAssignmentProperties{
					{
						PolicyInitiativeID: to.Ptr("/providers/Microsoft.Authorization/policySetDefinitions/0a2ebd47-3fb9-4735-a006-b7f31ddadd9f"),
						AssignmentParameters: map[string]any{
							"Effect": "Audit",
						},
					},
				},
			},
			LandingZonesMgMetadata: &armregulatedenvironmentmanagement.ManagementGroupProperties{
				PolicyInitiativesAssignmentProperties: []*armregulatedenvironmentmanagement.PolicyInitiativeAssignmentProperties{},
			},
			PlatformMgMetadata: &armregulatedenvironmentmanagement.ManagementGroupProperties{
				PolicyInitiativesAssignmentProperties: []*armregulatedenvironmentmanagement.PolicyInitiativeAssignmentProperties{},
			},
			PlatformManagementMgMetadata: &armregulatedenvironmentmanagement.ManagementGroupProperties{
				PolicyInitiativesAssignmentProperties: []*armregulatedenvironmentmanagement.PolicyInitiativeAssignmentProperties{},
			},
			PlatformConnectivityMgMetadata: &armregulatedenvironmentmanagement.ManagementGroupProperties{
				PolicyInitiativesAssignmentProperties: []*armregulatedenvironmentmanagement.PolicyInitiativeAssignmentProperties{},
			},
			PlatformIdentityMgMetadata: &armregulatedenvironmentmanagement.ManagementGroupProperties{
				PolicyInitiativesAssignmentProperties: []*armregulatedenvironmentmanagement.PolicyInitiativeAssignmentProperties{},
			},
			DecommissionedMgMetadata: &armregulatedenvironmentmanagement.DecommissionedManagementGroupProperties{
				PolicyInitiativesAssignmentProperties: []*armregulatedenvironmentmanagement.PolicyInitiativeAssignmentProperties{},
				Create:                                to.Ptr(false),
			},
			SandboxMgMetadata: &armregulatedenvironmentmanagement.SandboxManagementGroupProperties{
				PolicyInitiativesAssignmentProperties: []*armregulatedenvironmentmanagement.PolicyInitiativeAssignmentProperties{},
				Create:                                to.Ptr(true),
			},
			ManagedIdentity: &armregulatedenvironmentmanagement.ManagedIdentityProperties{
				Type: to.Ptr(armregulatedenvironmentmanagement.ManagedIdentityResourceTypeSystemAssigned),
			},
			PlatformMgChildren: []*armregulatedenvironmentmanagement.PlatformManagementGroupProperties{
				{
					PolicyInitiativesAssignmentProperties: []*armregulatedenvironmentmanagement.PolicyInitiativeAssignmentProperties{},
					Name:                                  to.Ptr("childmg1"),
				},
				{
					PolicyInitiativesAssignmentProperties: []*armregulatedenvironmentmanagement.PolicyInitiativeAssignmentProperties{},
					Name:                                  to.Ptr("childmg2"),
				},
			},
			NamingConventionFormula: to.Ptr("{ResourceTypeAbbreviation}"),
			CustomNamingConvention: []*armregulatedenvironmentmanagement.CustomNamingConvention{
				{
					Formula:      to.Ptr("{DeploymentSuffix}"),
					ResourceType: to.Ptr(armregulatedenvironmentmanagement.ResourceTypeAzureFirewalls),
				},
			},
		},
	}, nil)
	if err != nil {
		log.Fatalf("failed to finish the request: %v", err)
	}
	res, err := poller.PollUntilDone(ctx, nil)
	if err != nil {
		log.Fatalf("failed to pull the result: %v", err)
	}
	// You could use response here. We use blank identifier for just demo purposes.
	_ = res
	// If the HTTP response code is 200 as defined in example definition, your response structure would look as follows. Please pay attention that all the values in the output are fake values for just demo purposes.
	// res = armregulatedenvironmentmanagement.LandingZoneConfigurationOperationsClientUpdateResponse{
	// 	LandingZoneConfigurationResource: &armregulatedenvironmentmanagement.LandingZoneConfigurationResource{
	// 		Properties: &armregulatedenvironmentmanagement.LandingZoneConfigurationResourceProperties{
	// 			ProvisioningState: to.Ptr(armregulatedenvironmentmanagement.ProvisioningStateSucceeded),
	// 			AuthoringStatus: to.Ptr(armregulatedenvironmentmanagement.AuthoringStatusAuthoring),
	// 			DdosProtectionCreationOption: to.Ptr(armregulatedenvironmentmanagement.ResourceCreationOptionsYes),
	// 			LogAnalyticsWorkspaceCreationOption: to.Ptr(armregulatedenvironmentmanagement.ResourceCreationOptionsNo),
	// 			FirewallCreationOption: to.Ptr(armregulatedenvironmentmanagement.FirewallCreationOptionsStandard),
	// 			LogRetentionInDays: to.Ptr[int64](540),
	// 			HubNetworkCidrBlock: to.Ptr("10.20.255.0/24"),
	// 			AzureBastionCreationOption: to.Ptr(armregulatedenvironmentmanagement.ResourceCreationOptionsYes),
	// 			Tags: []*armregulatedenvironmentmanagement.Tags{
	// 				{
	// 					Name: to.Ptr("tag1"),
	// 					Value: to.Ptr("do"),
	// 				},
	// 				{
	// 					Name: to.Ptr("tag2"),
	// 					Value: to.Ptr("do"),
	// 				},
	// 			},
	// 			FirewallSubnetCidrBlock: to.Ptr("10.20.255.0/24"),
	// 			GatewaySubnetCidrBlock: to.Ptr("10.20.255.0/24"),
	// 			AzureBastionSubnetCidrBlock: to.Ptr("10.20.255.0/24"),
	// 			LandingZonesMgChildren: []*armregulatedenvironmentmanagement.LandingZoneManagementGroupProperties{
	// 				{
	// 					PolicyInitiativesAssignmentProperties: []*armregulatedenvironmentmanagement.PolicyInitiativeAssignmentProperties{
	// 					},
	// 					Name: to.Ptr("Corp"),
	// 				},
	// 			},
	// 			TopLevelMgMetadata: &armregulatedenvironmentmanagement.ManagementGroupProperties{
	// 				PolicyInitiativesAssignmentProperties: []*armregulatedenvironmentmanagement.PolicyInitiativeAssignmentProperties{
	// 					{
	// 						PolicyInitiativeID: to.Ptr("/providers/Microsoft.Authorization/policySetDefinitions/0a2ebd47-3fb9-4735-a006-b7f31ddadd9f"),
	// 						AssignmentParameters: map[string]any{
	// 							"Effect": "Audit",
	// 						},
	// 					},
	// 				},
	// 			},
	// 			LandingZonesMgMetadata: &armregulatedenvironmentmanagement.ManagementGroupProperties{
	// 				PolicyInitiativesAssignmentProperties: []*armregulatedenvironmentmanagement.PolicyInitiativeAssignmentProperties{
	// 				},
	// 			},
	// 			PlatformMgMetadata: &armregulatedenvironmentmanagement.ManagementGroupProperties{
	// 				PolicyInitiativesAssignmentProperties: []*armregulatedenvironmentmanagement.PolicyInitiativeAssignmentProperties{
	// 				},
	// 			},
	// 			PlatformManagementMgMetadata: &armregulatedenvironmentmanagement.ManagementGroupProperties{
	// 				PolicyInitiativesAssignmentProperties: []*armregulatedenvironmentmanagement.PolicyInitiativeAssignmentProperties{
	// 				},
	// 			},
	// 			PlatformConnectivityMgMetadata: &armregulatedenvironmentmanagement.ManagementGroupProperties{
	// 				PolicyInitiativesAssignmentProperties: []*armregulatedenvironmentmanagement.PolicyInitiativeAssignmentProperties{
	// 				},
	// 			},
	// 			PlatformIdentityMgMetadata: &armregulatedenvironmentmanagement.ManagementGroupProperties{
	// 				PolicyInitiativesAssignmentProperties: []*armregulatedenvironmentmanagement.PolicyInitiativeAssignmentProperties{
	// 				},
	// 			},
	// 			DecommissionedMgMetadata: &armregulatedenvironmentmanagement.DecommissionedManagementGroupProperties{
	// 				PolicyInitiativesAssignmentProperties: []*armregulatedenvironmentmanagement.PolicyInitiativeAssignmentProperties{
	// 				},
	// 				Create: to.Ptr(false),
	// 			},
	// 			SandboxMgMetadata: &armregulatedenvironmentmanagement.SandboxManagementGroupProperties{
	// 				PolicyInitiativesAssignmentProperties: []*armregulatedenvironmentmanagement.PolicyInitiativeAssignmentProperties{
	// 				},
	// 				Create: to.Ptr(true),
	// 			},
	// 			ManagedIdentity: &armregulatedenvironmentmanagement.ManagedIdentityProperties{
	// 				Type: to.Ptr(armregulatedenvironmentmanagement.ManagedIdentityResourceTypeSystemAssigned),
	// 			},
	// 			PlatformMgChildren: []*armregulatedenvironmentmanagement.PlatformManagementGroupProperties{
	// 				{
	// 					PolicyInitiativesAssignmentProperties: []*armregulatedenvironmentmanagement.PolicyInitiativeAssignmentProperties{
	// 					},
	// 					Name: to.Ptr("childmg1"),
	// 				},
	// 				{
	// 					PolicyInitiativesAssignmentProperties: []*armregulatedenvironmentmanagement.PolicyInitiativeAssignmentProperties{
	// 					},
	// 					Name: to.Ptr("childmg2"),
	// 				},
	// 			},
	// 			NamingConventionFormula: to.Ptr("{ResourceTypeAbbreviation}"),
	// 			CustomNamingConvention: []*armregulatedenvironmentmanagement.CustomNamingConvention{
	// 				{
	// 					Formula: to.Ptr("{DeploymentSuffix}"),
	// 					ResourceType: to.Ptr(armregulatedenvironmentmanagement.ResourceTypeAzureFirewalls),
	// 				},
	// 			},
	// 		},
	// 		ID: to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000001/resourceGroups/TestResourceGroup/providers/Microsoft.Sovereign/landingZoneAccounts/ExampleLZA/landingZoneConfigurations/ExampleLZC"),
	// 		Name: to.Ptr("ExampleLZC"),
	// 		Type: to.Ptr("microsoft.sovereign/landingzoneaccounts/landingzoneconfigurations"),
	// 		SystemData: &armregulatedenvironmentmanagement.SystemData{
	// 			CreatedBy: to.Ptr("example@example.com"),
	// 			CreatedByType: to.Ptr(armregulatedenvironmentmanagement.CreatedByTypeUser),
	// 			CreatedAt: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2025-01-25T20:19:04.5255905Z"); return t}()),
	// 			LastModifiedBy: to.Ptr("example@example.com"),
	// 			LastModifiedByType: to.Ptr(armregulatedenvironmentmanagement.CreatedByTypeUser),
	// 			LastModifiedAt: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2025-01-25T20:19:04.5255905Z"); return t}()),
	// 		},
	// 	},
	// }
}

// Generated from example definition: 2025-02-27-preview/LandingZoneConfigurationOperations_UpdateAuthoringStatus.json
func ExampleLandingZoneConfigurationOperationsClient_BeginUpdateAuthoringStatus() {
	cred, err := azidentity.NewDefaultAzureCredential(nil)
	if err != nil {
		log.Fatalf("failed to obtain a credential: %v", err)
	}
	ctx := context.Background()
	clientFactory, err := armregulatedenvironmentmanagement.NewClientFactory("00000000-0000-0000-0000-000000000001", cred, nil)
	if err != nil {
		log.Fatalf("failed to create client: %v", err)
	}
	poller, err := clientFactory.NewLandingZoneConfigurationOperationsClient().BeginUpdateAuthoringStatus(ctx, "ExampleResourceGroup", "ExampleLZA", "ExampleLZC", armregulatedenvironmentmanagement.UpdateAuthoringStatusRequest{
		AuthoringStatus: to.Ptr(armregulatedenvironmentmanagement.AuthoringStatusAuthoring),
	}, nil)
	if err != nil {
		log.Fatalf("failed to finish the request: %v", err)
	}
	res, err := poller.PollUntilDone(ctx, nil)
	if err != nil {
		log.Fatalf("failed to pull the result: %v", err)
	}
	// You could use response here. We use blank identifier for just demo purposes.
	_ = res
	// If the HTTP response code is 200 as defined in example definition, your response structure would look as follows. Please pay attention that all the values in the output are fake values for just demo purposes.
	// res = armregulatedenvironmentmanagement.LandingZoneConfigurationOperationsClientUpdateAuthoringStatusResponse{
	// 	UpdateAuthoringStatusResponse: &armregulatedenvironmentmanagement.UpdateAuthoringStatusResponse{
	// 		LandingZoneConfigurationName: to.Ptr("ExampleLZC"),
	// 		AuthoringStatus: to.Ptr(armregulatedenvironmentmanagement.AuthoringStatusAuthoring),
	// 	},
	// }
}
