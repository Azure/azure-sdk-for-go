// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) Go Code Generator. DO NOT EDIT.

package armregulatedenvironmentmanagement

import (
	"encoding/json"
	"fmt"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore"
	"reflect"
)

// MarshalJSON implements the json.Marshaller interface for type CreateLandingZoneConfigurationCopyRequest.
func (c CreateLandingZoneConfigurationCopyRequest) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]any)
	populate(objectMap, "name", c.Name)
	return json.Marshal(objectMap)
}

// UnmarshalJSON implements the json.Unmarshaller interface for type CreateLandingZoneConfigurationCopyRequest.
func (c *CreateLandingZoneConfigurationCopyRequest) UnmarshalJSON(data []byte) error {
	var rawMsg map[string]json.RawMessage
	if err := json.Unmarshal(data, &rawMsg); err != nil {
		return fmt.Errorf("unmarshalling type %T: %v", c, err)
	}
	for key, val := range rawMsg {
		var err error
		switch key {
		case "name":
			err = unpopulate(val, "Name", &c.Name)
			delete(rawMsg, key)
		}
		if err != nil {
			return fmt.Errorf("unmarshalling type %T: %v", c, err)
		}
	}
	return nil
}

// MarshalJSON implements the json.Marshaller interface for type CreateLandingZoneConfigurationCopyResponse.
func (c CreateLandingZoneConfigurationCopyResponse) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]any)
	populate(objectMap, "copiedLandingZoneConfigurationId", c.CopiedLandingZoneConfigurationID)
	return json.Marshal(objectMap)
}

// UnmarshalJSON implements the json.Unmarshaller interface for type CreateLandingZoneConfigurationCopyResponse.
func (c *CreateLandingZoneConfigurationCopyResponse) UnmarshalJSON(data []byte) error {
	var rawMsg map[string]json.RawMessage
	if err := json.Unmarshal(data, &rawMsg); err != nil {
		return fmt.Errorf("unmarshalling type %T: %v", c, err)
	}
	for key, val := range rawMsg {
		var err error
		switch key {
		case "copiedLandingZoneConfigurationId":
			err = unpopulate(val, "CopiedLandingZoneConfigurationID", &c.CopiedLandingZoneConfigurationID)
			delete(rawMsg, key)
		}
		if err != nil {
			return fmt.Errorf("unmarshalling type %T: %v", c, err)
		}
	}
	return nil
}

// MarshalJSON implements the json.Marshaller interface for type CustomNamingConvention.
func (c CustomNamingConvention) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]any)
	populate(objectMap, "formula", c.Formula)
	populate(objectMap, "resourceType", c.ResourceType)
	return json.Marshal(objectMap)
}

// UnmarshalJSON implements the json.Unmarshaller interface for type CustomNamingConvention.
func (c *CustomNamingConvention) UnmarshalJSON(data []byte) error {
	var rawMsg map[string]json.RawMessage
	if err := json.Unmarshal(data, &rawMsg); err != nil {
		return fmt.Errorf("unmarshalling type %T: %v", c, err)
	}
	for key, val := range rawMsg {
		var err error
		switch key {
		case "formula":
			err = unpopulate(val, "Formula", &c.Formula)
			delete(rawMsg, key)
		case "resourceType":
			err = unpopulate(val, "ResourceType", &c.ResourceType)
			delete(rawMsg, key)
		}
		if err != nil {
			return fmt.Errorf("unmarshalling type %T: %v", c, err)
		}
	}
	return nil
}

// MarshalJSON implements the json.Marshaller interface for type DecommissionedManagementGroupProperties.
func (d DecommissionedManagementGroupProperties) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]any)
	populate(objectMap, "create", d.Create)
	populate(objectMap, "policyInitiativesAssignmentProperties", d.PolicyInitiativesAssignmentProperties)
	return json.Marshal(objectMap)
}

// UnmarshalJSON implements the json.Unmarshaller interface for type DecommissionedManagementGroupProperties.
func (d *DecommissionedManagementGroupProperties) UnmarshalJSON(data []byte) error {
	var rawMsg map[string]json.RawMessage
	if err := json.Unmarshal(data, &rawMsg); err != nil {
		return fmt.Errorf("unmarshalling type %T: %v", d, err)
	}
	for key, val := range rawMsg {
		var err error
		switch key {
		case "create":
			err = unpopulate(val, "Create", &d.Create)
			delete(rawMsg, key)
		case "policyInitiativesAssignmentProperties":
			err = unpopulate(val, "PolicyInitiativesAssignmentProperties", &d.PolicyInitiativesAssignmentProperties)
			delete(rawMsg, key)
		}
		if err != nil {
			return fmt.Errorf("unmarshalling type %T: %v", d, err)
		}
	}
	return nil
}

// MarshalJSON implements the json.Marshaller interface for type GenerateLandingZoneRequest.
func (g GenerateLandingZoneRequest) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]any)
	populate(objectMap, "deploymentLocation", g.DeploymentLocation)
	populate(objectMap, "deploymentPrefix", g.DeploymentPrefix)
	populate(objectMap, "deploymentSuffix", g.DeploymentSuffix)
	populate(objectMap, "environment", g.Environment)
	populate(objectMap, "existingConnectivitySubscriptionId", g.ExistingConnectivitySubscriptionID)
	populate(objectMap, "existingIdentitySubscriptionId", g.ExistingIdentitySubscriptionID)
	populate(objectMap, "existingManagementSubscriptionId", g.ExistingManagementSubscriptionID)
	populate(objectMap, "existingTopLevelMgParentId", g.ExistingTopLevelMgParentID)
	populate(objectMap, "infrastructureAsCodeOutputOptions", g.InfrastructureAsCodeOutputOptions)
	populate(objectMap, "organization", g.Organization)
	populate(objectMap, "subscriptionBillingScope", g.SubscriptionBillingScope)
	populate(objectMap, "topLevelMgDisplayName", g.TopLevelMgDisplayName)
	return json.Marshal(objectMap)
}

// UnmarshalJSON implements the json.Unmarshaller interface for type GenerateLandingZoneRequest.
func (g *GenerateLandingZoneRequest) UnmarshalJSON(data []byte) error {
	var rawMsg map[string]json.RawMessage
	if err := json.Unmarshal(data, &rawMsg); err != nil {
		return fmt.Errorf("unmarshalling type %T: %v", g, err)
	}
	for key, val := range rawMsg {
		var err error
		switch key {
		case "deploymentLocation":
			err = unpopulate(val, "DeploymentLocation", &g.DeploymentLocation)
			delete(rawMsg, key)
		case "deploymentPrefix":
			err = unpopulate(val, "DeploymentPrefix", &g.DeploymentPrefix)
			delete(rawMsg, key)
		case "deploymentSuffix":
			err = unpopulate(val, "DeploymentSuffix", &g.DeploymentSuffix)
			delete(rawMsg, key)
		case "environment":
			err = unpopulate(val, "Environment", &g.Environment)
			delete(rawMsg, key)
		case "existingConnectivitySubscriptionId":
			err = unpopulate(val, "ExistingConnectivitySubscriptionID", &g.ExistingConnectivitySubscriptionID)
			delete(rawMsg, key)
		case "existingIdentitySubscriptionId":
			err = unpopulate(val, "ExistingIdentitySubscriptionID", &g.ExistingIdentitySubscriptionID)
			delete(rawMsg, key)
		case "existingManagementSubscriptionId":
			err = unpopulate(val, "ExistingManagementSubscriptionID", &g.ExistingManagementSubscriptionID)
			delete(rawMsg, key)
		case "existingTopLevelMgParentId":
			err = unpopulate(val, "ExistingTopLevelMgParentID", &g.ExistingTopLevelMgParentID)
			delete(rawMsg, key)
		case "infrastructureAsCodeOutputOptions":
			err = unpopulate(val, "InfrastructureAsCodeOutputOptions", &g.InfrastructureAsCodeOutputOptions)
			delete(rawMsg, key)
		case "organization":
			err = unpopulate(val, "Organization", &g.Organization)
			delete(rawMsg, key)
		case "subscriptionBillingScope":
			err = unpopulate(val, "SubscriptionBillingScope", &g.SubscriptionBillingScope)
			delete(rawMsg, key)
		case "topLevelMgDisplayName":
			err = unpopulate(val, "TopLevelMgDisplayName", &g.TopLevelMgDisplayName)
			delete(rawMsg, key)
		}
		if err != nil {
			return fmt.Errorf("unmarshalling type %T: %v", g, err)
		}
	}
	return nil
}

// MarshalJSON implements the json.Marshaller interface for type GenerateLandingZoneResponse.
func (g GenerateLandingZoneResponse) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]any)
	populate(objectMap, "blobName", g.BlobName)
	populate(objectMap, "containerName", g.ContainerName)
	populate(objectMap, "generatedArmTemplate", g.GeneratedArmTemplate)
	populate(objectMap, "generatedCodeUrl", g.GeneratedCodeURL)
	populate(objectMap, "landingZoneConfigurationName", g.LandingZoneConfigurationName)
	populate(objectMap, "storageAccountName", g.StorageAccountName)
	populate(objectMap, "topLevelMgDisplayName", g.TopLevelMgDisplayName)
	return json.Marshal(objectMap)
}

// UnmarshalJSON implements the json.Unmarshaller interface for type GenerateLandingZoneResponse.
func (g *GenerateLandingZoneResponse) UnmarshalJSON(data []byte) error {
	var rawMsg map[string]json.RawMessage
	if err := json.Unmarshal(data, &rawMsg); err != nil {
		return fmt.Errorf("unmarshalling type %T: %v", g, err)
	}
	for key, val := range rawMsg {
		var err error
		switch key {
		case "blobName":
			err = unpopulate(val, "BlobName", &g.BlobName)
			delete(rawMsg, key)
		case "containerName":
			err = unpopulate(val, "ContainerName", &g.ContainerName)
			delete(rawMsg, key)
		case "generatedArmTemplate":
			err = unpopulate(val, "GeneratedArmTemplate", &g.GeneratedArmTemplate)
			delete(rawMsg, key)
		case "generatedCodeUrl":
			err = unpopulate(val, "GeneratedCodeURL", &g.GeneratedCodeURL)
			delete(rawMsg, key)
		case "landingZoneConfigurationName":
			err = unpopulate(val, "LandingZoneConfigurationName", &g.LandingZoneConfigurationName)
			delete(rawMsg, key)
		case "storageAccountName":
			err = unpopulate(val, "StorageAccountName", &g.StorageAccountName)
			delete(rawMsg, key)
		case "topLevelMgDisplayName":
			err = unpopulate(val, "TopLevelMgDisplayName", &g.TopLevelMgDisplayName)
			delete(rawMsg, key)
		}
		if err != nil {
			return fmt.Errorf("unmarshalling type %T: %v", g, err)
		}
	}
	return nil
}

// MarshalJSON implements the json.Marshaller interface for type LandingZoneAccountResource.
func (l LandingZoneAccountResource) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]any)
	populate(objectMap, "id", l.ID)
	populate(objectMap, "identity", l.Identity)
	populate(objectMap, "location", l.Location)
	populate(objectMap, "name", l.Name)
	populate(objectMap, "properties", l.Properties)
	populate(objectMap, "systemData", l.SystemData)
	populate(objectMap, "tags", l.Tags)
	populate(objectMap, "type", l.Type)
	return json.Marshal(objectMap)
}

// UnmarshalJSON implements the json.Unmarshaller interface for type LandingZoneAccountResource.
func (l *LandingZoneAccountResource) UnmarshalJSON(data []byte) error {
	var rawMsg map[string]json.RawMessage
	if err := json.Unmarshal(data, &rawMsg); err != nil {
		return fmt.Errorf("unmarshalling type %T: %v", l, err)
	}
	for key, val := range rawMsg {
		var err error
		switch key {
		case "id":
			err = unpopulate(val, "ID", &l.ID)
			delete(rawMsg, key)
		case "identity":
			err = unpopulate(val, "Identity", &l.Identity)
			delete(rawMsg, key)
		case "location":
			err = unpopulate(val, "Location", &l.Location)
			delete(rawMsg, key)
		case "name":
			err = unpopulate(val, "Name", &l.Name)
			delete(rawMsg, key)
		case "properties":
			err = unpopulate(val, "Properties", &l.Properties)
			delete(rawMsg, key)
		case "systemData":
			err = unpopulate(val, "SystemData", &l.SystemData)
			delete(rawMsg, key)
		case "tags":
			err = unpopulate(val, "Tags", &l.Tags)
			delete(rawMsg, key)
		case "type":
			err = unpopulate(val, "Type", &l.Type)
			delete(rawMsg, key)
		}
		if err != nil {
			return fmt.Errorf("unmarshalling type %T: %v", l, err)
		}
	}
	return nil
}

// MarshalJSON implements the json.Marshaller interface for type LandingZoneAccountResourceListResult.
func (l LandingZoneAccountResourceListResult) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]any)
	populate(objectMap, "nextLink", l.NextLink)
	populate(objectMap, "value", l.Value)
	return json.Marshal(objectMap)
}

// UnmarshalJSON implements the json.Unmarshaller interface for type LandingZoneAccountResourceListResult.
func (l *LandingZoneAccountResourceListResult) UnmarshalJSON(data []byte) error {
	var rawMsg map[string]json.RawMessage
	if err := json.Unmarshal(data, &rawMsg); err != nil {
		return fmt.Errorf("unmarshalling type %T: %v", l, err)
	}
	for key, val := range rawMsg {
		var err error
		switch key {
		case "nextLink":
			err = unpopulate(val, "NextLink", &l.NextLink)
			delete(rawMsg, key)
		case "value":
			err = unpopulate(val, "Value", &l.Value)
			delete(rawMsg, key)
		}
		if err != nil {
			return fmt.Errorf("unmarshalling type %T: %v", l, err)
		}
	}
	return nil
}

// MarshalJSON implements the json.Marshaller interface for type LandingZoneAccountResourceProperties.
func (l LandingZoneAccountResourceProperties) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]any)
	populate(objectMap, "provisioningState", l.ProvisioningState)
	populate(objectMap, "storageAccount", l.StorageAccount)
	return json.Marshal(objectMap)
}

// UnmarshalJSON implements the json.Unmarshaller interface for type LandingZoneAccountResourceProperties.
func (l *LandingZoneAccountResourceProperties) UnmarshalJSON(data []byte) error {
	var rawMsg map[string]json.RawMessage
	if err := json.Unmarshal(data, &rawMsg); err != nil {
		return fmt.Errorf("unmarshalling type %T: %v", l, err)
	}
	for key, val := range rawMsg {
		var err error
		switch key {
		case "provisioningState":
			err = unpopulate(val, "ProvisioningState", &l.ProvisioningState)
			delete(rawMsg, key)
		case "storageAccount":
			err = unpopulate(val, "StorageAccount", &l.StorageAccount)
			delete(rawMsg, key)
		}
		if err != nil {
			return fmt.Errorf("unmarshalling type %T: %v", l, err)
		}
	}
	return nil
}

// MarshalJSON implements the json.Marshaller interface for type LandingZoneConfigurationResource.
func (l LandingZoneConfigurationResource) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]any)
	populate(objectMap, "id", l.ID)
	populate(objectMap, "name", l.Name)
	populate(objectMap, "properties", l.Properties)
	populate(objectMap, "systemData", l.SystemData)
	populate(objectMap, "type", l.Type)
	return json.Marshal(objectMap)
}

// UnmarshalJSON implements the json.Unmarshaller interface for type LandingZoneConfigurationResource.
func (l *LandingZoneConfigurationResource) UnmarshalJSON(data []byte) error {
	var rawMsg map[string]json.RawMessage
	if err := json.Unmarshal(data, &rawMsg); err != nil {
		return fmt.Errorf("unmarshalling type %T: %v", l, err)
	}
	for key, val := range rawMsg {
		var err error
		switch key {
		case "id":
			err = unpopulate(val, "ID", &l.ID)
			delete(rawMsg, key)
		case "name":
			err = unpopulate(val, "Name", &l.Name)
			delete(rawMsg, key)
		case "properties":
			err = unpopulate(val, "Properties", &l.Properties)
			delete(rawMsg, key)
		case "systemData":
			err = unpopulate(val, "SystemData", &l.SystemData)
			delete(rawMsg, key)
		case "type":
			err = unpopulate(val, "Type", &l.Type)
			delete(rawMsg, key)
		}
		if err != nil {
			return fmt.Errorf("unmarshalling type %T: %v", l, err)
		}
	}
	return nil
}

// MarshalJSON implements the json.Marshaller interface for type LandingZoneConfigurationResourceListResult.
func (l LandingZoneConfigurationResourceListResult) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]any)
	populate(objectMap, "nextLink", l.NextLink)
	populate(objectMap, "value", l.Value)
	return json.Marshal(objectMap)
}

// UnmarshalJSON implements the json.Unmarshaller interface for type LandingZoneConfigurationResourceListResult.
func (l *LandingZoneConfigurationResourceListResult) UnmarshalJSON(data []byte) error {
	var rawMsg map[string]json.RawMessage
	if err := json.Unmarshal(data, &rawMsg); err != nil {
		return fmt.Errorf("unmarshalling type %T: %v", l, err)
	}
	for key, val := range rawMsg {
		var err error
		switch key {
		case "nextLink":
			err = unpopulate(val, "NextLink", &l.NextLink)
			delete(rawMsg, key)
		case "value":
			err = unpopulate(val, "Value", &l.Value)
			delete(rawMsg, key)
		}
		if err != nil {
			return fmt.Errorf("unmarshalling type %T: %v", l, err)
		}
	}
	return nil
}

// MarshalJSON implements the json.Marshaller interface for type LandingZoneConfigurationResourceProperties.
func (l LandingZoneConfigurationResourceProperties) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]any)
	populate(objectMap, "authoringStatus", l.AuthoringStatus)
	populate(objectMap, "azureBastionCreationOption", l.AzureBastionCreationOption)
	populate(objectMap, "azureBastionSubnetCidrBlock", l.AzureBastionSubnetCidrBlock)
	populate(objectMap, "customNamingConvention", l.CustomNamingConvention)
	populate(objectMap, "ddosProtectionCreationOption", l.DdosProtectionCreationOption)
	populate(objectMap, "decommissionedMgMetadata", l.DecommissionedMgMetadata)
	populate(objectMap, "existingAzureBastionId", l.ExistingAzureBastionID)
	populate(objectMap, "existingDdosProtectionId", l.ExistingDdosProtectionID)
	populate(objectMap, "existingLogAnalyticsWorkspaceId", l.ExistingLogAnalyticsWorkspaceID)
	populate(objectMap, "firewallCreationOption", l.FirewallCreationOption)
	populate(objectMap, "firewallSubnetCidrBlock", l.FirewallSubnetCidrBlock)
	populate(objectMap, "gatewaySubnetCidrBlock", l.GatewaySubnetCidrBlock)
	populate(objectMap, "hubNetworkCidrBlock", l.HubNetworkCidrBlock)
	populate(objectMap, "landingZonesMgChildren", l.LandingZonesMgChildren)
	populate(objectMap, "landingZonesMgMetadata", l.LandingZonesMgMetadata)
	populate(objectMap, "logAnalyticsWorkspaceCreationOption", l.LogAnalyticsWorkspaceCreationOption)
	populate(objectMap, "logRetentionInDays", l.LogRetentionInDays)
	populate(objectMap, "managedIdentity", l.ManagedIdentity)
	populate(objectMap, "namingConventionFormula", l.NamingConventionFormula)
	populate(objectMap, "platformConnectivityMgMetadata", l.PlatformConnectivityMgMetadata)
	populate(objectMap, "platformIdentityMgMetadata", l.PlatformIdentityMgMetadata)
	populate(objectMap, "platformManagementMgMetadata", l.PlatformManagementMgMetadata)
	populate(objectMap, "platformMgChildren", l.PlatformMgChildren)
	populate(objectMap, "platformMgMetadata", l.PlatformMgMetadata)
	populate(objectMap, "provisioningState", l.ProvisioningState)
	populate(objectMap, "sandboxMgMetadata", l.SandboxMgMetadata)
	populate(objectMap, "tags", l.Tags)
	populate(objectMap, "topLevelMgMetadata", l.TopLevelMgMetadata)
	return json.Marshal(objectMap)
}

// UnmarshalJSON implements the json.Unmarshaller interface for type LandingZoneConfigurationResourceProperties.
func (l *LandingZoneConfigurationResourceProperties) UnmarshalJSON(data []byte) error {
	var rawMsg map[string]json.RawMessage
	if err := json.Unmarshal(data, &rawMsg); err != nil {
		return fmt.Errorf("unmarshalling type %T: %v", l, err)
	}
	for key, val := range rawMsg {
		var err error
		switch key {
		case "authoringStatus":
			err = unpopulate(val, "AuthoringStatus", &l.AuthoringStatus)
			delete(rawMsg, key)
		case "azureBastionCreationOption":
			err = unpopulate(val, "AzureBastionCreationOption", &l.AzureBastionCreationOption)
			delete(rawMsg, key)
		case "azureBastionSubnetCidrBlock":
			err = unpopulate(val, "AzureBastionSubnetCidrBlock", &l.AzureBastionSubnetCidrBlock)
			delete(rawMsg, key)
		case "customNamingConvention":
			err = unpopulate(val, "CustomNamingConvention", &l.CustomNamingConvention)
			delete(rawMsg, key)
		case "ddosProtectionCreationOption":
			err = unpopulate(val, "DdosProtectionCreationOption", &l.DdosProtectionCreationOption)
			delete(rawMsg, key)
		case "decommissionedMgMetadata":
			err = unpopulate(val, "DecommissionedMgMetadata", &l.DecommissionedMgMetadata)
			delete(rawMsg, key)
		case "existingAzureBastionId":
			err = unpopulate(val, "ExistingAzureBastionID", &l.ExistingAzureBastionID)
			delete(rawMsg, key)
		case "existingDdosProtectionId":
			err = unpopulate(val, "ExistingDdosProtectionID", &l.ExistingDdosProtectionID)
			delete(rawMsg, key)
		case "existingLogAnalyticsWorkspaceId":
			err = unpopulate(val, "ExistingLogAnalyticsWorkspaceID", &l.ExistingLogAnalyticsWorkspaceID)
			delete(rawMsg, key)
		case "firewallCreationOption":
			err = unpopulate(val, "FirewallCreationOption", &l.FirewallCreationOption)
			delete(rawMsg, key)
		case "firewallSubnetCidrBlock":
			err = unpopulate(val, "FirewallSubnetCidrBlock", &l.FirewallSubnetCidrBlock)
			delete(rawMsg, key)
		case "gatewaySubnetCidrBlock":
			err = unpopulate(val, "GatewaySubnetCidrBlock", &l.GatewaySubnetCidrBlock)
			delete(rawMsg, key)
		case "hubNetworkCidrBlock":
			err = unpopulate(val, "HubNetworkCidrBlock", &l.HubNetworkCidrBlock)
			delete(rawMsg, key)
		case "landingZonesMgChildren":
			err = unpopulate(val, "LandingZonesMgChildren", &l.LandingZonesMgChildren)
			delete(rawMsg, key)
		case "landingZonesMgMetadata":
			err = unpopulate(val, "LandingZonesMgMetadata", &l.LandingZonesMgMetadata)
			delete(rawMsg, key)
		case "logAnalyticsWorkspaceCreationOption":
			err = unpopulate(val, "LogAnalyticsWorkspaceCreationOption", &l.LogAnalyticsWorkspaceCreationOption)
			delete(rawMsg, key)
		case "logRetentionInDays":
			err = unpopulate(val, "LogRetentionInDays", &l.LogRetentionInDays)
			delete(rawMsg, key)
		case "managedIdentity":
			err = unpopulate(val, "ManagedIdentity", &l.ManagedIdentity)
			delete(rawMsg, key)
		case "namingConventionFormula":
			err = unpopulate(val, "NamingConventionFormula", &l.NamingConventionFormula)
			delete(rawMsg, key)
		case "platformConnectivityMgMetadata":
			err = unpopulate(val, "PlatformConnectivityMgMetadata", &l.PlatformConnectivityMgMetadata)
			delete(rawMsg, key)
		case "platformIdentityMgMetadata":
			err = unpopulate(val, "PlatformIdentityMgMetadata", &l.PlatformIdentityMgMetadata)
			delete(rawMsg, key)
		case "platformManagementMgMetadata":
			err = unpopulate(val, "PlatformManagementMgMetadata", &l.PlatformManagementMgMetadata)
			delete(rawMsg, key)
		case "platformMgChildren":
			err = unpopulate(val, "PlatformMgChildren", &l.PlatformMgChildren)
			delete(rawMsg, key)
		case "platformMgMetadata":
			err = unpopulate(val, "PlatformMgMetadata", &l.PlatformMgMetadata)
			delete(rawMsg, key)
		case "provisioningState":
			err = unpopulate(val, "ProvisioningState", &l.ProvisioningState)
			delete(rawMsg, key)
		case "sandboxMgMetadata":
			err = unpopulate(val, "SandboxMgMetadata", &l.SandboxMgMetadata)
			delete(rawMsg, key)
		case "tags":
			err = unpopulate(val, "Tags", &l.Tags)
			delete(rawMsg, key)
		case "topLevelMgMetadata":
			err = unpopulate(val, "TopLevelMgMetadata", &l.TopLevelMgMetadata)
			delete(rawMsg, key)
		}
		if err != nil {
			return fmt.Errorf("unmarshalling type %T: %v", l, err)
		}
	}
	return nil
}

// MarshalJSON implements the json.Marshaller interface for type LandingZoneManagementGroupProperties.
func (l LandingZoneManagementGroupProperties) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]any)
	populate(objectMap, "name", l.Name)
	populate(objectMap, "policyInitiativesAssignmentProperties", l.PolicyInitiativesAssignmentProperties)
	return json.Marshal(objectMap)
}

// UnmarshalJSON implements the json.Unmarshaller interface for type LandingZoneManagementGroupProperties.
func (l *LandingZoneManagementGroupProperties) UnmarshalJSON(data []byte) error {
	var rawMsg map[string]json.RawMessage
	if err := json.Unmarshal(data, &rawMsg); err != nil {
		return fmt.Errorf("unmarshalling type %T: %v", l, err)
	}
	for key, val := range rawMsg {
		var err error
		switch key {
		case "name":
			err = unpopulate(val, "Name", &l.Name)
			delete(rawMsg, key)
		case "policyInitiativesAssignmentProperties":
			err = unpopulate(val, "PolicyInitiativesAssignmentProperties", &l.PolicyInitiativesAssignmentProperties)
			delete(rawMsg, key)
		}
		if err != nil {
			return fmt.Errorf("unmarshalling type %T: %v", l, err)
		}
	}
	return nil
}

// MarshalJSON implements the json.Marshaller interface for type LandingZoneRegistrationResource.
func (l LandingZoneRegistrationResource) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]any)
	populate(objectMap, "id", l.ID)
	populate(objectMap, "name", l.Name)
	populate(objectMap, "properties", l.Properties)
	populate(objectMap, "systemData", l.SystemData)
	populate(objectMap, "type", l.Type)
	return json.Marshal(objectMap)
}

// UnmarshalJSON implements the json.Unmarshaller interface for type LandingZoneRegistrationResource.
func (l *LandingZoneRegistrationResource) UnmarshalJSON(data []byte) error {
	var rawMsg map[string]json.RawMessage
	if err := json.Unmarshal(data, &rawMsg); err != nil {
		return fmt.Errorf("unmarshalling type %T: %v", l, err)
	}
	for key, val := range rawMsg {
		var err error
		switch key {
		case "id":
			err = unpopulate(val, "ID", &l.ID)
			delete(rawMsg, key)
		case "name":
			err = unpopulate(val, "Name", &l.Name)
			delete(rawMsg, key)
		case "properties":
			err = unpopulate(val, "Properties", &l.Properties)
			delete(rawMsg, key)
		case "systemData":
			err = unpopulate(val, "SystemData", &l.SystemData)
			delete(rawMsg, key)
		case "type":
			err = unpopulate(val, "Type", &l.Type)
			delete(rawMsg, key)
		}
		if err != nil {
			return fmt.Errorf("unmarshalling type %T: %v", l, err)
		}
	}
	return nil
}

// MarshalJSON implements the json.Marshaller interface for type LandingZoneRegistrationResourceListResult.
func (l LandingZoneRegistrationResourceListResult) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]any)
	populate(objectMap, "nextLink", l.NextLink)
	populate(objectMap, "value", l.Value)
	return json.Marshal(objectMap)
}

// UnmarshalJSON implements the json.Unmarshaller interface for type LandingZoneRegistrationResourceListResult.
func (l *LandingZoneRegistrationResourceListResult) UnmarshalJSON(data []byte) error {
	var rawMsg map[string]json.RawMessage
	if err := json.Unmarshal(data, &rawMsg); err != nil {
		return fmt.Errorf("unmarshalling type %T: %v", l, err)
	}
	for key, val := range rawMsg {
		var err error
		switch key {
		case "nextLink":
			err = unpopulate(val, "NextLink", &l.NextLink)
			delete(rawMsg, key)
		case "value":
			err = unpopulate(val, "Value", &l.Value)
			delete(rawMsg, key)
		}
		if err != nil {
			return fmt.Errorf("unmarshalling type %T: %v", l, err)
		}
	}
	return nil
}

// MarshalJSON implements the json.Marshaller interface for type LandingZoneRegistrationResourceProperties.
func (l LandingZoneRegistrationResourceProperties) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]any)
	populate(objectMap, "existingLandingZoneConfigurationId", l.ExistingLandingZoneConfigurationID)
	populate(objectMap, "existingTopLevelMgId", l.ExistingTopLevelMgID)
	populate(objectMap, "managedIdentity", l.ManagedIdentity)
	populate(objectMap, "provisioningState", l.ProvisioningState)
	return json.Marshal(objectMap)
}

// UnmarshalJSON implements the json.Unmarshaller interface for type LandingZoneRegistrationResourceProperties.
func (l *LandingZoneRegistrationResourceProperties) UnmarshalJSON(data []byte) error {
	var rawMsg map[string]json.RawMessage
	if err := json.Unmarshal(data, &rawMsg); err != nil {
		return fmt.Errorf("unmarshalling type %T: %v", l, err)
	}
	for key, val := range rawMsg {
		var err error
		switch key {
		case "existingLandingZoneConfigurationId":
			err = unpopulate(val, "ExistingLandingZoneConfigurationID", &l.ExistingLandingZoneConfigurationID)
			delete(rawMsg, key)
		case "existingTopLevelMgId":
			err = unpopulate(val, "ExistingTopLevelMgID", &l.ExistingTopLevelMgID)
			delete(rawMsg, key)
		case "managedIdentity":
			err = unpopulate(val, "ManagedIdentity", &l.ManagedIdentity)
			delete(rawMsg, key)
		case "provisioningState":
			err = unpopulate(val, "ProvisioningState", &l.ProvisioningState)
			delete(rawMsg, key)
		}
		if err != nil {
			return fmt.Errorf("unmarshalling type %T: %v", l, err)
		}
	}
	return nil
}

// MarshalJSON implements the json.Marshaller interface for type ManagedIdentityProperties.
func (m ManagedIdentityProperties) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]any)
	populate(objectMap, "type", m.Type)
	populate(objectMap, "userAssignedIdentityResourceId", m.UserAssignedIdentityResourceID)
	return json.Marshal(objectMap)
}

// UnmarshalJSON implements the json.Unmarshaller interface for type ManagedIdentityProperties.
func (m *ManagedIdentityProperties) UnmarshalJSON(data []byte) error {
	var rawMsg map[string]json.RawMessage
	if err := json.Unmarshal(data, &rawMsg); err != nil {
		return fmt.Errorf("unmarshalling type %T: %v", m, err)
	}
	for key, val := range rawMsg {
		var err error
		switch key {
		case "type":
			err = unpopulate(val, "Type", &m.Type)
			delete(rawMsg, key)
		case "userAssignedIdentityResourceId":
			err = unpopulate(val, "UserAssignedIdentityResourceID", &m.UserAssignedIdentityResourceID)
			delete(rawMsg, key)
		}
		if err != nil {
			return fmt.Errorf("unmarshalling type %T: %v", m, err)
		}
	}
	return nil
}

// MarshalJSON implements the json.Marshaller interface for type ManagedServiceIdentity.
func (m ManagedServiceIdentity) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]any)
	populate(objectMap, "principalId", m.PrincipalID)
	populate(objectMap, "tenantId", m.TenantID)
	populate(objectMap, "type", m.Type)
	populate(objectMap, "userAssignedIdentities", m.UserAssignedIdentities)
	return json.Marshal(objectMap)
}

// UnmarshalJSON implements the json.Unmarshaller interface for type ManagedServiceIdentity.
func (m *ManagedServiceIdentity) UnmarshalJSON(data []byte) error {
	var rawMsg map[string]json.RawMessage
	if err := json.Unmarshal(data, &rawMsg); err != nil {
		return fmt.Errorf("unmarshalling type %T: %v", m, err)
	}
	for key, val := range rawMsg {
		var err error
		switch key {
		case "principalId":
			err = unpopulate(val, "PrincipalID", &m.PrincipalID)
			delete(rawMsg, key)
		case "tenantId":
			err = unpopulate(val, "TenantID", &m.TenantID)
			delete(rawMsg, key)
		case "type":
			err = unpopulate(val, "Type", &m.Type)
			delete(rawMsg, key)
		case "userAssignedIdentities":
			err = unpopulate(val, "UserAssignedIdentities", &m.UserAssignedIdentities)
			delete(rawMsg, key)
		}
		if err != nil {
			return fmt.Errorf("unmarshalling type %T: %v", m, err)
		}
	}
	return nil
}

// MarshalJSON implements the json.Marshaller interface for type ManagementGroupProperties.
func (m ManagementGroupProperties) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]any)
	populate(objectMap, "policyInitiativesAssignmentProperties", m.PolicyInitiativesAssignmentProperties)
	return json.Marshal(objectMap)
}

// UnmarshalJSON implements the json.Unmarshaller interface for type ManagementGroupProperties.
func (m *ManagementGroupProperties) UnmarshalJSON(data []byte) error {
	var rawMsg map[string]json.RawMessage
	if err := json.Unmarshal(data, &rawMsg); err != nil {
		return fmt.Errorf("unmarshalling type %T: %v", m, err)
	}
	for key, val := range rawMsg {
		var err error
		switch key {
		case "policyInitiativesAssignmentProperties":
			err = unpopulate(val, "PolicyInitiativesAssignmentProperties", &m.PolicyInitiativesAssignmentProperties)
			delete(rawMsg, key)
		}
		if err != nil {
			return fmt.Errorf("unmarshalling type %T: %v", m, err)
		}
	}
	return nil
}

// MarshalJSON implements the json.Marshaller interface for type Operation.
func (o Operation) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]any)
	populate(objectMap, "actionType", o.ActionType)
	populate(objectMap, "display", o.Display)
	populate(objectMap, "isDataAction", o.IsDataAction)
	populate(objectMap, "name", o.Name)
	populate(objectMap, "origin", o.Origin)
	return json.Marshal(objectMap)
}

// UnmarshalJSON implements the json.Unmarshaller interface for type Operation.
func (o *Operation) UnmarshalJSON(data []byte) error {
	var rawMsg map[string]json.RawMessage
	if err := json.Unmarshal(data, &rawMsg); err != nil {
		return fmt.Errorf("unmarshalling type %T: %v", o, err)
	}
	for key, val := range rawMsg {
		var err error
		switch key {
		case "actionType":
			err = unpopulate(val, "ActionType", &o.ActionType)
			delete(rawMsg, key)
		case "display":
			err = unpopulate(val, "Display", &o.Display)
			delete(rawMsg, key)
		case "isDataAction":
			err = unpopulate(val, "IsDataAction", &o.IsDataAction)
			delete(rawMsg, key)
		case "name":
			err = unpopulate(val, "Name", &o.Name)
			delete(rawMsg, key)
		case "origin":
			err = unpopulate(val, "Origin", &o.Origin)
			delete(rawMsg, key)
		}
		if err != nil {
			return fmt.Errorf("unmarshalling type %T: %v", o, err)
		}
	}
	return nil
}

// MarshalJSON implements the json.Marshaller interface for type OperationDisplay.
func (o OperationDisplay) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]any)
	populate(objectMap, "description", o.Description)
	populate(objectMap, "operation", o.Operation)
	populate(objectMap, "provider", o.Provider)
	populate(objectMap, "resource", o.Resource)
	return json.Marshal(objectMap)
}

// UnmarshalJSON implements the json.Unmarshaller interface for type OperationDisplay.
func (o *OperationDisplay) UnmarshalJSON(data []byte) error {
	var rawMsg map[string]json.RawMessage
	if err := json.Unmarshal(data, &rawMsg); err != nil {
		return fmt.Errorf("unmarshalling type %T: %v", o, err)
	}
	for key, val := range rawMsg {
		var err error
		switch key {
		case "description":
			err = unpopulate(val, "Description", &o.Description)
			delete(rawMsg, key)
		case "operation":
			err = unpopulate(val, "Operation", &o.Operation)
			delete(rawMsg, key)
		case "provider":
			err = unpopulate(val, "Provider", &o.Provider)
			delete(rawMsg, key)
		case "resource":
			err = unpopulate(val, "Resource", &o.Resource)
			delete(rawMsg, key)
		}
		if err != nil {
			return fmt.Errorf("unmarshalling type %T: %v", o, err)
		}
	}
	return nil
}

// MarshalJSON implements the json.Marshaller interface for type OperationListResult.
func (o OperationListResult) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]any)
	populate(objectMap, "nextLink", o.NextLink)
	populate(objectMap, "value", o.Value)
	return json.Marshal(objectMap)
}

// UnmarshalJSON implements the json.Unmarshaller interface for type OperationListResult.
func (o *OperationListResult) UnmarshalJSON(data []byte) error {
	var rawMsg map[string]json.RawMessage
	if err := json.Unmarshal(data, &rawMsg); err != nil {
		return fmt.Errorf("unmarshalling type %T: %v", o, err)
	}
	for key, val := range rawMsg {
		var err error
		switch key {
		case "nextLink":
			err = unpopulate(val, "NextLink", &o.NextLink)
			delete(rawMsg, key)
		case "value":
			err = unpopulate(val, "Value", &o.Value)
			delete(rawMsg, key)
		}
		if err != nil {
			return fmt.Errorf("unmarshalling type %T: %v", o, err)
		}
	}
	return nil
}

// MarshalJSON implements the json.Marshaller interface for type PlatformManagementGroupProperties.
func (p PlatformManagementGroupProperties) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]any)
	populate(objectMap, "name", p.Name)
	populate(objectMap, "policyInitiativesAssignmentProperties", p.PolicyInitiativesAssignmentProperties)
	return json.Marshal(objectMap)
}

// UnmarshalJSON implements the json.Unmarshaller interface for type PlatformManagementGroupProperties.
func (p *PlatformManagementGroupProperties) UnmarshalJSON(data []byte) error {
	var rawMsg map[string]json.RawMessage
	if err := json.Unmarshal(data, &rawMsg); err != nil {
		return fmt.Errorf("unmarshalling type %T: %v", p, err)
	}
	for key, val := range rawMsg {
		var err error
		switch key {
		case "name":
			err = unpopulate(val, "Name", &p.Name)
			delete(rawMsg, key)
		case "policyInitiativesAssignmentProperties":
			err = unpopulate(val, "PolicyInitiativesAssignmentProperties", &p.PolicyInitiativesAssignmentProperties)
			delete(rawMsg, key)
		}
		if err != nil {
			return fmt.Errorf("unmarshalling type %T: %v", p, err)
		}
	}
	return nil
}

// MarshalJSON implements the json.Marshaller interface for type PolicyInitiativeAssignmentProperties.
func (p PolicyInitiativeAssignmentProperties) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]any)
	populate(objectMap, "assignmentParameters", p.AssignmentParameters)
	populate(objectMap, "policyInitiativeId", p.PolicyInitiativeID)
	return json.Marshal(objectMap)
}

// UnmarshalJSON implements the json.Unmarshaller interface for type PolicyInitiativeAssignmentProperties.
func (p *PolicyInitiativeAssignmentProperties) UnmarshalJSON(data []byte) error {
	var rawMsg map[string]json.RawMessage
	if err := json.Unmarshal(data, &rawMsg); err != nil {
		return fmt.Errorf("unmarshalling type %T: %v", p, err)
	}
	for key, val := range rawMsg {
		var err error
		switch key {
		case "assignmentParameters":
			err = unpopulate(val, "AssignmentParameters", &p.AssignmentParameters)
			delete(rawMsg, key)
		case "policyInitiativeId":
			err = unpopulate(val, "PolicyInitiativeID", &p.PolicyInitiativeID)
			delete(rawMsg, key)
		}
		if err != nil {
			return fmt.Errorf("unmarshalling type %T: %v", p, err)
		}
	}
	return nil
}

// MarshalJSON implements the json.Marshaller interface for type SandboxManagementGroupProperties.
func (s SandboxManagementGroupProperties) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]any)
	populate(objectMap, "create", s.Create)
	populate(objectMap, "policyInitiativesAssignmentProperties", s.PolicyInitiativesAssignmentProperties)
	return json.Marshal(objectMap)
}

// UnmarshalJSON implements the json.Unmarshaller interface for type SandboxManagementGroupProperties.
func (s *SandboxManagementGroupProperties) UnmarshalJSON(data []byte) error {
	var rawMsg map[string]json.RawMessage
	if err := json.Unmarshal(data, &rawMsg); err != nil {
		return fmt.Errorf("unmarshalling type %T: %v", s, err)
	}
	for key, val := range rawMsg {
		var err error
		switch key {
		case "create":
			err = unpopulate(val, "Create", &s.Create)
			delete(rawMsg, key)
		case "policyInitiativesAssignmentProperties":
			err = unpopulate(val, "PolicyInitiativesAssignmentProperties", &s.PolicyInitiativesAssignmentProperties)
			delete(rawMsg, key)
		}
		if err != nil {
			return fmt.Errorf("unmarshalling type %T: %v", s, err)
		}
	}
	return nil
}

// MarshalJSON implements the json.Marshaller interface for type SystemData.
func (s SystemData) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]any)
	populateDateTimeRFC3339(objectMap, "createdAt", s.CreatedAt)
	populate(objectMap, "createdBy", s.CreatedBy)
	populate(objectMap, "createdByType", s.CreatedByType)
	populateDateTimeRFC3339(objectMap, "lastModifiedAt", s.LastModifiedAt)
	populate(objectMap, "lastModifiedBy", s.LastModifiedBy)
	populate(objectMap, "lastModifiedByType", s.LastModifiedByType)
	return json.Marshal(objectMap)
}

// UnmarshalJSON implements the json.Unmarshaller interface for type SystemData.
func (s *SystemData) UnmarshalJSON(data []byte) error {
	var rawMsg map[string]json.RawMessage
	if err := json.Unmarshal(data, &rawMsg); err != nil {
		return fmt.Errorf("unmarshalling type %T: %v", s, err)
	}
	for key, val := range rawMsg {
		var err error
		switch key {
		case "createdAt":
			err = unpopulateDateTimeRFC3339(val, "CreatedAt", &s.CreatedAt)
			delete(rawMsg, key)
		case "createdBy":
			err = unpopulate(val, "CreatedBy", &s.CreatedBy)
			delete(rawMsg, key)
		case "createdByType":
			err = unpopulate(val, "CreatedByType", &s.CreatedByType)
			delete(rawMsg, key)
		case "lastModifiedAt":
			err = unpopulateDateTimeRFC3339(val, "LastModifiedAt", &s.LastModifiedAt)
			delete(rawMsg, key)
		case "lastModifiedBy":
			err = unpopulate(val, "LastModifiedBy", &s.LastModifiedBy)
			delete(rawMsg, key)
		case "lastModifiedByType":
			err = unpopulate(val, "LastModifiedByType", &s.LastModifiedByType)
			delete(rawMsg, key)
		}
		if err != nil {
			return fmt.Errorf("unmarshalling type %T: %v", s, err)
		}
	}
	return nil
}

// MarshalJSON implements the json.Marshaller interface for type Tags.
func (t Tags) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]any)
	populate(objectMap, "name", t.Name)
	populate(objectMap, "value", t.Value)
	return json.Marshal(objectMap)
}

// UnmarshalJSON implements the json.Unmarshaller interface for type Tags.
func (t *Tags) UnmarshalJSON(data []byte) error {
	var rawMsg map[string]json.RawMessage
	if err := json.Unmarshal(data, &rawMsg); err != nil {
		return fmt.Errorf("unmarshalling type %T: %v", t, err)
	}
	for key, val := range rawMsg {
		var err error
		switch key {
		case "name":
			err = unpopulate(val, "Name", &t.Name)
			delete(rawMsg, key)
		case "value":
			err = unpopulate(val, "Value", &t.Value)
			delete(rawMsg, key)
		}
		if err != nil {
			return fmt.Errorf("unmarshalling type %T: %v", t, err)
		}
	}
	return nil
}

// MarshalJSON implements the json.Marshaller interface for type UpdateAuthoringStatusRequest.
func (u UpdateAuthoringStatusRequest) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]any)
	populate(objectMap, "authoringStatus", u.AuthoringStatus)
	return json.Marshal(objectMap)
}

// UnmarshalJSON implements the json.Unmarshaller interface for type UpdateAuthoringStatusRequest.
func (u *UpdateAuthoringStatusRequest) UnmarshalJSON(data []byte) error {
	var rawMsg map[string]json.RawMessage
	if err := json.Unmarshal(data, &rawMsg); err != nil {
		return fmt.Errorf("unmarshalling type %T: %v", u, err)
	}
	for key, val := range rawMsg {
		var err error
		switch key {
		case "authoringStatus":
			err = unpopulate(val, "AuthoringStatus", &u.AuthoringStatus)
			delete(rawMsg, key)
		}
		if err != nil {
			return fmt.Errorf("unmarshalling type %T: %v", u, err)
		}
	}
	return nil
}

// MarshalJSON implements the json.Marshaller interface for type UpdateAuthoringStatusResponse.
func (u UpdateAuthoringStatusResponse) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]any)
	populate(objectMap, "authoringStatus", u.AuthoringStatus)
	populate(objectMap, "landingZoneConfigurationName", u.LandingZoneConfigurationName)
	return json.Marshal(objectMap)
}

// UnmarshalJSON implements the json.Unmarshaller interface for type UpdateAuthoringStatusResponse.
func (u *UpdateAuthoringStatusResponse) UnmarshalJSON(data []byte) error {
	var rawMsg map[string]json.RawMessage
	if err := json.Unmarshal(data, &rawMsg); err != nil {
		return fmt.Errorf("unmarshalling type %T: %v", u, err)
	}
	for key, val := range rawMsg {
		var err error
		switch key {
		case "authoringStatus":
			err = unpopulate(val, "AuthoringStatus", &u.AuthoringStatus)
			delete(rawMsg, key)
		case "landingZoneConfigurationName":
			err = unpopulate(val, "LandingZoneConfigurationName", &u.LandingZoneConfigurationName)
			delete(rawMsg, key)
		}
		if err != nil {
			return fmt.Errorf("unmarshalling type %T: %v", u, err)
		}
	}
	return nil
}

// MarshalJSON implements the json.Marshaller interface for type UserAssignedIdentity.
func (u UserAssignedIdentity) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]any)
	populate(objectMap, "clientId", u.ClientID)
	populate(objectMap, "principalId", u.PrincipalID)
	return json.Marshal(objectMap)
}

// UnmarshalJSON implements the json.Unmarshaller interface for type UserAssignedIdentity.
func (u *UserAssignedIdentity) UnmarshalJSON(data []byte) error {
	var rawMsg map[string]json.RawMessage
	if err := json.Unmarshal(data, &rawMsg); err != nil {
		return fmt.Errorf("unmarshalling type %T: %v", u, err)
	}
	for key, val := range rawMsg {
		var err error
		switch key {
		case "clientId":
			err = unpopulate(val, "ClientID", &u.ClientID)
			delete(rawMsg, key)
		case "principalId":
			err = unpopulate(val, "PrincipalID", &u.PrincipalID)
			delete(rawMsg, key)
		}
		if err != nil {
			return fmt.Errorf("unmarshalling type %T: %v", u, err)
		}
	}
	return nil
}

func populate(m map[string]any, k string, v any) {
	if v == nil {
		return
	} else if azcore.IsNullValue(v) {
		m[k] = nil
	} else if !reflect.ValueOf(v).IsNil() {
		m[k] = v
	}
}

func unpopulate(data json.RawMessage, fn string, v any) error {
	if data == nil || string(data) == "null" {
		return nil
	}
	if err := json.Unmarshal(data, v); err != nil {
		return fmt.Errorf("struct field %s: %v", fn, err)
	}
	return nil
}
