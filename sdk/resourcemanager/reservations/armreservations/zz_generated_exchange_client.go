//go:build go1.16
// +build go1.16

// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

package armreservations

import (
	"context"
	"fmt"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/arm"
	armruntime "github.com/Azure/azure-sdk-for-go/sdk/azcore/arm/runtime"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/policy"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/runtime"
	"net/http"
)

// ExchangeClient contains the methods for the Exchange group.
// Don't use this type directly, use NewExchangeClient() instead.
type ExchangeClient struct {
	ep string
	pl runtime.Pipeline
}

// NewExchangeClient creates a new instance of ExchangeClient with the specified values.
func NewExchangeClient(credential azcore.TokenCredential, options *arm.ClientOptions) *ExchangeClient {
	cp := arm.ClientOptions{}
	if options != nil {
		cp = *options
	}
	if len(cp.Host) == 0 {
		cp.Host = arm.AzurePublicCloud
	}
	return &ExchangeClient{ep: string(cp.Host), pl: armruntime.NewPipeline(module, version, credential, &cp)}
}

// BeginPost - Returns one or more Reservations in exchange for one or more Reservation purchases.
// If the operation fails it returns the *Error error type.
func (client *ExchangeClient) BeginPost(ctx context.Context, body ExchangeRequest, options *ExchangeBeginPostOptions) (ExchangePostPollerResponse, error) {
	resp, err := client.post(ctx, body, options)
	if err != nil {
		return ExchangePostPollerResponse{}, err
	}
	result := ExchangePostPollerResponse{
		RawResponse: resp,
	}
	pt, err := armruntime.NewPoller("ExchangeClient.Post", "azure-async-operation", resp, client.pl, client.postHandleError)
	if err != nil {
		return ExchangePostPollerResponse{}, err
	}
	result.Poller = &ExchangePostPoller{
		pt: pt,
	}
	return result, nil
}

// Post - Returns one or more Reservations in exchange for one or more Reservation purchases.
// If the operation fails it returns the *Error error type.
func (client *ExchangeClient) post(ctx context.Context, body ExchangeRequest, options *ExchangeBeginPostOptions) (*http.Response, error) {
	req, err := client.postCreateRequest(ctx, body, options)
	if err != nil {
		return nil, err
	}
	resp, err := client.pl.Do(req)
	if err != nil {
		return nil, err
	}
	if !runtime.HasStatusCode(resp, http.StatusOK, http.StatusAccepted) {
		return nil, client.postHandleError(resp)
	}
	return resp, nil
}

// postCreateRequest creates the Post request.
func (client *ExchangeClient) postCreateRequest(ctx context.Context, body ExchangeRequest, options *ExchangeBeginPostOptions) (*policy.Request, error) {
	urlPath := "/providers/Microsoft.Capacity/exchange"
	req, err := runtime.NewRequest(ctx, http.MethodPost, runtime.JoinPaths(client.ep, urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("api-version", "2021-07-01")
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header.Set("Accept", "application/json")
	return req, runtime.MarshalAsJSON(req, body)
}

// postHandleError handles the Post error response.
func (client *ExchangeClient) postHandleError(resp *http.Response) error {
	body, err := runtime.Payload(resp)
	if err != nil {
		return runtime.NewResponseError(err, resp)
	}
	errType := Error{raw: string(body)}
	if err := runtime.UnmarshalAsJSON(resp, &errType); err != nil {
		return runtime.NewResponseError(fmt.Errorf("%s\n%s", string(body), err), resp)
	}
	return runtime.NewResponseError(&errType, resp)
}
