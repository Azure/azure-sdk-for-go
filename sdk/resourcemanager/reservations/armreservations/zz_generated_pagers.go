//go:build go1.16
// +build go1.16

// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

package armreservations

import (
	"context"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/policy"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/runtime"
	"net/http"
	"reflect"
)

// OperationListPager provides operations for iterating over paged responses.
type OperationListPager struct {
	client    *OperationClient
	current   OperationListResponse
	err       error
	requester func(context.Context) (*policy.Request, error)
	advancer  func(context.Context, OperationListResponse) (*policy.Request, error)
}

// Err returns the last error encountered while paging.
func (p *OperationListPager) Err() error {
	return p.err
}

// NextPage returns true if the pager advanced to the next page.
// Returns false if there are no more pages or an error occurred.
func (p *OperationListPager) NextPage(ctx context.Context) bool {
	var req *policy.Request
	var err error
	if !reflect.ValueOf(p.current).IsZero() {
		if p.current.OperationList.NextLink == nil || len(*p.current.OperationList.NextLink) == 0 {
			return false
		}
		req, err = p.advancer(ctx, p.current)
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		p.err = err
		return false
	}
	resp, err := p.client.pl.Do(req)
	if err != nil {
		p.err = err
		return false
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {
		p.err = p.client.listHandleError(resp)
		return false
	}
	result, err := p.client.listHandleResponse(resp)
	if err != nil {
		p.err = err
		return false
	}
	p.current = result
	return true
}

// PageResponse returns the current OperationListResponse page.
func (p *OperationListPager) PageResponse() OperationListResponse {
	return p.current
}

// QuotaListPager provides operations for iterating over paged responses.
type QuotaListPager struct {
	client    *QuotaClient
	current   QuotaListResponse
	err       error
	requester func(context.Context) (*policy.Request, error)
	advancer  func(context.Context, QuotaListResponse) (*policy.Request, error)
}

// Err returns the last error encountered while paging.
func (p *QuotaListPager) Err() error {
	return p.err
}

// NextPage returns true if the pager advanced to the next page.
// Returns false if there are no more pages or an error occurred.
func (p *QuotaListPager) NextPage(ctx context.Context) bool {
	var req *policy.Request
	var err error
	if !reflect.ValueOf(p.current).IsZero() {
		if p.current.QuotaLimits.NextLink == nil || len(*p.current.QuotaLimits.NextLink) == 0 {
			return false
		}
		req, err = p.advancer(ctx, p.current)
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		p.err = err
		return false
	}
	resp, err := p.client.pl.Do(req)
	if err != nil {
		p.err = err
		return false
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {
		p.err = p.client.listHandleError(resp)
		return false
	}
	result, err := p.client.listHandleResponse(resp)
	if err != nil {
		p.err = err
		return false
	}
	p.current = result
	return true
}

// PageResponse returns the current QuotaListResponse page.
func (p *QuotaListPager) PageResponse() QuotaListResponse {
	return p.current
}

// QuotaRequestStatusListPager provides operations for iterating over paged responses.
type QuotaRequestStatusListPager struct {
	client    *QuotaRequestStatusClient
	current   QuotaRequestStatusListResponse
	err       error
	requester func(context.Context) (*policy.Request, error)
	advancer  func(context.Context, QuotaRequestStatusListResponse) (*policy.Request, error)
}

// Err returns the last error encountered while paging.
func (p *QuotaRequestStatusListPager) Err() error {
	return p.err
}

// NextPage returns true if the pager advanced to the next page.
// Returns false if there are no more pages or an error occurred.
func (p *QuotaRequestStatusListPager) NextPage(ctx context.Context) bool {
	var req *policy.Request
	var err error
	if !reflect.ValueOf(p.current).IsZero() {
		if p.current.QuotaRequestDetailsList.NextLink == nil || len(*p.current.QuotaRequestDetailsList.NextLink) == 0 {
			return false
		}
		req, err = p.advancer(ctx, p.current)
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		p.err = err
		return false
	}
	resp, err := p.client.pl.Do(req)
	if err != nil {
		p.err = err
		return false
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {
		p.err = p.client.listHandleError(resp)
		return false
	}
	result, err := p.client.listHandleResponse(resp)
	if err != nil {
		p.err = err
		return false
	}
	p.current = result
	return true
}

// PageResponse returns the current QuotaRequestStatusListResponse page.
func (p *QuotaRequestStatusListPager) PageResponse() QuotaRequestStatusListResponse {
	return p.current
}

// ReservationListAllPager provides operations for iterating over paged responses.
type ReservationListAllPager struct {
	client    *ReservationClient
	current   ReservationListAllResponse
	err       error
	requester func(context.Context) (*policy.Request, error)
	advancer  func(context.Context, ReservationListAllResponse) (*policy.Request, error)
}

// Err returns the last error encountered while paging.
func (p *ReservationListAllPager) Err() error {
	return p.err
}

// NextPage returns true if the pager advanced to the next page.
// Returns false if there are no more pages or an error occurred.
func (p *ReservationListAllPager) NextPage(ctx context.Context) bool {
	var req *policy.Request
	var err error
	if !reflect.ValueOf(p.current).IsZero() {
		if p.current.ReservationsListResult.NextLink == nil || len(*p.current.ReservationsListResult.NextLink) == 0 {
			return false
		}
		req, err = p.advancer(ctx, p.current)
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		p.err = err
		return false
	}
	resp, err := p.client.pl.Do(req)
	if err != nil {
		p.err = err
		return false
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {
		p.err = p.client.listAllHandleError(resp)
		return false
	}
	result, err := p.client.listAllHandleResponse(resp)
	if err != nil {
		p.err = err
		return false
	}
	p.current = result
	return true
}

// PageResponse returns the current ReservationListAllResponse page.
func (p *ReservationListAllPager) PageResponse() ReservationListAllResponse {
	return p.current
}

// ReservationListPager provides operations for iterating over paged responses.
type ReservationListPager struct {
	client    *ReservationClient
	current   ReservationListResponse
	err       error
	requester func(context.Context) (*policy.Request, error)
	advancer  func(context.Context, ReservationListResponse) (*policy.Request, error)
}

// Err returns the last error encountered while paging.
func (p *ReservationListPager) Err() error {
	return p.err
}

// NextPage returns true if the pager advanced to the next page.
// Returns false if there are no more pages or an error occurred.
func (p *ReservationListPager) NextPage(ctx context.Context) bool {
	var req *policy.Request
	var err error
	if !reflect.ValueOf(p.current).IsZero() {
		if p.current.ReservationList.NextLink == nil || len(*p.current.ReservationList.NextLink) == 0 {
			return false
		}
		req, err = p.advancer(ctx, p.current)
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		p.err = err
		return false
	}
	resp, err := p.client.pl.Do(req)
	if err != nil {
		p.err = err
		return false
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {
		p.err = p.client.listHandleError(resp)
		return false
	}
	result, err := p.client.listHandleResponse(resp)
	if err != nil {
		p.err = err
		return false
	}
	p.current = result
	return true
}

// PageResponse returns the current ReservationListResponse page.
func (p *ReservationListPager) PageResponse() ReservationListResponse {
	return p.current
}

// ReservationListRevisionsPager provides operations for iterating over paged responses.
type ReservationListRevisionsPager struct {
	client    *ReservationClient
	current   ReservationListRevisionsResponse
	err       error
	requester func(context.Context) (*policy.Request, error)
	advancer  func(context.Context, ReservationListRevisionsResponse) (*policy.Request, error)
}

// Err returns the last error encountered while paging.
func (p *ReservationListRevisionsPager) Err() error {
	return p.err
}

// NextPage returns true if the pager advanced to the next page.
// Returns false if there are no more pages or an error occurred.
func (p *ReservationListRevisionsPager) NextPage(ctx context.Context) bool {
	var req *policy.Request
	var err error
	if !reflect.ValueOf(p.current).IsZero() {
		if p.current.ReservationList.NextLink == nil || len(*p.current.ReservationList.NextLink) == 0 {
			return false
		}
		req, err = p.advancer(ctx, p.current)
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		p.err = err
		return false
	}
	resp, err := p.client.pl.Do(req)
	if err != nil {
		p.err = err
		return false
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {
		p.err = p.client.listRevisionsHandleError(resp)
		return false
	}
	result, err := p.client.listRevisionsHandleResponse(resp)
	if err != nil {
		p.err = err
		return false
	}
	p.current = result
	return true
}

// PageResponse returns the current ReservationListRevisionsResponse page.
func (p *ReservationListRevisionsPager) PageResponse() ReservationListRevisionsResponse {
	return p.current
}

// ReservationOrderListPager provides operations for iterating over paged responses.
type ReservationOrderListPager struct {
	client    *ReservationOrderClient
	current   ReservationOrderListResponse
	err       error
	requester func(context.Context) (*policy.Request, error)
	advancer  func(context.Context, ReservationOrderListResponse) (*policy.Request, error)
}

// Err returns the last error encountered while paging.
func (p *ReservationOrderListPager) Err() error {
	return p.err
}

// NextPage returns true if the pager advanced to the next page.
// Returns false if there are no more pages or an error occurred.
func (p *ReservationOrderListPager) NextPage(ctx context.Context) bool {
	var req *policy.Request
	var err error
	if !reflect.ValueOf(p.current).IsZero() {
		if p.current.ReservationOrderList.NextLink == nil || len(*p.current.ReservationOrderList.NextLink) == 0 {
			return false
		}
		req, err = p.advancer(ctx, p.current)
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		p.err = err
		return false
	}
	resp, err := p.client.pl.Do(req)
	if err != nil {
		p.err = err
		return false
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {
		p.err = p.client.listHandleError(resp)
		return false
	}
	result, err := p.client.listHandleResponse(resp)
	if err != nil {
		p.err = err
		return false
	}
	p.current = result
	return true
}

// PageResponse returns the current ReservationOrderListResponse page.
func (p *ReservationOrderListPager) PageResponse() ReservationOrderListResponse {
	return p.current
}
