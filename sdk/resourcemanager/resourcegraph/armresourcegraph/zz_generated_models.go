//go:build go1.18
// +build go1.18

// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

package armresourcegraph

import "time"

// ClientResourcesHistoryOptions contains the optional parameters for the Client.ResourcesHistory method.
type ClientResourcesHistoryOptions struct {
	// placeholder for future optional parameters
}

// ClientResourcesOptions contains the optional parameters for the Client.Resources method.
type ClientResourcesOptions struct {
	// placeholder for future optional parameters
}

// Column - Query result column descriptor.
type Column struct {
	// REQUIRED; Column name.
	Name *string `json:"name,omitempty"`

	// REQUIRED; Column data type.
	Type *ColumnDataType `json:"type,omitempty"`
}

// DateTimeInterval - An interval in time specifying the date and time for the inclusive start and exclusive end, i.e. [start,
// end).
type DateTimeInterval struct {
	// REQUIRED; A datetime indicating the exclusive/open end of the time interval, i.e. [start,end). Specifying an end that occurs
	// chronologically before start will result in an error.
	End *time.Time `json:"end,omitempty"`

	// REQUIRED; A datetime indicating the inclusive/closed start of the time interval, i.e. [start, end). Specifying a start
	// that occurs chronologically after end will result in an error.
	Start *time.Time `json:"start,omitempty"`
}

// Error details.
type Error struct {
	// REQUIRED; Error code identifying the specific error.
	Code *string `json:"code,omitempty"`

	// REQUIRED; A human readable error message.
	Message *string `json:"message,omitempty"`

	// Error details
	Details []*ErrorDetails `json:"details,omitempty"`
}

// ErrorDetails - Error details.
type ErrorDetails struct {
	// REQUIRED; Error code identifying the specific error.
	Code *string `json:"code,omitempty"`

	// REQUIRED; A human readable error message.
	Message *string `json:"message,omitempty"`

	// OPTIONAL; Contains additional key/value pairs not defined in the schema.
	AdditionalProperties map[string]interface{}
}

// ErrorResponse - An error response from the API.
type ErrorResponse struct {
	// REQUIRED; Error information.
	Error *Error `json:"error,omitempty"`
}

// FacetClassification provides polymorphic access to related types.
// Call the interface's GetFacet() method to access the common type.
// Use a type switch to determine the concrete type.  The possible types are:
// - *Facet, *FacetError, *FacetResult
type FacetClassification interface {
	// GetFacet returns the Facet content of the underlying type.
	GetFacet() *Facet
}

// Facet - A facet containing additional statistics on the response of a query. Can be either FacetResult or FacetError.
type Facet struct {
	// REQUIRED; Facet expression, same as in the corresponding facet request.
	Expression *string `json:"expression,omitempty"`

	// REQUIRED; Result type
	ResultType *string `json:"resultType,omitempty"`
}

// FacetError - A facet whose execution resulted in an error.
type FacetError struct {
	// REQUIRED; An array containing detected facet errors with details.
	Errors []*ErrorDetails `json:"errors,omitempty"`

	// REQUIRED; Facet expression, same as in the corresponding facet request.
	Expression *string `json:"expression,omitempty"`

	// REQUIRED; Result type
	ResultType *string `json:"resultType,omitempty"`
}

// FacetRequest - A request to compute additional statistics (facets) over the query results.
type FacetRequest struct {
	// REQUIRED; The column or list of columns to summarize by
	Expression *string `json:"expression,omitempty"`

	// The options for facet evaluation
	Options *FacetRequestOptions `json:"options,omitempty"`
}

// FacetRequestOptions - The options for facet evaluation
type FacetRequestOptions struct {
	// Specifies the filter condition for the 'where' clause which will be run on main query's result, just before the actual
	// faceting.
	Filter *string `json:"filter,omitempty"`

	// The column name or query expression to sort on. Defaults to count if not present.
	SortBy *string `json:"sortBy,omitempty"`

	// The sorting order by the selected column (count by default).
	SortOrder *FacetSortOrder `json:"sortOrder,omitempty"`

	// The maximum number of facet rows that should be returned.
	Top *int32 `json:"$top,omitempty"`
}

// FacetResult - Successfully executed facet containing additional statistics on the response of a query.
type FacetResult struct {
	// REQUIRED; Number of records returned in the facet response.
	Count *int32 `json:"count,omitempty"`

	// REQUIRED; A JObject array or Table containing the desired facets. Only present if the facet is valid.
	Data interface{} `json:"data,omitempty"`

	// REQUIRED; Facet expression, same as in the corresponding facet request.
	Expression *string `json:"expression,omitempty"`

	// REQUIRED; Result type
	ResultType *string `json:"resultType,omitempty"`

	// REQUIRED; Number of total records in the facet results.
	TotalRecords *int64 `json:"totalRecords,omitempty"`
}

// Operation - Resource Graph REST API operation definition.
type Operation struct {
	// Display metadata associated with the operation.
	Display *OperationDisplay `json:"display,omitempty"`

	// Operation name: {provider}/{resource}/{operation}
	Name *string `json:"name,omitempty"`

	// The origin of operations.
	Origin *string `json:"origin,omitempty"`
}

// OperationDisplay - Display metadata associated with the operation.
type OperationDisplay struct {
	// Description for the operation.
	Description *string `json:"description,omitempty"`

	// Type of operation: get, read, delete, etc.
	Operation *string `json:"operation,omitempty"`

	// Service provider: Microsoft Resource Graph.
	Provider *string `json:"provider,omitempty"`

	// Resource on which the operation is performed etc.
	Resource *string `json:"resource,omitempty"`
}

// OperationListResult - Result of the request to list Resource Graph operations. It contains a list of operations and a URL
// link to get the next set of results.
type OperationListResult struct {
	// List of Resource Graph operations supported by the Resource Graph resource provider.
	Value []*Operation `json:"value,omitempty"`
}

// OperationsClientListOptions contains the optional parameters for the OperationsClient.List method.
type OperationsClientListOptions struct {
	// placeholder for future optional parameters
}

// QueryRequest - Describes a query to be executed.
type QueryRequest struct {
	// REQUIRED; The resources query.
	Query *string `json:"query,omitempty"`

	// An array of facet requests to be computed against the query result.
	Facets []*FacetRequest `json:"facets,omitempty"`

	// Azure management groups against which to execute the query. Example: [ 'mg1', 'mg2' ]
	ManagementGroups []*string `json:"managementGroups,omitempty"`

	// The query evaluation options
	Options *QueryRequestOptions `json:"options,omitempty"`

	// Azure subscriptions against which to execute the query.
	Subscriptions []*string `json:"subscriptions,omitempty"`
}

// QueryRequestOptions - The options for query evaluation
type QueryRequestOptions struct {
	// Only applicable for tenant and management group level queries to decide whether to allow partial scopes for result in case
	// the number of subscriptions exceed allowed limits.
	AllowPartialScopes *bool `json:"allowPartialScopes,omitempty"`

	// Defines what level of authorization resources should be returned based on the which subscriptions and management groups
	// are passed as scopes.
	AuthorizationScopeFilter *AuthorizationScopeFilter `json:"authorizationScopeFilter,omitempty"`

	// Defines in which format query result returned.
	ResultFormat *ResultFormat `json:"resultFormat,omitempty"`

	// The number of rows to skip from the beginning of the results. Overrides the next page offset when $skipToken property is
	// present.
	Skip *int32 `json:"$skip,omitempty"`

	// Continuation token for pagination, capturing the next page size and offset, as well as the context of the query.
	SkipToken *string `json:"$skipToken,omitempty"`

	// The maximum number of rows that the query should return. Overrides the page size when $skipToken property is present.
	Top *int32 `json:"$top,omitempty"`
}

// QueryResponse - Query result.
type QueryResponse struct {
	// REQUIRED; Number of records returned in the current response. In the case of paging, this is the number of records in the
	// current page.
	Count *int64 `json:"count,omitempty"`

	// REQUIRED; Query output in JObject array or Table format.
	Data interface{} `json:"data,omitempty"`

	// REQUIRED; Indicates whether the query results are truncated.
	ResultTruncated *ResultTruncated `json:"resultTruncated,omitempty"`

	// REQUIRED; Number of total records matching the query.
	TotalRecords *int64 `json:"totalRecords,omitempty"`

	// Query facets.
	Facets []FacetClassification `json:"facets,omitempty"`

	// When present, the value can be passed to a subsequent query call (together with the same query and scopes used in the current
	// request) to retrieve the next page of data.
	SkipToken *string `json:"$skipToken,omitempty"`
}

// ResourcesHistoryRequest - Describes a history request to be executed.
type ResourcesHistoryRequest struct {
	// Azure management groups against which to execute the query. Example: [ 'mg1', 'mg2' ]
	ManagementGroups []*string `json:"managementGroups,omitempty"`

	// The history request evaluation options
	Options *ResourcesHistoryRequestOptions `json:"options,omitempty"`

	// The resources query.
	Query *string `json:"query,omitempty"`

	// Azure subscriptions against which to execute the query.
	Subscriptions []*string `json:"subscriptions,omitempty"`
}

// ResourcesHistoryRequestOptions - The options for history request evaluation
type ResourcesHistoryRequestOptions struct {
	// The time interval used to fetch history.
	Interval *DateTimeInterval `json:"interval,omitempty"`

	// Defines in which format query result returned.
	ResultFormat *ResultFormat `json:"resultFormat,omitempty"`

	// The number of rows to skip from the beginning of the results. Overrides the next page offset when $skipToken property is
	// present.
	Skip *int32 `json:"$skip,omitempty"`

	// Continuation token for pagination, capturing the next page size and offset, as well as the context of the query.
	SkipToken *string `json:"$skipToken,omitempty"`

	// The maximum number of rows that the query should return. Overrides the page size when $skipToken property is present.
	Top *int32 `json:"$top,omitempty"`
}

// Table - Query output in tabular format.
type Table struct {
	// REQUIRED; Query result column descriptors.
	Columns []*Column `json:"columns,omitempty"`

	// REQUIRED; Query result rows.
	Rows [][]interface{} `json:"rows,omitempty"`
}
