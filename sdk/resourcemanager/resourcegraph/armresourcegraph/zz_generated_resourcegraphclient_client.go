//go:build go1.16
// +build go1.16

// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

package armresourcegraph

import (
	"context"
	"fmt"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/arm"
	armruntime "github.com/Azure/azure-sdk-for-go/sdk/azcore/arm/runtime"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/policy"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/runtime"
	"net/http"
)

// ResourceGraphClient contains the methods for the ResourceGraphClient group.
// Don't use this type directly, use NewResourceGraphClient() instead.
type ResourceGraphClient struct {
	ep string
	pl runtime.Pipeline
}

// NewResourceGraphClient creates a new instance of ResourceGraphClient with the specified values.
func NewResourceGraphClient(credential azcore.TokenCredential, options *arm.ClientOptions) *ResourceGraphClient {
	cp := arm.ClientOptions{}
	if options != nil {
		cp = *options
	}
	if len(cp.Host) == 0 {
		cp.Host = arm.AzurePublicCloud
	}
	return &ResourceGraphClient{ep: string(cp.Host), pl: armruntime.NewPipeline(module, version, credential, &cp)}
}

// Resources - Queries the resources managed by Azure Resource Manager for scopes specified in the request.
// If the operation fails it returns the *ErrorResponse error type.
func (client *ResourceGraphClient) Resources(ctx context.Context, query QueryRequest, options *ResourceGraphClientResourcesOptions) (ResourceGraphClientResourcesResponse, error) {
	req, err := client.resourcesCreateRequest(ctx, query, options)
	if err != nil {
		return ResourceGraphClientResourcesResponse{}, err
	}
	resp, err := client.pl.Do(req)
	if err != nil {
		return ResourceGraphClientResourcesResponse{}, err
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {
		return ResourceGraphClientResourcesResponse{}, client.resourcesHandleError(resp)
	}
	return client.resourcesHandleResponse(resp)
}

// resourcesCreateRequest creates the Resources request.
func (client *ResourceGraphClient) resourcesCreateRequest(ctx context.Context, query QueryRequest, options *ResourceGraphClientResourcesOptions) (*policy.Request, error) {
	urlPath := "/providers/Microsoft.ResourceGraph/resources"
	req, err := runtime.NewRequest(ctx, http.MethodPost, runtime.JoinPaths(client.ep, urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("api-version", "2021-06-01-preview")
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header.Set("Accept", "application/json")
	return req, runtime.MarshalAsJSON(req, query)
}

// resourcesHandleResponse handles the Resources response.
func (client *ResourceGraphClient) resourcesHandleResponse(resp *http.Response) (ResourceGraphClientResourcesResponse, error) {
	result := ResourceGraphClientResourcesResponse{RawResponse: resp}
	if err := runtime.UnmarshalAsJSON(resp, &result.QueryResponse); err != nil {
		return ResourceGraphClientResourcesResponse{}, runtime.NewResponseError(err, resp)
	}
	return result, nil
}

// resourcesHandleError handles the Resources error response.
func (client *ResourceGraphClient) resourcesHandleError(resp *http.Response) error {
	body, err := runtime.Payload(resp)
	if err != nil {
		return runtime.NewResponseError(err, resp)
	}
	errType := ErrorResponse{raw: string(body)}
	if err := runtime.UnmarshalAsJSON(resp, &errType); err != nil {
		return runtime.NewResponseError(fmt.Errorf("%s\n%s", string(body), err), resp)
	}
	return runtime.NewResponseError(&errType, resp)
}

// ResourcesHistory - List all snapshots of a resource for a given time interval.
// If the operation fails it returns the *ErrorResponse error type.
func (client *ResourceGraphClient) ResourcesHistory(ctx context.Context, request ResourcesHistoryRequest, options *ResourceGraphClientResourcesHistoryOptions) (ResourceGraphClientResourcesHistoryResponse, error) {
	req, err := client.resourcesHistoryCreateRequest(ctx, request, options)
	if err != nil {
		return ResourceGraphClientResourcesHistoryResponse{}, err
	}
	resp, err := client.pl.Do(req)
	if err != nil {
		return ResourceGraphClientResourcesHistoryResponse{}, err
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {
		return ResourceGraphClientResourcesHistoryResponse{}, client.resourcesHistoryHandleError(resp)
	}
	return client.resourcesHistoryHandleResponse(resp)
}

// resourcesHistoryCreateRequest creates the ResourcesHistory request.
func (client *ResourceGraphClient) resourcesHistoryCreateRequest(ctx context.Context, request ResourcesHistoryRequest, options *ResourceGraphClientResourcesHistoryOptions) (*policy.Request, error) {
	urlPath := "/providers/Microsoft.ResourceGraph/resourcesHistory"
	req, err := runtime.NewRequest(ctx, http.MethodPost, runtime.JoinPaths(client.ep, urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("api-version", "2021-06-01-preview")
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header.Set("Accept", "application/json")
	return req, runtime.MarshalAsJSON(req, request)
}

// resourcesHistoryHandleResponse handles the ResourcesHistory response.
func (client *ResourceGraphClient) resourcesHistoryHandleResponse(resp *http.Response) (ResourceGraphClientResourcesHistoryResponse, error) {
	result := ResourceGraphClientResourcesHistoryResponse{RawResponse: resp}
	if err := runtime.UnmarshalAsJSON(resp, &result.Object); err != nil {
		return ResourceGraphClientResourcesHistoryResponse{}, runtime.NewResponseError(err, resp)
	}
	return result, nil
}

// resourcesHistoryHandleError handles the ResourcesHistory error response.
func (client *ResourceGraphClient) resourcesHistoryHandleError(resp *http.Response) error {
	body, err := runtime.Payload(resp)
	if err != nil {
		return runtime.NewResponseError(err, resp)
	}
	errType := ErrorResponse{raw: string(body)}
	if err := runtime.UnmarshalAsJSON(resp, &errType); err != nil {
		return runtime.NewResponseError(fmt.Errorf("%s\n%s", string(body), err), resp)
	}
	return runtime.NewResponseError(&errType, resp)
}
