//go:build go1.16
// +build go1.16

// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

package armresourcehealth

import (
	"context"
	"errors"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/arm"
	armruntime "github.com/Azure/azure-sdk-for-go/sdk/azcore/arm/runtime"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/policy"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/runtime"
	"net/http"
	"net/url"
	"strings"
)

// EmergingIssuesClient contains the methods for the EmergingIssues group.
// Don't use this type directly, use NewEmergingIssuesClient() instead.
type EmergingIssuesClient struct {
	host string
	pl   runtime.Pipeline
}

// NewEmergingIssuesClient creates a new instance of EmergingIssuesClient with the specified values.
// credential - used to authorize requests. Usually a credential from azidentity.
// options - pass nil to accept the default values.
func NewEmergingIssuesClient(credential azcore.TokenCredential, options *arm.ClientOptions) *EmergingIssuesClient {
	cp := arm.ClientOptions{}
	if options != nil {
		cp = *options
	}
	if len(cp.Endpoint) == 0 {
		cp.Endpoint = arm.AzurePublicCloud
	}
	client := &EmergingIssuesClient{
		host: string(cp.Endpoint),
		pl:   armruntime.NewPipeline(moduleName, moduleVersion, credential, runtime.PipelineOptions{}, &cp),
	}
	return client
}

// Get - Gets Azure services' emerging issues.
// If the operation fails it returns an *azcore.ResponseError type.
// issueName - The name of the emerging issue.
// options - EmergingIssuesClientGetOptions contains the optional parameters for the EmergingIssuesClient.Get method.
func (client *EmergingIssuesClient) Get(ctx context.Context, issueName Enum0, options *EmergingIssuesClientGetOptions) (EmergingIssuesClientGetResponse, error) {
	req, err := client.getCreateRequest(ctx, issueName, options)
	if err != nil {
		return EmergingIssuesClientGetResponse{}, err
	}
	resp, err := client.pl.Do(req)
	if err != nil {
		return EmergingIssuesClientGetResponse{}, err
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {
		return EmergingIssuesClientGetResponse{}, runtime.NewResponseError(resp)
	}
	return client.getHandleResponse(resp)
}

// getCreateRequest creates the Get request.
func (client *EmergingIssuesClient) getCreateRequest(ctx context.Context, issueName Enum0, options *EmergingIssuesClientGetOptions) (*policy.Request, error) {
	urlPath := "/providers/Microsoft.ResourceHealth/emergingIssues/{issueName}"
	if issueName == "" {
		return nil, errors.New("parameter issueName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{issueName}", url.PathEscape(string(issueName)))
	req, err := runtime.NewRequest(ctx, http.MethodGet, runtime.JoinPaths(client.host, urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("api-version", "2017-07-01")
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header.Set("Accept", "application/json")
	return req, nil
}

// getHandleResponse handles the Get response.
func (client *EmergingIssuesClient) getHandleResponse(resp *http.Response) (EmergingIssuesClientGetResponse, error) {
	result := EmergingIssuesClientGetResponse{RawResponse: resp}
	if err := runtime.UnmarshalAsJSON(resp, &result.EmergingIssuesGetResult); err != nil {
		return EmergingIssuesClientGetResponse{}, err
	}
	return result, nil
}

// List - Lists Azure services' emerging issues.
// If the operation fails it returns an *azcore.ResponseError type.
// options - EmergingIssuesClientListOptions contains the optional parameters for the EmergingIssuesClient.List method.
func (client *EmergingIssuesClient) List(options *EmergingIssuesClientListOptions) *EmergingIssuesClientListPager {
	return &EmergingIssuesClientListPager{
		client: client,
		requester: func(ctx context.Context) (*policy.Request, error) {
			return client.listCreateRequest(ctx, options)
		},
		advancer: func(ctx context.Context, resp EmergingIssuesClientListResponse) (*policy.Request, error) {
			return runtime.NewRequest(ctx, http.MethodGet, *resp.EmergingIssueListResult.NextLink)
		},
	}
}

// listCreateRequest creates the List request.
func (client *EmergingIssuesClient) listCreateRequest(ctx context.Context, options *EmergingIssuesClientListOptions) (*policy.Request, error) {
	urlPath := "/providers/Microsoft.ResourceHealth/emergingIssues"
	req, err := runtime.NewRequest(ctx, http.MethodGet, runtime.JoinPaths(client.host, urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("api-version", "2017-07-01")
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header.Set("Accept", "application/json")
	return req, nil
}

// listHandleResponse handles the List response.
func (client *EmergingIssuesClient) listHandleResponse(resp *http.Response) (EmergingIssuesClientListResponse, error) {
	result := EmergingIssuesClientListResponse{RawResponse: resp}
	if err := runtime.UnmarshalAsJSON(resp, &result.EmergingIssueListResult); err != nil {
		return EmergingIssuesClientListResponse{}, err
	}
	return result, nil
}
