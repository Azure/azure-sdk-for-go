//go:build go1.16
// +build go1.16

// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

package armresourcehealth

import (
	"context"
	"net/http"
	"reflect"

	"github.com/Azure/azure-sdk-for-go/sdk/azcore/policy"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/runtime"
)

// AvailabilityStatusesListByResourceGroupPager provides operations for iterating over paged responses.
type AvailabilityStatusesListByResourceGroupPager struct {
	client    *AvailabilityStatusesClient
	current   AvailabilityStatusesListByResourceGroupResponse
	err       error
	requester func(context.Context) (*policy.Request, error)
	advancer  func(context.Context, AvailabilityStatusesListByResourceGroupResponse) (*policy.Request, error)
}

// Err returns the last error encountered while paging.
func (p *AvailabilityStatusesListByResourceGroupPager) Err() error {
	return p.err
}

// NextPage returns true if the pager advanced to the next page.
// Returns false if there are no more pages or an error occurred.
func (p *AvailabilityStatusesListByResourceGroupPager) NextPage(ctx context.Context) bool {
	var req *policy.Request
	var err error
	if !reflect.ValueOf(p.current).IsZero() {
		if p.current.AvailabilityStatusListResult.NextLink == nil || len(*p.current.AvailabilityStatusListResult.NextLink) == 0 {
			return false
		}
		req, err = p.advancer(ctx, p.current)
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		p.err = err
		return false
	}
	resp, err := p.client.pl.Do(req)
	if err != nil {
		p.err = err
		return false
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {
		p.err = p.client.listByResourceGroupHandleError(resp)
		return false
	}
	result, err := p.client.listByResourceGroupHandleResponse(resp)
	if err != nil {
		p.err = err
		return false
	}
	p.current = result
	return true
}

// PageResponse returns the current AvailabilityStatusesListByResourceGroupResponse page.
func (p *AvailabilityStatusesListByResourceGroupPager) PageResponse() AvailabilityStatusesListByResourceGroupResponse {
	return p.current
}

// AvailabilityStatusesListBySubscriptionIDPager provides operations for iterating over paged responses.
type AvailabilityStatusesListBySubscriptionIDPager struct {
	client    *AvailabilityStatusesClient
	current   AvailabilityStatusesListBySubscriptionIDResponse
	err       error
	requester func(context.Context) (*policy.Request, error)
	advancer  func(context.Context, AvailabilityStatusesListBySubscriptionIDResponse) (*policy.Request, error)
}

// Err returns the last error encountered while paging.
func (p *AvailabilityStatusesListBySubscriptionIDPager) Err() error {
	return p.err
}

// NextPage returns true if the pager advanced to the next page.
// Returns false if there are no more pages or an error occurred.
func (p *AvailabilityStatusesListBySubscriptionIDPager) NextPage(ctx context.Context) bool {
	var req *policy.Request
	var err error
	if !reflect.ValueOf(p.current).IsZero() {
		if p.current.AvailabilityStatusListResult.NextLink == nil || len(*p.current.AvailabilityStatusListResult.NextLink) == 0 {
			return false
		}
		req, err = p.advancer(ctx, p.current)
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		p.err = err
		return false
	}
	resp, err := p.client.pl.Do(req)
	if err != nil {
		p.err = err
		return false
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {
		p.err = p.client.listBySubscriptionIDHandleError(resp)
		return false
	}
	result, err := p.client.listBySubscriptionIDHandleResponse(resp)
	if err != nil {
		p.err = err
		return false
	}
	p.current = result
	return true
}

// PageResponse returns the current AvailabilityStatusesListBySubscriptionIDResponse page.
func (p *AvailabilityStatusesListBySubscriptionIDPager) PageResponse() AvailabilityStatusesListBySubscriptionIDResponse {
	return p.current
}

// AvailabilityStatusesListPager provides operations for iterating over paged responses.
type AvailabilityStatusesListPager struct {
	client    *AvailabilityStatusesClient
	current   AvailabilityStatusesListResponse
	err       error
	requester func(context.Context) (*policy.Request, error)
	advancer  func(context.Context, AvailabilityStatusesListResponse) (*policy.Request, error)
}

// Err returns the last error encountered while paging.
func (p *AvailabilityStatusesListPager) Err() error {
	return p.err
}

// NextPage returns true if the pager advanced to the next page.
// Returns false if there are no more pages or an error occurred.
func (p *AvailabilityStatusesListPager) NextPage(ctx context.Context) bool {
	var req *policy.Request
	var err error
	if !reflect.ValueOf(p.current).IsZero() {
		if p.current.AvailabilityStatusListResult.NextLink == nil || len(*p.current.AvailabilityStatusListResult.NextLink) == 0 {
			return false
		}
		req, err = p.advancer(ctx, p.current)
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		p.err = err
		return false
	}
	resp, err := p.client.pl.Do(req)
	if err != nil {
		p.err = err
		return false
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {
		p.err = p.client.listHandleError(resp)
		return false
	}
	result, err := p.client.listHandleResponse(resp)
	if err != nil {
		p.err = err
		return false
	}
	p.current = result
	return true
}

// PageResponse returns the current AvailabilityStatusesListResponse page.
func (p *AvailabilityStatusesListPager) PageResponse() AvailabilityStatusesListResponse {
	return p.current
}

// ChildAvailabilityStatusesListPager provides operations for iterating over paged responses.
type ChildAvailabilityStatusesListPager struct {
	client    *ChildAvailabilityStatusesClient
	current   ChildAvailabilityStatusesListResponse
	err       error
	requester func(context.Context) (*policy.Request, error)
	advancer  func(context.Context, ChildAvailabilityStatusesListResponse) (*policy.Request, error)
}

// Err returns the last error encountered while paging.
func (p *ChildAvailabilityStatusesListPager) Err() error {
	return p.err
}

// NextPage returns true if the pager advanced to the next page.
// Returns false if there are no more pages or an error occurred.
func (p *ChildAvailabilityStatusesListPager) NextPage(ctx context.Context) bool {
	var req *policy.Request
	var err error
	if !reflect.ValueOf(p.current).IsZero() {
		if p.current.AvailabilityStatusListResult.NextLink == nil || len(*p.current.AvailabilityStatusListResult.NextLink) == 0 {
			return false
		}
		req, err = p.advancer(ctx, p.current)
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		p.err = err
		return false
	}
	resp, err := p.client.pl.Do(req)
	if err != nil {
		p.err = err
		return false
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {
		p.err = p.client.listHandleError(resp)
		return false
	}
	result, err := p.client.listHandleResponse(resp)
	if err != nil {
		p.err = err
		return false
	}
	p.current = result
	return true
}

// PageResponse returns the current ChildAvailabilityStatusesListResponse page.
func (p *ChildAvailabilityStatusesListPager) PageResponse() ChildAvailabilityStatusesListResponse {
	return p.current
}

// ChildResourcesListPager provides operations for iterating over paged responses.
type ChildResourcesListPager struct {
	client    *ChildResourcesClient
	current   ChildResourcesListResponse
	err       error
	requester func(context.Context) (*policy.Request, error)
	advancer  func(context.Context, ChildResourcesListResponse) (*policy.Request, error)
}

// Err returns the last error encountered while paging.
func (p *ChildResourcesListPager) Err() error {
	return p.err
}

// NextPage returns true if the pager advanced to the next page.
// Returns false if there are no more pages or an error occurred.
func (p *ChildResourcesListPager) NextPage(ctx context.Context) bool {
	var req *policy.Request
	var err error
	if !reflect.ValueOf(p.current).IsZero() {
		if p.current.AvailabilityStatusListResult.NextLink == nil || len(*p.current.AvailabilityStatusListResult.NextLink) == 0 {
			return false
		}
		req, err = p.advancer(ctx, p.current)
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		p.err = err
		return false
	}
	resp, err := p.client.pl.Do(req)
	if err != nil {
		p.err = err
		return false
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {
		p.err = p.client.listHandleError(resp)
		return false
	}
	result, err := p.client.listHandleResponse(resp)
	if err != nil {
		p.err = err
		return false
	}
	p.current = result
	return true
}

// PageResponse returns the current ChildResourcesListResponse page.
func (p *ChildResourcesListPager) PageResponse() ChildResourcesListResponse {
	return p.current
}

// EmergingIssuesListPager provides operations for iterating over paged responses.
type EmergingIssuesListPager struct {
	client    *EmergingIssuesClient
	current   EmergingIssuesListResponse
	err       error
	requester func(context.Context) (*policy.Request, error)
	advancer  func(context.Context, EmergingIssuesListResponse) (*policy.Request, error)
}

// Err returns the last error encountered while paging.
func (p *EmergingIssuesListPager) Err() error {
	return p.err
}

// NextPage returns true if the pager advanced to the next page.
// Returns false if there are no more pages or an error occurred.
func (p *EmergingIssuesListPager) NextPage(ctx context.Context) bool {
	var req *policy.Request
	var err error
	if !reflect.ValueOf(p.current).IsZero() {
		if p.current.EmergingIssueListResult.NextLink == nil || len(*p.current.EmergingIssueListResult.NextLink) == 0 {
			return false
		}
		req, err = p.advancer(ctx, p.current)
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		p.err = err
		return false
	}
	resp, err := p.client.pl.Do(req)
	if err != nil {
		p.err = err
		return false
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {
		p.err = p.client.listHandleError(resp)
		return false
	}
	result, err := p.client.listHandleResponse(resp)
	if err != nil {
		p.err = err
		return false
	}
	p.current = result
	return true
}

// PageResponse returns the current EmergingIssuesListResponse page.
func (p *EmergingIssuesListPager) PageResponse() EmergingIssuesListResponse {
	return p.current
}
