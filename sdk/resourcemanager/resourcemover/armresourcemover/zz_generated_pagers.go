//go:build go1.16
// +build go1.16

// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

package armresourcemover

import (
	"context"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/policy"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/runtime"
	"net/http"
	"reflect"
)

// MoveCollectionsListMoveCollectionsByResourceGroupPager provides operations for iterating over paged responses.
type MoveCollectionsListMoveCollectionsByResourceGroupPager struct {
	client    *MoveCollectionsClient
	current   MoveCollectionsListMoveCollectionsByResourceGroupResponse
	err       error
	requester func(context.Context) (*policy.Request, error)
	advancer  func(context.Context, MoveCollectionsListMoveCollectionsByResourceGroupResponse) (*policy.Request, error)
}

// Err returns the last error encountered while paging.
func (p *MoveCollectionsListMoveCollectionsByResourceGroupPager) Err() error {
	return p.err
}

// NextPage returns true if the pager advanced to the next page.
// Returns false if there are no more pages or an error occurred.
func (p *MoveCollectionsListMoveCollectionsByResourceGroupPager) NextPage(ctx context.Context) bool {
	var req *policy.Request
	var err error
	if !reflect.ValueOf(p.current).IsZero() {
		if p.current.MoveCollectionResultList.NextLink == nil || len(*p.current.MoveCollectionResultList.NextLink) == 0 {
			return false
		}
		req, err = p.advancer(ctx, p.current)
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		p.err = err
		return false
	}
	resp, err := p.client.pl.Do(req)
	if err != nil {
		p.err = err
		return false
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {
		p.err = p.client.listMoveCollectionsByResourceGroupHandleError(resp)
		return false
	}
	result, err := p.client.listMoveCollectionsByResourceGroupHandleResponse(resp)
	if err != nil {
		p.err = err
		return false
	}
	p.current = result
	return true
}

// PageResponse returns the current MoveCollectionsListMoveCollectionsByResourceGroupResponse page.
func (p *MoveCollectionsListMoveCollectionsByResourceGroupPager) PageResponse() MoveCollectionsListMoveCollectionsByResourceGroupResponse {
	return p.current
}

// MoveCollectionsListMoveCollectionsBySubscriptionPager provides operations for iterating over paged responses.
type MoveCollectionsListMoveCollectionsBySubscriptionPager struct {
	client    *MoveCollectionsClient
	current   MoveCollectionsListMoveCollectionsBySubscriptionResponse
	err       error
	requester func(context.Context) (*policy.Request, error)
	advancer  func(context.Context, MoveCollectionsListMoveCollectionsBySubscriptionResponse) (*policy.Request, error)
}

// Err returns the last error encountered while paging.
func (p *MoveCollectionsListMoveCollectionsBySubscriptionPager) Err() error {
	return p.err
}

// NextPage returns true if the pager advanced to the next page.
// Returns false if there are no more pages or an error occurred.
func (p *MoveCollectionsListMoveCollectionsBySubscriptionPager) NextPage(ctx context.Context) bool {
	var req *policy.Request
	var err error
	if !reflect.ValueOf(p.current).IsZero() {
		if p.current.MoveCollectionResultList.NextLink == nil || len(*p.current.MoveCollectionResultList.NextLink) == 0 {
			return false
		}
		req, err = p.advancer(ctx, p.current)
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		p.err = err
		return false
	}
	resp, err := p.client.pl.Do(req)
	if err != nil {
		p.err = err
		return false
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {
		p.err = p.client.listMoveCollectionsBySubscriptionHandleError(resp)
		return false
	}
	result, err := p.client.listMoveCollectionsBySubscriptionHandleResponse(resp)
	if err != nil {
		p.err = err
		return false
	}
	p.current = result
	return true
}

// PageResponse returns the current MoveCollectionsListMoveCollectionsBySubscriptionResponse page.
func (p *MoveCollectionsListMoveCollectionsBySubscriptionPager) PageResponse() MoveCollectionsListMoveCollectionsBySubscriptionResponse {
	return p.current
}

// MoveResourcesListPager provides operations for iterating over paged responses.
type MoveResourcesListPager struct {
	client    *MoveResourcesClient
	current   MoveResourcesListResponse
	err       error
	requester func(context.Context) (*policy.Request, error)
	advancer  func(context.Context, MoveResourcesListResponse) (*policy.Request, error)
}

// Err returns the last error encountered while paging.
func (p *MoveResourcesListPager) Err() error {
	return p.err
}

// NextPage returns true if the pager advanced to the next page.
// Returns false if there are no more pages or an error occurred.
func (p *MoveResourcesListPager) NextPage(ctx context.Context) bool {
	var req *policy.Request
	var err error
	if !reflect.ValueOf(p.current).IsZero() {
		if p.current.MoveResourceCollection.NextLink == nil || len(*p.current.MoveResourceCollection.NextLink) == 0 {
			return false
		}
		req, err = p.advancer(ctx, p.current)
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		p.err = err
		return false
	}
	resp, err := p.client.pl.Do(req)
	if err != nil {
		p.err = err
		return false
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {
		p.err = p.client.listHandleError(resp)
		return false
	}
	result, err := p.client.listHandleResponse(resp)
	if err != nil {
		p.err = err
		return false
	}
	p.current = result
	return true
}

// PageResponse returns the current MoveResourcesListResponse page.
func (p *MoveResourcesListPager) PageResponse() MoveResourcesListResponse {
	return p.current
}

// UnresolvedDependenciesGetPager provides operations for iterating over paged responses.
type UnresolvedDependenciesGetPager struct {
	client    *UnresolvedDependenciesClient
	current   UnresolvedDependenciesGetResponse
	err       error
	requester func(context.Context) (*policy.Request, error)
	advancer  func(context.Context, UnresolvedDependenciesGetResponse) (*policy.Request, error)
}

// Err returns the last error encountered while paging.
func (p *UnresolvedDependenciesGetPager) Err() error {
	return p.err
}

// NextPage returns true if the pager advanced to the next page.
// Returns false if there are no more pages or an error occurred.
func (p *UnresolvedDependenciesGetPager) NextPage(ctx context.Context) bool {
	var req *policy.Request
	var err error
	if !reflect.ValueOf(p.current).IsZero() {
		if p.current.UnresolvedDependencyCollection.NextLink == nil || len(*p.current.UnresolvedDependencyCollection.NextLink) == 0 {
			return false
		}
		req, err = p.advancer(ctx, p.current)
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		p.err = err
		return false
	}
	resp, err := p.client.pl.Do(req)
	if err != nil {
		p.err = err
		return false
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {
		p.err = p.client.getHandleError(resp)
		return false
	}
	result, err := p.client.getHandleResponse(resp)
	if err != nil {
		p.err = err
		return false
	}
	p.current = result
	return true
}

// PageResponse returns the current UnresolvedDependenciesGetResponse page.
func (p *UnresolvedDependenciesGetPager) PageResponse() UnresolvedDependenciesGetResponse {
	return p.current
}
