//go:build go1.16
// +build go1.16

// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

package armresourcemover

import (
	"context"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore"
	"net/http"
)

// MoveCollectionsClientBulkRemovePoller provides polling facilities until the operation reaches a terminal state.
type MoveCollectionsClientBulkRemovePoller struct {
	pt *azcore.Poller
}

// Done returns true if the LRO has reached a terminal state.
func (p *MoveCollectionsClientBulkRemovePoller) Done() bool {
	return p.pt.Done()
}

// Poll fetches the latest state of the LRO.  It returns an HTTP response or error.
// If the LRO has completed successfully, the poller's state is updated and the HTTP
// response is returned.
// If the LRO has completed with failure or was cancelled, the poller's state is
// updated and the error is returned.
// If the LRO has not reached a terminal state, the poller's state is updated and
// the latest HTTP response is returned.
// If Poll fails, the poller's state is unmodified and the error is returned.
// Calling Poll on an LRO that has reached a terminal state will return the final
// HTTP response or error.
func (p *MoveCollectionsClientBulkRemovePoller) Poll(ctx context.Context) (*http.Response, error) {
	return p.pt.Poll(ctx)
}

// FinalResponse performs a final GET to the service and returns the final response
// for the polling operation. If there is an error performing the final GET then an error is returned.
// If the final GET succeeded then the final MoveCollectionsClientBulkRemoveResponse will be returned.
func (p *MoveCollectionsClientBulkRemovePoller) FinalResponse(ctx context.Context) (MoveCollectionsClientBulkRemoveResponse, error) {
	respType := MoveCollectionsClientBulkRemoveResponse{}
	resp, err := p.pt.FinalResponse(ctx, &respType.OperationStatus)
	if err != nil {
		return MoveCollectionsClientBulkRemoveResponse{}, err
	}
	respType.RawResponse = resp
	return respType, nil
}

// ResumeToken returns a value representing the poller that can be used to resume
// the LRO at a later time. ResumeTokens are unique per service operation.
func (p *MoveCollectionsClientBulkRemovePoller) ResumeToken() (string, error) {
	return p.pt.ResumeToken()
}

// MoveCollectionsClientCommitPoller provides polling facilities until the operation reaches a terminal state.
type MoveCollectionsClientCommitPoller struct {
	pt *azcore.Poller
}

// Done returns true if the LRO has reached a terminal state.
func (p *MoveCollectionsClientCommitPoller) Done() bool {
	return p.pt.Done()
}

// Poll fetches the latest state of the LRO.  It returns an HTTP response or error.
// If the LRO has completed successfully, the poller's state is updated and the HTTP
// response is returned.
// If the LRO has completed with failure or was cancelled, the poller's state is
// updated and the error is returned.
// If the LRO has not reached a terminal state, the poller's state is updated and
// the latest HTTP response is returned.
// If Poll fails, the poller's state is unmodified and the error is returned.
// Calling Poll on an LRO that has reached a terminal state will return the final
// HTTP response or error.
func (p *MoveCollectionsClientCommitPoller) Poll(ctx context.Context) (*http.Response, error) {
	return p.pt.Poll(ctx)
}

// FinalResponse performs a final GET to the service and returns the final response
// for the polling operation. If there is an error performing the final GET then an error is returned.
// If the final GET succeeded then the final MoveCollectionsClientCommitResponse will be returned.
func (p *MoveCollectionsClientCommitPoller) FinalResponse(ctx context.Context) (MoveCollectionsClientCommitResponse, error) {
	respType := MoveCollectionsClientCommitResponse{}
	resp, err := p.pt.FinalResponse(ctx, &respType.OperationStatus)
	if err != nil {
		return MoveCollectionsClientCommitResponse{}, err
	}
	respType.RawResponse = resp
	return respType, nil
}

// ResumeToken returns a value representing the poller that can be used to resume
// the LRO at a later time. ResumeTokens are unique per service operation.
func (p *MoveCollectionsClientCommitPoller) ResumeToken() (string, error) {
	return p.pt.ResumeToken()
}

// MoveCollectionsClientDeletePoller provides polling facilities until the operation reaches a terminal state.
type MoveCollectionsClientDeletePoller struct {
	pt *azcore.Poller
}

// Done returns true if the LRO has reached a terminal state.
func (p *MoveCollectionsClientDeletePoller) Done() bool {
	return p.pt.Done()
}

// Poll fetches the latest state of the LRO.  It returns an HTTP response or error.
// If the LRO has completed successfully, the poller's state is updated and the HTTP
// response is returned.
// If the LRO has completed with failure or was cancelled, the poller's state is
// updated and the error is returned.
// If the LRO has not reached a terminal state, the poller's state is updated and
// the latest HTTP response is returned.
// If Poll fails, the poller's state is unmodified and the error is returned.
// Calling Poll on an LRO that has reached a terminal state will return the final
// HTTP response or error.
func (p *MoveCollectionsClientDeletePoller) Poll(ctx context.Context) (*http.Response, error) {
	return p.pt.Poll(ctx)
}

// FinalResponse performs a final GET to the service and returns the final response
// for the polling operation. If there is an error performing the final GET then an error is returned.
// If the final GET succeeded then the final MoveCollectionsClientDeleteResponse will be returned.
func (p *MoveCollectionsClientDeletePoller) FinalResponse(ctx context.Context) (MoveCollectionsClientDeleteResponse, error) {
	respType := MoveCollectionsClientDeleteResponse{}
	resp, err := p.pt.FinalResponse(ctx, &respType.OperationStatus)
	if err != nil {
		return MoveCollectionsClientDeleteResponse{}, err
	}
	respType.RawResponse = resp
	return respType, nil
}

// ResumeToken returns a value representing the poller that can be used to resume
// the LRO at a later time. ResumeTokens are unique per service operation.
func (p *MoveCollectionsClientDeletePoller) ResumeToken() (string, error) {
	return p.pt.ResumeToken()
}

// MoveCollectionsClientDiscardPoller provides polling facilities until the operation reaches a terminal state.
type MoveCollectionsClientDiscardPoller struct {
	pt *azcore.Poller
}

// Done returns true if the LRO has reached a terminal state.
func (p *MoveCollectionsClientDiscardPoller) Done() bool {
	return p.pt.Done()
}

// Poll fetches the latest state of the LRO.  It returns an HTTP response or error.
// If the LRO has completed successfully, the poller's state is updated and the HTTP
// response is returned.
// If the LRO has completed with failure or was cancelled, the poller's state is
// updated and the error is returned.
// If the LRO has not reached a terminal state, the poller's state is updated and
// the latest HTTP response is returned.
// If Poll fails, the poller's state is unmodified and the error is returned.
// Calling Poll on an LRO that has reached a terminal state will return the final
// HTTP response or error.
func (p *MoveCollectionsClientDiscardPoller) Poll(ctx context.Context) (*http.Response, error) {
	return p.pt.Poll(ctx)
}

// FinalResponse performs a final GET to the service and returns the final response
// for the polling operation. If there is an error performing the final GET then an error is returned.
// If the final GET succeeded then the final MoveCollectionsClientDiscardResponse will be returned.
func (p *MoveCollectionsClientDiscardPoller) FinalResponse(ctx context.Context) (MoveCollectionsClientDiscardResponse, error) {
	respType := MoveCollectionsClientDiscardResponse{}
	resp, err := p.pt.FinalResponse(ctx, &respType.OperationStatus)
	if err != nil {
		return MoveCollectionsClientDiscardResponse{}, err
	}
	respType.RawResponse = resp
	return respType, nil
}

// ResumeToken returns a value representing the poller that can be used to resume
// the LRO at a later time. ResumeTokens are unique per service operation.
func (p *MoveCollectionsClientDiscardPoller) ResumeToken() (string, error) {
	return p.pt.ResumeToken()
}

// MoveCollectionsClientInitiateMovePoller provides polling facilities until the operation reaches a terminal state.
type MoveCollectionsClientInitiateMovePoller struct {
	pt *azcore.Poller
}

// Done returns true if the LRO has reached a terminal state.
func (p *MoveCollectionsClientInitiateMovePoller) Done() bool {
	return p.pt.Done()
}

// Poll fetches the latest state of the LRO.  It returns an HTTP response or error.
// If the LRO has completed successfully, the poller's state is updated and the HTTP
// response is returned.
// If the LRO has completed with failure or was cancelled, the poller's state is
// updated and the error is returned.
// If the LRO has not reached a terminal state, the poller's state is updated and
// the latest HTTP response is returned.
// If Poll fails, the poller's state is unmodified and the error is returned.
// Calling Poll on an LRO that has reached a terminal state will return the final
// HTTP response or error.
func (p *MoveCollectionsClientInitiateMovePoller) Poll(ctx context.Context) (*http.Response, error) {
	return p.pt.Poll(ctx)
}

// FinalResponse performs a final GET to the service and returns the final response
// for the polling operation. If there is an error performing the final GET then an error is returned.
// If the final GET succeeded then the final MoveCollectionsClientInitiateMoveResponse will be returned.
func (p *MoveCollectionsClientInitiateMovePoller) FinalResponse(ctx context.Context) (MoveCollectionsClientInitiateMoveResponse, error) {
	respType := MoveCollectionsClientInitiateMoveResponse{}
	resp, err := p.pt.FinalResponse(ctx, &respType.OperationStatus)
	if err != nil {
		return MoveCollectionsClientInitiateMoveResponse{}, err
	}
	respType.RawResponse = resp
	return respType, nil
}

// ResumeToken returns a value representing the poller that can be used to resume
// the LRO at a later time. ResumeTokens are unique per service operation.
func (p *MoveCollectionsClientInitiateMovePoller) ResumeToken() (string, error) {
	return p.pt.ResumeToken()
}

// MoveCollectionsClientPreparePoller provides polling facilities until the operation reaches a terminal state.
type MoveCollectionsClientPreparePoller struct {
	pt *azcore.Poller
}

// Done returns true if the LRO has reached a terminal state.
func (p *MoveCollectionsClientPreparePoller) Done() bool {
	return p.pt.Done()
}

// Poll fetches the latest state of the LRO.  It returns an HTTP response or error.
// If the LRO has completed successfully, the poller's state is updated and the HTTP
// response is returned.
// If the LRO has completed with failure or was cancelled, the poller's state is
// updated and the error is returned.
// If the LRO has not reached a terminal state, the poller's state is updated and
// the latest HTTP response is returned.
// If Poll fails, the poller's state is unmodified and the error is returned.
// Calling Poll on an LRO that has reached a terminal state will return the final
// HTTP response or error.
func (p *MoveCollectionsClientPreparePoller) Poll(ctx context.Context) (*http.Response, error) {
	return p.pt.Poll(ctx)
}

// FinalResponse performs a final GET to the service and returns the final response
// for the polling operation. If there is an error performing the final GET then an error is returned.
// If the final GET succeeded then the final MoveCollectionsClientPrepareResponse will be returned.
func (p *MoveCollectionsClientPreparePoller) FinalResponse(ctx context.Context) (MoveCollectionsClientPrepareResponse, error) {
	respType := MoveCollectionsClientPrepareResponse{}
	resp, err := p.pt.FinalResponse(ctx, &respType.OperationStatus)
	if err != nil {
		return MoveCollectionsClientPrepareResponse{}, err
	}
	respType.RawResponse = resp
	return respType, nil
}

// ResumeToken returns a value representing the poller that can be used to resume
// the LRO at a later time. ResumeTokens are unique per service operation.
func (p *MoveCollectionsClientPreparePoller) ResumeToken() (string, error) {
	return p.pt.ResumeToken()
}

// MoveCollectionsClientResolveDependenciesPoller provides polling facilities until the operation reaches a terminal state.
type MoveCollectionsClientResolveDependenciesPoller struct {
	pt *azcore.Poller
}

// Done returns true if the LRO has reached a terminal state.
func (p *MoveCollectionsClientResolveDependenciesPoller) Done() bool {
	return p.pt.Done()
}

// Poll fetches the latest state of the LRO.  It returns an HTTP response or error.
// If the LRO has completed successfully, the poller's state is updated and the HTTP
// response is returned.
// If the LRO has completed with failure or was cancelled, the poller's state is
// updated and the error is returned.
// If the LRO has not reached a terminal state, the poller's state is updated and
// the latest HTTP response is returned.
// If Poll fails, the poller's state is unmodified and the error is returned.
// Calling Poll on an LRO that has reached a terminal state will return the final
// HTTP response or error.
func (p *MoveCollectionsClientResolveDependenciesPoller) Poll(ctx context.Context) (*http.Response, error) {
	return p.pt.Poll(ctx)
}

// FinalResponse performs a final GET to the service and returns the final response
// for the polling operation. If there is an error performing the final GET then an error is returned.
// If the final GET succeeded then the final MoveCollectionsClientResolveDependenciesResponse will be returned.
func (p *MoveCollectionsClientResolveDependenciesPoller) FinalResponse(ctx context.Context) (MoveCollectionsClientResolveDependenciesResponse, error) {
	respType := MoveCollectionsClientResolveDependenciesResponse{}
	resp, err := p.pt.FinalResponse(ctx, &respType.OperationStatus)
	if err != nil {
		return MoveCollectionsClientResolveDependenciesResponse{}, err
	}
	respType.RawResponse = resp
	return respType, nil
}

// ResumeToken returns a value representing the poller that can be used to resume
// the LRO at a later time. ResumeTokens are unique per service operation.
func (p *MoveCollectionsClientResolveDependenciesPoller) ResumeToken() (string, error) {
	return p.pt.ResumeToken()
}

// MoveResourcesClientCreatePoller provides polling facilities until the operation reaches a terminal state.
type MoveResourcesClientCreatePoller struct {
	pt *azcore.Poller
}

// Done returns true if the LRO has reached a terminal state.
func (p *MoveResourcesClientCreatePoller) Done() bool {
	return p.pt.Done()
}

// Poll fetches the latest state of the LRO.  It returns an HTTP response or error.
// If the LRO has completed successfully, the poller's state is updated and the HTTP
// response is returned.
// If the LRO has completed with failure or was cancelled, the poller's state is
// updated and the error is returned.
// If the LRO has not reached a terminal state, the poller's state is updated and
// the latest HTTP response is returned.
// If Poll fails, the poller's state is unmodified and the error is returned.
// Calling Poll on an LRO that has reached a terminal state will return the final
// HTTP response or error.
func (p *MoveResourcesClientCreatePoller) Poll(ctx context.Context) (*http.Response, error) {
	return p.pt.Poll(ctx)
}

// FinalResponse performs a final GET to the service and returns the final response
// for the polling operation. If there is an error performing the final GET then an error is returned.
// If the final GET succeeded then the final MoveResourcesClientCreateResponse will be returned.
func (p *MoveResourcesClientCreatePoller) FinalResponse(ctx context.Context) (MoveResourcesClientCreateResponse, error) {
	respType := MoveResourcesClientCreateResponse{}
	resp, err := p.pt.FinalResponse(ctx, &respType.MoveResource)
	if err != nil {
		return MoveResourcesClientCreateResponse{}, err
	}
	respType.RawResponse = resp
	return respType, nil
}

// ResumeToken returns a value representing the poller that can be used to resume
// the LRO at a later time. ResumeTokens are unique per service operation.
func (p *MoveResourcesClientCreatePoller) ResumeToken() (string, error) {
	return p.pt.ResumeToken()
}

// MoveResourcesClientDeletePoller provides polling facilities until the operation reaches a terminal state.
type MoveResourcesClientDeletePoller struct {
	pt *azcore.Poller
}

// Done returns true if the LRO has reached a terminal state.
func (p *MoveResourcesClientDeletePoller) Done() bool {
	return p.pt.Done()
}

// Poll fetches the latest state of the LRO.  It returns an HTTP response or error.
// If the LRO has completed successfully, the poller's state is updated and the HTTP
// response is returned.
// If the LRO has completed with failure or was cancelled, the poller's state is
// updated and the error is returned.
// If the LRO has not reached a terminal state, the poller's state is updated and
// the latest HTTP response is returned.
// If Poll fails, the poller's state is unmodified and the error is returned.
// Calling Poll on an LRO that has reached a terminal state will return the final
// HTTP response or error.
func (p *MoveResourcesClientDeletePoller) Poll(ctx context.Context) (*http.Response, error) {
	return p.pt.Poll(ctx)
}

// FinalResponse performs a final GET to the service and returns the final response
// for the polling operation. If there is an error performing the final GET then an error is returned.
// If the final GET succeeded then the final MoveResourcesClientDeleteResponse will be returned.
func (p *MoveResourcesClientDeletePoller) FinalResponse(ctx context.Context) (MoveResourcesClientDeleteResponse, error) {
	respType := MoveResourcesClientDeleteResponse{}
	resp, err := p.pt.FinalResponse(ctx, &respType.OperationStatus)
	if err != nil {
		return MoveResourcesClientDeleteResponse{}, err
	}
	respType.RawResponse = resp
	return respType, nil
}

// ResumeToken returns a value representing the poller that can be used to resume
// the LRO at a later time. ResumeTokens are unique per service operation.
func (p *MoveResourcesClientDeletePoller) ResumeToken() (string, error) {
	return p.pt.ResumeToken()
}
