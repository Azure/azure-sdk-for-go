// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator. DO NOT EDIT.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

package fake

import (
	"context"
	"errors"
	"fmt"
	azfake "github.com/Azure/azure-sdk-for-go/sdk/azcore/fake"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/fake/server"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/runtime"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/to"
	"github.com/Azure/azure-sdk-for-go/sdk/resourcemanager/resources/armdeploymentstacks"
	"net/http"
	"net/url"
	"regexp"
	"strconv"
)

// DeploymentStacksServer is a fake server for instances of the armdeployments.DeploymentStacksClient type.
type DeploymentStacksServer struct {
	// BeginCreateOrUpdateAtManagementGroup is the fake for method DeploymentStacksClient.BeginCreateOrUpdateAtManagementGroup
	// HTTP status codes to indicate success: http.StatusOK, http.StatusCreated
	BeginCreateOrUpdateAtManagementGroup func(ctx context.Context, managementGroupID string, deploymentStackName string, deploymentStack armdeployments.DeploymentStack, options *armdeployments.DeploymentStacksClientBeginCreateOrUpdateAtManagementGroupOptions) (resp azfake.PollerResponder[armdeployments.DeploymentStacksClientCreateOrUpdateAtManagementGroupResponse], errResp azfake.ErrorResponder)

	// BeginCreateOrUpdateAtResourceGroup is the fake for method DeploymentStacksClient.BeginCreateOrUpdateAtResourceGroup
	// HTTP status codes to indicate success: http.StatusOK, http.StatusCreated
	BeginCreateOrUpdateAtResourceGroup func(ctx context.Context, resourceGroupName string, deploymentStackName string, deploymentStack armdeployments.DeploymentStack, options *armdeployments.DeploymentStacksClientBeginCreateOrUpdateAtResourceGroupOptions) (resp azfake.PollerResponder[armdeployments.DeploymentStacksClientCreateOrUpdateAtResourceGroupResponse], errResp azfake.ErrorResponder)

	// BeginCreateOrUpdateAtSubscription is the fake for method DeploymentStacksClient.BeginCreateOrUpdateAtSubscription
	// HTTP status codes to indicate success: http.StatusOK, http.StatusCreated
	BeginCreateOrUpdateAtSubscription func(ctx context.Context, deploymentStackName string, deploymentStack armdeployments.DeploymentStack, options *armdeployments.DeploymentStacksClientBeginCreateOrUpdateAtSubscriptionOptions) (resp azfake.PollerResponder[armdeployments.DeploymentStacksClientCreateOrUpdateAtSubscriptionResponse], errResp azfake.ErrorResponder)

	// BeginDeleteAtManagementGroup is the fake for method DeploymentStacksClient.BeginDeleteAtManagementGroup
	// HTTP status codes to indicate success: http.StatusOK, http.StatusAccepted, http.StatusNoContent
	BeginDeleteAtManagementGroup func(ctx context.Context, managementGroupID string, deploymentStackName string, options *armdeployments.DeploymentStacksClientBeginDeleteAtManagementGroupOptions) (resp azfake.PollerResponder[armdeployments.DeploymentStacksClientDeleteAtManagementGroupResponse], errResp azfake.ErrorResponder)

	// BeginDeleteAtResourceGroup is the fake for method DeploymentStacksClient.BeginDeleteAtResourceGroup
	// HTTP status codes to indicate success: http.StatusOK, http.StatusAccepted, http.StatusNoContent
	BeginDeleteAtResourceGroup func(ctx context.Context, resourceGroupName string, deploymentStackName string, options *armdeployments.DeploymentStacksClientBeginDeleteAtResourceGroupOptions) (resp azfake.PollerResponder[armdeployments.DeploymentStacksClientDeleteAtResourceGroupResponse], errResp azfake.ErrorResponder)

	// BeginDeleteAtSubscription is the fake for method DeploymentStacksClient.BeginDeleteAtSubscription
	// HTTP status codes to indicate success: http.StatusOK, http.StatusAccepted, http.StatusNoContent
	BeginDeleteAtSubscription func(ctx context.Context, deploymentStackName string, options *armdeployments.DeploymentStacksClientBeginDeleteAtSubscriptionOptions) (resp azfake.PollerResponder[armdeployments.DeploymentStacksClientDeleteAtSubscriptionResponse], errResp azfake.ErrorResponder)

	// ExportTemplateAtManagementGroup is the fake for method DeploymentStacksClient.ExportTemplateAtManagementGroup
	// HTTP status codes to indicate success: http.StatusOK
	ExportTemplateAtManagementGroup func(ctx context.Context, managementGroupID string, deploymentStackName string, options *armdeployments.DeploymentStacksClientExportTemplateAtManagementGroupOptions) (resp azfake.Responder[armdeployments.DeploymentStacksClientExportTemplateAtManagementGroupResponse], errResp azfake.ErrorResponder)

	// ExportTemplateAtResourceGroup is the fake for method DeploymentStacksClient.ExportTemplateAtResourceGroup
	// HTTP status codes to indicate success: http.StatusOK
	ExportTemplateAtResourceGroup func(ctx context.Context, resourceGroupName string, deploymentStackName string, options *armdeployments.DeploymentStacksClientExportTemplateAtResourceGroupOptions) (resp azfake.Responder[armdeployments.DeploymentStacksClientExportTemplateAtResourceGroupResponse], errResp azfake.ErrorResponder)

	// ExportTemplateAtSubscription is the fake for method DeploymentStacksClient.ExportTemplateAtSubscription
	// HTTP status codes to indicate success: http.StatusOK
	ExportTemplateAtSubscription func(ctx context.Context, deploymentStackName string, options *armdeployments.DeploymentStacksClientExportTemplateAtSubscriptionOptions) (resp azfake.Responder[armdeployments.DeploymentStacksClientExportTemplateAtSubscriptionResponse], errResp azfake.ErrorResponder)

	// GetAtManagementGroup is the fake for method DeploymentStacksClient.GetAtManagementGroup
	// HTTP status codes to indicate success: http.StatusOK
	GetAtManagementGroup func(ctx context.Context, managementGroupID string, deploymentStackName string, options *armdeployments.DeploymentStacksClientGetAtManagementGroupOptions) (resp azfake.Responder[armdeployments.DeploymentStacksClientGetAtManagementGroupResponse], errResp azfake.ErrorResponder)

	// GetAtResourceGroup is the fake for method DeploymentStacksClient.GetAtResourceGroup
	// HTTP status codes to indicate success: http.StatusOK
	GetAtResourceGroup func(ctx context.Context, resourceGroupName string, deploymentStackName string, options *armdeployments.DeploymentStacksClientGetAtResourceGroupOptions) (resp azfake.Responder[armdeployments.DeploymentStacksClientGetAtResourceGroupResponse], errResp azfake.ErrorResponder)

	// GetAtSubscription is the fake for method DeploymentStacksClient.GetAtSubscription
	// HTTP status codes to indicate success: http.StatusOK
	GetAtSubscription func(ctx context.Context, deploymentStackName string, options *armdeployments.DeploymentStacksClientGetAtSubscriptionOptions) (resp azfake.Responder[armdeployments.DeploymentStacksClientGetAtSubscriptionResponse], errResp azfake.ErrorResponder)

	// NewListAtManagementGroupPager is the fake for method DeploymentStacksClient.NewListAtManagementGroupPager
	// HTTP status codes to indicate success: http.StatusOK
	NewListAtManagementGroupPager func(managementGroupID string, options *armdeployments.DeploymentStacksClientListAtManagementGroupOptions) (resp azfake.PagerResponder[armdeployments.DeploymentStacksClientListAtManagementGroupResponse])

	// NewListAtResourceGroupPager is the fake for method DeploymentStacksClient.NewListAtResourceGroupPager
	// HTTP status codes to indicate success: http.StatusOK
	NewListAtResourceGroupPager func(resourceGroupName string, options *armdeployments.DeploymentStacksClientListAtResourceGroupOptions) (resp azfake.PagerResponder[armdeployments.DeploymentStacksClientListAtResourceGroupResponse])

	// NewListAtSubscriptionPager is the fake for method DeploymentStacksClient.NewListAtSubscriptionPager
	// HTTP status codes to indicate success: http.StatusOK
	NewListAtSubscriptionPager func(options *armdeployments.DeploymentStacksClientListAtSubscriptionOptions) (resp azfake.PagerResponder[armdeployments.DeploymentStacksClientListAtSubscriptionResponse])

	// BeginValidateStackAtManagementGroup is the fake for method DeploymentStacksClient.BeginValidateStackAtManagementGroup
	// HTTP status codes to indicate success: http.StatusOK, http.StatusAccepted, http.StatusBadRequest
	BeginValidateStackAtManagementGroup func(ctx context.Context, managementGroupID string, deploymentStackName string, deploymentStack armdeployments.DeploymentStack, options *armdeployments.DeploymentStacksClientBeginValidateStackAtManagementGroupOptions) (resp azfake.PollerResponder[armdeployments.DeploymentStacksClientValidateStackAtManagementGroupResponse], errResp azfake.ErrorResponder)

	// BeginValidateStackAtResourceGroup is the fake for method DeploymentStacksClient.BeginValidateStackAtResourceGroup
	// HTTP status codes to indicate success: http.StatusOK, http.StatusAccepted, http.StatusBadRequest
	BeginValidateStackAtResourceGroup func(ctx context.Context, resourceGroupName string, deploymentStackName string, deploymentStack armdeployments.DeploymentStack, options *armdeployments.DeploymentStacksClientBeginValidateStackAtResourceGroupOptions) (resp azfake.PollerResponder[armdeployments.DeploymentStacksClientValidateStackAtResourceGroupResponse], errResp azfake.ErrorResponder)

	// BeginValidateStackAtSubscription is the fake for method DeploymentStacksClient.BeginValidateStackAtSubscription
	// HTTP status codes to indicate success: http.StatusOK, http.StatusAccepted, http.StatusBadRequest
	BeginValidateStackAtSubscription func(ctx context.Context, deploymentStackName string, deploymentStack armdeployments.DeploymentStack, options *armdeployments.DeploymentStacksClientBeginValidateStackAtSubscriptionOptions) (resp azfake.PollerResponder[armdeployments.DeploymentStacksClientValidateStackAtSubscriptionResponse], errResp azfake.ErrorResponder)
}

// NewDeploymentStacksServerTransport creates a new instance of DeploymentStacksServerTransport with the provided implementation.
// The returned DeploymentStacksServerTransport instance is connected to an instance of armdeployments.DeploymentStacksClient via the
// azcore.ClientOptions.Transporter field in the client's constructor parameters.
func NewDeploymentStacksServerTransport(srv *DeploymentStacksServer) *DeploymentStacksServerTransport {
	return &DeploymentStacksServerTransport{
		srv:                                  srv,
		beginCreateOrUpdateAtManagementGroup: newTracker[azfake.PollerResponder[armdeployments.DeploymentStacksClientCreateOrUpdateAtManagementGroupResponse]](),
		beginCreateOrUpdateAtResourceGroup:   newTracker[azfake.PollerResponder[armdeployments.DeploymentStacksClientCreateOrUpdateAtResourceGroupResponse]](),
		beginCreateOrUpdateAtSubscription:    newTracker[azfake.PollerResponder[armdeployments.DeploymentStacksClientCreateOrUpdateAtSubscriptionResponse]](),
		beginDeleteAtManagementGroup:         newTracker[azfake.PollerResponder[armdeployments.DeploymentStacksClientDeleteAtManagementGroupResponse]](),
		beginDeleteAtResourceGroup:           newTracker[azfake.PollerResponder[armdeployments.DeploymentStacksClientDeleteAtResourceGroupResponse]](),
		beginDeleteAtSubscription:            newTracker[azfake.PollerResponder[armdeployments.DeploymentStacksClientDeleteAtSubscriptionResponse]](),
		newListAtManagementGroupPager:        newTracker[azfake.PagerResponder[armdeployments.DeploymentStacksClientListAtManagementGroupResponse]](),
		newListAtResourceGroupPager:          newTracker[azfake.PagerResponder[armdeployments.DeploymentStacksClientListAtResourceGroupResponse]](),
		newListAtSubscriptionPager:           newTracker[azfake.PagerResponder[armdeployments.DeploymentStacksClientListAtSubscriptionResponse]](),
		beginValidateStackAtManagementGroup:  newTracker[azfake.PollerResponder[armdeployments.DeploymentStacksClientValidateStackAtManagementGroupResponse]](),
		beginValidateStackAtResourceGroup:    newTracker[azfake.PollerResponder[armdeployments.DeploymentStacksClientValidateStackAtResourceGroupResponse]](),
		beginValidateStackAtSubscription:     newTracker[azfake.PollerResponder[armdeployments.DeploymentStacksClientValidateStackAtSubscriptionResponse]](),
	}
}

// DeploymentStacksServerTransport connects instances of armdeployments.DeploymentStacksClient to instances of DeploymentStacksServer.
// Don't use this type directly, use NewDeploymentStacksServerTransport instead.
type DeploymentStacksServerTransport struct {
	srv                                  *DeploymentStacksServer
	beginCreateOrUpdateAtManagementGroup *tracker[azfake.PollerResponder[armdeployments.DeploymentStacksClientCreateOrUpdateAtManagementGroupResponse]]
	beginCreateOrUpdateAtResourceGroup   *tracker[azfake.PollerResponder[armdeployments.DeploymentStacksClientCreateOrUpdateAtResourceGroupResponse]]
	beginCreateOrUpdateAtSubscription    *tracker[azfake.PollerResponder[armdeployments.DeploymentStacksClientCreateOrUpdateAtSubscriptionResponse]]
	beginDeleteAtManagementGroup         *tracker[azfake.PollerResponder[armdeployments.DeploymentStacksClientDeleteAtManagementGroupResponse]]
	beginDeleteAtResourceGroup           *tracker[azfake.PollerResponder[armdeployments.DeploymentStacksClientDeleteAtResourceGroupResponse]]
	beginDeleteAtSubscription            *tracker[azfake.PollerResponder[armdeployments.DeploymentStacksClientDeleteAtSubscriptionResponse]]
	newListAtManagementGroupPager        *tracker[azfake.PagerResponder[armdeployments.DeploymentStacksClientListAtManagementGroupResponse]]
	newListAtResourceGroupPager          *tracker[azfake.PagerResponder[armdeployments.DeploymentStacksClientListAtResourceGroupResponse]]
	newListAtSubscriptionPager           *tracker[azfake.PagerResponder[armdeployments.DeploymentStacksClientListAtSubscriptionResponse]]
	beginValidateStackAtManagementGroup  *tracker[azfake.PollerResponder[armdeployments.DeploymentStacksClientValidateStackAtManagementGroupResponse]]
	beginValidateStackAtResourceGroup    *tracker[azfake.PollerResponder[armdeployments.DeploymentStacksClientValidateStackAtResourceGroupResponse]]
	beginValidateStackAtSubscription     *tracker[azfake.PollerResponder[armdeployments.DeploymentStacksClientValidateStackAtSubscriptionResponse]]
}

// Do implements the policy.Transporter interface for DeploymentStacksServerTransport.
func (d *DeploymentStacksServerTransport) Do(req *http.Request) (*http.Response, error) {
	rawMethod := req.Context().Value(runtime.CtxAPINameKey{})
	method, ok := rawMethod.(string)
	if !ok {
		return nil, nonRetriableError{errors.New("unable to dispatch request, missing value for CtxAPINameKey")}
	}

	return d.dispatchToMethodFake(req, method)
}

func (d *DeploymentStacksServerTransport) dispatchToMethodFake(req *http.Request, method string) (*http.Response, error) {
	resultChan := make(chan result)
	defer close(resultChan)

	go func() {
		var intercepted bool
		var res result
		if deploymentStacksServerTransportInterceptor != nil {
			res.resp, res.err, intercepted = deploymentStacksServerTransportInterceptor.Do(req)
		}
		if !intercepted {
			switch method {
			case "DeploymentStacksClient.BeginCreateOrUpdateAtManagementGroup":
				res.resp, res.err = d.dispatchBeginCreateOrUpdateAtManagementGroup(req)
			case "DeploymentStacksClient.BeginCreateOrUpdateAtResourceGroup":
				res.resp, res.err = d.dispatchBeginCreateOrUpdateAtResourceGroup(req)
			case "DeploymentStacksClient.BeginCreateOrUpdateAtSubscription":
				res.resp, res.err = d.dispatchBeginCreateOrUpdateAtSubscription(req)
			case "DeploymentStacksClient.BeginDeleteAtManagementGroup":
				res.resp, res.err = d.dispatchBeginDeleteAtManagementGroup(req)
			case "DeploymentStacksClient.BeginDeleteAtResourceGroup":
				res.resp, res.err = d.dispatchBeginDeleteAtResourceGroup(req)
			case "DeploymentStacksClient.BeginDeleteAtSubscription":
				res.resp, res.err = d.dispatchBeginDeleteAtSubscription(req)
			case "DeploymentStacksClient.ExportTemplateAtManagementGroup":
				res.resp, res.err = d.dispatchExportTemplateAtManagementGroup(req)
			case "DeploymentStacksClient.ExportTemplateAtResourceGroup":
				res.resp, res.err = d.dispatchExportTemplateAtResourceGroup(req)
			case "DeploymentStacksClient.ExportTemplateAtSubscription":
				res.resp, res.err = d.dispatchExportTemplateAtSubscription(req)
			case "DeploymentStacksClient.GetAtManagementGroup":
				res.resp, res.err = d.dispatchGetAtManagementGroup(req)
			case "DeploymentStacksClient.GetAtResourceGroup":
				res.resp, res.err = d.dispatchGetAtResourceGroup(req)
			case "DeploymentStacksClient.GetAtSubscription":
				res.resp, res.err = d.dispatchGetAtSubscription(req)
			case "DeploymentStacksClient.NewListAtManagementGroupPager":
				res.resp, res.err = d.dispatchNewListAtManagementGroupPager(req)
			case "DeploymentStacksClient.NewListAtResourceGroupPager":
				res.resp, res.err = d.dispatchNewListAtResourceGroupPager(req)
			case "DeploymentStacksClient.NewListAtSubscriptionPager":
				res.resp, res.err = d.dispatchNewListAtSubscriptionPager(req)
			case "DeploymentStacksClient.BeginValidateStackAtManagementGroup":
				res.resp, res.err = d.dispatchBeginValidateStackAtManagementGroup(req)
			case "DeploymentStacksClient.BeginValidateStackAtResourceGroup":
				res.resp, res.err = d.dispatchBeginValidateStackAtResourceGroup(req)
			case "DeploymentStacksClient.BeginValidateStackAtSubscription":
				res.resp, res.err = d.dispatchBeginValidateStackAtSubscription(req)
			default:
				res.err = fmt.Errorf("unhandled API %s", method)
			}

		}
		select {
		case resultChan <- res:
		case <-req.Context().Done():
		}
	}()

	select {
	case <-req.Context().Done():
		return nil, req.Context().Err()
	case res := <-resultChan:
		return res.resp, res.err
	}
}

func (d *DeploymentStacksServerTransport) dispatchBeginCreateOrUpdateAtManagementGroup(req *http.Request) (*http.Response, error) {
	if d.srv.BeginCreateOrUpdateAtManagementGroup == nil {
		return nil, &nonRetriableError{errors.New("fake for method BeginCreateOrUpdateAtManagementGroup not implemented")}
	}
	beginCreateOrUpdateAtManagementGroup := d.beginCreateOrUpdateAtManagementGroup.get(req)
	if beginCreateOrUpdateAtManagementGroup == nil {
		const regexStr = `/providers/Microsoft\.Management/managementGroups/(?P<managementGroupId>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/providers/Microsoft\.Resources/deploymentStacks/(?P<deploymentStackName>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)`
		regex := regexp.MustCompile(regexStr)
		matches := regex.FindStringSubmatch(req.URL.EscapedPath())
		if len(matches) < 3 {
			return nil, fmt.Errorf("failed to parse path %s", req.URL.Path)
		}
		body, err := server.UnmarshalRequestAsJSON[armdeployments.DeploymentStack](req)
		if err != nil {
			return nil, err
		}
		managementGroupIDParam, err := url.PathUnescape(matches[regex.SubexpIndex("managementGroupId")])
		if err != nil {
			return nil, err
		}
		deploymentStackNameParam, err := url.PathUnescape(matches[regex.SubexpIndex("deploymentStackName")])
		if err != nil {
			return nil, err
		}
		respr, errRespr := d.srv.BeginCreateOrUpdateAtManagementGroup(req.Context(), managementGroupIDParam, deploymentStackNameParam, body, nil)
		if respErr := server.GetError(errRespr, req); respErr != nil {
			return nil, respErr
		}
		beginCreateOrUpdateAtManagementGroup = &respr
		d.beginCreateOrUpdateAtManagementGroup.add(req, beginCreateOrUpdateAtManagementGroup)
	}

	resp, err := server.PollerResponderNext(beginCreateOrUpdateAtManagementGroup, req)
	if err != nil {
		return nil, err
	}

	if !contains([]int{http.StatusOK, http.StatusCreated}, resp.StatusCode) {
		d.beginCreateOrUpdateAtManagementGroup.remove(req)
		return nil, &nonRetriableError{fmt.Errorf("unexpected status code %d. acceptable values are http.StatusOK, http.StatusCreated", resp.StatusCode)}
	}
	if !server.PollerResponderMore(beginCreateOrUpdateAtManagementGroup) {
		d.beginCreateOrUpdateAtManagementGroup.remove(req)
	}

	return resp, nil
}

func (d *DeploymentStacksServerTransport) dispatchBeginCreateOrUpdateAtResourceGroup(req *http.Request) (*http.Response, error) {
	if d.srv.BeginCreateOrUpdateAtResourceGroup == nil {
		return nil, &nonRetriableError{errors.New("fake for method BeginCreateOrUpdateAtResourceGroup not implemented")}
	}
	beginCreateOrUpdateAtResourceGroup := d.beginCreateOrUpdateAtResourceGroup.get(req)
	if beginCreateOrUpdateAtResourceGroup == nil {
		const regexStr = `/subscriptions/(?P<subscriptionId>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/resourceGroups/(?P<resourceGroupName>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/providers/Microsoft\.Resources/deploymentStacks/(?P<deploymentStackName>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)`
		regex := regexp.MustCompile(regexStr)
		matches := regex.FindStringSubmatch(req.URL.EscapedPath())
		if len(matches) < 4 {
			return nil, fmt.Errorf("failed to parse path %s", req.URL.Path)
		}
		body, err := server.UnmarshalRequestAsJSON[armdeployments.DeploymentStack](req)
		if err != nil {
			return nil, err
		}
		resourceGroupNameParam, err := url.PathUnescape(matches[regex.SubexpIndex("resourceGroupName")])
		if err != nil {
			return nil, err
		}
		deploymentStackNameParam, err := url.PathUnescape(matches[regex.SubexpIndex("deploymentStackName")])
		if err != nil {
			return nil, err
		}
		respr, errRespr := d.srv.BeginCreateOrUpdateAtResourceGroup(req.Context(), resourceGroupNameParam, deploymentStackNameParam, body, nil)
		if respErr := server.GetError(errRespr, req); respErr != nil {
			return nil, respErr
		}
		beginCreateOrUpdateAtResourceGroup = &respr
		d.beginCreateOrUpdateAtResourceGroup.add(req, beginCreateOrUpdateAtResourceGroup)
	}

	resp, err := server.PollerResponderNext(beginCreateOrUpdateAtResourceGroup, req)
	if err != nil {
		return nil, err
	}

	if !contains([]int{http.StatusOK, http.StatusCreated}, resp.StatusCode) {
		d.beginCreateOrUpdateAtResourceGroup.remove(req)
		return nil, &nonRetriableError{fmt.Errorf("unexpected status code %d. acceptable values are http.StatusOK, http.StatusCreated", resp.StatusCode)}
	}
	if !server.PollerResponderMore(beginCreateOrUpdateAtResourceGroup) {
		d.beginCreateOrUpdateAtResourceGroup.remove(req)
	}

	return resp, nil
}

func (d *DeploymentStacksServerTransport) dispatchBeginCreateOrUpdateAtSubscription(req *http.Request) (*http.Response, error) {
	if d.srv.BeginCreateOrUpdateAtSubscription == nil {
		return nil, &nonRetriableError{errors.New("fake for method BeginCreateOrUpdateAtSubscription not implemented")}
	}
	beginCreateOrUpdateAtSubscription := d.beginCreateOrUpdateAtSubscription.get(req)
	if beginCreateOrUpdateAtSubscription == nil {
		const regexStr = `/subscriptions/(?P<subscriptionId>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/providers/Microsoft\.Resources/deploymentStacks/(?P<deploymentStackName>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)`
		regex := regexp.MustCompile(regexStr)
		matches := regex.FindStringSubmatch(req.URL.EscapedPath())
		if len(matches) < 3 {
			return nil, fmt.Errorf("failed to parse path %s", req.URL.Path)
		}
		body, err := server.UnmarshalRequestAsJSON[armdeployments.DeploymentStack](req)
		if err != nil {
			return nil, err
		}
		deploymentStackNameParam, err := url.PathUnescape(matches[regex.SubexpIndex("deploymentStackName")])
		if err != nil {
			return nil, err
		}
		respr, errRespr := d.srv.BeginCreateOrUpdateAtSubscription(req.Context(), deploymentStackNameParam, body, nil)
		if respErr := server.GetError(errRespr, req); respErr != nil {
			return nil, respErr
		}
		beginCreateOrUpdateAtSubscription = &respr
		d.beginCreateOrUpdateAtSubscription.add(req, beginCreateOrUpdateAtSubscription)
	}

	resp, err := server.PollerResponderNext(beginCreateOrUpdateAtSubscription, req)
	if err != nil {
		return nil, err
	}

	if !contains([]int{http.StatusOK, http.StatusCreated}, resp.StatusCode) {
		d.beginCreateOrUpdateAtSubscription.remove(req)
		return nil, &nonRetriableError{fmt.Errorf("unexpected status code %d. acceptable values are http.StatusOK, http.StatusCreated", resp.StatusCode)}
	}
	if !server.PollerResponderMore(beginCreateOrUpdateAtSubscription) {
		d.beginCreateOrUpdateAtSubscription.remove(req)
	}

	return resp, nil
}

func (d *DeploymentStacksServerTransport) dispatchBeginDeleteAtManagementGroup(req *http.Request) (*http.Response, error) {
	if d.srv.BeginDeleteAtManagementGroup == nil {
		return nil, &nonRetriableError{errors.New("fake for method BeginDeleteAtManagementGroup not implemented")}
	}
	beginDeleteAtManagementGroup := d.beginDeleteAtManagementGroup.get(req)
	if beginDeleteAtManagementGroup == nil {
		const regexStr = `/providers/Microsoft\.Management/managementGroups/(?P<managementGroupId>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/providers/Microsoft\.Resources/deploymentStacks/(?P<deploymentStackName>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)`
		regex := regexp.MustCompile(regexStr)
		matches := regex.FindStringSubmatch(req.URL.EscapedPath())
		if len(matches) < 3 {
			return nil, fmt.Errorf("failed to parse path %s", req.URL.Path)
		}
		qp := req.URL.Query()
		managementGroupIDParam, err := url.PathUnescape(matches[regex.SubexpIndex("managementGroupId")])
		if err != nil {
			return nil, err
		}
		deploymentStackNameParam, err := url.PathUnescape(matches[regex.SubexpIndex("deploymentStackName")])
		if err != nil {
			return nil, err
		}
		unmanageActionResourcesUnescaped, err := url.QueryUnescape(qp.Get("unmanageAction.Resources"))
		if err != nil {
			return nil, err
		}
		unmanageActionResourcesParam := getOptional(armdeployments.UnmanageActionResourceMode(unmanageActionResourcesUnescaped))
		unmanageActionResourceGroupsUnescaped, err := url.QueryUnescape(qp.Get("unmanageAction.ResourceGroups"))
		if err != nil {
			return nil, err
		}
		unmanageActionResourceGroupsParam := getOptional(armdeployments.UnmanageActionResourceGroupMode(unmanageActionResourceGroupsUnescaped))
		unmanageActionManagementGroupsUnescaped, err := url.QueryUnescape(qp.Get("unmanageAction.ManagementGroups"))
		if err != nil {
			return nil, err
		}
		unmanageActionManagementGroupsParam := getOptional(armdeployments.UnmanageActionManagementGroupMode(unmanageActionManagementGroupsUnescaped))
		bypassStackOutOfSyncErrorUnescaped, err := url.QueryUnescape(qp.Get("bypassStackOutOfSyncError"))
		if err != nil {
			return nil, err
		}
		bypassStackOutOfSyncErrorParam, err := parseOptional(bypassStackOutOfSyncErrorUnescaped, strconv.ParseBool)
		if err != nil {
			return nil, err
		}
		var options *armdeployments.DeploymentStacksClientBeginDeleteAtManagementGroupOptions
		if unmanageActionResourcesParam != nil || unmanageActionResourceGroupsParam != nil || unmanageActionManagementGroupsParam != nil || bypassStackOutOfSyncErrorParam != nil {
			options = &armdeployments.DeploymentStacksClientBeginDeleteAtManagementGroupOptions{
				UnmanageActionResources:        unmanageActionResourcesParam,
				UnmanageActionResourceGroups:   unmanageActionResourceGroupsParam,
				UnmanageActionManagementGroups: unmanageActionManagementGroupsParam,
				BypassStackOutOfSyncError:      bypassStackOutOfSyncErrorParam,
			}
		}
		respr, errRespr := d.srv.BeginDeleteAtManagementGroup(req.Context(), managementGroupIDParam, deploymentStackNameParam, options)
		if respErr := server.GetError(errRespr, req); respErr != nil {
			return nil, respErr
		}
		beginDeleteAtManagementGroup = &respr
		d.beginDeleteAtManagementGroup.add(req, beginDeleteAtManagementGroup)
	}

	resp, err := server.PollerResponderNext(beginDeleteAtManagementGroup, req)
	if err != nil {
		return nil, err
	}

	if !contains([]int{http.StatusOK, http.StatusAccepted, http.StatusNoContent}, resp.StatusCode) {
		d.beginDeleteAtManagementGroup.remove(req)
		return nil, &nonRetriableError{fmt.Errorf("unexpected status code %d. acceptable values are http.StatusOK, http.StatusAccepted, http.StatusNoContent", resp.StatusCode)}
	}
	if !server.PollerResponderMore(beginDeleteAtManagementGroup) {
		d.beginDeleteAtManagementGroup.remove(req)
	}

	return resp, nil
}

func (d *DeploymentStacksServerTransport) dispatchBeginDeleteAtResourceGroup(req *http.Request) (*http.Response, error) {
	if d.srv.BeginDeleteAtResourceGroup == nil {
		return nil, &nonRetriableError{errors.New("fake for method BeginDeleteAtResourceGroup not implemented")}
	}
	beginDeleteAtResourceGroup := d.beginDeleteAtResourceGroup.get(req)
	if beginDeleteAtResourceGroup == nil {
		const regexStr = `/subscriptions/(?P<subscriptionId>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/resourceGroups/(?P<resourceGroupName>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/providers/Microsoft\.Resources/deploymentStacks/(?P<deploymentStackName>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)`
		regex := regexp.MustCompile(regexStr)
		matches := regex.FindStringSubmatch(req.URL.EscapedPath())
		if len(matches) < 4 {
			return nil, fmt.Errorf("failed to parse path %s", req.URL.Path)
		}
		qp := req.URL.Query()
		resourceGroupNameParam, err := url.PathUnescape(matches[regex.SubexpIndex("resourceGroupName")])
		if err != nil {
			return nil, err
		}
		deploymentStackNameParam, err := url.PathUnescape(matches[regex.SubexpIndex("deploymentStackName")])
		if err != nil {
			return nil, err
		}
		unmanageActionResourcesUnescaped, err := url.QueryUnescape(qp.Get("unmanageAction.Resources"))
		if err != nil {
			return nil, err
		}
		unmanageActionResourcesParam := getOptional(armdeployments.UnmanageActionResourceMode(unmanageActionResourcesUnescaped))
		unmanageActionResourceGroupsUnescaped, err := url.QueryUnescape(qp.Get("unmanageAction.ResourceGroups"))
		if err != nil {
			return nil, err
		}
		unmanageActionResourceGroupsParam := getOptional(armdeployments.UnmanageActionResourceGroupMode(unmanageActionResourceGroupsUnescaped))
		unmanageActionManagementGroupsUnescaped, err := url.QueryUnescape(qp.Get("unmanageAction.ManagementGroups"))
		if err != nil {
			return nil, err
		}
		unmanageActionManagementGroupsParam := getOptional(armdeployments.UnmanageActionManagementGroupMode(unmanageActionManagementGroupsUnescaped))
		bypassStackOutOfSyncErrorUnescaped, err := url.QueryUnescape(qp.Get("bypassStackOutOfSyncError"))
		if err != nil {
			return nil, err
		}
		bypassStackOutOfSyncErrorParam, err := parseOptional(bypassStackOutOfSyncErrorUnescaped, strconv.ParseBool)
		if err != nil {
			return nil, err
		}
		var options *armdeployments.DeploymentStacksClientBeginDeleteAtResourceGroupOptions
		if unmanageActionResourcesParam != nil || unmanageActionResourceGroupsParam != nil || unmanageActionManagementGroupsParam != nil || bypassStackOutOfSyncErrorParam != nil {
			options = &armdeployments.DeploymentStacksClientBeginDeleteAtResourceGroupOptions{
				UnmanageActionResources:        unmanageActionResourcesParam,
				UnmanageActionResourceGroups:   unmanageActionResourceGroupsParam,
				UnmanageActionManagementGroups: unmanageActionManagementGroupsParam,
				BypassStackOutOfSyncError:      bypassStackOutOfSyncErrorParam,
			}
		}
		respr, errRespr := d.srv.BeginDeleteAtResourceGroup(req.Context(), resourceGroupNameParam, deploymentStackNameParam, options)
		if respErr := server.GetError(errRespr, req); respErr != nil {
			return nil, respErr
		}
		beginDeleteAtResourceGroup = &respr
		d.beginDeleteAtResourceGroup.add(req, beginDeleteAtResourceGroup)
	}

	resp, err := server.PollerResponderNext(beginDeleteAtResourceGroup, req)
	if err != nil {
		return nil, err
	}

	if !contains([]int{http.StatusOK, http.StatusAccepted, http.StatusNoContent}, resp.StatusCode) {
		d.beginDeleteAtResourceGroup.remove(req)
		return nil, &nonRetriableError{fmt.Errorf("unexpected status code %d. acceptable values are http.StatusOK, http.StatusAccepted, http.StatusNoContent", resp.StatusCode)}
	}
	if !server.PollerResponderMore(beginDeleteAtResourceGroup) {
		d.beginDeleteAtResourceGroup.remove(req)
	}

	return resp, nil
}

func (d *DeploymentStacksServerTransport) dispatchBeginDeleteAtSubscription(req *http.Request) (*http.Response, error) {
	if d.srv.BeginDeleteAtSubscription == nil {
		return nil, &nonRetriableError{errors.New("fake for method BeginDeleteAtSubscription not implemented")}
	}
	beginDeleteAtSubscription := d.beginDeleteAtSubscription.get(req)
	if beginDeleteAtSubscription == nil {
		const regexStr = `/subscriptions/(?P<subscriptionId>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/providers/Microsoft\.Resources/deploymentStacks/(?P<deploymentStackName>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)`
		regex := regexp.MustCompile(regexStr)
		matches := regex.FindStringSubmatch(req.URL.EscapedPath())
		if len(matches) < 3 {
			return nil, fmt.Errorf("failed to parse path %s", req.URL.Path)
		}
		qp := req.URL.Query()
		deploymentStackNameParam, err := url.PathUnescape(matches[regex.SubexpIndex("deploymentStackName")])
		if err != nil {
			return nil, err
		}
		unmanageActionResourcesUnescaped, err := url.QueryUnescape(qp.Get("unmanageAction.Resources"))
		if err != nil {
			return nil, err
		}
		unmanageActionResourcesParam := getOptional(armdeployments.UnmanageActionResourceMode(unmanageActionResourcesUnescaped))
		unmanageActionResourceGroupsUnescaped, err := url.QueryUnescape(qp.Get("unmanageAction.ResourceGroups"))
		if err != nil {
			return nil, err
		}
		unmanageActionResourceGroupsParam := getOptional(armdeployments.UnmanageActionResourceGroupMode(unmanageActionResourceGroupsUnescaped))
		unmanageActionManagementGroupsUnescaped, err := url.QueryUnescape(qp.Get("unmanageAction.ManagementGroups"))
		if err != nil {
			return nil, err
		}
		unmanageActionManagementGroupsParam := getOptional(armdeployments.UnmanageActionManagementGroupMode(unmanageActionManagementGroupsUnescaped))
		bypassStackOutOfSyncErrorUnescaped, err := url.QueryUnescape(qp.Get("bypassStackOutOfSyncError"))
		if err != nil {
			return nil, err
		}
		bypassStackOutOfSyncErrorParam, err := parseOptional(bypassStackOutOfSyncErrorUnescaped, strconv.ParseBool)
		if err != nil {
			return nil, err
		}
		var options *armdeployments.DeploymentStacksClientBeginDeleteAtSubscriptionOptions
		if unmanageActionResourcesParam != nil || unmanageActionResourceGroupsParam != nil || unmanageActionManagementGroupsParam != nil || bypassStackOutOfSyncErrorParam != nil {
			options = &armdeployments.DeploymentStacksClientBeginDeleteAtSubscriptionOptions{
				UnmanageActionResources:        unmanageActionResourcesParam,
				UnmanageActionResourceGroups:   unmanageActionResourceGroupsParam,
				UnmanageActionManagementGroups: unmanageActionManagementGroupsParam,
				BypassStackOutOfSyncError:      bypassStackOutOfSyncErrorParam,
			}
		}
		respr, errRespr := d.srv.BeginDeleteAtSubscription(req.Context(), deploymentStackNameParam, options)
		if respErr := server.GetError(errRespr, req); respErr != nil {
			return nil, respErr
		}
		beginDeleteAtSubscription = &respr
		d.beginDeleteAtSubscription.add(req, beginDeleteAtSubscription)
	}

	resp, err := server.PollerResponderNext(beginDeleteAtSubscription, req)
	if err != nil {
		return nil, err
	}

	if !contains([]int{http.StatusOK, http.StatusAccepted, http.StatusNoContent}, resp.StatusCode) {
		d.beginDeleteAtSubscription.remove(req)
		return nil, &nonRetriableError{fmt.Errorf("unexpected status code %d. acceptable values are http.StatusOK, http.StatusAccepted, http.StatusNoContent", resp.StatusCode)}
	}
	if !server.PollerResponderMore(beginDeleteAtSubscription) {
		d.beginDeleteAtSubscription.remove(req)
	}

	return resp, nil
}

func (d *DeploymentStacksServerTransport) dispatchExportTemplateAtManagementGroup(req *http.Request) (*http.Response, error) {
	if d.srv.ExportTemplateAtManagementGroup == nil {
		return nil, &nonRetriableError{errors.New("fake for method ExportTemplateAtManagementGroup not implemented")}
	}
	const regexStr = `/providers/Microsoft\.Management/managementGroups/(?P<managementGroupId>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/providers/Microsoft\.Resources/deploymentStacks/(?P<deploymentStackName>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/exportTemplate`
	regex := regexp.MustCompile(regexStr)
	matches := regex.FindStringSubmatch(req.URL.EscapedPath())
	if len(matches) < 3 {
		return nil, fmt.Errorf("failed to parse path %s", req.URL.Path)
	}
	managementGroupIDParam, err := url.PathUnescape(matches[regex.SubexpIndex("managementGroupId")])
	if err != nil {
		return nil, err
	}
	deploymentStackNameParam, err := url.PathUnescape(matches[regex.SubexpIndex("deploymentStackName")])
	if err != nil {
		return nil, err
	}
	respr, errRespr := d.srv.ExportTemplateAtManagementGroup(req.Context(), managementGroupIDParam, deploymentStackNameParam, nil)
	if respErr := server.GetError(errRespr, req); respErr != nil {
		return nil, respErr
	}
	respContent := server.GetResponseContent(respr)
	if !contains([]int{http.StatusOK}, respContent.HTTPStatus) {
		return nil, &nonRetriableError{fmt.Errorf("unexpected status code %d. acceptable values are http.StatusOK", respContent.HTTPStatus)}
	}
	resp, err := server.MarshalResponseAsJSON(respContent, server.GetResponse(respr).DeploymentStackTemplateDefinition, req)
	if err != nil {
		return nil, err
	}
	return resp, nil
}

func (d *DeploymentStacksServerTransport) dispatchExportTemplateAtResourceGroup(req *http.Request) (*http.Response, error) {
	if d.srv.ExportTemplateAtResourceGroup == nil {
		return nil, &nonRetriableError{errors.New("fake for method ExportTemplateAtResourceGroup not implemented")}
	}
	const regexStr = `/subscriptions/(?P<subscriptionId>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/resourceGroups/(?P<resourceGroupName>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/providers/Microsoft\.Resources/deploymentStacks/(?P<deploymentStackName>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/exportTemplate`
	regex := regexp.MustCompile(regexStr)
	matches := regex.FindStringSubmatch(req.URL.EscapedPath())
	if len(matches) < 4 {
		return nil, fmt.Errorf("failed to parse path %s", req.URL.Path)
	}
	resourceGroupNameParam, err := url.PathUnescape(matches[regex.SubexpIndex("resourceGroupName")])
	if err != nil {
		return nil, err
	}
	deploymentStackNameParam, err := url.PathUnescape(matches[regex.SubexpIndex("deploymentStackName")])
	if err != nil {
		return nil, err
	}
	respr, errRespr := d.srv.ExportTemplateAtResourceGroup(req.Context(), resourceGroupNameParam, deploymentStackNameParam, nil)
	if respErr := server.GetError(errRespr, req); respErr != nil {
		return nil, respErr
	}
	respContent := server.GetResponseContent(respr)
	if !contains([]int{http.StatusOK}, respContent.HTTPStatus) {
		return nil, &nonRetriableError{fmt.Errorf("unexpected status code %d. acceptable values are http.StatusOK", respContent.HTTPStatus)}
	}
	resp, err := server.MarshalResponseAsJSON(respContent, server.GetResponse(respr).DeploymentStackTemplateDefinition, req)
	if err != nil {
		return nil, err
	}
	return resp, nil
}

func (d *DeploymentStacksServerTransport) dispatchExportTemplateAtSubscription(req *http.Request) (*http.Response, error) {
	if d.srv.ExportTemplateAtSubscription == nil {
		return nil, &nonRetriableError{errors.New("fake for method ExportTemplateAtSubscription not implemented")}
	}
	const regexStr = `/subscriptions/(?P<subscriptionId>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/providers/Microsoft\.Resources/deploymentStacks/(?P<deploymentStackName>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/exportTemplate`
	regex := regexp.MustCompile(regexStr)
	matches := regex.FindStringSubmatch(req.URL.EscapedPath())
	if len(matches) < 3 {
		return nil, fmt.Errorf("failed to parse path %s", req.URL.Path)
	}
	deploymentStackNameParam, err := url.PathUnescape(matches[regex.SubexpIndex("deploymentStackName")])
	if err != nil {
		return nil, err
	}
	respr, errRespr := d.srv.ExportTemplateAtSubscription(req.Context(), deploymentStackNameParam, nil)
	if respErr := server.GetError(errRespr, req); respErr != nil {
		return nil, respErr
	}
	respContent := server.GetResponseContent(respr)
	if !contains([]int{http.StatusOK}, respContent.HTTPStatus) {
		return nil, &nonRetriableError{fmt.Errorf("unexpected status code %d. acceptable values are http.StatusOK", respContent.HTTPStatus)}
	}
	resp, err := server.MarshalResponseAsJSON(respContent, server.GetResponse(respr).DeploymentStackTemplateDefinition, req)
	if err != nil {
		return nil, err
	}
	return resp, nil
}

func (d *DeploymentStacksServerTransport) dispatchGetAtManagementGroup(req *http.Request) (*http.Response, error) {
	if d.srv.GetAtManagementGroup == nil {
		return nil, &nonRetriableError{errors.New("fake for method GetAtManagementGroup not implemented")}
	}
	const regexStr = `/providers/Microsoft\.Management/managementGroups/(?P<managementGroupId>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/providers/Microsoft\.Resources/deploymentStacks/(?P<deploymentStackName>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)`
	regex := regexp.MustCompile(regexStr)
	matches := regex.FindStringSubmatch(req.URL.EscapedPath())
	if len(matches) < 3 {
		return nil, fmt.Errorf("failed to parse path %s", req.URL.Path)
	}
	managementGroupIDParam, err := url.PathUnescape(matches[regex.SubexpIndex("managementGroupId")])
	if err != nil {
		return nil, err
	}
	deploymentStackNameParam, err := url.PathUnescape(matches[regex.SubexpIndex("deploymentStackName")])
	if err != nil {
		return nil, err
	}
	respr, errRespr := d.srv.GetAtManagementGroup(req.Context(), managementGroupIDParam, deploymentStackNameParam, nil)
	if respErr := server.GetError(errRespr, req); respErr != nil {
		return nil, respErr
	}
	respContent := server.GetResponseContent(respr)
	if !contains([]int{http.StatusOK}, respContent.HTTPStatus) {
		return nil, &nonRetriableError{fmt.Errorf("unexpected status code %d. acceptable values are http.StatusOK", respContent.HTTPStatus)}
	}
	resp, err := server.MarshalResponseAsJSON(respContent, server.GetResponse(respr).DeploymentStack, req)
	if err != nil {
		return nil, err
	}
	return resp, nil
}

func (d *DeploymentStacksServerTransport) dispatchGetAtResourceGroup(req *http.Request) (*http.Response, error) {
	if d.srv.GetAtResourceGroup == nil {
		return nil, &nonRetriableError{errors.New("fake for method GetAtResourceGroup not implemented")}
	}
	const regexStr = `/subscriptions/(?P<subscriptionId>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/resourceGroups/(?P<resourceGroupName>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/providers/Microsoft\.Resources/deploymentStacks/(?P<deploymentStackName>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)`
	regex := regexp.MustCompile(regexStr)
	matches := regex.FindStringSubmatch(req.URL.EscapedPath())
	if len(matches) < 4 {
		return nil, fmt.Errorf("failed to parse path %s", req.URL.Path)
	}
	resourceGroupNameParam, err := url.PathUnescape(matches[regex.SubexpIndex("resourceGroupName")])
	if err != nil {
		return nil, err
	}
	deploymentStackNameParam, err := url.PathUnescape(matches[regex.SubexpIndex("deploymentStackName")])
	if err != nil {
		return nil, err
	}
	respr, errRespr := d.srv.GetAtResourceGroup(req.Context(), resourceGroupNameParam, deploymentStackNameParam, nil)
	if respErr := server.GetError(errRespr, req); respErr != nil {
		return nil, respErr
	}
	respContent := server.GetResponseContent(respr)
	if !contains([]int{http.StatusOK}, respContent.HTTPStatus) {
		return nil, &nonRetriableError{fmt.Errorf("unexpected status code %d. acceptable values are http.StatusOK", respContent.HTTPStatus)}
	}
	resp, err := server.MarshalResponseAsJSON(respContent, server.GetResponse(respr).DeploymentStack, req)
	if err != nil {
		return nil, err
	}
	return resp, nil
}

func (d *DeploymentStacksServerTransport) dispatchGetAtSubscription(req *http.Request) (*http.Response, error) {
	if d.srv.GetAtSubscription == nil {
		return nil, &nonRetriableError{errors.New("fake for method GetAtSubscription not implemented")}
	}
	const regexStr = `/subscriptions/(?P<subscriptionId>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/providers/Microsoft\.Resources/deploymentStacks/(?P<deploymentStackName>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)`
	regex := regexp.MustCompile(regexStr)
	matches := regex.FindStringSubmatch(req.URL.EscapedPath())
	if len(matches) < 3 {
		return nil, fmt.Errorf("failed to parse path %s", req.URL.Path)
	}
	deploymentStackNameParam, err := url.PathUnescape(matches[regex.SubexpIndex("deploymentStackName")])
	if err != nil {
		return nil, err
	}
	respr, errRespr := d.srv.GetAtSubscription(req.Context(), deploymentStackNameParam, nil)
	if respErr := server.GetError(errRespr, req); respErr != nil {
		return nil, respErr
	}
	respContent := server.GetResponseContent(respr)
	if !contains([]int{http.StatusOK}, respContent.HTTPStatus) {
		return nil, &nonRetriableError{fmt.Errorf("unexpected status code %d. acceptable values are http.StatusOK", respContent.HTTPStatus)}
	}
	resp, err := server.MarshalResponseAsJSON(respContent, server.GetResponse(respr).DeploymentStack, req)
	if err != nil {
		return nil, err
	}
	return resp, nil
}

func (d *DeploymentStacksServerTransport) dispatchNewListAtManagementGroupPager(req *http.Request) (*http.Response, error) {
	if d.srv.NewListAtManagementGroupPager == nil {
		return nil, &nonRetriableError{errors.New("fake for method NewListAtManagementGroupPager not implemented")}
	}
	newListAtManagementGroupPager := d.newListAtManagementGroupPager.get(req)
	if newListAtManagementGroupPager == nil {
		const regexStr = `/providers/Microsoft\.Management/managementGroups/(?P<managementGroupId>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/providers/Microsoft\.Resources/deploymentStacks`
		regex := regexp.MustCompile(regexStr)
		matches := regex.FindStringSubmatch(req.URL.EscapedPath())
		if len(matches) < 2 {
			return nil, fmt.Errorf("failed to parse path %s", req.URL.Path)
		}
		managementGroupIDParam, err := url.PathUnescape(matches[regex.SubexpIndex("managementGroupId")])
		if err != nil {
			return nil, err
		}
		resp := d.srv.NewListAtManagementGroupPager(managementGroupIDParam, nil)
		newListAtManagementGroupPager = &resp
		d.newListAtManagementGroupPager.add(req, newListAtManagementGroupPager)
		server.PagerResponderInjectNextLinks(newListAtManagementGroupPager, req, func(page *armdeployments.DeploymentStacksClientListAtManagementGroupResponse, createLink func() string) {
			page.NextLink = to.Ptr(createLink())
		})
	}
	resp, err := server.PagerResponderNext(newListAtManagementGroupPager, req)
	if err != nil {
		return nil, err
	}
	if !contains([]int{http.StatusOK}, resp.StatusCode) {
		d.newListAtManagementGroupPager.remove(req)
		return nil, &nonRetriableError{fmt.Errorf("unexpected status code %d. acceptable values are http.StatusOK", resp.StatusCode)}
	}
	if !server.PagerResponderMore(newListAtManagementGroupPager) {
		d.newListAtManagementGroupPager.remove(req)
	}
	return resp, nil
}

func (d *DeploymentStacksServerTransport) dispatchNewListAtResourceGroupPager(req *http.Request) (*http.Response, error) {
	if d.srv.NewListAtResourceGroupPager == nil {
		return nil, &nonRetriableError{errors.New("fake for method NewListAtResourceGroupPager not implemented")}
	}
	newListAtResourceGroupPager := d.newListAtResourceGroupPager.get(req)
	if newListAtResourceGroupPager == nil {
		const regexStr = `/subscriptions/(?P<subscriptionId>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/resourceGroups/(?P<resourceGroupName>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/providers/Microsoft\.Resources/deploymentStacks`
		regex := regexp.MustCompile(regexStr)
		matches := regex.FindStringSubmatch(req.URL.EscapedPath())
		if len(matches) < 3 {
			return nil, fmt.Errorf("failed to parse path %s", req.URL.Path)
		}
		resourceGroupNameParam, err := url.PathUnescape(matches[regex.SubexpIndex("resourceGroupName")])
		if err != nil {
			return nil, err
		}
		resp := d.srv.NewListAtResourceGroupPager(resourceGroupNameParam, nil)
		newListAtResourceGroupPager = &resp
		d.newListAtResourceGroupPager.add(req, newListAtResourceGroupPager)
		server.PagerResponderInjectNextLinks(newListAtResourceGroupPager, req, func(page *armdeployments.DeploymentStacksClientListAtResourceGroupResponse, createLink func() string) {
			page.NextLink = to.Ptr(createLink())
		})
	}
	resp, err := server.PagerResponderNext(newListAtResourceGroupPager, req)
	if err != nil {
		return nil, err
	}
	if !contains([]int{http.StatusOK}, resp.StatusCode) {
		d.newListAtResourceGroupPager.remove(req)
		return nil, &nonRetriableError{fmt.Errorf("unexpected status code %d. acceptable values are http.StatusOK", resp.StatusCode)}
	}
	if !server.PagerResponderMore(newListAtResourceGroupPager) {
		d.newListAtResourceGroupPager.remove(req)
	}
	return resp, nil
}

func (d *DeploymentStacksServerTransport) dispatchNewListAtSubscriptionPager(req *http.Request) (*http.Response, error) {
	if d.srv.NewListAtSubscriptionPager == nil {
		return nil, &nonRetriableError{errors.New("fake for method NewListAtSubscriptionPager not implemented")}
	}
	newListAtSubscriptionPager := d.newListAtSubscriptionPager.get(req)
	if newListAtSubscriptionPager == nil {
		const regexStr = `/subscriptions/(?P<subscriptionId>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/providers/Microsoft\.Resources/deploymentStacks`
		regex := regexp.MustCompile(regexStr)
		matches := regex.FindStringSubmatch(req.URL.EscapedPath())
		if len(matches) < 2 {
			return nil, fmt.Errorf("failed to parse path %s", req.URL.Path)
		}
		resp := d.srv.NewListAtSubscriptionPager(nil)
		newListAtSubscriptionPager = &resp
		d.newListAtSubscriptionPager.add(req, newListAtSubscriptionPager)
		server.PagerResponderInjectNextLinks(newListAtSubscriptionPager, req, func(page *armdeployments.DeploymentStacksClientListAtSubscriptionResponse, createLink func() string) {
			page.NextLink = to.Ptr(createLink())
		})
	}
	resp, err := server.PagerResponderNext(newListAtSubscriptionPager, req)
	if err != nil {
		return nil, err
	}
	if !contains([]int{http.StatusOK}, resp.StatusCode) {
		d.newListAtSubscriptionPager.remove(req)
		return nil, &nonRetriableError{fmt.Errorf("unexpected status code %d. acceptable values are http.StatusOK", resp.StatusCode)}
	}
	if !server.PagerResponderMore(newListAtSubscriptionPager) {
		d.newListAtSubscriptionPager.remove(req)
	}
	return resp, nil
}

func (d *DeploymentStacksServerTransport) dispatchBeginValidateStackAtManagementGroup(req *http.Request) (*http.Response, error) {
	if d.srv.BeginValidateStackAtManagementGroup == nil {
		return nil, &nonRetriableError{errors.New("fake for method BeginValidateStackAtManagementGroup not implemented")}
	}
	beginValidateStackAtManagementGroup := d.beginValidateStackAtManagementGroup.get(req)
	if beginValidateStackAtManagementGroup == nil {
		const regexStr = `/providers/Microsoft\.Management/managementGroups/(?P<managementGroupId>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/providers/Microsoft\.Resources/deploymentStacks/(?P<deploymentStackName>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/validate`
		regex := regexp.MustCompile(regexStr)
		matches := regex.FindStringSubmatch(req.URL.EscapedPath())
		if len(matches) < 3 {
			return nil, fmt.Errorf("failed to parse path %s", req.URL.Path)
		}
		body, err := server.UnmarshalRequestAsJSON[armdeployments.DeploymentStack](req)
		if err != nil {
			return nil, err
		}
		managementGroupIDParam, err := url.PathUnescape(matches[regex.SubexpIndex("managementGroupId")])
		if err != nil {
			return nil, err
		}
		deploymentStackNameParam, err := url.PathUnescape(matches[regex.SubexpIndex("deploymentStackName")])
		if err != nil {
			return nil, err
		}
		respr, errRespr := d.srv.BeginValidateStackAtManagementGroup(req.Context(), managementGroupIDParam, deploymentStackNameParam, body, nil)
		if respErr := server.GetError(errRespr, req); respErr != nil {
			return nil, respErr
		}
		beginValidateStackAtManagementGroup = &respr
		d.beginValidateStackAtManagementGroup.add(req, beginValidateStackAtManagementGroup)
	}

	resp, err := server.PollerResponderNext(beginValidateStackAtManagementGroup, req)
	if err != nil {
		return nil, err
	}

	if !contains([]int{http.StatusOK, http.StatusAccepted, http.StatusBadRequest}, resp.StatusCode) {
		d.beginValidateStackAtManagementGroup.remove(req)
		return nil, &nonRetriableError{fmt.Errorf("unexpected status code %d. acceptable values are http.StatusOK, http.StatusAccepted, http.StatusBadRequest", resp.StatusCode)}
	}
	if !server.PollerResponderMore(beginValidateStackAtManagementGroup) {
		d.beginValidateStackAtManagementGroup.remove(req)
	}

	return resp, nil
}

func (d *DeploymentStacksServerTransport) dispatchBeginValidateStackAtResourceGroup(req *http.Request) (*http.Response, error) {
	if d.srv.BeginValidateStackAtResourceGroup == nil {
		return nil, &nonRetriableError{errors.New("fake for method BeginValidateStackAtResourceGroup not implemented")}
	}
	beginValidateStackAtResourceGroup := d.beginValidateStackAtResourceGroup.get(req)
	if beginValidateStackAtResourceGroup == nil {
		const regexStr = `/subscriptions/(?P<subscriptionId>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/resourceGroups/(?P<resourceGroupName>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/providers/Microsoft\.Resources/deploymentStacks/(?P<deploymentStackName>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/validate`
		regex := regexp.MustCompile(regexStr)
		matches := regex.FindStringSubmatch(req.URL.EscapedPath())
		if len(matches) < 4 {
			return nil, fmt.Errorf("failed to parse path %s", req.URL.Path)
		}
		body, err := server.UnmarshalRequestAsJSON[armdeployments.DeploymentStack](req)
		if err != nil {
			return nil, err
		}
		resourceGroupNameParam, err := url.PathUnescape(matches[regex.SubexpIndex("resourceGroupName")])
		if err != nil {
			return nil, err
		}
		deploymentStackNameParam, err := url.PathUnescape(matches[regex.SubexpIndex("deploymentStackName")])
		if err != nil {
			return nil, err
		}
		respr, errRespr := d.srv.BeginValidateStackAtResourceGroup(req.Context(), resourceGroupNameParam, deploymentStackNameParam, body, nil)
		if respErr := server.GetError(errRespr, req); respErr != nil {
			return nil, respErr
		}
		beginValidateStackAtResourceGroup = &respr
		d.beginValidateStackAtResourceGroup.add(req, beginValidateStackAtResourceGroup)
	}

	resp, err := server.PollerResponderNext(beginValidateStackAtResourceGroup, req)
	if err != nil {
		return nil, err
	}

	if !contains([]int{http.StatusOK, http.StatusAccepted, http.StatusBadRequest}, resp.StatusCode) {
		d.beginValidateStackAtResourceGroup.remove(req)
		return nil, &nonRetriableError{fmt.Errorf("unexpected status code %d. acceptable values are http.StatusOK, http.StatusAccepted, http.StatusBadRequest", resp.StatusCode)}
	}
	if !server.PollerResponderMore(beginValidateStackAtResourceGroup) {
		d.beginValidateStackAtResourceGroup.remove(req)
	}

	return resp, nil
}

func (d *DeploymentStacksServerTransport) dispatchBeginValidateStackAtSubscription(req *http.Request) (*http.Response, error) {
	if d.srv.BeginValidateStackAtSubscription == nil {
		return nil, &nonRetriableError{errors.New("fake for method BeginValidateStackAtSubscription not implemented")}
	}
	beginValidateStackAtSubscription := d.beginValidateStackAtSubscription.get(req)
	if beginValidateStackAtSubscription == nil {
		const regexStr = `/subscriptions/(?P<subscriptionId>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/providers/Microsoft\.Resources/deploymentStacks/(?P<deploymentStackName>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/validate`
		regex := regexp.MustCompile(regexStr)
		matches := regex.FindStringSubmatch(req.URL.EscapedPath())
		if len(matches) < 3 {
			return nil, fmt.Errorf("failed to parse path %s", req.URL.Path)
		}
		body, err := server.UnmarshalRequestAsJSON[armdeployments.DeploymentStack](req)
		if err != nil {
			return nil, err
		}
		deploymentStackNameParam, err := url.PathUnescape(matches[regex.SubexpIndex("deploymentStackName")])
		if err != nil {
			return nil, err
		}
		respr, errRespr := d.srv.BeginValidateStackAtSubscription(req.Context(), deploymentStackNameParam, body, nil)
		if respErr := server.GetError(errRespr, req); respErr != nil {
			return nil, respErr
		}
		beginValidateStackAtSubscription = &respr
		d.beginValidateStackAtSubscription.add(req, beginValidateStackAtSubscription)
	}

	resp, err := server.PollerResponderNext(beginValidateStackAtSubscription, req)
	if err != nil {
		return nil, err
	}

	if !contains([]int{http.StatusOK, http.StatusAccepted, http.StatusBadRequest}, resp.StatusCode) {
		d.beginValidateStackAtSubscription.remove(req)
		return nil, &nonRetriableError{fmt.Errorf("unexpected status code %d. acceptable values are http.StatusOK, http.StatusAccepted, http.StatusBadRequest", resp.StatusCode)}
	}
	if !server.PollerResponderMore(beginValidateStackAtSubscription) {
		d.beginValidateStackAtSubscription.remove(req)
	}

	return resp, nil
}

// set this to conditionally intercept incoming requests to DeploymentStacksServerTransport
var deploymentStacksServerTransportInterceptor interface {
	// Do returns true if the server transport should use the returned response/error
	Do(*http.Request) (*http.Response, error, bool)
}
