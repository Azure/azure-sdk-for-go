//go:build go1.16
// +build go1.16

// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

package armdeploymentscripts

import (
	"context"
	"errors"
	"fmt"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/arm"
	armruntime "github.com/Azure/azure-sdk-for-go/sdk/azcore/arm/runtime"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/policy"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/runtime"
	"net/http"
	"net/url"
	"strconv"
	"strings"
)

// DeploymentScriptsClient contains the methods for the DeploymentScripts group.
// Don't use this type directly, use NewDeploymentScriptsClient() instead.
type DeploymentScriptsClient struct {
	ep             string
	pl             runtime.Pipeline
	subscriptionID string
}

// NewDeploymentScriptsClient creates a new instance of DeploymentScriptsClient with the specified values.
func NewDeploymentScriptsClient(subscriptionID string, credential azcore.TokenCredential, options *arm.ClientOptions) *DeploymentScriptsClient {
	cp := arm.ClientOptions{}
	if options != nil {
		cp = *options
	}
	if len(cp.Host) == 0 {
		cp.Host = arm.AzurePublicCloud
	}
	return &DeploymentScriptsClient{subscriptionID: subscriptionID, ep: string(cp.Host), pl: armruntime.NewPipeline(module, version, credential, &cp)}
}

// BeginCreate - Creates a deployment script.
// If the operation fails it returns the *DeploymentScriptsError error type.
func (client *DeploymentScriptsClient) BeginCreate(ctx context.Context, resourceGroupName string, scriptName string, deploymentScript DeploymentScriptClassification, options *DeploymentScriptsBeginCreateOptions) (DeploymentScriptsCreatePollerResponse, error) {
	resp, err := client.create(ctx, resourceGroupName, scriptName, deploymentScript, options)
	if err != nil {
		return DeploymentScriptsCreatePollerResponse{}, err
	}
	result := DeploymentScriptsCreatePollerResponse{
		RawResponse: resp,
	}
	pt, err := armruntime.NewPoller("DeploymentScriptsClient.Create", "", resp, client.pl, client.createHandleError)
	if err != nil {
		return DeploymentScriptsCreatePollerResponse{}, err
	}
	result.Poller = &DeploymentScriptsCreatePoller{
		pt: pt,
	}
	return result, nil
}

// Create - Creates a deployment script.
// If the operation fails it returns the *DeploymentScriptsError error type.
func (client *DeploymentScriptsClient) create(ctx context.Context, resourceGroupName string, scriptName string, deploymentScript DeploymentScriptClassification, options *DeploymentScriptsBeginCreateOptions) (*http.Response, error) {
	req, err := client.createCreateRequest(ctx, resourceGroupName, scriptName, deploymentScript, options)
	if err != nil {
		return nil, err
	}
	resp, err := client.pl.Do(req)
	if err != nil {
		return nil, err
	}
	if !runtime.HasStatusCode(resp, http.StatusOK, http.StatusCreated) {
		return nil, client.createHandleError(resp)
	}
	return resp, nil
}

// createCreateRequest creates the Create request.
func (client *DeploymentScriptsClient) createCreateRequest(ctx context.Context, resourceGroupName string, scriptName string, deploymentScript DeploymentScriptClassification, options *DeploymentScriptsBeginCreateOptions) (*policy.Request, error) {
	urlPath := "/subscriptions/{subscriptionId}/resourcegroups/{resourceGroupName}/providers/Microsoft.Resources/deploymentScripts/{scriptName}"
	if client.subscriptionID == "" {
		return nil, errors.New("parameter client.subscriptionID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{subscriptionId}", url.PathEscape(client.subscriptionID))
	if resourceGroupName == "" {
		return nil, errors.New("parameter resourceGroupName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{resourceGroupName}", url.PathEscape(resourceGroupName))
	if scriptName == "" {
		return nil, errors.New("parameter scriptName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{scriptName}", url.PathEscape(scriptName))
	req, err := runtime.NewRequest(ctx, http.MethodPut, runtime.JoinPaths(client.ep, urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("api-version", "2020-10-01")
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header.Set("Accept", "application/json")
	return req, runtime.MarshalAsJSON(req, deploymentScript)
}

// createHandleError handles the Create error response.
func (client *DeploymentScriptsClient) createHandleError(resp *http.Response) error {
	body, err := runtime.Payload(resp)
	if err != nil {
		return runtime.NewResponseError(err, resp)
	}
	errType := DeploymentScriptsError{raw: string(body)}
	if err := runtime.UnmarshalAsJSON(resp, &errType); err != nil {
		return runtime.NewResponseError(fmt.Errorf("%s\n%s", string(body), err), resp)
	}
	return runtime.NewResponseError(&errType, resp)
}

// Delete - Deletes a deployment script. When operation completes, status code 200 returned without content.
// If the operation fails it returns the *DeploymentScriptsError error type.
func (client *DeploymentScriptsClient) Delete(ctx context.Context, resourceGroupName string, scriptName string, options *DeploymentScriptsDeleteOptions) (DeploymentScriptsDeleteResponse, error) {
	req, err := client.deleteCreateRequest(ctx, resourceGroupName, scriptName, options)
	if err != nil {
		return DeploymentScriptsDeleteResponse{}, err
	}
	resp, err := client.pl.Do(req)
	if err != nil {
		return DeploymentScriptsDeleteResponse{}, err
	}
	if !runtime.HasStatusCode(resp, http.StatusOK, http.StatusNoContent) {
		return DeploymentScriptsDeleteResponse{}, client.deleteHandleError(resp)
	}
	return DeploymentScriptsDeleteResponse{RawResponse: resp}, nil
}

// deleteCreateRequest creates the Delete request.
func (client *DeploymentScriptsClient) deleteCreateRequest(ctx context.Context, resourceGroupName string, scriptName string, options *DeploymentScriptsDeleteOptions) (*policy.Request, error) {
	urlPath := "/subscriptions/{subscriptionId}/resourcegroups/{resourceGroupName}/providers/Microsoft.Resources/deploymentScripts/{scriptName}"
	if client.subscriptionID == "" {
		return nil, errors.New("parameter client.subscriptionID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{subscriptionId}", url.PathEscape(client.subscriptionID))
	if resourceGroupName == "" {
		return nil, errors.New("parameter resourceGroupName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{resourceGroupName}", url.PathEscape(resourceGroupName))
	if scriptName == "" {
		return nil, errors.New("parameter scriptName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{scriptName}", url.PathEscape(scriptName))
	req, err := runtime.NewRequest(ctx, http.MethodDelete, runtime.JoinPaths(client.ep, urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("api-version", "2020-10-01")
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header.Set("Accept", "application/json")
	return req, nil
}

// deleteHandleError handles the Delete error response.
func (client *DeploymentScriptsClient) deleteHandleError(resp *http.Response) error {
	body, err := runtime.Payload(resp)
	if err != nil {
		return runtime.NewResponseError(err, resp)
	}
	errType := DeploymentScriptsError{raw: string(body)}
	if err := runtime.UnmarshalAsJSON(resp, &errType); err != nil {
		return runtime.NewResponseError(fmt.Errorf("%s\n%s", string(body), err), resp)
	}
	return runtime.NewResponseError(&errType, resp)
}

// Get - Gets a deployment script with a given name.
// If the operation fails it returns the *DeploymentScriptsError error type.
func (client *DeploymentScriptsClient) Get(ctx context.Context, resourceGroupName string, scriptName string, options *DeploymentScriptsGetOptions) (DeploymentScriptsGetResponse, error) {
	req, err := client.getCreateRequest(ctx, resourceGroupName, scriptName, options)
	if err != nil {
		return DeploymentScriptsGetResponse{}, err
	}
	resp, err := client.pl.Do(req)
	if err != nil {
		return DeploymentScriptsGetResponse{}, err
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {
		return DeploymentScriptsGetResponse{}, client.getHandleError(resp)
	}
	return client.getHandleResponse(resp)
}

// getCreateRequest creates the Get request.
func (client *DeploymentScriptsClient) getCreateRequest(ctx context.Context, resourceGroupName string, scriptName string, options *DeploymentScriptsGetOptions) (*policy.Request, error) {
	urlPath := "/subscriptions/{subscriptionId}/resourcegroups/{resourceGroupName}/providers/Microsoft.Resources/deploymentScripts/{scriptName}"
	if client.subscriptionID == "" {
		return nil, errors.New("parameter client.subscriptionID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{subscriptionId}", url.PathEscape(client.subscriptionID))
	if resourceGroupName == "" {
		return nil, errors.New("parameter resourceGroupName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{resourceGroupName}", url.PathEscape(resourceGroupName))
	if scriptName == "" {
		return nil, errors.New("parameter scriptName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{scriptName}", url.PathEscape(scriptName))
	req, err := runtime.NewRequest(ctx, http.MethodGet, runtime.JoinPaths(client.ep, urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("api-version", "2020-10-01")
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header.Set("Accept", "application/json")
	return req, nil
}

// getHandleResponse handles the Get response.
func (client *DeploymentScriptsClient) getHandleResponse(resp *http.Response) (DeploymentScriptsGetResponse, error) {
	result := DeploymentScriptsGetResponse{RawResponse: resp}
	if err := runtime.UnmarshalAsJSON(resp, &result); err != nil {
		return DeploymentScriptsGetResponse{}, runtime.NewResponseError(err, resp)
	}
	return result, nil
}

// getHandleError handles the Get error response.
func (client *DeploymentScriptsClient) getHandleError(resp *http.Response) error {
	body, err := runtime.Payload(resp)
	if err != nil {
		return runtime.NewResponseError(err, resp)
	}
	errType := DeploymentScriptsError{raw: string(body)}
	if err := runtime.UnmarshalAsJSON(resp, &errType); err != nil {
		return runtime.NewResponseError(fmt.Errorf("%s\n%s", string(body), err), resp)
	}
	return runtime.NewResponseError(&errType, resp)
}

// GetLogs - Gets deployment script logs for a given deployment script name.
// If the operation fails it returns the *DeploymentScriptsError error type.
func (client *DeploymentScriptsClient) GetLogs(ctx context.Context, resourceGroupName string, scriptName string, options *DeploymentScriptsGetLogsOptions) (DeploymentScriptsGetLogsResponse, error) {
	req, err := client.getLogsCreateRequest(ctx, resourceGroupName, scriptName, options)
	if err != nil {
		return DeploymentScriptsGetLogsResponse{}, err
	}
	resp, err := client.pl.Do(req)
	if err != nil {
		return DeploymentScriptsGetLogsResponse{}, err
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {
		return DeploymentScriptsGetLogsResponse{}, client.getLogsHandleError(resp)
	}
	return client.getLogsHandleResponse(resp)
}

// getLogsCreateRequest creates the GetLogs request.
func (client *DeploymentScriptsClient) getLogsCreateRequest(ctx context.Context, resourceGroupName string, scriptName string, options *DeploymentScriptsGetLogsOptions) (*policy.Request, error) {
	urlPath := "/subscriptions/{subscriptionId}/resourcegroups/{resourceGroupName}/providers/Microsoft.Resources/deploymentScripts/{scriptName}/logs"
	if client.subscriptionID == "" {
		return nil, errors.New("parameter client.subscriptionID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{subscriptionId}", url.PathEscape(client.subscriptionID))
	if resourceGroupName == "" {
		return nil, errors.New("parameter resourceGroupName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{resourceGroupName}", url.PathEscape(resourceGroupName))
	if scriptName == "" {
		return nil, errors.New("parameter scriptName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{scriptName}", url.PathEscape(scriptName))
	req, err := runtime.NewRequest(ctx, http.MethodGet, runtime.JoinPaths(client.ep, urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("api-version", "2020-10-01")
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header.Set("Accept", "application/json")
	return req, nil
}

// getLogsHandleResponse handles the GetLogs response.
func (client *DeploymentScriptsClient) getLogsHandleResponse(resp *http.Response) (DeploymentScriptsGetLogsResponse, error) {
	result := DeploymentScriptsGetLogsResponse{RawResponse: resp}
	if err := runtime.UnmarshalAsJSON(resp, &result.ScriptLogsList); err != nil {
		return DeploymentScriptsGetLogsResponse{}, runtime.NewResponseError(err, resp)
	}
	return result, nil
}

// getLogsHandleError handles the GetLogs error response.
func (client *DeploymentScriptsClient) getLogsHandleError(resp *http.Response) error {
	body, err := runtime.Payload(resp)
	if err != nil {
		return runtime.NewResponseError(err, resp)
	}
	errType := DeploymentScriptsError{raw: string(body)}
	if err := runtime.UnmarshalAsJSON(resp, &errType); err != nil {
		return runtime.NewResponseError(fmt.Errorf("%s\n%s", string(body), err), resp)
	}
	return runtime.NewResponseError(&errType, resp)
}

// GetLogsDefault - Gets deployment script logs for a given deployment script name.
// If the operation fails it returns the *DeploymentScriptsError error type.
func (client *DeploymentScriptsClient) GetLogsDefault(ctx context.Context, resourceGroupName string, scriptName string, options *DeploymentScriptsGetLogsDefaultOptions) (DeploymentScriptsGetLogsDefaultResponse, error) {
	req, err := client.getLogsDefaultCreateRequest(ctx, resourceGroupName, scriptName, options)
	if err != nil {
		return DeploymentScriptsGetLogsDefaultResponse{}, err
	}
	resp, err := client.pl.Do(req)
	if err != nil {
		return DeploymentScriptsGetLogsDefaultResponse{}, err
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {
		return DeploymentScriptsGetLogsDefaultResponse{}, client.getLogsDefaultHandleError(resp)
	}
	return client.getLogsDefaultHandleResponse(resp)
}

// getLogsDefaultCreateRequest creates the GetLogsDefault request.
func (client *DeploymentScriptsClient) getLogsDefaultCreateRequest(ctx context.Context, resourceGroupName string, scriptName string, options *DeploymentScriptsGetLogsDefaultOptions) (*policy.Request, error) {
	urlPath := "/subscriptions/{subscriptionId}/resourcegroups/{resourceGroupName}/providers/Microsoft.Resources/deploymentScripts/{scriptName}/logs/default"
	if client.subscriptionID == "" {
		return nil, errors.New("parameter client.subscriptionID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{subscriptionId}", url.PathEscape(client.subscriptionID))
	if resourceGroupName == "" {
		return nil, errors.New("parameter resourceGroupName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{resourceGroupName}", url.PathEscape(resourceGroupName))
	if scriptName == "" {
		return nil, errors.New("parameter scriptName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{scriptName}", url.PathEscape(scriptName))
	req, err := runtime.NewRequest(ctx, http.MethodGet, runtime.JoinPaths(client.ep, urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("api-version", "2020-10-01")
	if options != nil && options.Tail != nil {
		reqQP.Set("tail", strconv.FormatInt(int64(*options.Tail), 10))
	}
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header.Set("Accept", "application/json")
	return req, nil
}

// getLogsDefaultHandleResponse handles the GetLogsDefault response.
func (client *DeploymentScriptsClient) getLogsDefaultHandleResponse(resp *http.Response) (DeploymentScriptsGetLogsDefaultResponse, error) {
	result := DeploymentScriptsGetLogsDefaultResponse{RawResponse: resp}
	if err := runtime.UnmarshalAsJSON(resp, &result.ScriptLog); err != nil {
		return DeploymentScriptsGetLogsDefaultResponse{}, runtime.NewResponseError(err, resp)
	}
	return result, nil
}

// getLogsDefaultHandleError handles the GetLogsDefault error response.
func (client *DeploymentScriptsClient) getLogsDefaultHandleError(resp *http.Response) error {
	body, err := runtime.Payload(resp)
	if err != nil {
		return runtime.NewResponseError(err, resp)
	}
	errType := DeploymentScriptsError{raw: string(body)}
	if err := runtime.UnmarshalAsJSON(resp, &errType); err != nil {
		return runtime.NewResponseError(fmt.Errorf("%s\n%s", string(body), err), resp)
	}
	return runtime.NewResponseError(&errType, resp)
}

// ListByResourceGroup - Lists deployments scripts.
// If the operation fails it returns the *DeploymentScriptsError error type.
func (client *DeploymentScriptsClient) ListByResourceGroup(resourceGroupName string, options *DeploymentScriptsListByResourceGroupOptions) *DeploymentScriptsListByResourceGroupPager {
	return &DeploymentScriptsListByResourceGroupPager{
		client: client,
		requester: func(ctx context.Context) (*policy.Request, error) {
			return client.listByResourceGroupCreateRequest(ctx, resourceGroupName, options)
		},
		advancer: func(ctx context.Context, resp DeploymentScriptsListByResourceGroupResponse) (*policy.Request, error) {
			return runtime.NewRequest(ctx, http.MethodGet, *resp.DeploymentScriptListResult.NextLink)
		},
	}
}

// listByResourceGroupCreateRequest creates the ListByResourceGroup request.
func (client *DeploymentScriptsClient) listByResourceGroupCreateRequest(ctx context.Context, resourceGroupName string, options *DeploymentScriptsListByResourceGroupOptions) (*policy.Request, error) {
	urlPath := "/subscriptions/{subscriptionId}/resourcegroups/{resourceGroupName}/providers/Microsoft.Resources/deploymentScripts"
	if client.subscriptionID == "" {
		return nil, errors.New("parameter client.subscriptionID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{subscriptionId}", url.PathEscape(client.subscriptionID))
	if resourceGroupName == "" {
		return nil, errors.New("parameter resourceGroupName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{resourceGroupName}", url.PathEscape(resourceGroupName))
	req, err := runtime.NewRequest(ctx, http.MethodGet, runtime.JoinPaths(client.ep, urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("api-version", "2020-10-01")
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header.Set("Accept", "application/json")
	return req, nil
}

// listByResourceGroupHandleResponse handles the ListByResourceGroup response.
func (client *DeploymentScriptsClient) listByResourceGroupHandleResponse(resp *http.Response) (DeploymentScriptsListByResourceGroupResponse, error) {
	result := DeploymentScriptsListByResourceGroupResponse{RawResponse: resp}
	if err := runtime.UnmarshalAsJSON(resp, &result.DeploymentScriptListResult); err != nil {
		return DeploymentScriptsListByResourceGroupResponse{}, runtime.NewResponseError(err, resp)
	}
	return result, nil
}

// listByResourceGroupHandleError handles the ListByResourceGroup error response.
func (client *DeploymentScriptsClient) listByResourceGroupHandleError(resp *http.Response) error {
	body, err := runtime.Payload(resp)
	if err != nil {
		return runtime.NewResponseError(err, resp)
	}
	errType := DeploymentScriptsError{raw: string(body)}
	if err := runtime.UnmarshalAsJSON(resp, &errType); err != nil {
		return runtime.NewResponseError(fmt.Errorf("%s\n%s", string(body), err), resp)
	}
	return runtime.NewResponseError(&errType, resp)
}

// ListBySubscription - Lists all deployment scripts for a given subscription.
// If the operation fails it returns the *DeploymentScriptsError error type.
func (client *DeploymentScriptsClient) ListBySubscription(options *DeploymentScriptsListBySubscriptionOptions) *DeploymentScriptsListBySubscriptionPager {
	return &DeploymentScriptsListBySubscriptionPager{
		client: client,
		requester: func(ctx context.Context) (*policy.Request, error) {
			return client.listBySubscriptionCreateRequest(ctx, options)
		},
		advancer: func(ctx context.Context, resp DeploymentScriptsListBySubscriptionResponse) (*policy.Request, error) {
			return runtime.NewRequest(ctx, http.MethodGet, *resp.DeploymentScriptListResult.NextLink)
		},
	}
}

// listBySubscriptionCreateRequest creates the ListBySubscription request.
func (client *DeploymentScriptsClient) listBySubscriptionCreateRequest(ctx context.Context, options *DeploymentScriptsListBySubscriptionOptions) (*policy.Request, error) {
	urlPath := "/subscriptions/{subscriptionId}/providers/Microsoft.Resources/deploymentScripts"
	if client.subscriptionID == "" {
		return nil, errors.New("parameter client.subscriptionID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{subscriptionId}", url.PathEscape(client.subscriptionID))
	req, err := runtime.NewRequest(ctx, http.MethodGet, runtime.JoinPaths(client.ep, urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("api-version", "2020-10-01")
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header.Set("Accept", "application/json")
	return req, nil
}

// listBySubscriptionHandleResponse handles the ListBySubscription response.
func (client *DeploymentScriptsClient) listBySubscriptionHandleResponse(resp *http.Response) (DeploymentScriptsListBySubscriptionResponse, error) {
	result := DeploymentScriptsListBySubscriptionResponse{RawResponse: resp}
	if err := runtime.UnmarshalAsJSON(resp, &result.DeploymentScriptListResult); err != nil {
		return DeploymentScriptsListBySubscriptionResponse{}, runtime.NewResponseError(err, resp)
	}
	return result, nil
}

// listBySubscriptionHandleError handles the ListBySubscription error response.
func (client *DeploymentScriptsClient) listBySubscriptionHandleError(resp *http.Response) error {
	body, err := runtime.Payload(resp)
	if err != nil {
		return runtime.NewResponseError(err, resp)
	}
	errType := DeploymentScriptsError{raw: string(body)}
	if err := runtime.UnmarshalAsJSON(resp, &errType); err != nil {
		return runtime.NewResponseError(fmt.Errorf("%s\n%s", string(body), err), resp)
	}
	return runtime.NewResponseError(&errType, resp)
}

// Update - Updates deployment script tags with specified values.
// If the operation fails it returns the *DeploymentScriptsError error type.
func (client *DeploymentScriptsClient) Update(ctx context.Context, resourceGroupName string, scriptName string, options *DeploymentScriptsUpdateOptions) (DeploymentScriptsUpdateResponse, error) {
	req, err := client.updateCreateRequest(ctx, resourceGroupName, scriptName, options)
	if err != nil {
		return DeploymentScriptsUpdateResponse{}, err
	}
	resp, err := client.pl.Do(req)
	if err != nil {
		return DeploymentScriptsUpdateResponse{}, err
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {
		return DeploymentScriptsUpdateResponse{}, client.updateHandleError(resp)
	}
	return client.updateHandleResponse(resp)
}

// updateCreateRequest creates the Update request.
func (client *DeploymentScriptsClient) updateCreateRequest(ctx context.Context, resourceGroupName string, scriptName string, options *DeploymentScriptsUpdateOptions) (*policy.Request, error) {
	urlPath := "/subscriptions/{subscriptionId}/resourcegroups/{resourceGroupName}/providers/Microsoft.Resources/deploymentScripts/{scriptName}"
	if client.subscriptionID == "" {
		return nil, errors.New("parameter client.subscriptionID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{subscriptionId}", url.PathEscape(client.subscriptionID))
	if resourceGroupName == "" {
		return nil, errors.New("parameter resourceGroupName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{resourceGroupName}", url.PathEscape(resourceGroupName))
	if scriptName == "" {
		return nil, errors.New("parameter scriptName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{scriptName}", url.PathEscape(scriptName))
	req, err := runtime.NewRequest(ctx, http.MethodPatch, runtime.JoinPaths(client.ep, urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("api-version", "2020-10-01")
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header.Set("Accept", "application/json")
	if options != nil && options.DeploymentScript != nil {
		return req, runtime.MarshalAsJSON(req, *options.DeploymentScript)
	}
	return req, nil
}

// updateHandleResponse handles the Update response.
func (client *DeploymentScriptsClient) updateHandleResponse(resp *http.Response) (DeploymentScriptsUpdateResponse, error) {
	result := DeploymentScriptsUpdateResponse{RawResponse: resp}
	if err := runtime.UnmarshalAsJSON(resp, &result); err != nil {
		return DeploymentScriptsUpdateResponse{}, runtime.NewResponseError(err, resp)
	}
	return result, nil
}

// updateHandleError handles the Update error response.
func (client *DeploymentScriptsClient) updateHandleError(resp *http.Response) error {
	body, err := runtime.Payload(resp)
	if err != nil {
		return runtime.NewResponseError(err, resp)
	}
	errType := DeploymentScriptsError{raw: string(body)}
	if err := runtime.UnmarshalAsJSON(resp, &errType); err != nil {
		return runtime.NewResponseError(fmt.Errorf("%s\n%s", string(body), err), resp)
	}
	return runtime.NewResponseError(&errType, resp)
}
