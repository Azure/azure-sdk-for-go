//go:build go1.16
// +build go1.16

// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

package armfeatures

import (
	"context"
	"errors"
	"fmt"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/arm"
	armruntime "github.com/Azure/azure-sdk-for-go/sdk/azcore/arm/runtime"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/policy"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/runtime"
	"net/http"
	"net/url"
	"strings"
)

// FeaturesClient contains the methods for the Features group.
// Don't use this type directly, use NewFeaturesClient() instead.
type FeaturesClient struct {
	ep             string
	pl             runtime.Pipeline
	subscriptionID string
}

// NewFeaturesClient creates a new instance of FeaturesClient with the specified values.
func NewFeaturesClient(subscriptionID string, credential azcore.TokenCredential, options *arm.ClientOptions) *FeaturesClient {
	cp := arm.ClientOptions{}
	if options != nil {
		cp = *options
	}
	if len(cp.Host) == 0 {
		cp.Host = arm.AzurePublicCloud
	}
	return &FeaturesClient{subscriptionID: subscriptionID, ep: string(cp.Host), pl: armruntime.NewPipeline(module, version, credential, &cp)}
}

// Get - Gets the preview feature with the specified name.
// If the operation fails it returns the *ErrorResponse error type.
func (client *FeaturesClient) Get(ctx context.Context, resourceProviderNamespace string, featureName string, options *FeaturesGetOptions) (FeaturesGetResponse, error) {
	req, err := client.getCreateRequest(ctx, resourceProviderNamespace, featureName, options)
	if err != nil {
		return FeaturesGetResponse{}, err
	}
	resp, err := client.pl.Do(req)
	if err != nil {
		return FeaturesGetResponse{}, err
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {
		return FeaturesGetResponse{}, client.getHandleError(resp)
	}
	return client.getHandleResponse(resp)
}

// getCreateRequest creates the Get request.
func (client *FeaturesClient) getCreateRequest(ctx context.Context, resourceProviderNamespace string, featureName string, options *FeaturesGetOptions) (*policy.Request, error) {
	urlPath := "/subscriptions/{subscriptionId}/providers/Microsoft.Features/providers/{resourceProviderNamespace}/features/{featureName}"
	if resourceProviderNamespace == "" {
		return nil, errors.New("parameter resourceProviderNamespace cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{resourceProviderNamespace}", url.PathEscape(resourceProviderNamespace))
	if featureName == "" {
		return nil, errors.New("parameter featureName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{featureName}", url.PathEscape(featureName))
	if client.subscriptionID == "" {
		return nil, errors.New("parameter client.subscriptionID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{subscriptionId}", url.PathEscape(client.subscriptionID))
	req, err := runtime.NewRequest(ctx, http.MethodGet, runtime.JoinPaths(client.ep, urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("api-version", "2021-07-01")
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header.Set("Accept", "application/json, text/json")
	return req, nil
}

// getHandleResponse handles the Get response.
func (client *FeaturesClient) getHandleResponse(resp *http.Response) (FeaturesGetResponse, error) {
	result := FeaturesGetResponse{RawResponse: resp}
	if err := runtime.UnmarshalAsJSON(resp, &result.FeatureResult); err != nil {
		return FeaturesGetResponse{}, runtime.NewResponseError(err, resp)
	}
	return result, nil
}

// getHandleError handles the Get error response.
func (client *FeaturesClient) getHandleError(resp *http.Response) error {
	body, err := runtime.Payload(resp)
	if err != nil {
		return runtime.NewResponseError(err, resp)
	}
	errType := ErrorResponse{raw: string(body)}
	if err := runtime.UnmarshalAsJSON(resp, &errType); err != nil {
		return runtime.NewResponseError(fmt.Errorf("%s\n%s", string(body), err), resp)
	}
	return runtime.NewResponseError(&errType, resp)
}

// List - Gets all the preview features in a provider namespace that are available through AFEC for the subscription.
// If the operation fails it returns the *ErrorResponse error type.
func (client *FeaturesClient) List(resourceProviderNamespace string, options *FeaturesListOptions) *FeaturesListPager {
	return &FeaturesListPager{
		client: client,
		requester: func(ctx context.Context) (*policy.Request, error) {
			return client.listCreateRequest(ctx, resourceProviderNamespace, options)
		},
		advancer: func(ctx context.Context, resp FeaturesListResponse) (*policy.Request, error) {
			return runtime.NewRequest(ctx, http.MethodGet, *resp.FeatureOperationsListResult.NextLink)
		},
	}
}

// listCreateRequest creates the List request.
func (client *FeaturesClient) listCreateRequest(ctx context.Context, resourceProviderNamespace string, options *FeaturesListOptions) (*policy.Request, error) {
	urlPath := "/subscriptions/{subscriptionId}/providers/Microsoft.Features/providers/{resourceProviderNamespace}/features"
	if resourceProviderNamespace == "" {
		return nil, errors.New("parameter resourceProviderNamespace cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{resourceProviderNamespace}", url.PathEscape(resourceProviderNamespace))
	if client.subscriptionID == "" {
		return nil, errors.New("parameter client.subscriptionID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{subscriptionId}", url.PathEscape(client.subscriptionID))
	req, err := runtime.NewRequest(ctx, http.MethodGet, runtime.JoinPaths(client.ep, urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("api-version", "2021-07-01")
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header.Set("Accept", "application/json, text/json")
	return req, nil
}

// listHandleResponse handles the List response.
func (client *FeaturesClient) listHandleResponse(resp *http.Response) (FeaturesListResponse, error) {
	result := FeaturesListResponse{RawResponse: resp}
	if err := runtime.UnmarshalAsJSON(resp, &result.FeatureOperationsListResult); err != nil {
		return FeaturesListResponse{}, runtime.NewResponseError(err, resp)
	}
	return result, nil
}

// listHandleError handles the List error response.
func (client *FeaturesClient) listHandleError(resp *http.Response) error {
	body, err := runtime.Payload(resp)
	if err != nil {
		return runtime.NewResponseError(err, resp)
	}
	errType := ErrorResponse{raw: string(body)}
	if err := runtime.UnmarshalAsJSON(resp, &errType); err != nil {
		return runtime.NewResponseError(fmt.Errorf("%s\n%s", string(body), err), resp)
	}
	return runtime.NewResponseError(&errType, resp)
}

// ListAll - Gets all the preview features that are available through AFEC for the subscription.
// If the operation fails it returns the *ErrorResponse error type.
func (client *FeaturesClient) ListAll(options *FeaturesListAllOptions) *FeaturesListAllPager {
	return &FeaturesListAllPager{
		client: client,
		requester: func(ctx context.Context) (*policy.Request, error) {
			return client.listAllCreateRequest(ctx, options)
		},
		advancer: func(ctx context.Context, resp FeaturesListAllResponse) (*policy.Request, error) {
			return runtime.NewRequest(ctx, http.MethodGet, *resp.FeatureOperationsListResult.NextLink)
		},
	}
}

// listAllCreateRequest creates the ListAll request.
func (client *FeaturesClient) listAllCreateRequest(ctx context.Context, options *FeaturesListAllOptions) (*policy.Request, error) {
	urlPath := "/subscriptions/{subscriptionId}/providers/Microsoft.Features/features"
	if client.subscriptionID == "" {
		return nil, errors.New("parameter client.subscriptionID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{subscriptionId}", url.PathEscape(client.subscriptionID))
	req, err := runtime.NewRequest(ctx, http.MethodGet, runtime.JoinPaths(client.ep, urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("api-version", "2021-07-01")
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header.Set("Accept", "application/json, text/json")
	return req, nil
}

// listAllHandleResponse handles the ListAll response.
func (client *FeaturesClient) listAllHandleResponse(resp *http.Response) (FeaturesListAllResponse, error) {
	result := FeaturesListAllResponse{RawResponse: resp}
	if err := runtime.UnmarshalAsJSON(resp, &result.FeatureOperationsListResult); err != nil {
		return FeaturesListAllResponse{}, runtime.NewResponseError(err, resp)
	}
	return result, nil
}

// listAllHandleError handles the ListAll error response.
func (client *FeaturesClient) listAllHandleError(resp *http.Response) error {
	body, err := runtime.Payload(resp)
	if err != nil {
		return runtime.NewResponseError(err, resp)
	}
	errType := ErrorResponse{raw: string(body)}
	if err := runtime.UnmarshalAsJSON(resp, &errType); err != nil {
		return runtime.NewResponseError(fmt.Errorf("%s\n%s", string(body), err), resp)
	}
	return runtime.NewResponseError(&errType, resp)
}

// Register - Registers the preview feature for the subscription.
// If the operation fails it returns the *ErrorResponse error type.
func (client *FeaturesClient) Register(ctx context.Context, resourceProviderNamespace string, featureName string, options *FeaturesRegisterOptions) (FeaturesRegisterResponse, error) {
	req, err := client.registerCreateRequest(ctx, resourceProviderNamespace, featureName, options)
	if err != nil {
		return FeaturesRegisterResponse{}, err
	}
	resp, err := client.pl.Do(req)
	if err != nil {
		return FeaturesRegisterResponse{}, err
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {
		return FeaturesRegisterResponse{}, client.registerHandleError(resp)
	}
	return client.registerHandleResponse(resp)
}

// registerCreateRequest creates the Register request.
func (client *FeaturesClient) registerCreateRequest(ctx context.Context, resourceProviderNamespace string, featureName string, options *FeaturesRegisterOptions) (*policy.Request, error) {
	urlPath := "/subscriptions/{subscriptionId}/providers/Microsoft.Features/providers/{resourceProviderNamespace}/features/{featureName}/register"
	if resourceProviderNamespace == "" {
		return nil, errors.New("parameter resourceProviderNamespace cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{resourceProviderNamespace}", url.PathEscape(resourceProviderNamespace))
	if featureName == "" {
		return nil, errors.New("parameter featureName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{featureName}", url.PathEscape(featureName))
	if client.subscriptionID == "" {
		return nil, errors.New("parameter client.subscriptionID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{subscriptionId}", url.PathEscape(client.subscriptionID))
	req, err := runtime.NewRequest(ctx, http.MethodPost, runtime.JoinPaths(client.ep, urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("api-version", "2021-07-01")
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header.Set("Accept", "application/json, text/json")
	return req, nil
}

// registerHandleResponse handles the Register response.
func (client *FeaturesClient) registerHandleResponse(resp *http.Response) (FeaturesRegisterResponse, error) {
	result := FeaturesRegisterResponse{RawResponse: resp}
	if err := runtime.UnmarshalAsJSON(resp, &result.FeatureResult); err != nil {
		return FeaturesRegisterResponse{}, runtime.NewResponseError(err, resp)
	}
	return result, nil
}

// registerHandleError handles the Register error response.
func (client *FeaturesClient) registerHandleError(resp *http.Response) error {
	body, err := runtime.Payload(resp)
	if err != nil {
		return runtime.NewResponseError(err, resp)
	}
	errType := ErrorResponse{raw: string(body)}
	if err := runtime.UnmarshalAsJSON(resp, &errType); err != nil {
		return runtime.NewResponseError(fmt.Errorf("%s\n%s", string(body), err), resp)
	}
	return runtime.NewResponseError(&errType, resp)
}

// Unregister - Unregisters the preview feature for the subscription.
// If the operation fails it returns the *ErrorResponse error type.
func (client *FeaturesClient) Unregister(ctx context.Context, resourceProviderNamespace string, featureName string, options *FeaturesUnregisterOptions) (FeaturesUnregisterResponse, error) {
	req, err := client.unregisterCreateRequest(ctx, resourceProviderNamespace, featureName, options)
	if err != nil {
		return FeaturesUnregisterResponse{}, err
	}
	resp, err := client.pl.Do(req)
	if err != nil {
		return FeaturesUnregisterResponse{}, err
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {
		return FeaturesUnregisterResponse{}, client.unregisterHandleError(resp)
	}
	return client.unregisterHandleResponse(resp)
}

// unregisterCreateRequest creates the Unregister request.
func (client *FeaturesClient) unregisterCreateRequest(ctx context.Context, resourceProviderNamespace string, featureName string, options *FeaturesUnregisterOptions) (*policy.Request, error) {
	urlPath := "/subscriptions/{subscriptionId}/providers/Microsoft.Features/providers/{resourceProviderNamespace}/features/{featureName}/unregister"
	if resourceProviderNamespace == "" {
		return nil, errors.New("parameter resourceProviderNamespace cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{resourceProviderNamespace}", url.PathEscape(resourceProviderNamespace))
	if featureName == "" {
		return nil, errors.New("parameter featureName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{featureName}", url.PathEscape(featureName))
	if client.subscriptionID == "" {
		return nil, errors.New("parameter client.subscriptionID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{subscriptionId}", url.PathEscape(client.subscriptionID))
	req, err := runtime.NewRequest(ctx, http.MethodPost, runtime.JoinPaths(client.ep, urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("api-version", "2021-07-01")
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header.Set("Accept", "application/json, text/json")
	return req, nil
}

// unregisterHandleResponse handles the Unregister response.
func (client *FeaturesClient) unregisterHandleResponse(resp *http.Response) (FeaturesUnregisterResponse, error) {
	result := FeaturesUnregisterResponse{RawResponse: resp}
	if err := runtime.UnmarshalAsJSON(resp, &result.FeatureResult); err != nil {
		return FeaturesUnregisterResponse{}, runtime.NewResponseError(err, resp)
	}
	return result, nil
}

// unregisterHandleError handles the Unregister error response.
func (client *FeaturesClient) unregisterHandleError(resp *http.Response) error {
	body, err := runtime.Payload(resp)
	if err != nil {
		return runtime.NewResponseError(err, resp)
	}
	errType := ErrorResponse{raw: string(body)}
	if err := runtime.UnmarshalAsJSON(resp, &errType); err != nil {
		return runtime.NewResponseError(fmt.Errorf("%s\n%s", string(body), err), resp)
	}
	return runtime.NewResponseError(&errType, resp)
}
