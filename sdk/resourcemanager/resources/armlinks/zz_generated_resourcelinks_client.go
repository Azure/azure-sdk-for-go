//go:build go1.16
// +build go1.16

// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

package armlinks

import (
	"context"
	"errors"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/arm"
	armruntime "github.com/Azure/azure-sdk-for-go/sdk/azcore/arm/runtime"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/policy"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/runtime"
	"net/http"
	"net/url"
	"strings"
)

// ResourceLinksClient contains the methods for the ResourceLinks group.
// Don't use this type directly, use NewResourceLinksClient() instead.
type ResourceLinksClient struct {
	ep             string
	pl             runtime.Pipeline
	subscriptionID string
}

// NewResourceLinksClient creates a new instance of ResourceLinksClient with the specified values.
func NewResourceLinksClient(subscriptionID string, credential azcore.TokenCredential, options *arm.ClientOptions) *ResourceLinksClient {
	cp := arm.ClientOptions{}
	if options != nil {
		cp = *options
	}
	if len(cp.Host) == 0 {
		cp.Host = arm.AzurePublicCloud
	}
	return &ResourceLinksClient{subscriptionID: subscriptionID, ep: string(cp.Host), pl: armruntime.NewPipeline(module, version, credential, &cp)}
}

// CreateOrUpdate - Creates or updates a resource link between the specified resources.
// If the operation fails it returns a generic error.
func (client *ResourceLinksClient) CreateOrUpdate(ctx context.Context, linkID string, parameters ResourceLink, options *ResourceLinksCreateOrUpdateOptions) (ResourceLinksCreateOrUpdateResponse, error) {
	req, err := client.createOrUpdateCreateRequest(ctx, linkID, parameters, options)
	if err != nil {
		return ResourceLinksCreateOrUpdateResponse{}, err
	}
	resp, err := client.pl.Do(req)
	if err != nil {
		return ResourceLinksCreateOrUpdateResponse{}, err
	}
	if !runtime.HasStatusCode(resp, http.StatusOK, http.StatusCreated) {
		return ResourceLinksCreateOrUpdateResponse{}, client.createOrUpdateHandleError(resp)
	}
	return client.createOrUpdateHandleResponse(resp)
}

// createOrUpdateCreateRequest creates the CreateOrUpdate request.
func (client *ResourceLinksClient) createOrUpdateCreateRequest(ctx context.Context, linkID string, parameters ResourceLink, options *ResourceLinksCreateOrUpdateOptions) (*policy.Request, error) {
	urlPath := "/{linkId}"
	urlPath = strings.ReplaceAll(urlPath, "{linkId}", linkID)
	req, err := runtime.NewRequest(ctx, http.MethodPut, runtime.JoinPaths(client.ep, urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("api-version", "2016-09-01")
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header.Set("Accept", "application/json")
	return req, runtime.MarshalAsJSON(req, parameters)
}

// createOrUpdateHandleResponse handles the CreateOrUpdate response.
func (client *ResourceLinksClient) createOrUpdateHandleResponse(resp *http.Response) (ResourceLinksCreateOrUpdateResponse, error) {
	result := ResourceLinksCreateOrUpdateResponse{RawResponse: resp}
	if err := runtime.UnmarshalAsJSON(resp, &result.ResourceLink); err != nil {
		return ResourceLinksCreateOrUpdateResponse{}, runtime.NewResponseError(err, resp)
	}
	return result, nil
}

// createOrUpdateHandleError handles the CreateOrUpdate error response.
func (client *ResourceLinksClient) createOrUpdateHandleError(resp *http.Response) error {
	body, err := runtime.Payload(resp)
	if err != nil {
		return runtime.NewResponseError(err, resp)
	}
	if len(body) == 0 {
		return runtime.NewResponseError(errors.New(resp.Status), resp)
	}
	return runtime.NewResponseError(errors.New(string(body)), resp)
}

// Delete - Deletes a resource link with the specified ID.
// If the operation fails it returns a generic error.
func (client *ResourceLinksClient) Delete(ctx context.Context, linkID string, options *ResourceLinksDeleteOptions) (ResourceLinksDeleteResponse, error) {
	req, err := client.deleteCreateRequest(ctx, linkID, options)
	if err != nil {
		return ResourceLinksDeleteResponse{}, err
	}
	resp, err := client.pl.Do(req)
	if err != nil {
		return ResourceLinksDeleteResponse{}, err
	}
	if !runtime.HasStatusCode(resp, http.StatusOK, http.StatusNoContent) {
		return ResourceLinksDeleteResponse{}, client.deleteHandleError(resp)
	}
	return ResourceLinksDeleteResponse{RawResponse: resp}, nil
}

// deleteCreateRequest creates the Delete request.
func (client *ResourceLinksClient) deleteCreateRequest(ctx context.Context, linkID string, options *ResourceLinksDeleteOptions) (*policy.Request, error) {
	urlPath := "/{linkId}"
	urlPath = strings.ReplaceAll(urlPath, "{linkId}", linkID)
	req, err := runtime.NewRequest(ctx, http.MethodDelete, runtime.JoinPaths(client.ep, urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("api-version", "2016-09-01")
	req.Raw().URL.RawQuery = reqQP.Encode()
	return req, nil
}

// deleteHandleError handles the Delete error response.
func (client *ResourceLinksClient) deleteHandleError(resp *http.Response) error {
	body, err := runtime.Payload(resp)
	if err != nil {
		return runtime.NewResponseError(err, resp)
	}
	if len(body) == 0 {
		return runtime.NewResponseError(errors.New(resp.Status), resp)
	}
	return runtime.NewResponseError(errors.New(string(body)), resp)
}

// Get - Gets a resource link with the specified ID.
// If the operation fails it returns a generic error.
func (client *ResourceLinksClient) Get(ctx context.Context, linkID string, options *ResourceLinksGetOptions) (ResourceLinksGetResponse, error) {
	req, err := client.getCreateRequest(ctx, linkID, options)
	if err != nil {
		return ResourceLinksGetResponse{}, err
	}
	resp, err := client.pl.Do(req)
	if err != nil {
		return ResourceLinksGetResponse{}, err
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {
		return ResourceLinksGetResponse{}, client.getHandleError(resp)
	}
	return client.getHandleResponse(resp)
}

// getCreateRequest creates the Get request.
func (client *ResourceLinksClient) getCreateRequest(ctx context.Context, linkID string, options *ResourceLinksGetOptions) (*policy.Request, error) {
	urlPath := "/{linkId}"
	urlPath = strings.ReplaceAll(urlPath, "{linkId}", linkID)
	req, err := runtime.NewRequest(ctx, http.MethodGet, runtime.JoinPaths(client.ep, urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("api-version", "2016-09-01")
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header.Set("Accept", "application/json")
	return req, nil
}

// getHandleResponse handles the Get response.
func (client *ResourceLinksClient) getHandleResponse(resp *http.Response) (ResourceLinksGetResponse, error) {
	result := ResourceLinksGetResponse{RawResponse: resp}
	if err := runtime.UnmarshalAsJSON(resp, &result.ResourceLink); err != nil {
		return ResourceLinksGetResponse{}, runtime.NewResponseError(err, resp)
	}
	return result, nil
}

// getHandleError handles the Get error response.
func (client *ResourceLinksClient) getHandleError(resp *http.Response) error {
	body, err := runtime.Payload(resp)
	if err != nil {
		return runtime.NewResponseError(err, resp)
	}
	if len(body) == 0 {
		return runtime.NewResponseError(errors.New(resp.Status), resp)
	}
	return runtime.NewResponseError(errors.New(string(body)), resp)
}

// ListAtSourceScope - Gets a list of resource links at and below the specified source scope.
// If the operation fails it returns a generic error.
func (client *ResourceLinksClient) ListAtSourceScope(scope string, options *ResourceLinksListAtSourceScopeOptions) *ResourceLinksListAtSourceScopePager {
	return &ResourceLinksListAtSourceScopePager{
		client: client,
		requester: func(ctx context.Context) (*policy.Request, error) {
			return client.listAtSourceScopeCreateRequest(ctx, scope, options)
		},
		advancer: func(ctx context.Context, resp ResourceLinksListAtSourceScopeResponse) (*policy.Request, error) {
			return runtime.NewRequest(ctx, http.MethodGet, *resp.ResourceLinkResult.NextLink)
		},
	}
}

// listAtSourceScopeCreateRequest creates the ListAtSourceScope request.
func (client *ResourceLinksClient) listAtSourceScopeCreateRequest(ctx context.Context, scope string, options *ResourceLinksListAtSourceScopeOptions) (*policy.Request, error) {
	urlPath := "/{scope}/providers/Microsoft.Resources/links"
	urlPath = strings.ReplaceAll(urlPath, "{scope}", scope)
	req, err := runtime.NewRequest(ctx, http.MethodGet, runtime.JoinPaths(client.ep, urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	if options != nil && options.Filter != nil {
		reqQP.Set("$filter", "atScope()")
	}
	reqQP.Set("api-version", "2016-09-01")
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header.Set("Accept", "application/json")
	return req, nil
}

// listAtSourceScopeHandleResponse handles the ListAtSourceScope response.
func (client *ResourceLinksClient) listAtSourceScopeHandleResponse(resp *http.Response) (ResourceLinksListAtSourceScopeResponse, error) {
	result := ResourceLinksListAtSourceScopeResponse{RawResponse: resp}
	if err := runtime.UnmarshalAsJSON(resp, &result.ResourceLinkResult); err != nil {
		return ResourceLinksListAtSourceScopeResponse{}, runtime.NewResponseError(err, resp)
	}
	return result, nil
}

// listAtSourceScopeHandleError handles the ListAtSourceScope error response.
func (client *ResourceLinksClient) listAtSourceScopeHandleError(resp *http.Response) error {
	body, err := runtime.Payload(resp)
	if err != nil {
		return runtime.NewResponseError(err, resp)
	}
	if len(body) == 0 {
		return runtime.NewResponseError(errors.New(resp.Status), resp)
	}
	return runtime.NewResponseError(errors.New(string(body)), resp)
}

// ListAtSubscription - Gets all the linked resources for the subscription.
// If the operation fails it returns a generic error.
func (client *ResourceLinksClient) ListAtSubscription(options *ResourceLinksListAtSubscriptionOptions) *ResourceLinksListAtSubscriptionPager {
	return &ResourceLinksListAtSubscriptionPager{
		client: client,
		requester: func(ctx context.Context) (*policy.Request, error) {
			return client.listAtSubscriptionCreateRequest(ctx, options)
		},
		advancer: func(ctx context.Context, resp ResourceLinksListAtSubscriptionResponse) (*policy.Request, error) {
			return runtime.NewRequest(ctx, http.MethodGet, *resp.ResourceLinkResult.NextLink)
		},
	}
}

// listAtSubscriptionCreateRequest creates the ListAtSubscription request.
func (client *ResourceLinksClient) listAtSubscriptionCreateRequest(ctx context.Context, options *ResourceLinksListAtSubscriptionOptions) (*policy.Request, error) {
	urlPath := "/subscriptions/{subscriptionId}/providers/Microsoft.Resources/links"
	if client.subscriptionID == "" {
		return nil, errors.New("parameter client.subscriptionID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{subscriptionId}", url.PathEscape(client.subscriptionID))
	req, err := runtime.NewRequest(ctx, http.MethodGet, runtime.JoinPaths(client.ep, urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	if options != nil && options.Filter != nil {
		reqQP.Set("$filter", *options.Filter)
	}
	reqQP.Set("api-version", "2016-09-01")
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header.Set("Accept", "application/json")
	return req, nil
}

// listAtSubscriptionHandleResponse handles the ListAtSubscription response.
func (client *ResourceLinksClient) listAtSubscriptionHandleResponse(resp *http.Response) (ResourceLinksListAtSubscriptionResponse, error) {
	result := ResourceLinksListAtSubscriptionResponse{RawResponse: resp}
	if err := runtime.UnmarshalAsJSON(resp, &result.ResourceLinkResult); err != nil {
		return ResourceLinksListAtSubscriptionResponse{}, runtime.NewResponseError(err, resp)
	}
	return result, nil
}

// listAtSubscriptionHandleError handles the ListAtSubscription error response.
func (client *ResourceLinksClient) listAtSubscriptionHandleError(resp *http.Response) error {
	body, err := runtime.Payload(resp)
	if err != nil {
		return runtime.NewResponseError(err, resp)
	}
	if len(body) == 0 {
		return runtime.NewResponseError(errors.New(resp.Status), resp)
	}
	return runtime.NewResponseError(errors.New(string(body)), resp)
}
