//go:build go1.16
// +build go1.16

// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

package armlocks

import (
	"context"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/policy"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/runtime"
	"net/http"
	"reflect"
)

// AuthorizationOperationsClientListPager provides operations for iterating over paged responses.
type AuthorizationOperationsClientListPager struct {
	client    *AuthorizationOperationsClient
	current   AuthorizationOperationsClientListResponse
	err       error
	requester func(context.Context) (*policy.Request, error)
	advancer  func(context.Context, AuthorizationOperationsClientListResponse) (*policy.Request, error)
}

// Err returns the last error encountered while paging.
func (p *AuthorizationOperationsClientListPager) Err() error {
	return p.err
}

// NextPage returns true if the pager advanced to the next page.
// Returns false if there are no more pages or an error occurred.
func (p *AuthorizationOperationsClientListPager) NextPage(ctx context.Context) bool {
	var req *policy.Request
	var err error
	if !reflect.ValueOf(p.current).IsZero() {
		if p.current.OperationListResult.NextLink == nil || len(*p.current.OperationListResult.NextLink) == 0 {
			return false
		}
		req, err = p.advancer(ctx, p.current)
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		p.err = err
		return false
	}
	resp, err := p.client.pl.Do(req)
	if err != nil {
		p.err = err
		return false
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {
		p.err = runtime.NewResponseError(resp)
		return false
	}
	result, err := p.client.listHandleResponse(resp)
	if err != nil {
		p.err = err
		return false
	}
	p.current = result
	return true
}

// PageResponse returns the current AuthorizationOperationsClientListResponse page.
func (p *AuthorizationOperationsClientListPager) PageResponse() AuthorizationOperationsClientListResponse {
	return p.current
}

// ManagementLocksClientListAtResourceGroupLevelPager provides operations for iterating over paged responses.
type ManagementLocksClientListAtResourceGroupLevelPager struct {
	client    *ManagementLocksClient
	current   ManagementLocksClientListAtResourceGroupLevelResponse
	err       error
	requester func(context.Context) (*policy.Request, error)
	advancer  func(context.Context, ManagementLocksClientListAtResourceGroupLevelResponse) (*policy.Request, error)
}

// Err returns the last error encountered while paging.
func (p *ManagementLocksClientListAtResourceGroupLevelPager) Err() error {
	return p.err
}

// NextPage returns true if the pager advanced to the next page.
// Returns false if there are no more pages or an error occurred.
func (p *ManagementLocksClientListAtResourceGroupLevelPager) NextPage(ctx context.Context) bool {
	var req *policy.Request
	var err error
	if !reflect.ValueOf(p.current).IsZero() {
		if p.current.ManagementLockListResult.NextLink == nil || len(*p.current.ManagementLockListResult.NextLink) == 0 {
			return false
		}
		req, err = p.advancer(ctx, p.current)
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		p.err = err
		return false
	}
	resp, err := p.client.pl.Do(req)
	if err != nil {
		p.err = err
		return false
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {
		p.err = runtime.NewResponseError(resp)
		return false
	}
	result, err := p.client.listAtResourceGroupLevelHandleResponse(resp)
	if err != nil {
		p.err = err
		return false
	}
	p.current = result
	return true
}

// PageResponse returns the current ManagementLocksClientListAtResourceGroupLevelResponse page.
func (p *ManagementLocksClientListAtResourceGroupLevelPager) PageResponse() ManagementLocksClientListAtResourceGroupLevelResponse {
	return p.current
}

// ManagementLocksClientListAtResourceLevelPager provides operations for iterating over paged responses.
type ManagementLocksClientListAtResourceLevelPager struct {
	client    *ManagementLocksClient
	current   ManagementLocksClientListAtResourceLevelResponse
	err       error
	requester func(context.Context) (*policy.Request, error)
	advancer  func(context.Context, ManagementLocksClientListAtResourceLevelResponse) (*policy.Request, error)
}

// Err returns the last error encountered while paging.
func (p *ManagementLocksClientListAtResourceLevelPager) Err() error {
	return p.err
}

// NextPage returns true if the pager advanced to the next page.
// Returns false if there are no more pages or an error occurred.
func (p *ManagementLocksClientListAtResourceLevelPager) NextPage(ctx context.Context) bool {
	var req *policy.Request
	var err error
	if !reflect.ValueOf(p.current).IsZero() {
		if p.current.ManagementLockListResult.NextLink == nil || len(*p.current.ManagementLockListResult.NextLink) == 0 {
			return false
		}
		req, err = p.advancer(ctx, p.current)
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		p.err = err
		return false
	}
	resp, err := p.client.pl.Do(req)
	if err != nil {
		p.err = err
		return false
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {
		p.err = runtime.NewResponseError(resp)
		return false
	}
	result, err := p.client.listAtResourceLevelHandleResponse(resp)
	if err != nil {
		p.err = err
		return false
	}
	p.current = result
	return true
}

// PageResponse returns the current ManagementLocksClientListAtResourceLevelResponse page.
func (p *ManagementLocksClientListAtResourceLevelPager) PageResponse() ManagementLocksClientListAtResourceLevelResponse {
	return p.current
}

// ManagementLocksClientListAtSubscriptionLevelPager provides operations for iterating over paged responses.
type ManagementLocksClientListAtSubscriptionLevelPager struct {
	client    *ManagementLocksClient
	current   ManagementLocksClientListAtSubscriptionLevelResponse
	err       error
	requester func(context.Context) (*policy.Request, error)
	advancer  func(context.Context, ManagementLocksClientListAtSubscriptionLevelResponse) (*policy.Request, error)
}

// Err returns the last error encountered while paging.
func (p *ManagementLocksClientListAtSubscriptionLevelPager) Err() error {
	return p.err
}

// NextPage returns true if the pager advanced to the next page.
// Returns false if there are no more pages or an error occurred.
func (p *ManagementLocksClientListAtSubscriptionLevelPager) NextPage(ctx context.Context) bool {
	var req *policy.Request
	var err error
	if !reflect.ValueOf(p.current).IsZero() {
		if p.current.ManagementLockListResult.NextLink == nil || len(*p.current.ManagementLockListResult.NextLink) == 0 {
			return false
		}
		req, err = p.advancer(ctx, p.current)
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		p.err = err
		return false
	}
	resp, err := p.client.pl.Do(req)
	if err != nil {
		p.err = err
		return false
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {
		p.err = runtime.NewResponseError(resp)
		return false
	}
	result, err := p.client.listAtSubscriptionLevelHandleResponse(resp)
	if err != nil {
		p.err = err
		return false
	}
	p.current = result
	return true
}

// PageResponse returns the current ManagementLocksClientListAtSubscriptionLevelResponse page.
func (p *ManagementLocksClientListAtSubscriptionLevelPager) PageResponse() ManagementLocksClientListAtSubscriptionLevelResponse {
	return p.current
}

// ManagementLocksClientListByScopePager provides operations for iterating over paged responses.
type ManagementLocksClientListByScopePager struct {
	client    *ManagementLocksClient
	current   ManagementLocksClientListByScopeResponse
	err       error
	requester func(context.Context) (*policy.Request, error)
	advancer  func(context.Context, ManagementLocksClientListByScopeResponse) (*policy.Request, error)
}

// Err returns the last error encountered while paging.
func (p *ManagementLocksClientListByScopePager) Err() error {
	return p.err
}

// NextPage returns true if the pager advanced to the next page.
// Returns false if there are no more pages or an error occurred.
func (p *ManagementLocksClientListByScopePager) NextPage(ctx context.Context) bool {
	var req *policy.Request
	var err error
	if !reflect.ValueOf(p.current).IsZero() {
		if p.current.ManagementLockListResult.NextLink == nil || len(*p.current.ManagementLockListResult.NextLink) == 0 {
			return false
		}
		req, err = p.advancer(ctx, p.current)
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		p.err = err
		return false
	}
	resp, err := p.client.pl.Do(req)
	if err != nil {
		p.err = err
		return false
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {
		p.err = runtime.NewResponseError(resp)
		return false
	}
	result, err := p.client.listByScopeHandleResponse(resp)
	if err != nil {
		p.err = err
		return false
	}
	p.current = result
	return true
}

// PageResponse returns the current ManagementLocksClientListByScopeResponse page.
func (p *ManagementLocksClientListByScopePager) PageResponse() ManagementLocksClientListByScopeResponse {
	return p.current
}
