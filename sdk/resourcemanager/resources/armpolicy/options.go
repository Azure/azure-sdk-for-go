//go:build go1.18
// +build go1.18

// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator. DO NOT EDIT.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

package armpolicy

// AssignmentsClientCreateByIDOptions contains the optional parameters for the AssignmentsClient.CreateByID method.
type AssignmentsClientCreateByIDOptions struct {
	// placeholder for future optional parameters
}

// AssignmentsClientCreateOptions contains the optional parameters for the AssignmentsClient.Create method.
type AssignmentsClientCreateOptions struct {
	// placeholder for future optional parameters
}

// AssignmentsClientDeleteByIDOptions contains the optional parameters for the AssignmentsClient.DeleteByID method.
type AssignmentsClientDeleteByIDOptions struct {
	// placeholder for future optional parameters
}

// AssignmentsClientDeleteOptions contains the optional parameters for the AssignmentsClient.Delete method.
type AssignmentsClientDeleteOptions struct {
	// placeholder for future optional parameters
}

// AssignmentsClientGetByIDOptions contains the optional parameters for the AssignmentsClient.GetByID method.
type AssignmentsClientGetByIDOptions struct {
	// placeholder for future optional parameters
}

// AssignmentsClientGetOptions contains the optional parameters for the AssignmentsClient.Get method.
type AssignmentsClientGetOptions struct {
	// placeholder for future optional parameters
}

// AssignmentsClientListForManagementGroupOptions contains the optional parameters for the AssignmentsClient.NewListForManagementGroupPager
// method.
type AssignmentsClientListForManagementGroupOptions struct {
	// The filter to apply on the operation. Valid values for $filter are: 'atScope()', 'atExactScope()' or 'policyDefinitionId
	// eq '{value}''. If $filter is not provided, no filtering is performed. If
	// $filter=atScope() is provided, the returned list only includes all policy assignments that apply to the scope, which is
	// everything in the unfiltered list except those applied to sub scopes contained
	// within the given scope. If $filter=atExactScope() is provided, the returned list only includes all policy assignments that
	// at the given scope. If $filter=policyDefinitionId eq '{value}' is provided,
	// the returned list includes all policy assignments of the policy definition whose id is {value}.
	Filter *string

	// Maximum number of records to return. When the $top filter is not provided, it will return 500 records.
	Top *int32
}

// AssignmentsClientListForResourceGroupOptions contains the optional parameters for the AssignmentsClient.NewListForResourceGroupPager
// method.
type AssignmentsClientListForResourceGroupOptions struct {
	// The filter to apply on the operation. Valid values for $filter are: 'atScope()', 'atExactScope()' or 'policyDefinitionId
	// eq '{value}''. If $filter is not provided, no filtering is performed. If
	// $filter=atScope() is provided, the returned list only includes all policy assignments that apply to the scope, which is
	// everything in the unfiltered list except those applied to sub scopes contained
	// within the given scope. If $filter=atExactScope() is provided, the returned list only includes all policy assignments that
	// at the given scope. If $filter=policyDefinitionId eq '{value}' is provided,
	// the returned list includes all policy assignments of the policy definition whose id is {value}.
	Filter *string

	// Maximum number of records to return. When the $top filter is not provided, it will return 500 records.
	Top *int32
}

// AssignmentsClientListForResourceOptions contains the optional parameters for the AssignmentsClient.NewListForResourcePager
// method.
type AssignmentsClientListForResourceOptions struct {
	// The filter to apply on the operation. Valid values for $filter are: 'atScope()', 'atExactScope()' or 'policyDefinitionId
	// eq '{value}''. If $filter is not provided, no filtering is performed. If
	// $filter=atScope() is provided, the returned list only includes all policy assignments that apply to the scope, which is
	// everything in the unfiltered list except those applied to sub scopes contained
	// within the given scope. If $filter=atExactScope() is provided, the returned list only includes all policy assignments that
	// at the given scope. If $filter=policyDefinitionId eq '{value}' is provided,
	// the returned list includes all policy assignments of the policy definition whose id is {value}.
	Filter *string

	// Maximum number of records to return. When the $top filter is not provided, it will return 500 records.
	Top *int32
}

// AssignmentsClientListOptions contains the optional parameters for the AssignmentsClient.NewListPager method.
type AssignmentsClientListOptions struct {
	// The filter to apply on the operation. Valid values for $filter are: 'atScope()', 'atExactScope()' or 'policyDefinitionId
	// eq '{value}''. If $filter is not provided, no filtering is performed. If
	// $filter=atScope() is provided, the returned list only includes all policy assignments that apply to the scope, which is
	// everything in the unfiltered list except those applied to sub scopes contained
	// within the given scope. If $filter=atExactScope() is provided, the returned list only includes all policy assignments that
	// at the given scope. If $filter=policyDefinitionId eq '{value}' is provided,
	// the returned list includes all policy assignments of the policy definition whose id is {value}.
	Filter *string

	// Maximum number of records to return. When the $top filter is not provided, it will return 500 records.
	Top *int32
}

// AssignmentsClientUpdateByIDOptions contains the optional parameters for the AssignmentsClient.UpdateByID method.
type AssignmentsClientUpdateByIDOptions struct {
	// placeholder for future optional parameters
}

// AssignmentsClientUpdateOptions contains the optional parameters for the AssignmentsClient.Update method.
type AssignmentsClientUpdateOptions struct {
	// placeholder for future optional parameters
}

// DataPolicyManifestsClientGetByPolicyModeOptions contains the optional parameters for the DataPolicyManifestsClient.GetByPolicyMode
// method.
type DataPolicyManifestsClientGetByPolicyModeOptions struct {
	// placeholder for future optional parameters
}

// DataPolicyManifestsClientListOptions contains the optional parameters for the DataPolicyManifestsClient.NewListPager method.
type DataPolicyManifestsClientListOptions struct {
	// The filter to apply on the operation. Valid values for $filter are: "namespace eq '{value}'". If $filter is not provided,
	// no filtering is performed. If $filter=namespace eq '{value}' is provided, the
	// returned list only includes all data policy manifests that have a namespace matching the provided value.
	Filter *string
}

// DefinitionsClientCreateOrUpdateAtManagementGroupOptions contains the optional parameters for the DefinitionsClient.CreateOrUpdateAtManagementGroup
// method.
type DefinitionsClientCreateOrUpdateAtManagementGroupOptions struct {
	// placeholder for future optional parameters
}

// DefinitionsClientCreateOrUpdateOptions contains the optional parameters for the DefinitionsClient.CreateOrUpdate method.
type DefinitionsClientCreateOrUpdateOptions struct {
	// placeholder for future optional parameters
}

// DefinitionsClientDeleteAtManagementGroupOptions contains the optional parameters for the DefinitionsClient.DeleteAtManagementGroup
// method.
type DefinitionsClientDeleteAtManagementGroupOptions struct {
	// placeholder for future optional parameters
}

// DefinitionsClientDeleteOptions contains the optional parameters for the DefinitionsClient.Delete method.
type DefinitionsClientDeleteOptions struct {
	// placeholder for future optional parameters
}

// DefinitionsClientGetAtManagementGroupOptions contains the optional parameters for the DefinitionsClient.GetAtManagementGroup
// method.
type DefinitionsClientGetAtManagementGroupOptions struct {
	// placeholder for future optional parameters
}

// DefinitionsClientGetBuiltInOptions contains the optional parameters for the DefinitionsClient.GetBuiltIn method.
type DefinitionsClientGetBuiltInOptions struct {
	// placeholder for future optional parameters
}

// DefinitionsClientGetOptions contains the optional parameters for the DefinitionsClient.Get method.
type DefinitionsClientGetOptions struct {
	// placeholder for future optional parameters
}

// DefinitionsClientListBuiltInOptions contains the optional parameters for the DefinitionsClient.NewListBuiltInPager method.
type DefinitionsClientListBuiltInOptions struct {
	// The filter to apply on the operation. Valid values for $filter are: 'atExactScope()', 'policyType -eq {value}' or 'category
	// eq '{value}''. If $filter is not provided, no filtering is performed. If
	// $filter=atExactScope() is provided, the returned list only includes all policy definitions that at the given scope. If
	// $filter='policyType -eq {value}' is provided, the returned list only includes all
	// policy definitions whose type match the {value}. Possible policyType values are NotSpecified, BuiltIn, Custom, and Static.
	// If $filter='category -eq {value}' is provided, the returned list only
	// includes all policy definitions whose category match the {value}.
	Filter *string

	// Maximum number of records to return. When the $top filter is not provided, it will return 500 records.
	Top *int32
}

// DefinitionsClientListByManagementGroupOptions contains the optional parameters for the DefinitionsClient.NewListByManagementGroupPager
// method.
type DefinitionsClientListByManagementGroupOptions struct {
	// The filter to apply on the operation. Valid values for $filter are: 'atExactScope()', 'policyType -eq {value}' or 'category
	// eq '{value}''. If $filter is not provided, no filtering is performed. If
	// $filter=atExactScope() is provided, the returned list only includes all policy definitions that at the given scope. If
	// $filter='policyType -eq {value}' is provided, the returned list only includes all
	// policy definitions whose type match the {value}. Possible policyType values are NotSpecified, BuiltIn, Custom, and Static.
	// If $filter='category -eq {value}' is provided, the returned list only
	// includes all policy definitions whose category match the {value}.
	Filter *string

	// Maximum number of records to return. When the $top filter is not provided, it will return 500 records.
	Top *int32
}

// DefinitionsClientListOptions contains the optional parameters for the DefinitionsClient.NewListPager method.
type DefinitionsClientListOptions struct {
	// The filter to apply on the operation. Valid values for $filter are: 'atExactScope()', 'policyType -eq {value}' or 'category
	// eq '{value}''. If $filter is not provided, no filtering is performed. If
	// $filter=atExactScope() is provided, the returned list only includes all policy definitions that at the given scope. If
	// $filter='policyType -eq {value}' is provided, the returned list only includes all
	// policy definitions whose type match the {value}. Possible policyType values are NotSpecified, BuiltIn, Custom, and Static.
	// If $filter='category -eq {value}' is provided, the returned list only
	// includes all policy definitions whose category match the {value}.
	Filter *string

	// Maximum number of records to return. When the $top filter is not provided, it will return 500 records.
	Top *int32
}

// ExemptionsClientCreateOrUpdateOptions contains the optional parameters for the ExemptionsClient.CreateOrUpdate method.
type ExemptionsClientCreateOrUpdateOptions struct {
	// placeholder for future optional parameters
}

// ExemptionsClientDeleteOptions contains the optional parameters for the ExemptionsClient.Delete method.
type ExemptionsClientDeleteOptions struct {
	// placeholder for future optional parameters
}

// ExemptionsClientGetOptions contains the optional parameters for the ExemptionsClient.Get method.
type ExemptionsClientGetOptions struct {
	// placeholder for future optional parameters
}

// ExemptionsClientListForManagementGroupOptions contains the optional parameters for the ExemptionsClient.NewListForManagementGroupPager
// method.
type ExemptionsClientListForManagementGroupOptions struct {
	// The filter to apply on the operation. Valid values for $filter are: 'atScope()', 'atExactScope()', 'excludeExpired()' or
	// 'policyAssignmentId eq '{value}''. If $filter is not provided, no filtering is
	// performed. If $filter is not provided, the unfiltered list includes all policy exemptions associated with the scope, including
	// those that apply directly or apply from containing scopes. If
	// $filter=atScope() is provided, the returned list only includes all policy exemptions that apply to the scope, which is
	// everything in the unfiltered list except those applied to sub scopes contained
	// within the given scope. If $filter=atExactScope() is provided, the returned list only includes all policy exemptions that
	// at the given scope. If $filter=excludeExpired() is provided, the returned list
	// only includes all policy exemptions that either haven't expired or didn't set expiration date. If $filter=policyAssignmentId
	// eq '{value}' is provided. the returned list only includes all policy
	// exemptions that are associated with the give policyAssignmentId.
	Filter *string
}

// ExemptionsClientListForResourceGroupOptions contains the optional parameters for the ExemptionsClient.NewListForResourceGroupPager
// method.
type ExemptionsClientListForResourceGroupOptions struct {
	// The filter to apply on the operation. Valid values for $filter are: 'atScope()', 'atExactScope()', 'excludeExpired()' or
	// 'policyAssignmentId eq '{value}''. If $filter is not provided, no filtering is
	// performed. If $filter is not provided, the unfiltered list includes all policy exemptions associated with the scope, including
	// those that apply directly or apply from containing scopes. If
	// $filter=atScope() is provided, the returned list only includes all policy exemptions that apply to the scope, which is
	// everything in the unfiltered list except those applied to sub scopes contained
	// within the given scope. If $filter=atExactScope() is provided, the returned list only includes all policy exemptions that
	// at the given scope. If $filter=excludeExpired() is provided, the returned list
	// only includes all policy exemptions that either haven't expired or didn't set expiration date. If $filter=policyAssignmentId
	// eq '{value}' is provided. the returned list only includes all policy
	// exemptions that are associated with the give policyAssignmentId.
	Filter *string
}

// ExemptionsClientListForResourceOptions contains the optional parameters for the ExemptionsClient.NewListForResourcePager
// method.
type ExemptionsClientListForResourceOptions struct {
	// The filter to apply on the operation. Valid values for $filter are: 'atScope()', 'atExactScope()', 'excludeExpired()' or
	// 'policyAssignmentId eq '{value}''. If $filter is not provided, no filtering is
	// performed. If $filter is not provided, the unfiltered list includes all policy exemptions associated with the scope, including
	// those that apply directly or apply from containing scopes. If
	// $filter=atScope() is provided, the returned list only includes all policy exemptions that apply to the scope, which is
	// everything in the unfiltered list except those applied to sub scopes contained
	// within the given scope. If $filter=atExactScope() is provided, the returned list only includes all policy exemptions that
	// at the given scope. If $filter=excludeExpired() is provided, the returned list
	// only includes all policy exemptions that either haven't expired or didn't set expiration date. If $filter=policyAssignmentId
	// eq '{value}' is provided. the returned list only includes all policy
	// exemptions that are associated with the give policyAssignmentId.
	Filter *string
}

// ExemptionsClientListOptions contains the optional parameters for the ExemptionsClient.NewListPager method.
type ExemptionsClientListOptions struct {
	// The filter to apply on the operation. Valid values for $filter are: 'atScope()', 'atExactScope()', 'excludeExpired()' or
	// 'policyAssignmentId eq '{value}''. If $filter is not provided, no filtering is
	// performed. If $filter is not provided, the unfiltered list includes all policy exemptions associated with the scope, including
	// those that apply directly or apply from containing scopes. If
	// $filter=atScope() is provided, the returned list only includes all policy exemptions that apply to the scope, which is
	// everything in the unfiltered list except those applied to sub scopes contained
	// within the given scope. If $filter=atExactScope() is provided, the returned list only includes all policy exemptions that
	// at the given scope. If $filter=excludeExpired() is provided, the returned list
	// only includes all policy exemptions that either haven't expired or didn't set expiration date. If $filter=policyAssignmentId
	// eq '{value}' is provided. the returned list only includes all policy
	// exemptions that are associated with the give policyAssignmentId.
	Filter *string
}

// ExemptionsClientUpdateOptions contains the optional parameters for the ExemptionsClient.Update method.
type ExemptionsClientUpdateOptions struct {
	// placeholder for future optional parameters
}

// SetDefinitionsClientCreateOrUpdateAtManagementGroupOptions contains the optional parameters for the SetDefinitionsClient.CreateOrUpdateAtManagementGroup
// method.
type SetDefinitionsClientCreateOrUpdateAtManagementGroupOptions struct {
	// placeholder for future optional parameters
}

// SetDefinitionsClientCreateOrUpdateOptions contains the optional parameters for the SetDefinitionsClient.CreateOrUpdate
// method.
type SetDefinitionsClientCreateOrUpdateOptions struct {
	// placeholder for future optional parameters
}

// SetDefinitionsClientDeleteAtManagementGroupOptions contains the optional parameters for the SetDefinitionsClient.DeleteAtManagementGroup
// method.
type SetDefinitionsClientDeleteAtManagementGroupOptions struct {
	// placeholder for future optional parameters
}

// SetDefinitionsClientDeleteOptions contains the optional parameters for the SetDefinitionsClient.Delete method.
type SetDefinitionsClientDeleteOptions struct {
	// placeholder for future optional parameters
}

// SetDefinitionsClientGetAtManagementGroupOptions contains the optional parameters for the SetDefinitionsClient.GetAtManagementGroup
// method.
type SetDefinitionsClientGetAtManagementGroupOptions struct {
	// placeholder for future optional parameters
}

// SetDefinitionsClientGetBuiltInOptions contains the optional parameters for the SetDefinitionsClient.GetBuiltIn method.
type SetDefinitionsClientGetBuiltInOptions struct {
	// placeholder for future optional parameters
}

// SetDefinitionsClientGetOptions contains the optional parameters for the SetDefinitionsClient.Get method.
type SetDefinitionsClientGetOptions struct {
	// placeholder for future optional parameters
}

// SetDefinitionsClientListBuiltInOptions contains the optional parameters for the SetDefinitionsClient.NewListBuiltInPager
// method.
type SetDefinitionsClientListBuiltInOptions struct {
	// The filter to apply on the operation. Valid values for $filter are: 'atExactScope()', 'policyType -eq {value}' or 'category
	// eq '{value}''. If $filter is not provided, no filtering is performed. If
	// $filter=atExactScope() is provided, the returned list only includes all policy set definitions that at the given scope.
	// If $filter='policyType -eq {value}' is provided, the returned list only includes
	// all policy set definitions whose type match the {value}. Possible policyType values are NotSpecified, BuiltIn, Custom,
	// and Static. If $filter='category -eq {value}' is provided, the returned list only
	// includes all policy set definitions whose category match the {value}.
	Filter *string

	// Maximum number of records to return. When the $top filter is not provided, it will return 500 records.
	Top *int32
}

// SetDefinitionsClientListByManagementGroupOptions contains the optional parameters for the SetDefinitionsClient.NewListByManagementGroupPager
// method.
type SetDefinitionsClientListByManagementGroupOptions struct {
	// The filter to apply on the operation. Valid values for $filter are: 'atExactScope()', 'policyType -eq {value}' or 'category
	// eq '{value}''. If $filter is not provided, no filtering is performed. If
	// $filter=atExactScope() is provided, the returned list only includes all policy set definitions that at the given scope.
	// If $filter='policyType -eq {value}' is provided, the returned list only includes
	// all policy set definitions whose type match the {value}. Possible policyType values are NotSpecified, BuiltIn, Custom,
	// and Static. If $filter='category -eq {value}' is provided, the returned list only
	// includes all policy set definitions whose category match the {value}.
	Filter *string

	// Maximum number of records to return. When the $top filter is not provided, it will return 500 records.
	Top *int32
}

// SetDefinitionsClientListOptions contains the optional parameters for the SetDefinitionsClient.NewListPager method.
type SetDefinitionsClientListOptions struct {
	// The filter to apply on the operation. Valid values for $filter are: 'atExactScope()', 'policyType -eq {value}' or 'category
	// eq '{value}''. If $filter is not provided, no filtering is performed. If
	// $filter=atExactScope() is provided, the returned list only includes all policy set definitions that at the given scope.
	// If $filter='policyType -eq {value}' is provided, the returned list only includes
	// all policy set definitions whose type match the {value}. Possible policyType values are NotSpecified, BuiltIn, Custom,
	// and Static. If $filter='category -eq {value}' is provided, the returned list only
	// includes all policy set definitions whose category match the {value}.
	Filter *string

	// Maximum number of records to return. When the $top filter is not provided, it will return 500 records.
	Top *int32
}

// VariableValuesClientCreateOrUpdateAtManagementGroupOptions contains the optional parameters for the VariableValuesClient.CreateOrUpdateAtManagementGroup
// method.
type VariableValuesClientCreateOrUpdateAtManagementGroupOptions struct {
	// placeholder for future optional parameters
}

// VariableValuesClientCreateOrUpdateOptions contains the optional parameters for the VariableValuesClient.CreateOrUpdate
// method.
type VariableValuesClientCreateOrUpdateOptions struct {
	// placeholder for future optional parameters
}

// VariableValuesClientDeleteAtManagementGroupOptions contains the optional parameters for the VariableValuesClient.DeleteAtManagementGroup
// method.
type VariableValuesClientDeleteAtManagementGroupOptions struct {
	// placeholder for future optional parameters
}

// VariableValuesClientDeleteOptions contains the optional parameters for the VariableValuesClient.Delete method.
type VariableValuesClientDeleteOptions struct {
	// placeholder for future optional parameters
}

// VariableValuesClientGetAtManagementGroupOptions contains the optional parameters for the VariableValuesClient.GetAtManagementGroup
// method.
type VariableValuesClientGetAtManagementGroupOptions struct {
	// placeholder for future optional parameters
}

// VariableValuesClientGetOptions contains the optional parameters for the VariableValuesClient.Get method.
type VariableValuesClientGetOptions struct {
	// placeholder for future optional parameters
}

// VariableValuesClientListForManagementGroupOptions contains the optional parameters for the VariableValuesClient.NewListForManagementGroupPager
// method.
type VariableValuesClientListForManagementGroupOptions struct {
	// placeholder for future optional parameters
}

// VariableValuesClientListOptions contains the optional parameters for the VariableValuesClient.NewListPager method.
type VariableValuesClientListOptions struct {
	// placeholder for future optional parameters
}

// VariablesClientCreateOrUpdateAtManagementGroupOptions contains the optional parameters for the VariablesClient.CreateOrUpdateAtManagementGroup
// method.
type VariablesClientCreateOrUpdateAtManagementGroupOptions struct {
	// placeholder for future optional parameters
}

// VariablesClientCreateOrUpdateOptions contains the optional parameters for the VariablesClient.CreateOrUpdate method.
type VariablesClientCreateOrUpdateOptions struct {
	// placeholder for future optional parameters
}

// VariablesClientDeleteAtManagementGroupOptions contains the optional parameters for the VariablesClient.DeleteAtManagementGroup
// method.
type VariablesClientDeleteAtManagementGroupOptions struct {
	// placeholder for future optional parameters
}

// VariablesClientDeleteOptions contains the optional parameters for the VariablesClient.Delete method.
type VariablesClientDeleteOptions struct {
	// placeholder for future optional parameters
}

// VariablesClientGetAtManagementGroupOptions contains the optional parameters for the VariablesClient.GetAtManagementGroup
// method.
type VariablesClientGetAtManagementGroupOptions struct {
	// placeholder for future optional parameters
}

// VariablesClientGetOptions contains the optional parameters for the VariablesClient.Get method.
type VariablesClientGetOptions struct {
	// placeholder for future optional parameters
}

// VariablesClientListForManagementGroupOptions contains the optional parameters for the VariablesClient.NewListForManagementGroupPager
// method.
type VariablesClientListForManagementGroupOptions struct {
	// placeholder for future optional parameters
}

// VariablesClientListOptions contains the optional parameters for the VariablesClient.NewListPager method.
type VariablesClientListOptions struct {
	// placeholder for future optional parameters
}
