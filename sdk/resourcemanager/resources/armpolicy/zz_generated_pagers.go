//go:build go1.16
// +build go1.16

// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

package armpolicy

import (
	"context"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/policy"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/runtime"
	"net/http"
	"reflect"
)

// DataPolicyManifestsListPager provides operations for iterating over paged responses.
type DataPolicyManifestsListPager struct {
	client    *DataPolicyManifestsClient
	current   DataPolicyManifestsListResponse
	err       error
	requester func(context.Context) (*policy.Request, error)
	advancer  func(context.Context, DataPolicyManifestsListResponse) (*policy.Request, error)
}

// Err returns the last error encountered while paging.
func (p *DataPolicyManifestsListPager) Err() error {
	return p.err
}

// NextPage returns true if the pager advanced to the next page.
// Returns false if there are no more pages or an error occurred.
func (p *DataPolicyManifestsListPager) NextPage(ctx context.Context) bool {
	var req *policy.Request
	var err error
	if !reflect.ValueOf(p.current).IsZero() {
		if p.current.DataPolicyManifestListResult.NextLink == nil || len(*p.current.DataPolicyManifestListResult.NextLink) == 0 {
			return false
		}
		req, err = p.advancer(ctx, p.current)
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		p.err = err
		return false
	}
	resp, err := p.client.pl.Do(req)
	if err != nil {
		p.err = err
		return false
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {
		p.err = p.client.listHandleError(resp)
		return false
	}
	result, err := p.client.listHandleResponse(resp)
	if err != nil {
		p.err = err
		return false
	}
	p.current = result
	return true
}

// PageResponse returns the current DataPolicyManifestsListResponse page.
func (p *DataPolicyManifestsListPager) PageResponse() DataPolicyManifestsListResponse {
	return p.current
}

// PolicyAssignmentsListForManagementGroupPager provides operations for iterating over paged responses.
type PolicyAssignmentsListForManagementGroupPager struct {
	client    *PolicyAssignmentsClient
	current   PolicyAssignmentsListForManagementGroupResponse
	err       error
	requester func(context.Context) (*policy.Request, error)
	advancer  func(context.Context, PolicyAssignmentsListForManagementGroupResponse) (*policy.Request, error)
}

// Err returns the last error encountered while paging.
func (p *PolicyAssignmentsListForManagementGroupPager) Err() error {
	return p.err
}

// NextPage returns true if the pager advanced to the next page.
// Returns false if there are no more pages or an error occurred.
func (p *PolicyAssignmentsListForManagementGroupPager) NextPage(ctx context.Context) bool {
	var req *policy.Request
	var err error
	if !reflect.ValueOf(p.current).IsZero() {
		if p.current.PolicyAssignmentListResult.NextLink == nil || len(*p.current.PolicyAssignmentListResult.NextLink) == 0 {
			return false
		}
		req, err = p.advancer(ctx, p.current)
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		p.err = err
		return false
	}
	resp, err := p.client.pl.Do(req)
	if err != nil {
		p.err = err
		return false
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {
		p.err = p.client.listForManagementGroupHandleError(resp)
		return false
	}
	result, err := p.client.listForManagementGroupHandleResponse(resp)
	if err != nil {
		p.err = err
		return false
	}
	p.current = result
	return true
}

// PageResponse returns the current PolicyAssignmentsListForManagementGroupResponse page.
func (p *PolicyAssignmentsListForManagementGroupPager) PageResponse() PolicyAssignmentsListForManagementGroupResponse {
	return p.current
}

// PolicyAssignmentsListForResourceGroupPager provides operations for iterating over paged responses.
type PolicyAssignmentsListForResourceGroupPager struct {
	client    *PolicyAssignmentsClient
	current   PolicyAssignmentsListForResourceGroupResponse
	err       error
	requester func(context.Context) (*policy.Request, error)
	advancer  func(context.Context, PolicyAssignmentsListForResourceGroupResponse) (*policy.Request, error)
}

// Err returns the last error encountered while paging.
func (p *PolicyAssignmentsListForResourceGroupPager) Err() error {
	return p.err
}

// NextPage returns true if the pager advanced to the next page.
// Returns false if there are no more pages or an error occurred.
func (p *PolicyAssignmentsListForResourceGroupPager) NextPage(ctx context.Context) bool {
	var req *policy.Request
	var err error
	if !reflect.ValueOf(p.current).IsZero() {
		if p.current.PolicyAssignmentListResult.NextLink == nil || len(*p.current.PolicyAssignmentListResult.NextLink) == 0 {
			return false
		}
		req, err = p.advancer(ctx, p.current)
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		p.err = err
		return false
	}
	resp, err := p.client.pl.Do(req)
	if err != nil {
		p.err = err
		return false
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {
		p.err = p.client.listForResourceGroupHandleError(resp)
		return false
	}
	result, err := p.client.listForResourceGroupHandleResponse(resp)
	if err != nil {
		p.err = err
		return false
	}
	p.current = result
	return true
}

// PageResponse returns the current PolicyAssignmentsListForResourceGroupResponse page.
func (p *PolicyAssignmentsListForResourceGroupPager) PageResponse() PolicyAssignmentsListForResourceGroupResponse {
	return p.current
}

// PolicyAssignmentsListForResourcePager provides operations for iterating over paged responses.
type PolicyAssignmentsListForResourcePager struct {
	client    *PolicyAssignmentsClient
	current   PolicyAssignmentsListForResourceResponse
	err       error
	requester func(context.Context) (*policy.Request, error)
	advancer  func(context.Context, PolicyAssignmentsListForResourceResponse) (*policy.Request, error)
}

// Err returns the last error encountered while paging.
func (p *PolicyAssignmentsListForResourcePager) Err() error {
	return p.err
}

// NextPage returns true if the pager advanced to the next page.
// Returns false if there are no more pages or an error occurred.
func (p *PolicyAssignmentsListForResourcePager) NextPage(ctx context.Context) bool {
	var req *policy.Request
	var err error
	if !reflect.ValueOf(p.current).IsZero() {
		if p.current.PolicyAssignmentListResult.NextLink == nil || len(*p.current.PolicyAssignmentListResult.NextLink) == 0 {
			return false
		}
		req, err = p.advancer(ctx, p.current)
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		p.err = err
		return false
	}
	resp, err := p.client.pl.Do(req)
	if err != nil {
		p.err = err
		return false
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {
		p.err = p.client.listForResourceHandleError(resp)
		return false
	}
	result, err := p.client.listForResourceHandleResponse(resp)
	if err != nil {
		p.err = err
		return false
	}
	p.current = result
	return true
}

// PageResponse returns the current PolicyAssignmentsListForResourceResponse page.
func (p *PolicyAssignmentsListForResourcePager) PageResponse() PolicyAssignmentsListForResourceResponse {
	return p.current
}

// PolicyAssignmentsListPager provides operations for iterating over paged responses.
type PolicyAssignmentsListPager struct {
	client    *PolicyAssignmentsClient
	current   PolicyAssignmentsListResponse
	err       error
	requester func(context.Context) (*policy.Request, error)
	advancer  func(context.Context, PolicyAssignmentsListResponse) (*policy.Request, error)
}

// Err returns the last error encountered while paging.
func (p *PolicyAssignmentsListPager) Err() error {
	return p.err
}

// NextPage returns true if the pager advanced to the next page.
// Returns false if there are no more pages or an error occurred.
func (p *PolicyAssignmentsListPager) NextPage(ctx context.Context) bool {
	var req *policy.Request
	var err error
	if !reflect.ValueOf(p.current).IsZero() {
		if p.current.PolicyAssignmentListResult.NextLink == nil || len(*p.current.PolicyAssignmentListResult.NextLink) == 0 {
			return false
		}
		req, err = p.advancer(ctx, p.current)
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		p.err = err
		return false
	}
	resp, err := p.client.pl.Do(req)
	if err != nil {
		p.err = err
		return false
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {
		p.err = p.client.listHandleError(resp)
		return false
	}
	result, err := p.client.listHandleResponse(resp)
	if err != nil {
		p.err = err
		return false
	}
	p.current = result
	return true
}

// PageResponse returns the current PolicyAssignmentsListResponse page.
func (p *PolicyAssignmentsListPager) PageResponse() PolicyAssignmentsListResponse {
	return p.current
}

// PolicyDefinitionsListBuiltInPager provides operations for iterating over paged responses.
type PolicyDefinitionsListBuiltInPager struct {
	client    *PolicyDefinitionsClient
	current   PolicyDefinitionsListBuiltInResponse
	err       error
	requester func(context.Context) (*policy.Request, error)
	advancer  func(context.Context, PolicyDefinitionsListBuiltInResponse) (*policy.Request, error)
}

// Err returns the last error encountered while paging.
func (p *PolicyDefinitionsListBuiltInPager) Err() error {
	return p.err
}

// NextPage returns true if the pager advanced to the next page.
// Returns false if there are no more pages or an error occurred.
func (p *PolicyDefinitionsListBuiltInPager) NextPage(ctx context.Context) bool {
	var req *policy.Request
	var err error
	if !reflect.ValueOf(p.current).IsZero() {
		if p.current.PolicyDefinitionListResult.NextLink == nil || len(*p.current.PolicyDefinitionListResult.NextLink) == 0 {
			return false
		}
		req, err = p.advancer(ctx, p.current)
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		p.err = err
		return false
	}
	resp, err := p.client.pl.Do(req)
	if err != nil {
		p.err = err
		return false
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {
		p.err = p.client.listBuiltInHandleError(resp)
		return false
	}
	result, err := p.client.listBuiltInHandleResponse(resp)
	if err != nil {
		p.err = err
		return false
	}
	p.current = result
	return true
}

// PageResponse returns the current PolicyDefinitionsListBuiltInResponse page.
func (p *PolicyDefinitionsListBuiltInPager) PageResponse() PolicyDefinitionsListBuiltInResponse {
	return p.current
}

// PolicyDefinitionsListByManagementGroupPager provides operations for iterating over paged responses.
type PolicyDefinitionsListByManagementGroupPager struct {
	client    *PolicyDefinitionsClient
	current   PolicyDefinitionsListByManagementGroupResponse
	err       error
	requester func(context.Context) (*policy.Request, error)
	advancer  func(context.Context, PolicyDefinitionsListByManagementGroupResponse) (*policy.Request, error)
}

// Err returns the last error encountered while paging.
func (p *PolicyDefinitionsListByManagementGroupPager) Err() error {
	return p.err
}

// NextPage returns true if the pager advanced to the next page.
// Returns false if there are no more pages or an error occurred.
func (p *PolicyDefinitionsListByManagementGroupPager) NextPage(ctx context.Context) bool {
	var req *policy.Request
	var err error
	if !reflect.ValueOf(p.current).IsZero() {
		if p.current.PolicyDefinitionListResult.NextLink == nil || len(*p.current.PolicyDefinitionListResult.NextLink) == 0 {
			return false
		}
		req, err = p.advancer(ctx, p.current)
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		p.err = err
		return false
	}
	resp, err := p.client.pl.Do(req)
	if err != nil {
		p.err = err
		return false
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {
		p.err = p.client.listByManagementGroupHandleError(resp)
		return false
	}
	result, err := p.client.listByManagementGroupHandleResponse(resp)
	if err != nil {
		p.err = err
		return false
	}
	p.current = result
	return true
}

// PageResponse returns the current PolicyDefinitionsListByManagementGroupResponse page.
func (p *PolicyDefinitionsListByManagementGroupPager) PageResponse() PolicyDefinitionsListByManagementGroupResponse {
	return p.current
}

// PolicyDefinitionsListPager provides operations for iterating over paged responses.
type PolicyDefinitionsListPager struct {
	client    *PolicyDefinitionsClient
	current   PolicyDefinitionsListResponse
	err       error
	requester func(context.Context) (*policy.Request, error)
	advancer  func(context.Context, PolicyDefinitionsListResponse) (*policy.Request, error)
}

// Err returns the last error encountered while paging.
func (p *PolicyDefinitionsListPager) Err() error {
	return p.err
}

// NextPage returns true if the pager advanced to the next page.
// Returns false if there are no more pages or an error occurred.
func (p *PolicyDefinitionsListPager) NextPage(ctx context.Context) bool {
	var req *policy.Request
	var err error
	if !reflect.ValueOf(p.current).IsZero() {
		if p.current.PolicyDefinitionListResult.NextLink == nil || len(*p.current.PolicyDefinitionListResult.NextLink) == 0 {
			return false
		}
		req, err = p.advancer(ctx, p.current)
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		p.err = err
		return false
	}
	resp, err := p.client.pl.Do(req)
	if err != nil {
		p.err = err
		return false
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {
		p.err = p.client.listHandleError(resp)
		return false
	}
	result, err := p.client.listHandleResponse(resp)
	if err != nil {
		p.err = err
		return false
	}
	p.current = result
	return true
}

// PageResponse returns the current PolicyDefinitionsListResponse page.
func (p *PolicyDefinitionsListPager) PageResponse() PolicyDefinitionsListResponse {
	return p.current
}

// PolicyExemptionsListForManagementGroupPager provides operations for iterating over paged responses.
type PolicyExemptionsListForManagementGroupPager struct {
	client    *PolicyExemptionsClient
	current   PolicyExemptionsListForManagementGroupResponse
	err       error
	requester func(context.Context) (*policy.Request, error)
	advancer  func(context.Context, PolicyExemptionsListForManagementGroupResponse) (*policy.Request, error)
}

// Err returns the last error encountered while paging.
func (p *PolicyExemptionsListForManagementGroupPager) Err() error {
	return p.err
}

// NextPage returns true if the pager advanced to the next page.
// Returns false if there are no more pages or an error occurred.
func (p *PolicyExemptionsListForManagementGroupPager) NextPage(ctx context.Context) bool {
	var req *policy.Request
	var err error
	if !reflect.ValueOf(p.current).IsZero() {
		if p.current.PolicyExemptionListResult.NextLink == nil || len(*p.current.PolicyExemptionListResult.NextLink) == 0 {
			return false
		}
		req, err = p.advancer(ctx, p.current)
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		p.err = err
		return false
	}
	resp, err := p.client.pl.Do(req)
	if err != nil {
		p.err = err
		return false
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {
		p.err = p.client.listForManagementGroupHandleError(resp)
		return false
	}
	result, err := p.client.listForManagementGroupHandleResponse(resp)
	if err != nil {
		p.err = err
		return false
	}
	p.current = result
	return true
}

// PageResponse returns the current PolicyExemptionsListForManagementGroupResponse page.
func (p *PolicyExemptionsListForManagementGroupPager) PageResponse() PolicyExemptionsListForManagementGroupResponse {
	return p.current
}

// PolicyExemptionsListForResourceGroupPager provides operations for iterating over paged responses.
type PolicyExemptionsListForResourceGroupPager struct {
	client    *PolicyExemptionsClient
	current   PolicyExemptionsListForResourceGroupResponse
	err       error
	requester func(context.Context) (*policy.Request, error)
	advancer  func(context.Context, PolicyExemptionsListForResourceGroupResponse) (*policy.Request, error)
}

// Err returns the last error encountered while paging.
func (p *PolicyExemptionsListForResourceGroupPager) Err() error {
	return p.err
}

// NextPage returns true if the pager advanced to the next page.
// Returns false if there are no more pages or an error occurred.
func (p *PolicyExemptionsListForResourceGroupPager) NextPage(ctx context.Context) bool {
	var req *policy.Request
	var err error
	if !reflect.ValueOf(p.current).IsZero() {
		if p.current.PolicyExemptionListResult.NextLink == nil || len(*p.current.PolicyExemptionListResult.NextLink) == 0 {
			return false
		}
		req, err = p.advancer(ctx, p.current)
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		p.err = err
		return false
	}
	resp, err := p.client.pl.Do(req)
	if err != nil {
		p.err = err
		return false
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {
		p.err = p.client.listForResourceGroupHandleError(resp)
		return false
	}
	result, err := p.client.listForResourceGroupHandleResponse(resp)
	if err != nil {
		p.err = err
		return false
	}
	p.current = result
	return true
}

// PageResponse returns the current PolicyExemptionsListForResourceGroupResponse page.
func (p *PolicyExemptionsListForResourceGroupPager) PageResponse() PolicyExemptionsListForResourceGroupResponse {
	return p.current
}

// PolicyExemptionsListForResourcePager provides operations for iterating over paged responses.
type PolicyExemptionsListForResourcePager struct {
	client    *PolicyExemptionsClient
	current   PolicyExemptionsListForResourceResponse
	err       error
	requester func(context.Context) (*policy.Request, error)
	advancer  func(context.Context, PolicyExemptionsListForResourceResponse) (*policy.Request, error)
}

// Err returns the last error encountered while paging.
func (p *PolicyExemptionsListForResourcePager) Err() error {
	return p.err
}

// NextPage returns true if the pager advanced to the next page.
// Returns false if there are no more pages or an error occurred.
func (p *PolicyExemptionsListForResourcePager) NextPage(ctx context.Context) bool {
	var req *policy.Request
	var err error
	if !reflect.ValueOf(p.current).IsZero() {
		if p.current.PolicyExemptionListResult.NextLink == nil || len(*p.current.PolicyExemptionListResult.NextLink) == 0 {
			return false
		}
		req, err = p.advancer(ctx, p.current)
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		p.err = err
		return false
	}
	resp, err := p.client.pl.Do(req)
	if err != nil {
		p.err = err
		return false
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {
		p.err = p.client.listForResourceHandleError(resp)
		return false
	}
	result, err := p.client.listForResourceHandleResponse(resp)
	if err != nil {
		p.err = err
		return false
	}
	p.current = result
	return true
}

// PageResponse returns the current PolicyExemptionsListForResourceResponse page.
func (p *PolicyExemptionsListForResourcePager) PageResponse() PolicyExemptionsListForResourceResponse {
	return p.current
}

// PolicyExemptionsListPager provides operations for iterating over paged responses.
type PolicyExemptionsListPager struct {
	client    *PolicyExemptionsClient
	current   PolicyExemptionsListResponse
	err       error
	requester func(context.Context) (*policy.Request, error)
	advancer  func(context.Context, PolicyExemptionsListResponse) (*policy.Request, error)
}

// Err returns the last error encountered while paging.
func (p *PolicyExemptionsListPager) Err() error {
	return p.err
}

// NextPage returns true if the pager advanced to the next page.
// Returns false if there are no more pages or an error occurred.
func (p *PolicyExemptionsListPager) NextPage(ctx context.Context) bool {
	var req *policy.Request
	var err error
	if !reflect.ValueOf(p.current).IsZero() {
		if p.current.PolicyExemptionListResult.NextLink == nil || len(*p.current.PolicyExemptionListResult.NextLink) == 0 {
			return false
		}
		req, err = p.advancer(ctx, p.current)
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		p.err = err
		return false
	}
	resp, err := p.client.pl.Do(req)
	if err != nil {
		p.err = err
		return false
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {
		p.err = p.client.listHandleError(resp)
		return false
	}
	result, err := p.client.listHandleResponse(resp)
	if err != nil {
		p.err = err
		return false
	}
	p.current = result
	return true
}

// PageResponse returns the current PolicyExemptionsListResponse page.
func (p *PolicyExemptionsListPager) PageResponse() PolicyExemptionsListResponse {
	return p.current
}

// PolicySetDefinitionsListBuiltInPager provides operations for iterating over paged responses.
type PolicySetDefinitionsListBuiltInPager struct {
	client    *PolicySetDefinitionsClient
	current   PolicySetDefinitionsListBuiltInResponse
	err       error
	requester func(context.Context) (*policy.Request, error)
	advancer  func(context.Context, PolicySetDefinitionsListBuiltInResponse) (*policy.Request, error)
}

// Err returns the last error encountered while paging.
func (p *PolicySetDefinitionsListBuiltInPager) Err() error {
	return p.err
}

// NextPage returns true if the pager advanced to the next page.
// Returns false if there are no more pages or an error occurred.
func (p *PolicySetDefinitionsListBuiltInPager) NextPage(ctx context.Context) bool {
	var req *policy.Request
	var err error
	if !reflect.ValueOf(p.current).IsZero() {
		if p.current.PolicySetDefinitionListResult.NextLink == nil || len(*p.current.PolicySetDefinitionListResult.NextLink) == 0 {
			return false
		}
		req, err = p.advancer(ctx, p.current)
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		p.err = err
		return false
	}
	resp, err := p.client.pl.Do(req)
	if err != nil {
		p.err = err
		return false
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {
		p.err = p.client.listBuiltInHandleError(resp)
		return false
	}
	result, err := p.client.listBuiltInHandleResponse(resp)
	if err != nil {
		p.err = err
		return false
	}
	p.current = result
	return true
}

// PageResponse returns the current PolicySetDefinitionsListBuiltInResponse page.
func (p *PolicySetDefinitionsListBuiltInPager) PageResponse() PolicySetDefinitionsListBuiltInResponse {
	return p.current
}

// PolicySetDefinitionsListByManagementGroupPager provides operations for iterating over paged responses.
type PolicySetDefinitionsListByManagementGroupPager struct {
	client    *PolicySetDefinitionsClient
	current   PolicySetDefinitionsListByManagementGroupResponse
	err       error
	requester func(context.Context) (*policy.Request, error)
	advancer  func(context.Context, PolicySetDefinitionsListByManagementGroupResponse) (*policy.Request, error)
}

// Err returns the last error encountered while paging.
func (p *PolicySetDefinitionsListByManagementGroupPager) Err() error {
	return p.err
}

// NextPage returns true if the pager advanced to the next page.
// Returns false if there are no more pages or an error occurred.
func (p *PolicySetDefinitionsListByManagementGroupPager) NextPage(ctx context.Context) bool {
	var req *policy.Request
	var err error
	if !reflect.ValueOf(p.current).IsZero() {
		if p.current.PolicySetDefinitionListResult.NextLink == nil || len(*p.current.PolicySetDefinitionListResult.NextLink) == 0 {
			return false
		}
		req, err = p.advancer(ctx, p.current)
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		p.err = err
		return false
	}
	resp, err := p.client.pl.Do(req)
	if err != nil {
		p.err = err
		return false
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {
		p.err = p.client.listByManagementGroupHandleError(resp)
		return false
	}
	result, err := p.client.listByManagementGroupHandleResponse(resp)
	if err != nil {
		p.err = err
		return false
	}
	p.current = result
	return true
}

// PageResponse returns the current PolicySetDefinitionsListByManagementGroupResponse page.
func (p *PolicySetDefinitionsListByManagementGroupPager) PageResponse() PolicySetDefinitionsListByManagementGroupResponse {
	return p.current
}

// PolicySetDefinitionsListPager provides operations for iterating over paged responses.
type PolicySetDefinitionsListPager struct {
	client    *PolicySetDefinitionsClient
	current   PolicySetDefinitionsListResponse
	err       error
	requester func(context.Context) (*policy.Request, error)
	advancer  func(context.Context, PolicySetDefinitionsListResponse) (*policy.Request, error)
}

// Err returns the last error encountered while paging.
func (p *PolicySetDefinitionsListPager) Err() error {
	return p.err
}

// NextPage returns true if the pager advanced to the next page.
// Returns false if there are no more pages or an error occurred.
func (p *PolicySetDefinitionsListPager) NextPage(ctx context.Context) bool {
	var req *policy.Request
	var err error
	if !reflect.ValueOf(p.current).IsZero() {
		if p.current.PolicySetDefinitionListResult.NextLink == nil || len(*p.current.PolicySetDefinitionListResult.NextLink) == 0 {
			return false
		}
		req, err = p.advancer(ctx, p.current)
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		p.err = err
		return false
	}
	resp, err := p.client.pl.Do(req)
	if err != nil {
		p.err = err
		return false
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {
		p.err = p.client.listHandleError(resp)
		return false
	}
	result, err := p.client.listHandleResponse(resp)
	if err != nil {
		p.err = err
		return false
	}
	p.current = result
	return true
}

// PageResponse returns the current PolicySetDefinitionsListResponse page.
func (p *PolicySetDefinitionsListPager) PageResponse() PolicySetDefinitionsListResponse {
	return p.current
}
