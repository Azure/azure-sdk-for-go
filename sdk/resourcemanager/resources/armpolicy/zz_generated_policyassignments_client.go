//go:build go1.16
// +build go1.16

// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

package armpolicy

import (
	"context"
	"errors"
	"fmt"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/arm"
	armruntime "github.com/Azure/azure-sdk-for-go/sdk/azcore/arm/runtime"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/policy"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/runtime"
	"net/http"
	"net/url"
	"strconv"
	"strings"
)

// PolicyAssignmentsClient contains the methods for the PolicyAssignments group.
// Don't use this type directly, use NewPolicyAssignmentsClient() instead.
type PolicyAssignmentsClient struct {
	ep             string
	pl             runtime.Pipeline
	subscriptionID string
}

// NewPolicyAssignmentsClient creates a new instance of PolicyAssignmentsClient with the specified values.
func NewPolicyAssignmentsClient(subscriptionID string, credential azcore.TokenCredential, options *arm.ClientOptions) *PolicyAssignmentsClient {
	cp := arm.ClientOptions{}
	if options != nil {
		cp = *options
	}
	if len(cp.Host) == 0 {
		cp.Host = arm.AzurePublicCloud
	}
	return &PolicyAssignmentsClient{subscriptionID: subscriptionID, ep: string(cp.Host), pl: armruntime.NewPipeline(module, version, credential, &cp)}
}

// Create - This operation creates or updates a policy assignment with the given scope and name. Policy assignments apply to all resources contained within
// their scope. For example, when you assign a policy at
// resource group scope, that policy applies to all resources in the group.
// If the operation fails it returns the *CloudError error type.
func (client *PolicyAssignmentsClient) Create(ctx context.Context, scope string, policyAssignmentName string, parameters PolicyAssignment, options *PolicyAssignmentsCreateOptions) (PolicyAssignmentsCreateResponse, error) {
	req, err := client.createCreateRequest(ctx, scope, policyAssignmentName, parameters, options)
	if err != nil {
		return PolicyAssignmentsCreateResponse{}, err
	}
	resp, err := client.pl.Do(req)
	if err != nil {
		return PolicyAssignmentsCreateResponse{}, err
	}
	if !runtime.HasStatusCode(resp, http.StatusCreated) {
		return PolicyAssignmentsCreateResponse{}, client.createHandleError(resp)
	}
	return client.createHandleResponse(resp)
}

// createCreateRequest creates the Create request.
func (client *PolicyAssignmentsClient) createCreateRequest(ctx context.Context, scope string, policyAssignmentName string, parameters PolicyAssignment, options *PolicyAssignmentsCreateOptions) (*policy.Request, error) {
	urlPath := "/{scope}/providers/Microsoft.Authorization/policyAssignments/{policyAssignmentName}"
	urlPath = strings.ReplaceAll(urlPath, "{scope}", scope)
	if policyAssignmentName == "" {
		return nil, errors.New("parameter policyAssignmentName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{policyAssignmentName}", url.PathEscape(policyAssignmentName))
	req, err := runtime.NewRequest(ctx, http.MethodPut, runtime.JoinPaths(client.ep, urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("api-version", "2021-06-01")
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header.Set("Accept", "application/json")
	return req, runtime.MarshalAsJSON(req, parameters)
}

// createHandleResponse handles the Create response.
func (client *PolicyAssignmentsClient) createHandleResponse(resp *http.Response) (PolicyAssignmentsCreateResponse, error) {
	result := PolicyAssignmentsCreateResponse{RawResponse: resp}
	if err := runtime.UnmarshalAsJSON(resp, &result.PolicyAssignment); err != nil {
		return PolicyAssignmentsCreateResponse{}, runtime.NewResponseError(err, resp)
	}
	return result, nil
}

// createHandleError handles the Create error response.
func (client *PolicyAssignmentsClient) createHandleError(resp *http.Response) error {
	body, err := runtime.Payload(resp)
	if err != nil {
		return runtime.NewResponseError(err, resp)
	}
	errType := CloudError{raw: string(body)}
	if err := runtime.UnmarshalAsJSON(resp, &errType); err != nil {
		return runtime.NewResponseError(fmt.Errorf("%s\n%s", string(body), err), resp)
	}
	return runtime.NewResponseError(&errType, resp)
}

// CreateByID - This operation creates or updates the policy assignment with the given ID. Policy assignments made on a scope apply to all resources contained
// in that scope. For example, when you assign a policy to a
// resource group that policy applies to all resources in the group. Policy assignment IDs have this format: '{scope}/providers/Microsoft.Authorization/policyAssignments/{policyAssignmentName}'.
// Valid
// scopes are: management group (format: '/providers/Microsoft.Management/managementGroups/{managementGroup}'), subscription (format: '/subscriptions/{subscriptionId}'),
// resource group (format:
// '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}', or resource (format:
// '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/[{parentResourcePath}/]{resourceType}/{resourceName}'.
// If the operation fails it returns the *CloudError error type.
func (client *PolicyAssignmentsClient) CreateByID(ctx context.Context, policyAssignmentID string, parameters PolicyAssignment, options *PolicyAssignmentsCreateByIDOptions) (PolicyAssignmentsCreateByIDResponse, error) {
	req, err := client.createByIDCreateRequest(ctx, policyAssignmentID, parameters, options)
	if err != nil {
		return PolicyAssignmentsCreateByIDResponse{}, err
	}
	resp, err := client.pl.Do(req)
	if err != nil {
		return PolicyAssignmentsCreateByIDResponse{}, err
	}
	if !runtime.HasStatusCode(resp, http.StatusCreated) {
		return PolicyAssignmentsCreateByIDResponse{}, client.createByIDHandleError(resp)
	}
	return client.createByIDHandleResponse(resp)
}

// createByIDCreateRequest creates the CreateByID request.
func (client *PolicyAssignmentsClient) createByIDCreateRequest(ctx context.Context, policyAssignmentID string, parameters PolicyAssignment, options *PolicyAssignmentsCreateByIDOptions) (*policy.Request, error) {
	urlPath := "/{policyAssignmentId}"
	urlPath = strings.ReplaceAll(urlPath, "{policyAssignmentId}", policyAssignmentID)
	req, err := runtime.NewRequest(ctx, http.MethodPut, runtime.JoinPaths(client.ep, urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("api-version", "2021-06-01")
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header.Set("Accept", "application/json")
	return req, runtime.MarshalAsJSON(req, parameters)
}

// createByIDHandleResponse handles the CreateByID response.
func (client *PolicyAssignmentsClient) createByIDHandleResponse(resp *http.Response) (PolicyAssignmentsCreateByIDResponse, error) {
	result := PolicyAssignmentsCreateByIDResponse{RawResponse: resp}
	if err := runtime.UnmarshalAsJSON(resp, &result.PolicyAssignment); err != nil {
		return PolicyAssignmentsCreateByIDResponse{}, runtime.NewResponseError(err, resp)
	}
	return result, nil
}

// createByIDHandleError handles the CreateByID error response.
func (client *PolicyAssignmentsClient) createByIDHandleError(resp *http.Response) error {
	body, err := runtime.Payload(resp)
	if err != nil {
		return runtime.NewResponseError(err, resp)
	}
	errType := CloudError{raw: string(body)}
	if err := runtime.UnmarshalAsJSON(resp, &errType); err != nil {
		return runtime.NewResponseError(fmt.Errorf("%s\n%s", string(body), err), resp)
	}
	return runtime.NewResponseError(&errType, resp)
}

// Delete - This operation deletes a policy assignment, given its name and the scope it was created in. The scope of a policy assignment is the part of
// its ID preceding
// '/providers/Microsoft.Authorization/policyAssignments/{policyAssignmentName}'.
// If the operation fails it returns the *CloudError error type.
func (client *PolicyAssignmentsClient) Delete(ctx context.Context, scope string, policyAssignmentName string, options *PolicyAssignmentsDeleteOptions) (PolicyAssignmentsDeleteResponse, error) {
	req, err := client.deleteCreateRequest(ctx, scope, policyAssignmentName, options)
	if err != nil {
		return PolicyAssignmentsDeleteResponse{}, err
	}
	resp, err := client.pl.Do(req)
	if err != nil {
		return PolicyAssignmentsDeleteResponse{}, err
	}
	if !runtime.HasStatusCode(resp, http.StatusOK, http.StatusNoContent) {
		return PolicyAssignmentsDeleteResponse{}, client.deleteHandleError(resp)
	}
	return client.deleteHandleResponse(resp)
}

// deleteCreateRequest creates the Delete request.
func (client *PolicyAssignmentsClient) deleteCreateRequest(ctx context.Context, scope string, policyAssignmentName string, options *PolicyAssignmentsDeleteOptions) (*policy.Request, error) {
	urlPath := "/{scope}/providers/Microsoft.Authorization/policyAssignments/{policyAssignmentName}"
	urlPath = strings.ReplaceAll(urlPath, "{scope}", scope)
	if policyAssignmentName == "" {
		return nil, errors.New("parameter policyAssignmentName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{policyAssignmentName}", url.PathEscape(policyAssignmentName))
	req, err := runtime.NewRequest(ctx, http.MethodDelete, runtime.JoinPaths(client.ep, urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("api-version", "2021-06-01")
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header.Set("Accept", "application/json")
	return req, nil
}

// deleteHandleResponse handles the Delete response.
func (client *PolicyAssignmentsClient) deleteHandleResponse(resp *http.Response) (PolicyAssignmentsDeleteResponse, error) {
	result := PolicyAssignmentsDeleteResponse{RawResponse: resp}
	if err := runtime.UnmarshalAsJSON(resp, &result.PolicyAssignment); err != nil {
		return PolicyAssignmentsDeleteResponse{}, runtime.NewResponseError(err, resp)
	}
	return result, nil
}

// deleteHandleError handles the Delete error response.
func (client *PolicyAssignmentsClient) deleteHandleError(resp *http.Response) error {
	body, err := runtime.Payload(resp)
	if err != nil {
		return runtime.NewResponseError(err, resp)
	}
	errType := CloudError{raw: string(body)}
	if err := runtime.UnmarshalAsJSON(resp, &errType); err != nil {
		return runtime.NewResponseError(fmt.Errorf("%s\n%s", string(body), err), resp)
	}
	return runtime.NewResponseError(&errType, resp)
}

// DeleteByID - This operation deletes the policy with the given ID. Policy assignment IDs have this format: '{scope}/providers/Microsoft.Authorization/policyAssignments/{policyAssignmentName}'.
// Valid formats for
// {scope} are: '/providers/Microsoft.Management/managementGroups/{managementGroup}' (management group), '/subscriptions/{subscriptionId}' (subscription),
// '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}' (resource group), or
// '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/[{parentResourcePath}/]{resourceType}/{resourceName}'
// (resource).
// If the operation fails it returns the *CloudError error type.
func (client *PolicyAssignmentsClient) DeleteByID(ctx context.Context, policyAssignmentID string, options *PolicyAssignmentsDeleteByIDOptions) (PolicyAssignmentsDeleteByIDResponse, error) {
	req, err := client.deleteByIDCreateRequest(ctx, policyAssignmentID, options)
	if err != nil {
		return PolicyAssignmentsDeleteByIDResponse{}, err
	}
	resp, err := client.pl.Do(req)
	if err != nil {
		return PolicyAssignmentsDeleteByIDResponse{}, err
	}
	if !runtime.HasStatusCode(resp, http.StatusOK, http.StatusNoContent) {
		return PolicyAssignmentsDeleteByIDResponse{}, client.deleteByIDHandleError(resp)
	}
	return client.deleteByIDHandleResponse(resp)
}

// deleteByIDCreateRequest creates the DeleteByID request.
func (client *PolicyAssignmentsClient) deleteByIDCreateRequest(ctx context.Context, policyAssignmentID string, options *PolicyAssignmentsDeleteByIDOptions) (*policy.Request, error) {
	urlPath := "/{policyAssignmentId}"
	urlPath = strings.ReplaceAll(urlPath, "{policyAssignmentId}", policyAssignmentID)
	req, err := runtime.NewRequest(ctx, http.MethodDelete, runtime.JoinPaths(client.ep, urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("api-version", "2021-06-01")
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header.Set("Accept", "application/json")
	return req, nil
}

// deleteByIDHandleResponse handles the DeleteByID response.
func (client *PolicyAssignmentsClient) deleteByIDHandleResponse(resp *http.Response) (PolicyAssignmentsDeleteByIDResponse, error) {
	result := PolicyAssignmentsDeleteByIDResponse{RawResponse: resp}
	if err := runtime.UnmarshalAsJSON(resp, &result.PolicyAssignment); err != nil {
		return PolicyAssignmentsDeleteByIDResponse{}, runtime.NewResponseError(err, resp)
	}
	return result, nil
}

// deleteByIDHandleError handles the DeleteByID error response.
func (client *PolicyAssignmentsClient) deleteByIDHandleError(resp *http.Response) error {
	body, err := runtime.Payload(resp)
	if err != nil {
		return runtime.NewResponseError(err, resp)
	}
	errType := CloudError{raw: string(body)}
	if err := runtime.UnmarshalAsJSON(resp, &errType); err != nil {
		return runtime.NewResponseError(fmt.Errorf("%s\n%s", string(body), err), resp)
	}
	return runtime.NewResponseError(&errType, resp)
}

// Get - This operation retrieves a single policy assignment, given its name and the scope it was created at.
// If the operation fails it returns the *CloudError error type.
func (client *PolicyAssignmentsClient) Get(ctx context.Context, scope string, policyAssignmentName string, options *PolicyAssignmentsGetOptions) (PolicyAssignmentsGetResponse, error) {
	req, err := client.getCreateRequest(ctx, scope, policyAssignmentName, options)
	if err != nil {
		return PolicyAssignmentsGetResponse{}, err
	}
	resp, err := client.pl.Do(req)
	if err != nil {
		return PolicyAssignmentsGetResponse{}, err
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {
		return PolicyAssignmentsGetResponse{}, client.getHandleError(resp)
	}
	return client.getHandleResponse(resp)
}

// getCreateRequest creates the Get request.
func (client *PolicyAssignmentsClient) getCreateRequest(ctx context.Context, scope string, policyAssignmentName string, options *PolicyAssignmentsGetOptions) (*policy.Request, error) {
	urlPath := "/{scope}/providers/Microsoft.Authorization/policyAssignments/{policyAssignmentName}"
	urlPath = strings.ReplaceAll(urlPath, "{scope}", scope)
	if policyAssignmentName == "" {
		return nil, errors.New("parameter policyAssignmentName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{policyAssignmentName}", url.PathEscape(policyAssignmentName))
	req, err := runtime.NewRequest(ctx, http.MethodGet, runtime.JoinPaths(client.ep, urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("api-version", "2021-06-01")
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header.Set("Accept", "application/json")
	return req, nil
}

// getHandleResponse handles the Get response.
func (client *PolicyAssignmentsClient) getHandleResponse(resp *http.Response) (PolicyAssignmentsGetResponse, error) {
	result := PolicyAssignmentsGetResponse{RawResponse: resp}
	if err := runtime.UnmarshalAsJSON(resp, &result.PolicyAssignment); err != nil {
		return PolicyAssignmentsGetResponse{}, runtime.NewResponseError(err, resp)
	}
	return result, nil
}

// getHandleError handles the Get error response.
func (client *PolicyAssignmentsClient) getHandleError(resp *http.Response) error {
	body, err := runtime.Payload(resp)
	if err != nil {
		return runtime.NewResponseError(err, resp)
	}
	errType := CloudError{raw: string(body)}
	if err := runtime.UnmarshalAsJSON(resp, &errType); err != nil {
		return runtime.NewResponseError(fmt.Errorf("%s\n%s", string(body), err), resp)
	}
	return runtime.NewResponseError(&errType, resp)
}

// GetByID - The operation retrieves the policy assignment with the given ID. Policy assignment IDs have this format: '{scope}/providers/Microsoft.Authorization/policyAssignments/{policyAssignmentName}'.
// Valid
// scopes are: management group (format: '/providers/Microsoft.Management/managementGroups/{managementGroup}'), subscription (format: '/subscriptions/{subscriptionId}'),
// resource group (format:
// '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}', or resource (format:
// '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/[{parentResourcePath}/]{resourceType}/{resourceName}'.
// If the operation fails it returns the *CloudError error type.
func (client *PolicyAssignmentsClient) GetByID(ctx context.Context, policyAssignmentID string, options *PolicyAssignmentsGetByIDOptions) (PolicyAssignmentsGetByIDResponse, error) {
	req, err := client.getByIDCreateRequest(ctx, policyAssignmentID, options)
	if err != nil {
		return PolicyAssignmentsGetByIDResponse{}, err
	}
	resp, err := client.pl.Do(req)
	if err != nil {
		return PolicyAssignmentsGetByIDResponse{}, err
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {
		return PolicyAssignmentsGetByIDResponse{}, client.getByIDHandleError(resp)
	}
	return client.getByIDHandleResponse(resp)
}

// getByIDCreateRequest creates the GetByID request.
func (client *PolicyAssignmentsClient) getByIDCreateRequest(ctx context.Context, policyAssignmentID string, options *PolicyAssignmentsGetByIDOptions) (*policy.Request, error) {
	urlPath := "/{policyAssignmentId}"
	urlPath = strings.ReplaceAll(urlPath, "{policyAssignmentId}", policyAssignmentID)
	req, err := runtime.NewRequest(ctx, http.MethodGet, runtime.JoinPaths(client.ep, urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("api-version", "2021-06-01")
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header.Set("Accept", "application/json")
	return req, nil
}

// getByIDHandleResponse handles the GetByID response.
func (client *PolicyAssignmentsClient) getByIDHandleResponse(resp *http.Response) (PolicyAssignmentsGetByIDResponse, error) {
	result := PolicyAssignmentsGetByIDResponse{RawResponse: resp}
	if err := runtime.UnmarshalAsJSON(resp, &result.PolicyAssignment); err != nil {
		return PolicyAssignmentsGetByIDResponse{}, runtime.NewResponseError(err, resp)
	}
	return result, nil
}

// getByIDHandleError handles the GetByID error response.
func (client *PolicyAssignmentsClient) getByIDHandleError(resp *http.Response) error {
	body, err := runtime.Payload(resp)
	if err != nil {
		return runtime.NewResponseError(err, resp)
	}
	errType := CloudError{raw: string(body)}
	if err := runtime.UnmarshalAsJSON(resp, &errType); err != nil {
		return runtime.NewResponseError(fmt.Errorf("%s\n%s", string(body), err), resp)
	}
	return runtime.NewResponseError(&errType, resp)
}

// List - This operation retrieves the list of all policy assignments associated with the given subscription that match the optional given $filter. Valid
// values for $filter are: 'atScope()', 'atExactScope()' or
// 'policyDefinitionId eq '{value}''. If $filter is not provided, the unfiltered list includes all policy assignments associated with the subscription,
// including those that apply directly or from
// management groups that contain the given subscription, as well as any applied to objects contained within the subscription. If $filter=atScope() is provided,
// the returned list includes all policy
// assignments that apply to the subscription, which is everything in the unfiltered list except those applied to objects contained within the subscription.
// If $filter=atExactScope() is provided, the
// returned list only includes all policy assignments that at the subscription. If $filter=policyDefinitionId eq '{value}' is provided, the returned list
// includes all policy assignments of the policy
// definition whose id is {value}.
// If the operation fails it returns the *CloudError error type.
func (client *PolicyAssignmentsClient) List(options *PolicyAssignmentsListOptions) *PolicyAssignmentsListPager {
	return &PolicyAssignmentsListPager{
		client: client,
		requester: func(ctx context.Context) (*policy.Request, error) {
			return client.listCreateRequest(ctx, options)
		},
		advancer: func(ctx context.Context, resp PolicyAssignmentsListResponse) (*policy.Request, error) {
			return runtime.NewRequest(ctx, http.MethodGet, *resp.PolicyAssignmentListResult.NextLink)
		},
	}
}

// listCreateRequest creates the List request.
func (client *PolicyAssignmentsClient) listCreateRequest(ctx context.Context, options *PolicyAssignmentsListOptions) (*policy.Request, error) {
	urlPath := "/subscriptions/{subscriptionId}/providers/Microsoft.Authorization/policyAssignments"
	if client.subscriptionID == "" {
		return nil, errors.New("parameter client.subscriptionID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{subscriptionId}", url.PathEscape(client.subscriptionID))
	req, err := runtime.NewRequest(ctx, http.MethodGet, runtime.JoinPaths(client.ep, urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	if options != nil && options.Top != nil {
		reqQP.Set("$top", strconv.FormatInt(int64(*options.Top), 10))
	}
	reqQP.Set("api-version", "2021-06-01")
	req.Raw().URL.RawQuery = reqQP.Encode()
	unencodedParams := []string{req.Raw().URL.RawQuery}
	if options != nil && options.Filter != nil {
		unencodedParams = append(unencodedParams, "$filter="+*options.Filter)
	}
	req.Raw().URL.RawQuery = strings.Join(unencodedParams, "&")
	req.Raw().Header.Set("Accept", "application/json")
	return req, nil
}

// listHandleResponse handles the List response.
func (client *PolicyAssignmentsClient) listHandleResponse(resp *http.Response) (PolicyAssignmentsListResponse, error) {
	result := PolicyAssignmentsListResponse{RawResponse: resp}
	if err := runtime.UnmarshalAsJSON(resp, &result.PolicyAssignmentListResult); err != nil {
		return PolicyAssignmentsListResponse{}, runtime.NewResponseError(err, resp)
	}
	return result, nil
}

// listHandleError handles the List error response.
func (client *PolicyAssignmentsClient) listHandleError(resp *http.Response) error {
	body, err := runtime.Payload(resp)
	if err != nil {
		return runtime.NewResponseError(err, resp)
	}
	errType := CloudError{raw: string(body)}
	if err := runtime.UnmarshalAsJSON(resp, &errType); err != nil {
		return runtime.NewResponseError(fmt.Errorf("%s\n%s", string(body), err), resp)
	}
	return runtime.NewResponseError(&errType, resp)
}

// ListForManagementGroup - This operation retrieves the list of all policy assignments applicable to the management group that match the given $filter.
// Valid values for $filter are: 'atScope()', 'atExactScope()' or
// 'policyDefinitionId eq '{value}''. If $filter=atScope() is provided, the returned list includes all policy assignments that are assigned to the management
// group or the management group's ancestors. If
// $filter=atExactScope() is provided, the returned list only includes all policy assignments that at the management group. If $filter=policyDefinitionId
// eq '{value}' is provided, the returned list
// includes all policy assignments of the policy definition whose id is {value} that apply to the management group.
// If the operation fails it returns the *CloudError error type.
func (client *PolicyAssignmentsClient) ListForManagementGroup(managementGroupID string, options *PolicyAssignmentsListForManagementGroupOptions) *PolicyAssignmentsListForManagementGroupPager {
	return &PolicyAssignmentsListForManagementGroupPager{
		client: client,
		requester: func(ctx context.Context) (*policy.Request, error) {
			return client.listForManagementGroupCreateRequest(ctx, managementGroupID, options)
		},
		advancer: func(ctx context.Context, resp PolicyAssignmentsListForManagementGroupResponse) (*policy.Request, error) {
			return runtime.NewRequest(ctx, http.MethodGet, *resp.PolicyAssignmentListResult.NextLink)
		},
	}
}

// listForManagementGroupCreateRequest creates the ListForManagementGroup request.
func (client *PolicyAssignmentsClient) listForManagementGroupCreateRequest(ctx context.Context, managementGroupID string, options *PolicyAssignmentsListForManagementGroupOptions) (*policy.Request, error) {
	urlPath := "/providers/Microsoft.Management/managementGroups/{managementGroupId}/providers/Microsoft.Authorization/policyAssignments"
	if managementGroupID == "" {
		return nil, errors.New("parameter managementGroupID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{managementGroupId}", url.PathEscape(managementGroupID))
	req, err := runtime.NewRequest(ctx, http.MethodGet, runtime.JoinPaths(client.ep, urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	if options != nil && options.Top != nil {
		reqQP.Set("$top", strconv.FormatInt(int64(*options.Top), 10))
	}
	reqQP.Set("api-version", "2021-06-01")
	req.Raw().URL.RawQuery = reqQP.Encode()
	unencodedParams := []string{req.Raw().URL.RawQuery}
	if options != nil && options.Filter != nil {
		unencodedParams = append(unencodedParams, "$filter="+*options.Filter)
	}
	req.Raw().URL.RawQuery = strings.Join(unencodedParams, "&")
	req.Raw().Header.Set("Accept", "application/json")
	return req, nil
}

// listForManagementGroupHandleResponse handles the ListForManagementGroup response.
func (client *PolicyAssignmentsClient) listForManagementGroupHandleResponse(resp *http.Response) (PolicyAssignmentsListForManagementGroupResponse, error) {
	result := PolicyAssignmentsListForManagementGroupResponse{RawResponse: resp}
	if err := runtime.UnmarshalAsJSON(resp, &result.PolicyAssignmentListResult); err != nil {
		return PolicyAssignmentsListForManagementGroupResponse{}, runtime.NewResponseError(err, resp)
	}
	return result, nil
}

// listForManagementGroupHandleError handles the ListForManagementGroup error response.
func (client *PolicyAssignmentsClient) listForManagementGroupHandleError(resp *http.Response) error {
	body, err := runtime.Payload(resp)
	if err != nil {
		return runtime.NewResponseError(err, resp)
	}
	errType := CloudError{raw: string(body)}
	if err := runtime.UnmarshalAsJSON(resp, &errType); err != nil {
		return runtime.NewResponseError(fmt.Errorf("%s\n%s", string(body), err), resp)
	}
	return runtime.NewResponseError(&errType, resp)
}

// ListForResource - This operation retrieves the list of all policy assignments associated with the specified resource in the given resource group and
// subscription that match the optional given $filter. Valid values for
// $filter are: 'atScope()', 'atExactScope()' or 'policyDefinitionId eq '{value}''. If $filter is not provided, the unfiltered list includes all policy
// assignments associated with the resource, including
// those that apply directly or from all containing scopes, as well as any applied to resources contained within the resource. If $filter=atScope() is provided,
// the returned list includes all policy
// assignments that apply to the resource, which is everything in the unfiltered list except those applied to resources contained within the resource. If
// $filter=atExactScope() is provided, the returned
// list only includes all policy assignments that at the resource level. If $filter=policyDefinitionId eq '{value}' is provided, the returned list includes
// all policy assignments of the policy definition
// whose id is {value} that apply to the resource. Three parameters plus the resource name are used to identify a specific resource. If the resource is
// not part of a parent resource (the more common
// case), the parent resource path should not be provided (or provided as ''). For example a web app could be specified as ({resourceProviderNamespace}
// == 'Microsoft.Web', {parentResourcePath} == '',
// {resourceType} == 'sites', {resourceName} == 'MyWebApp'). If the resource is part of a parent resource, then all parameters should be provided. For example
// a virtual machine DNS name could be
// specified as ({resourceProviderNamespace} == 'Microsoft.Compute', {parentResourcePath} == 'virtualMachines/MyVirtualMachine', {resourceType} == 'domainNames',
// {resourceName} == 'MyComputerName'). A
// convenient alternative to providing the namespace and type name separately is to provide both in the {resourceType} parameter, format: ({resourceProviderNamespace}
// == '', {parentResourcePath} == '',
// {resourceType} == 'Microsoft.Web/sites', {resourceName} == 'MyWebApp').
// If the operation fails it returns the *CloudError error type.
func (client *PolicyAssignmentsClient) ListForResource(resourceGroupName string, resourceProviderNamespace string, parentResourcePath string, resourceType string, resourceName string, options *PolicyAssignmentsListForResourceOptions) *PolicyAssignmentsListForResourcePager {
	return &PolicyAssignmentsListForResourcePager{
		client: client,
		requester: func(ctx context.Context) (*policy.Request, error) {
			return client.listForResourceCreateRequest(ctx, resourceGroupName, resourceProviderNamespace, parentResourcePath, resourceType, resourceName, options)
		},
		advancer: func(ctx context.Context, resp PolicyAssignmentsListForResourceResponse) (*policy.Request, error) {
			return runtime.NewRequest(ctx, http.MethodGet, *resp.PolicyAssignmentListResult.NextLink)
		},
	}
}

// listForResourceCreateRequest creates the ListForResource request.
func (client *PolicyAssignmentsClient) listForResourceCreateRequest(ctx context.Context, resourceGroupName string, resourceProviderNamespace string, parentResourcePath string, resourceType string, resourceName string, options *PolicyAssignmentsListForResourceOptions) (*policy.Request, error) {
	urlPath := "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{parentResourcePath}/{resourceType}/{resourceName}/providers/Microsoft.Authorization/policyAssignments"
	if resourceGroupName == "" {
		return nil, errors.New("parameter resourceGroupName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{resourceGroupName}", url.PathEscape(resourceGroupName))
	if resourceProviderNamespace == "" {
		return nil, errors.New("parameter resourceProviderNamespace cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{resourceProviderNamespace}", url.PathEscape(resourceProviderNamespace))
	urlPath = strings.ReplaceAll(urlPath, "{parentResourcePath}", parentResourcePath)
	urlPath = strings.ReplaceAll(urlPath, "{resourceType}", resourceType)
	if resourceName == "" {
		return nil, errors.New("parameter resourceName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{resourceName}", url.PathEscape(resourceName))
	if client.subscriptionID == "" {
		return nil, errors.New("parameter client.subscriptionID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{subscriptionId}", url.PathEscape(client.subscriptionID))
	req, err := runtime.NewRequest(ctx, http.MethodGet, runtime.JoinPaths(client.ep, urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	if options != nil && options.Top != nil {
		reqQP.Set("$top", strconv.FormatInt(int64(*options.Top), 10))
	}
	reqQP.Set("api-version", "2021-06-01")
	req.Raw().URL.RawQuery = reqQP.Encode()
	unencodedParams := []string{req.Raw().URL.RawQuery}
	if options != nil && options.Filter != nil {
		unencodedParams = append(unencodedParams, "$filter="+*options.Filter)
	}
	req.Raw().URL.RawQuery = strings.Join(unencodedParams, "&")
	req.Raw().Header.Set("Accept", "application/json")
	return req, nil
}

// listForResourceHandleResponse handles the ListForResource response.
func (client *PolicyAssignmentsClient) listForResourceHandleResponse(resp *http.Response) (PolicyAssignmentsListForResourceResponse, error) {
	result := PolicyAssignmentsListForResourceResponse{RawResponse: resp}
	if err := runtime.UnmarshalAsJSON(resp, &result.PolicyAssignmentListResult); err != nil {
		return PolicyAssignmentsListForResourceResponse{}, runtime.NewResponseError(err, resp)
	}
	return result, nil
}

// listForResourceHandleError handles the ListForResource error response.
func (client *PolicyAssignmentsClient) listForResourceHandleError(resp *http.Response) error {
	body, err := runtime.Payload(resp)
	if err != nil {
		return runtime.NewResponseError(err, resp)
	}
	errType := CloudError{raw: string(body)}
	if err := runtime.UnmarshalAsJSON(resp, &errType); err != nil {
		return runtime.NewResponseError(fmt.Errorf("%s\n%s", string(body), err), resp)
	}
	return runtime.NewResponseError(&errType, resp)
}

// ListForResourceGroup - This operation retrieves the list of all policy assignments associated with the given resource group in the given subscription
// that match the optional given $filter. Valid values for $filter are:
// 'atScope()', 'atExactScope()' or 'policyDefinitionId eq '{value}''. If $filter is not provided, the unfiltered list includes all policy assignments associated
// with the resource group, including those
// that apply directly or apply from containing scopes, as well as any applied to resources contained within the resource group. If $filter=atScope() is
// provided, the returned list includes all policy
// assignments that apply to the resource group, which is everything in the unfiltered list except those applied to resources contained within the resource
// group. If $filter=atExactScope() is provided,
// the returned list only includes all policy assignments that at the resource group. If $filter=policyDefinitionId eq '{value}' is provided, the returned
// list includes all policy assignments of the
// policy definition whose id is {value} that apply to the resource group.
// If the operation fails it returns the *CloudError error type.
func (client *PolicyAssignmentsClient) ListForResourceGroup(resourceGroupName string, options *PolicyAssignmentsListForResourceGroupOptions) *PolicyAssignmentsListForResourceGroupPager {
	return &PolicyAssignmentsListForResourceGroupPager{
		client: client,
		requester: func(ctx context.Context) (*policy.Request, error) {
			return client.listForResourceGroupCreateRequest(ctx, resourceGroupName, options)
		},
		advancer: func(ctx context.Context, resp PolicyAssignmentsListForResourceGroupResponse) (*policy.Request, error) {
			return runtime.NewRequest(ctx, http.MethodGet, *resp.PolicyAssignmentListResult.NextLink)
		},
	}
}

// listForResourceGroupCreateRequest creates the ListForResourceGroup request.
func (client *PolicyAssignmentsClient) listForResourceGroupCreateRequest(ctx context.Context, resourceGroupName string, options *PolicyAssignmentsListForResourceGroupOptions) (*policy.Request, error) {
	urlPath := "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Authorization/policyAssignments"
	if resourceGroupName == "" {
		return nil, errors.New("parameter resourceGroupName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{resourceGroupName}", url.PathEscape(resourceGroupName))
	if client.subscriptionID == "" {
		return nil, errors.New("parameter client.subscriptionID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{subscriptionId}", url.PathEscape(client.subscriptionID))
	req, err := runtime.NewRequest(ctx, http.MethodGet, runtime.JoinPaths(client.ep, urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	if options != nil && options.Top != nil {
		reqQP.Set("$top", strconv.FormatInt(int64(*options.Top), 10))
	}
	reqQP.Set("api-version", "2021-06-01")
	req.Raw().URL.RawQuery = reqQP.Encode()
	unencodedParams := []string{req.Raw().URL.RawQuery}
	if options != nil && options.Filter != nil {
		unencodedParams = append(unencodedParams, "$filter="+*options.Filter)
	}
	req.Raw().URL.RawQuery = strings.Join(unencodedParams, "&")
	req.Raw().Header.Set("Accept", "application/json")
	return req, nil
}

// listForResourceGroupHandleResponse handles the ListForResourceGroup response.
func (client *PolicyAssignmentsClient) listForResourceGroupHandleResponse(resp *http.Response) (PolicyAssignmentsListForResourceGroupResponse, error) {
	result := PolicyAssignmentsListForResourceGroupResponse{RawResponse: resp}
	if err := runtime.UnmarshalAsJSON(resp, &result.PolicyAssignmentListResult); err != nil {
		return PolicyAssignmentsListForResourceGroupResponse{}, runtime.NewResponseError(err, resp)
	}
	return result, nil
}

// listForResourceGroupHandleError handles the ListForResourceGroup error response.
func (client *PolicyAssignmentsClient) listForResourceGroupHandleError(resp *http.Response) error {
	body, err := runtime.Payload(resp)
	if err != nil {
		return runtime.NewResponseError(err, resp)
	}
	errType := CloudError{raw: string(body)}
	if err := runtime.UnmarshalAsJSON(resp, &errType); err != nil {
		return runtime.NewResponseError(fmt.Errorf("%s\n%s", string(body), err), resp)
	}
	return runtime.NewResponseError(&errType, resp)
}

// Update - This operation updates a policy assignment with the given scope and name. Policy assignments apply to all resources contained within their scope.
// For example, when you assign a policy at resource
// group scope, that policy applies to all resources in the group.
// If the operation fails it returns the *CloudError error type.
func (client *PolicyAssignmentsClient) Update(ctx context.Context, scope string, policyAssignmentName string, parameters PolicyAssignmentUpdate, options *PolicyAssignmentsUpdateOptions) (PolicyAssignmentsUpdateResponse, error) {
	req, err := client.updateCreateRequest(ctx, scope, policyAssignmentName, parameters, options)
	if err != nil {
		return PolicyAssignmentsUpdateResponse{}, err
	}
	resp, err := client.pl.Do(req)
	if err != nil {
		return PolicyAssignmentsUpdateResponse{}, err
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {
		return PolicyAssignmentsUpdateResponse{}, client.updateHandleError(resp)
	}
	return client.updateHandleResponse(resp)
}

// updateCreateRequest creates the Update request.
func (client *PolicyAssignmentsClient) updateCreateRequest(ctx context.Context, scope string, policyAssignmentName string, parameters PolicyAssignmentUpdate, options *PolicyAssignmentsUpdateOptions) (*policy.Request, error) {
	urlPath := "/{scope}/providers/Microsoft.Authorization/policyAssignments/{policyAssignmentName}"
	urlPath = strings.ReplaceAll(urlPath, "{scope}", scope)
	if policyAssignmentName == "" {
		return nil, errors.New("parameter policyAssignmentName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{policyAssignmentName}", url.PathEscape(policyAssignmentName))
	req, err := runtime.NewRequest(ctx, http.MethodPatch, runtime.JoinPaths(client.ep, urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("api-version", "2021-06-01")
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header.Set("Accept", "application/json")
	return req, runtime.MarshalAsJSON(req, parameters)
}

// updateHandleResponse handles the Update response.
func (client *PolicyAssignmentsClient) updateHandleResponse(resp *http.Response) (PolicyAssignmentsUpdateResponse, error) {
	result := PolicyAssignmentsUpdateResponse{RawResponse: resp}
	if err := runtime.UnmarshalAsJSON(resp, &result.PolicyAssignment); err != nil {
		return PolicyAssignmentsUpdateResponse{}, runtime.NewResponseError(err, resp)
	}
	return result, nil
}

// updateHandleError handles the Update error response.
func (client *PolicyAssignmentsClient) updateHandleError(resp *http.Response) error {
	body, err := runtime.Payload(resp)
	if err != nil {
		return runtime.NewResponseError(err, resp)
	}
	errType := CloudError{raw: string(body)}
	if err := runtime.UnmarshalAsJSON(resp, &errType); err != nil {
		return runtime.NewResponseError(fmt.Errorf("%s\n%s", string(body), err), resp)
	}
	return runtime.NewResponseError(&errType, resp)
}

// UpdateByID - This operation updates the policy assignment with the given ID. Policy assignments made on a scope apply to all resources contained in that
// scope. For example, when you assign a policy to a resource
// group that policy applies to all resources in the group. Policy assignment IDs have this format: '{scope}/providers/Microsoft.Authorization/policyAssignments/{policyAssignmentName}'.
// Valid scopes are:
// management group (format: '/providers/Microsoft.Management/managementGroups/{managementGroup}'), subscription (format: '/subscriptions/{subscriptionId}'),
// resource group (format:
// '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}', or resource (format:
// '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/[{parentResourcePath}/]{resourceType}/{resourceName}'.
// If the operation fails it returns the *CloudError error type.
func (client *PolicyAssignmentsClient) UpdateByID(ctx context.Context, policyAssignmentID string, parameters PolicyAssignmentUpdate, options *PolicyAssignmentsUpdateByIDOptions) (PolicyAssignmentsUpdateByIDResponse, error) {
	req, err := client.updateByIDCreateRequest(ctx, policyAssignmentID, parameters, options)
	if err != nil {
		return PolicyAssignmentsUpdateByIDResponse{}, err
	}
	resp, err := client.pl.Do(req)
	if err != nil {
		return PolicyAssignmentsUpdateByIDResponse{}, err
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {
		return PolicyAssignmentsUpdateByIDResponse{}, client.updateByIDHandleError(resp)
	}
	return client.updateByIDHandleResponse(resp)
}

// updateByIDCreateRequest creates the UpdateByID request.
func (client *PolicyAssignmentsClient) updateByIDCreateRequest(ctx context.Context, policyAssignmentID string, parameters PolicyAssignmentUpdate, options *PolicyAssignmentsUpdateByIDOptions) (*policy.Request, error) {
	urlPath := "/{policyAssignmentId}"
	urlPath = strings.ReplaceAll(urlPath, "{policyAssignmentId}", policyAssignmentID)
	req, err := runtime.NewRequest(ctx, http.MethodPatch, runtime.JoinPaths(client.ep, urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("api-version", "2021-06-01")
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header.Set("Accept", "application/json")
	return req, runtime.MarshalAsJSON(req, parameters)
}

// updateByIDHandleResponse handles the UpdateByID response.
func (client *PolicyAssignmentsClient) updateByIDHandleResponse(resp *http.Response) (PolicyAssignmentsUpdateByIDResponse, error) {
	result := PolicyAssignmentsUpdateByIDResponse{RawResponse: resp}
	if err := runtime.UnmarshalAsJSON(resp, &result.PolicyAssignment); err != nil {
		return PolicyAssignmentsUpdateByIDResponse{}, runtime.NewResponseError(err, resp)
	}
	return result, nil
}

// updateByIDHandleError handles the UpdateByID error response.
func (client *PolicyAssignmentsClient) updateByIDHandleError(resp *http.Response) error {
	body, err := runtime.Payload(resp)
	if err != nil {
		return runtime.NewResponseError(err, resp)
	}
	errType := CloudError{raw: string(body)}
	if err := runtime.UnmarshalAsJSON(resp, &errType); err != nil {
		return runtime.NewResponseError(fmt.Errorf("%s\n%s", string(body), err), resp)
	}
	return runtime.NewResponseError(&errType, resp)
}
