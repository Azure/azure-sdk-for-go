//go:build go1.16
// +build go1.16

// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

package armpolicy

import (
	"context"
	"errors"
	"fmt"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/arm"
	armruntime "github.com/Azure/azure-sdk-for-go/sdk/azcore/arm/runtime"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/policy"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/runtime"
	"net/http"
	"net/url"
	"strconv"
	"strings"
)

// PolicySetDefinitionsClient contains the methods for the PolicySetDefinitions group.
// Don't use this type directly, use NewPolicySetDefinitionsClient() instead.
type PolicySetDefinitionsClient struct {
	ep             string
	pl             runtime.Pipeline
	subscriptionID string
}

// NewPolicySetDefinitionsClient creates a new instance of PolicySetDefinitionsClient with the specified values.
func NewPolicySetDefinitionsClient(subscriptionID string, credential azcore.TokenCredential, options *arm.ClientOptions) *PolicySetDefinitionsClient {
	cp := arm.ClientOptions{}
	if options != nil {
		cp = *options
	}
	if len(cp.Host) == 0 {
		cp.Host = arm.AzurePublicCloud
	}
	return &PolicySetDefinitionsClient{subscriptionID: subscriptionID, ep: string(cp.Host), pl: armruntime.NewPipeline(module, version, credential, &cp)}
}

// CreateOrUpdate - This operation creates or updates a policy set definition in the given subscription with the given name.
// If the operation fails it returns the *CloudError error type.
func (client *PolicySetDefinitionsClient) CreateOrUpdate(ctx context.Context, policySetDefinitionName string, parameters PolicySetDefinition, options *PolicySetDefinitionsCreateOrUpdateOptions) (PolicySetDefinitionsCreateOrUpdateResponse, error) {
	req, err := client.createOrUpdateCreateRequest(ctx, policySetDefinitionName, parameters, options)
	if err != nil {
		return PolicySetDefinitionsCreateOrUpdateResponse{}, err
	}
	resp, err := client.pl.Do(req)
	if err != nil {
		return PolicySetDefinitionsCreateOrUpdateResponse{}, err
	}
	if !runtime.HasStatusCode(resp, http.StatusOK, http.StatusCreated) {
		return PolicySetDefinitionsCreateOrUpdateResponse{}, client.createOrUpdateHandleError(resp)
	}
	return client.createOrUpdateHandleResponse(resp)
}

// createOrUpdateCreateRequest creates the CreateOrUpdate request.
func (client *PolicySetDefinitionsClient) createOrUpdateCreateRequest(ctx context.Context, policySetDefinitionName string, parameters PolicySetDefinition, options *PolicySetDefinitionsCreateOrUpdateOptions) (*policy.Request, error) {
	urlPath := "/subscriptions/{subscriptionId}/providers/Microsoft.Authorization/policySetDefinitions/{policySetDefinitionName}"
	if policySetDefinitionName == "" {
		return nil, errors.New("parameter policySetDefinitionName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{policySetDefinitionName}", url.PathEscape(policySetDefinitionName))
	if client.subscriptionID == "" {
		return nil, errors.New("parameter client.subscriptionID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{subscriptionId}", url.PathEscape(client.subscriptionID))
	req, err := runtime.NewRequest(ctx, http.MethodPut, runtime.JoinPaths(client.ep, urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("api-version", "2021-06-01")
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header.Set("Accept", "application/json")
	return req, runtime.MarshalAsJSON(req, parameters)
}

// createOrUpdateHandleResponse handles the CreateOrUpdate response.
func (client *PolicySetDefinitionsClient) createOrUpdateHandleResponse(resp *http.Response) (PolicySetDefinitionsCreateOrUpdateResponse, error) {
	result := PolicySetDefinitionsCreateOrUpdateResponse{RawResponse: resp}
	if err := runtime.UnmarshalAsJSON(resp, &result.PolicySetDefinition); err != nil {
		return PolicySetDefinitionsCreateOrUpdateResponse{}, runtime.NewResponseError(err, resp)
	}
	return result, nil
}

// createOrUpdateHandleError handles the CreateOrUpdate error response.
func (client *PolicySetDefinitionsClient) createOrUpdateHandleError(resp *http.Response) error {
	body, err := runtime.Payload(resp)
	if err != nil {
		return runtime.NewResponseError(err, resp)
	}
	errType := CloudError{raw: string(body)}
	if err := runtime.UnmarshalAsJSON(resp, &errType); err != nil {
		return runtime.NewResponseError(fmt.Errorf("%s\n%s", string(body), err), resp)
	}
	return runtime.NewResponseError(&errType, resp)
}

// CreateOrUpdateAtManagementGroup - This operation creates or updates a policy set definition in the given management group with the given name.
// If the operation fails it returns the *CloudError error type.
func (client *PolicySetDefinitionsClient) CreateOrUpdateAtManagementGroup(ctx context.Context, policySetDefinitionName string, managementGroupID string, parameters PolicySetDefinition, options *PolicySetDefinitionsCreateOrUpdateAtManagementGroupOptions) (PolicySetDefinitionsCreateOrUpdateAtManagementGroupResponse, error) {
	req, err := client.createOrUpdateAtManagementGroupCreateRequest(ctx, policySetDefinitionName, managementGroupID, parameters, options)
	if err != nil {
		return PolicySetDefinitionsCreateOrUpdateAtManagementGroupResponse{}, err
	}
	resp, err := client.pl.Do(req)
	if err != nil {
		return PolicySetDefinitionsCreateOrUpdateAtManagementGroupResponse{}, err
	}
	if !runtime.HasStatusCode(resp, http.StatusOK, http.StatusCreated) {
		return PolicySetDefinitionsCreateOrUpdateAtManagementGroupResponse{}, client.createOrUpdateAtManagementGroupHandleError(resp)
	}
	return client.createOrUpdateAtManagementGroupHandleResponse(resp)
}

// createOrUpdateAtManagementGroupCreateRequest creates the CreateOrUpdateAtManagementGroup request.
func (client *PolicySetDefinitionsClient) createOrUpdateAtManagementGroupCreateRequest(ctx context.Context, policySetDefinitionName string, managementGroupID string, parameters PolicySetDefinition, options *PolicySetDefinitionsCreateOrUpdateAtManagementGroupOptions) (*policy.Request, error) {
	urlPath := "/providers/Microsoft.Management/managementGroups/{managementGroupId}/providers/Microsoft.Authorization/policySetDefinitions/{policySetDefinitionName}"
	if policySetDefinitionName == "" {
		return nil, errors.New("parameter policySetDefinitionName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{policySetDefinitionName}", url.PathEscape(policySetDefinitionName))
	if managementGroupID == "" {
		return nil, errors.New("parameter managementGroupID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{managementGroupId}", url.PathEscape(managementGroupID))
	req, err := runtime.NewRequest(ctx, http.MethodPut, runtime.JoinPaths(client.ep, urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("api-version", "2021-06-01")
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header.Set("Accept", "application/json")
	return req, runtime.MarshalAsJSON(req, parameters)
}

// createOrUpdateAtManagementGroupHandleResponse handles the CreateOrUpdateAtManagementGroup response.
func (client *PolicySetDefinitionsClient) createOrUpdateAtManagementGroupHandleResponse(resp *http.Response) (PolicySetDefinitionsCreateOrUpdateAtManagementGroupResponse, error) {
	result := PolicySetDefinitionsCreateOrUpdateAtManagementGroupResponse{RawResponse: resp}
	if err := runtime.UnmarshalAsJSON(resp, &result.PolicySetDefinition); err != nil {
		return PolicySetDefinitionsCreateOrUpdateAtManagementGroupResponse{}, runtime.NewResponseError(err, resp)
	}
	return result, nil
}

// createOrUpdateAtManagementGroupHandleError handles the CreateOrUpdateAtManagementGroup error response.
func (client *PolicySetDefinitionsClient) createOrUpdateAtManagementGroupHandleError(resp *http.Response) error {
	body, err := runtime.Payload(resp)
	if err != nil {
		return runtime.NewResponseError(err, resp)
	}
	errType := CloudError{raw: string(body)}
	if err := runtime.UnmarshalAsJSON(resp, &errType); err != nil {
		return runtime.NewResponseError(fmt.Errorf("%s\n%s", string(body), err), resp)
	}
	return runtime.NewResponseError(&errType, resp)
}

// Delete - This operation deletes the policy set definition in the given subscription with the given name.
// If the operation fails it returns the *CloudError error type.
func (client *PolicySetDefinitionsClient) Delete(ctx context.Context, policySetDefinitionName string, options *PolicySetDefinitionsDeleteOptions) (PolicySetDefinitionsDeleteResponse, error) {
	req, err := client.deleteCreateRequest(ctx, policySetDefinitionName, options)
	if err != nil {
		return PolicySetDefinitionsDeleteResponse{}, err
	}
	resp, err := client.pl.Do(req)
	if err != nil {
		return PolicySetDefinitionsDeleteResponse{}, err
	}
	if !runtime.HasStatusCode(resp, http.StatusOK, http.StatusNoContent) {
		return PolicySetDefinitionsDeleteResponse{}, client.deleteHandleError(resp)
	}
	return PolicySetDefinitionsDeleteResponse{RawResponse: resp}, nil
}

// deleteCreateRequest creates the Delete request.
func (client *PolicySetDefinitionsClient) deleteCreateRequest(ctx context.Context, policySetDefinitionName string, options *PolicySetDefinitionsDeleteOptions) (*policy.Request, error) {
	urlPath := "/subscriptions/{subscriptionId}/providers/Microsoft.Authorization/policySetDefinitions/{policySetDefinitionName}"
	if policySetDefinitionName == "" {
		return nil, errors.New("parameter policySetDefinitionName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{policySetDefinitionName}", url.PathEscape(policySetDefinitionName))
	if client.subscriptionID == "" {
		return nil, errors.New("parameter client.subscriptionID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{subscriptionId}", url.PathEscape(client.subscriptionID))
	req, err := runtime.NewRequest(ctx, http.MethodDelete, runtime.JoinPaths(client.ep, urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("api-version", "2021-06-01")
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header.Set("Accept", "application/json")
	return req, nil
}

// deleteHandleError handles the Delete error response.
func (client *PolicySetDefinitionsClient) deleteHandleError(resp *http.Response) error {
	body, err := runtime.Payload(resp)
	if err != nil {
		return runtime.NewResponseError(err, resp)
	}
	errType := CloudError{raw: string(body)}
	if err := runtime.UnmarshalAsJSON(resp, &errType); err != nil {
		return runtime.NewResponseError(fmt.Errorf("%s\n%s", string(body), err), resp)
	}
	return runtime.NewResponseError(&errType, resp)
}

// DeleteAtManagementGroup - This operation deletes the policy set definition in the given management group with the given name.
// If the operation fails it returns the *CloudError error type.
func (client *PolicySetDefinitionsClient) DeleteAtManagementGroup(ctx context.Context, policySetDefinitionName string, managementGroupID string, options *PolicySetDefinitionsDeleteAtManagementGroupOptions) (PolicySetDefinitionsDeleteAtManagementGroupResponse, error) {
	req, err := client.deleteAtManagementGroupCreateRequest(ctx, policySetDefinitionName, managementGroupID, options)
	if err != nil {
		return PolicySetDefinitionsDeleteAtManagementGroupResponse{}, err
	}
	resp, err := client.pl.Do(req)
	if err != nil {
		return PolicySetDefinitionsDeleteAtManagementGroupResponse{}, err
	}
	if !runtime.HasStatusCode(resp, http.StatusOK, http.StatusNoContent) {
		return PolicySetDefinitionsDeleteAtManagementGroupResponse{}, client.deleteAtManagementGroupHandleError(resp)
	}
	return PolicySetDefinitionsDeleteAtManagementGroupResponse{RawResponse: resp}, nil
}

// deleteAtManagementGroupCreateRequest creates the DeleteAtManagementGroup request.
func (client *PolicySetDefinitionsClient) deleteAtManagementGroupCreateRequest(ctx context.Context, policySetDefinitionName string, managementGroupID string, options *PolicySetDefinitionsDeleteAtManagementGroupOptions) (*policy.Request, error) {
	urlPath := "/providers/Microsoft.Management/managementGroups/{managementGroupId}/providers/Microsoft.Authorization/policySetDefinitions/{policySetDefinitionName}"
	if policySetDefinitionName == "" {
		return nil, errors.New("parameter policySetDefinitionName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{policySetDefinitionName}", url.PathEscape(policySetDefinitionName))
	if managementGroupID == "" {
		return nil, errors.New("parameter managementGroupID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{managementGroupId}", url.PathEscape(managementGroupID))
	req, err := runtime.NewRequest(ctx, http.MethodDelete, runtime.JoinPaths(client.ep, urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("api-version", "2021-06-01")
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header.Set("Accept", "application/json")
	return req, nil
}

// deleteAtManagementGroupHandleError handles the DeleteAtManagementGroup error response.
func (client *PolicySetDefinitionsClient) deleteAtManagementGroupHandleError(resp *http.Response) error {
	body, err := runtime.Payload(resp)
	if err != nil {
		return runtime.NewResponseError(err, resp)
	}
	errType := CloudError{raw: string(body)}
	if err := runtime.UnmarshalAsJSON(resp, &errType); err != nil {
		return runtime.NewResponseError(fmt.Errorf("%s\n%s", string(body), err), resp)
	}
	return runtime.NewResponseError(&errType, resp)
}

// Get - This operation retrieves the policy set definition in the given subscription with the given name.
// If the operation fails it returns the *CloudError error type.
func (client *PolicySetDefinitionsClient) Get(ctx context.Context, policySetDefinitionName string, options *PolicySetDefinitionsGetOptions) (PolicySetDefinitionsGetResponse, error) {
	req, err := client.getCreateRequest(ctx, policySetDefinitionName, options)
	if err != nil {
		return PolicySetDefinitionsGetResponse{}, err
	}
	resp, err := client.pl.Do(req)
	if err != nil {
		return PolicySetDefinitionsGetResponse{}, err
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {
		return PolicySetDefinitionsGetResponse{}, client.getHandleError(resp)
	}
	return client.getHandleResponse(resp)
}

// getCreateRequest creates the Get request.
func (client *PolicySetDefinitionsClient) getCreateRequest(ctx context.Context, policySetDefinitionName string, options *PolicySetDefinitionsGetOptions) (*policy.Request, error) {
	urlPath := "/subscriptions/{subscriptionId}/providers/Microsoft.Authorization/policySetDefinitions/{policySetDefinitionName}"
	if policySetDefinitionName == "" {
		return nil, errors.New("parameter policySetDefinitionName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{policySetDefinitionName}", url.PathEscape(policySetDefinitionName))
	if client.subscriptionID == "" {
		return nil, errors.New("parameter client.subscriptionID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{subscriptionId}", url.PathEscape(client.subscriptionID))
	req, err := runtime.NewRequest(ctx, http.MethodGet, runtime.JoinPaths(client.ep, urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("api-version", "2021-06-01")
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header.Set("Accept", "application/json")
	return req, nil
}

// getHandleResponse handles the Get response.
func (client *PolicySetDefinitionsClient) getHandleResponse(resp *http.Response) (PolicySetDefinitionsGetResponse, error) {
	result := PolicySetDefinitionsGetResponse{RawResponse: resp}
	if err := runtime.UnmarshalAsJSON(resp, &result.PolicySetDefinition); err != nil {
		return PolicySetDefinitionsGetResponse{}, runtime.NewResponseError(err, resp)
	}
	return result, nil
}

// getHandleError handles the Get error response.
func (client *PolicySetDefinitionsClient) getHandleError(resp *http.Response) error {
	body, err := runtime.Payload(resp)
	if err != nil {
		return runtime.NewResponseError(err, resp)
	}
	errType := CloudError{raw: string(body)}
	if err := runtime.UnmarshalAsJSON(resp, &errType); err != nil {
		return runtime.NewResponseError(fmt.Errorf("%s\n%s", string(body), err), resp)
	}
	return runtime.NewResponseError(&errType, resp)
}

// GetAtManagementGroup - This operation retrieves the policy set definition in the given management group with the given name.
// If the operation fails it returns the *CloudError error type.
func (client *PolicySetDefinitionsClient) GetAtManagementGroup(ctx context.Context, policySetDefinitionName string, managementGroupID string, options *PolicySetDefinitionsGetAtManagementGroupOptions) (PolicySetDefinitionsGetAtManagementGroupResponse, error) {
	req, err := client.getAtManagementGroupCreateRequest(ctx, policySetDefinitionName, managementGroupID, options)
	if err != nil {
		return PolicySetDefinitionsGetAtManagementGroupResponse{}, err
	}
	resp, err := client.pl.Do(req)
	if err != nil {
		return PolicySetDefinitionsGetAtManagementGroupResponse{}, err
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {
		return PolicySetDefinitionsGetAtManagementGroupResponse{}, client.getAtManagementGroupHandleError(resp)
	}
	return client.getAtManagementGroupHandleResponse(resp)
}

// getAtManagementGroupCreateRequest creates the GetAtManagementGroup request.
func (client *PolicySetDefinitionsClient) getAtManagementGroupCreateRequest(ctx context.Context, policySetDefinitionName string, managementGroupID string, options *PolicySetDefinitionsGetAtManagementGroupOptions) (*policy.Request, error) {
	urlPath := "/providers/Microsoft.Management/managementGroups/{managementGroupId}/providers/Microsoft.Authorization/policySetDefinitions/{policySetDefinitionName}"
	if policySetDefinitionName == "" {
		return nil, errors.New("parameter policySetDefinitionName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{policySetDefinitionName}", url.PathEscape(policySetDefinitionName))
	if managementGroupID == "" {
		return nil, errors.New("parameter managementGroupID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{managementGroupId}", url.PathEscape(managementGroupID))
	req, err := runtime.NewRequest(ctx, http.MethodGet, runtime.JoinPaths(client.ep, urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("api-version", "2021-06-01")
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header.Set("Accept", "application/json")
	return req, nil
}

// getAtManagementGroupHandleResponse handles the GetAtManagementGroup response.
func (client *PolicySetDefinitionsClient) getAtManagementGroupHandleResponse(resp *http.Response) (PolicySetDefinitionsGetAtManagementGroupResponse, error) {
	result := PolicySetDefinitionsGetAtManagementGroupResponse{RawResponse: resp}
	if err := runtime.UnmarshalAsJSON(resp, &result.PolicySetDefinition); err != nil {
		return PolicySetDefinitionsGetAtManagementGroupResponse{}, runtime.NewResponseError(err, resp)
	}
	return result, nil
}

// getAtManagementGroupHandleError handles the GetAtManagementGroup error response.
func (client *PolicySetDefinitionsClient) getAtManagementGroupHandleError(resp *http.Response) error {
	body, err := runtime.Payload(resp)
	if err != nil {
		return runtime.NewResponseError(err, resp)
	}
	errType := CloudError{raw: string(body)}
	if err := runtime.UnmarshalAsJSON(resp, &errType); err != nil {
		return runtime.NewResponseError(fmt.Errorf("%s\n%s", string(body), err), resp)
	}
	return runtime.NewResponseError(&errType, resp)
}

// GetBuiltIn - This operation retrieves the built-in policy set definition with the given name.
// If the operation fails it returns the *CloudError error type.
func (client *PolicySetDefinitionsClient) GetBuiltIn(ctx context.Context, policySetDefinitionName string, options *PolicySetDefinitionsGetBuiltInOptions) (PolicySetDefinitionsGetBuiltInResponse, error) {
	req, err := client.getBuiltInCreateRequest(ctx, policySetDefinitionName, options)
	if err != nil {
		return PolicySetDefinitionsGetBuiltInResponse{}, err
	}
	resp, err := client.pl.Do(req)
	if err != nil {
		return PolicySetDefinitionsGetBuiltInResponse{}, err
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {
		return PolicySetDefinitionsGetBuiltInResponse{}, client.getBuiltInHandleError(resp)
	}
	return client.getBuiltInHandleResponse(resp)
}

// getBuiltInCreateRequest creates the GetBuiltIn request.
func (client *PolicySetDefinitionsClient) getBuiltInCreateRequest(ctx context.Context, policySetDefinitionName string, options *PolicySetDefinitionsGetBuiltInOptions) (*policy.Request, error) {
	urlPath := "/providers/Microsoft.Authorization/policySetDefinitions/{policySetDefinitionName}"
	if policySetDefinitionName == "" {
		return nil, errors.New("parameter policySetDefinitionName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{policySetDefinitionName}", url.PathEscape(policySetDefinitionName))
	req, err := runtime.NewRequest(ctx, http.MethodGet, runtime.JoinPaths(client.ep, urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("api-version", "2021-06-01")
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header.Set("Accept", "application/json")
	return req, nil
}

// getBuiltInHandleResponse handles the GetBuiltIn response.
func (client *PolicySetDefinitionsClient) getBuiltInHandleResponse(resp *http.Response) (PolicySetDefinitionsGetBuiltInResponse, error) {
	result := PolicySetDefinitionsGetBuiltInResponse{RawResponse: resp}
	if err := runtime.UnmarshalAsJSON(resp, &result.PolicySetDefinition); err != nil {
		return PolicySetDefinitionsGetBuiltInResponse{}, runtime.NewResponseError(err, resp)
	}
	return result, nil
}

// getBuiltInHandleError handles the GetBuiltIn error response.
func (client *PolicySetDefinitionsClient) getBuiltInHandleError(resp *http.Response) error {
	body, err := runtime.Payload(resp)
	if err != nil {
		return runtime.NewResponseError(err, resp)
	}
	errType := CloudError{raw: string(body)}
	if err := runtime.UnmarshalAsJSON(resp, &errType); err != nil {
		return runtime.NewResponseError(fmt.Errorf("%s\n%s", string(body), err), resp)
	}
	return runtime.NewResponseError(&errType, resp)
}

// List - This operation retrieves a list of all the policy set definitions in a given subscription that match the optional given $filter. Valid values
// for $filter are: 'atExactScope()', 'policyType -eq
// {value}' or 'category eq '{value}''. If $filter is not provided, the unfiltered list includes all policy set definitions associated with the subscription,
// including those that apply directly or from
// management groups that contain the given subscription. If $filter=atExactScope() is provided, the returned list only includes all policy set definitions
// that at the given subscription. If
// $filter='policyType -eq {value}' is provided, the returned list only includes all policy set definitions whose type match the {value}. Possible policyType
// values are NotSpecified, BuiltIn and Custom.
// If $filter='category -eq {value}' is provided, the returned list only includes all policy set definitions whose category match the {value}.
// If the operation fails it returns the *CloudError error type.
func (client *PolicySetDefinitionsClient) List(options *PolicySetDefinitionsListOptions) *PolicySetDefinitionsListPager {
	return &PolicySetDefinitionsListPager{
		client: client,
		requester: func(ctx context.Context) (*policy.Request, error) {
			return client.listCreateRequest(ctx, options)
		},
		advancer: func(ctx context.Context, resp PolicySetDefinitionsListResponse) (*policy.Request, error) {
			return runtime.NewRequest(ctx, http.MethodGet, *resp.PolicySetDefinitionListResult.NextLink)
		},
	}
}

// listCreateRequest creates the List request.
func (client *PolicySetDefinitionsClient) listCreateRequest(ctx context.Context, options *PolicySetDefinitionsListOptions) (*policy.Request, error) {
	urlPath := "/subscriptions/{subscriptionId}/providers/Microsoft.Authorization/policySetDefinitions"
	if client.subscriptionID == "" {
		return nil, errors.New("parameter client.subscriptionID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{subscriptionId}", url.PathEscape(client.subscriptionID))
	req, err := runtime.NewRequest(ctx, http.MethodGet, runtime.JoinPaths(client.ep, urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("api-version", "2021-06-01")
	if options != nil && options.Top != nil {
		reqQP.Set("$top", strconv.FormatInt(int64(*options.Top), 10))
	}
	req.Raw().URL.RawQuery = reqQP.Encode()
	unencodedParams := []string{req.Raw().URL.RawQuery}
	if options != nil && options.Filter != nil {
		unencodedParams = append(unencodedParams, "$filter="+*options.Filter)
	}
	req.Raw().URL.RawQuery = strings.Join(unencodedParams, "&")
	req.Raw().Header.Set("Accept", "application/json")
	return req, nil
}

// listHandleResponse handles the List response.
func (client *PolicySetDefinitionsClient) listHandleResponse(resp *http.Response) (PolicySetDefinitionsListResponse, error) {
	result := PolicySetDefinitionsListResponse{RawResponse: resp}
	if err := runtime.UnmarshalAsJSON(resp, &result.PolicySetDefinitionListResult); err != nil {
		return PolicySetDefinitionsListResponse{}, runtime.NewResponseError(err, resp)
	}
	return result, nil
}

// listHandleError handles the List error response.
func (client *PolicySetDefinitionsClient) listHandleError(resp *http.Response) error {
	body, err := runtime.Payload(resp)
	if err != nil {
		return runtime.NewResponseError(err, resp)
	}
	errType := CloudError{raw: string(body)}
	if err := runtime.UnmarshalAsJSON(resp, &errType); err != nil {
		return runtime.NewResponseError(fmt.Errorf("%s\n%s", string(body), err), resp)
	}
	return runtime.NewResponseError(&errType, resp)
}

// ListBuiltIn - This operation retrieves a list of all the built-in policy set definitions that match the optional given $filter. If $filter='category
// -eq {value}' is provided, the returned list only includes all
// built-in policy set definitions whose category match the {value}.
// If the operation fails it returns the *CloudError error type.
func (client *PolicySetDefinitionsClient) ListBuiltIn(options *PolicySetDefinitionsListBuiltInOptions) *PolicySetDefinitionsListBuiltInPager {
	return &PolicySetDefinitionsListBuiltInPager{
		client: client,
		requester: func(ctx context.Context) (*policy.Request, error) {
			return client.listBuiltInCreateRequest(ctx, options)
		},
		advancer: func(ctx context.Context, resp PolicySetDefinitionsListBuiltInResponse) (*policy.Request, error) {
			return runtime.NewRequest(ctx, http.MethodGet, *resp.PolicySetDefinitionListResult.NextLink)
		},
	}
}

// listBuiltInCreateRequest creates the ListBuiltIn request.
func (client *PolicySetDefinitionsClient) listBuiltInCreateRequest(ctx context.Context, options *PolicySetDefinitionsListBuiltInOptions) (*policy.Request, error) {
	urlPath := "/providers/Microsoft.Authorization/policySetDefinitions"
	req, err := runtime.NewRequest(ctx, http.MethodGet, runtime.JoinPaths(client.ep, urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("api-version", "2021-06-01")
	if options != nil && options.Top != nil {
		reqQP.Set("$top", strconv.FormatInt(int64(*options.Top), 10))
	}
	req.Raw().URL.RawQuery = reqQP.Encode()
	unencodedParams := []string{req.Raw().URL.RawQuery}
	if options != nil && options.Filter != nil {
		unencodedParams = append(unencodedParams, "$filter="+*options.Filter)
	}
	req.Raw().URL.RawQuery = strings.Join(unencodedParams, "&")
	req.Raw().Header.Set("Accept", "application/json")
	return req, nil
}

// listBuiltInHandleResponse handles the ListBuiltIn response.
func (client *PolicySetDefinitionsClient) listBuiltInHandleResponse(resp *http.Response) (PolicySetDefinitionsListBuiltInResponse, error) {
	result := PolicySetDefinitionsListBuiltInResponse{RawResponse: resp}
	if err := runtime.UnmarshalAsJSON(resp, &result.PolicySetDefinitionListResult); err != nil {
		return PolicySetDefinitionsListBuiltInResponse{}, runtime.NewResponseError(err, resp)
	}
	return result, nil
}

// listBuiltInHandleError handles the ListBuiltIn error response.
func (client *PolicySetDefinitionsClient) listBuiltInHandleError(resp *http.Response) error {
	body, err := runtime.Payload(resp)
	if err != nil {
		return runtime.NewResponseError(err, resp)
	}
	errType := CloudError{raw: string(body)}
	if err := runtime.UnmarshalAsJSON(resp, &errType); err != nil {
		return runtime.NewResponseError(fmt.Errorf("%s\n%s", string(body), err), resp)
	}
	return runtime.NewResponseError(&errType, resp)
}

// ListByManagementGroup - This operation retrieves a list of all the policy set definitions in a given management group that match the optional given $filter.
// Valid values for $filter are: 'atExactScope()', 'policyType -eq
// {value}' or 'category eq '{value}''. If $filter is not provided, the unfiltered list includes all policy set definitions associated with the management
// group, including those that apply directly or
// from management groups that contain the given management group. If $filter=atExactScope() is provided, the returned list only includes all policy set
// definitions that at the given management group. If
// $filter='policyType -eq {value}' is provided, the returned list only includes all policy set definitions whose type match the {value}. Possible policyType
// values are NotSpecified, BuiltIn and Custom.
// If $filter='category -eq {value}' is provided, the returned list only includes all policy set definitions whose category match the {value}.
// If the operation fails it returns the *CloudError error type.
func (client *PolicySetDefinitionsClient) ListByManagementGroup(managementGroupID string, options *PolicySetDefinitionsListByManagementGroupOptions) *PolicySetDefinitionsListByManagementGroupPager {
	return &PolicySetDefinitionsListByManagementGroupPager{
		client: client,
		requester: func(ctx context.Context) (*policy.Request, error) {
			return client.listByManagementGroupCreateRequest(ctx, managementGroupID, options)
		},
		advancer: func(ctx context.Context, resp PolicySetDefinitionsListByManagementGroupResponse) (*policy.Request, error) {
			return runtime.NewRequest(ctx, http.MethodGet, *resp.PolicySetDefinitionListResult.NextLink)
		},
	}
}

// listByManagementGroupCreateRequest creates the ListByManagementGroup request.
func (client *PolicySetDefinitionsClient) listByManagementGroupCreateRequest(ctx context.Context, managementGroupID string, options *PolicySetDefinitionsListByManagementGroupOptions) (*policy.Request, error) {
	urlPath := "/providers/Microsoft.Management/managementGroups/{managementGroupId}/providers/Microsoft.Authorization/policySetDefinitions"
	if managementGroupID == "" {
		return nil, errors.New("parameter managementGroupID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{managementGroupId}", url.PathEscape(managementGroupID))
	req, err := runtime.NewRequest(ctx, http.MethodGet, runtime.JoinPaths(client.ep, urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("api-version", "2021-06-01")
	if options != nil && options.Top != nil {
		reqQP.Set("$top", strconv.FormatInt(int64(*options.Top), 10))
	}
	req.Raw().URL.RawQuery = reqQP.Encode()
	unencodedParams := []string{req.Raw().URL.RawQuery}
	if options != nil && options.Filter != nil {
		unencodedParams = append(unencodedParams, "$filter="+*options.Filter)
	}
	req.Raw().URL.RawQuery = strings.Join(unencodedParams, "&")
	req.Raw().Header.Set("Accept", "application/json")
	return req, nil
}

// listByManagementGroupHandleResponse handles the ListByManagementGroup response.
func (client *PolicySetDefinitionsClient) listByManagementGroupHandleResponse(resp *http.Response) (PolicySetDefinitionsListByManagementGroupResponse, error) {
	result := PolicySetDefinitionsListByManagementGroupResponse{RawResponse: resp}
	if err := runtime.UnmarshalAsJSON(resp, &result.PolicySetDefinitionListResult); err != nil {
		return PolicySetDefinitionsListByManagementGroupResponse{}, runtime.NewResponseError(err, resp)
	}
	return result, nil
}

// listByManagementGroupHandleError handles the ListByManagementGroup error response.
func (client *PolicySetDefinitionsClient) listByManagementGroupHandleError(resp *http.Response) error {
	body, err := runtime.Payload(resp)
	if err != nil {
		return runtime.NewResponseError(err, resp)
	}
	errType := CloudError{raw: string(body)}
	if err := runtime.UnmarshalAsJSON(resp, &errType); err != nil {
		return runtime.NewResponseError(fmt.Errorf("%s\n%s", string(body), err), resp)
	}
	return runtime.NewResponseError(&errType, resp)
}
