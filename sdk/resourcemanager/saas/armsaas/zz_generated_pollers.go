//go:build go1.16
// +build go1.16

// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

package armsaas

import (
	"context"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore"
	"net/http"
)

// SaaSCreateResourcePoller provides polling facilities until the operation reaches a terminal state.
type SaaSCreateResourcePoller struct {
	pt *azcore.Poller
}

// Done returns true if the LRO has reached a terminal state.
func (p *SaaSCreateResourcePoller) Done() bool {
	return p.pt.Done()
}

// Poll fetches the latest state of the LRO.  It returns an HTTP response or error.
// If the LRO has completed successfully, the poller's state is updated and the HTTP
// response is returned.
// If the LRO has completed with failure or was cancelled, the poller's state is
// updated and the error is returned.
// If the LRO has not reached a terminal state, the poller's state is updated and
// the latest HTTP response is returned.
// If Poll fails, the poller's state is unmodified and the error is returned.
// Calling Poll on an LRO that has reached a terminal state will return the final
// HTTP response or error.
func (p *SaaSCreateResourcePoller) Poll(ctx context.Context) (*http.Response, error) {
	return p.pt.Poll(ctx)
}

// FinalResponse performs a final GET to the service and returns the final response
// for the polling operation. If there is an error performing the final GET then an error is returned.
// If the final GET succeeded then the final SaaSCreateResourceResponse will be returned.
func (p *SaaSCreateResourcePoller) FinalResponse(ctx context.Context) (SaaSCreateResourceResponse, error) {
	respType := SaaSCreateResourceResponse{}
	resp, err := p.pt.FinalResponse(ctx, &respType.SaasResource)
	if err != nil {
		return SaaSCreateResourceResponse{}, err
	}
	respType.RawResponse = resp
	return respType, nil
}

// ResumeToken returns a value representing the poller that can be used to resume
// the LRO at a later time. ResumeTokens are unique per service operation.
func (p *SaaSCreateResourcePoller) ResumeToken() (string, error) {
	return p.pt.ResumeToken()
}

// SaaSDeletePoller provides polling facilities until the operation reaches a terminal state.
type SaaSDeletePoller struct {
	pt *azcore.Poller
}

// Done returns true if the LRO has reached a terminal state.
func (p *SaaSDeletePoller) Done() bool {
	return p.pt.Done()
}

// Poll fetches the latest state of the LRO.  It returns an HTTP response or error.
// If the LRO has completed successfully, the poller's state is updated and the HTTP
// response is returned.
// If the LRO has completed with failure or was cancelled, the poller's state is
// updated and the error is returned.
// If the LRO has not reached a terminal state, the poller's state is updated and
// the latest HTTP response is returned.
// If Poll fails, the poller's state is unmodified and the error is returned.
// Calling Poll on an LRO that has reached a terminal state will return the final
// HTTP response or error.
func (p *SaaSDeletePoller) Poll(ctx context.Context) (*http.Response, error) {
	return p.pt.Poll(ctx)
}

// FinalResponse performs a final GET to the service and returns the final response
// for the polling operation. If there is an error performing the final GET then an error is returned.
// If the final GET succeeded then the final SaaSDeleteResponse will be returned.
func (p *SaaSDeletePoller) FinalResponse(ctx context.Context) (SaaSDeleteResponse, error) {
	respType := SaaSDeleteResponse{}
	resp, err := p.pt.FinalResponse(ctx, nil)
	if err != nil {
		return SaaSDeleteResponse{}, err
	}
	respType.RawResponse = resp
	return respType, nil
}

// ResumeToken returns a value representing the poller that can be used to resume
// the LRO at a later time. ResumeTokens are unique per service operation.
func (p *SaaSDeletePoller) ResumeToken() (string, error) {
	return p.pt.ResumeToken()
}

// SaaSOperationGetPoller provides polling facilities until the operation reaches a terminal state.
type SaaSOperationGetPoller struct {
	pt *azcore.Poller
}

// Done returns true if the LRO has reached a terminal state.
func (p *SaaSOperationGetPoller) Done() bool {
	return p.pt.Done()
}

// Poll fetches the latest state of the LRO.  It returns an HTTP response or error.
// If the LRO has completed successfully, the poller's state is updated and the HTTP
// response is returned.
// If the LRO has completed with failure or was cancelled, the poller's state is
// updated and the error is returned.
// If the LRO has not reached a terminal state, the poller's state is updated and
// the latest HTTP response is returned.
// If Poll fails, the poller's state is unmodified and the error is returned.
// Calling Poll on an LRO that has reached a terminal state will return the final
// HTTP response or error.
func (p *SaaSOperationGetPoller) Poll(ctx context.Context) (*http.Response, error) {
	return p.pt.Poll(ctx)
}

// FinalResponse performs a final GET to the service and returns the final response
// for the polling operation. If there is an error performing the final GET then an error is returned.
// If the final GET succeeded then the final SaaSOperationGetResponse will be returned.
func (p *SaaSOperationGetPoller) FinalResponse(ctx context.Context) (SaaSOperationGetResponse, error) {
	respType := SaaSOperationGetResponse{}
	resp, err := p.pt.FinalResponse(ctx, &respType.SaasResource)
	if err != nil {
		return SaaSOperationGetResponse{}, err
	}
	respType.RawResponse = resp
	return respType, nil
}

// ResumeToken returns a value representing the poller that can be used to resume
// the LRO at a later time. ResumeTokens are unique per service operation.
func (p *SaaSOperationGetPoller) ResumeToken() (string, error) {
	return p.pt.ResumeToken()
}

// SaaSUpdateResourcePoller provides polling facilities until the operation reaches a terminal state.
type SaaSUpdateResourcePoller struct {
	pt *azcore.Poller
}

// Done returns true if the LRO has reached a terminal state.
func (p *SaaSUpdateResourcePoller) Done() bool {
	return p.pt.Done()
}

// Poll fetches the latest state of the LRO.  It returns an HTTP response or error.
// If the LRO has completed successfully, the poller's state is updated and the HTTP
// response is returned.
// If the LRO has completed with failure or was cancelled, the poller's state is
// updated and the error is returned.
// If the LRO has not reached a terminal state, the poller's state is updated and
// the latest HTTP response is returned.
// If Poll fails, the poller's state is unmodified and the error is returned.
// Calling Poll on an LRO that has reached a terminal state will return the final
// HTTP response or error.
func (p *SaaSUpdateResourcePoller) Poll(ctx context.Context) (*http.Response, error) {
	return p.pt.Poll(ctx)
}

// FinalResponse performs a final GET to the service and returns the final response
// for the polling operation. If there is an error performing the final GET then an error is returned.
// If the final GET succeeded then the final SaaSUpdateResourceResponse will be returned.
func (p *SaaSUpdateResourcePoller) FinalResponse(ctx context.Context) (SaaSUpdateResourceResponse, error) {
	respType := SaaSUpdateResourceResponse{}
	resp, err := p.pt.FinalResponse(ctx, &respType.SaasResource)
	if err != nil {
		return SaaSUpdateResourceResponse{}, err
	}
	respType.RawResponse = resp
	return respType, nil
}

// ResumeToken returns a value representing the poller that can be used to resume
// the LRO at a later time. ResumeTokens are unique per service operation.
func (p *SaaSUpdateResourcePoller) ResumeToken() (string, error) {
	return p.pt.ResumeToken()
}

// SaasSubscriptionLevelCreateOrUpdatePoller provides polling facilities until the operation reaches a terminal state.
type SaasSubscriptionLevelCreateOrUpdatePoller struct {
	pt *azcore.Poller
}

// Done returns true if the LRO has reached a terminal state.
func (p *SaasSubscriptionLevelCreateOrUpdatePoller) Done() bool {
	return p.pt.Done()
}

// Poll fetches the latest state of the LRO.  It returns an HTTP response or error.
// If the LRO has completed successfully, the poller's state is updated and the HTTP
// response is returned.
// If the LRO has completed with failure or was cancelled, the poller's state is
// updated and the error is returned.
// If the LRO has not reached a terminal state, the poller's state is updated and
// the latest HTTP response is returned.
// If Poll fails, the poller's state is unmodified and the error is returned.
// Calling Poll on an LRO that has reached a terminal state will return the final
// HTTP response or error.
func (p *SaasSubscriptionLevelCreateOrUpdatePoller) Poll(ctx context.Context) (*http.Response, error) {
	return p.pt.Poll(ctx)
}

// FinalResponse performs a final GET to the service and returns the final response
// for the polling operation. If there is an error performing the final GET then an error is returned.
// If the final GET succeeded then the final SaasSubscriptionLevelCreateOrUpdateResponse will be returned.
func (p *SaasSubscriptionLevelCreateOrUpdatePoller) FinalResponse(ctx context.Context) (SaasSubscriptionLevelCreateOrUpdateResponse, error) {
	respType := SaasSubscriptionLevelCreateOrUpdateResponse{}
	resp, err := p.pt.FinalResponse(ctx, &respType.SaasResource)
	if err != nil {
		return SaasSubscriptionLevelCreateOrUpdateResponse{}, err
	}
	respType.RawResponse = resp
	return respType, nil
}

// ResumeToken returns a value representing the poller that can be used to resume
// the LRO at a later time. ResumeTokens are unique per service operation.
func (p *SaasSubscriptionLevelCreateOrUpdatePoller) ResumeToken() (string, error) {
	return p.pt.ResumeToken()
}

// SaasSubscriptionLevelDeletePoller provides polling facilities until the operation reaches a terminal state.
type SaasSubscriptionLevelDeletePoller struct {
	pt *azcore.Poller
}

// Done returns true if the LRO has reached a terminal state.
func (p *SaasSubscriptionLevelDeletePoller) Done() bool {
	return p.pt.Done()
}

// Poll fetches the latest state of the LRO.  It returns an HTTP response or error.
// If the LRO has completed successfully, the poller's state is updated and the HTTP
// response is returned.
// If the LRO has completed with failure or was cancelled, the poller's state is
// updated and the error is returned.
// If the LRO has not reached a terminal state, the poller's state is updated and
// the latest HTTP response is returned.
// If Poll fails, the poller's state is unmodified and the error is returned.
// Calling Poll on an LRO that has reached a terminal state will return the final
// HTTP response or error.
func (p *SaasSubscriptionLevelDeletePoller) Poll(ctx context.Context) (*http.Response, error) {
	return p.pt.Poll(ctx)
}

// FinalResponse performs a final GET to the service and returns the final response
// for the polling operation. If there is an error performing the final GET then an error is returned.
// If the final GET succeeded then the final SaasSubscriptionLevelDeleteResponse will be returned.
func (p *SaasSubscriptionLevelDeletePoller) FinalResponse(ctx context.Context) (SaasSubscriptionLevelDeleteResponse, error) {
	respType := SaasSubscriptionLevelDeleteResponse{}
	resp, err := p.pt.FinalResponse(ctx, nil)
	if err != nil {
		return SaasSubscriptionLevelDeleteResponse{}, err
	}
	respType.RawResponse = resp
	return respType, nil
}

// ResumeToken returns a value representing the poller that can be used to resume
// the LRO at a later time. ResumeTokens are unique per service operation.
func (p *SaasSubscriptionLevelDeletePoller) ResumeToken() (string, error) {
	return p.pt.ResumeToken()
}

// SaasSubscriptionLevelMoveResourcesPoller provides polling facilities until the operation reaches a terminal state.
type SaasSubscriptionLevelMoveResourcesPoller struct {
	pt *azcore.Poller
}

// Done returns true if the LRO has reached a terminal state.
func (p *SaasSubscriptionLevelMoveResourcesPoller) Done() bool {
	return p.pt.Done()
}

// Poll fetches the latest state of the LRO.  It returns an HTTP response or error.
// If the LRO has completed successfully, the poller's state is updated and the HTTP
// response is returned.
// If the LRO has completed with failure or was cancelled, the poller's state is
// updated and the error is returned.
// If the LRO has not reached a terminal state, the poller's state is updated and
// the latest HTTP response is returned.
// If Poll fails, the poller's state is unmodified and the error is returned.
// Calling Poll on an LRO that has reached a terminal state will return the final
// HTTP response or error.
func (p *SaasSubscriptionLevelMoveResourcesPoller) Poll(ctx context.Context) (*http.Response, error) {
	return p.pt.Poll(ctx)
}

// FinalResponse performs a final GET to the service and returns the final response
// for the polling operation. If there is an error performing the final GET then an error is returned.
// If the final GET succeeded then the final SaasSubscriptionLevelMoveResourcesResponse will be returned.
func (p *SaasSubscriptionLevelMoveResourcesPoller) FinalResponse(ctx context.Context) (SaasSubscriptionLevelMoveResourcesResponse, error) {
	respType := SaasSubscriptionLevelMoveResourcesResponse{}
	resp, err := p.pt.FinalResponse(ctx, nil)
	if err != nil {
		return SaasSubscriptionLevelMoveResourcesResponse{}, err
	}
	respType.RawResponse = resp
	return respType, nil
}

// ResumeToken returns a value representing the poller that can be used to resume
// the LRO at a later time. ResumeTokens are unique per service operation.
func (p *SaasSubscriptionLevelMoveResourcesPoller) ResumeToken() (string, error) {
	return p.pt.ResumeToken()
}

// SaasSubscriptionLevelUpdatePoller provides polling facilities until the operation reaches a terminal state.
type SaasSubscriptionLevelUpdatePoller struct {
	pt *azcore.Poller
}

// Done returns true if the LRO has reached a terminal state.
func (p *SaasSubscriptionLevelUpdatePoller) Done() bool {
	return p.pt.Done()
}

// Poll fetches the latest state of the LRO.  It returns an HTTP response or error.
// If the LRO has completed successfully, the poller's state is updated and the HTTP
// response is returned.
// If the LRO has completed with failure or was cancelled, the poller's state is
// updated and the error is returned.
// If the LRO has not reached a terminal state, the poller's state is updated and
// the latest HTTP response is returned.
// If Poll fails, the poller's state is unmodified and the error is returned.
// Calling Poll on an LRO that has reached a terminal state will return the final
// HTTP response or error.
func (p *SaasSubscriptionLevelUpdatePoller) Poll(ctx context.Context) (*http.Response, error) {
	return p.pt.Poll(ctx)
}

// FinalResponse performs a final GET to the service and returns the final response
// for the polling operation. If there is an error performing the final GET then an error is returned.
// If the final GET succeeded then the final SaasSubscriptionLevelUpdateResponse will be returned.
func (p *SaasSubscriptionLevelUpdatePoller) FinalResponse(ctx context.Context) (SaasSubscriptionLevelUpdateResponse, error) {
	respType := SaasSubscriptionLevelUpdateResponse{}
	resp, err := p.pt.FinalResponse(ctx, &respType.SaasResource)
	if err != nil {
		return SaasSubscriptionLevelUpdateResponse{}, err
	}
	respType.RawResponse = resp
	return respType, nil
}

// ResumeToken returns a value representing the poller that can be used to resume
// the LRO at a later time. ResumeTokens are unique per service operation.
func (p *SaasSubscriptionLevelUpdatePoller) ResumeToken() (string, error) {
	return p.pt.ResumeToken()
}

// SaasSubscriptionLevelUpdateToUnsubscribedPoller provides polling facilities until the operation reaches a terminal state.
type SaasSubscriptionLevelUpdateToUnsubscribedPoller struct {
	pt *azcore.Poller
}

// Done returns true if the LRO has reached a terminal state.
func (p *SaasSubscriptionLevelUpdateToUnsubscribedPoller) Done() bool {
	return p.pt.Done()
}

// Poll fetches the latest state of the LRO.  It returns an HTTP response or error.
// If the LRO has completed successfully, the poller's state is updated and the HTTP
// response is returned.
// If the LRO has completed with failure or was cancelled, the poller's state is
// updated and the error is returned.
// If the LRO has not reached a terminal state, the poller's state is updated and
// the latest HTTP response is returned.
// If Poll fails, the poller's state is unmodified and the error is returned.
// Calling Poll on an LRO that has reached a terminal state will return the final
// HTTP response or error.
func (p *SaasSubscriptionLevelUpdateToUnsubscribedPoller) Poll(ctx context.Context) (*http.Response, error) {
	return p.pt.Poll(ctx)
}

// FinalResponse performs a final GET to the service and returns the final response
// for the polling operation. If there is an error performing the final GET then an error is returned.
// If the final GET succeeded then the final SaasSubscriptionLevelUpdateToUnsubscribedResponse will be returned.
func (p *SaasSubscriptionLevelUpdateToUnsubscribedPoller) FinalResponse(ctx context.Context) (SaasSubscriptionLevelUpdateToUnsubscribedResponse, error) {
	respType := SaasSubscriptionLevelUpdateToUnsubscribedResponse{}
	resp, err := p.pt.FinalResponse(ctx, nil)
	if err != nil {
		return SaasSubscriptionLevelUpdateToUnsubscribedResponse{}, err
	}
	respType.RawResponse = resp
	return respType, nil
}

// ResumeToken returns a value representing the poller that can be used to resume
// the LRO at a later time. ResumeTokens are unique per service operation.
func (p *SaasSubscriptionLevelUpdateToUnsubscribedPoller) ResumeToken() (string, error) {
	return p.pt.ResumeToken()
}
