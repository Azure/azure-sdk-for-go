//go:build go1.16
// +build go1.16

// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

package armsaas

import (
	"context"
	"errors"
	"fmt"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/arm"
	armruntime "github.com/Azure/azure-sdk-for-go/sdk/azcore/arm/runtime"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/policy"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/runtime"
	"net/http"
	"net/url"
	"strings"
)

// SaaSClient contains the methods for the SaaS group.
// Don't use this type directly, use NewSaaSClient() instead.
type SaaSClient struct {
	ep string
	pl runtime.Pipeline
}

// NewSaaSClient creates a new instance of SaaSClient with the specified values.
func NewSaaSClient(credential azcore.TokenCredential, options *arm.ClientOptions) *SaaSClient {
	cp := arm.ClientOptions{}
	if options != nil {
		cp = *options
	}
	if len(cp.Host) == 0 {
		cp.Host = arm.AzurePublicCloud
	}
	return &SaaSClient{ep: string(cp.Host), pl: armruntime.NewPipeline(module, version, credential, &cp)}
}

// BeginCreateResource - Creates a SaaS resource.
// If the operation fails it returns the *ErrorResponse error type.
func (client *SaaSClient) BeginCreateResource(ctx context.Context, parameters SaasResourceCreation, options *SaaSBeginCreateResourceOptions) (SaaSCreateResourcePollerResponse, error) {
	resp, err := client.createResource(ctx, parameters, options)
	if err != nil {
		return SaaSCreateResourcePollerResponse{}, err
	}
	result := SaaSCreateResourcePollerResponse{
		RawResponse: resp,
	}
	pt, err := armruntime.NewPoller("SaaSClient.CreateResource", "location", resp, client.pl, client.createResourceHandleError)
	if err != nil {
		return SaaSCreateResourcePollerResponse{}, err
	}
	result.Poller = &SaaSCreateResourcePoller{
		pt: pt,
	}
	return result, nil
}

// CreateResource - Creates a SaaS resource.
// If the operation fails it returns the *ErrorResponse error type.
func (client *SaaSClient) createResource(ctx context.Context, parameters SaasResourceCreation, options *SaaSBeginCreateResourceOptions) (*http.Response, error) {
	req, err := client.createResourceCreateRequest(ctx, parameters, options)
	if err != nil {
		return nil, err
	}
	resp, err := client.pl.Do(req)
	if err != nil {
		return nil, err
	}
	if !runtime.HasStatusCode(resp, http.StatusOK, http.StatusAccepted) {
		return nil, client.createResourceHandleError(resp)
	}
	return resp, nil
}

// createResourceCreateRequest creates the CreateResource request.
func (client *SaaSClient) createResourceCreateRequest(ctx context.Context, parameters SaasResourceCreation, options *SaaSBeginCreateResourceOptions) (*policy.Request, error) {
	urlPath := "/providers/Microsoft.SaaS/saasresources"
	req, err := runtime.NewRequest(ctx, http.MethodPut, runtime.JoinPaths(client.ep, urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("api-version", "2018-03-01-beta")
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header.Set("Accept", "application/json")
	return req, runtime.MarshalAsJSON(req, parameters)
}

// createResourceHandleError handles the CreateResource error response.
func (client *SaaSClient) createResourceHandleError(resp *http.Response) error {
	body, err := runtime.Payload(resp)
	if err != nil {
		return runtime.NewResponseError(err, resp)
	}
	errType := ErrorResponse{raw: string(body)}
	if err := runtime.UnmarshalAsJSON(resp, &errType); err != nil {
		return runtime.NewResponseError(fmt.Errorf("%s\n%s", string(body), err), resp)
	}
	return runtime.NewResponseError(&errType, resp)
}

// BeginDelete - Deletes the specified SaaS.
// If the operation fails it returns the *ErrorResponse error type.
func (client *SaaSClient) BeginDelete(ctx context.Context, resourceID string, parameters DeleteOptions, options *SaaSBeginDeleteOptions) (SaaSDeletePollerResponse, error) {
	resp, err := client.deleteOperation(ctx, resourceID, parameters, options)
	if err != nil {
		return SaaSDeletePollerResponse{}, err
	}
	result := SaaSDeletePollerResponse{
		RawResponse: resp,
	}
	pt, err := armruntime.NewPoller("SaaSClient.Delete", "location", resp, client.pl, client.deleteHandleError)
	if err != nil {
		return SaaSDeletePollerResponse{}, err
	}
	result.Poller = &SaaSDeletePoller{
		pt: pt,
	}
	return result, nil
}

// Delete - Deletes the specified SaaS.
// If the operation fails it returns the *ErrorResponse error type.
func (client *SaaSClient) deleteOperation(ctx context.Context, resourceID string, parameters DeleteOptions, options *SaaSBeginDeleteOptions) (*http.Response, error) {
	req, err := client.deleteCreateRequest(ctx, resourceID, parameters, options)
	if err != nil {
		return nil, err
	}
	resp, err := client.pl.Do(req)
	if err != nil {
		return nil, err
	}
	if !runtime.HasStatusCode(resp, http.StatusOK, http.StatusNoContent) {
		return nil, client.deleteHandleError(resp)
	}
	return resp, nil
}

// deleteCreateRequest creates the Delete request.
func (client *SaaSClient) deleteCreateRequest(ctx context.Context, resourceID string, parameters DeleteOptions, options *SaaSBeginDeleteOptions) (*policy.Request, error) {
	urlPath := "/providers/Microsoft.SaaS/saasresources/{resourceId}"
	if resourceID == "" {
		return nil, errors.New("parameter resourceID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{resourceId}", url.PathEscape(resourceID))
	req, err := runtime.NewRequest(ctx, http.MethodDelete, runtime.JoinPaths(client.ep, urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("api-version", "2018-03-01-beta")
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header.Set("Accept", "application/json")
	return req, runtime.MarshalAsJSON(req, parameters)
}

// deleteHandleError handles the Delete error response.
func (client *SaaSClient) deleteHandleError(resp *http.Response) error {
	body, err := runtime.Payload(resp)
	if err != nil {
		return runtime.NewResponseError(err, resp)
	}
	errType := ErrorResponse{raw: string(body)}
	if err := runtime.UnmarshalAsJSON(resp, &errType); err != nil {
		return runtime.NewResponseError(fmt.Errorf("%s\n%s", string(body), err), resp)
	}
	return runtime.NewResponseError(&errType, resp)
}

// GetResource - Gets information about the specified SaaS.
// If the operation fails it returns the *ErrorResponse error type.
func (client *SaaSClient) GetResource(ctx context.Context, resourceID string, options *SaaSGetResourceOptions) (SaaSGetResourceResponse, error) {
	req, err := client.getResourceCreateRequest(ctx, resourceID, options)
	if err != nil {
		return SaaSGetResourceResponse{}, err
	}
	resp, err := client.pl.Do(req)
	if err != nil {
		return SaaSGetResourceResponse{}, err
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {
		return SaaSGetResourceResponse{}, client.getResourceHandleError(resp)
	}
	return client.getResourceHandleResponse(resp)
}

// getResourceCreateRequest creates the GetResource request.
func (client *SaaSClient) getResourceCreateRequest(ctx context.Context, resourceID string, options *SaaSGetResourceOptions) (*policy.Request, error) {
	urlPath := "/providers/Microsoft.SaaS/saasresources/{resourceId}"
	if resourceID == "" {
		return nil, errors.New("parameter resourceID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{resourceId}", url.PathEscape(resourceID))
	req, err := runtime.NewRequest(ctx, http.MethodGet, runtime.JoinPaths(client.ep, urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("api-version", "2018-03-01-beta")
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header.Set("Accept", "application/json")
	return req, nil
}

// getResourceHandleResponse handles the GetResource response.
func (client *SaaSClient) getResourceHandleResponse(resp *http.Response) (SaaSGetResourceResponse, error) {
	result := SaaSGetResourceResponse{RawResponse: resp}
	if err := runtime.UnmarshalAsJSON(resp, &result.SaasResource); err != nil {
		return SaaSGetResourceResponse{}, runtime.NewResponseError(err, resp)
	}
	return result, nil
}

// getResourceHandleError handles the GetResource error response.
func (client *SaaSClient) getResourceHandleError(resp *http.Response) error {
	body, err := runtime.Payload(resp)
	if err != nil {
		return runtime.NewResponseError(err, resp)
	}
	errType := ErrorResponse{raw: string(body)}
	if err := runtime.UnmarshalAsJSON(resp, &errType); err != nil {
		return runtime.NewResponseError(fmt.Errorf("%s\n%s", string(body), err), resp)
	}
	return runtime.NewResponseError(&errType, resp)
}

// BeginUpdateResource - Updates a SaaS resource.
// If the operation fails it returns the *ErrorResponse error type.
func (client *SaaSClient) BeginUpdateResource(ctx context.Context, resourceID string, parameters SaasResourceCreation, options *SaaSBeginUpdateResourceOptions) (SaaSUpdateResourcePollerResponse, error) {
	resp, err := client.updateResource(ctx, resourceID, parameters, options)
	if err != nil {
		return SaaSUpdateResourcePollerResponse{}, err
	}
	result := SaaSUpdateResourcePollerResponse{
		RawResponse: resp,
	}
	pt, err := armruntime.NewPoller("SaaSClient.UpdateResource", "location", resp, client.pl, client.updateResourceHandleError)
	if err != nil {
		return SaaSUpdateResourcePollerResponse{}, err
	}
	result.Poller = &SaaSUpdateResourcePoller{
		pt: pt,
	}
	return result, nil
}

// UpdateResource - Updates a SaaS resource.
// If the operation fails it returns the *ErrorResponse error type.
func (client *SaaSClient) updateResource(ctx context.Context, resourceID string, parameters SaasResourceCreation, options *SaaSBeginUpdateResourceOptions) (*http.Response, error) {
	req, err := client.updateResourceCreateRequest(ctx, resourceID, parameters, options)
	if err != nil {
		return nil, err
	}
	resp, err := client.pl.Do(req)
	if err != nil {
		return nil, err
	}
	if !runtime.HasStatusCode(resp, http.StatusOK, http.StatusAccepted, http.StatusNoContent) {
		return nil, client.updateResourceHandleError(resp)
	}
	return resp, nil
}

// updateResourceCreateRequest creates the UpdateResource request.
func (client *SaaSClient) updateResourceCreateRequest(ctx context.Context, resourceID string, parameters SaasResourceCreation, options *SaaSBeginUpdateResourceOptions) (*policy.Request, error) {
	urlPath := "/providers/Microsoft.SaaS/saasresources/{resourceId}"
	if resourceID == "" {
		return nil, errors.New("parameter resourceID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{resourceId}", url.PathEscape(resourceID))
	req, err := runtime.NewRequest(ctx, http.MethodPatch, runtime.JoinPaths(client.ep, urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("api-version", "2018-03-01-beta")
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header.Set("Accept", "application/json")
	return req, runtime.MarshalAsJSON(req, parameters)
}

// updateResourceHandleError handles the UpdateResource error response.
func (client *SaaSClient) updateResourceHandleError(resp *http.Response) error {
	body, err := runtime.Payload(resp)
	if err != nil {
		return runtime.NewResponseError(err, resp)
	}
	errType := ErrorResponse{raw: string(body)}
	if err := runtime.UnmarshalAsJSON(resp, &errType); err != nil {
		return runtime.NewResponseError(fmt.Errorf("%s\n%s", string(body), err), resp)
	}
	return runtime.NewResponseError(&errType, resp)
}
