//go:build go1.16
// +build go1.16

// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

package armsaas

import (
	"context"
	"errors"
	"fmt"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/arm"
	armruntime "github.com/Azure/azure-sdk-for-go/sdk/azcore/arm/runtime"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/policy"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/runtime"
	"net/http"
	"net/url"
	"strings"
)

// SaasResourcesClient contains the methods for the SaasResources group.
// Don't use this type directly, use NewSaasResourcesClient() instead.
type SaasResourcesClient struct {
	ep string
	pl runtime.Pipeline
}

// NewSaasResourcesClient creates a new instance of SaasResourcesClient with the specified values.
func NewSaasResourcesClient(credential azcore.TokenCredential, options *arm.ClientOptions) *SaasResourcesClient {
	cp := arm.ClientOptions{}
	if options != nil {
		cp = *options
	}
	if len(cp.Host) == 0 {
		cp.Host = arm.AzurePublicCloud
	}
	return &SaasResourcesClient{ep: string(cp.Host), pl: armruntime.NewPipeline(module, version, credential, &cp)}
}

// List - Get All Resources
// If the operation fails it returns the *ErrorResponse error type.
func (client *SaasResourcesClient) List(options *SaasResourcesListOptions) *SaasResourcesListPager {
	return &SaasResourcesListPager{
		client: client,
		requester: func(ctx context.Context) (*policy.Request, error) {
			return client.listCreateRequest(ctx, options)
		},
		advancer: func(ctx context.Context, resp SaasResourcesListResponse) (*policy.Request, error) {
			return runtime.NewRequest(ctx, http.MethodGet, *resp.SaasResourceResponseWithContinuation.NextLink)
		},
	}
}

// listCreateRequest creates the List request.
func (client *SaasResourcesClient) listCreateRequest(ctx context.Context, options *SaasResourcesListOptions) (*policy.Request, error) {
	urlPath := "/providers/Microsoft.SaaS/saasresources"
	req, err := runtime.NewRequest(ctx, http.MethodGet, runtime.JoinPaths(client.ep, urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("api-version", "2018-03-01-beta")
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header.Set("Accept", "application/json")
	return req, nil
}

// listHandleResponse handles the List response.
func (client *SaasResourcesClient) listHandleResponse(resp *http.Response) (SaasResourcesListResponse, error) {
	result := SaasResourcesListResponse{RawResponse: resp}
	if err := runtime.UnmarshalAsJSON(resp, &result.SaasResourceResponseWithContinuation); err != nil {
		return SaasResourcesListResponse{}, runtime.NewResponseError(err, resp)
	}
	return result, nil
}

// listHandleError handles the List error response.
func (client *SaasResourcesClient) listHandleError(resp *http.Response) error {
	body, err := runtime.Payload(resp)
	if err != nil {
		return runtime.NewResponseError(err, resp)
	}
	errType := ErrorResponse{raw: string(body)}
	if err := runtime.UnmarshalAsJSON(resp, &errType); err != nil {
		return runtime.NewResponseError(fmt.Errorf("%s\n%s", string(body), err), resp)
	}
	return runtime.NewResponseError(&errType, resp)
}

// ListAccessToken - Gets the ISV access token for a SaaS resource.
// If the operation fails it returns the *ErrorResponse error type.
func (client *SaasResourcesClient) ListAccessToken(ctx context.Context, resourceID string, options *SaasResourcesListAccessTokenOptions) (SaasResourcesListAccessTokenResponse, error) {
	req, err := client.listAccessTokenCreateRequest(ctx, resourceID, options)
	if err != nil {
		return SaasResourcesListAccessTokenResponse{}, err
	}
	resp, err := client.pl.Do(req)
	if err != nil {
		return SaasResourcesListAccessTokenResponse{}, err
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {
		return SaasResourcesListAccessTokenResponse{}, client.listAccessTokenHandleError(resp)
	}
	return client.listAccessTokenHandleResponse(resp)
}

// listAccessTokenCreateRequest creates the ListAccessToken request.
func (client *SaasResourcesClient) listAccessTokenCreateRequest(ctx context.Context, resourceID string, options *SaasResourcesListAccessTokenOptions) (*policy.Request, error) {
	urlPath := "/providers/Microsoft.SaaS/saasresources/{resourceId}/listAccessToken"
	if resourceID == "" {
		return nil, errors.New("parameter resourceID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{resourceId}", url.PathEscape(resourceID))
	req, err := runtime.NewRequest(ctx, http.MethodPost, runtime.JoinPaths(client.ep, urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("api-version", "2018-03-01-beta")
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header.Set("Accept", "application/json")
	return req, nil
}

// listAccessTokenHandleResponse handles the ListAccessToken response.
func (client *SaasResourcesClient) listAccessTokenHandleResponse(resp *http.Response) (SaasResourcesListAccessTokenResponse, error) {
	result := SaasResourcesListAccessTokenResponse{RawResponse: resp}
	if err := runtime.UnmarshalAsJSON(resp, &result.AccessTokenResult); err != nil {
		return SaasResourcesListAccessTokenResponse{}, runtime.NewResponseError(err, resp)
	}
	return result, nil
}

// listAccessTokenHandleError handles the ListAccessToken error response.
func (client *SaasResourcesClient) listAccessTokenHandleError(resp *http.Response) error {
	body, err := runtime.Payload(resp)
	if err != nil {
		return runtime.NewResponseError(err, resp)
	}
	errType := ErrorResponse{raw: string(body)}
	if err := runtime.UnmarshalAsJSON(resp, &errType); err != nil {
		return runtime.NewResponseError(fmt.Errorf("%s\n%s", string(body), err), resp)
	}
	return runtime.NewResponseError(&errType, resp)
}
