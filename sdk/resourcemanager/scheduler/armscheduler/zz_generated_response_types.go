//go:build go1.16
// +build go1.16

// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

package armscheduler

import (
	"context"
	"net/http"
	"time"

	armruntime "github.com/Azure/azure-sdk-for-go/sdk/azcore/arm/runtime"
)

// JobCollectionsCreateOrUpdateResponse contains the response from method JobCollections.CreateOrUpdate.
type JobCollectionsCreateOrUpdateResponse struct {
	JobCollectionsCreateOrUpdateResult
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// JobCollectionsCreateOrUpdateResult contains the result from method JobCollections.CreateOrUpdate.
type JobCollectionsCreateOrUpdateResult struct {
	JobCollectionDefinition
}

// JobCollectionsDeletePollerResponse contains the response from method JobCollections.Delete.
type JobCollectionsDeletePollerResponse struct {
	// Poller contains an initialized poller.
	Poller *JobCollectionsDeletePoller

	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// PollUntilDone will poll the service endpoint until a terminal state is reached or an error is received.
func (l JobCollectionsDeletePollerResponse) PollUntilDone(ctx context.Context, freq time.Duration) (JobCollectionsDeleteResponse, error) {
	respType := JobCollectionsDeleteResponse{}
	resp, err := l.Poller.pt.PollUntilDone(ctx, freq, nil)
	if err != nil {
		return respType, err
	}
	respType.RawResponse = resp
	return respType, nil
}

// Resume rehydrates a JobCollectionsDeletePollerResponse from the provided client and resume token.
func (l *JobCollectionsDeletePollerResponse) Resume(ctx context.Context, client *JobCollectionsClient, token string) error {
	pt, err := armruntime.NewPollerFromResumeToken("JobCollectionsClient.Delete", token, client.pl, client.deleteHandleError)
	if err != nil {
		return err
	}
	poller := &JobCollectionsDeletePoller{
		pt: pt,
	}
	resp, err := poller.Poll(ctx)
	if err != nil {
		return err
	}
	l.Poller = poller
	l.RawResponse = resp
	return nil
}

// JobCollectionsDeleteResponse contains the response from method JobCollections.Delete.
type JobCollectionsDeleteResponse struct {
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// JobCollectionsDisablePollerResponse contains the response from method JobCollections.Disable.
type JobCollectionsDisablePollerResponse struct {
	// Poller contains an initialized poller.
	Poller *JobCollectionsDisablePoller

	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// PollUntilDone will poll the service endpoint until a terminal state is reached or an error is received.
func (l JobCollectionsDisablePollerResponse) PollUntilDone(ctx context.Context, freq time.Duration) (JobCollectionsDisableResponse, error) {
	respType := JobCollectionsDisableResponse{}
	resp, err := l.Poller.pt.PollUntilDone(ctx, freq, nil)
	if err != nil {
		return respType, err
	}
	respType.RawResponse = resp
	return respType, nil
}

// Resume rehydrates a JobCollectionsDisablePollerResponse from the provided client and resume token.
func (l *JobCollectionsDisablePollerResponse) Resume(ctx context.Context, client *JobCollectionsClient, token string) error {
	pt, err := armruntime.NewPollerFromResumeToken("JobCollectionsClient.Disable", token, client.pl, client.disableHandleError)
	if err != nil {
		return err
	}
	poller := &JobCollectionsDisablePoller{
		pt: pt,
	}
	resp, err := poller.Poll(ctx)
	if err != nil {
		return err
	}
	l.Poller = poller
	l.RawResponse = resp
	return nil
}

// JobCollectionsDisableResponse contains the response from method JobCollections.Disable.
type JobCollectionsDisableResponse struct {
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// JobCollectionsEnablePollerResponse contains the response from method JobCollections.Enable.
type JobCollectionsEnablePollerResponse struct {
	// Poller contains an initialized poller.
	Poller *JobCollectionsEnablePoller

	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// PollUntilDone will poll the service endpoint until a terminal state is reached or an error is received.
func (l JobCollectionsEnablePollerResponse) PollUntilDone(ctx context.Context, freq time.Duration) (JobCollectionsEnableResponse, error) {
	respType := JobCollectionsEnableResponse{}
	resp, err := l.Poller.pt.PollUntilDone(ctx, freq, nil)
	if err != nil {
		return respType, err
	}
	respType.RawResponse = resp
	return respType, nil
}

// Resume rehydrates a JobCollectionsEnablePollerResponse from the provided client and resume token.
func (l *JobCollectionsEnablePollerResponse) Resume(ctx context.Context, client *JobCollectionsClient, token string) error {
	pt, err := armruntime.NewPollerFromResumeToken("JobCollectionsClient.Enable", token, client.pl, client.enableHandleError)
	if err != nil {
		return err
	}
	poller := &JobCollectionsEnablePoller{
		pt: pt,
	}
	resp, err := poller.Poll(ctx)
	if err != nil {
		return err
	}
	l.Poller = poller
	l.RawResponse = resp
	return nil
}

// JobCollectionsEnableResponse contains the response from method JobCollections.Enable.
type JobCollectionsEnableResponse struct {
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// JobCollectionsGetResponse contains the response from method JobCollections.Get.
type JobCollectionsGetResponse struct {
	JobCollectionsGetResult
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// JobCollectionsGetResult contains the result from method JobCollections.Get.
type JobCollectionsGetResult struct {
	JobCollectionDefinition
}

// JobCollectionsListByResourceGroupResponse contains the response from method JobCollections.ListByResourceGroup.
type JobCollectionsListByResourceGroupResponse struct {
	JobCollectionsListByResourceGroupResult
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// JobCollectionsListByResourceGroupResult contains the result from method JobCollections.ListByResourceGroup.
type JobCollectionsListByResourceGroupResult struct {
	JobCollectionListResult
}

// JobCollectionsListBySubscriptionResponse contains the response from method JobCollections.ListBySubscription.
type JobCollectionsListBySubscriptionResponse struct {
	JobCollectionsListBySubscriptionResult
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// JobCollectionsListBySubscriptionResult contains the result from method JobCollections.ListBySubscription.
type JobCollectionsListBySubscriptionResult struct {
	JobCollectionListResult
}

// JobCollectionsPatchResponse contains the response from method JobCollections.Patch.
type JobCollectionsPatchResponse struct {
	JobCollectionsPatchResult
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// JobCollectionsPatchResult contains the result from method JobCollections.Patch.
type JobCollectionsPatchResult struct {
	JobCollectionDefinition
}

// JobsCreateOrUpdateResponse contains the response from method Jobs.CreateOrUpdate.
type JobsCreateOrUpdateResponse struct {
	JobsCreateOrUpdateResult
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// JobsCreateOrUpdateResult contains the result from method Jobs.CreateOrUpdate.
type JobsCreateOrUpdateResult struct {
	JobDefinition
}

// JobsDeleteResponse contains the response from method Jobs.Delete.
type JobsDeleteResponse struct {
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// JobsGetResponse contains the response from method Jobs.Get.
type JobsGetResponse struct {
	JobsGetResult
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// JobsGetResult contains the result from method Jobs.Get.
type JobsGetResult struct {
	JobDefinition
}

// JobsListJobHistoryResponse contains the response from method Jobs.ListJobHistory.
type JobsListJobHistoryResponse struct {
	JobsListJobHistoryResult
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// JobsListJobHistoryResult contains the result from method Jobs.ListJobHistory.
type JobsListJobHistoryResult struct {
	JobHistoryListResult
}

// JobsListResponse contains the response from method Jobs.List.
type JobsListResponse struct {
	JobsListResult
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// JobsListResult contains the result from method Jobs.List.
type JobsListResult struct {
	JobListResult
}

// JobsPatchResponse contains the response from method Jobs.Patch.
type JobsPatchResponse struct {
	JobsPatchResult
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// JobsPatchResult contains the result from method Jobs.Patch.
type JobsPatchResult struct {
	JobDefinition
}

// JobsRunResponse contains the response from method Jobs.Run.
type JobsRunResponse struct {
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}
