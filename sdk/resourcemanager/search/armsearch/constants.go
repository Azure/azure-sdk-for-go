//go:build go1.18
// +build go1.18

// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator. DO NOT EDIT.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

package armsearch

const (
	moduleName    = "github.com/Azure/azure-sdk-for-go/sdk/resourcemanager/search/armsearch"
	moduleVersion = "v1.3.0"
)

// AADAuthFailureMode - Describes what response the data plane API of a Search service would send for requests that failed
// authentication.
type AADAuthFailureMode string

const (
	// AADAuthFailureModeHttp401WithBearerChallenge - Indicates that requests that failed authentication should be presented with
	// an HTTP status code of 401 (Unauthorized) and present a Bearer Challenge.
	AADAuthFailureModeHttp401WithBearerChallenge AADAuthFailureMode = "http401WithBearerChallenge"
	// AADAuthFailureModeHttp403 - Indicates that requests that failed authentication should be presented with an HTTP status
	// code of 403 (Forbidden).
	AADAuthFailureModeHttp403 AADAuthFailureMode = "http403"
)

// PossibleAADAuthFailureModeValues returns the possible values for the AADAuthFailureMode const type.
func PossibleAADAuthFailureModeValues() []AADAuthFailureMode {
	return []AADAuthFailureMode{
		AADAuthFailureModeHttp401WithBearerChallenge,
		AADAuthFailureModeHttp403,
	}
}

type AdminKeyKind string

const (
	// AdminKeyKindPrimary - The primary API key for the search service.
	AdminKeyKindPrimary AdminKeyKind = "primary"
	// AdminKeyKindSecondary - The secondary API key for the search service.
	AdminKeyKindSecondary AdminKeyKind = "secondary"
)

// PossibleAdminKeyKindValues returns the possible values for the AdminKeyKind const type.
func PossibleAdminKeyKindValues() []AdminKeyKind {
	return []AdminKeyKind{
		AdminKeyKindPrimary,
		AdminKeyKindSecondary,
	}
}

// HostingMode - Applicable only for the standard3 SKU. You can set this property to enable up to 3 high density partitions
// that allow up to 1000 indexes, which is much higher than the maximum indexes allowed for any
// other SKU. For the standard3 SKU, the value is either 'default' or 'highDensity'. For all other SKUs, this value must be
// 'default'.
type HostingMode string

const (
	// HostingModeDefault - The limit on number of indexes is determined by the default limits for the SKU.
	HostingModeDefault HostingMode = "default"
	// HostingModeHighDensity - Only application for standard3 SKU, where the search service can have up to 1000 indexes.
	HostingModeHighDensity HostingMode = "highDensity"
)

// PossibleHostingModeValues returns the possible values for the HostingMode const type.
func PossibleHostingModeValues() []HostingMode {
	return []HostingMode{
		HostingModeDefault,
		HostingModeHighDensity,
	}
}

// IdentityType - The identity type.
type IdentityType string

const (
	IdentityTypeNone           IdentityType = "None"
	IdentityTypeSystemAssigned IdentityType = "SystemAssigned"
)

// PossibleIdentityTypeValues returns the possible values for the IdentityType const type.
func PossibleIdentityTypeValues() []IdentityType {
	return []IdentityType{
		IdentityTypeNone,
		IdentityTypeSystemAssigned,
	}
}

// PrivateLinkServiceConnectionProvisioningState - The provisioning state of the private link service connection. Can be Updating,
// Deleting, Failed, Succeeded, or Incomplete
type PrivateLinkServiceConnectionProvisioningState string

const (
	// PrivateLinkServiceConnectionProvisioningStateCanceled - Provisioning request for the private link service connection resource
	// has been canceled
	PrivateLinkServiceConnectionProvisioningStateCanceled PrivateLinkServiceConnectionProvisioningState = "Canceled"
	// PrivateLinkServiceConnectionProvisioningStateDeleting - The private link service connection is in the process of being
	// deleted.
	PrivateLinkServiceConnectionProvisioningStateDeleting PrivateLinkServiceConnectionProvisioningState = "Deleting"
	// PrivateLinkServiceConnectionProvisioningStateFailed - The private link service connection has failed to be provisioned
	// or deleted.
	PrivateLinkServiceConnectionProvisioningStateFailed PrivateLinkServiceConnectionProvisioningState = "Failed"
	// PrivateLinkServiceConnectionProvisioningStateIncomplete - Provisioning request for the private link service connection
	// resource has been accepted but the process of creation has not commenced yet.
	PrivateLinkServiceConnectionProvisioningStateIncomplete PrivateLinkServiceConnectionProvisioningState = "Incomplete"
	// PrivateLinkServiceConnectionProvisioningStateSucceeded - The private link service connection has finished provisioning
	// and is ready for approval.
	PrivateLinkServiceConnectionProvisioningStateSucceeded PrivateLinkServiceConnectionProvisioningState = "Succeeded"
	// PrivateLinkServiceConnectionProvisioningStateUpdating - The private link service connection is in the process of being
	// created along with other resources for it to be fully functional.
	PrivateLinkServiceConnectionProvisioningStateUpdating PrivateLinkServiceConnectionProvisioningState = "Updating"
)

// PossiblePrivateLinkServiceConnectionProvisioningStateValues returns the possible values for the PrivateLinkServiceConnectionProvisioningState const type.
func PossiblePrivateLinkServiceConnectionProvisioningStateValues() []PrivateLinkServiceConnectionProvisioningState {
	return []PrivateLinkServiceConnectionProvisioningState{
		PrivateLinkServiceConnectionProvisioningStateCanceled,
		PrivateLinkServiceConnectionProvisioningStateDeleting,
		PrivateLinkServiceConnectionProvisioningStateFailed,
		PrivateLinkServiceConnectionProvisioningStateIncomplete,
		PrivateLinkServiceConnectionProvisioningStateSucceeded,
		PrivateLinkServiceConnectionProvisioningStateUpdating,
	}
}

// PrivateLinkServiceConnectionStatus - Status of the the private link service connection. Can be Pending, Approved, Rejected,
// or Disconnected.
type PrivateLinkServiceConnectionStatus string

const (
	// PrivateLinkServiceConnectionStatusApproved - The private endpoint connection is approved and is ready for use.
	PrivateLinkServiceConnectionStatusApproved PrivateLinkServiceConnectionStatus = "Approved"
	// PrivateLinkServiceConnectionStatusDisconnected - The private endpoint connection has been removed from the service.
	PrivateLinkServiceConnectionStatusDisconnected PrivateLinkServiceConnectionStatus = "Disconnected"
	// PrivateLinkServiceConnectionStatusPending - The private endpoint connection has been created and is pending approval.
	PrivateLinkServiceConnectionStatusPending PrivateLinkServiceConnectionStatus = "Pending"
	// PrivateLinkServiceConnectionStatusRejected - The private endpoint connection has been rejected and cannot be used.
	PrivateLinkServiceConnectionStatusRejected PrivateLinkServiceConnectionStatus = "Rejected"
)

// PossiblePrivateLinkServiceConnectionStatusValues returns the possible values for the PrivateLinkServiceConnectionStatus const type.
func PossiblePrivateLinkServiceConnectionStatusValues() []PrivateLinkServiceConnectionStatus {
	return []PrivateLinkServiceConnectionStatus{
		PrivateLinkServiceConnectionStatusApproved,
		PrivateLinkServiceConnectionStatusDisconnected,
		PrivateLinkServiceConnectionStatusPending,
		PrivateLinkServiceConnectionStatusRejected,
	}
}

// ProvisioningState - The state of the last provisioning operation performed on the search service. Provisioning is an intermediate
// state that occurs while service capacity is being established. After capacity is set up,
// provisioningState changes to either 'succeeded' or 'failed'. Client applications can poll provisioning status (the recommended
// polling interval is from 30 seconds to one minute) by using the Get
// Search Service operation to see when an operation is completed. If you are using the free service, this value tends to
// come back as 'succeeded' directly in the call to Create search service. This is
// because the free service uses capacity that is already set up.
type ProvisioningState string

const (
	// ProvisioningStateFailed - The last provisioning operation has failed.
	ProvisioningStateFailed ProvisioningState = "failed"
	// ProvisioningStateProvisioning - The search service is being provisioned or scaled up or down.
	ProvisioningStateProvisioning ProvisioningState = "provisioning"
	// ProvisioningStateSucceeded - The last provisioning operation has completed successfully.
	ProvisioningStateSucceeded ProvisioningState = "succeeded"
)

// PossibleProvisioningStateValues returns the possible values for the ProvisioningState const type.
func PossibleProvisioningStateValues() []ProvisioningState {
	return []ProvisioningState{
		ProvisioningStateFailed,
		ProvisioningStateProvisioning,
		ProvisioningStateSucceeded,
	}
}

// PublicNetworkAccess - This value can be set to 'enabled' to avoid breaking changes on existing customer resources and templates.
// If set to 'disabled', traffic over public interface is not allowed, and private endpoint
// connections would be the exclusive access method.
type PublicNetworkAccess string

const (
	PublicNetworkAccessDisabled PublicNetworkAccess = "disabled"
	PublicNetworkAccessEnabled  PublicNetworkAccess = "enabled"
)

// PossiblePublicNetworkAccessValues returns the possible values for the PublicNetworkAccess const type.
func PossiblePublicNetworkAccessValues() []PublicNetworkAccess {
	return []PublicNetworkAccess{
		PublicNetworkAccessDisabled,
		PublicNetworkAccessEnabled,
	}
}

// SKUName - The SKU of the search service. Valid values include: 'free': Shared service. 'basic': Dedicated service with
// up to 3 replicas. 'standard': Dedicated service with up to 12 partitions and 12 replicas.
// 'standard2': Similar to standard, but with more capacity per search unit. 'standard3': The largest Standard offering with
// up to 12 partitions and 12 replicas (or up to 3 partitions with more indexes
// if you also set the hostingMode property to 'highDensity'). 'storageoptimizedl1': Supports 1TB per partition, up to 12
// partitions. 'storageoptimizedl2': Supports 2TB per partition, up to 12
// partitions.'
type SKUName string

const (
	// SKUNameBasic - Paid tier dedicated service with up to 3 replicas.
	SKUNameBasic SKUName = "basic"
	// SKUNameFree - Free tier, with no SLA guarantees and a subset of features offered to paid tiers.
	SKUNameFree SKUName = "free"
	// SKUNameStandard - Paid tier dedicated service with up to 12 partitions and 12 replicas.
	SKUNameStandard SKUName = "standard"
	// SKUNameStandard2 - Similar to 'standard', but with more capacity per search unit.
	SKUNameStandard2 SKUName = "standard2"
	// SKUNameStandard3 - The largest Standard offering with up to 12 partitions and 12 replicas (or up to 3 partitions with more
	// indexes if you also set the hostingMode property to 'highDensity').
	SKUNameStandard3 SKUName = "standard3"
	// SKUNameStorageOptimizedL1 - Paid tier dedicated service that supports 1TB per partition, up to 12 partitions.
	SKUNameStorageOptimizedL1 SKUName = "storage_optimized_l1"
	// SKUNameStorageOptimizedL2 - Paid tier dedicated service that supports 2TB per partition, up to 12 partitions.
	SKUNameStorageOptimizedL2 SKUName = "storage_optimized_l2"
)

// PossibleSKUNameValues returns the possible values for the SKUName const type.
func PossibleSKUNameValues() []SKUName {
	return []SKUName{
		SKUNameBasic,
		SKUNameFree,
		SKUNameStandard,
		SKUNameStandard2,
		SKUNameStandard3,
		SKUNameStorageOptimizedL1,
		SKUNameStorageOptimizedL2,
	}
}

// SearchEncryptionComplianceStatus - Describes whether the search service is compliant or not with respect to having non
// customer encrypted resources. If a service has more than one non customer encrypted resource and 'Enforcement' is
// 'enabled' then the service will be marked as 'nonCompliant'.
type SearchEncryptionComplianceStatus string

const (
	// SearchEncryptionComplianceStatusCompliant - Indicates that the search service is compliant, either because number of non
	// customer encrypted resources is zero or enforcement is disabled.
	SearchEncryptionComplianceStatusCompliant SearchEncryptionComplianceStatus = "Compliant"
	// SearchEncryptionComplianceStatusNonCompliant - Indicates that the search service has more than 1 non customer encrypted
	// resources.
	SearchEncryptionComplianceStatusNonCompliant SearchEncryptionComplianceStatus = "NonCompliant"
)

// PossibleSearchEncryptionComplianceStatusValues returns the possible values for the SearchEncryptionComplianceStatus const type.
func PossibleSearchEncryptionComplianceStatusValues() []SearchEncryptionComplianceStatus {
	return []SearchEncryptionComplianceStatus{
		SearchEncryptionComplianceStatusCompliant,
		SearchEncryptionComplianceStatusNonCompliant,
	}
}

// SearchEncryptionWithCmk - Describes how a search service should enforce having one or more non customer encrypted resources.
type SearchEncryptionWithCmk string

const (
	// SearchEncryptionWithCmkDisabled - No enforcement will be made and the search service can have non customer encrypted resources.
	SearchEncryptionWithCmkDisabled SearchEncryptionWithCmk = "Disabled"
	// SearchEncryptionWithCmkEnabled - Search service will be marked as non-compliant if there are one or more non customer encrypted
	// resources.
	SearchEncryptionWithCmkEnabled SearchEncryptionWithCmk = "Enabled"
	// SearchEncryptionWithCmkUnspecified - Enforcement policy is not explicitly specified, with the behavior being the same as
	// if it were set to 'Disabled'.
	SearchEncryptionWithCmkUnspecified SearchEncryptionWithCmk = "Unspecified"
)

// PossibleSearchEncryptionWithCmkValues returns the possible values for the SearchEncryptionWithCmk const type.
func PossibleSearchEncryptionWithCmkValues() []SearchEncryptionWithCmk {
	return []SearchEncryptionWithCmk{
		SearchEncryptionWithCmkDisabled,
		SearchEncryptionWithCmkEnabled,
		SearchEncryptionWithCmkUnspecified,
	}
}

// SearchSemanticSearch - Sets options that control the availability of semantic search. This configuration is only possible
// for certain Azure Cognitive Search SKUs in certain locations.
type SearchSemanticSearch string

const (
	// SearchSemanticSearchDisabled - Indicates that semantic search is disabled for the search service.
	SearchSemanticSearchDisabled SearchSemanticSearch = "disabled"
	// SearchSemanticSearchFree - Enables semantic search on a search service and indicates that it is to be used within the limits
	// of the free tier. This would cap the volume of semantic search requests and is offered at no extra charge. This is the
	// default for newly provisioned search services.
	SearchSemanticSearchFree SearchSemanticSearch = "free"
	// SearchSemanticSearchStandard - Enables semantic search on a search service as a billable feature, with higher throughput
	// and volume of semantic search queries.
	SearchSemanticSearchStandard SearchSemanticSearch = "standard"
)

// PossibleSearchSemanticSearchValues returns the possible values for the SearchSemanticSearch const type.
func PossibleSearchSemanticSearchValues() []SearchSemanticSearch {
	return []SearchSemanticSearch{
		SearchSemanticSearchDisabled,
		SearchSemanticSearchFree,
		SearchSemanticSearchStandard,
	}
}

// SearchServiceStatus - The status of the search service. Possible values include: 'running': The search service is running
// and no provisioning operations are underway. 'provisioning': The search service is being provisioned
// or scaled up or down. 'deleting': The search service is being deleted. 'degraded': The search service is degraded. This
// can occur when the underlying search units are not healthy. The search service
// is most likely operational, but performance might be slow and some requests might be dropped. 'disabled': The search service
// is disabled. In this state, the service will reject all API requests.
// 'error': The search service is in an error state. If your service is in the degraded, disabled, or error states, it means
// the Azure Cognitive Search team is actively investigating the underlying
// issue. Dedicated services in these states are still chargeable based on the number of search units provisioned.
type SearchServiceStatus string

const (
	// SearchServiceStatusDegraded - The search service is degraded because underlying search units are not healthy.
	SearchServiceStatusDegraded SearchServiceStatus = "degraded"
	// SearchServiceStatusDeleting - The search service is being deleted.
	SearchServiceStatusDeleting SearchServiceStatus = "deleting"
	// SearchServiceStatusDisabled - The search service is disabled and all API requests will be rejected.
	SearchServiceStatusDisabled SearchServiceStatus = "disabled"
	// SearchServiceStatusError - The search service is in error state, indicating either a failure to provision or to be deleted.
	SearchServiceStatusError SearchServiceStatus = "error"
	// SearchServiceStatusProvisioning - The search service is being provisioned or scaled up or down.
	SearchServiceStatusProvisioning SearchServiceStatus = "provisioning"
	// SearchServiceStatusRunning - The search service is running and no provisioning operations are underway.
	SearchServiceStatusRunning SearchServiceStatus = "running"
)

// PossibleSearchServiceStatusValues returns the possible values for the SearchServiceStatus const type.
func PossibleSearchServiceStatusValues() []SearchServiceStatus {
	return []SearchServiceStatus{
		SearchServiceStatusDegraded,
		SearchServiceStatusDeleting,
		SearchServiceStatusDisabled,
		SearchServiceStatusError,
		SearchServiceStatusProvisioning,
		SearchServiceStatusRunning,
	}
}

// SharedPrivateLinkResourceProvisioningState - The provisioning state of the shared private link resource. Can be Updating,
// Deleting, Failed, Succeeded or Incomplete.
type SharedPrivateLinkResourceProvisioningState string

const (
	SharedPrivateLinkResourceProvisioningStateDeleting   SharedPrivateLinkResourceProvisioningState = "Deleting"
	SharedPrivateLinkResourceProvisioningStateFailed     SharedPrivateLinkResourceProvisioningState = "Failed"
	SharedPrivateLinkResourceProvisioningStateIncomplete SharedPrivateLinkResourceProvisioningState = "Incomplete"
	SharedPrivateLinkResourceProvisioningStateSucceeded  SharedPrivateLinkResourceProvisioningState = "Succeeded"
	SharedPrivateLinkResourceProvisioningStateUpdating   SharedPrivateLinkResourceProvisioningState = "Updating"
)

// PossibleSharedPrivateLinkResourceProvisioningStateValues returns the possible values for the SharedPrivateLinkResourceProvisioningState const type.
func PossibleSharedPrivateLinkResourceProvisioningStateValues() []SharedPrivateLinkResourceProvisioningState {
	return []SharedPrivateLinkResourceProvisioningState{
		SharedPrivateLinkResourceProvisioningStateDeleting,
		SharedPrivateLinkResourceProvisioningStateFailed,
		SharedPrivateLinkResourceProvisioningStateIncomplete,
		SharedPrivateLinkResourceProvisioningStateSucceeded,
		SharedPrivateLinkResourceProvisioningStateUpdating,
	}
}

// SharedPrivateLinkResourceStatus - Status of the shared private link resource. Can be Pending, Approved, Rejected or Disconnected.
type SharedPrivateLinkResourceStatus string

const (
	SharedPrivateLinkResourceStatusApproved     SharedPrivateLinkResourceStatus = "Approved"
	SharedPrivateLinkResourceStatusDisconnected SharedPrivateLinkResourceStatus = "Disconnected"
	SharedPrivateLinkResourceStatusPending      SharedPrivateLinkResourceStatus = "Pending"
	SharedPrivateLinkResourceStatusRejected     SharedPrivateLinkResourceStatus = "Rejected"
)

// PossibleSharedPrivateLinkResourceStatusValues returns the possible values for the SharedPrivateLinkResourceStatus const type.
func PossibleSharedPrivateLinkResourceStatusValues() []SharedPrivateLinkResourceStatus {
	return []SharedPrivateLinkResourceStatus{
		SharedPrivateLinkResourceStatusApproved,
		SharedPrivateLinkResourceStatusDisconnected,
		SharedPrivateLinkResourceStatusPending,
		SharedPrivateLinkResourceStatusRejected,
	}
}

// UnavailableNameReason - The reason why the name is not available. 'Invalid' indicates the name provided does not match
// the naming requirements (incorrect length, unsupported characters, etc.). 'AlreadyExists' indicates that
// the name is already in use and is therefore unavailable.
type UnavailableNameReason string

const (
	// UnavailableNameReasonAlreadyExists - The search service name is already assigned to a different search service.
	UnavailableNameReasonAlreadyExists UnavailableNameReason = "AlreadyExists"
	// UnavailableNameReasonInvalid - The search service name does not match naming requirements.
	UnavailableNameReasonInvalid UnavailableNameReason = "Invalid"
)

// PossibleUnavailableNameReasonValues returns the possible values for the UnavailableNameReason const type.
func PossibleUnavailableNameReasonValues() []UnavailableNameReason {
	return []UnavailableNameReason{
		UnavailableNameReasonAlreadyExists,
		UnavailableNameReasonInvalid,
	}
}
