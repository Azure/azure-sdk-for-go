//go:build go1.16
// +build go1.16

// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

package armsearch

import (
	"context"
	"net/http"
	"time"

	armruntime "github.com/Azure/azure-sdk-for-go/sdk/azcore/arm/runtime"
)

// AdminKeysGetResponse contains the response from method AdminKeys.Get.
type AdminKeysGetResponse struct {
	AdminKeysGetResult
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// AdminKeysGetResult contains the result from method AdminKeys.Get.
type AdminKeysGetResult struct {
	AdminKeyResult
}

// AdminKeysRegenerateResponse contains the response from method AdminKeys.Regenerate.
type AdminKeysRegenerateResponse struct {
	AdminKeysRegenerateResult
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// AdminKeysRegenerateResult contains the result from method AdminKeys.Regenerate.
type AdminKeysRegenerateResult struct {
	AdminKeyResult
}

// OperationsListResponse contains the response from method Operations.List.
type OperationsListResponse struct {
	OperationsListResult
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// OperationsListResult contains the result from method Operations.List.
type OperationsListResult struct {
	OperationListResult
}

// PrivateEndpointConnectionsDeleteResponse contains the response from method PrivateEndpointConnections.Delete.
type PrivateEndpointConnectionsDeleteResponse struct {
	PrivateEndpointConnectionsDeleteResult
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// PrivateEndpointConnectionsDeleteResult contains the result from method PrivateEndpointConnections.Delete.
type PrivateEndpointConnectionsDeleteResult struct {
	PrivateEndpointConnection
}

// PrivateEndpointConnectionsGetResponse contains the response from method PrivateEndpointConnections.Get.
type PrivateEndpointConnectionsGetResponse struct {
	PrivateEndpointConnectionsGetResult
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// PrivateEndpointConnectionsGetResult contains the result from method PrivateEndpointConnections.Get.
type PrivateEndpointConnectionsGetResult struct {
	PrivateEndpointConnection
}

// PrivateEndpointConnectionsListByServiceResponse contains the response from method PrivateEndpointConnections.ListByService.
type PrivateEndpointConnectionsListByServiceResponse struct {
	PrivateEndpointConnectionsListByServiceResult
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// PrivateEndpointConnectionsListByServiceResult contains the result from method PrivateEndpointConnections.ListByService.
type PrivateEndpointConnectionsListByServiceResult struct {
	PrivateEndpointConnectionListResult
}

// PrivateEndpointConnectionsUpdateResponse contains the response from method PrivateEndpointConnections.Update.
type PrivateEndpointConnectionsUpdateResponse struct {
	PrivateEndpointConnectionsUpdateResult
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// PrivateEndpointConnectionsUpdateResult contains the result from method PrivateEndpointConnections.Update.
type PrivateEndpointConnectionsUpdateResult struct {
	PrivateEndpointConnection
}

// PrivateLinkResourcesListSupportedResponse contains the response from method PrivateLinkResources.ListSupported.
type PrivateLinkResourcesListSupportedResponse struct {
	PrivateLinkResourcesListSupportedResult
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// PrivateLinkResourcesListSupportedResult contains the result from method PrivateLinkResources.ListSupported.
type PrivateLinkResourcesListSupportedResult struct {
	PrivateLinkResourcesResult
}

// QueryKeysCreateResponse contains the response from method QueryKeys.Create.
type QueryKeysCreateResponse struct {
	QueryKeysCreateResult
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// QueryKeysCreateResult contains the result from method QueryKeys.Create.
type QueryKeysCreateResult struct {
	QueryKey
}

// QueryKeysDeleteResponse contains the response from method QueryKeys.Delete.
type QueryKeysDeleteResponse struct {
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// QueryKeysListBySearchServiceResponse contains the response from method QueryKeys.ListBySearchService.
type QueryKeysListBySearchServiceResponse struct {
	QueryKeysListBySearchServiceResult
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// QueryKeysListBySearchServiceResult contains the result from method QueryKeys.ListBySearchService.
type QueryKeysListBySearchServiceResult struct {
	ListQueryKeysResult
}

// ServicesCheckNameAvailabilityResponse contains the response from method Services.CheckNameAvailability.
type ServicesCheckNameAvailabilityResponse struct {
	ServicesCheckNameAvailabilityResult
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// ServicesCheckNameAvailabilityResult contains the result from method Services.CheckNameAvailability.
type ServicesCheckNameAvailabilityResult struct {
	CheckNameAvailabilityOutput
}

// ServicesCreateOrUpdatePollerResponse contains the response from method Services.CreateOrUpdate.
type ServicesCreateOrUpdatePollerResponse struct {
	// Poller contains an initialized poller.
	Poller *ServicesCreateOrUpdatePoller

	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// PollUntilDone will poll the service endpoint until a terminal state is reached or an error is received.
func (l ServicesCreateOrUpdatePollerResponse) PollUntilDone(ctx context.Context, freq time.Duration) (ServicesCreateOrUpdateResponse, error) {
	respType := ServicesCreateOrUpdateResponse{}
	resp, err := l.Poller.pt.PollUntilDone(ctx, freq, &respType.SearchService)
	if err != nil {
		return respType, err
	}
	respType.RawResponse = resp
	return respType, nil
}

// Resume rehydrates a ServicesCreateOrUpdatePollerResponse from the provided client and resume token.
func (l *ServicesCreateOrUpdatePollerResponse) Resume(ctx context.Context, client *ServicesClient, token string) error {
	pt, err := armruntime.NewPollerFromResumeToken("ServicesClient.CreateOrUpdate", token, client.pl, client.createOrUpdateHandleError)
	if err != nil {
		return err
	}
	poller := &ServicesCreateOrUpdatePoller{
		pt: pt,
	}
	resp, err := poller.Poll(ctx)
	if err != nil {
		return err
	}
	l.Poller = poller
	l.RawResponse = resp
	return nil
}

// ServicesCreateOrUpdateResponse contains the response from method Services.CreateOrUpdate.
type ServicesCreateOrUpdateResponse struct {
	ServicesCreateOrUpdateResult
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// ServicesCreateOrUpdateResult contains the result from method Services.CreateOrUpdate.
type ServicesCreateOrUpdateResult struct {
	SearchService
}

// ServicesDeleteResponse contains the response from method Services.Delete.
type ServicesDeleteResponse struct {
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// ServicesGetResponse contains the response from method Services.Get.
type ServicesGetResponse struct {
	ServicesGetResult
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// ServicesGetResult contains the result from method Services.Get.
type ServicesGetResult struct {
	SearchService
}

// ServicesListByResourceGroupResponse contains the response from method Services.ListByResourceGroup.
type ServicesListByResourceGroupResponse struct {
	ServicesListByResourceGroupResult
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// ServicesListByResourceGroupResult contains the result from method Services.ListByResourceGroup.
type ServicesListByResourceGroupResult struct {
	SearchServiceListResult
}

// ServicesListBySubscriptionResponse contains the response from method Services.ListBySubscription.
type ServicesListBySubscriptionResponse struct {
	ServicesListBySubscriptionResult
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// ServicesListBySubscriptionResult contains the result from method Services.ListBySubscription.
type ServicesListBySubscriptionResult struct {
	SearchServiceListResult
}

// ServicesUpdateResponse contains the response from method Services.Update.
type ServicesUpdateResponse struct {
	ServicesUpdateResult
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// ServicesUpdateResult contains the result from method Services.Update.
type ServicesUpdateResult struct {
	SearchService
}

// SharedPrivateLinkResourcesCreateOrUpdatePollerResponse contains the response from method SharedPrivateLinkResources.CreateOrUpdate.
type SharedPrivateLinkResourcesCreateOrUpdatePollerResponse struct {
	// Poller contains an initialized poller.
	Poller *SharedPrivateLinkResourcesCreateOrUpdatePoller

	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// PollUntilDone will poll the service endpoint until a terminal state is reached or an error is received.
func (l SharedPrivateLinkResourcesCreateOrUpdatePollerResponse) PollUntilDone(ctx context.Context, freq time.Duration) (SharedPrivateLinkResourcesCreateOrUpdateResponse, error) {
	respType := SharedPrivateLinkResourcesCreateOrUpdateResponse{}
	resp, err := l.Poller.pt.PollUntilDone(ctx, freq, &respType.SharedPrivateLinkResource)
	if err != nil {
		return respType, err
	}
	respType.RawResponse = resp
	return respType, nil
}

// Resume rehydrates a SharedPrivateLinkResourcesCreateOrUpdatePollerResponse from the provided client and resume token.
func (l *SharedPrivateLinkResourcesCreateOrUpdatePollerResponse) Resume(ctx context.Context, client *SharedPrivateLinkResourcesClient, token string) error {
	pt, err := armruntime.NewPollerFromResumeToken("SharedPrivateLinkResourcesClient.CreateOrUpdate", token, client.pl, client.createOrUpdateHandleError)
	if err != nil {
		return err
	}
	poller := &SharedPrivateLinkResourcesCreateOrUpdatePoller{
		pt: pt,
	}
	resp, err := poller.Poll(ctx)
	if err != nil {
		return err
	}
	l.Poller = poller
	l.RawResponse = resp
	return nil
}

// SharedPrivateLinkResourcesCreateOrUpdateResponse contains the response from method SharedPrivateLinkResources.CreateOrUpdate.
type SharedPrivateLinkResourcesCreateOrUpdateResponse struct {
	SharedPrivateLinkResourcesCreateOrUpdateResult
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// SharedPrivateLinkResourcesCreateOrUpdateResult contains the result from method SharedPrivateLinkResources.CreateOrUpdate.
type SharedPrivateLinkResourcesCreateOrUpdateResult struct {
	SharedPrivateLinkResource
}

// SharedPrivateLinkResourcesDeletePollerResponse contains the response from method SharedPrivateLinkResources.Delete.
type SharedPrivateLinkResourcesDeletePollerResponse struct {
	// Poller contains an initialized poller.
	Poller *SharedPrivateLinkResourcesDeletePoller

	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// PollUntilDone will poll the service endpoint until a terminal state is reached or an error is received.
func (l SharedPrivateLinkResourcesDeletePollerResponse) PollUntilDone(ctx context.Context, freq time.Duration) (SharedPrivateLinkResourcesDeleteResponse, error) {
	respType := SharedPrivateLinkResourcesDeleteResponse{}
	resp, err := l.Poller.pt.PollUntilDone(ctx, freq, nil)
	if err != nil {
		return respType, err
	}
	respType.RawResponse = resp
	return respType, nil
}

// Resume rehydrates a SharedPrivateLinkResourcesDeletePollerResponse from the provided client and resume token.
func (l *SharedPrivateLinkResourcesDeletePollerResponse) Resume(ctx context.Context, client *SharedPrivateLinkResourcesClient, token string) error {
	pt, err := armruntime.NewPollerFromResumeToken("SharedPrivateLinkResourcesClient.Delete", token, client.pl, client.deleteHandleError)
	if err != nil {
		return err
	}
	poller := &SharedPrivateLinkResourcesDeletePoller{
		pt: pt,
	}
	resp, err := poller.Poll(ctx)
	if err != nil {
		return err
	}
	l.Poller = poller
	l.RawResponse = resp
	return nil
}

// SharedPrivateLinkResourcesDeleteResponse contains the response from method SharedPrivateLinkResources.Delete.
type SharedPrivateLinkResourcesDeleteResponse struct {
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// SharedPrivateLinkResourcesGetResponse contains the response from method SharedPrivateLinkResources.Get.
type SharedPrivateLinkResourcesGetResponse struct {
	SharedPrivateLinkResourcesGetResult
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// SharedPrivateLinkResourcesGetResult contains the result from method SharedPrivateLinkResources.Get.
type SharedPrivateLinkResourcesGetResult struct {
	SharedPrivateLinkResource
}

// SharedPrivateLinkResourcesListByServiceResponse contains the response from method SharedPrivateLinkResources.ListByService.
type SharedPrivateLinkResourcesListByServiceResponse struct {
	SharedPrivateLinkResourcesListByServiceResult
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// SharedPrivateLinkResourcesListByServiceResult contains the result from method SharedPrivateLinkResources.ListByService.
type SharedPrivateLinkResourcesListByServiceResult struct {
	SharedPrivateLinkResourceListResult
}
