//go:build go1.16
// +build go1.16

// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

package armsecurity_test

import (
	"context"
	"log"

	"time"

	"github.com/Azure/azure-sdk-for-go/sdk/azcore/to"
	"github.com/Azure/azure-sdk-for-go/sdk/azidentity"
	"github.com/Azure/azure-sdk-for-go/sdk/resourcemanager/security/armsecurity"
)

// x-ms-original-file: specification/security/resource-manager/Microsoft.Security/preview/2019-01-01-preview/examples/AlertsSuppressionRules/GetAlertsSuppressionRulesWithAlertType_example.json
func ExampleAlertsSuppressionRulesClient_List() {
	cred, err := azidentity.NewDefaultAzureCredential(nil)
	if err != nil {
		log.Fatalf("failed to obtain a credential: %v", err)
	}
	ctx := context.Background()
	client := armsecurity.NewAlertsSuppressionRulesClient("<subscription-id>", cred, nil)
	pager := client.List(&armsecurity.AlertsSuppressionRulesClientListOptions{AlertType: nil})
	for {
		nextResult := pager.NextPage(ctx)
		if err := pager.Err(); err != nil {
			log.Fatalf("failed to advance page: %v", err)
		}
		if !nextResult {
			break
		}
		for _, v := range pager.PageResponse().Value {
			log.Printf("Pager result: %#v\n", v)
		}
	}
}

// x-ms-original-file: specification/security/resource-manager/Microsoft.Security/preview/2019-01-01-preview/examples/AlertsSuppressionRules/GetAlertsSuppressionRule_example.json
func ExampleAlertsSuppressionRulesClient_Get() {
	cred, err := azidentity.NewDefaultAzureCredential(nil)
	if err != nil {
		log.Fatalf("failed to obtain a credential: %v", err)
	}
	ctx := context.Background()
	client := armsecurity.NewAlertsSuppressionRulesClient("<subscription-id>", cred, nil)
	res, err := client.Get(ctx,
		"<alerts-suppression-rule-name>",
		nil)
	if err != nil {
		log.Fatal(err)
	}
	log.Printf("Response result: %#v\n", res.AlertsSuppressionRulesClientGetResult)
}

// x-ms-original-file: specification/security/resource-manager/Microsoft.Security/preview/2019-01-01-preview/examples/AlertsSuppressionRules/PutAlertsSuppressionRule_example.json
func ExampleAlertsSuppressionRulesClient_Update() {
	cred, err := azidentity.NewDefaultAzureCredential(nil)
	if err != nil {
		log.Fatalf("failed to obtain a credential: %v", err)
	}
	ctx := context.Background()
	client := armsecurity.NewAlertsSuppressionRulesClient("<subscription-id>", cred, nil)
	res, err := client.Update(ctx,
		"<alerts-suppression-rule-name>",
		armsecurity.AlertsSuppressionRule{
			Properties: &armsecurity.AlertsSuppressionRuleProperties{
				AlertType:         to.StringPtr("<alert-type>"),
				Comment:           to.StringPtr("<comment>"),
				ExpirationDateUTC: to.TimePtr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2019-12-01T19:50:47.083633Z"); return t }()),
				Reason:            to.StringPtr("<reason>"),
				State:             armsecurity.RuleStateEnabled.ToPtr(),
				SuppressionAlertsScope: &armsecurity.SuppressionAlertsScope{
					AllOf: []*armsecurity.ScopeElement{
						{
							AdditionalProperties: map[string]interface{}{
								"in": []interface{}{
									"104.215.95.187",
									"52.164.206.56",
								},
							},
							Field: to.StringPtr("<field>"),
						},
						{
							AdditionalProperties: map[string]interface{}{
								"contains": "POWERSHELL.EXE",
							},
							Field: to.StringPtr("<field>"),
						}},
				},
			},
		},
		nil)
	if err != nil {
		log.Fatal(err)
	}
	log.Printf("Response result: %#v\n", res.AlertsSuppressionRulesClientUpdateResult)
}

// x-ms-original-file: specification/security/resource-manager/Microsoft.Security/preview/2019-01-01-preview/examples/AlertsSuppressionRules/DeleteAlertsSuppressionRule_example.json
func ExampleAlertsSuppressionRulesClient_Delete() {
	cred, err := azidentity.NewDefaultAzureCredential(nil)
	if err != nil {
		log.Fatalf("failed to obtain a credential: %v", err)
	}
	ctx := context.Background()
	client := armsecurity.NewAlertsSuppressionRulesClient("<subscription-id>", cred, nil)
	_, err = client.Delete(ctx,
		"<alerts-suppression-rule-name>",
		nil)
	if err != nil {
		log.Fatal(err)
	}
}
