//go:build go1.16
// +build go1.16

// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

package armsecurity

import (
	"context"
	"errors"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/arm"
	armruntime "github.com/Azure/azure-sdk-for-go/sdk/azcore/arm/runtime"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/policy"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/runtime"
	"net/http"
	"net/url"
	"strings"
)

// AlertsClient contains the methods for the Alerts group.
// Don't use this type directly, use NewAlertsClient() instead.
type AlertsClient struct {
	host           string
	subscriptionID string
	ascLocation    string
	pl             runtime.Pipeline
}

// NewAlertsClient creates a new instance of AlertsClient with the specified values.
// subscriptionID - Azure subscription ID
// ascLocation - The location where ASC stores the data of the subscription. can be retrieved from Get locations
// credential - used to authorize requests. Usually a credential from azidentity.
// options - pass nil to accept the default values.
func NewAlertsClient(subscriptionID string, ascLocation string, credential azcore.TokenCredential, options *arm.ClientOptions) *AlertsClient {
	if options == nil {
		options = &arm.ClientOptions{}
	}
	ep := options.Endpoint
	if len(ep) == 0 {
		ep = arm.AzurePublicCloud
	}
	client := &AlertsClient{
		subscriptionID: subscriptionID,
		ascLocation:    ascLocation,
		host:           string(ep),
		pl:             armruntime.NewPipeline(moduleName, moduleVersion, credential, runtime.PipelineOptions{}, options),
	}
	return client
}

// GetResourceGroupLevel - Get an alert that is associated a resource group or a resource in a resource group
// If the operation fails it returns an *azcore.ResponseError type.
// alertName - Name of the alert object
// resourceGroupName - The name of the resource group within the user's subscription. The name is case insensitive.
// options - AlertsClientGetResourceGroupLevelOptions contains the optional parameters for the AlertsClient.GetResourceGroupLevel
// method.
func (client *AlertsClient) GetResourceGroupLevel(ctx context.Context, alertName string, resourceGroupName string, options *AlertsClientGetResourceGroupLevelOptions) (AlertsClientGetResourceGroupLevelResponse, error) {
	req, err := client.getResourceGroupLevelCreateRequest(ctx, alertName, resourceGroupName, options)
	if err != nil {
		return AlertsClientGetResourceGroupLevelResponse{}, err
	}
	resp, err := client.pl.Do(req)
	if err != nil {
		return AlertsClientGetResourceGroupLevelResponse{}, err
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {
		return AlertsClientGetResourceGroupLevelResponse{}, runtime.NewResponseError(resp)
	}
	return client.getResourceGroupLevelHandleResponse(resp)
}

// getResourceGroupLevelCreateRequest creates the GetResourceGroupLevel request.
func (client *AlertsClient) getResourceGroupLevelCreateRequest(ctx context.Context, alertName string, resourceGroupName string, options *AlertsClientGetResourceGroupLevelOptions) (*policy.Request, error) {
	urlPath := "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Security/locations/{ascLocation}/alerts/{alertName}"
	if client.subscriptionID == "" {
		return nil, errors.New("parameter client.subscriptionID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{subscriptionId}", url.PathEscape(client.subscriptionID))
	if client.ascLocation == "" {
		return nil, errors.New("parameter client.ascLocation cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{ascLocation}", url.PathEscape(client.ascLocation))
	if alertName == "" {
		return nil, errors.New("parameter alertName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{alertName}", url.PathEscape(alertName))
	if resourceGroupName == "" {
		return nil, errors.New("parameter resourceGroupName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{resourceGroupName}", url.PathEscape(resourceGroupName))
	req, err := runtime.NewRequest(ctx, http.MethodGet, runtime.JoinPaths(client.host, urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("api-version", "2021-01-01")
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header.Set("Accept", "application/json")
	return req, nil
}

// getResourceGroupLevelHandleResponse handles the GetResourceGroupLevel response.
func (client *AlertsClient) getResourceGroupLevelHandleResponse(resp *http.Response) (AlertsClientGetResourceGroupLevelResponse, error) {
	result := AlertsClientGetResourceGroupLevelResponse{RawResponse: resp}
	if err := runtime.UnmarshalAsJSON(resp, &result.Alert); err != nil {
		return AlertsClientGetResourceGroupLevelResponse{}, err
	}
	return result, nil
}

// GetSubscriptionLevel - Get an alert that is associated with a subscription
// If the operation fails it returns an *azcore.ResponseError type.
// alertName - Name of the alert object
// options - AlertsClientGetSubscriptionLevelOptions contains the optional parameters for the AlertsClient.GetSubscriptionLevel
// method.
func (client *AlertsClient) GetSubscriptionLevel(ctx context.Context, alertName string, options *AlertsClientGetSubscriptionLevelOptions) (AlertsClientGetSubscriptionLevelResponse, error) {
	req, err := client.getSubscriptionLevelCreateRequest(ctx, alertName, options)
	if err != nil {
		return AlertsClientGetSubscriptionLevelResponse{}, err
	}
	resp, err := client.pl.Do(req)
	if err != nil {
		return AlertsClientGetSubscriptionLevelResponse{}, err
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {
		return AlertsClientGetSubscriptionLevelResponse{}, runtime.NewResponseError(resp)
	}
	return client.getSubscriptionLevelHandleResponse(resp)
}

// getSubscriptionLevelCreateRequest creates the GetSubscriptionLevel request.
func (client *AlertsClient) getSubscriptionLevelCreateRequest(ctx context.Context, alertName string, options *AlertsClientGetSubscriptionLevelOptions) (*policy.Request, error) {
	urlPath := "/subscriptions/{subscriptionId}/providers/Microsoft.Security/locations/{ascLocation}/alerts/{alertName}"
	if client.subscriptionID == "" {
		return nil, errors.New("parameter client.subscriptionID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{subscriptionId}", url.PathEscape(client.subscriptionID))
	if client.ascLocation == "" {
		return nil, errors.New("parameter client.ascLocation cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{ascLocation}", url.PathEscape(client.ascLocation))
	if alertName == "" {
		return nil, errors.New("parameter alertName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{alertName}", url.PathEscape(alertName))
	req, err := runtime.NewRequest(ctx, http.MethodGet, runtime.JoinPaths(client.host, urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("api-version", "2021-01-01")
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header.Set("Accept", "application/json")
	return req, nil
}

// getSubscriptionLevelHandleResponse handles the GetSubscriptionLevel response.
func (client *AlertsClient) getSubscriptionLevelHandleResponse(resp *http.Response) (AlertsClientGetSubscriptionLevelResponse, error) {
	result := AlertsClientGetSubscriptionLevelResponse{RawResponse: resp}
	if err := runtime.UnmarshalAsJSON(resp, &result.Alert); err != nil {
		return AlertsClientGetSubscriptionLevelResponse{}, err
	}
	return result, nil
}

// List - List all the alerts that are associated with the subscription
// If the operation fails it returns an *azcore.ResponseError type.
// options - AlertsClientListOptions contains the optional parameters for the AlertsClient.List method.
func (client *AlertsClient) List(options *AlertsClientListOptions) *AlertsClientListPager {
	return &AlertsClientListPager{
		client: client,
		requester: func(ctx context.Context) (*policy.Request, error) {
			return client.listCreateRequest(ctx, options)
		},
		advancer: func(ctx context.Context, resp AlertsClientListResponse) (*policy.Request, error) {
			return runtime.NewRequest(ctx, http.MethodGet, *resp.AlertList.NextLink)
		},
	}
}

// listCreateRequest creates the List request.
func (client *AlertsClient) listCreateRequest(ctx context.Context, options *AlertsClientListOptions) (*policy.Request, error) {
	urlPath := "/subscriptions/{subscriptionId}/providers/Microsoft.Security/alerts"
	if client.subscriptionID == "" {
		return nil, errors.New("parameter client.subscriptionID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{subscriptionId}", url.PathEscape(client.subscriptionID))
	req, err := runtime.NewRequest(ctx, http.MethodGet, runtime.JoinPaths(client.host, urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("api-version", "2021-01-01")
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header.Set("Accept", "application/json")
	return req, nil
}

// listHandleResponse handles the List response.
func (client *AlertsClient) listHandleResponse(resp *http.Response) (AlertsClientListResponse, error) {
	result := AlertsClientListResponse{RawResponse: resp}
	if err := runtime.UnmarshalAsJSON(resp, &result.AlertList); err != nil {
		return AlertsClientListResponse{}, err
	}
	return result, nil
}

// ListByResourceGroup - List all the alerts that are associated with the resource group
// If the operation fails it returns an *azcore.ResponseError type.
// resourceGroupName - The name of the resource group within the user's subscription. The name is case insensitive.
// options - AlertsClientListByResourceGroupOptions contains the optional parameters for the AlertsClient.ListByResourceGroup
// method.
func (client *AlertsClient) ListByResourceGroup(resourceGroupName string, options *AlertsClientListByResourceGroupOptions) *AlertsClientListByResourceGroupPager {
	return &AlertsClientListByResourceGroupPager{
		client: client,
		requester: func(ctx context.Context) (*policy.Request, error) {
			return client.listByResourceGroupCreateRequest(ctx, resourceGroupName, options)
		},
		advancer: func(ctx context.Context, resp AlertsClientListByResourceGroupResponse) (*policy.Request, error) {
			return runtime.NewRequest(ctx, http.MethodGet, *resp.AlertList.NextLink)
		},
	}
}

// listByResourceGroupCreateRequest creates the ListByResourceGroup request.
func (client *AlertsClient) listByResourceGroupCreateRequest(ctx context.Context, resourceGroupName string, options *AlertsClientListByResourceGroupOptions) (*policy.Request, error) {
	urlPath := "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Security/alerts"
	if client.subscriptionID == "" {
		return nil, errors.New("parameter client.subscriptionID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{subscriptionId}", url.PathEscape(client.subscriptionID))
	if resourceGroupName == "" {
		return nil, errors.New("parameter resourceGroupName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{resourceGroupName}", url.PathEscape(resourceGroupName))
	req, err := runtime.NewRequest(ctx, http.MethodGet, runtime.JoinPaths(client.host, urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("api-version", "2021-01-01")
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header.Set("Accept", "application/json")
	return req, nil
}

// listByResourceGroupHandleResponse handles the ListByResourceGroup response.
func (client *AlertsClient) listByResourceGroupHandleResponse(resp *http.Response) (AlertsClientListByResourceGroupResponse, error) {
	result := AlertsClientListByResourceGroupResponse{RawResponse: resp}
	if err := runtime.UnmarshalAsJSON(resp, &result.AlertList); err != nil {
		return AlertsClientListByResourceGroupResponse{}, err
	}
	return result, nil
}

// ListResourceGroupLevelByRegion - List all the alerts that are associated with the resource group that are stored in a specific
// location
// If the operation fails it returns an *azcore.ResponseError type.
// resourceGroupName - The name of the resource group within the user's subscription. The name is case insensitive.
// options - AlertsClientListResourceGroupLevelByRegionOptions contains the optional parameters for the AlertsClient.ListResourceGroupLevelByRegion
// method.
func (client *AlertsClient) ListResourceGroupLevelByRegion(resourceGroupName string, options *AlertsClientListResourceGroupLevelByRegionOptions) *AlertsClientListResourceGroupLevelByRegionPager {
	return &AlertsClientListResourceGroupLevelByRegionPager{
		client: client,
		requester: func(ctx context.Context) (*policy.Request, error) {
			return client.listResourceGroupLevelByRegionCreateRequest(ctx, resourceGroupName, options)
		},
		advancer: func(ctx context.Context, resp AlertsClientListResourceGroupLevelByRegionResponse) (*policy.Request, error) {
			return runtime.NewRequest(ctx, http.MethodGet, *resp.AlertList.NextLink)
		},
	}
}

// listResourceGroupLevelByRegionCreateRequest creates the ListResourceGroupLevelByRegion request.
func (client *AlertsClient) listResourceGroupLevelByRegionCreateRequest(ctx context.Context, resourceGroupName string, options *AlertsClientListResourceGroupLevelByRegionOptions) (*policy.Request, error) {
	urlPath := "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Security/locations/{ascLocation}/alerts"
	if client.subscriptionID == "" {
		return nil, errors.New("parameter client.subscriptionID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{subscriptionId}", url.PathEscape(client.subscriptionID))
	if client.ascLocation == "" {
		return nil, errors.New("parameter client.ascLocation cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{ascLocation}", url.PathEscape(client.ascLocation))
	if resourceGroupName == "" {
		return nil, errors.New("parameter resourceGroupName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{resourceGroupName}", url.PathEscape(resourceGroupName))
	req, err := runtime.NewRequest(ctx, http.MethodGet, runtime.JoinPaths(client.host, urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("api-version", "2021-01-01")
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header.Set("Accept", "application/json")
	return req, nil
}

// listResourceGroupLevelByRegionHandleResponse handles the ListResourceGroupLevelByRegion response.
func (client *AlertsClient) listResourceGroupLevelByRegionHandleResponse(resp *http.Response) (AlertsClientListResourceGroupLevelByRegionResponse, error) {
	result := AlertsClientListResourceGroupLevelByRegionResponse{RawResponse: resp}
	if err := runtime.UnmarshalAsJSON(resp, &result.AlertList); err != nil {
		return AlertsClientListResourceGroupLevelByRegionResponse{}, err
	}
	return result, nil
}

// ListSubscriptionLevelByRegion - List all the alerts that are associated with the subscription that are stored in a specific
// location
// If the operation fails it returns an *azcore.ResponseError type.
// options - AlertsClientListSubscriptionLevelByRegionOptions contains the optional parameters for the AlertsClient.ListSubscriptionLevelByRegion
// method.
func (client *AlertsClient) ListSubscriptionLevelByRegion(options *AlertsClientListSubscriptionLevelByRegionOptions) *AlertsClientListSubscriptionLevelByRegionPager {
	return &AlertsClientListSubscriptionLevelByRegionPager{
		client: client,
		requester: func(ctx context.Context) (*policy.Request, error) {
			return client.listSubscriptionLevelByRegionCreateRequest(ctx, options)
		},
		advancer: func(ctx context.Context, resp AlertsClientListSubscriptionLevelByRegionResponse) (*policy.Request, error) {
			return runtime.NewRequest(ctx, http.MethodGet, *resp.AlertList.NextLink)
		},
	}
}

// listSubscriptionLevelByRegionCreateRequest creates the ListSubscriptionLevelByRegion request.
func (client *AlertsClient) listSubscriptionLevelByRegionCreateRequest(ctx context.Context, options *AlertsClientListSubscriptionLevelByRegionOptions) (*policy.Request, error) {
	urlPath := "/subscriptions/{subscriptionId}/providers/Microsoft.Security/locations/{ascLocation}/alerts"
	if client.subscriptionID == "" {
		return nil, errors.New("parameter client.subscriptionID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{subscriptionId}", url.PathEscape(client.subscriptionID))
	if client.ascLocation == "" {
		return nil, errors.New("parameter client.ascLocation cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{ascLocation}", url.PathEscape(client.ascLocation))
	req, err := runtime.NewRequest(ctx, http.MethodGet, runtime.JoinPaths(client.host, urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("api-version", "2021-01-01")
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header.Set("Accept", "application/json")
	return req, nil
}

// listSubscriptionLevelByRegionHandleResponse handles the ListSubscriptionLevelByRegion response.
func (client *AlertsClient) listSubscriptionLevelByRegionHandleResponse(resp *http.Response) (AlertsClientListSubscriptionLevelByRegionResponse, error) {
	result := AlertsClientListSubscriptionLevelByRegionResponse{RawResponse: resp}
	if err := runtime.UnmarshalAsJSON(resp, &result.AlertList); err != nil {
		return AlertsClientListSubscriptionLevelByRegionResponse{}, err
	}
	return result, nil
}

// BeginSimulate - Simulate security alerts
// If the operation fails it returns an *azcore.ResponseError type.
// alertSimulatorRequestBody - Alert Simulator Request Properties
// options - AlertsClientBeginSimulateOptions contains the optional parameters for the AlertsClient.BeginSimulate method.
func (client *AlertsClient) BeginSimulate(ctx context.Context, alertSimulatorRequestBody AlertSimulatorRequestBody, options *AlertsClientBeginSimulateOptions) (AlertsClientSimulatePollerResponse, error) {
	resp, err := client.simulate(ctx, alertSimulatorRequestBody, options)
	if err != nil {
		return AlertsClientSimulatePollerResponse{}, err
	}
	result := AlertsClientSimulatePollerResponse{
		RawResponse: resp,
	}
	pt, err := armruntime.NewPoller("AlertsClient.Simulate", "original-uri", resp, client.pl)
	if err != nil {
		return AlertsClientSimulatePollerResponse{}, err
	}
	result.Poller = &AlertsClientSimulatePoller{
		pt: pt,
	}
	return result, nil
}

// Simulate - Simulate security alerts
// If the operation fails it returns an *azcore.ResponseError type.
func (client *AlertsClient) simulate(ctx context.Context, alertSimulatorRequestBody AlertSimulatorRequestBody, options *AlertsClientBeginSimulateOptions) (*http.Response, error) {
	req, err := client.simulateCreateRequest(ctx, alertSimulatorRequestBody, options)
	if err != nil {
		return nil, err
	}
	resp, err := client.pl.Do(req)
	if err != nil {
		return nil, err
	}
	if !runtime.HasStatusCode(resp, http.StatusAccepted) {
		return nil, runtime.NewResponseError(resp)
	}
	return resp, nil
}

// simulateCreateRequest creates the Simulate request.
func (client *AlertsClient) simulateCreateRequest(ctx context.Context, alertSimulatorRequestBody AlertSimulatorRequestBody, options *AlertsClientBeginSimulateOptions) (*policy.Request, error) {
	urlPath := "/subscriptions/{subscriptionId}/providers/Microsoft.Security/locations/{ascLocation}/alerts/default/simulate"
	if client.subscriptionID == "" {
		return nil, errors.New("parameter client.subscriptionID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{subscriptionId}", url.PathEscape(client.subscriptionID))
	if client.ascLocation == "" {
		return nil, errors.New("parameter client.ascLocation cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{ascLocation}", url.PathEscape(client.ascLocation))
	req, err := runtime.NewRequest(ctx, http.MethodPost, runtime.JoinPaths(client.host, urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("api-version", "2021-01-01")
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header.Set("Accept", "application/json")
	return req, runtime.MarshalAsJSON(req, alertSimulatorRequestBody)
}

// UpdateResourceGroupLevelStateToActivate - Update the alert's state
// If the operation fails it returns an *azcore.ResponseError type.
// alertName - Name of the alert object
// resourceGroupName - The name of the resource group within the user's subscription. The name is case insensitive.
// options - AlertsClientUpdateResourceGroupLevelStateToActivateOptions contains the optional parameters for the AlertsClient.UpdateResourceGroupLevelStateToActivate
// method.
func (client *AlertsClient) UpdateResourceGroupLevelStateToActivate(ctx context.Context, alertName string, resourceGroupName string, options *AlertsClientUpdateResourceGroupLevelStateToActivateOptions) (AlertsClientUpdateResourceGroupLevelStateToActivateResponse, error) {
	req, err := client.updateResourceGroupLevelStateToActivateCreateRequest(ctx, alertName, resourceGroupName, options)
	if err != nil {
		return AlertsClientUpdateResourceGroupLevelStateToActivateResponse{}, err
	}
	resp, err := client.pl.Do(req)
	if err != nil {
		return AlertsClientUpdateResourceGroupLevelStateToActivateResponse{}, err
	}
	if !runtime.HasStatusCode(resp, http.StatusNoContent) {
		return AlertsClientUpdateResourceGroupLevelStateToActivateResponse{}, runtime.NewResponseError(resp)
	}
	return AlertsClientUpdateResourceGroupLevelStateToActivateResponse{RawResponse: resp}, nil
}

// updateResourceGroupLevelStateToActivateCreateRequest creates the UpdateResourceGroupLevelStateToActivate request.
func (client *AlertsClient) updateResourceGroupLevelStateToActivateCreateRequest(ctx context.Context, alertName string, resourceGroupName string, options *AlertsClientUpdateResourceGroupLevelStateToActivateOptions) (*policy.Request, error) {
	urlPath := "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Security/locations/{ascLocation}/alerts/{alertName}/activate"
	if client.subscriptionID == "" {
		return nil, errors.New("parameter client.subscriptionID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{subscriptionId}", url.PathEscape(client.subscriptionID))
	if client.ascLocation == "" {
		return nil, errors.New("parameter client.ascLocation cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{ascLocation}", url.PathEscape(client.ascLocation))
	if alertName == "" {
		return nil, errors.New("parameter alertName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{alertName}", url.PathEscape(alertName))
	if resourceGroupName == "" {
		return nil, errors.New("parameter resourceGroupName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{resourceGroupName}", url.PathEscape(resourceGroupName))
	req, err := runtime.NewRequest(ctx, http.MethodPost, runtime.JoinPaths(client.host, urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("api-version", "2021-01-01")
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header.Set("Accept", "application/json")
	return req, nil
}

// UpdateResourceGroupLevelStateToDismiss - Update the alert's state
// If the operation fails it returns an *azcore.ResponseError type.
// alertName - Name of the alert object
// resourceGroupName - The name of the resource group within the user's subscription. The name is case insensitive.
// options - AlertsClientUpdateResourceGroupLevelStateToDismissOptions contains the optional parameters for the AlertsClient.UpdateResourceGroupLevelStateToDismiss
// method.
func (client *AlertsClient) UpdateResourceGroupLevelStateToDismiss(ctx context.Context, alertName string, resourceGroupName string, options *AlertsClientUpdateResourceGroupLevelStateToDismissOptions) (AlertsClientUpdateResourceGroupLevelStateToDismissResponse, error) {
	req, err := client.updateResourceGroupLevelStateToDismissCreateRequest(ctx, alertName, resourceGroupName, options)
	if err != nil {
		return AlertsClientUpdateResourceGroupLevelStateToDismissResponse{}, err
	}
	resp, err := client.pl.Do(req)
	if err != nil {
		return AlertsClientUpdateResourceGroupLevelStateToDismissResponse{}, err
	}
	if !runtime.HasStatusCode(resp, http.StatusNoContent) {
		return AlertsClientUpdateResourceGroupLevelStateToDismissResponse{}, runtime.NewResponseError(resp)
	}
	return AlertsClientUpdateResourceGroupLevelStateToDismissResponse{RawResponse: resp}, nil
}

// updateResourceGroupLevelStateToDismissCreateRequest creates the UpdateResourceGroupLevelStateToDismiss request.
func (client *AlertsClient) updateResourceGroupLevelStateToDismissCreateRequest(ctx context.Context, alertName string, resourceGroupName string, options *AlertsClientUpdateResourceGroupLevelStateToDismissOptions) (*policy.Request, error) {
	urlPath := "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Security/locations/{ascLocation}/alerts/{alertName}/dismiss"
	if client.subscriptionID == "" {
		return nil, errors.New("parameter client.subscriptionID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{subscriptionId}", url.PathEscape(client.subscriptionID))
	if client.ascLocation == "" {
		return nil, errors.New("parameter client.ascLocation cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{ascLocation}", url.PathEscape(client.ascLocation))
	if alertName == "" {
		return nil, errors.New("parameter alertName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{alertName}", url.PathEscape(alertName))
	if resourceGroupName == "" {
		return nil, errors.New("parameter resourceGroupName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{resourceGroupName}", url.PathEscape(resourceGroupName))
	req, err := runtime.NewRequest(ctx, http.MethodPost, runtime.JoinPaths(client.host, urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("api-version", "2021-01-01")
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header.Set("Accept", "application/json")
	return req, nil
}

// UpdateResourceGroupLevelStateToResolve - Update the alert's state
// If the operation fails it returns an *azcore.ResponseError type.
// alertName - Name of the alert object
// resourceGroupName - The name of the resource group within the user's subscription. The name is case insensitive.
// options - AlertsClientUpdateResourceGroupLevelStateToResolveOptions contains the optional parameters for the AlertsClient.UpdateResourceGroupLevelStateToResolve
// method.
func (client *AlertsClient) UpdateResourceGroupLevelStateToResolve(ctx context.Context, alertName string, resourceGroupName string, options *AlertsClientUpdateResourceGroupLevelStateToResolveOptions) (AlertsClientUpdateResourceGroupLevelStateToResolveResponse, error) {
	req, err := client.updateResourceGroupLevelStateToResolveCreateRequest(ctx, alertName, resourceGroupName, options)
	if err != nil {
		return AlertsClientUpdateResourceGroupLevelStateToResolveResponse{}, err
	}
	resp, err := client.pl.Do(req)
	if err != nil {
		return AlertsClientUpdateResourceGroupLevelStateToResolveResponse{}, err
	}
	if !runtime.HasStatusCode(resp, http.StatusNoContent) {
		return AlertsClientUpdateResourceGroupLevelStateToResolveResponse{}, runtime.NewResponseError(resp)
	}
	return AlertsClientUpdateResourceGroupLevelStateToResolveResponse{RawResponse: resp}, nil
}

// updateResourceGroupLevelStateToResolveCreateRequest creates the UpdateResourceGroupLevelStateToResolve request.
func (client *AlertsClient) updateResourceGroupLevelStateToResolveCreateRequest(ctx context.Context, alertName string, resourceGroupName string, options *AlertsClientUpdateResourceGroupLevelStateToResolveOptions) (*policy.Request, error) {
	urlPath := "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Security/locations/{ascLocation}/alerts/{alertName}/resolve"
	if client.subscriptionID == "" {
		return nil, errors.New("parameter client.subscriptionID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{subscriptionId}", url.PathEscape(client.subscriptionID))
	if client.ascLocation == "" {
		return nil, errors.New("parameter client.ascLocation cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{ascLocation}", url.PathEscape(client.ascLocation))
	if alertName == "" {
		return nil, errors.New("parameter alertName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{alertName}", url.PathEscape(alertName))
	if resourceGroupName == "" {
		return nil, errors.New("parameter resourceGroupName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{resourceGroupName}", url.PathEscape(resourceGroupName))
	req, err := runtime.NewRequest(ctx, http.MethodPost, runtime.JoinPaths(client.host, urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("api-version", "2021-01-01")
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header.Set("Accept", "application/json")
	return req, nil
}

// UpdateSubscriptionLevelStateToActivate - Update the alert's state
// If the operation fails it returns an *azcore.ResponseError type.
// alertName - Name of the alert object
// options - AlertsClientUpdateSubscriptionLevelStateToActivateOptions contains the optional parameters for the AlertsClient.UpdateSubscriptionLevelStateToActivate
// method.
func (client *AlertsClient) UpdateSubscriptionLevelStateToActivate(ctx context.Context, alertName string, options *AlertsClientUpdateSubscriptionLevelStateToActivateOptions) (AlertsClientUpdateSubscriptionLevelStateToActivateResponse, error) {
	req, err := client.updateSubscriptionLevelStateToActivateCreateRequest(ctx, alertName, options)
	if err != nil {
		return AlertsClientUpdateSubscriptionLevelStateToActivateResponse{}, err
	}
	resp, err := client.pl.Do(req)
	if err != nil {
		return AlertsClientUpdateSubscriptionLevelStateToActivateResponse{}, err
	}
	if !runtime.HasStatusCode(resp, http.StatusNoContent) {
		return AlertsClientUpdateSubscriptionLevelStateToActivateResponse{}, runtime.NewResponseError(resp)
	}
	return AlertsClientUpdateSubscriptionLevelStateToActivateResponse{RawResponse: resp}, nil
}

// updateSubscriptionLevelStateToActivateCreateRequest creates the UpdateSubscriptionLevelStateToActivate request.
func (client *AlertsClient) updateSubscriptionLevelStateToActivateCreateRequest(ctx context.Context, alertName string, options *AlertsClientUpdateSubscriptionLevelStateToActivateOptions) (*policy.Request, error) {
	urlPath := "/subscriptions/{subscriptionId}/providers/Microsoft.Security/locations/{ascLocation}/alerts/{alertName}/activate"
	if client.subscriptionID == "" {
		return nil, errors.New("parameter client.subscriptionID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{subscriptionId}", url.PathEscape(client.subscriptionID))
	if client.ascLocation == "" {
		return nil, errors.New("parameter client.ascLocation cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{ascLocation}", url.PathEscape(client.ascLocation))
	if alertName == "" {
		return nil, errors.New("parameter alertName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{alertName}", url.PathEscape(alertName))
	req, err := runtime.NewRequest(ctx, http.MethodPost, runtime.JoinPaths(client.host, urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("api-version", "2021-01-01")
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header.Set("Accept", "application/json")
	return req, nil
}

// UpdateSubscriptionLevelStateToDismiss - Update the alert's state
// If the operation fails it returns an *azcore.ResponseError type.
// alertName - Name of the alert object
// options - AlertsClientUpdateSubscriptionLevelStateToDismissOptions contains the optional parameters for the AlertsClient.UpdateSubscriptionLevelStateToDismiss
// method.
func (client *AlertsClient) UpdateSubscriptionLevelStateToDismiss(ctx context.Context, alertName string, options *AlertsClientUpdateSubscriptionLevelStateToDismissOptions) (AlertsClientUpdateSubscriptionLevelStateToDismissResponse, error) {
	req, err := client.updateSubscriptionLevelStateToDismissCreateRequest(ctx, alertName, options)
	if err != nil {
		return AlertsClientUpdateSubscriptionLevelStateToDismissResponse{}, err
	}
	resp, err := client.pl.Do(req)
	if err != nil {
		return AlertsClientUpdateSubscriptionLevelStateToDismissResponse{}, err
	}
	if !runtime.HasStatusCode(resp, http.StatusNoContent) {
		return AlertsClientUpdateSubscriptionLevelStateToDismissResponse{}, runtime.NewResponseError(resp)
	}
	return AlertsClientUpdateSubscriptionLevelStateToDismissResponse{RawResponse: resp}, nil
}

// updateSubscriptionLevelStateToDismissCreateRequest creates the UpdateSubscriptionLevelStateToDismiss request.
func (client *AlertsClient) updateSubscriptionLevelStateToDismissCreateRequest(ctx context.Context, alertName string, options *AlertsClientUpdateSubscriptionLevelStateToDismissOptions) (*policy.Request, error) {
	urlPath := "/subscriptions/{subscriptionId}/providers/Microsoft.Security/locations/{ascLocation}/alerts/{alertName}/dismiss"
	if client.subscriptionID == "" {
		return nil, errors.New("parameter client.subscriptionID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{subscriptionId}", url.PathEscape(client.subscriptionID))
	if client.ascLocation == "" {
		return nil, errors.New("parameter client.ascLocation cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{ascLocation}", url.PathEscape(client.ascLocation))
	if alertName == "" {
		return nil, errors.New("parameter alertName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{alertName}", url.PathEscape(alertName))
	req, err := runtime.NewRequest(ctx, http.MethodPost, runtime.JoinPaths(client.host, urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("api-version", "2021-01-01")
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header.Set("Accept", "application/json")
	return req, nil
}

// UpdateSubscriptionLevelStateToResolve - Update the alert's state
// If the operation fails it returns an *azcore.ResponseError type.
// alertName - Name of the alert object
// options - AlertsClientUpdateSubscriptionLevelStateToResolveOptions contains the optional parameters for the AlertsClient.UpdateSubscriptionLevelStateToResolve
// method.
func (client *AlertsClient) UpdateSubscriptionLevelStateToResolve(ctx context.Context, alertName string, options *AlertsClientUpdateSubscriptionLevelStateToResolveOptions) (AlertsClientUpdateSubscriptionLevelStateToResolveResponse, error) {
	req, err := client.updateSubscriptionLevelStateToResolveCreateRequest(ctx, alertName, options)
	if err != nil {
		return AlertsClientUpdateSubscriptionLevelStateToResolveResponse{}, err
	}
	resp, err := client.pl.Do(req)
	if err != nil {
		return AlertsClientUpdateSubscriptionLevelStateToResolveResponse{}, err
	}
	if !runtime.HasStatusCode(resp, http.StatusNoContent) {
		return AlertsClientUpdateSubscriptionLevelStateToResolveResponse{}, runtime.NewResponseError(resp)
	}
	return AlertsClientUpdateSubscriptionLevelStateToResolveResponse{RawResponse: resp}, nil
}

// updateSubscriptionLevelStateToResolveCreateRequest creates the UpdateSubscriptionLevelStateToResolve request.
func (client *AlertsClient) updateSubscriptionLevelStateToResolveCreateRequest(ctx context.Context, alertName string, options *AlertsClientUpdateSubscriptionLevelStateToResolveOptions) (*policy.Request, error) {
	urlPath := "/subscriptions/{subscriptionId}/providers/Microsoft.Security/locations/{ascLocation}/alerts/{alertName}/resolve"
	if client.subscriptionID == "" {
		return nil, errors.New("parameter client.subscriptionID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{subscriptionId}", url.PathEscape(client.subscriptionID))
	if client.ascLocation == "" {
		return nil, errors.New("parameter client.ascLocation cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{ascLocation}", url.PathEscape(client.ascLocation))
	if alertName == "" {
		return nil, errors.New("parameter alertName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{alertName}", url.PathEscape(alertName))
	req, err := runtime.NewRequest(ctx, http.MethodPost, runtime.JoinPaths(client.host, urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("api-version", "2021-01-01")
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header.Set("Accept", "application/json")
	return req, nil
}
