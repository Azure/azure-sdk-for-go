//go:build go1.16
// +build go1.16

// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

package armsecurity

import (
	"context"
	"errors"
	"fmt"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/arm"
	armruntime "github.com/Azure/azure-sdk-for-go/sdk/azcore/arm/runtime"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/policy"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/runtime"
	"net/http"
	"net/url"
	"strings"
)

// AlertsClient contains the methods for the Alerts group.
// Don't use this type directly, use NewAlertsClient() instead.
type AlertsClient struct {
	ep             string
	pl             runtime.Pipeline
	subscriptionID string
	ascLocation    string
}

// NewAlertsClient creates a new instance of AlertsClient with the specified values.
func NewAlertsClient(subscriptionID string, ascLocation string, credential azcore.TokenCredential, options *arm.ClientOptions) *AlertsClient {
	cp := arm.ClientOptions{}
	if options != nil {
		cp = *options
	}
	if len(cp.Host) == 0 {
		cp.Host = arm.AzurePublicCloud
	}
	return &AlertsClient{subscriptionID: subscriptionID, ascLocation: ascLocation, ep: string(cp.Host), pl: armruntime.NewPipeline(module, version, credential, &cp)}
}

// GetResourceGroupLevel - Get an alert that is associated a resource group or a resource in a resource group
// If the operation fails it returns the *CloudError error type.
func (client *AlertsClient) GetResourceGroupLevel(ctx context.Context, alertName string, resourceGroupName string, options *AlertsGetResourceGroupLevelOptions) (AlertsGetResourceGroupLevelResponse, error) {
	req, err := client.getResourceGroupLevelCreateRequest(ctx, alertName, resourceGroupName, options)
	if err != nil {
		return AlertsGetResourceGroupLevelResponse{}, err
	}
	resp, err := client.pl.Do(req)
	if err != nil {
		return AlertsGetResourceGroupLevelResponse{}, err
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {
		return AlertsGetResourceGroupLevelResponse{}, client.getResourceGroupLevelHandleError(resp)
	}
	return client.getResourceGroupLevelHandleResponse(resp)
}

// getResourceGroupLevelCreateRequest creates the GetResourceGroupLevel request.
func (client *AlertsClient) getResourceGroupLevelCreateRequest(ctx context.Context, alertName string, resourceGroupName string, options *AlertsGetResourceGroupLevelOptions) (*policy.Request, error) {
	urlPath := "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Security/locations/{ascLocation}/alerts/{alertName}"
	if client.subscriptionID == "" {
		return nil, errors.New("parameter client.subscriptionID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{subscriptionId}", url.PathEscape(client.subscriptionID))
	if client.ascLocation == "" {
		return nil, errors.New("parameter client.ascLocation cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{ascLocation}", url.PathEscape(client.ascLocation))
	if alertName == "" {
		return nil, errors.New("parameter alertName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{alertName}", url.PathEscape(alertName))
	if resourceGroupName == "" {
		return nil, errors.New("parameter resourceGroupName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{resourceGroupName}", url.PathEscape(resourceGroupName))
	req, err := runtime.NewRequest(ctx, http.MethodGet, runtime.JoinPaths(client.ep, urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("api-version", "2021-01-01")
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header.Set("Accept", "application/json")
	return req, nil
}

// getResourceGroupLevelHandleResponse handles the GetResourceGroupLevel response.
func (client *AlertsClient) getResourceGroupLevelHandleResponse(resp *http.Response) (AlertsGetResourceGroupLevelResponse, error) {
	result := AlertsGetResourceGroupLevelResponse{RawResponse: resp}
	if err := runtime.UnmarshalAsJSON(resp, &result.Alert); err != nil {
		return AlertsGetResourceGroupLevelResponse{}, runtime.NewResponseError(err, resp)
	}
	return result, nil
}

// getResourceGroupLevelHandleError handles the GetResourceGroupLevel error response.
func (client *AlertsClient) getResourceGroupLevelHandleError(resp *http.Response) error {
	body, err := runtime.Payload(resp)
	if err != nil {
		return runtime.NewResponseError(err, resp)
	}
	errType := CloudError{raw: string(body)}
	if err := runtime.UnmarshalAsJSON(resp, &errType.InnerError); err != nil {
		return runtime.NewResponseError(fmt.Errorf("%s\n%s", string(body), err), resp)
	}
	return runtime.NewResponseError(&errType, resp)
}

// GetSubscriptionLevel - Get an alert that is associated with a subscription
// If the operation fails it returns the *CloudError error type.
func (client *AlertsClient) GetSubscriptionLevel(ctx context.Context, alertName string, options *AlertsGetSubscriptionLevelOptions) (AlertsGetSubscriptionLevelResponse, error) {
	req, err := client.getSubscriptionLevelCreateRequest(ctx, alertName, options)
	if err != nil {
		return AlertsGetSubscriptionLevelResponse{}, err
	}
	resp, err := client.pl.Do(req)
	if err != nil {
		return AlertsGetSubscriptionLevelResponse{}, err
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {
		return AlertsGetSubscriptionLevelResponse{}, client.getSubscriptionLevelHandleError(resp)
	}
	return client.getSubscriptionLevelHandleResponse(resp)
}

// getSubscriptionLevelCreateRequest creates the GetSubscriptionLevel request.
func (client *AlertsClient) getSubscriptionLevelCreateRequest(ctx context.Context, alertName string, options *AlertsGetSubscriptionLevelOptions) (*policy.Request, error) {
	urlPath := "/subscriptions/{subscriptionId}/providers/Microsoft.Security/locations/{ascLocation}/alerts/{alertName}"
	if client.subscriptionID == "" {
		return nil, errors.New("parameter client.subscriptionID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{subscriptionId}", url.PathEscape(client.subscriptionID))
	if client.ascLocation == "" {
		return nil, errors.New("parameter client.ascLocation cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{ascLocation}", url.PathEscape(client.ascLocation))
	if alertName == "" {
		return nil, errors.New("parameter alertName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{alertName}", url.PathEscape(alertName))
	req, err := runtime.NewRequest(ctx, http.MethodGet, runtime.JoinPaths(client.ep, urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("api-version", "2021-01-01")
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header.Set("Accept", "application/json")
	return req, nil
}

// getSubscriptionLevelHandleResponse handles the GetSubscriptionLevel response.
func (client *AlertsClient) getSubscriptionLevelHandleResponse(resp *http.Response) (AlertsGetSubscriptionLevelResponse, error) {
	result := AlertsGetSubscriptionLevelResponse{RawResponse: resp}
	if err := runtime.UnmarshalAsJSON(resp, &result.Alert); err != nil {
		return AlertsGetSubscriptionLevelResponse{}, runtime.NewResponseError(err, resp)
	}
	return result, nil
}

// getSubscriptionLevelHandleError handles the GetSubscriptionLevel error response.
func (client *AlertsClient) getSubscriptionLevelHandleError(resp *http.Response) error {
	body, err := runtime.Payload(resp)
	if err != nil {
		return runtime.NewResponseError(err, resp)
	}
	errType := CloudError{raw: string(body)}
	if err := runtime.UnmarshalAsJSON(resp, &errType.InnerError); err != nil {
		return runtime.NewResponseError(fmt.Errorf("%s\n%s", string(body), err), resp)
	}
	return runtime.NewResponseError(&errType, resp)
}

// List - List all the alerts that are associated with the subscription
// If the operation fails it returns the *CloudError error type.
func (client *AlertsClient) List(options *AlertsListOptions) *AlertsListPager {
	return &AlertsListPager{
		client: client,
		requester: func(ctx context.Context) (*policy.Request, error) {
			return client.listCreateRequest(ctx, options)
		},
		advancer: func(ctx context.Context, resp AlertsListResponse) (*policy.Request, error) {
			return runtime.NewRequest(ctx, http.MethodGet, *resp.AlertList.NextLink)
		},
	}
}

// listCreateRequest creates the List request.
func (client *AlertsClient) listCreateRequest(ctx context.Context, options *AlertsListOptions) (*policy.Request, error) {
	urlPath := "/subscriptions/{subscriptionId}/providers/Microsoft.Security/alerts"
	if client.subscriptionID == "" {
		return nil, errors.New("parameter client.subscriptionID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{subscriptionId}", url.PathEscape(client.subscriptionID))
	req, err := runtime.NewRequest(ctx, http.MethodGet, runtime.JoinPaths(client.ep, urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("api-version", "2021-01-01")
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header.Set("Accept", "application/json")
	return req, nil
}

// listHandleResponse handles the List response.
func (client *AlertsClient) listHandleResponse(resp *http.Response) (AlertsListResponse, error) {
	result := AlertsListResponse{RawResponse: resp}
	if err := runtime.UnmarshalAsJSON(resp, &result.AlertList); err != nil {
		return AlertsListResponse{}, runtime.NewResponseError(err, resp)
	}
	return result, nil
}

// listHandleError handles the List error response.
func (client *AlertsClient) listHandleError(resp *http.Response) error {
	body, err := runtime.Payload(resp)
	if err != nil {
		return runtime.NewResponseError(err, resp)
	}
	errType := CloudError{raw: string(body)}
	if err := runtime.UnmarshalAsJSON(resp, &errType.InnerError); err != nil {
		return runtime.NewResponseError(fmt.Errorf("%s\n%s", string(body), err), resp)
	}
	return runtime.NewResponseError(&errType, resp)
}

// ListByResourceGroup - List all the alerts that are associated with the resource group
// If the operation fails it returns the *CloudError error type.
func (client *AlertsClient) ListByResourceGroup(resourceGroupName string, options *AlertsListByResourceGroupOptions) *AlertsListByResourceGroupPager {
	return &AlertsListByResourceGroupPager{
		client: client,
		requester: func(ctx context.Context) (*policy.Request, error) {
			return client.listByResourceGroupCreateRequest(ctx, resourceGroupName, options)
		},
		advancer: func(ctx context.Context, resp AlertsListByResourceGroupResponse) (*policy.Request, error) {
			return runtime.NewRequest(ctx, http.MethodGet, *resp.AlertList.NextLink)
		},
	}
}

// listByResourceGroupCreateRequest creates the ListByResourceGroup request.
func (client *AlertsClient) listByResourceGroupCreateRequest(ctx context.Context, resourceGroupName string, options *AlertsListByResourceGroupOptions) (*policy.Request, error) {
	urlPath := "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Security/alerts"
	if client.subscriptionID == "" {
		return nil, errors.New("parameter client.subscriptionID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{subscriptionId}", url.PathEscape(client.subscriptionID))
	if resourceGroupName == "" {
		return nil, errors.New("parameter resourceGroupName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{resourceGroupName}", url.PathEscape(resourceGroupName))
	req, err := runtime.NewRequest(ctx, http.MethodGet, runtime.JoinPaths(client.ep, urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("api-version", "2021-01-01")
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header.Set("Accept", "application/json")
	return req, nil
}

// listByResourceGroupHandleResponse handles the ListByResourceGroup response.
func (client *AlertsClient) listByResourceGroupHandleResponse(resp *http.Response) (AlertsListByResourceGroupResponse, error) {
	result := AlertsListByResourceGroupResponse{RawResponse: resp}
	if err := runtime.UnmarshalAsJSON(resp, &result.AlertList); err != nil {
		return AlertsListByResourceGroupResponse{}, runtime.NewResponseError(err, resp)
	}
	return result, nil
}

// listByResourceGroupHandleError handles the ListByResourceGroup error response.
func (client *AlertsClient) listByResourceGroupHandleError(resp *http.Response) error {
	body, err := runtime.Payload(resp)
	if err != nil {
		return runtime.NewResponseError(err, resp)
	}
	errType := CloudError{raw: string(body)}
	if err := runtime.UnmarshalAsJSON(resp, &errType.InnerError); err != nil {
		return runtime.NewResponseError(fmt.Errorf("%s\n%s", string(body), err), resp)
	}
	return runtime.NewResponseError(&errType, resp)
}

// ListResourceGroupLevelByRegion - List all the alerts that are associated with the resource group that are stored in a specific location
// If the operation fails it returns the *CloudError error type.
func (client *AlertsClient) ListResourceGroupLevelByRegion(resourceGroupName string, options *AlertsListResourceGroupLevelByRegionOptions) *AlertsListResourceGroupLevelByRegionPager {
	return &AlertsListResourceGroupLevelByRegionPager{
		client: client,
		requester: func(ctx context.Context) (*policy.Request, error) {
			return client.listResourceGroupLevelByRegionCreateRequest(ctx, resourceGroupName, options)
		},
		advancer: func(ctx context.Context, resp AlertsListResourceGroupLevelByRegionResponse) (*policy.Request, error) {
			return runtime.NewRequest(ctx, http.MethodGet, *resp.AlertList.NextLink)
		},
	}
}

// listResourceGroupLevelByRegionCreateRequest creates the ListResourceGroupLevelByRegion request.
func (client *AlertsClient) listResourceGroupLevelByRegionCreateRequest(ctx context.Context, resourceGroupName string, options *AlertsListResourceGroupLevelByRegionOptions) (*policy.Request, error) {
	urlPath := "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Security/locations/{ascLocation}/alerts"
	if client.subscriptionID == "" {
		return nil, errors.New("parameter client.subscriptionID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{subscriptionId}", url.PathEscape(client.subscriptionID))
	if client.ascLocation == "" {
		return nil, errors.New("parameter client.ascLocation cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{ascLocation}", url.PathEscape(client.ascLocation))
	if resourceGroupName == "" {
		return nil, errors.New("parameter resourceGroupName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{resourceGroupName}", url.PathEscape(resourceGroupName))
	req, err := runtime.NewRequest(ctx, http.MethodGet, runtime.JoinPaths(client.ep, urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("api-version", "2021-01-01")
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header.Set("Accept", "application/json")
	return req, nil
}

// listResourceGroupLevelByRegionHandleResponse handles the ListResourceGroupLevelByRegion response.
func (client *AlertsClient) listResourceGroupLevelByRegionHandleResponse(resp *http.Response) (AlertsListResourceGroupLevelByRegionResponse, error) {
	result := AlertsListResourceGroupLevelByRegionResponse{RawResponse: resp}
	if err := runtime.UnmarshalAsJSON(resp, &result.AlertList); err != nil {
		return AlertsListResourceGroupLevelByRegionResponse{}, runtime.NewResponseError(err, resp)
	}
	return result, nil
}

// listResourceGroupLevelByRegionHandleError handles the ListResourceGroupLevelByRegion error response.
func (client *AlertsClient) listResourceGroupLevelByRegionHandleError(resp *http.Response) error {
	body, err := runtime.Payload(resp)
	if err != nil {
		return runtime.NewResponseError(err, resp)
	}
	errType := CloudError{raw: string(body)}
	if err := runtime.UnmarshalAsJSON(resp, &errType.InnerError); err != nil {
		return runtime.NewResponseError(fmt.Errorf("%s\n%s", string(body), err), resp)
	}
	return runtime.NewResponseError(&errType, resp)
}

// ListSubscriptionLevelByRegion - List all the alerts that are associated with the subscription that are stored in a specific location
// If the operation fails it returns the *CloudError error type.
func (client *AlertsClient) ListSubscriptionLevelByRegion(options *AlertsListSubscriptionLevelByRegionOptions) *AlertsListSubscriptionLevelByRegionPager {
	return &AlertsListSubscriptionLevelByRegionPager{
		client: client,
		requester: func(ctx context.Context) (*policy.Request, error) {
			return client.listSubscriptionLevelByRegionCreateRequest(ctx, options)
		},
		advancer: func(ctx context.Context, resp AlertsListSubscriptionLevelByRegionResponse) (*policy.Request, error) {
			return runtime.NewRequest(ctx, http.MethodGet, *resp.AlertList.NextLink)
		},
	}
}

// listSubscriptionLevelByRegionCreateRequest creates the ListSubscriptionLevelByRegion request.
func (client *AlertsClient) listSubscriptionLevelByRegionCreateRequest(ctx context.Context, options *AlertsListSubscriptionLevelByRegionOptions) (*policy.Request, error) {
	urlPath := "/subscriptions/{subscriptionId}/providers/Microsoft.Security/locations/{ascLocation}/alerts"
	if client.subscriptionID == "" {
		return nil, errors.New("parameter client.subscriptionID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{subscriptionId}", url.PathEscape(client.subscriptionID))
	if client.ascLocation == "" {
		return nil, errors.New("parameter client.ascLocation cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{ascLocation}", url.PathEscape(client.ascLocation))
	req, err := runtime.NewRequest(ctx, http.MethodGet, runtime.JoinPaths(client.ep, urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("api-version", "2021-01-01")
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header.Set("Accept", "application/json")
	return req, nil
}

// listSubscriptionLevelByRegionHandleResponse handles the ListSubscriptionLevelByRegion response.
func (client *AlertsClient) listSubscriptionLevelByRegionHandleResponse(resp *http.Response) (AlertsListSubscriptionLevelByRegionResponse, error) {
	result := AlertsListSubscriptionLevelByRegionResponse{RawResponse: resp}
	if err := runtime.UnmarshalAsJSON(resp, &result.AlertList); err != nil {
		return AlertsListSubscriptionLevelByRegionResponse{}, runtime.NewResponseError(err, resp)
	}
	return result, nil
}

// listSubscriptionLevelByRegionHandleError handles the ListSubscriptionLevelByRegion error response.
func (client *AlertsClient) listSubscriptionLevelByRegionHandleError(resp *http.Response) error {
	body, err := runtime.Payload(resp)
	if err != nil {
		return runtime.NewResponseError(err, resp)
	}
	errType := CloudError{raw: string(body)}
	if err := runtime.UnmarshalAsJSON(resp, &errType.InnerError); err != nil {
		return runtime.NewResponseError(fmt.Errorf("%s\n%s", string(body), err), resp)
	}
	return runtime.NewResponseError(&errType, resp)
}

// BeginSimulate - Simulate security alerts
// If the operation fails it returns the *CloudError error type.
func (client *AlertsClient) BeginSimulate(ctx context.Context, alertSimulatorRequestBody AlertSimulatorRequestBody, options *AlertsBeginSimulateOptions) (AlertsSimulatePollerResponse, error) {
	resp, err := client.simulate(ctx, alertSimulatorRequestBody, options)
	if err != nil {
		return AlertsSimulatePollerResponse{}, err
	}
	result := AlertsSimulatePollerResponse{
		RawResponse: resp,
	}
	pt, err := armruntime.NewPoller("AlertsClient.Simulate", "original-uri", resp, client.pl, client.simulateHandleError)
	if err != nil {
		return AlertsSimulatePollerResponse{}, err
	}
	result.Poller = &AlertsSimulatePoller{
		pt: pt,
	}
	return result, nil
}

// Simulate - Simulate security alerts
// If the operation fails it returns the *CloudError error type.
func (client *AlertsClient) simulate(ctx context.Context, alertSimulatorRequestBody AlertSimulatorRequestBody, options *AlertsBeginSimulateOptions) (*http.Response, error) {
	req, err := client.simulateCreateRequest(ctx, alertSimulatorRequestBody, options)
	if err != nil {
		return nil, err
	}
	resp, err := client.pl.Do(req)
	if err != nil {
		return nil, err
	}
	if !runtime.HasStatusCode(resp, http.StatusAccepted) {
		return nil, client.simulateHandleError(resp)
	}
	return resp, nil
}

// simulateCreateRequest creates the Simulate request.
func (client *AlertsClient) simulateCreateRequest(ctx context.Context, alertSimulatorRequestBody AlertSimulatorRequestBody, options *AlertsBeginSimulateOptions) (*policy.Request, error) {
	urlPath := "/subscriptions/{subscriptionId}/providers/Microsoft.Security/locations/{ascLocation}/alerts/default/simulate"
	if client.subscriptionID == "" {
		return nil, errors.New("parameter client.subscriptionID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{subscriptionId}", url.PathEscape(client.subscriptionID))
	if client.ascLocation == "" {
		return nil, errors.New("parameter client.ascLocation cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{ascLocation}", url.PathEscape(client.ascLocation))
	req, err := runtime.NewRequest(ctx, http.MethodPost, runtime.JoinPaths(client.ep, urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("api-version", "2021-01-01")
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header.Set("Accept", "application/json")
	return req, runtime.MarshalAsJSON(req, alertSimulatorRequestBody)
}

// simulateHandleError handles the Simulate error response.
func (client *AlertsClient) simulateHandleError(resp *http.Response) error {
	body, err := runtime.Payload(resp)
	if err != nil {
		return runtime.NewResponseError(err, resp)
	}
	errType := CloudError{raw: string(body)}
	if err := runtime.UnmarshalAsJSON(resp, &errType.InnerError); err != nil {
		return runtime.NewResponseError(fmt.Errorf("%s\n%s", string(body), err), resp)
	}
	return runtime.NewResponseError(&errType, resp)
}

// UpdateResourceGroupLevelStateToActivate - Update the alert's state
// If the operation fails it returns the *CloudError error type.
func (client *AlertsClient) UpdateResourceGroupLevelStateToActivate(ctx context.Context, alertName string, resourceGroupName string, options *AlertsUpdateResourceGroupLevelStateToActivateOptions) (AlertsUpdateResourceGroupLevelStateToActivateResponse, error) {
	req, err := client.updateResourceGroupLevelStateToActivateCreateRequest(ctx, alertName, resourceGroupName, options)
	if err != nil {
		return AlertsUpdateResourceGroupLevelStateToActivateResponse{}, err
	}
	resp, err := client.pl.Do(req)
	if err != nil {
		return AlertsUpdateResourceGroupLevelStateToActivateResponse{}, err
	}
	if !runtime.HasStatusCode(resp, http.StatusNoContent) {
		return AlertsUpdateResourceGroupLevelStateToActivateResponse{}, client.updateResourceGroupLevelStateToActivateHandleError(resp)
	}
	return AlertsUpdateResourceGroupLevelStateToActivateResponse{RawResponse: resp}, nil
}

// updateResourceGroupLevelStateToActivateCreateRequest creates the UpdateResourceGroupLevelStateToActivate request.
func (client *AlertsClient) updateResourceGroupLevelStateToActivateCreateRequest(ctx context.Context, alertName string, resourceGroupName string, options *AlertsUpdateResourceGroupLevelStateToActivateOptions) (*policy.Request, error) {
	urlPath := "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Security/locations/{ascLocation}/alerts/{alertName}/activate"
	if client.subscriptionID == "" {
		return nil, errors.New("parameter client.subscriptionID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{subscriptionId}", url.PathEscape(client.subscriptionID))
	if client.ascLocation == "" {
		return nil, errors.New("parameter client.ascLocation cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{ascLocation}", url.PathEscape(client.ascLocation))
	if alertName == "" {
		return nil, errors.New("parameter alertName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{alertName}", url.PathEscape(alertName))
	if resourceGroupName == "" {
		return nil, errors.New("parameter resourceGroupName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{resourceGroupName}", url.PathEscape(resourceGroupName))
	req, err := runtime.NewRequest(ctx, http.MethodPost, runtime.JoinPaths(client.ep, urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("api-version", "2021-01-01")
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header.Set("Accept", "application/json")
	return req, nil
}

// updateResourceGroupLevelStateToActivateHandleError handles the UpdateResourceGroupLevelStateToActivate error response.
func (client *AlertsClient) updateResourceGroupLevelStateToActivateHandleError(resp *http.Response) error {
	body, err := runtime.Payload(resp)
	if err != nil {
		return runtime.NewResponseError(err, resp)
	}
	errType := CloudError{raw: string(body)}
	if err := runtime.UnmarshalAsJSON(resp, &errType.InnerError); err != nil {
		return runtime.NewResponseError(fmt.Errorf("%s\n%s", string(body), err), resp)
	}
	return runtime.NewResponseError(&errType, resp)
}

// UpdateResourceGroupLevelStateToDismiss - Update the alert's state
// If the operation fails it returns the *CloudError error type.
func (client *AlertsClient) UpdateResourceGroupLevelStateToDismiss(ctx context.Context, alertName string, resourceGroupName string, options *AlertsUpdateResourceGroupLevelStateToDismissOptions) (AlertsUpdateResourceGroupLevelStateToDismissResponse, error) {
	req, err := client.updateResourceGroupLevelStateToDismissCreateRequest(ctx, alertName, resourceGroupName, options)
	if err != nil {
		return AlertsUpdateResourceGroupLevelStateToDismissResponse{}, err
	}
	resp, err := client.pl.Do(req)
	if err != nil {
		return AlertsUpdateResourceGroupLevelStateToDismissResponse{}, err
	}
	if !runtime.HasStatusCode(resp, http.StatusNoContent) {
		return AlertsUpdateResourceGroupLevelStateToDismissResponse{}, client.updateResourceGroupLevelStateToDismissHandleError(resp)
	}
	return AlertsUpdateResourceGroupLevelStateToDismissResponse{RawResponse: resp}, nil
}

// updateResourceGroupLevelStateToDismissCreateRequest creates the UpdateResourceGroupLevelStateToDismiss request.
func (client *AlertsClient) updateResourceGroupLevelStateToDismissCreateRequest(ctx context.Context, alertName string, resourceGroupName string, options *AlertsUpdateResourceGroupLevelStateToDismissOptions) (*policy.Request, error) {
	urlPath := "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Security/locations/{ascLocation}/alerts/{alertName}/dismiss"
	if client.subscriptionID == "" {
		return nil, errors.New("parameter client.subscriptionID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{subscriptionId}", url.PathEscape(client.subscriptionID))
	if client.ascLocation == "" {
		return nil, errors.New("parameter client.ascLocation cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{ascLocation}", url.PathEscape(client.ascLocation))
	if alertName == "" {
		return nil, errors.New("parameter alertName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{alertName}", url.PathEscape(alertName))
	if resourceGroupName == "" {
		return nil, errors.New("parameter resourceGroupName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{resourceGroupName}", url.PathEscape(resourceGroupName))
	req, err := runtime.NewRequest(ctx, http.MethodPost, runtime.JoinPaths(client.ep, urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("api-version", "2021-01-01")
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header.Set("Accept", "application/json")
	return req, nil
}

// updateResourceGroupLevelStateToDismissHandleError handles the UpdateResourceGroupLevelStateToDismiss error response.
func (client *AlertsClient) updateResourceGroupLevelStateToDismissHandleError(resp *http.Response) error {
	body, err := runtime.Payload(resp)
	if err != nil {
		return runtime.NewResponseError(err, resp)
	}
	errType := CloudError{raw: string(body)}
	if err := runtime.UnmarshalAsJSON(resp, &errType.InnerError); err != nil {
		return runtime.NewResponseError(fmt.Errorf("%s\n%s", string(body), err), resp)
	}
	return runtime.NewResponseError(&errType, resp)
}

// UpdateResourceGroupLevelStateToResolve - Update the alert's state
// If the operation fails it returns the *CloudError error type.
func (client *AlertsClient) UpdateResourceGroupLevelStateToResolve(ctx context.Context, alertName string, resourceGroupName string, options *AlertsUpdateResourceGroupLevelStateToResolveOptions) (AlertsUpdateResourceGroupLevelStateToResolveResponse, error) {
	req, err := client.updateResourceGroupLevelStateToResolveCreateRequest(ctx, alertName, resourceGroupName, options)
	if err != nil {
		return AlertsUpdateResourceGroupLevelStateToResolveResponse{}, err
	}
	resp, err := client.pl.Do(req)
	if err != nil {
		return AlertsUpdateResourceGroupLevelStateToResolveResponse{}, err
	}
	if !runtime.HasStatusCode(resp, http.StatusNoContent) {
		return AlertsUpdateResourceGroupLevelStateToResolveResponse{}, client.updateResourceGroupLevelStateToResolveHandleError(resp)
	}
	return AlertsUpdateResourceGroupLevelStateToResolveResponse{RawResponse: resp}, nil
}

// updateResourceGroupLevelStateToResolveCreateRequest creates the UpdateResourceGroupLevelStateToResolve request.
func (client *AlertsClient) updateResourceGroupLevelStateToResolveCreateRequest(ctx context.Context, alertName string, resourceGroupName string, options *AlertsUpdateResourceGroupLevelStateToResolveOptions) (*policy.Request, error) {
	urlPath := "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Security/locations/{ascLocation}/alerts/{alertName}/resolve"
	if client.subscriptionID == "" {
		return nil, errors.New("parameter client.subscriptionID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{subscriptionId}", url.PathEscape(client.subscriptionID))
	if client.ascLocation == "" {
		return nil, errors.New("parameter client.ascLocation cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{ascLocation}", url.PathEscape(client.ascLocation))
	if alertName == "" {
		return nil, errors.New("parameter alertName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{alertName}", url.PathEscape(alertName))
	if resourceGroupName == "" {
		return nil, errors.New("parameter resourceGroupName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{resourceGroupName}", url.PathEscape(resourceGroupName))
	req, err := runtime.NewRequest(ctx, http.MethodPost, runtime.JoinPaths(client.ep, urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("api-version", "2021-01-01")
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header.Set("Accept", "application/json")
	return req, nil
}

// updateResourceGroupLevelStateToResolveHandleError handles the UpdateResourceGroupLevelStateToResolve error response.
func (client *AlertsClient) updateResourceGroupLevelStateToResolveHandleError(resp *http.Response) error {
	body, err := runtime.Payload(resp)
	if err != nil {
		return runtime.NewResponseError(err, resp)
	}
	errType := CloudError{raw: string(body)}
	if err := runtime.UnmarshalAsJSON(resp, &errType.InnerError); err != nil {
		return runtime.NewResponseError(fmt.Errorf("%s\n%s", string(body), err), resp)
	}
	return runtime.NewResponseError(&errType, resp)
}

// UpdateSubscriptionLevelStateToActivate - Update the alert's state
// If the operation fails it returns the *CloudError error type.
func (client *AlertsClient) UpdateSubscriptionLevelStateToActivate(ctx context.Context, alertName string, options *AlertsUpdateSubscriptionLevelStateToActivateOptions) (AlertsUpdateSubscriptionLevelStateToActivateResponse, error) {
	req, err := client.updateSubscriptionLevelStateToActivateCreateRequest(ctx, alertName, options)
	if err != nil {
		return AlertsUpdateSubscriptionLevelStateToActivateResponse{}, err
	}
	resp, err := client.pl.Do(req)
	if err != nil {
		return AlertsUpdateSubscriptionLevelStateToActivateResponse{}, err
	}
	if !runtime.HasStatusCode(resp, http.StatusNoContent) {
		return AlertsUpdateSubscriptionLevelStateToActivateResponse{}, client.updateSubscriptionLevelStateToActivateHandleError(resp)
	}
	return AlertsUpdateSubscriptionLevelStateToActivateResponse{RawResponse: resp}, nil
}

// updateSubscriptionLevelStateToActivateCreateRequest creates the UpdateSubscriptionLevelStateToActivate request.
func (client *AlertsClient) updateSubscriptionLevelStateToActivateCreateRequest(ctx context.Context, alertName string, options *AlertsUpdateSubscriptionLevelStateToActivateOptions) (*policy.Request, error) {
	urlPath := "/subscriptions/{subscriptionId}/providers/Microsoft.Security/locations/{ascLocation}/alerts/{alertName}/activate"
	if client.subscriptionID == "" {
		return nil, errors.New("parameter client.subscriptionID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{subscriptionId}", url.PathEscape(client.subscriptionID))
	if client.ascLocation == "" {
		return nil, errors.New("parameter client.ascLocation cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{ascLocation}", url.PathEscape(client.ascLocation))
	if alertName == "" {
		return nil, errors.New("parameter alertName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{alertName}", url.PathEscape(alertName))
	req, err := runtime.NewRequest(ctx, http.MethodPost, runtime.JoinPaths(client.ep, urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("api-version", "2021-01-01")
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header.Set("Accept", "application/json")
	return req, nil
}

// updateSubscriptionLevelStateToActivateHandleError handles the UpdateSubscriptionLevelStateToActivate error response.
func (client *AlertsClient) updateSubscriptionLevelStateToActivateHandleError(resp *http.Response) error {
	body, err := runtime.Payload(resp)
	if err != nil {
		return runtime.NewResponseError(err, resp)
	}
	errType := CloudError{raw: string(body)}
	if err := runtime.UnmarshalAsJSON(resp, &errType.InnerError); err != nil {
		return runtime.NewResponseError(fmt.Errorf("%s\n%s", string(body), err), resp)
	}
	return runtime.NewResponseError(&errType, resp)
}

// UpdateSubscriptionLevelStateToDismiss - Update the alert's state
// If the operation fails it returns the *CloudError error type.
func (client *AlertsClient) UpdateSubscriptionLevelStateToDismiss(ctx context.Context, alertName string, options *AlertsUpdateSubscriptionLevelStateToDismissOptions) (AlertsUpdateSubscriptionLevelStateToDismissResponse, error) {
	req, err := client.updateSubscriptionLevelStateToDismissCreateRequest(ctx, alertName, options)
	if err != nil {
		return AlertsUpdateSubscriptionLevelStateToDismissResponse{}, err
	}
	resp, err := client.pl.Do(req)
	if err != nil {
		return AlertsUpdateSubscriptionLevelStateToDismissResponse{}, err
	}
	if !runtime.HasStatusCode(resp, http.StatusNoContent) {
		return AlertsUpdateSubscriptionLevelStateToDismissResponse{}, client.updateSubscriptionLevelStateToDismissHandleError(resp)
	}
	return AlertsUpdateSubscriptionLevelStateToDismissResponse{RawResponse: resp}, nil
}

// updateSubscriptionLevelStateToDismissCreateRequest creates the UpdateSubscriptionLevelStateToDismiss request.
func (client *AlertsClient) updateSubscriptionLevelStateToDismissCreateRequest(ctx context.Context, alertName string, options *AlertsUpdateSubscriptionLevelStateToDismissOptions) (*policy.Request, error) {
	urlPath := "/subscriptions/{subscriptionId}/providers/Microsoft.Security/locations/{ascLocation}/alerts/{alertName}/dismiss"
	if client.subscriptionID == "" {
		return nil, errors.New("parameter client.subscriptionID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{subscriptionId}", url.PathEscape(client.subscriptionID))
	if client.ascLocation == "" {
		return nil, errors.New("parameter client.ascLocation cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{ascLocation}", url.PathEscape(client.ascLocation))
	if alertName == "" {
		return nil, errors.New("parameter alertName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{alertName}", url.PathEscape(alertName))
	req, err := runtime.NewRequest(ctx, http.MethodPost, runtime.JoinPaths(client.ep, urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("api-version", "2021-01-01")
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header.Set("Accept", "application/json")
	return req, nil
}

// updateSubscriptionLevelStateToDismissHandleError handles the UpdateSubscriptionLevelStateToDismiss error response.
func (client *AlertsClient) updateSubscriptionLevelStateToDismissHandleError(resp *http.Response) error {
	body, err := runtime.Payload(resp)
	if err != nil {
		return runtime.NewResponseError(err, resp)
	}
	errType := CloudError{raw: string(body)}
	if err := runtime.UnmarshalAsJSON(resp, &errType.InnerError); err != nil {
		return runtime.NewResponseError(fmt.Errorf("%s\n%s", string(body), err), resp)
	}
	return runtime.NewResponseError(&errType, resp)
}

// UpdateSubscriptionLevelStateToResolve - Update the alert's state
// If the operation fails it returns the *CloudError error type.
func (client *AlertsClient) UpdateSubscriptionLevelStateToResolve(ctx context.Context, alertName string, options *AlertsUpdateSubscriptionLevelStateToResolveOptions) (AlertsUpdateSubscriptionLevelStateToResolveResponse, error) {
	req, err := client.updateSubscriptionLevelStateToResolveCreateRequest(ctx, alertName, options)
	if err != nil {
		return AlertsUpdateSubscriptionLevelStateToResolveResponse{}, err
	}
	resp, err := client.pl.Do(req)
	if err != nil {
		return AlertsUpdateSubscriptionLevelStateToResolveResponse{}, err
	}
	if !runtime.HasStatusCode(resp, http.StatusNoContent) {
		return AlertsUpdateSubscriptionLevelStateToResolveResponse{}, client.updateSubscriptionLevelStateToResolveHandleError(resp)
	}
	return AlertsUpdateSubscriptionLevelStateToResolveResponse{RawResponse: resp}, nil
}

// updateSubscriptionLevelStateToResolveCreateRequest creates the UpdateSubscriptionLevelStateToResolve request.
func (client *AlertsClient) updateSubscriptionLevelStateToResolveCreateRequest(ctx context.Context, alertName string, options *AlertsUpdateSubscriptionLevelStateToResolveOptions) (*policy.Request, error) {
	urlPath := "/subscriptions/{subscriptionId}/providers/Microsoft.Security/locations/{ascLocation}/alerts/{alertName}/resolve"
	if client.subscriptionID == "" {
		return nil, errors.New("parameter client.subscriptionID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{subscriptionId}", url.PathEscape(client.subscriptionID))
	if client.ascLocation == "" {
		return nil, errors.New("parameter client.ascLocation cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{ascLocation}", url.PathEscape(client.ascLocation))
	if alertName == "" {
		return nil, errors.New("parameter alertName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{alertName}", url.PathEscape(alertName))
	req, err := runtime.NewRequest(ctx, http.MethodPost, runtime.JoinPaths(client.ep, urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("api-version", "2021-01-01")
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header.Set("Accept", "application/json")
	return req, nil
}

// updateSubscriptionLevelStateToResolveHandleError handles the UpdateSubscriptionLevelStateToResolve error response.
func (client *AlertsClient) updateSubscriptionLevelStateToResolveHandleError(resp *http.Response) error {
	body, err := runtime.Payload(resp)
	if err != nil {
		return runtime.NewResponseError(err, resp)
	}
	errType := CloudError{raw: string(body)}
	if err := runtime.UnmarshalAsJSON(resp, &errType.InnerError); err != nil {
		return runtime.NewResponseError(fmt.Errorf("%s\n%s", string(body), err), resp)
	}
	return runtime.NewResponseError(&errType, resp)
}
