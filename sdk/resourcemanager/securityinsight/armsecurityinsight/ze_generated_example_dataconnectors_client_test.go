//go:build go1.16
// +build go1.16

// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

package armsecurityinsight_test

import (
	"context"
	"log"

	"github.com/Azure/azure-sdk-for-go/sdk/azcore/to"
	"github.com/Azure/azure-sdk-for-go/sdk/azidentity"
	"github.com/Azure/azure-sdk-for-go/sdk/resourcemanager/securityinsight/armsecurityinsight"
)

// x-ms-original-file: specification/securityinsights/resource-manager/Microsoft.SecurityInsights/stable/2020-01-01/examples/dataConnectors/GetDataConnectors.json
func ExampleDataConnectorsClient_List() {
	cred, err := azidentity.NewDefaultAzureCredential(nil)
	if err != nil {
		log.Fatalf("failed to obtain a credential: %v", err)
	}
	ctx := context.Background()
	client := armsecurityinsight.NewDataConnectorsClient("<subscription-id>", cred, nil)
	pager := client.List("<resource-group-name>",
		"<workspace-name>",
		nil)
	for pager.NextPage(ctx) {
		if err := pager.Err(); err != nil {
			log.Fatalf("failed to advance page: %v", err)
		}
		for _, v := range pager.PageResponse().Value {
			log.Printf("DataConnectorClassification.GetDataConnector().ID: %s\n", *v.GetDataConnector().ID)
		}
	}
}

// x-ms-original-file: specification/securityinsights/resource-manager/Microsoft.SecurityInsights/stable/2020-01-01/examples/dataConnectors/GetAzureSecurityCenterById.json
func ExampleDataConnectorsClient_Get() {
	cred, err := azidentity.NewDefaultAzureCredential(nil)
	if err != nil {
		log.Fatalf("failed to obtain a credential: %v", err)
	}
	ctx := context.Background()
	client := armsecurityinsight.NewDataConnectorsClient("<subscription-id>", cred, nil)
	res, err := client.Get(ctx,
		"<resource-group-name>",
		"<workspace-name>",
		"<data-connector-id>",
		nil)
	if err != nil {
		log.Fatal(err)
	}
	log.Printf("DataConnectorClassification.GetDataConnector().ID: %s\n", *res.GetDataConnector().ID)
}

// x-ms-original-file: specification/securityinsights/resource-manager/Microsoft.SecurityInsights/stable/2020-01-01/examples/dataConnectors/CreateOfficeDataConnetor.json
func ExampleDataConnectorsClient_CreateOrUpdate() {
	cred, err := azidentity.NewDefaultAzureCredential(nil)
	if err != nil {
		log.Fatalf("failed to obtain a credential: %v", err)
	}
	ctx := context.Background()
	client := armsecurityinsight.NewDataConnectorsClient("<subscription-id>", cred, nil)
	res, err := client.CreateOrUpdate(ctx,
		"<resource-group-name>",
		"<workspace-name>",
		"<data-connector-id>",
		&armsecurityinsight.OfficeDataConnector{
			DataConnector: armsecurityinsight.DataConnector{
				ResourceWithEtag: armsecurityinsight.ResourceWithEtag{
					Etag: to.StringPtr("<etag>"),
				},
				Kind: armsecurityinsight.DataConnectorKindOffice365.ToPtr(),
			},
			Properties: &armsecurityinsight.OfficeDataConnectorProperties{
				DataTypes: &armsecurityinsight.OfficeDataConnectorDataTypes{
					Exchange: &armsecurityinsight.OfficeDataConnectorDataTypesExchange{
						DataConnectorDataTypeCommon: armsecurityinsight.DataConnectorDataTypeCommon{
							State: armsecurityinsight.DataTypeStateEnabled.ToPtr(),
						},
					},
					SharePoint: &armsecurityinsight.OfficeDataConnectorDataTypesSharePoint{
						DataConnectorDataTypeCommon: armsecurityinsight.DataConnectorDataTypeCommon{
							State: armsecurityinsight.DataTypeStateEnabled.ToPtr(),
						},
					},
					Teams: &armsecurityinsight.OfficeDataConnectorDataTypesTeams{
						DataConnectorDataTypeCommon: armsecurityinsight.DataConnectorDataTypeCommon{
							State: armsecurityinsight.DataTypeStateEnabled.ToPtr(),
						},
					},
				},
				TenantID: to.StringPtr("<tenant-id>"),
			},
		},
		nil)
	if err != nil {
		log.Fatal(err)
	}
	log.Printf("DataConnectorClassification.GetDataConnector().ID: %s\n", *res.GetDataConnector().ID)
}

// x-ms-original-file: specification/securityinsights/resource-manager/Microsoft.SecurityInsights/stable/2020-01-01/examples/dataConnectors/DeleteOfficeDataConnetor.json
func ExampleDataConnectorsClient_Delete() {
	cred, err := azidentity.NewDefaultAzureCredential(nil)
	if err != nil {
		log.Fatalf("failed to obtain a credential: %v", err)
	}
	ctx := context.Background()
	client := armsecurityinsight.NewDataConnectorsClient("<subscription-id>", cred, nil)
	_, err = client.Delete(ctx,
		"<resource-group-name>",
		"<workspace-name>",
		"<data-connector-id>",
		nil)
	if err != nil {
		log.Fatal(err)
	}
}
