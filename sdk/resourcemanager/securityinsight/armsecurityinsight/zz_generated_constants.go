//go:build go1.16
// +build go1.16

// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

package armsecurityinsight

const (
	module  = "armsecurityinsight"
	version = "v0.1.0"
)

// AlertRuleKind - The kind of the alert rule
type AlertRuleKind string

const (
	AlertRuleKindFusion                            AlertRuleKind = "Fusion"
	AlertRuleKindMicrosoftSecurityIncidentCreation AlertRuleKind = "MicrosoftSecurityIncidentCreation"
	AlertRuleKindScheduled                         AlertRuleKind = "Scheduled"
)

// PossibleAlertRuleKindValues returns the possible values for the AlertRuleKind const type.
func PossibleAlertRuleKindValues() []AlertRuleKind {
	return []AlertRuleKind{
		AlertRuleKindFusion,
		AlertRuleKindMicrosoftSecurityIncidentCreation,
		AlertRuleKindScheduled,
	}
}

// ToPtr returns a *AlertRuleKind pointing to the current value.
func (c AlertRuleKind) ToPtr() *AlertRuleKind {
	return &c
}

// AlertSeverity - The severity of the alert
type AlertSeverity string

const (
	// AlertSeverityHigh - High severity
	AlertSeverityHigh AlertSeverity = "High"
	// AlertSeverityInformational - Informational severity
	AlertSeverityInformational AlertSeverity = "Informational"
	// AlertSeverityLow - Low severity
	AlertSeverityLow AlertSeverity = "Low"
	// AlertSeverityMedium - Medium severity
	AlertSeverityMedium AlertSeverity = "Medium"
)

// PossibleAlertSeverityValues returns the possible values for the AlertSeverity const type.
func PossibleAlertSeverityValues() []AlertSeverity {
	return []AlertSeverity{
		AlertSeverityHigh,
		AlertSeverityInformational,
		AlertSeverityLow,
		AlertSeverityMedium,
	}
}

// ToPtr returns a *AlertSeverity pointing to the current value.
func (c AlertSeverity) ToPtr() *AlertSeverity {
	return &c
}

// AttackTactic - The severity for alerts created by this alert rule.
type AttackTactic string

const (
	AttackTacticCollection          AttackTactic = "Collection"
	AttackTacticCommandAndControl   AttackTactic = "CommandAndControl"
	AttackTacticCredentialAccess    AttackTactic = "CredentialAccess"
	AttackTacticDefenseEvasion      AttackTactic = "DefenseEvasion"
	AttackTacticDiscovery           AttackTactic = "Discovery"
	AttackTacticExecution           AttackTactic = "Execution"
	AttackTacticExfiltration        AttackTactic = "Exfiltration"
	AttackTacticImpact              AttackTactic = "Impact"
	AttackTacticInitialAccess       AttackTactic = "InitialAccess"
	AttackTacticLateralMovement     AttackTactic = "LateralMovement"
	AttackTacticPersistence         AttackTactic = "Persistence"
	AttackTacticPrivilegeEscalation AttackTactic = "PrivilegeEscalation"
)

// PossibleAttackTacticValues returns the possible values for the AttackTactic const type.
func PossibleAttackTacticValues() []AttackTactic {
	return []AttackTactic{
		AttackTacticCollection,
		AttackTacticCommandAndControl,
		AttackTacticCredentialAccess,
		AttackTacticDefenseEvasion,
		AttackTacticDiscovery,
		AttackTacticExecution,
		AttackTacticExfiltration,
		AttackTacticImpact,
		AttackTacticInitialAccess,
		AttackTacticLateralMovement,
		AttackTacticPersistence,
		AttackTacticPrivilegeEscalation,
	}
}

// ToPtr returns a *AttackTactic pointing to the current value.
func (c AttackTactic) ToPtr() *AttackTactic {
	return &c
}

// DataConnectorKind - The kind of the data connector
type DataConnectorKind string

const (
	DataConnectorKindAmazonWebServicesCloudTrail               DataConnectorKind = "AmazonWebServicesCloudTrail"
	DataConnectorKindAzureActiveDirectory                      DataConnectorKind = "AzureActiveDirectory"
	DataConnectorKindAzureAdvancedThreatProtection             DataConnectorKind = "AzureAdvancedThreatProtection"
	DataConnectorKindAzureSecurityCenter                       DataConnectorKind = "AzureSecurityCenter"
	DataConnectorKindMicrosoftCloudAppSecurity                 DataConnectorKind = "MicrosoftCloudAppSecurity"
	DataConnectorKindMicrosoftDefenderAdvancedThreatProtection DataConnectorKind = "MicrosoftDefenderAdvancedThreatProtection"
	DataConnectorKindOffice365                                 DataConnectorKind = "Office365"
	DataConnectorKindThreatIntelligence                        DataConnectorKind = "ThreatIntelligence"
)

// PossibleDataConnectorKindValues returns the possible values for the DataConnectorKind const type.
func PossibleDataConnectorKindValues() []DataConnectorKind {
	return []DataConnectorKind{
		DataConnectorKindAmazonWebServicesCloudTrail,
		DataConnectorKindAzureActiveDirectory,
		DataConnectorKindAzureAdvancedThreatProtection,
		DataConnectorKindAzureSecurityCenter,
		DataConnectorKindMicrosoftCloudAppSecurity,
		DataConnectorKindMicrosoftDefenderAdvancedThreatProtection,
		DataConnectorKindOffice365,
		DataConnectorKindThreatIntelligence,
	}
}

// ToPtr returns a *DataConnectorKind pointing to the current value.
func (c DataConnectorKind) ToPtr() *DataConnectorKind {
	return &c
}

// DataTypeState - Describe whether this data type connection is enabled or not.
type DataTypeState string

const (
	DataTypeStateDisabled DataTypeState = "Disabled"
	DataTypeStateEnabled  DataTypeState = "Enabled"
)

// PossibleDataTypeStateValues returns the possible values for the DataTypeState const type.
func PossibleDataTypeStateValues() []DataTypeState {
	return []DataTypeState{
		DataTypeStateDisabled,
		DataTypeStateEnabled,
	}
}

// ToPtr returns a *DataTypeState pointing to the current value.
func (c DataTypeState) ToPtr() *DataTypeState {
	return &c
}

// IncidentClassification - The reason the incident was closed
type IncidentClassification string

const (
	// IncidentClassificationBenignPositive - Incident was benign positive
	IncidentClassificationBenignPositive IncidentClassification = "BenignPositive"
	// IncidentClassificationFalsePositive - Incident was false positive
	IncidentClassificationFalsePositive IncidentClassification = "FalsePositive"
	// IncidentClassificationTruePositive - Incident was true positive
	IncidentClassificationTruePositive IncidentClassification = "TruePositive"
	// IncidentClassificationUndetermined - Incident classification was undetermined
	IncidentClassificationUndetermined IncidentClassification = "Undetermined"
)

// PossibleIncidentClassificationValues returns the possible values for the IncidentClassification const type.
func PossibleIncidentClassificationValues() []IncidentClassification {
	return []IncidentClassification{
		IncidentClassificationBenignPositive,
		IncidentClassificationFalsePositive,
		IncidentClassificationTruePositive,
		IncidentClassificationUndetermined,
	}
}

// ToPtr returns a *IncidentClassification pointing to the current value.
func (c IncidentClassification) ToPtr() *IncidentClassification {
	return &c
}

// IncidentClassificationReason - The classification reason the incident was closed with
type IncidentClassificationReason string

const (
	// IncidentClassificationReasonInaccurateData - Classification reason was inaccurate data
	IncidentClassificationReasonInaccurateData IncidentClassificationReason = "InaccurateData"
	// IncidentClassificationReasonIncorrectAlertLogic - Classification reason was incorrect alert logic
	IncidentClassificationReasonIncorrectAlertLogic IncidentClassificationReason = "IncorrectAlertLogic"
	// IncidentClassificationReasonSuspiciousActivity - Classification reason was suspicious activity
	IncidentClassificationReasonSuspiciousActivity IncidentClassificationReason = "SuspiciousActivity"
	// IncidentClassificationReasonSuspiciousButExpected - Classification reason was suspicious but expected
	IncidentClassificationReasonSuspiciousButExpected IncidentClassificationReason = "SuspiciousButExpected"
)

// PossibleIncidentClassificationReasonValues returns the possible values for the IncidentClassificationReason const type.
func PossibleIncidentClassificationReasonValues() []IncidentClassificationReason {
	return []IncidentClassificationReason{
		IncidentClassificationReasonInaccurateData,
		IncidentClassificationReasonIncorrectAlertLogic,
		IncidentClassificationReasonSuspiciousActivity,
		IncidentClassificationReasonSuspiciousButExpected,
	}
}

// ToPtr returns a *IncidentClassificationReason pointing to the current value.
func (c IncidentClassificationReason) ToPtr() *IncidentClassificationReason {
	return &c
}

// IncidentLabelType - The type of the label
type IncidentLabelType string

const (
	// IncidentLabelTypeSystem - Label automatically created by the system
	IncidentLabelTypeSystem IncidentLabelType = "System"
	// IncidentLabelTypeUser - Label manually created by a user
	IncidentLabelTypeUser IncidentLabelType = "User"
)

// PossibleIncidentLabelTypeValues returns the possible values for the IncidentLabelType const type.
func PossibleIncidentLabelTypeValues() []IncidentLabelType {
	return []IncidentLabelType{
		IncidentLabelTypeSystem,
		IncidentLabelTypeUser,
	}
}

// ToPtr returns a *IncidentLabelType pointing to the current value.
func (c IncidentLabelType) ToPtr() *IncidentLabelType {
	return &c
}

// IncidentSeverity - The severity of the incident
type IncidentSeverity string

const (
	// IncidentSeverityHigh - High severity
	IncidentSeverityHigh IncidentSeverity = "High"
	// IncidentSeverityInformational - Informational severity
	IncidentSeverityInformational IncidentSeverity = "Informational"
	// IncidentSeverityLow - Low severity
	IncidentSeverityLow IncidentSeverity = "Low"
	// IncidentSeverityMedium - Medium severity
	IncidentSeverityMedium IncidentSeverity = "Medium"
)

// PossibleIncidentSeverityValues returns the possible values for the IncidentSeverity const type.
func PossibleIncidentSeverityValues() []IncidentSeverity {
	return []IncidentSeverity{
		IncidentSeverityHigh,
		IncidentSeverityInformational,
		IncidentSeverityLow,
		IncidentSeverityMedium,
	}
}

// ToPtr returns a *IncidentSeverity pointing to the current value.
func (c IncidentSeverity) ToPtr() *IncidentSeverity {
	return &c
}

// IncidentStatus - The status of the incident
type IncidentStatus string

const (
	// IncidentStatusActive - An active incident which is being handled
	IncidentStatusActive IncidentStatus = "Active"
	// IncidentStatusClosed - A non-active incident
	IncidentStatusClosed IncidentStatus = "Closed"
	// IncidentStatusNew - An active incident which isn't being handled currently
	IncidentStatusNew IncidentStatus = "New"
)

// PossibleIncidentStatusValues returns the possible values for the IncidentStatus const type.
func PossibleIncidentStatusValues() []IncidentStatus {
	return []IncidentStatus{
		IncidentStatusActive,
		IncidentStatusClosed,
		IncidentStatusNew,
	}
}

// ToPtr returns a *IncidentStatus pointing to the current value.
func (c IncidentStatus) ToPtr() *IncidentStatus {
	return &c
}

// MicrosoftSecurityProductName - The alerts' productName on which the cases will be generated
type MicrosoftSecurityProductName string

const (
	MicrosoftSecurityProductNameAzureActiveDirectoryIdentityProtection MicrosoftSecurityProductName = "Azure Active Directory Identity Protection"
	MicrosoftSecurityProductNameAzureAdvancedThreatProtection          MicrosoftSecurityProductName = "Azure Advanced Threat Protection"
	MicrosoftSecurityProductNameAzureSecurityCenter                    MicrosoftSecurityProductName = "Azure Security Center"
	MicrosoftSecurityProductNameAzureSecurityCenterForIoT              MicrosoftSecurityProductName = "Azure Security Center for IoT"
	MicrosoftSecurityProductNameMicrosoftCloudAppSecurity              MicrosoftSecurityProductName = "Microsoft Cloud App Security"
)

// PossibleMicrosoftSecurityProductNameValues returns the possible values for the MicrosoftSecurityProductName const type.
func PossibleMicrosoftSecurityProductNameValues() []MicrosoftSecurityProductName {
	return []MicrosoftSecurityProductName{
		MicrosoftSecurityProductNameAzureActiveDirectoryIdentityProtection,
		MicrosoftSecurityProductNameAzureAdvancedThreatProtection,
		MicrosoftSecurityProductNameAzureSecurityCenter,
		MicrosoftSecurityProductNameAzureSecurityCenterForIoT,
		MicrosoftSecurityProductNameMicrosoftCloudAppSecurity,
	}
}

// ToPtr returns a *MicrosoftSecurityProductName pointing to the current value.
func (c MicrosoftSecurityProductName) ToPtr() *MicrosoftSecurityProductName {
	return &c
}

// TemplateStatus - The alert rule template status.
type TemplateStatus string

const (
	// TemplateStatusAvailable - Alert rule template is available.
	TemplateStatusAvailable TemplateStatus = "Available"
	// TemplateStatusInstalled - Alert rule template installed. and can not use more then once
	TemplateStatusInstalled TemplateStatus = "Installed"
	// TemplateStatusNotAvailable - Alert rule template is not available
	TemplateStatusNotAvailable TemplateStatus = "NotAvailable"
)

// PossibleTemplateStatusValues returns the possible values for the TemplateStatus const type.
func PossibleTemplateStatusValues() []TemplateStatus {
	return []TemplateStatus{
		TemplateStatusAvailable,
		TemplateStatusInstalled,
		TemplateStatusNotAvailable,
	}
}

// ToPtr returns a *TemplateStatus pointing to the current value.
func (c TemplateStatus) ToPtr() *TemplateStatus {
	return &c
}

// TriggerOperator - The operation against the threshold that triggers alert rule.
type TriggerOperator string

const (
	TriggerOperatorGreaterThan TriggerOperator = "GreaterThan"
	TriggerOperatorLessThan    TriggerOperator = "LessThan"
	TriggerOperatorEqual       TriggerOperator = "Equal"
	TriggerOperatorNotEqual    TriggerOperator = "NotEqual"
)

// PossibleTriggerOperatorValues returns the possible values for the TriggerOperator const type.
func PossibleTriggerOperatorValues() []TriggerOperator {
	return []TriggerOperator{
		TriggerOperatorGreaterThan,
		TriggerOperatorLessThan,
		TriggerOperatorEqual,
		TriggerOperatorNotEqual,
	}
}

// ToPtr returns a *TriggerOperator pointing to the current value.
func (c TriggerOperator) ToPtr() *TriggerOperator {
	return &c
}
