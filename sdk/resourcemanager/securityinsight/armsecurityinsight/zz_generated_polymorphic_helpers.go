//go:build go1.16
// +build go1.16

// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

package armsecurityinsight

import "encoding/json"

func unmarshalAlertRuleClassification(rawMsg json.RawMessage) (AlertRuleClassification, error) {
	if rawMsg == nil {
		return nil, nil
	}
	var m map[string]interface{}
	if err := json.Unmarshal(rawMsg, &m); err != nil {
		return nil, err
	}
	var b AlertRuleClassification
	switch m["kind"] {
	case string(AlertRuleKindFusion):
		b = &FusionAlertRule{}
	case string(AlertRuleKindMicrosoftSecurityIncidentCreation):
		b = &MicrosoftSecurityIncidentCreationAlertRule{}
	case string(AlertRuleKindScheduled):
		b = &ScheduledAlertRule{}
	default:
		b = &AlertRule{}
	}
	return b, json.Unmarshal(rawMsg, b)
}

func unmarshalAlertRuleClassificationArray(rawMsg json.RawMessage) ([]AlertRuleClassification, error) {
	if rawMsg == nil {
		return nil, nil
	}
	var rawMessages []json.RawMessage
	if err := json.Unmarshal(rawMsg, &rawMessages); err != nil {
		return nil, err
	}
	fArray := make([]AlertRuleClassification, len(rawMessages))
	for index, rawMessage := range rawMessages {
		f, err := unmarshalAlertRuleClassification(rawMessage)
		if err != nil {
			return nil, err
		}
		fArray[index] = f
	}
	return fArray, nil
}

func unmarshalAlertRuleClassificationMap(rawMsg json.RawMessage) (map[string]AlertRuleClassification, error) {
	if rawMsg == nil {
		return nil, nil
	}
	var rawMessages map[string]json.RawMessage
	if err := json.Unmarshal(rawMsg, &rawMessages); err != nil {
		return nil, err
	}
	fMap := make(map[string]AlertRuleClassification, len(rawMessages))
	for key, rawMessage := range rawMessages {
		f, err := unmarshalAlertRuleClassification(rawMessage)
		if err != nil {
			return nil, err
		}
		fMap[key] = f
	}
	return fMap, nil
}

func unmarshalAlertRuleTemplateClassification(rawMsg json.RawMessage) (AlertRuleTemplateClassification, error) {
	if rawMsg == nil {
		return nil, nil
	}
	var m map[string]interface{}
	if err := json.Unmarshal(rawMsg, &m); err != nil {
		return nil, err
	}
	var b AlertRuleTemplateClassification
	switch m["kind"] {
	case string(AlertRuleKindFusion):
		b = &FusionAlertRuleTemplate{}
	case string(AlertRuleKindMicrosoftSecurityIncidentCreation):
		b = &MicrosoftSecurityIncidentCreationAlertRuleTemplate{}
	case string(AlertRuleKindScheduled):
		b = &ScheduledAlertRuleTemplate{}
	default:
		b = &AlertRuleTemplate{}
	}
	return b, json.Unmarshal(rawMsg, b)
}

func unmarshalAlertRuleTemplateClassificationArray(rawMsg json.RawMessage) ([]AlertRuleTemplateClassification, error) {
	if rawMsg == nil {
		return nil, nil
	}
	var rawMessages []json.RawMessage
	if err := json.Unmarshal(rawMsg, &rawMessages); err != nil {
		return nil, err
	}
	fArray := make([]AlertRuleTemplateClassification, len(rawMessages))
	for index, rawMessage := range rawMessages {
		f, err := unmarshalAlertRuleTemplateClassification(rawMessage)
		if err != nil {
			return nil, err
		}
		fArray[index] = f
	}
	return fArray, nil
}

func unmarshalAlertRuleTemplateClassificationMap(rawMsg json.RawMessage) (map[string]AlertRuleTemplateClassification, error) {
	if rawMsg == nil {
		return nil, nil
	}
	var rawMessages map[string]json.RawMessage
	if err := json.Unmarshal(rawMsg, &rawMessages); err != nil {
		return nil, err
	}
	fMap := make(map[string]AlertRuleTemplateClassification, len(rawMessages))
	for key, rawMessage := range rawMessages {
		f, err := unmarshalAlertRuleTemplateClassification(rawMessage)
		if err != nil {
			return nil, err
		}
		fMap[key] = f
	}
	return fMap, nil
}

func unmarshalDataConnectorClassification(rawMsg json.RawMessage) (DataConnectorClassification, error) {
	if rawMsg == nil {
		return nil, nil
	}
	var m map[string]interface{}
	if err := json.Unmarshal(rawMsg, &m); err != nil {
		return nil, err
	}
	var b DataConnectorClassification
	switch m["kind"] {
	case string(DataConnectorKindAmazonWebServicesCloudTrail):
		b = &AwsCloudTrailDataConnector{}
	case string(DataConnectorKindAzureActiveDirectory):
		b = &AADDataConnector{}
	case string(DataConnectorKindAzureAdvancedThreatProtection):
		b = &AATPDataConnector{}
	case string(DataConnectorKindAzureSecurityCenter):
		b = &ASCDataConnector{}
	case string(DataConnectorKindMicrosoftCloudAppSecurity):
		b = &MCASDataConnector{}
	case string(DataConnectorKindMicrosoftDefenderAdvancedThreatProtection):
		b = &MDATPDataConnector{}
	case string(DataConnectorKindOffice365):
		b = &OfficeDataConnector{}
	case string(DataConnectorKindThreatIntelligence):
		b = &TIDataConnector{}
	default:
		b = &DataConnector{}
	}
	return b, json.Unmarshal(rawMsg, b)
}

func unmarshalDataConnectorClassificationArray(rawMsg json.RawMessage) ([]DataConnectorClassification, error) {
	if rawMsg == nil {
		return nil, nil
	}
	var rawMessages []json.RawMessage
	if err := json.Unmarshal(rawMsg, &rawMessages); err != nil {
		return nil, err
	}
	fArray := make([]DataConnectorClassification, len(rawMessages))
	for index, rawMessage := range rawMessages {
		f, err := unmarshalDataConnectorClassification(rawMessage)
		if err != nil {
			return nil, err
		}
		fArray[index] = f
	}
	return fArray, nil
}

func unmarshalDataConnectorClassificationMap(rawMsg json.RawMessage) (map[string]DataConnectorClassification, error) {
	if rawMsg == nil {
		return nil, nil
	}
	var rawMessages map[string]json.RawMessage
	if err := json.Unmarshal(rawMsg, &rawMessages); err != nil {
		return nil, err
	}
	fMap := make(map[string]DataConnectorClassification, len(rawMessages))
	for key, rawMessage := range rawMessages {
		f, err := unmarshalDataConnectorClassification(rawMessage)
		if err != nil {
			return nil, err
		}
		fMap[key] = f
	}
	return fMap, nil
}
