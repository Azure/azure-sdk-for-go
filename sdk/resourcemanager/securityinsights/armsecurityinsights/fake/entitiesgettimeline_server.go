//go:build go1.18
// +build go1.18

// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator. DO NOT EDIT.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

package fake

import (
	"context"
	"errors"
	"fmt"
	azfake "github.com/Azure/azure-sdk-for-go/sdk/azcore/fake"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/fake/server"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/runtime"
	"github.com/Azure/azure-sdk-for-go/sdk/resourcemanager/securityinsights/armsecurityinsights/v2"
	"net/http"
	"net/url"
	"regexp"
)

// EntitiesGetTimelineServer is a fake server for instances of the armsecurityinsights.EntitiesGetTimelineClient type.
type EntitiesGetTimelineServer struct {
	// List is the fake for method EntitiesGetTimelineClient.List
	// HTTP status codes to indicate success: http.StatusOK
	List func(ctx context.Context, resourceGroupName string, workspaceName string, entityID string, parameters armsecurityinsights.EntityTimelineParameters, options *armsecurityinsights.EntitiesGetTimelineClientListOptions) (resp azfake.Responder[armsecurityinsights.EntitiesGetTimelineClientListResponse], errResp azfake.ErrorResponder)
}

// NewEntitiesGetTimelineServerTransport creates a new instance of EntitiesGetTimelineServerTransport with the provided implementation.
// The returned EntitiesGetTimelineServerTransport instance is connected to an instance of armsecurityinsights.EntitiesGetTimelineClient via the
// azcore.ClientOptions.Transporter field in the client's constructor parameters.
func NewEntitiesGetTimelineServerTransport(srv *EntitiesGetTimelineServer) *EntitiesGetTimelineServerTransport {
	return &EntitiesGetTimelineServerTransport{srv: srv}
}

// EntitiesGetTimelineServerTransport connects instances of armsecurityinsights.EntitiesGetTimelineClient to instances of EntitiesGetTimelineServer.
// Don't use this type directly, use NewEntitiesGetTimelineServerTransport instead.
type EntitiesGetTimelineServerTransport struct {
	srv *EntitiesGetTimelineServer
}

// Do implements the policy.Transporter interface for EntitiesGetTimelineServerTransport.
func (e *EntitiesGetTimelineServerTransport) Do(req *http.Request) (*http.Response, error) {
	rawMethod := req.Context().Value(runtime.CtxAPINameKey{})
	method, ok := rawMethod.(string)
	if !ok {
		return nil, nonRetriableError{errors.New("unable to dispatch request, missing value for CtxAPINameKey")}
	}

	var resp *http.Response
	var err error

	switch method {
	case "EntitiesGetTimelineClient.List":
		resp, err = e.dispatchList(req)
	default:
		err = fmt.Errorf("unhandled API %s", method)
	}

	if err != nil {
		return nil, err
	}

	return resp, nil
}

func (e *EntitiesGetTimelineServerTransport) dispatchList(req *http.Request) (*http.Response, error) {
	if e.srv.List == nil {
		return nil, &nonRetriableError{errors.New("fake for method List not implemented")}
	}
	const regexStr = `/subscriptions/(?P<subscriptionId>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/resourceGroups/(?P<resourceGroupName>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/providers/Microsoft\.OperationalInsights/workspaces/(?P<workspaceName>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/providers/Microsoft\.SecurityInsights/entities/(?P<entityId>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/getTimeline`
	regex := regexp.MustCompile(regexStr)
	matches := regex.FindStringSubmatch(req.URL.EscapedPath())
	if matches == nil || len(matches) < 4 {
		return nil, fmt.Errorf("failed to parse path %s", req.URL.Path)
	}
	body, err := server.UnmarshalRequestAsJSON[armsecurityinsights.EntityTimelineParameters](req)
	if err != nil {
		return nil, err
	}
	resourceGroupNameParam, err := url.PathUnescape(matches[regex.SubexpIndex("resourceGroupName")])
	if err != nil {
		return nil, err
	}
	workspaceNameParam, err := url.PathUnescape(matches[regex.SubexpIndex("workspaceName")])
	if err != nil {
		return nil, err
	}
	entityIDParam, err := url.PathUnescape(matches[regex.SubexpIndex("entityId")])
	if err != nil {
		return nil, err
	}
	respr, errRespr := e.srv.List(req.Context(), resourceGroupNameParam, workspaceNameParam, entityIDParam, body, nil)
	if respErr := server.GetError(errRespr, req); respErr != nil {
		return nil, respErr
	}
	respContent := server.GetResponseContent(respr)
	if !contains([]int{http.StatusOK}, respContent.HTTPStatus) {
		return nil, &nonRetriableError{fmt.Errorf("unexpected status code %d. acceptable values are http.StatusOK", respContent.HTTPStatus)}
	}
	resp, err := server.MarshalResponseAsJSON(respContent, server.GetResponse(respr).EntityTimelineResponse, req)
	if err != nil {
		return nil, err
	}
	return resp, nil
}
