//go:build go1.18
// +build go1.18

// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.
// DO NOT EDIT.

package armselfhelp

import (
	"context"
	"errors"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/arm"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/policy"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/runtime"
	"net/http"
	"net/url"
	"strings"
)

// DiagnosticsClient contains the methods for the Diagnostics group.
// Don't use this type directly, use NewDiagnosticsClient() instead.
type DiagnosticsClient struct {
	internal                *arm.Client
	scope                   string
	diagnosticsResourceName string
}

// NewDiagnosticsClient creates a new instance of DiagnosticsClient with the specified values.
//   - scope - This is an extension resource provider and only resource level extension is supported at the moment.
//   - diagnosticsResourceName - Unique resource name for insight resources
//   - credential - used to authorize requests. Usually a credential from azidentity.
//   - options - pass nil to accept the default values.
func NewDiagnosticsClient(scope string, diagnosticsResourceName string, credential azcore.TokenCredential, options *arm.ClientOptions) (*DiagnosticsClient, error) {
	cl, err := arm.NewClient(moduleName+".DiagnosticsClient", moduleVersion, credential, options)
	if err != nil {
		return nil, err
	}
	client := &DiagnosticsClient{
		scope:                   scope,
		diagnosticsResourceName: diagnosticsResourceName,
		internal:                cl,
	}
	return client, nil
}

// CheckNameAvailability - This API is used to check the uniqueness of a resource name used for a diagnostic check.
// If the operation fails it returns an *azcore.ResponseError type.
//
// Generated from API version 2023-01-01-preview
//   - options - DiagnosticsClientCheckNameAvailabilityOptions contains the optional parameters for the DiagnosticsClient.CheckNameAvailability
//     method.
func (client *DiagnosticsClient) CheckNameAvailability(ctx context.Context, options *DiagnosticsClientCheckNameAvailabilityOptions) (DiagnosticsClientCheckNameAvailabilityResponse, error) {
	req, err := client.checkNameAvailabilityCreateRequest(ctx, options)
	if err != nil {
		return DiagnosticsClientCheckNameAvailabilityResponse{}, err
	}
	resp, err := client.internal.Pipeline().Do(req)
	if err != nil {
		return DiagnosticsClientCheckNameAvailabilityResponse{}, err
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {
		return DiagnosticsClientCheckNameAvailabilityResponse{}, runtime.NewResponseError(resp)
	}
	return client.checkNameAvailabilityHandleResponse(resp)
}

// checkNameAvailabilityCreateRequest creates the CheckNameAvailability request.
func (client *DiagnosticsClient) checkNameAvailabilityCreateRequest(ctx context.Context, options *DiagnosticsClientCheckNameAvailabilityOptions) (*policy.Request, error) {
	urlPath := "/{scope}/providers/Microsoft.Help/checkNameAvailability"
	urlPath = strings.ReplaceAll(urlPath, "{scope}", client.scope)
	req, err := runtime.NewRequest(ctx, http.MethodPost, runtime.JoinPaths(client.internal.Endpoint(), urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("api-version", "2023-01-01-preview")
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header["Accept"] = []string{"application/json"}
	if options != nil && options.CheckNameAvailabilityRequest != nil {
		return req, runtime.MarshalAsJSON(req, *options.CheckNameAvailabilityRequest)
	}
	return req, nil
}

// checkNameAvailabilityHandleResponse handles the CheckNameAvailability response.
func (client *DiagnosticsClient) checkNameAvailabilityHandleResponse(resp *http.Response) (DiagnosticsClientCheckNameAvailabilityResponse, error) {
	result := DiagnosticsClientCheckNameAvailabilityResponse{}
	if err := runtime.UnmarshalAsJSON(resp, &result.CheckNameAvailabilityResponse); err != nil {
		return DiagnosticsClientCheckNameAvailabilityResponse{}, err
	}
	return result, nil
}

// BeginCreate - Diagnostics tells you precisely the root cause of the issue and how to address it. You can get diagnostics
// once you discover and identify the relevant solution for your Azure issue.
// You can create diagnostics using the ‘solutionId’ from Solution Discovery API response and ‘additionalParameters’
// Note: ‘requiredParameterSets’ from Solutions Discovery API response must be passed via ‘additionalParameters’ as an input
// to Diagnostics API
// If the operation fails it returns an *azcore.ResponseError type.
//
// Generated from API version 2023-01-01-preview
//   - diagnosticResourceRequest - The required request body for this insightResource invocation.
//   - options - DiagnosticsClientBeginCreateOptions contains the optional parameters for the DiagnosticsClient.BeginCreate method.
func (client *DiagnosticsClient) BeginCreate(ctx context.Context, diagnosticResourceRequest DiagnosticResource, options *DiagnosticsClientBeginCreateOptions) (*runtime.Poller[DiagnosticsClientCreateResponse], error) {
	if options == nil || options.ResumeToken == "" {
		resp, err := client.create(ctx, diagnosticResourceRequest, options)
		if err != nil {
			return nil, err
		}
		return runtime.NewPoller(resp, client.internal.Pipeline(), &runtime.NewPollerOptions[DiagnosticsClientCreateResponse]{
			FinalStateVia: runtime.FinalStateViaAzureAsyncOp,
		})
	} else {
		return runtime.NewPollerFromResumeToken[DiagnosticsClientCreateResponse](options.ResumeToken, client.internal.Pipeline(), nil)
	}
}

// Create - Diagnostics tells you precisely the root cause of the issue and how to address it. You can get diagnostics once
// you discover and identify the relevant solution for your Azure issue.
// You can create diagnostics using the ‘solutionId’ from Solution Discovery API response and ‘additionalParameters’
// Note: ‘requiredParameterSets’ from Solutions Discovery API response must be passed via ‘additionalParameters’ as an input
// to Diagnostics API
// If the operation fails it returns an *azcore.ResponseError type.
//
// Generated from API version 2023-01-01-preview
func (client *DiagnosticsClient) create(ctx context.Context, diagnosticResourceRequest DiagnosticResource, options *DiagnosticsClientBeginCreateOptions) (*http.Response, error) {
	req, err := client.createCreateRequest(ctx, diagnosticResourceRequest, options)
	if err != nil {
		return nil, err
	}
	resp, err := client.internal.Pipeline().Do(req)
	if err != nil {
		return nil, err
	}
	if !runtime.HasStatusCode(resp, http.StatusCreated) {
		return nil, runtime.NewResponseError(resp)
	}
	return resp, nil
}

// createCreateRequest creates the Create request.
func (client *DiagnosticsClient) createCreateRequest(ctx context.Context, diagnosticResourceRequest DiagnosticResource, options *DiagnosticsClientBeginCreateOptions) (*policy.Request, error) {
	urlPath := "/{scope}/providers/Microsoft.Help/diagnostics/{diagnosticsResourceName}"
	urlPath = strings.ReplaceAll(urlPath, "{scope}", client.scope)
	if client.diagnosticsResourceName == "" {
		return nil, errors.New("parameter client.diagnosticsResourceName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{diagnosticsResourceName}", url.PathEscape(client.diagnosticsResourceName))
	req, err := runtime.NewRequest(ctx, http.MethodPut, runtime.JoinPaths(client.internal.Endpoint(), urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("api-version", "2023-01-01-preview")
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header["Accept"] = []string{"application/json"}
	return req, runtime.MarshalAsJSON(req, diagnosticResourceRequest)
}

// Get - Get the diagnostics using the 'diagnosticsResourceName' you chose while creating the diagnostic.
// If the operation fails it returns an *azcore.ResponseError type.
//
// Generated from API version 2023-01-01-preview
//   - options - DiagnosticsClientGetOptions contains the optional parameters for the DiagnosticsClient.Get method.
func (client *DiagnosticsClient) Get(ctx context.Context, options *DiagnosticsClientGetOptions) (DiagnosticsClientGetResponse, error) {
	req, err := client.getCreateRequest(ctx, options)
	if err != nil {
		return DiagnosticsClientGetResponse{}, err
	}
	resp, err := client.internal.Pipeline().Do(req)
	if err != nil {
		return DiagnosticsClientGetResponse{}, err
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {
		return DiagnosticsClientGetResponse{}, runtime.NewResponseError(resp)
	}
	return client.getHandleResponse(resp)
}

// getCreateRequest creates the Get request.
func (client *DiagnosticsClient) getCreateRequest(ctx context.Context, options *DiagnosticsClientGetOptions) (*policy.Request, error) {
	urlPath := "/{scope}/providers/Microsoft.Help/diagnostics/{diagnosticsResourceName}"
	urlPath = strings.ReplaceAll(urlPath, "{scope}", client.scope)
	if client.diagnosticsResourceName == "" {
		return nil, errors.New("parameter client.diagnosticsResourceName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{diagnosticsResourceName}", url.PathEscape(client.diagnosticsResourceName))
	req, err := runtime.NewRequest(ctx, http.MethodGet, runtime.JoinPaths(client.internal.Endpoint(), urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("api-version", "2023-01-01-preview")
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header["Accept"] = []string{"application/json"}
	return req, nil
}

// getHandleResponse handles the Get response.
func (client *DiagnosticsClient) getHandleResponse(resp *http.Response) (DiagnosticsClientGetResponse, error) {
	result := DiagnosticsClientGetResponse{}
	if err := runtime.UnmarshalAsJSON(resp, &result.DiagnosticResource); err != nil {
		return DiagnosticsClientGetResponse{}, err
	}
	return result, nil
}
