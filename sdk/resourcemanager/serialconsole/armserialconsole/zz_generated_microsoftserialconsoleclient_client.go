//go:build go1.16
// +build go1.16

// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

package armserialconsole

import (
	"context"
	"errors"
	"fmt"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/arm"
	armruntime "github.com/Azure/azure-sdk-for-go/sdk/azcore/arm/runtime"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/policy"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/runtime"
	"net/http"
	"net/url"
	"strings"
)

// MicrosoftSerialConsoleClient contains the methods for the MicrosoftSerialConsoleClient group.
// Don't use this type directly, use NewMicrosoftSerialConsoleClient() instead.
type MicrosoftSerialConsoleClient struct {
	ep             string
	pl             runtime.Pipeline
	subscriptionID string
}

// NewMicrosoftSerialConsoleClient creates a new instance of MicrosoftSerialConsoleClient with the specified values.
func NewMicrosoftSerialConsoleClient(subscriptionID string, credential azcore.TokenCredential, options *arm.ClientOptions) *MicrosoftSerialConsoleClient {
	cp := arm.ClientOptions{}
	if options != nil {
		cp = *options
	}
	if len(cp.Host) == 0 {
		cp.Host = arm.AzurePublicCloud
	}
	return &MicrosoftSerialConsoleClient{subscriptionID: subscriptionID, ep: string(cp.Host), pl: armruntime.NewPipeline(module, version, credential, &cp)}
}

// DisableConsole - Disables the Serial Console service for all VMs and VM scale sets in the provided subscription
// If the operation fails it returns a generic error.
func (client *MicrosoftSerialConsoleClient) DisableConsole(ctx context.Context, defaultParam string, options *MicrosoftSerialConsoleClientDisableConsoleOptions) (MicrosoftSerialConsoleClientDisableConsoleResponse, error) {
	req, err := client.disableConsoleCreateRequest(ctx, defaultParam, options)
	if err != nil {
		return MicrosoftSerialConsoleClientDisableConsoleResponse{}, err
	}
	resp, err := client.pl.Do(req)
	if err != nil {
		return MicrosoftSerialConsoleClientDisableConsoleResponse{}, err
	}
	if !runtime.HasStatusCode(resp, http.StatusOK, http.StatusNotFound) {
		return MicrosoftSerialConsoleClientDisableConsoleResponse{}, client.disableConsoleHandleError(resp)
	}
	return client.disableConsoleHandleResponse(resp)
}

// disableConsoleCreateRequest creates the DisableConsole request.
func (client *MicrosoftSerialConsoleClient) disableConsoleCreateRequest(ctx context.Context, defaultParam string, options *MicrosoftSerialConsoleClientDisableConsoleOptions) (*policy.Request, error) {
	urlPath := "/subscriptions/{subscriptionId}/providers/Microsoft.SerialConsole/consoleServices/{default}/disableConsole"
	if client.subscriptionID == "" {
		return nil, errors.New("parameter client.subscriptionID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{subscriptionId}", url.PathEscape(client.subscriptionID))
	if defaultParam == "" {
		return nil, errors.New("parameter defaultParam cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{default}", url.PathEscape(defaultParam))
	req, err := runtime.NewRequest(ctx, http.MethodPost, runtime.JoinPaths(client.ep, urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("api-version", "2018-05-01")
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header.Set("Accept", "application/json")
	return req, nil
}

// disableConsoleHandleResponse handles the DisableConsole response.
func (client *MicrosoftSerialConsoleClient) disableConsoleHandleResponse(resp *http.Response) (MicrosoftSerialConsoleClientDisableConsoleResponse, error) {
	result := MicrosoftSerialConsoleClientDisableConsoleResponse{RawResponse: resp}
	switch resp.StatusCode {
	case http.StatusOK:
		var val DisableSerialConsoleResult
		if err := runtime.UnmarshalAsJSON(resp, &val); err != nil {
			return MicrosoftSerialConsoleClientDisableConsoleResponse{}, runtime.NewResponseError(err, resp)
		}
		result.Value = val
	case http.StatusNotFound:
		var val GetSerialConsoleSubscriptionNotFound
		if err := runtime.UnmarshalAsJSON(resp, &val); err != nil {
			return MicrosoftSerialConsoleClientDisableConsoleResponse{}, runtime.NewResponseError(err, resp)
		}
		result.Value = val
	default:
		return MicrosoftSerialConsoleClientDisableConsoleResponse{}, fmt.Errorf("unhandled HTTP status code %d", resp.StatusCode)
	}
	return result, nil
}

// disableConsoleHandleError handles the DisableConsole error response.
func (client *MicrosoftSerialConsoleClient) disableConsoleHandleError(resp *http.Response) error {
	body, err := runtime.Payload(resp)
	if err != nil {
		return runtime.NewResponseError(err, resp)
	}
	if len(body) == 0 {
		return runtime.NewResponseError(errors.New(resp.Status), resp)
	}
	return runtime.NewResponseError(errors.New(string(body)), resp)
}

// EnableConsole - Enables the Serial Console service for all VMs and VM scale sets in the provided subscription
// If the operation fails it returns a generic error.
func (client *MicrosoftSerialConsoleClient) EnableConsole(ctx context.Context, defaultParam string, options *MicrosoftSerialConsoleClientEnableConsoleOptions) (MicrosoftSerialConsoleClientEnableConsoleResponse, error) {
	req, err := client.enableConsoleCreateRequest(ctx, defaultParam, options)
	if err != nil {
		return MicrosoftSerialConsoleClientEnableConsoleResponse{}, err
	}
	resp, err := client.pl.Do(req)
	if err != nil {
		return MicrosoftSerialConsoleClientEnableConsoleResponse{}, err
	}
	if !runtime.HasStatusCode(resp, http.StatusOK, http.StatusNotFound) {
		return MicrosoftSerialConsoleClientEnableConsoleResponse{}, client.enableConsoleHandleError(resp)
	}
	return client.enableConsoleHandleResponse(resp)
}

// enableConsoleCreateRequest creates the EnableConsole request.
func (client *MicrosoftSerialConsoleClient) enableConsoleCreateRequest(ctx context.Context, defaultParam string, options *MicrosoftSerialConsoleClientEnableConsoleOptions) (*policy.Request, error) {
	urlPath := "/subscriptions/{subscriptionId}/providers/Microsoft.SerialConsole/consoleServices/{default}/enableConsole"
	if client.subscriptionID == "" {
		return nil, errors.New("parameter client.subscriptionID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{subscriptionId}", url.PathEscape(client.subscriptionID))
	if defaultParam == "" {
		return nil, errors.New("parameter defaultParam cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{default}", url.PathEscape(defaultParam))
	req, err := runtime.NewRequest(ctx, http.MethodPost, runtime.JoinPaths(client.ep, urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("api-version", "2018-05-01")
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header.Set("Accept", "application/json")
	return req, nil
}

// enableConsoleHandleResponse handles the EnableConsole response.
func (client *MicrosoftSerialConsoleClient) enableConsoleHandleResponse(resp *http.Response) (MicrosoftSerialConsoleClientEnableConsoleResponse, error) {
	result := MicrosoftSerialConsoleClientEnableConsoleResponse{RawResponse: resp}
	switch resp.StatusCode {
	case http.StatusOK:
		var val EnableSerialConsoleResult
		if err := runtime.UnmarshalAsJSON(resp, &val); err != nil {
			return MicrosoftSerialConsoleClientEnableConsoleResponse{}, runtime.NewResponseError(err, resp)
		}
		result.Value = val
	case http.StatusNotFound:
		var val GetSerialConsoleSubscriptionNotFound
		if err := runtime.UnmarshalAsJSON(resp, &val); err != nil {
			return MicrosoftSerialConsoleClientEnableConsoleResponse{}, runtime.NewResponseError(err, resp)
		}
		result.Value = val
	default:
		return MicrosoftSerialConsoleClientEnableConsoleResponse{}, fmt.Errorf("unhandled HTTP status code %d", resp.StatusCode)
	}
	return result, nil
}

// enableConsoleHandleError handles the EnableConsole error response.
func (client *MicrosoftSerialConsoleClient) enableConsoleHandleError(resp *http.Response) error {
	body, err := runtime.Payload(resp)
	if err != nil {
		return runtime.NewResponseError(err, resp)
	}
	if len(body) == 0 {
		return runtime.NewResponseError(errors.New(resp.Status), resp)
	}
	return runtime.NewResponseError(errors.New(string(body)), resp)
}

// GetConsoleStatus - Gets whether or not Serial Console is disabled for a given subscription
// If the operation fails it returns a generic error.
func (client *MicrosoftSerialConsoleClient) GetConsoleStatus(ctx context.Context, defaultParam string, options *MicrosoftSerialConsoleClientGetConsoleStatusOptions) (MicrosoftSerialConsoleClientGetConsoleStatusResponse, error) {
	req, err := client.getConsoleStatusCreateRequest(ctx, defaultParam, options)
	if err != nil {
		return MicrosoftSerialConsoleClientGetConsoleStatusResponse{}, err
	}
	resp, err := client.pl.Do(req)
	if err != nil {
		return MicrosoftSerialConsoleClientGetConsoleStatusResponse{}, err
	}
	if !runtime.HasStatusCode(resp, http.StatusOK, http.StatusNotFound) {
		return MicrosoftSerialConsoleClientGetConsoleStatusResponse{}, client.getConsoleStatusHandleError(resp)
	}
	return client.getConsoleStatusHandleResponse(resp)
}

// getConsoleStatusCreateRequest creates the GetConsoleStatus request.
func (client *MicrosoftSerialConsoleClient) getConsoleStatusCreateRequest(ctx context.Context, defaultParam string, options *MicrosoftSerialConsoleClientGetConsoleStatusOptions) (*policy.Request, error) {
	urlPath := "/subscriptions/{subscriptionId}/providers/Microsoft.SerialConsole/consoleServices/{default}"
	if client.subscriptionID == "" {
		return nil, errors.New("parameter client.subscriptionID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{subscriptionId}", url.PathEscape(client.subscriptionID))
	if defaultParam == "" {
		return nil, errors.New("parameter defaultParam cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{default}", url.PathEscape(defaultParam))
	req, err := runtime.NewRequest(ctx, http.MethodGet, runtime.JoinPaths(client.ep, urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("api-version", "2018-05-01")
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header.Set("Accept", "application/json")
	return req, nil
}

// getConsoleStatusHandleResponse handles the GetConsoleStatus response.
func (client *MicrosoftSerialConsoleClient) getConsoleStatusHandleResponse(resp *http.Response) (MicrosoftSerialConsoleClientGetConsoleStatusResponse, error) {
	result := MicrosoftSerialConsoleClientGetConsoleStatusResponse{RawResponse: resp}
	switch resp.StatusCode {
	case http.StatusOK:
		var val SerialConsoleStatus
		if err := runtime.UnmarshalAsJSON(resp, &val); err != nil {
			return MicrosoftSerialConsoleClientGetConsoleStatusResponse{}, runtime.NewResponseError(err, resp)
		}
		result.Value = val
	case http.StatusNotFound:
		var val GetSerialConsoleSubscriptionNotFound
		if err := runtime.UnmarshalAsJSON(resp, &val); err != nil {
			return MicrosoftSerialConsoleClientGetConsoleStatusResponse{}, runtime.NewResponseError(err, resp)
		}
		result.Value = val
	default:
		return MicrosoftSerialConsoleClientGetConsoleStatusResponse{}, fmt.Errorf("unhandled HTTP status code %d", resp.StatusCode)
	}
	return result, nil
}

// getConsoleStatusHandleError handles the GetConsoleStatus error response.
func (client *MicrosoftSerialConsoleClient) getConsoleStatusHandleError(resp *http.Response) error {
	body, err := runtime.Payload(resp)
	if err != nil {
		return runtime.NewResponseError(err, resp)
	}
	if len(body) == 0 {
		return runtime.NewResponseError(errors.New(resp.Status), resp)
	}
	return runtime.NewResponseError(errors.New(string(body)), resp)
}

// ListOperations - Gets a list of Serial Console API operations.
// If the operation fails it returns a generic error.
func (client *MicrosoftSerialConsoleClient) ListOperations(ctx context.Context, options *MicrosoftSerialConsoleClientListOperationsOptions) (MicrosoftSerialConsoleClientListOperationsResponse, error) {
	req, err := client.listOperationsCreateRequest(ctx, options)
	if err != nil {
		return MicrosoftSerialConsoleClientListOperationsResponse{}, err
	}
	resp, err := client.pl.Do(req)
	if err != nil {
		return MicrosoftSerialConsoleClientListOperationsResponse{}, err
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {
		return MicrosoftSerialConsoleClientListOperationsResponse{}, client.listOperationsHandleError(resp)
	}
	return client.listOperationsHandleResponse(resp)
}

// listOperationsCreateRequest creates the ListOperations request.
func (client *MicrosoftSerialConsoleClient) listOperationsCreateRequest(ctx context.Context, options *MicrosoftSerialConsoleClientListOperationsOptions) (*policy.Request, error) {
	urlPath := "/providers/Microsoft.SerialConsole/operations"
	req, err := runtime.NewRequest(ctx, http.MethodGet, runtime.JoinPaths(client.ep, urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("api-version", "2018-05-01")
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header.Set("Accept", "application/json")
	return req, nil
}

// listOperationsHandleResponse handles the ListOperations response.
func (client *MicrosoftSerialConsoleClient) listOperationsHandleResponse(resp *http.Response) (MicrosoftSerialConsoleClientListOperationsResponse, error) {
	result := MicrosoftSerialConsoleClientListOperationsResponse{RawResponse: resp}
	if err := runtime.UnmarshalAsJSON(resp, &result.SerialConsoleOperations); err != nil {
		return MicrosoftSerialConsoleClientListOperationsResponse{}, runtime.NewResponseError(err, resp)
	}
	return result, nil
}

// listOperationsHandleError handles the ListOperations error response.
func (client *MicrosoftSerialConsoleClient) listOperationsHandleError(resp *http.Response) error {
	body, err := runtime.Payload(resp)
	if err != nil {
		return runtime.NewResponseError(err, resp)
	}
	if len(body) == 0 {
		return runtime.NewResponseError(errors.New(resp.Status), resp)
	}
	return runtime.NewResponseError(errors.New(string(body)), resp)
}
