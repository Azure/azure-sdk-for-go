//go:build go1.16
// +build go1.16

// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

package armserialconsole

import (
	"context"
	"errors"
	"fmt"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/arm"
	armruntime "github.com/Azure/azure-sdk-for-go/sdk/azcore/arm/runtime"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/policy"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/runtime"
	"net/http"
	"net/url"
	"strings"
)

// SerialPortsClient contains the methods for the SerialPorts group.
// Don't use this type directly, use NewSerialPortsClient() instead.
type SerialPortsClient struct {
	ep             string
	pl             runtime.Pipeline
	subscriptionID string
}

// NewSerialPortsClient creates a new instance of SerialPortsClient with the specified values.
func NewSerialPortsClient(subscriptionID string, credential azcore.TokenCredential, options *arm.ClientOptions) *SerialPortsClient {
	cp := arm.ClientOptions{}
	if options != nil {
		cp = *options
	}
	if len(cp.Host) == 0 {
		cp.Host = arm.AzurePublicCloud
	}
	return &SerialPortsClient{subscriptionID: subscriptionID, ep: string(cp.Host), pl: armruntime.NewPipeline(module, version, credential, &cp)}
}

// Connect - Connect to serial port of the target resource
// If the operation fails it returns the *CloudError error type.
func (client *SerialPortsClient) Connect(ctx context.Context, resourceGroupName string, resourceProviderNamespace string, parentResourceType string, parentResource string, serialPort string, options *SerialPortsConnectOptions) (SerialPortsConnectResponse, error) {
	req, err := client.connectCreateRequest(ctx, resourceGroupName, resourceProviderNamespace, parentResourceType, parentResource, serialPort, options)
	if err != nil {
		return SerialPortsConnectResponse{}, err
	}
	resp, err := client.pl.Do(req)
	if err != nil {
		return SerialPortsConnectResponse{}, err
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {
		return SerialPortsConnectResponse{}, client.connectHandleError(resp)
	}
	return client.connectHandleResponse(resp)
}

// connectCreateRequest creates the Connect request.
func (client *SerialPortsClient) connectCreateRequest(ctx context.Context, resourceGroupName string, resourceProviderNamespace string, parentResourceType string, parentResource string, serialPort string, options *SerialPortsConnectOptions) (*policy.Request, error) {
	urlPath := "/subscriptions/{subscriptionId}/resourcegroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{parentResourceType}/{parentResource}/providers/Microsoft.SerialConsole/serialPorts/{serialPort}/connect"
	if resourceGroupName == "" {
		return nil, errors.New("parameter resourceGroupName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{resourceGroupName}", url.PathEscape(resourceGroupName))
	if resourceProviderNamespace == "" {
		return nil, errors.New("parameter resourceProviderNamespace cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{resourceProviderNamespace}", url.PathEscape(resourceProviderNamespace))
	urlPath = strings.ReplaceAll(urlPath, "{parentResourceType}", parentResourceType)
	if parentResource == "" {
		return nil, errors.New("parameter parentResource cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{parentResource}", url.PathEscape(parentResource))
	if serialPort == "" {
		return nil, errors.New("parameter serialPort cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{serialPort}", url.PathEscape(serialPort))
	if client.subscriptionID == "" {
		return nil, errors.New("parameter client.subscriptionID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{subscriptionId}", url.PathEscape(client.subscriptionID))
	req, err := runtime.NewRequest(ctx, http.MethodPost, runtime.JoinPaths(client.ep, urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("api-version", "2018-05-01")
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header.Set("Accept", "application/json")
	return req, nil
}

// connectHandleResponse handles the Connect response.
func (client *SerialPortsClient) connectHandleResponse(resp *http.Response) (SerialPortsConnectResponse, error) {
	result := SerialPortsConnectResponse{RawResponse: resp}
	if err := runtime.UnmarshalAsJSON(resp, &result.SerialPortConnectResult); err != nil {
		return SerialPortsConnectResponse{}, runtime.NewResponseError(err, resp)
	}
	return result, nil
}

// connectHandleError handles the Connect error response.
func (client *SerialPortsClient) connectHandleError(resp *http.Response) error {
	body, err := runtime.Payload(resp)
	if err != nil {
		return runtime.NewResponseError(err, resp)
	}
	errType := CloudError{raw: string(body)}
	if err := runtime.UnmarshalAsJSON(resp, &errType); err != nil {
		return runtime.NewResponseError(fmt.Errorf("%s\n%s", string(body), err), resp)
	}
	return runtime.NewResponseError(&errType, resp)
}

// Create - Creates or updates a serial port
// If the operation fails it returns the *CloudError error type.
func (client *SerialPortsClient) Create(ctx context.Context, resourceGroupName string, resourceProviderNamespace string, parentResourceType string, parentResource string, serialPort string, parameters SerialPort, options *SerialPortsCreateOptions) (SerialPortsCreateResponse, error) {
	req, err := client.createCreateRequest(ctx, resourceGroupName, resourceProviderNamespace, parentResourceType, parentResource, serialPort, parameters, options)
	if err != nil {
		return SerialPortsCreateResponse{}, err
	}
	resp, err := client.pl.Do(req)
	if err != nil {
		return SerialPortsCreateResponse{}, err
	}
	if !runtime.HasStatusCode(resp, http.StatusCreated) {
		return SerialPortsCreateResponse{}, client.createHandleError(resp)
	}
	return client.createHandleResponse(resp)
}

// createCreateRequest creates the Create request.
func (client *SerialPortsClient) createCreateRequest(ctx context.Context, resourceGroupName string, resourceProviderNamespace string, parentResourceType string, parentResource string, serialPort string, parameters SerialPort, options *SerialPortsCreateOptions) (*policy.Request, error) {
	urlPath := "/subscriptions/{subscriptionId}/resourcegroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{parentResourceType}/{parentResource}/providers/Microsoft.SerialConsole/serialPorts/{serialPort}"
	if resourceGroupName == "" {
		return nil, errors.New("parameter resourceGroupName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{resourceGroupName}", url.PathEscape(resourceGroupName))
	if resourceProviderNamespace == "" {
		return nil, errors.New("parameter resourceProviderNamespace cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{resourceProviderNamespace}", url.PathEscape(resourceProviderNamespace))
	urlPath = strings.ReplaceAll(urlPath, "{parentResourceType}", parentResourceType)
	if parentResource == "" {
		return nil, errors.New("parameter parentResource cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{parentResource}", url.PathEscape(parentResource))
	if serialPort == "" {
		return nil, errors.New("parameter serialPort cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{serialPort}", url.PathEscape(serialPort))
	if client.subscriptionID == "" {
		return nil, errors.New("parameter client.subscriptionID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{subscriptionId}", url.PathEscape(client.subscriptionID))
	req, err := runtime.NewRequest(ctx, http.MethodPut, runtime.JoinPaths(client.ep, urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("api-version", "2018-05-01")
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header.Set("Accept", "application/json")
	return req, runtime.MarshalAsJSON(req, parameters)
}

// createHandleResponse handles the Create response.
func (client *SerialPortsClient) createHandleResponse(resp *http.Response) (SerialPortsCreateResponse, error) {
	result := SerialPortsCreateResponse{RawResponse: resp}
	if err := runtime.UnmarshalAsJSON(resp, &result.SerialPort); err != nil {
		return SerialPortsCreateResponse{}, runtime.NewResponseError(err, resp)
	}
	return result, nil
}

// createHandleError handles the Create error response.
func (client *SerialPortsClient) createHandleError(resp *http.Response) error {
	body, err := runtime.Payload(resp)
	if err != nil {
		return runtime.NewResponseError(err, resp)
	}
	errType := CloudError{raw: string(body)}
	if err := runtime.UnmarshalAsJSON(resp, &errType); err != nil {
		return runtime.NewResponseError(fmt.Errorf("%s\n%s", string(body), err), resp)
	}
	return runtime.NewResponseError(&errType, resp)
}

// Delete - Deletes a serial port
// If the operation fails it returns the *CloudError error type.
func (client *SerialPortsClient) Delete(ctx context.Context, resourceGroupName string, resourceProviderNamespace string, parentResourceType string, parentResource string, serialPort string, options *SerialPortsDeleteOptions) (SerialPortsDeleteResponse, error) {
	req, err := client.deleteCreateRequest(ctx, resourceGroupName, resourceProviderNamespace, parentResourceType, parentResource, serialPort, options)
	if err != nil {
		return SerialPortsDeleteResponse{}, err
	}
	resp, err := client.pl.Do(req)
	if err != nil {
		return SerialPortsDeleteResponse{}, err
	}
	if !runtime.HasStatusCode(resp, http.StatusOK, http.StatusNoContent) {
		return SerialPortsDeleteResponse{}, client.deleteHandleError(resp)
	}
	return SerialPortsDeleteResponse{RawResponse: resp}, nil
}

// deleteCreateRequest creates the Delete request.
func (client *SerialPortsClient) deleteCreateRequest(ctx context.Context, resourceGroupName string, resourceProviderNamespace string, parentResourceType string, parentResource string, serialPort string, options *SerialPortsDeleteOptions) (*policy.Request, error) {
	urlPath := "/subscriptions/{subscriptionId}/resourcegroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{parentResourceType}/{parentResource}/providers/Microsoft.SerialConsole/serialPorts/{serialPort}"
	if resourceGroupName == "" {
		return nil, errors.New("parameter resourceGroupName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{resourceGroupName}", url.PathEscape(resourceGroupName))
	if resourceProviderNamespace == "" {
		return nil, errors.New("parameter resourceProviderNamespace cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{resourceProviderNamespace}", url.PathEscape(resourceProviderNamespace))
	urlPath = strings.ReplaceAll(urlPath, "{parentResourceType}", parentResourceType)
	if parentResource == "" {
		return nil, errors.New("parameter parentResource cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{parentResource}", url.PathEscape(parentResource))
	if serialPort == "" {
		return nil, errors.New("parameter serialPort cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{serialPort}", url.PathEscape(serialPort))
	if client.subscriptionID == "" {
		return nil, errors.New("parameter client.subscriptionID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{subscriptionId}", url.PathEscape(client.subscriptionID))
	req, err := runtime.NewRequest(ctx, http.MethodDelete, runtime.JoinPaths(client.ep, urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("api-version", "2018-05-01")
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header.Set("Accept", "application/json")
	return req, nil
}

// deleteHandleError handles the Delete error response.
func (client *SerialPortsClient) deleteHandleError(resp *http.Response) error {
	body, err := runtime.Payload(resp)
	if err != nil {
		return runtime.NewResponseError(err, resp)
	}
	errType := CloudError{raw: string(body)}
	if err := runtime.UnmarshalAsJSON(resp, &errType); err != nil {
		return runtime.NewResponseError(fmt.Errorf("%s\n%s", string(body), err), resp)
	}
	return runtime.NewResponseError(&errType, resp)
}

// Get - Gets the configured settings for a serial port
// If the operation fails it returns the *CloudError error type.
func (client *SerialPortsClient) Get(ctx context.Context, resourceGroupName string, resourceProviderNamespace string, parentResourceType string, parentResource string, serialPort string, options *SerialPortsGetOptions) (SerialPortsGetResponse, error) {
	req, err := client.getCreateRequest(ctx, resourceGroupName, resourceProviderNamespace, parentResourceType, parentResource, serialPort, options)
	if err != nil {
		return SerialPortsGetResponse{}, err
	}
	resp, err := client.pl.Do(req)
	if err != nil {
		return SerialPortsGetResponse{}, err
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {
		return SerialPortsGetResponse{}, client.getHandleError(resp)
	}
	return client.getHandleResponse(resp)
}

// getCreateRequest creates the Get request.
func (client *SerialPortsClient) getCreateRequest(ctx context.Context, resourceGroupName string, resourceProviderNamespace string, parentResourceType string, parentResource string, serialPort string, options *SerialPortsGetOptions) (*policy.Request, error) {
	urlPath := "/subscriptions/{subscriptionId}/resourcegroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{parentResourceType}/{parentResource}/providers/Microsoft.SerialConsole/serialPorts/{serialPort}"
	if resourceGroupName == "" {
		return nil, errors.New("parameter resourceGroupName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{resourceGroupName}", url.PathEscape(resourceGroupName))
	if resourceProviderNamespace == "" {
		return nil, errors.New("parameter resourceProviderNamespace cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{resourceProviderNamespace}", url.PathEscape(resourceProviderNamespace))
	urlPath = strings.ReplaceAll(urlPath, "{parentResourceType}", parentResourceType)
	if parentResource == "" {
		return nil, errors.New("parameter parentResource cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{parentResource}", url.PathEscape(parentResource))
	if serialPort == "" {
		return nil, errors.New("parameter serialPort cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{serialPort}", url.PathEscape(serialPort))
	if client.subscriptionID == "" {
		return nil, errors.New("parameter client.subscriptionID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{subscriptionId}", url.PathEscape(client.subscriptionID))
	req, err := runtime.NewRequest(ctx, http.MethodGet, runtime.JoinPaths(client.ep, urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("api-version", "2018-05-01")
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header.Set("Accept", "application/json")
	return req, nil
}

// getHandleResponse handles the Get response.
func (client *SerialPortsClient) getHandleResponse(resp *http.Response) (SerialPortsGetResponse, error) {
	result := SerialPortsGetResponse{RawResponse: resp}
	if err := runtime.UnmarshalAsJSON(resp, &result.SerialPort); err != nil {
		return SerialPortsGetResponse{}, runtime.NewResponseError(err, resp)
	}
	return result, nil
}

// getHandleError handles the Get error response.
func (client *SerialPortsClient) getHandleError(resp *http.Response) error {
	body, err := runtime.Payload(resp)
	if err != nil {
		return runtime.NewResponseError(err, resp)
	}
	errType := CloudError{raw: string(body)}
	if err := runtime.UnmarshalAsJSON(resp, &errType); err != nil {
		return runtime.NewResponseError(fmt.Errorf("%s\n%s", string(body), err), resp)
	}
	return runtime.NewResponseError(&errType, resp)
}

// List - Lists all of the configured serial ports for a parent resource
// If the operation fails it returns the *CloudError error type.
func (client *SerialPortsClient) List(ctx context.Context, resourceGroupName string, resourceProviderNamespace string, parentResourceType string, parentResource string, options *SerialPortsListOptions) (SerialPortsListResponse, error) {
	req, err := client.listCreateRequest(ctx, resourceGroupName, resourceProviderNamespace, parentResourceType, parentResource, options)
	if err != nil {
		return SerialPortsListResponse{}, err
	}
	resp, err := client.pl.Do(req)
	if err != nil {
		return SerialPortsListResponse{}, err
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {
		return SerialPortsListResponse{}, client.listHandleError(resp)
	}
	return client.listHandleResponse(resp)
}

// listCreateRequest creates the List request.
func (client *SerialPortsClient) listCreateRequest(ctx context.Context, resourceGroupName string, resourceProviderNamespace string, parentResourceType string, parentResource string, options *SerialPortsListOptions) (*policy.Request, error) {
	urlPath := "/subscriptions/{subscriptionId}/resourcegroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{parentResourceType}/{parentResource}/providers/Microsoft.SerialConsole/serialPorts"
	if resourceGroupName == "" {
		return nil, errors.New("parameter resourceGroupName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{resourceGroupName}", url.PathEscape(resourceGroupName))
	if resourceProviderNamespace == "" {
		return nil, errors.New("parameter resourceProviderNamespace cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{resourceProviderNamespace}", url.PathEscape(resourceProviderNamespace))
	urlPath = strings.ReplaceAll(urlPath, "{parentResourceType}", parentResourceType)
	if parentResource == "" {
		return nil, errors.New("parameter parentResource cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{parentResource}", url.PathEscape(parentResource))
	if client.subscriptionID == "" {
		return nil, errors.New("parameter client.subscriptionID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{subscriptionId}", url.PathEscape(client.subscriptionID))
	req, err := runtime.NewRequest(ctx, http.MethodGet, runtime.JoinPaths(client.ep, urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("api-version", "2018-05-01")
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header.Set("Accept", "application/json")
	return req, nil
}

// listHandleResponse handles the List response.
func (client *SerialPortsClient) listHandleResponse(resp *http.Response) (SerialPortsListResponse, error) {
	result := SerialPortsListResponse{RawResponse: resp}
	if err := runtime.UnmarshalAsJSON(resp, &result.SerialPortListResult); err != nil {
		return SerialPortsListResponse{}, runtime.NewResponseError(err, resp)
	}
	return result, nil
}

// listHandleError handles the List error response.
func (client *SerialPortsClient) listHandleError(resp *http.Response) error {
	body, err := runtime.Payload(resp)
	if err != nil {
		return runtime.NewResponseError(err, resp)
	}
	errType := CloudError{raw: string(body)}
	if err := runtime.UnmarshalAsJSON(resp, &errType); err != nil {
		return runtime.NewResponseError(fmt.Errorf("%s\n%s", string(body), err), resp)
	}
	return runtime.NewResponseError(&errType, resp)
}

// ListBySubscriptions - Handles requests to list all SerialPort resources in a subscription.
// If the operation fails it returns the *CloudError error type.
func (client *SerialPortsClient) ListBySubscriptions(ctx context.Context, options *SerialPortsListBySubscriptionsOptions) (SerialPortsListBySubscriptionsResponse, error) {
	req, err := client.listBySubscriptionsCreateRequest(ctx, options)
	if err != nil {
		return SerialPortsListBySubscriptionsResponse{}, err
	}
	resp, err := client.pl.Do(req)
	if err != nil {
		return SerialPortsListBySubscriptionsResponse{}, err
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {
		return SerialPortsListBySubscriptionsResponse{}, client.listBySubscriptionsHandleError(resp)
	}
	return client.listBySubscriptionsHandleResponse(resp)
}

// listBySubscriptionsCreateRequest creates the ListBySubscriptions request.
func (client *SerialPortsClient) listBySubscriptionsCreateRequest(ctx context.Context, options *SerialPortsListBySubscriptionsOptions) (*policy.Request, error) {
	urlPath := "/subscriptions/{subscriptionId}/providers/Microsoft.SerialConsole/serialPorts"
	if client.subscriptionID == "" {
		return nil, errors.New("parameter client.subscriptionID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{subscriptionId}", url.PathEscape(client.subscriptionID))
	req, err := runtime.NewRequest(ctx, http.MethodGet, runtime.JoinPaths(client.ep, urlPath))
	if err != nil {
		return nil, err
	}
	req.Raw().Header.Set("Accept", "application/json")
	return req, nil
}

// listBySubscriptionsHandleResponse handles the ListBySubscriptions response.
func (client *SerialPortsClient) listBySubscriptionsHandleResponse(resp *http.Response) (SerialPortsListBySubscriptionsResponse, error) {
	result := SerialPortsListBySubscriptionsResponse{RawResponse: resp}
	if err := runtime.UnmarshalAsJSON(resp, &result.SerialPortListResult); err != nil {
		return SerialPortsListBySubscriptionsResponse{}, runtime.NewResponseError(err, resp)
	}
	return result, nil
}

// listBySubscriptionsHandleError handles the ListBySubscriptions error response.
func (client *SerialPortsClient) listBySubscriptionsHandleError(resp *http.Response) error {
	body, err := runtime.Payload(resp)
	if err != nil {
		return runtime.NewResponseError(err, resp)
	}
	errType := CloudError{raw: string(body)}
	if err := runtime.UnmarshalAsJSON(resp, &errType); err != nil {
		return runtime.NewResponseError(fmt.Errorf("%s\n%s", string(body), err), resp)
	}
	return runtime.NewResponseError(&errType, resp)
}
