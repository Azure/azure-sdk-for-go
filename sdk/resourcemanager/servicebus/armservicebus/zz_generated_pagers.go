//go:build go1.16
// +build go1.16

// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

package armservicebus

import (
	"context"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/policy"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/runtime"
	"net/http"
	"reflect"
)

// DisasterRecoveryConfigsClientListAuthorizationRulesPager provides operations for iterating over paged responses.
type DisasterRecoveryConfigsClientListAuthorizationRulesPager struct {
	client    *DisasterRecoveryConfigsClient
	current   DisasterRecoveryConfigsClientListAuthorizationRulesResponse
	err       error
	requester func(context.Context) (*policy.Request, error)
	advancer  func(context.Context, DisasterRecoveryConfigsClientListAuthorizationRulesResponse) (*policy.Request, error)
}

// Err returns the last error encountered while paging.
func (p *DisasterRecoveryConfigsClientListAuthorizationRulesPager) Err() error {
	return p.err
}

// NextPage returns true if the pager advanced to the next page.
// Returns false if there are no more pages or an error occurred.
func (p *DisasterRecoveryConfigsClientListAuthorizationRulesPager) NextPage(ctx context.Context) bool {
	var req *policy.Request
	var err error
	if !reflect.ValueOf(p.current).IsZero() {
		if p.current.SBAuthorizationRuleListResult.NextLink == nil || len(*p.current.SBAuthorizationRuleListResult.NextLink) == 0 {
			return false
		}
		req, err = p.advancer(ctx, p.current)
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		p.err = err
		return false
	}
	resp, err := p.client.pl.Do(req)
	if err != nil {
		p.err = err
		return false
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {
		p.err = runtime.NewResponseError(resp)
		return false
	}
	result, err := p.client.listAuthorizationRulesHandleResponse(resp)
	if err != nil {
		p.err = err
		return false
	}
	p.current = result
	return true
}

// PageResponse returns the current DisasterRecoveryConfigsClientListAuthorizationRulesResponse page.
func (p *DisasterRecoveryConfigsClientListAuthorizationRulesPager) PageResponse() DisasterRecoveryConfigsClientListAuthorizationRulesResponse {
	return p.current
}

// DisasterRecoveryConfigsClientListPager provides operations for iterating over paged responses.
type DisasterRecoveryConfigsClientListPager struct {
	client    *DisasterRecoveryConfigsClient
	current   DisasterRecoveryConfigsClientListResponse
	err       error
	requester func(context.Context) (*policy.Request, error)
	advancer  func(context.Context, DisasterRecoveryConfigsClientListResponse) (*policy.Request, error)
}

// Err returns the last error encountered while paging.
func (p *DisasterRecoveryConfigsClientListPager) Err() error {
	return p.err
}

// NextPage returns true if the pager advanced to the next page.
// Returns false if there are no more pages or an error occurred.
func (p *DisasterRecoveryConfigsClientListPager) NextPage(ctx context.Context) bool {
	var req *policy.Request
	var err error
	if !reflect.ValueOf(p.current).IsZero() {
		if p.current.ArmDisasterRecoveryListResult.NextLink == nil || len(*p.current.ArmDisasterRecoveryListResult.NextLink) == 0 {
			return false
		}
		req, err = p.advancer(ctx, p.current)
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		p.err = err
		return false
	}
	resp, err := p.client.pl.Do(req)
	if err != nil {
		p.err = err
		return false
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {
		p.err = runtime.NewResponseError(resp)
		return false
	}
	result, err := p.client.listHandleResponse(resp)
	if err != nil {
		p.err = err
		return false
	}
	p.current = result
	return true
}

// PageResponse returns the current DisasterRecoveryConfigsClientListResponse page.
func (p *DisasterRecoveryConfigsClientListPager) PageResponse() DisasterRecoveryConfigsClientListResponse {
	return p.current
}

// MigrationConfigsClientListPager provides operations for iterating over paged responses.
type MigrationConfigsClientListPager struct {
	client    *MigrationConfigsClient
	current   MigrationConfigsClientListResponse
	err       error
	requester func(context.Context) (*policy.Request, error)
	advancer  func(context.Context, MigrationConfigsClientListResponse) (*policy.Request, error)
}

// Err returns the last error encountered while paging.
func (p *MigrationConfigsClientListPager) Err() error {
	return p.err
}

// NextPage returns true if the pager advanced to the next page.
// Returns false if there are no more pages or an error occurred.
func (p *MigrationConfigsClientListPager) NextPage(ctx context.Context) bool {
	var req *policy.Request
	var err error
	if !reflect.ValueOf(p.current).IsZero() {
		if p.current.MigrationConfigListResult.NextLink == nil || len(*p.current.MigrationConfigListResult.NextLink) == 0 {
			return false
		}
		req, err = p.advancer(ctx, p.current)
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		p.err = err
		return false
	}
	resp, err := p.client.pl.Do(req)
	if err != nil {
		p.err = err
		return false
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {
		p.err = runtime.NewResponseError(resp)
		return false
	}
	result, err := p.client.listHandleResponse(resp)
	if err != nil {
		p.err = err
		return false
	}
	p.current = result
	return true
}

// PageResponse returns the current MigrationConfigsClientListResponse page.
func (p *MigrationConfigsClientListPager) PageResponse() MigrationConfigsClientListResponse {
	return p.current
}

// NamespacesClientListAuthorizationRulesPager provides operations for iterating over paged responses.
type NamespacesClientListAuthorizationRulesPager struct {
	client    *NamespacesClient
	current   NamespacesClientListAuthorizationRulesResponse
	err       error
	requester func(context.Context) (*policy.Request, error)
	advancer  func(context.Context, NamespacesClientListAuthorizationRulesResponse) (*policy.Request, error)
}

// Err returns the last error encountered while paging.
func (p *NamespacesClientListAuthorizationRulesPager) Err() error {
	return p.err
}

// NextPage returns true if the pager advanced to the next page.
// Returns false if there are no more pages or an error occurred.
func (p *NamespacesClientListAuthorizationRulesPager) NextPage(ctx context.Context) bool {
	var req *policy.Request
	var err error
	if !reflect.ValueOf(p.current).IsZero() {
		if p.current.SBAuthorizationRuleListResult.NextLink == nil || len(*p.current.SBAuthorizationRuleListResult.NextLink) == 0 {
			return false
		}
		req, err = p.advancer(ctx, p.current)
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		p.err = err
		return false
	}
	resp, err := p.client.pl.Do(req)
	if err != nil {
		p.err = err
		return false
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {
		p.err = runtime.NewResponseError(resp)
		return false
	}
	result, err := p.client.listAuthorizationRulesHandleResponse(resp)
	if err != nil {
		p.err = err
		return false
	}
	p.current = result
	return true
}

// PageResponse returns the current NamespacesClientListAuthorizationRulesResponse page.
func (p *NamespacesClientListAuthorizationRulesPager) PageResponse() NamespacesClientListAuthorizationRulesResponse {
	return p.current
}

// NamespacesClientListByResourceGroupPager provides operations for iterating over paged responses.
type NamespacesClientListByResourceGroupPager struct {
	client    *NamespacesClient
	current   NamespacesClientListByResourceGroupResponse
	err       error
	requester func(context.Context) (*policy.Request, error)
	advancer  func(context.Context, NamespacesClientListByResourceGroupResponse) (*policy.Request, error)
}

// Err returns the last error encountered while paging.
func (p *NamespacesClientListByResourceGroupPager) Err() error {
	return p.err
}

// NextPage returns true if the pager advanced to the next page.
// Returns false if there are no more pages or an error occurred.
func (p *NamespacesClientListByResourceGroupPager) NextPage(ctx context.Context) bool {
	var req *policy.Request
	var err error
	if !reflect.ValueOf(p.current).IsZero() {
		if p.current.SBNamespaceListResult.NextLink == nil || len(*p.current.SBNamespaceListResult.NextLink) == 0 {
			return false
		}
		req, err = p.advancer(ctx, p.current)
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		p.err = err
		return false
	}
	resp, err := p.client.pl.Do(req)
	if err != nil {
		p.err = err
		return false
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {
		p.err = runtime.NewResponseError(resp)
		return false
	}
	result, err := p.client.listByResourceGroupHandleResponse(resp)
	if err != nil {
		p.err = err
		return false
	}
	p.current = result
	return true
}

// PageResponse returns the current NamespacesClientListByResourceGroupResponse page.
func (p *NamespacesClientListByResourceGroupPager) PageResponse() NamespacesClientListByResourceGroupResponse {
	return p.current
}

// NamespacesClientListNetworkRuleSetsPager provides operations for iterating over paged responses.
type NamespacesClientListNetworkRuleSetsPager struct {
	client    *NamespacesClient
	current   NamespacesClientListNetworkRuleSetsResponse
	err       error
	requester func(context.Context) (*policy.Request, error)
	advancer  func(context.Context, NamespacesClientListNetworkRuleSetsResponse) (*policy.Request, error)
}

// Err returns the last error encountered while paging.
func (p *NamespacesClientListNetworkRuleSetsPager) Err() error {
	return p.err
}

// NextPage returns true if the pager advanced to the next page.
// Returns false if there are no more pages or an error occurred.
func (p *NamespacesClientListNetworkRuleSetsPager) NextPage(ctx context.Context) bool {
	var req *policy.Request
	var err error
	if !reflect.ValueOf(p.current).IsZero() {
		if p.current.NetworkRuleSetListResult.NextLink == nil || len(*p.current.NetworkRuleSetListResult.NextLink) == 0 {
			return false
		}
		req, err = p.advancer(ctx, p.current)
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		p.err = err
		return false
	}
	resp, err := p.client.pl.Do(req)
	if err != nil {
		p.err = err
		return false
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {
		p.err = runtime.NewResponseError(resp)
		return false
	}
	result, err := p.client.listNetworkRuleSetsHandleResponse(resp)
	if err != nil {
		p.err = err
		return false
	}
	p.current = result
	return true
}

// PageResponse returns the current NamespacesClientListNetworkRuleSetsResponse page.
func (p *NamespacesClientListNetworkRuleSetsPager) PageResponse() NamespacesClientListNetworkRuleSetsResponse {
	return p.current
}

// NamespacesClientListPager provides operations for iterating over paged responses.
type NamespacesClientListPager struct {
	client    *NamespacesClient
	current   NamespacesClientListResponse
	err       error
	requester func(context.Context) (*policy.Request, error)
	advancer  func(context.Context, NamespacesClientListResponse) (*policy.Request, error)
}

// Err returns the last error encountered while paging.
func (p *NamespacesClientListPager) Err() error {
	return p.err
}

// NextPage returns true if the pager advanced to the next page.
// Returns false if there are no more pages or an error occurred.
func (p *NamespacesClientListPager) NextPage(ctx context.Context) bool {
	var req *policy.Request
	var err error
	if !reflect.ValueOf(p.current).IsZero() {
		if p.current.SBNamespaceListResult.NextLink == nil || len(*p.current.SBNamespaceListResult.NextLink) == 0 {
			return false
		}
		req, err = p.advancer(ctx, p.current)
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		p.err = err
		return false
	}
	resp, err := p.client.pl.Do(req)
	if err != nil {
		p.err = err
		return false
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {
		p.err = runtime.NewResponseError(resp)
		return false
	}
	result, err := p.client.listHandleResponse(resp)
	if err != nil {
		p.err = err
		return false
	}
	p.current = result
	return true
}

// PageResponse returns the current NamespacesClientListResponse page.
func (p *NamespacesClientListPager) PageResponse() NamespacesClientListResponse {
	return p.current
}

// OperationsClientListPager provides operations for iterating over paged responses.
type OperationsClientListPager struct {
	client    *OperationsClient
	current   OperationsClientListResponse
	err       error
	requester func(context.Context) (*policy.Request, error)
	advancer  func(context.Context, OperationsClientListResponse) (*policy.Request, error)
}

// Err returns the last error encountered while paging.
func (p *OperationsClientListPager) Err() error {
	return p.err
}

// NextPage returns true if the pager advanced to the next page.
// Returns false if there are no more pages or an error occurred.
func (p *OperationsClientListPager) NextPage(ctx context.Context) bool {
	var req *policy.Request
	var err error
	if !reflect.ValueOf(p.current).IsZero() {
		if p.current.OperationListResult.NextLink == nil || len(*p.current.OperationListResult.NextLink) == 0 {
			return false
		}
		req, err = p.advancer(ctx, p.current)
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		p.err = err
		return false
	}
	resp, err := p.client.pl.Do(req)
	if err != nil {
		p.err = err
		return false
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {
		p.err = runtime.NewResponseError(resp)
		return false
	}
	result, err := p.client.listHandleResponse(resp)
	if err != nil {
		p.err = err
		return false
	}
	p.current = result
	return true
}

// PageResponse returns the current OperationsClientListResponse page.
func (p *OperationsClientListPager) PageResponse() OperationsClientListResponse {
	return p.current
}

// PrivateEndpointConnectionsClientListPager provides operations for iterating over paged responses.
type PrivateEndpointConnectionsClientListPager struct {
	client    *PrivateEndpointConnectionsClient
	current   PrivateEndpointConnectionsClientListResponse
	err       error
	requester func(context.Context) (*policy.Request, error)
	advancer  func(context.Context, PrivateEndpointConnectionsClientListResponse) (*policy.Request, error)
}

// Err returns the last error encountered while paging.
func (p *PrivateEndpointConnectionsClientListPager) Err() error {
	return p.err
}

// NextPage returns true if the pager advanced to the next page.
// Returns false if there are no more pages or an error occurred.
func (p *PrivateEndpointConnectionsClientListPager) NextPage(ctx context.Context) bool {
	var req *policy.Request
	var err error
	if !reflect.ValueOf(p.current).IsZero() {
		if p.current.PrivateEndpointConnectionListResult.NextLink == nil || len(*p.current.PrivateEndpointConnectionListResult.NextLink) == 0 {
			return false
		}
		req, err = p.advancer(ctx, p.current)
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		p.err = err
		return false
	}
	resp, err := p.client.pl.Do(req)
	if err != nil {
		p.err = err
		return false
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {
		p.err = runtime.NewResponseError(resp)
		return false
	}
	result, err := p.client.listHandleResponse(resp)
	if err != nil {
		p.err = err
		return false
	}
	p.current = result
	return true
}

// PageResponse returns the current PrivateEndpointConnectionsClientListResponse page.
func (p *PrivateEndpointConnectionsClientListPager) PageResponse() PrivateEndpointConnectionsClientListResponse {
	return p.current
}

// QueuesClientListAuthorizationRulesPager provides operations for iterating over paged responses.
type QueuesClientListAuthorizationRulesPager struct {
	client    *QueuesClient
	current   QueuesClientListAuthorizationRulesResponse
	err       error
	requester func(context.Context) (*policy.Request, error)
	advancer  func(context.Context, QueuesClientListAuthorizationRulesResponse) (*policy.Request, error)
}

// Err returns the last error encountered while paging.
func (p *QueuesClientListAuthorizationRulesPager) Err() error {
	return p.err
}

// NextPage returns true if the pager advanced to the next page.
// Returns false if there are no more pages or an error occurred.
func (p *QueuesClientListAuthorizationRulesPager) NextPage(ctx context.Context) bool {
	var req *policy.Request
	var err error
	if !reflect.ValueOf(p.current).IsZero() {
		if p.current.SBAuthorizationRuleListResult.NextLink == nil || len(*p.current.SBAuthorizationRuleListResult.NextLink) == 0 {
			return false
		}
		req, err = p.advancer(ctx, p.current)
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		p.err = err
		return false
	}
	resp, err := p.client.pl.Do(req)
	if err != nil {
		p.err = err
		return false
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {
		p.err = runtime.NewResponseError(resp)
		return false
	}
	result, err := p.client.listAuthorizationRulesHandleResponse(resp)
	if err != nil {
		p.err = err
		return false
	}
	p.current = result
	return true
}

// PageResponse returns the current QueuesClientListAuthorizationRulesResponse page.
func (p *QueuesClientListAuthorizationRulesPager) PageResponse() QueuesClientListAuthorizationRulesResponse {
	return p.current
}

// QueuesClientListByNamespacePager provides operations for iterating over paged responses.
type QueuesClientListByNamespacePager struct {
	client    *QueuesClient
	current   QueuesClientListByNamespaceResponse
	err       error
	requester func(context.Context) (*policy.Request, error)
	advancer  func(context.Context, QueuesClientListByNamespaceResponse) (*policy.Request, error)
}

// Err returns the last error encountered while paging.
func (p *QueuesClientListByNamespacePager) Err() error {
	return p.err
}

// NextPage returns true if the pager advanced to the next page.
// Returns false if there are no more pages or an error occurred.
func (p *QueuesClientListByNamespacePager) NextPage(ctx context.Context) bool {
	var req *policy.Request
	var err error
	if !reflect.ValueOf(p.current).IsZero() {
		if p.current.SBQueueListResult.NextLink == nil || len(*p.current.SBQueueListResult.NextLink) == 0 {
			return false
		}
		req, err = p.advancer(ctx, p.current)
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		p.err = err
		return false
	}
	resp, err := p.client.pl.Do(req)
	if err != nil {
		p.err = err
		return false
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {
		p.err = runtime.NewResponseError(resp)
		return false
	}
	result, err := p.client.listByNamespaceHandleResponse(resp)
	if err != nil {
		p.err = err
		return false
	}
	p.current = result
	return true
}

// PageResponse returns the current QueuesClientListByNamespaceResponse page.
func (p *QueuesClientListByNamespacePager) PageResponse() QueuesClientListByNamespaceResponse {
	return p.current
}

// RulesClientListBySubscriptionsPager provides operations for iterating over paged responses.
type RulesClientListBySubscriptionsPager struct {
	client    *RulesClient
	current   RulesClientListBySubscriptionsResponse
	err       error
	requester func(context.Context) (*policy.Request, error)
	advancer  func(context.Context, RulesClientListBySubscriptionsResponse) (*policy.Request, error)
}

// Err returns the last error encountered while paging.
func (p *RulesClientListBySubscriptionsPager) Err() error {
	return p.err
}

// NextPage returns true if the pager advanced to the next page.
// Returns false if there are no more pages or an error occurred.
func (p *RulesClientListBySubscriptionsPager) NextPage(ctx context.Context) bool {
	var req *policy.Request
	var err error
	if !reflect.ValueOf(p.current).IsZero() {
		if p.current.RuleListResult.NextLink == nil || len(*p.current.RuleListResult.NextLink) == 0 {
			return false
		}
		req, err = p.advancer(ctx, p.current)
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		p.err = err
		return false
	}
	resp, err := p.client.pl.Do(req)
	if err != nil {
		p.err = err
		return false
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {
		p.err = runtime.NewResponseError(resp)
		return false
	}
	result, err := p.client.listBySubscriptionsHandleResponse(resp)
	if err != nil {
		p.err = err
		return false
	}
	p.current = result
	return true
}

// PageResponse returns the current RulesClientListBySubscriptionsResponse page.
func (p *RulesClientListBySubscriptionsPager) PageResponse() RulesClientListBySubscriptionsResponse {
	return p.current
}

// SubscriptionsClientListByTopicPager provides operations for iterating over paged responses.
type SubscriptionsClientListByTopicPager struct {
	client    *SubscriptionsClient
	current   SubscriptionsClientListByTopicResponse
	err       error
	requester func(context.Context) (*policy.Request, error)
	advancer  func(context.Context, SubscriptionsClientListByTopicResponse) (*policy.Request, error)
}

// Err returns the last error encountered while paging.
func (p *SubscriptionsClientListByTopicPager) Err() error {
	return p.err
}

// NextPage returns true if the pager advanced to the next page.
// Returns false if there are no more pages or an error occurred.
func (p *SubscriptionsClientListByTopicPager) NextPage(ctx context.Context) bool {
	var req *policy.Request
	var err error
	if !reflect.ValueOf(p.current).IsZero() {
		if p.current.SBSubscriptionListResult.NextLink == nil || len(*p.current.SBSubscriptionListResult.NextLink) == 0 {
			return false
		}
		req, err = p.advancer(ctx, p.current)
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		p.err = err
		return false
	}
	resp, err := p.client.pl.Do(req)
	if err != nil {
		p.err = err
		return false
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {
		p.err = runtime.NewResponseError(resp)
		return false
	}
	result, err := p.client.listByTopicHandleResponse(resp)
	if err != nil {
		p.err = err
		return false
	}
	p.current = result
	return true
}

// PageResponse returns the current SubscriptionsClientListByTopicResponse page.
func (p *SubscriptionsClientListByTopicPager) PageResponse() SubscriptionsClientListByTopicResponse {
	return p.current
}

// TopicsClientListAuthorizationRulesPager provides operations for iterating over paged responses.
type TopicsClientListAuthorizationRulesPager struct {
	client    *TopicsClient
	current   TopicsClientListAuthorizationRulesResponse
	err       error
	requester func(context.Context) (*policy.Request, error)
	advancer  func(context.Context, TopicsClientListAuthorizationRulesResponse) (*policy.Request, error)
}

// Err returns the last error encountered while paging.
func (p *TopicsClientListAuthorizationRulesPager) Err() error {
	return p.err
}

// NextPage returns true if the pager advanced to the next page.
// Returns false if there are no more pages or an error occurred.
func (p *TopicsClientListAuthorizationRulesPager) NextPage(ctx context.Context) bool {
	var req *policy.Request
	var err error
	if !reflect.ValueOf(p.current).IsZero() {
		if p.current.SBAuthorizationRuleListResult.NextLink == nil || len(*p.current.SBAuthorizationRuleListResult.NextLink) == 0 {
			return false
		}
		req, err = p.advancer(ctx, p.current)
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		p.err = err
		return false
	}
	resp, err := p.client.pl.Do(req)
	if err != nil {
		p.err = err
		return false
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {
		p.err = runtime.NewResponseError(resp)
		return false
	}
	result, err := p.client.listAuthorizationRulesHandleResponse(resp)
	if err != nil {
		p.err = err
		return false
	}
	p.current = result
	return true
}

// PageResponse returns the current TopicsClientListAuthorizationRulesResponse page.
func (p *TopicsClientListAuthorizationRulesPager) PageResponse() TopicsClientListAuthorizationRulesResponse {
	return p.current
}

// TopicsClientListByNamespacePager provides operations for iterating over paged responses.
type TopicsClientListByNamespacePager struct {
	client    *TopicsClient
	current   TopicsClientListByNamespaceResponse
	err       error
	requester func(context.Context) (*policy.Request, error)
	advancer  func(context.Context, TopicsClientListByNamespaceResponse) (*policy.Request, error)
}

// Err returns the last error encountered while paging.
func (p *TopicsClientListByNamespacePager) Err() error {
	return p.err
}

// NextPage returns true if the pager advanced to the next page.
// Returns false if there are no more pages or an error occurred.
func (p *TopicsClientListByNamespacePager) NextPage(ctx context.Context) bool {
	var req *policy.Request
	var err error
	if !reflect.ValueOf(p.current).IsZero() {
		if p.current.SBTopicListResult.NextLink == nil || len(*p.current.SBTopicListResult.NextLink) == 0 {
			return false
		}
		req, err = p.advancer(ctx, p.current)
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		p.err = err
		return false
	}
	resp, err := p.client.pl.Do(req)
	if err != nil {
		p.err = err
		return false
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {
		p.err = runtime.NewResponseError(resp)
		return false
	}
	result, err := p.client.listByNamespaceHandleResponse(resp)
	if err != nil {
		p.err = err
		return false
	}
	p.current = result
	return true
}

// PageResponse returns the current TopicsClientListByNamespaceResponse page.
func (p *TopicsClientListByNamespacePager) PageResponse() TopicsClientListByNamespaceResponse {
	return p.current
}
