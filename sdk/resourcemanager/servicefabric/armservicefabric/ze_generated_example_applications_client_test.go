//go:build go1.16
// +build go1.16

// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

package armservicefabric_test

import (
	"context"
	"log"

	"time"

	"github.com/Azure/azure-sdk-for-go/sdk/azcore/to"
	"github.com/Azure/azure-sdk-for-go/sdk/azidentity"
	"github.com/Azure/azure-sdk-for-go/sdk/resourcemanager/servicefabric/armservicefabric"
)

// x-ms-original-file: specification/servicefabric/resource-manager/Microsoft.ServiceFabric/stable/2021-06-01/examples/ApplicationGetOperation_example.json
func ExampleApplicationsClient_Get() {
	cred, err := azidentity.NewDefaultAzureCredential(nil)
	if err != nil {
		log.Fatalf("failed to obtain a credential: %v", err)
	}
	ctx := context.Background()
	client := armservicefabric.NewApplicationsClient("<subscription-id>", cred, nil)
	res, err := client.Get(ctx,
		"<resource-group-name>",
		"<cluster-name>",
		"<application-name>",
		nil)
	if err != nil {
		log.Fatal(err)
	}
	log.Printf("Response result: %#v\n", res.ApplicationsClientGetResult)
}

// x-ms-original-file: specification/servicefabric/resource-manager/Microsoft.ServiceFabric/stable/2021-06-01/examples/ApplicationPutOperation_example_max.json
func ExampleApplicationsClient_BeginCreateOrUpdate() {
	cred, err := azidentity.NewDefaultAzureCredential(nil)
	if err != nil {
		log.Fatalf("failed to obtain a credential: %v", err)
	}
	ctx := context.Background()
	client := armservicefabric.NewApplicationsClient("<subscription-id>", cred, nil)
	poller, err := client.BeginCreateOrUpdate(ctx,
		"<resource-group-name>",
		"<cluster-name>",
		"<application-name>",
		armservicefabric.ApplicationResource{
			Tags: map[string]*string{},
			Properties: &armservicefabric.ApplicationResourceProperties{
				MaximumNodes: to.Int64Ptr(3),
				Metrics: []*armservicefabric.ApplicationMetricDescription{
					{
						Name:                     to.StringPtr("<name>"),
						MaximumCapacity:          to.Int64Ptr(3),
						ReservationCapacity:      to.Int64Ptr(1),
						TotalApplicationCapacity: to.Int64Ptr(5),
					}},
				MinimumNodes: to.Int64Ptr(1),
				Parameters: map[string]*string{
					"param1": to.StringPtr("value1"),
				},
				RemoveApplicationCapacity: to.BoolPtr(false),
				TypeVersion:               to.StringPtr("<type-version>"),
				UpgradePolicy: &armservicefabric.ApplicationUpgradePolicy{
					ApplicationHealthPolicy: &armservicefabric.ArmApplicationHealthPolicy{
						ConsiderWarningAsError: to.BoolPtr(true),
						DefaultServiceTypeHealthPolicy: &armservicefabric.ArmServiceTypeHealthPolicy{
							MaxPercentUnhealthyPartitionsPerService: to.Int32Ptr(0),
							MaxPercentUnhealthyReplicasPerPartition: to.Int32Ptr(0),
							MaxPercentUnhealthyServices:             to.Int32Ptr(0),
						},
						MaxPercentUnhealthyDeployedApplications: to.Int32Ptr(0),
					},
					ForceRestart: to.BoolPtr(false),
					RollingUpgradeMonitoringPolicy: &armservicefabric.ArmRollingUpgradeMonitoringPolicy{
						FailureAction:             armservicefabric.ArmUpgradeFailureAction("Rollback").ToPtr(),
						HealthCheckRetryTimeout:   to.StringPtr("<health-check-retry-timeout>"),
						HealthCheckStableDuration: to.StringPtr("<health-check-stable-duration>"),
						HealthCheckWaitDuration:   to.StringPtr("<health-check-wait-duration>"),
						UpgradeDomainTimeout:      to.StringPtr("<upgrade-domain-timeout>"),
						UpgradeTimeout:            to.StringPtr("<upgrade-timeout>"),
					},
					UpgradeMode:                   armservicefabric.RollingUpgradeMode("Monitored").ToPtr(),
					UpgradeReplicaSetCheckTimeout: to.StringPtr("<upgrade-replica-set-check-timeout>"),
				},
				TypeName: to.StringPtr("<type-name>"),
			},
		},
		nil)
	if err != nil {
		log.Fatal(err)
	}
	_, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		log.Fatal(err)
	}
}

// x-ms-original-file: specification/servicefabric/resource-manager/Microsoft.ServiceFabric/stable/2021-06-01/examples/ApplicationPatchOperation_example.json
func ExampleApplicationsClient_BeginUpdate() {
	cred, err := azidentity.NewDefaultAzureCredential(nil)
	if err != nil {
		log.Fatalf("failed to obtain a credential: %v", err)
	}
	ctx := context.Background()
	client := armservicefabric.NewApplicationsClient("<subscription-id>", cred, nil)
	poller, err := client.BeginUpdate(ctx,
		"<resource-group-name>",
		"<cluster-name>",
		"<application-name>",
		armservicefabric.ApplicationResourceUpdate{
			Location: to.StringPtr("<location>"),
			Tags:     map[string]*string{},
			Properties: &armservicefabric.ApplicationResourceUpdateProperties{
				Metrics: []*armservicefabric.ApplicationMetricDescription{
					{
						Name:                     to.StringPtr("<name>"),
						MaximumCapacity:          to.Int64Ptr(3),
						ReservationCapacity:      to.Int64Ptr(1),
						TotalApplicationCapacity: to.Int64Ptr(5),
					}},
				RemoveApplicationCapacity: to.BoolPtr(false),
				TypeVersion:               to.StringPtr("<type-version>"),
			},
		},
		nil)
	if err != nil {
		log.Fatal(err)
	}
	_, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		log.Fatal(err)
	}
}

// x-ms-original-file: specification/servicefabric/resource-manager/Microsoft.ServiceFabric/stable/2021-06-01/examples/ApplicationDeleteOperation_example.json
func ExampleApplicationsClient_BeginDelete() {
	cred, err := azidentity.NewDefaultAzureCredential(nil)
	if err != nil {
		log.Fatalf("failed to obtain a credential: %v", err)
	}
	ctx := context.Background()
	client := armservicefabric.NewApplicationsClient("<subscription-id>", cred, nil)
	poller, err := client.BeginDelete(ctx,
		"<resource-group-name>",
		"<cluster-name>",
		"<application-name>",
		nil)
	if err != nil {
		log.Fatal(err)
	}
	_, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		log.Fatal(err)
	}
}

// x-ms-original-file: specification/servicefabric/resource-manager/Microsoft.ServiceFabric/stable/2021-06-01/examples/ApplicationListOperation_example.json
func ExampleApplicationsClient_List() {
	cred, err := azidentity.NewDefaultAzureCredential(nil)
	if err != nil {
		log.Fatalf("failed to obtain a credential: %v", err)
	}
	ctx := context.Background()
	client := armservicefabric.NewApplicationsClient("<subscription-id>", cred, nil)
	res, err := client.List(ctx,
		"<resource-group-name>",
		"<cluster-name>",
		nil)
	if err != nil {
		log.Fatal(err)
	}
	log.Printf("Response result: %#v\n", res.ApplicationsClientListResult)
}
