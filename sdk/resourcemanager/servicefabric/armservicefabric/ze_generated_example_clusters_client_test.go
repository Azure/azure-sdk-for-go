//go:build go1.18
// +build go1.18

// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

package armservicefabric_test

import (
	"context"
	"log"

	"time"

	"github.com/Azure/azure-sdk-for-go/sdk/azcore/to"
	"github.com/Azure/azure-sdk-for-go/sdk/azidentity"
	"github.com/Azure/azure-sdk-for-go/sdk/resourcemanager/servicefabric/armservicefabric"
)

// Generated from example definition: https://github.com/Azure/azure-rest-api-specs/tree/main/specification/servicefabric/resource-manager/Microsoft.ServiceFabric/stable/2021-06-01/examples/ClusterGetOperation_example.json
func ExampleClustersClient_Get() {
	cred, err := azidentity.NewDefaultAzureCredential(nil)
	if err != nil {
		log.Fatalf("failed to obtain a credential: %v", err)
		return
	}
	ctx := context.Background()
	client, err := armservicefabric.NewClustersClient("<subscription-id>", cred, nil)
	if err != nil {
		log.Fatalf("failed to create client: %v", err)
		return
	}
	res, err := client.Get(ctx,
		"<resource-group-name>",
		"<cluster-name>",
		nil)
	if err != nil {
		log.Fatalf("failed to finish the request: %v", err)
		return
	}
	// TODO: use response item
	_ = res
}

// Generated from example definition: https://github.com/Azure/azure-rest-api-specs/tree/main/specification/servicefabric/resource-manager/Microsoft.ServiceFabric/stable/2021-06-01/examples/ClusterPutOperation_example_max.json
func ExampleClustersClient_BeginCreateOrUpdate() {
	cred, err := azidentity.NewDefaultAzureCredential(nil)
	if err != nil {
		log.Fatalf("failed to obtain a credential: %v", err)
		return
	}
	ctx := context.Background()
	client, err := armservicefabric.NewClustersClient("<subscription-id>", cred, nil)
	if err != nil {
		log.Fatalf("failed to create client: %v", err)
		return
	}
	poller, err := client.BeginCreateOrUpdate(ctx,
		"<resource-group-name>",
		"<cluster-name>",
		armservicefabric.Cluster{
			Location: to.Ptr("<location>"),
			Tags:     map[string]*string{},
			Properties: &armservicefabric.ClusterProperties{
				AddOnFeatures: []*armservicefabric.AddOnFeatures{
					to.Ptr(armservicefabric.AddOnFeaturesRepairManager),
					to.Ptr(armservicefabric.AddOnFeaturesDNSService),
					to.Ptr(armservicefabric.AddOnFeaturesBackupRestoreService),
					to.Ptr(armservicefabric.AddOnFeaturesResourceMonitorService)},
				ApplicationTypeVersionsCleanupPolicy: &armservicefabric.ApplicationTypeVersionsCleanupPolicy{
					MaxUnusedVersionsToKeep: to.Ptr[int64](2),
				},
				AzureActiveDirectory: &armservicefabric.AzureActiveDirectory{
					ClientApplication:  to.Ptr("<client-application>"),
					ClusterApplication: to.Ptr("<cluster-application>"),
					TenantID:           to.Ptr("<tenant-id>"),
				},
				CertificateCommonNames: &armservicefabric.ServerCertificateCommonNames{
					CommonNames: []*armservicefabric.ServerCertificateCommonName{
						{
							CertificateCommonName:       to.Ptr("<certificate-common-name>"),
							CertificateIssuerThumbprint: to.Ptr("<certificate-issuer-thumbprint>"),
						}},
					X509StoreName: to.Ptr(armservicefabric.StoreNameMy),
				},
				ClientCertificateCommonNames: []*armservicefabric.ClientCertificateCommonName{
					{
						CertificateCommonName:       to.Ptr("<certificate-common-name>"),
						CertificateIssuerThumbprint: to.Ptr("<certificate-issuer-thumbprint>"),
						IsAdmin:                     to.Ptr(true),
					}},
				ClientCertificateThumbprints: []*armservicefabric.ClientCertificateThumbprint{
					{
						CertificateThumbprint: to.Ptr("<certificate-thumbprint>"),
						IsAdmin:               to.Ptr(true),
					}},
				ClusterCodeVersion: to.Ptr("<cluster-code-version>"),
				DiagnosticsStorageAccountConfig: &armservicefabric.DiagnosticsStorageAccountConfig{
					BlobEndpoint:            to.Ptr("<blob-endpoint>"),
					ProtectedAccountKeyName: to.Ptr("<protected-account-key-name>"),
					QueueEndpoint:           to.Ptr("<queue-endpoint>"),
					StorageAccountName:      to.Ptr("<storage-account-name>"),
					TableEndpoint:           to.Ptr("<table-endpoint>"),
				},
				EventStoreServiceEnabled: to.Ptr(true),
				FabricSettings: []*armservicefabric.SettingsSectionDescription{
					{
						Name: to.Ptr("<name>"),
						Parameters: []*armservicefabric.SettingsParameterDescription{
							{
								Name:  to.Ptr("<name>"),
								Value: to.Ptr("<value>"),
							}},
					}},
				InfrastructureServiceManager: to.Ptr(true),
				ManagementEndpoint:           to.Ptr("<management-endpoint>"),
				NodeTypes: []*armservicefabric.NodeTypeDescription{
					{
						Name: to.Ptr("<name>"),
						ApplicationPorts: &armservicefabric.EndpointRangeDescription{
							EndPort:   to.Ptr[int32](30000),
							StartPort: to.Ptr[int32](20000),
						},
						ClientConnectionEndpointPort: to.Ptr[int32](19000),
						DurabilityLevel:              to.Ptr(armservicefabric.DurabilityLevelSilver),
						EphemeralPorts: &armservicefabric.EndpointRangeDescription{
							EndPort:   to.Ptr[int32](64000),
							StartPort: to.Ptr[int32](49000),
						},
						HTTPGatewayEndpointPort:   to.Ptr[int32](19007),
						IsPrimary:                 to.Ptr(true),
						IsStateless:               to.Ptr(false),
						MultipleAvailabilityZones: to.Ptr(true),
						VMInstanceCount:           to.Ptr[int32](5),
					}},
				Notifications: []*armservicefabric.Notification{
					{
						IsEnabled:            to.Ptr(true),
						NotificationCategory: to.Ptr(armservicefabric.NotificationCategoryWaveProgress),
						NotificationLevel:    to.Ptr(armservicefabric.NotificationLevelCritical),
						NotificationTargets: []*armservicefabric.NotificationTarget{
							{
								NotificationChannel: to.Ptr(armservicefabric.NotificationChannelEmailUser),
								Receivers: []*string{
									to.Ptr("****@microsoft.com"),
									to.Ptr("****@microsoft.com")},
							},
							{
								NotificationChannel: to.Ptr(armservicefabric.NotificationChannelEmailSubscription),
								Receivers: []*string{
									to.Ptr("Owner"),
									to.Ptr("AccountAdmin")},
							}},
					},
					{
						IsEnabled:            to.Ptr(true),
						NotificationCategory: to.Ptr(armservicefabric.NotificationCategoryWaveProgress),
						NotificationLevel:    to.Ptr(armservicefabric.NotificationLevelAll),
						NotificationTargets: []*armservicefabric.NotificationTarget{
							{
								NotificationChannel: to.Ptr(armservicefabric.NotificationChannelEmailUser),
								Receivers: []*string{
									to.Ptr("****@microsoft.com"),
									to.Ptr("****@microsoft.com")},
							},
							{
								NotificationChannel: to.Ptr(armservicefabric.NotificationChannelEmailSubscription),
								Receivers: []*string{
									to.Ptr("Owner"),
									to.Ptr("AccountAdmin")},
							}},
					}},
				ReliabilityLevel: to.Ptr(armservicefabric.ReliabilityLevelPlatinum),
				ReverseProxyCertificateCommonNames: &armservicefabric.ServerCertificateCommonNames{
					CommonNames: []*armservicefabric.ServerCertificateCommonName{
						{
							CertificateCommonName:       to.Ptr("<certificate-common-name>"),
							CertificateIssuerThumbprint: to.Ptr("<certificate-issuer-thumbprint>"),
						}},
					X509StoreName: to.Ptr(armservicefabric.StoreNameMy),
				},
				SfZonalUpgradeMode: to.Ptr(armservicefabric.SfZonalUpgradeModeHierarchical),
				UpgradeDescription: &armservicefabric.ClusterUpgradePolicy{
					DeltaHealthPolicy: &armservicefabric.ClusterUpgradeDeltaHealthPolicy{
						ApplicationDeltaHealthPolicies: map[string]*armservicefabric.ApplicationDeltaHealthPolicy{
							"fabric:/myApp1": {
								DefaultServiceTypeDeltaHealthPolicy: &armservicefabric.ServiceTypeDeltaHealthPolicy{
									MaxPercentDeltaUnhealthyServices: to.Ptr[int32](0),
								},
								ServiceTypeDeltaHealthPolicies: map[string]*armservicefabric.ServiceTypeDeltaHealthPolicy{
									"myServiceType1": {
										MaxPercentDeltaUnhealthyServices: to.Ptr[int32](0),
									},
								},
							},
						},
						MaxPercentDeltaUnhealthyApplications:       to.Ptr[int32](0),
						MaxPercentDeltaUnhealthyNodes:              to.Ptr[int32](0),
						MaxPercentUpgradeDomainDeltaUnhealthyNodes: to.Ptr[int32](0),
					},
					ForceRestart:              to.Ptr(false),
					HealthCheckRetryTimeout:   to.Ptr("<health-check-retry-timeout>"),
					HealthCheckStableDuration: to.Ptr("<health-check-stable-duration>"),
					HealthCheckWaitDuration:   to.Ptr("<health-check-wait-duration>"),
					HealthPolicy: &armservicefabric.ClusterHealthPolicy{
						ApplicationHealthPolicies: map[string]*armservicefabric.ApplicationHealthPolicy{
							"fabric:/myApp1": {
								DefaultServiceTypeHealthPolicy: &armservicefabric.ServiceTypeHealthPolicy{
									MaxPercentUnhealthyServices: to.Ptr[int32](0),
								},
								ServiceTypeHealthPolicies: map[string]*armservicefabric.ServiceTypeHealthPolicy{
									"myServiceType1": {
										MaxPercentUnhealthyServices: to.Ptr[int32](100),
									},
								},
							},
						},
						MaxPercentUnhealthyApplications: to.Ptr[int32](0),
						MaxPercentUnhealthyNodes:        to.Ptr[int32](0),
					},
					UpgradeDomainTimeout:          to.Ptr("<upgrade-domain-timeout>"),
					UpgradeReplicaSetCheckTimeout: to.Ptr("<upgrade-replica-set-check-timeout>"),
					UpgradeTimeout:                to.Ptr("<upgrade-timeout>"),
				},
				UpgradeMode:                   to.Ptr(armservicefabric.UpgradeModeManual),
				UpgradePauseEndTimestampUTC:   to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2021-06-25T22:00:00Z"); return t }()),
				UpgradePauseStartTimestampUTC: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2021-06-21T22:00:00Z"); return t }()),
				UpgradeWave:                   to.Ptr(armservicefabric.ClusterUpgradeCadenceWave1),
				VMImage:                       to.Ptr("<vmimage>"),
				VmssZonalUpgradeMode:          to.Ptr(armservicefabric.VmssZonalUpgradeModeParallel),
			},
		},
		&armservicefabric.ClustersClientBeginCreateOrUpdateOptions{ResumeToken: ""})
	if err != nil {
		log.Fatalf("failed to finish the request: %v", err)
		return
	}
	res, err := poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		log.Fatalf("failed to pull the result: %v", err)
		return
	}
	// TODO: use response item
	_ = res
}

// Generated from example definition: https://github.com/Azure/azure-rest-api-specs/tree/main/specification/servicefabric/resource-manager/Microsoft.ServiceFabric/stable/2021-06-01/examples/ClusterPatchOperation_example.json
func ExampleClustersClient_BeginUpdate() {
	cred, err := azidentity.NewDefaultAzureCredential(nil)
	if err != nil {
		log.Fatalf("failed to obtain a credential: %v", err)
		return
	}
	ctx := context.Background()
	client, err := armservicefabric.NewClustersClient("<subscription-id>", cred, nil)
	if err != nil {
		log.Fatalf("failed to create client: %v", err)
		return
	}
	poller, err := client.BeginUpdate(ctx,
		"<resource-group-name>",
		"<cluster-name>",
		armservicefabric.ClusterUpdateParameters{
			Properties: &armservicefabric.ClusterPropertiesUpdateParameters{
				EventStoreServiceEnabled: to.Ptr(true),
				NodeTypes: []*armservicefabric.NodeTypeDescription{
					{
						Name: to.Ptr("<name>"),
						ApplicationPorts: &armservicefabric.EndpointRangeDescription{
							EndPort:   to.Ptr[int32](30000),
							StartPort: to.Ptr[int32](20000),
						},
						ClientConnectionEndpointPort: to.Ptr[int32](19000),
						DurabilityLevel:              to.Ptr(armservicefabric.DurabilityLevelBronze),
						EphemeralPorts: &armservicefabric.EndpointRangeDescription{
							EndPort:   to.Ptr[int32](64000),
							StartPort: to.Ptr[int32](49000),
						},
						HTTPGatewayEndpointPort: to.Ptr[int32](19007),
						IsPrimary:               to.Ptr(true),
						VMInstanceCount:         to.Ptr[int32](5),
					},
					{
						Name: to.Ptr("<name>"),
						ApplicationPorts: &armservicefabric.EndpointRangeDescription{
							EndPort:   to.Ptr[int32](2000),
							StartPort: to.Ptr[int32](1000),
						},
						ClientConnectionEndpointPort: to.Ptr[int32](0),
						DurabilityLevel:              to.Ptr(armservicefabric.DurabilityLevelBronze),
						EphemeralPorts: &armservicefabric.EndpointRangeDescription{
							EndPort:   to.Ptr[int32](4000),
							StartPort: to.Ptr[int32](3000),
						},
						HTTPGatewayEndpointPort: to.Ptr[int32](0),
						IsPrimary:               to.Ptr(false),
						VMInstanceCount:         to.Ptr[int32](3),
					}},
				ReliabilityLevel:              to.Ptr(armservicefabric.ReliabilityLevelBronze),
				UpgradeMode:                   to.Ptr(armservicefabric.UpgradeModeAutomatic),
				UpgradePauseEndTimestampUTC:   to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2021-06-25T22:00:00Z"); return t }()),
				UpgradePauseStartTimestampUTC: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2021-06-21T22:00:00Z"); return t }()),
				UpgradeWave:                   to.Ptr(armservicefabric.ClusterUpgradeCadence("Wave")),
			},
			Tags: map[string]*string{
				"a": to.Ptr("b"),
			},
		},
		&armservicefabric.ClustersClientBeginUpdateOptions{ResumeToken: ""})
	if err != nil {
		log.Fatalf("failed to finish the request: %v", err)
		return
	}
	res, err := poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		log.Fatalf("failed to pull the result: %v", err)
		return
	}
	// TODO: use response item
	_ = res
}

// Generated from example definition: https://github.com/Azure/azure-rest-api-specs/tree/main/specification/servicefabric/resource-manager/Microsoft.ServiceFabric/stable/2021-06-01/examples/ClusterDeleteOperation_example.json
func ExampleClustersClient_Delete() {
	cred, err := azidentity.NewDefaultAzureCredential(nil)
	if err != nil {
		log.Fatalf("failed to obtain a credential: %v", err)
		return
	}
	ctx := context.Background()
	client, err := armservicefabric.NewClustersClient("<subscription-id>", cred, nil)
	if err != nil {
		log.Fatalf("failed to create client: %v", err)
		return
	}
	_, err = client.Delete(ctx,
		"<resource-group-name>",
		"<cluster-name>",
		nil)
	if err != nil {
		log.Fatalf("failed to finish the request: %v", err)
		return
	}
}

// Generated from example definition: https://github.com/Azure/azure-rest-api-specs/tree/main/specification/servicefabric/resource-manager/Microsoft.ServiceFabric/stable/2021-06-01/examples/ClusterListByResourceGroupOperation_example.json
func ExampleClustersClient_ListByResourceGroup() {
	cred, err := azidentity.NewDefaultAzureCredential(nil)
	if err != nil {
		log.Fatalf("failed to obtain a credential: %v", err)
		return
	}
	ctx := context.Background()
	client, err := armservicefabric.NewClustersClient("<subscription-id>", cred, nil)
	if err != nil {
		log.Fatalf("failed to create client: %v", err)
		return
	}
	res, err := client.ListByResourceGroup(ctx,
		"<resource-group-name>",
		nil)
	if err != nil {
		log.Fatalf("failed to finish the request: %v", err)
		return
	}
	// TODO: use response item
	_ = res
}

// Generated from example definition: https://github.com/Azure/azure-rest-api-specs/tree/main/specification/servicefabric/resource-manager/Microsoft.ServiceFabric/stable/2021-06-01/examples/ClusterListOperation_example.json
func ExampleClustersClient_List() {
	cred, err := azidentity.NewDefaultAzureCredential(nil)
	if err != nil {
		log.Fatalf("failed to obtain a credential: %v", err)
		return
	}
	ctx := context.Background()
	client, err := armservicefabric.NewClustersClient("<subscription-id>", cred, nil)
	if err != nil {
		log.Fatalf("failed to create client: %v", err)
		return
	}
	res, err := client.List(ctx,
		nil)
	if err != nil {
		log.Fatalf("failed to finish the request: %v", err)
		return
	}
	// TODO: use response item
	_ = res
}

// Generated from example definition: https://github.com/Azure/azure-rest-api-specs/tree/main/specification/servicefabric/resource-manager/Microsoft.ServiceFabric/stable/2021-06-01/examples/ListUpgradableVersionsMinMax_example.json
func ExampleClustersClient_ListUpgradableVersions() {
	cred, err := azidentity.NewDefaultAzureCredential(nil)
	if err != nil {
		log.Fatalf("failed to obtain a credential: %v", err)
		return
	}
	ctx := context.Background()
	client, err := armservicefabric.NewClustersClient("<subscription-id>", cred, nil)
	if err != nil {
		log.Fatalf("failed to create client: %v", err)
		return
	}
	res, err := client.ListUpgradableVersions(ctx,
		"<resource-group-name>",
		"<cluster-name>",
		&armservicefabric.ClustersClientListUpgradableVersionsOptions{VersionsDescription: nil})
	if err != nil {
		log.Fatalf("failed to finish the request: %v", err)
		return
	}
	// TODO: use response item
	_ = res
}
