//go:build go1.16
// +build go1.16

// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

package armservicefabric

import (
	"context"
	"net/http"
	"time"

	armruntime "github.com/Azure/azure-sdk-for-go/sdk/azcore/arm/runtime"
)

// ApplicationTypeVersionsCreateOrUpdatePollerResponse contains the response from method ApplicationTypeVersions.CreateOrUpdate.
type ApplicationTypeVersionsCreateOrUpdatePollerResponse struct {
	// Poller contains an initialized poller.
	Poller *ApplicationTypeVersionsCreateOrUpdatePoller

	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// PollUntilDone will poll the service endpoint until a terminal state is reached or an error is received.
func (l ApplicationTypeVersionsCreateOrUpdatePollerResponse) PollUntilDone(ctx context.Context, freq time.Duration) (ApplicationTypeVersionsCreateOrUpdateResponse, error) {
	respType := ApplicationTypeVersionsCreateOrUpdateResponse{}
	resp, err := l.Poller.pt.PollUntilDone(ctx, freq, &respType.ApplicationTypeVersionResource)
	if err != nil {
		return respType, err
	}
	respType.RawResponse = resp
	return respType, nil
}

// Resume rehydrates a ApplicationTypeVersionsCreateOrUpdatePollerResponse from the provided client and resume token.
func (l *ApplicationTypeVersionsCreateOrUpdatePollerResponse) Resume(ctx context.Context, client *ApplicationTypeVersionsClient, token string) error {
	pt, err := armruntime.NewPollerFromResumeToken("ApplicationTypeVersionsClient.CreateOrUpdate", token, client.pl, client.createOrUpdateHandleError)
	if err != nil {
		return err
	}
	poller := &ApplicationTypeVersionsCreateOrUpdatePoller{
		pt: pt,
	}
	resp, err := poller.Poll(ctx)
	if err != nil {
		return err
	}
	l.Poller = poller
	l.RawResponse = resp
	return nil
}

// ApplicationTypeVersionsCreateOrUpdateResponse contains the response from method ApplicationTypeVersions.CreateOrUpdate.
type ApplicationTypeVersionsCreateOrUpdateResponse struct {
	ApplicationTypeVersionsCreateOrUpdateResult
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// ApplicationTypeVersionsCreateOrUpdateResult contains the result from method ApplicationTypeVersions.CreateOrUpdate.
type ApplicationTypeVersionsCreateOrUpdateResult struct {
	ApplicationTypeVersionResource
}

// ApplicationTypeVersionsDeletePollerResponse contains the response from method ApplicationTypeVersions.Delete.
type ApplicationTypeVersionsDeletePollerResponse struct {
	// Poller contains an initialized poller.
	Poller *ApplicationTypeVersionsDeletePoller

	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// PollUntilDone will poll the service endpoint until a terminal state is reached or an error is received.
func (l ApplicationTypeVersionsDeletePollerResponse) PollUntilDone(ctx context.Context, freq time.Duration) (ApplicationTypeVersionsDeleteResponse, error) {
	respType := ApplicationTypeVersionsDeleteResponse{}
	resp, err := l.Poller.pt.PollUntilDone(ctx, freq, nil)
	if err != nil {
		return respType, err
	}
	respType.RawResponse = resp
	return respType, nil
}

// Resume rehydrates a ApplicationTypeVersionsDeletePollerResponse from the provided client and resume token.
func (l *ApplicationTypeVersionsDeletePollerResponse) Resume(ctx context.Context, client *ApplicationTypeVersionsClient, token string) error {
	pt, err := armruntime.NewPollerFromResumeToken("ApplicationTypeVersionsClient.Delete", token, client.pl, client.deleteHandleError)
	if err != nil {
		return err
	}
	poller := &ApplicationTypeVersionsDeletePoller{
		pt: pt,
	}
	resp, err := poller.Poll(ctx)
	if err != nil {
		return err
	}
	l.Poller = poller
	l.RawResponse = resp
	return nil
}

// ApplicationTypeVersionsDeleteResponse contains the response from method ApplicationTypeVersions.Delete.
type ApplicationTypeVersionsDeleteResponse struct {
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// ApplicationTypeVersionsGetResponse contains the response from method ApplicationTypeVersions.Get.
type ApplicationTypeVersionsGetResponse struct {
	ApplicationTypeVersionsGetResult
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// ApplicationTypeVersionsGetResult contains the result from method ApplicationTypeVersions.Get.
type ApplicationTypeVersionsGetResult struct {
	ApplicationTypeVersionResource
}

// ApplicationTypeVersionsListResponse contains the response from method ApplicationTypeVersions.List.
type ApplicationTypeVersionsListResponse struct {
	ApplicationTypeVersionsListResult
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// ApplicationTypeVersionsListResult contains the result from method ApplicationTypeVersions.List.
type ApplicationTypeVersionsListResult struct {
	ApplicationTypeVersionResourceList
}

// ApplicationTypesCreateOrUpdateResponse contains the response from method ApplicationTypes.CreateOrUpdate.
type ApplicationTypesCreateOrUpdateResponse struct {
	ApplicationTypesCreateOrUpdateResult
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// ApplicationTypesCreateOrUpdateResult contains the result from method ApplicationTypes.CreateOrUpdate.
type ApplicationTypesCreateOrUpdateResult struct {
	ApplicationTypeResource
}

// ApplicationTypesDeletePollerResponse contains the response from method ApplicationTypes.Delete.
type ApplicationTypesDeletePollerResponse struct {
	// Poller contains an initialized poller.
	Poller *ApplicationTypesDeletePoller

	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// PollUntilDone will poll the service endpoint until a terminal state is reached or an error is received.
func (l ApplicationTypesDeletePollerResponse) PollUntilDone(ctx context.Context, freq time.Duration) (ApplicationTypesDeleteResponse, error) {
	respType := ApplicationTypesDeleteResponse{}
	resp, err := l.Poller.pt.PollUntilDone(ctx, freq, nil)
	if err != nil {
		return respType, err
	}
	respType.RawResponse = resp
	return respType, nil
}

// Resume rehydrates a ApplicationTypesDeletePollerResponse from the provided client and resume token.
func (l *ApplicationTypesDeletePollerResponse) Resume(ctx context.Context, client *ApplicationTypesClient, token string) error {
	pt, err := armruntime.NewPollerFromResumeToken("ApplicationTypesClient.Delete", token, client.pl, client.deleteHandleError)
	if err != nil {
		return err
	}
	poller := &ApplicationTypesDeletePoller{
		pt: pt,
	}
	resp, err := poller.Poll(ctx)
	if err != nil {
		return err
	}
	l.Poller = poller
	l.RawResponse = resp
	return nil
}

// ApplicationTypesDeleteResponse contains the response from method ApplicationTypes.Delete.
type ApplicationTypesDeleteResponse struct {
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// ApplicationTypesGetResponse contains the response from method ApplicationTypes.Get.
type ApplicationTypesGetResponse struct {
	ApplicationTypesGetResult
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// ApplicationTypesGetResult contains the result from method ApplicationTypes.Get.
type ApplicationTypesGetResult struct {
	ApplicationTypeResource
}

// ApplicationTypesListResponse contains the response from method ApplicationTypes.List.
type ApplicationTypesListResponse struct {
	ApplicationTypesListResult
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// ApplicationTypesListResult contains the result from method ApplicationTypes.List.
type ApplicationTypesListResult struct {
	ApplicationTypeResourceList
}

// ApplicationsCreateOrUpdatePollerResponse contains the response from method Applications.CreateOrUpdate.
type ApplicationsCreateOrUpdatePollerResponse struct {
	// Poller contains an initialized poller.
	Poller *ApplicationsCreateOrUpdatePoller

	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// PollUntilDone will poll the service endpoint until a terminal state is reached or an error is received.
func (l ApplicationsCreateOrUpdatePollerResponse) PollUntilDone(ctx context.Context, freq time.Duration) (ApplicationsCreateOrUpdateResponse, error) {
	respType := ApplicationsCreateOrUpdateResponse{}
	resp, err := l.Poller.pt.PollUntilDone(ctx, freq, &respType.ApplicationResource)
	if err != nil {
		return respType, err
	}
	respType.RawResponse = resp
	return respType, nil
}

// Resume rehydrates a ApplicationsCreateOrUpdatePollerResponse from the provided client and resume token.
func (l *ApplicationsCreateOrUpdatePollerResponse) Resume(ctx context.Context, client *ApplicationsClient, token string) error {
	pt, err := armruntime.NewPollerFromResumeToken("ApplicationsClient.CreateOrUpdate", token, client.pl, client.createOrUpdateHandleError)
	if err != nil {
		return err
	}
	poller := &ApplicationsCreateOrUpdatePoller{
		pt: pt,
	}
	resp, err := poller.Poll(ctx)
	if err != nil {
		return err
	}
	l.Poller = poller
	l.RawResponse = resp
	return nil
}

// ApplicationsCreateOrUpdateResponse contains the response from method Applications.CreateOrUpdate.
type ApplicationsCreateOrUpdateResponse struct {
	ApplicationsCreateOrUpdateResult
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// ApplicationsCreateOrUpdateResult contains the result from method Applications.CreateOrUpdate.
type ApplicationsCreateOrUpdateResult struct {
	ApplicationResource
}

// ApplicationsDeletePollerResponse contains the response from method Applications.Delete.
type ApplicationsDeletePollerResponse struct {
	// Poller contains an initialized poller.
	Poller *ApplicationsDeletePoller

	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// PollUntilDone will poll the service endpoint until a terminal state is reached or an error is received.
func (l ApplicationsDeletePollerResponse) PollUntilDone(ctx context.Context, freq time.Duration) (ApplicationsDeleteResponse, error) {
	respType := ApplicationsDeleteResponse{}
	resp, err := l.Poller.pt.PollUntilDone(ctx, freq, nil)
	if err != nil {
		return respType, err
	}
	respType.RawResponse = resp
	return respType, nil
}

// Resume rehydrates a ApplicationsDeletePollerResponse from the provided client and resume token.
func (l *ApplicationsDeletePollerResponse) Resume(ctx context.Context, client *ApplicationsClient, token string) error {
	pt, err := armruntime.NewPollerFromResumeToken("ApplicationsClient.Delete", token, client.pl, client.deleteHandleError)
	if err != nil {
		return err
	}
	poller := &ApplicationsDeletePoller{
		pt: pt,
	}
	resp, err := poller.Poll(ctx)
	if err != nil {
		return err
	}
	l.Poller = poller
	l.RawResponse = resp
	return nil
}

// ApplicationsDeleteResponse contains the response from method Applications.Delete.
type ApplicationsDeleteResponse struct {
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// ApplicationsGetResponse contains the response from method Applications.Get.
type ApplicationsGetResponse struct {
	ApplicationsGetResult
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// ApplicationsGetResult contains the result from method Applications.Get.
type ApplicationsGetResult struct {
	ApplicationResource
}

// ApplicationsListResponse contains the response from method Applications.List.
type ApplicationsListResponse struct {
	ApplicationsListResult
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// ApplicationsListResult contains the result from method Applications.List.
type ApplicationsListResult struct {
	ApplicationResourceList
}

// ApplicationsUpdatePollerResponse contains the response from method Applications.Update.
type ApplicationsUpdatePollerResponse struct {
	// Poller contains an initialized poller.
	Poller *ApplicationsUpdatePoller

	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// PollUntilDone will poll the service endpoint until a terminal state is reached or an error is received.
func (l ApplicationsUpdatePollerResponse) PollUntilDone(ctx context.Context, freq time.Duration) (ApplicationsUpdateResponse, error) {
	respType := ApplicationsUpdateResponse{}
	resp, err := l.Poller.pt.PollUntilDone(ctx, freq, &respType.ApplicationResource)
	if err != nil {
		return respType, err
	}
	respType.RawResponse = resp
	return respType, nil
}

// Resume rehydrates a ApplicationsUpdatePollerResponse from the provided client and resume token.
func (l *ApplicationsUpdatePollerResponse) Resume(ctx context.Context, client *ApplicationsClient, token string) error {
	pt, err := armruntime.NewPollerFromResumeToken("ApplicationsClient.Update", token, client.pl, client.updateHandleError)
	if err != nil {
		return err
	}
	poller := &ApplicationsUpdatePoller{
		pt: pt,
	}
	resp, err := poller.Poll(ctx)
	if err != nil {
		return err
	}
	l.Poller = poller
	l.RawResponse = resp
	return nil
}

// ApplicationsUpdateResponse contains the response from method Applications.Update.
type ApplicationsUpdateResponse struct {
	ApplicationsUpdateResult
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// ApplicationsUpdateResult contains the result from method Applications.Update.
type ApplicationsUpdateResult struct {
	ApplicationResource
}

// ClusterVersionsGetByEnvironmentResponse contains the response from method ClusterVersions.GetByEnvironment.
type ClusterVersionsGetByEnvironmentResponse struct {
	ClusterVersionsGetByEnvironmentResult
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// ClusterVersionsGetByEnvironmentResult contains the result from method ClusterVersions.GetByEnvironment.
type ClusterVersionsGetByEnvironmentResult struct {
	ClusterCodeVersionsListResult
}

// ClusterVersionsGetResponse contains the response from method ClusterVersions.Get.
type ClusterVersionsGetResponse struct {
	ClusterVersionsGetResult
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// ClusterVersionsGetResult contains the result from method ClusterVersions.Get.
type ClusterVersionsGetResult struct {
	ClusterCodeVersionsListResult
}

// ClusterVersionsListByEnvironmentResponse contains the response from method ClusterVersions.ListByEnvironment.
type ClusterVersionsListByEnvironmentResponse struct {
	ClusterVersionsListByEnvironmentResult
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// ClusterVersionsListByEnvironmentResult contains the result from method ClusterVersions.ListByEnvironment.
type ClusterVersionsListByEnvironmentResult struct {
	ClusterCodeVersionsListResult
}

// ClusterVersionsListResponse contains the response from method ClusterVersions.List.
type ClusterVersionsListResponse struct {
	ClusterVersionsListResult
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// ClusterVersionsListResult contains the result from method ClusterVersions.List.
type ClusterVersionsListResult struct {
	ClusterCodeVersionsListResult
}

// ClustersCreateOrUpdatePollerResponse contains the response from method Clusters.CreateOrUpdate.
type ClustersCreateOrUpdatePollerResponse struct {
	// Poller contains an initialized poller.
	Poller *ClustersCreateOrUpdatePoller

	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// PollUntilDone will poll the service endpoint until a terminal state is reached or an error is received.
func (l ClustersCreateOrUpdatePollerResponse) PollUntilDone(ctx context.Context, freq time.Duration) (ClustersCreateOrUpdateResponse, error) {
	respType := ClustersCreateOrUpdateResponse{}
	resp, err := l.Poller.pt.PollUntilDone(ctx, freq, &respType.Cluster)
	if err != nil {
		return respType, err
	}
	respType.RawResponse = resp
	return respType, nil
}

// Resume rehydrates a ClustersCreateOrUpdatePollerResponse from the provided client and resume token.
func (l *ClustersCreateOrUpdatePollerResponse) Resume(ctx context.Context, client *ClustersClient, token string) error {
	pt, err := armruntime.NewPollerFromResumeToken("ClustersClient.CreateOrUpdate", token, client.pl, client.createOrUpdateHandleError)
	if err != nil {
		return err
	}
	poller := &ClustersCreateOrUpdatePoller{
		pt: pt,
	}
	resp, err := poller.Poll(ctx)
	if err != nil {
		return err
	}
	l.Poller = poller
	l.RawResponse = resp
	return nil
}

// ClustersCreateOrUpdateResponse contains the response from method Clusters.CreateOrUpdate.
type ClustersCreateOrUpdateResponse struct {
	ClustersCreateOrUpdateResult
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// ClustersCreateOrUpdateResult contains the result from method Clusters.CreateOrUpdate.
type ClustersCreateOrUpdateResult struct {
	Cluster
}

// ClustersDeleteResponse contains the response from method Clusters.Delete.
type ClustersDeleteResponse struct {
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// ClustersGetResponse contains the response from method Clusters.Get.
type ClustersGetResponse struct {
	ClustersGetResult
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// ClustersGetResult contains the result from method Clusters.Get.
type ClustersGetResult struct {
	Cluster
}

// ClustersListByResourceGroupResponse contains the response from method Clusters.ListByResourceGroup.
type ClustersListByResourceGroupResponse struct {
	ClustersListByResourceGroupResult
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// ClustersListByResourceGroupResult contains the result from method Clusters.ListByResourceGroup.
type ClustersListByResourceGroupResult struct {
	ClusterListResult
}

// ClustersListResponse contains the response from method Clusters.List.
type ClustersListResponse struct {
	ClustersListResult
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// ClustersListResult contains the result from method Clusters.List.
type ClustersListResult struct {
	ClusterListResult
}

// ClustersListUpgradableVersionsResponse contains the response from method Clusters.ListUpgradableVersions.
type ClustersListUpgradableVersionsResponse struct {
	ClustersListUpgradableVersionsResult
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// ClustersListUpgradableVersionsResult contains the result from method Clusters.ListUpgradableVersions.
type ClustersListUpgradableVersionsResult struct {
	UpgradableVersionPathResult
}

// ClustersUpdatePollerResponse contains the response from method Clusters.Update.
type ClustersUpdatePollerResponse struct {
	// Poller contains an initialized poller.
	Poller *ClustersUpdatePoller

	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// PollUntilDone will poll the service endpoint until a terminal state is reached or an error is received.
func (l ClustersUpdatePollerResponse) PollUntilDone(ctx context.Context, freq time.Duration) (ClustersUpdateResponse, error) {
	respType := ClustersUpdateResponse{}
	resp, err := l.Poller.pt.PollUntilDone(ctx, freq, &respType.Cluster)
	if err != nil {
		return respType, err
	}
	respType.RawResponse = resp
	return respType, nil
}

// Resume rehydrates a ClustersUpdatePollerResponse from the provided client and resume token.
func (l *ClustersUpdatePollerResponse) Resume(ctx context.Context, client *ClustersClient, token string) error {
	pt, err := armruntime.NewPollerFromResumeToken("ClustersClient.Update", token, client.pl, client.updateHandleError)
	if err != nil {
		return err
	}
	poller := &ClustersUpdatePoller{
		pt: pt,
	}
	resp, err := poller.Poll(ctx)
	if err != nil {
		return err
	}
	l.Poller = poller
	l.RawResponse = resp
	return nil
}

// ClustersUpdateResponse contains the response from method Clusters.Update.
type ClustersUpdateResponse struct {
	ClustersUpdateResult
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// ClustersUpdateResult contains the result from method Clusters.Update.
type ClustersUpdateResult struct {
	Cluster
}

// OperationsListResponse contains the response from method Operations.List.
type OperationsListResponse struct {
	OperationsListResult
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// OperationsListResult contains the result from method Operations.List.
type OperationsListResult struct {
	OperationListResult
}

// ServicesCreateOrUpdatePollerResponse contains the response from method Services.CreateOrUpdate.
type ServicesCreateOrUpdatePollerResponse struct {
	// Poller contains an initialized poller.
	Poller *ServicesCreateOrUpdatePoller

	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// PollUntilDone will poll the service endpoint until a terminal state is reached or an error is received.
func (l ServicesCreateOrUpdatePollerResponse) PollUntilDone(ctx context.Context, freq time.Duration) (ServicesCreateOrUpdateResponse, error) {
	respType := ServicesCreateOrUpdateResponse{}
	resp, err := l.Poller.pt.PollUntilDone(ctx, freq, &respType.ServiceResource)
	if err != nil {
		return respType, err
	}
	respType.RawResponse = resp
	return respType, nil
}

// Resume rehydrates a ServicesCreateOrUpdatePollerResponse from the provided client and resume token.
func (l *ServicesCreateOrUpdatePollerResponse) Resume(ctx context.Context, client *ServicesClient, token string) error {
	pt, err := armruntime.NewPollerFromResumeToken("ServicesClient.CreateOrUpdate", token, client.pl, client.createOrUpdateHandleError)
	if err != nil {
		return err
	}
	poller := &ServicesCreateOrUpdatePoller{
		pt: pt,
	}
	resp, err := poller.Poll(ctx)
	if err != nil {
		return err
	}
	l.Poller = poller
	l.RawResponse = resp
	return nil
}

// ServicesCreateOrUpdateResponse contains the response from method Services.CreateOrUpdate.
type ServicesCreateOrUpdateResponse struct {
	ServicesCreateOrUpdateResult
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// ServicesCreateOrUpdateResult contains the result from method Services.CreateOrUpdate.
type ServicesCreateOrUpdateResult struct {
	ServiceResource
}

// ServicesDeletePollerResponse contains the response from method Services.Delete.
type ServicesDeletePollerResponse struct {
	// Poller contains an initialized poller.
	Poller *ServicesDeletePoller

	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// PollUntilDone will poll the service endpoint until a terminal state is reached or an error is received.
func (l ServicesDeletePollerResponse) PollUntilDone(ctx context.Context, freq time.Duration) (ServicesDeleteResponse, error) {
	respType := ServicesDeleteResponse{}
	resp, err := l.Poller.pt.PollUntilDone(ctx, freq, nil)
	if err != nil {
		return respType, err
	}
	respType.RawResponse = resp
	return respType, nil
}

// Resume rehydrates a ServicesDeletePollerResponse from the provided client and resume token.
func (l *ServicesDeletePollerResponse) Resume(ctx context.Context, client *ServicesClient, token string) error {
	pt, err := armruntime.NewPollerFromResumeToken("ServicesClient.Delete", token, client.pl, client.deleteHandleError)
	if err != nil {
		return err
	}
	poller := &ServicesDeletePoller{
		pt: pt,
	}
	resp, err := poller.Poll(ctx)
	if err != nil {
		return err
	}
	l.Poller = poller
	l.RawResponse = resp
	return nil
}

// ServicesDeleteResponse contains the response from method Services.Delete.
type ServicesDeleteResponse struct {
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// ServicesGetResponse contains the response from method Services.Get.
type ServicesGetResponse struct {
	ServicesGetResult
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// ServicesGetResult contains the result from method Services.Get.
type ServicesGetResult struct {
	ServiceResource
}

// ServicesListResponse contains the response from method Services.List.
type ServicesListResponse struct {
	ServicesListResult
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// ServicesListResult contains the result from method Services.List.
type ServicesListResult struct {
	ServiceResourceList
}

// ServicesUpdatePollerResponse contains the response from method Services.Update.
type ServicesUpdatePollerResponse struct {
	// Poller contains an initialized poller.
	Poller *ServicesUpdatePoller

	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// PollUntilDone will poll the service endpoint until a terminal state is reached or an error is received.
func (l ServicesUpdatePollerResponse) PollUntilDone(ctx context.Context, freq time.Duration) (ServicesUpdateResponse, error) {
	respType := ServicesUpdateResponse{}
	resp, err := l.Poller.pt.PollUntilDone(ctx, freq, &respType.ServiceResource)
	if err != nil {
		return respType, err
	}
	respType.RawResponse = resp
	return respType, nil
}

// Resume rehydrates a ServicesUpdatePollerResponse from the provided client and resume token.
func (l *ServicesUpdatePollerResponse) Resume(ctx context.Context, client *ServicesClient, token string) error {
	pt, err := armruntime.NewPollerFromResumeToken("ServicesClient.Update", token, client.pl, client.updateHandleError)
	if err != nil {
		return err
	}
	poller := &ServicesUpdatePoller{
		pt: pt,
	}
	resp, err := poller.Poll(ctx)
	if err != nil {
		return err
	}
	l.Poller = poller
	l.RawResponse = resp
	return nil
}

// ServicesUpdateResponse contains the response from method Services.Update.
type ServicesUpdateResponse struct {
	ServicesUpdateResult
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// ServicesUpdateResult contains the result from method Services.Update.
type ServicesUpdateResult struct {
	ServiceResource
}
