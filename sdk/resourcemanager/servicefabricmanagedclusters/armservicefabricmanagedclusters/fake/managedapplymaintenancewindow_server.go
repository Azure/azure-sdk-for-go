//go:build go1.18
// +build go1.18

// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator. DO NOT EDIT.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

package fake

import (
	"context"
	"errors"
	"fmt"
	azfake "github.com/Azure/azure-sdk-for-go/sdk/azcore/fake"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/fake/server"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/runtime"
	"github.com/Azure/azure-sdk-for-go/sdk/resourcemanager/servicefabricmanagedclusters/armservicefabricmanagedclusters"
	"net/http"
	"net/url"
	"regexp"
)

// ManagedApplyMaintenanceWindowServer is a fake server for instances of the armservicefabricmanagedclusters.ManagedApplyMaintenanceWindowClient type.
type ManagedApplyMaintenanceWindowServer struct {
	// Post is the fake for method ManagedApplyMaintenanceWindowClient.Post
	// HTTP status codes to indicate success: http.StatusOK
	Post func(ctx context.Context, resourceGroupName string, clusterName string, options *armservicefabricmanagedclusters.ManagedApplyMaintenanceWindowClientPostOptions) (resp azfake.Responder[armservicefabricmanagedclusters.ManagedApplyMaintenanceWindowClientPostResponse], errResp azfake.ErrorResponder)
}

// NewManagedApplyMaintenanceWindowServerTransport creates a new instance of ManagedApplyMaintenanceWindowServerTransport with the provided implementation.
// The returned ManagedApplyMaintenanceWindowServerTransport instance is connected to an instance of armservicefabricmanagedclusters.ManagedApplyMaintenanceWindowClient via the
// azcore.ClientOptions.Transporter field in the client's constructor parameters.
func NewManagedApplyMaintenanceWindowServerTransport(srv *ManagedApplyMaintenanceWindowServer) *ManagedApplyMaintenanceWindowServerTransport {
	return &ManagedApplyMaintenanceWindowServerTransport{srv: srv}
}

// ManagedApplyMaintenanceWindowServerTransport connects instances of armservicefabricmanagedclusters.ManagedApplyMaintenanceWindowClient to instances of ManagedApplyMaintenanceWindowServer.
// Don't use this type directly, use NewManagedApplyMaintenanceWindowServerTransport instead.
type ManagedApplyMaintenanceWindowServerTransport struct {
	srv *ManagedApplyMaintenanceWindowServer
}

// Do implements the policy.Transporter interface for ManagedApplyMaintenanceWindowServerTransport.
func (m *ManagedApplyMaintenanceWindowServerTransport) Do(req *http.Request) (*http.Response, error) {
	rawMethod := req.Context().Value(runtime.CtxAPINameKey{})
	method, ok := rawMethod.(string)
	if !ok {
		return nil, nonRetriableError{errors.New("unable to dispatch request, missing value for CtxAPINameKey")}
	}

	var resp *http.Response
	var err error

	switch method {
	case "ManagedApplyMaintenanceWindowClient.Post":
		resp, err = m.dispatchPost(req)
	default:
		err = fmt.Errorf("unhandled API %s", method)
	}

	if err != nil {
		return nil, err
	}

	return resp, nil
}

func (m *ManagedApplyMaintenanceWindowServerTransport) dispatchPost(req *http.Request) (*http.Response, error) {
	if m.srv.Post == nil {
		return nil, &nonRetriableError{errors.New("fake for method Post not implemented")}
	}
	const regexStr = `/subscriptions/(?P<subscriptionId>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/resourceGroups/(?P<resourceGroupName>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/providers/Microsoft\.ServiceFabric/managedClusters/(?P<clusterName>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/applyMaintenanceWindow`
	regex := regexp.MustCompile(regexStr)
	matches := regex.FindStringSubmatch(req.URL.EscapedPath())
	if matches == nil || len(matches) < 3 {
		return nil, fmt.Errorf("failed to parse path %s", req.URL.Path)
	}
	resourceGroupNameParam, err := url.PathUnescape(matches[regex.SubexpIndex("resourceGroupName")])
	if err != nil {
		return nil, err
	}
	clusterNameParam, err := url.PathUnescape(matches[regex.SubexpIndex("clusterName")])
	if err != nil {
		return nil, err
	}
	respr, errRespr := m.srv.Post(req.Context(), resourceGroupNameParam, clusterNameParam, nil)
	if respErr := server.GetError(errRespr, req); respErr != nil {
		return nil, respErr
	}
	respContent := server.GetResponseContent(respr)
	if !contains([]int{http.StatusOK}, respContent.HTTPStatus) {
		return nil, &nonRetriableError{fmt.Errorf("unexpected status code %d. acceptable values are http.StatusOK", respContent.HTTPStatus)}
	}
	resp, err := server.NewResponse(respContent, req, nil)
	if err != nil {
		return nil, err
	}
	return resp, nil
}
