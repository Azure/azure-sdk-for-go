//go:build go1.18
// +build go1.18

// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.
// DO NOT EDIT.

package armservicefabricmanagedclusters_test

import (
	"context"
	"log"

	"github.com/Azure/azure-sdk-for-go/sdk/azcore/to"
	"github.com/Azure/azure-sdk-for-go/sdk/azidentity"
	"github.com/Azure/azure-sdk-for-go/sdk/resourcemanager/servicefabricmanagedclusters/armservicefabricmanagedclusters"
)

// Generated from example definition: https://github.com/Azure/azure-rest-api-specs/blob/366aaa13cdd218b9adac716680e49473673410c8/specification/servicefabricmanagedclusters/resource-manager/Microsoft.ServiceFabric/preview/2024-06-01-preview/examples/ManagedClusterListByResourceGroupOperation_example.json
func ExampleManagedClustersClient_NewListByResourceGroupPager() {
	cred, err := azidentity.NewDefaultAzureCredential(nil)
	if err != nil {
		log.Fatalf("failed to obtain a credential: %v", err)
	}
	ctx := context.Background()
	clientFactory, err := armservicefabricmanagedclusters.NewClientFactory("<subscription-id>", cred, nil)
	if err != nil {
		log.Fatalf("failed to create client: %v", err)
	}
	pager := clientFactory.NewManagedClustersClient().NewListByResourceGroupPager("resRg", nil)
	for pager.More() {
		page, err := pager.NextPage(ctx)
		if err != nil {
			log.Fatalf("failed to advance page: %v", err)
		}
		for _, v := range page.Value {
			// You could use page here. We use blank identifier for just demo purposes.
			_ = v
		}
		// If the HTTP response code is 200 as defined in example definition, your page structure would look as follows. Please pay attention that all the values in the output are fake values for just demo purposes.
		// page.ManagedClusterListResult = armservicefabricmanagedclusters.ManagedClusterListResult{
		// 	Value: []*armservicefabricmanagedclusters.ManagedCluster{
		// 		{
		// 			Name: to.Ptr("myCluster"),
		// 			Type: to.Ptr("Microsoft.ServiceFabric/managedClusters"),
		// 			Etag: to.Ptr("W/\"636462502169240745\""),
		// 			ID: to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000000/resourcegroups/resRg/providers/Microsoft.ServiceFabric/managedClusters/myCluster"),
		// 			Location: to.Ptr("eastus"),
		// 			Tags: map[string]*string{
		// 			},
		// 			Properties: &armservicefabricmanagedclusters.ManagedClusterProperties{
		// 				AdminUserName: to.Ptr("vmadmin"),
		// 				ClientConnectionPort: to.Ptr[int32](19000),
		// 				ClusterCertificateThumbprints: []*string{
		// 					to.Ptr("12599211F8F14C90AFA9532AD79A6F2CA1C00622")},
		// 					ClusterCodeVersion: to.Ptr("7.1.168.9494"),
		// 					ClusterID: to.Ptr("92584666-9889-4ae8-8d02-91902923d37f"),
		// 					ClusterState: to.Ptr(armservicefabricmanagedclusters.ClusterStateWaitingForNodes),
		// 					ClusterUpgradeCadence: to.Ptr(armservicefabricmanagedclusters.ClusterUpgradeCadenceWave0),
		// 					ClusterUpgradeMode: to.Ptr(armservicefabricmanagedclusters.ClusterUpgradeModeAutomatic),
		// 					DNSName: to.Ptr("myCluster"),
		// 					FabricSettings: []*armservicefabricmanagedclusters.SettingsSectionDescription{
		// 						{
		// 							Name: to.Ptr("ManagedIdentityTokenService"),
		// 							Parameters: []*armservicefabricmanagedclusters.SettingsParameterDescription{
		// 								{
		// 									Name: to.Ptr("IsEnabled"),
		// 									Value: to.Ptr("true"),
		// 							}},
		// 					}},
		// 					Fqdn: to.Ptr("MyCluster.eastus.cloudapp.azure.com"),
		// 					HTTPGatewayConnectionPort: to.Ptr[int32](19080),
		// 					LoadBalancingRules: []*armservicefabricmanagedclusters.LoadBalancingRule{
		// 					},
		// 					ProvisioningState: to.Ptr(armservicefabricmanagedclusters.ManagedResourceProvisioningStateSucceeded),
		// 				},
		// 				SKU: &armservicefabricmanagedclusters.SKU{
		// 					Name: to.Ptr(armservicefabricmanagedclusters.SKUNameStandard),
		// 				},
		// 			},
		// 			{
		// 				Name: to.Ptr("myCluster2"),
		// 				Type: to.Ptr("Microsoft.ServiceFabric/managedClusters"),
		// 				Etag: to.Ptr("W/\"636462502164040075\""),
		// 				ID: to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000000/resourcegroups/resRg/providers/Microsoft.ServiceFabric/managedClusters/myCluster2"),
		// 				Location: to.Ptr("eastus"),
		// 				Tags: map[string]*string{
		// 				},
		// 				Properties: &armservicefabricmanagedclusters.ManagedClusterProperties{
		// 					AdminUserName: to.Ptr("vmadmin"),
		// 					ClientConnectionPort: to.Ptr[int32](19000),
		// 					ClusterCertificateThumbprints: []*string{
		// 						to.Ptr("12599211F8F14C90AFA9532AD79A6F2CA1C00622")},
		// 						ClusterCodeVersion: to.Ptr("7.1.168.9494"),
		// 						ClusterID: to.Ptr("2747e469-b24e-4039-8a0a-46151419523f"),
		// 						ClusterState: to.Ptr(armservicefabricmanagedclusters.ClusterStateWaitingForNodes),
		// 						ClusterUpgradeCadence: to.Ptr(armservicefabricmanagedclusters.ClusterUpgradeCadenceWave0),
		// 						ClusterUpgradeMode: to.Ptr(armservicefabricmanagedclusters.ClusterUpgradeModeAutomatic),
		// 						DNSName: to.Ptr("myCluster2"),
		// 						FabricSettings: []*armservicefabricmanagedclusters.SettingsSectionDescription{
		// 							{
		// 								Name: to.Ptr("ManagedIdentityTokenService"),
		// 								Parameters: []*armservicefabricmanagedclusters.SettingsParameterDescription{
		// 									{
		// 										Name: to.Ptr("IsEnabled"),
		// 										Value: to.Ptr("true"),
		// 								}},
		// 						}},
		// 						Fqdn: to.Ptr("MyCluster.eastus.cloudapp.azure.com"),
		// 						HTTPGatewayConnectionPort: to.Ptr[int32](19080),
		// 						LoadBalancingRules: []*armservicefabricmanagedclusters.LoadBalancingRule{
		// 						},
		// 						ProvisioningState: to.Ptr(armservicefabricmanagedclusters.ManagedResourceProvisioningStateSucceeded),
		// 					},
		// 					SKU: &armservicefabricmanagedclusters.SKU{
		// 						Name: to.Ptr(armservicefabricmanagedclusters.SKUNameStandard),
		// 					},
		// 			}},
		// 		}
	}
}

// Generated from example definition: https://github.com/Azure/azure-rest-api-specs/blob/366aaa13cdd218b9adac716680e49473673410c8/specification/servicefabricmanagedclusters/resource-manager/Microsoft.ServiceFabric/preview/2024-06-01-preview/examples/ManagedClusterListBySubscriptionOperation_example.json
func ExampleManagedClustersClient_NewListBySubscriptionPager() {
	cred, err := azidentity.NewDefaultAzureCredential(nil)
	if err != nil {
		log.Fatalf("failed to obtain a credential: %v", err)
	}
	ctx := context.Background()
	clientFactory, err := armservicefabricmanagedclusters.NewClientFactory("<subscription-id>", cred, nil)
	if err != nil {
		log.Fatalf("failed to create client: %v", err)
	}
	pager := clientFactory.NewManagedClustersClient().NewListBySubscriptionPager(nil)
	for pager.More() {
		page, err := pager.NextPage(ctx)
		if err != nil {
			log.Fatalf("failed to advance page: %v", err)
		}
		for _, v := range page.Value {
			// You could use page here. We use blank identifier for just demo purposes.
			_ = v
		}
		// If the HTTP response code is 200 as defined in example definition, your page structure would look as follows. Please pay attention that all the values in the output are fake values for just demo purposes.
		// page.ManagedClusterListResult = armservicefabricmanagedclusters.ManagedClusterListResult{
		// 	Value: []*armservicefabricmanagedclusters.ManagedCluster{
		// 		{
		// 			Name: to.Ptr("myCluster"),
		// 			Type: to.Ptr("Microsoft.ServiceFabric/managedClusters"),
		// 			Etag: to.Ptr("W/\"636462502169240745\""),
		// 			ID: to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000000/resourcegroups/resRg/providers/Microsoft.ServiceFabric/managedClusters/myCluster"),
		// 			Location: to.Ptr("eastus"),
		// 			Tags: map[string]*string{
		// 			},
		// 			Properties: &armservicefabricmanagedclusters.ManagedClusterProperties{
		// 				AdminUserName: to.Ptr("vmadmin"),
		// 				ClientConnectionPort: to.Ptr[int32](19000),
		// 				ClusterCertificateThumbprints: []*string{
		// 					to.Ptr("12599211F8F14C90AFA9532AD79A6F2CA1C00622")},
		// 					ClusterCodeVersion: to.Ptr("7.1.168.9494"),
		// 					ClusterID: to.Ptr("92584666-9889-4ae8-8d02-91902923d37f"),
		// 					ClusterState: to.Ptr(armservicefabricmanagedclusters.ClusterStateWaitingForNodes),
		// 					ClusterUpgradeCadence: to.Ptr(armservicefabricmanagedclusters.ClusterUpgradeCadenceWave0),
		// 					ClusterUpgradeMode: to.Ptr(armservicefabricmanagedclusters.ClusterUpgradeModeAutomatic),
		// 					DNSName: to.Ptr("myCluster"),
		// 					FabricSettings: []*armservicefabricmanagedclusters.SettingsSectionDescription{
		// 						{
		// 							Name: to.Ptr("ManagedIdentityTokenService"),
		// 							Parameters: []*armservicefabricmanagedclusters.SettingsParameterDescription{
		// 								{
		// 									Name: to.Ptr("IsEnabled"),
		// 									Value: to.Ptr("true"),
		// 							}},
		// 					}},
		// 					Fqdn: to.Ptr("MyCluster.eastus.cloudapp.azure.com"),
		// 					HTTPGatewayConnectionPort: to.Ptr[int32](19080),
		// 					LoadBalancingRules: []*armservicefabricmanagedclusters.LoadBalancingRule{
		// 					},
		// 					ProvisioningState: to.Ptr(armservicefabricmanagedclusters.ManagedResourceProvisioningStateSucceeded),
		// 				},
		// 				SKU: &armservicefabricmanagedclusters.SKU{
		// 					Name: to.Ptr(armservicefabricmanagedclusters.SKUNameStandard),
		// 				},
		// 			},
		// 			{
		// 				Name: to.Ptr("myCluster2"),
		// 				Type: to.Ptr("Microsoft.ServiceFabric/managedClusters"),
		// 				Etag: to.Ptr("W/\"636462502164040075\""),
		// 				ID: to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000000/resourcegroups/resRg/providers/Microsoft.ServiceFabric/managedClusters/myCluster2"),
		// 				Location: to.Ptr("eastus"),
		// 				Tags: map[string]*string{
		// 				},
		// 				Properties: &armservicefabricmanagedclusters.ManagedClusterProperties{
		// 					AdminUserName: to.Ptr("vmadmin"),
		// 					ClientConnectionPort: to.Ptr[int32](19000),
		// 					ClusterCertificateThumbprints: []*string{
		// 						to.Ptr("12599211F8F14C90AFA9532AD79A6F2CA1C00622")},
		// 						ClusterCodeVersion: to.Ptr("7.1.168.9494"),
		// 						ClusterID: to.Ptr("2747e469-b24e-4039-8a0a-46151419523f"),
		// 						ClusterState: to.Ptr(armservicefabricmanagedclusters.ClusterStateWaitingForNodes),
		// 						ClusterUpgradeCadence: to.Ptr(armservicefabricmanagedclusters.ClusterUpgradeCadenceWave0),
		// 						ClusterUpgradeMode: to.Ptr(armservicefabricmanagedclusters.ClusterUpgradeModeAutomatic),
		// 						DNSName: to.Ptr("myCluster2"),
		// 						FabricSettings: []*armservicefabricmanagedclusters.SettingsSectionDescription{
		// 							{
		// 								Name: to.Ptr("ManagedIdentityTokenService"),
		// 								Parameters: []*armservicefabricmanagedclusters.SettingsParameterDescription{
		// 									{
		// 										Name: to.Ptr("IsEnabled"),
		// 										Value: to.Ptr("true"),
		// 								}},
		// 						}},
		// 						Fqdn: to.Ptr("MyCluster.eastus.cloudapp.azure.com"),
		// 						HTTPGatewayConnectionPort: to.Ptr[int32](19080),
		// 						LoadBalancingRules: []*armservicefabricmanagedclusters.LoadBalancingRule{
		// 						},
		// 						ProvisioningState: to.Ptr(armservicefabricmanagedclusters.ManagedResourceProvisioningStateSucceeded),
		// 					},
		// 					SKU: &armservicefabricmanagedclusters.SKU{
		// 						Name: to.Ptr(armservicefabricmanagedclusters.SKUNameStandard),
		// 					},
		// 			}},
		// 		}
	}
}

// Generated from example definition: https://github.com/Azure/azure-rest-api-specs/blob/366aaa13cdd218b9adac716680e49473673410c8/specification/servicefabricmanagedclusters/resource-manager/Microsoft.ServiceFabric/preview/2024-06-01-preview/examples/ManagedClusterGetOperation_example.json
func ExampleManagedClustersClient_Get() {
	cred, err := azidentity.NewDefaultAzureCredential(nil)
	if err != nil {
		log.Fatalf("failed to obtain a credential: %v", err)
	}
	ctx := context.Background()
	clientFactory, err := armservicefabricmanagedclusters.NewClientFactory("<subscription-id>", cred, nil)
	if err != nil {
		log.Fatalf("failed to create client: %v", err)
	}
	res, err := clientFactory.NewManagedClustersClient().Get(ctx, "resRg", "myCluster", nil)
	if err != nil {
		log.Fatalf("failed to finish the request: %v", err)
	}
	// You could use response here. We use blank identifier for just demo purposes.
	_ = res
	// If the HTTP response code is 200 as defined in example definition, your response structure would look as follows. Please pay attention that all the values in the output are fake values for just demo purposes.
	// res.ManagedCluster = armservicefabricmanagedclusters.ManagedCluster{
	// 	Name: to.Ptr("myCluster"),
	// 	Type: to.Ptr("Microsoft.ServiceFabric/managedClusters"),
	// 	Etag: to.Ptr("W/\"636462502169240745\""),
	// 	ID: to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000000/resourcegroups/resRg/providers/Microsoft.ServiceFabric/managedClusters/myCluster"),
	// 	Location: to.Ptr("eastus"),
	// 	Tags: map[string]*string{
	// 	},
	// 	Properties: &armservicefabricmanagedclusters.ManagedClusterProperties{
	// 		AdminUserName: to.Ptr("vmadmin"),
	// 		ClientConnectionPort: to.Ptr[int32](19000),
	// 		ClusterCertificateThumbprints: []*string{
	// 			to.Ptr("12599211F8F14C90AFA9532AD79A6F2CA1C00622")},
	// 			ClusterCodeVersion: to.Ptr("7.1.168.9494"),
	// 			ClusterID: to.Ptr("92584666-9889-4ae8-8d02-91902923d37f"),
	// 			ClusterState: to.Ptr(armservicefabricmanagedclusters.ClusterStateWaitingForNodes),
	// 			ClusterUpgradeCadence: to.Ptr(armservicefabricmanagedclusters.ClusterUpgradeCadenceWave0),
	// 			ClusterUpgradeMode: to.Ptr(armservicefabricmanagedclusters.ClusterUpgradeModeAutomatic),
	// 			DNSName: to.Ptr("myCluster"),
	// 			FabricSettings: []*armservicefabricmanagedclusters.SettingsSectionDescription{
	// 				{
	// 					Name: to.Ptr("ManagedIdentityTokenService"),
	// 					Parameters: []*armservicefabricmanagedclusters.SettingsParameterDescription{
	// 						{
	// 							Name: to.Ptr("IsEnabled"),
	// 							Value: to.Ptr("true"),
	// 					}},
	// 			}},
	// 			Fqdn: to.Ptr("MyCluster.eastus.cloudapp.azure.com"),
	// 			HTTPGatewayConnectionPort: to.Ptr[int32](19080),
	// 			LoadBalancingRules: []*armservicefabricmanagedclusters.LoadBalancingRule{
	// 				{
	// 					BackendPort: to.Ptr[int32](80),
	// 					FrontendPort: to.Ptr[int32](80),
	// 					ProbePort: to.Ptr[int32](80),
	// 					ProbeProtocol: to.Ptr(armservicefabricmanagedclusters.ProbeProtocolHTTP),
	// 					Protocol: to.Ptr(armservicefabricmanagedclusters.Protocol("http")),
	// 				},
	// 				{
	// 					BackendPort: to.Ptr[int32](443),
	// 					FrontendPort: to.Ptr[int32](443),
	// 					ProbePort: to.Ptr[int32](443),
	// 					ProbeProtocol: to.Ptr(armservicefabricmanagedclusters.ProbeProtocolHTTP),
	// 					Protocol: to.Ptr(armservicefabricmanagedclusters.Protocol("http")),
	// 				},
	// 				{
	// 					BackendPort: to.Ptr[int32](10000),
	// 					FrontendPort: to.Ptr[int32](10000),
	// 					ProbePort: to.Ptr[int32](10000),
	// 					ProbeProtocol: to.Ptr(armservicefabricmanagedclusters.ProbeProtocolTCP),
	// 					Protocol: to.Ptr(armservicefabricmanagedclusters.ProtocolTCP),
	// 			}},
	// 			ProvisioningState: to.Ptr(armservicefabricmanagedclusters.ManagedResourceProvisioningStateSucceeded),
	// 		},
	// 		SKU: &armservicefabricmanagedclusters.SKU{
	// 			Name: to.Ptr(armservicefabricmanagedclusters.SKUNameStandard),
	// 		},
	// 	}
}

// Generated from example definition: https://github.com/Azure/azure-rest-api-specs/blob/366aaa13cdd218b9adac716680e49473673410c8/specification/servicefabricmanagedclusters/resource-manager/Microsoft.ServiceFabric/preview/2024-06-01-preview/examples/ManagedClusterPutOperation_example_max.json
func ExampleManagedClustersClient_BeginCreateOrUpdate_putAClusterWithMaximumParameters() {
	cred, err := azidentity.NewDefaultAzureCredential(nil)
	if err != nil {
		log.Fatalf("failed to obtain a credential: %v", err)
	}
	ctx := context.Background()
	clientFactory, err := armservicefabricmanagedclusters.NewClientFactory("<subscription-id>", cred, nil)
	if err != nil {
		log.Fatalf("failed to create client: %v", err)
	}
	poller, err := clientFactory.NewManagedClustersClient().BeginCreateOrUpdate(ctx, "resRg", "mycluster", armservicefabricmanagedclusters.ManagedCluster{
		Location: to.Ptr("eastus"),
		Tags:     map[string]*string{},
		Properties: &armservicefabricmanagedclusters.ManagedClusterProperties{
			AddonFeatures: []*armservicefabricmanagedclusters.ManagedClusterAddOnFeature{
				to.Ptr(armservicefabricmanagedclusters.ManagedClusterAddOnFeatureDNSService),
				to.Ptr(armservicefabricmanagedclusters.ManagedClusterAddOnFeatureBackupRestoreService),
				to.Ptr(armservicefabricmanagedclusters.ManagedClusterAddOnFeatureResourceMonitorService)},
			AdminPassword:  to.Ptr("{vm-password}"),
			AdminUserName:  to.Ptr("vmadmin"),
			AllowRdpAccess: to.Ptr(true),
			ApplicationTypeVersionsCleanupPolicy: &armservicefabricmanagedclusters.ApplicationTypeVersionsCleanupPolicy{
				MaxUnusedVersionsToKeep: to.Ptr[int32](3),
			},
			AutoGeneratedDomainNameLabelScope: to.Ptr(armservicefabricmanagedclusters.AutoGeneratedDomainNameLabelScopeSubscriptionReuse),
			AuxiliarySubnets: []*armservicefabricmanagedclusters.Subnet{
				{
					Name:                              to.Ptr("testSubnet1"),
					EnableIPv6:                        to.Ptr(true),
					NetworkSecurityGroupID:            to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/resRg/providers/Microsoft.Network/networkSecurityGroups/sn1"),
					PrivateEndpointNetworkPolicies:    to.Ptr(armservicefabricmanagedclusters.PrivateEndpointNetworkPoliciesEnabled),
					PrivateLinkServiceNetworkPolicies: to.Ptr(armservicefabricmanagedclusters.PrivateLinkServiceNetworkPoliciesEnabled),
				}},
			ClientConnectionPort:               to.Ptr[int32](19000),
			ClusterCodeVersion:                 to.Ptr("7.1.168.9494"),
			ClusterUpgradeMode:                 to.Ptr(armservicefabricmanagedclusters.ClusterUpgradeModeManual),
			DdosProtectionPlanID:               to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/resRg/providers/Microsoft.Network/ddosProtectionPlans/myDDoSProtectionPlan"),
			DNSName:                            to.Ptr("mycluster"),
			EnableAutoOSUpgrade:                to.Ptr(true),
			EnableHTTPGatewayExclusiveAuthMode: to.Ptr(true),
			EnableIPv6:                         to.Ptr(true),
			FabricSettings: []*armservicefabricmanagedclusters.SettingsSectionDescription{
				{
					Name: to.Ptr("ManagedIdentityTokenService"),
					Parameters: []*armservicefabricmanagedclusters.SettingsParameterDescription{
						{
							Name:  to.Ptr("IsEnabled"),
							Value: to.Ptr("true"),
						}},
				}},
			HTTPGatewayConnectionPort:          to.Ptr[int32](19080),
			HTTPGatewayTokenAuthConnectionPort: to.Ptr[int32](19081),
			IPTags: []*armservicefabricmanagedclusters.IPTag{
				{
					IPTagType: to.Ptr("FirstPartyUsage"),
					Tag:       to.Ptr("SQL"),
				}},
			LoadBalancingRules: []*armservicefabricmanagedclusters.LoadBalancingRule{
				{
					BackendPort:   to.Ptr[int32](80),
					FrontendPort:  to.Ptr[int32](80),
					ProbePort:     to.Ptr[int32](80),
					ProbeProtocol: to.Ptr(armservicefabricmanagedclusters.ProbeProtocolHTTP),
					Protocol:      to.Ptr(armservicefabricmanagedclusters.Protocol("http")),
				},
				{
					BackendPort:   to.Ptr[int32](443),
					FrontendPort:  to.Ptr[int32](443),
					ProbePort:     to.Ptr[int32](443),
					ProbeProtocol: to.Ptr(armservicefabricmanagedclusters.ProbeProtocolHTTP),
					Protocol:      to.Ptr(armservicefabricmanagedclusters.Protocol("http")),
				},
				{
					BackendPort:      to.Ptr[int32](10000),
					FrontendPort:     to.Ptr[int32](10000),
					LoadDistribution: to.Ptr("Default"),
					ProbePort:        to.Ptr[int32](10000),
					ProbeProtocol:    to.Ptr(armservicefabricmanagedclusters.ProbeProtocolHTTP),
					Protocol:         to.Ptr(armservicefabricmanagedclusters.ProtocolTCP),
				}},
			NetworkSecurityRules: []*armservicefabricmanagedclusters.NetworkSecurityRule{
				{
					Name:        to.Ptr("TestName"),
					Description: to.Ptr("Test description"),
					Access:      to.Ptr(armservicefabricmanagedclusters.AccessAllow),
					DestinationAddressPrefixes: []*string{
						to.Ptr("*")},
					DestinationPortRanges: []*string{
						to.Ptr("*")},
					Direction: to.Ptr(armservicefabricmanagedclusters.DirectionInbound),
					Priority:  to.Ptr[int32](1010),
					SourceAddressPrefixes: []*string{
						to.Ptr("*")},
					SourcePortRanges: []*string{
						to.Ptr("*")},
					Protocol: to.Ptr(armservicefabricmanagedclusters.NsgProtocolTCP),
				},
				{
					Name:                     to.Ptr("AllowARM"),
					Access:                   to.Ptr(armservicefabricmanagedclusters.AccessAllow),
					DestinationAddressPrefix: to.Ptr("*"),
					DestinationPortRange:     to.Ptr("33500-33699"),
					Direction:                to.Ptr(armservicefabricmanagedclusters.DirectionInbound),
					Priority:                 to.Ptr[int32](2002),
					SourceAddressPrefix:      to.Ptr("AzureResourceManager"),
					SourcePortRange:          to.Ptr("*"),
					Protocol:                 to.Ptr(armservicefabricmanagedclusters.NsgProtocol("*")),
				}},
			PublicIPPrefixID:   to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000000/resourcegroups/resRg/providers/Microsoft.Network/publicIPPrefixes/myPublicIPPrefix"),
			PublicIPv6PrefixID: to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000000/resourcegroups/resRg/providers/Microsoft.Network/publicIPPrefixes/myPublicIPv6Prefix"),
			ServiceEndpoints: []*armservicefabricmanagedclusters.ServiceEndpoint{
				{
					Locations: []*string{
						to.Ptr("eastus2"),
						to.Ptr("usnorth")},
					Service: to.Ptr("Microsoft.Storage"),
				}},
			UpgradeDescription: &armservicefabricmanagedclusters.ClusterUpgradePolicy{
				DeltaHealthPolicy: &armservicefabricmanagedclusters.ClusterUpgradeDeltaHealthPolicy{
					MaxPercentDeltaUnhealthyApplications:       to.Ptr[int32](40),
					MaxPercentDeltaUnhealthyNodes:              to.Ptr[int32](20),
					MaxPercentUpgradeDomainDeltaUnhealthyNodes: to.Ptr[int32](40),
				},
				ForceRestart: to.Ptr(false),
				HealthPolicy: &armservicefabricmanagedclusters.ClusterHealthPolicy{
					MaxPercentUnhealthyApplications: to.Ptr[int32](30),
					MaxPercentUnhealthyNodes:        to.Ptr[int32](10),
				},
				MonitoringPolicy: &armservicefabricmanagedclusters.ClusterMonitoringPolicy{
					HealthCheckRetryTimeout:   to.Ptr("00:55:00"),
					HealthCheckStableDuration: to.Ptr("00:45:00"),
					HealthCheckWaitDuration:   to.Ptr("00:05:00"),
					UpgradeDomainTimeout:      to.Ptr("03:00:00"),
					UpgradeTimeout:            to.Ptr("12:00:00"),
				},
			},
			UseCustomVnet:   to.Ptr(true),
			ZonalResiliency: to.Ptr(true),
			ZonalUpdateMode: to.Ptr(armservicefabricmanagedclusters.ZonalUpdateModeFast),
		},
		SKU: &armservicefabricmanagedclusters.SKU{
			Name: to.Ptr(armservicefabricmanagedclusters.SKUNameBasic),
		},
	}, nil)
	if err != nil {
		log.Fatalf("failed to finish the request: %v", err)
	}
	res, err := poller.PollUntilDone(ctx, nil)
	if err != nil {
		log.Fatalf("failed to pull the result: %v", err)
	}
	// You could use response here. We use blank identifier for just demo purposes.
	_ = res
	// If the HTTP response code is 200 as defined in example definition, your response structure would look as follows. Please pay attention that all the values in the output are fake values for just demo purposes.
	// res.ManagedCluster = armservicefabricmanagedclusters.ManagedCluster{
	// 	Name: to.Ptr("myCluster"),
	// 	Type: to.Ptr("Microsoft.ServiceFabric/managedClusters"),
	// 	Etag: to.Ptr("W/\"636462502169240745\""),
	// 	ID: to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000000/resourcegroups/resRg/providers/Microsoft.ServiceFabric/managedClusters/myCluster"),
	// 	Location: to.Ptr("eastus"),
	// 	Tags: map[string]*string{
	// 	},
	// 	Properties: &armservicefabricmanagedclusters.ManagedClusterProperties{
	// 		AddonFeatures: []*armservicefabricmanagedclusters.ManagedClusterAddOnFeature{
	// 			to.Ptr(armservicefabricmanagedclusters.ManagedClusterAddOnFeatureDNSService),
	// 			to.Ptr(armservicefabricmanagedclusters.ManagedClusterAddOnFeatureBackupRestoreService),
	// 			to.Ptr(armservicefabricmanagedclusters.ManagedClusterAddOnFeatureResourceMonitorService)},
	// 			AdminUserName: to.Ptr("vmadmin"),
	// 			AllowRdpAccess: to.Ptr(true),
	// 			ApplicationTypeVersionsCleanupPolicy: &armservicefabricmanagedclusters.ApplicationTypeVersionsCleanupPolicy{
	// 				MaxUnusedVersionsToKeep: to.Ptr[int32](3),
	// 			},
	// 			AutoGeneratedDomainNameLabelScope: to.Ptr(armservicefabricmanagedclusters.AutoGeneratedDomainNameLabelScopeSubscriptionReuse),
	// 			AuxiliarySubnets: []*armservicefabricmanagedclusters.Subnet{
	// 				{
	// 					Name: to.Ptr("testSubnet1"),
	// 					EnableIPv6: to.Ptr(true),
	// 					NetworkSecurityGroupID: to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/resRg/providers/Microsoft.Network/networkSecurityGroups/sn1"),
	// 					PrivateEndpointNetworkPolicies: to.Ptr(armservicefabricmanagedclusters.PrivateEndpointNetworkPoliciesEnabled),
	// 					PrivateLinkServiceNetworkPolicies: to.Ptr(armservicefabricmanagedclusters.PrivateLinkServiceNetworkPoliciesEnabled),
	// 			}},
	// 			ClientConnectionPort: to.Ptr[int32](19000),
	// 			ClusterCertificateThumbprints: []*string{
	// 				to.Ptr("12599211F8F14C90AFA9532AD79A6F2CA1C00622")},
	// 				ClusterCodeVersion: to.Ptr("7.1.168.9494"),
	// 				ClusterID: to.Ptr("92584666-9889-4ae8-8d02-91902923d37f"),
	// 				ClusterState: to.Ptr(armservicefabricmanagedclusters.ClusterStateWaitingForNodes),
	// 				ClusterUpgradeMode: to.Ptr(armservicefabricmanagedclusters.ClusterUpgradeModeManual),
	// 				CustomFqdn: to.Ptr("mycluster.abcdefghijk.eastus.sfmc.io"),
	// 				DdosProtectionPlanID: to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/resRg/providers/Microsoft.Network/ddosProtectionPlans/myDDoSProtectionPlan"),
	// 				DNSName: to.Ptr("mycluster"),
	// 				EnableAutoOSUpgrade: to.Ptr(true),
	// 				EnableHTTPGatewayExclusiveAuthMode: to.Ptr(true),
	// 				EnableIPv6: to.Ptr(true),
	// 				EnableServicePublicIP: to.Ptr(true),
	// 				FabricSettings: []*armservicefabricmanagedclusters.SettingsSectionDescription{
	// 					{
	// 						Name: to.Ptr("ManagedIdentityTokenService"),
	// 						Parameters: []*armservicefabricmanagedclusters.SettingsParameterDescription{
	// 							{
	// 								Name: to.Ptr("IsEnabled"),
	// 								Value: to.Ptr("true"),
	// 						}},
	// 				}},
	// 				Fqdn: to.Ptr("mycluster.eastus.cloudapp.azure.com"),
	// 				HTTPGatewayConnectionPort: to.Ptr[int32](19080),
	// 				HTTPGatewayTokenAuthConnectionPort: to.Ptr[int32](19081),
	// 				IPTags: []*armservicefabricmanagedclusters.IPTag{
	// 					{
	// 						IPTagType: to.Ptr("FirstPartyUsage"),
	// 						Tag: to.Ptr("SQL"),
	// 				}},
	// 				IPv6Address: to.Ptr("0000:0000:0000:0000:0000:0000:0000:0000"),
	// 				LoadBalancingRules: []*armservicefabricmanagedclusters.LoadBalancingRule{
	// 					{
	// 						BackendPort: to.Ptr[int32](80),
	// 						FrontendPort: to.Ptr[int32](80),
	// 						ProbePort: to.Ptr[int32](80),
	// 						ProbeProtocol: to.Ptr(armservicefabricmanagedclusters.ProbeProtocolHTTP),
	// 						Protocol: to.Ptr(armservicefabricmanagedclusters.Protocol("http")),
	// 					},
	// 					{
	// 						BackendPort: to.Ptr[int32](443),
	// 						FrontendPort: to.Ptr[int32](443),
	// 						ProbePort: to.Ptr[int32](443),
	// 						ProbeProtocol: to.Ptr(armservicefabricmanagedclusters.ProbeProtocolHTTP),
	// 						Protocol: to.Ptr(armservicefabricmanagedclusters.Protocol("http")),
	// 					},
	// 					{
	// 						BackendPort: to.Ptr[int32](10000),
	// 						FrontendPort: to.Ptr[int32](10000),
	// 						LoadDistribution: to.Ptr("Default"),
	// 						ProbePort: to.Ptr[int32](10000),
	// 						ProbeProtocol: to.Ptr(armservicefabricmanagedclusters.ProbeProtocolTCP),
	// 						Protocol: to.Ptr(armservicefabricmanagedclusters.ProtocolTCP),
	// 				}},
	// 				NetworkSecurityRules: []*armservicefabricmanagedclusters.NetworkSecurityRule{
	// 					{
	// 						Name: to.Ptr("TestName"),
	// 						Description: to.Ptr("Test description"),
	// 						Access: to.Ptr(armservicefabricmanagedclusters.AccessAllow),
	// 						DestinationAddressPrefixes: []*string{
	// 							to.Ptr("*")},
	// 							DestinationPortRanges: []*string{
	// 								to.Ptr("*")},
	// 								Direction: to.Ptr(armservicefabricmanagedclusters.DirectionInbound),
	// 								Priority: to.Ptr[int32](1010),
	// 								SourceAddressPrefixes: []*string{
	// 									to.Ptr("*")},
	// 									SourcePortRanges: []*string{
	// 										to.Ptr("*")},
	// 										Protocol: to.Ptr(armservicefabricmanagedclusters.NsgProtocolTCP),
	// 									},
	// 									{
	// 										Name: to.Ptr("AllowARM"),
	// 										Access: to.Ptr(armservicefabricmanagedclusters.AccessAllow),
	// 										DestinationAddressPrefix: to.Ptr("*"),
	// 										DestinationPortRange: to.Ptr("33500-33699"),
	// 										Direction: to.Ptr(armservicefabricmanagedclusters.DirectionInbound),
	// 										Priority: to.Ptr[int32](2002),
	// 										SourceAddressPrefix: to.Ptr("AzureResourceManager"),
	// 										SourcePortRange: to.Ptr("*"),
	// 										Protocol: to.Ptr(armservicefabricmanagedclusters.NsgProtocol("*")),
	// 								}},
	// 								ProvisioningState: to.Ptr(armservicefabricmanagedclusters.ManagedResourceProvisioningStateSucceeded),
	// 								PublicIPPrefixID: to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000000/resourcegroups/resRg/providers/Microsoft.Network/publicIPPrefixes/myPublicIPPrefix"),
	// 								PublicIPv6PrefixID: to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000000/resourcegroups/resRg/providers/Microsoft.Network/publicIPPrefixes/myPublicIPv6Prefix"),
	// 								ServiceEndpoints: []*armservicefabricmanagedclusters.ServiceEndpoint{
	// 									{
	// 										Locations: []*string{
	// 											to.Ptr("eastus2"),
	// 											to.Ptr("usnorth")},
	// 											Service: to.Ptr("Microsoft.Storage"),
	// 									}},
	// 									UpgradeDescription: &armservicefabricmanagedclusters.ClusterUpgradePolicy{
	// 										DeltaHealthPolicy: &armservicefabricmanagedclusters.ClusterUpgradeDeltaHealthPolicy{
	// 											MaxPercentDeltaUnhealthyApplications: to.Ptr[int32](40),
	// 											MaxPercentDeltaUnhealthyNodes: to.Ptr[int32](20),
	// 											MaxPercentUpgradeDomainDeltaUnhealthyNodes: to.Ptr[int32](40),
	// 										},
	// 										ForceRestart: to.Ptr(false),
	// 										HealthPolicy: &armservicefabricmanagedclusters.ClusterHealthPolicy{
	// 											MaxPercentUnhealthyApplications: to.Ptr[int32](30),
	// 											MaxPercentUnhealthyNodes: to.Ptr[int32](10),
	// 										},
	// 										MonitoringPolicy: &armservicefabricmanagedclusters.ClusterMonitoringPolicy{
	// 											HealthCheckRetryTimeout: to.Ptr("00:55:00"),
	// 											HealthCheckStableDuration: to.Ptr("00:45:00"),
	// 											HealthCheckWaitDuration: to.Ptr("00:05:00"),
	// 											UpgradeDomainTimeout: to.Ptr("03:00:00"),
	// 											UpgradeTimeout: to.Ptr("12:00:00"),
	// 										},
	// 										UpgradeReplicaSetCheckTimeout: to.Ptr("49710.06:28:16"),
	// 									},
	// 									UseCustomVnet: to.Ptr(true),
	// 									ZonalResiliency: to.Ptr(true),
	// 									ZonalUpdateMode: to.Ptr(armservicefabricmanagedclusters.ZonalUpdateModeFast),
	// 								},
	// 								SKU: &armservicefabricmanagedclusters.SKU{
	// 									Name: to.Ptr(armservicefabricmanagedclusters.SKUNameBasic),
	// 								},
	// 							}
}

// Generated from example definition: https://github.com/Azure/azure-rest-api-specs/blob/366aaa13cdd218b9adac716680e49473673410c8/specification/servicefabricmanagedclusters/resource-manager/Microsoft.ServiceFabric/preview/2024-06-01-preview/examples/ManagedClusterPutOperation_example_min.json
func ExampleManagedClustersClient_BeginCreateOrUpdate_putAClusterWithMinimumParameters() {
	cred, err := azidentity.NewDefaultAzureCredential(nil)
	if err != nil {
		log.Fatalf("failed to obtain a credential: %v", err)
	}
	ctx := context.Background()
	clientFactory, err := armservicefabricmanagedclusters.NewClientFactory("<subscription-id>", cred, nil)
	if err != nil {
		log.Fatalf("failed to create client: %v", err)
	}
	poller, err := clientFactory.NewManagedClustersClient().BeginCreateOrUpdate(ctx, "resRg", "myCluster", armservicefabricmanagedclusters.ManagedCluster{
		Location: to.Ptr("eastus"),
		Properties: &armservicefabricmanagedclusters.ManagedClusterProperties{
			AdminPassword:         to.Ptr("{vm-password}"),
			AdminUserName:         to.Ptr("vmadmin"),
			ClusterUpgradeCadence: to.Ptr(armservicefabricmanagedclusters.ClusterUpgradeCadenceWave1),
			ClusterUpgradeMode:    to.Ptr(armservicefabricmanagedclusters.ClusterUpgradeModeAutomatic),
			DNSName:               to.Ptr("myCluster"),
			FabricSettings: []*armservicefabricmanagedclusters.SettingsSectionDescription{
				{
					Name: to.Ptr("ManagedIdentityTokenService"),
					Parameters: []*armservicefabricmanagedclusters.SettingsParameterDescription{
						{
							Name:  to.Ptr("IsEnabled"),
							Value: to.Ptr("true"),
						}},
				}},
		},
		SKU: &armservicefabricmanagedclusters.SKU{
			Name: to.Ptr(armservicefabricmanagedclusters.SKUNameBasic),
		},
	}, nil)
	if err != nil {
		log.Fatalf("failed to finish the request: %v", err)
	}
	res, err := poller.PollUntilDone(ctx, nil)
	if err != nil {
		log.Fatalf("failed to pull the result: %v", err)
	}
	// You could use response here. We use blank identifier for just demo purposes.
	_ = res
	// If the HTTP response code is 200 as defined in example definition, your response structure would look as follows. Please pay attention that all the values in the output are fake values for just demo purposes.
	// res.ManagedCluster = armservicefabricmanagedclusters.ManagedCluster{
	// 	Name: to.Ptr("myCluster"),
	// 	Type: to.Ptr("Microsoft.ServiceFabric/managedClusters"),
	// 	Etag: to.Ptr("W/\"636462502169240745\""),
	// 	ID: to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000000/resourcegroups/resRg/providers/Microsoft.ServiceFabric/managedClusters/myCluster"),
	// 	Location: to.Ptr("eastus"),
	// 	Tags: map[string]*string{
	// 	},
	// 	Properties: &armservicefabricmanagedclusters.ManagedClusterProperties{
	// 		AdminUserName: to.Ptr("vmadmin"),
	// 		ClientConnectionPort: to.Ptr[int32](19000),
	// 		ClusterCertificateThumbprints: []*string{
	// 			to.Ptr("12599211F8F14C90AFA9532AD79A6F2CA1C00622")},
	// 			ClusterID: to.Ptr("92584666-9889-4ae8-8d02-91902923d37f"),
	// 			ClusterState: to.Ptr(armservicefabricmanagedclusters.ClusterStateWaitingForNodes),
	// 			ClusterUpgradeCadence: to.Ptr(armservicefabricmanagedclusters.ClusterUpgradeCadenceWave1),
	// 			ClusterUpgradeMode: to.Ptr(armservicefabricmanagedclusters.ClusterUpgradeModeAutomatic),
	// 			DNSName: to.Ptr("myCluster"),
	// 			FabricSettings: []*armservicefabricmanagedclusters.SettingsSectionDescription{
	// 				{
	// 					Name: to.Ptr("ManagedIdentityTokenService"),
	// 					Parameters: []*armservicefabricmanagedclusters.SettingsParameterDescription{
	// 						{
	// 							Name: to.Ptr("IsEnabled"),
	// 							Value: to.Ptr("true"),
	// 					}},
	// 			}},
	// 			Fqdn: to.Ptr("MyCluster.eastus.cloudapp.azure.com"),
	// 			HTTPGatewayConnectionPort: to.Ptr[int32](19080),
	// 			LoadBalancingRules: []*armservicefabricmanagedclusters.LoadBalancingRule{
	// 			},
	// 			ProvisioningState: to.Ptr(armservicefabricmanagedclusters.ManagedResourceProvisioningStateSucceeded),
	// 		},
	// 		SKU: &armservicefabricmanagedclusters.SKU{
	// 			Name: to.Ptr(armservicefabricmanagedclusters.SKUNameBasic),
	// 		},
	// 	}
}

// Generated from example definition: https://github.com/Azure/azure-rest-api-specs/blob/366aaa13cdd218b9adac716680e49473673410c8/specification/servicefabricmanagedclusters/resource-manager/Microsoft.ServiceFabric/preview/2024-06-01-preview/examples/ManagedClusterPatchOperation_example.json
func ExampleManagedClustersClient_Update() {
	cred, err := azidentity.NewDefaultAzureCredential(nil)
	if err != nil {
		log.Fatalf("failed to obtain a credential: %v", err)
	}
	ctx := context.Background()
	clientFactory, err := armservicefabricmanagedclusters.NewClientFactory("<subscription-id>", cred, nil)
	if err != nil {
		log.Fatalf("failed to create client: %v", err)
	}
	res, err := clientFactory.NewManagedClustersClient().Update(ctx, "resRg", "myCluster", armservicefabricmanagedclusters.ManagedClusterUpdateParameters{
		Tags: map[string]*string{
			"a": to.Ptr("b"),
		},
	}, nil)
	if err != nil {
		log.Fatalf("failed to finish the request: %v", err)
	}
	// You could use response here. We use blank identifier for just demo purposes.
	_ = res
	// If the HTTP response code is 200 as defined in example definition, your response structure would look as follows. Please pay attention that all the values in the output are fake values for just demo purposes.
	// res.ManagedCluster = armservicefabricmanagedclusters.ManagedCluster{
	// 	Name: to.Ptr("myCluster"),
	// 	Type: to.Ptr("Microsoft.ServiceFabric/managedClusters"),
	// 	Etag: to.Ptr("W/\"636462502169240745\""),
	// 	ID: to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000000/resourcegroups/resRg/providers/Microsoft.ServiceFabric/managedClusters/myCluster"),
	// 	Location: to.Ptr("eastus"),
	// 	Tags: map[string]*string{
	// 		"a": to.Ptr("b"),
	// 	},
	// 	Properties: &armservicefabricmanagedclusters.ManagedClusterProperties{
	// 		AddonFeatures: []*armservicefabricmanagedclusters.ManagedClusterAddOnFeature{
	// 			to.Ptr(armservicefabricmanagedclusters.ManagedClusterAddOnFeatureDNSService),
	// 			to.Ptr(armservicefabricmanagedclusters.ManagedClusterAddOnFeatureBackupRestoreService),
	// 			to.Ptr(armservicefabricmanagedclusters.ManagedClusterAddOnFeatureResourceMonitorService)},
	// 			AdminUserName: to.Ptr("vmadmin"),
	// 			AllowRdpAccess: to.Ptr(true),
	// 			ClientConnectionPort: to.Ptr[int32](19001),
	// 			ClusterCertificateThumbprints: []*string{
	// 				to.Ptr("12599211F8F14C90AFA9532AD79A6F2CA1C00622")},
	// 				ClusterCodeVersion: to.Ptr("7.1.168.9494"),
	// 				ClusterID: to.Ptr("92584666-9889-4ae8-8d02-91902923d37f"),
	// 				ClusterState: to.Ptr(armservicefabricmanagedclusters.ClusterStateWaitingForNodes),
	// 				ClusterUpgradeCadence: to.Ptr(armservicefabricmanagedclusters.ClusterUpgradeCadenceWave0),
	// 				ClusterUpgradeMode: to.Ptr(armservicefabricmanagedclusters.ClusterUpgradeModeAutomatic),
	// 				DNSName: to.Ptr("myCluster"),
	// 				EnableAutoOSUpgrade: to.Ptr(true),
	// 				FabricSettings: []*armservicefabricmanagedclusters.SettingsSectionDescription{
	// 					{
	// 						Name: to.Ptr("ManagedIdentityTokenService"),
	// 						Parameters: []*armservicefabricmanagedclusters.SettingsParameterDescription{
	// 							{
	// 								Name: to.Ptr("IsEnabled"),
	// 								Value: to.Ptr("false"),
	// 						}},
	// 				}},
	// 				Fqdn: to.Ptr("MyCluster.eastus.cloudapp.azure.com"),
	// 				HTTPGatewayConnectionPort: to.Ptr[int32](19081),
	// 				LoadBalancingRules: []*armservicefabricmanagedclusters.LoadBalancingRule{
	// 					{
	// 						BackendPort: to.Ptr[int32](80),
	// 						FrontendPort: to.Ptr[int32](80),
	// 						ProbePort: to.Ptr[int32](80),
	// 						ProbeProtocol: to.Ptr(armservicefabricmanagedclusters.ProbeProtocolHTTP),
	// 						Protocol: to.Ptr(armservicefabricmanagedclusters.Protocol("http")),
	// 					},
	// 					{
	// 						BackendPort: to.Ptr[int32](443),
	// 						FrontendPort: to.Ptr[int32](443),
	// 						ProbePort: to.Ptr[int32](443),
	// 						ProbeProtocol: to.Ptr(armservicefabricmanagedclusters.ProbeProtocolHTTP),
	// 						Protocol: to.Ptr(armservicefabricmanagedclusters.Protocol("http")),
	// 					},
	// 					{
	// 						BackendPort: to.Ptr[int32](10000),
	// 						FrontendPort: to.Ptr[int32](10000),
	// 						ProbePort: to.Ptr[int32](10000),
	// 						ProbeProtocol: to.Ptr(armservicefabricmanagedclusters.ProbeProtocolHTTP),
	// 						Protocol: to.Ptr(armservicefabricmanagedclusters.ProtocolTCP),
	// 				}},
	// 				NetworkSecurityRules: []*armservicefabricmanagedclusters.NetworkSecurityRule{
	// 					{
	// 						Name: to.Ptr("TestName"),
	// 						Description: to.Ptr("Test description"),
	// 						Access: to.Ptr(armservicefabricmanagedclusters.AccessAllow),
	// 						DestinationAddressPrefixes: []*string{
	// 							to.Ptr("*")},
	// 							DestinationPortRanges: []*string{
	// 								to.Ptr("*")},
	// 								Direction: to.Ptr(armservicefabricmanagedclusters.DirectionInbound),
	// 								Priority: to.Ptr[int32](1010),
	// 								SourceAddressPrefixes: []*string{
	// 									to.Ptr("*")},
	// 									SourcePortRanges: []*string{
	// 										to.Ptr("*")},
	// 										Protocol: to.Ptr(armservicefabricmanagedclusters.NsgProtocolTCP),
	// 								}},
	// 								ProvisioningState: to.Ptr(armservicefabricmanagedclusters.ManagedResourceProvisioningStateSucceeded),
	// 							},
	// 							SKU: &armservicefabricmanagedclusters.SKU{
	// 								Name: to.Ptr(armservicefabricmanagedclusters.SKUNameStandard),
	// 							},
	// 						}
}

// Generated from example definition: https://github.com/Azure/azure-rest-api-specs/blob/366aaa13cdd218b9adac716680e49473673410c8/specification/servicefabricmanagedclusters/resource-manager/Microsoft.ServiceFabric/preview/2024-06-01-preview/examples/ManagedClusterDeleteOperation_example.json
func ExampleManagedClustersClient_BeginDelete() {
	cred, err := azidentity.NewDefaultAzureCredential(nil)
	if err != nil {
		log.Fatalf("failed to obtain a credential: %v", err)
	}
	ctx := context.Background()
	clientFactory, err := armservicefabricmanagedclusters.NewClientFactory("<subscription-id>", cred, nil)
	if err != nil {
		log.Fatalf("failed to create client: %v", err)
	}
	poller, err := clientFactory.NewManagedClustersClient().BeginDelete(ctx, "resRg", "myCluster", nil)
	if err != nil {
		log.Fatalf("failed to finish the request: %v", err)
	}
	_, err = poller.PollUntilDone(ctx, nil)
	if err != nil {
		log.Fatalf("failed to pull the result: %v", err)
	}
}
