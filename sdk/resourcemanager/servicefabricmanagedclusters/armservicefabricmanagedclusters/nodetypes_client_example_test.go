// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) Go Code Generator. DO NOT EDIT.

package armservicefabricmanagedclusters_test

import (
	"context"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/to"
	"github.com/Azure/azure-sdk-for-go/sdk/azidentity"
	"github.com/Azure/azure-sdk-for-go/sdk/resourcemanager/servicefabricmanagedclusters/armservicefabricmanagedclusters"
	"log"
)

// Generated from example definition: 2025-03-01-preview/NodeTypePutOperationAutoScale_example.json
func ExampleNodeTypesClient_BeginCreateOrUpdate_putANodeTypeWithAutoScaleParameters() {
	cred, err := azidentity.NewDefaultAzureCredential(nil)
	if err != nil {
		log.Fatalf("failed to obtain a credential: %v", err)
	}
	ctx := context.Background()
	clientFactory, err := armservicefabricmanagedclusters.NewClientFactory("00000000-0000-0000-0000-000000000000", cred, nil)
	if err != nil {
		log.Fatalf("failed to create client: %v", err)
	}
	poller, err := clientFactory.NewNodeTypesClient().BeginCreateOrUpdate(ctx, "resRg", "myCluster", "BE", armservicefabricmanagedclusters.NodeType{
		Properties: &armservicefabricmanagedclusters.NodeTypeProperties{
			Capacities: map[string]*string{
				"ClientConnections": to.Ptr("65536"),
			},
			DataDiskSizeGB:          to.Ptr[int32](200),
			DataDiskType:            to.Ptr(armservicefabricmanagedclusters.DiskTypePremiumLRS),
			IsPrimary:               to.Ptr(false),
			IsStateless:             to.Ptr(true),
			MultiplePlacementGroups: to.Ptr(true),
			PlacementProperties: map[string]*string{
				"HasSSD":       to.Ptr("true"),
				"NodeColor":    to.Ptr("green"),
				"SomeProperty": to.Ptr("5"),
			},
			VMExtensions: []*armservicefabricmanagedclusters.VMSSExtension{
				{
					Name: to.Ptr("Microsoft.Azure.Geneva.GenevaMonitoring"),
					Properties: &armservicefabricmanagedclusters.VMSSExtensionProperties{
						Type:                    to.Ptr("GenevaMonitoring"),
						AutoUpgradeMinorVersion: to.Ptr(true),
						Publisher:               to.Ptr("Microsoft.Azure.Geneva"),
						Settings:                map[string]any{},
						TypeHandlerVersion:      to.Ptr("2.0"),
					},
				},
			},
			VMImageOffer:     to.Ptr("WindowsServer"),
			VMImagePublisher: to.Ptr("MicrosoftWindowsServer"),
			VMImageSKU:       to.Ptr("2016-Datacenter-Server-Core"),
			VMImageVersion:   to.Ptr("latest"),
			VMInstanceCount:  to.Ptr[int32](-1),
			VMManagedIdentity: &armservicefabricmanagedclusters.VMManagedIdentity{
				UserAssignedIdentities: []*string{
					to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/resRg/providers/Microsoft.ManagedIdentity/userAssignedIdentities/myIdentity"),
					to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/resRg/providers/Microsoft.ManagedIdentity/userAssignedIdentities/myIdentity2"),
				},
			},
			VMSecrets: []*armservicefabricmanagedclusters.VaultSecretGroup{
				{
					SourceVault: &armservicefabricmanagedclusters.SubResource{
						ID: to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/resRg/providers/Microsoft.KeyVault/vaults/myVault"),
					},
					VaultCertificates: []*armservicefabricmanagedclusters.VaultCertificate{
						{
							CertificateStore: to.Ptr("My"),
							CertificateURL:   to.Ptr("https://myVault.vault.azure.net:443/secrets/myCert/ef1a31d39e1f46bca33def54b6cda54c"),
						},
					},
				},
			},
			VMSize: to.Ptr("Standard_DS3"),
		},
	}, nil)
	if err != nil {
		log.Fatalf("failed to finish the request: %v", err)
	}
	res, err := poller.PollUntilDone(ctx, nil)
	if err != nil {
		log.Fatalf("failed to pull the result: %v", err)
	}
	// You could use response here. We use blank identifier for just demo purposes.
	_ = res
	// If the HTTP response code is 200 as defined in example definition, your response structure would look as follows. Please pay attention that all the values in the output are fake values for just demo purposes.
	// res = armservicefabricmanagedclusters.NodeTypesClientCreateOrUpdateResponse{
	// 	NodeType: &armservicefabricmanagedclusters.NodeType{
	// 		Name: to.Ptr("BE"),
	// 		Type: to.Ptr("Microsoft.ServiceFabric/managedClusters/nodeTypes"),
	// 		ID: to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000000/resourcegroups/resRg/providers/Microsoft.ServiceFabric/managedClusters/myCluster/nodeTypes/BE"),
	// 		Properties: &armservicefabricmanagedclusters.NodeTypeProperties{
	// 			Capacities: map[string]*string{
	// 				"ClientConnections": to.Ptr("65536"),
	// 			},
	// 			DataDiskSizeGB: to.Ptr[int32](200),
	// 			DataDiskType: to.Ptr(armservicefabricmanagedclusters.DiskTypePremiumLRS),
	// 			IsPrimary: to.Ptr(false),
	// 			IsStateless: to.Ptr(true),
	// 			MultiplePlacementGroups: to.Ptr(true),
	// 			PlacementProperties: map[string]*string{
	// 				"HasSSD": to.Ptr("true"),
	// 				"NodeColor": to.Ptr("green"),
	// 				"SomeProperty": to.Ptr("5"),
	// 			},
	// 			ProvisioningState: to.Ptr(armservicefabricmanagedclusters.ManagedResourceProvisioningStateCreating),
	// 			VMExtensions: []*armservicefabricmanagedclusters.VMSSExtension{
	// 				{
	// 					Name: to.Ptr("Microsoft.Azure.Geneva.GenevaMonitoring"),
	// 					Properties: &armservicefabricmanagedclusters.VMSSExtensionProperties{
	// 						Type: to.Ptr("GenevaMonitoring"),
	// 						AutoUpgradeMinorVersion: to.Ptr(true),
	// 						ForceUpdateTag: to.Ptr("v.1.0"),
	// 						Publisher: to.Ptr("Microsoft.Azure.Geneva"),
	// 						Settings: map[string]any{
	// 						},
	// 						TypeHandlerVersion: to.Ptr("2.0"),
	// 					},
	// 				},
	// 			},
	// 			VMImageOffer: to.Ptr("WindowsServer"),
	// 			VMImagePublisher: to.Ptr("MicrosoftWindowsServer"),
	// 			VMImageSKU: to.Ptr("2016-Datacenter-Server-Core"),
	// 			VMImageVersion: to.Ptr("latest"),
	// 			VMInstanceCount: to.Ptr[int32](10),
	// 			VMManagedIdentity: &armservicefabricmanagedclusters.VMManagedIdentity{
	// 				UserAssignedIdentities: []*string{
	// 					to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/resRg/providers/Microsoft.ManagedIdentity/userAssignedIdentities/myIdentity"),
	// 					to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/resRg/providers/Microsoft.ManagedIdentity/userAssignedIdentities/myIdentity2"),
	// 				},
	// 			},
	// 			VMSecrets: []*armservicefabricmanagedclusters.VaultSecretGroup{
	// 				{
	// 					SourceVault: &armservicefabricmanagedclusters.SubResource{
	// 						ID: to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/resRg/providers/Microsoft.KeyVault/vaults/myVault"),
	// 					},
	// 					VaultCertificates: []*armservicefabricmanagedclusters.VaultCertificate{
	// 						{
	// 							CertificateStore: to.Ptr("My"),
	// 							CertificateURL: to.Ptr("https://myVault.vault.azure.net:443/secrets/myCert/ef1a31d39e1f46bca33def54b6cda54c"),
	// 						},
	// 					},
	// 				},
	// 			},
	// 			VMSize: to.Ptr("Standard_DS3"),
	// 		},
	// 		SKU: &armservicefabricmanagedclusters.NodeTypeSKU{
	// 			Name: to.Ptr("Standard_S2"),
	// 			Capacity: to.Ptr[int32](10),
	// 			Tier: to.Ptr("Standard"),
	// 		},
	// 		Tags: map[string]*string{
	// 		},
	// 	},
	// }
}

// Generated from example definition: 2025-03-01-preview/NodeTypePutOperationCustomImage_example.json
func ExampleNodeTypesClient_BeginCreateOrUpdate_putNodeTypeWithCustomVMImage() {
	cred, err := azidentity.NewDefaultAzureCredential(nil)
	if err != nil {
		log.Fatalf("failed to obtain a credential: %v", err)
	}
	ctx := context.Background()
	clientFactory, err := armservicefabricmanagedclusters.NewClientFactory("00000000-0000-0000-0000-000000000000", cred, nil)
	if err != nil {
		log.Fatalf("failed to create client: %v", err)
	}
	poller, err := clientFactory.NewNodeTypesClient().BeginCreateOrUpdate(ctx, "resRg", "myCluster", "BE", armservicefabricmanagedclusters.NodeType{
		Properties: &armservicefabricmanagedclusters.NodeTypeProperties{
			DataDiskSizeGB:    to.Ptr[int32](200),
			IsPrimary:         to.Ptr(false),
			VMImageResourceID: to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/test-custom-image/providers/Microsoft.Compute/galleries/myCustomImages/images/Win2019DC"),
			VMInstanceCount:   to.Ptr[int32](10),
			VMSize:            to.Ptr("Standard_D3"),
		},
	}, nil)
	if err != nil {
		log.Fatalf("failed to finish the request: %v", err)
	}
	res, err := poller.PollUntilDone(ctx, nil)
	if err != nil {
		log.Fatalf("failed to pull the result: %v", err)
	}
	// You could use response here. We use blank identifier for just demo purposes.
	_ = res
	// If the HTTP response code is 200 as defined in example definition, your response structure would look as follows. Please pay attention that all the values in the output are fake values for just demo purposes.
	// res = armservicefabricmanagedclusters.NodeTypesClientCreateOrUpdateResponse{
	// 	NodeType: &armservicefabricmanagedclusters.NodeType{
	// 		Name: to.Ptr("BE"),
	// 		Type: to.Ptr("Microsoft.ServiceFabric/managedClusters/nodeTypes"),
	// 		ID: to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000000/resourcegroups/resRg/providers/Microsoft.ServiceFabric/managedClusters/myCluster/nodeTypes/BE"),
	// 		Properties: &armservicefabricmanagedclusters.NodeTypeProperties{
	// 			Capacities: map[string]*string{
	// 			},
	// 			DataDiskSizeGB: to.Ptr[int32](200),
	// 			DataDiskType: to.Ptr(armservicefabricmanagedclusters.DiskTypeStandardSSDLRS),
	// 			IsPrimary: to.Ptr(false),
	// 			IsStateless: to.Ptr(false),
	// 			PlacementProperties: map[string]*string{
	// 			},
	// 			ProvisioningState: to.Ptr(armservicefabricmanagedclusters.ManagedResourceProvisioningStateCreating),
	// 			VMImageResourceID: to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/test-custom-image/providers/Microsoft.Compute/galleries/myCustomImages/images/Win2019DC"),
	// 			VMInstanceCount: to.Ptr[int32](10),
	// 			VMSize: to.Ptr("Standard_D3"),
	// 		},
	// 		Tags: map[string]*string{
	// 		},
	// 	},
	// }
}

// Generated from example definition: 2025-03-01-preview/NodeTypePutOperationCustomSharedGalleriesImage_example.json
func ExampleNodeTypesClient_BeginCreateOrUpdate_putNodeTypeWithSharedGalleriesCustomVMImage() {
	cred, err := azidentity.NewDefaultAzureCredential(nil)
	if err != nil {
		log.Fatalf("failed to obtain a credential: %v", err)
	}
	ctx := context.Background()
	clientFactory, err := armservicefabricmanagedclusters.NewClientFactory("00000000-0000-0000-0000-000000000000", cred, nil)
	if err != nil {
		log.Fatalf("failed to create client: %v", err)
	}
	poller, err := clientFactory.NewNodeTypesClient().BeginCreateOrUpdate(ctx, "resRg", "myCluster", "BE", armservicefabricmanagedclusters.NodeType{
		Properties: &armservicefabricmanagedclusters.NodeTypeProperties{
			DataDiskSizeGB:         to.Ptr[int32](200),
			IsPrimary:              to.Ptr(false),
			VMInstanceCount:        to.Ptr[int32](10),
			VMSharedGalleryImageID: to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/test-custom-image/providers/Microsoft.Compute/sharedGalleries/35349201-a0b3-405e-8a23-9f1450984307-SFSHAREDGALLERY/images/TestNoProdContainerDImage/versions/latest"),
			VMSize:                 to.Ptr("Standard_D3"),
		},
	}, nil)
	if err != nil {
		log.Fatalf("failed to finish the request: %v", err)
	}
	res, err := poller.PollUntilDone(ctx, nil)
	if err != nil {
		log.Fatalf("failed to pull the result: %v", err)
	}
	// You could use response here. We use blank identifier for just demo purposes.
	_ = res
	// If the HTTP response code is 200 as defined in example definition, your response structure would look as follows. Please pay attention that all the values in the output are fake values for just demo purposes.
	// res = armservicefabricmanagedclusters.NodeTypesClientCreateOrUpdateResponse{
	// 	NodeType: &armservicefabricmanagedclusters.NodeType{
	// 		Name: to.Ptr("BE"),
	// 		Type: to.Ptr("Microsoft.ServiceFabric/managedClusters/nodeTypes"),
	// 		ID: to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000000/resourcegroups/resRg/providers/Microsoft.ServiceFabric/managedClusters/myCluster/nodeTypes/BE"),
	// 		Properties: &armservicefabricmanagedclusters.NodeTypeProperties{
	// 			Capacities: map[string]*string{
	// 			},
	// 			DataDiskSizeGB: to.Ptr[int32](200),
	// 			DataDiskType: to.Ptr(armservicefabricmanagedclusters.DiskTypeStandardSSDLRS),
	// 			IsPrimary: to.Ptr(false),
	// 			IsStateless: to.Ptr(false),
	// 			PlacementProperties: map[string]*string{
	// 			},
	// 			ProvisioningState: to.Ptr(armservicefabricmanagedclusters.ManagedResourceProvisioningStateCreating),
	// 			VMInstanceCount: to.Ptr[int32](10),
	// 			VMSharedGalleryImageID: to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/test-custom-image/providers/Microsoft.Compute/sharedGalleries/35349201-a0b3-405e-8a23-9f1450984307-SFSHAREDGALLERY/images/TestNoProdContainerDImage/versions/latest"),
	// 			VMSize: to.Ptr("Standard_D3"),
	// 		},
	// 		Tags: map[string]*string{
	// 		},
	// 	},
	// }
}

// Generated from example definition: 2025-03-01-preview/NodeTypePutOperationDedicatedHost_example.json
func ExampleNodeTypesClient_BeginCreateOrUpdate_putNodeTypeWithDedicatedHosts() {
	cred, err := azidentity.NewDefaultAzureCredential(nil)
	if err != nil {
		log.Fatalf("failed to obtain a credential: %v", err)
	}
	ctx := context.Background()
	clientFactory, err := armservicefabricmanagedclusters.NewClientFactory("00000000-0000-0000-0000-000000000000", cred, nil)
	if err != nil {
		log.Fatalf("failed to create client: %v", err)
	}
	poller, err := clientFactory.NewNodeTypesClient().BeginCreateOrUpdate(ctx, "resRg", "myCluster", "BE", armservicefabricmanagedclusters.NodeType{
		Properties: &armservicefabricmanagedclusters.NodeTypeProperties{
			Capacities:          map[string]*string{},
			DataDiskSizeGB:      to.Ptr[int32](200),
			DataDiskType:        to.Ptr(armservicefabricmanagedclusters.DiskTypeStandardSSDLRS),
			HostGroupID:         to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/testhostgroupRG/providers/Microsoft.Compute/hostGroups/testHostGroup"),
			IsPrimary:           to.Ptr(false),
			PlacementProperties: map[string]*string{},
			VMImageOffer:        to.Ptr("WindowsServer"),
			VMImagePublisher:    to.Ptr("MicrosoftWindowsServer"),
			VMImageSKU:          to.Ptr("2019-Datacenter"),
			VMImageVersion:      to.Ptr("latest"),
			VMInstanceCount:     to.Ptr[int32](10),
			VMSize:              to.Ptr("Standard_D8s_v3"),
			Zones: []*string{
				to.Ptr("1"),
			},
		},
	}, nil)
	if err != nil {
		log.Fatalf("failed to finish the request: %v", err)
	}
	res, err := poller.PollUntilDone(ctx, nil)
	if err != nil {
		log.Fatalf("failed to pull the result: %v", err)
	}
	// You could use response here. We use blank identifier for just demo purposes.
	_ = res
	// If the HTTP response code is 200 as defined in example definition, your response structure would look as follows. Please pay attention that all the values in the output are fake values for just demo purposes.
	// res = armservicefabricmanagedclusters.NodeTypesClientCreateOrUpdateResponse{
	// 	NodeType: &armservicefabricmanagedclusters.NodeType{
	// 		Name: to.Ptr("BE"),
	// 		Type: to.Ptr("Microsoft.ServiceFabric/managedClusters/nodeTypes"),
	// 		ID: to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000000/resourcegroups/resRg/providers/Microsoft.ServiceFabric/managedClusters/myCluster/nodeTypes/BE"),
	// 		Properties: &armservicefabricmanagedclusters.NodeTypeProperties{
	// 			Capacities: map[string]*string{
	// 			},
	// 			DataDiskSizeGB: to.Ptr[int32](200),
	// 			DataDiskType: to.Ptr(armservicefabricmanagedclusters.DiskTypeStandardSSDLRS),
	// 			HostGroupID: to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/testhostgroupRG/providers/Microsoft.Compute/hostGroups/testHostGroup"),
	// 			IsPrimary: to.Ptr(false),
	// 			IsStateless: to.Ptr(false),
	// 			PlacementProperties: map[string]*string{
	// 			},
	// 			ProvisioningState: to.Ptr(armservicefabricmanagedclusters.ManagedResourceProvisioningStateCreating),
	// 			VMImageOffer: to.Ptr("WindowsServer"),
	// 			VMImagePublisher: to.Ptr("MicrosoftWindowsServer"),
	// 			VMImageSKU: to.Ptr("2019-Datacenter"),
	// 			VMImageVersion: to.Ptr("latest"),
	// 			VMInstanceCount: to.Ptr[int32](10),
	// 			VMSize: to.Ptr("Standard_D8s_v3"),
	// 			Zones: []*string{
	// 				to.Ptr("1"),
	// 			},
	// 		},
	// 		Tags: map[string]*string{
	// 		},
	// 	},
	// }
}

// Generated from example definition: 2025-03-01-preview/NodeTypePutOperationStateless_example.json
func ExampleNodeTypesClient_BeginCreateOrUpdate_putAnStatelessNodeTypeWithTemporaryDiskForServiceFabric() {
	cred, err := azidentity.NewDefaultAzureCredential(nil)
	if err != nil {
		log.Fatalf("failed to obtain a credential: %v", err)
	}
	ctx := context.Background()
	clientFactory, err := armservicefabricmanagedclusters.NewClientFactory("00000000-0000-0000-0000-000000000000", cred, nil)
	if err != nil {
		log.Fatalf("failed to create client: %v", err)
	}
	poller, err := clientFactory.NewNodeTypesClient().BeginCreateOrUpdate(ctx, "resRg", "myCluster", "BE", armservicefabricmanagedclusters.NodeType{
		Properties: &armservicefabricmanagedclusters.NodeTypeProperties{
			EnableEncryptionAtHost:  to.Ptr(true),
			IsPrimary:               to.Ptr(false),
			IsStateless:             to.Ptr(true),
			MultiplePlacementGroups: to.Ptr(true),
			UseTempDataDisk:         to.Ptr(true),
			VMExtensions: []*armservicefabricmanagedclusters.VMSSExtension{
				{
					Name: to.Ptr("Microsoft.Azure.Geneva.GenevaMonitoring"),
					Properties: &armservicefabricmanagedclusters.VMSSExtensionProperties{
						Type:                    to.Ptr("GenevaMonitoring"),
						AutoUpgradeMinorVersion: to.Ptr(true),
						Publisher:               to.Ptr("Microsoft.Azure.Geneva"),
						Settings:                map[string]any{},
						TypeHandlerVersion:      to.Ptr("2.0"),
					},
				},
			},
			VMImageOffer:     to.Ptr("WindowsServer"),
			VMImagePublisher: to.Ptr("MicrosoftWindowsServer"),
			VMImageSKU:       to.Ptr("2016-Datacenter-Server-Core"),
			VMImageVersion:   to.Ptr("latest"),
			VMInstanceCount:  to.Ptr[int32](10),
			VMSize:           to.Ptr("Standard_DS3"),
		},
	}, nil)
	if err != nil {
		log.Fatalf("failed to finish the request: %v", err)
	}
	res, err := poller.PollUntilDone(ctx, nil)
	if err != nil {
		log.Fatalf("failed to pull the result: %v", err)
	}
	// You could use response here. We use blank identifier for just demo purposes.
	_ = res
	// If the HTTP response code is 200 as defined in example definition, your response structure would look as follows. Please pay attention that all the values in the output are fake values for just demo purposes.
	// res = armservicefabricmanagedclusters.NodeTypesClientCreateOrUpdateResponse{
	// 	NodeType: &armservicefabricmanagedclusters.NodeType{
	// 		Name: to.Ptr("BE"),
	// 		Type: to.Ptr("Microsoft.ServiceFabric/managedClusters/nodeTypes"),
	// 		ID: to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000000/resourcegroups/resRg/providers/Microsoft.ServiceFabric/managedClusters/myCluster/nodeTypes/BE"),
	// 		Properties: &armservicefabricmanagedclusters.NodeTypeProperties{
	// 			EnableEncryptionAtHost: to.Ptr(true),
	// 			IsPrimary: to.Ptr(false),
	// 			IsStateless: to.Ptr(true),
	// 			MultiplePlacementGroups: to.Ptr(true),
	// 			ProvisioningState: to.Ptr(armservicefabricmanagedclusters.ManagedResourceProvisioningStateCreating),
	// 			UseTempDataDisk: to.Ptr(true),
	// 			VMExtensions: []*armservicefabricmanagedclusters.VMSSExtension{
	// 				{
	// 					Name: to.Ptr("Microsoft.Azure.Geneva.GenevaMonitoring"),
	// 					Properties: &armservicefabricmanagedclusters.VMSSExtensionProperties{
	// 						Type: to.Ptr("GenevaMonitoring"),
	// 						AutoUpgradeMinorVersion: to.Ptr(true),
	// 						Publisher: to.Ptr("Microsoft.Azure.Geneva"),
	// 						Settings: map[string]any{
	// 						},
	// 						TypeHandlerVersion: to.Ptr("2.0"),
	// 					},
	// 				},
	// 			},
	// 			VMImageOffer: to.Ptr("WindowsServer"),
	// 			VMImagePublisher: to.Ptr("MicrosoftWindowsServer"),
	// 			VMImageSKU: to.Ptr("2016-Datacenter-Server-Core"),
	// 			VMImageVersion: to.Ptr("latest"),
	// 			VMInstanceCount: to.Ptr[int32](10),
	// 			VMSize: to.Ptr("Standard_DS3"),
	// 		},
	// 		Tags: map[string]*string{
	// 		},
	// 	},
	// }
}

// Generated from example definition: 2025-03-01-preview/NodeTypePutOperationVmImagePlan_example.json
func ExampleNodeTypesClient_BeginCreateOrUpdate_putNodeTypeWithVMImagePlan() {
	cred, err := azidentity.NewDefaultAzureCredential(nil)
	if err != nil {
		log.Fatalf("failed to obtain a credential: %v", err)
	}
	ctx := context.Background()
	clientFactory, err := armservicefabricmanagedclusters.NewClientFactory("00000000-0000-0000-0000-000000000000", cred, nil)
	if err != nil {
		log.Fatalf("failed to create client: %v", err)
	}
	poller, err := clientFactory.NewNodeTypesClient().BeginCreateOrUpdate(ctx, "resRg", "myCluster", "BE", armservicefabricmanagedclusters.NodeType{
		Properties: &armservicefabricmanagedclusters.NodeTypeProperties{
			DataDiskSizeGB: to.Ptr[int32](200),
			IsPrimary:      to.Ptr(false),
			VMImageOffer:   to.Ptr("windows_2022_test"),
			VMImagePlan: &armservicefabricmanagedclusters.VMImagePlan{
				Name:      to.Ptr("win_2022_test_20_10_gen2"),
				Product:   to.Ptr("windows_2022_test"),
				Publisher: to.Ptr("testpublisher"),
			},
			VMImagePublisher: to.Ptr("testpublisher"),
			VMImageSKU:       to.Ptr("win_2022_test_20_10_gen2"),
			VMImageVersion:   to.Ptr("latest"),
			VMInstanceCount:  to.Ptr[int32](10),
			VMSize:           to.Ptr("Standard_D3"),
		},
	}, nil)
	if err != nil {
		log.Fatalf("failed to finish the request: %v", err)
	}
	res, err := poller.PollUntilDone(ctx, nil)
	if err != nil {
		log.Fatalf("failed to pull the result: %v", err)
	}
	// You could use response here. We use blank identifier for just demo purposes.
	_ = res
	// If the HTTP response code is 200 as defined in example definition, your response structure would look as follows. Please pay attention that all the values in the output are fake values for just demo purposes.
	// res = armservicefabricmanagedclusters.NodeTypesClientCreateOrUpdateResponse{
	// 	NodeType: &armservicefabricmanagedclusters.NodeType{
	// 		Name: to.Ptr("BE"),
	// 		Type: to.Ptr("Microsoft.ServiceFabric/managedClusters/nodeTypes"),
	// 		ID: to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000000/resourcegroups/resRg/providers/Microsoft.ServiceFabric/managedClusters/myCluster/nodeTypes/BE"),
	// 		Properties: &armservicefabricmanagedclusters.NodeTypeProperties{
	// 			Capacities: map[string]*string{
	// 			},
	// 			DataDiskSizeGB: to.Ptr[int32](200),
	// 			DataDiskType: to.Ptr(armservicefabricmanagedclusters.DiskTypeStandardSSDLRS),
	// 			IsPrimary: to.Ptr(false),
	// 			IsStateless: to.Ptr(false),
	// 			PlacementProperties: map[string]*string{
	// 			},
	// 			ProvisioningState: to.Ptr(armservicefabricmanagedclusters.ManagedResourceProvisioningStateCreating),
	// 			VMImageOffer: to.Ptr("windows_2022_test"),
	// 			VMImagePlan: &armservicefabricmanagedclusters.VMImagePlan{
	// 				Name: to.Ptr("win_2022_test_20_10_gen2"),
	// 				Product: to.Ptr("windows_2022_test"),
	// 				Publisher: to.Ptr("testpublisher"),
	// 			},
	// 			VMImagePublisher: to.Ptr("testpublisher"),
	// 			VMImageSKU: to.Ptr("win_2022_test_20_10_gen2"),
	// 			VMImageVersion: to.Ptr("latest"),
	// 			VMInstanceCount: to.Ptr[int32](10),
	// 			VMSize: to.Ptr("Standard_D3"),
	// 		},
	// 		Tags: map[string]*string{
	// 		},
	// 	},
	// }
}

// Generated from example definition: 2025-03-01-preview/NodeTypePutOperation_example_max.json
func ExampleNodeTypesClient_BeginCreateOrUpdate_putANodeTypeWithMaximumParameters() {
	cred, err := azidentity.NewDefaultAzureCredential(nil)
	if err != nil {
		log.Fatalf("failed to obtain a credential: %v", err)
	}
	ctx := context.Background()
	clientFactory, err := armservicefabricmanagedclusters.NewClientFactory("00000000-0000-0000-0000-000000000000", cred, nil)
	if err != nil {
		log.Fatalf("failed to create client: %v", err)
	}
	poller, err := clientFactory.NewNodeTypesClient().BeginCreateOrUpdate(ctx, "resRg", "myCluster", "BE-testResourceGroup-testRegion-test", armservicefabricmanagedclusters.NodeType{
		Properties: &armservicefabricmanagedclusters.NodeTypeProperties{
			AdditionalDataDisks: []*armservicefabricmanagedclusters.VmssDataDisk{
				{
					DiskLetter: to.Ptr("F"),
					DiskSizeGB: to.Ptr[int32](256),
					DiskType:   to.Ptr(armservicefabricmanagedclusters.DiskTypeStandardSSDLRS),
					Lun:        to.Ptr[int32](1),
				},
				{
					DiskLetter: to.Ptr("G"),
					DiskSizeGB: to.Ptr[int32](150),
					DiskType:   to.Ptr(armservicefabricmanagedclusters.DiskTypePremiumLRS),
					Lun:        to.Ptr[int32](2),
				},
			},
			AdditionalNetworkInterfaceConfigurations: []*armservicefabricmanagedclusters.AdditionalNetworkInterfaceConfiguration{
				{
					Name: to.Ptr("nic-1"),
					DscpConfiguration: &armservicefabricmanagedclusters.SubResource{
						ID: to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/resRg/providers/Microsoft.Network/dscpConfigurations/myDscpConfig"),
					},
					EnableAcceleratedNetworking: to.Ptr(true),
					IPConfigurations: []*armservicefabricmanagedclusters.IPConfiguration{
						{
							Name: to.Ptr("ipconfig-1"),
							ApplicationGatewayBackendAddressPools: []*armservicefabricmanagedclusters.SubResource{
								{
									ID: to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/resRg/providers/Microsoft.Network/applicationGateways/appgw-test/backendAddressPools/appgwBepoolTest"),
								},
							},
							LoadBalancerBackendAddressPools: []*armservicefabricmanagedclusters.SubResource{
								{
									ID: to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/resRg/providers/Microsoft.Network/loadBalancers/test-LB/backendAddressPools/LoadBalancerBEAddressPool"),
								},
							},
							LoadBalancerInboundNatPools: []*armservicefabricmanagedclusters.SubResource{
								{
									ID: to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/resRg/providers/Microsoft.Network/loadBalancers/test-LB/inboundNatPools/LoadBalancerNATPool"),
								},
							},
							PrivateIPAddressVersion: to.Ptr(armservicefabricmanagedclusters.PrivateIPAddressVersionIPv4),
							PublicIPAddressConfiguration: &armservicefabricmanagedclusters.IPConfigurationPublicIPAddressConfiguration{
								Name: to.Ptr("publicip-1"),
								IPTags: []*armservicefabricmanagedclusters.IPTag{
									{
										IPTagType: to.Ptr("RoutingPreference"),
										Tag:       to.Ptr("Internet"),
									},
								},
								PublicIPAddressVersion: to.Ptr(armservicefabricmanagedclusters.PublicIPAddressVersionIPv4),
							},
							Subnet: &armservicefabricmanagedclusters.SubResource{
								ID: to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/resRg/providers/Microsoft.Network/virtualNetworks/vnet1/subnets/subnet1"),
							},
						},
					},
				},
			},
			Capacities: map[string]*string{
				"ClientConnections": to.Ptr("65536"),
			},
			ComputerNamePrefix:          to.Ptr("BE"),
			DataDiskLetter:              to.Ptr("S"),
			DataDiskSizeGB:              to.Ptr[int32](200),
			DataDiskType:                to.Ptr(armservicefabricmanagedclusters.DiskTypePremiumLRS),
			DscpConfigurationID:         to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/resRg/providers/Microsoft.Network/dscpConfigurations/myDscpConfig"),
			EnableAcceleratedNetworking: to.Ptr(true),
			EnableEncryptionAtHost:      to.Ptr(true),
			EnableNodePublicIP:          to.Ptr(true),
			EnableNodePublicIPv6:        to.Ptr(true),
			EnableOverProvisioning:      to.Ptr(false),
			EvictionPolicy:              to.Ptr(armservicefabricmanagedclusters.EvictionPolicyTypeDeallocate),
			FrontendConfigurations: []*armservicefabricmanagedclusters.FrontendConfiguration{
				{
					ApplicationGatewayBackendAddressPoolID: to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/resRg/providers/Microsoft.Network/applicationGateways/appgw-test/backendAddressPools/appgwBepoolTest"),
					LoadBalancerBackendAddressPoolID:       to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/resRg/providers/Microsoft.Network/loadBalancers/test-LB/backendAddressPools/LoadBalancerBEAddressPool"),
					LoadBalancerInboundNatPoolID:           to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/resRg/providers/Microsoft.Network/loadBalancers/test-LB/inboundNatPools/LoadBalancerNATPool"),
				},
			},
			IsPrimary:               to.Ptr(false),
			IsSpotVM:                to.Ptr(true),
			IsStateless:             to.Ptr(true),
			MultiplePlacementGroups: to.Ptr(true),
			NatGatewayID:            to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/resRg/providers/Microsoft.Network/natGateways/myNatGateway"),
			PlacementProperties: map[string]*string{
				"HasSSD":       to.Ptr("true"),
				"NodeColor":    to.Ptr("green"),
				"SomeProperty": to.Ptr("5"),
			},
			SecureBootEnabled:            to.Ptr(true),
			SecurityType:                 to.Ptr(armservicefabricmanagedclusters.SecurityTypeConfidentialVM),
			SecurityEncryptionType:       to.Ptr(armservicefabricmanagedclusters.SecurityEncryptionTypeDiskWithVMGuestState),
			ServiceArtifactReferenceID:   to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/resRg/providers/Microsoft.Compute/galleries/myGallery/serviceArtifacts/myServiceArtifact/vmArtifactsProfiles/myVmArtifactProfile"),
			SpotRestoreTimeout:           to.Ptr("PT30M"),
			SubnetID:                     to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/resRg/providers/Microsoft.Network/virtualNetworks/vnet1/subnets/subnet1"),
			UseDefaultPublicLoadBalancer: to.Ptr(true),
			UseEphemeralOSDisk:           to.Ptr(true),
			VMApplications: []*armservicefabricmanagedclusters.VMApplication{
				{
					ConfigurationReference:          to.Ptr("https://mystorageaccount.blob.core.windows.net/containername/blobname"),
					EnableAutomaticUpgrade:          to.Ptr(true),
					Order:                           to.Ptr[int32](1),
					PackageReferenceID:              to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/resRg/providers/Microsoft.Compute/galleries/myGallery/applications/myApplication/versions/1.0.0"),
					TreatFailureAsDeploymentFailure: to.Ptr(false),
					VMGalleryTags:                   to.Ptr("{\"Tag1\":\"Value1\",\"Tag2\":\"Value2\"}"),
				},
			},
			VMExtensions: []*armservicefabricmanagedclusters.VMSSExtension{
				{
					Name: to.Ptr("Microsoft.Azure.Geneva.GenevaMonitoring"),
					Properties: &armservicefabricmanagedclusters.VMSSExtensionProperties{
						Type:                    to.Ptr("GenevaMonitoring"),
						AutoUpgradeMinorVersion: to.Ptr(true),
						EnableAutomaticUpgrade:  to.Ptr(true),
						ForceUpdateTag:          to.Ptr("v.1.0"),
						Publisher:               to.Ptr("Microsoft.Azure.Geneva"),
						Settings:                map[string]any{},
						SetupOrder: []*armservicefabricmanagedclusters.VmssExtensionSetupOrder{
							to.Ptr(armservicefabricmanagedclusters.VmssExtensionSetupOrderBeforeSFRuntime),
						},
						TypeHandlerVersion: to.Ptr("2.0"),
					},
				},
			},
			VMImageOffer:     to.Ptr("WindowsServer"),
			VMImagePublisher: to.Ptr("MicrosoftWindowsServer"),
			VMImageSKU:       to.Ptr("2016-Datacenter-Server-Core"),
			VMImageVersion:   to.Ptr("latest"),
			VMInstanceCount:  to.Ptr[int32](10),
			VMManagedIdentity: &armservicefabricmanagedclusters.VMManagedIdentity{
				UserAssignedIdentities: []*string{
					to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/resRg/providers/Microsoft.ManagedIdentity/userAssignedIdentities/myIdentity"),
					to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/resRg/providers/Microsoft.ManagedIdentity/userAssignedIdentities/myIdentity2"),
				},
			},
			VMSecrets: []*armservicefabricmanagedclusters.VaultSecretGroup{
				{
					SourceVault: &armservicefabricmanagedclusters.SubResource{
						ID: to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/resRg/providers/Microsoft.KeyVault/vaults/myVault"),
					},
					VaultCertificates: []*armservicefabricmanagedclusters.VaultCertificate{
						{
							CertificateStore: to.Ptr("My"),
							CertificateURL:   to.Ptr("https://myVault.vault.azure.net:443/secrets/myCert/ef1a31d39e1f46bca33def54b6cda54c"),
						},
					},
				},
			},
			VMSetupActions: []*armservicefabricmanagedclusters.VMSetupAction{
				to.Ptr(armservicefabricmanagedclusters.VMSetupActionEnableContainers),
				to.Ptr(armservicefabricmanagedclusters.VMSetupActionEnableHyperV),
			},
			VMSize: to.Ptr("Standard_DS3"),
		},
	}, nil)
	if err != nil {
		log.Fatalf("failed to finish the request: %v", err)
	}
	res, err := poller.PollUntilDone(ctx, nil)
	if err != nil {
		log.Fatalf("failed to pull the result: %v", err)
	}
	// You could use response here. We use blank identifier for just demo purposes.
	_ = res
	// If the HTTP response code is 200 as defined in example definition, your response structure would look as follows. Please pay attention that all the values in the output are fake values for just demo purposes.
	// res = armservicefabricmanagedclusters.NodeTypesClientCreateOrUpdateResponse{
	// 	NodeType: &armservicefabricmanagedclusters.NodeType{
	// 		Name: to.Ptr("BE"),
	// 		Type: to.Ptr("Microsoft.ServiceFabric/managedClusters/nodeTypes"),
	// 		ID: to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000000/resourcegroups/resRg/providers/Microsoft.ServiceFabric/managedClusters/myCluster/nodeTypes/BE"),
	// 		Properties: &armservicefabricmanagedclusters.NodeTypeProperties{
	// 			AdditionalDataDisks: []*armservicefabricmanagedclusters.VmssDataDisk{
	// 				{
	// 					DiskLetter: to.Ptr("F"),
	// 					DiskSizeGB: to.Ptr[int32](256),
	// 					DiskType: to.Ptr(armservicefabricmanagedclusters.DiskTypeStandardSSDLRS),
	// 					Lun: to.Ptr[int32](1),
	// 				},
	// 				{
	// 					DiskLetter: to.Ptr("G"),
	// 					DiskSizeGB: to.Ptr[int32](150),
	// 					DiskType: to.Ptr(armservicefabricmanagedclusters.DiskTypePremiumLRS),
	// 					Lun: to.Ptr[int32](2),
	// 				},
	// 			},
	// 			AdditionalNetworkInterfaceConfigurations: []*armservicefabricmanagedclusters.AdditionalNetworkInterfaceConfiguration{
	// 				{
	// 					Name: to.Ptr("nic-1"),
	// 					DscpConfiguration: &armservicefabricmanagedclusters.SubResource{
	// 						ID: to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/resRg/providers/Microsoft.Network/dscpConfigurations/myDscpConfig"),
	// 					},
	// 					EnableAcceleratedNetworking: to.Ptr(true),
	// 					IPConfigurations: []*armservicefabricmanagedclusters.IPConfiguration{
	// 						{
	// 							Name: to.Ptr("ipconfig-1"),
	// 							ApplicationGatewayBackendAddressPools: []*armservicefabricmanagedclusters.SubResource{
	// 								{
	// 									ID: to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/resRg/providers/Microsoft.Network/applicationGateways/appgw-test/backendAddressPools/appgwBepoolTest"),
	// 								},
	// 							},
	// 							LoadBalancerBackendAddressPools: []*armservicefabricmanagedclusters.SubResource{
	// 								{
	// 									ID: to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/resRg/providers/Microsoft.Network/loadBalancers/test-LB/backendAddressPools/LoadBalancerBEAddressPool"),
	// 								},
	// 							},
	// 							LoadBalancerInboundNatPools: []*armservicefabricmanagedclusters.SubResource{
	// 								{
	// 									ID: to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/resRg/providers/Microsoft.Network/loadBalancers/test-LB/inboundNatPools/LoadBalancerNATPool"),
	// 								},
	// 							},
	// 							PrivateIPAddressVersion: to.Ptr(armservicefabricmanagedclusters.PrivateIPAddressVersionIPv4),
	// 							PublicIPAddressConfiguration: &armservicefabricmanagedclusters.IPConfigurationPublicIPAddressConfiguration{
	// 								Name: to.Ptr("publicip-1"),
	// 								IPTags: []*armservicefabricmanagedclusters.IPTag{
	// 									{
	// 										IPTagType: to.Ptr("RoutingPreference"),
	// 										Tag: to.Ptr("Internet"),
	// 									},
	// 								},
	// 								PublicIPAddressVersion: to.Ptr(armservicefabricmanagedclusters.PublicIPAddressVersionIPv4),
	// 							},
	// 							Subnet: &armservicefabricmanagedclusters.SubResource{
	// 								ID: to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/resRg/providers/Microsoft.Network/virtualNetworks/vnet1/subnets/subnet1"),
	// 							},
	// 						},
	// 					},
	// 				},
	// 			},
	// 			Capacities: map[string]*string{
	// 				"ClientConnections": to.Ptr("65536"),
	// 			},
	// 			DataDiskLetter: to.Ptr("S"),
	// 			DataDiskSizeGB: to.Ptr[int32](200),
	// 			DataDiskType: to.Ptr(armservicefabricmanagedclusters.DiskTypePremiumLRS),
	// 			DscpConfigurationID: to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/resRg/providers/Microsoft.Network/dscpConfigurations/myDscpConfig"),
	// 			EnableAcceleratedNetworking: to.Ptr(true),
	// 			EnableEncryptionAtHost: to.Ptr(true),
	// 			EnableNodePublicIP: to.Ptr(true),
	// 			EnableNodePublicIPv6: to.Ptr(true),
	// 			EnableOverProvisioning: to.Ptr(false),
	// 			EvictionPolicy: to.Ptr(armservicefabricmanagedclusters.EvictionPolicyTypeDeallocate),
	// 			FrontendConfigurations: []*armservicefabricmanagedclusters.FrontendConfiguration{
	// 				{
	// 					ApplicationGatewayBackendAddressPoolID: to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/resRg/providers/Microsoft.Network/applicationGateways/appgw-test/backendAddressPools/appgwBepoolTest"),
	// 					LoadBalancerBackendAddressPoolID: to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/resRg/providers/Microsoft.Network/loadBalancers/test-LB/backendAddressPools/LoadBalancerBEAddressPool"),
	// 					LoadBalancerInboundNatPoolID: to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/resRg/providers/Microsoft.Network/loadBalancers/test-LB/inboundNatPools/LoadBalancerNATPool"),
	// 				},
	// 			},
	// 			IsPrimary: to.Ptr(false),
	// 			IsSpotVM: to.Ptr(true),
	// 			IsStateless: to.Ptr(true),
	// 			MultiplePlacementGroups: to.Ptr(true),
	// 			NatGatewayID: to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/resRg/providers/Microsoft.Network/natGateways/myNatGateway"),
	// 			PlacementProperties: map[string]*string{
	// 				"HasSSD": to.Ptr("true"),
	// 				"NodeColor": to.Ptr("green"),
	// 				"SomeProperty": to.Ptr("5"),
	// 			},
	// 			ProvisioningState: to.Ptr(armservicefabricmanagedclusters.ManagedResourceProvisioningStateCreating),
	// 			SecureBootEnabled: to.Ptr(true),
	// 			SecurityType: to.Ptr(armservicefabricmanagedclusters.SecurityTypeConfidentialVM),
	// 			SecurityEncryptionType: to.Ptr(armservicefabricmanagedclusters.SecurityEncryptionTypeDiskWithVMGuestState),
	// 			ServiceArtifactReferenceID: to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/resRg/providers/Microsoft.Compute/galleries/myGallery/serviceArtifacts/myServiceArtifact/vmArtifactsProfiles/myVmArtifactProfile"),
	// 			SpotRestoreTimeout: to.Ptr("PT30M"),
	// 			SubnetID: to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/resRg/providers/Microsoft.Network/virtualNetworks/vnet1/subnets/subnet1"),
	// 			UseDefaultPublicLoadBalancer: to.Ptr(true),
	// 			UseEphemeralOSDisk: to.Ptr(true),
	// 			VMApplications: []*armservicefabricmanagedclusters.VMApplication{
	// 				{
	// 					ConfigurationReference: to.Ptr("https://mystorageaccount.blob.core.windows.net/containername/blobname"),
	// 					EnableAutomaticUpgrade: to.Ptr(true),
	// 					Order: to.Ptr[int32](1),
	// 					PackageReferenceID: to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/resRg/providers/Microsoft.Compute/galleries/myGallery/applications/myApplication/versions/1.0.0"),
	// 					TreatFailureAsDeploymentFailure: to.Ptr(false),
	// 					VMGalleryTags: to.Ptr("{\"Tag1\":\"Value1\",\"Tag2\":\"Value2\"}"),
	// 				},
	// 			},
	// 			VMExtensions: []*armservicefabricmanagedclusters.VMSSExtension{
	// 				{
	// 					Name: to.Ptr("Microsoft.Azure.Geneva.GenevaMonitoring"),
	// 					Properties: &armservicefabricmanagedclusters.VMSSExtensionProperties{
	// 						Type: to.Ptr("GenevaMonitoring"),
	// 						AutoUpgradeMinorVersion: to.Ptr(true),
	// 						EnableAutomaticUpgrade: to.Ptr(true),
	// 						ForceUpdateTag: to.Ptr("v.1.0"),
	// 						Publisher: to.Ptr("Microsoft.Azure.Geneva"),
	// 						Settings: map[string]any{
	// 						},
	// 						SetupOrder: []*armservicefabricmanagedclusters.VmssExtensionSetupOrder{
	// 							to.Ptr(armservicefabricmanagedclusters.VmssExtensionSetupOrderBeforeSFRuntime),
	// 						},
	// 						TypeHandlerVersion: to.Ptr("2.0"),
	// 					},
	// 				},
	// 			},
	// 			VMImageOffer: to.Ptr("WindowsServer"),
	// 			VMImagePublisher: to.Ptr("MicrosoftWindowsServer"),
	// 			VMImageSKU: to.Ptr("2016-Datacenter-Server-Core"),
	// 			VMImageVersion: to.Ptr("latest"),
	// 			VMInstanceCount: to.Ptr[int32](10),
	// 			VMManagedIdentity: &armservicefabricmanagedclusters.VMManagedIdentity{
	// 				UserAssignedIdentities: []*string{
	// 					to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/resRg/providers/Microsoft.ManagedIdentity/userAssignedIdentities/myIdentity"),
	// 					to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/resRg/providers/Microsoft.ManagedIdentity/userAssignedIdentities/myIdentity2"),
	// 				},
	// 			},
	// 			VMSecrets: []*armservicefabricmanagedclusters.VaultSecretGroup{
	// 				{
	// 					SourceVault: &armservicefabricmanagedclusters.SubResource{
	// 						ID: to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/resRg/providers/Microsoft.KeyVault/vaults/myVault"),
	// 					},
	// 					VaultCertificates: []*armservicefabricmanagedclusters.VaultCertificate{
	// 						{
	// 							CertificateStore: to.Ptr("My"),
	// 							CertificateURL: to.Ptr("https://myVault.vault.azure.net:443/secrets/myCert/ef1a31d39e1f46bca33def54b6cda54c"),
	// 						},
	// 					},
	// 				},
	// 			},
	// 			VMSetupActions: []*armservicefabricmanagedclusters.VMSetupAction{
	// 				to.Ptr(armservicefabricmanagedclusters.VMSetupActionEnableContainers),
	// 				to.Ptr(armservicefabricmanagedclusters.VMSetupActionEnableHyperV),
	// 			},
	// 			VMSize: to.Ptr("Standard_DS3"),
	// 			Zones: []*string{
	// 				to.Ptr("1"),
	// 				to.Ptr("2"),
	// 				to.Ptr("3"),
	// 			},
	// 		},
	// 		Tags: map[string]*string{
	// 		},
	// 	},
	// }
}

// Generated from example definition: 2025-03-01-preview/NodeTypePutOperation_example_min.json
func ExampleNodeTypesClient_BeginCreateOrUpdate_putANodeTypeWithMinimumParameters() {
	cred, err := azidentity.NewDefaultAzureCredential(nil)
	if err != nil {
		log.Fatalf("failed to obtain a credential: %v", err)
	}
	ctx := context.Background()
	clientFactory, err := armservicefabricmanagedclusters.NewClientFactory("00000000-0000-0000-0000-000000000000", cred, nil)
	if err != nil {
		log.Fatalf("failed to create client: %v", err)
	}
	poller, err := clientFactory.NewNodeTypesClient().BeginCreateOrUpdate(ctx, "resRg", "myCluster", "BE", armservicefabricmanagedclusters.NodeType{
		Properties: &armservicefabricmanagedclusters.NodeTypeProperties{
			DataDiskSizeGB:   to.Ptr[int32](200),
			IsPrimary:        to.Ptr(false),
			VMImageOffer:     to.Ptr("WindowsServer"),
			VMImagePublisher: to.Ptr("MicrosoftWindowsServer"),
			VMImageSKU:       to.Ptr("2016-Datacenter-Server-Core"),
			VMImageVersion:   to.Ptr("latest"),
			VMInstanceCount:  to.Ptr[int32](10),
			VMSize:           to.Ptr("Standard_D3"),
		},
	}, nil)
	if err != nil {
		log.Fatalf("failed to finish the request: %v", err)
	}
	res, err := poller.PollUntilDone(ctx, nil)
	if err != nil {
		log.Fatalf("failed to pull the result: %v", err)
	}
	// You could use response here. We use blank identifier for just demo purposes.
	_ = res
	// If the HTTP response code is 200 as defined in example definition, your response structure would look as follows. Please pay attention that all the values in the output are fake values for just demo purposes.
	// res = armservicefabricmanagedclusters.NodeTypesClientCreateOrUpdateResponse{
	// 	NodeType: &armservicefabricmanagedclusters.NodeType{
	// 		Name: to.Ptr("BE"),
	// 		Type: to.Ptr("Microsoft.ServiceFabric/managedClusters/nodeTypes"),
	// 		ID: to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000000/resourcegroups/resRg/providers/Microsoft.ServiceFabric/managedClusters/myCluster/nodeTypes/BE"),
	// 		Properties: &armservicefabricmanagedclusters.NodeTypeProperties{
	// 			Capacities: map[string]*string{
	// 			},
	// 			DataDiskSizeGB: to.Ptr[int32](200),
	// 			DataDiskType: to.Ptr(armservicefabricmanagedclusters.DiskTypeStandardSSDLRS),
	// 			IsPrimary: to.Ptr(false),
	// 			IsStateless: to.Ptr(false),
	// 			PlacementProperties: map[string]*string{
	// 			},
	// 			ProvisioningState: to.Ptr(armservicefabricmanagedclusters.ManagedResourceProvisioningStateCreating),
	// 			VMImageOffer: to.Ptr("WindowsServer"),
	// 			VMImagePublisher: to.Ptr("MicrosoftWindowsServer"),
	// 			VMImageSKU: to.Ptr("2016-Datacenter-Server-Core"),
	// 			VMImageVersion: to.Ptr("latest"),
	// 			VMInstanceCount: to.Ptr[int32](10),
	// 			VMSize: to.Ptr("Standard_D3"),
	// 		},
	// 		Tags: map[string]*string{
	// 		},
	// 	},
	// }
}

// Generated from example definition: 2025-03-01-preview/DeallocateNodes_example.json
func ExampleNodeTypesClient_BeginDeallocate() {
	cred, err := azidentity.NewDefaultAzureCredential(nil)
	if err != nil {
		log.Fatalf("failed to obtain a credential: %v", err)
	}
	ctx := context.Background()
	clientFactory, err := armservicefabricmanagedclusters.NewClientFactory("00000000-0000-0000-0000-000000000000", cred, nil)
	if err != nil {
		log.Fatalf("failed to create client: %v", err)
	}
	poller, err := clientFactory.NewNodeTypesClient().BeginDeallocate(ctx, "resRg", "myCluster", "BE", armservicefabricmanagedclusters.NodeTypeActionParameters{
		Nodes: []*string{
			to.Ptr("BE_0"),
			to.Ptr("BE_1"),
		},
	}, nil)
	if err != nil {
		log.Fatalf("failed to finish the request: %v", err)
	}
	_, err = poller.PollUntilDone(ctx, nil)
	if err != nil {
		log.Fatalf("failed to pull the result: %v", err)
	}
}

// Generated from example definition: 2025-03-01-preview/NodeTypeDeleteOperation_example.json
func ExampleNodeTypesClient_BeginDelete() {
	cred, err := azidentity.NewDefaultAzureCredential(nil)
	if err != nil {
		log.Fatalf("failed to obtain a credential: %v", err)
	}
	ctx := context.Background()
	clientFactory, err := armservicefabricmanagedclusters.NewClientFactory("00000000-0000-0000-0000-000000000000", cred, nil)
	if err != nil {
		log.Fatalf("failed to create client: %v", err)
	}
	poller, err := clientFactory.NewNodeTypesClient().BeginDelete(ctx, "resRg", "myCluster", "BE", nil)
	if err != nil {
		log.Fatalf("failed to finish the request: %v", err)
	}
	_, err = poller.PollUntilDone(ctx, nil)
	if err != nil {
		log.Fatalf("failed to pull the result: %v", err)
	}
}

// Generated from example definition: 2025-03-01-preview/DeleteNodes_example.json
func ExampleNodeTypesClient_BeginDeleteNode() {
	cred, err := azidentity.NewDefaultAzureCredential(nil)
	if err != nil {
		log.Fatalf("failed to obtain a credential: %v", err)
	}
	ctx := context.Background()
	clientFactory, err := armservicefabricmanagedclusters.NewClientFactory("00000000-0000-0000-0000-000000000000", cred, nil)
	if err != nil {
		log.Fatalf("failed to create client: %v", err)
	}
	poller, err := clientFactory.NewNodeTypesClient().BeginDeleteNode(ctx, "resRg", "myCluster", "BE", armservicefabricmanagedclusters.NodeTypeActionParameters{
		Nodes: []*string{
			to.Ptr("BE_0"),
			to.Ptr("BE_3"),
		},
	}, nil)
	if err != nil {
		log.Fatalf("failed to finish the request: %v", err)
	}
	_, err = poller.PollUntilDone(ctx, nil)
	if err != nil {
		log.Fatalf("failed to pull the result: %v", err)
	}
}

// Generated from example definition: 2025-03-01-preview/NodeTypeGetOperation_example.json
func ExampleNodeTypesClient_Get() {
	cred, err := azidentity.NewDefaultAzureCredential(nil)
	if err != nil {
		log.Fatalf("failed to obtain a credential: %v", err)
	}
	ctx := context.Background()
	clientFactory, err := armservicefabricmanagedclusters.NewClientFactory("00000000-0000-0000-0000-000000000000", cred, nil)
	if err != nil {
		log.Fatalf("failed to create client: %v", err)
	}
	res, err := clientFactory.NewNodeTypesClient().Get(ctx, "resRg", "myCluster", "FE", nil)
	if err != nil {
		log.Fatalf("failed to finish the request: %v", err)
	}
	// You could use response here. We use blank identifier for just demo purposes.
	_ = res
	// If the HTTP response code is 200 as defined in example definition, your response structure would look as follows. Please pay attention that all the values in the output are fake values for just demo purposes.
	// res = armservicefabricmanagedclusters.NodeTypesClientGetResponse{
	// 	NodeType: &armservicefabricmanagedclusters.NodeType{
	// 		Name: to.Ptr("FE"),
	// 		Type: to.Ptr("Microsoft.ServiceFabric/managedClusters/nodeTypes"),
	// 		ID: to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000000/resourcegroups/resRg/providers/Microsoft.ServiceFabric/managedClusters/myCluster/nodeTypes/FE"),
	// 		Properties: &armservicefabricmanagedclusters.NodeTypeProperties{
	// 			Capacities: map[string]*string{
	// 			},
	// 			DataDiskSizeGB: to.Ptr[int32](100),
	// 			DataDiskType: to.Ptr(armservicefabricmanagedclusters.DiskTypeStandardSSDLRS),
	// 			IsPrimary: to.Ptr(true),
	// 			IsStateless: to.Ptr(false),
	// 			PlacementProperties: map[string]*string{
	// 			},
	// 			VMImageOffer: to.Ptr("WindowsServer"),
	// 			VMImagePublisher: to.Ptr("MicrosoftWindowsServer"),
	// 			VMImageSKU: to.Ptr("2016-Datacenter"),
	// 			VMImageVersion: to.Ptr("latest"),
	// 			VMInstanceCount: to.Ptr[int32](5),
	// 			VMSecrets: []*armservicefabricmanagedclusters.VaultSecretGroup{
	// 				{
	// 					SourceVault: &armservicefabricmanagedclusters.SubResource{
	// 						ID: to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/resRg/providers/Microsoft.KeyVault/vaults/myVault"),
	// 					},
	// 					VaultCertificates: []*armservicefabricmanagedclusters.VaultCertificate{
	// 						{
	// 							CertificateStore: to.Ptr("My"),
	// 							CertificateURL: to.Ptr("https://myVault.vault.azure.net:443/secrets/myCert/ef1a31d39e1f46bca33def54b6cda54c"),
	// 						},
	// 					},
	// 				},
	// 			},
	// 			VMSize: to.Ptr("Standard_D2"),
	// 		},
	// 		Tags: map[string]*string{
	// 		},
	// 	},
	// }
}

// Generated from example definition: 2025-03-01-preview/NodeTypeListOperation_example.json
func ExampleNodeTypesClient_NewListByManagedClustersPager() {
	cred, err := azidentity.NewDefaultAzureCredential(nil)
	if err != nil {
		log.Fatalf("failed to obtain a credential: %v", err)
	}
	ctx := context.Background()
	clientFactory, err := armservicefabricmanagedclusters.NewClientFactory("00000000-0000-0000-0000-000000000000", cred, nil)
	if err != nil {
		log.Fatalf("failed to create client: %v", err)
	}
	pager := clientFactory.NewNodeTypesClient().NewListByManagedClustersPager("resRg", "myCluster", nil)
	for pager.More() {
		page, err := pager.NextPage(ctx)
		if err != nil {
			log.Fatalf("failed to advance page: %v", err)
		}
		for _, v := range page.Value {
			// You could use page here. We use blank identifier for just demo purposes.
			_ = v
		}
		// If the HTTP response code is 200 as defined in example definition, your page structure would look as follows. Please pay attention that all the values in the output are fake values for just demo purposes.
		// page = armservicefabricmanagedclusters.NodeTypesClientListByManagedClustersResponse{
		// 	NodeTypeListResult: armservicefabricmanagedclusters.NodeTypeListResult{
		// 		NextLink: to.Ptr("http://examplelink.com"),
		// 		Value: []*armservicefabricmanagedclusters.NodeType{
		// 			{
		// 				Name: to.Ptr("FE"),
		// 				Type: to.Ptr("Microsoft.ServiceFabric/managedClusters/nodeTypes"),
		// 				ID: to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000000/resourcegroups/resRg/providers/Microsoft.ServiceFabric/managedClusters/myCluster/nodeTypes/FE"),
		// 				Properties: &armservicefabricmanagedclusters.NodeTypeProperties{
		// 					Capacities: map[string]*string{
		// 					},
		// 					DataDiskSizeGB: to.Ptr[int32](100),
		// 					DataDiskType: to.Ptr(armservicefabricmanagedclusters.DiskTypeStandardSSDLRS),
		// 					IsPrimary: to.Ptr(true),
		// 					IsStateless: to.Ptr(false),
		// 					PlacementProperties: map[string]*string{
		// 					},
		// 					VMImageOffer: to.Ptr("WindowsServer"),
		// 					VMImagePublisher: to.Ptr("MicrosoftWindowsServer"),
		// 					VMImageSKU: to.Ptr("2016-Datacenter"),
		// 					VMImageVersion: to.Ptr("latest"),
		// 					VMInstanceCount: to.Ptr[int32](5),
		// 					VMSize: to.Ptr("Standard_D2"),
		// 				},
		// 				SKU: &armservicefabricmanagedclusters.NodeTypeSKU{
		// 					Name: to.Ptr("Standard_P0"),
		// 					Capacity: to.Ptr[int32](5),
		// 					Tier: to.Ptr("Standard"),
		// 				},
		// 				Tags: map[string]*string{
		// 				},
		// 			},
		// 			{
		// 				Name: to.Ptr("BE"),
		// 				Type: to.Ptr("Microsoft.ServiceFabric/managedClusters/nodeTypes"),
		// 				ID: to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000000/resourcegroups/resRg/providers/Microsoft.ServiceFabric/managedClusters/myCluster/nodeTypes/BE"),
		// 				Properties: &armservicefabricmanagedclusters.NodeTypeProperties{
		// 					Capacities: map[string]*string{
		// 					},
		// 					DataDiskSizeGB: to.Ptr[int32](200),
		// 					DataDiskType: to.Ptr(armservicefabricmanagedclusters.DiskTypePremiumLRS),
		// 					IsPrimary: to.Ptr(false),
		// 					IsStateless: to.Ptr(false),
		// 					PlacementProperties: map[string]*string{
		// 					},
		// 					VMExtensions: []*armservicefabricmanagedclusters.VMSSExtension{
		// 						{
		// 							Name: to.Ptr("Microsoft.Azure.Geneva.GenevaMonitoring"),
		// 							Properties: &armservicefabricmanagedclusters.VMSSExtensionProperties{
		// 								Type: to.Ptr("GenevaMonitoring"),
		// 								AutoUpgradeMinorVersion: to.Ptr(true),
		// 								Publisher: to.Ptr("Microsoft.Azure.Geneva"),
		// 								Settings: map[string]any{
		// 								},
		// 								TypeHandlerVersion: to.Ptr("2.0"),
		// 							},
		// 						},
		// 					},
		// 					VMImageOffer: to.Ptr("WindowsServer"),
		// 					VMImagePublisher: to.Ptr("MicrosoftWindowsServer"),
		// 					VMImageSKU: to.Ptr("2016-Datacenter-Server-Core"),
		// 					VMImageVersion: to.Ptr("latest"),
		// 					VMInstanceCount: to.Ptr[int32](10),
		// 					VMSecrets: []*armservicefabricmanagedclusters.VaultSecretGroup{
		// 						{
		// 							SourceVault: &armservicefabricmanagedclusters.SubResource{
		// 								ID: to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/resRg/providers/Microsoft.KeyVault/vaults/myVault"),
		// 							},
		// 							VaultCertificates: []*armservicefabricmanagedclusters.VaultCertificate{
		// 								{
		// 									CertificateStore: to.Ptr("My"),
		// 									CertificateURL: to.Ptr("https://myVault.vault.azure.net:443/secrets/myCert/ef1a31d39e1f46bca33def54b6cda54c"),
		// 								},
		// 							},
		// 						},
		// 					},
		// 					VMSize: to.Ptr("Standard_DS3"),
		// 				},
		// 				SKU: &armservicefabricmanagedclusters.NodeTypeSKU{
		// 					Name: to.Ptr("Standard_S0"),
		// 					Capacity: to.Ptr[int32](10),
		// 					Tier: to.Ptr("Standard"),
		// 				},
		// 				Tags: map[string]*string{
		// 				},
		// 			},
		// 		},
		// 	},
		// }
	}
}

// Generated from example definition: 2025-03-01-preview/RedeployNodes_UD_example.json
func ExampleNodeTypesClient_BeginRedeploy_redeployAllNodesByUpgradeDomain() {
	cred, err := azidentity.NewDefaultAzureCredential(nil)
	if err != nil {
		log.Fatalf("failed to obtain a credential: %v", err)
	}
	ctx := context.Background()
	clientFactory, err := armservicefabricmanagedclusters.NewClientFactory("00000000-0000-0000-0000-000000000000", cred, nil)
	if err != nil {
		log.Fatalf("failed to create client: %v", err)
	}
	poller, err := clientFactory.NewNodeTypesClient().BeginRedeploy(ctx, "resRg", "myCluster", "BE", armservicefabricmanagedclusters.NodeTypeActionParameters{
		UpdateType: to.Ptr(armservicefabricmanagedclusters.UpdateTypeByUpgradeDomain),
	}, nil)
	if err != nil {
		log.Fatalf("failed to finish the request: %v", err)
	}
	_, err = poller.PollUntilDone(ctx, nil)
	if err != nil {
		log.Fatalf("failed to pull the result: %v", err)
	}
}

// Generated from example definition: 2025-03-01-preview/RedeployNodes_example.json
func ExampleNodeTypesClient_BeginRedeploy_redeployNodes() {
	cred, err := azidentity.NewDefaultAzureCredential(nil)
	if err != nil {
		log.Fatalf("failed to obtain a credential: %v", err)
	}
	ctx := context.Background()
	clientFactory, err := armservicefabricmanagedclusters.NewClientFactory("00000000-0000-0000-0000-000000000000", cred, nil)
	if err != nil {
		log.Fatalf("failed to create client: %v", err)
	}
	poller, err := clientFactory.NewNodeTypesClient().BeginRedeploy(ctx, "resRg", "myCluster", "BE", armservicefabricmanagedclusters.NodeTypeActionParameters{
		Nodes: []*string{
			to.Ptr("BE_0"),
			to.Ptr("BE_1"),
		},
	}, nil)
	if err != nil {
		log.Fatalf("failed to finish the request: %v", err)
	}
	_, err = poller.PollUntilDone(ctx, nil)
	if err != nil {
		log.Fatalf("failed to pull the result: %v", err)
	}
}

// Generated from example definition: 2025-03-01-preview/ReimageNodes_UD_example.json
func ExampleNodeTypesClient_BeginReimage_reimageAllNodesByUpgradeDomain() {
	cred, err := azidentity.NewDefaultAzureCredential(nil)
	if err != nil {
		log.Fatalf("failed to obtain a credential: %v", err)
	}
	ctx := context.Background()
	clientFactory, err := armservicefabricmanagedclusters.NewClientFactory("00000000-0000-0000-0000-000000000000", cred, nil)
	if err != nil {
		log.Fatalf("failed to create client: %v", err)
	}
	poller, err := clientFactory.NewNodeTypesClient().BeginReimage(ctx, "resRg", "myCluster", "BE", armservicefabricmanagedclusters.NodeTypeActionParameters{
		UpdateType: to.Ptr(armservicefabricmanagedclusters.UpdateTypeByUpgradeDomain),
	}, nil)
	if err != nil {
		log.Fatalf("failed to finish the request: %v", err)
	}
	_, err = poller.PollUntilDone(ctx, nil)
	if err != nil {
		log.Fatalf("failed to pull the result: %v", err)
	}
}

// Generated from example definition: 2025-03-01-preview/ReimageNodes_example.json
func ExampleNodeTypesClient_BeginReimage_reimageNodes() {
	cred, err := azidentity.NewDefaultAzureCredential(nil)
	if err != nil {
		log.Fatalf("failed to obtain a credential: %v", err)
	}
	ctx := context.Background()
	clientFactory, err := armservicefabricmanagedclusters.NewClientFactory("00000000-0000-0000-0000-000000000000", cred, nil)
	if err != nil {
		log.Fatalf("failed to create client: %v", err)
	}
	poller, err := clientFactory.NewNodeTypesClient().BeginReimage(ctx, "resRg", "myCluster", "BE", armservicefabricmanagedclusters.NodeTypeActionParameters{
		Nodes: []*string{
			to.Ptr("BE_0"),
			to.Ptr("BE_3"),
		},
	}, nil)
	if err != nil {
		log.Fatalf("failed to finish the request: %v", err)
	}
	_, err = poller.PollUntilDone(ctx, nil)
	if err != nil {
		log.Fatalf("failed to pull the result: %v", err)
	}
}

// Generated from example definition: 2025-03-01-preview/RestartNodes_example.json
func ExampleNodeTypesClient_BeginRestart() {
	cred, err := azidentity.NewDefaultAzureCredential(nil)
	if err != nil {
		log.Fatalf("failed to obtain a credential: %v", err)
	}
	ctx := context.Background()
	clientFactory, err := armservicefabricmanagedclusters.NewClientFactory("00000000-0000-0000-0000-000000000000", cred, nil)
	if err != nil {
		log.Fatalf("failed to create client: %v", err)
	}
	poller, err := clientFactory.NewNodeTypesClient().BeginRestart(ctx, "resRg", "myCluster", "BE", armservicefabricmanagedclusters.NodeTypeActionParameters{
		Nodes: []*string{
			to.Ptr("BE_0"),
			to.Ptr("BE_3"),
		},
	}, nil)
	if err != nil {
		log.Fatalf("failed to finish the request: %v", err)
	}
	_, err = poller.PollUntilDone(ctx, nil)
	if err != nil {
		log.Fatalf("failed to pull the result: %v", err)
	}
}

// Generated from example definition: 2025-03-01-preview/StartNodes_example.json
func ExampleNodeTypesClient_BeginStart() {
	cred, err := azidentity.NewDefaultAzureCredential(nil)
	if err != nil {
		log.Fatalf("failed to obtain a credential: %v", err)
	}
	ctx := context.Background()
	clientFactory, err := armservicefabricmanagedclusters.NewClientFactory("00000000-0000-0000-0000-000000000000", cred, nil)
	if err != nil {
		log.Fatalf("failed to create client: %v", err)
	}
	poller, err := clientFactory.NewNodeTypesClient().BeginStart(ctx, "resRg", "myCluster", "BE", armservicefabricmanagedclusters.NodeTypeActionParameters{
		Nodes: []*string{
			to.Ptr("BE_0"),
			to.Ptr("BE_1"),
		},
	}, nil)
	if err != nil {
		log.Fatalf("failed to finish the request: %v", err)
	}
	_, err = poller.PollUntilDone(ctx, nil)
	if err != nil {
		log.Fatalf("failed to pull the result: %v", err)
	}
}

// Generated from example definition: 2025-03-01-preview/NodeTypePatchOperationAutoScale_example.json
func ExampleNodeTypesClient_BeginUpdate_patchANodeTypeWhileAutoScaling() {
	cred, err := azidentity.NewDefaultAzureCredential(nil)
	if err != nil {
		log.Fatalf("failed to obtain a credential: %v", err)
	}
	ctx := context.Background()
	clientFactory, err := armservicefabricmanagedclusters.NewClientFactory("00000000-0000-0000-0000-000000000000", cred, nil)
	if err != nil {
		log.Fatalf("failed to create client: %v", err)
	}
	poller, err := clientFactory.NewNodeTypesClient().BeginUpdate(ctx, "resRg", "myCluster", "BE", armservicefabricmanagedclusters.NodeTypeUpdateParameters{
		SKU: &armservicefabricmanagedclusters.NodeTypeSKU{
			Name:     to.Ptr("Standard_S0"),
			Capacity: to.Ptr[int32](10),
			Tier:     to.Ptr("Standard"),
		},
		Tags: map[string]*string{
			"a": to.Ptr("b"),
		},
	}, nil)
	if err != nil {
		log.Fatalf("failed to finish the request: %v", err)
	}
	res, err := poller.PollUntilDone(ctx, nil)
	if err != nil {
		log.Fatalf("failed to pull the result: %v", err)
	}
	// You could use response here. We use blank identifier for just demo purposes.
	_ = res
	// If the HTTP response code is 200 as defined in example definition, your response structure would look as follows. Please pay attention that all the values in the output are fake values for just demo purposes.
	// res = armservicefabricmanagedclusters.NodeTypesClientUpdateResponse{
	// 	NodeType: &armservicefabricmanagedclusters.NodeType{
	// 		Name: to.Ptr("BE"),
	// 		Type: to.Ptr("Microsoft.ServiceFabric/managedClusters/nodeTypes"),
	// 		ID: to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000000/resourcegroups/resRg/providers/Microsoft.ServiceFabric/managedClusters/myCluster/nodeTypes/BE"),
	// 		Properties: &armservicefabricmanagedclusters.NodeTypeProperties{
	// 			Capacities: map[string]*string{
	// 				"ClientConnections": to.Ptr("65536"),
	// 			},
	// 			DataDiskSizeGB: to.Ptr[int32](200),
	// 			DataDiskType: to.Ptr(armservicefabricmanagedclusters.DiskTypeStandardSSDLRS),
	// 			IsPrimary: to.Ptr(false),
	// 			IsStateless: to.Ptr(false),
	// 			PlacementProperties: map[string]*string{
	// 				"HasSSD": to.Ptr("true"),
	// 				"NodeColor": to.Ptr("green"),
	// 				"SomeProperty": to.Ptr("5"),
	// 			},
	// 			ProvisioningState: to.Ptr(armservicefabricmanagedclusters.ManagedResourceProvisioningStateSucceeded),
	// 			VMExtensions: []*armservicefabricmanagedclusters.VMSSExtension{
	// 				{
	// 					Name: to.Ptr("Microsoft.Azure.Geneva.GenevaMonitoring"),
	// 					Properties: &armservicefabricmanagedclusters.VMSSExtensionProperties{
	// 						Type: to.Ptr("GenevaMonitoring"),
	// 						AutoUpgradeMinorVersion: to.Ptr(true),
	// 						Publisher: to.Ptr("Microsoft.Azure.Geneva"),
	// 						Settings: map[string]any{
	// 						},
	// 						TypeHandlerVersion: to.Ptr("2.0"),
	// 					},
	// 				},
	// 			},
	// 			VMImageOffer: to.Ptr("WindowsServer"),
	// 			VMImagePublisher: to.Ptr("MicrosoftWindowsServer"),
	// 			VMImageSKU: to.Ptr("2016-Datacenter-Server-Core"),
	// 			VMImageVersion: to.Ptr("latest"),
	// 			VMInstanceCount: to.Ptr[int32](10),
	// 			VMManagedIdentity: &armservicefabricmanagedclusters.VMManagedIdentity{
	// 				UserAssignedIdentities: []*string{
	// 					to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/resRg/providers/Microsoft.ManagedIdentity/userAssignedIdentities/myIdentity"),
	// 				},
	// 			},
	// 			VMSecrets: []*armservicefabricmanagedclusters.VaultSecretGroup{
	// 				{
	// 					SourceVault: &armservicefabricmanagedclusters.SubResource{
	// 						ID: to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/resRg/providers/Microsoft.KeyVault/vaults/myVault"),
	// 					},
	// 					VaultCertificates: []*armservicefabricmanagedclusters.VaultCertificate{
	// 						{
	// 							CertificateStore: to.Ptr("My"),
	// 							CertificateURL: to.Ptr("https://myVault.vault.azure.net:443/secrets/myCert/ef1a31d39e1f46bca33def54b6cda54c"),
	// 						},
	// 					},
	// 				},
	// 			},
	// 			VMSize: to.Ptr("Standard_D3"),
	// 		},
	// 		SKU: &armservicefabricmanagedclusters.NodeTypeSKU{
	// 			Name: to.Ptr("Standard_S0"),
	// 			Capacity: to.Ptr[int32](10),
	// 			Tier: to.Ptr("Standard"),
	// 		},
	// 		Tags: map[string]*string{
	// 			"a": to.Ptr("b"),
	// 		},
	// 	},
	// }
}

// Generated from example definition: 2025-03-01-preview/NodeTypePatchOperation_example.json
func ExampleNodeTypesClient_BeginUpdate_patchANodeType() {
	cred, err := azidentity.NewDefaultAzureCredential(nil)
	if err != nil {
		log.Fatalf("failed to obtain a credential: %v", err)
	}
	ctx := context.Background()
	clientFactory, err := armservicefabricmanagedclusters.NewClientFactory("00000000-0000-0000-0000-000000000000", cred, nil)
	if err != nil {
		log.Fatalf("failed to create client: %v", err)
	}
	poller, err := clientFactory.NewNodeTypesClient().BeginUpdate(ctx, "resRg", "myCluster", "BE", armservicefabricmanagedclusters.NodeTypeUpdateParameters{
		Tags: map[string]*string{
			"a": to.Ptr("b"),
		},
	}, nil)
	if err != nil {
		log.Fatalf("failed to finish the request: %v", err)
	}
	res, err := poller.PollUntilDone(ctx, nil)
	if err != nil {
		log.Fatalf("failed to pull the result: %v", err)
	}
	// You could use response here. We use blank identifier for just demo purposes.
	_ = res
	// If the HTTP response code is 200 as defined in example definition, your response structure would look as follows. Please pay attention that all the values in the output are fake values for just demo purposes.
	// res = armservicefabricmanagedclusters.NodeTypesClientUpdateResponse{
	// 	NodeType: &armservicefabricmanagedclusters.NodeType{
	// 		Name: to.Ptr("BE"),
	// 		Type: to.Ptr("Microsoft.ServiceFabric/managedClusters/nodeTypes"),
	// 		ID: to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000000/resourcegroups/resRg/providers/Microsoft.ServiceFabric/managedClusters/myCluster/nodeTypes/BE"),
	// 		Properties: &armservicefabricmanagedclusters.NodeTypeProperties{
	// 			Capacities: map[string]*string{
	// 				"ClientConnections": to.Ptr("65536"),
	// 			},
	// 			DataDiskSizeGB: to.Ptr[int32](200),
	// 			DataDiskType: to.Ptr(armservicefabricmanagedclusters.DiskTypeStandardSSDLRS),
	// 			IsPrimary: to.Ptr(false),
	// 			IsStateless: to.Ptr(false),
	// 			PlacementProperties: map[string]*string{
	// 				"HasSSD": to.Ptr("true"),
	// 				"NodeColor": to.Ptr("green"),
	// 				"SomeProperty": to.Ptr("5"),
	// 			},
	// 			ProvisioningState: to.Ptr(armservicefabricmanagedclusters.ManagedResourceProvisioningStateSucceeded),
	// 			VMExtensions: []*armservicefabricmanagedclusters.VMSSExtension{
	// 				{
	// 					Name: to.Ptr("Microsoft.Azure.Geneva.GenevaMonitoring"),
	// 					Properties: &armservicefabricmanagedclusters.VMSSExtensionProperties{
	// 						Type: to.Ptr("GenevaMonitoring"),
	// 						AutoUpgradeMinorVersion: to.Ptr(true),
	// 						Publisher: to.Ptr("Microsoft.Azure.Geneva"),
	// 						Settings: map[string]any{
	// 						},
	// 						TypeHandlerVersion: to.Ptr("2.0"),
	// 					},
	// 				},
	// 			},
	// 			VMImageOffer: to.Ptr("WindowsServer"),
	// 			VMImagePublisher: to.Ptr("MicrosoftWindowsServer"),
	// 			VMImageSKU: to.Ptr("2016-Datacenter-Server-Core"),
	// 			VMImageVersion: to.Ptr("latest"),
	// 			VMInstanceCount: to.Ptr[int32](10),
	// 			VMManagedIdentity: &armservicefabricmanagedclusters.VMManagedIdentity{
	// 				UserAssignedIdentities: []*string{
	// 					to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/resRg/providers/Microsoft.ManagedIdentity/userAssignedIdentities/myIdentity"),
	// 				},
	// 			},
	// 			VMSecrets: []*armservicefabricmanagedclusters.VaultSecretGroup{
	// 				{
	// 					SourceVault: &armservicefabricmanagedclusters.SubResource{
	// 						ID: to.Ptr("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/resRg/providers/Microsoft.KeyVault/vaults/myVault"),
	// 					},
	// 					VaultCertificates: []*armservicefabricmanagedclusters.VaultCertificate{
	// 						{
	// 							CertificateStore: to.Ptr("My"),
	// 							CertificateURL: to.Ptr("https://myVault.vault.azure.net:443/secrets/myCert/ef1a31d39e1f46bca33def54b6cda54c"),
	// 						},
	// 					},
	// 				},
	// 			},
	// 			VMSize: to.Ptr("Standard_D3"),
	// 		},
	// 		Tags: map[string]*string{
	// 			"a": to.Ptr("b"),
	// 		},
	// 	},
	// }
}
