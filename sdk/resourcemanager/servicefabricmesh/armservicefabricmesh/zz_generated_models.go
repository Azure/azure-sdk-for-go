//go:build go1.16
// +build go1.16

// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

package armservicefabricmesh

import (
	"encoding/json"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore"
	"reflect"
	"time"
)

// AddRemoveReplicaScalingMechanism - Describes the horizontal auto scaling mechanism that adds or removes replicas (containers
// or container groups).
type AddRemoveReplicaScalingMechanism struct {
	// REQUIRED; The type of auto scaling mechanism.
	Kind *AutoScalingMechanismKind `json:"kind,omitempty"`

	// REQUIRED; Maximum number of containers (scale up won't be performed above this number).
	MaxCount *int32 `json:"maxCount,omitempty"`

	// REQUIRED; Minimum number of containers (scale down won't be performed below this number).
	MinCount *int32 `json:"minCount,omitempty"`

	// REQUIRED; Each time auto scaling is performed, this number of containers will be added or removed.
	ScaleIncrement *int32 `json:"scaleIncrement,omitempty"`
}

// GetAutoScalingMechanism implements the AutoScalingMechanismClassification interface for type AddRemoveReplicaScalingMechanism.
func (a *AddRemoveReplicaScalingMechanism) GetAutoScalingMechanism() *AutoScalingMechanism {
	return &AutoScalingMechanism{
		Kind: a.Kind,
	}
}

// MarshalJSON implements the json.Marshaller interface for type AddRemoveReplicaScalingMechanism.
func (a AddRemoveReplicaScalingMechanism) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	objectMap["kind"] = AutoScalingMechanismKindAddRemoveReplica
	populate(objectMap, "maxCount", a.MaxCount)
	populate(objectMap, "minCount", a.MinCount)
	populate(objectMap, "scaleIncrement", a.ScaleIncrement)
	return json.Marshal(objectMap)
}

// UnmarshalJSON implements the json.Unmarshaller interface for type AddRemoveReplicaScalingMechanism.
func (a *AddRemoveReplicaScalingMechanism) UnmarshalJSON(data []byte) error {
	var rawMsg map[string]json.RawMessage
	if err := json.Unmarshal(data, &rawMsg); err != nil {
		return err
	}
	for key, val := range rawMsg {
		var err error
		switch key {
		case "kind":
			err = unpopulate(val, &a.Kind)
			delete(rawMsg, key)
		case "maxCount":
			err = unpopulate(val, &a.MaxCount)
			delete(rawMsg, key)
		case "minCount":
			err = unpopulate(val, &a.MinCount)
			delete(rawMsg, key)
		case "scaleIncrement":
			err = unpopulate(val, &a.ScaleIncrement)
			delete(rawMsg, key)
		}
		if err != nil {
			return err
		}
	}
	return nil
}

// ApplicationClientCreateOptions contains the optional parameters for the ApplicationClient.Create method.
type ApplicationClientCreateOptions struct {
	// placeholder for future optional parameters
}

// ApplicationClientDeleteOptions contains the optional parameters for the ApplicationClient.Delete method.
type ApplicationClientDeleteOptions struct {
	// placeholder for future optional parameters
}

// ApplicationClientGetOptions contains the optional parameters for the ApplicationClient.Get method.
type ApplicationClientGetOptions struct {
	// placeholder for future optional parameters
}

// ApplicationClientListByResourceGroupOptions contains the optional parameters for the ApplicationClient.ListByResourceGroup
// method.
type ApplicationClientListByResourceGroupOptions struct {
	// placeholder for future optional parameters
}

// ApplicationClientListBySubscriptionOptions contains the optional parameters for the ApplicationClient.ListBySubscription
// method.
type ApplicationClientListBySubscriptionOptions struct {
	// placeholder for future optional parameters
}

// ApplicationProperties - Describes properties of a application resource.
type ApplicationProperties struct {
	// Internal - used by Visual Studio to setup the debugging session on the local development environment.
	DebugParams *string `json:"debugParams,omitempty"`

	// User readable description of the application.
	Description *string `json:"description,omitempty"`

	// Describes the diagnostics definition and usage for an application resource.
	Diagnostics *DiagnosticsDescription `json:"diagnostics,omitempty"`

	// Describes the services in the application. This property is used to create or modify services of the application. On get
	// only the name of the service is returned. The service description can be
	// obtained by querying for the service resource.
	Services []*ServiceResourceDescription `json:"services,omitempty"`

	// READ-ONLY; Describes the health state of an application resource.
	HealthState *HealthState `json:"healthState,omitempty" azure:"ro"`

	// READ-ONLY; Names of the services in the application.
	ServiceNames []*string `json:"serviceNames,omitempty" azure:"ro"`

	// READ-ONLY; Status of the application.
	Status *ResourceStatus `json:"status,omitempty" azure:"ro"`

	// READ-ONLY; Gives additional information about the current status of the application.
	StatusDetails *string `json:"statusDetails,omitempty" azure:"ro"`

	// READ-ONLY; When the application's health state is not 'Ok', this additional details from service fabric Health Manager
	// for the user to know why the application is marked unhealthy.
	UnhealthyEvaluation *string `json:"unhealthyEvaluation,omitempty" azure:"ro"`
}

// MarshalJSON implements the json.Marshaller interface for type ApplicationProperties.
func (a ApplicationProperties) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "debugParams", a.DebugParams)
	populate(objectMap, "description", a.Description)
	populate(objectMap, "diagnostics", a.Diagnostics)
	populate(objectMap, "healthState", a.HealthState)
	populate(objectMap, "serviceNames", a.ServiceNames)
	populate(objectMap, "services", a.Services)
	populate(objectMap, "status", a.Status)
	populate(objectMap, "statusDetails", a.StatusDetails)
	populate(objectMap, "unhealthyEvaluation", a.UnhealthyEvaluation)
	return json.Marshal(objectMap)
}

// ApplicationResourceDescription - This type describes an application resource.
type ApplicationResourceDescription struct {
	// REQUIRED; The geo-location where the resource lives
	Location *string `json:"location,omitempty"`

	// REQUIRED; This type describes properties of an application resource.
	Properties *ApplicationResourceProperties `json:"properties,omitempty"`

	// Resource tags.
	Tags map[string]*string `json:"tags,omitempty"`

	// READ-ONLY; Fully qualified identifier for the resource. Ex - /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}
	ID *string `json:"id,omitempty" azure:"ro"`

	// READ-ONLY; The name of the resource
	Name *string `json:"name,omitempty" azure:"ro"`

	// READ-ONLY; The type of the resource. Ex- Microsoft.Compute/virtualMachines or Microsoft.Storage/storageAccounts.
	Type *string `json:"type,omitempty" azure:"ro"`
}

// MarshalJSON implements the json.Marshaller interface for type ApplicationResourceDescription.
func (a ApplicationResourceDescription) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "id", a.ID)
	populate(objectMap, "location", a.Location)
	populate(objectMap, "name", a.Name)
	populate(objectMap, "properties", a.Properties)
	populate(objectMap, "tags", a.Tags)
	populate(objectMap, "type", a.Type)
	return json.Marshal(objectMap)
}

// ApplicationResourceDescriptionList - A pageable list of application resources.
type ApplicationResourceDescriptionList struct {
	// URI to fetch the next page of the list.
	NextLink *string `json:"nextLink,omitempty"`

	// One page of the list.
	Value []*ApplicationResourceDescription `json:"value,omitempty"`
}

// MarshalJSON implements the json.Marshaller interface for type ApplicationResourceDescriptionList.
func (a ApplicationResourceDescriptionList) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "nextLink", a.NextLink)
	populate(objectMap, "value", a.Value)
	return json.Marshal(objectMap)
}

// ApplicationResourceProperties - This type describes properties of an application resource.
type ApplicationResourceProperties struct {
	// Internal - used by Visual Studio to setup the debugging session on the local development environment.
	DebugParams *string `json:"debugParams,omitempty"`

	// User readable description of the application.
	Description *string `json:"description,omitempty"`

	// Describes the diagnostics definition and usage for an application resource.
	Diagnostics *DiagnosticsDescription `json:"diagnostics,omitempty"`

	// Describes the services in the application. This property is used to create or modify services of the application. On get
	// only the name of the service is returned. The service description can be
	// obtained by querying for the service resource.
	Services []*ServiceResourceDescription `json:"services,omitempty"`

	// READ-ONLY; Describes the health state of an application resource.
	HealthState *HealthState `json:"healthState,omitempty" azure:"ro"`

	// READ-ONLY; State of the resource.
	ProvisioningState *string `json:"provisioningState,omitempty" azure:"ro"`

	// READ-ONLY; Names of the services in the application.
	ServiceNames []*string `json:"serviceNames,omitempty" azure:"ro"`

	// READ-ONLY; Status of the application.
	Status *ResourceStatus `json:"status,omitempty" azure:"ro"`

	// READ-ONLY; Gives additional information about the current status of the application.
	StatusDetails *string `json:"statusDetails,omitempty" azure:"ro"`

	// READ-ONLY; When the application's health state is not 'Ok', this additional details from service fabric Health Manager
	// for the user to know why the application is marked unhealthy.
	UnhealthyEvaluation *string `json:"unhealthyEvaluation,omitempty" azure:"ro"`
}

// MarshalJSON implements the json.Marshaller interface for type ApplicationResourceProperties.
func (a ApplicationResourceProperties) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "debugParams", a.DebugParams)
	populate(objectMap, "description", a.Description)
	populate(objectMap, "diagnostics", a.Diagnostics)
	populate(objectMap, "healthState", a.HealthState)
	populate(objectMap, "provisioningState", a.ProvisioningState)
	populate(objectMap, "serviceNames", a.ServiceNames)
	populate(objectMap, "services", a.Services)
	populate(objectMap, "status", a.Status)
	populate(objectMap, "statusDetails", a.StatusDetails)
	populate(objectMap, "unhealthyEvaluation", a.UnhealthyEvaluation)
	return json.Marshal(objectMap)
}

// ApplicationScopedVolume - Describes a volume whose lifetime is scoped to the application's lifetime.
type ApplicationScopedVolume struct {
	// REQUIRED; Describes parameters for creating application-scoped volumes.
	CreationParameters ApplicationScopedVolumeCreationParametersClassification `json:"creationParameters,omitempty"`

	// REQUIRED; The path within the container at which the volume should be mounted. Only valid path characters are allowed.
	DestinationPath *string `json:"destinationPath,omitempty"`

	// REQUIRED; Name of the volume being referenced.
	Name *string `json:"name,omitempty"`

	// The flag indicating whether the volume is read only. Default is 'false'.
	ReadOnly *bool `json:"readOnly,omitempty"`
}

// MarshalJSON implements the json.Marshaller interface for type ApplicationScopedVolume.
func (a ApplicationScopedVolume) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "creationParameters", a.CreationParameters)
	populate(objectMap, "destinationPath", a.DestinationPath)
	populate(objectMap, "name", a.Name)
	populate(objectMap, "readOnly", a.ReadOnly)
	return json.Marshal(objectMap)
}

// UnmarshalJSON implements the json.Unmarshaller interface for type ApplicationScopedVolume.
func (a *ApplicationScopedVolume) UnmarshalJSON(data []byte) error {
	var rawMsg map[string]json.RawMessage
	if err := json.Unmarshal(data, &rawMsg); err != nil {
		return err
	}
	for key, val := range rawMsg {
		var err error
		switch key {
		case "creationParameters":
			a.CreationParameters, err = unmarshalApplicationScopedVolumeCreationParametersClassification(val)
			delete(rawMsg, key)
		case "destinationPath":
			err = unpopulate(val, &a.DestinationPath)
			delete(rawMsg, key)
		case "name":
			err = unpopulate(val, &a.Name)
			delete(rawMsg, key)
		case "readOnly":
			err = unpopulate(val, &a.ReadOnly)
			delete(rawMsg, key)
		}
		if err != nil {
			return err
		}
	}
	return nil
}

// ApplicationScopedVolumeCreationParametersClassification provides polymorphic access to related types.
// Call the interface's GetApplicationScopedVolumeCreationParameters() method to access the common type.
// Use a type switch to determine the concrete type.  The possible types are:
// - *ApplicationScopedVolumeCreationParameters, *ApplicationScopedVolumeCreationParametersServiceFabricVolumeDisk
type ApplicationScopedVolumeCreationParametersClassification interface {
	// GetApplicationScopedVolumeCreationParameters returns the ApplicationScopedVolumeCreationParameters content of the underlying type.
	GetApplicationScopedVolumeCreationParameters() *ApplicationScopedVolumeCreationParameters
}

// ApplicationScopedVolumeCreationParameters - Describes parameters for creating application-scoped volumes.
type ApplicationScopedVolumeCreationParameters struct {
	// REQUIRED; Specifies the application-scoped volume kind.
	Kind *ApplicationScopedVolumeKind `json:"kind,omitempty"`

	// User readable description of the volume.
	Description *string `json:"description,omitempty"`
}

// GetApplicationScopedVolumeCreationParameters implements the ApplicationScopedVolumeCreationParametersClassification interface
// for type ApplicationScopedVolumeCreationParameters.
func (a *ApplicationScopedVolumeCreationParameters) GetApplicationScopedVolumeCreationParameters() *ApplicationScopedVolumeCreationParameters {
	return a
}

// ApplicationScopedVolumeCreationParametersServiceFabricVolumeDisk - Describes parameters for creating application-scoped
// volumes provided by Service Fabric Volume Disks
type ApplicationScopedVolumeCreationParametersServiceFabricVolumeDisk struct {
	// REQUIRED; Specifies the application-scoped volume kind.
	Kind *ApplicationScopedVolumeKind `json:"kind,omitempty"`

	// REQUIRED; Volume size
	SizeDisk *SizeTypes `json:"sizeDisk,omitempty"`

	// User readable description of the volume.
	Description *string `json:"description,omitempty"`
}

// GetApplicationScopedVolumeCreationParameters implements the ApplicationScopedVolumeCreationParametersClassification interface
// for type ApplicationScopedVolumeCreationParametersServiceFabricVolumeDisk.
func (a *ApplicationScopedVolumeCreationParametersServiceFabricVolumeDisk) GetApplicationScopedVolumeCreationParameters() *ApplicationScopedVolumeCreationParameters {
	return &ApplicationScopedVolumeCreationParameters{
		Kind:        a.Kind,
		Description: a.Description,
	}
}

// MarshalJSON implements the json.Marshaller interface for type ApplicationScopedVolumeCreationParametersServiceFabricVolumeDisk.
func (a ApplicationScopedVolumeCreationParametersServiceFabricVolumeDisk) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "description", a.Description)
	objectMap["kind"] = ApplicationScopedVolumeKindServiceFabricVolumeDisk
	populate(objectMap, "sizeDisk", a.SizeDisk)
	return json.Marshal(objectMap)
}

// UnmarshalJSON implements the json.Unmarshaller interface for type ApplicationScopedVolumeCreationParametersServiceFabricVolumeDisk.
func (a *ApplicationScopedVolumeCreationParametersServiceFabricVolumeDisk) UnmarshalJSON(data []byte) error {
	var rawMsg map[string]json.RawMessage
	if err := json.Unmarshal(data, &rawMsg); err != nil {
		return err
	}
	for key, val := range rawMsg {
		var err error
		switch key {
		case "description":
			err = unpopulate(val, &a.Description)
			delete(rawMsg, key)
		case "kind":
			err = unpopulate(val, &a.Kind)
			delete(rawMsg, key)
		case "sizeDisk":
			err = unpopulate(val, &a.SizeDisk)
			delete(rawMsg, key)
		}
		if err != nil {
			return err
		}
	}
	return nil
}

// AutoScalingMechanismClassification provides polymorphic access to related types.
// Call the interface's GetAutoScalingMechanism() method to access the common type.
// Use a type switch to determine the concrete type.  The possible types are:
// - *AddRemoveReplicaScalingMechanism, *AutoScalingMechanism
type AutoScalingMechanismClassification interface {
	// GetAutoScalingMechanism returns the AutoScalingMechanism content of the underlying type.
	GetAutoScalingMechanism() *AutoScalingMechanism
}

// AutoScalingMechanism - Describes the mechanism for performing auto scaling operation. Derived classes will describe the
// actual mechanism.
type AutoScalingMechanism struct {
	// REQUIRED; The type of auto scaling mechanism.
	Kind *AutoScalingMechanismKind `json:"kind,omitempty"`
}

// GetAutoScalingMechanism implements the AutoScalingMechanismClassification interface for type AutoScalingMechanism.
func (a *AutoScalingMechanism) GetAutoScalingMechanism() *AutoScalingMechanism { return a }

// AutoScalingMetricClassification provides polymorphic access to related types.
// Call the interface's GetAutoScalingMetric() method to access the common type.
// Use a type switch to determine the concrete type.  The possible types are:
// - *AutoScalingMetric, *AutoScalingResourceMetric
type AutoScalingMetricClassification interface {
	// GetAutoScalingMetric returns the AutoScalingMetric content of the underlying type.
	GetAutoScalingMetric() *AutoScalingMetric
}

// AutoScalingMetric - Describes the metric that is used for triggering auto scaling operation. Derived classes will describe
// resources or metrics.
type AutoScalingMetric struct {
	// REQUIRED; The type of auto scaling metric
	Kind *AutoScalingMetricKind `json:"kind,omitempty"`
}

// GetAutoScalingMetric implements the AutoScalingMetricClassification interface for type AutoScalingMetric.
func (a *AutoScalingMetric) GetAutoScalingMetric() *AutoScalingMetric { return a }

// AutoScalingPolicy - Describes the auto scaling policy
type AutoScalingPolicy struct {
	// REQUIRED; The mechanism that is used to scale when auto scaling operation is invoked.
	Mechanism AutoScalingMechanismClassification `json:"mechanism,omitempty"`

	// REQUIRED; The name of the auto scaling policy.
	Name *string `json:"name,omitempty"`

	// REQUIRED; Determines when auto scaling operation will be invoked.
	Trigger AutoScalingTriggerClassification `json:"trigger,omitempty"`
}

// MarshalJSON implements the json.Marshaller interface for type AutoScalingPolicy.
func (a AutoScalingPolicy) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "mechanism", a.Mechanism)
	populate(objectMap, "name", a.Name)
	populate(objectMap, "trigger", a.Trigger)
	return json.Marshal(objectMap)
}

// UnmarshalJSON implements the json.Unmarshaller interface for type AutoScalingPolicy.
func (a *AutoScalingPolicy) UnmarshalJSON(data []byte) error {
	var rawMsg map[string]json.RawMessage
	if err := json.Unmarshal(data, &rawMsg); err != nil {
		return err
	}
	for key, val := range rawMsg {
		var err error
		switch key {
		case "mechanism":
			a.Mechanism, err = unmarshalAutoScalingMechanismClassification(val)
			delete(rawMsg, key)
		case "name":
			err = unpopulate(val, &a.Name)
			delete(rawMsg, key)
		case "trigger":
			a.Trigger, err = unmarshalAutoScalingTriggerClassification(val)
			delete(rawMsg, key)
		}
		if err != nil {
			return err
		}
	}
	return nil
}

// AutoScalingResourceMetric - Describes the resource that is used for triggering auto scaling.
type AutoScalingResourceMetric struct {
	// REQUIRED; The type of auto scaling metric
	Kind *AutoScalingMetricKind `json:"kind,omitempty"`

	// REQUIRED; Name of the resource.
	Name *AutoScalingResourceMetricName `json:"name,omitempty"`
}

// GetAutoScalingMetric implements the AutoScalingMetricClassification interface for type AutoScalingResourceMetric.
func (a *AutoScalingResourceMetric) GetAutoScalingMetric() *AutoScalingMetric {
	return &AutoScalingMetric{
		Kind: a.Kind,
	}
}

// MarshalJSON implements the json.Marshaller interface for type AutoScalingResourceMetric.
func (a AutoScalingResourceMetric) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	objectMap["kind"] = AutoScalingMetricKindResource
	populate(objectMap, "name", a.Name)
	return json.Marshal(objectMap)
}

// UnmarshalJSON implements the json.Unmarshaller interface for type AutoScalingResourceMetric.
func (a *AutoScalingResourceMetric) UnmarshalJSON(data []byte) error {
	var rawMsg map[string]json.RawMessage
	if err := json.Unmarshal(data, &rawMsg); err != nil {
		return err
	}
	for key, val := range rawMsg {
		var err error
		switch key {
		case "kind":
			err = unpopulate(val, &a.Kind)
			delete(rawMsg, key)
		case "name":
			err = unpopulate(val, &a.Name)
			delete(rawMsg, key)
		}
		if err != nil {
			return err
		}
	}
	return nil
}

// AutoScalingTriggerClassification provides polymorphic access to related types.
// Call the interface's GetAutoScalingTrigger() method to access the common type.
// Use a type switch to determine the concrete type.  The possible types are:
// - *AutoScalingTrigger, *AverageLoadScalingTrigger
type AutoScalingTriggerClassification interface {
	// GetAutoScalingTrigger returns the AutoScalingTrigger content of the underlying type.
	GetAutoScalingTrigger() *AutoScalingTrigger
}

// AutoScalingTrigger - Describes the trigger for performing auto scaling operation.
type AutoScalingTrigger struct {
	// REQUIRED; The type of auto scaling trigger
	Kind *AutoScalingTriggerKind `json:"kind,omitempty"`
}

// GetAutoScalingTrigger implements the AutoScalingTriggerClassification interface for type AutoScalingTrigger.
func (a *AutoScalingTrigger) GetAutoScalingTrigger() *AutoScalingTrigger { return a }

// AvailableOperationDisplay - An operation available at the listed Azure resource provider.
type AvailableOperationDisplay struct {
	// Description of the available operation.
	Description *string `json:"description,omitempty"`

	// Name of the available operation.
	Operation *string `json:"operation,omitempty"`

	// Name of the operation provider.
	Provider *string `json:"provider,omitempty"`

	// Name of the resource on which the operation is available.
	Resource *string `json:"resource,omitempty"`
}

// AverageLoadScalingTrigger - Describes the average load trigger used for auto scaling.
type AverageLoadScalingTrigger struct {
	// REQUIRED; The type of auto scaling trigger
	Kind *AutoScalingTriggerKind `json:"kind,omitempty"`

	// REQUIRED; Lower load threshold (if average load is below this threshold, service will scale down).
	LowerLoadThreshold *float64 `json:"lowerLoadThreshold,omitempty"`

	// REQUIRED; Description of the metric that is used for scaling.
	Metric AutoScalingMetricClassification `json:"metric,omitempty"`

	// REQUIRED; Scale interval that indicates how often will this trigger be checked.
	ScaleIntervalInSeconds *int32 `json:"scaleIntervalInSeconds,omitempty"`

	// REQUIRED; Upper load threshold (if average load is above this threshold, service will scale up).
	UpperLoadThreshold *float64 `json:"upperLoadThreshold,omitempty"`
}

// GetAutoScalingTrigger implements the AutoScalingTriggerClassification interface for type AverageLoadScalingTrigger.
func (a *AverageLoadScalingTrigger) GetAutoScalingTrigger() *AutoScalingTrigger {
	return &AutoScalingTrigger{
		Kind: a.Kind,
	}
}

// MarshalJSON implements the json.Marshaller interface for type AverageLoadScalingTrigger.
func (a AverageLoadScalingTrigger) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	objectMap["kind"] = AutoScalingTriggerKindAverageLoad
	populate(objectMap, "lowerLoadThreshold", a.LowerLoadThreshold)
	populate(objectMap, "metric", a.Metric)
	populate(objectMap, "scaleIntervalInSeconds", a.ScaleIntervalInSeconds)
	populate(objectMap, "upperLoadThreshold", a.UpperLoadThreshold)
	return json.Marshal(objectMap)
}

// UnmarshalJSON implements the json.Unmarshaller interface for type AverageLoadScalingTrigger.
func (a *AverageLoadScalingTrigger) UnmarshalJSON(data []byte) error {
	var rawMsg map[string]json.RawMessage
	if err := json.Unmarshal(data, &rawMsg); err != nil {
		return err
	}
	for key, val := range rawMsg {
		var err error
		switch key {
		case "kind":
			err = unpopulate(val, &a.Kind)
			delete(rawMsg, key)
		case "lowerLoadThreshold":
			err = unpopulate(val, &a.LowerLoadThreshold)
			delete(rawMsg, key)
		case "metric":
			a.Metric, err = unmarshalAutoScalingMetricClassification(val)
			delete(rawMsg, key)
		case "scaleIntervalInSeconds":
			err = unpopulate(val, &a.ScaleIntervalInSeconds)
			delete(rawMsg, key)
		case "upperLoadThreshold":
			err = unpopulate(val, &a.UpperLoadThreshold)
			delete(rawMsg, key)
		}
		if err != nil {
			return err
		}
	}
	return nil
}

// AzureInternalMonitoringPipelineSinkDescription - Diagnostics settings for Geneva.
type AzureInternalMonitoringPipelineSinkDescription struct {
	// REQUIRED; The kind of DiagnosticsSink.
	Kind *DiagnosticsSinkKind `json:"kind,omitempty"`

	// Azure Internal monitoring pipeline account.
	AccountName *string `json:"accountName,omitempty"`

	// Azure Internal monitoring pipeline autokey associated with the certificate.
	AutoKeyConfigURL *string `json:"autoKeyConfigUrl,omitempty"`

	// A description of the sink.
	Description *string `json:"description,omitempty"`

	// Azure Internal monitoring agent fluentd configuration.
	FluentdConfigURL interface{} `json:"fluentdConfigUrl,omitempty"`

	// Azure Internal monitoring agent configuration.
	MaConfigURL *string `json:"maConfigUrl,omitempty"`

	// Name of the sink. This value is referenced by DiagnosticsReferenceDescription
	Name *string `json:"name,omitempty"`

	// Azure Internal monitoring pipeline account namespace.
	Namespace *string `json:"namespace,omitempty"`
}

// GetDiagnosticsSinkProperties implements the DiagnosticsSinkPropertiesClassification interface for type AzureInternalMonitoringPipelineSinkDescription.
func (a *AzureInternalMonitoringPipelineSinkDescription) GetDiagnosticsSinkProperties() *DiagnosticsSinkProperties {
	return &DiagnosticsSinkProperties{
		Kind:        a.Kind,
		Name:        a.Name,
		Description: a.Description,
	}
}

// MarshalJSON implements the json.Marshaller interface for type AzureInternalMonitoringPipelineSinkDescription.
func (a AzureInternalMonitoringPipelineSinkDescription) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "accountName", a.AccountName)
	populate(objectMap, "autoKeyConfigUrl", a.AutoKeyConfigURL)
	populate(objectMap, "description", a.Description)
	populate(objectMap, "fluentdConfigUrl", &a.FluentdConfigURL)
	objectMap["kind"] = DiagnosticsSinkKindAzureInternalMonitoringPipeline
	populate(objectMap, "maConfigUrl", a.MaConfigURL)
	populate(objectMap, "name", a.Name)
	populate(objectMap, "namespace", a.Namespace)
	return json.Marshal(objectMap)
}

// UnmarshalJSON implements the json.Unmarshaller interface for type AzureInternalMonitoringPipelineSinkDescription.
func (a *AzureInternalMonitoringPipelineSinkDescription) UnmarshalJSON(data []byte) error {
	var rawMsg map[string]json.RawMessage
	if err := json.Unmarshal(data, &rawMsg); err != nil {
		return err
	}
	for key, val := range rawMsg {
		var err error
		switch key {
		case "accountName":
			err = unpopulate(val, &a.AccountName)
			delete(rawMsg, key)
		case "autoKeyConfigUrl":
			err = unpopulate(val, &a.AutoKeyConfigURL)
			delete(rawMsg, key)
		case "description":
			err = unpopulate(val, &a.Description)
			delete(rawMsg, key)
		case "fluentdConfigUrl":
			err = unpopulate(val, &a.FluentdConfigURL)
			delete(rawMsg, key)
		case "kind":
			err = unpopulate(val, &a.Kind)
			delete(rawMsg, key)
		case "maConfigUrl":
			err = unpopulate(val, &a.MaConfigURL)
			delete(rawMsg, key)
		case "name":
			err = unpopulate(val, &a.Name)
			delete(rawMsg, key)
		case "namespace":
			err = unpopulate(val, &a.Namespace)
			delete(rawMsg, key)
		}
		if err != nil {
			return err
		}
	}
	return nil
}

// CodePackageClientGetContainerLogsOptions contains the optional parameters for the CodePackageClient.GetContainerLogs method.
type CodePackageClientGetContainerLogsOptions struct {
	// Number of lines to show from the end of the logs. Default is 100.
	Tail *int32
}

// ContainerCodePackageProperties - Describes a container and its runtime properties.
type ContainerCodePackageProperties struct {
	// REQUIRED; The Container image to use.
	Image *string `json:"image,omitempty"`

	// REQUIRED; The name of the code package.
	Name *string `json:"name,omitempty"`

	// REQUIRED; The resources required by this container.
	Resources *ResourceRequirements `json:"resources,omitempty"`

	// Command array to execute within the container in exec form.
	Commands []*string `json:"commands,omitempty"`

	// Reference to sinks in DiagnosticsDescription.
	Diagnostics *DiagnosticsRef `json:"diagnostics,omitempty"`

	// The endpoints exposed by this container.
	Endpoints []*EndpointProperties `json:"endpoints,omitempty"`

	// Override for the default entry point in the container.
	Entrypoint *string `json:"entrypoint,omitempty"`

	// The environment variables to set in this container
	EnvironmentVariables []*EnvironmentVariable `json:"environmentVariables,omitempty"`

	// Image registry credential.
	ImageRegistryCredential *ImageRegistryCredential `json:"imageRegistryCredential,omitempty"`

	// The labels to set in this container.
	Labels []*ContainerLabel `json:"labels,omitempty"`

	// A list of ReliableCollection resources used by this particular code package. Please refer to ReliableCollectionsRef for
	// more details.
	ReliableCollectionsRefs []*ReliableCollectionsRef `json:"reliableCollectionsRefs,omitempty"`

	// The settings to set in this container. The setting file path can be fetched from environment variable "Fabric_SettingPath".
	// The path for Windows container is "C:\secrets". The path for Linux container
	// is "/var/secrets".
	Settings []*Setting `json:"settings,omitempty"`

	// Volumes to be attached to the container. The lifetime of these volumes is independent of the application's lifetime.
	VolumeRefs []*VolumeReference `json:"volumeRefs,omitempty"`

	// Volumes to be attached to the container. The lifetime of these volumes is scoped to the application's lifetime.
	Volumes []*ApplicationScopedVolume `json:"volumes,omitempty"`

	// READ-ONLY; Runtime information of a container instance.
	InstanceView *ContainerInstanceView `json:"instanceView,omitempty" azure:"ro"`
}

// MarshalJSON implements the json.Marshaller interface for type ContainerCodePackageProperties.
func (c ContainerCodePackageProperties) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "commands", c.Commands)
	populate(objectMap, "diagnostics", c.Diagnostics)
	populate(objectMap, "endpoints", c.Endpoints)
	populate(objectMap, "entrypoint", c.Entrypoint)
	populate(objectMap, "environmentVariables", c.EnvironmentVariables)
	populate(objectMap, "image", c.Image)
	populate(objectMap, "imageRegistryCredential", c.ImageRegistryCredential)
	populate(objectMap, "instanceView", c.InstanceView)
	populate(objectMap, "labels", c.Labels)
	populate(objectMap, "name", c.Name)
	populate(objectMap, "reliableCollectionsRefs", c.ReliableCollectionsRefs)
	populate(objectMap, "resources", c.Resources)
	populate(objectMap, "settings", c.Settings)
	populate(objectMap, "volumeRefs", c.VolumeRefs)
	populate(objectMap, "volumes", c.Volumes)
	return json.Marshal(objectMap)
}

// ContainerEvent - A container event.
type ContainerEvent struct {
	// The count of the event.
	Count *int32 `json:"count,omitempty"`

	// Date/time of the first event.
	FirstTimestamp *string `json:"firstTimestamp,omitempty"`

	// Date/time of the last event.
	LastTimestamp *string `json:"lastTimestamp,omitempty"`

	// The event message
	Message *string `json:"message,omitempty"`

	// The name of the container event.
	Name *string `json:"name,omitempty"`

	// The event type.
	Type *string `json:"type,omitempty"`
}

// ContainerInstanceView - Runtime information of a container instance.
type ContainerInstanceView struct {
	// Current container instance state.
	CurrentState *ContainerState `json:"currentState,omitempty"`

	// The events of this container instance.
	Events []*ContainerEvent `json:"events,omitempty"`

	// Previous container instance state.
	PreviousState *ContainerState `json:"previousState,omitempty"`

	// The number of times the container has been restarted.
	RestartCount *int32 `json:"restartCount,omitempty"`
}

// MarshalJSON implements the json.Marshaller interface for type ContainerInstanceView.
func (c ContainerInstanceView) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "currentState", c.CurrentState)
	populate(objectMap, "events", c.Events)
	populate(objectMap, "previousState", c.PreviousState)
	populate(objectMap, "restartCount", c.RestartCount)
	return json.Marshal(objectMap)
}

// ContainerLabel - Describes a container label.
type ContainerLabel struct {
	// REQUIRED; The name of the container label.
	Name *string `json:"name,omitempty"`

	// REQUIRED; The value of the container label.
	Value *string `json:"value,omitempty"`
}

// ContainerLogs - Container logs.
type ContainerLogs struct {
	// Container logs.
	Content *string `json:"content,omitempty"`
}

// ContainerState - The container state.
type ContainerState struct {
	// Human-readable status of this state.
	DetailStatus *string `json:"detailStatus,omitempty"`

	// The container exit code.
	ExitCode *string `json:"exitCode,omitempty"`

	// Date/time when the container state finished.
	FinishTime *time.Time `json:"finishTime,omitempty"`

	// Date/time when the container state started.
	StartTime *time.Time `json:"startTime,omitempty"`

	// The state of this container
	State *string `json:"state,omitempty"`
}

// MarshalJSON implements the json.Marshaller interface for type ContainerState.
func (c ContainerState) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "detailStatus", c.DetailStatus)
	populate(objectMap, "exitCode", c.ExitCode)
	populateTimeRFC3339(objectMap, "finishTime", c.FinishTime)
	populateTimeRFC3339(objectMap, "startTime", c.StartTime)
	populate(objectMap, "state", c.State)
	return json.Marshal(objectMap)
}

// UnmarshalJSON implements the json.Unmarshaller interface for type ContainerState.
func (c *ContainerState) UnmarshalJSON(data []byte) error {
	var rawMsg map[string]json.RawMessage
	if err := json.Unmarshal(data, &rawMsg); err != nil {
		return err
	}
	for key, val := range rawMsg {
		var err error
		switch key {
		case "detailStatus":
			err = unpopulate(val, &c.DetailStatus)
			delete(rawMsg, key)
		case "exitCode":
			err = unpopulate(val, &c.ExitCode)
			delete(rawMsg, key)
		case "finishTime":
			err = unpopulateTimeRFC3339(val, &c.FinishTime)
			delete(rawMsg, key)
		case "startTime":
			err = unpopulateTimeRFC3339(val, &c.StartTime)
			delete(rawMsg, key)
		case "state":
			err = unpopulate(val, &c.State)
			delete(rawMsg, key)
		}
		if err != nil {
			return err
		}
	}
	return nil
}

// DiagnosticsDescription - Describes the diagnostics options available
type DiagnosticsDescription struct {
	// The sinks to be used if diagnostics is enabled. Sink choices can be overridden at the service and code package level.
	DefaultSinkRefs []*string `json:"defaultSinkRefs,omitempty"`

	// Status of whether or not sinks are enabled.
	Enabled *bool `json:"enabled,omitempty"`

	// List of supported sinks that can be referenced.
	Sinks []DiagnosticsSinkPropertiesClassification `json:"sinks,omitempty"`
}

// MarshalJSON implements the json.Marshaller interface for type DiagnosticsDescription.
func (d DiagnosticsDescription) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "defaultSinkRefs", d.DefaultSinkRefs)
	populate(objectMap, "enabled", d.Enabled)
	populate(objectMap, "sinks", d.Sinks)
	return json.Marshal(objectMap)
}

// UnmarshalJSON implements the json.Unmarshaller interface for type DiagnosticsDescription.
func (d *DiagnosticsDescription) UnmarshalJSON(data []byte) error {
	var rawMsg map[string]json.RawMessage
	if err := json.Unmarshal(data, &rawMsg); err != nil {
		return err
	}
	for key, val := range rawMsg {
		var err error
		switch key {
		case "defaultSinkRefs":
			err = unpopulate(val, &d.DefaultSinkRefs)
			delete(rawMsg, key)
		case "enabled":
			err = unpopulate(val, &d.Enabled)
			delete(rawMsg, key)
		case "sinks":
			d.Sinks, err = unmarshalDiagnosticsSinkPropertiesClassificationArray(val)
			delete(rawMsg, key)
		}
		if err != nil {
			return err
		}
	}
	return nil
}

// DiagnosticsRef - Reference to sinks in DiagnosticsDescription.
type DiagnosticsRef struct {
	// Status of whether or not sinks are enabled.
	Enabled *bool `json:"enabled,omitempty"`

	// List of sinks to be used if enabled. References the list of sinks in DiagnosticsDescription.
	SinkRefs []*string `json:"sinkRefs,omitempty"`
}

// MarshalJSON implements the json.Marshaller interface for type DiagnosticsRef.
func (d DiagnosticsRef) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "enabled", d.Enabled)
	populate(objectMap, "sinkRefs", d.SinkRefs)
	return json.Marshal(objectMap)
}

// DiagnosticsSinkPropertiesClassification provides polymorphic access to related types.
// Call the interface's GetDiagnosticsSinkProperties() method to access the common type.
// Use a type switch to determine the concrete type.  The possible types are:
// - *AzureInternalMonitoringPipelineSinkDescription, *DiagnosticsSinkProperties
type DiagnosticsSinkPropertiesClassification interface {
	// GetDiagnosticsSinkProperties returns the DiagnosticsSinkProperties content of the underlying type.
	GetDiagnosticsSinkProperties() *DiagnosticsSinkProperties
}

// DiagnosticsSinkProperties - Properties of a DiagnosticsSink.
type DiagnosticsSinkProperties struct {
	// REQUIRED; The kind of DiagnosticsSink.
	Kind *DiagnosticsSinkKind `json:"kind,omitempty"`

	// A description of the sink.
	Description *string `json:"description,omitempty"`

	// Name of the sink. This value is referenced by DiagnosticsReferenceDescription
	Name *string `json:"name,omitempty"`
}

// GetDiagnosticsSinkProperties implements the DiagnosticsSinkPropertiesClassification interface for type DiagnosticsSinkProperties.
func (d *DiagnosticsSinkProperties) GetDiagnosticsSinkProperties() *DiagnosticsSinkProperties {
	return d
}

// EndpointProperties - Describes a container endpoint.
type EndpointProperties struct {
	// REQUIRED; The name of the endpoint.
	Name *string `json:"name,omitempty"`

	// Port used by the container.
	Port *int32 `json:"port,omitempty"`
}

// EndpointRef - Describes a reference to a service endpoint.
type EndpointRef struct {
	// Name of the endpoint.
	Name *string `json:"name,omitempty"`
}

// EnvironmentVariable - Describes an environment variable for the container.
type EnvironmentVariable struct {
	// The name of the environment variable.
	Name *string `json:"name,omitempty"`

	// The value of the environment variable.
	Value *string `json:"value,omitempty"`
}

// ErrorDetailsModel - Error model details information
type ErrorDetailsModel struct {
	// REQUIRED
	Code *string `json:"code,omitempty"`

	// REQUIRED; Error message.
	Message *string `json:"message,omitempty"`
}

// ErrorErrorModel - Error model information
type ErrorErrorModel struct {
	// REQUIRED
	Code *string `json:"code,omitempty"`

	// List of error message details.
	Details    []*ErrorDetailsModel `json:"details,omitempty"`
	InnerError *string              `json:"innerError,omitempty"`

	// Error message.
	Message *string `json:"message,omitempty"`
}

// MarshalJSON implements the json.Marshaller interface for type ErrorErrorModel.
func (e ErrorErrorModel) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "code", e.Code)
	populate(objectMap, "details", e.Details)
	populate(objectMap, "innerError", e.InnerError)
	populate(objectMap, "message", e.Message)
	return json.Marshal(objectMap)
}

// ErrorModel - The error details.
type ErrorModel struct {
	// REQUIRED; Error model information
	Error *ErrorErrorModel `json:"error,omitempty"`
}

// GatewayClientCreateOptions contains the optional parameters for the GatewayClient.Create method.
type GatewayClientCreateOptions struct {
	// placeholder for future optional parameters
}

// GatewayClientDeleteOptions contains the optional parameters for the GatewayClient.Delete method.
type GatewayClientDeleteOptions struct {
	// placeholder for future optional parameters
}

// GatewayClientGetOptions contains the optional parameters for the GatewayClient.Get method.
type GatewayClientGetOptions struct {
	// placeholder for future optional parameters
}

// GatewayClientListByResourceGroupOptions contains the optional parameters for the GatewayClient.ListByResourceGroup method.
type GatewayClientListByResourceGroupOptions struct {
	// placeholder for future optional parameters
}

// GatewayClientListBySubscriptionOptions contains the optional parameters for the GatewayClient.ListBySubscription method.
type GatewayClientListBySubscriptionOptions struct {
	// placeholder for future optional parameters
}

// GatewayDestination - Describes destination endpoint for routing traffic.
type GatewayDestination struct {
	// REQUIRED; Name of the service fabric Mesh application.
	ApplicationName *string `json:"applicationName,omitempty"`

	// REQUIRED; name of the endpoint in the service.
	EndpointName *string `json:"endpointName,omitempty"`

	// REQUIRED; service that contains the endpoint.
	ServiceName *string `json:"serviceName,omitempty"`
}

// GatewayProperties - Describes properties of a gateway resource.
type GatewayProperties struct {
	// REQUIRED; Network that the Application is using.
	DestinationNetwork *NetworkRef `json:"destinationNetwork,omitempty"`

	// REQUIRED; Network the gateway should listen on for requests.
	SourceNetwork *NetworkRef `json:"sourceNetwork,omitempty"`

	// User readable description of the gateway.
	Description *string `json:"description,omitempty"`

	// Configuration for http connectivity for this gateway.
	HTTP []*HTTPConfig `json:"http,omitempty"`

	// Configuration for tcp connectivity for this gateway.
	TCP []*TCPConfig `json:"tcp,omitempty"`

	// READ-ONLY; IP address of the gateway. This is populated in the response and is ignored for incoming requests.
	IPAddress *string `json:"ipAddress,omitempty" azure:"ro"`

	// READ-ONLY; Status of the resource.
	Status *ResourceStatus `json:"status,omitempty" azure:"ro"`

	// READ-ONLY; Gives additional information about the current status of the gateway.
	StatusDetails *string `json:"statusDetails,omitempty" azure:"ro"`
}

// MarshalJSON implements the json.Marshaller interface for type GatewayProperties.
func (g GatewayProperties) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "description", g.Description)
	populate(objectMap, "destinationNetwork", g.DestinationNetwork)
	populate(objectMap, "http", g.HTTP)
	populate(objectMap, "ipAddress", g.IPAddress)
	populate(objectMap, "sourceNetwork", g.SourceNetwork)
	populate(objectMap, "status", g.Status)
	populate(objectMap, "statusDetails", g.StatusDetails)
	populate(objectMap, "tcp", g.TCP)
	return json.Marshal(objectMap)
}

// GatewayResourceDescription - This type describes a gateway resource.
type GatewayResourceDescription struct {
	// REQUIRED; The geo-location where the resource lives
	Location *string `json:"location,omitempty"`

	// REQUIRED; This type describes properties of a gateway resource.
	Properties *GatewayResourceProperties `json:"properties,omitempty"`

	// Resource tags.
	Tags map[string]*string `json:"tags,omitempty"`

	// READ-ONLY; Fully qualified identifier for the resource. Ex - /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}
	ID *string `json:"id,omitempty" azure:"ro"`

	// READ-ONLY; The name of the resource
	Name *string `json:"name,omitempty" azure:"ro"`

	// READ-ONLY; The type of the resource. Ex- Microsoft.Compute/virtualMachines or Microsoft.Storage/storageAccounts.
	Type *string `json:"type,omitempty" azure:"ro"`
}

// MarshalJSON implements the json.Marshaller interface for type GatewayResourceDescription.
func (g GatewayResourceDescription) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "id", g.ID)
	populate(objectMap, "location", g.Location)
	populate(objectMap, "name", g.Name)
	populate(objectMap, "properties", g.Properties)
	populate(objectMap, "tags", g.Tags)
	populate(objectMap, "type", g.Type)
	return json.Marshal(objectMap)
}

// GatewayResourceDescriptionList - A pageable list of gateway resources.
type GatewayResourceDescriptionList struct {
	// URI to fetch the next page of the list.
	NextLink *string `json:"nextLink,omitempty"`

	// One page of the list.
	Value []*GatewayResourceDescription `json:"value,omitempty"`
}

// MarshalJSON implements the json.Marshaller interface for type GatewayResourceDescriptionList.
func (g GatewayResourceDescriptionList) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "nextLink", g.NextLink)
	populate(objectMap, "value", g.Value)
	return json.Marshal(objectMap)
}

// GatewayResourceProperties - This type describes properties of a gateway resource.
type GatewayResourceProperties struct {
	// REQUIRED; Network that the Application is using.
	DestinationNetwork *NetworkRef `json:"destinationNetwork,omitempty"`

	// REQUIRED; Network the gateway should listen on for requests.
	SourceNetwork *NetworkRef `json:"sourceNetwork,omitempty"`

	// User readable description of the gateway.
	Description *string `json:"description,omitempty"`

	// Configuration for http connectivity for this gateway.
	HTTP []*HTTPConfig `json:"http,omitempty"`

	// Configuration for tcp connectivity for this gateway.
	TCP []*TCPConfig `json:"tcp,omitempty"`

	// READ-ONLY; IP address of the gateway. This is populated in the response and is ignored for incoming requests.
	IPAddress *string `json:"ipAddress,omitempty" azure:"ro"`

	// READ-ONLY; State of the resource.
	ProvisioningState *string `json:"provisioningState,omitempty" azure:"ro"`

	// READ-ONLY; Status of the resource.
	Status *ResourceStatus `json:"status,omitempty" azure:"ro"`

	// READ-ONLY; Gives additional information about the current status of the gateway.
	StatusDetails *string `json:"statusDetails,omitempty" azure:"ro"`
}

// MarshalJSON implements the json.Marshaller interface for type GatewayResourceProperties.
func (g GatewayResourceProperties) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "description", g.Description)
	populate(objectMap, "destinationNetwork", g.DestinationNetwork)
	populate(objectMap, "http", g.HTTP)
	populate(objectMap, "ipAddress", g.IPAddress)
	populate(objectMap, "provisioningState", g.ProvisioningState)
	populate(objectMap, "sourceNetwork", g.SourceNetwork)
	populate(objectMap, "status", g.Status)
	populate(objectMap, "statusDetails", g.StatusDetails)
	populate(objectMap, "tcp", g.TCP)
	return json.Marshal(objectMap)
}

// HTTPConfig - Describes the http configuration for external connectivity for this network.
type HTTPConfig struct {
	// REQUIRED; description for routing.
	Hosts []*HTTPHostConfig `json:"hosts,omitempty"`

	// REQUIRED; http gateway config name.
	Name *string `json:"name,omitempty"`

	// REQUIRED; Specifies the port at which the service endpoint below needs to be exposed.
	Port *int32 `json:"port,omitempty"`
}

// MarshalJSON implements the json.Marshaller interface for type HTTPConfig.
func (h HTTPConfig) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "hosts", h.Hosts)
	populate(objectMap, "name", h.Name)
	populate(objectMap, "port", h.Port)
	return json.Marshal(objectMap)
}

// HTTPHostConfig - Describes the hostname properties for http routing.
type HTTPHostConfig struct {
	// REQUIRED; http hostname config name.
	Name *string `json:"name,omitempty"`

	// REQUIRED; Route information to use for routing. Routes are processed in the order they are specified. Specify routes that
	// are more specific before routes that can handle general cases.
	Routes []*HTTPRouteConfig `json:"routes,omitempty"`
}

// MarshalJSON implements the json.Marshaller interface for type HTTPHostConfig.
func (h HTTPHostConfig) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "name", h.Name)
	populate(objectMap, "routes", h.Routes)
	return json.Marshal(objectMap)
}

// HTTPRouteConfig - Describes the hostname properties for http routing.
type HTTPRouteConfig struct {
	// REQUIRED; Describes destination endpoint for routing traffic.
	Destination *GatewayDestination `json:"destination,omitempty"`

	// REQUIRED; Describes a rule for http route matching.
	Match *HTTPRouteMatchRule `json:"match,omitempty"`

	// REQUIRED; http route name.
	Name *string `json:"name,omitempty"`
}

// HTTPRouteMatchHeader - Describes header information for http route matching.
type HTTPRouteMatchHeader struct {
	// REQUIRED; Name of header to match in request.
	Name *string `json:"name,omitempty"`

	// how to match header value
	Type *HeaderMatchType `json:"type,omitempty"`

	// Value of header to match in request.
	Value *string `json:"value,omitempty"`
}

// HTTPRouteMatchPath - Path to match for routing.
type HTTPRouteMatchPath struct {
	// REQUIRED; how to match value in the Uri
	Type *PathMatchType `json:"type,omitempty"`

	// REQUIRED; Uri path to match for request.
	Value *string `json:"value,omitempty"`

	// replacement string for matched part of the Uri.
	Rewrite *string `json:"rewrite,omitempty"`
}

// HTTPRouteMatchRule - Describes a rule for http route matching.
type HTTPRouteMatchRule struct {
	// REQUIRED; Path to match for routing.
	Path *HTTPRouteMatchPath `json:"path,omitempty"`

	// headers and their values to match in request.
	Headers []*HTTPRouteMatchHeader `json:"headers,omitempty"`
}

// MarshalJSON implements the json.Marshaller interface for type HTTPRouteMatchRule.
func (h HTTPRouteMatchRule) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "headers", h.Headers)
	populate(objectMap, "path", h.Path)
	return json.Marshal(objectMap)
}

// ImageRegistryCredential - Image registry credential.
type ImageRegistryCredential struct {
	// REQUIRED; Docker image registry server, without protocol such as http and https.
	Server *string `json:"server,omitempty"`

	// REQUIRED; The username for the private registry.
	Username *string `json:"username,omitempty"`

	// The password for the private registry. The password is required for create or update operations, however it is not returned
	// in the get or list operations.
	Password *string `json:"password,omitempty"`
}

// InlinedValueSecretResourceProperties - Describes the properties of a secret resource whose value is provided explicitly
// as plaintext. The secret resource may have multiple values, each being uniquely versioned. The secret value of each
// version is stored encrypted, and delivered as plaintext into the context of applications referencing it.
type InlinedValueSecretResourceProperties struct {
	// REQUIRED; Describes the kind of secret.
	Kind *SecretKind `json:"kind,omitempty"`

	// The type of the content stored in the secret value. The value of this property is opaque to Service Fabric. Once set, the
	// value of this property cannot be changed.
	ContentType *string `json:"contentType,omitempty"`

	// User readable description of the secret.
	Description *string `json:"description,omitempty"`

	// READ-ONLY; State of the resource.
	ProvisioningState *string `json:"provisioningState,omitempty" azure:"ro"`

	// READ-ONLY; Status of the resource.
	Status *ResourceStatus `json:"status,omitempty" azure:"ro"`

	// READ-ONLY; Gives additional information about the current status of the secret.
	StatusDetails *string `json:"statusDetails,omitempty" azure:"ro"`
}

// GetSecretResourceProperties implements the SecretResourcePropertiesClassification interface for type InlinedValueSecretResourceProperties.
func (i *InlinedValueSecretResourceProperties) GetSecretResourceProperties() *SecretResourceProperties {
	return &SecretResourceProperties{
		Description:       i.Description,
		Status:            i.Status,
		StatusDetails:     i.StatusDetails,
		ContentType:       i.ContentType,
		Kind:              i.Kind,
		ProvisioningState: i.ProvisioningState,
	}
}

// GetSecretResourcePropertiesBase implements the SecretResourcePropertiesBaseClassification interface for type InlinedValueSecretResourceProperties.
func (i *InlinedValueSecretResourceProperties) GetSecretResourcePropertiesBase() *SecretResourcePropertiesBase {
	return &SecretResourcePropertiesBase{
		Kind:              i.Kind,
		ProvisioningState: i.ProvisioningState,
	}
}

// MarshalJSON implements the json.Marshaller interface for type InlinedValueSecretResourceProperties.
func (i InlinedValueSecretResourceProperties) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "contentType", i.ContentType)
	populate(objectMap, "description", i.Description)
	objectMap["kind"] = SecretKindInlinedValue
	populate(objectMap, "provisioningState", i.ProvisioningState)
	populate(objectMap, "status", i.Status)
	populate(objectMap, "statusDetails", i.StatusDetails)
	return json.Marshal(objectMap)
}

// UnmarshalJSON implements the json.Unmarshaller interface for type InlinedValueSecretResourceProperties.
func (i *InlinedValueSecretResourceProperties) UnmarshalJSON(data []byte) error {
	var rawMsg map[string]json.RawMessage
	if err := json.Unmarshal(data, &rawMsg); err != nil {
		return err
	}
	for key, val := range rawMsg {
		var err error
		switch key {
		case "contentType":
			err = unpopulate(val, &i.ContentType)
			delete(rawMsg, key)
		case "description":
			err = unpopulate(val, &i.Description)
			delete(rawMsg, key)
		case "kind":
			err = unpopulate(val, &i.Kind)
			delete(rawMsg, key)
		case "provisioningState":
			err = unpopulate(val, &i.ProvisioningState)
			delete(rawMsg, key)
		case "status":
			err = unpopulate(val, &i.Status)
			delete(rawMsg, key)
		case "statusDetails":
			err = unpopulate(val, &i.StatusDetails)
			delete(rawMsg, key)
		}
		if err != nil {
			return err
		}
	}
	return nil
}

// LocalNetworkResourceProperties - Information about a Service Fabric container network local to a single Service Fabric
// cluster.
type LocalNetworkResourceProperties struct {
	// REQUIRED; The type of a Service Fabric container network.
	Kind *NetworkKind `json:"kind,omitempty"`

	// User readable description of the network.
	Description *string `json:"description,omitempty"`

	// Address space for the local container network.
	NetworkAddressPrefix *string `json:"networkAddressPrefix,omitempty"`

	// READ-ONLY; State of the resource.
	ProvisioningState *string `json:"provisioningState,omitempty" azure:"ro"`

	// READ-ONLY; Status of the network.
	Status *ResourceStatus `json:"status,omitempty" azure:"ro"`

	// READ-ONLY; Gives additional information about the current status of the network.
	StatusDetails *string `json:"statusDetails,omitempty" azure:"ro"`
}

// GetNetworkResourceProperties implements the NetworkResourcePropertiesClassification interface for type LocalNetworkResourceProperties.
func (l *LocalNetworkResourceProperties) GetNetworkResourceProperties() *NetworkResourceProperties {
	return &NetworkResourceProperties{
		Description:       l.Description,
		Status:            l.Status,
		StatusDetails:     l.StatusDetails,
		Kind:              l.Kind,
		ProvisioningState: l.ProvisioningState,
	}
}

// GetNetworkResourcePropertiesBase implements the NetworkResourcePropertiesBaseClassification interface for type LocalNetworkResourceProperties.
func (l *LocalNetworkResourceProperties) GetNetworkResourcePropertiesBase() *NetworkResourcePropertiesBase {
	return &NetworkResourcePropertiesBase{
		Kind:              l.Kind,
		ProvisioningState: l.ProvisioningState,
	}
}

// MarshalJSON implements the json.Marshaller interface for type LocalNetworkResourceProperties.
func (l LocalNetworkResourceProperties) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "description", l.Description)
	objectMap["kind"] = NetworkKindLocal
	populate(objectMap, "networkAddressPrefix", l.NetworkAddressPrefix)
	populate(objectMap, "provisioningState", l.ProvisioningState)
	populate(objectMap, "status", l.Status)
	populate(objectMap, "statusDetails", l.StatusDetails)
	return json.Marshal(objectMap)
}

// UnmarshalJSON implements the json.Unmarshaller interface for type LocalNetworkResourceProperties.
func (l *LocalNetworkResourceProperties) UnmarshalJSON(data []byte) error {
	var rawMsg map[string]json.RawMessage
	if err := json.Unmarshal(data, &rawMsg); err != nil {
		return err
	}
	for key, val := range rawMsg {
		var err error
		switch key {
		case "description":
			err = unpopulate(val, &l.Description)
			delete(rawMsg, key)
		case "kind":
			err = unpopulate(val, &l.Kind)
			delete(rawMsg, key)
		case "networkAddressPrefix":
			err = unpopulate(val, &l.NetworkAddressPrefix)
			delete(rawMsg, key)
		case "provisioningState":
			err = unpopulate(val, &l.ProvisioningState)
			delete(rawMsg, key)
		case "status":
			err = unpopulate(val, &l.Status)
			delete(rawMsg, key)
		case "statusDetails":
			err = unpopulate(val, &l.StatusDetails)
			delete(rawMsg, key)
		}
		if err != nil {
			return err
		}
	}
	return nil
}

// ManagedProxyResource - The resource model definition for Azure Resource Manager proxy resource. It will have everything
// other than required location and tags. This proxy resource is explicitly created or updated by
// including it in the parent resource.
type ManagedProxyResource struct {
	// The name of the resource
	Name *string `json:"name,omitempty"`

	// READ-ONLY; Fully qualified identifier for the resource. Ex - /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}
	ID *string `json:"id,omitempty" azure:"ro"`

	// READ-ONLY; The type of the resource. Ex- Microsoft.Compute/virtualMachines or Microsoft.Storage/storageAccounts.
	Type *string `json:"type,omitempty" azure:"ro"`
}

// NetworkClientCreateOptions contains the optional parameters for the NetworkClient.Create method.
type NetworkClientCreateOptions struct {
	// placeholder for future optional parameters
}

// NetworkClientDeleteOptions contains the optional parameters for the NetworkClient.Delete method.
type NetworkClientDeleteOptions struct {
	// placeholder for future optional parameters
}

// NetworkClientGetOptions contains the optional parameters for the NetworkClient.Get method.
type NetworkClientGetOptions struct {
	// placeholder for future optional parameters
}

// NetworkClientListByResourceGroupOptions contains the optional parameters for the NetworkClient.ListByResourceGroup method.
type NetworkClientListByResourceGroupOptions struct {
	// placeholder for future optional parameters
}

// NetworkClientListBySubscriptionOptions contains the optional parameters for the NetworkClient.ListBySubscription method.
type NetworkClientListBySubscriptionOptions struct {
	// placeholder for future optional parameters
}

// NetworkRef - Describes a network reference in a service.
type NetworkRef struct {
	// A list of endpoints that are exposed on this network.
	EndpointRefs []*EndpointRef `json:"endpointRefs,omitempty"`

	// Name of the network
	Name *string `json:"name,omitempty"`
}

// MarshalJSON implements the json.Marshaller interface for type NetworkRef.
func (n NetworkRef) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "endpointRefs", n.EndpointRefs)
	populate(objectMap, "name", n.Name)
	return json.Marshal(objectMap)
}

// NetworkResourceDescription - This type describes a network resource.
type NetworkResourceDescription struct {
	// REQUIRED; The geo-location where the resource lives
	Location *string `json:"location,omitempty"`

	// REQUIRED; Describes properties of a network resource.
	Properties NetworkResourcePropertiesClassification `json:"properties,omitempty"`

	// Resource tags.
	Tags map[string]*string `json:"tags,omitempty"`

	// READ-ONLY; Fully qualified identifier for the resource. Ex - /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}
	ID *string `json:"id,omitempty" azure:"ro"`

	// READ-ONLY; The name of the resource
	Name *string `json:"name,omitempty" azure:"ro"`

	// READ-ONLY; The type of the resource. Ex- Microsoft.Compute/virtualMachines or Microsoft.Storage/storageAccounts.
	Type *string `json:"type,omitempty" azure:"ro"`
}

// MarshalJSON implements the json.Marshaller interface for type NetworkResourceDescription.
func (n NetworkResourceDescription) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "id", n.ID)
	populate(objectMap, "location", n.Location)
	populate(objectMap, "name", n.Name)
	populate(objectMap, "properties", n.Properties)
	populate(objectMap, "tags", n.Tags)
	populate(objectMap, "type", n.Type)
	return json.Marshal(objectMap)
}

// UnmarshalJSON implements the json.Unmarshaller interface for type NetworkResourceDescription.
func (n *NetworkResourceDescription) UnmarshalJSON(data []byte) error {
	var rawMsg map[string]json.RawMessage
	if err := json.Unmarshal(data, &rawMsg); err != nil {
		return err
	}
	for key, val := range rawMsg {
		var err error
		switch key {
		case "id":
			err = unpopulate(val, &n.ID)
			delete(rawMsg, key)
		case "location":
			err = unpopulate(val, &n.Location)
			delete(rawMsg, key)
		case "name":
			err = unpopulate(val, &n.Name)
			delete(rawMsg, key)
		case "properties":
			n.Properties, err = unmarshalNetworkResourcePropertiesClassification(val)
			delete(rawMsg, key)
		case "tags":
			err = unpopulate(val, &n.Tags)
			delete(rawMsg, key)
		case "type":
			err = unpopulate(val, &n.Type)
			delete(rawMsg, key)
		}
		if err != nil {
			return err
		}
	}
	return nil
}

// NetworkResourceDescriptionList - A pageable list of network resources.
type NetworkResourceDescriptionList struct {
	// URI to fetch the next page of the list.
	NextLink *string `json:"nextLink,omitempty"`

	// One page of the list.
	Value []*NetworkResourceDescription `json:"value,omitempty"`
}

// MarshalJSON implements the json.Marshaller interface for type NetworkResourceDescriptionList.
func (n NetworkResourceDescriptionList) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "nextLink", n.NextLink)
	populate(objectMap, "value", n.Value)
	return json.Marshal(objectMap)
}

// NetworkResourcePropertiesClassification provides polymorphic access to related types.
// Call the interface's GetNetworkResourceProperties() method to access the common type.
// Use a type switch to determine the concrete type.  The possible types are:
// - *LocalNetworkResourceProperties, *NetworkResourceProperties
type NetworkResourcePropertiesClassification interface {
	NetworkResourcePropertiesBaseClassification
	// GetNetworkResourceProperties returns the NetworkResourceProperties content of the underlying type.
	GetNetworkResourceProperties() *NetworkResourceProperties
}

// NetworkResourceProperties - Describes properties of a network resource.
type NetworkResourceProperties struct {
	// REQUIRED; The type of a Service Fabric container network.
	Kind *NetworkKind `json:"kind,omitempty"`

	// User readable description of the network.
	Description *string `json:"description,omitempty"`

	// READ-ONLY; State of the resource.
	ProvisioningState *string `json:"provisioningState,omitempty" azure:"ro"`

	// READ-ONLY; Status of the network.
	Status *ResourceStatus `json:"status,omitempty" azure:"ro"`

	// READ-ONLY; Gives additional information about the current status of the network.
	StatusDetails *string `json:"statusDetails,omitempty" azure:"ro"`
}

// GetNetworkResourceProperties implements the NetworkResourcePropertiesClassification interface for type NetworkResourceProperties.
func (n *NetworkResourceProperties) GetNetworkResourceProperties() *NetworkResourceProperties {
	return n
}

// GetNetworkResourcePropertiesBase implements the NetworkResourcePropertiesBaseClassification interface for type NetworkResourceProperties.
func (n *NetworkResourceProperties) GetNetworkResourcePropertiesBase() *NetworkResourcePropertiesBase {
	return &NetworkResourcePropertiesBase{
		Kind:              n.Kind,
		ProvisioningState: n.ProvisioningState,
	}
}

// MarshalJSON implements the json.Marshaller interface for type NetworkResourceProperties.
func (n NetworkResourceProperties) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "description", n.Description)
	objectMap["kind"] = "NetworkResourceProperties"
	populate(objectMap, "provisioningState", n.ProvisioningState)
	populate(objectMap, "status", n.Status)
	populate(objectMap, "statusDetails", n.StatusDetails)
	return json.Marshal(objectMap)
}

// UnmarshalJSON implements the json.Unmarshaller interface for type NetworkResourceProperties.
func (n *NetworkResourceProperties) UnmarshalJSON(data []byte) error {
	var rawMsg map[string]json.RawMessage
	if err := json.Unmarshal(data, &rawMsg); err != nil {
		return err
	}
	for key, val := range rawMsg {
		var err error
		switch key {
		case "description":
			err = unpopulate(val, &n.Description)
			delete(rawMsg, key)
		case "kind":
			err = unpopulate(val, &n.Kind)
			delete(rawMsg, key)
		case "provisioningState":
			err = unpopulate(val, &n.ProvisioningState)
			delete(rawMsg, key)
		case "status":
			err = unpopulate(val, &n.Status)
			delete(rawMsg, key)
		case "statusDetails":
			err = unpopulate(val, &n.StatusDetails)
			delete(rawMsg, key)
		}
		if err != nil {
			return err
		}
	}
	return nil
}

// NetworkResourcePropertiesBaseClassification provides polymorphic access to related types.
// Call the interface's GetNetworkResourcePropertiesBase() method to access the common type.
// Use a type switch to determine the concrete type.  The possible types are:
// - *LocalNetworkResourceProperties, *NetworkResourceProperties, *NetworkResourcePropertiesBase
type NetworkResourcePropertiesBaseClassification interface {
	// GetNetworkResourcePropertiesBase returns the NetworkResourcePropertiesBase content of the underlying type.
	GetNetworkResourcePropertiesBase() *NetworkResourcePropertiesBase
}

// NetworkResourcePropertiesBase - This type describes the properties of a network resource, including its kind.
type NetworkResourcePropertiesBase struct {
	// REQUIRED; The type of a Service Fabric container network.
	Kind *NetworkKind `json:"kind,omitempty"`

	// READ-ONLY; State of the resource.
	ProvisioningState *string `json:"provisioningState,omitempty" azure:"ro"`
}

// GetNetworkResourcePropertiesBase implements the NetworkResourcePropertiesBaseClassification interface for type NetworkResourcePropertiesBase.
func (n *NetworkResourcePropertiesBase) GetNetworkResourcePropertiesBase() *NetworkResourcePropertiesBase {
	return n
}

// OperationListResult - Describes the result of the request to list Service Fabric operations.
type OperationListResult struct {
	// List of Service Fabric operations supported by the Microsoft.ServiceFabric resource provider.
	Value []*OperationResult `json:"value,omitempty"`

	// READ-ONLY; URL to get the next set of operation list results if there are any.
	NextLink *string `json:"nextLink,omitempty" azure:"ro"`
}

// MarshalJSON implements the json.Marshaller interface for type OperationListResult.
func (o OperationListResult) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "nextLink", o.NextLink)
	populate(objectMap, "value", o.Value)
	return json.Marshal(objectMap)
}

// OperationResult - List of operations available at the listed Azure resource provider.
type OperationResult struct {
	// The object that represents the operation.
	Display *AvailableOperationDisplay `json:"display,omitempty"`

	// The name of the operation.
	Name *string `json:"name,omitempty"`

	// The URL to use for getting the next set of results.
	NextLink *string `json:"nextLink,omitempty"`

	// Origin result
	Origin *string `json:"origin,omitempty"`
}

// OperationsClientListOptions contains the optional parameters for the OperationsClient.List method.
type OperationsClientListOptions struct {
	// placeholder for future optional parameters
}

// ProvisionedResourceProperties - Describes common properties of a provisioned resource.
type ProvisionedResourceProperties struct {
	// READ-ONLY; State of the resource.
	ProvisioningState *string `json:"provisioningState,omitempty" azure:"ro"`
}

// ProxyResource - The resource model definition for Azure Resource Manager proxy resource. It will have everything other
// than required location and tags.
type ProxyResource struct {
	// READ-ONLY; Fully qualified identifier for the resource. Ex - /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}
	ID *string `json:"id,omitempty" azure:"ro"`

	// READ-ONLY; The name of the resource
	Name *string `json:"name,omitempty" azure:"ro"`

	// READ-ONLY; The type of the resource. Ex- Microsoft.Compute/virtualMachines or Microsoft.Storage/storageAccounts.
	Type *string `json:"type,omitempty" azure:"ro"`
}

// ReliableCollectionsRef - Specifying this parameter adds support for reliable collections
type ReliableCollectionsRef struct {
	// REQUIRED; Name of ReliableCollection resource. Right now it's not used and you can use any string.
	Name *string `json:"name,omitempty"`

	// False (the default) if ReliableCollections state is persisted to disk as usual. True if you do not want to persist state,
	// in which case replication is still enabled and you can use ReliableCollections
	// as distributed cache.
	DoNotPersistState *bool `json:"doNotPersistState,omitempty"`
}

// Resource - The resource model definition for Azure Resource Manager resource.
type Resource struct {
	// READ-ONLY; Fully qualified identifier for the resource. Ex - /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}
	ID *string `json:"id,omitempty" azure:"ro"`

	// READ-ONLY; The name of the resource
	Name *string `json:"name,omitempty" azure:"ro"`

	// READ-ONLY; The type of the resource. Ex- Microsoft.Compute/virtualMachines or Microsoft.Storage/storageAccounts.
	Type *string `json:"type,omitempty" azure:"ro"`
}

// ResourceLimits - This type describes the resource limits for a given container. It describes the most amount of resources
// a container is allowed to use before being restarted.
type ResourceLimits struct {
	// CPU limits in cores. At present, only full cores are supported.
	CPU *float64 `json:"cpu,omitempty"`

	// The memory limit in GB.
	MemoryInGB *float64 `json:"memoryInGB,omitempty"`
}

// ResourceRequests - This type describes the requested resources for a given container. It describes the least amount of
// resources required for the container. A container can consume more than requested resources up to
// the specified limits before being restarted. Currently, the requested resources are treated as limits.
type ResourceRequests struct {
	// REQUIRED; Requested number of CPU cores. At present, only full cores are supported.
	CPU *float64 `json:"cpu,omitempty"`

	// REQUIRED; The memory request in GB for this container.
	MemoryInGB *float64 `json:"memoryInGB,omitempty"`
}

// ResourceRequirements - This type describes the resource requirements for a container or a service.
type ResourceRequirements struct {
	// REQUIRED; Describes the requested resources for a given container.
	Requests *ResourceRequests `json:"requests,omitempty"`

	// Describes the maximum limits on the resources for a given container.
	Limits *ResourceLimits `json:"limits,omitempty"`
}

// SecretClientCreateOptions contains the optional parameters for the SecretClient.Create method.
type SecretClientCreateOptions struct {
	// placeholder for future optional parameters
}

// SecretClientDeleteOptions contains the optional parameters for the SecretClient.Delete method.
type SecretClientDeleteOptions struct {
	// placeholder for future optional parameters
}

// SecretClientGetOptions contains the optional parameters for the SecretClient.Get method.
type SecretClientGetOptions struct {
	// placeholder for future optional parameters
}

// SecretClientListByResourceGroupOptions contains the optional parameters for the SecretClient.ListByResourceGroup method.
type SecretClientListByResourceGroupOptions struct {
	// placeholder for future optional parameters
}

// SecretClientListBySubscriptionOptions contains the optional parameters for the SecretClient.ListBySubscription method.
type SecretClientListBySubscriptionOptions struct {
	// placeholder for future optional parameters
}

// SecretResourceDescription - This type describes a secret resource.
type SecretResourceDescription struct {
	// REQUIRED; The geo-location where the resource lives
	Location *string `json:"location,omitempty"`

	// REQUIRED; Describes the properties of a secret resource.
	Properties SecretResourcePropertiesClassification `json:"properties,omitempty"`

	// Resource tags.
	Tags map[string]*string `json:"tags,omitempty"`

	// READ-ONLY; Fully qualified identifier for the resource. Ex - /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}
	ID *string `json:"id,omitempty" azure:"ro"`

	// READ-ONLY; The name of the resource
	Name *string `json:"name,omitempty" azure:"ro"`

	// READ-ONLY; The type of the resource. Ex- Microsoft.Compute/virtualMachines or Microsoft.Storage/storageAccounts.
	Type *string `json:"type,omitempty" azure:"ro"`
}

// MarshalJSON implements the json.Marshaller interface for type SecretResourceDescription.
func (s SecretResourceDescription) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "id", s.ID)
	populate(objectMap, "location", s.Location)
	populate(objectMap, "name", s.Name)
	populate(objectMap, "properties", s.Properties)
	populate(objectMap, "tags", s.Tags)
	populate(objectMap, "type", s.Type)
	return json.Marshal(objectMap)
}

// UnmarshalJSON implements the json.Unmarshaller interface for type SecretResourceDescription.
func (s *SecretResourceDescription) UnmarshalJSON(data []byte) error {
	var rawMsg map[string]json.RawMessage
	if err := json.Unmarshal(data, &rawMsg); err != nil {
		return err
	}
	for key, val := range rawMsg {
		var err error
		switch key {
		case "id":
			err = unpopulate(val, &s.ID)
			delete(rawMsg, key)
		case "location":
			err = unpopulate(val, &s.Location)
			delete(rawMsg, key)
		case "name":
			err = unpopulate(val, &s.Name)
			delete(rawMsg, key)
		case "properties":
			s.Properties, err = unmarshalSecretResourcePropertiesClassification(val)
			delete(rawMsg, key)
		case "tags":
			err = unpopulate(val, &s.Tags)
			delete(rawMsg, key)
		case "type":
			err = unpopulate(val, &s.Type)
			delete(rawMsg, key)
		}
		if err != nil {
			return err
		}
	}
	return nil
}

// SecretResourceDescriptionList - A pageable list of secret resources.
type SecretResourceDescriptionList struct {
	// URI to fetch the next page of the list.
	NextLink *string `json:"nextLink,omitempty"`

	// One page of the list.
	Value []*SecretResourceDescription `json:"value,omitempty"`
}

// MarshalJSON implements the json.Marshaller interface for type SecretResourceDescriptionList.
func (s SecretResourceDescriptionList) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "nextLink", s.NextLink)
	populate(objectMap, "value", s.Value)
	return json.Marshal(objectMap)
}

// SecretResourcePropertiesClassification provides polymorphic access to related types.
// Call the interface's GetSecretResourceProperties() method to access the common type.
// Use a type switch to determine the concrete type.  The possible types are:
// - *InlinedValueSecretResourceProperties, *SecretResourceProperties
type SecretResourcePropertiesClassification interface {
	SecretResourcePropertiesBaseClassification
	// GetSecretResourceProperties returns the SecretResourceProperties content of the underlying type.
	GetSecretResourceProperties() *SecretResourceProperties
}

// SecretResourceProperties - Describes the properties of a secret resource.
type SecretResourceProperties struct {
	// REQUIRED; Describes the kind of secret.
	Kind *SecretKind `json:"kind,omitempty"`

	// The type of the content stored in the secret value. The value of this property is opaque to Service Fabric. Once set, the
	// value of this property cannot be changed.
	ContentType *string `json:"contentType,omitempty"`

	// User readable description of the secret.
	Description *string `json:"description,omitempty"`

	// READ-ONLY; State of the resource.
	ProvisioningState *string `json:"provisioningState,omitempty" azure:"ro"`

	// READ-ONLY; Status of the resource.
	Status *ResourceStatus `json:"status,omitempty" azure:"ro"`

	// READ-ONLY; Gives additional information about the current status of the secret.
	StatusDetails *string `json:"statusDetails,omitempty" azure:"ro"`
}

// GetSecretResourceProperties implements the SecretResourcePropertiesClassification interface for type SecretResourceProperties.
func (s *SecretResourceProperties) GetSecretResourceProperties() *SecretResourceProperties { return s }

// GetSecretResourcePropertiesBase implements the SecretResourcePropertiesBaseClassification interface for type SecretResourceProperties.
func (s *SecretResourceProperties) GetSecretResourcePropertiesBase() *SecretResourcePropertiesBase {
	return &SecretResourcePropertiesBase{
		Kind:              s.Kind,
		ProvisioningState: s.ProvisioningState,
	}
}

// MarshalJSON implements the json.Marshaller interface for type SecretResourceProperties.
func (s SecretResourceProperties) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "contentType", s.ContentType)
	populate(objectMap, "description", s.Description)
	objectMap["kind"] = "SecretResourceProperties"
	populate(objectMap, "provisioningState", s.ProvisioningState)
	populate(objectMap, "status", s.Status)
	populate(objectMap, "statusDetails", s.StatusDetails)
	return json.Marshal(objectMap)
}

// UnmarshalJSON implements the json.Unmarshaller interface for type SecretResourceProperties.
func (s *SecretResourceProperties) UnmarshalJSON(data []byte) error {
	var rawMsg map[string]json.RawMessage
	if err := json.Unmarshal(data, &rawMsg); err != nil {
		return err
	}
	for key, val := range rawMsg {
		var err error
		switch key {
		case "contentType":
			err = unpopulate(val, &s.ContentType)
			delete(rawMsg, key)
		case "description":
			err = unpopulate(val, &s.Description)
			delete(rawMsg, key)
		case "kind":
			err = unpopulate(val, &s.Kind)
			delete(rawMsg, key)
		case "provisioningState":
			err = unpopulate(val, &s.ProvisioningState)
			delete(rawMsg, key)
		case "status":
			err = unpopulate(val, &s.Status)
			delete(rawMsg, key)
		case "statusDetails":
			err = unpopulate(val, &s.StatusDetails)
			delete(rawMsg, key)
		}
		if err != nil {
			return err
		}
	}
	return nil
}

// SecretResourcePropertiesBaseClassification provides polymorphic access to related types.
// Call the interface's GetSecretResourcePropertiesBase() method to access the common type.
// Use a type switch to determine the concrete type.  The possible types are:
// - *InlinedValueSecretResourceProperties, *SecretResourceProperties, *SecretResourcePropertiesBase
type SecretResourcePropertiesBaseClassification interface {
	// GetSecretResourcePropertiesBase returns the SecretResourcePropertiesBase content of the underlying type.
	GetSecretResourcePropertiesBase() *SecretResourcePropertiesBase
}

// SecretResourcePropertiesBase - This type describes the properties of a secret resource, including its kind.
type SecretResourcePropertiesBase struct {
	// REQUIRED; Describes the kind of secret.
	Kind *SecretKind `json:"kind,omitempty"`

	// READ-ONLY; State of the resource.
	ProvisioningState *string `json:"provisioningState,omitempty" azure:"ro"`
}

// GetSecretResourcePropertiesBase implements the SecretResourcePropertiesBaseClassification interface for type SecretResourcePropertiesBase.
func (s *SecretResourcePropertiesBase) GetSecretResourcePropertiesBase() *SecretResourcePropertiesBase {
	return s
}

// SecretValue - This type represents the unencrypted value of the secret.
type SecretValue struct {
	// The actual value of the secret.
	Value *string `json:"value,omitempty"`
}

// SecretValueClientCreateOptions contains the optional parameters for the SecretValueClient.Create method.
type SecretValueClientCreateOptions struct {
	// placeholder for future optional parameters
}

// SecretValueClientDeleteOptions contains the optional parameters for the SecretValueClient.Delete method.
type SecretValueClientDeleteOptions struct {
	// placeholder for future optional parameters
}

// SecretValueClientGetOptions contains the optional parameters for the SecretValueClient.Get method.
type SecretValueClientGetOptions struct {
	// placeholder for future optional parameters
}

// SecretValueClientListOptions contains the optional parameters for the SecretValueClient.List method.
type SecretValueClientListOptions struct {
	// placeholder for future optional parameters
}

// SecretValueClientListValueOptions contains the optional parameters for the SecretValueClient.ListValue method.
type SecretValueClientListValueOptions struct {
	// placeholder for future optional parameters
}

// SecretValueProperties - This type describes properties of secret value resource.
type SecretValueProperties struct {
	// The actual value of the secret.
	Value *string `json:"value,omitempty"`
}

// SecretValueResourceDescription - This type describes a value of a secret resource. The name of this resource is the version
// identifier corresponding to this secret value.
type SecretValueResourceDescription struct {
	// REQUIRED; The geo-location where the resource lives
	Location *string `json:"location,omitempty"`

	// REQUIRED; This type describes properties of a secret value resource.
	Properties *SecretValueResourceProperties `json:"properties,omitempty"`

	// Resource tags.
	Tags map[string]*string `json:"tags,omitempty"`

	// READ-ONLY; Fully qualified identifier for the resource. Ex - /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}
	ID *string `json:"id,omitempty" azure:"ro"`

	// READ-ONLY; The name of the resource
	Name *string `json:"name,omitempty" azure:"ro"`

	// READ-ONLY; The type of the resource. Ex- Microsoft.Compute/virtualMachines or Microsoft.Storage/storageAccounts.
	Type *string `json:"type,omitempty" azure:"ro"`
}

// MarshalJSON implements the json.Marshaller interface for type SecretValueResourceDescription.
func (s SecretValueResourceDescription) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "id", s.ID)
	populate(objectMap, "location", s.Location)
	populate(objectMap, "name", s.Name)
	populate(objectMap, "properties", s.Properties)
	populate(objectMap, "tags", s.Tags)
	populate(objectMap, "type", s.Type)
	return json.Marshal(objectMap)
}

// SecretValueResourceDescriptionList - A pageable list of values of a secret resource. The information does not include only
// the name of the value and not the actual unencrypted value.
type SecretValueResourceDescriptionList struct {
	// URI to fetch the next page of the list.
	NextLink *string `json:"nextLink,omitempty"`

	// One page of the list.
	Value []*SecretValueResourceDescription `json:"value,omitempty"`
}

// MarshalJSON implements the json.Marshaller interface for type SecretValueResourceDescriptionList.
func (s SecretValueResourceDescriptionList) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "nextLink", s.NextLink)
	populate(objectMap, "value", s.Value)
	return json.Marshal(objectMap)
}

// SecretValueResourceProperties - This type describes properties of a secret value resource.
type SecretValueResourceProperties struct {
	// The actual value of the secret.
	Value *string `json:"value,omitempty"`

	// READ-ONLY; State of the resource.
	ProvisioningState *string `json:"provisioningState,omitempty" azure:"ro"`
}

// ServiceClientGetOptions contains the optional parameters for the ServiceClient.Get method.
type ServiceClientGetOptions struct {
	// placeholder for future optional parameters
}

// ServiceClientListOptions contains the optional parameters for the ServiceClient.List method.
type ServiceClientListOptions struct {
	// placeholder for future optional parameters
}

// ServiceProperties - Describes properties of a service resource.
type ServiceProperties struct {
	// Auto scaling policies
	AutoScalingPolicies []*AutoScalingPolicy `json:"autoScalingPolicies,omitempty"`

	// User readable description of the service.
	Description *string `json:"description,omitempty"`

	// The number of replicas of the service to create. Defaults to 1 if not specified.
	ReplicaCount *int32 `json:"replicaCount,omitempty"`

	// READ-ONLY; Describes the health state of an application resource.
	HealthState *HealthState `json:"healthState,omitempty" azure:"ro"`

	// READ-ONLY; Status of the service.
	Status *ResourceStatus `json:"status,omitempty" azure:"ro"`

	// READ-ONLY; Gives additional information about the current status of the service.
	StatusDetails *string `json:"statusDetails,omitempty" azure:"ro"`

	// READ-ONLY; When the service's health state is not 'Ok', this additional details from service fabric Health Manager for
	// the user to know why the service is marked unhealthy.
	UnhealthyEvaluation *string `json:"unhealthyEvaluation,omitempty" azure:"ro"`
}

// MarshalJSON implements the json.Marshaller interface for type ServiceProperties.
func (s ServiceProperties) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "autoScalingPolicies", s.AutoScalingPolicies)
	populate(objectMap, "description", s.Description)
	populate(objectMap, "healthState", s.HealthState)
	populate(objectMap, "replicaCount", s.ReplicaCount)
	populate(objectMap, "status", s.Status)
	populate(objectMap, "statusDetails", s.StatusDetails)
	populate(objectMap, "unhealthyEvaluation", s.UnhealthyEvaluation)
	return json.Marshal(objectMap)
}

// ServiceReplicaClientGetOptions contains the optional parameters for the ServiceReplicaClient.Get method.
type ServiceReplicaClientGetOptions struct {
	// placeholder for future optional parameters
}

// ServiceReplicaClientListOptions contains the optional parameters for the ServiceReplicaClient.List method.
type ServiceReplicaClientListOptions struct {
	// placeholder for future optional parameters
}

// ServiceReplicaDescription - Describes a replica of a service resource.
type ServiceReplicaDescription struct {
	// REQUIRED; Describes the set of code packages that forms the service. A code package describes the container and the properties
	// for running it. All the code packages are started together on the same host and
	// share the same context (network, process etc.).
	CodePackages []*ContainerCodePackageProperties `json:"codePackages,omitempty"`

	// REQUIRED; The operation system required by the code in service.
	OSType *OperatingSystemType `json:"osType,omitempty"`

	// REQUIRED; Name of the replica.
	ReplicaName *string `json:"replicaName,omitempty"`

	// Reference to sinks in DiagnosticsDescription.
	Diagnostics *DiagnosticsRef `json:"diagnostics,omitempty"`

	// The names of the private networks that this service needs to be part of.
	NetworkRefs []*NetworkRef `json:"networkRefs,omitempty"`
}

// MarshalJSON implements the json.Marshaller interface for type ServiceReplicaDescription.
func (s ServiceReplicaDescription) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "codePackages", s.CodePackages)
	populate(objectMap, "diagnostics", s.Diagnostics)
	populate(objectMap, "networkRefs", s.NetworkRefs)
	populate(objectMap, "osType", s.OSType)
	populate(objectMap, "replicaName", s.ReplicaName)
	return json.Marshal(objectMap)
}

// ServiceReplicaDescriptionList - A pageable list of service replicas.
type ServiceReplicaDescriptionList struct {
	// URI to fetch the next page of the list.
	NextLink *string `json:"nextLink,omitempty"`

	// One page of the list.
	Value []*ServiceReplicaDescription `json:"value,omitempty"`
}

// MarshalJSON implements the json.Marshaller interface for type ServiceReplicaDescriptionList.
func (s ServiceReplicaDescriptionList) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "nextLink", s.NextLink)
	populate(objectMap, "value", s.Value)
	return json.Marshal(objectMap)
}

// ServiceReplicaProperties - Describes the properties of a service replica.
type ServiceReplicaProperties struct {
	// REQUIRED; Describes the set of code packages that forms the service. A code package describes the container and the properties
	// for running it. All the code packages are started together on the same host and
	// share the same context (network, process etc.).
	CodePackages []*ContainerCodePackageProperties `json:"codePackages,omitempty"`

	// REQUIRED; The operation system required by the code in service.
	OSType *OperatingSystemType `json:"osType,omitempty"`

	// Reference to sinks in DiagnosticsDescription.
	Diagnostics *DiagnosticsRef `json:"diagnostics,omitempty"`

	// The names of the private networks that this service needs to be part of.
	NetworkRefs []*NetworkRef `json:"networkRefs,omitempty"`
}

// MarshalJSON implements the json.Marshaller interface for type ServiceReplicaProperties.
func (s ServiceReplicaProperties) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "codePackages", s.CodePackages)
	populate(objectMap, "diagnostics", s.Diagnostics)
	populate(objectMap, "networkRefs", s.NetworkRefs)
	populate(objectMap, "osType", s.OSType)
	return json.Marshal(objectMap)
}

// ServiceResourceDescription - This type describes a service resource.
type ServiceResourceDescription struct {
	// REQUIRED; This type describes properties of a service resource.
	Properties *ServiceResourceProperties `json:"properties,omitempty"`

	// The name of the resource
	Name *string `json:"name,omitempty"`

	// READ-ONLY; Fully qualified identifier for the resource. Ex - /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}
	ID *string `json:"id,omitempty" azure:"ro"`

	// READ-ONLY; The type of the resource. Ex- Microsoft.Compute/virtualMachines or Microsoft.Storage/storageAccounts.
	Type *string `json:"type,omitempty" azure:"ro"`
}

// ServiceResourceDescriptionList - A pageable list of service resources.
type ServiceResourceDescriptionList struct {
	// URI to fetch the next page of the list.
	NextLink *string `json:"nextLink,omitempty"`

	// One page of the list.
	Value []*ServiceResourceDescription `json:"value,omitempty"`
}

// MarshalJSON implements the json.Marshaller interface for type ServiceResourceDescriptionList.
func (s ServiceResourceDescriptionList) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "nextLink", s.NextLink)
	populate(objectMap, "value", s.Value)
	return json.Marshal(objectMap)
}

// ServiceResourceProperties - This type describes properties of a service resource.
type ServiceResourceProperties struct {
	// REQUIRED; Describes the set of code packages that forms the service. A code package describes the container and the properties
	// for running it. All the code packages are started together on the same host and
	// share the same context (network, process etc.).
	CodePackages []*ContainerCodePackageProperties `json:"codePackages,omitempty"`

	// REQUIRED; The operation system required by the code in service.
	OSType *OperatingSystemType `json:"osType,omitempty"`

	// Auto scaling policies
	AutoScalingPolicies []*AutoScalingPolicy `json:"autoScalingPolicies,omitempty"`

	// User readable description of the service.
	Description *string `json:"description,omitempty"`

	// Reference to sinks in DiagnosticsDescription.
	Diagnostics *DiagnosticsRef `json:"diagnostics,omitempty"`

	// The names of the private networks that this service needs to be part of.
	NetworkRefs []*NetworkRef `json:"networkRefs,omitempty"`

	// The number of replicas of the service to create. Defaults to 1 if not specified.
	ReplicaCount *int32 `json:"replicaCount,omitempty"`

	// READ-ONLY; Describes the health state of an application resource.
	HealthState *HealthState `json:"healthState,omitempty" azure:"ro"`

	// READ-ONLY; State of the resource.
	ProvisioningState *string `json:"provisioningState,omitempty" azure:"ro"`

	// READ-ONLY; Status of the service.
	Status *ResourceStatus `json:"status,omitempty" azure:"ro"`

	// READ-ONLY; Gives additional information about the current status of the service.
	StatusDetails *string `json:"statusDetails,omitempty" azure:"ro"`

	// READ-ONLY; When the service's health state is not 'Ok', this additional details from service fabric Health Manager for
	// the user to know why the service is marked unhealthy.
	UnhealthyEvaluation *string `json:"unhealthyEvaluation,omitempty" azure:"ro"`
}

// MarshalJSON implements the json.Marshaller interface for type ServiceResourceProperties.
func (s ServiceResourceProperties) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "autoScalingPolicies", s.AutoScalingPolicies)
	populate(objectMap, "codePackages", s.CodePackages)
	populate(objectMap, "description", s.Description)
	populate(objectMap, "diagnostics", s.Diagnostics)
	populate(objectMap, "healthState", s.HealthState)
	populate(objectMap, "networkRefs", s.NetworkRefs)
	populate(objectMap, "osType", s.OSType)
	populate(objectMap, "provisioningState", s.ProvisioningState)
	populate(objectMap, "replicaCount", s.ReplicaCount)
	populate(objectMap, "status", s.Status)
	populate(objectMap, "statusDetails", s.StatusDetails)
	populate(objectMap, "unhealthyEvaluation", s.UnhealthyEvaluation)
	return json.Marshal(objectMap)
}

// Setting - Describes a setting for the container. The setting file path can be fetched from environment variable "Fabric_SettingPath".
// The path for Windows container is "C:\secrets". The path for Linux container
// is "/var/secrets".
type Setting struct {
	// The name of the setting.
	Name *string `json:"name,omitempty"`

	// The value of the setting.
	Value *string `json:"value,omitempty"`
}

// TCPConfig - Describes the tcp configuration for external connectivity for this network.
type TCPConfig struct {
	// REQUIRED; Describes destination endpoint for routing traffic.
	Destination *GatewayDestination `json:"destination,omitempty"`

	// REQUIRED; tcp gateway config name.
	Name *string `json:"name,omitempty"`

	// REQUIRED; Specifies the port at which the service endpoint below needs to be exposed.
	Port *int32 `json:"port,omitempty"`
}

// TrackedResource - The resource model definition for Azure Resource Manager tracked top-level resource.
type TrackedResource struct {
	// REQUIRED; The geo-location where the resource lives
	Location *string `json:"location,omitempty"`

	// Resource tags.
	Tags map[string]*string `json:"tags,omitempty"`

	// READ-ONLY; Fully qualified identifier for the resource. Ex - /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}
	ID *string `json:"id,omitempty" azure:"ro"`

	// READ-ONLY; The name of the resource
	Name *string `json:"name,omitempty" azure:"ro"`

	// READ-ONLY; The type of the resource. Ex- Microsoft.Compute/virtualMachines or Microsoft.Storage/storageAccounts.
	Type *string `json:"type,omitempty" azure:"ro"`
}

// MarshalJSON implements the json.Marshaller interface for type TrackedResource.
func (t TrackedResource) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "id", t.ID)
	populate(objectMap, "location", t.Location)
	populate(objectMap, "name", t.Name)
	populate(objectMap, "tags", t.Tags)
	populate(objectMap, "type", t.Type)
	return json.Marshal(objectMap)
}

// VolumeClientCreateOptions contains the optional parameters for the VolumeClient.Create method.
type VolumeClientCreateOptions struct {
	// placeholder for future optional parameters
}

// VolumeClientDeleteOptions contains the optional parameters for the VolumeClient.Delete method.
type VolumeClientDeleteOptions struct {
	// placeholder for future optional parameters
}

// VolumeClientGetOptions contains the optional parameters for the VolumeClient.Get method.
type VolumeClientGetOptions struct {
	// placeholder for future optional parameters
}

// VolumeClientListByResourceGroupOptions contains the optional parameters for the VolumeClient.ListByResourceGroup method.
type VolumeClientListByResourceGroupOptions struct {
	// placeholder for future optional parameters
}

// VolumeClientListBySubscriptionOptions contains the optional parameters for the VolumeClient.ListBySubscription method.
type VolumeClientListBySubscriptionOptions struct {
	// placeholder for future optional parameters
}

// VolumeProperties - Describes properties of a volume resource.
type VolumeProperties struct {
	// REQUIRED; Provider of the volume.
	Provider *VolumeProvider `json:"provider,omitempty"`

	// This type describes a volume provided by an Azure Files file share.
	AzureFileParameters *VolumeProviderParametersAzureFile `json:"azureFileParameters,omitempty"`

	// User readable description of the volume.
	Description *string `json:"description,omitempty"`

	// READ-ONLY; Status of the volume.
	Status *ResourceStatus `json:"status,omitempty" azure:"ro"`

	// READ-ONLY; Gives additional information about the current status of the volume.
	StatusDetails *string `json:"statusDetails,omitempty" azure:"ro"`
}

// VolumeProviderParametersAzureFile - This type describes a volume provided by an Azure Files file share.
type VolumeProviderParametersAzureFile struct {
	// REQUIRED; Name of the Azure storage account for the File Share.
	AccountName *string `json:"accountName,omitempty"`

	// REQUIRED; Name of the Azure Files file share that provides storage for the volume.
	ShareName *string `json:"shareName,omitempty"`

	// Access key of the Azure storage account for the File Share.
	AccountKey *string `json:"accountKey,omitempty"`
}

// VolumeReference - Describes a reference to a volume resource.
type VolumeReference struct {
	// REQUIRED; The path within the container at which the volume should be mounted. Only valid path characters are allowed.
	DestinationPath *string `json:"destinationPath,omitempty"`

	// REQUIRED; Name of the volume being referenced.
	Name *string `json:"name,omitempty"`

	// The flag indicating whether the volume is read only. Default is 'false'.
	ReadOnly *bool `json:"readOnly,omitempty"`
}

// VolumeResourceDescription - This type describes a volume resource.
type VolumeResourceDescription struct {
	// REQUIRED; The geo-location where the resource lives
	Location *string `json:"location,omitempty"`

	// REQUIRED; This type describes properties of a volume resource.
	Properties *VolumeResourceProperties `json:"properties,omitempty"`

	// Resource tags.
	Tags map[string]*string `json:"tags,omitempty"`

	// READ-ONLY; Fully qualified identifier for the resource. Ex - /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}
	ID *string `json:"id,omitempty" azure:"ro"`

	// READ-ONLY; The name of the resource
	Name *string `json:"name,omitempty" azure:"ro"`

	// READ-ONLY; The type of the resource. Ex- Microsoft.Compute/virtualMachines or Microsoft.Storage/storageAccounts.
	Type *string `json:"type,omitempty" azure:"ro"`
}

// MarshalJSON implements the json.Marshaller interface for type VolumeResourceDescription.
func (v VolumeResourceDescription) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "id", v.ID)
	populate(objectMap, "location", v.Location)
	populate(objectMap, "name", v.Name)
	populate(objectMap, "properties", v.Properties)
	populate(objectMap, "tags", v.Tags)
	populate(objectMap, "type", v.Type)
	return json.Marshal(objectMap)
}

// VolumeResourceDescriptionList - A pageable list of volume resources.
type VolumeResourceDescriptionList struct {
	// URI to fetch the next page of the list.
	NextLink *string `json:"nextLink,omitempty"`

	// One page of the list.
	Value []*VolumeResourceDescription `json:"value,omitempty"`
}

// MarshalJSON implements the json.Marshaller interface for type VolumeResourceDescriptionList.
func (v VolumeResourceDescriptionList) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "nextLink", v.NextLink)
	populate(objectMap, "value", v.Value)
	return json.Marshal(objectMap)
}

// VolumeResourceProperties - This type describes properties of a volume resource.
type VolumeResourceProperties struct {
	// REQUIRED; Provider of the volume.
	Provider *VolumeProvider `json:"provider,omitempty"`

	// This type describes a volume provided by an Azure Files file share.
	AzureFileParameters *VolumeProviderParametersAzureFile `json:"azureFileParameters,omitempty"`

	// User readable description of the volume.
	Description *string `json:"description,omitempty"`

	// READ-ONLY; State of the resource.
	ProvisioningState *string `json:"provisioningState,omitempty" azure:"ro"`

	// READ-ONLY; Status of the volume.
	Status *ResourceStatus `json:"status,omitempty" azure:"ro"`

	// READ-ONLY; Gives additional information about the current status of the volume.
	StatusDetails *string `json:"statusDetails,omitempty" azure:"ro"`
}

func populate(m map[string]interface{}, k string, v interface{}) {
	if v == nil {
		return
	} else if azcore.IsNullValue(v) {
		m[k] = nil
	} else if !reflect.ValueOf(v).IsNil() {
		m[k] = v
	}
}

func unpopulate(data json.RawMessage, v interface{}) error {
	if data == nil {
		return nil
	}
	return json.Unmarshal(data, v)
}
