//go:build go1.16
// +build go1.16

// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

package armservicelinker

import (
	"encoding/json"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore"
	"reflect"
	"time"
)

// AuthInfoBaseClassification provides polymorphic access to related types.
// Call the interface's GetAuthInfoBase() method to access the common type.
// Use a type switch to determine the concrete type.  The possible types are:
// - *AuthInfoBase, *SecretAuthInfo, *ServicePrincipalCertificateAuthInfo, *ServicePrincipalSecretAuthInfo, *SystemAssignedIdentityAuthInfo,
// - *UserAssignedIdentityAuthInfo
type AuthInfoBaseClassification interface {
	// GetAuthInfoBase returns the AuthInfoBase content of the underlying type.
	GetAuthInfoBase() *AuthInfoBase
}

// AuthInfoBase - The authentication info
type AuthInfoBase struct {
	// REQUIRED; The authentication type.
	AuthType *AuthType `json:"authType,omitempty"`
}

// GetAuthInfoBase implements the AuthInfoBaseClassification interface for type AuthInfoBase.
func (a *AuthInfoBase) GetAuthInfoBase() *AuthInfoBase { return a }

// UnmarshalJSON implements the json.Unmarshaller interface for type AuthInfoBase.
func (a *AuthInfoBase) UnmarshalJSON(data []byte) error {
	var rawMsg map[string]json.RawMessage
	if err := json.Unmarshal(data, &rawMsg); err != nil {
		return err
	}
	return a.unmarshalInternal(rawMsg)
}

func (a AuthInfoBase) marshalInternal(objectMap map[string]interface{}, discValue AuthType) {
	a.AuthType = &discValue
	objectMap["authType"] = a.AuthType
}

func (a *AuthInfoBase) unmarshalInternal(rawMsg map[string]json.RawMessage) error {
	for key, val := range rawMsg {
		var err error
		switch key {
		case "authType":
			err = unpopulate(val, &a.AuthType)
			delete(rawMsg, key)
		}
		if err != nil {
			return err
		}
	}
	return nil
}

// ErrorAdditionalInfo - The resource management error additional info.
type ErrorAdditionalInfo struct {
	// READ-ONLY; The additional info.
	Info map[string]interface{} `json:"info,omitempty" azure:"ro"`

	// READ-ONLY; The additional info type.
	Type *string `json:"type,omitempty" azure:"ro"`
}

// ErrorDetail - The error detail.
type ErrorDetail struct {
	// READ-ONLY; The error additional info.
	AdditionalInfo []*ErrorAdditionalInfo `json:"additionalInfo,omitempty" azure:"ro"`

	// READ-ONLY; The error code.
	Code *string `json:"code,omitempty" azure:"ro"`

	// READ-ONLY; The error details.
	Details []*ErrorDetail `json:"details,omitempty" azure:"ro"`

	// READ-ONLY; The error message.
	Message *string `json:"message,omitempty" azure:"ro"`

	// READ-ONLY; The error target.
	Target *string `json:"target,omitempty" azure:"ro"`
}

// MarshalJSON implements the json.Marshaller interface for type ErrorDetail.
func (e ErrorDetail) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "additionalInfo", e.AdditionalInfo)
	populate(objectMap, "code", e.Code)
	populate(objectMap, "details", e.Details)
	populate(objectMap, "message", e.Message)
	populate(objectMap, "target", e.Target)
	return json.Marshal(objectMap)
}

// ErrorResponse - Common error response for all Azure Resource Manager APIs to return error details for failed operations. (This also follows the OData
// error response format.).
// Implements the error and azcore.HTTPResponse interfaces.
type ErrorResponse struct {
	raw string
	// The error object.
	InnerError *ErrorDetail `json:"error,omitempty"`
}

// Error implements the error interface for type ErrorResponse.
// The contents of the error text are not contractual and subject to change.
func (e ErrorResponse) Error() string {
	return e.raw
}

// LinkerBeginCreateOrUpdateOptions contains the optional parameters for the Linker.BeginCreateOrUpdate method.
type LinkerBeginCreateOrUpdateOptions struct {
	// placeholder for future optional parameters
}

// LinkerBeginDeleteOptions contains the optional parameters for the Linker.BeginDelete method.
type LinkerBeginDeleteOptions struct {
	// placeholder for future optional parameters
}

// LinkerBeginUpdateOptions contains the optional parameters for the Linker.BeginUpdate method.
type LinkerBeginUpdateOptions struct {
	// placeholder for future optional parameters
}

// LinkerBeginValidateOptions contains the optional parameters for the Linker.BeginValidate method.
type LinkerBeginValidateOptions struct {
	// placeholder for future optional parameters
}

// LinkerGetOptions contains the optional parameters for the Linker.Get method.
type LinkerGetOptions struct {
	// placeholder for future optional parameters
}

// LinkerList - The list of Linker.
type LinkerList struct {
	// The link used to get the next page of Linker list.
	NextLink *string `json:"nextLink,omitempty"`

	// The list of Linkers.
	Value []*LinkerResource `json:"value,omitempty"`
}

// MarshalJSON implements the json.Marshaller interface for type LinkerList.
func (l LinkerList) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "nextLink", l.NextLink)
	populate(objectMap, "value", l.Value)
	return json.Marshal(objectMap)
}

// LinkerListConfigurationsOptions contains the optional parameters for the Linker.ListConfigurations method.
type LinkerListConfigurationsOptions struct {
	// placeholder for future optional parameters
}

// LinkerListOptions contains the optional parameters for the Linker.List method.
type LinkerListOptions struct {
	// placeholder for future optional parameters
}

// LinkerPatch - A linker to be updated.
type LinkerPatch struct {
	// Linker properties
	Properties *LinkerProperties `json:"properties,omitempty"`
}

// MarshalJSON implements the json.Marshaller interface for type LinkerPatch.
func (l LinkerPatch) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "properties", l.Properties)
	return json.Marshal(objectMap)
}

// LinkerProperties - The properties of the linker.
type LinkerProperties struct {
	// The authentication type.
	AuthInfo AuthInfoBaseClassification `json:"authInfo,omitempty"`

	// The application client type
	ClientType *ClientType `json:"clientType,omitempty"`

	// The resource Id of target service.
	TargetID *string `json:"targetId,omitempty"`

	// READ-ONLY; The provisioning state.
	ProvisioningState *string `json:"provisioningState,omitempty" azure:"ro"`
}

// MarshalJSON implements the json.Marshaller interface for type LinkerProperties.
func (l LinkerProperties) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "authInfo", l.AuthInfo)
	populate(objectMap, "clientType", l.ClientType)
	populate(objectMap, "provisioningState", l.ProvisioningState)
	populate(objectMap, "targetId", l.TargetID)
	return json.Marshal(objectMap)
}

// UnmarshalJSON implements the json.Unmarshaller interface for type LinkerProperties.
func (l *LinkerProperties) UnmarshalJSON(data []byte) error {
	var rawMsg map[string]json.RawMessage
	if err := json.Unmarshal(data, &rawMsg); err != nil {
		return err
	}
	for key, val := range rawMsg {
		var err error
		switch key {
		case "authInfo":
			l.AuthInfo, err = unmarshalAuthInfoBaseClassification(val)
			delete(rawMsg, key)
		case "clientType":
			err = unpopulate(val, &l.ClientType)
			delete(rawMsg, key)
		case "provisioningState":
			err = unpopulate(val, &l.ProvisioningState)
			delete(rawMsg, key)
		case "targetId":
			err = unpopulate(val, &l.TargetID)
			delete(rawMsg, key)
		}
		if err != nil {
			return err
		}
	}
	return nil
}

// LinkerResource - Linker of source and target resource
type LinkerResource struct {
	ProxyResource
	// REQUIRED; The properties of the linker.
	Properties *LinkerProperties `json:"properties,omitempty"`

	// READ-ONLY; The system data.
	SystemData *SystemData `json:"systemData,omitempty" azure:"ro"`
}

// Operation - Details of a REST API operation, returned from the Resource Provider Operations API
type Operation struct {
	// Localized display information for this particular operation.
	Display *OperationDisplay `json:"display,omitempty"`

	// READ-ONLY; Enum. Indicates the action type. "Internal" refers to actions that are for internal only APIs.
	ActionType *ActionType `json:"actionType,omitempty" azure:"ro"`

	// READ-ONLY; Whether the operation applies to data-plane. This is "true" for data-plane operations and "false" for ARM/control-plane operations.
	IsDataAction *bool `json:"isDataAction,omitempty" azure:"ro"`

	// READ-ONLY; The name of the operation, as per Resource-Based Access Control (RBAC). Examples: "Microsoft.Compute/virtualMachines/write", "Microsoft.Compute/virtualMachines/capture/action"
	Name *string `json:"name,omitempty" azure:"ro"`

	// READ-ONLY; The intended executor of the operation; as in Resource Based Access Control (RBAC) and audit logs UX. Default value is "user,system"
	Origin *Origin `json:"origin,omitempty" azure:"ro"`
}

// OperationDisplay - Localized display information for this particular operation.
type OperationDisplay struct {
	// READ-ONLY; The short, localized friendly description of the operation; suitable for tool tips and detailed views.
	Description *string `json:"description,omitempty" azure:"ro"`

	// READ-ONLY; The concise, localized friendly name for the operation; suitable for dropdowns. E.g. "Create or Update Virtual Machine", "Restart Virtual
	// Machine".
	Operation *string `json:"operation,omitempty" azure:"ro"`

	// READ-ONLY; The localized friendly form of the resource provider name, e.g. "Microsoft Monitoring Insights" or "Microsoft Compute".
	Provider *string `json:"provider,omitempty" azure:"ro"`

	// READ-ONLY; The localized friendly name of the resource type related to this operation. E.g. "Virtual Machines" or "Job Schedule Collections".
	Resource *string `json:"resource,omitempty" azure:"ro"`
}

// OperationListResult - A list of REST API operations supported by an Azure Resource Provider. It contains an URL link to get the next set of results.
type OperationListResult struct {
	// READ-ONLY; URL to get the next set of operation list results (if there are any).
	NextLink *string `json:"nextLink,omitempty" azure:"ro"`

	// READ-ONLY; List of operations supported by the resource provider
	Value []*Operation `json:"value,omitempty" azure:"ro"`
}

// MarshalJSON implements the json.Marshaller interface for type OperationListResult.
func (o OperationListResult) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "nextLink", o.NextLink)
	populate(objectMap, "value", o.Value)
	return json.Marshal(objectMap)
}

// OperationsListOptions contains the optional parameters for the Operations.List method.
type OperationsListOptions struct {
	// placeholder for future optional parameters
}

// ProxyResource - The resource model definition for a Azure Resource Manager proxy resource. It will not have tags and a location
type ProxyResource struct {
	Resource
}

// Resource - Common fields that are returned in the response for all Azure Resource Manager resources
type Resource struct {
	// READ-ONLY; Fully qualified resource ID for the resource. Ex - /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}
	ID *string `json:"id,omitempty" azure:"ro"`

	// READ-ONLY; The name of the resource
	Name *string `json:"name,omitempty" azure:"ro"`

	// READ-ONLY; The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or "Microsoft.Storage/storageAccounts"
	Type *string `json:"type,omitempty" azure:"ro"`
}

// SecretAuthInfo - The authentication info when authType is secret
type SecretAuthInfo struct {
	AuthInfoBase
	// Username or account name for secret auth.
	Name *string `json:"name,omitempty"`

	// Password or account key for secret auth.
	Secret *string `json:"secret,omitempty"`
}

// MarshalJSON implements the json.Marshaller interface for type SecretAuthInfo.
func (s SecretAuthInfo) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	s.AuthInfoBase.marshalInternal(objectMap, AuthTypeSecret)
	populate(objectMap, "name", s.Name)
	populate(objectMap, "secret", s.Secret)
	return json.Marshal(objectMap)
}

// UnmarshalJSON implements the json.Unmarshaller interface for type SecretAuthInfo.
func (s *SecretAuthInfo) UnmarshalJSON(data []byte) error {
	var rawMsg map[string]json.RawMessage
	if err := json.Unmarshal(data, &rawMsg); err != nil {
		return err
	}
	for key, val := range rawMsg {
		var err error
		switch key {
		case "name":
			err = unpopulate(val, &s.Name)
			delete(rawMsg, key)
		case "secret":
			err = unpopulate(val, &s.Secret)
			delete(rawMsg, key)
		}
		if err != nil {
			return err
		}
	}
	if err := s.AuthInfoBase.unmarshalInternal(rawMsg); err != nil {
		return err
	}
	return nil
}

// ServicePrincipalCertificateAuthInfo - The authentication info when authType is servicePrincipal certificate
type ServicePrincipalCertificateAuthInfo struct {
	AuthInfoBase
	// REQUIRED; ServicePrincipal certificate for servicePrincipal auth.
	Certificate *string `json:"certificate,omitempty"`

	// REQUIRED; Application clientId for servicePrincipal auth.
	ClientID *string `json:"clientId,omitempty"`

	// REQUIRED; Principal Id for servicePrincipal auth.
	PrincipalID *string `json:"principalId,omitempty"`
}

// MarshalJSON implements the json.Marshaller interface for type ServicePrincipalCertificateAuthInfo.
func (s ServicePrincipalCertificateAuthInfo) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	s.AuthInfoBase.marshalInternal(objectMap, AuthTypeServicePrincipalCertificate)
	populate(objectMap, "certificate", s.Certificate)
	populate(objectMap, "clientId", s.ClientID)
	populate(objectMap, "principalId", s.PrincipalID)
	return json.Marshal(objectMap)
}

// UnmarshalJSON implements the json.Unmarshaller interface for type ServicePrincipalCertificateAuthInfo.
func (s *ServicePrincipalCertificateAuthInfo) UnmarshalJSON(data []byte) error {
	var rawMsg map[string]json.RawMessage
	if err := json.Unmarshal(data, &rawMsg); err != nil {
		return err
	}
	for key, val := range rawMsg {
		var err error
		switch key {
		case "certificate":
			err = unpopulate(val, &s.Certificate)
			delete(rawMsg, key)
		case "clientId":
			err = unpopulate(val, &s.ClientID)
			delete(rawMsg, key)
		case "principalId":
			err = unpopulate(val, &s.PrincipalID)
			delete(rawMsg, key)
		}
		if err != nil {
			return err
		}
	}
	if err := s.AuthInfoBase.unmarshalInternal(rawMsg); err != nil {
		return err
	}
	return nil
}

// ServicePrincipalSecretAuthInfo - The authentication info when authType is servicePrincipal secret
type ServicePrincipalSecretAuthInfo struct {
	AuthInfoBase
	// REQUIRED; ServicePrincipal application clientId for servicePrincipal auth.
	ClientID *string `json:"clientId,omitempty"`

	// REQUIRED; Principal Id for servicePrincipal auth.
	PrincipalID *string `json:"principalId,omitempty"`

	// REQUIRED; Secret for servicePrincipal auth.
	Secret *string `json:"secret,omitempty"`
}

// MarshalJSON implements the json.Marshaller interface for type ServicePrincipalSecretAuthInfo.
func (s ServicePrincipalSecretAuthInfo) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	s.AuthInfoBase.marshalInternal(objectMap, AuthTypeServicePrincipalSecret)
	populate(objectMap, "clientId", s.ClientID)
	populate(objectMap, "principalId", s.PrincipalID)
	populate(objectMap, "secret", s.Secret)
	return json.Marshal(objectMap)
}

// UnmarshalJSON implements the json.Unmarshaller interface for type ServicePrincipalSecretAuthInfo.
func (s *ServicePrincipalSecretAuthInfo) UnmarshalJSON(data []byte) error {
	var rawMsg map[string]json.RawMessage
	if err := json.Unmarshal(data, &rawMsg); err != nil {
		return err
	}
	for key, val := range rawMsg {
		var err error
		switch key {
		case "clientId":
			err = unpopulate(val, &s.ClientID)
			delete(rawMsg, key)
		case "principalId":
			err = unpopulate(val, &s.PrincipalID)
			delete(rawMsg, key)
		case "secret":
			err = unpopulate(val, &s.Secret)
			delete(rawMsg, key)
		}
		if err != nil {
			return err
		}
	}
	if err := s.AuthInfoBase.unmarshalInternal(rawMsg); err != nil {
		return err
	}
	return nil
}

// SourceConfiguration - A configuration item for source resource
type SourceConfiguration struct {
	// The name of setting.
	Name *string `json:"name,omitempty"`

	// The value of setting
	Value *string `json:"value,omitempty"`
}

// SourceConfigurationResult - Configurations for source resource, include appSettings, connectionString and serviceBindings
type SourceConfigurationResult struct {
	// The configuration properties for source resource.
	Configurations []*SourceConfiguration `json:"configurations,omitempty"`
}

// MarshalJSON implements the json.Marshaller interface for type SourceConfigurationResult.
func (s SourceConfigurationResult) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "configurations", s.Configurations)
	return json.Marshal(objectMap)
}

// SystemAssignedIdentityAuthInfo - The authentication info when authType is systemAssignedIdentity
type SystemAssignedIdentityAuthInfo struct {
	AuthInfoBase
}

// MarshalJSON implements the json.Marshaller interface for type SystemAssignedIdentityAuthInfo.
func (s SystemAssignedIdentityAuthInfo) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	s.AuthInfoBase.marshalInternal(objectMap, AuthTypeSystemAssignedIdentity)
	return json.Marshal(objectMap)
}

// SystemData - Metadata pertaining to creation and last modification of the resource.
type SystemData struct {
	// The timestamp of resource creation (UTC).
	CreatedAt *time.Time `json:"createdAt,omitempty"`

	// The identity that created the resource.
	CreatedBy *string `json:"createdBy,omitempty"`

	// The type of identity that created the resource.
	CreatedByType *CreatedByType `json:"createdByType,omitempty"`

	// The timestamp of resource last modification (UTC)
	LastModifiedAt *time.Time `json:"lastModifiedAt,omitempty"`

	// The identity that last modified the resource.
	LastModifiedBy *string `json:"lastModifiedBy,omitempty"`

	// The type of identity that last modified the resource.
	LastModifiedByType *CreatedByType `json:"lastModifiedByType,omitempty"`
}

// MarshalJSON implements the json.Marshaller interface for type SystemData.
func (s SystemData) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populateTimeRFC3339(objectMap, "createdAt", s.CreatedAt)
	populate(objectMap, "createdBy", s.CreatedBy)
	populate(objectMap, "createdByType", s.CreatedByType)
	populateTimeRFC3339(objectMap, "lastModifiedAt", s.LastModifiedAt)
	populate(objectMap, "lastModifiedBy", s.LastModifiedBy)
	populate(objectMap, "lastModifiedByType", s.LastModifiedByType)
	return json.Marshal(objectMap)
}

// UnmarshalJSON implements the json.Unmarshaller interface for type SystemData.
func (s *SystemData) UnmarshalJSON(data []byte) error {
	var rawMsg map[string]json.RawMessage
	if err := json.Unmarshal(data, &rawMsg); err != nil {
		return err
	}
	for key, val := range rawMsg {
		var err error
		switch key {
		case "createdAt":
			err = unpopulateTimeRFC3339(val, &s.CreatedAt)
			delete(rawMsg, key)
		case "createdBy":
			err = unpopulate(val, &s.CreatedBy)
			delete(rawMsg, key)
		case "createdByType":
			err = unpopulate(val, &s.CreatedByType)
			delete(rawMsg, key)
		case "lastModifiedAt":
			err = unpopulateTimeRFC3339(val, &s.LastModifiedAt)
			delete(rawMsg, key)
		case "lastModifiedBy":
			err = unpopulate(val, &s.LastModifiedBy)
			delete(rawMsg, key)
		case "lastModifiedByType":
			err = unpopulate(val, &s.LastModifiedByType)
			delete(rawMsg, key)
		}
		if err != nil {
			return err
		}
	}
	return nil
}

// UserAssignedIdentityAuthInfo - The authentication info when authType is userAssignedIdentity
type UserAssignedIdentityAuthInfo struct {
	AuthInfoBase
	// REQUIRED; Client Id for userAssignedIdentity.
	ClientID *string `json:"clientId,omitempty"`

	// REQUIRED; Subscription id for userAssignedIdentity.
	SubscriptionID *string `json:"subscriptionId,omitempty"`
}

// MarshalJSON implements the json.Marshaller interface for type UserAssignedIdentityAuthInfo.
func (u UserAssignedIdentityAuthInfo) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	u.AuthInfoBase.marshalInternal(objectMap, AuthTypeUserAssignedIdentity)
	populate(objectMap, "clientId", u.ClientID)
	populate(objectMap, "subscriptionId", u.SubscriptionID)
	return json.Marshal(objectMap)
}

// UnmarshalJSON implements the json.Unmarshaller interface for type UserAssignedIdentityAuthInfo.
func (u *UserAssignedIdentityAuthInfo) UnmarshalJSON(data []byte) error {
	var rawMsg map[string]json.RawMessage
	if err := json.Unmarshal(data, &rawMsg); err != nil {
		return err
	}
	for key, val := range rawMsg {
		var err error
		switch key {
		case "clientId":
			err = unpopulate(val, &u.ClientID)
			delete(rawMsg, key)
		case "subscriptionId":
			err = unpopulate(val, &u.SubscriptionID)
			delete(rawMsg, key)
		}
		if err != nil {
			return err
		}
	}
	if err := u.AuthInfoBase.unmarshalInternal(rawMsg); err != nil {
		return err
	}
	return nil
}

// ValidateResult - The validation result for a linker.
type ValidateResult struct {
	// The authentication type.
	AuthType *AuthType `json:"authType,omitempty"`

	// Specifies if the linker is healthy.
	LinkerStatus *LinkerStatus `json:"linkerStatus,omitempty"`

	// The linker name.
	Name *string `json:"name,omitempty"`

	// The reason of the error.
	Reason *string `json:"reason,omitempty"`

	// The end time of the validation report.
	ReportEndTimeUTC *time.Time `json:"reportEndTimeUtc,omitempty"`

	// The start time of the validation report.
	ReportStartTimeUTC *time.Time `json:"reportStartTimeUtc,omitempty"`

	// The resource Id of target service.
	TargetID *string `json:"targetId,omitempty"`
}

// MarshalJSON implements the json.Marshaller interface for type ValidateResult.
func (v ValidateResult) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "authType", v.AuthType)
	populate(objectMap, "linkerStatus", v.LinkerStatus)
	populate(objectMap, "name", v.Name)
	populate(objectMap, "reason", v.Reason)
	populateTimeRFC3339(objectMap, "reportEndTimeUtc", v.ReportEndTimeUTC)
	populateTimeRFC3339(objectMap, "reportStartTimeUtc", v.ReportStartTimeUTC)
	populate(objectMap, "targetId", v.TargetID)
	return json.Marshal(objectMap)
}

// UnmarshalJSON implements the json.Unmarshaller interface for type ValidateResult.
func (v *ValidateResult) UnmarshalJSON(data []byte) error {
	var rawMsg map[string]json.RawMessage
	if err := json.Unmarshal(data, &rawMsg); err != nil {
		return err
	}
	for key, val := range rawMsg {
		var err error
		switch key {
		case "authType":
			err = unpopulate(val, &v.AuthType)
			delete(rawMsg, key)
		case "linkerStatus":
			err = unpopulate(val, &v.LinkerStatus)
			delete(rawMsg, key)
		case "name":
			err = unpopulate(val, &v.Name)
			delete(rawMsg, key)
		case "reason":
			err = unpopulate(val, &v.Reason)
			delete(rawMsg, key)
		case "reportEndTimeUtc":
			err = unpopulateTimeRFC3339(val, &v.ReportEndTimeUTC)
			delete(rawMsg, key)
		case "reportStartTimeUtc":
			err = unpopulateTimeRFC3339(val, &v.ReportStartTimeUTC)
			delete(rawMsg, key)
		case "targetId":
			err = unpopulate(val, &v.TargetID)
			delete(rawMsg, key)
		}
		if err != nil {
			return err
		}
	}
	return nil
}

func populate(m map[string]interface{}, k string, v interface{}) {
	if v == nil {
		return
	} else if azcore.IsNullValue(v) {
		m[k] = nil
	} else if !reflect.ValueOf(v).IsNil() {
		m[k] = v
	}
}

func unpopulate(data json.RawMessage, v interface{}) error {
	if data == nil {
		return nil
	}
	return json.Unmarshal(data, v)
}
