//go:build go1.16
// +build go1.16

// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

package armservicelinker

import (
	"context"
	armruntime "github.com/Azure/azure-sdk-for-go/sdk/azcore/arm/runtime"
	"net/http"
	"time"
)

// LinkerCreateOrUpdatePollerResponse contains the response from method Linker.CreateOrUpdate.
type LinkerCreateOrUpdatePollerResponse struct {
	// Poller contains an initialized poller.
	Poller *LinkerCreateOrUpdatePoller

	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// PollUntilDone will poll the service endpoint until a terminal state is reached or an error is received.
// freq: the time to wait between intervals in absence of a Retry-After header. Allowed minimum is one second.
// A good starting value is 30 seconds. Note that some resources might benefit from a different value.
func (l LinkerCreateOrUpdatePollerResponse) PollUntilDone(ctx context.Context, freq time.Duration) (LinkerCreateOrUpdateResponse, error) {
	respType := LinkerCreateOrUpdateResponse{}
	resp, err := l.Poller.pt.PollUntilDone(ctx, freq, &respType.LinkerResource)
	if err != nil {
		return respType, err
	}
	respType.RawResponse = resp
	return respType, nil
}

// Resume rehydrates a LinkerCreateOrUpdatePollerResponse from the provided client and resume token.
func (l *LinkerCreateOrUpdatePollerResponse) Resume(ctx context.Context, client *LinkerClient, token string) error {
	pt, err := armruntime.NewPollerFromResumeToken("LinkerClient.CreateOrUpdate", token, client.pl, client.createOrUpdateHandleError)
	if err != nil {
		return err
	}
	poller := &LinkerCreateOrUpdatePoller{
		pt: pt,
	}
	resp, err := poller.Poll(ctx)
	if err != nil {
		return err
	}
	l.Poller = poller
	l.RawResponse = resp
	return nil
}

// LinkerCreateOrUpdateResponse contains the response from method Linker.CreateOrUpdate.
type LinkerCreateOrUpdateResponse struct {
	LinkerCreateOrUpdateResult
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// LinkerCreateOrUpdateResult contains the result from method Linker.CreateOrUpdate.
type LinkerCreateOrUpdateResult struct {
	LinkerResource
}

// LinkerDeletePollerResponse contains the response from method Linker.Delete.
type LinkerDeletePollerResponse struct {
	// Poller contains an initialized poller.
	Poller *LinkerDeletePoller

	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// PollUntilDone will poll the service endpoint until a terminal state is reached or an error is received.
// freq: the time to wait between intervals in absence of a Retry-After header. Allowed minimum is one second.
// A good starting value is 30 seconds. Note that some resources might benefit from a different value.
func (l LinkerDeletePollerResponse) PollUntilDone(ctx context.Context, freq time.Duration) (LinkerDeleteResponse, error) {
	respType := LinkerDeleteResponse{}
	resp, err := l.Poller.pt.PollUntilDone(ctx, freq, nil)
	if err != nil {
		return respType, err
	}
	respType.RawResponse = resp
	return respType, nil
}

// Resume rehydrates a LinkerDeletePollerResponse from the provided client and resume token.
func (l *LinkerDeletePollerResponse) Resume(ctx context.Context, client *LinkerClient, token string) error {
	pt, err := armruntime.NewPollerFromResumeToken("LinkerClient.Delete", token, client.pl, client.deleteHandleError)
	if err != nil {
		return err
	}
	poller := &LinkerDeletePoller{
		pt: pt,
	}
	resp, err := poller.Poll(ctx)
	if err != nil {
		return err
	}
	l.Poller = poller
	l.RawResponse = resp
	return nil
}

// LinkerDeleteResponse contains the response from method Linker.Delete.
type LinkerDeleteResponse struct {
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// LinkerGetResponse contains the response from method Linker.Get.
type LinkerGetResponse struct {
	LinkerGetResult
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// LinkerGetResult contains the result from method Linker.Get.
type LinkerGetResult struct {
	LinkerResource
}

// LinkerListConfigurationsResponse contains the response from method Linker.ListConfigurations.
type LinkerListConfigurationsResponse struct {
	LinkerListConfigurationsResult
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// LinkerListConfigurationsResult contains the result from method Linker.ListConfigurations.
type LinkerListConfigurationsResult struct {
	SourceConfigurationResult
}

// LinkerListResponse contains the response from method Linker.List.
type LinkerListResponse struct {
	LinkerListResult
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// LinkerListResult contains the result from method Linker.List.
type LinkerListResult struct {
	LinkerList
}

// LinkerUpdatePollerResponse contains the response from method Linker.Update.
type LinkerUpdatePollerResponse struct {
	// Poller contains an initialized poller.
	Poller *LinkerUpdatePoller

	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// PollUntilDone will poll the service endpoint until a terminal state is reached or an error is received.
// freq: the time to wait between intervals in absence of a Retry-After header. Allowed minimum is one second.
// A good starting value is 30 seconds. Note that some resources might benefit from a different value.
func (l LinkerUpdatePollerResponse) PollUntilDone(ctx context.Context, freq time.Duration) (LinkerUpdateResponse, error) {
	respType := LinkerUpdateResponse{}
	resp, err := l.Poller.pt.PollUntilDone(ctx, freq, &respType.LinkerResource)
	if err != nil {
		return respType, err
	}
	respType.RawResponse = resp
	return respType, nil
}

// Resume rehydrates a LinkerUpdatePollerResponse from the provided client and resume token.
func (l *LinkerUpdatePollerResponse) Resume(ctx context.Context, client *LinkerClient, token string) error {
	pt, err := armruntime.NewPollerFromResumeToken("LinkerClient.Update", token, client.pl, client.updateHandleError)
	if err != nil {
		return err
	}
	poller := &LinkerUpdatePoller{
		pt: pt,
	}
	resp, err := poller.Poll(ctx)
	if err != nil {
		return err
	}
	l.Poller = poller
	l.RawResponse = resp
	return nil
}

// LinkerUpdateResponse contains the response from method Linker.Update.
type LinkerUpdateResponse struct {
	LinkerUpdateResult
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// LinkerUpdateResult contains the result from method Linker.Update.
type LinkerUpdateResult struct {
	LinkerResource
}

// LinkerValidatePollerResponse contains the response from method Linker.Validate.
type LinkerValidatePollerResponse struct {
	// Poller contains an initialized poller.
	Poller *LinkerValidatePoller

	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// PollUntilDone will poll the service endpoint until a terminal state is reached or an error is received.
// freq: the time to wait between intervals in absence of a Retry-After header. Allowed minimum is one second.
// A good starting value is 30 seconds. Note that some resources might benefit from a different value.
func (l LinkerValidatePollerResponse) PollUntilDone(ctx context.Context, freq time.Duration) (LinkerValidateResponse, error) {
	respType := LinkerValidateResponse{}
	resp, err := l.Poller.pt.PollUntilDone(ctx, freq, &respType.ValidateResult)
	if err != nil {
		return respType, err
	}
	respType.RawResponse = resp
	return respType, nil
}

// Resume rehydrates a LinkerValidatePollerResponse from the provided client and resume token.
func (l *LinkerValidatePollerResponse) Resume(ctx context.Context, client *LinkerClient, token string) error {
	pt, err := armruntime.NewPollerFromResumeToken("LinkerClient.Validate", token, client.pl, client.validateHandleError)
	if err != nil {
		return err
	}
	poller := &LinkerValidatePoller{
		pt: pt,
	}
	resp, err := poller.Poll(ctx)
	if err != nil {
		return err
	}
	l.Poller = poller
	l.RawResponse = resp
	return nil
}

// LinkerValidateResponse contains the response from method Linker.Validate.
type LinkerValidateResponse struct {
	LinkerValidateResult
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// LinkerValidateResult contains the result from method Linker.Validate.
type LinkerValidateResult struct {
	ValidateResult
}

// OperationsListResponse contains the response from method Operations.List.
type OperationsListResponse struct {
	OperationsListResult
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// OperationsListResult contains the result from method Operations.List.
type OperationsListResult struct {
	OperationListResult
}
