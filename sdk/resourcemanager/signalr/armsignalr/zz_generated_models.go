//go:build go1.16
// +build go1.16

// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

package armsignalr

import (
	"encoding/json"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore"
	"reflect"
	"time"
)

// Dimension - Specifications of the Dimension of metrics.
type Dimension struct {
	// Localized friendly display name of the dimension.
	DisplayName *string `json:"displayName,omitempty"`

	// Name of the dimension as it appears in MDM.
	InternalName *string `json:"internalName,omitempty"`

	// The public facing name of the dimension.
	Name *string `json:"name,omitempty"`

	// A Boolean flag indicating whether this dimension should be included for the shoebox export scenario.
	ToBeExportedForShoebox *bool `json:"toBeExportedForShoebox,omitempty"`
}

// ErrorAdditionalInfo - The resource management error additional info.
type ErrorAdditionalInfo struct {
	// READ-ONLY; The additional info.
	Info map[string]interface{} `json:"info,omitempty" azure:"ro"`

	// READ-ONLY; The additional info type.
	Type *string `json:"type,omitempty" azure:"ro"`
}

// ErrorDetail - The error detail.
type ErrorDetail struct {
	// READ-ONLY; The error additional info.
	AdditionalInfo []*ErrorAdditionalInfo `json:"additionalInfo,omitempty" azure:"ro"`

	// READ-ONLY; The error code.
	Code *string `json:"code,omitempty" azure:"ro"`

	// READ-ONLY; The error details.
	Details []*ErrorDetail `json:"details,omitempty" azure:"ro"`

	// READ-ONLY; The error message.
	Message *string `json:"message,omitempty" azure:"ro"`

	// READ-ONLY; The error target.
	Target *string `json:"target,omitempty" azure:"ro"`
}

// MarshalJSON implements the json.Marshaller interface for type ErrorDetail.
func (e ErrorDetail) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "additionalInfo", e.AdditionalInfo)
	populate(objectMap, "code", e.Code)
	populate(objectMap, "details", e.Details)
	populate(objectMap, "message", e.Message)
	populate(objectMap, "target", e.Target)
	return json.Marshal(objectMap)
}

// ErrorResponse - Common error response for all Azure Resource Manager APIs to return error details for failed operations. (This also follows the OData
// error response format.).
// Implements the error and azcore.HTTPResponse interfaces.
type ErrorResponse struct {
	raw string
	// The error object.
	InnerError *ErrorDetail `json:"error,omitempty"`
}

// Error implements the error interface for type ErrorResponse.
// The contents of the error text are not contractual and subject to change.
func (e ErrorResponse) Error() string {
	return e.raw
}

// LogSpecification - Specifications of the Logs for Azure Monitoring.
type LogSpecification struct {
	// Localized friendly display name of the log.
	DisplayName *string `json:"displayName,omitempty"`

	// Name of the log.
	Name *string `json:"name,omitempty"`
}

// ManagedIdentity - A class represent managed identities used for request and response
type ManagedIdentity struct {
	// Represent the identity type: systemAssigned, userAssigned, None
	Type *ManagedIdentityType `json:"type,omitempty"`

	// Get or set the user assigned identities
	UserAssignedIdentities map[string]*UserAssignedIdentityProperty `json:"userAssignedIdentities,omitempty"`

	// READ-ONLY; Get the principal id for the system assigned identity. Only be used in response.
	PrincipalID *string `json:"principalId,omitempty" azure:"ro"`

	// READ-ONLY; Get the tenant id for the system assigned identity. Only be used in response
	TenantID *string `json:"tenantId,omitempty" azure:"ro"`
}

// MarshalJSON implements the json.Marshaller interface for type ManagedIdentity.
func (m ManagedIdentity) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "principalId", m.PrincipalID)
	populate(objectMap, "tenantId", m.TenantID)
	populate(objectMap, "type", m.Type)
	populate(objectMap, "userAssignedIdentities", m.UserAssignedIdentities)
	return json.Marshal(objectMap)
}

// ManagedIdentitySettings - Managed identity settings for upstream.
type ManagedIdentitySettings struct {
	// The Resource indicating the App ID URI of the target resource. It also appears in the aud (audience) claim of the issued token.
	Resource *string `json:"resource,omitempty"`
}

// MetricSpecification - Specifications of the Metrics for Azure Monitoring.
type MetricSpecification struct {
	// Only provide one value for this field. Valid values: Average, Minimum, Maximum, Total, Count.
	AggregationType *string `json:"aggregationType,omitempty"`

	// The name of the metric category that the metric belongs to. A metric can only belong to a single category.
	Category *string `json:"category,omitempty"`

	// The dimensions of the metrics.
	Dimensions []*Dimension `json:"dimensions,omitempty"`

	// Localized friendly description of the metric.
	DisplayDescription *string `json:"displayDescription,omitempty"`

	// Localized friendly display name of the metric.
	DisplayName *string `json:"displayName,omitempty"`

	// Optional. If set to true, then zero will be returned for time duration where no metric is emitted/published. Ex. a metric that returns the number of
	// times a particular error code was emitted. The
	// error code may not appear often, instead of the RP publishing 0, Shoebox can auto fill in 0s for time periods where nothing was emitted.
	FillGapWithZero *string `json:"fillGapWithZero,omitempty"`

	// Name of the metric.
	Name *string `json:"name,omitempty"`

	// The unit that makes sense for the metric.
	Unit *string `json:"unit,omitempty"`
}

// MarshalJSON implements the json.Marshaller interface for type MetricSpecification.
func (m MetricSpecification) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "aggregationType", m.AggregationType)
	populate(objectMap, "category", m.Category)
	populate(objectMap, "dimensions", m.Dimensions)
	populate(objectMap, "displayDescription", m.DisplayDescription)
	populate(objectMap, "displayName", m.DisplayName)
	populate(objectMap, "fillGapWithZero", m.FillGapWithZero)
	populate(objectMap, "name", m.Name)
	populate(objectMap, "unit", m.Unit)
	return json.Marshal(objectMap)
}

// NameAvailability - Result of the request to check name availability. It contains a flag and possible reason of failure.
type NameAvailability struct {
	// The message of the operation.
	Message *string `json:"message,omitempty"`

	// Indicates whether the name is available or not.
	NameAvailable *bool `json:"nameAvailable,omitempty"`

	// The reason of the availability. Required if name is not available.
	Reason *string `json:"reason,omitempty"`
}

// NameAvailabilityParameters - Data POST-ed to the nameAvailability action
type NameAvailabilityParameters struct {
	// REQUIRED; The resource name to validate. e.g."my-resource-name"
	Name *string `json:"name,omitempty"`

	// REQUIRED; The resource type. Can be "Microsoft.SignalRService/SignalR" or "Microsoft.SignalRService/webPubSub"
	Type *string `json:"type,omitempty"`
}

// NetworkACL - Network ACL
type NetworkACL struct {
	// Allowed request types. The value can be one or more of: ClientConnection, ServerConnection, RESTAPI.
	Allow []*SignalRRequestType `json:"allow,omitempty"`

	// Denied request types. The value can be one or more of: ClientConnection, ServerConnection, RESTAPI.
	Deny []*SignalRRequestType `json:"deny,omitempty"`
}

// MarshalJSON implements the json.Marshaller interface for type NetworkACL.
func (n NetworkACL) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	n.marshalInternal(objectMap)
	return json.Marshal(objectMap)
}

func (n NetworkACL) marshalInternal(objectMap map[string]interface{}) {
	populate(objectMap, "allow", n.Allow)
	populate(objectMap, "deny", n.Deny)
}

// Operation - REST API operation supported by resource provider.
type Operation struct {
	// The object that describes the operation.
	Display *OperationDisplay `json:"display,omitempty"`

	// If the operation is a data action. (for data plane rbac)
	IsDataAction *bool `json:"isDataAction,omitempty"`

	// Name of the operation with format: {provider}/{resource}/{operation}
	Name *string `json:"name,omitempty"`

	// Optional. The intended executor of the operation; governs the display of the operation in the RBAC UX and the audit logs UX.
	Origin *string `json:"origin,omitempty"`

	// Extra properties for the operation.
	Properties *OperationProperties `json:"properties,omitempty"`
}

// OperationDisplay - The object that describes a operation.
type OperationDisplay struct {
	// The localized friendly description for the operation
	Description *string `json:"description,omitempty"`

	// The localized friendly name for the operation.
	Operation *string `json:"operation,omitempty"`

	// Friendly name of the resource provider
	Provider *string `json:"provider,omitempty"`

	// Resource type on which the operation is performed.
	Resource *string `json:"resource,omitempty"`
}

// OperationList - Result of the request to list REST API operations. It contains a list of operations.
type OperationList struct {
	// The URL the client should use to fetch the next page (per server side paging). It's null for now, added for future use.
	NextLink *string `json:"nextLink,omitempty"`

	// List of operations supported by the resource provider.
	Value []*Operation `json:"value,omitempty"`
}

// MarshalJSON implements the json.Marshaller interface for type OperationList.
func (o OperationList) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "nextLink", o.NextLink)
	populate(objectMap, "value", o.Value)
	return json.Marshal(objectMap)
}

// OperationProperties - Extra Operation properties.
type OperationProperties struct {
	// The service specifications.
	ServiceSpecification *ServiceSpecification `json:"serviceSpecification,omitempty"`
}

// OperationsListOptions contains the optional parameters for the Operations.List method.
type OperationsListOptions struct {
	// placeholder for future optional parameters
}

// PrivateEndpoint - Private endpoint
type PrivateEndpoint struct {
	// Full qualified Id of the private endpoint
	ID *string `json:"id,omitempty"`
}

// PrivateEndpointACL - ACL for a private endpoint
type PrivateEndpointACL struct {
	NetworkACL
	// REQUIRED; Name of the private endpoint connection
	Name *string `json:"name,omitempty"`
}

// MarshalJSON implements the json.Marshaller interface for type PrivateEndpointACL.
func (p PrivateEndpointACL) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	p.NetworkACL.marshalInternal(objectMap)
	populate(objectMap, "name", p.Name)
	return json.Marshal(objectMap)
}

// PrivateEndpointConnection - A private endpoint connection to an azure resource
type PrivateEndpointConnection struct {
	ProxyResource
	// Properties of the private endpoint connection
	Properties *PrivateEndpointConnectionProperties `json:"properties,omitempty"`

	// READ-ONLY; Metadata pertaining to creation and last modification of the resource.
	SystemData *SystemData `json:"systemData,omitempty" azure:"ro"`
}

// MarshalJSON implements the json.Marshaller interface for type PrivateEndpointConnection.
func (p PrivateEndpointConnection) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	p.ProxyResource.marshalInternal(objectMap)
	populate(objectMap, "properties", p.Properties)
	populate(objectMap, "systemData", p.SystemData)
	return json.Marshal(objectMap)
}

// PrivateEndpointConnectionList - A list of private endpoint connections
type PrivateEndpointConnectionList struct {
	// Request URL that can be used to query next page of private endpoint connections. Returned when the total number of requested private endpoint connections
	// exceed maximum page size.
	NextLink *string `json:"nextLink,omitempty"`

	// The list of the private endpoint connections
	Value []*PrivateEndpointConnection `json:"value,omitempty"`
}

// MarshalJSON implements the json.Marshaller interface for type PrivateEndpointConnectionList.
func (p PrivateEndpointConnectionList) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "nextLink", p.NextLink)
	populate(objectMap, "value", p.Value)
	return json.Marshal(objectMap)
}

// PrivateEndpointConnectionProperties - Private endpoint connection properties
type PrivateEndpointConnectionProperties struct {
	// Private endpoint associated with the private endpoint connection
	PrivateEndpoint *PrivateEndpoint `json:"privateEndpoint,omitempty"`

	// Connection state
	PrivateLinkServiceConnectionState *PrivateLinkServiceConnectionState `json:"privateLinkServiceConnectionState,omitempty"`

	// READ-ONLY; Group IDs
	GroupIDs []*string `json:"groupIds,omitempty" azure:"ro"`

	// READ-ONLY; Provisioning state of the private endpoint connection
	ProvisioningState *ProvisioningState `json:"provisioningState,omitempty" azure:"ro"`
}

// MarshalJSON implements the json.Marshaller interface for type PrivateEndpointConnectionProperties.
func (p PrivateEndpointConnectionProperties) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "groupIds", p.GroupIDs)
	populate(objectMap, "privateEndpoint", p.PrivateEndpoint)
	populate(objectMap, "privateLinkServiceConnectionState", p.PrivateLinkServiceConnectionState)
	populate(objectMap, "provisioningState", p.ProvisioningState)
	return json.Marshal(objectMap)
}

// PrivateLinkResource - Private link resource
type PrivateLinkResource struct {
	ProxyResource
	// Properties of a private link resource
	Properties *PrivateLinkResourceProperties `json:"properties,omitempty"`
}

// MarshalJSON implements the json.Marshaller interface for type PrivateLinkResource.
func (p PrivateLinkResource) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	p.ProxyResource.marshalInternal(objectMap)
	populate(objectMap, "properties", p.Properties)
	return json.Marshal(objectMap)
}

// PrivateLinkResourceList - Contains a list of PrivateLinkResource and a possible link to query more results
type PrivateLinkResourceList struct {
	// The URL the client should use to fetch the next page (per server side paging). It's null for now, added for future use.
	NextLink *string `json:"nextLink,omitempty"`

	// List of PrivateLinkResource
	Value []*PrivateLinkResource `json:"value,omitempty"`
}

// MarshalJSON implements the json.Marshaller interface for type PrivateLinkResourceList.
func (p PrivateLinkResourceList) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "nextLink", p.NextLink)
	populate(objectMap, "value", p.Value)
	return json.Marshal(objectMap)
}

// PrivateLinkResourceProperties - Private link resource properties
type PrivateLinkResourceProperties struct {
	// Group Id of the private link resource
	GroupID *string `json:"groupId,omitempty"`

	// Required members of the private link resource
	RequiredMembers []*string `json:"requiredMembers,omitempty"`

	// Required private DNS zone names
	RequiredZoneNames []*string `json:"requiredZoneNames,omitempty"`

	// The list of resources that are onboarded to private link service
	ShareablePrivateLinkResourceTypes []*ShareablePrivateLinkResourceType `json:"shareablePrivateLinkResourceTypes,omitempty"`
}

// MarshalJSON implements the json.Marshaller interface for type PrivateLinkResourceProperties.
func (p PrivateLinkResourceProperties) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "groupId", p.GroupID)
	populate(objectMap, "requiredMembers", p.RequiredMembers)
	populate(objectMap, "requiredZoneNames", p.RequiredZoneNames)
	populate(objectMap, "shareablePrivateLinkResourceTypes", p.ShareablePrivateLinkResourceTypes)
	return json.Marshal(objectMap)
}

// PrivateLinkServiceConnectionState - Connection state of the private endpoint connection
type PrivateLinkServiceConnectionState struct {
	// A message indicating if changes on the service provider require any updates on the consumer.
	ActionsRequired *string `json:"actionsRequired,omitempty"`

	// The reason for approval/rejection of the connection.
	Description *string `json:"description,omitempty"`

	// Indicates whether the connection has been Approved/Rejected/Removed by the owner of the service.
	Status *PrivateLinkServiceConnectionStatus `json:"status,omitempty"`
}

// ProxyResource - The resource model definition for a ARM proxy resource. It will have everything other than required location and tags
type ProxyResource struct {
	Resource
}

func (p ProxyResource) marshalInternal(objectMap map[string]interface{}) {
	p.Resource.marshalInternal(objectMap)
}

// RegenerateKeyParameters - Parameters describes the request to regenerate access keys
type RegenerateKeyParameters struct {
	// The keyType to regenerate. Must be either 'primary' or 'secondary'(case-insensitive).
	KeyType *KeyType `json:"keyType,omitempty"`
}

// Resource - The core properties of ARM resources.
type Resource struct {
	// READ-ONLY; Fully qualified resource Id for the resource.
	ID *string `json:"id,omitempty" azure:"ro"`

	// READ-ONLY; The name of the resource.
	Name *string `json:"name,omitempty" azure:"ro"`

	// READ-ONLY; The type of the resource - e.g. "Microsoft.SignalRService/SignalR"
	Type *string `json:"type,omitempty" azure:"ro"`
}

// MarshalJSON implements the json.Marshaller interface for type Resource.
func (r Resource) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	r.marshalInternal(objectMap)
	return json.Marshal(objectMap)
}

func (r Resource) marshalInternal(objectMap map[string]interface{}) {
	populate(objectMap, "id", r.ID)
	populate(objectMap, "name", r.Name)
	populate(objectMap, "type", r.Type)
}

// ResourceLogCategory - Resource log category configuration of a Microsoft.SignalRService resource.
type ResourceLogCategory struct {
	// Indicates whether or the resource log category is enabled. Available values: true, false. Case insensitive.
	Enabled *string `json:"enabled,omitempty"`

	// Gets or sets the resource log category's name. Available values: ConnectivityLogs, MessagingLogs. Case insensitive.
	Name *string `json:"name,omitempty"`
}

// ResourceLogConfiguration - Resource log configuration of a Microsoft.SignalRService resource.
type ResourceLogConfiguration struct {
	// Gets or sets the list of category configurations.
	Categories []*ResourceLogCategory `json:"categories,omitempty"`
}

// MarshalJSON implements the json.Marshaller interface for type ResourceLogConfiguration.
func (r ResourceLogConfiguration) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "categories", r.Categories)
	return json.Marshal(objectMap)
}

// ResourceSKU - The billing information of the resource.
type ResourceSKU struct {
	// REQUIRED; The name of the SKU. Required.
	// Allowed values: StandardS1, FreeF1
	Name *string `json:"name,omitempty"`

	// Optional, integer. The unit count of the resource. 1 by default.
	// If present, following values are allowed: Free: 1 Standard: 1,2,5,10,20,50,100
	Capacity *int32 `json:"capacity,omitempty"`

	// Optional tier of this particular SKU. 'Standard' or 'Free'.
	// Basic is deprecated, use Standard instead.
	Tier *SignalRSKUTier `json:"tier,omitempty"`

	// READ-ONLY; Not used. Retained for future use.
	Family *string `json:"family,omitempty" azure:"ro"`

	// READ-ONLY; Not used. Retained for future use.
	Size *string `json:"size,omitempty" azure:"ro"`
}

// SKU - Describes an available sku."
type SKU struct {
	// READ-ONLY; Specifies the unit of the resource.
	Capacity *SKUCapacity `json:"capacity,omitempty" azure:"ro"`

	// READ-ONLY; The resource type that this object applies to
	ResourceType *string `json:"resourceType,omitempty" azure:"ro"`

	// READ-ONLY; The exact set of keys that define this sku.
	SKU *ResourceSKU `json:"sku,omitempty" azure:"ro"`
}

// SKUCapacity - Describes scaling information of a sku.
type SKUCapacity struct {
	// READ-ONLY; Allows capacity value list.
	AllowedValues []*int32 `json:"allowedValues,omitempty" azure:"ro"`

	// READ-ONLY; The default capacity.
	Default *int32 `json:"default,omitempty" azure:"ro"`

	// READ-ONLY; The highest permitted capacity for this resource
	Maximum *int32 `json:"maximum,omitempty" azure:"ro"`

	// READ-ONLY; The lowest permitted capacity for this resource
	Minimum *int32 `json:"minimum,omitempty" azure:"ro"`

	// READ-ONLY; The scale type applicable to the sku.
	ScaleType *ScaleType `json:"scaleType,omitempty" azure:"ro"`
}

// MarshalJSON implements the json.Marshaller interface for type SKUCapacity.
func (s SKUCapacity) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "allowedValues", s.AllowedValues)
	populate(objectMap, "default", s.Default)
	populate(objectMap, "maximum", s.Maximum)
	populate(objectMap, "minimum", s.Minimum)
	populate(objectMap, "scaleType", s.ScaleType)
	return json.Marshal(objectMap)
}

// SKUList - The list skus operation response
type SKUList struct {
	// READ-ONLY; The URL the client should use to fetch the next page (per server side paging). It's null for now, added for future use.
	NextLink *string `json:"nextLink,omitempty" azure:"ro"`

	// READ-ONLY; The list of skus available for the resource.
	Value []*SKU `json:"value,omitempty" azure:"ro"`
}

// MarshalJSON implements the json.Marshaller interface for type SKUList.
func (s SKUList) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "nextLink", s.NextLink)
	populate(objectMap, "value", s.Value)
	return json.Marshal(objectMap)
}

// ServerlessUpstreamSettings - The settings for the Upstream when the service is in server-less mode.
type ServerlessUpstreamSettings struct {
	// Gets or sets the list of Upstream URL templates. Order matters, and the first matching template takes effects.
	Templates []*UpstreamTemplate `json:"templates,omitempty"`
}

// MarshalJSON implements the json.Marshaller interface for type ServerlessUpstreamSettings.
func (s ServerlessUpstreamSettings) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "templates", s.Templates)
	return json.Marshal(objectMap)
}

// ServiceSpecification - An object that describes a specification.
type ServiceSpecification struct {
	// Specifications of the Logs for Azure Monitoring.
	LogSpecifications []*LogSpecification `json:"logSpecifications,omitempty"`

	// Specifications of the Metrics for Azure Monitoring.
	MetricSpecifications []*MetricSpecification `json:"metricSpecifications,omitempty"`
}

// MarshalJSON implements the json.Marshaller interface for type ServiceSpecification.
func (s ServiceSpecification) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "logSpecifications", s.LogSpecifications)
	populate(objectMap, "metricSpecifications", s.MetricSpecifications)
	return json.Marshal(objectMap)
}

// ShareablePrivateLinkResourceProperties - Describes the properties of a resource type that has been onboarded to private link service
type ShareablePrivateLinkResourceProperties struct {
	// The description of the resource type that has been onboarded to private link service
	Description *string `json:"description,omitempty"`

	// The resource provider group id for the resource that has been onboarded to private link service
	GroupID *string `json:"groupId,omitempty"`

	// The resource provider type for the resource that has been onboarded to private link service
	Type *string `json:"type,omitempty"`
}

// ShareablePrivateLinkResourceType - Describes a resource type that has been onboarded to private link service
type ShareablePrivateLinkResourceType struct {
	// The name of the resource type that has been onboarded to private link service
	Name *string `json:"name,omitempty"`

	// Describes the properties of a resource type that has been onboarded to private link service
	Properties *ShareablePrivateLinkResourceProperties `json:"properties,omitempty"`
}

// SharedPrivateLinkResource - Describes a Shared Private Link Resource
type SharedPrivateLinkResource struct {
	ProxyResource
	// Describes the properties of a Shared Private Link Resource
	Properties *SharedPrivateLinkResourceProperties `json:"properties,omitempty"`

	// READ-ONLY; Metadata pertaining to creation and last modification of the resource.
	SystemData *SystemData `json:"systemData,omitempty" azure:"ro"`
}

// MarshalJSON implements the json.Marshaller interface for type SharedPrivateLinkResource.
func (s SharedPrivateLinkResource) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	s.ProxyResource.marshalInternal(objectMap)
	populate(objectMap, "properties", s.Properties)
	populate(objectMap, "systemData", s.SystemData)
	return json.Marshal(objectMap)
}

// SharedPrivateLinkResourceList - A list of shared private link resources
type SharedPrivateLinkResourceList struct {
	// Request URL that can be used to query next page of private endpoint connections. Returned when the total number of requested private endpoint connections
	// exceed maximum page size.
	NextLink *string `json:"nextLink,omitempty"`

	// The list of the shared private link resources
	Value []*SharedPrivateLinkResource `json:"value,omitempty"`
}

// MarshalJSON implements the json.Marshaller interface for type SharedPrivateLinkResourceList.
func (s SharedPrivateLinkResourceList) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "nextLink", s.NextLink)
	populate(objectMap, "value", s.Value)
	return json.Marshal(objectMap)
}

// SharedPrivateLinkResourceProperties - Describes the properties of an existing Shared Private Link Resource
type SharedPrivateLinkResourceProperties struct {
	// REQUIRED; The group id from the provider of resource the shared private link resource is for
	GroupID *string `json:"groupId,omitempty"`

	// REQUIRED; The resource id of the resource the shared private link resource is for
	PrivateLinkResourceID *string `json:"privateLinkResourceId,omitempty"`

	// The request message for requesting approval of the shared private link resource
	RequestMessage *string `json:"requestMessage,omitempty"`

	// READ-ONLY; Provisioning state of the shared private link resource
	ProvisioningState *ProvisioningState `json:"provisioningState,omitempty" azure:"ro"`

	// READ-ONLY; Status of the shared private link resource
	Status *SharedPrivateLinkResourceStatus `json:"status,omitempty" azure:"ro"`
}

// SignalRBeginCreateOrUpdateOptions contains the optional parameters for the SignalR.BeginCreateOrUpdate method.
type SignalRBeginCreateOrUpdateOptions struct {
	// placeholder for future optional parameters
}

// SignalRBeginDeleteOptions contains the optional parameters for the SignalR.BeginDelete method.
type SignalRBeginDeleteOptions struct {
	// placeholder for future optional parameters
}

// SignalRBeginRegenerateKeyOptions contains the optional parameters for the SignalR.BeginRegenerateKey method.
type SignalRBeginRegenerateKeyOptions struct {
	// placeholder for future optional parameters
}

// SignalRBeginRestartOptions contains the optional parameters for the SignalR.BeginRestart method.
type SignalRBeginRestartOptions struct {
	// placeholder for future optional parameters
}

// SignalRBeginUpdateOptions contains the optional parameters for the SignalR.BeginUpdate method.
type SignalRBeginUpdateOptions struct {
	// placeholder for future optional parameters
}

// SignalRCheckNameAvailabilityOptions contains the optional parameters for the SignalR.CheckNameAvailability method.
type SignalRCheckNameAvailabilityOptions struct {
	// placeholder for future optional parameters
}

// SignalRCorsSettings - Cross-Origin Resource Sharing (CORS) settings.
type SignalRCorsSettings struct {
	// Gets or sets the list of origins that should be allowed to make cross-origin calls (for example: http://example.com:12345). Use "*" to allow all. If
	// omitted, allow all by default.
	AllowedOrigins []*string `json:"allowedOrigins,omitempty"`
}

// MarshalJSON implements the json.Marshaller interface for type SignalRCorsSettings.
func (s SignalRCorsSettings) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "allowedOrigins", s.AllowedOrigins)
	return json.Marshal(objectMap)
}

// SignalRFeature - Feature of a resource, which controls the runtime behavior.
type SignalRFeature struct {
	// REQUIRED; FeatureFlags is the supported features of Azure SignalR service.
	// * ServiceMode: Flag for backend server for SignalR service. Values allowed: "Default": have your own backend server; "Serverless": your application doesn't
	// have a backend server; "Classic": for
	// backward compatibility. Support both Default and Serverless mode but not recommended; "PredefinedOnly": for future use.
	// * EnableConnectivityLogs: "true"/"false", to enable/disable the connectivity log category respectively.
	// * EnableMessagingLogs: "true"/"false", to enable/disable the connectivity log category respectively.
	// * EnableLiveTrace: Live Trace allows you to know what's happening inside Azure SignalR service, it will give you live traces in real time, it will be
	// helpful when you developing your own Azure
	// SignalR based web application or self-troubleshooting some issues. Please note that live traces are counted as outbound messages that will be charged.
	// Values allowed: "true"/"false", to
	// enable/disable live trace feature.
	Flag *FeatureFlags `json:"flag,omitempty"`

	// REQUIRED; Value of the feature flag. See Azure SignalR service document https://docs.microsoft.com/azure/azure-signalr/ for allowed values.
	Value *string `json:"value,omitempty"`

	// Optional properties related to this feature.
	Properties map[string]*string `json:"properties,omitempty"`
}

// MarshalJSON implements the json.Marshaller interface for type SignalRFeature.
func (s SignalRFeature) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "flag", s.Flag)
	populate(objectMap, "properties", s.Properties)
	populate(objectMap, "value", s.Value)
	return json.Marshal(objectMap)
}

// SignalRGetOptions contains the optional parameters for the SignalR.Get method.
type SignalRGetOptions struct {
	// placeholder for future optional parameters
}

// SignalRKeys - A class represents the access keys of the resource.
type SignalRKeys struct {
	// Connection string constructed via the primaryKey
	PrimaryConnectionString *string `json:"primaryConnectionString,omitempty"`

	// The primary access key.
	PrimaryKey *string `json:"primaryKey,omitempty"`

	// Connection string constructed via the secondaryKey
	SecondaryConnectionString *string `json:"secondaryConnectionString,omitempty"`

	// The secondary access key.
	SecondaryKey *string `json:"secondaryKey,omitempty"`
}

// SignalRListByResourceGroupOptions contains the optional parameters for the SignalR.ListByResourceGroup method.
type SignalRListByResourceGroupOptions struct {
	// placeholder for future optional parameters
}

// SignalRListBySubscriptionOptions contains the optional parameters for the SignalR.ListBySubscription method.
type SignalRListBySubscriptionOptions struct {
	// placeholder for future optional parameters
}

// SignalRListKeysOptions contains the optional parameters for the SignalR.ListKeys method.
type SignalRListKeysOptions struct {
	// placeholder for future optional parameters
}

// SignalRListSKUsOptions contains the optional parameters for the SignalR.ListSKUs method.
type SignalRListSKUsOptions struct {
	// placeholder for future optional parameters
}

// SignalRNetworkACLs - Network ACLs for the resource
type SignalRNetworkACLs struct {
	// Default action when no other rule matches
	DefaultAction *ACLAction `json:"defaultAction,omitempty"`

	// ACLs for requests from private endpoints
	PrivateEndpoints []*PrivateEndpointACL `json:"privateEndpoints,omitempty"`

	// ACL for requests from public network
	PublicNetwork *NetworkACL `json:"publicNetwork,omitempty"`
}

// MarshalJSON implements the json.Marshaller interface for type SignalRNetworkACLs.
func (s SignalRNetworkACLs) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "defaultAction", s.DefaultAction)
	populate(objectMap, "privateEndpoints", s.PrivateEndpoints)
	populate(objectMap, "publicNetwork", s.PublicNetwork)
	return json.Marshal(objectMap)
}

// SignalRPrivateEndpointConnectionsBeginDeleteOptions contains the optional parameters for the SignalRPrivateEndpointConnections.BeginDelete method.
type SignalRPrivateEndpointConnectionsBeginDeleteOptions struct {
	// placeholder for future optional parameters
}

// SignalRPrivateEndpointConnectionsGetOptions contains the optional parameters for the SignalRPrivateEndpointConnections.Get method.
type SignalRPrivateEndpointConnectionsGetOptions struct {
	// placeholder for future optional parameters
}

// SignalRPrivateEndpointConnectionsListOptions contains the optional parameters for the SignalRPrivateEndpointConnections.List method.
type SignalRPrivateEndpointConnectionsListOptions struct {
	// placeholder for future optional parameters
}

// SignalRPrivateEndpointConnectionsUpdateOptions contains the optional parameters for the SignalRPrivateEndpointConnections.Update method.
type SignalRPrivateEndpointConnectionsUpdateOptions struct {
	// placeholder for future optional parameters
}

// SignalRPrivateLinkResourcesListOptions contains the optional parameters for the SignalRPrivateLinkResources.List method.
type SignalRPrivateLinkResourcesListOptions struct {
	// placeholder for future optional parameters
}

// SignalRProperties - A class that describes the properties of the resource
type SignalRProperties struct {
	// Cross-Origin Resource Sharing (CORS) settings.
	Cors *SignalRCorsSettings `json:"cors,omitempty"`

	// DisableLocalAuth Enable or disable aad auth When set as true, connection with AuthType=aad won't work.
	DisableAADAuth *bool `json:"disableAadAuth,omitempty"`

	// DisableLocalAuth Enable or disable local auth with AccessKey When set as true, connection with AccessKey=xxx won't work.
	DisableLocalAuth *bool `json:"disableLocalAuth,omitempty"`

	// List of the featureFlags.
	// FeatureFlags that are not included in the parameters for the update operation will not be modified. And the response will only include featureFlags that
	// are explicitly set. When a featureFlag is not
	// explicitly set, its globally default value will be used But keep in mind, the default value doesn't mean "false". It varies in terms of different FeatureFlags.
	Features []*SignalRFeature `json:"features,omitempty"`

	// Network ACLs
	NetworkACLs *SignalRNetworkACLs `json:"networkACLs,omitempty"`

	// Enable or disable public network access. Default to "Enabled". When it's Enabled, network ACLs still apply. When it's Disabled, public network access
	// is always disabled no matter what you set in
	// network ACLs.
	PublicNetworkAccess *string `json:"publicNetworkAccess,omitempty"`

	// Resource log configuration of a Microsoft.SignalRService resource. If resourceLogConfiguration isn't null or empty, it will override options "EnableConnectivityLog"
	// and "EnableMessagingLogs" in
	// features. Otherwise, use options "EnableConnectivityLog" and "EnableMessagingLogs" in features.
	ResourceLogConfiguration *ResourceLogConfiguration `json:"resourceLogConfiguration,omitempty"`

	// TLS settings.
	TLS *SignalRTLSSettings `json:"tls,omitempty"`

	// Upstream settings when the service is in server-less mode.
	Upstream *ServerlessUpstreamSettings `json:"upstream,omitempty"`

	// READ-ONLY; The publicly accessible IP of the resource.
	ExternalIP *string `json:"externalIP,omitempty" azure:"ro"`

	// READ-ONLY; FQDN of the service instance.
	HostName *string `json:"hostName,omitempty" azure:"ro"`

	// READ-ONLY; Deprecated.
	HostNamePrefix *string `json:"hostNamePrefix,omitempty" azure:"ro"`

	// READ-ONLY; Private endpoint connections to the resource.
	PrivateEndpointConnections []*PrivateEndpointConnection `json:"privateEndpointConnections,omitempty" azure:"ro"`

	// READ-ONLY; Provisioning state of the resource.
	ProvisioningState *ProvisioningState `json:"provisioningState,omitempty" azure:"ro"`

	// READ-ONLY; The publicly accessible port of the resource which is designed for browser/client side usage.
	PublicPort *int32 `json:"publicPort,omitempty" azure:"ro"`

	// READ-ONLY; The publicly accessible port of the resource which is designed for customer server side usage.
	ServerPort *int32 `json:"serverPort,omitempty" azure:"ro"`

	// READ-ONLY; The list of shared private link resources.
	SharedPrivateLinkResources []*SharedPrivateLinkResource `json:"sharedPrivateLinkResources,omitempty" azure:"ro"`

	// READ-ONLY; Version of the resource. Probably you need the same or higher version of client SDKs.
	Version *string `json:"version,omitempty" azure:"ro"`
}

// MarshalJSON implements the json.Marshaller interface for type SignalRProperties.
func (s SignalRProperties) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "cors", s.Cors)
	populate(objectMap, "disableAadAuth", s.DisableAADAuth)
	populate(objectMap, "disableLocalAuth", s.DisableLocalAuth)
	populate(objectMap, "externalIP", s.ExternalIP)
	populate(objectMap, "features", s.Features)
	populate(objectMap, "hostName", s.HostName)
	populate(objectMap, "hostNamePrefix", s.HostNamePrefix)
	populate(objectMap, "networkACLs", s.NetworkACLs)
	populate(objectMap, "privateEndpointConnections", s.PrivateEndpointConnections)
	populate(objectMap, "provisioningState", s.ProvisioningState)
	populate(objectMap, "publicNetworkAccess", s.PublicNetworkAccess)
	populate(objectMap, "publicPort", s.PublicPort)
	populate(objectMap, "resourceLogConfiguration", s.ResourceLogConfiguration)
	populate(objectMap, "serverPort", s.ServerPort)
	populate(objectMap, "sharedPrivateLinkResources", s.SharedPrivateLinkResources)
	populate(objectMap, "tls", s.TLS)
	populate(objectMap, "upstream", s.Upstream)
	populate(objectMap, "version", s.Version)
	return json.Marshal(objectMap)
}

// SignalRResource - A class represent a resource.
type SignalRResource struct {
	TrackedResource
	// The managed identity response
	Identity *ManagedIdentity `json:"identity,omitempty"`

	// The kind of the service - e.g. "SignalR" for "Microsoft.SignalRService/SignalR"
	Kind *ServiceKind `json:"kind,omitempty"`

	// Settings used to provision or configure the resource
	Properties *SignalRProperties `json:"properties,omitempty"`

	// The billing information of the resource.(e.g. Free, Standard)
	SKU *ResourceSKU `json:"sku,omitempty"`

	// READ-ONLY; Metadata pertaining to creation and last modification of the resource.
	SystemData *SystemData `json:"systemData,omitempty" azure:"ro"`
}

// MarshalJSON implements the json.Marshaller interface for type SignalRResource.
func (s SignalRResource) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	s.TrackedResource.marshalInternal(objectMap)
	populate(objectMap, "identity", s.Identity)
	populate(objectMap, "kind", s.Kind)
	populate(objectMap, "properties", s.Properties)
	populate(objectMap, "sku", s.SKU)
	populate(objectMap, "systemData", s.SystemData)
	return json.Marshal(objectMap)
}

// SignalRResourceList - Object that includes an array of resources and a possible link for next set.
type SignalRResourceList struct {
	// The URL the client should use to fetch the next page (per server side paging). It's null for now, added for future use.
	NextLink *string `json:"nextLink,omitempty"`

	// List of the resources
	Value []*SignalRResource `json:"value,omitempty"`
}

// MarshalJSON implements the json.Marshaller interface for type SignalRResourceList.
func (s SignalRResourceList) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "nextLink", s.NextLink)
	populate(objectMap, "value", s.Value)
	return json.Marshal(objectMap)
}

// SignalRSharedPrivateLinkResourcesBeginCreateOrUpdateOptions contains the optional parameters for the SignalRSharedPrivateLinkResources.BeginCreateOrUpdate
// method.
type SignalRSharedPrivateLinkResourcesBeginCreateOrUpdateOptions struct {
	// placeholder for future optional parameters
}

// SignalRSharedPrivateLinkResourcesBeginDeleteOptions contains the optional parameters for the SignalRSharedPrivateLinkResources.BeginDelete method.
type SignalRSharedPrivateLinkResourcesBeginDeleteOptions struct {
	// placeholder for future optional parameters
}

// SignalRSharedPrivateLinkResourcesGetOptions contains the optional parameters for the SignalRSharedPrivateLinkResources.Get method.
type SignalRSharedPrivateLinkResourcesGetOptions struct {
	// placeholder for future optional parameters
}

// SignalRSharedPrivateLinkResourcesListOptions contains the optional parameters for the SignalRSharedPrivateLinkResources.List method.
type SignalRSharedPrivateLinkResourcesListOptions struct {
	// placeholder for future optional parameters
}

// SignalRTLSSettings - TLS settings for the resource
type SignalRTLSSettings struct {
	// Request client certificate during TLS handshake if enabled
	ClientCertEnabled *bool `json:"clientCertEnabled,omitempty"`
}

// SignalRUsage - Object that describes a specific usage of the resources.
type SignalRUsage struct {
	// Current value for the usage quota.
	CurrentValue *int64 `json:"currentValue,omitempty"`

	// Fully qualified ARM resource id
	ID *string `json:"id,omitempty"`

	// The maximum permitted value for the usage quota. If there is no limit, this value will be -1.
	Limit *int64 `json:"limit,omitempty"`

	// Localizable String object containing the name and a localized value.
	Name *SignalRUsageName `json:"name,omitempty"`

	// Representing the units of the usage quota. Possible values are: Count, Bytes, Seconds, Percent, CountPerSecond, BytesPerSecond.
	Unit *string `json:"unit,omitempty"`
}

// SignalRUsageList - Object that includes an array of the resource usages and a possible link for next set.
type SignalRUsageList struct {
	// The URL the client should use to fetch the next page (per server side paging). It's null for now, added for future use.
	NextLink *string `json:"nextLink,omitempty"`

	// List of the resource usages
	Value []*SignalRUsage `json:"value,omitempty"`
}

// MarshalJSON implements the json.Marshaller interface for type SignalRUsageList.
func (s SignalRUsageList) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "nextLink", s.NextLink)
	populate(objectMap, "value", s.Value)
	return json.Marshal(objectMap)
}

// SignalRUsageName - Localizable String object containing the name and a localized value.
type SignalRUsageName struct {
	// Localized name of the usage.
	LocalizedValue *string `json:"localizedValue,omitempty"`

	// The identifier of the usage.
	Value *string `json:"value,omitempty"`
}

// SystemData - Metadata pertaining to creation and last modification of the resource.
type SystemData struct {
	// The timestamp of resource creation (UTC).
	CreatedAt *time.Time `json:"createdAt,omitempty"`

	// The identity that created the resource.
	CreatedBy *string `json:"createdBy,omitempty"`

	// The type of identity that created the resource.
	CreatedByType *CreatedByType `json:"createdByType,omitempty"`

	// The timestamp of resource last modification (UTC)
	LastModifiedAt *time.Time `json:"lastModifiedAt,omitempty"`

	// The identity that last modified the resource.
	LastModifiedBy *string `json:"lastModifiedBy,omitempty"`

	// The type of identity that last modified the resource.
	LastModifiedByType *CreatedByType `json:"lastModifiedByType,omitempty"`
}

// MarshalJSON implements the json.Marshaller interface for type SystemData.
func (s SystemData) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populateTimeRFC3339(objectMap, "createdAt", s.CreatedAt)
	populate(objectMap, "createdBy", s.CreatedBy)
	populate(objectMap, "createdByType", s.CreatedByType)
	populateTimeRFC3339(objectMap, "lastModifiedAt", s.LastModifiedAt)
	populate(objectMap, "lastModifiedBy", s.LastModifiedBy)
	populate(objectMap, "lastModifiedByType", s.LastModifiedByType)
	return json.Marshal(objectMap)
}

// UnmarshalJSON implements the json.Unmarshaller interface for type SystemData.
func (s *SystemData) UnmarshalJSON(data []byte) error {
	var rawMsg map[string]json.RawMessage
	if err := json.Unmarshal(data, &rawMsg); err != nil {
		return err
	}
	for key, val := range rawMsg {
		var err error
		switch key {
		case "createdAt":
			err = unpopulateTimeRFC3339(val, &s.CreatedAt)
			delete(rawMsg, key)
		case "createdBy":
			err = unpopulate(val, &s.CreatedBy)
			delete(rawMsg, key)
		case "createdByType":
			err = unpopulate(val, &s.CreatedByType)
			delete(rawMsg, key)
		case "lastModifiedAt":
			err = unpopulateTimeRFC3339(val, &s.LastModifiedAt)
			delete(rawMsg, key)
		case "lastModifiedBy":
			err = unpopulate(val, &s.LastModifiedBy)
			delete(rawMsg, key)
		case "lastModifiedByType":
			err = unpopulate(val, &s.LastModifiedByType)
			delete(rawMsg, key)
		}
		if err != nil {
			return err
		}
	}
	return nil
}

// TrackedResource - The resource model definition for a ARM tracked top level resource.
type TrackedResource struct {
	Resource
	// The GEO location of the resource. e.g. West US | East US | North Central US | South Central US.
	Location *string `json:"location,omitempty"`

	// Tags of the service which is a list of key value pairs that describe the resource.
	Tags map[string]*string `json:"tags,omitempty"`
}

// MarshalJSON implements the json.Marshaller interface for type TrackedResource.
func (t TrackedResource) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	t.marshalInternal(objectMap)
	return json.Marshal(objectMap)
}

func (t TrackedResource) marshalInternal(objectMap map[string]interface{}) {
	t.Resource.marshalInternal(objectMap)
	populate(objectMap, "location", t.Location)
	populate(objectMap, "tags", t.Tags)
}

// UpstreamAuthSettings - Upstream auth settings.
type UpstreamAuthSettings struct {
	// Gets or sets the managed identity settings. It's required if the auth type is set to ManagedIdentity.
	ManagedIdentity *ManagedIdentitySettings `json:"managedIdentity,omitempty"`

	// Gets or sets the type of auth. None or ManagedIdentity is supported now.
	Type *UpstreamAuthType `json:"type,omitempty"`
}

// UpstreamTemplate - Upstream template item settings. It defines the Upstream URL of the incoming requests. The template defines the pattern of the event,
// the hub or the category of the incoming request that matches
// current URL template.
type UpstreamTemplate struct {
	// REQUIRED; Gets or sets the Upstream URL template. You can use 3 predefined parameters {hub}, {category} {event} inside the template, the value of the
	// Upstream URL is dynamically calculated when the client
	// request comes in. For example, if the urlTemplate is http://example.com/{hub}/api/{event}, with a client request from hub chat connects, it will first
	// POST to this URL:
	// http://example.com/chat/api/connect.
	URLTemplate *string `json:"urlTemplate,omitempty"`

	// Gets or sets the auth settings for an upstream. If not set, no auth is used for upstream messages.
	Auth *UpstreamAuthSettings `json:"auth,omitempty"`

	// Gets or sets the matching pattern for category names. If not set, it matches any category. There are 3 kind of patterns supported: 1. "*", it to matches
	// any category name 2. Combine multiple
	// categories with ",", for example "connections,messages", it matches category "connections" and "messages" 3. The single category name, for example, "connections",
	// it matches the category "connections"
	CategoryPattern *string `json:"categoryPattern,omitempty"`

	// Gets or sets the matching pattern for event names. If not set, it matches any event. There are 3 kind of patterns supported: 1. "*", it to matches any
	// event name 2. Combine multiple events with ",",
	// for example "connect,disconnect", it matches event "connect" and "disconnect" 3. The single event name, for example, "connect", it matches "connect"
	EventPattern *string `json:"eventPattern,omitempty"`

	// Gets or sets the matching pattern for hub names. If not set, it matches any hub. There are 3 kind of patterns supported: 1. "*", it to matches any hub
	// name 2. Combine multiple hubs with ",", for
	// example "hub1,hub2", it matches "hub1" and "hub2" 3. The single hub name, for example, "hub1", it matches "hub1"
	HubPattern *string `json:"hubPattern,omitempty"`
}

// UsagesListOptions contains the optional parameters for the Usages.List method.
type UsagesListOptions struct {
	// placeholder for future optional parameters
}

// UserAssignedIdentityProperty - Properties of user assigned identity.
type UserAssignedIdentityProperty struct {
	// READ-ONLY; Get the client id for the user assigned identity
	ClientID *string `json:"clientId,omitempty" azure:"ro"`

	// READ-ONLY; Get the principal id for the user assigned identity
	PrincipalID *string `json:"principalId,omitempty" azure:"ro"`
}

func populate(m map[string]interface{}, k string, v interface{}) {
	if v == nil {
		return
	} else if azcore.IsNullValue(v) {
		m[k] = nil
	} else if !reflect.ValueOf(v).IsNil() {
		m[k] = v
	}
}

func unpopulate(data json.RawMessage, v interface{}) error {
	if data == nil {
		return nil
	}
	return json.Unmarshal(data, v)
}
