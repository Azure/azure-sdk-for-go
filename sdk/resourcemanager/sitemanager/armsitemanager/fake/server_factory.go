// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) Go Code Generator. DO NOT EDIT.

package fake

import (
	"errors"
	"fmt"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/runtime"
	"net/http"
	"strings"
	"sync"
)

// ServerFactory is a fake server for instances of the armsitemanager.ClientFactory type.
type ServerFactory struct {
	// SitesByServiceGroupServer contains the fakes for client SitesByServiceGroupClient
	SitesByServiceGroupServer SitesByServiceGroupServer

	// SitesBySubscriptionServer contains the fakes for client SitesBySubscriptionClient
	SitesBySubscriptionServer SitesBySubscriptionServer

	// SitesServer contains the fakes for client SitesClient
	SitesServer SitesServer
}

// NewServerFactoryTransport creates a new instance of ServerFactoryTransport with the provided implementation.
// The returned ServerFactoryTransport instance is connected to an instance of armsitemanager.ClientFactory via the
// azcore.ClientOptions.Transporter field in the client's constructor parameters.
func NewServerFactoryTransport(srv *ServerFactory) *ServerFactoryTransport {
	return &ServerFactoryTransport{
		srv: srv,
	}
}

// ServerFactoryTransport connects instances of armsitemanager.ClientFactory to instances of ServerFactory.
// Don't use this type directly, use NewServerFactoryTransport instead.
type ServerFactoryTransport struct {
	srv                         *ServerFactory
	trMu                        sync.Mutex
	trSitesByServiceGroupServer *SitesByServiceGroupServerTransport
	trSitesBySubscriptionServer *SitesBySubscriptionServerTransport
	trSitesServer               *SitesServerTransport
}

// Do implements the policy.Transporter interface for ServerFactoryTransport.
func (s *ServerFactoryTransport) Do(req *http.Request) (*http.Response, error) {
	rawMethod := req.Context().Value(runtime.CtxAPINameKey{})
	method, ok := rawMethod.(string)
	if !ok {
		return nil, nonRetriableError{errors.New("unable to dispatch request, missing value for CtxAPINameKey")}
	}

	client := method[:strings.Index(method, ".")]
	var resp *http.Response
	var err error

	switch client {
	case "SitesByServiceGroupClient":
		initServer(s, &s.trSitesByServiceGroupServer, func() *SitesByServiceGroupServerTransport {
			return NewSitesByServiceGroupServerTransport(&s.srv.SitesByServiceGroupServer)
		})
		resp, err = s.trSitesByServiceGroupServer.Do(req)
	case "SitesBySubscriptionClient":
		initServer(s, &s.trSitesBySubscriptionServer, func() *SitesBySubscriptionServerTransport {
			return NewSitesBySubscriptionServerTransport(&s.srv.SitesBySubscriptionServer)
		})
		resp, err = s.trSitesBySubscriptionServer.Do(req)
	case "SitesClient":
		initServer(s, &s.trSitesServer, func() *SitesServerTransport { return NewSitesServerTransport(&s.srv.SitesServer) })
		resp, err = s.trSitesServer.Do(req)
	default:
		err = fmt.Errorf("unhandled client %s", client)
	}

	if err != nil {
		return nil, err
	}

	return resp, nil
}

func initServer[T any](s *ServerFactoryTransport, dst **T, src func() *T) {
	s.trMu.Lock()
	if *dst == nil {
		*dst = src()
	}
	s.trMu.Unlock()
}
