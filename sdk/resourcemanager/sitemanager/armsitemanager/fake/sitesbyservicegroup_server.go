// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) Go Code Generator. DO NOT EDIT.

package fake

import (
	"context"
	"errors"
	"fmt"
	azfake "github.com/Azure/azure-sdk-for-go/sdk/azcore/fake"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/fake/server"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/runtime"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/to"
	"github.com/Azure/azure-sdk-for-go/sdk/resourcemanager/sitemanager/armsitemanager"
	"net/http"
	"net/url"
	"regexp"
)

// SitesByServiceGroupServer is a fake server for instances of the armsitemanager.SitesByServiceGroupClient type.
type SitesByServiceGroupServer struct {
	// BeginCreateOrUpdate is the fake for method SitesByServiceGroupClient.BeginCreateOrUpdate
	// HTTP status codes to indicate success: http.StatusOK, http.StatusCreated
	BeginCreateOrUpdate func(ctx context.Context, servicegroupName string, siteName string, resource armsitemanager.Site, options *armsitemanager.SitesByServiceGroupClientBeginCreateOrUpdateOptions) (resp azfake.PollerResponder[armsitemanager.SitesByServiceGroupClientCreateOrUpdateResponse], errResp azfake.ErrorResponder)

	// Delete is the fake for method SitesByServiceGroupClient.Delete
	// HTTP status codes to indicate success: http.StatusOK, http.StatusNoContent
	Delete func(ctx context.Context, servicegroupName string, siteName string, options *armsitemanager.SitesByServiceGroupClientDeleteOptions) (resp azfake.Responder[armsitemanager.SitesByServiceGroupClientDeleteResponse], errResp azfake.ErrorResponder)

	// Get is the fake for method SitesByServiceGroupClient.Get
	// HTTP status codes to indicate success: http.StatusOK
	Get func(ctx context.Context, servicegroupName string, siteName string, options *armsitemanager.SitesByServiceGroupClientGetOptions) (resp azfake.Responder[armsitemanager.SitesByServiceGroupClientGetResponse], errResp azfake.ErrorResponder)

	// NewListByServiceGroupPager is the fake for method SitesByServiceGroupClient.NewListByServiceGroupPager
	// HTTP status codes to indicate success: http.StatusOK
	NewListByServiceGroupPager func(servicegroupName string, options *armsitemanager.SitesByServiceGroupClientListByServiceGroupOptions) (resp azfake.PagerResponder[armsitemanager.SitesByServiceGroupClientListByServiceGroupResponse])

	// Update is the fake for method SitesByServiceGroupClient.Update
	// HTTP status codes to indicate success: http.StatusOK
	Update func(ctx context.Context, servicegroupName string, siteName string, properties armsitemanager.SiteUpdate, options *armsitemanager.SitesByServiceGroupClientUpdateOptions) (resp azfake.Responder[armsitemanager.SitesByServiceGroupClientUpdateResponse], errResp azfake.ErrorResponder)
}

// NewSitesByServiceGroupServerTransport creates a new instance of SitesByServiceGroupServerTransport with the provided implementation.
// The returned SitesByServiceGroupServerTransport instance is connected to an instance of armsitemanager.SitesByServiceGroupClient via the
// azcore.ClientOptions.Transporter field in the client's constructor parameters.
func NewSitesByServiceGroupServerTransport(srv *SitesByServiceGroupServer) *SitesByServiceGroupServerTransport {
	return &SitesByServiceGroupServerTransport{
		srv:                        srv,
		beginCreateOrUpdate:        newTracker[azfake.PollerResponder[armsitemanager.SitesByServiceGroupClientCreateOrUpdateResponse]](),
		newListByServiceGroupPager: newTracker[azfake.PagerResponder[armsitemanager.SitesByServiceGroupClientListByServiceGroupResponse]](),
	}
}

// SitesByServiceGroupServerTransport connects instances of armsitemanager.SitesByServiceGroupClient to instances of SitesByServiceGroupServer.
// Don't use this type directly, use NewSitesByServiceGroupServerTransport instead.
type SitesByServiceGroupServerTransport struct {
	srv                        *SitesByServiceGroupServer
	beginCreateOrUpdate        *tracker[azfake.PollerResponder[armsitemanager.SitesByServiceGroupClientCreateOrUpdateResponse]]
	newListByServiceGroupPager *tracker[azfake.PagerResponder[armsitemanager.SitesByServiceGroupClientListByServiceGroupResponse]]
}

// Do implements the policy.Transporter interface for SitesByServiceGroupServerTransport.
func (s *SitesByServiceGroupServerTransport) Do(req *http.Request) (*http.Response, error) {
	rawMethod := req.Context().Value(runtime.CtxAPINameKey{})
	method, ok := rawMethod.(string)
	if !ok {
		return nil, nonRetriableError{errors.New("unable to dispatch request, missing value for CtxAPINameKey")}
	}

	return s.dispatchToMethodFake(req, method)
}

func (s *SitesByServiceGroupServerTransport) dispatchToMethodFake(req *http.Request, method string) (*http.Response, error) {
	resultChan := make(chan result)
	defer close(resultChan)

	go func() {
		var intercepted bool
		var res result
		if sitesByServiceGroupServerTransportInterceptor != nil {
			res.resp, res.err, intercepted = sitesByServiceGroupServerTransportInterceptor.Do(req)
		}
		if !intercepted {
			switch method {
			case "SitesByServiceGroupClient.BeginCreateOrUpdate":
				res.resp, res.err = s.dispatchBeginCreateOrUpdate(req)
			case "SitesByServiceGroupClient.Delete":
				res.resp, res.err = s.dispatchDelete(req)
			case "SitesByServiceGroupClient.Get":
				res.resp, res.err = s.dispatchGet(req)
			case "SitesByServiceGroupClient.NewListByServiceGroupPager":
				res.resp, res.err = s.dispatchNewListByServiceGroupPager(req)
			case "SitesByServiceGroupClient.Update":
				res.resp, res.err = s.dispatchUpdate(req)
			default:
				res.err = fmt.Errorf("unhandled API %s", method)
			}

		}
		select {
		case resultChan <- res:
		case <-req.Context().Done():
		}
	}()

	select {
	case <-req.Context().Done():
		return nil, req.Context().Err()
	case res := <-resultChan:
		return res.resp, res.err
	}
}

func (s *SitesByServiceGroupServerTransport) dispatchBeginCreateOrUpdate(req *http.Request) (*http.Response, error) {
	if s.srv.BeginCreateOrUpdate == nil {
		return nil, &nonRetriableError{errors.New("fake for method BeginCreateOrUpdate not implemented")}
	}
	beginCreateOrUpdate := s.beginCreateOrUpdate.get(req)
	if beginCreateOrUpdate == nil {
		const regexStr = `/providers/Microsoft\.Management/serviceGroups/(?P<servicegroupName>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/providers/Microsoft\.Edge/sites/(?P<siteName>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)`
		regex := regexp.MustCompile(regexStr)
		matches := regex.FindStringSubmatch(req.URL.EscapedPath())
		if len(matches) < 3 {
			return nil, fmt.Errorf("failed to parse path %s", req.URL.Path)
		}
		body, err := server.UnmarshalRequestAsJSON[armsitemanager.Site](req)
		if err != nil {
			return nil, err
		}
		servicegroupNameParam, err := url.PathUnescape(matches[regex.SubexpIndex("servicegroupName")])
		if err != nil {
			return nil, err
		}
		siteNameParam, err := url.PathUnescape(matches[regex.SubexpIndex("siteName")])
		if err != nil {
			return nil, err
		}
		respr, errRespr := s.srv.BeginCreateOrUpdate(req.Context(), servicegroupNameParam, siteNameParam, body, nil)
		if respErr := server.GetError(errRespr, req); respErr != nil {
			return nil, respErr
		}
		beginCreateOrUpdate = &respr
		s.beginCreateOrUpdate.add(req, beginCreateOrUpdate)
	}

	resp, err := server.PollerResponderNext(beginCreateOrUpdate, req)
	if err != nil {
		return nil, err
	}

	if !contains([]int{http.StatusOK, http.StatusCreated}, resp.StatusCode) {
		s.beginCreateOrUpdate.remove(req)
		return nil, &nonRetriableError{fmt.Errorf("unexpected status code %d. acceptable values are http.StatusOK, http.StatusCreated", resp.StatusCode)}
	}
	if !server.PollerResponderMore(beginCreateOrUpdate) {
		s.beginCreateOrUpdate.remove(req)
	}

	return resp, nil
}

func (s *SitesByServiceGroupServerTransport) dispatchDelete(req *http.Request) (*http.Response, error) {
	if s.srv.Delete == nil {
		return nil, &nonRetriableError{errors.New("fake for method Delete not implemented")}
	}
	const regexStr = `/providers/Microsoft\.Management/serviceGroups/(?P<servicegroupName>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/providers/Microsoft\.Edge/sites/(?P<siteName>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)`
	regex := regexp.MustCompile(regexStr)
	matches := regex.FindStringSubmatch(req.URL.EscapedPath())
	if len(matches) < 3 {
		return nil, fmt.Errorf("failed to parse path %s", req.URL.Path)
	}
	servicegroupNameParam, err := url.PathUnescape(matches[regex.SubexpIndex("servicegroupName")])
	if err != nil {
		return nil, err
	}
	siteNameParam, err := url.PathUnescape(matches[regex.SubexpIndex("siteName")])
	if err != nil {
		return nil, err
	}
	respr, errRespr := s.srv.Delete(req.Context(), servicegroupNameParam, siteNameParam, nil)
	if respErr := server.GetError(errRespr, req); respErr != nil {
		return nil, respErr
	}
	respContent := server.GetResponseContent(respr)
	if !contains([]int{http.StatusOK, http.StatusNoContent}, respContent.HTTPStatus) {
		return nil, &nonRetriableError{fmt.Errorf("unexpected status code %d. acceptable values are http.StatusOK, http.StatusNoContent", respContent.HTTPStatus)}
	}
	resp, err := server.NewResponse(respContent, req, nil)
	if err != nil {
		return nil, err
	}
	return resp, nil
}

func (s *SitesByServiceGroupServerTransport) dispatchGet(req *http.Request) (*http.Response, error) {
	if s.srv.Get == nil {
		return nil, &nonRetriableError{errors.New("fake for method Get not implemented")}
	}
	const regexStr = `/providers/Microsoft\.Management/serviceGroups/(?P<servicegroupName>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/providers/Microsoft\.Edge/sites/(?P<siteName>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)`
	regex := regexp.MustCompile(regexStr)
	matches := regex.FindStringSubmatch(req.URL.EscapedPath())
	if len(matches) < 3 {
		return nil, fmt.Errorf("failed to parse path %s", req.URL.Path)
	}
	servicegroupNameParam, err := url.PathUnescape(matches[regex.SubexpIndex("servicegroupName")])
	if err != nil {
		return nil, err
	}
	siteNameParam, err := url.PathUnescape(matches[regex.SubexpIndex("siteName")])
	if err != nil {
		return nil, err
	}
	respr, errRespr := s.srv.Get(req.Context(), servicegroupNameParam, siteNameParam, nil)
	if respErr := server.GetError(errRespr, req); respErr != nil {
		return nil, respErr
	}
	respContent := server.GetResponseContent(respr)
	if !contains([]int{http.StatusOK}, respContent.HTTPStatus) {
		return nil, &nonRetriableError{fmt.Errorf("unexpected status code %d. acceptable values are http.StatusOK", respContent.HTTPStatus)}
	}
	resp, err := server.MarshalResponseAsJSON(respContent, server.GetResponse(respr).Site, req)
	if err != nil {
		return nil, err
	}
	return resp, nil
}

func (s *SitesByServiceGroupServerTransport) dispatchNewListByServiceGroupPager(req *http.Request) (*http.Response, error) {
	if s.srv.NewListByServiceGroupPager == nil {
		return nil, &nonRetriableError{errors.New("fake for method NewListByServiceGroupPager not implemented")}
	}
	newListByServiceGroupPager := s.newListByServiceGroupPager.get(req)
	if newListByServiceGroupPager == nil {
		const regexStr = `/providers/Microsoft\.Management/serviceGroups/(?P<servicegroupName>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/providers/Microsoft\.Edge/sites`
		regex := regexp.MustCompile(regexStr)
		matches := regex.FindStringSubmatch(req.URL.EscapedPath())
		if len(matches) < 2 {
			return nil, fmt.Errorf("failed to parse path %s", req.URL.Path)
		}
		servicegroupNameParam, err := url.PathUnescape(matches[regex.SubexpIndex("servicegroupName")])
		if err != nil {
			return nil, err
		}
		resp := s.srv.NewListByServiceGroupPager(servicegroupNameParam, nil)
		newListByServiceGroupPager = &resp
		s.newListByServiceGroupPager.add(req, newListByServiceGroupPager)
		server.PagerResponderInjectNextLinks(newListByServiceGroupPager, req, func(page *armsitemanager.SitesByServiceGroupClientListByServiceGroupResponse, createLink func() string) {
			page.NextLink = to.Ptr(createLink())
		})
	}
	resp, err := server.PagerResponderNext(newListByServiceGroupPager, req)
	if err != nil {
		return nil, err
	}
	if !contains([]int{http.StatusOK}, resp.StatusCode) {
		s.newListByServiceGroupPager.remove(req)
		return nil, &nonRetriableError{fmt.Errorf("unexpected status code %d. acceptable values are http.StatusOK", resp.StatusCode)}
	}
	if !server.PagerResponderMore(newListByServiceGroupPager) {
		s.newListByServiceGroupPager.remove(req)
	}
	return resp, nil
}

func (s *SitesByServiceGroupServerTransport) dispatchUpdate(req *http.Request) (*http.Response, error) {
	if s.srv.Update == nil {
		return nil, &nonRetriableError{errors.New("fake for method Update not implemented")}
	}
	const regexStr = `/providers/Microsoft\.Management/serviceGroups/(?P<servicegroupName>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/providers/Microsoft\.Edge/sites/(?P<siteName>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)`
	regex := regexp.MustCompile(regexStr)
	matches := regex.FindStringSubmatch(req.URL.EscapedPath())
	if len(matches) < 3 {
		return nil, fmt.Errorf("failed to parse path %s", req.URL.Path)
	}
	body, err := server.UnmarshalRequestAsJSON[armsitemanager.SiteUpdate](req)
	if err != nil {
		return nil, err
	}
	servicegroupNameParam, err := url.PathUnescape(matches[regex.SubexpIndex("servicegroupName")])
	if err != nil {
		return nil, err
	}
	siteNameParam, err := url.PathUnescape(matches[regex.SubexpIndex("siteName")])
	if err != nil {
		return nil, err
	}
	respr, errRespr := s.srv.Update(req.Context(), servicegroupNameParam, siteNameParam, body, nil)
	if respErr := server.GetError(errRespr, req); respErr != nil {
		return nil, respErr
	}
	respContent := server.GetResponseContent(respr)
	if !contains([]int{http.StatusOK}, respContent.HTTPStatus) {
		return nil, &nonRetriableError{fmt.Errorf("unexpected status code %d. acceptable values are http.StatusOK", respContent.HTTPStatus)}
	}
	resp, err := server.MarshalResponseAsJSON(respContent, server.GetResponse(respr).Site, req)
	if err != nil {
		return nil, err
	}
	return resp, nil
}

// set this to conditionally intercept incoming requests to SitesByServiceGroupServerTransport
var sitesByServiceGroupServerTransportInterceptor interface {
	// Do returns true if the server transport should use the returned response/error
	Do(*http.Request) (*http.Response, error, bool)
}
