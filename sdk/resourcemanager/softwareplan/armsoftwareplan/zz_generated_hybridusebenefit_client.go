//go:build go1.16
// +build go1.16

// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

package armsoftwareplan

import (
	"context"
	"errors"
	"fmt"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/arm"
	armruntime "github.com/Azure/azure-sdk-for-go/sdk/azcore/arm/runtime"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/policy"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/runtime"
	"net/http"
	"net/url"
	"strings"
)

// HybridUseBenefitClient contains the methods for the HybridUseBenefit group.
// Don't use this type directly, use NewHybridUseBenefitClient() instead.
type HybridUseBenefitClient struct {
	ep string
	pl runtime.Pipeline
}

// NewHybridUseBenefitClient creates a new instance of HybridUseBenefitClient with the specified values.
func NewHybridUseBenefitClient(credential azcore.TokenCredential, options *arm.ClientOptions) *HybridUseBenefitClient {
	cp := arm.ClientOptions{}
	if options != nil {
		cp = *options
	}
	if len(cp.Host) == 0 {
		cp.Host = arm.AzurePublicCloud
	}
	return &HybridUseBenefitClient{ep: string(cp.Host), pl: armruntime.NewPipeline(module, version, credential, &cp)}
}

// Create - Create a new hybrid use benefit under a given scope
// If the operation fails it returns the *Error error type.
func (client *HybridUseBenefitClient) Create(ctx context.Context, scope string, planID string, body HybridUseBenefitModel, options *HybridUseBenefitCreateOptions) (HybridUseBenefitCreateResponse, error) {
	req, err := client.createCreateRequest(ctx, scope, planID, body, options)
	if err != nil {
		return HybridUseBenefitCreateResponse{}, err
	}
	resp, err := client.pl.Do(req)
	if err != nil {
		return HybridUseBenefitCreateResponse{}, err
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {
		return HybridUseBenefitCreateResponse{}, client.createHandleError(resp)
	}
	return client.createHandleResponse(resp)
}

// createCreateRequest creates the Create request.
func (client *HybridUseBenefitClient) createCreateRequest(ctx context.Context, scope string, planID string, body HybridUseBenefitModel, options *HybridUseBenefitCreateOptions) (*policy.Request, error) {
	urlPath := "/{scope}/providers/Microsoft.SoftwarePlan/hybridUseBenefits/{planId}"
	if scope == "" {
		return nil, errors.New("parameter scope cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{scope}", url.PathEscape(scope))
	if planID == "" {
		return nil, errors.New("parameter planID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{planId}", url.PathEscape(planID))
	req, err := runtime.NewRequest(ctx, http.MethodPut, runtime.JoinPaths(client.ep, urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("api-version", "2019-12-01")
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header.Set("Accept", "application/json")
	return req, runtime.MarshalAsJSON(req, body)
}

// createHandleResponse handles the Create response.
func (client *HybridUseBenefitClient) createHandleResponse(resp *http.Response) (HybridUseBenefitCreateResponse, error) {
	result := HybridUseBenefitCreateResponse{RawResponse: resp}
	if err := runtime.UnmarshalAsJSON(resp, &result.HybridUseBenefitModel); err != nil {
		return HybridUseBenefitCreateResponse{}, runtime.NewResponseError(err, resp)
	}
	return result, nil
}

// createHandleError handles the Create error response.
func (client *HybridUseBenefitClient) createHandleError(resp *http.Response) error {
	body, err := runtime.Payload(resp)
	if err != nil {
		return runtime.NewResponseError(err, resp)
	}
	errType := Error{raw: string(body)}
	if err := runtime.UnmarshalAsJSON(resp, &errType); err != nil {
		return runtime.NewResponseError(fmt.Errorf("%s\n%s", string(body), err), resp)
	}
	return runtime.NewResponseError(&errType, resp)
}

// Delete - Deletes a given plan ID
// If the operation fails it returns the *Error error type.
func (client *HybridUseBenefitClient) Delete(ctx context.Context, scope string, planID string, options *HybridUseBenefitDeleteOptions) (HybridUseBenefitDeleteResponse, error) {
	req, err := client.deleteCreateRequest(ctx, scope, planID, options)
	if err != nil {
		return HybridUseBenefitDeleteResponse{}, err
	}
	resp, err := client.pl.Do(req)
	if err != nil {
		return HybridUseBenefitDeleteResponse{}, err
	}
	if !runtime.HasStatusCode(resp, http.StatusOK, http.StatusNoContent) {
		return HybridUseBenefitDeleteResponse{}, client.deleteHandleError(resp)
	}
	return HybridUseBenefitDeleteResponse{RawResponse: resp}, nil
}

// deleteCreateRequest creates the Delete request.
func (client *HybridUseBenefitClient) deleteCreateRequest(ctx context.Context, scope string, planID string, options *HybridUseBenefitDeleteOptions) (*policy.Request, error) {
	urlPath := "/{scope}/providers/Microsoft.SoftwarePlan/hybridUseBenefits/{planId}"
	if scope == "" {
		return nil, errors.New("parameter scope cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{scope}", url.PathEscape(scope))
	if planID == "" {
		return nil, errors.New("parameter planID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{planId}", url.PathEscape(planID))
	req, err := runtime.NewRequest(ctx, http.MethodDelete, runtime.JoinPaths(client.ep, urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("api-version", "2019-12-01")
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header.Set("Accept", "application/json")
	return req, nil
}

// deleteHandleError handles the Delete error response.
func (client *HybridUseBenefitClient) deleteHandleError(resp *http.Response) error {
	body, err := runtime.Payload(resp)
	if err != nil {
		return runtime.NewResponseError(err, resp)
	}
	errType := Error{raw: string(body)}
	if err := runtime.UnmarshalAsJSON(resp, &errType); err != nil {
		return runtime.NewResponseError(fmt.Errorf("%s\n%s", string(body), err), resp)
	}
	return runtime.NewResponseError(&errType, resp)
}

// Get - Gets a given plan ID
// If the operation fails it returns the *Error error type.
func (client *HybridUseBenefitClient) Get(ctx context.Context, scope string, planID string, options *HybridUseBenefitGetOptions) (HybridUseBenefitGetResponse, error) {
	req, err := client.getCreateRequest(ctx, scope, planID, options)
	if err != nil {
		return HybridUseBenefitGetResponse{}, err
	}
	resp, err := client.pl.Do(req)
	if err != nil {
		return HybridUseBenefitGetResponse{}, err
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {
		return HybridUseBenefitGetResponse{}, client.getHandleError(resp)
	}
	return client.getHandleResponse(resp)
}

// getCreateRequest creates the Get request.
func (client *HybridUseBenefitClient) getCreateRequest(ctx context.Context, scope string, planID string, options *HybridUseBenefitGetOptions) (*policy.Request, error) {
	urlPath := "/{scope}/providers/Microsoft.SoftwarePlan/hybridUseBenefits/{planId}"
	if scope == "" {
		return nil, errors.New("parameter scope cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{scope}", url.PathEscape(scope))
	if planID == "" {
		return nil, errors.New("parameter planID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{planId}", url.PathEscape(planID))
	req, err := runtime.NewRequest(ctx, http.MethodGet, runtime.JoinPaths(client.ep, urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("api-version", "2019-12-01")
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header.Set("Accept", "application/json")
	return req, nil
}

// getHandleResponse handles the Get response.
func (client *HybridUseBenefitClient) getHandleResponse(resp *http.Response) (HybridUseBenefitGetResponse, error) {
	result := HybridUseBenefitGetResponse{RawResponse: resp}
	if err := runtime.UnmarshalAsJSON(resp, &result.HybridUseBenefitModel); err != nil {
		return HybridUseBenefitGetResponse{}, runtime.NewResponseError(err, resp)
	}
	return result, nil
}

// getHandleError handles the Get error response.
func (client *HybridUseBenefitClient) getHandleError(resp *http.Response) error {
	body, err := runtime.Payload(resp)
	if err != nil {
		return runtime.NewResponseError(err, resp)
	}
	errType := Error{raw: string(body)}
	if err := runtime.UnmarshalAsJSON(resp, &errType); err != nil {
		return runtime.NewResponseError(fmt.Errorf("%s\n%s", string(body), err), resp)
	}
	return runtime.NewResponseError(&errType, resp)
}

// List - Get all hybrid use benefits associated with an ARM resource.
// If the operation fails it returns the *Error error type.
func (client *HybridUseBenefitClient) List(scope string, options *HybridUseBenefitListOptions) *HybridUseBenefitListPager {
	return &HybridUseBenefitListPager{
		client: client,
		requester: func(ctx context.Context) (*policy.Request, error) {
			return client.listCreateRequest(ctx, scope, options)
		},
		advancer: func(ctx context.Context, resp HybridUseBenefitListResponse) (*policy.Request, error) {
			return runtime.NewRequest(ctx, http.MethodGet, *resp.HybridUseBenefitListResult.NextLink)
		},
	}
}

// listCreateRequest creates the List request.
func (client *HybridUseBenefitClient) listCreateRequest(ctx context.Context, scope string, options *HybridUseBenefitListOptions) (*policy.Request, error) {
	urlPath := "/{scope}/providers/Microsoft.SoftwarePlan/hybridUseBenefits"
	if scope == "" {
		return nil, errors.New("parameter scope cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{scope}", url.PathEscape(scope))
	req, err := runtime.NewRequest(ctx, http.MethodGet, runtime.JoinPaths(client.ep, urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("api-version", "2019-12-01")
	if options != nil && options.Filter != nil {
		reqQP.Set("$filter", *options.Filter)
	}
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header.Set("Accept", "application/json")
	return req, nil
}

// listHandleResponse handles the List response.
func (client *HybridUseBenefitClient) listHandleResponse(resp *http.Response) (HybridUseBenefitListResponse, error) {
	result := HybridUseBenefitListResponse{RawResponse: resp}
	if err := runtime.UnmarshalAsJSON(resp, &result.HybridUseBenefitListResult); err != nil {
		return HybridUseBenefitListResponse{}, runtime.NewResponseError(err, resp)
	}
	return result, nil
}

// listHandleError handles the List error response.
func (client *HybridUseBenefitClient) listHandleError(resp *http.Response) error {
	body, err := runtime.Payload(resp)
	if err != nil {
		return runtime.NewResponseError(err, resp)
	}
	errType := Error{raw: string(body)}
	if err := runtime.UnmarshalAsJSON(resp, &errType); err != nil {
		return runtime.NewResponseError(fmt.Errorf("%s\n%s", string(body), err), resp)
	}
	return runtime.NewResponseError(&errType, resp)
}

// Update - Updates an existing hybrid use benefit
// If the operation fails it returns the *Error error type.
func (client *HybridUseBenefitClient) Update(ctx context.Context, scope string, planID string, body HybridUseBenefitModel, options *HybridUseBenefitUpdateOptions) (HybridUseBenefitUpdateResponse, error) {
	req, err := client.updateCreateRequest(ctx, scope, planID, body, options)
	if err != nil {
		return HybridUseBenefitUpdateResponse{}, err
	}
	resp, err := client.pl.Do(req)
	if err != nil {
		return HybridUseBenefitUpdateResponse{}, err
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {
		return HybridUseBenefitUpdateResponse{}, client.updateHandleError(resp)
	}
	return client.updateHandleResponse(resp)
}

// updateCreateRequest creates the Update request.
func (client *HybridUseBenefitClient) updateCreateRequest(ctx context.Context, scope string, planID string, body HybridUseBenefitModel, options *HybridUseBenefitUpdateOptions) (*policy.Request, error) {
	urlPath := "/{scope}/providers/Microsoft.SoftwarePlan/hybridUseBenefits/{planId}"
	if scope == "" {
		return nil, errors.New("parameter scope cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{scope}", url.PathEscape(scope))
	if planID == "" {
		return nil, errors.New("parameter planID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{planId}", url.PathEscape(planID))
	req, err := runtime.NewRequest(ctx, http.MethodPatch, runtime.JoinPaths(client.ep, urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("api-version", "2019-12-01")
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header.Set("Accept", "application/json")
	return req, runtime.MarshalAsJSON(req, body)
}

// updateHandleResponse handles the Update response.
func (client *HybridUseBenefitClient) updateHandleResponse(resp *http.Response) (HybridUseBenefitUpdateResponse, error) {
	result := HybridUseBenefitUpdateResponse{RawResponse: resp}
	if err := runtime.UnmarshalAsJSON(resp, &result.HybridUseBenefitModel); err != nil {
		return HybridUseBenefitUpdateResponse{}, runtime.NewResponseError(err, resp)
	}
	return result, nil
}

// updateHandleError handles the Update error response.
func (client *HybridUseBenefitClient) updateHandleError(resp *http.Response) error {
	body, err := runtime.Payload(resp)
	if err != nil {
		return runtime.NewResponseError(err, resp)
	}
	errType := Error{raw: string(body)}
	if err := runtime.UnmarshalAsJSON(resp, &errType); err != nil {
		return runtime.NewResponseError(fmt.Errorf("%s\n%s", string(body), err), resp)
	}
	return runtime.NewResponseError(&errType, resp)
}
