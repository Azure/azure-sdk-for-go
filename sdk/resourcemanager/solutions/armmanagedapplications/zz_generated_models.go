//go:build go1.16
// +build go1.16

// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

package armmanagedapplications

import (
	"encoding/json"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore"
	"reflect"
	"time"
)

// Application - Information about managed application.
type Application struct {
	GenericResource
	// REQUIRED; The kind of the managed application. Allowed values are MarketPlace and ServiceCatalog.
	Kind *string `json:"kind,omitempty"`

	// REQUIRED; The managed application properties.
	Properties *ApplicationProperties `json:"properties,omitempty"`

	// The identity of the resource.
	Identity *ManagedServiceIdentity `json:"identity,omitempty"`

	// The plan information.
	Plan *Plan `json:"plan,omitempty"`
}

// MarshalJSON implements the json.Marshaller interface for type Application.
func (a Application) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	a.GenericResource.marshalInternal(objectMap)
	populate(objectMap, "identity", a.Identity)
	populate(objectMap, "kind", a.Kind)
	populate(objectMap, "plan", a.Plan)
	populate(objectMap, "properties", a.Properties)
	return json.Marshal(objectMap)
}

// ApplicationArtifact - Managed application artifact.
type ApplicationArtifact struct {
	// REQUIRED; The managed application artifact name.
	Name *ApplicationArtifactName `json:"name,omitempty"`

	// REQUIRED; The managed application artifact type.
	Type *ApplicationArtifactType `json:"type,omitempty"`

	// REQUIRED; The managed application artifact blob uri.
	URI *string `json:"uri,omitempty"`
}

// ApplicationAuthorization - The managed application provider authorization.
type ApplicationAuthorization struct {
	// REQUIRED; The provider's principal identifier. This is the identity that the provider will use to call ARM to manage the managed application resources.
	PrincipalID *string `json:"principalId,omitempty"`

	// REQUIRED; The provider's role definition identifier. This role will define all the permissions that the provider must have on the managed application's
	// container resource group. This role definition cannot have
	// permission to delete the resource group.
	RoleDefinitionID *string `json:"roleDefinitionId,omitempty"`
}

// ApplicationBillingDetailsDefinition - Managed application billing details definition.
type ApplicationBillingDetailsDefinition struct {
	// The managed application resource usage Id.
	ResourceUsageID *string `json:"resourceUsageId,omitempty"`
}

// ApplicationClientDetails - The application client details to track the entity creating/updating the managed app resource.
type ApplicationClientDetails struct {
	// The client application Id.
	ApplicationID *string `json:"applicationId,omitempty"`

	// The client Oid.
	Oid *string `json:"oid,omitempty"`

	// The client Puid
	Puid *string `json:"puid,omitempty"`
}

// ApplicationClientListOperationsOptions contains the optional parameters for the ApplicationClient.ListOperations method.
type ApplicationClientListOperationsOptions struct {
	// placeholder for future optional parameters
}

// ApplicationDefinition - Information about managed application definition.
type ApplicationDefinition struct {
	GenericResource
	// REQUIRED; The managed application definition properties.
	Properties *ApplicationDefinitionProperties `json:"properties,omitempty"`
}

// MarshalJSON implements the json.Marshaller interface for type ApplicationDefinition.
func (a ApplicationDefinition) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	a.GenericResource.marshalInternal(objectMap)
	populate(objectMap, "properties", a.Properties)
	return json.Marshal(objectMap)
}

// ApplicationDefinitionArtifact - Application definition artifact.
type ApplicationDefinitionArtifact struct {
	// REQUIRED; The managed application definition artifact name.
	Name *ApplicationDefinitionArtifactName `json:"name,omitempty"`

	// REQUIRED; The managed application definition artifact type.
	Type *ApplicationArtifactType `json:"type,omitempty"`

	// REQUIRED; The managed application definition artifact blob uri.
	URI *string `json:"uri,omitempty"`
}

// ApplicationDefinitionListResult - List of managed application definitions.
type ApplicationDefinitionListResult struct {
	// The URL to use for getting the next set of results.
	NextLink *string `json:"nextLink,omitempty"`

	// The array of managed application definitions.
	Value []*ApplicationDefinition `json:"value,omitempty"`
}

// MarshalJSON implements the json.Marshaller interface for type ApplicationDefinitionListResult.
func (a ApplicationDefinitionListResult) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "nextLink", a.NextLink)
	populate(objectMap, "value", a.Value)
	return json.Marshal(objectMap)
}

// ApplicationDefinitionPatchable - Information about an application definition request.
type ApplicationDefinitionPatchable struct {
	// Application definition tags
	Tags map[string]*string `json:"tags,omitempty"`
}

// MarshalJSON implements the json.Marshaller interface for type ApplicationDefinitionPatchable.
func (a ApplicationDefinitionPatchable) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "tags", a.Tags)
	return json.Marshal(objectMap)
}

// ApplicationDefinitionProperties - The managed application definition properties.
type ApplicationDefinitionProperties struct {
	// REQUIRED; The managed application lock level.
	LockLevel *ApplicationLockLevel `json:"lockLevel,omitempty"`

	// The collection of managed application artifacts. The portal will use the files specified as artifacts to construct the user experience of creating a
	// managed application from a managed application
	// definition.
	Artifacts []*ApplicationDefinitionArtifact `json:"artifacts,omitempty"`

	// The managed application provider authorizations.
	Authorizations []*ApplicationAuthorization `json:"authorizations,omitempty"`

	// The createUiDefinition json for the backing template with Microsoft.Solutions/applications resource. It can be a JObject or well-formed JSON string.
	CreateUIDefinition map[string]interface{} `json:"createUiDefinition,omitempty"`

	// The managed application deployment policy.
	DeploymentPolicy *ApplicationDeploymentPolicy `json:"deploymentPolicy,omitempty"`

	// The managed application definition description.
	Description *string `json:"description,omitempty"`

	// The managed application definition display name.
	DisplayName *string `json:"displayName,omitempty"`

	// A value indicating whether the package is enabled or not.
	IsEnabled *bool `json:"isEnabled,omitempty"`

	// The managed application locking policy.
	LockingPolicy *ApplicationPackageLockingPolicyDefinition `json:"lockingPolicy,omitempty"`

	// The inline main template json which has resources to be provisioned. It can be a JObject or well-formed JSON string.
	MainTemplate map[string]interface{} `json:"mainTemplate,omitempty"`

	// The managed application management policy that determines publisher's access to the managed resource group.
	ManagementPolicy *ApplicationManagementPolicy `json:"managementPolicy,omitempty"`

	// The managed application notification policy.
	NotificationPolicy *ApplicationNotificationPolicy `json:"notificationPolicy,omitempty"`

	// The managed application definition package file Uri. Use this element
	PackageFileURI *string `json:"packageFileUri,omitempty"`

	// The managed application provider policies.
	Policies []*ApplicationPolicy `json:"policies,omitempty"`

	// The storage account id for bring your own storage scenario.
	StorageAccountID *string `json:"storageAccountId,omitempty"`

	// READ-ONLY; Provisioning state.
	ProvisioningState *ProvisioningState `json:"provisioningState,omitempty" azure:"ro"`
}

// MarshalJSON implements the json.Marshaller interface for type ApplicationDefinitionProperties.
func (a ApplicationDefinitionProperties) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "artifacts", a.Artifacts)
	populate(objectMap, "authorizations", a.Authorizations)
	populate(objectMap, "createUiDefinition", a.CreateUIDefinition)
	populate(objectMap, "deploymentPolicy", a.DeploymentPolicy)
	populate(objectMap, "description", a.Description)
	populate(objectMap, "displayName", a.DisplayName)
	populate(objectMap, "isEnabled", a.IsEnabled)
	populate(objectMap, "lockLevel", a.LockLevel)
	populate(objectMap, "lockingPolicy", a.LockingPolicy)
	populate(objectMap, "mainTemplate", a.MainTemplate)
	populate(objectMap, "managementPolicy", a.ManagementPolicy)
	populate(objectMap, "notificationPolicy", a.NotificationPolicy)
	populate(objectMap, "packageFileUri", a.PackageFileURI)
	populate(objectMap, "policies", a.Policies)
	populate(objectMap, "provisioningState", a.ProvisioningState)
	populate(objectMap, "storageAccountId", a.StorageAccountID)
	return json.Marshal(objectMap)
}

// ApplicationDefinitionsBeginCreateOrUpdateOptions contains the optional parameters for the ApplicationDefinitions.BeginCreateOrUpdate method.
type ApplicationDefinitionsBeginCreateOrUpdateOptions struct {
	// placeholder for future optional parameters
}

// ApplicationDefinitionsBeginDeleteOptions contains the optional parameters for the ApplicationDefinitions.BeginDelete method.
type ApplicationDefinitionsBeginDeleteOptions struct {
	// placeholder for future optional parameters
}

// ApplicationDefinitionsGetOptions contains the optional parameters for the ApplicationDefinitions.Get method.
type ApplicationDefinitionsGetOptions struct {
	// placeholder for future optional parameters
}

// ApplicationDefinitionsListByResourceGroupOptions contains the optional parameters for the ApplicationDefinitions.ListByResourceGroup method.
type ApplicationDefinitionsListByResourceGroupOptions struct {
	// placeholder for future optional parameters
}

// ApplicationDefinitionsListBySubscriptionOptions contains the optional parameters for the ApplicationDefinitions.ListBySubscription method.
type ApplicationDefinitionsListBySubscriptionOptions struct {
	// placeholder for future optional parameters
}

// ApplicationDefinitionsUpdateOptions contains the optional parameters for the ApplicationDefinitions.Update method.
type ApplicationDefinitionsUpdateOptions struct {
	// placeholder for future optional parameters
}

// ApplicationDeploymentPolicy - Managed application deployment policy.
type ApplicationDeploymentPolicy struct {
	// REQUIRED; The managed application deployment mode.
	DeploymentMode *DeploymentMode `json:"deploymentMode,omitempty"`
}

// ApplicationJitAccessPolicy - Managed application Jit access policy.
type ApplicationJitAccessPolicy struct {
	// REQUIRED; Whether the JIT access is enabled.
	JitAccessEnabled *bool `json:"jitAccessEnabled,omitempty"`

	// JIT approval mode.
	JitApprovalMode *JitApprovalMode `json:"jitApprovalMode,omitempty"`

	// The JIT approvers
	JitApprovers []*JitApproverDefinition `json:"jitApprovers,omitempty"`

	// The maximum duration JIT access is granted. This is an ISO8601 time period value.
	MaximumJitAccessDuration *string `json:"maximumJitAccessDuration,omitempty"`
}

// MarshalJSON implements the json.Marshaller interface for type ApplicationJitAccessPolicy.
func (a ApplicationJitAccessPolicy) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "jitAccessEnabled", a.JitAccessEnabled)
	populate(objectMap, "jitApprovalMode", a.JitApprovalMode)
	populate(objectMap, "jitApprovers", a.JitApprovers)
	populate(objectMap, "maximumJitAccessDuration", a.MaximumJitAccessDuration)
	return json.Marshal(objectMap)
}

// ApplicationListResult - List of managed applications.
type ApplicationListResult struct {
	// The URL to use for getting the next set of results.
	NextLink *string `json:"nextLink,omitempty"`

	// The array of managed applications.
	Value []*Application `json:"value,omitempty"`
}

// MarshalJSON implements the json.Marshaller interface for type ApplicationListResult.
func (a ApplicationListResult) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "nextLink", a.NextLink)
	populate(objectMap, "value", a.Value)
	return json.Marshal(objectMap)
}

// ApplicationManagementPolicy - Managed application management policy.
type ApplicationManagementPolicy struct {
	// The managed application management mode.
	Mode *ApplicationManagementMode `json:"mode,omitempty"`
}

// ApplicationNotificationEndpoint - Managed application notification endpoint.
type ApplicationNotificationEndpoint struct {
	// REQUIRED; The managed application notification endpoint uri.
	URI *string `json:"uri,omitempty"`
}

// ApplicationNotificationPolicy - Managed application notification policy.
type ApplicationNotificationPolicy struct {
	// REQUIRED; The managed application notification endpoint.
	NotificationEndpoints []*ApplicationNotificationEndpoint `json:"notificationEndpoints,omitempty"`
}

// MarshalJSON implements the json.Marshaller interface for type ApplicationNotificationPolicy.
func (a ApplicationNotificationPolicy) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "notificationEndpoints", a.NotificationEndpoints)
	return json.Marshal(objectMap)
}

// ApplicationPackageContact - The application package contact information.
type ApplicationPackageContact struct {
	// REQUIRED; The contact email.
	Email *string `json:"email,omitempty"`

	// REQUIRED; The contact phone number.
	Phone *string `json:"phone,omitempty"`

	// The contact name.
	ContactName *string `json:"contactName,omitempty"`
}

// ApplicationPackageLockingPolicyDefinition - Managed application locking policy.
type ApplicationPackageLockingPolicyDefinition struct {
	// The deny assignment excluded actions.
	AllowedActions []*string `json:"allowedActions,omitempty"`
}

// MarshalJSON implements the json.Marshaller interface for type ApplicationPackageLockingPolicyDefinition.
func (a ApplicationPackageLockingPolicyDefinition) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "allowedActions", a.AllowedActions)
	return json.Marshal(objectMap)
}

// ApplicationPackageSupportUrls - The appliance package support URLs.
type ApplicationPackageSupportUrls struct {
	// The government cloud support URL.
	GovernmentCloud *string `json:"governmentCloud,omitempty"`

	// The public azure support URL.
	PublicAzure *string `json:"publicAzure,omitempty"`
}

// ApplicationPatchable - Information about managed application.
type ApplicationPatchable struct {
	GenericResource
	// The identity of the resource.
	Identity *ManagedServiceIdentity `json:"identity,omitempty"`

	// The kind of the managed application. Allowed values are MarketPlace and ServiceCatalog.
	Kind *string `json:"kind,omitempty"`

	// The plan information.
	Plan *PlanPatchable `json:"plan,omitempty"`

	// The managed application properties.
	Properties *ApplicationProperties `json:"properties,omitempty"`
}

// MarshalJSON implements the json.Marshaller interface for type ApplicationPatchable.
func (a ApplicationPatchable) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	a.GenericResource.marshalInternal(objectMap)
	populate(objectMap, "identity", a.Identity)
	populate(objectMap, "kind", a.Kind)
	populate(objectMap, "plan", a.Plan)
	populate(objectMap, "properties", a.Properties)
	return json.Marshal(objectMap)
}

// ApplicationPolicy - Managed application policy.
type ApplicationPolicy struct {
	// The policy name
	Name *string `json:"name,omitempty"`

	// The policy parameters.
	Parameters *string `json:"parameters,omitempty"`

	// The policy definition Id.
	PolicyDefinitionID *string `json:"policyDefinitionId,omitempty"`
}

// ApplicationProperties - The managed application properties.
type ApplicationProperties struct {
	// The fully qualified path of managed application definition Id.
	ApplicationDefinitionID *string `json:"applicationDefinitionId,omitempty"`

	// The managed application Jit access policy.
	JitAccessPolicy *ApplicationJitAccessPolicy `json:"jitAccessPolicy,omitempty"`

	// The managed resource group Id.
	ManagedResourceGroupID *string `json:"managedResourceGroupId,omitempty"`

	// Name and value pairs that define the managed application parameters. It can be a JObject or a well formed JSON string.
	Parameters map[string]interface{} `json:"parameters,omitempty"`

	// READ-ONLY; The collection of managed application artifacts.
	Artifacts []*ApplicationArtifact `json:"artifacts,omitempty" azure:"ro"`

	// READ-ONLY; The read-only authorizations property that is retrieved from the application package.
	Authorizations []*ApplicationAuthorization `json:"authorizations,omitempty" azure:"ro"`

	// READ-ONLY; The managed application billing details.
	BillingDetails *ApplicationBillingDetailsDefinition `json:"billingDetails,omitempty" azure:"ro"`

	// READ-ONLY; The client entity that created the JIT request.
	CreatedBy *ApplicationClientDetails `json:"createdBy,omitempty" azure:"ro"`

	// READ-ONLY; The read-only customer support property that is retrieved from the application package.
	CustomerSupport *ApplicationPackageContact `json:"customerSupport,omitempty" azure:"ro"`

	// READ-ONLY; The managed application management mode.
	ManagementMode *ApplicationManagementMode `json:"managementMode,omitempty" azure:"ro"`

	// READ-ONLY; Name and value pairs that define the managed application outputs.
	Outputs map[string]interface{} `json:"outputs,omitempty" azure:"ro"`

	// READ-ONLY; The managed application provisioning state.
	ProvisioningState *ProvisioningState `json:"provisioningState,omitempty" azure:"ro"`

	// READ-ONLY; The publisher tenant Id.
	PublisherTenantID *string `json:"publisherTenantId,omitempty" azure:"ro"`

	// READ-ONLY; The read-only support URLs property that is retrieved from the application package.
	SupportUrls *ApplicationPackageSupportUrls `json:"supportUrls,omitempty" azure:"ro"`

	// READ-ONLY; The client entity that last updated the JIT request.
	UpdatedBy *ApplicationClientDetails `json:"updatedBy,omitempty" azure:"ro"`
}

// MarshalJSON implements the json.Marshaller interface for type ApplicationProperties.
func (a ApplicationProperties) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "applicationDefinitionId", a.ApplicationDefinitionID)
	populate(objectMap, "artifacts", a.Artifacts)
	populate(objectMap, "authorizations", a.Authorizations)
	populate(objectMap, "billingDetails", a.BillingDetails)
	populate(objectMap, "createdBy", a.CreatedBy)
	populate(objectMap, "customerSupport", a.CustomerSupport)
	populate(objectMap, "jitAccessPolicy", a.JitAccessPolicy)
	populate(objectMap, "managedResourceGroupId", a.ManagedResourceGroupID)
	populate(objectMap, "managementMode", a.ManagementMode)
	populate(objectMap, "outputs", a.Outputs)
	populate(objectMap, "parameters", a.Parameters)
	populate(objectMap, "provisioningState", a.ProvisioningState)
	populate(objectMap, "publisherTenantId", a.PublisherTenantID)
	populate(objectMap, "supportUrls", a.SupportUrls)
	populate(objectMap, "updatedBy", a.UpdatedBy)
	return json.Marshal(objectMap)
}

// ApplicationPropertiesPatchable - The managed application properties.
type ApplicationPropertiesPatchable struct {
	// The fully qualified path of managed application definition Id.
	ApplicationDefinitionID *string `json:"applicationDefinitionId,omitempty"`

	// The managed resource group Id.
	ManagedResourceGroupID *string `json:"managedResourceGroupId,omitempty"`

	// Name and value pairs that define the managed application parameters. It can be a JObject or a well formed JSON string.
	Parameters map[string]interface{} `json:"parameters,omitempty"`

	// READ-ONLY; Name and value pairs that define the managed application outputs.
	Outputs map[string]interface{} `json:"outputs,omitempty" azure:"ro"`

	// READ-ONLY; The managed application provisioning state.
	ProvisioningState *ProvisioningState `json:"provisioningState,omitempty" azure:"ro"`
}

// ApplicationsBeginCreateOrUpdateOptions contains the optional parameters for the Applications.BeginCreateOrUpdate method.
type ApplicationsBeginCreateOrUpdateOptions struct {
	// placeholder for future optional parameters
}

// ApplicationsBeginDeleteOptions contains the optional parameters for the Applications.BeginDelete method.
type ApplicationsBeginDeleteOptions struct {
	// placeholder for future optional parameters
}

// ApplicationsBeginRefreshPermissionsOptions contains the optional parameters for the Applications.BeginRefreshPermissions method.
type ApplicationsBeginRefreshPermissionsOptions struct {
	// placeholder for future optional parameters
}

// ApplicationsGetOptions contains the optional parameters for the Applications.Get method.
type ApplicationsGetOptions struct {
	// placeholder for future optional parameters
}

// ApplicationsListAllowedUpgradePlansOptions contains the optional parameters for the Applications.ListAllowedUpgradePlans method.
type ApplicationsListAllowedUpgradePlansOptions struct {
	// placeholder for future optional parameters
}

// ApplicationsListByResourceGroupOptions contains the optional parameters for the Applications.ListByResourceGroup method.
type ApplicationsListByResourceGroupOptions struct {
	// placeholder for future optional parameters
}

// ApplicationsListBySubscriptionOptions contains the optional parameters for the Applications.ListBySubscription method.
type ApplicationsListBySubscriptionOptions struct {
	// placeholder for future optional parameters
}

// ApplicationsUpdateOptions contains the optional parameters for the Applications.Update method.
type ApplicationsUpdateOptions struct {
	// Parameters supplied to update an existing managed application.
	Parameters *ApplicationPatchable
}

// ErrorAdditionalInfo - The resource management error additional info.
type ErrorAdditionalInfo struct {
	// READ-ONLY; The additional info.
	Info map[string]interface{} `json:"info,omitempty" azure:"ro"`

	// READ-ONLY; The additional info type.
	Type *string `json:"type,omitempty" azure:"ro"`
}

// ErrorDetail - The error detail.
type ErrorDetail struct {
	// READ-ONLY; The error additional info.
	AdditionalInfo []*ErrorAdditionalInfo `json:"additionalInfo,omitempty" azure:"ro"`

	// READ-ONLY; The error code.
	Code *string `json:"code,omitempty" azure:"ro"`

	// READ-ONLY; The error details.
	Details []*ErrorDetail `json:"details,omitempty" azure:"ro"`

	// READ-ONLY; The error message.
	Message *string `json:"message,omitempty" azure:"ro"`

	// READ-ONLY; The error target.
	Target *string `json:"target,omitempty" azure:"ro"`
}

// MarshalJSON implements the json.Marshaller interface for type ErrorDetail.
func (e ErrorDetail) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "additionalInfo", e.AdditionalInfo)
	populate(objectMap, "code", e.Code)
	populate(objectMap, "details", e.Details)
	populate(objectMap, "message", e.Message)
	populate(objectMap, "target", e.Target)
	return json.Marshal(objectMap)
}

// ErrorResponse - Common error response for all Azure Resource Manager APIs to return error details for failed operations. (This also follows the OData
// error response format.).
// Implements the error and azcore.HTTPResponse interfaces.
type ErrorResponse struct {
	raw string
	// The error object.
	InnerError *ErrorDetail `json:"error,omitempty"`
}

// Error implements the error interface for type ErrorResponse.
// The contents of the error text are not contractual and subject to change.
func (e ErrorResponse) Error() string {
	return e.raw
}

// GenericResource - Resource information.
type GenericResource struct {
	Resource
	// ID of the resource that manages this resource.
	ManagedBy *string `json:"managedBy,omitempty"`

	// The SKU of the resource.
	SKU *SKU `json:"sku,omitempty"`
}

// MarshalJSON implements the json.Marshaller interface for type GenericResource.
func (g GenericResource) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	g.marshalInternal(objectMap)
	return json.Marshal(objectMap)
}

func (g GenericResource) marshalInternal(objectMap map[string]interface{}) {
	g.Resource.marshalInternal(objectMap)
	populate(objectMap, "managedBy", g.ManagedBy)
	populate(objectMap, "sku", g.SKU)
}

// JitApproverDefinition - JIT approver definition.
type JitApproverDefinition struct {
	// REQUIRED; The approver service principal Id.
	ID *string `json:"id,omitempty"`

	// The approver display name.
	DisplayName *string `json:"displayName,omitempty"`

	// The approver type.
	Type *JitApproverType `json:"type,omitempty"`
}

// JitAuthorizationPolicies - The JIT authorization policies.
type JitAuthorizationPolicies struct {
	// REQUIRED; The the principal id that will be granted JIT access.
	PrincipalID *string `json:"principalId,omitempty"`

	// REQUIRED; The role definition id that will be granted to the Principal.
	RoleDefinitionID *string `json:"roleDefinitionId,omitempty"`
}

// JitRequestDefinition - Information about JIT request definition.
type JitRequestDefinition struct {
	Resource
	// The JIT request properties.
	Properties *JitRequestProperties `json:"properties,omitempty"`
}

// MarshalJSON implements the json.Marshaller interface for type JitRequestDefinition.
func (j JitRequestDefinition) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	j.Resource.marshalInternal(objectMap)
	populate(objectMap, "properties", j.Properties)
	return json.Marshal(objectMap)
}

// JitRequestDefinitionListResult - List of JIT requests.
type JitRequestDefinitionListResult struct {
	// The URL to use for getting the next set of results.
	NextLink *string `json:"nextLink,omitempty"`

	// The array of Jit request definition.
	Value []*JitRequestDefinition `json:"value,omitempty"`
}

// MarshalJSON implements the json.Marshaller interface for type JitRequestDefinitionListResult.
func (j JitRequestDefinitionListResult) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "nextLink", j.NextLink)
	populate(objectMap, "value", j.Value)
	return json.Marshal(objectMap)
}

// JitRequestPatchable - Information about JIT request.
type JitRequestPatchable struct {
	// Jit request tags
	Tags map[string]*string `json:"tags,omitempty"`
}

// MarshalJSON implements the json.Marshaller interface for type JitRequestPatchable.
func (j JitRequestPatchable) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "tags", j.Tags)
	return json.Marshal(objectMap)
}

// JitRequestProperties - Information about JIT request properties
type JitRequestProperties struct {
	// REQUIRED; The parent application id.
	ApplicationResourceID *string `json:"applicationResourceId,omitempty"`

	// REQUIRED; The JIT authorization policies.
	JitAuthorizationPolicies []*JitAuthorizationPolicies `json:"jitAuthorizationPolicies,omitempty"`

	// REQUIRED; The JIT request properties.
	JitSchedulingPolicy *JitSchedulingPolicy `json:"jitSchedulingPolicy,omitempty"`

	// READ-ONLY; The client entity that created the JIT request.
	CreatedBy *ApplicationClientDetails `json:"createdBy,omitempty" azure:"ro"`

	// READ-ONLY; The JIT request state.
	JitRequestState *JitRequestState `json:"jitRequestState,omitempty" azure:"ro"`

	// READ-ONLY; The JIT request provisioning state.
	ProvisioningState *ProvisioningState `json:"provisioningState,omitempty" azure:"ro"`

	// READ-ONLY; The publisher tenant id.
	PublisherTenantID *string `json:"publisherTenantId,omitempty" azure:"ro"`

	// READ-ONLY; The client entity that last updated the JIT request.
	UpdatedBy *ApplicationClientDetails `json:"updatedBy,omitempty" azure:"ro"`
}

// MarshalJSON implements the json.Marshaller interface for type JitRequestProperties.
func (j JitRequestProperties) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "applicationResourceId", j.ApplicationResourceID)
	populate(objectMap, "createdBy", j.CreatedBy)
	populate(objectMap, "jitAuthorizationPolicies", j.JitAuthorizationPolicies)
	populate(objectMap, "jitRequestState", j.JitRequestState)
	populate(objectMap, "jitSchedulingPolicy", j.JitSchedulingPolicy)
	populate(objectMap, "provisioningState", j.ProvisioningState)
	populate(objectMap, "publisherTenantId", j.PublisherTenantID)
	populate(objectMap, "updatedBy", j.UpdatedBy)
	return json.Marshal(objectMap)
}

// JitRequestsBeginCreateOrUpdateOptions contains the optional parameters for the JitRequests.BeginCreateOrUpdate method.
type JitRequestsBeginCreateOrUpdateOptions struct {
	// placeholder for future optional parameters
}

// JitRequestsDeleteOptions contains the optional parameters for the JitRequests.Delete method.
type JitRequestsDeleteOptions struct {
	// placeholder for future optional parameters
}

// JitRequestsGetOptions contains the optional parameters for the JitRequests.Get method.
type JitRequestsGetOptions struct {
	// placeholder for future optional parameters
}

// JitRequestsListByResourceGroupOptions contains the optional parameters for the JitRequests.ListByResourceGroup method.
type JitRequestsListByResourceGroupOptions struct {
	// placeholder for future optional parameters
}

// JitRequestsListBySubscriptionOptions contains the optional parameters for the JitRequests.ListBySubscription method.
type JitRequestsListBySubscriptionOptions struct {
	// placeholder for future optional parameters
}

// JitRequestsUpdateOptions contains the optional parameters for the JitRequests.Update method.
type JitRequestsUpdateOptions struct {
	// placeholder for future optional parameters
}

// JitSchedulingPolicy - The JIT scheduling policies.
type JitSchedulingPolicy struct {
	// REQUIRED; The required duration of the JIT request.
	Duration *string `json:"duration,omitempty"`

	// REQUIRED; The start time of the request.
	StartTime *time.Time `json:"startTime,omitempty"`

	// REQUIRED; The type of JIT schedule.
	Type *JitSchedulingType `json:"type,omitempty"`
}

// MarshalJSON implements the json.Marshaller interface for type JitSchedulingPolicy.
func (j JitSchedulingPolicy) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "duration", j.Duration)
	populateTimeRFC3339(objectMap, "startTime", j.StartTime)
	populate(objectMap, "type", j.Type)
	return json.Marshal(objectMap)
}

// UnmarshalJSON implements the json.Unmarshaller interface for type JitSchedulingPolicy.
func (j *JitSchedulingPolicy) UnmarshalJSON(data []byte) error {
	var rawMsg map[string]json.RawMessage
	if err := json.Unmarshal(data, &rawMsg); err != nil {
		return err
	}
	for key, val := range rawMsg {
		var err error
		switch key {
		case "duration":
			err = unpopulate(val, &j.Duration)
			delete(rawMsg, key)
		case "startTime":
			err = unpopulateTimeRFC3339(val, &j.StartTime)
			delete(rawMsg, key)
		case "type":
			err = unpopulate(val, &j.Type)
			delete(rawMsg, key)
		}
		if err != nil {
			return err
		}
	}
	return nil
}

// ManagedServiceIdentity - Managed service identity (system assigned and/or user assigned identities)
type ManagedServiceIdentity struct {
	// REQUIRED; Type of managed service identity (where both SystemAssigned and UserAssigned types are allowed).
	Type *ManagedServiceIdentityType `json:"type,omitempty"`

	// The set of user assigned identities associated with the resource. The userAssignedIdentities dictionary keys will be ARM resource ids in the form:
	// '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ManagedIdentity/userAssignedIdentities/{identityName}. The dictionary
	// values can be empty objects ({}) in
	// requests.
	UserAssignedIdentities map[string]*UserAssignedIdentity `json:"userAssignedIdentities,omitempty"`

	// READ-ONLY; The service principal ID of the system assigned identity. This property will only be provided for a system assigned identity.
	PrincipalID *string `json:"principalId,omitempty" azure:"ro"`

	// READ-ONLY; The tenant ID of the system assigned identity. This property will only be provided for a system assigned identity.
	TenantID *string `json:"tenantId,omitempty" azure:"ro"`
}

// MarshalJSON implements the json.Marshaller interface for type ManagedServiceIdentity.
func (m ManagedServiceIdentity) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "principalId", m.PrincipalID)
	populate(objectMap, "tenantId", m.TenantID)
	populate(objectMap, "type", m.Type)
	populate(objectMap, "userAssignedIdentities", m.UserAssignedIdentities)
	return json.Marshal(objectMap)
}

// Operation - Details of a REST API operation, returned from the Resource Provider Operations API
type Operation struct {
	// Localized display information for this particular operation.
	Display *OperationDisplay `json:"display,omitempty"`

	// READ-ONLY; Enum. Indicates the action type. "Internal" refers to actions that are for internal only APIs.
	ActionType *ActionType `json:"actionType,omitempty" azure:"ro"`

	// READ-ONLY; Whether the operation applies to data-plane. This is "true" for data-plane operations and "false" for ARM/control-plane operations.
	IsDataAction *bool `json:"isDataAction,omitempty" azure:"ro"`

	// READ-ONLY; The name of the operation, as per Resource-Based Access Control (RBAC). Examples: "Microsoft.Compute/virtualMachines/write", "Microsoft.Compute/virtualMachines/capture/action"
	Name *string `json:"name,omitempty" azure:"ro"`

	// READ-ONLY; The intended executor of the operation; as in Resource Based Access Control (RBAC) and audit logs UX. Default value is "user,system"
	Origin *Origin `json:"origin,omitempty" azure:"ro"`
}

// OperationDisplay - Localized display information for this particular operation.
type OperationDisplay struct {
	// READ-ONLY; The short, localized friendly description of the operation; suitable for tool tips and detailed views.
	Description *string `json:"description,omitempty" azure:"ro"`

	// READ-ONLY; The concise, localized friendly name for the operation; suitable for dropdowns. E.g. "Create or Update Virtual Machine", "Restart Virtual
	// Machine".
	Operation *string `json:"operation,omitempty" azure:"ro"`

	// READ-ONLY; The localized friendly form of the resource provider name, e.g. "Microsoft Monitoring Insights" or "Microsoft Compute".
	Provider *string `json:"provider,omitempty" azure:"ro"`

	// READ-ONLY; The localized friendly name of the resource type related to this operation. E.g. "Virtual Machines" or "Job Schedule Collections".
	Resource *string `json:"resource,omitempty" azure:"ro"`
}

// OperationListResult - A list of REST API operations supported by an Azure Resource Provider. It contains an URL link to get the next set of results.
type OperationListResult struct {
	// READ-ONLY; URL to get the next set of operation list results (if there are any).
	NextLink *string `json:"nextLink,omitempty" azure:"ro"`

	// READ-ONLY; List of operations supported by the resource provider
	Value []*Operation `json:"value,omitempty" azure:"ro"`
}

// MarshalJSON implements the json.Marshaller interface for type OperationListResult.
func (o OperationListResult) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "nextLink", o.NextLink)
	populate(objectMap, "value", o.Value)
	return json.Marshal(objectMap)
}

// Plan for the managed application.
type Plan struct {
	// REQUIRED; The plan name.
	Name *string `json:"name,omitempty"`

	// REQUIRED; The product code.
	Product *string `json:"product,omitempty"`

	// REQUIRED; The publisher ID.
	Publisher *string `json:"publisher,omitempty"`

	// REQUIRED; The plan's version.
	Version *string `json:"version,omitempty"`

	// The promotion code.
	PromotionCode *string `json:"promotionCode,omitempty"`
}

// PlanPatchable - Plan for the managed application.
type PlanPatchable struct {
	// The plan name.
	Name *string `json:"name,omitempty"`

	// The product code.
	Product *string `json:"product,omitempty"`

	// The promotion code.
	PromotionCode *string `json:"promotionCode,omitempty"`

	// The publisher ID.
	Publisher *string `json:"publisher,omitempty"`

	// The plan's version.
	Version *string `json:"version,omitempty"`
}

// Resource information.
type Resource struct {
	// Resource location
	Location *string `json:"location,omitempty"`

	// Resource tags
	Tags map[string]*string `json:"tags,omitempty"`

	// READ-ONLY; Resource ID
	ID *string `json:"id,omitempty" azure:"ro"`

	// READ-ONLY; Resource name
	Name *string `json:"name,omitempty" azure:"ro"`

	// READ-ONLY; Metadata pertaining to creation and last modification of the resource.
	SystemData *SystemData `json:"systemData,omitempty" azure:"ro"`

	// READ-ONLY; Resource type
	Type *string `json:"type,omitempty" azure:"ro"`
}

// MarshalJSON implements the json.Marshaller interface for type Resource.
func (r Resource) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	r.marshalInternal(objectMap)
	return json.Marshal(objectMap)
}

func (r Resource) marshalInternal(objectMap map[string]interface{}) {
	populate(objectMap, "id", r.ID)
	populate(objectMap, "location", r.Location)
	populate(objectMap, "name", r.Name)
	populate(objectMap, "systemData", r.SystemData)
	populate(objectMap, "tags", r.Tags)
	populate(objectMap, "type", r.Type)
}

// SKU for the resource.
type SKU struct {
	// REQUIRED; The SKU name.
	Name *string `json:"name,omitempty"`

	// The SKU capacity.
	Capacity *int32 `json:"capacity,omitempty"`

	// The SKU family.
	Family *string `json:"family,omitempty"`

	// The SKU model.
	Model *string `json:"model,omitempty"`

	// The SKU size.
	Size *string `json:"size,omitempty"`

	// The SKU tier.
	Tier *string `json:"tier,omitempty"`
}

// SystemData - Metadata pertaining to creation and last modification of the resource.
type SystemData struct {
	// The timestamp of resource creation (UTC).
	CreatedAt *time.Time `json:"createdAt,omitempty"`

	// The identity that created the resource.
	CreatedBy *string `json:"createdBy,omitempty"`

	// The type of identity that created the resource.
	CreatedByType *CreatedByType `json:"createdByType,omitempty"`

	// The timestamp of resource last modification (UTC)
	LastModifiedAt *time.Time `json:"lastModifiedAt,omitempty"`

	// The identity that last modified the resource.
	LastModifiedBy *string `json:"lastModifiedBy,omitempty"`

	// The type of identity that last modified the resource.
	LastModifiedByType *CreatedByType `json:"lastModifiedByType,omitempty"`
}

// MarshalJSON implements the json.Marshaller interface for type SystemData.
func (s SystemData) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populateTimeRFC3339(objectMap, "createdAt", s.CreatedAt)
	populate(objectMap, "createdBy", s.CreatedBy)
	populate(objectMap, "createdByType", s.CreatedByType)
	populateTimeRFC3339(objectMap, "lastModifiedAt", s.LastModifiedAt)
	populate(objectMap, "lastModifiedBy", s.LastModifiedBy)
	populate(objectMap, "lastModifiedByType", s.LastModifiedByType)
	return json.Marshal(objectMap)
}

// UnmarshalJSON implements the json.Unmarshaller interface for type SystemData.
func (s *SystemData) UnmarshalJSON(data []byte) error {
	var rawMsg map[string]json.RawMessage
	if err := json.Unmarshal(data, &rawMsg); err != nil {
		return err
	}
	for key, val := range rawMsg {
		var err error
		switch key {
		case "createdAt":
			err = unpopulateTimeRFC3339(val, &s.CreatedAt)
			delete(rawMsg, key)
		case "createdBy":
			err = unpopulate(val, &s.CreatedBy)
			delete(rawMsg, key)
		case "createdByType":
			err = unpopulate(val, &s.CreatedByType)
			delete(rawMsg, key)
		case "lastModifiedAt":
			err = unpopulateTimeRFC3339(val, &s.LastModifiedAt)
			delete(rawMsg, key)
		case "lastModifiedBy":
			err = unpopulate(val, &s.LastModifiedBy)
			delete(rawMsg, key)
		case "lastModifiedByType":
			err = unpopulate(val, &s.LastModifiedByType)
			delete(rawMsg, key)
		}
		if err != nil {
			return err
		}
	}
	return nil
}

// UserAssignedIdentity - User assigned identity properties
type UserAssignedIdentity struct {
	// READ-ONLY; The client ID of the assigned identity.
	ClientID *string `json:"clientId,omitempty" azure:"ro"`

	// READ-ONLY; The principal ID of the assigned identity.
	PrincipalID *string `json:"principalId,omitempty" azure:"ro"`
}

func populate(m map[string]interface{}, k string, v interface{}) {
	if v == nil {
		return
	} else if azcore.IsNullValue(v) {
		m[k] = nil
	} else if !reflect.ValueOf(v).IsNil() {
		m[k] = v
	}
}

func unpopulate(data json.RawMessage, v interface{}) error {
	if data == nil {
		return nil
	}
	return json.Unmarshal(data, v)
}
