//go:build go1.16
// +build go1.16

// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

package armsqlvirtualmachine

import (
	"context"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore"
	"net/http"
)

// AvailabilityGroupListenersCreateOrUpdatePoller provides polling facilities until the operation reaches a terminal state.
type AvailabilityGroupListenersCreateOrUpdatePoller struct {
	pt *azcore.Poller
}

// Done returns true if the LRO has reached a terminal state.
func (p *AvailabilityGroupListenersCreateOrUpdatePoller) Done() bool {
	return p.pt.Done()
}

// Poll fetches the latest state of the LRO.  It returns an HTTP response or error.
// If the LRO has completed successfully, the poller's state is updated and the HTTP
// response is returned.
// If the LRO has completed with failure or was cancelled, the poller's state is
// updated and the error is returned.
// If the LRO has not reached a terminal state, the poller's state is updated and
// the latest HTTP response is returned.
// If Poll fails, the poller's state is unmodified and the error is returned.
// Calling Poll on an LRO that has reached a terminal state will return the final
// HTTP response or error.
func (p *AvailabilityGroupListenersCreateOrUpdatePoller) Poll(ctx context.Context) (*http.Response, error) {
	return p.pt.Poll(ctx)
}

// FinalResponse performs a final GET to the service and returns the final response
// for the polling operation. If there is an error performing the final GET then an error is returned.
// If the final GET succeeded then the final AvailabilityGroupListenersCreateOrUpdateResponse will be returned.
func (p *AvailabilityGroupListenersCreateOrUpdatePoller) FinalResponse(ctx context.Context) (AvailabilityGroupListenersCreateOrUpdateResponse, error) {
	respType := AvailabilityGroupListenersCreateOrUpdateResponse{}
	resp, err := p.pt.FinalResponse(ctx, &respType.AvailabilityGroupListener)
	if err != nil {
		return AvailabilityGroupListenersCreateOrUpdateResponse{}, err
	}
	respType.RawResponse = resp
	return respType, nil
}

// ResumeToken returns a value representing the poller that can be used to resume
// the LRO at a later time. ResumeTokens are unique per service operation.
func (p *AvailabilityGroupListenersCreateOrUpdatePoller) ResumeToken() (string, error) {
	return p.pt.ResumeToken()
}

// AvailabilityGroupListenersDeletePoller provides polling facilities until the operation reaches a terminal state.
type AvailabilityGroupListenersDeletePoller struct {
	pt *azcore.Poller
}

// Done returns true if the LRO has reached a terminal state.
func (p *AvailabilityGroupListenersDeletePoller) Done() bool {
	return p.pt.Done()
}

// Poll fetches the latest state of the LRO.  It returns an HTTP response or error.
// If the LRO has completed successfully, the poller's state is updated and the HTTP
// response is returned.
// If the LRO has completed with failure or was cancelled, the poller's state is
// updated and the error is returned.
// If the LRO has not reached a terminal state, the poller's state is updated and
// the latest HTTP response is returned.
// If Poll fails, the poller's state is unmodified and the error is returned.
// Calling Poll on an LRO that has reached a terminal state will return the final
// HTTP response or error.
func (p *AvailabilityGroupListenersDeletePoller) Poll(ctx context.Context) (*http.Response, error) {
	return p.pt.Poll(ctx)
}

// FinalResponse performs a final GET to the service and returns the final response
// for the polling operation. If there is an error performing the final GET then an error is returned.
// If the final GET succeeded then the final AvailabilityGroupListenersDeleteResponse will be returned.
func (p *AvailabilityGroupListenersDeletePoller) FinalResponse(ctx context.Context) (AvailabilityGroupListenersDeleteResponse, error) {
	respType := AvailabilityGroupListenersDeleteResponse{}
	resp, err := p.pt.FinalResponse(ctx, nil)
	if err != nil {
		return AvailabilityGroupListenersDeleteResponse{}, err
	}
	respType.RawResponse = resp
	return respType, nil
}

// ResumeToken returns a value representing the poller that can be used to resume
// the LRO at a later time. ResumeTokens are unique per service operation.
func (p *AvailabilityGroupListenersDeletePoller) ResumeToken() (string, error) {
	return p.pt.ResumeToken()
}

// SQLVirtualMachineGroupsCreateOrUpdatePoller provides polling facilities until the operation reaches a terminal state.
type SQLVirtualMachineGroupsCreateOrUpdatePoller struct {
	pt *azcore.Poller
}

// Done returns true if the LRO has reached a terminal state.
func (p *SQLVirtualMachineGroupsCreateOrUpdatePoller) Done() bool {
	return p.pt.Done()
}

// Poll fetches the latest state of the LRO.  It returns an HTTP response or error.
// If the LRO has completed successfully, the poller's state is updated and the HTTP
// response is returned.
// If the LRO has completed with failure or was cancelled, the poller's state is
// updated and the error is returned.
// If the LRO has not reached a terminal state, the poller's state is updated and
// the latest HTTP response is returned.
// If Poll fails, the poller's state is unmodified and the error is returned.
// Calling Poll on an LRO that has reached a terminal state will return the final
// HTTP response or error.
func (p *SQLVirtualMachineGroupsCreateOrUpdatePoller) Poll(ctx context.Context) (*http.Response, error) {
	return p.pt.Poll(ctx)
}

// FinalResponse performs a final GET to the service and returns the final response
// for the polling operation. If there is an error performing the final GET then an error is returned.
// If the final GET succeeded then the final SQLVirtualMachineGroupsCreateOrUpdateResponse will be returned.
func (p *SQLVirtualMachineGroupsCreateOrUpdatePoller) FinalResponse(ctx context.Context) (SQLVirtualMachineGroupsCreateOrUpdateResponse, error) {
	respType := SQLVirtualMachineGroupsCreateOrUpdateResponse{}
	resp, err := p.pt.FinalResponse(ctx, &respType.SQLVirtualMachineGroup)
	if err != nil {
		return SQLVirtualMachineGroupsCreateOrUpdateResponse{}, err
	}
	respType.RawResponse = resp
	return respType, nil
}

// ResumeToken returns a value representing the poller that can be used to resume
// the LRO at a later time. ResumeTokens are unique per service operation.
func (p *SQLVirtualMachineGroupsCreateOrUpdatePoller) ResumeToken() (string, error) {
	return p.pt.ResumeToken()
}

// SQLVirtualMachineGroupsDeletePoller provides polling facilities until the operation reaches a terminal state.
type SQLVirtualMachineGroupsDeletePoller struct {
	pt *azcore.Poller
}

// Done returns true if the LRO has reached a terminal state.
func (p *SQLVirtualMachineGroupsDeletePoller) Done() bool {
	return p.pt.Done()
}

// Poll fetches the latest state of the LRO.  It returns an HTTP response or error.
// If the LRO has completed successfully, the poller's state is updated and the HTTP
// response is returned.
// If the LRO has completed with failure or was cancelled, the poller's state is
// updated and the error is returned.
// If the LRO has not reached a terminal state, the poller's state is updated and
// the latest HTTP response is returned.
// If Poll fails, the poller's state is unmodified and the error is returned.
// Calling Poll on an LRO that has reached a terminal state will return the final
// HTTP response or error.
func (p *SQLVirtualMachineGroupsDeletePoller) Poll(ctx context.Context) (*http.Response, error) {
	return p.pt.Poll(ctx)
}

// FinalResponse performs a final GET to the service and returns the final response
// for the polling operation. If there is an error performing the final GET then an error is returned.
// If the final GET succeeded then the final SQLVirtualMachineGroupsDeleteResponse will be returned.
func (p *SQLVirtualMachineGroupsDeletePoller) FinalResponse(ctx context.Context) (SQLVirtualMachineGroupsDeleteResponse, error) {
	respType := SQLVirtualMachineGroupsDeleteResponse{}
	resp, err := p.pt.FinalResponse(ctx, nil)
	if err != nil {
		return SQLVirtualMachineGroupsDeleteResponse{}, err
	}
	respType.RawResponse = resp
	return respType, nil
}

// ResumeToken returns a value representing the poller that can be used to resume
// the LRO at a later time. ResumeTokens are unique per service operation.
func (p *SQLVirtualMachineGroupsDeletePoller) ResumeToken() (string, error) {
	return p.pt.ResumeToken()
}

// SQLVirtualMachineGroupsUpdatePoller provides polling facilities until the operation reaches a terminal state.
type SQLVirtualMachineGroupsUpdatePoller struct {
	pt *azcore.Poller
}

// Done returns true if the LRO has reached a terminal state.
func (p *SQLVirtualMachineGroupsUpdatePoller) Done() bool {
	return p.pt.Done()
}

// Poll fetches the latest state of the LRO.  It returns an HTTP response or error.
// If the LRO has completed successfully, the poller's state is updated and the HTTP
// response is returned.
// If the LRO has completed with failure or was cancelled, the poller's state is
// updated and the error is returned.
// If the LRO has not reached a terminal state, the poller's state is updated and
// the latest HTTP response is returned.
// If Poll fails, the poller's state is unmodified and the error is returned.
// Calling Poll on an LRO that has reached a terminal state will return the final
// HTTP response or error.
func (p *SQLVirtualMachineGroupsUpdatePoller) Poll(ctx context.Context) (*http.Response, error) {
	return p.pt.Poll(ctx)
}

// FinalResponse performs a final GET to the service and returns the final response
// for the polling operation. If there is an error performing the final GET then an error is returned.
// If the final GET succeeded then the final SQLVirtualMachineGroupsUpdateResponse will be returned.
func (p *SQLVirtualMachineGroupsUpdatePoller) FinalResponse(ctx context.Context) (SQLVirtualMachineGroupsUpdateResponse, error) {
	respType := SQLVirtualMachineGroupsUpdateResponse{}
	resp, err := p.pt.FinalResponse(ctx, &respType.SQLVirtualMachineGroup)
	if err != nil {
		return SQLVirtualMachineGroupsUpdateResponse{}, err
	}
	respType.RawResponse = resp
	return respType, nil
}

// ResumeToken returns a value representing the poller that can be used to resume
// the LRO at a later time. ResumeTokens are unique per service operation.
func (p *SQLVirtualMachineGroupsUpdatePoller) ResumeToken() (string, error) {
	return p.pt.ResumeToken()
}

// SQLVirtualMachinesCreateOrUpdatePoller provides polling facilities until the operation reaches a terminal state.
type SQLVirtualMachinesCreateOrUpdatePoller struct {
	pt *azcore.Poller
}

// Done returns true if the LRO has reached a terminal state.
func (p *SQLVirtualMachinesCreateOrUpdatePoller) Done() bool {
	return p.pt.Done()
}

// Poll fetches the latest state of the LRO.  It returns an HTTP response or error.
// If the LRO has completed successfully, the poller's state is updated and the HTTP
// response is returned.
// If the LRO has completed with failure or was cancelled, the poller's state is
// updated and the error is returned.
// If the LRO has not reached a terminal state, the poller's state is updated and
// the latest HTTP response is returned.
// If Poll fails, the poller's state is unmodified and the error is returned.
// Calling Poll on an LRO that has reached a terminal state will return the final
// HTTP response or error.
func (p *SQLVirtualMachinesCreateOrUpdatePoller) Poll(ctx context.Context) (*http.Response, error) {
	return p.pt.Poll(ctx)
}

// FinalResponse performs a final GET to the service and returns the final response
// for the polling operation. If there is an error performing the final GET then an error is returned.
// If the final GET succeeded then the final SQLVirtualMachinesCreateOrUpdateResponse will be returned.
func (p *SQLVirtualMachinesCreateOrUpdatePoller) FinalResponse(ctx context.Context) (SQLVirtualMachinesCreateOrUpdateResponse, error) {
	respType := SQLVirtualMachinesCreateOrUpdateResponse{}
	resp, err := p.pt.FinalResponse(ctx, &respType.SQLVirtualMachine)
	if err != nil {
		return SQLVirtualMachinesCreateOrUpdateResponse{}, err
	}
	respType.RawResponse = resp
	return respType, nil
}

// ResumeToken returns a value representing the poller that can be used to resume
// the LRO at a later time. ResumeTokens are unique per service operation.
func (p *SQLVirtualMachinesCreateOrUpdatePoller) ResumeToken() (string, error) {
	return p.pt.ResumeToken()
}

// SQLVirtualMachinesDeletePoller provides polling facilities until the operation reaches a terminal state.
type SQLVirtualMachinesDeletePoller struct {
	pt *azcore.Poller
}

// Done returns true if the LRO has reached a terminal state.
func (p *SQLVirtualMachinesDeletePoller) Done() bool {
	return p.pt.Done()
}

// Poll fetches the latest state of the LRO.  It returns an HTTP response or error.
// If the LRO has completed successfully, the poller's state is updated and the HTTP
// response is returned.
// If the LRO has completed with failure or was cancelled, the poller's state is
// updated and the error is returned.
// If the LRO has not reached a terminal state, the poller's state is updated and
// the latest HTTP response is returned.
// If Poll fails, the poller's state is unmodified and the error is returned.
// Calling Poll on an LRO that has reached a terminal state will return the final
// HTTP response or error.
func (p *SQLVirtualMachinesDeletePoller) Poll(ctx context.Context) (*http.Response, error) {
	return p.pt.Poll(ctx)
}

// FinalResponse performs a final GET to the service and returns the final response
// for the polling operation. If there is an error performing the final GET then an error is returned.
// If the final GET succeeded then the final SQLVirtualMachinesDeleteResponse will be returned.
func (p *SQLVirtualMachinesDeletePoller) FinalResponse(ctx context.Context) (SQLVirtualMachinesDeleteResponse, error) {
	respType := SQLVirtualMachinesDeleteResponse{}
	resp, err := p.pt.FinalResponse(ctx, nil)
	if err != nil {
		return SQLVirtualMachinesDeleteResponse{}, err
	}
	respType.RawResponse = resp
	return respType, nil
}

// ResumeToken returns a value representing the poller that can be used to resume
// the LRO at a later time. ResumeTokens are unique per service operation.
func (p *SQLVirtualMachinesDeletePoller) ResumeToken() (string, error) {
	return p.pt.ResumeToken()
}

// SQLVirtualMachinesUpdatePoller provides polling facilities until the operation reaches a terminal state.
type SQLVirtualMachinesUpdatePoller struct {
	pt *azcore.Poller
}

// Done returns true if the LRO has reached a terminal state.
func (p *SQLVirtualMachinesUpdatePoller) Done() bool {
	return p.pt.Done()
}

// Poll fetches the latest state of the LRO.  It returns an HTTP response or error.
// If the LRO has completed successfully, the poller's state is updated and the HTTP
// response is returned.
// If the LRO has completed with failure or was cancelled, the poller's state is
// updated and the error is returned.
// If the LRO has not reached a terminal state, the poller's state is updated and
// the latest HTTP response is returned.
// If Poll fails, the poller's state is unmodified and the error is returned.
// Calling Poll on an LRO that has reached a terminal state will return the final
// HTTP response or error.
func (p *SQLVirtualMachinesUpdatePoller) Poll(ctx context.Context) (*http.Response, error) {
	return p.pt.Poll(ctx)
}

// FinalResponse performs a final GET to the service and returns the final response
// for the polling operation. If there is an error performing the final GET then an error is returned.
// If the final GET succeeded then the final SQLVirtualMachinesUpdateResponse will be returned.
func (p *SQLVirtualMachinesUpdatePoller) FinalResponse(ctx context.Context) (SQLVirtualMachinesUpdateResponse, error) {
	respType := SQLVirtualMachinesUpdateResponse{}
	resp, err := p.pt.FinalResponse(ctx, &respType.SQLVirtualMachine)
	if err != nil {
		return SQLVirtualMachinesUpdateResponse{}, err
	}
	respType.RawResponse = resp
	return respType, nil
}

// ResumeToken returns a value representing the poller that can be used to resume
// the LRO at a later time. ResumeTokens are unique per service operation.
func (p *SQLVirtualMachinesUpdatePoller) ResumeToken() (string, error) {
	return p.pt.ResumeToken()
}
