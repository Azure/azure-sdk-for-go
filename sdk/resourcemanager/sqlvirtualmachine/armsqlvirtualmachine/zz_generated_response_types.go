//go:build go1.16
// +build go1.16

// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

package armsqlvirtualmachine

import (
	"context"
	armruntime "github.com/Azure/azure-sdk-for-go/sdk/azcore/arm/runtime"
	"net/http"
	"time"
)

// AvailabilityGroupListenersCreateOrUpdatePollerResponse contains the response from method AvailabilityGroupListeners.CreateOrUpdate.
type AvailabilityGroupListenersCreateOrUpdatePollerResponse struct {
	// Poller contains an initialized poller.
	Poller *AvailabilityGroupListenersCreateOrUpdatePoller

	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// PollUntilDone will poll the service endpoint until a terminal state is reached or an error is received.
// freq: the time to wait between intervals in absence of a Retry-After header. Allowed minimum is one second.
// A good starting value is 30 seconds. Note that some resources might benefit from a different value.
func (l AvailabilityGroupListenersCreateOrUpdatePollerResponse) PollUntilDone(ctx context.Context, freq time.Duration) (AvailabilityGroupListenersCreateOrUpdateResponse, error) {
	respType := AvailabilityGroupListenersCreateOrUpdateResponse{}
	resp, err := l.Poller.pt.PollUntilDone(ctx, freq, &respType.AvailabilityGroupListener)
	if err != nil {
		return respType, err
	}
	respType.RawResponse = resp
	return respType, nil
}

// Resume rehydrates a AvailabilityGroupListenersCreateOrUpdatePollerResponse from the provided client and resume token.
func (l *AvailabilityGroupListenersCreateOrUpdatePollerResponse) Resume(ctx context.Context, client *AvailabilityGroupListenersClient, token string) error {
	pt, err := armruntime.NewPollerFromResumeToken("AvailabilityGroupListenersClient.CreateOrUpdate", token, client.pl, client.createOrUpdateHandleError)
	if err != nil {
		return err
	}
	poller := &AvailabilityGroupListenersCreateOrUpdatePoller{
		pt: pt,
	}
	resp, err := poller.Poll(ctx)
	if err != nil {
		return err
	}
	l.Poller = poller
	l.RawResponse = resp
	return nil
}

// AvailabilityGroupListenersCreateOrUpdateResponse contains the response from method AvailabilityGroupListeners.CreateOrUpdate.
type AvailabilityGroupListenersCreateOrUpdateResponse struct {
	AvailabilityGroupListenersCreateOrUpdateResult
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// AvailabilityGroupListenersCreateOrUpdateResult contains the result from method AvailabilityGroupListeners.CreateOrUpdate.
type AvailabilityGroupListenersCreateOrUpdateResult struct {
	AvailabilityGroupListener
}

// AvailabilityGroupListenersDeletePollerResponse contains the response from method AvailabilityGroupListeners.Delete.
type AvailabilityGroupListenersDeletePollerResponse struct {
	// Poller contains an initialized poller.
	Poller *AvailabilityGroupListenersDeletePoller

	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// PollUntilDone will poll the service endpoint until a terminal state is reached or an error is received.
// freq: the time to wait between intervals in absence of a Retry-After header. Allowed minimum is one second.
// A good starting value is 30 seconds. Note that some resources might benefit from a different value.
func (l AvailabilityGroupListenersDeletePollerResponse) PollUntilDone(ctx context.Context, freq time.Duration) (AvailabilityGroupListenersDeleteResponse, error) {
	respType := AvailabilityGroupListenersDeleteResponse{}
	resp, err := l.Poller.pt.PollUntilDone(ctx, freq, nil)
	if err != nil {
		return respType, err
	}
	respType.RawResponse = resp
	return respType, nil
}

// Resume rehydrates a AvailabilityGroupListenersDeletePollerResponse from the provided client and resume token.
func (l *AvailabilityGroupListenersDeletePollerResponse) Resume(ctx context.Context, client *AvailabilityGroupListenersClient, token string) error {
	pt, err := armruntime.NewPollerFromResumeToken("AvailabilityGroupListenersClient.Delete", token, client.pl, client.deleteHandleError)
	if err != nil {
		return err
	}
	poller := &AvailabilityGroupListenersDeletePoller{
		pt: pt,
	}
	resp, err := poller.Poll(ctx)
	if err != nil {
		return err
	}
	l.Poller = poller
	l.RawResponse = resp
	return nil
}

// AvailabilityGroupListenersDeleteResponse contains the response from method AvailabilityGroupListeners.Delete.
type AvailabilityGroupListenersDeleteResponse struct {
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// AvailabilityGroupListenersGetResponse contains the response from method AvailabilityGroupListeners.Get.
type AvailabilityGroupListenersGetResponse struct {
	AvailabilityGroupListenersGetResult
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// AvailabilityGroupListenersGetResult contains the result from method AvailabilityGroupListeners.Get.
type AvailabilityGroupListenersGetResult struct {
	AvailabilityGroupListener
}

// AvailabilityGroupListenersListByGroupResponse contains the response from method AvailabilityGroupListeners.ListByGroup.
type AvailabilityGroupListenersListByGroupResponse struct {
	AvailabilityGroupListenersListByGroupResult
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// AvailabilityGroupListenersListByGroupResult contains the result from method AvailabilityGroupListeners.ListByGroup.
type AvailabilityGroupListenersListByGroupResult struct {
	AvailabilityGroupListenerListResult
}

// OperationsListResponse contains the response from method Operations.List.
type OperationsListResponse struct {
	OperationsListResult
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// OperationsListResult contains the result from method Operations.List.
type OperationsListResult struct {
	OperationListResult
}

// SQLVirtualMachineGroupsCreateOrUpdatePollerResponse contains the response from method SQLVirtualMachineGroups.CreateOrUpdate.
type SQLVirtualMachineGroupsCreateOrUpdatePollerResponse struct {
	// Poller contains an initialized poller.
	Poller *SQLVirtualMachineGroupsCreateOrUpdatePoller

	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// PollUntilDone will poll the service endpoint until a terminal state is reached or an error is received.
// freq: the time to wait between intervals in absence of a Retry-After header. Allowed minimum is one second.
// A good starting value is 30 seconds. Note that some resources might benefit from a different value.
func (l SQLVirtualMachineGroupsCreateOrUpdatePollerResponse) PollUntilDone(ctx context.Context, freq time.Duration) (SQLVirtualMachineGroupsCreateOrUpdateResponse, error) {
	respType := SQLVirtualMachineGroupsCreateOrUpdateResponse{}
	resp, err := l.Poller.pt.PollUntilDone(ctx, freq, &respType.SQLVirtualMachineGroup)
	if err != nil {
		return respType, err
	}
	respType.RawResponse = resp
	return respType, nil
}

// Resume rehydrates a SQLVirtualMachineGroupsCreateOrUpdatePollerResponse from the provided client and resume token.
func (l *SQLVirtualMachineGroupsCreateOrUpdatePollerResponse) Resume(ctx context.Context, client *SQLVirtualMachineGroupsClient, token string) error {
	pt, err := armruntime.NewPollerFromResumeToken("SQLVirtualMachineGroupsClient.CreateOrUpdate", token, client.pl, client.createOrUpdateHandleError)
	if err != nil {
		return err
	}
	poller := &SQLVirtualMachineGroupsCreateOrUpdatePoller{
		pt: pt,
	}
	resp, err := poller.Poll(ctx)
	if err != nil {
		return err
	}
	l.Poller = poller
	l.RawResponse = resp
	return nil
}

// SQLVirtualMachineGroupsCreateOrUpdateResponse contains the response from method SQLVirtualMachineGroups.CreateOrUpdate.
type SQLVirtualMachineGroupsCreateOrUpdateResponse struct {
	SQLVirtualMachineGroupsCreateOrUpdateResult
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// SQLVirtualMachineGroupsCreateOrUpdateResult contains the result from method SQLVirtualMachineGroups.CreateOrUpdate.
type SQLVirtualMachineGroupsCreateOrUpdateResult struct {
	SQLVirtualMachineGroup
}

// SQLVirtualMachineGroupsDeletePollerResponse contains the response from method SQLVirtualMachineGroups.Delete.
type SQLVirtualMachineGroupsDeletePollerResponse struct {
	// Poller contains an initialized poller.
	Poller *SQLVirtualMachineGroupsDeletePoller

	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// PollUntilDone will poll the service endpoint until a terminal state is reached or an error is received.
// freq: the time to wait between intervals in absence of a Retry-After header. Allowed minimum is one second.
// A good starting value is 30 seconds. Note that some resources might benefit from a different value.
func (l SQLVirtualMachineGroupsDeletePollerResponse) PollUntilDone(ctx context.Context, freq time.Duration) (SQLVirtualMachineGroupsDeleteResponse, error) {
	respType := SQLVirtualMachineGroupsDeleteResponse{}
	resp, err := l.Poller.pt.PollUntilDone(ctx, freq, nil)
	if err != nil {
		return respType, err
	}
	respType.RawResponse = resp
	return respType, nil
}

// Resume rehydrates a SQLVirtualMachineGroupsDeletePollerResponse from the provided client and resume token.
func (l *SQLVirtualMachineGroupsDeletePollerResponse) Resume(ctx context.Context, client *SQLVirtualMachineGroupsClient, token string) error {
	pt, err := armruntime.NewPollerFromResumeToken("SQLVirtualMachineGroupsClient.Delete", token, client.pl, client.deleteHandleError)
	if err != nil {
		return err
	}
	poller := &SQLVirtualMachineGroupsDeletePoller{
		pt: pt,
	}
	resp, err := poller.Poll(ctx)
	if err != nil {
		return err
	}
	l.Poller = poller
	l.RawResponse = resp
	return nil
}

// SQLVirtualMachineGroupsDeleteResponse contains the response from method SQLVirtualMachineGroups.Delete.
type SQLVirtualMachineGroupsDeleteResponse struct {
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// SQLVirtualMachineGroupsGetResponse contains the response from method SQLVirtualMachineGroups.Get.
type SQLVirtualMachineGroupsGetResponse struct {
	SQLVirtualMachineGroupsGetResult
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// SQLVirtualMachineGroupsGetResult contains the result from method SQLVirtualMachineGroups.Get.
type SQLVirtualMachineGroupsGetResult struct {
	SQLVirtualMachineGroup
}

// SQLVirtualMachineGroupsListByResourceGroupResponse contains the response from method SQLVirtualMachineGroups.ListByResourceGroup.
type SQLVirtualMachineGroupsListByResourceGroupResponse struct {
	SQLVirtualMachineGroupsListByResourceGroupResult
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// SQLVirtualMachineGroupsListByResourceGroupResult contains the result from method SQLVirtualMachineGroups.ListByResourceGroup.
type SQLVirtualMachineGroupsListByResourceGroupResult struct {
	SQLVirtualMachineGroupListResult
}

// SQLVirtualMachineGroupsListResponse contains the response from method SQLVirtualMachineGroups.List.
type SQLVirtualMachineGroupsListResponse struct {
	SQLVirtualMachineGroupsListResult
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// SQLVirtualMachineGroupsListResult contains the result from method SQLVirtualMachineGroups.List.
type SQLVirtualMachineGroupsListResult struct {
	SQLVirtualMachineGroupListResult
}

// SQLVirtualMachineGroupsUpdatePollerResponse contains the response from method SQLVirtualMachineGroups.Update.
type SQLVirtualMachineGroupsUpdatePollerResponse struct {
	// Poller contains an initialized poller.
	Poller *SQLVirtualMachineGroupsUpdatePoller

	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// PollUntilDone will poll the service endpoint until a terminal state is reached or an error is received.
// freq: the time to wait between intervals in absence of a Retry-After header. Allowed minimum is one second.
// A good starting value is 30 seconds. Note that some resources might benefit from a different value.
func (l SQLVirtualMachineGroupsUpdatePollerResponse) PollUntilDone(ctx context.Context, freq time.Duration) (SQLVirtualMachineGroupsUpdateResponse, error) {
	respType := SQLVirtualMachineGroupsUpdateResponse{}
	resp, err := l.Poller.pt.PollUntilDone(ctx, freq, &respType.SQLVirtualMachineGroup)
	if err != nil {
		return respType, err
	}
	respType.RawResponse = resp
	return respType, nil
}

// Resume rehydrates a SQLVirtualMachineGroupsUpdatePollerResponse from the provided client and resume token.
func (l *SQLVirtualMachineGroupsUpdatePollerResponse) Resume(ctx context.Context, client *SQLVirtualMachineGroupsClient, token string) error {
	pt, err := armruntime.NewPollerFromResumeToken("SQLVirtualMachineGroupsClient.Update", token, client.pl, client.updateHandleError)
	if err != nil {
		return err
	}
	poller := &SQLVirtualMachineGroupsUpdatePoller{
		pt: pt,
	}
	resp, err := poller.Poll(ctx)
	if err != nil {
		return err
	}
	l.Poller = poller
	l.RawResponse = resp
	return nil
}

// SQLVirtualMachineGroupsUpdateResponse contains the response from method SQLVirtualMachineGroups.Update.
type SQLVirtualMachineGroupsUpdateResponse struct {
	SQLVirtualMachineGroupsUpdateResult
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// SQLVirtualMachineGroupsUpdateResult contains the result from method SQLVirtualMachineGroups.Update.
type SQLVirtualMachineGroupsUpdateResult struct {
	SQLVirtualMachineGroup
}

// SQLVirtualMachinesCreateOrUpdatePollerResponse contains the response from method SQLVirtualMachines.CreateOrUpdate.
type SQLVirtualMachinesCreateOrUpdatePollerResponse struct {
	// Poller contains an initialized poller.
	Poller *SQLVirtualMachinesCreateOrUpdatePoller

	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// PollUntilDone will poll the service endpoint until a terminal state is reached or an error is received.
// freq: the time to wait between intervals in absence of a Retry-After header. Allowed minimum is one second.
// A good starting value is 30 seconds. Note that some resources might benefit from a different value.
func (l SQLVirtualMachinesCreateOrUpdatePollerResponse) PollUntilDone(ctx context.Context, freq time.Duration) (SQLVirtualMachinesCreateOrUpdateResponse, error) {
	respType := SQLVirtualMachinesCreateOrUpdateResponse{}
	resp, err := l.Poller.pt.PollUntilDone(ctx, freq, &respType.SQLVirtualMachine)
	if err != nil {
		return respType, err
	}
	respType.RawResponse = resp
	return respType, nil
}

// Resume rehydrates a SQLVirtualMachinesCreateOrUpdatePollerResponse from the provided client and resume token.
func (l *SQLVirtualMachinesCreateOrUpdatePollerResponse) Resume(ctx context.Context, client *SQLVirtualMachinesClient, token string) error {
	pt, err := armruntime.NewPollerFromResumeToken("SQLVirtualMachinesClient.CreateOrUpdate", token, client.pl, client.createOrUpdateHandleError)
	if err != nil {
		return err
	}
	poller := &SQLVirtualMachinesCreateOrUpdatePoller{
		pt: pt,
	}
	resp, err := poller.Poll(ctx)
	if err != nil {
		return err
	}
	l.Poller = poller
	l.RawResponse = resp
	return nil
}

// SQLVirtualMachinesCreateOrUpdateResponse contains the response from method SQLVirtualMachines.CreateOrUpdate.
type SQLVirtualMachinesCreateOrUpdateResponse struct {
	SQLVirtualMachinesCreateOrUpdateResult
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// SQLVirtualMachinesCreateOrUpdateResult contains the result from method SQLVirtualMachines.CreateOrUpdate.
type SQLVirtualMachinesCreateOrUpdateResult struct {
	SQLVirtualMachine
}

// SQLVirtualMachinesDeletePollerResponse contains the response from method SQLVirtualMachines.Delete.
type SQLVirtualMachinesDeletePollerResponse struct {
	// Poller contains an initialized poller.
	Poller *SQLVirtualMachinesDeletePoller

	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// PollUntilDone will poll the service endpoint until a terminal state is reached or an error is received.
// freq: the time to wait between intervals in absence of a Retry-After header. Allowed minimum is one second.
// A good starting value is 30 seconds. Note that some resources might benefit from a different value.
func (l SQLVirtualMachinesDeletePollerResponse) PollUntilDone(ctx context.Context, freq time.Duration) (SQLVirtualMachinesDeleteResponse, error) {
	respType := SQLVirtualMachinesDeleteResponse{}
	resp, err := l.Poller.pt.PollUntilDone(ctx, freq, nil)
	if err != nil {
		return respType, err
	}
	respType.RawResponse = resp
	return respType, nil
}

// Resume rehydrates a SQLVirtualMachinesDeletePollerResponse from the provided client and resume token.
func (l *SQLVirtualMachinesDeletePollerResponse) Resume(ctx context.Context, client *SQLVirtualMachinesClient, token string) error {
	pt, err := armruntime.NewPollerFromResumeToken("SQLVirtualMachinesClient.Delete", token, client.pl, client.deleteHandleError)
	if err != nil {
		return err
	}
	poller := &SQLVirtualMachinesDeletePoller{
		pt: pt,
	}
	resp, err := poller.Poll(ctx)
	if err != nil {
		return err
	}
	l.Poller = poller
	l.RawResponse = resp
	return nil
}

// SQLVirtualMachinesDeleteResponse contains the response from method SQLVirtualMachines.Delete.
type SQLVirtualMachinesDeleteResponse struct {
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// SQLVirtualMachinesGetResponse contains the response from method SQLVirtualMachines.Get.
type SQLVirtualMachinesGetResponse struct {
	SQLVirtualMachinesGetResult
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// SQLVirtualMachinesGetResult contains the result from method SQLVirtualMachines.Get.
type SQLVirtualMachinesGetResult struct {
	SQLVirtualMachine
}

// SQLVirtualMachinesListByResourceGroupResponse contains the response from method SQLVirtualMachines.ListByResourceGroup.
type SQLVirtualMachinesListByResourceGroupResponse struct {
	SQLVirtualMachinesListByResourceGroupResult
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// SQLVirtualMachinesListByResourceGroupResult contains the result from method SQLVirtualMachines.ListByResourceGroup.
type SQLVirtualMachinesListByResourceGroupResult struct {
	SQLVirtualMachineListResult
}

// SQLVirtualMachinesListBySQLVMGroupResponse contains the response from method SQLVirtualMachines.ListBySQLVMGroup.
type SQLVirtualMachinesListBySQLVMGroupResponse struct {
	SQLVirtualMachinesListBySQLVMGroupResult
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// SQLVirtualMachinesListBySQLVMGroupResult contains the result from method SQLVirtualMachines.ListBySQLVMGroup.
type SQLVirtualMachinesListBySQLVMGroupResult struct {
	SQLVirtualMachineListResult
}

// SQLVirtualMachinesListResponse contains the response from method SQLVirtualMachines.List.
type SQLVirtualMachinesListResponse struct {
	SQLVirtualMachinesListResult
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// SQLVirtualMachinesListResult contains the result from method SQLVirtualMachines.List.
type SQLVirtualMachinesListResult struct {
	SQLVirtualMachineListResult
}

// SQLVirtualMachinesUpdatePollerResponse contains the response from method SQLVirtualMachines.Update.
type SQLVirtualMachinesUpdatePollerResponse struct {
	// Poller contains an initialized poller.
	Poller *SQLVirtualMachinesUpdatePoller

	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// PollUntilDone will poll the service endpoint until a terminal state is reached or an error is received.
// freq: the time to wait between intervals in absence of a Retry-After header. Allowed minimum is one second.
// A good starting value is 30 seconds. Note that some resources might benefit from a different value.
func (l SQLVirtualMachinesUpdatePollerResponse) PollUntilDone(ctx context.Context, freq time.Duration) (SQLVirtualMachinesUpdateResponse, error) {
	respType := SQLVirtualMachinesUpdateResponse{}
	resp, err := l.Poller.pt.PollUntilDone(ctx, freq, &respType.SQLVirtualMachine)
	if err != nil {
		return respType, err
	}
	respType.RawResponse = resp
	return respType, nil
}

// Resume rehydrates a SQLVirtualMachinesUpdatePollerResponse from the provided client and resume token.
func (l *SQLVirtualMachinesUpdatePollerResponse) Resume(ctx context.Context, client *SQLVirtualMachinesClient, token string) error {
	pt, err := armruntime.NewPollerFromResumeToken("SQLVirtualMachinesClient.Update", token, client.pl, client.updateHandleError)
	if err != nil {
		return err
	}
	poller := &SQLVirtualMachinesUpdatePoller{
		pt: pt,
	}
	resp, err := poller.Poll(ctx)
	if err != nil {
		return err
	}
	l.Poller = poller
	l.RawResponse = resp
	return nil
}

// SQLVirtualMachinesUpdateResponse contains the response from method SQLVirtualMachines.Update.
type SQLVirtualMachinesUpdateResponse struct {
	SQLVirtualMachinesUpdateResult
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// SQLVirtualMachinesUpdateResult contains the result from method SQLVirtualMachines.Update.
type SQLVirtualMachinesUpdateResult struct {
	SQLVirtualMachine
}
