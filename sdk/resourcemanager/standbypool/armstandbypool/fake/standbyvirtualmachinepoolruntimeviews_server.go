// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) Go Code Generator. DO NOT EDIT.

package fake

import (
	"context"
	"errors"
	"fmt"
	azfake "github.com/Azure/azure-sdk-for-go/sdk/azcore/fake"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/fake/server"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/runtime"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/to"
	"github.com/Azure/azure-sdk-for-go/sdk/resourcemanager/standbypool/armstandbypool"
	"net/http"
	"net/url"
	"regexp"
)

// StandbyVirtualMachinePoolRuntimeViewsServer is a fake server for instances of the armstandbypool.StandbyVirtualMachinePoolRuntimeViewsClient type.
type StandbyVirtualMachinePoolRuntimeViewsServer struct {
	// Get is the fake for method StandbyVirtualMachinePoolRuntimeViewsClient.Get
	// HTTP status codes to indicate success: http.StatusOK
	Get func(ctx context.Context, resourceGroupName string, standbyVirtualMachinePoolName string, runtimeView string, options *armstandbypool.StandbyVirtualMachinePoolRuntimeViewsClientGetOptions) (resp azfake.Responder[armstandbypool.StandbyVirtualMachinePoolRuntimeViewsClientGetResponse], errResp azfake.ErrorResponder)

	// NewListByStandbyPoolPager is the fake for method StandbyVirtualMachinePoolRuntimeViewsClient.NewListByStandbyPoolPager
	// HTTP status codes to indicate success: http.StatusOK
	NewListByStandbyPoolPager func(resourceGroupName string, standbyVirtualMachinePoolName string, options *armstandbypool.StandbyVirtualMachinePoolRuntimeViewsClientListByStandbyPoolOptions) (resp azfake.PagerResponder[armstandbypool.StandbyVirtualMachinePoolRuntimeViewsClientListByStandbyPoolResponse])
}

// NewStandbyVirtualMachinePoolRuntimeViewsServerTransport creates a new instance of StandbyVirtualMachinePoolRuntimeViewsServerTransport with the provided implementation.
// The returned StandbyVirtualMachinePoolRuntimeViewsServerTransport instance is connected to an instance of armstandbypool.StandbyVirtualMachinePoolRuntimeViewsClient via the
// azcore.ClientOptions.Transporter field in the client's constructor parameters.
func NewStandbyVirtualMachinePoolRuntimeViewsServerTransport(srv *StandbyVirtualMachinePoolRuntimeViewsServer) *StandbyVirtualMachinePoolRuntimeViewsServerTransport {
	return &StandbyVirtualMachinePoolRuntimeViewsServerTransport{
		srv:                       srv,
		newListByStandbyPoolPager: newTracker[azfake.PagerResponder[armstandbypool.StandbyVirtualMachinePoolRuntimeViewsClientListByStandbyPoolResponse]](),
	}
}

// StandbyVirtualMachinePoolRuntimeViewsServerTransport connects instances of armstandbypool.StandbyVirtualMachinePoolRuntimeViewsClient to instances of StandbyVirtualMachinePoolRuntimeViewsServer.
// Don't use this type directly, use NewStandbyVirtualMachinePoolRuntimeViewsServerTransport instead.
type StandbyVirtualMachinePoolRuntimeViewsServerTransport struct {
	srv                       *StandbyVirtualMachinePoolRuntimeViewsServer
	newListByStandbyPoolPager *tracker[azfake.PagerResponder[armstandbypool.StandbyVirtualMachinePoolRuntimeViewsClientListByStandbyPoolResponse]]
}

// Do implements the policy.Transporter interface for StandbyVirtualMachinePoolRuntimeViewsServerTransport.
func (s *StandbyVirtualMachinePoolRuntimeViewsServerTransport) Do(req *http.Request) (*http.Response, error) {
	rawMethod := req.Context().Value(runtime.CtxAPINameKey{})
	method, ok := rawMethod.(string)
	if !ok {
		return nil, nonRetriableError{errors.New("unable to dispatch request, missing value for CtxAPINameKey")}
	}

	return s.dispatchToMethodFake(req, method)
}

func (s *StandbyVirtualMachinePoolRuntimeViewsServerTransport) dispatchToMethodFake(req *http.Request, method string) (*http.Response, error) {
	var resp *http.Response
	var err error

	switch method {
	case "StandbyVirtualMachinePoolRuntimeViewsClient.Get":
		resp, err = s.dispatchGet(req)
	case "StandbyVirtualMachinePoolRuntimeViewsClient.NewListByStandbyPoolPager":
		resp, err = s.dispatchNewListByStandbyPoolPager(req)
	default:
		err = fmt.Errorf("unhandled API %s", method)
	}

	return resp, err
}

func (s *StandbyVirtualMachinePoolRuntimeViewsServerTransport) dispatchGet(req *http.Request) (*http.Response, error) {
	if s.srv.Get == nil {
		return nil, &nonRetriableError{errors.New("fake for method Get not implemented")}
	}
	const regexStr = `/subscriptions/(?P<subscriptionId>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/resourceGroups/(?P<resourceGroupName>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/providers/Microsoft\.StandbyPool/standbyVirtualMachinePools/(?P<standbyVirtualMachinePoolName>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/runtimeViews/(?P<runtimeView>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)`
	regex := regexp.MustCompile(regexStr)
	matches := regex.FindStringSubmatch(req.URL.EscapedPath())
	if matches == nil || len(matches) < 4 {
		return nil, fmt.Errorf("failed to parse path %s", req.URL.Path)
	}
	resourceGroupNameParam, err := url.PathUnescape(matches[regex.SubexpIndex("resourceGroupName")])
	if err != nil {
		return nil, err
	}
	standbyVirtualMachinePoolNameParam, err := url.PathUnescape(matches[regex.SubexpIndex("standbyVirtualMachinePoolName")])
	if err != nil {
		return nil, err
	}
	runtimeViewParam, err := url.PathUnescape(matches[regex.SubexpIndex("runtimeView")])
	if err != nil {
		return nil, err
	}
	respr, errRespr := s.srv.Get(req.Context(), resourceGroupNameParam, standbyVirtualMachinePoolNameParam, runtimeViewParam, nil)
	if respErr := server.GetError(errRespr, req); respErr != nil {
		return nil, respErr
	}
	respContent := server.GetResponseContent(respr)
	if !contains([]int{http.StatusOK}, respContent.HTTPStatus) {
		return nil, &nonRetriableError{fmt.Errorf("unexpected status code %d. acceptable values are http.StatusOK", respContent.HTTPStatus)}
	}
	resp, err := server.MarshalResponseAsJSON(respContent, server.GetResponse(respr).StandbyVirtualMachinePoolRuntimeViewResource, req)
	if err != nil {
		return nil, err
	}
	return resp, nil
}

func (s *StandbyVirtualMachinePoolRuntimeViewsServerTransport) dispatchNewListByStandbyPoolPager(req *http.Request) (*http.Response, error) {
	if s.srv.NewListByStandbyPoolPager == nil {
		return nil, &nonRetriableError{errors.New("fake for method NewListByStandbyPoolPager not implemented")}
	}
	newListByStandbyPoolPager := s.newListByStandbyPoolPager.get(req)
	if newListByStandbyPoolPager == nil {
		const regexStr = `/subscriptions/(?P<subscriptionId>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/resourceGroups/(?P<resourceGroupName>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/providers/Microsoft\.StandbyPool/standbyVirtualMachinePools/(?P<standbyVirtualMachinePoolName>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/runtimeViews`
		regex := regexp.MustCompile(regexStr)
		matches := regex.FindStringSubmatch(req.URL.EscapedPath())
		if matches == nil || len(matches) < 3 {
			return nil, fmt.Errorf("failed to parse path %s", req.URL.Path)
		}
		resourceGroupNameParam, err := url.PathUnescape(matches[regex.SubexpIndex("resourceGroupName")])
		if err != nil {
			return nil, err
		}
		standbyVirtualMachinePoolNameParam, err := url.PathUnescape(matches[regex.SubexpIndex("standbyVirtualMachinePoolName")])
		if err != nil {
			return nil, err
		}
		resp := s.srv.NewListByStandbyPoolPager(resourceGroupNameParam, standbyVirtualMachinePoolNameParam, nil)
		newListByStandbyPoolPager = &resp
		s.newListByStandbyPoolPager.add(req, newListByStandbyPoolPager)
		server.PagerResponderInjectNextLinks(newListByStandbyPoolPager, req, func(page *armstandbypool.StandbyVirtualMachinePoolRuntimeViewsClientListByStandbyPoolResponse, createLink func() string) {
			page.NextLink = to.Ptr(createLink())
		})
	}
	resp, err := server.PagerResponderNext(newListByStandbyPoolPager, req)
	if err != nil {
		return nil, err
	}
	if !contains([]int{http.StatusOK}, resp.StatusCode) {
		s.newListByStandbyPoolPager.remove(req)
		return nil, &nonRetriableError{fmt.Errorf("unexpected status code %d. acceptable values are http.StatusOK", resp.StatusCode)}
	}
	if !server.PagerResponderMore(newListByStandbyPoolPager) {
		s.newListByStandbyPoolPager.remove(req)
	}
	return resp, nil
}
