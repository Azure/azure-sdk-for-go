// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator. DO NOT EDIT.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

package armstoragecache

import (
	"context"
	"errors"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/arm"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/policy"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/runtime"
	"net/http"
	"net/url"
	"strings"
)

// AutoImportJobsClient contains the methods for the AutoImportJobs group.
// Don't use this type directly, use NewAutoImportJobsClient() instead.
type AutoImportJobsClient struct {
	internal       *arm.Client
	subscriptionID string
}

// NewAutoImportJobsClient creates a new instance of AutoImportJobsClient with the specified values.
//   - subscriptionID - The ID of the target subscription.
//   - credential - used to authorize requests. Usually a credential from azidentity.
//   - options - pass nil to accept the default values.
func NewAutoImportJobsClient(subscriptionID string, credential azcore.TokenCredential, options *arm.ClientOptions) (*AutoImportJobsClient, error) {
	cl, err := arm.NewClient(moduleName, moduleVersion, credential, options)
	if err != nil {
		return nil, err
	}
	client := &AutoImportJobsClient{
		subscriptionID: subscriptionID,
		internal:       cl,
	}
	return client, nil
}

// BeginCreateOrUpdate - Create or update an auto import job.
// If the operation fails it returns an *azcore.ResponseError type.
//
// Generated from API version 2025-07-01
//   - resourceGroupName - The name of the resource group. The name is case insensitive.
//   - amlFilesystemName - Name for the AML file system. Allows alphanumerics, underscores, and hyphens. Start and end with alphanumeric.
//   - autoImportJobName - Name for the auto import job. Allows alphanumerics, underscores, and hyphens. Start and end with alphanumeric.
//   - autoImportJob - Object containing the user-selectable properties of the auto import job. If read-only properties are included,
//     they must match the existing values of those properties.
//   - options - AutoImportJobsClientBeginCreateOrUpdateOptions contains the optional parameters for the AutoImportJobsClient.BeginCreateOrUpdate
//     method.
func (client *AutoImportJobsClient) BeginCreateOrUpdate(ctx context.Context, resourceGroupName string, amlFilesystemName string, autoImportJobName string, autoImportJob AutoImportJob, options *AutoImportJobsClientBeginCreateOrUpdateOptions) (*runtime.Poller[AutoImportJobsClientCreateOrUpdateResponse], error) {
	if options == nil || options.ResumeToken == "" {
		resp, err := client.createOrUpdate(ctx, resourceGroupName, amlFilesystemName, autoImportJobName, autoImportJob, options)
		if err != nil {
			return nil, err
		}
		poller, err := runtime.NewPoller(resp, client.internal.Pipeline(), &runtime.NewPollerOptions[AutoImportJobsClientCreateOrUpdateResponse]{
			FinalStateVia: runtime.FinalStateViaAzureAsyncOp,
			Tracer:        client.internal.Tracer(),
		})
		return poller, err
	} else {
		return runtime.NewPollerFromResumeToken(options.ResumeToken, client.internal.Pipeline(), &runtime.NewPollerFromResumeTokenOptions[AutoImportJobsClientCreateOrUpdateResponse]{
			Tracer: client.internal.Tracer(),
		})
	}
}

// CreateOrUpdate - Create or update an auto import job.
// If the operation fails it returns an *azcore.ResponseError type.
//
// Generated from API version 2025-07-01
func (client *AutoImportJobsClient) createOrUpdate(ctx context.Context, resourceGroupName string, amlFilesystemName string, autoImportJobName string, autoImportJob AutoImportJob, options *AutoImportJobsClientBeginCreateOrUpdateOptions) (*http.Response, error) {
	var err error
	const operationName = "AutoImportJobsClient.BeginCreateOrUpdate"
	ctx = context.WithValue(ctx, runtime.CtxAPINameKey{}, operationName)
	ctx, endSpan := runtime.StartSpan(ctx, operationName, client.internal.Tracer(), nil)
	defer func() { endSpan(err) }()
	req, err := client.createOrUpdateCreateRequest(ctx, resourceGroupName, amlFilesystemName, autoImportJobName, autoImportJob, options)
	if err != nil {
		return nil, err
	}
	httpResp, err := client.internal.Pipeline().Do(req)
	if err != nil {
		return nil, err
	}
	if !runtime.HasStatusCode(httpResp, http.StatusOK, http.StatusCreated) {
		err = runtime.NewResponseError(httpResp)
		return nil, err
	}
	return httpResp, nil
}

// createOrUpdateCreateRequest creates the CreateOrUpdate request.
func (client *AutoImportJobsClient) createOrUpdateCreateRequest(ctx context.Context, resourceGroupName string, amlFilesystemName string, autoImportJobName string, autoImportJob AutoImportJob, _ *AutoImportJobsClientBeginCreateOrUpdateOptions) (*policy.Request, error) {
	urlPath := "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.StorageCache/amlFilesystems/{amlFilesystemName}/autoImportJobs/{autoImportJobName}"
	if resourceGroupName == "" {
		return nil, errors.New("parameter resourceGroupName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{resourceGroupName}", url.PathEscape(resourceGroupName))
	if client.subscriptionID == "" {
		return nil, errors.New("parameter client.subscriptionID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{subscriptionId}", url.PathEscape(client.subscriptionID))
	if amlFilesystemName == "" {
		return nil, errors.New("parameter amlFilesystemName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{amlFilesystemName}", url.PathEscape(amlFilesystemName))
	if autoImportJobName == "" {
		return nil, errors.New("parameter autoImportJobName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{autoImportJobName}", url.PathEscape(autoImportJobName))
	req, err := runtime.NewRequest(ctx, http.MethodPut, runtime.JoinPaths(client.internal.Endpoint(), urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("api-version", "2025-07-01")
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header["Accept"] = []string{"application/json"}
	if err := runtime.MarshalAsJSON(req, autoImportJob); err != nil {
		return nil, err
	}
	return req, nil
}

// BeginDelete - Schedules an auto import job for deletion.
// If the operation fails it returns an *azcore.ResponseError type.
//
// Generated from API version 2025-07-01
//   - resourceGroupName - The name of the resource group. The name is case insensitive.
//   - amlFilesystemName - Name for the AML file system. Allows alphanumerics, underscores, and hyphens. Start and end with alphanumeric.
//   - autoImportJobName - Name for the auto import job. Allows alphanumerics, underscores, and hyphens. Start and end with alphanumeric.
//   - options - AutoImportJobsClientBeginDeleteOptions contains the optional parameters for the AutoImportJobsClient.BeginDelete
//     method.
func (client *AutoImportJobsClient) BeginDelete(ctx context.Context, resourceGroupName string, amlFilesystemName string, autoImportJobName string, options *AutoImportJobsClientBeginDeleteOptions) (*runtime.Poller[AutoImportJobsClientDeleteResponse], error) {
	if options == nil || options.ResumeToken == "" {
		resp, err := client.deleteOperation(ctx, resourceGroupName, amlFilesystemName, autoImportJobName, options)
		if err != nil {
			return nil, err
		}
		poller, err := runtime.NewPoller(resp, client.internal.Pipeline(), &runtime.NewPollerOptions[AutoImportJobsClientDeleteResponse]{
			FinalStateVia: runtime.FinalStateViaLocation,
			Tracer:        client.internal.Tracer(),
		})
		return poller, err
	} else {
		return runtime.NewPollerFromResumeToken(options.ResumeToken, client.internal.Pipeline(), &runtime.NewPollerFromResumeTokenOptions[AutoImportJobsClientDeleteResponse]{
			Tracer: client.internal.Tracer(),
		})
	}
}

// Delete - Schedules an auto import job for deletion.
// If the operation fails it returns an *azcore.ResponseError type.
//
// Generated from API version 2025-07-01
func (client *AutoImportJobsClient) deleteOperation(ctx context.Context, resourceGroupName string, amlFilesystemName string, autoImportJobName string, options *AutoImportJobsClientBeginDeleteOptions) (*http.Response, error) {
	var err error
	const operationName = "AutoImportJobsClient.BeginDelete"
	ctx = context.WithValue(ctx, runtime.CtxAPINameKey{}, operationName)
	ctx, endSpan := runtime.StartSpan(ctx, operationName, client.internal.Tracer(), nil)
	defer func() { endSpan(err) }()
	req, err := client.deleteCreateRequest(ctx, resourceGroupName, amlFilesystemName, autoImportJobName, options)
	if err != nil {
		return nil, err
	}
	httpResp, err := client.internal.Pipeline().Do(req)
	if err != nil {
		return nil, err
	}
	if !runtime.HasStatusCode(httpResp, http.StatusAccepted, http.StatusNoContent) {
		err = runtime.NewResponseError(httpResp)
		return nil, err
	}
	return httpResp, nil
}

// deleteCreateRequest creates the Delete request.
func (client *AutoImportJobsClient) deleteCreateRequest(ctx context.Context, resourceGroupName string, amlFilesystemName string, autoImportJobName string, _ *AutoImportJobsClientBeginDeleteOptions) (*policy.Request, error) {
	urlPath := "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.StorageCache/amlFilesystems/{amlFilesystemName}/autoImportJobs/{autoImportJobName}"
	if resourceGroupName == "" {
		return nil, errors.New("parameter resourceGroupName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{resourceGroupName}", url.PathEscape(resourceGroupName))
	if amlFilesystemName == "" {
		return nil, errors.New("parameter amlFilesystemName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{amlFilesystemName}", url.PathEscape(amlFilesystemName))
	if client.subscriptionID == "" {
		return nil, errors.New("parameter client.subscriptionID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{subscriptionId}", url.PathEscape(client.subscriptionID))
	if autoImportJobName == "" {
		return nil, errors.New("parameter autoImportJobName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{autoImportJobName}", url.PathEscape(autoImportJobName))
	req, err := runtime.NewRequest(ctx, http.MethodDelete, runtime.JoinPaths(client.internal.Endpoint(), urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("api-version", "2025-07-01")
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header["Accept"] = []string{"application/json"}
	return req, nil
}

// Get - Returns an auto import job.
// If the operation fails it returns an *azcore.ResponseError type.
//
// Generated from API version 2025-07-01
//   - resourceGroupName - The name of the resource group. The name is case insensitive.
//   - amlFilesystemName - Name for the AML file system. Allows alphanumerics, underscores, and hyphens. Start and end with alphanumeric.
//   - autoImportJobName - Name for the auto import job. Allows alphanumerics, underscores, and hyphens. Start and end with alphanumeric.
//   - options - AutoImportJobsClientGetOptions contains the optional parameters for the AutoImportJobsClient.Get method.
func (client *AutoImportJobsClient) Get(ctx context.Context, resourceGroupName string, amlFilesystemName string, autoImportJobName string, options *AutoImportJobsClientGetOptions) (AutoImportJobsClientGetResponse, error) {
	var err error
	const operationName = "AutoImportJobsClient.Get"
	ctx = context.WithValue(ctx, runtime.CtxAPINameKey{}, operationName)
	ctx, endSpan := runtime.StartSpan(ctx, operationName, client.internal.Tracer(), nil)
	defer func() { endSpan(err) }()
	req, err := client.getCreateRequest(ctx, resourceGroupName, amlFilesystemName, autoImportJobName, options)
	if err != nil {
		return AutoImportJobsClientGetResponse{}, err
	}
	httpResp, err := client.internal.Pipeline().Do(req)
	if err != nil {
		return AutoImportJobsClientGetResponse{}, err
	}
	if !runtime.HasStatusCode(httpResp, http.StatusOK) {
		err = runtime.NewResponseError(httpResp)
		return AutoImportJobsClientGetResponse{}, err
	}
	resp, err := client.getHandleResponse(httpResp)
	return resp, err
}

// getCreateRequest creates the Get request.
func (client *AutoImportJobsClient) getCreateRequest(ctx context.Context, resourceGroupName string, amlFilesystemName string, autoImportJobName string, _ *AutoImportJobsClientGetOptions) (*policy.Request, error) {
	urlPath := "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.StorageCache/amlFilesystems/{amlFilesystemName}/autoImportJobs/{autoImportJobName}"
	if resourceGroupName == "" {
		return nil, errors.New("parameter resourceGroupName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{resourceGroupName}", url.PathEscape(resourceGroupName))
	if amlFilesystemName == "" {
		return nil, errors.New("parameter amlFilesystemName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{amlFilesystemName}", url.PathEscape(amlFilesystemName))
	if client.subscriptionID == "" {
		return nil, errors.New("parameter client.subscriptionID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{subscriptionId}", url.PathEscape(client.subscriptionID))
	if autoImportJobName == "" {
		return nil, errors.New("parameter autoImportJobName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{autoImportJobName}", url.PathEscape(autoImportJobName))
	req, err := runtime.NewRequest(ctx, http.MethodGet, runtime.JoinPaths(client.internal.Endpoint(), urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("api-version", "2025-07-01")
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header["Accept"] = []string{"application/json"}
	return req, nil
}

// getHandleResponse handles the Get response.
func (client *AutoImportJobsClient) getHandleResponse(resp *http.Response) (AutoImportJobsClientGetResponse, error) {
	result := AutoImportJobsClientGetResponse{}
	if err := runtime.UnmarshalAsJSON(resp, &result.AutoImportJob); err != nil {
		return AutoImportJobsClientGetResponse{}, err
	}
	return result, nil
}

// NewListByAmlFilesystemPager - Returns all the auto import jobs the user has access to under an AML File System.
//
// Generated from API version 2025-07-01
//   - resourceGroupName - The name of the resource group. The name is case insensitive.
//   - amlFilesystemName - Name for the AML file system. Allows alphanumerics, underscores, and hyphens. Start and end with alphanumeric.
//   - options - AutoImportJobsClientListByAmlFilesystemOptions contains the optional parameters for the AutoImportJobsClient.NewListByAmlFilesystemPager
//     method.
func (client *AutoImportJobsClient) NewListByAmlFilesystemPager(resourceGroupName string, amlFilesystemName string, options *AutoImportJobsClientListByAmlFilesystemOptions) *runtime.Pager[AutoImportJobsClientListByAmlFilesystemResponse] {
	return runtime.NewPager(runtime.PagingHandler[AutoImportJobsClientListByAmlFilesystemResponse]{
		More: func(page AutoImportJobsClientListByAmlFilesystemResponse) bool {
			return page.NextLink != nil && len(*page.NextLink) > 0
		},
		Fetcher: func(ctx context.Context, page *AutoImportJobsClientListByAmlFilesystemResponse) (AutoImportJobsClientListByAmlFilesystemResponse, error) {
			ctx = context.WithValue(ctx, runtime.CtxAPINameKey{}, "AutoImportJobsClient.NewListByAmlFilesystemPager")
			nextLink := ""
			if page != nil {
				nextLink = *page.NextLink
			}
			resp, err := runtime.FetcherForNextLink(ctx, client.internal.Pipeline(), nextLink, func(ctx context.Context) (*policy.Request, error) {
				return client.listByAmlFilesystemCreateRequest(ctx, resourceGroupName, amlFilesystemName, options)
			}, nil)
			if err != nil {
				return AutoImportJobsClientListByAmlFilesystemResponse{}, err
			}
			return client.listByAmlFilesystemHandleResponse(resp)
		},
		Tracer: client.internal.Tracer(),
	})
}

// listByAmlFilesystemCreateRequest creates the ListByAmlFilesystem request.
func (client *AutoImportJobsClient) listByAmlFilesystemCreateRequest(ctx context.Context, resourceGroupName string, amlFilesystemName string, _ *AutoImportJobsClientListByAmlFilesystemOptions) (*policy.Request, error) {
	urlPath := "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.StorageCache/amlFilesystems/{amlFilesystemName}/autoImportJobs"
	if resourceGroupName == "" {
		return nil, errors.New("parameter resourceGroupName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{resourceGroupName}", url.PathEscape(resourceGroupName))
	if client.subscriptionID == "" {
		return nil, errors.New("parameter client.subscriptionID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{subscriptionId}", url.PathEscape(client.subscriptionID))
	if amlFilesystemName == "" {
		return nil, errors.New("parameter amlFilesystemName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{amlFilesystemName}", url.PathEscape(amlFilesystemName))
	req, err := runtime.NewRequest(ctx, http.MethodGet, runtime.JoinPaths(client.internal.Endpoint(), urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("api-version", "2025-07-01")
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header["Accept"] = []string{"application/json"}
	return req, nil
}

// listByAmlFilesystemHandleResponse handles the ListByAmlFilesystem response.
func (client *AutoImportJobsClient) listByAmlFilesystemHandleResponse(resp *http.Response) (AutoImportJobsClientListByAmlFilesystemResponse, error) {
	result := AutoImportJobsClientListByAmlFilesystemResponse{}
	if err := runtime.UnmarshalAsJSON(resp, &result.AutoImportJobsListResult); err != nil {
		return AutoImportJobsClientListByAmlFilesystemResponse{}, err
	}
	return result, nil
}

// BeginUpdate - Update an auto import job instance.
// If the operation fails it returns an *azcore.ResponseError type.
//
// Generated from API version 2025-07-01
//   - resourceGroupName - The name of the resource group. The name is case insensitive.
//   - amlFilesystemName - Name for the AML file system. Allows alphanumerics, underscores, and hyphens. Start and end with alphanumeric.
//   - autoImportJobName - Name for the auto import job. Allows alphanumerics, underscores, and hyphens. Start and end with alphanumeric.
//   - autoImportJob - Object containing the user-selectable properties of the auto import job. If read-only properties are included,
//     they must match the existing values of those properties.
//   - options - AutoImportJobsClientBeginUpdateOptions contains the optional parameters for the AutoImportJobsClient.BeginUpdate
//     method.
func (client *AutoImportJobsClient) BeginUpdate(ctx context.Context, resourceGroupName string, amlFilesystemName string, autoImportJobName string, autoImportJob AutoImportJobUpdate, options *AutoImportJobsClientBeginUpdateOptions) (*runtime.Poller[AutoImportJobsClientUpdateResponse], error) {
	if options == nil || options.ResumeToken == "" {
		resp, err := client.update(ctx, resourceGroupName, amlFilesystemName, autoImportJobName, autoImportJob, options)
		if err != nil {
			return nil, err
		}
		poller, err := runtime.NewPoller(resp, client.internal.Pipeline(), &runtime.NewPollerOptions[AutoImportJobsClientUpdateResponse]{
			FinalStateVia: runtime.FinalStateViaAzureAsyncOp,
			Tracer:        client.internal.Tracer(),
		})
		return poller, err
	} else {
		return runtime.NewPollerFromResumeToken(options.ResumeToken, client.internal.Pipeline(), &runtime.NewPollerFromResumeTokenOptions[AutoImportJobsClientUpdateResponse]{
			Tracer: client.internal.Tracer(),
		})
	}
}

// Update - Update an auto import job instance.
// If the operation fails it returns an *azcore.ResponseError type.
//
// Generated from API version 2025-07-01
func (client *AutoImportJobsClient) update(ctx context.Context, resourceGroupName string, amlFilesystemName string, autoImportJobName string, autoImportJob AutoImportJobUpdate, options *AutoImportJobsClientBeginUpdateOptions) (*http.Response, error) {
	var err error
	const operationName = "AutoImportJobsClient.BeginUpdate"
	ctx = context.WithValue(ctx, runtime.CtxAPINameKey{}, operationName)
	ctx, endSpan := runtime.StartSpan(ctx, operationName, client.internal.Tracer(), nil)
	defer func() { endSpan(err) }()
	req, err := client.updateCreateRequest(ctx, resourceGroupName, amlFilesystemName, autoImportJobName, autoImportJob, options)
	if err != nil {
		return nil, err
	}
	httpResp, err := client.internal.Pipeline().Do(req)
	if err != nil {
		return nil, err
	}
	if !runtime.HasStatusCode(httpResp, http.StatusOK, http.StatusAccepted) {
		err = runtime.NewResponseError(httpResp)
		return nil, err
	}
	return httpResp, nil
}

// updateCreateRequest creates the Update request.
func (client *AutoImportJobsClient) updateCreateRequest(ctx context.Context, resourceGroupName string, amlFilesystemName string, autoImportJobName string, autoImportJob AutoImportJobUpdate, _ *AutoImportJobsClientBeginUpdateOptions) (*policy.Request, error) {
	urlPath := "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.StorageCache/amlFilesystems/{amlFilesystemName}/autoImportJobs/{autoImportJobName}"
	if resourceGroupName == "" {
		return nil, errors.New("parameter resourceGroupName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{resourceGroupName}", url.PathEscape(resourceGroupName))
	if client.subscriptionID == "" {
		return nil, errors.New("parameter client.subscriptionID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{subscriptionId}", url.PathEscape(client.subscriptionID))
	if amlFilesystemName == "" {
		return nil, errors.New("parameter amlFilesystemName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{amlFilesystemName}", url.PathEscape(amlFilesystemName))
	if autoImportJobName == "" {
		return nil, errors.New("parameter autoImportJobName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{autoImportJobName}", url.PathEscape(autoImportJobName))
	req, err := runtime.NewRequest(ctx, http.MethodPatch, runtime.JoinPaths(client.internal.Endpoint(), urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("api-version", "2025-07-01")
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header["Accept"] = []string{"application/json"}
	if err := runtime.MarshalAsJSON(req, autoImportJob); err != nil {
		return nil, err
	}
	return req, nil
}
