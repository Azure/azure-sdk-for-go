//go:build go1.16
// +build go1.16

// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

package armstoragecache_test

import (
	"context"
	"log"

	"time"

	"github.com/Azure/azure-sdk-for-go/sdk/azcore/to"
	"github.com/Azure/azure-sdk-for-go/sdk/azidentity"
	"github.com/Azure/azure-sdk-for-go/sdk/resourcemanager/storagecache/armstoragecache"
)

// x-ms-original-file: specification/storagecache/resource-manager/Microsoft.StorageCache/stable/2021-09-01/examples/Caches_List.json
func ExampleCachesClient_List() {
	cred, err := azidentity.NewDefaultAzureCredential(nil)
	if err != nil {
		log.Fatalf("failed to obtain a credential: %v", err)
	}
	ctx := context.Background()
	client := armstoragecache.NewCachesClient("<subscription-id>", cred, nil)
	pager := client.List(nil)
	for {
		nextResult := pager.NextPage(ctx)
		if err := pager.Err(); err != nil {
			log.Fatalf("failed to advance page: %v", err)
		}
		if !nextResult {
			break
		}
		for _, v := range pager.PageResponse().Value {
			log.Printf("Pager result: %#v\n", v)
		}
	}
}

// x-ms-original-file: specification/storagecache/resource-manager/Microsoft.StorageCache/stable/2021-09-01/examples/Caches_ListByResourceGroup.json
func ExampleCachesClient_ListByResourceGroup() {
	cred, err := azidentity.NewDefaultAzureCredential(nil)
	if err != nil {
		log.Fatalf("failed to obtain a credential: %v", err)
	}
	ctx := context.Background()
	client := armstoragecache.NewCachesClient("<subscription-id>", cred, nil)
	pager := client.ListByResourceGroup("<resource-group-name>",
		nil)
	for {
		nextResult := pager.NextPage(ctx)
		if err := pager.Err(); err != nil {
			log.Fatalf("failed to advance page: %v", err)
		}
		if !nextResult {
			break
		}
		for _, v := range pager.PageResponse().Value {
			log.Printf("Pager result: %#v\n", v)
		}
	}
}

// x-ms-original-file: specification/storagecache/resource-manager/Microsoft.StorageCache/stable/2021-09-01/examples/Caches_Delete.json
func ExampleCachesClient_BeginDelete() {
	cred, err := azidentity.NewDefaultAzureCredential(nil)
	if err != nil {
		log.Fatalf("failed to obtain a credential: %v", err)
	}
	ctx := context.Background()
	client := armstoragecache.NewCachesClient("<subscription-id>", cred, nil)
	poller, err := client.BeginDelete(ctx,
		"<resource-group-name>",
		"<cache-name>",
		nil)
	if err != nil {
		log.Fatal(err)
	}
	_, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		log.Fatal(err)
	}
}

// x-ms-original-file: specification/storagecache/resource-manager/Microsoft.StorageCache/stable/2021-09-01/examples/Caches_Get.json
func ExampleCachesClient_Get() {
	cred, err := azidentity.NewDefaultAzureCredential(nil)
	if err != nil {
		log.Fatalf("failed to obtain a credential: %v", err)
	}
	ctx := context.Background()
	client := armstoragecache.NewCachesClient("<subscription-id>", cred, nil)
	res, err := client.Get(ctx,
		"<resource-group-name>",
		"<cache-name>",
		nil)
	if err != nil {
		log.Fatal(err)
	}
	log.Printf("Response result: %#v\n", res.CachesClientGetResult)
}

// x-ms-original-file: specification/storagecache/resource-manager/Microsoft.StorageCache/stable/2021-09-01/examples/Caches_CreateOrUpdate.json
func ExampleCachesClient_BeginCreateOrUpdate() {
	cred, err := azidentity.NewDefaultAzureCredential(nil)
	if err != nil {
		log.Fatalf("failed to obtain a credential: %v", err)
	}
	ctx := context.Background()
	client := armstoragecache.NewCachesClient("<subscription-id>", cred, nil)
	poller, err := client.BeginCreateOrUpdate(ctx,
		"<resource-group-name>",
		"<cache-name>",
		&armstoragecache.CachesClientBeginCreateOrUpdateOptions{Cache: &armstoragecache.Cache{
			Identity: &armstoragecache.CacheIdentity{
				Type: armstoragecache.CacheIdentityTypeUserAssigned.ToPtr(),
				UserAssignedIdentities: map[string]*armstoragecache.UserAssignedIdentitiesValue{
					"/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/scgroup/providers/Microsoft.ManagedIdentity/userAssignedIdentities/identity1": {},
				},
			},
			Location: to.StringPtr("<location>"),
			Properties: &armstoragecache.CacheProperties{
				CacheSizeGB: to.Int32Ptr(3072),
				DirectoryServicesSettings: &armstoragecache.CacheDirectorySettings{
					ActiveDirectory: &armstoragecache.CacheActiveDirectorySettings{
						CacheNetBiosName: to.StringPtr("<cache-net-bios-name>"),
						Credentials: &armstoragecache.CacheActiveDirectorySettingsCredentials{
							Password: to.StringPtr("<password>"),
							Username: to.StringPtr("<username>"),
						},
						DomainName:            to.StringPtr("<domain-name>"),
						DomainNetBiosName:     to.StringPtr("<domain-net-bios-name>"),
						PrimaryDNSIPAddress:   to.StringPtr("<primary-dnsipaddress>"),
						SecondaryDNSIPAddress: to.StringPtr("<secondary-dnsipaddress>"),
					},
					UsernameDownload: &armstoragecache.CacheUsernameDownloadSettings{
						Credentials: &armstoragecache.CacheUsernameDownloadSettingsCredentials{
							BindDn:       to.StringPtr("<bind-dn>"),
							BindPassword: to.StringPtr("<bind-password>"),
						},
						ExtendedGroups: to.BoolPtr(true),
						LdapBaseDN:     to.StringPtr("<ldap-base-dn>"),
						LdapServer:     to.StringPtr("<ldap-server>"),
						UsernameSource: armstoragecache.UsernameSource("LDAP").ToPtr(),
					},
				},
				EncryptionSettings: &armstoragecache.CacheEncryptionSettings{
					KeyEncryptionKey: &armstoragecache.KeyVaultKeyReference{
						KeyURL: to.StringPtr("<key-url>"),
						SourceVault: &armstoragecache.KeyVaultKeyReferenceSourceVault{
							ID: to.StringPtr("<id>"),
						},
					},
				},
				SecuritySettings: &armstoragecache.CacheSecuritySettings{
					AccessPolicies: []*armstoragecache.NfsAccessPolicy{
						{
							Name: to.StringPtr("<name>"),
							AccessRules: []*armstoragecache.NfsAccessRule{
								{
									Access:         armstoragecache.NfsAccessRuleAccess("rw").ToPtr(),
									RootSquash:     to.BoolPtr(false),
									Scope:          armstoragecache.NfsAccessRuleScope("default").ToPtr(),
									SubmountAccess: to.BoolPtr(true),
									Suid:           to.BoolPtr(false),
								}},
						}},
				},
				Subnet: to.StringPtr("<subnet>"),
			},
			SKU: &armstoragecache.CacheSKU{
				Name: to.StringPtr("<name>"),
			},
			Tags: map[string]*string{
				"Dept": to.StringPtr("Contoso"),
			},
		},
		})
	if err != nil {
		log.Fatal(err)
	}
	res, err := poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		log.Fatal(err)
	}
	log.Printf("Response result: %#v\n", res.CachesClientCreateOrUpdateResult)
}

// x-ms-original-file: specification/storagecache/resource-manager/Microsoft.StorageCache/stable/2021-09-01/examples/Caches_Update.json
func ExampleCachesClient_Update() {
	cred, err := azidentity.NewDefaultAzureCredential(nil)
	if err != nil {
		log.Fatalf("failed to obtain a credential: %v", err)
	}
	ctx := context.Background()
	client := armstoragecache.NewCachesClient("<subscription-id>", cred, nil)
	res, err := client.Update(ctx,
		"<resource-group-name>",
		"<cache-name>",
		&armstoragecache.CachesClientUpdateOptions{Cache: &armstoragecache.Cache{
			Location: to.StringPtr("<location>"),
			Properties: &armstoragecache.CacheProperties{
				CacheSizeGB: to.Int32Ptr(3072),
				DirectoryServicesSettings: &armstoragecache.CacheDirectorySettings{
					ActiveDirectory: &armstoragecache.CacheActiveDirectorySettings{
						CacheNetBiosName:      to.StringPtr("<cache-net-bios-name>"),
						DomainName:            to.StringPtr("<domain-name>"),
						DomainNetBiosName:     to.StringPtr("<domain-net-bios-name>"),
						PrimaryDNSIPAddress:   to.StringPtr("<primary-dnsipaddress>"),
						SecondaryDNSIPAddress: to.StringPtr("<secondary-dnsipaddress>"),
					},
					UsernameDownload: &armstoragecache.CacheUsernameDownloadSettings{
						ExtendedGroups: to.BoolPtr(true),
						UsernameSource: armstoragecache.UsernameSource("AD").ToPtr(),
					},
				},
				NetworkSettings: &armstoragecache.CacheNetworkSettings{
					DNSSearchDomain: to.StringPtr("<dnssearch-domain>"),
					DNSServers: []*string{
						to.StringPtr("10.1.22.33"),
						to.StringPtr("10.1.12.33")},
					Mtu:       to.Int32Ptr(1500),
					NtpServer: to.StringPtr("<ntp-server>"),
				},
				SecuritySettings: &armstoragecache.CacheSecuritySettings{
					AccessPolicies: []*armstoragecache.NfsAccessPolicy{
						{
							Name: to.StringPtr("<name>"),
							AccessRules: []*armstoragecache.NfsAccessRule{
								{
									Access:         armstoragecache.NfsAccessRuleAccess("rw").ToPtr(),
									RootSquash:     to.BoolPtr(false),
									Scope:          armstoragecache.NfsAccessRuleScope("default").ToPtr(),
									SubmountAccess: to.BoolPtr(true),
									Suid:           to.BoolPtr(false),
								}},
						},
						{
							Name: to.StringPtr("<name>"),
							AccessRules: []*armstoragecache.NfsAccessRule{
								{
									Access:         armstoragecache.NfsAccessRuleAccess("rw").ToPtr(),
									Filter:         to.StringPtr("<filter>"),
									RootSquash:     to.BoolPtr(false),
									Scope:          armstoragecache.NfsAccessRuleScope("host").ToPtr(),
									SubmountAccess: to.BoolPtr(true),
									Suid:           to.BoolPtr(true),
								},
								{
									Access:         armstoragecache.NfsAccessRuleAccess("rw").ToPtr(),
									Filter:         to.StringPtr("<filter>"),
									RootSquash:     to.BoolPtr(false),
									Scope:          armstoragecache.NfsAccessRuleScope("network").ToPtr(),
									SubmountAccess: to.BoolPtr(true),
									Suid:           to.BoolPtr(true),
								},
								{
									Access:         armstoragecache.NfsAccessRuleAccess("no").ToPtr(),
									AnonymousGID:   to.StringPtr("<anonymous-gid>"),
									AnonymousUID:   to.StringPtr("<anonymous-uid>"),
									RootSquash:     to.BoolPtr(true),
									Scope:          armstoragecache.NfsAccessRuleScope("default").ToPtr(),
									SubmountAccess: to.BoolPtr(true),
									Suid:           to.BoolPtr(false),
								}},
						}},
				},
				Subnet: to.StringPtr("<subnet>"),
			},
			SKU: &armstoragecache.CacheSKU{
				Name: to.StringPtr("<name>"),
			},
			Tags: map[string]*string{
				"Dept": to.StringPtr("Contoso"),
			},
		},
		})
	if err != nil {
		log.Fatal(err)
	}
	log.Printf("Response result: %#v\n", res.CachesClientUpdateResult)
}

// x-ms-original-file: specification/storagecache/resource-manager/Microsoft.StorageCache/stable/2021-09-01/examples/Caches_DebugInfo.json
func ExampleCachesClient_BeginDebugInfo() {
	cred, err := azidentity.NewDefaultAzureCredential(nil)
	if err != nil {
		log.Fatalf("failed to obtain a credential: %v", err)
	}
	ctx := context.Background()
	client := armstoragecache.NewCachesClient("<subscription-id>", cred, nil)
	poller, err := client.BeginDebugInfo(ctx,
		"<resource-group-name>",
		"<cache-name>",
		nil)
	if err != nil {
		log.Fatal(err)
	}
	_, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		log.Fatal(err)
	}
}

// x-ms-original-file: specification/storagecache/resource-manager/Microsoft.StorageCache/stable/2021-09-01/examples/Caches_Flush.json
func ExampleCachesClient_BeginFlush() {
	cred, err := azidentity.NewDefaultAzureCredential(nil)
	if err != nil {
		log.Fatalf("failed to obtain a credential: %v", err)
	}
	ctx := context.Background()
	client := armstoragecache.NewCachesClient("<subscription-id>", cred, nil)
	poller, err := client.BeginFlush(ctx,
		"<resource-group-name>",
		"<cache-name>",
		nil)
	if err != nil {
		log.Fatal(err)
	}
	_, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		log.Fatal(err)
	}
}

// x-ms-original-file: specification/storagecache/resource-manager/Microsoft.StorageCache/stable/2021-09-01/examples/Caches_Start.json
func ExampleCachesClient_BeginStart() {
	cred, err := azidentity.NewDefaultAzureCredential(nil)
	if err != nil {
		log.Fatalf("failed to obtain a credential: %v", err)
	}
	ctx := context.Background()
	client := armstoragecache.NewCachesClient("<subscription-id>", cred, nil)
	poller, err := client.BeginStart(ctx,
		"<resource-group-name>",
		"<cache-name>",
		nil)
	if err != nil {
		log.Fatal(err)
	}
	_, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		log.Fatal(err)
	}
}

// x-ms-original-file: specification/storagecache/resource-manager/Microsoft.StorageCache/stable/2021-09-01/examples/Caches_Stop.json
func ExampleCachesClient_BeginStop() {
	cred, err := azidentity.NewDefaultAzureCredential(nil)
	if err != nil {
		log.Fatalf("failed to obtain a credential: %v", err)
	}
	ctx := context.Background()
	client := armstoragecache.NewCachesClient("<subscription-id>", cred, nil)
	poller, err := client.BeginStop(ctx,
		"<resource-group-name>",
		"<cache-name>",
		nil)
	if err != nil {
		log.Fatal(err)
	}
	_, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		log.Fatal(err)
	}
}

// x-ms-original-file: specification/storagecache/resource-manager/Microsoft.StorageCache/stable/2021-09-01/examples/Caches_UpgradeFirmware.json
func ExampleCachesClient_BeginUpgradeFirmware() {
	cred, err := azidentity.NewDefaultAzureCredential(nil)
	if err != nil {
		log.Fatalf("failed to obtain a credential: %v", err)
	}
	ctx := context.Background()
	client := armstoragecache.NewCachesClient("<subscription-id>", cred, nil)
	poller, err := client.BeginUpgradeFirmware(ctx,
		"<resource-group-name>",
		"<cache-name>",
		nil)
	if err != nil {
		log.Fatal(err)
	}
	_, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		log.Fatal(err)
	}
}
