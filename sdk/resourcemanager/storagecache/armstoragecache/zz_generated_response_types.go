//go:build go1.16
// +build go1.16

// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

package armstoragecache

import (
	"context"
	armruntime "github.com/Azure/azure-sdk-for-go/sdk/azcore/arm/runtime"
	"net/http"
	"time"
)

// AscOperationsGetResponse contains the response from method AscOperations.Get.
type AscOperationsGetResponse struct {
	AscOperationsGetResult
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// AscOperationsGetResult contains the result from method AscOperations.Get.
type AscOperationsGetResult struct {
	AscOperation
}

// CachesCreateOrUpdatePollerResponse contains the response from method Caches.CreateOrUpdate.
type CachesCreateOrUpdatePollerResponse struct {
	// Poller contains an initialized poller.
	Poller *CachesCreateOrUpdatePoller

	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// PollUntilDone will poll the service endpoint until a terminal state is reached or an error is received.
// freq: the time to wait between intervals in absence of a Retry-After header. Allowed minimum is one second.
// A good starting value is 30 seconds. Note that some resources might benefit from a different value.
func (l CachesCreateOrUpdatePollerResponse) PollUntilDone(ctx context.Context, freq time.Duration) (CachesCreateOrUpdateResponse, error) {
	respType := CachesCreateOrUpdateResponse{}
	resp, err := l.Poller.pt.PollUntilDone(ctx, freq, &respType.Cache)
	if err != nil {
		return respType, err
	}
	respType.RawResponse = resp
	return respType, nil
}

// Resume rehydrates a CachesCreateOrUpdatePollerResponse from the provided client and resume token.
func (l *CachesCreateOrUpdatePollerResponse) Resume(ctx context.Context, client *CachesClient, token string) error {
	pt, err := armruntime.NewPollerFromResumeToken("CachesClient.CreateOrUpdate", token, client.pl, client.createOrUpdateHandleError)
	if err != nil {
		return err
	}
	poller := &CachesCreateOrUpdatePoller{
		pt: pt,
	}
	resp, err := poller.Poll(ctx)
	if err != nil {
		return err
	}
	l.Poller = poller
	l.RawResponse = resp
	return nil
}

// CachesCreateOrUpdateResponse contains the response from method Caches.CreateOrUpdate.
type CachesCreateOrUpdateResponse struct {
	CachesCreateOrUpdateResult
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// CachesCreateOrUpdateResult contains the result from method Caches.CreateOrUpdate.
type CachesCreateOrUpdateResult struct {
	Cache
}

// CachesDebugInfoPollerResponse contains the response from method Caches.DebugInfo.
type CachesDebugInfoPollerResponse struct {
	// Poller contains an initialized poller.
	Poller *CachesDebugInfoPoller

	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// PollUntilDone will poll the service endpoint until a terminal state is reached or an error is received.
// freq: the time to wait between intervals in absence of a Retry-After header. Allowed minimum is one second.
// A good starting value is 30 seconds. Note that some resources might benefit from a different value.
func (l CachesDebugInfoPollerResponse) PollUntilDone(ctx context.Context, freq time.Duration) (CachesDebugInfoResponse, error) {
	respType := CachesDebugInfoResponse{}
	resp, err := l.Poller.pt.PollUntilDone(ctx, freq, nil)
	if err != nil {
		return respType, err
	}
	respType.RawResponse = resp
	return respType, nil
}

// Resume rehydrates a CachesDebugInfoPollerResponse from the provided client and resume token.
func (l *CachesDebugInfoPollerResponse) Resume(ctx context.Context, client *CachesClient, token string) error {
	pt, err := armruntime.NewPollerFromResumeToken("CachesClient.DebugInfo", token, client.pl, client.debugInfoHandleError)
	if err != nil {
		return err
	}
	poller := &CachesDebugInfoPoller{
		pt: pt,
	}
	resp, err := poller.Poll(ctx)
	if err != nil {
		return err
	}
	l.Poller = poller
	l.RawResponse = resp
	return nil
}

// CachesDebugInfoResponse contains the response from method Caches.DebugInfo.
type CachesDebugInfoResponse struct {
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// CachesDeletePollerResponse contains the response from method Caches.Delete.
type CachesDeletePollerResponse struct {
	// Poller contains an initialized poller.
	Poller *CachesDeletePoller

	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// PollUntilDone will poll the service endpoint until a terminal state is reached or an error is received.
// freq: the time to wait between intervals in absence of a Retry-After header. Allowed minimum is one second.
// A good starting value is 30 seconds. Note that some resources might benefit from a different value.
func (l CachesDeletePollerResponse) PollUntilDone(ctx context.Context, freq time.Duration) (CachesDeleteResponse, error) {
	respType := CachesDeleteResponse{}
	resp, err := l.Poller.pt.PollUntilDone(ctx, freq, nil)
	if err != nil {
		return respType, err
	}
	respType.RawResponse = resp
	return respType, nil
}

// Resume rehydrates a CachesDeletePollerResponse from the provided client and resume token.
func (l *CachesDeletePollerResponse) Resume(ctx context.Context, client *CachesClient, token string) error {
	pt, err := armruntime.NewPollerFromResumeToken("CachesClient.Delete", token, client.pl, client.deleteHandleError)
	if err != nil {
		return err
	}
	poller := &CachesDeletePoller{
		pt: pt,
	}
	resp, err := poller.Poll(ctx)
	if err != nil {
		return err
	}
	l.Poller = poller
	l.RawResponse = resp
	return nil
}

// CachesDeleteResponse contains the response from method Caches.Delete.
type CachesDeleteResponse struct {
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// CachesFlushPollerResponse contains the response from method Caches.Flush.
type CachesFlushPollerResponse struct {
	// Poller contains an initialized poller.
	Poller *CachesFlushPoller

	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// PollUntilDone will poll the service endpoint until a terminal state is reached or an error is received.
// freq: the time to wait between intervals in absence of a Retry-After header. Allowed minimum is one second.
// A good starting value is 30 seconds. Note that some resources might benefit from a different value.
func (l CachesFlushPollerResponse) PollUntilDone(ctx context.Context, freq time.Duration) (CachesFlushResponse, error) {
	respType := CachesFlushResponse{}
	resp, err := l.Poller.pt.PollUntilDone(ctx, freq, nil)
	if err != nil {
		return respType, err
	}
	respType.RawResponse = resp
	return respType, nil
}

// Resume rehydrates a CachesFlushPollerResponse from the provided client and resume token.
func (l *CachesFlushPollerResponse) Resume(ctx context.Context, client *CachesClient, token string) error {
	pt, err := armruntime.NewPollerFromResumeToken("CachesClient.Flush", token, client.pl, client.flushHandleError)
	if err != nil {
		return err
	}
	poller := &CachesFlushPoller{
		pt: pt,
	}
	resp, err := poller.Poll(ctx)
	if err != nil {
		return err
	}
	l.Poller = poller
	l.RawResponse = resp
	return nil
}

// CachesFlushResponse contains the response from method Caches.Flush.
type CachesFlushResponse struct {
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// CachesGetResponse contains the response from method Caches.Get.
type CachesGetResponse struct {
	CachesGetResult
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// CachesGetResult contains the result from method Caches.Get.
type CachesGetResult struct {
	Cache
}

// CachesListByResourceGroupResponse contains the response from method Caches.ListByResourceGroup.
type CachesListByResourceGroupResponse struct {
	CachesListByResourceGroupResult
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// CachesListByResourceGroupResult contains the result from method Caches.ListByResourceGroup.
type CachesListByResourceGroupResult struct {
	CachesListResult
}

// CachesListResponse contains the response from method Caches.List.
type CachesListResponse struct {
	CachesListResultEnvelope
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// CachesListResultEnvelope contains the result from method Caches.List.
type CachesListResultEnvelope struct {
	CachesListResult
}

// CachesStartPollerResponse contains the response from method Caches.Start.
type CachesStartPollerResponse struct {
	// Poller contains an initialized poller.
	Poller *CachesStartPoller

	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// PollUntilDone will poll the service endpoint until a terminal state is reached or an error is received.
// freq: the time to wait between intervals in absence of a Retry-After header. Allowed minimum is one second.
// A good starting value is 30 seconds. Note that some resources might benefit from a different value.
func (l CachesStartPollerResponse) PollUntilDone(ctx context.Context, freq time.Duration) (CachesStartResponse, error) {
	respType := CachesStartResponse{}
	resp, err := l.Poller.pt.PollUntilDone(ctx, freq, nil)
	if err != nil {
		return respType, err
	}
	respType.RawResponse = resp
	return respType, nil
}

// Resume rehydrates a CachesStartPollerResponse from the provided client and resume token.
func (l *CachesStartPollerResponse) Resume(ctx context.Context, client *CachesClient, token string) error {
	pt, err := armruntime.NewPollerFromResumeToken("CachesClient.Start", token, client.pl, client.startHandleError)
	if err != nil {
		return err
	}
	poller := &CachesStartPoller{
		pt: pt,
	}
	resp, err := poller.Poll(ctx)
	if err != nil {
		return err
	}
	l.Poller = poller
	l.RawResponse = resp
	return nil
}

// CachesStartResponse contains the response from method Caches.Start.
type CachesStartResponse struct {
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// CachesStopPollerResponse contains the response from method Caches.Stop.
type CachesStopPollerResponse struct {
	// Poller contains an initialized poller.
	Poller *CachesStopPoller

	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// PollUntilDone will poll the service endpoint until a terminal state is reached or an error is received.
// freq: the time to wait between intervals in absence of a Retry-After header. Allowed minimum is one second.
// A good starting value is 30 seconds. Note that some resources might benefit from a different value.
func (l CachesStopPollerResponse) PollUntilDone(ctx context.Context, freq time.Duration) (CachesStopResponse, error) {
	respType := CachesStopResponse{}
	resp, err := l.Poller.pt.PollUntilDone(ctx, freq, nil)
	if err != nil {
		return respType, err
	}
	respType.RawResponse = resp
	return respType, nil
}

// Resume rehydrates a CachesStopPollerResponse from the provided client and resume token.
func (l *CachesStopPollerResponse) Resume(ctx context.Context, client *CachesClient, token string) error {
	pt, err := armruntime.NewPollerFromResumeToken("CachesClient.Stop", token, client.pl, client.stopHandleError)
	if err != nil {
		return err
	}
	poller := &CachesStopPoller{
		pt: pt,
	}
	resp, err := poller.Poll(ctx)
	if err != nil {
		return err
	}
	l.Poller = poller
	l.RawResponse = resp
	return nil
}

// CachesStopResponse contains the response from method Caches.Stop.
type CachesStopResponse struct {
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// CachesUpdateResponse contains the response from method Caches.Update.
type CachesUpdateResponse struct {
	CachesUpdateResult
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// CachesUpdateResult contains the result from method Caches.Update.
type CachesUpdateResult struct {
	Cache
}

// CachesUpgradeFirmwarePollerResponse contains the response from method Caches.UpgradeFirmware.
type CachesUpgradeFirmwarePollerResponse struct {
	// Poller contains an initialized poller.
	Poller *CachesUpgradeFirmwarePoller

	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// PollUntilDone will poll the service endpoint until a terminal state is reached or an error is received.
// freq: the time to wait between intervals in absence of a Retry-After header. Allowed minimum is one second.
// A good starting value is 30 seconds. Note that some resources might benefit from a different value.
func (l CachesUpgradeFirmwarePollerResponse) PollUntilDone(ctx context.Context, freq time.Duration) (CachesUpgradeFirmwareResponse, error) {
	respType := CachesUpgradeFirmwareResponse{}
	resp, err := l.Poller.pt.PollUntilDone(ctx, freq, nil)
	if err != nil {
		return respType, err
	}
	respType.RawResponse = resp
	return respType, nil
}

// Resume rehydrates a CachesUpgradeFirmwarePollerResponse from the provided client and resume token.
func (l *CachesUpgradeFirmwarePollerResponse) Resume(ctx context.Context, client *CachesClient, token string) error {
	pt, err := armruntime.NewPollerFromResumeToken("CachesClient.UpgradeFirmware", token, client.pl, client.upgradeFirmwareHandleError)
	if err != nil {
		return err
	}
	poller := &CachesUpgradeFirmwarePoller{
		pt: pt,
	}
	resp, err := poller.Poll(ctx)
	if err != nil {
		return err
	}
	l.Poller = poller
	l.RawResponse = resp
	return nil
}

// CachesUpgradeFirmwareResponse contains the response from method Caches.UpgradeFirmware.
type CachesUpgradeFirmwareResponse struct {
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// OperationsListResponse contains the response from method Operations.List.
type OperationsListResponse struct {
	OperationsListResult
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// OperationsListResult contains the result from method Operations.List.
type OperationsListResult struct {
	APIOperationListResult
}

// SKUsListResponse contains the response from method SKUs.List.
type SKUsListResponse struct {
	SKUsListResult
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// SKUsListResult contains the result from method SKUs.List.
type SKUsListResult struct {
	ResourceSKUsResult
}

// StorageTargetFlushPollerResponse contains the response from method StorageTarget.Flush.
type StorageTargetFlushPollerResponse struct {
	// Poller contains an initialized poller.
	Poller *StorageTargetFlushPoller

	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// PollUntilDone will poll the service endpoint until a terminal state is reached or an error is received.
// freq: the time to wait between intervals in absence of a Retry-After header. Allowed minimum is one second.
// A good starting value is 30 seconds. Note that some resources might benefit from a different value.
func (l StorageTargetFlushPollerResponse) PollUntilDone(ctx context.Context, freq time.Duration) (StorageTargetFlushResponse, error) {
	respType := StorageTargetFlushResponse{}
	resp, err := l.Poller.pt.PollUntilDone(ctx, freq, nil)
	if err != nil {
		return respType, err
	}
	respType.RawResponse = resp
	return respType, nil
}

// Resume rehydrates a StorageTargetFlushPollerResponse from the provided client and resume token.
func (l *StorageTargetFlushPollerResponse) Resume(ctx context.Context, client *StorageTargetClient, token string) error {
	pt, err := armruntime.NewPollerFromResumeToken("StorageTargetClient.Flush", token, client.pl, client.flushHandleError)
	if err != nil {
		return err
	}
	poller := &StorageTargetFlushPoller{
		pt: pt,
	}
	resp, err := poller.Poll(ctx)
	if err != nil {
		return err
	}
	l.Poller = poller
	l.RawResponse = resp
	return nil
}

// StorageTargetFlushResponse contains the response from method StorageTarget.Flush.
type StorageTargetFlushResponse struct {
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// StorageTargetResumePollerResponse contains the response from method StorageTarget.Resume.
type StorageTargetResumePollerResponse struct {
	// Poller contains an initialized poller.
	Poller *StorageTargetResumePoller

	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// PollUntilDone will poll the service endpoint until a terminal state is reached or an error is received.
// freq: the time to wait between intervals in absence of a Retry-After header. Allowed minimum is one second.
// A good starting value is 30 seconds. Note that some resources might benefit from a different value.
func (l StorageTargetResumePollerResponse) PollUntilDone(ctx context.Context, freq time.Duration) (StorageTargetResumeResponse, error) {
	respType := StorageTargetResumeResponse{}
	resp, err := l.Poller.pt.PollUntilDone(ctx, freq, nil)
	if err != nil {
		return respType, err
	}
	respType.RawResponse = resp
	return respType, nil
}

// Resume rehydrates a StorageTargetResumePollerResponse from the provided client and resume token.
func (l *StorageTargetResumePollerResponse) Resume(ctx context.Context, client *StorageTargetClient, token string) error {
	pt, err := armruntime.NewPollerFromResumeToken("StorageTargetClient.Resume", token, client.pl, client.resumeHandleError)
	if err != nil {
		return err
	}
	poller := &StorageTargetResumePoller{
		pt: pt,
	}
	resp, err := poller.Poll(ctx)
	if err != nil {
		return err
	}
	l.Poller = poller
	l.RawResponse = resp
	return nil
}

// StorageTargetResumeResponse contains the response from method StorageTarget.Resume.
type StorageTargetResumeResponse struct {
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// StorageTargetSuspendPollerResponse contains the response from method StorageTarget.Suspend.
type StorageTargetSuspendPollerResponse struct {
	// Poller contains an initialized poller.
	Poller *StorageTargetSuspendPoller

	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// PollUntilDone will poll the service endpoint until a terminal state is reached or an error is received.
// freq: the time to wait between intervals in absence of a Retry-After header. Allowed minimum is one second.
// A good starting value is 30 seconds. Note that some resources might benefit from a different value.
func (l StorageTargetSuspendPollerResponse) PollUntilDone(ctx context.Context, freq time.Duration) (StorageTargetSuspendResponse, error) {
	respType := StorageTargetSuspendResponse{}
	resp, err := l.Poller.pt.PollUntilDone(ctx, freq, nil)
	if err != nil {
		return respType, err
	}
	respType.RawResponse = resp
	return respType, nil
}

// Resume rehydrates a StorageTargetSuspendPollerResponse from the provided client and resume token.
func (l *StorageTargetSuspendPollerResponse) Resume(ctx context.Context, client *StorageTargetClient, token string) error {
	pt, err := armruntime.NewPollerFromResumeToken("StorageTargetClient.Suspend", token, client.pl, client.suspendHandleError)
	if err != nil {
		return err
	}
	poller := &StorageTargetSuspendPoller{
		pt: pt,
	}
	resp, err := poller.Poll(ctx)
	if err != nil {
		return err
	}
	l.Poller = poller
	l.RawResponse = resp
	return nil
}

// StorageTargetSuspendResponse contains the response from method StorageTarget.Suspend.
type StorageTargetSuspendResponse struct {
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// StorageTargetsCreateOrUpdatePollerResponse contains the response from method StorageTargets.CreateOrUpdate.
type StorageTargetsCreateOrUpdatePollerResponse struct {
	// Poller contains an initialized poller.
	Poller *StorageTargetsCreateOrUpdatePoller

	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// PollUntilDone will poll the service endpoint until a terminal state is reached or an error is received.
// freq: the time to wait between intervals in absence of a Retry-After header. Allowed minimum is one second.
// A good starting value is 30 seconds. Note that some resources might benefit from a different value.
func (l StorageTargetsCreateOrUpdatePollerResponse) PollUntilDone(ctx context.Context, freq time.Duration) (StorageTargetsCreateOrUpdateResponse, error) {
	respType := StorageTargetsCreateOrUpdateResponse{}
	resp, err := l.Poller.pt.PollUntilDone(ctx, freq, &respType.StorageTarget)
	if err != nil {
		return respType, err
	}
	respType.RawResponse = resp
	return respType, nil
}

// Resume rehydrates a StorageTargetsCreateOrUpdatePollerResponse from the provided client and resume token.
func (l *StorageTargetsCreateOrUpdatePollerResponse) Resume(ctx context.Context, client *StorageTargetsClient, token string) error {
	pt, err := armruntime.NewPollerFromResumeToken("StorageTargetsClient.CreateOrUpdate", token, client.pl, client.createOrUpdateHandleError)
	if err != nil {
		return err
	}
	poller := &StorageTargetsCreateOrUpdatePoller{
		pt: pt,
	}
	resp, err := poller.Poll(ctx)
	if err != nil {
		return err
	}
	l.Poller = poller
	l.RawResponse = resp
	return nil
}

// StorageTargetsCreateOrUpdateResponse contains the response from method StorageTargets.CreateOrUpdate.
type StorageTargetsCreateOrUpdateResponse struct {
	StorageTargetsCreateOrUpdateResult
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// StorageTargetsCreateOrUpdateResult contains the result from method StorageTargets.CreateOrUpdate.
type StorageTargetsCreateOrUpdateResult struct {
	StorageTarget
}

// StorageTargetsDNSRefreshPollerResponse contains the response from method StorageTargets.DNSRefresh.
type StorageTargetsDNSRefreshPollerResponse struct {
	// Poller contains an initialized poller.
	Poller *StorageTargetsDNSRefreshPoller

	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// PollUntilDone will poll the service endpoint until a terminal state is reached or an error is received.
// freq: the time to wait between intervals in absence of a Retry-After header. Allowed minimum is one second.
// A good starting value is 30 seconds. Note that some resources might benefit from a different value.
func (l StorageTargetsDNSRefreshPollerResponse) PollUntilDone(ctx context.Context, freq time.Duration) (StorageTargetsDNSRefreshResponse, error) {
	respType := StorageTargetsDNSRefreshResponse{}
	resp, err := l.Poller.pt.PollUntilDone(ctx, freq, nil)
	if err != nil {
		return respType, err
	}
	respType.RawResponse = resp
	return respType, nil
}

// Resume rehydrates a StorageTargetsDNSRefreshPollerResponse from the provided client and resume token.
func (l *StorageTargetsDNSRefreshPollerResponse) Resume(ctx context.Context, client *StorageTargetsClient, token string) error {
	pt, err := armruntime.NewPollerFromResumeToken("StorageTargetsClient.DNSRefresh", token, client.pl, client.dnsRefreshHandleError)
	if err != nil {
		return err
	}
	poller := &StorageTargetsDNSRefreshPoller{
		pt: pt,
	}
	resp, err := poller.Poll(ctx)
	if err != nil {
		return err
	}
	l.Poller = poller
	l.RawResponse = resp
	return nil
}

// StorageTargetsDNSRefreshResponse contains the response from method StorageTargets.DNSRefresh.
type StorageTargetsDNSRefreshResponse struct {
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// StorageTargetsDeletePollerResponse contains the response from method StorageTargets.Delete.
type StorageTargetsDeletePollerResponse struct {
	// Poller contains an initialized poller.
	Poller *StorageTargetsDeletePoller

	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// PollUntilDone will poll the service endpoint until a terminal state is reached or an error is received.
// freq: the time to wait between intervals in absence of a Retry-After header. Allowed minimum is one second.
// A good starting value is 30 seconds. Note that some resources might benefit from a different value.
func (l StorageTargetsDeletePollerResponse) PollUntilDone(ctx context.Context, freq time.Duration) (StorageTargetsDeleteResponse, error) {
	respType := StorageTargetsDeleteResponse{}
	resp, err := l.Poller.pt.PollUntilDone(ctx, freq, nil)
	if err != nil {
		return respType, err
	}
	respType.RawResponse = resp
	return respType, nil
}

// Resume rehydrates a StorageTargetsDeletePollerResponse from the provided client and resume token.
func (l *StorageTargetsDeletePollerResponse) Resume(ctx context.Context, client *StorageTargetsClient, token string) error {
	pt, err := armruntime.NewPollerFromResumeToken("StorageTargetsClient.Delete", token, client.pl, client.deleteHandleError)
	if err != nil {
		return err
	}
	poller := &StorageTargetsDeletePoller{
		pt: pt,
	}
	resp, err := poller.Poll(ctx)
	if err != nil {
		return err
	}
	l.Poller = poller
	l.RawResponse = resp
	return nil
}

// StorageTargetsDeleteResponse contains the response from method StorageTargets.Delete.
type StorageTargetsDeleteResponse struct {
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// StorageTargetsGetResponse contains the response from method StorageTargets.Get.
type StorageTargetsGetResponse struct {
	StorageTargetsGetResult
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// StorageTargetsGetResult contains the result from method StorageTargets.Get.
type StorageTargetsGetResult struct {
	StorageTarget
}

// StorageTargetsListByCacheResponse contains the response from method StorageTargets.ListByCache.
type StorageTargetsListByCacheResponse struct {
	StorageTargetsListByCacheResult
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// StorageTargetsListByCacheResult contains the result from method StorageTargets.ListByCache.
type StorageTargetsListByCacheResult struct {
	StorageTargetsResult
}

// UsageModelsListResponse contains the response from method UsageModels.List.
type UsageModelsListResponse struct {
	UsageModelsListResult
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// UsageModelsListResult contains the result from method UsageModels.List.
type UsageModelsListResult struct {
	UsageModelsResult
}
