//go:build go1.16
// +build go1.16

// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

package armstoragepool

import (
	"context"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/policy"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/runtime"
	"net/http"
	"reflect"
)

// DiskPoolZonesListPager provides operations for iterating over paged responses.
type DiskPoolZonesListPager struct {
	client    *DiskPoolZonesClient
	current   DiskPoolZonesListResponse
	err       error
	requester func(context.Context) (*policy.Request, error)
	advancer  func(context.Context, DiskPoolZonesListResponse) (*policy.Request, error)
}

// Err returns the last error encountered while paging.
func (p *DiskPoolZonesListPager) Err() error {
	return p.err
}

// NextPage returns true if the pager advanced to the next page.
// Returns false if there are no more pages or an error occurred.
func (p *DiskPoolZonesListPager) NextPage(ctx context.Context) bool {
	var req *policy.Request
	var err error
	if !reflect.ValueOf(p.current).IsZero() {
		if p.current.DiskPoolZoneListResult.NextLink == nil || len(*p.current.DiskPoolZoneListResult.NextLink) == 0 {
			return false
		}
		req, err = p.advancer(ctx, p.current)
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		p.err = err
		return false
	}
	resp, err := p.client.pl.Do(req)
	if err != nil {
		p.err = err
		return false
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {
		p.err = p.client.listHandleError(resp)
		return false
	}
	result, err := p.client.listHandleResponse(resp)
	if err != nil {
		p.err = err
		return false
	}
	p.current = result
	return true
}

// PageResponse returns the current DiskPoolZonesListResponse page.
func (p *DiskPoolZonesListPager) PageResponse() DiskPoolZonesListResponse {
	return p.current
}

// DiskPoolsListByResourceGroupPager provides operations for iterating over paged responses.
type DiskPoolsListByResourceGroupPager struct {
	client    *DiskPoolsClient
	current   DiskPoolsListByResourceGroupResponse
	err       error
	requester func(context.Context) (*policy.Request, error)
	advancer  func(context.Context, DiskPoolsListByResourceGroupResponse) (*policy.Request, error)
}

// Err returns the last error encountered while paging.
func (p *DiskPoolsListByResourceGroupPager) Err() error {
	return p.err
}

// NextPage returns true if the pager advanced to the next page.
// Returns false if there are no more pages or an error occurred.
func (p *DiskPoolsListByResourceGroupPager) NextPage(ctx context.Context) bool {
	var req *policy.Request
	var err error
	if !reflect.ValueOf(p.current).IsZero() {
		if p.current.DiskPoolListResult.NextLink == nil || len(*p.current.DiskPoolListResult.NextLink) == 0 {
			return false
		}
		req, err = p.advancer(ctx, p.current)
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		p.err = err
		return false
	}
	resp, err := p.client.pl.Do(req)
	if err != nil {
		p.err = err
		return false
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {
		p.err = p.client.listByResourceGroupHandleError(resp)
		return false
	}
	result, err := p.client.listByResourceGroupHandleResponse(resp)
	if err != nil {
		p.err = err
		return false
	}
	p.current = result
	return true
}

// PageResponse returns the current DiskPoolsListByResourceGroupResponse page.
func (p *DiskPoolsListByResourceGroupPager) PageResponse() DiskPoolsListByResourceGroupResponse {
	return p.current
}

// DiskPoolsListBySubscriptionPager provides operations for iterating over paged responses.
type DiskPoolsListBySubscriptionPager struct {
	client    *DiskPoolsClient
	current   DiskPoolsListBySubscriptionResponse
	err       error
	requester func(context.Context) (*policy.Request, error)
	advancer  func(context.Context, DiskPoolsListBySubscriptionResponse) (*policy.Request, error)
}

// Err returns the last error encountered while paging.
func (p *DiskPoolsListBySubscriptionPager) Err() error {
	return p.err
}

// NextPage returns true if the pager advanced to the next page.
// Returns false if there are no more pages or an error occurred.
func (p *DiskPoolsListBySubscriptionPager) NextPage(ctx context.Context) bool {
	var req *policy.Request
	var err error
	if !reflect.ValueOf(p.current).IsZero() {
		if p.current.DiskPoolListResult.NextLink == nil || len(*p.current.DiskPoolListResult.NextLink) == 0 {
			return false
		}
		req, err = p.advancer(ctx, p.current)
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		p.err = err
		return false
	}
	resp, err := p.client.pl.Do(req)
	if err != nil {
		p.err = err
		return false
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {
		p.err = p.client.listBySubscriptionHandleError(resp)
		return false
	}
	result, err := p.client.listBySubscriptionHandleResponse(resp)
	if err != nil {
		p.err = err
		return false
	}
	p.current = result
	return true
}

// PageResponse returns the current DiskPoolsListBySubscriptionResponse page.
func (p *DiskPoolsListBySubscriptionPager) PageResponse() DiskPoolsListBySubscriptionResponse {
	return p.current
}

// DiskPoolsListOutboundNetworkDependenciesEndpointsPager provides operations for iterating over paged responses.
type DiskPoolsListOutboundNetworkDependenciesEndpointsPager struct {
	client    *DiskPoolsClient
	current   DiskPoolsListOutboundNetworkDependenciesEndpointsResponse
	err       error
	requester func(context.Context) (*policy.Request, error)
	advancer  func(context.Context, DiskPoolsListOutboundNetworkDependenciesEndpointsResponse) (*policy.Request, error)
}

// Err returns the last error encountered while paging.
func (p *DiskPoolsListOutboundNetworkDependenciesEndpointsPager) Err() error {
	return p.err
}

// NextPage returns true if the pager advanced to the next page.
// Returns false if there are no more pages or an error occurred.
func (p *DiskPoolsListOutboundNetworkDependenciesEndpointsPager) NextPage(ctx context.Context) bool {
	var req *policy.Request
	var err error
	if !reflect.ValueOf(p.current).IsZero() {
		if p.current.OutboundEnvironmentEndpointList.NextLink == nil || len(*p.current.OutboundEnvironmentEndpointList.NextLink) == 0 {
			return false
		}
		req, err = p.advancer(ctx, p.current)
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		p.err = err
		return false
	}
	resp, err := p.client.pl.Do(req)
	if err != nil {
		p.err = err
		return false
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {
		p.err = p.client.listOutboundNetworkDependenciesEndpointsHandleError(resp)
		return false
	}
	result, err := p.client.listOutboundNetworkDependenciesEndpointsHandleResponse(resp)
	if err != nil {
		p.err = err
		return false
	}
	p.current = result
	return true
}

// PageResponse returns the current DiskPoolsListOutboundNetworkDependenciesEndpointsResponse page.
func (p *DiskPoolsListOutboundNetworkDependenciesEndpointsPager) PageResponse() DiskPoolsListOutboundNetworkDependenciesEndpointsResponse {
	return p.current
}

// IscsiTargetsListByDiskPoolPager provides operations for iterating over paged responses.
type IscsiTargetsListByDiskPoolPager struct {
	client    *IscsiTargetsClient
	current   IscsiTargetsListByDiskPoolResponse
	err       error
	requester func(context.Context) (*policy.Request, error)
	advancer  func(context.Context, IscsiTargetsListByDiskPoolResponse) (*policy.Request, error)
}

// Err returns the last error encountered while paging.
func (p *IscsiTargetsListByDiskPoolPager) Err() error {
	return p.err
}

// NextPage returns true if the pager advanced to the next page.
// Returns false if there are no more pages or an error occurred.
func (p *IscsiTargetsListByDiskPoolPager) NextPage(ctx context.Context) bool {
	var req *policy.Request
	var err error
	if !reflect.ValueOf(p.current).IsZero() {
		if p.current.IscsiTargetList.NextLink == nil || len(*p.current.IscsiTargetList.NextLink) == 0 {
			return false
		}
		req, err = p.advancer(ctx, p.current)
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		p.err = err
		return false
	}
	resp, err := p.client.pl.Do(req)
	if err != nil {
		p.err = err
		return false
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {
		p.err = p.client.listByDiskPoolHandleError(resp)
		return false
	}
	result, err := p.client.listByDiskPoolHandleResponse(resp)
	if err != nil {
		p.err = err
		return false
	}
	p.current = result
	return true
}

// PageResponse returns the current IscsiTargetsListByDiskPoolResponse page.
func (p *IscsiTargetsListByDiskPoolPager) PageResponse() IscsiTargetsListByDiskPoolResponse {
	return p.current
}

// ResourceSKUsListPager provides operations for iterating over paged responses.
type ResourceSKUsListPager struct {
	client    *ResourceSKUsClient
	current   ResourceSKUsListResponse
	err       error
	requester func(context.Context) (*policy.Request, error)
	advancer  func(context.Context, ResourceSKUsListResponse) (*policy.Request, error)
}

// Err returns the last error encountered while paging.
func (p *ResourceSKUsListPager) Err() error {
	return p.err
}

// NextPage returns true if the pager advanced to the next page.
// Returns false if there are no more pages or an error occurred.
func (p *ResourceSKUsListPager) NextPage(ctx context.Context) bool {
	var req *policy.Request
	var err error
	if !reflect.ValueOf(p.current).IsZero() {
		if p.current.ResourceSKUListResult.NextLink == nil || len(*p.current.ResourceSKUListResult.NextLink) == 0 {
			return false
		}
		req, err = p.advancer(ctx, p.current)
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		p.err = err
		return false
	}
	resp, err := p.client.pl.Do(req)
	if err != nil {
		p.err = err
		return false
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {
		p.err = p.client.listHandleError(resp)
		return false
	}
	result, err := p.client.listHandleResponse(resp)
	if err != nil {
		p.err = err
		return false
	}
	p.current = result
	return true
}

// PageResponse returns the current ResourceSKUsListResponse page.
func (p *ResourceSKUsListPager) PageResponse() ResourceSKUsListResponse {
	return p.current
}
