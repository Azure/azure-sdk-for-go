//go:build go1.16
// +build go1.16

// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

package armstoragepool

import (
	"context"
	armruntime "github.com/Azure/azure-sdk-for-go/sdk/azcore/arm/runtime"
	"net/http"
	"time"
)

// DiskPoolZonesListResponse contains the response from method DiskPoolZones.List.
type DiskPoolZonesListResponse struct {
	DiskPoolZonesListResult
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// DiskPoolZonesListResult contains the result from method DiskPoolZones.List.
type DiskPoolZonesListResult struct {
	DiskPoolZoneListResult
}

// DiskPoolsCreateOrUpdatePollerResponse contains the response from method DiskPools.CreateOrUpdate.
type DiskPoolsCreateOrUpdatePollerResponse struct {
	// Poller contains an initialized poller.
	Poller *DiskPoolsCreateOrUpdatePoller

	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// PollUntilDone will poll the service endpoint until a terminal state is reached or an error is received.
// freq: the time to wait between intervals in absence of a Retry-After header. Allowed minimum is one second.
// A good starting value is 30 seconds. Note that some resources might benefit from a different value.
func (l DiskPoolsCreateOrUpdatePollerResponse) PollUntilDone(ctx context.Context, freq time.Duration) (DiskPoolsCreateOrUpdateResponse, error) {
	respType := DiskPoolsCreateOrUpdateResponse{}
	resp, err := l.Poller.pt.PollUntilDone(ctx, freq, &respType.DiskPool)
	if err != nil {
		return respType, err
	}
	respType.RawResponse = resp
	return respType, nil
}

// Resume rehydrates a DiskPoolsCreateOrUpdatePollerResponse from the provided client and resume token.
func (l *DiskPoolsCreateOrUpdatePollerResponse) Resume(ctx context.Context, client *DiskPoolsClient, token string) error {
	pt, err := armruntime.NewPollerFromResumeToken("DiskPoolsClient.CreateOrUpdate", token, client.pl, client.createOrUpdateHandleError)
	if err != nil {
		return err
	}
	poller := &DiskPoolsCreateOrUpdatePoller{
		pt: pt,
	}
	resp, err := poller.Poll(ctx)
	if err != nil {
		return err
	}
	l.Poller = poller
	l.RawResponse = resp
	return nil
}

// DiskPoolsCreateOrUpdateResponse contains the response from method DiskPools.CreateOrUpdate.
type DiskPoolsCreateOrUpdateResponse struct {
	DiskPoolsCreateOrUpdateResult
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// DiskPoolsCreateOrUpdateResult contains the result from method DiskPools.CreateOrUpdate.
type DiskPoolsCreateOrUpdateResult struct {
	DiskPool
}

// DiskPoolsDeallocatePollerResponse contains the response from method DiskPools.Deallocate.
type DiskPoolsDeallocatePollerResponse struct {
	// Poller contains an initialized poller.
	Poller *DiskPoolsDeallocatePoller

	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// PollUntilDone will poll the service endpoint until a terminal state is reached or an error is received.
// freq: the time to wait between intervals in absence of a Retry-After header. Allowed minimum is one second.
// A good starting value is 30 seconds. Note that some resources might benefit from a different value.
func (l DiskPoolsDeallocatePollerResponse) PollUntilDone(ctx context.Context, freq time.Duration) (DiskPoolsDeallocateResponse, error) {
	respType := DiskPoolsDeallocateResponse{}
	resp, err := l.Poller.pt.PollUntilDone(ctx, freq, nil)
	if err != nil {
		return respType, err
	}
	respType.RawResponse = resp
	return respType, nil
}

// Resume rehydrates a DiskPoolsDeallocatePollerResponse from the provided client and resume token.
func (l *DiskPoolsDeallocatePollerResponse) Resume(ctx context.Context, client *DiskPoolsClient, token string) error {
	pt, err := armruntime.NewPollerFromResumeToken("DiskPoolsClient.Deallocate", token, client.pl, client.deallocateHandleError)
	if err != nil {
		return err
	}
	poller := &DiskPoolsDeallocatePoller{
		pt: pt,
	}
	resp, err := poller.Poll(ctx)
	if err != nil {
		return err
	}
	l.Poller = poller
	l.RawResponse = resp
	return nil
}

// DiskPoolsDeallocateResponse contains the response from method DiskPools.Deallocate.
type DiskPoolsDeallocateResponse struct {
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// DiskPoolsDeletePollerResponse contains the response from method DiskPools.Delete.
type DiskPoolsDeletePollerResponse struct {
	// Poller contains an initialized poller.
	Poller *DiskPoolsDeletePoller

	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// PollUntilDone will poll the service endpoint until a terminal state is reached or an error is received.
// freq: the time to wait between intervals in absence of a Retry-After header. Allowed minimum is one second.
// A good starting value is 30 seconds. Note that some resources might benefit from a different value.
func (l DiskPoolsDeletePollerResponse) PollUntilDone(ctx context.Context, freq time.Duration) (DiskPoolsDeleteResponse, error) {
	respType := DiskPoolsDeleteResponse{}
	resp, err := l.Poller.pt.PollUntilDone(ctx, freq, nil)
	if err != nil {
		return respType, err
	}
	respType.RawResponse = resp
	return respType, nil
}

// Resume rehydrates a DiskPoolsDeletePollerResponse from the provided client and resume token.
func (l *DiskPoolsDeletePollerResponse) Resume(ctx context.Context, client *DiskPoolsClient, token string) error {
	pt, err := armruntime.NewPollerFromResumeToken("DiskPoolsClient.Delete", token, client.pl, client.deleteHandleError)
	if err != nil {
		return err
	}
	poller := &DiskPoolsDeletePoller{
		pt: pt,
	}
	resp, err := poller.Poll(ctx)
	if err != nil {
		return err
	}
	l.Poller = poller
	l.RawResponse = resp
	return nil
}

// DiskPoolsDeleteResponse contains the response from method DiskPools.Delete.
type DiskPoolsDeleteResponse struct {
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// DiskPoolsGetResponse contains the response from method DiskPools.Get.
type DiskPoolsGetResponse struct {
	DiskPoolsGetResult
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// DiskPoolsGetResult contains the result from method DiskPools.Get.
type DiskPoolsGetResult struct {
	DiskPool
}

// DiskPoolsListByResourceGroupResponse contains the response from method DiskPools.ListByResourceGroup.
type DiskPoolsListByResourceGroupResponse struct {
	DiskPoolsListByResourceGroupResult
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// DiskPoolsListByResourceGroupResult contains the result from method DiskPools.ListByResourceGroup.
type DiskPoolsListByResourceGroupResult struct {
	DiskPoolListResult
}

// DiskPoolsListBySubscriptionResponse contains the response from method DiskPools.ListBySubscription.
type DiskPoolsListBySubscriptionResponse struct {
	DiskPoolsListBySubscriptionResult
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// DiskPoolsListBySubscriptionResult contains the result from method DiskPools.ListBySubscription.
type DiskPoolsListBySubscriptionResult struct {
	DiskPoolListResult
}

// DiskPoolsListOutboundNetworkDependenciesEndpointsResponse contains the response from method DiskPools.ListOutboundNetworkDependenciesEndpoints.
type DiskPoolsListOutboundNetworkDependenciesEndpointsResponse struct {
	DiskPoolsListOutboundNetworkDependenciesEndpointsResult
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// DiskPoolsListOutboundNetworkDependenciesEndpointsResult contains the result from method DiskPools.ListOutboundNetworkDependenciesEndpoints.
type DiskPoolsListOutboundNetworkDependenciesEndpointsResult struct {
	OutboundEnvironmentEndpointList
}

// DiskPoolsStartPollerResponse contains the response from method DiskPools.Start.
type DiskPoolsStartPollerResponse struct {
	// Poller contains an initialized poller.
	Poller *DiskPoolsStartPoller

	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// PollUntilDone will poll the service endpoint until a terminal state is reached or an error is received.
// freq: the time to wait between intervals in absence of a Retry-After header. Allowed minimum is one second.
// A good starting value is 30 seconds. Note that some resources might benefit from a different value.
func (l DiskPoolsStartPollerResponse) PollUntilDone(ctx context.Context, freq time.Duration) (DiskPoolsStartResponse, error) {
	respType := DiskPoolsStartResponse{}
	resp, err := l.Poller.pt.PollUntilDone(ctx, freq, nil)
	if err != nil {
		return respType, err
	}
	respType.RawResponse = resp
	return respType, nil
}

// Resume rehydrates a DiskPoolsStartPollerResponse from the provided client and resume token.
func (l *DiskPoolsStartPollerResponse) Resume(ctx context.Context, client *DiskPoolsClient, token string) error {
	pt, err := armruntime.NewPollerFromResumeToken("DiskPoolsClient.Start", token, client.pl, client.startHandleError)
	if err != nil {
		return err
	}
	poller := &DiskPoolsStartPoller{
		pt: pt,
	}
	resp, err := poller.Poll(ctx)
	if err != nil {
		return err
	}
	l.Poller = poller
	l.RawResponse = resp
	return nil
}

// DiskPoolsStartResponse contains the response from method DiskPools.Start.
type DiskPoolsStartResponse struct {
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// DiskPoolsUpdatePollerResponse contains the response from method DiskPools.Update.
type DiskPoolsUpdatePollerResponse struct {
	// Poller contains an initialized poller.
	Poller *DiskPoolsUpdatePoller

	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// PollUntilDone will poll the service endpoint until a terminal state is reached or an error is received.
// freq: the time to wait between intervals in absence of a Retry-After header. Allowed minimum is one second.
// A good starting value is 30 seconds. Note that some resources might benefit from a different value.
func (l DiskPoolsUpdatePollerResponse) PollUntilDone(ctx context.Context, freq time.Duration) (DiskPoolsUpdateResponse, error) {
	respType := DiskPoolsUpdateResponse{}
	resp, err := l.Poller.pt.PollUntilDone(ctx, freq, &respType.DiskPool)
	if err != nil {
		return respType, err
	}
	respType.RawResponse = resp
	return respType, nil
}

// Resume rehydrates a DiskPoolsUpdatePollerResponse from the provided client and resume token.
func (l *DiskPoolsUpdatePollerResponse) Resume(ctx context.Context, client *DiskPoolsClient, token string) error {
	pt, err := armruntime.NewPollerFromResumeToken("DiskPoolsClient.Update", token, client.pl, client.updateHandleError)
	if err != nil {
		return err
	}
	poller := &DiskPoolsUpdatePoller{
		pt: pt,
	}
	resp, err := poller.Poll(ctx)
	if err != nil {
		return err
	}
	l.Poller = poller
	l.RawResponse = resp
	return nil
}

// DiskPoolsUpdateResponse contains the response from method DiskPools.Update.
type DiskPoolsUpdateResponse struct {
	DiskPoolsUpdateResult
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// DiskPoolsUpdateResult contains the result from method DiskPools.Update.
type DiskPoolsUpdateResult struct {
	DiskPool
}

// DiskPoolsUpgradePollerResponse contains the response from method DiskPools.Upgrade.
type DiskPoolsUpgradePollerResponse struct {
	// Poller contains an initialized poller.
	Poller *DiskPoolsUpgradePoller

	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// PollUntilDone will poll the service endpoint until a terminal state is reached or an error is received.
// freq: the time to wait between intervals in absence of a Retry-After header. Allowed minimum is one second.
// A good starting value is 30 seconds. Note that some resources might benefit from a different value.
func (l DiskPoolsUpgradePollerResponse) PollUntilDone(ctx context.Context, freq time.Duration) (DiskPoolsUpgradeResponse, error) {
	respType := DiskPoolsUpgradeResponse{}
	resp, err := l.Poller.pt.PollUntilDone(ctx, freq, nil)
	if err != nil {
		return respType, err
	}
	respType.RawResponse = resp
	return respType, nil
}

// Resume rehydrates a DiskPoolsUpgradePollerResponse from the provided client and resume token.
func (l *DiskPoolsUpgradePollerResponse) Resume(ctx context.Context, client *DiskPoolsClient, token string) error {
	pt, err := armruntime.NewPollerFromResumeToken("DiskPoolsClient.Upgrade", token, client.pl, client.upgradeHandleError)
	if err != nil {
		return err
	}
	poller := &DiskPoolsUpgradePoller{
		pt: pt,
	}
	resp, err := poller.Poll(ctx)
	if err != nil {
		return err
	}
	l.Poller = poller
	l.RawResponse = resp
	return nil
}

// DiskPoolsUpgradeResponse contains the response from method DiskPools.Upgrade.
type DiskPoolsUpgradeResponse struct {
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// IscsiTargetsCreateOrUpdatePollerResponse contains the response from method IscsiTargets.CreateOrUpdate.
type IscsiTargetsCreateOrUpdatePollerResponse struct {
	// Poller contains an initialized poller.
	Poller *IscsiTargetsCreateOrUpdatePoller

	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// PollUntilDone will poll the service endpoint until a terminal state is reached or an error is received.
// freq: the time to wait between intervals in absence of a Retry-After header. Allowed minimum is one second.
// A good starting value is 30 seconds. Note that some resources might benefit from a different value.
func (l IscsiTargetsCreateOrUpdatePollerResponse) PollUntilDone(ctx context.Context, freq time.Duration) (IscsiTargetsCreateOrUpdateResponse, error) {
	respType := IscsiTargetsCreateOrUpdateResponse{}
	resp, err := l.Poller.pt.PollUntilDone(ctx, freq, &respType.IscsiTarget)
	if err != nil {
		return respType, err
	}
	respType.RawResponse = resp
	return respType, nil
}

// Resume rehydrates a IscsiTargetsCreateOrUpdatePollerResponse from the provided client and resume token.
func (l *IscsiTargetsCreateOrUpdatePollerResponse) Resume(ctx context.Context, client *IscsiTargetsClient, token string) error {
	pt, err := armruntime.NewPollerFromResumeToken("IscsiTargetsClient.CreateOrUpdate", token, client.pl, client.createOrUpdateHandleError)
	if err != nil {
		return err
	}
	poller := &IscsiTargetsCreateOrUpdatePoller{
		pt: pt,
	}
	resp, err := poller.Poll(ctx)
	if err != nil {
		return err
	}
	l.Poller = poller
	l.RawResponse = resp
	return nil
}

// IscsiTargetsCreateOrUpdateResponse contains the response from method IscsiTargets.CreateOrUpdate.
type IscsiTargetsCreateOrUpdateResponse struct {
	IscsiTargetsCreateOrUpdateResult
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// IscsiTargetsCreateOrUpdateResult contains the result from method IscsiTargets.CreateOrUpdate.
type IscsiTargetsCreateOrUpdateResult struct {
	IscsiTarget
}

// IscsiTargetsDeletePollerResponse contains the response from method IscsiTargets.Delete.
type IscsiTargetsDeletePollerResponse struct {
	// Poller contains an initialized poller.
	Poller *IscsiTargetsDeletePoller

	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// PollUntilDone will poll the service endpoint until a terminal state is reached or an error is received.
// freq: the time to wait between intervals in absence of a Retry-After header. Allowed minimum is one second.
// A good starting value is 30 seconds. Note that some resources might benefit from a different value.
func (l IscsiTargetsDeletePollerResponse) PollUntilDone(ctx context.Context, freq time.Duration) (IscsiTargetsDeleteResponse, error) {
	respType := IscsiTargetsDeleteResponse{}
	resp, err := l.Poller.pt.PollUntilDone(ctx, freq, nil)
	if err != nil {
		return respType, err
	}
	respType.RawResponse = resp
	return respType, nil
}

// Resume rehydrates a IscsiTargetsDeletePollerResponse from the provided client and resume token.
func (l *IscsiTargetsDeletePollerResponse) Resume(ctx context.Context, client *IscsiTargetsClient, token string) error {
	pt, err := armruntime.NewPollerFromResumeToken("IscsiTargetsClient.Delete", token, client.pl, client.deleteHandleError)
	if err != nil {
		return err
	}
	poller := &IscsiTargetsDeletePoller{
		pt: pt,
	}
	resp, err := poller.Poll(ctx)
	if err != nil {
		return err
	}
	l.Poller = poller
	l.RawResponse = resp
	return nil
}

// IscsiTargetsDeleteResponse contains the response from method IscsiTargets.Delete.
type IscsiTargetsDeleteResponse struct {
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// IscsiTargetsGetResponse contains the response from method IscsiTargets.Get.
type IscsiTargetsGetResponse struct {
	IscsiTargetsGetResult
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// IscsiTargetsGetResult contains the result from method IscsiTargets.Get.
type IscsiTargetsGetResult struct {
	IscsiTarget
}

// IscsiTargetsListByDiskPoolResponse contains the response from method IscsiTargets.ListByDiskPool.
type IscsiTargetsListByDiskPoolResponse struct {
	IscsiTargetsListByDiskPoolResult
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// IscsiTargetsListByDiskPoolResult contains the result from method IscsiTargets.ListByDiskPool.
type IscsiTargetsListByDiskPoolResult struct {
	IscsiTargetList
}

// IscsiTargetsUpdatePollerResponse contains the response from method IscsiTargets.Update.
type IscsiTargetsUpdatePollerResponse struct {
	// Poller contains an initialized poller.
	Poller *IscsiTargetsUpdatePoller

	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// PollUntilDone will poll the service endpoint until a terminal state is reached or an error is received.
// freq: the time to wait between intervals in absence of a Retry-After header. Allowed minimum is one second.
// A good starting value is 30 seconds. Note that some resources might benefit from a different value.
func (l IscsiTargetsUpdatePollerResponse) PollUntilDone(ctx context.Context, freq time.Duration) (IscsiTargetsUpdateResponse, error) {
	respType := IscsiTargetsUpdateResponse{}
	resp, err := l.Poller.pt.PollUntilDone(ctx, freq, &respType.IscsiTarget)
	if err != nil {
		return respType, err
	}
	respType.RawResponse = resp
	return respType, nil
}

// Resume rehydrates a IscsiTargetsUpdatePollerResponse from the provided client and resume token.
func (l *IscsiTargetsUpdatePollerResponse) Resume(ctx context.Context, client *IscsiTargetsClient, token string) error {
	pt, err := armruntime.NewPollerFromResumeToken("IscsiTargetsClient.Update", token, client.pl, client.updateHandleError)
	if err != nil {
		return err
	}
	poller := &IscsiTargetsUpdatePoller{
		pt: pt,
	}
	resp, err := poller.Poll(ctx)
	if err != nil {
		return err
	}
	l.Poller = poller
	l.RawResponse = resp
	return nil
}

// IscsiTargetsUpdateResponse contains the response from method IscsiTargets.Update.
type IscsiTargetsUpdateResponse struct {
	IscsiTargetsUpdateResult
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// IscsiTargetsUpdateResult contains the result from method IscsiTargets.Update.
type IscsiTargetsUpdateResult struct {
	IscsiTarget
}

// OperationsListResponse contains the response from method Operations.List.
type OperationsListResponse struct {
	OperationsListResult
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// OperationsListResult contains the result from method Operations.List.
type OperationsListResult struct {
	StoragePoolOperationListResult
}

// ResourceSKUsListResponse contains the response from method ResourceSKUs.List.
type ResourceSKUsListResponse struct {
	ResourceSKUsListResult
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// ResourceSKUsListResult contains the result from method ResourceSKUs.List.
type ResourceSKUsListResult struct {
	ResourceSKUListResult
}
