//go:build go1.16
// +build go1.16

// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

package armstoragesync_test

import (
	"context"
	"log"

	"time"

	"github.com/Azure/azure-sdk-for-go/sdk/azcore/to"
	"github.com/Azure/azure-sdk-for-go/sdk/azidentity"
	"github.com/Azure/azure-sdk-for-go/sdk/resourcemanager/storagesync/armstoragesync"
)

// x-ms-original-file: specification/storagesync/resource-manager/Microsoft.StorageSync/stable/2020-09-01/examples/CloudEndpoints_Create.json
func ExampleCloudEndpointsClient_BeginCreate() {
	cred, err := azidentity.NewDefaultAzureCredential(nil)
	if err != nil {
		log.Fatalf("failed to obtain a credential: %v", err)
	}
	ctx := context.Background()
	client := armstoragesync.NewCloudEndpointsClient("<subscription-id>", cred, nil)
	poller, err := client.BeginCreate(ctx,
		"<resource-group-name>",
		"<storage-sync-service-name>",
		"<sync-group-name>",
		"<cloud-endpoint-name>",
		armstoragesync.CloudEndpointCreateParameters{
			Properties: &armstoragesync.CloudEndpointCreateParametersProperties{
				AzureFileShareName:       to.StringPtr("<azure-file-share-name>"),
				FriendlyName:             to.StringPtr("<friendly-name>"),
				StorageAccountResourceID: to.StringPtr("<storage-account-resource-id>"),
				StorageAccountTenantID:   to.StringPtr("<storage-account-tenant-id>"),
			},
		},
		nil)
	if err != nil {
		log.Fatal(err)
	}
	res, err := poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		log.Fatal(err)
	}
	log.Printf("Response result: %#v\n", res.CloudEndpointsClientCreateResult)
}

// x-ms-original-file: specification/storagesync/resource-manager/Microsoft.StorageSync/stable/2020-09-01/examples/CloudEndpoints_Get.json
func ExampleCloudEndpointsClient_Get() {
	cred, err := azidentity.NewDefaultAzureCredential(nil)
	if err != nil {
		log.Fatalf("failed to obtain a credential: %v", err)
	}
	ctx := context.Background()
	client := armstoragesync.NewCloudEndpointsClient("<subscription-id>", cred, nil)
	res, err := client.Get(ctx,
		"<resource-group-name>",
		"<storage-sync-service-name>",
		"<sync-group-name>",
		"<cloud-endpoint-name>",
		nil)
	if err != nil {
		log.Fatal(err)
	}
	log.Printf("Response result: %#v\n", res.CloudEndpointsClientGetResult)
}

// x-ms-original-file: specification/storagesync/resource-manager/Microsoft.StorageSync/stable/2020-09-01/examples/CloudEndpoints_Delete.json
func ExampleCloudEndpointsClient_BeginDelete() {
	cred, err := azidentity.NewDefaultAzureCredential(nil)
	if err != nil {
		log.Fatalf("failed to obtain a credential: %v", err)
	}
	ctx := context.Background()
	client := armstoragesync.NewCloudEndpointsClient("<subscription-id>", cred, nil)
	poller, err := client.BeginDelete(ctx,
		"<resource-group-name>",
		"<storage-sync-service-name>",
		"<sync-group-name>",
		"<cloud-endpoint-name>",
		nil)
	if err != nil {
		log.Fatal(err)
	}
	_, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		log.Fatal(err)
	}
}

// x-ms-original-file: specification/storagesync/resource-manager/Microsoft.StorageSync/stable/2020-09-01/examples/CloudEndpoints_ListBySyncGroup.json
func ExampleCloudEndpointsClient_ListBySyncGroup() {
	cred, err := azidentity.NewDefaultAzureCredential(nil)
	if err != nil {
		log.Fatalf("failed to obtain a credential: %v", err)
	}
	ctx := context.Background()
	client := armstoragesync.NewCloudEndpointsClient("<subscription-id>", cred, nil)
	res, err := client.ListBySyncGroup(ctx,
		"<resource-group-name>",
		"<storage-sync-service-name>",
		"<sync-group-name>",
		nil)
	if err != nil {
		log.Fatal(err)
	}
	log.Printf("Response result: %#v\n", res.CloudEndpointsClientListBySyncGroupResult)
}

// x-ms-original-file: specification/storagesync/resource-manager/Microsoft.StorageSync/stable/2020-09-01/examples/CloudEndpoints_PreBackup.json
func ExampleCloudEndpointsClient_BeginPreBackup() {
	cred, err := azidentity.NewDefaultAzureCredential(nil)
	if err != nil {
		log.Fatalf("failed to obtain a credential: %v", err)
	}
	ctx := context.Background()
	client := armstoragesync.NewCloudEndpointsClient("<subscription-id>", cred, nil)
	poller, err := client.BeginPreBackup(ctx,
		"<resource-group-name>",
		"<storage-sync-service-name>",
		"<sync-group-name>",
		"<cloud-endpoint-name>",
		armstoragesync.BackupRequest{
			AzureFileShare: to.StringPtr("<azure-file-share>"),
		},
		nil)
	if err != nil {
		log.Fatal(err)
	}
	_, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		log.Fatal(err)
	}
}

// x-ms-original-file: specification/storagesync/resource-manager/Microsoft.StorageSync/stable/2020-09-01/examples/CloudEndpoints_PostBackup.json
func ExampleCloudEndpointsClient_BeginPostBackup() {
	cred, err := azidentity.NewDefaultAzureCredential(nil)
	if err != nil {
		log.Fatalf("failed to obtain a credential: %v", err)
	}
	ctx := context.Background()
	client := armstoragesync.NewCloudEndpointsClient("<subscription-id>", cred, nil)
	poller, err := client.BeginPostBackup(ctx,
		"<resource-group-name>",
		"<storage-sync-service-name>",
		"<sync-group-name>",
		"<cloud-endpoint-name>",
		armstoragesync.BackupRequest{
			AzureFileShare: to.StringPtr("<azure-file-share>"),
		},
		nil)
	if err != nil {
		log.Fatal(err)
	}
	res, err := poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		log.Fatal(err)
	}
	log.Printf("Response result: %#v\n", res.CloudEndpointsClientPostBackupResult)
}

// x-ms-original-file: specification/storagesync/resource-manager/Microsoft.StorageSync/stable/2020-09-01/examples/CloudEndpoints_PreRestore.json
func ExampleCloudEndpointsClient_BeginPreRestore() {
	cred, err := azidentity.NewDefaultAzureCredential(nil)
	if err != nil {
		log.Fatalf("failed to obtain a credential: %v", err)
	}
	ctx := context.Background()
	client := armstoragesync.NewCloudEndpointsClient("<subscription-id>", cred, nil)
	poller, err := client.BeginPreRestore(ctx,
		"<resource-group-name>",
		"<storage-sync-service-name>",
		"<sync-group-name>",
		"<cloud-endpoint-name>",
		armstoragesync.PreRestoreRequest{
			AzureFileShareURI: to.StringPtr("<azure-file-share-uri>"),
			RestoreFileSpec: []*armstoragesync.RestoreFileSpec{
				{
					Path:  to.StringPtr("<path>"),
					Isdir: to.BoolPtr(false),
				},
				{
					Path:  to.StringPtr("<path>"),
					Isdir: to.BoolPtr(true),
				},
				{
					Path:  to.StringPtr("<path>"),
					Isdir: to.BoolPtr(false),
				},
				{
					Path:  to.StringPtr("<path>"),
					Isdir: to.BoolPtr(false),
				}},
		},
		nil)
	if err != nil {
		log.Fatal(err)
	}
	_, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		log.Fatal(err)
	}
}

// x-ms-original-file: specification/storagesync/resource-manager/Microsoft.StorageSync/stable/2020-09-01/examples/CloudEndpoints_RestoreHeatbeat.json
func ExampleCloudEndpointsClient_Restoreheartbeat() {
	cred, err := azidentity.NewDefaultAzureCredential(nil)
	if err != nil {
		log.Fatalf("failed to obtain a credential: %v", err)
	}
	ctx := context.Background()
	client := armstoragesync.NewCloudEndpointsClient("<subscription-id>", cred, nil)
	_, err = client.Restoreheartbeat(ctx,
		"<resource-group-name>",
		"<storage-sync-service-name>",
		"<sync-group-name>",
		"<cloud-endpoint-name>",
		nil)
	if err != nil {
		log.Fatal(err)
	}
}

// x-ms-original-file: specification/storagesync/resource-manager/Microsoft.StorageSync/stable/2020-09-01/examples/CloudEndpoints_PostRestore.json
func ExampleCloudEndpointsClient_BeginPostRestore() {
	cred, err := azidentity.NewDefaultAzureCredential(nil)
	if err != nil {
		log.Fatalf("failed to obtain a credential: %v", err)
	}
	ctx := context.Background()
	client := armstoragesync.NewCloudEndpointsClient("<subscription-id>", cred, nil)
	poller, err := client.BeginPostRestore(ctx,
		"<resource-group-name>",
		"<storage-sync-service-name>",
		"<sync-group-name>",
		"<cloud-endpoint-name>",
		armstoragesync.PostRestoreRequest{
			AzureFileShareURI: to.StringPtr("<azure-file-share-uri>"),
			RestoreFileSpec: []*armstoragesync.RestoreFileSpec{
				{
					Path:  to.StringPtr("<path>"),
					Isdir: to.BoolPtr(false),
				},
				{
					Path:  to.StringPtr("<path>"),
					Isdir: to.BoolPtr(true),
				},
				{
					Path:  to.StringPtr("<path>"),
					Isdir: to.BoolPtr(false),
				},
				{
					Path:  to.StringPtr("<path>"),
					Isdir: to.BoolPtr(false),
				}},
			SourceAzureFileShareURI: to.StringPtr("<source-azure-file-share-uri>"),
			Status:                  to.StringPtr("<status>"),
		},
		nil)
	if err != nil {
		log.Fatal(err)
	}
	_, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		log.Fatal(err)
	}
}

// x-ms-original-file: specification/storagesync/resource-manager/Microsoft.StorageSync/stable/2020-09-01/examples/CloudEndpoints_TriggerChangeDetection.json
func ExampleCloudEndpointsClient_BeginTriggerChangeDetection() {
	cred, err := azidentity.NewDefaultAzureCredential(nil)
	if err != nil {
		log.Fatalf("failed to obtain a credential: %v", err)
	}
	ctx := context.Background()
	client := armstoragesync.NewCloudEndpointsClient("<subscription-id>", cred, nil)
	poller, err := client.BeginTriggerChangeDetection(ctx,
		"<resource-group-name>",
		"<storage-sync-service-name>",
		"<sync-group-name>",
		"<cloud-endpoint-name>",
		armstoragesync.TriggerChangeDetectionParameters{
			ChangeDetectionMode: armstoragesync.ChangeDetectionMode("Recursive").ToPtr(),
			DirectoryPath:       to.StringPtr("<directory-path>"),
		},
		nil)
	if err != nil {
		log.Fatal(err)
	}
	_, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		log.Fatal(err)
	}
}
