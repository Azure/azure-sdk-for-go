//go:build go1.16
// +build go1.16

// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

package armstoragesync

import (
	"context"
	"errors"
	"fmt"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/arm"
	armruntime "github.com/Azure/azure-sdk-for-go/sdk/azcore/arm/runtime"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/policy"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/runtime"
	"net/http"
	"net/url"
	"strings"
)

// MicrosoftStorageSyncClient contains the methods for the MicrosoftStorageSync group.
// Don't use this type directly, use NewMicrosoftStorageSyncClient() instead.
type MicrosoftStorageSyncClient struct {
	ep             string
	pl             runtime.Pipeline
	subscriptionID string
}

// NewMicrosoftStorageSyncClient creates a new instance of MicrosoftStorageSyncClient with the specified values.
func NewMicrosoftStorageSyncClient(subscriptionID string, credential azcore.TokenCredential, options *arm.ClientOptions) *MicrosoftStorageSyncClient {
	cp := arm.ClientOptions{}
	if options != nil {
		cp = *options
	}
	if len(cp.Host) == 0 {
		cp.Host = arm.AzurePublicCloud
	}
	return &MicrosoftStorageSyncClient{subscriptionID: subscriptionID, ep: string(cp.Host), pl: armruntime.NewPipeline(module, version, credential, &cp)}
}

// LocationOperationStatus - Get Operation status
// If the operation fails it returns the *StorageSyncError error type.
func (client *MicrosoftStorageSyncClient) LocationOperationStatus(ctx context.Context, locationName string, operationID string, options *MicrosoftStorageSyncLocationOperationStatusOptions) (MicrosoftStorageSyncLocationOperationStatusResponse, error) {
	req, err := client.locationOperationStatusCreateRequest(ctx, locationName, operationID, options)
	if err != nil {
		return MicrosoftStorageSyncLocationOperationStatusResponse{}, err
	}
	resp, err := client.pl.Do(req)
	if err != nil {
		return MicrosoftStorageSyncLocationOperationStatusResponse{}, err
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {
		return MicrosoftStorageSyncLocationOperationStatusResponse{}, client.locationOperationStatusHandleError(resp)
	}
	return client.locationOperationStatusHandleResponse(resp)
}

// locationOperationStatusCreateRequest creates the LocationOperationStatus request.
func (client *MicrosoftStorageSyncClient) locationOperationStatusCreateRequest(ctx context.Context, locationName string, operationID string, options *MicrosoftStorageSyncLocationOperationStatusOptions) (*policy.Request, error) {
	urlPath := "/subscriptions/{subscriptionId}/providers/Microsoft.StorageSync/locations/{locationName}/operations/{operationId}"
	if client.subscriptionID == "" {
		return nil, errors.New("parameter client.subscriptionID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{subscriptionId}", url.PathEscape(client.subscriptionID))
	if locationName == "" {
		return nil, errors.New("parameter locationName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{locationName}", url.PathEscape(locationName))
	if operationID == "" {
		return nil, errors.New("parameter operationID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{operationId}", url.PathEscape(operationID))
	req, err := runtime.NewRequest(ctx, http.MethodGet, runtime.JoinPaths(client.ep, urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("api-version", "2020-09-01")
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header.Set("Accept", "application/json")
	return req, nil
}

// locationOperationStatusHandleResponse handles the LocationOperationStatus response.
func (client *MicrosoftStorageSyncClient) locationOperationStatusHandleResponse(resp *http.Response) (MicrosoftStorageSyncLocationOperationStatusResponse, error) {
	result := MicrosoftStorageSyncLocationOperationStatusResponse{RawResponse: resp}
	if val := resp.Header.Get("x-ms-request-id"); val != "" {
		result.XMSRequestID = &val
	}
	if val := resp.Header.Get("x-ms-correlation-request-id"); val != "" {
		result.XMSCorrelationRequestID = &val
	}
	if err := runtime.UnmarshalAsJSON(resp, &result.LocationOperationStatus); err != nil {
		return MicrosoftStorageSyncLocationOperationStatusResponse{}, runtime.NewResponseError(err, resp)
	}
	return result, nil
}

// locationOperationStatusHandleError handles the LocationOperationStatus error response.
func (client *MicrosoftStorageSyncClient) locationOperationStatusHandleError(resp *http.Response) error {
	body, err := runtime.Payload(resp)
	if err != nil {
		return runtime.NewResponseError(err, resp)
	}
	errType := StorageSyncError{raw: string(body)}
	if err := runtime.UnmarshalAsJSON(resp, &errType); err != nil {
		return runtime.NewResponseError(fmt.Errorf("%s\n%s", string(body), err), resp)
	}
	return runtime.NewResponseError(&errType, resp)
}
