//go:build go1.16
// +build go1.16

// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

package armstoragesync

import (
	"context"
	armruntime "github.com/Azure/azure-sdk-for-go/sdk/azcore/arm/runtime"
	"net/http"
	"time"
)

// CloudEndpointsClientCreatePollerResponse contains the response from method CloudEndpointsClient.Create.
type CloudEndpointsClientCreatePollerResponse struct {
	// Poller contains an initialized poller.
	Poller *CloudEndpointsClientCreatePoller

	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// PollUntilDone will poll the service endpoint until a terminal state is reached or an error is received.
// freq: the time to wait between intervals in absence of a Retry-After header. Allowed minimum is one second.
// A good starting value is 30 seconds. Note that some resources might benefit from a different value.
func (l CloudEndpointsClientCreatePollerResponse) PollUntilDone(ctx context.Context, freq time.Duration) (CloudEndpointsClientCreateResponse, error) {
	respType := CloudEndpointsClientCreateResponse{}
	resp, err := l.Poller.pt.PollUntilDone(ctx, freq, &respType.CloudEndpoint)
	if err != nil {
		return respType, err
	}
	respType.RawResponse = resp
	return respType, nil
}

// Resume rehydrates a CloudEndpointsClientCreatePollerResponse from the provided client and resume token.
func (l *CloudEndpointsClientCreatePollerResponse) Resume(ctx context.Context, client *CloudEndpointsClient, token string) error {
	pt, err := armruntime.NewPollerFromResumeToken("CloudEndpointsClient.Create", token, client.pl)
	if err != nil {
		return err
	}
	poller := &CloudEndpointsClientCreatePoller{
		pt: pt,
	}
	resp, err := poller.Poll(ctx)
	if err != nil {
		return err
	}
	l.Poller = poller
	l.RawResponse = resp
	return nil
}

// CloudEndpointsClientCreateResponse contains the response from method CloudEndpointsClient.Create.
type CloudEndpointsClientCreateResponse struct {
	CloudEndpointsClientCreateResult
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// CloudEndpointsClientCreateResult contains the result from method CloudEndpointsClient.Create.
type CloudEndpointsClientCreateResult struct {
	CloudEndpoint
}

// CloudEndpointsClientDeletePollerResponse contains the response from method CloudEndpointsClient.Delete.
type CloudEndpointsClientDeletePollerResponse struct {
	// Poller contains an initialized poller.
	Poller *CloudEndpointsClientDeletePoller

	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// PollUntilDone will poll the service endpoint until a terminal state is reached or an error is received.
// freq: the time to wait between intervals in absence of a Retry-After header. Allowed minimum is one second.
// A good starting value is 30 seconds. Note that some resources might benefit from a different value.
func (l CloudEndpointsClientDeletePollerResponse) PollUntilDone(ctx context.Context, freq time.Duration) (CloudEndpointsClientDeleteResponse, error) {
	respType := CloudEndpointsClientDeleteResponse{}
	resp, err := l.Poller.pt.PollUntilDone(ctx, freq, nil)
	if err != nil {
		return respType, err
	}
	respType.RawResponse = resp
	return respType, nil
}

// Resume rehydrates a CloudEndpointsClientDeletePollerResponse from the provided client and resume token.
func (l *CloudEndpointsClientDeletePollerResponse) Resume(ctx context.Context, client *CloudEndpointsClient, token string) error {
	pt, err := armruntime.NewPollerFromResumeToken("CloudEndpointsClient.Delete", token, client.pl)
	if err != nil {
		return err
	}
	poller := &CloudEndpointsClientDeletePoller{
		pt: pt,
	}
	resp, err := poller.Poll(ctx)
	if err != nil {
		return err
	}
	l.Poller = poller
	l.RawResponse = resp
	return nil
}

// CloudEndpointsClientDeleteResponse contains the response from method CloudEndpointsClient.Delete.
type CloudEndpointsClientDeleteResponse struct {
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// CloudEndpointsClientGetResponse contains the response from method CloudEndpointsClient.Get.
type CloudEndpointsClientGetResponse struct {
	CloudEndpointsClientGetResult
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// CloudEndpointsClientGetResult contains the result from method CloudEndpointsClient.Get.
type CloudEndpointsClientGetResult struct {
	CloudEndpoint
	// XMSCorrelationRequestID contains the information returned from the x-ms-correlation-request-id header response.
	XMSCorrelationRequestID *string

	// XMSRequestID contains the information returned from the x-ms-request-id header response.
	XMSRequestID *string
}

// CloudEndpointsClientListBySyncGroupResponse contains the response from method CloudEndpointsClient.ListBySyncGroup.
type CloudEndpointsClientListBySyncGroupResponse struct {
	CloudEndpointsClientListBySyncGroupResult
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// CloudEndpointsClientListBySyncGroupResult contains the result from method CloudEndpointsClient.ListBySyncGroup.
type CloudEndpointsClientListBySyncGroupResult struct {
	CloudEndpointArray
	// XMSCorrelationRequestID contains the information returned from the x-ms-correlation-request-id header response.
	XMSCorrelationRequestID *string

	// XMSRequestID contains the information returned from the x-ms-request-id header response.
	XMSRequestID *string
}

// CloudEndpointsClientPostBackupPollerResponse contains the response from method CloudEndpointsClient.PostBackup.
type CloudEndpointsClientPostBackupPollerResponse struct {
	// Poller contains an initialized poller.
	Poller *CloudEndpointsClientPostBackupPoller

	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// PollUntilDone will poll the service endpoint until a terminal state is reached or an error is received.
// freq: the time to wait between intervals in absence of a Retry-After header. Allowed minimum is one second.
// A good starting value is 30 seconds. Note that some resources might benefit from a different value.
func (l CloudEndpointsClientPostBackupPollerResponse) PollUntilDone(ctx context.Context, freq time.Duration) (CloudEndpointsClientPostBackupResponse, error) {
	respType := CloudEndpointsClientPostBackupResponse{}
	resp, err := l.Poller.pt.PollUntilDone(ctx, freq, &respType.PostBackupResponse)
	if err != nil {
		return respType, err
	}
	respType.RawResponse = resp
	return respType, nil
}

// Resume rehydrates a CloudEndpointsClientPostBackupPollerResponse from the provided client and resume token.
func (l *CloudEndpointsClientPostBackupPollerResponse) Resume(ctx context.Context, client *CloudEndpointsClient, token string) error {
	pt, err := armruntime.NewPollerFromResumeToken("CloudEndpointsClient.PostBackup", token, client.pl)
	if err != nil {
		return err
	}
	poller := &CloudEndpointsClientPostBackupPoller{
		pt: pt,
	}
	resp, err := poller.Poll(ctx)
	if err != nil {
		return err
	}
	l.Poller = poller
	l.RawResponse = resp
	return nil
}

// CloudEndpointsClientPostBackupResponse contains the response from method CloudEndpointsClient.PostBackup.
type CloudEndpointsClientPostBackupResponse struct {
	CloudEndpointsClientPostBackupResult
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// CloudEndpointsClientPostBackupResult contains the result from method CloudEndpointsClient.PostBackup.
type CloudEndpointsClientPostBackupResult struct {
	PostBackupResponse
}

// CloudEndpointsClientPostRestorePollerResponse contains the response from method CloudEndpointsClient.PostRestore.
type CloudEndpointsClientPostRestorePollerResponse struct {
	// Poller contains an initialized poller.
	Poller *CloudEndpointsClientPostRestorePoller

	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// PollUntilDone will poll the service endpoint until a terminal state is reached or an error is received.
// freq: the time to wait between intervals in absence of a Retry-After header. Allowed minimum is one second.
// A good starting value is 30 seconds. Note that some resources might benefit from a different value.
func (l CloudEndpointsClientPostRestorePollerResponse) PollUntilDone(ctx context.Context, freq time.Duration) (CloudEndpointsClientPostRestoreResponse, error) {
	respType := CloudEndpointsClientPostRestoreResponse{}
	resp, err := l.Poller.pt.PollUntilDone(ctx, freq, nil)
	if err != nil {
		return respType, err
	}
	respType.RawResponse = resp
	return respType, nil
}

// Resume rehydrates a CloudEndpointsClientPostRestorePollerResponse from the provided client and resume token.
func (l *CloudEndpointsClientPostRestorePollerResponse) Resume(ctx context.Context, client *CloudEndpointsClient, token string) error {
	pt, err := armruntime.NewPollerFromResumeToken("CloudEndpointsClient.PostRestore", token, client.pl)
	if err != nil {
		return err
	}
	poller := &CloudEndpointsClientPostRestorePoller{
		pt: pt,
	}
	resp, err := poller.Poll(ctx)
	if err != nil {
		return err
	}
	l.Poller = poller
	l.RawResponse = resp
	return nil
}

// CloudEndpointsClientPostRestoreResponse contains the response from method CloudEndpointsClient.PostRestore.
type CloudEndpointsClientPostRestoreResponse struct {
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// CloudEndpointsClientPreBackupPollerResponse contains the response from method CloudEndpointsClient.PreBackup.
type CloudEndpointsClientPreBackupPollerResponse struct {
	// Poller contains an initialized poller.
	Poller *CloudEndpointsClientPreBackupPoller

	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// PollUntilDone will poll the service endpoint until a terminal state is reached or an error is received.
// freq: the time to wait between intervals in absence of a Retry-After header. Allowed minimum is one second.
// A good starting value is 30 seconds. Note that some resources might benefit from a different value.
func (l CloudEndpointsClientPreBackupPollerResponse) PollUntilDone(ctx context.Context, freq time.Duration) (CloudEndpointsClientPreBackupResponse, error) {
	respType := CloudEndpointsClientPreBackupResponse{}
	resp, err := l.Poller.pt.PollUntilDone(ctx, freq, nil)
	if err != nil {
		return respType, err
	}
	respType.RawResponse = resp
	return respType, nil
}

// Resume rehydrates a CloudEndpointsClientPreBackupPollerResponse from the provided client and resume token.
func (l *CloudEndpointsClientPreBackupPollerResponse) Resume(ctx context.Context, client *CloudEndpointsClient, token string) error {
	pt, err := armruntime.NewPollerFromResumeToken("CloudEndpointsClient.PreBackup", token, client.pl)
	if err != nil {
		return err
	}
	poller := &CloudEndpointsClientPreBackupPoller{
		pt: pt,
	}
	resp, err := poller.Poll(ctx)
	if err != nil {
		return err
	}
	l.Poller = poller
	l.RawResponse = resp
	return nil
}

// CloudEndpointsClientPreBackupResponse contains the response from method CloudEndpointsClient.PreBackup.
type CloudEndpointsClientPreBackupResponse struct {
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// CloudEndpointsClientPreRestorePollerResponse contains the response from method CloudEndpointsClient.PreRestore.
type CloudEndpointsClientPreRestorePollerResponse struct {
	// Poller contains an initialized poller.
	Poller *CloudEndpointsClientPreRestorePoller

	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// PollUntilDone will poll the service endpoint until a terminal state is reached or an error is received.
// freq: the time to wait between intervals in absence of a Retry-After header. Allowed minimum is one second.
// A good starting value is 30 seconds. Note that some resources might benefit from a different value.
func (l CloudEndpointsClientPreRestorePollerResponse) PollUntilDone(ctx context.Context, freq time.Duration) (CloudEndpointsClientPreRestoreResponse, error) {
	respType := CloudEndpointsClientPreRestoreResponse{}
	resp, err := l.Poller.pt.PollUntilDone(ctx, freq, nil)
	if err != nil {
		return respType, err
	}
	respType.RawResponse = resp
	return respType, nil
}

// Resume rehydrates a CloudEndpointsClientPreRestorePollerResponse from the provided client and resume token.
func (l *CloudEndpointsClientPreRestorePollerResponse) Resume(ctx context.Context, client *CloudEndpointsClient, token string) error {
	pt, err := armruntime.NewPollerFromResumeToken("CloudEndpointsClient.PreRestore", token, client.pl)
	if err != nil {
		return err
	}
	poller := &CloudEndpointsClientPreRestorePoller{
		pt: pt,
	}
	resp, err := poller.Poll(ctx)
	if err != nil {
		return err
	}
	l.Poller = poller
	l.RawResponse = resp
	return nil
}

// CloudEndpointsClientPreRestoreResponse contains the response from method CloudEndpointsClient.PreRestore.
type CloudEndpointsClientPreRestoreResponse struct {
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// CloudEndpointsClientRestoreheartbeatResponse contains the response from method CloudEndpointsClient.Restoreheartbeat.
type CloudEndpointsClientRestoreheartbeatResponse struct {
	CloudEndpointsClientRestoreheartbeatResult
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// CloudEndpointsClientRestoreheartbeatResult contains the result from method CloudEndpointsClient.Restoreheartbeat.
type CloudEndpointsClientRestoreheartbeatResult struct {
	// XMSCorrelationRequestID contains the information returned from the x-ms-correlation-request-id header response.
	XMSCorrelationRequestID *string

	// XMSRequestID contains the information returned from the x-ms-request-id header response.
	XMSRequestID *string
}

// CloudEndpointsClientTriggerChangeDetectionPollerResponse contains the response from method CloudEndpointsClient.TriggerChangeDetection.
type CloudEndpointsClientTriggerChangeDetectionPollerResponse struct {
	// Poller contains an initialized poller.
	Poller *CloudEndpointsClientTriggerChangeDetectionPoller

	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// PollUntilDone will poll the service endpoint until a terminal state is reached or an error is received.
// freq: the time to wait between intervals in absence of a Retry-After header. Allowed minimum is one second.
// A good starting value is 30 seconds. Note that some resources might benefit from a different value.
func (l CloudEndpointsClientTriggerChangeDetectionPollerResponse) PollUntilDone(ctx context.Context, freq time.Duration) (CloudEndpointsClientTriggerChangeDetectionResponse, error) {
	respType := CloudEndpointsClientTriggerChangeDetectionResponse{}
	resp, err := l.Poller.pt.PollUntilDone(ctx, freq, nil)
	if err != nil {
		return respType, err
	}
	respType.RawResponse = resp
	return respType, nil
}

// Resume rehydrates a CloudEndpointsClientTriggerChangeDetectionPollerResponse from the provided client and resume token.
func (l *CloudEndpointsClientTriggerChangeDetectionPollerResponse) Resume(ctx context.Context, client *CloudEndpointsClient, token string) error {
	pt, err := armruntime.NewPollerFromResumeToken("CloudEndpointsClient.TriggerChangeDetection", token, client.pl)
	if err != nil {
		return err
	}
	poller := &CloudEndpointsClientTriggerChangeDetectionPoller{
		pt: pt,
	}
	resp, err := poller.Poll(ctx)
	if err != nil {
		return err
	}
	l.Poller = poller
	l.RawResponse = resp
	return nil
}

// CloudEndpointsClientTriggerChangeDetectionResponse contains the response from method CloudEndpointsClient.TriggerChangeDetection.
type CloudEndpointsClientTriggerChangeDetectionResponse struct {
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// MicrosoftStorageSyncClientLocationOperationStatusResponse contains the response from method MicrosoftStorageSyncClient.LocationOperationStatus.
type MicrosoftStorageSyncClientLocationOperationStatusResponse struct {
	MicrosoftStorageSyncClientLocationOperationStatusResult
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// MicrosoftStorageSyncClientLocationOperationStatusResult contains the result from method MicrosoftStorageSyncClient.LocationOperationStatus.
type MicrosoftStorageSyncClientLocationOperationStatusResult struct {
	LocationOperationStatus
	// XMSCorrelationRequestID contains the information returned from the x-ms-correlation-request-id header response.
	XMSCorrelationRequestID *string

	// XMSRequestID contains the information returned from the x-ms-request-id header response.
	XMSRequestID *string
}

// OperationStatusClientGetResponse contains the response from method OperationStatusClient.Get.
type OperationStatusClientGetResponse struct {
	OperationStatusClientGetResult
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// OperationStatusClientGetResult contains the result from method OperationStatusClient.Get.
type OperationStatusClientGetResult struct {
	OperationStatus
	// XMSCorrelationRequestID contains the information returned from the x-ms-correlation-request-id header response.
	XMSCorrelationRequestID *string

	// XMSRequestID contains the information returned from the x-ms-request-id header response.
	XMSRequestID *string
}

// OperationsClientListResponse contains the response from method OperationsClient.List.
type OperationsClientListResponse struct {
	OperationsClientListResult
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// OperationsClientListResult contains the result from method OperationsClient.List.
type OperationsClientListResult struct {
	OperationEntityListResult
	// XMSCorrelationRequestID contains the information returned from the x-ms-correlation-request-id header response.
	XMSCorrelationRequestID *string

	// XMSRequestID contains the information returned from the x-ms-request-id header response.
	XMSRequestID *string
}

// PrivateEndpointConnectionsClientCreatePollerResponse contains the response from method PrivateEndpointConnectionsClient.Create.
type PrivateEndpointConnectionsClientCreatePollerResponse struct {
	// Poller contains an initialized poller.
	Poller *PrivateEndpointConnectionsClientCreatePoller

	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// PollUntilDone will poll the service endpoint until a terminal state is reached or an error is received.
// freq: the time to wait between intervals in absence of a Retry-After header. Allowed minimum is one second.
// A good starting value is 30 seconds. Note that some resources might benefit from a different value.
func (l PrivateEndpointConnectionsClientCreatePollerResponse) PollUntilDone(ctx context.Context, freq time.Duration) (PrivateEndpointConnectionsClientCreateResponse, error) {
	respType := PrivateEndpointConnectionsClientCreateResponse{}
	resp, err := l.Poller.pt.PollUntilDone(ctx, freq, &respType.PrivateEndpointConnection)
	if err != nil {
		return respType, err
	}
	respType.RawResponse = resp
	return respType, nil
}

// Resume rehydrates a PrivateEndpointConnectionsClientCreatePollerResponse from the provided client and resume token.
func (l *PrivateEndpointConnectionsClientCreatePollerResponse) Resume(ctx context.Context, client *PrivateEndpointConnectionsClient, token string) error {
	pt, err := armruntime.NewPollerFromResumeToken("PrivateEndpointConnectionsClient.Create", token, client.pl)
	if err != nil {
		return err
	}
	poller := &PrivateEndpointConnectionsClientCreatePoller{
		pt: pt,
	}
	resp, err := poller.Poll(ctx)
	if err != nil {
		return err
	}
	l.Poller = poller
	l.RawResponse = resp
	return nil
}

// PrivateEndpointConnectionsClientCreateResponse contains the response from method PrivateEndpointConnectionsClient.Create.
type PrivateEndpointConnectionsClientCreateResponse struct {
	PrivateEndpointConnectionsClientCreateResult
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// PrivateEndpointConnectionsClientCreateResult contains the result from method PrivateEndpointConnectionsClient.Create.
type PrivateEndpointConnectionsClientCreateResult struct {
	PrivateEndpointConnection
}

// PrivateEndpointConnectionsClientDeletePollerResponse contains the response from method PrivateEndpointConnectionsClient.Delete.
type PrivateEndpointConnectionsClientDeletePollerResponse struct {
	// Poller contains an initialized poller.
	Poller *PrivateEndpointConnectionsClientDeletePoller

	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// PollUntilDone will poll the service endpoint until a terminal state is reached or an error is received.
// freq: the time to wait between intervals in absence of a Retry-After header. Allowed minimum is one second.
// A good starting value is 30 seconds. Note that some resources might benefit from a different value.
func (l PrivateEndpointConnectionsClientDeletePollerResponse) PollUntilDone(ctx context.Context, freq time.Duration) (PrivateEndpointConnectionsClientDeleteResponse, error) {
	respType := PrivateEndpointConnectionsClientDeleteResponse{}
	resp, err := l.Poller.pt.PollUntilDone(ctx, freq, nil)
	if err != nil {
		return respType, err
	}
	respType.RawResponse = resp
	return respType, nil
}

// Resume rehydrates a PrivateEndpointConnectionsClientDeletePollerResponse from the provided client and resume token.
func (l *PrivateEndpointConnectionsClientDeletePollerResponse) Resume(ctx context.Context, client *PrivateEndpointConnectionsClient, token string) error {
	pt, err := armruntime.NewPollerFromResumeToken("PrivateEndpointConnectionsClient.Delete", token, client.pl)
	if err != nil {
		return err
	}
	poller := &PrivateEndpointConnectionsClientDeletePoller{
		pt: pt,
	}
	resp, err := poller.Poll(ctx)
	if err != nil {
		return err
	}
	l.Poller = poller
	l.RawResponse = resp
	return nil
}

// PrivateEndpointConnectionsClientDeleteResponse contains the response from method PrivateEndpointConnectionsClient.Delete.
type PrivateEndpointConnectionsClientDeleteResponse struct {
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// PrivateEndpointConnectionsClientGetResponse contains the response from method PrivateEndpointConnectionsClient.Get.
type PrivateEndpointConnectionsClientGetResponse struct {
	PrivateEndpointConnectionsClientGetResult
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// PrivateEndpointConnectionsClientGetResult contains the result from method PrivateEndpointConnectionsClient.Get.
type PrivateEndpointConnectionsClientGetResult struct {
	PrivateEndpointConnection
}

// PrivateEndpointConnectionsClientListByStorageSyncServiceResponse contains the response from method PrivateEndpointConnectionsClient.ListByStorageSyncService.
type PrivateEndpointConnectionsClientListByStorageSyncServiceResponse struct {
	PrivateEndpointConnectionsClientListByStorageSyncServiceResult
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// PrivateEndpointConnectionsClientListByStorageSyncServiceResult contains the result from method PrivateEndpointConnectionsClient.ListByStorageSyncService.
type PrivateEndpointConnectionsClientListByStorageSyncServiceResult struct {
	PrivateEndpointConnectionListResult
	// XMSCorrelationRequestID contains the information returned from the x-ms-correlation-request-id header response.
	XMSCorrelationRequestID *string

	// XMSRequestID contains the information returned from the x-ms-request-id header response.
	XMSRequestID *string
}

// PrivateLinkResourcesClientListByStorageSyncServiceResponse contains the response from method PrivateLinkResourcesClient.ListByStorageSyncService.
type PrivateLinkResourcesClientListByStorageSyncServiceResponse struct {
	PrivateLinkResourcesClientListByStorageSyncServiceResult
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// PrivateLinkResourcesClientListByStorageSyncServiceResult contains the result from method PrivateLinkResourcesClient.ListByStorageSyncService.
type PrivateLinkResourcesClientListByStorageSyncServiceResult struct {
	PrivateLinkResourceListResult
}

// RegisteredServersClientCreatePollerResponse contains the response from method RegisteredServersClient.Create.
type RegisteredServersClientCreatePollerResponse struct {
	// Poller contains an initialized poller.
	Poller *RegisteredServersClientCreatePoller

	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// PollUntilDone will poll the service endpoint until a terminal state is reached or an error is received.
// freq: the time to wait between intervals in absence of a Retry-After header. Allowed minimum is one second.
// A good starting value is 30 seconds. Note that some resources might benefit from a different value.
func (l RegisteredServersClientCreatePollerResponse) PollUntilDone(ctx context.Context, freq time.Duration) (RegisteredServersClientCreateResponse, error) {
	respType := RegisteredServersClientCreateResponse{}
	resp, err := l.Poller.pt.PollUntilDone(ctx, freq, &respType.RegisteredServer)
	if err != nil {
		return respType, err
	}
	respType.RawResponse = resp
	return respType, nil
}

// Resume rehydrates a RegisteredServersClientCreatePollerResponse from the provided client and resume token.
func (l *RegisteredServersClientCreatePollerResponse) Resume(ctx context.Context, client *RegisteredServersClient, token string) error {
	pt, err := armruntime.NewPollerFromResumeToken("RegisteredServersClient.Create", token, client.pl)
	if err != nil {
		return err
	}
	poller := &RegisteredServersClientCreatePoller{
		pt: pt,
	}
	resp, err := poller.Poll(ctx)
	if err != nil {
		return err
	}
	l.Poller = poller
	l.RawResponse = resp
	return nil
}

// RegisteredServersClientCreateResponse contains the response from method RegisteredServersClient.Create.
type RegisteredServersClientCreateResponse struct {
	RegisteredServersClientCreateResult
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// RegisteredServersClientCreateResult contains the result from method RegisteredServersClient.Create.
type RegisteredServersClientCreateResult struct {
	RegisteredServer
}

// RegisteredServersClientDeletePollerResponse contains the response from method RegisteredServersClient.Delete.
type RegisteredServersClientDeletePollerResponse struct {
	// Poller contains an initialized poller.
	Poller *RegisteredServersClientDeletePoller

	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// PollUntilDone will poll the service endpoint until a terminal state is reached or an error is received.
// freq: the time to wait between intervals in absence of a Retry-After header. Allowed minimum is one second.
// A good starting value is 30 seconds. Note that some resources might benefit from a different value.
func (l RegisteredServersClientDeletePollerResponse) PollUntilDone(ctx context.Context, freq time.Duration) (RegisteredServersClientDeleteResponse, error) {
	respType := RegisteredServersClientDeleteResponse{}
	resp, err := l.Poller.pt.PollUntilDone(ctx, freq, nil)
	if err != nil {
		return respType, err
	}
	respType.RawResponse = resp
	return respType, nil
}

// Resume rehydrates a RegisteredServersClientDeletePollerResponse from the provided client and resume token.
func (l *RegisteredServersClientDeletePollerResponse) Resume(ctx context.Context, client *RegisteredServersClient, token string) error {
	pt, err := armruntime.NewPollerFromResumeToken("RegisteredServersClient.Delete", token, client.pl)
	if err != nil {
		return err
	}
	poller := &RegisteredServersClientDeletePoller{
		pt: pt,
	}
	resp, err := poller.Poll(ctx)
	if err != nil {
		return err
	}
	l.Poller = poller
	l.RawResponse = resp
	return nil
}

// RegisteredServersClientDeleteResponse contains the response from method RegisteredServersClient.Delete.
type RegisteredServersClientDeleteResponse struct {
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// RegisteredServersClientGetResponse contains the response from method RegisteredServersClient.Get.
type RegisteredServersClientGetResponse struct {
	RegisteredServersClientGetResult
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// RegisteredServersClientGetResult contains the result from method RegisteredServersClient.Get.
type RegisteredServersClientGetResult struct {
	RegisteredServer
	// XMSCorrelationRequestID contains the information returned from the x-ms-correlation-request-id header response.
	XMSCorrelationRequestID *string

	// XMSRequestID contains the information returned from the x-ms-request-id header response.
	XMSRequestID *string
}

// RegisteredServersClientListByStorageSyncServiceResponse contains the response from method RegisteredServersClient.ListByStorageSyncService.
type RegisteredServersClientListByStorageSyncServiceResponse struct {
	RegisteredServersClientListByStorageSyncServiceResult
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// RegisteredServersClientListByStorageSyncServiceResult contains the result from method RegisteredServersClient.ListByStorageSyncService.
type RegisteredServersClientListByStorageSyncServiceResult struct {
	RegisteredServerArray
	// XMSCorrelationRequestID contains the information returned from the x-ms-correlation-request-id header response.
	XMSCorrelationRequestID *string

	// XMSRequestID contains the information returned from the x-ms-request-id header response.
	XMSRequestID *string
}

// RegisteredServersClientTriggerRolloverPollerResponse contains the response from method RegisteredServersClient.TriggerRollover.
type RegisteredServersClientTriggerRolloverPollerResponse struct {
	// Poller contains an initialized poller.
	Poller *RegisteredServersClientTriggerRolloverPoller

	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// PollUntilDone will poll the service endpoint until a terminal state is reached or an error is received.
// freq: the time to wait between intervals in absence of a Retry-After header. Allowed minimum is one second.
// A good starting value is 30 seconds. Note that some resources might benefit from a different value.
func (l RegisteredServersClientTriggerRolloverPollerResponse) PollUntilDone(ctx context.Context, freq time.Duration) (RegisteredServersClientTriggerRolloverResponse, error) {
	respType := RegisteredServersClientTriggerRolloverResponse{}
	resp, err := l.Poller.pt.PollUntilDone(ctx, freq, nil)
	if err != nil {
		return respType, err
	}
	respType.RawResponse = resp
	return respType, nil
}

// Resume rehydrates a RegisteredServersClientTriggerRolloverPollerResponse from the provided client and resume token.
func (l *RegisteredServersClientTriggerRolloverPollerResponse) Resume(ctx context.Context, client *RegisteredServersClient, token string) error {
	pt, err := armruntime.NewPollerFromResumeToken("RegisteredServersClient.TriggerRollover", token, client.pl)
	if err != nil {
		return err
	}
	poller := &RegisteredServersClientTriggerRolloverPoller{
		pt: pt,
	}
	resp, err := poller.Poll(ctx)
	if err != nil {
		return err
	}
	l.Poller = poller
	l.RawResponse = resp
	return nil
}

// RegisteredServersClientTriggerRolloverResponse contains the response from method RegisteredServersClient.TriggerRollover.
type RegisteredServersClientTriggerRolloverResponse struct {
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// ServerEndpointsClientCreatePollerResponse contains the response from method ServerEndpointsClient.Create.
type ServerEndpointsClientCreatePollerResponse struct {
	// Poller contains an initialized poller.
	Poller *ServerEndpointsClientCreatePoller

	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// PollUntilDone will poll the service endpoint until a terminal state is reached or an error is received.
// freq: the time to wait between intervals in absence of a Retry-After header. Allowed minimum is one second.
// A good starting value is 30 seconds. Note that some resources might benefit from a different value.
func (l ServerEndpointsClientCreatePollerResponse) PollUntilDone(ctx context.Context, freq time.Duration) (ServerEndpointsClientCreateResponse, error) {
	respType := ServerEndpointsClientCreateResponse{}
	resp, err := l.Poller.pt.PollUntilDone(ctx, freq, &respType.ServerEndpoint)
	if err != nil {
		return respType, err
	}
	respType.RawResponse = resp
	return respType, nil
}

// Resume rehydrates a ServerEndpointsClientCreatePollerResponse from the provided client and resume token.
func (l *ServerEndpointsClientCreatePollerResponse) Resume(ctx context.Context, client *ServerEndpointsClient, token string) error {
	pt, err := armruntime.NewPollerFromResumeToken("ServerEndpointsClient.Create", token, client.pl)
	if err != nil {
		return err
	}
	poller := &ServerEndpointsClientCreatePoller{
		pt: pt,
	}
	resp, err := poller.Poll(ctx)
	if err != nil {
		return err
	}
	l.Poller = poller
	l.RawResponse = resp
	return nil
}

// ServerEndpointsClientCreateResponse contains the response from method ServerEndpointsClient.Create.
type ServerEndpointsClientCreateResponse struct {
	ServerEndpointsClientCreateResult
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// ServerEndpointsClientCreateResult contains the result from method ServerEndpointsClient.Create.
type ServerEndpointsClientCreateResult struct {
	ServerEndpoint
}

// ServerEndpointsClientDeletePollerResponse contains the response from method ServerEndpointsClient.Delete.
type ServerEndpointsClientDeletePollerResponse struct {
	// Poller contains an initialized poller.
	Poller *ServerEndpointsClientDeletePoller

	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// PollUntilDone will poll the service endpoint until a terminal state is reached or an error is received.
// freq: the time to wait between intervals in absence of a Retry-After header. Allowed minimum is one second.
// A good starting value is 30 seconds. Note that some resources might benefit from a different value.
func (l ServerEndpointsClientDeletePollerResponse) PollUntilDone(ctx context.Context, freq time.Duration) (ServerEndpointsClientDeleteResponse, error) {
	respType := ServerEndpointsClientDeleteResponse{}
	resp, err := l.Poller.pt.PollUntilDone(ctx, freq, nil)
	if err != nil {
		return respType, err
	}
	respType.RawResponse = resp
	return respType, nil
}

// Resume rehydrates a ServerEndpointsClientDeletePollerResponse from the provided client and resume token.
func (l *ServerEndpointsClientDeletePollerResponse) Resume(ctx context.Context, client *ServerEndpointsClient, token string) error {
	pt, err := armruntime.NewPollerFromResumeToken("ServerEndpointsClient.Delete", token, client.pl)
	if err != nil {
		return err
	}
	poller := &ServerEndpointsClientDeletePoller{
		pt: pt,
	}
	resp, err := poller.Poll(ctx)
	if err != nil {
		return err
	}
	l.Poller = poller
	l.RawResponse = resp
	return nil
}

// ServerEndpointsClientDeleteResponse contains the response from method ServerEndpointsClient.Delete.
type ServerEndpointsClientDeleteResponse struct {
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// ServerEndpointsClientGetResponse contains the response from method ServerEndpointsClient.Get.
type ServerEndpointsClientGetResponse struct {
	ServerEndpointsClientGetResult
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// ServerEndpointsClientGetResult contains the result from method ServerEndpointsClient.Get.
type ServerEndpointsClientGetResult struct {
	ServerEndpoint
	// XMSCorrelationRequestID contains the information returned from the x-ms-correlation-request-id header response.
	XMSCorrelationRequestID *string

	// XMSRequestID contains the information returned from the x-ms-request-id header response.
	XMSRequestID *string
}

// ServerEndpointsClientListBySyncGroupResponse contains the response from method ServerEndpointsClient.ListBySyncGroup.
type ServerEndpointsClientListBySyncGroupResponse struct {
	ServerEndpointsClientListBySyncGroupResult
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// ServerEndpointsClientListBySyncGroupResult contains the result from method ServerEndpointsClient.ListBySyncGroup.
type ServerEndpointsClientListBySyncGroupResult struct {
	ServerEndpointArray
	// Location contains the information returned from the Location header response.
	Location *string

	// XMSCorrelationRequestID contains the information returned from the x-ms-correlation-request-id header response.
	XMSCorrelationRequestID *string

	// XMSRequestID contains the information returned from the x-ms-request-id header response.
	XMSRequestID *string
}

// ServerEndpointsClientRecallActionPollerResponse contains the response from method ServerEndpointsClient.RecallAction.
type ServerEndpointsClientRecallActionPollerResponse struct {
	// Poller contains an initialized poller.
	Poller *ServerEndpointsClientRecallActionPoller

	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// PollUntilDone will poll the service endpoint until a terminal state is reached or an error is received.
// freq: the time to wait between intervals in absence of a Retry-After header. Allowed minimum is one second.
// A good starting value is 30 seconds. Note that some resources might benefit from a different value.
func (l ServerEndpointsClientRecallActionPollerResponse) PollUntilDone(ctx context.Context, freq time.Duration) (ServerEndpointsClientRecallActionResponse, error) {
	respType := ServerEndpointsClientRecallActionResponse{}
	resp, err := l.Poller.pt.PollUntilDone(ctx, freq, nil)
	if err != nil {
		return respType, err
	}
	respType.RawResponse = resp
	return respType, nil
}

// Resume rehydrates a ServerEndpointsClientRecallActionPollerResponse from the provided client and resume token.
func (l *ServerEndpointsClientRecallActionPollerResponse) Resume(ctx context.Context, client *ServerEndpointsClient, token string) error {
	pt, err := armruntime.NewPollerFromResumeToken("ServerEndpointsClient.RecallAction", token, client.pl)
	if err != nil {
		return err
	}
	poller := &ServerEndpointsClientRecallActionPoller{
		pt: pt,
	}
	resp, err := poller.Poll(ctx)
	if err != nil {
		return err
	}
	l.Poller = poller
	l.RawResponse = resp
	return nil
}

// ServerEndpointsClientRecallActionResponse contains the response from method ServerEndpointsClient.RecallAction.
type ServerEndpointsClientRecallActionResponse struct {
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// ServerEndpointsClientUpdatePollerResponse contains the response from method ServerEndpointsClient.Update.
type ServerEndpointsClientUpdatePollerResponse struct {
	// Poller contains an initialized poller.
	Poller *ServerEndpointsClientUpdatePoller

	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// PollUntilDone will poll the service endpoint until a terminal state is reached or an error is received.
// freq: the time to wait between intervals in absence of a Retry-After header. Allowed minimum is one second.
// A good starting value is 30 seconds. Note that some resources might benefit from a different value.
func (l ServerEndpointsClientUpdatePollerResponse) PollUntilDone(ctx context.Context, freq time.Duration) (ServerEndpointsClientUpdateResponse, error) {
	respType := ServerEndpointsClientUpdateResponse{}
	resp, err := l.Poller.pt.PollUntilDone(ctx, freq, &respType.ServerEndpoint)
	if err != nil {
		return respType, err
	}
	respType.RawResponse = resp
	return respType, nil
}

// Resume rehydrates a ServerEndpointsClientUpdatePollerResponse from the provided client and resume token.
func (l *ServerEndpointsClientUpdatePollerResponse) Resume(ctx context.Context, client *ServerEndpointsClient, token string) error {
	pt, err := armruntime.NewPollerFromResumeToken("ServerEndpointsClient.Update", token, client.pl)
	if err != nil {
		return err
	}
	poller := &ServerEndpointsClientUpdatePoller{
		pt: pt,
	}
	resp, err := poller.Poll(ctx)
	if err != nil {
		return err
	}
	l.Poller = poller
	l.RawResponse = resp
	return nil
}

// ServerEndpointsClientUpdateResponse contains the response from method ServerEndpointsClient.Update.
type ServerEndpointsClientUpdateResponse struct {
	ServerEndpointsClientUpdateResult
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// ServerEndpointsClientUpdateResult contains the result from method ServerEndpointsClient.Update.
type ServerEndpointsClientUpdateResult struct {
	ServerEndpoint
}

// ServicesClientCheckNameAvailabilityResponse contains the response from method ServicesClient.CheckNameAvailability.
type ServicesClientCheckNameAvailabilityResponse struct {
	ServicesClientCheckNameAvailabilityResult
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// ServicesClientCheckNameAvailabilityResult contains the result from method ServicesClient.CheckNameAvailability.
type ServicesClientCheckNameAvailabilityResult struct {
	CheckNameAvailabilityResult
}

// ServicesClientCreatePollerResponse contains the response from method ServicesClient.Create.
type ServicesClientCreatePollerResponse struct {
	// Poller contains an initialized poller.
	Poller *ServicesClientCreatePoller

	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// PollUntilDone will poll the service endpoint until a terminal state is reached or an error is received.
// freq: the time to wait between intervals in absence of a Retry-After header. Allowed minimum is one second.
// A good starting value is 30 seconds. Note that some resources might benefit from a different value.
func (l ServicesClientCreatePollerResponse) PollUntilDone(ctx context.Context, freq time.Duration) (ServicesClientCreateResponse, error) {
	respType := ServicesClientCreateResponse{}
	resp, err := l.Poller.pt.PollUntilDone(ctx, freq, &respType.Service)
	if err != nil {
		return respType, err
	}
	respType.RawResponse = resp
	return respType, nil
}

// Resume rehydrates a ServicesClientCreatePollerResponse from the provided client and resume token.
func (l *ServicesClientCreatePollerResponse) Resume(ctx context.Context, client *ServicesClient, token string) error {
	pt, err := armruntime.NewPollerFromResumeToken("ServicesClient.Create", token, client.pl)
	if err != nil {
		return err
	}
	poller := &ServicesClientCreatePoller{
		pt: pt,
	}
	resp, err := poller.Poll(ctx)
	if err != nil {
		return err
	}
	l.Poller = poller
	l.RawResponse = resp
	return nil
}

// ServicesClientCreateResponse contains the response from method ServicesClient.Create.
type ServicesClientCreateResponse struct {
	ServicesClientCreateResult
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// ServicesClientCreateResult contains the result from method ServicesClient.Create.
type ServicesClientCreateResult struct {
	Service
}

// ServicesClientDeletePollerResponse contains the response from method ServicesClient.Delete.
type ServicesClientDeletePollerResponse struct {
	// Poller contains an initialized poller.
	Poller *ServicesClientDeletePoller

	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// PollUntilDone will poll the service endpoint until a terminal state is reached or an error is received.
// freq: the time to wait between intervals in absence of a Retry-After header. Allowed minimum is one second.
// A good starting value is 30 seconds. Note that some resources might benefit from a different value.
func (l ServicesClientDeletePollerResponse) PollUntilDone(ctx context.Context, freq time.Duration) (ServicesClientDeleteResponse, error) {
	respType := ServicesClientDeleteResponse{}
	resp, err := l.Poller.pt.PollUntilDone(ctx, freq, nil)
	if err != nil {
		return respType, err
	}
	respType.RawResponse = resp
	return respType, nil
}

// Resume rehydrates a ServicesClientDeletePollerResponse from the provided client and resume token.
func (l *ServicesClientDeletePollerResponse) Resume(ctx context.Context, client *ServicesClient, token string) error {
	pt, err := armruntime.NewPollerFromResumeToken("ServicesClient.Delete", token, client.pl)
	if err != nil {
		return err
	}
	poller := &ServicesClientDeletePoller{
		pt: pt,
	}
	resp, err := poller.Poll(ctx)
	if err != nil {
		return err
	}
	l.Poller = poller
	l.RawResponse = resp
	return nil
}

// ServicesClientDeleteResponse contains the response from method ServicesClient.Delete.
type ServicesClientDeleteResponse struct {
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// ServicesClientGetResponse contains the response from method ServicesClient.Get.
type ServicesClientGetResponse struct {
	ServicesClientGetResult
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// ServicesClientGetResult contains the result from method ServicesClient.Get.
type ServicesClientGetResult struct {
	Service
	// XMSCorrelationRequestID contains the information returned from the x-ms-correlation-request-id header response.
	XMSCorrelationRequestID *string

	// XMSRequestID contains the information returned from the x-ms-request-id header response.
	XMSRequestID *string
}

// ServicesClientListByResourceGroupResponse contains the response from method ServicesClient.ListByResourceGroup.
type ServicesClientListByResourceGroupResponse struct {
	ServicesClientListByResourceGroupResult
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// ServicesClientListByResourceGroupResult contains the result from method ServicesClient.ListByResourceGroup.
type ServicesClientListByResourceGroupResult struct {
	ServiceArray
	// XMSCorrelationRequestID contains the information returned from the x-ms-correlation-request-id header response.
	XMSCorrelationRequestID *string

	// XMSRequestID contains the information returned from the x-ms-request-id header response.
	XMSRequestID *string
}

// ServicesClientListBySubscriptionResponse contains the response from method ServicesClient.ListBySubscription.
type ServicesClientListBySubscriptionResponse struct {
	ServicesClientListBySubscriptionResult
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// ServicesClientListBySubscriptionResult contains the result from method ServicesClient.ListBySubscription.
type ServicesClientListBySubscriptionResult struct {
	ServiceArray
	// XMSCorrelationRequestID contains the information returned from the x-ms-correlation-request-id header response.
	XMSCorrelationRequestID *string

	// XMSRequestID contains the information returned from the x-ms-request-id header response.
	XMSRequestID *string
}

// ServicesClientUpdatePollerResponse contains the response from method ServicesClient.Update.
type ServicesClientUpdatePollerResponse struct {
	// Poller contains an initialized poller.
	Poller *ServicesClientUpdatePoller

	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// PollUntilDone will poll the service endpoint until a terminal state is reached or an error is received.
// freq: the time to wait between intervals in absence of a Retry-After header. Allowed minimum is one second.
// A good starting value is 30 seconds. Note that some resources might benefit from a different value.
func (l ServicesClientUpdatePollerResponse) PollUntilDone(ctx context.Context, freq time.Duration) (ServicesClientUpdateResponse, error) {
	respType := ServicesClientUpdateResponse{}
	resp, err := l.Poller.pt.PollUntilDone(ctx, freq, &respType.Service)
	if err != nil {
		return respType, err
	}
	respType.RawResponse = resp
	return respType, nil
}

// Resume rehydrates a ServicesClientUpdatePollerResponse from the provided client and resume token.
func (l *ServicesClientUpdatePollerResponse) Resume(ctx context.Context, client *ServicesClient, token string) error {
	pt, err := armruntime.NewPollerFromResumeToken("ServicesClient.Update", token, client.pl)
	if err != nil {
		return err
	}
	poller := &ServicesClientUpdatePoller{
		pt: pt,
	}
	resp, err := poller.Poll(ctx)
	if err != nil {
		return err
	}
	l.Poller = poller
	l.RawResponse = resp
	return nil
}

// ServicesClientUpdateResponse contains the response from method ServicesClient.Update.
type ServicesClientUpdateResponse struct {
	ServicesClientUpdateResult
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// ServicesClientUpdateResult contains the result from method ServicesClient.Update.
type ServicesClientUpdateResult struct {
	Service
}

// SyncGroupsClientCreateResponse contains the response from method SyncGroupsClient.Create.
type SyncGroupsClientCreateResponse struct {
	SyncGroupsClientCreateResult
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// SyncGroupsClientCreateResult contains the result from method SyncGroupsClient.Create.
type SyncGroupsClientCreateResult struct {
	SyncGroup
	// XMSCorrelationRequestID contains the information returned from the x-ms-correlation-request-id header response.
	XMSCorrelationRequestID *string

	// XMSRequestID contains the information returned from the x-ms-request-id header response.
	XMSRequestID *string
}

// SyncGroupsClientDeleteResponse contains the response from method SyncGroupsClient.Delete.
type SyncGroupsClientDeleteResponse struct {
	SyncGroupsClientDeleteResult
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// SyncGroupsClientDeleteResult contains the result from method SyncGroupsClient.Delete.
type SyncGroupsClientDeleteResult struct {
	// XMSCorrelationRequestID contains the information returned from the x-ms-correlation-request-id header response.
	XMSCorrelationRequestID *string

	// XMSRequestID contains the information returned from the x-ms-request-id header response.
	XMSRequestID *string
}

// SyncGroupsClientGetResponse contains the response from method SyncGroupsClient.Get.
type SyncGroupsClientGetResponse struct {
	SyncGroupsClientGetResult
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// SyncGroupsClientGetResult contains the result from method SyncGroupsClient.Get.
type SyncGroupsClientGetResult struct {
	SyncGroup
	// XMSCorrelationRequestID contains the information returned from the x-ms-correlation-request-id header response.
	XMSCorrelationRequestID *string

	// XMSRequestID contains the information returned from the x-ms-request-id header response.
	XMSRequestID *string
}

// SyncGroupsClientListByStorageSyncServiceResponse contains the response from method SyncGroupsClient.ListByStorageSyncService.
type SyncGroupsClientListByStorageSyncServiceResponse struct {
	SyncGroupsClientListByStorageSyncServiceResult
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// SyncGroupsClientListByStorageSyncServiceResult contains the result from method SyncGroupsClient.ListByStorageSyncService.
type SyncGroupsClientListByStorageSyncServiceResult struct {
	SyncGroupArray
	// XMSCorrelationRequestID contains the information returned from the x-ms-correlation-request-id header response.
	XMSCorrelationRequestID *string

	// XMSRequestID contains the information returned from the x-ms-request-id header response.
	XMSRequestID *string
}

// WorkflowsClientAbortResponse contains the response from method WorkflowsClient.Abort.
type WorkflowsClientAbortResponse struct {
	WorkflowsClientAbortResult
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// WorkflowsClientAbortResult contains the result from method WorkflowsClient.Abort.
type WorkflowsClientAbortResult struct {
	// XMSCorrelationRequestID contains the information returned from the x-ms-correlation-request-id header response.
	XMSCorrelationRequestID *string

	// XMSRequestID contains the information returned from the x-ms-request-id header response.
	XMSRequestID *string
}

// WorkflowsClientGetResponse contains the response from method WorkflowsClient.Get.
type WorkflowsClientGetResponse struct {
	WorkflowsClientGetResult
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// WorkflowsClientGetResult contains the result from method WorkflowsClient.Get.
type WorkflowsClientGetResult struct {
	Workflow
	// XMSCorrelationRequestID contains the information returned from the x-ms-correlation-request-id header response.
	XMSCorrelationRequestID *string

	// XMSRequestID contains the information returned from the x-ms-request-id header response.
	XMSRequestID *string
}

// WorkflowsClientListByStorageSyncServiceResponse contains the response from method WorkflowsClient.ListByStorageSyncService.
type WorkflowsClientListByStorageSyncServiceResponse struct {
	WorkflowsClientListByStorageSyncServiceResult
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// WorkflowsClientListByStorageSyncServiceResult contains the result from method WorkflowsClient.ListByStorageSyncService.
type WorkflowsClientListByStorageSyncServiceResult struct {
	WorkflowArray
	// XMSCorrelationRequestID contains the information returned from the x-ms-correlation-request-id header response.
	XMSCorrelationRequestID *string

	// XMSRequestID contains the information returned from the x-ms-request-id header response.
	XMSRequestID *string
}
