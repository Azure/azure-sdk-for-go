//go:build go1.18
// +build go1.18

// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

package armstorsimple1200series

import (
	"context"
	"errors"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/arm"
	armruntime "github.com/Azure/azure-sdk-for-go/sdk/azcore/arm/runtime"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/cloud"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/policy"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/runtime"
	"net/http"
	"net/url"
	"strings"
)

// StorageDomainsClient contains the methods for the StorageDomains group.
// Don't use this type directly, use NewStorageDomainsClient() instead.
type StorageDomainsClient struct {
	host           string
	subscriptionID string
	pl             runtime.Pipeline
}

// NewStorageDomainsClient creates a new instance of StorageDomainsClient with the specified values.
// subscriptionID - The subscription id
// credential - used to authorize requests. Usually a credential from azidentity.
// options - pass nil to accept the default values.
func NewStorageDomainsClient(subscriptionID string, credential azcore.TokenCredential, options *arm.ClientOptions) (*StorageDomainsClient, error) {
	if options == nil {
		options = &arm.ClientOptions{}
	}
	ep := cloud.AzurePublic.Services[cloud.ResourceManager].Endpoint
	if c, ok := options.Cloud.Services[cloud.ResourceManager]; ok {
		ep = c.Endpoint
	}
	pl, err := armruntime.NewPipeline(moduleName, moduleVersion, credential, runtime.PipelineOptions{}, options)
	if err != nil {
		return nil, err
	}
	client := &StorageDomainsClient{
		subscriptionID: subscriptionID,
		host:           ep,
		pl:             pl,
	}
	return client, nil
}

// BeginCreateOrUpdate - Creates or updates the storage domain.
// If the operation fails it returns an *azcore.ResponseError type.
// Generated from API version 2016-10-01
// storageDomainName - The storage domain name.
// resourceGroupName - The resource group name
// managerName - The manager name
// storageDomain - The storageDomain.
// options - StorageDomainsClientBeginCreateOrUpdateOptions contains the optional parameters for the StorageDomainsClient.BeginCreateOrUpdate
// method.
func (client *StorageDomainsClient) BeginCreateOrUpdate(ctx context.Context, storageDomainName string, resourceGroupName string, managerName string, storageDomain StorageDomain, options *StorageDomainsClientBeginCreateOrUpdateOptions) (*runtime.Poller[StorageDomainsClientCreateOrUpdateResponse], error) {
	if options == nil || options.ResumeToken == "" {
		resp, err := client.createOrUpdate(ctx, storageDomainName, resourceGroupName, managerName, storageDomain, options)
		if err != nil {
			return nil, err
		}
		return runtime.NewPoller[StorageDomainsClientCreateOrUpdateResponse](resp, client.pl, nil)
	} else {
		return runtime.NewPollerFromResumeToken[StorageDomainsClientCreateOrUpdateResponse](options.ResumeToken, client.pl, nil)
	}
}

// CreateOrUpdate - Creates or updates the storage domain.
// If the operation fails it returns an *azcore.ResponseError type.
// Generated from API version 2016-10-01
func (client *StorageDomainsClient) createOrUpdate(ctx context.Context, storageDomainName string, resourceGroupName string, managerName string, storageDomain StorageDomain, options *StorageDomainsClientBeginCreateOrUpdateOptions) (*http.Response, error) {
	req, err := client.createOrUpdateCreateRequest(ctx, storageDomainName, resourceGroupName, managerName, storageDomain, options)
	if err != nil {
		return nil, err
	}
	resp, err := client.pl.Do(req)
	if err != nil {
		return nil, err
	}
	if !runtime.HasStatusCode(resp, http.StatusOK, http.StatusAccepted) {
		return nil, runtime.NewResponseError(resp)
	}
	return resp, nil
}

// createOrUpdateCreateRequest creates the CreateOrUpdate request.
func (client *StorageDomainsClient) createOrUpdateCreateRequest(ctx context.Context, storageDomainName string, resourceGroupName string, managerName string, storageDomain StorageDomain, options *StorageDomainsClientBeginCreateOrUpdateOptions) (*policy.Request, error) {
	urlPath := "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.StorSimple/managers/{managerName}/storageDomains/{storageDomainName}"
	if storageDomainName == "" {
		return nil, errors.New("parameter storageDomainName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{storageDomainName}", url.PathEscape(storageDomainName))
	if client.subscriptionID == "" {
		return nil, errors.New("parameter client.subscriptionID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{subscriptionId}", url.PathEscape(client.subscriptionID))
	if resourceGroupName == "" {
		return nil, errors.New("parameter resourceGroupName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{resourceGroupName}", url.PathEscape(resourceGroupName))
	if managerName == "" {
		return nil, errors.New("parameter managerName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{managerName}", url.PathEscape(managerName))
	req, err := runtime.NewRequest(ctx, http.MethodPut, runtime.JoinPaths(client.host, urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("api-version", "2016-10-01")
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header["Accept"] = []string{"application/json"}
	return req, runtime.MarshalAsJSON(req, storageDomain)
}

// BeginDelete - Deletes the storage domain.
// If the operation fails it returns an *azcore.ResponseError type.
// Generated from API version 2016-10-01
// storageDomainName - The storage domain name.
// resourceGroupName - The resource group name
// managerName - The manager name
// options - StorageDomainsClientBeginDeleteOptions contains the optional parameters for the StorageDomainsClient.BeginDelete
// method.
func (client *StorageDomainsClient) BeginDelete(ctx context.Context, storageDomainName string, resourceGroupName string, managerName string, options *StorageDomainsClientBeginDeleteOptions) (*runtime.Poller[StorageDomainsClientDeleteResponse], error) {
	if options == nil || options.ResumeToken == "" {
		resp, err := client.deleteOperation(ctx, storageDomainName, resourceGroupName, managerName, options)
		if err != nil {
			return nil, err
		}
		return runtime.NewPoller[StorageDomainsClientDeleteResponse](resp, client.pl, nil)
	} else {
		return runtime.NewPollerFromResumeToken[StorageDomainsClientDeleteResponse](options.ResumeToken, client.pl, nil)
	}
}

// Delete - Deletes the storage domain.
// If the operation fails it returns an *azcore.ResponseError type.
// Generated from API version 2016-10-01
func (client *StorageDomainsClient) deleteOperation(ctx context.Context, storageDomainName string, resourceGroupName string, managerName string, options *StorageDomainsClientBeginDeleteOptions) (*http.Response, error) {
	req, err := client.deleteCreateRequest(ctx, storageDomainName, resourceGroupName, managerName, options)
	if err != nil {
		return nil, err
	}
	resp, err := client.pl.Do(req)
	if err != nil {
		return nil, err
	}
	if !runtime.HasStatusCode(resp, http.StatusAccepted, http.StatusNoContent) {
		return nil, runtime.NewResponseError(resp)
	}
	return resp, nil
}

// deleteCreateRequest creates the Delete request.
func (client *StorageDomainsClient) deleteCreateRequest(ctx context.Context, storageDomainName string, resourceGroupName string, managerName string, options *StorageDomainsClientBeginDeleteOptions) (*policy.Request, error) {
	urlPath := "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.StorSimple/managers/{managerName}/storageDomains/{storageDomainName}"
	if storageDomainName == "" {
		return nil, errors.New("parameter storageDomainName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{storageDomainName}", url.PathEscape(storageDomainName))
	if client.subscriptionID == "" {
		return nil, errors.New("parameter client.subscriptionID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{subscriptionId}", url.PathEscape(client.subscriptionID))
	if resourceGroupName == "" {
		return nil, errors.New("parameter resourceGroupName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{resourceGroupName}", url.PathEscape(resourceGroupName))
	if managerName == "" {
		return nil, errors.New("parameter managerName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{managerName}", url.PathEscape(managerName))
	req, err := runtime.NewRequest(ctx, http.MethodDelete, runtime.JoinPaths(client.host, urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("api-version", "2016-10-01")
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header["Accept"] = []string{"application/json"}
	return req, nil
}

// Get - Returns the properties of the specified storage domain name.
// If the operation fails it returns an *azcore.ResponseError type.
// Generated from API version 2016-10-01
// storageDomainName - The storage domain name.
// resourceGroupName - The resource group name
// managerName - The manager name
// options - StorageDomainsClientGetOptions contains the optional parameters for the StorageDomainsClient.Get method.
func (client *StorageDomainsClient) Get(ctx context.Context, storageDomainName string, resourceGroupName string, managerName string, options *StorageDomainsClientGetOptions) (StorageDomainsClientGetResponse, error) {
	req, err := client.getCreateRequest(ctx, storageDomainName, resourceGroupName, managerName, options)
	if err != nil {
		return StorageDomainsClientGetResponse{}, err
	}
	resp, err := client.pl.Do(req)
	if err != nil {
		return StorageDomainsClientGetResponse{}, err
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {
		return StorageDomainsClientGetResponse{}, runtime.NewResponseError(resp)
	}
	return client.getHandleResponse(resp)
}

// getCreateRequest creates the Get request.
func (client *StorageDomainsClient) getCreateRequest(ctx context.Context, storageDomainName string, resourceGroupName string, managerName string, options *StorageDomainsClientGetOptions) (*policy.Request, error) {
	urlPath := "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.StorSimple/managers/{managerName}/storageDomains/{storageDomainName}"
	if storageDomainName == "" {
		return nil, errors.New("parameter storageDomainName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{storageDomainName}", url.PathEscape(storageDomainName))
	if client.subscriptionID == "" {
		return nil, errors.New("parameter client.subscriptionID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{subscriptionId}", url.PathEscape(client.subscriptionID))
	if resourceGroupName == "" {
		return nil, errors.New("parameter resourceGroupName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{resourceGroupName}", url.PathEscape(resourceGroupName))
	if managerName == "" {
		return nil, errors.New("parameter managerName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{managerName}", url.PathEscape(managerName))
	req, err := runtime.NewRequest(ctx, http.MethodGet, runtime.JoinPaths(client.host, urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("api-version", "2016-10-01")
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header["Accept"] = []string{"application/json"}
	return req, nil
}

// getHandleResponse handles the Get response.
func (client *StorageDomainsClient) getHandleResponse(resp *http.Response) (StorageDomainsClientGetResponse, error) {
	result := StorageDomainsClientGetResponse{}
	if err := runtime.UnmarshalAsJSON(resp, &result.StorageDomain); err != nil {
		return StorageDomainsClientGetResponse{}, err
	}
	return result, nil
}

// NewListByManagerPager - Retrieves all the storage domains in a manager.
// If the operation fails it returns an *azcore.ResponseError type.
// Generated from API version 2016-10-01
// resourceGroupName - The resource group name
// managerName - The manager name
// options - StorageDomainsClientListByManagerOptions contains the optional parameters for the StorageDomainsClient.ListByManager
// method.
func (client *StorageDomainsClient) NewListByManagerPager(resourceGroupName string, managerName string, options *StorageDomainsClientListByManagerOptions) *runtime.Pager[StorageDomainsClientListByManagerResponse] {
	return runtime.NewPager(runtime.PagingHandler[StorageDomainsClientListByManagerResponse]{
		More: func(page StorageDomainsClientListByManagerResponse) bool {
			return false
		},
		Fetcher: func(ctx context.Context, page *StorageDomainsClientListByManagerResponse) (StorageDomainsClientListByManagerResponse, error) {
			req, err := client.listByManagerCreateRequest(ctx, resourceGroupName, managerName, options)
			if err != nil {
				return StorageDomainsClientListByManagerResponse{}, err
			}
			resp, err := client.pl.Do(req)
			if err != nil {
				return StorageDomainsClientListByManagerResponse{}, err
			}
			if !runtime.HasStatusCode(resp, http.StatusOK) {
				return StorageDomainsClientListByManagerResponse{}, runtime.NewResponseError(resp)
			}
			return client.listByManagerHandleResponse(resp)
		},
	})
}

// listByManagerCreateRequest creates the ListByManager request.
func (client *StorageDomainsClient) listByManagerCreateRequest(ctx context.Context, resourceGroupName string, managerName string, options *StorageDomainsClientListByManagerOptions) (*policy.Request, error) {
	urlPath := "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.StorSimple/managers/{managerName}/storageDomains"
	if client.subscriptionID == "" {
		return nil, errors.New("parameter client.subscriptionID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{subscriptionId}", url.PathEscape(client.subscriptionID))
	if resourceGroupName == "" {
		return nil, errors.New("parameter resourceGroupName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{resourceGroupName}", url.PathEscape(resourceGroupName))
	if managerName == "" {
		return nil, errors.New("parameter managerName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{managerName}", url.PathEscape(managerName))
	req, err := runtime.NewRequest(ctx, http.MethodGet, runtime.JoinPaths(client.host, urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("api-version", "2016-10-01")
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header["Accept"] = []string{"application/json"}
	return req, nil
}

// listByManagerHandleResponse handles the ListByManager response.
func (client *StorageDomainsClient) listByManagerHandleResponse(resp *http.Response) (StorageDomainsClientListByManagerResponse, error) {
	result := StorageDomainsClientListByManagerResponse{}
	if err := runtime.UnmarshalAsJSON(resp, &result.StorageDomainList); err != nil {
		return StorageDomainsClientListByManagerResponse{}, err
	}
	return result, nil
}
