//go:build go1.16
// +build go1.16

// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

package armstreamanalytics

import "encoding/json"

func unmarshalFunctionBindingClassification(rawMsg json.RawMessage) (FunctionBindingClassification, error) {
	if rawMsg == nil {
		return nil, nil
	}
	var m map[string]interface{}
	if err := json.Unmarshal(rawMsg, &m); err != nil {
		return nil, err
	}
	var b FunctionBindingClassification
	switch m["type"] {
	case "Microsoft.MachineLearning/WebService":
		b = &AzureMachineLearningStudioFunctionBinding{}
	case "Microsoft.MachineLearningServices":
		b = &AzureMachineLearningServiceFunctionBinding{}
	case "Microsoft.StreamAnalytics/CLRUdf":
		b = &CSharpFunctionBinding{}
	case "Microsoft.StreamAnalytics/JavascriptUdf":
		b = &JavaScriptFunctionBinding{}
	default:
		b = &FunctionBinding{}
	}
	return b, json.Unmarshal(rawMsg, b)
}

func unmarshalFunctionBindingClassificationArray(rawMsg json.RawMessage) ([]FunctionBindingClassification, error) {
	if rawMsg == nil {
		return nil, nil
	}
	var rawMessages []json.RawMessage
	if err := json.Unmarshal(rawMsg, &rawMessages); err != nil {
		return nil, err
	}
	fArray := make([]FunctionBindingClassification, len(rawMessages))
	for index, rawMessage := range rawMessages {
		f, err := unmarshalFunctionBindingClassification(rawMessage)
		if err != nil {
			return nil, err
		}
		fArray[index] = f
	}
	return fArray, nil
}

func unmarshalFunctionPropertiesClassification(rawMsg json.RawMessage) (FunctionPropertiesClassification, error) {
	if rawMsg == nil {
		return nil, nil
	}
	var m map[string]interface{}
	if err := json.Unmarshal(rawMsg, &m); err != nil {
		return nil, err
	}
	var b FunctionPropertiesClassification
	switch m["type"] {
	case "Aggregate":
		b = &AggregateFunctionProperties{}
	case "Scalar":
		b = &ScalarFunctionProperties{}
	default:
		b = &FunctionProperties{}
	}
	return b, json.Unmarshal(rawMsg, b)
}

func unmarshalFunctionPropertiesClassificationArray(rawMsg json.RawMessage) ([]FunctionPropertiesClassification, error) {
	if rawMsg == nil {
		return nil, nil
	}
	var rawMessages []json.RawMessage
	if err := json.Unmarshal(rawMsg, &rawMessages); err != nil {
		return nil, err
	}
	fArray := make([]FunctionPropertiesClassification, len(rawMessages))
	for index, rawMessage := range rawMessages {
		f, err := unmarshalFunctionPropertiesClassification(rawMessage)
		if err != nil {
			return nil, err
		}
		fArray[index] = f
	}
	return fArray, nil
}

func unmarshalFunctionRetrieveDefaultDefinitionParametersClassification(rawMsg json.RawMessage) (FunctionRetrieveDefaultDefinitionParametersClassification, error) {
	if rawMsg == nil {
		return nil, nil
	}
	var m map[string]interface{}
	if err := json.Unmarshal(rawMsg, &m); err != nil {
		return nil, err
	}
	var b FunctionRetrieveDefaultDefinitionParametersClassification
	switch m["bindingType"] {
	case "Microsoft.MachineLearning/WebService":
		b = &AzureMachineLearningStudioFunctionRetrieveDefaultDefinitionParameters{}
	case "Microsoft.MachineLearningServices":
		b = &AzureMachineLearningServiceFunctionRetrieveDefaultDefinitionParameters{}
	case "Microsoft.StreamAnalytics/CLRUdf":
		b = &CSharpFunctionRetrieveDefaultDefinitionParameters{}
	case "Microsoft.StreamAnalytics/JavascriptUdf":
		b = &JavaScriptFunctionRetrieveDefaultDefinitionParameters{}
	default:
		b = &FunctionRetrieveDefaultDefinitionParameters{}
	}
	return b, json.Unmarshal(rawMsg, b)
}

func unmarshalFunctionRetrieveDefaultDefinitionParametersClassificationArray(rawMsg json.RawMessage) ([]FunctionRetrieveDefaultDefinitionParametersClassification, error) {
	if rawMsg == nil {
		return nil, nil
	}
	var rawMessages []json.RawMessage
	if err := json.Unmarshal(rawMsg, &rawMessages); err != nil {
		return nil, err
	}
	fArray := make([]FunctionRetrieveDefaultDefinitionParametersClassification, len(rawMessages))
	for index, rawMessage := range rawMessages {
		f, err := unmarshalFunctionRetrieveDefaultDefinitionParametersClassification(rawMessage)
		if err != nil {
			return nil, err
		}
		fArray[index] = f
	}
	return fArray, nil
}

func unmarshalInputPropertiesClassification(rawMsg json.RawMessage) (InputPropertiesClassification, error) {
	if rawMsg == nil {
		return nil, nil
	}
	var m map[string]interface{}
	if err := json.Unmarshal(rawMsg, &m); err != nil {
		return nil, err
	}
	var b InputPropertiesClassification
	switch m["type"] {
	case "Reference":
		b = &ReferenceInputProperties{}
	case "Stream":
		b = &StreamInputProperties{}
	default:
		b = &InputProperties{}
	}
	return b, json.Unmarshal(rawMsg, b)
}

func unmarshalInputPropertiesClassificationArray(rawMsg json.RawMessage) ([]InputPropertiesClassification, error) {
	if rawMsg == nil {
		return nil, nil
	}
	var rawMessages []json.RawMessage
	if err := json.Unmarshal(rawMsg, &rawMessages); err != nil {
		return nil, err
	}
	fArray := make([]InputPropertiesClassification, len(rawMessages))
	for index, rawMessage := range rawMessages {
		f, err := unmarshalInputPropertiesClassification(rawMessage)
		if err != nil {
			return nil, err
		}
		fArray[index] = f
	}
	return fArray, nil
}

func unmarshalOutputDataSourceClassification(rawMsg json.RawMessage) (OutputDataSourceClassification, error) {
	if rawMsg == nil {
		return nil, nil
	}
	var m map[string]interface{}
	if err := json.Unmarshal(rawMsg, &m); err != nil {
		return nil, err
	}
	var b OutputDataSourceClassification
	switch m["type"] {
	case "Microsoft.AzureFunction":
		b = &AzureFunctionOutputDataSource{}
	case "Microsoft.DataLake/Accounts":
		b = &AzureDataLakeStoreOutputDataSource{}
	case "Microsoft.EventHub/EventHub":
		b = &EventHubV2OutputDataSource{}
	case "Microsoft.ServiceBus/EventHub":
		b = &EventHubOutputDataSource{}
	case "Microsoft.ServiceBus/Queue":
		b = &ServiceBusQueueOutputDataSource{}
	case "Microsoft.ServiceBus/Topic":
		b = &ServiceBusTopicOutputDataSource{}
	case "Microsoft.Sql/Server/DataWarehouse":
		b = &AzureSynapseOutputDataSource{}
	case "Microsoft.Sql/Server/Database":
		b = &AzureSQLDatabaseOutputDataSource{}
	case "Microsoft.Storage/Blob":
		b = &BlobOutputDataSource{}
	case "Microsoft.Storage/DocumentDB":
		b = &DocumentDbOutputDataSource{}
	case "Microsoft.Storage/Table":
		b = &AzureTableOutputDataSource{}
	case "PowerBI":
		b = &PowerBIOutputDataSource{}
	case "Raw":
		b = &RawOutputDatasource{}
	default:
		b = &OutputDataSource{}
	}
	return b, json.Unmarshal(rawMsg, b)
}

func unmarshalOutputDataSourceClassificationArray(rawMsg json.RawMessage) ([]OutputDataSourceClassification, error) {
	if rawMsg == nil {
		return nil, nil
	}
	var rawMessages []json.RawMessage
	if err := json.Unmarshal(rawMsg, &rawMessages); err != nil {
		return nil, err
	}
	fArray := make([]OutputDataSourceClassification, len(rawMessages))
	for index, rawMessage := range rawMessages {
		f, err := unmarshalOutputDataSourceClassification(rawMessage)
		if err != nil {
			return nil, err
		}
		fArray[index] = f
	}
	return fArray, nil
}

func unmarshalReferenceInputDataSourceClassification(rawMsg json.RawMessage) (ReferenceInputDataSourceClassification, error) {
	if rawMsg == nil {
		return nil, nil
	}
	var m map[string]interface{}
	if err := json.Unmarshal(rawMsg, &m); err != nil {
		return nil, err
	}
	var b ReferenceInputDataSourceClassification
	switch m["type"] {
	case "Microsoft.Sql/Server/Database":
		b = &AzureSQLReferenceInputDataSource{}
	case "Microsoft.Storage/Blob":
		b = &BlobReferenceInputDataSource{}
	case "Raw":
		b = &RawReferenceInputDataSource{}
	default:
		b = &ReferenceInputDataSource{}
	}
	return b, json.Unmarshal(rawMsg, b)
}

func unmarshalReferenceInputDataSourceClassificationArray(rawMsg json.RawMessage) ([]ReferenceInputDataSourceClassification, error) {
	if rawMsg == nil {
		return nil, nil
	}
	var rawMessages []json.RawMessage
	if err := json.Unmarshal(rawMsg, &rawMessages); err != nil {
		return nil, err
	}
	fArray := make([]ReferenceInputDataSourceClassification, len(rawMessages))
	for index, rawMessage := range rawMessages {
		f, err := unmarshalReferenceInputDataSourceClassification(rawMessage)
		if err != nil {
			return nil, err
		}
		fArray[index] = f
	}
	return fArray, nil
}

func unmarshalSerializationClassification(rawMsg json.RawMessage) (SerializationClassification, error) {
	if rawMsg == nil {
		return nil, nil
	}
	var m map[string]interface{}
	if err := json.Unmarshal(rawMsg, &m); err != nil {
		return nil, err
	}
	var b SerializationClassification
	switch m["type"] {
	case string(EventSerializationTypeAvro):
		b = &AvroSerialization{}
	case string(EventSerializationTypeCSV):
		b = &CSVSerialization{}
	case string(EventSerializationTypeCustomClr):
		b = &CustomClrSerialization{}
	case string(EventSerializationTypeJSON):
		b = &JSONSerialization{}
	case string(EventSerializationTypeParquet):
		b = &ParquetSerialization{}
	default:
		b = &Serialization{}
	}
	return b, json.Unmarshal(rawMsg, b)
}

func unmarshalSerializationClassificationArray(rawMsg json.RawMessage) ([]SerializationClassification, error) {
	if rawMsg == nil {
		return nil, nil
	}
	var rawMessages []json.RawMessage
	if err := json.Unmarshal(rawMsg, &rawMessages); err != nil {
		return nil, err
	}
	fArray := make([]SerializationClassification, len(rawMessages))
	for index, rawMessage := range rawMessages {
		f, err := unmarshalSerializationClassification(rawMessage)
		if err != nil {
			return nil, err
		}
		fArray[index] = f
	}
	return fArray, nil
}

func unmarshalStreamInputDataSourceClassification(rawMsg json.RawMessage) (StreamInputDataSourceClassification, error) {
	if rawMsg == nil {
		return nil, nil
	}
	var m map[string]interface{}
	if err := json.Unmarshal(rawMsg, &m); err != nil {
		return nil, err
	}
	var b StreamInputDataSourceClassification
	switch m["type"] {
	case "Microsoft.Devices/IotHubs":
		b = &IoTHubStreamInputDataSource{}
	case "Microsoft.EventHub/EventHub":
		b = &EventHubV2StreamInputDataSource{}
	case "Microsoft.ServiceBus/EventHub":
		b = &EventHubStreamInputDataSource{}
	case "Microsoft.Storage/Blob":
		b = &BlobStreamInputDataSource{}
	case "Raw":
		b = &RawStreamInputDataSource{}
	default:
		b = &StreamInputDataSource{}
	}
	return b, json.Unmarshal(rawMsg, b)
}

func unmarshalStreamInputDataSourceClassificationArray(rawMsg json.RawMessage) ([]StreamInputDataSourceClassification, error) {
	if rawMsg == nil {
		return nil, nil
	}
	var rawMessages []json.RawMessage
	if err := json.Unmarshal(rawMsg, &rawMessages); err != nil {
		return nil, err
	}
	fArray := make([]StreamInputDataSourceClassification, len(rawMessages))
	for index, rawMessage := range rawMessages {
		f, err := unmarshalStreamInputDataSourceClassification(rawMessage)
		if err != nil {
			return nil, err
		}
		fArray[index] = f
	}
	return fArray, nil
}
