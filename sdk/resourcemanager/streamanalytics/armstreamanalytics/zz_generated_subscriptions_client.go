//go:build go1.16
// +build go1.16

// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

package armstreamanalytics

import (
	"context"
	"errors"
	"fmt"
	"net/http"
	"net/url"
	"strings"

	"github.com/Azure/azure-sdk-for-go/sdk/azcore/arm"
	armruntime "github.com/Azure/azure-sdk-for-go/sdk/azcore/arm/runtime"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/policy"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/runtime"
)

// SubscriptionsClient contains the methods for the Subscriptions group.
// Don't use this type directly, use NewSubscriptionsClient() instead.
type SubscriptionsClient struct {
	ep             string
	pl             runtime.Pipeline
	subscriptionID string
}

// NewSubscriptionsClient creates a new instance of SubscriptionsClient with the specified values.
func NewSubscriptionsClient(con *arm.Connection, subscriptionID string) *SubscriptionsClient {
	return &SubscriptionsClient{ep: con.Endpoint(), pl: con.NewPipeline(module, version), subscriptionID: subscriptionID}
}

// CompileQuery - Compile the Stream Analytics query.
// If the operation fails it returns the *Error error type.
func (client *SubscriptionsClient) CompileQuery(ctx context.Context, location string, compileQuery CompileQuery, options *SubscriptionsCompileQueryOptions) (SubscriptionsCompileQueryResponse, error) {
	req, err := client.compileQueryCreateRequest(ctx, location, compileQuery, options)
	if err != nil {
		return SubscriptionsCompileQueryResponse{}, err
	}
	resp, err := client.pl.Do(req)
	if err != nil {
		return SubscriptionsCompileQueryResponse{}, err
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {
		return SubscriptionsCompileQueryResponse{}, client.compileQueryHandleError(resp)
	}
	return client.compileQueryHandleResponse(resp)
}

// compileQueryCreateRequest creates the CompileQuery request.
func (client *SubscriptionsClient) compileQueryCreateRequest(ctx context.Context, location string, compileQuery CompileQuery, options *SubscriptionsCompileQueryOptions) (*policy.Request, error) {
	urlPath := "/subscriptions/{subscriptionId}/providers/Microsoft.StreamAnalytics/locations/{location}/compileQuery"
	if location == "" {
		return nil, errors.New("parameter location cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{location}", url.PathEscape(location))
	if client.subscriptionID == "" {
		return nil, errors.New("parameter client.subscriptionID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{subscriptionId}", url.PathEscape(client.subscriptionID))
	req, err := runtime.NewRequest(ctx, http.MethodPost, runtime.JoinPaths(client.ep, urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("api-version", "2017-04-01-preview")
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header.Set("Accept", "application/json")
	return req, runtime.MarshalAsJSON(req, compileQuery)
}

// compileQueryHandleResponse handles the CompileQuery response.
func (client *SubscriptionsClient) compileQueryHandleResponse(resp *http.Response) (SubscriptionsCompileQueryResponse, error) {
	result := SubscriptionsCompileQueryResponse{RawResponse: resp}
	if err := runtime.UnmarshalAsJSON(resp, &result.QueryCompilationResult); err != nil {
		return SubscriptionsCompileQueryResponse{}, err
	}
	return result, nil
}

// compileQueryHandleError handles the CompileQuery error response.
func (client *SubscriptionsClient) compileQueryHandleError(resp *http.Response) error {
	body, err := runtime.Payload(resp)
	if err != nil {
		return runtime.NewResponseError(err, resp)
	}
	errType := Error{raw: string(body)}
	if err := runtime.UnmarshalAsJSON(resp, &errType); err != nil {
		return runtime.NewResponseError(fmt.Errorf("%s\n%s", string(body), err), resp)
	}
	return runtime.NewResponseError(&errType, resp)
}

// ListQuotas - Retrieves the subscription's current quota information in a particular region.
// If the operation fails it returns the *Error error type.
func (client *SubscriptionsClient) ListQuotas(ctx context.Context, location string, options *SubscriptionsListQuotasOptions) (SubscriptionsListQuotasResponse, error) {
	req, err := client.listQuotasCreateRequest(ctx, location, options)
	if err != nil {
		return SubscriptionsListQuotasResponse{}, err
	}
	resp, err := client.pl.Do(req)
	if err != nil {
		return SubscriptionsListQuotasResponse{}, err
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {
		return SubscriptionsListQuotasResponse{}, client.listQuotasHandleError(resp)
	}
	return client.listQuotasHandleResponse(resp)
}

// listQuotasCreateRequest creates the ListQuotas request.
func (client *SubscriptionsClient) listQuotasCreateRequest(ctx context.Context, location string, options *SubscriptionsListQuotasOptions) (*policy.Request, error) {
	urlPath := "/subscriptions/{subscriptionId}/providers/Microsoft.StreamAnalytics/locations/{location}/quotas"
	if location == "" {
		return nil, errors.New("parameter location cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{location}", url.PathEscape(location))
	if client.subscriptionID == "" {
		return nil, errors.New("parameter client.subscriptionID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{subscriptionId}", url.PathEscape(client.subscriptionID))
	req, err := runtime.NewRequest(ctx, http.MethodGet, runtime.JoinPaths(client.ep, urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("api-version", "2017-04-01-preview")
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header.Set("Accept", "application/json")
	return req, nil
}

// listQuotasHandleResponse handles the ListQuotas response.
func (client *SubscriptionsClient) listQuotasHandleResponse(resp *http.Response) (SubscriptionsListQuotasResponse, error) {
	result := SubscriptionsListQuotasResponse{RawResponse: resp}
	if err := runtime.UnmarshalAsJSON(resp, &result.SubscriptionQuotasListResult); err != nil {
		return SubscriptionsListQuotasResponse{}, err
	}
	return result, nil
}

// listQuotasHandleError handles the ListQuotas error response.
func (client *SubscriptionsClient) listQuotasHandleError(resp *http.Response) error {
	body, err := runtime.Payload(resp)
	if err != nil {
		return runtime.NewResponseError(err, resp)
	}
	errType := Error{raw: string(body)}
	if err := runtime.UnmarshalAsJSON(resp, &errType); err != nil {
		return runtime.NewResponseError(fmt.Errorf("%s\n%s", string(body), err), resp)
	}
	return runtime.NewResponseError(&errType, resp)
}

// BeginSampleInput - Sample the Stream Analytics input data.
// If the operation fails it returns the *Error error type.
func (client *SubscriptionsClient) BeginSampleInput(ctx context.Context, location string, sampleInput SampleInput, options *SubscriptionsBeginSampleInputOptions) (SubscriptionsSampleInputPollerResponse, error) {
	resp, err := client.sampleInput(ctx, location, sampleInput, options)
	if err != nil {
		return SubscriptionsSampleInputPollerResponse{}, err
	}
	result := SubscriptionsSampleInputPollerResponse{
		RawResponse: resp,
	}
	pt, err := armruntime.NewPoller("SubscriptionsClient.SampleInput", "location", resp, client.pl, client.sampleInputHandleError)
	if err != nil {
		return SubscriptionsSampleInputPollerResponse{}, err
	}
	result.Poller = &SubscriptionsSampleInputPoller{
		pt: pt,
	}
	return result, nil
}

// SampleInput - Sample the Stream Analytics input data.
// If the operation fails it returns the *Error error type.
func (client *SubscriptionsClient) sampleInput(ctx context.Context, location string, sampleInput SampleInput, options *SubscriptionsBeginSampleInputOptions) (*http.Response, error) {
	req, err := client.sampleInputCreateRequest(ctx, location, sampleInput, options)
	if err != nil {
		return nil, err
	}
	resp, err := client.pl.Do(req)
	if err != nil {
		return nil, err
	}
	if !runtime.HasStatusCode(resp, http.StatusAccepted) {
		return nil, client.sampleInputHandleError(resp)
	}
	return resp, nil
}

// sampleInputCreateRequest creates the SampleInput request.
func (client *SubscriptionsClient) sampleInputCreateRequest(ctx context.Context, location string, sampleInput SampleInput, options *SubscriptionsBeginSampleInputOptions) (*policy.Request, error) {
	urlPath := "/subscriptions/{subscriptionId}/providers/Microsoft.StreamAnalytics/locations/{location}/sampleInput"
	if location == "" {
		return nil, errors.New("parameter location cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{location}", url.PathEscape(location))
	if client.subscriptionID == "" {
		return nil, errors.New("parameter client.subscriptionID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{subscriptionId}", url.PathEscape(client.subscriptionID))
	req, err := runtime.NewRequest(ctx, http.MethodPost, runtime.JoinPaths(client.ep, urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("api-version", "2017-04-01-preview")
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header.Set("Accept", "application/json")
	return req, runtime.MarshalAsJSON(req, sampleInput)
}

// sampleInputHandleError handles the SampleInput error response.
func (client *SubscriptionsClient) sampleInputHandleError(resp *http.Response) error {
	body, err := runtime.Payload(resp)
	if err != nil {
		return runtime.NewResponseError(err, resp)
	}
	errType := Error{raw: string(body)}
	if err := runtime.UnmarshalAsJSON(resp, &errType); err != nil {
		return runtime.NewResponseError(fmt.Errorf("%s\n%s", string(body), err), resp)
	}
	return runtime.NewResponseError(&errType, resp)
}

// BeginTestInput - Test the Stream Analytics input.
// If the operation fails it returns the *Error error type.
func (client *SubscriptionsClient) BeginTestInput(ctx context.Context, location string, testInput TestInput, options *SubscriptionsBeginTestInputOptions) (SubscriptionsTestInputPollerResponse, error) {
	resp, err := client.testInput(ctx, location, testInput, options)
	if err != nil {
		return SubscriptionsTestInputPollerResponse{}, err
	}
	result := SubscriptionsTestInputPollerResponse{
		RawResponse: resp,
	}
	pt, err := armruntime.NewPoller("SubscriptionsClient.TestInput", "location", resp, client.pl, client.testInputHandleError)
	if err != nil {
		return SubscriptionsTestInputPollerResponse{}, err
	}
	result.Poller = &SubscriptionsTestInputPoller{
		pt: pt,
	}
	return result, nil
}

// TestInput - Test the Stream Analytics input.
// If the operation fails it returns the *Error error type.
func (client *SubscriptionsClient) testInput(ctx context.Context, location string, testInput TestInput, options *SubscriptionsBeginTestInputOptions) (*http.Response, error) {
	req, err := client.testInputCreateRequest(ctx, location, testInput, options)
	if err != nil {
		return nil, err
	}
	resp, err := client.pl.Do(req)
	if err != nil {
		return nil, err
	}
	if !runtime.HasStatusCode(resp, http.StatusAccepted) {
		return nil, client.testInputHandleError(resp)
	}
	return resp, nil
}

// testInputCreateRequest creates the TestInput request.
func (client *SubscriptionsClient) testInputCreateRequest(ctx context.Context, location string, testInput TestInput, options *SubscriptionsBeginTestInputOptions) (*policy.Request, error) {
	urlPath := "/subscriptions/{subscriptionId}/providers/Microsoft.StreamAnalytics/locations/{location}/testInput"
	if location == "" {
		return nil, errors.New("parameter location cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{location}", url.PathEscape(location))
	if client.subscriptionID == "" {
		return nil, errors.New("parameter client.subscriptionID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{subscriptionId}", url.PathEscape(client.subscriptionID))
	req, err := runtime.NewRequest(ctx, http.MethodPost, runtime.JoinPaths(client.ep, urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("api-version", "2017-04-01-preview")
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header.Set("Accept", "application/json")
	return req, runtime.MarshalAsJSON(req, testInput)
}

// testInputHandleError handles the TestInput error response.
func (client *SubscriptionsClient) testInputHandleError(resp *http.Response) error {
	body, err := runtime.Payload(resp)
	if err != nil {
		return runtime.NewResponseError(err, resp)
	}
	errType := Error{raw: string(body)}
	if err := runtime.UnmarshalAsJSON(resp, &errType); err != nil {
		return runtime.NewResponseError(fmt.Errorf("%s\n%s", string(body), err), resp)
	}
	return runtime.NewResponseError(&errType, resp)
}

// BeginTestOutput - Test the Stream Analytics output.
// If the operation fails it returns the *Error error type.
func (client *SubscriptionsClient) BeginTestOutput(ctx context.Context, location string, testOutput TestOutput, options *SubscriptionsBeginTestOutputOptions) (SubscriptionsTestOutputPollerResponse, error) {
	resp, err := client.testOutput(ctx, location, testOutput, options)
	if err != nil {
		return SubscriptionsTestOutputPollerResponse{}, err
	}
	result := SubscriptionsTestOutputPollerResponse{
		RawResponse: resp,
	}
	pt, err := armruntime.NewPoller("SubscriptionsClient.TestOutput", "location", resp, client.pl, client.testOutputHandleError)
	if err != nil {
		return SubscriptionsTestOutputPollerResponse{}, err
	}
	result.Poller = &SubscriptionsTestOutputPoller{
		pt: pt,
	}
	return result, nil
}

// TestOutput - Test the Stream Analytics output.
// If the operation fails it returns the *Error error type.
func (client *SubscriptionsClient) testOutput(ctx context.Context, location string, testOutput TestOutput, options *SubscriptionsBeginTestOutputOptions) (*http.Response, error) {
	req, err := client.testOutputCreateRequest(ctx, location, testOutput, options)
	if err != nil {
		return nil, err
	}
	resp, err := client.pl.Do(req)
	if err != nil {
		return nil, err
	}
	if !runtime.HasStatusCode(resp, http.StatusAccepted) {
		return nil, client.testOutputHandleError(resp)
	}
	return resp, nil
}

// testOutputCreateRequest creates the TestOutput request.
func (client *SubscriptionsClient) testOutputCreateRequest(ctx context.Context, location string, testOutput TestOutput, options *SubscriptionsBeginTestOutputOptions) (*policy.Request, error) {
	urlPath := "/subscriptions/{subscriptionId}/providers/Microsoft.StreamAnalytics/locations/{location}/testOutput"
	if location == "" {
		return nil, errors.New("parameter location cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{location}", url.PathEscape(location))
	if client.subscriptionID == "" {
		return nil, errors.New("parameter client.subscriptionID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{subscriptionId}", url.PathEscape(client.subscriptionID))
	req, err := runtime.NewRequest(ctx, http.MethodPost, runtime.JoinPaths(client.ep, urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("api-version", "2017-04-01-preview")
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header.Set("Accept", "application/json")
	return req, runtime.MarshalAsJSON(req, testOutput)
}

// testOutputHandleError handles the TestOutput error response.
func (client *SubscriptionsClient) testOutputHandleError(resp *http.Response) error {
	body, err := runtime.Payload(resp)
	if err != nil {
		return runtime.NewResponseError(err, resp)
	}
	errType := Error{raw: string(body)}
	if err := runtime.UnmarshalAsJSON(resp, &errType); err != nil {
		return runtime.NewResponseError(fmt.Errorf("%s\n%s", string(body), err), resp)
	}
	return runtime.NewResponseError(&errType, resp)
}

// BeginTestQuery - Test the Stream Analytics query on a sample input.
// If the operation fails it returns the *Error error type.
func (client *SubscriptionsClient) BeginTestQuery(ctx context.Context, location string, testQuery TestQuery, options *SubscriptionsBeginTestQueryOptions) (SubscriptionsTestQueryPollerResponse, error) {
	resp, err := client.testQuery(ctx, location, testQuery, options)
	if err != nil {
		return SubscriptionsTestQueryPollerResponse{}, err
	}
	result := SubscriptionsTestQueryPollerResponse{
		RawResponse: resp,
	}
	pt, err := armruntime.NewPoller("SubscriptionsClient.TestQuery", "location", resp, client.pl, client.testQueryHandleError)
	if err != nil {
		return SubscriptionsTestQueryPollerResponse{}, err
	}
	result.Poller = &SubscriptionsTestQueryPoller{
		pt: pt,
	}
	return result, nil
}

// TestQuery - Test the Stream Analytics query on a sample input.
// If the operation fails it returns the *Error error type.
func (client *SubscriptionsClient) testQuery(ctx context.Context, location string, testQuery TestQuery, options *SubscriptionsBeginTestQueryOptions) (*http.Response, error) {
	req, err := client.testQueryCreateRequest(ctx, location, testQuery, options)
	if err != nil {
		return nil, err
	}
	resp, err := client.pl.Do(req)
	if err != nil {
		return nil, err
	}
	if !runtime.HasStatusCode(resp, http.StatusOK, http.StatusAccepted) {
		return nil, client.testQueryHandleError(resp)
	}
	return resp, nil
}

// testQueryCreateRequest creates the TestQuery request.
func (client *SubscriptionsClient) testQueryCreateRequest(ctx context.Context, location string, testQuery TestQuery, options *SubscriptionsBeginTestQueryOptions) (*policy.Request, error) {
	urlPath := "/subscriptions/{subscriptionId}/providers/Microsoft.StreamAnalytics/locations/{location}/testQuery"
	if location == "" {
		return nil, errors.New("parameter location cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{location}", url.PathEscape(location))
	if client.subscriptionID == "" {
		return nil, errors.New("parameter client.subscriptionID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{subscriptionId}", url.PathEscape(client.subscriptionID))
	req, err := runtime.NewRequest(ctx, http.MethodPost, runtime.JoinPaths(client.ep, urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("api-version", "2017-04-01-preview")
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header.Set("Accept", "application/json")
	return req, runtime.MarshalAsJSON(req, testQuery)
}

// testQueryHandleError handles the TestQuery error response.
func (client *SubscriptionsClient) testQueryHandleError(resp *http.Response) error {
	body, err := runtime.Payload(resp)
	if err != nil {
		return runtime.NewResponseError(err, resp)
	}
	errType := Error{raw: string(body)}
	if err := runtime.UnmarshalAsJSON(resp, &errType); err != nil {
		return runtime.NewResponseError(fmt.Errorf("%s\n%s", string(body), err), resp)
	}
	return runtime.NewResponseError(&errType, resp)
}
