//go:build go1.16
// +build go1.16

// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

package armsubscription

import (
	"context"
	"errors"
	"fmt"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/arm"
	armruntime "github.com/Azure/azure-sdk-for-go/sdk/azcore/arm/runtime"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/policy"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/runtime"
	"net/http"
	"net/url"
	"strings"
)

// SubscriptionClient contains the methods for the Subscription group.
// Don't use this type directly, use NewSubscriptionClient() instead.
type SubscriptionClient struct {
	ep string
	pl runtime.Pipeline
}

// NewSubscriptionClient creates a new instance of SubscriptionClient with the specified values.
func NewSubscriptionClient(credential azcore.TokenCredential, options *arm.ClientOptions) *SubscriptionClient {
	cp := arm.ClientOptions{}
	if options != nil {
		cp = *options
	}
	if len(cp.Host) == 0 {
		cp.Host = arm.AzurePublicCloud
	}
	return &SubscriptionClient{ep: string(cp.Host), pl: armruntime.NewPipeline(module, version, credential, &cp)}
}

// BeginAcceptOwnership - Accept subscription ownership.
// If the operation fails it returns the *ErrorResponseBody error type.
func (client *SubscriptionClient) BeginAcceptOwnership(ctx context.Context, subscriptionID string, body AcceptOwnershipRequest, options *SubscriptionBeginAcceptOwnershipOptions) (SubscriptionAcceptOwnershipPollerResponse, error) {
	resp, err := client.acceptOwnership(ctx, subscriptionID, body, options)
	if err != nil {
		return SubscriptionAcceptOwnershipPollerResponse{}, err
	}
	result := SubscriptionAcceptOwnershipPollerResponse{
		RawResponse: resp,
	}
	pt, err := armruntime.NewPoller("SubscriptionClient.AcceptOwnership", "", resp, client.pl, client.acceptOwnershipHandleError)
	if err != nil {
		return SubscriptionAcceptOwnershipPollerResponse{}, err
	}
	result.Poller = &SubscriptionAcceptOwnershipPoller{
		pt: pt,
	}
	return result, nil
}

// AcceptOwnership - Accept subscription ownership.
// If the operation fails it returns the *ErrorResponseBody error type.
func (client *SubscriptionClient) acceptOwnership(ctx context.Context, subscriptionID string, body AcceptOwnershipRequest, options *SubscriptionBeginAcceptOwnershipOptions) (*http.Response, error) {
	req, err := client.acceptOwnershipCreateRequest(ctx, subscriptionID, body, options)
	if err != nil {
		return nil, err
	}
	resp, err := client.pl.Do(req)
	if err != nil {
		return nil, err
	}
	if !runtime.HasStatusCode(resp, http.StatusAccepted) {
		return nil, client.acceptOwnershipHandleError(resp)
	}
	return resp, nil
}

// acceptOwnershipCreateRequest creates the AcceptOwnership request.
func (client *SubscriptionClient) acceptOwnershipCreateRequest(ctx context.Context, subscriptionID string, body AcceptOwnershipRequest, options *SubscriptionBeginAcceptOwnershipOptions) (*policy.Request, error) {
	urlPath := "/providers/Microsoft.Subscription/{subscriptionId}/acceptOwnership"
	if subscriptionID == "" {
		return nil, errors.New("parameter subscriptionID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{subscriptionId}", url.PathEscape(subscriptionID))
	req, err := runtime.NewRequest(ctx, http.MethodPost, runtime.JoinPaths(client.ep, urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("api-version", "2021-10-01")
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header.Set("Accept", "application/json")
	return req, runtime.MarshalAsJSON(req, body)
}

// acceptOwnershipHandleError handles the AcceptOwnership error response.
func (client *SubscriptionClient) acceptOwnershipHandleError(resp *http.Response) error {
	body, err := runtime.Payload(resp)
	if err != nil {
		return runtime.NewResponseError(err, resp)
	}
	errType := ErrorResponseBody{raw: string(body)}
	if err := runtime.UnmarshalAsJSON(resp, &errType); err != nil {
		return runtime.NewResponseError(fmt.Errorf("%s\n%s", string(body), err), resp)
	}
	return runtime.NewResponseError(&errType, resp)
}

// AcceptOwnershipStatus - Accept subscription ownership status.
// If the operation fails it returns the *ErrorResponseBody error type.
func (client *SubscriptionClient) AcceptOwnershipStatus(ctx context.Context, subscriptionID string, options *SubscriptionAcceptOwnershipStatusOptions) (SubscriptionAcceptOwnershipStatusResponse, error) {
	req, err := client.acceptOwnershipStatusCreateRequest(ctx, subscriptionID, options)
	if err != nil {
		return SubscriptionAcceptOwnershipStatusResponse{}, err
	}
	resp, err := client.pl.Do(req)
	if err != nil {
		return SubscriptionAcceptOwnershipStatusResponse{}, err
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {
		return SubscriptionAcceptOwnershipStatusResponse{}, client.acceptOwnershipStatusHandleError(resp)
	}
	return client.acceptOwnershipStatusHandleResponse(resp)
}

// acceptOwnershipStatusCreateRequest creates the AcceptOwnershipStatus request.
func (client *SubscriptionClient) acceptOwnershipStatusCreateRequest(ctx context.Context, subscriptionID string, options *SubscriptionAcceptOwnershipStatusOptions) (*policy.Request, error) {
	urlPath := "/providers/Microsoft.Subscription/{subscriptionId}/acceptOwnershipStatus"
	if subscriptionID == "" {
		return nil, errors.New("parameter subscriptionID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{subscriptionId}", url.PathEscape(subscriptionID))
	req, err := runtime.NewRequest(ctx, http.MethodGet, runtime.JoinPaths(client.ep, urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("api-version", "2021-10-01")
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header.Set("Accept", "application/json")
	return req, nil
}

// acceptOwnershipStatusHandleResponse handles the AcceptOwnershipStatus response.
func (client *SubscriptionClient) acceptOwnershipStatusHandleResponse(resp *http.Response) (SubscriptionAcceptOwnershipStatusResponse, error) {
	result := SubscriptionAcceptOwnershipStatusResponse{RawResponse: resp}
	if err := runtime.UnmarshalAsJSON(resp, &result.AcceptOwnershipStatusResponse); err != nil {
		return SubscriptionAcceptOwnershipStatusResponse{}, runtime.NewResponseError(err, resp)
	}
	return result, nil
}

// acceptOwnershipStatusHandleError handles the AcceptOwnershipStatus error response.
func (client *SubscriptionClient) acceptOwnershipStatusHandleError(resp *http.Response) error {
	body, err := runtime.Payload(resp)
	if err != nil {
		return runtime.NewResponseError(err, resp)
	}
	errType := ErrorResponseBody{raw: string(body)}
	if err := runtime.UnmarshalAsJSON(resp, &errType); err != nil {
		return runtime.NewResponseError(fmt.Errorf("%s\n%s", string(body), err), resp)
	}
	return runtime.NewResponseError(&errType, resp)
}

// Cancel - The operation to cancel a subscription
// If the operation fails it returns the *ErrorResponseBody error type.
func (client *SubscriptionClient) Cancel(ctx context.Context, subscriptionID string, options *SubscriptionCancelOptions) (SubscriptionCancelResponse, error) {
	req, err := client.cancelCreateRequest(ctx, subscriptionID, options)
	if err != nil {
		return SubscriptionCancelResponse{}, err
	}
	resp, err := client.pl.Do(req)
	if err != nil {
		return SubscriptionCancelResponse{}, err
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {
		return SubscriptionCancelResponse{}, client.cancelHandleError(resp)
	}
	return client.cancelHandleResponse(resp)
}

// cancelCreateRequest creates the Cancel request.
func (client *SubscriptionClient) cancelCreateRequest(ctx context.Context, subscriptionID string, options *SubscriptionCancelOptions) (*policy.Request, error) {
	urlPath := "/subscriptions/{subscriptionId}/providers/Microsoft.Subscription/cancel"
	if subscriptionID == "" {
		return nil, errors.New("parameter subscriptionID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{subscriptionId}", url.PathEscape(subscriptionID))
	req, err := runtime.NewRequest(ctx, http.MethodPost, runtime.JoinPaths(client.ep, urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("api-version", "2021-10-01")
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header.Set("Accept", "application/json")
	return req, nil
}

// cancelHandleResponse handles the Cancel response.
func (client *SubscriptionClient) cancelHandleResponse(resp *http.Response) (SubscriptionCancelResponse, error) {
	result := SubscriptionCancelResponse{RawResponse: resp}
	if err := runtime.UnmarshalAsJSON(resp, &result.CanceledSubscriptionID); err != nil {
		return SubscriptionCancelResponse{}, runtime.NewResponseError(err, resp)
	}
	return result, nil
}

// cancelHandleError handles the Cancel error response.
func (client *SubscriptionClient) cancelHandleError(resp *http.Response) error {
	body, err := runtime.Payload(resp)
	if err != nil {
		return runtime.NewResponseError(err, resp)
	}
	errType := ErrorResponseBody{raw: string(body)}
	if err := runtime.UnmarshalAsJSON(resp, &errType); err != nil {
		return runtime.NewResponseError(fmt.Errorf("%s\n%s", string(body), err), resp)
	}
	return runtime.NewResponseError(&errType, resp)
}

// Enable - The operation to enable a subscription
// If the operation fails it returns the *ErrorResponseBody error type.
func (client *SubscriptionClient) Enable(ctx context.Context, subscriptionID string, options *SubscriptionEnableOptions) (SubscriptionEnableResponse, error) {
	req, err := client.enableCreateRequest(ctx, subscriptionID, options)
	if err != nil {
		return SubscriptionEnableResponse{}, err
	}
	resp, err := client.pl.Do(req)
	if err != nil {
		return SubscriptionEnableResponse{}, err
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {
		return SubscriptionEnableResponse{}, client.enableHandleError(resp)
	}
	return client.enableHandleResponse(resp)
}

// enableCreateRequest creates the Enable request.
func (client *SubscriptionClient) enableCreateRequest(ctx context.Context, subscriptionID string, options *SubscriptionEnableOptions) (*policy.Request, error) {
	urlPath := "/subscriptions/{subscriptionId}/providers/Microsoft.Subscription/enable"
	if subscriptionID == "" {
		return nil, errors.New("parameter subscriptionID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{subscriptionId}", url.PathEscape(subscriptionID))
	req, err := runtime.NewRequest(ctx, http.MethodPost, runtime.JoinPaths(client.ep, urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("api-version", "2021-10-01")
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header.Set("Accept", "application/json")
	return req, nil
}

// enableHandleResponse handles the Enable response.
func (client *SubscriptionClient) enableHandleResponse(resp *http.Response) (SubscriptionEnableResponse, error) {
	result := SubscriptionEnableResponse{RawResponse: resp}
	if err := runtime.UnmarshalAsJSON(resp, &result.EnabledSubscriptionID); err != nil {
		return SubscriptionEnableResponse{}, runtime.NewResponseError(err, resp)
	}
	return result, nil
}

// enableHandleError handles the Enable error response.
func (client *SubscriptionClient) enableHandleError(resp *http.Response) error {
	body, err := runtime.Payload(resp)
	if err != nil {
		return runtime.NewResponseError(err, resp)
	}
	errType := ErrorResponseBody{raw: string(body)}
	if err := runtime.UnmarshalAsJSON(resp, &errType); err != nil {
		return runtime.NewResponseError(fmt.Errorf("%s\n%s", string(body), err), resp)
	}
	return runtime.NewResponseError(&errType, resp)
}

// Rename - The operation to rename a subscription
// If the operation fails it returns the *ErrorResponseBody error type.
func (client *SubscriptionClient) Rename(ctx context.Context, subscriptionID string, body SubscriptionName, options *SubscriptionRenameOptions) (SubscriptionRenameResponse, error) {
	req, err := client.renameCreateRequest(ctx, subscriptionID, body, options)
	if err != nil {
		return SubscriptionRenameResponse{}, err
	}
	resp, err := client.pl.Do(req)
	if err != nil {
		return SubscriptionRenameResponse{}, err
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {
		return SubscriptionRenameResponse{}, client.renameHandleError(resp)
	}
	return client.renameHandleResponse(resp)
}

// renameCreateRequest creates the Rename request.
func (client *SubscriptionClient) renameCreateRequest(ctx context.Context, subscriptionID string, body SubscriptionName, options *SubscriptionRenameOptions) (*policy.Request, error) {
	urlPath := "/subscriptions/{subscriptionId}/providers/Microsoft.Subscription/rename"
	if subscriptionID == "" {
		return nil, errors.New("parameter subscriptionID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{subscriptionId}", url.PathEscape(subscriptionID))
	req, err := runtime.NewRequest(ctx, http.MethodPost, runtime.JoinPaths(client.ep, urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("api-version", "2021-10-01")
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header.Set("Accept", "application/json")
	return req, runtime.MarshalAsJSON(req, body)
}

// renameHandleResponse handles the Rename response.
func (client *SubscriptionClient) renameHandleResponse(resp *http.Response) (SubscriptionRenameResponse, error) {
	result := SubscriptionRenameResponse{RawResponse: resp}
	if err := runtime.UnmarshalAsJSON(resp, &result.RenamedSubscriptionID); err != nil {
		return SubscriptionRenameResponse{}, runtime.NewResponseError(err, resp)
	}
	return result, nil
}

// renameHandleError handles the Rename error response.
func (client *SubscriptionClient) renameHandleError(resp *http.Response) error {
	body, err := runtime.Payload(resp)
	if err != nil {
		return runtime.NewResponseError(err, resp)
	}
	errType := ErrorResponseBody{raw: string(body)}
	if err := runtime.UnmarshalAsJSON(resp, &errType); err != nil {
		return runtime.NewResponseError(fmt.Errorf("%s\n%s", string(body), err), resp)
	}
	return runtime.NewResponseError(&errType, resp)
}
