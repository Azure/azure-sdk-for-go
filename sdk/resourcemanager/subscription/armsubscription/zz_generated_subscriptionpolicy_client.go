//go:build go1.16
// +build go1.16

// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

package armsubscription

import (
	"context"
	"fmt"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/arm"
	armruntime "github.com/Azure/azure-sdk-for-go/sdk/azcore/arm/runtime"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/policy"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/runtime"
	"net/http"
)

// SubscriptionPolicyClient contains the methods for the SubscriptionPolicy group.
// Don't use this type directly, use NewSubscriptionPolicyClient() instead.
type SubscriptionPolicyClient struct {
	ep string
	pl runtime.Pipeline
}

// NewSubscriptionPolicyClient creates a new instance of SubscriptionPolicyClient with the specified values.
func NewSubscriptionPolicyClient(credential azcore.TokenCredential, options *arm.ClientOptions) *SubscriptionPolicyClient {
	cp := arm.ClientOptions{}
	if options != nil {
		cp = *options
	}
	if len(cp.Host) == 0 {
		cp.Host = arm.AzurePublicCloud
	}
	return &SubscriptionPolicyClient{ep: string(cp.Host), pl: armruntime.NewPipeline(module, version, credential, &cp)}
}

// AddUpdatePolicyForTenant - Create or Update Subscription tenant policy for user's tenant.
// If the operation fails it returns the *ErrorResponseBody error type.
func (client *SubscriptionPolicyClient) AddUpdatePolicyForTenant(ctx context.Context, body PutTenantPolicyRequestProperties, options *SubscriptionPolicyAddUpdatePolicyForTenantOptions) (SubscriptionPolicyAddUpdatePolicyForTenantResponse, error) {
	req, err := client.addUpdatePolicyForTenantCreateRequest(ctx, body, options)
	if err != nil {
		return SubscriptionPolicyAddUpdatePolicyForTenantResponse{}, err
	}
	resp, err := client.pl.Do(req)
	if err != nil {
		return SubscriptionPolicyAddUpdatePolicyForTenantResponse{}, err
	}
	if !runtime.HasStatusCode(resp, http.StatusCreated) {
		return SubscriptionPolicyAddUpdatePolicyForTenantResponse{}, client.addUpdatePolicyForTenantHandleError(resp)
	}
	return client.addUpdatePolicyForTenantHandleResponse(resp)
}

// addUpdatePolicyForTenantCreateRequest creates the AddUpdatePolicyForTenant request.
func (client *SubscriptionPolicyClient) addUpdatePolicyForTenantCreateRequest(ctx context.Context, body PutTenantPolicyRequestProperties, options *SubscriptionPolicyAddUpdatePolicyForTenantOptions) (*policy.Request, error) {
	urlPath := "/providers/Microsoft.Subscription/policies/default"
	req, err := runtime.NewRequest(ctx, http.MethodPut, runtime.JoinPaths(client.ep, urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("api-version", "2021-10-01")
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header.Set("Accept", "application/json")
	return req, runtime.MarshalAsJSON(req, body)
}

// addUpdatePolicyForTenantHandleResponse handles the AddUpdatePolicyForTenant response.
func (client *SubscriptionPolicyClient) addUpdatePolicyForTenantHandleResponse(resp *http.Response) (SubscriptionPolicyAddUpdatePolicyForTenantResponse, error) {
	result := SubscriptionPolicyAddUpdatePolicyForTenantResponse{RawResponse: resp}
	if err := runtime.UnmarshalAsJSON(resp, &result.GetTenantPolicyResponse); err != nil {
		return SubscriptionPolicyAddUpdatePolicyForTenantResponse{}, runtime.NewResponseError(err, resp)
	}
	return result, nil
}

// addUpdatePolicyForTenantHandleError handles the AddUpdatePolicyForTenant error response.
func (client *SubscriptionPolicyClient) addUpdatePolicyForTenantHandleError(resp *http.Response) error {
	body, err := runtime.Payload(resp)
	if err != nil {
		return runtime.NewResponseError(err, resp)
	}
	errType := ErrorResponseBody{raw: string(body)}
	if err := runtime.UnmarshalAsJSON(resp, &errType); err != nil {
		return runtime.NewResponseError(fmt.Errorf("%s\n%s", string(body), err), resp)
	}
	return runtime.NewResponseError(&errType, resp)
}

// GetPolicyForTenant - Get the subscription tenant policy for the user's tenant.
// If the operation fails it returns the *ErrorResponseBody error type.
func (client *SubscriptionPolicyClient) GetPolicyForTenant(ctx context.Context, options *SubscriptionPolicyGetPolicyForTenantOptions) (SubscriptionPolicyGetPolicyForTenantResponse, error) {
	req, err := client.getPolicyForTenantCreateRequest(ctx, options)
	if err != nil {
		return SubscriptionPolicyGetPolicyForTenantResponse{}, err
	}
	resp, err := client.pl.Do(req)
	if err != nil {
		return SubscriptionPolicyGetPolicyForTenantResponse{}, err
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {
		return SubscriptionPolicyGetPolicyForTenantResponse{}, client.getPolicyForTenantHandleError(resp)
	}
	return client.getPolicyForTenantHandleResponse(resp)
}

// getPolicyForTenantCreateRequest creates the GetPolicyForTenant request.
func (client *SubscriptionPolicyClient) getPolicyForTenantCreateRequest(ctx context.Context, options *SubscriptionPolicyGetPolicyForTenantOptions) (*policy.Request, error) {
	urlPath := "/providers/Microsoft.Subscription/policies/default"
	req, err := runtime.NewRequest(ctx, http.MethodGet, runtime.JoinPaths(client.ep, urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("api-version", "2021-10-01")
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header.Set("Accept", "application/json")
	return req, nil
}

// getPolicyForTenantHandleResponse handles the GetPolicyForTenant response.
func (client *SubscriptionPolicyClient) getPolicyForTenantHandleResponse(resp *http.Response) (SubscriptionPolicyGetPolicyForTenantResponse, error) {
	result := SubscriptionPolicyGetPolicyForTenantResponse{RawResponse: resp}
	if err := runtime.UnmarshalAsJSON(resp, &result.GetTenantPolicyResponse); err != nil {
		return SubscriptionPolicyGetPolicyForTenantResponse{}, runtime.NewResponseError(err, resp)
	}
	return result, nil
}

// getPolicyForTenantHandleError handles the GetPolicyForTenant error response.
func (client *SubscriptionPolicyClient) getPolicyForTenantHandleError(resp *http.Response) error {
	body, err := runtime.Payload(resp)
	if err != nil {
		return runtime.NewResponseError(err, resp)
	}
	errType := ErrorResponseBody{raw: string(body)}
	if err := runtime.UnmarshalAsJSON(resp, &errType); err != nil {
		return runtime.NewResponseError(fmt.Errorf("%s\n%s", string(body), err), resp)
	}
	return runtime.NewResponseError(&errType, resp)
}

// ListPolicyForTenant - Get the subscription tenant policy for the user's tenant.
// If the operation fails it returns the *ErrorResponseBody error type.
func (client *SubscriptionPolicyClient) ListPolicyForTenant(options *SubscriptionPolicyListPolicyForTenantOptions) *SubscriptionPolicyListPolicyForTenantPager {
	return &SubscriptionPolicyListPolicyForTenantPager{
		client: client,
		requester: func(ctx context.Context) (*policy.Request, error) {
			return client.listPolicyForTenantCreateRequest(ctx, options)
		},
		advancer: func(ctx context.Context, resp SubscriptionPolicyListPolicyForTenantResponse) (*policy.Request, error) {
			return runtime.NewRequest(ctx, http.MethodGet, *resp.GetTenantPolicyListResponse.NextLink)
		},
	}
}

// listPolicyForTenantCreateRequest creates the ListPolicyForTenant request.
func (client *SubscriptionPolicyClient) listPolicyForTenantCreateRequest(ctx context.Context, options *SubscriptionPolicyListPolicyForTenantOptions) (*policy.Request, error) {
	urlPath := "/providers/Microsoft.Subscription/policies"
	req, err := runtime.NewRequest(ctx, http.MethodGet, runtime.JoinPaths(client.ep, urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("api-version", "2021-10-01")
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header.Set("Accept", "application/json")
	return req, nil
}

// listPolicyForTenantHandleResponse handles the ListPolicyForTenant response.
func (client *SubscriptionPolicyClient) listPolicyForTenantHandleResponse(resp *http.Response) (SubscriptionPolicyListPolicyForTenantResponse, error) {
	result := SubscriptionPolicyListPolicyForTenantResponse{RawResponse: resp}
	if err := runtime.UnmarshalAsJSON(resp, &result.GetTenantPolicyListResponse); err != nil {
		return SubscriptionPolicyListPolicyForTenantResponse{}, runtime.NewResponseError(err, resp)
	}
	return result, nil
}

// listPolicyForTenantHandleError handles the ListPolicyForTenant error response.
func (client *SubscriptionPolicyClient) listPolicyForTenantHandleError(resp *http.Response) error {
	body, err := runtime.Payload(resp)
	if err != nil {
		return runtime.NewResponseError(err, resp)
	}
	errType := ErrorResponseBody{raw: string(body)}
	if err := runtime.UnmarshalAsJSON(resp, &errType); err != nil {
		return runtime.NewResponseError(fmt.Errorf("%s\n%s", string(body), err), resp)
	}
	return runtime.NewResponseError(&errType, resp)
}
