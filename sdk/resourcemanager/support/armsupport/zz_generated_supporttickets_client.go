//go:build go1.16
// +build go1.16

// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

package armsupport

import (
	"context"
	"errors"
	"fmt"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/arm"
	armruntime "github.com/Azure/azure-sdk-for-go/sdk/azcore/arm/runtime"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/policy"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/runtime"
	"net/http"
	"net/url"
	"strconv"
	"strings"
)

// SupportTicketsClient contains the methods for the SupportTickets group.
// Don't use this type directly, use NewSupportTicketsClient() instead.
type SupportTicketsClient struct {
	ep             string
	pl             runtime.Pipeline
	subscriptionID string
}

// NewSupportTicketsClient creates a new instance of SupportTicketsClient with the specified values.
func NewSupportTicketsClient(subscriptionID string, credential azcore.TokenCredential, options *arm.ClientOptions) *SupportTicketsClient {
	cp := arm.ClientOptions{}
	if options != nil {
		cp = *options
	}
	if len(cp.Host) == 0 {
		cp.Host = arm.AzurePublicCloud
	}
	return &SupportTicketsClient{subscriptionID: subscriptionID, ep: string(cp.Host), pl: armruntime.NewPipeline(module, version, credential, &cp)}
}

// CheckNameAvailability - Check the availability of a resource name. This API should be used to check the uniqueness of the name for support ticket creation
// for the selected subscription.
// If the operation fails it returns the *ExceptionResponse error type.
func (client *SupportTicketsClient) CheckNameAvailability(ctx context.Context, checkNameAvailabilityInput CheckNameAvailabilityInput, options *SupportTicketsCheckNameAvailabilityOptions) (SupportTicketsCheckNameAvailabilityResponse, error) {
	req, err := client.checkNameAvailabilityCreateRequest(ctx, checkNameAvailabilityInput, options)
	if err != nil {
		return SupportTicketsCheckNameAvailabilityResponse{}, err
	}
	resp, err := client.pl.Do(req)
	if err != nil {
		return SupportTicketsCheckNameAvailabilityResponse{}, err
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {
		return SupportTicketsCheckNameAvailabilityResponse{}, client.checkNameAvailabilityHandleError(resp)
	}
	return client.checkNameAvailabilityHandleResponse(resp)
}

// checkNameAvailabilityCreateRequest creates the CheckNameAvailability request.
func (client *SupportTicketsClient) checkNameAvailabilityCreateRequest(ctx context.Context, checkNameAvailabilityInput CheckNameAvailabilityInput, options *SupportTicketsCheckNameAvailabilityOptions) (*policy.Request, error) {
	urlPath := "/subscriptions/{subscriptionId}/providers/Microsoft.Support/checkNameAvailability"
	if client.subscriptionID == "" {
		return nil, errors.New("parameter client.subscriptionID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{subscriptionId}", url.PathEscape(client.subscriptionID))
	req, err := runtime.NewRequest(ctx, http.MethodPost, runtime.JoinPaths(client.ep, urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("api-version", "2020-04-01")
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header.Set("Accept", "application/json")
	return req, runtime.MarshalAsJSON(req, checkNameAvailabilityInput)
}

// checkNameAvailabilityHandleResponse handles the CheckNameAvailability response.
func (client *SupportTicketsClient) checkNameAvailabilityHandleResponse(resp *http.Response) (SupportTicketsCheckNameAvailabilityResponse, error) {
	result := SupportTicketsCheckNameAvailabilityResponse{RawResponse: resp}
	if err := runtime.UnmarshalAsJSON(resp, &result.CheckNameAvailabilityOutput); err != nil {
		return SupportTicketsCheckNameAvailabilityResponse{}, runtime.NewResponseError(err, resp)
	}
	return result, nil
}

// checkNameAvailabilityHandleError handles the CheckNameAvailability error response.
func (client *SupportTicketsClient) checkNameAvailabilityHandleError(resp *http.Response) error {
	body, err := runtime.Payload(resp)
	if err != nil {
		return runtime.NewResponseError(err, resp)
	}
	errType := ExceptionResponse{raw: string(body)}
	if err := runtime.UnmarshalAsJSON(resp, &errType); err != nil {
		return runtime.NewResponseError(fmt.Errorf("%s\n%s", string(body), err), resp)
	}
	return runtime.NewResponseError(&errType, resp)
}

// BeginCreate - Creates a new support ticket for Subscription and Service limits (Quota), Technical, Billing, and Subscription Management issues for the
// specified subscription. Learn the prerequisites
// [https://aka.ms/supportAPI] required to create a support ticket.
// Always call the Services and ProblemClassifications API to get the most recent set of services and problem categories required for support ticket creation.
// Adding attachments is not currently supported via the API. To add a file to an existing support ticket, visit the Manage support ticket [https://portal.azure.com/#blade/MicrosoftAzure
// Support/HelpAndSupportBlade/managesupportrequest] page in the Azure portal, select the support ticket, and use the file upload control to add a new file.
// Providing consent to share diagnostic information with Azure support is currently not supported via the API. The Azure support engineer working on your
// ticket will reach out to you for consent if your
// issue requires gathering diagnostic information from your Azure resources.
// Creating a support ticket for on-behalf-of: Include x-ms-authorization-auxiliary header to provide an auxiliary token as per documentation
// [https://docs.microsoft.com/azure/azure-resource-manager/management/authenticate-multi-tenant]. The primary token will be from the tenant for whom a
// support ticket is being raised against the
// subscription, i.e. Cloud solution provider (CSP) customer tenant. The auxiliary token will be from the Cloud solution provider (CSP) partner tenant.
// If the operation fails it returns the *ExceptionResponse error type.
func (client *SupportTicketsClient) BeginCreate(ctx context.Context, supportTicketName string, createSupportTicketParameters SupportTicketDetails, options *SupportTicketsBeginCreateOptions) (SupportTicketsCreatePollerResponse, error) {
	resp, err := client.create(ctx, supportTicketName, createSupportTicketParameters, options)
	if err != nil {
		return SupportTicketsCreatePollerResponse{}, err
	}
	result := SupportTicketsCreatePollerResponse{
		RawResponse: resp,
	}
	pt, err := armruntime.NewPoller("SupportTicketsClient.Create", "azure-async-operation", resp, client.pl, client.createHandleError)
	if err != nil {
		return SupportTicketsCreatePollerResponse{}, err
	}
	result.Poller = &SupportTicketsCreatePoller{
		pt: pt,
	}
	return result, nil
}

// Create - Creates a new support ticket for Subscription and Service limits (Quota), Technical, Billing, and Subscription Management issues for the specified
// subscription. Learn the prerequisites
// [https://aka.ms/supportAPI] required to create a support ticket.
// Always call the Services and ProblemClassifications API to get the most recent set of services and problem categories required for support ticket creation.
// Adding attachments is not currently supported via the API. To add a file to an existing support ticket, visit the Manage support ticket [https://portal.azure.com/#blade/MicrosoftAzure
// Support/HelpAndSupportBlade/managesupportrequest] page in the Azure portal, select the support ticket, and use the file upload control to add a new file.
// Providing consent to share diagnostic information with Azure support is currently not supported via the API. The Azure support engineer working on your
// ticket will reach out to you for consent if your
// issue requires gathering diagnostic information from your Azure resources.
// Creating a support ticket for on-behalf-of: Include x-ms-authorization-auxiliary header to provide an auxiliary token as per documentation
// [https://docs.microsoft.com/azure/azure-resource-manager/management/authenticate-multi-tenant]. The primary token will be from the tenant for whom a
// support ticket is being raised against the
// subscription, i.e. Cloud solution provider (CSP) customer tenant. The auxiliary token will be from the Cloud solution provider (CSP) partner tenant.
// If the operation fails it returns the *ExceptionResponse error type.
func (client *SupportTicketsClient) create(ctx context.Context, supportTicketName string, createSupportTicketParameters SupportTicketDetails, options *SupportTicketsBeginCreateOptions) (*http.Response, error) {
	req, err := client.createCreateRequest(ctx, supportTicketName, createSupportTicketParameters, options)
	if err != nil {
		return nil, err
	}
	resp, err := client.pl.Do(req)
	if err != nil {
		return nil, err
	}
	if !runtime.HasStatusCode(resp, http.StatusOK, http.StatusAccepted) {
		return nil, client.createHandleError(resp)
	}
	return resp, nil
}

// createCreateRequest creates the Create request.
func (client *SupportTicketsClient) createCreateRequest(ctx context.Context, supportTicketName string, createSupportTicketParameters SupportTicketDetails, options *SupportTicketsBeginCreateOptions) (*policy.Request, error) {
	urlPath := "/subscriptions/{subscriptionId}/providers/Microsoft.Support/supportTickets/{supportTicketName}"
	if supportTicketName == "" {
		return nil, errors.New("parameter supportTicketName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{supportTicketName}", url.PathEscape(supportTicketName))
	if client.subscriptionID == "" {
		return nil, errors.New("parameter client.subscriptionID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{subscriptionId}", url.PathEscape(client.subscriptionID))
	req, err := runtime.NewRequest(ctx, http.MethodPut, runtime.JoinPaths(client.ep, urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("api-version", "2020-04-01")
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header.Set("Accept", "application/json")
	return req, runtime.MarshalAsJSON(req, createSupportTicketParameters)
}

// createHandleError handles the Create error response.
func (client *SupportTicketsClient) createHandleError(resp *http.Response) error {
	body, err := runtime.Payload(resp)
	if err != nil {
		return runtime.NewResponseError(err, resp)
	}
	errType := ExceptionResponse{raw: string(body)}
	if err := runtime.UnmarshalAsJSON(resp, &errType); err != nil {
		return runtime.NewResponseError(fmt.Errorf("%s\n%s", string(body), err), resp)
	}
	return runtime.NewResponseError(&errType, resp)
}

// Get - Get ticket details for an Azure subscription. Support ticket data is available for 18 months after ticket creation. If a ticket was created more
// than 18 months ago, a request for data might cause an
// error.
// If the operation fails it returns the *ExceptionResponse error type.
func (client *SupportTicketsClient) Get(ctx context.Context, supportTicketName string, options *SupportTicketsGetOptions) (SupportTicketsGetResponse, error) {
	req, err := client.getCreateRequest(ctx, supportTicketName, options)
	if err != nil {
		return SupportTicketsGetResponse{}, err
	}
	resp, err := client.pl.Do(req)
	if err != nil {
		return SupportTicketsGetResponse{}, err
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {
		return SupportTicketsGetResponse{}, client.getHandleError(resp)
	}
	return client.getHandleResponse(resp)
}

// getCreateRequest creates the Get request.
func (client *SupportTicketsClient) getCreateRequest(ctx context.Context, supportTicketName string, options *SupportTicketsGetOptions) (*policy.Request, error) {
	urlPath := "/subscriptions/{subscriptionId}/providers/Microsoft.Support/supportTickets/{supportTicketName}"
	if supportTicketName == "" {
		return nil, errors.New("parameter supportTicketName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{supportTicketName}", url.PathEscape(supportTicketName))
	if client.subscriptionID == "" {
		return nil, errors.New("parameter client.subscriptionID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{subscriptionId}", url.PathEscape(client.subscriptionID))
	req, err := runtime.NewRequest(ctx, http.MethodGet, runtime.JoinPaths(client.ep, urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("api-version", "2020-04-01")
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header.Set("Accept", "application/json")
	return req, nil
}

// getHandleResponse handles the Get response.
func (client *SupportTicketsClient) getHandleResponse(resp *http.Response) (SupportTicketsGetResponse, error) {
	result := SupportTicketsGetResponse{RawResponse: resp}
	if err := runtime.UnmarshalAsJSON(resp, &result.SupportTicketDetails); err != nil {
		return SupportTicketsGetResponse{}, runtime.NewResponseError(err, resp)
	}
	return result, nil
}

// getHandleError handles the Get error response.
func (client *SupportTicketsClient) getHandleError(resp *http.Response) error {
	body, err := runtime.Payload(resp)
	if err != nil {
		return runtime.NewResponseError(err, resp)
	}
	errType := ExceptionResponse{raw: string(body)}
	if err := runtime.UnmarshalAsJSON(resp, &errType); err != nil {
		return runtime.NewResponseError(fmt.Errorf("%s\n%s", string(body), err), resp)
	}
	return runtime.NewResponseError(&errType, resp)
}

// List - Lists all the support tickets for an Azure subscription. You can also filter the support tickets by Status or CreatedDate using the $filter parameter.
// Output will be a paged result with nextLink,
// using which you can retrieve the next set of support tickets.
// Support ticket data is available for 18 months after ticket creation. If a ticket was created more than 18 months ago, a request for data might cause
// an error.
// If the operation fails it returns the *ExceptionResponse error type.
func (client *SupportTicketsClient) List(options *SupportTicketsListOptions) *SupportTicketsListPager {
	return &SupportTicketsListPager{
		client: client,
		requester: func(ctx context.Context) (*policy.Request, error) {
			return client.listCreateRequest(ctx, options)
		},
		advancer: func(ctx context.Context, resp SupportTicketsListResponse) (*policy.Request, error) {
			return runtime.NewRequest(ctx, http.MethodGet, *resp.SupportTicketsListResult.NextLink)
		},
	}
}

// listCreateRequest creates the List request.
func (client *SupportTicketsClient) listCreateRequest(ctx context.Context, options *SupportTicketsListOptions) (*policy.Request, error) {
	urlPath := "/subscriptions/{subscriptionId}/providers/Microsoft.Support/supportTickets"
	if client.subscriptionID == "" {
		return nil, errors.New("parameter client.subscriptionID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{subscriptionId}", url.PathEscape(client.subscriptionID))
	req, err := runtime.NewRequest(ctx, http.MethodGet, runtime.JoinPaths(client.ep, urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	if options != nil && options.Top != nil {
		reqQP.Set("$top", strconv.FormatInt(int64(*options.Top), 10))
	}
	if options != nil && options.Filter != nil {
		reqQP.Set("$filter", *options.Filter)
	}
	reqQP.Set("api-version", "2020-04-01")
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header.Set("Accept", "application/json")
	return req, nil
}

// listHandleResponse handles the List response.
func (client *SupportTicketsClient) listHandleResponse(resp *http.Response) (SupportTicketsListResponse, error) {
	result := SupportTicketsListResponse{RawResponse: resp}
	if err := runtime.UnmarshalAsJSON(resp, &result.SupportTicketsListResult); err != nil {
		return SupportTicketsListResponse{}, runtime.NewResponseError(err, resp)
	}
	return result, nil
}

// listHandleError handles the List error response.
func (client *SupportTicketsClient) listHandleError(resp *http.Response) error {
	body, err := runtime.Payload(resp)
	if err != nil {
		return runtime.NewResponseError(err, resp)
	}
	errType := ExceptionResponse{raw: string(body)}
	if err := runtime.UnmarshalAsJSON(resp, &errType); err != nil {
		return runtime.NewResponseError(fmt.Errorf("%s\n%s", string(body), err), resp)
	}
	return runtime.NewResponseError(&errType, resp)
}

// Update - This API allows you to update the severity level, ticket status, and your contact information in the support ticket.
// Note: The severity levels cannot be changed if a support ticket is actively being worked upon by an Azure support engineer. In such a case, contact your
// support engineer to request severity update by
// adding a new communication using the Communications API.
// Changing the ticket status to closed is allowed only on an unassigned case. When an engineer is actively working on the ticket, send your ticket closure
// request by sending a note to your engineer.
// If the operation fails it returns the *ExceptionResponse error type.
func (client *SupportTicketsClient) Update(ctx context.Context, supportTicketName string, updateSupportTicket UpdateSupportTicket, options *SupportTicketsUpdateOptions) (SupportTicketsUpdateResponse, error) {
	req, err := client.updateCreateRequest(ctx, supportTicketName, updateSupportTicket, options)
	if err != nil {
		return SupportTicketsUpdateResponse{}, err
	}
	resp, err := client.pl.Do(req)
	if err != nil {
		return SupportTicketsUpdateResponse{}, err
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {
		return SupportTicketsUpdateResponse{}, client.updateHandleError(resp)
	}
	return client.updateHandleResponse(resp)
}

// updateCreateRequest creates the Update request.
func (client *SupportTicketsClient) updateCreateRequest(ctx context.Context, supportTicketName string, updateSupportTicket UpdateSupportTicket, options *SupportTicketsUpdateOptions) (*policy.Request, error) {
	urlPath := "/subscriptions/{subscriptionId}/providers/Microsoft.Support/supportTickets/{supportTicketName}"
	if supportTicketName == "" {
		return nil, errors.New("parameter supportTicketName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{supportTicketName}", url.PathEscape(supportTicketName))
	if client.subscriptionID == "" {
		return nil, errors.New("parameter client.subscriptionID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{subscriptionId}", url.PathEscape(client.subscriptionID))
	req, err := runtime.NewRequest(ctx, http.MethodPatch, runtime.JoinPaths(client.ep, urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("api-version", "2020-04-01")
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header.Set("Accept", "application/json")
	return req, runtime.MarshalAsJSON(req, updateSupportTicket)
}

// updateHandleResponse handles the Update response.
func (client *SupportTicketsClient) updateHandleResponse(resp *http.Response) (SupportTicketsUpdateResponse, error) {
	result := SupportTicketsUpdateResponse{RawResponse: resp}
	if err := runtime.UnmarshalAsJSON(resp, &result.SupportTicketDetails); err != nil {
		return SupportTicketsUpdateResponse{}, runtime.NewResponseError(err, resp)
	}
	return result, nil
}

// updateHandleError handles the Update error response.
func (client *SupportTicketsClient) updateHandleError(resp *http.Response) error {
	body, err := runtime.Payload(resp)
	if err != nil {
		return runtime.NewResponseError(err, resp)
	}
	errType := ExceptionResponse{raw: string(body)}
	if err := runtime.UnmarshalAsJSON(resp, &errType); err != nil {
		return runtime.NewResponseError(fmt.Errorf("%s\n%s", string(body), err), resp)
	}
	return runtime.NewResponseError(&errType, resp)
}
