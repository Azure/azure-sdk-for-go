//go:build go1.18
// +build go1.18

// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

package armsynapse_test

import (
	"context"
	"log"

	"github.com/Azure/azure-sdk-for-go/sdk/azcore/to"
	"github.com/Azure/azure-sdk-for-go/sdk/azidentity"
	"github.com/Azure/azure-sdk-for-go/sdk/resourcemanager/synapse/armsynapse"
)

// Generated from example definition: https://github.com/Azure/azure-rest-api-specs/tree/main/specification/synapse/resource-manager/Microsoft.Synapse/stable/2021-06-01/examples/SensitivityLabelsRecommendedUpdate.json
func ExampleSQLPoolRecommendedSensitivityLabelsClient_Update() {
	cred, err := azidentity.NewDefaultAzureCredential(nil)
	if err != nil {
		log.Fatalf("failed to obtain a credential: %v", err)
		return
	}
	ctx := context.Background()
	client, err := armsynapse.NewSQLPoolRecommendedSensitivityLabelsClient("<subscription-id>", cred, nil)
	if err != nil {
		log.Fatalf("failed to create client: %v", err)
		return
	}
	_, err = client.Update(ctx,
		"<resource-group-name>",
		"<workspace-name>",
		"<sql-pool-name>",
		armsynapse.RecommendedSensitivityLabelUpdateList{
			Operations: []*armsynapse.RecommendedSensitivityLabelUpdate{
				{
					Properties: &armsynapse.RecommendedSensitivityLabelUpdateProperties{
						Schema: to.Ptr("<schema>"),
						Column: to.Ptr("<column>"),
						Op:     to.Ptr(armsynapse.RecommendedSensitivityLabelUpdateKindEnable),
						Table:  to.Ptr("<table>"),
					},
				},
				{
					Properties: &armsynapse.RecommendedSensitivityLabelUpdateProperties{
						Schema: to.Ptr("<schema>"),
						Column: to.Ptr("<column>"),
						Op:     to.Ptr(armsynapse.RecommendedSensitivityLabelUpdateKindEnable),
						Table:  to.Ptr("<table>"),
					},
				},
				{
					Properties: &armsynapse.RecommendedSensitivityLabelUpdateProperties{
						Schema: to.Ptr("<schema>"),
						Column: to.Ptr("<column>"),
						Op:     to.Ptr(armsynapse.RecommendedSensitivityLabelUpdateKindDisable),
						Table:  to.Ptr("<table>"),
					},
				}},
		},
		nil)
	if err != nil {
		log.Fatalf("failed to finish the request: %v", err)
		return
	}
}
