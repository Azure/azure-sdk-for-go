//go:build go1.16
// +build go1.16

// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

package armsynapse_test

import (
	"context"
	"log"

	"github.com/Azure/azure-sdk-for-go/sdk/azcore/to"
	"github.com/Azure/azure-sdk-for-go/sdk/azidentity"
	"github.com/Azure/azure-sdk-for-go/sdk/resourcemanager/synapse/armsynapse"
)

// x-ms-original-file: specification/synapse/resource-manager/Microsoft.Synapse/stable/2021-06-01/examples/ListSqlPoolsSensitivityLabelsWithSourceCurrent.json
func ExampleSQLPoolSensitivityLabelsClient_ListCurrent() {
	cred, err := azidentity.NewDefaultAzureCredential(nil)
	if err != nil {
		log.Fatalf("failed to obtain a credential: %v", err)
	}
	ctx := context.Background()
	client := armsynapse.NewSQLPoolSensitivityLabelsClient("<subscription-id>", cred, nil)
	pager := client.ListCurrent("<resource-group-name>",
		"<workspace-name>",
		"<sql-pool-name>",
		&armsynapse.SQLPoolSensitivityLabelsListCurrentOptions{Filter: nil})
	for pager.NextPage(ctx) {
		if err := pager.Err(); err != nil {
			log.Fatalf("failed to advance page: %v", err)
		}
		for _, v := range pager.PageResponse().Value {
			log.Printf("SensitivityLabel.ID: %s\n", *v.ID)
		}
	}
}

// x-ms-original-file: specification/synapse/resource-manager/Microsoft.Synapse/stable/2021-06-01/examples/SensitivityLabelsCurrentUpdate.json
func ExampleSQLPoolSensitivityLabelsClient_Update() {
	cred, err := azidentity.NewDefaultAzureCredential(nil)
	if err != nil {
		log.Fatalf("failed to obtain a credential: %v", err)
	}
	ctx := context.Background()
	client := armsynapse.NewSQLPoolSensitivityLabelsClient("<subscription-id>", cred, nil)
	_, err = client.Update(ctx,
		"<resource-group-name>",
		"<workspace-name>",
		"<sql-pool-name>",
		armsynapse.SensitivityLabelUpdateList{
			Operations: []*armsynapse.SensitivityLabelUpdate{
				{
					Properties: &armsynapse.SensitivityLabelUpdateProperties{
						Schema: to.StringPtr("<schema>"),
						Column: to.StringPtr("<column>"),
						Op:     armsynapse.SensitivityLabelUpdateKindSet.ToPtr(),
						SensitivityLabel: &armsynapse.SensitivityLabel{
							Properties: &armsynapse.SensitivityLabelProperties{
								InformationType:   to.StringPtr("<information-type>"),
								InformationTypeID: to.StringPtr("<information-type-id>"),
								LabelID:           to.StringPtr("<label-id>"),
								LabelName:         to.StringPtr("<label-name>"),
								Rank:              armsynapse.SensitivityLabelRankLow.ToPtr(),
							},
						},
						Table: to.StringPtr("<table>"),
					},
				},
				{
					Properties: &armsynapse.SensitivityLabelUpdateProperties{
						Schema: to.StringPtr("<schema>"),
						Column: to.StringPtr("<column>"),
						Op:     armsynapse.SensitivityLabelUpdateKindSet.ToPtr(),
						SensitivityLabel: &armsynapse.SensitivityLabel{
							Properties: &armsynapse.SensitivityLabelProperties{
								InformationType:   to.StringPtr("<information-type>"),
								InformationTypeID: to.StringPtr("<information-type-id>"),
								LabelID:           to.StringPtr("<label-id>"),
								LabelName:         to.StringPtr("<label-name>"),
								Rank:              armsynapse.SensitivityLabelRankCritical.ToPtr(),
							},
						},
						Table: to.StringPtr("<table>"),
					},
				},
				{
					Properties: &armsynapse.SensitivityLabelUpdateProperties{
						Schema: to.StringPtr("<schema>"),
						Column: to.StringPtr("<column>"),
						Op:     armsynapse.SensitivityLabelUpdateKindRemove.ToPtr(),
						Table:  to.StringPtr("<table>"),
					},
				}},
		},
		nil)
	if err != nil {
		log.Fatal(err)
	}
}

// x-ms-original-file: specification/synapse/resource-manager/Microsoft.Synapse/stable/2021-06-01/examples/ListSqlPoolSensitivityLabelsWithSourceRecommended.json
func ExampleSQLPoolSensitivityLabelsClient_ListRecommended() {
	cred, err := azidentity.NewDefaultAzureCredential(nil)
	if err != nil {
		log.Fatalf("failed to obtain a credential: %v", err)
	}
	ctx := context.Background()
	client := armsynapse.NewSQLPoolSensitivityLabelsClient("<subscription-id>", cred, nil)
	pager := client.ListRecommended("<resource-group-name>",
		"<workspace-name>",
		"<sql-pool-name>",
		&armsynapse.SQLPoolSensitivityLabelsListRecommendedOptions{IncludeDisabledRecommendations: nil,
			SkipToken: nil,
			Filter:    nil,
		})
	for pager.NextPage(ctx) {
		if err := pager.Err(); err != nil {
			log.Fatalf("failed to advance page: %v", err)
		}
		for _, v := range pager.PageResponse().Value {
			log.Printf("SensitivityLabel.ID: %s\n", *v.ID)
		}
	}
}

// x-ms-original-file: specification/synapse/resource-manager/Microsoft.Synapse/stable/2021-06-01/examples/CreateOrUpdateSqlPoolColumnSensitivityLabelWithAllParameters.json
func ExampleSQLPoolSensitivityLabelsClient_CreateOrUpdate() {
	cred, err := azidentity.NewDefaultAzureCredential(nil)
	if err != nil {
		log.Fatalf("failed to obtain a credential: %v", err)
	}
	ctx := context.Background()
	client := armsynapse.NewSQLPoolSensitivityLabelsClient("<subscription-id>", cred, nil)
	res, err := client.CreateOrUpdate(ctx,
		"<resource-group-name>",
		"<workspace-name>",
		"<sql-pool-name>",
		"<schema-name>",
		"<table-name>",
		"<column-name>",
		armsynapse.SensitivityLabel{
			Properties: &armsynapse.SensitivityLabelProperties{
				InformationType:   to.StringPtr("<information-type>"),
				InformationTypeID: to.StringPtr("<information-type-id>"),
				LabelID:           to.StringPtr("<label-id>"),
				LabelName:         to.StringPtr("<label-name>"),
			},
		},
		nil)
	if err != nil {
		log.Fatal(err)
	}
	log.Printf("SensitivityLabel.ID: %s\n", *res.ID)
}

// x-ms-original-file: specification/synapse/resource-manager/Microsoft.Synapse/stable/2021-06-01/examples/DeleteSqlPoolColumnSensitivityLabel.json
func ExampleSQLPoolSensitivityLabelsClient_Delete() {
	cred, err := azidentity.NewDefaultAzureCredential(nil)
	if err != nil {
		log.Fatalf("failed to obtain a credential: %v", err)
	}
	ctx := context.Background()
	client := armsynapse.NewSQLPoolSensitivityLabelsClient("<subscription-id>", cred, nil)
	_, err = client.Delete(ctx,
		"<resource-group-name>",
		"<workspace-name>",
		"<sql-pool-name>",
		"<schema-name>",
		"<table-name>",
		"<column-name>",
		nil)
	if err != nil {
		log.Fatal(err)
	}
}

// x-ms-original-file: specification/synapse/resource-manager/Microsoft.Synapse/stable/2021-06-01/examples/GetSqlPoolColumnSensitivityLabelGet.json
func ExampleSQLPoolSensitivityLabelsClient_Get() {
	cred, err := azidentity.NewDefaultAzureCredential(nil)
	if err != nil {
		log.Fatalf("failed to obtain a credential: %v", err)
	}
	ctx := context.Background()
	client := armsynapse.NewSQLPoolSensitivityLabelsClient("<subscription-id>", cred, nil)
	res, err := client.Get(ctx,
		"<resource-group-name>",
		"<workspace-name>",
		"<sql-pool-name>",
		"<schema-name>",
		"<table-name>",
		"<column-name>",
		armsynapse.SensitivityLabelSourceCurrent,
		nil)
	if err != nil {
		log.Fatal(err)
	}
	log.Printf("SensitivityLabel.ID: %s\n", *res.ID)
}

// x-ms-original-file: specification/synapse/resource-manager/Microsoft.Synapse/stable/2021-06-01/examples/RecommendedColumnSensitivityLabelEnable.json
func ExampleSQLPoolSensitivityLabelsClient_EnableRecommendation() {
	cred, err := azidentity.NewDefaultAzureCredential(nil)
	if err != nil {
		log.Fatalf("failed to obtain a credential: %v", err)
	}
	ctx := context.Background()
	client := armsynapse.NewSQLPoolSensitivityLabelsClient("<subscription-id>", cred, nil)
	_, err = client.EnableRecommendation(ctx,
		"<resource-group-name>",
		"<workspace-name>",
		"<sql-pool-name>",
		"<schema-name>",
		"<table-name>",
		"<column-name>",
		nil)
	if err != nil {
		log.Fatal(err)
	}
}

// x-ms-original-file: specification/synapse/resource-manager/Microsoft.Synapse/stable/2021-06-01/examples/RecommendedColumnSensitivityLabelDisable.json
func ExampleSQLPoolSensitivityLabelsClient_DisableRecommendation() {
	cred, err := azidentity.NewDefaultAzureCredential(nil)
	if err != nil {
		log.Fatalf("failed to obtain a credential: %v", err)
	}
	ctx := context.Background()
	client := armsynapse.NewSQLPoolSensitivityLabelsClient("<subscription-id>", cred, nil)
	_, err = client.DisableRecommendation(ctx,
		"<resource-group-name>",
		"<workspace-name>",
		"<sql-pool-name>",
		"<schema-name>",
		"<table-name>",
		"<column-name>",
		nil)
	if err != nil {
		log.Fatal(err)
	}
}
