//go:build go1.16
// +build go1.16

// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

package armsynapse

import (
	"context"
	armruntime "github.com/Azure/azure-sdk-for-go/sdk/azcore/arm/runtime"
	"net/http"
	"time"
)

// AzureADOnlyAuthenticationsCreatePollerResponse contains the response from method AzureADOnlyAuthentications.Create.
type AzureADOnlyAuthenticationsCreatePollerResponse struct {
	// Poller contains an initialized poller.
	Poller *AzureADOnlyAuthenticationsCreatePoller

	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// PollUntilDone will poll the service endpoint until a terminal state is reached or an error is received.
// freq: the time to wait between intervals in absence of a Retry-After header. Allowed minimum is one second.
// A good starting value is 30 seconds. Note that some resources might benefit from a different value.
func (l AzureADOnlyAuthenticationsCreatePollerResponse) PollUntilDone(ctx context.Context, freq time.Duration) (AzureADOnlyAuthenticationsCreateResponse, error) {
	respType := AzureADOnlyAuthenticationsCreateResponse{}
	resp, err := l.Poller.pt.PollUntilDone(ctx, freq, &respType.AzureADOnlyAuthentication)
	if err != nil {
		return respType, err
	}
	respType.RawResponse = resp
	return respType, nil
}

// Resume rehydrates a AzureADOnlyAuthenticationsCreatePollerResponse from the provided client and resume token.
func (l *AzureADOnlyAuthenticationsCreatePollerResponse) Resume(ctx context.Context, client *AzureADOnlyAuthenticationsClient, token string) error {
	pt, err := armruntime.NewPollerFromResumeToken("AzureADOnlyAuthenticationsClient.Create", token, client.pl, client.createHandleError)
	if err != nil {
		return err
	}
	poller := &AzureADOnlyAuthenticationsCreatePoller{
		pt: pt,
	}
	resp, err := poller.Poll(ctx)
	if err != nil {
		return err
	}
	l.Poller = poller
	l.RawResponse = resp
	return nil
}

// AzureADOnlyAuthenticationsCreateResponse contains the response from method AzureADOnlyAuthentications.Create.
type AzureADOnlyAuthenticationsCreateResponse struct {
	AzureADOnlyAuthenticationsCreateResult
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// AzureADOnlyAuthenticationsCreateResult contains the result from method AzureADOnlyAuthentications.Create.
type AzureADOnlyAuthenticationsCreateResult struct {
	AzureADOnlyAuthentication
}

// AzureADOnlyAuthenticationsGetResponse contains the response from method AzureADOnlyAuthentications.Get.
type AzureADOnlyAuthenticationsGetResponse struct {
	AzureADOnlyAuthenticationsGetResult
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// AzureADOnlyAuthenticationsGetResult contains the result from method AzureADOnlyAuthentications.Get.
type AzureADOnlyAuthenticationsGetResult struct {
	AzureADOnlyAuthentication
}

// AzureADOnlyAuthenticationsListResponse contains the response from method AzureADOnlyAuthentications.List.
type AzureADOnlyAuthenticationsListResponse struct {
	AzureADOnlyAuthenticationsListResult
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// AzureADOnlyAuthenticationsListResult contains the result from method AzureADOnlyAuthentications.List.
type AzureADOnlyAuthenticationsListResult struct {
	AzureADOnlyAuthenticationListResult
}

// BigDataPoolsCreateOrUpdatePollerResponse contains the response from method BigDataPools.CreateOrUpdate.
type BigDataPoolsCreateOrUpdatePollerResponse struct {
	// Poller contains an initialized poller.
	Poller *BigDataPoolsCreateOrUpdatePoller

	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// PollUntilDone will poll the service endpoint until a terminal state is reached or an error is received.
// freq: the time to wait between intervals in absence of a Retry-After header. Allowed minimum is one second.
// A good starting value is 30 seconds. Note that some resources might benefit from a different value.
func (l BigDataPoolsCreateOrUpdatePollerResponse) PollUntilDone(ctx context.Context, freq time.Duration) (BigDataPoolsCreateOrUpdateResponse, error) {
	respType := BigDataPoolsCreateOrUpdateResponse{}
	resp, err := l.Poller.pt.PollUntilDone(ctx, freq, &respType.BigDataPoolResourceInfo)
	if err != nil {
		return respType, err
	}
	respType.RawResponse = resp
	return respType, nil
}

// Resume rehydrates a BigDataPoolsCreateOrUpdatePollerResponse from the provided client and resume token.
func (l *BigDataPoolsCreateOrUpdatePollerResponse) Resume(ctx context.Context, client *BigDataPoolsClient, token string) error {
	pt, err := armruntime.NewPollerFromResumeToken("BigDataPoolsClient.CreateOrUpdate", token, client.pl, client.createOrUpdateHandleError)
	if err != nil {
		return err
	}
	poller := &BigDataPoolsCreateOrUpdatePoller{
		pt: pt,
	}
	resp, err := poller.Poll(ctx)
	if err != nil {
		return err
	}
	l.Poller = poller
	l.RawResponse = resp
	return nil
}

// BigDataPoolsCreateOrUpdateResponse contains the response from method BigDataPools.CreateOrUpdate.
type BigDataPoolsCreateOrUpdateResponse struct {
	BigDataPoolsCreateOrUpdateResult
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// BigDataPoolsCreateOrUpdateResult contains the result from method BigDataPools.CreateOrUpdate.
type BigDataPoolsCreateOrUpdateResult struct {
	BigDataPoolResourceInfo
}

// BigDataPoolsDeletePollerResponse contains the response from method BigDataPools.Delete.
type BigDataPoolsDeletePollerResponse struct {
	// Poller contains an initialized poller.
	Poller *BigDataPoolsDeletePoller

	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// PollUntilDone will poll the service endpoint until a terminal state is reached or an error is received.
// freq: the time to wait between intervals in absence of a Retry-After header. Allowed minimum is one second.
// A good starting value is 30 seconds. Note that some resources might benefit from a different value.
func (l BigDataPoolsDeletePollerResponse) PollUntilDone(ctx context.Context, freq time.Duration) (BigDataPoolsDeleteResponse, error) {
	respType := BigDataPoolsDeleteResponse{}
	resp, err := l.Poller.pt.PollUntilDone(ctx, freq, &respType.Object)
	if err != nil {
		return respType, err
	}
	respType.RawResponse = resp
	return respType, nil
}

// Resume rehydrates a BigDataPoolsDeletePollerResponse from the provided client and resume token.
func (l *BigDataPoolsDeletePollerResponse) Resume(ctx context.Context, client *BigDataPoolsClient, token string) error {
	pt, err := armruntime.NewPollerFromResumeToken("BigDataPoolsClient.Delete", token, client.pl, client.deleteHandleError)
	if err != nil {
		return err
	}
	poller := &BigDataPoolsDeletePoller{
		pt: pt,
	}
	resp, err := poller.Poll(ctx)
	if err != nil {
		return err
	}
	l.Poller = poller
	l.RawResponse = resp
	return nil
}

// BigDataPoolsDeleteResponse contains the response from method BigDataPools.Delete.
type BigDataPoolsDeleteResponse struct {
	BigDataPoolsDeleteResult
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// BigDataPoolsDeleteResult contains the result from method BigDataPools.Delete.
type BigDataPoolsDeleteResult struct {
	// Any object
	Object map[string]interface{}
}

// BigDataPoolsGetResponse contains the response from method BigDataPools.Get.
type BigDataPoolsGetResponse struct {
	BigDataPoolsGetResult
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// BigDataPoolsGetResult contains the result from method BigDataPools.Get.
type BigDataPoolsGetResult struct {
	BigDataPoolResourceInfo
}

// BigDataPoolsListByWorkspaceResponse contains the response from method BigDataPools.ListByWorkspace.
type BigDataPoolsListByWorkspaceResponse struct {
	BigDataPoolsListByWorkspaceResult
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// BigDataPoolsListByWorkspaceResult contains the result from method BigDataPools.ListByWorkspace.
type BigDataPoolsListByWorkspaceResult struct {
	BigDataPoolResourceInfoListResult
}

// BigDataPoolsUpdateResponse contains the response from method BigDataPools.Update.
type BigDataPoolsUpdateResponse struct {
	BigDataPoolsUpdateResult
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// BigDataPoolsUpdateResult contains the result from method BigDataPools.Update.
type BigDataPoolsUpdateResult struct {
	BigDataPoolResourceInfo
}

// DataMaskingPoliciesCreateOrUpdateResponse contains the response from method DataMaskingPolicies.CreateOrUpdate.
type DataMaskingPoliciesCreateOrUpdateResponse struct {
	DataMaskingPoliciesCreateOrUpdateResult
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// DataMaskingPoliciesCreateOrUpdateResult contains the result from method DataMaskingPolicies.CreateOrUpdate.
type DataMaskingPoliciesCreateOrUpdateResult struct {
	DataMaskingPolicy
}

// DataMaskingPoliciesGetResponse contains the response from method DataMaskingPolicies.Get.
type DataMaskingPoliciesGetResponse struct {
	DataMaskingPoliciesGetResult
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// DataMaskingPoliciesGetResult contains the result from method DataMaskingPolicies.Get.
type DataMaskingPoliciesGetResult struct {
	DataMaskingPolicy
}

// DataMaskingRulesCreateOrUpdateResponse contains the response from method DataMaskingRules.CreateOrUpdate.
type DataMaskingRulesCreateOrUpdateResponse struct {
	DataMaskingRulesCreateOrUpdateResult
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// DataMaskingRulesCreateOrUpdateResult contains the result from method DataMaskingRules.CreateOrUpdate.
type DataMaskingRulesCreateOrUpdateResult struct {
	DataMaskingRule
}

// DataMaskingRulesGetResponse contains the response from method DataMaskingRules.Get.
type DataMaskingRulesGetResponse struct {
	DataMaskingRulesGetResult
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// DataMaskingRulesGetResult contains the result from method DataMaskingRules.Get.
type DataMaskingRulesGetResult struct {
	DataMaskingRule
}

// DataMaskingRulesListBySQLPoolResponse contains the response from method DataMaskingRules.ListBySQLPool.
type DataMaskingRulesListBySQLPoolResponse struct {
	DataMaskingRulesListBySQLPoolResult
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// DataMaskingRulesListBySQLPoolResult contains the result from method DataMaskingRules.ListBySQLPool.
type DataMaskingRulesListBySQLPoolResult struct {
	DataMaskingRuleListResult
}

// ExtendedSQLPoolBlobAuditingPoliciesCreateOrUpdateResponse contains the response from method ExtendedSQLPoolBlobAuditingPolicies.CreateOrUpdate.
type ExtendedSQLPoolBlobAuditingPoliciesCreateOrUpdateResponse struct {
	ExtendedSQLPoolBlobAuditingPoliciesCreateOrUpdateResult
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// ExtendedSQLPoolBlobAuditingPoliciesCreateOrUpdateResult contains the result from method ExtendedSQLPoolBlobAuditingPolicies.CreateOrUpdate.
type ExtendedSQLPoolBlobAuditingPoliciesCreateOrUpdateResult struct {
	ExtendedSQLPoolBlobAuditingPolicy
}

// ExtendedSQLPoolBlobAuditingPoliciesGetResponse contains the response from method ExtendedSQLPoolBlobAuditingPolicies.Get.
type ExtendedSQLPoolBlobAuditingPoliciesGetResponse struct {
	ExtendedSQLPoolBlobAuditingPoliciesGetResult
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// ExtendedSQLPoolBlobAuditingPoliciesGetResult contains the result from method ExtendedSQLPoolBlobAuditingPolicies.Get.
type ExtendedSQLPoolBlobAuditingPoliciesGetResult struct {
	ExtendedSQLPoolBlobAuditingPolicy
}

// ExtendedSQLPoolBlobAuditingPoliciesListBySQLPoolResponse contains the response from method ExtendedSQLPoolBlobAuditingPolicies.ListBySQLPool.
type ExtendedSQLPoolBlobAuditingPoliciesListBySQLPoolResponse struct {
	ExtendedSQLPoolBlobAuditingPoliciesListBySQLPoolResult
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// ExtendedSQLPoolBlobAuditingPoliciesListBySQLPoolResult contains the result from method ExtendedSQLPoolBlobAuditingPolicies.ListBySQLPool.
type ExtendedSQLPoolBlobAuditingPoliciesListBySQLPoolResult struct {
	ExtendedSQLPoolBlobAuditingPolicyListResult
}

// IPFirewallRulesCreateOrUpdatePollerResponse contains the response from method IPFirewallRules.CreateOrUpdate.
type IPFirewallRulesCreateOrUpdatePollerResponse struct {
	// Poller contains an initialized poller.
	Poller *IPFirewallRulesCreateOrUpdatePoller

	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// PollUntilDone will poll the service endpoint until a terminal state is reached or an error is received.
// freq: the time to wait between intervals in absence of a Retry-After header. Allowed minimum is one second.
// A good starting value is 30 seconds. Note that some resources might benefit from a different value.
func (l IPFirewallRulesCreateOrUpdatePollerResponse) PollUntilDone(ctx context.Context, freq time.Duration) (IPFirewallRulesCreateOrUpdateResponse, error) {
	respType := IPFirewallRulesCreateOrUpdateResponse{}
	resp, err := l.Poller.pt.PollUntilDone(ctx, freq, &respType.IPFirewallRuleInfo)
	if err != nil {
		return respType, err
	}
	respType.RawResponse = resp
	return respType, nil
}

// Resume rehydrates a IPFirewallRulesCreateOrUpdatePollerResponse from the provided client and resume token.
func (l *IPFirewallRulesCreateOrUpdatePollerResponse) Resume(ctx context.Context, client *IPFirewallRulesClient, token string) error {
	pt, err := armruntime.NewPollerFromResumeToken("IPFirewallRulesClient.CreateOrUpdate", token, client.pl, client.createOrUpdateHandleError)
	if err != nil {
		return err
	}
	poller := &IPFirewallRulesCreateOrUpdatePoller{
		pt: pt,
	}
	resp, err := poller.Poll(ctx)
	if err != nil {
		return err
	}
	l.Poller = poller
	l.RawResponse = resp
	return nil
}

// IPFirewallRulesCreateOrUpdateResponse contains the response from method IPFirewallRules.CreateOrUpdate.
type IPFirewallRulesCreateOrUpdateResponse struct {
	IPFirewallRulesCreateOrUpdateResult
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// IPFirewallRulesCreateOrUpdateResult contains the result from method IPFirewallRules.CreateOrUpdate.
type IPFirewallRulesCreateOrUpdateResult struct {
	IPFirewallRuleInfo
}

// IPFirewallRulesDeletePollerResponse contains the response from method IPFirewallRules.Delete.
type IPFirewallRulesDeletePollerResponse struct {
	// Poller contains an initialized poller.
	Poller *IPFirewallRulesDeletePoller

	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// PollUntilDone will poll the service endpoint until a terminal state is reached or an error is received.
// freq: the time to wait between intervals in absence of a Retry-After header. Allowed minimum is one second.
// A good starting value is 30 seconds. Note that some resources might benefit from a different value.
func (l IPFirewallRulesDeletePollerResponse) PollUntilDone(ctx context.Context, freq time.Duration) (IPFirewallRulesDeleteResponse, error) {
	respType := IPFirewallRulesDeleteResponse{}
	resp, err := l.Poller.pt.PollUntilDone(ctx, freq, &respType.Object)
	if err != nil {
		return respType, err
	}
	respType.RawResponse = resp
	return respType, nil
}

// Resume rehydrates a IPFirewallRulesDeletePollerResponse from the provided client and resume token.
func (l *IPFirewallRulesDeletePollerResponse) Resume(ctx context.Context, client *IPFirewallRulesClient, token string) error {
	pt, err := armruntime.NewPollerFromResumeToken("IPFirewallRulesClient.Delete", token, client.pl, client.deleteHandleError)
	if err != nil {
		return err
	}
	poller := &IPFirewallRulesDeletePoller{
		pt: pt,
	}
	resp, err := poller.Poll(ctx)
	if err != nil {
		return err
	}
	l.Poller = poller
	l.RawResponse = resp
	return nil
}

// IPFirewallRulesDeleteResponse contains the response from method IPFirewallRules.Delete.
type IPFirewallRulesDeleteResponse struct {
	IPFirewallRulesDeleteResult
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// IPFirewallRulesDeleteResult contains the result from method IPFirewallRules.Delete.
type IPFirewallRulesDeleteResult struct {
	// Any object
	Object map[string]interface{}
}

// IPFirewallRulesGetResponse contains the response from method IPFirewallRules.Get.
type IPFirewallRulesGetResponse struct {
	IPFirewallRulesGetResult
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// IPFirewallRulesGetResult contains the result from method IPFirewallRules.Get.
type IPFirewallRulesGetResult struct {
	IPFirewallRuleInfo
}

// IPFirewallRulesListByWorkspaceResponse contains the response from method IPFirewallRules.ListByWorkspace.
type IPFirewallRulesListByWorkspaceResponse struct {
	IPFirewallRulesListByWorkspaceResult
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// IPFirewallRulesListByWorkspaceResult contains the result from method IPFirewallRules.ListByWorkspace.
type IPFirewallRulesListByWorkspaceResult struct {
	IPFirewallRuleInfoListResult
}

// IPFirewallRulesReplaceAllPollerResponse contains the response from method IPFirewallRules.ReplaceAll.
type IPFirewallRulesReplaceAllPollerResponse struct {
	// Poller contains an initialized poller.
	Poller *IPFirewallRulesReplaceAllPoller

	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// PollUntilDone will poll the service endpoint until a terminal state is reached or an error is received.
// freq: the time to wait between intervals in absence of a Retry-After header. Allowed minimum is one second.
// A good starting value is 30 seconds. Note that some resources might benefit from a different value.
func (l IPFirewallRulesReplaceAllPollerResponse) PollUntilDone(ctx context.Context, freq time.Duration) (IPFirewallRulesReplaceAllResponse, error) {
	respType := IPFirewallRulesReplaceAllResponse{}
	resp, err := l.Poller.pt.PollUntilDone(ctx, freq, &respType.ReplaceAllFirewallRulesOperationResponse)
	if err != nil {
		return respType, err
	}
	respType.RawResponse = resp
	return respType, nil
}

// Resume rehydrates a IPFirewallRulesReplaceAllPollerResponse from the provided client and resume token.
func (l *IPFirewallRulesReplaceAllPollerResponse) Resume(ctx context.Context, client *IPFirewallRulesClient, token string) error {
	pt, err := armruntime.NewPollerFromResumeToken("IPFirewallRulesClient.ReplaceAll", token, client.pl, client.replaceAllHandleError)
	if err != nil {
		return err
	}
	poller := &IPFirewallRulesReplaceAllPoller{
		pt: pt,
	}
	resp, err := poller.Poll(ctx)
	if err != nil {
		return err
	}
	l.Poller = poller
	l.RawResponse = resp
	return nil
}

// IPFirewallRulesReplaceAllResponse contains the response from method IPFirewallRules.ReplaceAll.
type IPFirewallRulesReplaceAllResponse struct {
	IPFirewallRulesReplaceAllResult
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// IPFirewallRulesReplaceAllResult contains the result from method IPFirewallRules.ReplaceAll.
type IPFirewallRulesReplaceAllResult struct {
	ReplaceAllFirewallRulesOperationResponse
}

// IntegrationRuntimeAuthKeysListResponse contains the response from method IntegrationRuntimeAuthKeys.List.
type IntegrationRuntimeAuthKeysListResponse struct {
	IntegrationRuntimeAuthKeysListResult
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// IntegrationRuntimeAuthKeysListResult contains the result from method IntegrationRuntimeAuthKeys.List.
type IntegrationRuntimeAuthKeysListResult struct {
	IntegrationRuntimeAuthKeys
}

// IntegrationRuntimeAuthKeysRegenerateResponse contains the response from method IntegrationRuntimeAuthKeys.Regenerate.
type IntegrationRuntimeAuthKeysRegenerateResponse struct {
	IntegrationRuntimeAuthKeysRegenerateResult
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// IntegrationRuntimeAuthKeysRegenerateResult contains the result from method IntegrationRuntimeAuthKeys.Regenerate.
type IntegrationRuntimeAuthKeysRegenerateResult struct {
	IntegrationRuntimeAuthKeys
}

// IntegrationRuntimeConnectionInfosGetResponse contains the response from method IntegrationRuntimeConnectionInfos.Get.
type IntegrationRuntimeConnectionInfosGetResponse struct {
	IntegrationRuntimeConnectionInfosGetResult
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// IntegrationRuntimeConnectionInfosGetResult contains the result from method IntegrationRuntimeConnectionInfos.Get.
type IntegrationRuntimeConnectionInfosGetResult struct {
	IntegrationRuntimeConnectionInfo
}

// IntegrationRuntimeCredentialsSyncResponse contains the response from method IntegrationRuntimeCredentials.Sync.
type IntegrationRuntimeCredentialsSyncResponse struct {
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// IntegrationRuntimeMonitoringDataListResponse contains the response from method IntegrationRuntimeMonitoringData.List.
type IntegrationRuntimeMonitoringDataListResponse struct {
	IntegrationRuntimeMonitoringDataListResult
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// IntegrationRuntimeMonitoringDataListResult contains the result from method IntegrationRuntimeMonitoringData.List.
type IntegrationRuntimeMonitoringDataListResult struct {
	IntegrationRuntimeMonitoringData
}

// IntegrationRuntimeNodeIPAddressGetResponse contains the response from method IntegrationRuntimeNodeIPAddress.Get.
type IntegrationRuntimeNodeIPAddressGetResponse struct {
	IntegrationRuntimeNodeIPAddressGetResult
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// IntegrationRuntimeNodeIPAddressGetResult contains the result from method IntegrationRuntimeNodeIPAddress.Get.
type IntegrationRuntimeNodeIPAddressGetResult struct {
	IntegrationRuntimeNodeIPAddress
}

// IntegrationRuntimeNodesDeleteResponse contains the response from method IntegrationRuntimeNodes.Delete.
type IntegrationRuntimeNodesDeleteResponse struct {
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// IntegrationRuntimeNodesGetResponse contains the response from method IntegrationRuntimeNodes.Get.
type IntegrationRuntimeNodesGetResponse struct {
	IntegrationRuntimeNodesGetResult
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// IntegrationRuntimeNodesGetResult contains the result from method IntegrationRuntimeNodes.Get.
type IntegrationRuntimeNodesGetResult struct {
	SelfHostedIntegrationRuntimeNode
}

// IntegrationRuntimeNodesUpdateResponse contains the response from method IntegrationRuntimeNodes.Update.
type IntegrationRuntimeNodesUpdateResponse struct {
	IntegrationRuntimeNodesUpdateResult
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// IntegrationRuntimeNodesUpdateResult contains the result from method IntegrationRuntimeNodes.Update.
type IntegrationRuntimeNodesUpdateResult struct {
	SelfHostedIntegrationRuntimeNode
}

// IntegrationRuntimeObjectMetadataListResponse contains the response from method IntegrationRuntimeObjectMetadata.List.
type IntegrationRuntimeObjectMetadataListResponse struct {
	IntegrationRuntimeObjectMetadataListResult
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// IntegrationRuntimeObjectMetadataListResult contains the result from method IntegrationRuntimeObjectMetadata.List.
type IntegrationRuntimeObjectMetadataListResult struct {
	SsisObjectMetadataListResponse
}

// IntegrationRuntimeObjectMetadataRefreshPollerResponse contains the response from method IntegrationRuntimeObjectMetadata.Refresh.
type IntegrationRuntimeObjectMetadataRefreshPollerResponse struct {
	// Poller contains an initialized poller.
	Poller *IntegrationRuntimeObjectMetadataRefreshPoller

	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// PollUntilDone will poll the service endpoint until a terminal state is reached or an error is received.
// freq: the time to wait between intervals in absence of a Retry-After header. Allowed minimum is one second.
// A good starting value is 30 seconds. Note that some resources might benefit from a different value.
func (l IntegrationRuntimeObjectMetadataRefreshPollerResponse) PollUntilDone(ctx context.Context, freq time.Duration) (IntegrationRuntimeObjectMetadataRefreshResponse, error) {
	respType := IntegrationRuntimeObjectMetadataRefreshResponse{}
	resp, err := l.Poller.pt.PollUntilDone(ctx, freq, &respType.SsisObjectMetadataStatusResponse)
	if err != nil {
		return respType, err
	}
	respType.RawResponse = resp
	return respType, nil
}

// Resume rehydrates a IntegrationRuntimeObjectMetadataRefreshPollerResponse from the provided client and resume token.
func (l *IntegrationRuntimeObjectMetadataRefreshPollerResponse) Resume(ctx context.Context, client *IntegrationRuntimeObjectMetadataClient, token string) error {
	pt, err := armruntime.NewPollerFromResumeToken("IntegrationRuntimeObjectMetadataClient.Refresh", token, client.pl, client.refreshHandleError)
	if err != nil {
		return err
	}
	poller := &IntegrationRuntimeObjectMetadataRefreshPoller{
		pt: pt,
	}
	resp, err := poller.Poll(ctx)
	if err != nil {
		return err
	}
	l.Poller = poller
	l.RawResponse = resp
	return nil
}

// IntegrationRuntimeObjectMetadataRefreshResponse contains the response from method IntegrationRuntimeObjectMetadata.Refresh.
type IntegrationRuntimeObjectMetadataRefreshResponse struct {
	IntegrationRuntimeObjectMetadataRefreshResult
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// IntegrationRuntimeObjectMetadataRefreshResult contains the result from method IntegrationRuntimeObjectMetadata.Refresh.
type IntegrationRuntimeObjectMetadataRefreshResult struct {
	SsisObjectMetadataStatusResponse
}

// IntegrationRuntimeStatusGetResponse contains the response from method IntegrationRuntimeStatus.Get.
type IntegrationRuntimeStatusGetResponse struct {
	IntegrationRuntimeStatusGetResult
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// IntegrationRuntimeStatusGetResult contains the result from method IntegrationRuntimeStatus.Get.
type IntegrationRuntimeStatusGetResult struct {
	IntegrationRuntimeStatusResponse
}

// IntegrationRuntimesCreatePollerResponse contains the response from method IntegrationRuntimes.Create.
type IntegrationRuntimesCreatePollerResponse struct {
	// Poller contains an initialized poller.
	Poller *IntegrationRuntimesCreatePoller

	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// PollUntilDone will poll the service endpoint until a terminal state is reached or an error is received.
// freq: the time to wait between intervals in absence of a Retry-After header. Allowed minimum is one second.
// A good starting value is 30 seconds. Note that some resources might benefit from a different value.
func (l IntegrationRuntimesCreatePollerResponse) PollUntilDone(ctx context.Context, freq time.Duration) (IntegrationRuntimesCreateResponse, error) {
	respType := IntegrationRuntimesCreateResponse{}
	resp, err := l.Poller.pt.PollUntilDone(ctx, freq, &respType.IntegrationRuntimeResource)
	if err != nil {
		return respType, err
	}
	respType.RawResponse = resp
	return respType, nil
}

// Resume rehydrates a IntegrationRuntimesCreatePollerResponse from the provided client and resume token.
func (l *IntegrationRuntimesCreatePollerResponse) Resume(ctx context.Context, client *IntegrationRuntimesClient, token string) error {
	pt, err := armruntime.NewPollerFromResumeToken("IntegrationRuntimesClient.Create", token, client.pl, client.createHandleError)
	if err != nil {
		return err
	}
	poller := &IntegrationRuntimesCreatePoller{
		pt: pt,
	}
	resp, err := poller.Poll(ctx)
	if err != nil {
		return err
	}
	l.Poller = poller
	l.RawResponse = resp
	return nil
}

// IntegrationRuntimesCreateResponse contains the response from method IntegrationRuntimes.Create.
type IntegrationRuntimesCreateResponse struct {
	IntegrationRuntimesCreateResult
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// IntegrationRuntimesCreateResult contains the result from method IntegrationRuntimes.Create.
type IntegrationRuntimesCreateResult struct {
	IntegrationRuntimeResource
}

// IntegrationRuntimesDeletePollerResponse contains the response from method IntegrationRuntimes.Delete.
type IntegrationRuntimesDeletePollerResponse struct {
	// Poller contains an initialized poller.
	Poller *IntegrationRuntimesDeletePoller

	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// PollUntilDone will poll the service endpoint until a terminal state is reached or an error is received.
// freq: the time to wait between intervals in absence of a Retry-After header. Allowed minimum is one second.
// A good starting value is 30 seconds. Note that some resources might benefit from a different value.
func (l IntegrationRuntimesDeletePollerResponse) PollUntilDone(ctx context.Context, freq time.Duration) (IntegrationRuntimesDeleteResponse, error) {
	respType := IntegrationRuntimesDeleteResponse{}
	resp, err := l.Poller.pt.PollUntilDone(ctx, freq, nil)
	if err != nil {
		return respType, err
	}
	respType.RawResponse = resp
	return respType, nil
}

// Resume rehydrates a IntegrationRuntimesDeletePollerResponse from the provided client and resume token.
func (l *IntegrationRuntimesDeletePollerResponse) Resume(ctx context.Context, client *IntegrationRuntimesClient, token string) error {
	pt, err := armruntime.NewPollerFromResumeToken("IntegrationRuntimesClient.Delete", token, client.pl, client.deleteHandleError)
	if err != nil {
		return err
	}
	poller := &IntegrationRuntimesDeletePoller{
		pt: pt,
	}
	resp, err := poller.Poll(ctx)
	if err != nil {
		return err
	}
	l.Poller = poller
	l.RawResponse = resp
	return nil
}

// IntegrationRuntimesDeleteResponse contains the response from method IntegrationRuntimes.Delete.
type IntegrationRuntimesDeleteResponse struct {
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// IntegrationRuntimesDisableInteractiveQueryPollerResponse contains the response from method IntegrationRuntimes.DisableInteractiveQuery.
type IntegrationRuntimesDisableInteractiveQueryPollerResponse struct {
	// Poller contains an initialized poller.
	Poller *IntegrationRuntimesDisableInteractiveQueryPoller

	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// PollUntilDone will poll the service endpoint until a terminal state is reached or an error is received.
// freq: the time to wait between intervals in absence of a Retry-After header. Allowed minimum is one second.
// A good starting value is 30 seconds. Note that some resources might benefit from a different value.
func (l IntegrationRuntimesDisableInteractiveQueryPollerResponse) PollUntilDone(ctx context.Context, freq time.Duration) (IntegrationRuntimesDisableInteractiveQueryResponse, error) {
	respType := IntegrationRuntimesDisableInteractiveQueryResponse{}
	resp, err := l.Poller.pt.PollUntilDone(ctx, freq, nil)
	if err != nil {
		return respType, err
	}
	respType.RawResponse = resp
	return respType, nil
}

// Resume rehydrates a IntegrationRuntimesDisableInteractiveQueryPollerResponse from the provided client and resume token.
func (l *IntegrationRuntimesDisableInteractiveQueryPollerResponse) Resume(ctx context.Context, client *IntegrationRuntimesClient, token string) error {
	pt, err := armruntime.NewPollerFromResumeToken("IntegrationRuntimesClient.DisableInteractiveQuery", token, client.pl, client.disableInteractiveQueryHandleError)
	if err != nil {
		return err
	}
	poller := &IntegrationRuntimesDisableInteractiveQueryPoller{
		pt: pt,
	}
	resp, err := poller.Poll(ctx)
	if err != nil {
		return err
	}
	l.Poller = poller
	l.RawResponse = resp
	return nil
}

// IntegrationRuntimesDisableInteractiveQueryResponse contains the response from method IntegrationRuntimes.DisableInteractiveQuery.
type IntegrationRuntimesDisableInteractiveQueryResponse struct {
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// IntegrationRuntimesEnableInteractiveQueryPollerResponse contains the response from method IntegrationRuntimes.EnableInteractiveQuery.
type IntegrationRuntimesEnableInteractiveQueryPollerResponse struct {
	// Poller contains an initialized poller.
	Poller *IntegrationRuntimesEnableInteractiveQueryPoller

	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// PollUntilDone will poll the service endpoint until a terminal state is reached or an error is received.
// freq: the time to wait between intervals in absence of a Retry-After header. Allowed minimum is one second.
// A good starting value is 30 seconds. Note that some resources might benefit from a different value.
func (l IntegrationRuntimesEnableInteractiveQueryPollerResponse) PollUntilDone(ctx context.Context, freq time.Duration) (IntegrationRuntimesEnableInteractiveQueryResponse, error) {
	respType := IntegrationRuntimesEnableInteractiveQueryResponse{}
	resp, err := l.Poller.pt.PollUntilDone(ctx, freq, nil)
	if err != nil {
		return respType, err
	}
	respType.RawResponse = resp
	return respType, nil
}

// Resume rehydrates a IntegrationRuntimesEnableInteractiveQueryPollerResponse from the provided client and resume token.
func (l *IntegrationRuntimesEnableInteractiveQueryPollerResponse) Resume(ctx context.Context, client *IntegrationRuntimesClient, token string) error {
	pt, err := armruntime.NewPollerFromResumeToken("IntegrationRuntimesClient.EnableInteractiveQuery", token, client.pl, client.enableInteractiveQueryHandleError)
	if err != nil {
		return err
	}
	poller := &IntegrationRuntimesEnableInteractiveQueryPoller{
		pt: pt,
	}
	resp, err := poller.Poll(ctx)
	if err != nil {
		return err
	}
	l.Poller = poller
	l.RawResponse = resp
	return nil
}

// IntegrationRuntimesEnableInteractiveQueryResponse contains the response from method IntegrationRuntimes.EnableInteractiveQuery.
type IntegrationRuntimesEnableInteractiveQueryResponse struct {
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// IntegrationRuntimesGetResponse contains the response from method IntegrationRuntimes.Get.
type IntegrationRuntimesGetResponse struct {
	IntegrationRuntimesGetResult
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// IntegrationRuntimesGetResult contains the result from method IntegrationRuntimes.Get.
type IntegrationRuntimesGetResult struct {
	IntegrationRuntimeResource
}

// IntegrationRuntimesListByWorkspaceResponse contains the response from method IntegrationRuntimes.ListByWorkspace.
type IntegrationRuntimesListByWorkspaceResponse struct {
	IntegrationRuntimesListByWorkspaceResult
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// IntegrationRuntimesListByWorkspaceResult contains the result from method IntegrationRuntimes.ListByWorkspace.
type IntegrationRuntimesListByWorkspaceResult struct {
	IntegrationRuntimeListResponse
}

// IntegrationRuntimesListOutboundNetworkDependenciesEndpointsResponse contains the response from method IntegrationRuntimes.ListOutboundNetworkDependenciesEndpoints.
type IntegrationRuntimesListOutboundNetworkDependenciesEndpointsResponse struct {
	IntegrationRuntimesListOutboundNetworkDependenciesEndpointsResult
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// IntegrationRuntimesListOutboundNetworkDependenciesEndpointsResult contains the result from method IntegrationRuntimes.ListOutboundNetworkDependenciesEndpoints.
type IntegrationRuntimesListOutboundNetworkDependenciesEndpointsResult struct {
	IntegrationRuntimeOutboundNetworkDependenciesEndpointsResponse
}

// IntegrationRuntimesStartPollerResponse contains the response from method IntegrationRuntimes.Start.
type IntegrationRuntimesStartPollerResponse struct {
	// Poller contains an initialized poller.
	Poller *IntegrationRuntimesStartPoller

	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// PollUntilDone will poll the service endpoint until a terminal state is reached or an error is received.
// freq: the time to wait between intervals in absence of a Retry-After header. Allowed minimum is one second.
// A good starting value is 30 seconds. Note that some resources might benefit from a different value.
func (l IntegrationRuntimesStartPollerResponse) PollUntilDone(ctx context.Context, freq time.Duration) (IntegrationRuntimesStartResponse, error) {
	respType := IntegrationRuntimesStartResponse{}
	resp, err := l.Poller.pt.PollUntilDone(ctx, freq, &respType.IntegrationRuntimeStatusResponse)
	if err != nil {
		return respType, err
	}
	respType.RawResponse = resp
	return respType, nil
}

// Resume rehydrates a IntegrationRuntimesStartPollerResponse from the provided client and resume token.
func (l *IntegrationRuntimesStartPollerResponse) Resume(ctx context.Context, client *IntegrationRuntimesClient, token string) error {
	pt, err := armruntime.NewPollerFromResumeToken("IntegrationRuntimesClient.Start", token, client.pl, client.startHandleError)
	if err != nil {
		return err
	}
	poller := &IntegrationRuntimesStartPoller{
		pt: pt,
	}
	resp, err := poller.Poll(ctx)
	if err != nil {
		return err
	}
	l.Poller = poller
	l.RawResponse = resp
	return nil
}

// IntegrationRuntimesStartResponse contains the response from method IntegrationRuntimes.Start.
type IntegrationRuntimesStartResponse struct {
	IntegrationRuntimesStartResult
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// IntegrationRuntimesStartResult contains the result from method IntegrationRuntimes.Start.
type IntegrationRuntimesStartResult struct {
	IntegrationRuntimeStatusResponse
}

// IntegrationRuntimesStopPollerResponse contains the response from method IntegrationRuntimes.Stop.
type IntegrationRuntimesStopPollerResponse struct {
	// Poller contains an initialized poller.
	Poller *IntegrationRuntimesStopPoller

	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// PollUntilDone will poll the service endpoint until a terminal state is reached or an error is received.
// freq: the time to wait between intervals in absence of a Retry-After header. Allowed minimum is one second.
// A good starting value is 30 seconds. Note that some resources might benefit from a different value.
func (l IntegrationRuntimesStopPollerResponse) PollUntilDone(ctx context.Context, freq time.Duration) (IntegrationRuntimesStopResponse, error) {
	respType := IntegrationRuntimesStopResponse{}
	resp, err := l.Poller.pt.PollUntilDone(ctx, freq, nil)
	if err != nil {
		return respType, err
	}
	respType.RawResponse = resp
	return respType, nil
}

// Resume rehydrates a IntegrationRuntimesStopPollerResponse from the provided client and resume token.
func (l *IntegrationRuntimesStopPollerResponse) Resume(ctx context.Context, client *IntegrationRuntimesClient, token string) error {
	pt, err := armruntime.NewPollerFromResumeToken("IntegrationRuntimesClient.Stop", token, client.pl, client.stopHandleError)
	if err != nil {
		return err
	}
	poller := &IntegrationRuntimesStopPoller{
		pt: pt,
	}
	resp, err := poller.Poll(ctx)
	if err != nil {
		return err
	}
	l.Poller = poller
	l.RawResponse = resp
	return nil
}

// IntegrationRuntimesStopResponse contains the response from method IntegrationRuntimes.Stop.
type IntegrationRuntimesStopResponse struct {
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// IntegrationRuntimesUpdateResponse contains the response from method IntegrationRuntimes.Update.
type IntegrationRuntimesUpdateResponse struct {
	IntegrationRuntimesUpdateResult
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// IntegrationRuntimesUpdateResult contains the result from method IntegrationRuntimes.Update.
type IntegrationRuntimesUpdateResult struct {
	IntegrationRuntimeResource
}

// IntegrationRuntimesUpgradeResponse contains the response from method IntegrationRuntimes.Upgrade.
type IntegrationRuntimesUpgradeResponse struct {
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// KeysCreateOrUpdateResponse contains the response from method Keys.CreateOrUpdate.
type KeysCreateOrUpdateResponse struct {
	KeysCreateOrUpdateResult
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// KeysCreateOrUpdateResult contains the result from method Keys.CreateOrUpdate.
type KeysCreateOrUpdateResult struct {
	Key
}

// KeysDeleteResponse contains the response from method Keys.Delete.
type KeysDeleteResponse struct {
	KeysDeleteResult
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// KeysDeleteResult contains the result from method Keys.Delete.
type KeysDeleteResult struct {
	Key
}

// KeysGetResponse contains the response from method Keys.Get.
type KeysGetResponse struct {
	KeysGetResult
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// KeysGetResult contains the result from method Keys.Get.
type KeysGetResult struct {
	Key
}

// KeysListByWorkspaceResponse contains the response from method Keys.ListByWorkspace.
type KeysListByWorkspaceResponse struct {
	KeysListByWorkspaceResult
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// KeysListByWorkspaceResult contains the result from method Keys.ListByWorkspace.
type KeysListByWorkspaceResult struct {
	KeyInfoListResult
}

// KustoOperationsListResponse contains the response from method KustoOperations.List.
type KustoOperationsListResponse struct {
	KustoOperationsListResult
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// KustoOperationsListResult contains the result from method KustoOperations.List.
type KustoOperationsListResult struct {
	OperationListResult
}

// KustoPoolAttachedDatabaseConfigurationsCreateOrUpdatePollerResponse contains the response from method KustoPoolAttachedDatabaseConfigurations.CreateOrUpdate.
type KustoPoolAttachedDatabaseConfigurationsCreateOrUpdatePollerResponse struct {
	// Poller contains an initialized poller.
	Poller *KustoPoolAttachedDatabaseConfigurationsCreateOrUpdatePoller

	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// PollUntilDone will poll the service endpoint until a terminal state is reached or an error is received.
// freq: the time to wait between intervals in absence of a Retry-After header. Allowed minimum is one second.
// A good starting value is 30 seconds. Note that some resources might benefit from a different value.
func (l KustoPoolAttachedDatabaseConfigurationsCreateOrUpdatePollerResponse) PollUntilDone(ctx context.Context, freq time.Duration) (KustoPoolAttachedDatabaseConfigurationsCreateOrUpdateResponse, error) {
	respType := KustoPoolAttachedDatabaseConfigurationsCreateOrUpdateResponse{}
	resp, err := l.Poller.pt.PollUntilDone(ctx, freq, &respType.AttachedDatabaseConfiguration)
	if err != nil {
		return respType, err
	}
	respType.RawResponse = resp
	return respType, nil
}

// Resume rehydrates a KustoPoolAttachedDatabaseConfigurationsCreateOrUpdatePollerResponse from the provided client and resume token.
func (l *KustoPoolAttachedDatabaseConfigurationsCreateOrUpdatePollerResponse) Resume(ctx context.Context, client *KustoPoolAttachedDatabaseConfigurationsClient, token string) error {
	pt, err := armruntime.NewPollerFromResumeToken("KustoPoolAttachedDatabaseConfigurationsClient.CreateOrUpdate", token, client.pl, client.createOrUpdateHandleError)
	if err != nil {
		return err
	}
	poller := &KustoPoolAttachedDatabaseConfigurationsCreateOrUpdatePoller{
		pt: pt,
	}
	resp, err := poller.Poll(ctx)
	if err != nil {
		return err
	}
	l.Poller = poller
	l.RawResponse = resp
	return nil
}

// KustoPoolAttachedDatabaseConfigurationsCreateOrUpdateResponse contains the response from method KustoPoolAttachedDatabaseConfigurations.CreateOrUpdate.
type KustoPoolAttachedDatabaseConfigurationsCreateOrUpdateResponse struct {
	KustoPoolAttachedDatabaseConfigurationsCreateOrUpdateResult
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// KustoPoolAttachedDatabaseConfigurationsCreateOrUpdateResult contains the result from method KustoPoolAttachedDatabaseConfigurations.CreateOrUpdate.
type KustoPoolAttachedDatabaseConfigurationsCreateOrUpdateResult struct {
	AttachedDatabaseConfiguration
}

// KustoPoolAttachedDatabaseConfigurationsDeletePollerResponse contains the response from method KustoPoolAttachedDatabaseConfigurations.Delete.
type KustoPoolAttachedDatabaseConfigurationsDeletePollerResponse struct {
	// Poller contains an initialized poller.
	Poller *KustoPoolAttachedDatabaseConfigurationsDeletePoller

	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// PollUntilDone will poll the service endpoint until a terminal state is reached or an error is received.
// freq: the time to wait between intervals in absence of a Retry-After header. Allowed minimum is one second.
// A good starting value is 30 seconds. Note that some resources might benefit from a different value.
func (l KustoPoolAttachedDatabaseConfigurationsDeletePollerResponse) PollUntilDone(ctx context.Context, freq time.Duration) (KustoPoolAttachedDatabaseConfigurationsDeleteResponse, error) {
	respType := KustoPoolAttachedDatabaseConfigurationsDeleteResponse{}
	resp, err := l.Poller.pt.PollUntilDone(ctx, freq, nil)
	if err != nil {
		return respType, err
	}
	respType.RawResponse = resp
	return respType, nil
}

// Resume rehydrates a KustoPoolAttachedDatabaseConfigurationsDeletePollerResponse from the provided client and resume token.
func (l *KustoPoolAttachedDatabaseConfigurationsDeletePollerResponse) Resume(ctx context.Context, client *KustoPoolAttachedDatabaseConfigurationsClient, token string) error {
	pt, err := armruntime.NewPollerFromResumeToken("KustoPoolAttachedDatabaseConfigurationsClient.Delete", token, client.pl, client.deleteHandleError)
	if err != nil {
		return err
	}
	poller := &KustoPoolAttachedDatabaseConfigurationsDeletePoller{
		pt: pt,
	}
	resp, err := poller.Poll(ctx)
	if err != nil {
		return err
	}
	l.Poller = poller
	l.RawResponse = resp
	return nil
}

// KustoPoolAttachedDatabaseConfigurationsDeleteResponse contains the response from method KustoPoolAttachedDatabaseConfigurations.Delete.
type KustoPoolAttachedDatabaseConfigurationsDeleteResponse struct {
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// KustoPoolAttachedDatabaseConfigurationsGetResponse contains the response from method KustoPoolAttachedDatabaseConfigurations.Get.
type KustoPoolAttachedDatabaseConfigurationsGetResponse struct {
	KustoPoolAttachedDatabaseConfigurationsGetResult
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// KustoPoolAttachedDatabaseConfigurationsGetResult contains the result from method KustoPoolAttachedDatabaseConfigurations.Get.
type KustoPoolAttachedDatabaseConfigurationsGetResult struct {
	AttachedDatabaseConfiguration
}

// KustoPoolAttachedDatabaseConfigurationsListByKustoPoolResponse contains the response from method KustoPoolAttachedDatabaseConfigurations.ListByKustoPool.
type KustoPoolAttachedDatabaseConfigurationsListByKustoPoolResponse struct {
	KustoPoolAttachedDatabaseConfigurationsListByKustoPoolResult
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// KustoPoolAttachedDatabaseConfigurationsListByKustoPoolResult contains the result from method KustoPoolAttachedDatabaseConfigurations.ListByKustoPool.
type KustoPoolAttachedDatabaseConfigurationsListByKustoPoolResult struct {
	AttachedDatabaseConfigurationListResult
}

// KustoPoolChildResourceCheckNameAvailabilityResponse contains the response from method KustoPoolChildResource.CheckNameAvailability.
type KustoPoolChildResourceCheckNameAvailabilityResponse struct {
	KustoPoolChildResourceCheckNameAvailabilityResult
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// KustoPoolChildResourceCheckNameAvailabilityResult contains the result from method KustoPoolChildResource.CheckNameAvailability.
type KustoPoolChildResourceCheckNameAvailabilityResult struct {
	CheckNameResult
}

// KustoPoolDataConnectionsCheckNameAvailabilityResponse contains the response from method KustoPoolDataConnections.CheckNameAvailability.
type KustoPoolDataConnectionsCheckNameAvailabilityResponse struct {
	KustoPoolDataConnectionsCheckNameAvailabilityResult
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// KustoPoolDataConnectionsCheckNameAvailabilityResult contains the result from method KustoPoolDataConnections.CheckNameAvailability.
type KustoPoolDataConnectionsCheckNameAvailabilityResult struct {
	CheckNameResult
}

// KustoPoolDataConnectionsCreateOrUpdatePollerResponse contains the response from method KustoPoolDataConnections.CreateOrUpdate.
type KustoPoolDataConnectionsCreateOrUpdatePollerResponse struct {
	// Poller contains an initialized poller.
	Poller *KustoPoolDataConnectionsCreateOrUpdatePoller

	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// PollUntilDone will poll the service endpoint until a terminal state is reached or an error is received.
// freq: the time to wait between intervals in absence of a Retry-After header. Allowed minimum is one second.
// A good starting value is 30 seconds. Note that some resources might benefit from a different value.
func (l KustoPoolDataConnectionsCreateOrUpdatePollerResponse) PollUntilDone(ctx context.Context, freq time.Duration) (KustoPoolDataConnectionsCreateOrUpdateResponse, error) {
	respType := KustoPoolDataConnectionsCreateOrUpdateResponse{}
	resp, err := l.Poller.pt.PollUntilDone(ctx, freq, &respType.DataConnectionClassification)
	if err != nil {
		return respType, err
	}
	respType.RawResponse = resp
	return respType, nil
}

// Resume rehydrates a KustoPoolDataConnectionsCreateOrUpdatePollerResponse from the provided client and resume token.
func (l *KustoPoolDataConnectionsCreateOrUpdatePollerResponse) Resume(ctx context.Context, client *KustoPoolDataConnectionsClient, token string) error {
	pt, err := armruntime.NewPollerFromResumeToken("KustoPoolDataConnectionsClient.CreateOrUpdate", token, client.pl, client.createOrUpdateHandleError)
	if err != nil {
		return err
	}
	poller := &KustoPoolDataConnectionsCreateOrUpdatePoller{
		pt: pt,
	}
	resp, err := poller.Poll(ctx)
	if err != nil {
		return err
	}
	l.Poller = poller
	l.RawResponse = resp
	return nil
}

// KustoPoolDataConnectionsCreateOrUpdateResponse contains the response from method KustoPoolDataConnections.CreateOrUpdate.
type KustoPoolDataConnectionsCreateOrUpdateResponse struct {
	KustoPoolDataConnectionsCreateOrUpdateResult
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// KustoPoolDataConnectionsCreateOrUpdateResult contains the result from method KustoPoolDataConnections.CreateOrUpdate.
type KustoPoolDataConnectionsCreateOrUpdateResult struct {
	DataConnectionClassification
}

// UnmarshalJSON implements the json.Unmarshaller interface for type KustoPoolDataConnectionsCreateOrUpdateResult.
func (k *KustoPoolDataConnectionsCreateOrUpdateResult) UnmarshalJSON(data []byte) error {
	res, err := unmarshalDataConnectionClassification(data)
	if err != nil {
		return err
	}
	k.DataConnectionClassification = res
	return nil
}

// KustoPoolDataConnectionsDataConnectionValidationPollerResponse contains the response from method KustoPoolDataConnections.DataConnectionValidation.
type KustoPoolDataConnectionsDataConnectionValidationPollerResponse struct {
	// Poller contains an initialized poller.
	Poller *KustoPoolDataConnectionsDataConnectionValidationPoller

	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// PollUntilDone will poll the service endpoint until a terminal state is reached or an error is received.
// freq: the time to wait between intervals in absence of a Retry-After header. Allowed minimum is one second.
// A good starting value is 30 seconds. Note that some resources might benefit from a different value.
func (l KustoPoolDataConnectionsDataConnectionValidationPollerResponse) PollUntilDone(ctx context.Context, freq time.Duration) (KustoPoolDataConnectionsDataConnectionValidationResponse, error) {
	respType := KustoPoolDataConnectionsDataConnectionValidationResponse{}
	resp, err := l.Poller.pt.PollUntilDone(ctx, freq, &respType.DataConnectionValidationListResult)
	if err != nil {
		return respType, err
	}
	respType.RawResponse = resp
	return respType, nil
}

// Resume rehydrates a KustoPoolDataConnectionsDataConnectionValidationPollerResponse from the provided client and resume token.
func (l *KustoPoolDataConnectionsDataConnectionValidationPollerResponse) Resume(ctx context.Context, client *KustoPoolDataConnectionsClient, token string) error {
	pt, err := armruntime.NewPollerFromResumeToken("KustoPoolDataConnectionsClient.DataConnectionValidation", token, client.pl, client.dataConnectionValidationHandleError)
	if err != nil {
		return err
	}
	poller := &KustoPoolDataConnectionsDataConnectionValidationPoller{
		pt: pt,
	}
	resp, err := poller.Poll(ctx)
	if err != nil {
		return err
	}
	l.Poller = poller
	l.RawResponse = resp
	return nil
}

// KustoPoolDataConnectionsDataConnectionValidationResponse contains the response from method KustoPoolDataConnections.DataConnectionValidation.
type KustoPoolDataConnectionsDataConnectionValidationResponse struct {
	KustoPoolDataConnectionsDataConnectionValidationResult
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// KustoPoolDataConnectionsDataConnectionValidationResult contains the result from method KustoPoolDataConnections.DataConnectionValidation.
type KustoPoolDataConnectionsDataConnectionValidationResult struct {
	DataConnectionValidationListResult
}

// KustoPoolDataConnectionsDeletePollerResponse contains the response from method KustoPoolDataConnections.Delete.
type KustoPoolDataConnectionsDeletePollerResponse struct {
	// Poller contains an initialized poller.
	Poller *KustoPoolDataConnectionsDeletePoller

	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// PollUntilDone will poll the service endpoint until a terminal state is reached or an error is received.
// freq: the time to wait between intervals in absence of a Retry-After header. Allowed minimum is one second.
// A good starting value is 30 seconds. Note that some resources might benefit from a different value.
func (l KustoPoolDataConnectionsDeletePollerResponse) PollUntilDone(ctx context.Context, freq time.Duration) (KustoPoolDataConnectionsDeleteResponse, error) {
	respType := KustoPoolDataConnectionsDeleteResponse{}
	resp, err := l.Poller.pt.PollUntilDone(ctx, freq, nil)
	if err != nil {
		return respType, err
	}
	respType.RawResponse = resp
	return respType, nil
}

// Resume rehydrates a KustoPoolDataConnectionsDeletePollerResponse from the provided client and resume token.
func (l *KustoPoolDataConnectionsDeletePollerResponse) Resume(ctx context.Context, client *KustoPoolDataConnectionsClient, token string) error {
	pt, err := armruntime.NewPollerFromResumeToken("KustoPoolDataConnectionsClient.Delete", token, client.pl, client.deleteHandleError)
	if err != nil {
		return err
	}
	poller := &KustoPoolDataConnectionsDeletePoller{
		pt: pt,
	}
	resp, err := poller.Poll(ctx)
	if err != nil {
		return err
	}
	l.Poller = poller
	l.RawResponse = resp
	return nil
}

// KustoPoolDataConnectionsDeleteResponse contains the response from method KustoPoolDataConnections.Delete.
type KustoPoolDataConnectionsDeleteResponse struct {
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// KustoPoolDataConnectionsGetResponse contains the response from method KustoPoolDataConnections.Get.
type KustoPoolDataConnectionsGetResponse struct {
	KustoPoolDataConnectionsGetResult
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// KustoPoolDataConnectionsGetResult contains the result from method KustoPoolDataConnections.Get.
type KustoPoolDataConnectionsGetResult struct {
	DataConnectionClassification
}

// UnmarshalJSON implements the json.Unmarshaller interface for type KustoPoolDataConnectionsGetResult.
func (k *KustoPoolDataConnectionsGetResult) UnmarshalJSON(data []byte) error {
	res, err := unmarshalDataConnectionClassification(data)
	if err != nil {
		return err
	}
	k.DataConnectionClassification = res
	return nil
}

// KustoPoolDataConnectionsListByDatabaseResponse contains the response from method KustoPoolDataConnections.ListByDatabase.
type KustoPoolDataConnectionsListByDatabaseResponse struct {
	KustoPoolDataConnectionsListByDatabaseResult
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// KustoPoolDataConnectionsListByDatabaseResult contains the result from method KustoPoolDataConnections.ListByDatabase.
type KustoPoolDataConnectionsListByDatabaseResult struct {
	DataConnectionListResult
}

// KustoPoolDataConnectionsUpdatePollerResponse contains the response from method KustoPoolDataConnections.Update.
type KustoPoolDataConnectionsUpdatePollerResponse struct {
	// Poller contains an initialized poller.
	Poller *KustoPoolDataConnectionsUpdatePoller

	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// PollUntilDone will poll the service endpoint until a terminal state is reached or an error is received.
// freq: the time to wait between intervals in absence of a Retry-After header. Allowed minimum is one second.
// A good starting value is 30 seconds. Note that some resources might benefit from a different value.
func (l KustoPoolDataConnectionsUpdatePollerResponse) PollUntilDone(ctx context.Context, freq time.Duration) (KustoPoolDataConnectionsUpdateResponse, error) {
	respType := KustoPoolDataConnectionsUpdateResponse{}
	resp, err := l.Poller.pt.PollUntilDone(ctx, freq, &respType.DataConnectionClassification)
	if err != nil {
		return respType, err
	}
	respType.RawResponse = resp
	return respType, nil
}

// Resume rehydrates a KustoPoolDataConnectionsUpdatePollerResponse from the provided client and resume token.
func (l *KustoPoolDataConnectionsUpdatePollerResponse) Resume(ctx context.Context, client *KustoPoolDataConnectionsClient, token string) error {
	pt, err := armruntime.NewPollerFromResumeToken("KustoPoolDataConnectionsClient.Update", token, client.pl, client.updateHandleError)
	if err != nil {
		return err
	}
	poller := &KustoPoolDataConnectionsUpdatePoller{
		pt: pt,
	}
	resp, err := poller.Poll(ctx)
	if err != nil {
		return err
	}
	l.Poller = poller
	l.RawResponse = resp
	return nil
}

// KustoPoolDataConnectionsUpdateResponse contains the response from method KustoPoolDataConnections.Update.
type KustoPoolDataConnectionsUpdateResponse struct {
	KustoPoolDataConnectionsUpdateResult
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// KustoPoolDataConnectionsUpdateResult contains the result from method KustoPoolDataConnections.Update.
type KustoPoolDataConnectionsUpdateResult struct {
	DataConnectionClassification
}

// UnmarshalJSON implements the json.Unmarshaller interface for type KustoPoolDataConnectionsUpdateResult.
func (k *KustoPoolDataConnectionsUpdateResult) UnmarshalJSON(data []byte) error {
	res, err := unmarshalDataConnectionClassification(data)
	if err != nil {
		return err
	}
	k.DataConnectionClassification = res
	return nil
}

// KustoPoolDatabasePrincipalAssignmentsCheckNameAvailabilityResponse contains the response from method KustoPoolDatabasePrincipalAssignments.CheckNameAvailability.
type KustoPoolDatabasePrincipalAssignmentsCheckNameAvailabilityResponse struct {
	KustoPoolDatabasePrincipalAssignmentsCheckNameAvailabilityResult
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// KustoPoolDatabasePrincipalAssignmentsCheckNameAvailabilityResult contains the result from method KustoPoolDatabasePrincipalAssignments.CheckNameAvailability.
type KustoPoolDatabasePrincipalAssignmentsCheckNameAvailabilityResult struct {
	CheckNameResult
}

// KustoPoolDatabasePrincipalAssignmentsCreateOrUpdatePollerResponse contains the response from method KustoPoolDatabasePrincipalAssignments.CreateOrUpdate.
type KustoPoolDatabasePrincipalAssignmentsCreateOrUpdatePollerResponse struct {
	// Poller contains an initialized poller.
	Poller *KustoPoolDatabasePrincipalAssignmentsCreateOrUpdatePoller

	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// PollUntilDone will poll the service endpoint until a terminal state is reached or an error is received.
// freq: the time to wait between intervals in absence of a Retry-After header. Allowed minimum is one second.
// A good starting value is 30 seconds. Note that some resources might benefit from a different value.
func (l KustoPoolDatabasePrincipalAssignmentsCreateOrUpdatePollerResponse) PollUntilDone(ctx context.Context, freq time.Duration) (KustoPoolDatabasePrincipalAssignmentsCreateOrUpdateResponse, error) {
	respType := KustoPoolDatabasePrincipalAssignmentsCreateOrUpdateResponse{}
	resp, err := l.Poller.pt.PollUntilDone(ctx, freq, &respType.DatabasePrincipalAssignment)
	if err != nil {
		return respType, err
	}
	respType.RawResponse = resp
	return respType, nil
}

// Resume rehydrates a KustoPoolDatabasePrincipalAssignmentsCreateOrUpdatePollerResponse from the provided client and resume token.
func (l *KustoPoolDatabasePrincipalAssignmentsCreateOrUpdatePollerResponse) Resume(ctx context.Context, client *KustoPoolDatabasePrincipalAssignmentsClient, token string) error {
	pt, err := armruntime.NewPollerFromResumeToken("KustoPoolDatabasePrincipalAssignmentsClient.CreateOrUpdate", token, client.pl, client.createOrUpdateHandleError)
	if err != nil {
		return err
	}
	poller := &KustoPoolDatabasePrincipalAssignmentsCreateOrUpdatePoller{
		pt: pt,
	}
	resp, err := poller.Poll(ctx)
	if err != nil {
		return err
	}
	l.Poller = poller
	l.RawResponse = resp
	return nil
}

// KustoPoolDatabasePrincipalAssignmentsCreateOrUpdateResponse contains the response from method KustoPoolDatabasePrincipalAssignments.CreateOrUpdate.
type KustoPoolDatabasePrincipalAssignmentsCreateOrUpdateResponse struct {
	KustoPoolDatabasePrincipalAssignmentsCreateOrUpdateResult
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// KustoPoolDatabasePrincipalAssignmentsCreateOrUpdateResult contains the result from method KustoPoolDatabasePrincipalAssignments.CreateOrUpdate.
type KustoPoolDatabasePrincipalAssignmentsCreateOrUpdateResult struct {
	DatabasePrincipalAssignment
}

// KustoPoolDatabasePrincipalAssignmentsDeletePollerResponse contains the response from method KustoPoolDatabasePrincipalAssignments.Delete.
type KustoPoolDatabasePrincipalAssignmentsDeletePollerResponse struct {
	// Poller contains an initialized poller.
	Poller *KustoPoolDatabasePrincipalAssignmentsDeletePoller

	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// PollUntilDone will poll the service endpoint until a terminal state is reached or an error is received.
// freq: the time to wait between intervals in absence of a Retry-After header. Allowed minimum is one second.
// A good starting value is 30 seconds. Note that some resources might benefit from a different value.
func (l KustoPoolDatabasePrincipalAssignmentsDeletePollerResponse) PollUntilDone(ctx context.Context, freq time.Duration) (KustoPoolDatabasePrincipalAssignmentsDeleteResponse, error) {
	respType := KustoPoolDatabasePrincipalAssignmentsDeleteResponse{}
	resp, err := l.Poller.pt.PollUntilDone(ctx, freq, nil)
	if err != nil {
		return respType, err
	}
	respType.RawResponse = resp
	return respType, nil
}

// Resume rehydrates a KustoPoolDatabasePrincipalAssignmentsDeletePollerResponse from the provided client and resume token.
func (l *KustoPoolDatabasePrincipalAssignmentsDeletePollerResponse) Resume(ctx context.Context, client *KustoPoolDatabasePrincipalAssignmentsClient, token string) error {
	pt, err := armruntime.NewPollerFromResumeToken("KustoPoolDatabasePrincipalAssignmentsClient.Delete", token, client.pl, client.deleteHandleError)
	if err != nil {
		return err
	}
	poller := &KustoPoolDatabasePrincipalAssignmentsDeletePoller{
		pt: pt,
	}
	resp, err := poller.Poll(ctx)
	if err != nil {
		return err
	}
	l.Poller = poller
	l.RawResponse = resp
	return nil
}

// KustoPoolDatabasePrincipalAssignmentsDeleteResponse contains the response from method KustoPoolDatabasePrincipalAssignments.Delete.
type KustoPoolDatabasePrincipalAssignmentsDeleteResponse struct {
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// KustoPoolDatabasePrincipalAssignmentsGetResponse contains the response from method KustoPoolDatabasePrincipalAssignments.Get.
type KustoPoolDatabasePrincipalAssignmentsGetResponse struct {
	KustoPoolDatabasePrincipalAssignmentsGetResult
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// KustoPoolDatabasePrincipalAssignmentsGetResult contains the result from method KustoPoolDatabasePrincipalAssignments.Get.
type KustoPoolDatabasePrincipalAssignmentsGetResult struct {
	DatabasePrincipalAssignment
}

// KustoPoolDatabasePrincipalAssignmentsListResponse contains the response from method KustoPoolDatabasePrincipalAssignments.List.
type KustoPoolDatabasePrincipalAssignmentsListResponse struct {
	KustoPoolDatabasePrincipalAssignmentsListResult
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// KustoPoolDatabasePrincipalAssignmentsListResult contains the result from method KustoPoolDatabasePrincipalAssignments.List.
type KustoPoolDatabasePrincipalAssignmentsListResult struct {
	DatabasePrincipalAssignmentListResult
}

// KustoPoolDatabasesCreateOrUpdatePollerResponse contains the response from method KustoPoolDatabases.CreateOrUpdate.
type KustoPoolDatabasesCreateOrUpdatePollerResponse struct {
	// Poller contains an initialized poller.
	Poller *KustoPoolDatabasesCreateOrUpdatePoller

	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// PollUntilDone will poll the service endpoint until a terminal state is reached or an error is received.
// freq: the time to wait between intervals in absence of a Retry-After header. Allowed minimum is one second.
// A good starting value is 30 seconds. Note that some resources might benefit from a different value.
func (l KustoPoolDatabasesCreateOrUpdatePollerResponse) PollUntilDone(ctx context.Context, freq time.Duration) (KustoPoolDatabasesCreateOrUpdateResponse, error) {
	respType := KustoPoolDatabasesCreateOrUpdateResponse{}
	resp, err := l.Poller.pt.PollUntilDone(ctx, freq, &respType.DatabaseClassification)
	if err != nil {
		return respType, err
	}
	respType.RawResponse = resp
	return respType, nil
}

// Resume rehydrates a KustoPoolDatabasesCreateOrUpdatePollerResponse from the provided client and resume token.
func (l *KustoPoolDatabasesCreateOrUpdatePollerResponse) Resume(ctx context.Context, client *KustoPoolDatabasesClient, token string) error {
	pt, err := armruntime.NewPollerFromResumeToken("KustoPoolDatabasesClient.CreateOrUpdate", token, client.pl, client.createOrUpdateHandleError)
	if err != nil {
		return err
	}
	poller := &KustoPoolDatabasesCreateOrUpdatePoller{
		pt: pt,
	}
	resp, err := poller.Poll(ctx)
	if err != nil {
		return err
	}
	l.Poller = poller
	l.RawResponse = resp
	return nil
}

// KustoPoolDatabasesCreateOrUpdateResponse contains the response from method KustoPoolDatabases.CreateOrUpdate.
type KustoPoolDatabasesCreateOrUpdateResponse struct {
	KustoPoolDatabasesCreateOrUpdateResult
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// KustoPoolDatabasesCreateOrUpdateResult contains the result from method KustoPoolDatabases.CreateOrUpdate.
type KustoPoolDatabasesCreateOrUpdateResult struct {
	DatabaseClassification
}

// UnmarshalJSON implements the json.Unmarshaller interface for type KustoPoolDatabasesCreateOrUpdateResult.
func (k *KustoPoolDatabasesCreateOrUpdateResult) UnmarshalJSON(data []byte) error {
	res, err := unmarshalDatabaseClassification(data)
	if err != nil {
		return err
	}
	k.DatabaseClassification = res
	return nil
}

// KustoPoolDatabasesDeletePollerResponse contains the response from method KustoPoolDatabases.Delete.
type KustoPoolDatabasesDeletePollerResponse struct {
	// Poller contains an initialized poller.
	Poller *KustoPoolDatabasesDeletePoller

	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// PollUntilDone will poll the service endpoint until a terminal state is reached or an error is received.
// freq: the time to wait between intervals in absence of a Retry-After header. Allowed minimum is one second.
// A good starting value is 30 seconds. Note that some resources might benefit from a different value.
func (l KustoPoolDatabasesDeletePollerResponse) PollUntilDone(ctx context.Context, freq time.Duration) (KustoPoolDatabasesDeleteResponse, error) {
	respType := KustoPoolDatabasesDeleteResponse{}
	resp, err := l.Poller.pt.PollUntilDone(ctx, freq, nil)
	if err != nil {
		return respType, err
	}
	respType.RawResponse = resp
	return respType, nil
}

// Resume rehydrates a KustoPoolDatabasesDeletePollerResponse from the provided client and resume token.
func (l *KustoPoolDatabasesDeletePollerResponse) Resume(ctx context.Context, client *KustoPoolDatabasesClient, token string) error {
	pt, err := armruntime.NewPollerFromResumeToken("KustoPoolDatabasesClient.Delete", token, client.pl, client.deleteHandleError)
	if err != nil {
		return err
	}
	poller := &KustoPoolDatabasesDeletePoller{
		pt: pt,
	}
	resp, err := poller.Poll(ctx)
	if err != nil {
		return err
	}
	l.Poller = poller
	l.RawResponse = resp
	return nil
}

// KustoPoolDatabasesDeleteResponse contains the response from method KustoPoolDatabases.Delete.
type KustoPoolDatabasesDeleteResponse struct {
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// KustoPoolDatabasesGetResponse contains the response from method KustoPoolDatabases.Get.
type KustoPoolDatabasesGetResponse struct {
	KustoPoolDatabasesGetResult
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// KustoPoolDatabasesGetResult contains the result from method KustoPoolDatabases.Get.
type KustoPoolDatabasesGetResult struct {
	DatabaseClassification
}

// UnmarshalJSON implements the json.Unmarshaller interface for type KustoPoolDatabasesGetResult.
func (k *KustoPoolDatabasesGetResult) UnmarshalJSON(data []byte) error {
	res, err := unmarshalDatabaseClassification(data)
	if err != nil {
		return err
	}
	k.DatabaseClassification = res
	return nil
}

// KustoPoolDatabasesListByKustoPoolResponse contains the response from method KustoPoolDatabases.ListByKustoPool.
type KustoPoolDatabasesListByKustoPoolResponse struct {
	KustoPoolDatabasesListByKustoPoolResult
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// KustoPoolDatabasesListByKustoPoolResult contains the result from method KustoPoolDatabases.ListByKustoPool.
type KustoPoolDatabasesListByKustoPoolResult struct {
	DatabaseListResult
}

// KustoPoolDatabasesUpdatePollerResponse contains the response from method KustoPoolDatabases.Update.
type KustoPoolDatabasesUpdatePollerResponse struct {
	// Poller contains an initialized poller.
	Poller *KustoPoolDatabasesUpdatePoller

	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// PollUntilDone will poll the service endpoint until a terminal state is reached or an error is received.
// freq: the time to wait between intervals in absence of a Retry-After header. Allowed minimum is one second.
// A good starting value is 30 seconds. Note that some resources might benefit from a different value.
func (l KustoPoolDatabasesUpdatePollerResponse) PollUntilDone(ctx context.Context, freq time.Duration) (KustoPoolDatabasesUpdateResponse, error) {
	respType := KustoPoolDatabasesUpdateResponse{}
	resp, err := l.Poller.pt.PollUntilDone(ctx, freq, &respType.DatabaseClassification)
	if err != nil {
		return respType, err
	}
	respType.RawResponse = resp
	return respType, nil
}

// Resume rehydrates a KustoPoolDatabasesUpdatePollerResponse from the provided client and resume token.
func (l *KustoPoolDatabasesUpdatePollerResponse) Resume(ctx context.Context, client *KustoPoolDatabasesClient, token string) error {
	pt, err := armruntime.NewPollerFromResumeToken("KustoPoolDatabasesClient.Update", token, client.pl, client.updateHandleError)
	if err != nil {
		return err
	}
	poller := &KustoPoolDatabasesUpdatePoller{
		pt: pt,
	}
	resp, err := poller.Poll(ctx)
	if err != nil {
		return err
	}
	l.Poller = poller
	l.RawResponse = resp
	return nil
}

// KustoPoolDatabasesUpdateResponse contains the response from method KustoPoolDatabases.Update.
type KustoPoolDatabasesUpdateResponse struct {
	KustoPoolDatabasesUpdateResult
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// KustoPoolDatabasesUpdateResult contains the result from method KustoPoolDatabases.Update.
type KustoPoolDatabasesUpdateResult struct {
	DatabaseClassification
}

// UnmarshalJSON implements the json.Unmarshaller interface for type KustoPoolDatabasesUpdateResult.
func (k *KustoPoolDatabasesUpdateResult) UnmarshalJSON(data []byte) error {
	res, err := unmarshalDatabaseClassification(data)
	if err != nil {
		return err
	}
	k.DatabaseClassification = res
	return nil
}

// KustoPoolPrincipalAssignmentsCheckNameAvailabilityResponse contains the response from method KustoPoolPrincipalAssignments.CheckNameAvailability.
type KustoPoolPrincipalAssignmentsCheckNameAvailabilityResponse struct {
	KustoPoolPrincipalAssignmentsCheckNameAvailabilityResult
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// KustoPoolPrincipalAssignmentsCheckNameAvailabilityResult contains the result from method KustoPoolPrincipalAssignments.CheckNameAvailability.
type KustoPoolPrincipalAssignmentsCheckNameAvailabilityResult struct {
	CheckNameResult
}

// KustoPoolPrincipalAssignmentsCreateOrUpdatePollerResponse contains the response from method KustoPoolPrincipalAssignments.CreateOrUpdate.
type KustoPoolPrincipalAssignmentsCreateOrUpdatePollerResponse struct {
	// Poller contains an initialized poller.
	Poller *KustoPoolPrincipalAssignmentsCreateOrUpdatePoller

	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// PollUntilDone will poll the service endpoint until a terminal state is reached or an error is received.
// freq: the time to wait between intervals in absence of a Retry-After header. Allowed minimum is one second.
// A good starting value is 30 seconds. Note that some resources might benefit from a different value.
func (l KustoPoolPrincipalAssignmentsCreateOrUpdatePollerResponse) PollUntilDone(ctx context.Context, freq time.Duration) (KustoPoolPrincipalAssignmentsCreateOrUpdateResponse, error) {
	respType := KustoPoolPrincipalAssignmentsCreateOrUpdateResponse{}
	resp, err := l.Poller.pt.PollUntilDone(ctx, freq, &respType.ClusterPrincipalAssignment)
	if err != nil {
		return respType, err
	}
	respType.RawResponse = resp
	return respType, nil
}

// Resume rehydrates a KustoPoolPrincipalAssignmentsCreateOrUpdatePollerResponse from the provided client and resume token.
func (l *KustoPoolPrincipalAssignmentsCreateOrUpdatePollerResponse) Resume(ctx context.Context, client *KustoPoolPrincipalAssignmentsClient, token string) error {
	pt, err := armruntime.NewPollerFromResumeToken("KustoPoolPrincipalAssignmentsClient.CreateOrUpdate", token, client.pl, client.createOrUpdateHandleError)
	if err != nil {
		return err
	}
	poller := &KustoPoolPrincipalAssignmentsCreateOrUpdatePoller{
		pt: pt,
	}
	resp, err := poller.Poll(ctx)
	if err != nil {
		return err
	}
	l.Poller = poller
	l.RawResponse = resp
	return nil
}

// KustoPoolPrincipalAssignmentsCreateOrUpdateResponse contains the response from method KustoPoolPrincipalAssignments.CreateOrUpdate.
type KustoPoolPrincipalAssignmentsCreateOrUpdateResponse struct {
	KustoPoolPrincipalAssignmentsCreateOrUpdateResult
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// KustoPoolPrincipalAssignmentsCreateOrUpdateResult contains the result from method KustoPoolPrincipalAssignments.CreateOrUpdate.
type KustoPoolPrincipalAssignmentsCreateOrUpdateResult struct {
	ClusterPrincipalAssignment
}

// KustoPoolPrincipalAssignmentsDeletePollerResponse contains the response from method KustoPoolPrincipalAssignments.Delete.
type KustoPoolPrincipalAssignmentsDeletePollerResponse struct {
	// Poller contains an initialized poller.
	Poller *KustoPoolPrincipalAssignmentsDeletePoller

	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// PollUntilDone will poll the service endpoint until a terminal state is reached or an error is received.
// freq: the time to wait between intervals in absence of a Retry-After header. Allowed minimum is one second.
// A good starting value is 30 seconds. Note that some resources might benefit from a different value.
func (l KustoPoolPrincipalAssignmentsDeletePollerResponse) PollUntilDone(ctx context.Context, freq time.Duration) (KustoPoolPrincipalAssignmentsDeleteResponse, error) {
	respType := KustoPoolPrincipalAssignmentsDeleteResponse{}
	resp, err := l.Poller.pt.PollUntilDone(ctx, freq, nil)
	if err != nil {
		return respType, err
	}
	respType.RawResponse = resp
	return respType, nil
}

// Resume rehydrates a KustoPoolPrincipalAssignmentsDeletePollerResponse from the provided client and resume token.
func (l *KustoPoolPrincipalAssignmentsDeletePollerResponse) Resume(ctx context.Context, client *KustoPoolPrincipalAssignmentsClient, token string) error {
	pt, err := armruntime.NewPollerFromResumeToken("KustoPoolPrincipalAssignmentsClient.Delete", token, client.pl, client.deleteHandleError)
	if err != nil {
		return err
	}
	poller := &KustoPoolPrincipalAssignmentsDeletePoller{
		pt: pt,
	}
	resp, err := poller.Poll(ctx)
	if err != nil {
		return err
	}
	l.Poller = poller
	l.RawResponse = resp
	return nil
}

// KustoPoolPrincipalAssignmentsDeleteResponse contains the response from method KustoPoolPrincipalAssignments.Delete.
type KustoPoolPrincipalAssignmentsDeleteResponse struct {
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// KustoPoolPrincipalAssignmentsGetResponse contains the response from method KustoPoolPrincipalAssignments.Get.
type KustoPoolPrincipalAssignmentsGetResponse struct {
	KustoPoolPrincipalAssignmentsGetResult
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// KustoPoolPrincipalAssignmentsGetResult contains the result from method KustoPoolPrincipalAssignments.Get.
type KustoPoolPrincipalAssignmentsGetResult struct {
	ClusterPrincipalAssignment
}

// KustoPoolPrincipalAssignmentsListResponse contains the response from method KustoPoolPrincipalAssignments.List.
type KustoPoolPrincipalAssignmentsListResponse struct {
	KustoPoolPrincipalAssignmentsListResult
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// KustoPoolPrincipalAssignmentsListResult contains the result from method KustoPoolPrincipalAssignments.List.
type KustoPoolPrincipalAssignmentsListResult struct {
	ClusterPrincipalAssignmentListResult
}

// KustoPoolsAddLanguageExtensionsPollerResponse contains the response from method KustoPools.AddLanguageExtensions.
type KustoPoolsAddLanguageExtensionsPollerResponse struct {
	// Poller contains an initialized poller.
	Poller *KustoPoolsAddLanguageExtensionsPoller

	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// PollUntilDone will poll the service endpoint until a terminal state is reached or an error is received.
// freq: the time to wait between intervals in absence of a Retry-After header. Allowed minimum is one second.
// A good starting value is 30 seconds. Note that some resources might benefit from a different value.
func (l KustoPoolsAddLanguageExtensionsPollerResponse) PollUntilDone(ctx context.Context, freq time.Duration) (KustoPoolsAddLanguageExtensionsResponse, error) {
	respType := KustoPoolsAddLanguageExtensionsResponse{}
	resp, err := l.Poller.pt.PollUntilDone(ctx, freq, nil)
	if err != nil {
		return respType, err
	}
	respType.RawResponse = resp
	return respType, nil
}

// Resume rehydrates a KustoPoolsAddLanguageExtensionsPollerResponse from the provided client and resume token.
func (l *KustoPoolsAddLanguageExtensionsPollerResponse) Resume(ctx context.Context, client *KustoPoolsClient, token string) error {
	pt, err := armruntime.NewPollerFromResumeToken("KustoPoolsClient.AddLanguageExtensions", token, client.pl, client.addLanguageExtensionsHandleError)
	if err != nil {
		return err
	}
	poller := &KustoPoolsAddLanguageExtensionsPoller{
		pt: pt,
	}
	resp, err := poller.Poll(ctx)
	if err != nil {
		return err
	}
	l.Poller = poller
	l.RawResponse = resp
	return nil
}

// KustoPoolsAddLanguageExtensionsResponse contains the response from method KustoPools.AddLanguageExtensions.
type KustoPoolsAddLanguageExtensionsResponse struct {
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// KustoPoolsCheckNameAvailabilityResponse contains the response from method KustoPools.CheckNameAvailability.
type KustoPoolsCheckNameAvailabilityResponse struct {
	KustoPoolsCheckNameAvailabilityResult
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// KustoPoolsCheckNameAvailabilityResult contains the result from method KustoPools.CheckNameAvailability.
type KustoPoolsCheckNameAvailabilityResult struct {
	CheckNameResult
}

// KustoPoolsCreateOrUpdatePollerResponse contains the response from method KustoPools.CreateOrUpdate.
type KustoPoolsCreateOrUpdatePollerResponse struct {
	// Poller contains an initialized poller.
	Poller *KustoPoolsCreateOrUpdatePoller

	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// PollUntilDone will poll the service endpoint until a terminal state is reached or an error is received.
// freq: the time to wait between intervals in absence of a Retry-After header. Allowed minimum is one second.
// A good starting value is 30 seconds. Note that some resources might benefit from a different value.
func (l KustoPoolsCreateOrUpdatePollerResponse) PollUntilDone(ctx context.Context, freq time.Duration) (KustoPoolsCreateOrUpdateResponse, error) {
	respType := KustoPoolsCreateOrUpdateResponse{}
	resp, err := l.Poller.pt.PollUntilDone(ctx, freq, &respType.KustoPool)
	if err != nil {
		return respType, err
	}
	respType.RawResponse = resp
	return respType, nil
}

// Resume rehydrates a KustoPoolsCreateOrUpdatePollerResponse from the provided client and resume token.
func (l *KustoPoolsCreateOrUpdatePollerResponse) Resume(ctx context.Context, client *KustoPoolsClient, token string) error {
	pt, err := armruntime.NewPollerFromResumeToken("KustoPoolsClient.CreateOrUpdate", token, client.pl, client.createOrUpdateHandleError)
	if err != nil {
		return err
	}
	poller := &KustoPoolsCreateOrUpdatePoller{
		pt: pt,
	}
	resp, err := poller.Poll(ctx)
	if err != nil {
		return err
	}
	l.Poller = poller
	l.RawResponse = resp
	return nil
}

// KustoPoolsCreateOrUpdateResponse contains the response from method KustoPools.CreateOrUpdate.
type KustoPoolsCreateOrUpdateResponse struct {
	KustoPoolsCreateOrUpdateResult
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// KustoPoolsCreateOrUpdateResult contains the result from method KustoPools.CreateOrUpdate.
type KustoPoolsCreateOrUpdateResult struct {
	KustoPool
}

// KustoPoolsDeletePollerResponse contains the response from method KustoPools.Delete.
type KustoPoolsDeletePollerResponse struct {
	// Poller contains an initialized poller.
	Poller *KustoPoolsDeletePoller

	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// PollUntilDone will poll the service endpoint until a terminal state is reached or an error is received.
// freq: the time to wait between intervals in absence of a Retry-After header. Allowed minimum is one second.
// A good starting value is 30 seconds. Note that some resources might benefit from a different value.
func (l KustoPoolsDeletePollerResponse) PollUntilDone(ctx context.Context, freq time.Duration) (KustoPoolsDeleteResponse, error) {
	respType := KustoPoolsDeleteResponse{}
	resp, err := l.Poller.pt.PollUntilDone(ctx, freq, nil)
	if err != nil {
		return respType, err
	}
	respType.RawResponse = resp
	return respType, nil
}

// Resume rehydrates a KustoPoolsDeletePollerResponse from the provided client and resume token.
func (l *KustoPoolsDeletePollerResponse) Resume(ctx context.Context, client *KustoPoolsClient, token string) error {
	pt, err := armruntime.NewPollerFromResumeToken("KustoPoolsClient.Delete", token, client.pl, client.deleteHandleError)
	if err != nil {
		return err
	}
	poller := &KustoPoolsDeletePoller{
		pt: pt,
	}
	resp, err := poller.Poll(ctx)
	if err != nil {
		return err
	}
	l.Poller = poller
	l.RawResponse = resp
	return nil
}

// KustoPoolsDeleteResponse contains the response from method KustoPools.Delete.
type KustoPoolsDeleteResponse struct {
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// KustoPoolsDetachFollowerDatabasesPollerResponse contains the response from method KustoPools.DetachFollowerDatabases.
type KustoPoolsDetachFollowerDatabasesPollerResponse struct {
	// Poller contains an initialized poller.
	Poller *KustoPoolsDetachFollowerDatabasesPoller

	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// PollUntilDone will poll the service endpoint until a terminal state is reached or an error is received.
// freq: the time to wait between intervals in absence of a Retry-After header. Allowed minimum is one second.
// A good starting value is 30 seconds. Note that some resources might benefit from a different value.
func (l KustoPoolsDetachFollowerDatabasesPollerResponse) PollUntilDone(ctx context.Context, freq time.Duration) (KustoPoolsDetachFollowerDatabasesResponse, error) {
	respType := KustoPoolsDetachFollowerDatabasesResponse{}
	resp, err := l.Poller.pt.PollUntilDone(ctx, freq, nil)
	if err != nil {
		return respType, err
	}
	respType.RawResponse = resp
	return respType, nil
}

// Resume rehydrates a KustoPoolsDetachFollowerDatabasesPollerResponse from the provided client and resume token.
func (l *KustoPoolsDetachFollowerDatabasesPollerResponse) Resume(ctx context.Context, client *KustoPoolsClient, token string) error {
	pt, err := armruntime.NewPollerFromResumeToken("KustoPoolsClient.DetachFollowerDatabases", token, client.pl, client.detachFollowerDatabasesHandleError)
	if err != nil {
		return err
	}
	poller := &KustoPoolsDetachFollowerDatabasesPoller{
		pt: pt,
	}
	resp, err := poller.Poll(ctx)
	if err != nil {
		return err
	}
	l.Poller = poller
	l.RawResponse = resp
	return nil
}

// KustoPoolsDetachFollowerDatabasesResponse contains the response from method KustoPools.DetachFollowerDatabases.
type KustoPoolsDetachFollowerDatabasesResponse struct {
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// KustoPoolsGetResponse contains the response from method KustoPools.Get.
type KustoPoolsGetResponse struct {
	KustoPoolsGetResult
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// KustoPoolsGetResult contains the result from method KustoPools.Get.
type KustoPoolsGetResult struct {
	KustoPool
}

// KustoPoolsListByWorkspaceResponse contains the response from method KustoPools.ListByWorkspace.
type KustoPoolsListByWorkspaceResponse struct {
	KustoPoolsListByWorkspaceResult
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// KustoPoolsListByWorkspaceResult contains the result from method KustoPools.ListByWorkspace.
type KustoPoolsListByWorkspaceResult struct {
	KustoPoolListResult
}

// KustoPoolsListFollowerDatabasesResponse contains the response from method KustoPools.ListFollowerDatabases.
type KustoPoolsListFollowerDatabasesResponse struct {
	KustoPoolsListFollowerDatabasesResult
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// KustoPoolsListFollowerDatabasesResult contains the result from method KustoPools.ListFollowerDatabases.
type KustoPoolsListFollowerDatabasesResult struct {
	FollowerDatabaseListResult
}

// KustoPoolsListLanguageExtensionsResponse contains the response from method KustoPools.ListLanguageExtensions.
type KustoPoolsListLanguageExtensionsResponse struct {
	KustoPoolsListLanguageExtensionsResult
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// KustoPoolsListLanguageExtensionsResult contains the result from method KustoPools.ListLanguageExtensions.
type KustoPoolsListLanguageExtensionsResult struct {
	LanguageExtensionsList
}

// KustoPoolsListSKUsByResourceResponse contains the response from method KustoPools.ListSKUsByResource.
type KustoPoolsListSKUsByResourceResponse struct {
	KustoPoolsListSKUsByResourceResult
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// KustoPoolsListSKUsByResourceResult contains the result from method KustoPools.ListSKUsByResource.
type KustoPoolsListSKUsByResourceResult struct {
	ListResourceSKUsResult
}

// KustoPoolsListSKUsResponse contains the response from method KustoPools.ListSKUs.
type KustoPoolsListSKUsResponse struct {
	KustoPoolsListSKUsResult
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// KustoPoolsListSKUsResult contains the result from method KustoPools.ListSKUs.
type KustoPoolsListSKUsResult struct {
	SKUDescriptionList
}

// KustoPoolsRemoveLanguageExtensionsPollerResponse contains the response from method KustoPools.RemoveLanguageExtensions.
type KustoPoolsRemoveLanguageExtensionsPollerResponse struct {
	// Poller contains an initialized poller.
	Poller *KustoPoolsRemoveLanguageExtensionsPoller

	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// PollUntilDone will poll the service endpoint until a terminal state is reached or an error is received.
// freq: the time to wait between intervals in absence of a Retry-After header. Allowed minimum is one second.
// A good starting value is 30 seconds. Note that some resources might benefit from a different value.
func (l KustoPoolsRemoveLanguageExtensionsPollerResponse) PollUntilDone(ctx context.Context, freq time.Duration) (KustoPoolsRemoveLanguageExtensionsResponse, error) {
	respType := KustoPoolsRemoveLanguageExtensionsResponse{}
	resp, err := l.Poller.pt.PollUntilDone(ctx, freq, nil)
	if err != nil {
		return respType, err
	}
	respType.RawResponse = resp
	return respType, nil
}

// Resume rehydrates a KustoPoolsRemoveLanguageExtensionsPollerResponse from the provided client and resume token.
func (l *KustoPoolsRemoveLanguageExtensionsPollerResponse) Resume(ctx context.Context, client *KustoPoolsClient, token string) error {
	pt, err := armruntime.NewPollerFromResumeToken("KustoPoolsClient.RemoveLanguageExtensions", token, client.pl, client.removeLanguageExtensionsHandleError)
	if err != nil {
		return err
	}
	poller := &KustoPoolsRemoveLanguageExtensionsPoller{
		pt: pt,
	}
	resp, err := poller.Poll(ctx)
	if err != nil {
		return err
	}
	l.Poller = poller
	l.RawResponse = resp
	return nil
}

// KustoPoolsRemoveLanguageExtensionsResponse contains the response from method KustoPools.RemoveLanguageExtensions.
type KustoPoolsRemoveLanguageExtensionsResponse struct {
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// KustoPoolsStartPollerResponse contains the response from method KustoPools.Start.
type KustoPoolsStartPollerResponse struct {
	// Poller contains an initialized poller.
	Poller *KustoPoolsStartPoller

	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// PollUntilDone will poll the service endpoint until a terminal state is reached or an error is received.
// freq: the time to wait between intervals in absence of a Retry-After header. Allowed minimum is one second.
// A good starting value is 30 seconds. Note that some resources might benefit from a different value.
func (l KustoPoolsStartPollerResponse) PollUntilDone(ctx context.Context, freq time.Duration) (KustoPoolsStartResponse, error) {
	respType := KustoPoolsStartResponse{}
	resp, err := l.Poller.pt.PollUntilDone(ctx, freq, nil)
	if err != nil {
		return respType, err
	}
	respType.RawResponse = resp
	return respType, nil
}

// Resume rehydrates a KustoPoolsStartPollerResponse from the provided client and resume token.
func (l *KustoPoolsStartPollerResponse) Resume(ctx context.Context, client *KustoPoolsClient, token string) error {
	pt, err := armruntime.NewPollerFromResumeToken("KustoPoolsClient.Start", token, client.pl, client.startHandleError)
	if err != nil {
		return err
	}
	poller := &KustoPoolsStartPoller{
		pt: pt,
	}
	resp, err := poller.Poll(ctx)
	if err != nil {
		return err
	}
	l.Poller = poller
	l.RawResponse = resp
	return nil
}

// KustoPoolsStartResponse contains the response from method KustoPools.Start.
type KustoPoolsStartResponse struct {
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// KustoPoolsStopPollerResponse contains the response from method KustoPools.Stop.
type KustoPoolsStopPollerResponse struct {
	// Poller contains an initialized poller.
	Poller *KustoPoolsStopPoller

	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// PollUntilDone will poll the service endpoint until a terminal state is reached or an error is received.
// freq: the time to wait between intervals in absence of a Retry-After header. Allowed minimum is one second.
// A good starting value is 30 seconds. Note that some resources might benefit from a different value.
func (l KustoPoolsStopPollerResponse) PollUntilDone(ctx context.Context, freq time.Duration) (KustoPoolsStopResponse, error) {
	respType := KustoPoolsStopResponse{}
	resp, err := l.Poller.pt.PollUntilDone(ctx, freq, nil)
	if err != nil {
		return respType, err
	}
	respType.RawResponse = resp
	return respType, nil
}

// Resume rehydrates a KustoPoolsStopPollerResponse from the provided client and resume token.
func (l *KustoPoolsStopPollerResponse) Resume(ctx context.Context, client *KustoPoolsClient, token string) error {
	pt, err := armruntime.NewPollerFromResumeToken("KustoPoolsClient.Stop", token, client.pl, client.stopHandleError)
	if err != nil {
		return err
	}
	poller := &KustoPoolsStopPoller{
		pt: pt,
	}
	resp, err := poller.Poll(ctx)
	if err != nil {
		return err
	}
	l.Poller = poller
	l.RawResponse = resp
	return nil
}

// KustoPoolsStopResponse contains the response from method KustoPools.Stop.
type KustoPoolsStopResponse struct {
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// KustoPoolsUpdatePollerResponse contains the response from method KustoPools.Update.
type KustoPoolsUpdatePollerResponse struct {
	// Poller contains an initialized poller.
	Poller *KustoPoolsUpdatePoller

	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// PollUntilDone will poll the service endpoint until a terminal state is reached or an error is received.
// freq: the time to wait between intervals in absence of a Retry-After header. Allowed minimum is one second.
// A good starting value is 30 seconds. Note that some resources might benefit from a different value.
func (l KustoPoolsUpdatePollerResponse) PollUntilDone(ctx context.Context, freq time.Duration) (KustoPoolsUpdateResponse, error) {
	respType := KustoPoolsUpdateResponse{}
	resp, err := l.Poller.pt.PollUntilDone(ctx, freq, &respType.KustoPool)
	if err != nil {
		return respType, err
	}
	respType.RawResponse = resp
	return respType, nil
}

// Resume rehydrates a KustoPoolsUpdatePollerResponse from the provided client and resume token.
func (l *KustoPoolsUpdatePollerResponse) Resume(ctx context.Context, client *KustoPoolsClient, token string) error {
	pt, err := armruntime.NewPollerFromResumeToken("KustoPoolsClient.Update", token, client.pl, client.updateHandleError)
	if err != nil {
		return err
	}
	poller := &KustoPoolsUpdatePoller{
		pt: pt,
	}
	resp, err := poller.Poll(ctx)
	if err != nil {
		return err
	}
	l.Poller = poller
	l.RawResponse = resp
	return nil
}

// KustoPoolsUpdateResponse contains the response from method KustoPools.Update.
type KustoPoolsUpdateResponse struct {
	KustoPoolsUpdateResult
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// KustoPoolsUpdateResult contains the result from method KustoPools.Update.
type KustoPoolsUpdateResult struct {
	KustoPool
}

// LibrariesListByWorkspaceResponse contains the response from method Libraries.ListByWorkspace.
type LibrariesListByWorkspaceResponse struct {
	LibrariesListByWorkspaceResult
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// LibrariesListByWorkspaceResult contains the result from method Libraries.ListByWorkspace.
type LibrariesListByWorkspaceResult struct {
	LibraryListResponse
}

// LibraryGetResponse contains the response from method Library.Get.
type LibraryGetResponse struct {
	LibraryGetResult
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// LibraryGetResult contains the result from method Library.Get.
type LibraryGetResult struct {
	LibraryResource
}

// OperationsCheckNameAvailabilityResponse contains the response from method Operations.CheckNameAvailability.
type OperationsCheckNameAvailabilityResponse struct {
	OperationsCheckNameAvailabilityResult
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// OperationsCheckNameAvailabilityResult contains the result from method Operations.CheckNameAvailability.
type OperationsCheckNameAvailabilityResult struct {
	CheckNameAvailabilityResponse
}

// OperationsGetAzureAsyncHeaderResultResponse contains the response from method Operations.GetAzureAsyncHeaderResult.
type OperationsGetAzureAsyncHeaderResultResponse struct {
	OperationsGetAzureAsyncHeaderResultResult
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// OperationsGetAzureAsyncHeaderResultResult contains the result from method Operations.GetAzureAsyncHeaderResult.
type OperationsGetAzureAsyncHeaderResultResult struct {
	OperationResource
}

// OperationsGetLocationHeaderResultResponse contains the response from method Operations.GetLocationHeaderResult.
type OperationsGetLocationHeaderResultResponse struct {
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// OperationsListResponse contains the response from method Operations.List.
type OperationsListResponse struct {
	OperationsListResult
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// OperationsListResult contains the result from method Operations.List.
type OperationsListResult struct {
	// Array of AvailableRpOperation
	AvailableRpOperationArray []*AvailableRpOperation
}

// PrivateEndpointConnectionsCreatePollerResponse contains the response from method PrivateEndpointConnections.Create.
type PrivateEndpointConnectionsCreatePollerResponse struct {
	// Poller contains an initialized poller.
	Poller *PrivateEndpointConnectionsCreatePoller

	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// PollUntilDone will poll the service endpoint until a terminal state is reached or an error is received.
// freq: the time to wait between intervals in absence of a Retry-After header. Allowed minimum is one second.
// A good starting value is 30 seconds. Note that some resources might benefit from a different value.
func (l PrivateEndpointConnectionsCreatePollerResponse) PollUntilDone(ctx context.Context, freq time.Duration) (PrivateEndpointConnectionsCreateResponse, error) {
	respType := PrivateEndpointConnectionsCreateResponse{}
	resp, err := l.Poller.pt.PollUntilDone(ctx, freq, &respType.PrivateEndpointConnection)
	if err != nil {
		return respType, err
	}
	respType.RawResponse = resp
	return respType, nil
}

// Resume rehydrates a PrivateEndpointConnectionsCreatePollerResponse from the provided client and resume token.
func (l *PrivateEndpointConnectionsCreatePollerResponse) Resume(ctx context.Context, client *PrivateEndpointConnectionsClient, token string) error {
	pt, err := armruntime.NewPollerFromResumeToken("PrivateEndpointConnectionsClient.Create", token, client.pl, client.createHandleError)
	if err != nil {
		return err
	}
	poller := &PrivateEndpointConnectionsCreatePoller{
		pt: pt,
	}
	resp, err := poller.Poll(ctx)
	if err != nil {
		return err
	}
	l.Poller = poller
	l.RawResponse = resp
	return nil
}

// PrivateEndpointConnectionsCreateResponse contains the response from method PrivateEndpointConnections.Create.
type PrivateEndpointConnectionsCreateResponse struct {
	PrivateEndpointConnectionsCreateResult
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// PrivateEndpointConnectionsCreateResult contains the result from method PrivateEndpointConnections.Create.
type PrivateEndpointConnectionsCreateResult struct {
	PrivateEndpointConnection
}

// PrivateEndpointConnectionsDeletePollerResponse contains the response from method PrivateEndpointConnections.Delete.
type PrivateEndpointConnectionsDeletePollerResponse struct {
	// Poller contains an initialized poller.
	Poller *PrivateEndpointConnectionsDeletePoller

	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// PollUntilDone will poll the service endpoint until a terminal state is reached or an error is received.
// freq: the time to wait between intervals in absence of a Retry-After header. Allowed minimum is one second.
// A good starting value is 30 seconds. Note that some resources might benefit from a different value.
func (l PrivateEndpointConnectionsDeletePollerResponse) PollUntilDone(ctx context.Context, freq time.Duration) (PrivateEndpointConnectionsDeleteResponse, error) {
	respType := PrivateEndpointConnectionsDeleteResponse{}
	resp, err := l.Poller.pt.PollUntilDone(ctx, freq, &respType.OperationResource)
	if err != nil {
		return respType, err
	}
	respType.RawResponse = resp
	return respType, nil
}

// Resume rehydrates a PrivateEndpointConnectionsDeletePollerResponse from the provided client and resume token.
func (l *PrivateEndpointConnectionsDeletePollerResponse) Resume(ctx context.Context, client *PrivateEndpointConnectionsClient, token string) error {
	pt, err := armruntime.NewPollerFromResumeToken("PrivateEndpointConnectionsClient.Delete", token, client.pl, client.deleteHandleError)
	if err != nil {
		return err
	}
	poller := &PrivateEndpointConnectionsDeletePoller{
		pt: pt,
	}
	resp, err := poller.Poll(ctx)
	if err != nil {
		return err
	}
	l.Poller = poller
	l.RawResponse = resp
	return nil
}

// PrivateEndpointConnectionsDeleteResponse contains the response from method PrivateEndpointConnections.Delete.
type PrivateEndpointConnectionsDeleteResponse struct {
	PrivateEndpointConnectionsDeleteResult
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// PrivateEndpointConnectionsDeleteResult contains the result from method PrivateEndpointConnections.Delete.
type PrivateEndpointConnectionsDeleteResult struct {
	OperationResource
}

// PrivateEndpointConnectionsGetResponse contains the response from method PrivateEndpointConnections.Get.
type PrivateEndpointConnectionsGetResponse struct {
	PrivateEndpointConnectionsGetResult
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// PrivateEndpointConnectionsGetResult contains the result from method PrivateEndpointConnections.Get.
type PrivateEndpointConnectionsGetResult struct {
	PrivateEndpointConnection
}

// PrivateEndpointConnectionsListResponse contains the response from method PrivateEndpointConnections.List.
type PrivateEndpointConnectionsListResponse struct {
	PrivateEndpointConnectionsListResult
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// PrivateEndpointConnectionsListResult contains the result from method PrivateEndpointConnections.List.
type PrivateEndpointConnectionsListResult struct {
	PrivateEndpointConnectionList
}

// PrivateEndpointConnectionsPrivateLinkHubGetResponse contains the response from method PrivateEndpointConnectionsPrivateLinkHub.Get.
type PrivateEndpointConnectionsPrivateLinkHubGetResponse struct {
	PrivateEndpointConnectionsPrivateLinkHubGetResult
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// PrivateEndpointConnectionsPrivateLinkHubGetResult contains the result from method PrivateEndpointConnectionsPrivateLinkHub.Get.
type PrivateEndpointConnectionsPrivateLinkHubGetResult struct {
	PrivateEndpointConnectionForPrivateLinkHub
}

// PrivateEndpointConnectionsPrivateLinkHubListResponse contains the response from method PrivateEndpointConnectionsPrivateLinkHub.List.
type PrivateEndpointConnectionsPrivateLinkHubListResponse struct {
	PrivateEndpointConnectionsPrivateLinkHubListResult
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// PrivateEndpointConnectionsPrivateLinkHubListResult contains the result from method PrivateEndpointConnectionsPrivateLinkHub.List.
type PrivateEndpointConnectionsPrivateLinkHubListResult struct {
	PrivateEndpointConnectionForPrivateLinkHubResourceCollectionResponse
}

// PrivateLinkHubPrivateLinkResourcesGetResponse contains the response from method PrivateLinkHubPrivateLinkResources.Get.
type PrivateLinkHubPrivateLinkResourcesGetResponse struct {
	PrivateLinkHubPrivateLinkResourcesGetResult
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// PrivateLinkHubPrivateLinkResourcesGetResult contains the result from method PrivateLinkHubPrivateLinkResources.Get.
type PrivateLinkHubPrivateLinkResourcesGetResult struct {
	PrivateLinkResource
}

// PrivateLinkHubPrivateLinkResourcesListResponse contains the response from method PrivateLinkHubPrivateLinkResources.List.
type PrivateLinkHubPrivateLinkResourcesListResponse struct {
	PrivateLinkHubPrivateLinkResourcesListResult
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// PrivateLinkHubPrivateLinkResourcesListResult contains the result from method PrivateLinkHubPrivateLinkResources.List.
type PrivateLinkHubPrivateLinkResourcesListResult struct {
	PrivateLinkResourceListResult
}

// PrivateLinkHubsCreateOrUpdateResponse contains the response from method PrivateLinkHubs.CreateOrUpdate.
type PrivateLinkHubsCreateOrUpdateResponse struct {
	PrivateLinkHubsCreateOrUpdateResult
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// PrivateLinkHubsCreateOrUpdateResult contains the result from method PrivateLinkHubs.CreateOrUpdate.
type PrivateLinkHubsCreateOrUpdateResult struct {
	PrivateLinkHub
}

// PrivateLinkHubsDeletePollerResponse contains the response from method PrivateLinkHubs.Delete.
type PrivateLinkHubsDeletePollerResponse struct {
	// Poller contains an initialized poller.
	Poller *PrivateLinkHubsDeletePoller

	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// PollUntilDone will poll the service endpoint until a terminal state is reached or an error is received.
// freq: the time to wait between intervals in absence of a Retry-After header. Allowed minimum is one second.
// A good starting value is 30 seconds. Note that some resources might benefit from a different value.
func (l PrivateLinkHubsDeletePollerResponse) PollUntilDone(ctx context.Context, freq time.Duration) (PrivateLinkHubsDeleteResponse, error) {
	respType := PrivateLinkHubsDeleteResponse{}
	resp, err := l.Poller.pt.PollUntilDone(ctx, freq, nil)
	if err != nil {
		return respType, err
	}
	respType.RawResponse = resp
	return respType, nil
}

// Resume rehydrates a PrivateLinkHubsDeletePollerResponse from the provided client and resume token.
func (l *PrivateLinkHubsDeletePollerResponse) Resume(ctx context.Context, client *PrivateLinkHubsClient, token string) error {
	pt, err := armruntime.NewPollerFromResumeToken("PrivateLinkHubsClient.Delete", token, client.pl, client.deleteHandleError)
	if err != nil {
		return err
	}
	poller := &PrivateLinkHubsDeletePoller{
		pt: pt,
	}
	resp, err := poller.Poll(ctx)
	if err != nil {
		return err
	}
	l.Poller = poller
	l.RawResponse = resp
	return nil
}

// PrivateLinkHubsDeleteResponse contains the response from method PrivateLinkHubs.Delete.
type PrivateLinkHubsDeleteResponse struct {
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// PrivateLinkHubsGetResponse contains the response from method PrivateLinkHubs.Get.
type PrivateLinkHubsGetResponse struct {
	PrivateLinkHubsGetResult
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// PrivateLinkHubsGetResult contains the result from method PrivateLinkHubs.Get.
type PrivateLinkHubsGetResult struct {
	PrivateLinkHub
}

// PrivateLinkHubsListByResourceGroupResponse contains the response from method PrivateLinkHubs.ListByResourceGroup.
type PrivateLinkHubsListByResourceGroupResponse struct {
	PrivateLinkHubsListByResourceGroupResult
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// PrivateLinkHubsListByResourceGroupResult contains the result from method PrivateLinkHubs.ListByResourceGroup.
type PrivateLinkHubsListByResourceGroupResult struct {
	PrivateLinkHubInfoListResult
}

// PrivateLinkHubsListResponse contains the response from method PrivateLinkHubs.List.
type PrivateLinkHubsListResponse struct {
	PrivateLinkHubsListResult
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// PrivateLinkHubsListResult contains the result from method PrivateLinkHubs.List.
type PrivateLinkHubsListResult struct {
	PrivateLinkHubInfoListResult
}

// PrivateLinkHubsUpdateResponse contains the response from method PrivateLinkHubs.Update.
type PrivateLinkHubsUpdateResponse struct {
	PrivateLinkHubsUpdateResult
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// PrivateLinkHubsUpdateResult contains the result from method PrivateLinkHubs.Update.
type PrivateLinkHubsUpdateResult struct {
	PrivateLinkHub
}

// PrivateLinkResourcesGetResponse contains the response from method PrivateLinkResources.Get.
type PrivateLinkResourcesGetResponse struct {
	PrivateLinkResourcesGetResult
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// PrivateLinkResourcesGetResult contains the result from method PrivateLinkResources.Get.
type PrivateLinkResourcesGetResult struct {
	PrivateLinkResource
}

// PrivateLinkResourcesListResponse contains the response from method PrivateLinkResources.List.
type PrivateLinkResourcesListResponse struct {
	PrivateLinkResourcesListResult
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// PrivateLinkResourcesListResult contains the result from method PrivateLinkResources.List.
type PrivateLinkResourcesListResult struct {
	PrivateLinkResourceListResult
}

// RestorableDroppedSQLPoolsGetResponse contains the response from method RestorableDroppedSQLPools.Get.
type RestorableDroppedSQLPoolsGetResponse struct {
	RestorableDroppedSQLPoolsGetResult
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// RestorableDroppedSQLPoolsGetResult contains the result from method RestorableDroppedSQLPools.Get.
type RestorableDroppedSQLPoolsGetResult struct {
	RestorableDroppedSQLPool
}

// RestorableDroppedSQLPoolsListByWorkspaceResponse contains the response from method RestorableDroppedSQLPools.ListByWorkspace.
type RestorableDroppedSQLPoolsListByWorkspaceResponse struct {
	RestorableDroppedSQLPoolsListByWorkspaceResult
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// RestorableDroppedSQLPoolsListByWorkspaceResult contains the result from method RestorableDroppedSQLPools.ListByWorkspace.
type RestorableDroppedSQLPoolsListByWorkspaceResult struct {
	RestorableDroppedSQLPoolListResult
}

// SQLPoolBlobAuditingPoliciesCreateOrUpdateResponse contains the response from method SQLPoolBlobAuditingPolicies.CreateOrUpdate.
type SQLPoolBlobAuditingPoliciesCreateOrUpdateResponse struct {
	SQLPoolBlobAuditingPoliciesCreateOrUpdateResult
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// SQLPoolBlobAuditingPoliciesCreateOrUpdateResult contains the result from method SQLPoolBlobAuditingPolicies.CreateOrUpdate.
type SQLPoolBlobAuditingPoliciesCreateOrUpdateResult struct {
	SQLPoolBlobAuditingPolicy
}

// SQLPoolBlobAuditingPoliciesGetResponse contains the response from method SQLPoolBlobAuditingPolicies.Get.
type SQLPoolBlobAuditingPoliciesGetResponse struct {
	SQLPoolBlobAuditingPoliciesGetResult
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// SQLPoolBlobAuditingPoliciesGetResult contains the result from method SQLPoolBlobAuditingPolicies.Get.
type SQLPoolBlobAuditingPoliciesGetResult struct {
	SQLPoolBlobAuditingPolicy
}

// SQLPoolBlobAuditingPoliciesListBySQLPoolResponse contains the response from method SQLPoolBlobAuditingPolicies.ListBySQLPool.
type SQLPoolBlobAuditingPoliciesListBySQLPoolResponse struct {
	SQLPoolBlobAuditingPoliciesListBySQLPoolResult
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// SQLPoolBlobAuditingPoliciesListBySQLPoolResult contains the result from method SQLPoolBlobAuditingPolicies.ListBySQLPool.
type SQLPoolBlobAuditingPoliciesListBySQLPoolResult struct {
	SQLPoolBlobAuditingPolicyListResult
}

// SQLPoolColumnsGetResponse contains the response from method SQLPoolColumns.Get.
type SQLPoolColumnsGetResponse struct {
	SQLPoolColumnsGetResult
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// SQLPoolColumnsGetResult contains the result from method SQLPoolColumns.Get.
type SQLPoolColumnsGetResult struct {
	SQLPoolColumn
}

// SQLPoolConnectionPoliciesGetResponse contains the response from method SQLPoolConnectionPolicies.Get.
type SQLPoolConnectionPoliciesGetResponse struct {
	SQLPoolConnectionPoliciesGetResult
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// SQLPoolConnectionPoliciesGetResult contains the result from method SQLPoolConnectionPolicies.Get.
type SQLPoolConnectionPoliciesGetResult struct {
	SQLPoolConnectionPolicy
}

// SQLPoolDataWarehouseUserActivitiesGetResponse contains the response from method SQLPoolDataWarehouseUserActivities.Get.
type SQLPoolDataWarehouseUserActivitiesGetResponse struct {
	SQLPoolDataWarehouseUserActivitiesGetResult
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// SQLPoolDataWarehouseUserActivitiesGetResult contains the result from method SQLPoolDataWarehouseUserActivities.Get.
type SQLPoolDataWarehouseUserActivitiesGetResult struct {
	DataWarehouseUserActivities
}

// SQLPoolGeoBackupPoliciesCreateOrUpdateResponse contains the response from method SQLPoolGeoBackupPolicies.CreateOrUpdate.
type SQLPoolGeoBackupPoliciesCreateOrUpdateResponse struct {
	SQLPoolGeoBackupPoliciesCreateOrUpdateResult
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// SQLPoolGeoBackupPoliciesCreateOrUpdateResult contains the result from method SQLPoolGeoBackupPolicies.CreateOrUpdate.
type SQLPoolGeoBackupPoliciesCreateOrUpdateResult struct {
	GeoBackupPolicy
}

// SQLPoolGeoBackupPoliciesGetResponse contains the response from method SQLPoolGeoBackupPolicies.Get.
type SQLPoolGeoBackupPoliciesGetResponse struct {
	SQLPoolGeoBackupPoliciesGetResult
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// SQLPoolGeoBackupPoliciesGetResult contains the result from method SQLPoolGeoBackupPolicies.Get.
type SQLPoolGeoBackupPoliciesGetResult struct {
	GeoBackupPolicy
}

// SQLPoolGeoBackupPoliciesListResponse contains the response from method SQLPoolGeoBackupPolicies.List.
type SQLPoolGeoBackupPoliciesListResponse struct {
	SQLPoolGeoBackupPoliciesListResult
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// SQLPoolGeoBackupPoliciesListResult contains the result from method SQLPoolGeoBackupPolicies.List.
type SQLPoolGeoBackupPoliciesListResult struct {
	GeoBackupPolicyListResult
}

// SQLPoolMaintenanceWindowOptionsGetResponse contains the response from method SQLPoolMaintenanceWindowOptions.Get.
type SQLPoolMaintenanceWindowOptionsGetResponse struct {
	SQLPoolMaintenanceWindowOptionsGetResult
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// SQLPoolMaintenanceWindowOptionsGetResult contains the result from method SQLPoolMaintenanceWindowOptions.Get.
type SQLPoolMaintenanceWindowOptionsGetResult struct {
	MaintenanceWindowOptions
}

// SQLPoolMaintenanceWindowsCreateOrUpdateResponse contains the response from method SQLPoolMaintenanceWindows.CreateOrUpdate.
type SQLPoolMaintenanceWindowsCreateOrUpdateResponse struct {
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// SQLPoolMaintenanceWindowsGetResponse contains the response from method SQLPoolMaintenanceWindows.Get.
type SQLPoolMaintenanceWindowsGetResponse struct {
	SQLPoolMaintenanceWindowsGetResult
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// SQLPoolMaintenanceWindowsGetResult contains the result from method SQLPoolMaintenanceWindows.Get.
type SQLPoolMaintenanceWindowsGetResult struct {
	MaintenanceWindows
}

// SQLPoolMetadataSyncConfigsCreateResponse contains the response from method SQLPoolMetadataSyncConfigs.Create.
type SQLPoolMetadataSyncConfigsCreateResponse struct {
	SQLPoolMetadataSyncConfigsCreateResult
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// SQLPoolMetadataSyncConfigsCreateResult contains the result from method SQLPoolMetadataSyncConfigs.Create.
type SQLPoolMetadataSyncConfigsCreateResult struct {
	MetadataSyncConfig
}

// SQLPoolMetadataSyncConfigsGetResponse contains the response from method SQLPoolMetadataSyncConfigs.Get.
type SQLPoolMetadataSyncConfigsGetResponse struct {
	SQLPoolMetadataSyncConfigsGetResult
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// SQLPoolMetadataSyncConfigsGetResult contains the result from method SQLPoolMetadataSyncConfigs.Get.
type SQLPoolMetadataSyncConfigsGetResult struct {
	MetadataSyncConfig
}

// SQLPoolOperationResultsGetLocationHeaderResultResponse contains the response from method SQLPoolOperationResults.GetLocationHeaderResult.
type SQLPoolOperationResultsGetLocationHeaderResultResponse struct {
	SQLPoolOperationResultsGetLocationHeaderResultResult
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// SQLPoolOperationResultsGetLocationHeaderResultResult contains the result from method SQLPoolOperationResults.GetLocationHeaderResult.
type SQLPoolOperationResultsGetLocationHeaderResultResult struct {
	// Any object
	Object map[string]interface{}
}

// SQLPoolOperationsListResponse contains the response from method SQLPoolOperations.List.
type SQLPoolOperationsListResponse struct {
	SQLPoolOperationsListResult
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// SQLPoolOperationsListResult contains the result from method SQLPoolOperations.List.
type SQLPoolOperationsListResult struct {
	SQLPoolBlobAuditingPolicySQLPoolOperationListResult
}

// SQLPoolRecommendedSensitivityLabelsUpdateResponse contains the response from method SQLPoolRecommendedSensitivityLabels.Update.
type SQLPoolRecommendedSensitivityLabelsUpdateResponse struct {
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// SQLPoolReplicationLinksGetByNameResponse contains the response from method SQLPoolReplicationLinks.GetByName.
type SQLPoolReplicationLinksGetByNameResponse struct {
	SQLPoolReplicationLinksGetByNameResult
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// SQLPoolReplicationLinksGetByNameResult contains the result from method SQLPoolReplicationLinks.GetByName.
type SQLPoolReplicationLinksGetByNameResult struct {
	ReplicationLink
}

// SQLPoolReplicationLinksListResponse contains the response from method SQLPoolReplicationLinks.List.
type SQLPoolReplicationLinksListResponse struct {
	SQLPoolReplicationLinksListResult
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// SQLPoolReplicationLinksListResult contains the result from method SQLPoolReplicationLinks.List.
type SQLPoolReplicationLinksListResult struct {
	ReplicationLinkListResult
}

// SQLPoolRestorePointsCreatePollerResponse contains the response from method SQLPoolRestorePoints.Create.
type SQLPoolRestorePointsCreatePollerResponse struct {
	// Poller contains an initialized poller.
	Poller *SQLPoolRestorePointsCreatePoller

	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// PollUntilDone will poll the service endpoint until a terminal state is reached or an error is received.
// freq: the time to wait between intervals in absence of a Retry-After header. Allowed minimum is one second.
// A good starting value is 30 seconds. Note that some resources might benefit from a different value.
func (l SQLPoolRestorePointsCreatePollerResponse) PollUntilDone(ctx context.Context, freq time.Duration) (SQLPoolRestorePointsCreateResponse, error) {
	respType := SQLPoolRestorePointsCreateResponse{}
	resp, err := l.Poller.pt.PollUntilDone(ctx, freq, &respType.RestorePoint)
	if err != nil {
		return respType, err
	}
	respType.RawResponse = resp
	return respType, nil
}

// Resume rehydrates a SQLPoolRestorePointsCreatePollerResponse from the provided client and resume token.
func (l *SQLPoolRestorePointsCreatePollerResponse) Resume(ctx context.Context, client *SQLPoolRestorePointsClient, token string) error {
	pt, err := armruntime.NewPollerFromResumeToken("SQLPoolRestorePointsClient.Create", token, client.pl, client.createHandleError)
	if err != nil {
		return err
	}
	poller := &SQLPoolRestorePointsCreatePoller{
		pt: pt,
	}
	resp, err := poller.Poll(ctx)
	if err != nil {
		return err
	}
	l.Poller = poller
	l.RawResponse = resp
	return nil
}

// SQLPoolRestorePointsCreateResponse contains the response from method SQLPoolRestorePoints.Create.
type SQLPoolRestorePointsCreateResponse struct {
	SQLPoolRestorePointsCreateResult
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// SQLPoolRestorePointsCreateResult contains the result from method SQLPoolRestorePoints.Create.
type SQLPoolRestorePointsCreateResult struct {
	RestorePoint
}

// SQLPoolRestorePointsDeleteResponse contains the response from method SQLPoolRestorePoints.Delete.
type SQLPoolRestorePointsDeleteResponse struct {
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// SQLPoolRestorePointsGetResponse contains the response from method SQLPoolRestorePoints.Get.
type SQLPoolRestorePointsGetResponse struct {
	SQLPoolRestorePointsGetResult
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// SQLPoolRestorePointsGetResult contains the result from method SQLPoolRestorePoints.Get.
type SQLPoolRestorePointsGetResult struct {
	RestorePoint
}

// SQLPoolRestorePointsListResponse contains the response from method SQLPoolRestorePoints.List.
type SQLPoolRestorePointsListResponse struct {
	SQLPoolRestorePointsListResult
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// SQLPoolRestorePointsListResult contains the result from method SQLPoolRestorePoints.List.
type SQLPoolRestorePointsListResult struct {
	RestorePointListResult
}

// SQLPoolSchemasGetResponse contains the response from method SQLPoolSchemas.Get.
type SQLPoolSchemasGetResponse struct {
	SQLPoolSchemasGetResult
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// SQLPoolSchemasGetResult contains the result from method SQLPoolSchemas.Get.
type SQLPoolSchemasGetResult struct {
	SQLPoolSchema
}

// SQLPoolSchemasListResponse contains the response from method SQLPoolSchemas.List.
type SQLPoolSchemasListResponse struct {
	SQLPoolSchemasListResult
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// SQLPoolSchemasListResult contains the result from method SQLPoolSchemas.List.
type SQLPoolSchemasListResult struct {
	SQLPoolSchemaListResult
}

// SQLPoolSecurityAlertPoliciesCreateOrUpdateResponse contains the response from method SQLPoolSecurityAlertPolicies.CreateOrUpdate.
type SQLPoolSecurityAlertPoliciesCreateOrUpdateResponse struct {
	SQLPoolSecurityAlertPoliciesCreateOrUpdateResult
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// SQLPoolSecurityAlertPoliciesCreateOrUpdateResult contains the result from method SQLPoolSecurityAlertPolicies.CreateOrUpdate.
type SQLPoolSecurityAlertPoliciesCreateOrUpdateResult struct {
	SQLPoolSecurityAlertPolicy
}

// SQLPoolSecurityAlertPoliciesGetResponse contains the response from method SQLPoolSecurityAlertPolicies.Get.
type SQLPoolSecurityAlertPoliciesGetResponse struct {
	SQLPoolSecurityAlertPoliciesGetResult
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// SQLPoolSecurityAlertPoliciesGetResult contains the result from method SQLPoolSecurityAlertPolicies.Get.
type SQLPoolSecurityAlertPoliciesGetResult struct {
	SQLPoolSecurityAlertPolicy
}

// SQLPoolSecurityAlertPoliciesListResponse contains the response from method SQLPoolSecurityAlertPolicies.List.
type SQLPoolSecurityAlertPoliciesListResponse struct {
	SQLPoolSecurityAlertPoliciesListResult
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// SQLPoolSecurityAlertPoliciesListResult contains the result from method SQLPoolSecurityAlertPolicies.List.
type SQLPoolSecurityAlertPoliciesListResult struct {
	ListSQLPoolSecurityAlertPolicies
}

// SQLPoolSensitivityLabelsCreateOrUpdateResponse contains the response from method SQLPoolSensitivityLabels.CreateOrUpdate.
type SQLPoolSensitivityLabelsCreateOrUpdateResponse struct {
	SQLPoolSensitivityLabelsCreateOrUpdateResult
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// SQLPoolSensitivityLabelsCreateOrUpdateResult contains the result from method SQLPoolSensitivityLabels.CreateOrUpdate.
type SQLPoolSensitivityLabelsCreateOrUpdateResult struct {
	SensitivityLabel
}

// SQLPoolSensitivityLabelsDeleteResponse contains the response from method SQLPoolSensitivityLabels.Delete.
type SQLPoolSensitivityLabelsDeleteResponse struct {
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// SQLPoolSensitivityLabelsDisableRecommendationResponse contains the response from method SQLPoolSensitivityLabels.DisableRecommendation.
type SQLPoolSensitivityLabelsDisableRecommendationResponse struct {
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// SQLPoolSensitivityLabelsEnableRecommendationResponse contains the response from method SQLPoolSensitivityLabels.EnableRecommendation.
type SQLPoolSensitivityLabelsEnableRecommendationResponse struct {
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// SQLPoolSensitivityLabelsGetResponse contains the response from method SQLPoolSensitivityLabels.Get.
type SQLPoolSensitivityLabelsGetResponse struct {
	SQLPoolSensitivityLabelsGetResult
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// SQLPoolSensitivityLabelsGetResult contains the result from method SQLPoolSensitivityLabels.Get.
type SQLPoolSensitivityLabelsGetResult struct {
	SensitivityLabel
}

// SQLPoolSensitivityLabelsListCurrentResponse contains the response from method SQLPoolSensitivityLabels.ListCurrent.
type SQLPoolSensitivityLabelsListCurrentResponse struct {
	SQLPoolSensitivityLabelsListCurrentResult
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// SQLPoolSensitivityLabelsListCurrentResult contains the result from method SQLPoolSensitivityLabels.ListCurrent.
type SQLPoolSensitivityLabelsListCurrentResult struct {
	SensitivityLabelListResult
}

// SQLPoolSensitivityLabelsListRecommendedResponse contains the response from method SQLPoolSensitivityLabels.ListRecommended.
type SQLPoolSensitivityLabelsListRecommendedResponse struct {
	SQLPoolSensitivityLabelsListRecommendedResult
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// SQLPoolSensitivityLabelsListRecommendedResult contains the result from method SQLPoolSensitivityLabels.ListRecommended.
type SQLPoolSensitivityLabelsListRecommendedResult struct {
	SensitivityLabelListResult
}

// SQLPoolSensitivityLabelsUpdateResponse contains the response from method SQLPoolSensitivityLabels.Update.
type SQLPoolSensitivityLabelsUpdateResponse struct {
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// SQLPoolTableColumnsListByTableNameResponse contains the response from method SQLPoolTableColumns.ListByTableName.
type SQLPoolTableColumnsListByTableNameResponse struct {
	SQLPoolTableColumnsListByTableNameResult
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// SQLPoolTableColumnsListByTableNameResult contains the result from method SQLPoolTableColumns.ListByTableName.
type SQLPoolTableColumnsListByTableNameResult struct {
	SQLPoolColumnListResult
}

// SQLPoolTablesGetResponse contains the response from method SQLPoolTables.Get.
type SQLPoolTablesGetResponse struct {
	SQLPoolTablesGetResult
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// SQLPoolTablesGetResult contains the result from method SQLPoolTables.Get.
type SQLPoolTablesGetResult struct {
	SQLPoolTable
}

// SQLPoolTablesListBySchemaResponse contains the response from method SQLPoolTables.ListBySchema.
type SQLPoolTablesListBySchemaResponse struct {
	SQLPoolTablesListBySchemaResult
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// SQLPoolTablesListBySchemaResult contains the result from method SQLPoolTables.ListBySchema.
type SQLPoolTablesListBySchemaResult struct {
	SQLPoolTableListResult
}

// SQLPoolTransparentDataEncryptionsCreateOrUpdateResponse contains the response from method SQLPoolTransparentDataEncryptions.CreateOrUpdate.
type SQLPoolTransparentDataEncryptionsCreateOrUpdateResponse struct {
	SQLPoolTransparentDataEncryptionsCreateOrUpdateResult
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// SQLPoolTransparentDataEncryptionsCreateOrUpdateResult contains the result from method SQLPoolTransparentDataEncryptions.CreateOrUpdate.
type SQLPoolTransparentDataEncryptionsCreateOrUpdateResult struct {
	TransparentDataEncryption
}

// SQLPoolTransparentDataEncryptionsGetResponse contains the response from method SQLPoolTransparentDataEncryptions.Get.
type SQLPoolTransparentDataEncryptionsGetResponse struct {
	SQLPoolTransparentDataEncryptionsGetResult
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// SQLPoolTransparentDataEncryptionsGetResult contains the result from method SQLPoolTransparentDataEncryptions.Get.
type SQLPoolTransparentDataEncryptionsGetResult struct {
	TransparentDataEncryption
}

// SQLPoolTransparentDataEncryptionsListResponse contains the response from method SQLPoolTransparentDataEncryptions.List.
type SQLPoolTransparentDataEncryptionsListResponse struct {
	SQLPoolTransparentDataEncryptionsListResult
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// SQLPoolTransparentDataEncryptionsListResult contains the result from method SQLPoolTransparentDataEncryptions.List.
type SQLPoolTransparentDataEncryptionsListResult struct {
	TransparentDataEncryptionListResult
}

// SQLPoolUsagesListResponse contains the response from method SQLPoolUsages.List.
type SQLPoolUsagesListResponse struct {
	SQLPoolUsagesListResult
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// SQLPoolUsagesListResult contains the result from method SQLPoolUsages.List.
type SQLPoolUsagesListResult struct {
	SQLPoolUsageListResult
}

// SQLPoolVulnerabilityAssessmentRuleBaselinesCreateOrUpdateResponse contains the response from method SQLPoolVulnerabilityAssessmentRuleBaselines.CreateOrUpdate.
type SQLPoolVulnerabilityAssessmentRuleBaselinesCreateOrUpdateResponse struct {
	SQLPoolVulnerabilityAssessmentRuleBaselinesCreateOrUpdateResult
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// SQLPoolVulnerabilityAssessmentRuleBaselinesCreateOrUpdateResult contains the result from method SQLPoolVulnerabilityAssessmentRuleBaselines.CreateOrUpdate.
type SQLPoolVulnerabilityAssessmentRuleBaselinesCreateOrUpdateResult struct {
	SQLPoolVulnerabilityAssessmentRuleBaseline
}

// SQLPoolVulnerabilityAssessmentRuleBaselinesDeleteResponse contains the response from method SQLPoolVulnerabilityAssessmentRuleBaselines.Delete.
type SQLPoolVulnerabilityAssessmentRuleBaselinesDeleteResponse struct {
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// SQLPoolVulnerabilityAssessmentRuleBaselinesGetResponse contains the response from method SQLPoolVulnerabilityAssessmentRuleBaselines.Get.
type SQLPoolVulnerabilityAssessmentRuleBaselinesGetResponse struct {
	SQLPoolVulnerabilityAssessmentRuleBaselinesGetResult
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// SQLPoolVulnerabilityAssessmentRuleBaselinesGetResult contains the result from method SQLPoolVulnerabilityAssessmentRuleBaselines.Get.
type SQLPoolVulnerabilityAssessmentRuleBaselinesGetResult struct {
	SQLPoolVulnerabilityAssessmentRuleBaseline
}

// SQLPoolVulnerabilityAssessmentScansExportResponse contains the response from method SQLPoolVulnerabilityAssessmentScans.Export.
type SQLPoolVulnerabilityAssessmentScansExportResponse struct {
	SQLPoolVulnerabilityAssessmentScansExportResult
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// SQLPoolVulnerabilityAssessmentScansExportResult contains the result from method SQLPoolVulnerabilityAssessmentScans.Export.
type SQLPoolVulnerabilityAssessmentScansExportResult struct {
	SQLPoolVulnerabilityAssessmentScansExport
}

// SQLPoolVulnerabilityAssessmentScansGetResponse contains the response from method SQLPoolVulnerabilityAssessmentScans.Get.
type SQLPoolVulnerabilityAssessmentScansGetResponse struct {
	SQLPoolVulnerabilityAssessmentScansGetResult
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// SQLPoolVulnerabilityAssessmentScansGetResult contains the result from method SQLPoolVulnerabilityAssessmentScans.Get.
type SQLPoolVulnerabilityAssessmentScansGetResult struct {
	VulnerabilityAssessmentScanRecord
}

// SQLPoolVulnerabilityAssessmentScansInitiateScanPollerResponse contains the response from method SQLPoolVulnerabilityAssessmentScans.InitiateScan.
type SQLPoolVulnerabilityAssessmentScansInitiateScanPollerResponse struct {
	// Poller contains an initialized poller.
	Poller *SQLPoolVulnerabilityAssessmentScansInitiateScanPoller

	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// PollUntilDone will poll the service endpoint until a terminal state is reached or an error is received.
// freq: the time to wait between intervals in absence of a Retry-After header. Allowed minimum is one second.
// A good starting value is 30 seconds. Note that some resources might benefit from a different value.
func (l SQLPoolVulnerabilityAssessmentScansInitiateScanPollerResponse) PollUntilDone(ctx context.Context, freq time.Duration) (SQLPoolVulnerabilityAssessmentScansInitiateScanResponse, error) {
	respType := SQLPoolVulnerabilityAssessmentScansInitiateScanResponse{}
	resp, err := l.Poller.pt.PollUntilDone(ctx, freq, nil)
	if err != nil {
		return respType, err
	}
	respType.RawResponse = resp
	return respType, nil
}

// Resume rehydrates a SQLPoolVulnerabilityAssessmentScansInitiateScanPollerResponse from the provided client and resume token.
func (l *SQLPoolVulnerabilityAssessmentScansInitiateScanPollerResponse) Resume(ctx context.Context, client *SQLPoolVulnerabilityAssessmentScansClient, token string) error {
	pt, err := armruntime.NewPollerFromResumeToken("SQLPoolVulnerabilityAssessmentScansClient.InitiateScan", token, client.pl, client.initiateScanHandleError)
	if err != nil {
		return err
	}
	poller := &SQLPoolVulnerabilityAssessmentScansInitiateScanPoller{
		pt: pt,
	}
	resp, err := poller.Poll(ctx)
	if err != nil {
		return err
	}
	l.Poller = poller
	l.RawResponse = resp
	return nil
}

// SQLPoolVulnerabilityAssessmentScansInitiateScanResponse contains the response from method SQLPoolVulnerabilityAssessmentScans.InitiateScan.
type SQLPoolVulnerabilityAssessmentScansInitiateScanResponse struct {
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// SQLPoolVulnerabilityAssessmentScansListResponse contains the response from method SQLPoolVulnerabilityAssessmentScans.List.
type SQLPoolVulnerabilityAssessmentScansListResponse struct {
	SQLPoolVulnerabilityAssessmentScansListResult
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// SQLPoolVulnerabilityAssessmentScansListResult contains the result from method SQLPoolVulnerabilityAssessmentScans.List.
type SQLPoolVulnerabilityAssessmentScansListResult struct {
	VulnerabilityAssessmentScanRecordListResult
}

// SQLPoolVulnerabilityAssessmentsCreateOrUpdateResponse contains the response from method SQLPoolVulnerabilityAssessments.CreateOrUpdate.
type SQLPoolVulnerabilityAssessmentsCreateOrUpdateResponse struct {
	SQLPoolVulnerabilityAssessmentsCreateOrUpdateResult
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// SQLPoolVulnerabilityAssessmentsCreateOrUpdateResult contains the result from method SQLPoolVulnerabilityAssessments.CreateOrUpdate.
type SQLPoolVulnerabilityAssessmentsCreateOrUpdateResult struct {
	SQLPoolVulnerabilityAssessment
}

// SQLPoolVulnerabilityAssessmentsDeleteResponse contains the response from method SQLPoolVulnerabilityAssessments.Delete.
type SQLPoolVulnerabilityAssessmentsDeleteResponse struct {
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// SQLPoolVulnerabilityAssessmentsGetResponse contains the response from method SQLPoolVulnerabilityAssessments.Get.
type SQLPoolVulnerabilityAssessmentsGetResponse struct {
	SQLPoolVulnerabilityAssessmentsGetResult
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// SQLPoolVulnerabilityAssessmentsGetResult contains the result from method SQLPoolVulnerabilityAssessments.Get.
type SQLPoolVulnerabilityAssessmentsGetResult struct {
	SQLPoolVulnerabilityAssessment
}

// SQLPoolVulnerabilityAssessmentsListResponse contains the response from method SQLPoolVulnerabilityAssessments.List.
type SQLPoolVulnerabilityAssessmentsListResponse struct {
	SQLPoolVulnerabilityAssessmentsListResult
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// SQLPoolVulnerabilityAssessmentsListResult contains the result from method SQLPoolVulnerabilityAssessments.List.
type SQLPoolVulnerabilityAssessmentsListResult struct {
	SQLPoolVulnerabilityAssessmentListResult
}

// SQLPoolWorkloadClassifierCreateOrUpdatePollerResponse contains the response from method SQLPoolWorkloadClassifier.CreateOrUpdate.
type SQLPoolWorkloadClassifierCreateOrUpdatePollerResponse struct {
	// Poller contains an initialized poller.
	Poller *SQLPoolWorkloadClassifierCreateOrUpdatePoller

	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// PollUntilDone will poll the service endpoint until a terminal state is reached or an error is received.
// freq: the time to wait between intervals in absence of a Retry-After header. Allowed minimum is one second.
// A good starting value is 30 seconds. Note that some resources might benefit from a different value.
func (l SQLPoolWorkloadClassifierCreateOrUpdatePollerResponse) PollUntilDone(ctx context.Context, freq time.Duration) (SQLPoolWorkloadClassifierCreateOrUpdateResponse, error) {
	respType := SQLPoolWorkloadClassifierCreateOrUpdateResponse{}
	resp, err := l.Poller.pt.PollUntilDone(ctx, freq, &respType.WorkloadClassifier)
	if err != nil {
		return respType, err
	}
	respType.RawResponse = resp
	return respType, nil
}

// Resume rehydrates a SQLPoolWorkloadClassifierCreateOrUpdatePollerResponse from the provided client and resume token.
func (l *SQLPoolWorkloadClassifierCreateOrUpdatePollerResponse) Resume(ctx context.Context, client *SQLPoolWorkloadClassifierClient, token string) error {
	pt, err := armruntime.NewPollerFromResumeToken("SQLPoolWorkloadClassifierClient.CreateOrUpdate", token, client.pl, client.createOrUpdateHandleError)
	if err != nil {
		return err
	}
	poller := &SQLPoolWorkloadClassifierCreateOrUpdatePoller{
		pt: pt,
	}
	resp, err := poller.Poll(ctx)
	if err != nil {
		return err
	}
	l.Poller = poller
	l.RawResponse = resp
	return nil
}

// SQLPoolWorkloadClassifierCreateOrUpdateResponse contains the response from method SQLPoolWorkloadClassifier.CreateOrUpdate.
type SQLPoolWorkloadClassifierCreateOrUpdateResponse struct {
	SQLPoolWorkloadClassifierCreateOrUpdateResult
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// SQLPoolWorkloadClassifierCreateOrUpdateResult contains the result from method SQLPoolWorkloadClassifier.CreateOrUpdate.
type SQLPoolWorkloadClassifierCreateOrUpdateResult struct {
	WorkloadClassifier
}

// SQLPoolWorkloadClassifierDeletePollerResponse contains the response from method SQLPoolWorkloadClassifier.Delete.
type SQLPoolWorkloadClassifierDeletePollerResponse struct {
	// Poller contains an initialized poller.
	Poller *SQLPoolWorkloadClassifierDeletePoller

	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// PollUntilDone will poll the service endpoint until a terminal state is reached or an error is received.
// freq: the time to wait between intervals in absence of a Retry-After header. Allowed minimum is one second.
// A good starting value is 30 seconds. Note that some resources might benefit from a different value.
func (l SQLPoolWorkloadClassifierDeletePollerResponse) PollUntilDone(ctx context.Context, freq time.Duration) (SQLPoolWorkloadClassifierDeleteResponse, error) {
	respType := SQLPoolWorkloadClassifierDeleteResponse{}
	resp, err := l.Poller.pt.PollUntilDone(ctx, freq, nil)
	if err != nil {
		return respType, err
	}
	respType.RawResponse = resp
	return respType, nil
}

// Resume rehydrates a SQLPoolWorkloadClassifierDeletePollerResponse from the provided client and resume token.
func (l *SQLPoolWorkloadClassifierDeletePollerResponse) Resume(ctx context.Context, client *SQLPoolWorkloadClassifierClient, token string) error {
	pt, err := armruntime.NewPollerFromResumeToken("SQLPoolWorkloadClassifierClient.Delete", token, client.pl, client.deleteHandleError)
	if err != nil {
		return err
	}
	poller := &SQLPoolWorkloadClassifierDeletePoller{
		pt: pt,
	}
	resp, err := poller.Poll(ctx)
	if err != nil {
		return err
	}
	l.Poller = poller
	l.RawResponse = resp
	return nil
}

// SQLPoolWorkloadClassifierDeleteResponse contains the response from method SQLPoolWorkloadClassifier.Delete.
type SQLPoolWorkloadClassifierDeleteResponse struct {
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// SQLPoolWorkloadClassifierGetResponse contains the response from method SQLPoolWorkloadClassifier.Get.
type SQLPoolWorkloadClassifierGetResponse struct {
	SQLPoolWorkloadClassifierGetResult
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// SQLPoolWorkloadClassifierGetResult contains the result from method SQLPoolWorkloadClassifier.Get.
type SQLPoolWorkloadClassifierGetResult struct {
	WorkloadClassifier
}

// SQLPoolWorkloadClassifierListResponse contains the response from method SQLPoolWorkloadClassifier.List.
type SQLPoolWorkloadClassifierListResponse struct {
	SQLPoolWorkloadClassifierListResult
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// SQLPoolWorkloadClassifierListResult contains the result from method SQLPoolWorkloadClassifier.List.
type SQLPoolWorkloadClassifierListResult struct {
	WorkloadClassifierListResult
}

// SQLPoolWorkloadGroupCreateOrUpdatePollerResponse contains the response from method SQLPoolWorkloadGroup.CreateOrUpdate.
type SQLPoolWorkloadGroupCreateOrUpdatePollerResponse struct {
	// Poller contains an initialized poller.
	Poller *SQLPoolWorkloadGroupCreateOrUpdatePoller

	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// PollUntilDone will poll the service endpoint until a terminal state is reached or an error is received.
// freq: the time to wait between intervals in absence of a Retry-After header. Allowed minimum is one second.
// A good starting value is 30 seconds. Note that some resources might benefit from a different value.
func (l SQLPoolWorkloadGroupCreateOrUpdatePollerResponse) PollUntilDone(ctx context.Context, freq time.Duration) (SQLPoolWorkloadGroupCreateOrUpdateResponse, error) {
	respType := SQLPoolWorkloadGroupCreateOrUpdateResponse{}
	resp, err := l.Poller.pt.PollUntilDone(ctx, freq, &respType.WorkloadGroup)
	if err != nil {
		return respType, err
	}
	respType.RawResponse = resp
	return respType, nil
}

// Resume rehydrates a SQLPoolWorkloadGroupCreateOrUpdatePollerResponse from the provided client and resume token.
func (l *SQLPoolWorkloadGroupCreateOrUpdatePollerResponse) Resume(ctx context.Context, client *SQLPoolWorkloadGroupClient, token string) error {
	pt, err := armruntime.NewPollerFromResumeToken("SQLPoolWorkloadGroupClient.CreateOrUpdate", token, client.pl, client.createOrUpdateHandleError)
	if err != nil {
		return err
	}
	poller := &SQLPoolWorkloadGroupCreateOrUpdatePoller{
		pt: pt,
	}
	resp, err := poller.Poll(ctx)
	if err != nil {
		return err
	}
	l.Poller = poller
	l.RawResponse = resp
	return nil
}

// SQLPoolWorkloadGroupCreateOrUpdateResponse contains the response from method SQLPoolWorkloadGroup.CreateOrUpdate.
type SQLPoolWorkloadGroupCreateOrUpdateResponse struct {
	SQLPoolWorkloadGroupCreateOrUpdateResult
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// SQLPoolWorkloadGroupCreateOrUpdateResult contains the result from method SQLPoolWorkloadGroup.CreateOrUpdate.
type SQLPoolWorkloadGroupCreateOrUpdateResult struct {
	WorkloadGroup
}

// SQLPoolWorkloadGroupDeletePollerResponse contains the response from method SQLPoolWorkloadGroup.Delete.
type SQLPoolWorkloadGroupDeletePollerResponse struct {
	// Poller contains an initialized poller.
	Poller *SQLPoolWorkloadGroupDeletePoller

	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// PollUntilDone will poll the service endpoint until a terminal state is reached or an error is received.
// freq: the time to wait between intervals in absence of a Retry-After header. Allowed minimum is one second.
// A good starting value is 30 seconds. Note that some resources might benefit from a different value.
func (l SQLPoolWorkloadGroupDeletePollerResponse) PollUntilDone(ctx context.Context, freq time.Duration) (SQLPoolWorkloadGroupDeleteResponse, error) {
	respType := SQLPoolWorkloadGroupDeleteResponse{}
	resp, err := l.Poller.pt.PollUntilDone(ctx, freq, nil)
	if err != nil {
		return respType, err
	}
	respType.RawResponse = resp
	return respType, nil
}

// Resume rehydrates a SQLPoolWorkloadGroupDeletePollerResponse from the provided client and resume token.
func (l *SQLPoolWorkloadGroupDeletePollerResponse) Resume(ctx context.Context, client *SQLPoolWorkloadGroupClient, token string) error {
	pt, err := armruntime.NewPollerFromResumeToken("SQLPoolWorkloadGroupClient.Delete", token, client.pl, client.deleteHandleError)
	if err != nil {
		return err
	}
	poller := &SQLPoolWorkloadGroupDeletePoller{
		pt: pt,
	}
	resp, err := poller.Poll(ctx)
	if err != nil {
		return err
	}
	l.Poller = poller
	l.RawResponse = resp
	return nil
}

// SQLPoolWorkloadGroupDeleteResponse contains the response from method SQLPoolWorkloadGroup.Delete.
type SQLPoolWorkloadGroupDeleteResponse struct {
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// SQLPoolWorkloadGroupGetResponse contains the response from method SQLPoolWorkloadGroup.Get.
type SQLPoolWorkloadGroupGetResponse struct {
	SQLPoolWorkloadGroupGetResult
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// SQLPoolWorkloadGroupGetResult contains the result from method SQLPoolWorkloadGroup.Get.
type SQLPoolWorkloadGroupGetResult struct {
	WorkloadGroup
}

// SQLPoolWorkloadGroupListResponse contains the response from method SQLPoolWorkloadGroup.List.
type SQLPoolWorkloadGroupListResponse struct {
	SQLPoolWorkloadGroupListResult
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// SQLPoolWorkloadGroupListResult contains the result from method SQLPoolWorkloadGroup.List.
type SQLPoolWorkloadGroupListResult struct {
	WorkloadGroupListResult
}

// SQLPoolsCreatePollerResponse contains the response from method SQLPools.Create.
type SQLPoolsCreatePollerResponse struct {
	// Poller contains an initialized poller.
	Poller *SQLPoolsCreatePoller

	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// PollUntilDone will poll the service endpoint until a terminal state is reached or an error is received.
// freq: the time to wait between intervals in absence of a Retry-After header. Allowed minimum is one second.
// A good starting value is 30 seconds. Note that some resources might benefit from a different value.
func (l SQLPoolsCreatePollerResponse) PollUntilDone(ctx context.Context, freq time.Duration) (SQLPoolsCreateResponse, error) {
	respType := SQLPoolsCreateResponse{}
	resp, err := l.Poller.pt.PollUntilDone(ctx, freq, &respType.SQLPool)
	if err != nil {
		return respType, err
	}
	respType.RawResponse = resp
	return respType, nil
}

// Resume rehydrates a SQLPoolsCreatePollerResponse from the provided client and resume token.
func (l *SQLPoolsCreatePollerResponse) Resume(ctx context.Context, client *SQLPoolsClient, token string) error {
	pt, err := armruntime.NewPollerFromResumeToken("SQLPoolsClient.Create", token, client.pl, client.createHandleError)
	if err != nil {
		return err
	}
	poller := &SQLPoolsCreatePoller{
		pt: pt,
	}
	resp, err := poller.Poll(ctx)
	if err != nil {
		return err
	}
	l.Poller = poller
	l.RawResponse = resp
	return nil
}

// SQLPoolsCreateResponse contains the response from method SQLPools.Create.
type SQLPoolsCreateResponse struct {
	SQLPoolsCreateResult
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// SQLPoolsCreateResult contains the result from method SQLPools.Create.
type SQLPoolsCreateResult struct {
	SQLPool
}

// SQLPoolsDeletePollerResponse contains the response from method SQLPools.Delete.
type SQLPoolsDeletePollerResponse struct {
	// Poller contains an initialized poller.
	Poller *SQLPoolsDeletePoller

	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// PollUntilDone will poll the service endpoint until a terminal state is reached or an error is received.
// freq: the time to wait between intervals in absence of a Retry-After header. Allowed minimum is one second.
// A good starting value is 30 seconds. Note that some resources might benefit from a different value.
func (l SQLPoolsDeletePollerResponse) PollUntilDone(ctx context.Context, freq time.Duration) (SQLPoolsDeleteResponse, error) {
	respType := SQLPoolsDeleteResponse{}
	resp, err := l.Poller.pt.PollUntilDone(ctx, freq, &respType.Object)
	if err != nil {
		return respType, err
	}
	respType.RawResponse = resp
	return respType, nil
}

// Resume rehydrates a SQLPoolsDeletePollerResponse from the provided client and resume token.
func (l *SQLPoolsDeletePollerResponse) Resume(ctx context.Context, client *SQLPoolsClient, token string) error {
	pt, err := armruntime.NewPollerFromResumeToken("SQLPoolsClient.Delete", token, client.pl, client.deleteHandleError)
	if err != nil {
		return err
	}
	poller := &SQLPoolsDeletePoller{
		pt: pt,
	}
	resp, err := poller.Poll(ctx)
	if err != nil {
		return err
	}
	l.Poller = poller
	l.RawResponse = resp
	return nil
}

// SQLPoolsDeleteResponse contains the response from method SQLPools.Delete.
type SQLPoolsDeleteResponse struct {
	SQLPoolsDeleteResult
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// SQLPoolsDeleteResult contains the result from method SQLPools.Delete.
type SQLPoolsDeleteResult struct {
	// Any object
	Object map[string]interface{}
}

// SQLPoolsGetResponse contains the response from method SQLPools.Get.
type SQLPoolsGetResponse struct {
	SQLPoolsGetResult
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// SQLPoolsGetResult contains the result from method SQLPools.Get.
type SQLPoolsGetResult struct {
	SQLPool
}

// SQLPoolsListByWorkspaceResponse contains the response from method SQLPools.ListByWorkspace.
type SQLPoolsListByWorkspaceResponse struct {
	SQLPoolsListByWorkspaceResult
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// SQLPoolsListByWorkspaceResult contains the result from method SQLPools.ListByWorkspace.
type SQLPoolsListByWorkspaceResult struct {
	SQLPoolInfoListResult
}

// SQLPoolsPausePollerResponse contains the response from method SQLPools.Pause.
type SQLPoolsPausePollerResponse struct {
	// Poller contains an initialized poller.
	Poller *SQLPoolsPausePoller

	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// PollUntilDone will poll the service endpoint until a terminal state is reached or an error is received.
// freq: the time to wait between intervals in absence of a Retry-After header. Allowed minimum is one second.
// A good starting value is 30 seconds. Note that some resources might benefit from a different value.
func (l SQLPoolsPausePollerResponse) PollUntilDone(ctx context.Context, freq time.Duration) (SQLPoolsPauseResponse, error) {
	respType := SQLPoolsPauseResponse{}
	resp, err := l.Poller.pt.PollUntilDone(ctx, freq, &respType.Object)
	if err != nil {
		return respType, err
	}
	respType.RawResponse = resp
	return respType, nil
}

// Resume rehydrates a SQLPoolsPausePollerResponse from the provided client and resume token.
func (l *SQLPoolsPausePollerResponse) Resume(ctx context.Context, client *SQLPoolsClient, token string) error {
	pt, err := armruntime.NewPollerFromResumeToken("SQLPoolsClient.Pause", token, client.pl, client.pauseHandleError)
	if err != nil {
		return err
	}
	poller := &SQLPoolsPausePoller{
		pt: pt,
	}
	resp, err := poller.Poll(ctx)
	if err != nil {
		return err
	}
	l.Poller = poller
	l.RawResponse = resp
	return nil
}

// SQLPoolsPauseResponse contains the response from method SQLPools.Pause.
type SQLPoolsPauseResponse struct {
	SQLPoolsPauseResult
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// SQLPoolsPauseResult contains the result from method SQLPools.Pause.
type SQLPoolsPauseResult struct {
	// Any object
	Object map[string]interface{}
}

// SQLPoolsRenameResponse contains the response from method SQLPools.Rename.
type SQLPoolsRenameResponse struct {
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// SQLPoolsResumePollerResponse contains the response from method SQLPools.Resume.
type SQLPoolsResumePollerResponse struct {
	// Poller contains an initialized poller.
	Poller *SQLPoolsResumePoller

	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// PollUntilDone will poll the service endpoint until a terminal state is reached or an error is received.
// freq: the time to wait between intervals in absence of a Retry-After header. Allowed minimum is one second.
// A good starting value is 30 seconds. Note that some resources might benefit from a different value.
func (l SQLPoolsResumePollerResponse) PollUntilDone(ctx context.Context, freq time.Duration) (SQLPoolsResumeResponse, error) {
	respType := SQLPoolsResumeResponse{}
	resp, err := l.Poller.pt.PollUntilDone(ctx, freq, &respType.Object)
	if err != nil {
		return respType, err
	}
	respType.RawResponse = resp
	return respType, nil
}

// Resume rehydrates a SQLPoolsResumePollerResponse from the provided client and resume token.
func (l *SQLPoolsResumePollerResponse) Resume(ctx context.Context, client *SQLPoolsClient, token string) error {
	pt, err := armruntime.NewPollerFromResumeToken("SQLPoolsClient.Resume", token, client.pl, client.resumeHandleError)
	if err != nil {
		return err
	}
	poller := &SQLPoolsResumePoller{
		pt: pt,
	}
	resp, err := poller.Poll(ctx)
	if err != nil {
		return err
	}
	l.Poller = poller
	l.RawResponse = resp
	return nil
}

// SQLPoolsResumeResponse contains the response from method SQLPools.Resume.
type SQLPoolsResumeResponse struct {
	SQLPoolsResumeResult
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// SQLPoolsResumeResult contains the result from method SQLPools.Resume.
type SQLPoolsResumeResult struct {
	// Any object
	Object map[string]interface{}
}

// SQLPoolsUpdateResponse contains the response from method SQLPools.Update.
type SQLPoolsUpdateResponse struct {
	SQLPoolsUpdateResult
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// SQLPoolsUpdateResult contains the result from method SQLPools.Update.
type SQLPoolsUpdateResult struct {
	SQLPool
}

// SparkConfigurationGetResponse contains the response from method SparkConfiguration.Get.
type SparkConfigurationGetResponse struct {
	SparkConfigurationGetResult
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// SparkConfigurationGetResult contains the result from method SparkConfiguration.Get.
type SparkConfigurationGetResult struct {
	SparkConfigurationResource
}

// SparkConfigurationsListByWorkspaceResponse contains the response from method SparkConfigurations.ListByWorkspace.
type SparkConfigurationsListByWorkspaceResponse struct {
	SparkConfigurationsListByWorkspaceResult
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// SparkConfigurationsListByWorkspaceResult contains the result from method SparkConfigurations.ListByWorkspace.
type SparkConfigurationsListByWorkspaceResult struct {
	SparkConfigurationListResponse
}

// WorkspaceAADAdminsCreateOrUpdatePollerResponse contains the response from method WorkspaceAADAdmins.CreateOrUpdate.
type WorkspaceAADAdminsCreateOrUpdatePollerResponse struct {
	// Poller contains an initialized poller.
	Poller *WorkspaceAADAdminsCreateOrUpdatePoller

	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// PollUntilDone will poll the service endpoint until a terminal state is reached or an error is received.
// freq: the time to wait between intervals in absence of a Retry-After header. Allowed minimum is one second.
// A good starting value is 30 seconds. Note that some resources might benefit from a different value.
func (l WorkspaceAADAdminsCreateOrUpdatePollerResponse) PollUntilDone(ctx context.Context, freq time.Duration) (WorkspaceAADAdminsCreateOrUpdateResponse, error) {
	respType := WorkspaceAADAdminsCreateOrUpdateResponse{}
	resp, err := l.Poller.pt.PollUntilDone(ctx, freq, &respType.WorkspaceAADAdminInfo)
	if err != nil {
		return respType, err
	}
	respType.RawResponse = resp
	return respType, nil
}

// Resume rehydrates a WorkspaceAADAdminsCreateOrUpdatePollerResponse from the provided client and resume token.
func (l *WorkspaceAADAdminsCreateOrUpdatePollerResponse) Resume(ctx context.Context, client *WorkspaceAADAdminsClient, token string) error {
	pt, err := armruntime.NewPollerFromResumeToken("WorkspaceAADAdminsClient.CreateOrUpdate", token, client.pl, client.createOrUpdateHandleError)
	if err != nil {
		return err
	}
	poller := &WorkspaceAADAdminsCreateOrUpdatePoller{
		pt: pt,
	}
	resp, err := poller.Poll(ctx)
	if err != nil {
		return err
	}
	l.Poller = poller
	l.RawResponse = resp
	return nil
}

// WorkspaceAADAdminsCreateOrUpdateResponse contains the response from method WorkspaceAADAdmins.CreateOrUpdate.
type WorkspaceAADAdminsCreateOrUpdateResponse struct {
	WorkspaceAADAdminsCreateOrUpdateResult
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// WorkspaceAADAdminsCreateOrUpdateResult contains the result from method WorkspaceAADAdmins.CreateOrUpdate.
type WorkspaceAADAdminsCreateOrUpdateResult struct {
	WorkspaceAADAdminInfo
}

// WorkspaceAADAdminsDeletePollerResponse contains the response from method WorkspaceAADAdmins.Delete.
type WorkspaceAADAdminsDeletePollerResponse struct {
	// Poller contains an initialized poller.
	Poller *WorkspaceAADAdminsDeletePoller

	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// PollUntilDone will poll the service endpoint until a terminal state is reached or an error is received.
// freq: the time to wait between intervals in absence of a Retry-After header. Allowed minimum is one second.
// A good starting value is 30 seconds. Note that some resources might benefit from a different value.
func (l WorkspaceAADAdminsDeletePollerResponse) PollUntilDone(ctx context.Context, freq time.Duration) (WorkspaceAADAdminsDeleteResponse, error) {
	respType := WorkspaceAADAdminsDeleteResponse{}
	resp, err := l.Poller.pt.PollUntilDone(ctx, freq, nil)
	if err != nil {
		return respType, err
	}
	respType.RawResponse = resp
	return respType, nil
}

// Resume rehydrates a WorkspaceAADAdminsDeletePollerResponse from the provided client and resume token.
func (l *WorkspaceAADAdminsDeletePollerResponse) Resume(ctx context.Context, client *WorkspaceAADAdminsClient, token string) error {
	pt, err := armruntime.NewPollerFromResumeToken("WorkspaceAADAdminsClient.Delete", token, client.pl, client.deleteHandleError)
	if err != nil {
		return err
	}
	poller := &WorkspaceAADAdminsDeletePoller{
		pt: pt,
	}
	resp, err := poller.Poll(ctx)
	if err != nil {
		return err
	}
	l.Poller = poller
	l.RawResponse = resp
	return nil
}

// WorkspaceAADAdminsDeleteResponse contains the response from method WorkspaceAADAdmins.Delete.
type WorkspaceAADAdminsDeleteResponse struct {
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// WorkspaceAADAdminsGetResponse contains the response from method WorkspaceAADAdmins.Get.
type WorkspaceAADAdminsGetResponse struct {
	WorkspaceAADAdminsGetResult
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// WorkspaceAADAdminsGetResult contains the result from method WorkspaceAADAdmins.Get.
type WorkspaceAADAdminsGetResult struct {
	WorkspaceAADAdminInfo
}

// WorkspaceManagedIdentitySQLControlSettingsCreateOrUpdatePollerResponse contains the response from method WorkspaceManagedIdentitySQLControlSettings.CreateOrUpdate.
type WorkspaceManagedIdentitySQLControlSettingsCreateOrUpdatePollerResponse struct {
	// Poller contains an initialized poller.
	Poller *WorkspaceManagedIdentitySQLControlSettingsCreateOrUpdatePoller

	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// PollUntilDone will poll the service endpoint until a terminal state is reached or an error is received.
// freq: the time to wait between intervals in absence of a Retry-After header. Allowed minimum is one second.
// A good starting value is 30 seconds. Note that some resources might benefit from a different value.
func (l WorkspaceManagedIdentitySQLControlSettingsCreateOrUpdatePollerResponse) PollUntilDone(ctx context.Context, freq time.Duration) (WorkspaceManagedIdentitySQLControlSettingsCreateOrUpdateResponse, error) {
	respType := WorkspaceManagedIdentitySQLControlSettingsCreateOrUpdateResponse{}
	resp, err := l.Poller.pt.PollUntilDone(ctx, freq, &respType.ManagedIdentitySQLControlSettingsModel)
	if err != nil {
		return respType, err
	}
	respType.RawResponse = resp
	return respType, nil
}

// Resume rehydrates a WorkspaceManagedIdentitySQLControlSettingsCreateOrUpdatePollerResponse from the provided client and resume token.
func (l *WorkspaceManagedIdentitySQLControlSettingsCreateOrUpdatePollerResponse) Resume(ctx context.Context, client *WorkspaceManagedIdentitySQLControlSettingsClient, token string) error {
	pt, err := armruntime.NewPollerFromResumeToken("WorkspaceManagedIdentitySQLControlSettingsClient.CreateOrUpdate", token, client.pl, client.createOrUpdateHandleError)
	if err != nil {
		return err
	}
	poller := &WorkspaceManagedIdentitySQLControlSettingsCreateOrUpdatePoller{
		pt: pt,
	}
	resp, err := poller.Poll(ctx)
	if err != nil {
		return err
	}
	l.Poller = poller
	l.RawResponse = resp
	return nil
}

// WorkspaceManagedIdentitySQLControlSettingsCreateOrUpdateResponse contains the response from method WorkspaceManagedIdentitySQLControlSettings.CreateOrUpdate.
type WorkspaceManagedIdentitySQLControlSettingsCreateOrUpdateResponse struct {
	WorkspaceManagedIdentitySQLControlSettingsCreateOrUpdateResult
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// WorkspaceManagedIdentitySQLControlSettingsCreateOrUpdateResult contains the result from method WorkspaceManagedIdentitySQLControlSettings.CreateOrUpdate.
type WorkspaceManagedIdentitySQLControlSettingsCreateOrUpdateResult struct {
	ManagedIdentitySQLControlSettingsModel
}

// WorkspaceManagedIdentitySQLControlSettingsGetResponse contains the response from method WorkspaceManagedIdentitySQLControlSettings.Get.
type WorkspaceManagedIdentitySQLControlSettingsGetResponse struct {
	WorkspaceManagedIdentitySQLControlSettingsGetResult
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// WorkspaceManagedIdentitySQLControlSettingsGetResult contains the result from method WorkspaceManagedIdentitySQLControlSettings.Get.
type WorkspaceManagedIdentitySQLControlSettingsGetResult struct {
	ManagedIdentitySQLControlSettingsModel
}

// WorkspaceManagedSQLServerBlobAuditingPoliciesCreateOrUpdatePollerResponse contains the response from method WorkspaceManagedSQLServerBlobAuditingPolicies.CreateOrUpdate.
type WorkspaceManagedSQLServerBlobAuditingPoliciesCreateOrUpdatePollerResponse struct {
	// Poller contains an initialized poller.
	Poller *WorkspaceManagedSQLServerBlobAuditingPoliciesCreateOrUpdatePoller

	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// PollUntilDone will poll the service endpoint until a terminal state is reached or an error is received.
// freq: the time to wait between intervals in absence of a Retry-After header. Allowed minimum is one second.
// A good starting value is 30 seconds. Note that some resources might benefit from a different value.
func (l WorkspaceManagedSQLServerBlobAuditingPoliciesCreateOrUpdatePollerResponse) PollUntilDone(ctx context.Context, freq time.Duration) (WorkspaceManagedSQLServerBlobAuditingPoliciesCreateOrUpdateResponse, error) {
	respType := WorkspaceManagedSQLServerBlobAuditingPoliciesCreateOrUpdateResponse{}
	resp, err := l.Poller.pt.PollUntilDone(ctx, freq, &respType.ServerBlobAuditingPolicy)
	if err != nil {
		return respType, err
	}
	respType.RawResponse = resp
	return respType, nil
}

// Resume rehydrates a WorkspaceManagedSQLServerBlobAuditingPoliciesCreateOrUpdatePollerResponse from the provided client and resume token.
func (l *WorkspaceManagedSQLServerBlobAuditingPoliciesCreateOrUpdatePollerResponse) Resume(ctx context.Context, client *WorkspaceManagedSQLServerBlobAuditingPoliciesClient, token string) error {
	pt, err := armruntime.NewPollerFromResumeToken("WorkspaceManagedSQLServerBlobAuditingPoliciesClient.CreateOrUpdate", token, client.pl, client.createOrUpdateHandleError)
	if err != nil {
		return err
	}
	poller := &WorkspaceManagedSQLServerBlobAuditingPoliciesCreateOrUpdatePoller{
		pt: pt,
	}
	resp, err := poller.Poll(ctx)
	if err != nil {
		return err
	}
	l.Poller = poller
	l.RawResponse = resp
	return nil
}

// WorkspaceManagedSQLServerBlobAuditingPoliciesCreateOrUpdateResponse contains the response from method WorkspaceManagedSQLServerBlobAuditingPolicies.CreateOrUpdate.
type WorkspaceManagedSQLServerBlobAuditingPoliciesCreateOrUpdateResponse struct {
	WorkspaceManagedSQLServerBlobAuditingPoliciesCreateOrUpdateResult
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// WorkspaceManagedSQLServerBlobAuditingPoliciesCreateOrUpdateResult contains the result from method WorkspaceManagedSQLServerBlobAuditingPolicies.CreateOrUpdate.
type WorkspaceManagedSQLServerBlobAuditingPoliciesCreateOrUpdateResult struct {
	ServerBlobAuditingPolicy
}

// WorkspaceManagedSQLServerBlobAuditingPoliciesGetResponse contains the response from method WorkspaceManagedSQLServerBlobAuditingPolicies.Get.
type WorkspaceManagedSQLServerBlobAuditingPoliciesGetResponse struct {
	WorkspaceManagedSQLServerBlobAuditingPoliciesGetResult
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// WorkspaceManagedSQLServerBlobAuditingPoliciesGetResult contains the result from method WorkspaceManagedSQLServerBlobAuditingPolicies.Get.
type WorkspaceManagedSQLServerBlobAuditingPoliciesGetResult struct {
	ServerBlobAuditingPolicy
}

// WorkspaceManagedSQLServerBlobAuditingPoliciesListByWorkspaceResponse contains the response from method WorkspaceManagedSQLServerBlobAuditingPolicies.ListByWorkspace.
type WorkspaceManagedSQLServerBlobAuditingPoliciesListByWorkspaceResponse struct {
	WorkspaceManagedSQLServerBlobAuditingPoliciesListByWorkspaceResult
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// WorkspaceManagedSQLServerBlobAuditingPoliciesListByWorkspaceResult contains the result from method WorkspaceManagedSQLServerBlobAuditingPolicies.ListByWorkspace.
type WorkspaceManagedSQLServerBlobAuditingPoliciesListByWorkspaceResult struct {
	ServerBlobAuditingPolicyListResult
}

// WorkspaceManagedSQLServerEncryptionProtectorCreateOrUpdatePollerResponse contains the response from method WorkspaceManagedSQLServerEncryptionProtector.CreateOrUpdate.
type WorkspaceManagedSQLServerEncryptionProtectorCreateOrUpdatePollerResponse struct {
	// Poller contains an initialized poller.
	Poller *WorkspaceManagedSQLServerEncryptionProtectorCreateOrUpdatePoller

	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// PollUntilDone will poll the service endpoint until a terminal state is reached or an error is received.
// freq: the time to wait between intervals in absence of a Retry-After header. Allowed minimum is one second.
// A good starting value is 30 seconds. Note that some resources might benefit from a different value.
func (l WorkspaceManagedSQLServerEncryptionProtectorCreateOrUpdatePollerResponse) PollUntilDone(ctx context.Context, freq time.Duration) (WorkspaceManagedSQLServerEncryptionProtectorCreateOrUpdateResponse, error) {
	respType := WorkspaceManagedSQLServerEncryptionProtectorCreateOrUpdateResponse{}
	resp, err := l.Poller.pt.PollUntilDone(ctx, freq, &respType.EncryptionProtector)
	if err != nil {
		return respType, err
	}
	respType.RawResponse = resp
	return respType, nil
}

// Resume rehydrates a WorkspaceManagedSQLServerEncryptionProtectorCreateOrUpdatePollerResponse from the provided client and resume token.
func (l *WorkspaceManagedSQLServerEncryptionProtectorCreateOrUpdatePollerResponse) Resume(ctx context.Context, client *WorkspaceManagedSQLServerEncryptionProtectorClient, token string) error {
	pt, err := armruntime.NewPollerFromResumeToken("WorkspaceManagedSQLServerEncryptionProtectorClient.CreateOrUpdate", token, client.pl, client.createOrUpdateHandleError)
	if err != nil {
		return err
	}
	poller := &WorkspaceManagedSQLServerEncryptionProtectorCreateOrUpdatePoller{
		pt: pt,
	}
	resp, err := poller.Poll(ctx)
	if err != nil {
		return err
	}
	l.Poller = poller
	l.RawResponse = resp
	return nil
}

// WorkspaceManagedSQLServerEncryptionProtectorCreateOrUpdateResponse contains the response from method WorkspaceManagedSQLServerEncryptionProtector.CreateOrUpdate.
type WorkspaceManagedSQLServerEncryptionProtectorCreateOrUpdateResponse struct {
	WorkspaceManagedSQLServerEncryptionProtectorCreateOrUpdateResult
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// WorkspaceManagedSQLServerEncryptionProtectorCreateOrUpdateResult contains the result from method WorkspaceManagedSQLServerEncryptionProtector.CreateOrUpdate.
type WorkspaceManagedSQLServerEncryptionProtectorCreateOrUpdateResult struct {
	EncryptionProtector
}

// WorkspaceManagedSQLServerEncryptionProtectorGetResponse contains the response from method WorkspaceManagedSQLServerEncryptionProtector.Get.
type WorkspaceManagedSQLServerEncryptionProtectorGetResponse struct {
	WorkspaceManagedSQLServerEncryptionProtectorGetResult
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// WorkspaceManagedSQLServerEncryptionProtectorGetResult contains the result from method WorkspaceManagedSQLServerEncryptionProtector.Get.
type WorkspaceManagedSQLServerEncryptionProtectorGetResult struct {
	EncryptionProtector
}

// WorkspaceManagedSQLServerEncryptionProtectorListResponse contains the response from method WorkspaceManagedSQLServerEncryptionProtector.List.
type WorkspaceManagedSQLServerEncryptionProtectorListResponse struct {
	WorkspaceManagedSQLServerEncryptionProtectorListResult
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// WorkspaceManagedSQLServerEncryptionProtectorListResult contains the result from method WorkspaceManagedSQLServerEncryptionProtector.List.
type WorkspaceManagedSQLServerEncryptionProtectorListResult struct {
	EncryptionProtectorListResult
}

// WorkspaceManagedSQLServerEncryptionProtectorRevalidatePollerResponse contains the response from method WorkspaceManagedSQLServerEncryptionProtector.Revalidate.
type WorkspaceManagedSQLServerEncryptionProtectorRevalidatePollerResponse struct {
	// Poller contains an initialized poller.
	Poller *WorkspaceManagedSQLServerEncryptionProtectorRevalidatePoller

	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// PollUntilDone will poll the service endpoint until a terminal state is reached or an error is received.
// freq: the time to wait between intervals in absence of a Retry-After header. Allowed minimum is one second.
// A good starting value is 30 seconds. Note that some resources might benefit from a different value.
func (l WorkspaceManagedSQLServerEncryptionProtectorRevalidatePollerResponse) PollUntilDone(ctx context.Context, freq time.Duration) (WorkspaceManagedSQLServerEncryptionProtectorRevalidateResponse, error) {
	respType := WorkspaceManagedSQLServerEncryptionProtectorRevalidateResponse{}
	resp, err := l.Poller.pt.PollUntilDone(ctx, freq, nil)
	if err != nil {
		return respType, err
	}
	respType.RawResponse = resp
	return respType, nil
}

// Resume rehydrates a WorkspaceManagedSQLServerEncryptionProtectorRevalidatePollerResponse from the provided client and resume token.
func (l *WorkspaceManagedSQLServerEncryptionProtectorRevalidatePollerResponse) Resume(ctx context.Context, client *WorkspaceManagedSQLServerEncryptionProtectorClient, token string) error {
	pt, err := armruntime.NewPollerFromResumeToken("WorkspaceManagedSQLServerEncryptionProtectorClient.Revalidate", token, client.pl, client.revalidateHandleError)
	if err != nil {
		return err
	}
	poller := &WorkspaceManagedSQLServerEncryptionProtectorRevalidatePoller{
		pt: pt,
	}
	resp, err := poller.Poll(ctx)
	if err != nil {
		return err
	}
	l.Poller = poller
	l.RawResponse = resp
	return nil
}

// WorkspaceManagedSQLServerEncryptionProtectorRevalidateResponse contains the response from method WorkspaceManagedSQLServerEncryptionProtector.Revalidate.
type WorkspaceManagedSQLServerEncryptionProtectorRevalidateResponse struct {
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// WorkspaceManagedSQLServerExtendedBlobAuditingPoliciesCreateOrUpdatePollerResponse contains the response from method WorkspaceManagedSQLServerExtendedBlobAuditingPolicies.CreateOrUpdate.
type WorkspaceManagedSQLServerExtendedBlobAuditingPoliciesCreateOrUpdatePollerResponse struct {
	// Poller contains an initialized poller.
	Poller *WorkspaceManagedSQLServerExtendedBlobAuditingPoliciesCreateOrUpdatePoller

	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// PollUntilDone will poll the service endpoint until a terminal state is reached or an error is received.
// freq: the time to wait between intervals in absence of a Retry-After header. Allowed minimum is one second.
// A good starting value is 30 seconds. Note that some resources might benefit from a different value.
func (l WorkspaceManagedSQLServerExtendedBlobAuditingPoliciesCreateOrUpdatePollerResponse) PollUntilDone(ctx context.Context, freq time.Duration) (WorkspaceManagedSQLServerExtendedBlobAuditingPoliciesCreateOrUpdateResponse, error) {
	respType := WorkspaceManagedSQLServerExtendedBlobAuditingPoliciesCreateOrUpdateResponse{}
	resp, err := l.Poller.pt.PollUntilDone(ctx, freq, &respType.ExtendedServerBlobAuditingPolicy)
	if err != nil {
		return respType, err
	}
	respType.RawResponse = resp
	return respType, nil
}

// Resume rehydrates a WorkspaceManagedSQLServerExtendedBlobAuditingPoliciesCreateOrUpdatePollerResponse from the provided client and resume token.
func (l *WorkspaceManagedSQLServerExtendedBlobAuditingPoliciesCreateOrUpdatePollerResponse) Resume(ctx context.Context, client *WorkspaceManagedSQLServerExtendedBlobAuditingPoliciesClient, token string) error {
	pt, err := armruntime.NewPollerFromResumeToken("WorkspaceManagedSQLServerExtendedBlobAuditingPoliciesClient.CreateOrUpdate", token, client.pl, client.createOrUpdateHandleError)
	if err != nil {
		return err
	}
	poller := &WorkspaceManagedSQLServerExtendedBlobAuditingPoliciesCreateOrUpdatePoller{
		pt: pt,
	}
	resp, err := poller.Poll(ctx)
	if err != nil {
		return err
	}
	l.Poller = poller
	l.RawResponse = resp
	return nil
}

// WorkspaceManagedSQLServerExtendedBlobAuditingPoliciesCreateOrUpdateResponse contains the response from method WorkspaceManagedSQLServerExtendedBlobAuditingPolicies.CreateOrUpdate.
type WorkspaceManagedSQLServerExtendedBlobAuditingPoliciesCreateOrUpdateResponse struct {
	WorkspaceManagedSQLServerExtendedBlobAuditingPoliciesCreateOrUpdateResult
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// WorkspaceManagedSQLServerExtendedBlobAuditingPoliciesCreateOrUpdateResult contains the result from method WorkspaceManagedSQLServerExtendedBlobAuditingPolicies.CreateOrUpdate.
type WorkspaceManagedSQLServerExtendedBlobAuditingPoliciesCreateOrUpdateResult struct {
	ExtendedServerBlobAuditingPolicy
}

// WorkspaceManagedSQLServerExtendedBlobAuditingPoliciesGetResponse contains the response from method WorkspaceManagedSQLServerExtendedBlobAuditingPolicies.Get.
type WorkspaceManagedSQLServerExtendedBlobAuditingPoliciesGetResponse struct {
	WorkspaceManagedSQLServerExtendedBlobAuditingPoliciesGetResult
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// WorkspaceManagedSQLServerExtendedBlobAuditingPoliciesGetResult contains the result from method WorkspaceManagedSQLServerExtendedBlobAuditingPolicies.Get.
type WorkspaceManagedSQLServerExtendedBlobAuditingPoliciesGetResult struct {
	ExtendedServerBlobAuditingPolicy
}

// WorkspaceManagedSQLServerExtendedBlobAuditingPoliciesListByWorkspaceResponse contains the response from method WorkspaceManagedSQLServerExtendedBlobAuditingPolicies.ListByWorkspace.
type WorkspaceManagedSQLServerExtendedBlobAuditingPoliciesListByWorkspaceResponse struct {
	WorkspaceManagedSQLServerExtendedBlobAuditingPoliciesListByWorkspaceResult
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// WorkspaceManagedSQLServerExtendedBlobAuditingPoliciesListByWorkspaceResult contains the result from method WorkspaceManagedSQLServerExtendedBlobAuditingPolicies.ListByWorkspace.
type WorkspaceManagedSQLServerExtendedBlobAuditingPoliciesListByWorkspaceResult struct {
	ExtendedServerBlobAuditingPolicyListResult
}

// WorkspaceManagedSQLServerRecoverableSQLPoolsGetResponse contains the response from method WorkspaceManagedSQLServerRecoverableSQLPools.Get.
type WorkspaceManagedSQLServerRecoverableSQLPoolsGetResponse struct {
	WorkspaceManagedSQLServerRecoverableSQLPoolsGetResult
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// WorkspaceManagedSQLServerRecoverableSQLPoolsGetResult contains the result from method WorkspaceManagedSQLServerRecoverableSQLPools.Get.
type WorkspaceManagedSQLServerRecoverableSQLPoolsGetResult struct {
	RecoverableSQLPool
}

// WorkspaceManagedSQLServerRecoverableSQLPoolsListResponse contains the response from method WorkspaceManagedSQLServerRecoverableSQLPools.List.
type WorkspaceManagedSQLServerRecoverableSQLPoolsListResponse struct {
	WorkspaceManagedSQLServerRecoverableSQLPoolsListResult
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// WorkspaceManagedSQLServerRecoverableSQLPoolsListResult contains the result from method WorkspaceManagedSQLServerRecoverableSQLPools.List.
type WorkspaceManagedSQLServerRecoverableSQLPoolsListResult struct {
	RecoverableSQLPoolListResult
}

// WorkspaceManagedSQLServerSecurityAlertPolicyCreateOrUpdatePollerResponse contains the response from method WorkspaceManagedSQLServerSecurityAlertPolicy.CreateOrUpdate.
type WorkspaceManagedSQLServerSecurityAlertPolicyCreateOrUpdatePollerResponse struct {
	// Poller contains an initialized poller.
	Poller *WorkspaceManagedSQLServerSecurityAlertPolicyCreateOrUpdatePoller

	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// PollUntilDone will poll the service endpoint until a terminal state is reached or an error is received.
// freq: the time to wait between intervals in absence of a Retry-After header. Allowed minimum is one second.
// A good starting value is 30 seconds. Note that some resources might benefit from a different value.
func (l WorkspaceManagedSQLServerSecurityAlertPolicyCreateOrUpdatePollerResponse) PollUntilDone(ctx context.Context, freq time.Duration) (WorkspaceManagedSQLServerSecurityAlertPolicyCreateOrUpdateResponse, error) {
	respType := WorkspaceManagedSQLServerSecurityAlertPolicyCreateOrUpdateResponse{}
	resp, err := l.Poller.pt.PollUntilDone(ctx, freq, &respType.ServerSecurityAlertPolicy)
	if err != nil {
		return respType, err
	}
	respType.RawResponse = resp
	return respType, nil
}

// Resume rehydrates a WorkspaceManagedSQLServerSecurityAlertPolicyCreateOrUpdatePollerResponse from the provided client and resume token.
func (l *WorkspaceManagedSQLServerSecurityAlertPolicyCreateOrUpdatePollerResponse) Resume(ctx context.Context, client *WorkspaceManagedSQLServerSecurityAlertPolicyClient, token string) error {
	pt, err := armruntime.NewPollerFromResumeToken("WorkspaceManagedSQLServerSecurityAlertPolicyClient.CreateOrUpdate", token, client.pl, client.createOrUpdateHandleError)
	if err != nil {
		return err
	}
	poller := &WorkspaceManagedSQLServerSecurityAlertPolicyCreateOrUpdatePoller{
		pt: pt,
	}
	resp, err := poller.Poll(ctx)
	if err != nil {
		return err
	}
	l.Poller = poller
	l.RawResponse = resp
	return nil
}

// WorkspaceManagedSQLServerSecurityAlertPolicyCreateOrUpdateResponse contains the response from method WorkspaceManagedSQLServerSecurityAlertPolicy.CreateOrUpdate.
type WorkspaceManagedSQLServerSecurityAlertPolicyCreateOrUpdateResponse struct {
	WorkspaceManagedSQLServerSecurityAlertPolicyCreateOrUpdateResult
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// WorkspaceManagedSQLServerSecurityAlertPolicyCreateOrUpdateResult contains the result from method WorkspaceManagedSQLServerSecurityAlertPolicy.CreateOrUpdate.
type WorkspaceManagedSQLServerSecurityAlertPolicyCreateOrUpdateResult struct {
	ServerSecurityAlertPolicy
}

// WorkspaceManagedSQLServerSecurityAlertPolicyGetResponse contains the response from method WorkspaceManagedSQLServerSecurityAlertPolicy.Get.
type WorkspaceManagedSQLServerSecurityAlertPolicyGetResponse struct {
	WorkspaceManagedSQLServerSecurityAlertPolicyGetResult
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// WorkspaceManagedSQLServerSecurityAlertPolicyGetResult contains the result from method WorkspaceManagedSQLServerSecurityAlertPolicy.Get.
type WorkspaceManagedSQLServerSecurityAlertPolicyGetResult struct {
	ServerSecurityAlertPolicy
}

// WorkspaceManagedSQLServerSecurityAlertPolicyListResponse contains the response from method WorkspaceManagedSQLServerSecurityAlertPolicy.List.
type WorkspaceManagedSQLServerSecurityAlertPolicyListResponse struct {
	WorkspaceManagedSQLServerSecurityAlertPolicyListResult
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// WorkspaceManagedSQLServerSecurityAlertPolicyListResult contains the result from method WorkspaceManagedSQLServerSecurityAlertPolicy.List.
type WorkspaceManagedSQLServerSecurityAlertPolicyListResult struct {
	ServerSecurityAlertPolicyListResult
}

// WorkspaceManagedSQLServerUsagesListResponse contains the response from method WorkspaceManagedSQLServerUsages.List.
type WorkspaceManagedSQLServerUsagesListResponse struct {
	WorkspaceManagedSQLServerUsagesListResult
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// WorkspaceManagedSQLServerUsagesListResult contains the result from method WorkspaceManagedSQLServerUsages.List.
type WorkspaceManagedSQLServerUsagesListResult struct {
	ServerUsageListResult
}

// WorkspaceManagedSQLServerVulnerabilityAssessmentsCreateOrUpdateResponse contains the response from method WorkspaceManagedSQLServerVulnerabilityAssessments.CreateOrUpdate.
type WorkspaceManagedSQLServerVulnerabilityAssessmentsCreateOrUpdateResponse struct {
	WorkspaceManagedSQLServerVulnerabilityAssessmentsCreateOrUpdateResult
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// WorkspaceManagedSQLServerVulnerabilityAssessmentsCreateOrUpdateResult contains the result from method WorkspaceManagedSQLServerVulnerabilityAssessments.CreateOrUpdate.
type WorkspaceManagedSQLServerVulnerabilityAssessmentsCreateOrUpdateResult struct {
	ServerVulnerabilityAssessment
}

// WorkspaceManagedSQLServerVulnerabilityAssessmentsDeleteResponse contains the response from method WorkspaceManagedSQLServerVulnerabilityAssessments.Delete.
type WorkspaceManagedSQLServerVulnerabilityAssessmentsDeleteResponse struct {
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// WorkspaceManagedSQLServerVulnerabilityAssessmentsGetResponse contains the response from method WorkspaceManagedSQLServerVulnerabilityAssessments.Get.
type WorkspaceManagedSQLServerVulnerabilityAssessmentsGetResponse struct {
	WorkspaceManagedSQLServerVulnerabilityAssessmentsGetResult
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// WorkspaceManagedSQLServerVulnerabilityAssessmentsGetResult contains the result from method WorkspaceManagedSQLServerVulnerabilityAssessments.Get.
type WorkspaceManagedSQLServerVulnerabilityAssessmentsGetResult struct {
	ServerVulnerabilityAssessment
}

// WorkspaceManagedSQLServerVulnerabilityAssessmentsListResponse contains the response from method WorkspaceManagedSQLServerVulnerabilityAssessments.List.
type WorkspaceManagedSQLServerVulnerabilityAssessmentsListResponse struct {
	WorkspaceManagedSQLServerVulnerabilityAssessmentsListResult
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// WorkspaceManagedSQLServerVulnerabilityAssessmentsListResult contains the result from method WorkspaceManagedSQLServerVulnerabilityAssessments.List.
type WorkspaceManagedSQLServerVulnerabilityAssessmentsListResult struct {
	ServerVulnerabilityAssessmentListResult
}

// WorkspaceSQLAADAdminsCreateOrUpdatePollerResponse contains the response from method WorkspaceSQLAADAdmins.CreateOrUpdate.
type WorkspaceSQLAADAdminsCreateOrUpdatePollerResponse struct {
	// Poller contains an initialized poller.
	Poller *WorkspaceSQLAADAdminsCreateOrUpdatePoller

	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// PollUntilDone will poll the service endpoint until a terminal state is reached or an error is received.
// freq: the time to wait between intervals in absence of a Retry-After header. Allowed minimum is one second.
// A good starting value is 30 seconds. Note that some resources might benefit from a different value.
func (l WorkspaceSQLAADAdminsCreateOrUpdatePollerResponse) PollUntilDone(ctx context.Context, freq time.Duration) (WorkspaceSQLAADAdminsCreateOrUpdateResponse, error) {
	respType := WorkspaceSQLAADAdminsCreateOrUpdateResponse{}
	resp, err := l.Poller.pt.PollUntilDone(ctx, freq, &respType.WorkspaceAADAdminInfo)
	if err != nil {
		return respType, err
	}
	respType.RawResponse = resp
	return respType, nil
}

// Resume rehydrates a WorkspaceSQLAADAdminsCreateOrUpdatePollerResponse from the provided client and resume token.
func (l *WorkspaceSQLAADAdminsCreateOrUpdatePollerResponse) Resume(ctx context.Context, client *WorkspaceSQLAADAdminsClient, token string) error {
	pt, err := armruntime.NewPollerFromResumeToken("WorkspaceSQLAADAdminsClient.CreateOrUpdate", token, client.pl, client.createOrUpdateHandleError)
	if err != nil {
		return err
	}
	poller := &WorkspaceSQLAADAdminsCreateOrUpdatePoller{
		pt: pt,
	}
	resp, err := poller.Poll(ctx)
	if err != nil {
		return err
	}
	l.Poller = poller
	l.RawResponse = resp
	return nil
}

// WorkspaceSQLAADAdminsCreateOrUpdateResponse contains the response from method WorkspaceSQLAADAdmins.CreateOrUpdate.
type WorkspaceSQLAADAdminsCreateOrUpdateResponse struct {
	WorkspaceSQLAADAdminsCreateOrUpdateResult
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// WorkspaceSQLAADAdminsCreateOrUpdateResult contains the result from method WorkspaceSQLAADAdmins.CreateOrUpdate.
type WorkspaceSQLAADAdminsCreateOrUpdateResult struct {
	WorkspaceAADAdminInfo
}

// WorkspaceSQLAADAdminsDeletePollerResponse contains the response from method WorkspaceSQLAADAdmins.Delete.
type WorkspaceSQLAADAdminsDeletePollerResponse struct {
	// Poller contains an initialized poller.
	Poller *WorkspaceSQLAADAdminsDeletePoller

	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// PollUntilDone will poll the service endpoint until a terminal state is reached or an error is received.
// freq: the time to wait between intervals in absence of a Retry-After header. Allowed minimum is one second.
// A good starting value is 30 seconds. Note that some resources might benefit from a different value.
func (l WorkspaceSQLAADAdminsDeletePollerResponse) PollUntilDone(ctx context.Context, freq time.Duration) (WorkspaceSQLAADAdminsDeleteResponse, error) {
	respType := WorkspaceSQLAADAdminsDeleteResponse{}
	resp, err := l.Poller.pt.PollUntilDone(ctx, freq, nil)
	if err != nil {
		return respType, err
	}
	respType.RawResponse = resp
	return respType, nil
}

// Resume rehydrates a WorkspaceSQLAADAdminsDeletePollerResponse from the provided client and resume token.
func (l *WorkspaceSQLAADAdminsDeletePollerResponse) Resume(ctx context.Context, client *WorkspaceSQLAADAdminsClient, token string) error {
	pt, err := armruntime.NewPollerFromResumeToken("WorkspaceSQLAADAdminsClient.Delete", token, client.pl, client.deleteHandleError)
	if err != nil {
		return err
	}
	poller := &WorkspaceSQLAADAdminsDeletePoller{
		pt: pt,
	}
	resp, err := poller.Poll(ctx)
	if err != nil {
		return err
	}
	l.Poller = poller
	l.RawResponse = resp
	return nil
}

// WorkspaceSQLAADAdminsDeleteResponse contains the response from method WorkspaceSQLAADAdmins.Delete.
type WorkspaceSQLAADAdminsDeleteResponse struct {
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// WorkspaceSQLAADAdminsGetResponse contains the response from method WorkspaceSQLAADAdmins.Get.
type WorkspaceSQLAADAdminsGetResponse struct {
	WorkspaceSQLAADAdminsGetResult
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// WorkspaceSQLAADAdminsGetResult contains the result from method WorkspaceSQLAADAdmins.Get.
type WorkspaceSQLAADAdminsGetResult struct {
	WorkspaceAADAdminInfo
}

// WorkspacesCreateOrUpdatePollerResponse contains the response from method Workspaces.CreateOrUpdate.
type WorkspacesCreateOrUpdatePollerResponse struct {
	// Poller contains an initialized poller.
	Poller *WorkspacesCreateOrUpdatePoller

	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// PollUntilDone will poll the service endpoint until a terminal state is reached or an error is received.
// freq: the time to wait between intervals in absence of a Retry-After header. Allowed minimum is one second.
// A good starting value is 30 seconds. Note that some resources might benefit from a different value.
func (l WorkspacesCreateOrUpdatePollerResponse) PollUntilDone(ctx context.Context, freq time.Duration) (WorkspacesCreateOrUpdateResponse, error) {
	respType := WorkspacesCreateOrUpdateResponse{}
	resp, err := l.Poller.pt.PollUntilDone(ctx, freq, &respType.Workspace)
	if err != nil {
		return respType, err
	}
	respType.RawResponse = resp
	return respType, nil
}

// Resume rehydrates a WorkspacesCreateOrUpdatePollerResponse from the provided client and resume token.
func (l *WorkspacesCreateOrUpdatePollerResponse) Resume(ctx context.Context, client *WorkspacesClient, token string) error {
	pt, err := armruntime.NewPollerFromResumeToken("WorkspacesClient.CreateOrUpdate", token, client.pl, client.createOrUpdateHandleError)
	if err != nil {
		return err
	}
	poller := &WorkspacesCreateOrUpdatePoller{
		pt: pt,
	}
	resp, err := poller.Poll(ctx)
	if err != nil {
		return err
	}
	l.Poller = poller
	l.RawResponse = resp
	return nil
}

// WorkspacesCreateOrUpdateResponse contains the response from method Workspaces.CreateOrUpdate.
type WorkspacesCreateOrUpdateResponse struct {
	WorkspacesCreateOrUpdateResult
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// WorkspacesCreateOrUpdateResult contains the result from method Workspaces.CreateOrUpdate.
type WorkspacesCreateOrUpdateResult struct {
	Workspace
}

// WorkspacesDeletePollerResponse contains the response from method Workspaces.Delete.
type WorkspacesDeletePollerResponse struct {
	// Poller contains an initialized poller.
	Poller *WorkspacesDeletePoller

	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// PollUntilDone will poll the service endpoint until a terminal state is reached or an error is received.
// freq: the time to wait between intervals in absence of a Retry-After header. Allowed minimum is one second.
// A good starting value is 30 seconds. Note that some resources might benefit from a different value.
func (l WorkspacesDeletePollerResponse) PollUntilDone(ctx context.Context, freq time.Duration) (WorkspacesDeleteResponse, error) {
	respType := WorkspacesDeleteResponse{}
	resp, err := l.Poller.pt.PollUntilDone(ctx, freq, &respType.Object)
	if err != nil {
		return respType, err
	}
	respType.RawResponse = resp
	return respType, nil
}

// Resume rehydrates a WorkspacesDeletePollerResponse from the provided client and resume token.
func (l *WorkspacesDeletePollerResponse) Resume(ctx context.Context, client *WorkspacesClient, token string) error {
	pt, err := armruntime.NewPollerFromResumeToken("WorkspacesClient.Delete", token, client.pl, client.deleteHandleError)
	if err != nil {
		return err
	}
	poller := &WorkspacesDeletePoller{
		pt: pt,
	}
	resp, err := poller.Poll(ctx)
	if err != nil {
		return err
	}
	l.Poller = poller
	l.RawResponse = resp
	return nil
}

// WorkspacesDeleteResponse contains the response from method Workspaces.Delete.
type WorkspacesDeleteResponse struct {
	WorkspacesDeleteResult
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// WorkspacesDeleteResult contains the result from method Workspaces.Delete.
type WorkspacesDeleteResult struct {
	// Any object
	Object map[string]interface{}
}

// WorkspacesGetResponse contains the response from method Workspaces.Get.
type WorkspacesGetResponse struct {
	WorkspacesGetResult
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// WorkspacesGetResult contains the result from method Workspaces.Get.
type WorkspacesGetResult struct {
	Workspace
}

// WorkspacesListByResourceGroupResponse contains the response from method Workspaces.ListByResourceGroup.
type WorkspacesListByResourceGroupResponse struct {
	WorkspacesListByResourceGroupResult
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// WorkspacesListByResourceGroupResult contains the result from method Workspaces.ListByResourceGroup.
type WorkspacesListByResourceGroupResult struct {
	WorkspaceInfoListResult
}

// WorkspacesListResponse contains the response from method Workspaces.List.
type WorkspacesListResponse struct {
	WorkspacesListResult
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// WorkspacesListResult contains the result from method Workspaces.List.
type WorkspacesListResult struct {
	WorkspaceInfoListResult
}

// WorkspacesUpdatePollerResponse contains the response from method Workspaces.Update.
type WorkspacesUpdatePollerResponse struct {
	// Poller contains an initialized poller.
	Poller *WorkspacesUpdatePoller

	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// PollUntilDone will poll the service endpoint until a terminal state is reached or an error is received.
// freq: the time to wait between intervals in absence of a Retry-After header. Allowed minimum is one second.
// A good starting value is 30 seconds. Note that some resources might benefit from a different value.
func (l WorkspacesUpdatePollerResponse) PollUntilDone(ctx context.Context, freq time.Duration) (WorkspacesUpdateResponse, error) {
	respType := WorkspacesUpdateResponse{}
	resp, err := l.Poller.pt.PollUntilDone(ctx, freq, &respType.Workspace)
	if err != nil {
		return respType, err
	}
	respType.RawResponse = resp
	return respType, nil
}

// Resume rehydrates a WorkspacesUpdatePollerResponse from the provided client and resume token.
func (l *WorkspacesUpdatePollerResponse) Resume(ctx context.Context, client *WorkspacesClient, token string) error {
	pt, err := armruntime.NewPollerFromResumeToken("WorkspacesClient.Update", token, client.pl, client.updateHandleError)
	if err != nil {
		return err
	}
	poller := &WorkspacesUpdatePoller{
		pt: pt,
	}
	resp, err := poller.Poll(ctx)
	if err != nil {
		return err
	}
	l.Poller = poller
	l.RawResponse = resp
	return nil
}

// WorkspacesUpdateResponse contains the response from method Workspaces.Update.
type WorkspacesUpdateResponse struct {
	WorkspacesUpdateResult
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// WorkspacesUpdateResult contains the result from method Workspaces.Update.
type WorkspacesUpdateResult struct {
	Workspace
}
