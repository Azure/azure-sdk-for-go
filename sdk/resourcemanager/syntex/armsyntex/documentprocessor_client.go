//go:build go1.18
// +build go1.18

// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator. DO NOT EDIT.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

package armsyntex

import (
	"context"
	"errors"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/arm"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/policy"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/runtime"
	"net/http"
	"net/url"
	"strings"
)

// DocumentProcessorClient contains the methods for the DocumentProcessor group.
// Don't use this type directly, use NewDocumentProcessorClient() instead.
type DocumentProcessorClient struct {
	internal       *arm.Client
	subscriptionID string
}

// NewDocumentProcessorClient creates a new instance of DocumentProcessorClient with the specified values.
//   - subscriptionID - The ID of the target subscription.
//   - credential - used to authorize requests. Usually a credential from azidentity.
//   - options - pass nil to accept the default values.
func NewDocumentProcessorClient(subscriptionID string, credential azcore.TokenCredential, options *arm.ClientOptions) (*DocumentProcessorClient, error) {
	cl, err := arm.NewClient(moduleName+".DocumentProcessorClient", moduleVersion, credential, options)
	if err != nil {
		return nil, err
	}
	client := &DocumentProcessorClient{
		subscriptionID: subscriptionID,
		internal:       cl,
	}
	return client, nil
}

// Create - Creates a document processor resource for a given name.
// If the operation fails it returns an *azcore.ResponseError type.
//
// Generated from API version 2022-09-15-preview
//   - resourceGroupName - The name of the resource group. The name is case insensitive.
//   - processorName - The name of document processor resource.
//   - body - Document processor details.
//   - options - DocumentProcessorClientCreateOptions contains the optional parameters for the DocumentProcessorClient.Create
//     method.
func (client *DocumentProcessorClient) Create(ctx context.Context, resourceGroupName string, processorName string, body DocumentProcessorResource, options *DocumentProcessorClientCreateOptions) (DocumentProcessorClientCreateResponse, error) {
	var err error
	req, err := client.createCreateRequest(ctx, resourceGroupName, processorName, body, options)
	if err != nil {
		return DocumentProcessorClientCreateResponse{}, err
	}
	httpResp, err := client.internal.Pipeline().Do(req)
	if err != nil {
		return DocumentProcessorClientCreateResponse{}, err
	}
	if !runtime.HasStatusCode(httpResp, http.StatusOK, http.StatusCreated) {
		err = runtime.NewResponseError(httpResp)
		return DocumentProcessorClientCreateResponse{}, err
	}
	resp, err := client.createHandleResponse(httpResp)
	return resp, err
}

// createCreateRequest creates the Create request.
func (client *DocumentProcessorClient) createCreateRequest(ctx context.Context, resourceGroupName string, processorName string, body DocumentProcessorResource, options *DocumentProcessorClientCreateOptions) (*policy.Request, error) {
	urlPath := "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Syntex/documentProcessors/{processorName}"
	if client.subscriptionID == "" {
		return nil, errors.New("parameter client.subscriptionID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{subscriptionId}", url.PathEscape(client.subscriptionID))
	if resourceGroupName == "" {
		return nil, errors.New("parameter resourceGroupName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{resourceGroupName}", url.PathEscape(resourceGroupName))
	if processorName == "" {
		return nil, errors.New("parameter processorName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{processorName}", url.PathEscape(processorName))
	req, err := runtime.NewRequest(ctx, http.MethodPut, runtime.JoinPaths(client.internal.Endpoint(), urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("api-version", "2022-09-15-preview")
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header["Accept"] = []string{"application/json"}
	if err := runtime.MarshalAsJSON(req, body); err != nil {
		return nil, err
	}
	return req, nil
}

// createHandleResponse handles the Create response.
func (client *DocumentProcessorClient) createHandleResponse(resp *http.Response) (DocumentProcessorClientCreateResponse, error) {
	result := DocumentProcessorClientCreateResponse{}
	if err := runtime.UnmarshalAsJSON(resp, &result.DocumentProcessorResource); err != nil {
		return DocumentProcessorClientCreateResponse{}, err
	}
	return result, nil
}

// Delete - Deletes document processor resource for a given name.
// If the operation fails it returns an *azcore.ResponseError type.
//
// Generated from API version 2022-09-15-preview
//   - resourceGroupName - The name of the resource group. The name is case insensitive.
//   - processorName - The name of document processor resource.
//   - options - DocumentProcessorClientDeleteOptions contains the optional parameters for the DocumentProcessorClient.Delete
//     method.
func (client *DocumentProcessorClient) Delete(ctx context.Context, resourceGroupName string, processorName string, options *DocumentProcessorClientDeleteOptions) (DocumentProcessorClientDeleteResponse, error) {
	var err error
	req, err := client.deleteCreateRequest(ctx, resourceGroupName, processorName, options)
	if err != nil {
		return DocumentProcessorClientDeleteResponse{}, err
	}
	httpResp, err := client.internal.Pipeline().Do(req)
	if err != nil {
		return DocumentProcessorClientDeleteResponse{}, err
	}
	if !runtime.HasStatusCode(httpResp, http.StatusOK, http.StatusNoContent) {
		err = runtime.NewResponseError(httpResp)
		return DocumentProcessorClientDeleteResponse{}, err
	}
	return DocumentProcessorClientDeleteResponse{}, nil
}

// deleteCreateRequest creates the Delete request.
func (client *DocumentProcessorClient) deleteCreateRequest(ctx context.Context, resourceGroupName string, processorName string, options *DocumentProcessorClientDeleteOptions) (*policy.Request, error) {
	urlPath := "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Syntex/documentProcessors/{processorName}"
	if client.subscriptionID == "" {
		return nil, errors.New("parameter client.subscriptionID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{subscriptionId}", url.PathEscape(client.subscriptionID))
	if resourceGroupName == "" {
		return nil, errors.New("parameter resourceGroupName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{resourceGroupName}", url.PathEscape(resourceGroupName))
	if processorName == "" {
		return nil, errors.New("parameter processorName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{processorName}", url.PathEscape(processorName))
	req, err := runtime.NewRequest(ctx, http.MethodDelete, runtime.JoinPaths(client.internal.Endpoint(), urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("api-version", "2022-09-15-preview")
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header["Accept"] = []string{"application/json"}
	return req, nil
}

// Get - Returns a document processor for a given name.
// If the operation fails it returns an *azcore.ResponseError type.
//
// Generated from API version 2022-09-15-preview
//   - resourceGroupName - The name of the resource group. The name is case insensitive.
//   - processorName - The name of document processor resource.
//   - options - DocumentProcessorClientGetOptions contains the optional parameters for the DocumentProcessorClient.Get method.
func (client *DocumentProcessorClient) Get(ctx context.Context, resourceGroupName string, processorName string, options *DocumentProcessorClientGetOptions) (DocumentProcessorClientGetResponse, error) {
	var err error
	req, err := client.getCreateRequest(ctx, resourceGroupName, processorName, options)
	if err != nil {
		return DocumentProcessorClientGetResponse{}, err
	}
	httpResp, err := client.internal.Pipeline().Do(req)
	if err != nil {
		return DocumentProcessorClientGetResponse{}, err
	}
	if !runtime.HasStatusCode(httpResp, http.StatusOK) {
		err = runtime.NewResponseError(httpResp)
		return DocumentProcessorClientGetResponse{}, err
	}
	resp, err := client.getHandleResponse(httpResp)
	return resp, err
}

// getCreateRequest creates the Get request.
func (client *DocumentProcessorClient) getCreateRequest(ctx context.Context, resourceGroupName string, processorName string, options *DocumentProcessorClientGetOptions) (*policy.Request, error) {
	urlPath := "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Syntex/documentProcessors/{processorName}"
	if client.subscriptionID == "" {
		return nil, errors.New("parameter client.subscriptionID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{subscriptionId}", url.PathEscape(client.subscriptionID))
	if resourceGroupName == "" {
		return nil, errors.New("parameter resourceGroupName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{resourceGroupName}", url.PathEscape(resourceGroupName))
	if processorName == "" {
		return nil, errors.New("parameter processorName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{processorName}", url.PathEscape(processorName))
	req, err := runtime.NewRequest(ctx, http.MethodGet, runtime.JoinPaths(client.internal.Endpoint(), urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("api-version", "2022-09-15-preview")
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header["Accept"] = []string{"application/json"}
	return req, nil
}

// getHandleResponse handles the Get response.
func (client *DocumentProcessorClient) getHandleResponse(resp *http.Response) (DocumentProcessorClientGetResponse, error) {
	result := DocumentProcessorClientGetResponse{}
	if err := runtime.UnmarshalAsJSON(resp, &result.DocumentProcessorResource); err != nil {
		return DocumentProcessorClientGetResponse{}, err
	}
	return result, nil
}

// NewListPager - Returns document processors in the subscription.
//
// Generated from API version 2022-09-15-preview
//   - options - DocumentProcessorClientListOptions contains the optional parameters for the DocumentProcessorClient.NewListPager
//     method.
func (client *DocumentProcessorClient) NewListPager(options *DocumentProcessorClientListOptions) *runtime.Pager[DocumentProcessorClientListResponse] {
	return runtime.NewPager(runtime.PagingHandler[DocumentProcessorClientListResponse]{
		More: func(page DocumentProcessorClientListResponse) bool {
			return page.NextLink != nil && len(*page.NextLink) > 0
		},
		Fetcher: func(ctx context.Context, page *DocumentProcessorClientListResponse) (DocumentProcessorClientListResponse, error) {
			var req *policy.Request
			var err error
			if page == nil {
				req, err = client.listCreateRequest(ctx, options)
			} else {
				req, err = runtime.NewRequest(ctx, http.MethodGet, *page.NextLink)
			}
			if err != nil {
				return DocumentProcessorClientListResponse{}, err
			}
			resp, err := client.internal.Pipeline().Do(req)
			if err != nil {
				return DocumentProcessorClientListResponse{}, err
			}
			if !runtime.HasStatusCode(resp, http.StatusOK) {
				return DocumentProcessorClientListResponse{}, runtime.NewResponseError(resp)
			}
			return client.listHandleResponse(resp)
		},
	})
}

// listCreateRequest creates the List request.
func (client *DocumentProcessorClient) listCreateRequest(ctx context.Context, options *DocumentProcessorClientListOptions) (*policy.Request, error) {
	urlPath := "/subscriptions/{subscriptionId}/providers/Microsoft.Syntex/documentProcessors"
	if client.subscriptionID == "" {
		return nil, errors.New("parameter client.subscriptionID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{subscriptionId}", url.PathEscape(client.subscriptionID))
	req, err := runtime.NewRequest(ctx, http.MethodGet, runtime.JoinPaths(client.internal.Endpoint(), urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("api-version", "2022-09-15-preview")
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header["Accept"] = []string{"application/json"}
	return req, nil
}

// listHandleResponse handles the List response.
func (client *DocumentProcessorClient) listHandleResponse(resp *http.Response) (DocumentProcessorClientListResponse, error) {
	result := DocumentProcessorClientListResponse{}
	if err := runtime.UnmarshalAsJSON(resp, &result.DocumentProcessorList); err != nil {
		return DocumentProcessorClientListResponse{}, err
	}
	return result, nil
}

// NewListByResourceGroupPager - Returns document processors in a resource group.
//
// Generated from API version 2022-09-15-preview
//   - resourceGroupName - The name of the resource group. The name is case insensitive.
//   - options - DocumentProcessorClientListByResourceGroupOptions contains the optional parameters for the DocumentProcessorClient.NewListByResourceGroupPager
//     method.
func (client *DocumentProcessorClient) NewListByResourceGroupPager(resourceGroupName string, options *DocumentProcessorClientListByResourceGroupOptions) *runtime.Pager[DocumentProcessorClientListByResourceGroupResponse] {
	return runtime.NewPager(runtime.PagingHandler[DocumentProcessorClientListByResourceGroupResponse]{
		More: func(page DocumentProcessorClientListByResourceGroupResponse) bool {
			return page.NextLink != nil && len(*page.NextLink) > 0
		},
		Fetcher: func(ctx context.Context, page *DocumentProcessorClientListByResourceGroupResponse) (DocumentProcessorClientListByResourceGroupResponse, error) {
			var req *policy.Request
			var err error
			if page == nil {
				req, err = client.listByResourceGroupCreateRequest(ctx, resourceGroupName, options)
			} else {
				req, err = runtime.NewRequest(ctx, http.MethodGet, *page.NextLink)
			}
			if err != nil {
				return DocumentProcessorClientListByResourceGroupResponse{}, err
			}
			resp, err := client.internal.Pipeline().Do(req)
			if err != nil {
				return DocumentProcessorClientListByResourceGroupResponse{}, err
			}
			if !runtime.HasStatusCode(resp, http.StatusOK) {
				return DocumentProcessorClientListByResourceGroupResponse{}, runtime.NewResponseError(resp)
			}
			return client.listByResourceGroupHandleResponse(resp)
		},
	})
}

// listByResourceGroupCreateRequest creates the ListByResourceGroup request.
func (client *DocumentProcessorClient) listByResourceGroupCreateRequest(ctx context.Context, resourceGroupName string, options *DocumentProcessorClientListByResourceGroupOptions) (*policy.Request, error) {
	urlPath := "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Syntex/documentProcessors"
	if client.subscriptionID == "" {
		return nil, errors.New("parameter client.subscriptionID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{subscriptionId}", url.PathEscape(client.subscriptionID))
	if resourceGroupName == "" {
		return nil, errors.New("parameter resourceGroupName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{resourceGroupName}", url.PathEscape(resourceGroupName))
	req, err := runtime.NewRequest(ctx, http.MethodGet, runtime.JoinPaths(client.internal.Endpoint(), urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("api-version", "2022-09-15-preview")
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header["Accept"] = []string{"application/json"}
	return req, nil
}

// listByResourceGroupHandleResponse handles the ListByResourceGroup response.
func (client *DocumentProcessorClient) listByResourceGroupHandleResponse(resp *http.Response) (DocumentProcessorClientListByResourceGroupResponse, error) {
	result := DocumentProcessorClientListByResourceGroupResponse{}
	if err := runtime.UnmarshalAsJSON(resp, &result.DocumentProcessorList); err != nil {
		return DocumentProcessorClientListByResourceGroupResponse{}, err
	}
	return result, nil
}

// Update - Updates a document processor resource for a given name.
// If the operation fails it returns an *azcore.ResponseError type.
//
// Generated from API version 2022-09-15-preview
//   - resourceGroupName - The name of the resource group. The name is case insensitive.
//   - processorName - The name of document processor resource.
//   - body - Document processor details.
//   - options - DocumentProcessorClientUpdateOptions contains the optional parameters for the DocumentProcessorClient.Update
//     method.
func (client *DocumentProcessorClient) Update(ctx context.Context, resourceGroupName string, processorName string, body DocumentProcessorPatchableProperties, options *DocumentProcessorClientUpdateOptions) (DocumentProcessorClientUpdateResponse, error) {
	var err error
	req, err := client.updateCreateRequest(ctx, resourceGroupName, processorName, body, options)
	if err != nil {
		return DocumentProcessorClientUpdateResponse{}, err
	}
	httpResp, err := client.internal.Pipeline().Do(req)
	if err != nil {
		return DocumentProcessorClientUpdateResponse{}, err
	}
	if !runtime.HasStatusCode(httpResp, http.StatusOK) {
		err = runtime.NewResponseError(httpResp)
		return DocumentProcessorClientUpdateResponse{}, err
	}
	resp, err := client.updateHandleResponse(httpResp)
	return resp, err
}

// updateCreateRequest creates the Update request.
func (client *DocumentProcessorClient) updateCreateRequest(ctx context.Context, resourceGroupName string, processorName string, body DocumentProcessorPatchableProperties, options *DocumentProcessorClientUpdateOptions) (*policy.Request, error) {
	urlPath := "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Syntex/documentProcessors/{processorName}"
	if client.subscriptionID == "" {
		return nil, errors.New("parameter client.subscriptionID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{subscriptionId}", url.PathEscape(client.subscriptionID))
	if resourceGroupName == "" {
		return nil, errors.New("parameter resourceGroupName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{resourceGroupName}", url.PathEscape(resourceGroupName))
	if processorName == "" {
		return nil, errors.New("parameter processorName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{processorName}", url.PathEscape(processorName))
	req, err := runtime.NewRequest(ctx, http.MethodPatch, runtime.JoinPaths(client.internal.Endpoint(), urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("api-version", "2022-09-15-preview")
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header["Accept"] = []string{"application/json"}
	if err := runtime.MarshalAsJSON(req, body); err != nil {
		return nil, err
	}
	return req, nil
}

// updateHandleResponse handles the Update response.
func (client *DocumentProcessorClient) updateHandleResponse(resp *http.Response) (DocumentProcessorClientUpdateResponse, error) {
	result := DocumentProcessorClientUpdateResponse{}
	if err := runtime.UnmarshalAsJSON(resp, &result.DocumentProcessorResource); err != nil {
		return DocumentProcessorClientUpdateResponse{}, err
	}
	return result, nil
}
