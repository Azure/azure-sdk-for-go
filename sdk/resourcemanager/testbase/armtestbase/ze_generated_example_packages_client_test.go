//go:build go1.16
// +build go1.16

// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

package armtestbase_test

import (
	"context"
	"log"

	"time"

	"github.com/Azure/azure-sdk-for-go/sdk/azcore/to"
	"github.com/Azure/azure-sdk-for-go/sdk/azidentity"
	"github.com/Azure/azure-sdk-for-go/sdk/resourcemanager/testbase/armtestbase"
)

// x-ms-original-file: specification/testbase/resource-manager/Microsoft.TestBase/preview/2020-12-16-preview/examples/PackagesList.json
func ExamplePackagesClient_ListByTestBaseAccount() {
	cred, err := azidentity.NewDefaultAzureCredential(nil)
	if err != nil {
		log.Fatalf("failed to obtain a credential: %v", err)
	}
	ctx := context.Background()
	client := armtestbase.NewPackagesClient("<subscription-id>", cred, nil)
	pager := client.ListByTestBaseAccount("<resource-group-name>",
		"<test-base-account-name>",
		nil)
	for pager.NextPage(ctx) {
		if err := pager.Err(); err != nil {
			log.Fatalf("failed to advance page: %v", err)
		}
		for _, v := range pager.PageResponse().Value {
			log.Printf("PackageResource.ID: %s\n", *v.ID)
		}
	}
}

// x-ms-original-file: specification/testbase/resource-manager/Microsoft.TestBase/preview/2020-12-16-preview/examples/PackageCreate.json
func ExamplePackagesClient_BeginCreate() {
	cred, err := azidentity.NewDefaultAzureCredential(nil)
	if err != nil {
		log.Fatalf("failed to obtain a credential: %v", err)
	}
	ctx := context.Background()
	client := armtestbase.NewPackagesClient("<subscription-id>", cred, nil)
	poller, err := client.BeginCreate(ctx,
		"<resource-group-name>",
		"<test-base-account-name>",
		"<package-name>",
		armtestbase.PackageResource{
			TrackedResource: armtestbase.TrackedResource{
				Location: to.StringPtr("<location>"),
				Tags:     map[string]*string{},
			},
			Properties: &armtestbase.PackageProperties{
				ApplicationName: to.StringPtr("<application-name>"),
				BlobPath:        to.StringPtr("<blob-path>"),
				FlightingRing:   to.StringPtr("<flighting-ring>"),
				TargetOSList: []*armtestbase.TargetOSInfo{
					{
						OSUpdateType: to.StringPtr("<osupdate-type>"),
						TargetOSs: []*string{
							to.StringPtr("Windows 10 2004"),
							to.StringPtr("Windows 10 1903")},
					}},
				Tests: []*armtestbase.Test{
					{
						IsActive: to.BoolPtr(true),
						TestType: armtestbase.TestTypeOutOfBoxTest.ToPtr(),
						Commands: []*armtestbase.Command{
							{
								Name:              to.StringPtr("<name>"),
								Action:            armtestbase.ActionInstall.ToPtr(),
								AlwaysRun:         to.BoolPtr(true),
								ApplyUpdateBefore: to.BoolPtr(false),
								Content:           to.StringPtr("<content>"),
								ContentType:       armtestbase.ContentTypePath.ToPtr(),
								MaxRunTime:        to.Int32Ptr(1800),
								RestartAfter:      to.BoolPtr(true),
								RunAsInteractive:  to.BoolPtr(true),
								RunElevated:       to.BoolPtr(true),
							},
							{
								Name:              to.StringPtr("<name>"),
								Action:            armtestbase.ActionLaunch.ToPtr(),
								AlwaysRun:         to.BoolPtr(false),
								ApplyUpdateBefore: to.BoolPtr(true),
								Content:           to.StringPtr("<content>"),
								ContentType:       armtestbase.ContentTypePath.ToPtr(),
								MaxRunTime:        to.Int32Ptr(1800),
								RestartAfter:      to.BoolPtr(false),
								RunAsInteractive:  to.BoolPtr(true),
								RunElevated:       to.BoolPtr(true),
							},
							{
								Name:              to.StringPtr("<name>"),
								Action:            armtestbase.ActionClose.ToPtr(),
								AlwaysRun:         to.BoolPtr(false),
								ApplyUpdateBefore: to.BoolPtr(false),
								Content:           to.StringPtr("<content>"),
								ContentType:       armtestbase.ContentTypePath.ToPtr(),
								MaxRunTime:        to.Int32Ptr(1800),
								RestartAfter:      to.BoolPtr(false),
								RunAsInteractive:  to.BoolPtr(true),
								RunElevated:       to.BoolPtr(true),
							},
							{
								Name:              to.StringPtr("<name>"),
								Action:            armtestbase.ActionUninstall.ToPtr(),
								AlwaysRun:         to.BoolPtr(true),
								ApplyUpdateBefore: to.BoolPtr(false),
								Content:           to.StringPtr("<content>"),
								ContentType:       armtestbase.ContentTypePath.ToPtr(),
								MaxRunTime:        to.Int32Ptr(1800),
								RestartAfter:      to.BoolPtr(false),
								RunAsInteractive:  to.BoolPtr(true),
								RunElevated:       to.BoolPtr(true),
							}},
					}},
				Version: to.StringPtr("<version>"),
			},
		},
		nil)
	if err != nil {
		log.Fatal(err)
	}
	res, err := poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		log.Fatal(err)
	}
	log.Printf("PackageResource.ID: %s\n", *res.ID)
}

// x-ms-original-file: specification/testbase/resource-manager/Microsoft.TestBase/preview/2020-12-16-preview/examples/PackageUpdate.json
func ExamplePackagesClient_BeginUpdate() {
	cred, err := azidentity.NewDefaultAzureCredential(nil)
	if err != nil {
		log.Fatalf("failed to obtain a credential: %v", err)
	}
	ctx := context.Background()
	client := armtestbase.NewPackagesClient("<subscription-id>", cred, nil)
	poller, err := client.BeginUpdate(ctx,
		"<resource-group-name>",
		"<test-base-account-name>",
		"<package-name>",
		armtestbase.PackageUpdateParameters{
			Properties: &armtestbase.PackageUpdateParameterProperties{
				BlobPath:      to.StringPtr("<blob-path>"),
				FlightingRing: to.StringPtr("<flighting-ring>"),
				IsEnabled:     to.BoolPtr(false),
				TargetOSList: []*armtestbase.TargetOSInfo{
					{
						OSUpdateType: to.StringPtr("<osupdate-type>"),
						TargetOSs: []*string{
							to.StringPtr("Windows 10 2004"),
							to.StringPtr("Windows 10 1903")},
					}},
				Tests: []*armtestbase.Test{
					{
						IsActive: to.BoolPtr(true),
						TestType: armtestbase.TestTypeOutOfBoxTest.ToPtr(),
						Commands: []*armtestbase.Command{
							{
								Name:              to.StringPtr("<name>"),
								Action:            armtestbase.ActionInstall.ToPtr(),
								AlwaysRun:         to.BoolPtr(true),
								ApplyUpdateBefore: to.BoolPtr(false),
								Content:           to.StringPtr("<content>"),
								ContentType:       armtestbase.ContentTypePath.ToPtr(),
								MaxRunTime:        to.Int32Ptr(1800),
								RestartAfter:      to.BoolPtr(true),
								RunAsInteractive:  to.BoolPtr(true),
								RunElevated:       to.BoolPtr(true),
							},
							{
								Name:              to.StringPtr("<name>"),
								Action:            armtestbase.ActionLaunch.ToPtr(),
								AlwaysRun:         to.BoolPtr(false),
								ApplyUpdateBefore: to.BoolPtr(true),
								Content:           to.StringPtr("<content>"),
								ContentType:       armtestbase.ContentTypePath.ToPtr(),
								MaxRunTime:        to.Int32Ptr(1800),
								RestartAfter:      to.BoolPtr(false),
								RunAsInteractive:  to.BoolPtr(true),
								RunElevated:       to.BoolPtr(true),
							},
							{
								Name:              to.StringPtr("<name>"),
								Action:            armtestbase.ActionClose.ToPtr(),
								AlwaysRun:         to.BoolPtr(false),
								ApplyUpdateBefore: to.BoolPtr(false),
								Content:           to.StringPtr("<content>"),
								ContentType:       armtestbase.ContentTypePath.ToPtr(),
								MaxRunTime:        to.Int32Ptr(1800),
								RestartAfter:      to.BoolPtr(false),
								RunAsInteractive:  to.BoolPtr(true),
								RunElevated:       to.BoolPtr(true),
							},
							{
								Name:              to.StringPtr("<name>"),
								Action:            armtestbase.ActionUninstall.ToPtr(),
								AlwaysRun:         to.BoolPtr(true),
								ApplyUpdateBefore: to.BoolPtr(false),
								Content:           to.StringPtr("<content>"),
								ContentType:       armtestbase.ContentTypePath.ToPtr(),
								MaxRunTime:        to.Int32Ptr(1800),
								RestartAfter:      to.BoolPtr(false),
								RunAsInteractive:  to.BoolPtr(true),
								RunElevated:       to.BoolPtr(true),
							}},
					}},
			},
			Tags: map[string]*string{},
		},
		nil)
	if err != nil {
		log.Fatal(err)
	}
	res, err := poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		log.Fatal(err)
	}
	log.Printf("PackageResource.ID: %s\n", *res.ID)
}

// x-ms-original-file: specification/testbase/resource-manager/Microsoft.TestBase/preview/2020-12-16-preview/examples/PackageDelete.json
func ExamplePackagesClient_BeginDelete() {
	cred, err := azidentity.NewDefaultAzureCredential(nil)
	if err != nil {
		log.Fatalf("failed to obtain a credential: %v", err)
	}
	ctx := context.Background()
	client := armtestbase.NewPackagesClient("<subscription-id>", cred, nil)
	poller, err := client.BeginDelete(ctx,
		"<resource-group-name>",
		"<test-base-account-name>",
		"<package-name>",
		nil)
	if err != nil {
		log.Fatal(err)
	}
	_, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		log.Fatal(err)
	}
}

// x-ms-original-file: specification/testbase/resource-manager/Microsoft.TestBase/preview/2020-12-16-preview/examples/PackageGet.json
func ExamplePackagesClient_Get() {
	cred, err := azidentity.NewDefaultAzureCredential(nil)
	if err != nil {
		log.Fatalf("failed to obtain a credential: %v", err)
	}
	ctx := context.Background()
	client := armtestbase.NewPackagesClient("<subscription-id>", cred, nil)
	res, err := client.Get(ctx,
		"<resource-group-name>",
		"<test-base-account-name>",
		"<package-name>",
		nil)
	if err != nil {
		log.Fatal(err)
	}
	log.Printf("PackageResource.ID: %s\n", *res.ID)
}

// x-ms-original-file: specification/testbase/resource-manager/Microsoft.TestBase/preview/2020-12-16-preview/examples/PackageHardDelete.json
func ExamplePackagesClient_BeginHardDelete() {
	cred, err := azidentity.NewDefaultAzureCredential(nil)
	if err != nil {
		log.Fatalf("failed to obtain a credential: %v", err)
	}
	ctx := context.Background()
	client := armtestbase.NewPackagesClient("<subscription-id>", cred, nil)
	poller, err := client.BeginHardDelete(ctx,
		"<resource-group-name>",
		"<test-base-account-name>",
		"<package-name>",
		nil)
	if err != nil {
		log.Fatal(err)
	}
	_, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		log.Fatal(err)
	}
}

// x-ms-original-file: specification/testbase/resource-manager/Microsoft.TestBase/preview/2020-12-16-preview/examples/PackageGetDownloadURL.json
func ExamplePackagesClient_GetDownloadURL() {
	cred, err := azidentity.NewDefaultAzureCredential(nil)
	if err != nil {
		log.Fatalf("failed to obtain a credential: %v", err)
	}
	ctx := context.Background()
	client := armtestbase.NewPackagesClient("<subscription-id>", cred, nil)
	_, err = client.GetDownloadURL(ctx,
		"<resource-group-name>",
		"<test-base-account-name>",
		"<package-name>",
		nil)
	if err != nil {
		log.Fatal(err)
	}
}
