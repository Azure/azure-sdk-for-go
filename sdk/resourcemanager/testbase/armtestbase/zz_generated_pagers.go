//go:build go1.16
// +build go1.16

// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

package armtestbase

import (
	"context"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/policy"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/runtime"
	"net/http"
	"reflect"
)

// AvailableOSListPager provides operations for iterating over paged responses.
type AvailableOSListPager struct {
	client    *AvailableOSClient
	current   AvailableOSListResponse
	err       error
	requester func(context.Context) (*policy.Request, error)
	advancer  func(context.Context, AvailableOSListResponse) (*policy.Request, error)
}

// Err returns the last error encountered while paging.
func (p *AvailableOSListPager) Err() error {
	return p.err
}

// NextPage returns true if the pager advanced to the next page.
// Returns false if there are no more pages or an error occurred.
func (p *AvailableOSListPager) NextPage(ctx context.Context) bool {
	var req *policy.Request
	var err error
	if !reflect.ValueOf(p.current).IsZero() {
		if p.current.AvailableOSListResult.NextLink == nil || len(*p.current.AvailableOSListResult.NextLink) == 0 {
			return false
		}
		req, err = p.advancer(ctx, p.current)
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		p.err = err
		return false
	}
	resp, err := p.client.pl.Do(req)
	if err != nil {
		p.err = err
		return false
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {
		p.err = p.client.listHandleError(resp)
		return false
	}
	result, err := p.client.listHandleResponse(resp)
	if err != nil {
		p.err = err
		return false
	}
	p.current = result
	return true
}

// PageResponse returns the current AvailableOSListResponse page.
func (p *AvailableOSListPager) PageResponse() AvailableOSListResponse {
	return p.current
}

// CustomerEventsListByTestBaseAccountPager provides operations for iterating over paged responses.
type CustomerEventsListByTestBaseAccountPager struct {
	client    *CustomerEventsClient
	current   CustomerEventsListByTestBaseAccountResponse
	err       error
	requester func(context.Context) (*policy.Request, error)
	advancer  func(context.Context, CustomerEventsListByTestBaseAccountResponse) (*policy.Request, error)
}

// Err returns the last error encountered while paging.
func (p *CustomerEventsListByTestBaseAccountPager) Err() error {
	return p.err
}

// NextPage returns true if the pager advanced to the next page.
// Returns false if there are no more pages or an error occurred.
func (p *CustomerEventsListByTestBaseAccountPager) NextPage(ctx context.Context) bool {
	var req *policy.Request
	var err error
	if !reflect.ValueOf(p.current).IsZero() {
		if p.current.CustomerEventListResult.NextLink == nil || len(*p.current.CustomerEventListResult.NextLink) == 0 {
			return false
		}
		req, err = p.advancer(ctx, p.current)
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		p.err = err
		return false
	}
	resp, err := p.client.pl.Do(req)
	if err != nil {
		p.err = err
		return false
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {
		p.err = p.client.listByTestBaseAccountHandleError(resp)
		return false
	}
	result, err := p.client.listByTestBaseAccountHandleResponse(resp)
	if err != nil {
		p.err = err
		return false
	}
	p.current = result
	return true
}

// PageResponse returns the current CustomerEventsListByTestBaseAccountResponse page.
func (p *CustomerEventsListByTestBaseAccountPager) PageResponse() CustomerEventsListByTestBaseAccountResponse {
	return p.current
}

// EmailEventsListPager provides operations for iterating over paged responses.
type EmailEventsListPager struct {
	client    *EmailEventsClient
	current   EmailEventsListResponse
	err       error
	requester func(context.Context) (*policy.Request, error)
	advancer  func(context.Context, EmailEventsListResponse) (*policy.Request, error)
}

// Err returns the last error encountered while paging.
func (p *EmailEventsListPager) Err() error {
	return p.err
}

// NextPage returns true if the pager advanced to the next page.
// Returns false if there are no more pages or an error occurred.
func (p *EmailEventsListPager) NextPage(ctx context.Context) bool {
	var req *policy.Request
	var err error
	if !reflect.ValueOf(p.current).IsZero() {
		if p.current.EmailEventListResult.NextLink == nil || len(*p.current.EmailEventListResult.NextLink) == 0 {
			return false
		}
		req, err = p.advancer(ctx, p.current)
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		p.err = err
		return false
	}
	resp, err := p.client.pl.Do(req)
	if err != nil {
		p.err = err
		return false
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {
		p.err = p.client.listHandleError(resp)
		return false
	}
	result, err := p.client.listHandleResponse(resp)
	if err != nil {
		p.err = err
		return false
	}
	p.current = result
	return true
}

// PageResponse returns the current EmailEventsListResponse page.
func (p *EmailEventsListPager) PageResponse() EmailEventsListResponse {
	return p.current
}

// FavoriteProcessesListPager provides operations for iterating over paged responses.
type FavoriteProcessesListPager struct {
	client    *FavoriteProcessesClient
	current   FavoriteProcessesListResponse
	err       error
	requester func(context.Context) (*policy.Request, error)
	advancer  func(context.Context, FavoriteProcessesListResponse) (*policy.Request, error)
}

// Err returns the last error encountered while paging.
func (p *FavoriteProcessesListPager) Err() error {
	return p.err
}

// NextPage returns true if the pager advanced to the next page.
// Returns false if there are no more pages or an error occurred.
func (p *FavoriteProcessesListPager) NextPage(ctx context.Context) bool {
	var req *policy.Request
	var err error
	if !reflect.ValueOf(p.current).IsZero() {
		if p.current.FavoriteProcessListResult.NextLink == nil || len(*p.current.FavoriteProcessListResult.NextLink) == 0 {
			return false
		}
		req, err = p.advancer(ctx, p.current)
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		p.err = err
		return false
	}
	resp, err := p.client.pl.Do(req)
	if err != nil {
		p.err = err
		return false
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {
		p.err = p.client.listHandleError(resp)
		return false
	}
	result, err := p.client.listHandleResponse(resp)
	if err != nil {
		p.err = err
		return false
	}
	p.current = result
	return true
}

// PageResponse returns the current FavoriteProcessesListResponse page.
func (p *FavoriteProcessesListPager) PageResponse() FavoriteProcessesListResponse {
	return p.current
}

// FlightingRingsListPager provides operations for iterating over paged responses.
type FlightingRingsListPager struct {
	client    *FlightingRingsClient
	current   FlightingRingsListResponse
	err       error
	requester func(context.Context) (*policy.Request, error)
	advancer  func(context.Context, FlightingRingsListResponse) (*policy.Request, error)
}

// Err returns the last error encountered while paging.
func (p *FlightingRingsListPager) Err() error {
	return p.err
}

// NextPage returns true if the pager advanced to the next page.
// Returns false if there are no more pages or an error occurred.
func (p *FlightingRingsListPager) NextPage(ctx context.Context) bool {
	var req *policy.Request
	var err error
	if !reflect.ValueOf(p.current).IsZero() {
		if p.current.FlightingRingListResult.NextLink == nil || len(*p.current.FlightingRingListResult.NextLink) == 0 {
			return false
		}
		req, err = p.advancer(ctx, p.current)
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		p.err = err
		return false
	}
	resp, err := p.client.pl.Do(req)
	if err != nil {
		p.err = err
		return false
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {
		p.err = p.client.listHandleError(resp)
		return false
	}
	result, err := p.client.listHandleResponse(resp)
	if err != nil {
		p.err = err
		return false
	}
	p.current = result
	return true
}

// PageResponse returns the current FlightingRingsListResponse page.
func (p *FlightingRingsListPager) PageResponse() FlightingRingsListResponse {
	return p.current
}

// OSUpdatesListPager provides operations for iterating over paged responses.
type OSUpdatesListPager struct {
	client    *OSUpdatesClient
	current   OSUpdatesListResponse
	err       error
	requester func(context.Context) (*policy.Request, error)
	advancer  func(context.Context, OSUpdatesListResponse) (*policy.Request, error)
}

// Err returns the last error encountered while paging.
func (p *OSUpdatesListPager) Err() error {
	return p.err
}

// NextPage returns true if the pager advanced to the next page.
// Returns false if there are no more pages or an error occurred.
func (p *OSUpdatesListPager) NextPage(ctx context.Context) bool {
	var req *policy.Request
	var err error
	if !reflect.ValueOf(p.current).IsZero() {
		if p.current.OSUpdateListResult.NextLink == nil || len(*p.current.OSUpdateListResult.NextLink) == 0 {
			return false
		}
		req, err = p.advancer(ctx, p.current)
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		p.err = err
		return false
	}
	resp, err := p.client.pl.Do(req)
	if err != nil {
		p.err = err
		return false
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {
		p.err = p.client.listHandleError(resp)
		return false
	}
	result, err := p.client.listHandleResponse(resp)
	if err != nil {
		p.err = err
		return false
	}
	p.current = result
	return true
}

// PageResponse returns the current OSUpdatesListResponse page.
func (p *OSUpdatesListPager) PageResponse() OSUpdatesListResponse {
	return p.current
}

// OperationsListPager provides operations for iterating over paged responses.
type OperationsListPager struct {
	client    *OperationsClient
	current   OperationsListResponse
	err       error
	requester func(context.Context) (*policy.Request, error)
	advancer  func(context.Context, OperationsListResponse) (*policy.Request, error)
}

// Err returns the last error encountered while paging.
func (p *OperationsListPager) Err() error {
	return p.err
}

// NextPage returns true if the pager advanced to the next page.
// Returns false if there are no more pages or an error occurred.
func (p *OperationsListPager) NextPage(ctx context.Context) bool {
	var req *policy.Request
	var err error
	if !reflect.ValueOf(p.current).IsZero() {
		if p.current.OperationListResult.NextLink == nil || len(*p.current.OperationListResult.NextLink) == 0 {
			return false
		}
		req, err = p.advancer(ctx, p.current)
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		p.err = err
		return false
	}
	resp, err := p.client.pl.Do(req)
	if err != nil {
		p.err = err
		return false
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {
		p.err = p.client.listHandleError(resp)
		return false
	}
	result, err := p.client.listHandleResponse(resp)
	if err != nil {
		p.err = err
		return false
	}
	p.current = result
	return true
}

// PageResponse returns the current OperationsListResponse page.
func (p *OperationsListPager) PageResponse() OperationsListResponse {
	return p.current
}

// PackagesListByTestBaseAccountPager provides operations for iterating over paged responses.
type PackagesListByTestBaseAccountPager struct {
	client    *PackagesClient
	current   PackagesListByTestBaseAccountResponse
	err       error
	requester func(context.Context) (*policy.Request, error)
	advancer  func(context.Context, PackagesListByTestBaseAccountResponse) (*policy.Request, error)
}

// Err returns the last error encountered while paging.
func (p *PackagesListByTestBaseAccountPager) Err() error {
	return p.err
}

// NextPage returns true if the pager advanced to the next page.
// Returns false if there are no more pages or an error occurred.
func (p *PackagesListByTestBaseAccountPager) NextPage(ctx context.Context) bool {
	var req *policy.Request
	var err error
	if !reflect.ValueOf(p.current).IsZero() {
		if p.current.PackageListResult.NextLink == nil || len(*p.current.PackageListResult.NextLink) == 0 {
			return false
		}
		req, err = p.advancer(ctx, p.current)
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		p.err = err
		return false
	}
	resp, err := p.client.pl.Do(req)
	if err != nil {
		p.err = err
		return false
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {
		p.err = p.client.listByTestBaseAccountHandleError(resp)
		return false
	}
	result, err := p.client.listByTestBaseAccountHandleResponse(resp)
	if err != nil {
		p.err = err
		return false
	}
	p.current = result
	return true
}

// PageResponse returns the current PackagesListByTestBaseAccountResponse page.
func (p *PackagesListByTestBaseAccountPager) PageResponse() PackagesListByTestBaseAccountResponse {
	return p.current
}

// SKUsListPager provides operations for iterating over paged responses.
type SKUsListPager struct {
	client    *SKUsClient
	current   SKUsListResponse
	err       error
	requester func(context.Context) (*policy.Request, error)
	advancer  func(context.Context, SKUsListResponse) (*policy.Request, error)
}

// Err returns the last error encountered while paging.
func (p *SKUsListPager) Err() error {
	return p.err
}

// NextPage returns true if the pager advanced to the next page.
// Returns false if there are no more pages or an error occurred.
func (p *SKUsListPager) NextPage(ctx context.Context) bool {
	var req *policy.Request
	var err error
	if !reflect.ValueOf(p.current).IsZero() {
		if p.current.TestBaseAccountSKUListResult.NextLink == nil || len(*p.current.TestBaseAccountSKUListResult.NextLink) == 0 {
			return false
		}
		req, err = p.advancer(ctx, p.current)
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		p.err = err
		return false
	}
	resp, err := p.client.pl.Do(req)
	if err != nil {
		p.err = err
		return false
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {
		p.err = p.client.listHandleError(resp)
		return false
	}
	result, err := p.client.listHandleResponse(resp)
	if err != nil {
		p.err = err
		return false
	}
	p.current = result
	return true
}

// PageResponse returns the current SKUsListResponse page.
func (p *SKUsListPager) PageResponse() SKUsListResponse {
	return p.current
}

// TestBaseAccountsListByResourceGroupPager provides operations for iterating over paged responses.
type TestBaseAccountsListByResourceGroupPager struct {
	client    *TestBaseAccountsClient
	current   TestBaseAccountsListByResourceGroupResponse
	err       error
	requester func(context.Context) (*policy.Request, error)
	advancer  func(context.Context, TestBaseAccountsListByResourceGroupResponse) (*policy.Request, error)
}

// Err returns the last error encountered while paging.
func (p *TestBaseAccountsListByResourceGroupPager) Err() error {
	return p.err
}

// NextPage returns true if the pager advanced to the next page.
// Returns false if there are no more pages or an error occurred.
func (p *TestBaseAccountsListByResourceGroupPager) NextPage(ctx context.Context) bool {
	var req *policy.Request
	var err error
	if !reflect.ValueOf(p.current).IsZero() {
		if p.current.TestBaseAccountListResult.NextLink == nil || len(*p.current.TestBaseAccountListResult.NextLink) == 0 {
			return false
		}
		req, err = p.advancer(ctx, p.current)
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		p.err = err
		return false
	}
	resp, err := p.client.pl.Do(req)
	if err != nil {
		p.err = err
		return false
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {
		p.err = p.client.listByResourceGroupHandleError(resp)
		return false
	}
	result, err := p.client.listByResourceGroupHandleResponse(resp)
	if err != nil {
		p.err = err
		return false
	}
	p.current = result
	return true
}

// PageResponse returns the current TestBaseAccountsListByResourceGroupResponse page.
func (p *TestBaseAccountsListByResourceGroupPager) PageResponse() TestBaseAccountsListByResourceGroupResponse {
	return p.current
}

// TestBaseAccountsListBySubscriptionPager provides operations for iterating over paged responses.
type TestBaseAccountsListBySubscriptionPager struct {
	client    *TestBaseAccountsClient
	current   TestBaseAccountsListBySubscriptionResponse
	err       error
	requester func(context.Context) (*policy.Request, error)
	advancer  func(context.Context, TestBaseAccountsListBySubscriptionResponse) (*policy.Request, error)
}

// Err returns the last error encountered while paging.
func (p *TestBaseAccountsListBySubscriptionPager) Err() error {
	return p.err
}

// NextPage returns true if the pager advanced to the next page.
// Returns false if there are no more pages or an error occurred.
func (p *TestBaseAccountsListBySubscriptionPager) NextPage(ctx context.Context) bool {
	var req *policy.Request
	var err error
	if !reflect.ValueOf(p.current).IsZero() {
		if p.current.TestBaseAccountListResult.NextLink == nil || len(*p.current.TestBaseAccountListResult.NextLink) == 0 {
			return false
		}
		req, err = p.advancer(ctx, p.current)
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		p.err = err
		return false
	}
	resp, err := p.client.pl.Do(req)
	if err != nil {
		p.err = err
		return false
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {
		p.err = p.client.listBySubscriptionHandleError(resp)
		return false
	}
	result, err := p.client.listBySubscriptionHandleResponse(resp)
	if err != nil {
		p.err = err
		return false
	}
	p.current = result
	return true
}

// PageResponse returns the current TestBaseAccountsListBySubscriptionResponse page.
func (p *TestBaseAccountsListBySubscriptionPager) PageResponse() TestBaseAccountsListBySubscriptionResponse {
	return p.current
}

// TestResultsListPager provides operations for iterating over paged responses.
type TestResultsListPager struct {
	client    *TestResultsClient
	current   TestResultsListResponse
	err       error
	requester func(context.Context) (*policy.Request, error)
	advancer  func(context.Context, TestResultsListResponse) (*policy.Request, error)
}

// Err returns the last error encountered while paging.
func (p *TestResultsListPager) Err() error {
	return p.err
}

// NextPage returns true if the pager advanced to the next page.
// Returns false if there are no more pages or an error occurred.
func (p *TestResultsListPager) NextPage(ctx context.Context) bool {
	var req *policy.Request
	var err error
	if !reflect.ValueOf(p.current).IsZero() {
		if p.current.TestResultListResult.NextLink == nil || len(*p.current.TestResultListResult.NextLink) == 0 {
			return false
		}
		req, err = p.advancer(ctx, p.current)
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		p.err = err
		return false
	}
	resp, err := p.client.pl.Do(req)
	if err != nil {
		p.err = err
		return false
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {
		p.err = p.client.listHandleError(resp)
		return false
	}
	result, err := p.client.listHandleResponse(resp)
	if err != nil {
		p.err = err
		return false
	}
	p.current = result
	return true
}

// PageResponse returns the current TestResultsListResponse page.
func (p *TestResultsListPager) PageResponse() TestResultsListResponse {
	return p.current
}

// TestSummariesListPager provides operations for iterating over paged responses.
type TestSummariesListPager struct {
	client    *TestSummariesClient
	current   TestSummariesListResponse
	err       error
	requester func(context.Context) (*policy.Request, error)
	advancer  func(context.Context, TestSummariesListResponse) (*policy.Request, error)
}

// Err returns the last error encountered while paging.
func (p *TestSummariesListPager) Err() error {
	return p.err
}

// NextPage returns true if the pager advanced to the next page.
// Returns false if there are no more pages or an error occurred.
func (p *TestSummariesListPager) NextPage(ctx context.Context) bool {
	var req *policy.Request
	var err error
	if !reflect.ValueOf(p.current).IsZero() {
		if p.current.TestSummaryListResult.NextLink == nil || len(*p.current.TestSummaryListResult.NextLink) == 0 {
			return false
		}
		req, err = p.advancer(ctx, p.current)
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		p.err = err
		return false
	}
	resp, err := p.client.pl.Do(req)
	if err != nil {
		p.err = err
		return false
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {
		p.err = p.client.listHandleError(resp)
		return false
	}
	result, err := p.client.listHandleResponse(resp)
	if err != nil {
		p.err = err
		return false
	}
	p.current = result
	return true
}

// PageResponse returns the current TestSummariesListResponse page.
func (p *TestSummariesListPager) PageResponse() TestSummariesListResponse {
	return p.current
}

// TestTypesListPager provides operations for iterating over paged responses.
type TestTypesListPager struct {
	client    *TestTypesClient
	current   TestTypesListResponse
	err       error
	requester func(context.Context) (*policy.Request, error)
	advancer  func(context.Context, TestTypesListResponse) (*policy.Request, error)
}

// Err returns the last error encountered while paging.
func (p *TestTypesListPager) Err() error {
	return p.err
}

// NextPage returns true if the pager advanced to the next page.
// Returns false if there are no more pages or an error occurred.
func (p *TestTypesListPager) NextPage(ctx context.Context) bool {
	var req *policy.Request
	var err error
	if !reflect.ValueOf(p.current).IsZero() {
		if p.current.TestTypeListResult.NextLink == nil || len(*p.current.TestTypeListResult.NextLink) == 0 {
			return false
		}
		req, err = p.advancer(ctx, p.current)
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		p.err = err
		return false
	}
	resp, err := p.client.pl.Do(req)
	if err != nil {
		p.err = err
		return false
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {
		p.err = p.client.listHandleError(resp)
		return false
	}
	result, err := p.client.listHandleResponse(resp)
	if err != nil {
		p.err = err
		return false
	}
	p.current = result
	return true
}

// PageResponse returns the current TestTypesListResponse page.
func (p *TestTypesListPager) PageResponse() TestTypesListResponse {
	return p.current
}

// UsageListPager provides operations for iterating over paged responses.
type UsageListPager struct {
	client    *UsageClient
	current   UsageListResponse
	err       error
	requester func(context.Context) (*policy.Request, error)
	advancer  func(context.Context, UsageListResponse) (*policy.Request, error)
}

// Err returns the last error encountered while paging.
func (p *UsageListPager) Err() error {
	return p.err
}

// NextPage returns true if the pager advanced to the next page.
// Returns false if there are no more pages or an error occurred.
func (p *UsageListPager) NextPage(ctx context.Context) bool {
	var req *policy.Request
	var err error
	if !reflect.ValueOf(p.current).IsZero() {
		if p.current.TestBaseAccountUsageDataList.NextLink == nil || len(*p.current.TestBaseAccountUsageDataList.NextLink) == 0 {
			return false
		}
		req, err = p.advancer(ctx, p.current)
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		p.err = err
		return false
	}
	resp, err := p.client.pl.Do(req)
	if err != nil {
		p.err = err
		return false
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {
		p.err = p.client.listHandleError(resp)
		return false
	}
	result, err := p.client.listHandleResponse(resp)
	if err != nil {
		p.err = err
		return false
	}
	p.current = result
	return true
}

// PageResponse returns the current UsageListResponse page.
func (p *UsageListPager) PageResponse() UsageListResponse {
	return p.current
}
