//go:build go1.16
// +build go1.16

// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

package armtestbase

import (
	"context"
	armruntime "github.com/Azure/azure-sdk-for-go/sdk/azcore/arm/runtime"
	"net/http"
	"time"
)

// AccountsClientCheckPackageNameAvailabilityResponse contains the response from method AccountsClient.CheckPackageNameAvailability.
type AccountsClientCheckPackageNameAvailabilityResponse struct {
	AccountsClientCheckPackageNameAvailabilityResult
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// AccountsClientCheckPackageNameAvailabilityResult contains the result from method AccountsClient.CheckPackageNameAvailability.
type AccountsClientCheckPackageNameAvailabilityResult struct {
	CheckNameAvailabilityResult
}

// AccountsClientCreatePollerResponse contains the response from method AccountsClient.Create.
type AccountsClientCreatePollerResponse struct {
	// Poller contains an initialized poller.
	Poller *AccountsClientCreatePoller

	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// PollUntilDone will poll the service endpoint until a terminal state is reached or an error is received.
// freq: the time to wait between intervals in absence of a Retry-After header. Allowed minimum is one second.
// A good starting value is 30 seconds. Note that some resources might benefit from a different value.
func (l AccountsClientCreatePollerResponse) PollUntilDone(ctx context.Context, freq time.Duration) (AccountsClientCreateResponse, error) {
	respType := AccountsClientCreateResponse{}
	resp, err := l.Poller.pt.PollUntilDone(ctx, freq, &respType.AccountResource)
	if err != nil {
		return respType, err
	}
	respType.RawResponse = resp
	return respType, nil
}

// Resume rehydrates a AccountsClientCreatePollerResponse from the provided client and resume token.
func (l *AccountsClientCreatePollerResponse) Resume(ctx context.Context, client *AccountsClient, token string) error {
	pt, err := armruntime.NewPollerFromResumeToken("AccountsClient.Create", token, client.pl)
	if err != nil {
		return err
	}
	poller := &AccountsClientCreatePoller{
		pt: pt,
	}
	resp, err := poller.Poll(ctx)
	if err != nil {
		return err
	}
	l.Poller = poller
	l.RawResponse = resp
	return nil
}

// AccountsClientCreateResponse contains the response from method AccountsClient.Create.
type AccountsClientCreateResponse struct {
	AccountsClientCreateResult
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// AccountsClientCreateResult contains the result from method AccountsClient.Create.
type AccountsClientCreateResult struct {
	AccountResource
}

// AccountsClientDeletePollerResponse contains the response from method AccountsClient.Delete.
type AccountsClientDeletePollerResponse struct {
	// Poller contains an initialized poller.
	Poller *AccountsClientDeletePoller

	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// PollUntilDone will poll the service endpoint until a terminal state is reached or an error is received.
// freq: the time to wait between intervals in absence of a Retry-After header. Allowed minimum is one second.
// A good starting value is 30 seconds. Note that some resources might benefit from a different value.
func (l AccountsClientDeletePollerResponse) PollUntilDone(ctx context.Context, freq time.Duration) (AccountsClientDeleteResponse, error) {
	respType := AccountsClientDeleteResponse{}
	resp, err := l.Poller.pt.PollUntilDone(ctx, freq, nil)
	if err != nil {
		return respType, err
	}
	respType.RawResponse = resp
	return respType, nil
}

// Resume rehydrates a AccountsClientDeletePollerResponse from the provided client and resume token.
func (l *AccountsClientDeletePollerResponse) Resume(ctx context.Context, client *AccountsClient, token string) error {
	pt, err := armruntime.NewPollerFromResumeToken("AccountsClient.Delete", token, client.pl)
	if err != nil {
		return err
	}
	poller := &AccountsClientDeletePoller{
		pt: pt,
	}
	resp, err := poller.Poll(ctx)
	if err != nil {
		return err
	}
	l.Poller = poller
	l.RawResponse = resp
	return nil
}

// AccountsClientDeleteResponse contains the response from method AccountsClient.Delete.
type AccountsClientDeleteResponse struct {
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// AccountsClientGetFileUploadURLResponse contains the response from method AccountsClient.GetFileUploadURL.
type AccountsClientGetFileUploadURLResponse struct {
	AccountsClientGetFileUploadURLResult
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// AccountsClientGetFileUploadURLResult contains the result from method AccountsClient.GetFileUploadURL.
type AccountsClientGetFileUploadURLResult struct {
	FileUploadURLResponse
}

// AccountsClientGetResponse contains the response from method AccountsClient.Get.
type AccountsClientGetResponse struct {
	AccountsClientGetResult
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// AccountsClientGetResult contains the result from method AccountsClient.Get.
type AccountsClientGetResult struct {
	AccountResource
}

// AccountsClientListByResourceGroupResponse contains the response from method AccountsClient.ListByResourceGroup.
type AccountsClientListByResourceGroupResponse struct {
	AccountsClientListByResourceGroupResult
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// AccountsClientListByResourceGroupResult contains the result from method AccountsClient.ListByResourceGroup.
type AccountsClientListByResourceGroupResult struct {
	AccountListResult
}

// AccountsClientListBySubscriptionResponse contains the response from method AccountsClient.ListBySubscription.
type AccountsClientListBySubscriptionResponse struct {
	AccountsClientListBySubscriptionResult
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// AccountsClientListBySubscriptionResult contains the result from method AccountsClient.ListBySubscription.
type AccountsClientListBySubscriptionResult struct {
	AccountListResult
}

// AccountsClientOffboardPollerResponse contains the response from method AccountsClient.Offboard.
type AccountsClientOffboardPollerResponse struct {
	// Poller contains an initialized poller.
	Poller *AccountsClientOffboardPoller

	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// PollUntilDone will poll the service endpoint until a terminal state is reached or an error is received.
// freq: the time to wait between intervals in absence of a Retry-After header. Allowed minimum is one second.
// A good starting value is 30 seconds. Note that some resources might benefit from a different value.
func (l AccountsClientOffboardPollerResponse) PollUntilDone(ctx context.Context, freq time.Duration) (AccountsClientOffboardResponse, error) {
	respType := AccountsClientOffboardResponse{}
	resp, err := l.Poller.pt.PollUntilDone(ctx, freq, nil)
	if err != nil {
		return respType, err
	}
	respType.RawResponse = resp
	return respType, nil
}

// Resume rehydrates a AccountsClientOffboardPollerResponse from the provided client and resume token.
func (l *AccountsClientOffboardPollerResponse) Resume(ctx context.Context, client *AccountsClient, token string) error {
	pt, err := armruntime.NewPollerFromResumeToken("AccountsClient.Offboard", token, client.pl)
	if err != nil {
		return err
	}
	poller := &AccountsClientOffboardPoller{
		pt: pt,
	}
	resp, err := poller.Poll(ctx)
	if err != nil {
		return err
	}
	l.Poller = poller
	l.RawResponse = resp
	return nil
}

// AccountsClientOffboardResponse contains the response from method AccountsClient.Offboard.
type AccountsClientOffboardResponse struct {
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// AccountsClientUpdatePollerResponse contains the response from method AccountsClient.Update.
type AccountsClientUpdatePollerResponse struct {
	// Poller contains an initialized poller.
	Poller *AccountsClientUpdatePoller

	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// PollUntilDone will poll the service endpoint until a terminal state is reached or an error is received.
// freq: the time to wait between intervals in absence of a Retry-After header. Allowed minimum is one second.
// A good starting value is 30 seconds. Note that some resources might benefit from a different value.
func (l AccountsClientUpdatePollerResponse) PollUntilDone(ctx context.Context, freq time.Duration) (AccountsClientUpdateResponse, error) {
	respType := AccountsClientUpdateResponse{}
	resp, err := l.Poller.pt.PollUntilDone(ctx, freq, &respType.AccountResource)
	if err != nil {
		return respType, err
	}
	respType.RawResponse = resp
	return respType, nil
}

// Resume rehydrates a AccountsClientUpdatePollerResponse from the provided client and resume token.
func (l *AccountsClientUpdatePollerResponse) Resume(ctx context.Context, client *AccountsClient, token string) error {
	pt, err := armruntime.NewPollerFromResumeToken("AccountsClient.Update", token, client.pl)
	if err != nil {
		return err
	}
	poller := &AccountsClientUpdatePoller{
		pt: pt,
	}
	resp, err := poller.Poll(ctx)
	if err != nil {
		return err
	}
	l.Poller = poller
	l.RawResponse = resp
	return nil
}

// AccountsClientUpdateResponse contains the response from method AccountsClient.Update.
type AccountsClientUpdateResponse struct {
	AccountsClientUpdateResult
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// AccountsClientUpdateResult contains the result from method AccountsClient.Update.
type AccountsClientUpdateResult struct {
	AccountResource
}

// AnalysisResultsClientGetResponse contains the response from method AnalysisResultsClient.Get.
type AnalysisResultsClientGetResponse struct {
	AnalysisResultsClientGetResult
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// AnalysisResultsClientGetResult contains the result from method AnalysisResultsClient.Get.
type AnalysisResultsClientGetResult struct {
	AnalysisResultSingletonResource
}

// AnalysisResultsClientListResponse contains the response from method AnalysisResultsClient.List.
type AnalysisResultsClientListResponse struct {
	AnalysisResultsClientListResult
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// AnalysisResultsClientListResult contains the result from method AnalysisResultsClient.List.
type AnalysisResultsClientListResult struct {
	AnalysisResultListResult
}

// AvailableOSClientGetResponse contains the response from method AvailableOSClient.Get.
type AvailableOSClientGetResponse struct {
	AvailableOSClientGetResult
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// AvailableOSClientGetResult contains the result from method AvailableOSClient.Get.
type AvailableOSClientGetResult struct {
	AvailableOSResource
}

// AvailableOSClientListResponse contains the response from method AvailableOSClient.List.
type AvailableOSClientListResponse struct {
	AvailableOSClientListResult
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// AvailableOSClientListResult contains the result from method AvailableOSClient.List.
type AvailableOSClientListResult struct {
	AvailableOSListResult
}

// CustomerEventsClientCreatePollerResponse contains the response from method CustomerEventsClient.Create.
type CustomerEventsClientCreatePollerResponse struct {
	// Poller contains an initialized poller.
	Poller *CustomerEventsClientCreatePoller

	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// PollUntilDone will poll the service endpoint until a terminal state is reached or an error is received.
// freq: the time to wait between intervals in absence of a Retry-After header. Allowed minimum is one second.
// A good starting value is 30 seconds. Note that some resources might benefit from a different value.
func (l CustomerEventsClientCreatePollerResponse) PollUntilDone(ctx context.Context, freq time.Duration) (CustomerEventsClientCreateResponse, error) {
	respType := CustomerEventsClientCreateResponse{}
	resp, err := l.Poller.pt.PollUntilDone(ctx, freq, &respType.CustomerEventResource)
	if err != nil {
		return respType, err
	}
	respType.RawResponse = resp
	return respType, nil
}

// Resume rehydrates a CustomerEventsClientCreatePollerResponse from the provided client and resume token.
func (l *CustomerEventsClientCreatePollerResponse) Resume(ctx context.Context, client *CustomerEventsClient, token string) error {
	pt, err := armruntime.NewPollerFromResumeToken("CustomerEventsClient.Create", token, client.pl)
	if err != nil {
		return err
	}
	poller := &CustomerEventsClientCreatePoller{
		pt: pt,
	}
	resp, err := poller.Poll(ctx)
	if err != nil {
		return err
	}
	l.Poller = poller
	l.RawResponse = resp
	return nil
}

// CustomerEventsClientCreateResponse contains the response from method CustomerEventsClient.Create.
type CustomerEventsClientCreateResponse struct {
	CustomerEventsClientCreateResult
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// CustomerEventsClientCreateResult contains the result from method CustomerEventsClient.Create.
type CustomerEventsClientCreateResult struct {
	CustomerEventResource
}

// CustomerEventsClientDeletePollerResponse contains the response from method CustomerEventsClient.Delete.
type CustomerEventsClientDeletePollerResponse struct {
	// Poller contains an initialized poller.
	Poller *CustomerEventsClientDeletePoller

	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// PollUntilDone will poll the service endpoint until a terminal state is reached or an error is received.
// freq: the time to wait between intervals in absence of a Retry-After header. Allowed minimum is one second.
// A good starting value is 30 seconds. Note that some resources might benefit from a different value.
func (l CustomerEventsClientDeletePollerResponse) PollUntilDone(ctx context.Context, freq time.Duration) (CustomerEventsClientDeleteResponse, error) {
	respType := CustomerEventsClientDeleteResponse{}
	resp, err := l.Poller.pt.PollUntilDone(ctx, freq, nil)
	if err != nil {
		return respType, err
	}
	respType.RawResponse = resp
	return respType, nil
}

// Resume rehydrates a CustomerEventsClientDeletePollerResponse from the provided client and resume token.
func (l *CustomerEventsClientDeletePollerResponse) Resume(ctx context.Context, client *CustomerEventsClient, token string) error {
	pt, err := armruntime.NewPollerFromResumeToken("CustomerEventsClient.Delete", token, client.pl)
	if err != nil {
		return err
	}
	poller := &CustomerEventsClientDeletePoller{
		pt: pt,
	}
	resp, err := poller.Poll(ctx)
	if err != nil {
		return err
	}
	l.Poller = poller
	l.RawResponse = resp
	return nil
}

// CustomerEventsClientDeleteResponse contains the response from method CustomerEventsClient.Delete.
type CustomerEventsClientDeleteResponse struct {
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// CustomerEventsClientGetResponse contains the response from method CustomerEventsClient.Get.
type CustomerEventsClientGetResponse struct {
	CustomerEventsClientGetResult
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// CustomerEventsClientGetResult contains the result from method CustomerEventsClient.Get.
type CustomerEventsClientGetResult struct {
	CustomerEventResource
}

// CustomerEventsClientListByTestBaseAccountResponse contains the response from method CustomerEventsClient.ListByTestBaseAccount.
type CustomerEventsClientListByTestBaseAccountResponse struct {
	CustomerEventsClientListByTestBaseAccountResult
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// CustomerEventsClientListByTestBaseAccountResult contains the result from method CustomerEventsClient.ListByTestBaseAccount.
type CustomerEventsClientListByTestBaseAccountResult struct {
	CustomerEventListResult
}

// EmailEventsClientGetResponse contains the response from method EmailEventsClient.Get.
type EmailEventsClientGetResponse struct {
	EmailEventsClientGetResult
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// EmailEventsClientGetResult contains the result from method EmailEventsClient.Get.
type EmailEventsClientGetResult struct {
	EmailEventResource
}

// EmailEventsClientListResponse contains the response from method EmailEventsClient.List.
type EmailEventsClientListResponse struct {
	EmailEventsClientListResult
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// EmailEventsClientListResult contains the result from method EmailEventsClient.List.
type EmailEventsClientListResult struct {
	EmailEventListResult
}

// FavoriteProcessesClientCreateResponse contains the response from method FavoriteProcessesClient.Create.
type FavoriteProcessesClientCreateResponse struct {
	FavoriteProcessesClientCreateResult
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// FavoriteProcessesClientCreateResult contains the result from method FavoriteProcessesClient.Create.
type FavoriteProcessesClientCreateResult struct {
	FavoriteProcessResource
}

// FavoriteProcessesClientDeleteResponse contains the response from method FavoriteProcessesClient.Delete.
type FavoriteProcessesClientDeleteResponse struct {
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// FavoriteProcessesClientGetResponse contains the response from method FavoriteProcessesClient.Get.
type FavoriteProcessesClientGetResponse struct {
	FavoriteProcessesClientGetResult
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// FavoriteProcessesClientGetResult contains the result from method FavoriteProcessesClient.Get.
type FavoriteProcessesClientGetResult struct {
	FavoriteProcessResource
}

// FavoriteProcessesClientListResponse contains the response from method FavoriteProcessesClient.List.
type FavoriteProcessesClientListResponse struct {
	FavoriteProcessesClientListResult
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// FavoriteProcessesClientListResult contains the result from method FavoriteProcessesClient.List.
type FavoriteProcessesClientListResult struct {
	FavoriteProcessListResult
}

// FlightingRingsClientGetResponse contains the response from method FlightingRingsClient.Get.
type FlightingRingsClientGetResponse struct {
	FlightingRingsClientGetResult
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// FlightingRingsClientGetResult contains the result from method FlightingRingsClient.Get.
type FlightingRingsClientGetResult struct {
	FlightingRingResource
}

// FlightingRingsClientListResponse contains the response from method FlightingRingsClient.List.
type FlightingRingsClientListResponse struct {
	FlightingRingsClientListResult
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// FlightingRingsClientListResult contains the result from method FlightingRingsClient.List.
type FlightingRingsClientListResult struct {
	FlightingRingListResult
}

// OSUpdatesClientGetResponse contains the response from method OSUpdatesClient.Get.
type OSUpdatesClientGetResponse struct {
	OSUpdatesClientGetResult
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// OSUpdatesClientGetResult contains the result from method OSUpdatesClient.Get.
type OSUpdatesClientGetResult struct {
	OSUpdateResource
}

// OSUpdatesClientListResponse contains the response from method OSUpdatesClient.List.
type OSUpdatesClientListResponse struct {
	OSUpdatesClientListResult
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// OSUpdatesClientListResult contains the result from method OSUpdatesClient.List.
type OSUpdatesClientListResult struct {
	OSUpdateListResult
}

// OperationsClientListResponse contains the response from method OperationsClient.List.
type OperationsClientListResponse struct {
	OperationsClientListResult
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// OperationsClientListResult contains the result from method OperationsClient.List.
type OperationsClientListResult struct {
	OperationListResult
}

// PackagesClientCreatePollerResponse contains the response from method PackagesClient.Create.
type PackagesClientCreatePollerResponse struct {
	// Poller contains an initialized poller.
	Poller *PackagesClientCreatePoller

	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// PollUntilDone will poll the service endpoint until a terminal state is reached or an error is received.
// freq: the time to wait between intervals in absence of a Retry-After header. Allowed minimum is one second.
// A good starting value is 30 seconds. Note that some resources might benefit from a different value.
func (l PackagesClientCreatePollerResponse) PollUntilDone(ctx context.Context, freq time.Duration) (PackagesClientCreateResponse, error) {
	respType := PackagesClientCreateResponse{}
	resp, err := l.Poller.pt.PollUntilDone(ctx, freq, &respType.PackageResource)
	if err != nil {
		return respType, err
	}
	respType.RawResponse = resp
	return respType, nil
}

// Resume rehydrates a PackagesClientCreatePollerResponse from the provided client and resume token.
func (l *PackagesClientCreatePollerResponse) Resume(ctx context.Context, client *PackagesClient, token string) error {
	pt, err := armruntime.NewPollerFromResumeToken("PackagesClient.Create", token, client.pl)
	if err != nil {
		return err
	}
	poller := &PackagesClientCreatePoller{
		pt: pt,
	}
	resp, err := poller.Poll(ctx)
	if err != nil {
		return err
	}
	l.Poller = poller
	l.RawResponse = resp
	return nil
}

// PackagesClientCreateResponse contains the response from method PackagesClient.Create.
type PackagesClientCreateResponse struct {
	PackagesClientCreateResult
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// PackagesClientCreateResult contains the result from method PackagesClient.Create.
type PackagesClientCreateResult struct {
	PackageResource
}

// PackagesClientDeletePollerResponse contains the response from method PackagesClient.Delete.
type PackagesClientDeletePollerResponse struct {
	// Poller contains an initialized poller.
	Poller *PackagesClientDeletePoller

	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// PollUntilDone will poll the service endpoint until a terminal state is reached or an error is received.
// freq: the time to wait between intervals in absence of a Retry-After header. Allowed minimum is one second.
// A good starting value is 30 seconds. Note that some resources might benefit from a different value.
func (l PackagesClientDeletePollerResponse) PollUntilDone(ctx context.Context, freq time.Duration) (PackagesClientDeleteResponse, error) {
	respType := PackagesClientDeleteResponse{}
	resp, err := l.Poller.pt.PollUntilDone(ctx, freq, nil)
	if err != nil {
		return respType, err
	}
	respType.RawResponse = resp
	return respType, nil
}

// Resume rehydrates a PackagesClientDeletePollerResponse from the provided client and resume token.
func (l *PackagesClientDeletePollerResponse) Resume(ctx context.Context, client *PackagesClient, token string) error {
	pt, err := armruntime.NewPollerFromResumeToken("PackagesClient.Delete", token, client.pl)
	if err != nil {
		return err
	}
	poller := &PackagesClientDeletePoller{
		pt: pt,
	}
	resp, err := poller.Poll(ctx)
	if err != nil {
		return err
	}
	l.Poller = poller
	l.RawResponse = resp
	return nil
}

// PackagesClientDeleteResponse contains the response from method PackagesClient.Delete.
type PackagesClientDeleteResponse struct {
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// PackagesClientGetDownloadURLResponse contains the response from method PackagesClient.GetDownloadURL.
type PackagesClientGetDownloadURLResponse struct {
	PackagesClientGetDownloadURLResult
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// PackagesClientGetDownloadURLResult contains the result from method PackagesClient.GetDownloadURL.
type PackagesClientGetDownloadURLResult struct {
	DownloadURLResponse
}

// PackagesClientGetResponse contains the response from method PackagesClient.Get.
type PackagesClientGetResponse struct {
	PackagesClientGetResult
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// PackagesClientGetResult contains the result from method PackagesClient.Get.
type PackagesClientGetResult struct {
	PackageResource
}

// PackagesClientHardDeletePollerResponse contains the response from method PackagesClient.HardDelete.
type PackagesClientHardDeletePollerResponse struct {
	// Poller contains an initialized poller.
	Poller *PackagesClientHardDeletePoller

	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// PollUntilDone will poll the service endpoint until a terminal state is reached or an error is received.
// freq: the time to wait between intervals in absence of a Retry-After header. Allowed minimum is one second.
// A good starting value is 30 seconds. Note that some resources might benefit from a different value.
func (l PackagesClientHardDeletePollerResponse) PollUntilDone(ctx context.Context, freq time.Duration) (PackagesClientHardDeleteResponse, error) {
	respType := PackagesClientHardDeleteResponse{}
	resp, err := l.Poller.pt.PollUntilDone(ctx, freq, nil)
	if err != nil {
		return respType, err
	}
	respType.RawResponse = resp
	return respType, nil
}

// Resume rehydrates a PackagesClientHardDeletePollerResponse from the provided client and resume token.
func (l *PackagesClientHardDeletePollerResponse) Resume(ctx context.Context, client *PackagesClient, token string) error {
	pt, err := armruntime.NewPollerFromResumeToken("PackagesClient.HardDelete", token, client.pl)
	if err != nil {
		return err
	}
	poller := &PackagesClientHardDeletePoller{
		pt: pt,
	}
	resp, err := poller.Poll(ctx)
	if err != nil {
		return err
	}
	l.Poller = poller
	l.RawResponse = resp
	return nil
}

// PackagesClientHardDeleteResponse contains the response from method PackagesClient.HardDelete.
type PackagesClientHardDeleteResponse struct {
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// PackagesClientListByTestBaseAccountResponse contains the response from method PackagesClient.ListByTestBaseAccount.
type PackagesClientListByTestBaseAccountResponse struct {
	PackagesClientListByTestBaseAccountResult
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// PackagesClientListByTestBaseAccountResult contains the result from method PackagesClient.ListByTestBaseAccount.
type PackagesClientListByTestBaseAccountResult struct {
	PackageListResult
}

// PackagesClientUpdatePollerResponse contains the response from method PackagesClient.Update.
type PackagesClientUpdatePollerResponse struct {
	// Poller contains an initialized poller.
	Poller *PackagesClientUpdatePoller

	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// PollUntilDone will poll the service endpoint until a terminal state is reached or an error is received.
// freq: the time to wait between intervals in absence of a Retry-After header. Allowed minimum is one second.
// A good starting value is 30 seconds. Note that some resources might benefit from a different value.
func (l PackagesClientUpdatePollerResponse) PollUntilDone(ctx context.Context, freq time.Duration) (PackagesClientUpdateResponse, error) {
	respType := PackagesClientUpdateResponse{}
	resp, err := l.Poller.pt.PollUntilDone(ctx, freq, &respType.PackageResource)
	if err != nil {
		return respType, err
	}
	respType.RawResponse = resp
	return respType, nil
}

// Resume rehydrates a PackagesClientUpdatePollerResponse from the provided client and resume token.
func (l *PackagesClientUpdatePollerResponse) Resume(ctx context.Context, client *PackagesClient, token string) error {
	pt, err := armruntime.NewPollerFromResumeToken("PackagesClient.Update", token, client.pl)
	if err != nil {
		return err
	}
	poller := &PackagesClientUpdatePoller{
		pt: pt,
	}
	resp, err := poller.Poll(ctx)
	if err != nil {
		return err
	}
	l.Poller = poller
	l.RawResponse = resp
	return nil
}

// PackagesClientUpdateResponse contains the response from method PackagesClient.Update.
type PackagesClientUpdateResponse struct {
	PackagesClientUpdateResult
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// PackagesClientUpdateResult contains the result from method PackagesClient.Update.
type PackagesClientUpdateResult struct {
	PackageResource
}

// SKUsClientListResponse contains the response from method SKUsClient.List.
type SKUsClientListResponse struct {
	SKUsClientListResult
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// SKUsClientListResult contains the result from method SKUsClient.List.
type SKUsClientListResult struct {
	AccountSKUListResult
}

// TestResultsClientGetDownloadURLResponse contains the response from method TestResultsClient.GetDownloadURL.
type TestResultsClientGetDownloadURLResponse struct {
	TestResultsClientGetDownloadURLResult
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// TestResultsClientGetDownloadURLResult contains the result from method TestResultsClient.GetDownloadURL.
type TestResultsClientGetDownloadURLResult struct {
	DownloadURLResponse
}

// TestResultsClientGetResponse contains the response from method TestResultsClient.Get.
type TestResultsClientGetResponse struct {
	TestResultsClientGetResult
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// TestResultsClientGetResult contains the result from method TestResultsClient.Get.
type TestResultsClientGetResult struct {
	TestResultResource
}

// TestResultsClientGetVideoDownloadURLResponse contains the response from method TestResultsClient.GetVideoDownloadURL.
type TestResultsClientGetVideoDownloadURLResponse struct {
	TestResultsClientGetVideoDownloadURLResult
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// TestResultsClientGetVideoDownloadURLResult contains the result from method TestResultsClient.GetVideoDownloadURL.
type TestResultsClientGetVideoDownloadURLResult struct {
	DownloadURLResponse
}

// TestResultsClientListResponse contains the response from method TestResultsClient.List.
type TestResultsClientListResponse struct {
	TestResultsClientListResult
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// TestResultsClientListResult contains the result from method TestResultsClient.List.
type TestResultsClientListResult struct {
	TestResultListResult
}

// TestSummariesClientGetResponse contains the response from method TestSummariesClient.Get.
type TestSummariesClientGetResponse struct {
	TestSummariesClientGetResult
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// TestSummariesClientGetResult contains the result from method TestSummariesClient.Get.
type TestSummariesClientGetResult struct {
	TestSummaryResource
}

// TestSummariesClientListResponse contains the response from method TestSummariesClient.List.
type TestSummariesClientListResponse struct {
	TestSummariesClientListResult
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// TestSummariesClientListResult contains the result from method TestSummariesClient.List.
type TestSummariesClientListResult struct {
	TestSummaryListResult
}

// TestTypesClientGetResponse contains the response from method TestTypesClient.Get.
type TestTypesClientGetResponse struct {
	TestTypesClientGetResult
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// TestTypesClientGetResult contains the result from method TestTypesClient.Get.
type TestTypesClientGetResult struct {
	TestTypeResource
}

// TestTypesClientListResponse contains the response from method TestTypesClient.List.
type TestTypesClientListResponse struct {
	TestTypesClientListResult
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// TestTypesClientListResult contains the result from method TestTypesClient.List.
type TestTypesClientListResult struct {
	TestTypeListResult
}

// UsageClientListResponse contains the response from method UsageClient.List.
type UsageClientListResponse struct {
	UsageClientListResult
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// UsageClientListResult contains the result from method UsageClient.List.
type UsageClientListResult struct {
	AccountUsageDataList
}
