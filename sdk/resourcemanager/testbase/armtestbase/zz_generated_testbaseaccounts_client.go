//go:build go1.16
// +build go1.16

// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

package armtestbase

import (
	"context"
	"errors"
	"fmt"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/arm"
	armruntime "github.com/Azure/azure-sdk-for-go/sdk/azcore/arm/runtime"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/policy"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/runtime"
	"net/http"
	"net/url"
	"strconv"
	"strings"
)

// TestBaseAccountsClient contains the methods for the TestBaseAccounts group.
// Don't use this type directly, use NewTestBaseAccountsClient() instead.
type TestBaseAccountsClient struct {
	ep             string
	pl             runtime.Pipeline
	subscriptionID string
}

// NewTestBaseAccountsClient creates a new instance of TestBaseAccountsClient with the specified values.
func NewTestBaseAccountsClient(subscriptionID string, credential azcore.TokenCredential, options *arm.ClientOptions) *TestBaseAccountsClient {
	cp := arm.ClientOptions{}
	if options != nil {
		cp = *options
	}
	if len(cp.Host) == 0 {
		cp.Host = arm.AzurePublicCloud
	}
	return &TestBaseAccountsClient{subscriptionID: subscriptionID, ep: string(cp.Host), pl: armruntime.NewPipeline(module, version, credential, &cp)}
}

// CheckPackageNameAvailability - Checks that the Test Base Package name and version is valid and is not already in use.
// If the operation fails it returns the *ErrorResponse error type.
func (client *TestBaseAccountsClient) CheckPackageNameAvailability(ctx context.Context, resourceGroupName string, testBaseAccountName string, parameters PackageCheckNameAvailabilityParameters, options *TestBaseAccountsCheckPackageNameAvailabilityOptions) (TestBaseAccountsCheckPackageNameAvailabilityResponse, error) {
	req, err := client.checkPackageNameAvailabilityCreateRequest(ctx, resourceGroupName, testBaseAccountName, parameters, options)
	if err != nil {
		return TestBaseAccountsCheckPackageNameAvailabilityResponse{}, err
	}
	resp, err := client.pl.Do(req)
	if err != nil {
		return TestBaseAccountsCheckPackageNameAvailabilityResponse{}, err
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {
		return TestBaseAccountsCheckPackageNameAvailabilityResponse{}, client.checkPackageNameAvailabilityHandleError(resp)
	}
	return client.checkPackageNameAvailabilityHandleResponse(resp)
}

// checkPackageNameAvailabilityCreateRequest creates the CheckPackageNameAvailability request.
func (client *TestBaseAccountsClient) checkPackageNameAvailabilityCreateRequest(ctx context.Context, resourceGroupName string, testBaseAccountName string, parameters PackageCheckNameAvailabilityParameters, options *TestBaseAccountsCheckPackageNameAvailabilityOptions) (*policy.Request, error) {
	urlPath := "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.TestBase/testBaseAccounts/{testBaseAccountName}/checkPackageNameAvailability"
	if client.subscriptionID == "" {
		return nil, errors.New("parameter client.subscriptionID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{subscriptionId}", url.PathEscape(client.subscriptionID))
	if resourceGroupName == "" {
		return nil, errors.New("parameter resourceGroupName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{resourceGroupName}", url.PathEscape(resourceGroupName))
	if testBaseAccountName == "" {
		return nil, errors.New("parameter testBaseAccountName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{testBaseAccountName}", url.PathEscape(testBaseAccountName))
	req, err := runtime.NewRequest(ctx, http.MethodPost, runtime.JoinPaths(client.ep, urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("api-version", "2020-12-16-preview")
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header.Set("Accept", "application/json")
	return req, runtime.MarshalAsJSON(req, parameters)
}

// checkPackageNameAvailabilityHandleResponse handles the CheckPackageNameAvailability response.
func (client *TestBaseAccountsClient) checkPackageNameAvailabilityHandleResponse(resp *http.Response) (TestBaseAccountsCheckPackageNameAvailabilityResponse, error) {
	result := TestBaseAccountsCheckPackageNameAvailabilityResponse{RawResponse: resp}
	if err := runtime.UnmarshalAsJSON(resp, &result.CheckNameAvailabilityResult); err != nil {
		return TestBaseAccountsCheckPackageNameAvailabilityResponse{}, runtime.NewResponseError(err, resp)
	}
	return result, nil
}

// checkPackageNameAvailabilityHandleError handles the CheckPackageNameAvailability error response.
func (client *TestBaseAccountsClient) checkPackageNameAvailabilityHandleError(resp *http.Response) error {
	body, err := runtime.Payload(resp)
	if err != nil {
		return runtime.NewResponseError(err, resp)
	}
	errType := ErrorResponse{raw: string(body)}
	if err := runtime.UnmarshalAsJSON(resp, &errType); err != nil {
		return runtime.NewResponseError(fmt.Errorf("%s\n%s", string(body), err), resp)
	}
	return runtime.NewResponseError(&errType, resp)
}

// BeginCreate - Create or replace (overwrite/recreate, with potential downtime) a Test Base Account in the specified subscription.
// If the operation fails it returns the *ErrorResponse error type.
func (client *TestBaseAccountsClient) BeginCreate(ctx context.Context, resourceGroupName string, testBaseAccountName string, parameters TestBaseAccountResource, options *TestBaseAccountsBeginCreateOptions) (TestBaseAccountsCreatePollerResponse, error) {
	resp, err := client.create(ctx, resourceGroupName, testBaseAccountName, parameters, options)
	if err != nil {
		return TestBaseAccountsCreatePollerResponse{}, err
	}
	result := TestBaseAccountsCreatePollerResponse{
		RawResponse: resp,
	}
	pt, err := armruntime.NewPoller("TestBaseAccountsClient.Create", "azure-async-operation", resp, client.pl, client.createHandleError)
	if err != nil {
		return TestBaseAccountsCreatePollerResponse{}, err
	}
	result.Poller = &TestBaseAccountsCreatePoller{
		pt: pt,
	}
	return result, nil
}

// Create - Create or replace (overwrite/recreate, with potential downtime) a Test Base Account in the specified subscription.
// If the operation fails it returns the *ErrorResponse error type.
func (client *TestBaseAccountsClient) create(ctx context.Context, resourceGroupName string, testBaseAccountName string, parameters TestBaseAccountResource, options *TestBaseAccountsBeginCreateOptions) (*http.Response, error) {
	req, err := client.createCreateRequest(ctx, resourceGroupName, testBaseAccountName, parameters, options)
	if err != nil {
		return nil, err
	}
	resp, err := client.pl.Do(req)
	if err != nil {
		return nil, err
	}
	if !runtime.HasStatusCode(resp, http.StatusOK, http.StatusCreated) {
		return nil, client.createHandleError(resp)
	}
	return resp, nil
}

// createCreateRequest creates the Create request.
func (client *TestBaseAccountsClient) createCreateRequest(ctx context.Context, resourceGroupName string, testBaseAccountName string, parameters TestBaseAccountResource, options *TestBaseAccountsBeginCreateOptions) (*policy.Request, error) {
	urlPath := "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.TestBase/testBaseAccounts/{testBaseAccountName}"
	if client.subscriptionID == "" {
		return nil, errors.New("parameter client.subscriptionID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{subscriptionId}", url.PathEscape(client.subscriptionID))
	if resourceGroupName == "" {
		return nil, errors.New("parameter resourceGroupName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{resourceGroupName}", url.PathEscape(resourceGroupName))
	if testBaseAccountName == "" {
		return nil, errors.New("parameter testBaseAccountName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{testBaseAccountName}", url.PathEscape(testBaseAccountName))
	req, err := runtime.NewRequest(ctx, http.MethodPut, runtime.JoinPaths(client.ep, urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	if options != nil && options.Restore != nil {
		reqQP.Set("restore", strconv.FormatBool(*options.Restore))
	}
	reqQP.Set("api-version", "2020-12-16-preview")
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header.Set("Accept", "application/json")
	return req, runtime.MarshalAsJSON(req, parameters)
}

// createHandleError handles the Create error response.
func (client *TestBaseAccountsClient) createHandleError(resp *http.Response) error {
	body, err := runtime.Payload(resp)
	if err != nil {
		return runtime.NewResponseError(err, resp)
	}
	errType := ErrorResponse{raw: string(body)}
	if err := runtime.UnmarshalAsJSON(resp, &errType); err != nil {
		return runtime.NewResponseError(fmt.Errorf("%s\n%s", string(body), err), resp)
	}
	return runtime.NewResponseError(&errType, resp)
}

// BeginDelete - Deletes a Test Base Account.
// If the operation fails it returns the *ErrorResponse error type.
func (client *TestBaseAccountsClient) BeginDelete(ctx context.Context, resourceGroupName string, testBaseAccountName string, options *TestBaseAccountsBeginDeleteOptions) (TestBaseAccountsDeletePollerResponse, error) {
	resp, err := client.deleteOperation(ctx, resourceGroupName, testBaseAccountName, options)
	if err != nil {
		return TestBaseAccountsDeletePollerResponse{}, err
	}
	result := TestBaseAccountsDeletePollerResponse{
		RawResponse: resp,
	}
	pt, err := armruntime.NewPoller("TestBaseAccountsClient.Delete", "azure-async-operation", resp, client.pl, client.deleteHandleError)
	if err != nil {
		return TestBaseAccountsDeletePollerResponse{}, err
	}
	result.Poller = &TestBaseAccountsDeletePoller{
		pt: pt,
	}
	return result, nil
}

// Delete - Deletes a Test Base Account.
// If the operation fails it returns the *ErrorResponse error type.
func (client *TestBaseAccountsClient) deleteOperation(ctx context.Context, resourceGroupName string, testBaseAccountName string, options *TestBaseAccountsBeginDeleteOptions) (*http.Response, error) {
	req, err := client.deleteCreateRequest(ctx, resourceGroupName, testBaseAccountName, options)
	if err != nil {
		return nil, err
	}
	resp, err := client.pl.Do(req)
	if err != nil {
		return nil, err
	}
	if !runtime.HasStatusCode(resp, http.StatusOK, http.StatusAccepted, http.StatusNoContent) {
		return nil, client.deleteHandleError(resp)
	}
	return resp, nil
}

// deleteCreateRequest creates the Delete request.
func (client *TestBaseAccountsClient) deleteCreateRequest(ctx context.Context, resourceGroupName string, testBaseAccountName string, options *TestBaseAccountsBeginDeleteOptions) (*policy.Request, error) {
	urlPath := "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.TestBase/testBaseAccounts/{testBaseAccountName}"
	if client.subscriptionID == "" {
		return nil, errors.New("parameter client.subscriptionID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{subscriptionId}", url.PathEscape(client.subscriptionID))
	if resourceGroupName == "" {
		return nil, errors.New("parameter resourceGroupName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{resourceGroupName}", url.PathEscape(resourceGroupName))
	if testBaseAccountName == "" {
		return nil, errors.New("parameter testBaseAccountName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{testBaseAccountName}", url.PathEscape(testBaseAccountName))
	req, err := runtime.NewRequest(ctx, http.MethodDelete, runtime.JoinPaths(client.ep, urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("api-version", "2020-12-16-preview")
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header.Set("Accept", "application/json")
	return req, nil
}

// deleteHandleError handles the Delete error response.
func (client *TestBaseAccountsClient) deleteHandleError(resp *http.Response) error {
	body, err := runtime.Payload(resp)
	if err != nil {
		return runtime.NewResponseError(err, resp)
	}
	errType := ErrorResponse{raw: string(body)}
	if err := runtime.UnmarshalAsJSON(resp, &errType); err != nil {
		return runtime.NewResponseError(fmt.Errorf("%s\n%s", string(body), err), resp)
	}
	return runtime.NewResponseError(&errType, resp)
}

// Get - Gets a Test Base Account.
// If the operation fails it returns the *ErrorResponse error type.
func (client *TestBaseAccountsClient) Get(ctx context.Context, resourceGroupName string, testBaseAccountName string, options *TestBaseAccountsGetOptions) (TestBaseAccountsGetResponse, error) {
	req, err := client.getCreateRequest(ctx, resourceGroupName, testBaseAccountName, options)
	if err != nil {
		return TestBaseAccountsGetResponse{}, err
	}
	resp, err := client.pl.Do(req)
	if err != nil {
		return TestBaseAccountsGetResponse{}, err
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {
		return TestBaseAccountsGetResponse{}, client.getHandleError(resp)
	}
	return client.getHandleResponse(resp)
}

// getCreateRequest creates the Get request.
func (client *TestBaseAccountsClient) getCreateRequest(ctx context.Context, resourceGroupName string, testBaseAccountName string, options *TestBaseAccountsGetOptions) (*policy.Request, error) {
	urlPath := "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.TestBase/testBaseAccounts/{testBaseAccountName}"
	if client.subscriptionID == "" {
		return nil, errors.New("parameter client.subscriptionID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{subscriptionId}", url.PathEscape(client.subscriptionID))
	if resourceGroupName == "" {
		return nil, errors.New("parameter resourceGroupName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{resourceGroupName}", url.PathEscape(resourceGroupName))
	if testBaseAccountName == "" {
		return nil, errors.New("parameter testBaseAccountName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{testBaseAccountName}", url.PathEscape(testBaseAccountName))
	req, err := runtime.NewRequest(ctx, http.MethodGet, runtime.JoinPaths(client.ep, urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("api-version", "2020-12-16-preview")
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header.Set("Accept", "application/json")
	return req, nil
}

// getHandleResponse handles the Get response.
func (client *TestBaseAccountsClient) getHandleResponse(resp *http.Response) (TestBaseAccountsGetResponse, error) {
	result := TestBaseAccountsGetResponse{RawResponse: resp}
	if err := runtime.UnmarshalAsJSON(resp, &result.TestBaseAccountResource); err != nil {
		return TestBaseAccountsGetResponse{}, runtime.NewResponseError(err, resp)
	}
	return result, nil
}

// getHandleError handles the Get error response.
func (client *TestBaseAccountsClient) getHandleError(resp *http.Response) error {
	body, err := runtime.Payload(resp)
	if err != nil {
		return runtime.NewResponseError(err, resp)
	}
	errType := ErrorResponse{raw: string(body)}
	if err := runtime.UnmarshalAsJSON(resp, &errType); err != nil {
		return runtime.NewResponseError(fmt.Errorf("%s\n%s", string(body), err), resp)
	}
	return runtime.NewResponseError(&errType, resp)
}

// GetFileUploadURL - Gets the file upload URL of a Test Base Account.
// If the operation fails it returns the *ErrorResponse error type.
func (client *TestBaseAccountsClient) GetFileUploadURL(ctx context.Context, resourceGroupName string, testBaseAccountName string, options *TestBaseAccountsGetFileUploadURLOptions) (TestBaseAccountsGetFileUploadURLResponse, error) {
	req, err := client.getFileUploadURLCreateRequest(ctx, resourceGroupName, testBaseAccountName, options)
	if err != nil {
		return TestBaseAccountsGetFileUploadURLResponse{}, err
	}
	resp, err := client.pl.Do(req)
	if err != nil {
		return TestBaseAccountsGetFileUploadURLResponse{}, err
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {
		return TestBaseAccountsGetFileUploadURLResponse{}, client.getFileUploadURLHandleError(resp)
	}
	return client.getFileUploadURLHandleResponse(resp)
}

// getFileUploadURLCreateRequest creates the GetFileUploadURL request.
func (client *TestBaseAccountsClient) getFileUploadURLCreateRequest(ctx context.Context, resourceGroupName string, testBaseAccountName string, options *TestBaseAccountsGetFileUploadURLOptions) (*policy.Request, error) {
	urlPath := "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.TestBase/testBaseAccounts/{testBaseAccountName}/getFileUploadUrl"
	if client.subscriptionID == "" {
		return nil, errors.New("parameter client.subscriptionID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{subscriptionId}", url.PathEscape(client.subscriptionID))
	if resourceGroupName == "" {
		return nil, errors.New("parameter resourceGroupName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{resourceGroupName}", url.PathEscape(resourceGroupName))
	if testBaseAccountName == "" {
		return nil, errors.New("parameter testBaseAccountName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{testBaseAccountName}", url.PathEscape(testBaseAccountName))
	req, err := runtime.NewRequest(ctx, http.MethodPost, runtime.JoinPaths(client.ep, urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("api-version", "2020-12-16-preview")
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header.Set("Accept", "application/json")
	if options != nil && options.Parameters != nil {
		return req, runtime.MarshalAsJSON(req, *options.Parameters)
	}
	return req, nil
}

// getFileUploadURLHandleResponse handles the GetFileUploadURL response.
func (client *TestBaseAccountsClient) getFileUploadURLHandleResponse(resp *http.Response) (TestBaseAccountsGetFileUploadURLResponse, error) {
	result := TestBaseAccountsGetFileUploadURLResponse{RawResponse: resp}
	if err := runtime.UnmarshalAsJSON(resp, &result.FileUploadURLResponse); err != nil {
		return TestBaseAccountsGetFileUploadURLResponse{}, runtime.NewResponseError(err, resp)
	}
	return result, nil
}

// getFileUploadURLHandleError handles the GetFileUploadURL error response.
func (client *TestBaseAccountsClient) getFileUploadURLHandleError(resp *http.Response) error {
	body, err := runtime.Payload(resp)
	if err != nil {
		return runtime.NewResponseError(err, resp)
	}
	errType := ErrorResponse{raw: string(body)}
	if err := runtime.UnmarshalAsJSON(resp, &errType); err != nil {
		return runtime.NewResponseError(fmt.Errorf("%s\n%s", string(body), err), resp)
	}
	return runtime.NewResponseError(&errType, resp)
}

// ListByResourceGroup - Lists all the Test Base Accounts in a resource group.
// If the operation fails it returns the *ErrorResponse error type.
func (client *TestBaseAccountsClient) ListByResourceGroup(resourceGroupName string, options *TestBaseAccountsListByResourceGroupOptions) *TestBaseAccountsListByResourceGroupPager {
	return &TestBaseAccountsListByResourceGroupPager{
		client: client,
		requester: func(ctx context.Context) (*policy.Request, error) {
			return client.listByResourceGroupCreateRequest(ctx, resourceGroupName, options)
		},
		advancer: func(ctx context.Context, resp TestBaseAccountsListByResourceGroupResponse) (*policy.Request, error) {
			return runtime.NewRequest(ctx, http.MethodGet, *resp.TestBaseAccountListResult.NextLink)
		},
	}
}

// listByResourceGroupCreateRequest creates the ListByResourceGroup request.
func (client *TestBaseAccountsClient) listByResourceGroupCreateRequest(ctx context.Context, resourceGroupName string, options *TestBaseAccountsListByResourceGroupOptions) (*policy.Request, error) {
	urlPath := "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.TestBase/testBaseAccounts"
	if client.subscriptionID == "" {
		return nil, errors.New("parameter client.subscriptionID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{subscriptionId}", url.PathEscape(client.subscriptionID))
	if resourceGroupName == "" {
		return nil, errors.New("parameter resourceGroupName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{resourceGroupName}", url.PathEscape(resourceGroupName))
	req, err := runtime.NewRequest(ctx, http.MethodGet, runtime.JoinPaths(client.ep, urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	if options != nil && options.GetDeleted != nil {
		reqQP.Set("getDeleted", strconv.FormatBool(*options.GetDeleted))
	}
	reqQP.Set("api-version", "2020-12-16-preview")
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header.Set("Accept", "application/json")
	return req, nil
}

// listByResourceGroupHandleResponse handles the ListByResourceGroup response.
func (client *TestBaseAccountsClient) listByResourceGroupHandleResponse(resp *http.Response) (TestBaseAccountsListByResourceGroupResponse, error) {
	result := TestBaseAccountsListByResourceGroupResponse{RawResponse: resp}
	if err := runtime.UnmarshalAsJSON(resp, &result.TestBaseAccountListResult); err != nil {
		return TestBaseAccountsListByResourceGroupResponse{}, runtime.NewResponseError(err, resp)
	}
	return result, nil
}

// listByResourceGroupHandleError handles the ListByResourceGroup error response.
func (client *TestBaseAccountsClient) listByResourceGroupHandleError(resp *http.Response) error {
	body, err := runtime.Payload(resp)
	if err != nil {
		return runtime.NewResponseError(err, resp)
	}
	errType := ErrorResponse{raw: string(body)}
	if err := runtime.UnmarshalAsJSON(resp, &errType); err != nil {
		return runtime.NewResponseError(fmt.Errorf("%s\n%s", string(body), err), resp)
	}
	return runtime.NewResponseError(&errType, resp)
}

// ListBySubscription - Lists all the Test Base Accounts in a subscription. This API is required by ARM guidelines.
// If the operation fails it returns the *ErrorResponse error type.
func (client *TestBaseAccountsClient) ListBySubscription(options *TestBaseAccountsListBySubscriptionOptions) *TestBaseAccountsListBySubscriptionPager {
	return &TestBaseAccountsListBySubscriptionPager{
		client: client,
		requester: func(ctx context.Context) (*policy.Request, error) {
			return client.listBySubscriptionCreateRequest(ctx, options)
		},
		advancer: func(ctx context.Context, resp TestBaseAccountsListBySubscriptionResponse) (*policy.Request, error) {
			return runtime.NewRequest(ctx, http.MethodGet, *resp.TestBaseAccountListResult.NextLink)
		},
	}
}

// listBySubscriptionCreateRequest creates the ListBySubscription request.
func (client *TestBaseAccountsClient) listBySubscriptionCreateRequest(ctx context.Context, options *TestBaseAccountsListBySubscriptionOptions) (*policy.Request, error) {
	urlPath := "/subscriptions/{subscriptionId}/providers/Microsoft.TestBase/testBaseAccounts"
	if client.subscriptionID == "" {
		return nil, errors.New("parameter client.subscriptionID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{subscriptionId}", url.PathEscape(client.subscriptionID))
	req, err := runtime.NewRequest(ctx, http.MethodGet, runtime.JoinPaths(client.ep, urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	if options != nil && options.GetDeleted != nil {
		reqQP.Set("getDeleted", strconv.FormatBool(*options.GetDeleted))
	}
	reqQP.Set("api-version", "2020-12-16-preview")
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header.Set("Accept", "application/json")
	return req, nil
}

// listBySubscriptionHandleResponse handles the ListBySubscription response.
func (client *TestBaseAccountsClient) listBySubscriptionHandleResponse(resp *http.Response) (TestBaseAccountsListBySubscriptionResponse, error) {
	result := TestBaseAccountsListBySubscriptionResponse{RawResponse: resp}
	if err := runtime.UnmarshalAsJSON(resp, &result.TestBaseAccountListResult); err != nil {
		return TestBaseAccountsListBySubscriptionResponse{}, runtime.NewResponseError(err, resp)
	}
	return result, nil
}

// listBySubscriptionHandleError handles the ListBySubscription error response.
func (client *TestBaseAccountsClient) listBySubscriptionHandleError(resp *http.Response) error {
	body, err := runtime.Payload(resp)
	if err != nil {
		return runtime.NewResponseError(err, resp)
	}
	errType := ErrorResponse{raw: string(body)}
	if err := runtime.UnmarshalAsJSON(resp, &errType); err != nil {
		return runtime.NewResponseError(fmt.Errorf("%s\n%s", string(body), err), resp)
	}
	return runtime.NewResponseError(&errType, resp)
}

// BeginOffboard - Offboard a Test Base Account.
// If the operation fails it returns the *ErrorResponse error type.
func (client *TestBaseAccountsClient) BeginOffboard(ctx context.Context, resourceGroupName string, testBaseAccountName string, options *TestBaseAccountsBeginOffboardOptions) (TestBaseAccountsOffboardPollerResponse, error) {
	resp, err := client.offboard(ctx, resourceGroupName, testBaseAccountName, options)
	if err != nil {
		return TestBaseAccountsOffboardPollerResponse{}, err
	}
	result := TestBaseAccountsOffboardPollerResponse{
		RawResponse: resp,
	}
	pt, err := armruntime.NewPoller("TestBaseAccountsClient.Offboard", "azure-async-operation", resp, client.pl, client.offboardHandleError)
	if err != nil {
		return TestBaseAccountsOffboardPollerResponse{}, err
	}
	result.Poller = &TestBaseAccountsOffboardPoller{
		pt: pt,
	}
	return result, nil
}

// Offboard - Offboard a Test Base Account.
// If the operation fails it returns the *ErrorResponse error type.
func (client *TestBaseAccountsClient) offboard(ctx context.Context, resourceGroupName string, testBaseAccountName string, options *TestBaseAccountsBeginOffboardOptions) (*http.Response, error) {
	req, err := client.offboardCreateRequest(ctx, resourceGroupName, testBaseAccountName, options)
	if err != nil {
		return nil, err
	}
	resp, err := client.pl.Do(req)
	if err != nil {
		return nil, err
	}
	if !runtime.HasStatusCode(resp, http.StatusOK, http.StatusAccepted, http.StatusNoContent) {
		return nil, client.offboardHandleError(resp)
	}
	return resp, nil
}

// offboardCreateRequest creates the Offboard request.
func (client *TestBaseAccountsClient) offboardCreateRequest(ctx context.Context, resourceGroupName string, testBaseAccountName string, options *TestBaseAccountsBeginOffboardOptions) (*policy.Request, error) {
	urlPath := "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.TestBase/testBaseAccounts/{testBaseAccountName}/offboard"
	if client.subscriptionID == "" {
		return nil, errors.New("parameter client.subscriptionID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{subscriptionId}", url.PathEscape(client.subscriptionID))
	if resourceGroupName == "" {
		return nil, errors.New("parameter resourceGroupName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{resourceGroupName}", url.PathEscape(resourceGroupName))
	if testBaseAccountName == "" {
		return nil, errors.New("parameter testBaseAccountName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{testBaseAccountName}", url.PathEscape(testBaseAccountName))
	req, err := runtime.NewRequest(ctx, http.MethodPost, runtime.JoinPaths(client.ep, urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("api-version", "2020-12-16-preview")
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header.Set("Accept", "application/json")
	return req, nil
}

// offboardHandleError handles the Offboard error response.
func (client *TestBaseAccountsClient) offboardHandleError(resp *http.Response) error {
	body, err := runtime.Payload(resp)
	if err != nil {
		return runtime.NewResponseError(err, resp)
	}
	errType := ErrorResponse{raw: string(body)}
	if err := runtime.UnmarshalAsJSON(resp, &errType); err != nil {
		return runtime.NewResponseError(fmt.Errorf("%s\n%s", string(body), err), resp)
	}
	return runtime.NewResponseError(&errType, resp)
}

// BeginUpdate - Update an existing Test Base Account.
// If the operation fails it returns the *ErrorResponse error type.
func (client *TestBaseAccountsClient) BeginUpdate(ctx context.Context, resourceGroupName string, testBaseAccountName string, parameters TestBaseAccountUpdateParameters, options *TestBaseAccountsBeginUpdateOptions) (TestBaseAccountsUpdatePollerResponse, error) {
	resp, err := client.update(ctx, resourceGroupName, testBaseAccountName, parameters, options)
	if err != nil {
		return TestBaseAccountsUpdatePollerResponse{}, err
	}
	result := TestBaseAccountsUpdatePollerResponse{
		RawResponse: resp,
	}
	pt, err := armruntime.NewPoller("TestBaseAccountsClient.Update", "azure-async-operation", resp, client.pl, client.updateHandleError)
	if err != nil {
		return TestBaseAccountsUpdatePollerResponse{}, err
	}
	result.Poller = &TestBaseAccountsUpdatePoller{
		pt: pt,
	}
	return result, nil
}

// Update - Update an existing Test Base Account.
// If the operation fails it returns the *ErrorResponse error type.
func (client *TestBaseAccountsClient) update(ctx context.Context, resourceGroupName string, testBaseAccountName string, parameters TestBaseAccountUpdateParameters, options *TestBaseAccountsBeginUpdateOptions) (*http.Response, error) {
	req, err := client.updateCreateRequest(ctx, resourceGroupName, testBaseAccountName, parameters, options)
	if err != nil {
		return nil, err
	}
	resp, err := client.pl.Do(req)
	if err != nil {
		return nil, err
	}
	if !runtime.HasStatusCode(resp, http.StatusOK, http.StatusCreated, http.StatusAccepted) {
		return nil, client.updateHandleError(resp)
	}
	return resp, nil
}

// updateCreateRequest creates the Update request.
func (client *TestBaseAccountsClient) updateCreateRequest(ctx context.Context, resourceGroupName string, testBaseAccountName string, parameters TestBaseAccountUpdateParameters, options *TestBaseAccountsBeginUpdateOptions) (*policy.Request, error) {
	urlPath := "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.TestBase/testBaseAccounts/{testBaseAccountName}"
	if client.subscriptionID == "" {
		return nil, errors.New("parameter client.subscriptionID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{subscriptionId}", url.PathEscape(client.subscriptionID))
	if resourceGroupName == "" {
		return nil, errors.New("parameter resourceGroupName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{resourceGroupName}", url.PathEscape(resourceGroupName))
	if testBaseAccountName == "" {
		return nil, errors.New("parameter testBaseAccountName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{testBaseAccountName}", url.PathEscape(testBaseAccountName))
	req, err := runtime.NewRequest(ctx, http.MethodPatch, runtime.JoinPaths(client.ep, urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("api-version", "2020-12-16-preview")
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header.Set("Accept", "application/json")
	return req, runtime.MarshalAsJSON(req, parameters)
}

// updateHandleError handles the Update error response.
func (client *TestBaseAccountsClient) updateHandleError(resp *http.Response) error {
	body, err := runtime.Payload(resp)
	if err != nil {
		return runtime.NewResponseError(err, resp)
	}
	errType := ErrorResponse{raw: string(body)}
	if err := runtime.UnmarshalAsJSON(resp, &errType); err != nil {
		return runtime.NewResponseError(fmt.Errorf("%s\n%s", string(body), err), resp)
	}
	return runtime.NewResponseError(&errType, resp)
}
