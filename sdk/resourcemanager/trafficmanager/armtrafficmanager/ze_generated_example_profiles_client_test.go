//go:build go1.16
// +build go1.16

// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

package armtrafficmanager_test

import (
	"context"
	"log"

	"github.com/Azure/azure-sdk-for-go/sdk/azcore/to"
	"github.com/Azure/azure-sdk-for-go/sdk/azidentity"
	"github.com/Azure/azure-sdk-for-go/sdk/resourcemanager/trafficmanager/armtrafficmanager"
)

// x-ms-original-file: specification/trafficmanager/resource-manager/Microsoft.Network/stable/2018-08-01/examples/NameAvailabilityTest_NameAvailable-POST-example-21.json
func ExampleProfilesClient_CheckTrafficManagerRelativeDNSNameAvailability() {
	cred, err := azidentity.NewDefaultAzureCredential(nil)
	if err != nil {
		log.Fatalf("failed to obtain a credential: %v", err)
	}
	ctx := context.Background()
	client := armtrafficmanager.NewProfilesClient("<subscription-id>", cred, nil)
	_, err = client.CheckTrafficManagerRelativeDNSNameAvailability(ctx,
		armtrafficmanager.CheckTrafficManagerRelativeDNSNameAvailabilityParameters{
			Name: to.StringPtr("<name>"),
			Type: to.StringPtr("<type>"),
		},
		nil)
	if err != nil {
		log.Fatal(err)
	}
}

// x-ms-original-file: specification/trafficmanager/resource-manager/Microsoft.Network/stable/2018-08-01/examples/Profile-GET-ByResourceGroup.json
func ExampleProfilesClient_ListByResourceGroup() {
	cred, err := azidentity.NewDefaultAzureCredential(nil)
	if err != nil {
		log.Fatalf("failed to obtain a credential: %v", err)
	}
	ctx := context.Background()
	client := armtrafficmanager.NewProfilesClient("<subscription-id>", cred, nil)
	_, err = client.ListByResourceGroup(ctx,
		"<resource-group-name>",
		nil)
	if err != nil {
		log.Fatal(err)
	}
}

// x-ms-original-file: specification/trafficmanager/resource-manager/Microsoft.Network/stable/2018-08-01/examples/Profile-GET-BySubscription.json
func ExampleProfilesClient_ListBySubscription() {
	cred, err := azidentity.NewDefaultAzureCredential(nil)
	if err != nil {
		log.Fatalf("failed to obtain a credential: %v", err)
	}
	ctx := context.Background()
	client := armtrafficmanager.NewProfilesClient("<subscription-id>", cred, nil)
	_, err = client.ListBySubscription(ctx,
		nil)
	if err != nil {
		log.Fatal(err)
	}
}

// x-ms-original-file: specification/trafficmanager/resource-manager/Microsoft.Network/stable/2018-08-01/examples/Profile-GET-WithEndpoints.json
func ExampleProfilesClient_Get() {
	cred, err := azidentity.NewDefaultAzureCredential(nil)
	if err != nil {
		log.Fatalf("failed to obtain a credential: %v", err)
	}
	ctx := context.Background()
	client := armtrafficmanager.NewProfilesClient("<subscription-id>", cred, nil)
	res, err := client.Get(ctx,
		"<resource-group-name>",
		"<profile-name>",
		nil)
	if err != nil {
		log.Fatal(err)
	}
	log.Printf("Profile.ID: %s\n", *res.ID)
}

// x-ms-original-file: specification/trafficmanager/resource-manager/Microsoft.Network/stable/2018-08-01/examples/Profile-PUT-MultiValue.json
func ExampleProfilesClient_CreateOrUpdate() {
	cred, err := azidentity.NewDefaultAzureCredential(nil)
	if err != nil {
		log.Fatalf("failed to obtain a credential: %v", err)
	}
	ctx := context.Background()
	client := armtrafficmanager.NewProfilesClient("<subscription-id>", cred, nil)
	res, err := client.CreateOrUpdate(ctx,
		"<resource-group-name>",
		"<profile-name>",
		armtrafficmanager.Profile{
			TrackedResource: armtrafficmanager.TrackedResource{
				Location: to.StringPtr("<location>"),
			},
			Properties: &armtrafficmanager.ProfileProperties{
				DNSConfig: &armtrafficmanager.DNSConfig{
					RelativeName: to.StringPtr("<relative-name>"),
					TTL:          to.Int64Ptr(35),
				},
				MaxReturn: to.Int64Ptr(2),
				MonitorConfig: &armtrafficmanager.MonitorConfig{
					Path:     to.StringPtr("<path>"),
					Port:     to.Int64Ptr(80),
					Protocol: armtrafficmanager.MonitorProtocolHTTP.ToPtr(),
				},
				ProfileStatus:               armtrafficmanager.ProfileStatusEnabled.ToPtr(),
				TrafficRoutingMethod:        armtrafficmanager.TrafficRoutingMethodMultiValue.ToPtr(),
				TrafficViewEnrollmentStatus: armtrafficmanager.TrafficViewEnrollmentStatusDisabled.ToPtr(),
			},
		},
		nil)
	if err != nil {
		log.Fatal(err)
	}
	log.Printf("Profile.ID: %s\n", *res.ID)
}

// x-ms-original-file: specification/trafficmanager/resource-manager/Microsoft.Network/stable/2018-08-01/examples/Profile-DELETE.json
func ExampleProfilesClient_Delete() {
	cred, err := azidentity.NewDefaultAzureCredential(nil)
	if err != nil {
		log.Fatalf("failed to obtain a credential: %v", err)
	}
	ctx := context.Background()
	client := armtrafficmanager.NewProfilesClient("<subscription-id>", cred, nil)
	_, err = client.Delete(ctx,
		"<resource-group-name>",
		"<profile-name>",
		nil)
	if err != nil {
		log.Fatal(err)
	}
}

// x-ms-original-file: specification/trafficmanager/resource-manager/Microsoft.Network/stable/2018-08-01/examples/Profile-PATCH-MonitorConfig.json
func ExampleProfilesClient_Update() {
	cred, err := azidentity.NewDefaultAzureCredential(nil)
	if err != nil {
		log.Fatalf("failed to obtain a credential: %v", err)
	}
	ctx := context.Background()
	client := armtrafficmanager.NewProfilesClient("<subscription-id>", cred, nil)
	res, err := client.Update(ctx,
		"<resource-group-name>",
		"<profile-name>",
		armtrafficmanager.Profile{
			Properties: &armtrafficmanager.ProfileProperties{
				MonitorConfig: &armtrafficmanager.MonitorConfig{
					Path: to.StringPtr("<path>"),
					CustomHeaders: []*armtrafficmanager.MonitorConfigCustomHeadersItem{
						{
							Name:  to.StringPtr("<name>"),
							Value: to.StringPtr("<value>"),
						},
						{
							Name:  to.StringPtr("<name>"),
							Value: to.StringPtr("<value>"),
						}},
					IntervalInSeconds:         to.Int64Ptr(30),
					Port:                      to.Int64Ptr(80),
					TimeoutInSeconds:          to.Int64Ptr(6),
					ToleratedNumberOfFailures: to.Int64Ptr(4),
					Protocol:                  armtrafficmanager.MonitorProtocolHTTP.ToPtr(),
				},
			},
		},
		nil)
	if err != nil {
		log.Fatal(err)
	}
	log.Printf("Profile.ID: %s\n", *res.ID)
}
