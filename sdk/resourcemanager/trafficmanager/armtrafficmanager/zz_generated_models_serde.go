//go:build go1.18
// +build go1.18

// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

package armtrafficmanager

import (
	"encoding/json"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore"
	"reflect"
)

// MarshalJSON implements the json.Marshaller interface for type CloudErrorBody.
func (c CloudErrorBody) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "code", c.Code)
	populate(objectMap, "details", c.Details)
	populate(objectMap, "message", c.Message)
	populate(objectMap, "target", c.Target)
	return json.Marshal(objectMap)
}

// MarshalJSON implements the json.Marshaller interface for type Endpoint.
func (e Endpoint) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "id", e.ID)
	populate(objectMap, "name", e.Name)
	populate(objectMap, "properties", e.Properties)
	populate(objectMap, "type", e.Type)
	return json.Marshal(objectMap)
}

// MarshalJSON implements the json.Marshaller interface for type EndpointProperties.
func (e EndpointProperties) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "customHeaders", e.CustomHeaders)
	populate(objectMap, "endpointLocation", e.EndpointLocation)
	populate(objectMap, "endpointMonitorStatus", e.EndpointMonitorStatus)
	populate(objectMap, "endpointStatus", e.EndpointStatus)
	populate(objectMap, "geoMapping", e.GeoMapping)
	populate(objectMap, "minChildEndpoints", e.MinChildEndpoints)
	populate(objectMap, "minChildEndpointsIPv4", e.MinChildEndpointsIPv4)
	populate(objectMap, "minChildEndpointsIPv6", e.MinChildEndpointsIPv6)
	populate(objectMap, "priority", e.Priority)
	populate(objectMap, "subnets", e.Subnets)
	populate(objectMap, "target", e.Target)
	populate(objectMap, "targetResourceId", e.TargetResourceID)
	populate(objectMap, "weight", e.Weight)
	return json.Marshal(objectMap)
}

// MarshalJSON implements the json.Marshaller interface for type HeatMapProperties.
func (h HeatMapProperties) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populateTimeRFC3339(objectMap, "endTime", h.EndTime)
	populate(objectMap, "endpoints", h.Endpoints)
	populateTimeRFC3339(objectMap, "startTime", h.StartTime)
	populate(objectMap, "trafficFlows", h.TrafficFlows)
	return json.Marshal(objectMap)
}

// UnmarshalJSON implements the json.Unmarshaller interface for type HeatMapProperties.
func (h *HeatMapProperties) UnmarshalJSON(data []byte) error {
	var rawMsg map[string]json.RawMessage
	if err := json.Unmarshal(data, &rawMsg); err != nil {
		return err
	}
	for key, val := range rawMsg {
		var err error
		switch key {
		case "endTime":
			err = unpopulateTimeRFC3339(val, &h.EndTime)
			delete(rawMsg, key)
		case "endpoints":
			err = unpopulate(val, &h.Endpoints)
			delete(rawMsg, key)
		case "startTime":
			err = unpopulateTimeRFC3339(val, &h.StartTime)
			delete(rawMsg, key)
		case "trafficFlows":
			err = unpopulate(val, &h.TrafficFlows)
			delete(rawMsg, key)
		}
		if err != nil {
			return err
		}
	}
	return nil
}

// MarshalJSON implements the json.Marshaller interface for type MonitorConfig.
func (m MonitorConfig) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "customHeaders", m.CustomHeaders)
	populate(objectMap, "expectedStatusCodeRanges", m.ExpectedStatusCodeRanges)
	populate(objectMap, "intervalInSeconds", m.IntervalInSeconds)
	populate(objectMap, "path", m.Path)
	populate(objectMap, "port", m.Port)
	populate(objectMap, "profileMonitorStatus", m.ProfileMonitorStatus)
	populate(objectMap, "protocol", m.Protocol)
	populate(objectMap, "timeoutInSeconds", m.TimeoutInSeconds)
	populate(objectMap, "toleratedNumberOfFailures", m.ToleratedNumberOfFailures)
	return json.Marshal(objectMap)
}

// MarshalJSON implements the json.Marshaller interface for type Profile.
func (p Profile) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "id", p.ID)
	populate(objectMap, "location", p.Location)
	populate(objectMap, "name", p.Name)
	populate(objectMap, "properties", p.Properties)
	populate(objectMap, "tags", p.Tags)
	populate(objectMap, "type", p.Type)
	return json.Marshal(objectMap)
}

// MarshalJSON implements the json.Marshaller interface for type ProfileListResult.
func (p ProfileListResult) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "value", p.Value)
	return json.Marshal(objectMap)
}

// MarshalJSON implements the json.Marshaller interface for type ProfileProperties.
func (p ProfileProperties) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "allowedEndpointRecordTypes", p.AllowedEndpointRecordTypes)
	populate(objectMap, "dnsConfig", p.DNSConfig)
	populate(objectMap, "endpoints", p.Endpoints)
	populate(objectMap, "maxReturn", p.MaxReturn)
	populate(objectMap, "monitorConfig", p.MonitorConfig)
	populate(objectMap, "profileStatus", p.ProfileStatus)
	populate(objectMap, "trafficRoutingMethod", p.TrafficRoutingMethod)
	populate(objectMap, "trafficViewEnrollmentStatus", p.TrafficViewEnrollmentStatus)
	return json.Marshal(objectMap)
}

// MarshalJSON implements the json.Marshaller interface for type Region.
func (r Region) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "code", r.Code)
	populate(objectMap, "name", r.Name)
	populate(objectMap, "regions", r.Regions)
	return json.Marshal(objectMap)
}

// MarshalJSON implements the json.Marshaller interface for type TrackedResource.
func (t TrackedResource) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "id", t.ID)
	populate(objectMap, "location", t.Location)
	populate(objectMap, "name", t.Name)
	populate(objectMap, "tags", t.Tags)
	populate(objectMap, "type", t.Type)
	return json.Marshal(objectMap)
}

// MarshalJSON implements the json.Marshaller interface for type TrafficFlow.
func (t TrafficFlow) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "latitude", t.Latitude)
	populate(objectMap, "longitude", t.Longitude)
	populate(objectMap, "queryExperiences", t.QueryExperiences)
	populate(objectMap, "sourceIp", t.SourceIP)
	return json.Marshal(objectMap)
}

func populate(m map[string]interface{}, k string, v interface{}) {
	if v == nil {
		return
	} else if azcore.IsNullValue(v) {
		m[k] = nil
	} else if !reflect.ValueOf(v).IsNil() {
		m[k] = v
	}
}

func unpopulate(data json.RawMessage, v interface{}) error {
	if data == nil {
		return nil
	}
	return json.Unmarshal(data, v)
}
