//go:build go1.18
// +build go1.18

// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator. DO NOT EDIT.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

package armvideoanalyzer

import "time"

// AccessPolicyEntity - Access policies help define the authentication rules, and control access to specific video resources.
type AccessPolicyEntity struct {
	// The resource properties.
	Properties *AccessPolicyProperties

	// READ-ONLY; Fully qualified resource ID for the resource. Ex - /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}
	ID *string

	// READ-ONLY; The name of the resource
	Name *string

	// READ-ONLY; Azure Resource Manager metadata containing createdBy and modifiedBy information.
	SystemData *SystemData

	// READ-ONLY; The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or "Microsoft.Storage/storageAccounts"
	Type *string
}

// AccessPolicyEntityCollection - A collection of AccessPolicyEntity items.
type AccessPolicyEntityCollection struct {
	// A link to the next page of the collection (when the collection contains too many results to return in one response).
	NextLink *string

	// A collection of AccessPolicyEntity items.
	Value []*AccessPolicyEntity
}

// AccessPolicyProperties - Application level properties for the access policy resource.
type AccessPolicyProperties struct {
	// Authentication method to be used when validating client API access.
	Authentication AuthenticationBaseClassification

	// Defines the access level granted by this policy.
	Role *AccessPolicyRole
}

// AccountEncryption - Defines how the Video Analyzer account is (optionally) encrypted.
type AccountEncryption struct {
	// REQUIRED; The type of key used to encrypt the Account Key.
	Type *AccountEncryptionKeyType

	// The Key Vault identity.
	Identity *ResourceIdentity

	// The properties of the key used to encrypt the account.
	KeyVaultProperties *KeyVaultProperties

	// READ-ONLY; The current status of the Key Vault mapping.
	Status *string
}

// AudioEncoderAac - A custom preset for encoding audio with the AAC codec.
type AudioEncoderAac struct {
	// REQUIRED; The discriminator for derived types.
	Type *string

	// Bitrate, in kilobits per second or Kbps, at which audio should be encoded (2-channel stereo audio at a sampling rate of
// 48 kHz). Allowed values are 96, 112, 128, 160, 192, 224, and 256. If omitted,
// the bitrate of the input audio is used.
	BitrateKbps *string
}

// GetAudioEncoderBase implements the AudioEncoderBaseClassification interface for type AudioEncoderAac.
func (a *AudioEncoderAac) GetAudioEncoderBase() *AudioEncoderBase {
	return &AudioEncoderBase{
		BitrateKbps: a.BitrateKbps,
		Type: a.Type,
	}
}

// AudioEncoderBase - Base type for all audio encoder presets, which define the recipe or instructions on how audio should
// be processed.
type AudioEncoderBase struct {
	// REQUIRED; The discriminator for derived types.
	Type *string

	// Bitrate, in kilobits per second or Kbps, at which audio should be encoded (2-channel stereo audio at a sampling rate of
// 48 kHz). Allowed values are 96, 112, 128, 160, 192, 224, and 256. If omitted,
// the bitrate of the input audio is used.
	BitrateKbps *string
}

// GetAudioEncoderBase implements the AudioEncoderBaseClassification interface for type AudioEncoderBase.
func (a *AudioEncoderBase) GetAudioEncoderBase() *AudioEncoderBase { return a }

// AuthenticationBase - Base class for access policies authentication methods.
type AuthenticationBase struct {
	// REQUIRED; The discriminator for derived types.
	Type *string
}

// GetAuthenticationBase implements the AuthenticationBaseClassification interface for type AuthenticationBase.
func (a *AuthenticationBase) GetAuthenticationBase() *AuthenticationBase { return a }

// CertificateSource - Base class for certificate sources.
type CertificateSource struct {
	// REQUIRED; The discriminator for derived types.
	Type *string
}

// GetCertificateSource implements the CertificateSourceClassification interface for type CertificateSource.
func (c *CertificateSource) GetCertificateSource() *CertificateSource { return c }

// CheckNameAvailabilityRequest - The check availability request body.
type CheckNameAvailabilityRequest struct {
	// The name of the resource for which availability needs to be checked.
	Name *string

	// The resource type.
	Type *string
}

// CheckNameAvailabilityResponse - The check availability result.
type CheckNameAvailabilityResponse struct {
	// Detailed reason why the given name is available.
	Message *string

	// Indicates if the resource name is available.
	NameAvailable *bool

	// The reason why the given name is not available.
	Reason *CheckNameAvailabilityReason
}

// Collection - A collection of VideoAnalyzer items.
type Collection struct {
	// A collection of VideoAnalyzer items.
	Value []*VideoAnalyzer
}

// CredentialsBase - Base class for credential objects.
type CredentialsBase struct {
	// REQUIRED; The discriminator for derived types.
	Type *string
}

// GetCredentialsBase implements the CredentialsBaseClassification interface for type CredentialsBase.
func (c *CredentialsBase) GetCredentialsBase() *CredentialsBase { return c }

// EccTokenKey - Required validation properties for tokens generated with Elliptical Curve algorithm.
type EccTokenKey struct {
	// REQUIRED; Elliptical curve algorithm to be used: ES256, ES384 or ES512.
	Alg *AccessPolicyEccAlgo

	// REQUIRED; JWT token key id. Validation keys are looked up based on the key id present on the JWT token header.
	Kid *string

	// REQUIRED; The discriminator for derived types.
	Type *string

	// REQUIRED; X coordinate.
	X *string

	// REQUIRED; Y coordinate.
	Y *string
}

// GetTokenKey implements the TokenKeyClassification interface for type EccTokenKey.
func (e *EccTokenKey) GetTokenKey() *TokenKey {
	return &TokenKey{
		Kid: e.Kid,
		Type: e.Type,
	}
}

// EdgeModuleEntity - The representation of an edge module.
type EdgeModuleEntity struct {
	// The resource properties.
	Properties *EdgeModuleProperties

	// READ-ONLY; Fully qualified resource ID for the resource. Ex - /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}
	ID *string

	// READ-ONLY; The name of the resource
	Name *string

	// READ-ONLY; Azure Resource Manager metadata containing createdBy and modifiedBy information.
	SystemData *SystemData

	// READ-ONLY; The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or "Microsoft.Storage/storageAccounts"
	Type *string
}

// EdgeModuleEntityCollection - A collection of EdgeModuleEntity items.
type EdgeModuleEntityCollection struct {
	// A link to the next page of the collection (when the collection contains too many results to return in one response).
	NextLink *string

	// A collection of EdgeModuleEntity items.
	Value []*EdgeModuleEntity
}

// EdgeModuleProperties - Application level properties for the edge module resource.
type EdgeModuleProperties struct {
	// READ-ONLY; Internal ID generated for the instance of the Video Analyzer edge module.
	EdgeModuleID *string
}

// EdgeModuleProvisioningToken - Provisioning token properties. A provisioning token allows for a single instance of Azure
// Video analyzer IoT edge module to be initialized and authorized to the cloud account. The provisioning token
// itself is short lived and it is only used for the initial handshake between IoT edge module and the cloud. After the initial
// handshake, the IoT edge module will agree on a set of authentication keys
// which will be auto-rotated as long as the module is able to periodically connect to the cloud. A new provisioning token
// can be generated for the same IoT edge module in case the module state lost or
// reset.
type EdgeModuleProvisioningToken struct {
	// READ-ONLY; The expiration date of the registration token. The Azure Video Analyzer IoT edge module must be initialized
// and connected to the Internet prior to the token expiration date.
	ExpirationDate *time.Time

	// READ-ONLY; The token blob to be provided to the Azure Video Analyzer IoT edge module through the Azure IoT Edge module
// twin properties.
	Token *string
}

// EncoderCustomPreset - Describes a custom preset for encoding the input content using the encoder processor.
type EncoderCustomPreset struct {
	// REQUIRED; The discriminator for derived types.
	Type *string

	// Describes a custom preset for encoding audio.
	AudioEncoder AudioEncoderBaseClassification

	// Describes a custom preset for encoding video.
	VideoEncoder VideoEncoderBaseClassification
}

// GetEncoderPresetBase implements the EncoderPresetBaseClassification interface for type EncoderCustomPreset.
func (e *EncoderCustomPreset) GetEncoderPresetBase() *EncoderPresetBase {
	return &EncoderPresetBase{
		Type: e.Type,
	}
}

// EncoderPresetBase - Base type for all encoder presets, which define the recipe or instructions on how the input content
// should be processed.
type EncoderPresetBase struct {
	// REQUIRED; The discriminator for derived types.
	Type *string
}

// GetEncoderPresetBase implements the EncoderPresetBaseClassification interface for type EncoderPresetBase.
func (e *EncoderPresetBase) GetEncoderPresetBase() *EncoderPresetBase { return e }

// EncoderProcessor - Encoder processor allows for encoding of the input content. For example, it can used to change the resolution
// from 4K to 1280x720.
type EncoderProcessor struct {
	// REQUIRED; An array of upstream node references within the topology to be used as inputs for this node.
	Inputs []*NodeInput

	// REQUIRED; Node name. Must be unique within the topology.
	Name *string

	// REQUIRED; The encoder preset, which defines the recipe or instructions on how the input content should be processed.
	Preset EncoderPresetBaseClassification

	// REQUIRED; The discriminator for derived types.
	Type *string
}

// GetNodeBase implements the NodeBaseClassification interface for type EncoderProcessor.
func (e *EncoderProcessor) GetNodeBase() *NodeBase {
	return &NodeBase{
		Name: e.Name,
		Type: e.Type,
	}
}

// GetProcessorNodeBase implements the ProcessorNodeBaseClassification interface for type EncoderProcessor.
func (e *EncoderProcessor) GetProcessorNodeBase() *ProcessorNodeBase {
	return &ProcessorNodeBase{
		Inputs: e.Inputs,
		Name: e.Name,
		Type: e.Type,
	}
}

// EncoderSystemPreset - Describes a built-in preset for encoding the input content using the encoder processor.
type EncoderSystemPreset struct {
	// REQUIRED; Name of the built-in encoding preset.
	Name *EncoderSystemPresetType

	// REQUIRED; The discriminator for derived types.
	Type *string
}

// GetEncoderPresetBase implements the EncoderPresetBaseClassification interface for type EncoderSystemPreset.
func (e *EncoderSystemPreset) GetEncoderPresetBase() *EncoderPresetBase {
	return &EncoderPresetBase{
		Type: e.Type,
	}
}

// Endpoint - The endpoint details.
type Endpoint struct {
	// REQUIRED; The type of the endpoint.
	Type *VideoAnalyzerEndpointType

	// The URL of the endpoint.
	EndpointURL *string
}

// EndpointBase - Base class for endpoints.
type EndpointBase struct {
	// REQUIRED; Credentials to be presented to the endpoint.
	Credentials CredentialsBaseClassification

	// REQUIRED; The discriminator for derived types.
	Type *string

	// REQUIRED; The endpoint URL for Video Analyzer to connect to.
	URL *string

	// Describes the tunnel through which Video Analyzer can connect to the endpoint URL. This is an optional property, typically
// used when the endpoint is behind a firewall.
	Tunnel TunnelBaseClassification
}

// GetEndpointBase implements the EndpointBaseClassification interface for type EndpointBase.
func (e *EndpointBase) GetEndpointBase() *EndpointBase { return e }

// ErrorAdditionalInfo - The resource management error additional info.
type ErrorAdditionalInfo struct {
	// READ-ONLY; The additional info.
	Info any

	// READ-ONLY; The additional info type.
	Type *string
}

// ErrorDetail - The error detail.
type ErrorDetail struct {
	// READ-ONLY; The error additional info.
	AdditionalInfo []*ErrorAdditionalInfo

	// READ-ONLY; The error code.
	Code *string

	// READ-ONLY; The error details.
	Details []*ErrorDetail

	// READ-ONLY; The error message.
	Message *string

	// READ-ONLY; The error target.
	Target *string
}

// ErrorResponse - Common error response for all Azure Resource Manager APIs to return error details for failed operations.
// (This also follows the OData error response format.).
type ErrorResponse struct {
	// The error object.
	Error *ErrorDetail
}

// GroupLevelAccessControl - Group level network access control.
type GroupLevelAccessControl struct {
	// Whether or not public network access is allowed for specified resources under the Video Analyzer account.
	PublicNetworkAccess *PublicNetworkAccess
}

// Identity - The managed identity for the Video Analyzer resource.
type Identity struct {
	// REQUIRED; The identity type.
	Type *string

	// The User Assigned Managed Identities.
	UserAssignedIdentities map[string]*UserAssignedManagedIdentity
}

// IotHub - The IoT Hub details.
type IotHub struct {
	// REQUIRED; The IoT Hub resource identifier.
	ID *string

	// REQUIRED; The IoT Hub identity.
	Identity *ResourceIdentity

	// READ-ONLY; The current status of the Iot Hub mapping.
	Status *string
}

// JwtAuthentication - Properties for access validation based on JSON Web Tokens (JWT).
type JwtAuthentication struct {
	// REQUIRED; The discriminator for derived types.
	Type *string

	// List of expected token audiences. Token audience is valid if it matches at least one of the given values.
	Audiences []*string

	// List of additional token claims to be validated. Token must contains all claims and respective values for it to be valid.
	Claims []*TokenClaim

	// List of expected token issuers. Token issuer is valid if it matches at least one of the given values.
	Issuers []*string

	// List of keys which can be used to validate access tokens. Having multiple keys allow for seamless key rotation of the token
// signing key. Token signature must match exactly one key.
	Keys []TokenKeyClassification
}

// GetAuthenticationBase implements the AuthenticationBaseClassification interface for type JwtAuthentication.
func (j *JwtAuthentication) GetAuthenticationBase() *AuthenticationBase {
	return &AuthenticationBase{
		Type: j.Type,
	}
}

// KeyVaultProperties - The details for accessing the encryption keys in Key Vault.
type KeyVaultProperties struct {
	// REQUIRED; The URL of the Key Vault key used to encrypt the account. The key may either be versioned (for example https://vault/keys/mykey/version1)
// or reference a key without a version (for example
// https://vault/keys/mykey).
	KeyIdentifier *string

	// READ-ONLY; The current key used to encrypt Video Analyzer account, including the key version.
	CurrentKeyIdentifier *string
}

// ListProvisioningTokenInput - The input parameters to generate registration token for the Azure Video Analyzer IoT edge
// module.
type ListProvisioningTokenInput struct {
	// REQUIRED; The desired expiration date of the registration token. The Azure Video Analyzer IoT edge module must be initialized
// and connected to the Internet prior to the token expiration date.
	ExpirationDate *time.Time
}

// LivePipeline - Live pipeline represents a unique instance of a live topology, used for real-time ingestion, archiving and
// publishing of content for a unique RTSP camera.
type LivePipeline struct {
	// The resource properties.
	Properties *LivePipelineProperties

	// READ-ONLY; Fully qualified resource ID for the resource. Ex - /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}
	ID *string

	// READ-ONLY; The name of the resource
	Name *string

	// READ-ONLY; Azure Resource Manager metadata containing createdBy and modifiedBy information.
	SystemData *SystemData

	// READ-ONLY; The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or "Microsoft.Storage/storageAccounts"
	Type *string
}

// LivePipelineCollection - A collection of LivePipeline items.
type LivePipelineCollection struct {
	// A link to the next page of the collection (when the collection contains too many results to return in one response).
	NextLink *string

	// A collection of LivePipeline items.
	Value []*LivePipeline
}

// LivePipelineOperationStatus - Used for tracking the status of an operation on the live pipeline.
type LivePipelineOperationStatus struct {
	// READ-ONLY; The error details for the live pipeline operation.
	Error *ErrorDetail

	// READ-ONLY; The name of the live pipeline operation.
	Name *string

	// READ-ONLY; The status of the live pipeline operation.
	Status *string
}

// LivePipelineProperties - Live pipeline properties.
type LivePipelineProperties struct {
	// REQUIRED; Maximum bitrate capacity in Kbps reserved for the live pipeline. The allowed range is from 500 to 3000 Kbps in
// increments of 100 Kbps. If the RTSP camera exceeds this capacity, then the service will
// disconnect temporarily from the camera. It will retry to re-establish connection (with exponential backoff), checking to
// see if the camera bitrate is now below the reserved capacity. Doing so will
// ensure that one 'noisy neighbor' does not affect other live pipelines in your account.
	BitrateKbps *int32

	// REQUIRED; The reference to an existing pipeline topology defined for real-time content processing. When activated, this
// live pipeline will process content according to the pipeline topology definition.
	TopologyName *string

	// An optional description for the pipeline.
	Description *string

	// List of the instance level parameter values for the user-defined topology parameters. A pipeline can only define or override
// parameters values for parameters which have been declared in the referenced
// topology. Topology parameters without a default value must be defined. Topology parameters with a default value can be
// optionally be overridden.
	Parameters []*ParameterDefinition

	// READ-ONLY; Current state of the pipeline (read-only).
	State *LivePipelineState
}

// LivePipelinePropertiesUpdate - Live pipeline properties.
type LivePipelinePropertiesUpdate struct {
	// Maximum bitrate capacity in Kbps reserved for the live pipeline. The allowed range is from 500 to 3000 Kbps in increments
// of 100 Kbps. If the RTSP camera exceeds this capacity, then the service will
// disconnect temporarily from the camera. It will retry to re-establish connection (with exponential backoff), checking to
// see if the camera bitrate is now below the reserved capacity. Doing so will
// ensure that one 'noisy neighbor' does not affect other live pipelines in your account.
	BitrateKbps *int32

	// An optional description for the pipeline.
	Description *string

	// List of the instance level parameter values for the user-defined topology parameters. A pipeline can only define or override
// parameters values for parameters which have been declared in the referenced
// topology. Topology parameters without a default value must be defined. Topology parameters with a default value can be
// optionally be overridden.
	Parameters []*ParameterDefinition

	// The reference to an existing pipeline topology defined for real-time content processing. When activated, this live pipeline
// will process content according to the pipeline topology definition.
	TopologyName *string

	// READ-ONLY; Current state of the pipeline (read-only).
	State *LivePipelineState
}

// LivePipelineUpdate - Live pipeline represents a unique instance of a live topology, used for real-time ingestion, archiving
// and publishing of content for a unique RTSP camera.
type LivePipelineUpdate struct {
	// The resource properties.
	Properties *LivePipelinePropertiesUpdate

	// READ-ONLY; Fully qualified resource ID for the resource. Ex - /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}
	ID *string

	// READ-ONLY; The name of the resource
	Name *string

	// READ-ONLY; Azure Resource Manager metadata containing createdBy and modifiedBy information.
	SystemData *SystemData

	// READ-ONLY; The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or "Microsoft.Storage/storageAccounts"
	Type *string
}

// LogSpecification - A diagnostic log emitted by service.
type LogSpecification struct {
	// READ-ONLY; The time range for requests in each blob.
	BlobDuration *string

	// READ-ONLY; The diagnostic log category display name.
	DisplayName *string

	// READ-ONLY; The diagnostic log category name.
	Name *string
}

// MetricDimension - A metric dimension.
type MetricDimension struct {
	// READ-ONLY; The display name for the dimension.
	DisplayName *string

	// READ-ONLY; The metric dimension name.
	Name *string

	// READ-ONLY; Whether to export metric to shoebox.
	ToBeExportedForShoebox *bool
}

// MetricProperties - Metric properties.
type MetricProperties struct {
	// READ-ONLY; The service specifications.
	ServiceSpecification *ServiceSpecification
}

// MetricSpecification - A metric emitted by service.
type MetricSpecification struct {
	// Supported aggregation types.
	SupportedAggregationTypes []*string

	// READ-ONLY; The metric aggregation type
	AggregationType *MetricAggregationType

	// READ-ONLY; The metric dimensions.
	Dimensions []*MetricDimension

	// READ-ONLY; The metric display description.
	DisplayDescription *string

	// READ-ONLY; The metric display name.
	DisplayName *string

	// READ-ONLY; Indicates whether regional MDM account is enabled.
	EnableRegionalMdmAccount *bool

	// READ-ONLY; The metric lock aggregation type
	LockAggregationType *MetricAggregationType

	// READ-ONLY; The metric name.
	Name *string

	// READ-ONLY; The source MDM account.
	SourceMdmAccount *string

	// READ-ONLY; The source MDM namespace.
	SourceMdmNamespace *string

	// READ-ONLY; The supported time grain types.
	SupportedTimeGrainTypes []*string

	// READ-ONLY; The metric unit
	Unit *MetricUnit
}

// NetworkAccessControl - Network access control for video analyzer account.
type NetworkAccessControl struct {
	// Public network access for consumption group.
	Consumption *GroupLevelAccessControl

	// Public network access for ingestion group.
	Ingestion *GroupLevelAccessControl

	// Public network access for integration group.
	Integration *GroupLevelAccessControl
}

// NodeBase - Base class for nodes.
type NodeBase struct {
	// REQUIRED; Node name. Must be unique within the topology.
	Name *string

	// REQUIRED; The discriminator for derived types.
	Type *string
}

// GetNodeBase implements the NodeBaseClassification interface for type NodeBase.
func (n *NodeBase) GetNodeBase() *NodeBase { return n }

// NodeInput - Describes an input signal to be used on a pipeline node.
type NodeInput struct {
	// REQUIRED; The name of the upstream node in the pipeline which output is used as input of the current node.
	NodeName *string
}

// Operation - An operation.
type Operation struct {
	// REQUIRED; The operation name.
	Name *string

	// Indicates the action type.
	ActionType *ActionType

	// The operation display name.
	Display *OperationDisplay

	// Whether the operation applies to data-plane.
	IsDataAction *bool

	// Origin of the operation.
	Origin *string

	// Operation properties format.
	Properties *MetricProperties
}

// OperationCollection - A collection of Operation items.
type OperationCollection struct {
	// A collection of Operation items.
	Value []*Operation
}

// OperationDisplay - Operation details.
type OperationDisplay struct {
	// The operation description.
	Description *string

	// The operation type.
	Operation *string

	// The service provider.
	Provider *string

	// Resource on which the operation is performed.
	Resource *string
}

// OperationStatus - Status of video analyzer operation.
type OperationStatus struct {
	// REQUIRED; Operation identifier.
	Name *string

	// Operation end time.
	EndTime *string

	// The error detail.
	Error *ErrorDetail

	// Operation resource ID.
	ID *string

	// Operation start time.
	StartTime *string

	// Operation status.
	Status *string
}

// ParameterDeclaration - Single topology parameter declaration. Declared parameters can and must be referenced throughout
// the topology and can optionally have default values to be used when they are not defined in the
// pipelines.
type ParameterDeclaration struct {
	// REQUIRED; Name of the parameter.
	Name *string

	// REQUIRED; Type of the parameter.
	Type *ParameterType

	// The default value for the parameter to be used if the pipeline does not specify a value.
	Default *string

	// Description of the parameter.
	Description *string
}

// ParameterDefinition - Defines the parameter value of an specific pipeline topology parameter. See pipeline topology parameters
// for more information.
type ParameterDefinition struct {
	// REQUIRED; Name of the parameter declared in the pipeline topology.
	Name *string

	// Parameter value to be applied on this specific pipeline.
	Value *string
}

// PemCertificateList - A list of PEM formatted certificates.
type PemCertificateList struct {
	// REQUIRED; PEM formatted public certificates. One certificate per entry.
	Certificates []*string

	// REQUIRED; The discriminator for derived types.
	Type *string
}

// GetCertificateSource implements the CertificateSourceClassification interface for type PemCertificateList.
func (p *PemCertificateList) GetCertificateSource() *CertificateSource {
	return &CertificateSource{
		Type: p.Type,
	}
}

// PipelineJob - Pipeline job represents a unique instance of a batch topology, used for offline processing of selected portions
// of archived content.
type PipelineJob struct {
	// The resource properties.
	Properties *PipelineJobProperties

	// READ-ONLY; Fully qualified resource ID for the resource. Ex - /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}
	ID *string

	// READ-ONLY; The name of the resource
	Name *string

	// READ-ONLY; Azure Resource Manager metadata containing createdBy and modifiedBy information.
	SystemData *SystemData

	// READ-ONLY; The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or "Microsoft.Storage/storageAccounts"
	Type *string
}

// PipelineJobCollection - A collection of PipelineJob items.
type PipelineJobCollection struct {
	// A link to the next page of the collection (when the collection contains too many results to return in one response).
	NextLink *string

	// A collection of PipelineJob items.
	Value []*PipelineJob
}

// PipelineJobError - Details about the error for a failed pipeline job.
type PipelineJobError struct {
	// The error code.
	Code *string

	// The error message.
	Message *string
}

// PipelineJobOperationStatus - Used for tracking the status of an operation on the pipeline job.
type PipelineJobOperationStatus struct {
	// READ-ONLY; The error details for the pipeline job operation.
	Error *ErrorDetail

	// READ-ONLY; The name of the pipeline job operation.
	Name *string

	// READ-ONLY; The status of the pipeline job operation.
	Status *string
}

// PipelineJobProperties - Pipeline job properties.
type PipelineJobProperties struct {
	// REQUIRED; Reference to an existing pipeline topology. When activated, this pipeline job will process content according
// to the pipeline topology definition.
	TopologyName *string

	// An optional description for the pipeline.
	Description *string

	// List of the instance level parameter values for the user-defined topology parameters. A pipeline can only define or override
// parameters values for parameters which have been declared in the referenced
// topology. Topology parameters without a default value must be defined. Topology parameters with a default value can be
// optionally be overridden.
	Parameters []*ParameterDefinition

	// READ-ONLY; Details about the error, in case the pipeline job fails.
	Error *PipelineJobError

	// READ-ONLY; The date-time by when this pipeline job will be automatically deleted from your account.
	Expiration *time.Time

	// READ-ONLY; Current state of the pipeline (read-only).
	State *PipelineJobState
}

// PipelineJobPropertiesUpdate - Pipeline job properties.
type PipelineJobPropertiesUpdate struct {
	// An optional description for the pipeline.
	Description *string

	// List of the instance level parameter values for the user-defined topology parameters. A pipeline can only define or override
// parameters values for parameters which have been declared in the referenced
// topology. Topology parameters without a default value must be defined. Topology parameters with a default value can be
// optionally be overridden.
	Parameters []*ParameterDefinition

	// Reference to an existing pipeline topology. When activated, this pipeline job will process content according to the pipeline
// topology definition.
	TopologyName *string

	// READ-ONLY; Details about the error, in case the pipeline job fails.
	Error *PipelineJobError

	// READ-ONLY; The date-time by when this pipeline job will be automatically deleted from your account.
	Expiration *time.Time

	// READ-ONLY; Current state of the pipeline (read-only).
	State *PipelineJobState
}

// PipelineJobUpdate - Pipeline job represents a unique instance of a batch topology, used for offline processing of selected
// portions of archived content.
type PipelineJobUpdate struct {
	// The resource properties.
	Properties *PipelineJobPropertiesUpdate

	// READ-ONLY; Fully qualified resource ID for the resource. Ex - /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}
	ID *string

	// READ-ONLY; The name of the resource
	Name *string

	// READ-ONLY; Azure Resource Manager metadata containing createdBy and modifiedBy information.
	SystemData *SystemData

	// READ-ONLY; The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or "Microsoft.Storage/storageAccounts"
	Type *string
}

// PipelineTopology - Pipeline topology describes the processing steps to be applied when processing content for a particular
// outcome. The topology should be defined according to the scenario to be achieved and can be
// reused across many pipeline instances which share the same processing characteristics. For instance, a pipeline topology
// which captures content from a RTSP camera and archives the content can be
// reused across many different cameras, as long as the same processing is to be applied across all the cameras. Individual
// instance properties can be defined through the use of user-defined parameters,
// which allow for a topology to be parameterized. This allows individual pipelines refer to different values, such as individual
// cameras' RTSP endpoints and credentials. Overall a topology is composed
// of the following:
// * Parameters: list of user defined parameters that can be references across the topology nodes.
// * Sources: list of one or more data sources nodes such as an RTSP source which allows for content to be ingested from cameras.
// * Processors: list of nodes which perform data analysis or transformations.
// * Sinks: list of one or more data sinks which allow for data to be stored or exported to other destinations.
type PipelineTopology struct {
	// REQUIRED; Topology kind.
	Kind *Kind

	// REQUIRED; Describes the properties of a SKU.
	SKU *SKU

	// The resource properties.
	Properties *PipelineTopologyProperties

	// READ-ONLY; Fully qualified resource ID for the resource. Ex - /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}
	ID *string

	// READ-ONLY; The name of the resource
	Name *string

	// READ-ONLY; Azure Resource Manager metadata containing createdBy and modifiedBy information.
	SystemData *SystemData

	// READ-ONLY; The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or "Microsoft.Storage/storageAccounts"
	Type *string
}

// PipelineTopologyCollection - A collection of PipelineTopology items.
type PipelineTopologyCollection struct {
	// A link to the next page of the collection (when the collection contains too many results to return in one response).
	NextLink *string

	// A collection of PipelineTopology items.
	Value []*PipelineTopology
}

// PipelineTopologyProperties - Describes the properties of a pipeline topology.
type PipelineTopologyProperties struct {
	// REQUIRED; List of the topology sink nodes. Sink nodes allow pipeline data to be stored or exported.
	Sinks []SinkNodeBaseClassification

	// REQUIRED; List of the topology source nodes. Source nodes enable external data to be ingested by the pipeline.
	Sources []SourceNodeBaseClassification

	// An optional description of the pipeline topology. It is recommended that the expected use of the topology to be described
// here.
	Description *string

	// List of the topology parameter declarations. Parameters declared here can be referenced throughout the topology nodes through
// the use of "${PARAMETER_NAME}" string pattern. Parameters can have
// optional default values and can later be defined in individual instances of the pipeline.
	Parameters []*ParameterDeclaration

	// List of the topology processor nodes. Processor nodes enable pipeline data to be analyzed, processed or transformed.
	Processors []ProcessorNodeBaseClassification
}

// PipelineTopologyPropertiesUpdate - Describes the properties of a pipeline topology.
type PipelineTopologyPropertiesUpdate struct {
	// An optional description of the pipeline topology. It is recommended that the expected use of the topology to be described
// here.
	Description *string

	// List of the topology parameter declarations. Parameters declared here can be referenced throughout the topology nodes through
// the use of "${PARAMETER_NAME}" string pattern. Parameters can have
// optional default values and can later be defined in individual instances of the pipeline.
	Parameters []*ParameterDeclaration

	// List of the topology processor nodes. Processor nodes enable pipeline data to be analyzed, processed or transformed.
	Processors []ProcessorNodeBaseClassification

	// List of the topology sink nodes. Sink nodes allow pipeline data to be stored or exported.
	Sinks []SinkNodeBaseClassification

	// List of the topology source nodes. Source nodes enable external data to be ingested by the pipeline.
	Sources []SourceNodeBaseClassification
}

// PipelineTopologyUpdate - Pipeline topology describes the processing steps to be applied when processing content for a particular
// outcome. The topology should be defined according to the scenario to be achieved and can be
// reused across many pipeline instances which share the same processing characteristics. For instance, a pipeline topology
// which captures content from a RTSP camera and archives the content can be
// reused across many different cameras, as long as the same processing is to be applied across all the cameras. Individual
// instance properties can be defined through the use of user-defined parameters,
// which allow for a topology to be parameterized. This allows individual pipelines refer to different values, such as individual
// cameras' RTSP endpoints and credentials. Overall a topology is composed
// of the following:
// * Parameters: list of user defined parameters that can be references across the topology nodes.
// * Sources: list of one or more data sources nodes such as an RTSP source which allows for content to be ingested from cameras.
// * Processors: list of nodes which perform data analysis or transformations.
// * Sinks: list of one or more data sinks which allow for data to be stored or exported to other destinations.
type PipelineTopologyUpdate struct {
	// Topology kind.
	Kind *Kind

	// The resource properties.
	Properties *PipelineTopologyPropertiesUpdate

	// Describes the properties of a SKU.
	SKU *SKU

	// READ-ONLY; Fully qualified resource ID for the resource. Ex - /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}
	ID *string

	// READ-ONLY; The name of the resource
	Name *string

	// READ-ONLY; Azure Resource Manager metadata containing createdBy and modifiedBy information.
	SystemData *SystemData

	// READ-ONLY; The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or "Microsoft.Storage/storageAccounts"
	Type *string
}

// PrivateEndpoint - The Private Endpoint resource.
type PrivateEndpoint struct {
	// READ-ONLY; The ARM identifier for Private Endpoint
	ID *string
}

// PrivateEndpointConnection - The Private Endpoint Connection resource.
type PrivateEndpointConnection struct {
	// Resource properties.
	Properties *PrivateEndpointConnectionProperties

	// READ-ONLY; Fully qualified resource ID for the resource. Ex - /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}
	ID *string

	// READ-ONLY; The name of the resource
	Name *string

	// READ-ONLY; Azure Resource Manager metadata containing createdBy and modifiedBy information.
	SystemData *SystemData

	// READ-ONLY; The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or "Microsoft.Storage/storageAccounts"
	Type *string
}

// PrivateEndpointConnectionListResult - List of private endpoint connection associated with the specified storage account
type PrivateEndpointConnectionListResult struct {
	// Array of private endpoint connections
	Value []*PrivateEndpointConnection
}

// PrivateEndpointConnectionOperationStatus - Status of private endpoint connection operation.
type PrivateEndpointConnectionOperationStatus struct {
	// REQUIRED; Operation identifier.
	Name *string

	// Operation end time.
	EndTime *string

	// The error detail.
	Error *ErrorDetail

	// Operation resource ID.
	ID *string

	// Operation start time.
	StartTime *string

	// Operation status.
	Status *string
}

// PrivateEndpointConnectionProperties - Properties of the PrivateEndpointConnectProperties.
type PrivateEndpointConnectionProperties struct {
	// REQUIRED; A collection of information about the state of the connection between service consumer and provider.
	PrivateLinkServiceConnectionState *PrivateLinkServiceConnectionState

	// The resource of private end point.
	PrivateEndpoint *PrivateEndpoint

	// READ-ONLY; The provisioning state of the private endpoint connection resource.
	ProvisioningState *PrivateEndpointConnectionProvisioningState
}

// PrivateLinkResource - A private link resource
type PrivateLinkResource struct {
	// Resource properties.
	Properties *PrivateLinkResourceProperties

	// READ-ONLY; Fully qualified resource ID for the resource. Ex - /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}
	ID *string

	// READ-ONLY; The name of the resource
	Name *string

	// READ-ONLY; Azure Resource Manager metadata containing createdBy and modifiedBy information.
	SystemData *SystemData

	// READ-ONLY; The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or "Microsoft.Storage/storageAccounts"
	Type *string
}

// PrivateLinkResourceListResult - A list of private link resources
type PrivateLinkResourceListResult struct {
	// Array of private link resources
	Value []*PrivateLinkResource
}

// PrivateLinkResourceProperties - Properties of a private link resource.
type PrivateLinkResourceProperties struct {
	// The private link resource Private link DNS zone name.
	RequiredZoneNames []*string

	// READ-ONLY; The private link resource group id.
	GroupID *string

	// READ-ONLY; The private link resource required member names.
	RequiredMembers []*string
}

// PrivateLinkServiceConnectionState - A collection of information about the state of the connection between service consumer
// and provider.
type PrivateLinkServiceConnectionState struct {
	// A message indicating if changes on the service provider require any updates on the consumer.
	ActionsRequired *string

	// The reason for approval/rejection of the connection.
	Description *string

	// Indicates whether the connection has been Approved/Rejected/Removed by the owner of the service.
	Status *PrivateEndpointServiceConnectionStatus
}

// ProcessorNodeBase - Base class for topology processor nodes.
type ProcessorNodeBase struct {
	// REQUIRED; An array of upstream node references within the topology to be used as inputs for this node.
	Inputs []*NodeInput

	// REQUIRED; Node name. Must be unique within the topology.
	Name *string

	// REQUIRED; The discriminator for derived types.
	Type *string
}

// GetNodeBase implements the NodeBaseClassification interface for type ProcessorNodeBase.
func (p *ProcessorNodeBase) GetNodeBase() *NodeBase {
	return &NodeBase{
		Name: p.Name,
		Type: p.Type,
	}
}

// GetProcessorNodeBase implements the ProcessorNodeBaseClassification interface for type ProcessorNodeBase.
func (p *ProcessorNodeBase) GetProcessorNodeBase() *ProcessorNodeBase { return p }

// Properties - The properties of the Video Analyzer account.
type Properties struct {
	// REQUIRED; The storage accounts for this resource.
	StorageAccounts []*StorageAccount

	// The account encryption properties.
	Encryption *AccountEncryption

	// The IoT Hubs for this resource.
	IotHubs []*IotHub

	// Network access control for Video Analyzer.
	NetworkAccessControl *NetworkAccessControl

	// Whether or not public network access is allowed for resources under the Video Analyzer account.
	PublicNetworkAccess *PublicNetworkAccess

	// READ-ONLY; The endpoints associated with this resource.
	Endpoints []*Endpoint

	// READ-ONLY; Private Endpoint Connections created under Video Analyzer account.
	PrivateEndpointConnections []*PrivateEndpointConnection

	// READ-ONLY; Provisioning state of the Video Analyzer account.
	ProvisioningState *ProvisioningState
}

// PropertiesUpdate - The properties of the Video Analyzer account.
type PropertiesUpdate struct {
	// The account encryption properties.
	Encryption *AccountEncryption

	// The IoT Hubs for this resource.
	IotHubs []*IotHub

	// Network access control for Video Analyzer.
	NetworkAccessControl *NetworkAccessControl

	// Whether or not public network access is allowed for resources under the Video Analyzer account.
	PublicNetworkAccess *PublicNetworkAccess

	// The storage accounts for this resource.
	StorageAccounts []*StorageAccount

	// READ-ONLY; The endpoints associated with this resource.
	Endpoints []*Endpoint

	// READ-ONLY; Private Endpoint Connections created under Video Analyzer account.
	PrivateEndpointConnections []*PrivateEndpointConnection

	// READ-ONLY; Provisioning state of the Video Analyzer account.
	ProvisioningState *ProvisioningState
}

// ProxyResource - The resource model definition for a Azure Resource Manager proxy resource. It will not have tags and a
// location
type ProxyResource struct {
	// READ-ONLY; Fully qualified resource ID for the resource. Ex - /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}
	ID *string

	// READ-ONLY; The name of the resource
	Name *string

	// READ-ONLY; Azure Resource Manager metadata containing createdBy and modifiedBy information.
	SystemData *SystemData

	// READ-ONLY; The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or "Microsoft.Storage/storageAccounts"
	Type *string
}

// Resource - Common fields that are returned in the response for all Azure Resource Manager resources
type Resource struct {
	// READ-ONLY; Fully qualified resource ID for the resource. Ex - /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}
	ID *string

	// READ-ONLY; The name of the resource
	Name *string

	// READ-ONLY; Azure Resource Manager metadata containing createdBy and modifiedBy information.
	SystemData *SystemData

	// READ-ONLY; The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or "Microsoft.Storage/storageAccounts"
	Type *string
}

// ResourceIdentity - The user assigned managed identity to use when accessing a resource.
type ResourceIdentity struct {
	// REQUIRED; The user assigned managed identity's resource identifier to use when accessing a resource.
	UserAssignedIdentity *string
}

// RsaTokenKey - Required validation properties for tokens generated with RSA algorithm.
type RsaTokenKey struct {
	// REQUIRED; RSA algorithm to be used: RS256, RS384 or RS512.
	Alg *AccessPolicyRsaAlgo

	// REQUIRED; RSA public key exponent.
	E *string

	// REQUIRED; JWT token key id. Validation keys are looked up based on the key id present on the JWT token header.
	Kid *string

	// REQUIRED; RSA public key modulus.
	N *string

	// REQUIRED; The discriminator for derived types.
	Type *string
}

// GetTokenKey implements the TokenKeyClassification interface for type RsaTokenKey.
func (r *RsaTokenKey) GetTokenKey() *TokenKey {
	return &TokenKey{
		Kid: r.Kid,
		Type: r.Type,
	}
}

// RtspSource - RTSP source allows for media from an RTSP camera or generic RTSP server to be ingested into a pipeline.
type RtspSource struct {
	// REQUIRED; RTSP endpoint information for Video Analyzer to connect to. This contains the required information for Video
// Analyzer to connect to RTSP cameras and/or generic RTSP servers.
	Endpoint EndpointBaseClassification

	// REQUIRED; Node name. Must be unique within the topology.
	Name *string

	// REQUIRED; The discriminator for derived types.
	Type *string

	// Network transport utilized by the RTSP and RTP exchange: TCP or HTTP. When using TCP, the RTP packets are interleaved on
// the TCP RTSP connection. When using HTTP, the RTSP messages are exchanged
// through long lived HTTP connections, and the RTP packages are interleaved in the HTTP connections alongside the RTSP messages.
	Transport *RtspTransport
}

// GetNodeBase implements the NodeBaseClassification interface for type RtspSource.
func (r *RtspSource) GetNodeBase() *NodeBase {
	return &NodeBase{
		Name: r.Name,
		Type: r.Type,
	}
}

// GetSourceNodeBase implements the SourceNodeBaseClassification interface for type RtspSource.
func (r *RtspSource) GetSourceNodeBase() *SourceNodeBase {
	return &SourceNodeBase{
		Name: r.Name,
		Type: r.Type,
	}
}

// SKU - The SKU details.
type SKU struct {
	// REQUIRED; The SKU name.
	Name *SKUName

	// READ-ONLY; The SKU tier.
	Tier *SKUTier
}

// SecureIotDeviceRemoteTunnel - A remote tunnel securely established using IoT Hub device information.
type SecureIotDeviceRemoteTunnel struct {
	// REQUIRED; The IoT device id to use when establishing the remote tunnel. This string is case-sensitive.
	DeviceID *string

	// REQUIRED; Name of the IoT Hub.
	IotHubName *string

	// REQUIRED; The discriminator for derived types.
	Type *string
}

// GetTunnelBase implements the TunnelBaseClassification interface for type SecureIotDeviceRemoteTunnel.
func (s *SecureIotDeviceRemoteTunnel) GetTunnelBase() *TunnelBase {
	return &TunnelBase{
		Type: s.Type,
	}
}

// ServiceSpecification - The service metric specifications.
type ServiceSpecification struct {
	// READ-ONLY; List of log specifications.
	LogSpecifications []*LogSpecification

	// READ-ONLY; List of metric specifications.
	MetricSpecifications []*MetricSpecification
}

// SinkNodeBase - Base class for topology sink nodes.
type SinkNodeBase struct {
	// REQUIRED; An array of upstream node references within the topology to be used as inputs for this node.
	Inputs []*NodeInput

	// REQUIRED; Node name. Must be unique within the topology.
	Name *string

	// REQUIRED; The discriminator for derived types.
	Type *string
}

// GetNodeBase implements the NodeBaseClassification interface for type SinkNodeBase.
func (s *SinkNodeBase) GetNodeBase() *NodeBase {
	return &NodeBase{
		Name: s.Name,
		Type: s.Type,
	}
}

// GetSinkNodeBase implements the SinkNodeBaseClassification interface for type SinkNodeBase.
func (s *SinkNodeBase) GetSinkNodeBase() *SinkNodeBase { return s }

// SourceNodeBase - Base class for topology source nodes.
type SourceNodeBase struct {
	// REQUIRED; Node name. Must be unique within the topology.
	Name *string

	// REQUIRED; The discriminator for derived types.
	Type *string
}

// GetNodeBase implements the NodeBaseClassification interface for type SourceNodeBase.
func (s *SourceNodeBase) GetNodeBase() *NodeBase {
	return &NodeBase{
		Name: s.Name,
		Type: s.Type,
	}
}

// GetSourceNodeBase implements the SourceNodeBaseClassification interface for type SourceNodeBase.
func (s *SourceNodeBase) GetSourceNodeBase() *SourceNodeBase { return s }

// StorageAccount - The details about the associated storage account.
type StorageAccount struct {
	// REQUIRED; The ID of the storage account resource. Video Analyzer relies on tables, queues, and blobs. The primary storage
// account must be a Standard Storage account (either Microsoft.ClassicStorage or
// Microsoft.Storage).
	ID *string

	// A managed identity that Video Analyzer will use to access the storage account.
	Identity *ResourceIdentity

	// READ-ONLY; The current status of the storage account mapping.
	Status *string
}

// SystemData - Metadata pertaining to creation and last modification of the resource.
type SystemData struct {
	// The timestamp of resource creation (UTC).
	CreatedAt *time.Time

	// The identity that created the resource.
	CreatedBy *string

	// The type of identity that created the resource.
	CreatedByType *CreatedByType

	// The timestamp of resource last modification (UTC)
	LastModifiedAt *time.Time

	// The identity that last modified the resource.
	LastModifiedBy *string

	// The type of identity that last modified the resource.
	LastModifiedByType *CreatedByType
}

// TLSEndpoint - TLS endpoint describes an endpoint that the pipeline can connect to over TLS transport (data is encrypted
// in transit).
type TLSEndpoint struct {
	// REQUIRED; Credentials to be presented to the endpoint.
	Credentials CredentialsBaseClassification

	// REQUIRED; The discriminator for derived types.
	Type *string

	// REQUIRED; The endpoint URL for Video Analyzer to connect to.
	URL *string

	// List of trusted certificate authorities when authenticating a TLS connection. A null list designates that Azure Video Analyzer's
// list of trusted authorities should be used.
	TrustedCertificates CertificateSourceClassification

	// Describes the tunnel through which Video Analyzer can connect to the endpoint URL. This is an optional property, typically
// used when the endpoint is behind a firewall.
	Tunnel TunnelBaseClassification

	// Validation options to use when authenticating a TLS connection. By default, strict validation is used.
	ValidationOptions *TLSValidationOptions
}

// GetEndpointBase implements the EndpointBaseClassification interface for type TLSEndpoint.
func (t *TLSEndpoint) GetEndpointBase() *EndpointBase {
	return &EndpointBase{
		Credentials: t.Credentials,
		Tunnel: t.Tunnel,
		Type: t.Type,
		URL: t.URL,
	}
}

// TLSValidationOptions - Options for controlling the validation of TLS endpoints.
type TLSValidationOptions struct {
	// When set to 'true' causes the certificate subject name validation to be skipped. Default is 'false'.
	IgnoreHostname *string

	// When set to 'true' causes the certificate chain trust validation to be skipped. Default is 'false'.
	IgnoreSignature *string
}

// TimeSequenceBase - A sequence of datetime ranges as a string.
type TimeSequenceBase struct {
	// REQUIRED; The discriminator for derived types.
	Type *string
}

// GetTimeSequenceBase implements the TimeSequenceBaseClassification interface for type TimeSequenceBase.
func (t *TimeSequenceBase) GetTimeSequenceBase() *TimeSequenceBase { return t }

// TokenClaim - Properties for expected token claims.
type TokenClaim struct {
	// REQUIRED; Name of the claim which must be present on the token.
	Name *string

	// REQUIRED; Expected value of the claim to be present on the token.
	Value *string
}

// TokenKey - Key properties for JWT token validation.
type TokenKey struct {
	// REQUIRED; JWT token key id. Validation keys are looked up based on the key id present on the JWT token header.
	Kid *string

	// REQUIRED; The discriminator for derived types.
	Type *string
}

// GetTokenKey implements the TokenKeyClassification interface for type TokenKey.
func (t *TokenKey) GetTokenKey() *TokenKey { return t }

// TrackedResource - The resource model definition for an Azure Resource Manager tracked top level resource which has 'tags'
// and a 'location'
type TrackedResource struct {
	// REQUIRED; The geo-location where the resource lives
	Location *string

	// Resource tags.
	Tags map[string]*string

	// READ-ONLY; Fully qualified resource ID for the resource. Ex - /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}
	ID *string

	// READ-ONLY; The name of the resource
	Name *string

	// READ-ONLY; Azure Resource Manager metadata containing createdBy and modifiedBy information.
	SystemData *SystemData

	// READ-ONLY; The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or "Microsoft.Storage/storageAccounts"
	Type *string
}

// TunnelBase - Base class for tunnel objects.
type TunnelBase struct {
	// REQUIRED; The discriminator for derived types.
	Type *string
}

// GetTunnelBase implements the TunnelBaseClassification interface for type TunnelBase.
func (t *TunnelBase) GetTunnelBase() *TunnelBase { return t }

// UnsecuredEndpoint - Unsecured endpoint describes an endpoint that the pipeline can connect to over clear transport (no
// encryption in transit).
type UnsecuredEndpoint struct {
	// REQUIRED; Credentials to be presented to the endpoint.
	Credentials CredentialsBaseClassification

	// REQUIRED; The discriminator for derived types.
	Type *string

	// REQUIRED; The endpoint URL for Video Analyzer to connect to.
	URL *string

	// Describes the tunnel through which Video Analyzer can connect to the endpoint URL. This is an optional property, typically
// used when the endpoint is behind a firewall.
	Tunnel TunnelBaseClassification
}

// GetEndpointBase implements the EndpointBaseClassification interface for type UnsecuredEndpoint.
func (u *UnsecuredEndpoint) GetEndpointBase() *EndpointBase {
	return &EndpointBase{
		Credentials: u.Credentials,
		Tunnel: u.Tunnel,
		Type: u.Type,
		URL: u.URL,
	}
}

// Update - The update operation for a Video Analyzer account.
type Update struct {
	// The identities associated to the Video Analyzer resource.
	Identity *Identity

	// The resource properties.
	Properties *PropertiesUpdate

	// Resource tags.
	Tags map[string]*string
}

// UserAssignedManagedIdentity - The details of the user assigned managed identity used by the Video Analyzer resource.
type UserAssignedManagedIdentity struct {
	// READ-ONLY; The client ID.
	ClientID *string

	// READ-ONLY; The principal ID.
	PrincipalID *string
}

// UsernamePasswordCredentials - Username and password credentials.
type UsernamePasswordCredentials struct {
	// REQUIRED; Password to be presented as part of the credentials. It is recommended that this value is parameterized as a
// secret string in order to prevent this value to be returned as part of the resource on API
// requests.
	Password *string

	// REQUIRED; The discriminator for derived types.
	Type *string

	// REQUIRED; Username to be presented as part of the credentials.
	Username *string
}

// GetCredentialsBase implements the CredentialsBaseClassification interface for type UsernamePasswordCredentials.
func (u *UsernamePasswordCredentials) GetCredentialsBase() *CredentialsBase {
	return &CredentialsBase{
		Type: u.Type,
	}
}

// VideoAnalyzer - The Video Analyzer account.
type VideoAnalyzer struct {
	// REQUIRED; The geo-location where the resource lives
	Location *string

	// The identities associated to the Video Analyzer resource.
	Identity *Identity

	// The resource properties.
	Properties *Properties

	// Resource tags.
	Tags map[string]*string

	// READ-ONLY; Fully qualified resource ID for the resource. Ex - /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}
	ID *string

	// READ-ONLY; The name of the resource
	Name *string

	// READ-ONLY; Azure Resource Manager metadata containing createdBy and modifiedBy information.
	SystemData *SystemData

	// READ-ONLY; The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or "Microsoft.Storage/storageAccounts"
	Type *string
}

// VideoArchival - Video archival properties.
type VideoArchival struct {
	// Video retention period indicates the maximum age of the video archive segments which are intended to be kept in storage.
// It must be provided in the ISO8601 duration format in the granularity of days,
// up to a maximum of 10 years. For example, if this is set to P30D (30 days), content older than 30 days will be periodically
// deleted. This value can be updated at any time and the new desired retention
// period will be effective within 24 hours.
	RetentionPeriod *string
}

// VideoContentToken - "Video content token grants access to the video content URLs."
type VideoContentToken struct {
	// READ-ONLY; The content token expiration date in ISO8601 format (eg. 2021-01-01T00:00:00Z).
	ExpirationDate *time.Time

	// READ-ONLY; The content token value to be added to the video content URL as the value for the "token" query string parameter.
// The token is specific to a single video.
	Token *string
}

// VideoContentUrls - Set of URLs to the video content.
type VideoContentUrls struct {
	// Video archive streaming base URL. The archived content can be automatically played by the Azure Video Analyzer player widget.
// Alternatively, this URL can be used in conjunction with the video content
// authorization token on any compatible DASH or HLS players by appending the following to the base URL:
// - HLSv4: /manifest(format=m3u8-aapl).m3u8
// - HLS CMAF: /manifest(format=m3u8-cmaf)
// - DASH CMAF: /manifest(format=mpd-time-cmaf)
// Moreover, an ongoing video recording can be played in "live mode" with latencies which are approximately double of the
// chosen video segment length. It is available when the video type is 'archive' and video archiving is enabled.
	ArchiveBaseURL *string

	// Video file download URL. This URL can be used in conjunction with the video content authorization token to download the
// video MP4 file. The resulting MP4 file can be played on any standard media
// player. It is available when the video type is 'file' and video file is available for consumption.
	DownloadURL *string

	// Video preview image URLs. These URLs can be used in conjunction with the video content authorization token to download
// the most recent still image from the video archive in different resolutions. They
// are available when the video type is 'archive' and preview images are enabled.
	PreviewImageUrls *VideoPreviewImageUrls

	// Video low-latency streaming URL. The live content can be automatically played by the Azure Video Analyzer player widget.
// Alternatively, this URL can be used in conjunction with the video content
// authorization token to expose a WebSocket tunneled RTSP stream. It is available when the video type is 'archive' and a
// live, low-latency feed is available from the source.
	RtspTunnelURL *string
}

// VideoCreationProperties - Optional properties to be used in case a new video resource needs to be created on the service.
// These will not take effect if the video already exists.
type VideoCreationProperties struct {
	// Optional description provided by the user. Value can be up to 2048 characters long.
	Description *string

	// Video retention period indicates how long the video is kept in storage. Value must be specified in ISO8601 duration format
// (i.e. "P1D" equals 1 day) and can vary between 1 day to 10 years, in 1 day
// increments. When absent (null), all video content is retained indefinitely. This property is only allowed for topologies
// where "kind" is set to "live".
	RetentionPeriod *string

	// Segment length indicates the length of individual content files (segments) which are persisted to storage. Smaller segments
// provide lower archive playback latency but generate larger volume of storage
// transactions. Larger segments reduce the amount of storage transactions while increasing the archive playback latency.
// Value must be specified in ISO8601 duration format (i.e. "PT30S" equals 30
// seconds) and can vary between 30 seconds to 5 minutes, in 30 seconds increments. Changing this value after the initial
// call to create the video resource can lead to errors when uploading content to
// the archive. Default value is 30 seconds. This property is only allowed for topologies where "kind" is set to "live".
	SegmentLength *string

	// Optional title provided by the user. Value can be up to 256 characters long.
	Title *string
}

// VideoEncoderBase - Base type for all video encoding presets, which define the recipe or instructions on how the input video
// should be processed.
type VideoEncoderBase struct {
	// REQUIRED; The discriminator for derived types.
	Type *string

	// The maximum bitrate, in kilobits per second or Kbps, at which video should be encoded. If omitted, encoder sets it automatically
// to try and match the quality of the input video.
	BitrateKbps *string

	// The frame rate (in frames per second) of the encoded video. The value must be greater than zero, and less than or equal
// to 300. If omitted, the encoder uses the average frame rate of the input video.
	FrameRate *string

	// Describes the resolution of the encoded video. If omitted, the encoder uses the resolution of the input video.
	Scale *VideoScale
}

// GetVideoEncoderBase implements the VideoEncoderBaseClassification interface for type VideoEncoderBase.
func (v *VideoEncoderBase) GetVideoEncoderBase() *VideoEncoderBase { return v }

// VideoEncoderH264 - A custom preset for encoding video with the H.264 (AVC) codec.
type VideoEncoderH264 struct {
	// REQUIRED; The discriminator for derived types.
	Type *string

	// The maximum bitrate, in kilobits per second or Kbps, at which video should be encoded. If omitted, encoder sets it automatically
// to try and match the quality of the input video.
	BitrateKbps *string

	// The frame rate (in frames per second) of the encoded video. The value must be greater than zero, and less than or equal
// to 300. If omitted, the encoder uses the average frame rate of the input video.
	FrameRate *string

	// Describes the resolution of the encoded video. If omitted, the encoder uses the resolution of the input video.
	Scale *VideoScale
}

// GetVideoEncoderBase implements the VideoEncoderBaseClassification interface for type VideoEncoderH264.
func (v *VideoEncoderH264) GetVideoEncoderBase() *VideoEncoderBase {
	return &VideoEncoderBase{
		BitrateKbps: v.BitrateKbps,
		FrameRate: v.FrameRate,
		Scale: v.Scale,
		Type: v.Type,
	}
}

// VideoEntity - Represents a video resource within Azure Video Analyzer. Videos can be ingested from RTSP cameras through
// live pipelines or can be created by exporting sequences from existing captured video through a
// pipeline job. Videos ingested through live pipelines can be streamed through Azure Video Analyzer Player Widget or compatible
// players. Exported videos can be downloaded as MP4 files.
type VideoEntity struct {
	// The resource properties.
	Properties *VideoProperties

	// READ-ONLY; Fully qualified resource ID for the resource. Ex - /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}
	ID *string

	// READ-ONLY; The name of the resource
	Name *string

	// READ-ONLY; Azure Resource Manager metadata containing createdBy and modifiedBy information.
	SystemData *SystemData

	// READ-ONLY; The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or "Microsoft.Storage/storageAccounts"
	Type *string
}

// VideoEntityCollection - A collection of VideoEntity items.
type VideoEntityCollection struct {
	// A link to the next page of the collection (when the collection contains too many results to return in one response).
	NextLink *string

	// A collection of VideoEntity items.
	Value []*VideoEntity
}

// VideoFlags - Video flags contain information about the available video actions and its dynamic properties based on the
// current video state.
type VideoFlags struct {
	// REQUIRED; Value indicating whether or not the video can be streamed. Only "archive" type videos can be streamed.
	CanStream *bool

	// REQUIRED; Value indicating whether or not there has ever been data recorded or uploaded into the video. Newly created videos
// have this value set to false.
	HasData *bool

	// REQUIRED; Value indicating whether or not the video is currently being referenced be an active pipeline. The fact that
// is being referenced, doesn't necessarily indicate that data is being received. For example,
// video recording may be gated on events or camera may not be accessible at the time.
	IsInUse *bool
}

// VideoMediaInfo - Contains information about the video and audio content.
type VideoMediaInfo struct {
	// Video segment length indicates the length of individual video files (segments) which are persisted to storage. Smaller
// segments provide lower archive playback latency but generate larger volume of
// storage transactions. Larger segments reduce the amount of storage transactions while increasing the archive playback latency.
// Value must be specified in ISO8601 duration format (i.e. "PT30S" equals
// 30 seconds) and can vary between 30 seconds to 5 minutes, in 30 seconds increments.
	SegmentLength *string
}

// VideoPreviewImageUrls - Video preview image URLs. These URLs can be used in conjunction with the video content authorization
// token to download the most recent still image from the video archive in different resolutions. They
// are available when the video type is 'archive' and preview images are enabled.
type VideoPreviewImageUrls struct {
	// High resolution preview image URL.
	Large *string

	// Medium resolution preview image URL.
	Medium *string

	// Low resolution preview image URL.
	Small *string
}

// VideoProperties - Application level properties for the video resource.
type VideoProperties struct {
	// Video archival properties.
	Archival *VideoArchival

	// Optional video description provided by the user. Value can be up to 2048 characters long.
	Description *string

	// Contains information about the video and audio content.
	MediaInfo *VideoMediaInfo

	// Optional video title provided by the user. Value can be up to 256 characters long.
	Title *string

	// READ-ONLY; Set of URLs to the video content.
	ContentUrls *VideoContentUrls

	// READ-ONLY; Video flags contain information about the available video actions and its dynamic properties based on the current
// video state.
	Flags *VideoFlags

	// READ-ONLY; Video content type. Different content types are suitable for different applications and scenarios.
	Type *VideoType
}

// VideoPublishingOptions - Optional flags used to change how video is published. These are only allowed for topologies where
// "kind" is set to "live".
type VideoPublishingOptions struct {
	// When set to 'true' content will not be archived or recorded. This is used, for example, when the topology is used only
// for low latency video streaming. Default is 'false'. If set to 'true', then
// "disableRtspPublishing" must be set to 'false'.
	DisableArchive *string

	// When set to 'true' the RTSP playback URL will not be published, disabling low latency streaming. This is used, for example,
// when the topology is used only for archiving content. Default is 'false'. If
// set to 'true', then "disableArchive" must be set to 'false'.
	DisableRtspPublishing *string
}

// VideoScale - The video scaling information.
type VideoScale struct {
	// The desired output video height.
	Height *string

	// Describes the video scaling mode to be applied. Default mode is 'Pad'. If the mode is 'Pad' or 'Stretch' then both width
// and height must be specified. Else if the mode is 'PreserveAspectRatio' then
// only one of width or height need be provided.
	Mode *VideoScaleMode

	// The desired output video width.
	Width *string
}

// VideoSequenceAbsoluteTimeMarkers - A sequence of absolute datetime ranges as a string. The datetime values should follow
// IS08601, and the sum of the ranges should add up to 24 hours or less. Currently, there can be only one range
// specified in the sequence.
type VideoSequenceAbsoluteTimeMarkers struct {
	// REQUIRED; The sequence of datetime ranges. Example: '[["2021-10-05T03:30:00Z", "2021-10-05T03:40:00Z"]]'.
	Ranges *string

	// REQUIRED; The discriminator for derived types.
	Type *string
}

// GetTimeSequenceBase implements the TimeSequenceBaseClassification interface for type VideoSequenceAbsoluteTimeMarkers.
func (v *VideoSequenceAbsoluteTimeMarkers) GetTimeSequenceBase() *TimeSequenceBase {
	return &TimeSequenceBase{
		Type: v.Type,
	}
}

// VideoSink - Video sink in a live topology allows for video and audio to be captured, optionally archived, and published
// via a video resource. If archiving is enabled, this results in a video of type 'archive'. If
// used in a batch topology, this allows for video and audio to be stored as a file, and published via a video resource of
// type 'file'
type VideoSink struct {
	// REQUIRED; An array of upstream node references within the topology to be used as inputs for this node.
	Inputs []*NodeInput

	// REQUIRED; Node name. Must be unique within the topology.
	Name *string

	// REQUIRED; The discriminator for derived types.
	Type *string

	// REQUIRED; Name of a new or existing video resource used to capture and publish content. Note: if downstream of RTSP source,
// and if disableArchive is set to true, then no content is archived.
	VideoName *string

	// Optional video properties to be used in case a new video resource needs to be created on the service.
	VideoCreationProperties *VideoCreationProperties

	// Options to change how the video sink publishes content via the video resource. This property is only allowed for topologies
// where "kind" is set to "live".
	VideoPublishingOptions *VideoPublishingOptions
}

// GetNodeBase implements the NodeBaseClassification interface for type VideoSink.
func (v *VideoSink) GetNodeBase() *NodeBase {
	return &NodeBase{
		Name: v.Name,
		Type: v.Type,
	}
}

// GetSinkNodeBase implements the SinkNodeBaseClassification interface for type VideoSink.
func (v *VideoSink) GetSinkNodeBase() *SinkNodeBase {
	return &SinkNodeBase{
		Inputs: v.Inputs,
		Name: v.Name,
		Type: v.Type,
	}
}

// VideoSource - Video source allows for content from a Video Analyzer video resource to be ingested into a pipeline. Currently
// supported only with batch pipelines.
type VideoSource struct {
	// REQUIRED; Node name. Must be unique within the topology.
	Name *string

	// REQUIRED; Describes a sequence of datetime ranges. The video source only picks up recorded media within these ranges.
	TimeSequences TimeSequenceBaseClassification

	// REQUIRED; The discriminator for derived types.
	Type *string

	// REQUIRED; Name of the Video Analyzer video resource to be used as the source.
	VideoName *string
}

// GetNodeBase implements the NodeBaseClassification interface for type VideoSource.
func (v *VideoSource) GetNodeBase() *NodeBase {
	return &NodeBase{
		Name: v.Name,
		Type: v.Type,
	}
}

// GetSourceNodeBase implements the SourceNodeBaseClassification interface for type VideoSource.
func (v *VideoSource) GetSourceNodeBase() *SourceNodeBase {
	return &SourceNodeBase{
		Name: v.Name,
		Type: v.Type,
	}
}

