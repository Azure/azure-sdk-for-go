//go:build go1.18
// +build go1.18

// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator. DO NOT EDIT.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

package armvideoanalyzer

// AccessPoliciesClientCreateOrUpdateResponse contains the response from method AccessPoliciesClient.CreateOrUpdate.
type AccessPoliciesClientCreateOrUpdateResponse struct {
	// Access policies help define the authentication rules, and control access to specific video resources.
	AccessPolicyEntity
}

// AccessPoliciesClientDeleteResponse contains the response from method AccessPoliciesClient.Delete.
type AccessPoliciesClientDeleteResponse struct {
	// placeholder for future response values
}

// AccessPoliciesClientGetResponse contains the response from method AccessPoliciesClient.Get.
type AccessPoliciesClientGetResponse struct {
	// Access policies help define the authentication rules, and control access to specific video resources.
	AccessPolicyEntity
}

// AccessPoliciesClientListResponse contains the response from method AccessPoliciesClient.NewListPager.
type AccessPoliciesClientListResponse struct {
	// A collection of AccessPolicyEntity items.
	AccessPolicyEntityCollection
}

// AccessPoliciesClientUpdateResponse contains the response from method AccessPoliciesClient.Update.
type AccessPoliciesClientUpdateResponse struct {
	// Access policies help define the authentication rules, and control access to specific video resources.
	AccessPolicyEntity
}

// EdgeModulesClientCreateOrUpdateResponse contains the response from method EdgeModulesClient.CreateOrUpdate.
type EdgeModulesClientCreateOrUpdateResponse struct {
	// The representation of an edge module.
	EdgeModuleEntity
}

// EdgeModulesClientDeleteResponse contains the response from method EdgeModulesClient.Delete.
type EdgeModulesClientDeleteResponse struct {
	// placeholder for future response values
}

// EdgeModulesClientGetResponse contains the response from method EdgeModulesClient.Get.
type EdgeModulesClientGetResponse struct {
	// The representation of an edge module.
	EdgeModuleEntity
}

// EdgeModulesClientListProvisioningTokenResponse contains the response from method EdgeModulesClient.ListProvisioningToken.
type EdgeModulesClientListProvisioningTokenResponse struct {
	// Provisioning token properties. A provisioning token allows for a single instance of Azure Video analyzer IoT edge module
// to be initialized and authorized to the cloud account. The provisioning token itself is short lived and it is only used
// for the initial handshake between IoT edge module and the cloud. After the initial handshake, the IoT edge module will
// agree on a set of authentication keys which will be auto-rotated as long as the module is able to periodically connect
// to the cloud. A new provisioning token can be generated for the same IoT edge module in case the module state lost or reset.
	EdgeModuleProvisioningToken
}

// EdgeModulesClientListResponse contains the response from method EdgeModulesClient.NewListPager.
type EdgeModulesClientListResponse struct {
	// A collection of EdgeModuleEntity items.
	EdgeModuleEntityCollection
}

// LivePipelineOperationStatusesClientGetResponse contains the response from method LivePipelineOperationStatusesClient.Get.
type LivePipelineOperationStatusesClientGetResponse struct {
	// Used for tracking the status of an operation on the live pipeline.
	LivePipelineOperationStatus
}

// LivePipelinesClientActivateResponse contains the response from method LivePipelinesClient.BeginActivate.
type LivePipelinesClientActivateResponse struct {
	// placeholder for future response values
}

// LivePipelinesClientCreateOrUpdateResponse contains the response from method LivePipelinesClient.CreateOrUpdate.
type LivePipelinesClientCreateOrUpdateResponse struct {
	// Live pipeline represents a unique instance of a live topology, used for real-time ingestion, archiving and publishing of
// content for a unique RTSP camera.
	LivePipeline
}

// LivePipelinesClientDeactivateResponse contains the response from method LivePipelinesClient.BeginDeactivate.
type LivePipelinesClientDeactivateResponse struct {
	// placeholder for future response values
}

// LivePipelinesClientDeleteResponse contains the response from method LivePipelinesClient.Delete.
type LivePipelinesClientDeleteResponse struct {
	// placeholder for future response values
}

// LivePipelinesClientGetResponse contains the response from method LivePipelinesClient.Get.
type LivePipelinesClientGetResponse struct {
	// Live pipeline represents a unique instance of a live topology, used for real-time ingestion, archiving and publishing of
// content for a unique RTSP camera.
	LivePipeline
}

// LivePipelinesClientListResponse contains the response from method LivePipelinesClient.NewListPager.
type LivePipelinesClientListResponse struct {
	// A collection of LivePipeline items.
	LivePipelineCollection
}

// LivePipelinesClientUpdateResponse contains the response from method LivePipelinesClient.Update.
type LivePipelinesClientUpdateResponse struct {
	// Live pipeline represents a unique instance of a live topology, used for real-time ingestion, archiving and publishing of
// content for a unique RTSP camera.
	LivePipeline
}

// LocationsClientCheckNameAvailabilityResponse contains the response from method LocationsClient.CheckNameAvailability.
type LocationsClientCheckNameAvailabilityResponse struct {
	// The check availability result.
	CheckNameAvailabilityResponse
}

// OperationResultsClientGetResponse contains the response from method OperationResultsClient.Get.
type OperationResultsClientGetResponse struct {
	// The Video Analyzer account.
	VideoAnalyzer
}

// OperationStatusesClientGetResponse contains the response from method OperationStatusesClient.Get.
type OperationStatusesClientGetResponse struct {
	// Status of video analyzer operation.
	OperationStatus
}

// OperationsClientListResponse contains the response from method OperationsClient.List.
type OperationsClientListResponse struct {
	// A collection of Operation items.
	OperationCollection
}

// PipelineJobOperationStatusesClientGetResponse contains the response from method PipelineJobOperationStatusesClient.Get.
type PipelineJobOperationStatusesClientGetResponse struct {
	// Used for tracking the status of an operation on the pipeline job.
	PipelineJobOperationStatus
}

// PipelineJobsClientCancelResponse contains the response from method PipelineJobsClient.BeginCancel.
type PipelineJobsClientCancelResponse struct {
	// placeholder for future response values
}

// PipelineJobsClientCreateOrUpdateResponse contains the response from method PipelineJobsClient.CreateOrUpdate.
type PipelineJobsClientCreateOrUpdateResponse struct {
	// Pipeline job represents a unique instance of a batch topology, used for offline processing of selected portions of archived
// content.
	PipelineJob
}

// PipelineJobsClientDeleteResponse contains the response from method PipelineJobsClient.Delete.
type PipelineJobsClientDeleteResponse struct {
	// placeholder for future response values
}

// PipelineJobsClientGetResponse contains the response from method PipelineJobsClient.Get.
type PipelineJobsClientGetResponse struct {
	// Pipeline job represents a unique instance of a batch topology, used for offline processing of selected portions of archived
// content.
	PipelineJob
}

// PipelineJobsClientListResponse contains the response from method PipelineJobsClient.NewListPager.
type PipelineJobsClientListResponse struct {
	// A collection of PipelineJob items.
	PipelineJobCollection
}

// PipelineJobsClientUpdateResponse contains the response from method PipelineJobsClient.Update.
type PipelineJobsClientUpdateResponse struct {
	// Pipeline job represents a unique instance of a batch topology, used for offline processing of selected portions of archived
// content.
	PipelineJob
}

// PipelineTopologiesClientCreateOrUpdateResponse contains the response from method PipelineTopologiesClient.CreateOrUpdate.
type PipelineTopologiesClientCreateOrUpdateResponse struct {
	// Pipeline topology describes the processing steps to be applied when processing content for a particular outcome. The topology
// should be defined according to the scenario to be achieved and can be reused across many pipeline instances which share
// the same processing characteristics. For instance, a pipeline topology which captures content from a RTSP camera and archives
// the content can be reused across many different cameras, as long as the same processing is to be applied across all the
// cameras. Individual instance properties can be defined through the use of user-defined parameters, which allow for a topology
// to be parameterized. This allows individual pipelines refer to different values, such as individual cameras' RTSP endpoints
// and credentials. Overall a topology is composed of the following:
//
// - Parameters: list of user defined parameters that can be references across the topology nodes.
// - Sources: list of one or more data sources nodes such as an RTSP source which allows for content to be ingested from cameras.
// - Processors: list of nodes which perform data analysis or transformations.
// - Sinks: list of one or more data sinks which allow for data to be stored or exported to other destinations.
	PipelineTopology
}

// PipelineTopologiesClientDeleteResponse contains the response from method PipelineTopologiesClient.Delete.
type PipelineTopologiesClientDeleteResponse struct {
	// placeholder for future response values
}

// PipelineTopologiesClientGetResponse contains the response from method PipelineTopologiesClient.Get.
type PipelineTopologiesClientGetResponse struct {
	// Pipeline topology describes the processing steps to be applied when processing content for a particular outcome. The topology
// should be defined according to the scenario to be achieved and can be reused across many pipeline instances which share
// the same processing characteristics. For instance, a pipeline topology which captures content from a RTSP camera and archives
// the content can be reused across many different cameras, as long as the same processing is to be applied across all the
// cameras. Individual instance properties can be defined through the use of user-defined parameters, which allow for a topology
// to be parameterized. This allows individual pipelines refer to different values, such as individual cameras' RTSP endpoints
// and credentials. Overall a topology is composed of the following:
//
// - Parameters: list of user defined parameters that can be references across the topology nodes.
// - Sources: list of one or more data sources nodes such as an RTSP source which allows for content to be ingested from cameras.
// - Processors: list of nodes which perform data analysis or transformations.
// - Sinks: list of one or more data sinks which allow for data to be stored or exported to other destinations.
	PipelineTopology
}

// PipelineTopologiesClientListResponse contains the response from method PipelineTopologiesClient.NewListPager.
type PipelineTopologiesClientListResponse struct {
	// A collection of PipelineTopology items.
	PipelineTopologyCollection
}

// PipelineTopologiesClientUpdateResponse contains the response from method PipelineTopologiesClient.Update.
type PipelineTopologiesClientUpdateResponse struct {
	// Pipeline topology describes the processing steps to be applied when processing content for a particular outcome. The topology
// should be defined according to the scenario to be achieved and can be reused across many pipeline instances which share
// the same processing characteristics. For instance, a pipeline topology which captures content from a RTSP camera and archives
// the content can be reused across many different cameras, as long as the same processing is to be applied across all the
// cameras. Individual instance properties can be defined through the use of user-defined parameters, which allow for a topology
// to be parameterized. This allows individual pipelines refer to different values, such as individual cameras' RTSP endpoints
// and credentials. Overall a topology is composed of the following:
//
// - Parameters: list of user defined parameters that can be references across the topology nodes.
// - Sources: list of one or more data sources nodes such as an RTSP source which allows for content to be ingested from cameras.
// - Processors: list of nodes which perform data analysis or transformations.
// - Sinks: list of one or more data sinks which allow for data to be stored or exported to other destinations.
	PipelineTopology
}

// PrivateEndpointConnectionsClientCreateOrUpdateResponse contains the response from method PrivateEndpointConnectionsClient.CreateOrUpdate.
type PrivateEndpointConnectionsClientCreateOrUpdateResponse struct {
	// The Private Endpoint Connection resource.
	PrivateEndpointConnection

	// AzureAsyncOperation contains the information returned from the Azure-AsyncOperation header response.
	AzureAsyncOperation *string

	// Location contains the information returned from the Location header response.
	Location *string

	// RetryAfter contains the information returned from the Retry-After header response.
	RetryAfter *int32
}

// PrivateEndpointConnectionsClientDeleteResponse contains the response from method PrivateEndpointConnectionsClient.Delete.
type PrivateEndpointConnectionsClientDeleteResponse struct {
	// placeholder for future response values
}

// PrivateEndpointConnectionsClientGetResponse contains the response from method PrivateEndpointConnectionsClient.Get.
type PrivateEndpointConnectionsClientGetResponse struct {
	// The Private Endpoint Connection resource.
	PrivateEndpointConnection
}

// PrivateEndpointConnectionsClientListResponse contains the response from method PrivateEndpointConnectionsClient.List.
type PrivateEndpointConnectionsClientListResponse struct {
	// List of private endpoint connection associated with the specified storage account
	PrivateEndpointConnectionListResult
}

// PrivateEndpointConnectionsOperationResultsClientGetResponse contains the response from method PrivateEndpointConnectionsOperationResultsClient.Get.
type PrivateEndpointConnectionsOperationResultsClientGetResponse struct {
	// The Private Endpoint Connection resource.
	PrivateEndpointConnection
}

// PrivateEndpointConnectionsOperationStatusesClientGetResponse contains the response from method PrivateEndpointConnectionsOperationStatusesClient.Get.
type PrivateEndpointConnectionsOperationStatusesClientGetResponse struct {
	// Status of private endpoint connection operation.
	PrivateEndpointConnectionOperationStatus
}

// PrivateLinkResourcesClientGetResponse contains the response from method PrivateLinkResourcesClient.Get.
type PrivateLinkResourcesClientGetResponse struct {
	// A private link resource
	PrivateLinkResource
}

// PrivateLinkResourcesClientListResponse contains the response from method PrivateLinkResourcesClient.List.
type PrivateLinkResourcesClientListResponse struct {
	// A list of private link resources
	PrivateLinkResourceListResult
}

// VideoAnalyzersClientCreateOrUpdateResponse contains the response from method VideoAnalyzersClient.BeginCreateOrUpdate.
type VideoAnalyzersClientCreateOrUpdateResponse struct {
	// The Video Analyzer account.
	VideoAnalyzer
}

// VideoAnalyzersClientDeleteResponse contains the response from method VideoAnalyzersClient.Delete.
type VideoAnalyzersClientDeleteResponse struct {
	// placeholder for future response values
}

// VideoAnalyzersClientGetResponse contains the response from method VideoAnalyzersClient.Get.
type VideoAnalyzersClientGetResponse struct {
	// The Video Analyzer account.
	VideoAnalyzer
}

// VideoAnalyzersClientListBySubscriptionResponse contains the response from method VideoAnalyzersClient.ListBySubscription.
type VideoAnalyzersClientListBySubscriptionResponse struct {
	// A collection of VideoAnalyzer items.
	Collection
}

// VideoAnalyzersClientListResponse contains the response from method VideoAnalyzersClient.List.
type VideoAnalyzersClientListResponse struct {
	// A collection of VideoAnalyzer items.
	Collection
}

// VideoAnalyzersClientUpdateResponse contains the response from method VideoAnalyzersClient.BeginUpdate.
type VideoAnalyzersClientUpdateResponse struct {
	// The Video Analyzer account.
	VideoAnalyzer
}

// VideosClientCreateOrUpdateResponse contains the response from method VideosClient.CreateOrUpdate.
type VideosClientCreateOrUpdateResponse struct {
	// Represents a video resource within Azure Video Analyzer. Videos can be ingested from RTSP cameras through live pipelines
// or can be created by exporting sequences from existing captured video through a pipeline job. Videos ingested through live
// pipelines can be streamed through Azure Video Analyzer Player Widget or compatible players. Exported videos can be downloaded
// as MP4 files.
	VideoEntity
}

// VideosClientDeleteResponse contains the response from method VideosClient.Delete.
type VideosClientDeleteResponse struct {
	// placeholder for future response values
}

// VideosClientGetResponse contains the response from method VideosClient.Get.
type VideosClientGetResponse struct {
	// Represents a video resource within Azure Video Analyzer. Videos can be ingested from RTSP cameras through live pipelines
// or can be created by exporting sequences from existing captured video through a pipeline job. Videos ingested through live
// pipelines can be streamed through Azure Video Analyzer Player Widget or compatible players. Exported videos can be downloaded
// as MP4 files.
	VideoEntity
}

// VideosClientListContentTokenResponse contains the response from method VideosClient.ListContentToken.
type VideosClientListContentTokenResponse struct {
	// "Video content token grants access to the video content URLs."
	VideoContentToken
}

// VideosClientListResponse contains the response from method VideosClient.NewListPager.
type VideosClientListResponse struct {
	// A collection of VideoEntity items.
	VideoEntityCollection
}

// VideosClientUpdateResponse contains the response from method VideosClient.Update.
type VideosClientUpdateResponse struct {
	// Represents a video resource within Azure Video Analyzer. Videos can be ingested from RTSP cameras through live pipelines
// or can be created by exporting sequences from existing captured video through a pipeline job. Videos ingested through live
// pipelines can be streamed through Azure Video Analyzer Player Widget or compatible players. Exported videos can be downloaded
// as MP4 files.
	VideoEntity
}

