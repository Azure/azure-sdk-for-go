//go:build go1.16
// +build go1.16

// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

package armvideoanalyzer

import (
	"context"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/policy"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/runtime"
	"net/http"
	"reflect"
)

// AccessPoliciesListPager provides operations for iterating over paged responses.
type AccessPoliciesListPager struct {
	client    *AccessPoliciesClient
	current   AccessPoliciesListResponse
	err       error
	requester func(context.Context) (*policy.Request, error)
	advancer  func(context.Context, AccessPoliciesListResponse) (*policy.Request, error)
}

// Err returns the last error encountered while paging.
func (p *AccessPoliciesListPager) Err() error {
	return p.err
}

// NextPage returns true if the pager advanced to the next page.
// Returns false if there are no more pages or an error occurred.
func (p *AccessPoliciesListPager) NextPage(ctx context.Context) bool {
	var req *policy.Request
	var err error
	if !reflect.ValueOf(p.current).IsZero() {
		if p.current.AccessPolicyEntityCollection.NextLink == nil || len(*p.current.AccessPolicyEntityCollection.NextLink) == 0 {
			return false
		}
		req, err = p.advancer(ctx, p.current)
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		p.err = err
		return false
	}
	resp, err := p.client.pl.Do(req)
	if err != nil {
		p.err = err
		return false
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {
		p.err = p.client.listHandleError(resp)
		return false
	}
	result, err := p.client.listHandleResponse(resp)
	if err != nil {
		p.err = err
		return false
	}
	p.current = result
	return true
}

// PageResponse returns the current AccessPoliciesListResponse page.
func (p *AccessPoliciesListPager) PageResponse() AccessPoliciesListResponse {
	return p.current
}

// EdgeModulesListPager provides operations for iterating over paged responses.
type EdgeModulesListPager struct {
	client    *EdgeModulesClient
	current   EdgeModulesListResponse
	err       error
	requester func(context.Context) (*policy.Request, error)
	advancer  func(context.Context, EdgeModulesListResponse) (*policy.Request, error)
}

// Err returns the last error encountered while paging.
func (p *EdgeModulesListPager) Err() error {
	return p.err
}

// NextPage returns true if the pager advanced to the next page.
// Returns false if there are no more pages or an error occurred.
func (p *EdgeModulesListPager) NextPage(ctx context.Context) bool {
	var req *policy.Request
	var err error
	if !reflect.ValueOf(p.current).IsZero() {
		if p.current.EdgeModuleEntityCollection.NextLink == nil || len(*p.current.EdgeModuleEntityCollection.NextLink) == 0 {
			return false
		}
		req, err = p.advancer(ctx, p.current)
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		p.err = err
		return false
	}
	resp, err := p.client.pl.Do(req)
	if err != nil {
		p.err = err
		return false
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {
		p.err = p.client.listHandleError(resp)
		return false
	}
	result, err := p.client.listHandleResponse(resp)
	if err != nil {
		p.err = err
		return false
	}
	p.current = result
	return true
}

// PageResponse returns the current EdgeModulesListResponse page.
func (p *EdgeModulesListPager) PageResponse() EdgeModulesListResponse {
	return p.current
}

// LivePipelinesListPager provides operations for iterating over paged responses.
type LivePipelinesListPager struct {
	client    *LivePipelinesClient
	current   LivePipelinesListResponse
	err       error
	requester func(context.Context) (*policy.Request, error)
	advancer  func(context.Context, LivePipelinesListResponse) (*policy.Request, error)
}

// Err returns the last error encountered while paging.
func (p *LivePipelinesListPager) Err() error {
	return p.err
}

// NextPage returns true if the pager advanced to the next page.
// Returns false if there are no more pages or an error occurred.
func (p *LivePipelinesListPager) NextPage(ctx context.Context) bool {
	var req *policy.Request
	var err error
	if !reflect.ValueOf(p.current).IsZero() {
		if p.current.LivePipelineCollection.NextLink == nil || len(*p.current.LivePipelineCollection.NextLink) == 0 {
			return false
		}
		req, err = p.advancer(ctx, p.current)
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		p.err = err
		return false
	}
	resp, err := p.client.pl.Do(req)
	if err != nil {
		p.err = err
		return false
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {
		p.err = p.client.listHandleError(resp)
		return false
	}
	result, err := p.client.listHandleResponse(resp)
	if err != nil {
		p.err = err
		return false
	}
	p.current = result
	return true
}

// PageResponse returns the current LivePipelinesListResponse page.
func (p *LivePipelinesListPager) PageResponse() LivePipelinesListResponse {
	return p.current
}

// PipelineJobsListPager provides operations for iterating over paged responses.
type PipelineJobsListPager struct {
	client    *PipelineJobsClient
	current   PipelineJobsListResponse
	err       error
	requester func(context.Context) (*policy.Request, error)
	advancer  func(context.Context, PipelineJobsListResponse) (*policy.Request, error)
}

// Err returns the last error encountered while paging.
func (p *PipelineJobsListPager) Err() error {
	return p.err
}

// NextPage returns true if the pager advanced to the next page.
// Returns false if there are no more pages or an error occurred.
func (p *PipelineJobsListPager) NextPage(ctx context.Context) bool {
	var req *policy.Request
	var err error
	if !reflect.ValueOf(p.current).IsZero() {
		if p.current.PipelineJobCollection.NextLink == nil || len(*p.current.PipelineJobCollection.NextLink) == 0 {
			return false
		}
		req, err = p.advancer(ctx, p.current)
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		p.err = err
		return false
	}
	resp, err := p.client.pl.Do(req)
	if err != nil {
		p.err = err
		return false
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {
		p.err = p.client.listHandleError(resp)
		return false
	}
	result, err := p.client.listHandleResponse(resp)
	if err != nil {
		p.err = err
		return false
	}
	p.current = result
	return true
}

// PageResponse returns the current PipelineJobsListResponse page.
func (p *PipelineJobsListPager) PageResponse() PipelineJobsListResponse {
	return p.current
}

// PipelineTopologiesListPager provides operations for iterating over paged responses.
type PipelineTopologiesListPager struct {
	client    *PipelineTopologiesClient
	current   PipelineTopologiesListResponse
	err       error
	requester func(context.Context) (*policy.Request, error)
	advancer  func(context.Context, PipelineTopologiesListResponse) (*policy.Request, error)
}

// Err returns the last error encountered while paging.
func (p *PipelineTopologiesListPager) Err() error {
	return p.err
}

// NextPage returns true if the pager advanced to the next page.
// Returns false if there are no more pages or an error occurred.
func (p *PipelineTopologiesListPager) NextPage(ctx context.Context) bool {
	var req *policy.Request
	var err error
	if !reflect.ValueOf(p.current).IsZero() {
		if p.current.PipelineTopologyCollection.NextLink == nil || len(*p.current.PipelineTopologyCollection.NextLink) == 0 {
			return false
		}
		req, err = p.advancer(ctx, p.current)
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		p.err = err
		return false
	}
	resp, err := p.client.pl.Do(req)
	if err != nil {
		p.err = err
		return false
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {
		p.err = p.client.listHandleError(resp)
		return false
	}
	result, err := p.client.listHandleResponse(resp)
	if err != nil {
		p.err = err
		return false
	}
	p.current = result
	return true
}

// PageResponse returns the current PipelineTopologiesListResponse page.
func (p *PipelineTopologiesListPager) PageResponse() PipelineTopologiesListResponse {
	return p.current
}

// VideosListPager provides operations for iterating over paged responses.
type VideosListPager struct {
	client    *VideosClient
	current   VideosListResponse
	err       error
	requester func(context.Context) (*policy.Request, error)
	advancer  func(context.Context, VideosListResponse) (*policy.Request, error)
}

// Err returns the last error encountered while paging.
func (p *VideosListPager) Err() error {
	return p.err
}

// NextPage returns true if the pager advanced to the next page.
// Returns false if there are no more pages or an error occurred.
func (p *VideosListPager) NextPage(ctx context.Context) bool {
	var req *policy.Request
	var err error
	if !reflect.ValueOf(p.current).IsZero() {
		if p.current.VideoEntityCollection.NextLink == nil || len(*p.current.VideoEntityCollection.NextLink) == 0 {
			return false
		}
		req, err = p.advancer(ctx, p.current)
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		p.err = err
		return false
	}
	resp, err := p.client.pl.Do(req)
	if err != nil {
		p.err = err
		return false
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {
		p.err = p.client.listHandleError(resp)
		return false
	}
	result, err := p.client.listHandleResponse(resp)
	if err != nil {
		p.err = err
		return false
	}
	p.current = result
	return true
}

// PageResponse returns the current VideosListResponse page.
func (p *VideosListPager) PageResponse() VideosListResponse {
	return p.current
}
