//go:build go1.16
// +build go1.16

// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

package armvideoanalyzer

import (
	"context"
	armruntime "github.com/Azure/azure-sdk-for-go/sdk/azcore/arm/runtime"
	"net/http"
	"time"
)

// AccessPoliciesCreateOrUpdateResponse contains the response from method AccessPolicies.CreateOrUpdate.
type AccessPoliciesCreateOrUpdateResponse struct {
	AccessPoliciesCreateOrUpdateResult
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// AccessPoliciesCreateOrUpdateResult contains the result from method AccessPolicies.CreateOrUpdate.
type AccessPoliciesCreateOrUpdateResult struct {
	AccessPolicyEntity
}

// AccessPoliciesDeleteResponse contains the response from method AccessPolicies.Delete.
type AccessPoliciesDeleteResponse struct {
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// AccessPoliciesGetResponse contains the response from method AccessPolicies.Get.
type AccessPoliciesGetResponse struct {
	AccessPoliciesGetResult
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// AccessPoliciesGetResult contains the result from method AccessPolicies.Get.
type AccessPoliciesGetResult struct {
	AccessPolicyEntity
}

// AccessPoliciesListResponse contains the response from method AccessPolicies.List.
type AccessPoliciesListResponse struct {
	AccessPoliciesListResult
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// AccessPoliciesListResult contains the result from method AccessPolicies.List.
type AccessPoliciesListResult struct {
	AccessPolicyEntityCollection
}

// AccessPoliciesUpdateResponse contains the response from method AccessPolicies.Update.
type AccessPoliciesUpdateResponse struct {
	AccessPoliciesUpdateResult
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// AccessPoliciesUpdateResult contains the result from method AccessPolicies.Update.
type AccessPoliciesUpdateResult struct {
	AccessPolicyEntity
}

// EdgeModulesCreateOrUpdateResponse contains the response from method EdgeModules.CreateOrUpdate.
type EdgeModulesCreateOrUpdateResponse struct {
	EdgeModulesCreateOrUpdateResult
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// EdgeModulesCreateOrUpdateResult contains the result from method EdgeModules.CreateOrUpdate.
type EdgeModulesCreateOrUpdateResult struct {
	EdgeModuleEntity
}

// EdgeModulesDeleteResponse contains the response from method EdgeModules.Delete.
type EdgeModulesDeleteResponse struct {
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// EdgeModulesGetResponse contains the response from method EdgeModules.Get.
type EdgeModulesGetResponse struct {
	EdgeModulesGetResult
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// EdgeModulesGetResult contains the result from method EdgeModules.Get.
type EdgeModulesGetResult struct {
	EdgeModuleEntity
}

// EdgeModulesListProvisioningTokenResponse contains the response from method EdgeModules.ListProvisioningToken.
type EdgeModulesListProvisioningTokenResponse struct {
	EdgeModulesListProvisioningTokenResult
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// EdgeModulesListProvisioningTokenResult contains the result from method EdgeModules.ListProvisioningToken.
type EdgeModulesListProvisioningTokenResult struct {
	EdgeModuleProvisioningToken
}

// EdgeModulesListResponse contains the response from method EdgeModules.List.
type EdgeModulesListResponse struct {
	EdgeModulesListResult
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// EdgeModulesListResult contains the result from method EdgeModules.List.
type EdgeModulesListResult struct {
	EdgeModuleEntityCollection
}

// LivePipelineOperationStatusesGetResponse contains the response from method LivePipelineOperationStatuses.Get.
type LivePipelineOperationStatusesGetResponse struct {
	LivePipelineOperationStatusesGetResult
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// LivePipelineOperationStatusesGetResult contains the result from method LivePipelineOperationStatuses.Get.
type LivePipelineOperationStatusesGetResult struct {
	LivePipelineOperationStatus
}

// LivePipelinesActivatePollerResponse contains the response from method LivePipelines.Activate.
type LivePipelinesActivatePollerResponse struct {
	// Poller contains an initialized poller.
	Poller *LivePipelinesActivatePoller

	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// PollUntilDone will poll the service endpoint until a terminal state is reached or an error is received.
// freq: the time to wait between intervals in absence of a Retry-After header. Allowed minimum is one second.
// A good starting value is 30 seconds. Note that some resources might benefit from a different value.
func (l LivePipelinesActivatePollerResponse) PollUntilDone(ctx context.Context, freq time.Duration) (LivePipelinesActivateResponse, error) {
	respType := LivePipelinesActivateResponse{}
	resp, err := l.Poller.pt.PollUntilDone(ctx, freq, nil)
	if err != nil {
		return respType, err
	}
	respType.RawResponse = resp
	return respType, nil
}

// Resume rehydrates a LivePipelinesActivatePollerResponse from the provided client and resume token.
func (l *LivePipelinesActivatePollerResponse) Resume(ctx context.Context, client *LivePipelinesClient, token string) error {
	pt, err := armruntime.NewPollerFromResumeToken("LivePipelinesClient.Activate", token, client.pl, client.activateHandleError)
	if err != nil {
		return err
	}
	poller := &LivePipelinesActivatePoller{
		pt: pt,
	}
	resp, err := poller.Poll(ctx)
	if err != nil {
		return err
	}
	l.Poller = poller
	l.RawResponse = resp
	return nil
}

// LivePipelinesActivateResponse contains the response from method LivePipelines.Activate.
type LivePipelinesActivateResponse struct {
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// LivePipelinesCreateOrUpdateResponse contains the response from method LivePipelines.CreateOrUpdate.
type LivePipelinesCreateOrUpdateResponse struct {
	LivePipelinesCreateOrUpdateResult
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// LivePipelinesCreateOrUpdateResult contains the result from method LivePipelines.CreateOrUpdate.
type LivePipelinesCreateOrUpdateResult struct {
	LivePipeline
}

// LivePipelinesDeactivatePollerResponse contains the response from method LivePipelines.Deactivate.
type LivePipelinesDeactivatePollerResponse struct {
	// Poller contains an initialized poller.
	Poller *LivePipelinesDeactivatePoller

	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// PollUntilDone will poll the service endpoint until a terminal state is reached or an error is received.
// freq: the time to wait between intervals in absence of a Retry-After header. Allowed minimum is one second.
// A good starting value is 30 seconds. Note that some resources might benefit from a different value.
func (l LivePipelinesDeactivatePollerResponse) PollUntilDone(ctx context.Context, freq time.Duration) (LivePipelinesDeactivateResponse, error) {
	respType := LivePipelinesDeactivateResponse{}
	resp, err := l.Poller.pt.PollUntilDone(ctx, freq, nil)
	if err != nil {
		return respType, err
	}
	respType.RawResponse = resp
	return respType, nil
}

// Resume rehydrates a LivePipelinesDeactivatePollerResponse from the provided client and resume token.
func (l *LivePipelinesDeactivatePollerResponse) Resume(ctx context.Context, client *LivePipelinesClient, token string) error {
	pt, err := armruntime.NewPollerFromResumeToken("LivePipelinesClient.Deactivate", token, client.pl, client.deactivateHandleError)
	if err != nil {
		return err
	}
	poller := &LivePipelinesDeactivatePoller{
		pt: pt,
	}
	resp, err := poller.Poll(ctx)
	if err != nil {
		return err
	}
	l.Poller = poller
	l.RawResponse = resp
	return nil
}

// LivePipelinesDeactivateResponse contains the response from method LivePipelines.Deactivate.
type LivePipelinesDeactivateResponse struct {
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// LivePipelinesDeleteResponse contains the response from method LivePipelines.Delete.
type LivePipelinesDeleteResponse struct {
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// LivePipelinesGetResponse contains the response from method LivePipelines.Get.
type LivePipelinesGetResponse struct {
	LivePipelinesGetResult
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// LivePipelinesGetResult contains the result from method LivePipelines.Get.
type LivePipelinesGetResult struct {
	LivePipeline
}

// LivePipelinesListResponse contains the response from method LivePipelines.List.
type LivePipelinesListResponse struct {
	LivePipelinesListResult
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// LivePipelinesListResult contains the result from method LivePipelines.List.
type LivePipelinesListResult struct {
	LivePipelineCollection
}

// LivePipelinesUpdateResponse contains the response from method LivePipelines.Update.
type LivePipelinesUpdateResponse struct {
	LivePipelinesUpdateResult
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// LivePipelinesUpdateResult contains the result from method LivePipelines.Update.
type LivePipelinesUpdateResult struct {
	LivePipeline
}

// LocationsCheckNameAvailabilityResponse contains the response from method Locations.CheckNameAvailability.
type LocationsCheckNameAvailabilityResponse struct {
	LocationsCheckNameAvailabilityResult
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// LocationsCheckNameAvailabilityResult contains the result from method Locations.CheckNameAvailability.
type LocationsCheckNameAvailabilityResult struct {
	CheckNameAvailabilityResponse
}

// OperationResultsGetResponse contains the response from method OperationResults.Get.
type OperationResultsGetResponse struct {
	OperationResultsGetResult
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// OperationResultsGetResult contains the result from method OperationResults.Get.
type OperationResultsGetResult struct {
	PrivateEndpointConnection
}

// OperationStatusesGetResponse contains the response from method OperationStatuses.Get.
type OperationStatusesGetResponse struct {
	OperationStatusesGetResult
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// OperationStatusesGetResult contains the result from method OperationStatuses.Get.
type OperationStatusesGetResult struct {
	VideoAnalyzerPrivateEndpointConnectionOperationStatus
}

// OperationsListResponse contains the response from method Operations.List.
type OperationsListResponse struct {
	OperationsListResult
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// OperationsListResult contains the result from method Operations.List.
type OperationsListResult struct {
	OperationCollection
}

// PipelineJobOperationStatusesGetResponse contains the response from method PipelineJobOperationStatuses.Get.
type PipelineJobOperationStatusesGetResponse struct {
	PipelineJobOperationStatusesGetResult
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// PipelineJobOperationStatusesGetResult contains the result from method PipelineJobOperationStatuses.Get.
type PipelineJobOperationStatusesGetResult struct {
	PipelineJobOperationStatus
}

// PipelineJobsCancelPollerResponse contains the response from method PipelineJobs.Cancel.
type PipelineJobsCancelPollerResponse struct {
	// Poller contains an initialized poller.
	Poller *PipelineJobsCancelPoller

	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// PollUntilDone will poll the service endpoint until a terminal state is reached or an error is received.
// freq: the time to wait between intervals in absence of a Retry-After header. Allowed minimum is one second.
// A good starting value is 30 seconds. Note that some resources might benefit from a different value.
func (l PipelineJobsCancelPollerResponse) PollUntilDone(ctx context.Context, freq time.Duration) (PipelineJobsCancelResponse, error) {
	respType := PipelineJobsCancelResponse{}
	resp, err := l.Poller.pt.PollUntilDone(ctx, freq, nil)
	if err != nil {
		return respType, err
	}
	respType.RawResponse = resp
	return respType, nil
}

// Resume rehydrates a PipelineJobsCancelPollerResponse from the provided client and resume token.
func (l *PipelineJobsCancelPollerResponse) Resume(ctx context.Context, client *PipelineJobsClient, token string) error {
	pt, err := armruntime.NewPollerFromResumeToken("PipelineJobsClient.Cancel", token, client.pl, client.cancelHandleError)
	if err != nil {
		return err
	}
	poller := &PipelineJobsCancelPoller{
		pt: pt,
	}
	resp, err := poller.Poll(ctx)
	if err != nil {
		return err
	}
	l.Poller = poller
	l.RawResponse = resp
	return nil
}

// PipelineJobsCancelResponse contains the response from method PipelineJobs.Cancel.
type PipelineJobsCancelResponse struct {
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// PipelineJobsCreateOrUpdateResponse contains the response from method PipelineJobs.CreateOrUpdate.
type PipelineJobsCreateOrUpdateResponse struct {
	PipelineJobsCreateOrUpdateResult
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// PipelineJobsCreateOrUpdateResult contains the result from method PipelineJobs.CreateOrUpdate.
type PipelineJobsCreateOrUpdateResult struct {
	PipelineJob
}

// PipelineJobsDeleteResponse contains the response from method PipelineJobs.Delete.
type PipelineJobsDeleteResponse struct {
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// PipelineJobsGetResponse contains the response from method PipelineJobs.Get.
type PipelineJobsGetResponse struct {
	PipelineJobsGetResult
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// PipelineJobsGetResult contains the result from method PipelineJobs.Get.
type PipelineJobsGetResult struct {
	PipelineJob
}

// PipelineJobsListResponse contains the response from method PipelineJobs.List.
type PipelineJobsListResponse struct {
	PipelineJobsListResult
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// PipelineJobsListResult contains the result from method PipelineJobs.List.
type PipelineJobsListResult struct {
	PipelineJobCollection
}

// PipelineJobsUpdateResponse contains the response from method PipelineJobs.Update.
type PipelineJobsUpdateResponse struct {
	PipelineJobsUpdateResult
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// PipelineJobsUpdateResult contains the result from method PipelineJobs.Update.
type PipelineJobsUpdateResult struct {
	PipelineJob
}

// PipelineTopologiesCreateOrUpdateResponse contains the response from method PipelineTopologies.CreateOrUpdate.
type PipelineTopologiesCreateOrUpdateResponse struct {
	PipelineTopologiesCreateOrUpdateResult
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// PipelineTopologiesCreateOrUpdateResult contains the result from method PipelineTopologies.CreateOrUpdate.
type PipelineTopologiesCreateOrUpdateResult struct {
	PipelineTopology
}

// PipelineTopologiesDeleteResponse contains the response from method PipelineTopologies.Delete.
type PipelineTopologiesDeleteResponse struct {
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// PipelineTopologiesGetResponse contains the response from method PipelineTopologies.Get.
type PipelineTopologiesGetResponse struct {
	PipelineTopologiesGetResult
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// PipelineTopologiesGetResult contains the result from method PipelineTopologies.Get.
type PipelineTopologiesGetResult struct {
	PipelineTopology
}

// PipelineTopologiesListResponse contains the response from method PipelineTopologies.List.
type PipelineTopologiesListResponse struct {
	PipelineTopologiesListResult
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// PipelineTopologiesListResult contains the result from method PipelineTopologies.List.
type PipelineTopologiesListResult struct {
	PipelineTopologyCollection
}

// PipelineTopologiesUpdateResponse contains the response from method PipelineTopologies.Update.
type PipelineTopologiesUpdateResponse struct {
	PipelineTopologiesUpdateResult
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// PipelineTopologiesUpdateResult contains the result from method PipelineTopologies.Update.
type PipelineTopologiesUpdateResult struct {
	PipelineTopology
}

// PrivateEndpointConnectionsCreateOrUpdateResponse contains the response from method PrivateEndpointConnections.CreateOrUpdate.
type PrivateEndpointConnectionsCreateOrUpdateResponse struct {
	PrivateEndpointConnectionsCreateOrUpdateResult
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// PrivateEndpointConnectionsCreateOrUpdateResult contains the result from method PrivateEndpointConnections.CreateOrUpdate.
type PrivateEndpointConnectionsCreateOrUpdateResult struct {
	PrivateEndpointConnection
	// AzureAsyncOperation contains the information returned from the Azure-AsyncOperation header response.
	AzureAsyncOperation *string

	// Location contains the information returned from the Location header response.
	Location *string

	// RetryAfter contains the information returned from the Retry-After header response.
	RetryAfter *int32
}

// PrivateEndpointConnectionsDeleteResponse contains the response from method PrivateEndpointConnections.Delete.
type PrivateEndpointConnectionsDeleteResponse struct {
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// PrivateEndpointConnectionsGetResponse contains the response from method PrivateEndpointConnections.Get.
type PrivateEndpointConnectionsGetResponse struct {
	PrivateEndpointConnectionsGetResult
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// PrivateEndpointConnectionsGetResult contains the result from method PrivateEndpointConnections.Get.
type PrivateEndpointConnectionsGetResult struct {
	PrivateEndpointConnection
}

// PrivateEndpointConnectionsListResponse contains the response from method PrivateEndpointConnections.List.
type PrivateEndpointConnectionsListResponse struct {
	PrivateEndpointConnectionsListResult
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// PrivateEndpointConnectionsListResult contains the result from method PrivateEndpointConnections.List.
type PrivateEndpointConnectionsListResult struct {
	PrivateEndpointConnectionListResult
}

// PrivateLinkResourcesGetResponse contains the response from method PrivateLinkResources.Get.
type PrivateLinkResourcesGetResponse struct {
	PrivateLinkResourcesGetResult
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// PrivateLinkResourcesGetResult contains the result from method PrivateLinkResources.Get.
type PrivateLinkResourcesGetResult struct {
	PrivateLinkResource
}

// PrivateLinkResourcesListResponse contains the response from method PrivateLinkResources.List.
type PrivateLinkResourcesListResponse struct {
	PrivateLinkResourcesListResult
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// PrivateLinkResourcesListResult contains the result from method PrivateLinkResources.List.
type PrivateLinkResourcesListResult struct {
	PrivateLinkResourceListResult
}

// VideoAnalyzerOperationResultsGetResponse contains the response from method VideoAnalyzerOperationResults.Get.
type VideoAnalyzerOperationResultsGetResponse struct {
	VideoAnalyzerOperationResultsGetResult
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// VideoAnalyzerOperationResultsGetResult contains the result from method VideoAnalyzerOperationResults.Get.
type VideoAnalyzerOperationResultsGetResult struct {
	VideoAnalyzer
}

// VideoAnalyzerOperationStatusesGetResponse contains the response from method VideoAnalyzerOperationStatuses.Get.
type VideoAnalyzerOperationStatusesGetResponse struct {
	VideoAnalyzerOperationStatusesGetResult
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// VideoAnalyzerOperationStatusesGetResult contains the result from method VideoAnalyzerOperationStatuses.Get.
type VideoAnalyzerOperationStatusesGetResult struct {
	VideoAnalyzerOperationStatus
}

// VideoAnalyzersCreateOrUpdatePollerResponse contains the response from method VideoAnalyzers.CreateOrUpdate.
type VideoAnalyzersCreateOrUpdatePollerResponse struct {
	// Poller contains an initialized poller.
	Poller *VideoAnalyzersCreateOrUpdatePoller

	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// PollUntilDone will poll the service endpoint until a terminal state is reached or an error is received.
// freq: the time to wait between intervals in absence of a Retry-After header. Allowed minimum is one second.
// A good starting value is 30 seconds. Note that some resources might benefit from a different value.
func (l VideoAnalyzersCreateOrUpdatePollerResponse) PollUntilDone(ctx context.Context, freq time.Duration) (VideoAnalyzersCreateOrUpdateResponse, error) {
	respType := VideoAnalyzersCreateOrUpdateResponse{}
	resp, err := l.Poller.pt.PollUntilDone(ctx, freq, &respType.VideoAnalyzer)
	if err != nil {
		return respType, err
	}
	respType.RawResponse = resp
	return respType, nil
}

// Resume rehydrates a VideoAnalyzersCreateOrUpdatePollerResponse from the provided client and resume token.
func (l *VideoAnalyzersCreateOrUpdatePollerResponse) Resume(ctx context.Context, client *VideoAnalyzersClient, token string) error {
	pt, err := armruntime.NewPollerFromResumeToken("VideoAnalyzersClient.CreateOrUpdate", token, client.pl, client.createOrUpdateHandleError)
	if err != nil {
		return err
	}
	poller := &VideoAnalyzersCreateOrUpdatePoller{
		pt: pt,
	}
	resp, err := poller.Poll(ctx)
	if err != nil {
		return err
	}
	l.Poller = poller
	l.RawResponse = resp
	return nil
}

// VideoAnalyzersCreateOrUpdateResponse contains the response from method VideoAnalyzers.CreateOrUpdate.
type VideoAnalyzersCreateOrUpdateResponse struct {
	VideoAnalyzersCreateOrUpdateResult
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// VideoAnalyzersCreateOrUpdateResult contains the result from method VideoAnalyzers.CreateOrUpdate.
type VideoAnalyzersCreateOrUpdateResult struct {
	VideoAnalyzer
}

// VideoAnalyzersDeleteResponse contains the response from method VideoAnalyzers.Delete.
type VideoAnalyzersDeleteResponse struct {
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// VideoAnalyzersGetResponse contains the response from method VideoAnalyzers.Get.
type VideoAnalyzersGetResponse struct {
	VideoAnalyzersGetResult
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// VideoAnalyzersGetResult contains the result from method VideoAnalyzers.Get.
type VideoAnalyzersGetResult struct {
	VideoAnalyzer
}

// VideoAnalyzersListBySubscriptionResponse contains the response from method VideoAnalyzers.ListBySubscription.
type VideoAnalyzersListBySubscriptionResponse struct {
	VideoAnalyzersListBySubscriptionResult
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// VideoAnalyzersListBySubscriptionResult contains the result from method VideoAnalyzers.ListBySubscription.
type VideoAnalyzersListBySubscriptionResult struct {
	VideoAnalyzerCollection
}

// VideoAnalyzersListResponse contains the response from method VideoAnalyzers.List.
type VideoAnalyzersListResponse struct {
	VideoAnalyzersListResult
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// VideoAnalyzersListResult contains the result from method VideoAnalyzers.List.
type VideoAnalyzersListResult struct {
	VideoAnalyzerCollection
}

// VideoAnalyzersUpdatePollerResponse contains the response from method VideoAnalyzers.Update.
type VideoAnalyzersUpdatePollerResponse struct {
	// Poller contains an initialized poller.
	Poller *VideoAnalyzersUpdatePoller

	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// PollUntilDone will poll the service endpoint until a terminal state is reached or an error is received.
// freq: the time to wait between intervals in absence of a Retry-After header. Allowed minimum is one second.
// A good starting value is 30 seconds. Note that some resources might benefit from a different value.
func (l VideoAnalyzersUpdatePollerResponse) PollUntilDone(ctx context.Context, freq time.Duration) (VideoAnalyzersUpdateResponse, error) {
	respType := VideoAnalyzersUpdateResponse{}
	resp, err := l.Poller.pt.PollUntilDone(ctx, freq, &respType.VideoAnalyzer)
	if err != nil {
		return respType, err
	}
	respType.RawResponse = resp
	return respType, nil
}

// Resume rehydrates a VideoAnalyzersUpdatePollerResponse from the provided client and resume token.
func (l *VideoAnalyzersUpdatePollerResponse) Resume(ctx context.Context, client *VideoAnalyzersClient, token string) error {
	pt, err := armruntime.NewPollerFromResumeToken("VideoAnalyzersClient.Update", token, client.pl, client.updateHandleError)
	if err != nil {
		return err
	}
	poller := &VideoAnalyzersUpdatePoller{
		pt: pt,
	}
	resp, err := poller.Poll(ctx)
	if err != nil {
		return err
	}
	l.Poller = poller
	l.RawResponse = resp
	return nil
}

// VideoAnalyzersUpdateResponse contains the response from method VideoAnalyzers.Update.
type VideoAnalyzersUpdateResponse struct {
	VideoAnalyzersUpdateResult
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// VideoAnalyzersUpdateResult contains the result from method VideoAnalyzers.Update.
type VideoAnalyzersUpdateResult struct {
	VideoAnalyzer
}

// VideosCreateOrUpdateResponse contains the response from method Videos.CreateOrUpdate.
type VideosCreateOrUpdateResponse struct {
	VideosCreateOrUpdateResult
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// VideosCreateOrUpdateResult contains the result from method Videos.CreateOrUpdate.
type VideosCreateOrUpdateResult struct {
	VideoEntity
}

// VideosDeleteResponse contains the response from method Videos.Delete.
type VideosDeleteResponse struct {
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// VideosGetResponse contains the response from method Videos.Get.
type VideosGetResponse struct {
	VideosGetResult
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// VideosGetResult contains the result from method Videos.Get.
type VideosGetResult struct {
	VideoEntity
}

// VideosListContentTokenResponse contains the response from method Videos.ListContentToken.
type VideosListContentTokenResponse struct {
	VideosListContentTokenResult
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// VideosListContentTokenResult contains the result from method Videos.ListContentToken.
type VideosListContentTokenResult struct {
	VideoContentToken
}

// VideosListResponse contains the response from method Videos.List.
type VideosListResponse struct {
	VideosListResult
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// VideosListResult contains the result from method Videos.List.
type VideosListResult struct {
	VideoEntityCollection
}

// VideosUpdateResponse contains the response from method Videos.Update.
type VideosUpdateResponse struct {
	VideosUpdateResult
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// VideosUpdateResult contains the result from method Videos.Update.
type VideosUpdateResult struct {
	VideoEntity
}
