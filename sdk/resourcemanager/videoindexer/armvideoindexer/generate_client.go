//go:build go1.18
// +build go1.18

// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator. DO NOT EDIT.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

package armvideoindexer

import (
	"context"
	"errors"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/arm"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/policy"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/runtime"
	"net/http"
	"net/url"
	"strings"
)

// GenerateClient contains the methods for the Generate group.
// Don't use this type directly, use NewGenerateClient() instead.
type GenerateClient struct {
	internal       *arm.Client
	subscriptionID string
}

// NewGenerateClient creates a new instance of GenerateClient with the specified values.
//   - subscriptionID - The ID of the target subscription.
//   - credential - used to authorize requests. Usually a credential from azidentity.
//   - options - pass nil to accept the default values.
func NewGenerateClient(subscriptionID string, credential azcore.TokenCredential, options *arm.ClientOptions) (*GenerateClient, error) {
	cl, err := arm.NewClient(moduleName+".GenerateClient", moduleVersion, credential, options)
	if err != nil {
		return nil, err
	}
	client := &GenerateClient{
		subscriptionID: subscriptionID,
		internal:       cl,
	}
	return client, nil
}

// AccessToken - Generate an Azure Video Indexer access token.
// If the operation fails it returns an *azcore.ResponseError type.
//
// Generated from API version 2024-01-01
//   - resourceGroupName - The name of the resource group. The name is case insensitive.
//   - accountName - The name of the Azure Video Indexer account.
//   - options - GenerateClientAccessTokenOptions contains the optional parameters for the GenerateClient.AccessToken method.
func (client *GenerateClient) AccessToken(ctx context.Context, resourceGroupName string, accountName string, options *GenerateClientAccessTokenOptions) (GenerateClientAccessTokenResponse, error) {
	var err error
	req, err := client.accessTokenCreateRequest(ctx, resourceGroupName, accountName, options)
	if err != nil {
		return GenerateClientAccessTokenResponse{}, err
	}
	httpResp, err := client.internal.Pipeline().Do(req)
	if err != nil {
		return GenerateClientAccessTokenResponse{}, err
	}
	if !runtime.HasStatusCode(httpResp, http.StatusOK) {
		err = runtime.NewResponseError(httpResp)
		return GenerateClientAccessTokenResponse{}, err
	}
	resp, err := client.accessTokenHandleResponse(httpResp)
	return resp, err
}

// accessTokenCreateRequest creates the AccessToken request.
func (client *GenerateClient) accessTokenCreateRequest(ctx context.Context, resourceGroupName string, accountName string, options *GenerateClientAccessTokenOptions) (*policy.Request, error) {
	urlPath := "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.VideoIndexer/accounts/{accountName}/generateAccessToken"
	if client.subscriptionID == "" {
		return nil, errors.New("parameter client.subscriptionID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{subscriptionId}", url.PathEscape(client.subscriptionID))
	if resourceGroupName == "" {
		return nil, errors.New("parameter resourceGroupName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{resourceGroupName}", url.PathEscape(resourceGroupName))
	if accountName == "" {
		return nil, errors.New("parameter accountName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{accountName}", url.PathEscape(accountName))
	req, err := runtime.NewRequest(ctx, http.MethodPost, runtime.JoinPaths(client.internal.Endpoint(), urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("api-version", "2024-01-01")
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header["Accept"] = []string{"application/json"}
	if options != nil && options.Parameters != nil {
		if err := runtime.MarshalAsJSON(req, *options.Parameters); err != nil {
			return nil, err
		}
		return req, nil
	}
	return req, nil
}

// accessTokenHandleResponse handles the AccessToken response.
func (client *GenerateClient) accessTokenHandleResponse(resp *http.Response) (GenerateClientAccessTokenResponse, error) {
	result := GenerateClientAccessTokenResponse{}
	if err := runtime.UnmarshalAsJSON(resp, &result.AccessToken); err != nil {
		return GenerateClientAccessTokenResponse{}, err
	}
	return result, nil
}

// RestrictedViewerAccessToken - Generate an Azure Video Indexer restricted viewer access token.
// If the operation fails it returns an *azcore.ResponseError type.
//
// Generated from API version 2024-01-01
//   - resourceGroupName - The name of the resource group. The name is case insensitive.
//   - accountName - The name of the Azure Video Indexer account.
//   - options - GenerateClientRestrictedViewerAccessTokenOptions contains the optional parameters for the GenerateClient.RestrictedViewerAccessToken
//     method.
func (client *GenerateClient) RestrictedViewerAccessToken(ctx context.Context, resourceGroupName string, accountName string, options *GenerateClientRestrictedViewerAccessTokenOptions) (GenerateClientRestrictedViewerAccessTokenResponse, error) {
	var err error
	req, err := client.restrictedViewerAccessTokenCreateRequest(ctx, resourceGroupName, accountName, options)
	if err != nil {
		return GenerateClientRestrictedViewerAccessTokenResponse{}, err
	}
	httpResp, err := client.internal.Pipeline().Do(req)
	if err != nil {
		return GenerateClientRestrictedViewerAccessTokenResponse{}, err
	}
	if !runtime.HasStatusCode(httpResp, http.StatusOK) {
		err = runtime.NewResponseError(httpResp)
		return GenerateClientRestrictedViewerAccessTokenResponse{}, err
	}
	resp, err := client.restrictedViewerAccessTokenHandleResponse(httpResp)
	return resp, err
}

// restrictedViewerAccessTokenCreateRequest creates the RestrictedViewerAccessToken request.
func (client *GenerateClient) restrictedViewerAccessTokenCreateRequest(ctx context.Context, resourceGroupName string, accountName string, options *GenerateClientRestrictedViewerAccessTokenOptions) (*policy.Request, error) {
	urlPath := "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.VideoIndexer/accounts/{accountName}/generateRestrictedViewerAccessToken"
	if client.subscriptionID == "" {
		return nil, errors.New("parameter client.subscriptionID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{subscriptionId}", url.PathEscape(client.subscriptionID))
	if resourceGroupName == "" {
		return nil, errors.New("parameter resourceGroupName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{resourceGroupName}", url.PathEscape(resourceGroupName))
	if accountName == "" {
		return nil, errors.New("parameter accountName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{accountName}", url.PathEscape(accountName))
	req, err := runtime.NewRequest(ctx, http.MethodPost, runtime.JoinPaths(client.internal.Endpoint(), urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("api-version", "2024-01-01")
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header["Accept"] = []string{"application/json"}
	if options != nil && options.Parameters != nil {
		if err := runtime.MarshalAsJSON(req, *options.Parameters); err != nil {
			return nil, err
		}
		return req, nil
	}
	return req, nil
}

// restrictedViewerAccessTokenHandleResponse handles the RestrictedViewerAccessToken response.
func (client *GenerateClient) restrictedViewerAccessTokenHandleResponse(resp *http.Response) (GenerateClientRestrictedViewerAccessTokenResponse, error) {
	result := GenerateClientRestrictedViewerAccessTokenResponse{}
	if err := runtime.UnmarshalAsJSON(resp, &result.AccessToken); err != nil {
		return GenerateClientRestrictedViewerAccessTokenResponse{}, err
	}
	return result, nil
}
