//go:build go1.16
// +build go1.16

// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

package armvideoindexer

import (
	"context"
	"errors"
	"fmt"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/arm"
	armruntime "github.com/Azure/azure-sdk-for-go/sdk/azcore/arm/runtime"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/policy"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/runtime"
	"net/http"
	"net/url"
	"strings"
)

// ClassicAccountsClient contains the methods for the ClassicAccounts group.
// Don't use this type directly, use NewClassicAccountsClient() instead.
type ClassicAccountsClient struct {
	ep string
	pl runtime.Pipeline
}

// NewClassicAccountsClient creates a new instance of ClassicAccountsClient with the specified values.
func NewClassicAccountsClient(credential azcore.TokenCredential, options *arm.ClientOptions) *ClassicAccountsClient {
	cp := arm.ClientOptions{}
	if options != nil {
		cp = *options
	}
	if len(cp.Host) == 0 {
		cp.Host = arm.AzurePublicCloud
	}
	return &ClassicAccountsClient{ep: string(cp.Host), pl: armruntime.NewPipeline(module, version, credential, &cp)}
}

// GetDetails - Gets the properties of an Azure Video Analyzer for Media Classic account.
// If the operation fails it returns one of the following error types.
// - *ErrorResponse, *ErrorResponse, *ErrorResponse, *ErrorResponse, *ErrorResponse
func (client *ClassicAccountsClient) GetDetails(ctx context.Context, location string, accountName string, options *ClassicAccountsGetDetailsOptions) (ClassicAccountsGetDetailsResponse, error) {
	req, err := client.getDetailsCreateRequest(ctx, location, accountName, options)
	if err != nil {
		return ClassicAccountsGetDetailsResponse{}, err
	}
	resp, err := client.pl.Do(req)
	if err != nil {
		return ClassicAccountsGetDetailsResponse{}, err
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {
		return ClassicAccountsGetDetailsResponse{}, client.getDetailsHandleError(resp)
	}
	return client.getDetailsHandleResponse(resp)
}

// getDetailsCreateRequest creates the GetDetails request.
func (client *ClassicAccountsClient) getDetailsCreateRequest(ctx context.Context, location string, accountName string, options *ClassicAccountsGetDetailsOptions) (*policy.Request, error) {
	urlPath := "/providers/Microsoft.VideoIndexer/locations/{location}/classicAccounts/{accountName}"
	if location == "" {
		return nil, errors.New("parameter location cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{location}", url.PathEscape(location))
	if accountName == "" {
		return nil, errors.New("parameter accountName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{accountName}", url.PathEscape(accountName))
	req, err := runtime.NewRequest(ctx, http.MethodGet, runtime.JoinPaths(client.ep, urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("api-version", "2021-11-10-preview")
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header.Set("Accept", "application/json")
	return req, nil
}

// getDetailsHandleResponse handles the GetDetails response.
func (client *ClassicAccountsClient) getDetailsHandleResponse(resp *http.Response) (ClassicAccountsGetDetailsResponse, error) {
	result := ClassicAccountsGetDetailsResponse{RawResponse: resp}
	if err := runtime.UnmarshalAsJSON(resp, &result.ClassicAccount); err != nil {
		return ClassicAccountsGetDetailsResponse{}, runtime.NewResponseError(err, resp)
	}
	return result, nil
}

// getDetailsHandleError handles the GetDetails error response.
func (client *ClassicAccountsClient) getDetailsHandleError(resp *http.Response) error {
	body, err := runtime.Payload(resp)
	if err != nil {
		return runtime.NewResponseError(err, resp)
	}
	errType := ErrorResponse{raw: string(body)}
	if err := runtime.UnmarshalAsJSON(resp, &errType); err != nil {
		return runtime.NewResponseError(fmt.Errorf("%s\n%s", string(body), err), resp)
	}
	return runtime.NewResponseError(&errType, resp)
}
