//go:build go1.18
// +build go1.18

// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

package armvideoindexer

import (
	"context"
	"errors"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/arm"
	armruntime "github.com/Azure/azure-sdk-for-go/sdk/azcore/arm/runtime"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/cloud"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/policy"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/runtime"
	"net/http"
	"net/url"
	"strings"
)

// ClassicAccountsClient contains the methods for the ClassicAccounts group.
// Don't use this type directly, use NewClassicAccountsClient() instead.
type ClassicAccountsClient struct {
	host string
	pl   runtime.Pipeline
}

// NewClassicAccountsClient creates a new instance of ClassicAccountsClient with the specified values.
// credential - used to authorize requests. Usually a credential from azidentity.
// options - pass nil to accept the default values.
func NewClassicAccountsClient(credential azcore.TokenCredential, options *arm.ClientOptions) (*ClassicAccountsClient, error) {
	if options == nil {
		options = &arm.ClientOptions{}
	}
	ep := cloud.AzurePublicCloud.Services[cloud.ResourceManager].Endpoint
	if c, ok := options.Cloud.Services[cloud.ResourceManager]; ok {
		ep = c.Endpoint
	}
	pl, err := armruntime.NewPipeline(moduleName, moduleVersion, credential, runtime.PipelineOptions{}, options)
	if err != nil {
		return nil, err
	}
	client := &ClassicAccountsClient{
		host: ep,
		pl:   pl,
	}
	return client, nil
}

// GetDetails - Gets the properties of an Azure Video Indexer Classic account.
// If the operation fails it returns an *azcore.ResponseError type.
// location - The name of Azure region.
// accountName - The name of the Azure Video Indexer account.
// options - ClassicAccountsClientGetDetailsOptions contains the optional parameters for the ClassicAccountsClient.GetDetails
// method.
func (client *ClassicAccountsClient) GetDetails(ctx context.Context, location string, accountName string, options *ClassicAccountsClientGetDetailsOptions) (ClassicAccountsClientGetDetailsResponse, error) {
	req, err := client.getDetailsCreateRequest(ctx, location, accountName, options)
	if err != nil {
		return ClassicAccountsClientGetDetailsResponse{}, err
	}
	resp, err := client.pl.Do(req)
	if err != nil {
		return ClassicAccountsClientGetDetailsResponse{}, err
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {
		return ClassicAccountsClientGetDetailsResponse{}, runtime.NewResponseError(resp)
	}
	return client.getDetailsHandleResponse(resp)
}

// getDetailsCreateRequest creates the GetDetails request.
func (client *ClassicAccountsClient) getDetailsCreateRequest(ctx context.Context, location string, accountName string, options *ClassicAccountsClientGetDetailsOptions) (*policy.Request, error) {
	urlPath := "/providers/Microsoft.VideoIndexer/locations/{location}/classicAccounts/{accountName}"
	if location == "" {
		return nil, errors.New("parameter location cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{location}", url.PathEscape(location))
	if accountName == "" {
		return nil, errors.New("parameter accountName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{accountName}", url.PathEscape(accountName))
	req, err := runtime.NewRequest(ctx, http.MethodGet, runtime.JoinPaths(client.host, urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("api-version", "2022-04-13-preview")
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header.Set("Accept", "application/json")
	return req, nil
}

// getDetailsHandleResponse handles the GetDetails response.
func (client *ClassicAccountsClient) getDetailsHandleResponse(resp *http.Response) (ClassicAccountsClientGetDetailsResponse, error) {
	result := ClassicAccountsClientGetDetailsResponse{}
	if err := runtime.UnmarshalAsJSON(resp, &result.ClassicAccount); err != nil {
		return ClassicAccountsClientGetDetailsResponse{}, err
	}
	return result, nil
}
