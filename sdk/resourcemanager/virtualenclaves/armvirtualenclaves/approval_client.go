// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) Go Code Generator. DO NOT EDIT.

package armvirtualenclaves

import (
	"context"
	"errors"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/arm"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/policy"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/runtime"
	"net/http"
	"net/url"
	"strings"
)

// ApprovalClient - Approval Interface
// Don't use this type directly, use NewApprovalClient() instead.
type ApprovalClient struct {
	internal *arm.Client
}

// NewApprovalClient creates a new instance of ApprovalClient with the specified values.
//   - credential - used to authorize requests. Usually a credential from azidentity.
//   - options - Contains optional client configuration. Pass nil to accept the default values.
func NewApprovalClient(credential azcore.TokenCredential, options *arm.ClientOptions) (*ApprovalClient, error) {
	cl, err := arm.NewClient(moduleName, moduleVersion, credential, options)
	if err != nil {
		return nil, err
	}
	client := &ApprovalClient{
		internal: cl,
	}
	return client, nil
}

// BeginCreateOrUpdate - Create a ApprovalResource
// If the operation fails it returns an *azcore.ResponseError type.
//
// Generated from API version 2025-05-01-preview
//   - resourceURI - The fully qualified Azure Resource manager identifier of the resource.
//   - approvalName - The name of the approvals resource.
//   - resource - Resource create parameters.
//   - options - ApprovalClientBeginCreateOrUpdateOptions contains the optional parameters for the ApprovalClient.BeginCreateOrUpdate
//     method.
func (client *ApprovalClient) BeginCreateOrUpdate(ctx context.Context, resourceURI string, approvalName string, resource ApprovalResource, options *ApprovalClientBeginCreateOrUpdateOptions) (*runtime.Poller[ApprovalClientCreateOrUpdateResponse], error) {
	if options == nil || options.ResumeToken == "" {
		resp, err := client.createOrUpdate(ctx, resourceURI, approvalName, resource, options)
		if err != nil {
			return nil, err
		}
		poller, err := runtime.NewPoller(resp, client.internal.Pipeline(), &runtime.NewPollerOptions[ApprovalClientCreateOrUpdateResponse]{
			FinalStateVia: runtime.FinalStateViaAzureAsyncOp,
			Tracer:        client.internal.Tracer(),
		})
		return poller, err
	} else {
		return runtime.NewPollerFromResumeToken(options.ResumeToken, client.internal.Pipeline(), &runtime.NewPollerFromResumeTokenOptions[ApprovalClientCreateOrUpdateResponse]{
			Tracer: client.internal.Tracer(),
		})
	}
}

// CreateOrUpdate - Create a ApprovalResource
// If the operation fails it returns an *azcore.ResponseError type.
//
// Generated from API version 2025-05-01-preview
func (client *ApprovalClient) createOrUpdate(ctx context.Context, resourceURI string, approvalName string, resource ApprovalResource, options *ApprovalClientBeginCreateOrUpdateOptions) (*http.Response, error) {
	var err error
	const operationName = "ApprovalClient.BeginCreateOrUpdate"
	ctx = context.WithValue(ctx, runtime.CtxAPINameKey{}, operationName)
	ctx, endSpan := runtime.StartSpan(ctx, operationName, client.internal.Tracer(), nil)
	defer func() { endSpan(err) }()
	req, err := client.createOrUpdateCreateRequest(ctx, resourceURI, approvalName, resource, options)
	if err != nil {
		return nil, err
	}
	httpResp, err := client.internal.Pipeline().Do(req)
	if err != nil {
		return nil, err
	}
	if !runtime.HasStatusCode(httpResp, http.StatusOK, http.StatusCreated) {
		err = runtime.NewResponseError(httpResp)
		return nil, err
	}
	return httpResp, nil
}

// createOrUpdateCreateRequest creates the CreateOrUpdate request.
func (client *ApprovalClient) createOrUpdateCreateRequest(ctx context.Context, resourceURI string, approvalName string, resource ApprovalResource, _ *ApprovalClientBeginCreateOrUpdateOptions) (*policy.Request, error) {
	urlPath := "/{resourceUri}/providers/Microsoft.Mission/approvals/{approvalName}"
	if resourceURI == "" {
		return nil, errors.New("parameter resourceURI cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{resourceUri}", resourceURI)
	if approvalName == "" {
		return nil, errors.New("parameter approvalName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{approvalName}", url.PathEscape(approvalName))
	req, err := runtime.NewRequest(ctx, http.MethodPut, runtime.JoinPaths(client.internal.Endpoint(), urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("api-version", "2025-05-01-preview")
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header["Accept"] = []string{"application/json"}
	req.Raw().Header["Content-Type"] = []string{"application/json"}
	if err := runtime.MarshalAsJSON(req, resource); err != nil {
		return nil, err
	}
	return req, nil
}

// BeginDelete - Delete a ApprovalResource
// If the operation fails it returns an *azcore.ResponseError type.
//
// Generated from API version 2025-05-01-preview
//   - resourceURI - The fully qualified Azure Resource manager identifier of the resource.
//   - approvalName - The name of the approvals resource.
//   - options - ApprovalClientBeginDeleteOptions contains the optional parameters for the ApprovalClient.BeginDelete method.
func (client *ApprovalClient) BeginDelete(ctx context.Context, resourceURI string, approvalName string, options *ApprovalClientBeginDeleteOptions) (*runtime.Poller[ApprovalClientDeleteResponse], error) {
	if options == nil || options.ResumeToken == "" {
		resp, err := client.deleteOperation(ctx, resourceURI, approvalName, options)
		if err != nil {
			return nil, err
		}
		poller, err := runtime.NewPoller(resp, client.internal.Pipeline(), &runtime.NewPollerOptions[ApprovalClientDeleteResponse]{
			Tracer: client.internal.Tracer(),
		})
		return poller, err
	} else {
		return runtime.NewPollerFromResumeToken(options.ResumeToken, client.internal.Pipeline(), &runtime.NewPollerFromResumeTokenOptions[ApprovalClientDeleteResponse]{
			Tracer: client.internal.Tracer(),
		})
	}
}

// Delete - Delete a ApprovalResource
// If the operation fails it returns an *azcore.ResponseError type.
//
// Generated from API version 2025-05-01-preview
func (client *ApprovalClient) deleteOperation(ctx context.Context, resourceURI string, approvalName string, options *ApprovalClientBeginDeleteOptions) (*http.Response, error) {
	var err error
	const operationName = "ApprovalClient.BeginDelete"
	ctx = context.WithValue(ctx, runtime.CtxAPINameKey{}, operationName)
	ctx, endSpan := runtime.StartSpan(ctx, operationName, client.internal.Tracer(), nil)
	defer func() { endSpan(err) }()
	req, err := client.deleteCreateRequest(ctx, resourceURI, approvalName, options)
	if err != nil {
		return nil, err
	}
	httpResp, err := client.internal.Pipeline().Do(req)
	if err != nil {
		return nil, err
	}
	if !runtime.HasStatusCode(httpResp, http.StatusAccepted, http.StatusNoContent) {
		err = runtime.NewResponseError(httpResp)
		return nil, err
	}
	return httpResp, nil
}

// deleteCreateRequest creates the Delete request.
func (client *ApprovalClient) deleteCreateRequest(ctx context.Context, resourceURI string, approvalName string, _ *ApprovalClientBeginDeleteOptions) (*policy.Request, error) {
	urlPath := "/{resourceUri}/providers/Microsoft.Mission/approvals/{approvalName}"
	if resourceURI == "" {
		return nil, errors.New("parameter resourceURI cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{resourceUri}", resourceURI)
	if approvalName == "" {
		return nil, errors.New("parameter approvalName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{approvalName}", url.PathEscape(approvalName))
	req, err := runtime.NewRequest(ctx, http.MethodDelete, runtime.JoinPaths(client.internal.Endpoint(), urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("api-version", "2025-05-01-preview")
	req.Raw().URL.RawQuery = reqQP.Encode()
	return req, nil
}

// Get - Get a ApprovalResource
// If the operation fails it returns an *azcore.ResponseError type.
//
// Generated from API version 2025-05-01-preview
//   - resourceURI - The fully qualified Azure Resource manager identifier of the resource.
//   - approvalName - The name of the approvals resource.
//   - options - ApprovalClientGetOptions contains the optional parameters for the ApprovalClient.Get method.
func (client *ApprovalClient) Get(ctx context.Context, resourceURI string, approvalName string, options *ApprovalClientGetOptions) (ApprovalClientGetResponse, error) {
	var err error
	const operationName = "ApprovalClient.Get"
	ctx = context.WithValue(ctx, runtime.CtxAPINameKey{}, operationName)
	ctx, endSpan := runtime.StartSpan(ctx, operationName, client.internal.Tracer(), nil)
	defer func() { endSpan(err) }()
	req, err := client.getCreateRequest(ctx, resourceURI, approvalName, options)
	if err != nil {
		return ApprovalClientGetResponse{}, err
	}
	httpResp, err := client.internal.Pipeline().Do(req)
	if err != nil {
		return ApprovalClientGetResponse{}, err
	}
	if !runtime.HasStatusCode(httpResp, http.StatusOK) {
		err = runtime.NewResponseError(httpResp)
		return ApprovalClientGetResponse{}, err
	}
	resp, err := client.getHandleResponse(httpResp)
	return resp, err
}

// getCreateRequest creates the Get request.
func (client *ApprovalClient) getCreateRequest(ctx context.Context, resourceURI string, approvalName string, _ *ApprovalClientGetOptions) (*policy.Request, error) {
	urlPath := "/{resourceUri}/providers/Microsoft.Mission/approvals/{approvalName}"
	if resourceURI == "" {
		return nil, errors.New("parameter resourceURI cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{resourceUri}", resourceURI)
	if approvalName == "" {
		return nil, errors.New("parameter approvalName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{approvalName}", url.PathEscape(approvalName))
	req, err := runtime.NewRequest(ctx, http.MethodGet, runtime.JoinPaths(client.internal.Endpoint(), urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("api-version", "2025-05-01-preview")
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header["Accept"] = []string{"application/json"}
	return req, nil
}

// getHandleResponse handles the Get response.
func (client *ApprovalClient) getHandleResponse(resp *http.Response) (ApprovalClientGetResponse, error) {
	result := ApprovalClientGetResponse{}
	if err := runtime.UnmarshalAsJSON(resp, &result.ApprovalResource); err != nil {
		return ApprovalClientGetResponse{}, err
	}
	return result, nil
}

// NewListByParentPager - List ApprovalResource resources by parent
//
// Generated from API version 2025-05-01-preview
//   - resourceURI - The fully qualified Azure Resource manager identifier of the resource.
//   - options - ApprovalClientListByParentOptions contains the optional parameters for the ApprovalClient.NewListByParentPager
//     method.
func (client *ApprovalClient) NewListByParentPager(resourceURI string, options *ApprovalClientListByParentOptions) *runtime.Pager[ApprovalClientListByParentResponse] {
	return runtime.NewPager(runtime.PagingHandler[ApprovalClientListByParentResponse]{
		More: func(page ApprovalClientListByParentResponse) bool {
			return page.NextLink != nil && len(*page.NextLink) > 0
		},
		Fetcher: func(ctx context.Context, page *ApprovalClientListByParentResponse) (ApprovalClientListByParentResponse, error) {
			ctx = context.WithValue(ctx, runtime.CtxAPINameKey{}, "ApprovalClient.NewListByParentPager")
			nextLink := ""
			if page != nil {
				nextLink = *page.NextLink
			}
			resp, err := runtime.FetcherForNextLink(ctx, client.internal.Pipeline(), nextLink, func(ctx context.Context) (*policy.Request, error) {
				return client.listByParentCreateRequest(ctx, resourceURI, options)
			}, nil)
			if err != nil {
				return ApprovalClientListByParentResponse{}, err
			}
			return client.listByParentHandleResponse(resp)
		},
		Tracer: client.internal.Tracer(),
	})
}

// listByParentCreateRequest creates the ListByParent request.
func (client *ApprovalClient) listByParentCreateRequest(ctx context.Context, resourceURI string, _ *ApprovalClientListByParentOptions) (*policy.Request, error) {
	urlPath := "/{resourceUri}/providers/Microsoft.Mission/approvals"
	if resourceURI == "" {
		return nil, errors.New("parameter resourceURI cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{resourceUri}", resourceURI)
	req, err := runtime.NewRequest(ctx, http.MethodGet, runtime.JoinPaths(client.internal.Endpoint(), urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("api-version", "2025-05-01-preview")
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header["Accept"] = []string{"application/json"}
	return req, nil
}

// listByParentHandleResponse handles the ListByParent response.
func (client *ApprovalClient) listByParentHandleResponse(resp *http.Response) (ApprovalClientListByParentResponse, error) {
	result := ApprovalClientListByParentResponse{}
	if err := runtime.UnmarshalAsJSON(resp, &result.ApprovalResourceListResult); err != nil {
		return ApprovalClientListByParentResponse{}, err
	}
	return result, nil
}

// BeginNotifyInitiator - Upon receiving approval or rejection from approver, this facilitates actions on approval resource
// If the operation fails it returns an *azcore.ResponseError type.
//
// Generated from API version 2025-05-01-preview
//   - resourceURI - The fully qualified Azure Resource manager identifier of the resource.
//   - approvalName - The name of the approvals resource.
//   - body - The content of the action request
//   - options - ApprovalClientBeginNotifyInitiatorOptions contains the optional parameters for the ApprovalClient.BeginNotifyInitiator
//     method.
func (client *ApprovalClient) BeginNotifyInitiator(ctx context.Context, resourceURI string, approvalName string, body ApprovalActionRequest, options *ApprovalClientBeginNotifyInitiatorOptions) (*runtime.Poller[ApprovalClientNotifyInitiatorResponse], error) {
	if options == nil || options.ResumeToken == "" {
		resp, err := client.notifyInitiator(ctx, resourceURI, approvalName, body, options)
		if err != nil {
			return nil, err
		}
		poller, err := runtime.NewPoller(resp, client.internal.Pipeline(), &runtime.NewPollerOptions[ApprovalClientNotifyInitiatorResponse]{
			Tracer: client.internal.Tracer(),
		})
		return poller, err
	} else {
		return runtime.NewPollerFromResumeToken(options.ResumeToken, client.internal.Pipeline(), &runtime.NewPollerFromResumeTokenOptions[ApprovalClientNotifyInitiatorResponse]{
			Tracer: client.internal.Tracer(),
		})
	}
}

// NotifyInitiator - Upon receiving approval or rejection from approver, this facilitates actions on approval resource
// If the operation fails it returns an *azcore.ResponseError type.
//
// Generated from API version 2025-05-01-preview
func (client *ApprovalClient) notifyInitiator(ctx context.Context, resourceURI string, approvalName string, body ApprovalActionRequest, options *ApprovalClientBeginNotifyInitiatorOptions) (*http.Response, error) {
	var err error
	const operationName = "ApprovalClient.BeginNotifyInitiator"
	ctx = context.WithValue(ctx, runtime.CtxAPINameKey{}, operationName)
	ctx, endSpan := runtime.StartSpan(ctx, operationName, client.internal.Tracer(), nil)
	defer func() { endSpan(err) }()
	req, err := client.notifyInitiatorCreateRequest(ctx, resourceURI, approvalName, body, options)
	if err != nil {
		return nil, err
	}
	httpResp, err := client.internal.Pipeline().Do(req)
	if err != nil {
		return nil, err
	}
	if !runtime.HasStatusCode(httpResp, http.StatusOK, http.StatusAccepted) {
		err = runtime.NewResponseError(httpResp)
		return nil, err
	}
	return httpResp, nil
}

// notifyInitiatorCreateRequest creates the NotifyInitiator request.
func (client *ApprovalClient) notifyInitiatorCreateRequest(ctx context.Context, resourceURI string, approvalName string, body ApprovalActionRequest, _ *ApprovalClientBeginNotifyInitiatorOptions) (*policy.Request, error) {
	urlPath := "/{resourceUri}/providers/Microsoft.Mission/approvals/{approvalName}/notifyInitiator"
	if resourceURI == "" {
		return nil, errors.New("parameter resourceURI cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{resourceUri}", resourceURI)
	if approvalName == "" {
		return nil, errors.New("parameter approvalName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{approvalName}", url.PathEscape(approvalName))
	req, err := runtime.NewRequest(ctx, http.MethodPost, runtime.JoinPaths(client.internal.Endpoint(), urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("api-version", "2025-05-01-preview")
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header["Accept"] = []string{"application/json"}
	req.Raw().Header["Content-Type"] = []string{"application/json"}
	if err := runtime.MarshalAsJSON(req, body); err != nil {
		return nil, err
	}
	return req, nil
}

// BeginUpdate - Update a ApprovalResource
// If the operation fails it returns an *azcore.ResponseError type.
//
// Generated from API version 2025-05-01-preview
//   - resourceURI - The fully qualified Azure Resource manager identifier of the resource.
//   - approvalName - The name of the approvals resource.
//   - properties - The resource properties to be updated.
//   - options - ApprovalClientBeginUpdateOptions contains the optional parameters for the ApprovalClient.BeginUpdate method.
func (client *ApprovalClient) BeginUpdate(ctx context.Context, resourceURI string, approvalName string, properties ApprovalPatchModel, options *ApprovalClientBeginUpdateOptions) (*runtime.Poller[ApprovalClientUpdateResponse], error) {
	if options == nil || options.ResumeToken == "" {
		resp, err := client.update(ctx, resourceURI, approvalName, properties, options)
		if err != nil {
			return nil, err
		}
		poller, err := runtime.NewPoller(resp, client.internal.Pipeline(), &runtime.NewPollerOptions[ApprovalClientUpdateResponse]{
			Tracer: client.internal.Tracer(),
		})
		return poller, err
	} else {
		return runtime.NewPollerFromResumeToken(options.ResumeToken, client.internal.Pipeline(), &runtime.NewPollerFromResumeTokenOptions[ApprovalClientUpdateResponse]{
			Tracer: client.internal.Tracer(),
		})
	}
}

// Update - Update a ApprovalResource
// If the operation fails it returns an *azcore.ResponseError type.
//
// Generated from API version 2025-05-01-preview
func (client *ApprovalClient) update(ctx context.Context, resourceURI string, approvalName string, properties ApprovalPatchModel, options *ApprovalClientBeginUpdateOptions) (*http.Response, error) {
	var err error
	const operationName = "ApprovalClient.BeginUpdate"
	ctx = context.WithValue(ctx, runtime.CtxAPINameKey{}, operationName)
	ctx, endSpan := runtime.StartSpan(ctx, operationName, client.internal.Tracer(), nil)
	defer func() { endSpan(err) }()
	req, err := client.updateCreateRequest(ctx, resourceURI, approvalName, properties, options)
	if err != nil {
		return nil, err
	}
	httpResp, err := client.internal.Pipeline().Do(req)
	if err != nil {
		return nil, err
	}
	if !runtime.HasStatusCode(httpResp, http.StatusOK, http.StatusAccepted) {
		err = runtime.NewResponseError(httpResp)
		return nil, err
	}
	return httpResp, nil
}

// updateCreateRequest creates the Update request.
func (client *ApprovalClient) updateCreateRequest(ctx context.Context, resourceURI string, approvalName string, properties ApprovalPatchModel, _ *ApprovalClientBeginUpdateOptions) (*policy.Request, error) {
	urlPath := "/{resourceUri}/providers/Microsoft.Mission/approvals/{approvalName}"
	if resourceURI == "" {
		return nil, errors.New("parameter resourceURI cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{resourceUri}", resourceURI)
	if approvalName == "" {
		return nil, errors.New("parameter approvalName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{approvalName}", url.PathEscape(approvalName))
	req, err := runtime.NewRequest(ctx, http.MethodPatch, runtime.JoinPaths(client.internal.Endpoint(), urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("api-version", "2025-05-01-preview")
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header["Accept"] = []string{"application/json"}
	req.Raw().Header["Content-Type"] = []string{"application/json"}
	if err := runtime.MarshalAsJSON(req, properties); err != nil {
		return nil, err
	}
	return req, nil
}
