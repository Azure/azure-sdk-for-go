// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) Go Code Generator. DO NOT EDIT.

package armvirtualenclaves

import (
	"context"
	"errors"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/arm"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/policy"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/runtime"
	"net/http"
	"net/url"
	"strings"
)

// CommunityClient - Community Interface
// Don't use this type directly, use NewCommunityClient() instead.
type CommunityClient struct {
	internal       *arm.Client
	subscriptionID string
}

// NewCommunityClient creates a new instance of CommunityClient with the specified values.
//   - subscriptionID - The ID of the target subscription. The value must be an UUID.
//   - credential - used to authorize requests. Usually a credential from azidentity.
//   - options - Contains optional client configuration. Pass nil to accept the default values.
func NewCommunityClient(subscriptionID string, credential azcore.TokenCredential, options *arm.ClientOptions) (*CommunityClient, error) {
	cl, err := arm.NewClient(moduleName, moduleVersion, credential, options)
	if err != nil {
		return nil, err
	}
	client := &CommunityClient{
		subscriptionID: subscriptionID,
		internal:       cl,
	}
	return client, nil
}

// CheckAddressSpaceAvailability - Checks that the IP Address Space to be allocated for this Community is available.
// If the operation fails it returns an *azcore.ResponseError type.
//
// Generated from API version 2025-05-01-preview
//   - resourceGroupName - The name of the resource group. The name is case insensitive.
//   - communityName - The name of the communityResource Resource
//   - checkAddressSpaceAvailabilityRequest - Check IP Address Space request body.
//   - options - CommunityClientCheckAddressSpaceAvailabilityOptions contains the optional parameters for the CommunityClient.CheckAddressSpaceAvailability
//     method.
func (client *CommunityClient) CheckAddressSpaceAvailability(ctx context.Context, resourceGroupName string, communityName string, checkAddressSpaceAvailabilityRequest CheckAddressSpaceAvailabilityRequest, options *CommunityClientCheckAddressSpaceAvailabilityOptions) (CommunityClientCheckAddressSpaceAvailabilityResponse, error) {
	var err error
	const operationName = "CommunityClient.CheckAddressSpaceAvailability"
	ctx = context.WithValue(ctx, runtime.CtxAPINameKey{}, operationName)
	ctx, endSpan := runtime.StartSpan(ctx, operationName, client.internal.Tracer(), nil)
	defer func() { endSpan(err) }()
	req, err := client.checkAddressSpaceAvailabilityCreateRequest(ctx, resourceGroupName, communityName, checkAddressSpaceAvailabilityRequest, options)
	if err != nil {
		return CommunityClientCheckAddressSpaceAvailabilityResponse{}, err
	}
	httpResp, err := client.internal.Pipeline().Do(req)
	if err != nil {
		return CommunityClientCheckAddressSpaceAvailabilityResponse{}, err
	}
	if !runtime.HasStatusCode(httpResp, http.StatusOK) {
		err = runtime.NewResponseError(httpResp)
		return CommunityClientCheckAddressSpaceAvailabilityResponse{}, err
	}
	resp, err := client.checkAddressSpaceAvailabilityHandleResponse(httpResp)
	return resp, err
}

// checkAddressSpaceAvailabilityCreateRequest creates the CheckAddressSpaceAvailability request.
func (client *CommunityClient) checkAddressSpaceAvailabilityCreateRequest(ctx context.Context, resourceGroupName string, communityName string, checkAddressSpaceAvailabilityRequest CheckAddressSpaceAvailabilityRequest, _ *CommunityClientCheckAddressSpaceAvailabilityOptions) (*policy.Request, error) {
	urlPath := "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Mission/communities/{communityName}/checkAddressSpaceAvailability"
	if client.subscriptionID == "" {
		return nil, errors.New("parameter client.subscriptionID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{subscriptionId}", url.PathEscape(client.subscriptionID))
	if resourceGroupName == "" {
		return nil, errors.New("parameter resourceGroupName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{resourceGroupName}", url.PathEscape(resourceGroupName))
	if communityName == "" {
		return nil, errors.New("parameter communityName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{communityName}", url.PathEscape(communityName))
	req, err := runtime.NewRequest(ctx, http.MethodPost, runtime.JoinPaths(client.internal.Endpoint(), urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("api-version", "2025-05-01-preview")
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header["Accept"] = []string{"application/json"}
	req.Raw().Header["Content-Type"] = []string{"application/json"}
	if err := runtime.MarshalAsJSON(req, checkAddressSpaceAvailabilityRequest); err != nil {
		return nil, err
	}
	return req, nil
}

// checkAddressSpaceAvailabilityHandleResponse handles the CheckAddressSpaceAvailability response.
func (client *CommunityClient) checkAddressSpaceAvailabilityHandleResponse(resp *http.Response) (CommunityClientCheckAddressSpaceAvailabilityResponse, error) {
	result := CommunityClientCheckAddressSpaceAvailabilityResponse{}
	if err := runtime.UnmarshalAsJSON(resp, &result.CheckAddressSpaceAvailabilityResponse); err != nil {
		return CommunityClientCheckAddressSpaceAvailabilityResponse{}, err
	}
	return result, nil
}

// BeginCreateOrUpdate - Create a CommunityResource
// If the operation fails it returns an *azcore.ResponseError type.
//
// Generated from API version 2025-05-01-preview
//   - resourceGroupName - The name of the resource group. The name is case insensitive.
//   - communityName - The name of the communityResource Resource
//   - resource - Resource create parameters.
//   - options - CommunityClientBeginCreateOrUpdateOptions contains the optional parameters for the CommunityClient.BeginCreateOrUpdate
//     method.
func (client *CommunityClient) BeginCreateOrUpdate(ctx context.Context, resourceGroupName string, communityName string, resource CommunityResource, options *CommunityClientBeginCreateOrUpdateOptions) (*runtime.Poller[CommunityClientCreateOrUpdateResponse], error) {
	if options == nil || options.ResumeToken == "" {
		resp, err := client.createOrUpdate(ctx, resourceGroupName, communityName, resource, options)
		if err != nil {
			return nil, err
		}
		poller, err := runtime.NewPoller(resp, client.internal.Pipeline(), &runtime.NewPollerOptions[CommunityClientCreateOrUpdateResponse]{
			FinalStateVia: runtime.FinalStateViaAzureAsyncOp,
			Tracer:        client.internal.Tracer(),
		})
		return poller, err
	} else {
		return runtime.NewPollerFromResumeToken(options.ResumeToken, client.internal.Pipeline(), &runtime.NewPollerFromResumeTokenOptions[CommunityClientCreateOrUpdateResponse]{
			Tracer: client.internal.Tracer(),
		})
	}
}

// CreateOrUpdate - Create a CommunityResource
// If the operation fails it returns an *azcore.ResponseError type.
//
// Generated from API version 2025-05-01-preview
func (client *CommunityClient) createOrUpdate(ctx context.Context, resourceGroupName string, communityName string, resource CommunityResource, options *CommunityClientBeginCreateOrUpdateOptions) (*http.Response, error) {
	var err error
	const operationName = "CommunityClient.BeginCreateOrUpdate"
	ctx = context.WithValue(ctx, runtime.CtxAPINameKey{}, operationName)
	ctx, endSpan := runtime.StartSpan(ctx, operationName, client.internal.Tracer(), nil)
	defer func() { endSpan(err) }()
	req, err := client.createOrUpdateCreateRequest(ctx, resourceGroupName, communityName, resource, options)
	if err != nil {
		return nil, err
	}
	httpResp, err := client.internal.Pipeline().Do(req)
	if err != nil {
		return nil, err
	}
	if !runtime.HasStatusCode(httpResp, http.StatusOK, http.StatusCreated) {
		err = runtime.NewResponseError(httpResp)
		return nil, err
	}
	return httpResp, nil
}

// createOrUpdateCreateRequest creates the CreateOrUpdate request.
func (client *CommunityClient) createOrUpdateCreateRequest(ctx context.Context, resourceGroupName string, communityName string, resource CommunityResource, _ *CommunityClientBeginCreateOrUpdateOptions) (*policy.Request, error) {
	urlPath := "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Mission/communities/{communityName}"
	if client.subscriptionID == "" {
		return nil, errors.New("parameter client.subscriptionID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{subscriptionId}", url.PathEscape(client.subscriptionID))
	if resourceGroupName == "" {
		return nil, errors.New("parameter resourceGroupName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{resourceGroupName}", url.PathEscape(resourceGroupName))
	if communityName == "" {
		return nil, errors.New("parameter communityName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{communityName}", url.PathEscape(communityName))
	req, err := runtime.NewRequest(ctx, http.MethodPut, runtime.JoinPaths(client.internal.Endpoint(), urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("api-version", "2025-05-01-preview")
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header["Accept"] = []string{"application/json"}
	req.Raw().Header["Content-Type"] = []string{"application/json"}
	if err := runtime.MarshalAsJSON(req, resource); err != nil {
		return nil, err
	}
	return req, nil
}

// BeginDelete - Delete a CommunityResource
// If the operation fails it returns an *azcore.ResponseError type.
//
// Generated from API version 2025-05-01-preview
//   - resourceGroupName - The name of the resource group. The name is case insensitive.
//   - communityName - The name of the communityResource Resource
//   - options - CommunityClientBeginDeleteOptions contains the optional parameters for the CommunityClient.BeginDelete method.
func (client *CommunityClient) BeginDelete(ctx context.Context, resourceGroupName string, communityName string, options *CommunityClientBeginDeleteOptions) (*runtime.Poller[CommunityClientDeleteResponse], error) {
	if options == nil || options.ResumeToken == "" {
		resp, err := client.deleteOperation(ctx, resourceGroupName, communityName, options)
		if err != nil {
			return nil, err
		}
		poller, err := runtime.NewPoller(resp, client.internal.Pipeline(), &runtime.NewPollerOptions[CommunityClientDeleteResponse]{
			Tracer: client.internal.Tracer(),
		})
		return poller, err
	} else {
		return runtime.NewPollerFromResumeToken(options.ResumeToken, client.internal.Pipeline(), &runtime.NewPollerFromResumeTokenOptions[CommunityClientDeleteResponse]{
			Tracer: client.internal.Tracer(),
		})
	}
}

// Delete - Delete a CommunityResource
// If the operation fails it returns an *azcore.ResponseError type.
//
// Generated from API version 2025-05-01-preview
func (client *CommunityClient) deleteOperation(ctx context.Context, resourceGroupName string, communityName string, options *CommunityClientBeginDeleteOptions) (*http.Response, error) {
	var err error
	const operationName = "CommunityClient.BeginDelete"
	ctx = context.WithValue(ctx, runtime.CtxAPINameKey{}, operationName)
	ctx, endSpan := runtime.StartSpan(ctx, operationName, client.internal.Tracer(), nil)
	defer func() { endSpan(err) }()
	req, err := client.deleteCreateRequest(ctx, resourceGroupName, communityName, options)
	if err != nil {
		return nil, err
	}
	httpResp, err := client.internal.Pipeline().Do(req)
	if err != nil {
		return nil, err
	}
	if !runtime.HasStatusCode(httpResp, http.StatusAccepted, http.StatusNoContent) {
		err = runtime.NewResponseError(httpResp)
		return nil, err
	}
	return httpResp, nil
}

// deleteCreateRequest creates the Delete request.
func (client *CommunityClient) deleteCreateRequest(ctx context.Context, resourceGroupName string, communityName string, _ *CommunityClientBeginDeleteOptions) (*policy.Request, error) {
	urlPath := "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Mission/communities/{communityName}"
	if client.subscriptionID == "" {
		return nil, errors.New("parameter client.subscriptionID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{subscriptionId}", url.PathEscape(client.subscriptionID))
	if resourceGroupName == "" {
		return nil, errors.New("parameter resourceGroupName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{resourceGroupName}", url.PathEscape(resourceGroupName))
	if communityName == "" {
		return nil, errors.New("parameter communityName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{communityName}", url.PathEscape(communityName))
	req, err := runtime.NewRequest(ctx, http.MethodDelete, runtime.JoinPaths(client.internal.Endpoint(), urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("api-version", "2025-05-01-preview")
	req.Raw().URL.RawQuery = reqQP.Encode()
	return req, nil
}

// Get - Get a CommunityResource
// If the operation fails it returns an *azcore.ResponseError type.
//
// Generated from API version 2025-05-01-preview
//   - resourceGroupName - The name of the resource group. The name is case insensitive.
//   - communityName - The name of the communityResource Resource
//   - options - CommunityClientGetOptions contains the optional parameters for the CommunityClient.Get method.
func (client *CommunityClient) Get(ctx context.Context, resourceGroupName string, communityName string, options *CommunityClientGetOptions) (CommunityClientGetResponse, error) {
	var err error
	const operationName = "CommunityClient.Get"
	ctx = context.WithValue(ctx, runtime.CtxAPINameKey{}, operationName)
	ctx, endSpan := runtime.StartSpan(ctx, operationName, client.internal.Tracer(), nil)
	defer func() { endSpan(err) }()
	req, err := client.getCreateRequest(ctx, resourceGroupName, communityName, options)
	if err != nil {
		return CommunityClientGetResponse{}, err
	}
	httpResp, err := client.internal.Pipeline().Do(req)
	if err != nil {
		return CommunityClientGetResponse{}, err
	}
	if !runtime.HasStatusCode(httpResp, http.StatusOK) {
		err = runtime.NewResponseError(httpResp)
		return CommunityClientGetResponse{}, err
	}
	resp, err := client.getHandleResponse(httpResp)
	return resp, err
}

// getCreateRequest creates the Get request.
func (client *CommunityClient) getCreateRequest(ctx context.Context, resourceGroupName string, communityName string, _ *CommunityClientGetOptions) (*policy.Request, error) {
	urlPath := "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Mission/communities/{communityName}"
	if client.subscriptionID == "" {
		return nil, errors.New("parameter client.subscriptionID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{subscriptionId}", url.PathEscape(client.subscriptionID))
	if resourceGroupName == "" {
		return nil, errors.New("parameter resourceGroupName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{resourceGroupName}", url.PathEscape(resourceGroupName))
	if communityName == "" {
		return nil, errors.New("parameter communityName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{communityName}", url.PathEscape(communityName))
	req, err := runtime.NewRequest(ctx, http.MethodGet, runtime.JoinPaths(client.internal.Endpoint(), urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("api-version", "2025-05-01-preview")
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header["Accept"] = []string{"application/json"}
	return req, nil
}

// getHandleResponse handles the Get response.
func (client *CommunityClient) getHandleResponse(resp *http.Response) (CommunityClientGetResponse, error) {
	result := CommunityClientGetResponse{}
	if err := runtime.UnmarshalAsJSON(resp, &result.CommunityResource); err != nil {
		return CommunityClientGetResponse{}, err
	}
	return result, nil
}

// NewListByResourceGroupPager - List CommunityResource resources by resource group
//
// Generated from API version 2025-05-01-preview
//   - resourceGroupName - The name of the resource group. The name is case insensitive.
//   - options - CommunityClientListByResourceGroupOptions contains the optional parameters for the CommunityClient.NewListByResourceGroupPager
//     method.
func (client *CommunityClient) NewListByResourceGroupPager(resourceGroupName string, options *CommunityClientListByResourceGroupOptions) *runtime.Pager[CommunityClientListByResourceGroupResponse] {
	return runtime.NewPager(runtime.PagingHandler[CommunityClientListByResourceGroupResponse]{
		More: func(page CommunityClientListByResourceGroupResponse) bool {
			return page.NextLink != nil && len(*page.NextLink) > 0
		},
		Fetcher: func(ctx context.Context, page *CommunityClientListByResourceGroupResponse) (CommunityClientListByResourceGroupResponse, error) {
			ctx = context.WithValue(ctx, runtime.CtxAPINameKey{}, "CommunityClient.NewListByResourceGroupPager")
			nextLink := ""
			if page != nil {
				nextLink = *page.NextLink
			}
			resp, err := runtime.FetcherForNextLink(ctx, client.internal.Pipeline(), nextLink, func(ctx context.Context) (*policy.Request, error) {
				return client.listByResourceGroupCreateRequest(ctx, resourceGroupName, options)
			}, nil)
			if err != nil {
				return CommunityClientListByResourceGroupResponse{}, err
			}
			return client.listByResourceGroupHandleResponse(resp)
		},
		Tracer: client.internal.Tracer(),
	})
}

// listByResourceGroupCreateRequest creates the ListByResourceGroup request.
func (client *CommunityClient) listByResourceGroupCreateRequest(ctx context.Context, resourceGroupName string, _ *CommunityClientListByResourceGroupOptions) (*policy.Request, error) {
	urlPath := "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Mission/communities"
	if client.subscriptionID == "" {
		return nil, errors.New("parameter client.subscriptionID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{subscriptionId}", url.PathEscape(client.subscriptionID))
	if resourceGroupName == "" {
		return nil, errors.New("parameter resourceGroupName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{resourceGroupName}", url.PathEscape(resourceGroupName))
	req, err := runtime.NewRequest(ctx, http.MethodGet, runtime.JoinPaths(client.internal.Endpoint(), urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("api-version", "2025-05-01-preview")
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header["Accept"] = []string{"application/json"}
	return req, nil
}

// listByResourceGroupHandleResponse handles the ListByResourceGroup response.
func (client *CommunityClient) listByResourceGroupHandleResponse(resp *http.Response) (CommunityClientListByResourceGroupResponse, error) {
	result := CommunityClientListByResourceGroupResponse{}
	if err := runtime.UnmarshalAsJSON(resp, &result.CommunityResourceListResult); err != nil {
		return CommunityClientListByResourceGroupResponse{}, err
	}
	return result, nil
}

// NewListBySubscriptionPager - List CommunityResource resources by subscription ID
//
// Generated from API version 2025-05-01-preview
//   - options - CommunityClientListBySubscriptionOptions contains the optional parameters for the CommunityClient.NewListBySubscriptionPager
//     method.
func (client *CommunityClient) NewListBySubscriptionPager(options *CommunityClientListBySubscriptionOptions) *runtime.Pager[CommunityClientListBySubscriptionResponse] {
	return runtime.NewPager(runtime.PagingHandler[CommunityClientListBySubscriptionResponse]{
		More: func(page CommunityClientListBySubscriptionResponse) bool {
			return page.NextLink != nil && len(*page.NextLink) > 0
		},
		Fetcher: func(ctx context.Context, page *CommunityClientListBySubscriptionResponse) (CommunityClientListBySubscriptionResponse, error) {
			ctx = context.WithValue(ctx, runtime.CtxAPINameKey{}, "CommunityClient.NewListBySubscriptionPager")
			nextLink := ""
			if page != nil {
				nextLink = *page.NextLink
			}
			resp, err := runtime.FetcherForNextLink(ctx, client.internal.Pipeline(), nextLink, func(ctx context.Context) (*policy.Request, error) {
				return client.listBySubscriptionCreateRequest(ctx, options)
			}, nil)
			if err != nil {
				return CommunityClientListBySubscriptionResponse{}, err
			}
			return client.listBySubscriptionHandleResponse(resp)
		},
		Tracer: client.internal.Tracer(),
	})
}

// listBySubscriptionCreateRequest creates the ListBySubscription request.
func (client *CommunityClient) listBySubscriptionCreateRequest(ctx context.Context, _ *CommunityClientListBySubscriptionOptions) (*policy.Request, error) {
	urlPath := "/subscriptions/{subscriptionId}/providers/Microsoft.Mission/communities"
	if client.subscriptionID == "" {
		return nil, errors.New("parameter client.subscriptionID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{subscriptionId}", url.PathEscape(client.subscriptionID))
	req, err := runtime.NewRequest(ctx, http.MethodGet, runtime.JoinPaths(client.internal.Endpoint(), urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("api-version", "2025-05-01-preview")
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header["Accept"] = []string{"application/json"}
	return req, nil
}

// listBySubscriptionHandleResponse handles the ListBySubscription response.
func (client *CommunityClient) listBySubscriptionHandleResponse(resp *http.Response) (CommunityClientListBySubscriptionResponse, error) {
	result := CommunityClientListBySubscriptionResponse{}
	if err := runtime.UnmarshalAsJSON(resp, &result.CommunityResourceListResult); err != nil {
		return CommunityClientListBySubscriptionResponse{}, err
	}
	return result, nil
}

// BeginUpdate - Update a CommunityResource
// If the operation fails it returns an *azcore.ResponseError type.
//
// Generated from API version 2025-05-01-preview
//   - resourceGroupName - The name of the resource group. The name is case insensitive.
//   - communityName - The name of the communityResource Resource
//   - properties - The resource properties to be updated.
//   - options - CommunityClientBeginUpdateOptions contains the optional parameters for the CommunityClient.BeginUpdate method.
func (client *CommunityClient) BeginUpdate(ctx context.Context, resourceGroupName string, communityName string, properties CommunityPatchModel, options *CommunityClientBeginUpdateOptions) (*runtime.Poller[CommunityClientUpdateResponse], error) {
	if options == nil || options.ResumeToken == "" {
		resp, err := client.update(ctx, resourceGroupName, communityName, properties, options)
		if err != nil {
			return nil, err
		}
		poller, err := runtime.NewPoller(resp, client.internal.Pipeline(), &runtime.NewPollerOptions[CommunityClientUpdateResponse]{
			Tracer: client.internal.Tracer(),
		})
		return poller, err
	} else {
		return runtime.NewPollerFromResumeToken(options.ResumeToken, client.internal.Pipeline(), &runtime.NewPollerFromResumeTokenOptions[CommunityClientUpdateResponse]{
			Tracer: client.internal.Tracer(),
		})
	}
}

// Update - Update a CommunityResource
// If the operation fails it returns an *azcore.ResponseError type.
//
// Generated from API version 2025-05-01-preview
func (client *CommunityClient) update(ctx context.Context, resourceGroupName string, communityName string, properties CommunityPatchModel, options *CommunityClientBeginUpdateOptions) (*http.Response, error) {
	var err error
	const operationName = "CommunityClient.BeginUpdate"
	ctx = context.WithValue(ctx, runtime.CtxAPINameKey{}, operationName)
	ctx, endSpan := runtime.StartSpan(ctx, operationName, client.internal.Tracer(), nil)
	defer func() { endSpan(err) }()
	req, err := client.updateCreateRequest(ctx, resourceGroupName, communityName, properties, options)
	if err != nil {
		return nil, err
	}
	httpResp, err := client.internal.Pipeline().Do(req)
	if err != nil {
		return nil, err
	}
	if !runtime.HasStatusCode(httpResp, http.StatusOK, http.StatusAccepted) {
		err = runtime.NewResponseError(httpResp)
		return nil, err
	}
	return httpResp, nil
}

// updateCreateRequest creates the Update request.
func (client *CommunityClient) updateCreateRequest(ctx context.Context, resourceGroupName string, communityName string, properties CommunityPatchModel, _ *CommunityClientBeginUpdateOptions) (*policy.Request, error) {
	urlPath := "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Mission/communities/{communityName}"
	if client.subscriptionID == "" {
		return nil, errors.New("parameter client.subscriptionID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{subscriptionId}", url.PathEscape(client.subscriptionID))
	if resourceGroupName == "" {
		return nil, errors.New("parameter resourceGroupName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{resourceGroupName}", url.PathEscape(resourceGroupName))
	if communityName == "" {
		return nil, errors.New("parameter communityName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{communityName}", url.PathEscape(communityName))
	req, err := runtime.NewRequest(ctx, http.MethodPatch, runtime.JoinPaths(client.internal.Endpoint(), urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("api-version", "2025-05-01-preview")
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header["Accept"] = []string{"application/json"}
	req.Raw().Header["Content-Type"] = []string{"application/json"}
	if err := runtime.MarshalAsJSON(req, properties); err != nil {
		return nil, err
	}
	return req, nil
}
