// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) Go Code Generator. DO NOT EDIT.

package armvirtualenclaves_test

import (
	"context"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/to"
	"github.com/Azure/azure-sdk-for-go/sdk/azidentity"
	"github.com/Azure/azure-sdk-for-go/sdk/resourcemanager/virtualenclaves/armvirtualenclaves"
	"log"
)

// Generated from example definition: 2025-05-01-preview/Community_PostCheckAddressSpaceAvailability.json
func ExampleCommunityClient_CheckAddressSpaceAvailability() {
	cred, err := azidentity.NewDefaultAzureCredential(nil)
	if err != nil {
		log.Fatalf("failed to obtain a credential: %v", err)
	}
	ctx := context.Background()
	clientFactory, err := armvirtualenclaves.NewClientFactory("CA1CB369-DD26-4DB2-9D43-9AFEF0F22093", cred, nil)
	if err != nil {
		log.Fatalf("failed to create client: %v", err)
	}
	res, err := clientFactory.NewCommunityClient().CheckAddressSpaceAvailability(ctx, "rgopenapi", "TestMyCommunity", armvirtualenclaves.CheckAddressSpaceAvailabilityRequest{
		CommunityResourceID: to.Ptr("/subscriptions/c64f6eca-bdc5-4bc2-88d6-f8f1dc23f86c/resourceGroups/TestMyRg/providers/Microsoft.Mission/communities/TestMyCommunity"),
		EnclaveVirtualNetwork: &armvirtualenclaves.EnclaveVirtualNetworkModel{
			NetworkSize:     to.Ptr("small"),
			CustomCidrRange: to.Ptr("10.0.0.0/24"),
			SubnetConfigurations: []*armvirtualenclaves.SubnetConfiguration{
				{
					SubnetName:        to.Ptr("test"),
					NetworkPrefixSize: to.Ptr[int32](26),
				},
			},
			AllowSubnetCommunication: to.Ptr(true),
		},
	}, nil)
	if err != nil {
		log.Fatalf("failed to finish the request: %v", err)
	}
	// You could use response here. We use blank identifier for just demo purposes.
	_ = res
	// If the HTTP response code is 200 as defined in example definition, your response structure would look as follows. Please pay attention that all the values in the output are fake values for just demo purposes.
	// res = armvirtualenclaves.CommunityClientCheckAddressSpaceAvailabilityResponse{
	// 	CheckAddressSpaceAvailabilityResponse: &armvirtualenclaves.CheckAddressSpaceAvailabilityResponse{
	// 		Value: to.Ptr(true),
	// 	},
	// }
}

// Generated from example definition: 2025-05-01-preview/Community_CreateOrUpdate.json
func ExampleCommunityClient_BeginCreateOrUpdate() {
	cred, err := azidentity.NewDefaultAzureCredential(nil)
	if err != nil {
		log.Fatalf("failed to obtain a credential: %v", err)
	}
	ctx := context.Background()
	clientFactory, err := armvirtualenclaves.NewClientFactory("c64f6eca-bdc5-4bc2-88d6-f8f1dc23f86c", cred, nil)
	if err != nil {
		log.Fatalf("failed to create client: %v", err)
	}
	poller, err := clientFactory.NewCommunityClient().BeginCreateOrUpdate(ctx, "rgopenapi", "TestMyCommunity", armvirtualenclaves.CommunityResource{
		Identity: &armvirtualenclaves.ManagedServiceIdentity{
			Type: to.Ptr(armvirtualenclaves.ManagedServiceIdentityTypeSystemAssignedUserAssigned),
			UserAssignedIdentities: map[string]*armvirtualenclaves.UserAssignedIdentity{
				"/subscriptions/subid/resourceGroups/default-azurebatch-japaneast/providers/Microsoft.ManagedIdentity/userAssignedIdentities/id1": {},
			},
		},
		Properties: &armvirtualenclaves.CommunityProperties{
			AddressSpace: to.Ptr("10.0.0.0/24"),
			DNSServers: []*string{
				to.Ptr("azure.net"),
			},
			GovernedServiceList: []*armvirtualenclaves.GovernedServiceItem{
				{
					ServiceID:    to.Ptr(armvirtualenclaves.ServiceIdentifierAKS),
					Option:       to.Ptr(armvirtualenclaves.GovernedServiceItemOptionAllow),
					Enforcement:  to.Ptr(armvirtualenclaves.GovernedServiceItemEnforcementEnabled),
					PolicyAction: to.Ptr(armvirtualenclaves.GovernedServiceItemPolicyActionNone),
				},
				{
					ServiceID:    to.Ptr(armvirtualenclaves.ServiceIdentifierAppService),
					Option:       to.Ptr(armvirtualenclaves.GovernedServiceItemOptionAllow),
					Enforcement:  to.Ptr(armvirtualenclaves.GovernedServiceItemEnforcementEnabled),
					PolicyAction: to.Ptr(armvirtualenclaves.GovernedServiceItemPolicyActionNone),
				},
				{
					ServiceID:    to.Ptr(armvirtualenclaves.ServiceIdentifierContainerRegistry),
					Option:       to.Ptr(armvirtualenclaves.GovernedServiceItemOptionAllow),
					Enforcement:  to.Ptr(armvirtualenclaves.GovernedServiceItemEnforcementEnabled),
					PolicyAction: to.Ptr(armvirtualenclaves.GovernedServiceItemPolicyActionNone),
				},
				{
					ServiceID:    to.Ptr(armvirtualenclaves.ServiceIdentifierCosmosDB),
					Option:       to.Ptr(armvirtualenclaves.GovernedServiceItemOptionAllow),
					Enforcement:  to.Ptr(armvirtualenclaves.GovernedServiceItemEnforcementEnabled),
					PolicyAction: to.Ptr(armvirtualenclaves.GovernedServiceItemPolicyActionNone),
				},
				{
					ServiceID:    to.Ptr(armvirtualenclaves.ServiceIdentifierKeyVault),
					Option:       to.Ptr(armvirtualenclaves.GovernedServiceItemOptionAllow),
					Enforcement:  to.Ptr(armvirtualenclaves.GovernedServiceItemEnforcementEnabled),
					PolicyAction: to.Ptr(armvirtualenclaves.GovernedServiceItemPolicyActionNone),
				},
				{
					ServiceID:    to.Ptr(armvirtualenclaves.ServiceIdentifierMicrosoftSQL),
					Option:       to.Ptr(armvirtualenclaves.GovernedServiceItemOptionAllow),
					Enforcement:  to.Ptr(armvirtualenclaves.GovernedServiceItemEnforcementEnabled),
					PolicyAction: to.Ptr(armvirtualenclaves.GovernedServiceItemPolicyActionNone),
				},
				{
					ServiceID:    to.Ptr(armvirtualenclaves.ServiceIdentifierMonitoring),
					Option:       to.Ptr(armvirtualenclaves.GovernedServiceItemOption("Not Applicable")),
					Enforcement:  to.Ptr(armvirtualenclaves.GovernedServiceItemEnforcementEnabled),
					PolicyAction: to.Ptr(armvirtualenclaves.GovernedServiceItemPolicyActionNone),
				},
				{
					ServiceID:    to.Ptr(armvirtualenclaves.ServiceIdentifierPostgreSQL),
					Option:       to.Ptr(armvirtualenclaves.GovernedServiceItemOptionAllow),
					Enforcement:  to.Ptr(armvirtualenclaves.GovernedServiceItemEnforcementEnabled),
					PolicyAction: to.Ptr(armvirtualenclaves.GovernedServiceItemPolicyActionNone),
				},
				{
					ServiceID:    to.Ptr(armvirtualenclaves.ServiceIdentifierServiceBus),
					Option:       to.Ptr(armvirtualenclaves.GovernedServiceItemOptionAllow),
					Enforcement:  to.Ptr(armvirtualenclaves.GovernedServiceItemEnforcementEnabled),
					PolicyAction: to.Ptr(armvirtualenclaves.GovernedServiceItemPolicyActionNone),
				},
				{
					ServiceID:    to.Ptr(armvirtualenclaves.ServiceIdentifierStorage),
					Option:       to.Ptr(armvirtualenclaves.GovernedServiceItemOptionAllow),
					Enforcement:  to.Ptr(armvirtualenclaves.GovernedServiceItemEnforcementEnabled),
					PolicyAction: to.Ptr(armvirtualenclaves.GovernedServiceItemPolicyActionNone),
				},
				{
					ServiceID:    to.Ptr(armvirtualenclaves.ServiceIdentifierAzureFirewalls),
					Option:       to.Ptr(armvirtualenclaves.GovernedServiceItemOptionAllow),
					Enforcement:  to.Ptr(armvirtualenclaves.GovernedServiceItemEnforcementEnabled),
					PolicyAction: to.Ptr(armvirtualenclaves.GovernedServiceItemPolicyActionNone),
				},
				{
					ServiceID:    to.Ptr(armvirtualenclaves.ServiceIdentifierInsights),
					Option:       to.Ptr(armvirtualenclaves.GovernedServiceItemOptionAllow),
					Enforcement:  to.Ptr(armvirtualenclaves.GovernedServiceItemEnforcementEnabled),
					PolicyAction: to.Ptr(armvirtualenclaves.GovernedServiceItemPolicyActionNone),
				},
				{
					ServiceID:    to.Ptr(armvirtualenclaves.ServiceIdentifierLogic),
					Option:       to.Ptr(armvirtualenclaves.GovernedServiceItemOptionAllow),
					Enforcement:  to.Ptr(armvirtualenclaves.GovernedServiceItemEnforcementEnabled),
					PolicyAction: to.Ptr(armvirtualenclaves.GovernedServiceItemPolicyActionNone),
				},
				{
					ServiceID:    to.Ptr(armvirtualenclaves.ServiceIdentifierPrivateDNSZones),
					Option:       to.Ptr(armvirtualenclaves.GovernedServiceItemOptionAllow),
					Enforcement:  to.Ptr(armvirtualenclaves.GovernedServiceItemEnforcementEnabled),
					PolicyAction: to.Ptr(armvirtualenclaves.GovernedServiceItemPolicyActionNone),
				},
				{
					ServiceID:    to.Ptr(armvirtualenclaves.ServiceIdentifierDataConnectors),
					Option:       to.Ptr(armvirtualenclaves.GovernedServiceItemOptionAllow),
					Enforcement:  to.Ptr(armvirtualenclaves.GovernedServiceItemEnforcementEnabled),
					PolicyAction: to.Ptr(armvirtualenclaves.GovernedServiceItemPolicyActionNone),
				},
			},
			CommunityRoleAssignments: []*armvirtualenclaves.RoleAssignmentItem{
				{
					RoleDefinitionID: to.Ptr("b24988ac-6180-42a0-ab88-20f7382dd24c"),
					Principals: []*armvirtualenclaves.Principal{
						{
							ID:   to.Ptr("01234567-89ab-ef01-2345-0123456789ab"),
							Type: to.Ptr(armvirtualenclaves.PrincipalTypeGroup),
						},
						{
							ID:   to.Ptr("355a6bb0-abc0-4cba-000d-12a345b678c0"),
							Type: to.Ptr(armvirtualenclaves.PrincipalTypeUser),
						},
					},
				},
				{
					RoleDefinitionID: to.Ptr("18d7d88d-d35e-4fb5-a5c3-7773c20a72d9"),
					Principals: []*armvirtualenclaves.Principal{
						{
							ID:   to.Ptr("355a6bb0-abc0-4cba-000d-12a345b678c9"),
							Type: to.Ptr(armvirtualenclaves.PrincipalTypeUser),
						},
					},
				},
			},
			ApprovalSettings: &armvirtualenclaves.ApprovalSettings{
				EndpointCreation:               to.Ptr(armvirtualenclaves.ApprovalPolicyNotRequired),
				EndpointUpdate:                 to.Ptr(armvirtualenclaves.ApprovalPolicyRequired),
				EndpointDeletion:               to.Ptr(armvirtualenclaves.ApprovalPolicyNotRequired),
				ConnectionCreation:             to.Ptr(armvirtualenclaves.ApprovalPolicyRequired),
				ConnectionUpdate:               to.Ptr(armvirtualenclaves.ApprovalPolicyRequired),
				ConnectionDeletion:             to.Ptr(armvirtualenclaves.ApprovalPolicyNotRequired),
				EnclaveCreation:                to.Ptr(armvirtualenclaves.ApprovalPolicyNotRequired),
				EnclaveDeletion:                to.Ptr(armvirtualenclaves.ApprovalPolicyNotRequired),
				MaintenanceMode:                to.Ptr(armvirtualenclaves.ApprovalPolicyNotRequired),
				ServiceCatalogDeployment:       to.Ptr(armvirtualenclaves.ApprovalPolicyNotRequired),
				NotificationOnApprovalCreation: to.Ptr(armvirtualenclaves.ApprovalPolicyNotRequired),
				NotificationOnApprovalAction:   to.Ptr(armvirtualenclaves.ApprovalPolicyNotRequired),
				NotificationOnApprovalDeletion: to.Ptr(armvirtualenclaves.ApprovalPolicyNotRequired),
				MandatoryApprovers: []*armvirtualenclaves.MandatoryApprover{
					{
						ApproverEntraID: to.Ptr("00000000-0000-0000-0000-000000000000"),
					},
				},
				MinimumApproversRequired: to.Ptr[int64](0),
			},
			MaintenanceModeConfiguration: &armvirtualenclaves.MaintenanceModeConfigurationModel{
				Mode: to.Ptr(armvirtualenclaves.MaintenanceModeConfigurationModelModeOff),
				Principals: []*armvirtualenclaves.Principal{
					{
						ID:   to.Ptr("355a6bb0-abc0-4cba-000d-12a345b678c9"),
						Type: to.Ptr(armvirtualenclaves.PrincipalTypeUser),
					},
				},
				Justification: to.Ptr(armvirtualenclaves.MaintenanceModeConfigurationModelJustificationOff),
			},
			FirewallSKU: to.Ptr(armvirtualenclaves.FirewallSKUStandard),
		},
		Tags: map[string]*string{
			"sampletag": to.Ptr("samplevalue"),
		},
		Location: to.Ptr("westcentralus"),
	}, nil)
	if err != nil {
		log.Fatalf("failed to finish the request: %v", err)
	}
	res, err := poller.PollUntilDone(ctx, nil)
	if err != nil {
		log.Fatalf("failed to pull the result: %v", err)
	}
	// You could use response here. We use blank identifier for just demo purposes.
	_ = res
	// If the HTTP response code is 200 as defined in example definition, your response structure would look as follows. Please pay attention that all the values in the output are fake values for just demo purposes.
	// res = armvirtualenclaves.CommunityClientCreateOrUpdateResponse{
	// 	CommunityResource: &armvirtualenclaves.CommunityResource{
	// 		Identity: &armvirtualenclaves.ManagedServiceIdentity{
	// 			Type: to.Ptr(armvirtualenclaves.ManagedServiceIdentityTypeSystemAssignedUserAssigned),
	// 			PrincipalID: to.Ptr("1a2e532b-9900-414c-8600-cfc6126628d7"),
	// 			TenantID: to.Ptr("f686d426-8d16-42db-81b7-ab578e110ccd"),
	// 			UserAssignedIdentities: map[string]*armvirtualenclaves.UserAssignedIdentity{
	// 				"/subscriptions/subid/resourceGroups/default-azurebatch-japaneast/providers/Microsoft.ManagedIdentity/userAssignedIdentities/id1": &armvirtualenclaves.UserAssignedIdentity{
	// 					PrincipalID: to.Ptr("f4aa4954-a564-4933-a7e1-502019d807c2"),
	// 					ClientID: to.Ptr("b82bf757-ee7f-4632-9df1-5e52a720fdd2"),
	// 				},
	// 			},
	// 		},
	// 		Properties: &armvirtualenclaves.CommunityProperties{
	// 			AddressSpace: to.Ptr("10.0.0.0/24"),
	// 			DNSServers: []*string{
	// 				to.Ptr("azure.net"),
	// 			},
	// 			ProvisioningState: to.Ptr(armvirtualenclaves.ProvisioningStateSucceeded),
	// 			ResourceCollection: []*string{
	// 				to.Ptr("/subscriptions/c64f6eca-bdc5-4bc2-88d6-f8f1dc23f86c/resourceGroups/TestMyRg"),
	// 			},
	// 			GovernedServiceList: []*armvirtualenclaves.GovernedServiceItem{
	// 				{
	// 					ServiceID: to.Ptr(armvirtualenclaves.ServiceIdentifierAKS),
	// 					ServiceName: to.Ptr("AKS"),
	// 					Option: to.Ptr(armvirtualenclaves.GovernedServiceItemOptionAllow),
	// 					Enforcement: to.Ptr(armvirtualenclaves.GovernedServiceItemEnforcementEnabled),
	// 					PolicyAction: to.Ptr(armvirtualenclaves.GovernedServiceItemPolicyActionNone),
	// 					Initiatives: []*string{
	// 						to.Ptr("d300338e-65d1-4be3-b18e-fb4ce5715a8f"),
	// 					},
	// 				},
	// 				{
	// 					ServiceID: to.Ptr(armvirtualenclaves.ServiceIdentifierAppService),
	// 					ServiceName: to.Ptr("App Service"),
	// 					Option: to.Ptr(armvirtualenclaves.GovernedServiceItemOptionAllow),
	// 					Enforcement: to.Ptr(armvirtualenclaves.GovernedServiceItemEnforcementEnabled),
	// 					PolicyAction: to.Ptr(armvirtualenclaves.GovernedServiceItemPolicyActionNone),
	// 					Initiatives: []*string{
	// 						to.Ptr("528d78c5-246c-4f26-ade6-d30798705411"),
	// 					},
	// 				},
	// 				{
	// 					ServiceID: to.Ptr(armvirtualenclaves.ServiceIdentifierContainerRegistry),
	// 					ServiceName: to.Ptr("Container Registry"),
	// 					Option: to.Ptr(armvirtualenclaves.GovernedServiceItemOptionAllow),
	// 					Enforcement: to.Ptr(armvirtualenclaves.GovernedServiceItemEnforcementEnabled),
	// 					PolicyAction: to.Ptr(armvirtualenclaves.GovernedServiceItemPolicyActionNone),
	// 					Initiatives: []*string{
	// 						to.Ptr("b3fe25eb-cdc6-475f-96a5-04ac270f630d"),
	// 					},
	// 				},
	// 				{
	// 					ServiceID: to.Ptr(armvirtualenclaves.ServiceIdentifierCosmosDB),
	// 					ServiceName: to.Ptr("CosmosDB"),
	// 					Option: to.Ptr(armvirtualenclaves.GovernedServiceItemOptionAllow),
	// 					Enforcement: to.Ptr(armvirtualenclaves.GovernedServiceItemEnforcementEnabled),
	// 					PolicyAction: to.Ptr(armvirtualenclaves.GovernedServiceItemPolicyActionNone),
	// 					Initiatives: []*string{
	// 						to.Ptr("6bd484ca-ae8d-46cf-9b33-e1feef84bfba"),
	// 					},
	// 				},
	// 				{
	// 					ServiceID: to.Ptr(armvirtualenclaves.ServiceIdentifierKeyVault),
	// 					ServiceName: to.Ptr("Key Vault"),
	// 					Option: to.Ptr(armvirtualenclaves.GovernedServiceItemOptionAllow),
	// 					Enforcement: to.Ptr(armvirtualenclaves.GovernedServiceItemEnforcementEnabled),
	// 					PolicyAction: to.Ptr(armvirtualenclaves.GovernedServiceItemPolicyActionNone),
	// 					Initiatives: []*string{
	// 						to.Ptr("4f4dba0f-a5ee-494b-8df7-f9727dea6f37"),
	// 					},
	// 				},
	// 				{
	// 					ServiceID: to.Ptr(armvirtualenclaves.ServiceIdentifierMicrosoftSQL),
	// 					ServiceName: to.Ptr("Microsoft SQL"),
	// 					Option: to.Ptr(armvirtualenclaves.GovernedServiceItemOptionAllow),
	// 					Enforcement: to.Ptr(armvirtualenclaves.GovernedServiceItemEnforcementEnabled),
	// 					PolicyAction: to.Ptr(armvirtualenclaves.GovernedServiceItemPolicyActionNone),
	// 					Initiatives: []*string{
	// 						to.Ptr("0fbe78a5-1722-4f1b-83a5-89c14151fa60"),
	// 					},
	// 				},
	// 				{
	// 					ServiceID: to.Ptr(armvirtualenclaves.ServiceIdentifierMonitoring),
	// 					ServiceName: to.Ptr("Monitoring"),
	// 					Option: to.Ptr(armvirtualenclaves.GovernedServiceItemOption("Not Applicable")),
	// 					Enforcement: to.Ptr(armvirtualenclaves.GovernedServiceItemEnforcementEnabled),
	// 					PolicyAction: to.Ptr(armvirtualenclaves.GovernedServiceItemPolicyActionNone),
	// 					Initiatives: []*string{
	// 						to.Ptr("0a9ea1cb-7925-47fc-b0fe-8bb0a8190423"),
	// 					},
	// 				},
	// 				{
	// 					ServiceID: to.Ptr(armvirtualenclaves.ServiceIdentifierPostgreSQL),
	// 					ServiceName: to.Ptr("PostgreSQL"),
	// 					Option: to.Ptr(armvirtualenclaves.GovernedServiceItemOptionAllow),
	// 					Enforcement: to.Ptr(armvirtualenclaves.GovernedServiceItemEnforcementEnabled),
	// 					PolicyAction: to.Ptr(armvirtualenclaves.GovernedServiceItemPolicyActionNone),
	// 					Initiatives: []*string{
	// 						to.Ptr("5eaa16b4-81f2-4354-aef3-2d77288e396e"),
	// 					},
	// 				},
	// 				{
	// 					ServiceID: to.Ptr(armvirtualenclaves.ServiceIdentifierServiceBus),
	// 					ServiceName: to.Ptr("Service Bus"),
	// 					Option: to.Ptr(armvirtualenclaves.GovernedServiceItemOptionAllow),
	// 					Enforcement: to.Ptr(armvirtualenclaves.GovernedServiceItemEnforcementEnabled),
	// 					PolicyAction: to.Ptr(armvirtualenclaves.GovernedServiceItemPolicyActionNone),
	// 					Initiatives: []*string{
	// 						to.Ptr("8fcdb3f1-1369-426d-9917-81edfee903ab"),
	// 					},
	// 				},
	// 				{
	// 					ServiceID: to.Ptr(armvirtualenclaves.ServiceIdentifierStorage),
	// 					ServiceName: to.Ptr("Storage"),
	// 					Option: to.Ptr(armvirtualenclaves.GovernedServiceItemOptionAllow),
	// 					Enforcement: to.Ptr(armvirtualenclaves.GovernedServiceItemEnforcementEnabled),
	// 					PolicyAction: to.Ptr(armvirtualenclaves.GovernedServiceItemPolicyActionNone),
	// 					Initiatives: []*string{
	// 						to.Ptr("ca122c06-05f6-4423-9018-ccb523168eb2"),
	// 					},
	// 				},
	// 				{
	// 					ServiceID: to.Ptr(armvirtualenclaves.ServiceIdentifierAzureFirewalls),
	// 					ServiceName: to.Ptr("Azure Firewalls"),
	// 					Option: to.Ptr(armvirtualenclaves.GovernedServiceItemOptionAllow),
	// 					Enforcement: to.Ptr(armvirtualenclaves.GovernedServiceItemEnforcementEnabled),
	// 					PolicyAction: to.Ptr(armvirtualenclaves.GovernedServiceItemPolicyActionNone),
	// 					Initiatives: []*string{
	// 					},
	// 				},
	// 				{
	// 					ServiceID: to.Ptr(armvirtualenclaves.ServiceIdentifierInsights),
	// 					ServiceName: to.Ptr("Insights"),
	// 					Option: to.Ptr(armvirtualenclaves.GovernedServiceItemOptionAllow),
	// 					Enforcement: to.Ptr(armvirtualenclaves.GovernedServiceItemEnforcementEnabled),
	// 					PolicyAction: to.Ptr(armvirtualenclaves.GovernedServiceItemPolicyActionNone),
	// 					Initiatives: []*string{
	// 					},
	// 				},
	// 				{
	// 					ServiceID: to.Ptr(armvirtualenclaves.ServiceIdentifierLogic),
	// 					ServiceName: to.Ptr("Logic"),
	// 					Option: to.Ptr(armvirtualenclaves.GovernedServiceItemOptionAllow),
	// 					Enforcement: to.Ptr(armvirtualenclaves.GovernedServiceItemEnforcementEnabled),
	// 					PolicyAction: to.Ptr(armvirtualenclaves.GovernedServiceItemPolicyActionNone),
	// 					Initiatives: []*string{
	// 					},
	// 				},
	// 				{
	// 					ServiceID: to.Ptr(armvirtualenclaves.ServiceIdentifierPrivateDNSZones),
	// 					ServiceName: to.Ptr("Private DNS Zones"),
	// 					Option: to.Ptr(armvirtualenclaves.GovernedServiceItemOptionAllow),
	// 					Enforcement: to.Ptr(armvirtualenclaves.GovernedServiceItemEnforcementEnabled),
	// 					PolicyAction: to.Ptr(armvirtualenclaves.GovernedServiceItemPolicyActionNone),
	// 					Initiatives: []*string{
	// 					},
	// 				},
	// 				{
	// 					ServiceID: to.Ptr(armvirtualenclaves.ServiceIdentifierDataConnectors),
	// 					ServiceName: to.Ptr("Data Connectors"),
	// 					Option: to.Ptr(armvirtualenclaves.GovernedServiceItemOptionAllow),
	// 					Enforcement: to.Ptr(armvirtualenclaves.GovernedServiceItemEnforcementEnabled),
	// 					PolicyAction: to.Ptr(armvirtualenclaves.GovernedServiceItemPolicyActionNone),
	// 					Initiatives: []*string{
	// 					},
	// 				},
	// 			},
	// 			CommunityRoleAssignments: []*armvirtualenclaves.RoleAssignmentItem{
	// 				{
	// 					RoleDefinitionID: to.Ptr("b24988ac-6180-42a0-ab88-20f7382dd24c"),
	// 					Principals: []*armvirtualenclaves.Principal{
	// 						{
	// 							ID: to.Ptr("01234567-89ab-ef01-2345-0123456789ab"),
	// 							Type: to.Ptr(armvirtualenclaves.PrincipalTypeGroup),
	// 						},
	// 						{
	// 							ID: to.Ptr("355a6bb0-abc0-4cba-000d-12a345b678c0"),
	// 							Type: to.Ptr(armvirtualenclaves.PrincipalTypeUser),
	// 						},
	// 					},
	// 				},
	// 				{
	// 					RoleDefinitionID: to.Ptr("18d7d88d-d35e-4fb5-a5c3-7773c20a72d9"),
	// 					Principals: []*armvirtualenclaves.Principal{
	// 						{
	// 							ID: to.Ptr("355a6bb0-abc0-4cba-000d-12a345b678c9"),
	// 							Type: to.Ptr(armvirtualenclaves.PrincipalTypeUser),
	// 						},
	// 					},
	// 				},
	// 			},
	// 			MaintenanceModeConfiguration: &armvirtualenclaves.MaintenanceModeConfigurationModel{
	// 				Mode: to.Ptr(armvirtualenclaves.MaintenanceModeConfigurationModelModeOff),
	// 				Principals: []*armvirtualenclaves.Principal{
	// 					{
	// 						ID: to.Ptr("355a6bb0-abc0-4cba-000d-12a345b678c9"),
	// 						Type: to.Ptr(armvirtualenclaves.PrincipalTypeUser),
	// 					},
	// 				},
	// 				Justification: to.Ptr(armvirtualenclaves.MaintenanceModeConfigurationModelJustificationOff),
	// 			},
	// 		},
	// 		Tags: map[string]*string{
	// 			"sampletag": to.Ptr("samplevalue"),
	// 		},
	// 		Location: to.Ptr("westcentralus"),
	// 		ID: to.Ptr("/subscriptions/c64f6eca-bdc5-4bc2-88d6-f8f1dc23f86c/resourceGroups/testrg/providers/Microsoft.Mission/communities/TestMyCommunity"),
	// 		Name: to.Ptr("TestMyCommunity"),
	// 		Type: to.Ptr("Microsoft.Mission/communities"),
	// 		SystemData: &armvirtualenclaves.SystemData{
	// 			CreatedBy: to.Ptr("myAlias"),
	// 			CreatedByType: to.Ptr(armvirtualenclaves.CreatedByTypeUser),
	// 			CreatedAt: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2023-03-17T20:43:17.760Z"); return t}()),
	// 			LastModifiedBy: to.Ptr("myAlias"),
	// 			LastModifiedByType: to.Ptr(armvirtualenclaves.CreatedByTypeUser),
	// 			LastModifiedAt: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2023-03-17T20:43:17.760Z"); return t}()),
	// 		},
	// 	},
	// }
}

// Generated from example definition: 2025-05-01-preview/Community_Delete.json
func ExampleCommunityClient_BeginDelete() {
	cred, err := azidentity.NewDefaultAzureCredential(nil)
	if err != nil {
		log.Fatalf("failed to obtain a credential: %v", err)
	}
	ctx := context.Background()
	clientFactory, err := armvirtualenclaves.NewClientFactory("CA1CB369-DD26-4DB2-9D43-9AFEF0F22093", cred, nil)
	if err != nil {
		log.Fatalf("failed to create client: %v", err)
	}
	poller, err := clientFactory.NewCommunityClient().BeginDelete(ctx, "rgopenapi", "TestMyCommunity", nil)
	if err != nil {
		log.Fatalf("failed to finish the request: %v", err)
	}
	_, err = poller.PollUntilDone(ctx, nil)
	if err != nil {
		log.Fatalf("failed to pull the result: %v", err)
	}
}

// Generated from example definition: 2025-05-01-preview/Community_Get.json
func ExampleCommunityClient_Get() {
	cred, err := azidentity.NewDefaultAzureCredential(nil)
	if err != nil {
		log.Fatalf("failed to obtain a credential: %v", err)
	}
	ctx := context.Background()
	clientFactory, err := armvirtualenclaves.NewClientFactory("CA1CB369-DD26-4DB2-9D43-9AFEF0F22093", cred, nil)
	if err != nil {
		log.Fatalf("failed to create client: %v", err)
	}
	res, err := clientFactory.NewCommunityClient().Get(ctx, "rgopenapi", "TestMyCommunity", nil)
	if err != nil {
		log.Fatalf("failed to finish the request: %v", err)
	}
	// You could use response here. We use blank identifier for just demo purposes.
	_ = res
	// If the HTTP response code is 200 as defined in example definition, your response structure would look as follows. Please pay attention that all the values in the output are fake values for just demo purposes.
	// res = armvirtualenclaves.CommunityClientGetResponse{
	// 	CommunityResource: &armvirtualenclaves.CommunityResource{
	// 		Identity: &armvirtualenclaves.ManagedServiceIdentity{
	// 			Type: to.Ptr(armvirtualenclaves.ManagedServiceIdentityTypeSystemAssignedUserAssigned),
	// 			PrincipalID: to.Ptr("1a2e532b-9900-414c-8600-cfc6126628d7"),
	// 			TenantID: to.Ptr("f686d426-8d16-42db-81b7-ab578e110ccd"),
	// 			UserAssignedIdentities: map[string]*armvirtualenclaves.UserAssignedIdentity{
	// 				"/subscriptions/subid/resourceGroups/default-azurebatch-japaneast/providers/Microsoft.ManagedIdentity/userAssignedIdentities/id1": &armvirtualenclaves.UserAssignedIdentity{
	// 					PrincipalID: to.Ptr("f4aa4954-a564-4933-a7e1-502019d807c2"),
	// 					ClientID: to.Ptr("b82bf757-ee7f-4632-9df1-5e52a720fdd2"),
	// 				},
	// 			},
	// 		},
	// 		Properties: &armvirtualenclaves.CommunityProperties{
	// 			AddressSpace: to.Ptr("10.0.0.0/24"),
	// 			DNSServers: []*string{
	// 				to.Ptr("azure.net"),
	// 			},
	// 			ProvisioningState: to.Ptr(armvirtualenclaves.ProvisioningStateSucceeded),
	// 			ManagedOnBehalfOfConfiguration: &armvirtualenclaves.ManagedOnBehalfOfConfiguration{
	// 				MoboBrokerResources: []*armvirtualenclaves.MoboBrokerResource{
	// 					{
	// 						ID: to.Ptr("/subscriptions/c64f6eca-bdc5-4bc2-88d6-f8f1dc23f86c/resourceGroups/TestMyRg/providers/Microsoft.Resources/moboBrokers/bnthrkwfkfeorrzvtdxbfz"),
	// 					},
	// 				},
	// 			},
	// 			ResourceCollection: []*string{
	// 				to.Ptr("/subscriptions/c64f6eca-bdc5-4bc2-88d6-f8f1dc23f86c/resourceGroups/TestMyRg"),
	// 			},
	// 			GovernedServiceList: []*armvirtualenclaves.GovernedServiceItem{
	// 				{
	// 					ServiceID: to.Ptr(armvirtualenclaves.ServiceIdentifierAKS),
	// 					ServiceName: to.Ptr("AKS"),
	// 					Option: to.Ptr(armvirtualenclaves.GovernedServiceItemOptionAllow),
	// 					Enforcement: to.Ptr(armvirtualenclaves.GovernedServiceItemEnforcementEnabled),
	// 					PolicyAction: to.Ptr(armvirtualenclaves.GovernedServiceItemPolicyActionNone),
	// 					Initiatives: []*string{
	// 						to.Ptr("d300338e-65d1-4be3-b18e-fb4ce5715a8f"),
	// 					},
	// 				},
	// 				{
	// 					ServiceID: to.Ptr(armvirtualenclaves.ServiceIdentifierAppService),
	// 					ServiceName: to.Ptr("App Service"),
	// 					Option: to.Ptr(armvirtualenclaves.GovernedServiceItemOptionAllow),
	// 					Enforcement: to.Ptr(armvirtualenclaves.GovernedServiceItemEnforcementEnabled),
	// 					PolicyAction: to.Ptr(armvirtualenclaves.GovernedServiceItemPolicyActionNone),
	// 					Initiatives: []*string{
	// 						to.Ptr("528d78c5-246c-4f26-ade6-d30798705411"),
	// 					},
	// 				},
	// 				{
	// 					ServiceID: to.Ptr(armvirtualenclaves.ServiceIdentifierContainerRegistry),
	// 					ServiceName: to.Ptr("Container Registry"),
	// 					Option: to.Ptr(armvirtualenclaves.GovernedServiceItemOptionAllow),
	// 					Enforcement: to.Ptr(armvirtualenclaves.GovernedServiceItemEnforcementEnabled),
	// 					PolicyAction: to.Ptr(armvirtualenclaves.GovernedServiceItemPolicyActionNone),
	// 					Initiatives: []*string{
	// 						to.Ptr("b3fe25eb-cdc6-475f-96a5-04ac270f630d"),
	// 					},
	// 				},
	// 				{
	// 					ServiceID: to.Ptr(armvirtualenclaves.ServiceIdentifierCosmosDB),
	// 					ServiceName: to.Ptr("CosmosDB"),
	// 					Option: to.Ptr(armvirtualenclaves.GovernedServiceItemOptionAllow),
	// 					Enforcement: to.Ptr(armvirtualenclaves.GovernedServiceItemEnforcementEnabled),
	// 					PolicyAction: to.Ptr(armvirtualenclaves.GovernedServiceItemPolicyActionNone),
	// 					Initiatives: []*string{
	// 						to.Ptr("6bd484ca-ae8d-46cf-9b33-e1feef84bfba"),
	// 					},
	// 				},
	// 				{
	// 					ServiceID: to.Ptr(armvirtualenclaves.ServiceIdentifierKeyVault),
	// 					ServiceName: to.Ptr("Key Vault"),
	// 					Option: to.Ptr(armvirtualenclaves.GovernedServiceItemOptionAllow),
	// 					Enforcement: to.Ptr(armvirtualenclaves.GovernedServiceItemEnforcementEnabled),
	// 					PolicyAction: to.Ptr(armvirtualenclaves.GovernedServiceItemPolicyActionNone),
	// 					Initiatives: []*string{
	// 						to.Ptr("4f4dba0f-a5ee-494b-8df7-f9727dea6f37"),
	// 					},
	// 				},
	// 				{
	// 					ServiceID: to.Ptr(armvirtualenclaves.ServiceIdentifierMicrosoftSQL),
	// 					ServiceName: to.Ptr("Microsoft SQL"),
	// 					Option: to.Ptr(armvirtualenclaves.GovernedServiceItemOptionAllow),
	// 					Enforcement: to.Ptr(armvirtualenclaves.GovernedServiceItemEnforcementEnabled),
	// 					PolicyAction: to.Ptr(armvirtualenclaves.GovernedServiceItemPolicyActionNone),
	// 					Initiatives: []*string{
	// 						to.Ptr("0fbe78a5-1722-4f1b-83a5-89c14151fa60"),
	// 					},
	// 				},
	// 				{
	// 					ServiceID: to.Ptr(armvirtualenclaves.ServiceIdentifierMonitoring),
	// 					ServiceName: to.Ptr("Monitoring"),
	// 					Option: to.Ptr(armvirtualenclaves.GovernedServiceItemOption("Not Applicable")),
	// 					Enforcement: to.Ptr(armvirtualenclaves.GovernedServiceItemEnforcementEnabled),
	// 					PolicyAction: to.Ptr(armvirtualenclaves.GovernedServiceItemPolicyActionNone),
	// 					Initiatives: []*string{
	// 						to.Ptr("0a9ea1cb-7925-47fc-b0fe-8bb0a8190423"),
	// 					},
	// 				},
	// 				{
	// 					ServiceID: to.Ptr(armvirtualenclaves.ServiceIdentifierPostgreSQL),
	// 					ServiceName: to.Ptr("PostgreSQL"),
	// 					Option: to.Ptr(armvirtualenclaves.GovernedServiceItemOptionAllow),
	// 					Enforcement: to.Ptr(armvirtualenclaves.GovernedServiceItemEnforcementEnabled),
	// 					PolicyAction: to.Ptr(armvirtualenclaves.GovernedServiceItemPolicyActionNone),
	// 					Initiatives: []*string{
	// 						to.Ptr("5eaa16b4-81f2-4354-aef3-2d77288e396e"),
	// 					},
	// 				},
	// 				{
	// 					ServiceID: to.Ptr(armvirtualenclaves.ServiceIdentifierServiceBus),
	// 					ServiceName: to.Ptr("Service Bus"),
	// 					Option: to.Ptr(armvirtualenclaves.GovernedServiceItemOptionAllow),
	// 					Enforcement: to.Ptr(armvirtualenclaves.GovernedServiceItemEnforcementEnabled),
	// 					PolicyAction: to.Ptr(armvirtualenclaves.GovernedServiceItemPolicyActionNone),
	// 					Initiatives: []*string{
	// 						to.Ptr("8fcdb3f1-1369-426d-9917-81edfee903ab"),
	// 					},
	// 				},
	// 				{
	// 					ServiceID: to.Ptr(armvirtualenclaves.ServiceIdentifierStorage),
	// 					ServiceName: to.Ptr("Storage"),
	// 					Option: to.Ptr(armvirtualenclaves.GovernedServiceItemOptionAllow),
	// 					Enforcement: to.Ptr(armvirtualenclaves.GovernedServiceItemEnforcementEnabled),
	// 					PolicyAction: to.Ptr(armvirtualenclaves.GovernedServiceItemPolicyActionNone),
	// 					Initiatives: []*string{
	// 						to.Ptr("ca122c06-05f6-4423-9018-ccb523168eb2"),
	// 					},
	// 				},
	// 				{
	// 					ServiceID: to.Ptr(armvirtualenclaves.ServiceIdentifierAzureFirewalls),
	// 					ServiceName: to.Ptr("Azure Firewalls"),
	// 					Option: to.Ptr(armvirtualenclaves.GovernedServiceItemOptionAllow),
	// 					Enforcement: to.Ptr(armvirtualenclaves.GovernedServiceItemEnforcementEnabled),
	// 					PolicyAction: to.Ptr(armvirtualenclaves.GovernedServiceItemPolicyActionNone),
	// 					Initiatives: []*string{
	// 					},
	// 				},
	// 				{
	// 					ServiceID: to.Ptr(armvirtualenclaves.ServiceIdentifierInsights),
	// 					ServiceName: to.Ptr("Insights"),
	// 					Option: to.Ptr(armvirtualenclaves.GovernedServiceItemOptionAllow),
	// 					Enforcement: to.Ptr(armvirtualenclaves.GovernedServiceItemEnforcementEnabled),
	// 					PolicyAction: to.Ptr(armvirtualenclaves.GovernedServiceItemPolicyActionNone),
	// 					Initiatives: []*string{
	// 					},
	// 				},
	// 				{
	// 					ServiceID: to.Ptr(armvirtualenclaves.ServiceIdentifierLogic),
	// 					ServiceName: to.Ptr("Logic"),
	// 					Option: to.Ptr(armvirtualenclaves.GovernedServiceItemOptionAllow),
	// 					Enforcement: to.Ptr(armvirtualenclaves.GovernedServiceItemEnforcementEnabled),
	// 					PolicyAction: to.Ptr(armvirtualenclaves.GovernedServiceItemPolicyActionNone),
	// 					Initiatives: []*string{
	// 					},
	// 				},
	// 				{
	// 					ServiceID: to.Ptr(armvirtualenclaves.ServiceIdentifierPrivateDNSZones),
	// 					ServiceName: to.Ptr("Private DNS Zones"),
	// 					Option: to.Ptr(armvirtualenclaves.GovernedServiceItemOptionAllow),
	// 					Enforcement: to.Ptr(armvirtualenclaves.GovernedServiceItemEnforcementEnabled),
	// 					PolicyAction: to.Ptr(armvirtualenclaves.GovernedServiceItemPolicyActionNone),
	// 					Initiatives: []*string{
	// 					},
	// 				},
	// 				{
	// 					ServiceID: to.Ptr(armvirtualenclaves.ServiceIdentifierDataConnectors),
	// 					ServiceName: to.Ptr("Data Connectors"),
	// 					Option: to.Ptr(armvirtualenclaves.GovernedServiceItemOptionAllow),
	// 					Enforcement: to.Ptr(armvirtualenclaves.GovernedServiceItemEnforcementEnabled),
	// 					PolicyAction: to.Ptr(armvirtualenclaves.GovernedServiceItemPolicyActionNone),
	// 					Initiatives: []*string{
	// 					},
	// 				},
	// 			},
	// 			CommunityRoleAssignments: []*armvirtualenclaves.RoleAssignmentItem{
	// 				{
	// 					RoleDefinitionID: to.Ptr("b24988ac-6180-42a0-ab88-20f7382dd24c"),
	// 					Principals: []*armvirtualenclaves.Principal{
	// 						{
	// 							ID: to.Ptr("01234567-89ab-ef01-2345-0123456789ab"),
	// 							Type: to.Ptr(armvirtualenclaves.PrincipalTypeGroup),
	// 						},
	// 						{
	// 							ID: to.Ptr("355a6bb0-abc0-4cba-000d-12a345b678c0"),
	// 							Type: to.Ptr(armvirtualenclaves.PrincipalTypeUser),
	// 						},
	// 					},
	// 				},
	// 				{
	// 					RoleDefinitionID: to.Ptr("18d7d88d-d35e-4fb5-a5c3-7773c20a72d9"),
	// 					Principals: []*armvirtualenclaves.Principal{
	// 						{
	// 							ID: to.Ptr("355a6bb0-abc0-4cba-000d-12a345b678c9"),
	// 							Type: to.Ptr(armvirtualenclaves.PrincipalTypeUser),
	// 						},
	// 					},
	// 				},
	// 			},
	// 			MaintenanceModeConfiguration: &armvirtualenclaves.MaintenanceModeConfigurationModel{
	// 				Mode: to.Ptr(armvirtualenclaves.MaintenanceModeConfigurationModelModeOff),
	// 				Principals: []*armvirtualenclaves.Principal{
	// 					{
	// 						ID: to.Ptr("355a6bb0-abc0-4cba-000d-12a345b678c9"),
	// 						Type: to.Ptr(armvirtualenclaves.PrincipalTypeUser),
	// 					},
	// 				},
	// 				Justification: to.Ptr(armvirtualenclaves.MaintenanceModeConfigurationModelJustificationOff),
	// 			},
	// 			FirewallSKU: to.Ptr(armvirtualenclaves.FirewallSKUStandard),
	// 		},
	// 		Tags: map[string]*string{
	// 			"sampletag": to.Ptr("samplevalue"),
	// 		},
	// 		Location: to.Ptr("westcentralus"),
	// 		ID: to.Ptr("/subscriptions/c64f6eca-bdc5-4bc2-88d6-f8f1dc23f86c/resourceGroups/testrg/providers/Microsoft.Mission/communities/TestMyCommunity"),
	// 		Name: to.Ptr("TestMyCommunity"),
	// 		Type: to.Ptr("Microsoft.Mission/communities"),
	// 		SystemData: &armvirtualenclaves.SystemData{
	// 			CreatedBy: to.Ptr("myAlias"),
	// 			CreatedByType: to.Ptr(armvirtualenclaves.CreatedByTypeUser),
	// 			CreatedAt: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2023-03-17T20:43:17.760Z"); return t}()),
	// 			LastModifiedBy: to.Ptr("myAlias"),
	// 			LastModifiedByType: to.Ptr(armvirtualenclaves.CreatedByTypeUser),
	// 			LastModifiedAt: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2023-03-17T20:43:17.760Z"); return t}()),
	// 		},
	// 	},
	// }
}

// Generated from example definition: 2025-05-01-preview/Community_ListByResourceGroup.json
func ExampleCommunityClient_NewListByResourceGroupPager() {
	cred, err := azidentity.NewDefaultAzureCredential(nil)
	if err != nil {
		log.Fatalf("failed to obtain a credential: %v", err)
	}
	ctx := context.Background()
	clientFactory, err := armvirtualenclaves.NewClientFactory("CA1CB369-DD26-4DB2-9D43-9AFEF0F22093", cred, nil)
	if err != nil {
		log.Fatalf("failed to create client: %v", err)
	}
	pager := clientFactory.NewCommunityClient().NewListByResourceGroupPager("rgopenapi", nil)
	for pager.More() {
		page, err := pager.NextPage(ctx)
		if err != nil {
			log.Fatalf("failed to advance page: %v", err)
		}
		for _, v := range page.Value {
			// You could use page here. We use blank identifier for just demo purposes.
			_ = v
		}
		// If the HTTP response code is 200 as defined in example definition, your page structure would look as follows. Please pay attention that all the values in the output are fake values for just demo purposes.
		// page = armvirtualenclaves.CommunityClientListByResourceGroupResponse{
		// 	CommunityResourceListResult: armvirtualenclaves.CommunityResourceListResult{
		// 		Value: []*armvirtualenclaves.CommunityResource{
		// 			{
		// 				Identity: &armvirtualenclaves.ManagedServiceIdentity{
		// 					Type: to.Ptr(armvirtualenclaves.ManagedServiceIdentityTypeSystemAssignedUserAssigned),
		// 					PrincipalID: to.Ptr("1a2e532b-9900-414c-8600-cfc6126628d7"),
		// 					TenantID: to.Ptr("f686d426-8d16-42db-81b7-ab578e110ccd"),
		// 					UserAssignedIdentities: map[string]*armvirtualenclaves.UserAssignedIdentity{
		// 						"/subscriptions/subid/resourceGroups/default-azurebatch-japaneast/providers/Microsoft.ManagedIdentity/userAssignedIdentities/id1": &armvirtualenclaves.UserAssignedIdentity{
		// 							PrincipalID: to.Ptr("f4aa4954-a564-4933-a7e1-502019d807c2"),
		// 							ClientID: to.Ptr("b82bf757-ee7f-4632-9df1-5e52a720fdd2"),
		// 						},
		// 					},
		// 				},
		// 				Properties: &armvirtualenclaves.CommunityProperties{
		// 					AddressSpace: to.Ptr("10.0.0.0/24"),
		// 					DNSServers: []*string{
		// 						to.Ptr("azure.net"),
		// 					},
		// 					ProvisioningState: to.Ptr(armvirtualenclaves.ProvisioningStateSucceeded),
		// 					ResourceCollection: []*string{
		// 						to.Ptr("/subscriptions/c64f6eca-bdc5-4bc2-88d6-f8f1dc23f86c/resourceGroups/TestMyRg"),
		// 					},
		// 					GovernedServiceList: []*armvirtualenclaves.GovernedServiceItem{
		// 						{
		// 							ServiceID: to.Ptr(armvirtualenclaves.ServiceIdentifierAKS),
		// 							ServiceName: to.Ptr("AKS"),
		// 							Option: to.Ptr(armvirtualenclaves.GovernedServiceItemOptionAllow),
		// 							Enforcement: to.Ptr(armvirtualenclaves.GovernedServiceItemEnforcementEnabled),
		// 							PolicyAction: to.Ptr(armvirtualenclaves.GovernedServiceItemPolicyActionNone),
		// 							Initiatives: []*string{
		// 								to.Ptr("d300338e-65d1-4be3-b18e-fb4ce5715a8f"),
		// 							},
		// 						},
		// 						{
		// 							ServiceID: to.Ptr(armvirtualenclaves.ServiceIdentifierAppService),
		// 							ServiceName: to.Ptr("App Service"),
		// 							Option: to.Ptr(armvirtualenclaves.GovernedServiceItemOptionAllow),
		// 							Enforcement: to.Ptr(armvirtualenclaves.GovernedServiceItemEnforcementEnabled),
		// 							PolicyAction: to.Ptr(armvirtualenclaves.GovernedServiceItemPolicyActionNone),
		// 							Initiatives: []*string{
		// 								to.Ptr("528d78c5-246c-4f26-ade6-d30798705411"),
		// 							},
		// 						},
		// 						{
		// 							ServiceID: to.Ptr(armvirtualenclaves.ServiceIdentifierContainerRegistry),
		// 							ServiceName: to.Ptr("Container Registry"),
		// 							Option: to.Ptr(armvirtualenclaves.GovernedServiceItemOptionAllow),
		// 							Enforcement: to.Ptr(armvirtualenclaves.GovernedServiceItemEnforcementEnabled),
		// 							PolicyAction: to.Ptr(armvirtualenclaves.GovernedServiceItemPolicyActionNone),
		// 							Initiatives: []*string{
		// 								to.Ptr("b3fe25eb-cdc6-475f-96a5-04ac270f630d"),
		// 							},
		// 						},
		// 						{
		// 							ServiceID: to.Ptr(armvirtualenclaves.ServiceIdentifierCosmosDB),
		// 							ServiceName: to.Ptr("CosmosDB"),
		// 							Option: to.Ptr(armvirtualenclaves.GovernedServiceItemOptionAllow),
		// 							Enforcement: to.Ptr(armvirtualenclaves.GovernedServiceItemEnforcementEnabled),
		// 							PolicyAction: to.Ptr(armvirtualenclaves.GovernedServiceItemPolicyActionNone),
		// 							Initiatives: []*string{
		// 								to.Ptr("6bd484ca-ae8d-46cf-9b33-e1feef84bfba"),
		// 							},
		// 						},
		// 						{
		// 							ServiceID: to.Ptr(armvirtualenclaves.ServiceIdentifierKeyVault),
		// 							ServiceName: to.Ptr("Key Vault"),
		// 							Option: to.Ptr(armvirtualenclaves.GovernedServiceItemOptionAllow),
		// 							Enforcement: to.Ptr(armvirtualenclaves.GovernedServiceItemEnforcementEnabled),
		// 							PolicyAction: to.Ptr(armvirtualenclaves.GovernedServiceItemPolicyActionNone),
		// 							Initiatives: []*string{
		// 								to.Ptr("4f4dba0f-a5ee-494b-8df7-f9727dea6f37"),
		// 							},
		// 						},
		// 						{
		// 							ServiceID: to.Ptr(armvirtualenclaves.ServiceIdentifierMicrosoftSQL),
		// 							ServiceName: to.Ptr("Microsoft SQL"),
		// 							Option: to.Ptr(armvirtualenclaves.GovernedServiceItemOptionAllow),
		// 							Enforcement: to.Ptr(armvirtualenclaves.GovernedServiceItemEnforcementEnabled),
		// 							PolicyAction: to.Ptr(armvirtualenclaves.GovernedServiceItemPolicyActionNone),
		// 							Initiatives: []*string{
		// 								to.Ptr("0fbe78a5-1722-4f1b-83a5-89c14151fa60"),
		// 							},
		// 						},
		// 						{
		// 							ServiceID: to.Ptr(armvirtualenclaves.ServiceIdentifierMonitoring),
		// 							ServiceName: to.Ptr("Monitoring"),
		// 							Option: to.Ptr(armvirtualenclaves.GovernedServiceItemOption("Not Applicable")),
		// 							Enforcement: to.Ptr(armvirtualenclaves.GovernedServiceItemEnforcementEnabled),
		// 							PolicyAction: to.Ptr(armvirtualenclaves.GovernedServiceItemPolicyActionNone),
		// 							Initiatives: []*string{
		// 								to.Ptr("0a9ea1cb-7925-47fc-b0fe-8bb0a8190423"),
		// 							},
		// 						},
		// 						{
		// 							ServiceID: to.Ptr(armvirtualenclaves.ServiceIdentifierPostgreSQL),
		// 							ServiceName: to.Ptr("PostgreSQL"),
		// 							Option: to.Ptr(armvirtualenclaves.GovernedServiceItemOptionAllow),
		// 							Enforcement: to.Ptr(armvirtualenclaves.GovernedServiceItemEnforcementEnabled),
		// 							PolicyAction: to.Ptr(armvirtualenclaves.GovernedServiceItemPolicyActionNone),
		// 							Initiatives: []*string{
		// 								to.Ptr("5eaa16b4-81f2-4354-aef3-2d77288e396e"),
		// 							},
		// 						},
		// 						{
		// 							ServiceID: to.Ptr(armvirtualenclaves.ServiceIdentifierServiceBus),
		// 							ServiceName: to.Ptr("Service Bus"),
		// 							Option: to.Ptr(armvirtualenclaves.GovernedServiceItemOptionAllow),
		// 							Enforcement: to.Ptr(armvirtualenclaves.GovernedServiceItemEnforcementEnabled),
		// 							PolicyAction: to.Ptr(armvirtualenclaves.GovernedServiceItemPolicyActionNone),
		// 							Initiatives: []*string{
		// 								to.Ptr("8fcdb3f1-1369-426d-9917-81edfee903ab"),
		// 							},
		// 						},
		// 						{
		// 							ServiceID: to.Ptr(armvirtualenclaves.ServiceIdentifierStorage),
		// 							ServiceName: to.Ptr("Storage"),
		// 							Option: to.Ptr(armvirtualenclaves.GovernedServiceItemOptionAllow),
		// 							Enforcement: to.Ptr(armvirtualenclaves.GovernedServiceItemEnforcementEnabled),
		// 							PolicyAction: to.Ptr(armvirtualenclaves.GovernedServiceItemPolicyActionNone),
		// 							Initiatives: []*string{
		// 								to.Ptr("ca122c06-05f6-4423-9018-ccb523168eb2"),
		// 							},
		// 						},
		// 						{
		// 							ServiceID: to.Ptr(armvirtualenclaves.ServiceIdentifierAzureFirewalls),
		// 							ServiceName: to.Ptr("Azure Firewalls"),
		// 							Option: to.Ptr(armvirtualenclaves.GovernedServiceItemOptionAllow),
		// 							Enforcement: to.Ptr(armvirtualenclaves.GovernedServiceItemEnforcementEnabled),
		// 							PolicyAction: to.Ptr(armvirtualenclaves.GovernedServiceItemPolicyActionNone),
		// 							Initiatives: []*string{
		// 							},
		// 						},
		// 						{
		// 							ServiceID: to.Ptr(armvirtualenclaves.ServiceIdentifierInsights),
		// 							ServiceName: to.Ptr("Insights"),
		// 							Option: to.Ptr(armvirtualenclaves.GovernedServiceItemOptionAllow),
		// 							Enforcement: to.Ptr(armvirtualenclaves.GovernedServiceItemEnforcementEnabled),
		// 							PolicyAction: to.Ptr(armvirtualenclaves.GovernedServiceItemPolicyActionNone),
		// 							Initiatives: []*string{
		// 							},
		// 						},
		// 						{
		// 							ServiceID: to.Ptr(armvirtualenclaves.ServiceIdentifierLogic),
		// 							ServiceName: to.Ptr("Logic"),
		// 							Option: to.Ptr(armvirtualenclaves.GovernedServiceItemOptionAllow),
		// 							Enforcement: to.Ptr(armvirtualenclaves.GovernedServiceItemEnforcementEnabled),
		// 							PolicyAction: to.Ptr(armvirtualenclaves.GovernedServiceItemPolicyActionNone),
		// 							Initiatives: []*string{
		// 							},
		// 						},
		// 						{
		// 							ServiceID: to.Ptr(armvirtualenclaves.ServiceIdentifierPrivateDNSZones),
		// 							ServiceName: to.Ptr("Private DNS Zones"),
		// 							Option: to.Ptr(armvirtualenclaves.GovernedServiceItemOptionAllow),
		// 							Enforcement: to.Ptr(armvirtualenclaves.GovernedServiceItemEnforcementEnabled),
		// 							PolicyAction: to.Ptr(armvirtualenclaves.GovernedServiceItemPolicyActionNone),
		// 							Initiatives: []*string{
		// 							},
		// 						},
		// 						{
		// 							ServiceID: to.Ptr(armvirtualenclaves.ServiceIdentifierDataConnectors),
		// 							ServiceName: to.Ptr("Data Connectors"),
		// 							Option: to.Ptr(armvirtualenclaves.GovernedServiceItemOptionAllow),
		// 							Enforcement: to.Ptr(armvirtualenclaves.GovernedServiceItemEnforcementEnabled),
		// 							PolicyAction: to.Ptr(armvirtualenclaves.GovernedServiceItemPolicyActionNone),
		// 							Initiatives: []*string{
		// 							},
		// 						},
		// 					},
		// 					CommunityRoleAssignments: []*armvirtualenclaves.RoleAssignmentItem{
		// 						{
		// 							RoleDefinitionID: to.Ptr("b24988ac-6180-42a0-ab88-20f7382dd24c"),
		// 							Principals: []*armvirtualenclaves.Principal{
		// 								{
		// 									ID: to.Ptr("01234567-89ab-ef01-2345-0123456789ab"),
		// 									Type: to.Ptr(armvirtualenclaves.PrincipalTypeGroup),
		// 								},
		// 								{
		// 									ID: to.Ptr("355a6bb0-abc0-4cba-000d-12a345b678c0"),
		// 									Type: to.Ptr(armvirtualenclaves.PrincipalTypeUser),
		// 								},
		// 							},
		// 						},
		// 						{
		// 							RoleDefinitionID: to.Ptr("18d7d88d-d35e-4fb5-a5c3-7773c20a72d9"),
		// 							Principals: []*armvirtualenclaves.Principal{
		// 								{
		// 									ID: to.Ptr("355a6bb0-abc0-4cba-000d-12a345b678c9"),
		// 									Type: to.Ptr(armvirtualenclaves.PrincipalTypeUser),
		// 								},
		// 							},
		// 						},
		// 					},
		// 					MaintenanceModeConfiguration: &armvirtualenclaves.MaintenanceModeConfigurationModel{
		// 						Mode: to.Ptr(armvirtualenclaves.MaintenanceModeConfigurationModelModeOff),
		// 						Principals: []*armvirtualenclaves.Principal{
		// 							{
		// 								ID: to.Ptr("355a6bb0-abc0-4cba-000d-12a345b678c9"),
		// 								Type: to.Ptr(armvirtualenclaves.PrincipalTypeUser),
		// 							},
		// 						},
		// 						Justification: to.Ptr(armvirtualenclaves.MaintenanceModeConfigurationModelJustificationOff),
		// 					},
		// 					FirewallSKU: to.Ptr(armvirtualenclaves.FirewallSKUStandard),
		// 				},
		// 				Tags: map[string]*string{
		// 					"sampletag": to.Ptr("samplevalue"),
		// 				},
		// 				Location: to.Ptr("westcentralus"),
		// 				ID: to.Ptr("/subscriptions/c64f6eca-bdc5-4bc2-88d6-f8f1dc23f86c/resourceGroups/testrg/providers/Microsoft.Mission/communities/TestMyCommunity"),
		// 				Name: to.Ptr("TestMyCommunity"),
		// 				Type: to.Ptr("Microsoft.Mission/communities"),
		// 				SystemData: &armvirtualenclaves.SystemData{
		// 					CreatedBy: to.Ptr("myAlias"),
		// 					CreatedByType: to.Ptr(armvirtualenclaves.CreatedByTypeUser),
		// 					CreatedAt: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2023-03-17T20:43:17.760Z"); return t}()),
		// 					LastModifiedBy: to.Ptr("myAlias"),
		// 					LastModifiedByType: to.Ptr(armvirtualenclaves.CreatedByTypeUser),
		// 					LastModifiedAt: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2023-03-17T20:43:17.760Z"); return t}()),
		// 				},
		// 			},
		// 		},
		// 		NextLink: to.Ptr("https://microsoft.com/a"),
		// 	},
		// }
	}
}

// Generated from example definition: 2025-05-01-preview/Community_ListBySubscription.json
func ExampleCommunityClient_NewListBySubscriptionPager() {
	cred, err := azidentity.NewDefaultAzureCredential(nil)
	if err != nil {
		log.Fatalf("failed to obtain a credential: %v", err)
	}
	ctx := context.Background()
	clientFactory, err := armvirtualenclaves.NewClientFactory("CA1CB369-DD26-4DB2-9D43-9AFEF0F22093", cred, nil)
	if err != nil {
		log.Fatalf("failed to create client: %v", err)
	}
	pager := clientFactory.NewCommunityClient().NewListBySubscriptionPager(nil)
	for pager.More() {
		page, err := pager.NextPage(ctx)
		if err != nil {
			log.Fatalf("failed to advance page: %v", err)
		}
		for _, v := range page.Value {
			// You could use page here. We use blank identifier for just demo purposes.
			_ = v
		}
		// If the HTTP response code is 200 as defined in example definition, your page structure would look as follows. Please pay attention that all the values in the output are fake values for just demo purposes.
		// page = armvirtualenclaves.CommunityClientListBySubscriptionResponse{
		// 	CommunityResourceListResult: armvirtualenclaves.CommunityResourceListResult{
		// 		Value: []*armvirtualenclaves.CommunityResource{
		// 			{
		// 				Identity: &armvirtualenclaves.ManagedServiceIdentity{
		// 					Type: to.Ptr(armvirtualenclaves.ManagedServiceIdentityTypeSystemAssignedUserAssigned),
		// 					PrincipalID: to.Ptr("1a2e532b-9900-414c-8600-cfc6126628d7"),
		// 					TenantID: to.Ptr("f686d426-8d16-42db-81b7-ab578e110ccd"),
		// 					UserAssignedIdentities: map[string]*armvirtualenclaves.UserAssignedIdentity{
		// 						"/subscriptions/subid/resourceGroups/default-azurebatch-japaneast/providers/Microsoft.ManagedIdentity/userAssignedIdentities/id1": &armvirtualenclaves.UserAssignedIdentity{
		// 							PrincipalID: to.Ptr("f4aa4954-a564-4933-a7e1-502019d807c2"),
		// 							ClientID: to.Ptr("b82bf757-ee7f-4632-9df1-5e52a720fdd2"),
		// 						},
		// 					},
		// 				},
		// 				Properties: &armvirtualenclaves.CommunityProperties{
		// 					AddressSpace: to.Ptr("10.0.0.0/24"),
		// 					DNSServers: []*string{
		// 						to.Ptr("azure.net"),
		// 					},
		// 					ProvisioningState: to.Ptr(armvirtualenclaves.ProvisioningStateSucceeded),
		// 					ResourceCollection: []*string{
		// 						to.Ptr("/subscriptions/c64f6eca-bdc5-4bc2-88d6-f8f1dc23f86c/resourceGroups/TestMyRg"),
		// 					},
		// 					GovernedServiceList: []*armvirtualenclaves.GovernedServiceItem{
		// 						{
		// 							ServiceID: to.Ptr(armvirtualenclaves.ServiceIdentifierAKS),
		// 							ServiceName: to.Ptr("AKS"),
		// 							Option: to.Ptr(armvirtualenclaves.GovernedServiceItemOptionAllow),
		// 							Enforcement: to.Ptr(armvirtualenclaves.GovernedServiceItemEnforcementEnabled),
		// 							PolicyAction: to.Ptr(armvirtualenclaves.GovernedServiceItemPolicyActionNone),
		// 							Initiatives: []*string{
		// 								to.Ptr("d300338e-65d1-4be3-b18e-fb4ce5715a8f"),
		// 							},
		// 						},
		// 						{
		// 							ServiceID: to.Ptr(armvirtualenclaves.ServiceIdentifierAppService),
		// 							ServiceName: to.Ptr("App Service"),
		// 							Option: to.Ptr(armvirtualenclaves.GovernedServiceItemOptionAllow),
		// 							Enforcement: to.Ptr(armvirtualenclaves.GovernedServiceItemEnforcementEnabled),
		// 							PolicyAction: to.Ptr(armvirtualenclaves.GovernedServiceItemPolicyActionNone),
		// 							Initiatives: []*string{
		// 								to.Ptr("528d78c5-246c-4f26-ade6-d30798705411"),
		// 							},
		// 						},
		// 						{
		// 							ServiceID: to.Ptr(armvirtualenclaves.ServiceIdentifierContainerRegistry),
		// 							ServiceName: to.Ptr("Container Registry"),
		// 							Option: to.Ptr(armvirtualenclaves.GovernedServiceItemOptionAllow),
		// 							Enforcement: to.Ptr(armvirtualenclaves.GovernedServiceItemEnforcementEnabled),
		// 							PolicyAction: to.Ptr(armvirtualenclaves.GovernedServiceItemPolicyActionNone),
		// 							Initiatives: []*string{
		// 								to.Ptr("b3fe25eb-cdc6-475f-96a5-04ac270f630d"),
		// 							},
		// 						},
		// 						{
		// 							ServiceID: to.Ptr(armvirtualenclaves.ServiceIdentifierCosmosDB),
		// 							ServiceName: to.Ptr("CosmosDB"),
		// 							Option: to.Ptr(armvirtualenclaves.GovernedServiceItemOptionAllow),
		// 							Enforcement: to.Ptr(armvirtualenclaves.GovernedServiceItemEnforcementEnabled),
		// 							PolicyAction: to.Ptr(armvirtualenclaves.GovernedServiceItemPolicyActionNone),
		// 							Initiatives: []*string{
		// 								to.Ptr("6bd484ca-ae8d-46cf-9b33-e1feef84bfba"),
		// 							},
		// 						},
		// 						{
		// 							ServiceID: to.Ptr(armvirtualenclaves.ServiceIdentifierKeyVault),
		// 							ServiceName: to.Ptr("Key Vault"),
		// 							Option: to.Ptr(armvirtualenclaves.GovernedServiceItemOptionAllow),
		// 							Enforcement: to.Ptr(armvirtualenclaves.GovernedServiceItemEnforcementEnabled),
		// 							PolicyAction: to.Ptr(armvirtualenclaves.GovernedServiceItemPolicyActionNone),
		// 							Initiatives: []*string{
		// 								to.Ptr("4f4dba0f-a5ee-494b-8df7-f9727dea6f37"),
		// 							},
		// 						},
		// 						{
		// 							ServiceID: to.Ptr(armvirtualenclaves.ServiceIdentifierMicrosoftSQL),
		// 							ServiceName: to.Ptr("Microsoft SQL"),
		// 							Option: to.Ptr(armvirtualenclaves.GovernedServiceItemOptionAllow),
		// 							Enforcement: to.Ptr(armvirtualenclaves.GovernedServiceItemEnforcementEnabled),
		// 							PolicyAction: to.Ptr(armvirtualenclaves.GovernedServiceItemPolicyActionNone),
		// 							Initiatives: []*string{
		// 								to.Ptr("0fbe78a5-1722-4f1b-83a5-89c14151fa60"),
		// 							},
		// 						},
		// 						{
		// 							ServiceID: to.Ptr(armvirtualenclaves.ServiceIdentifierMonitoring),
		// 							ServiceName: to.Ptr("Monitoring"),
		// 							Option: to.Ptr(armvirtualenclaves.GovernedServiceItemOption("Not Applicable")),
		// 							Enforcement: to.Ptr(armvirtualenclaves.GovernedServiceItemEnforcementEnabled),
		// 							PolicyAction: to.Ptr(armvirtualenclaves.GovernedServiceItemPolicyActionNone),
		// 							Initiatives: []*string{
		// 								to.Ptr("0a9ea1cb-7925-47fc-b0fe-8bb0a8190423"),
		// 							},
		// 						},
		// 						{
		// 							ServiceID: to.Ptr(armvirtualenclaves.ServiceIdentifierPostgreSQL),
		// 							ServiceName: to.Ptr("PostgreSQL"),
		// 							Option: to.Ptr(armvirtualenclaves.GovernedServiceItemOptionAllow),
		// 							Enforcement: to.Ptr(armvirtualenclaves.GovernedServiceItemEnforcementEnabled),
		// 							PolicyAction: to.Ptr(armvirtualenclaves.GovernedServiceItemPolicyActionNone),
		// 							Initiatives: []*string{
		// 								to.Ptr("5eaa16b4-81f2-4354-aef3-2d77288e396e"),
		// 							},
		// 						},
		// 						{
		// 							ServiceID: to.Ptr(armvirtualenclaves.ServiceIdentifierServiceBus),
		// 							ServiceName: to.Ptr("Service Bus"),
		// 							Option: to.Ptr(armvirtualenclaves.GovernedServiceItemOptionAllow),
		// 							Enforcement: to.Ptr(armvirtualenclaves.GovernedServiceItemEnforcementEnabled),
		// 							PolicyAction: to.Ptr(armvirtualenclaves.GovernedServiceItemPolicyActionNone),
		// 							Initiatives: []*string{
		// 								to.Ptr("8fcdb3f1-1369-426d-9917-81edfee903ab"),
		// 							},
		// 						},
		// 						{
		// 							ServiceID: to.Ptr(armvirtualenclaves.ServiceIdentifierStorage),
		// 							ServiceName: to.Ptr("Storage"),
		// 							Option: to.Ptr(armvirtualenclaves.GovernedServiceItemOptionAllow),
		// 							Enforcement: to.Ptr(armvirtualenclaves.GovernedServiceItemEnforcementEnabled),
		// 							PolicyAction: to.Ptr(armvirtualenclaves.GovernedServiceItemPolicyActionNone),
		// 							Initiatives: []*string{
		// 								to.Ptr("ca122c06-05f6-4423-9018-ccb523168eb2"),
		// 							},
		// 						},
		// 						{
		// 							ServiceID: to.Ptr(armvirtualenclaves.ServiceIdentifierAzureFirewalls),
		// 							ServiceName: to.Ptr("Azure Firewalls"),
		// 							Option: to.Ptr(armvirtualenclaves.GovernedServiceItemOptionAllow),
		// 							Enforcement: to.Ptr(armvirtualenclaves.GovernedServiceItemEnforcementEnabled),
		// 							PolicyAction: to.Ptr(armvirtualenclaves.GovernedServiceItemPolicyActionNone),
		// 							Initiatives: []*string{
		// 							},
		// 						},
		// 						{
		// 							ServiceID: to.Ptr(armvirtualenclaves.ServiceIdentifierInsights),
		// 							ServiceName: to.Ptr("Insights"),
		// 							Option: to.Ptr(armvirtualenclaves.GovernedServiceItemOptionAllow),
		// 							Enforcement: to.Ptr(armvirtualenclaves.GovernedServiceItemEnforcementEnabled),
		// 							PolicyAction: to.Ptr(armvirtualenclaves.GovernedServiceItemPolicyActionNone),
		// 							Initiatives: []*string{
		// 							},
		// 						},
		// 						{
		// 							ServiceID: to.Ptr(armvirtualenclaves.ServiceIdentifierLogic),
		// 							ServiceName: to.Ptr("Logic"),
		// 							Option: to.Ptr(armvirtualenclaves.GovernedServiceItemOptionAllow),
		// 							Enforcement: to.Ptr(armvirtualenclaves.GovernedServiceItemEnforcementEnabled),
		// 							PolicyAction: to.Ptr(armvirtualenclaves.GovernedServiceItemPolicyActionNone),
		// 							Initiatives: []*string{
		// 							},
		// 						},
		// 						{
		// 							ServiceID: to.Ptr(armvirtualenclaves.ServiceIdentifierPrivateDNSZones),
		// 							ServiceName: to.Ptr("Private DNS Zones"),
		// 							Option: to.Ptr(armvirtualenclaves.GovernedServiceItemOptionAllow),
		// 							Enforcement: to.Ptr(armvirtualenclaves.GovernedServiceItemEnforcementEnabled),
		// 							PolicyAction: to.Ptr(armvirtualenclaves.GovernedServiceItemPolicyActionNone),
		// 							Initiatives: []*string{
		// 							},
		// 						},
		// 						{
		// 							ServiceID: to.Ptr(armvirtualenclaves.ServiceIdentifierDataConnectors),
		// 							ServiceName: to.Ptr("Data Connectors"),
		// 							Option: to.Ptr(armvirtualenclaves.GovernedServiceItemOptionAllow),
		// 							Enforcement: to.Ptr(armvirtualenclaves.GovernedServiceItemEnforcementEnabled),
		// 							PolicyAction: to.Ptr(armvirtualenclaves.GovernedServiceItemPolicyActionNone),
		// 							Initiatives: []*string{
		// 							},
		// 						},
		// 					},
		// 					CommunityRoleAssignments: []*armvirtualenclaves.RoleAssignmentItem{
		// 						{
		// 							RoleDefinitionID: to.Ptr("b24988ac-6180-42a0-ab88-20f7382dd24c"),
		// 							Principals: []*armvirtualenclaves.Principal{
		// 								{
		// 									ID: to.Ptr("01234567-89ab-ef01-2345-0123456789ab"),
		// 									Type: to.Ptr(armvirtualenclaves.PrincipalTypeGroup),
		// 								},
		// 								{
		// 									ID: to.Ptr("355a6bb0-abc0-4cba-000d-12a345b678c0"),
		// 									Type: to.Ptr(armvirtualenclaves.PrincipalTypeUser),
		// 								},
		// 							},
		// 						},
		// 						{
		// 							RoleDefinitionID: to.Ptr("18d7d88d-d35e-4fb5-a5c3-7773c20a72d9"),
		// 							Principals: []*armvirtualenclaves.Principal{
		// 								{
		// 									ID: to.Ptr("355a6bb0-abc0-4cba-000d-12a345b678c9"),
		// 									Type: to.Ptr(armvirtualenclaves.PrincipalTypeUser),
		// 								},
		// 							},
		// 						},
		// 					},
		// 					MaintenanceModeConfiguration: &armvirtualenclaves.MaintenanceModeConfigurationModel{
		// 						Mode: to.Ptr(armvirtualenclaves.MaintenanceModeConfigurationModelModeOff),
		// 						Principals: []*armvirtualenclaves.Principal{
		// 							{
		// 								ID: to.Ptr("355a6bb0-abc0-4cba-000d-12a345b678c9"),
		// 								Type: to.Ptr(armvirtualenclaves.PrincipalTypeUser),
		// 							},
		// 						},
		// 						Justification: to.Ptr(armvirtualenclaves.MaintenanceModeConfigurationModelJustificationOff),
		// 					},
		// 					FirewallSKU: to.Ptr(armvirtualenclaves.FirewallSKUStandard),
		// 				},
		// 				Tags: map[string]*string{
		// 					"sampletag": to.Ptr("samplevalue"),
		// 				},
		// 				Location: to.Ptr("westcentralus"),
		// 				ID: to.Ptr("/subscriptions/c64f6eca-bdc5-4bc2-88d6-f8f1dc23f86c/resourceGroups/testrg/providers/Microsoft.Mission/communities/TestMyCommunity"),
		// 				Name: to.Ptr("TestMyCommunity"),
		// 				Type: to.Ptr("Microsoft.Mission/communities"),
		// 				SystemData: &armvirtualenclaves.SystemData{
		// 					CreatedBy: to.Ptr("myAlias"),
		// 					CreatedByType: to.Ptr(armvirtualenclaves.CreatedByTypeUser),
		// 					CreatedAt: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2023-03-17T20:43:17.760Z"); return t}()),
		// 					LastModifiedBy: to.Ptr("myAlias"),
		// 					LastModifiedByType: to.Ptr(armvirtualenclaves.CreatedByTypeUser),
		// 					LastModifiedAt: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2023-03-17T20:43:17.760Z"); return t}()),
		// 				},
		// 			},
		// 		},
		// 		NextLink: to.Ptr("https://microsoft.com/a"),
		// 	},
		// }
	}
}

// Generated from example definition: 2025-05-01-preview/Community_Update.json
func ExampleCommunityClient_BeginUpdate() {
	cred, err := azidentity.NewDefaultAzureCredential(nil)
	if err != nil {
		log.Fatalf("failed to obtain a credential: %v", err)
	}
	ctx := context.Background()
	clientFactory, err := armvirtualenclaves.NewClientFactory("CA1CB369-DD26-4DB2-9D43-9AFEF0F22093", cred, nil)
	if err != nil {
		log.Fatalf("failed to create client: %v", err)
	}
	poller, err := clientFactory.NewCommunityClient().BeginUpdate(ctx, "rgopenapi", "TestMyCommunity", armvirtualenclaves.CommunityPatchModel{
		Tags: map[string]*string{
			"sampletag": to.Ptr("samplevalue"),
		},
		Properties: &armvirtualenclaves.CommunityPatchProperties{
			DNSServers: []*string{
				to.Ptr("azure.net"),
			},
			GovernedServiceList: []*armvirtualenclaves.GovernedServiceItem{
				{
					ServiceID:    to.Ptr(armvirtualenclaves.ServiceIdentifierAKS),
					Option:       to.Ptr(armvirtualenclaves.GovernedServiceItemOptionAllow),
					Enforcement:  to.Ptr(armvirtualenclaves.GovernedServiceItemEnforcementEnabled),
					PolicyAction: to.Ptr(armvirtualenclaves.GovernedServiceItemPolicyActionNone),
				},
				{
					ServiceID:    to.Ptr(armvirtualenclaves.ServiceIdentifierAppService),
					Option:       to.Ptr(armvirtualenclaves.GovernedServiceItemOptionAllow),
					Enforcement:  to.Ptr(armvirtualenclaves.GovernedServiceItemEnforcementEnabled),
					PolicyAction: to.Ptr(armvirtualenclaves.GovernedServiceItemPolicyActionNone),
				},
				{
					ServiceID:    to.Ptr(armvirtualenclaves.ServiceIdentifierContainerRegistry),
					Option:       to.Ptr(armvirtualenclaves.GovernedServiceItemOptionAllow),
					Enforcement:  to.Ptr(armvirtualenclaves.GovernedServiceItemEnforcementEnabled),
					PolicyAction: to.Ptr(armvirtualenclaves.GovernedServiceItemPolicyActionNone),
				},
				{
					ServiceID:    to.Ptr(armvirtualenclaves.ServiceIdentifierCosmosDB),
					Option:       to.Ptr(armvirtualenclaves.GovernedServiceItemOptionAllow),
					Enforcement:  to.Ptr(armvirtualenclaves.GovernedServiceItemEnforcementEnabled),
					PolicyAction: to.Ptr(armvirtualenclaves.GovernedServiceItemPolicyActionNone),
				},
				{
					ServiceID:    to.Ptr(armvirtualenclaves.ServiceIdentifierKeyVault),
					Option:       to.Ptr(armvirtualenclaves.GovernedServiceItemOptionAllow),
					Enforcement:  to.Ptr(armvirtualenclaves.GovernedServiceItemEnforcementEnabled),
					PolicyAction: to.Ptr(armvirtualenclaves.GovernedServiceItemPolicyActionNone),
				},
				{
					ServiceID:    to.Ptr(armvirtualenclaves.ServiceIdentifierMicrosoftSQL),
					Option:       to.Ptr(armvirtualenclaves.GovernedServiceItemOptionAllow),
					Enforcement:  to.Ptr(armvirtualenclaves.GovernedServiceItemEnforcementEnabled),
					PolicyAction: to.Ptr(armvirtualenclaves.GovernedServiceItemPolicyActionNone),
				},
				{
					ServiceID:    to.Ptr(armvirtualenclaves.ServiceIdentifierMonitoring),
					Option:       to.Ptr(armvirtualenclaves.GovernedServiceItemOption("Not Applicable")),
					Enforcement:  to.Ptr(armvirtualenclaves.GovernedServiceItemEnforcementEnabled),
					PolicyAction: to.Ptr(armvirtualenclaves.GovernedServiceItemPolicyActionNone),
				},
				{
					ServiceID:    to.Ptr(armvirtualenclaves.ServiceIdentifierPostgreSQL),
					Option:       to.Ptr(armvirtualenclaves.GovernedServiceItemOptionAllow),
					Enforcement:  to.Ptr(armvirtualenclaves.GovernedServiceItemEnforcementEnabled),
					PolicyAction: to.Ptr(armvirtualenclaves.GovernedServiceItemPolicyActionNone),
				},
				{
					ServiceID:    to.Ptr(armvirtualenclaves.ServiceIdentifierServiceBus),
					Option:       to.Ptr(armvirtualenclaves.GovernedServiceItemOptionAllow),
					Enforcement:  to.Ptr(armvirtualenclaves.GovernedServiceItemEnforcementEnabled),
					PolicyAction: to.Ptr(armvirtualenclaves.GovernedServiceItemPolicyActionNone),
				},
				{
					ServiceID:    to.Ptr(armvirtualenclaves.ServiceIdentifierStorage),
					Option:       to.Ptr(armvirtualenclaves.GovernedServiceItemOptionAllow),
					Enforcement:  to.Ptr(armvirtualenclaves.GovernedServiceItemEnforcementEnabled),
					PolicyAction: to.Ptr(armvirtualenclaves.GovernedServiceItemPolicyActionNone),
				},
				{
					ServiceID:    to.Ptr(armvirtualenclaves.ServiceIdentifierAzureFirewalls),
					Option:       to.Ptr(armvirtualenclaves.GovernedServiceItemOptionAllow),
					Enforcement:  to.Ptr(armvirtualenclaves.GovernedServiceItemEnforcementEnabled),
					PolicyAction: to.Ptr(armvirtualenclaves.GovernedServiceItemPolicyActionNone),
				},
				{
					ServiceID:    to.Ptr(armvirtualenclaves.ServiceIdentifierInsights),
					Option:       to.Ptr(armvirtualenclaves.GovernedServiceItemOptionAllow),
					Enforcement:  to.Ptr(armvirtualenclaves.GovernedServiceItemEnforcementEnabled),
					PolicyAction: to.Ptr(armvirtualenclaves.GovernedServiceItemPolicyActionNone),
				},
				{
					ServiceID:    to.Ptr(armvirtualenclaves.ServiceIdentifierLogic),
					Option:       to.Ptr(armvirtualenclaves.GovernedServiceItemOptionAllow),
					Enforcement:  to.Ptr(armvirtualenclaves.GovernedServiceItemEnforcementEnabled),
					PolicyAction: to.Ptr(armvirtualenclaves.GovernedServiceItemPolicyActionNone),
				},
				{
					ServiceID:    to.Ptr(armvirtualenclaves.ServiceIdentifierPrivateDNSZones),
					Option:       to.Ptr(armvirtualenclaves.GovernedServiceItemOptionAllow),
					Enforcement:  to.Ptr(armvirtualenclaves.GovernedServiceItemEnforcementEnabled),
					PolicyAction: to.Ptr(armvirtualenclaves.GovernedServiceItemPolicyActionNone),
				},
				{
					ServiceID:    to.Ptr(armvirtualenclaves.ServiceIdentifierDataConnectors),
					Option:       to.Ptr(armvirtualenclaves.GovernedServiceItemOptionAllow),
					Enforcement:  to.Ptr(armvirtualenclaves.GovernedServiceItemEnforcementEnabled),
					PolicyAction: to.Ptr(armvirtualenclaves.GovernedServiceItemPolicyActionNone),
				},
			},
			CommunityRoleAssignments: []*armvirtualenclaves.RoleAssignmentItem{
				{
					RoleDefinitionID: to.Ptr("b24988ac-6180-42a0-ab88-20f7382dd24c"),
					Principals: []*armvirtualenclaves.Principal{
						{
							ID:   to.Ptr("01234567-89ab-ef01-2345-0123456789ab"),
							Type: to.Ptr(armvirtualenclaves.PrincipalTypeGroup),
						},
						{
							ID:   to.Ptr("355a6bb0-abc0-4cba-000d-12a345b678c0"),
							Type: to.Ptr(armvirtualenclaves.PrincipalTypeUser),
						},
					},
				},
				{
					RoleDefinitionID: to.Ptr("18d7d88d-d35e-4fb5-a5c3-7773c20a72d9"),
					Principals: []*armvirtualenclaves.Principal{
						{
							ID:   to.Ptr("355a6bb0-abc0-4cba-000d-12a345b678c9"),
							Type: to.Ptr(armvirtualenclaves.PrincipalTypeUser),
						},
					},
				},
			},
		},
	}, nil)
	if err != nil {
		log.Fatalf("failed to finish the request: %v", err)
	}
	res, err := poller.PollUntilDone(ctx, nil)
	if err != nil {
		log.Fatalf("failed to pull the result: %v", err)
	}
	// You could use response here. We use blank identifier for just demo purposes.
	_ = res
	// If the HTTP response code is 200 as defined in example definition, your response structure would look as follows. Please pay attention that all the values in the output are fake values for just demo purposes.
	// res = armvirtualenclaves.CommunityClientUpdateResponse{
	// 	CommunityResource: &armvirtualenclaves.CommunityResource{
	// 		Identity: &armvirtualenclaves.ManagedServiceIdentity{
	// 			Type: to.Ptr(armvirtualenclaves.ManagedServiceIdentityTypeSystemAssignedUserAssigned),
	// 			PrincipalID: to.Ptr("1a2e532b-9900-414c-8600-cfc6126628d7"),
	// 			TenantID: to.Ptr("f686d426-8d16-42db-81b7-ab578e110ccd"),
	// 			UserAssignedIdentities: map[string]*armvirtualenclaves.UserAssignedIdentity{
	// 				"/subscriptions/subid/resourceGroups/default-azurebatch-japaneast/providers/Microsoft.ManagedIdentity/userAssignedIdentities/id1": &armvirtualenclaves.UserAssignedIdentity{
	// 					PrincipalID: to.Ptr("f4aa4954-a564-4933-a7e1-502019d807c2"),
	// 					ClientID: to.Ptr("b82bf757-ee7f-4632-9df1-5e52a720fdd2"),
	// 				},
	// 			},
	// 		},
	// 		Properties: &armvirtualenclaves.CommunityProperties{
	// 			AddressSpace: to.Ptr("10.0.0.0/24"),
	// 			DNSServers: []*string{
	// 				to.Ptr("azure.net"),
	// 			},
	// 			ProvisioningState: to.Ptr(armvirtualenclaves.ProvisioningStateSucceeded),
	// 			ResourceCollection: []*string{
	// 				to.Ptr("/subscriptions/c64f6eca-bdc5-4bc2-88d6-f8f1dc23f86c/resourceGroups/TestMyRg"),
	// 			},
	// 			GovernedServiceList: []*armvirtualenclaves.GovernedServiceItem{
	// 				{
	// 					ServiceID: to.Ptr(armvirtualenclaves.ServiceIdentifierAKS),
	// 					ServiceName: to.Ptr("AKS"),
	// 					Option: to.Ptr(armvirtualenclaves.GovernedServiceItemOptionAllow),
	// 					Enforcement: to.Ptr(armvirtualenclaves.GovernedServiceItemEnforcementEnabled),
	// 					PolicyAction: to.Ptr(armvirtualenclaves.GovernedServiceItemPolicyActionNone),
	// 					Initiatives: []*string{
	// 						to.Ptr("d300338e-65d1-4be3-b18e-fb4ce5715a8f"),
	// 					},
	// 				},
	// 				{
	// 					ServiceID: to.Ptr(armvirtualenclaves.ServiceIdentifierAppService),
	// 					ServiceName: to.Ptr("App Service"),
	// 					Option: to.Ptr(armvirtualenclaves.GovernedServiceItemOptionAllow),
	// 					Enforcement: to.Ptr(armvirtualenclaves.GovernedServiceItemEnforcementEnabled),
	// 					PolicyAction: to.Ptr(armvirtualenclaves.GovernedServiceItemPolicyActionNone),
	// 					Initiatives: []*string{
	// 						to.Ptr("528d78c5-246c-4f26-ade6-d30798705411"),
	// 					},
	// 				},
	// 				{
	// 					ServiceID: to.Ptr(armvirtualenclaves.ServiceIdentifierContainerRegistry),
	// 					ServiceName: to.Ptr("Container Registry"),
	// 					Option: to.Ptr(armvirtualenclaves.GovernedServiceItemOptionAllow),
	// 					Enforcement: to.Ptr(armvirtualenclaves.GovernedServiceItemEnforcementEnabled),
	// 					PolicyAction: to.Ptr(armvirtualenclaves.GovernedServiceItemPolicyActionNone),
	// 					Initiatives: []*string{
	// 						to.Ptr("b3fe25eb-cdc6-475f-96a5-04ac270f630d"),
	// 					},
	// 				},
	// 				{
	// 					ServiceID: to.Ptr(armvirtualenclaves.ServiceIdentifierCosmosDB),
	// 					ServiceName: to.Ptr("CosmosDB"),
	// 					Option: to.Ptr(armvirtualenclaves.GovernedServiceItemOptionAllow),
	// 					Enforcement: to.Ptr(armvirtualenclaves.GovernedServiceItemEnforcementEnabled),
	// 					PolicyAction: to.Ptr(armvirtualenclaves.GovernedServiceItemPolicyActionNone),
	// 					Initiatives: []*string{
	// 						to.Ptr("6bd484ca-ae8d-46cf-9b33-e1feef84bfba"),
	// 					},
	// 				},
	// 				{
	// 					ServiceID: to.Ptr(armvirtualenclaves.ServiceIdentifierKeyVault),
	// 					ServiceName: to.Ptr("Key Vault"),
	// 					Option: to.Ptr(armvirtualenclaves.GovernedServiceItemOptionAllow),
	// 					Enforcement: to.Ptr(armvirtualenclaves.GovernedServiceItemEnforcementEnabled),
	// 					PolicyAction: to.Ptr(armvirtualenclaves.GovernedServiceItemPolicyActionNone),
	// 					Initiatives: []*string{
	// 						to.Ptr("4f4dba0f-a5ee-494b-8df7-f9727dea6f37"),
	// 					},
	// 				},
	// 				{
	// 					ServiceID: to.Ptr(armvirtualenclaves.ServiceIdentifierMicrosoftSQL),
	// 					ServiceName: to.Ptr("Microsoft SQL"),
	// 					Option: to.Ptr(armvirtualenclaves.GovernedServiceItemOptionAllow),
	// 					Enforcement: to.Ptr(armvirtualenclaves.GovernedServiceItemEnforcementEnabled),
	// 					PolicyAction: to.Ptr(armvirtualenclaves.GovernedServiceItemPolicyActionNone),
	// 					Initiatives: []*string{
	// 						to.Ptr("0fbe78a5-1722-4f1b-83a5-89c14151fa60"),
	// 					},
	// 				},
	// 				{
	// 					ServiceID: to.Ptr(armvirtualenclaves.ServiceIdentifierMonitoring),
	// 					ServiceName: to.Ptr("Monitoring"),
	// 					Option: to.Ptr(armvirtualenclaves.GovernedServiceItemOption("Not Applicable")),
	// 					Enforcement: to.Ptr(armvirtualenclaves.GovernedServiceItemEnforcementEnabled),
	// 					PolicyAction: to.Ptr(armvirtualenclaves.GovernedServiceItemPolicyActionNone),
	// 					Initiatives: []*string{
	// 						to.Ptr("0a9ea1cb-7925-47fc-b0fe-8bb0a8190423"),
	// 					},
	// 				},
	// 				{
	// 					ServiceID: to.Ptr(armvirtualenclaves.ServiceIdentifierPostgreSQL),
	// 					ServiceName: to.Ptr("PostgreSQL"),
	// 					Option: to.Ptr(armvirtualenclaves.GovernedServiceItemOptionAllow),
	// 					Enforcement: to.Ptr(armvirtualenclaves.GovernedServiceItemEnforcementEnabled),
	// 					PolicyAction: to.Ptr(armvirtualenclaves.GovernedServiceItemPolicyActionNone),
	// 					Initiatives: []*string{
	// 						to.Ptr("5eaa16b4-81f2-4354-aef3-2d77288e396e"),
	// 					},
	// 				},
	// 				{
	// 					ServiceID: to.Ptr(armvirtualenclaves.ServiceIdentifierServiceBus),
	// 					ServiceName: to.Ptr("Service Bus"),
	// 					Option: to.Ptr(armvirtualenclaves.GovernedServiceItemOptionAllow),
	// 					Enforcement: to.Ptr(armvirtualenclaves.GovernedServiceItemEnforcementEnabled),
	// 					PolicyAction: to.Ptr(armvirtualenclaves.GovernedServiceItemPolicyActionNone),
	// 					Initiatives: []*string{
	// 						to.Ptr("8fcdb3f1-1369-426d-9917-81edfee903ab"),
	// 					},
	// 				},
	// 				{
	// 					ServiceID: to.Ptr(armvirtualenclaves.ServiceIdentifierStorage),
	// 					ServiceName: to.Ptr("Storage"),
	// 					Option: to.Ptr(armvirtualenclaves.GovernedServiceItemOptionAllow),
	// 					Enforcement: to.Ptr(armvirtualenclaves.GovernedServiceItemEnforcementEnabled),
	// 					PolicyAction: to.Ptr(armvirtualenclaves.GovernedServiceItemPolicyActionNone),
	// 					Initiatives: []*string{
	// 						to.Ptr("ca122c06-05f6-4423-9018-ccb523168eb2"),
	// 					},
	// 				},
	// 				{
	// 					ServiceID: to.Ptr(armvirtualenclaves.ServiceIdentifierAzureFirewalls),
	// 					ServiceName: to.Ptr("Azure Firewalls"),
	// 					Option: to.Ptr(armvirtualenclaves.GovernedServiceItemOptionAllow),
	// 					Enforcement: to.Ptr(armvirtualenclaves.GovernedServiceItemEnforcementEnabled),
	// 					PolicyAction: to.Ptr(armvirtualenclaves.GovernedServiceItemPolicyActionNone),
	// 					Initiatives: []*string{
	// 					},
	// 				},
	// 				{
	// 					ServiceID: to.Ptr(armvirtualenclaves.ServiceIdentifierInsights),
	// 					ServiceName: to.Ptr("Insights"),
	// 					Option: to.Ptr(armvirtualenclaves.GovernedServiceItemOptionAllow),
	// 					Enforcement: to.Ptr(armvirtualenclaves.GovernedServiceItemEnforcementEnabled),
	// 					PolicyAction: to.Ptr(armvirtualenclaves.GovernedServiceItemPolicyActionNone),
	// 					Initiatives: []*string{
	// 					},
	// 				},
	// 				{
	// 					ServiceID: to.Ptr(armvirtualenclaves.ServiceIdentifierLogic),
	// 					ServiceName: to.Ptr("Logic"),
	// 					Option: to.Ptr(armvirtualenclaves.GovernedServiceItemOptionAllow),
	// 					Enforcement: to.Ptr(armvirtualenclaves.GovernedServiceItemEnforcementEnabled),
	// 					PolicyAction: to.Ptr(armvirtualenclaves.GovernedServiceItemPolicyActionNone),
	// 					Initiatives: []*string{
	// 					},
	// 				},
	// 				{
	// 					ServiceID: to.Ptr(armvirtualenclaves.ServiceIdentifierPrivateDNSZones),
	// 					ServiceName: to.Ptr("Private DNS Zones"),
	// 					Option: to.Ptr(armvirtualenclaves.GovernedServiceItemOptionAllow),
	// 					Enforcement: to.Ptr(armvirtualenclaves.GovernedServiceItemEnforcementEnabled),
	// 					PolicyAction: to.Ptr(armvirtualenclaves.GovernedServiceItemPolicyActionNone),
	// 					Initiatives: []*string{
	// 					},
	// 				},
	// 				{
	// 					ServiceID: to.Ptr(armvirtualenclaves.ServiceIdentifierDataConnectors),
	// 					ServiceName: to.Ptr("Data Connectors"),
	// 					Option: to.Ptr(armvirtualenclaves.GovernedServiceItemOptionAllow),
	// 					Enforcement: to.Ptr(armvirtualenclaves.GovernedServiceItemEnforcementEnabled),
	// 					PolicyAction: to.Ptr(armvirtualenclaves.GovernedServiceItemPolicyActionNone),
	// 					Initiatives: []*string{
	// 					},
	// 				},
	// 			},
	// 			CommunityRoleAssignments: []*armvirtualenclaves.RoleAssignmentItem{
	// 				{
	// 					RoleDefinitionID: to.Ptr("b24988ac-6180-42a0-ab88-20f7382dd24c"),
	// 					Principals: []*armvirtualenclaves.Principal{
	// 						{
	// 							ID: to.Ptr("01234567-89ab-ef01-2345-0123456789ab"),
	// 							Type: to.Ptr(armvirtualenclaves.PrincipalTypeGroup),
	// 						},
	// 						{
	// 							ID: to.Ptr("355a6bb0-abc0-4cba-000d-12a345b678c0"),
	// 							Type: to.Ptr(armvirtualenclaves.PrincipalTypeUser),
	// 						},
	// 					},
	// 				},
	// 				{
	// 					RoleDefinitionID: to.Ptr("18d7d88d-d35e-4fb5-a5c3-7773c20a72d9"),
	// 					Principals: []*armvirtualenclaves.Principal{
	// 						{
	// 							ID: to.Ptr("355a6bb0-abc0-4cba-000d-12a345b678c9"),
	// 							Type: to.Ptr(armvirtualenclaves.PrincipalTypeUser),
	// 						},
	// 					},
	// 				},
	// 			},
	// 		},
	// 		Tags: map[string]*string{
	// 			"sampletag": to.Ptr("samplevalue"),
	// 		},
	// 		Location: to.Ptr("westcentralus"),
	// 		ID: to.Ptr("/subscriptions/c64f6eca-bdc5-4bc2-88d6-f8f1dc23f86c/resourceGroups/testrg/providers/Microsoft.Mission/communities/TestMyCommunity"),
	// 		Name: to.Ptr("TestMyCommunity"),
	// 		Type: to.Ptr("Microsoft.Mission/communities"),
	// 		SystemData: &armvirtualenclaves.SystemData{
	// 			CreatedBy: to.Ptr("myAlias"),
	// 			CreatedByType: to.Ptr(armvirtualenclaves.CreatedByTypeUser),
	// 			CreatedAt: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2023-03-17T20:43:17.760Z"); return t}()),
	// 			LastModifiedBy: to.Ptr("myAlias"),
	// 			LastModifiedByType: to.Ptr(armvirtualenclaves.CreatedByTypeUser),
	// 			LastModifiedAt: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2023-03-17T20:43:17.760Z"); return t}()),
	// 		},
	// 	},
	// }
}
