// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) Go Code Generator. DO NOT EDIT.

package armvirtualenclaves

import (
	"context"
	"errors"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/arm"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/policy"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/runtime"
	"net/http"
	"net/url"
	"strings"
)

// EnclaveConnectionClient - Enclave Connection Interface
// Don't use this type directly, use NewEnclaveConnectionClient() instead.
type EnclaveConnectionClient struct {
	internal       *arm.Client
	subscriptionID string
}

// NewEnclaveConnectionClient creates a new instance of EnclaveConnectionClient with the specified values.
//   - subscriptionID - The ID of the target subscription. The value must be an UUID.
//   - credential - used to authorize requests. Usually a credential from azidentity.
//   - options - Contains optional client configuration. Pass nil to accept the default values.
func NewEnclaveConnectionClient(subscriptionID string, credential azcore.TokenCredential, options *arm.ClientOptions) (*EnclaveConnectionClient, error) {
	cl, err := arm.NewClient(moduleName, moduleVersion, credential, options)
	if err != nil {
		return nil, err
	}
	client := &EnclaveConnectionClient{
		subscriptionID: subscriptionID,
		internal:       cl,
	}
	return client, nil
}

// BeginCreateOrUpdate - Create a EnclaveConnectionResource
// If the operation fails it returns an *azcore.ResponseError type.
//
// Generated from API version 2025-05-01-preview
//   - resourceGroupName - The name of the resource group. The name is case insensitive.
//   - enclaveConnectionName - The name of the Enclave Connection Resource
//   - resource - Resource create parameters.
//   - options - EnclaveConnectionClientBeginCreateOrUpdateOptions contains the optional parameters for the EnclaveConnectionClient.BeginCreateOrUpdate
//     method.
func (client *EnclaveConnectionClient) BeginCreateOrUpdate(ctx context.Context, resourceGroupName string, enclaveConnectionName string, resource EnclaveConnectionResource, options *EnclaveConnectionClientBeginCreateOrUpdateOptions) (*runtime.Poller[EnclaveConnectionClientCreateOrUpdateResponse], error) {
	if options == nil || options.ResumeToken == "" {
		resp, err := client.createOrUpdate(ctx, resourceGroupName, enclaveConnectionName, resource, options)
		if err != nil {
			return nil, err
		}
		poller, err := runtime.NewPoller(resp, client.internal.Pipeline(), &runtime.NewPollerOptions[EnclaveConnectionClientCreateOrUpdateResponse]{
			FinalStateVia: runtime.FinalStateViaAzureAsyncOp,
			Tracer:        client.internal.Tracer(),
		})
		return poller, err
	} else {
		return runtime.NewPollerFromResumeToken(options.ResumeToken, client.internal.Pipeline(), &runtime.NewPollerFromResumeTokenOptions[EnclaveConnectionClientCreateOrUpdateResponse]{
			Tracer: client.internal.Tracer(),
		})
	}
}

// CreateOrUpdate - Create a EnclaveConnectionResource
// If the operation fails it returns an *azcore.ResponseError type.
//
// Generated from API version 2025-05-01-preview
func (client *EnclaveConnectionClient) createOrUpdate(ctx context.Context, resourceGroupName string, enclaveConnectionName string, resource EnclaveConnectionResource, options *EnclaveConnectionClientBeginCreateOrUpdateOptions) (*http.Response, error) {
	var err error
	const operationName = "EnclaveConnectionClient.BeginCreateOrUpdate"
	ctx = context.WithValue(ctx, runtime.CtxAPINameKey{}, operationName)
	ctx, endSpan := runtime.StartSpan(ctx, operationName, client.internal.Tracer(), nil)
	defer func() { endSpan(err) }()
	req, err := client.createOrUpdateCreateRequest(ctx, resourceGroupName, enclaveConnectionName, resource, options)
	if err != nil {
		return nil, err
	}
	httpResp, err := client.internal.Pipeline().Do(req)
	if err != nil {
		return nil, err
	}
	if !runtime.HasStatusCode(httpResp, http.StatusOK, http.StatusCreated) {
		err = runtime.NewResponseError(httpResp)
		return nil, err
	}
	return httpResp, nil
}

// createOrUpdateCreateRequest creates the CreateOrUpdate request.
func (client *EnclaveConnectionClient) createOrUpdateCreateRequest(ctx context.Context, resourceGroupName string, enclaveConnectionName string, resource EnclaveConnectionResource, _ *EnclaveConnectionClientBeginCreateOrUpdateOptions) (*policy.Request, error) {
	urlPath := "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Mission/enclaveConnections/{enclaveConnectionName}"
	if client.subscriptionID == "" {
		return nil, errors.New("parameter client.subscriptionID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{subscriptionId}", url.PathEscape(client.subscriptionID))
	if resourceGroupName == "" {
		return nil, errors.New("parameter resourceGroupName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{resourceGroupName}", url.PathEscape(resourceGroupName))
	if enclaveConnectionName == "" {
		return nil, errors.New("parameter enclaveConnectionName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{enclaveConnectionName}", url.PathEscape(enclaveConnectionName))
	req, err := runtime.NewRequest(ctx, http.MethodPut, runtime.JoinPaths(client.internal.Endpoint(), urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("api-version", "2025-05-01-preview")
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header["Accept"] = []string{"application/json"}
	req.Raw().Header["Content-Type"] = []string{"application/json"}
	if err := runtime.MarshalAsJSON(req, resource); err != nil {
		return nil, err
	}
	return req, nil
}

// BeginDelete - Delete a EnclaveConnectionResource
// If the operation fails it returns an *azcore.ResponseError type.
//
// Generated from API version 2025-05-01-preview
//   - resourceGroupName - The name of the resource group. The name is case insensitive.
//   - enclaveConnectionName - The name of the Enclave Connection Resource
//   - options - EnclaveConnectionClientBeginDeleteOptions contains the optional parameters for the EnclaveConnectionClient.BeginDelete
//     method.
func (client *EnclaveConnectionClient) BeginDelete(ctx context.Context, resourceGroupName string, enclaveConnectionName string, options *EnclaveConnectionClientBeginDeleteOptions) (*runtime.Poller[EnclaveConnectionClientDeleteResponse], error) {
	if options == nil || options.ResumeToken == "" {
		resp, err := client.deleteOperation(ctx, resourceGroupName, enclaveConnectionName, options)
		if err != nil {
			return nil, err
		}
		poller, err := runtime.NewPoller(resp, client.internal.Pipeline(), &runtime.NewPollerOptions[EnclaveConnectionClientDeleteResponse]{
			Tracer: client.internal.Tracer(),
		})
		return poller, err
	} else {
		return runtime.NewPollerFromResumeToken(options.ResumeToken, client.internal.Pipeline(), &runtime.NewPollerFromResumeTokenOptions[EnclaveConnectionClientDeleteResponse]{
			Tracer: client.internal.Tracer(),
		})
	}
}

// Delete - Delete a EnclaveConnectionResource
// If the operation fails it returns an *azcore.ResponseError type.
//
// Generated from API version 2025-05-01-preview
func (client *EnclaveConnectionClient) deleteOperation(ctx context.Context, resourceGroupName string, enclaveConnectionName string, options *EnclaveConnectionClientBeginDeleteOptions) (*http.Response, error) {
	var err error
	const operationName = "EnclaveConnectionClient.BeginDelete"
	ctx = context.WithValue(ctx, runtime.CtxAPINameKey{}, operationName)
	ctx, endSpan := runtime.StartSpan(ctx, operationName, client.internal.Tracer(), nil)
	defer func() { endSpan(err) }()
	req, err := client.deleteCreateRequest(ctx, resourceGroupName, enclaveConnectionName, options)
	if err != nil {
		return nil, err
	}
	httpResp, err := client.internal.Pipeline().Do(req)
	if err != nil {
		return nil, err
	}
	if !runtime.HasStatusCode(httpResp, http.StatusAccepted, http.StatusNoContent) {
		err = runtime.NewResponseError(httpResp)
		return nil, err
	}
	return httpResp, nil
}

// deleteCreateRequest creates the Delete request.
func (client *EnclaveConnectionClient) deleteCreateRequest(ctx context.Context, resourceGroupName string, enclaveConnectionName string, _ *EnclaveConnectionClientBeginDeleteOptions) (*policy.Request, error) {
	urlPath := "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Mission/enclaveConnections/{enclaveConnectionName}"
	if client.subscriptionID == "" {
		return nil, errors.New("parameter client.subscriptionID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{subscriptionId}", url.PathEscape(client.subscriptionID))
	if resourceGroupName == "" {
		return nil, errors.New("parameter resourceGroupName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{resourceGroupName}", url.PathEscape(resourceGroupName))
	if enclaveConnectionName == "" {
		return nil, errors.New("parameter enclaveConnectionName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{enclaveConnectionName}", url.PathEscape(enclaveConnectionName))
	req, err := runtime.NewRequest(ctx, http.MethodDelete, runtime.JoinPaths(client.internal.Endpoint(), urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("api-version", "2025-05-01-preview")
	req.Raw().URL.RawQuery = reqQP.Encode()
	return req, nil
}

// Get - Get a EnclaveConnectionResource
// If the operation fails it returns an *azcore.ResponseError type.
//
// Generated from API version 2025-05-01-preview
//   - resourceGroupName - The name of the resource group. The name is case insensitive.
//   - enclaveConnectionName - The name of the Enclave Connection Resource
//   - options - EnclaveConnectionClientGetOptions contains the optional parameters for the EnclaveConnectionClient.Get method.
func (client *EnclaveConnectionClient) Get(ctx context.Context, resourceGroupName string, enclaveConnectionName string, options *EnclaveConnectionClientGetOptions) (EnclaveConnectionClientGetResponse, error) {
	var err error
	const operationName = "EnclaveConnectionClient.Get"
	ctx = context.WithValue(ctx, runtime.CtxAPINameKey{}, operationName)
	ctx, endSpan := runtime.StartSpan(ctx, operationName, client.internal.Tracer(), nil)
	defer func() { endSpan(err) }()
	req, err := client.getCreateRequest(ctx, resourceGroupName, enclaveConnectionName, options)
	if err != nil {
		return EnclaveConnectionClientGetResponse{}, err
	}
	httpResp, err := client.internal.Pipeline().Do(req)
	if err != nil {
		return EnclaveConnectionClientGetResponse{}, err
	}
	if !runtime.HasStatusCode(httpResp, http.StatusOK) {
		err = runtime.NewResponseError(httpResp)
		return EnclaveConnectionClientGetResponse{}, err
	}
	resp, err := client.getHandleResponse(httpResp)
	return resp, err
}

// getCreateRequest creates the Get request.
func (client *EnclaveConnectionClient) getCreateRequest(ctx context.Context, resourceGroupName string, enclaveConnectionName string, _ *EnclaveConnectionClientGetOptions) (*policy.Request, error) {
	urlPath := "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Mission/enclaveConnections/{enclaveConnectionName}"
	if client.subscriptionID == "" {
		return nil, errors.New("parameter client.subscriptionID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{subscriptionId}", url.PathEscape(client.subscriptionID))
	if resourceGroupName == "" {
		return nil, errors.New("parameter resourceGroupName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{resourceGroupName}", url.PathEscape(resourceGroupName))
	if enclaveConnectionName == "" {
		return nil, errors.New("parameter enclaveConnectionName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{enclaveConnectionName}", url.PathEscape(enclaveConnectionName))
	req, err := runtime.NewRequest(ctx, http.MethodGet, runtime.JoinPaths(client.internal.Endpoint(), urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("api-version", "2025-05-01-preview")
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header["Accept"] = []string{"application/json"}
	return req, nil
}

// getHandleResponse handles the Get response.
func (client *EnclaveConnectionClient) getHandleResponse(resp *http.Response) (EnclaveConnectionClientGetResponse, error) {
	result := EnclaveConnectionClientGetResponse{}
	if err := runtime.UnmarshalAsJSON(resp, &result.EnclaveConnectionResource); err != nil {
		return EnclaveConnectionClientGetResponse{}, err
	}
	return result, nil
}

// BeginHandleApprovalCreation - Callback that triggers on approval state change.
// If the operation fails it returns an *azcore.ResponseError type.
//
// Generated from API version 2025-05-01-preview
//   - resourceGroupName - The name of the resource group. The name is case insensitive.
//   - enclaveConnectionName - The name of the Enclave Connection Resource
//   - body - The content of the action request
//   - options - EnclaveConnectionClientBeginHandleApprovalCreationOptions contains the optional parameters for the EnclaveConnectionClient.BeginHandleApprovalCreation
//     method.
func (client *EnclaveConnectionClient) BeginHandleApprovalCreation(ctx context.Context, resourceGroupName string, enclaveConnectionName string, body ApprovalCallbackRequest, options *EnclaveConnectionClientBeginHandleApprovalCreationOptions) (*runtime.Poller[EnclaveConnectionClientHandleApprovalCreationResponse], error) {
	if options == nil || options.ResumeToken == "" {
		resp, err := client.handleApprovalCreation(ctx, resourceGroupName, enclaveConnectionName, body, options)
		if err != nil {
			return nil, err
		}
		poller, err := runtime.NewPoller(resp, client.internal.Pipeline(), &runtime.NewPollerOptions[EnclaveConnectionClientHandleApprovalCreationResponse]{
			Tracer: client.internal.Tracer(),
		})
		return poller, err
	} else {
		return runtime.NewPollerFromResumeToken(options.ResumeToken, client.internal.Pipeline(), &runtime.NewPollerFromResumeTokenOptions[EnclaveConnectionClientHandleApprovalCreationResponse]{
			Tracer: client.internal.Tracer(),
		})
	}
}

// HandleApprovalCreation - Callback that triggers on approval state change.
// If the operation fails it returns an *azcore.ResponseError type.
//
// Generated from API version 2025-05-01-preview
func (client *EnclaveConnectionClient) handleApprovalCreation(ctx context.Context, resourceGroupName string, enclaveConnectionName string, body ApprovalCallbackRequest, options *EnclaveConnectionClientBeginHandleApprovalCreationOptions) (*http.Response, error) {
	var err error
	const operationName = "EnclaveConnectionClient.BeginHandleApprovalCreation"
	ctx = context.WithValue(ctx, runtime.CtxAPINameKey{}, operationName)
	ctx, endSpan := runtime.StartSpan(ctx, operationName, client.internal.Tracer(), nil)
	defer func() { endSpan(err) }()
	req, err := client.handleApprovalCreationCreateRequest(ctx, resourceGroupName, enclaveConnectionName, body, options)
	if err != nil {
		return nil, err
	}
	httpResp, err := client.internal.Pipeline().Do(req)
	if err != nil {
		return nil, err
	}
	if !runtime.HasStatusCode(httpResp, http.StatusOK, http.StatusAccepted) {
		err = runtime.NewResponseError(httpResp)
		return nil, err
	}
	return httpResp, nil
}

// handleApprovalCreationCreateRequest creates the HandleApprovalCreation request.
func (client *EnclaveConnectionClient) handleApprovalCreationCreateRequest(ctx context.Context, resourceGroupName string, enclaveConnectionName string, body ApprovalCallbackRequest, _ *EnclaveConnectionClientBeginHandleApprovalCreationOptions) (*policy.Request, error) {
	urlPath := "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Mission/enclaveConnections/{enclaveConnectionName}/handleApprovalCreation"
	if client.subscriptionID == "" {
		return nil, errors.New("parameter client.subscriptionID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{subscriptionId}", url.PathEscape(client.subscriptionID))
	if resourceGroupName == "" {
		return nil, errors.New("parameter resourceGroupName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{resourceGroupName}", url.PathEscape(resourceGroupName))
	if enclaveConnectionName == "" {
		return nil, errors.New("parameter enclaveConnectionName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{enclaveConnectionName}", url.PathEscape(enclaveConnectionName))
	req, err := runtime.NewRequest(ctx, http.MethodPost, runtime.JoinPaths(client.internal.Endpoint(), urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("api-version", "2025-05-01-preview")
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header["Accept"] = []string{"application/json"}
	req.Raw().Header["Content-Type"] = []string{"application/json"}
	if err := runtime.MarshalAsJSON(req, body); err != nil {
		return nil, err
	}
	return req, nil
}

// BeginHandleApprovalDeletion - Callback that triggers on approval deletion state change.
// If the operation fails it returns an *azcore.ResponseError type.
//
// Generated from API version 2025-05-01-preview
//   - resourceGroupName - The name of the resource group. The name is case insensitive.
//   - enclaveConnectionName - The name of the Enclave Connection Resource
//   - body - The content of the action request
//   - options - EnclaveConnectionClientBeginHandleApprovalDeletionOptions contains the optional parameters for the EnclaveConnectionClient.BeginHandleApprovalDeletion
//     method.
func (client *EnclaveConnectionClient) BeginHandleApprovalDeletion(ctx context.Context, resourceGroupName string, enclaveConnectionName string, body ApprovalDeletionCallbackRequest, options *EnclaveConnectionClientBeginHandleApprovalDeletionOptions) (*runtime.Poller[EnclaveConnectionClientHandleApprovalDeletionResponse], error) {
	if options == nil || options.ResumeToken == "" {
		resp, err := client.handleApprovalDeletion(ctx, resourceGroupName, enclaveConnectionName, body, options)
		if err != nil {
			return nil, err
		}
		poller, err := runtime.NewPoller(resp, client.internal.Pipeline(), &runtime.NewPollerOptions[EnclaveConnectionClientHandleApprovalDeletionResponse]{
			Tracer: client.internal.Tracer(),
		})
		return poller, err
	} else {
		return runtime.NewPollerFromResumeToken(options.ResumeToken, client.internal.Pipeline(), &runtime.NewPollerFromResumeTokenOptions[EnclaveConnectionClientHandleApprovalDeletionResponse]{
			Tracer: client.internal.Tracer(),
		})
	}
}

// HandleApprovalDeletion - Callback that triggers on approval deletion state change.
// If the operation fails it returns an *azcore.ResponseError type.
//
// Generated from API version 2025-05-01-preview
func (client *EnclaveConnectionClient) handleApprovalDeletion(ctx context.Context, resourceGroupName string, enclaveConnectionName string, body ApprovalDeletionCallbackRequest, options *EnclaveConnectionClientBeginHandleApprovalDeletionOptions) (*http.Response, error) {
	var err error
	const operationName = "EnclaveConnectionClient.BeginHandleApprovalDeletion"
	ctx = context.WithValue(ctx, runtime.CtxAPINameKey{}, operationName)
	ctx, endSpan := runtime.StartSpan(ctx, operationName, client.internal.Tracer(), nil)
	defer func() { endSpan(err) }()
	req, err := client.handleApprovalDeletionCreateRequest(ctx, resourceGroupName, enclaveConnectionName, body, options)
	if err != nil {
		return nil, err
	}
	httpResp, err := client.internal.Pipeline().Do(req)
	if err != nil {
		return nil, err
	}
	if !runtime.HasStatusCode(httpResp, http.StatusOK, http.StatusAccepted) {
		err = runtime.NewResponseError(httpResp)
		return nil, err
	}
	return httpResp, nil
}

// handleApprovalDeletionCreateRequest creates the HandleApprovalDeletion request.
func (client *EnclaveConnectionClient) handleApprovalDeletionCreateRequest(ctx context.Context, resourceGroupName string, enclaveConnectionName string, body ApprovalDeletionCallbackRequest, _ *EnclaveConnectionClientBeginHandleApprovalDeletionOptions) (*policy.Request, error) {
	urlPath := "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Mission/enclaveConnections/{enclaveConnectionName}/handleApprovalDeletion"
	if client.subscriptionID == "" {
		return nil, errors.New("parameter client.subscriptionID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{subscriptionId}", url.PathEscape(client.subscriptionID))
	if resourceGroupName == "" {
		return nil, errors.New("parameter resourceGroupName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{resourceGroupName}", url.PathEscape(resourceGroupName))
	if enclaveConnectionName == "" {
		return nil, errors.New("parameter enclaveConnectionName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{enclaveConnectionName}", url.PathEscape(enclaveConnectionName))
	req, err := runtime.NewRequest(ctx, http.MethodPost, runtime.JoinPaths(client.internal.Endpoint(), urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("api-version", "2025-05-01-preview")
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header["Accept"] = []string{"application/json"}
	req.Raw().Header["Content-Type"] = []string{"application/json"}
	if err := runtime.MarshalAsJSON(req, body); err != nil {
		return nil, err
	}
	return req, nil
}

// NewListByResourceGroupPager - List EnclaveConnectionResource resources by resource group
//
// Generated from API version 2025-05-01-preview
//   - resourceGroupName - The name of the resource group. The name is case insensitive.
//   - options - EnclaveConnectionClientListByResourceGroupOptions contains the optional parameters for the EnclaveConnectionClient.NewListByResourceGroupPager
//     method.
func (client *EnclaveConnectionClient) NewListByResourceGroupPager(resourceGroupName string, options *EnclaveConnectionClientListByResourceGroupOptions) *runtime.Pager[EnclaveConnectionClientListByResourceGroupResponse] {
	return runtime.NewPager(runtime.PagingHandler[EnclaveConnectionClientListByResourceGroupResponse]{
		More: func(page EnclaveConnectionClientListByResourceGroupResponse) bool {
			return page.NextLink != nil && len(*page.NextLink) > 0
		},
		Fetcher: func(ctx context.Context, page *EnclaveConnectionClientListByResourceGroupResponse) (EnclaveConnectionClientListByResourceGroupResponse, error) {
			ctx = context.WithValue(ctx, runtime.CtxAPINameKey{}, "EnclaveConnectionClient.NewListByResourceGroupPager")
			nextLink := ""
			if page != nil {
				nextLink = *page.NextLink
			}
			resp, err := runtime.FetcherForNextLink(ctx, client.internal.Pipeline(), nextLink, func(ctx context.Context) (*policy.Request, error) {
				return client.listByResourceGroupCreateRequest(ctx, resourceGroupName, options)
			}, nil)
			if err != nil {
				return EnclaveConnectionClientListByResourceGroupResponse{}, err
			}
			return client.listByResourceGroupHandleResponse(resp)
		},
		Tracer: client.internal.Tracer(),
	})
}

// listByResourceGroupCreateRequest creates the ListByResourceGroup request.
func (client *EnclaveConnectionClient) listByResourceGroupCreateRequest(ctx context.Context, resourceGroupName string, _ *EnclaveConnectionClientListByResourceGroupOptions) (*policy.Request, error) {
	urlPath := "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Mission/enclaveConnections"
	if client.subscriptionID == "" {
		return nil, errors.New("parameter client.subscriptionID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{subscriptionId}", url.PathEscape(client.subscriptionID))
	if resourceGroupName == "" {
		return nil, errors.New("parameter resourceGroupName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{resourceGroupName}", url.PathEscape(resourceGroupName))
	req, err := runtime.NewRequest(ctx, http.MethodGet, runtime.JoinPaths(client.internal.Endpoint(), urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("api-version", "2025-05-01-preview")
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header["Accept"] = []string{"application/json"}
	return req, nil
}

// listByResourceGroupHandleResponse handles the ListByResourceGroup response.
func (client *EnclaveConnectionClient) listByResourceGroupHandleResponse(resp *http.Response) (EnclaveConnectionClientListByResourceGroupResponse, error) {
	result := EnclaveConnectionClientListByResourceGroupResponse{}
	if err := runtime.UnmarshalAsJSON(resp, &result.EnclaveConnectionResourceListResult); err != nil {
		return EnclaveConnectionClientListByResourceGroupResponse{}, err
	}
	return result, nil
}

// NewListBySubscriptionPager - List EnclaveConnectionResource resources by subscription ID
//
// Generated from API version 2025-05-01-preview
//   - options - EnclaveConnectionClientListBySubscriptionOptions contains the optional parameters for the EnclaveConnectionClient.NewListBySubscriptionPager
//     method.
func (client *EnclaveConnectionClient) NewListBySubscriptionPager(options *EnclaveConnectionClientListBySubscriptionOptions) *runtime.Pager[EnclaveConnectionClientListBySubscriptionResponse] {
	return runtime.NewPager(runtime.PagingHandler[EnclaveConnectionClientListBySubscriptionResponse]{
		More: func(page EnclaveConnectionClientListBySubscriptionResponse) bool {
			return page.NextLink != nil && len(*page.NextLink) > 0
		},
		Fetcher: func(ctx context.Context, page *EnclaveConnectionClientListBySubscriptionResponse) (EnclaveConnectionClientListBySubscriptionResponse, error) {
			ctx = context.WithValue(ctx, runtime.CtxAPINameKey{}, "EnclaveConnectionClient.NewListBySubscriptionPager")
			nextLink := ""
			if page != nil {
				nextLink = *page.NextLink
			}
			resp, err := runtime.FetcherForNextLink(ctx, client.internal.Pipeline(), nextLink, func(ctx context.Context) (*policy.Request, error) {
				return client.listBySubscriptionCreateRequest(ctx, options)
			}, nil)
			if err != nil {
				return EnclaveConnectionClientListBySubscriptionResponse{}, err
			}
			return client.listBySubscriptionHandleResponse(resp)
		},
		Tracer: client.internal.Tracer(),
	})
}

// listBySubscriptionCreateRequest creates the ListBySubscription request.
func (client *EnclaveConnectionClient) listBySubscriptionCreateRequest(ctx context.Context, _ *EnclaveConnectionClientListBySubscriptionOptions) (*policy.Request, error) {
	urlPath := "/subscriptions/{subscriptionId}/providers/Microsoft.Mission/enclaveConnections"
	if client.subscriptionID == "" {
		return nil, errors.New("parameter client.subscriptionID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{subscriptionId}", url.PathEscape(client.subscriptionID))
	req, err := runtime.NewRequest(ctx, http.MethodGet, runtime.JoinPaths(client.internal.Endpoint(), urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("api-version", "2025-05-01-preview")
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header["Accept"] = []string{"application/json"}
	return req, nil
}

// listBySubscriptionHandleResponse handles the ListBySubscription response.
func (client *EnclaveConnectionClient) listBySubscriptionHandleResponse(resp *http.Response) (EnclaveConnectionClientListBySubscriptionResponse, error) {
	result := EnclaveConnectionClientListBySubscriptionResponse{}
	if err := runtime.UnmarshalAsJSON(resp, &result.EnclaveConnectionResourceListResult); err != nil {
		return EnclaveConnectionClientListBySubscriptionResponse{}, err
	}
	return result, nil
}

// BeginUpdate - Update a EnclaveConnectionResource
// If the operation fails it returns an *azcore.ResponseError type.
//
// Generated from API version 2025-05-01-preview
//   - resourceGroupName - The name of the resource group. The name is case insensitive.
//   - enclaveConnectionName - The name of the Enclave Connection Resource
//   - properties - The resource properties to be updated.
//   - options - EnclaveConnectionClientBeginUpdateOptions contains the optional parameters for the EnclaveConnectionClient.BeginUpdate
//     method.
func (client *EnclaveConnectionClient) BeginUpdate(ctx context.Context, resourceGroupName string, enclaveConnectionName string, properties EnclaveConnectionPatchModel, options *EnclaveConnectionClientBeginUpdateOptions) (*runtime.Poller[EnclaveConnectionClientUpdateResponse], error) {
	if options == nil || options.ResumeToken == "" {
		resp, err := client.update(ctx, resourceGroupName, enclaveConnectionName, properties, options)
		if err != nil {
			return nil, err
		}
		poller, err := runtime.NewPoller(resp, client.internal.Pipeline(), &runtime.NewPollerOptions[EnclaveConnectionClientUpdateResponse]{
			Tracer: client.internal.Tracer(),
		})
		return poller, err
	} else {
		return runtime.NewPollerFromResumeToken(options.ResumeToken, client.internal.Pipeline(), &runtime.NewPollerFromResumeTokenOptions[EnclaveConnectionClientUpdateResponse]{
			Tracer: client.internal.Tracer(),
		})
	}
}

// Update - Update a EnclaveConnectionResource
// If the operation fails it returns an *azcore.ResponseError type.
//
// Generated from API version 2025-05-01-preview
func (client *EnclaveConnectionClient) update(ctx context.Context, resourceGroupName string, enclaveConnectionName string, properties EnclaveConnectionPatchModel, options *EnclaveConnectionClientBeginUpdateOptions) (*http.Response, error) {
	var err error
	const operationName = "EnclaveConnectionClient.BeginUpdate"
	ctx = context.WithValue(ctx, runtime.CtxAPINameKey{}, operationName)
	ctx, endSpan := runtime.StartSpan(ctx, operationName, client.internal.Tracer(), nil)
	defer func() { endSpan(err) }()
	req, err := client.updateCreateRequest(ctx, resourceGroupName, enclaveConnectionName, properties, options)
	if err != nil {
		return nil, err
	}
	httpResp, err := client.internal.Pipeline().Do(req)
	if err != nil {
		return nil, err
	}
	if !runtime.HasStatusCode(httpResp, http.StatusOK, http.StatusAccepted) {
		err = runtime.NewResponseError(httpResp)
		return nil, err
	}
	return httpResp, nil
}

// updateCreateRequest creates the Update request.
func (client *EnclaveConnectionClient) updateCreateRequest(ctx context.Context, resourceGroupName string, enclaveConnectionName string, properties EnclaveConnectionPatchModel, _ *EnclaveConnectionClientBeginUpdateOptions) (*policy.Request, error) {
	urlPath := "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Mission/enclaveConnections/{enclaveConnectionName}"
	if client.subscriptionID == "" {
		return nil, errors.New("parameter client.subscriptionID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{subscriptionId}", url.PathEscape(client.subscriptionID))
	if resourceGroupName == "" {
		return nil, errors.New("parameter resourceGroupName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{resourceGroupName}", url.PathEscape(resourceGroupName))
	if enclaveConnectionName == "" {
		return nil, errors.New("parameter enclaveConnectionName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{enclaveConnectionName}", url.PathEscape(enclaveConnectionName))
	req, err := runtime.NewRequest(ctx, http.MethodPatch, runtime.JoinPaths(client.internal.Endpoint(), urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("api-version", "2025-05-01-preview")
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header["Accept"] = []string{"application/json"}
	req.Raw().Header["Content-Type"] = []string{"application/json"}
	if err := runtime.MarshalAsJSON(req, properties); err != nil {
		return nil, err
	}
	return req, nil
}
