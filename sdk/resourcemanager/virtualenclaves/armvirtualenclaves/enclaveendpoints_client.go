// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) Go Code Generator. DO NOT EDIT.

package armvirtualenclaves

import (
	"context"
	"errors"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/arm"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/policy"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/runtime"
	"net/http"
	"net/url"
	"strings"
)

// EnclaveEndpointsClient - Enclave Endpoint Interface
// Don't use this type directly, use NewEnclaveEndpointsClient() instead.
type EnclaveEndpointsClient struct {
	internal       *arm.Client
	subscriptionID string
}

// NewEnclaveEndpointsClient creates a new instance of EnclaveEndpointsClient with the specified values.
//   - subscriptionID - The ID of the target subscription. The value must be an UUID.
//   - credential - used to authorize requests. Usually a credential from azidentity.
//   - options - Contains optional client configuration. Pass nil to accept the default values.
func NewEnclaveEndpointsClient(subscriptionID string, credential azcore.TokenCredential, options *arm.ClientOptions) (*EnclaveEndpointsClient, error) {
	cl, err := arm.NewClient(moduleName, moduleVersion, credential, options)
	if err != nil {
		return nil, err
	}
	client := &EnclaveEndpointsClient{
		subscriptionID: subscriptionID,
		internal:       cl,
	}
	return client, nil
}

// BeginCreateOrUpdate - Create a EnclaveEndpointResource
// If the operation fails it returns an *azcore.ResponseError type.
//
// Generated from API version 2025-05-01-preview
//   - resourceGroupName - The name of the resource group. The name is case insensitive.
//   - virtualEnclaveName - The name of the enclaveResource Resource
//   - enclaveEndpointName - The name of the Enclave Endpoint Resource
//   - resource - Resource create parameters.
//   - options - EnclaveEndpointsClientBeginCreateOrUpdateOptions contains the optional parameters for the EnclaveEndpointsClient.BeginCreateOrUpdate
//     method.
func (client *EnclaveEndpointsClient) BeginCreateOrUpdate(ctx context.Context, resourceGroupName string, virtualEnclaveName string, enclaveEndpointName string, resource EnclaveEndpointResource, options *EnclaveEndpointsClientBeginCreateOrUpdateOptions) (*runtime.Poller[EnclaveEndpointsClientCreateOrUpdateResponse], error) {
	if options == nil || options.ResumeToken == "" {
		resp, err := client.createOrUpdate(ctx, resourceGroupName, virtualEnclaveName, enclaveEndpointName, resource, options)
		if err != nil {
			return nil, err
		}
		poller, err := runtime.NewPoller(resp, client.internal.Pipeline(), &runtime.NewPollerOptions[EnclaveEndpointsClientCreateOrUpdateResponse]{
			FinalStateVia: runtime.FinalStateViaAzureAsyncOp,
			Tracer:        client.internal.Tracer(),
		})
		return poller, err
	} else {
		return runtime.NewPollerFromResumeToken(options.ResumeToken, client.internal.Pipeline(), &runtime.NewPollerFromResumeTokenOptions[EnclaveEndpointsClientCreateOrUpdateResponse]{
			Tracer: client.internal.Tracer(),
		})
	}
}

// CreateOrUpdate - Create a EnclaveEndpointResource
// If the operation fails it returns an *azcore.ResponseError type.
//
// Generated from API version 2025-05-01-preview
func (client *EnclaveEndpointsClient) createOrUpdate(ctx context.Context, resourceGroupName string, virtualEnclaveName string, enclaveEndpointName string, resource EnclaveEndpointResource, options *EnclaveEndpointsClientBeginCreateOrUpdateOptions) (*http.Response, error) {
	var err error
	const operationName = "EnclaveEndpointsClient.BeginCreateOrUpdate"
	ctx = context.WithValue(ctx, runtime.CtxAPINameKey{}, operationName)
	ctx, endSpan := runtime.StartSpan(ctx, operationName, client.internal.Tracer(), nil)
	defer func() { endSpan(err) }()
	req, err := client.createOrUpdateCreateRequest(ctx, resourceGroupName, virtualEnclaveName, enclaveEndpointName, resource, options)
	if err != nil {
		return nil, err
	}
	httpResp, err := client.internal.Pipeline().Do(req)
	if err != nil {
		return nil, err
	}
	if !runtime.HasStatusCode(httpResp, http.StatusOK, http.StatusCreated) {
		err = runtime.NewResponseError(httpResp)
		return nil, err
	}
	return httpResp, nil
}

// createOrUpdateCreateRequest creates the CreateOrUpdate request.
func (client *EnclaveEndpointsClient) createOrUpdateCreateRequest(ctx context.Context, resourceGroupName string, virtualEnclaveName string, enclaveEndpointName string, resource EnclaveEndpointResource, _ *EnclaveEndpointsClientBeginCreateOrUpdateOptions) (*policy.Request, error) {
	urlPath := "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Mission/virtualEnclaves/{virtualEnclaveName}/enclaveEndpoints/{enclaveEndpointName}"
	if client.subscriptionID == "" {
		return nil, errors.New("parameter client.subscriptionID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{subscriptionId}", url.PathEscape(client.subscriptionID))
	if resourceGroupName == "" {
		return nil, errors.New("parameter resourceGroupName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{resourceGroupName}", url.PathEscape(resourceGroupName))
	if virtualEnclaveName == "" {
		return nil, errors.New("parameter virtualEnclaveName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{virtualEnclaveName}", url.PathEscape(virtualEnclaveName))
	if enclaveEndpointName == "" {
		return nil, errors.New("parameter enclaveEndpointName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{enclaveEndpointName}", url.PathEscape(enclaveEndpointName))
	req, err := runtime.NewRequest(ctx, http.MethodPut, runtime.JoinPaths(client.internal.Endpoint(), urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("api-version", "2025-05-01-preview")
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header["Accept"] = []string{"application/json"}
	req.Raw().Header["Content-Type"] = []string{"application/json"}
	if err := runtime.MarshalAsJSON(req, resource); err != nil {
		return nil, err
	}
	return req, nil
}

// BeginDelete - Delete a EnclaveEndpointResource
// If the operation fails it returns an *azcore.ResponseError type.
//
// Generated from API version 2025-05-01-preview
//   - resourceGroupName - The name of the resource group. The name is case insensitive.
//   - virtualEnclaveName - The name of the enclaveResource Resource
//   - enclaveEndpointName - The name of the Enclave Endpoint Resource
//   - options - EnclaveEndpointsClientBeginDeleteOptions contains the optional parameters for the EnclaveEndpointsClient.BeginDelete
//     method.
func (client *EnclaveEndpointsClient) BeginDelete(ctx context.Context, resourceGroupName string, virtualEnclaveName string, enclaveEndpointName string, options *EnclaveEndpointsClientBeginDeleteOptions) (*runtime.Poller[EnclaveEndpointsClientDeleteResponse], error) {
	if options == nil || options.ResumeToken == "" {
		resp, err := client.deleteOperation(ctx, resourceGroupName, virtualEnclaveName, enclaveEndpointName, options)
		if err != nil {
			return nil, err
		}
		poller, err := runtime.NewPoller(resp, client.internal.Pipeline(), &runtime.NewPollerOptions[EnclaveEndpointsClientDeleteResponse]{
			Tracer: client.internal.Tracer(),
		})
		return poller, err
	} else {
		return runtime.NewPollerFromResumeToken(options.ResumeToken, client.internal.Pipeline(), &runtime.NewPollerFromResumeTokenOptions[EnclaveEndpointsClientDeleteResponse]{
			Tracer: client.internal.Tracer(),
		})
	}
}

// Delete - Delete a EnclaveEndpointResource
// If the operation fails it returns an *azcore.ResponseError type.
//
// Generated from API version 2025-05-01-preview
func (client *EnclaveEndpointsClient) deleteOperation(ctx context.Context, resourceGroupName string, virtualEnclaveName string, enclaveEndpointName string, options *EnclaveEndpointsClientBeginDeleteOptions) (*http.Response, error) {
	var err error
	const operationName = "EnclaveEndpointsClient.BeginDelete"
	ctx = context.WithValue(ctx, runtime.CtxAPINameKey{}, operationName)
	ctx, endSpan := runtime.StartSpan(ctx, operationName, client.internal.Tracer(), nil)
	defer func() { endSpan(err) }()
	req, err := client.deleteCreateRequest(ctx, resourceGroupName, virtualEnclaveName, enclaveEndpointName, options)
	if err != nil {
		return nil, err
	}
	httpResp, err := client.internal.Pipeline().Do(req)
	if err != nil {
		return nil, err
	}
	if !runtime.HasStatusCode(httpResp, http.StatusAccepted, http.StatusNoContent) {
		err = runtime.NewResponseError(httpResp)
		return nil, err
	}
	return httpResp, nil
}

// deleteCreateRequest creates the Delete request.
func (client *EnclaveEndpointsClient) deleteCreateRequest(ctx context.Context, resourceGroupName string, virtualEnclaveName string, enclaveEndpointName string, _ *EnclaveEndpointsClientBeginDeleteOptions) (*policy.Request, error) {
	urlPath := "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Mission/virtualEnclaves/{virtualEnclaveName}/enclaveEndpoints/{enclaveEndpointName}"
	if client.subscriptionID == "" {
		return nil, errors.New("parameter client.subscriptionID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{subscriptionId}", url.PathEscape(client.subscriptionID))
	if resourceGroupName == "" {
		return nil, errors.New("parameter resourceGroupName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{resourceGroupName}", url.PathEscape(resourceGroupName))
	if virtualEnclaveName == "" {
		return nil, errors.New("parameter virtualEnclaveName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{virtualEnclaveName}", url.PathEscape(virtualEnclaveName))
	if enclaveEndpointName == "" {
		return nil, errors.New("parameter enclaveEndpointName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{enclaveEndpointName}", url.PathEscape(enclaveEndpointName))
	req, err := runtime.NewRequest(ctx, http.MethodDelete, runtime.JoinPaths(client.internal.Endpoint(), urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("api-version", "2025-05-01-preview")
	req.Raw().URL.RawQuery = reqQP.Encode()
	return req, nil
}

// Get - Get a EnclaveEndpointResource
// If the operation fails it returns an *azcore.ResponseError type.
//
// Generated from API version 2025-05-01-preview
//   - resourceGroupName - The name of the resource group. The name is case insensitive.
//   - virtualEnclaveName - The name of the enclaveResource Resource
//   - enclaveEndpointName - The name of the Enclave Endpoint Resource
//   - options - EnclaveEndpointsClientGetOptions contains the optional parameters for the EnclaveEndpointsClient.Get method.
func (client *EnclaveEndpointsClient) Get(ctx context.Context, resourceGroupName string, virtualEnclaveName string, enclaveEndpointName string, options *EnclaveEndpointsClientGetOptions) (EnclaveEndpointsClientGetResponse, error) {
	var err error
	const operationName = "EnclaveEndpointsClient.Get"
	ctx = context.WithValue(ctx, runtime.CtxAPINameKey{}, operationName)
	ctx, endSpan := runtime.StartSpan(ctx, operationName, client.internal.Tracer(), nil)
	defer func() { endSpan(err) }()
	req, err := client.getCreateRequest(ctx, resourceGroupName, virtualEnclaveName, enclaveEndpointName, options)
	if err != nil {
		return EnclaveEndpointsClientGetResponse{}, err
	}
	httpResp, err := client.internal.Pipeline().Do(req)
	if err != nil {
		return EnclaveEndpointsClientGetResponse{}, err
	}
	if !runtime.HasStatusCode(httpResp, http.StatusOK) {
		err = runtime.NewResponseError(httpResp)
		return EnclaveEndpointsClientGetResponse{}, err
	}
	resp, err := client.getHandleResponse(httpResp)
	return resp, err
}

// getCreateRequest creates the Get request.
func (client *EnclaveEndpointsClient) getCreateRequest(ctx context.Context, resourceGroupName string, virtualEnclaveName string, enclaveEndpointName string, _ *EnclaveEndpointsClientGetOptions) (*policy.Request, error) {
	urlPath := "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Mission/virtualEnclaves/{virtualEnclaveName}/enclaveEndpoints/{enclaveEndpointName}"
	if client.subscriptionID == "" {
		return nil, errors.New("parameter client.subscriptionID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{subscriptionId}", url.PathEscape(client.subscriptionID))
	if resourceGroupName == "" {
		return nil, errors.New("parameter resourceGroupName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{resourceGroupName}", url.PathEscape(resourceGroupName))
	if virtualEnclaveName == "" {
		return nil, errors.New("parameter virtualEnclaveName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{virtualEnclaveName}", url.PathEscape(virtualEnclaveName))
	if enclaveEndpointName == "" {
		return nil, errors.New("parameter enclaveEndpointName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{enclaveEndpointName}", url.PathEscape(enclaveEndpointName))
	req, err := runtime.NewRequest(ctx, http.MethodGet, runtime.JoinPaths(client.internal.Endpoint(), urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("api-version", "2025-05-01-preview")
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header["Accept"] = []string{"application/json"}
	return req, nil
}

// getHandleResponse handles the Get response.
func (client *EnclaveEndpointsClient) getHandleResponse(resp *http.Response) (EnclaveEndpointsClientGetResponse, error) {
	result := EnclaveEndpointsClientGetResponse{}
	if err := runtime.UnmarshalAsJSON(resp, &result.EnclaveEndpointResource); err != nil {
		return EnclaveEndpointsClientGetResponse{}, err
	}
	return result, nil
}

// BeginHandleApprovalCreation - Callback that triggers on approval state change.
// If the operation fails it returns an *azcore.ResponseError type.
//
// Generated from API version 2025-05-01-preview
//   - resourceGroupName - The name of the resource group. The name is case insensitive.
//   - virtualEnclaveName - The name of the enclaveResource Resource
//   - enclaveEndpointName - The name of the Enclave Endpoint Resource
//   - body - The content of the action request
//   - options - EnclaveEndpointsClientBeginHandleApprovalCreationOptions contains the optional parameters for the EnclaveEndpointsClient.BeginHandleApprovalCreation
//     method.
func (client *EnclaveEndpointsClient) BeginHandleApprovalCreation(ctx context.Context, resourceGroupName string, virtualEnclaveName string, enclaveEndpointName string, body ApprovalCallbackRequest, options *EnclaveEndpointsClientBeginHandleApprovalCreationOptions) (*runtime.Poller[EnclaveEndpointsClientHandleApprovalCreationResponse], error) {
	if options == nil || options.ResumeToken == "" {
		resp, err := client.handleApprovalCreation(ctx, resourceGroupName, virtualEnclaveName, enclaveEndpointName, body, options)
		if err != nil {
			return nil, err
		}
		poller, err := runtime.NewPoller(resp, client.internal.Pipeline(), &runtime.NewPollerOptions[EnclaveEndpointsClientHandleApprovalCreationResponse]{
			Tracer: client.internal.Tracer(),
		})
		return poller, err
	} else {
		return runtime.NewPollerFromResumeToken(options.ResumeToken, client.internal.Pipeline(), &runtime.NewPollerFromResumeTokenOptions[EnclaveEndpointsClientHandleApprovalCreationResponse]{
			Tracer: client.internal.Tracer(),
		})
	}
}

// HandleApprovalCreation - Callback that triggers on approval state change.
// If the operation fails it returns an *azcore.ResponseError type.
//
// Generated from API version 2025-05-01-preview
func (client *EnclaveEndpointsClient) handleApprovalCreation(ctx context.Context, resourceGroupName string, virtualEnclaveName string, enclaveEndpointName string, body ApprovalCallbackRequest, options *EnclaveEndpointsClientBeginHandleApprovalCreationOptions) (*http.Response, error) {
	var err error
	const operationName = "EnclaveEndpointsClient.BeginHandleApprovalCreation"
	ctx = context.WithValue(ctx, runtime.CtxAPINameKey{}, operationName)
	ctx, endSpan := runtime.StartSpan(ctx, operationName, client.internal.Tracer(), nil)
	defer func() { endSpan(err) }()
	req, err := client.handleApprovalCreationCreateRequest(ctx, resourceGroupName, virtualEnclaveName, enclaveEndpointName, body, options)
	if err != nil {
		return nil, err
	}
	httpResp, err := client.internal.Pipeline().Do(req)
	if err != nil {
		return nil, err
	}
	if !runtime.HasStatusCode(httpResp, http.StatusOK, http.StatusAccepted) {
		err = runtime.NewResponseError(httpResp)
		return nil, err
	}
	return httpResp, nil
}

// handleApprovalCreationCreateRequest creates the HandleApprovalCreation request.
func (client *EnclaveEndpointsClient) handleApprovalCreationCreateRequest(ctx context.Context, resourceGroupName string, virtualEnclaveName string, enclaveEndpointName string, body ApprovalCallbackRequest, _ *EnclaveEndpointsClientBeginHandleApprovalCreationOptions) (*policy.Request, error) {
	urlPath := "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Mission/virtualEnclaves/{virtualEnclaveName}/enclaveEndpoints/{enclaveEndpointName}/handleApprovalCreation"
	if client.subscriptionID == "" {
		return nil, errors.New("parameter client.subscriptionID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{subscriptionId}", url.PathEscape(client.subscriptionID))
	if resourceGroupName == "" {
		return nil, errors.New("parameter resourceGroupName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{resourceGroupName}", url.PathEscape(resourceGroupName))
	if virtualEnclaveName == "" {
		return nil, errors.New("parameter virtualEnclaveName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{virtualEnclaveName}", url.PathEscape(virtualEnclaveName))
	if enclaveEndpointName == "" {
		return nil, errors.New("parameter enclaveEndpointName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{enclaveEndpointName}", url.PathEscape(enclaveEndpointName))
	req, err := runtime.NewRequest(ctx, http.MethodPost, runtime.JoinPaths(client.internal.Endpoint(), urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("api-version", "2025-05-01-preview")
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header["Accept"] = []string{"application/json"}
	req.Raw().Header["Content-Type"] = []string{"application/json"}
	if err := runtime.MarshalAsJSON(req, body); err != nil {
		return nil, err
	}
	return req, nil
}

// BeginHandleApprovalDeletion - Callback that triggers on approval deletion state change.
// If the operation fails it returns an *azcore.ResponseError type.
//
// Generated from API version 2025-05-01-preview
//   - resourceGroupName - The name of the resource group. The name is case insensitive.
//   - virtualEnclaveName - The name of the enclaveResource Resource
//   - enclaveEndpointName - The name of the Enclave Endpoint Resource
//   - body - The content of the action request
//   - options - EnclaveEndpointsClientBeginHandleApprovalDeletionOptions contains the optional parameters for the EnclaveEndpointsClient.BeginHandleApprovalDeletion
//     method.
func (client *EnclaveEndpointsClient) BeginHandleApprovalDeletion(ctx context.Context, resourceGroupName string, virtualEnclaveName string, enclaveEndpointName string, body ApprovalDeletionCallbackRequest, options *EnclaveEndpointsClientBeginHandleApprovalDeletionOptions) (*runtime.Poller[EnclaveEndpointsClientHandleApprovalDeletionResponse], error) {
	if options == nil || options.ResumeToken == "" {
		resp, err := client.handleApprovalDeletion(ctx, resourceGroupName, virtualEnclaveName, enclaveEndpointName, body, options)
		if err != nil {
			return nil, err
		}
		poller, err := runtime.NewPoller(resp, client.internal.Pipeline(), &runtime.NewPollerOptions[EnclaveEndpointsClientHandleApprovalDeletionResponse]{
			Tracer: client.internal.Tracer(),
		})
		return poller, err
	} else {
		return runtime.NewPollerFromResumeToken(options.ResumeToken, client.internal.Pipeline(), &runtime.NewPollerFromResumeTokenOptions[EnclaveEndpointsClientHandleApprovalDeletionResponse]{
			Tracer: client.internal.Tracer(),
		})
	}
}

// HandleApprovalDeletion - Callback that triggers on approval deletion state change.
// If the operation fails it returns an *azcore.ResponseError type.
//
// Generated from API version 2025-05-01-preview
func (client *EnclaveEndpointsClient) handleApprovalDeletion(ctx context.Context, resourceGroupName string, virtualEnclaveName string, enclaveEndpointName string, body ApprovalDeletionCallbackRequest, options *EnclaveEndpointsClientBeginHandleApprovalDeletionOptions) (*http.Response, error) {
	var err error
	const operationName = "EnclaveEndpointsClient.BeginHandleApprovalDeletion"
	ctx = context.WithValue(ctx, runtime.CtxAPINameKey{}, operationName)
	ctx, endSpan := runtime.StartSpan(ctx, operationName, client.internal.Tracer(), nil)
	defer func() { endSpan(err) }()
	req, err := client.handleApprovalDeletionCreateRequest(ctx, resourceGroupName, virtualEnclaveName, enclaveEndpointName, body, options)
	if err != nil {
		return nil, err
	}
	httpResp, err := client.internal.Pipeline().Do(req)
	if err != nil {
		return nil, err
	}
	if !runtime.HasStatusCode(httpResp, http.StatusOK, http.StatusAccepted) {
		err = runtime.NewResponseError(httpResp)
		return nil, err
	}
	return httpResp, nil
}

// handleApprovalDeletionCreateRequest creates the HandleApprovalDeletion request.
func (client *EnclaveEndpointsClient) handleApprovalDeletionCreateRequest(ctx context.Context, resourceGroupName string, virtualEnclaveName string, enclaveEndpointName string, body ApprovalDeletionCallbackRequest, _ *EnclaveEndpointsClientBeginHandleApprovalDeletionOptions) (*policy.Request, error) {
	urlPath := "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Mission/virtualEnclaves/{virtualEnclaveName}/enclaveEndpoints/{enclaveEndpointName}/handleApprovalDeletion"
	if client.subscriptionID == "" {
		return nil, errors.New("parameter client.subscriptionID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{subscriptionId}", url.PathEscape(client.subscriptionID))
	if resourceGroupName == "" {
		return nil, errors.New("parameter resourceGroupName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{resourceGroupName}", url.PathEscape(resourceGroupName))
	if virtualEnclaveName == "" {
		return nil, errors.New("parameter virtualEnclaveName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{virtualEnclaveName}", url.PathEscape(virtualEnclaveName))
	if enclaveEndpointName == "" {
		return nil, errors.New("parameter enclaveEndpointName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{enclaveEndpointName}", url.PathEscape(enclaveEndpointName))
	req, err := runtime.NewRequest(ctx, http.MethodPost, runtime.JoinPaths(client.internal.Endpoint(), urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("api-version", "2025-05-01-preview")
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header["Accept"] = []string{"application/json"}
	req.Raw().Header["Content-Type"] = []string{"application/json"}
	if err := runtime.MarshalAsJSON(req, body); err != nil {
		return nil, err
	}
	return req, nil
}

// NewListByEnclaveResourcePager - List EnclaveEndpointResource resources by EnclaveResource
//
// Generated from API version 2025-05-01-preview
//   - resourceGroupName - The name of the resource group. The name is case insensitive.
//   - virtualEnclaveName - The name of the enclaveResource Resource
//   - options - EnclaveEndpointsClientListByEnclaveResourceOptions contains the optional parameters for the EnclaveEndpointsClient.NewListByEnclaveResourcePager
//     method.
func (client *EnclaveEndpointsClient) NewListByEnclaveResourcePager(resourceGroupName string, virtualEnclaveName string, options *EnclaveEndpointsClientListByEnclaveResourceOptions) *runtime.Pager[EnclaveEndpointsClientListByEnclaveResourceResponse] {
	return runtime.NewPager(runtime.PagingHandler[EnclaveEndpointsClientListByEnclaveResourceResponse]{
		More: func(page EnclaveEndpointsClientListByEnclaveResourceResponse) bool {
			return page.NextLink != nil && len(*page.NextLink) > 0
		},
		Fetcher: func(ctx context.Context, page *EnclaveEndpointsClientListByEnclaveResourceResponse) (EnclaveEndpointsClientListByEnclaveResourceResponse, error) {
			ctx = context.WithValue(ctx, runtime.CtxAPINameKey{}, "EnclaveEndpointsClient.NewListByEnclaveResourcePager")
			nextLink := ""
			if page != nil {
				nextLink = *page.NextLink
			}
			resp, err := runtime.FetcherForNextLink(ctx, client.internal.Pipeline(), nextLink, func(ctx context.Context) (*policy.Request, error) {
				return client.listByEnclaveResourceCreateRequest(ctx, resourceGroupName, virtualEnclaveName, options)
			}, nil)
			if err != nil {
				return EnclaveEndpointsClientListByEnclaveResourceResponse{}, err
			}
			return client.listByEnclaveResourceHandleResponse(resp)
		},
		Tracer: client.internal.Tracer(),
	})
}

// listByEnclaveResourceCreateRequest creates the ListByEnclaveResource request.
func (client *EnclaveEndpointsClient) listByEnclaveResourceCreateRequest(ctx context.Context, resourceGroupName string, virtualEnclaveName string, _ *EnclaveEndpointsClientListByEnclaveResourceOptions) (*policy.Request, error) {
	urlPath := "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Mission/virtualEnclaves/{virtualEnclaveName}/enclaveEndpoints"
	if client.subscriptionID == "" {
		return nil, errors.New("parameter client.subscriptionID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{subscriptionId}", url.PathEscape(client.subscriptionID))
	if resourceGroupName == "" {
		return nil, errors.New("parameter resourceGroupName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{resourceGroupName}", url.PathEscape(resourceGroupName))
	if virtualEnclaveName == "" {
		return nil, errors.New("parameter virtualEnclaveName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{virtualEnclaveName}", url.PathEscape(virtualEnclaveName))
	req, err := runtime.NewRequest(ctx, http.MethodGet, runtime.JoinPaths(client.internal.Endpoint(), urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("api-version", "2025-05-01-preview")
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header["Accept"] = []string{"application/json"}
	return req, nil
}

// listByEnclaveResourceHandleResponse handles the ListByEnclaveResource response.
func (client *EnclaveEndpointsClient) listByEnclaveResourceHandleResponse(resp *http.Response) (EnclaveEndpointsClientListByEnclaveResourceResponse, error) {
	result := EnclaveEndpointsClientListByEnclaveResourceResponse{}
	if err := runtime.UnmarshalAsJSON(resp, &result.EnclaveEndpointResourceListResult); err != nil {
		return EnclaveEndpointsClientListByEnclaveResourceResponse{}, err
	}
	return result, nil
}

// NewListBySubscriptionPager - List EnclaveEndpointResource resources by subscription ID
//
// Generated from API version 2025-05-01-preview
//   - virtualEnclaveName - The name of the enclaveResource Resource
//   - options - EnclaveEndpointsClientListBySubscriptionOptions contains the optional parameters for the EnclaveEndpointsClient.NewListBySubscriptionPager
//     method.
func (client *EnclaveEndpointsClient) NewListBySubscriptionPager(virtualEnclaveName string, options *EnclaveEndpointsClientListBySubscriptionOptions) *runtime.Pager[EnclaveEndpointsClientListBySubscriptionResponse] {
	return runtime.NewPager(runtime.PagingHandler[EnclaveEndpointsClientListBySubscriptionResponse]{
		More: func(page EnclaveEndpointsClientListBySubscriptionResponse) bool {
			return page.NextLink != nil && len(*page.NextLink) > 0
		},
		Fetcher: func(ctx context.Context, page *EnclaveEndpointsClientListBySubscriptionResponse) (EnclaveEndpointsClientListBySubscriptionResponse, error) {
			ctx = context.WithValue(ctx, runtime.CtxAPINameKey{}, "EnclaveEndpointsClient.NewListBySubscriptionPager")
			nextLink := ""
			if page != nil {
				nextLink = *page.NextLink
			}
			resp, err := runtime.FetcherForNextLink(ctx, client.internal.Pipeline(), nextLink, func(ctx context.Context) (*policy.Request, error) {
				return client.listBySubscriptionCreateRequest(ctx, virtualEnclaveName, options)
			}, nil)
			if err != nil {
				return EnclaveEndpointsClientListBySubscriptionResponse{}, err
			}
			return client.listBySubscriptionHandleResponse(resp)
		},
		Tracer: client.internal.Tracer(),
	})
}

// listBySubscriptionCreateRequest creates the ListBySubscription request.
func (client *EnclaveEndpointsClient) listBySubscriptionCreateRequest(ctx context.Context, virtualEnclaveName string, _ *EnclaveEndpointsClientListBySubscriptionOptions) (*policy.Request, error) {
	urlPath := "/subscriptions/{subscriptionId}/providers/Microsoft.Mission/virtualEnclaves/{virtualEnclaveName}/enclaveEndpoints"
	if client.subscriptionID == "" {
		return nil, errors.New("parameter client.subscriptionID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{subscriptionId}", url.PathEscape(client.subscriptionID))
	if virtualEnclaveName == "" {
		return nil, errors.New("parameter virtualEnclaveName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{virtualEnclaveName}", url.PathEscape(virtualEnclaveName))
	req, err := runtime.NewRequest(ctx, http.MethodGet, runtime.JoinPaths(client.internal.Endpoint(), urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("api-version", "2025-05-01-preview")
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header["Accept"] = []string{"application/json"}
	return req, nil
}

// listBySubscriptionHandleResponse handles the ListBySubscription response.
func (client *EnclaveEndpointsClient) listBySubscriptionHandleResponse(resp *http.Response) (EnclaveEndpointsClientListBySubscriptionResponse, error) {
	result := EnclaveEndpointsClientListBySubscriptionResponse{}
	if err := runtime.UnmarshalAsJSON(resp, &result.EnclaveEndpointResourceListResult); err != nil {
		return EnclaveEndpointsClientListBySubscriptionResponse{}, err
	}
	return result, nil
}

// BeginUpdate - Update a EnclaveEndpointResource
// If the operation fails it returns an *azcore.ResponseError type.
//
// Generated from API version 2025-05-01-preview
//   - resourceGroupName - The name of the resource group. The name is case insensitive.
//   - virtualEnclaveName - The name of the enclaveResource Resource
//   - enclaveEndpointName - The name of the Enclave Endpoint Resource
//   - properties - The resource properties to be updated.
//   - options - EnclaveEndpointsClientBeginUpdateOptions contains the optional parameters for the EnclaveEndpointsClient.BeginUpdate
//     method.
func (client *EnclaveEndpointsClient) BeginUpdate(ctx context.Context, resourceGroupName string, virtualEnclaveName string, enclaveEndpointName string, properties EnclaveEndpointPatchModel, options *EnclaveEndpointsClientBeginUpdateOptions) (*runtime.Poller[EnclaveEndpointsClientUpdateResponse], error) {
	if options == nil || options.ResumeToken == "" {
		resp, err := client.update(ctx, resourceGroupName, virtualEnclaveName, enclaveEndpointName, properties, options)
		if err != nil {
			return nil, err
		}
		poller, err := runtime.NewPoller(resp, client.internal.Pipeline(), &runtime.NewPollerOptions[EnclaveEndpointsClientUpdateResponse]{
			Tracer: client.internal.Tracer(),
		})
		return poller, err
	} else {
		return runtime.NewPollerFromResumeToken(options.ResumeToken, client.internal.Pipeline(), &runtime.NewPollerFromResumeTokenOptions[EnclaveEndpointsClientUpdateResponse]{
			Tracer: client.internal.Tracer(),
		})
	}
}

// Update - Update a EnclaveEndpointResource
// If the operation fails it returns an *azcore.ResponseError type.
//
// Generated from API version 2025-05-01-preview
func (client *EnclaveEndpointsClient) update(ctx context.Context, resourceGroupName string, virtualEnclaveName string, enclaveEndpointName string, properties EnclaveEndpointPatchModel, options *EnclaveEndpointsClientBeginUpdateOptions) (*http.Response, error) {
	var err error
	const operationName = "EnclaveEndpointsClient.BeginUpdate"
	ctx = context.WithValue(ctx, runtime.CtxAPINameKey{}, operationName)
	ctx, endSpan := runtime.StartSpan(ctx, operationName, client.internal.Tracer(), nil)
	defer func() { endSpan(err) }()
	req, err := client.updateCreateRequest(ctx, resourceGroupName, virtualEnclaveName, enclaveEndpointName, properties, options)
	if err != nil {
		return nil, err
	}
	httpResp, err := client.internal.Pipeline().Do(req)
	if err != nil {
		return nil, err
	}
	if !runtime.HasStatusCode(httpResp, http.StatusOK, http.StatusAccepted) {
		err = runtime.NewResponseError(httpResp)
		return nil, err
	}
	return httpResp, nil
}

// updateCreateRequest creates the Update request.
func (client *EnclaveEndpointsClient) updateCreateRequest(ctx context.Context, resourceGroupName string, virtualEnclaveName string, enclaveEndpointName string, properties EnclaveEndpointPatchModel, _ *EnclaveEndpointsClientBeginUpdateOptions) (*policy.Request, error) {
	urlPath := "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Mission/virtualEnclaves/{virtualEnclaveName}/enclaveEndpoints/{enclaveEndpointName}"
	if client.subscriptionID == "" {
		return nil, errors.New("parameter client.subscriptionID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{subscriptionId}", url.PathEscape(client.subscriptionID))
	if resourceGroupName == "" {
		return nil, errors.New("parameter resourceGroupName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{resourceGroupName}", url.PathEscape(resourceGroupName))
	if virtualEnclaveName == "" {
		return nil, errors.New("parameter virtualEnclaveName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{virtualEnclaveName}", url.PathEscape(virtualEnclaveName))
	if enclaveEndpointName == "" {
		return nil, errors.New("parameter enclaveEndpointName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{enclaveEndpointName}", url.PathEscape(enclaveEndpointName))
	req, err := runtime.NewRequest(ctx, http.MethodPatch, runtime.JoinPaths(client.internal.Endpoint(), urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("api-version", "2025-05-01-preview")
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header["Accept"] = []string{"application/json"}
	req.Raw().Header["Content-Type"] = []string{"application/json"}
	if err := runtime.MarshalAsJSON(req, properties); err != nil {
		return nil, err
	}
	return req, nil
}
