// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) Go Code Generator. DO NOT EDIT.

package fake

import (
	"context"
	"errors"
	"fmt"
	azfake "github.com/Azure/azure-sdk-for-go/sdk/azcore/fake"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/fake/server"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/runtime"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/to"
	"github.com/Azure/azure-sdk-for-go/sdk/resourcemanager/virtualenclaves/armvirtualenclaves"
	"net/http"
	"net/url"
	"regexp"
)

// ApprovalServer is a fake server for instances of the armvirtualenclaves.ApprovalClient type.
type ApprovalServer struct {
	// BeginCreateOrUpdate is the fake for method ApprovalClient.BeginCreateOrUpdate
	// HTTP status codes to indicate success: http.StatusOK, http.StatusCreated
	BeginCreateOrUpdate func(ctx context.Context, resourceURI string, approvalName string, resource armvirtualenclaves.ApprovalResource, options *armvirtualenclaves.ApprovalClientBeginCreateOrUpdateOptions) (resp azfake.PollerResponder[armvirtualenclaves.ApprovalClientCreateOrUpdateResponse], errResp azfake.ErrorResponder)

	// BeginDelete is the fake for method ApprovalClient.BeginDelete
	// HTTP status codes to indicate success: http.StatusOK, http.StatusAccepted, http.StatusNoContent
	BeginDelete func(ctx context.Context, resourceURI string, approvalName string, options *armvirtualenclaves.ApprovalClientBeginDeleteOptions) (resp azfake.PollerResponder[armvirtualenclaves.ApprovalClientDeleteResponse], errResp azfake.ErrorResponder)

	// Get is the fake for method ApprovalClient.Get
	// HTTP status codes to indicate success: http.StatusOK
	Get func(ctx context.Context, resourceURI string, approvalName string, options *armvirtualenclaves.ApprovalClientGetOptions) (resp azfake.Responder[armvirtualenclaves.ApprovalClientGetResponse], errResp azfake.ErrorResponder)

	// NewListByParentPager is the fake for method ApprovalClient.NewListByParentPager
	// HTTP status codes to indicate success: http.StatusOK
	NewListByParentPager func(resourceURI string, options *armvirtualenclaves.ApprovalClientListByParentOptions) (resp azfake.PagerResponder[armvirtualenclaves.ApprovalClientListByParentResponse])

	// BeginNotifyInitiator is the fake for method ApprovalClient.BeginNotifyInitiator
	// HTTP status codes to indicate success: http.StatusOK, http.StatusAccepted
	BeginNotifyInitiator func(ctx context.Context, resourceURI string, approvalName string, body armvirtualenclaves.ApprovalActionRequest, options *armvirtualenclaves.ApprovalClientBeginNotifyInitiatorOptions) (resp azfake.PollerResponder[armvirtualenclaves.ApprovalClientNotifyInitiatorResponse], errResp azfake.ErrorResponder)

	// BeginUpdate is the fake for method ApprovalClient.BeginUpdate
	// HTTP status codes to indicate success: http.StatusOK, http.StatusAccepted
	BeginUpdate func(ctx context.Context, resourceURI string, approvalName string, properties armvirtualenclaves.ApprovalPatchModel, options *armvirtualenclaves.ApprovalClientBeginUpdateOptions) (resp azfake.PollerResponder[armvirtualenclaves.ApprovalClientUpdateResponse], errResp azfake.ErrorResponder)
}

// NewApprovalServerTransport creates a new instance of ApprovalServerTransport with the provided implementation.
// The returned ApprovalServerTransport instance is connected to an instance of armvirtualenclaves.ApprovalClient via the
// azcore.ClientOptions.Transporter field in the client's constructor parameters.
func NewApprovalServerTransport(srv *ApprovalServer) *ApprovalServerTransport {
	return &ApprovalServerTransport{
		srv:                  srv,
		beginCreateOrUpdate:  newTracker[azfake.PollerResponder[armvirtualenclaves.ApprovalClientCreateOrUpdateResponse]](),
		beginDelete:          newTracker[azfake.PollerResponder[armvirtualenclaves.ApprovalClientDeleteResponse]](),
		newListByParentPager: newTracker[azfake.PagerResponder[armvirtualenclaves.ApprovalClientListByParentResponse]](),
		beginNotifyInitiator: newTracker[azfake.PollerResponder[armvirtualenclaves.ApprovalClientNotifyInitiatorResponse]](),
		beginUpdate:          newTracker[azfake.PollerResponder[armvirtualenclaves.ApprovalClientUpdateResponse]](),
	}
}

// ApprovalServerTransport connects instances of armvirtualenclaves.ApprovalClient to instances of ApprovalServer.
// Don't use this type directly, use NewApprovalServerTransport instead.
type ApprovalServerTransport struct {
	srv                  *ApprovalServer
	beginCreateOrUpdate  *tracker[azfake.PollerResponder[armvirtualenclaves.ApprovalClientCreateOrUpdateResponse]]
	beginDelete          *tracker[azfake.PollerResponder[armvirtualenclaves.ApprovalClientDeleteResponse]]
	newListByParentPager *tracker[azfake.PagerResponder[armvirtualenclaves.ApprovalClientListByParentResponse]]
	beginNotifyInitiator *tracker[azfake.PollerResponder[armvirtualenclaves.ApprovalClientNotifyInitiatorResponse]]
	beginUpdate          *tracker[azfake.PollerResponder[armvirtualenclaves.ApprovalClientUpdateResponse]]
}

// Do implements the policy.Transporter interface for ApprovalServerTransport.
func (a *ApprovalServerTransport) Do(req *http.Request) (*http.Response, error) {
	rawMethod := req.Context().Value(runtime.CtxAPINameKey{})
	method, ok := rawMethod.(string)
	if !ok {
		return nil, nonRetriableError{errors.New("unable to dispatch request, missing value for CtxAPINameKey")}
	}

	return a.dispatchToMethodFake(req, method)
}

func (a *ApprovalServerTransport) dispatchToMethodFake(req *http.Request, method string) (*http.Response, error) {
	resultChan := make(chan result)
	defer close(resultChan)

	go func() {
		var intercepted bool
		var res result
		if approvalServerTransportInterceptor != nil {
			res.resp, res.err, intercepted = approvalServerTransportInterceptor.Do(req)
		}
		if !intercepted {
			switch method {
			case "ApprovalClient.BeginCreateOrUpdate":
				res.resp, res.err = a.dispatchBeginCreateOrUpdate(req)
			case "ApprovalClient.BeginDelete":
				res.resp, res.err = a.dispatchBeginDelete(req)
			case "ApprovalClient.Get":
				res.resp, res.err = a.dispatchGet(req)
			case "ApprovalClient.NewListByParentPager":
				res.resp, res.err = a.dispatchNewListByParentPager(req)
			case "ApprovalClient.BeginNotifyInitiator":
				res.resp, res.err = a.dispatchBeginNotifyInitiator(req)
			case "ApprovalClient.BeginUpdate":
				res.resp, res.err = a.dispatchBeginUpdate(req)
			default:
				res.err = fmt.Errorf("unhandled API %s", method)
			}

		}
		select {
		case resultChan <- res:
		case <-req.Context().Done():
		}
	}()

	select {
	case <-req.Context().Done():
		return nil, req.Context().Err()
	case res := <-resultChan:
		return res.resp, res.err
	}
}

func (a *ApprovalServerTransport) dispatchBeginCreateOrUpdate(req *http.Request) (*http.Response, error) {
	if a.srv.BeginCreateOrUpdate == nil {
		return nil, &nonRetriableError{errors.New("fake for method BeginCreateOrUpdate not implemented")}
	}
	beginCreateOrUpdate := a.beginCreateOrUpdate.get(req)
	if beginCreateOrUpdate == nil {
		const regexStr = `/(?P<resourceUri>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/providers/Microsoft\.Mission/approvals/(?P<approvalName>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)`
		regex := regexp.MustCompile(regexStr)
		matches := regex.FindStringSubmatch(req.URL.EscapedPath())
		if len(matches) < 3 {
			return nil, fmt.Errorf("failed to parse path %s", req.URL.Path)
		}
		body, err := server.UnmarshalRequestAsJSON[armvirtualenclaves.ApprovalResource](req)
		if err != nil {
			return nil, err
		}
		resourceURIParam, err := url.PathUnescape(matches[regex.SubexpIndex("resourceUri")])
		if err != nil {
			return nil, err
		}
		approvalNameParam, err := url.PathUnescape(matches[regex.SubexpIndex("approvalName")])
		if err != nil {
			return nil, err
		}
		respr, errRespr := a.srv.BeginCreateOrUpdate(req.Context(), resourceURIParam, approvalNameParam, body, nil)
		if respErr := server.GetError(errRespr, req); respErr != nil {
			return nil, respErr
		}
		beginCreateOrUpdate = &respr
		a.beginCreateOrUpdate.add(req, beginCreateOrUpdate)
	}

	resp, err := server.PollerResponderNext(beginCreateOrUpdate, req)
	if err != nil {
		return nil, err
	}

	if !contains([]int{http.StatusOK, http.StatusCreated}, resp.StatusCode) {
		a.beginCreateOrUpdate.remove(req)
		return nil, &nonRetriableError{fmt.Errorf("unexpected status code %d. acceptable values are http.StatusOK, http.StatusCreated", resp.StatusCode)}
	}
	if !server.PollerResponderMore(beginCreateOrUpdate) {
		a.beginCreateOrUpdate.remove(req)
	}

	return resp, nil
}

func (a *ApprovalServerTransport) dispatchBeginDelete(req *http.Request) (*http.Response, error) {
	if a.srv.BeginDelete == nil {
		return nil, &nonRetriableError{errors.New("fake for method BeginDelete not implemented")}
	}
	beginDelete := a.beginDelete.get(req)
	if beginDelete == nil {
		const regexStr = `/(?P<resourceUri>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/providers/Microsoft\.Mission/approvals/(?P<approvalName>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)`
		regex := regexp.MustCompile(regexStr)
		matches := regex.FindStringSubmatch(req.URL.EscapedPath())
		if len(matches) < 3 {
			return nil, fmt.Errorf("failed to parse path %s", req.URL.Path)
		}
		resourceURIParam, err := url.PathUnescape(matches[regex.SubexpIndex("resourceUri")])
		if err != nil {
			return nil, err
		}
		approvalNameParam, err := url.PathUnescape(matches[regex.SubexpIndex("approvalName")])
		if err != nil {
			return nil, err
		}
		respr, errRespr := a.srv.BeginDelete(req.Context(), resourceURIParam, approvalNameParam, nil)
		if respErr := server.GetError(errRespr, req); respErr != nil {
			return nil, respErr
		}
		beginDelete = &respr
		a.beginDelete.add(req, beginDelete)
	}

	resp, err := server.PollerResponderNext(beginDelete, req)
	if err != nil {
		return nil, err
	}

	if !contains([]int{http.StatusOK, http.StatusAccepted, http.StatusNoContent}, resp.StatusCode) {
		a.beginDelete.remove(req)
		return nil, &nonRetriableError{fmt.Errorf("unexpected status code %d. acceptable values are http.StatusOK, http.StatusAccepted, http.StatusNoContent", resp.StatusCode)}
	}
	if !server.PollerResponderMore(beginDelete) {
		a.beginDelete.remove(req)
	}

	return resp, nil
}

func (a *ApprovalServerTransport) dispatchGet(req *http.Request) (*http.Response, error) {
	if a.srv.Get == nil {
		return nil, &nonRetriableError{errors.New("fake for method Get not implemented")}
	}
	const regexStr = `/(?P<resourceUri>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/providers/Microsoft\.Mission/approvals/(?P<approvalName>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)`
	regex := regexp.MustCompile(regexStr)
	matches := regex.FindStringSubmatch(req.URL.EscapedPath())
	if len(matches) < 3 {
		return nil, fmt.Errorf("failed to parse path %s", req.URL.Path)
	}
	resourceURIParam, err := url.PathUnescape(matches[regex.SubexpIndex("resourceUri")])
	if err != nil {
		return nil, err
	}
	approvalNameParam, err := url.PathUnescape(matches[regex.SubexpIndex("approvalName")])
	if err != nil {
		return nil, err
	}
	respr, errRespr := a.srv.Get(req.Context(), resourceURIParam, approvalNameParam, nil)
	if respErr := server.GetError(errRespr, req); respErr != nil {
		return nil, respErr
	}
	respContent := server.GetResponseContent(respr)
	if !contains([]int{http.StatusOK}, respContent.HTTPStatus) {
		return nil, &nonRetriableError{fmt.Errorf("unexpected status code %d. acceptable values are http.StatusOK", respContent.HTTPStatus)}
	}
	resp, err := server.MarshalResponseAsJSON(respContent, server.GetResponse(respr).ApprovalResource, req)
	if err != nil {
		return nil, err
	}
	return resp, nil
}

func (a *ApprovalServerTransport) dispatchNewListByParentPager(req *http.Request) (*http.Response, error) {
	if a.srv.NewListByParentPager == nil {
		return nil, &nonRetriableError{errors.New("fake for method NewListByParentPager not implemented")}
	}
	newListByParentPager := a.newListByParentPager.get(req)
	if newListByParentPager == nil {
		const regexStr = `/(?P<resourceUri>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/providers/Microsoft\.Mission/approvals`
		regex := regexp.MustCompile(regexStr)
		matches := regex.FindStringSubmatch(req.URL.EscapedPath())
		if len(matches) < 2 {
			return nil, fmt.Errorf("failed to parse path %s", req.URL.Path)
		}
		resourceURIParam, err := url.PathUnescape(matches[regex.SubexpIndex("resourceUri")])
		if err != nil {
			return nil, err
		}
		resp := a.srv.NewListByParentPager(resourceURIParam, nil)
		newListByParentPager = &resp
		a.newListByParentPager.add(req, newListByParentPager)
		server.PagerResponderInjectNextLinks(newListByParentPager, req, func(page *armvirtualenclaves.ApprovalClientListByParentResponse, createLink func() string) {
			page.NextLink = to.Ptr(createLink())
		})
	}
	resp, err := server.PagerResponderNext(newListByParentPager, req)
	if err != nil {
		return nil, err
	}
	if !contains([]int{http.StatusOK}, resp.StatusCode) {
		a.newListByParentPager.remove(req)
		return nil, &nonRetriableError{fmt.Errorf("unexpected status code %d. acceptable values are http.StatusOK", resp.StatusCode)}
	}
	if !server.PagerResponderMore(newListByParentPager) {
		a.newListByParentPager.remove(req)
	}
	return resp, nil
}

func (a *ApprovalServerTransport) dispatchBeginNotifyInitiator(req *http.Request) (*http.Response, error) {
	if a.srv.BeginNotifyInitiator == nil {
		return nil, &nonRetriableError{errors.New("fake for method BeginNotifyInitiator not implemented")}
	}
	beginNotifyInitiator := a.beginNotifyInitiator.get(req)
	if beginNotifyInitiator == nil {
		const regexStr = `/(?P<resourceUri>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/providers/Microsoft\.Mission/approvals/(?P<approvalName>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/notifyInitiator`
		regex := regexp.MustCompile(regexStr)
		matches := regex.FindStringSubmatch(req.URL.EscapedPath())
		if len(matches) < 3 {
			return nil, fmt.Errorf("failed to parse path %s", req.URL.Path)
		}
		body, err := server.UnmarshalRequestAsJSON[armvirtualenclaves.ApprovalActionRequest](req)
		if err != nil {
			return nil, err
		}
		resourceURIParam, err := url.PathUnescape(matches[regex.SubexpIndex("resourceUri")])
		if err != nil {
			return nil, err
		}
		approvalNameParam, err := url.PathUnescape(matches[regex.SubexpIndex("approvalName")])
		if err != nil {
			return nil, err
		}
		respr, errRespr := a.srv.BeginNotifyInitiator(req.Context(), resourceURIParam, approvalNameParam, body, nil)
		if respErr := server.GetError(errRespr, req); respErr != nil {
			return nil, respErr
		}
		beginNotifyInitiator = &respr
		a.beginNotifyInitiator.add(req, beginNotifyInitiator)
	}

	resp, err := server.PollerResponderNext(beginNotifyInitiator, req)
	if err != nil {
		return nil, err
	}

	if !contains([]int{http.StatusOK, http.StatusAccepted}, resp.StatusCode) {
		a.beginNotifyInitiator.remove(req)
		return nil, &nonRetriableError{fmt.Errorf("unexpected status code %d. acceptable values are http.StatusOK, http.StatusAccepted", resp.StatusCode)}
	}
	if !server.PollerResponderMore(beginNotifyInitiator) {
		a.beginNotifyInitiator.remove(req)
	}

	return resp, nil
}

func (a *ApprovalServerTransport) dispatchBeginUpdate(req *http.Request) (*http.Response, error) {
	if a.srv.BeginUpdate == nil {
		return nil, &nonRetriableError{errors.New("fake for method BeginUpdate not implemented")}
	}
	beginUpdate := a.beginUpdate.get(req)
	if beginUpdate == nil {
		const regexStr = `/(?P<resourceUri>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/providers/Microsoft\.Mission/approvals/(?P<approvalName>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)`
		regex := regexp.MustCompile(regexStr)
		matches := regex.FindStringSubmatch(req.URL.EscapedPath())
		if len(matches) < 3 {
			return nil, fmt.Errorf("failed to parse path %s", req.URL.Path)
		}
		body, err := server.UnmarshalRequestAsJSON[armvirtualenclaves.ApprovalPatchModel](req)
		if err != nil {
			return nil, err
		}
		resourceURIParam, err := url.PathUnescape(matches[regex.SubexpIndex("resourceUri")])
		if err != nil {
			return nil, err
		}
		approvalNameParam, err := url.PathUnescape(matches[regex.SubexpIndex("approvalName")])
		if err != nil {
			return nil, err
		}
		respr, errRespr := a.srv.BeginUpdate(req.Context(), resourceURIParam, approvalNameParam, body, nil)
		if respErr := server.GetError(errRespr, req); respErr != nil {
			return nil, respErr
		}
		beginUpdate = &respr
		a.beginUpdate.add(req, beginUpdate)
	}

	resp, err := server.PollerResponderNext(beginUpdate, req)
	if err != nil {
		return nil, err
	}

	if !contains([]int{http.StatusOK, http.StatusAccepted}, resp.StatusCode) {
		a.beginUpdate.remove(req)
		return nil, &nonRetriableError{fmt.Errorf("unexpected status code %d. acceptable values are http.StatusOK, http.StatusAccepted", resp.StatusCode)}
	}
	if !server.PollerResponderMore(beginUpdate) {
		a.beginUpdate.remove(req)
	}

	return resp, nil
}

// set this to conditionally intercept incoming requests to ApprovalServerTransport
var approvalServerTransportInterceptor interface {
	// Do returns true if the server transport should use the returned response/error
	Do(*http.Request) (*http.Response, error, bool)
}
