// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) Go Code Generator. DO NOT EDIT.

package fake

import (
	"context"
	"errors"
	"fmt"
	azfake "github.com/Azure/azure-sdk-for-go/sdk/azcore/fake"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/fake/server"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/runtime"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/to"
	"github.com/Azure/azure-sdk-for-go/sdk/resourcemanager/virtualenclaves/armvirtualenclaves"
	"net/http"
	"net/url"
	"regexp"
)

// CommunityEndpointsServer is a fake server for instances of the armvirtualenclaves.CommunityEndpointsClient type.
type CommunityEndpointsServer struct {
	// BeginCreateOrUpdate is the fake for method CommunityEndpointsClient.BeginCreateOrUpdate
	// HTTP status codes to indicate success: http.StatusOK, http.StatusCreated
	BeginCreateOrUpdate func(ctx context.Context, resourceGroupName string, communityName string, communityEndpointName string, resource armvirtualenclaves.CommunityEndpointResource, options *armvirtualenclaves.CommunityEndpointsClientBeginCreateOrUpdateOptions) (resp azfake.PollerResponder[armvirtualenclaves.CommunityEndpointsClientCreateOrUpdateResponse], errResp azfake.ErrorResponder)

	// BeginDelete is the fake for method CommunityEndpointsClient.BeginDelete
	// HTTP status codes to indicate success: http.StatusOK, http.StatusAccepted, http.StatusNoContent
	BeginDelete func(ctx context.Context, resourceGroupName string, communityName string, communityEndpointName string, options *armvirtualenclaves.CommunityEndpointsClientBeginDeleteOptions) (resp azfake.PollerResponder[armvirtualenclaves.CommunityEndpointsClientDeleteResponse], errResp azfake.ErrorResponder)

	// Get is the fake for method CommunityEndpointsClient.Get
	// HTTP status codes to indicate success: http.StatusOK
	Get func(ctx context.Context, resourceGroupName string, communityName string, communityEndpointName string, options *armvirtualenclaves.CommunityEndpointsClientGetOptions) (resp azfake.Responder[armvirtualenclaves.CommunityEndpointsClientGetResponse], errResp azfake.ErrorResponder)

	// BeginHandleApprovalCreation is the fake for method CommunityEndpointsClient.BeginHandleApprovalCreation
	// HTTP status codes to indicate success: http.StatusOK, http.StatusAccepted
	BeginHandleApprovalCreation func(ctx context.Context, resourceGroupName string, communityName string, communityEndpointName string, body armvirtualenclaves.ApprovalCallbackRequest, options *armvirtualenclaves.CommunityEndpointsClientBeginHandleApprovalCreationOptions) (resp azfake.PollerResponder[armvirtualenclaves.CommunityEndpointsClientHandleApprovalCreationResponse], errResp azfake.ErrorResponder)

	// BeginHandleApprovalDeletion is the fake for method CommunityEndpointsClient.BeginHandleApprovalDeletion
	// HTTP status codes to indicate success: http.StatusOK, http.StatusAccepted
	BeginHandleApprovalDeletion func(ctx context.Context, resourceGroupName string, communityName string, communityEndpointName string, body armvirtualenclaves.ApprovalDeletionCallbackRequest, options *armvirtualenclaves.CommunityEndpointsClientBeginHandleApprovalDeletionOptions) (resp azfake.PollerResponder[armvirtualenclaves.CommunityEndpointsClientHandleApprovalDeletionResponse], errResp azfake.ErrorResponder)

	// NewListByCommunityResourcePager is the fake for method CommunityEndpointsClient.NewListByCommunityResourcePager
	// HTTP status codes to indicate success: http.StatusOK
	NewListByCommunityResourcePager func(resourceGroupName string, communityName string, options *armvirtualenclaves.CommunityEndpointsClientListByCommunityResourceOptions) (resp azfake.PagerResponder[armvirtualenclaves.CommunityEndpointsClientListByCommunityResourceResponse])

	// NewListBySubscriptionPager is the fake for method CommunityEndpointsClient.NewListBySubscriptionPager
	// HTTP status codes to indicate success: http.StatusOK
	NewListBySubscriptionPager func(communityName string, options *armvirtualenclaves.CommunityEndpointsClientListBySubscriptionOptions) (resp azfake.PagerResponder[armvirtualenclaves.CommunityEndpointsClientListBySubscriptionResponse])

	// BeginUpdate is the fake for method CommunityEndpointsClient.BeginUpdate
	// HTTP status codes to indicate success: http.StatusOK, http.StatusAccepted
	BeginUpdate func(ctx context.Context, resourceGroupName string, communityName string, communityEndpointName string, properties armvirtualenclaves.CommunityEndpointPatchModel, options *armvirtualenclaves.CommunityEndpointsClientBeginUpdateOptions) (resp azfake.PollerResponder[armvirtualenclaves.CommunityEndpointsClientUpdateResponse], errResp azfake.ErrorResponder)
}

// NewCommunityEndpointsServerTransport creates a new instance of CommunityEndpointsServerTransport with the provided implementation.
// The returned CommunityEndpointsServerTransport instance is connected to an instance of armvirtualenclaves.CommunityEndpointsClient via the
// azcore.ClientOptions.Transporter field in the client's constructor parameters.
func NewCommunityEndpointsServerTransport(srv *CommunityEndpointsServer) *CommunityEndpointsServerTransport {
	return &CommunityEndpointsServerTransport{
		srv:                             srv,
		beginCreateOrUpdate:             newTracker[azfake.PollerResponder[armvirtualenclaves.CommunityEndpointsClientCreateOrUpdateResponse]](),
		beginDelete:                     newTracker[azfake.PollerResponder[armvirtualenclaves.CommunityEndpointsClientDeleteResponse]](),
		beginHandleApprovalCreation:     newTracker[azfake.PollerResponder[armvirtualenclaves.CommunityEndpointsClientHandleApprovalCreationResponse]](),
		beginHandleApprovalDeletion:     newTracker[azfake.PollerResponder[armvirtualenclaves.CommunityEndpointsClientHandleApprovalDeletionResponse]](),
		newListByCommunityResourcePager: newTracker[azfake.PagerResponder[armvirtualenclaves.CommunityEndpointsClientListByCommunityResourceResponse]](),
		newListBySubscriptionPager:      newTracker[azfake.PagerResponder[armvirtualenclaves.CommunityEndpointsClientListBySubscriptionResponse]](),
		beginUpdate:                     newTracker[azfake.PollerResponder[armvirtualenclaves.CommunityEndpointsClientUpdateResponse]](),
	}
}

// CommunityEndpointsServerTransport connects instances of armvirtualenclaves.CommunityEndpointsClient to instances of CommunityEndpointsServer.
// Don't use this type directly, use NewCommunityEndpointsServerTransport instead.
type CommunityEndpointsServerTransport struct {
	srv                             *CommunityEndpointsServer
	beginCreateOrUpdate             *tracker[azfake.PollerResponder[armvirtualenclaves.CommunityEndpointsClientCreateOrUpdateResponse]]
	beginDelete                     *tracker[azfake.PollerResponder[armvirtualenclaves.CommunityEndpointsClientDeleteResponse]]
	beginHandleApprovalCreation     *tracker[azfake.PollerResponder[armvirtualenclaves.CommunityEndpointsClientHandleApprovalCreationResponse]]
	beginHandleApprovalDeletion     *tracker[azfake.PollerResponder[armvirtualenclaves.CommunityEndpointsClientHandleApprovalDeletionResponse]]
	newListByCommunityResourcePager *tracker[azfake.PagerResponder[armvirtualenclaves.CommunityEndpointsClientListByCommunityResourceResponse]]
	newListBySubscriptionPager      *tracker[azfake.PagerResponder[armvirtualenclaves.CommunityEndpointsClientListBySubscriptionResponse]]
	beginUpdate                     *tracker[azfake.PollerResponder[armvirtualenclaves.CommunityEndpointsClientUpdateResponse]]
}

// Do implements the policy.Transporter interface for CommunityEndpointsServerTransport.
func (c *CommunityEndpointsServerTransport) Do(req *http.Request) (*http.Response, error) {
	rawMethod := req.Context().Value(runtime.CtxAPINameKey{})
	method, ok := rawMethod.(string)
	if !ok {
		return nil, nonRetriableError{errors.New("unable to dispatch request, missing value for CtxAPINameKey")}
	}

	return c.dispatchToMethodFake(req, method)
}

func (c *CommunityEndpointsServerTransport) dispatchToMethodFake(req *http.Request, method string) (*http.Response, error) {
	resultChan := make(chan result)
	defer close(resultChan)

	go func() {
		var intercepted bool
		var res result
		if communityEndpointsServerTransportInterceptor != nil {
			res.resp, res.err, intercepted = communityEndpointsServerTransportInterceptor.Do(req)
		}
		if !intercepted {
			switch method {
			case "CommunityEndpointsClient.BeginCreateOrUpdate":
				res.resp, res.err = c.dispatchBeginCreateOrUpdate(req)
			case "CommunityEndpointsClient.BeginDelete":
				res.resp, res.err = c.dispatchBeginDelete(req)
			case "CommunityEndpointsClient.Get":
				res.resp, res.err = c.dispatchGet(req)
			case "CommunityEndpointsClient.BeginHandleApprovalCreation":
				res.resp, res.err = c.dispatchBeginHandleApprovalCreation(req)
			case "CommunityEndpointsClient.BeginHandleApprovalDeletion":
				res.resp, res.err = c.dispatchBeginHandleApprovalDeletion(req)
			case "CommunityEndpointsClient.NewListByCommunityResourcePager":
				res.resp, res.err = c.dispatchNewListByCommunityResourcePager(req)
			case "CommunityEndpointsClient.NewListBySubscriptionPager":
				res.resp, res.err = c.dispatchNewListBySubscriptionPager(req)
			case "CommunityEndpointsClient.BeginUpdate":
				res.resp, res.err = c.dispatchBeginUpdate(req)
			default:
				res.err = fmt.Errorf("unhandled API %s", method)
			}

		}
		select {
		case resultChan <- res:
		case <-req.Context().Done():
		}
	}()

	select {
	case <-req.Context().Done():
		return nil, req.Context().Err()
	case res := <-resultChan:
		return res.resp, res.err
	}
}

func (c *CommunityEndpointsServerTransport) dispatchBeginCreateOrUpdate(req *http.Request) (*http.Response, error) {
	if c.srv.BeginCreateOrUpdate == nil {
		return nil, &nonRetriableError{errors.New("fake for method BeginCreateOrUpdate not implemented")}
	}
	beginCreateOrUpdate := c.beginCreateOrUpdate.get(req)
	if beginCreateOrUpdate == nil {
		const regexStr = `/subscriptions/(?P<subscriptionId>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/resourceGroups/(?P<resourceGroupName>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/providers/Microsoft\.Mission/communities/(?P<communityName>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/communityEndpoints/(?P<communityEndpointName>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)`
		regex := regexp.MustCompile(regexStr)
		matches := regex.FindStringSubmatch(req.URL.EscapedPath())
		if len(matches) < 5 {
			return nil, fmt.Errorf("failed to parse path %s", req.URL.Path)
		}
		body, err := server.UnmarshalRequestAsJSON[armvirtualenclaves.CommunityEndpointResource](req)
		if err != nil {
			return nil, err
		}
		resourceGroupNameParam, err := url.PathUnescape(matches[regex.SubexpIndex("resourceGroupName")])
		if err != nil {
			return nil, err
		}
		communityNameParam, err := url.PathUnescape(matches[regex.SubexpIndex("communityName")])
		if err != nil {
			return nil, err
		}
		communityEndpointNameParam, err := url.PathUnescape(matches[regex.SubexpIndex("communityEndpointName")])
		if err != nil {
			return nil, err
		}
		respr, errRespr := c.srv.BeginCreateOrUpdate(req.Context(), resourceGroupNameParam, communityNameParam, communityEndpointNameParam, body, nil)
		if respErr := server.GetError(errRespr, req); respErr != nil {
			return nil, respErr
		}
		beginCreateOrUpdate = &respr
		c.beginCreateOrUpdate.add(req, beginCreateOrUpdate)
	}

	resp, err := server.PollerResponderNext(beginCreateOrUpdate, req)
	if err != nil {
		return nil, err
	}

	if !contains([]int{http.StatusOK, http.StatusCreated}, resp.StatusCode) {
		c.beginCreateOrUpdate.remove(req)
		return nil, &nonRetriableError{fmt.Errorf("unexpected status code %d. acceptable values are http.StatusOK, http.StatusCreated", resp.StatusCode)}
	}
	if !server.PollerResponderMore(beginCreateOrUpdate) {
		c.beginCreateOrUpdate.remove(req)
	}

	return resp, nil
}

func (c *CommunityEndpointsServerTransport) dispatchBeginDelete(req *http.Request) (*http.Response, error) {
	if c.srv.BeginDelete == nil {
		return nil, &nonRetriableError{errors.New("fake for method BeginDelete not implemented")}
	}
	beginDelete := c.beginDelete.get(req)
	if beginDelete == nil {
		const regexStr = `/subscriptions/(?P<subscriptionId>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/resourceGroups/(?P<resourceGroupName>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/providers/Microsoft\.Mission/communities/(?P<communityName>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/communityEndpoints/(?P<communityEndpointName>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)`
		regex := regexp.MustCompile(regexStr)
		matches := regex.FindStringSubmatch(req.URL.EscapedPath())
		if len(matches) < 5 {
			return nil, fmt.Errorf("failed to parse path %s", req.URL.Path)
		}
		resourceGroupNameParam, err := url.PathUnescape(matches[regex.SubexpIndex("resourceGroupName")])
		if err != nil {
			return nil, err
		}
		communityNameParam, err := url.PathUnescape(matches[regex.SubexpIndex("communityName")])
		if err != nil {
			return nil, err
		}
		communityEndpointNameParam, err := url.PathUnescape(matches[regex.SubexpIndex("communityEndpointName")])
		if err != nil {
			return nil, err
		}
		respr, errRespr := c.srv.BeginDelete(req.Context(), resourceGroupNameParam, communityNameParam, communityEndpointNameParam, nil)
		if respErr := server.GetError(errRespr, req); respErr != nil {
			return nil, respErr
		}
		beginDelete = &respr
		c.beginDelete.add(req, beginDelete)
	}

	resp, err := server.PollerResponderNext(beginDelete, req)
	if err != nil {
		return nil, err
	}

	if !contains([]int{http.StatusOK, http.StatusAccepted, http.StatusNoContent}, resp.StatusCode) {
		c.beginDelete.remove(req)
		return nil, &nonRetriableError{fmt.Errorf("unexpected status code %d. acceptable values are http.StatusOK, http.StatusAccepted, http.StatusNoContent", resp.StatusCode)}
	}
	if !server.PollerResponderMore(beginDelete) {
		c.beginDelete.remove(req)
	}

	return resp, nil
}

func (c *CommunityEndpointsServerTransport) dispatchGet(req *http.Request) (*http.Response, error) {
	if c.srv.Get == nil {
		return nil, &nonRetriableError{errors.New("fake for method Get not implemented")}
	}
	const regexStr = `/subscriptions/(?P<subscriptionId>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/resourceGroups/(?P<resourceGroupName>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/providers/Microsoft\.Mission/communities/(?P<communityName>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/communityEndpoints/(?P<communityEndpointName>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)`
	regex := regexp.MustCompile(regexStr)
	matches := regex.FindStringSubmatch(req.URL.EscapedPath())
	if len(matches) < 5 {
		return nil, fmt.Errorf("failed to parse path %s", req.URL.Path)
	}
	resourceGroupNameParam, err := url.PathUnescape(matches[regex.SubexpIndex("resourceGroupName")])
	if err != nil {
		return nil, err
	}
	communityNameParam, err := url.PathUnescape(matches[regex.SubexpIndex("communityName")])
	if err != nil {
		return nil, err
	}
	communityEndpointNameParam, err := url.PathUnescape(matches[regex.SubexpIndex("communityEndpointName")])
	if err != nil {
		return nil, err
	}
	respr, errRespr := c.srv.Get(req.Context(), resourceGroupNameParam, communityNameParam, communityEndpointNameParam, nil)
	if respErr := server.GetError(errRespr, req); respErr != nil {
		return nil, respErr
	}
	respContent := server.GetResponseContent(respr)
	if !contains([]int{http.StatusOK}, respContent.HTTPStatus) {
		return nil, &nonRetriableError{fmt.Errorf("unexpected status code %d. acceptable values are http.StatusOK", respContent.HTTPStatus)}
	}
	resp, err := server.MarshalResponseAsJSON(respContent, server.GetResponse(respr).CommunityEndpointResource, req)
	if err != nil {
		return nil, err
	}
	return resp, nil
}

func (c *CommunityEndpointsServerTransport) dispatchBeginHandleApprovalCreation(req *http.Request) (*http.Response, error) {
	if c.srv.BeginHandleApprovalCreation == nil {
		return nil, &nonRetriableError{errors.New("fake for method BeginHandleApprovalCreation not implemented")}
	}
	beginHandleApprovalCreation := c.beginHandleApprovalCreation.get(req)
	if beginHandleApprovalCreation == nil {
		const regexStr = `/subscriptions/(?P<subscriptionId>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/resourceGroups/(?P<resourceGroupName>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/providers/Microsoft\.Mission/communities/(?P<communityName>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/communityEndpoints/(?P<communityEndpointName>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/handleApprovalCreation`
		regex := regexp.MustCompile(regexStr)
		matches := regex.FindStringSubmatch(req.URL.EscapedPath())
		if len(matches) < 5 {
			return nil, fmt.Errorf("failed to parse path %s", req.URL.Path)
		}
		body, err := server.UnmarshalRequestAsJSON[armvirtualenclaves.ApprovalCallbackRequest](req)
		if err != nil {
			return nil, err
		}
		resourceGroupNameParam, err := url.PathUnescape(matches[regex.SubexpIndex("resourceGroupName")])
		if err != nil {
			return nil, err
		}
		communityNameParam, err := url.PathUnescape(matches[regex.SubexpIndex("communityName")])
		if err != nil {
			return nil, err
		}
		communityEndpointNameParam, err := url.PathUnescape(matches[regex.SubexpIndex("communityEndpointName")])
		if err != nil {
			return nil, err
		}
		respr, errRespr := c.srv.BeginHandleApprovalCreation(req.Context(), resourceGroupNameParam, communityNameParam, communityEndpointNameParam, body, nil)
		if respErr := server.GetError(errRespr, req); respErr != nil {
			return nil, respErr
		}
		beginHandleApprovalCreation = &respr
		c.beginHandleApprovalCreation.add(req, beginHandleApprovalCreation)
	}

	resp, err := server.PollerResponderNext(beginHandleApprovalCreation, req)
	if err != nil {
		return nil, err
	}

	if !contains([]int{http.StatusOK, http.StatusAccepted}, resp.StatusCode) {
		c.beginHandleApprovalCreation.remove(req)
		return nil, &nonRetriableError{fmt.Errorf("unexpected status code %d. acceptable values are http.StatusOK, http.StatusAccepted", resp.StatusCode)}
	}
	if !server.PollerResponderMore(beginHandleApprovalCreation) {
		c.beginHandleApprovalCreation.remove(req)
	}

	return resp, nil
}

func (c *CommunityEndpointsServerTransport) dispatchBeginHandleApprovalDeletion(req *http.Request) (*http.Response, error) {
	if c.srv.BeginHandleApprovalDeletion == nil {
		return nil, &nonRetriableError{errors.New("fake for method BeginHandleApprovalDeletion not implemented")}
	}
	beginHandleApprovalDeletion := c.beginHandleApprovalDeletion.get(req)
	if beginHandleApprovalDeletion == nil {
		const regexStr = `/subscriptions/(?P<subscriptionId>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/resourceGroups/(?P<resourceGroupName>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/providers/Microsoft\.Mission/communities/(?P<communityName>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/communityEndpoints/(?P<communityEndpointName>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/handleApprovalDeletion`
		regex := regexp.MustCompile(regexStr)
		matches := regex.FindStringSubmatch(req.URL.EscapedPath())
		if len(matches) < 5 {
			return nil, fmt.Errorf("failed to parse path %s", req.URL.Path)
		}
		body, err := server.UnmarshalRequestAsJSON[armvirtualenclaves.ApprovalDeletionCallbackRequest](req)
		if err != nil {
			return nil, err
		}
		resourceGroupNameParam, err := url.PathUnescape(matches[regex.SubexpIndex("resourceGroupName")])
		if err != nil {
			return nil, err
		}
		communityNameParam, err := url.PathUnescape(matches[regex.SubexpIndex("communityName")])
		if err != nil {
			return nil, err
		}
		communityEndpointNameParam, err := url.PathUnescape(matches[regex.SubexpIndex("communityEndpointName")])
		if err != nil {
			return nil, err
		}
		respr, errRespr := c.srv.BeginHandleApprovalDeletion(req.Context(), resourceGroupNameParam, communityNameParam, communityEndpointNameParam, body, nil)
		if respErr := server.GetError(errRespr, req); respErr != nil {
			return nil, respErr
		}
		beginHandleApprovalDeletion = &respr
		c.beginHandleApprovalDeletion.add(req, beginHandleApprovalDeletion)
	}

	resp, err := server.PollerResponderNext(beginHandleApprovalDeletion, req)
	if err != nil {
		return nil, err
	}

	if !contains([]int{http.StatusOK, http.StatusAccepted}, resp.StatusCode) {
		c.beginHandleApprovalDeletion.remove(req)
		return nil, &nonRetriableError{fmt.Errorf("unexpected status code %d. acceptable values are http.StatusOK, http.StatusAccepted", resp.StatusCode)}
	}
	if !server.PollerResponderMore(beginHandleApprovalDeletion) {
		c.beginHandleApprovalDeletion.remove(req)
	}

	return resp, nil
}

func (c *CommunityEndpointsServerTransport) dispatchNewListByCommunityResourcePager(req *http.Request) (*http.Response, error) {
	if c.srv.NewListByCommunityResourcePager == nil {
		return nil, &nonRetriableError{errors.New("fake for method NewListByCommunityResourcePager not implemented")}
	}
	newListByCommunityResourcePager := c.newListByCommunityResourcePager.get(req)
	if newListByCommunityResourcePager == nil {
		const regexStr = `/subscriptions/(?P<subscriptionId>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/resourceGroups/(?P<resourceGroupName>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/providers/Microsoft\.Mission/communities/(?P<communityName>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/communityEndpoints`
		regex := regexp.MustCompile(regexStr)
		matches := regex.FindStringSubmatch(req.URL.EscapedPath())
		if len(matches) < 4 {
			return nil, fmt.Errorf("failed to parse path %s", req.URL.Path)
		}
		resourceGroupNameParam, err := url.PathUnescape(matches[regex.SubexpIndex("resourceGroupName")])
		if err != nil {
			return nil, err
		}
		communityNameParam, err := url.PathUnescape(matches[regex.SubexpIndex("communityName")])
		if err != nil {
			return nil, err
		}
		resp := c.srv.NewListByCommunityResourcePager(resourceGroupNameParam, communityNameParam, nil)
		newListByCommunityResourcePager = &resp
		c.newListByCommunityResourcePager.add(req, newListByCommunityResourcePager)
		server.PagerResponderInjectNextLinks(newListByCommunityResourcePager, req, func(page *armvirtualenclaves.CommunityEndpointsClientListByCommunityResourceResponse, createLink func() string) {
			page.NextLink = to.Ptr(createLink())
		})
	}
	resp, err := server.PagerResponderNext(newListByCommunityResourcePager, req)
	if err != nil {
		return nil, err
	}
	if !contains([]int{http.StatusOK}, resp.StatusCode) {
		c.newListByCommunityResourcePager.remove(req)
		return nil, &nonRetriableError{fmt.Errorf("unexpected status code %d. acceptable values are http.StatusOK", resp.StatusCode)}
	}
	if !server.PagerResponderMore(newListByCommunityResourcePager) {
		c.newListByCommunityResourcePager.remove(req)
	}
	return resp, nil
}

func (c *CommunityEndpointsServerTransport) dispatchNewListBySubscriptionPager(req *http.Request) (*http.Response, error) {
	if c.srv.NewListBySubscriptionPager == nil {
		return nil, &nonRetriableError{errors.New("fake for method NewListBySubscriptionPager not implemented")}
	}
	newListBySubscriptionPager := c.newListBySubscriptionPager.get(req)
	if newListBySubscriptionPager == nil {
		const regexStr = `/subscriptions/(?P<subscriptionId>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/providers/Microsoft\.Mission/communities/(?P<communityName>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/communityEndpoints`
		regex := regexp.MustCompile(regexStr)
		matches := regex.FindStringSubmatch(req.URL.EscapedPath())
		if len(matches) < 3 {
			return nil, fmt.Errorf("failed to parse path %s", req.URL.Path)
		}
		communityNameParam, err := url.PathUnescape(matches[regex.SubexpIndex("communityName")])
		if err != nil {
			return nil, err
		}
		resp := c.srv.NewListBySubscriptionPager(communityNameParam, nil)
		newListBySubscriptionPager = &resp
		c.newListBySubscriptionPager.add(req, newListBySubscriptionPager)
		server.PagerResponderInjectNextLinks(newListBySubscriptionPager, req, func(page *armvirtualenclaves.CommunityEndpointsClientListBySubscriptionResponse, createLink func() string) {
			page.NextLink = to.Ptr(createLink())
		})
	}
	resp, err := server.PagerResponderNext(newListBySubscriptionPager, req)
	if err != nil {
		return nil, err
	}
	if !contains([]int{http.StatusOK}, resp.StatusCode) {
		c.newListBySubscriptionPager.remove(req)
		return nil, &nonRetriableError{fmt.Errorf("unexpected status code %d. acceptable values are http.StatusOK", resp.StatusCode)}
	}
	if !server.PagerResponderMore(newListBySubscriptionPager) {
		c.newListBySubscriptionPager.remove(req)
	}
	return resp, nil
}

func (c *CommunityEndpointsServerTransport) dispatchBeginUpdate(req *http.Request) (*http.Response, error) {
	if c.srv.BeginUpdate == nil {
		return nil, &nonRetriableError{errors.New("fake for method BeginUpdate not implemented")}
	}
	beginUpdate := c.beginUpdate.get(req)
	if beginUpdate == nil {
		const regexStr = `/subscriptions/(?P<subscriptionId>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/resourceGroups/(?P<resourceGroupName>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/providers/Microsoft\.Mission/communities/(?P<communityName>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/communityEndpoints/(?P<communityEndpointName>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)`
		regex := regexp.MustCompile(regexStr)
		matches := regex.FindStringSubmatch(req.URL.EscapedPath())
		if len(matches) < 5 {
			return nil, fmt.Errorf("failed to parse path %s", req.URL.Path)
		}
		body, err := server.UnmarshalRequestAsJSON[armvirtualenclaves.CommunityEndpointPatchModel](req)
		if err != nil {
			return nil, err
		}
		resourceGroupNameParam, err := url.PathUnescape(matches[regex.SubexpIndex("resourceGroupName")])
		if err != nil {
			return nil, err
		}
		communityNameParam, err := url.PathUnescape(matches[regex.SubexpIndex("communityName")])
		if err != nil {
			return nil, err
		}
		communityEndpointNameParam, err := url.PathUnescape(matches[regex.SubexpIndex("communityEndpointName")])
		if err != nil {
			return nil, err
		}
		respr, errRespr := c.srv.BeginUpdate(req.Context(), resourceGroupNameParam, communityNameParam, communityEndpointNameParam, body, nil)
		if respErr := server.GetError(errRespr, req); respErr != nil {
			return nil, respErr
		}
		beginUpdate = &respr
		c.beginUpdate.add(req, beginUpdate)
	}

	resp, err := server.PollerResponderNext(beginUpdate, req)
	if err != nil {
		return nil, err
	}

	if !contains([]int{http.StatusOK, http.StatusAccepted}, resp.StatusCode) {
		c.beginUpdate.remove(req)
		return nil, &nonRetriableError{fmt.Errorf("unexpected status code %d. acceptable values are http.StatusOK, http.StatusAccepted", resp.StatusCode)}
	}
	if !server.PollerResponderMore(beginUpdate) {
		c.beginUpdate.remove(req)
	}

	return resp, nil
}

// set this to conditionally intercept incoming requests to CommunityEndpointsServerTransport
var communityEndpointsServerTransportInterceptor interface {
	// Do returns true if the server transport should use the returned response/error
	Do(*http.Request) (*http.Response, error, bool)
}
