// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) Go Code Generator. DO NOT EDIT.

package fake

import (
	"context"
	"errors"
	"fmt"
	azfake "github.com/Azure/azure-sdk-for-go/sdk/azcore/fake"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/fake/server"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/runtime"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/to"
	"github.com/Azure/azure-sdk-for-go/sdk/resourcemanager/virtualenclaves/armvirtualenclaves"
	"net/http"
	"net/url"
	"regexp"
)

// EnclaveEndpointsServer is a fake server for instances of the armvirtualenclaves.EnclaveEndpointsClient type.
type EnclaveEndpointsServer struct {
	// BeginCreateOrUpdate is the fake for method EnclaveEndpointsClient.BeginCreateOrUpdate
	// HTTP status codes to indicate success: http.StatusOK, http.StatusCreated
	BeginCreateOrUpdate func(ctx context.Context, resourceGroupName string, virtualEnclaveName string, enclaveEndpointName string, resource armvirtualenclaves.EnclaveEndpointResource, options *armvirtualenclaves.EnclaveEndpointsClientBeginCreateOrUpdateOptions) (resp azfake.PollerResponder[armvirtualenclaves.EnclaveEndpointsClientCreateOrUpdateResponse], errResp azfake.ErrorResponder)

	// BeginDelete is the fake for method EnclaveEndpointsClient.BeginDelete
	// HTTP status codes to indicate success: http.StatusOK, http.StatusAccepted, http.StatusNoContent
	BeginDelete func(ctx context.Context, resourceGroupName string, virtualEnclaveName string, enclaveEndpointName string, options *armvirtualenclaves.EnclaveEndpointsClientBeginDeleteOptions) (resp azfake.PollerResponder[armvirtualenclaves.EnclaveEndpointsClientDeleteResponse], errResp azfake.ErrorResponder)

	// Get is the fake for method EnclaveEndpointsClient.Get
	// HTTP status codes to indicate success: http.StatusOK
	Get func(ctx context.Context, resourceGroupName string, virtualEnclaveName string, enclaveEndpointName string, options *armvirtualenclaves.EnclaveEndpointsClientGetOptions) (resp azfake.Responder[armvirtualenclaves.EnclaveEndpointsClientGetResponse], errResp azfake.ErrorResponder)

	// BeginHandleApprovalCreation is the fake for method EnclaveEndpointsClient.BeginHandleApprovalCreation
	// HTTP status codes to indicate success: http.StatusOK, http.StatusAccepted
	BeginHandleApprovalCreation func(ctx context.Context, resourceGroupName string, virtualEnclaveName string, enclaveEndpointName string, body armvirtualenclaves.ApprovalCallbackRequest, options *armvirtualenclaves.EnclaveEndpointsClientBeginHandleApprovalCreationOptions) (resp azfake.PollerResponder[armvirtualenclaves.EnclaveEndpointsClientHandleApprovalCreationResponse], errResp azfake.ErrorResponder)

	// BeginHandleApprovalDeletion is the fake for method EnclaveEndpointsClient.BeginHandleApprovalDeletion
	// HTTP status codes to indicate success: http.StatusOK, http.StatusAccepted
	BeginHandleApprovalDeletion func(ctx context.Context, resourceGroupName string, virtualEnclaveName string, enclaveEndpointName string, body armvirtualenclaves.ApprovalDeletionCallbackRequest, options *armvirtualenclaves.EnclaveEndpointsClientBeginHandleApprovalDeletionOptions) (resp azfake.PollerResponder[armvirtualenclaves.EnclaveEndpointsClientHandleApprovalDeletionResponse], errResp azfake.ErrorResponder)

	// NewListByEnclaveResourcePager is the fake for method EnclaveEndpointsClient.NewListByEnclaveResourcePager
	// HTTP status codes to indicate success: http.StatusOK
	NewListByEnclaveResourcePager func(resourceGroupName string, virtualEnclaveName string, options *armvirtualenclaves.EnclaveEndpointsClientListByEnclaveResourceOptions) (resp azfake.PagerResponder[armvirtualenclaves.EnclaveEndpointsClientListByEnclaveResourceResponse])

	// NewListBySubscriptionPager is the fake for method EnclaveEndpointsClient.NewListBySubscriptionPager
	// HTTP status codes to indicate success: http.StatusOK
	NewListBySubscriptionPager func(virtualEnclaveName string, options *armvirtualenclaves.EnclaveEndpointsClientListBySubscriptionOptions) (resp azfake.PagerResponder[armvirtualenclaves.EnclaveEndpointsClientListBySubscriptionResponse])

	// BeginUpdate is the fake for method EnclaveEndpointsClient.BeginUpdate
	// HTTP status codes to indicate success: http.StatusOK, http.StatusAccepted
	BeginUpdate func(ctx context.Context, resourceGroupName string, virtualEnclaveName string, enclaveEndpointName string, properties armvirtualenclaves.EnclaveEndpointPatchModel, options *armvirtualenclaves.EnclaveEndpointsClientBeginUpdateOptions) (resp azfake.PollerResponder[armvirtualenclaves.EnclaveEndpointsClientUpdateResponse], errResp azfake.ErrorResponder)
}

// NewEnclaveEndpointsServerTransport creates a new instance of EnclaveEndpointsServerTransport with the provided implementation.
// The returned EnclaveEndpointsServerTransport instance is connected to an instance of armvirtualenclaves.EnclaveEndpointsClient via the
// azcore.ClientOptions.Transporter field in the client's constructor parameters.
func NewEnclaveEndpointsServerTransport(srv *EnclaveEndpointsServer) *EnclaveEndpointsServerTransport {
	return &EnclaveEndpointsServerTransport{
		srv:                           srv,
		beginCreateOrUpdate:           newTracker[azfake.PollerResponder[armvirtualenclaves.EnclaveEndpointsClientCreateOrUpdateResponse]](),
		beginDelete:                   newTracker[azfake.PollerResponder[armvirtualenclaves.EnclaveEndpointsClientDeleteResponse]](),
		beginHandleApprovalCreation:   newTracker[azfake.PollerResponder[armvirtualenclaves.EnclaveEndpointsClientHandleApprovalCreationResponse]](),
		beginHandleApprovalDeletion:   newTracker[azfake.PollerResponder[armvirtualenclaves.EnclaveEndpointsClientHandleApprovalDeletionResponse]](),
		newListByEnclaveResourcePager: newTracker[azfake.PagerResponder[armvirtualenclaves.EnclaveEndpointsClientListByEnclaveResourceResponse]](),
		newListBySubscriptionPager:    newTracker[azfake.PagerResponder[armvirtualenclaves.EnclaveEndpointsClientListBySubscriptionResponse]](),
		beginUpdate:                   newTracker[azfake.PollerResponder[armvirtualenclaves.EnclaveEndpointsClientUpdateResponse]](),
	}
}

// EnclaveEndpointsServerTransport connects instances of armvirtualenclaves.EnclaveEndpointsClient to instances of EnclaveEndpointsServer.
// Don't use this type directly, use NewEnclaveEndpointsServerTransport instead.
type EnclaveEndpointsServerTransport struct {
	srv                           *EnclaveEndpointsServer
	beginCreateOrUpdate           *tracker[azfake.PollerResponder[armvirtualenclaves.EnclaveEndpointsClientCreateOrUpdateResponse]]
	beginDelete                   *tracker[azfake.PollerResponder[armvirtualenclaves.EnclaveEndpointsClientDeleteResponse]]
	beginHandleApprovalCreation   *tracker[azfake.PollerResponder[armvirtualenclaves.EnclaveEndpointsClientHandleApprovalCreationResponse]]
	beginHandleApprovalDeletion   *tracker[azfake.PollerResponder[armvirtualenclaves.EnclaveEndpointsClientHandleApprovalDeletionResponse]]
	newListByEnclaveResourcePager *tracker[azfake.PagerResponder[armvirtualenclaves.EnclaveEndpointsClientListByEnclaveResourceResponse]]
	newListBySubscriptionPager    *tracker[azfake.PagerResponder[armvirtualenclaves.EnclaveEndpointsClientListBySubscriptionResponse]]
	beginUpdate                   *tracker[azfake.PollerResponder[armvirtualenclaves.EnclaveEndpointsClientUpdateResponse]]
}

// Do implements the policy.Transporter interface for EnclaveEndpointsServerTransport.
func (e *EnclaveEndpointsServerTransport) Do(req *http.Request) (*http.Response, error) {
	rawMethod := req.Context().Value(runtime.CtxAPINameKey{})
	method, ok := rawMethod.(string)
	if !ok {
		return nil, nonRetriableError{errors.New("unable to dispatch request, missing value for CtxAPINameKey")}
	}

	return e.dispatchToMethodFake(req, method)
}

func (e *EnclaveEndpointsServerTransport) dispatchToMethodFake(req *http.Request, method string) (*http.Response, error) {
	resultChan := make(chan result)
	defer close(resultChan)

	go func() {
		var intercepted bool
		var res result
		if enclaveEndpointsServerTransportInterceptor != nil {
			res.resp, res.err, intercepted = enclaveEndpointsServerTransportInterceptor.Do(req)
		}
		if !intercepted {
			switch method {
			case "EnclaveEndpointsClient.BeginCreateOrUpdate":
				res.resp, res.err = e.dispatchBeginCreateOrUpdate(req)
			case "EnclaveEndpointsClient.BeginDelete":
				res.resp, res.err = e.dispatchBeginDelete(req)
			case "EnclaveEndpointsClient.Get":
				res.resp, res.err = e.dispatchGet(req)
			case "EnclaveEndpointsClient.BeginHandleApprovalCreation":
				res.resp, res.err = e.dispatchBeginHandleApprovalCreation(req)
			case "EnclaveEndpointsClient.BeginHandleApprovalDeletion":
				res.resp, res.err = e.dispatchBeginHandleApprovalDeletion(req)
			case "EnclaveEndpointsClient.NewListByEnclaveResourcePager":
				res.resp, res.err = e.dispatchNewListByEnclaveResourcePager(req)
			case "EnclaveEndpointsClient.NewListBySubscriptionPager":
				res.resp, res.err = e.dispatchNewListBySubscriptionPager(req)
			case "EnclaveEndpointsClient.BeginUpdate":
				res.resp, res.err = e.dispatchBeginUpdate(req)
			default:
				res.err = fmt.Errorf("unhandled API %s", method)
			}

		}
		select {
		case resultChan <- res:
		case <-req.Context().Done():
		}
	}()

	select {
	case <-req.Context().Done():
		return nil, req.Context().Err()
	case res := <-resultChan:
		return res.resp, res.err
	}
}

func (e *EnclaveEndpointsServerTransport) dispatchBeginCreateOrUpdate(req *http.Request) (*http.Response, error) {
	if e.srv.BeginCreateOrUpdate == nil {
		return nil, &nonRetriableError{errors.New("fake for method BeginCreateOrUpdate not implemented")}
	}
	beginCreateOrUpdate := e.beginCreateOrUpdate.get(req)
	if beginCreateOrUpdate == nil {
		const regexStr = `/subscriptions/(?P<subscriptionId>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/resourceGroups/(?P<resourceGroupName>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/providers/Microsoft\.Mission/virtualEnclaves/(?P<virtualEnclaveName>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/enclaveEndpoints/(?P<enclaveEndpointName>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)`
		regex := regexp.MustCompile(regexStr)
		matches := regex.FindStringSubmatch(req.URL.EscapedPath())
		if len(matches) < 5 {
			return nil, fmt.Errorf("failed to parse path %s", req.URL.Path)
		}
		body, err := server.UnmarshalRequestAsJSON[armvirtualenclaves.EnclaveEndpointResource](req)
		if err != nil {
			return nil, err
		}
		resourceGroupNameParam, err := url.PathUnescape(matches[regex.SubexpIndex("resourceGroupName")])
		if err != nil {
			return nil, err
		}
		virtualEnclaveNameParam, err := url.PathUnescape(matches[regex.SubexpIndex("virtualEnclaveName")])
		if err != nil {
			return nil, err
		}
		enclaveEndpointNameParam, err := url.PathUnescape(matches[regex.SubexpIndex("enclaveEndpointName")])
		if err != nil {
			return nil, err
		}
		respr, errRespr := e.srv.BeginCreateOrUpdate(req.Context(), resourceGroupNameParam, virtualEnclaveNameParam, enclaveEndpointNameParam, body, nil)
		if respErr := server.GetError(errRespr, req); respErr != nil {
			return nil, respErr
		}
		beginCreateOrUpdate = &respr
		e.beginCreateOrUpdate.add(req, beginCreateOrUpdate)
	}

	resp, err := server.PollerResponderNext(beginCreateOrUpdate, req)
	if err != nil {
		return nil, err
	}

	if !contains([]int{http.StatusOK, http.StatusCreated}, resp.StatusCode) {
		e.beginCreateOrUpdate.remove(req)
		return nil, &nonRetriableError{fmt.Errorf("unexpected status code %d. acceptable values are http.StatusOK, http.StatusCreated", resp.StatusCode)}
	}
	if !server.PollerResponderMore(beginCreateOrUpdate) {
		e.beginCreateOrUpdate.remove(req)
	}

	return resp, nil
}

func (e *EnclaveEndpointsServerTransport) dispatchBeginDelete(req *http.Request) (*http.Response, error) {
	if e.srv.BeginDelete == nil {
		return nil, &nonRetriableError{errors.New("fake for method BeginDelete not implemented")}
	}
	beginDelete := e.beginDelete.get(req)
	if beginDelete == nil {
		const regexStr = `/subscriptions/(?P<subscriptionId>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/resourceGroups/(?P<resourceGroupName>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/providers/Microsoft\.Mission/virtualEnclaves/(?P<virtualEnclaveName>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/enclaveEndpoints/(?P<enclaveEndpointName>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)`
		regex := regexp.MustCompile(regexStr)
		matches := regex.FindStringSubmatch(req.URL.EscapedPath())
		if len(matches) < 5 {
			return nil, fmt.Errorf("failed to parse path %s", req.URL.Path)
		}
		resourceGroupNameParam, err := url.PathUnescape(matches[regex.SubexpIndex("resourceGroupName")])
		if err != nil {
			return nil, err
		}
		virtualEnclaveNameParam, err := url.PathUnescape(matches[regex.SubexpIndex("virtualEnclaveName")])
		if err != nil {
			return nil, err
		}
		enclaveEndpointNameParam, err := url.PathUnescape(matches[regex.SubexpIndex("enclaveEndpointName")])
		if err != nil {
			return nil, err
		}
		respr, errRespr := e.srv.BeginDelete(req.Context(), resourceGroupNameParam, virtualEnclaveNameParam, enclaveEndpointNameParam, nil)
		if respErr := server.GetError(errRespr, req); respErr != nil {
			return nil, respErr
		}
		beginDelete = &respr
		e.beginDelete.add(req, beginDelete)
	}

	resp, err := server.PollerResponderNext(beginDelete, req)
	if err != nil {
		return nil, err
	}

	if !contains([]int{http.StatusOK, http.StatusAccepted, http.StatusNoContent}, resp.StatusCode) {
		e.beginDelete.remove(req)
		return nil, &nonRetriableError{fmt.Errorf("unexpected status code %d. acceptable values are http.StatusOK, http.StatusAccepted, http.StatusNoContent", resp.StatusCode)}
	}
	if !server.PollerResponderMore(beginDelete) {
		e.beginDelete.remove(req)
	}

	return resp, nil
}

func (e *EnclaveEndpointsServerTransport) dispatchGet(req *http.Request) (*http.Response, error) {
	if e.srv.Get == nil {
		return nil, &nonRetriableError{errors.New("fake for method Get not implemented")}
	}
	const regexStr = `/subscriptions/(?P<subscriptionId>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/resourceGroups/(?P<resourceGroupName>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/providers/Microsoft\.Mission/virtualEnclaves/(?P<virtualEnclaveName>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/enclaveEndpoints/(?P<enclaveEndpointName>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)`
	regex := regexp.MustCompile(regexStr)
	matches := regex.FindStringSubmatch(req.URL.EscapedPath())
	if len(matches) < 5 {
		return nil, fmt.Errorf("failed to parse path %s", req.URL.Path)
	}
	resourceGroupNameParam, err := url.PathUnescape(matches[regex.SubexpIndex("resourceGroupName")])
	if err != nil {
		return nil, err
	}
	virtualEnclaveNameParam, err := url.PathUnescape(matches[regex.SubexpIndex("virtualEnclaveName")])
	if err != nil {
		return nil, err
	}
	enclaveEndpointNameParam, err := url.PathUnescape(matches[regex.SubexpIndex("enclaveEndpointName")])
	if err != nil {
		return nil, err
	}
	respr, errRespr := e.srv.Get(req.Context(), resourceGroupNameParam, virtualEnclaveNameParam, enclaveEndpointNameParam, nil)
	if respErr := server.GetError(errRespr, req); respErr != nil {
		return nil, respErr
	}
	respContent := server.GetResponseContent(respr)
	if !contains([]int{http.StatusOK}, respContent.HTTPStatus) {
		return nil, &nonRetriableError{fmt.Errorf("unexpected status code %d. acceptable values are http.StatusOK", respContent.HTTPStatus)}
	}
	resp, err := server.MarshalResponseAsJSON(respContent, server.GetResponse(respr).EnclaveEndpointResource, req)
	if err != nil {
		return nil, err
	}
	return resp, nil
}

func (e *EnclaveEndpointsServerTransport) dispatchBeginHandleApprovalCreation(req *http.Request) (*http.Response, error) {
	if e.srv.BeginHandleApprovalCreation == nil {
		return nil, &nonRetriableError{errors.New("fake for method BeginHandleApprovalCreation not implemented")}
	}
	beginHandleApprovalCreation := e.beginHandleApprovalCreation.get(req)
	if beginHandleApprovalCreation == nil {
		const regexStr = `/subscriptions/(?P<subscriptionId>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/resourceGroups/(?P<resourceGroupName>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/providers/Microsoft\.Mission/virtualEnclaves/(?P<virtualEnclaveName>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/enclaveEndpoints/(?P<enclaveEndpointName>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/handleApprovalCreation`
		regex := regexp.MustCompile(regexStr)
		matches := regex.FindStringSubmatch(req.URL.EscapedPath())
		if len(matches) < 5 {
			return nil, fmt.Errorf("failed to parse path %s", req.URL.Path)
		}
		body, err := server.UnmarshalRequestAsJSON[armvirtualenclaves.ApprovalCallbackRequest](req)
		if err != nil {
			return nil, err
		}
		resourceGroupNameParam, err := url.PathUnescape(matches[regex.SubexpIndex("resourceGroupName")])
		if err != nil {
			return nil, err
		}
		virtualEnclaveNameParam, err := url.PathUnescape(matches[regex.SubexpIndex("virtualEnclaveName")])
		if err != nil {
			return nil, err
		}
		enclaveEndpointNameParam, err := url.PathUnescape(matches[regex.SubexpIndex("enclaveEndpointName")])
		if err != nil {
			return nil, err
		}
		respr, errRespr := e.srv.BeginHandleApprovalCreation(req.Context(), resourceGroupNameParam, virtualEnclaveNameParam, enclaveEndpointNameParam, body, nil)
		if respErr := server.GetError(errRespr, req); respErr != nil {
			return nil, respErr
		}
		beginHandleApprovalCreation = &respr
		e.beginHandleApprovalCreation.add(req, beginHandleApprovalCreation)
	}

	resp, err := server.PollerResponderNext(beginHandleApprovalCreation, req)
	if err != nil {
		return nil, err
	}

	if !contains([]int{http.StatusOK, http.StatusAccepted}, resp.StatusCode) {
		e.beginHandleApprovalCreation.remove(req)
		return nil, &nonRetriableError{fmt.Errorf("unexpected status code %d. acceptable values are http.StatusOK, http.StatusAccepted", resp.StatusCode)}
	}
	if !server.PollerResponderMore(beginHandleApprovalCreation) {
		e.beginHandleApprovalCreation.remove(req)
	}

	return resp, nil
}

func (e *EnclaveEndpointsServerTransport) dispatchBeginHandleApprovalDeletion(req *http.Request) (*http.Response, error) {
	if e.srv.BeginHandleApprovalDeletion == nil {
		return nil, &nonRetriableError{errors.New("fake for method BeginHandleApprovalDeletion not implemented")}
	}
	beginHandleApprovalDeletion := e.beginHandleApprovalDeletion.get(req)
	if beginHandleApprovalDeletion == nil {
		const regexStr = `/subscriptions/(?P<subscriptionId>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/resourceGroups/(?P<resourceGroupName>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/providers/Microsoft\.Mission/virtualEnclaves/(?P<virtualEnclaveName>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/enclaveEndpoints/(?P<enclaveEndpointName>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/handleApprovalDeletion`
		regex := regexp.MustCompile(regexStr)
		matches := regex.FindStringSubmatch(req.URL.EscapedPath())
		if len(matches) < 5 {
			return nil, fmt.Errorf("failed to parse path %s", req.URL.Path)
		}
		body, err := server.UnmarshalRequestAsJSON[armvirtualenclaves.ApprovalDeletionCallbackRequest](req)
		if err != nil {
			return nil, err
		}
		resourceGroupNameParam, err := url.PathUnescape(matches[regex.SubexpIndex("resourceGroupName")])
		if err != nil {
			return nil, err
		}
		virtualEnclaveNameParam, err := url.PathUnescape(matches[regex.SubexpIndex("virtualEnclaveName")])
		if err != nil {
			return nil, err
		}
		enclaveEndpointNameParam, err := url.PathUnescape(matches[regex.SubexpIndex("enclaveEndpointName")])
		if err != nil {
			return nil, err
		}
		respr, errRespr := e.srv.BeginHandleApprovalDeletion(req.Context(), resourceGroupNameParam, virtualEnclaveNameParam, enclaveEndpointNameParam, body, nil)
		if respErr := server.GetError(errRespr, req); respErr != nil {
			return nil, respErr
		}
		beginHandleApprovalDeletion = &respr
		e.beginHandleApprovalDeletion.add(req, beginHandleApprovalDeletion)
	}

	resp, err := server.PollerResponderNext(beginHandleApprovalDeletion, req)
	if err != nil {
		return nil, err
	}

	if !contains([]int{http.StatusOK, http.StatusAccepted}, resp.StatusCode) {
		e.beginHandleApprovalDeletion.remove(req)
		return nil, &nonRetriableError{fmt.Errorf("unexpected status code %d. acceptable values are http.StatusOK, http.StatusAccepted", resp.StatusCode)}
	}
	if !server.PollerResponderMore(beginHandleApprovalDeletion) {
		e.beginHandleApprovalDeletion.remove(req)
	}

	return resp, nil
}

func (e *EnclaveEndpointsServerTransport) dispatchNewListByEnclaveResourcePager(req *http.Request) (*http.Response, error) {
	if e.srv.NewListByEnclaveResourcePager == nil {
		return nil, &nonRetriableError{errors.New("fake for method NewListByEnclaveResourcePager not implemented")}
	}
	newListByEnclaveResourcePager := e.newListByEnclaveResourcePager.get(req)
	if newListByEnclaveResourcePager == nil {
		const regexStr = `/subscriptions/(?P<subscriptionId>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/resourceGroups/(?P<resourceGroupName>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/providers/Microsoft\.Mission/virtualEnclaves/(?P<virtualEnclaveName>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/enclaveEndpoints`
		regex := regexp.MustCompile(regexStr)
		matches := regex.FindStringSubmatch(req.URL.EscapedPath())
		if len(matches) < 4 {
			return nil, fmt.Errorf("failed to parse path %s", req.URL.Path)
		}
		resourceGroupNameParam, err := url.PathUnescape(matches[regex.SubexpIndex("resourceGroupName")])
		if err != nil {
			return nil, err
		}
		virtualEnclaveNameParam, err := url.PathUnescape(matches[regex.SubexpIndex("virtualEnclaveName")])
		if err != nil {
			return nil, err
		}
		resp := e.srv.NewListByEnclaveResourcePager(resourceGroupNameParam, virtualEnclaveNameParam, nil)
		newListByEnclaveResourcePager = &resp
		e.newListByEnclaveResourcePager.add(req, newListByEnclaveResourcePager)
		server.PagerResponderInjectNextLinks(newListByEnclaveResourcePager, req, func(page *armvirtualenclaves.EnclaveEndpointsClientListByEnclaveResourceResponse, createLink func() string) {
			page.NextLink = to.Ptr(createLink())
		})
	}
	resp, err := server.PagerResponderNext(newListByEnclaveResourcePager, req)
	if err != nil {
		return nil, err
	}
	if !contains([]int{http.StatusOK}, resp.StatusCode) {
		e.newListByEnclaveResourcePager.remove(req)
		return nil, &nonRetriableError{fmt.Errorf("unexpected status code %d. acceptable values are http.StatusOK", resp.StatusCode)}
	}
	if !server.PagerResponderMore(newListByEnclaveResourcePager) {
		e.newListByEnclaveResourcePager.remove(req)
	}
	return resp, nil
}

func (e *EnclaveEndpointsServerTransport) dispatchNewListBySubscriptionPager(req *http.Request) (*http.Response, error) {
	if e.srv.NewListBySubscriptionPager == nil {
		return nil, &nonRetriableError{errors.New("fake for method NewListBySubscriptionPager not implemented")}
	}
	newListBySubscriptionPager := e.newListBySubscriptionPager.get(req)
	if newListBySubscriptionPager == nil {
		const regexStr = `/subscriptions/(?P<subscriptionId>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/providers/Microsoft\.Mission/virtualEnclaves/(?P<virtualEnclaveName>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/enclaveEndpoints`
		regex := regexp.MustCompile(regexStr)
		matches := regex.FindStringSubmatch(req.URL.EscapedPath())
		if len(matches) < 3 {
			return nil, fmt.Errorf("failed to parse path %s", req.URL.Path)
		}
		virtualEnclaveNameParam, err := url.PathUnescape(matches[regex.SubexpIndex("virtualEnclaveName")])
		if err != nil {
			return nil, err
		}
		resp := e.srv.NewListBySubscriptionPager(virtualEnclaveNameParam, nil)
		newListBySubscriptionPager = &resp
		e.newListBySubscriptionPager.add(req, newListBySubscriptionPager)
		server.PagerResponderInjectNextLinks(newListBySubscriptionPager, req, func(page *armvirtualenclaves.EnclaveEndpointsClientListBySubscriptionResponse, createLink func() string) {
			page.NextLink = to.Ptr(createLink())
		})
	}
	resp, err := server.PagerResponderNext(newListBySubscriptionPager, req)
	if err != nil {
		return nil, err
	}
	if !contains([]int{http.StatusOK}, resp.StatusCode) {
		e.newListBySubscriptionPager.remove(req)
		return nil, &nonRetriableError{fmt.Errorf("unexpected status code %d. acceptable values are http.StatusOK", resp.StatusCode)}
	}
	if !server.PagerResponderMore(newListBySubscriptionPager) {
		e.newListBySubscriptionPager.remove(req)
	}
	return resp, nil
}

func (e *EnclaveEndpointsServerTransport) dispatchBeginUpdate(req *http.Request) (*http.Response, error) {
	if e.srv.BeginUpdate == nil {
		return nil, &nonRetriableError{errors.New("fake for method BeginUpdate not implemented")}
	}
	beginUpdate := e.beginUpdate.get(req)
	if beginUpdate == nil {
		const regexStr = `/subscriptions/(?P<subscriptionId>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/resourceGroups/(?P<resourceGroupName>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/providers/Microsoft\.Mission/virtualEnclaves/(?P<virtualEnclaveName>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/enclaveEndpoints/(?P<enclaveEndpointName>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)`
		regex := regexp.MustCompile(regexStr)
		matches := regex.FindStringSubmatch(req.URL.EscapedPath())
		if len(matches) < 5 {
			return nil, fmt.Errorf("failed to parse path %s", req.URL.Path)
		}
		body, err := server.UnmarshalRequestAsJSON[armvirtualenclaves.EnclaveEndpointPatchModel](req)
		if err != nil {
			return nil, err
		}
		resourceGroupNameParam, err := url.PathUnescape(matches[regex.SubexpIndex("resourceGroupName")])
		if err != nil {
			return nil, err
		}
		virtualEnclaveNameParam, err := url.PathUnescape(matches[regex.SubexpIndex("virtualEnclaveName")])
		if err != nil {
			return nil, err
		}
		enclaveEndpointNameParam, err := url.PathUnescape(matches[regex.SubexpIndex("enclaveEndpointName")])
		if err != nil {
			return nil, err
		}
		respr, errRespr := e.srv.BeginUpdate(req.Context(), resourceGroupNameParam, virtualEnclaveNameParam, enclaveEndpointNameParam, body, nil)
		if respErr := server.GetError(errRespr, req); respErr != nil {
			return nil, respErr
		}
		beginUpdate = &respr
		e.beginUpdate.add(req, beginUpdate)
	}

	resp, err := server.PollerResponderNext(beginUpdate, req)
	if err != nil {
		return nil, err
	}

	if !contains([]int{http.StatusOK, http.StatusAccepted}, resp.StatusCode) {
		e.beginUpdate.remove(req)
		return nil, &nonRetriableError{fmt.Errorf("unexpected status code %d. acceptable values are http.StatusOK, http.StatusAccepted", resp.StatusCode)}
	}
	if !server.PollerResponderMore(beginUpdate) {
		e.beginUpdate.remove(req)
	}

	return resp, nil
}

// set this to conditionally intercept incoming requests to EnclaveEndpointsServerTransport
var enclaveEndpointsServerTransportInterceptor interface {
	// Do returns true if the server transport should use the returned response/error
	Do(*http.Request) (*http.Response, error, bool)
}
