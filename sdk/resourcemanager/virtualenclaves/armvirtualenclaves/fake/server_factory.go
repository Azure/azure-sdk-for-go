// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) Go Code Generator. DO NOT EDIT.

package fake

import (
	"errors"
	"fmt"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/runtime"
	"net/http"
	"strings"
	"sync"
)

// ServerFactory is a fake server for instances of the armvirtualenclaves.ClientFactory type.
type ServerFactory struct {
	// ApprovalServer contains the fakes for client ApprovalClient
	ApprovalServer ApprovalServer

	// CommunityServer contains the fakes for client CommunityClient
	CommunityServer CommunityServer

	// CommunityEndpointsServer contains the fakes for client CommunityEndpointsClient
	CommunityEndpointsServer CommunityEndpointsServer

	// EnclaveConnectionServer contains the fakes for client EnclaveConnectionClient
	EnclaveConnectionServer EnclaveConnectionServer

	// EnclaveEndpointsServer contains the fakes for client EnclaveEndpointsClient
	EnclaveEndpointsServer EnclaveEndpointsServer

	// OperationsServer contains the fakes for client OperationsClient
	OperationsServer OperationsServer

	// TransitHubServer contains the fakes for client TransitHubClient
	TransitHubServer TransitHubServer

	// VirtualEnclaveServer contains the fakes for client VirtualEnclaveClient
	VirtualEnclaveServer VirtualEnclaveServer

	// WorkloadServer contains the fakes for client WorkloadClient
	WorkloadServer WorkloadServer
}

// NewServerFactoryTransport creates a new instance of ServerFactoryTransport with the provided implementation.
// The returned ServerFactoryTransport instance is connected to an instance of armvirtualenclaves.ClientFactory via the
// azcore.ClientOptions.Transporter field in the client's constructor parameters.
func NewServerFactoryTransport(srv *ServerFactory) *ServerFactoryTransport {
	return &ServerFactoryTransport{
		srv: srv,
	}
}

// ServerFactoryTransport connects instances of armvirtualenclaves.ClientFactory to instances of ServerFactory.
// Don't use this type directly, use NewServerFactoryTransport instead.
type ServerFactoryTransport struct {
	srv                        *ServerFactory
	trMu                       sync.Mutex
	trApprovalServer           *ApprovalServerTransport
	trCommunityServer          *CommunityServerTransport
	trCommunityEndpointsServer *CommunityEndpointsServerTransport
	trEnclaveConnectionServer  *EnclaveConnectionServerTransport
	trEnclaveEndpointsServer   *EnclaveEndpointsServerTransport
	trOperationsServer         *OperationsServerTransport
	trTransitHubServer         *TransitHubServerTransport
	trVirtualEnclaveServer     *VirtualEnclaveServerTransport
	trWorkloadServer           *WorkloadServerTransport
}

// Do implements the policy.Transporter interface for ServerFactoryTransport.
func (s *ServerFactoryTransport) Do(req *http.Request) (*http.Response, error) {
	rawMethod := req.Context().Value(runtime.CtxAPINameKey{})
	method, ok := rawMethod.(string)
	if !ok {
		return nil, nonRetriableError{errors.New("unable to dispatch request, missing value for CtxAPINameKey")}
	}

	client := method[:strings.Index(method, ".")]
	var resp *http.Response
	var err error

	switch client {
	case "ApprovalClient":
		initServer(s, &s.trApprovalServer, func() *ApprovalServerTransport { return NewApprovalServerTransport(&s.srv.ApprovalServer) })
		resp, err = s.trApprovalServer.Do(req)
	case "CommunityClient":
		initServer(s, &s.trCommunityServer, func() *CommunityServerTransport { return NewCommunityServerTransport(&s.srv.CommunityServer) })
		resp, err = s.trCommunityServer.Do(req)
	case "CommunityEndpointsClient":
		initServer(s, &s.trCommunityEndpointsServer, func() *CommunityEndpointsServerTransport {
			return NewCommunityEndpointsServerTransport(&s.srv.CommunityEndpointsServer)
		})
		resp, err = s.trCommunityEndpointsServer.Do(req)
	case "EnclaveConnectionClient":
		initServer(s, &s.trEnclaveConnectionServer, func() *EnclaveConnectionServerTransport {
			return NewEnclaveConnectionServerTransport(&s.srv.EnclaveConnectionServer)
		})
		resp, err = s.trEnclaveConnectionServer.Do(req)
	case "EnclaveEndpointsClient":
		initServer(s, &s.trEnclaveEndpointsServer, func() *EnclaveEndpointsServerTransport {
			return NewEnclaveEndpointsServerTransport(&s.srv.EnclaveEndpointsServer)
		})
		resp, err = s.trEnclaveEndpointsServer.Do(req)
	case "OperationsClient":
		initServer(s, &s.trOperationsServer, func() *OperationsServerTransport { return NewOperationsServerTransport(&s.srv.OperationsServer) })
		resp, err = s.trOperationsServer.Do(req)
	case "TransitHubClient":
		initServer(s, &s.trTransitHubServer, func() *TransitHubServerTransport { return NewTransitHubServerTransport(&s.srv.TransitHubServer) })
		resp, err = s.trTransitHubServer.Do(req)
	case "VirtualEnclaveClient":
		initServer(s, &s.trVirtualEnclaveServer, func() *VirtualEnclaveServerTransport {
			return NewVirtualEnclaveServerTransport(&s.srv.VirtualEnclaveServer)
		})
		resp, err = s.trVirtualEnclaveServer.Do(req)
	case "WorkloadClient":
		initServer(s, &s.trWorkloadServer, func() *WorkloadServerTransport { return NewWorkloadServerTransport(&s.srv.WorkloadServer) })
		resp, err = s.trWorkloadServer.Do(req)
	default:
		err = fmt.Errorf("unhandled client %s", client)
	}

	if err != nil {
		return nil, err
	}

	return resp, nil
}

func initServer[T any](s *ServerFactoryTransport, dst **T, src func() *T) {
	s.trMu.Lock()
	if *dst == nil {
		*dst = src()
	}
	s.trMu.Unlock()
}
