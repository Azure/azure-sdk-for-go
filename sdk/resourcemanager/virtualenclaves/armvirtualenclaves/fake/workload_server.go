// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) Go Code Generator. DO NOT EDIT.

package fake

import (
	"context"
	"errors"
	"fmt"
	azfake "github.com/Azure/azure-sdk-for-go/sdk/azcore/fake"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/fake/server"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/runtime"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/to"
	"github.com/Azure/azure-sdk-for-go/sdk/resourcemanager/virtualenclaves/armvirtualenclaves"
	"net/http"
	"net/url"
	"regexp"
)

// WorkloadServer is a fake server for instances of the armvirtualenclaves.WorkloadClient type.
type WorkloadServer struct {
	// BeginCreateOrUpdate is the fake for method WorkloadClient.BeginCreateOrUpdate
	// HTTP status codes to indicate success: http.StatusOK, http.StatusCreated
	BeginCreateOrUpdate func(ctx context.Context, resourceGroupName string, virtualEnclaveName string, workloadName string, resource armvirtualenclaves.WorkloadResource, options *armvirtualenclaves.WorkloadClientBeginCreateOrUpdateOptions) (resp azfake.PollerResponder[armvirtualenclaves.WorkloadClientCreateOrUpdateResponse], errResp azfake.ErrorResponder)

	// BeginDelete is the fake for method WorkloadClient.BeginDelete
	// HTTP status codes to indicate success: http.StatusOK, http.StatusAccepted, http.StatusNoContent
	BeginDelete func(ctx context.Context, resourceGroupName string, virtualEnclaveName string, workloadName string, options *armvirtualenclaves.WorkloadClientBeginDeleteOptions) (resp azfake.PollerResponder[armvirtualenclaves.WorkloadClientDeleteResponse], errResp azfake.ErrorResponder)

	// Get is the fake for method WorkloadClient.Get
	// HTTP status codes to indicate success: http.StatusOK
	Get func(ctx context.Context, resourceGroupName string, virtualEnclaveName string, workloadName string, options *armvirtualenclaves.WorkloadClientGetOptions) (resp azfake.Responder[armvirtualenclaves.WorkloadClientGetResponse], errResp azfake.ErrorResponder)

	// NewListByEnclaveResourcePager is the fake for method WorkloadClient.NewListByEnclaveResourcePager
	// HTTP status codes to indicate success: http.StatusOK
	NewListByEnclaveResourcePager func(resourceGroupName string, virtualEnclaveName string, options *armvirtualenclaves.WorkloadClientListByEnclaveResourceOptions) (resp azfake.PagerResponder[armvirtualenclaves.WorkloadClientListByEnclaveResourceResponse])

	// NewListBySubscriptionPager is the fake for method WorkloadClient.NewListBySubscriptionPager
	// HTTP status codes to indicate success: http.StatusOK
	NewListBySubscriptionPager func(virtualEnclaveName string, options *armvirtualenclaves.WorkloadClientListBySubscriptionOptions) (resp azfake.PagerResponder[armvirtualenclaves.WorkloadClientListBySubscriptionResponse])

	// BeginUpdate is the fake for method WorkloadClient.BeginUpdate
	// HTTP status codes to indicate success: http.StatusOK, http.StatusAccepted
	BeginUpdate func(ctx context.Context, resourceGroupName string, virtualEnclaveName string, workloadName string, properties armvirtualenclaves.WorkloadPatchModel, options *armvirtualenclaves.WorkloadClientBeginUpdateOptions) (resp azfake.PollerResponder[armvirtualenclaves.WorkloadClientUpdateResponse], errResp azfake.ErrorResponder)
}

// NewWorkloadServerTransport creates a new instance of WorkloadServerTransport with the provided implementation.
// The returned WorkloadServerTransport instance is connected to an instance of armvirtualenclaves.WorkloadClient via the
// azcore.ClientOptions.Transporter field in the client's constructor parameters.
func NewWorkloadServerTransport(srv *WorkloadServer) *WorkloadServerTransport {
	return &WorkloadServerTransport{
		srv:                           srv,
		beginCreateOrUpdate:           newTracker[azfake.PollerResponder[armvirtualenclaves.WorkloadClientCreateOrUpdateResponse]](),
		beginDelete:                   newTracker[azfake.PollerResponder[armvirtualenclaves.WorkloadClientDeleteResponse]](),
		newListByEnclaveResourcePager: newTracker[azfake.PagerResponder[armvirtualenclaves.WorkloadClientListByEnclaveResourceResponse]](),
		newListBySubscriptionPager:    newTracker[azfake.PagerResponder[armvirtualenclaves.WorkloadClientListBySubscriptionResponse]](),
		beginUpdate:                   newTracker[azfake.PollerResponder[armvirtualenclaves.WorkloadClientUpdateResponse]](),
	}
}

// WorkloadServerTransport connects instances of armvirtualenclaves.WorkloadClient to instances of WorkloadServer.
// Don't use this type directly, use NewWorkloadServerTransport instead.
type WorkloadServerTransport struct {
	srv                           *WorkloadServer
	beginCreateOrUpdate           *tracker[azfake.PollerResponder[armvirtualenclaves.WorkloadClientCreateOrUpdateResponse]]
	beginDelete                   *tracker[azfake.PollerResponder[armvirtualenclaves.WorkloadClientDeleteResponse]]
	newListByEnclaveResourcePager *tracker[azfake.PagerResponder[armvirtualenclaves.WorkloadClientListByEnclaveResourceResponse]]
	newListBySubscriptionPager    *tracker[azfake.PagerResponder[armvirtualenclaves.WorkloadClientListBySubscriptionResponse]]
	beginUpdate                   *tracker[azfake.PollerResponder[armvirtualenclaves.WorkloadClientUpdateResponse]]
}

// Do implements the policy.Transporter interface for WorkloadServerTransport.
func (w *WorkloadServerTransport) Do(req *http.Request) (*http.Response, error) {
	rawMethod := req.Context().Value(runtime.CtxAPINameKey{})
	method, ok := rawMethod.(string)
	if !ok {
		return nil, nonRetriableError{errors.New("unable to dispatch request, missing value for CtxAPINameKey")}
	}

	return w.dispatchToMethodFake(req, method)
}

func (w *WorkloadServerTransport) dispatchToMethodFake(req *http.Request, method string) (*http.Response, error) {
	resultChan := make(chan result)
	defer close(resultChan)

	go func() {
		var intercepted bool
		var res result
		if workloadServerTransportInterceptor != nil {
			res.resp, res.err, intercepted = workloadServerTransportInterceptor.Do(req)
		}
		if !intercepted {
			switch method {
			case "WorkloadClient.BeginCreateOrUpdate":
				res.resp, res.err = w.dispatchBeginCreateOrUpdate(req)
			case "WorkloadClient.BeginDelete":
				res.resp, res.err = w.dispatchBeginDelete(req)
			case "WorkloadClient.Get":
				res.resp, res.err = w.dispatchGet(req)
			case "WorkloadClient.NewListByEnclaveResourcePager":
				res.resp, res.err = w.dispatchNewListByEnclaveResourcePager(req)
			case "WorkloadClient.NewListBySubscriptionPager":
				res.resp, res.err = w.dispatchNewListBySubscriptionPager(req)
			case "WorkloadClient.BeginUpdate":
				res.resp, res.err = w.dispatchBeginUpdate(req)
			default:
				res.err = fmt.Errorf("unhandled API %s", method)
			}

		}
		select {
		case resultChan <- res:
		case <-req.Context().Done():
		}
	}()

	select {
	case <-req.Context().Done():
		return nil, req.Context().Err()
	case res := <-resultChan:
		return res.resp, res.err
	}
}

func (w *WorkloadServerTransport) dispatchBeginCreateOrUpdate(req *http.Request) (*http.Response, error) {
	if w.srv.BeginCreateOrUpdate == nil {
		return nil, &nonRetriableError{errors.New("fake for method BeginCreateOrUpdate not implemented")}
	}
	beginCreateOrUpdate := w.beginCreateOrUpdate.get(req)
	if beginCreateOrUpdate == nil {
		const regexStr = `/subscriptions/(?P<subscriptionId>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/resourceGroups/(?P<resourceGroupName>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/providers/Microsoft\.Mission/virtualEnclaves/(?P<virtualEnclaveName>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/workloads/(?P<workloadName>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)`
		regex := regexp.MustCompile(regexStr)
		matches := regex.FindStringSubmatch(req.URL.EscapedPath())
		if len(matches) < 5 {
			return nil, fmt.Errorf("failed to parse path %s", req.URL.Path)
		}
		body, err := server.UnmarshalRequestAsJSON[armvirtualenclaves.WorkloadResource](req)
		if err != nil {
			return nil, err
		}
		resourceGroupNameParam, err := url.PathUnescape(matches[regex.SubexpIndex("resourceGroupName")])
		if err != nil {
			return nil, err
		}
		virtualEnclaveNameParam, err := url.PathUnescape(matches[regex.SubexpIndex("virtualEnclaveName")])
		if err != nil {
			return nil, err
		}
		workloadNameParam, err := url.PathUnescape(matches[regex.SubexpIndex("workloadName")])
		if err != nil {
			return nil, err
		}
		respr, errRespr := w.srv.BeginCreateOrUpdate(req.Context(), resourceGroupNameParam, virtualEnclaveNameParam, workloadNameParam, body, nil)
		if respErr := server.GetError(errRespr, req); respErr != nil {
			return nil, respErr
		}
		beginCreateOrUpdate = &respr
		w.beginCreateOrUpdate.add(req, beginCreateOrUpdate)
	}

	resp, err := server.PollerResponderNext(beginCreateOrUpdate, req)
	if err != nil {
		return nil, err
	}

	if !contains([]int{http.StatusOK, http.StatusCreated}, resp.StatusCode) {
		w.beginCreateOrUpdate.remove(req)
		return nil, &nonRetriableError{fmt.Errorf("unexpected status code %d. acceptable values are http.StatusOK, http.StatusCreated", resp.StatusCode)}
	}
	if !server.PollerResponderMore(beginCreateOrUpdate) {
		w.beginCreateOrUpdate.remove(req)
	}

	return resp, nil
}

func (w *WorkloadServerTransport) dispatchBeginDelete(req *http.Request) (*http.Response, error) {
	if w.srv.BeginDelete == nil {
		return nil, &nonRetriableError{errors.New("fake for method BeginDelete not implemented")}
	}
	beginDelete := w.beginDelete.get(req)
	if beginDelete == nil {
		const regexStr = `/subscriptions/(?P<subscriptionId>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/resourceGroups/(?P<resourceGroupName>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/providers/Microsoft\.Mission/virtualEnclaves/(?P<virtualEnclaveName>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/workloads/(?P<workloadName>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)`
		regex := regexp.MustCompile(regexStr)
		matches := regex.FindStringSubmatch(req.URL.EscapedPath())
		if len(matches) < 5 {
			return nil, fmt.Errorf("failed to parse path %s", req.URL.Path)
		}
		resourceGroupNameParam, err := url.PathUnescape(matches[regex.SubexpIndex("resourceGroupName")])
		if err != nil {
			return nil, err
		}
		virtualEnclaveNameParam, err := url.PathUnescape(matches[regex.SubexpIndex("virtualEnclaveName")])
		if err != nil {
			return nil, err
		}
		workloadNameParam, err := url.PathUnescape(matches[regex.SubexpIndex("workloadName")])
		if err != nil {
			return nil, err
		}
		respr, errRespr := w.srv.BeginDelete(req.Context(), resourceGroupNameParam, virtualEnclaveNameParam, workloadNameParam, nil)
		if respErr := server.GetError(errRespr, req); respErr != nil {
			return nil, respErr
		}
		beginDelete = &respr
		w.beginDelete.add(req, beginDelete)
	}

	resp, err := server.PollerResponderNext(beginDelete, req)
	if err != nil {
		return nil, err
	}

	if !contains([]int{http.StatusOK, http.StatusAccepted, http.StatusNoContent}, resp.StatusCode) {
		w.beginDelete.remove(req)
		return nil, &nonRetriableError{fmt.Errorf("unexpected status code %d. acceptable values are http.StatusOK, http.StatusAccepted, http.StatusNoContent", resp.StatusCode)}
	}
	if !server.PollerResponderMore(beginDelete) {
		w.beginDelete.remove(req)
	}

	return resp, nil
}

func (w *WorkloadServerTransport) dispatchGet(req *http.Request) (*http.Response, error) {
	if w.srv.Get == nil {
		return nil, &nonRetriableError{errors.New("fake for method Get not implemented")}
	}
	const regexStr = `/subscriptions/(?P<subscriptionId>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/resourceGroups/(?P<resourceGroupName>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/providers/Microsoft\.Mission/virtualEnclaves/(?P<virtualEnclaveName>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/workloads/(?P<workloadName>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)`
	regex := regexp.MustCompile(regexStr)
	matches := regex.FindStringSubmatch(req.URL.EscapedPath())
	if len(matches) < 5 {
		return nil, fmt.Errorf("failed to parse path %s", req.URL.Path)
	}
	resourceGroupNameParam, err := url.PathUnescape(matches[regex.SubexpIndex("resourceGroupName")])
	if err != nil {
		return nil, err
	}
	virtualEnclaveNameParam, err := url.PathUnescape(matches[regex.SubexpIndex("virtualEnclaveName")])
	if err != nil {
		return nil, err
	}
	workloadNameParam, err := url.PathUnescape(matches[regex.SubexpIndex("workloadName")])
	if err != nil {
		return nil, err
	}
	respr, errRespr := w.srv.Get(req.Context(), resourceGroupNameParam, virtualEnclaveNameParam, workloadNameParam, nil)
	if respErr := server.GetError(errRespr, req); respErr != nil {
		return nil, respErr
	}
	respContent := server.GetResponseContent(respr)
	if !contains([]int{http.StatusOK}, respContent.HTTPStatus) {
		return nil, &nonRetriableError{fmt.Errorf("unexpected status code %d. acceptable values are http.StatusOK", respContent.HTTPStatus)}
	}
	resp, err := server.MarshalResponseAsJSON(respContent, server.GetResponse(respr).WorkloadResource, req)
	if err != nil {
		return nil, err
	}
	return resp, nil
}

func (w *WorkloadServerTransport) dispatchNewListByEnclaveResourcePager(req *http.Request) (*http.Response, error) {
	if w.srv.NewListByEnclaveResourcePager == nil {
		return nil, &nonRetriableError{errors.New("fake for method NewListByEnclaveResourcePager not implemented")}
	}
	newListByEnclaveResourcePager := w.newListByEnclaveResourcePager.get(req)
	if newListByEnclaveResourcePager == nil {
		const regexStr = `/subscriptions/(?P<subscriptionId>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/resourceGroups/(?P<resourceGroupName>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/providers/Microsoft\.Mission/virtualEnclaves/(?P<virtualEnclaveName>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/workloads`
		regex := regexp.MustCompile(regexStr)
		matches := regex.FindStringSubmatch(req.URL.EscapedPath())
		if len(matches) < 4 {
			return nil, fmt.Errorf("failed to parse path %s", req.URL.Path)
		}
		resourceGroupNameParam, err := url.PathUnescape(matches[regex.SubexpIndex("resourceGroupName")])
		if err != nil {
			return nil, err
		}
		virtualEnclaveNameParam, err := url.PathUnescape(matches[regex.SubexpIndex("virtualEnclaveName")])
		if err != nil {
			return nil, err
		}
		resp := w.srv.NewListByEnclaveResourcePager(resourceGroupNameParam, virtualEnclaveNameParam, nil)
		newListByEnclaveResourcePager = &resp
		w.newListByEnclaveResourcePager.add(req, newListByEnclaveResourcePager)
		server.PagerResponderInjectNextLinks(newListByEnclaveResourcePager, req, func(page *armvirtualenclaves.WorkloadClientListByEnclaveResourceResponse, createLink func() string) {
			page.NextLink = to.Ptr(createLink())
		})
	}
	resp, err := server.PagerResponderNext(newListByEnclaveResourcePager, req)
	if err != nil {
		return nil, err
	}
	if !contains([]int{http.StatusOK}, resp.StatusCode) {
		w.newListByEnclaveResourcePager.remove(req)
		return nil, &nonRetriableError{fmt.Errorf("unexpected status code %d. acceptable values are http.StatusOK", resp.StatusCode)}
	}
	if !server.PagerResponderMore(newListByEnclaveResourcePager) {
		w.newListByEnclaveResourcePager.remove(req)
	}
	return resp, nil
}

func (w *WorkloadServerTransport) dispatchNewListBySubscriptionPager(req *http.Request) (*http.Response, error) {
	if w.srv.NewListBySubscriptionPager == nil {
		return nil, &nonRetriableError{errors.New("fake for method NewListBySubscriptionPager not implemented")}
	}
	newListBySubscriptionPager := w.newListBySubscriptionPager.get(req)
	if newListBySubscriptionPager == nil {
		const regexStr = `/subscriptions/(?P<subscriptionId>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/providers/Microsoft\.Mission/virtualEnclaves/(?P<virtualEnclaveName>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/workloads`
		regex := regexp.MustCompile(regexStr)
		matches := regex.FindStringSubmatch(req.URL.EscapedPath())
		if len(matches) < 3 {
			return nil, fmt.Errorf("failed to parse path %s", req.URL.Path)
		}
		virtualEnclaveNameParam, err := url.PathUnescape(matches[regex.SubexpIndex("virtualEnclaveName")])
		if err != nil {
			return nil, err
		}
		resp := w.srv.NewListBySubscriptionPager(virtualEnclaveNameParam, nil)
		newListBySubscriptionPager = &resp
		w.newListBySubscriptionPager.add(req, newListBySubscriptionPager)
		server.PagerResponderInjectNextLinks(newListBySubscriptionPager, req, func(page *armvirtualenclaves.WorkloadClientListBySubscriptionResponse, createLink func() string) {
			page.NextLink = to.Ptr(createLink())
		})
	}
	resp, err := server.PagerResponderNext(newListBySubscriptionPager, req)
	if err != nil {
		return nil, err
	}
	if !contains([]int{http.StatusOK}, resp.StatusCode) {
		w.newListBySubscriptionPager.remove(req)
		return nil, &nonRetriableError{fmt.Errorf("unexpected status code %d. acceptable values are http.StatusOK", resp.StatusCode)}
	}
	if !server.PagerResponderMore(newListBySubscriptionPager) {
		w.newListBySubscriptionPager.remove(req)
	}
	return resp, nil
}

func (w *WorkloadServerTransport) dispatchBeginUpdate(req *http.Request) (*http.Response, error) {
	if w.srv.BeginUpdate == nil {
		return nil, &nonRetriableError{errors.New("fake for method BeginUpdate not implemented")}
	}
	beginUpdate := w.beginUpdate.get(req)
	if beginUpdate == nil {
		const regexStr = `/subscriptions/(?P<subscriptionId>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/resourceGroups/(?P<resourceGroupName>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/providers/Microsoft\.Mission/virtualEnclaves/(?P<virtualEnclaveName>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/workloads/(?P<workloadName>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)`
		regex := regexp.MustCompile(regexStr)
		matches := regex.FindStringSubmatch(req.URL.EscapedPath())
		if len(matches) < 5 {
			return nil, fmt.Errorf("failed to parse path %s", req.URL.Path)
		}
		body, err := server.UnmarshalRequestAsJSON[armvirtualenclaves.WorkloadPatchModel](req)
		if err != nil {
			return nil, err
		}
		resourceGroupNameParam, err := url.PathUnescape(matches[regex.SubexpIndex("resourceGroupName")])
		if err != nil {
			return nil, err
		}
		virtualEnclaveNameParam, err := url.PathUnescape(matches[regex.SubexpIndex("virtualEnclaveName")])
		if err != nil {
			return nil, err
		}
		workloadNameParam, err := url.PathUnescape(matches[regex.SubexpIndex("workloadName")])
		if err != nil {
			return nil, err
		}
		respr, errRespr := w.srv.BeginUpdate(req.Context(), resourceGroupNameParam, virtualEnclaveNameParam, workloadNameParam, body, nil)
		if respErr := server.GetError(errRespr, req); respErr != nil {
			return nil, respErr
		}
		beginUpdate = &respr
		w.beginUpdate.add(req, beginUpdate)
	}

	resp, err := server.PollerResponderNext(beginUpdate, req)
	if err != nil {
		return nil, err
	}

	if !contains([]int{http.StatusOK, http.StatusAccepted}, resp.StatusCode) {
		w.beginUpdate.remove(req)
		return nil, &nonRetriableError{fmt.Errorf("unexpected status code %d. acceptable values are http.StatusOK, http.StatusAccepted", resp.StatusCode)}
	}
	if !server.PollerResponderMore(beginUpdate) {
		w.beginUpdate.remove(req)
	}

	return resp, nil
}

// set this to conditionally intercept incoming requests to WorkloadServerTransport
var workloadServerTransportInterceptor interface {
	// Do returns true if the server transport should use the returned response/error
	Do(*http.Request) (*http.Response, error, bool)
}
