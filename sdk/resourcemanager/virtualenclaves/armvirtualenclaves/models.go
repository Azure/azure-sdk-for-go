// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) Go Code Generator. DO NOT EDIT.

package armvirtualenclaves

import "time"

// ApprovalActionRequest - Request body for calling post-action
type ApprovalActionRequest struct {
	// REQUIRED; Approval status indicating 'Approved' or 'Rejected'
	ApprovalStatus *ApprovalActionRequestApprovalStatus
}

// ApprovalActionResponse - Response body after handling of approvalCallbackRequest
type ApprovalActionResponse struct {
	// REQUIRED; Confirmation message indicating the result of the operation.
	Message *string
}

// ApprovalCallbackRequest - Request body for calling post-action
type ApprovalCallbackRequest struct {
	// REQUIRED; Approval status indicating 'Approved' or 'Rejected'
	ApprovalStatus *ApprovalCallbackRequestApprovalStatus

	// REQUIRED; Resource request action indicating action which needed to be performed upon calling approval-callback post action
	ResourceRequestAction *ApprovalCallbackRequestResourceRequestAction

	// Payload requested by client upon approval action
	ApprovalCallbackPayload *string
}

// ApprovalDeletionCallbackRequest - Request body for calling post-action
type ApprovalDeletionCallbackRequest struct {
	// REQUIRED; Resource request action indicating action which needed to be performed upon calling approval-deletion-callback
	// post action
	ResourceRequestAction *ApprovalDeletionCallbackRequestResourceRequestAction
}

// ApprovalPatchModel - Approvals patch model.
type ApprovalPatchModel struct {
	// Approval Patch properties
	Properties *ApprovalPatchProperties
}

// ApprovalPatchProperties - Approvals patch properties.
type ApprovalPatchProperties struct {
	// REQUIRED; Request metadata for the approval request.
	RequestMetadata *RequestMetadataUpdatableProperties

	// List of approvers for the approval request
	Approvers []*Approver

	// Approval request creation time
	CreatedAt *time.Time

	// Parameter for optimizing query results
	GrandparentResourceID *string

	// Parameter for optimizing query results
	ParentResourceID *string

	// Approval request state change time, time at which approval request state changed from pending to approved or rejected.
	StateChangedAt *time.Time

	// Ticket ID for the approval request
	TicketID *string
}

// ApprovalProperties - Approval Base model.
type ApprovalProperties struct {
	// REQUIRED; Request metadata for the approval request.
	RequestMetadata *RequestMetadata

	// List of approvers for the approval request
	Approvers []*Approver

	// Approval request creation time
	CreatedAt *time.Time

	// Parameter for optimizing query results
	GrandparentResourceID *string

	// Parameter for optimizing query results
	ParentResourceID *string

	// Approval request state change time, time at which approval request state changed from pending to approved or rejected.
	StateChangedAt *time.Time

	// Ticket ID for the approval request
	TicketID *string

	// READ-ONLY; Provisioning State.
	ProvisioningState *ProvisioningState
}

// ApprovalResource - Approval Model Resource
type ApprovalResource struct {
	// The resource-specific properties for this resource.
	Properties *ApprovalProperties

	// READ-ONLY; Fully qualified resource ID for the resource. Ex - /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}
	ID *string

	// READ-ONLY; The name of the resource
	Name *string

	// READ-ONLY; Azure Resource Manager metadata containing createdBy and modifiedBy information.
	SystemData *SystemData

	// READ-ONLY; The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or "Microsoft.Storage/storageAccounts"
	Type *string
}

// ApprovalResourceListResult - The response of a ApprovalResource list operation.
type ApprovalResourceListResult struct {
	// REQUIRED; The ApprovalResource items on this page
	Value []*ApprovalResource

	// The link to the next page of items
	NextLink *string
}

// ApprovalSettings Properties
type ApprovalSettings struct {
	// Approval required for enclave connection creation (Required or NotRequired).
	ConnectionCreation *ApprovalPolicy

	// Approval required for enclave connection deletion (Required or NotRequired).
	ConnectionDeletion *ApprovalPolicy

	// Approval required for enclave connection update (Required or NotRequired).
	ConnectionUpdate *ApprovalPolicy

	// Approval required for virtual enclave creation (Required or NotRequired).
	EnclaveCreation *ApprovalPolicy

	// Approval required for virtual enclave deletion (Required or NotRequired).
	EnclaveDeletion *ApprovalPolicy

	// Approval required for endpoint creation (Required or NotRequired).
	EndpointCreation *ApprovalPolicy

	// Approval required for endpoint deletion (Required or NotRequired).
	EndpointDeletion *ApprovalPolicy

	// Approval required for endpoint update (Required or NotRequired).
	EndpointUpdate *ApprovalPolicy

	// Approval required for toggling maintenance mode (Required or NotRequired).
	MaintenanceMode *ApprovalPolicy

	// List of mandatory approvers for the approval request
	MandatoryApprovers []*MandatoryApprover

	// Minimum number of approvers required for the approval request
	MinimumApproversRequired *int64

	// Notification will be sent on any action taken (Approve/Reject) on an Approval Request
	NotificationOnApprovalAction *ApprovalPolicy

	// Notification will be sent on creation of an Approval Request
	NotificationOnApprovalCreation *ApprovalPolicy

	// Notification will be sent on deletion of an Approval Request
	NotificationOnApprovalDeletion *ApprovalPolicy

	// Approval required for deploying service catalog templates (Required or NotRequired).
	ServiceCatalogDeployment *ApprovalPolicy
}

// ApprovalSettingsPatchProperties - ApprovalSettings Properties
type ApprovalSettingsPatchProperties struct {
	// List of mandatory approvers for the approval request
	MandatoryApprovers []*MandatoryApprover
}

// Approver Metadata for approvals request.
type Approver struct {
	// REQUIRED; Entra ObjectID of the approver
	ApproverEntraID *string

	// REQUIRED; approval request last updated at
	LastUpdatedAt *time.Time

	// Action Performed by approver
	ActionPerformed *ActionPerformed
}

// CheckAddressSpaceAvailabilityRequest - Request to the action call to check address space availability.
type CheckAddressSpaceAvailabilityRequest struct {
	// REQUIRED; Resource Id of the Community
	CommunityResourceID *string

	// REQUIRED; Information about the enclave virtual network
	EnclaveVirtualNetwork *EnclaveVirtualNetworkModel
}

// CheckAddressSpaceAvailabilityResponse - Response of availability of the requested address space.
type CheckAddressSpaceAvailabilityResponse struct {
	// REQUIRED; Boolean representing whether the address space is available.
	Value *bool
}

// CommunityEndpointDestinationRule - Base type for destination rules.
type CommunityEndpointDestinationRule struct {
	// Destination address. Can include multiple CIDR/IP Addresses or fqdn tags or fqdns (for community endpoint) separated by
	// commas.
	Destination *string

	// Destination Type.
	DestinationType *DestinationType

	// Endpoint Rule Name.
	EndpointRuleName *string

	// Port. Can include multiple ports separated by commas or a range indicated by a hyphen.
	Ports *string

	// Protocols. Options specified by Endpoint Protocol Enum.
	Protocols []*CommunityEndpointProtocol

	// Transit Hub Resource Id.
	TransitHubResourceID *string
}

// CommunityEndpointPatchModel - Community Endpoint Patch Resource
type CommunityEndpointPatchModel struct {
	// Community Endpoint Patch properties
	Properties *CommunityEndpointPatchProperties

	// Resource tags.
	Tags map[string]*string
}

// CommunityEndpointPatchProperties - Community Endpoint patchable Properties
type CommunityEndpointPatchProperties struct {
	// REQUIRED; Community Endpoint Rule Collection.
	RuleCollection []*CommunityEndpointDestinationRule
}

// CommunityEndpointProperties - Community Endpoint Resource properties
type CommunityEndpointProperties struct {
	// REQUIRED; Community Endpoint Rule Collection.
	RuleCollection []*CommunityEndpointDestinationRule

	// READ-ONLY; Provisioning State.
	ProvisioningState *ProvisioningState

	// READ-ONLY; List of resource ids created by community endpoint.
	ResourceCollection []*string
}

// CommunityEndpointResource - CommunityEndpoint Model Resource
type CommunityEndpointResource struct {
	// REQUIRED; The geo-location where the resource lives
	Location *string

	// The resource-specific properties for this resource.
	Properties *CommunityEndpointProperties

	// Resource tags.
	Tags map[string]*string

	// READ-ONLY; Fully qualified resource ID for the resource. Ex - /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}
	ID *string

	// READ-ONLY; The name of the resource
	Name *string

	// READ-ONLY; Azure Resource Manager metadata containing createdBy and modifiedBy information.
	SystemData *SystemData

	// READ-ONLY; The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or "Microsoft.Storage/storageAccounts"
	Type *string
}

// CommunityEndpointResourceListResult - The response of a CommunityEndpointResource list operation.
type CommunityEndpointResourceListResult struct {
	// REQUIRED; The CommunityEndpointResource items on this page
	Value []*CommunityEndpointResource

	// The link to the next page of items
	NextLink *string
}

// CommunityPatchModel - Community Patch Resource
type CommunityPatchModel struct {
	// The managed service identities assigned to this resource.
	Identity *ManagedServiceIdentity

	// Community Patch properties
	Properties *CommunityPatchProperties

	// Resource tags.
	Tags map[string]*string
}

// CommunityPatchProperties - Community Resource Properties without default values
type CommunityPatchProperties struct {
	// Approval requirements for various actions on the community's resources.
	ApprovalSettings *ApprovalSettingsPatchProperties

	// Community role assignments
	CommunityRoleAssignments []*RoleAssignmentItem

	// DNS Servers.
	DNSServers []*string

	// SKU of the community's Azure Firewall (Basic, Standard, Premium). Standard is the default
	FirewallSKU *FirewallSKU

	// List of services governed by a community.
	GovernedServiceList []*GovernedServiceItem

	// Maintenance Mode configuration.
	MaintenanceModeConfiguration *MaintenanceModeConfigurationPatchModel

	// Policy override setting for the community. Specifies whether to apply enclave-specific policies or disable policy enforcement.
	PolicyOverride *CommunityPropertiesPolicyOverride
}

// CommunityProperties - Community Resource Properties
type CommunityProperties struct {
	// Address Space.
	AddressSpace *string

	// Approval requirements for various actions on the community's resources.
	ApprovalSettings *ApprovalSettings

	// Community role assignments
	CommunityRoleAssignments []*RoleAssignmentItem

	// DNS Servers.
	DNSServers []*string

	// SKU of the community's Azure Firewall (Basic, Standard, Premium). Standard is the default
	FirewallSKU *FirewallSKU

	// List of services governed by a community.
	GovernedServiceList []*GovernedServiceItem

	// Maintenance Mode configuration.
	MaintenanceModeConfiguration *MaintenanceModeConfigurationModel

	// Policy override setting for the community. Specifies whether to apply enclave-specific policies or disable policy enforcement.
	PolicyOverride *CommunityPropertiesPolicyOverride

	// READ-ONLY; Managed On Behalf Of Configuration.
	ManagedOnBehalfOfConfiguration *ManagedOnBehalfOfConfiguration

	// READ-ONLY; Managed resource group name.
	ManagedResourceGroupName *string

	// READ-ONLY; Provisioning State.
	ProvisioningState *ProvisioningState

	// READ-ONLY; List of resource ids created by communities.
	ResourceCollection []*string
}

// CommunityResource - Community Model Resource
type CommunityResource struct {
	// REQUIRED; The geo-location where the resource lives
	Location *string

	// The managed service identities assigned to this resource.
	Identity *ManagedServiceIdentity

	// The resource-specific properties for this resource.
	Properties *CommunityProperties

	// Resource tags.
	Tags map[string]*string

	// READ-ONLY; Fully qualified resource ID for the resource. Ex - /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}
	ID *string

	// READ-ONLY; The name of the resource
	Name *string

	// READ-ONLY; Azure Resource Manager metadata containing createdBy and modifiedBy information.
	SystemData *SystemData

	// READ-ONLY; The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or "Microsoft.Storage/storageAccounts"
	Type *string
}

// CommunityResourceListResult - The response of a CommunityResource list operation.
type CommunityResourceListResult struct {
	// REQUIRED; The CommunityResource items on this page
	Value []*CommunityResource

	// The link to the next page of items
	NextLink *string
}

// EnclaveAddressSpacesModel - Enclave Address Spaces
type EnclaveAddressSpacesModel struct {
	// Enclave Address Space
	EnclaveAddressSpace *string

	// Managed Address Space
	ManagedAddressSpace *string
}

// EnclaveConnectionPatchModel - Enclave Connection Patch Resource
type EnclaveConnectionPatchModel struct {
	// Enclave Connection Patch properties
	Properties *EnclaveConnectionPatchProperties

	// Resource tags.
	Tags map[string]*string
}

// EnclaveConnectionPatchProperties - Enclave Connection patchable Properties
type EnclaveConnectionPatchProperties struct {
	// Source CIDR.
	SourceCidr *string
}

// EnclaveConnectionProperties - Enclave Connection Resource properties
type EnclaveConnectionProperties struct {
	// REQUIRED; Community Resource Id.
	CommunityResourceID *string

	// REQUIRED; Destination Endpoint Resource Id.
	DestinationEndpointID *string

	// REQUIRED; Source Resource Id.
	SourceResourceID *string

	// Source CIDR.
	SourceCidr *string

	// READ-ONLY; Provisioning State.
	ProvisioningState *ProvisioningState

	// READ-ONLY; List of resource ids modified by enclave Connections.
	ResourceCollection []*string

	// READ-ONLY; The state of the enclaveConnection.
	State *EnclaveConnectionState
}

// EnclaveConnectionResource - EnclaveConnection Model Resource
type EnclaveConnectionResource struct {
	// REQUIRED; The geo-location where the resource lives
	Location *string

	// The resource-specific properties for this resource.
	Properties *EnclaveConnectionProperties

	// Resource tags.
	Tags map[string]*string

	// READ-ONLY; Fully qualified resource ID for the resource. Ex - /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}
	ID *string

	// READ-ONLY; The name of the resource
	Name *string

	// READ-ONLY; Azure Resource Manager metadata containing createdBy and modifiedBy information.
	SystemData *SystemData

	// READ-ONLY; The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or "Microsoft.Storage/storageAccounts"
	Type *string
}

// EnclaveConnectionResourceListResult - The response of a EnclaveConnectionResource list operation.
type EnclaveConnectionResourceListResult struct {
	// REQUIRED; The EnclaveConnectionResource items on this page
	Value []*EnclaveConnectionResource

	// The link to the next page of items
	NextLink *string
}

// EnclaveDefaultSettingsModel - Virtual Enclave Default Settings
type EnclaveDefaultSettingsModel struct {
	// Diagnostic Destination.
	DiagnosticDestination *DiagnosticDestination

	// READ-ONLY; Key Vault Resource Id.
	KeyVaultResourceID *string

	// READ-ONLY; Log Analytics Resource Ids.
	LogAnalyticsResourceIDCollection []*string

	// READ-ONLY; Storage Account Resource Id.
	StorageAccountResourceID *string
}

// EnclaveDefaultSettingsPatchModel - Virtual Enclave Default Settings
type EnclaveDefaultSettingsPatchModel struct {
	// Diagnostic Destination.
	DiagnosticDestination *DiagnosticDestination
}

// EnclaveEndpointDestinationRule - Enclave Endpoint Rule Properties
type EnclaveEndpointDestinationRule struct {
	// Destination address. Can include multiple CIDR/IP Addresses or fqdn tags or fqdns (for community endpoint) separated by
	// commas.
	Destination *string

	// Endpoint Rule Name.
	EndpointRuleName *string

	// Port. Can include multiple ports separated by commas or a range indicated by a hyphen.
	Ports *string

	// Protocols. Options specified by Endpoint Protocol Enum.
	Protocols []*EnclaveEndpointProtocol
}

// EnclaveEndpointPatchModel - Enclave Endpoint Patch Resource
type EnclaveEndpointPatchModel struct {
	// Enclave Endpoint Patch properties
	Properties *EnclaveEndpointPatchProperties

	// Resource tags.
	Tags map[string]*string
}

// EnclaveEndpointPatchProperties - Enclave Endpoint patchable Properties
type EnclaveEndpointPatchProperties struct {
	// REQUIRED; Enclave Endpoint Rule Collection.
	RuleCollection []*EnclaveEndpointDestinationRule
}

// EnclaveEndpointProperties - Enclave Endpoint Resource properties
type EnclaveEndpointProperties struct {
	// REQUIRED; Enclave Endpoint Rule Collection.
	RuleCollection []*EnclaveEndpointDestinationRule

	// READ-ONLY; Provisioning State.
	ProvisioningState *ProvisioningState

	// READ-ONLY; List of resource ids created by community endpoint.
	ResourceCollection []*string
}

// EnclaveEndpointResource - EnclaveEndpoint Model Resource
type EnclaveEndpointResource struct {
	// REQUIRED; The geo-location where the resource lives
	Location *string

	// The resource-specific properties for this resource.
	Properties *EnclaveEndpointProperties

	// Resource tags.
	Tags map[string]*string

	// READ-ONLY; Fully qualified resource ID for the resource. Ex - /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}
	ID *string

	// READ-ONLY; The name of the resource
	Name *string

	// READ-ONLY; Azure Resource Manager metadata containing createdBy and modifiedBy information.
	SystemData *SystemData

	// READ-ONLY; The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or "Microsoft.Storage/storageAccounts"
	Type *string
}

// EnclaveEndpointResourceListResult - The response of a EnclaveEndpointResource list operation.
type EnclaveEndpointResourceListResult struct {
	// REQUIRED; The EnclaveEndpointResource items on this page
	Value []*EnclaveEndpointResource

	// The link to the next page of items
	NextLink *string
}

// EnclaveResource - Virtual Enclave Model Resource
type EnclaveResource struct {
	// REQUIRED; The geo-location where the resource lives
	Location *string

	// The managed service identities assigned to this resource.
	Identity *ManagedServiceIdentity

	// The resource-specific properties for this resource.
	Properties *VirtualEnclaveProperties

	// Resource tags.
	Tags map[string]*string

	// READ-ONLY; Fully qualified resource ID for the resource. Ex - /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}
	ID *string

	// READ-ONLY; The name of the resource
	Name *string

	// READ-ONLY; Azure Resource Manager metadata containing createdBy and modifiedBy information.
	SystemData *SystemData

	// READ-ONLY; The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or "Microsoft.Storage/storageAccounts"
	Type *string
}

// EnclaveResourceListResult - The response of a EnclaveResource list operation.
type EnclaveResourceListResult struct {
	// REQUIRED; The EnclaveResource items on this page
	Value []*EnclaveResource

	// The link to the next page of items
	NextLink *string
}

// EnclaveVirtualNetworkModel - Enclave Virtual Network Properties
type EnclaveVirtualNetworkModel struct {
	// Allow Subnet Communication.
	AllowSubnetCommunication *bool

	// Custom CIDR Range.
	CustomCidrRange *string

	// Network Name.
	NetworkName *string

	// Network Size.
	NetworkSize *string

	// Subnet Configurations.
	SubnetConfigurations []*SubnetConfiguration
}

// GovernedServiceItem Properties
type GovernedServiceItem struct {
	// REQUIRED; Service ID
	ServiceID *ServiceIdentifier

	// Initiative enforcement (Enabled or Disabled).
	Enforcement *GovernedServiceItemEnforcement

	// Governance option for this service (Allow, Deny, ExceptionOnly, or NotApplicable).
	Option *GovernedServiceItemOption

	// Enforcement mode for policy. AuditOnly, Enforce, or None.
	PolicyAction *GovernedServiceItemPolicyAction

	// READ-ONLY; Initiatives associated with this service.
	Initiatives []*string

	// READ-ONLY; Service name.
	ServiceName *string
}

// MaintenanceModeConfigurationModel - Maintenance Mode
type MaintenanceModeConfigurationModel struct {
	// REQUIRED; Current mode of Maintenance Mode Configuration
	Mode *MaintenanceModeConfigurationModelMode

	// Justification for entering or exiting Maintenance Mode
	Justification *MaintenanceModeConfigurationModelJustification

	// The user, group or service principal object affected by Maintenance Mode
	Principals []*Principal
}

// MaintenanceModeConfigurationPatchModel - Maintenance Mode Patch Model
type MaintenanceModeConfigurationPatchModel struct {
	// REQUIRED; Current mode of Maintenance Mode Configuration
	Mode *MaintenanceModeConfigurationModelMode

	// Justification for entering or exiting Maintenance Mode
	Justification *MaintenanceModeConfigurationModelJustification

	// The user, group or service principal object affected by Maintenance Mode
	Principals []*Principal
}

// ManagedOnBehalfOfConfiguration - Managed-On-Behalf-Of configuration properties. This configuration exists for the resources
// where a resource provider manages those resources on behalf of the resource owner.
type ManagedOnBehalfOfConfiguration struct {
	// READ-ONLY; Managed-On-Behalf-Of broker resources
	MoboBrokerResources []*MoboBrokerResource
}

// ManagedServiceIdentity - Managed service identity (system assigned and/or user assigned identities)
type ManagedServiceIdentity struct {
	// REQUIRED; The type of managed identity assigned to this resource.
	Type *ManagedServiceIdentityType

	// The identities assigned to this resource by the user.
	UserAssignedIdentities map[string]*UserAssignedIdentity

	// READ-ONLY; The service principal ID of the system assigned identity. This property will only be provided for a system assigned
	// identity.
	PrincipalID *string

	// READ-ONLY; The tenant ID of the system assigned identity. This property will only be provided for a system assigned identity.
	TenantID *string
}

// MandatoryApprover - Approver Metadata for approvals request.
type MandatoryApprover struct {
	// REQUIRED; EntraId of the approver
	ApproverEntraID *string
}

// MoboBrokerResource - Managed-On-Behalf-Of broker resource. This resource is created by the Resource Provider to manage
// some resources on behalf of the user.
type MoboBrokerResource struct {
	// Resource identifier of a Managed-On-Behalf-Of broker resource
	ID *string
}

// Operation - REST API Operation
//
// Details of a REST API operation, returned from the Resource Provider Operations API
type Operation struct {
	// Localized display information for this particular operation.
	Display *OperationDisplay

	// READ-ONLY; Extensible enum. Indicates the action type. "Internal" refers to actions that are for internal only APIs.
	ActionType *ActionType

	// READ-ONLY; Whether the operation applies to data-plane. This is "true" for data-plane operations and "false" for Azure
	// Resource Manager/control-plane operations.
	IsDataAction *bool

	// READ-ONLY; The name of the operation, as per Resource-Based Access Control (RBAC). Examples: "Microsoft.Compute/virtualMachines/write",
	// "Microsoft.Compute/virtualMachines/capture/action"
	Name *string

	// READ-ONLY; The intended executor of the operation; as in Resource Based Access Control (RBAC) and audit logs UX. Default
	// value is "user,system"
	Origin *Origin
}

// OperationDisplay - Localized display information for and operation.
type OperationDisplay struct {
	// READ-ONLY; The short, localized friendly description of the operation; suitable for tool tips and detailed views.
	Description *string

	// READ-ONLY; The concise, localized friendly name for the operation; suitable for dropdowns. E.g. "Create or Update Virtual
	// Machine", "Restart Virtual Machine".
	Operation *string

	// READ-ONLY; The localized friendly form of the resource provider name, e.g. "Microsoft Monitoring Insights" or "Microsoft
	// Compute".
	Provider *string

	// READ-ONLY; The localized friendly name of the resource type related to this operation. E.g. "Virtual Machines" or "Job
	// Schedule Collections".
	Resource *string
}

// OperationListResult - A list of REST API operations supported by an Azure Resource Provider. It contains an URL link to
// get the next set of results.
type OperationListResult struct {
	// REQUIRED; The Operation items on this page
	Value []*Operation

	// The link to the next page of items
	NextLink *string
}

// Principal for maintenance mode or role assignments
type Principal struct {
	// REQUIRED; The object id associated with the principal
	ID *string

	// REQUIRED; The type of the object id. We currently allow users, groups, and service principals
	Type *PrincipalType
}

// RequestMetadata - Request Metadata for approvals request.
type RequestMetadata struct {
	// REQUIRED; Resource Action of the item being approved or declined.
	ResourceAction *string

	// Payload to be sent upon any action on approval request
	ApprovalCallbackPayload *string

	// Route name for the approval callback
	ApprovalCallbackRoute *string

	// Status of the approval. Uses ApprovalStatus enum.
	ApprovalStatus *ApprovalStatus
}

// RequestMetadataUpdatableProperties - Request Metadata patch properties.
type RequestMetadataUpdatableProperties struct {
	// REQUIRED; Resource Action of the item being approved or declined.
	ResourceAction *string

	// Payload to be sent upon any action on approval request
	ApprovalCallbackPayload *string

	// Route name for the approval callback
	ApprovalCallbackRoute *string

	// Status of the approval. Uses ApprovalStatus enum.
	ApprovalStatus *ApprovalStatus
}

// RoleAssignmentItem - Role assignment item that indicates which principals should be assigned this role definition
type RoleAssignmentItem struct {
	// REQUIRED; Role definition identifier
	RoleDefinitionID *string

	// List of principal IDs to which to assign this role definition
	Principals []*Principal
}

// SubnetConfiguration - Subnet Configuration
type SubnetConfiguration struct {
	// REQUIRED; Network prefix size.
	NetworkPrefixSize *int32

	// REQUIRED; Subnet name.
	SubnetName *string

	// Subnet delegation.
	SubnetDelegation *string

	// READ-ONLY; Address prefix.
	AddressPrefix *string

	// READ-ONLY; Network security group ID.
	NetworkSecurityGroupResourceID *string

	// READ-ONLY; Subnet Resource ID.
	SubnetResourceID *string
}

// SystemData - Metadata pertaining to creation and last modification of the resource.
type SystemData struct {
	// The timestamp of resource creation (UTC).
	CreatedAt *time.Time

	// The identity that created the resource.
	CreatedBy *string

	// The type of identity that created the resource.
	CreatedByType *CreatedByType

	// The timestamp of resource last modification (UTC)
	LastModifiedAt *time.Time

	// The identity that last modified the resource.
	LastModifiedBy *string

	// The type of identity that last modified the resource.
	LastModifiedByType *CreatedByType
}

// TransitHubPatchModel - TH Patch Resource
type TransitHubPatchModel struct {
	// The TransitHub resource.
	Properties *TransitHubPatchProperties

	// Resource tags.
	Tags map[string]*string
}

// TransitHubPatchProperties - Transit Hub patchable Properties
type TransitHubPatchProperties struct {
	// The state of the transitHub.
	State *TransitHubState

	// The TransitOption of the transitHub.
	TransitOption *TransitOption
}

// TransitHubProperties - Describes the properties of an Transit Hub.
type TransitHubProperties struct {
	// The state of the transitHub.
	State *TransitHubState

	// The TransitOption of the transitHub.
	TransitOption *TransitOption

	// READ-ONLY; The status of the last operation.
	ProvisioningState *ProvisioningState

	// READ-ONLY; List of resource ids modified by transitHubs.
	ResourceCollection []*string
}

// TransitHubResource - TransitHub Model Resource
type TransitHubResource struct {
	// REQUIRED; The geo-location where the resource lives
	Location *string

	// The resource-specific properties for this resource.
	Properties *TransitHubProperties

	// Resource tags.
	Tags map[string]*string

	// READ-ONLY; Fully qualified resource ID for the resource. Ex - /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}
	ID *string

	// READ-ONLY; The name of the resource
	Name *string

	// READ-ONLY; Azure Resource Manager metadata containing createdBy and modifiedBy information.
	SystemData *SystemData

	// READ-ONLY; The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or "Microsoft.Storage/storageAccounts"
	Type *string
}

// TransitHubResourceListResult - The response of a TransitHubResource list operation.
type TransitHubResourceListResult struct {
	// REQUIRED; The TransitHubResource items on this page
	Value []*TransitHubResource

	// The link to the next page of items
	NextLink *string
}

// TransitOption Properties
type TransitOption struct {
	// Transit Option Params
	Params *TransitOptionParams

	// Transit Option Type.
	Type *TransitOptionType
}

// TransitOptionParams Properties
type TransitOptionParams struct {
	// Transit Option Params remoteVirtualNetworkId.
	RemoteVirtualNetworkID *string

	// Transit Option Params scaleUnits.
	ScaleUnits *int64
}

// UserAssignedIdentity - User assigned identity properties
type UserAssignedIdentity struct {
	// READ-ONLY; The client ID of the assigned identity.
	ClientID *string

	// READ-ONLY; The principal ID of the assigned identity.
	PrincipalID *string
}

// VirtualEnclavePatchModel - Virtual Enclave Patch Model
type VirtualEnclavePatchModel struct {
	// The managed service identities assigned to this resource.
	Identity *ManagedServiceIdentity

	// Virtual Enclave Patch properties
	Properties *VirtualEnclavePatchProperties

	// Resource tags.
	Tags map[string]*string
}

// VirtualEnclavePatchProperties - Virtual Enclave Patchable Properties
type VirtualEnclavePatchProperties struct {
	// REQUIRED; Virtual Network.
	EnclaveVirtualNetwork *EnclaveVirtualNetworkModel

	// Deploy Bastion service (True or False).
	BastionEnabled *bool

	// Enclave default settings.
	EnclaveDefaultSettings *EnclaveDefaultSettingsPatchModel

	// Enclave role assignments
	EnclaveRoleAssignments []*RoleAssignmentItem

	// Enclave specific policies
	GovernedServiceList []*GovernedServiceItem

	// Maintenance Mode configuration.
	MaintenanceModeConfiguration *MaintenanceModeConfigurationPatchModel

	// Workload role assignments
	WorkloadRoleAssignments []*RoleAssignmentItem
}

// VirtualEnclaveProperties - Virtual Enclave Resource properties
type VirtualEnclaveProperties struct {
	// REQUIRED; Community Resource Id.
	CommunityResourceID *string

	// REQUIRED; Virtual Network.
	EnclaveVirtualNetwork *EnclaveVirtualNetworkModel

	// Deploy Bastion service (True or False).
	BastionEnabled *bool

	// Enclave default settings.
	EnclaveDefaultSettings *EnclaveDefaultSettingsModel

	// Enclave role assignments
	EnclaveRoleAssignments []*RoleAssignmentItem

	// Enclave specific policies
	GovernedServiceList []*GovernedServiceItem

	// Maintenance Mode configuration.
	MaintenanceModeConfiguration *MaintenanceModeConfigurationModel

	// Workload role assignments
	WorkloadRoleAssignments []*RoleAssignmentItem

	// READ-ONLY; Enclave Address Spaces
	EnclaveAddressSpaces *EnclaveAddressSpacesModel

	// READ-ONLY; Managed On Behalf Of Configuration.
	ManagedOnBehalfOfConfiguration *ManagedOnBehalfOfConfiguration

	// READ-ONLY; Managed resource group name.
	ManagedResourceGroupName *string

	// READ-ONLY; Provisioning State.
	ProvisioningState *ProvisioningState

	// READ-ONLY; List of resource ids created by Virtual Enclave.
	ResourceCollection []*string
}

// WorkloadPatchModel - Workload Patch Resource
type WorkloadPatchModel struct {
	// Workload Patch properties
	Properties *WorkloadPatchProperties

	// Resource tags.
	Tags map[string]*string
}

// WorkloadPatchProperties - Workload patchable Properties
type WorkloadPatchProperties struct {
	// List of resource group ids.
	ResourceGroupCollection []*string
}

// WorkloadProperties - Workload Resource properties
type WorkloadProperties struct {
	// List of resource group ids.
	ResourceGroupCollection []*string

	// READ-ONLY; Managed On Behalf Of Configuration.
	ManagedOnBehalfOfConfiguration *ManagedOnBehalfOfConfiguration

	// READ-ONLY; Provisioning State.
	ProvisioningState *ProvisioningState
}

// WorkloadResource - Workload Model Resource
type WorkloadResource struct {
	// REQUIRED; The geo-location where the resource lives
	Location *string

	// The resource-specific properties for this resource.
	Properties *WorkloadProperties

	// Resource tags.
	Tags map[string]*string

	// READ-ONLY; Fully qualified resource ID for the resource. Ex - /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}
	ID *string

	// READ-ONLY; The name of the resource
	Name *string

	// READ-ONLY; Azure Resource Manager metadata containing createdBy and modifiedBy information.
	SystemData *SystemData

	// READ-ONLY; The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or "Microsoft.Storage/storageAccounts"
	Type *string
}

// WorkloadResourceListResult - The response of a WorkloadResource list operation.
type WorkloadResourceListResult struct {
	// REQUIRED; The WorkloadResource items on this page
	Value []*WorkloadResource

	// The link to the next page of items
	NextLink *string
}
