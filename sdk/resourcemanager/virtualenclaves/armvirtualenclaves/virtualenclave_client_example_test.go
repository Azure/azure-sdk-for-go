// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) Go Code Generator. DO NOT EDIT.

package armvirtualenclaves_test

import (
	"context"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/to"
	"github.com/Azure/azure-sdk-for-go/sdk/azidentity"
	"github.com/Azure/azure-sdk-for-go/sdk/resourcemanager/virtualenclaves/armvirtualenclaves"
	"log"
)

// Generated from example definition: 2025-05-01-preview/VirtualEnclave_CreateOrUpdate.json
func ExampleVirtualEnclaveClient_BeginCreateOrUpdate() {
	cred, err := azidentity.NewDefaultAzureCredential(nil)
	if err != nil {
		log.Fatalf("failed to obtain a credential: %v", err)
	}
	ctx := context.Background()
	clientFactory, err := armvirtualenclaves.NewClientFactory("c64f6eca-bdc5-4bc2-88d6-f8f1dc23f86c", cred, nil)
	if err != nil {
		log.Fatalf("failed to create client: %v", err)
	}
	poller, err := clientFactory.NewVirtualEnclaveClient().BeginCreateOrUpdate(ctx, "rgopenapi", "TestMyEnclave", armvirtualenclaves.EnclaveResource{
		Identity: &armvirtualenclaves.ManagedServiceIdentity{
			Type: to.Ptr(armvirtualenclaves.ManagedServiceIdentityTypeSystemAssignedUserAssigned),
			UserAssignedIdentities: map[string]*armvirtualenclaves.UserAssignedIdentity{
				"/subscriptions/subid/resourceGroups/default-azurebatch-japaneast/providers/Microsoft.ManagedIdentity/userAssignedIdentities/id1": {},
			},
		},
		Properties: &armvirtualenclaves.VirtualEnclaveProperties{
			EnclaveVirtualNetwork: &armvirtualenclaves.EnclaveVirtualNetworkModel{
				NetworkSize:     to.Ptr("small"),
				CustomCidrRange: to.Ptr("10.0.0.0/24"),
				SubnetConfigurations: []*armvirtualenclaves.SubnetConfiguration{
					{
						SubnetName:        to.Ptr("test"),
						NetworkPrefixSize: to.Ptr[int32](26),
					},
				},
				AllowSubnetCommunication: to.Ptr(true),
			},
			CommunityResourceID: to.Ptr("/subscriptions/c64f6eca-bdc5-4bc2-88d6-f8f1dc23f86c/resourceGroups/TestMyRg/providers/microsoft.mission/communities/TestMyCommunity"),
			EnclaveDefaultSettings: &armvirtualenclaves.EnclaveDefaultSettingsModel{
				DiagnosticDestination: to.Ptr(armvirtualenclaves.DiagnosticDestinationBoth),
			},
			MaintenanceModeConfiguration: &armvirtualenclaves.MaintenanceModeConfigurationModel{
				Mode: to.Ptr(armvirtualenclaves.MaintenanceModeConfigurationModelModeOff),
				Principals: []*armvirtualenclaves.Principal{
					{
						ID:   to.Ptr("355a6bb0-abc0-4cba-000d-12a345b678c9"),
						Type: to.Ptr(armvirtualenclaves.PrincipalTypeUser),
					},
				},
				Justification: to.Ptr(armvirtualenclaves.MaintenanceModeConfigurationModelJustificationOff),
			},
			BastionEnabled: to.Ptr(true),
			EnclaveRoleAssignments: []*armvirtualenclaves.RoleAssignmentItem{
				{
					RoleDefinitionID: to.Ptr("b24988ac-6180-42a0-ab88-20f7382dd24c"),
					Principals: []*armvirtualenclaves.Principal{
						{
							ID:   to.Ptr("355a6bb0-abc0-4cba-000d-12a345b678c9"),
							Type: to.Ptr(armvirtualenclaves.PrincipalTypeUser),
						},
						{
							ID:   to.Ptr("355a6bb0-abc0-4cba-000d-12a345b678c0"),
							Type: to.Ptr(armvirtualenclaves.PrincipalTypeUser),
						},
					},
				},
				{
					RoleDefinitionID: to.Ptr("18d7d88d-d35e-4fb5-a5c3-7773c20a72d9"),
					Principals: []*armvirtualenclaves.Principal{
						{
							ID:   to.Ptr("355a6bb0-abc0-4cba-000d-12a345b678c9"),
							Type: to.Ptr(armvirtualenclaves.PrincipalTypeUser),
						},
					},
				},
			},
			WorkloadRoleAssignments: []*armvirtualenclaves.RoleAssignmentItem{
				{
					RoleDefinitionID: to.Ptr("d73bb868-a0df-4d4d-bd69-98a00b01fccb"),
					Principals: []*armvirtualenclaves.Principal{
						{
							ID:   to.Ptr("01234567-89ab-ef01-2345-0123456789ab"),
							Type: to.Ptr(armvirtualenclaves.PrincipalTypeGroup),
						},
					},
				},
				{
					RoleDefinitionID: to.Ptr("fb879df8-f326-4884-b1cf-06f3ad86be52"),
					Principals: []*armvirtualenclaves.Principal{
						{
							ID:   to.Ptr("01234567-89ab-ef01-2345-0123456789ab"),
							Type: to.Ptr(armvirtualenclaves.PrincipalTypeGroup),
						},
					},
				},
			},
		},
		Tags: map[string]*string{
			"Tag1": to.Ptr("Value1"),
		},
		Location: to.Ptr("westcentralus"),
	}, nil)
	if err != nil {
		log.Fatalf("failed to finish the request: %v", err)
	}
	res, err := poller.PollUntilDone(ctx, nil)
	if err != nil {
		log.Fatalf("failed to pull the result: %v", err)
	}
	// You could use response here. We use blank identifier for just demo purposes.
	_ = res
	// If the HTTP response code is 200 as defined in example definition, your response structure would look as follows. Please pay attention that all the values in the output are fake values for just demo purposes.
	// res = armvirtualenclaves.VirtualEnclaveClientCreateOrUpdateResponse{
	// 	EnclaveResource: &armvirtualenclaves.EnclaveResource{
	// 		Identity: &armvirtualenclaves.ManagedServiceIdentity{
	// 			Type: to.Ptr(armvirtualenclaves.ManagedServiceIdentityTypeSystemAssignedUserAssigned),
	// 			PrincipalID: to.Ptr("1a2e532b-9900-414c-8600-cfc6126628d7"),
	// 			TenantID: to.Ptr("f686d426-8d16-42db-81b7-ab578e110ccd"),
	// 			UserAssignedIdentities: map[string]*armvirtualenclaves.UserAssignedIdentity{
	// 				"/subscriptions/subid/resourceGroups/default-azurebatch-japaneast/providers/Microsoft.ManagedIdentity/userAssignedIdentities/id1": &armvirtualenclaves.UserAssignedIdentity{
	// 					PrincipalID: to.Ptr("f4aa4954-a564-4933-a7e1-502019d807c2"),
	// 					ClientID: to.Ptr("b82bf757-ee7f-4632-9df1-5e52a720fdd2"),
	// 				},
	// 			},
	// 		},
	// 		Properties: &armvirtualenclaves.VirtualEnclaveProperties{
	// 			ProvisioningState: to.Ptr(armvirtualenclaves.ProvisioningStateSucceeded),
	// 			EnclaveVirtualNetwork: &armvirtualenclaves.EnclaveVirtualNetworkModel{
	// 				NetworkSize: to.Ptr("small"),
	// 				CustomCidrRange: to.Ptr("10.0.0.0/24"),
	// 				SubnetConfigurations: []*armvirtualenclaves.SubnetConfiguration{
	// 					{
	// 						SubnetName: to.Ptr("test"),
	// 						NetworkPrefixSize: to.Ptr[int32](26),
	// 					},
	// 				},
	// 				AllowSubnetCommunication: to.Ptr(true),
	// 			},
	// 			CommunityResourceID: to.Ptr("/subscriptions/c64f6eca-bdc5-4bc2-88d6-f8f1dc23f86c/resourceGroups/TestMyRg/providers/microsoft.mission/communities/TestMyCommunity"),
	// 			EnclaveDefaultSettings: &armvirtualenclaves.EnclaveDefaultSettingsModel{
	// 				KeyVaultResourceID: to.Ptr("/subscriptions/c64f6eca-bdc5-4bc2-88d6-f8f1dc23f86c/resourceGroups/TestMyRg/providers/Microsoft.KeyVault/vaults/TestMyKeyVault1"),
	// 				StorageAccountResourceID: to.Ptr("/subscriptions/c64f6eca-bdc5-4bc2-88d6-f8f1dc23f86c/resourceGroups/TestMyRg/providers/Microsoft.Storage/storageAccounts/TestMyStorageAccount"),
	// 				LogAnalyticsResourceIDCollection: []*string{
	// 					to.Ptr("/subscriptions/c64f6eca-bdc5-4bc2-88d6-f8f1dc23f86c/resourceGroups/TestMyRg/providers/Microsoft.OperationalInsights/workspaces/TestMyLogA1"),
	// 					to.Ptr("/subscriptions/c64f6eca-bdc5-4bc2-88d6-f8f1dc23f86c/resourceGroups/TestMyRg/providers/Microsoft.OperationalInsights/workspaces/TestMyLogA2"),
	// 				},
	// 				DiagnosticDestination: to.Ptr(armvirtualenclaves.DiagnosticDestinationBoth),
	// 			},
	// 			ResourceCollection: []*string{
	// 			},
	// 			MaintenanceModeConfiguration: &armvirtualenclaves.MaintenanceModeConfigurationModel{
	// 				Mode: to.Ptr(armvirtualenclaves.MaintenanceModeConfigurationModelModeOff),
	// 				Principals: []*armvirtualenclaves.Principal{
	// 					{
	// 						ID: to.Ptr("355a6bb0-abc0-4cba-000d-12a345b678c9"),
	// 						Type: to.Ptr(armvirtualenclaves.PrincipalTypeUser),
	// 					},
	// 				},
	// 				Justification: to.Ptr(armvirtualenclaves.MaintenanceModeConfigurationModelJustificationOff),
	// 			},
	// 			BastionEnabled: to.Ptr(true),
	// 			EnclaveRoleAssignments: []*armvirtualenclaves.RoleAssignmentItem{
	// 				{
	// 					RoleDefinitionID: to.Ptr("b24988ac-6180-42a0-ab88-20f7382dd24c"),
	// 					Principals: []*armvirtualenclaves.Principal{
	// 						{
	// 							ID: to.Ptr("355a6bb0-abc0-4cba-000d-12a345b678c9"),
	// 							Type: to.Ptr(armvirtualenclaves.PrincipalTypeUser),
	// 						},
	// 						{
	// 							ID: to.Ptr("355a6bb0-abc0-4cba-000d-12a345b678c0"),
	// 							Type: to.Ptr(armvirtualenclaves.PrincipalTypeUser),
	// 						},
	// 					},
	// 				},
	// 				{
	// 					RoleDefinitionID: to.Ptr("18d7d88d-d35e-4fb5-a5c3-7773c20a72d9"),
	// 					Principals: []*armvirtualenclaves.Principal{
	// 						{
	// 							ID: to.Ptr("355a6bb0-abc0-4cba-000d-12a345b678c9"),
	// 							Type: to.Ptr(armvirtualenclaves.PrincipalTypeUser),
	// 						},
	// 					},
	// 				},
	// 			},
	// 			WorkloadRoleAssignments: []*armvirtualenclaves.RoleAssignmentItem{
	// 				{
	// 					RoleDefinitionID: to.Ptr("d73bb868-a0df-4d4d-bd69-98a00b01fccb"),
	// 					Principals: []*armvirtualenclaves.Principal{
	// 						{
	// 							ID: to.Ptr("01234567-89ab-ef01-2345-0123456789ab"),
	// 							Type: to.Ptr(armvirtualenclaves.PrincipalTypeGroup),
	// 						},
	// 					},
	// 				},
	// 				{
	// 					RoleDefinitionID: to.Ptr("fb879df8-f326-4884-b1cf-06f3ad86be52"),
	// 					Principals: []*armvirtualenclaves.Principal{
	// 						{
	// 							ID: to.Ptr("01234567-89ab-ef01-2345-0123456789ab"),
	// 							Type: to.Ptr(armvirtualenclaves.PrincipalTypeGroup),
	// 						},
	// 					},
	// 				},
	// 			},
	// 		},
	// 		Tags: map[string]*string{
	// 			"Tag1": to.Ptr("Value1"),
	// 		},
	// 		Location: to.Ptr("westcentralus"),
	// 		ID: to.Ptr("/subscriptions/c64f6eca-bdc5-4bc2-88d6-f8f1dc23f86c/resourceGroups/TestMyRg/providers/microsoft.mission/virtualenclaves/TestMyEnclave"),
	// 		Name: to.Ptr("TestMyEnclave"),
	// 		Type: to.Ptr("microsoft.mission/virtualenclaves"),
	// 		SystemData: &armvirtualenclaves.SystemData{
	// 			CreatedBy: to.Ptr("myAlias"),
	// 			CreatedByType: to.Ptr(armvirtualenclaves.CreatedByTypeUser),
	// 			CreatedAt: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2023-03-17T20:43:17.760Z"); return t}()),
	// 			LastModifiedBy: to.Ptr("myAlias"),
	// 			LastModifiedByType: to.Ptr(armvirtualenclaves.CreatedByTypeUser),
	// 			LastModifiedAt: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2023-03-17T20:43:17.760Z"); return t}()),
	// 		},
	// 	},
	// }
}

// Generated from example definition: 2025-05-01-preview/VirtualEnclave_Delete.json
func ExampleVirtualEnclaveClient_BeginDelete() {
	cred, err := azidentity.NewDefaultAzureCredential(nil)
	if err != nil {
		log.Fatalf("failed to obtain a credential: %v", err)
	}
	ctx := context.Background()
	clientFactory, err := armvirtualenclaves.NewClientFactory("CA1CB369-DD26-4DB2-9D43-9AFEF0F22093", cred, nil)
	if err != nil {
		log.Fatalf("failed to create client: %v", err)
	}
	poller, err := clientFactory.NewVirtualEnclaveClient().BeginDelete(ctx, "rgopenapi", "TestMyEnclave", nil)
	if err != nil {
		log.Fatalf("failed to finish the request: %v", err)
	}
	_, err = poller.PollUntilDone(ctx, nil)
	if err != nil {
		log.Fatalf("failed to pull the result: %v", err)
	}
}

// Generated from example definition: 2025-05-01-preview/VirtualEnclave_Get.json
func ExampleVirtualEnclaveClient_Get() {
	cred, err := azidentity.NewDefaultAzureCredential(nil)
	if err != nil {
		log.Fatalf("failed to obtain a credential: %v", err)
	}
	ctx := context.Background()
	clientFactory, err := armvirtualenclaves.NewClientFactory("CA1CB369-DD26-4DB2-9D43-9AFEF0F22093", cred, nil)
	if err != nil {
		log.Fatalf("failed to create client: %v", err)
	}
	res, err := clientFactory.NewVirtualEnclaveClient().Get(ctx, "rgopenapi", "TestMyEnclave", nil)
	if err != nil {
		log.Fatalf("failed to finish the request: %v", err)
	}
	// You could use response here. We use blank identifier for just demo purposes.
	_ = res
	// If the HTTP response code is 200 as defined in example definition, your response structure would look as follows. Please pay attention that all the values in the output are fake values for just demo purposes.
	// res = armvirtualenclaves.VirtualEnclaveClientGetResponse{
	// 	EnclaveResource: &armvirtualenclaves.EnclaveResource{
	// 		Identity: &armvirtualenclaves.ManagedServiceIdentity{
	// 			Type: to.Ptr(armvirtualenclaves.ManagedServiceIdentityTypeSystemAssignedUserAssigned),
	// 			PrincipalID: to.Ptr("1a2e532b-9900-414c-8600-cfc6126628d7"),
	// 			TenantID: to.Ptr("f686d426-8d16-42db-81b7-ab578e110ccd"),
	// 			UserAssignedIdentities: map[string]*armvirtualenclaves.UserAssignedIdentity{
	// 				"/subscriptions/subid/resourceGroups/default-azurebatch-japaneast/providers/Microsoft.ManagedIdentity/userAssignedIdentities/id1": &armvirtualenclaves.UserAssignedIdentity{
	// 					PrincipalID: to.Ptr("f4aa4954-a564-4933-a7e1-502019d807c2"),
	// 					ClientID: to.Ptr("b82bf757-ee7f-4632-9df1-5e52a720fdd2"),
	// 				},
	// 			},
	// 		},
	// 		Properties: &armvirtualenclaves.VirtualEnclaveProperties{
	// 			ProvisioningState: to.Ptr(armvirtualenclaves.ProvisioningStateSucceeded),
	// 			EnclaveVirtualNetwork: &armvirtualenclaves.EnclaveVirtualNetworkModel{
	// 				NetworkSize: to.Ptr("small"),
	// 				CustomCidrRange: to.Ptr("10.0.0.0/24"),
	// 				SubnetConfigurations: []*armvirtualenclaves.SubnetConfiguration{
	// 					{
	// 						SubnetName: to.Ptr("test"),
	// 						SubnetResourceID: to.Ptr("/subscriptions/c64f6eca-bdc5-4bc2-88d6-f8f1dc23f86c/resourceGroups/TestMyRg/providers/Microsoft.KeyVault/vaults/TestMyKeyVault1"),
	// 						NetworkPrefixSize: to.Ptr[int32](26),
	// 						AddressPrefix: to.Ptr("10.0.0.0/26"),
	// 						NetworkSecurityGroupResourceID: to.Ptr("/subscriptions/c64f6eca-bdc5-4bc2-88d6-f8f1dc23f86c/resourceGroups/TestMyRg/providers/Microsoft.KeyVault/vaults/TestMyKeyVault1"),
	// 					},
	// 				},
	// 				AllowSubnetCommunication: to.Ptr(true),
	// 			},
	// 			ManagedOnBehalfOfConfiguration: &armvirtualenclaves.ManagedOnBehalfOfConfiguration{
	// 				MoboBrokerResources: []*armvirtualenclaves.MoboBrokerResource{
	// 					{
	// 						ID: to.Ptr("/subscriptions/c64f6eca-bdc5-4bc2-88d6-f8f1dc23f86c/resourceGroups/TestMyRg/providers/Microsoft.Resources/moboBrokers/bnthrkwfkfeorrzvtdxbfz"),
	// 					},
	// 				},
	// 			},
	// 			CommunityResourceID: to.Ptr("/subscriptions/c64f6eca-bdc5-4bc2-88d6-f8f1dc23f86c/resourceGroups/TestMyRg/providers/microsoft.mission/communities/TestMyCommunity"),
	// 			EnclaveDefaultSettings: &armvirtualenclaves.EnclaveDefaultSettingsModel{
	// 				KeyVaultResourceID: to.Ptr("/subscriptions/c64f6eca-bdc5-4bc2-88d6-f8f1dc23f86c/resourceGroups/TestMyRg/providers/Microsoft.KeyVault/vaults/TestMyKeyVault1"),
	// 				StorageAccountResourceID: to.Ptr("/subscriptions/c64f6eca-bdc5-4bc2-88d6-f8f1dc23f86c/resourceGroups/TestMyRg/providers/Microsoft.Storage/storageAccounts/TestMyStorageAccount"),
	// 				LogAnalyticsResourceIDCollection: []*string{
	// 					to.Ptr("/subscriptions/c64f6eca-bdc5-4bc2-88d6-f8f1dc23f86c/resourceGroups/TestMyRg/providers/Microsoft.OperationalInsights/workspaces/TestMyLogA1"),
	// 					to.Ptr("/subscriptions/c64f6eca-bdc5-4bc2-88d6-f8f1dc23f86c/resourceGroups/TestMyRg/providers/Microsoft.OperationalInsights/workspaces/TestMyLogA2"),
	// 				},
	// 				DiagnosticDestination: to.Ptr(armvirtualenclaves.DiagnosticDestinationBoth),
	// 			},
	// 			ResourceCollection: []*string{
	// 				to.Ptr("/subscriptions/c64f6eca-bdc5-4bc2-88d6-f8f1dc23f86c/resourceGroups/TestMyRg"),
	// 			},
	// 			MaintenanceModeConfiguration: &armvirtualenclaves.MaintenanceModeConfigurationModel{
	// 				Mode: to.Ptr(armvirtualenclaves.MaintenanceModeConfigurationModelModeOff),
	// 				Principals: []*armvirtualenclaves.Principal{
	// 					{
	// 						ID: to.Ptr("355a6bb0-abc0-4cba-000d-12a345b678c9"),
	// 						Type: to.Ptr(armvirtualenclaves.PrincipalTypeUser),
	// 					},
	// 				},
	// 				Justification: to.Ptr(armvirtualenclaves.MaintenanceModeConfigurationModelJustificationOff),
	// 			},
	// 			BastionEnabled: to.Ptr(true),
	// 			EnclaveRoleAssignments: []*armvirtualenclaves.RoleAssignmentItem{
	// 				{
	// 					RoleDefinitionID: to.Ptr("b24988ac-6180-42a0-ab88-20f7382dd24c"),
	// 					Principals: []*armvirtualenclaves.Principal{
	// 						{
	// 							ID: to.Ptr("355a6bb0-abc0-4cba-000d-12a345b678c9"),
	// 							Type: to.Ptr(armvirtualenclaves.PrincipalTypeUser),
	// 						},
	// 						{
	// 							ID: to.Ptr("355a6bb0-abc0-4cba-000d-12a345b678c0"),
	// 							Type: to.Ptr(armvirtualenclaves.PrincipalTypeUser),
	// 						},
	// 					},
	// 				},
	// 				{
	// 					RoleDefinitionID: to.Ptr("18d7d88d-d35e-4fb5-a5c3-7773c20a72d9"),
	// 					Principals: []*armvirtualenclaves.Principal{
	// 						{
	// 							ID: to.Ptr("355a6bb0-abc0-4cba-000d-12a345b678c9"),
	// 							Type: to.Ptr(armvirtualenclaves.PrincipalTypeUser),
	// 						},
	// 					},
	// 				},
	// 			},
	// 			WorkloadRoleAssignments: []*armvirtualenclaves.RoleAssignmentItem{
	// 				{
	// 					RoleDefinitionID: to.Ptr("d73bb868-a0df-4d4d-bd69-98a00b01fccb"),
	// 					Principals: []*armvirtualenclaves.Principal{
	// 						{
	// 							ID: to.Ptr("01234567-89ab-ef01-2345-0123456789ab"),
	// 							Type: to.Ptr(armvirtualenclaves.PrincipalTypeGroup),
	// 						},
	// 					},
	// 				},
	// 				{
	// 					RoleDefinitionID: to.Ptr("fb879df8-f326-4884-b1cf-06f3ad86be52"),
	// 					Principals: []*armvirtualenclaves.Principal{
	// 						{
	// 							ID: to.Ptr("01234567-89ab-ef01-2345-0123456789ab"),
	// 							Type: to.Ptr(armvirtualenclaves.PrincipalTypeGroup),
	// 						},
	// 					},
	// 				},
	// 			},
	// 		},
	// 		Tags: map[string]*string{
	// 			"Tag1": to.Ptr("Value1"),
	// 		},
	// 		Location: to.Ptr("westcentralus"),
	// 		ID: to.Ptr("/subscriptions/c64f6eca-bdc5-4bc2-88d6-f8f1dc23f86c/resourceGroups/TestMyRg/providers/microsoft.mission/virtualenclaves/TestMyEnclave"),
	// 		Name: to.Ptr("TestMyEnclave"),
	// 		Type: to.Ptr("microsoft.mission/virtualenclaves"),
	// 		SystemData: &armvirtualenclaves.SystemData{
	// 			CreatedBy: to.Ptr("myAlias"),
	// 			CreatedByType: to.Ptr(armvirtualenclaves.CreatedByTypeUser),
	// 			CreatedAt: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2023-03-17T20:43:17.760Z"); return t}()),
	// 			LastModifiedBy: to.Ptr("myAlias"),
	// 			LastModifiedByType: to.Ptr(armvirtualenclaves.CreatedByTypeUser),
	// 			LastModifiedAt: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2023-03-17T20:43:17.760Z"); return t}()),
	// 		},
	// 	},
	// }
}

// Generated from example definition: 2025-05-01-preview/VirtualEnclave_HandleApprovalCreation.json
func ExampleVirtualEnclaveClient_BeginHandleApprovalCreation() {
	cred, err := azidentity.NewDefaultAzureCredential(nil)
	if err != nil {
		log.Fatalf("failed to obtain a credential: %v", err)
	}
	ctx := context.Background()
	clientFactory, err := armvirtualenclaves.NewClientFactory("c64f6eca-bdc5-4bc2-88d6-f8f1dc23f86c", cred, nil)
	if err != nil {
		log.Fatalf("failed to create client: %v", err)
	}
	poller, err := clientFactory.NewVirtualEnclaveClient().BeginHandleApprovalCreation(ctx, "rgopenapi", "TestMyEnclave", armvirtualenclaves.ApprovalCallbackRequest{
		ResourceRequestAction:   to.Ptr(armvirtualenclaves.ApprovalCallbackRequestResourceRequestActionCreate),
		ApprovalStatus:          to.Ptr(armvirtualenclaves.ApprovalCallbackRequestApprovalStatusApproved),
		ApprovalCallbackPayload: to.Ptr("{\n  \"key1\": \"value1\",\n  \"key2\": \"value2\"\n}"),
	}, nil)
	if err != nil {
		log.Fatalf("failed to finish the request: %v", err)
	}
	res, err := poller.PollUntilDone(ctx, nil)
	if err != nil {
		log.Fatalf("failed to pull the result: %v", err)
	}
	// You could use response here. We use blank identifier for just demo purposes.
	_ = res
	// If the HTTP response code is 200 as defined in example definition, your response structure would look as follows. Please pay attention that all the values in the output are fake values for just demo purposes.
	// res = armvirtualenclaves.VirtualEnclaveClientHandleApprovalCreationResponse{
	// 	ApprovalActionResponse: &armvirtualenclaves.ApprovalActionResponse{
	// 		Message: to.Ptr("Approval state change handled successfully."),
	// 	},
	// }
}

// Generated from example definition: 2025-05-01-preview/VirtualEnclave_HandleApprovalDeletion.json
func ExampleVirtualEnclaveClient_BeginHandleApprovalDeletion() {
	cred, err := azidentity.NewDefaultAzureCredential(nil)
	if err != nil {
		log.Fatalf("failed to obtain a credential: %v", err)
	}
	ctx := context.Background()
	clientFactory, err := armvirtualenclaves.NewClientFactory("c64f6eca-bdc5-4bc2-88d6-f8f1dc23f86c", cred, nil)
	if err != nil {
		log.Fatalf("failed to create client: %v", err)
	}
	poller, err := clientFactory.NewVirtualEnclaveClient().BeginHandleApprovalDeletion(ctx, "rgopenapi", "TestMyEnclave", armvirtualenclaves.ApprovalDeletionCallbackRequest{
		ResourceRequestAction: to.Ptr(armvirtualenclaves.ApprovalDeletionCallbackRequestResourceRequestActionCreate),
	}, nil)
	if err != nil {
		log.Fatalf("failed to finish the request: %v", err)
	}
	res, err := poller.PollUntilDone(ctx, nil)
	if err != nil {
		log.Fatalf("failed to pull the result: %v", err)
	}
	// You could use response here. We use blank identifier for just demo purposes.
	_ = res
	// If the HTTP response code is 200 as defined in example definition, your response structure would look as follows. Please pay attention that all the values in the output are fake values for just demo purposes.
	// res = armvirtualenclaves.VirtualEnclaveClientHandleApprovalDeletionResponse{
	// 	ApprovalActionResponse: &armvirtualenclaves.ApprovalActionResponse{
	// 		Message: to.Ptr("Approval state change handled successfully."),
	// 	},
	// }
}

// Generated from example definition: 2025-05-01-preview/VirtualEnclave_ListByResourceGroup.json
func ExampleVirtualEnclaveClient_NewListByResourceGroupPager() {
	cred, err := azidentity.NewDefaultAzureCredential(nil)
	if err != nil {
		log.Fatalf("failed to obtain a credential: %v", err)
	}
	ctx := context.Background()
	clientFactory, err := armvirtualenclaves.NewClientFactory("CA1CB369-DD26-4DB2-9D43-9AFEF0F22093", cred, nil)
	if err != nil {
		log.Fatalf("failed to create client: %v", err)
	}
	pager := clientFactory.NewVirtualEnclaveClient().NewListByResourceGroupPager("rgopenapi", nil)
	for pager.More() {
		page, err := pager.NextPage(ctx)
		if err != nil {
			log.Fatalf("failed to advance page: %v", err)
		}
		for _, v := range page.Value {
			// You could use page here. We use blank identifier for just demo purposes.
			_ = v
		}
		// If the HTTP response code is 200 as defined in example definition, your page structure would look as follows. Please pay attention that all the values in the output are fake values for just demo purposes.
		// page = armvirtualenclaves.VirtualEnclaveClientListByResourceGroupResponse{
		// 	EnclaveResourceListResult: armvirtualenclaves.EnclaveResourceListResult{
		// 		Value: []*armvirtualenclaves.EnclaveResource{
		// 			{
		// 				Identity: &armvirtualenclaves.ManagedServiceIdentity{
		// 					Type: to.Ptr(armvirtualenclaves.ManagedServiceIdentityTypeSystemAssignedUserAssigned),
		// 					PrincipalID: to.Ptr("1a2e532b-9900-414c-8600-cfc6126628d7"),
		// 					TenantID: to.Ptr("f686d426-8d16-42db-81b7-ab578e110ccd"),
		// 					UserAssignedIdentities: map[string]*armvirtualenclaves.UserAssignedIdentity{
		// 						"/subscriptions/subid/resourceGroups/default-azurebatch-japaneast/providers/Microsoft.ManagedIdentity/userAssignedIdentities/id1": &armvirtualenclaves.UserAssignedIdentity{
		// 							PrincipalID: to.Ptr("f4aa4954-a564-4933-a7e1-502019d807c2"),
		// 							ClientID: to.Ptr("b82bf757-ee7f-4632-9df1-5e52a720fdd2"),
		// 						},
		// 					},
		// 				},
		// 				Properties: &armvirtualenclaves.VirtualEnclaveProperties{
		// 					ProvisioningState: to.Ptr(armvirtualenclaves.ProvisioningStateSucceeded),
		// 					EnclaveVirtualNetwork: &armvirtualenclaves.EnclaveVirtualNetworkModel{
		// 						NetworkSize: to.Ptr("small"),
		// 						CustomCidrRange: to.Ptr("10.0.0.0/24"),
		// 						SubnetConfigurations: []*armvirtualenclaves.SubnetConfiguration{
		// 							{
		// 								SubnetName: to.Ptr("test"),
		// 								SubnetResourceID: to.Ptr("/subscriptions/c64f6eca-bdc5-4bc2-88d6-f8f1dc23f86c/resourceGroups/TestMyRg/providers/Microsoft.KeyVault/vaults/TestMyKeyVault1"),
		// 								NetworkPrefixSize: to.Ptr[int32](26),
		// 								AddressPrefix: to.Ptr("10.0.0.0/26"),
		// 								NetworkSecurityGroupResourceID: to.Ptr("/subscriptions/c64f6eca-bdc5-4bc2-88d6-f8f1dc23f86c/resourceGroups/TestMyRg/providers/Microsoft.KeyVault/vaults/TestMyKeyVault1"),
		// 							},
		// 						},
		// 						AllowSubnetCommunication: to.Ptr(true),
		// 					},
		// 					CommunityResourceID: to.Ptr("/subscriptions/c64f6eca-bdc5-4bc2-88d6-f8f1dc23f86c/resourceGroups/TestMyRg/providers/microsoft.mission/communities/TestMyCommunity"),
		// 					EnclaveDefaultSettings: &armvirtualenclaves.EnclaveDefaultSettingsModel{
		// 						KeyVaultResourceID: to.Ptr("/subscriptions/c64f6eca-bdc5-4bc2-88d6-f8f1dc23f86c/resourceGroups/TestMyRg/providers/Microsoft.KeyVault/vaults/TestMyKeyVault1"),
		// 						StorageAccountResourceID: to.Ptr("/subscriptions/c64f6eca-bdc5-4bc2-88d6-f8f1dc23f86c/resourceGroups/TestMyRg/providers/Microsoft.Storage/storageAccounts/TestMyStorageAccount"),
		// 						LogAnalyticsResourceIDCollection: []*string{
		// 							to.Ptr("/subscriptions/c64f6eca-bdc5-4bc2-88d6-f8f1dc23f86c/resourceGroups/TestMyRg/providers/Microsoft.OperationalInsights/workspaces/TestMyLogA1"),
		// 							to.Ptr("/subscriptions/c64f6eca-bdc5-4bc2-88d6-f8f1dc23f86c/resourceGroups/TestMyRg/providers/Microsoft.OperationalInsights/workspaces/TestMyLogA2"),
		// 						},
		// 						DiagnosticDestination: to.Ptr(armvirtualenclaves.DiagnosticDestinationBoth),
		// 					},
		// 					ResourceCollection: []*string{
		// 						to.Ptr("/subscriptions/c64f6eca-bdc5-4bc2-88d6-f8f1dc23f86c/resourceGroups/TestMyRg"),
		// 					},
		// 					MaintenanceModeConfiguration: &armvirtualenclaves.MaintenanceModeConfigurationModel{
		// 						Mode: to.Ptr(armvirtualenclaves.MaintenanceModeConfigurationModelModeOff),
		// 						Principals: []*armvirtualenclaves.Principal{
		// 							{
		// 								ID: to.Ptr("355a6bb0-abc0-4cba-000d-12a345b678c9"),
		// 								Type: to.Ptr(armvirtualenclaves.PrincipalTypeUser),
		// 							},
		// 						},
		// 						Justification: to.Ptr(armvirtualenclaves.MaintenanceModeConfigurationModelJustificationOff),
		// 					},
		// 					BastionEnabled: to.Ptr(true),
		// 					EnclaveRoleAssignments: []*armvirtualenclaves.RoleAssignmentItem{
		// 						{
		// 							RoleDefinitionID: to.Ptr("b24988ac-6180-42a0-ab88-20f7382dd24c"),
		// 							Principals: []*armvirtualenclaves.Principal{
		// 								{
		// 									ID: to.Ptr("355a6bb0-abc0-4cba-000d-12a345b678c9"),
		// 									Type: to.Ptr(armvirtualenclaves.PrincipalTypeUser),
		// 								},
		// 								{
		// 									ID: to.Ptr("355a6bb0-abc0-4cba-000d-12a345b678c0"),
		// 									Type: to.Ptr(armvirtualenclaves.PrincipalTypeUser),
		// 								},
		// 							},
		// 						},
		// 						{
		// 							RoleDefinitionID: to.Ptr("18d7d88d-d35e-4fb5-a5c3-7773c20a72d9"),
		// 							Principals: []*armvirtualenclaves.Principal{
		// 								{
		// 									ID: to.Ptr("355a6bb0-abc0-4cba-000d-12a345b678c9"),
		// 									Type: to.Ptr(armvirtualenclaves.PrincipalTypeUser),
		// 								},
		// 							},
		// 						},
		// 					},
		// 					WorkloadRoleAssignments: []*armvirtualenclaves.RoleAssignmentItem{
		// 						{
		// 							RoleDefinitionID: to.Ptr("d73bb868-a0df-4d4d-bd69-98a00b01fccb"),
		// 							Principals: []*armvirtualenclaves.Principal{
		// 								{
		// 									ID: to.Ptr("01234567-89ab-ef01-2345-0123456789ab"),
		// 									Type: to.Ptr(armvirtualenclaves.PrincipalTypeGroup),
		// 								},
		// 							},
		// 						},
		// 						{
		// 							RoleDefinitionID: to.Ptr("fb879df8-f326-4884-b1cf-06f3ad86be52"),
		// 							Principals: []*armvirtualenclaves.Principal{
		// 								{
		// 									ID: to.Ptr("01234567-89ab-ef01-2345-0123456789ab"),
		// 									Type: to.Ptr(armvirtualenclaves.PrincipalTypeGroup),
		// 								},
		// 							},
		// 						},
		// 					},
		// 				},
		// 				Tags: map[string]*string{
		// 					"Tag1": to.Ptr("Value1"),
		// 				},
		// 				Location: to.Ptr("westcentralus"),
		// 				ID: to.Ptr("/subscriptions/c64f6eca-bdc5-4bc2-88d6-f8f1dc23f86c/resourceGroups/TestMyRg/providers/microsoft.mission/virtualenclaves/TestMyEnclave"),
		// 				Name: to.Ptr("TestMyEnclave"),
		// 				Type: to.Ptr("microsoft.mission/virtualenclaves"),
		// 				SystemData: &armvirtualenclaves.SystemData{
		// 					CreatedBy: to.Ptr("myAlias"),
		// 					CreatedByType: to.Ptr(armvirtualenclaves.CreatedByTypeUser),
		// 					CreatedAt: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2023-03-17T20:43:17.760Z"); return t}()),
		// 					LastModifiedBy: to.Ptr("myAlias"),
		// 					LastModifiedByType: to.Ptr(armvirtualenclaves.CreatedByTypeUser),
		// 					LastModifiedAt: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2023-03-17T20:43:17.760Z"); return t}()),
		// 				},
		// 			},
		// 		},
		// 		NextLink: to.Ptr("https://microsoft.com/a"),
		// 	},
		// }
	}
}

// Generated from example definition: 2025-05-01-preview/VirtualEnclave_ListBySubscription.json
func ExampleVirtualEnclaveClient_NewListBySubscriptionPager() {
	cred, err := azidentity.NewDefaultAzureCredential(nil)
	if err != nil {
		log.Fatalf("failed to obtain a credential: %v", err)
	}
	ctx := context.Background()
	clientFactory, err := armvirtualenclaves.NewClientFactory("CA1CB369-DD26-4DB2-9D43-9AFEF0F22093", cred, nil)
	if err != nil {
		log.Fatalf("failed to create client: %v", err)
	}
	pager := clientFactory.NewVirtualEnclaveClient().NewListBySubscriptionPager(nil)
	for pager.More() {
		page, err := pager.NextPage(ctx)
		if err != nil {
			log.Fatalf("failed to advance page: %v", err)
		}
		for _, v := range page.Value {
			// You could use page here. We use blank identifier for just demo purposes.
			_ = v
		}
		// If the HTTP response code is 200 as defined in example definition, your page structure would look as follows. Please pay attention that all the values in the output are fake values for just demo purposes.
		// page = armvirtualenclaves.VirtualEnclaveClientListBySubscriptionResponse{
		// 	EnclaveResourceListResult: armvirtualenclaves.EnclaveResourceListResult{
		// 		Value: []*armvirtualenclaves.EnclaveResource{
		// 			{
		// 				Identity: &armvirtualenclaves.ManagedServiceIdentity{
		// 					Type: to.Ptr(armvirtualenclaves.ManagedServiceIdentityTypeSystemAssignedUserAssigned),
		// 					PrincipalID: to.Ptr("1a2e532b-9900-414c-8600-cfc6126628d7"),
		// 					TenantID: to.Ptr("f686d426-8d16-42db-81b7-ab578e110ccd"),
		// 					UserAssignedIdentities: map[string]*armvirtualenclaves.UserAssignedIdentity{
		// 						"/subscriptions/subid/resourceGroups/default-azurebatch-japaneast/providers/Microsoft.ManagedIdentity/userAssignedIdentities/id1": &armvirtualenclaves.UserAssignedIdentity{
		// 							PrincipalID: to.Ptr("f4aa4954-a564-4933-a7e1-502019d807c2"),
		// 							ClientID: to.Ptr("b82bf757-ee7f-4632-9df1-5e52a720fdd2"),
		// 						},
		// 					},
		// 				},
		// 				Properties: &armvirtualenclaves.VirtualEnclaveProperties{
		// 					ProvisioningState: to.Ptr(armvirtualenclaves.ProvisioningStateSucceeded),
		// 					EnclaveVirtualNetwork: &armvirtualenclaves.EnclaveVirtualNetworkModel{
		// 						NetworkSize: to.Ptr("small"),
		// 						CustomCidrRange: to.Ptr("10.0.0.0/24"),
		// 						SubnetConfigurations: []*armvirtualenclaves.SubnetConfiguration{
		// 							{
		// 								SubnetName: to.Ptr("test"),
		// 								SubnetResourceID: to.Ptr("/subscriptions/c64f6eca-bdc5-4bc2-88d6-f8f1dc23f86c/resourceGroups/TestMyRg/providers/Microsoft.KeyVault/vaults/TestMyKeyVault1"),
		// 								NetworkPrefixSize: to.Ptr[int32](26),
		// 								AddressPrefix: to.Ptr("10.0.0.0/26"),
		// 								NetworkSecurityGroupResourceID: to.Ptr("/subscriptions/c64f6eca-bdc5-4bc2-88d6-f8f1dc23f86c/resourceGroups/TestMyRg/providers/Microsoft.KeyVault/vaults/TestMyKeyVault1"),
		// 							},
		// 						},
		// 						AllowSubnetCommunication: to.Ptr(true),
		// 					},
		// 					CommunityResourceID: to.Ptr("/subscriptions/c64f6eca-bdc5-4bc2-88d6-f8f1dc23f86c/resourceGroups/TestMyRg/providers/microsoft.mission/communities/TestMyCommunity"),
		// 					EnclaveDefaultSettings: &armvirtualenclaves.EnclaveDefaultSettingsModel{
		// 						KeyVaultResourceID: to.Ptr("/subscriptions/c64f6eca-bdc5-4bc2-88d6-f8f1dc23f86c/resourceGroups/TestMyRg/providers/Microsoft.KeyVault/vaults/TestMyKeyVault1"),
		// 						StorageAccountResourceID: to.Ptr("/subscriptions/c64f6eca-bdc5-4bc2-88d6-f8f1dc23f86c/resourceGroups/TestMyRg/providers/Microsoft.Storage/storageAccounts/TestMyStorageAccount"),
		// 						LogAnalyticsResourceIDCollection: []*string{
		// 							to.Ptr("/subscriptions/c64f6eca-bdc5-4bc2-88d6-f8f1dc23f86c/resourceGroups/TestMyRg/providers/Microsoft.OperationalInsights/workspaces/TestMyLogA1"),
		// 							to.Ptr("/subscriptions/c64f6eca-bdc5-4bc2-88d6-f8f1dc23f86c/resourceGroups/TestMyRg/providers/Microsoft.OperationalInsights/workspaces/TestMyLogA2"),
		// 						},
		// 						DiagnosticDestination: to.Ptr(armvirtualenclaves.DiagnosticDestinationBoth),
		// 					},
		// 					ResourceCollection: []*string{
		// 						to.Ptr("/subscriptions/c64f6eca-bdc5-4bc2-88d6-f8f1dc23f86c/resourceGroups/TestMyRg"),
		// 					},
		// 					MaintenanceModeConfiguration: &armvirtualenclaves.MaintenanceModeConfigurationModel{
		// 						Mode: to.Ptr(armvirtualenclaves.MaintenanceModeConfigurationModelModeOff),
		// 						Principals: []*armvirtualenclaves.Principal{
		// 							{
		// 								ID: to.Ptr("355a6bb0-abc0-4cba-000d-12a345b678c9"),
		// 								Type: to.Ptr(armvirtualenclaves.PrincipalTypeUser),
		// 							},
		// 						},
		// 						Justification: to.Ptr(armvirtualenclaves.MaintenanceModeConfigurationModelJustificationOff),
		// 					},
		// 					BastionEnabled: to.Ptr(true),
		// 					EnclaveRoleAssignments: []*armvirtualenclaves.RoleAssignmentItem{
		// 						{
		// 							RoleDefinitionID: to.Ptr("b24988ac-6180-42a0-ab88-20f7382dd24c"),
		// 							Principals: []*armvirtualenclaves.Principal{
		// 								{
		// 									ID: to.Ptr("355a6bb0-abc0-4cba-000d-12a345b678c9"),
		// 									Type: to.Ptr(armvirtualenclaves.PrincipalTypeUser),
		// 								},
		// 								{
		// 									ID: to.Ptr("355a6bb0-abc0-4cba-000d-12a345b678c0"),
		// 									Type: to.Ptr(armvirtualenclaves.PrincipalTypeUser),
		// 								},
		// 							},
		// 						},
		// 						{
		// 							RoleDefinitionID: to.Ptr("18d7d88d-d35e-4fb5-a5c3-7773c20a72d9"),
		// 							Principals: []*armvirtualenclaves.Principal{
		// 								{
		// 									ID: to.Ptr("355a6bb0-abc0-4cba-000d-12a345b678c9"),
		// 									Type: to.Ptr(armvirtualenclaves.PrincipalTypeUser),
		// 								},
		// 							},
		// 						},
		// 					},
		// 					WorkloadRoleAssignments: []*armvirtualenclaves.RoleAssignmentItem{
		// 						{
		// 							RoleDefinitionID: to.Ptr("d73bb868-a0df-4d4d-bd69-98a00b01fccb"),
		// 							Principals: []*armvirtualenclaves.Principal{
		// 								{
		// 									ID: to.Ptr("01234567-89ab-ef01-2345-0123456789ab"),
		// 									Type: to.Ptr(armvirtualenclaves.PrincipalTypeGroup),
		// 								},
		// 							},
		// 						},
		// 						{
		// 							RoleDefinitionID: to.Ptr("fb879df8-f326-4884-b1cf-06f3ad86be52"),
		// 							Principals: []*armvirtualenclaves.Principal{
		// 								{
		// 									ID: to.Ptr("01234567-89ab-ef01-2345-0123456789ab"),
		// 									Type: to.Ptr(armvirtualenclaves.PrincipalTypeGroup),
		// 								},
		// 							},
		// 						},
		// 					},
		// 				},
		// 				Tags: map[string]*string{
		// 					"Tag1": to.Ptr("Value1"),
		// 				},
		// 				Location: to.Ptr("westcentralus"),
		// 				ID: to.Ptr("/subscriptions/c64f6eca-bdc5-4bc2-88d6-f8f1dc23f86c/resourceGroups/TestMyRg/providers/microsoft.mission/virtualenclaves/TestMyEnclave"),
		// 				Name: to.Ptr("TestMyEnclave"),
		// 				Type: to.Ptr("microsoft.mission/virtualenclaves"),
		// 				SystemData: &armvirtualenclaves.SystemData{
		// 					CreatedBy: to.Ptr("myAlias"),
		// 					CreatedByType: to.Ptr(armvirtualenclaves.CreatedByTypeUser),
		// 					CreatedAt: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2023-03-17T20:43:17.760Z"); return t}()),
		// 					LastModifiedBy: to.Ptr("myAlias"),
		// 					LastModifiedByType: to.Ptr(armvirtualenclaves.CreatedByTypeUser),
		// 					LastModifiedAt: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2023-03-17T20:43:17.760Z"); return t}()),
		// 				},
		// 			},
		// 		},
		// 		NextLink: to.Ptr("https://microsoft.com/a"),
		// 	},
		// }
	}
}

// Generated from example definition: 2025-05-01-preview/VirtualEnclave_Update.json
func ExampleVirtualEnclaveClient_BeginUpdate() {
	cred, err := azidentity.NewDefaultAzureCredential(nil)
	if err != nil {
		log.Fatalf("failed to obtain a credential: %v", err)
	}
	ctx := context.Background()
	clientFactory, err := armvirtualenclaves.NewClientFactory("CA1CB369-DD26-4DB2-9D43-9AFEF0F22093", cred, nil)
	if err != nil {
		log.Fatalf("failed to create client: %v", err)
	}
	poller, err := clientFactory.NewVirtualEnclaveClient().BeginUpdate(ctx, "rgopenapi", "TestMyEnclave", armvirtualenclaves.VirtualEnclavePatchModel{
		Tags: map[string]*string{
			"Tag1": to.Ptr("Value1"),
		},
		Properties: &armvirtualenclaves.VirtualEnclavePatchProperties{
			EnclaveVirtualNetwork: &armvirtualenclaves.EnclaveVirtualNetworkModel{
				NetworkSize:     to.Ptr("small"),
				CustomCidrRange: to.Ptr("10.0.0.0/24"),
				SubnetConfigurations: []*armvirtualenclaves.SubnetConfiguration{
					{
						SubnetName:        to.Ptr("test"),
						NetworkPrefixSize: to.Ptr[int32](26),
					},
				},
				AllowSubnetCommunication: to.Ptr(true),
			},
			EnclaveDefaultSettings: &armvirtualenclaves.EnclaveDefaultSettingsPatchModel{
				DiagnosticDestination: to.Ptr(armvirtualenclaves.DiagnosticDestinationBoth),
			},
			MaintenanceModeConfiguration: &armvirtualenclaves.MaintenanceModeConfigurationPatchModel{
				Mode: to.Ptr(armvirtualenclaves.MaintenanceModeConfigurationModelModeOff),
				Principals: []*armvirtualenclaves.Principal{
					{
						ID:   to.Ptr("355a6bb0-abc0-4cba-000d-12a345b678c9"),
						Type: to.Ptr(armvirtualenclaves.PrincipalTypeUser),
					},
				},
				Justification: to.Ptr(armvirtualenclaves.MaintenanceModeConfigurationModelJustificationOff),
			},
			BastionEnabled: to.Ptr(true),
			EnclaveRoleAssignments: []*armvirtualenclaves.RoleAssignmentItem{
				{
					RoleDefinitionID: to.Ptr("b24988ac-6180-42a0-ab88-20f7382dd24c"),
					Principals: []*armvirtualenclaves.Principal{
						{
							ID:   to.Ptr("355a6bb0-abc0-4cba-000d-12a345b678c9"),
							Type: to.Ptr(armvirtualenclaves.PrincipalTypeUser),
						},
						{
							ID:   to.Ptr("355a6bb0-abc0-4cba-000d-12a345b678c0"),
							Type: to.Ptr(armvirtualenclaves.PrincipalTypeUser),
						},
					},
				},
				{
					RoleDefinitionID: to.Ptr("18d7d88d-d35e-4fb5-a5c3-7773c20a72d9"),
					Principals: []*armvirtualenclaves.Principal{
						{
							ID:   to.Ptr("355a6bb0-abc0-4cba-000d-12a345b678c9"),
							Type: to.Ptr(armvirtualenclaves.PrincipalTypeUser),
						},
					},
				},
			},
			WorkloadRoleAssignments: []*armvirtualenclaves.RoleAssignmentItem{
				{
					RoleDefinitionID: to.Ptr("d73bb868-a0df-4d4d-bd69-98a00b01fccb"),
					Principals: []*armvirtualenclaves.Principal{
						{
							ID:   to.Ptr("01234567-89ab-ef01-2345-0123456789ab"),
							Type: to.Ptr(armvirtualenclaves.PrincipalTypeGroup),
						},
					},
				},
				{
					RoleDefinitionID: to.Ptr("fb879df8-f326-4884-b1cf-06f3ad86be52"),
					Principals: []*armvirtualenclaves.Principal{
						{
							ID:   to.Ptr("01234567-89ab-ef01-2345-0123456789ab"),
							Type: to.Ptr(armvirtualenclaves.PrincipalTypeGroup),
						},
					},
				},
			},
		},
	}, nil)
	if err != nil {
		log.Fatalf("failed to finish the request: %v", err)
	}
	res, err := poller.PollUntilDone(ctx, nil)
	if err != nil {
		log.Fatalf("failed to pull the result: %v", err)
	}
	// You could use response here. We use blank identifier for just demo purposes.
	_ = res
	// If the HTTP response code is 200 as defined in example definition, your response structure would look as follows. Please pay attention that all the values in the output are fake values for just demo purposes.
	// res = armvirtualenclaves.VirtualEnclaveClientUpdateResponse{
	// 	EnclaveResource: &armvirtualenclaves.EnclaveResource{
	// 		Identity: &armvirtualenclaves.ManagedServiceIdentity{
	// 			Type: to.Ptr(armvirtualenclaves.ManagedServiceIdentityTypeSystemAssignedUserAssigned),
	// 			PrincipalID: to.Ptr("1a2e532b-9900-414c-8600-cfc6126628d7"),
	// 			TenantID: to.Ptr("f686d426-8d16-42db-81b7-ab578e110ccd"),
	// 			UserAssignedIdentities: map[string]*armvirtualenclaves.UserAssignedIdentity{
	// 				"/subscriptions/subid/resourceGroups/default-azurebatch-japaneast/providers/Microsoft.ManagedIdentity/userAssignedIdentities/id1": &armvirtualenclaves.UserAssignedIdentity{
	// 					PrincipalID: to.Ptr("f4aa4954-a564-4933-a7e1-502019d807c2"),
	// 					ClientID: to.Ptr("b82bf757-ee7f-4632-9df1-5e52a720fdd2"),
	// 				},
	// 			},
	// 		},
	// 		Properties: &armvirtualenclaves.VirtualEnclaveProperties{
	// 			ProvisioningState: to.Ptr(armvirtualenclaves.ProvisioningStateSucceeded),
	// 			EnclaveVirtualNetwork: &armvirtualenclaves.EnclaveVirtualNetworkModel{
	// 				NetworkSize: to.Ptr("small"),
	// 				CustomCidrRange: to.Ptr("10.0.0.0/24"),
	// 				SubnetConfigurations: []*armvirtualenclaves.SubnetConfiguration{
	// 					{
	// 						SubnetName: to.Ptr("test"),
	// 						NetworkPrefixSize: to.Ptr[int32](26),
	// 					},
	// 				},
	// 				AllowSubnetCommunication: to.Ptr(true),
	// 			},
	// 			CommunityResourceID: to.Ptr("/subscriptions/c64f6eca-bdc5-4bc2-88d6-f8f1dc23f86c/resourceGroups/TestMyRg/providers/microsoft.mission/communities/TestMyCommunity"),
	// 			EnclaveDefaultSettings: &armvirtualenclaves.EnclaveDefaultSettingsModel{
	// 				KeyVaultResourceID: to.Ptr("/subscriptions/c64f6eca-bdc5-4bc2-88d6-f8f1dc23f86c/resourceGroups/TestMyRg/providers/Microsoft.KeyVault/vaults/TestMyKeyVault1"),
	// 				StorageAccountResourceID: to.Ptr("/subscriptions/c64f6eca-bdc5-4bc2-88d6-f8f1dc23f86c/resourceGroups/TestMyRg/providers/Microsoft.Storage/storageAccounts/TestMyStorageAccount"),
	// 				LogAnalyticsResourceIDCollection: []*string{
	// 					to.Ptr("/subscriptions/c64f6eca-bdc5-4bc2-88d6-f8f1dc23f86c/resourceGroups/TestMyRg/providers/Microsoft.OperationalInsights/workspaces/TestMyLogA1"),
	// 					to.Ptr("/subscriptions/c64f6eca-bdc5-4bc2-88d6-f8f1dc23f86c/resourceGroups/TestMyRg/providers/Microsoft.OperationalInsights/workspaces/TestMyLogA2"),
	// 				},
	// 				DiagnosticDestination: to.Ptr(armvirtualenclaves.DiagnosticDestinationBoth),
	// 			},
	// 			ResourceCollection: []*string{
	// 				to.Ptr("/subscriptions/c64f6eca-bdc5-4bc2-88d6-f8f1dc23f86c/resourceGroups/TestMyRg"),
	// 			},
	// 			MaintenanceModeConfiguration: &armvirtualenclaves.MaintenanceModeConfigurationModel{
	// 				Mode: to.Ptr(armvirtualenclaves.MaintenanceModeConfigurationModelModeOff),
	// 				Principals: []*armvirtualenclaves.Principal{
	// 					{
	// 						ID: to.Ptr("355a6bb0-abc0-4cba-000d-12a345b678c9"),
	// 						Type: to.Ptr(armvirtualenclaves.PrincipalTypeUser),
	// 					},
	// 				},
	// 				Justification: to.Ptr(armvirtualenclaves.MaintenanceModeConfigurationModelJustificationOff),
	// 			},
	// 			BastionEnabled: to.Ptr(true),
	// 			EnclaveRoleAssignments: []*armvirtualenclaves.RoleAssignmentItem{
	// 				{
	// 					RoleDefinitionID: to.Ptr("b24988ac-6180-42a0-ab88-20f7382dd24c"),
	// 					Principals: []*armvirtualenclaves.Principal{
	// 						{
	// 							ID: to.Ptr("355a6bb0-abc0-4cba-000d-12a345b678c9"),
	// 							Type: to.Ptr(armvirtualenclaves.PrincipalTypeUser),
	// 						},
	// 						{
	// 							ID: to.Ptr("355a6bb0-abc0-4cba-000d-12a345b678c0"),
	// 							Type: to.Ptr(armvirtualenclaves.PrincipalTypeUser),
	// 						},
	// 					},
	// 				},
	// 				{
	// 					RoleDefinitionID: to.Ptr("18d7d88d-d35e-4fb5-a5c3-7773c20a72d9"),
	// 					Principals: []*armvirtualenclaves.Principal{
	// 						{
	// 							ID: to.Ptr("355a6bb0-abc0-4cba-000d-12a345b678c9"),
	// 							Type: to.Ptr(armvirtualenclaves.PrincipalTypeUser),
	// 						},
	// 					},
	// 				},
	// 			},
	// 			WorkloadRoleAssignments: []*armvirtualenclaves.RoleAssignmentItem{
	// 				{
	// 					RoleDefinitionID: to.Ptr("d73bb868-a0df-4d4d-bd69-98a00b01fccb"),
	// 					Principals: []*armvirtualenclaves.Principal{
	// 						{
	// 							ID: to.Ptr("01234567-89ab-ef01-2345-0123456789ab"),
	// 							Type: to.Ptr(armvirtualenclaves.PrincipalTypeGroup),
	// 						},
	// 					},
	// 				},
	// 				{
	// 					RoleDefinitionID: to.Ptr("fb879df8-f326-4884-b1cf-06f3ad86be52"),
	// 					Principals: []*armvirtualenclaves.Principal{
	// 						{
	// 							ID: to.Ptr("01234567-89ab-ef01-2345-0123456789ab"),
	// 							Type: to.Ptr(armvirtualenclaves.PrincipalTypeGroup),
	// 						},
	// 					},
	// 				},
	// 			},
	// 		},
	// 		Tags: map[string]*string{
	// 			"Tag1": to.Ptr("Value1"),
	// 		},
	// 		Location: to.Ptr("westcentralus"),
	// 		ID: to.Ptr("/subscriptions/c64f6eca-bdc5-4bc2-88d6-f8f1dc23f86c/resourceGroups/TestMyRg/providers/microsoft.mission/virtualenclaves/TestMyEnclave"),
	// 		Name: to.Ptr("TestMyEnclave"),
	// 		Type: to.Ptr("microsoft.mission/virtualenclaves"),
	// 		SystemData: &armvirtualenclaves.SystemData{
	// 			CreatedBy: to.Ptr("myAlias"),
	// 			CreatedByType: to.Ptr(armvirtualenclaves.CreatedByTypeUser),
	// 			CreatedAt: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2023-03-17T20:43:17.760Z"); return t}()),
	// 			LastModifiedBy: to.Ptr("myAlias"),
	// 			LastModifiedByType: to.Ptr(armvirtualenclaves.CreatedByTypeUser),
	// 			LastModifiedAt: to.Ptr(func() time.Time { t, _ := time.Parse(time.RFC3339Nano, "2023-03-17T20:43:17.760Z"); return t}()),
	// 		},
	// 	},
	// }
}
