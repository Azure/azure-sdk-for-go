// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) Go Code Generator. DO NOT EDIT.

package armvirtualenclaves

import (
	"context"
	"errors"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/arm"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/policy"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/runtime"
	"net/http"
	"net/url"
	"strings"
)

// WorkloadClient - Workload Interface
// Don't use this type directly, use NewWorkloadClient() instead.
type WorkloadClient struct {
	internal       *arm.Client
	subscriptionID string
}

// NewWorkloadClient creates a new instance of WorkloadClient with the specified values.
//   - subscriptionID - The ID of the target subscription. The value must be an UUID.
//   - credential - used to authorize requests. Usually a credential from azidentity.
//   - options - Contains optional client configuration. Pass nil to accept the default values.
func NewWorkloadClient(subscriptionID string, credential azcore.TokenCredential, options *arm.ClientOptions) (*WorkloadClient, error) {
	cl, err := arm.NewClient(moduleName, moduleVersion, credential, options)
	if err != nil {
		return nil, err
	}
	client := &WorkloadClient{
		subscriptionID: subscriptionID,
		internal:       cl,
	}
	return client, nil
}

// BeginCreateOrUpdate - Create a WorkloadResource
// If the operation fails it returns an *azcore.ResponseError type.
//
// Generated from API version 2025-05-01-preview
//   - resourceGroupName - The name of the resource group. The name is case insensitive.
//   - virtualEnclaveName - The name of the enclaveResource Resource
//   - workloadName - The name of the workloadResource Resource
//   - resource - Resource create parameters.
//   - options - WorkloadClientBeginCreateOrUpdateOptions contains the optional parameters for the WorkloadClient.BeginCreateOrUpdate
//     method.
func (client *WorkloadClient) BeginCreateOrUpdate(ctx context.Context, resourceGroupName string, virtualEnclaveName string, workloadName string, resource WorkloadResource, options *WorkloadClientBeginCreateOrUpdateOptions) (*runtime.Poller[WorkloadClientCreateOrUpdateResponse], error) {
	if options == nil || options.ResumeToken == "" {
		resp, err := client.createOrUpdate(ctx, resourceGroupName, virtualEnclaveName, workloadName, resource, options)
		if err != nil {
			return nil, err
		}
		poller, err := runtime.NewPoller(resp, client.internal.Pipeline(), &runtime.NewPollerOptions[WorkloadClientCreateOrUpdateResponse]{
			FinalStateVia: runtime.FinalStateViaAzureAsyncOp,
			Tracer:        client.internal.Tracer(),
		})
		return poller, err
	} else {
		return runtime.NewPollerFromResumeToken(options.ResumeToken, client.internal.Pipeline(), &runtime.NewPollerFromResumeTokenOptions[WorkloadClientCreateOrUpdateResponse]{
			Tracer: client.internal.Tracer(),
		})
	}
}

// CreateOrUpdate - Create a WorkloadResource
// If the operation fails it returns an *azcore.ResponseError type.
//
// Generated from API version 2025-05-01-preview
func (client *WorkloadClient) createOrUpdate(ctx context.Context, resourceGroupName string, virtualEnclaveName string, workloadName string, resource WorkloadResource, options *WorkloadClientBeginCreateOrUpdateOptions) (*http.Response, error) {
	var err error
	const operationName = "WorkloadClient.BeginCreateOrUpdate"
	ctx = context.WithValue(ctx, runtime.CtxAPINameKey{}, operationName)
	ctx, endSpan := runtime.StartSpan(ctx, operationName, client.internal.Tracer(), nil)
	defer func() { endSpan(err) }()
	req, err := client.createOrUpdateCreateRequest(ctx, resourceGroupName, virtualEnclaveName, workloadName, resource, options)
	if err != nil {
		return nil, err
	}
	httpResp, err := client.internal.Pipeline().Do(req)
	if err != nil {
		return nil, err
	}
	if !runtime.HasStatusCode(httpResp, http.StatusOK, http.StatusCreated) {
		err = runtime.NewResponseError(httpResp)
		return nil, err
	}
	return httpResp, nil
}

// createOrUpdateCreateRequest creates the CreateOrUpdate request.
func (client *WorkloadClient) createOrUpdateCreateRequest(ctx context.Context, resourceGroupName string, virtualEnclaveName string, workloadName string, resource WorkloadResource, _ *WorkloadClientBeginCreateOrUpdateOptions) (*policy.Request, error) {
	urlPath := "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Mission/virtualEnclaves/{virtualEnclaveName}/workloads/{workloadName}"
	if client.subscriptionID == "" {
		return nil, errors.New("parameter client.subscriptionID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{subscriptionId}", url.PathEscape(client.subscriptionID))
	if resourceGroupName == "" {
		return nil, errors.New("parameter resourceGroupName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{resourceGroupName}", url.PathEscape(resourceGroupName))
	if virtualEnclaveName == "" {
		return nil, errors.New("parameter virtualEnclaveName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{virtualEnclaveName}", url.PathEscape(virtualEnclaveName))
	if workloadName == "" {
		return nil, errors.New("parameter workloadName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{workloadName}", url.PathEscape(workloadName))
	req, err := runtime.NewRequest(ctx, http.MethodPut, runtime.JoinPaths(client.internal.Endpoint(), urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("api-version", "2025-05-01-preview")
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header["Accept"] = []string{"application/json"}
	req.Raw().Header["Content-Type"] = []string{"application/json"}
	if err := runtime.MarshalAsJSON(req, resource); err != nil {
		return nil, err
	}
	return req, nil
}

// BeginDelete - Delete a WorkloadResource
// If the operation fails it returns an *azcore.ResponseError type.
//
// Generated from API version 2025-05-01-preview
//   - resourceGroupName - The name of the resource group. The name is case insensitive.
//   - virtualEnclaveName - The name of the enclaveResource Resource
//   - workloadName - The name of the workloadResource Resource
//   - options - WorkloadClientBeginDeleteOptions contains the optional parameters for the WorkloadClient.BeginDelete method.
func (client *WorkloadClient) BeginDelete(ctx context.Context, resourceGroupName string, virtualEnclaveName string, workloadName string, options *WorkloadClientBeginDeleteOptions) (*runtime.Poller[WorkloadClientDeleteResponse], error) {
	if options == nil || options.ResumeToken == "" {
		resp, err := client.deleteOperation(ctx, resourceGroupName, virtualEnclaveName, workloadName, options)
		if err != nil {
			return nil, err
		}
		poller, err := runtime.NewPoller(resp, client.internal.Pipeline(), &runtime.NewPollerOptions[WorkloadClientDeleteResponse]{
			Tracer: client.internal.Tracer(),
		})
		return poller, err
	} else {
		return runtime.NewPollerFromResumeToken(options.ResumeToken, client.internal.Pipeline(), &runtime.NewPollerFromResumeTokenOptions[WorkloadClientDeleteResponse]{
			Tracer: client.internal.Tracer(),
		})
	}
}

// Delete - Delete a WorkloadResource
// If the operation fails it returns an *azcore.ResponseError type.
//
// Generated from API version 2025-05-01-preview
func (client *WorkloadClient) deleteOperation(ctx context.Context, resourceGroupName string, virtualEnclaveName string, workloadName string, options *WorkloadClientBeginDeleteOptions) (*http.Response, error) {
	var err error
	const operationName = "WorkloadClient.BeginDelete"
	ctx = context.WithValue(ctx, runtime.CtxAPINameKey{}, operationName)
	ctx, endSpan := runtime.StartSpan(ctx, operationName, client.internal.Tracer(), nil)
	defer func() { endSpan(err) }()
	req, err := client.deleteCreateRequest(ctx, resourceGroupName, virtualEnclaveName, workloadName, options)
	if err != nil {
		return nil, err
	}
	httpResp, err := client.internal.Pipeline().Do(req)
	if err != nil {
		return nil, err
	}
	if !runtime.HasStatusCode(httpResp, http.StatusAccepted, http.StatusNoContent) {
		err = runtime.NewResponseError(httpResp)
		return nil, err
	}
	return httpResp, nil
}

// deleteCreateRequest creates the Delete request.
func (client *WorkloadClient) deleteCreateRequest(ctx context.Context, resourceGroupName string, virtualEnclaveName string, workloadName string, _ *WorkloadClientBeginDeleteOptions) (*policy.Request, error) {
	urlPath := "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Mission/virtualEnclaves/{virtualEnclaveName}/workloads/{workloadName}"
	if client.subscriptionID == "" {
		return nil, errors.New("parameter client.subscriptionID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{subscriptionId}", url.PathEscape(client.subscriptionID))
	if resourceGroupName == "" {
		return nil, errors.New("parameter resourceGroupName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{resourceGroupName}", url.PathEscape(resourceGroupName))
	if virtualEnclaveName == "" {
		return nil, errors.New("parameter virtualEnclaveName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{virtualEnclaveName}", url.PathEscape(virtualEnclaveName))
	if workloadName == "" {
		return nil, errors.New("parameter workloadName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{workloadName}", url.PathEscape(workloadName))
	req, err := runtime.NewRequest(ctx, http.MethodDelete, runtime.JoinPaths(client.internal.Endpoint(), urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("api-version", "2025-05-01-preview")
	req.Raw().URL.RawQuery = reqQP.Encode()
	return req, nil
}

// Get - Get a WorkloadResource
// If the operation fails it returns an *azcore.ResponseError type.
//
// Generated from API version 2025-05-01-preview
//   - resourceGroupName - The name of the resource group. The name is case insensitive.
//   - virtualEnclaveName - The name of the enclaveResource Resource
//   - workloadName - The name of the workloadResource Resource
//   - options - WorkloadClientGetOptions contains the optional parameters for the WorkloadClient.Get method.
func (client *WorkloadClient) Get(ctx context.Context, resourceGroupName string, virtualEnclaveName string, workloadName string, options *WorkloadClientGetOptions) (WorkloadClientGetResponse, error) {
	var err error
	const operationName = "WorkloadClient.Get"
	ctx = context.WithValue(ctx, runtime.CtxAPINameKey{}, operationName)
	ctx, endSpan := runtime.StartSpan(ctx, operationName, client.internal.Tracer(), nil)
	defer func() { endSpan(err) }()
	req, err := client.getCreateRequest(ctx, resourceGroupName, virtualEnclaveName, workloadName, options)
	if err != nil {
		return WorkloadClientGetResponse{}, err
	}
	httpResp, err := client.internal.Pipeline().Do(req)
	if err != nil {
		return WorkloadClientGetResponse{}, err
	}
	if !runtime.HasStatusCode(httpResp, http.StatusOK) {
		err = runtime.NewResponseError(httpResp)
		return WorkloadClientGetResponse{}, err
	}
	resp, err := client.getHandleResponse(httpResp)
	return resp, err
}

// getCreateRequest creates the Get request.
func (client *WorkloadClient) getCreateRequest(ctx context.Context, resourceGroupName string, virtualEnclaveName string, workloadName string, _ *WorkloadClientGetOptions) (*policy.Request, error) {
	urlPath := "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Mission/virtualEnclaves/{virtualEnclaveName}/workloads/{workloadName}"
	if client.subscriptionID == "" {
		return nil, errors.New("parameter client.subscriptionID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{subscriptionId}", url.PathEscape(client.subscriptionID))
	if resourceGroupName == "" {
		return nil, errors.New("parameter resourceGroupName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{resourceGroupName}", url.PathEscape(resourceGroupName))
	if virtualEnclaveName == "" {
		return nil, errors.New("parameter virtualEnclaveName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{virtualEnclaveName}", url.PathEscape(virtualEnclaveName))
	if workloadName == "" {
		return nil, errors.New("parameter workloadName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{workloadName}", url.PathEscape(workloadName))
	req, err := runtime.NewRequest(ctx, http.MethodGet, runtime.JoinPaths(client.internal.Endpoint(), urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("api-version", "2025-05-01-preview")
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header["Accept"] = []string{"application/json"}
	return req, nil
}

// getHandleResponse handles the Get response.
func (client *WorkloadClient) getHandleResponse(resp *http.Response) (WorkloadClientGetResponse, error) {
	result := WorkloadClientGetResponse{}
	if err := runtime.UnmarshalAsJSON(resp, &result.WorkloadResource); err != nil {
		return WorkloadClientGetResponse{}, err
	}
	return result, nil
}

// NewListByEnclaveResourcePager - List WorkloadResource resources by EnclaveResource
//
// Generated from API version 2025-05-01-preview
//   - resourceGroupName - The name of the resource group. The name is case insensitive.
//   - virtualEnclaveName - The name of the enclaveResource Resource
//   - options - WorkloadClientListByEnclaveResourceOptions contains the optional parameters for the WorkloadClient.NewListByEnclaveResourcePager
//     method.
func (client *WorkloadClient) NewListByEnclaveResourcePager(resourceGroupName string, virtualEnclaveName string, options *WorkloadClientListByEnclaveResourceOptions) *runtime.Pager[WorkloadClientListByEnclaveResourceResponse] {
	return runtime.NewPager(runtime.PagingHandler[WorkloadClientListByEnclaveResourceResponse]{
		More: func(page WorkloadClientListByEnclaveResourceResponse) bool {
			return page.NextLink != nil && len(*page.NextLink) > 0
		},
		Fetcher: func(ctx context.Context, page *WorkloadClientListByEnclaveResourceResponse) (WorkloadClientListByEnclaveResourceResponse, error) {
			ctx = context.WithValue(ctx, runtime.CtxAPINameKey{}, "WorkloadClient.NewListByEnclaveResourcePager")
			nextLink := ""
			if page != nil {
				nextLink = *page.NextLink
			}
			resp, err := runtime.FetcherForNextLink(ctx, client.internal.Pipeline(), nextLink, func(ctx context.Context) (*policy.Request, error) {
				return client.listByEnclaveResourceCreateRequest(ctx, resourceGroupName, virtualEnclaveName, options)
			}, nil)
			if err != nil {
				return WorkloadClientListByEnclaveResourceResponse{}, err
			}
			return client.listByEnclaveResourceHandleResponse(resp)
		},
		Tracer: client.internal.Tracer(),
	})
}

// listByEnclaveResourceCreateRequest creates the ListByEnclaveResource request.
func (client *WorkloadClient) listByEnclaveResourceCreateRequest(ctx context.Context, resourceGroupName string, virtualEnclaveName string, _ *WorkloadClientListByEnclaveResourceOptions) (*policy.Request, error) {
	urlPath := "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Mission/virtualEnclaves/{virtualEnclaveName}/workloads"
	if client.subscriptionID == "" {
		return nil, errors.New("parameter client.subscriptionID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{subscriptionId}", url.PathEscape(client.subscriptionID))
	if resourceGroupName == "" {
		return nil, errors.New("parameter resourceGroupName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{resourceGroupName}", url.PathEscape(resourceGroupName))
	if virtualEnclaveName == "" {
		return nil, errors.New("parameter virtualEnclaveName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{virtualEnclaveName}", url.PathEscape(virtualEnclaveName))
	req, err := runtime.NewRequest(ctx, http.MethodGet, runtime.JoinPaths(client.internal.Endpoint(), urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("api-version", "2025-05-01-preview")
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header["Accept"] = []string{"application/json"}
	return req, nil
}

// listByEnclaveResourceHandleResponse handles the ListByEnclaveResource response.
func (client *WorkloadClient) listByEnclaveResourceHandleResponse(resp *http.Response) (WorkloadClientListByEnclaveResourceResponse, error) {
	result := WorkloadClientListByEnclaveResourceResponse{}
	if err := runtime.UnmarshalAsJSON(resp, &result.WorkloadResourceListResult); err != nil {
		return WorkloadClientListByEnclaveResourceResponse{}, err
	}
	return result, nil
}

// NewListBySubscriptionPager - List WorkloadResource resources by subscription ID
//
// Generated from API version 2025-05-01-preview
//   - virtualEnclaveName - The name of the enclaveResource Resource
//   - options - WorkloadClientListBySubscriptionOptions contains the optional parameters for the WorkloadClient.NewListBySubscriptionPager
//     method.
func (client *WorkloadClient) NewListBySubscriptionPager(virtualEnclaveName string, options *WorkloadClientListBySubscriptionOptions) *runtime.Pager[WorkloadClientListBySubscriptionResponse] {
	return runtime.NewPager(runtime.PagingHandler[WorkloadClientListBySubscriptionResponse]{
		More: func(page WorkloadClientListBySubscriptionResponse) bool {
			return page.NextLink != nil && len(*page.NextLink) > 0
		},
		Fetcher: func(ctx context.Context, page *WorkloadClientListBySubscriptionResponse) (WorkloadClientListBySubscriptionResponse, error) {
			ctx = context.WithValue(ctx, runtime.CtxAPINameKey{}, "WorkloadClient.NewListBySubscriptionPager")
			nextLink := ""
			if page != nil {
				nextLink = *page.NextLink
			}
			resp, err := runtime.FetcherForNextLink(ctx, client.internal.Pipeline(), nextLink, func(ctx context.Context) (*policy.Request, error) {
				return client.listBySubscriptionCreateRequest(ctx, virtualEnclaveName, options)
			}, nil)
			if err != nil {
				return WorkloadClientListBySubscriptionResponse{}, err
			}
			return client.listBySubscriptionHandleResponse(resp)
		},
		Tracer: client.internal.Tracer(),
	})
}

// listBySubscriptionCreateRequest creates the ListBySubscription request.
func (client *WorkloadClient) listBySubscriptionCreateRequest(ctx context.Context, virtualEnclaveName string, _ *WorkloadClientListBySubscriptionOptions) (*policy.Request, error) {
	urlPath := "/subscriptions/{subscriptionId}/providers/Microsoft.Mission/virtualEnclaves/{virtualEnclaveName}/workloads"
	if client.subscriptionID == "" {
		return nil, errors.New("parameter client.subscriptionID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{subscriptionId}", url.PathEscape(client.subscriptionID))
	if virtualEnclaveName == "" {
		return nil, errors.New("parameter virtualEnclaveName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{virtualEnclaveName}", url.PathEscape(virtualEnclaveName))
	req, err := runtime.NewRequest(ctx, http.MethodGet, runtime.JoinPaths(client.internal.Endpoint(), urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("api-version", "2025-05-01-preview")
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header["Accept"] = []string{"application/json"}
	return req, nil
}

// listBySubscriptionHandleResponse handles the ListBySubscription response.
func (client *WorkloadClient) listBySubscriptionHandleResponse(resp *http.Response) (WorkloadClientListBySubscriptionResponse, error) {
	result := WorkloadClientListBySubscriptionResponse{}
	if err := runtime.UnmarshalAsJSON(resp, &result.WorkloadResourceListResult); err != nil {
		return WorkloadClientListBySubscriptionResponse{}, err
	}
	return result, nil
}

// BeginUpdate - Update a WorkloadResource
// If the operation fails it returns an *azcore.ResponseError type.
//
// Generated from API version 2025-05-01-preview
//   - resourceGroupName - The name of the resource group. The name is case insensitive.
//   - virtualEnclaveName - The name of the enclaveResource Resource
//   - workloadName - The name of the workloadResource Resource
//   - properties - The resource properties to be updated.
//   - options - WorkloadClientBeginUpdateOptions contains the optional parameters for the WorkloadClient.BeginUpdate method.
func (client *WorkloadClient) BeginUpdate(ctx context.Context, resourceGroupName string, virtualEnclaveName string, workloadName string, properties WorkloadPatchModel, options *WorkloadClientBeginUpdateOptions) (*runtime.Poller[WorkloadClientUpdateResponse], error) {
	if options == nil || options.ResumeToken == "" {
		resp, err := client.update(ctx, resourceGroupName, virtualEnclaveName, workloadName, properties, options)
		if err != nil {
			return nil, err
		}
		poller, err := runtime.NewPoller(resp, client.internal.Pipeline(), &runtime.NewPollerOptions[WorkloadClientUpdateResponse]{
			Tracer: client.internal.Tracer(),
		})
		return poller, err
	} else {
		return runtime.NewPollerFromResumeToken(options.ResumeToken, client.internal.Pipeline(), &runtime.NewPollerFromResumeTokenOptions[WorkloadClientUpdateResponse]{
			Tracer: client.internal.Tracer(),
		})
	}
}

// Update - Update a WorkloadResource
// If the operation fails it returns an *azcore.ResponseError type.
//
// Generated from API version 2025-05-01-preview
func (client *WorkloadClient) update(ctx context.Context, resourceGroupName string, virtualEnclaveName string, workloadName string, properties WorkloadPatchModel, options *WorkloadClientBeginUpdateOptions) (*http.Response, error) {
	var err error
	const operationName = "WorkloadClient.BeginUpdate"
	ctx = context.WithValue(ctx, runtime.CtxAPINameKey{}, operationName)
	ctx, endSpan := runtime.StartSpan(ctx, operationName, client.internal.Tracer(), nil)
	defer func() { endSpan(err) }()
	req, err := client.updateCreateRequest(ctx, resourceGroupName, virtualEnclaveName, workloadName, properties, options)
	if err != nil {
		return nil, err
	}
	httpResp, err := client.internal.Pipeline().Do(req)
	if err != nil {
		return nil, err
	}
	if !runtime.HasStatusCode(httpResp, http.StatusOK, http.StatusAccepted) {
		err = runtime.NewResponseError(httpResp)
		return nil, err
	}
	return httpResp, nil
}

// updateCreateRequest creates the Update request.
func (client *WorkloadClient) updateCreateRequest(ctx context.Context, resourceGroupName string, virtualEnclaveName string, workloadName string, properties WorkloadPatchModel, _ *WorkloadClientBeginUpdateOptions) (*policy.Request, error) {
	urlPath := "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Mission/virtualEnclaves/{virtualEnclaveName}/workloads/{workloadName}"
	if client.subscriptionID == "" {
		return nil, errors.New("parameter client.subscriptionID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{subscriptionId}", url.PathEscape(client.subscriptionID))
	if resourceGroupName == "" {
		return nil, errors.New("parameter resourceGroupName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{resourceGroupName}", url.PathEscape(resourceGroupName))
	if virtualEnclaveName == "" {
		return nil, errors.New("parameter virtualEnclaveName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{virtualEnclaveName}", url.PathEscape(virtualEnclaveName))
	if workloadName == "" {
		return nil, errors.New("parameter workloadName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{workloadName}", url.PathEscape(workloadName))
	req, err := runtime.NewRequest(ctx, http.MethodPatch, runtime.JoinPaths(client.internal.Endpoint(), urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("api-version", "2025-05-01-preview")
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header["Accept"] = []string{"application/json"}
	req.Raw().Header["Content-Type"] = []string{"application/json"}
	if err := runtime.MarshalAsJSON(req, properties); err != nil {
		return nil, err
	}
	return req, nil
}
