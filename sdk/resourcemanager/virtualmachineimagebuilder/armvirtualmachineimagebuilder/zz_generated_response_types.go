//go:build go1.16
// +build go1.16

// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

package armvirtualmachineimagebuilder

import (
	"context"
	armruntime "github.com/Azure/azure-sdk-for-go/sdk/azcore/arm/runtime"
	"net/http"
	"time"
)

// OperationsListResponse contains the response from method Operations.List.
type OperationsListResponse struct {
	OperationsListResult
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// OperationsListResult contains the result from method Operations.List.
type OperationsListResult struct {
	OperationListResult
}

// VirtualMachineImageTemplatesCancelPollerResponse contains the response from method VirtualMachineImageTemplates.Cancel.
type VirtualMachineImageTemplatesCancelPollerResponse struct {
	// Poller contains an initialized poller.
	Poller *VirtualMachineImageTemplatesCancelPoller

	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// PollUntilDone will poll the service endpoint until a terminal state is reached or an error is received.
// freq: the time to wait between intervals in absence of a Retry-After header. Allowed minimum is one second.
// A good starting value is 30 seconds. Note that some resources might benefit from a different value.
func (l VirtualMachineImageTemplatesCancelPollerResponse) PollUntilDone(ctx context.Context, freq time.Duration) (VirtualMachineImageTemplatesCancelResponse, error) {
	respType := VirtualMachineImageTemplatesCancelResponse{}
	resp, err := l.Poller.pt.PollUntilDone(ctx, freq, nil)
	if err != nil {
		return respType, err
	}
	respType.RawResponse = resp
	return respType, nil
}

// Resume rehydrates a VirtualMachineImageTemplatesCancelPollerResponse from the provided client and resume token.
func (l *VirtualMachineImageTemplatesCancelPollerResponse) Resume(ctx context.Context, client *VirtualMachineImageTemplatesClient, token string) error {
	pt, err := armruntime.NewPollerFromResumeToken("VirtualMachineImageTemplatesClient.Cancel", token, client.pl, client.cancelHandleError)
	if err != nil {
		return err
	}
	poller := &VirtualMachineImageTemplatesCancelPoller{
		pt: pt,
	}
	resp, err := poller.Poll(ctx)
	if err != nil {
		return err
	}
	l.Poller = poller
	l.RawResponse = resp
	return nil
}

// VirtualMachineImageTemplatesCancelResponse contains the response from method VirtualMachineImageTemplates.Cancel.
type VirtualMachineImageTemplatesCancelResponse struct {
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// VirtualMachineImageTemplatesCreateOrUpdatePollerResponse contains the response from method VirtualMachineImageTemplates.CreateOrUpdate.
type VirtualMachineImageTemplatesCreateOrUpdatePollerResponse struct {
	// Poller contains an initialized poller.
	Poller *VirtualMachineImageTemplatesCreateOrUpdatePoller

	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// PollUntilDone will poll the service endpoint until a terminal state is reached or an error is received.
// freq: the time to wait between intervals in absence of a Retry-After header. Allowed minimum is one second.
// A good starting value is 30 seconds. Note that some resources might benefit from a different value.
func (l VirtualMachineImageTemplatesCreateOrUpdatePollerResponse) PollUntilDone(ctx context.Context, freq time.Duration) (VirtualMachineImageTemplatesCreateOrUpdateResponse, error) {
	respType := VirtualMachineImageTemplatesCreateOrUpdateResponse{}
	resp, err := l.Poller.pt.PollUntilDone(ctx, freq, &respType.ImageTemplate)
	if err != nil {
		return respType, err
	}
	respType.RawResponse = resp
	return respType, nil
}

// Resume rehydrates a VirtualMachineImageTemplatesCreateOrUpdatePollerResponse from the provided client and resume token.
func (l *VirtualMachineImageTemplatesCreateOrUpdatePollerResponse) Resume(ctx context.Context, client *VirtualMachineImageTemplatesClient, token string) error {
	pt, err := armruntime.NewPollerFromResumeToken("VirtualMachineImageTemplatesClient.CreateOrUpdate", token, client.pl, client.createOrUpdateHandleError)
	if err != nil {
		return err
	}
	poller := &VirtualMachineImageTemplatesCreateOrUpdatePoller{
		pt: pt,
	}
	resp, err := poller.Poll(ctx)
	if err != nil {
		return err
	}
	l.Poller = poller
	l.RawResponse = resp
	return nil
}

// VirtualMachineImageTemplatesCreateOrUpdateResponse contains the response from method VirtualMachineImageTemplates.CreateOrUpdate.
type VirtualMachineImageTemplatesCreateOrUpdateResponse struct {
	VirtualMachineImageTemplatesCreateOrUpdateResult
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// VirtualMachineImageTemplatesCreateOrUpdateResult contains the result from method VirtualMachineImageTemplates.CreateOrUpdate.
type VirtualMachineImageTemplatesCreateOrUpdateResult struct {
	ImageTemplate
}

// VirtualMachineImageTemplatesDeletePollerResponse contains the response from method VirtualMachineImageTemplates.Delete.
type VirtualMachineImageTemplatesDeletePollerResponse struct {
	// Poller contains an initialized poller.
	Poller *VirtualMachineImageTemplatesDeletePoller

	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// PollUntilDone will poll the service endpoint until a terminal state is reached or an error is received.
// freq: the time to wait between intervals in absence of a Retry-After header. Allowed minimum is one second.
// A good starting value is 30 seconds. Note that some resources might benefit from a different value.
func (l VirtualMachineImageTemplatesDeletePollerResponse) PollUntilDone(ctx context.Context, freq time.Duration) (VirtualMachineImageTemplatesDeleteResponse, error) {
	respType := VirtualMachineImageTemplatesDeleteResponse{}
	resp, err := l.Poller.pt.PollUntilDone(ctx, freq, nil)
	if err != nil {
		return respType, err
	}
	respType.RawResponse = resp
	return respType, nil
}

// Resume rehydrates a VirtualMachineImageTemplatesDeletePollerResponse from the provided client and resume token.
func (l *VirtualMachineImageTemplatesDeletePollerResponse) Resume(ctx context.Context, client *VirtualMachineImageTemplatesClient, token string) error {
	pt, err := armruntime.NewPollerFromResumeToken("VirtualMachineImageTemplatesClient.Delete", token, client.pl, client.deleteHandleError)
	if err != nil {
		return err
	}
	poller := &VirtualMachineImageTemplatesDeletePoller{
		pt: pt,
	}
	resp, err := poller.Poll(ctx)
	if err != nil {
		return err
	}
	l.Poller = poller
	l.RawResponse = resp
	return nil
}

// VirtualMachineImageTemplatesDeleteResponse contains the response from method VirtualMachineImageTemplates.Delete.
type VirtualMachineImageTemplatesDeleteResponse struct {
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// VirtualMachineImageTemplatesGetResponse contains the response from method VirtualMachineImageTemplates.Get.
type VirtualMachineImageTemplatesGetResponse struct {
	VirtualMachineImageTemplatesGetResult
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// VirtualMachineImageTemplatesGetResult contains the result from method VirtualMachineImageTemplates.Get.
type VirtualMachineImageTemplatesGetResult struct {
	ImageTemplate
}

// VirtualMachineImageTemplatesGetRunOutputResponse contains the response from method VirtualMachineImageTemplates.GetRunOutput.
type VirtualMachineImageTemplatesGetRunOutputResponse struct {
	VirtualMachineImageTemplatesGetRunOutputResult
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// VirtualMachineImageTemplatesGetRunOutputResult contains the result from method VirtualMachineImageTemplates.GetRunOutput.
type VirtualMachineImageTemplatesGetRunOutputResult struct {
	RunOutput
}

// VirtualMachineImageTemplatesListByResourceGroupResponse contains the response from method VirtualMachineImageTemplates.ListByResourceGroup.
type VirtualMachineImageTemplatesListByResourceGroupResponse struct {
	VirtualMachineImageTemplatesListByResourceGroupResult
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// VirtualMachineImageTemplatesListByResourceGroupResult contains the result from method VirtualMachineImageTemplates.ListByResourceGroup.
type VirtualMachineImageTemplatesListByResourceGroupResult struct {
	ImageTemplateListResult
}

// VirtualMachineImageTemplatesListResponse contains the response from method VirtualMachineImageTemplates.List.
type VirtualMachineImageTemplatesListResponse struct {
	VirtualMachineImageTemplatesListResult
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// VirtualMachineImageTemplatesListResult contains the result from method VirtualMachineImageTemplates.List.
type VirtualMachineImageTemplatesListResult struct {
	ImageTemplateListResult
}

// VirtualMachineImageTemplatesListRunOutputsResponse contains the response from method VirtualMachineImageTemplates.ListRunOutputs.
type VirtualMachineImageTemplatesListRunOutputsResponse struct {
	VirtualMachineImageTemplatesListRunOutputsResult
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// VirtualMachineImageTemplatesListRunOutputsResult contains the result from method VirtualMachineImageTemplates.ListRunOutputs.
type VirtualMachineImageTemplatesListRunOutputsResult struct {
	RunOutputCollection
}

// VirtualMachineImageTemplatesRunPollerResponse contains the response from method VirtualMachineImageTemplates.Run.
type VirtualMachineImageTemplatesRunPollerResponse struct {
	// Poller contains an initialized poller.
	Poller *VirtualMachineImageTemplatesRunPoller

	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// PollUntilDone will poll the service endpoint until a terminal state is reached or an error is received.
// freq: the time to wait between intervals in absence of a Retry-After header. Allowed minimum is one second.
// A good starting value is 30 seconds. Note that some resources might benefit from a different value.
func (l VirtualMachineImageTemplatesRunPollerResponse) PollUntilDone(ctx context.Context, freq time.Duration) (VirtualMachineImageTemplatesRunResponse, error) {
	respType := VirtualMachineImageTemplatesRunResponse{}
	resp, err := l.Poller.pt.PollUntilDone(ctx, freq, nil)
	if err != nil {
		return respType, err
	}
	respType.RawResponse = resp
	return respType, nil
}

// Resume rehydrates a VirtualMachineImageTemplatesRunPollerResponse from the provided client and resume token.
func (l *VirtualMachineImageTemplatesRunPollerResponse) Resume(ctx context.Context, client *VirtualMachineImageTemplatesClient, token string) error {
	pt, err := armruntime.NewPollerFromResumeToken("VirtualMachineImageTemplatesClient.Run", token, client.pl, client.runHandleError)
	if err != nil {
		return err
	}
	poller := &VirtualMachineImageTemplatesRunPoller{
		pt: pt,
	}
	resp, err := poller.Poll(ctx)
	if err != nil {
		return err
	}
	l.Poller = poller
	l.RawResponse = resp
	return nil
}

// VirtualMachineImageTemplatesRunResponse contains the response from method VirtualMachineImageTemplates.Run.
type VirtualMachineImageTemplatesRunResponse struct {
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// VirtualMachineImageTemplatesUpdatePollerResponse contains the response from method VirtualMachineImageTemplates.Update.
type VirtualMachineImageTemplatesUpdatePollerResponse struct {
	// Poller contains an initialized poller.
	Poller *VirtualMachineImageTemplatesUpdatePoller

	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// PollUntilDone will poll the service endpoint until a terminal state is reached or an error is received.
// freq: the time to wait between intervals in absence of a Retry-After header. Allowed minimum is one second.
// A good starting value is 30 seconds. Note that some resources might benefit from a different value.
func (l VirtualMachineImageTemplatesUpdatePollerResponse) PollUntilDone(ctx context.Context, freq time.Duration) (VirtualMachineImageTemplatesUpdateResponse, error) {
	respType := VirtualMachineImageTemplatesUpdateResponse{}
	resp, err := l.Poller.pt.PollUntilDone(ctx, freq, &respType.ImageTemplate)
	if err != nil {
		return respType, err
	}
	respType.RawResponse = resp
	return respType, nil
}

// Resume rehydrates a VirtualMachineImageTemplatesUpdatePollerResponse from the provided client and resume token.
func (l *VirtualMachineImageTemplatesUpdatePollerResponse) Resume(ctx context.Context, client *VirtualMachineImageTemplatesClient, token string) error {
	pt, err := armruntime.NewPollerFromResumeToken("VirtualMachineImageTemplatesClient.Update", token, client.pl, client.updateHandleError)
	if err != nil {
		return err
	}
	poller := &VirtualMachineImageTemplatesUpdatePoller{
		pt: pt,
	}
	resp, err := poller.Poll(ctx)
	if err != nil {
		return err
	}
	l.Poller = poller
	l.RawResponse = resp
	return nil
}

// VirtualMachineImageTemplatesUpdateResponse contains the response from method VirtualMachineImageTemplates.Update.
type VirtualMachineImageTemplatesUpdateResponse struct {
	VirtualMachineImageTemplatesUpdateResult
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// VirtualMachineImageTemplatesUpdateResult contains the result from method VirtualMachineImageTemplates.Update.
type VirtualMachineImageTemplatesUpdateResult struct {
	ImageTemplate
}
