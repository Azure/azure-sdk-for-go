//go:build go1.18
// +build go1.18

// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

package armvmwarecloudsimple

import (
	"encoding/json"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore"
	"reflect"
)

// MarshalJSON implements the json.Marshaller interface for type AvailableOperationDisplayPropertyServiceSpecificationMetricsList.
func (a AvailableOperationDisplayPropertyServiceSpecificationMetricsList) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "metricSpecifications", a.MetricSpecifications)
	return json.Marshal(objectMap)
}

// MarshalJSON implements the json.Marshaller interface for type AvailableOperationsListResponse.
func (a AvailableOperationsListResponse) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "nextLink", a.NextLink)
	populate(objectMap, "value", a.Value)
	return json.Marshal(objectMap)
}

// MarshalJSON implements the json.Marshaller interface for type CSRPErrorBody.
func (c CSRPErrorBody) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "code", c.Code)
	populate(objectMap, "details", c.Details)
	populate(objectMap, "message", c.Message)
	populate(objectMap, "target", c.Target)
	return json.Marshal(objectMap)
}

// MarshalJSON implements the json.Marshaller interface for type CustomizationIPSettings.
func (c CustomizationIPSettings) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "gateway", c.Gateway)
	populate(objectMap, "ip", c.IP)
	populate(objectMap, "subnetMask", c.SubnetMask)
	return json.Marshal(objectMap)
}

// MarshalJSON implements the json.Marshaller interface for type CustomizationPoliciesListResponse.
func (c CustomizationPoliciesListResponse) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "nextLink", c.NextLink)
	populate(objectMap, "value", c.Value)
	return json.Marshal(objectMap)
}

// MarshalJSON implements the json.Marshaller interface for type CustomizationSpecification.
func (c CustomizationSpecification) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "identity", c.Identity)
	populate(objectMap, "nicSettings", c.NicSettings)
	return json.Marshal(objectMap)
}

// MarshalJSON implements the json.Marshaller interface for type DedicatedCloudNode.
func (d DedicatedCloudNode) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "id", d.ID)
	populate(objectMap, "location", d.Location)
	populate(objectMap, "name", d.Name)
	populate(objectMap, "properties", d.Properties)
	populate(objectMap, "sku", d.SKU)
	populate(objectMap, "tags", d.Tags)
	populate(objectMap, "type", d.Type)
	return json.Marshal(objectMap)
}

// MarshalJSON implements the json.Marshaller interface for type DedicatedCloudNodeListResponse.
func (d DedicatedCloudNodeListResponse) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "nextLink", d.NextLink)
	populate(objectMap, "value", d.Value)
	return json.Marshal(objectMap)
}

// MarshalJSON implements the json.Marshaller interface for type DedicatedCloudNodeProperties.
func (d DedicatedCloudNodeProperties) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "availabilityZoneId", d.AvailabilityZoneID)
	populate(objectMap, "availabilityZoneName", d.AvailabilityZoneName)
	populate(objectMap, "cloudRackName", d.CloudRackName)
	populateTimeRFC3339(objectMap, "created", d.Created)
	populate(objectMap, "nodesCount", d.NodesCount)
	populate(objectMap, "placementGroupId", d.PlacementGroupID)
	populate(objectMap, "placementGroupName", d.PlacementGroupName)
	populate(objectMap, "privateCloudId", d.PrivateCloudID)
	populate(objectMap, "privateCloudName", d.PrivateCloudName)
	populate(objectMap, "provisioningState", d.ProvisioningState)
	populate(objectMap, "purchaseId", d.PurchaseID)
	populate(objectMap, "skuDescription", d.SKUDescription)
	populate(objectMap, "status", d.Status)
	populate(objectMap, "vmwareClusterName", d.VmwareClusterName)
	return json.Marshal(objectMap)
}

// UnmarshalJSON implements the json.Unmarshaller interface for type DedicatedCloudNodeProperties.
func (d *DedicatedCloudNodeProperties) UnmarshalJSON(data []byte) error {
	var rawMsg map[string]json.RawMessage
	if err := json.Unmarshal(data, &rawMsg); err != nil {
		return err
	}
	for key, val := range rawMsg {
		var err error
		switch key {
		case "availabilityZoneId":
			err = unpopulate(val, &d.AvailabilityZoneID)
			delete(rawMsg, key)
		case "availabilityZoneName":
			err = unpopulate(val, &d.AvailabilityZoneName)
			delete(rawMsg, key)
		case "cloudRackName":
			err = unpopulate(val, &d.CloudRackName)
			delete(rawMsg, key)
		case "created":
			err = unpopulateTimeRFC3339(val, &d.Created)
			delete(rawMsg, key)
		case "nodesCount":
			err = unpopulate(val, &d.NodesCount)
			delete(rawMsg, key)
		case "placementGroupId":
			err = unpopulate(val, &d.PlacementGroupID)
			delete(rawMsg, key)
		case "placementGroupName":
			err = unpopulate(val, &d.PlacementGroupName)
			delete(rawMsg, key)
		case "privateCloudId":
			err = unpopulate(val, &d.PrivateCloudID)
			delete(rawMsg, key)
		case "privateCloudName":
			err = unpopulate(val, &d.PrivateCloudName)
			delete(rawMsg, key)
		case "provisioningState":
			err = unpopulate(val, &d.ProvisioningState)
			delete(rawMsg, key)
		case "purchaseId":
			err = unpopulate(val, &d.PurchaseID)
			delete(rawMsg, key)
		case "skuDescription":
			err = unpopulate(val, &d.SKUDescription)
			delete(rawMsg, key)
		case "status":
			err = unpopulate(val, &d.Status)
			delete(rawMsg, key)
		case "vmwareClusterName":
			err = unpopulate(val, &d.VmwareClusterName)
			delete(rawMsg, key)
		}
		if err != nil {
			return err
		}
	}
	return nil
}

// MarshalJSON implements the json.Marshaller interface for type DedicatedCloudService.
func (d DedicatedCloudService) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "id", d.ID)
	populate(objectMap, "location", d.Location)
	populate(objectMap, "name", d.Name)
	populate(objectMap, "properties", d.Properties)
	populate(objectMap, "tags", d.Tags)
	populate(objectMap, "type", d.Type)
	return json.Marshal(objectMap)
}

// MarshalJSON implements the json.Marshaller interface for type DedicatedCloudServiceListResponse.
func (d DedicatedCloudServiceListResponse) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "nextLink", d.NextLink)
	populate(objectMap, "value", d.Value)
	return json.Marshal(objectMap)
}

// MarshalJSON implements the json.Marshaller interface for type GuestOSCustomization.
func (g GuestOSCustomization) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "dnsServers", g.DNSServers)
	populate(objectMap, "hostName", g.HostName)
	populate(objectMap, "password", g.Password)
	populate(objectMap, "policyId", g.PolicyID)
	populate(objectMap, "username", g.Username)
	return json.Marshal(objectMap)
}

// MarshalJSON implements the json.Marshaller interface for type GuestOSNICCustomization.
func (g GuestOSNICCustomization) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "allocation", g.Allocation)
	populate(objectMap, "dnsServers", g.DNSServers)
	populate(objectMap, "gateway", g.Gateway)
	populate(objectMap, "ipAddress", g.IPAddress)
	populate(objectMap, "mask", g.Mask)
	populate(objectMap, "primaryWinsServer", g.PrimaryWinsServer)
	populate(objectMap, "secondaryWinsServer", g.SecondaryWinsServer)
	return json.Marshal(objectMap)
}

// MarshalJSON implements the json.Marshaller interface for type OperationResource.
func (o OperationResource) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populateTimeRFC3339(objectMap, "endTime", o.EndTime)
	populate(objectMap, "error", o.Error)
	populate(objectMap, "id", o.ID)
	populate(objectMap, "name", o.Name)
	populateTimeRFC3339(objectMap, "startTime", o.StartTime)
	populate(objectMap, "status", o.Status)
	return json.Marshal(objectMap)
}

// UnmarshalJSON implements the json.Unmarshaller interface for type OperationResource.
func (o *OperationResource) UnmarshalJSON(data []byte) error {
	var rawMsg map[string]json.RawMessage
	if err := json.Unmarshal(data, &rawMsg); err != nil {
		return err
	}
	for key, val := range rawMsg {
		var err error
		switch key {
		case "endTime":
			err = unpopulateTimeRFC3339(val, &o.EndTime)
			delete(rawMsg, key)
		case "error":
			err = unpopulate(val, &o.Error)
			delete(rawMsg, key)
		case "id":
			err = unpopulate(val, &o.ID)
			delete(rawMsg, key)
		case "name":
			err = unpopulate(val, &o.Name)
			delete(rawMsg, key)
		case "startTime":
			err = unpopulateTimeRFC3339(val, &o.StartTime)
			delete(rawMsg, key)
		case "status":
			err = unpopulate(val, &o.Status)
			delete(rawMsg, key)
		}
		if err != nil {
			return err
		}
	}
	return nil
}

// MarshalJSON implements the json.Marshaller interface for type PatchPayload.
func (p PatchPayload) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "tags", p.Tags)
	return json.Marshal(objectMap)
}

// MarshalJSON implements the json.Marshaller interface for type PrivateCloudList.
func (p PrivateCloudList) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "nextLink", p.NextLink)
	populate(objectMap, "value", p.Value)
	return json.Marshal(objectMap)
}

// MarshalJSON implements the json.Marshaller interface for type PrivateCloudProperties.
func (p PrivateCloudProperties) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "availabilityZoneId", p.AvailabilityZoneID)
	populate(objectMap, "availabilityZoneName", p.AvailabilityZoneName)
	populate(objectMap, "clustersNumber", p.ClustersNumber)
	populate(objectMap, "createdBy", p.CreatedBy)
	populateTimeRFC3339(objectMap, "createdOn", p.CreatedOn)
	populate(objectMap, "dnsServers", p.DNSServers)
	populate(objectMap, "expires", p.Expires)
	populate(objectMap, "nsxType", p.NsxType)
	populate(objectMap, "placementGroupId", p.PlacementGroupID)
	populate(objectMap, "placementGroupName", p.PlacementGroupName)
	populate(objectMap, "privateCloudId", p.PrivateCloudID)
	populate(objectMap, "resourcePools", p.ResourcePools)
	populate(objectMap, "state", p.State)
	populate(objectMap, "totalCpuCores", p.TotalCPUCores)
	populate(objectMap, "totalNodes", p.TotalNodes)
	populate(objectMap, "totalRam", p.TotalRAM)
	populate(objectMap, "totalStorage", p.TotalStorage)
	populate(objectMap, "type", p.Type)
	populate(objectMap, "vSphereVersion", p.VSphereVersion)
	populate(objectMap, "vcenterFqdn", p.VcenterFqdn)
	populate(objectMap, "vcenterRefid", p.VcenterRefid)
	populate(objectMap, "virtualMachineTemplates", p.VirtualMachineTemplates)
	populate(objectMap, "virtualNetworks", p.VirtualNetworks)
	populate(objectMap, "vrOpsEnabled", p.VrOpsEnabled)
	return json.Marshal(objectMap)
}

// UnmarshalJSON implements the json.Unmarshaller interface for type PrivateCloudProperties.
func (p *PrivateCloudProperties) UnmarshalJSON(data []byte) error {
	var rawMsg map[string]json.RawMessage
	if err := json.Unmarshal(data, &rawMsg); err != nil {
		return err
	}
	for key, val := range rawMsg {
		var err error
		switch key {
		case "availabilityZoneId":
			err = unpopulate(val, &p.AvailabilityZoneID)
			delete(rawMsg, key)
		case "availabilityZoneName":
			err = unpopulate(val, &p.AvailabilityZoneName)
			delete(rawMsg, key)
		case "clustersNumber":
			err = unpopulate(val, &p.ClustersNumber)
			delete(rawMsg, key)
		case "createdBy":
			err = unpopulate(val, &p.CreatedBy)
			delete(rawMsg, key)
		case "createdOn":
			err = unpopulateTimeRFC3339(val, &p.CreatedOn)
			delete(rawMsg, key)
		case "dnsServers":
			err = unpopulate(val, &p.DNSServers)
			delete(rawMsg, key)
		case "expires":
			err = unpopulate(val, &p.Expires)
			delete(rawMsg, key)
		case "nsxType":
			err = unpopulate(val, &p.NsxType)
			delete(rawMsg, key)
		case "placementGroupId":
			err = unpopulate(val, &p.PlacementGroupID)
			delete(rawMsg, key)
		case "placementGroupName":
			err = unpopulate(val, &p.PlacementGroupName)
			delete(rawMsg, key)
		case "privateCloudId":
			err = unpopulate(val, &p.PrivateCloudID)
			delete(rawMsg, key)
		case "resourcePools":
			err = unpopulate(val, &p.ResourcePools)
			delete(rawMsg, key)
		case "state":
			err = unpopulate(val, &p.State)
			delete(rawMsg, key)
		case "totalCpuCores":
			err = unpopulate(val, &p.TotalCPUCores)
			delete(rawMsg, key)
		case "totalNodes":
			err = unpopulate(val, &p.TotalNodes)
			delete(rawMsg, key)
		case "totalRam":
			err = unpopulate(val, &p.TotalRAM)
			delete(rawMsg, key)
		case "totalStorage":
			err = unpopulate(val, &p.TotalStorage)
			delete(rawMsg, key)
		case "type":
			err = unpopulate(val, &p.Type)
			delete(rawMsg, key)
		case "vSphereVersion":
			err = unpopulate(val, &p.VSphereVersion)
			delete(rawMsg, key)
		case "vcenterFqdn":
			err = unpopulate(val, &p.VcenterFqdn)
			delete(rawMsg, key)
		case "vcenterRefid":
			err = unpopulate(val, &p.VcenterRefid)
			delete(rawMsg, key)
		case "virtualMachineTemplates":
			err = unpopulate(val, &p.VirtualMachineTemplates)
			delete(rawMsg, key)
		case "virtualNetworks":
			err = unpopulate(val, &p.VirtualNetworks)
			delete(rawMsg, key)
		case "vrOpsEnabled":
			err = unpopulate(val, &p.VrOpsEnabled)
			delete(rawMsg, key)
		}
		if err != nil {
			return err
		}
	}
	return nil
}

// MarshalJSON implements the json.Marshaller interface for type ResourcePoolsListResponse.
func (r ResourcePoolsListResponse) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "nextLink", r.NextLink)
	populate(objectMap, "value", r.Value)
	return json.Marshal(objectMap)
}

// MarshalJSON implements the json.Marshaller interface for type SKUAvailabilityListResponse.
func (s SKUAvailabilityListResponse) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "nextLink", s.NextLink)
	populate(objectMap, "value", s.Value)
	return json.Marshal(objectMap)
}

// MarshalJSON implements the json.Marshaller interface for type UsageListResponse.
func (u UsageListResponse) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "nextLink", u.NextLink)
	populate(objectMap, "value", u.Value)
	return json.Marshal(objectMap)
}

// MarshalJSON implements the json.Marshaller interface for type VirtualMachine.
func (v VirtualMachine) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "id", v.ID)
	populate(objectMap, "location", v.Location)
	populate(objectMap, "name", v.Name)
	populate(objectMap, "properties", v.Properties)
	populate(objectMap, "tags", v.Tags)
	populate(objectMap, "type", v.Type)
	return json.Marshal(objectMap)
}

// MarshalJSON implements the json.Marshaller interface for type VirtualMachineListResponse.
func (v VirtualMachineListResponse) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "nextLink", v.NextLink)
	populate(objectMap, "value", v.Value)
	return json.Marshal(objectMap)
}

// MarshalJSON implements the json.Marshaller interface for type VirtualMachineProperties.
func (v VirtualMachineProperties) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "amountOfRam", v.AmountOfRAM)
	populate(objectMap, "controllers", v.Controllers)
	populate(objectMap, "customization", v.Customization)
	populate(objectMap, "disks", v.Disks)
	populate(objectMap, "dnsname", v.Dnsname)
	populate(objectMap, "exposeToGuestVM", v.ExposeToGuestVM)
	populate(objectMap, "folder", v.Folder)
	populate(objectMap, "guestOS", v.GuestOS)
	populate(objectMap, "guestOSType", v.GuestOSType)
	populate(objectMap, "nics", v.Nics)
	populate(objectMap, "numberOfCores", v.NumberOfCores)
	populate(objectMap, "password", v.Password)
	populate(objectMap, "privateCloudId", v.PrivateCloudID)
	populate(objectMap, "provisioningState", v.ProvisioningState)
	populate(objectMap, "publicIP", v.PublicIP)
	populate(objectMap, "resourcePool", v.ResourcePool)
	populate(objectMap, "status", v.Status)
	populate(objectMap, "templateId", v.TemplateID)
	populate(objectMap, "username", v.Username)
	populate(objectMap, "vmId", v.VMID)
	populate(objectMap, "vSphereNetworks", v.VSphereNetworks)
	populate(objectMap, "vmwaretools", v.Vmwaretools)
	return json.Marshal(objectMap)
}

// MarshalJSON implements the json.Marshaller interface for type VirtualMachineTemplateListResponse.
func (v VirtualMachineTemplateListResponse) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "nextLink", v.NextLink)
	populate(objectMap, "value", v.Value)
	return json.Marshal(objectMap)
}

// MarshalJSON implements the json.Marshaller interface for type VirtualMachineTemplateProperties.
func (v VirtualMachineTemplateProperties) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "amountOfRam", v.AmountOfRAM)
	populate(objectMap, "controllers", v.Controllers)
	populate(objectMap, "description", v.Description)
	populate(objectMap, "disks", v.Disks)
	populate(objectMap, "exposeToGuestVM", v.ExposeToGuestVM)
	populate(objectMap, "guestOS", v.GuestOS)
	populate(objectMap, "guestOSType", v.GuestOSType)
	populate(objectMap, "nics", v.Nics)
	populate(objectMap, "numberOfCores", v.NumberOfCores)
	populate(objectMap, "path", v.Path)
	populate(objectMap, "privateCloudId", v.PrivateCloudID)
	populate(objectMap, "vSphereNetworks", v.VSphereNetworks)
	populate(objectMap, "vSphereTags", v.VSphereTags)
	populate(objectMap, "vmwaretools", v.Vmwaretools)
	return json.Marshal(objectMap)
}

// MarshalJSON implements the json.Marshaller interface for type VirtualNetworkListResponse.
func (v VirtualNetworkListResponse) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "nextLink", v.NextLink)
	populate(objectMap, "value", v.Value)
	return json.Marshal(objectMap)
}

// MarshalJSON implements the json.Marshaller interface for type VirtualNic.
func (v VirtualNic) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "customization", v.Customization)
	populate(objectMap, "ipAddresses", v.IPAddresses)
	populate(objectMap, "macAddress", v.MacAddress)
	populate(objectMap, "network", v.Network)
	populate(objectMap, "nicType", v.NicType)
	populate(objectMap, "powerOnBoot", v.PowerOnBoot)
	populate(objectMap, "virtualNicId", v.VirtualNicID)
	populate(objectMap, "virtualNicName", v.VirtualNicName)
	return json.Marshal(objectMap)
}

func populate(m map[string]interface{}, k string, v interface{}) {
	if v == nil {
		return
	} else if azcore.IsNullValue(v) {
		m[k] = nil
	} else if !reflect.ValueOf(v).IsNil() {
		m[k] = v
	}
}

func unpopulate(data json.RawMessage, v interface{}) error {
	if data == nil {
		return nil
	}
	return json.Unmarshal(data, v)
}
