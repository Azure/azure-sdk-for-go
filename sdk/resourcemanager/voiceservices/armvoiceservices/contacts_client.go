//go:build go1.18
// +build go1.18

// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.
// DO NOT EDIT.

package armvoiceservices

import (
	"context"
	"errors"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/arm"
	armruntime "github.com/Azure/azure-sdk-for-go/sdk/azcore/arm/runtime"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/cloud"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/policy"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/runtime"
	"net/http"
	"net/url"
	"strings"
)

// ContactsClient contains the methods for the Contacts group.
// Don't use this type directly, use NewContactsClient() instead.
type ContactsClient struct {
	host           string
	subscriptionID string
	pl             runtime.Pipeline
}

// NewContactsClient creates a new instance of ContactsClient with the specified values.
//   - subscriptionID - The ID of the target subscription.
//   - credential - used to authorize requests. Usually a credential from azidentity.
//   - options - pass nil to accept the default values.
func NewContactsClient(subscriptionID string, credential azcore.TokenCredential, options *arm.ClientOptions) (*ContactsClient, error) {
	if options == nil {
		options = &arm.ClientOptions{}
	}
	ep := cloud.AzurePublic.Services[cloud.ResourceManager].Endpoint
	if c, ok := options.Cloud.Services[cloud.ResourceManager]; ok {
		ep = c.Endpoint
	}
	pl, err := armruntime.NewPipeline(moduleName, moduleVersion, credential, runtime.PipelineOptions{}, options)
	if err != nil {
		return nil, err
	}
	client := &ContactsClient{
		subscriptionID: subscriptionID,
		host:           ep,
		pl:             pl,
	}
	return client, nil
}

// BeginCreateOrUpdate - Create a Contact
// If the operation fails it returns an *azcore.ResponseError type.
//
// Generated from API version 2022-12-01-preview
//   - resourceGroupName - The name of the resource group. The name is case insensitive.
//   - communicationsGatewayName - Unique identifier for this deployment
//   - contactName - Unique identifier for this contact
//   - resource - Resource create parameters.
//   - options - ContactsClientBeginCreateOrUpdateOptions contains the optional parameters for the ContactsClient.BeginCreateOrUpdate
//     method.
func (client *ContactsClient) BeginCreateOrUpdate(ctx context.Context, resourceGroupName string, communicationsGatewayName string, contactName string, resource Contact, options *ContactsClientBeginCreateOrUpdateOptions) (*runtime.Poller[ContactsClientCreateOrUpdateResponse], error) {
	if options == nil || options.ResumeToken == "" {
		resp, err := client.createOrUpdate(ctx, resourceGroupName, communicationsGatewayName, contactName, resource, options)
		if err != nil {
			return nil, err
		}
		return runtime.NewPoller(resp, client.pl, &runtime.NewPollerOptions[ContactsClientCreateOrUpdateResponse]{
			FinalStateVia: runtime.FinalStateViaAzureAsyncOp,
		})
	} else {
		return runtime.NewPollerFromResumeToken[ContactsClientCreateOrUpdateResponse](options.ResumeToken, client.pl, nil)
	}
}

// CreateOrUpdate - Create a Contact
// If the operation fails it returns an *azcore.ResponseError type.
//
// Generated from API version 2022-12-01-preview
func (client *ContactsClient) createOrUpdate(ctx context.Context, resourceGroupName string, communicationsGatewayName string, contactName string, resource Contact, options *ContactsClientBeginCreateOrUpdateOptions) (*http.Response, error) {
	req, err := client.createOrUpdateCreateRequest(ctx, resourceGroupName, communicationsGatewayName, contactName, resource, options)
	if err != nil {
		return nil, err
	}
	resp, err := client.pl.Do(req)
	if err != nil {
		return nil, err
	}
	if !runtime.HasStatusCode(resp, http.StatusOK, http.StatusCreated) {
		return nil, runtime.NewResponseError(resp)
	}
	return resp, nil
}

// createOrUpdateCreateRequest creates the CreateOrUpdate request.
func (client *ContactsClient) createOrUpdateCreateRequest(ctx context.Context, resourceGroupName string, communicationsGatewayName string, contactName string, resource Contact, options *ContactsClientBeginCreateOrUpdateOptions) (*policy.Request, error) {
	urlPath := "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.VoiceServices/communicationsGateways/{communicationsGatewayName}/contacts/{contactName}"
	if client.subscriptionID == "" {
		return nil, errors.New("parameter client.subscriptionID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{subscriptionId}", url.PathEscape(client.subscriptionID))
	if resourceGroupName == "" {
		return nil, errors.New("parameter resourceGroupName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{resourceGroupName}", url.PathEscape(resourceGroupName))
	if communicationsGatewayName == "" {
		return nil, errors.New("parameter communicationsGatewayName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{communicationsGatewayName}", url.PathEscape(communicationsGatewayName))
	if contactName == "" {
		return nil, errors.New("parameter contactName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{contactName}", url.PathEscape(contactName))
	req, err := runtime.NewRequest(ctx, http.MethodPut, runtime.JoinPaths(client.host, urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("api-version", "2022-12-01-preview")
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header["Accept"] = []string{"application/json"}
	return req, runtime.MarshalAsJSON(req, resource)
}

// BeginDelete - Delete a Contact
// If the operation fails it returns an *azcore.ResponseError type.
//
// Generated from API version 2022-12-01-preview
//   - resourceGroupName - The name of the resource group. The name is case insensitive.
//   - communicationsGatewayName - Unique identifier for this deployment
//   - contactName - Unique identifier for this contact
//   - options - ContactsClientBeginDeleteOptions contains the optional parameters for the ContactsClient.BeginDelete method.
func (client *ContactsClient) BeginDelete(ctx context.Context, resourceGroupName string, communicationsGatewayName string, contactName string, options *ContactsClientBeginDeleteOptions) (*runtime.Poller[ContactsClientDeleteResponse], error) {
	if options == nil || options.ResumeToken == "" {
		resp, err := client.deleteOperation(ctx, resourceGroupName, communicationsGatewayName, contactName, options)
		if err != nil {
			return nil, err
		}
		return runtime.NewPoller(resp, client.pl, &runtime.NewPollerOptions[ContactsClientDeleteResponse]{
			FinalStateVia: runtime.FinalStateViaAzureAsyncOp,
		})
	} else {
		return runtime.NewPollerFromResumeToken[ContactsClientDeleteResponse](options.ResumeToken, client.pl, nil)
	}
}

// Delete - Delete a Contact
// If the operation fails it returns an *azcore.ResponseError type.
//
// Generated from API version 2022-12-01-preview
func (client *ContactsClient) deleteOperation(ctx context.Context, resourceGroupName string, communicationsGatewayName string, contactName string, options *ContactsClientBeginDeleteOptions) (*http.Response, error) {
	req, err := client.deleteCreateRequest(ctx, resourceGroupName, communicationsGatewayName, contactName, options)
	if err != nil {
		return nil, err
	}
	resp, err := client.pl.Do(req)
	if err != nil {
		return nil, err
	}
	if !runtime.HasStatusCode(resp, http.StatusOK, http.StatusAccepted, http.StatusNoContent) {
		return nil, runtime.NewResponseError(resp)
	}
	return resp, nil
}

// deleteCreateRequest creates the Delete request.
func (client *ContactsClient) deleteCreateRequest(ctx context.Context, resourceGroupName string, communicationsGatewayName string, contactName string, options *ContactsClientBeginDeleteOptions) (*policy.Request, error) {
	urlPath := "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.VoiceServices/communicationsGateways/{communicationsGatewayName}/contacts/{contactName}"
	if client.subscriptionID == "" {
		return nil, errors.New("parameter client.subscriptionID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{subscriptionId}", url.PathEscape(client.subscriptionID))
	if resourceGroupName == "" {
		return nil, errors.New("parameter resourceGroupName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{resourceGroupName}", url.PathEscape(resourceGroupName))
	if communicationsGatewayName == "" {
		return nil, errors.New("parameter communicationsGatewayName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{communicationsGatewayName}", url.PathEscape(communicationsGatewayName))
	if contactName == "" {
		return nil, errors.New("parameter contactName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{contactName}", url.PathEscape(contactName))
	req, err := runtime.NewRequest(ctx, http.MethodDelete, runtime.JoinPaths(client.host, urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("api-version", "2022-12-01-preview")
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header["Accept"] = []string{"application/json"}
	return req, nil
}

// Get - Get a Contact
// If the operation fails it returns an *azcore.ResponseError type.
//
// Generated from API version 2022-12-01-preview
//   - resourceGroupName - The name of the resource group. The name is case insensitive.
//   - communicationsGatewayName - Unique identifier for this deployment
//   - contactName - Unique identifier for this contact
//   - options - ContactsClientGetOptions contains the optional parameters for the ContactsClient.Get method.
func (client *ContactsClient) Get(ctx context.Context, resourceGroupName string, communicationsGatewayName string, contactName string, options *ContactsClientGetOptions) (ContactsClientGetResponse, error) {
	req, err := client.getCreateRequest(ctx, resourceGroupName, communicationsGatewayName, contactName, options)
	if err != nil {
		return ContactsClientGetResponse{}, err
	}
	resp, err := client.pl.Do(req)
	if err != nil {
		return ContactsClientGetResponse{}, err
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {
		return ContactsClientGetResponse{}, runtime.NewResponseError(resp)
	}
	return client.getHandleResponse(resp)
}

// getCreateRequest creates the Get request.
func (client *ContactsClient) getCreateRequest(ctx context.Context, resourceGroupName string, communicationsGatewayName string, contactName string, options *ContactsClientGetOptions) (*policy.Request, error) {
	urlPath := "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.VoiceServices/communicationsGateways/{communicationsGatewayName}/contacts/{contactName}"
	if client.subscriptionID == "" {
		return nil, errors.New("parameter client.subscriptionID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{subscriptionId}", url.PathEscape(client.subscriptionID))
	if resourceGroupName == "" {
		return nil, errors.New("parameter resourceGroupName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{resourceGroupName}", url.PathEscape(resourceGroupName))
	if communicationsGatewayName == "" {
		return nil, errors.New("parameter communicationsGatewayName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{communicationsGatewayName}", url.PathEscape(communicationsGatewayName))
	if contactName == "" {
		return nil, errors.New("parameter contactName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{contactName}", url.PathEscape(contactName))
	req, err := runtime.NewRequest(ctx, http.MethodGet, runtime.JoinPaths(client.host, urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("api-version", "2022-12-01-preview")
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header["Accept"] = []string{"application/json"}
	return req, nil
}

// getHandleResponse handles the Get response.
func (client *ContactsClient) getHandleResponse(resp *http.Response) (ContactsClientGetResponse, error) {
	result := ContactsClientGetResponse{}
	if err := runtime.UnmarshalAsJSON(resp, &result.Contact); err != nil {
		return ContactsClientGetResponse{}, err
	}
	return result, nil
}

// NewListByCommunicationsGatewayPager - List Contact resources by CommunicationsGateway
//
// Generated from API version 2022-12-01-preview
//   - resourceGroupName - The name of the resource group. The name is case insensitive.
//   - communicationsGatewayName - Unique identifier for this deployment
//   - options - ContactsClientListByCommunicationsGatewayOptions contains the optional parameters for the ContactsClient.NewListByCommunicationsGatewayPager
//     method.
func (client *ContactsClient) NewListByCommunicationsGatewayPager(resourceGroupName string, communicationsGatewayName string, options *ContactsClientListByCommunicationsGatewayOptions) *runtime.Pager[ContactsClientListByCommunicationsGatewayResponse] {
	return runtime.NewPager(runtime.PagingHandler[ContactsClientListByCommunicationsGatewayResponse]{
		More: func(page ContactsClientListByCommunicationsGatewayResponse) bool {
			return page.NextLink != nil && len(*page.NextLink) > 0
		},
		Fetcher: func(ctx context.Context, page *ContactsClientListByCommunicationsGatewayResponse) (ContactsClientListByCommunicationsGatewayResponse, error) {
			var req *policy.Request
			var err error
			if page == nil {
				req, err = client.listByCommunicationsGatewayCreateRequest(ctx, resourceGroupName, communicationsGatewayName, options)
			} else {
				req, err = runtime.NewRequest(ctx, http.MethodGet, *page.NextLink)
			}
			if err != nil {
				return ContactsClientListByCommunicationsGatewayResponse{}, err
			}
			resp, err := client.pl.Do(req)
			if err != nil {
				return ContactsClientListByCommunicationsGatewayResponse{}, err
			}
			if !runtime.HasStatusCode(resp, http.StatusOK) {
				return ContactsClientListByCommunicationsGatewayResponse{}, runtime.NewResponseError(resp)
			}
			return client.listByCommunicationsGatewayHandleResponse(resp)
		},
	})
}

// listByCommunicationsGatewayCreateRequest creates the ListByCommunicationsGateway request.
func (client *ContactsClient) listByCommunicationsGatewayCreateRequest(ctx context.Context, resourceGroupName string, communicationsGatewayName string, options *ContactsClientListByCommunicationsGatewayOptions) (*policy.Request, error) {
	urlPath := "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.VoiceServices/communicationsGateways/{communicationsGatewayName}/contacts"
	if client.subscriptionID == "" {
		return nil, errors.New("parameter client.subscriptionID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{subscriptionId}", url.PathEscape(client.subscriptionID))
	if resourceGroupName == "" {
		return nil, errors.New("parameter resourceGroupName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{resourceGroupName}", url.PathEscape(resourceGroupName))
	if communicationsGatewayName == "" {
		return nil, errors.New("parameter communicationsGatewayName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{communicationsGatewayName}", url.PathEscape(communicationsGatewayName))
	req, err := runtime.NewRequest(ctx, http.MethodGet, runtime.JoinPaths(client.host, urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("api-version", "2022-12-01-preview")
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header["Accept"] = []string{"application/json"}
	return req, nil
}

// listByCommunicationsGatewayHandleResponse handles the ListByCommunicationsGateway response.
func (client *ContactsClient) listByCommunicationsGatewayHandleResponse(resp *http.Response) (ContactsClientListByCommunicationsGatewayResponse, error) {
	result := ContactsClientListByCommunicationsGatewayResponse{}
	if err := runtime.UnmarshalAsJSON(resp, &result.ContactListResult); err != nil {
		return ContactsClientListByCommunicationsGatewayResponse{}, err
	}
	return result, nil
}

// Update - Update a Contact
// If the operation fails it returns an *azcore.ResponseError type.
//
// Generated from API version 2022-12-01-preview
//   - resourceGroupName - The name of the resource group. The name is case insensitive.
//   - communicationsGatewayName - Unique identifier for this deployment
//   - contactName - Unique identifier for this contact
//   - properties - The resource properties to be updated.
//   - options - ContactsClientUpdateOptions contains the optional parameters for the ContactsClient.Update method.
func (client *ContactsClient) Update(ctx context.Context, resourceGroupName string, communicationsGatewayName string, contactName string, properties ContactUpdate, options *ContactsClientUpdateOptions) (ContactsClientUpdateResponse, error) {
	req, err := client.updateCreateRequest(ctx, resourceGroupName, communicationsGatewayName, contactName, properties, options)
	if err != nil {
		return ContactsClientUpdateResponse{}, err
	}
	resp, err := client.pl.Do(req)
	if err != nil {
		return ContactsClientUpdateResponse{}, err
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {
		return ContactsClientUpdateResponse{}, runtime.NewResponseError(resp)
	}
	return client.updateHandleResponse(resp)
}

// updateCreateRequest creates the Update request.
func (client *ContactsClient) updateCreateRequest(ctx context.Context, resourceGroupName string, communicationsGatewayName string, contactName string, properties ContactUpdate, options *ContactsClientUpdateOptions) (*policy.Request, error) {
	urlPath := "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.VoiceServices/communicationsGateways/{communicationsGatewayName}/contacts/{contactName}"
	if client.subscriptionID == "" {
		return nil, errors.New("parameter client.subscriptionID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{subscriptionId}", url.PathEscape(client.subscriptionID))
	if resourceGroupName == "" {
		return nil, errors.New("parameter resourceGroupName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{resourceGroupName}", url.PathEscape(resourceGroupName))
	if communicationsGatewayName == "" {
		return nil, errors.New("parameter communicationsGatewayName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{communicationsGatewayName}", url.PathEscape(communicationsGatewayName))
	if contactName == "" {
		return nil, errors.New("parameter contactName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{contactName}", url.PathEscape(contactName))
	req, err := runtime.NewRequest(ctx, http.MethodPatch, runtime.JoinPaths(client.host, urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("api-version", "2022-12-01-preview")
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header["Accept"] = []string{"application/json"}
	return req, runtime.MarshalAsJSON(req, properties)
}

// updateHandleResponse handles the Update response.
func (client *ContactsClient) updateHandleResponse(resp *http.Response) (ContactsClientUpdateResponse, error) {
	result := ContactsClientUpdateResponse{}
	if err := runtime.UnmarshalAsJSON(resp, &result.Contact); err != nil {
		return ContactsClientUpdateResponse{}, err
	}
	return result, nil
}
