//go:build go1.16
// +build go1.16

// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

package armweb

import (
	"encoding/json"
	"reflect"
	"time"

	"github.com/Azure/azure-sdk-for-go/sdk/azcore"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/runtime"
)

// APIDefinitionInfo - Information about the formal API definition for the app.
type APIDefinitionInfo struct {
	// The URL of the API definition.
	URL *string `json:"url,omitempty"`
}

// APIKVReference - Description of site key vault references.
type APIKVReference struct {
	ProxyOnlyResource
	// ApiKVReference resource specific properties
	Properties *APIKVReferenceProperties `json:"properties,omitempty"`
}

// MarshalJSON implements the json.Marshaller interface for type APIKVReference.
func (a APIKVReference) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	a.ProxyOnlyResource.marshalInternal(objectMap)
	populate(objectMap, "properties", a.Properties)
	return json.Marshal(objectMap)
}

type APIKVReferenceCollection struct {
	// REQUIRED; Collection of resources.
	Value []*APIKVReference `json:"value,omitempty"`

	// READ-ONLY; Link to next page of resources.
	NextLink *string `json:"nextLink,omitempty" azure:"ro"`
}

// MarshalJSON implements the json.Marshaller interface for type APIKVReferenceCollection.
func (a APIKVReferenceCollection) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "nextLink", a.NextLink)
	populate(objectMap, "value", a.Value)
	return json.Marshal(objectMap)
}

// APIKVReferenceProperties - ApiKVReference resource specific properties
type APIKVReferenceProperties struct {
	ActiveVersion *string `json:"activeVersion,omitempty"`
	Details       *string `json:"details,omitempty"`

	// Managed service identity.
	IdentityType  *ManagedServiceIdentity `json:"identityType,omitempty"`
	Reference     *string                 `json:"reference,omitempty"`
	SecretName    *string                 `json:"secretName,omitempty"`
	SecretVersion *string                 `json:"secretVersion,omitempty"`
	Source        *string                 `json:"source,omitempty"`
	Status        *ResolveStatus          `json:"status,omitempty"`
	VaultName     *string                 `json:"vaultName,omitempty"`
}

// APIManagementConfig - Azure API management (APIM) configuration linked to the app.
type APIManagementConfig struct {
	// APIM-Api Identifier.
	ID *string `json:"id,omitempty"`
}

// AbnormalTimePeriod - Class representing Abnormal Time Period identified in diagnosis
type AbnormalTimePeriod struct {
	// End time of the downtime
	EndTime *time.Time `json:"endTime,omitempty"`

	// List of Possible Cause of downtime
	Events []*DetectorAbnormalTimePeriod `json:"events,omitempty"`

	// List of proposed solutions
	Solutions []*Solution `json:"solutions,omitempty"`

	// Start time of the downtime
	StartTime *time.Time `json:"startTime,omitempty"`
}

// MarshalJSON implements the json.Marshaller interface for type AbnormalTimePeriod.
func (a AbnormalTimePeriod) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "endTime", (*timeRFC3339)(a.EndTime))
	populate(objectMap, "events", a.Events)
	populate(objectMap, "solutions", a.Solutions)
	populate(objectMap, "startTime", (*timeRFC3339)(a.StartTime))
	return json.Marshal(objectMap)
}

// UnmarshalJSON implements the json.Unmarshaller interface for type AbnormalTimePeriod.
func (a *AbnormalTimePeriod) UnmarshalJSON(data []byte) error {
	var rawMsg map[string]json.RawMessage
	if err := json.Unmarshal(data, &rawMsg); err != nil {
		return err
	}
	for key, val := range rawMsg {
		var err error
		switch key {
		case "endTime":
			var aux timeRFC3339
			err = unpopulate(val, &aux)
			a.EndTime = (*time.Time)(&aux)
			delete(rawMsg, key)
		case "events":
			err = unpopulate(val, &a.Events)
			delete(rawMsg, key)
		case "solutions":
			err = unpopulate(val, &a.Solutions)
			delete(rawMsg, key)
		case "startTime":
			var aux timeRFC3339
			err = unpopulate(val, &aux)
			a.StartTime = (*time.Time)(&aux)
			delete(rawMsg, key)
		}
		if err != nil {
			return err
		}
	}
	return nil
}

// Address information for domain registration.
type Address struct {
	// REQUIRED; First line of an Address.
	Address1 *string `json:"address1,omitempty"`

	// REQUIRED; The city for the address.
	City *string `json:"city,omitempty"`

	// REQUIRED; The country for the address.
	Country *string `json:"country,omitempty"`

	// REQUIRED; The postal code for the address.
	PostalCode *string `json:"postalCode,omitempty"`

	// REQUIRED; The state or province for the address.
	State *string `json:"state,omitempty"`

	// The second line of the Address. Optional.
	Address2 *string `json:"address2,omitempty"`
}

// AddressResponse - Describes main public IP address and any extra virtual IPs.
type AddressResponse struct {
	ProxyOnlyResource
	// AddressResponse resource specific properties
	Properties *AddressResponseProperties `json:"properties,omitempty"`
}

// MarshalJSON implements the json.Marshaller interface for type AddressResponse.
func (a AddressResponse) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	a.ProxyOnlyResource.marshalInternal(objectMap)
	populate(objectMap, "properties", a.Properties)
	return json.Marshal(objectMap)
}

// AddressResponseProperties - AddressResponse resource specific properties
type AddressResponseProperties struct {
	// Virtual Network internal IP address of the App Service Environment if it is in internal load-balancing mode.
	InternalIPAddress *string `json:"internalIpAddress,omitempty"`

	// IP addresses appearing on outbound connections.
	OutboundIPAddresses []*string `json:"outboundIpAddresses,omitempty"`

	// Main public virtual IP.
	ServiceIPAddress *string `json:"serviceIpAddress,omitempty"`

	// Additional virtual IPs.
	VipMappings []*VirtualIPMapping `json:"vipMappings,omitempty"`
}

// MarshalJSON implements the json.Marshaller interface for type AddressResponseProperties.
func (a AddressResponseProperties) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "internalIpAddress", a.InternalIPAddress)
	populate(objectMap, "outboundIpAddresses", a.OutboundIPAddresses)
	populate(objectMap, "serviceIpAddress", a.ServiceIPAddress)
	populate(objectMap, "vipMappings", a.VipMappings)
	return json.Marshal(objectMap)
}

// AllowedAudiencesValidation - The configuration settings of the Allowed Audiences validation flow.
type AllowedAudiencesValidation struct {
	// The configuration settings of the allowed list of audiences from which to validate the JWT token.
	AllowedAudiences []*string `json:"allowedAudiences,omitempty"`
}

// MarshalJSON implements the json.Marshaller interface for type AllowedAudiencesValidation.
func (a AllowedAudiencesValidation) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "allowedAudiences", a.AllowedAudiences)
	return json.Marshal(objectMap)
}

// AllowedPrincipals - The configuration settings of the Azure Active Directory allowed principals.
type AllowedPrincipals struct {
	// The list of the allowed groups.
	Groups []*string `json:"groups,omitempty"`

	// The list of the allowed identities.
	Identities []*string `json:"identities,omitempty"`
}

// MarshalJSON implements the json.Marshaller interface for type AllowedPrincipals.
func (a AllowedPrincipals) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "groups", a.Groups)
	populate(objectMap, "identities", a.Identities)
	return json.Marshal(objectMap)
}

// AnalysisData - Class Representing Detector Evidence used for analysis
type AnalysisData struct {
	// Additional Source Data
	Data [][]*NameValuePair `json:"data,omitempty"`

	// Detector Definition
	DetectorDefinition *DetectorDefinition `json:"detectorDefinition,omitempty"`

	// Detector Meta Data
	DetectorMetaData *ResponseMetaData `json:"detectorMetaData,omitempty"`

	// Source Metrics
	Metrics []*DiagnosticMetricSet `json:"metrics,omitempty"`

	// Name of the Detector
	Source *string `json:"source,omitempty"`
}

// MarshalJSON implements the json.Marshaller interface for type AnalysisData.
func (a AnalysisData) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "data", a.Data)
	populate(objectMap, "detectorDefinition", a.DetectorDefinition)
	populate(objectMap, "detectorMetaData", a.DetectorMetaData)
	populate(objectMap, "metrics", a.Metrics)
	populate(objectMap, "source", a.Source)
	return json.Marshal(objectMap)
}

// AnalysisDefinition - Definition of Analysis
type AnalysisDefinition struct {
	ProxyOnlyResource
	// AnalysisDefinition resource specific properties
	Properties *AnalysisDefinitionProperties `json:"properties,omitempty"`
}

// MarshalJSON implements the json.Marshaller interface for type AnalysisDefinition.
func (a AnalysisDefinition) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	a.ProxyOnlyResource.marshalInternal(objectMap)
	populate(objectMap, "properties", a.Properties)
	return json.Marshal(objectMap)
}

// AnalysisDefinitionProperties - AnalysisDefinition resource specific properties
type AnalysisDefinitionProperties struct {
	// READ-ONLY; Description of the Analysis
	Description *string `json:"description,omitempty" azure:"ro"`
}

// AppInsightsWebAppStackSettings - App Insights Web App stack settings.
type AppInsightsWebAppStackSettings struct {
	// READ-ONLY; true if Application Insights is disabled by default for the stack; otherwise, false.
	IsDefaultOff *bool `json:"isDefaultOff,omitempty" azure:"ro"`

	// READ-ONLY; true if remote Application Insights is supported for the stack; otherwise, false.
	IsSupported *bool `json:"isSupported,omitempty" azure:"ro"`
}

type AppLogsConfiguration struct {
	Destination               *string                    `json:"destination,omitempty"`
	LogAnalyticsConfiguration *LogAnalyticsConfiguration `json:"logAnalyticsConfiguration,omitempty"`
}

// AppRegistration - The configuration settings of the app registration for providers that have app ids and app secrets
type AppRegistration struct {
	// The App ID of the app used for login.
	AppID *string `json:"appId,omitempty"`

	// The app setting name that contains the app secret.
	AppSecretSettingName *string `json:"appSecretSettingName,omitempty"`
}

// AppServiceCertificate - Key Vault container for a certificate that is purchased through Azure.
type AppServiceCertificate struct {
	// Key Vault resource Id.
	KeyVaultID *string `json:"keyVaultId,omitempty"`

	// Key Vault secret name.
	KeyVaultSecretName *string `json:"keyVaultSecretName,omitempty"`

	// READ-ONLY; Status of the Key Vault secret.
	ProvisioningState *KeyVaultSecretStatus `json:"provisioningState,omitempty" azure:"ro"`
}

// AppServiceCertificateCollection - Collection of certificate order certificates.
type AppServiceCertificateCollection struct {
	// REQUIRED; Collection of resources.
	Value []*AppServiceCertificateResource `json:"value,omitempty"`

	// READ-ONLY; Link to next page of resources.
	NextLink *string `json:"nextLink,omitempty" azure:"ro"`
}

// MarshalJSON implements the json.Marshaller interface for type AppServiceCertificateCollection.
func (a AppServiceCertificateCollection) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "nextLink", a.NextLink)
	populate(objectMap, "value", a.Value)
	return json.Marshal(objectMap)
}

// AppServiceCertificateOrder - SSL certificate purchase order.
type AppServiceCertificateOrder struct {
	Resource
	// AppServiceCertificateOrder resource specific properties
	Properties *AppServiceCertificateOrderProperties `json:"properties,omitempty"`
}

// MarshalJSON implements the json.Marshaller interface for type AppServiceCertificateOrder.
func (a AppServiceCertificateOrder) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	a.Resource.marshalInternal(objectMap)
	populate(objectMap, "properties", a.Properties)
	return json.Marshal(objectMap)
}

// AppServiceCertificateOrderCollection - Collection of certificate orders.
type AppServiceCertificateOrderCollection struct {
	// REQUIRED; Collection of resources.
	Value []*AppServiceCertificateOrder `json:"value,omitempty"`

	// READ-ONLY; Link to next page of resources.
	NextLink *string `json:"nextLink,omitempty" azure:"ro"`
}

// MarshalJSON implements the json.Marshaller interface for type AppServiceCertificateOrderCollection.
func (a AppServiceCertificateOrderCollection) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "nextLink", a.NextLink)
	populate(objectMap, "value", a.Value)
	return json.Marshal(objectMap)
}

// AppServiceCertificateOrderPatchResource - ARM resource for a certificate order that is purchased through Azure.
type AppServiceCertificateOrderPatchResource struct {
	ProxyOnlyResource
	// AppServiceCertificateOrderPatchResource resource specific properties
	Properties *AppServiceCertificateOrderPatchResourceProperties `json:"properties,omitempty"`
}

// MarshalJSON implements the json.Marshaller interface for type AppServiceCertificateOrderPatchResource.
func (a AppServiceCertificateOrderPatchResource) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	a.ProxyOnlyResource.marshalInternal(objectMap)
	populate(objectMap, "properties", a.Properties)
	return json.Marshal(objectMap)
}

// AppServiceCertificateOrderPatchResourceProperties - AppServiceCertificateOrderPatchResource resource specific properties
type AppServiceCertificateOrderPatchResourceProperties struct {
	// REQUIRED; Certificate product type.
	ProductType *CertificateProductType `json:"productType,omitempty"`

	// true if the certificate should be automatically renewed when it expires; otherwise, false.
	AutoRenew *bool `json:"autoRenew,omitempty"`

	// State of the Key Vault secret.
	Certificates map[string]*AppServiceCertificate `json:"certificates,omitempty"`

	// Last CSR that was created for this order.
	Csr *string `json:"csr,omitempty"`

	// Certificate distinguished name.
	DistinguishedName *string `json:"distinguishedName,omitempty"`

	// Certificate key size.
	KeySize *int32 `json:"keySize,omitempty"`

	// Duration in years (must be 1).
	ValidityInYears *int32 `json:"validityInYears,omitempty"`

	// READ-ONLY; Reasons why App Service Certificate is not renewable at the current moment.
	AppServiceCertificateNotRenewableReasons []*AppServiceCertificateOrderPatchResourcePropertiesAppServiceCertificateNotRenewableReasonsItem `json:"appServiceCertificateNotRenewableReasons,omitempty" azure:"ro"`

	// READ-ONLY; Contact info
	Contact *CertificateOrderContact `json:"contact,omitempty" azure:"ro"`

	// READ-ONLY; Domain verification token.
	DomainVerificationToken *string `json:"domainVerificationToken,omitempty" azure:"ro"`

	// READ-ONLY; Certificate expiration time.
	ExpirationTime *time.Time `json:"expirationTime,omitempty" azure:"ro"`

	// READ-ONLY; Intermediate certificate.
	Intermediate *CertificateDetails `json:"intermediate,omitempty" azure:"ro"`

	// READ-ONLY; true if private key is external; otherwise, false.
	IsPrivateKeyExternal *bool `json:"isPrivateKeyExternal,omitempty" azure:"ro"`

	// READ-ONLY; Certificate last issuance time.
	LastCertificateIssuanceTime *time.Time `json:"lastCertificateIssuanceTime,omitempty" azure:"ro"`

	// READ-ONLY; Time stamp when the certificate would be auto renewed next
	NextAutoRenewalTimeStamp *time.Time `json:"nextAutoRenewalTimeStamp,omitempty" azure:"ro"`

	// READ-ONLY; Status of certificate order.
	ProvisioningState *ProvisioningState `json:"provisioningState,omitempty" azure:"ro"`

	// READ-ONLY; Root certificate.
	Root *CertificateDetails `json:"root,omitempty" azure:"ro"`

	// READ-ONLY; Current serial number of the certificate.
	SerialNumber *string `json:"serialNumber,omitempty" azure:"ro"`

	// READ-ONLY; Signed certificate.
	SignedCertificate *CertificateDetails `json:"signedCertificate,omitempty" azure:"ro"`

	// READ-ONLY; Current order status.
	Status *CertificateOrderStatus `json:"status,omitempty" azure:"ro"`
}

// MarshalJSON implements the json.Marshaller interface for type AppServiceCertificateOrderPatchResourceProperties.
func (a AppServiceCertificateOrderPatchResourceProperties) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "appServiceCertificateNotRenewableReasons", a.AppServiceCertificateNotRenewableReasons)
	populate(objectMap, "autoRenew", a.AutoRenew)
	populate(objectMap, "certificates", a.Certificates)
	populate(objectMap, "contact", a.Contact)
	populate(objectMap, "csr", a.Csr)
	populate(objectMap, "distinguishedName", a.DistinguishedName)
	populate(objectMap, "domainVerificationToken", a.DomainVerificationToken)
	populate(objectMap, "expirationTime", (*timeRFC3339)(a.ExpirationTime))
	populate(objectMap, "intermediate", a.Intermediate)
	populate(objectMap, "isPrivateKeyExternal", a.IsPrivateKeyExternal)
	populate(objectMap, "keySize", a.KeySize)
	populate(objectMap, "lastCertificateIssuanceTime", (*timeRFC3339)(a.LastCertificateIssuanceTime))
	populate(objectMap, "nextAutoRenewalTimeStamp", (*timeRFC3339)(a.NextAutoRenewalTimeStamp))
	populate(objectMap, "productType", a.ProductType)
	populate(objectMap, "provisioningState", a.ProvisioningState)
	populate(objectMap, "root", a.Root)
	populate(objectMap, "serialNumber", a.SerialNumber)
	populate(objectMap, "signedCertificate", a.SignedCertificate)
	populate(objectMap, "status", a.Status)
	populate(objectMap, "validityInYears", a.ValidityInYears)
	return json.Marshal(objectMap)
}

// UnmarshalJSON implements the json.Unmarshaller interface for type AppServiceCertificateOrderPatchResourceProperties.
func (a *AppServiceCertificateOrderPatchResourceProperties) UnmarshalJSON(data []byte) error {
	var rawMsg map[string]json.RawMessage
	if err := json.Unmarshal(data, &rawMsg); err != nil {
		return err
	}
	for key, val := range rawMsg {
		var err error
		switch key {
		case "appServiceCertificateNotRenewableReasons":
			err = unpopulate(val, &a.AppServiceCertificateNotRenewableReasons)
			delete(rawMsg, key)
		case "autoRenew":
			err = unpopulate(val, &a.AutoRenew)
			delete(rawMsg, key)
		case "certificates":
			err = unpopulate(val, &a.Certificates)
			delete(rawMsg, key)
		case "contact":
			err = unpopulate(val, &a.Contact)
			delete(rawMsg, key)
		case "csr":
			err = unpopulate(val, &a.Csr)
			delete(rawMsg, key)
		case "distinguishedName":
			err = unpopulate(val, &a.DistinguishedName)
			delete(rawMsg, key)
		case "domainVerificationToken":
			err = unpopulate(val, &a.DomainVerificationToken)
			delete(rawMsg, key)
		case "expirationTime":
			var aux timeRFC3339
			err = unpopulate(val, &aux)
			a.ExpirationTime = (*time.Time)(&aux)
			delete(rawMsg, key)
		case "intermediate":
			err = unpopulate(val, &a.Intermediate)
			delete(rawMsg, key)
		case "isPrivateKeyExternal":
			err = unpopulate(val, &a.IsPrivateKeyExternal)
			delete(rawMsg, key)
		case "keySize":
			err = unpopulate(val, &a.KeySize)
			delete(rawMsg, key)
		case "lastCertificateIssuanceTime":
			var aux timeRFC3339
			err = unpopulate(val, &aux)
			a.LastCertificateIssuanceTime = (*time.Time)(&aux)
			delete(rawMsg, key)
		case "nextAutoRenewalTimeStamp":
			var aux timeRFC3339
			err = unpopulate(val, &aux)
			a.NextAutoRenewalTimeStamp = (*time.Time)(&aux)
			delete(rawMsg, key)
		case "productType":
			err = unpopulate(val, &a.ProductType)
			delete(rawMsg, key)
		case "provisioningState":
			err = unpopulate(val, &a.ProvisioningState)
			delete(rawMsg, key)
		case "root":
			err = unpopulate(val, &a.Root)
			delete(rawMsg, key)
		case "serialNumber":
			err = unpopulate(val, &a.SerialNumber)
			delete(rawMsg, key)
		case "signedCertificate":
			err = unpopulate(val, &a.SignedCertificate)
			delete(rawMsg, key)
		case "status":
			err = unpopulate(val, &a.Status)
			delete(rawMsg, key)
		case "validityInYears":
			err = unpopulate(val, &a.ValidityInYears)
			delete(rawMsg, key)
		}
		if err != nil {
			return err
		}
	}
	return nil
}

// AppServiceCertificateOrderProperties - AppServiceCertificateOrder resource specific properties
type AppServiceCertificateOrderProperties struct {
	// REQUIRED; Certificate product type.
	ProductType *CertificateProductType `json:"productType,omitempty"`

	// true if the certificate should be automatically renewed when it expires; otherwise, false.
	AutoRenew *bool `json:"autoRenew,omitempty"`

	// State of the Key Vault secret.
	Certificates map[string]*AppServiceCertificate `json:"certificates,omitempty"`

	// Last CSR that was created for this order.
	Csr *string `json:"csr,omitempty"`

	// Certificate distinguished name.
	DistinguishedName *string `json:"distinguishedName,omitempty"`

	// Certificate key size.
	KeySize *int32 `json:"keySize,omitempty"`

	// Duration in years (must be 1).
	ValidityInYears *int32 `json:"validityInYears,omitempty"`

	// READ-ONLY; Reasons why App Service Certificate is not renewable at the current moment.
	AppServiceCertificateNotRenewableReasons []*AppServiceCertificateOrderPropertiesAppServiceCertificateNotRenewableReasonsItem `json:"appServiceCertificateNotRenewableReasons,omitempty" azure:"ro"`

	// READ-ONLY; Contact info
	Contact *CertificateOrderContact `json:"contact,omitempty" azure:"ro"`

	// READ-ONLY; Domain verification token.
	DomainVerificationToken *string `json:"domainVerificationToken,omitempty" azure:"ro"`

	// READ-ONLY; Certificate expiration time.
	ExpirationTime *time.Time `json:"expirationTime,omitempty" azure:"ro"`

	// READ-ONLY; Intermediate certificate.
	Intermediate *CertificateDetails `json:"intermediate,omitempty" azure:"ro"`

	// READ-ONLY; true if private key is external; otherwise, false.
	IsPrivateKeyExternal *bool `json:"isPrivateKeyExternal,omitempty" azure:"ro"`

	// READ-ONLY; Certificate last issuance time.
	LastCertificateIssuanceTime *time.Time `json:"lastCertificateIssuanceTime,omitempty" azure:"ro"`

	// READ-ONLY; Time stamp when the certificate would be auto renewed next
	NextAutoRenewalTimeStamp *time.Time `json:"nextAutoRenewalTimeStamp,omitempty" azure:"ro"`

	// READ-ONLY; Status of certificate order.
	ProvisioningState *ProvisioningState `json:"provisioningState,omitempty" azure:"ro"`

	// READ-ONLY; Root certificate.
	Root *CertificateDetails `json:"root,omitempty" azure:"ro"`

	// READ-ONLY; Current serial number of the certificate.
	SerialNumber *string `json:"serialNumber,omitempty" azure:"ro"`

	// READ-ONLY; Signed certificate.
	SignedCertificate *CertificateDetails `json:"signedCertificate,omitempty" azure:"ro"`

	// READ-ONLY; Current order status.
	Status *CertificateOrderStatus `json:"status,omitempty" azure:"ro"`
}

// MarshalJSON implements the json.Marshaller interface for type AppServiceCertificateOrderProperties.
func (a AppServiceCertificateOrderProperties) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "appServiceCertificateNotRenewableReasons", a.AppServiceCertificateNotRenewableReasons)
	populate(objectMap, "autoRenew", a.AutoRenew)
	populate(objectMap, "certificates", a.Certificates)
	populate(objectMap, "contact", a.Contact)
	populate(objectMap, "csr", a.Csr)
	populate(objectMap, "distinguishedName", a.DistinguishedName)
	populate(objectMap, "domainVerificationToken", a.DomainVerificationToken)
	populate(objectMap, "expirationTime", (*timeRFC3339)(a.ExpirationTime))
	populate(objectMap, "intermediate", a.Intermediate)
	populate(objectMap, "isPrivateKeyExternal", a.IsPrivateKeyExternal)
	populate(objectMap, "keySize", a.KeySize)
	populate(objectMap, "lastCertificateIssuanceTime", (*timeRFC3339)(a.LastCertificateIssuanceTime))
	populate(objectMap, "nextAutoRenewalTimeStamp", (*timeRFC3339)(a.NextAutoRenewalTimeStamp))
	populate(objectMap, "productType", a.ProductType)
	populate(objectMap, "provisioningState", a.ProvisioningState)
	populate(objectMap, "root", a.Root)
	populate(objectMap, "serialNumber", a.SerialNumber)
	populate(objectMap, "signedCertificate", a.SignedCertificate)
	populate(objectMap, "status", a.Status)
	populate(objectMap, "validityInYears", a.ValidityInYears)
	return json.Marshal(objectMap)
}

// UnmarshalJSON implements the json.Unmarshaller interface for type AppServiceCertificateOrderProperties.
func (a *AppServiceCertificateOrderProperties) UnmarshalJSON(data []byte) error {
	var rawMsg map[string]json.RawMessage
	if err := json.Unmarshal(data, &rawMsg); err != nil {
		return err
	}
	for key, val := range rawMsg {
		var err error
		switch key {
		case "appServiceCertificateNotRenewableReasons":
			err = unpopulate(val, &a.AppServiceCertificateNotRenewableReasons)
			delete(rawMsg, key)
		case "autoRenew":
			err = unpopulate(val, &a.AutoRenew)
			delete(rawMsg, key)
		case "certificates":
			err = unpopulate(val, &a.Certificates)
			delete(rawMsg, key)
		case "contact":
			err = unpopulate(val, &a.Contact)
			delete(rawMsg, key)
		case "csr":
			err = unpopulate(val, &a.Csr)
			delete(rawMsg, key)
		case "distinguishedName":
			err = unpopulate(val, &a.DistinguishedName)
			delete(rawMsg, key)
		case "domainVerificationToken":
			err = unpopulate(val, &a.DomainVerificationToken)
			delete(rawMsg, key)
		case "expirationTime":
			var aux timeRFC3339
			err = unpopulate(val, &aux)
			a.ExpirationTime = (*time.Time)(&aux)
			delete(rawMsg, key)
		case "intermediate":
			err = unpopulate(val, &a.Intermediate)
			delete(rawMsg, key)
		case "isPrivateKeyExternal":
			err = unpopulate(val, &a.IsPrivateKeyExternal)
			delete(rawMsg, key)
		case "keySize":
			err = unpopulate(val, &a.KeySize)
			delete(rawMsg, key)
		case "lastCertificateIssuanceTime":
			var aux timeRFC3339
			err = unpopulate(val, &aux)
			a.LastCertificateIssuanceTime = (*time.Time)(&aux)
			delete(rawMsg, key)
		case "nextAutoRenewalTimeStamp":
			var aux timeRFC3339
			err = unpopulate(val, &aux)
			a.NextAutoRenewalTimeStamp = (*time.Time)(&aux)
			delete(rawMsg, key)
		case "productType":
			err = unpopulate(val, &a.ProductType)
			delete(rawMsg, key)
		case "provisioningState":
			err = unpopulate(val, &a.ProvisioningState)
			delete(rawMsg, key)
		case "root":
			err = unpopulate(val, &a.Root)
			delete(rawMsg, key)
		case "serialNumber":
			err = unpopulate(val, &a.SerialNumber)
			delete(rawMsg, key)
		case "signedCertificate":
			err = unpopulate(val, &a.SignedCertificate)
			delete(rawMsg, key)
		case "status":
			err = unpopulate(val, &a.Status)
			delete(rawMsg, key)
		case "validityInYears":
			err = unpopulate(val, &a.ValidityInYears)
			delete(rawMsg, key)
		}
		if err != nil {
			return err
		}
	}
	return nil
}

// AppServiceCertificateOrdersBeginCreateOrUpdateCertificateOptions contains the optional parameters for the AppServiceCertificateOrders.BeginCreateOrUpdateCertificate
// method.
type AppServiceCertificateOrdersBeginCreateOrUpdateCertificateOptions struct {
	// placeholder for future optional parameters
}

// AppServiceCertificateOrdersBeginCreateOrUpdateOptions contains the optional parameters for the AppServiceCertificateOrders.BeginCreateOrUpdate method.
type AppServiceCertificateOrdersBeginCreateOrUpdateOptions struct {
	// placeholder for future optional parameters
}

// AppServiceCertificateOrdersDeleteCertificateOptions contains the optional parameters for the AppServiceCertificateOrders.DeleteCertificate method.
type AppServiceCertificateOrdersDeleteCertificateOptions struct {
	// placeholder for future optional parameters
}

// AppServiceCertificateOrdersDeleteOptions contains the optional parameters for the AppServiceCertificateOrders.Delete method.
type AppServiceCertificateOrdersDeleteOptions struct {
	// placeholder for future optional parameters
}

// AppServiceCertificateOrdersGetCertificateOptions contains the optional parameters for the AppServiceCertificateOrders.GetCertificate method.
type AppServiceCertificateOrdersGetCertificateOptions struct {
	// placeholder for future optional parameters
}

// AppServiceCertificateOrdersGetOptions contains the optional parameters for the AppServiceCertificateOrders.Get method.
type AppServiceCertificateOrdersGetOptions struct {
	// placeholder for future optional parameters
}

// AppServiceCertificateOrdersListByResourceGroupOptions contains the optional parameters for the AppServiceCertificateOrders.ListByResourceGroup method.
type AppServiceCertificateOrdersListByResourceGroupOptions struct {
	// placeholder for future optional parameters
}

// AppServiceCertificateOrdersListCertificatesOptions contains the optional parameters for the AppServiceCertificateOrders.ListCertificates method.
type AppServiceCertificateOrdersListCertificatesOptions struct {
	// placeholder for future optional parameters
}

// AppServiceCertificateOrdersListOptions contains the optional parameters for the AppServiceCertificateOrders.List method.
type AppServiceCertificateOrdersListOptions struct {
	// placeholder for future optional parameters
}

// AppServiceCertificateOrdersReissueOptions contains the optional parameters for the AppServiceCertificateOrders.Reissue method.
type AppServiceCertificateOrdersReissueOptions struct {
	// placeholder for future optional parameters
}

// AppServiceCertificateOrdersRenewOptions contains the optional parameters for the AppServiceCertificateOrders.Renew method.
type AppServiceCertificateOrdersRenewOptions struct {
	// placeholder for future optional parameters
}

// AppServiceCertificateOrdersResendEmailOptions contains the optional parameters for the AppServiceCertificateOrders.ResendEmail method.
type AppServiceCertificateOrdersResendEmailOptions struct {
	// placeholder for future optional parameters
}

// AppServiceCertificateOrdersResendRequestEmailsOptions contains the optional parameters for the AppServiceCertificateOrders.ResendRequestEmails method.
type AppServiceCertificateOrdersResendRequestEmailsOptions struct {
	// placeholder for future optional parameters
}

// AppServiceCertificateOrdersRetrieveCertificateActionsOptions contains the optional parameters for the AppServiceCertificateOrders.RetrieveCertificateActions
// method.
type AppServiceCertificateOrdersRetrieveCertificateActionsOptions struct {
	// placeholder for future optional parameters
}

// AppServiceCertificateOrdersRetrieveCertificateEmailHistoryOptions contains the optional parameters for the AppServiceCertificateOrders.RetrieveCertificateEmailHistory
// method.
type AppServiceCertificateOrdersRetrieveCertificateEmailHistoryOptions struct {
	// placeholder for future optional parameters
}

// AppServiceCertificateOrdersRetrieveSiteSealOptions contains the optional parameters for the AppServiceCertificateOrders.RetrieveSiteSeal method.
type AppServiceCertificateOrdersRetrieveSiteSealOptions struct {
	// placeholder for future optional parameters
}

// AppServiceCertificateOrdersUpdateCertificateOptions contains the optional parameters for the AppServiceCertificateOrders.UpdateCertificate method.
type AppServiceCertificateOrdersUpdateCertificateOptions struct {
	// placeholder for future optional parameters
}

// AppServiceCertificateOrdersUpdateOptions contains the optional parameters for the AppServiceCertificateOrders.Update method.
type AppServiceCertificateOrdersUpdateOptions struct {
	// placeholder for future optional parameters
}

// AppServiceCertificateOrdersValidatePurchaseInformationOptions contains the optional parameters for the AppServiceCertificateOrders.ValidatePurchaseInformation
// method.
type AppServiceCertificateOrdersValidatePurchaseInformationOptions struct {
	// placeholder for future optional parameters
}

// AppServiceCertificateOrdersVerifyDomainOwnershipOptions contains the optional parameters for the AppServiceCertificateOrders.VerifyDomainOwnership method.
type AppServiceCertificateOrdersVerifyDomainOwnershipOptions struct {
	// placeholder for future optional parameters
}

// AppServiceCertificatePatchResource - Key Vault container ARM resource for a certificate that is purchased through Azure.
type AppServiceCertificatePatchResource struct {
	ProxyOnlyResource
	// Core resource properties
	Properties *AppServiceCertificate `json:"properties,omitempty"`
}

// MarshalJSON implements the json.Marshaller interface for type AppServiceCertificatePatchResource.
func (a AppServiceCertificatePatchResource) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	a.ProxyOnlyResource.marshalInternal(objectMap)
	populate(objectMap, "properties", a.Properties)
	return json.Marshal(objectMap)
}

// AppServiceCertificateResource - Key Vault container ARM resource for a certificate that is purchased through Azure.
type AppServiceCertificateResource struct {
	Resource
	// Core resource properties
	Properties *AppServiceCertificate `json:"properties,omitempty"`
}

// MarshalJSON implements the json.Marshaller interface for type AppServiceCertificateResource.
func (a AppServiceCertificateResource) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	a.Resource.marshalInternal(objectMap)
	populate(objectMap, "properties", a.Properties)
	return json.Marshal(objectMap)
}

// AppServiceEnvironment - Description of an App Service Environment.
type AppServiceEnvironment struct {
	// REQUIRED; Description of the Virtual Network.
	VirtualNetwork *VirtualNetworkProfile `json:"virtualNetwork,omitempty"`

	// Custom settings for changing the behavior of the App Service Environment.
	ClusterSettings []*NameValuePair `json:"clusterSettings,omitempty"`

	// DNS suffix of the App Service Environment.
	DNSSuffix *string `json:"dnsSuffix,omitempty"`

	// Dedicated Host Count
	DedicatedHostCount *int32 `json:"dedicatedHostCount,omitempty"`

	// Scale factor for front-ends.
	FrontEndScaleFactor *int32 `json:"frontEndScaleFactor,omitempty"`

	// Specifies which endpoints to serve internally in the Virtual Network for the App Service Environment.
	InternalLoadBalancingMode *LoadBalancingMode `json:"internalLoadBalancingMode,omitempty"`

	// Number of IP SSL addresses reserved for the App Service Environment.
	IpsslAddressCount *int32 `json:"ipsslAddressCount,omitempty"`

	// Front-end VM size, e.g. "Medium", "Large".
	MultiSize *string `json:"multiSize,omitempty"`

	// User added ip ranges to whitelist on ASE db
	UserWhitelistedIPRanges []*string `json:"userWhitelistedIpRanges,omitempty"`

	// Whether or not this App Service Environment is zone-redundant.
	ZoneRedundant *bool `json:"zoneRedundant,omitempty"`

	// READ-ONLY; Flag that displays whether an ASE has linux workers or not
	HasLinuxWorkers *bool `json:"hasLinuxWorkers,omitempty" azure:"ro"`

	// READ-ONLY; Maximum number of VMs in the App Service Environment.
	MaximumNumberOfMachines *int32 `json:"maximumNumberOfMachines,omitempty" azure:"ro"`

	// READ-ONLY; Number of front-end instances.
	MultiRoleCount *int32 `json:"multiRoleCount,omitempty" azure:"ro"`

	// READ-ONLY; Provisioning state of the App Service Environment.
	ProvisioningState *ProvisioningState `json:"provisioningState,omitempty" azure:"ro"`

	// READ-ONLY; Current status of the App Service Environment.
	Status *HostingEnvironmentStatus `json:"status,omitempty" azure:"ro"`

	// READ-ONLY; true if the App Service Environment is suspended; otherwise, false. The environment can be suspended, e.g. when the management endpoint is
	// no longer available (most likely because NSG blocked the
	// incoming traffic).
	Suspended *bool `json:"suspended,omitempty" azure:"ro"`
}

// MarshalJSON implements the json.Marshaller interface for type AppServiceEnvironment.
func (a AppServiceEnvironment) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "clusterSettings", a.ClusterSettings)
	populate(objectMap, "dnsSuffix", a.DNSSuffix)
	populate(objectMap, "dedicatedHostCount", a.DedicatedHostCount)
	populate(objectMap, "frontEndScaleFactor", a.FrontEndScaleFactor)
	populate(objectMap, "hasLinuxWorkers", a.HasLinuxWorkers)
	populate(objectMap, "internalLoadBalancingMode", a.InternalLoadBalancingMode)
	populate(objectMap, "ipsslAddressCount", a.IpsslAddressCount)
	populate(objectMap, "maximumNumberOfMachines", a.MaximumNumberOfMachines)
	populate(objectMap, "multiRoleCount", a.MultiRoleCount)
	populate(objectMap, "multiSize", a.MultiSize)
	populate(objectMap, "provisioningState", a.ProvisioningState)
	populate(objectMap, "status", a.Status)
	populate(objectMap, "suspended", a.Suspended)
	populate(objectMap, "userWhitelistedIpRanges", a.UserWhitelistedIPRanges)
	populate(objectMap, "virtualNetwork", a.VirtualNetwork)
	populate(objectMap, "zoneRedundant", a.ZoneRedundant)
	return json.Marshal(objectMap)
}

// AppServiceEnvironmentCollection - Collection of App Service Environments.
type AppServiceEnvironmentCollection struct {
	// REQUIRED; Collection of resources.
	Value []*AppServiceEnvironmentResource `json:"value,omitempty"`

	// READ-ONLY; Link to next page of resources.
	NextLink *string `json:"nextLink,omitempty" azure:"ro"`
}

// MarshalJSON implements the json.Marshaller interface for type AppServiceEnvironmentCollection.
func (a AppServiceEnvironmentCollection) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "nextLink", a.NextLink)
	populate(objectMap, "value", a.Value)
	return json.Marshal(objectMap)
}

// AppServiceEnvironmentPatchResource - ARM resource for a app service environment.
type AppServiceEnvironmentPatchResource struct {
	ProxyOnlyResource
	// Core resource properties
	Properties *AppServiceEnvironment `json:"properties,omitempty"`
}

// MarshalJSON implements the json.Marshaller interface for type AppServiceEnvironmentPatchResource.
func (a AppServiceEnvironmentPatchResource) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	a.ProxyOnlyResource.marshalInternal(objectMap)
	populate(objectMap, "properties", a.Properties)
	return json.Marshal(objectMap)
}

// AppServiceEnvironmentResource - App Service Environment ARM resource.
type AppServiceEnvironmentResource struct {
	Resource
	// Core resource properties
	Properties *AppServiceEnvironment `json:"properties,omitempty"`
}

// MarshalJSON implements the json.Marshaller interface for type AppServiceEnvironmentResource.
func (a AppServiceEnvironmentResource) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	a.Resource.marshalInternal(objectMap)
	populate(objectMap, "properties", a.Properties)
	return json.Marshal(objectMap)
}

// AppServiceEnvironmentsBeginApproveOrRejectPrivateEndpointConnectionOptions contains the optional parameters for the AppServiceEnvironments.BeginApproveOrRejectPrivateEndpointConnection
// method.
type AppServiceEnvironmentsBeginApproveOrRejectPrivateEndpointConnectionOptions struct {
	// placeholder for future optional parameters
}

// AppServiceEnvironmentsBeginChangeVnetOptions contains the optional parameters for the AppServiceEnvironments.BeginChangeVnet method.
type AppServiceEnvironmentsBeginChangeVnetOptions struct {
	// placeholder for future optional parameters
}

// AppServiceEnvironmentsBeginCreateOrUpdateMultiRolePoolOptions contains the optional parameters for the AppServiceEnvironments.BeginCreateOrUpdateMultiRolePool
// method.
type AppServiceEnvironmentsBeginCreateOrUpdateMultiRolePoolOptions struct {
	// placeholder for future optional parameters
}

// AppServiceEnvironmentsBeginCreateOrUpdateOptions contains the optional parameters for the AppServiceEnvironments.BeginCreateOrUpdate method.
type AppServiceEnvironmentsBeginCreateOrUpdateOptions struct {
	// placeholder for future optional parameters
}

// AppServiceEnvironmentsBeginCreateOrUpdateWorkerPoolOptions contains the optional parameters for the AppServiceEnvironments.BeginCreateOrUpdateWorkerPool
// method.
type AppServiceEnvironmentsBeginCreateOrUpdateWorkerPoolOptions struct {
	// placeholder for future optional parameters
}

// AppServiceEnvironmentsBeginDeleteOptions contains the optional parameters for the AppServiceEnvironments.BeginDelete method.
type AppServiceEnvironmentsBeginDeleteOptions struct {
	// Specify <code>true</code> to force the deletion even if the App Service Environment contains resources. The default is <code>false</code>.
	ForceDelete *bool
}

// AppServiceEnvironmentsBeginDeletePrivateEndpointConnectionOptions contains the optional parameters for the AppServiceEnvironments.BeginDeletePrivateEndpointConnection
// method.
type AppServiceEnvironmentsBeginDeletePrivateEndpointConnectionOptions struct {
	// placeholder for future optional parameters
}

// AppServiceEnvironmentsBeginResumeOptions contains the optional parameters for the AppServiceEnvironments.BeginResume method.
type AppServiceEnvironmentsBeginResumeOptions struct {
	// placeholder for future optional parameters
}

// AppServiceEnvironmentsBeginSuspendOptions contains the optional parameters for the AppServiceEnvironments.BeginSuspend method.
type AppServiceEnvironmentsBeginSuspendOptions struct {
	// placeholder for future optional parameters
}

// AppServiceEnvironmentsGetAseV3NetworkingConfigurationOptions contains the optional parameters for the AppServiceEnvironments.GetAseV3NetworkingConfiguration
// method.
type AppServiceEnvironmentsGetAseV3NetworkingConfigurationOptions struct {
	// placeholder for future optional parameters
}

// AppServiceEnvironmentsGetDiagnosticsItemOptions contains the optional parameters for the AppServiceEnvironments.GetDiagnosticsItem method.
type AppServiceEnvironmentsGetDiagnosticsItemOptions struct {
	// placeholder for future optional parameters
}

// AppServiceEnvironmentsGetInboundNetworkDependenciesEndpointsOptions contains the optional parameters for the AppServiceEnvironments.GetInboundNetworkDependenciesEndpoints
// method.
type AppServiceEnvironmentsGetInboundNetworkDependenciesEndpointsOptions struct {
	// placeholder for future optional parameters
}

// AppServiceEnvironmentsGetMultiRolePoolOptions contains the optional parameters for the AppServiceEnvironments.GetMultiRolePool method.
type AppServiceEnvironmentsGetMultiRolePoolOptions struct {
	// placeholder for future optional parameters
}

// AppServiceEnvironmentsGetOptions contains the optional parameters for the AppServiceEnvironments.Get method.
type AppServiceEnvironmentsGetOptions struct {
	// placeholder for future optional parameters
}

// AppServiceEnvironmentsGetOutboundNetworkDependenciesEndpointsOptions contains the optional parameters for the AppServiceEnvironments.GetOutboundNetworkDependenciesEndpoints
// method.
type AppServiceEnvironmentsGetOutboundNetworkDependenciesEndpointsOptions struct {
	// placeholder for future optional parameters
}

// AppServiceEnvironmentsGetPrivateEndpointConnectionListOptions contains the optional parameters for the AppServiceEnvironments.GetPrivateEndpointConnectionList
// method.
type AppServiceEnvironmentsGetPrivateEndpointConnectionListOptions struct {
	// placeholder for future optional parameters
}

// AppServiceEnvironmentsGetPrivateEndpointConnectionOptions contains the optional parameters for the AppServiceEnvironments.GetPrivateEndpointConnection
// method.
type AppServiceEnvironmentsGetPrivateEndpointConnectionOptions struct {
	// placeholder for future optional parameters
}

// AppServiceEnvironmentsGetPrivateLinkResourcesOptions contains the optional parameters for the AppServiceEnvironments.GetPrivateLinkResources method.
type AppServiceEnvironmentsGetPrivateLinkResourcesOptions struct {
	// placeholder for future optional parameters
}

// AppServiceEnvironmentsGetVipInfoOptions contains the optional parameters for the AppServiceEnvironments.GetVipInfo method.
type AppServiceEnvironmentsGetVipInfoOptions struct {
	// placeholder for future optional parameters
}

// AppServiceEnvironmentsGetWorkerPoolOptions contains the optional parameters for the AppServiceEnvironments.GetWorkerPool method.
type AppServiceEnvironmentsGetWorkerPoolOptions struct {
	// placeholder for future optional parameters
}

// AppServiceEnvironmentsListAppServicePlansOptions contains the optional parameters for the AppServiceEnvironments.ListAppServicePlans method.
type AppServiceEnvironmentsListAppServicePlansOptions struct {
	// placeholder for future optional parameters
}

// AppServiceEnvironmentsListByResourceGroupOptions contains the optional parameters for the AppServiceEnvironments.ListByResourceGroup method.
type AppServiceEnvironmentsListByResourceGroupOptions struct {
	// placeholder for future optional parameters
}

// AppServiceEnvironmentsListCapacitiesOptions contains the optional parameters for the AppServiceEnvironments.ListCapacities method.
type AppServiceEnvironmentsListCapacitiesOptions struct {
	// placeholder for future optional parameters
}

// AppServiceEnvironmentsListDiagnosticsOptions contains the optional parameters for the AppServiceEnvironments.ListDiagnostics method.
type AppServiceEnvironmentsListDiagnosticsOptions struct {
	// placeholder for future optional parameters
}

// AppServiceEnvironmentsListMultiRoleMetricDefinitionsOptions contains the optional parameters for the AppServiceEnvironments.ListMultiRoleMetricDefinitions
// method.
type AppServiceEnvironmentsListMultiRoleMetricDefinitionsOptions struct {
	// placeholder for future optional parameters
}

// AppServiceEnvironmentsListMultiRolePoolInstanceMetricDefinitionsOptions contains the optional parameters for the AppServiceEnvironments.ListMultiRolePoolInstanceMetricDefinitions
// method.
type AppServiceEnvironmentsListMultiRolePoolInstanceMetricDefinitionsOptions struct {
	// placeholder for future optional parameters
}

// AppServiceEnvironmentsListMultiRolePoolSKUsOptions contains the optional parameters for the AppServiceEnvironments.ListMultiRolePoolSKUs method.
type AppServiceEnvironmentsListMultiRolePoolSKUsOptions struct {
	// placeholder for future optional parameters
}

// AppServiceEnvironmentsListMultiRolePoolsOptions contains the optional parameters for the AppServiceEnvironments.ListMultiRolePools method.
type AppServiceEnvironmentsListMultiRolePoolsOptions struct {
	// placeholder for future optional parameters
}

// AppServiceEnvironmentsListMultiRoleUsagesOptions contains the optional parameters for the AppServiceEnvironments.ListMultiRoleUsages method.
type AppServiceEnvironmentsListMultiRoleUsagesOptions struct {
	// placeholder for future optional parameters
}

// AppServiceEnvironmentsListOperationsOptions contains the optional parameters for the AppServiceEnvironments.ListOperations method.
type AppServiceEnvironmentsListOperationsOptions struct {
	// placeholder for future optional parameters
}

// AppServiceEnvironmentsListOptions contains the optional parameters for the AppServiceEnvironments.List method.
type AppServiceEnvironmentsListOptions struct {
	// placeholder for future optional parameters
}

// AppServiceEnvironmentsListUsagesOptions contains the optional parameters for the AppServiceEnvironments.ListUsages method.
type AppServiceEnvironmentsListUsagesOptions struct {
	// Return only usages/metrics specified in the filter. Filter conforms to odata syntax. Example: $filter=(name.value eq 'Metric1' or name.value eq 'Metric2')
	// and startTime eq 2014-01-01T00:00:00Z and endTime eq 2014-12-31T23:59:59Z and timeGrain eq duration'[Hour|Minute|Day]'.
	Filter *string
}

// AppServiceEnvironmentsListWebAppsOptions contains the optional parameters for the AppServiceEnvironments.ListWebApps method.
type AppServiceEnvironmentsListWebAppsOptions struct {
	// Comma separated list of app properties to include.
	PropertiesToInclude *string
}

// AppServiceEnvironmentsListWebWorkerMetricDefinitionsOptions contains the optional parameters for the AppServiceEnvironments.ListWebWorkerMetricDefinitions
// method.
type AppServiceEnvironmentsListWebWorkerMetricDefinitionsOptions struct {
	// placeholder for future optional parameters
}

// AppServiceEnvironmentsListWebWorkerUsagesOptions contains the optional parameters for the AppServiceEnvironments.ListWebWorkerUsages method.
type AppServiceEnvironmentsListWebWorkerUsagesOptions struct {
	// placeholder for future optional parameters
}

// AppServiceEnvironmentsListWorkerPoolInstanceMetricDefinitionsOptions contains the optional parameters for the AppServiceEnvironments.ListWorkerPoolInstanceMetricDefinitions
// method.
type AppServiceEnvironmentsListWorkerPoolInstanceMetricDefinitionsOptions struct {
	// placeholder for future optional parameters
}

// AppServiceEnvironmentsListWorkerPoolSKUsOptions contains the optional parameters for the AppServiceEnvironments.ListWorkerPoolSKUs method.
type AppServiceEnvironmentsListWorkerPoolSKUsOptions struct {
	// placeholder for future optional parameters
}

// AppServiceEnvironmentsListWorkerPoolsOptions contains the optional parameters for the AppServiceEnvironments.ListWorkerPools method.
type AppServiceEnvironmentsListWorkerPoolsOptions struct {
	// placeholder for future optional parameters
}

// AppServiceEnvironmentsRebootOptions contains the optional parameters for the AppServiceEnvironments.Reboot method.
type AppServiceEnvironmentsRebootOptions struct {
	// placeholder for future optional parameters
}

// AppServiceEnvironmentsUpdateAseNetworkingConfigurationOptions contains the optional parameters for the AppServiceEnvironments.UpdateAseNetworkingConfiguration
// method.
type AppServiceEnvironmentsUpdateAseNetworkingConfigurationOptions struct {
	// placeholder for future optional parameters
}

// AppServiceEnvironmentsUpdateMultiRolePoolOptions contains the optional parameters for the AppServiceEnvironments.UpdateMultiRolePool method.
type AppServiceEnvironmentsUpdateMultiRolePoolOptions struct {
	// placeholder for future optional parameters
}

// AppServiceEnvironmentsUpdateOptions contains the optional parameters for the AppServiceEnvironments.Update method.
type AppServiceEnvironmentsUpdateOptions struct {
	// placeholder for future optional parameters
}

// AppServiceEnvironmentsUpdateWorkerPoolOptions contains the optional parameters for the AppServiceEnvironments.UpdateWorkerPool method.
type AppServiceEnvironmentsUpdateWorkerPoolOptions struct {
	// placeholder for future optional parameters
}

// AppServicePlan - App Service plan.
type AppServicePlan struct {
	Resource
	// Extended Location.
	ExtendedLocation *ExtendedLocation `json:"extendedLocation,omitempty"`

	// AppServicePlan resource specific properties
	Properties *AppServicePlanProperties `json:"properties,omitempty"`

	// Description of a SKU for a scalable resource.
	SKU *SKUDescription `json:"sku,omitempty"`
}

// MarshalJSON implements the json.Marshaller interface for type AppServicePlan.
func (a AppServicePlan) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	a.Resource.marshalInternal(objectMap)
	populate(objectMap, "extendedLocation", a.ExtendedLocation)
	populate(objectMap, "properties", a.Properties)
	populate(objectMap, "sku", a.SKU)
	return json.Marshal(objectMap)
}

// AppServicePlanCollection - Collection of App Service plans.
type AppServicePlanCollection struct {
	// REQUIRED; Collection of resources.
	Value []*AppServicePlan `json:"value,omitempty"`

	// READ-ONLY; Link to next page of resources.
	NextLink *string `json:"nextLink,omitempty" azure:"ro"`
}

// MarshalJSON implements the json.Marshaller interface for type AppServicePlanCollection.
func (a AppServicePlanCollection) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "nextLink", a.NextLink)
	populate(objectMap, "value", a.Value)
	return json.Marshal(objectMap)
}

// AppServicePlanPatchResource - ARM resource for a app service plan.
type AppServicePlanPatchResource struct {
	ProxyOnlyResource
	// AppServicePlanPatchResource resource specific properties
	Properties *AppServicePlanPatchResourceProperties `json:"properties,omitempty"`
}

// MarshalJSON implements the json.Marshaller interface for type AppServicePlanPatchResource.
func (a AppServicePlanPatchResource) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	a.ProxyOnlyResource.marshalInternal(objectMap)
	populate(objectMap, "properties", a.Properties)
	return json.Marshal(objectMap)
}

// AppServicePlanPatchResourceProperties - AppServicePlanPatchResource resource specific properties
type AppServicePlanPatchResourceProperties struct {
	// ServerFarm supports ElasticScale. Apps in this plan will scale as if the ServerFarm was ElasticPremium sku
	ElasticScaleEnabled *bool `json:"elasticScaleEnabled,omitempty"`

	// The time when the server farm free offer expires.
	FreeOfferExpirationTime *time.Time `json:"freeOfferExpirationTime,omitempty"`

	// Specification for the App Service Environment to use for the App Service plan.
	HostingEnvironmentProfile *HostingEnvironmentProfile `json:"hostingEnvironmentProfile,omitempty"`

	// If Hyper-V container app service plan true, false otherwise.
	HyperV *bool `json:"hyperV,omitempty"`

	// If true, this App Service Plan owns spot instances.
	IsSpot *bool `json:"isSpot,omitempty"`

	// Obsolete: If Hyper-V container app service plan true, false otherwise.
	IsXenon *bool `json:"isXenon,omitempty"`

	// Specification for the Kubernetes Environment to use for the App Service plan.
	KubeEnvironmentProfile *KubeEnvironmentProfile `json:"kubeEnvironmentProfile,omitempty"`

	// Maximum number of total workers allowed for this ElasticScaleEnabled App Service Plan
	MaximumElasticWorkerCount *int32 `json:"maximumElasticWorkerCount,omitempty"`

	// If true, apps assigned to this App Service plan can be scaled independently. If false, apps assigned to this App Service plan will scale to all instances
	// of the plan.
	PerSiteScaling *bool `json:"perSiteScaling,omitempty"`

	// If Linux app service plan true, false otherwise.
	Reserved *bool `json:"reserved,omitempty"`

	// The time when the server farm expires. Valid only if it is a spot server farm.
	SpotExpirationTime *time.Time `json:"spotExpirationTime,omitempty"`

	// Scaling worker count.
	TargetWorkerCount *int32 `json:"targetWorkerCount,omitempty"`

	// Scaling worker size ID.
	TargetWorkerSizeID *int32 `json:"targetWorkerSizeId,omitempty"`

	// Target worker tier assigned to the App Service plan.
	WorkerTierName *string `json:"workerTierName,omitempty"`

	// If true, this App Service Plan will perform availability zone balancing. If false, this App Service Plan will not perform availability zone balancing.
	ZoneRedundant *bool `json:"zoneRedundant,omitempty"`

	// READ-ONLY; Geographical location for the App Service plan.
	GeoRegion *string `json:"geoRegion,omitempty" azure:"ro"`

	// READ-ONLY; Maximum number of instances that can be assigned to this App Service plan.
	MaximumNumberOfWorkers *int32 `json:"maximumNumberOfWorkers,omitempty" azure:"ro"`

	// READ-ONLY; Number of apps assigned to this App Service plan.
	NumberOfSites *int32 `json:"numberOfSites,omitempty" azure:"ro"`

	// READ-ONLY; Provisioning state of the App Service Plan.
	ProvisioningState *ProvisioningState `json:"provisioningState,omitempty" azure:"ro"`

	// READ-ONLY; Resource group of the App Service plan.
	ResourceGroup *string `json:"resourceGroup,omitempty" azure:"ro"`

	// READ-ONLY; App Service plan status.
	Status *StatusOptions `json:"status,omitempty" azure:"ro"`

	// READ-ONLY; App Service plan subscription.
	Subscription *string `json:"subscription,omitempty" azure:"ro"`
}

// MarshalJSON implements the json.Marshaller interface for type AppServicePlanPatchResourceProperties.
func (a AppServicePlanPatchResourceProperties) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "elasticScaleEnabled", a.ElasticScaleEnabled)
	populate(objectMap, "freeOfferExpirationTime", (*timeRFC3339)(a.FreeOfferExpirationTime))
	populate(objectMap, "geoRegion", a.GeoRegion)
	populate(objectMap, "hostingEnvironmentProfile", a.HostingEnvironmentProfile)
	populate(objectMap, "hyperV", a.HyperV)
	populate(objectMap, "isSpot", a.IsSpot)
	populate(objectMap, "isXenon", a.IsXenon)
	populate(objectMap, "kubeEnvironmentProfile", a.KubeEnvironmentProfile)
	populate(objectMap, "maximumElasticWorkerCount", a.MaximumElasticWorkerCount)
	populate(objectMap, "maximumNumberOfWorkers", a.MaximumNumberOfWorkers)
	populate(objectMap, "numberOfSites", a.NumberOfSites)
	populate(objectMap, "perSiteScaling", a.PerSiteScaling)
	populate(objectMap, "provisioningState", a.ProvisioningState)
	populate(objectMap, "reserved", a.Reserved)
	populate(objectMap, "resourceGroup", a.ResourceGroup)
	populate(objectMap, "spotExpirationTime", (*timeRFC3339)(a.SpotExpirationTime))
	populate(objectMap, "status", a.Status)
	populate(objectMap, "subscription", a.Subscription)
	populate(objectMap, "targetWorkerCount", a.TargetWorkerCount)
	populate(objectMap, "targetWorkerSizeId", a.TargetWorkerSizeID)
	populate(objectMap, "workerTierName", a.WorkerTierName)
	populate(objectMap, "zoneRedundant", a.ZoneRedundant)
	return json.Marshal(objectMap)
}

// UnmarshalJSON implements the json.Unmarshaller interface for type AppServicePlanPatchResourceProperties.
func (a *AppServicePlanPatchResourceProperties) UnmarshalJSON(data []byte) error {
	var rawMsg map[string]json.RawMessage
	if err := json.Unmarshal(data, &rawMsg); err != nil {
		return err
	}
	for key, val := range rawMsg {
		var err error
		switch key {
		case "elasticScaleEnabled":
			err = unpopulate(val, &a.ElasticScaleEnabled)
			delete(rawMsg, key)
		case "freeOfferExpirationTime":
			var aux timeRFC3339
			err = unpopulate(val, &aux)
			a.FreeOfferExpirationTime = (*time.Time)(&aux)
			delete(rawMsg, key)
		case "geoRegion":
			err = unpopulate(val, &a.GeoRegion)
			delete(rawMsg, key)
		case "hostingEnvironmentProfile":
			err = unpopulate(val, &a.HostingEnvironmentProfile)
			delete(rawMsg, key)
		case "hyperV":
			err = unpopulate(val, &a.HyperV)
			delete(rawMsg, key)
		case "isSpot":
			err = unpopulate(val, &a.IsSpot)
			delete(rawMsg, key)
		case "isXenon":
			err = unpopulate(val, &a.IsXenon)
			delete(rawMsg, key)
		case "kubeEnvironmentProfile":
			err = unpopulate(val, &a.KubeEnvironmentProfile)
			delete(rawMsg, key)
		case "maximumElasticWorkerCount":
			err = unpopulate(val, &a.MaximumElasticWorkerCount)
			delete(rawMsg, key)
		case "maximumNumberOfWorkers":
			err = unpopulate(val, &a.MaximumNumberOfWorkers)
			delete(rawMsg, key)
		case "numberOfSites":
			err = unpopulate(val, &a.NumberOfSites)
			delete(rawMsg, key)
		case "perSiteScaling":
			err = unpopulate(val, &a.PerSiteScaling)
			delete(rawMsg, key)
		case "provisioningState":
			err = unpopulate(val, &a.ProvisioningState)
			delete(rawMsg, key)
		case "reserved":
			err = unpopulate(val, &a.Reserved)
			delete(rawMsg, key)
		case "resourceGroup":
			err = unpopulate(val, &a.ResourceGroup)
			delete(rawMsg, key)
		case "spotExpirationTime":
			var aux timeRFC3339
			err = unpopulate(val, &aux)
			a.SpotExpirationTime = (*time.Time)(&aux)
			delete(rawMsg, key)
		case "status":
			err = unpopulate(val, &a.Status)
			delete(rawMsg, key)
		case "subscription":
			err = unpopulate(val, &a.Subscription)
			delete(rawMsg, key)
		case "targetWorkerCount":
			err = unpopulate(val, &a.TargetWorkerCount)
			delete(rawMsg, key)
		case "targetWorkerSizeId":
			err = unpopulate(val, &a.TargetWorkerSizeID)
			delete(rawMsg, key)
		case "workerTierName":
			err = unpopulate(val, &a.WorkerTierName)
			delete(rawMsg, key)
		case "zoneRedundant":
			err = unpopulate(val, &a.ZoneRedundant)
			delete(rawMsg, key)
		}
		if err != nil {
			return err
		}
	}
	return nil
}

// AppServicePlanProperties - AppServicePlan resource specific properties
type AppServicePlanProperties struct {
	// ServerFarm supports ElasticScale. Apps in this plan will scale as if the ServerFarm was ElasticPremium sku
	ElasticScaleEnabled *bool `json:"elasticScaleEnabled,omitempty"`

	// The time when the server farm free offer expires.
	FreeOfferExpirationTime *time.Time `json:"freeOfferExpirationTime,omitempty"`

	// Specification for the App Service Environment to use for the App Service plan.
	HostingEnvironmentProfile *HostingEnvironmentProfile `json:"hostingEnvironmentProfile,omitempty"`

	// If Hyper-V container app service plan true, false otherwise.
	HyperV *bool `json:"hyperV,omitempty"`

	// If true, this App Service Plan owns spot instances.
	IsSpot *bool `json:"isSpot,omitempty"`

	// Obsolete: If Hyper-V container app service plan true, false otherwise.
	IsXenon *bool `json:"isXenon,omitempty"`

	// Specification for the Kubernetes Environment to use for the App Service plan.
	KubeEnvironmentProfile *KubeEnvironmentProfile `json:"kubeEnvironmentProfile,omitempty"`

	// Maximum number of total workers allowed for this ElasticScaleEnabled App Service Plan
	MaximumElasticWorkerCount *int32 `json:"maximumElasticWorkerCount,omitempty"`

	// If true, apps assigned to this App Service plan can be scaled independently. If false, apps assigned to this App Service plan will scale to all instances
	// of the plan.
	PerSiteScaling *bool `json:"perSiteScaling,omitempty"`

	// If Linux app service plan true, false otherwise.
	Reserved *bool `json:"reserved,omitempty"`

	// The time when the server farm expires. Valid only if it is a spot server farm.
	SpotExpirationTime *time.Time `json:"spotExpirationTime,omitempty"`

	// Scaling worker count.
	TargetWorkerCount *int32 `json:"targetWorkerCount,omitempty"`

	// Scaling worker size ID.
	TargetWorkerSizeID *int32 `json:"targetWorkerSizeId,omitempty"`

	// Target worker tier assigned to the App Service plan.
	WorkerTierName *string `json:"workerTierName,omitempty"`

	// If true, this App Service Plan will perform availability zone balancing. If false, this App Service Plan will not perform availability zone balancing.
	ZoneRedundant *bool `json:"zoneRedundant,omitempty"`

	// READ-ONLY; Geographical location for the App Service plan.
	GeoRegion *string `json:"geoRegion,omitempty" azure:"ro"`

	// READ-ONLY; Maximum number of instances that can be assigned to this App Service plan.
	MaximumNumberOfWorkers *int32 `json:"maximumNumberOfWorkers,omitempty" azure:"ro"`

	// READ-ONLY; Number of apps assigned to this App Service plan.
	NumberOfSites *int32 `json:"numberOfSites,omitempty" azure:"ro"`

	// READ-ONLY; Provisioning state of the App Service Plan.
	ProvisioningState *ProvisioningState `json:"provisioningState,omitempty" azure:"ro"`

	// READ-ONLY; Resource group of the App Service plan.
	ResourceGroup *string `json:"resourceGroup,omitempty" azure:"ro"`

	// READ-ONLY; App Service plan status.
	Status *StatusOptions `json:"status,omitempty" azure:"ro"`

	// READ-ONLY; App Service plan subscription.
	Subscription *string `json:"subscription,omitempty" azure:"ro"`
}

// MarshalJSON implements the json.Marshaller interface for type AppServicePlanProperties.
func (a AppServicePlanProperties) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "elasticScaleEnabled", a.ElasticScaleEnabled)
	populate(objectMap, "freeOfferExpirationTime", (*timeRFC3339)(a.FreeOfferExpirationTime))
	populate(objectMap, "geoRegion", a.GeoRegion)
	populate(objectMap, "hostingEnvironmentProfile", a.HostingEnvironmentProfile)
	populate(objectMap, "hyperV", a.HyperV)
	populate(objectMap, "isSpot", a.IsSpot)
	populate(objectMap, "isXenon", a.IsXenon)
	populate(objectMap, "kubeEnvironmentProfile", a.KubeEnvironmentProfile)
	populate(objectMap, "maximumElasticWorkerCount", a.MaximumElasticWorkerCount)
	populate(objectMap, "maximumNumberOfWorkers", a.MaximumNumberOfWorkers)
	populate(objectMap, "numberOfSites", a.NumberOfSites)
	populate(objectMap, "perSiteScaling", a.PerSiteScaling)
	populate(objectMap, "provisioningState", a.ProvisioningState)
	populate(objectMap, "reserved", a.Reserved)
	populate(objectMap, "resourceGroup", a.ResourceGroup)
	populate(objectMap, "spotExpirationTime", (*timeRFC3339)(a.SpotExpirationTime))
	populate(objectMap, "status", a.Status)
	populate(objectMap, "subscription", a.Subscription)
	populate(objectMap, "targetWorkerCount", a.TargetWorkerCount)
	populate(objectMap, "targetWorkerSizeId", a.TargetWorkerSizeID)
	populate(objectMap, "workerTierName", a.WorkerTierName)
	populate(objectMap, "zoneRedundant", a.ZoneRedundant)
	return json.Marshal(objectMap)
}

// UnmarshalJSON implements the json.Unmarshaller interface for type AppServicePlanProperties.
func (a *AppServicePlanProperties) UnmarshalJSON(data []byte) error {
	var rawMsg map[string]json.RawMessage
	if err := json.Unmarshal(data, &rawMsg); err != nil {
		return err
	}
	for key, val := range rawMsg {
		var err error
		switch key {
		case "elasticScaleEnabled":
			err = unpopulate(val, &a.ElasticScaleEnabled)
			delete(rawMsg, key)
		case "freeOfferExpirationTime":
			var aux timeRFC3339
			err = unpopulate(val, &aux)
			a.FreeOfferExpirationTime = (*time.Time)(&aux)
			delete(rawMsg, key)
		case "geoRegion":
			err = unpopulate(val, &a.GeoRegion)
			delete(rawMsg, key)
		case "hostingEnvironmentProfile":
			err = unpopulate(val, &a.HostingEnvironmentProfile)
			delete(rawMsg, key)
		case "hyperV":
			err = unpopulate(val, &a.HyperV)
			delete(rawMsg, key)
		case "isSpot":
			err = unpopulate(val, &a.IsSpot)
			delete(rawMsg, key)
		case "isXenon":
			err = unpopulate(val, &a.IsXenon)
			delete(rawMsg, key)
		case "kubeEnvironmentProfile":
			err = unpopulate(val, &a.KubeEnvironmentProfile)
			delete(rawMsg, key)
		case "maximumElasticWorkerCount":
			err = unpopulate(val, &a.MaximumElasticWorkerCount)
			delete(rawMsg, key)
		case "maximumNumberOfWorkers":
			err = unpopulate(val, &a.MaximumNumberOfWorkers)
			delete(rawMsg, key)
		case "numberOfSites":
			err = unpopulate(val, &a.NumberOfSites)
			delete(rawMsg, key)
		case "perSiteScaling":
			err = unpopulate(val, &a.PerSiteScaling)
			delete(rawMsg, key)
		case "provisioningState":
			err = unpopulate(val, &a.ProvisioningState)
			delete(rawMsg, key)
		case "reserved":
			err = unpopulate(val, &a.Reserved)
			delete(rawMsg, key)
		case "resourceGroup":
			err = unpopulate(val, &a.ResourceGroup)
			delete(rawMsg, key)
		case "spotExpirationTime":
			var aux timeRFC3339
			err = unpopulate(val, &aux)
			a.SpotExpirationTime = (*time.Time)(&aux)
			delete(rawMsg, key)
		case "status":
			err = unpopulate(val, &a.Status)
			delete(rawMsg, key)
		case "subscription":
			err = unpopulate(val, &a.Subscription)
			delete(rawMsg, key)
		case "targetWorkerCount":
			err = unpopulate(val, &a.TargetWorkerCount)
			delete(rawMsg, key)
		case "targetWorkerSizeId":
			err = unpopulate(val, &a.TargetWorkerSizeID)
			delete(rawMsg, key)
		case "workerTierName":
			err = unpopulate(val, &a.WorkerTierName)
			delete(rawMsg, key)
		case "zoneRedundant":
			err = unpopulate(val, &a.ZoneRedundant)
			delete(rawMsg, key)
		}
		if err != nil {
			return err
		}
	}
	return nil
}

// AppServicePlansBeginCreateOrUpdateOptions contains the optional parameters for the AppServicePlans.BeginCreateOrUpdate method.
type AppServicePlansBeginCreateOrUpdateOptions struct {
	// placeholder for future optional parameters
}

// AppServicePlansCreateOrUpdateVnetRouteOptions contains the optional parameters for the AppServicePlans.CreateOrUpdateVnetRoute method.
type AppServicePlansCreateOrUpdateVnetRouteOptions struct {
	// placeholder for future optional parameters
}

// AppServicePlansDeleteHybridConnectionOptions contains the optional parameters for the AppServicePlans.DeleteHybridConnection method.
type AppServicePlansDeleteHybridConnectionOptions struct {
	// placeholder for future optional parameters
}

// AppServicePlansDeleteOptions contains the optional parameters for the AppServicePlans.Delete method.
type AppServicePlansDeleteOptions struct {
	// placeholder for future optional parameters
}

// AppServicePlansDeleteVnetRouteOptions contains the optional parameters for the AppServicePlans.DeleteVnetRoute method.
type AppServicePlansDeleteVnetRouteOptions struct {
	// placeholder for future optional parameters
}

// AppServicePlansGetHybridConnectionOptions contains the optional parameters for the AppServicePlans.GetHybridConnection method.
type AppServicePlansGetHybridConnectionOptions struct {
	// placeholder for future optional parameters
}

// AppServicePlansGetHybridConnectionPlanLimitOptions contains the optional parameters for the AppServicePlans.GetHybridConnectionPlanLimit method.
type AppServicePlansGetHybridConnectionPlanLimitOptions struct {
	// placeholder for future optional parameters
}

// AppServicePlansGetOptions contains the optional parameters for the AppServicePlans.Get method.
type AppServicePlansGetOptions struct {
	// placeholder for future optional parameters
}

// AppServicePlansGetRouteForVnetOptions contains the optional parameters for the AppServicePlans.GetRouteForVnet method.
type AppServicePlansGetRouteForVnetOptions struct {
	// placeholder for future optional parameters
}

// AppServicePlansGetServerFarmSKUsOptions contains the optional parameters for the AppServicePlans.GetServerFarmSKUs method.
type AppServicePlansGetServerFarmSKUsOptions struct {
	// placeholder for future optional parameters
}

// AppServicePlansGetVnetFromServerFarmOptions contains the optional parameters for the AppServicePlans.GetVnetFromServerFarm method.
type AppServicePlansGetVnetFromServerFarmOptions struct {
	// placeholder for future optional parameters
}

// AppServicePlansGetVnetGatewayOptions contains the optional parameters for the AppServicePlans.GetVnetGateway method.
type AppServicePlansGetVnetGatewayOptions struct {
	// placeholder for future optional parameters
}

// AppServicePlansListByResourceGroupOptions contains the optional parameters for the AppServicePlans.ListByResourceGroup method.
type AppServicePlansListByResourceGroupOptions struct {
	// placeholder for future optional parameters
}

// AppServicePlansListCapabilitiesOptions contains the optional parameters for the AppServicePlans.ListCapabilities method.
type AppServicePlansListCapabilitiesOptions struct {
	// placeholder for future optional parameters
}

// AppServicePlansListHybridConnectionKeysOptions contains the optional parameters for the AppServicePlans.ListHybridConnectionKeys method.
type AppServicePlansListHybridConnectionKeysOptions struct {
	// placeholder for future optional parameters
}

// AppServicePlansListHybridConnectionsOptions contains the optional parameters for the AppServicePlans.ListHybridConnections method.
type AppServicePlansListHybridConnectionsOptions struct {
	// placeholder for future optional parameters
}

// AppServicePlansListOptions contains the optional parameters for the AppServicePlans.List method.
type AppServicePlansListOptions struct {
	// Specify <code>true</code> to return all App Service plan properties. The default is <code>false</code>, which returns a subset of the properties.
	// Retrieval of all properties may increase the API latency.
	Detailed *bool
}

// AppServicePlansListRoutesForVnetOptions contains the optional parameters for the AppServicePlans.ListRoutesForVnet method.
type AppServicePlansListRoutesForVnetOptions struct {
	// placeholder for future optional parameters
}

// AppServicePlansListUsagesOptions contains the optional parameters for the AppServicePlans.ListUsages method.
type AppServicePlansListUsagesOptions struct {
	// Return only usages/metrics specified in the filter. Filter conforms to odata syntax. Example: $filter=(name.value eq 'Metric1' or name.value eq 'Metric2').
	Filter *string
}

// AppServicePlansListVnetsOptions contains the optional parameters for the AppServicePlans.ListVnets method.
type AppServicePlansListVnetsOptions struct {
	// placeholder for future optional parameters
}

// AppServicePlansListWebAppsByHybridConnectionOptions contains the optional parameters for the AppServicePlans.ListWebAppsByHybridConnection method.
type AppServicePlansListWebAppsByHybridConnectionOptions struct {
	// placeholder for future optional parameters
}

// AppServicePlansListWebAppsOptions contains the optional parameters for the AppServicePlans.ListWebApps method.
type AppServicePlansListWebAppsOptions struct {
	// Supported filter: $filter=state eq running. Returns only web apps that are currently running
	Filter *string
	// Skip to a web app in the list of webapps associated with app service plan. If specified, the resulting list will contain web apps starting from (including)
	// the skipToken. Otherwise, the resulting list contains web apps from the start of the list
	SkipToken *string
	// List page size. If specified, results are paged.
	Top *string
}

// AppServicePlansRebootWorkerOptions contains the optional parameters for the AppServicePlans.RebootWorker method.
type AppServicePlansRebootWorkerOptions struct {
	// placeholder for future optional parameters
}

// AppServicePlansRestartWebAppsOptions contains the optional parameters for the AppServicePlans.RestartWebApps method.
type AppServicePlansRestartWebAppsOptions struct {
	// Specify <code>true</code> to perform a soft restart, applies the configuration settings and restarts the apps if necessary. The default is <code>false</code>,
	// which always restarts and reprovisions the apps
	SoftRestart *bool
}

// AppServicePlansUpdateOptions contains the optional parameters for the AppServicePlans.Update method.
type AppServicePlansUpdateOptions struct {
	// placeholder for future optional parameters
}

// AppServicePlansUpdateVnetGatewayOptions contains the optional parameters for the AppServicePlans.UpdateVnetGateway method.
type AppServicePlansUpdateVnetGatewayOptions struct {
	// placeholder for future optional parameters
}

// AppServicePlansUpdateVnetRouteOptions contains the optional parameters for the AppServicePlans.UpdateVnetRoute method.
type AppServicePlansUpdateVnetRouteOptions struct {
	// placeholder for future optional parameters
}

// Apple - The configuration settings of the Apple provider.
type Apple struct {
	// false if the Apple provider should not be enabled despite the set registration; otherwise, true.
	Enabled *bool `json:"enabled,omitempty"`

	// The configuration settings of the login flow.
	Login *LoginScopes `json:"login,omitempty"`

	// The configuration settings of the Apple registration.
	Registration *AppleRegistration `json:"registration,omitempty"`
}

// AppleRegistration - The configuration settings of the registration for the Apple provider
type AppleRegistration struct {
	// The Client ID of the app used for login.
	ClientID *string `json:"clientId,omitempty"`

	// The app setting name that contains the client secret.
	ClientSecretSettingName *string `json:"clientSecretSettingName,omitempty"`
}

// ApplicationLogsConfig - Application logs configuration.
type ApplicationLogsConfig struct {
	// Application logs to blob storage configuration.
	AzureBlobStorage *AzureBlobStorageApplicationLogsConfig `json:"azureBlobStorage,omitempty"`

	// Application logs to azure table storage configuration.
	AzureTableStorage *AzureTableStorageApplicationLogsConfig `json:"azureTableStorage,omitempty"`

	// Application logs to file system configuration.
	FileSystem *FileSystemApplicationLogsConfig `json:"fileSystem,omitempty"`
}

// ApplicationStack - Application stack.
type ApplicationStack struct {
	// Application stack dependency.
	Dependency *string `json:"dependency,omitempty"`

	// Application stack display name.
	Display *string `json:"display,omitempty"`

	// List of frameworks associated with application stack.
	Frameworks []*ApplicationStack `json:"frameworks,omitempty"`

	// true if this is the stack is deprecated; otherwise, false.
	IsDeprecated []*ApplicationStack `json:"isDeprecated,omitempty"`

	// List of major versions available.
	MajorVersions []*StackMajorVersion `json:"majorVersions,omitempty"`

	// Application stack name.
	Name *string `json:"name,omitempty"`
}

// MarshalJSON implements the json.Marshaller interface for type ApplicationStack.
func (a ApplicationStack) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "dependency", a.Dependency)
	populate(objectMap, "display", a.Display)
	populate(objectMap, "frameworks", a.Frameworks)
	populate(objectMap, "isDeprecated", a.IsDeprecated)
	populate(objectMap, "majorVersions", a.MajorVersions)
	populate(objectMap, "name", a.Name)
	return json.Marshal(objectMap)
}

// ApplicationStackCollection - Collection of Application Stacks
type ApplicationStackCollection struct {
	// REQUIRED; Collection of resources.
	Value []*ApplicationStackResource `json:"value,omitempty"`

	// READ-ONLY; Link to next page of resources.
	NextLink *string `json:"nextLink,omitempty" azure:"ro"`
}

// MarshalJSON implements the json.Marshaller interface for type ApplicationStackCollection.
func (a ApplicationStackCollection) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "nextLink", a.NextLink)
	populate(objectMap, "value", a.Value)
	return json.Marshal(objectMap)
}

// ApplicationStackResource - ARM resource for a ApplicationStack.
type ApplicationStackResource struct {
	ProxyOnlyResource
	// Core resource properties
	Properties *ApplicationStack `json:"properties,omitempty"`
}

// MarshalJSON implements the json.Marshaller interface for type ApplicationStackResource.
func (a ApplicationStackResource) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	a.ProxyOnlyResource.marshalInternal(objectMap)
	populate(objectMap, "properties", a.Properties)
	return json.Marshal(objectMap)
}

// AppserviceGithubToken - Github access token for Appservice CLI github integration.
type AppserviceGithubToken struct {
	// Github access token for Appservice CLI github integration
	AccessToken *string `json:"accessToken,omitempty"`

	// Error message if unable to get token
	ErrorMessage *string `json:"errorMessage,omitempty"`

	// True if valid github token received, False otherwise
	GotToken *bool `json:"gotToken,omitempty"`

	// Scope of the github access token
	Scope *string `json:"scope,omitempty"`

	// token type
	TokenType *string `json:"tokenType,omitempty"`
}

// AppserviceGithubTokenRequest - Appservice Github token request content.
type AppserviceGithubTokenRequest struct {
	// REQUIRED; Code string to exchange for Github Access token
	Code *string `json:"code,omitempty"`

	// REQUIRED; State string used for verification.
	State *string `json:"state,omitempty"`
}

type ArcConfiguration struct {
	ArtifactStorageAccessMode    *string                `json:"artifactStorageAccessMode,omitempty"`
	ArtifactStorageClassName     *string                `json:"artifactStorageClassName,omitempty"`
	ArtifactStorageMountPath     *string                `json:"artifactStorageMountPath,omitempty"`
	ArtifactStorageNodeName      *string                `json:"artifactStorageNodeName,omitempty"`
	ArtifactsStorageType         *StorageType           `json:"artifactsStorageType,omitempty"`
	FrontEndServiceConfiguration *FrontEndConfiguration `json:"frontEndServiceConfiguration,omitempty"`
	KubeConfig                   *string                `json:"kubeConfig,omitempty"`
}

// ArmIDWrapper - A wrapper for an ARM resource id
type ArmIDWrapper struct {
	// READ-ONLY
	ID *string `json:"id,omitempty" azure:"ro"`
}

// ArmPlan - The plan object in Azure Resource Manager, represents a marketplace plan.
type ArmPlan struct {
	// The name.
	Name *string `json:"name,omitempty"`

	// The product.
	Product *string `json:"product,omitempty"`

	// The promotion code.
	PromotionCode *string `json:"promotionCode,omitempty"`

	// The publisher.
	Publisher *string `json:"publisher,omitempty"`

	// Version of product.
	Version *string `json:"version,omitempty"`
}

// AseV3NetworkingConfiguration - Full view of networking configuration for an ASE.
type AseV3NetworkingConfiguration struct {
	ProxyOnlyResource
	// AseV3NetworkingConfiguration resource specific properties
	Properties *AseV3NetworkingConfigurationProperties `json:"properties,omitempty"`
}

// MarshalJSON implements the json.Marshaller interface for type AseV3NetworkingConfiguration.
func (a AseV3NetworkingConfiguration) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	a.ProxyOnlyResource.marshalInternal(objectMap)
	populate(objectMap, "properties", a.Properties)
	return json.Marshal(objectMap)
}

// AseV3NetworkingConfigurationProperties - AseV3NetworkingConfiguration resource specific properties
type AseV3NetworkingConfigurationProperties struct {
	// Property to enable and disable new private endpoint connection creation on ASE
	AllowNewPrivateEndpointConnections *bool `json:"allowNewPrivateEndpointConnections,omitempty"`

	// READ-ONLY
	ExternalInboundIPAddresses []*string `json:"externalInboundIpAddresses,omitempty" azure:"ro"`

	// READ-ONLY
	InternalInboundIPAddresses []*string `json:"internalInboundIpAddresses,omitempty" azure:"ro"`

	// READ-ONLY
	LinuxOutboundIPAddresses []*string `json:"linuxOutboundIpAddresses,omitempty" azure:"ro"`

	// READ-ONLY
	WindowsOutboundIPAddresses []*string `json:"windowsOutboundIpAddresses,omitempty" azure:"ro"`
}

// MarshalJSON implements the json.Marshaller interface for type AseV3NetworkingConfigurationProperties.
func (a AseV3NetworkingConfigurationProperties) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "allowNewPrivateEndpointConnections", a.AllowNewPrivateEndpointConnections)
	populate(objectMap, "externalInboundIpAddresses", a.ExternalInboundIPAddresses)
	populate(objectMap, "internalInboundIpAddresses", a.InternalInboundIPAddresses)
	populate(objectMap, "linuxOutboundIpAddresses", a.LinuxOutboundIPAddresses)
	populate(objectMap, "windowsOutboundIpAddresses", a.WindowsOutboundIPAddresses)
	return json.Marshal(objectMap)
}

// AuthPlatform - The configuration settings of the platform of App Service Authentication/Authorization.
type AuthPlatform struct {
	// The path of the config file containing auth settings if they come from a file. If the path is relative, base will the site's root directory.
	ConfigFilePath *string `json:"configFilePath,omitempty"`

	// true if the Authentication / Authorization feature is enabled for the current app; otherwise, false.
	Enabled *bool `json:"enabled,omitempty"`

	// The RuntimeVersion of the Authentication / Authorization feature in use for the current app. The setting in this value can control the behavior of certain
	// features in the Authentication /
	// Authorization module.
	RuntimeVersion *string `json:"runtimeVersion,omitempty"`
}

// AutoHealActions - Actions which to take by the auto-heal module when a rule is triggered.
type AutoHealActions struct {
	// Predefined action to be taken.
	ActionType *AutoHealActionType `json:"actionType,omitempty"`

	// Custom action to be taken.
	CustomAction *AutoHealCustomAction `json:"customAction,omitempty"`

	// Minimum time the process must execute before taking the action
	MinProcessExecutionTime *string `json:"minProcessExecutionTime,omitempty"`
}

// AutoHealCustomAction - Custom action to be executed when an auto heal rule is triggered.
type AutoHealCustomAction struct {
	// Executable to be run.
	Exe *string `json:"exe,omitempty"`

	// Parameters for the executable.
	Parameters *string `json:"parameters,omitempty"`
}

// AutoHealRules - Rules that can be defined for auto-heal.
type AutoHealRules struct {
	// Actions to be executed when a rule is triggered.
	Actions *AutoHealActions `json:"actions,omitempty"`

	// Conditions that describe when to execute the auto-heal actions.
	Triggers *AutoHealTriggers `json:"triggers,omitempty"`
}

// AutoHealTriggers - Triggers for auto-heal.
type AutoHealTriggers struct {
	// A rule based on private bytes.
	PrivateBytesInKB *int32 `json:"privateBytesInKB,omitempty"`

	// A rule based on total requests.
	Requests *RequestsBasedTrigger `json:"requests,omitempty"`

	// A rule based on request execution time.
	SlowRequests *SlowRequestsBasedTrigger `json:"slowRequests,omitempty"`

	// A rule based on multiple Slow Requests Rule with path
	SlowRequestsWithPath []*SlowRequestsBasedTrigger `json:"slowRequestsWithPath,omitempty"`

	// A rule based on status codes.
	StatusCodes []*StatusCodesBasedTrigger `json:"statusCodes,omitempty"`

	// A rule based on status codes ranges.
	StatusCodesRange []*StatusCodesRangeBasedTrigger `json:"statusCodesRange,omitempty"`
}

// MarshalJSON implements the json.Marshaller interface for type AutoHealTriggers.
func (a AutoHealTriggers) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "privateBytesInKB", a.PrivateBytesInKB)
	populate(objectMap, "requests", a.Requests)
	populate(objectMap, "slowRequests", a.SlowRequests)
	populate(objectMap, "slowRequestsWithPath", a.SlowRequestsWithPath)
	populate(objectMap, "statusCodes", a.StatusCodes)
	populate(objectMap, "statusCodesRange", a.StatusCodesRange)
	return json.Marshal(objectMap)
}

// AzureActiveDirectory - The configuration settings of the Azure Active directory provider.
type AzureActiveDirectory struct {
	// false if the Azure Active Directory provider should not be enabled despite the set registration; otherwise, true.
	Enabled *bool `json:"enabled,omitempty"`

	// Gets a value indicating whether the Azure AD configuration was auto-provisioned using 1st party tooling. This is an internal flag primarily intended
	// to support the Azure Management Portal. Users
	// should not read or write to this property.
	IsAutoProvisioned *bool `json:"isAutoProvisioned,omitempty"`

	// The configuration settings of the Azure Active Directory login flow.
	Login *AzureActiveDirectoryLogin `json:"login,omitempty"`

	// The configuration settings of the Azure Active Directory app registration.
	Registration *AzureActiveDirectoryRegistration `json:"registration,omitempty"`

	// The configuration settings of the Azure Active Directory token validation flow.
	Validation *AzureActiveDirectoryValidation `json:"validation,omitempty"`
}

// AzureActiveDirectoryLogin - The configuration settings of the Azure Active Directory login flow.
type AzureActiveDirectoryLogin struct {
	// true if the www-authenticate provider should be omitted from the request; otherwise, false.
	DisableWWWAuthenticate *bool `json:"disableWWWAuthenticate,omitempty"`

	// Login parameters to send to the OpenID Connect authorization endpoint when a user logs in. Each parameter must be in the form "key=value".
	LoginParameters []*string `json:"loginParameters,omitempty"`
}

// MarshalJSON implements the json.Marshaller interface for type AzureActiveDirectoryLogin.
func (a AzureActiveDirectoryLogin) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "disableWWWAuthenticate", a.DisableWWWAuthenticate)
	populate(objectMap, "loginParameters", a.LoginParameters)
	return json.Marshal(objectMap)
}

// AzureActiveDirectoryRegistration - The configuration settings of the Azure Active Directory app registration.
type AzureActiveDirectoryRegistration struct {
	// The Client ID of this relying party application, known as the clientid. This setting is required for enabling OpenID Connection authentication with Azure
	// Active Directory or other 3rd party OpenID
	// Connect providers. More information on OpenID Connect: http://openid.net/specs/openid-connect-core-10.html
	ClientID *string `json:"clientId,omitempty"`

	// An alternative to the client secret thumbprint, that is the issuer of a certificate used for signing purposes. This property acts as a replacement for
	// the Client Secret Certificate Thumbprint. It is
	// also optional.
	ClientSecretCertificateIssuer *string `json:"clientSecretCertificateIssuer,omitempty"`

	// An alternative to the client secret thumbprint, that is the subject alternative name of a certificate used for signing purposes. This property acts as
	// a replacement for the Client Secret Certificate
	// Thumbprint. It is also optional.
	ClientSecretCertificateSubjectAlternativeName *string `json:"clientSecretCertificateSubjectAlternativeName,omitempty"`

	// An alternative to the client secret, that is the thumbprint of a certificate used for signing purposes. This property acts as a replacement for the Client
	// Secret. It is also optional.
	ClientSecretCertificateThumbprint *string `json:"clientSecretCertificateThumbprint,omitempty"`

	// The app setting name that contains the client secret of the relying party application.
	ClientSecretSettingName *string `json:"clientSecretSettingName,omitempty"`

	// The OpenID Connect Issuer URI that represents the entity which issues access tokens for this application. When using Azure Active Directory, this value
	// is the URI of the directory tenant, e.g.
	// https://login.microsoftonline.com/v2.0/{tenant-guid}/. This URI is a case-sensitive identifier for the token issuer. More information on OpenID Connect
	// Discovery:
	// http://openid.net/specs/openid-connect-discovery-1_0.html
	OpenIDIssuer *string `json:"openIdIssuer,omitempty"`
}

// AzureActiveDirectoryValidation - The configuration settings of the Azure Active Directory token validation flow.
type AzureActiveDirectoryValidation struct {
	// The list of audiences that can make successful authentication/authorization requests.
	AllowedAudiences []*string `json:"allowedAudiences,omitempty"`

	// The configuration settings of the default authorization policy.
	DefaultAuthorizationPolicy *DefaultAuthorizationPolicy `json:"defaultAuthorizationPolicy,omitempty"`

	// The configuration settings of the checks that should be made while validating the JWT Claims.
	JwtClaimChecks *JwtClaimChecks `json:"jwtClaimChecks,omitempty"`
}

// MarshalJSON implements the json.Marshaller interface for type AzureActiveDirectoryValidation.
func (a AzureActiveDirectoryValidation) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "allowedAudiences", a.AllowedAudiences)
	populate(objectMap, "defaultAuthorizationPolicy", a.DefaultAuthorizationPolicy)
	populate(objectMap, "jwtClaimChecks", a.JwtClaimChecks)
	return json.Marshal(objectMap)
}

// AzureBlobStorageApplicationLogsConfig - Application logs azure blob storage configuration.
type AzureBlobStorageApplicationLogsConfig struct {
	// Log level.
	Level *LogLevel `json:"level,omitempty"`

	// Retention in days. Remove blobs older than X days. 0 or lower means no retention.
	RetentionInDays *int32 `json:"retentionInDays,omitempty"`

	// SAS url to a azure blob container with read/write/list/delete permissions.
	SasURL *string `json:"sasUrl,omitempty"`
}

// AzureBlobStorageHTTPLogsConfig - Http logs to azure blob storage configuration.
type AzureBlobStorageHTTPLogsConfig struct {
	// True if configuration is enabled, false if it is disabled and null if configuration is not set.
	Enabled *bool `json:"enabled,omitempty"`

	// Retention in days. Remove blobs older than X days. 0 or lower means no retention.
	RetentionInDays *int32 `json:"retentionInDays,omitempty"`

	// SAS url to a azure blob container with read/write/list/delete permissions.
	SasURL *string `json:"sasUrl,omitempty"`
}

// AzureStaticWebApps - The configuration settings of the Azure Static Web Apps provider.
type AzureStaticWebApps struct {
	// false if the Azure Static Web Apps provider should not be enabled despite the set registration; otherwise, true.
	Enabled *bool `json:"enabled,omitempty"`

	// The configuration settings of the Azure Static Web Apps registration.
	Registration *AzureStaticWebAppsRegistration `json:"registration,omitempty"`
}

// AzureStaticWebAppsRegistration - The configuration settings of the registration for the Azure Static Web Apps provider
type AzureStaticWebAppsRegistration struct {
	// The Client ID of the app used for login.
	ClientID *string `json:"clientId,omitempty"`
}

// AzureStorageInfoValue - Azure Files or Blob Storage access information value for dictionary storage.
type AzureStorageInfoValue struct {
	// Access key for the storage account.
	AccessKey *string `json:"accessKey,omitempty"`

	// Name of the storage account.
	AccountName *string `json:"accountName,omitempty"`

	// Path to mount the storage within the site's runtime environment.
	MountPath *string `json:"mountPath,omitempty"`

	// Name of the file share (container name, for Blob storage).
	ShareName *string `json:"shareName,omitempty"`

	// Type of storage.
	Type *AzureStorageType `json:"type,omitempty"`

	// READ-ONLY; State of the storage account.
	State *AzureStorageState `json:"state,omitempty" azure:"ro"`
}

// AzureStoragePropertyDictionaryResource - AzureStorageInfo dictionary resource.
type AzureStoragePropertyDictionaryResource struct {
	ProxyOnlyResource
	// Azure storage accounts.
	Properties map[string]*AzureStorageInfoValue `json:"properties,omitempty"`
}

// MarshalJSON implements the json.Marshaller interface for type AzureStoragePropertyDictionaryResource.
func (a AzureStoragePropertyDictionaryResource) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	a.ProxyOnlyResource.marshalInternal(objectMap)
	populate(objectMap, "properties", a.Properties)
	return json.Marshal(objectMap)
}

// AzureTableStorageApplicationLogsConfig - Application logs to Azure table storage configuration.
type AzureTableStorageApplicationLogsConfig struct {
	// REQUIRED; SAS URL to an Azure table with add/query/delete permissions.
	SasURL *string `json:"sasUrl,omitempty"`

	// Log level.
	Level *LogLevel `json:"level,omitempty"`
}

// BackupItem - Backup description.
type BackupItem struct {
	ProxyOnlyResource
	// BackupItem resource specific properties
	Properties *BackupItemProperties `json:"properties,omitempty"`
}

// MarshalJSON implements the json.Marshaller interface for type BackupItem.
func (b BackupItem) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	b.ProxyOnlyResource.marshalInternal(objectMap)
	populate(objectMap, "properties", b.Properties)
	return json.Marshal(objectMap)
}

// BackupItemCollection - Collection of backup items.
type BackupItemCollection struct {
	// REQUIRED; Collection of resources.
	Value []*BackupItem `json:"value,omitempty"`

	// READ-ONLY; Link to next page of resources.
	NextLink *string `json:"nextLink,omitempty" azure:"ro"`
}

// MarshalJSON implements the json.Marshaller interface for type BackupItemCollection.
func (b BackupItemCollection) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "nextLink", b.NextLink)
	populate(objectMap, "value", b.Value)
	return json.Marshal(objectMap)
}

// BackupItemProperties - BackupItem resource specific properties
type BackupItemProperties struct {
	// READ-ONLY; Id of the backup.
	BackupID *int32 `json:"id,omitempty" azure:"ro"`

	// READ-ONLY; Name of the blob which contains data for this backup.
	BlobName *string `json:"blobName,omitempty" azure:"ro"`

	// READ-ONLY; Unique correlation identifier. Please use this along with the timestamp while communicating with Azure support.
	CorrelationID *string `json:"correlationId,omitempty" azure:"ro"`

	// READ-ONLY; Timestamp of the backup creation.
	Created *time.Time `json:"created,omitempty" azure:"ro"`

	// READ-ONLY; List of databases included in the backup.
	Databases []*DatabaseBackupSetting `json:"databases,omitempty" azure:"ro"`

	// READ-ONLY; Timestamp when this backup finished.
	FinishedTimeStamp *time.Time `json:"finishedTimeStamp,omitempty" azure:"ro"`

	// READ-ONLY; Timestamp of a last restore operation which used this backup.
	LastRestoreTimeStamp *time.Time `json:"lastRestoreTimeStamp,omitempty" azure:"ro"`

	// READ-ONLY; Details regarding this backup. Might contain an error message.
	Log *string `json:"log,omitempty" azure:"ro"`

	// READ-ONLY; Name of this backup.
	Name *string `json:"name,omitempty" azure:"ro"`

	// READ-ONLY; True if this backup has been created due to a schedule being triggered.
	Scheduled *bool `json:"scheduled,omitempty" azure:"ro"`

	// READ-ONLY; Size of the backup in bytes.
	SizeInBytes *int64 `json:"sizeInBytes,omitempty" azure:"ro"`

	// READ-ONLY; Backup status.
	Status *BackupItemStatus `json:"status,omitempty" azure:"ro"`

	// READ-ONLY; SAS URL for the storage account container which contains this backup.
	StorageAccountURL *string `json:"storageAccountUrl,omitempty" azure:"ro"`

	// READ-ONLY; Size of the original web app which has been backed up.
	WebsiteSizeInBytes *int64 `json:"websiteSizeInBytes,omitempty" azure:"ro"`
}

// MarshalJSON implements the json.Marshaller interface for type BackupItemProperties.
func (b BackupItemProperties) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "id", b.BackupID)
	populate(objectMap, "blobName", b.BlobName)
	populate(objectMap, "correlationId", b.CorrelationID)
	populate(objectMap, "created", (*timeRFC3339)(b.Created))
	populate(objectMap, "databases", b.Databases)
	populate(objectMap, "finishedTimeStamp", (*timeRFC3339)(b.FinishedTimeStamp))
	populate(objectMap, "lastRestoreTimeStamp", (*timeRFC3339)(b.LastRestoreTimeStamp))
	populate(objectMap, "log", b.Log)
	populate(objectMap, "name", b.Name)
	populate(objectMap, "scheduled", b.Scheduled)
	populate(objectMap, "sizeInBytes", b.SizeInBytes)
	populate(objectMap, "status", b.Status)
	populate(objectMap, "storageAccountUrl", b.StorageAccountURL)
	populate(objectMap, "websiteSizeInBytes", b.WebsiteSizeInBytes)
	return json.Marshal(objectMap)
}

// UnmarshalJSON implements the json.Unmarshaller interface for type BackupItemProperties.
func (b *BackupItemProperties) UnmarshalJSON(data []byte) error {
	var rawMsg map[string]json.RawMessage
	if err := json.Unmarshal(data, &rawMsg); err != nil {
		return err
	}
	for key, val := range rawMsg {
		var err error
		switch key {
		case "id":
			err = unpopulate(val, &b.BackupID)
			delete(rawMsg, key)
		case "blobName":
			err = unpopulate(val, &b.BlobName)
			delete(rawMsg, key)
		case "correlationId":
			err = unpopulate(val, &b.CorrelationID)
			delete(rawMsg, key)
		case "created":
			var aux timeRFC3339
			err = unpopulate(val, &aux)
			b.Created = (*time.Time)(&aux)
			delete(rawMsg, key)
		case "databases":
			err = unpopulate(val, &b.Databases)
			delete(rawMsg, key)
		case "finishedTimeStamp":
			var aux timeRFC3339
			err = unpopulate(val, &aux)
			b.FinishedTimeStamp = (*time.Time)(&aux)
			delete(rawMsg, key)
		case "lastRestoreTimeStamp":
			var aux timeRFC3339
			err = unpopulate(val, &aux)
			b.LastRestoreTimeStamp = (*time.Time)(&aux)
			delete(rawMsg, key)
		case "log":
			err = unpopulate(val, &b.Log)
			delete(rawMsg, key)
		case "name":
			err = unpopulate(val, &b.Name)
			delete(rawMsg, key)
		case "scheduled":
			err = unpopulate(val, &b.Scheduled)
			delete(rawMsg, key)
		case "sizeInBytes":
			err = unpopulate(val, &b.SizeInBytes)
			delete(rawMsg, key)
		case "status":
			err = unpopulate(val, &b.Status)
			delete(rawMsg, key)
		case "storageAccountUrl":
			err = unpopulate(val, &b.StorageAccountURL)
			delete(rawMsg, key)
		case "websiteSizeInBytes":
			err = unpopulate(val, &b.WebsiteSizeInBytes)
			delete(rawMsg, key)
		}
		if err != nil {
			return err
		}
	}
	return nil
}

// BackupRequest - Description of a backup which will be performed.
type BackupRequest struct {
	ProxyOnlyResource
	// BackupRequest resource specific properties
	Properties *BackupRequestProperties `json:"properties,omitempty"`
}

// MarshalJSON implements the json.Marshaller interface for type BackupRequest.
func (b BackupRequest) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	b.ProxyOnlyResource.marshalInternal(objectMap)
	populate(objectMap, "properties", b.Properties)
	return json.Marshal(objectMap)
}

// BackupRequestProperties - BackupRequest resource specific properties
type BackupRequestProperties struct {
	// REQUIRED; SAS URL to the container.
	StorageAccountURL *string `json:"storageAccountUrl,omitempty"`

	// Name of the backup.
	BackupName *string `json:"backupName,omitempty"`

	// Schedule for the backup if it is executed periodically.
	BackupSchedule *BackupSchedule `json:"backupSchedule,omitempty"`

	// Databases included in the backup.
	Databases []*DatabaseBackupSetting `json:"databases,omitempty"`

	// True if the backup schedule is enabled (must be included in that case), false if the backup schedule should be disabled.
	Enabled *bool `json:"enabled,omitempty"`
}

// MarshalJSON implements the json.Marshaller interface for type BackupRequestProperties.
func (b BackupRequestProperties) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "backupName", b.BackupName)
	populate(objectMap, "backupSchedule", b.BackupSchedule)
	populate(objectMap, "databases", b.Databases)
	populate(objectMap, "enabled", b.Enabled)
	populate(objectMap, "storageAccountUrl", b.StorageAccountURL)
	return json.Marshal(objectMap)
}

// BackupSchedule - Description of a backup schedule. Describes how often should be the backup performed and what should be the retention policy.
type BackupSchedule struct {
	// REQUIRED; How often the backup should be executed (e.g. for weekly backup, this should be set to 7 and FrequencyUnit should be set to Day)
	FrequencyInterval *int32 `json:"frequencyInterval,omitempty"`

	// REQUIRED; The unit of time for how often the backup should be executed (e.g. for weekly backup, this should be set to Day and FrequencyInterval should
	// be set to 7)
	FrequencyUnit *FrequencyUnit `json:"frequencyUnit,omitempty"`

	// REQUIRED; True if the retention policy should always keep at least one backup in the storage account, regardless how old it is; false otherwise.
	KeepAtLeastOneBackup *bool `json:"keepAtLeastOneBackup,omitempty"`

	// REQUIRED; After how many days backups should be deleted.
	RetentionPeriodInDays *int32 `json:"retentionPeriodInDays,omitempty"`

	// When the schedule should start working.
	StartTime *time.Time `json:"startTime,omitempty"`

	// READ-ONLY; Last time when this schedule was triggered.
	LastExecutionTime *time.Time `json:"lastExecutionTime,omitempty" azure:"ro"`
}

// MarshalJSON implements the json.Marshaller interface for type BackupSchedule.
func (b BackupSchedule) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "frequencyInterval", b.FrequencyInterval)
	populate(objectMap, "frequencyUnit", b.FrequencyUnit)
	populate(objectMap, "keepAtLeastOneBackup", b.KeepAtLeastOneBackup)
	populate(objectMap, "lastExecutionTime", (*timeRFC3339)(b.LastExecutionTime))
	populate(objectMap, "retentionPeriodInDays", b.RetentionPeriodInDays)
	populate(objectMap, "startTime", (*timeRFC3339)(b.StartTime))
	return json.Marshal(objectMap)
}

// UnmarshalJSON implements the json.Unmarshaller interface for type BackupSchedule.
func (b *BackupSchedule) UnmarshalJSON(data []byte) error {
	var rawMsg map[string]json.RawMessage
	if err := json.Unmarshal(data, &rawMsg); err != nil {
		return err
	}
	for key, val := range rawMsg {
		var err error
		switch key {
		case "frequencyInterval":
			err = unpopulate(val, &b.FrequencyInterval)
			delete(rawMsg, key)
		case "frequencyUnit":
			err = unpopulate(val, &b.FrequencyUnit)
			delete(rawMsg, key)
		case "keepAtLeastOneBackup":
			err = unpopulate(val, &b.KeepAtLeastOneBackup)
			delete(rawMsg, key)
		case "lastExecutionTime":
			var aux timeRFC3339
			err = unpopulate(val, &aux)
			b.LastExecutionTime = (*time.Time)(&aux)
			delete(rawMsg, key)
		case "retentionPeriodInDays":
			err = unpopulate(val, &b.RetentionPeriodInDays)
			delete(rawMsg, key)
		case "startTime":
			var aux timeRFC3339
			err = unpopulate(val, &aux)
			b.StartTime = (*time.Time)(&aux)
			delete(rawMsg, key)
		}
		if err != nil {
			return err
		}
	}
	return nil
}

// BillingMeter - App Service billing entity that contains information about meter which the Azure billing system utilizes to charge users for services.
type BillingMeter struct {
	ProxyOnlyResource
	// BillingMeter resource specific properties
	Properties *BillingMeterProperties `json:"properties,omitempty"`
}

// MarshalJSON implements the json.Marshaller interface for type BillingMeter.
func (b BillingMeter) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	b.ProxyOnlyResource.marshalInternal(objectMap)
	populate(objectMap, "properties", b.Properties)
	return json.Marshal(objectMap)
}

// BillingMeterCollection - Collection of Billing Meters
type BillingMeterCollection struct {
	// REQUIRED; Collection of resources.
	Value []*BillingMeter `json:"value,omitempty"`

	// READ-ONLY; Link to next page of resources.
	NextLink *string `json:"nextLink,omitempty" azure:"ro"`
}

// MarshalJSON implements the json.Marshaller interface for type BillingMeterCollection.
func (b BillingMeterCollection) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "nextLink", b.NextLink)
	populate(objectMap, "value", b.Value)
	return json.Marshal(objectMap)
}

// BillingMeterProperties - BillingMeter resource specific properties
type BillingMeterProperties struct {
	// Azure Location of billable resource
	BillingLocation *string `json:"billingLocation,omitempty"`

	// Friendly name of the meter
	FriendlyName *string `json:"friendlyName,omitempty"`

	// Meter GUID onboarded in Commerce
	MeterID *string `json:"meterId,omitempty"`

	// Meter Multiplier
	Multiplier *float64 `json:"multiplier,omitempty"`

	// App Service OS type meter used for
	OSType *string `json:"osType,omitempty"`

	// App Service ResourceType meter used for
	ResourceType *string `json:"resourceType,omitempty"`

	// Short Name from App Service Azure pricing Page
	ShortName *string `json:"shortName,omitempty"`
}

// BlobStorageTokenStore - The configuration settings of the storage of the tokens if blob storage is used.
type BlobStorageTokenStore struct {
	// The name of the app setting containing the SAS URL of the blob storage containing the tokens.
	SasURLSettingName *string `json:"sasUrlSettingName,omitempty"`
}

// Capability - Describes the capabilities/features allowed for a specific SKU.
type Capability struct {
	// Name of the SKU capability.
	Name *string `json:"name,omitempty"`

	// Reason of the SKU capability.
	Reason *string `json:"reason,omitempty"`

	// Value of the SKU capability.
	Value *string `json:"value,omitempty"`
}

// Certificate - SSL certificate for an app.
type Certificate struct {
	Resource
	// Certificate resource specific properties
	Properties *CertificateProperties `json:"properties,omitempty"`
}

// MarshalJSON implements the json.Marshaller interface for type Certificate.
func (c Certificate) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	c.Resource.marshalInternal(objectMap)
	populate(objectMap, "properties", c.Properties)
	return json.Marshal(objectMap)
}

// CertificateCollection - Collection of certificates.
type CertificateCollection struct {
	// REQUIRED; Collection of resources.
	Value []*Certificate `json:"value,omitempty"`

	// READ-ONLY; Link to next page of resources.
	NextLink *string `json:"nextLink,omitempty" azure:"ro"`
}

// MarshalJSON implements the json.Marshaller interface for type CertificateCollection.
func (c CertificateCollection) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "nextLink", c.NextLink)
	populate(objectMap, "value", c.Value)
	return json.Marshal(objectMap)
}

// CertificateDetails - SSL certificate details.
type CertificateDetails struct {
	// READ-ONLY; Certificate Issuer.
	Issuer *string `json:"issuer,omitempty" azure:"ro"`

	// READ-ONLY; Date Certificate is valid to.
	NotAfter *time.Time `json:"notAfter,omitempty" azure:"ro"`

	// READ-ONLY; Date Certificate is valid from.
	NotBefore *time.Time `json:"notBefore,omitempty" azure:"ro"`

	// READ-ONLY; Raw certificate data.
	RawData *string `json:"rawData,omitempty" azure:"ro"`

	// READ-ONLY; Certificate Serial Number.
	SerialNumber *string `json:"serialNumber,omitempty" azure:"ro"`

	// READ-ONLY; Certificate Signature algorithm.
	SignatureAlgorithm *string `json:"signatureAlgorithm,omitempty" azure:"ro"`

	// READ-ONLY; Certificate Subject.
	Subject *string `json:"subject,omitempty" azure:"ro"`

	// READ-ONLY; Certificate Thumbprint.
	Thumbprint *string `json:"thumbprint,omitempty" azure:"ro"`

	// READ-ONLY; Certificate Version.
	Version *int32 `json:"version,omitempty" azure:"ro"`
}

// MarshalJSON implements the json.Marshaller interface for type CertificateDetails.
func (c CertificateDetails) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "issuer", c.Issuer)
	populate(objectMap, "notAfter", (*timeRFC3339)(c.NotAfter))
	populate(objectMap, "notBefore", (*timeRFC3339)(c.NotBefore))
	populate(objectMap, "rawData", c.RawData)
	populate(objectMap, "serialNumber", c.SerialNumber)
	populate(objectMap, "signatureAlgorithm", c.SignatureAlgorithm)
	populate(objectMap, "subject", c.Subject)
	populate(objectMap, "thumbprint", c.Thumbprint)
	populate(objectMap, "version", c.Version)
	return json.Marshal(objectMap)
}

// UnmarshalJSON implements the json.Unmarshaller interface for type CertificateDetails.
func (c *CertificateDetails) UnmarshalJSON(data []byte) error {
	var rawMsg map[string]json.RawMessage
	if err := json.Unmarshal(data, &rawMsg); err != nil {
		return err
	}
	for key, val := range rawMsg {
		var err error
		switch key {
		case "issuer":
			err = unpopulate(val, &c.Issuer)
			delete(rawMsg, key)
		case "notAfter":
			var aux timeRFC3339
			err = unpopulate(val, &aux)
			c.NotAfter = (*time.Time)(&aux)
			delete(rawMsg, key)
		case "notBefore":
			var aux timeRFC3339
			err = unpopulate(val, &aux)
			c.NotBefore = (*time.Time)(&aux)
			delete(rawMsg, key)
		case "rawData":
			err = unpopulate(val, &c.RawData)
			delete(rawMsg, key)
		case "serialNumber":
			err = unpopulate(val, &c.SerialNumber)
			delete(rawMsg, key)
		case "signatureAlgorithm":
			err = unpopulate(val, &c.SignatureAlgorithm)
			delete(rawMsg, key)
		case "subject":
			err = unpopulate(val, &c.Subject)
			delete(rawMsg, key)
		case "thumbprint":
			err = unpopulate(val, &c.Thumbprint)
			delete(rawMsg, key)
		case "version":
			err = unpopulate(val, &c.Version)
			delete(rawMsg, key)
		}
		if err != nil {
			return err
		}
	}
	return nil
}

// CertificateEmail - SSL certificate email.
type CertificateEmail struct {
	ProxyOnlyResource
	// CertificateEmail resource specific properties
	Properties *CertificateEmailProperties `json:"properties,omitempty"`
}

// MarshalJSON implements the json.Marshaller interface for type CertificateEmail.
func (c CertificateEmail) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	c.ProxyOnlyResource.marshalInternal(objectMap)
	populate(objectMap, "properties", c.Properties)
	return json.Marshal(objectMap)
}

// CertificateEmailProperties - CertificateEmail resource specific properties
type CertificateEmailProperties struct {
	// Email id.
	EmailID *string `json:"emailId,omitempty"`

	// Time stamp.
	TimeStamp *time.Time `json:"timeStamp,omitempty"`
}

// MarshalJSON implements the json.Marshaller interface for type CertificateEmailProperties.
func (c CertificateEmailProperties) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "emailId", c.EmailID)
	populate(objectMap, "timeStamp", (*timeRFC3339)(c.TimeStamp))
	return json.Marshal(objectMap)
}

// UnmarshalJSON implements the json.Unmarshaller interface for type CertificateEmailProperties.
func (c *CertificateEmailProperties) UnmarshalJSON(data []byte) error {
	var rawMsg map[string]json.RawMessage
	if err := json.Unmarshal(data, &rawMsg); err != nil {
		return err
	}
	for key, val := range rawMsg {
		var err error
		switch key {
		case "emailId":
			err = unpopulate(val, &c.EmailID)
			delete(rawMsg, key)
		case "timeStamp":
			var aux timeRFC3339
			err = unpopulate(val, &aux)
			c.TimeStamp = (*time.Time)(&aux)
			delete(rawMsg, key)
		}
		if err != nil {
			return err
		}
	}
	return nil
}

// CertificateOrderAction - Certificate order action.
type CertificateOrderAction struct {
	ProxyOnlyResource
	// CertificateOrderAction resource specific properties
	Properties *CertificateOrderActionProperties `json:"properties,omitempty"`
}

// MarshalJSON implements the json.Marshaller interface for type CertificateOrderAction.
func (c CertificateOrderAction) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	c.ProxyOnlyResource.marshalInternal(objectMap)
	populate(objectMap, "properties", c.Properties)
	return json.Marshal(objectMap)
}

// CertificateOrderActionProperties - CertificateOrderAction resource specific properties
type CertificateOrderActionProperties struct {
	// READ-ONLY; Action type.
	ActionType *CertificateOrderActionType `json:"actionType,omitempty" azure:"ro"`

	// READ-ONLY; Time at which the certificate action was performed.
	CreatedAt *time.Time `json:"createdAt,omitempty" azure:"ro"`
}

// MarshalJSON implements the json.Marshaller interface for type CertificateOrderActionProperties.
func (c CertificateOrderActionProperties) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "actionType", c.ActionType)
	populate(objectMap, "createdAt", (*timeRFC3339)(c.CreatedAt))
	return json.Marshal(objectMap)
}

// UnmarshalJSON implements the json.Unmarshaller interface for type CertificateOrderActionProperties.
func (c *CertificateOrderActionProperties) UnmarshalJSON(data []byte) error {
	var rawMsg map[string]json.RawMessage
	if err := json.Unmarshal(data, &rawMsg); err != nil {
		return err
	}
	for key, val := range rawMsg {
		var err error
		switch key {
		case "actionType":
			err = unpopulate(val, &c.ActionType)
			delete(rawMsg, key)
		case "createdAt":
			var aux timeRFC3339
			err = unpopulate(val, &aux)
			c.CreatedAt = (*time.Time)(&aux)
			delete(rawMsg, key)
		}
		if err != nil {
			return err
		}
	}
	return nil
}

type CertificateOrderContact struct {
	Email     *string `json:"email,omitempty"`
	NameFirst *string `json:"nameFirst,omitempty"`
	NameLast  *string `json:"nameLast,omitempty"`
	Phone     *string `json:"phone,omitempty"`
}

// CertificateOrdersDiagnosticsGetAppServiceCertificateOrderDetectorResponseOptions contains the optional parameters for the CertificateOrdersDiagnostics.GetAppServiceCertificateOrderDetectorResponse
// method.
type CertificateOrdersDiagnosticsGetAppServiceCertificateOrderDetectorResponseOptions struct {
	// The end time for the detector response.
	EndTime *time.Time
	// The start time for detector response.
	StartTime *time.Time
	// The time grain for the detector response.
	TimeGrain *string
}

// CertificateOrdersDiagnosticsListAppServiceCertificateOrderDetectorResponseOptions contains the optional parameters for the CertificateOrdersDiagnostics.ListAppServiceCertificateOrderDetectorResponse
// method.
type CertificateOrdersDiagnosticsListAppServiceCertificateOrderDetectorResponseOptions struct {
	// placeholder for future optional parameters
}

// CertificatePatchResource - ARM resource for a certificate.
type CertificatePatchResource struct {
	ProxyOnlyResource
	// CertificatePatchResource resource specific properties
	Properties *CertificatePatchResourceProperties `json:"properties,omitempty"`
}

// MarshalJSON implements the json.Marshaller interface for type CertificatePatchResource.
func (c CertificatePatchResource) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	c.ProxyOnlyResource.marshalInternal(objectMap)
	populate(objectMap, "properties", c.Properties)
	return json.Marshal(objectMap)
}

// CertificatePatchResourceProperties - CertificatePatchResource resource specific properties
type CertificatePatchResourceProperties struct {
	// CNAME of the certificate to be issued via free certificate
	CanonicalName *string `json:"canonicalName,omitempty"`

	// Method of domain validation for free cert
	DomainValidationMethod *string `json:"domainValidationMethod,omitempty"`

	// Host names the certificate applies to.
	HostNames []*string `json:"hostNames,omitempty"`

	// Key Vault Csm resource Id.
	KeyVaultID *string `json:"keyVaultId,omitempty"`

	// Key Vault secret name.
	KeyVaultSecretName *string `json:"keyVaultSecretName,omitempty"`

	// Certificate password.
	Password *string `json:"password,omitempty"`

	// Pfx blob.
	PfxBlob []byte `json:"pfxBlob,omitempty"`

	// Resource ID of the associated App Service plan, formatted as: "/subscriptions/{subscriptionID}/resourceGroups/{groupName}/providers/Microsoft.Web/serverfarms/{appServicePlanName}".
	ServerFarmID *string `json:"serverFarmId,omitempty"`

	// READ-ONLY; Raw bytes of .cer file
	CerBlob []byte `json:"cerBlob,omitempty" azure:"ro"`

	// READ-ONLY; Certificate expiration date.
	ExpirationDate *time.Time `json:"expirationDate,omitempty" azure:"ro"`

	// READ-ONLY; Friendly name of the certificate.
	FriendlyName *string `json:"friendlyName,omitempty" azure:"ro"`

	// READ-ONLY; Specification for the App Service Environment to use for the certificate.
	HostingEnvironmentProfile *HostingEnvironmentProfile `json:"hostingEnvironmentProfile,omitempty" azure:"ro"`

	// READ-ONLY; Certificate issue Date.
	IssueDate *time.Time `json:"issueDate,omitempty" azure:"ro"`

	// READ-ONLY; Certificate issuer.
	Issuer *string `json:"issuer,omitempty" azure:"ro"`

	// READ-ONLY; Status of the Key Vault secret.
	KeyVaultSecretStatus *KeyVaultSecretStatus `json:"keyVaultSecretStatus,omitempty" azure:"ro"`

	// READ-ONLY; Public key hash.
	PublicKeyHash *string `json:"publicKeyHash,omitempty" azure:"ro"`

	// READ-ONLY; Self link.
	SelfLink *string `json:"selfLink,omitempty" azure:"ro"`

	// READ-ONLY; App name.
	SiteName *string `json:"siteName,omitempty" azure:"ro"`

	// READ-ONLY; Subject name of the certificate.
	SubjectName *string `json:"subjectName,omitempty" azure:"ro"`

	// READ-ONLY; Certificate thumbprint.
	Thumbprint *string `json:"thumbprint,omitempty" azure:"ro"`

	// READ-ONLY; Is the certificate valid?.
	Valid *bool `json:"valid,omitempty" azure:"ro"`
}

// MarshalJSON implements the json.Marshaller interface for type CertificatePatchResourceProperties.
func (c CertificatePatchResourceProperties) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "canonicalName", c.CanonicalName)
	populateByteArray(objectMap, "cerBlob", c.CerBlob, runtime.Base64StdFormat)
	populate(objectMap, "domainValidationMethod", c.DomainValidationMethod)
	populate(objectMap, "expirationDate", (*timeRFC3339)(c.ExpirationDate))
	populate(objectMap, "friendlyName", c.FriendlyName)
	populate(objectMap, "hostNames", c.HostNames)
	populate(objectMap, "hostingEnvironmentProfile", c.HostingEnvironmentProfile)
	populate(objectMap, "issueDate", (*timeRFC3339)(c.IssueDate))
	populate(objectMap, "issuer", c.Issuer)
	populate(objectMap, "keyVaultId", c.KeyVaultID)
	populate(objectMap, "keyVaultSecretName", c.KeyVaultSecretName)
	populate(objectMap, "keyVaultSecretStatus", c.KeyVaultSecretStatus)
	populate(objectMap, "password", c.Password)
	populateByteArray(objectMap, "pfxBlob", c.PfxBlob, runtime.Base64StdFormat)
	populate(objectMap, "publicKeyHash", c.PublicKeyHash)
	populate(objectMap, "selfLink", c.SelfLink)
	populate(objectMap, "serverFarmId", c.ServerFarmID)
	populate(objectMap, "siteName", c.SiteName)
	populate(objectMap, "subjectName", c.SubjectName)
	populate(objectMap, "thumbprint", c.Thumbprint)
	populate(objectMap, "valid", c.Valid)
	return json.Marshal(objectMap)
}

// UnmarshalJSON implements the json.Unmarshaller interface for type CertificatePatchResourceProperties.
func (c *CertificatePatchResourceProperties) UnmarshalJSON(data []byte) error {
	var rawMsg map[string]json.RawMessage
	if err := json.Unmarshal(data, &rawMsg); err != nil {
		return err
	}
	for key, val := range rawMsg {
		var err error
		switch key {
		case "canonicalName":
			err = unpopulate(val, &c.CanonicalName)
			delete(rawMsg, key)
		case "cerBlob":
			err = runtime.DecodeByteArray(string(val), &c.CerBlob, runtime.Base64StdFormat)
			delete(rawMsg, key)
		case "domainValidationMethod":
			err = unpopulate(val, &c.DomainValidationMethod)
			delete(rawMsg, key)
		case "expirationDate":
			var aux timeRFC3339
			err = unpopulate(val, &aux)
			c.ExpirationDate = (*time.Time)(&aux)
			delete(rawMsg, key)
		case "friendlyName":
			err = unpopulate(val, &c.FriendlyName)
			delete(rawMsg, key)
		case "hostNames":
			err = unpopulate(val, &c.HostNames)
			delete(rawMsg, key)
		case "hostingEnvironmentProfile":
			err = unpopulate(val, &c.HostingEnvironmentProfile)
			delete(rawMsg, key)
		case "issueDate":
			var aux timeRFC3339
			err = unpopulate(val, &aux)
			c.IssueDate = (*time.Time)(&aux)
			delete(rawMsg, key)
		case "issuer":
			err = unpopulate(val, &c.Issuer)
			delete(rawMsg, key)
		case "keyVaultId":
			err = unpopulate(val, &c.KeyVaultID)
			delete(rawMsg, key)
		case "keyVaultSecretName":
			err = unpopulate(val, &c.KeyVaultSecretName)
			delete(rawMsg, key)
		case "keyVaultSecretStatus":
			err = unpopulate(val, &c.KeyVaultSecretStatus)
			delete(rawMsg, key)
		case "password":
			err = unpopulate(val, &c.Password)
			delete(rawMsg, key)
		case "pfxBlob":
			err = runtime.DecodeByteArray(string(val), &c.PfxBlob, runtime.Base64StdFormat)
			delete(rawMsg, key)
		case "publicKeyHash":
			err = unpopulate(val, &c.PublicKeyHash)
			delete(rawMsg, key)
		case "selfLink":
			err = unpopulate(val, &c.SelfLink)
			delete(rawMsg, key)
		case "serverFarmId":
			err = unpopulate(val, &c.ServerFarmID)
			delete(rawMsg, key)
		case "siteName":
			err = unpopulate(val, &c.SiteName)
			delete(rawMsg, key)
		case "subjectName":
			err = unpopulate(val, &c.SubjectName)
			delete(rawMsg, key)
		case "thumbprint":
			err = unpopulate(val, &c.Thumbprint)
			delete(rawMsg, key)
		case "valid":
			err = unpopulate(val, &c.Valid)
			delete(rawMsg, key)
		}
		if err != nil {
			return err
		}
	}
	return nil
}

// CertificateProperties - Certificate resource specific properties
type CertificateProperties struct {
	// CNAME of the certificate to be issued via free certificate
	CanonicalName *string `json:"canonicalName,omitempty"`

	// Method of domain validation for free cert
	DomainValidationMethod *string `json:"domainValidationMethod,omitempty"`

	// Host names the certificate applies to.
	HostNames []*string `json:"hostNames,omitempty"`

	// Key Vault Csm resource Id.
	KeyVaultID *string `json:"keyVaultId,omitempty"`

	// Key Vault secret name.
	KeyVaultSecretName *string `json:"keyVaultSecretName,omitempty"`

	// Certificate password.
	Password *string `json:"password,omitempty"`

	// Pfx blob.
	PfxBlob []byte `json:"pfxBlob,omitempty"`

	// Resource ID of the associated App Service plan, formatted as: "/subscriptions/{subscriptionID}/resourceGroups/{groupName}/providers/Microsoft.Web/serverfarms/{appServicePlanName}".
	ServerFarmID *string `json:"serverFarmId,omitempty"`

	// READ-ONLY; Raw bytes of .cer file
	CerBlob []byte `json:"cerBlob,omitempty" azure:"ro"`

	// READ-ONLY; Certificate expiration date.
	ExpirationDate *time.Time `json:"expirationDate,omitempty" azure:"ro"`

	// READ-ONLY; Friendly name of the certificate.
	FriendlyName *string `json:"friendlyName,omitempty" azure:"ro"`

	// READ-ONLY; Specification for the App Service Environment to use for the certificate.
	HostingEnvironmentProfile *HostingEnvironmentProfile `json:"hostingEnvironmentProfile,omitempty" azure:"ro"`

	// READ-ONLY; Certificate issue Date.
	IssueDate *time.Time `json:"issueDate,omitempty" azure:"ro"`

	// READ-ONLY; Certificate issuer.
	Issuer *string `json:"issuer,omitempty" azure:"ro"`

	// READ-ONLY; Status of the Key Vault secret.
	KeyVaultSecretStatus *KeyVaultSecretStatus `json:"keyVaultSecretStatus,omitempty" azure:"ro"`

	// READ-ONLY; Public key hash.
	PublicKeyHash *string `json:"publicKeyHash,omitempty" azure:"ro"`

	// READ-ONLY; Self link.
	SelfLink *string `json:"selfLink,omitempty" azure:"ro"`

	// READ-ONLY; App name.
	SiteName *string `json:"siteName,omitempty" azure:"ro"`

	// READ-ONLY; Subject name of the certificate.
	SubjectName *string `json:"subjectName,omitempty" azure:"ro"`

	// READ-ONLY; Certificate thumbprint.
	Thumbprint *string `json:"thumbprint,omitempty" azure:"ro"`

	// READ-ONLY; Is the certificate valid?.
	Valid *bool `json:"valid,omitempty" azure:"ro"`
}

// MarshalJSON implements the json.Marshaller interface for type CertificateProperties.
func (c CertificateProperties) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "canonicalName", c.CanonicalName)
	populateByteArray(objectMap, "cerBlob", c.CerBlob, runtime.Base64StdFormat)
	populate(objectMap, "domainValidationMethod", c.DomainValidationMethod)
	populate(objectMap, "expirationDate", (*timeRFC3339)(c.ExpirationDate))
	populate(objectMap, "friendlyName", c.FriendlyName)
	populate(objectMap, "hostNames", c.HostNames)
	populate(objectMap, "hostingEnvironmentProfile", c.HostingEnvironmentProfile)
	populate(objectMap, "issueDate", (*timeRFC3339)(c.IssueDate))
	populate(objectMap, "issuer", c.Issuer)
	populate(objectMap, "keyVaultId", c.KeyVaultID)
	populate(objectMap, "keyVaultSecretName", c.KeyVaultSecretName)
	populate(objectMap, "keyVaultSecretStatus", c.KeyVaultSecretStatus)
	populate(objectMap, "password", c.Password)
	populateByteArray(objectMap, "pfxBlob", c.PfxBlob, runtime.Base64StdFormat)
	populate(objectMap, "publicKeyHash", c.PublicKeyHash)
	populate(objectMap, "selfLink", c.SelfLink)
	populate(objectMap, "serverFarmId", c.ServerFarmID)
	populate(objectMap, "siteName", c.SiteName)
	populate(objectMap, "subjectName", c.SubjectName)
	populate(objectMap, "thumbprint", c.Thumbprint)
	populate(objectMap, "valid", c.Valid)
	return json.Marshal(objectMap)
}

// UnmarshalJSON implements the json.Unmarshaller interface for type CertificateProperties.
func (c *CertificateProperties) UnmarshalJSON(data []byte) error {
	var rawMsg map[string]json.RawMessage
	if err := json.Unmarshal(data, &rawMsg); err != nil {
		return err
	}
	for key, val := range rawMsg {
		var err error
		switch key {
		case "canonicalName":
			err = unpopulate(val, &c.CanonicalName)
			delete(rawMsg, key)
		case "cerBlob":
			err = runtime.DecodeByteArray(string(val), &c.CerBlob, runtime.Base64StdFormat)
			delete(rawMsg, key)
		case "domainValidationMethod":
			err = unpopulate(val, &c.DomainValidationMethod)
			delete(rawMsg, key)
		case "expirationDate":
			var aux timeRFC3339
			err = unpopulate(val, &aux)
			c.ExpirationDate = (*time.Time)(&aux)
			delete(rawMsg, key)
		case "friendlyName":
			err = unpopulate(val, &c.FriendlyName)
			delete(rawMsg, key)
		case "hostNames":
			err = unpopulate(val, &c.HostNames)
			delete(rawMsg, key)
		case "hostingEnvironmentProfile":
			err = unpopulate(val, &c.HostingEnvironmentProfile)
			delete(rawMsg, key)
		case "issueDate":
			var aux timeRFC3339
			err = unpopulate(val, &aux)
			c.IssueDate = (*time.Time)(&aux)
			delete(rawMsg, key)
		case "issuer":
			err = unpopulate(val, &c.Issuer)
			delete(rawMsg, key)
		case "keyVaultId":
			err = unpopulate(val, &c.KeyVaultID)
			delete(rawMsg, key)
		case "keyVaultSecretName":
			err = unpopulate(val, &c.KeyVaultSecretName)
			delete(rawMsg, key)
		case "keyVaultSecretStatus":
			err = unpopulate(val, &c.KeyVaultSecretStatus)
			delete(rawMsg, key)
		case "password":
			err = unpopulate(val, &c.Password)
			delete(rawMsg, key)
		case "pfxBlob":
			err = runtime.DecodeByteArray(string(val), &c.PfxBlob, runtime.Base64StdFormat)
			delete(rawMsg, key)
		case "publicKeyHash":
			err = unpopulate(val, &c.PublicKeyHash)
			delete(rawMsg, key)
		case "selfLink":
			err = unpopulate(val, &c.SelfLink)
			delete(rawMsg, key)
		case "serverFarmId":
			err = unpopulate(val, &c.ServerFarmID)
			delete(rawMsg, key)
		case "siteName":
			err = unpopulate(val, &c.SiteName)
			delete(rawMsg, key)
		case "subjectName":
			err = unpopulate(val, &c.SubjectName)
			delete(rawMsg, key)
		case "thumbprint":
			err = unpopulate(val, &c.Thumbprint)
			delete(rawMsg, key)
		case "valid":
			err = unpopulate(val, &c.Valid)
			delete(rawMsg, key)
		}
		if err != nil {
			return err
		}
	}
	return nil
}

// CertificateRegistrationProviderListOperationsOptions contains the optional parameters for the CertificateRegistrationProvider.ListOperations method.
type CertificateRegistrationProviderListOperationsOptions struct {
	// placeholder for future optional parameters
}

// CertificatesCreateOrUpdateOptions contains the optional parameters for the Certificates.CreateOrUpdate method.
type CertificatesCreateOrUpdateOptions struct {
	// placeholder for future optional parameters
}

// CertificatesDeleteOptions contains the optional parameters for the Certificates.Delete method.
type CertificatesDeleteOptions struct {
	// placeholder for future optional parameters
}

// CertificatesGetOptions contains the optional parameters for the Certificates.Get method.
type CertificatesGetOptions struct {
	// placeholder for future optional parameters
}

// CertificatesListByResourceGroupOptions contains the optional parameters for the Certificates.ListByResourceGroup method.
type CertificatesListByResourceGroupOptions struct {
	// placeholder for future optional parameters
}

// CertificatesListOptions contains the optional parameters for the Certificates.List method.
type CertificatesListOptions struct {
	// Return only information specified in the filter (using OData syntax). For example: $filter=KeyVaultId eq 'KeyVaultId'
	Filter *string
}

// CertificatesUpdateOptions contains the optional parameters for the Certificates.Update method.
type CertificatesUpdateOptions struct {
	// placeholder for future optional parameters
}

// ClientRegistration - The configuration settings of the app registration for providers that have client ids and client secrets
type ClientRegistration struct {
	// The Client ID of the app used for login.
	ClientID *string `json:"clientId,omitempty"`

	// The app setting name that contains the client secret.
	ClientSecretSettingName *string `json:"clientSecretSettingName,omitempty"`
}

// CloningInfo - Information needed for cloning operation.
type CloningInfo struct {
	// REQUIRED; ARM resource ID of the source app. App resource ID is of the form /subscriptions/{subId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{siteName}
	// for production slots and
	// /subscriptions/{subId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{siteName}/slots/{slotName} for other slots.
	SourceWebAppID *string `json:"sourceWebAppId,omitempty"`

	// Application setting overrides for cloned app. If specified, these settings override the settings cloned from source app. Otherwise, application settings
	// from source app are retained.
	AppSettingsOverrides map[string]*string `json:"appSettingsOverrides,omitempty"`

	// true to clone custom hostnames from source app; otherwise, false.
	CloneCustomHostNames *bool `json:"cloneCustomHostNames,omitempty"`

	// true to clone source control from source app; otherwise, false.
	CloneSourceControl *bool `json:"cloneSourceControl,omitempty"`

	// true to configure load balancing for source and destination app.
	ConfigureLoadBalancing *bool `json:"configureLoadBalancing,omitempty"`

	// Correlation ID of cloning operation. This ID ties multiple cloning operations together to use the same snapshot.
	CorrelationID *string `json:"correlationId,omitempty"`

	// App Service Environment.
	HostingEnvironment *string `json:"hostingEnvironment,omitempty"`

	// true to overwrite destination app; otherwise, false.
	Overwrite *bool `json:"overwrite,omitempty"`

	// Location of source app ex: West US or North Europe
	SourceWebAppLocation *string `json:"sourceWebAppLocation,omitempty"`

	// ARM resource ID of the Traffic Manager profile to use, if it exists. Traffic Manager resource ID is of the form
	// /subscriptions/{subId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/trafficManagerProfiles/{profileName}.
	TrafficManagerProfileID *string `json:"trafficManagerProfileId,omitempty"`

	// Name of Traffic Manager profile to create. This is only needed if Traffic Manager profile does not already exist.
	TrafficManagerProfileName *string `json:"trafficManagerProfileName,omitempty"`
}

// MarshalJSON implements the json.Marshaller interface for type CloningInfo.
func (c CloningInfo) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "appSettingsOverrides", c.AppSettingsOverrides)
	populate(objectMap, "cloneCustomHostNames", c.CloneCustomHostNames)
	populate(objectMap, "cloneSourceControl", c.CloneSourceControl)
	populate(objectMap, "configureLoadBalancing", c.ConfigureLoadBalancing)
	populate(objectMap, "correlationId", c.CorrelationID)
	populate(objectMap, "hostingEnvironment", c.HostingEnvironment)
	populate(objectMap, "overwrite", c.Overwrite)
	populate(objectMap, "sourceWebAppId", c.SourceWebAppID)
	populate(objectMap, "sourceWebAppLocation", c.SourceWebAppLocation)
	populate(objectMap, "trafficManagerProfileId", c.TrafficManagerProfileID)
	populate(objectMap, "trafficManagerProfileName", c.TrafficManagerProfileName)
	return json.Marshal(objectMap)
}

// ConnStringInfo - Database connection string information.
type ConnStringInfo struct {
	// Connection string value.
	ConnectionString *string `json:"connectionString,omitempty"`

	// Name of connection string.
	Name *string `json:"name,omitempty"`

	// Type of database.
	Type *ConnectionStringType `json:"type,omitempty"`
}

// ConnStringValueTypePair - Database connection string value to type pair.
type ConnStringValueTypePair struct {
	// REQUIRED; Type of database.
	Type *ConnectionStringType `json:"type,omitempty"`

	// REQUIRED; Value of pair.
	Value *string `json:"value,omitempty"`
}

// ConnectionStringDictionary - String dictionary resource.
type ConnectionStringDictionary struct {
	ProxyOnlyResource
	// Connection strings.
	Properties map[string]*ConnStringValueTypePair `json:"properties,omitempty"`
}

// MarshalJSON implements the json.Marshaller interface for type ConnectionStringDictionary.
func (c ConnectionStringDictionary) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	c.ProxyOnlyResource.marshalInternal(objectMap)
	populate(objectMap, "properties", c.Properties)
	return json.Marshal(objectMap)
}

// Contact information for domain registration. If 'Domain Privacy' option is not selected then the contact information is made publicly available through
// the Whois directories as per ICANN requirements.
type Contact struct {
	// REQUIRED; Email address.
	Email *string `json:"email,omitempty"`

	// REQUIRED; First name.
	NameFirst *string `json:"nameFirst,omitempty"`

	// REQUIRED; Last name.
	NameLast *string `json:"nameLast,omitempty"`

	// REQUIRED; Phone number.
	Phone *string `json:"phone,omitempty"`

	// Mailing address.
	AddressMailing *Address `json:"addressMailing,omitempty"`

	// Fax number.
	Fax *string `json:"fax,omitempty"`

	// Job title.
	JobTitle *string `json:"jobTitle,omitempty"`

	// Middle name.
	NameMiddle *string `json:"nameMiddle,omitempty"`

	// Organization contact belongs to.
	Organization *string `json:"organization,omitempty"`
}

type ContainerCPUStatistics struct {
	CPUUsage       *ContainerCPUUsage       `json:"cpuUsage,omitempty"`
	OnlineCPUCount *int32                   `json:"onlineCpuCount,omitempty"`
	SystemCPUUsage *int64                   `json:"systemCpuUsage,omitempty"`
	ThrottlingData *ContainerThrottlingData `json:"throttlingData,omitempty"`
}

type ContainerCPUUsage struct {
	KernelModeUsage *int64   `json:"kernelModeUsage,omitempty"`
	PerCPUUsage     []*int64 `json:"perCpuUsage,omitempty"`
	TotalUsage      *int64   `json:"totalUsage,omitempty"`
	UserModeUsage   *int64   `json:"userModeUsage,omitempty"`
}

// MarshalJSON implements the json.Marshaller interface for type ContainerCPUUsage.
func (c ContainerCPUUsage) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "kernelModeUsage", c.KernelModeUsage)
	populate(objectMap, "perCpuUsage", c.PerCPUUsage)
	populate(objectMap, "totalUsage", c.TotalUsage)
	populate(objectMap, "userModeUsage", c.UserModeUsage)
	return json.Marshal(objectMap)
}

type ContainerInfo struct {
	CurrentCPUStats   *ContainerCPUStatistics              `json:"currentCpuStats,omitempty"`
	CurrentTimeStamp  *time.Time                           `json:"currentTimeStamp,omitempty"`
	Eth0              *ContainerNetworkInterfaceStatistics `json:"eth0,omitempty"`
	ID                *string                              `json:"id,omitempty"`
	MemoryStats       *ContainerMemoryStatistics           `json:"memoryStats,omitempty"`
	Name              *string                              `json:"name,omitempty"`
	PreviousCPUStats  *ContainerCPUStatistics              `json:"previousCpuStats,omitempty"`
	PreviousTimeStamp *time.Time                           `json:"previousTimeStamp,omitempty"`
}

// MarshalJSON implements the json.Marshaller interface for type ContainerInfo.
func (c ContainerInfo) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "currentCpuStats", c.CurrentCPUStats)
	populate(objectMap, "currentTimeStamp", (*timeRFC3339)(c.CurrentTimeStamp))
	populate(objectMap, "eth0", c.Eth0)
	populate(objectMap, "id", c.ID)
	populate(objectMap, "memoryStats", c.MemoryStats)
	populate(objectMap, "name", c.Name)
	populate(objectMap, "previousCpuStats", c.PreviousCPUStats)
	populate(objectMap, "previousTimeStamp", (*timeRFC3339)(c.PreviousTimeStamp))
	return json.Marshal(objectMap)
}

// UnmarshalJSON implements the json.Unmarshaller interface for type ContainerInfo.
func (c *ContainerInfo) UnmarshalJSON(data []byte) error {
	var rawMsg map[string]json.RawMessage
	if err := json.Unmarshal(data, &rawMsg); err != nil {
		return err
	}
	for key, val := range rawMsg {
		var err error
		switch key {
		case "currentCpuStats":
			err = unpopulate(val, &c.CurrentCPUStats)
			delete(rawMsg, key)
		case "currentTimeStamp":
			var aux timeRFC3339
			err = unpopulate(val, &aux)
			c.CurrentTimeStamp = (*time.Time)(&aux)
			delete(rawMsg, key)
		case "eth0":
			err = unpopulate(val, &c.Eth0)
			delete(rawMsg, key)
		case "id":
			err = unpopulate(val, &c.ID)
			delete(rawMsg, key)
		case "memoryStats":
			err = unpopulate(val, &c.MemoryStats)
			delete(rawMsg, key)
		case "name":
			err = unpopulate(val, &c.Name)
			delete(rawMsg, key)
		case "previousCpuStats":
			err = unpopulate(val, &c.PreviousCPUStats)
			delete(rawMsg, key)
		case "previousTimeStamp":
			var aux timeRFC3339
			err = unpopulate(val, &aux)
			c.PreviousTimeStamp = (*time.Time)(&aux)
			delete(rawMsg, key)
		}
		if err != nil {
			return err
		}
	}
	return nil
}

type ContainerMemoryStatistics struct {
	Limit    *int64 `json:"limit,omitempty"`
	MaxUsage *int64 `json:"maxUsage,omitempty"`
	Usage    *int64 `json:"usage,omitempty"`
}

type ContainerNetworkInterfaceStatistics struct {
	RxBytes   *int64 `json:"rxBytes,omitempty"`
	RxDropped *int64 `json:"rxDropped,omitempty"`
	RxErrors  *int64 `json:"rxErrors,omitempty"`
	RxPackets *int64 `json:"rxPackets,omitempty"`
	TxBytes   *int64 `json:"txBytes,omitempty"`
	TxDropped *int64 `json:"txDropped,omitempty"`
	TxErrors  *int64 `json:"txErrors,omitempty"`
	TxPackets *int64 `json:"txPackets,omitempty"`
}

type ContainerThrottlingData struct {
	Periods          *int32 `json:"periods,omitempty"`
	ThrottledPeriods *int32 `json:"throttledPeriods,omitempty"`
	ThrottledTime    *int32 `json:"throttledTime,omitempty"`
}

// ContinuousWebJob - Continuous Web Job Information.
type ContinuousWebJob struct {
	ProxyOnlyResource
	// ContinuousWebJob resource specific properties
	Properties *ContinuousWebJobProperties `json:"properties,omitempty"`
}

// MarshalJSON implements the json.Marshaller interface for type ContinuousWebJob.
func (c ContinuousWebJob) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	c.ProxyOnlyResource.marshalInternal(objectMap)
	populate(objectMap, "properties", c.Properties)
	return json.Marshal(objectMap)
}

// ContinuousWebJobCollection - Collection of Kudu continuous web job information elements.
type ContinuousWebJobCollection struct {
	// REQUIRED; Collection of resources.
	Value []*ContinuousWebJob `json:"value,omitempty"`

	// READ-ONLY; Link to next page of resources.
	NextLink *string `json:"nextLink,omitempty" azure:"ro"`
}

// MarshalJSON implements the json.Marshaller interface for type ContinuousWebJobCollection.
func (c ContinuousWebJobCollection) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "nextLink", c.NextLink)
	populate(objectMap, "value", c.Value)
	return json.Marshal(objectMap)
}

// ContinuousWebJobProperties - ContinuousWebJob resource specific properties
type ContinuousWebJobProperties struct {
	// Detailed status.
	DetailedStatus *string `json:"detailed_status,omitempty"`

	// Error information.
	Error *string `json:"error,omitempty"`

	// Extra Info URL.
	ExtraInfoURL *string `json:"extra_info_url,omitempty"`

	// Log URL.
	LogURL *string `json:"log_url,omitempty"`

	// Run command.
	RunCommand *string `json:"run_command,omitempty"`

	// Job settings.
	Settings map[string]map[string]interface{} `json:"settings,omitempty"`

	// Job status.
	Status *ContinuousWebJobStatus `json:"status,omitempty"`

	// Job URL.
	URL *string `json:"url,omitempty"`

	// Using SDK?
	UsingSdk *bool `json:"using_sdk,omitempty"`

	// Job type.
	WebJobType *WebJobType `json:"web_job_type,omitempty"`
}

// MarshalJSON implements the json.Marshaller interface for type ContinuousWebJobProperties.
func (c ContinuousWebJobProperties) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "detailed_status", c.DetailedStatus)
	populate(objectMap, "error", c.Error)
	populate(objectMap, "extra_info_url", c.ExtraInfoURL)
	populate(objectMap, "log_url", c.LogURL)
	populate(objectMap, "run_command", c.RunCommand)
	populate(objectMap, "settings", c.Settings)
	populate(objectMap, "status", c.Status)
	populate(objectMap, "url", c.URL)
	populate(objectMap, "using_sdk", c.UsingSdk)
	populate(objectMap, "web_job_type", c.WebJobType)
	return json.Marshal(objectMap)
}

// CookieExpiration - The configuration settings of the session cookie's expiration.
type CookieExpiration struct {
	// The convention used when determining the session cookie's expiration.
	Convention *CookieExpirationConvention `json:"convention,omitempty"`

	// The time after the request is made when the session cookie should expire.
	TimeToExpiration *string `json:"timeToExpiration,omitempty"`
}

// CorsSettings - Cross-Origin Resource Sharing (CORS) settings for the app.
type CorsSettings struct {
	// Gets or sets the list of origins that should be allowed to make cross-origin calls (for example: http://example.com:12345). Use "*" to allow all.
	AllowedOrigins []*string `json:"allowedOrigins,omitempty"`

	// Gets or sets whether CORS requests with credentials are allowed. See https://developer.mozilla.org/en-US/docs/Web/HTTP/CORS#Requestswithcredentials for
	// more details.
	SupportCredentials *bool `json:"supportCredentials,omitempty"`
}

// MarshalJSON implements the json.Marshaller interface for type CorsSettings.
func (c CorsSettings) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "allowedOrigins", c.AllowedOrigins)
	populate(objectMap, "supportCredentials", c.SupportCredentials)
	return json.Marshal(objectMap)
}

// CsmMoveResourceEnvelope - Object with a list of the resources that need to be moved and the resource group they should be moved to.
type CsmMoveResourceEnvelope struct {
	Resources           []*string `json:"resources,omitempty"`
	TargetResourceGroup *string   `json:"targetResourceGroup,omitempty"`
}

// MarshalJSON implements the json.Marshaller interface for type CsmMoveResourceEnvelope.
func (c CsmMoveResourceEnvelope) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "resources", c.Resources)
	populate(objectMap, "targetResourceGroup", c.TargetResourceGroup)
	return json.Marshal(objectMap)
}

// CsmOperationCollection - Collection of Azure resource manager operation metadata.
type CsmOperationCollection struct {
	// REQUIRED; Collection of resources.
	Value []*CsmOperationDescription `json:"value,omitempty"`

	// READ-ONLY; Link to next page of resources.
	NextLink *string `json:"nextLink,omitempty" azure:"ro"`
}

// MarshalJSON implements the json.Marshaller interface for type CsmOperationCollection.
func (c CsmOperationCollection) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "nextLink", c.NextLink)
	populate(objectMap, "value", c.Value)
	return json.Marshal(objectMap)
}

// CsmOperationDescription - Description of an operation available for Microsoft.Web resource provider.
type CsmOperationDescription struct {
	// Meta data about operation used for display in portal.
	Display      *CsmOperationDisplay `json:"display,omitempty"`
	IsDataAction *bool                `json:"isDataAction,omitempty"`
	Name         *string              `json:"name,omitempty"`
	Origin       *string              `json:"origin,omitempty"`

	// Properties available for a Microsoft.Web resource provider operation.
	Properties *CsmOperationDescriptionProperties `json:"properties,omitempty"`
}

// CsmOperationDescriptionProperties - Properties available for a Microsoft.Web resource provider operation.
type CsmOperationDescriptionProperties struct {
	// Resource metrics service provided by Microsoft.Insights resource provider.
	ServiceSpecification *ServiceSpecification `json:"serviceSpecification,omitempty"`
}

// CsmOperationDisplay - Meta data about operation used for display in portal.
type CsmOperationDisplay struct {
	Description *string `json:"description,omitempty"`
	Operation   *string `json:"operation,omitempty"`
	Provider    *string `json:"provider,omitempty"`
	Resource    *string `json:"resource,omitempty"`
}

// CsmPublishingCredentialsPoliciesEntity - Publishing Credentials Policies parameters.
type CsmPublishingCredentialsPoliciesEntity struct {
	ProxyOnlyResource
	// CsmPublishingCredentialsPoliciesEntity resource specific properties
	Properties *CsmPublishingCredentialsPoliciesEntityProperties `json:"properties,omitempty"`
}

// MarshalJSON implements the json.Marshaller interface for type CsmPublishingCredentialsPoliciesEntity.
func (c CsmPublishingCredentialsPoliciesEntity) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	c.ProxyOnlyResource.marshalInternal(objectMap)
	populate(objectMap, "properties", c.Properties)
	return json.Marshal(objectMap)
}

// CsmPublishingCredentialsPoliciesEntityProperties - CsmPublishingCredentialsPoliciesEntity resource specific properties
type CsmPublishingCredentialsPoliciesEntityProperties struct {
	// REQUIRED; true to allow access to a publishing method; otherwise, false.
	Allow *bool `json:"allow,omitempty"`
}

// CsmPublishingProfileOptions - Publishing options for requested profile.
type CsmPublishingProfileOptions struct {
	// Name of the format. Valid values are: FileZilla3 WebDeploy -- default Ftp
	Format *PublishingProfileFormat `json:"format,omitempty"`

	// Include the DisasterRecover endpoint if true
	IncludeDisasterRecoveryEndpoints *bool `json:"includeDisasterRecoveryEndpoints,omitempty"`
}

// CsmSlotEntity - Deployment slot parameters.
type CsmSlotEntity struct {
	// REQUIRED; true to preserve Virtual Network to the slot during swap; otherwise, false.
	PreserveVnet *bool `json:"preserveVnet,omitempty"`

	// REQUIRED; Destination deployment slot during swap operation.
	TargetSlot *string `json:"targetSlot,omitempty"`
}

// CsmUsageQuota - Usage of the quota resource.
type CsmUsageQuota struct {
	// The current value of the resource counter.
	CurrentValue *int64 `json:"currentValue,omitempty"`

	// The resource limit.
	Limit *int64 `json:"limit,omitempty"`

	// Quota name.
	Name *LocalizableString `json:"name,omitempty"`

	// Next reset time for the resource counter.
	NextResetTime *time.Time `json:"nextResetTime,omitempty"`

	// Units of measurement for the quota resource.
	Unit *string `json:"unit,omitempty"`
}

// MarshalJSON implements the json.Marshaller interface for type CsmUsageQuota.
func (c CsmUsageQuota) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "currentValue", c.CurrentValue)
	populate(objectMap, "limit", c.Limit)
	populate(objectMap, "name", c.Name)
	populate(objectMap, "nextResetTime", (*timeRFC3339)(c.NextResetTime))
	populate(objectMap, "unit", c.Unit)
	return json.Marshal(objectMap)
}

// UnmarshalJSON implements the json.Unmarshaller interface for type CsmUsageQuota.
func (c *CsmUsageQuota) UnmarshalJSON(data []byte) error {
	var rawMsg map[string]json.RawMessage
	if err := json.Unmarshal(data, &rawMsg); err != nil {
		return err
	}
	for key, val := range rawMsg {
		var err error
		switch key {
		case "currentValue":
			err = unpopulate(val, &c.CurrentValue)
			delete(rawMsg, key)
		case "limit":
			err = unpopulate(val, &c.Limit)
			delete(rawMsg, key)
		case "name":
			err = unpopulate(val, &c.Name)
			delete(rawMsg, key)
		case "nextResetTime":
			var aux timeRFC3339
			err = unpopulate(val, &aux)
			c.NextResetTime = (*time.Time)(&aux)
			delete(rawMsg, key)
		case "unit":
			err = unpopulate(val, &c.Unit)
			delete(rawMsg, key)
		}
		if err != nil {
			return err
		}
	}
	return nil
}

// CsmUsageQuotaCollection - Collection of CSM usage quotas.
type CsmUsageQuotaCollection struct {
	// REQUIRED; Collection of resources.
	Value []*CsmUsageQuota `json:"value,omitempty"`

	// READ-ONLY; Link to next page of resources.
	NextLink *string `json:"nextLink,omitempty" azure:"ro"`
}

// MarshalJSON implements the json.Marshaller interface for type CsmUsageQuotaCollection.
func (c CsmUsageQuotaCollection) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "nextLink", c.NextLink)
	populate(objectMap, "value", c.Value)
	return json.Marshal(objectMap)
}

// CustomHostnameAnalysisResult - Custom domain analysis.
type CustomHostnameAnalysisResult struct {
	ProxyOnlyResource
	// CustomHostnameAnalysisResult resource specific properties
	Properties *CustomHostnameAnalysisResultProperties `json:"properties,omitempty"`
}

// MarshalJSON implements the json.Marshaller interface for type CustomHostnameAnalysisResult.
func (c CustomHostnameAnalysisResult) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	c.ProxyOnlyResource.marshalInternal(objectMap)
	populate(objectMap, "properties", c.Properties)
	return json.Marshal(objectMap)
}

// CustomHostnameAnalysisResultProperties - CustomHostnameAnalysisResult resource specific properties
type CustomHostnameAnalysisResultProperties struct {
	// A records controller can see for this hostname.
	ARecords []*string `json:"aRecords,omitempty"`

	// Alternate CName records controller can see for this hostname.
	AlternateCNameRecords []*string `json:"alternateCNameRecords,omitempty"`

	// Alternate TXT records controller can see for this hostname.
	AlternateTxtRecords []*string `json:"alternateTxtRecords,omitempty"`

	// CName records controller can see for this hostname.
	CNameRecords []*string `json:"cNameRecords,omitempty"`

	// TXT records controller can see for this hostname.
	TxtRecords []*string `json:"txtRecords,omitempty"`

	// READ-ONLY; Name of the conflicting app on scale unit if it's within the same subscription.
	ConflictingAppResourceID *string `json:"conflictingAppResourceId,omitempty" azure:"ro"`

	// READ-ONLY; Raw failure information if DNS verification fails.
	CustomDomainVerificationFailureInfo *ErrorEntity `json:"customDomainVerificationFailureInfo,omitempty" azure:"ro"`

	// READ-ONLY; DNS verification test result.
	CustomDomainVerificationTest *DNSVerificationTestResult `json:"customDomainVerificationTest,omitempty" azure:"ro"`

	// READ-ONLY; true if there is a conflict across subscriptions; otherwise, false.
	HasConflictAcrossSubscription *bool `json:"hasConflictAcrossSubscription,omitempty" azure:"ro"`

	// READ-ONLY; true if there is a conflict on a scale unit; otherwise, false.
	HasConflictOnScaleUnit *bool `json:"hasConflictOnScaleUnit,omitempty" azure:"ro"`

	// READ-ONLY; true if hostname is already verified; otherwise, false.
	IsHostnameAlreadyVerified *bool `json:"isHostnameAlreadyVerified,omitempty" azure:"ro"`
}

// MarshalJSON implements the json.Marshaller interface for type CustomHostnameAnalysisResultProperties.
func (c CustomHostnameAnalysisResultProperties) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "aRecords", c.ARecords)
	populate(objectMap, "alternateCNameRecords", c.AlternateCNameRecords)
	populate(objectMap, "alternateTxtRecords", c.AlternateTxtRecords)
	populate(objectMap, "cNameRecords", c.CNameRecords)
	populate(objectMap, "conflictingAppResourceId", c.ConflictingAppResourceID)
	populate(objectMap, "customDomainVerificationFailureInfo", c.CustomDomainVerificationFailureInfo)
	populate(objectMap, "customDomainVerificationTest", c.CustomDomainVerificationTest)
	populate(objectMap, "hasConflictAcrossSubscription", c.HasConflictAcrossSubscription)
	populate(objectMap, "hasConflictOnScaleUnit", c.HasConflictOnScaleUnit)
	populate(objectMap, "isHostnameAlreadyVerified", c.IsHostnameAlreadyVerified)
	populate(objectMap, "txtRecords", c.TxtRecords)
	return json.Marshal(objectMap)
}

// CustomOpenIDConnectProvider - The configuration settings of the custom Open ID Connect provider.
type CustomOpenIDConnectProvider struct {
	// false if the custom Open ID provider provider should not be enabled; otherwise, true.
	Enabled *bool `json:"enabled,omitempty"`

	// The configuration settings of the login flow of the custom Open ID Connect provider.
	Login *OpenIDConnectLogin `json:"login,omitempty"`

	// The configuration settings of the app registration for the custom Open ID Connect provider.
	Registration *OpenIDConnectRegistration `json:"registration,omitempty"`
}

// DataProviderMetadata - Additional configuration for a data providers
type DataProviderMetadata struct {
	ProviderName *string `json:"providerName,omitempty"`

	// READ-ONLY; Settings for the data provider
	PropertyBag []*KeyValuePairStringObject `json:"propertyBag,omitempty" azure:"ro"`
}

// MarshalJSON implements the json.Marshaller interface for type DataProviderMetadata.
func (d DataProviderMetadata) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "propertyBag", d.PropertyBag)
	populate(objectMap, "providerName", d.ProviderName)
	return json.Marshal(objectMap)
}

// DataSource - Class representing data source used by the detectors
type DataSource struct {
	// Datasource Uri Links
	DataSourceURI []*NameValuePair `json:"dataSourceUri,omitempty"`

	// Instructions if any for the data source
	Instructions []*string `json:"instructions,omitempty"`
}

// MarshalJSON implements the json.Marshaller interface for type DataSource.
func (d DataSource) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "dataSourceUri", d.DataSourceURI)
	populate(objectMap, "instructions", d.Instructions)
	return json.Marshal(objectMap)
}

// DataTableResponseColumn - Column definition
type DataTableResponseColumn struct {
	// Name of the column
	ColumnName *string `json:"columnName,omitempty"`

	// Column Type
	ColumnType *string `json:"columnType,omitempty"`

	// Data type which looks like 'String' or 'Int32'.
	DataType *string `json:"dataType,omitempty"`
}

// DataTableResponseObject - Data Table which defines columns and raw row values
type DataTableResponseObject struct {
	// List of columns with data types
	Columns []*DataTableResponseColumn `json:"columns,omitempty"`

	// Raw row values
	Rows [][]*string `json:"rows,omitempty"`

	// Name of the table
	TableName *string `json:"tableName,omitempty"`
}

// MarshalJSON implements the json.Marshaller interface for type DataTableResponseObject.
func (d DataTableResponseObject) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "columns", d.Columns)
	populate(objectMap, "rows", d.Rows)
	populate(objectMap, "tableName", d.TableName)
	return json.Marshal(objectMap)
}

// DatabaseBackupSetting - Database backup settings.
type DatabaseBackupSetting struct {
	// REQUIRED; Database type (e.g. SqlAzure / MySql).
	DatabaseType *DatabaseType `json:"databaseType,omitempty"`

	// Contains a connection string to a database which is being backed up or restored. If the restore should happen to a new database, the database name inside
	// is the new one.
	ConnectionString *string `json:"connectionString,omitempty"`

	// Contains a connection string name that is linked to the SiteConfig.ConnectionStrings. This is used during restore with overwrite connection strings options.
	ConnectionStringName *string `json:"connectionStringName,omitempty"`
	Name                 *string `json:"name,omitempty"`
}

// DefaultAuthorizationPolicy - The configuration settings of the Azure Active Directory default authorization policy.
type DefaultAuthorizationPolicy struct {
	// The configuration settings of the Azure Active Directory allowed applications.
	AllowedApplications []*string `json:"allowedApplications,omitempty"`

	// The configuration settings of the Azure Active Directory allowed principals.
	AllowedPrincipals *AllowedPrincipals `json:"allowedPrincipals,omitempty"`
}

// MarshalJSON implements the json.Marshaller interface for type DefaultAuthorizationPolicy.
func (d DefaultAuthorizationPolicy) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "allowedApplications", d.AllowedApplications)
	populate(objectMap, "allowedPrincipals", d.AllowedPrincipals)
	return json.Marshal(objectMap)
}

// DefaultErrorResponse - App Service error response.
// Implements the error and azcore.HTTPResponse interfaces.
type DefaultErrorResponse struct {
	raw string
	// READ-ONLY; Error model.
	InnerError *DefaultErrorResponseError `json:"error,omitempty" azure:"ro"`
}

// Error implements the error interface for type DefaultErrorResponse.
// The contents of the error text are not contractual and subject to change.
func (e DefaultErrorResponse) Error() string {
	return e.raw
}

// DefaultErrorResponseError - Error model.
type DefaultErrorResponseError struct {
	Details []*DefaultErrorResponseErrorDetailsItem `json:"details,omitempty"`

	// READ-ONLY; Standardized string to programmatically identify the error.
	Code *string `json:"code,omitempty" azure:"ro"`

	// READ-ONLY; More information to debug error.
	Innererror *string `json:"innererror,omitempty" azure:"ro"`

	// READ-ONLY; Detailed error description and debugging information.
	Message *string `json:"message,omitempty" azure:"ro"`

	// READ-ONLY; Detailed error description and debugging information.
	Target *string `json:"target,omitempty" azure:"ro"`
}

// MarshalJSON implements the json.Marshaller interface for type DefaultErrorResponseError.
func (d DefaultErrorResponseError) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "code", d.Code)
	populate(objectMap, "details", d.Details)
	populate(objectMap, "innererror", d.Innererror)
	populate(objectMap, "message", d.Message)
	populate(objectMap, "target", d.Target)
	return json.Marshal(objectMap)
}

// DefaultErrorResponseErrorDetailsItem - Detailed errors.
type DefaultErrorResponseErrorDetailsItem struct {
	// READ-ONLY; Standardized string to programmatically identify the error.
	Code *string `json:"code,omitempty" azure:"ro"`

	// READ-ONLY; Detailed error description and debugging information.
	Message *string `json:"message,omitempty" azure:"ro"`

	// READ-ONLY; Detailed error description and debugging information.
	Target *string `json:"target,omitempty" azure:"ro"`
}

// DeletedAppRestoreRequest - Details about restoring a deleted app.
type DeletedAppRestoreRequest struct {
	ProxyOnlyResource
	// DeletedAppRestoreRequest resource specific properties
	Properties *DeletedAppRestoreRequestProperties `json:"properties,omitempty"`
}

// MarshalJSON implements the json.Marshaller interface for type DeletedAppRestoreRequest.
func (d DeletedAppRestoreRequest) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	d.ProxyOnlyResource.marshalInternal(objectMap)
	populate(objectMap, "properties", d.Properties)
	return json.Marshal(objectMap)
}

// DeletedAppRestoreRequestProperties - DeletedAppRestoreRequest resource specific properties
type DeletedAppRestoreRequestProperties struct {
	// ARM resource ID of the deleted app. Example: /subscriptions/{subId}/providers/Microsoft.Web/deletedSites/{deletedSiteId}
	DeletedSiteID *string `json:"deletedSiteId,omitempty"`

	// If true, deleted site configuration, in addition to content, will be restored.
	RecoverConfiguration *bool `json:"recoverConfiguration,omitempty"`

	// Point in time to restore the deleted app from, formatted as a DateTime string. If unspecified, default value is the time that the app was deleted.
	SnapshotTime *string `json:"snapshotTime,omitempty"`

	// If true, the snapshot is retrieved from DRSecondary endpoint.
	UseDRSecondary *bool `json:"useDRSecondary,omitempty"`
}

// DeletedSite - A deleted app.
type DeletedSite struct {
	ProxyOnlyResource
	// DeletedSite resource specific properties
	Properties *DeletedSiteProperties `json:"properties,omitempty"`
}

// MarshalJSON implements the json.Marshaller interface for type DeletedSite.
func (d DeletedSite) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	d.ProxyOnlyResource.marshalInternal(objectMap)
	populate(objectMap, "properties", d.Properties)
	return json.Marshal(objectMap)
}

// DeletedSiteProperties - DeletedSite resource specific properties
type DeletedSiteProperties struct {
	// READ-ONLY; Numeric id for the deleted site
	DeletedSiteID *int32 `json:"deletedSiteId,omitempty" azure:"ro"`

	// READ-ONLY; Name of the deleted site
	DeletedSiteName *string `json:"deletedSiteName,omitempty" azure:"ro"`

	// READ-ONLY; Time in UTC when the app was deleted.
	DeletedTimestamp *string `json:"deletedTimestamp,omitempty" azure:"ro"`

	// READ-ONLY; Geo Region of the deleted site
	GeoRegionName *string `json:"geoRegionName,omitempty" azure:"ro"`

	// READ-ONLY; Kind of site that was deleted
	Kind *string `json:"kind,omitempty" azure:"ro"`

	// READ-ONLY; ResourceGroup that contained the deleted site
	ResourceGroup *string `json:"resourceGroup,omitempty" azure:"ro"`

	// READ-ONLY; Slot of the deleted site
	Slot *string `json:"slot,omitempty" azure:"ro"`

	// READ-ONLY; Subscription containing the deleted site
	Subscription *string `json:"subscription,omitempty" azure:"ro"`
}

// DeletedWebAppCollection - Collection of deleted apps.
type DeletedWebAppCollection struct {
	// REQUIRED; Collection of resources.
	Value []*DeletedSite `json:"value,omitempty"`

	// READ-ONLY; Link to next page of resources.
	NextLink *string `json:"nextLink,omitempty" azure:"ro"`
}

// MarshalJSON implements the json.Marshaller interface for type DeletedWebAppCollection.
func (d DeletedWebAppCollection) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "nextLink", d.NextLink)
	populate(objectMap, "value", d.Value)
	return json.Marshal(objectMap)
}

// DeletedWebAppsGetDeletedWebAppByLocationOptions contains the optional parameters for the DeletedWebApps.GetDeletedWebAppByLocation method.
type DeletedWebAppsGetDeletedWebAppByLocationOptions struct {
	// placeholder for future optional parameters
}

// DeletedWebAppsListByLocationOptions contains the optional parameters for the DeletedWebApps.ListByLocation method.
type DeletedWebAppsListByLocationOptions struct {
	// placeholder for future optional parameters
}

// DeletedWebAppsListOptions contains the optional parameters for the DeletedWebApps.List method.
type DeletedWebAppsListOptions struct {
	// placeholder for future optional parameters
}

// Deployment - User credentials used for publishing activity.
type Deployment struct {
	ProxyOnlyResource
	// Deployment resource specific properties
	Properties *DeploymentProperties `json:"properties,omitempty"`
}

// MarshalJSON implements the json.Marshaller interface for type Deployment.
func (d Deployment) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	d.ProxyOnlyResource.marshalInternal(objectMap)
	populate(objectMap, "properties", d.Properties)
	return json.Marshal(objectMap)
}

// DeploymentCollection - Collection of app deployments.
type DeploymentCollection struct {
	// REQUIRED; Collection of resources.
	Value []*Deployment `json:"value,omitempty"`

	// READ-ONLY; Link to next page of resources.
	NextLink *string `json:"nextLink,omitempty" azure:"ro"`
}

// MarshalJSON implements the json.Marshaller interface for type DeploymentCollection.
func (d DeploymentCollection) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "nextLink", d.NextLink)
	populate(objectMap, "value", d.Value)
	return json.Marshal(objectMap)
}

// DeploymentLocations - List of available locations (regions or App Service Environments) for deployment of App Service resources.
type DeploymentLocations struct {
	// Available App Service Environments with basic information.
	HostingEnvironmentDeploymentInfos []*HostingEnvironmentDeploymentInfo `json:"hostingEnvironmentDeploymentInfos,omitempty"`

	// Available App Service Environments with full descriptions of the environments.
	HostingEnvironments []*AppServiceEnvironment `json:"hostingEnvironments,omitempty"`

	// Available regions.
	Locations []*GeoRegion `json:"locations,omitempty"`
}

// MarshalJSON implements the json.Marshaller interface for type DeploymentLocations.
func (d DeploymentLocations) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "hostingEnvironmentDeploymentInfos", d.HostingEnvironmentDeploymentInfos)
	populate(objectMap, "hostingEnvironments", d.HostingEnvironments)
	populate(objectMap, "locations", d.Locations)
	return json.Marshal(objectMap)
}

// DeploymentProperties - Deployment resource specific properties
type DeploymentProperties struct {
	// True if deployment is currently active, false if completed and null if not started.
	Active *bool `json:"active,omitempty"`

	// Who authored the deployment.
	Author *string `json:"author,omitempty"`

	// Author email.
	AuthorEmail *string `json:"author_email,omitempty"`

	// Who performed the deployment.
	Deployer *string `json:"deployer,omitempty"`

	// Details on deployment.
	Details *string `json:"details,omitempty"`

	// End time.
	EndTime *time.Time `json:"end_time,omitempty"`

	// Details about deployment status.
	Message *string `json:"message,omitempty"`

	// Start time.
	StartTime *time.Time `json:"start_time,omitempty"`

	// Deployment status.
	Status *int32 `json:"status,omitempty"`
}

// MarshalJSON implements the json.Marshaller interface for type DeploymentProperties.
func (d DeploymentProperties) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "active", d.Active)
	populate(objectMap, "author", d.Author)
	populate(objectMap, "author_email", d.AuthorEmail)
	populate(objectMap, "deployer", d.Deployer)
	populate(objectMap, "details", d.Details)
	populate(objectMap, "end_time", (*timeRFC3339)(d.EndTime))
	populate(objectMap, "message", d.Message)
	populate(objectMap, "start_time", (*timeRFC3339)(d.StartTime))
	populate(objectMap, "status", d.Status)
	return json.Marshal(objectMap)
}

// UnmarshalJSON implements the json.Unmarshaller interface for type DeploymentProperties.
func (d *DeploymentProperties) UnmarshalJSON(data []byte) error {
	var rawMsg map[string]json.RawMessage
	if err := json.Unmarshal(data, &rawMsg); err != nil {
		return err
	}
	for key, val := range rawMsg {
		var err error
		switch key {
		case "active":
			err = unpopulate(val, &d.Active)
			delete(rawMsg, key)
		case "author":
			err = unpopulate(val, &d.Author)
			delete(rawMsg, key)
		case "author_email":
			err = unpopulate(val, &d.AuthorEmail)
			delete(rawMsg, key)
		case "deployer":
			err = unpopulate(val, &d.Deployer)
			delete(rawMsg, key)
		case "details":
			err = unpopulate(val, &d.Details)
			delete(rawMsg, key)
		case "end_time":
			var aux timeRFC3339
			err = unpopulate(val, &aux)
			d.EndTime = (*time.Time)(&aux)
			delete(rawMsg, key)
		case "message":
			err = unpopulate(val, &d.Message)
			delete(rawMsg, key)
		case "start_time":
			var aux timeRFC3339
			err = unpopulate(val, &aux)
			d.StartTime = (*time.Time)(&aux)
			delete(rawMsg, key)
		case "status":
			err = unpopulate(val, &d.Status)
			delete(rawMsg, key)
		}
		if err != nil {
			return err
		}
	}
	return nil
}

// DetectorAbnormalTimePeriod - Class representing Abnormal Time Period detected.
type DetectorAbnormalTimePeriod struct {
	// End time of the correlated event
	EndTime *time.Time `json:"endTime,omitempty"`

	// Message describing the event
	Message *string `json:"message,omitempty"`

	// Downtime metadata
	MetaData [][]*NameValuePair `json:"metaData,omitempty"`

	// Represents the rank of the Detector
	Priority *float64 `json:"priority,omitempty"`

	// List of proposed solutions
	Solutions []*Solution `json:"solutions,omitempty"`

	// Represents the name of the Detector
	Source *string `json:"source,omitempty"`

	// Start time of the correlated event
	StartTime *time.Time `json:"startTime,omitempty"`

	// Represents the type of the Detector
	Type *IssueType `json:"type,omitempty"`
}

// MarshalJSON implements the json.Marshaller interface for type DetectorAbnormalTimePeriod.
func (d DetectorAbnormalTimePeriod) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "endTime", (*timeRFC3339)(d.EndTime))
	populate(objectMap, "message", d.Message)
	populate(objectMap, "metaData", d.MetaData)
	populate(objectMap, "priority", d.Priority)
	populate(objectMap, "solutions", d.Solutions)
	populate(objectMap, "source", d.Source)
	populate(objectMap, "startTime", (*timeRFC3339)(d.StartTime))
	populate(objectMap, "type", d.Type)
	return json.Marshal(objectMap)
}

// UnmarshalJSON implements the json.Unmarshaller interface for type DetectorAbnormalTimePeriod.
func (d *DetectorAbnormalTimePeriod) UnmarshalJSON(data []byte) error {
	var rawMsg map[string]json.RawMessage
	if err := json.Unmarshal(data, &rawMsg); err != nil {
		return err
	}
	for key, val := range rawMsg {
		var err error
		switch key {
		case "endTime":
			var aux timeRFC3339
			err = unpopulate(val, &aux)
			d.EndTime = (*time.Time)(&aux)
			delete(rawMsg, key)
		case "message":
			err = unpopulate(val, &d.Message)
			delete(rawMsg, key)
		case "metaData":
			err = unpopulate(val, &d.MetaData)
			delete(rawMsg, key)
		case "priority":
			err = unpopulate(val, &d.Priority)
			delete(rawMsg, key)
		case "solutions":
			err = unpopulate(val, &d.Solutions)
			delete(rawMsg, key)
		case "source":
			err = unpopulate(val, &d.Source)
			delete(rawMsg, key)
		case "startTime":
			var aux timeRFC3339
			err = unpopulate(val, &aux)
			d.StartTime = (*time.Time)(&aux)
			delete(rawMsg, key)
		case "type":
			err = unpopulate(val, &d.Type)
			delete(rawMsg, key)
		}
		if err != nil {
			return err
		}
	}
	return nil
}

// DetectorDefinition - Class representing detector definition
type DetectorDefinition struct {
	// READ-ONLY; Description of the detector
	Description *string `json:"description,omitempty" azure:"ro"`

	// READ-ONLY; Display name of the detector
	DisplayName *string `json:"displayName,omitempty" azure:"ro"`

	// READ-ONLY; Flag representing whether detector is enabled or not.
	IsEnabled *bool `json:"isEnabled,omitempty" azure:"ro"`

	// READ-ONLY; Detector Rank
	Rank *float64 `json:"rank,omitempty" azure:"ro"`
}

// DetectorDefinitionResource - ARM resource for a detector definition
type DetectorDefinitionResource struct {
	ProxyOnlyResource
	// Core resource properties
	Properties *DetectorDefinition `json:"properties,omitempty"`
}

// MarshalJSON implements the json.Marshaller interface for type DetectorDefinitionResource.
func (d DetectorDefinitionResource) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	d.ProxyOnlyResource.marshalInternal(objectMap)
	populate(objectMap, "properties", d.Properties)
	return json.Marshal(objectMap)
}

// DetectorInfo - Definition of Detector
type DetectorInfo struct {
	// READ-ONLY; Analysis Types for which this detector should apply to.
	AnalysisType []*string `json:"analysisType,omitempty" azure:"ro"`

	// READ-ONLY; Author of the detector.
	Author *string `json:"author,omitempty" azure:"ro"`

	// READ-ONLY; Problem category. This serves for organizing group for detectors.
	Category *string `json:"category,omitempty" azure:"ro"`

	// READ-ONLY; Short description of the detector and its purpose.
	Description *string `json:"description,omitempty" azure:"ro"`

	// READ-ONLY; Id of detector
	ID *string `json:"id,omitempty" azure:"ro"`

	// READ-ONLY; Name of detector
	Name *string `json:"name,omitempty" azure:"ro"`

	// READ-ONLY; Defines score of a detector to power ML based matching.
	Score *float32 `json:"score,omitempty" azure:"ro"`

	// READ-ONLY; List of Support Topics for which this detector is enabled.
	SupportTopicList []*SupportTopic `json:"supportTopicList,omitempty" azure:"ro"`

	// READ-ONLY; Whether this detector is an Analysis Detector or not.
	Type *DetectorType `json:"type,omitempty" azure:"ro"`
}

// MarshalJSON implements the json.Marshaller interface for type DetectorInfo.
func (d DetectorInfo) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "analysisType", d.AnalysisType)
	populate(objectMap, "author", d.Author)
	populate(objectMap, "category", d.Category)
	populate(objectMap, "description", d.Description)
	populate(objectMap, "id", d.ID)
	populate(objectMap, "name", d.Name)
	populate(objectMap, "score", d.Score)
	populate(objectMap, "supportTopicList", d.SupportTopicList)
	populate(objectMap, "type", d.Type)
	return json.Marshal(objectMap)
}

// DetectorResponse - Class representing Response from Detector
type DetectorResponse struct {
	ProxyOnlyResource
	// DetectorResponse resource specific properties
	Properties *DetectorResponseProperties `json:"properties,omitempty"`
}

// MarshalJSON implements the json.Marshaller interface for type DetectorResponse.
func (d DetectorResponse) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	d.ProxyOnlyResource.marshalInternal(objectMap)
	populate(objectMap, "properties", d.Properties)
	return json.Marshal(objectMap)
}

// DetectorResponseCollection - Collection of detector responses
type DetectorResponseCollection struct {
	// REQUIRED; Collection of resources.
	Value []*DetectorResponse `json:"value,omitempty"`

	// READ-ONLY; Link to next page of resources.
	NextLink *string `json:"nextLink,omitempty" azure:"ro"`
}

// MarshalJSON implements the json.Marshaller interface for type DetectorResponseCollection.
func (d DetectorResponseCollection) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "nextLink", d.NextLink)
	populate(objectMap, "value", d.Value)
	return json.Marshal(objectMap)
}

// DetectorResponseProperties - DetectorResponse resource specific properties
type DetectorResponseProperties struct {
	// Additional configuration for different data providers to be used by the UI
	DataProvidersMetadata []*DataProviderMetadata `json:"dataProvidersMetadata,omitempty"`

	// Data Set
	Dataset []*DiagnosticData `json:"dataset,omitempty"`

	// metadata for the detector
	Metadata *DetectorInfo `json:"metadata,omitempty"`

	// Indicates status of the most severe insight.
	Status *Status `json:"status,omitempty"`

	// Suggested utterances where the detector can be applicable.
	SuggestedUtterances *QueryUtterancesResults `json:"suggestedUtterances,omitempty"`
}

// MarshalJSON implements the json.Marshaller interface for type DetectorResponseProperties.
func (d DetectorResponseProperties) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "dataProvidersMetadata", d.DataProvidersMetadata)
	populate(objectMap, "dataset", d.Dataset)
	populate(objectMap, "metadata", d.Metadata)
	populate(objectMap, "status", d.Status)
	populate(objectMap, "suggestedUtterances", d.SuggestedUtterances)
	return json.Marshal(objectMap)
}

// DiagnosticAnalysis - Class representing a diagnostic analysis done on an application
type DiagnosticAnalysis struct {
	ProxyOnlyResource
	// DiagnosticAnalysis resource specific properties
	Properties *DiagnosticAnalysisProperties `json:"properties,omitempty"`
}

// MarshalJSON implements the json.Marshaller interface for type DiagnosticAnalysis.
func (d DiagnosticAnalysis) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	d.ProxyOnlyResource.marshalInternal(objectMap)
	populate(objectMap, "properties", d.Properties)
	return json.Marshal(objectMap)
}

// DiagnosticAnalysisCollection - Collection of Diagnostic Analyses
type DiagnosticAnalysisCollection struct {
	// REQUIRED; Collection of resources.
	Value []*AnalysisDefinition `json:"value,omitempty"`

	// READ-ONLY; Link to next page of resources.
	NextLink *string `json:"nextLink,omitempty" azure:"ro"`
}

// MarshalJSON implements the json.Marshaller interface for type DiagnosticAnalysisCollection.
func (d DiagnosticAnalysisCollection) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "nextLink", d.NextLink)
	populate(objectMap, "value", d.Value)
	return json.Marshal(objectMap)
}

// DiagnosticAnalysisProperties - DiagnosticAnalysis resource specific properties
type DiagnosticAnalysisProperties struct {
	// List of time periods.
	AbnormalTimePeriods []*AbnormalTimePeriod `json:"abnormalTimePeriods,omitempty"`

	// End time of the period
	EndTime *time.Time `json:"endTime,omitempty"`

	// Data by each detector for detectors that did not corelate
	NonCorrelatedDetectors []*DetectorDefinition `json:"nonCorrelatedDetectors,omitempty"`

	// Data by each detector
	Payload []*AnalysisData `json:"payload,omitempty"`

	// Start time of the period
	StartTime *time.Time `json:"startTime,omitempty"`
}

// MarshalJSON implements the json.Marshaller interface for type DiagnosticAnalysisProperties.
func (d DiagnosticAnalysisProperties) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "abnormalTimePeriods", d.AbnormalTimePeriods)
	populate(objectMap, "endTime", (*timeRFC3339)(d.EndTime))
	populate(objectMap, "nonCorrelatedDetectors", d.NonCorrelatedDetectors)
	populate(objectMap, "payload", d.Payload)
	populate(objectMap, "startTime", (*timeRFC3339)(d.StartTime))
	return json.Marshal(objectMap)
}

// UnmarshalJSON implements the json.Unmarshaller interface for type DiagnosticAnalysisProperties.
func (d *DiagnosticAnalysisProperties) UnmarshalJSON(data []byte) error {
	var rawMsg map[string]json.RawMessage
	if err := json.Unmarshal(data, &rawMsg); err != nil {
		return err
	}
	for key, val := range rawMsg {
		var err error
		switch key {
		case "abnormalTimePeriods":
			err = unpopulate(val, &d.AbnormalTimePeriods)
			delete(rawMsg, key)
		case "endTime":
			var aux timeRFC3339
			err = unpopulate(val, &aux)
			d.EndTime = (*time.Time)(&aux)
			delete(rawMsg, key)
		case "nonCorrelatedDetectors":
			err = unpopulate(val, &d.NonCorrelatedDetectors)
			delete(rawMsg, key)
		case "payload":
			err = unpopulate(val, &d.Payload)
			delete(rawMsg, key)
		case "startTime":
			var aux timeRFC3339
			err = unpopulate(val, &aux)
			d.StartTime = (*time.Time)(&aux)
			delete(rawMsg, key)
		}
		if err != nil {
			return err
		}
	}
	return nil
}

// DiagnosticCategory - Class representing detector definition
type DiagnosticCategory struct {
	ProxyOnlyResource
	// DiagnosticCategory resource specific properties
	Properties *DiagnosticCategoryProperties `json:"properties,omitempty"`
}

// MarshalJSON implements the json.Marshaller interface for type DiagnosticCategory.
func (d DiagnosticCategory) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	d.ProxyOnlyResource.marshalInternal(objectMap)
	populate(objectMap, "properties", d.Properties)
	return json.Marshal(objectMap)
}

// DiagnosticCategoryCollection - Collection of Diagnostic Categories
type DiagnosticCategoryCollection struct {
	// REQUIRED; Collection of resources.
	Value []*DiagnosticCategory `json:"value,omitempty"`

	// READ-ONLY; Link to next page of resources.
	NextLink *string `json:"nextLink,omitempty" azure:"ro"`
}

// MarshalJSON implements the json.Marshaller interface for type DiagnosticCategoryCollection.
func (d DiagnosticCategoryCollection) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "nextLink", d.NextLink)
	populate(objectMap, "value", d.Value)
	return json.Marshal(objectMap)
}

// DiagnosticCategoryProperties - DiagnosticCategory resource specific properties
type DiagnosticCategoryProperties struct {
	// READ-ONLY; Description of the diagnostic category
	Description *string `json:"description,omitempty" azure:"ro"`
}

// DiagnosticData - Set of data with rendering instructions
type DiagnosticData struct {
	// Properties that describe how the table should be rendered
	RenderingProperties *Rendering `json:"renderingProperties,omitempty"`

	// Data in table form
	Table *DataTableResponseObject `json:"table,omitempty"`
}

// DiagnosticDetectorCollection - Collection of Diagnostic Detectors
type DiagnosticDetectorCollection struct {
	// REQUIRED; Collection of resources.
	Value []*DetectorDefinitionResource `json:"value,omitempty"`

	// READ-ONLY; Link to next page of resources.
	NextLink *string `json:"nextLink,omitempty" azure:"ro"`
}

// MarshalJSON implements the json.Marshaller interface for type DiagnosticDetectorCollection.
func (d DiagnosticDetectorCollection) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "nextLink", d.NextLink)
	populate(objectMap, "value", d.Value)
	return json.Marshal(objectMap)
}

// DiagnosticDetectorResponse - Class representing Response from Diagnostic Detectors
type DiagnosticDetectorResponse struct {
	ProxyOnlyResource
	// DiagnosticDetectorResponse resource specific properties
	Properties *DiagnosticDetectorResponseProperties `json:"properties,omitempty"`
}

// MarshalJSON implements the json.Marshaller interface for type DiagnosticDetectorResponse.
func (d DiagnosticDetectorResponse) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	d.ProxyOnlyResource.marshalInternal(objectMap)
	populate(objectMap, "properties", d.Properties)
	return json.Marshal(objectMap)
}

// DiagnosticDetectorResponseProperties - DiagnosticDetectorResponse resource specific properties
type DiagnosticDetectorResponseProperties struct {
	// List of Correlated events found by the detector
	AbnormalTimePeriods []*DetectorAbnormalTimePeriod `json:"abnormalTimePeriods,omitempty"`

	// Additional Data that detector wants to send.
	Data [][]*NameValuePair `json:"data,omitempty"`

	// Detector's definition
	DetectorDefinition *DetectorDefinition `json:"detectorDefinition,omitempty"`

	// End time of the period
	EndTime *time.Time `json:"endTime,omitempty"`

	// Flag representing Issue was detected.
	IssueDetected *bool `json:"issueDetected,omitempty"`

	// Metrics provided by the detector
	Metrics []*DiagnosticMetricSet `json:"metrics,omitempty"`

	// Meta Data
	ResponseMetaData *ResponseMetaData `json:"responseMetaData,omitempty"`

	// Start time of the period
	StartTime *time.Time `json:"startTime,omitempty"`
}

// MarshalJSON implements the json.Marshaller interface for type DiagnosticDetectorResponseProperties.
func (d DiagnosticDetectorResponseProperties) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "abnormalTimePeriods", d.AbnormalTimePeriods)
	populate(objectMap, "data", d.Data)
	populate(objectMap, "detectorDefinition", d.DetectorDefinition)
	populate(objectMap, "endTime", (*timeRFC3339)(d.EndTime))
	populate(objectMap, "issueDetected", d.IssueDetected)
	populate(objectMap, "metrics", d.Metrics)
	populate(objectMap, "responseMetaData", d.ResponseMetaData)
	populate(objectMap, "startTime", (*timeRFC3339)(d.StartTime))
	return json.Marshal(objectMap)
}

// UnmarshalJSON implements the json.Unmarshaller interface for type DiagnosticDetectorResponseProperties.
func (d *DiagnosticDetectorResponseProperties) UnmarshalJSON(data []byte) error {
	var rawMsg map[string]json.RawMessage
	if err := json.Unmarshal(data, &rawMsg); err != nil {
		return err
	}
	for key, val := range rawMsg {
		var err error
		switch key {
		case "abnormalTimePeriods":
			err = unpopulate(val, &d.AbnormalTimePeriods)
			delete(rawMsg, key)
		case "data":
			err = unpopulate(val, &d.Data)
			delete(rawMsg, key)
		case "detectorDefinition":
			err = unpopulate(val, &d.DetectorDefinition)
			delete(rawMsg, key)
		case "endTime":
			var aux timeRFC3339
			err = unpopulate(val, &aux)
			d.EndTime = (*time.Time)(&aux)
			delete(rawMsg, key)
		case "issueDetected":
			err = unpopulate(val, &d.IssueDetected)
			delete(rawMsg, key)
		case "metrics":
			err = unpopulate(val, &d.Metrics)
			delete(rawMsg, key)
		case "responseMetaData":
			err = unpopulate(val, &d.ResponseMetaData)
			delete(rawMsg, key)
		case "startTime":
			var aux timeRFC3339
			err = unpopulate(val, &aux)
			d.StartTime = (*time.Time)(&aux)
			delete(rawMsg, key)
		}
		if err != nil {
			return err
		}
	}
	return nil
}

// DiagnosticMetricSample - Class representing Diagnostic Metric
type DiagnosticMetricSample struct {
	// Whether the values are aggregates across all workers or not
	IsAggregated *bool `json:"isAggregated,omitempty"`

	// Maximum of the metric sampled during the time period
	Maximum *float64 `json:"maximum,omitempty"`

	// Minimum of the metric sampled during the time period
	Minimum *float64 `json:"minimum,omitempty"`

	// Role Instance. Null if this counter is not per instance This is returned and should be whichever instance name we desire to be returned i.e. CPU and
	// Memory return RDWORKERNAME (LargeDed…IN0) where
	// RDWORKERNAME is Machine name below and RoleInstance name in parenthesis
	RoleInstance *string `json:"roleInstance,omitempty"`

	// Time at which metric is measured
	Timestamp *time.Time `json:"timestamp,omitempty"`

	// Total value of the metric. If multiple measurements are made this will have sum of all.
	Total *float64 `json:"total,omitempty"`
}

// MarshalJSON implements the json.Marshaller interface for type DiagnosticMetricSample.
func (d DiagnosticMetricSample) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "isAggregated", d.IsAggregated)
	populate(objectMap, "maximum", d.Maximum)
	populate(objectMap, "minimum", d.Minimum)
	populate(objectMap, "roleInstance", d.RoleInstance)
	populate(objectMap, "timestamp", (*timeRFC3339)(d.Timestamp))
	populate(objectMap, "total", d.Total)
	return json.Marshal(objectMap)
}

// UnmarshalJSON implements the json.Unmarshaller interface for type DiagnosticMetricSample.
func (d *DiagnosticMetricSample) UnmarshalJSON(data []byte) error {
	var rawMsg map[string]json.RawMessage
	if err := json.Unmarshal(data, &rawMsg); err != nil {
		return err
	}
	for key, val := range rawMsg {
		var err error
		switch key {
		case "isAggregated":
			err = unpopulate(val, &d.IsAggregated)
			delete(rawMsg, key)
		case "maximum":
			err = unpopulate(val, &d.Maximum)
			delete(rawMsg, key)
		case "minimum":
			err = unpopulate(val, &d.Minimum)
			delete(rawMsg, key)
		case "roleInstance":
			err = unpopulate(val, &d.RoleInstance)
			delete(rawMsg, key)
		case "timestamp":
			var aux timeRFC3339
			err = unpopulate(val, &aux)
			d.Timestamp = (*time.Time)(&aux)
			delete(rawMsg, key)
		case "total":
			err = unpopulate(val, &d.Total)
			delete(rawMsg, key)
		}
		if err != nil {
			return err
		}
	}
	return nil
}

// DiagnosticMetricSet - Class representing Diagnostic Metric information
type DiagnosticMetricSet struct {
	// End time of the period
	EndTime *time.Time `json:"endTime,omitempty"`

	// Name of the metric
	Name *string `json:"name,omitempty"`

	// Start time of the period
	StartTime *time.Time `json:"startTime,omitempty"`

	// Presented time grain. Supported grains at the moment are PT1M, PT1H, P1D
	TimeGrain *string `json:"timeGrain,omitempty"`

	// Metric's unit
	Unit *string `json:"unit,omitempty"`

	// Collection of metric values for the selected period based on the {Microsoft.Web.Hosting.Administration.DiagnosticMetricSet.TimeGrain}
	Values []*DiagnosticMetricSample `json:"values,omitempty"`
}

// MarshalJSON implements the json.Marshaller interface for type DiagnosticMetricSet.
func (d DiagnosticMetricSet) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "endTime", (*timeRFC3339)(d.EndTime))
	populate(objectMap, "name", d.Name)
	populate(objectMap, "startTime", (*timeRFC3339)(d.StartTime))
	populate(objectMap, "timeGrain", d.TimeGrain)
	populate(objectMap, "unit", d.Unit)
	populate(objectMap, "values", d.Values)
	return json.Marshal(objectMap)
}

// UnmarshalJSON implements the json.Unmarshaller interface for type DiagnosticMetricSet.
func (d *DiagnosticMetricSet) UnmarshalJSON(data []byte) error {
	var rawMsg map[string]json.RawMessage
	if err := json.Unmarshal(data, &rawMsg); err != nil {
		return err
	}
	for key, val := range rawMsg {
		var err error
		switch key {
		case "endTime":
			var aux timeRFC3339
			err = unpopulate(val, &aux)
			d.EndTime = (*time.Time)(&aux)
			delete(rawMsg, key)
		case "name":
			err = unpopulate(val, &d.Name)
			delete(rawMsg, key)
		case "startTime":
			var aux timeRFC3339
			err = unpopulate(val, &aux)
			d.StartTime = (*time.Time)(&aux)
			delete(rawMsg, key)
		case "timeGrain":
			err = unpopulate(val, &d.TimeGrain)
			delete(rawMsg, key)
		case "unit":
			err = unpopulate(val, &d.Unit)
			delete(rawMsg, key)
		case "values":
			err = unpopulate(val, &d.Values)
			delete(rawMsg, key)
		}
		if err != nil {
			return err
		}
	}
	return nil
}

// DiagnosticsExecuteSiteAnalysisOptions contains the optional parameters for the Diagnostics.ExecuteSiteAnalysis method.
type DiagnosticsExecuteSiteAnalysisOptions struct {
	// End Time
	EndTime *time.Time
	// Start Time
	StartTime *time.Time
	// Time Grain
	TimeGrain *string
}

// DiagnosticsExecuteSiteAnalysisSlotOptions contains the optional parameters for the Diagnostics.ExecuteSiteAnalysisSlot method.
type DiagnosticsExecuteSiteAnalysisSlotOptions struct {
	// End Time
	EndTime *time.Time
	// Start Time
	StartTime *time.Time
	// Time Grain
	TimeGrain *string
}

// DiagnosticsExecuteSiteDetectorOptions contains the optional parameters for the Diagnostics.ExecuteSiteDetector method.
type DiagnosticsExecuteSiteDetectorOptions struct {
	// End Time
	EndTime *time.Time
	// Start Time
	StartTime *time.Time
	// Time Grain
	TimeGrain *string
}

// DiagnosticsExecuteSiteDetectorSlotOptions contains the optional parameters for the Diagnostics.ExecuteSiteDetectorSlot method.
type DiagnosticsExecuteSiteDetectorSlotOptions struct {
	// End Time
	EndTime *time.Time
	// Start Time
	StartTime *time.Time
	// Time Grain
	TimeGrain *string
}

// DiagnosticsGetHostingEnvironmentDetectorResponseOptions contains the optional parameters for the Diagnostics.GetHostingEnvironmentDetectorResponse method.
type DiagnosticsGetHostingEnvironmentDetectorResponseOptions struct {
	// End Time
	EndTime *time.Time
	// Start Time
	StartTime *time.Time
	// Time Grain
	TimeGrain *string
}

// DiagnosticsGetSiteAnalysisOptions contains the optional parameters for the Diagnostics.GetSiteAnalysis method.
type DiagnosticsGetSiteAnalysisOptions struct {
	// placeholder for future optional parameters
}

// DiagnosticsGetSiteAnalysisSlotOptions contains the optional parameters for the Diagnostics.GetSiteAnalysisSlot method.
type DiagnosticsGetSiteAnalysisSlotOptions struct {
	// placeholder for future optional parameters
}

// DiagnosticsGetSiteDetectorOptions contains the optional parameters for the Diagnostics.GetSiteDetector method.
type DiagnosticsGetSiteDetectorOptions struct {
	// placeholder for future optional parameters
}

// DiagnosticsGetSiteDetectorResponseOptions contains the optional parameters for the Diagnostics.GetSiteDetectorResponse method.
type DiagnosticsGetSiteDetectorResponseOptions struct {
	// End Time
	EndTime *time.Time
	// Start Time
	StartTime *time.Time
	// Time Grain
	TimeGrain *string
}

// DiagnosticsGetSiteDetectorResponseSlotOptions contains the optional parameters for the Diagnostics.GetSiteDetectorResponseSlot method.
type DiagnosticsGetSiteDetectorResponseSlotOptions struct {
	// End Time
	EndTime *time.Time
	// Start Time
	StartTime *time.Time
	// Time Grain
	TimeGrain *string
}

// DiagnosticsGetSiteDetectorSlotOptions contains the optional parameters for the Diagnostics.GetSiteDetectorSlot method.
type DiagnosticsGetSiteDetectorSlotOptions struct {
	// placeholder for future optional parameters
}

// DiagnosticsGetSiteDiagnosticCategoryOptions contains the optional parameters for the Diagnostics.GetSiteDiagnosticCategory method.
type DiagnosticsGetSiteDiagnosticCategoryOptions struct {
	// placeholder for future optional parameters
}

// DiagnosticsGetSiteDiagnosticCategorySlotOptions contains the optional parameters for the Diagnostics.GetSiteDiagnosticCategorySlot method.
type DiagnosticsGetSiteDiagnosticCategorySlotOptions struct {
	// placeholder for future optional parameters
}

// DiagnosticsListHostingEnvironmentDetectorResponsesOptions contains the optional parameters for the Diagnostics.ListHostingEnvironmentDetectorResponses
// method.
type DiagnosticsListHostingEnvironmentDetectorResponsesOptions struct {
	// placeholder for future optional parameters
}

// DiagnosticsListSiteAnalysesOptions contains the optional parameters for the Diagnostics.ListSiteAnalyses method.
type DiagnosticsListSiteAnalysesOptions struct {
	// placeholder for future optional parameters
}

// DiagnosticsListSiteAnalysesSlotOptions contains the optional parameters for the Diagnostics.ListSiteAnalysesSlot method.
type DiagnosticsListSiteAnalysesSlotOptions struct {
	// placeholder for future optional parameters
}

// DiagnosticsListSiteDetectorResponsesOptions contains the optional parameters for the Diagnostics.ListSiteDetectorResponses method.
type DiagnosticsListSiteDetectorResponsesOptions struct {
	// placeholder for future optional parameters
}

// DiagnosticsListSiteDetectorResponsesSlotOptions contains the optional parameters for the Diagnostics.ListSiteDetectorResponsesSlot method.
type DiagnosticsListSiteDetectorResponsesSlotOptions struct {
	// placeholder for future optional parameters
}

// DiagnosticsListSiteDetectorsOptions contains the optional parameters for the Diagnostics.ListSiteDetectors method.
type DiagnosticsListSiteDetectorsOptions struct {
	// placeholder for future optional parameters
}

// DiagnosticsListSiteDetectorsSlotOptions contains the optional parameters for the Diagnostics.ListSiteDetectorsSlot method.
type DiagnosticsListSiteDetectorsSlotOptions struct {
	// placeholder for future optional parameters
}

// DiagnosticsListSiteDiagnosticCategoriesOptions contains the optional parameters for the Diagnostics.ListSiteDiagnosticCategories method.
type DiagnosticsListSiteDiagnosticCategoriesOptions struct {
	// placeholder for future optional parameters
}

// DiagnosticsListSiteDiagnosticCategoriesSlotOptions contains the optional parameters for the Diagnostics.ListSiteDiagnosticCategoriesSlot method.
type DiagnosticsListSiteDiagnosticCategoriesSlotOptions struct {
	// placeholder for future optional parameters
}

// Dimension of a resource metric. For e.g. instance specific HTTP requests for a web app, where instance name is dimension of the metric HTTP request
type Dimension struct {
	DisplayName            *string `json:"displayName,omitempty"`
	InternalName           *string `json:"internalName,omitempty"`
	Name                   *string `json:"name,omitempty"`
	ToBeExportedForShoebox *bool   `json:"toBeExportedForShoebox,omitempty"`
}

// Domain - Information about a domain.
type Domain struct {
	Resource
	// Domain resource specific properties
	Properties *DomainProperties `json:"properties,omitempty"`
}

// MarshalJSON implements the json.Marshaller interface for type Domain.
func (d Domain) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	d.Resource.marshalInternal(objectMap)
	populate(objectMap, "properties", d.Properties)
	return json.Marshal(objectMap)
}

// DomainAvailabilityCheckResult - Domain availability check result.
type DomainAvailabilityCheckResult struct {
	// true if domain can be purchased using CreateDomain API; otherwise, false.
	Available *bool `json:"available,omitempty"`

	// Valid values are Regular domain: Azure will charge the full price of domain registration, SoftDeleted: Purchasing this domain will simply restore it
	// and this operation will not cost anything.
	DomainType *DomainType `json:"domainType,omitempty"`

	// Name of the domain.
	Name *string `json:"name,omitempty"`
}

// DomainCollection - Collection of domains.
type DomainCollection struct {
	// REQUIRED; Collection of resources.
	Value []*Domain `json:"value,omitempty"`

	// READ-ONLY; Link to next page of resources.
	NextLink *string `json:"nextLink,omitempty" azure:"ro"`
}

// MarshalJSON implements the json.Marshaller interface for type DomainCollection.
func (d DomainCollection) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "nextLink", d.NextLink)
	populate(objectMap, "value", d.Value)
	return json.Marshal(objectMap)
}

// DomainControlCenterSsoRequest - Single sign-on request information for domain management.
type DomainControlCenterSsoRequest struct {
	// READ-ONLY; Post parameter key.
	PostParameterKey *string `json:"postParameterKey,omitempty" azure:"ro"`

	// READ-ONLY; Post parameter value. Client should use 'application/x-www-form-urlencoded' encoding for this value.
	PostParameterValue *string `json:"postParameterValue,omitempty" azure:"ro"`

	// READ-ONLY; URL where the single sign-on request is to be made.
	URL *string `json:"url,omitempty" azure:"ro"`
}

// DomainOwnershipIdentifier - Domain ownership Identifier.
type DomainOwnershipIdentifier struct {
	ProxyOnlyResource
	// DomainOwnershipIdentifier resource specific properties
	Properties *DomainOwnershipIdentifierProperties `json:"properties,omitempty"`
}

// MarshalJSON implements the json.Marshaller interface for type DomainOwnershipIdentifier.
func (d DomainOwnershipIdentifier) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	d.ProxyOnlyResource.marshalInternal(objectMap)
	populate(objectMap, "properties", d.Properties)
	return json.Marshal(objectMap)
}

// DomainOwnershipIdentifierCollection - Collection of domain ownership identifiers.
type DomainOwnershipIdentifierCollection struct {
	// REQUIRED; Collection of resources.
	Value []*DomainOwnershipIdentifier `json:"value,omitempty"`

	// READ-ONLY; Link to next page of resources.
	NextLink *string `json:"nextLink,omitempty" azure:"ro"`
}

// MarshalJSON implements the json.Marshaller interface for type DomainOwnershipIdentifierCollection.
func (d DomainOwnershipIdentifierCollection) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "nextLink", d.NextLink)
	populate(objectMap, "value", d.Value)
	return json.Marshal(objectMap)
}

// DomainOwnershipIdentifierProperties - DomainOwnershipIdentifier resource specific properties
type DomainOwnershipIdentifierProperties struct {
	// Ownership Id.
	OwnershipID *string `json:"ownershipId,omitempty"`
}

// DomainPatchResource - ARM resource for a domain.
type DomainPatchResource struct {
	ProxyOnlyResource
	// DomainPatchResource resource specific properties
	Properties *DomainPatchResourceProperties `json:"properties,omitempty"`
}

// MarshalJSON implements the json.Marshaller interface for type DomainPatchResource.
func (d DomainPatchResource) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	d.ProxyOnlyResource.marshalInternal(objectMap)
	populate(objectMap, "properties", d.Properties)
	return json.Marshal(objectMap)
}

// DomainPatchResourceProperties - DomainPatchResource resource specific properties
type DomainPatchResourceProperties struct {
	// REQUIRED; Legal agreement consent.
	Consent *DomainPurchaseConsent `json:"consent,omitempty"`

	// REQUIRED; Administrative contact.
	ContactAdmin *Contact `json:"contactAdmin,omitempty"`

	// REQUIRED; Billing contact.
	ContactBilling *Contact `json:"contactBilling,omitempty"`

	// REQUIRED; Registrant contact.
	ContactRegistrant *Contact `json:"contactRegistrant,omitempty"`

	// REQUIRED; Technical contact.
	ContactTech *Contact `json:"contactTech,omitempty"`
	AuthCode    *string  `json:"authCode,omitempty"`

	// true if the domain should be automatically renewed; otherwise, false.
	AutoRenew *bool `json:"autoRenew,omitempty"`

	// Current DNS type
	DNSType *DNSType `json:"dnsType,omitempty"`

	// Azure DNS Zone to use
	DNSZoneID *string `json:"dnsZoneId,omitempty"`

	// true if domain privacy is enabled for this domain; otherwise, false.
	Privacy *bool `json:"privacy,omitempty"`

	// Target DNS type (would be used for migration)
	TargetDNSType *DNSType `json:"targetDnsType,omitempty"`

	// READ-ONLY; Domain creation timestamp.
	CreatedTime *time.Time `json:"createdTime,omitempty" azure:"ro"`

	// READ-ONLY; Reasons why domain is not renewable.
	DomainNotRenewableReasons []*DomainPatchResourcePropertiesDomainNotRenewableReasonsItem `json:"domainNotRenewableReasons,omitempty" azure:"ro"`

	// READ-ONLY; Domain expiration timestamp.
	ExpirationTime *time.Time `json:"expirationTime,omitempty" azure:"ro"`

	// READ-ONLY; Timestamp when the domain was renewed last time.
	LastRenewedTime *time.Time `json:"lastRenewedTime,omitempty" azure:"ro"`

	// READ-ONLY; All hostnames derived from the domain and assigned to Azure resources.
	ManagedHostNames []*HostName `json:"managedHostNames,omitempty" azure:"ro"`

	// READ-ONLY; Name servers.
	NameServers []*string `json:"nameServers,omitempty" azure:"ro"`

	// READ-ONLY; Domain provisioning state.
	ProvisioningState *ProvisioningState `json:"provisioningState,omitempty" azure:"ro"`

	// READ-ONLY; true if Azure can assign this domain to App Service apps; otherwise, false. This value will be true if domain registration status is active
	// and it is hosted on name servers Azure has programmatic
	// access to.
	ReadyForDNSRecordManagement *bool `json:"readyForDnsRecordManagement,omitempty" azure:"ro"`

	// READ-ONLY; Domain registration status.
	RegistrationStatus *DomainStatus `json:"registrationStatus,omitempty" azure:"ro"`
}

// MarshalJSON implements the json.Marshaller interface for type DomainPatchResourceProperties.
func (d DomainPatchResourceProperties) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "authCode", d.AuthCode)
	populate(objectMap, "autoRenew", d.AutoRenew)
	populate(objectMap, "consent", d.Consent)
	populate(objectMap, "contactAdmin", d.ContactAdmin)
	populate(objectMap, "contactBilling", d.ContactBilling)
	populate(objectMap, "contactRegistrant", d.ContactRegistrant)
	populate(objectMap, "contactTech", d.ContactTech)
	populate(objectMap, "createdTime", (*timeRFC3339)(d.CreatedTime))
	populate(objectMap, "dnsType", d.DNSType)
	populate(objectMap, "dnsZoneId", d.DNSZoneID)
	populate(objectMap, "domainNotRenewableReasons", d.DomainNotRenewableReasons)
	populate(objectMap, "expirationTime", (*timeRFC3339)(d.ExpirationTime))
	populate(objectMap, "lastRenewedTime", (*timeRFC3339)(d.LastRenewedTime))
	populate(objectMap, "managedHostNames", d.ManagedHostNames)
	populate(objectMap, "nameServers", d.NameServers)
	populate(objectMap, "privacy", d.Privacy)
	populate(objectMap, "provisioningState", d.ProvisioningState)
	populate(objectMap, "readyForDnsRecordManagement", d.ReadyForDNSRecordManagement)
	populate(objectMap, "registrationStatus", d.RegistrationStatus)
	populate(objectMap, "targetDnsType", d.TargetDNSType)
	return json.Marshal(objectMap)
}

// UnmarshalJSON implements the json.Unmarshaller interface for type DomainPatchResourceProperties.
func (d *DomainPatchResourceProperties) UnmarshalJSON(data []byte) error {
	var rawMsg map[string]json.RawMessage
	if err := json.Unmarshal(data, &rawMsg); err != nil {
		return err
	}
	for key, val := range rawMsg {
		var err error
		switch key {
		case "authCode":
			err = unpopulate(val, &d.AuthCode)
			delete(rawMsg, key)
		case "autoRenew":
			err = unpopulate(val, &d.AutoRenew)
			delete(rawMsg, key)
		case "consent":
			err = unpopulate(val, &d.Consent)
			delete(rawMsg, key)
		case "contactAdmin":
			err = unpopulate(val, &d.ContactAdmin)
			delete(rawMsg, key)
		case "contactBilling":
			err = unpopulate(val, &d.ContactBilling)
			delete(rawMsg, key)
		case "contactRegistrant":
			err = unpopulate(val, &d.ContactRegistrant)
			delete(rawMsg, key)
		case "contactTech":
			err = unpopulate(val, &d.ContactTech)
			delete(rawMsg, key)
		case "createdTime":
			var aux timeRFC3339
			err = unpopulate(val, &aux)
			d.CreatedTime = (*time.Time)(&aux)
			delete(rawMsg, key)
		case "dnsType":
			err = unpopulate(val, &d.DNSType)
			delete(rawMsg, key)
		case "dnsZoneId":
			err = unpopulate(val, &d.DNSZoneID)
			delete(rawMsg, key)
		case "domainNotRenewableReasons":
			err = unpopulate(val, &d.DomainNotRenewableReasons)
			delete(rawMsg, key)
		case "expirationTime":
			var aux timeRFC3339
			err = unpopulate(val, &aux)
			d.ExpirationTime = (*time.Time)(&aux)
			delete(rawMsg, key)
		case "lastRenewedTime":
			var aux timeRFC3339
			err = unpopulate(val, &aux)
			d.LastRenewedTime = (*time.Time)(&aux)
			delete(rawMsg, key)
		case "managedHostNames":
			err = unpopulate(val, &d.ManagedHostNames)
			delete(rawMsg, key)
		case "nameServers":
			err = unpopulate(val, &d.NameServers)
			delete(rawMsg, key)
		case "privacy":
			err = unpopulate(val, &d.Privacy)
			delete(rawMsg, key)
		case "provisioningState":
			err = unpopulate(val, &d.ProvisioningState)
			delete(rawMsg, key)
		case "readyForDnsRecordManagement":
			err = unpopulate(val, &d.ReadyForDNSRecordManagement)
			delete(rawMsg, key)
		case "registrationStatus":
			err = unpopulate(val, &d.RegistrationStatus)
			delete(rawMsg, key)
		case "targetDnsType":
			err = unpopulate(val, &d.TargetDNSType)
			delete(rawMsg, key)
		}
		if err != nil {
			return err
		}
	}
	return nil
}

// DomainProperties - Domain resource specific properties
type DomainProperties struct {
	// REQUIRED; Legal agreement consent.
	Consent *DomainPurchaseConsent `json:"consent,omitempty"`

	// REQUIRED; Administrative contact.
	ContactAdmin *Contact `json:"contactAdmin,omitempty"`

	// REQUIRED; Billing contact.
	ContactBilling *Contact `json:"contactBilling,omitempty"`

	// REQUIRED; Registrant contact.
	ContactRegistrant *Contact `json:"contactRegistrant,omitempty"`

	// REQUIRED; Technical contact.
	ContactTech *Contact `json:"contactTech,omitempty"`
	AuthCode    *string  `json:"authCode,omitempty"`

	// true if the domain should be automatically renewed; otherwise, false.
	AutoRenew *bool `json:"autoRenew,omitempty"`

	// Current DNS type
	DNSType *DNSType `json:"dnsType,omitempty"`

	// Azure DNS Zone to use
	DNSZoneID *string `json:"dnsZoneId,omitempty"`

	// true if domain privacy is enabled for this domain; otherwise, false.
	Privacy *bool `json:"privacy,omitempty"`

	// Target DNS type (would be used for migration)
	TargetDNSType *DNSType `json:"targetDnsType,omitempty"`

	// READ-ONLY; Domain creation timestamp.
	CreatedTime *time.Time `json:"createdTime,omitempty" azure:"ro"`

	// READ-ONLY; Reasons why domain is not renewable.
	DomainNotRenewableReasons []*DomainPropertiesDomainNotRenewableReasonsItem `json:"domainNotRenewableReasons,omitempty" azure:"ro"`

	// READ-ONLY; Domain expiration timestamp.
	ExpirationTime *time.Time `json:"expirationTime,omitempty" azure:"ro"`

	// READ-ONLY; Timestamp when the domain was renewed last time.
	LastRenewedTime *time.Time `json:"lastRenewedTime,omitempty" azure:"ro"`

	// READ-ONLY; All hostnames derived from the domain and assigned to Azure resources.
	ManagedHostNames []*HostName `json:"managedHostNames,omitempty" azure:"ro"`

	// READ-ONLY; Name servers.
	NameServers []*string `json:"nameServers,omitempty" azure:"ro"`

	// READ-ONLY; Domain provisioning state.
	ProvisioningState *ProvisioningState `json:"provisioningState,omitempty" azure:"ro"`

	// READ-ONLY; true if Azure can assign this domain to App Service apps; otherwise, false. This value will be true if domain registration status is active
	// and it is hosted on name servers Azure has programmatic
	// access to.
	ReadyForDNSRecordManagement *bool `json:"readyForDnsRecordManagement,omitempty" azure:"ro"`

	// READ-ONLY; Domain registration status.
	RegistrationStatus *DomainStatus `json:"registrationStatus,omitempty" azure:"ro"`
}

// MarshalJSON implements the json.Marshaller interface for type DomainProperties.
func (d DomainProperties) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "authCode", d.AuthCode)
	populate(objectMap, "autoRenew", d.AutoRenew)
	populate(objectMap, "consent", d.Consent)
	populate(objectMap, "contactAdmin", d.ContactAdmin)
	populate(objectMap, "contactBilling", d.ContactBilling)
	populate(objectMap, "contactRegistrant", d.ContactRegistrant)
	populate(objectMap, "contactTech", d.ContactTech)
	populate(objectMap, "createdTime", (*timeRFC3339)(d.CreatedTime))
	populate(objectMap, "dnsType", d.DNSType)
	populate(objectMap, "dnsZoneId", d.DNSZoneID)
	populate(objectMap, "domainNotRenewableReasons", d.DomainNotRenewableReasons)
	populate(objectMap, "expirationTime", (*timeRFC3339)(d.ExpirationTime))
	populate(objectMap, "lastRenewedTime", (*timeRFC3339)(d.LastRenewedTime))
	populate(objectMap, "managedHostNames", d.ManagedHostNames)
	populate(objectMap, "nameServers", d.NameServers)
	populate(objectMap, "privacy", d.Privacy)
	populate(objectMap, "provisioningState", d.ProvisioningState)
	populate(objectMap, "readyForDnsRecordManagement", d.ReadyForDNSRecordManagement)
	populate(objectMap, "registrationStatus", d.RegistrationStatus)
	populate(objectMap, "targetDnsType", d.TargetDNSType)
	return json.Marshal(objectMap)
}

// UnmarshalJSON implements the json.Unmarshaller interface for type DomainProperties.
func (d *DomainProperties) UnmarshalJSON(data []byte) error {
	var rawMsg map[string]json.RawMessage
	if err := json.Unmarshal(data, &rawMsg); err != nil {
		return err
	}
	for key, val := range rawMsg {
		var err error
		switch key {
		case "authCode":
			err = unpopulate(val, &d.AuthCode)
			delete(rawMsg, key)
		case "autoRenew":
			err = unpopulate(val, &d.AutoRenew)
			delete(rawMsg, key)
		case "consent":
			err = unpopulate(val, &d.Consent)
			delete(rawMsg, key)
		case "contactAdmin":
			err = unpopulate(val, &d.ContactAdmin)
			delete(rawMsg, key)
		case "contactBilling":
			err = unpopulate(val, &d.ContactBilling)
			delete(rawMsg, key)
		case "contactRegistrant":
			err = unpopulate(val, &d.ContactRegistrant)
			delete(rawMsg, key)
		case "contactTech":
			err = unpopulate(val, &d.ContactTech)
			delete(rawMsg, key)
		case "createdTime":
			var aux timeRFC3339
			err = unpopulate(val, &aux)
			d.CreatedTime = (*time.Time)(&aux)
			delete(rawMsg, key)
		case "dnsType":
			err = unpopulate(val, &d.DNSType)
			delete(rawMsg, key)
		case "dnsZoneId":
			err = unpopulate(val, &d.DNSZoneID)
			delete(rawMsg, key)
		case "domainNotRenewableReasons":
			err = unpopulate(val, &d.DomainNotRenewableReasons)
			delete(rawMsg, key)
		case "expirationTime":
			var aux timeRFC3339
			err = unpopulate(val, &aux)
			d.ExpirationTime = (*time.Time)(&aux)
			delete(rawMsg, key)
		case "lastRenewedTime":
			var aux timeRFC3339
			err = unpopulate(val, &aux)
			d.LastRenewedTime = (*time.Time)(&aux)
			delete(rawMsg, key)
		case "managedHostNames":
			err = unpopulate(val, &d.ManagedHostNames)
			delete(rawMsg, key)
		case "nameServers":
			err = unpopulate(val, &d.NameServers)
			delete(rawMsg, key)
		case "privacy":
			err = unpopulate(val, &d.Privacy)
			delete(rawMsg, key)
		case "provisioningState":
			err = unpopulate(val, &d.ProvisioningState)
			delete(rawMsg, key)
		case "readyForDnsRecordManagement":
			err = unpopulate(val, &d.ReadyForDNSRecordManagement)
			delete(rawMsg, key)
		case "registrationStatus":
			err = unpopulate(val, &d.RegistrationStatus)
			delete(rawMsg, key)
		case "targetDnsType":
			err = unpopulate(val, &d.TargetDNSType)
			delete(rawMsg, key)
		}
		if err != nil {
			return err
		}
	}
	return nil
}

// DomainPurchaseConsent - Domain purchase consent object, representing acceptance of applicable legal agreements.
type DomainPurchaseConsent struct {
	// Timestamp when the agreements were accepted.
	AgreedAt *time.Time `json:"agreedAt,omitempty"`

	// Client IP address.
	AgreedBy *string `json:"agreedBy,omitempty"`

	// List of applicable legal agreement keys. This list can be retrieved using ListLegalAgreements API under TopLevelDomain resource.
	AgreementKeys []*string `json:"agreementKeys,omitempty"`
}

// MarshalJSON implements the json.Marshaller interface for type DomainPurchaseConsent.
func (d DomainPurchaseConsent) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "agreedAt", (*timeRFC3339)(d.AgreedAt))
	populate(objectMap, "agreedBy", d.AgreedBy)
	populate(objectMap, "agreementKeys", d.AgreementKeys)
	return json.Marshal(objectMap)
}

// UnmarshalJSON implements the json.Unmarshaller interface for type DomainPurchaseConsent.
func (d *DomainPurchaseConsent) UnmarshalJSON(data []byte) error {
	var rawMsg map[string]json.RawMessage
	if err := json.Unmarshal(data, &rawMsg); err != nil {
		return err
	}
	for key, val := range rawMsg {
		var err error
		switch key {
		case "agreedAt":
			var aux timeRFC3339
			err = unpopulate(val, &aux)
			d.AgreedAt = (*time.Time)(&aux)
			delete(rawMsg, key)
		case "agreedBy":
			err = unpopulate(val, &d.AgreedBy)
			delete(rawMsg, key)
		case "agreementKeys":
			err = unpopulate(val, &d.AgreementKeys)
			delete(rawMsg, key)
		}
		if err != nil {
			return err
		}
	}
	return nil
}

// DomainRecommendationSearchParameters - Domain recommendation search parameters.
type DomainRecommendationSearchParameters struct {
	// Keywords to be used for generating domain recommendations.
	Keywords *string `json:"keywords,omitempty"`

	// Maximum number of recommendations.
	MaxDomainRecommendations *int32 `json:"maxDomainRecommendations,omitempty"`
}

// DomainRegistrationProviderListOperationsOptions contains the optional parameters for the DomainRegistrationProvider.ListOperations method.
type DomainRegistrationProviderListOperationsOptions struct {
	// placeholder for future optional parameters
}

// DomainsBeginCreateOrUpdateOptions contains the optional parameters for the Domains.BeginCreateOrUpdate method.
type DomainsBeginCreateOrUpdateOptions struct {
	// placeholder for future optional parameters
}

// DomainsCheckAvailabilityOptions contains the optional parameters for the Domains.CheckAvailability method.
type DomainsCheckAvailabilityOptions struct {
	// placeholder for future optional parameters
}

// DomainsCreateOrUpdateOwnershipIdentifierOptions contains the optional parameters for the Domains.CreateOrUpdateOwnershipIdentifier method.
type DomainsCreateOrUpdateOwnershipIdentifierOptions struct {
	// placeholder for future optional parameters
}

// DomainsDeleteOptions contains the optional parameters for the Domains.Delete method.
type DomainsDeleteOptions struct {
	// Specify <code>true</code> to delete the domain immediately. The default is <code>false</code> which deletes the domain after 24 hours.
	ForceHardDeleteDomain *bool
}

// DomainsDeleteOwnershipIdentifierOptions contains the optional parameters for the Domains.DeleteOwnershipIdentifier method.
type DomainsDeleteOwnershipIdentifierOptions struct {
	// placeholder for future optional parameters
}

// DomainsGetControlCenterSsoRequestOptions contains the optional parameters for the Domains.GetControlCenterSsoRequest method.
type DomainsGetControlCenterSsoRequestOptions struct {
	// placeholder for future optional parameters
}

// DomainsGetOptions contains the optional parameters for the Domains.Get method.
type DomainsGetOptions struct {
	// placeholder for future optional parameters
}

// DomainsGetOwnershipIdentifierOptions contains the optional parameters for the Domains.GetOwnershipIdentifier method.
type DomainsGetOwnershipIdentifierOptions struct {
	// placeholder for future optional parameters
}

// DomainsListByResourceGroupOptions contains the optional parameters for the Domains.ListByResourceGroup method.
type DomainsListByResourceGroupOptions struct {
	// placeholder for future optional parameters
}

// DomainsListOptions contains the optional parameters for the Domains.List method.
type DomainsListOptions struct {
	// placeholder for future optional parameters
}

// DomainsListOwnershipIdentifiersOptions contains the optional parameters for the Domains.ListOwnershipIdentifiers method.
type DomainsListOwnershipIdentifiersOptions struct {
	// placeholder for future optional parameters
}

// DomainsListRecommendationsOptions contains the optional parameters for the Domains.ListRecommendations method.
type DomainsListRecommendationsOptions struct {
	// placeholder for future optional parameters
}

// DomainsRenewOptions contains the optional parameters for the Domains.Renew method.
type DomainsRenewOptions struct {
	// placeholder for future optional parameters
}

// DomainsUpdateOptions contains the optional parameters for the Domains.Update method.
type DomainsUpdateOptions struct {
	// placeholder for future optional parameters
}

// DomainsUpdateOwnershipIdentifierOptions contains the optional parameters for the Domains.UpdateOwnershipIdentifier method.
type DomainsUpdateOwnershipIdentifierOptions struct {
	// placeholder for future optional parameters
}

// EnabledConfig - Enabled configuration.
type EnabledConfig struct {
	// True if configuration is enabled, false if it is disabled and null if configuration is not set.
	Enabled *bool `json:"enabled,omitempty"`
}

// EndpointDependency - A domain name that a service is reached at, including details of the current connection status.
type EndpointDependency struct {
	// The domain name of the dependency.
	DomainName *string `json:"domainName,omitempty"`

	// The IP Addresses and Ports used when connecting to DomainName.
	EndpointDetails []*EndpointDetail `json:"endpointDetails,omitempty"`
}

// MarshalJSON implements the json.Marshaller interface for type EndpointDependency.
func (e EndpointDependency) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "domainName", e.DomainName)
	populate(objectMap, "endpointDetails", e.EndpointDetails)
	return json.Marshal(objectMap)
}

// EndpointDetail - Current TCP connectivity information from the App Service Environment to a single endpoint.
type EndpointDetail struct {
	// An IP Address that Domain Name currently resolves to.
	IPAddress *string `json:"ipAddress,omitempty"`

	// Whether it is possible to create a TCP connection from the App Service Environment to this IpAddress at this Port.
	IsAccessible *bool `json:"isAccessible,omitempty"`

	// The time in milliseconds it takes for a TCP connection to be created from the App Service Environment to this IpAddress at this Port.
	Latency *float64 `json:"latency,omitempty"`

	// The port an endpoint is connected to.
	Port *int32 `json:"port,omitempty"`
}

// ErrorEntity - Body of the error response returned from the API.
type ErrorEntity struct {
	// Basic error code.
	Code *string `json:"code,omitempty"`

	// Error Details.
	Details []*ErrorEntity `json:"details,omitempty"`

	// Type of error.
	ExtendedCode *string `json:"extendedCode,omitempty"`

	// Inner errors.
	InnerErrors []*ErrorEntity `json:"innerErrors,omitempty"`

	// Any details of the error.
	Message *string `json:"message,omitempty"`

	// Message template.
	MessageTemplate *string `json:"messageTemplate,omitempty"`

	// Parameters for the template.
	Parameters []*string `json:"parameters,omitempty"`

	// The error target.
	Target *string `json:"target,omitempty"`
}

// MarshalJSON implements the json.Marshaller interface for type ErrorEntity.
func (e ErrorEntity) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "code", e.Code)
	populate(objectMap, "details", e.Details)
	populate(objectMap, "extendedCode", e.ExtendedCode)
	populate(objectMap, "innerErrors", e.InnerErrors)
	populate(objectMap, "message", e.Message)
	populate(objectMap, "messageTemplate", e.MessageTemplate)
	populate(objectMap, "parameters", e.Parameters)
	populate(objectMap, "target", e.Target)
	return json.Marshal(objectMap)
}

// Experiments - Routing rules in production experiments.
type Experiments struct {
	// List of ramp-up rules.
	RampUpRules []*RampUpRule `json:"rampUpRules,omitempty"`
}

// MarshalJSON implements the json.Marshaller interface for type Experiments.
func (e Experiments) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "rampUpRules", e.RampUpRules)
	return json.Marshal(objectMap)
}

// ExtendedLocation - Extended Location.
type ExtendedLocation struct {
	// Name of extended location.
	Name *string `json:"name,omitempty"`

	// READ-ONLY; Type of extended location.
	Type *string `json:"type,omitempty" azure:"ro"`
}

// Facebook - The configuration settings of the Facebook provider.
type Facebook struct {
	// false if the Facebook provider should not be enabled despite the set registration; otherwise, true.
	Enabled *bool `json:"enabled,omitempty"`

	// The version of the Facebook api to be used while logging in.
	GraphAPIVersion *string `json:"graphApiVersion,omitempty"`

	// The configuration settings of the login flow.
	Login *LoginScopes `json:"login,omitempty"`

	// The configuration settings of the app registration for the Facebook provider.
	Registration *AppRegistration `json:"registration,omitempty"`
}

// FileSystemApplicationLogsConfig - Application logs to file system configuration.
type FileSystemApplicationLogsConfig struct {
	// Log level.
	Level *LogLevel `json:"level,omitempty"`
}

// FileSystemHTTPLogsConfig - Http logs to file system configuration.
type FileSystemHTTPLogsConfig struct {
	// True if configuration is enabled, false if it is disabled and null if configuration is not set.
	Enabled *bool `json:"enabled,omitempty"`

	// Retention in days. Remove files older than X days. 0 or lower means no retention.
	RetentionInDays *int32 `json:"retentionInDays,omitempty"`

	// Maximum size in megabytes that http log files can use. When reached old log files will be removed to make space for new ones. Value can range between
	// 25 and 100.
	RetentionInMb *int32 `json:"retentionInMb,omitempty"`
}

// FileSystemTokenStore - The configuration settings of the storage of the tokens if a file system is used.
type FileSystemTokenStore struct {
	// The directory in which the tokens will be stored.
	Directory *string `json:"directory,omitempty"`
}

// ForwardProxy - The configuration settings of a forward proxy used to make the requests.
type ForwardProxy struct {
	// The convention used to determine the url of the request made.
	Convention *ForwardProxyConvention `json:"convention,omitempty"`

	// The name of the header containing the host of the request.
	CustomHostHeaderName *string `json:"customHostHeaderName,omitempty"`

	// The name of the header containing the scheme of the request.
	CustomProtoHeaderName *string `json:"customProtoHeaderName,omitempty"`
}

type FrontEndConfiguration struct {
	Kind *FrontEndServiceType `json:"kind,omitempty"`
}

// FunctionAppMajorVersion - Function App stack major version.
type FunctionAppMajorVersion struct {
	// READ-ONLY; Function App stack major version (display only).
	DisplayText *string `json:"displayText,omitempty" azure:"ro"`

	// READ-ONLY; Minor versions associated with the major version.
	MinorVersions []*FunctionAppMinorVersion `json:"minorVersions,omitempty" azure:"ro"`

	// READ-ONLY; Function App stack major version name.
	Value *string `json:"value,omitempty" azure:"ro"`
}

// MarshalJSON implements the json.Marshaller interface for type FunctionAppMajorVersion.
func (f FunctionAppMajorVersion) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "displayText", f.DisplayText)
	populate(objectMap, "minorVersions", f.MinorVersions)
	populate(objectMap, "value", f.Value)
	return json.Marshal(objectMap)
}

// FunctionAppMinorVersion - Function App stack minor version.
type FunctionAppMinorVersion struct {
	// READ-ONLY; Function App stack (display only).
	DisplayText *string `json:"displayText,omitempty" azure:"ro"`

	// READ-ONLY; Settings associated with the minor version.
	StackSettings *FunctionAppRuntimes `json:"stackSettings,omitempty" azure:"ro"`

	// READ-ONLY; Function App stack name.
	Value *string `json:"value,omitempty" azure:"ro"`
}

// FunctionAppRuntimeSettings - Function App runtime settings.
type FunctionAppRuntimeSettings struct {
	// READ-ONLY; Application Insights settings associated with the minor version.
	AppInsightsSettings *AppInsightsWebAppStackSettings `json:"appInsightsSettings,omitempty" azure:"ro"`

	// READ-ONLY; Application settings associated with the minor version.
	AppSettingsDictionary map[string]*string `json:"appSettingsDictionary,omitempty" azure:"ro"`

	// READ-ONLY; End-of-life date for the minor version.
	EndOfLifeDate *time.Time `json:"endOfLifeDate,omitempty" azure:"ro"`

	// READ-ONLY; GitHub Actions settings associated with the minor version.
	GitHubActionSettings *GitHubActionWebAppStackSettings `json:"gitHubActionSettings,omitempty" azure:"ro"`

	// READ-ONLY; true if the stack version is auto-updated; otherwise, false.
	IsAutoUpdate *bool `json:"isAutoUpdate,omitempty" azure:"ro"`

	// READ-ONLY; true if the minor version the default; otherwise, false.
	IsDefault *bool `json:"isDefault,omitempty" azure:"ro"`

	// READ-ONLY; true if the stack is deprecated; otherwise, false.
	IsDeprecated *bool `json:"isDeprecated,omitempty" azure:"ro"`

	// READ-ONLY; true if the minor version is early-access; otherwise, false.
	IsEarlyAccess *bool `json:"isEarlyAccess,omitempty" azure:"ro"`

	// READ-ONLY; true if the stack should be hidden; otherwise, false.
	IsHidden *bool `json:"isHidden,omitempty" azure:"ro"`

	// READ-ONLY; true if the stack is in preview; otherwise, false.
	IsPreview *bool `json:"isPreview,omitempty" azure:"ro"`

	// READ-ONLY; true if remote debugging is supported for the stack; otherwise, false.
	RemoteDebuggingSupported *bool `json:"remoteDebuggingSupported,omitempty" azure:"ro"`

	// READ-ONLY; Function App stack minor version (runtime only).
	RuntimeVersion *string `json:"runtimeVersion,omitempty" azure:"ro"`

	// READ-ONLY; Configuration settings associated with the minor version.
	SiteConfigPropertiesDictionary *SiteConfigPropertiesDictionary `json:"siteConfigPropertiesDictionary,omitempty" azure:"ro"`

	// READ-ONLY; List of supported Functions extension versions.
	SupportedFunctionsExtensionVersions []*string `json:"supportedFunctionsExtensionVersions,omitempty" azure:"ro"`
}

// MarshalJSON implements the json.Marshaller interface for type FunctionAppRuntimeSettings.
func (f FunctionAppRuntimeSettings) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "appInsightsSettings", f.AppInsightsSettings)
	populate(objectMap, "appSettingsDictionary", f.AppSettingsDictionary)
	populate(objectMap, "endOfLifeDate", (*timeRFC3339)(f.EndOfLifeDate))
	populate(objectMap, "gitHubActionSettings", f.GitHubActionSettings)
	populate(objectMap, "isAutoUpdate", f.IsAutoUpdate)
	populate(objectMap, "isDefault", f.IsDefault)
	populate(objectMap, "isDeprecated", f.IsDeprecated)
	populate(objectMap, "isEarlyAccess", f.IsEarlyAccess)
	populate(objectMap, "isHidden", f.IsHidden)
	populate(objectMap, "isPreview", f.IsPreview)
	populate(objectMap, "remoteDebuggingSupported", f.RemoteDebuggingSupported)
	populate(objectMap, "runtimeVersion", f.RuntimeVersion)
	populate(objectMap, "siteConfigPropertiesDictionary", f.SiteConfigPropertiesDictionary)
	populate(objectMap, "supportedFunctionsExtensionVersions", f.SupportedFunctionsExtensionVersions)
	return json.Marshal(objectMap)
}

// UnmarshalJSON implements the json.Unmarshaller interface for type FunctionAppRuntimeSettings.
func (f *FunctionAppRuntimeSettings) UnmarshalJSON(data []byte) error {
	var rawMsg map[string]json.RawMessage
	if err := json.Unmarshal(data, &rawMsg); err != nil {
		return err
	}
	for key, val := range rawMsg {
		var err error
		switch key {
		case "appInsightsSettings":
			err = unpopulate(val, &f.AppInsightsSettings)
			delete(rawMsg, key)
		case "appSettingsDictionary":
			err = unpopulate(val, &f.AppSettingsDictionary)
			delete(rawMsg, key)
		case "endOfLifeDate":
			var aux timeRFC3339
			err = unpopulate(val, &aux)
			f.EndOfLifeDate = (*time.Time)(&aux)
			delete(rawMsg, key)
		case "gitHubActionSettings":
			err = unpopulate(val, &f.GitHubActionSettings)
			delete(rawMsg, key)
		case "isAutoUpdate":
			err = unpopulate(val, &f.IsAutoUpdate)
			delete(rawMsg, key)
		case "isDefault":
			err = unpopulate(val, &f.IsDefault)
			delete(rawMsg, key)
		case "isDeprecated":
			err = unpopulate(val, &f.IsDeprecated)
			delete(rawMsg, key)
		case "isEarlyAccess":
			err = unpopulate(val, &f.IsEarlyAccess)
			delete(rawMsg, key)
		case "isHidden":
			err = unpopulate(val, &f.IsHidden)
			delete(rawMsg, key)
		case "isPreview":
			err = unpopulate(val, &f.IsPreview)
			delete(rawMsg, key)
		case "remoteDebuggingSupported":
			err = unpopulate(val, &f.RemoteDebuggingSupported)
			delete(rawMsg, key)
		case "runtimeVersion":
			err = unpopulate(val, &f.RuntimeVersion)
			delete(rawMsg, key)
		case "siteConfigPropertiesDictionary":
			err = unpopulate(val, &f.SiteConfigPropertiesDictionary)
			delete(rawMsg, key)
		case "supportedFunctionsExtensionVersions":
			err = unpopulate(val, &f.SupportedFunctionsExtensionVersions)
			delete(rawMsg, key)
		}
		if err != nil {
			return err
		}
	}
	return nil
}

// FunctionAppRuntimes - Function App stack runtimes.
type FunctionAppRuntimes struct {
	// READ-ONLY; Linux-specific settings associated with the minor version.
	LinuxRuntimeSettings *FunctionAppRuntimeSettings `json:"linuxRuntimeSettings,omitempty" azure:"ro"`

	// READ-ONLY; Windows-specific settings associated with the minor version.
	WindowsRuntimeSettings *FunctionAppRuntimeSettings `json:"windowsRuntimeSettings,omitempty" azure:"ro"`
}

// FunctionAppStack - Function App Stack.
type FunctionAppStack struct {
	ProxyOnlyResource
	// FunctionAppStack resource specific properties
	Properties *FunctionAppStackProperties `json:"properties,omitempty"`

	// READ-ONLY; Function App stack location.
	Location *string `json:"location,omitempty" azure:"ro"`
}

// MarshalJSON implements the json.Marshaller interface for type FunctionAppStack.
func (f FunctionAppStack) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	f.ProxyOnlyResource.marshalInternal(objectMap)
	populate(objectMap, "location", f.Location)
	populate(objectMap, "properties", f.Properties)
	return json.Marshal(objectMap)
}

// FunctionAppStackCollection - Collection of Function app Stacks
type FunctionAppStackCollection struct {
	// REQUIRED; Collection of resources.
	Value []*FunctionAppStack `json:"value,omitempty"`

	// READ-ONLY; Link to next page of resources.
	NextLink *string `json:"nextLink,omitempty" azure:"ro"`
}

// MarshalJSON implements the json.Marshaller interface for type FunctionAppStackCollection.
func (f FunctionAppStackCollection) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "nextLink", f.NextLink)
	populate(objectMap, "value", f.Value)
	return json.Marshal(objectMap)
}

// FunctionAppStackProperties - FunctionAppStack resource specific properties
type FunctionAppStackProperties struct {
	// READ-ONLY; Function App stack (display only).
	DisplayText *string `json:"displayText,omitempty" azure:"ro"`

	// READ-ONLY; List of major versions available.
	MajorVersions []*FunctionAppMajorVersion `json:"majorVersions,omitempty" azure:"ro"`

	// READ-ONLY; Function App stack preferred OS.
	PreferredOs *StackPreferredOs `json:"preferredOs,omitempty" azure:"ro"`

	// READ-ONLY; Function App stack name.
	Value *string `json:"value,omitempty" azure:"ro"`
}

// MarshalJSON implements the json.Marshaller interface for type FunctionAppStackProperties.
func (f FunctionAppStackProperties) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "displayText", f.DisplayText)
	populate(objectMap, "majorVersions", f.MajorVersions)
	populate(objectMap, "preferredOs", f.PreferredOs)
	populate(objectMap, "value", f.Value)
	return json.Marshal(objectMap)
}

// FunctionEnvelope - Function information.
type FunctionEnvelope struct {
	ProxyOnlyResource
	// FunctionEnvelope resource specific properties
	Properties *FunctionEnvelopeProperties `json:"properties,omitempty"`
}

// MarshalJSON implements the json.Marshaller interface for type FunctionEnvelope.
func (f FunctionEnvelope) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	f.ProxyOnlyResource.marshalInternal(objectMap)
	populate(objectMap, "properties", f.Properties)
	return json.Marshal(objectMap)
}

// FunctionEnvelopeCollection - Collection of Kudu function information elements.
type FunctionEnvelopeCollection struct {
	// REQUIRED; Collection of resources.
	Value []*FunctionEnvelope `json:"value,omitempty"`

	// READ-ONLY; Link to next page of resources.
	NextLink *string `json:"nextLink,omitempty" azure:"ro"`
}

// MarshalJSON implements the json.Marshaller interface for type FunctionEnvelopeCollection.
func (f FunctionEnvelopeCollection) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "nextLink", f.NextLink)
	populate(objectMap, "value", f.Value)
	return json.Marshal(objectMap)
}

// FunctionEnvelopeProperties - FunctionEnvelope resource specific properties
type FunctionEnvelopeProperties struct {
	// Config information.
	Config map[string]interface{} `json:"config,omitempty"`

	// Config URI.
	ConfigHref *string `json:"config_href,omitempty"`

	// File list.
	Files map[string]*string `json:"files,omitempty"`

	// Function App ID.
	FunctionAppID *string `json:"function_app_id,omitempty"`

	// Function URI.
	Href *string `json:"href,omitempty"`

	// The invocation URL
	InvokeURLTemplate *string `json:"invoke_url_template,omitempty"`

	// Gets or sets a value indicating whether the function is disabled
	IsDisabled *bool `json:"isDisabled,omitempty"`

	// The function language
	Language *string `json:"language,omitempty"`

	// Script URI.
	ScriptHref *string `json:"script_href,omitempty"`

	// Script root path URI.
	ScriptRootPathHref *string `json:"script_root_path_href,omitempty"`

	// Secrets file URI.
	SecretsFileHref *string `json:"secrets_file_href,omitempty"`

	// Test data used when testing via the Azure Portal.
	TestData *string `json:"test_data,omitempty"`

	// Test data URI.
	TestDataHref *string `json:"test_data_href,omitempty"`
}

// MarshalJSON implements the json.Marshaller interface for type FunctionEnvelopeProperties.
func (f FunctionEnvelopeProperties) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "config", f.Config)
	populate(objectMap, "config_href", f.ConfigHref)
	populate(objectMap, "files", f.Files)
	populate(objectMap, "function_app_id", f.FunctionAppID)
	populate(objectMap, "href", f.Href)
	populate(objectMap, "invoke_url_template", f.InvokeURLTemplate)
	populate(objectMap, "isDisabled", f.IsDisabled)
	populate(objectMap, "language", f.Language)
	populate(objectMap, "script_href", f.ScriptHref)
	populate(objectMap, "script_root_path_href", f.ScriptRootPathHref)
	populate(objectMap, "secrets_file_href", f.SecretsFileHref)
	populate(objectMap, "test_data", f.TestData)
	populate(objectMap, "test_data_href", f.TestDataHref)
	return json.Marshal(objectMap)
}

// FunctionSecrets - Function secrets.
type FunctionSecrets struct {
	// Secret key.
	Key *string `json:"key,omitempty"`

	// Trigger URL.
	TriggerURL *string `json:"trigger_url,omitempty"`
}

// GeoRegion - Geographical region.
type GeoRegion struct {
	ProxyOnlyResource
	// GeoRegion resource specific properties
	Properties *GeoRegionProperties `json:"properties,omitempty"`
}

// MarshalJSON implements the json.Marshaller interface for type GeoRegion.
func (g GeoRegion) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	g.ProxyOnlyResource.marshalInternal(objectMap)
	populate(objectMap, "properties", g.Properties)
	return json.Marshal(objectMap)
}

// GeoRegionCollection - Collection of geographical regions.
type GeoRegionCollection struct {
	// REQUIRED; Collection of resources.
	Value []*GeoRegion `json:"value,omitempty"`

	// READ-ONLY; Link to next page of resources.
	NextLink *string `json:"nextLink,omitempty" azure:"ro"`
}

// MarshalJSON implements the json.Marshaller interface for type GeoRegionCollection.
func (g GeoRegionCollection) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "nextLink", g.NextLink)
	populate(objectMap, "value", g.Value)
	return json.Marshal(objectMap)
}

// GeoRegionProperties - GeoRegion resource specific properties
type GeoRegionProperties struct {
	// READ-ONLY; Region description.
	Description *string `json:"description,omitempty" azure:"ro"`

	// READ-ONLY; Display name for region.
	DisplayName *string `json:"displayName,omitempty" azure:"ro"`

	// READ-ONLY; Display name for region.
	OrgDomain *string `json:"orgDomain,omitempty" azure:"ro"`
}

// GitHub - The configuration settings of the GitHub provider.
type GitHub struct {
	// false if the GitHub provider should not be enabled despite the set registration; otherwise, true.
	Enabled *bool `json:"enabled,omitempty"`

	// The configuration settings of the login flow.
	Login *LoginScopes `json:"login,omitempty"`

	// The configuration settings of the app registration for the GitHub provider.
	Registration *ClientRegistration `json:"registration,omitempty"`
}

// GitHubActionCodeConfiguration - The GitHub action code configuration.
type GitHubActionCodeConfiguration struct {
	// Runtime stack is used to determine the workflow file content for code base apps.
	RuntimeStack *string `json:"runtimeStack,omitempty"`

	// Runtime version is used to determine what build version to set in the workflow file.
	RuntimeVersion *string `json:"runtimeVersion,omitempty"`
}

// GitHubActionConfiguration - The GitHub action configuration.
type GitHubActionConfiguration struct {
	// GitHub Action code configuration.
	CodeConfiguration *GitHubActionCodeConfiguration `json:"codeConfiguration,omitempty"`

	// GitHub Action container configuration.
	ContainerConfiguration *GitHubActionContainerConfiguration `json:"containerConfiguration,omitempty"`

	// Workflow option to determine whether the workflow file should be generated and written to the repository.
	GenerateWorkflowFile *bool `json:"generateWorkflowFile,omitempty"`

	// This will help determine the workflow configuration to select.
	IsLinux *bool `json:"isLinux,omitempty"`
}

// GitHubActionContainerConfiguration - The GitHub action container configuration.
type GitHubActionContainerConfiguration struct {
	// The image name for the build.
	ImageName *string `json:"imageName,omitempty"`

	// The password used to upload the image to the container registry.
	Password *string `json:"password,omitempty"`

	// The server URL for the container registry where the build will be hosted.
	ServerURL *string `json:"serverUrl,omitempty"`

	// The username used to upload the image to the container registry.
	Username *string `json:"username,omitempty"`
}

// GitHubActionWebAppStackSettings - GitHub Actions Web App stack settings.
type GitHubActionWebAppStackSettings struct {
	// READ-ONLY; true if GitHub Actions is supported for the stack; otherwise, false.
	IsSupported *bool `json:"isSupported,omitempty" azure:"ro"`

	// READ-ONLY; The minor version that is supported for GitHub Actions.
	SupportedVersion *string `json:"supportedVersion,omitempty" azure:"ro"`
}

// GlobalCsmSKUDescription - A Global SKU Description.
type GlobalCsmSKUDescription struct {
	// Capabilities of the SKU, e.g., is traffic manager enabled?
	Capabilities []*Capability `json:"capabilities,omitempty"`

	// Min, max, and default scale values of the SKU.
	Capacity *SKUCapacity `json:"capacity,omitempty"`

	// Family code of the resource SKU.
	Family *string `json:"family,omitempty"`

	// Locations of the SKU.
	Locations []*string `json:"locations,omitempty"`

	// Name of the resource SKU.
	Name *string `json:"name,omitempty"`

	// Size specifier of the resource SKU.
	Size *string `json:"size,omitempty"`

	// Service Tier of the resource SKU.
	Tier *string `json:"tier,omitempty"`
}

// MarshalJSON implements the json.Marshaller interface for type GlobalCsmSKUDescription.
func (g GlobalCsmSKUDescription) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "capabilities", g.Capabilities)
	populate(objectMap, "capacity", g.Capacity)
	populate(objectMap, "family", g.Family)
	populate(objectMap, "locations", g.Locations)
	populate(objectMap, "name", g.Name)
	populate(objectMap, "size", g.Size)
	populate(objectMap, "tier", g.Tier)
	return json.Marshal(objectMap)
}

// GlobalGetDeletedWebAppOptions contains the optional parameters for the Global.GetDeletedWebApp method.
type GlobalGetDeletedWebAppOptions struct {
	// placeholder for future optional parameters
}

// GlobalGetDeletedWebAppSnapshotsOptions contains the optional parameters for the Global.GetDeletedWebAppSnapshots method.
type GlobalGetDeletedWebAppSnapshotsOptions struct {
	// placeholder for future optional parameters
}

// GlobalGetSubscriptionOperationWithAsyncResponseOptions contains the optional parameters for the Global.GetSubscriptionOperationWithAsyncResponse method.
type GlobalGetSubscriptionOperationWithAsyncResponseOptions struct {
	// placeholder for future optional parameters
}

// GlobalValidation - The configuration settings that determines the validation flow of users using App Service Authentication/Authorization.
type GlobalValidation struct {
	// The paths for which unauthenticated flow would not be redirected to the login page.
	ExcludedPaths []*string `json:"excludedPaths,omitempty"`

	// The default authentication provider to use when multiple providers are configured. This setting is only needed if multiple providers are configured and
	// the unauthenticated client action is set to
	// "RedirectToLoginPage".
	RedirectToProvider *string `json:"redirectToProvider,omitempty"`

	// true if the authentication flow is required any request is made; otherwise, false.
	RequireAuthentication *bool `json:"requireAuthentication,omitempty"`

	// The action to take when an unauthenticated client attempts to access the app.
	UnauthenticatedClientAction *UnauthenticatedClientActionV2 `json:"unauthenticatedClientAction,omitempty"`
}

// MarshalJSON implements the json.Marshaller interface for type GlobalValidation.
func (g GlobalValidation) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "excludedPaths", g.ExcludedPaths)
	populate(objectMap, "redirectToProvider", g.RedirectToProvider)
	populate(objectMap, "requireAuthentication", g.RequireAuthentication)
	populate(objectMap, "unauthenticatedClientAction", g.UnauthenticatedClientAction)
	return json.Marshal(objectMap)
}

// Google - The configuration settings of the Google provider.
type Google struct {
	// false if the Google provider should not be enabled despite the set registration; otherwise, true.
	Enabled *bool `json:"enabled,omitempty"`

	// The configuration settings of the login flow.
	Login *LoginScopes `json:"login,omitempty"`

	// The configuration settings of the app registration for the Google provider.
	Registration *ClientRegistration `json:"registration,omitempty"`

	// The configuration settings of the Azure Active Directory token validation flow.
	Validation *AllowedAudiencesValidation `json:"validation,omitempty"`
}

// HTTPLogsConfig - Http logs configuration.
type HTTPLogsConfig struct {
	// Http logs to azure blob storage configuration.
	AzureBlobStorage *AzureBlobStorageHTTPLogsConfig `json:"azureBlobStorage,omitempty"`

	// Http logs to file system configuration.
	FileSystem *FileSystemHTTPLogsConfig `json:"fileSystem,omitempty"`
}

// HTTPSettings - The configuration settings of the HTTP requests for authentication and authorization requests made against App Service Authentication/Authorization.
type HTTPSettings struct {
	// The configuration settings of a forward proxy used to make the requests.
	ForwardProxy *ForwardProxy `json:"forwardProxy,omitempty"`

	// false if the authentication/authorization responses not having the HTTPS scheme are permissible; otherwise, true.
	RequireHTTPS *bool `json:"requireHttps,omitempty"`

	// The configuration settings of the paths HTTP requests.
	Routes *HTTPSettingsRoutes `json:"routes,omitempty"`
}

// HTTPSettingsRoutes - The configuration settings of the paths HTTP requests.
type HTTPSettingsRoutes struct {
	// The prefix that should precede all the authentication/authorization paths.
	APIPrefix *string `json:"apiPrefix,omitempty"`
}

// HandlerMapping - The IIS handler mappings used to define which handler processes HTTP requests with certain extension. For example, it is used to configure
// php-cgi.exe process to handle all HTTP requests with *.php
// extension.
type HandlerMapping struct {
	// Command-line arguments to be passed to the script processor.
	Arguments *string `json:"arguments,omitempty"`

	// Requests with this extension will be handled using the specified FastCGI application.
	Extension *string `json:"extension,omitempty"`

	// The absolute path to the FastCGI application.
	ScriptProcessor *string `json:"scriptProcessor,omitempty"`
}

// HostKeys - Functions host level keys.
type HostKeys struct {
	// Host level function keys.
	FunctionKeys map[string]*string `json:"functionKeys,omitempty"`

	// Secret key.
	MasterKey *string `json:"masterKey,omitempty"`

	// System keys.
	SystemKeys map[string]*string `json:"systemKeys,omitempty"`
}

// MarshalJSON implements the json.Marshaller interface for type HostKeys.
func (h HostKeys) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "functionKeys", h.FunctionKeys)
	populate(objectMap, "masterKey", h.MasterKey)
	populate(objectMap, "systemKeys", h.SystemKeys)
	return json.Marshal(objectMap)
}

// HostName - Details of a hostname derived from a domain.
type HostName struct {
	// Name of the Azure resource the hostname is assigned to. If it is assigned to a Traffic Manager then it will be the Traffic Manager name otherwise it
	// will be the app name.
	AzureResourceName *string `json:"azureResourceName,omitempty"`

	// Type of the Azure resource the hostname is assigned to.
	AzureResourceType *AzureResourceType `json:"azureResourceType,omitempty"`

	// Type of the DNS record.
	CustomHostNameDNSRecordType *CustomHostNameDNSRecordType `json:"customHostNameDnsRecordType,omitempty"`

	// Type of the hostname.
	HostNameType *HostNameType `json:"hostNameType,omitempty"`

	// Name of the hostname.
	Name *string `json:"name,omitempty"`

	// List of apps the hostname is assigned to. This list will have more than one app only if the hostname is pointing to a Traffic Manager.
	SiteNames []*string `json:"siteNames,omitempty"`
}

// MarshalJSON implements the json.Marshaller interface for type HostName.
func (h HostName) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "azureResourceName", h.AzureResourceName)
	populate(objectMap, "azureResourceType", h.AzureResourceType)
	populate(objectMap, "customHostNameDnsRecordType", h.CustomHostNameDNSRecordType)
	populate(objectMap, "hostNameType", h.HostNameType)
	populate(objectMap, "name", h.Name)
	populate(objectMap, "siteNames", h.SiteNames)
	return json.Marshal(objectMap)
}

// HostNameBinding - A hostname binding object.
type HostNameBinding struct {
	ProxyOnlyResource
	// HostNameBinding resource specific properties
	Properties *HostNameBindingProperties `json:"properties,omitempty"`
}

// MarshalJSON implements the json.Marshaller interface for type HostNameBinding.
func (h HostNameBinding) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	h.ProxyOnlyResource.marshalInternal(objectMap)
	populate(objectMap, "properties", h.Properties)
	return json.Marshal(objectMap)
}

// HostNameBindingCollection - Collection of hostname bindings.
type HostNameBindingCollection struct {
	// REQUIRED; Collection of resources.
	Value []*HostNameBinding `json:"value,omitempty"`

	// READ-ONLY; Link to next page of resources.
	NextLink *string `json:"nextLink,omitempty" azure:"ro"`
}

// MarshalJSON implements the json.Marshaller interface for type HostNameBindingCollection.
func (h HostNameBindingCollection) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "nextLink", h.NextLink)
	populate(objectMap, "value", h.Value)
	return json.Marshal(objectMap)
}

// HostNameBindingProperties - HostNameBinding resource specific properties
type HostNameBindingProperties struct {
	// Azure resource name.
	AzureResourceName *string `json:"azureResourceName,omitempty"`

	// Azure resource type.
	AzureResourceType *AzureResourceType `json:"azureResourceType,omitempty"`

	// Custom DNS record type.
	CustomHostNameDNSRecordType *CustomHostNameDNSRecordType `json:"customHostNameDnsRecordType,omitempty"`

	// Fully qualified ARM domain resource URI.
	DomainID *string `json:"domainId,omitempty"`

	// Hostname type.
	HostNameType *HostNameType `json:"hostNameType,omitempty"`

	// SSL type
	SSLState *SSLState `json:"sslState,omitempty"`

	// App Service app name.
	SiteName *string `json:"siteName,omitempty"`

	// SSL certificate thumbprint
	Thumbprint *string `json:"thumbprint,omitempty"`

	// READ-ONLY; Virtual IP address assigned to the hostname if IP based SSL is enabled.
	VirtualIP *string `json:"virtualIP,omitempty" azure:"ro"`
}

// HostNameSSLState - SSL-enabled hostname.
type HostNameSSLState struct {
	// Indicates whether the hostname is a standard or repository hostname.
	HostType *HostType `json:"hostType,omitempty"`

	// Hostname.
	Name *string `json:"name,omitempty"`

	// SSL type.
	SSLState *SSLState `json:"sslState,omitempty"`

	// SSL certificate thumbprint.
	Thumbprint *string `json:"thumbprint,omitempty"`

	// Set to true to update existing hostname.
	ToUpdate *bool `json:"toUpdate,omitempty"`

	// Virtual IP address assigned to the hostname if IP based SSL is enabled.
	VirtualIP *string `json:"virtualIP,omitempty"`
}

// HostingEnvironmentDeploymentInfo - Information needed to create resources on an App Service Environment.
type HostingEnvironmentDeploymentInfo struct {
	// Location of the App Service Environment.
	Location *string `json:"location,omitempty"`

	// Name of the App Service Environment.
	Name *string `json:"name,omitempty"`
}

// HostingEnvironmentDiagnostics - Diagnostics for an App Service Environment.
type HostingEnvironmentDiagnostics struct {
	// Diagnostics output.
	DiagnosticsOutput *string `json:"diagnosticsOutput,omitempty"`

	// Name/identifier of the diagnostics.
	Name *string `json:"name,omitempty"`
}

// HostingEnvironmentProfile - Specification for an App Service Environment to use for this resource.
type HostingEnvironmentProfile struct {
	// Resource ID of the App Service Environment.
	ID *string `json:"id,omitempty"`

	// READ-ONLY; Name of the App Service Environment.
	Name *string `json:"name,omitempty" azure:"ro"`

	// READ-ONLY; Resource type of the App Service Environment.
	Type *string `json:"type,omitempty" azure:"ro"`
}

// HybridConnection - Hybrid Connection contract. This is used to configure a Hybrid Connection.
type HybridConnection struct {
	ProxyOnlyResource
	// HybridConnection resource specific properties
	Properties *HybridConnectionProperties `json:"properties,omitempty"`
}

// MarshalJSON implements the json.Marshaller interface for type HybridConnection.
func (h HybridConnection) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	h.ProxyOnlyResource.marshalInternal(objectMap)
	populate(objectMap, "properties", h.Properties)
	return json.Marshal(objectMap)
}

// HybridConnectionCollection - Collection of hostname bindings.
type HybridConnectionCollection struct {
	// REQUIRED; Collection of resources.
	Value []*HybridConnection `json:"value,omitempty"`

	// READ-ONLY; Link to next page of resources.
	NextLink *string `json:"nextLink,omitempty" azure:"ro"`
}

// MarshalJSON implements the json.Marshaller interface for type HybridConnectionCollection.
func (h HybridConnectionCollection) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "nextLink", h.NextLink)
	populate(objectMap, "value", h.Value)
	return json.Marshal(objectMap)
}

// HybridConnectionKey - Hybrid Connection key contract. This has the send key name and value for a Hybrid Connection.
type HybridConnectionKey struct {
	ProxyOnlyResource
	// HybridConnectionKey resource specific properties
	Properties *HybridConnectionKeyProperties `json:"properties,omitempty"`
}

// MarshalJSON implements the json.Marshaller interface for type HybridConnectionKey.
func (h HybridConnectionKey) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	h.ProxyOnlyResource.marshalInternal(objectMap)
	populate(objectMap, "properties", h.Properties)
	return json.Marshal(objectMap)
}

// HybridConnectionKeyProperties - HybridConnectionKey resource specific properties
type HybridConnectionKeyProperties struct {
	// READ-ONLY; The name of the send key.
	SendKeyName *string `json:"sendKeyName,omitempty" azure:"ro"`

	// READ-ONLY; The value of the send key.
	SendKeyValue *string `json:"sendKeyValue,omitempty" azure:"ro"`
}

// HybridConnectionLimits - Hybrid Connection limits contract. This is used to return the plan limits of Hybrid Connections.
type HybridConnectionLimits struct {
	ProxyOnlyResource
	// HybridConnectionLimits resource specific properties
	Properties *HybridConnectionLimitsProperties `json:"properties,omitempty"`
}

// MarshalJSON implements the json.Marshaller interface for type HybridConnectionLimits.
func (h HybridConnectionLimits) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	h.ProxyOnlyResource.marshalInternal(objectMap)
	populate(objectMap, "properties", h.Properties)
	return json.Marshal(objectMap)
}

// HybridConnectionLimitsProperties - HybridConnectionLimits resource specific properties
type HybridConnectionLimitsProperties struct {
	// READ-ONLY; The current number of Hybrid Connections.
	Current *int32 `json:"current,omitempty" azure:"ro"`

	// READ-ONLY; The maximum number of Hybrid Connections allowed.
	Maximum *int32 `json:"maximum,omitempty" azure:"ro"`
}

// HybridConnectionProperties - HybridConnection resource specific properties
type HybridConnectionProperties struct {
	// The hostname of the endpoint.
	Hostname *string `json:"hostname,omitempty"`

	// The port of the endpoint.
	Port *int32 `json:"port,omitempty"`

	// The ARM URI to the Service Bus relay.
	RelayArmURI *string `json:"relayArmUri,omitempty"`

	// The name of the Service Bus relay.
	RelayName *string `json:"relayName,omitempty"`

	// The name of the Service Bus key which has Send permissions. This is used to authenticate to Service Bus.
	SendKeyName *string `json:"sendKeyName,omitempty"`

	// The value of the Service Bus key. This is used to authenticate to Service Bus. In ARM this key will not be returned normally, use the POST /listKeys
	// API instead.
	SendKeyValue *string `json:"sendKeyValue,omitempty"`

	// The name of the Service Bus namespace.
	ServiceBusNamespace *string `json:"serviceBusNamespace,omitempty"`

	// The suffix for the service bus endpoint. By default this is .servicebus.windows.net
	ServiceBusSuffix *string `json:"serviceBusSuffix,omitempty"`
}

// IPSecurityRestriction - IP security restriction on an app.
type IPSecurityRestriction struct {
	// Allow or Deny access for this IP range.
	Action *string `json:"action,omitempty"`

	// IP restriction rule description.
	Description *string `json:"description,omitempty"`

	// IP restriction rule headers. X-Forwarded-Host (https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/X-Forwarded-Host#Examples). The matching logic
	// is ..
	// * If the property is null or empty (default), all hosts(or lack of) are allowed.
	// * A value is compared using ordinal-ignore-case (excluding port number).
	// * Subdomain wildcards are permitted but don't match the root domain. For example, *.contoso.com matches the subdomain foo.contoso.com but not the root
	// domain contoso.com or multi-level
	// foo.bar.contoso.com
	// * Unicode host names are allowed but are converted to Punycode for matching.
	// X-Forwarded-For (https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/X-Forwarded-For#Examples). The matching logic is ..
	// * If the property is null or empty (default), any forwarded-for chains (or lack of) are allowed.
	// * If any address (excluding port number) in the chain (comma separated) matches the CIDR defined by the property.
	// X-Azure-FDID and X-FD-HealthProbe. The matching logic is exact match.
	Headers map[string][]*string `json:"headers,omitempty"`

	// IP address the security restriction is valid for. It can be in form of pure ipv4 address (required SubnetMask property) or CIDR notation such as ipv4/mask
	// (leading bit match). For CIDR, SubnetMask
	// property must not be specified.
	IPAddress *string `json:"ipAddress,omitempty"`

	// IP restriction rule name.
	Name *string `json:"name,omitempty"`

	// Priority of IP restriction rule.
	Priority *int32 `json:"priority,omitempty"`

	// Subnet mask for the range of IP addresses the restriction is valid for.
	SubnetMask *string `json:"subnetMask,omitempty"`

	// (internal) Subnet traffic tag
	SubnetTrafficTag *int32 `json:"subnetTrafficTag,omitempty"`

	// Defines what this IP filter will be used for. This is to support IP filtering on proxies.
	Tag *IPFilterTag `json:"tag,omitempty"`

	// Virtual network resource id
	VnetSubnetResourceID *string `json:"vnetSubnetResourceId,omitempty"`

	// (internal) Vnet traffic tag
	VnetTrafficTag *int32 `json:"vnetTrafficTag,omitempty"`
}

// MarshalJSON implements the json.Marshaller interface for type IPSecurityRestriction.
func (i IPSecurityRestriction) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "action", i.Action)
	populate(objectMap, "description", i.Description)
	populate(objectMap, "headers", i.Headers)
	populate(objectMap, "ipAddress", i.IPAddress)
	populate(objectMap, "name", i.Name)
	populate(objectMap, "priority", i.Priority)
	populate(objectMap, "subnetMask", i.SubnetMask)
	populate(objectMap, "subnetTrafficTag", i.SubnetTrafficTag)
	populate(objectMap, "tag", i.Tag)
	populate(objectMap, "vnetSubnetResourceId", i.VnetSubnetResourceID)
	populate(objectMap, "vnetTrafficTag", i.VnetTrafficTag)
	return json.Marshal(objectMap)
}

// Identifier - A domain specific resource identifier.
type Identifier struct {
	ProxyOnlyResource
	// Identifier resource specific properties
	Properties *IdentifierProperties `json:"properties,omitempty"`
}

// MarshalJSON implements the json.Marshaller interface for type Identifier.
func (i Identifier) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	i.ProxyOnlyResource.marshalInternal(objectMap)
	populate(objectMap, "properties", i.Properties)
	return json.Marshal(objectMap)
}

// IdentifierCollection - Collection of identifiers.
type IdentifierCollection struct {
	// REQUIRED; Collection of resources.
	Value []*Identifier `json:"value,omitempty"`

	// READ-ONLY; Link to next page of resources.
	NextLink *string `json:"nextLink,omitempty" azure:"ro"`
}

// MarshalJSON implements the json.Marshaller interface for type IdentifierCollection.
func (i IdentifierCollection) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "nextLink", i.NextLink)
	populate(objectMap, "value", i.Value)
	return json.Marshal(objectMap)
}

// IdentifierProperties - Identifier resource specific properties
type IdentifierProperties struct {
	// String representation of the identity.
	Value *string `json:"id,omitempty"`
}

// IdentityProviders - The configuration settings of each of the identity providers used to configure App Service Authentication/Authorization.
type IdentityProviders struct {
	// The configuration settings of the Apple provider.
	Apple *Apple `json:"apple,omitempty"`

	// The configuration settings of the Azure Active directory provider.
	AzureActiveDirectory *AzureActiveDirectory `json:"azureActiveDirectory,omitempty"`

	// The configuration settings of the Azure Static Web Apps provider.
	AzureStaticWebApps *AzureStaticWebApps `json:"azureStaticWebApps,omitempty"`

	// The map of the name of the alias of each custom Open ID Connect provider to the configuration settings of the custom Open ID Connect provider.
	CustomOpenIDConnectProviders map[string]*CustomOpenIDConnectProvider `json:"customOpenIdConnectProviders,omitempty"`

	// The configuration settings of the Facebook provider.
	Facebook *Facebook `json:"facebook,omitempty"`

	// The configuration settings of the GitHub provider.
	GitHub *GitHub `json:"gitHub,omitempty"`

	// The configuration settings of the Google provider.
	Google *Google `json:"google,omitempty"`

	// The configuration settings of the legacy Microsoft Account provider.
	LegacyMicrosoftAccount *LegacyMicrosoftAccount `json:"legacyMicrosoftAccount,omitempty"`

	// The configuration settings of the Twitter provider.
	Twitter *Twitter `json:"twitter,omitempty"`
}

// MarshalJSON implements the json.Marshaller interface for type IdentityProviders.
func (i IdentityProviders) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "apple", i.Apple)
	populate(objectMap, "azureActiveDirectory", i.AzureActiveDirectory)
	populate(objectMap, "azureStaticWebApps", i.AzureStaticWebApps)
	populate(objectMap, "customOpenIdConnectProviders", i.CustomOpenIDConnectProviders)
	populate(objectMap, "facebook", i.Facebook)
	populate(objectMap, "gitHub", i.GitHub)
	populate(objectMap, "google", i.Google)
	populate(objectMap, "legacyMicrosoftAccount", i.LegacyMicrosoftAccount)
	populate(objectMap, "twitter", i.Twitter)
	return json.Marshal(objectMap)
}

// InboundEnvironmentEndpoint - The IP Addresses and Ports that require inbound network access to and within the subnet of the App Service Environment.
type InboundEnvironmentEndpoint struct {
	// Short text describing the purpose of the network traffic.
	Description *string `json:"description,omitempty"`

	// The IP addresses that network traffic will originate from in cidr notation.
	Endpoints []*string `json:"endpoints,omitempty"`

	// The ports that network traffic will arrive to the App Service Environment at.
	Ports []*string `json:"ports,omitempty"`
}

// MarshalJSON implements the json.Marshaller interface for type InboundEnvironmentEndpoint.
func (i InboundEnvironmentEndpoint) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "description", i.Description)
	populate(objectMap, "endpoints", i.Endpoints)
	populate(objectMap, "ports", i.Ports)
	return json.Marshal(objectMap)
}

// InboundEnvironmentEndpointCollection - Collection of Inbound Environment Endpoints
type InboundEnvironmentEndpointCollection struct {
	// REQUIRED; Collection of resources.
	Value []*InboundEnvironmentEndpoint `json:"value,omitempty"`

	// READ-ONLY; Link to next page of resources.
	NextLink *string `json:"nextLink,omitempty" azure:"ro"`
}

// MarshalJSON implements the json.Marshaller interface for type InboundEnvironmentEndpointCollection.
func (i InboundEnvironmentEndpointCollection) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "nextLink", i.NextLink)
	populate(objectMap, "value", i.Value)
	return json.Marshal(objectMap)
}

// JwtClaimChecks - The configuration settings of the checks that should be made while validating the JWT Claims.
type JwtClaimChecks struct {
	// The list of the allowed client applications.
	AllowedClientApplications []*string `json:"allowedClientApplications,omitempty"`

	// The list of the allowed groups.
	AllowedGroups []*string `json:"allowedGroups,omitempty"`
}

// MarshalJSON implements the json.Marshaller interface for type JwtClaimChecks.
func (j JwtClaimChecks) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "allowedClientApplications", j.AllowedClientApplications)
	populate(objectMap, "allowedGroups", j.AllowedGroups)
	return json.Marshal(objectMap)
}

// KeyInfo - Function key info.
type KeyInfo struct {
	// Key name
	Name *string `json:"name,omitempty"`

	// Key value
	Value *string `json:"value,omitempty"`
}

type KeyValuePairStringObject struct {
	// READ-ONLY
	Key *string `json:"key,omitempty" azure:"ro"`

	// READ-ONLY; Any object
	Value map[string]interface{} `json:"value,omitempty" azure:"ro"`
}

// KubeEnvironment - A Kubernetes cluster specialized for web workloads by Azure App Service
type KubeEnvironment struct {
	Resource
	// Extended Location.
	ExtendedLocation *ExtendedLocation `json:"extendedLocation,omitempty"`

	// KubeEnvironment resource specific properties
	Properties *KubeEnvironmentProperties `json:"properties,omitempty"`
}

// MarshalJSON implements the json.Marshaller interface for type KubeEnvironment.
func (k KubeEnvironment) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	k.Resource.marshalInternal(objectMap)
	populate(objectMap, "extendedLocation", k.ExtendedLocation)
	populate(objectMap, "properties", k.Properties)
	return json.Marshal(objectMap)
}

// KubeEnvironmentCollection - Collection of Kubernetes Environments
type KubeEnvironmentCollection struct {
	// REQUIRED; Collection of resources.
	Value []*KubeEnvironment `json:"value,omitempty"`

	// READ-ONLY; Link to next page of resources.
	NextLink *string `json:"nextLink,omitempty" azure:"ro"`
}

// MarshalJSON implements the json.Marshaller interface for type KubeEnvironmentCollection.
func (k KubeEnvironmentCollection) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "nextLink", k.NextLink)
	populate(objectMap, "value", k.Value)
	return json.Marshal(objectMap)
}

// KubeEnvironmentPatchResource - ARM resource for a KubeEnvironment when patching
type KubeEnvironmentPatchResource struct {
	ProxyOnlyResource
	// KubeEnvironmentPatchResource resource specific properties
	Properties *KubeEnvironmentPatchResourceProperties `json:"properties,omitempty"`
}

// MarshalJSON implements the json.Marshaller interface for type KubeEnvironmentPatchResource.
func (k KubeEnvironmentPatchResource) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	k.ProxyOnlyResource.marshalInternal(objectMap)
	populate(objectMap, "properties", k.Properties)
	return json.Marshal(objectMap)
}

// KubeEnvironmentPatchResourceProperties - KubeEnvironmentPatchResource resource specific properties
type KubeEnvironmentPatchResourceProperties struct {
	AksResourceID *string `json:"aksResourceID,omitempty"`

	// Cluster configuration which enables the log daemon to export app logs to a destination. Currently only "log-analytics" is supported
	AppLogsConfiguration *AppLogsConfiguration `json:"appLogsConfiguration,omitempty"`

	// Cluster configuration which determines the ARC cluster components types. Eg: Choosing between BuildService kind, FrontEnd Service ArtifactsStorageType
	// etc.
	ArcConfiguration *ArcConfiguration `json:"arcConfiguration,omitempty"`

	// Only visible within Vnet/Subnet
	InternalLoadBalancerEnabled *bool `json:"internalLoadBalancerEnabled,omitempty"`

	// Static IP of the KubeEnvironment
	StaticIP *string `json:"staticIp,omitempty"`

	// READ-ONLY; Default Domain Name for the cluster
	DefaultDomain *string `json:"defaultDomain,omitempty" azure:"ro"`

	// READ-ONLY; Any errors that occurred during deployment or deployment validation
	DeploymentErrors *string `json:"deploymentErrors,omitempty" azure:"ro"`

	// READ-ONLY; Provisioning state of the Kubernetes Environment.
	ProvisioningState *KubeEnvironmentProvisioningState `json:"provisioningState,omitempty" azure:"ro"`
}

// KubeEnvironmentProfile - Specification for a Kubernetes Environment to use for this resource.
type KubeEnvironmentProfile struct {
	// Resource ID of the Kubernetes Environment.
	ID *string `json:"id,omitempty"`

	// READ-ONLY; Name of the Kubernetes Environment.
	Name *string `json:"name,omitempty" azure:"ro"`

	// READ-ONLY; Resource type of the Kubernetes Environment.
	Type *string `json:"type,omitempty" azure:"ro"`
}

// KubeEnvironmentProperties - KubeEnvironment resource specific properties
type KubeEnvironmentProperties struct {
	AksResourceID *string `json:"aksResourceID,omitempty"`

	// Cluster configuration which enables the log daemon to export app logs to a destination. Currently only "log-analytics" is supported
	AppLogsConfiguration *AppLogsConfiguration `json:"appLogsConfiguration,omitempty"`

	// Cluster configuration which determines the ARC cluster components types. Eg: Choosing between BuildService kind, FrontEnd Service ArtifactsStorageType
	// etc.
	ArcConfiguration *ArcConfiguration `json:"arcConfiguration,omitempty"`

	// Only visible within Vnet/Subnet
	InternalLoadBalancerEnabled *bool `json:"internalLoadBalancerEnabled,omitempty"`

	// Static IP of the KubeEnvironment
	StaticIP *string `json:"staticIp,omitempty"`

	// READ-ONLY; Default Domain Name for the cluster
	DefaultDomain *string `json:"defaultDomain,omitempty" azure:"ro"`

	// READ-ONLY; Any errors that occurred during deployment or deployment validation
	DeploymentErrors *string `json:"deploymentErrors,omitempty" azure:"ro"`

	// READ-ONLY; Provisioning state of the Kubernetes Environment.
	ProvisioningState *KubeEnvironmentProvisioningState `json:"provisioningState,omitempty" azure:"ro"`
}

// KubeEnvironmentsBeginCreateOrUpdateOptions contains the optional parameters for the KubeEnvironments.BeginCreateOrUpdate method.
type KubeEnvironmentsBeginCreateOrUpdateOptions struct {
	// placeholder for future optional parameters
}

// KubeEnvironmentsBeginDeleteOptions contains the optional parameters for the KubeEnvironments.BeginDelete method.
type KubeEnvironmentsBeginDeleteOptions struct {
	// placeholder for future optional parameters
}

// KubeEnvironmentsGetOptions contains the optional parameters for the KubeEnvironments.Get method.
type KubeEnvironmentsGetOptions struct {
	// placeholder for future optional parameters
}

// KubeEnvironmentsListByResourceGroupOptions contains the optional parameters for the KubeEnvironments.ListByResourceGroup method.
type KubeEnvironmentsListByResourceGroupOptions struct {
	// placeholder for future optional parameters
}

// KubeEnvironmentsListBySubscriptionOptions contains the optional parameters for the KubeEnvironments.ListBySubscription method.
type KubeEnvironmentsListBySubscriptionOptions struct {
	// placeholder for future optional parameters
}

// KubeEnvironmentsUpdateOptions contains the optional parameters for the KubeEnvironments.Update method.
type KubeEnvironmentsUpdateOptions struct {
	// placeholder for future optional parameters
}

// LegacyMicrosoftAccount - The configuration settings of the legacy Microsoft Account provider.
type LegacyMicrosoftAccount struct {
	// false if the legacy Microsoft Account provider should not be enabled despite the set registration; otherwise, true.
	Enabled *bool `json:"enabled,omitempty"`

	// The configuration settings of the login flow.
	Login *LoginScopes `json:"login,omitempty"`

	// The configuration settings of the app registration for the legacy Microsoft Account provider.
	Registration *ClientRegistration `json:"registration,omitempty"`

	// The configuration settings of the legacy Microsoft Account provider token validation flow.
	Validation *AllowedAudiencesValidation `json:"validation,omitempty"`
}

// LinuxJavaContainerSettings - Linux Java Container settings.
type LinuxJavaContainerSettings struct {
	// READ-ONLY; End-of-life date for the minor version.
	EndOfLifeDate *time.Time `json:"endOfLifeDate,omitempty" azure:"ro"`

	// READ-ONLY; true if the stack version is auto-updated; otherwise, false.
	IsAutoUpdate *bool `json:"isAutoUpdate,omitempty" azure:"ro"`

	// READ-ONLY; true if the stack is deprecated; otherwise, false.
	IsDeprecated *bool `json:"isDeprecated,omitempty" azure:"ro"`

	// READ-ONLY; true if the minor version is early-access; otherwise, false.
	IsEarlyAccess *bool `json:"isEarlyAccess,omitempty" azure:"ro"`

	// READ-ONLY; true if the stack should be hidden; otherwise, false.
	IsHidden *bool `json:"isHidden,omitempty" azure:"ro"`

	// READ-ONLY; true if the stack is in preview; otherwise, false.
	IsPreview *bool `json:"isPreview,omitempty" azure:"ro"`

	// READ-ONLY; Java 11 version (runtime only).
	Java11Runtime *string `json:"java11Runtime,omitempty" azure:"ro"`

	// READ-ONLY; Java 8 version (runtime only).
	Java8Runtime *string `json:"java8Runtime,omitempty" azure:"ro"`
}

// MarshalJSON implements the json.Marshaller interface for type LinuxJavaContainerSettings.
func (l LinuxJavaContainerSettings) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "endOfLifeDate", (*timeRFC3339)(l.EndOfLifeDate))
	populate(objectMap, "isAutoUpdate", l.IsAutoUpdate)
	populate(objectMap, "isDeprecated", l.IsDeprecated)
	populate(objectMap, "isEarlyAccess", l.IsEarlyAccess)
	populate(objectMap, "isHidden", l.IsHidden)
	populate(objectMap, "isPreview", l.IsPreview)
	populate(objectMap, "java11Runtime", l.Java11Runtime)
	populate(objectMap, "java8Runtime", l.Java8Runtime)
	return json.Marshal(objectMap)
}

// UnmarshalJSON implements the json.Unmarshaller interface for type LinuxJavaContainerSettings.
func (l *LinuxJavaContainerSettings) UnmarshalJSON(data []byte) error {
	var rawMsg map[string]json.RawMessage
	if err := json.Unmarshal(data, &rawMsg); err != nil {
		return err
	}
	for key, val := range rawMsg {
		var err error
		switch key {
		case "endOfLifeDate":
			var aux timeRFC3339
			err = unpopulate(val, &aux)
			l.EndOfLifeDate = (*time.Time)(&aux)
			delete(rawMsg, key)
		case "isAutoUpdate":
			err = unpopulate(val, &l.IsAutoUpdate)
			delete(rawMsg, key)
		case "isDeprecated":
			err = unpopulate(val, &l.IsDeprecated)
			delete(rawMsg, key)
		case "isEarlyAccess":
			err = unpopulate(val, &l.IsEarlyAccess)
			delete(rawMsg, key)
		case "isHidden":
			err = unpopulate(val, &l.IsHidden)
			delete(rawMsg, key)
		case "isPreview":
			err = unpopulate(val, &l.IsPreview)
			delete(rawMsg, key)
		case "java11Runtime":
			err = unpopulate(val, &l.Java11Runtime)
			delete(rawMsg, key)
		case "java8Runtime":
			err = unpopulate(val, &l.Java8Runtime)
			delete(rawMsg, key)
		}
		if err != nil {
			return err
		}
	}
	return nil
}

// LocalizableString - Localizable string object containing the name and a localized value.
type LocalizableString struct {
	// Localized name.
	LocalizedValue *string `json:"localizedValue,omitempty"`

	// Non-localized name.
	Value *string `json:"value,omitempty"`
}

type LogAnalyticsConfiguration struct {
	CustomerID *string `json:"customerId,omitempty"`
	SharedKey  *string `json:"sharedKey,omitempty"`
}

// LogSpecification - Log Definition of a single resource metric.
type LogSpecification struct {
	BlobDuration     *string `json:"blobDuration,omitempty"`
	DisplayName      *string `json:"displayName,omitempty"`
	LogFilterPattern *string `json:"logFilterPattern,omitempty"`
	Name             *string `json:"name,omitempty"`
}

// Login - The configuration settings of the login flow of users using App Service Authentication/Authorization.
type Login struct {
	// External URLs that can be redirected to as part of logging in or logging out of the app. Note that the query string part of the URL is ignored. This
	// is an advanced setting typically only needed by
	// Windows Store application backends. Note that URLs within the current domain are always implicitly allowed.
	AllowedExternalRedirectUrls []*string `json:"allowedExternalRedirectUrls,omitempty"`

	// The configuration settings of the session cookie's expiration.
	CookieExpiration *CookieExpiration `json:"cookieExpiration,omitempty"`

	// The configuration settings of the nonce used in the login flow.
	Nonce *Nonce `json:"nonce,omitempty"`

	// true if the fragments from the request are preserved after the login request is made; otherwise, false.
	PreserveURLFragmentsForLogins *bool `json:"preserveUrlFragmentsForLogins,omitempty"`

	// The routes that specify the endpoints used for login and logout requests.
	Routes *LoginRoutes `json:"routes,omitempty"`

	// The configuration settings of the token store.
	TokenStore *TokenStore `json:"tokenStore,omitempty"`
}

// MarshalJSON implements the json.Marshaller interface for type Login.
func (l Login) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "allowedExternalRedirectUrls", l.AllowedExternalRedirectUrls)
	populate(objectMap, "cookieExpiration", l.CookieExpiration)
	populate(objectMap, "nonce", l.Nonce)
	populate(objectMap, "preserveUrlFragmentsForLogins", l.PreserveURLFragmentsForLogins)
	populate(objectMap, "routes", l.Routes)
	populate(objectMap, "tokenStore", l.TokenStore)
	return json.Marshal(objectMap)
}

// LoginRoutes - The routes that specify the endpoints used for login and logout requests.
type LoginRoutes struct {
	// The endpoint at which a logout request should be made.
	LogoutEndpoint *string `json:"logoutEndpoint,omitempty"`
}

// LoginScopes - The configuration settings of the login flow, including the scopes that should be requested.
type LoginScopes struct {
	// A list of the scopes that should be requested while authenticating.
	Scopes []*string `json:"scopes,omitempty"`
}

// MarshalJSON implements the json.Marshaller interface for type LoginScopes.
func (l LoginScopes) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "scopes", l.Scopes)
	return json.Marshal(objectMap)
}

// MSDeploy ARM PUT information
type MSDeploy struct {
	ProxyOnlyResource
	// Core resource properties
	Properties *MSDeployCore `json:"properties,omitempty"`
}

// MarshalJSON implements the json.Marshaller interface for type MSDeploy.
func (m MSDeploy) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	m.ProxyOnlyResource.marshalInternal(objectMap)
	populate(objectMap, "properties", m.Properties)
	return json.Marshal(objectMap)
}

// MSDeployCore - MSDeploy ARM PUT core information
type MSDeployCore struct {
	// Sets the AppOffline rule while the MSDeploy operation executes. Setting is false by default.
	AppOffline *bool `json:"appOffline,omitempty"`

	// SQL Connection String
	ConnectionString *string `json:"connectionString,omitempty"`

	// Database Type
	DbType *string `json:"dbType,omitempty"`

	// Package URI
	PackageURI *string `json:"packageUri,omitempty"`

	// MSDeploy Parameters. Must not be set if SetParametersXmlFileUri is used.
	SetParameters map[string]*string `json:"setParameters,omitempty"`

	// URI of MSDeploy Parameters file. Must not be set if SetParameters is used.
	SetParametersXMLFileURI *string `json:"setParametersXmlFileUri,omitempty"`

	// Controls whether the MSDeploy operation skips the AppData directory. If set to true, the existing AppData directory on the destination will not be deleted,
	// and any App_Data directory in the source
	// will be ignored. Setting is false by default.
	SkipAppData *bool `json:"skipAppData,omitempty"`
}

// MarshalJSON implements the json.Marshaller interface for type MSDeployCore.
func (m MSDeployCore) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "appOffline", m.AppOffline)
	populate(objectMap, "connectionString", m.ConnectionString)
	populate(objectMap, "dbType", m.DbType)
	populate(objectMap, "packageUri", m.PackageURI)
	populate(objectMap, "setParameters", m.SetParameters)
	populate(objectMap, "setParametersXmlFileUri", m.SetParametersXMLFileURI)
	populate(objectMap, "skipAppData", m.SkipAppData)
	return json.Marshal(objectMap)
}

// MSDeployLog - MSDeploy log
type MSDeployLog struct {
	ProxyOnlyResource
	// MSDeployLog resource specific properties
	Properties *MSDeployLogProperties `json:"properties,omitempty"`
}

// MarshalJSON implements the json.Marshaller interface for type MSDeployLog.
func (m MSDeployLog) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	m.ProxyOnlyResource.marshalInternal(objectMap)
	populate(objectMap, "properties", m.Properties)
	return json.Marshal(objectMap)
}

// MSDeployLogEntry - MSDeploy log entry
type MSDeployLogEntry struct {
	// READ-ONLY; Log entry message
	Message *string `json:"message,omitempty" azure:"ro"`

	// READ-ONLY; Timestamp of log entry
	Time *time.Time `json:"time,omitempty" azure:"ro"`

	// READ-ONLY; Log entry type
	Type *MSDeployLogEntryType `json:"type,omitempty" azure:"ro"`
}

// MarshalJSON implements the json.Marshaller interface for type MSDeployLogEntry.
func (m MSDeployLogEntry) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "message", m.Message)
	populate(objectMap, "time", (*timeRFC3339)(m.Time))
	populate(objectMap, "type", m.Type)
	return json.Marshal(objectMap)
}

// UnmarshalJSON implements the json.Unmarshaller interface for type MSDeployLogEntry.
func (m *MSDeployLogEntry) UnmarshalJSON(data []byte) error {
	var rawMsg map[string]json.RawMessage
	if err := json.Unmarshal(data, &rawMsg); err != nil {
		return err
	}
	for key, val := range rawMsg {
		var err error
		switch key {
		case "message":
			err = unpopulate(val, &m.Message)
			delete(rawMsg, key)
		case "time":
			var aux timeRFC3339
			err = unpopulate(val, &aux)
			m.Time = (*time.Time)(&aux)
			delete(rawMsg, key)
		case "type":
			err = unpopulate(val, &m.Type)
			delete(rawMsg, key)
		}
		if err != nil {
			return err
		}
	}
	return nil
}

// MSDeployLogProperties - MSDeployLog resource specific properties
type MSDeployLogProperties struct {
	// READ-ONLY; List of log entry messages
	Entries []*MSDeployLogEntry `json:"entries,omitempty" azure:"ro"`
}

// MarshalJSON implements the json.Marshaller interface for type MSDeployLogProperties.
func (m MSDeployLogProperties) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "entries", m.Entries)
	return json.Marshal(objectMap)
}

// MSDeployStatus - MSDeploy ARM response
type MSDeployStatus struct {
	ProxyOnlyResource
	// MSDeployStatus resource specific properties
	Properties *MSDeployStatusProperties `json:"properties,omitempty"`
}

// MarshalJSON implements the json.Marshaller interface for type MSDeployStatus.
func (m MSDeployStatus) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	m.ProxyOnlyResource.marshalInternal(objectMap)
	populate(objectMap, "properties", m.Properties)
	return json.Marshal(objectMap)
}

// MSDeployStatusProperties - MSDeployStatus resource specific properties
type MSDeployStatusProperties struct {
	// READ-ONLY; Whether the deployment operation has completed
	Complete *bool `json:"complete,omitempty" azure:"ro"`

	// READ-ONLY; Username of deployer
	Deployer *string `json:"deployer,omitempty" azure:"ro"`

	// READ-ONLY; End time of deploy operation
	EndTime *time.Time `json:"endTime,omitempty" azure:"ro"`

	// READ-ONLY; Provisioning state
	ProvisioningState *MSDeployProvisioningState `json:"provisioningState,omitempty" azure:"ro"`

	// READ-ONLY; Start time of deploy operation
	StartTime *time.Time `json:"startTime,omitempty" azure:"ro"`
}

// MarshalJSON implements the json.Marshaller interface for type MSDeployStatusProperties.
func (m MSDeployStatusProperties) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "complete", m.Complete)
	populate(objectMap, "deployer", m.Deployer)
	populate(objectMap, "endTime", (*timeRFC3339)(m.EndTime))
	populate(objectMap, "provisioningState", m.ProvisioningState)
	populate(objectMap, "startTime", (*timeRFC3339)(m.StartTime))
	return json.Marshal(objectMap)
}

// UnmarshalJSON implements the json.Unmarshaller interface for type MSDeployStatusProperties.
func (m *MSDeployStatusProperties) UnmarshalJSON(data []byte) error {
	var rawMsg map[string]json.RawMessage
	if err := json.Unmarshal(data, &rawMsg); err != nil {
		return err
	}
	for key, val := range rawMsg {
		var err error
		switch key {
		case "complete":
			err = unpopulate(val, &m.Complete)
			delete(rawMsg, key)
		case "deployer":
			err = unpopulate(val, &m.Deployer)
			delete(rawMsg, key)
		case "endTime":
			var aux timeRFC3339
			err = unpopulate(val, &aux)
			m.EndTime = (*time.Time)(&aux)
			delete(rawMsg, key)
		case "provisioningState":
			err = unpopulate(val, &m.ProvisioningState)
			delete(rawMsg, key)
		case "startTime":
			var aux timeRFC3339
			err = unpopulate(val, &aux)
			m.StartTime = (*time.Time)(&aux)
			delete(rawMsg, key)
		}
		if err != nil {
			return err
		}
	}
	return nil
}

// ManagedServiceIdentity - Managed service identity.
type ManagedServiceIdentity struct {
	// Type of managed service identity.
	Type *ManagedServiceIdentityType `json:"type,omitempty"`

	// The list of user assigned identities associated with the resource. The user identity dictionary key references will be ARM resource ids in the form:
	// '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ManagedIdentity/userAssignedIdentities/{identityName}
	UserAssignedIdentities map[string]*UserAssignedIdentity `json:"userAssignedIdentities,omitempty"`

	// READ-ONLY; Principal Id of managed service identity.
	PrincipalID *string `json:"principalId,omitempty" azure:"ro"`

	// READ-ONLY; Tenant of managed service identity.
	TenantID *string `json:"tenantId,omitempty" azure:"ro"`
}

// MarshalJSON implements the json.Marshaller interface for type ManagedServiceIdentity.
func (m ManagedServiceIdentity) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "principalId", m.PrincipalID)
	populate(objectMap, "tenantId", m.TenantID)
	populate(objectMap, "type", m.Type)
	populate(objectMap, "userAssignedIdentities", m.UserAssignedIdentities)
	return json.Marshal(objectMap)
}

// MetricAvailability - Retention policy of a resource metric.
type MetricAvailability struct {
	BlobDuration *string `json:"blobDuration,omitempty"`
	TimeGrain    *string `json:"timeGrain,omitempty"`
}

// MetricSpecification - Definition of a single resource metric.
type MetricSpecification struct {
	AggregationType                  *string               `json:"aggregationType,omitempty"`
	Availabilities                   []*MetricAvailability `json:"availabilities,omitempty"`
	Category                         *string               `json:"category,omitempty"`
	Dimensions                       []*Dimension          `json:"dimensions,omitempty"`
	DisplayDescription               *string               `json:"displayDescription,omitempty"`
	DisplayName                      *string               `json:"displayName,omitempty"`
	EnableRegionalMdmAccount         *bool                 `json:"enableRegionalMdmAccount,omitempty"`
	FillGapWithZero                  *bool                 `json:"fillGapWithZero,omitempty"`
	IsInternal                       *bool                 `json:"isInternal,omitempty"`
	MetricFilterPattern              *string               `json:"metricFilterPattern,omitempty"`
	Name                             *string               `json:"name,omitempty"`
	SourceMdmAccount                 *string               `json:"sourceMdmAccount,omitempty"`
	SourceMdmNamespace               *string               `json:"sourceMdmNamespace,omitempty"`
	SupportedAggregationTypes        []*string             `json:"supportedAggregationTypes,omitempty"`
	SupportedTimeGrainTypes          []*string             `json:"supportedTimeGrainTypes,omitempty"`
	SupportsInstanceLevelAggregation *bool                 `json:"supportsInstanceLevelAggregation,omitempty"`
	Unit                             *string               `json:"unit,omitempty"`
}

// MarshalJSON implements the json.Marshaller interface for type MetricSpecification.
func (m MetricSpecification) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "aggregationType", m.AggregationType)
	populate(objectMap, "availabilities", m.Availabilities)
	populate(objectMap, "category", m.Category)
	populate(objectMap, "dimensions", m.Dimensions)
	populate(objectMap, "displayDescription", m.DisplayDescription)
	populate(objectMap, "displayName", m.DisplayName)
	populate(objectMap, "enableRegionalMdmAccount", m.EnableRegionalMdmAccount)
	populate(objectMap, "fillGapWithZero", m.FillGapWithZero)
	populate(objectMap, "isInternal", m.IsInternal)
	populate(objectMap, "metricFilterPattern", m.MetricFilterPattern)
	populate(objectMap, "name", m.Name)
	populate(objectMap, "sourceMdmAccount", m.SourceMdmAccount)
	populate(objectMap, "sourceMdmNamespace", m.SourceMdmNamespace)
	populate(objectMap, "supportedAggregationTypes", m.SupportedAggregationTypes)
	populate(objectMap, "supportedTimeGrainTypes", m.SupportedTimeGrainTypes)
	populate(objectMap, "supportsInstanceLevelAggregation", m.SupportsInstanceLevelAggregation)
	populate(objectMap, "unit", m.Unit)
	return json.Marshal(objectMap)
}

// MigrateMySQLRequest - MySQL migration request.
type MigrateMySQLRequest struct {
	ProxyOnlyResource
	// MigrateMySqlRequest resource specific properties
	Properties *MigrateMySQLRequestProperties `json:"properties,omitempty"`
}

// MarshalJSON implements the json.Marshaller interface for type MigrateMySQLRequest.
func (m MigrateMySQLRequest) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	m.ProxyOnlyResource.marshalInternal(objectMap)
	populate(objectMap, "properties", m.Properties)
	return json.Marshal(objectMap)
}

// MigrateMySQLRequestProperties - MigrateMySqlRequest resource specific properties
type MigrateMySQLRequestProperties struct {
	// REQUIRED; Connection string to the remote MySQL database.
	ConnectionString *string `json:"connectionString,omitempty"`

	// REQUIRED; The type of migration operation to be done
	MigrationType *MySQLMigrationType `json:"migrationType,omitempty"`
}

// MigrateMySQLStatus - MySQL migration status.
type MigrateMySQLStatus struct {
	ProxyOnlyResource
	// MigrateMySqlStatus resource specific properties
	Properties *MigrateMySQLStatusProperties `json:"properties,omitempty"`
}

// MarshalJSON implements the json.Marshaller interface for type MigrateMySQLStatus.
func (m MigrateMySQLStatus) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	m.ProxyOnlyResource.marshalInternal(objectMap)
	populate(objectMap, "properties", m.Properties)
	return json.Marshal(objectMap)
}

// MigrateMySQLStatusProperties - MigrateMySqlStatus resource specific properties
type MigrateMySQLStatusProperties struct {
	// READ-ONLY; True if the web app has in app MySql enabled
	LocalMySQLEnabled *bool `json:"localMySqlEnabled,omitempty" azure:"ro"`

	// READ-ONLY; Status of the migration task.
	MigrationOperationStatus *OperationStatus `json:"migrationOperationStatus,omitempty" azure:"ro"`

	// READ-ONLY; Operation ID for the migration task.
	OperationID *string `json:"operationId,omitempty" azure:"ro"`
}

// NameIdentifier - Identifies an object.
type NameIdentifier struct {
	// Name of the object.
	Name *string `json:"name,omitempty"`
}

// NameIdentifierCollection - Collection of domain name identifiers.
type NameIdentifierCollection struct {
	// REQUIRED; Collection of resources.
	Value []*NameIdentifier `json:"value,omitempty"`

	// READ-ONLY; Link to next page of resources.
	NextLink *string `json:"nextLink,omitempty" azure:"ro"`
}

// MarshalJSON implements the json.Marshaller interface for type NameIdentifierCollection.
func (n NameIdentifierCollection) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "nextLink", n.NextLink)
	populate(objectMap, "value", n.Value)
	return json.Marshal(objectMap)
}

// NameValuePair - Name value pair.
type NameValuePair struct {
	// Pair name.
	Name *string `json:"name,omitempty"`

	// Pair value.
	Value *string `json:"value,omitempty"`
}

// NetworkFeatures - Full view of network features for an app (presently VNET integration and Hybrid Connections).
type NetworkFeatures struct {
	ProxyOnlyResource
	// NetworkFeatures resource specific properties
	Properties *NetworkFeaturesProperties `json:"properties,omitempty"`
}

// MarshalJSON implements the json.Marshaller interface for type NetworkFeatures.
func (n NetworkFeatures) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	n.ProxyOnlyResource.marshalInternal(objectMap)
	populate(objectMap, "properties", n.Properties)
	return json.Marshal(objectMap)
}

// NetworkFeaturesProperties - NetworkFeatures resource specific properties
type NetworkFeaturesProperties struct {
	// READ-ONLY; The Hybrid Connections summary view.
	HybridConnections []*RelayServiceConnectionEntity `json:"hybridConnections,omitempty" azure:"ro"`

	// READ-ONLY; The Hybrid Connection V2 (Service Bus) view.
	HybridConnectionsV2 []*HybridConnection `json:"hybridConnectionsV2,omitempty" azure:"ro"`

	// READ-ONLY; The Virtual Network summary view.
	VirtualNetworkConnection *VnetInfo `json:"virtualNetworkConnection,omitempty" azure:"ro"`

	// READ-ONLY; The Virtual Network name.
	VirtualNetworkName *string `json:"virtualNetworkName,omitempty" azure:"ro"`
}

// MarshalJSON implements the json.Marshaller interface for type NetworkFeaturesProperties.
func (n NetworkFeaturesProperties) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "hybridConnections", n.HybridConnections)
	populate(objectMap, "hybridConnectionsV2", n.HybridConnectionsV2)
	populate(objectMap, "virtualNetworkConnection", n.VirtualNetworkConnection)
	populate(objectMap, "virtualNetworkName", n.VirtualNetworkName)
	return json.Marshal(objectMap)
}

// NetworkTrace - Network trace
type NetworkTrace struct {
	// Detailed message of a network trace operation, e.g. error message in case of failure.
	Message *string `json:"message,omitempty"`

	// Local file path for the captured network trace file.
	Path *string `json:"path,omitempty"`

	// Current status of the network trace operation, same as Operation.Status (InProgress/Succeeded/Failed).
	Status *string `json:"status,omitempty"`
}

// Nonce - The configuration settings of the nonce used in the login flow.
type Nonce struct {
	// The time after the request is made when the nonce should expire.
	NonceExpirationInterval *string `json:"nonceExpirationInterval,omitempty"`

	// false if the nonce should not be validated while completing the login flow; otherwise, true.
	ValidateNonce *bool `json:"validateNonce,omitempty"`
}

// OpenIDConnectClientCredential - The authentication client credentials of the custom Open ID Connect provider.
type OpenIDConnectClientCredential struct {
	// The app setting that contains the client secret for the custom Open ID Connect provider.
	ClientSecretSettingName *string `json:"clientSecretSettingName,omitempty"`

	// The method that should be used to authenticate the user.
	Method *string `json:"method,omitempty"`
}

// OpenIDConnectConfig - The configuration settings of the endpoints used for the custom Open ID Connect provider.
type OpenIDConnectConfig struct {
	// The endpoint to be used to make an authorization request.
	AuthorizationEndpoint *string `json:"authorizationEndpoint,omitempty"`

	// The endpoint that provides the keys necessary to validate the token.
	CertificationURI *string `json:"certificationUri,omitempty"`

	// The endpoint that issues the token.
	Issuer *string `json:"issuer,omitempty"`

	// The endpoint to be used to request a token.
	TokenEndpoint *string `json:"tokenEndpoint,omitempty"`

	// The endpoint that contains all the configuration endpoints for the provider.
	WellKnownOpenIDConfiguration *string `json:"wellKnownOpenIdConfiguration,omitempty"`
}

// OpenIDConnectLogin - The configuration settings of the login flow of the custom Open ID Connect provider.
type OpenIDConnectLogin struct {
	// The name of the claim that contains the users name.
	NameClaimType *string `json:"nameClaimType,omitempty"`

	// A list of the scopes that should be requested while authenticating.
	Scopes []*string `json:"scopes,omitempty"`
}

// MarshalJSON implements the json.Marshaller interface for type OpenIDConnectLogin.
func (o OpenIDConnectLogin) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "nameClaimType", o.NameClaimType)
	populate(objectMap, "scopes", o.Scopes)
	return json.Marshal(objectMap)
}

// OpenIDConnectRegistration - The configuration settings of the app registration for the custom Open ID Connect provider.
type OpenIDConnectRegistration struct {
	// The authentication credentials of the custom Open ID Connect provider.
	ClientCredential *OpenIDConnectClientCredential `json:"clientCredential,omitempty"`

	// The client id of the custom Open ID Connect provider.
	ClientID *string `json:"clientId,omitempty"`

	// The configuration settings of the endpoints used for the custom Open ID Connect provider.
	OpenIDConnectConfiguration *OpenIDConnectConfig `json:"openIdConnectConfiguration,omitempty"`
}

// Operation - An operation on a resource.
type Operation struct {
	// Time when operation has started.
	CreatedTime *time.Time `json:"createdTime,omitempty"`

	// Any errors associate with the operation.
	Errors []*ErrorEntity `json:"errors,omitempty"`

	// Time when operation will expire.
	ExpirationTime *time.Time `json:"expirationTime,omitempty"`

	// Applicable only for stamp operation ids.
	GeoMasterOperationID *string `json:"geoMasterOperationId,omitempty"`

	// Operation ID.
	ID *string `json:"id,omitempty"`

	// Time when operation has been updated.
	ModifiedTime *time.Time `json:"modifiedTime,omitempty"`

	// Operation name.
	Name *string `json:"name,omitempty"`

	// The current status of the operation.
	Status *OperationStatus `json:"status,omitempty"`
}

// MarshalJSON implements the json.Marshaller interface for type Operation.
func (o Operation) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "createdTime", (*timeRFC3339)(o.CreatedTime))
	populate(objectMap, "errors", o.Errors)
	populate(objectMap, "expirationTime", (*timeRFC3339)(o.ExpirationTime))
	populate(objectMap, "geoMasterOperationId", o.GeoMasterOperationID)
	populate(objectMap, "id", o.ID)
	populate(objectMap, "modifiedTime", (*timeRFC3339)(o.ModifiedTime))
	populate(objectMap, "name", o.Name)
	populate(objectMap, "status", o.Status)
	return json.Marshal(objectMap)
}

// UnmarshalJSON implements the json.Unmarshaller interface for type Operation.
func (o *Operation) UnmarshalJSON(data []byte) error {
	var rawMsg map[string]json.RawMessage
	if err := json.Unmarshal(data, &rawMsg); err != nil {
		return err
	}
	for key, val := range rawMsg {
		var err error
		switch key {
		case "createdTime":
			var aux timeRFC3339
			err = unpopulate(val, &aux)
			o.CreatedTime = (*time.Time)(&aux)
			delete(rawMsg, key)
		case "errors":
			err = unpopulate(val, &o.Errors)
			delete(rawMsg, key)
		case "expirationTime":
			var aux timeRFC3339
			err = unpopulate(val, &aux)
			o.ExpirationTime = (*time.Time)(&aux)
			delete(rawMsg, key)
		case "geoMasterOperationId":
			err = unpopulate(val, &o.GeoMasterOperationID)
			delete(rawMsg, key)
		case "id":
			err = unpopulate(val, &o.ID)
			delete(rawMsg, key)
		case "modifiedTime":
			var aux timeRFC3339
			err = unpopulate(val, &aux)
			o.ModifiedTime = (*time.Time)(&aux)
			delete(rawMsg, key)
		case "name":
			err = unpopulate(val, &o.Name)
			delete(rawMsg, key)
		case "status":
			err = unpopulate(val, &o.Status)
			delete(rawMsg, key)
		}
		if err != nil {
			return err
		}
	}
	return nil
}

// OutboundEnvironmentEndpoint - Endpoints accessed for a common purpose that the App Service Environment requires outbound network access to.
type OutboundEnvironmentEndpoint struct {
	// The type of service accessed by the App Service Environment, e.g., Azure Storage, Azure SQL Database, and Azure Active Directory.
	Category *string `json:"category,omitempty"`

	// The endpoints that the App Service Environment reaches the service at.
	Endpoints []*EndpointDependency `json:"endpoints,omitempty"`
}

// MarshalJSON implements the json.Marshaller interface for type OutboundEnvironmentEndpoint.
func (o OutboundEnvironmentEndpoint) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "category", o.Category)
	populate(objectMap, "endpoints", o.Endpoints)
	return json.Marshal(objectMap)
}

// OutboundEnvironmentEndpointCollection - Collection of Outbound Environment Endpoints
type OutboundEnvironmentEndpointCollection struct {
	// REQUIRED; Collection of resources.
	Value []*OutboundEnvironmentEndpoint `json:"value,omitempty"`

	// READ-ONLY; Link to next page of resources.
	NextLink *string `json:"nextLink,omitempty" azure:"ro"`
}

// MarshalJSON implements the json.Marshaller interface for type OutboundEnvironmentEndpointCollection.
func (o OutboundEnvironmentEndpointCollection) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "nextLink", o.NextLink)
	populate(objectMap, "value", o.Value)
	return json.Marshal(objectMap)
}

// PerfMonCounterCollection - Collection of performance monitor counters.
type PerfMonCounterCollection struct {
	// REQUIRED; Collection of resources.
	Value []*PerfMonResponse `json:"value,omitempty"`

	// READ-ONLY; Link to next page of resources.
	NextLink *string `json:"nextLink,omitempty" azure:"ro"`
}

// MarshalJSON implements the json.Marshaller interface for type PerfMonCounterCollection.
func (p PerfMonCounterCollection) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "nextLink", p.NextLink)
	populate(objectMap, "value", p.Value)
	return json.Marshal(objectMap)
}

// PerfMonResponse - Performance monitor API response.
type PerfMonResponse struct {
	// The response code.
	Code *string `json:"code,omitempty"`

	// The performance monitor counters.
	Data *PerfMonSet `json:"data,omitempty"`

	// The message.
	Message *string `json:"message,omitempty"`
}

// PerfMonSample - Performance monitor sample in a set.
type PerfMonSample struct {
	// Name of the server on which the measurement is made.
	InstanceName *string `json:"instanceName,omitempty"`

	// Point in time for which counter was measured.
	Time *time.Time `json:"time,omitempty"`

	// Value of counter at a certain time.
	Value *float64 `json:"value,omitempty"`
}

// MarshalJSON implements the json.Marshaller interface for type PerfMonSample.
func (p PerfMonSample) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "instanceName", p.InstanceName)
	populate(objectMap, "time", (*timeRFC3339)(p.Time))
	populate(objectMap, "value", p.Value)
	return json.Marshal(objectMap)
}

// UnmarshalJSON implements the json.Unmarshaller interface for type PerfMonSample.
func (p *PerfMonSample) UnmarshalJSON(data []byte) error {
	var rawMsg map[string]json.RawMessage
	if err := json.Unmarshal(data, &rawMsg); err != nil {
		return err
	}
	for key, val := range rawMsg {
		var err error
		switch key {
		case "instanceName":
			err = unpopulate(val, &p.InstanceName)
			delete(rawMsg, key)
		case "time":
			var aux timeRFC3339
			err = unpopulate(val, &aux)
			p.Time = (*time.Time)(&aux)
			delete(rawMsg, key)
		case "value":
			err = unpopulate(val, &p.Value)
			delete(rawMsg, key)
		}
		if err != nil {
			return err
		}
	}
	return nil
}

// PerfMonSet - Metric information.
type PerfMonSet struct {
	// End time of the period.
	EndTime *time.Time `json:"endTime,omitempty"`

	// Unique key name of the counter.
	Name *string `json:"name,omitempty"`

	// Start time of the period.
	StartTime *time.Time `json:"startTime,omitempty"`

	// Presented time grain.
	TimeGrain *string `json:"timeGrain,omitempty"`

	// Collection of workers that are active during this time.
	Values []*PerfMonSample `json:"values,omitempty"`
}

// MarshalJSON implements the json.Marshaller interface for type PerfMonSet.
func (p PerfMonSet) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "endTime", (*timeRFC3339)(p.EndTime))
	populate(objectMap, "name", p.Name)
	populate(objectMap, "startTime", (*timeRFC3339)(p.StartTime))
	populate(objectMap, "timeGrain", p.TimeGrain)
	populate(objectMap, "values", p.Values)
	return json.Marshal(objectMap)
}

// UnmarshalJSON implements the json.Unmarshaller interface for type PerfMonSet.
func (p *PerfMonSet) UnmarshalJSON(data []byte) error {
	var rawMsg map[string]json.RawMessage
	if err := json.Unmarshal(data, &rawMsg); err != nil {
		return err
	}
	for key, val := range rawMsg {
		var err error
		switch key {
		case "endTime":
			var aux timeRFC3339
			err = unpopulate(val, &aux)
			p.EndTime = (*time.Time)(&aux)
			delete(rawMsg, key)
		case "name":
			err = unpopulate(val, &p.Name)
			delete(rawMsg, key)
		case "startTime":
			var aux timeRFC3339
			err = unpopulate(val, &aux)
			p.StartTime = (*time.Time)(&aux)
			delete(rawMsg, key)
		case "timeGrain":
			err = unpopulate(val, &p.TimeGrain)
			delete(rawMsg, key)
		case "values":
			err = unpopulate(val, &p.Values)
			delete(rawMsg, key)
		}
		if err != nil {
			return err
		}
	}
	return nil
}

// PremierAddOn - Premier add-on.
type PremierAddOn struct {
	Resource
	// PremierAddOn resource specific properties
	Properties *PremierAddOnProperties `json:"properties,omitempty"`
}

// MarshalJSON implements the json.Marshaller interface for type PremierAddOn.
func (p PremierAddOn) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	p.Resource.marshalInternal(objectMap)
	populate(objectMap, "properties", p.Properties)
	return json.Marshal(objectMap)
}

// PremierAddOnOffer - Premier add-on offer.
type PremierAddOnOffer struct {
	ProxyOnlyResource
	// PremierAddOnOffer resource specific properties
	Properties *PremierAddOnOfferProperties `json:"properties,omitempty"`
}

// MarshalJSON implements the json.Marshaller interface for type PremierAddOnOffer.
func (p PremierAddOnOffer) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	p.ProxyOnlyResource.marshalInternal(objectMap)
	populate(objectMap, "properties", p.Properties)
	return json.Marshal(objectMap)
}

// PremierAddOnOfferCollection - Collection of premier add-on offers.
type PremierAddOnOfferCollection struct {
	// REQUIRED; Collection of resources.
	Value []*PremierAddOnOffer `json:"value,omitempty"`

	// READ-ONLY; Link to next page of resources.
	NextLink *string `json:"nextLink,omitempty" azure:"ro"`
}

// MarshalJSON implements the json.Marshaller interface for type PremierAddOnOfferCollection.
func (p PremierAddOnOfferCollection) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "nextLink", p.NextLink)
	populate(objectMap, "value", p.Value)
	return json.Marshal(objectMap)
}

// PremierAddOnOfferProperties - PremierAddOnOffer resource specific properties
type PremierAddOnOfferProperties struct {
	// Legal terms URL.
	LegalTermsURL *string `json:"legalTermsUrl,omitempty"`

	// Marketplace offer.
	MarketplaceOffer *string `json:"marketplaceOffer,omitempty"`

	// Marketplace publisher.
	MarketplacePublisher *string `json:"marketplacePublisher,omitempty"`

	// Privacy policy URL.
	PrivacyPolicyURL *string `json:"privacyPolicyUrl,omitempty"`

	// Premier add on offer Product.
	Product *string `json:"product,omitempty"`

	// true if promotion code is required; otherwise, false.
	PromoCodeRequired *bool `json:"promoCodeRequired,omitempty"`

	// Premier add on offer Quota.
	Quota *int32 `json:"quota,omitempty"`

	// Premier add on SKU.
	SKU *string `json:"sku,omitempty"`

	// Premier add on offer Vendor.
	Vendor *string `json:"vendor,omitempty"`

	// App Service plans this offer is restricted to.
	WebHostingPlanRestrictions *AppServicePlanRestrictions `json:"webHostingPlanRestrictions,omitempty"`
}

// PremierAddOnPatchResource - ARM resource for a PremierAddOn.
type PremierAddOnPatchResource struct {
	ProxyOnlyResource
	// PremierAddOnPatchResource resource specific properties
	Properties *PremierAddOnPatchResourceProperties `json:"properties,omitempty"`
}

// MarshalJSON implements the json.Marshaller interface for type PremierAddOnPatchResource.
func (p PremierAddOnPatchResource) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	p.ProxyOnlyResource.marshalInternal(objectMap)
	populate(objectMap, "properties", p.Properties)
	return json.Marshal(objectMap)
}

// PremierAddOnPatchResourceProperties - PremierAddOnPatchResource resource specific properties
type PremierAddOnPatchResourceProperties struct {
	// Premier add on Marketplace offer.
	MarketplaceOffer *string `json:"marketplaceOffer,omitempty"`

	// Premier add on Marketplace publisher.
	MarketplacePublisher *string `json:"marketplacePublisher,omitempty"`

	// Premier add on Product.
	Product *string `json:"product,omitempty"`

	// Premier add on SKU.
	SKU *string `json:"sku,omitempty"`

	// Premier add on Vendor.
	Vendor *string `json:"vendor,omitempty"`
}

// PremierAddOnProperties - PremierAddOn resource specific properties
type PremierAddOnProperties struct {
	// Premier add on Marketplace offer.
	MarketplaceOffer *string `json:"marketplaceOffer,omitempty"`

	// Premier add on Marketplace publisher.
	MarketplacePublisher *string `json:"marketplacePublisher,omitempty"`

	// Premier add on Product.
	Product *string `json:"product,omitempty"`

	// Premier add on SKU.
	SKU *string `json:"sku,omitempty"`

	// Premier add on Vendor.
	Vendor *string `json:"vendor,omitempty"`
}

// PrivateAccess - Description of the parameters of Private Access for a Web Site.
type PrivateAccess struct {
	ProxyOnlyResource
	// PrivateAccess resource specific properties
	Properties *PrivateAccessProperties `json:"properties,omitempty"`
}

// MarshalJSON implements the json.Marshaller interface for type PrivateAccess.
func (p PrivateAccess) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	p.ProxyOnlyResource.marshalInternal(objectMap)
	populate(objectMap, "properties", p.Properties)
	return json.Marshal(objectMap)
}

// PrivateAccessProperties - PrivateAccess resource specific properties
type PrivateAccessProperties struct {
	// Whether private access is enabled or not.
	Enabled *bool `json:"enabled,omitempty"`

	// The Virtual Networks (and subnets) allowed to access the site privately.
	VirtualNetworks []*PrivateAccessVirtualNetwork `json:"virtualNetworks,omitempty"`
}

// MarshalJSON implements the json.Marshaller interface for type PrivateAccessProperties.
func (p PrivateAccessProperties) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "enabled", p.Enabled)
	populate(objectMap, "virtualNetworks", p.VirtualNetworks)
	return json.Marshal(objectMap)
}

// PrivateAccessSubnet - Description of a Virtual Network subnet that is useable for private site access.
type PrivateAccessSubnet struct {
	// The key (ID) of the subnet.
	Key *int32 `json:"key,omitempty"`

	// The name of the subnet.
	Name *string `json:"name,omitempty"`
}

// PrivateAccessVirtualNetwork - Description of a Virtual Network that is useable for private site access.
type PrivateAccessVirtualNetwork struct {
	// The key (ID) of the Virtual Network.
	Key *int32 `json:"key,omitempty"`

	// The name of the Virtual Network.
	Name *string `json:"name,omitempty"`

	// The ARM uri of the Virtual Network
	ResourceID *string `json:"resourceId,omitempty"`

	// A List of subnets that access is allowed to on this Virtual Network. An empty array (but not null) is interpreted to mean that all subnets are allowed
	// within this Virtual Network.
	Subnets []*PrivateAccessSubnet `json:"subnets,omitempty"`
}

// MarshalJSON implements the json.Marshaller interface for type PrivateAccessVirtualNetwork.
func (p PrivateAccessVirtualNetwork) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "key", p.Key)
	populate(objectMap, "name", p.Name)
	populate(objectMap, "resourceId", p.ResourceID)
	populate(objectMap, "subnets", p.Subnets)
	return json.Marshal(objectMap)
}

type PrivateEndpointConnectionCollection struct {
	// REQUIRED; Collection of resources.
	Value []*RemotePrivateEndpointConnectionARMResource `json:"value,omitempty"`

	// READ-ONLY; Link to next page of resources.
	NextLink *string `json:"nextLink,omitempty" azure:"ro"`
}

// MarshalJSON implements the json.Marshaller interface for type PrivateEndpointConnectionCollection.
func (p PrivateEndpointConnectionCollection) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "nextLink", p.NextLink)
	populate(objectMap, "value", p.Value)
	return json.Marshal(objectMap)
}

// PrivateLinkConnectionApprovalRequest - A request to approve or reject a private endpoint connection
type PrivateLinkConnectionApprovalRequest struct {
	// The state of a private link connection
	PrivateLinkServiceConnectionState *PrivateLinkConnectionState `json:"privateLinkServiceConnectionState,omitempty"`
}

// PrivateLinkConnectionApprovalRequestResource - Private Endpoint Connection Approval ARM resource.
type PrivateLinkConnectionApprovalRequestResource struct {
	ProxyOnlyResource
	// Core resource properties
	Properties *PrivateLinkConnectionApprovalRequest `json:"properties,omitempty"`
}

// MarshalJSON implements the json.Marshaller interface for type PrivateLinkConnectionApprovalRequestResource.
func (p PrivateLinkConnectionApprovalRequestResource) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	p.ProxyOnlyResource.marshalInternal(objectMap)
	populate(objectMap, "properties", p.Properties)
	return json.Marshal(objectMap)
}

// PrivateLinkConnectionState - The state of a private link connection
type PrivateLinkConnectionState struct {
	// ActionsRequired for a private link connection
	ActionsRequired *string `json:"actionsRequired,omitempty"`

	// Description of a private link connection
	Description *string `json:"description,omitempty"`

	// Status of a private link connection
	Status *string `json:"status,omitempty"`
}

// PrivateLinkResource - A private link resource
type PrivateLinkResource struct {
	// REQUIRED
	ID *string `json:"id,omitempty"`

	// REQUIRED; Name of a private link resource
	Name *string `json:"name,omitempty"`

	// REQUIRED; Properties of a private link resource
	Properties *PrivateLinkResourceProperties `json:"properties,omitempty"`

	// REQUIRED
	Type *string `json:"type,omitempty"`
}

// PrivateLinkResourceProperties - Properties of a private link resource
type PrivateLinkResourceProperties struct {
	// READ-ONLY; GroupId of a private link resource
	GroupID *string `json:"groupId,omitempty" azure:"ro"`

	// READ-ONLY; RequiredMembers of a private link resource
	RequiredMembers []*string `json:"requiredMembers,omitempty" azure:"ro"`

	// READ-ONLY; RequiredZoneNames of a private link resource
	RequiredZoneNames []*string `json:"requiredZoneNames,omitempty" azure:"ro"`
}

// MarshalJSON implements the json.Marshaller interface for type PrivateLinkResourceProperties.
func (p PrivateLinkResourceProperties) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "groupId", p.GroupID)
	populate(objectMap, "requiredMembers", p.RequiredMembers)
	populate(objectMap, "requiredZoneNames", p.RequiredZoneNames)
	return json.Marshal(objectMap)
}

// PrivateLinkResourcesWrapper - Wrapper for a collection of private link resources
type PrivateLinkResourcesWrapper struct {
	// REQUIRED
	Value []*PrivateLinkResource `json:"value,omitempty"`
}

// MarshalJSON implements the json.Marshaller interface for type PrivateLinkResourcesWrapper.
func (p PrivateLinkResourcesWrapper) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "value", p.Value)
	return json.Marshal(objectMap)
}

// ProcessInfo - Process Information.
type ProcessInfo struct {
	ProxyOnlyResource
	// ProcessInfo resource specific properties
	Properties *ProcessInfoProperties `json:"properties,omitempty"`
}

// MarshalJSON implements the json.Marshaller interface for type ProcessInfo.
func (p ProcessInfo) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	p.ProxyOnlyResource.marshalInternal(objectMap)
	populate(objectMap, "properties", p.Properties)
	return json.Marshal(objectMap)
}

// ProcessInfoCollection - Collection of Kudu process information elements.
type ProcessInfoCollection struct {
	// REQUIRED; Collection of resources.
	Value []*ProcessInfo `json:"value,omitempty"`

	// READ-ONLY; Link to next page of resources.
	NextLink *string `json:"nextLink,omitempty" azure:"ro"`
}

// MarshalJSON implements the json.Marshaller interface for type ProcessInfoCollection.
func (p ProcessInfoCollection) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "nextLink", p.NextLink)
	populate(objectMap, "value", p.Value)
	return json.Marshal(objectMap)
}

// ProcessInfoProperties - ProcessInfo resource specific properties
type ProcessInfoProperties struct {
	// Child process list.
	Children []*string `json:"children,omitempty"`

	// Command line.
	CommandLine *string `json:"command_line,omitempty"`

	// Deployment name.
	DeploymentName *string `json:"deployment_name,omitempty"`

	// Description of process.
	Description *string `json:"description,omitempty"`

	// List of environment variables.
	EnvironmentVariables map[string]*string `json:"environment_variables,omitempty"`

	// File name of this process.
	FileName *string `json:"file_name,omitempty"`

	// Handle count.
	HandleCount *int32 `json:"handle_count,omitempty"`

	// HRef URI.
	Href *string `json:"href,omitempty"`

	// IIS Profile timeout (seconds).
	IisProfileTimeoutInSeconds *float64 `json:"iis_profile_timeout_in_seconds,omitempty"`

	// Is the IIS Profile running?
	IsIisProfileRunning *bool `json:"is_iis_profile_running,omitempty"`

	// Is profile running?
	IsProfileRunning *bool `json:"is_profile_running,omitempty"`

	// Is this the SCM site?
	IsScmSite *bool `json:"is_scm_site,omitempty"`

	// Is this a Web Job?
	IsWebjob *bool `json:"is_webjob,omitempty"`

	// Minidump URI.
	Minidump *string `json:"minidump,omitempty"`

	// Module count.
	ModuleCount *int32 `json:"module_count,omitempty"`

	// List of modules.
	Modules []*ProcessModuleInfo `json:"modules,omitempty"`

	// Non-paged system memory.
	NonPagedSystemMemory *int64 `json:"non_paged_system_memory,omitempty"`

	// List of open files.
	OpenFileHandles []*string `json:"open_file_handles,omitempty"`

	// Paged memory.
	PagedMemory *int64 `json:"paged_memory,omitempty"`

	// Paged system memory.
	PagedSystemMemory *int64 `json:"paged_system_memory,omitempty"`

	// Parent process.
	Parent *string `json:"parent,omitempty"`

	// Peak paged memory.
	PeakPagedMemory *int64 `json:"peak_paged_memory,omitempty"`

	// Peak virtual memory usage.
	PeakVirtualMemory *int64 `json:"peak_virtual_memory,omitempty"`

	// Peak working set.
	PeakWorkingSet *int64 `json:"peak_working_set,omitempty"`

	// Private memory size.
	PrivateMemory *int64 `json:"private_memory,omitempty"`

	// Privileged CPU time.
	PrivilegedCPUTime *string `json:"privileged_cpu_time,omitempty"`

	// Start time.
	StartTime *time.Time `json:"start_time,omitempty"`

	// Thread count.
	ThreadCount *int32 `json:"thread_count,omitempty"`

	// Thread list.
	Threads []*ProcessThreadInfo `json:"threads,omitempty"`

	// Time stamp.
	TimeStamp *time.Time `json:"time_stamp,omitempty"`

	// Total CPU time.
	TotalCPUTime *string `json:"total_cpu_time,omitempty"`

	// User CPU time.
	UserCPUTime *string `json:"user_cpu_time,omitempty"`

	// User name.
	UserName *string `json:"user_name,omitempty"`

	// Virtual memory size.
	VirtualMemory *int64 `json:"virtual_memory,omitempty"`

	// Working set.
	WorkingSet *int64 `json:"working_set,omitempty"`

	// READ-ONLY; ARM Identifier for deployment.
	Identifier *int32 `json:"identifier,omitempty" azure:"ro"`
}

// MarshalJSON implements the json.Marshaller interface for type ProcessInfoProperties.
func (p ProcessInfoProperties) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "children", p.Children)
	populate(objectMap, "command_line", p.CommandLine)
	populate(objectMap, "deployment_name", p.DeploymentName)
	populate(objectMap, "description", p.Description)
	populate(objectMap, "environment_variables", p.EnvironmentVariables)
	populate(objectMap, "file_name", p.FileName)
	populate(objectMap, "handle_count", p.HandleCount)
	populate(objectMap, "href", p.Href)
	populate(objectMap, "identifier", p.Identifier)
	populate(objectMap, "iis_profile_timeout_in_seconds", p.IisProfileTimeoutInSeconds)
	populate(objectMap, "is_iis_profile_running", p.IsIisProfileRunning)
	populate(objectMap, "is_profile_running", p.IsProfileRunning)
	populate(objectMap, "is_scm_site", p.IsScmSite)
	populate(objectMap, "is_webjob", p.IsWebjob)
	populate(objectMap, "minidump", p.Minidump)
	populate(objectMap, "module_count", p.ModuleCount)
	populate(objectMap, "modules", p.Modules)
	populate(objectMap, "non_paged_system_memory", p.NonPagedSystemMemory)
	populate(objectMap, "open_file_handles", p.OpenFileHandles)
	populate(objectMap, "paged_memory", p.PagedMemory)
	populate(objectMap, "paged_system_memory", p.PagedSystemMemory)
	populate(objectMap, "parent", p.Parent)
	populate(objectMap, "peak_paged_memory", p.PeakPagedMemory)
	populate(objectMap, "peak_virtual_memory", p.PeakVirtualMemory)
	populate(objectMap, "peak_working_set", p.PeakWorkingSet)
	populate(objectMap, "private_memory", p.PrivateMemory)
	populate(objectMap, "privileged_cpu_time", p.PrivilegedCPUTime)
	populate(objectMap, "start_time", (*timeRFC3339)(p.StartTime))
	populate(objectMap, "thread_count", p.ThreadCount)
	populate(objectMap, "threads", p.Threads)
	populate(objectMap, "time_stamp", (*timeRFC3339)(p.TimeStamp))
	populate(objectMap, "total_cpu_time", p.TotalCPUTime)
	populate(objectMap, "user_cpu_time", p.UserCPUTime)
	populate(objectMap, "user_name", p.UserName)
	populate(objectMap, "virtual_memory", p.VirtualMemory)
	populate(objectMap, "working_set", p.WorkingSet)
	return json.Marshal(objectMap)
}

// UnmarshalJSON implements the json.Unmarshaller interface for type ProcessInfoProperties.
func (p *ProcessInfoProperties) UnmarshalJSON(data []byte) error {
	var rawMsg map[string]json.RawMessage
	if err := json.Unmarshal(data, &rawMsg); err != nil {
		return err
	}
	for key, val := range rawMsg {
		var err error
		switch key {
		case "children":
			err = unpopulate(val, &p.Children)
			delete(rawMsg, key)
		case "command_line":
			err = unpopulate(val, &p.CommandLine)
			delete(rawMsg, key)
		case "deployment_name":
			err = unpopulate(val, &p.DeploymentName)
			delete(rawMsg, key)
		case "description":
			err = unpopulate(val, &p.Description)
			delete(rawMsg, key)
		case "environment_variables":
			err = unpopulate(val, &p.EnvironmentVariables)
			delete(rawMsg, key)
		case "file_name":
			err = unpopulate(val, &p.FileName)
			delete(rawMsg, key)
		case "handle_count":
			err = unpopulate(val, &p.HandleCount)
			delete(rawMsg, key)
		case "href":
			err = unpopulate(val, &p.Href)
			delete(rawMsg, key)
		case "identifier":
			err = unpopulate(val, &p.Identifier)
			delete(rawMsg, key)
		case "iis_profile_timeout_in_seconds":
			err = unpopulate(val, &p.IisProfileTimeoutInSeconds)
			delete(rawMsg, key)
		case "is_iis_profile_running":
			err = unpopulate(val, &p.IsIisProfileRunning)
			delete(rawMsg, key)
		case "is_profile_running":
			err = unpopulate(val, &p.IsProfileRunning)
			delete(rawMsg, key)
		case "is_scm_site":
			err = unpopulate(val, &p.IsScmSite)
			delete(rawMsg, key)
		case "is_webjob":
			err = unpopulate(val, &p.IsWebjob)
			delete(rawMsg, key)
		case "minidump":
			err = unpopulate(val, &p.Minidump)
			delete(rawMsg, key)
		case "module_count":
			err = unpopulate(val, &p.ModuleCount)
			delete(rawMsg, key)
		case "modules":
			err = unpopulate(val, &p.Modules)
			delete(rawMsg, key)
		case "non_paged_system_memory":
			err = unpopulate(val, &p.NonPagedSystemMemory)
			delete(rawMsg, key)
		case "open_file_handles":
			err = unpopulate(val, &p.OpenFileHandles)
			delete(rawMsg, key)
		case "paged_memory":
			err = unpopulate(val, &p.PagedMemory)
			delete(rawMsg, key)
		case "paged_system_memory":
			err = unpopulate(val, &p.PagedSystemMemory)
			delete(rawMsg, key)
		case "parent":
			err = unpopulate(val, &p.Parent)
			delete(rawMsg, key)
		case "peak_paged_memory":
			err = unpopulate(val, &p.PeakPagedMemory)
			delete(rawMsg, key)
		case "peak_virtual_memory":
			err = unpopulate(val, &p.PeakVirtualMemory)
			delete(rawMsg, key)
		case "peak_working_set":
			err = unpopulate(val, &p.PeakWorkingSet)
			delete(rawMsg, key)
		case "private_memory":
			err = unpopulate(val, &p.PrivateMemory)
			delete(rawMsg, key)
		case "privileged_cpu_time":
			err = unpopulate(val, &p.PrivilegedCPUTime)
			delete(rawMsg, key)
		case "start_time":
			var aux timeRFC3339
			err = unpopulate(val, &aux)
			p.StartTime = (*time.Time)(&aux)
			delete(rawMsg, key)
		case "thread_count":
			err = unpopulate(val, &p.ThreadCount)
			delete(rawMsg, key)
		case "threads":
			err = unpopulate(val, &p.Threads)
			delete(rawMsg, key)
		case "time_stamp":
			var aux timeRFC3339
			err = unpopulate(val, &aux)
			p.TimeStamp = (*time.Time)(&aux)
			delete(rawMsg, key)
		case "total_cpu_time":
			err = unpopulate(val, &p.TotalCPUTime)
			delete(rawMsg, key)
		case "user_cpu_time":
			err = unpopulate(val, &p.UserCPUTime)
			delete(rawMsg, key)
		case "user_name":
			err = unpopulate(val, &p.UserName)
			delete(rawMsg, key)
		case "virtual_memory":
			err = unpopulate(val, &p.VirtualMemory)
			delete(rawMsg, key)
		case "working_set":
			err = unpopulate(val, &p.WorkingSet)
			delete(rawMsg, key)
		}
		if err != nil {
			return err
		}
	}
	return nil
}

// ProcessModuleInfo - Process Module Information.
type ProcessModuleInfo struct {
	ProxyOnlyResource
	// ProcessModuleInfo resource specific properties
	Properties *ProcessModuleInfoProperties `json:"properties,omitempty"`
}

// MarshalJSON implements the json.Marshaller interface for type ProcessModuleInfo.
func (p ProcessModuleInfo) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	p.ProxyOnlyResource.marshalInternal(objectMap)
	populate(objectMap, "properties", p.Properties)
	return json.Marshal(objectMap)
}

// ProcessModuleInfoCollection - Collection of Kudu thread information elements.
type ProcessModuleInfoCollection struct {
	// REQUIRED; Collection of resources.
	Value []*ProcessModuleInfo `json:"value,omitempty"`

	// READ-ONLY; Link to next page of resources.
	NextLink *string `json:"nextLink,omitempty" azure:"ro"`
}

// MarshalJSON implements the json.Marshaller interface for type ProcessModuleInfoCollection.
func (p ProcessModuleInfoCollection) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "nextLink", p.NextLink)
	populate(objectMap, "value", p.Value)
	return json.Marshal(objectMap)
}

// ProcessModuleInfoProperties - ProcessModuleInfo resource specific properties
type ProcessModuleInfoProperties struct {
	// Base address. Used as module identifier in ARM resource URI.
	BaseAddress *string `json:"base_address,omitempty"`

	// File description.
	FileDescription *string `json:"file_description,omitempty"`

	// File name.
	FileName *string `json:"file_name,omitempty"`

	// File path.
	FilePath *string `json:"file_path,omitempty"`

	// File version.
	FileVersion *string `json:"file_version,omitempty"`

	// HRef URI.
	Href *string `json:"href,omitempty"`

	// Is debug?
	IsDebug *bool `json:"is_debug,omitempty"`

	// Module language (locale).
	Language *string `json:"language,omitempty"`

	// Module memory size.
	ModuleMemorySize *int32 `json:"module_memory_size,omitempty"`

	// Product name.
	Product *string `json:"product,omitempty"`

	// Product version.
	ProductVersion *string `json:"product_version,omitempty"`
}

// ProcessThreadInfo - Process Thread Information.
type ProcessThreadInfo struct {
	ProxyOnlyResource
	// ProcessThreadInfo resource specific properties
	Properties *ProcessThreadInfoProperties `json:"properties,omitempty"`
}

// MarshalJSON implements the json.Marshaller interface for type ProcessThreadInfo.
func (p ProcessThreadInfo) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	p.ProxyOnlyResource.marshalInternal(objectMap)
	populate(objectMap, "properties", p.Properties)
	return json.Marshal(objectMap)
}

// ProcessThreadInfoCollection - Collection of Kudu thread information elements.
type ProcessThreadInfoCollection struct {
	// REQUIRED; Collection of resources.
	Value []*ProcessThreadInfo `json:"value,omitempty"`

	// READ-ONLY; Link to next page of resources.
	NextLink *string `json:"nextLink,omitempty" azure:"ro"`
}

// MarshalJSON implements the json.Marshaller interface for type ProcessThreadInfoCollection.
func (p ProcessThreadInfoCollection) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "nextLink", p.NextLink)
	populate(objectMap, "value", p.Value)
	return json.Marshal(objectMap)
}

// ProcessThreadInfoProperties - ProcessThreadInfo resource specific properties
type ProcessThreadInfoProperties struct {
	// Base priority.
	BasePriority *int32 `json:"base_priority,omitempty"`

	// Current thread priority.
	CurrentPriority *int32 `json:"current_priority,omitempty"`

	// HRef URI.
	Href *string `json:"href,omitempty"`

	// Thread priority level.
	PriorityLevel *string `json:"priority_level,omitempty"`

	// Process URI.
	Process *string `json:"process,omitempty"`

	// Start address.
	StartAddress *string `json:"start_address,omitempty"`

	// Start time.
	StartTime *time.Time `json:"start_time,omitempty"`

	// Thread state.
	State *string `json:"state,omitempty"`

	// Total processor time.
	TotalProcessorTime *string `json:"total_processor_time,omitempty"`

	// User processor time.
	UserProcessorTime *string `json:"user_processor_time,omitempty"`

	// Wait reason.
	WaitReason *string `json:"wait_reason,omitempty"`

	// READ-ONLY; Site extension ID.
	Identifier *int32 `json:"identifier,omitempty" azure:"ro"`
}

// MarshalJSON implements the json.Marshaller interface for type ProcessThreadInfoProperties.
func (p ProcessThreadInfoProperties) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "base_priority", p.BasePriority)
	populate(objectMap, "current_priority", p.CurrentPriority)
	populate(objectMap, "href", p.Href)
	populate(objectMap, "identifier", p.Identifier)
	populate(objectMap, "priority_level", p.PriorityLevel)
	populate(objectMap, "process", p.Process)
	populate(objectMap, "start_address", p.StartAddress)
	populate(objectMap, "start_time", (*timeRFC3339)(p.StartTime))
	populate(objectMap, "state", p.State)
	populate(objectMap, "total_processor_time", p.TotalProcessorTime)
	populate(objectMap, "user_processor_time", p.UserProcessorTime)
	populate(objectMap, "wait_reason", p.WaitReason)
	return json.Marshal(objectMap)
}

// UnmarshalJSON implements the json.Unmarshaller interface for type ProcessThreadInfoProperties.
func (p *ProcessThreadInfoProperties) UnmarshalJSON(data []byte) error {
	var rawMsg map[string]json.RawMessage
	if err := json.Unmarshal(data, &rawMsg); err != nil {
		return err
	}
	for key, val := range rawMsg {
		var err error
		switch key {
		case "base_priority":
			err = unpopulate(val, &p.BasePriority)
			delete(rawMsg, key)
		case "current_priority":
			err = unpopulate(val, &p.CurrentPriority)
			delete(rawMsg, key)
		case "href":
			err = unpopulate(val, &p.Href)
			delete(rawMsg, key)
		case "identifier":
			err = unpopulate(val, &p.Identifier)
			delete(rawMsg, key)
		case "priority_level":
			err = unpopulate(val, &p.PriorityLevel)
			delete(rawMsg, key)
		case "process":
			err = unpopulate(val, &p.Process)
			delete(rawMsg, key)
		case "start_address":
			err = unpopulate(val, &p.StartAddress)
			delete(rawMsg, key)
		case "start_time":
			var aux timeRFC3339
			err = unpopulate(val, &aux)
			p.StartTime = (*time.Time)(&aux)
			delete(rawMsg, key)
		case "state":
			err = unpopulate(val, &p.State)
			delete(rawMsg, key)
		case "total_processor_time":
			err = unpopulate(val, &p.TotalProcessorTime)
			delete(rawMsg, key)
		case "user_processor_time":
			err = unpopulate(val, &p.UserProcessorTime)
			delete(rawMsg, key)
		case "wait_reason":
			err = unpopulate(val, &p.WaitReason)
			delete(rawMsg, key)
		}
		if err != nil {
			return err
		}
	}
	return nil
}

// ProviderGetAvailableStacksOnPremOptions contains the optional parameters for the Provider.GetAvailableStacksOnPrem method.
type ProviderGetAvailableStacksOnPremOptions struct {
	OSTypeSelected *Enum15
}

// ProviderGetAvailableStacksOptions contains the optional parameters for the Provider.GetAvailableStacks method.
type ProviderGetAvailableStacksOptions struct {
	OSTypeSelected *Enum10
}

// ProviderGetFunctionAppStacksForLocationOptions contains the optional parameters for the Provider.GetFunctionAppStacksForLocation method.
type ProviderGetFunctionAppStacksForLocationOptions struct {
	// Stack OS Type
	StackOsType *Enum12
}

// ProviderGetFunctionAppStacksOptions contains the optional parameters for the Provider.GetFunctionAppStacks method.
type ProviderGetFunctionAppStacksOptions struct {
	// Stack OS Type
	StackOsType *Enum11
}

// ProviderGetWebAppStacksForLocationOptions contains the optional parameters for the Provider.GetWebAppStacksForLocation method.
type ProviderGetWebAppStacksForLocationOptions struct {
	// Stack OS Type
	StackOsType *Enum13
}

// ProviderGetWebAppStacksOptions contains the optional parameters for the Provider.GetWebAppStacks method.
type ProviderGetWebAppStacksOptions struct {
	// Stack OS Type
	StackOsType *Enum14
}

// ProviderListOperationsOptions contains the optional parameters for the Provider.ListOperations method.
type ProviderListOperationsOptions struct {
	// placeholder for future optional parameters
}

// ProxyOnlyResource - Azure proxy only resource. This resource is not tracked by Azure Resource Manager.
type ProxyOnlyResource struct {
	// Kind of resource.
	Kind *string `json:"kind,omitempty"`

	// READ-ONLY; Resource Id.
	ID *string `json:"id,omitempty" azure:"ro"`

	// READ-ONLY; Resource Name.
	Name *string `json:"name,omitempty" azure:"ro"`

	// READ-ONLY; Resource type.
	Type *string `json:"type,omitempty" azure:"ro"`
}

// MarshalJSON implements the json.Marshaller interface for type ProxyOnlyResource.
func (p ProxyOnlyResource) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	p.marshalInternal(objectMap)
	return json.Marshal(objectMap)
}

func (p ProxyOnlyResource) marshalInternal(objectMap map[string]interface{}) {
	populate(objectMap, "id", p.ID)
	populate(objectMap, "kind", p.Kind)
	populate(objectMap, "name", p.Name)
	populate(objectMap, "type", p.Type)
}

// PublicCertificate - Public certificate object
type PublicCertificate struct {
	ProxyOnlyResource
	// PublicCertificate resource specific properties
	Properties *PublicCertificateProperties `json:"properties,omitempty"`
}

// MarshalJSON implements the json.Marshaller interface for type PublicCertificate.
func (p PublicCertificate) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	p.ProxyOnlyResource.marshalInternal(objectMap)
	populate(objectMap, "properties", p.Properties)
	return json.Marshal(objectMap)
}

// PublicCertificateCollection - Collection of public certificates
type PublicCertificateCollection struct {
	// REQUIRED; Collection of resources.
	Value []*PublicCertificate `json:"value,omitempty"`

	// READ-ONLY; Link to next page of resources.
	NextLink *string `json:"nextLink,omitempty" azure:"ro"`
}

// MarshalJSON implements the json.Marshaller interface for type PublicCertificateCollection.
func (p PublicCertificateCollection) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "nextLink", p.NextLink)
	populate(objectMap, "value", p.Value)
	return json.Marshal(objectMap)
}

// PublicCertificateProperties - PublicCertificate resource specific properties
type PublicCertificateProperties struct {
	// Public Certificate byte array
	Blob []byte `json:"blob,omitempty"`

	// Public Certificate Location
	PublicCertificateLocation *PublicCertificateLocation `json:"publicCertificateLocation,omitempty"`

	// READ-ONLY; Certificate Thumbprint
	Thumbprint *string `json:"thumbprint,omitempty" azure:"ro"`
}

// MarshalJSON implements the json.Marshaller interface for type PublicCertificateProperties.
func (p PublicCertificateProperties) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populateByteArray(objectMap, "blob", p.Blob, runtime.Base64StdFormat)
	populate(objectMap, "publicCertificateLocation", p.PublicCertificateLocation)
	populate(objectMap, "thumbprint", p.Thumbprint)
	return json.Marshal(objectMap)
}

// UnmarshalJSON implements the json.Unmarshaller interface for type PublicCertificateProperties.
func (p *PublicCertificateProperties) UnmarshalJSON(data []byte) error {
	var rawMsg map[string]json.RawMessage
	if err := json.Unmarshal(data, &rawMsg); err != nil {
		return err
	}
	for key, val := range rawMsg {
		var err error
		switch key {
		case "blob":
			err = runtime.DecodeByteArray(string(val), &p.Blob, runtime.Base64StdFormat)
			delete(rawMsg, key)
		case "publicCertificateLocation":
			err = unpopulate(val, &p.PublicCertificateLocation)
			delete(rawMsg, key)
		case "thumbprint":
			err = unpopulate(val, &p.Thumbprint)
			delete(rawMsg, key)
		}
		if err != nil {
			return err
		}
	}
	return nil
}

// PublishingCredentialsPoliciesCollection - Publishing Credentials Policies entity collection ARM resource.
type PublishingCredentialsPoliciesCollection struct {
	// REQUIRED; Collection of resources.
	Value []*CsmPublishingCredentialsPoliciesEntity `json:"value,omitempty"`

	// READ-ONLY; Link to next page of resources.
	NextLink *string `json:"nextLink,omitempty" azure:"ro"`
}

// MarshalJSON implements the json.Marshaller interface for type PublishingCredentialsPoliciesCollection.
func (p PublishingCredentialsPoliciesCollection) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "nextLink", p.NextLink)
	populate(objectMap, "value", p.Value)
	return json.Marshal(objectMap)
}

// PushSettings - Push settings for the App.
type PushSettings struct {
	ProxyOnlyResource
	// PushSettings resource specific properties
	Properties *PushSettingsProperties `json:"properties,omitempty"`
}

// MarshalJSON implements the json.Marshaller interface for type PushSettings.
func (p PushSettings) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	p.ProxyOnlyResource.marshalInternal(objectMap)
	populate(objectMap, "properties", p.Properties)
	return json.Marshal(objectMap)
}

// PushSettingsProperties - PushSettings resource specific properties
type PushSettingsProperties struct {
	// REQUIRED; Gets or sets a flag indicating whether the Push endpoint is enabled.
	IsPushEnabled *bool `json:"isPushEnabled,omitempty"`

	// Gets or sets a JSON string containing a list of dynamic tags that will be evaluated from user claims in the push registration endpoint.
	DynamicTagsJSON *string `json:"dynamicTagsJson,omitempty"`

	// Gets or sets a JSON string containing a list of tags that are whitelisted for use by the push registration endpoint.
	TagWhitelistJSON *string `json:"tagWhitelistJson,omitempty"`

	// Gets or sets a JSON string containing a list of tags that require user authentication to be used in the push registration endpoint. Tags can consist
	// of alphanumeric characters and the following: '_',
	// '@', '#', '.', ':', '-'. Validation should be performed at the PushRequestHandler.
	TagsRequiringAuth *string `json:"tagsRequiringAuth,omitempty"`
}

// QueryUtterancesResult - Result for utterances query.
type QueryUtterancesResult struct {
	// A sample utterance.
	SampleUtterance *SampleUtterance `json:"sampleUtterance,omitempty"`

	// Score of a sample utterance.
	Score *float32 `json:"score,omitempty"`
}

// QueryUtterancesResults - Suggested utterances where the detector can be applicable
type QueryUtterancesResults struct {
	// Search Query.
	Query *string `json:"query,omitempty"`

	// Array of utterance results for search query.
	Results []*QueryUtterancesResult `json:"results,omitempty"`
}

// MarshalJSON implements the json.Marshaller interface for type QueryUtterancesResults.
func (q QueryUtterancesResults) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "query", q.Query)
	populate(objectMap, "results", q.Results)
	return json.Marshal(objectMap)
}

// RampUpRule - Routing rules for ramp up testing. This rule allows to redirect static traffic % to a slot or to gradually change routing % based on performance.
type RampUpRule struct {
	// Hostname of a slot to which the traffic will be redirected if decided to. E.g. myapp-stage.azurewebsites.net.
	ActionHostName *string `json:"actionHostName,omitempty"`

	// Custom decision algorithm can be provided in TiPCallback site extension which URL can be specified. See TiPCallback site extension for the scaffold and
	// contracts.
	// https://www.siteextensions.net/packages/TiPCallback/
	ChangeDecisionCallbackURL *string `json:"changeDecisionCallbackUrl,omitempty"`

	// Specifies interval in minutes to reevaluate ReroutePercentage.
	ChangeIntervalInMinutes *int32 `json:"changeIntervalInMinutes,omitempty"`

	// In auto ramp up scenario this is the step to add/remove from ReroutePercentage until it reaches \nMinReroutePercentage orMaxReroutePercentage. Site metrics
	// are checked every N minutes specified in
	// ChangeIntervalInMinutes.\nCustom decision algorithm can be provided in TiPCallback site extension which URL can be specified in ChangeDecisionCallbackUrl.
	ChangeStep *float64 `json:"changeStep,omitempty"`

	// Specifies upper boundary below which ReroutePercentage will stay.
	MaxReroutePercentage *float64 `json:"maxReroutePercentage,omitempty"`

	// Specifies lower boundary above which ReroutePercentage will stay.
	MinReroutePercentage *float64 `json:"minReroutePercentage,omitempty"`

	// Name of the routing rule. The recommended name would be to point to the slot which will receive the traffic in the experiment.
	Name *string `json:"name,omitempty"`

	// Percentage of the traffic which will be redirected to ActionHostName.
	ReroutePercentage *float64 `json:"reroutePercentage,omitempty"`
}

// Recommendation - Represents a recommendation result generated by the recommendation engine.
type Recommendation struct {
	ProxyOnlyResource
	// Recommendation resource specific properties
	Properties *RecommendationProperties `json:"properties,omitempty"`
}

// MarshalJSON implements the json.Marshaller interface for type Recommendation.
func (r Recommendation) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	r.ProxyOnlyResource.marshalInternal(objectMap)
	populate(objectMap, "properties", r.Properties)
	return json.Marshal(objectMap)
}

// RecommendationCollection - Collection of recommendations.
type RecommendationCollection struct {
	// REQUIRED; Collection of resources.
	Value []*Recommendation `json:"value,omitempty"`

	// READ-ONLY; Link to next page of resources.
	NextLink *string `json:"nextLink,omitempty" azure:"ro"`
}

// MarshalJSON implements the json.Marshaller interface for type RecommendationCollection.
func (r RecommendationCollection) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "nextLink", r.NextLink)
	populate(objectMap, "value", r.Value)
	return json.Marshal(objectMap)
}

// RecommendationProperties - Recommendation resource specific properties
type RecommendationProperties struct {
	// Name of action recommended by this object.
	ActionName *string `json:"actionName,omitempty"`

	// Deep link to a blade on the portal.
	BladeName *string `json:"bladeName,omitempty"`

	// List of channels that this recommendation can apply.
	Channels *Channels `json:"channels,omitempty"`

	// Timestamp when this instance was created.
	CreationTime *time.Time `json:"creationTime,omitempty"`

	// UI friendly name of the rule (may not be unique).
	DisplayName *string `json:"displayName,omitempty"`

	// True if this recommendation is still valid (i.e. "actionable"). False if it is invalid.
	Enabled *int32 `json:"enabled,omitempty"`

	// The end time in UTC of a range that the recommendation refers to.
	EndTime *time.Time `json:"endTime,omitempty"`

	// Extension name of the portal if exists.
	ExtensionName *string `json:"extensionName,omitempty"`

	// Forward link to an external document associated with the rule.
	ForwardLink *string `json:"forwardLink,omitempty"`

	// True if this is associated with a dynamically added rule
	IsDynamic *bool `json:"isDynamic,omitempty"`

	// Level indicating how critical this recommendation can impact.
	Level *NotificationLevel `json:"level,omitempty"`

	// Recommendation text.
	Message *string `json:"message,omitempty"`

	// When to notify this recommendation next in UTC. Null means that this will never be notified anymore.
	NextNotificationTime *time.Time `json:"nextNotificationTime,omitempty"`

	// Date and time in UTC when this notification expires.
	NotificationExpirationTime *time.Time `json:"notificationExpirationTime,omitempty"`

	// Last timestamp in UTC this instance was actually notified. Null means that this recommendation hasn't been notified yet.
	NotifiedTime *time.Time `json:"notifiedTime,omitempty"`

	// A GUID value that each recommendation object is associated with.
	RecommendationID *string `json:"recommendationId,omitempty"`

	// Full ARM resource ID string that this recommendation object is associated with.
	ResourceID *string `json:"resourceId,omitempty"`

	// Name of a resource type this recommendation applies, e.g. Subscription, ServerFarm, Site.
	ResourceScope *ResourceScopeType `json:"resourceScope,omitempty"`

	// Unique name of the rule.
	RuleName *string `json:"ruleName,omitempty"`

	// A metric value measured by the rule.
	Score *float64 `json:"score,omitempty"`

	// The beginning time in UTC of a range that the recommendation refers to.
	StartTime *time.Time `json:"startTime,omitempty"`

	// The list of states of this recommendation. If it's null then it should be considered "Active".
	States []*string `json:"states,omitempty"`

	// READ-ONLY; The list of category tags that this recommendation belongs to.
	CategoryTags []*string `json:"categoryTags,omitempty" azure:"ro"`
}

// MarshalJSON implements the json.Marshaller interface for type RecommendationProperties.
func (r RecommendationProperties) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "actionName", r.ActionName)
	populate(objectMap, "bladeName", r.BladeName)
	populate(objectMap, "categoryTags", r.CategoryTags)
	populate(objectMap, "channels", r.Channels)
	populate(objectMap, "creationTime", (*timeRFC3339)(r.CreationTime))
	populate(objectMap, "displayName", r.DisplayName)
	populate(objectMap, "enabled", r.Enabled)
	populate(objectMap, "endTime", (*timeRFC3339)(r.EndTime))
	populate(objectMap, "extensionName", r.ExtensionName)
	populate(objectMap, "forwardLink", r.ForwardLink)
	populate(objectMap, "isDynamic", r.IsDynamic)
	populate(objectMap, "level", r.Level)
	populate(objectMap, "message", r.Message)
	populate(objectMap, "nextNotificationTime", (*timeRFC3339)(r.NextNotificationTime))
	populate(objectMap, "notificationExpirationTime", (*timeRFC3339)(r.NotificationExpirationTime))
	populate(objectMap, "notifiedTime", (*timeRFC3339)(r.NotifiedTime))
	populate(objectMap, "recommendationId", r.RecommendationID)
	populate(objectMap, "resourceId", r.ResourceID)
	populate(objectMap, "resourceScope", r.ResourceScope)
	populate(objectMap, "ruleName", r.RuleName)
	populate(objectMap, "score", r.Score)
	populate(objectMap, "startTime", (*timeRFC3339)(r.StartTime))
	populate(objectMap, "states", r.States)
	return json.Marshal(objectMap)
}

// UnmarshalJSON implements the json.Unmarshaller interface for type RecommendationProperties.
func (r *RecommendationProperties) UnmarshalJSON(data []byte) error {
	var rawMsg map[string]json.RawMessage
	if err := json.Unmarshal(data, &rawMsg); err != nil {
		return err
	}
	for key, val := range rawMsg {
		var err error
		switch key {
		case "actionName":
			err = unpopulate(val, &r.ActionName)
			delete(rawMsg, key)
		case "bladeName":
			err = unpopulate(val, &r.BladeName)
			delete(rawMsg, key)
		case "categoryTags":
			err = unpopulate(val, &r.CategoryTags)
			delete(rawMsg, key)
		case "channels":
			err = unpopulate(val, &r.Channels)
			delete(rawMsg, key)
		case "creationTime":
			var aux timeRFC3339
			err = unpopulate(val, &aux)
			r.CreationTime = (*time.Time)(&aux)
			delete(rawMsg, key)
		case "displayName":
			err = unpopulate(val, &r.DisplayName)
			delete(rawMsg, key)
		case "enabled":
			err = unpopulate(val, &r.Enabled)
			delete(rawMsg, key)
		case "endTime":
			var aux timeRFC3339
			err = unpopulate(val, &aux)
			r.EndTime = (*time.Time)(&aux)
			delete(rawMsg, key)
		case "extensionName":
			err = unpopulate(val, &r.ExtensionName)
			delete(rawMsg, key)
		case "forwardLink":
			err = unpopulate(val, &r.ForwardLink)
			delete(rawMsg, key)
		case "isDynamic":
			err = unpopulate(val, &r.IsDynamic)
			delete(rawMsg, key)
		case "level":
			err = unpopulate(val, &r.Level)
			delete(rawMsg, key)
		case "message":
			err = unpopulate(val, &r.Message)
			delete(rawMsg, key)
		case "nextNotificationTime":
			var aux timeRFC3339
			err = unpopulate(val, &aux)
			r.NextNotificationTime = (*time.Time)(&aux)
			delete(rawMsg, key)
		case "notificationExpirationTime":
			var aux timeRFC3339
			err = unpopulate(val, &aux)
			r.NotificationExpirationTime = (*time.Time)(&aux)
			delete(rawMsg, key)
		case "notifiedTime":
			var aux timeRFC3339
			err = unpopulate(val, &aux)
			r.NotifiedTime = (*time.Time)(&aux)
			delete(rawMsg, key)
		case "recommendationId":
			err = unpopulate(val, &r.RecommendationID)
			delete(rawMsg, key)
		case "resourceId":
			err = unpopulate(val, &r.ResourceID)
			delete(rawMsg, key)
		case "resourceScope":
			err = unpopulate(val, &r.ResourceScope)
			delete(rawMsg, key)
		case "ruleName":
			err = unpopulate(val, &r.RuleName)
			delete(rawMsg, key)
		case "score":
			err = unpopulate(val, &r.Score)
			delete(rawMsg, key)
		case "startTime":
			var aux timeRFC3339
			err = unpopulate(val, &aux)
			r.StartTime = (*time.Time)(&aux)
			delete(rawMsg, key)
		case "states":
			err = unpopulate(val, &r.States)
			delete(rawMsg, key)
		}
		if err != nil {
			return err
		}
	}
	return nil
}

// RecommendationRule - Represents a recommendation rule that the recommendation engine can perform.
type RecommendationRule struct {
	ProxyOnlyResource
	// RecommendationRule resource specific properties
	Properties *RecommendationRuleProperties `json:"properties,omitempty"`
}

// MarshalJSON implements the json.Marshaller interface for type RecommendationRule.
func (r RecommendationRule) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	r.ProxyOnlyResource.marshalInternal(objectMap)
	populate(objectMap, "properties", r.Properties)
	return json.Marshal(objectMap)
}

// RecommendationRuleProperties - RecommendationRule resource specific properties
type RecommendationRuleProperties struct {
	// Name of action that is recommended by this rule in string.
	ActionName *string `json:"actionName,omitempty"`

	// Deep link to a blade on the portal. Applicable to dynamic rule only.
	BladeName *string `json:"bladeName,omitempty"`

	// List of available channels that this rule applies.
	Channels *Channels `json:"channels,omitempty"`

	// Localized detailed description of the rule.
	Description *string `json:"description,omitempty"`

	// UI friendly name of the rule.
	DisplayName *string `json:"displayName,omitempty"`

	// Extension name of the portal if exists. Applicable to dynamic rule only.
	ExtensionName *string `json:"extensionName,omitempty"`

	// Forward link to an external document associated with the rule. Applicable to dynamic rule only.
	ForwardLink *string `json:"forwardLink,omitempty"`

	// True if this is associated with a dynamically added rule
	IsDynamic *bool `json:"isDynamic,omitempty"`

	// Level of impact indicating how critical this rule is.
	Level *NotificationLevel `json:"level,omitempty"`

	// Localized name of the rule (Good for UI).
	Message *string `json:"message,omitempty"`

	// Recommendation ID of an associated recommendation object tied to the rule, if exists. If such an object doesn't exist, it is set to null.
	RecommendationID *string `json:"recommendationId,omitempty"`

	// Unique name of the rule.
	RecommendationName *string `json:"recommendationName,omitempty"`

	// READ-ONLY; The list of category tags that this recommendation rule belongs to.
	CategoryTags []*string `json:"categoryTags,omitempty" azure:"ro"`
}

// MarshalJSON implements the json.Marshaller interface for type RecommendationRuleProperties.
func (r RecommendationRuleProperties) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "actionName", r.ActionName)
	populate(objectMap, "bladeName", r.BladeName)
	populate(objectMap, "categoryTags", r.CategoryTags)
	populate(objectMap, "channels", r.Channels)
	populate(objectMap, "description", r.Description)
	populate(objectMap, "displayName", r.DisplayName)
	populate(objectMap, "extensionName", r.ExtensionName)
	populate(objectMap, "forwardLink", r.ForwardLink)
	populate(objectMap, "isDynamic", r.IsDynamic)
	populate(objectMap, "level", r.Level)
	populate(objectMap, "message", r.Message)
	populate(objectMap, "recommendationId", r.RecommendationID)
	populate(objectMap, "recommendationName", r.RecommendationName)
	return json.Marshal(objectMap)
}

// RecommendationsDisableAllForHostingEnvironmentOptions contains the optional parameters for the Recommendations.DisableAllForHostingEnvironment method.
type RecommendationsDisableAllForHostingEnvironmentOptions struct {
	// placeholder for future optional parameters
}

// RecommendationsDisableAllForWebAppOptions contains the optional parameters for the Recommendations.DisableAllForWebApp method.
type RecommendationsDisableAllForWebAppOptions struct {
	// placeholder for future optional parameters
}

// RecommendationsDisableRecommendationForHostingEnvironmentOptions contains the optional parameters for the Recommendations.DisableRecommendationForHostingEnvironment
// method.
type RecommendationsDisableRecommendationForHostingEnvironmentOptions struct {
	// placeholder for future optional parameters
}

// RecommendationsDisableRecommendationForSiteOptions contains the optional parameters for the Recommendations.DisableRecommendationForSite method.
type RecommendationsDisableRecommendationForSiteOptions struct {
	// placeholder for future optional parameters
}

// RecommendationsDisableRecommendationForSubscriptionOptions contains the optional parameters for the Recommendations.DisableRecommendationForSubscription
// method.
type RecommendationsDisableRecommendationForSubscriptionOptions struct {
	// placeholder for future optional parameters
}

// RecommendationsGetRuleDetailsByHostingEnvironmentOptions contains the optional parameters for the Recommendations.GetRuleDetailsByHostingEnvironment
// method.
type RecommendationsGetRuleDetailsByHostingEnvironmentOptions struct {
	// The GUID of the recommendation object if you query an expired one. You don't need to specify it to query an active entry.
	RecommendationID *string
	// Specify <code>true</code> to update the last-seen timestamp of the recommendation object.
	UpdateSeen *bool
}

// RecommendationsGetRuleDetailsByWebAppOptions contains the optional parameters for the Recommendations.GetRuleDetailsByWebApp method.
type RecommendationsGetRuleDetailsByWebAppOptions struct {
	// The GUID of the recommendation object if you query an expired one. You don't need to specify it to query an active entry.
	RecommendationID *string
	// Specify <code>true</code> to update the last-seen timestamp of the recommendation object.
	UpdateSeen *bool
}

// RecommendationsListHistoryForHostingEnvironmentOptions contains the optional parameters for the Recommendations.ListHistoryForHostingEnvironment method.
type RecommendationsListHistoryForHostingEnvironmentOptions struct {
	// Specify <code>false</code> to return all recommendations. The default is <code>true</code>, which returns only expired recommendations.
	ExpiredOnly *bool
	// Filter is specified by using OData syntax. Example: $filter=channel eq 'Api' or channel eq 'Notification' and startTime eq 2014-01-01T00:00:00Z and endTime
	// eq 2014-12-31T23:59:59Z and timeGrain eq duration'[PT1H|PT1M|P1D]
	Filter *string
}

// RecommendationsListHistoryForWebAppOptions contains the optional parameters for the Recommendations.ListHistoryForWebApp method.
type RecommendationsListHistoryForWebAppOptions struct {
	// Specify <code>false</code> to return all recommendations. The default is <code>true</code>, which returns only expired recommendations.
	ExpiredOnly *bool
	// Filter is specified by using OData syntax. Example: $filter=channel eq 'Api' or channel eq 'Notification' and startTime eq 2014-01-01T00:00:00Z and endTime
	// eq 2014-12-31T23:59:59Z and timeGrain eq duration'[PT1H|PT1M|P1D]
	Filter *string
}

// RecommendationsListOptions contains the optional parameters for the Recommendations.List method.
type RecommendationsListOptions struct {
	// Specify <code>true</code> to return only the most critical recommendations. The default is <code>false</code>, which returns all recommendations.
	Featured *bool
	// Filter is specified by using OData syntax. Example: $filter=channel eq 'Api' or channel eq 'Notification' and startTime eq 2014-01-01T00:00:00Z and endTime
	// eq 2014-12-31T23:59:59Z and timeGrain eq duration'[PT1H|PT1M|P1D]
	Filter *string
}

// RecommendationsListRecommendedRulesForHostingEnvironmentOptions contains the optional parameters for the Recommendations.ListRecommendedRulesForHostingEnvironment
// method.
type RecommendationsListRecommendedRulesForHostingEnvironmentOptions struct {
	// Specify <code>true</code> to return only the most critical recommendations. The default is <code>false</code>, which returns all recommendations.
	Featured *bool
	// Return only channels specified in the filter. Filter is specified by using OData syntax. Example: $filter=channel eq 'Api' or channel eq 'Notification'
	Filter *string
}

// RecommendationsListRecommendedRulesForWebAppOptions contains the optional parameters for the Recommendations.ListRecommendedRulesForWebApp method.
type RecommendationsListRecommendedRulesForWebAppOptions struct {
	// Specify <code>true</code> to return only the most critical recommendations. The default is <code>false</code>, which returns all recommendations.
	Featured *bool
	// Return only channels specified in the filter. Filter is specified by using OData syntax. Example: $filter=channel eq 'Api' or channel eq 'Notification'
	Filter *string
}

// RecommendationsResetAllFiltersForHostingEnvironmentOptions contains the optional parameters for the Recommendations.ResetAllFiltersForHostingEnvironment
// method.
type RecommendationsResetAllFiltersForHostingEnvironmentOptions struct {
	// placeholder for future optional parameters
}

// RecommendationsResetAllFiltersForWebAppOptions contains the optional parameters for the Recommendations.ResetAllFiltersForWebApp method.
type RecommendationsResetAllFiltersForWebAppOptions struct {
	// placeholder for future optional parameters
}

// RecommendationsResetAllFiltersOptions contains the optional parameters for the Recommendations.ResetAllFilters method.
type RecommendationsResetAllFiltersOptions struct {
	// placeholder for future optional parameters
}

// ReissueCertificateOrderRequest - Class representing certificate reissue request.
type ReissueCertificateOrderRequest struct {
	ProxyOnlyResource
	// ReissueCertificateOrderRequest resource specific properties
	Properties *ReissueCertificateOrderRequestProperties `json:"properties,omitempty"`
}

// MarshalJSON implements the json.Marshaller interface for type ReissueCertificateOrderRequest.
func (r ReissueCertificateOrderRequest) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	r.ProxyOnlyResource.marshalInternal(objectMap)
	populate(objectMap, "properties", r.Properties)
	return json.Marshal(objectMap)
}

// ReissueCertificateOrderRequestProperties - ReissueCertificateOrderRequest resource specific properties
type ReissueCertificateOrderRequestProperties struct {
	// Csr to be used for re-key operation.
	Csr *string `json:"csr,omitempty"`

	// Delay in hours to revoke existing certificate after the new certificate is issued.
	DelayExistingRevokeInHours *int32 `json:"delayExistingRevokeInHours,omitempty"`

	// Should we change the ASC type (from managed private key to external private key and vice versa).
	IsPrivateKeyExternal *bool `json:"isPrivateKeyExternal,omitempty"`

	// Certificate Key Size.
	KeySize *int32 `json:"keySize,omitempty"`
}

// RelayServiceConnectionEntity - Hybrid Connection for an App Service app.
type RelayServiceConnectionEntity struct {
	ProxyOnlyResource
	// RelayServiceConnectionEntity resource specific properties
	Properties *RelayServiceConnectionEntityProperties `json:"properties,omitempty"`
}

// MarshalJSON implements the json.Marshaller interface for type RelayServiceConnectionEntity.
func (r RelayServiceConnectionEntity) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	r.ProxyOnlyResource.marshalInternal(objectMap)
	populate(objectMap, "properties", r.Properties)
	return json.Marshal(objectMap)
}

// RelayServiceConnectionEntityProperties - RelayServiceConnectionEntity resource specific properties
type RelayServiceConnectionEntityProperties struct {
	BiztalkURI               *string `json:"biztalkUri,omitempty"`
	EntityConnectionString   *string `json:"entityConnectionString,omitempty"`
	EntityName               *string `json:"entityName,omitempty"`
	Hostname                 *string `json:"hostname,omitempty"`
	Port                     *int32  `json:"port,omitempty"`
	ResourceConnectionString *string `json:"resourceConnectionString,omitempty"`
	ResourceType             *string `json:"resourceType,omitempty"`
}

// RemotePrivateEndpointConnection - A remote private endpoint connection
type RemotePrivateEndpointConnection struct {
	ProxyOnlyResource
	// RemotePrivateEndpointConnection resource specific properties
	Properties *RemotePrivateEndpointConnectionProperties `json:"properties,omitempty"`
}

// MarshalJSON implements the json.Marshaller interface for type RemotePrivateEndpointConnection.
func (r RemotePrivateEndpointConnection) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	r.ProxyOnlyResource.marshalInternal(objectMap)
	populate(objectMap, "properties", r.Properties)
	return json.Marshal(objectMap)
}

// RemotePrivateEndpointConnectionARMResource - Remote Private Endpoint Connection ARM resource.
type RemotePrivateEndpointConnectionARMResource struct {
	ProxyOnlyResource
	// RemotePrivateEndpointConnectionARMResource resource specific properties
	Properties *RemotePrivateEndpointConnectionARMResourceProperties `json:"properties,omitempty"`
}

// MarshalJSON implements the json.Marshaller interface for type RemotePrivateEndpointConnectionARMResource.
func (r RemotePrivateEndpointConnectionARMResource) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	r.ProxyOnlyResource.marshalInternal(objectMap)
	populate(objectMap, "properties", r.Properties)
	return json.Marshal(objectMap)
}

// RemotePrivateEndpointConnectionARMResourceProperties - RemotePrivateEndpointConnectionARMResource resource specific properties
type RemotePrivateEndpointConnectionARMResourceProperties struct {
	// Private IPAddresses mapped to the remote private endpoint
	IPAddresses []*string `json:"ipAddresses,omitempty"`

	// PrivateEndpoint of a remote private endpoint connection
	PrivateEndpoint *ArmIDWrapper `json:"privateEndpoint,omitempty"`

	// The state of a private link connection
	PrivateLinkServiceConnectionState *PrivateLinkConnectionState `json:"privateLinkServiceConnectionState,omitempty"`

	// READ-ONLY
	ProvisioningState *string `json:"provisioningState,omitempty" azure:"ro"`
}

// MarshalJSON implements the json.Marshaller interface for type RemotePrivateEndpointConnectionARMResourceProperties.
func (r RemotePrivateEndpointConnectionARMResourceProperties) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "ipAddresses", r.IPAddresses)
	populate(objectMap, "privateEndpoint", r.PrivateEndpoint)
	populate(objectMap, "privateLinkServiceConnectionState", r.PrivateLinkServiceConnectionState)
	populate(objectMap, "provisioningState", r.ProvisioningState)
	return json.Marshal(objectMap)
}

// RemotePrivateEndpointConnectionProperties - RemotePrivateEndpointConnection resource specific properties
type RemotePrivateEndpointConnectionProperties struct {
	// Private IPAddresses mapped to the remote private endpoint
	IPAddresses []*string `json:"ipAddresses,omitempty"`

	// PrivateEndpoint of a remote private endpoint connection
	PrivateEndpoint *ArmIDWrapper `json:"privateEndpoint,omitempty"`

	// The state of a private link connection
	PrivateLinkServiceConnectionState *PrivateLinkConnectionState `json:"privateLinkServiceConnectionState,omitempty"`

	// READ-ONLY
	ProvisioningState *string `json:"provisioningState,omitempty" azure:"ro"`
}

// MarshalJSON implements the json.Marshaller interface for type RemotePrivateEndpointConnectionProperties.
func (r RemotePrivateEndpointConnectionProperties) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "ipAddresses", r.IPAddresses)
	populate(objectMap, "privateEndpoint", r.PrivateEndpoint)
	populate(objectMap, "privateLinkServiceConnectionState", r.PrivateLinkServiceConnectionState)
	populate(objectMap, "provisioningState", r.ProvisioningState)
	return json.Marshal(objectMap)
}

// Rendering - Instructions for rendering the data
type Rendering struct {
	// Description of the data that will help it be interpreted
	Description *string `json:"description,omitempty"`

	// Title of data
	Title *string `json:"title,omitempty"`

	// Rendering Type
	Type *RenderingType `json:"type,omitempty"`
}

// RenewCertificateOrderRequest - Class representing certificate renew request.
type RenewCertificateOrderRequest struct {
	ProxyOnlyResource
	// RenewCertificateOrderRequest resource specific properties
	Properties *RenewCertificateOrderRequestProperties `json:"properties,omitempty"`
}

// MarshalJSON implements the json.Marshaller interface for type RenewCertificateOrderRequest.
func (r RenewCertificateOrderRequest) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	r.ProxyOnlyResource.marshalInternal(objectMap)
	populate(objectMap, "properties", r.Properties)
	return json.Marshal(objectMap)
}

// RenewCertificateOrderRequestProperties - RenewCertificateOrderRequest resource specific properties
type RenewCertificateOrderRequestProperties struct {
	// Csr to be used for re-key operation.
	Csr *string `json:"csr,omitempty"`

	// Should we change the ASC type (from managed private key to external private key and vice versa).
	IsPrivateKeyExternal *bool `json:"isPrivateKeyExternal,omitempty"`

	// Certificate Key Size.
	KeySize *int32 `json:"keySize,omitempty"`
}

// RequestsBasedTrigger - Trigger based on total requests.
type RequestsBasedTrigger struct {
	// Request Count.
	Count *int32 `json:"count,omitempty"`

	// Time interval.
	TimeInterval *string `json:"timeInterval,omitempty"`
}

// Resource - Azure resource. This resource is tracked in Azure Resource Manager
type Resource struct {
	// REQUIRED; Resource Location.
	Location *string `json:"location,omitempty"`

	// Kind of resource.
	Kind *string `json:"kind,omitempty"`

	// Resource tags.
	Tags map[string]*string `json:"tags,omitempty"`

	// READ-ONLY; Resource Id.
	ID *string `json:"id,omitempty" azure:"ro"`

	// READ-ONLY; Resource Name.
	Name *string `json:"name,omitempty" azure:"ro"`

	// READ-ONLY; Resource type.
	Type *string `json:"type,omitempty" azure:"ro"`
}

// MarshalJSON implements the json.Marshaller interface for type Resource.
func (r Resource) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	r.marshalInternal(objectMap)
	return json.Marshal(objectMap)
}

func (r Resource) marshalInternal(objectMap map[string]interface{}) {
	populate(objectMap, "id", r.ID)
	populate(objectMap, "kind", r.Kind)
	populate(objectMap, "location", r.Location)
	populate(objectMap, "name", r.Name)
	populate(objectMap, "tags", r.Tags)
	populate(objectMap, "type", r.Type)
}

// ResourceCollection - Collection of resources.
type ResourceCollection struct {
	// REQUIRED; Collection of resources.
	Value []*string `json:"value,omitempty"`

	// READ-ONLY; Link to next page of resources.
	NextLink *string `json:"nextLink,omitempty" azure:"ro"`
}

// MarshalJSON implements the json.Marshaller interface for type ResourceCollection.
func (r ResourceCollection) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "nextLink", r.NextLink)
	populate(objectMap, "value", r.Value)
	return json.Marshal(objectMap)
}

// ResourceHealthMetadata - Used for getting ResourceHealthCheck settings.
type ResourceHealthMetadata struct {
	ProxyOnlyResource
	// ResourceHealthMetadata resource specific properties
	Properties *ResourceHealthMetadataProperties `json:"properties,omitempty"`
}

// MarshalJSON implements the json.Marshaller interface for type ResourceHealthMetadata.
func (r ResourceHealthMetadata) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	r.ProxyOnlyResource.marshalInternal(objectMap)
	populate(objectMap, "properties", r.Properties)
	return json.Marshal(objectMap)
}

// ResourceHealthMetadataCollection - Collection of resource health metadata.
type ResourceHealthMetadataCollection struct {
	// REQUIRED; Collection of resources.
	Value []*ResourceHealthMetadata `json:"value,omitempty"`

	// READ-ONLY; Link to next page of resources.
	NextLink *string `json:"nextLink,omitempty" azure:"ro"`
}

// MarshalJSON implements the json.Marshaller interface for type ResourceHealthMetadataCollection.
func (r ResourceHealthMetadataCollection) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "nextLink", r.NextLink)
	populate(objectMap, "value", r.Value)
	return json.Marshal(objectMap)
}

// ResourceHealthMetadataGetBySiteOptions contains the optional parameters for the ResourceHealthMetadata.GetBySite method.
type ResourceHealthMetadataGetBySiteOptions struct {
	// placeholder for future optional parameters
}

// ResourceHealthMetadataGetBySiteSlotOptions contains the optional parameters for the ResourceHealthMetadata.GetBySiteSlot method.
type ResourceHealthMetadataGetBySiteSlotOptions struct {
	// placeholder for future optional parameters
}

// ResourceHealthMetadataListByResourceGroupOptions contains the optional parameters for the ResourceHealthMetadata.ListByResourceGroup method.
type ResourceHealthMetadataListByResourceGroupOptions struct {
	// placeholder for future optional parameters
}

// ResourceHealthMetadataListBySiteOptions contains the optional parameters for the ResourceHealthMetadata.ListBySite method.
type ResourceHealthMetadataListBySiteOptions struct {
	// placeholder for future optional parameters
}

// ResourceHealthMetadataListBySiteSlotOptions contains the optional parameters for the ResourceHealthMetadata.ListBySiteSlot method.
type ResourceHealthMetadataListBySiteSlotOptions struct {
	// placeholder for future optional parameters
}

// ResourceHealthMetadataListOptions contains the optional parameters for the ResourceHealthMetadata.List method.
type ResourceHealthMetadataListOptions struct {
	// placeholder for future optional parameters
}

// ResourceHealthMetadataProperties - ResourceHealthMetadata resource specific properties
type ResourceHealthMetadataProperties struct {
	// The category that the resource matches in the RHC Policy File
	Category *string `json:"category,omitempty"`

	// Is there a health signal for the resource
	SignalAvailability *bool `json:"signalAvailability,omitempty"`
}

// ResourceMetricAvailability - Metrics availability and retention.
type ResourceMetricAvailability struct {
	// READ-ONLY; Retention period for the current time grain.
	Retention *string `json:"retention,omitempty" azure:"ro"`

	// READ-ONLY; Time grain .
	TimeGrain *string `json:"timeGrain,omitempty" azure:"ro"`
}

// ResourceMetricDefinition - Metadata for the metrics.
type ResourceMetricDefinition struct {
	ProxyOnlyResource
	// ResourceMetricDefinition resource specific properties
	Properties *ResourceMetricDefinitionProperties `json:"properties,omitempty"`
}

// MarshalJSON implements the json.Marshaller interface for type ResourceMetricDefinition.
func (r ResourceMetricDefinition) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	r.ProxyOnlyResource.marshalInternal(objectMap)
	populate(objectMap, "properties", r.Properties)
	return json.Marshal(objectMap)
}

// ResourceMetricDefinitionCollection - Collection of metric definitions.
type ResourceMetricDefinitionCollection struct {
	// REQUIRED; Collection of resources.
	Value []*ResourceMetricDefinition `json:"value,omitempty"`

	// READ-ONLY; Link to next page of resources.
	NextLink *string `json:"nextLink,omitempty" azure:"ro"`
}

// MarshalJSON implements the json.Marshaller interface for type ResourceMetricDefinitionCollection.
func (r ResourceMetricDefinitionCollection) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "nextLink", r.NextLink)
	populate(objectMap, "value", r.Value)
	return json.Marshal(objectMap)
}

// ResourceMetricDefinitionProperties - ResourceMetricDefinition resource specific properties
type ResourceMetricDefinitionProperties struct {
	// READ-ONLY; List of time grains supported for the metric together with retention period.
	MetricAvailabilities []*ResourceMetricAvailability `json:"metricAvailabilities,omitempty" azure:"ro"`

	// READ-ONLY; Primary aggregation type.
	PrimaryAggregationType *string `json:"primaryAggregationType,omitempty" azure:"ro"`

	// READ-ONLY; Resource metric definition properties.
	Properties map[string]*string `json:"properties,omitempty" azure:"ro"`

	// READ-ONLY; Resource URI.
	ResourceURI *string `json:"resourceUri,omitempty" azure:"ro"`

	// READ-ONLY; Unit of the metric.
	Unit *string `json:"unit,omitempty" azure:"ro"`
}

// MarshalJSON implements the json.Marshaller interface for type ResourceMetricDefinitionProperties.
func (r ResourceMetricDefinitionProperties) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "metricAvailabilities", r.MetricAvailabilities)
	populate(objectMap, "primaryAggregationType", r.PrimaryAggregationType)
	populate(objectMap, "properties", r.Properties)
	populate(objectMap, "resourceUri", r.ResourceURI)
	populate(objectMap, "unit", r.Unit)
	return json.Marshal(objectMap)
}

// ResourceNameAvailability - Information regarding availability of a resource name.
type ResourceNameAvailability struct {
	// If reason == invalid, provide the user with the reason why the given name is invalid, and provide the resource naming requirements so that the user can
	// select a valid name. If reason == AlreadyExists,
	// explain that resource name is already in use, and direct them to select a different name.
	Message *string `json:"message,omitempty"`

	// true indicates name is valid and available. false indicates the name is invalid, unavailable, or both.
	NameAvailable *bool `json:"nameAvailable,omitempty"`

	// Invalid indicates the name provided does not match Azure App Service naming requirements. AlreadyExists indicates that the name is already in use and
	// is therefore unavailable.
	Reason *InAvailabilityReasonType `json:"reason,omitempty"`
}

// ResourceNameAvailabilityRequest - Resource name availability request content.
type ResourceNameAvailabilityRequest struct {
	// REQUIRED; Resource name to verify.
	Name *string `json:"name,omitempty"`

	// REQUIRED; Resource type used for verification.
	Type *CheckNameResourceTypes `json:"type,omitempty"`

	// Is fully qualified domain name.
	IsFqdn *bool `json:"isFqdn,omitempty"`
}

// ResponseMessageEnvelopeRemotePrivateEndpointConnection - Message envelope that contains the common Azure resource manager properties and the resource
// provider specific content.
type ResponseMessageEnvelopeRemotePrivateEndpointConnection struct {
	// Azure-AsyncOperation Error info.
	Error *ErrorEntity `json:"error,omitempty"`

	// Resource Id. Typically ID is populated only for responses to GET requests. Caller is responsible for passing in this value for GET requests only. For
	// example:
	// /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupId}/providers/Microsoft.Web/sites/{sitename}
	ID *string `json:"id,omitempty"`

	// MSI resource
	Identity *ManagedServiceIdentity `json:"identity,omitempty"`

	// Geographical region resource belongs to e.g. SouthCentralUS, SouthEastAsia.
	Location *string `json:"location,omitempty"`

	// Name of resource.
	Name *string `json:"name,omitempty"`

	// Azure resource manager plan.
	Plan *ArmPlan `json:"plan,omitempty"`

	// Resource specific properties.
	Properties *RemotePrivateEndpointConnection `json:"properties,omitempty"`

	// SKU description of the resource.
	SKU *SKUDescription `json:"sku,omitempty"`

	// Azure-AsyncOperation Status info.
	Status *string `json:"status,omitempty"`

	// Tags associated with resource.
	Tags map[string]*string `json:"tags,omitempty"`

	// Type of resource e.g "Microsoft.Web/sites".
	Type *string `json:"type,omitempty"`

	// Logical Availability Zones the service is hosted in
	Zones []*string `json:"zones,omitempty"`
}

// MarshalJSON implements the json.Marshaller interface for type ResponseMessageEnvelopeRemotePrivateEndpointConnection.
func (r ResponseMessageEnvelopeRemotePrivateEndpointConnection) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "error", r.Error)
	populate(objectMap, "id", r.ID)
	populate(objectMap, "identity", r.Identity)
	populate(objectMap, "location", r.Location)
	populate(objectMap, "name", r.Name)
	populate(objectMap, "plan", r.Plan)
	populate(objectMap, "properties", r.Properties)
	populate(objectMap, "sku", r.SKU)
	populate(objectMap, "status", r.Status)
	populate(objectMap, "tags", r.Tags)
	populate(objectMap, "type", r.Type)
	populate(objectMap, "zones", r.Zones)
	return json.Marshal(objectMap)
}

type ResponseMetaData struct {
	// Source of the Data
	DataSource *DataSource `json:"dataSource,omitempty"`
}

// RestoreRequest - Description of a restore request.
type RestoreRequest struct {
	ProxyOnlyResource
	// RestoreRequest resource specific properties
	Properties *RestoreRequestProperties `json:"properties,omitempty"`
}

// MarshalJSON implements the json.Marshaller interface for type RestoreRequest.
func (r RestoreRequest) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	r.ProxyOnlyResource.marshalInternal(objectMap)
	populate(objectMap, "properties", r.Properties)
	return json.Marshal(objectMap)
}

// RestoreRequestProperties - RestoreRequest resource specific properties
type RestoreRequestProperties struct {
	// REQUIRED; true if the restore operation can overwrite target app; otherwise, false. true is needed if trying to restore over an existing app.
	Overwrite *bool `json:"overwrite,omitempty"`

	// REQUIRED; SAS URL to the container.
	StorageAccountURL *string `json:"storageAccountUrl,omitempty"`

	// true if SiteConfig.ConnectionStrings should be set in new app; otherwise, false.
	AdjustConnectionStrings *bool `json:"adjustConnectionStrings,omitempty"`

	// Specify app service plan that will own restored site.
	AppServicePlan *string `json:"appServicePlan,omitempty"`

	// Name of a blob which contains the backup.
	BlobName *string `json:"blobName,omitempty"`

	// Collection of databases which should be restored. This list has to match the list of databases included in the backup.
	Databases []*DatabaseBackupSetting `json:"databases,omitempty"`

	// App Service Environment name, if needed (only when restoring an app to an App Service Environment).
	HostingEnvironment *string `json:"hostingEnvironment,omitempty"`

	// Changes a logic when restoring an app with custom domains. true to remove custom domains automatically. If false, custom domains are added to the app's
	// object when it is being restored, but that might
	// fail due to conflicts during the operation.
	IgnoreConflictingHostNames *bool `json:"ignoreConflictingHostNames,omitempty"`

	// Ignore the databases and only restore the site content
	IgnoreDatabases *bool `json:"ignoreDatabases,omitempty"`

	// Operation type.
	OperationType *BackupRestoreOperationType `json:"operationType,omitempty"`

	// Name of an app.
	SiteName *string `json:"siteName,omitempty"`
}

// MarshalJSON implements the json.Marshaller interface for type RestoreRequestProperties.
func (r RestoreRequestProperties) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "adjustConnectionStrings", r.AdjustConnectionStrings)
	populate(objectMap, "appServicePlan", r.AppServicePlan)
	populate(objectMap, "blobName", r.BlobName)
	populate(objectMap, "databases", r.Databases)
	populate(objectMap, "hostingEnvironment", r.HostingEnvironment)
	populate(objectMap, "ignoreConflictingHostNames", r.IgnoreConflictingHostNames)
	populate(objectMap, "ignoreDatabases", r.IgnoreDatabases)
	populate(objectMap, "operationType", r.OperationType)
	populate(objectMap, "overwrite", r.Overwrite)
	populate(objectMap, "siteName", r.SiteName)
	populate(objectMap, "storageAccountUrl", r.StorageAccountURL)
	return json.Marshal(objectMap)
}

// SKUCapacity - Description of the App Service plan scale options.
type SKUCapacity struct {
	// Default number of workers for this App Service plan SKU.
	Default *int32 `json:"default,omitempty"`

	// Maximum number of Elastic workers for this App Service plan SKU.
	ElasticMaximum *int32 `json:"elasticMaximum,omitempty"`

	// Maximum number of workers for this App Service plan SKU.
	Maximum *int32 `json:"maximum,omitempty"`

	// Minimum number of workers for this App Service plan SKU.
	Minimum *int32 `json:"minimum,omitempty"`

	// Available scale configurations for an App Service plan.
	ScaleType *string `json:"scaleType,omitempty"`
}

// SKUDescription - Description of a SKU for a scalable resource.
type SKUDescription struct {
	// Capabilities of the SKU, e.g., is traffic manager enabled?
	Capabilities []*Capability `json:"capabilities,omitempty"`

	// Current number of instances assigned to the resource.
	Capacity *int32 `json:"capacity,omitempty"`

	// Family code of the resource SKU.
	Family *string `json:"family,omitempty"`

	// Locations of the SKU.
	Locations []*string `json:"locations,omitempty"`

	// Name of the resource SKU.
	Name *string `json:"name,omitempty"`

	// Min, max, and default scale values of the SKU.
	SKUCapacity *SKUCapacity `json:"skuCapacity,omitempty"`

	// Size specifier of the resource SKU.
	Size *string `json:"size,omitempty"`

	// Service tier of the resource SKU.
	Tier *string `json:"tier,omitempty"`
}

// MarshalJSON implements the json.Marshaller interface for type SKUDescription.
func (s SKUDescription) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "capabilities", s.Capabilities)
	populate(objectMap, "capacity", s.Capacity)
	populate(objectMap, "family", s.Family)
	populate(objectMap, "locations", s.Locations)
	populate(objectMap, "name", s.Name)
	populate(objectMap, "skuCapacity", s.SKUCapacity)
	populate(objectMap, "size", s.Size)
	populate(objectMap, "tier", s.Tier)
	return json.Marshal(objectMap)
}

// SKUInfo - SKU discovery information.
type SKUInfo struct {
	// Min, max, and default scale values of the SKU.
	Capacity *SKUCapacity `json:"capacity,omitempty"`

	// Resource type that this SKU applies to.
	ResourceType *string `json:"resourceType,omitempty"`

	// Name and tier of the SKU.
	SKU *SKUDescription `json:"sku,omitempty"`
}

// SKUInfoCollection - Collection of SKU information.
type SKUInfoCollection struct {
	// REQUIRED; Collection of resources.
	Value []*SKUInfo `json:"value,omitempty"`

	// READ-ONLY; Link to next page of resources.
	NextLink *string `json:"nextLink,omitempty" azure:"ro"`
}

// MarshalJSON implements the json.Marshaller interface for type SKUInfoCollection.
func (s SKUInfoCollection) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "nextLink", s.NextLink)
	populate(objectMap, "value", s.Value)
	return json.Marshal(objectMap)
}

// SKUInfos - Collection of SKU information.
type SKUInfos struct {
	// Resource type that this SKU applies to.
	ResourceType *string `json:"resourceType,omitempty"`

	// List of SKUs the subscription is able to use.
	SKUs []*GlobalCsmSKUDescription `json:"skus,omitempty"`
}

// MarshalJSON implements the json.Marshaller interface for type SKUInfos.
func (s SKUInfos) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "resourceType", s.ResourceType)
	populate(objectMap, "skus", s.SKUs)
	return json.Marshal(objectMap)
}

// SampleUtterance - Sample utterance.
type SampleUtterance struct {
	// Links attribute of sample utterance.
	Links []*string `json:"links,omitempty"`

	// Question id of sample utterance (for stackoverflow questions titles).
	Qid *string `json:"qid,omitempty"`

	// Text attribute of sample utterance.
	Text *string `json:"text,omitempty"`
}

// MarshalJSON implements the json.Marshaller interface for type SampleUtterance.
func (s SampleUtterance) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "links", s.Links)
	populate(objectMap, "qid", s.Qid)
	populate(objectMap, "text", s.Text)
	return json.Marshal(objectMap)
}

// ServiceSpecification - Resource metrics service provided by Microsoft.Insights resource provider.
type ServiceSpecification struct {
	LogSpecifications    []*LogSpecification    `json:"logSpecifications,omitempty"`
	MetricSpecifications []*MetricSpecification `json:"metricSpecifications,omitempty"`
}

// MarshalJSON implements the json.Marshaller interface for type ServiceSpecification.
func (s ServiceSpecification) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "logSpecifications", s.LogSpecifications)
	populate(objectMap, "metricSpecifications", s.MetricSpecifications)
	return json.Marshal(objectMap)
}

// Site - A web app, a mobile app backend, or an API app.
type Site struct {
	Resource
	// Extended Location.
	ExtendedLocation *ExtendedLocation `json:"extendedLocation,omitempty"`

	// Managed service identity.
	Identity *ManagedServiceIdentity `json:"identity,omitempty"`

	// Site resource specific properties
	Properties *SiteProperties `json:"properties,omitempty"`
}

// MarshalJSON implements the json.Marshaller interface for type Site.
func (s Site) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	s.Resource.marshalInternal(objectMap)
	populate(objectMap, "extendedLocation", s.ExtendedLocation)
	populate(objectMap, "identity", s.Identity)
	populate(objectMap, "properties", s.Properties)
	return json.Marshal(objectMap)
}

// SiteAuthSettings - Configuration settings for the Azure App Service Authentication / Authorization feature.
type SiteAuthSettings struct {
	ProxyOnlyResource
	// SiteAuthSettings resource specific properties
	Properties *SiteAuthSettingsProperties `json:"properties,omitempty"`
}

// MarshalJSON implements the json.Marshaller interface for type SiteAuthSettings.
func (s SiteAuthSettings) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	s.ProxyOnlyResource.marshalInternal(objectMap)
	populate(objectMap, "properties", s.Properties)
	return json.Marshal(objectMap)
}

// SiteAuthSettingsProperties - SiteAuthSettings resource specific properties
type SiteAuthSettingsProperties struct {
	// Gets a JSON string containing the Azure AD Acl settings.
	AADClaimsAuthorization *string `json:"aadClaimsAuthorization,omitempty"`

	// Login parameters to send to the OpenID Connect authorization endpoint when a user logs in. Each parameter must be in the form "key=value".
	AdditionalLoginParams []*string `json:"additionalLoginParams,omitempty"`

	// Allowed audience values to consider when validating JWTs issued by Azure Active Directory. Note that the ClientID value is always considered an allowed
	// audience, regardless of this setting.
	AllowedAudiences []*string `json:"allowedAudiences,omitempty"`

	// External URLs that can be redirected to as part of logging in or logging out of the app. Note that the query string part of the URL is ignored. This
	// is an advanced setting typically only needed by
	// Windows Store application backends. Note that URLs within the current domain are always implicitly allowed.
	AllowedExternalRedirectUrls []*string `json:"allowedExternalRedirectUrls,omitempty"`

	// The path of the config file containing auth settings. If the path is relative, base will the site's root directory.
	AuthFilePath *string `json:"authFilePath,omitempty"`

	// The Client ID of this relying party application, known as the clientid. This setting is required for enabling OpenID Connection authentication with Azure
	// Active Directory or other 3rd party OpenID
	// Connect providers. More information on OpenID Connect: http://openid.net/specs/openid-connect-core-10.html
	ClientID *string `json:"clientId,omitempty"`

	// The Client Secret of this relying party application (in Azure Active Directory, this is also referred to as the Key). This setting is optional. If no
	// client secret is configured, the OpenID Connect
	// implicit auth flow is used to authenticate end users. Otherwise, the OpenID Connect Authorization Code Flow is used to authenticate end users. More information
	// on OpenID Connect:
	// http://openid.net/specs/openid-connect-core-1_0.html
	ClientSecret *string `json:"clientSecret,omitempty"`

	// An alternative to the client secret, that is the thumbprint of a certificate used for signing purposes. This property acts as a replacement for the Client
	// Secret. It is also optional.
	ClientSecretCertificateThumbprint *string `json:"clientSecretCertificateThumbprint,omitempty"`

	// The app setting name that contains the client secret of the relying party application.
	ClientSecretSettingName *string `json:"clientSecretSettingName,omitempty"`

	// The ConfigVersion of the Authentication / Authorization feature in use for the current app. The setting in this value can control the behavior of the
	// control plane for Authentication / Authorization.
	ConfigVersion *string `json:"configVersion,omitempty"`

	// The default authentication provider to use when multiple providers are configured. This setting is only needed if multiple providers are configured and
	// the unauthenticated client action is set to
	// "RedirectToLoginPage".
	DefaultProvider *BuiltInAuthenticationProvider `json:"defaultProvider,omitempty"`

	// true if the Authentication / Authorization feature is enabled for the current app; otherwise, false.
	Enabled *bool `json:"enabled,omitempty"`

	// The App ID of the Facebook app used for login. This setting is required for enabling Facebook Login. Facebook Login documentation: https://developers.facebook.com/docs/facebook-login
	FacebookAppID *string `json:"facebookAppId,omitempty"`

	// The App Secret of the Facebook app used for Facebook Login. This setting is required for enabling Facebook Login. Facebook Login documentation: https://developers.facebook.com/docs/facebook-login
	FacebookAppSecret *string `json:"facebookAppSecret,omitempty"`

	// The app setting name that contains the app secret used for Facebook Login.
	FacebookAppSecretSettingName *string `json:"facebookAppSecretSettingName,omitempty"`

	// The OAuth 2.0 scopes that will be requested as part of Facebook Login authentication. This setting is optional. Facebook Login documentation: https://developers.facebook.com/docs/facebook-login
	FacebookOAuthScopes []*string `json:"facebookOAuthScopes,omitempty"`

	// The Client Id of the GitHub app used for login. This setting is required for enabling Github login
	GitHubClientID *string `json:"gitHubClientId,omitempty"`

	// The Client Secret of the GitHub app used for Github Login. This setting is required for enabling Github login.
	GitHubClientSecret *string `json:"gitHubClientSecret,omitempty"`

	// The app setting name that contains the client secret of the Github app used for GitHub Login.
	GitHubClientSecretSettingName *string `json:"gitHubClientSecretSettingName,omitempty"`

	// The OAuth 2.0 scopes that will be requested as part of GitHub Login authentication. This setting is optional
	GitHubOAuthScopes []*string `json:"gitHubOAuthScopes,omitempty"`

	// The OpenID Connect Client ID for the Google web application. This setting is required for enabling Google Sign-In. Google Sign-In documentation: https://developers.google.com/identity/sign-in/web/
	GoogleClientID *string `json:"googleClientId,omitempty"`

	// The client secret associated with the Google web application. This setting is required for enabling Google Sign-In. Google Sign-In documentation: https://developers.google.com/identity/sign-in/web/
	GoogleClientSecret *string `json:"googleClientSecret,omitempty"`

	// The app setting name that contains the client secret associated with the Google web application.
	GoogleClientSecretSettingName *string `json:"googleClientSecretSettingName,omitempty"`

	// The OAuth 2.0 scopes that will be requested as part of Google Sign-In authentication. This setting is optional. If not specified, "openid", "profile",
	// and "email" are used as default scopes. Google
	// Sign-In documentation: https://developers.google.com/identity/sign-in/web/
	GoogleOAuthScopes []*string `json:"googleOAuthScopes,omitempty"`

	// "true" if the auth config settings should be read from a file, "false" otherwise
	IsAuthFromFile *string `json:"isAuthFromFile,omitempty"`

	// The OpenID Connect Issuer URI that represents the entity which issues access tokens for this application. When using Azure Active Directory, this value
	// is the URI of the directory tenant, e.g.
	// https://sts.windows.net/{tenant-guid}/. This URI is a case-sensitive identifier for the token issuer. More information on OpenID Connect Discovery:
	// http://openid.net/specs/openid-connect-discovery-1_0.html
	Issuer *string `json:"issuer,omitempty"`

	// The OAuth 2.0 client ID that was created for the app used for authentication. This setting is required for enabling Microsoft Account authentication.
	// Microsoft Account OAuth documentation:
	// https://dev.onedrive.com/auth/msa_oauth.htm
	MicrosoftAccountClientID *string `json:"microsoftAccountClientId,omitempty"`

	// The OAuth 2.0 client secret that was created for the app used for authentication. This setting is required for enabling Microsoft Account authentication.
	// Microsoft Account OAuth documentation:
	// https://dev.onedrive.com/auth/msa_oauth.htm
	MicrosoftAccountClientSecret *string `json:"microsoftAccountClientSecret,omitempty"`

	// The app setting name containing the OAuth 2.0 client secret that was created for the app used for authentication.
	MicrosoftAccountClientSecretSettingName *string `json:"microsoftAccountClientSecretSettingName,omitempty"`

	// The OAuth 2.0 scopes that will be requested as part of Microsoft Account authentication. This setting is optional. If not specified, "wl.basic" is used
	// as the default scope. Microsoft Account Scopes
	// and permissions documentation: https://msdn.microsoft.com/en-us/library/dn631845.aspx
	MicrosoftAccountOAuthScopes []*string `json:"microsoftAccountOAuthScopes,omitempty"`

	// The RuntimeVersion of the Authentication / Authorization feature in use for the current app. The setting in this value can control the behavior of certain
	// features in the Authentication /
	// Authorization module.
	RuntimeVersion *string `json:"runtimeVersion,omitempty"`

	// The number of hours after session token expiration that a session token can be used to call the token refresh API. The default is 72 hours.
	TokenRefreshExtensionHours *float64 `json:"tokenRefreshExtensionHours,omitempty"`

	// true to durably store platform-specific security tokens that are obtained during login flows; otherwise, false. The default is false.
	TokenStoreEnabled *bool `json:"tokenStoreEnabled,omitempty"`

	// The OAuth 1.0a consumer key of the Twitter application used for sign-in. This setting is required for enabling Twitter Sign-In. Twitter Sign-In documentation:
	// https://dev.twitter.com/web/sign-in
	TwitterConsumerKey *string `json:"twitterConsumerKey,omitempty"`

	// The OAuth 1.0a consumer secret of the Twitter application used for sign-in. This setting is required for enabling Twitter Sign-In. Twitter Sign-In documentation:
	// https://dev.twitter.com/web/sign-in
	TwitterConsumerSecret *string `json:"twitterConsumerSecret,omitempty"`

	// The app setting name that contains the OAuth 1.0a consumer secret of the Twitter application used for sign-in.
	TwitterConsumerSecretSettingName *string `json:"twitterConsumerSecretSettingName,omitempty"`

	// The action to take when an unauthenticated client attempts to access the app.
	UnauthenticatedClientAction *UnauthenticatedClientAction `json:"unauthenticatedClientAction,omitempty"`

	// Gets a value indicating whether the issuer should be a valid HTTPS url and be validated as such.
	ValidateIssuer *bool `json:"validateIssuer,omitempty"`
}

// MarshalJSON implements the json.Marshaller interface for type SiteAuthSettingsProperties.
func (s SiteAuthSettingsProperties) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "aadClaimsAuthorization", s.AADClaimsAuthorization)
	populate(objectMap, "additionalLoginParams", s.AdditionalLoginParams)
	populate(objectMap, "allowedAudiences", s.AllowedAudiences)
	populate(objectMap, "allowedExternalRedirectUrls", s.AllowedExternalRedirectUrls)
	populate(objectMap, "authFilePath", s.AuthFilePath)
	populate(objectMap, "clientId", s.ClientID)
	populate(objectMap, "clientSecret", s.ClientSecret)
	populate(objectMap, "clientSecretCertificateThumbprint", s.ClientSecretCertificateThumbprint)
	populate(objectMap, "clientSecretSettingName", s.ClientSecretSettingName)
	populate(objectMap, "configVersion", s.ConfigVersion)
	populate(objectMap, "defaultProvider", s.DefaultProvider)
	populate(objectMap, "enabled", s.Enabled)
	populate(objectMap, "facebookAppId", s.FacebookAppID)
	populate(objectMap, "facebookAppSecret", s.FacebookAppSecret)
	populate(objectMap, "facebookAppSecretSettingName", s.FacebookAppSecretSettingName)
	populate(objectMap, "facebookOAuthScopes", s.FacebookOAuthScopes)
	populate(objectMap, "gitHubClientId", s.GitHubClientID)
	populate(objectMap, "gitHubClientSecret", s.GitHubClientSecret)
	populate(objectMap, "gitHubClientSecretSettingName", s.GitHubClientSecretSettingName)
	populate(objectMap, "gitHubOAuthScopes", s.GitHubOAuthScopes)
	populate(objectMap, "googleClientId", s.GoogleClientID)
	populate(objectMap, "googleClientSecret", s.GoogleClientSecret)
	populate(objectMap, "googleClientSecretSettingName", s.GoogleClientSecretSettingName)
	populate(objectMap, "googleOAuthScopes", s.GoogleOAuthScopes)
	populate(objectMap, "isAuthFromFile", s.IsAuthFromFile)
	populate(objectMap, "issuer", s.Issuer)
	populate(objectMap, "microsoftAccountClientId", s.MicrosoftAccountClientID)
	populate(objectMap, "microsoftAccountClientSecret", s.MicrosoftAccountClientSecret)
	populate(objectMap, "microsoftAccountClientSecretSettingName", s.MicrosoftAccountClientSecretSettingName)
	populate(objectMap, "microsoftAccountOAuthScopes", s.MicrosoftAccountOAuthScopes)
	populate(objectMap, "runtimeVersion", s.RuntimeVersion)
	populate(objectMap, "tokenRefreshExtensionHours", s.TokenRefreshExtensionHours)
	populate(objectMap, "tokenStoreEnabled", s.TokenStoreEnabled)
	populate(objectMap, "twitterConsumerKey", s.TwitterConsumerKey)
	populate(objectMap, "twitterConsumerSecret", s.TwitterConsumerSecret)
	populate(objectMap, "twitterConsumerSecretSettingName", s.TwitterConsumerSecretSettingName)
	populate(objectMap, "unauthenticatedClientAction", s.UnauthenticatedClientAction)
	populate(objectMap, "validateIssuer", s.ValidateIssuer)
	return json.Marshal(objectMap)
}

// SiteAuthSettingsV2 - Configuration settings for the Azure App Service Authentication / Authorization V2 feature.
type SiteAuthSettingsV2 struct {
	ProxyOnlyResource
	// SiteAuthSettingsV2 resource specific properties
	Properties *SiteAuthSettingsV2Properties `json:"properties,omitempty"`
}

// MarshalJSON implements the json.Marshaller interface for type SiteAuthSettingsV2.
func (s SiteAuthSettingsV2) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	s.ProxyOnlyResource.marshalInternal(objectMap)
	populate(objectMap, "properties", s.Properties)
	return json.Marshal(objectMap)
}

// SiteAuthSettingsV2Properties - SiteAuthSettingsV2 resource specific properties
type SiteAuthSettingsV2Properties struct {
	// The configuration settings that determines the validation flow of users using App Service Authentication/Authorization.
	GlobalValidation *GlobalValidation `json:"globalValidation,omitempty"`

	// The configuration settings of the HTTP requests for authentication and authorization requests made against App Service Authentication/Authorization.
	HTTPSettings *HTTPSettings `json:"httpSettings,omitempty"`

	// The configuration settings of each of the identity providers used to configure App Service Authentication/Authorization.
	IdentityProviders *IdentityProviders `json:"identityProviders,omitempty"`

	// The configuration settings of the login flow of users using App Service Authentication/Authorization.
	Login *Login `json:"login,omitempty"`

	// The configuration settings of the platform of App Service Authentication/Authorization.
	Platform *AuthPlatform `json:"platform,omitempty"`
}

// SiteCloneability - Represents whether or not an app is cloneable.
type SiteCloneability struct {
	// List of blocking application characteristics.
	BlockingCharacteristics []*SiteCloneabilityCriterion `json:"blockingCharacteristics,omitempty"`

	// List of features enabled on app that prevent cloning.
	BlockingFeatures []*SiteCloneabilityCriterion `json:"blockingFeatures,omitempty"`

	// Name of app.
	Result *CloneAbilityResult `json:"result,omitempty"`

	// List of features enabled on app that are non-blocking but cannot be cloned. The app can still be cloned but the features in this list will not be set
	// up on cloned app.
	UnsupportedFeatures []*SiteCloneabilityCriterion `json:"unsupportedFeatures,omitempty"`
}

// MarshalJSON implements the json.Marshaller interface for type SiteCloneability.
func (s SiteCloneability) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "blockingCharacteristics", s.BlockingCharacteristics)
	populate(objectMap, "blockingFeatures", s.BlockingFeatures)
	populate(objectMap, "result", s.Result)
	populate(objectMap, "unsupportedFeatures", s.UnsupportedFeatures)
	return json.Marshal(objectMap)
}

// SiteCloneabilityCriterion - An app cloneability criterion.
type SiteCloneabilityCriterion struct {
	// Description of criterion.
	Description *string `json:"description,omitempty"`

	// Name of criterion.
	Name *string `json:"name,omitempty"`
}

// SiteConfig - Configuration of an App Service app.
type SiteConfig struct {
	// Information about the formal API definition for the app.
	APIDefinition *APIDefinitionInfo `json:"apiDefinition,omitempty"`

	// Azure API management settings linked to the app.
	APIManagementConfig *APIManagementConfig `json:"apiManagementConfig,omitempty"`

	// Flag to use Managed Identity Creds for ACR pull
	AcrUseManagedIdentityCreds *bool `json:"acrUseManagedIdentityCreds,omitempty"`

	// If using user managed identity, the user managed identity ClientId
	AcrUserManagedIdentityID *string `json:"acrUserManagedIdentityID,omitempty"`

	// true if Always On is enabled; otherwise, false.
	AlwaysOn *bool `json:"alwaysOn,omitempty"`

	// App command line to launch.
	AppCommandLine *string `json:"appCommandLine,omitempty"`

	// Application settings.
	AppSettings []*NameValuePair `json:"appSettings,omitempty"`

	// true if Auto Heal is enabled; otherwise, false.
	AutoHealEnabled *bool `json:"autoHealEnabled,omitempty"`

	// Auto Heal rules.
	AutoHealRules *AutoHealRules `json:"autoHealRules,omitempty"`

	// Auto-swap slot name.
	AutoSwapSlotName *string `json:"autoSwapSlotName,omitempty"`

	// List of Azure Storage Accounts.
	AzureStorageAccounts map[string]*AzureStorageInfoValue `json:"azureStorageAccounts,omitempty"`

	// Connection strings.
	ConnectionStrings []*ConnStringInfo `json:"connectionStrings,omitempty"`

	// Cross-Origin Resource Sharing (CORS) settings.
	Cors *CorsSettings `json:"cors,omitempty"`

	// Default documents.
	DefaultDocuments []*string `json:"defaultDocuments,omitempty"`

	// true if detailed error logging is enabled; otherwise, false.
	DetailedErrorLoggingEnabled *bool `json:"detailedErrorLoggingEnabled,omitempty"`

	// Document root.
	DocumentRoot *string `json:"documentRoot,omitempty"`

	// This is work around for polymorphic types.
	Experiments *Experiments `json:"experiments,omitempty"`

	// State of FTP / FTPS service
	FtpsState *FtpsState `json:"ftpsState,omitempty"`

	// Maximum number of workers that a site can scale out to. This setting only applies to the Consumption and Elastic Premium Plans
	FunctionAppScaleLimit *int32 `json:"functionAppScaleLimit,omitempty"`

	// Gets or sets a value indicating whether functions runtime scale monitoring is enabled. When enabled, the ScaleController will not monitor event sources
	// directly, but will instead call to the runtime
	// to get scale status.
	FunctionsRuntimeScaleMonitoringEnabled *bool `json:"functionsRuntimeScaleMonitoringEnabled,omitempty"`

	// true if HTTP logging is enabled; otherwise, false.
	HTTPLoggingEnabled *bool `json:"httpLoggingEnabled,omitempty"`

	// Handler mappings.
	HandlerMappings []*HandlerMapping `json:"handlerMappings,omitempty"`

	// Health check path
	HealthCheckPath *string `json:"healthCheckPath,omitempty"`

	// Http20Enabled: configures a web site to allow clients to connect over http2.0
	Http20Enabled *bool `json:"http20Enabled,omitempty"`

	// IP security restrictions for main.
	IPSecurityRestrictions []*IPSecurityRestriction `json:"ipSecurityRestrictions,omitempty"`

	// Java container.
	JavaContainer *string `json:"javaContainer,omitempty"`

	// Java container version.
	JavaContainerVersion *string `json:"javaContainerVersion,omitempty"`

	// Java version.
	JavaVersion *string `json:"javaVersion,omitempty"`

	// Identity to use for Key Vault Reference authentication.
	KeyVaultReferenceIdentity *string `json:"keyVaultReferenceIdentity,omitempty"`

	// Site limits.
	Limits *SiteLimits `json:"limits,omitempty"`

	// Linux App Framework and version
	LinuxFxVersion *string `json:"linuxFxVersion,omitempty"`

	// Site load balancing.
	LoadBalancing *SiteLoadBalancing `json:"loadBalancing,omitempty"`

	// true to enable local MySQL; otherwise, false.
	LocalMySQLEnabled *bool `json:"localMySqlEnabled,omitempty"`

	// HTTP logs directory size limit.
	LogsDirectorySizeLimit *int32 `json:"logsDirectorySizeLimit,omitempty"`

	// Managed pipeline mode.
	ManagedPipelineMode *ManagedPipelineMode `json:"managedPipelineMode,omitempty"`

	// Managed Service Identity Id
	ManagedServiceIdentityID *int32 `json:"managedServiceIdentityId,omitempty"`

	// MinTlsVersion: configures the minimum version of TLS required for SSL requests
	MinTLSVersion *SupportedTLSVersions `json:"minTlsVersion,omitempty"`

	// Number of minimum instance count for a site This setting only applies to the Elastic Plans
	MinimumElasticInstanceCount *int32 `json:"minimumElasticInstanceCount,omitempty"`

	// .NET Framework version.
	NetFrameworkVersion *string `json:"netFrameworkVersion,omitempty"`

	// Version of Node.js.
	NodeVersion *string `json:"nodeVersion,omitempty"`

	// Number of workers.
	NumberOfWorkers *int32 `json:"numberOfWorkers,omitempty"`

	// Version of PHP.
	PhpVersion *string `json:"phpVersion,omitempty"`

	// Version of PowerShell.
	PowerShellVersion *string `json:"powerShellVersion,omitempty"`

	// Number of preWarmed instances. This setting only applies to the Consumption and Elastic Plans
	PreWarmedInstanceCount *int32 `json:"preWarmedInstanceCount,omitempty"`

	// Property to allow or block all public traffic.
	PublicNetworkAccess *string `json:"publicNetworkAccess,omitempty"`

	// Publishing user name.
	PublishingUsername *string `json:"publishingUsername,omitempty"`

	// Push endpoint settings.
	Push *PushSettings `json:"push,omitempty"`

	// Version of Python.
	PythonVersion *string `json:"pythonVersion,omitempty"`

	// true if remote debugging is enabled; otherwise, false.
	RemoteDebuggingEnabled *bool `json:"remoteDebuggingEnabled,omitempty"`

	// Remote debugging version.
	RemoteDebuggingVersion *string `json:"remoteDebuggingVersion,omitempty"`

	// true if request tracing is enabled; otherwise, false.
	RequestTracingEnabled *bool `json:"requestTracingEnabled,omitempty"`

	// Request tracing expiration time.
	RequestTracingExpirationTime *time.Time `json:"requestTracingExpirationTime,omitempty"`

	// IP security restrictions for scm.
	ScmIPSecurityRestrictions []*IPSecurityRestriction `json:"scmIpSecurityRestrictions,omitempty"`

	// IP security restrictions for scm to use main.
	ScmIPSecurityRestrictionsUseMain *bool `json:"scmIpSecurityRestrictionsUseMain,omitempty"`

	// ScmMinTlsVersion: configures the minimum version of TLS required for SSL requests for SCM site
	ScmMinTLSVersion *SupportedTLSVersions `json:"scmMinTlsVersion,omitempty"`

	// SCM type.
	ScmType *ScmType `json:"scmType,omitempty"`

	// Tracing options.
	TracingOptions *string `json:"tracingOptions,omitempty"`

	// true to use 32-bit worker process; otherwise, false.
	Use32BitWorkerProcess *bool `json:"use32BitWorkerProcess,omitempty"`

	// Virtual applications.
	VirtualApplications []*VirtualApplication `json:"virtualApplications,omitempty"`

	// Virtual Network name.
	VnetName *string `json:"vnetName,omitempty"`

	// The number of private ports assigned to this app. These will be assigned dynamically on runtime.
	VnetPrivatePortsCount *int32 `json:"vnetPrivatePortsCount,omitempty"`

	// Virtual Network Route All enabled. This causes all outbound traffic to have Virtual Network Security Groups and User Defined Routes applied.
	VnetRouteAllEnabled *bool `json:"vnetRouteAllEnabled,omitempty"`

	// true if WebSocket is enabled; otherwise, false.
	WebSocketsEnabled *bool `json:"webSocketsEnabled,omitempty"`

	// Sets the time zone a site uses for generating timestamps. Compatible with Linux and Windows App Service. Setting the WEBSITETIMEZONE app setting takes
	// precedence over this config. For Linux, expects
	// tz database values https://www.iana.org/time-zones (for a quick reference see https://en.wikipedia.org/wiki/Listoftzdatabasetimezones). For Windows,
	// expects one of the time zones listed under HKEY
	// LOCAL_MACHINE\SOFTWARE\Microsoft\Windows NT\CurrentVersion\Time Zones
	WebsiteTimeZone *string `json:"websiteTimeZone,omitempty"`

	// Xenon App Framework and version
	WindowsFxVersion *string `json:"windowsFxVersion,omitempty"`

	// Explicit Managed Service Identity Id
	XManagedServiceIdentityID *int32 `json:"xManagedServiceIdentityId,omitempty"`

	// READ-ONLY; Site MachineKey.
	MachineKey *SiteMachineKey `json:"machineKey,omitempty" azure:"ro"`
}

// MarshalJSON implements the json.Marshaller interface for type SiteConfig.
func (s SiteConfig) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "apiDefinition", s.APIDefinition)
	populate(objectMap, "apiManagementConfig", s.APIManagementConfig)
	populate(objectMap, "acrUseManagedIdentityCreds", s.AcrUseManagedIdentityCreds)
	populate(objectMap, "acrUserManagedIdentityID", s.AcrUserManagedIdentityID)
	populate(objectMap, "alwaysOn", s.AlwaysOn)
	populate(objectMap, "appCommandLine", s.AppCommandLine)
	populate(objectMap, "appSettings", s.AppSettings)
	populate(objectMap, "autoHealEnabled", s.AutoHealEnabled)
	populate(objectMap, "autoHealRules", s.AutoHealRules)
	populate(objectMap, "autoSwapSlotName", s.AutoSwapSlotName)
	populate(objectMap, "azureStorageAccounts", s.AzureStorageAccounts)
	populate(objectMap, "connectionStrings", s.ConnectionStrings)
	populate(objectMap, "cors", s.Cors)
	populate(objectMap, "defaultDocuments", s.DefaultDocuments)
	populate(objectMap, "detailedErrorLoggingEnabled", s.DetailedErrorLoggingEnabled)
	populate(objectMap, "documentRoot", s.DocumentRoot)
	populate(objectMap, "experiments", s.Experiments)
	populate(objectMap, "ftpsState", s.FtpsState)
	populate(objectMap, "functionAppScaleLimit", s.FunctionAppScaleLimit)
	populate(objectMap, "functionsRuntimeScaleMonitoringEnabled", s.FunctionsRuntimeScaleMonitoringEnabled)
	populate(objectMap, "httpLoggingEnabled", s.HTTPLoggingEnabled)
	populate(objectMap, "handlerMappings", s.HandlerMappings)
	populate(objectMap, "healthCheckPath", s.HealthCheckPath)
	populate(objectMap, "http20Enabled", s.Http20Enabled)
	populate(objectMap, "ipSecurityRestrictions", s.IPSecurityRestrictions)
	populate(objectMap, "javaContainer", s.JavaContainer)
	populate(objectMap, "javaContainerVersion", s.JavaContainerVersion)
	populate(objectMap, "javaVersion", s.JavaVersion)
	populate(objectMap, "keyVaultReferenceIdentity", s.KeyVaultReferenceIdentity)
	populate(objectMap, "limits", s.Limits)
	populate(objectMap, "linuxFxVersion", s.LinuxFxVersion)
	populate(objectMap, "loadBalancing", s.LoadBalancing)
	populate(objectMap, "localMySqlEnabled", s.LocalMySQLEnabled)
	populate(objectMap, "logsDirectorySizeLimit", s.LogsDirectorySizeLimit)
	populate(objectMap, "machineKey", s.MachineKey)
	populate(objectMap, "managedPipelineMode", s.ManagedPipelineMode)
	populate(objectMap, "managedServiceIdentityId", s.ManagedServiceIdentityID)
	populate(objectMap, "minTlsVersion", s.MinTLSVersion)
	populate(objectMap, "minimumElasticInstanceCount", s.MinimumElasticInstanceCount)
	populate(objectMap, "netFrameworkVersion", s.NetFrameworkVersion)
	populate(objectMap, "nodeVersion", s.NodeVersion)
	populate(objectMap, "numberOfWorkers", s.NumberOfWorkers)
	populate(objectMap, "phpVersion", s.PhpVersion)
	populate(objectMap, "powerShellVersion", s.PowerShellVersion)
	populate(objectMap, "preWarmedInstanceCount", s.PreWarmedInstanceCount)
	populate(objectMap, "publicNetworkAccess", s.PublicNetworkAccess)
	populate(objectMap, "publishingUsername", s.PublishingUsername)
	populate(objectMap, "push", s.Push)
	populate(objectMap, "pythonVersion", s.PythonVersion)
	populate(objectMap, "remoteDebuggingEnabled", s.RemoteDebuggingEnabled)
	populate(objectMap, "remoteDebuggingVersion", s.RemoteDebuggingVersion)
	populate(objectMap, "requestTracingEnabled", s.RequestTracingEnabled)
	populate(objectMap, "requestTracingExpirationTime", (*timeRFC3339)(s.RequestTracingExpirationTime))
	populate(objectMap, "scmIpSecurityRestrictions", s.ScmIPSecurityRestrictions)
	populate(objectMap, "scmIpSecurityRestrictionsUseMain", s.ScmIPSecurityRestrictionsUseMain)
	populate(objectMap, "scmMinTlsVersion", s.ScmMinTLSVersion)
	populate(objectMap, "scmType", s.ScmType)
	populate(objectMap, "tracingOptions", s.TracingOptions)
	populate(objectMap, "use32BitWorkerProcess", s.Use32BitWorkerProcess)
	populate(objectMap, "virtualApplications", s.VirtualApplications)
	populate(objectMap, "vnetName", s.VnetName)
	populate(objectMap, "vnetPrivatePortsCount", s.VnetPrivatePortsCount)
	populate(objectMap, "vnetRouteAllEnabled", s.VnetRouteAllEnabled)
	populate(objectMap, "webSocketsEnabled", s.WebSocketsEnabled)
	populate(objectMap, "websiteTimeZone", s.WebsiteTimeZone)
	populate(objectMap, "windowsFxVersion", s.WindowsFxVersion)
	populate(objectMap, "xManagedServiceIdentityId", s.XManagedServiceIdentityID)
	return json.Marshal(objectMap)
}

// UnmarshalJSON implements the json.Unmarshaller interface for type SiteConfig.
func (s *SiteConfig) UnmarshalJSON(data []byte) error {
	var rawMsg map[string]json.RawMessage
	if err := json.Unmarshal(data, &rawMsg); err != nil {
		return err
	}
	for key, val := range rawMsg {
		var err error
		switch key {
		case "apiDefinition":
			err = unpopulate(val, &s.APIDefinition)
			delete(rawMsg, key)
		case "apiManagementConfig":
			err = unpopulate(val, &s.APIManagementConfig)
			delete(rawMsg, key)
		case "acrUseManagedIdentityCreds":
			err = unpopulate(val, &s.AcrUseManagedIdentityCreds)
			delete(rawMsg, key)
		case "acrUserManagedIdentityID":
			err = unpopulate(val, &s.AcrUserManagedIdentityID)
			delete(rawMsg, key)
		case "alwaysOn":
			err = unpopulate(val, &s.AlwaysOn)
			delete(rawMsg, key)
		case "appCommandLine":
			err = unpopulate(val, &s.AppCommandLine)
			delete(rawMsg, key)
		case "appSettings":
			err = unpopulate(val, &s.AppSettings)
			delete(rawMsg, key)
		case "autoHealEnabled":
			err = unpopulate(val, &s.AutoHealEnabled)
			delete(rawMsg, key)
		case "autoHealRules":
			err = unpopulate(val, &s.AutoHealRules)
			delete(rawMsg, key)
		case "autoSwapSlotName":
			err = unpopulate(val, &s.AutoSwapSlotName)
			delete(rawMsg, key)
		case "azureStorageAccounts":
			err = unpopulate(val, &s.AzureStorageAccounts)
			delete(rawMsg, key)
		case "connectionStrings":
			err = unpopulate(val, &s.ConnectionStrings)
			delete(rawMsg, key)
		case "cors":
			err = unpopulate(val, &s.Cors)
			delete(rawMsg, key)
		case "defaultDocuments":
			err = unpopulate(val, &s.DefaultDocuments)
			delete(rawMsg, key)
		case "detailedErrorLoggingEnabled":
			err = unpopulate(val, &s.DetailedErrorLoggingEnabled)
			delete(rawMsg, key)
		case "documentRoot":
			err = unpopulate(val, &s.DocumentRoot)
			delete(rawMsg, key)
		case "experiments":
			err = unpopulate(val, &s.Experiments)
			delete(rawMsg, key)
		case "ftpsState":
			err = unpopulate(val, &s.FtpsState)
			delete(rawMsg, key)
		case "functionAppScaleLimit":
			err = unpopulate(val, &s.FunctionAppScaleLimit)
			delete(rawMsg, key)
		case "functionsRuntimeScaleMonitoringEnabled":
			err = unpopulate(val, &s.FunctionsRuntimeScaleMonitoringEnabled)
			delete(rawMsg, key)
		case "httpLoggingEnabled":
			err = unpopulate(val, &s.HTTPLoggingEnabled)
			delete(rawMsg, key)
		case "handlerMappings":
			err = unpopulate(val, &s.HandlerMappings)
			delete(rawMsg, key)
		case "healthCheckPath":
			err = unpopulate(val, &s.HealthCheckPath)
			delete(rawMsg, key)
		case "http20Enabled":
			err = unpopulate(val, &s.Http20Enabled)
			delete(rawMsg, key)
		case "ipSecurityRestrictions":
			err = unpopulate(val, &s.IPSecurityRestrictions)
			delete(rawMsg, key)
		case "javaContainer":
			err = unpopulate(val, &s.JavaContainer)
			delete(rawMsg, key)
		case "javaContainerVersion":
			err = unpopulate(val, &s.JavaContainerVersion)
			delete(rawMsg, key)
		case "javaVersion":
			err = unpopulate(val, &s.JavaVersion)
			delete(rawMsg, key)
		case "keyVaultReferenceIdentity":
			err = unpopulate(val, &s.KeyVaultReferenceIdentity)
			delete(rawMsg, key)
		case "limits":
			err = unpopulate(val, &s.Limits)
			delete(rawMsg, key)
		case "linuxFxVersion":
			err = unpopulate(val, &s.LinuxFxVersion)
			delete(rawMsg, key)
		case "loadBalancing":
			err = unpopulate(val, &s.LoadBalancing)
			delete(rawMsg, key)
		case "localMySqlEnabled":
			err = unpopulate(val, &s.LocalMySQLEnabled)
			delete(rawMsg, key)
		case "logsDirectorySizeLimit":
			err = unpopulate(val, &s.LogsDirectorySizeLimit)
			delete(rawMsg, key)
		case "machineKey":
			err = unpopulate(val, &s.MachineKey)
			delete(rawMsg, key)
		case "managedPipelineMode":
			err = unpopulate(val, &s.ManagedPipelineMode)
			delete(rawMsg, key)
		case "managedServiceIdentityId":
			err = unpopulate(val, &s.ManagedServiceIdentityID)
			delete(rawMsg, key)
		case "minTlsVersion":
			err = unpopulate(val, &s.MinTLSVersion)
			delete(rawMsg, key)
		case "minimumElasticInstanceCount":
			err = unpopulate(val, &s.MinimumElasticInstanceCount)
			delete(rawMsg, key)
		case "netFrameworkVersion":
			err = unpopulate(val, &s.NetFrameworkVersion)
			delete(rawMsg, key)
		case "nodeVersion":
			err = unpopulate(val, &s.NodeVersion)
			delete(rawMsg, key)
		case "numberOfWorkers":
			err = unpopulate(val, &s.NumberOfWorkers)
			delete(rawMsg, key)
		case "phpVersion":
			err = unpopulate(val, &s.PhpVersion)
			delete(rawMsg, key)
		case "powerShellVersion":
			err = unpopulate(val, &s.PowerShellVersion)
			delete(rawMsg, key)
		case "preWarmedInstanceCount":
			err = unpopulate(val, &s.PreWarmedInstanceCount)
			delete(rawMsg, key)
		case "publicNetworkAccess":
			err = unpopulate(val, &s.PublicNetworkAccess)
			delete(rawMsg, key)
		case "publishingUsername":
			err = unpopulate(val, &s.PublishingUsername)
			delete(rawMsg, key)
		case "push":
			err = unpopulate(val, &s.Push)
			delete(rawMsg, key)
		case "pythonVersion":
			err = unpopulate(val, &s.PythonVersion)
			delete(rawMsg, key)
		case "remoteDebuggingEnabled":
			err = unpopulate(val, &s.RemoteDebuggingEnabled)
			delete(rawMsg, key)
		case "remoteDebuggingVersion":
			err = unpopulate(val, &s.RemoteDebuggingVersion)
			delete(rawMsg, key)
		case "requestTracingEnabled":
			err = unpopulate(val, &s.RequestTracingEnabled)
			delete(rawMsg, key)
		case "requestTracingExpirationTime":
			var aux timeRFC3339
			err = unpopulate(val, &aux)
			s.RequestTracingExpirationTime = (*time.Time)(&aux)
			delete(rawMsg, key)
		case "scmIpSecurityRestrictions":
			err = unpopulate(val, &s.ScmIPSecurityRestrictions)
			delete(rawMsg, key)
		case "scmIpSecurityRestrictionsUseMain":
			err = unpopulate(val, &s.ScmIPSecurityRestrictionsUseMain)
			delete(rawMsg, key)
		case "scmMinTlsVersion":
			err = unpopulate(val, &s.ScmMinTLSVersion)
			delete(rawMsg, key)
		case "scmType":
			err = unpopulate(val, &s.ScmType)
			delete(rawMsg, key)
		case "tracingOptions":
			err = unpopulate(val, &s.TracingOptions)
			delete(rawMsg, key)
		case "use32BitWorkerProcess":
			err = unpopulate(val, &s.Use32BitWorkerProcess)
			delete(rawMsg, key)
		case "virtualApplications":
			err = unpopulate(val, &s.VirtualApplications)
			delete(rawMsg, key)
		case "vnetName":
			err = unpopulate(val, &s.VnetName)
			delete(rawMsg, key)
		case "vnetPrivatePortsCount":
			err = unpopulate(val, &s.VnetPrivatePortsCount)
			delete(rawMsg, key)
		case "vnetRouteAllEnabled":
			err = unpopulate(val, &s.VnetRouteAllEnabled)
			delete(rawMsg, key)
		case "webSocketsEnabled":
			err = unpopulate(val, &s.WebSocketsEnabled)
			delete(rawMsg, key)
		case "websiteTimeZone":
			err = unpopulate(val, &s.WebsiteTimeZone)
			delete(rawMsg, key)
		case "windowsFxVersion":
			err = unpopulate(val, &s.WindowsFxVersion)
			delete(rawMsg, key)
		case "xManagedServiceIdentityId":
			err = unpopulate(val, &s.XManagedServiceIdentityID)
			delete(rawMsg, key)
		}
		if err != nil {
			return err
		}
	}
	return nil
}

// SiteConfigPropertiesDictionary - Site config properties dictionary.
type SiteConfigPropertiesDictionary struct {
	// READ-ONLY; JavaVersion configuration setting.
	JavaVersion *string `json:"javaVersion,omitempty" azure:"ro"`

	// READ-ONLY; LinuxFxVersion configuration setting.
	LinuxFxVersion *string `json:"linuxFxVersion,omitempty" azure:"ro"`

	// READ-ONLY; PowerShellVersion configuration setting.
	PowerShellVersion *string `json:"powerShellVersion,omitempty" azure:"ro"`

	// READ-ONLY; true if use32BitWorkerProcess should be set to true for the stack; otherwise, false.
	Use32BitWorkerProcess *bool `json:"use32BitWorkerProcess,omitempty" azure:"ro"`
}

// SiteConfigResource - Web app configuration ARM resource.
type SiteConfigResource struct {
	ProxyOnlyResource
	// Core resource properties
	Properties *SiteConfig `json:"properties,omitempty"`
}

// MarshalJSON implements the json.Marshaller interface for type SiteConfigResource.
func (s SiteConfigResource) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	s.ProxyOnlyResource.marshalInternal(objectMap)
	populate(objectMap, "properties", s.Properties)
	return json.Marshal(objectMap)
}

// SiteConfigResourceCollection - Collection of site configurations.
type SiteConfigResourceCollection struct {
	// REQUIRED; Collection of resources.
	Value []*SiteConfigResource `json:"value,omitempty"`

	// READ-ONLY; Link to next page of resources.
	NextLink *string `json:"nextLink,omitempty" azure:"ro"`
}

// MarshalJSON implements the json.Marshaller interface for type SiteConfigResourceCollection.
func (s SiteConfigResourceCollection) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "nextLink", s.NextLink)
	populate(objectMap, "value", s.Value)
	return json.Marshal(objectMap)
}

// SiteConfigurationSnapshotInfo - A snapshot of a web app configuration.
type SiteConfigurationSnapshotInfo struct {
	ProxyOnlyResource
	// SiteConfigurationSnapshotInfo resource specific properties
	Properties *SiteConfigurationSnapshotInfoProperties `json:"properties,omitempty"`
}

// MarshalJSON implements the json.Marshaller interface for type SiteConfigurationSnapshotInfo.
func (s SiteConfigurationSnapshotInfo) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	s.ProxyOnlyResource.marshalInternal(objectMap)
	populate(objectMap, "properties", s.Properties)
	return json.Marshal(objectMap)
}

// SiteConfigurationSnapshotInfoCollection - Collection of metadata for the app configuration snapshots that can be restored.
type SiteConfigurationSnapshotInfoCollection struct {
	// REQUIRED; Collection of resources.
	Value []*SiteConfigurationSnapshotInfo `json:"value,omitempty"`

	// READ-ONLY; Link to next page of resources.
	NextLink *string `json:"nextLink,omitempty" azure:"ro"`
}

// MarshalJSON implements the json.Marshaller interface for type SiteConfigurationSnapshotInfoCollection.
func (s SiteConfigurationSnapshotInfoCollection) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "nextLink", s.NextLink)
	populate(objectMap, "value", s.Value)
	return json.Marshal(objectMap)
}

// SiteConfigurationSnapshotInfoProperties - SiteConfigurationSnapshotInfo resource specific properties
type SiteConfigurationSnapshotInfoProperties struct {
	// READ-ONLY; The id of the snapshot
	SnapshotID *int32 `json:"snapshotId,omitempty" azure:"ro"`

	// READ-ONLY; The time the snapshot was taken.
	Time *time.Time `json:"time,omitempty" azure:"ro"`
}

// MarshalJSON implements the json.Marshaller interface for type SiteConfigurationSnapshotInfoProperties.
func (s SiteConfigurationSnapshotInfoProperties) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "snapshotId", s.SnapshotID)
	populate(objectMap, "time", (*timeRFC3339)(s.Time))
	return json.Marshal(objectMap)
}

// UnmarshalJSON implements the json.Unmarshaller interface for type SiteConfigurationSnapshotInfoProperties.
func (s *SiteConfigurationSnapshotInfoProperties) UnmarshalJSON(data []byte) error {
	var rawMsg map[string]json.RawMessage
	if err := json.Unmarshal(data, &rawMsg); err != nil {
		return err
	}
	for key, val := range rawMsg {
		var err error
		switch key {
		case "snapshotId":
			err = unpopulate(val, &s.SnapshotID)
			delete(rawMsg, key)
		case "time":
			var aux timeRFC3339
			err = unpopulate(val, &aux)
			s.Time = (*time.Time)(&aux)
			delete(rawMsg, key)
		}
		if err != nil {
			return err
		}
	}
	return nil
}

// SiteExtensionInfo - Site Extension Information.
type SiteExtensionInfo struct {
	ProxyOnlyResource
	// SiteExtensionInfo resource specific properties
	Properties *SiteExtensionInfoProperties `json:"properties,omitempty"`
}

// MarshalJSON implements the json.Marshaller interface for type SiteExtensionInfo.
func (s SiteExtensionInfo) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	s.ProxyOnlyResource.marshalInternal(objectMap)
	populate(objectMap, "properties", s.Properties)
	return json.Marshal(objectMap)
}

// SiteExtensionInfoCollection - Collection of Kudu site extension information elements.
type SiteExtensionInfoCollection struct {
	// REQUIRED; Collection of resources.
	Value []*SiteExtensionInfo `json:"value,omitempty"`

	// READ-ONLY; Link to next page of resources.
	NextLink *string `json:"nextLink,omitempty" azure:"ro"`
}

// MarshalJSON implements the json.Marshaller interface for type SiteExtensionInfoCollection.
func (s SiteExtensionInfoCollection) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "nextLink", s.NextLink)
	populate(objectMap, "value", s.Value)
	return json.Marshal(objectMap)
}

// SiteExtensionInfoProperties - SiteExtensionInfo resource specific properties
type SiteExtensionInfoProperties struct {
	// List of authors.
	Authors []*string `json:"authors,omitempty"`

	// Site Extension comment.
	Comment *string `json:"comment,omitempty"`

	// Detailed description.
	Description *string `json:"description,omitempty"`

	// Count of downloads.
	DownloadCount *int32 `json:"download_count,omitempty"`

	// Site extension ID.
	ExtensionID *string `json:"extension_id,omitempty"`

	// Site extension type.
	ExtensionType *SiteExtensionType `json:"extension_type,omitempty"`

	// Extension URL.
	ExtensionURL *string `json:"extension_url,omitempty"`

	// Feed URL.
	FeedURL *string `json:"feed_url,omitempty"`

	// Icon URL.
	IconURL *string `json:"icon_url,omitempty"`

	// Installed timestamp.
	InstalledDateTime *time.Time `json:"installed_date_time,omitempty"`

	// Installer command line parameters.
	InstallerCommandLineParams *string `json:"installer_command_line_params,omitempty"`

	// License URL.
	LicenseURL *string `json:"license_url,omitempty"`

	// true if the local version is the latest version; false otherwise.
	LocalIsLatestVersion *bool `json:"local_is_latest_version,omitempty"`

	// Local path.
	LocalPath *string `json:"local_path,omitempty"`

	// Project URL.
	ProjectURL *string `json:"project_url,omitempty"`

	// Provisioning state.
	ProvisioningState *string `json:"provisioningState,omitempty"`

	// Published timestamp.
	PublishedDateTime *time.Time `json:"published_date_time,omitempty"`

	// Summary description.
	Summary *string `json:"summary,omitempty"`
	Title   *string `json:"title,omitempty"`

	// Version information.
	Version *string `json:"version,omitempty"`
}

// MarshalJSON implements the json.Marshaller interface for type SiteExtensionInfoProperties.
func (s SiteExtensionInfoProperties) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "authors", s.Authors)
	populate(objectMap, "comment", s.Comment)
	populate(objectMap, "description", s.Description)
	populate(objectMap, "download_count", s.DownloadCount)
	populate(objectMap, "extension_id", s.ExtensionID)
	populate(objectMap, "extension_type", s.ExtensionType)
	populate(objectMap, "extension_url", s.ExtensionURL)
	populate(objectMap, "feed_url", s.FeedURL)
	populate(objectMap, "icon_url", s.IconURL)
	populate(objectMap, "installed_date_time", (*timeRFC3339)(s.InstalledDateTime))
	populate(objectMap, "installer_command_line_params", s.InstallerCommandLineParams)
	populate(objectMap, "license_url", s.LicenseURL)
	populate(objectMap, "local_is_latest_version", s.LocalIsLatestVersion)
	populate(objectMap, "local_path", s.LocalPath)
	populate(objectMap, "project_url", s.ProjectURL)
	populate(objectMap, "provisioningState", s.ProvisioningState)
	populate(objectMap, "published_date_time", (*timeRFC3339)(s.PublishedDateTime))
	populate(objectMap, "summary", s.Summary)
	populate(objectMap, "title", s.Title)
	populate(objectMap, "version", s.Version)
	return json.Marshal(objectMap)
}

// UnmarshalJSON implements the json.Unmarshaller interface for type SiteExtensionInfoProperties.
func (s *SiteExtensionInfoProperties) UnmarshalJSON(data []byte) error {
	var rawMsg map[string]json.RawMessage
	if err := json.Unmarshal(data, &rawMsg); err != nil {
		return err
	}
	for key, val := range rawMsg {
		var err error
		switch key {
		case "authors":
			err = unpopulate(val, &s.Authors)
			delete(rawMsg, key)
		case "comment":
			err = unpopulate(val, &s.Comment)
			delete(rawMsg, key)
		case "description":
			err = unpopulate(val, &s.Description)
			delete(rawMsg, key)
		case "download_count":
			err = unpopulate(val, &s.DownloadCount)
			delete(rawMsg, key)
		case "extension_id":
			err = unpopulate(val, &s.ExtensionID)
			delete(rawMsg, key)
		case "extension_type":
			err = unpopulate(val, &s.ExtensionType)
			delete(rawMsg, key)
		case "extension_url":
			err = unpopulate(val, &s.ExtensionURL)
			delete(rawMsg, key)
		case "feed_url":
			err = unpopulate(val, &s.FeedURL)
			delete(rawMsg, key)
		case "icon_url":
			err = unpopulate(val, &s.IconURL)
			delete(rawMsg, key)
		case "installed_date_time":
			var aux timeRFC3339
			err = unpopulate(val, &aux)
			s.InstalledDateTime = (*time.Time)(&aux)
			delete(rawMsg, key)
		case "installer_command_line_params":
			err = unpopulate(val, &s.InstallerCommandLineParams)
			delete(rawMsg, key)
		case "license_url":
			err = unpopulate(val, &s.LicenseURL)
			delete(rawMsg, key)
		case "local_is_latest_version":
			err = unpopulate(val, &s.LocalIsLatestVersion)
			delete(rawMsg, key)
		case "local_path":
			err = unpopulate(val, &s.LocalPath)
			delete(rawMsg, key)
		case "project_url":
			err = unpopulate(val, &s.ProjectURL)
			delete(rawMsg, key)
		case "provisioningState":
			err = unpopulate(val, &s.ProvisioningState)
			delete(rawMsg, key)
		case "published_date_time":
			var aux timeRFC3339
			err = unpopulate(val, &aux)
			s.PublishedDateTime = (*time.Time)(&aux)
			delete(rawMsg, key)
		case "summary":
			err = unpopulate(val, &s.Summary)
			delete(rawMsg, key)
		case "title":
			err = unpopulate(val, &s.Title)
			delete(rawMsg, key)
		case "version":
			err = unpopulate(val, &s.Version)
			delete(rawMsg, key)
		}
		if err != nil {
			return err
		}
	}
	return nil
}

// SiteLimits - Metric limits set on an app.
type SiteLimits struct {
	// Maximum allowed disk size usage in MB.
	MaxDiskSizeInMb *int64 `json:"maxDiskSizeInMb,omitempty"`

	// Maximum allowed memory usage in MB.
	MaxMemoryInMb *int64 `json:"maxMemoryInMb,omitempty"`

	// Maximum allowed CPU usage percentage.
	MaxPercentageCPU *float64 `json:"maxPercentageCpu,omitempty"`
}

// SiteLogsConfig - Configuration of App Service site logs.
type SiteLogsConfig struct {
	ProxyOnlyResource
	// SiteLogsConfig resource specific properties
	Properties *SiteLogsConfigProperties `json:"properties,omitempty"`
}

// MarshalJSON implements the json.Marshaller interface for type SiteLogsConfig.
func (s SiteLogsConfig) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	s.ProxyOnlyResource.marshalInternal(objectMap)
	populate(objectMap, "properties", s.Properties)
	return json.Marshal(objectMap)
}

// SiteLogsConfigProperties - SiteLogsConfig resource specific properties
type SiteLogsConfigProperties struct {
	// Application logs configuration.
	ApplicationLogs *ApplicationLogsConfig `json:"applicationLogs,omitempty"`

	// Detailed error messages configuration.
	DetailedErrorMessages *EnabledConfig `json:"detailedErrorMessages,omitempty"`

	// Failed requests tracing configuration.
	FailedRequestsTracing *EnabledConfig `json:"failedRequestsTracing,omitempty"`

	// HTTP logs configuration.
	HTTPLogs *HTTPLogsConfig `json:"httpLogs,omitempty"`
}

// SiteMachineKey - MachineKey of an app.
type SiteMachineKey struct {
	// Algorithm used for decryption.
	Decryption *string `json:"decryption,omitempty"`

	// Decryption key.
	DecryptionKey *string `json:"decryptionKey,omitempty"`

	// MachineKey validation.
	Validation *string `json:"validation,omitempty"`

	// Validation key.
	ValidationKey *string `json:"validationKey,omitempty"`
}

// SitePatchResource - ARM resource for a site.
type SitePatchResource struct {
	ProxyOnlyResource
	// Managed service identity.
	Identity *ManagedServiceIdentity `json:"identity,omitempty"`

	// SitePatchResource resource specific properties
	Properties *SitePatchResourceProperties `json:"properties,omitempty"`
}

// MarshalJSON implements the json.Marshaller interface for type SitePatchResource.
func (s SitePatchResource) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	s.ProxyOnlyResource.marshalInternal(objectMap)
	populate(objectMap, "identity", s.Identity)
	populate(objectMap, "properties", s.Properties)
	return json.Marshal(objectMap)
}

// SitePatchResourceProperties - SitePatchResource resource specific properties
type SitePatchResourceProperties struct {
	// true to enable client affinity; false to stop sending session affinity cookies, which route client requests in the same session to the same instance.
	// Default is true.
	ClientAffinityEnabled *bool `json:"clientAffinityEnabled,omitempty"`

	// true to enable client certificate authentication (TLS mutual authentication); otherwise, false. Default is false.
	ClientCertEnabled *bool `json:"clientCertEnabled,omitempty"`

	// client certificate authentication comma-separated exclusion paths
	ClientCertExclusionPaths *string `json:"clientCertExclusionPaths,omitempty"`

	// This composes with ClientCertEnabled setting.
	// * ClientCertEnabled: false means ClientCert is ignored.
	// * ClientCertEnabled: true and ClientCertMode: Required means ClientCert is required.
	// * ClientCertEnabled: true and ClientCertMode: Optional means ClientCert is optional or accepted.
	ClientCertMode *ClientCertMode `json:"clientCertMode,omitempty"`

	// If specified during app creation, the app is cloned from a source app.
	CloningInfo *CloningInfo `json:"cloningInfo,omitempty"`

	// Size of the function container.
	ContainerSize *int32 `json:"containerSize,omitempty"`

	// Unique identifier that verifies the custom domains assigned to the app. Customer will add this id to a txt record for verification.
	CustomDomainVerificationID *string `json:"customDomainVerificationId,omitempty"`

	// Maximum allowed daily memory-time quota (applicable on dynamic apps only).
	DailyMemoryTimeQuota *int32 `json:"dailyMemoryTimeQuota,omitempty"`

	// true if the app is enabled; otherwise, false. Setting this value to false disables the app (takes the app offline).
	Enabled *bool `json:"enabled,omitempty"`

	// HttpsOnly: configures a web site to accept only https requests. Issues redirect for http requests
	HTTPSOnly *bool `json:"httpsOnly,omitempty"`

	// Hostname SSL states are used to manage the SSL bindings for app's hostnames.
	HostNameSSLStates []*HostNameSSLState `json:"hostNameSslStates,omitempty"`

	// true to disable the public hostnames of the app; otherwise, false. If true, the app is only accessible via API management process.
	HostNamesDisabled *bool `json:"hostNamesDisabled,omitempty"`

	// App Service Environment to use for the app.
	HostingEnvironmentProfile *HostingEnvironmentProfile `json:"hostingEnvironmentProfile,omitempty"`

	// Hyper-V sandbox.
	HyperV *bool `json:"hyperV,omitempty"`

	// Obsolete: Hyper-V sandbox.
	IsXenon *bool `json:"isXenon,omitempty"`

	// Identity to use for Key Vault Reference authentication.
	KeyVaultReferenceIdentity *string `json:"keyVaultReferenceIdentity,omitempty"`

	// Site redundancy mode
	RedundancyMode *RedundancyMode `json:"redundancyMode,omitempty"`

	// true if reserved; otherwise, false.
	Reserved *bool `json:"reserved,omitempty"`

	// true to stop SCM (KUDU) site when the app is stopped; otherwise, false. The default is false.
	ScmSiteAlsoStopped *bool `json:"scmSiteAlsoStopped,omitempty"`

	// Resource ID of the associated App Service plan, formatted as: "/subscriptions/{subscriptionID}/resourceGroups/{groupName}/providers/Microsoft.Web/serverfarms/{appServicePlanName}".
	ServerFarmID *string `json:"serverFarmId,omitempty"`

	// Configuration of the app.
	SiteConfig *SiteConfig `json:"siteConfig,omitempty"`

	// Checks if Customer provided storage account is required
	StorageAccountRequired *bool `json:"storageAccountRequired,omitempty"`

	// Azure Resource Manager ID of the Virtual network and subnet to be joined by Regional VNET Integration. This must be of the form
	// /subscriptions/{subscriptionName}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/virtualNetworks/{vnetName}/subnets/{subnetName}
	VirtualNetworkSubnetID *string `json:"virtualNetworkSubnetId,omitempty"`

	// READ-ONLY; Management information availability state for the app.
	AvailabilityState *SiteAvailabilityState `json:"availabilityState,omitempty" azure:"ro"`

	// READ-ONLY; Default hostname of the app. Read-only.
	DefaultHostName *string `json:"defaultHostName,omitempty" azure:"ro"`

	// READ-ONLY; Enabled hostnames for the app.Hostnames need to be assigned (see HostNames) AND enabled. Otherwise, the app is not served on those hostnames.
	EnabledHostNames []*string `json:"enabledHostNames,omitempty" azure:"ro"`

	// READ-ONLY; Hostnames associated with the app.
	HostNames []*string `json:"hostNames,omitempty" azure:"ro"`

	// READ-ONLY; Specifies an operation id if this site has a pending operation.
	InProgressOperationID *string `json:"inProgressOperationId,omitempty" azure:"ro"`

	// READ-ONLY; true if the app is a default container; otherwise, false.
	IsDefaultContainer *bool `json:"isDefaultContainer,omitempty" azure:"ro"`

	// READ-ONLY; Last time the app was modified, in UTC. Read-only.
	LastModifiedTimeUTC *time.Time `json:"lastModifiedTimeUtc,omitempty" azure:"ro"`

	// READ-ONLY; Maximum number of workers. This only applies to Functions container.
	MaxNumberOfWorkers *int32 `json:"maxNumberOfWorkers,omitempty" azure:"ro"`

	// READ-ONLY; List of IP addresses that the app uses for outbound connections (e.g. database access). Includes VIPs from tenants that site can be hosted
	// with current settings. Read-only.
	OutboundIPAddresses *string `json:"outboundIpAddresses,omitempty" azure:"ro"`

	// READ-ONLY; List of IP addresses that the app uses for outbound connections (e.g. database access). Includes VIPs from all tenants except dataComponent.
	// Read-only.
	PossibleOutboundIPAddresses *string `json:"possibleOutboundIpAddresses,omitempty" azure:"ro"`

	// READ-ONLY; Name of the repository site.
	RepositorySiteName *string `json:"repositorySiteName,omitempty" azure:"ro"`

	// READ-ONLY; Name of the resource group the app belongs to. Read-only.
	ResourceGroup *string `json:"resourceGroup,omitempty" azure:"ro"`

	// READ-ONLY; Status of the last deployment slot swap operation.
	SlotSwapStatus *SlotSwapStatus `json:"slotSwapStatus,omitempty" azure:"ro"`

	// READ-ONLY; Current state of the app.
	State *string `json:"state,omitempty" azure:"ro"`

	// READ-ONLY; App suspended till in case memory-time quota is exceeded.
	SuspendedTill *time.Time `json:"suspendedTill,omitempty" azure:"ro"`

	// READ-ONLY; Specifies which deployment slot this app will swap into. Read-only.
	TargetSwapSlot *string `json:"targetSwapSlot,omitempty" azure:"ro"`

	// READ-ONLY; Azure Traffic Manager hostnames associated with the app. Read-only.
	TrafficManagerHostNames []*string `json:"trafficManagerHostNames,omitempty" azure:"ro"`

	// READ-ONLY; State indicating whether the app has exceeded its quota usage. Read-only.
	UsageState *UsageState `json:"usageState,omitempty" azure:"ro"`
}

// MarshalJSON implements the json.Marshaller interface for type SitePatchResourceProperties.
func (s SitePatchResourceProperties) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "availabilityState", s.AvailabilityState)
	populate(objectMap, "clientAffinityEnabled", s.ClientAffinityEnabled)
	populate(objectMap, "clientCertEnabled", s.ClientCertEnabled)
	populate(objectMap, "clientCertExclusionPaths", s.ClientCertExclusionPaths)
	populate(objectMap, "clientCertMode", s.ClientCertMode)
	populate(objectMap, "cloningInfo", s.CloningInfo)
	populate(objectMap, "containerSize", s.ContainerSize)
	populate(objectMap, "customDomainVerificationId", s.CustomDomainVerificationID)
	populate(objectMap, "dailyMemoryTimeQuota", s.DailyMemoryTimeQuota)
	populate(objectMap, "defaultHostName", s.DefaultHostName)
	populate(objectMap, "enabled", s.Enabled)
	populate(objectMap, "enabledHostNames", s.EnabledHostNames)
	populate(objectMap, "httpsOnly", s.HTTPSOnly)
	populate(objectMap, "hostNameSslStates", s.HostNameSSLStates)
	populate(objectMap, "hostNames", s.HostNames)
	populate(objectMap, "hostNamesDisabled", s.HostNamesDisabled)
	populate(objectMap, "hostingEnvironmentProfile", s.HostingEnvironmentProfile)
	populate(objectMap, "hyperV", s.HyperV)
	populate(objectMap, "inProgressOperationId", s.InProgressOperationID)
	populate(objectMap, "isDefaultContainer", s.IsDefaultContainer)
	populate(objectMap, "isXenon", s.IsXenon)
	populate(objectMap, "keyVaultReferenceIdentity", s.KeyVaultReferenceIdentity)
	populate(objectMap, "lastModifiedTimeUtc", (*timeRFC3339)(s.LastModifiedTimeUTC))
	populate(objectMap, "maxNumberOfWorkers", s.MaxNumberOfWorkers)
	populate(objectMap, "outboundIpAddresses", s.OutboundIPAddresses)
	populate(objectMap, "possibleOutboundIpAddresses", s.PossibleOutboundIPAddresses)
	populate(objectMap, "redundancyMode", s.RedundancyMode)
	populate(objectMap, "repositorySiteName", s.RepositorySiteName)
	populate(objectMap, "reserved", s.Reserved)
	populate(objectMap, "resourceGroup", s.ResourceGroup)
	populate(objectMap, "scmSiteAlsoStopped", s.ScmSiteAlsoStopped)
	populate(objectMap, "serverFarmId", s.ServerFarmID)
	populate(objectMap, "siteConfig", s.SiteConfig)
	populate(objectMap, "slotSwapStatus", s.SlotSwapStatus)
	populate(objectMap, "state", s.State)
	populate(objectMap, "storageAccountRequired", s.StorageAccountRequired)
	populate(objectMap, "suspendedTill", (*timeRFC3339)(s.SuspendedTill))
	populate(objectMap, "targetSwapSlot", s.TargetSwapSlot)
	populate(objectMap, "trafficManagerHostNames", s.TrafficManagerHostNames)
	populate(objectMap, "usageState", s.UsageState)
	populate(objectMap, "virtualNetworkSubnetId", s.VirtualNetworkSubnetID)
	return json.Marshal(objectMap)
}

// UnmarshalJSON implements the json.Unmarshaller interface for type SitePatchResourceProperties.
func (s *SitePatchResourceProperties) UnmarshalJSON(data []byte) error {
	var rawMsg map[string]json.RawMessage
	if err := json.Unmarshal(data, &rawMsg); err != nil {
		return err
	}
	for key, val := range rawMsg {
		var err error
		switch key {
		case "availabilityState":
			err = unpopulate(val, &s.AvailabilityState)
			delete(rawMsg, key)
		case "clientAffinityEnabled":
			err = unpopulate(val, &s.ClientAffinityEnabled)
			delete(rawMsg, key)
		case "clientCertEnabled":
			err = unpopulate(val, &s.ClientCertEnabled)
			delete(rawMsg, key)
		case "clientCertExclusionPaths":
			err = unpopulate(val, &s.ClientCertExclusionPaths)
			delete(rawMsg, key)
		case "clientCertMode":
			err = unpopulate(val, &s.ClientCertMode)
			delete(rawMsg, key)
		case "cloningInfo":
			err = unpopulate(val, &s.CloningInfo)
			delete(rawMsg, key)
		case "containerSize":
			err = unpopulate(val, &s.ContainerSize)
			delete(rawMsg, key)
		case "customDomainVerificationId":
			err = unpopulate(val, &s.CustomDomainVerificationID)
			delete(rawMsg, key)
		case "dailyMemoryTimeQuota":
			err = unpopulate(val, &s.DailyMemoryTimeQuota)
			delete(rawMsg, key)
		case "defaultHostName":
			err = unpopulate(val, &s.DefaultHostName)
			delete(rawMsg, key)
		case "enabled":
			err = unpopulate(val, &s.Enabled)
			delete(rawMsg, key)
		case "enabledHostNames":
			err = unpopulate(val, &s.EnabledHostNames)
			delete(rawMsg, key)
		case "httpsOnly":
			err = unpopulate(val, &s.HTTPSOnly)
			delete(rawMsg, key)
		case "hostNameSslStates":
			err = unpopulate(val, &s.HostNameSSLStates)
			delete(rawMsg, key)
		case "hostNames":
			err = unpopulate(val, &s.HostNames)
			delete(rawMsg, key)
		case "hostNamesDisabled":
			err = unpopulate(val, &s.HostNamesDisabled)
			delete(rawMsg, key)
		case "hostingEnvironmentProfile":
			err = unpopulate(val, &s.HostingEnvironmentProfile)
			delete(rawMsg, key)
		case "hyperV":
			err = unpopulate(val, &s.HyperV)
			delete(rawMsg, key)
		case "inProgressOperationId":
			err = unpopulate(val, &s.InProgressOperationID)
			delete(rawMsg, key)
		case "isDefaultContainer":
			err = unpopulate(val, &s.IsDefaultContainer)
			delete(rawMsg, key)
		case "isXenon":
			err = unpopulate(val, &s.IsXenon)
			delete(rawMsg, key)
		case "keyVaultReferenceIdentity":
			err = unpopulate(val, &s.KeyVaultReferenceIdentity)
			delete(rawMsg, key)
		case "lastModifiedTimeUtc":
			var aux timeRFC3339
			err = unpopulate(val, &aux)
			s.LastModifiedTimeUTC = (*time.Time)(&aux)
			delete(rawMsg, key)
		case "maxNumberOfWorkers":
			err = unpopulate(val, &s.MaxNumberOfWorkers)
			delete(rawMsg, key)
		case "outboundIpAddresses":
			err = unpopulate(val, &s.OutboundIPAddresses)
			delete(rawMsg, key)
		case "possibleOutboundIpAddresses":
			err = unpopulate(val, &s.PossibleOutboundIPAddresses)
			delete(rawMsg, key)
		case "redundancyMode":
			err = unpopulate(val, &s.RedundancyMode)
			delete(rawMsg, key)
		case "repositorySiteName":
			err = unpopulate(val, &s.RepositorySiteName)
			delete(rawMsg, key)
		case "reserved":
			err = unpopulate(val, &s.Reserved)
			delete(rawMsg, key)
		case "resourceGroup":
			err = unpopulate(val, &s.ResourceGroup)
			delete(rawMsg, key)
		case "scmSiteAlsoStopped":
			err = unpopulate(val, &s.ScmSiteAlsoStopped)
			delete(rawMsg, key)
		case "serverFarmId":
			err = unpopulate(val, &s.ServerFarmID)
			delete(rawMsg, key)
		case "siteConfig":
			err = unpopulate(val, &s.SiteConfig)
			delete(rawMsg, key)
		case "slotSwapStatus":
			err = unpopulate(val, &s.SlotSwapStatus)
			delete(rawMsg, key)
		case "state":
			err = unpopulate(val, &s.State)
			delete(rawMsg, key)
		case "storageAccountRequired":
			err = unpopulate(val, &s.StorageAccountRequired)
			delete(rawMsg, key)
		case "suspendedTill":
			var aux timeRFC3339
			err = unpopulate(val, &aux)
			s.SuspendedTill = (*time.Time)(&aux)
			delete(rawMsg, key)
		case "targetSwapSlot":
			err = unpopulate(val, &s.TargetSwapSlot)
			delete(rawMsg, key)
		case "trafficManagerHostNames":
			err = unpopulate(val, &s.TrafficManagerHostNames)
			delete(rawMsg, key)
		case "usageState":
			err = unpopulate(val, &s.UsageState)
			delete(rawMsg, key)
		case "virtualNetworkSubnetId":
			err = unpopulate(val, &s.VirtualNetworkSubnetID)
			delete(rawMsg, key)
		}
		if err != nil {
			return err
		}
	}
	return nil
}

// SitePhpErrorLogFlag - Used for getting PHP error logging flag.
type SitePhpErrorLogFlag struct {
	ProxyOnlyResource
	// SitePhpErrorLogFlag resource specific properties
	Properties *SitePhpErrorLogFlagProperties `json:"properties,omitempty"`
}

// MarshalJSON implements the json.Marshaller interface for type SitePhpErrorLogFlag.
func (s SitePhpErrorLogFlag) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	s.ProxyOnlyResource.marshalInternal(objectMap)
	populate(objectMap, "properties", s.Properties)
	return json.Marshal(objectMap)
}

// SitePhpErrorLogFlagProperties - SitePhpErrorLogFlag resource specific properties
type SitePhpErrorLogFlagProperties struct {
	// Local log_errors setting.
	LocalLogErrors *string `json:"localLogErrors,omitempty"`

	// Local logerrorsmax_len setting.
	LocalLogErrorsMaxLength *string `json:"localLogErrorsMaxLength,omitempty"`

	// Master log_errors setting.
	MasterLogErrors *string `json:"masterLogErrors,omitempty"`

	// Master logerrorsmax_len setting.
	MasterLogErrorsMaxLength *string `json:"masterLogErrorsMaxLength,omitempty"`
}

// SiteProperties - Site resource specific properties
type SiteProperties struct {
	// true to enable client affinity; false to stop sending session affinity cookies, which route client requests in the same session to the same instance.
	// Default is true.
	ClientAffinityEnabled *bool `json:"clientAffinityEnabled,omitempty"`

	// true to enable client certificate authentication (TLS mutual authentication); otherwise, false. Default is false.
	ClientCertEnabled *bool `json:"clientCertEnabled,omitempty"`

	// client certificate authentication comma-separated exclusion paths
	ClientCertExclusionPaths *string `json:"clientCertExclusionPaths,omitempty"`

	// This composes with ClientCertEnabled setting.
	// * ClientCertEnabled: false means ClientCert is ignored.
	// * ClientCertEnabled: true and ClientCertMode: Required means ClientCert is required.
	// * ClientCertEnabled: true and ClientCertMode: Optional means ClientCert is optional or accepted.
	ClientCertMode *ClientCertMode `json:"clientCertMode,omitempty"`

	// If specified during app creation, the app is cloned from a source app.
	CloningInfo *CloningInfo `json:"cloningInfo,omitempty"`

	// Size of the function container.
	ContainerSize *int32 `json:"containerSize,omitempty"`

	// Unique identifier that verifies the custom domains assigned to the app. Customer will add this id to a txt record for verification.
	CustomDomainVerificationID *string `json:"customDomainVerificationId,omitempty"`

	// Maximum allowed daily memory-time quota (applicable on dynamic apps only).
	DailyMemoryTimeQuota *int32 `json:"dailyMemoryTimeQuota,omitempty"`

	// true if the app is enabled; otherwise, false. Setting this value to false disables the app (takes the app offline).
	Enabled *bool `json:"enabled,omitempty"`

	// HttpsOnly: configures a web site to accept only https requests. Issues redirect for http requests
	HTTPSOnly *bool `json:"httpsOnly,omitempty"`

	// Hostname SSL states are used to manage the SSL bindings for app's hostnames.
	HostNameSSLStates []*HostNameSSLState `json:"hostNameSslStates,omitempty"`

	// true to disable the public hostnames of the app; otherwise, false. If true, the app is only accessible via API management process.
	HostNamesDisabled *bool `json:"hostNamesDisabled,omitempty"`

	// App Service Environment to use for the app.
	HostingEnvironmentProfile *HostingEnvironmentProfile `json:"hostingEnvironmentProfile,omitempty"`

	// Hyper-V sandbox.
	HyperV *bool `json:"hyperV,omitempty"`

	// Obsolete: Hyper-V sandbox.
	IsXenon *bool `json:"isXenon,omitempty"`

	// Identity to use for Key Vault Reference authentication.
	KeyVaultReferenceIdentity *string `json:"keyVaultReferenceIdentity,omitempty"`

	// Site redundancy mode
	RedundancyMode *RedundancyMode `json:"redundancyMode,omitempty"`

	// true if reserved; otherwise, false.
	Reserved *bool `json:"reserved,omitempty"`

	// true to stop SCM (KUDU) site when the app is stopped; otherwise, false. The default is false.
	ScmSiteAlsoStopped *bool `json:"scmSiteAlsoStopped,omitempty"`

	// Resource ID of the associated App Service plan, formatted as: "/subscriptions/{subscriptionID}/resourceGroups/{groupName}/providers/Microsoft.Web/serverfarms/{appServicePlanName}".
	ServerFarmID *string `json:"serverFarmId,omitempty"`

	// Configuration of the app.
	SiteConfig *SiteConfig `json:"siteConfig,omitempty"`

	// Checks if Customer provided storage account is required
	StorageAccountRequired *bool `json:"storageAccountRequired,omitempty"`

	// Azure Resource Manager ID of the Virtual network and subnet to be joined by Regional VNET Integration. This must be of the form
	// /subscriptions/{subscriptionName}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/virtualNetworks/{vnetName}/subnets/{subnetName}
	VirtualNetworkSubnetID *string `json:"virtualNetworkSubnetId,omitempty"`

	// READ-ONLY; Management information availability state for the app.
	AvailabilityState *SiteAvailabilityState `json:"availabilityState,omitempty" azure:"ro"`

	// READ-ONLY; Default hostname of the app. Read-only.
	DefaultHostName *string `json:"defaultHostName,omitempty" azure:"ro"`

	// READ-ONLY; Enabled hostnames for the app.Hostnames need to be assigned (see HostNames) AND enabled. Otherwise, the app is not served on those hostnames.
	EnabledHostNames []*string `json:"enabledHostNames,omitempty" azure:"ro"`

	// READ-ONLY; Hostnames associated with the app.
	HostNames []*string `json:"hostNames,omitempty" azure:"ro"`

	// READ-ONLY; Specifies an operation id if this site has a pending operation.
	InProgressOperationID *string `json:"inProgressOperationId,omitempty" azure:"ro"`

	// READ-ONLY; true if the app is a default container; otherwise, false.
	IsDefaultContainer *bool `json:"isDefaultContainer,omitempty" azure:"ro"`

	// READ-ONLY; Last time the app was modified, in UTC. Read-only.
	LastModifiedTimeUTC *time.Time `json:"lastModifiedTimeUtc,omitempty" azure:"ro"`

	// READ-ONLY; Maximum number of workers. This only applies to Functions container.
	MaxNumberOfWorkers *int32 `json:"maxNumberOfWorkers,omitempty" azure:"ro"`

	// READ-ONLY; List of IP addresses that the app uses for outbound connections (e.g. database access). Includes VIPs from tenants that site can be hosted
	// with current settings. Read-only.
	OutboundIPAddresses *string `json:"outboundIpAddresses,omitempty" azure:"ro"`

	// READ-ONLY; List of IP addresses that the app uses for outbound connections (e.g. database access). Includes VIPs from all tenants except dataComponent.
	// Read-only.
	PossibleOutboundIPAddresses *string `json:"possibleOutboundIpAddresses,omitempty" azure:"ro"`

	// READ-ONLY; Name of the repository site.
	RepositorySiteName *string `json:"repositorySiteName,omitempty" azure:"ro"`

	// READ-ONLY; Name of the resource group the app belongs to. Read-only.
	ResourceGroup *string `json:"resourceGroup,omitempty" azure:"ro"`

	// READ-ONLY; Status of the last deployment slot swap operation.
	SlotSwapStatus *SlotSwapStatus `json:"slotSwapStatus,omitempty" azure:"ro"`

	// READ-ONLY; Current state of the app.
	State *string `json:"state,omitempty" azure:"ro"`

	// READ-ONLY; App suspended till in case memory-time quota is exceeded.
	SuspendedTill *time.Time `json:"suspendedTill,omitempty" azure:"ro"`

	// READ-ONLY; Specifies which deployment slot this app will swap into. Read-only.
	TargetSwapSlot *string `json:"targetSwapSlot,omitempty" azure:"ro"`

	// READ-ONLY; Azure Traffic Manager hostnames associated with the app. Read-only.
	TrafficManagerHostNames []*string `json:"trafficManagerHostNames,omitempty" azure:"ro"`

	// READ-ONLY; State indicating whether the app has exceeded its quota usage. Read-only.
	UsageState *UsageState `json:"usageState,omitempty" azure:"ro"`
}

// MarshalJSON implements the json.Marshaller interface for type SiteProperties.
func (s SiteProperties) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "availabilityState", s.AvailabilityState)
	populate(objectMap, "clientAffinityEnabled", s.ClientAffinityEnabled)
	populate(objectMap, "clientCertEnabled", s.ClientCertEnabled)
	populate(objectMap, "clientCertExclusionPaths", s.ClientCertExclusionPaths)
	populate(objectMap, "clientCertMode", s.ClientCertMode)
	populate(objectMap, "cloningInfo", s.CloningInfo)
	populate(objectMap, "containerSize", s.ContainerSize)
	populate(objectMap, "customDomainVerificationId", s.CustomDomainVerificationID)
	populate(objectMap, "dailyMemoryTimeQuota", s.DailyMemoryTimeQuota)
	populate(objectMap, "defaultHostName", s.DefaultHostName)
	populate(objectMap, "enabled", s.Enabled)
	populate(objectMap, "enabledHostNames", s.EnabledHostNames)
	populate(objectMap, "httpsOnly", s.HTTPSOnly)
	populate(objectMap, "hostNameSslStates", s.HostNameSSLStates)
	populate(objectMap, "hostNames", s.HostNames)
	populate(objectMap, "hostNamesDisabled", s.HostNamesDisabled)
	populate(objectMap, "hostingEnvironmentProfile", s.HostingEnvironmentProfile)
	populate(objectMap, "hyperV", s.HyperV)
	populate(objectMap, "inProgressOperationId", s.InProgressOperationID)
	populate(objectMap, "isDefaultContainer", s.IsDefaultContainer)
	populate(objectMap, "isXenon", s.IsXenon)
	populate(objectMap, "keyVaultReferenceIdentity", s.KeyVaultReferenceIdentity)
	populate(objectMap, "lastModifiedTimeUtc", (*timeRFC3339)(s.LastModifiedTimeUTC))
	populate(objectMap, "maxNumberOfWorkers", s.MaxNumberOfWorkers)
	populate(objectMap, "outboundIpAddresses", s.OutboundIPAddresses)
	populate(objectMap, "possibleOutboundIpAddresses", s.PossibleOutboundIPAddresses)
	populate(objectMap, "redundancyMode", s.RedundancyMode)
	populate(objectMap, "repositorySiteName", s.RepositorySiteName)
	populate(objectMap, "reserved", s.Reserved)
	populate(objectMap, "resourceGroup", s.ResourceGroup)
	populate(objectMap, "scmSiteAlsoStopped", s.ScmSiteAlsoStopped)
	populate(objectMap, "serverFarmId", s.ServerFarmID)
	populate(objectMap, "siteConfig", s.SiteConfig)
	populate(objectMap, "slotSwapStatus", s.SlotSwapStatus)
	populate(objectMap, "state", s.State)
	populate(objectMap, "storageAccountRequired", s.StorageAccountRequired)
	populate(objectMap, "suspendedTill", (*timeRFC3339)(s.SuspendedTill))
	populate(objectMap, "targetSwapSlot", s.TargetSwapSlot)
	populate(objectMap, "trafficManagerHostNames", s.TrafficManagerHostNames)
	populate(objectMap, "usageState", s.UsageState)
	populate(objectMap, "virtualNetworkSubnetId", s.VirtualNetworkSubnetID)
	return json.Marshal(objectMap)
}

// UnmarshalJSON implements the json.Unmarshaller interface for type SiteProperties.
func (s *SiteProperties) UnmarshalJSON(data []byte) error {
	var rawMsg map[string]json.RawMessage
	if err := json.Unmarshal(data, &rawMsg); err != nil {
		return err
	}
	for key, val := range rawMsg {
		var err error
		switch key {
		case "availabilityState":
			err = unpopulate(val, &s.AvailabilityState)
			delete(rawMsg, key)
		case "clientAffinityEnabled":
			err = unpopulate(val, &s.ClientAffinityEnabled)
			delete(rawMsg, key)
		case "clientCertEnabled":
			err = unpopulate(val, &s.ClientCertEnabled)
			delete(rawMsg, key)
		case "clientCertExclusionPaths":
			err = unpopulate(val, &s.ClientCertExclusionPaths)
			delete(rawMsg, key)
		case "clientCertMode":
			err = unpopulate(val, &s.ClientCertMode)
			delete(rawMsg, key)
		case "cloningInfo":
			err = unpopulate(val, &s.CloningInfo)
			delete(rawMsg, key)
		case "containerSize":
			err = unpopulate(val, &s.ContainerSize)
			delete(rawMsg, key)
		case "customDomainVerificationId":
			err = unpopulate(val, &s.CustomDomainVerificationID)
			delete(rawMsg, key)
		case "dailyMemoryTimeQuota":
			err = unpopulate(val, &s.DailyMemoryTimeQuota)
			delete(rawMsg, key)
		case "defaultHostName":
			err = unpopulate(val, &s.DefaultHostName)
			delete(rawMsg, key)
		case "enabled":
			err = unpopulate(val, &s.Enabled)
			delete(rawMsg, key)
		case "enabledHostNames":
			err = unpopulate(val, &s.EnabledHostNames)
			delete(rawMsg, key)
		case "httpsOnly":
			err = unpopulate(val, &s.HTTPSOnly)
			delete(rawMsg, key)
		case "hostNameSslStates":
			err = unpopulate(val, &s.HostNameSSLStates)
			delete(rawMsg, key)
		case "hostNames":
			err = unpopulate(val, &s.HostNames)
			delete(rawMsg, key)
		case "hostNamesDisabled":
			err = unpopulate(val, &s.HostNamesDisabled)
			delete(rawMsg, key)
		case "hostingEnvironmentProfile":
			err = unpopulate(val, &s.HostingEnvironmentProfile)
			delete(rawMsg, key)
		case "hyperV":
			err = unpopulate(val, &s.HyperV)
			delete(rawMsg, key)
		case "inProgressOperationId":
			err = unpopulate(val, &s.InProgressOperationID)
			delete(rawMsg, key)
		case "isDefaultContainer":
			err = unpopulate(val, &s.IsDefaultContainer)
			delete(rawMsg, key)
		case "isXenon":
			err = unpopulate(val, &s.IsXenon)
			delete(rawMsg, key)
		case "keyVaultReferenceIdentity":
			err = unpopulate(val, &s.KeyVaultReferenceIdentity)
			delete(rawMsg, key)
		case "lastModifiedTimeUtc":
			var aux timeRFC3339
			err = unpopulate(val, &aux)
			s.LastModifiedTimeUTC = (*time.Time)(&aux)
			delete(rawMsg, key)
		case "maxNumberOfWorkers":
			err = unpopulate(val, &s.MaxNumberOfWorkers)
			delete(rawMsg, key)
		case "outboundIpAddresses":
			err = unpopulate(val, &s.OutboundIPAddresses)
			delete(rawMsg, key)
		case "possibleOutboundIpAddresses":
			err = unpopulate(val, &s.PossibleOutboundIPAddresses)
			delete(rawMsg, key)
		case "redundancyMode":
			err = unpopulate(val, &s.RedundancyMode)
			delete(rawMsg, key)
		case "repositorySiteName":
			err = unpopulate(val, &s.RepositorySiteName)
			delete(rawMsg, key)
		case "reserved":
			err = unpopulate(val, &s.Reserved)
			delete(rawMsg, key)
		case "resourceGroup":
			err = unpopulate(val, &s.ResourceGroup)
			delete(rawMsg, key)
		case "scmSiteAlsoStopped":
			err = unpopulate(val, &s.ScmSiteAlsoStopped)
			delete(rawMsg, key)
		case "serverFarmId":
			err = unpopulate(val, &s.ServerFarmID)
			delete(rawMsg, key)
		case "siteConfig":
			err = unpopulate(val, &s.SiteConfig)
			delete(rawMsg, key)
		case "slotSwapStatus":
			err = unpopulate(val, &s.SlotSwapStatus)
			delete(rawMsg, key)
		case "state":
			err = unpopulate(val, &s.State)
			delete(rawMsg, key)
		case "storageAccountRequired":
			err = unpopulate(val, &s.StorageAccountRequired)
			delete(rawMsg, key)
		case "suspendedTill":
			var aux timeRFC3339
			err = unpopulate(val, &aux)
			s.SuspendedTill = (*time.Time)(&aux)
			delete(rawMsg, key)
		case "targetSwapSlot":
			err = unpopulate(val, &s.TargetSwapSlot)
			delete(rawMsg, key)
		case "trafficManagerHostNames":
			err = unpopulate(val, &s.TrafficManagerHostNames)
			delete(rawMsg, key)
		case "usageState":
			err = unpopulate(val, &s.UsageState)
			delete(rawMsg, key)
		case "virtualNetworkSubnetId":
			err = unpopulate(val, &s.VirtualNetworkSubnetID)
			delete(rawMsg, key)
		}
		if err != nil {
			return err
		}
	}
	return nil
}

// SiteSeal - Site seal
type SiteSeal struct {
	// REQUIRED; HTML snippet
	HTML *string `json:"html,omitempty"`
}

// SiteSealRequest - Site seal request.
type SiteSealRequest struct {
	// If true use the light color theme for site seal; otherwise, use the default color theme.
	LightTheme *bool `json:"lightTheme,omitempty"`

	// Locale of site seal.
	Locale *string `json:"locale,omitempty"`
}

// SiteSourceControl - Source control configuration for an app.
type SiteSourceControl struct {
	ProxyOnlyResource
	// SiteSourceControl resource specific properties
	Properties *SiteSourceControlProperties `json:"properties,omitempty"`
}

// MarshalJSON implements the json.Marshaller interface for type SiteSourceControl.
func (s SiteSourceControl) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	s.ProxyOnlyResource.marshalInternal(objectMap)
	populate(objectMap, "properties", s.Properties)
	return json.Marshal(objectMap)
}

// SiteSourceControlProperties - SiteSourceControl resource specific properties
type SiteSourceControlProperties struct {
	// Name of branch to use for deployment.
	Branch *string `json:"branch,omitempty"`

	// true to enable deployment rollback; otherwise, false.
	DeploymentRollbackEnabled *bool `json:"deploymentRollbackEnabled,omitempty"`

	// If GitHub Action is selected, than the associated configuration.
	GitHubActionConfiguration *GitHubActionConfiguration `json:"gitHubActionConfiguration,omitempty"`

	// true if this is deployed via GitHub action.
	IsGitHubAction *bool `json:"isGitHubAction,omitempty"`

	// true to limit to manual integration; false to enable continuous integration (which configures webhooks into online repos like GitHub).
	IsManualIntegration *bool `json:"isManualIntegration,omitempty"`

	// true for a Mercurial repository; false for a Git repository.
	IsMercurial *bool `json:"isMercurial,omitempty"`

	// Repository or source control URL.
	RepoURL *string `json:"repoUrl,omitempty"`
}

// SlotConfigNames - Names for connection strings, application settings, and external Azure storage account configuration identifiers to be marked as sticky
// to the deployment slot and not moved during a swap operation.
// This is valid for all deployment slots in an app.
type SlotConfigNames struct {
	// List of application settings names.
	AppSettingNames []*string `json:"appSettingNames,omitempty"`

	// List of external Azure storage account identifiers.
	AzureStorageConfigNames []*string `json:"azureStorageConfigNames,omitempty"`

	// List of connection string names.
	ConnectionStringNames []*string `json:"connectionStringNames,omitempty"`
}

// MarshalJSON implements the json.Marshaller interface for type SlotConfigNames.
func (s SlotConfigNames) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "appSettingNames", s.AppSettingNames)
	populate(objectMap, "azureStorageConfigNames", s.AzureStorageConfigNames)
	populate(objectMap, "connectionStringNames", s.ConnectionStringNames)
	return json.Marshal(objectMap)
}

// SlotConfigNamesResource - Slot Config names azure resource.
type SlotConfigNamesResource struct {
	ProxyOnlyResource
	// Core resource properties
	Properties *SlotConfigNames `json:"properties,omitempty"`
}

// MarshalJSON implements the json.Marshaller interface for type SlotConfigNamesResource.
func (s SlotConfigNamesResource) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	s.ProxyOnlyResource.marshalInternal(objectMap)
	populate(objectMap, "properties", s.Properties)
	return json.Marshal(objectMap)
}

// SlotDifference - A setting difference between two deployment slots of an app.
type SlotDifference struct {
	ProxyOnlyResource
	// SlotDifference resource specific properties
	Properties *SlotDifferenceProperties `json:"properties,omitempty"`
}

// MarshalJSON implements the json.Marshaller interface for type SlotDifference.
func (s SlotDifference) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	s.ProxyOnlyResource.marshalInternal(objectMap)
	populate(objectMap, "properties", s.Properties)
	return json.Marshal(objectMap)
}

// SlotDifferenceCollection - Collection of slot differences.
type SlotDifferenceCollection struct {
	// REQUIRED; Collection of resources.
	Value []*SlotDifference `json:"value,omitempty"`

	// READ-ONLY; Link to next page of resources.
	NextLink *string `json:"nextLink,omitempty" azure:"ro"`
}

// MarshalJSON implements the json.Marshaller interface for type SlotDifferenceCollection.
func (s SlotDifferenceCollection) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "nextLink", s.NextLink)
	populate(objectMap, "value", s.Value)
	return json.Marshal(objectMap)
}

// SlotDifferenceProperties - SlotDifference resource specific properties
type SlotDifferenceProperties struct {
	// READ-ONLY; Description of the setting difference.
	Description *string `json:"description,omitempty" azure:"ro"`

	// READ-ONLY; Rule that describes how to process the setting difference during a slot swap.
	DiffRule *string `json:"diffRule,omitempty" azure:"ro"`

	// READ-ONLY; Level of the difference: Information, Warning or Error.
	Level *string `json:"level,omitempty" azure:"ro"`

	// READ-ONLY; Name of the setting.
	SettingName *string `json:"settingName,omitempty" azure:"ro"`

	// READ-ONLY; The type of the setting: General, AppSetting or ConnectionString.
	SettingType *string `json:"settingType,omitempty" azure:"ro"`

	// READ-ONLY; Value of the setting in the current slot.
	ValueInCurrentSlot *string `json:"valueInCurrentSlot,omitempty" azure:"ro"`

	// READ-ONLY; Value of the setting in the target slot.
	ValueInTargetSlot *string `json:"valueInTargetSlot,omitempty" azure:"ro"`
}

// SlotSwapStatus - The status of the last successful slot swap operation.
type SlotSwapStatus struct {
	// READ-ONLY; The destination slot of the last swap operation.
	DestinationSlotName *string `json:"destinationSlotName,omitempty" azure:"ro"`

	// READ-ONLY; The source slot of the last swap operation.
	SourceSlotName *string `json:"sourceSlotName,omitempty" azure:"ro"`

	// READ-ONLY; The time the last successful slot swap completed.
	TimestampUTC *time.Time `json:"timestampUtc,omitempty" azure:"ro"`
}

// MarshalJSON implements the json.Marshaller interface for type SlotSwapStatus.
func (s SlotSwapStatus) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "destinationSlotName", s.DestinationSlotName)
	populate(objectMap, "sourceSlotName", s.SourceSlotName)
	populate(objectMap, "timestampUtc", (*timeRFC3339)(s.TimestampUTC))
	return json.Marshal(objectMap)
}

// UnmarshalJSON implements the json.Unmarshaller interface for type SlotSwapStatus.
func (s *SlotSwapStatus) UnmarshalJSON(data []byte) error {
	var rawMsg map[string]json.RawMessage
	if err := json.Unmarshal(data, &rawMsg); err != nil {
		return err
	}
	for key, val := range rawMsg {
		var err error
		switch key {
		case "destinationSlotName":
			err = unpopulate(val, &s.DestinationSlotName)
			delete(rawMsg, key)
		case "sourceSlotName":
			err = unpopulate(val, &s.SourceSlotName)
			delete(rawMsg, key)
		case "timestampUtc":
			var aux timeRFC3339
			err = unpopulate(val, &aux)
			s.TimestampUTC = (*time.Time)(&aux)
			delete(rawMsg, key)
		}
		if err != nil {
			return err
		}
	}
	return nil
}

// SlowRequestsBasedTrigger - Trigger based on request execution time.
type SlowRequestsBasedTrigger struct {
	// Request Count.
	Count *int32 `json:"count,omitempty"`

	// Request Path.
	Path *string `json:"path,omitempty"`

	// Time interval.
	TimeInterval *string `json:"timeInterval,omitempty"`

	// Time taken.
	TimeTaken *string `json:"timeTaken,omitempty"`
}

// Snapshot - A snapshot of an app.
type Snapshot struct {
	ProxyOnlyResource
	// Snapshot resource specific properties
	Properties *SnapshotProperties `json:"properties,omitempty"`
}

// MarshalJSON implements the json.Marshaller interface for type Snapshot.
func (s Snapshot) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	s.ProxyOnlyResource.marshalInternal(objectMap)
	populate(objectMap, "properties", s.Properties)
	return json.Marshal(objectMap)
}

// SnapshotCollection - Collection of snapshots which can be used to revert an app to a previous time.
type SnapshotCollection struct {
	// REQUIRED; Collection of resources.
	Value []*Snapshot `json:"value,omitempty"`

	// READ-ONLY; Link to next page of resources.
	NextLink *string `json:"nextLink,omitempty" azure:"ro"`
}

// MarshalJSON implements the json.Marshaller interface for type SnapshotCollection.
func (s SnapshotCollection) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "nextLink", s.NextLink)
	populate(objectMap, "value", s.Value)
	return json.Marshal(objectMap)
}

// SnapshotProperties - Snapshot resource specific properties
type SnapshotProperties struct {
	// READ-ONLY; The time the snapshot was taken.
	Time *string `json:"time,omitempty" azure:"ro"`
}

// SnapshotRecoverySource - Specifies the web app that snapshot contents will be retrieved from.
type SnapshotRecoverySource struct {
	// ARM resource ID of the source app. /subscriptions/{subId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{siteName} for production
	// slots and
	// /subscriptions/{subId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{siteName}/slots/{slotName} for other slots.
	ID *string `json:"id,omitempty"`

	// Geographical location of the source web app, e.g. SouthEastAsia, SouthCentralUS
	Location *string `json:"location,omitempty"`
}

// SnapshotRestoreRequest - Details about app recovery operation.
type SnapshotRestoreRequest struct {
	ProxyOnlyResource
	// SnapshotRestoreRequest resource specific properties
	Properties *SnapshotRestoreRequestProperties `json:"properties,omitempty"`
}

// MarshalJSON implements the json.Marshaller interface for type SnapshotRestoreRequest.
func (s SnapshotRestoreRequest) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	s.ProxyOnlyResource.marshalInternal(objectMap)
	populate(objectMap, "properties", s.Properties)
	return json.Marshal(objectMap)
}

// SnapshotRestoreRequestProperties - SnapshotRestoreRequest resource specific properties
type SnapshotRestoreRequestProperties struct {
	// REQUIRED; If true the restore operation can overwrite source app; otherwise, false.
	Overwrite *bool `json:"overwrite,omitempty"`

	// If true, custom hostname conflicts will be ignored when recovering to a target web app. This setting is only necessary when RecoverConfiguration is enabled.
	IgnoreConflictingHostNames *bool `json:"ignoreConflictingHostNames,omitempty"`

	// If true, site configuration, in addition to content, will be reverted.
	RecoverConfiguration *bool `json:"recoverConfiguration,omitempty"`

	// Optional. Specifies the web app that snapshot contents will be retrieved from. If empty, the targeted web app will be used as the source.
	RecoverySource *SnapshotRecoverySource `json:"recoverySource,omitempty"`

	// Point in time in which the app restore should be done, formatted as a DateTime string.
	SnapshotTime *string `json:"snapshotTime,omitempty"`

	// If true, the snapshot is retrieved from DRSecondary endpoint.
	UseDRSecondary *bool `json:"useDRSecondary,omitempty"`
}

// Solution - Class Representing Solution for problems detected.
type Solution struct {
	// Solution Data.
	Data [][]*NameValuePair `json:"data,omitempty"`

	// Description of the solution
	Description *string `json:"description,omitempty"`

	// Display Name of the solution
	DisplayName *string `json:"displayName,omitempty"`

	// Solution Id.
	ID *float64 `json:"id,omitempty"`

	// Solution Metadata.
	Metadata [][]*NameValuePair `json:"metadata,omitempty"`

	// Order of the solution.
	Order *float64 `json:"order,omitempty"`

	// Type of Solution
	Type *SolutionType `json:"type,omitempty"`
}

// MarshalJSON implements the json.Marshaller interface for type Solution.
func (s Solution) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "data", s.Data)
	populate(objectMap, "description", s.Description)
	populate(objectMap, "displayName", s.DisplayName)
	populate(objectMap, "id", s.ID)
	populate(objectMap, "metadata", s.Metadata)
	populate(objectMap, "order", s.Order)
	populate(objectMap, "type", s.Type)
	return json.Marshal(objectMap)
}

// SourceControl - The source control OAuth token.
type SourceControl struct {
	ProxyOnlyResource
	// SourceControl resource specific properties
	Properties *SourceControlProperties `json:"properties,omitempty"`
}

// MarshalJSON implements the json.Marshaller interface for type SourceControl.
func (s SourceControl) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	s.ProxyOnlyResource.marshalInternal(objectMap)
	populate(objectMap, "properties", s.Properties)
	return json.Marshal(objectMap)
}

// SourceControlCollection - Collection of source controls.
type SourceControlCollection struct {
	// REQUIRED; Collection of resources.
	Value []*SourceControl `json:"value,omitempty"`

	// READ-ONLY; Link to next page of resources.
	NextLink *string `json:"nextLink,omitempty" azure:"ro"`
}

// MarshalJSON implements the json.Marshaller interface for type SourceControlCollection.
func (s SourceControlCollection) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "nextLink", s.NextLink)
	populate(objectMap, "value", s.Value)
	return json.Marshal(objectMap)
}

// SourceControlProperties - SourceControl resource specific properties
type SourceControlProperties struct {
	// OAuth token expiration.
	ExpirationTime *time.Time `json:"expirationTime,omitempty"`

	// OAuth refresh token.
	RefreshToken *string `json:"refreshToken,omitempty"`

	// OAuth access token.
	Token *string `json:"token,omitempty"`

	// OAuth access token secret.
	TokenSecret *string `json:"tokenSecret,omitempty"`
}

// MarshalJSON implements the json.Marshaller interface for type SourceControlProperties.
func (s SourceControlProperties) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "expirationTime", (*timeRFC3339)(s.ExpirationTime))
	populate(objectMap, "refreshToken", s.RefreshToken)
	populate(objectMap, "token", s.Token)
	populate(objectMap, "tokenSecret", s.TokenSecret)
	return json.Marshal(objectMap)
}

// UnmarshalJSON implements the json.Unmarshaller interface for type SourceControlProperties.
func (s *SourceControlProperties) UnmarshalJSON(data []byte) error {
	var rawMsg map[string]json.RawMessage
	if err := json.Unmarshal(data, &rawMsg); err != nil {
		return err
	}
	for key, val := range rawMsg {
		var err error
		switch key {
		case "expirationTime":
			var aux timeRFC3339
			err = unpopulate(val, &aux)
			s.ExpirationTime = (*time.Time)(&aux)
			delete(rawMsg, key)
		case "refreshToken":
			err = unpopulate(val, &s.RefreshToken)
			delete(rawMsg, key)
		case "token":
			err = unpopulate(val, &s.Token)
			delete(rawMsg, key)
		case "tokenSecret":
			err = unpopulate(val, &s.TokenSecret)
			delete(rawMsg, key)
		}
		if err != nil {
			return err
		}
	}
	return nil
}

// StackMajorVersion - Application stack major version.
type StackMajorVersion struct {
	// Example: All the function apps need AppSetting: "FUNCTIONSWORKERRUNTIME" to be set stack name
	AppSettingsDictionary map[string]map[string]interface{} `json:"appSettingsDictionary,omitempty"`

	// true if this supports Application Insights; otherwise, false.
	ApplicationInsights *bool `json:"applicationInsights,omitempty"`

	// Application stack major version (display only).
	DisplayVersion *string `json:"displayVersion,omitempty"`

	// true if this is the default major version; otherwise, false.
	IsDefault *bool `json:"isDefault,omitempty"`

	// true if this stack has been deprecated, otherwise false.
	IsDeprecated *bool `json:"isDeprecated,omitempty"`

	// true if this stack should be hidden for new customers on portal, otherwise false.
	IsHidden *bool `json:"isHidden,omitempty"`

	// true if this stack is in Preview, otherwise false.
	IsPreview *bool `json:"isPreview,omitempty"`

	// Minor versions associated with the major version.
	MinorVersions []*StackMinorVersion `json:"minorVersions,omitempty"`

	// Application stack major version (runtime only).
	RuntimeVersion *string `json:"runtimeVersion,omitempty"`

	// Example: All Linux Function Apps, need Use32BitWorkerProcess to be set to 0
	SiteConfigPropertiesDictionary map[string]map[string]interface{} `json:"siteConfigPropertiesDictionary,omitempty"`
}

// MarshalJSON implements the json.Marshaller interface for type StackMajorVersion.
func (s StackMajorVersion) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "appSettingsDictionary", s.AppSettingsDictionary)
	populate(objectMap, "applicationInsights", s.ApplicationInsights)
	populate(objectMap, "displayVersion", s.DisplayVersion)
	populate(objectMap, "isDefault", s.IsDefault)
	populate(objectMap, "isDeprecated", s.IsDeprecated)
	populate(objectMap, "isHidden", s.IsHidden)
	populate(objectMap, "isPreview", s.IsPreview)
	populate(objectMap, "minorVersions", s.MinorVersions)
	populate(objectMap, "runtimeVersion", s.RuntimeVersion)
	populate(objectMap, "siteConfigPropertiesDictionary", s.SiteConfigPropertiesDictionary)
	return json.Marshal(objectMap)
}

// StackMinorVersion - Application stack minor version.
type StackMinorVersion struct {
	// Application stack minor version (display only).
	DisplayVersion *string `json:"displayVersion,omitempty"`

	// true if this is the default minor version; otherwise, false.
	IsDefault *bool `json:"isDefault,omitempty"`

	// true if this supports Remote Debugging, otherwise false.
	IsRemoteDebuggingEnabled *bool `json:"isRemoteDebuggingEnabled,omitempty"`

	// Application stack minor version (runtime only).
	RuntimeVersion *string `json:"runtimeVersion,omitempty"`
}

// StampCapacity - Stamp capacity information.
type StampCapacity struct {
	// Available capacity (# of machines, bytes of storage etc…).
	AvailableCapacity *int64 `json:"availableCapacity,omitempty"`

	// Shared/dedicated workers.
	ComputeMode *ComputeModeOptions `json:"computeMode,omitempty"`

	// If true, it includes basic apps. Basic apps are not used for capacity allocation.
	ExcludeFromCapacityAllocation *bool `json:"excludeFromCapacityAllocation,omitempty"`

	// true if capacity is applicable for all apps; otherwise, false.
	IsApplicableForAllComputeModes *bool `json:"isApplicableForAllComputeModes,omitempty"`

	// Is this a linux stamp capacity
	IsLinux *bool `json:"isLinux,omitempty"`

	// Name of the stamp.
	Name *string `json:"name,omitempty"`

	// Shared or Dedicated.
	SiteMode *string `json:"siteMode,omitempty"`

	// Total capacity (# of machines, bytes of storage etc…).
	TotalCapacity *int64 `json:"totalCapacity,omitempty"`

	// Name of the unit.
	Unit *string `json:"unit,omitempty"`

	// Size of the machines.
	WorkerSize *WorkerSizeOptions `json:"workerSize,omitempty"`

	// Size ID of machines: 0 - Small 1 - Medium 2 - Large
	WorkerSizeID *int32 `json:"workerSizeId,omitempty"`
}

// StampCapacityCollection - Collection of stamp capacities.
type StampCapacityCollection struct {
	// REQUIRED; Collection of resources.
	Value []*StampCapacity `json:"value,omitempty"`

	// READ-ONLY; Link to next page of resources.
	NextLink *string `json:"nextLink,omitempty" azure:"ro"`
}

// MarshalJSON implements the json.Marshaller interface for type StampCapacityCollection.
func (s StampCapacityCollection) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "nextLink", s.NextLink)
	populate(objectMap, "value", s.Value)
	return json.Marshal(objectMap)
}

// StaticSite - A static site.
type StaticSite struct {
	// false if config file is locked for this static web app; otherwise, true.
	AllowConfigFileUpdates *bool `json:"allowConfigFileUpdates,omitempty"`

	// The target branch in the repository.
	Branch *string `json:"branch,omitempty"`

	// Build properties to configure on the repository.
	BuildProperties *StaticSiteBuildProperties `json:"buildProperties,omitempty"`

	// A user's github repository token. This is used to setup the Github Actions workflow file and API secrets.
	RepositoryToken *string `json:"repositoryToken,omitempty"`

	// URL for the repository of the static site.
	RepositoryURL *string `json:"repositoryUrl,omitempty"`

	// State indicating whether staging environments are allowed or not allowed for a static web app.
	StagingEnvironmentPolicy *StagingEnvironmentPolicy `json:"stagingEnvironmentPolicy,omitempty"`

	// Template options for generating a new repository.
	TemplateProperties *StaticSiteTemplateOptions `json:"templateProperties,omitempty"`

	// READ-ONLY; The content distribution endpoint for the static site.
	ContentDistributionEndpoint *string `json:"contentDistributionEndpoint,omitempty" azure:"ro"`

	// READ-ONLY; The custom domains associated with this static site.
	CustomDomains []*string `json:"customDomains,omitempty" azure:"ro"`

	// READ-ONLY; The default autogenerated hostname for the static site.
	DefaultHostname *string `json:"defaultHostname,omitempty" azure:"ro"`

	// READ-ONLY; Identity to use for Key Vault Reference authentication.
	KeyVaultReferenceIdentity *string `json:"keyVaultReferenceIdentity,omitempty" azure:"ro"`

	// READ-ONLY; Private endpoint connections
	PrivateEndpointConnections []*ResponseMessageEnvelopeRemotePrivateEndpointConnection `json:"privateEndpointConnections,omitempty" azure:"ro"`

	// READ-ONLY; The provider that submitted the last deployment to the primary environment of the static site.
	Provider *string `json:"provider,omitempty" azure:"ro"`

	// READ-ONLY; User provided function apps registered with the static site
	UserProvidedFunctionApps []*StaticSiteUserProvidedFunctionApp `json:"userProvidedFunctionApps,omitempty" azure:"ro"`
}

// MarshalJSON implements the json.Marshaller interface for type StaticSite.
func (s StaticSite) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "allowConfigFileUpdates", s.AllowConfigFileUpdates)
	populate(objectMap, "branch", s.Branch)
	populate(objectMap, "buildProperties", s.BuildProperties)
	populate(objectMap, "contentDistributionEndpoint", s.ContentDistributionEndpoint)
	populate(objectMap, "customDomains", s.CustomDomains)
	populate(objectMap, "defaultHostname", s.DefaultHostname)
	populate(objectMap, "keyVaultReferenceIdentity", s.KeyVaultReferenceIdentity)
	populate(objectMap, "privateEndpointConnections", s.PrivateEndpointConnections)
	populate(objectMap, "provider", s.Provider)
	populate(objectMap, "repositoryToken", s.RepositoryToken)
	populate(objectMap, "repositoryUrl", s.RepositoryURL)
	populate(objectMap, "stagingEnvironmentPolicy", s.StagingEnvironmentPolicy)
	populate(objectMap, "templateProperties", s.TemplateProperties)
	populate(objectMap, "userProvidedFunctionApps", s.UserProvidedFunctionApps)
	return json.Marshal(objectMap)
}

// StaticSiteARMResource - Static Site ARM resource.
type StaticSiteARMResource struct {
	Resource
	// Managed service identity.
	Identity *ManagedServiceIdentity `json:"identity,omitempty"`

	// Core resource properties
	Properties *StaticSite `json:"properties,omitempty"`

	// Description of a SKU for a scalable resource.
	SKU *SKUDescription `json:"sku,omitempty"`
}

// MarshalJSON implements the json.Marshaller interface for type StaticSiteARMResource.
func (s StaticSiteARMResource) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	s.Resource.marshalInternal(objectMap)
	populate(objectMap, "identity", s.Identity)
	populate(objectMap, "properties", s.Properties)
	populate(objectMap, "sku", s.SKU)
	return json.Marshal(objectMap)
}

// StaticSiteBuildARMResource - Static Site Build ARM resource.
type StaticSiteBuildARMResource struct {
	ProxyOnlyResource
	// StaticSiteBuildARMResource resource specific properties
	Properties *StaticSiteBuildARMResourceProperties `json:"properties,omitempty"`
}

// MarshalJSON implements the json.Marshaller interface for type StaticSiteBuildARMResource.
func (s StaticSiteBuildARMResource) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	s.ProxyOnlyResource.marshalInternal(objectMap)
	populate(objectMap, "properties", s.Properties)
	return json.Marshal(objectMap)
}

// StaticSiteBuildARMResourceProperties - StaticSiteBuildARMResource resource specific properties
type StaticSiteBuildARMResourceProperties struct {
	// READ-ONLY; An identifier for the static site build.
	BuildID *string `json:"buildId,omitempty" azure:"ro"`

	// READ-ONLY; When this build was created.
	CreatedTimeUTC *time.Time `json:"createdTimeUtc,omitempty" azure:"ro"`

	// READ-ONLY; The hostname for a static site build.
	Hostname *string `json:"hostname,omitempty" azure:"ro"`

	// READ-ONLY; When this build was updated.
	LastUpdatedOn *time.Time `json:"lastUpdatedOn,omitempty" azure:"ro"`

	// READ-ONLY; The title of a pull request that a static site build is related to.
	PullRequestTitle *string `json:"pullRequestTitle,omitempty" azure:"ro"`

	// READ-ONLY; The source branch.
	SourceBranch *string `json:"sourceBranch,omitempty" azure:"ro"`

	// READ-ONLY; The status of the static site build.
	Status *BuildStatus `json:"status,omitempty" azure:"ro"`

	// READ-ONLY; User provided function apps registered with the static site build
	UserProvidedFunctionApps []*StaticSiteUserProvidedFunctionApp `json:"userProvidedFunctionApps,omitempty" azure:"ro"`
}

// MarshalJSON implements the json.Marshaller interface for type StaticSiteBuildARMResourceProperties.
func (s StaticSiteBuildARMResourceProperties) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "buildId", s.BuildID)
	populate(objectMap, "createdTimeUtc", (*timeRFC3339)(s.CreatedTimeUTC))
	populate(objectMap, "hostname", s.Hostname)
	populate(objectMap, "lastUpdatedOn", (*timeRFC3339)(s.LastUpdatedOn))
	populate(objectMap, "pullRequestTitle", s.PullRequestTitle)
	populate(objectMap, "sourceBranch", s.SourceBranch)
	populate(objectMap, "status", s.Status)
	populate(objectMap, "userProvidedFunctionApps", s.UserProvidedFunctionApps)
	return json.Marshal(objectMap)
}

// UnmarshalJSON implements the json.Unmarshaller interface for type StaticSiteBuildARMResourceProperties.
func (s *StaticSiteBuildARMResourceProperties) UnmarshalJSON(data []byte) error {
	var rawMsg map[string]json.RawMessage
	if err := json.Unmarshal(data, &rawMsg); err != nil {
		return err
	}
	for key, val := range rawMsg {
		var err error
		switch key {
		case "buildId":
			err = unpopulate(val, &s.BuildID)
			delete(rawMsg, key)
		case "createdTimeUtc":
			var aux timeRFC3339
			err = unpopulate(val, &aux)
			s.CreatedTimeUTC = (*time.Time)(&aux)
			delete(rawMsg, key)
		case "hostname":
			err = unpopulate(val, &s.Hostname)
			delete(rawMsg, key)
		case "lastUpdatedOn":
			var aux timeRFC3339
			err = unpopulate(val, &aux)
			s.LastUpdatedOn = (*time.Time)(&aux)
			delete(rawMsg, key)
		case "pullRequestTitle":
			err = unpopulate(val, &s.PullRequestTitle)
			delete(rawMsg, key)
		case "sourceBranch":
			err = unpopulate(val, &s.SourceBranch)
			delete(rawMsg, key)
		case "status":
			err = unpopulate(val, &s.Status)
			delete(rawMsg, key)
		case "userProvidedFunctionApps":
			err = unpopulate(val, &s.UserProvidedFunctionApps)
			delete(rawMsg, key)
		}
		if err != nil {
			return err
		}
	}
	return nil
}

// StaticSiteBuildCollection - Collection of static site builds.
type StaticSiteBuildCollection struct {
	// REQUIRED; Collection of resources.
	Value []*StaticSiteBuildARMResource `json:"value,omitempty"`

	// READ-ONLY; Link to next page of resources.
	NextLink *string `json:"nextLink,omitempty" azure:"ro"`
}

// MarshalJSON implements the json.Marshaller interface for type StaticSiteBuildCollection.
func (s StaticSiteBuildCollection) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "nextLink", s.NextLink)
	populate(objectMap, "value", s.Value)
	return json.Marshal(objectMap)
}

// StaticSiteBuildProperties - Build properties for the static site.
type StaticSiteBuildProperties struct {
	// A custom command to run during deployment of the Azure Functions API application.
	APIBuildCommand *string `json:"apiBuildCommand,omitempty"`

	// The path to the api code within the repository.
	APILocation *string `json:"apiLocation,omitempty"`

	// Deprecated: The path of the app artifacts after building (deprecated in favor of OutputLocation)
	AppArtifactLocation *string `json:"appArtifactLocation,omitempty"`

	// A custom command to run during deployment of the static content application.
	AppBuildCommand *string `json:"appBuildCommand,omitempty"`

	// The path to the app code within the repository.
	AppLocation *string `json:"appLocation,omitempty"`

	// Github Action secret name override.
	GithubActionSecretNameOverride *string `json:"githubActionSecretNameOverride,omitempty"`

	// The output path of the app after building.
	OutputLocation *string `json:"outputLocation,omitempty"`

	// Skip Github Action workflow generation.
	SkipGithubActionWorkflowGeneration *bool `json:"skipGithubActionWorkflowGeneration,omitempty"`
}

// StaticSiteCollection - Collection of static sites.
type StaticSiteCollection struct {
	// REQUIRED; Collection of resources.
	Value []*StaticSiteARMResource `json:"value,omitempty"`

	// READ-ONLY; Link to next page of resources.
	NextLink *string `json:"nextLink,omitempty" azure:"ro"`
}

// MarshalJSON implements the json.Marshaller interface for type StaticSiteCollection.
func (s StaticSiteCollection) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "nextLink", s.NextLink)
	populate(objectMap, "value", s.Value)
	return json.Marshal(objectMap)
}

// StaticSiteCustomDomainOverviewARMResource - Static Site Custom Domain Overview ARM resource.
type StaticSiteCustomDomainOverviewARMResource struct {
	ProxyOnlyResource
	// StaticSiteCustomDomainOverviewARMResource resource specific properties
	Properties *StaticSiteCustomDomainOverviewARMResourceProperties `json:"properties,omitempty"`
}

// MarshalJSON implements the json.Marshaller interface for type StaticSiteCustomDomainOverviewARMResource.
func (s StaticSiteCustomDomainOverviewARMResource) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	s.ProxyOnlyResource.marshalInternal(objectMap)
	populate(objectMap, "properties", s.Properties)
	return json.Marshal(objectMap)
}

// StaticSiteCustomDomainOverviewARMResourceProperties - StaticSiteCustomDomainOverviewARMResource resource specific properties
type StaticSiteCustomDomainOverviewARMResourceProperties struct {
	// READ-ONLY; The date and time on which the custom domain was created for the static site.
	CreatedOn *time.Time `json:"createdOn,omitempty" azure:"ro"`

	// READ-ONLY; The domain name for the static site custom domain.
	DomainName *string `json:"domainName,omitempty" azure:"ro"`

	// READ-ONLY
	ErrorMessage *string `json:"errorMessage,omitempty" azure:"ro"`

	// READ-ONLY; The status of the custom domain
	Status *CustomDomainStatus `json:"status,omitempty" azure:"ro"`

	// READ-ONLY; The TXT record validation token
	ValidationToken *string `json:"validationToken,omitempty" azure:"ro"`
}

// MarshalJSON implements the json.Marshaller interface for type StaticSiteCustomDomainOverviewARMResourceProperties.
func (s StaticSiteCustomDomainOverviewARMResourceProperties) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "createdOn", (*timeRFC3339)(s.CreatedOn))
	populate(objectMap, "domainName", s.DomainName)
	populate(objectMap, "errorMessage", s.ErrorMessage)
	populate(objectMap, "status", s.Status)
	populate(objectMap, "validationToken", s.ValidationToken)
	return json.Marshal(objectMap)
}

// UnmarshalJSON implements the json.Unmarshaller interface for type StaticSiteCustomDomainOverviewARMResourceProperties.
func (s *StaticSiteCustomDomainOverviewARMResourceProperties) UnmarshalJSON(data []byte) error {
	var rawMsg map[string]json.RawMessage
	if err := json.Unmarshal(data, &rawMsg); err != nil {
		return err
	}
	for key, val := range rawMsg {
		var err error
		switch key {
		case "createdOn":
			var aux timeRFC3339
			err = unpopulate(val, &aux)
			s.CreatedOn = (*time.Time)(&aux)
			delete(rawMsg, key)
		case "domainName":
			err = unpopulate(val, &s.DomainName)
			delete(rawMsg, key)
		case "errorMessage":
			err = unpopulate(val, &s.ErrorMessage)
			delete(rawMsg, key)
		case "status":
			err = unpopulate(val, &s.Status)
			delete(rawMsg, key)
		case "validationToken":
			err = unpopulate(val, &s.ValidationToken)
			delete(rawMsg, key)
		}
		if err != nil {
			return err
		}
	}
	return nil
}

// StaticSiteCustomDomainOverviewCollection - Collection of static site custom domains.
type StaticSiteCustomDomainOverviewCollection struct {
	// REQUIRED; Collection of resources.
	Value []*StaticSiteCustomDomainOverviewARMResource `json:"value,omitempty"`

	// READ-ONLY; Link to next page of resources.
	NextLink *string `json:"nextLink,omitempty" azure:"ro"`
}

// MarshalJSON implements the json.Marshaller interface for type StaticSiteCustomDomainOverviewCollection.
func (s StaticSiteCustomDomainOverviewCollection) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "nextLink", s.NextLink)
	populate(objectMap, "value", s.Value)
	return json.Marshal(objectMap)
}

// StaticSiteCustomDomainRequestPropertiesARMResource - Static Site Custom Domain Request Properties ARM resource.
type StaticSiteCustomDomainRequestPropertiesARMResource struct {
	ProxyOnlyResource
	// StaticSiteCustomDomainRequestPropertiesARMResource resource specific properties
	Properties *StaticSiteCustomDomainRequestPropertiesARMResourceProperties `json:"properties,omitempty"`
}

// MarshalJSON implements the json.Marshaller interface for type StaticSiteCustomDomainRequestPropertiesARMResource.
func (s StaticSiteCustomDomainRequestPropertiesARMResource) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	s.ProxyOnlyResource.marshalInternal(objectMap)
	populate(objectMap, "properties", s.Properties)
	return json.Marshal(objectMap)
}

// StaticSiteCustomDomainRequestPropertiesARMResourceProperties - StaticSiteCustomDomainRequestPropertiesARMResource resource specific properties
type StaticSiteCustomDomainRequestPropertiesARMResourceProperties struct {
	// Validation method for adding a custom domain
	ValidationMethod *string `json:"validationMethod,omitempty"`
}

// StaticSiteFunctionOverviewARMResource - Static Site Function Overview ARM resource.
type StaticSiteFunctionOverviewARMResource struct {
	ProxyOnlyResource
	// StaticSiteFunctionOverviewARMResource resource specific properties
	Properties *StaticSiteFunctionOverviewARMResourceProperties `json:"properties,omitempty"`
}

// MarshalJSON implements the json.Marshaller interface for type StaticSiteFunctionOverviewARMResource.
func (s StaticSiteFunctionOverviewARMResource) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	s.ProxyOnlyResource.marshalInternal(objectMap)
	populate(objectMap, "properties", s.Properties)
	return json.Marshal(objectMap)
}

// StaticSiteFunctionOverviewARMResourceProperties - StaticSiteFunctionOverviewARMResource resource specific properties
type StaticSiteFunctionOverviewARMResourceProperties struct {
	// READ-ONLY; The name for the function
	FunctionName *string `json:"functionName,omitempty" azure:"ro"`

	// READ-ONLY; The trigger type of the function
	TriggerType *TriggerTypes `json:"triggerType,omitempty" azure:"ro"`
}

// StaticSiteFunctionOverviewCollection - Collection of static site functions.
type StaticSiteFunctionOverviewCollection struct {
	// REQUIRED; Collection of resources.
	Value []*StaticSiteFunctionOverviewARMResource `json:"value,omitempty"`

	// READ-ONLY; Link to next page of resources.
	NextLink *string `json:"nextLink,omitempty" azure:"ro"`
}

// MarshalJSON implements the json.Marshaller interface for type StaticSiteFunctionOverviewCollection.
func (s StaticSiteFunctionOverviewCollection) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "nextLink", s.NextLink)
	populate(objectMap, "value", s.Value)
	return json.Marshal(objectMap)
}

// StaticSitePatchResource - ARM resource for a static site when patching
type StaticSitePatchResource struct {
	ProxyOnlyResource
	// Core resource properties
	Properties *StaticSite `json:"properties,omitempty"`
}

// MarshalJSON implements the json.Marshaller interface for type StaticSitePatchResource.
func (s StaticSitePatchResource) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	s.ProxyOnlyResource.marshalInternal(objectMap)
	populate(objectMap, "properties", s.Properties)
	return json.Marshal(objectMap)
}

// StaticSiteResetPropertiesARMResource - Static Site Reset Properties ARM resource.
type StaticSiteResetPropertiesARMResource struct {
	ProxyOnlyResource
	// StaticSiteResetPropertiesARMResource resource specific properties
	Properties *StaticSiteResetPropertiesARMResourceProperties `json:"properties,omitempty"`
}

// MarshalJSON implements the json.Marshaller interface for type StaticSiteResetPropertiesARMResource.
func (s StaticSiteResetPropertiesARMResource) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	s.ProxyOnlyResource.marshalInternal(objectMap)
	populate(objectMap, "properties", s.Properties)
	return json.Marshal(objectMap)
}

// StaticSiteResetPropertiesARMResourceProperties - StaticSiteResetPropertiesARMResource resource specific properties
type StaticSiteResetPropertiesARMResourceProperties struct {
	// The token which proves admin privileges to the repository.
	RepositoryToken *string `json:"repositoryToken,omitempty"`

	// Determines whether the repository should be updated with the new properties.
	ShouldUpdateRepository *bool `json:"shouldUpdateRepository,omitempty"`
}

// StaticSiteTemplateOptions - Template Options for the static site.
type StaticSiteTemplateOptions struct {
	// Description of the newly generated repository.
	Description *string `json:"description,omitempty"`

	// Whether or not the newly generated repository is a private repository. Defaults to false (i.e. public).
	IsPrivate *bool `json:"isPrivate,omitempty"`

	// Owner of the newly generated repository.
	Owner *string `json:"owner,omitempty"`

	// Name of the newly generated repository.
	RepositoryName *string `json:"repositoryName,omitempty"`

	// URL of the template repository. The newly generated repository will be based on this one.
	TemplateRepositoryURL *string `json:"templateRepositoryUrl,omitempty"`
}

// StaticSiteUserARMResource - Static Site User ARM resource.
type StaticSiteUserARMResource struct {
	ProxyOnlyResource
	// StaticSiteUserARMResource resource specific properties
	Properties *StaticSiteUserARMResourceProperties `json:"properties,omitempty"`
}

// MarshalJSON implements the json.Marshaller interface for type StaticSiteUserARMResource.
func (s StaticSiteUserARMResource) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	s.ProxyOnlyResource.marshalInternal(objectMap)
	populate(objectMap, "properties", s.Properties)
	return json.Marshal(objectMap)
}

// StaticSiteUserARMResourceProperties - StaticSiteUserARMResource resource specific properties
type StaticSiteUserARMResourceProperties struct {
	// The roles for the static site user, in free-form string format
	Roles *string `json:"roles,omitempty"`

	// READ-ONLY; The display name for the static site user.
	DisplayName *string `json:"displayName,omitempty" azure:"ro"`

	// READ-ONLY; The identity provider for the static site user.
	Provider *string `json:"provider,omitempty" azure:"ro"`

	// READ-ONLY; The user id for the static site user.
	UserID *string `json:"userId,omitempty" azure:"ro"`
}

// StaticSiteUserCollection - Collection of static site custom users.
type StaticSiteUserCollection struct {
	// REQUIRED; Collection of resources.
	Value []*StaticSiteUserARMResource `json:"value,omitempty"`

	// READ-ONLY; Link to next page of resources.
	NextLink *string `json:"nextLink,omitempty" azure:"ro"`
}

// MarshalJSON implements the json.Marshaller interface for type StaticSiteUserCollection.
func (s StaticSiteUserCollection) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "nextLink", s.NextLink)
	populate(objectMap, "value", s.Value)
	return json.Marshal(objectMap)
}

// StaticSiteUserInvitationRequestResource - Static sites user roles invitation resource.
type StaticSiteUserInvitationRequestResource struct {
	ProxyOnlyResource
	// StaticSiteUserInvitationRequestResource resource specific properties
	Properties *StaticSiteUserInvitationRequestResourceProperties `json:"properties,omitempty"`
}

// MarshalJSON implements the json.Marshaller interface for type StaticSiteUserInvitationRequestResource.
func (s StaticSiteUserInvitationRequestResource) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	s.ProxyOnlyResource.marshalInternal(objectMap)
	populate(objectMap, "properties", s.Properties)
	return json.Marshal(objectMap)
}

// StaticSiteUserInvitationRequestResourceProperties - StaticSiteUserInvitationRequestResource resource specific properties
type StaticSiteUserInvitationRequestResourceProperties struct {
	// The domain name for the static site custom domain.
	Domain *string `json:"domain,omitempty"`

	// The number of hours the sas token stays valid
	NumHoursToExpiration *int32 `json:"numHoursToExpiration,omitempty"`

	// The identity provider for the static site user.
	Provider *string `json:"provider,omitempty"`

	// The roles for the static site user, in free-form string format
	Roles *string `json:"roles,omitempty"`

	// The user id for the static site user.
	UserDetails *string `json:"userDetails,omitempty"`
}

// StaticSiteUserInvitationResponseResource - Static sites user roles invitation link resource.
type StaticSiteUserInvitationResponseResource struct {
	ProxyOnlyResource
	// StaticSiteUserInvitationResponseResource resource specific properties
	Properties *StaticSiteUserInvitationResponseResourceProperties `json:"properties,omitempty"`
}

// MarshalJSON implements the json.Marshaller interface for type StaticSiteUserInvitationResponseResource.
func (s StaticSiteUserInvitationResponseResource) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	s.ProxyOnlyResource.marshalInternal(objectMap)
	populate(objectMap, "properties", s.Properties)
	return json.Marshal(objectMap)
}

// StaticSiteUserInvitationResponseResourceProperties - StaticSiteUserInvitationResponseResource resource specific properties
type StaticSiteUserInvitationResponseResourceProperties struct {
	// READ-ONLY; The expiration time of the invitation
	ExpiresOn *time.Time `json:"expiresOn,omitempty" azure:"ro"`

	// READ-ONLY; The url for the invitation link
	InvitationURL *string `json:"invitationUrl,omitempty" azure:"ro"`
}

// MarshalJSON implements the json.Marshaller interface for type StaticSiteUserInvitationResponseResourceProperties.
func (s StaticSiteUserInvitationResponseResourceProperties) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "expiresOn", (*timeRFC3339)(s.ExpiresOn))
	populate(objectMap, "invitationUrl", s.InvitationURL)
	return json.Marshal(objectMap)
}

// UnmarshalJSON implements the json.Unmarshaller interface for type StaticSiteUserInvitationResponseResourceProperties.
func (s *StaticSiteUserInvitationResponseResourceProperties) UnmarshalJSON(data []byte) error {
	var rawMsg map[string]json.RawMessage
	if err := json.Unmarshal(data, &rawMsg); err != nil {
		return err
	}
	for key, val := range rawMsg {
		var err error
		switch key {
		case "expiresOn":
			var aux timeRFC3339
			err = unpopulate(val, &aux)
			s.ExpiresOn = (*time.Time)(&aux)
			delete(rawMsg, key)
		case "invitationUrl":
			err = unpopulate(val, &s.InvitationURL)
			delete(rawMsg, key)
		}
		if err != nil {
			return err
		}
	}
	return nil
}

// StaticSiteUserProvidedFunctionApp - A static site user provided function.
type StaticSiteUserProvidedFunctionApp struct {
	ProxyOnlyResource
	// StaticSiteUserProvidedFunctionApp resource specific properties
	Properties *StaticSiteUserProvidedFunctionAppProperties `json:"properties,omitempty"`
}

// MarshalJSON implements the json.Marshaller interface for type StaticSiteUserProvidedFunctionApp.
func (s StaticSiteUserProvidedFunctionApp) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	s.ProxyOnlyResource.marshalInternal(objectMap)
	populate(objectMap, "properties", s.Properties)
	return json.Marshal(objectMap)
}

// StaticSiteUserProvidedFunctionAppARMResource - Static Site User Provided Function App ARM resource.
type StaticSiteUserProvidedFunctionAppARMResource struct {
	ProxyOnlyResource
	// StaticSiteUserProvidedFunctionAppARMResource resource specific properties
	Properties *StaticSiteUserProvidedFunctionAppARMResourceProperties `json:"properties,omitempty"`
}

// MarshalJSON implements the json.Marshaller interface for type StaticSiteUserProvidedFunctionAppARMResource.
func (s StaticSiteUserProvidedFunctionAppARMResource) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	s.ProxyOnlyResource.marshalInternal(objectMap)
	populate(objectMap, "properties", s.Properties)
	return json.Marshal(objectMap)
}

// StaticSiteUserProvidedFunctionAppARMResourceProperties - StaticSiteUserProvidedFunctionAppARMResource resource specific properties
type StaticSiteUserProvidedFunctionAppARMResourceProperties struct {
	// The region of the function app registered with the static site
	FunctionAppRegion *string `json:"functionAppRegion,omitempty"`

	// The resource id of the function app registered with the static site
	FunctionAppResourceID *string `json:"functionAppResourceId,omitempty"`

	// READ-ONLY; The date and time on which the function app was registered with the static site.
	CreatedOn *time.Time `json:"createdOn,omitempty" azure:"ro"`
}

// MarshalJSON implements the json.Marshaller interface for type StaticSiteUserProvidedFunctionAppARMResourceProperties.
func (s StaticSiteUserProvidedFunctionAppARMResourceProperties) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "createdOn", (*timeRFC3339)(s.CreatedOn))
	populate(objectMap, "functionAppRegion", s.FunctionAppRegion)
	populate(objectMap, "functionAppResourceId", s.FunctionAppResourceID)
	return json.Marshal(objectMap)
}

// UnmarshalJSON implements the json.Unmarshaller interface for type StaticSiteUserProvidedFunctionAppARMResourceProperties.
func (s *StaticSiteUserProvidedFunctionAppARMResourceProperties) UnmarshalJSON(data []byte) error {
	var rawMsg map[string]json.RawMessage
	if err := json.Unmarshal(data, &rawMsg); err != nil {
		return err
	}
	for key, val := range rawMsg {
		var err error
		switch key {
		case "createdOn":
			var aux timeRFC3339
			err = unpopulate(val, &aux)
			s.CreatedOn = (*time.Time)(&aux)
			delete(rawMsg, key)
		case "functionAppRegion":
			err = unpopulate(val, &s.FunctionAppRegion)
			delete(rawMsg, key)
		case "functionAppResourceId":
			err = unpopulate(val, &s.FunctionAppResourceID)
			delete(rawMsg, key)
		}
		if err != nil {
			return err
		}
	}
	return nil
}

// StaticSiteUserProvidedFunctionAppProperties - StaticSiteUserProvidedFunctionApp resource specific properties
type StaticSiteUserProvidedFunctionAppProperties struct {
	// The region of the function app registered with the static site
	FunctionAppRegion *string `json:"functionAppRegion,omitempty"`

	// The resource id of the function app registered with the static site
	FunctionAppResourceID *string `json:"functionAppResourceId,omitempty"`

	// READ-ONLY; The date and time on which the function app was registered with the static site.
	CreatedOn *time.Time `json:"createdOn,omitempty" azure:"ro"`
}

// MarshalJSON implements the json.Marshaller interface for type StaticSiteUserProvidedFunctionAppProperties.
func (s StaticSiteUserProvidedFunctionAppProperties) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "createdOn", (*timeRFC3339)(s.CreatedOn))
	populate(objectMap, "functionAppRegion", s.FunctionAppRegion)
	populate(objectMap, "functionAppResourceId", s.FunctionAppResourceID)
	return json.Marshal(objectMap)
}

// UnmarshalJSON implements the json.Unmarshaller interface for type StaticSiteUserProvidedFunctionAppProperties.
func (s *StaticSiteUserProvidedFunctionAppProperties) UnmarshalJSON(data []byte) error {
	var rawMsg map[string]json.RawMessage
	if err := json.Unmarshal(data, &rawMsg); err != nil {
		return err
	}
	for key, val := range rawMsg {
		var err error
		switch key {
		case "createdOn":
			var aux timeRFC3339
			err = unpopulate(val, &aux)
			s.CreatedOn = (*time.Time)(&aux)
			delete(rawMsg, key)
		case "functionAppRegion":
			err = unpopulate(val, &s.FunctionAppRegion)
			delete(rawMsg, key)
		case "functionAppResourceId":
			err = unpopulate(val, &s.FunctionAppResourceID)
			delete(rawMsg, key)
		}
		if err != nil {
			return err
		}
	}
	return nil
}

// StaticSiteUserProvidedFunctionAppsCollection - Collection of static site user provided function apps.
type StaticSiteUserProvidedFunctionAppsCollection struct {
	// REQUIRED; Collection of resources.
	Value []*StaticSiteUserProvidedFunctionAppARMResource `json:"value,omitempty"`

	// READ-ONLY; Link to next page of resources.
	NextLink *string `json:"nextLink,omitempty" azure:"ro"`
}

// MarshalJSON implements the json.Marshaller interface for type StaticSiteUserProvidedFunctionAppsCollection.
func (s StaticSiteUserProvidedFunctionAppsCollection) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "nextLink", s.NextLink)
	populate(objectMap, "value", s.Value)
	return json.Marshal(objectMap)
}

// StaticSiteZipDeployment - A static site zip deployment.
type StaticSiteZipDeployment struct {
	// URL for the zipped api content
	APIZipURL *string `json:"apiZipUrl,omitempty"`

	// URL for the zipped app content
	AppZipURL *string `json:"appZipUrl,omitempty"`

	// A title to label the deployment
	DeploymentTitle *string `json:"deploymentTitle,omitempty"`

	// The language of the api content, if it exists
	FunctionLanguage *string `json:"functionLanguage,omitempty"`

	// The provider submitting this deployment
	Provider *string `json:"provider,omitempty"`
}

// StaticSiteZipDeploymentARMResource - Static site zip deployment ARM resource.
type StaticSiteZipDeploymentARMResource struct {
	ProxyOnlyResource
	// Core resource properties
	Properties *StaticSiteZipDeployment `json:"properties,omitempty"`
}

// MarshalJSON implements the json.Marshaller interface for type StaticSiteZipDeploymentARMResource.
func (s StaticSiteZipDeploymentARMResource) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	s.ProxyOnlyResource.marshalInternal(objectMap)
	populate(objectMap, "properties", s.Properties)
	return json.Marshal(objectMap)
}

// StaticSitesBeginApproveOrRejectPrivateEndpointConnectionOptions contains the optional parameters for the StaticSites.BeginApproveOrRejectPrivateEndpointConnection
// method.
type StaticSitesBeginApproveOrRejectPrivateEndpointConnectionOptions struct {
	// placeholder for future optional parameters
}

// StaticSitesBeginCreateOrUpdateStaticSiteCustomDomainOptions contains the optional parameters for the StaticSites.BeginCreateOrUpdateStaticSiteCustomDomain
// method.
type StaticSitesBeginCreateOrUpdateStaticSiteCustomDomainOptions struct {
	// placeholder for future optional parameters
}

// StaticSitesBeginCreateOrUpdateStaticSiteOptions contains the optional parameters for the StaticSites.BeginCreateOrUpdateStaticSite method.
type StaticSitesBeginCreateOrUpdateStaticSiteOptions struct {
	// placeholder for future optional parameters
}

// StaticSitesBeginCreateZipDeploymentForStaticSiteBuildOptions contains the optional parameters for the StaticSites.BeginCreateZipDeploymentForStaticSiteBuild
// method.
type StaticSitesBeginCreateZipDeploymentForStaticSiteBuildOptions struct {
	// placeholder for future optional parameters
}

// StaticSitesBeginCreateZipDeploymentForStaticSiteOptions contains the optional parameters for the StaticSites.BeginCreateZipDeploymentForStaticSite method.
type StaticSitesBeginCreateZipDeploymentForStaticSiteOptions struct {
	// placeholder for future optional parameters
}

// StaticSitesBeginDeletePrivateEndpointConnectionOptions contains the optional parameters for the StaticSites.BeginDeletePrivateEndpointConnection method.
type StaticSitesBeginDeletePrivateEndpointConnectionOptions struct {
	// placeholder for future optional parameters
}

// StaticSitesBeginDeleteStaticSiteBuildOptions contains the optional parameters for the StaticSites.BeginDeleteStaticSiteBuild method.
type StaticSitesBeginDeleteStaticSiteBuildOptions struct {
	// placeholder for future optional parameters
}

// StaticSitesBeginDeleteStaticSiteCustomDomainOptions contains the optional parameters for the StaticSites.BeginDeleteStaticSiteCustomDomain method.
type StaticSitesBeginDeleteStaticSiteCustomDomainOptions struct {
	// placeholder for future optional parameters
}

// StaticSitesBeginDeleteStaticSiteOptions contains the optional parameters for the StaticSites.BeginDeleteStaticSite method.
type StaticSitesBeginDeleteStaticSiteOptions struct {
	// placeholder for future optional parameters
}

// StaticSitesBeginDetachStaticSiteOptions contains the optional parameters for the StaticSites.BeginDetachStaticSite method.
type StaticSitesBeginDetachStaticSiteOptions struct {
	// placeholder for future optional parameters
}

// StaticSitesBeginRegisterUserProvidedFunctionAppWithStaticSiteBuildOptions contains the optional parameters for the StaticSites.BeginRegisterUserProvidedFunctionAppWithStaticSiteBuild
// method.
type StaticSitesBeginRegisterUserProvidedFunctionAppWithStaticSiteBuildOptions struct {
	// Specify <code>true</code> to force the update of the auth configuration on the function app even if an AzureStaticWebApps provider is already configured
	// on the function app. The default is <code>false</code>.
	IsForced *bool
}

// StaticSitesBeginRegisterUserProvidedFunctionAppWithStaticSiteOptions contains the optional parameters for the StaticSites.BeginRegisterUserProvidedFunctionAppWithStaticSite
// method.
type StaticSitesBeginRegisterUserProvidedFunctionAppWithStaticSiteOptions struct {
	// Specify <code>true</code> to force the update of the auth configuration on the function app even if an AzureStaticWebApps provider is already configured
	// on the function app. The default is <code>false</code>.
	IsForced *bool
}

// StaticSitesBeginValidateCustomDomainCanBeAddedToStaticSiteOptions contains the optional parameters for the StaticSites.BeginValidateCustomDomainCanBeAddedToStaticSite
// method.
type StaticSitesBeginValidateCustomDomainCanBeAddedToStaticSiteOptions struct {
	// placeholder for future optional parameters
}

// StaticSitesCreateOrUpdateStaticSiteAppSettingsOptions contains the optional parameters for the StaticSites.CreateOrUpdateStaticSiteAppSettings method.
type StaticSitesCreateOrUpdateStaticSiteAppSettingsOptions struct {
	// placeholder for future optional parameters
}

// StaticSitesCreateOrUpdateStaticSiteBuildAppSettingsOptions contains the optional parameters for the StaticSites.CreateOrUpdateStaticSiteBuildAppSettings
// method.
type StaticSitesCreateOrUpdateStaticSiteBuildAppSettingsOptions struct {
	// placeholder for future optional parameters
}

// StaticSitesCreateOrUpdateStaticSiteBuildFunctionAppSettingsOptions contains the optional parameters for the StaticSites.CreateOrUpdateStaticSiteBuildFunctionAppSettings
// method.
type StaticSitesCreateOrUpdateStaticSiteBuildFunctionAppSettingsOptions struct {
	// placeholder for future optional parameters
}

// StaticSitesCreateOrUpdateStaticSiteFunctionAppSettingsOptions contains the optional parameters for the StaticSites.CreateOrUpdateStaticSiteFunctionAppSettings
// method.
type StaticSitesCreateOrUpdateStaticSiteFunctionAppSettingsOptions struct {
	// placeholder for future optional parameters
}

// StaticSitesCreateUserRolesInvitationLinkOptions contains the optional parameters for the StaticSites.CreateUserRolesInvitationLink method.
type StaticSitesCreateUserRolesInvitationLinkOptions struct {
	// placeholder for future optional parameters
}

// StaticSitesDeleteStaticSiteUserOptions contains the optional parameters for the StaticSites.DeleteStaticSiteUser method.
type StaticSitesDeleteStaticSiteUserOptions struct {
	// placeholder for future optional parameters
}

// StaticSitesDetachUserProvidedFunctionAppFromStaticSiteBuildOptions contains the optional parameters for the StaticSites.DetachUserProvidedFunctionAppFromStaticSiteBuild
// method.
type StaticSitesDetachUserProvidedFunctionAppFromStaticSiteBuildOptions struct {
	// placeholder for future optional parameters
}

// StaticSitesDetachUserProvidedFunctionAppFromStaticSiteOptions contains the optional parameters for the StaticSites.DetachUserProvidedFunctionAppFromStaticSite
// method.
type StaticSitesDetachUserProvidedFunctionAppFromStaticSiteOptions struct {
	// placeholder for future optional parameters
}

// StaticSitesGetPrivateEndpointConnectionListOptions contains the optional parameters for the StaticSites.GetPrivateEndpointConnectionList method.
type StaticSitesGetPrivateEndpointConnectionListOptions struct {
	// placeholder for future optional parameters
}

// StaticSitesGetPrivateEndpointConnectionOptions contains the optional parameters for the StaticSites.GetPrivateEndpointConnection method.
type StaticSitesGetPrivateEndpointConnectionOptions struct {
	// placeholder for future optional parameters
}

// StaticSitesGetPrivateLinkResourcesOptions contains the optional parameters for the StaticSites.GetPrivateLinkResources method.
type StaticSitesGetPrivateLinkResourcesOptions struct {
	// placeholder for future optional parameters
}

// StaticSitesGetStaticSiteBuildOptions contains the optional parameters for the StaticSites.GetStaticSiteBuild method.
type StaticSitesGetStaticSiteBuildOptions struct {
	// placeholder for future optional parameters
}

// StaticSitesGetStaticSiteBuildsOptions contains the optional parameters for the StaticSites.GetStaticSiteBuilds method.
type StaticSitesGetStaticSiteBuildsOptions struct {
	// placeholder for future optional parameters
}

// StaticSitesGetStaticSiteCustomDomainOptions contains the optional parameters for the StaticSites.GetStaticSiteCustomDomain method.
type StaticSitesGetStaticSiteCustomDomainOptions struct {
	// placeholder for future optional parameters
}

// StaticSitesGetStaticSiteOptions contains the optional parameters for the StaticSites.GetStaticSite method.
type StaticSitesGetStaticSiteOptions struct {
	// placeholder for future optional parameters
}

// StaticSitesGetStaticSitesByResourceGroupOptions contains the optional parameters for the StaticSites.GetStaticSitesByResourceGroup method.
type StaticSitesGetStaticSitesByResourceGroupOptions struct {
	// placeholder for future optional parameters
}

// StaticSitesGetUserProvidedFunctionAppForStaticSiteBuildOptions contains the optional parameters for the StaticSites.GetUserProvidedFunctionAppForStaticSiteBuild
// method.
type StaticSitesGetUserProvidedFunctionAppForStaticSiteBuildOptions struct {
	// placeholder for future optional parameters
}

// StaticSitesGetUserProvidedFunctionAppForStaticSiteOptions contains the optional parameters for the StaticSites.GetUserProvidedFunctionAppForStaticSite
// method.
type StaticSitesGetUserProvidedFunctionAppForStaticSiteOptions struct {
	// placeholder for future optional parameters
}

// StaticSitesGetUserProvidedFunctionAppsForStaticSiteBuildOptions contains the optional parameters for the StaticSites.GetUserProvidedFunctionAppsForStaticSiteBuild
// method.
type StaticSitesGetUserProvidedFunctionAppsForStaticSiteBuildOptions struct {
	// placeholder for future optional parameters
}

// StaticSitesGetUserProvidedFunctionAppsForStaticSiteOptions contains the optional parameters for the StaticSites.GetUserProvidedFunctionAppsForStaticSite
// method.
type StaticSitesGetUserProvidedFunctionAppsForStaticSiteOptions struct {
	// placeholder for future optional parameters
}

// StaticSitesListOptions contains the optional parameters for the StaticSites.List method.
type StaticSitesListOptions struct {
	// placeholder for future optional parameters
}

// StaticSitesListStaticSiteAppSettingsOptions contains the optional parameters for the StaticSites.ListStaticSiteAppSettings method.
type StaticSitesListStaticSiteAppSettingsOptions struct {
	// placeholder for future optional parameters
}

// StaticSitesListStaticSiteBuildAppSettingsOptions contains the optional parameters for the StaticSites.ListStaticSiteBuildAppSettings method.
type StaticSitesListStaticSiteBuildAppSettingsOptions struct {
	// placeholder for future optional parameters
}

// StaticSitesListStaticSiteBuildFunctionAppSettingsOptions contains the optional parameters for the StaticSites.ListStaticSiteBuildFunctionAppSettings
// method.
type StaticSitesListStaticSiteBuildFunctionAppSettingsOptions struct {
	// placeholder for future optional parameters
}

// StaticSitesListStaticSiteBuildFunctionsOptions contains the optional parameters for the StaticSites.ListStaticSiteBuildFunctions method.
type StaticSitesListStaticSiteBuildFunctionsOptions struct {
	// placeholder for future optional parameters
}

// StaticSitesListStaticSiteConfiguredRolesOptions contains the optional parameters for the StaticSites.ListStaticSiteConfiguredRoles method.
type StaticSitesListStaticSiteConfiguredRolesOptions struct {
	// placeholder for future optional parameters
}

// StaticSitesListStaticSiteCustomDomainsOptions contains the optional parameters for the StaticSites.ListStaticSiteCustomDomains method.
type StaticSitesListStaticSiteCustomDomainsOptions struct {
	// placeholder for future optional parameters
}

// StaticSitesListStaticSiteFunctionAppSettingsOptions contains the optional parameters for the StaticSites.ListStaticSiteFunctionAppSettings method.
type StaticSitesListStaticSiteFunctionAppSettingsOptions struct {
	// placeholder for future optional parameters
}

// StaticSitesListStaticSiteFunctionsOptions contains the optional parameters for the StaticSites.ListStaticSiteFunctions method.
type StaticSitesListStaticSiteFunctionsOptions struct {
	// placeholder for future optional parameters
}

// StaticSitesListStaticSiteSecretsOptions contains the optional parameters for the StaticSites.ListStaticSiteSecrets method.
type StaticSitesListStaticSiteSecretsOptions struct {
	// placeholder for future optional parameters
}

// StaticSitesListStaticSiteUsersOptions contains the optional parameters for the StaticSites.ListStaticSiteUsers method.
type StaticSitesListStaticSiteUsersOptions struct {
	// placeholder for future optional parameters
}

// StaticSitesPreviewWorkflowOptions contains the optional parameters for the StaticSites.PreviewWorkflow method.
type StaticSitesPreviewWorkflowOptions struct {
	// placeholder for future optional parameters
}

// StaticSitesResetStaticSiteAPIKeyOptions contains the optional parameters for the StaticSites.ResetStaticSiteAPIKey method.
type StaticSitesResetStaticSiteAPIKeyOptions struct {
	// placeholder for future optional parameters
}

// StaticSitesUpdateStaticSiteOptions contains the optional parameters for the StaticSites.UpdateStaticSite method.
type StaticSitesUpdateStaticSiteOptions struct {
	// placeholder for future optional parameters
}

// StaticSitesUpdateStaticSiteUserOptions contains the optional parameters for the StaticSites.UpdateStaticSiteUser method.
type StaticSitesUpdateStaticSiteUserOptions struct {
	// placeholder for future optional parameters
}

// StaticSitesWorkflowPreview - Preview for the Static Site Workflow to be generated
type StaticSitesWorkflowPreview struct {
	ProxyOnlyResource
	// StaticSitesWorkflowPreview resource specific properties
	Properties *StaticSitesWorkflowPreviewProperties `json:"properties,omitempty"`
}

// MarshalJSON implements the json.Marshaller interface for type StaticSitesWorkflowPreview.
func (s StaticSitesWorkflowPreview) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	s.ProxyOnlyResource.marshalInternal(objectMap)
	populate(objectMap, "properties", s.Properties)
	return json.Marshal(objectMap)
}

// StaticSitesWorkflowPreviewProperties - StaticSitesWorkflowPreview resource specific properties
type StaticSitesWorkflowPreviewProperties struct {
	// READ-ONLY; The contents for the workflow file to be generated
	Contents *string `json:"contents,omitempty" azure:"ro"`

	// READ-ONLY; The path for the workflow file to be generated
	Path *string `json:"path,omitempty" azure:"ro"`
}

// StaticSitesWorkflowPreviewRequest - Request entity for previewing the Static Site workflow
type StaticSitesWorkflowPreviewRequest struct {
	ProxyOnlyResource
	// StaticSitesWorkflowPreviewRequest resource specific properties
	Properties *StaticSitesWorkflowPreviewRequestProperties `json:"properties,omitempty"`
}

// MarshalJSON implements the json.Marshaller interface for type StaticSitesWorkflowPreviewRequest.
func (s StaticSitesWorkflowPreviewRequest) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	s.ProxyOnlyResource.marshalInternal(objectMap)
	populate(objectMap, "properties", s.Properties)
	return json.Marshal(objectMap)
}

// StaticSitesWorkflowPreviewRequestProperties - StaticSitesWorkflowPreviewRequest resource specific properties
type StaticSitesWorkflowPreviewRequestProperties struct {
	// The target branch in the repository.
	Branch *string `json:"branch,omitempty"`

	// Build properties to configure on the repository.
	BuildProperties *StaticSiteBuildProperties `json:"buildProperties,omitempty"`

	// URL for the repository of the static site.
	RepositoryURL *string `json:"repositoryUrl,omitempty"`
}

// Status - Identify the status of the most severe insight generated by the detector.
type Status struct {
	// Descriptive message.
	Message *string `json:"message,omitempty"`

	// Level of the most severe insight generated by the detector.
	StatusID *InsightStatus `json:"statusId,omitempty"`
}

// StatusCodesBasedTrigger - Trigger based on status code.
type StatusCodesBasedTrigger struct {
	// Request Count.
	Count *int32 `json:"count,omitempty"`

	// Request Path
	Path *string `json:"path,omitempty"`

	// HTTP status code.
	Status *int32 `json:"status,omitempty"`

	// Request Sub Status.
	SubStatus *int32 `json:"subStatus,omitempty"`

	// Time interval.
	TimeInterval *string `json:"timeInterval,omitempty"`

	// Win32 error code.
	Win32Status *int32 `json:"win32Status,omitempty"`
}

// StatusCodesRangeBasedTrigger - Trigger based on range of status codes.
type StatusCodesRangeBasedTrigger struct {
	// Request Count.
	Count *int32  `json:"count,omitempty"`
	Path  *string `json:"path,omitempty"`

	// HTTP status code.
	StatusCodes *string `json:"statusCodes,omitempty"`

	// Time interval.
	TimeInterval *string `json:"timeInterval,omitempty"`
}

// StorageMigrationOptions - Options for app content migration.
type StorageMigrationOptions struct {
	ProxyOnlyResource
	// StorageMigrationOptions resource specific properties
	Properties *StorageMigrationOptionsProperties `json:"properties,omitempty"`
}

// MarshalJSON implements the json.Marshaller interface for type StorageMigrationOptions.
func (s StorageMigrationOptions) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	s.ProxyOnlyResource.marshalInternal(objectMap)
	populate(objectMap, "properties", s.Properties)
	return json.Marshal(objectMap)
}

// StorageMigrationOptionsProperties - StorageMigrationOptions resource specific properties
type StorageMigrationOptionsProperties struct {
	// REQUIRED; AzureFiles connection string.
	AzurefilesConnectionString *string `json:"azurefilesConnectionString,omitempty"`

	// REQUIRED; AzureFiles share.
	AzurefilesShare *string `json:"azurefilesShare,omitempty"`

	// true if the app should be read only during copy operation; otherwise, false.
	BlockWriteAccessToSite *bool `json:"blockWriteAccessToSite,omitempty"`

	// trueif the app should be switched over; otherwise, false.
	SwitchSiteAfterMigration *bool `json:"switchSiteAfterMigration,omitempty"`
}

// StorageMigrationResponse - Response for a migration of app content request.
type StorageMigrationResponse struct {
	ProxyOnlyResource
	// StorageMigrationResponse resource specific properties
	Properties *StorageMigrationResponseProperties `json:"properties,omitempty"`
}

// MarshalJSON implements the json.Marshaller interface for type StorageMigrationResponse.
func (s StorageMigrationResponse) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	s.ProxyOnlyResource.marshalInternal(objectMap)
	populate(objectMap, "properties", s.Properties)
	return json.Marshal(objectMap)
}

// StorageMigrationResponseProperties - StorageMigrationResponse resource specific properties
type StorageMigrationResponseProperties struct {
	// READ-ONLY; When server starts the migration process, it will return an operation ID identifying that particular migration operation.
	OperationID *string `json:"operationId,omitempty" azure:"ro"`
}

// StringDictionary - String dictionary resource.
type StringDictionary struct {
	ProxyOnlyResource
	// Settings.
	Properties map[string]*string `json:"properties,omitempty"`
}

// MarshalJSON implements the json.Marshaller interface for type StringDictionary.
func (s StringDictionary) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	s.ProxyOnlyResource.marshalInternal(objectMap)
	populate(objectMap, "properties", s.Properties)
	return json.Marshal(objectMap)
}

// StringList - String list resource.
type StringList struct {
	ProxyOnlyResource
	// List of string resources.
	Properties []*string `json:"properties,omitempty"`
}

// MarshalJSON implements the json.Marshaller interface for type StringList.
func (s StringList) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	s.ProxyOnlyResource.marshalInternal(objectMap)
	populate(objectMap, "properties", s.Properties)
	return json.Marshal(objectMap)
}

// SupportTopic - Defines a unique Support Topic
type SupportTopic struct {
	// READ-ONLY; Support Topic Id
	ID *string `json:"id,omitempty" azure:"ro"`

	// READ-ONLY; Unique resource Id
	PesID *string `json:"pesId,omitempty" azure:"ro"`
}

// SwiftVirtualNetwork - Swift Virtual Network Contract. This is used to enable the new Swift way of doing virtual network integration.
type SwiftVirtualNetwork struct {
	ProxyOnlyResource
	// SwiftVirtualNetwork resource specific properties
	Properties *SwiftVirtualNetworkProperties `json:"properties,omitempty"`
}

// MarshalJSON implements the json.Marshaller interface for type SwiftVirtualNetwork.
func (s SwiftVirtualNetwork) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	s.ProxyOnlyResource.marshalInternal(objectMap)
	populate(objectMap, "properties", s.Properties)
	return json.Marshal(objectMap)
}

// SwiftVirtualNetworkProperties - SwiftVirtualNetwork resource specific properties
type SwiftVirtualNetworkProperties struct {
	// The Virtual Network subnet's resource ID. This is the subnet that this Web App will join. This subnet must have a delegation to Microsoft.Web/serverFarms
	// defined first.
	SubnetResourceID *string `json:"subnetResourceId,omitempty"`

	// A flag that specifies if the scale unit this Web App is on supports Swift integration.
	SwiftSupported *bool `json:"swiftSupported,omitempty"`
}

// TldLegalAgreement - Legal agreement for a top level domain.
type TldLegalAgreement struct {
	// REQUIRED; Unique identifier for the agreement.
	AgreementKey *string `json:"agreementKey,omitempty"`

	// REQUIRED; Agreement details.
	Content *string `json:"content,omitempty"`

	// REQUIRED; Agreement title.
	Title *string `json:"title,omitempty"`

	// URL where a copy of the agreement details is hosted.
	URL *string `json:"url,omitempty"`
}

// TldLegalAgreementCollection - Collection of top-level domain legal agreements.
type TldLegalAgreementCollection struct {
	// REQUIRED; Collection of resources.
	Value []*TldLegalAgreement `json:"value,omitempty"`

	// READ-ONLY; Link to next page of resources.
	NextLink *string `json:"nextLink,omitempty" azure:"ro"`
}

// MarshalJSON implements the json.Marshaller interface for type TldLegalAgreementCollection.
func (t TldLegalAgreementCollection) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "nextLink", t.NextLink)
	populate(objectMap, "value", t.Value)
	return json.Marshal(objectMap)
}

// TokenStore - The configuration settings of the token store.
type TokenStore struct {
	// The configuration settings of the storage of the tokens if blob storage is used.
	AzureBlobStorage *BlobStorageTokenStore `json:"azureBlobStorage,omitempty"`

	// true to durably store platform-specific security tokens that are obtained during login flows; otherwise, false. The default is false.
	Enabled *bool `json:"enabled,omitempty"`

	// The configuration settings of the storage of the tokens if a file system is used.
	FileSystem *FileSystemTokenStore `json:"fileSystem,omitempty"`

	// The number of hours after session token expiration that a session token can be used to call the token refresh API. The default is 72 hours.
	TokenRefreshExtensionHours *float64 `json:"tokenRefreshExtensionHours,omitempty"`
}

// TopLevelDomain - A top level domain object.
type TopLevelDomain struct {
	ProxyOnlyResource
	// TopLevelDomain resource specific properties
	Properties *TopLevelDomainProperties `json:"properties,omitempty"`
}

// MarshalJSON implements the json.Marshaller interface for type TopLevelDomain.
func (t TopLevelDomain) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	t.ProxyOnlyResource.marshalInternal(objectMap)
	populate(objectMap, "properties", t.Properties)
	return json.Marshal(objectMap)
}

// TopLevelDomainAgreementOption - Options for retrieving the list of top level domain legal agreements.
type TopLevelDomainAgreementOption struct {
	// If true, then the list of agreements will include agreements for domain transfer as well; otherwise, false.
	ForTransfer *bool `json:"forTransfer,omitempty"`

	// If true, then the list of agreements will include agreements for domain privacy as well; otherwise, false.
	IncludePrivacy *bool `json:"includePrivacy,omitempty"`
}

// TopLevelDomainCollection - Collection of Top-level domains.
type TopLevelDomainCollection struct {
	// REQUIRED; Collection of resources.
	Value []*TopLevelDomain `json:"value,omitempty"`

	// READ-ONLY; Link to next page of resources.
	NextLink *string `json:"nextLink,omitempty" azure:"ro"`
}

// MarshalJSON implements the json.Marshaller interface for type TopLevelDomainCollection.
func (t TopLevelDomainCollection) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "nextLink", t.NextLink)
	populate(objectMap, "value", t.Value)
	return json.Marshal(objectMap)
}

// TopLevelDomainProperties - TopLevelDomain resource specific properties
type TopLevelDomainProperties struct {
	// If true, then the top level domain supports domain privacy; otherwise, false.
	Privacy *bool `json:"privacy,omitempty"`
}

// TopLevelDomainsGetOptions contains the optional parameters for the TopLevelDomains.Get method.
type TopLevelDomainsGetOptions struct {
	// placeholder for future optional parameters
}

// TopLevelDomainsListAgreementsOptions contains the optional parameters for the TopLevelDomains.ListAgreements method.
type TopLevelDomainsListAgreementsOptions struct {
	// placeholder for future optional parameters
}

// TopLevelDomainsListOptions contains the optional parameters for the TopLevelDomains.List method.
type TopLevelDomainsListOptions struct {
	// placeholder for future optional parameters
}

// TriggeredJobHistory - Triggered Web Job History. List of Triggered Web Job Run Information elements.
type TriggeredJobHistory struct {
	ProxyOnlyResource
	// TriggeredJobHistory resource specific properties
	Properties *TriggeredJobHistoryProperties `json:"properties,omitempty"`
}

// MarshalJSON implements the json.Marshaller interface for type TriggeredJobHistory.
func (t TriggeredJobHistory) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	t.ProxyOnlyResource.marshalInternal(objectMap)
	populate(objectMap, "properties", t.Properties)
	return json.Marshal(objectMap)
}

// TriggeredJobHistoryCollection - Collection of Kudu continuous web job information elements.
type TriggeredJobHistoryCollection struct {
	// REQUIRED; Collection of resources.
	Value []*TriggeredJobHistory `json:"value,omitempty"`

	// READ-ONLY; Link to next page of resources.
	NextLink *string `json:"nextLink,omitempty" azure:"ro"`
}

// MarshalJSON implements the json.Marshaller interface for type TriggeredJobHistoryCollection.
func (t TriggeredJobHistoryCollection) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "nextLink", t.NextLink)
	populate(objectMap, "value", t.Value)
	return json.Marshal(objectMap)
}

// TriggeredJobHistoryProperties - TriggeredJobHistory resource specific properties
type TriggeredJobHistoryProperties struct {
	// List of triggered web job runs.
	Runs []*TriggeredJobRun `json:"runs,omitempty"`
}

// MarshalJSON implements the json.Marshaller interface for type TriggeredJobHistoryProperties.
func (t TriggeredJobHistoryProperties) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "runs", t.Runs)
	return json.Marshal(objectMap)
}

// TriggeredJobRun - Triggered Web Job Run Information.
type TriggeredJobRun struct {
	// Job duration.
	Duration *string `json:"duration,omitempty"`

	// End time.
	EndTime *time.Time `json:"end_time,omitempty"`

	// Error URL.
	ErrorURL *string `json:"error_url,omitempty"`

	// Job name.
	JobName *string `json:"job_name,omitempty"`

	// Output URL.
	OutputURL *string `json:"output_url,omitempty"`

	// Start time.
	StartTime *time.Time `json:"start_time,omitempty"`

	// Job status.
	Status *TriggeredWebJobStatus `json:"status,omitempty"`

	// Job trigger.
	Trigger *string `json:"trigger,omitempty"`

	// Job URL.
	URL *string `json:"url,omitempty"`

	// Job ID.
	WebJobID *string `json:"web_job_id,omitempty"`

	// Job name.
	WebJobName *string `json:"web_job_name,omitempty"`
}

// MarshalJSON implements the json.Marshaller interface for type TriggeredJobRun.
func (t TriggeredJobRun) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "duration", t.Duration)
	populate(objectMap, "end_time", (*timeRFC3339)(t.EndTime))
	populate(objectMap, "error_url", t.ErrorURL)
	populate(objectMap, "job_name", t.JobName)
	populate(objectMap, "output_url", t.OutputURL)
	populate(objectMap, "start_time", (*timeRFC3339)(t.StartTime))
	populate(objectMap, "status", t.Status)
	populate(objectMap, "trigger", t.Trigger)
	populate(objectMap, "url", t.URL)
	populate(objectMap, "web_job_id", t.WebJobID)
	populate(objectMap, "web_job_name", t.WebJobName)
	return json.Marshal(objectMap)
}

// UnmarshalJSON implements the json.Unmarshaller interface for type TriggeredJobRun.
func (t *TriggeredJobRun) UnmarshalJSON(data []byte) error {
	var rawMsg map[string]json.RawMessage
	if err := json.Unmarshal(data, &rawMsg); err != nil {
		return err
	}
	for key, val := range rawMsg {
		var err error
		switch key {
		case "duration":
			err = unpopulate(val, &t.Duration)
			delete(rawMsg, key)
		case "end_time":
			var aux timeRFC3339
			err = unpopulate(val, &aux)
			t.EndTime = (*time.Time)(&aux)
			delete(rawMsg, key)
		case "error_url":
			err = unpopulate(val, &t.ErrorURL)
			delete(rawMsg, key)
		case "job_name":
			err = unpopulate(val, &t.JobName)
			delete(rawMsg, key)
		case "output_url":
			err = unpopulate(val, &t.OutputURL)
			delete(rawMsg, key)
		case "start_time":
			var aux timeRFC3339
			err = unpopulate(val, &aux)
			t.StartTime = (*time.Time)(&aux)
			delete(rawMsg, key)
		case "status":
			err = unpopulate(val, &t.Status)
			delete(rawMsg, key)
		case "trigger":
			err = unpopulate(val, &t.Trigger)
			delete(rawMsg, key)
		case "url":
			err = unpopulate(val, &t.URL)
			delete(rawMsg, key)
		case "web_job_id":
			err = unpopulate(val, &t.WebJobID)
			delete(rawMsg, key)
		case "web_job_name":
			err = unpopulate(val, &t.WebJobName)
			delete(rawMsg, key)
		}
		if err != nil {
			return err
		}
	}
	return nil
}

// TriggeredWebJob - Triggered Web Job Information.
type TriggeredWebJob struct {
	ProxyOnlyResource
	// TriggeredWebJob resource specific properties
	Properties *TriggeredWebJobProperties `json:"properties,omitempty"`
}

// MarshalJSON implements the json.Marshaller interface for type TriggeredWebJob.
func (t TriggeredWebJob) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	t.ProxyOnlyResource.marshalInternal(objectMap)
	populate(objectMap, "properties", t.Properties)
	return json.Marshal(objectMap)
}

// TriggeredWebJobCollection - Collection of Kudu continuous web job information elements.
type TriggeredWebJobCollection struct {
	// REQUIRED; Collection of resources.
	Value []*TriggeredWebJob `json:"value,omitempty"`

	// READ-ONLY; Link to next page of resources.
	NextLink *string `json:"nextLink,omitempty" azure:"ro"`
}

// MarshalJSON implements the json.Marshaller interface for type TriggeredWebJobCollection.
func (t TriggeredWebJobCollection) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "nextLink", t.NextLink)
	populate(objectMap, "value", t.Value)
	return json.Marshal(objectMap)
}

// TriggeredWebJobProperties - TriggeredWebJob resource specific properties
type TriggeredWebJobProperties struct {
	// Error information.
	Error *string `json:"error,omitempty"`

	// Extra Info URL.
	ExtraInfoURL *string `json:"extra_info_url,omitempty"`

	// History URL.
	HistoryURL *string `json:"history_url,omitempty"`

	// Latest job run information.
	LatestRun *TriggeredJobRun `json:"latest_run,omitempty"`

	// Run command.
	RunCommand *string `json:"run_command,omitempty"`

	// Scheduler Logs URL.
	SchedulerLogsURL *string `json:"scheduler_logs_url,omitempty"`

	// Job settings.
	Settings map[string]map[string]interface{} `json:"settings,omitempty"`

	// Job URL.
	URL *string `json:"url,omitempty"`

	// Using SDK?
	UsingSdk *bool `json:"using_sdk,omitempty"`

	// Job type.
	WebJobType *WebJobType `json:"web_job_type,omitempty"`
}

// MarshalJSON implements the json.Marshaller interface for type TriggeredWebJobProperties.
func (t TriggeredWebJobProperties) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "error", t.Error)
	populate(objectMap, "extra_info_url", t.ExtraInfoURL)
	populate(objectMap, "history_url", t.HistoryURL)
	populate(objectMap, "latest_run", t.LatestRun)
	populate(objectMap, "run_command", t.RunCommand)
	populate(objectMap, "scheduler_logs_url", t.SchedulerLogsURL)
	populate(objectMap, "settings", t.Settings)
	populate(objectMap, "url", t.URL)
	populate(objectMap, "using_sdk", t.UsingSdk)
	populate(objectMap, "web_job_type", t.WebJobType)
	return json.Marshal(objectMap)
}

// Twitter - The configuration settings of the Twitter provider.
type Twitter struct {
	// false if the Twitter provider should not be enabled despite the set registration; otherwise, true.
	Enabled *bool `json:"enabled,omitempty"`

	// The configuration settings of the app registration for the Twitter provider.
	Registration *TwitterRegistration `json:"registration,omitempty"`
}

// TwitterRegistration - The configuration settings of the app registration for the Twitter provider.
type TwitterRegistration struct {
	// The OAuth 1.0a consumer key of the Twitter application used for sign-in. This setting is required for enabling Twitter Sign-In. Twitter Sign-In documentation:
	// https://dev.twitter.com/web/sign-in
	ConsumerKey *string `json:"consumerKey,omitempty"`

	// The app setting name that contains the OAuth 1.0a consumer secret of the Twitter application used for sign-in.
	ConsumerSecretSettingName *string `json:"consumerSecretSettingName,omitempty"`
}

// Usage of the quota resource.
type Usage struct {
	ProxyOnlyResource
	// Usage resource specific properties
	Properties *UsageProperties `json:"properties,omitempty"`
}

// MarshalJSON implements the json.Marshaller interface for type Usage.
func (u Usage) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	u.ProxyOnlyResource.marshalInternal(objectMap)
	populate(objectMap, "properties", u.Properties)
	return json.Marshal(objectMap)
}

// UsageCollection - Collection of usages.
type UsageCollection struct {
	// REQUIRED; Collection of resources.
	Value []*Usage `json:"value,omitempty"`

	// READ-ONLY; Link to next page of resources.
	NextLink *string `json:"nextLink,omitempty" azure:"ro"`
}

// MarshalJSON implements the json.Marshaller interface for type UsageCollection.
func (u UsageCollection) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "nextLink", u.NextLink)
	populate(objectMap, "value", u.Value)
	return json.Marshal(objectMap)
}

// UsageProperties - Usage resource specific properties
type UsageProperties struct {
	// READ-ONLY; Compute mode used for this usage.
	ComputeMode *ComputeModeOptions `json:"computeMode,omitempty" azure:"ro"`

	// READ-ONLY; The current value of the resource counter.
	CurrentValue *int64 `json:"currentValue,omitempty" azure:"ro"`

	// READ-ONLY; Friendly name shown in the UI.
	DisplayName *string `json:"displayName,omitempty" azure:"ro"`

	// READ-ONLY; The resource limit.
	Limit *int64 `json:"limit,omitempty" azure:"ro"`

	// READ-ONLY; Next reset time for the resource counter.
	NextResetTime *time.Time `json:"nextResetTime,omitempty" azure:"ro"`

	// READ-ONLY; Name of the quota resource.
	ResourceName *string `json:"resourceName,omitempty" azure:"ro"`

	// READ-ONLY; Site mode used for this usage.
	SiteMode *string `json:"siteMode,omitempty" azure:"ro"`

	// READ-ONLY; Units of measurement for the quota resource.
	Unit *string `json:"unit,omitempty" azure:"ro"`
}

// MarshalJSON implements the json.Marshaller interface for type UsageProperties.
func (u UsageProperties) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "computeMode", u.ComputeMode)
	populate(objectMap, "currentValue", u.CurrentValue)
	populate(objectMap, "displayName", u.DisplayName)
	populate(objectMap, "limit", u.Limit)
	populate(objectMap, "nextResetTime", (*timeRFC3339)(u.NextResetTime))
	populate(objectMap, "resourceName", u.ResourceName)
	populate(objectMap, "siteMode", u.SiteMode)
	populate(objectMap, "unit", u.Unit)
	return json.Marshal(objectMap)
}

// UnmarshalJSON implements the json.Unmarshaller interface for type UsageProperties.
func (u *UsageProperties) UnmarshalJSON(data []byte) error {
	var rawMsg map[string]json.RawMessage
	if err := json.Unmarshal(data, &rawMsg); err != nil {
		return err
	}
	for key, val := range rawMsg {
		var err error
		switch key {
		case "computeMode":
			err = unpopulate(val, &u.ComputeMode)
			delete(rawMsg, key)
		case "currentValue":
			err = unpopulate(val, &u.CurrentValue)
			delete(rawMsg, key)
		case "displayName":
			err = unpopulate(val, &u.DisplayName)
			delete(rawMsg, key)
		case "limit":
			err = unpopulate(val, &u.Limit)
			delete(rawMsg, key)
		case "nextResetTime":
			var aux timeRFC3339
			err = unpopulate(val, &aux)
			u.NextResetTime = (*time.Time)(&aux)
			delete(rawMsg, key)
		case "resourceName":
			err = unpopulate(val, &u.ResourceName)
			delete(rawMsg, key)
		case "siteMode":
			err = unpopulate(val, &u.SiteMode)
			delete(rawMsg, key)
		case "unit":
			err = unpopulate(val, &u.Unit)
			delete(rawMsg, key)
		}
		if err != nil {
			return err
		}
	}
	return nil
}

// User credentials used for publishing activity.
type User struct {
	ProxyOnlyResource
	// User resource specific properties
	Properties *UserProperties `json:"properties,omitempty"`
}

// MarshalJSON implements the json.Marshaller interface for type User.
func (u User) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	u.ProxyOnlyResource.marshalInternal(objectMap)
	populate(objectMap, "properties", u.Properties)
	return json.Marshal(objectMap)
}

// UserAssignedIdentity - User Assigned identity.
type UserAssignedIdentity struct {
	// READ-ONLY; Client Id of user assigned identity
	ClientID *string `json:"clientId,omitempty" azure:"ro"`

	// READ-ONLY; Principal Id of user assigned identity
	PrincipalID *string `json:"principalId,omitempty" azure:"ro"`
}

// UserProperties - User resource specific properties
type UserProperties struct {
	// REQUIRED; Username used for publishing.
	PublishingUserName *string `json:"publishingUserName,omitempty"`

	// Password used for publishing.
	PublishingPassword *string `json:"publishingPassword,omitempty"`

	// Password hash used for publishing.
	PublishingPasswordHash *string `json:"publishingPasswordHash,omitempty"`

	// Password hash salt used for publishing.
	PublishingPasswordHashSalt *string `json:"publishingPasswordHashSalt,omitempty"`

	// Url of SCM site.
	ScmURI *string `json:"scmUri,omitempty"`
}

// ValidateProperties - App properties used for validation.
type ValidateProperties struct {
	// App Service Environment Properties
	AppServiceEnvironment *AppServiceEnvironment `json:"appServiceEnvironment,omitempty"`

	// Target capacity of the App Service plan (number of VMs).
	Capacity *int32 `json:"capacity,omitempty"`

	// Platform (windows or linux)
	ContainerImagePlatform *string `json:"containerImagePlatform,omitempty"`

	// Repository name (image name)
	ContainerImageRepository *string `json:"containerImageRepository,omitempty"`

	// Image tag
	ContainerImageTag *string `json:"containerImageTag,omitempty"`

	// Base URL of the container registry
	ContainerRegistryBaseURL *string `json:"containerRegistryBaseUrl,omitempty"`

	// Password for to access the container registry
	ContainerRegistryPassword *string `json:"containerRegistryPassword,omitempty"`

	// Username for to access the container registry
	ContainerRegistryUsername *string `json:"containerRegistryUsername,omitempty"`

	// Name of App Service Environment where app or App Service plan should be created.
	HostingEnvironment *string `json:"hostingEnvironment,omitempty"`

	// true if App Service plan is for Spot instances; otherwise, false.
	IsSpot *bool `json:"isSpot,omitempty"`

	// true if App Service plan is running as a windows container
	IsXenon *bool `json:"isXenon,omitempty"`

	// true if App Service plan is for Linux workers; otherwise, false.
	NeedLinuxWorkers *bool `json:"needLinuxWorkers,omitempty"`

	// Name of the target SKU for the App Service plan.
	SKUName *string `json:"skuName,omitempty"`

	// ARM resource ID of an App Service plan that would host the app.
	ServerFarmID *string `json:"serverFarmId,omitempty"`
}

// ValidateRequest - Resource validation request content.
type ValidateRequest struct {
	// REQUIRED; Expected location of the resource.
	Location *string `json:"location,omitempty"`

	// REQUIRED; Resource name to verify.
	Name *string `json:"name,omitempty"`

	// REQUIRED; Properties of the resource to validate.
	Properties *ValidateProperties `json:"properties,omitempty"`

	// REQUIRED; Resource type used for verification.
	Type *ValidateResourceTypes `json:"type,omitempty"`
}

// ValidateResponse - Describes the result of resource validation.
type ValidateResponse struct {
	// Error details for the case when validation fails.
	Error *ValidateResponseError `json:"error,omitempty"`

	// Result of validation.
	Status *string `json:"status,omitempty"`
}

// ValidateResponseError - Error details for when validation fails.
type ValidateResponseError struct {
	// Validation error code.
	Code *string `json:"code,omitempty"`

	// Validation error message.
	Message *string `json:"message,omitempty"`
}

// VirtualApplication - Virtual application in an app.
type VirtualApplication struct {
	// Physical path.
	PhysicalPath *string `json:"physicalPath,omitempty"`

	// true if preloading is enabled; otherwise, false.
	PreloadEnabled *bool `json:"preloadEnabled,omitempty"`

	// Virtual directories for virtual application.
	VirtualDirectories []*VirtualDirectory `json:"virtualDirectories,omitempty"`

	// Virtual path.
	VirtualPath *string `json:"virtualPath,omitempty"`
}

// MarshalJSON implements the json.Marshaller interface for type VirtualApplication.
func (v VirtualApplication) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "physicalPath", v.PhysicalPath)
	populate(objectMap, "preloadEnabled", v.PreloadEnabled)
	populate(objectMap, "virtualDirectories", v.VirtualDirectories)
	populate(objectMap, "virtualPath", v.VirtualPath)
	return json.Marshal(objectMap)
}

// VirtualDirectory - Directory for virtual application.
type VirtualDirectory struct {
	// Physical path.
	PhysicalPath *string `json:"physicalPath,omitempty"`

	// Path to virtual application.
	VirtualPath *string `json:"virtualPath,omitempty"`
}

// VirtualIPMapping - Virtual IP mapping.
type VirtualIPMapping struct {
	// Is virtual IP mapping in use.
	InUse *bool `json:"inUse,omitempty"`

	// Internal HTTP port.
	InternalHTTPPort *int32 `json:"internalHttpPort,omitempty"`

	// Internal HTTPS port.
	InternalHTTPSPort *int32 `json:"internalHttpsPort,omitempty"`

	// name of the service that virtual IP is assigned to
	ServiceName *string `json:"serviceName,omitempty"`

	// Virtual IP address.
	VirtualIP *string `json:"virtualIP,omitempty"`
}

// VirtualNetworkProfile - Specification for using a Virtual Network.
type VirtualNetworkProfile struct {
	// REQUIRED; Resource id of the Virtual Network.
	ID *string `json:"id,omitempty"`

	// Subnet within the Virtual Network.
	Subnet *string `json:"subnet,omitempty"`

	// READ-ONLY; Name of the Virtual Network (read-only).
	Name *string `json:"name,omitempty" azure:"ro"`

	// READ-ONLY; Resource type of the Virtual Network (read-only).
	Type *string `json:"type,omitempty" azure:"ro"`
}

// VnetGateway - The Virtual Network gateway contract. This is used to give the Virtual Network gateway access to the VPN package.
type VnetGateway struct {
	ProxyOnlyResource
	// VnetGateway resource specific properties
	Properties *VnetGatewayProperties `json:"properties,omitempty"`
}

// MarshalJSON implements the json.Marshaller interface for type VnetGateway.
func (v VnetGateway) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	v.ProxyOnlyResource.marshalInternal(objectMap)
	populate(objectMap, "properties", v.Properties)
	return json.Marshal(objectMap)
}

// VnetGatewayProperties - VnetGateway resource specific properties
type VnetGatewayProperties struct {
	// REQUIRED; The URI where the VPN package can be downloaded.
	VPNPackageURI *string `json:"vpnPackageUri,omitempty"`

	// The Virtual Network name.
	VnetName *string `json:"vnetName,omitempty"`
}

// VnetInfo - Virtual Network information contract.
type VnetInfo struct {
	// A certificate file (.cer) blob containing the public key of the private key used to authenticate a Point-To-Site VPN connection.
	CertBlob *string `json:"certBlob,omitempty"`

	// DNS servers to be used by this Virtual Network. This should be a comma-separated list of IP addresses.
	DNSServers *string `json:"dnsServers,omitempty"`

	// Flag that is used to denote if this is VNET injection
	IsSwift *bool `json:"isSwift,omitempty"`

	// The Virtual Network's resource ID.
	VnetResourceID *string `json:"vnetResourceId,omitempty"`

	// READ-ONLY; The client certificate thumbprint.
	CertThumbprint *string `json:"certThumbprint,omitempty" azure:"ro"`

	// READ-ONLY; true if a resync is required; otherwise, false.
	ResyncRequired *bool `json:"resyncRequired,omitempty" azure:"ro"`

	// READ-ONLY; The routes that this Virtual Network connection uses.
	Routes []*VnetRoute `json:"routes,omitempty" azure:"ro"`
}

// MarshalJSON implements the json.Marshaller interface for type VnetInfo.
func (v VnetInfo) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "certBlob", v.CertBlob)
	populate(objectMap, "certThumbprint", v.CertThumbprint)
	populate(objectMap, "dnsServers", v.DNSServers)
	populate(objectMap, "isSwift", v.IsSwift)
	populate(objectMap, "resyncRequired", v.ResyncRequired)
	populate(objectMap, "routes", v.Routes)
	populate(objectMap, "vnetResourceId", v.VnetResourceID)
	return json.Marshal(objectMap)
}

// VnetInfoResource - Virtual Network information ARM resource.
type VnetInfoResource struct {
	ProxyOnlyResource
	// Core resource properties
	Properties *VnetInfo `json:"properties,omitempty"`
}

// MarshalJSON implements the json.Marshaller interface for type VnetInfoResource.
func (v VnetInfoResource) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	v.ProxyOnlyResource.marshalInternal(objectMap)
	populate(objectMap, "properties", v.Properties)
	return json.Marshal(objectMap)
}

// VnetParameters - The required set of inputs to validate a VNET
type VnetParameters struct {
	ProxyOnlyResource
	// VnetParameters resource specific properties
	Properties *VnetParametersProperties `json:"properties,omitempty"`
}

// MarshalJSON implements the json.Marshaller interface for type VnetParameters.
func (v VnetParameters) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	v.ProxyOnlyResource.marshalInternal(objectMap)
	populate(objectMap, "properties", v.Properties)
	return json.Marshal(objectMap)
}

// VnetParametersProperties - VnetParameters resource specific properties
type VnetParametersProperties struct {
	// The ARM Resource ID of the subnet to validate
	SubnetResourceID *string `json:"subnetResourceId,omitempty"`

	// The name of the VNET to be validated
	VnetName *string `json:"vnetName,omitempty"`

	// The Resource Group of the VNET to be validated
	VnetResourceGroup *string `json:"vnetResourceGroup,omitempty"`

	// The subnet name to be validated
	VnetSubnetName *string `json:"vnetSubnetName,omitempty"`
}

// VnetRoute - Virtual Network route contract used to pass routing information for a Virtual Network.
type VnetRoute struct {
	ProxyOnlyResource
	// VnetRoute resource specific properties
	Properties *VnetRouteProperties `json:"properties,omitempty"`
}

// MarshalJSON implements the json.Marshaller interface for type VnetRoute.
func (v VnetRoute) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	v.ProxyOnlyResource.marshalInternal(objectMap)
	populate(objectMap, "properties", v.Properties)
	return json.Marshal(objectMap)
}

// VnetRouteProperties - VnetRoute resource specific properties
type VnetRouteProperties struct {
	// The ending address for this route. If the start address is specified in CIDR notation, this must be omitted.
	EndAddress *string `json:"endAddress,omitempty"`

	// The type of route this is: DEFAULT - By default, every app has routes to the local address ranges specified by RFC1918 INHERITED - Routes inherited from
	// the real Virtual Network routes STATIC - Static
	// route set on the app only
	// These values will be used for syncing an app's routes with those from a Virtual Network.
	RouteType *RouteType `json:"routeType,omitempty"`

	// The starting address for this route. This may also include a CIDR notation, in which case the end address must not be specified.
	StartAddress *string `json:"startAddress,omitempty"`
}

// VnetValidationFailureDetails - A class that describes the reason for a validation failure.
type VnetValidationFailureDetails struct {
	ProxyOnlyResource
	// VnetValidationFailureDetails resource specific properties
	Properties *VnetValidationFailureDetailsProperties `json:"properties,omitempty"`
}

// MarshalJSON implements the json.Marshaller interface for type VnetValidationFailureDetails.
func (v VnetValidationFailureDetails) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	v.ProxyOnlyResource.marshalInternal(objectMap)
	populate(objectMap, "properties", v.Properties)
	return json.Marshal(objectMap)
}

// VnetValidationFailureDetailsProperties - VnetValidationFailureDetails resource specific properties
type VnetValidationFailureDetailsProperties struct {
	// A flag describing whether or not validation failed.
	Failed *bool `json:"failed,omitempty"`

	// A list of tests that failed in the validation.
	FailedTests []*VnetValidationTestFailure `json:"failedTests,omitempty"`

	// Text describing the validation outcome.
	Message *string `json:"message,omitempty"`

	// A list of warnings generated during validation.
	Warnings []*VnetValidationTestFailure `json:"warnings,omitempty"`
}

// MarshalJSON implements the json.Marshaller interface for type VnetValidationFailureDetailsProperties.
func (v VnetValidationFailureDetailsProperties) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "failed", v.Failed)
	populate(objectMap, "failedTests", v.FailedTests)
	populate(objectMap, "message", v.Message)
	populate(objectMap, "warnings", v.Warnings)
	return json.Marshal(objectMap)
}

// VnetValidationTestFailure - A class that describes a test that failed during NSG and UDR validation.
type VnetValidationTestFailure struct {
	ProxyOnlyResource
	// VnetValidationTestFailure resource specific properties
	Properties *VnetValidationTestFailureProperties `json:"properties,omitempty"`
}

// MarshalJSON implements the json.Marshaller interface for type VnetValidationTestFailure.
func (v VnetValidationTestFailure) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	v.ProxyOnlyResource.marshalInternal(objectMap)
	populate(objectMap, "properties", v.Properties)
	return json.Marshal(objectMap)
}

// VnetValidationTestFailureProperties - VnetValidationTestFailure resource specific properties
type VnetValidationTestFailureProperties struct {
	// The details of what caused the failure, e.g. the blocking rule name, etc.
	Details *string `json:"details,omitempty"`

	// The name of the test that failed.
	TestName *string `json:"testName,omitempty"`
}

// WebAppCollection - Collection of App Service apps.
type WebAppCollection struct {
	// REQUIRED; Collection of resources.
	Value []*Site `json:"value,omitempty"`

	// READ-ONLY; Link to next page of resources.
	NextLink *string `json:"nextLink,omitempty" azure:"ro"`
}

// MarshalJSON implements the json.Marshaller interface for type WebAppCollection.
func (w WebAppCollection) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "nextLink", w.NextLink)
	populate(objectMap, "value", w.Value)
	return json.Marshal(objectMap)
}

// WebAppInstanceStatusCollection - Collection of app instances.
type WebAppInstanceStatusCollection struct {
	// REQUIRED; Collection of resources.
	Value []*WebSiteInstanceStatus `json:"value,omitempty"`

	// READ-ONLY; Link to next page of resources.
	NextLink *string `json:"nextLink,omitempty" azure:"ro"`
}

// MarshalJSON implements the json.Marshaller interface for type WebAppInstanceStatusCollection.
func (w WebAppInstanceStatusCollection) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "nextLink", w.NextLink)
	populate(objectMap, "value", w.Value)
	return json.Marshal(objectMap)
}

// WebAppMajorVersion - Web App stack major version.
type WebAppMajorVersion struct {
	// READ-ONLY; Web App stack major version (display only).
	DisplayText *string `json:"displayText,omitempty" azure:"ro"`

	// READ-ONLY; Minor versions associated with the major version.
	MinorVersions []*WebAppMinorVersion `json:"minorVersions,omitempty" azure:"ro"`

	// READ-ONLY; Web App stack major version name.
	Value *string `json:"value,omitempty" azure:"ro"`
}

// MarshalJSON implements the json.Marshaller interface for type WebAppMajorVersion.
func (w WebAppMajorVersion) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "displayText", w.DisplayText)
	populate(objectMap, "minorVersions", w.MinorVersions)
	populate(objectMap, "value", w.Value)
	return json.Marshal(objectMap)
}

// WebAppMinorVersion - Web App stack minor version.
type WebAppMinorVersion struct {
	// READ-ONLY; Web App stack minor version (display only).
	DisplayText *string `json:"displayText,omitempty" azure:"ro"`

	// READ-ONLY; Settings associated with the minor version.
	StackSettings *WebAppRuntimes `json:"stackSettings,omitempty" azure:"ro"`

	// READ-ONLY; Web App stack major version name.
	Value *string `json:"value,omitempty" azure:"ro"`
}

// WebAppRuntimeSettings - Web App runtime settings.
type WebAppRuntimeSettings struct {
	// READ-ONLY; Application Insights settings associated with the minor version.
	AppInsightsSettings *AppInsightsWebAppStackSettings `json:"appInsightsSettings,omitempty" azure:"ro"`

	// READ-ONLY; End-of-life date for the minor version.
	EndOfLifeDate *time.Time `json:"endOfLifeDate,omitempty" azure:"ro"`

	// READ-ONLY; GitHub Actions settings associated with the minor version.
	GitHubActionSettings *GitHubActionWebAppStackSettings `json:"gitHubActionSettings,omitempty" azure:"ro"`

	// READ-ONLY; true if the stack version is auto-updated; otherwise, false.
	IsAutoUpdate *bool `json:"isAutoUpdate,omitempty" azure:"ro"`

	// READ-ONLY; true if the stack is deprecated; otherwise, false.
	IsDeprecated *bool `json:"isDeprecated,omitempty" azure:"ro"`

	// READ-ONLY; true if the minor version is early-access; otherwise, false.
	IsEarlyAccess *bool `json:"isEarlyAccess,omitempty" azure:"ro"`

	// READ-ONLY; true if the stack should be hidden; otherwise, false.
	IsHidden *bool `json:"isHidden,omitempty" azure:"ro"`

	// READ-ONLY; true if the stack is in preview; otherwise, false.
	IsPreview *bool `json:"isPreview,omitempty" azure:"ro"`

	// READ-ONLY; true if remote debugging is supported for the stack; otherwise, false.
	RemoteDebuggingSupported *bool `json:"remoteDebuggingSupported,omitempty" azure:"ro"`

	// READ-ONLY; Web App stack minor version (runtime only).
	RuntimeVersion *string `json:"runtimeVersion,omitempty" azure:"ro"`
}

// MarshalJSON implements the json.Marshaller interface for type WebAppRuntimeSettings.
func (w WebAppRuntimeSettings) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "appInsightsSettings", w.AppInsightsSettings)
	populate(objectMap, "endOfLifeDate", (*timeRFC3339)(w.EndOfLifeDate))
	populate(objectMap, "gitHubActionSettings", w.GitHubActionSettings)
	populate(objectMap, "isAutoUpdate", w.IsAutoUpdate)
	populate(objectMap, "isDeprecated", w.IsDeprecated)
	populate(objectMap, "isEarlyAccess", w.IsEarlyAccess)
	populate(objectMap, "isHidden", w.IsHidden)
	populate(objectMap, "isPreview", w.IsPreview)
	populate(objectMap, "remoteDebuggingSupported", w.RemoteDebuggingSupported)
	populate(objectMap, "runtimeVersion", w.RuntimeVersion)
	return json.Marshal(objectMap)
}

// UnmarshalJSON implements the json.Unmarshaller interface for type WebAppRuntimeSettings.
func (w *WebAppRuntimeSettings) UnmarshalJSON(data []byte) error {
	var rawMsg map[string]json.RawMessage
	if err := json.Unmarshal(data, &rawMsg); err != nil {
		return err
	}
	for key, val := range rawMsg {
		var err error
		switch key {
		case "appInsightsSettings":
			err = unpopulate(val, &w.AppInsightsSettings)
			delete(rawMsg, key)
		case "endOfLifeDate":
			var aux timeRFC3339
			err = unpopulate(val, &aux)
			w.EndOfLifeDate = (*time.Time)(&aux)
			delete(rawMsg, key)
		case "gitHubActionSettings":
			err = unpopulate(val, &w.GitHubActionSettings)
			delete(rawMsg, key)
		case "isAutoUpdate":
			err = unpopulate(val, &w.IsAutoUpdate)
			delete(rawMsg, key)
		case "isDeprecated":
			err = unpopulate(val, &w.IsDeprecated)
			delete(rawMsg, key)
		case "isEarlyAccess":
			err = unpopulate(val, &w.IsEarlyAccess)
			delete(rawMsg, key)
		case "isHidden":
			err = unpopulate(val, &w.IsHidden)
			delete(rawMsg, key)
		case "isPreview":
			err = unpopulate(val, &w.IsPreview)
			delete(rawMsg, key)
		case "remoteDebuggingSupported":
			err = unpopulate(val, &w.RemoteDebuggingSupported)
			delete(rawMsg, key)
		case "runtimeVersion":
			err = unpopulate(val, &w.RuntimeVersion)
			delete(rawMsg, key)
		}
		if err != nil {
			return err
		}
	}
	return nil
}

// WebAppRuntimes - Web App stack runtimes.
type WebAppRuntimes struct {
	// READ-ONLY; Linux-specific settings associated with the Java container minor version.
	LinuxContainerSettings *LinuxJavaContainerSettings `json:"linuxContainerSettings,omitempty" azure:"ro"`

	// READ-ONLY; Linux-specific settings associated with the minor version.
	LinuxRuntimeSettings *WebAppRuntimeSettings `json:"linuxRuntimeSettings,omitempty" azure:"ro"`

	// READ-ONLY; Windows-specific settings associated with the Java container minor version.
	WindowsContainerSettings *WindowsJavaContainerSettings `json:"windowsContainerSettings,omitempty" azure:"ro"`

	// READ-ONLY; Windows-specific settings associated with the minor version.
	WindowsRuntimeSettings *WebAppRuntimeSettings `json:"windowsRuntimeSettings,omitempty" azure:"ro"`
}

// WebAppStack - Web App stack.
type WebAppStack struct {
	ProxyOnlyResource
	// WebAppStack resource specific properties
	Properties *WebAppStackProperties `json:"properties,omitempty"`

	// READ-ONLY; Web App stack location.
	Location *string `json:"location,omitempty" azure:"ro"`
}

// MarshalJSON implements the json.Marshaller interface for type WebAppStack.
func (w WebAppStack) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	w.ProxyOnlyResource.marshalInternal(objectMap)
	populate(objectMap, "location", w.Location)
	populate(objectMap, "properties", w.Properties)
	return json.Marshal(objectMap)
}

// WebAppStackCollection - Collection of Web app Stacks
type WebAppStackCollection struct {
	// REQUIRED; Collection of resources.
	Value []*WebAppStack `json:"value,omitempty"`

	// READ-ONLY; Link to next page of resources.
	NextLink *string `json:"nextLink,omitempty" azure:"ro"`
}

// MarshalJSON implements the json.Marshaller interface for type WebAppStackCollection.
func (w WebAppStackCollection) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "nextLink", w.NextLink)
	populate(objectMap, "value", w.Value)
	return json.Marshal(objectMap)
}

// WebAppStackProperties - WebAppStack resource specific properties
type WebAppStackProperties struct {
	// READ-ONLY; Web App stack (display only).
	DisplayText *string `json:"displayText,omitempty" azure:"ro"`

	// READ-ONLY; List of major versions available.
	MajorVersions []*WebAppMajorVersion `json:"majorVersions,omitempty" azure:"ro"`

	// READ-ONLY; Web App stack preferred OS.
	PreferredOs *StackPreferredOs `json:"preferredOs,omitempty" azure:"ro"`

	// READ-ONLY; Web App stack name.
	Value *string `json:"value,omitempty" azure:"ro"`
}

// MarshalJSON implements the json.Marshaller interface for type WebAppStackProperties.
func (w WebAppStackProperties) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "displayText", w.DisplayText)
	populate(objectMap, "majorVersions", w.MajorVersions)
	populate(objectMap, "preferredOs", w.PreferredOs)
	populate(objectMap, "value", w.Value)
	return json.Marshal(objectMap)
}

// WebAppsAddPremierAddOnOptions contains the optional parameters for the WebApps.AddPremierAddOn method.
type WebAppsAddPremierAddOnOptions struct {
	// placeholder for future optional parameters
}

// WebAppsAddPremierAddOnSlotOptions contains the optional parameters for the WebApps.AddPremierAddOnSlot method.
type WebAppsAddPremierAddOnSlotOptions struct {
	// placeholder for future optional parameters
}

// WebAppsAnalyzeCustomHostnameOptions contains the optional parameters for the WebApps.AnalyzeCustomHostname method.
type WebAppsAnalyzeCustomHostnameOptions struct {
	// Custom hostname.
	HostName *string
}

// WebAppsAnalyzeCustomHostnameSlotOptions contains the optional parameters for the WebApps.AnalyzeCustomHostnameSlot method.
type WebAppsAnalyzeCustomHostnameSlotOptions struct {
	// Custom hostname.
	HostName *string
}

// WebAppsApplySlotConfigToProductionOptions contains the optional parameters for the WebApps.ApplySlotConfigToProduction method.
type WebAppsApplySlotConfigToProductionOptions struct {
	// placeholder for future optional parameters
}

// WebAppsApplySlotConfigurationSlotOptions contains the optional parameters for the WebApps.ApplySlotConfigurationSlot method.
type WebAppsApplySlotConfigurationSlotOptions struct {
	// placeholder for future optional parameters
}

// WebAppsBackupOptions contains the optional parameters for the WebApps.Backup method.
type WebAppsBackupOptions struct {
	// placeholder for future optional parameters
}

// WebAppsBackupSlotOptions contains the optional parameters for the WebApps.BackupSlot method.
type WebAppsBackupSlotOptions struct {
	// placeholder for future optional parameters
}

// WebAppsBeginApproveOrRejectPrivateEndpointConnectionOptions contains the optional parameters for the WebApps.BeginApproveOrRejectPrivateEndpointConnection
// method.
type WebAppsBeginApproveOrRejectPrivateEndpointConnectionOptions struct {
	// placeholder for future optional parameters
}

// WebAppsBeginApproveOrRejectPrivateEndpointConnectionSlotOptions contains the optional parameters for the WebApps.BeginApproveOrRejectPrivateEndpointConnectionSlot
// method.
type WebAppsBeginApproveOrRejectPrivateEndpointConnectionSlotOptions struct {
	// placeholder for future optional parameters
}

// WebAppsBeginCreateFunctionOptions contains the optional parameters for the WebApps.BeginCreateFunction method.
type WebAppsBeginCreateFunctionOptions struct {
	// placeholder for future optional parameters
}

// WebAppsBeginCreateInstanceFunctionSlotOptions contains the optional parameters for the WebApps.BeginCreateInstanceFunctionSlot method.
type WebAppsBeginCreateInstanceFunctionSlotOptions struct {
	// placeholder for future optional parameters
}

// WebAppsBeginCreateInstanceMSDeployOperationOptions contains the optional parameters for the WebApps.BeginCreateInstanceMSDeployOperation method.
type WebAppsBeginCreateInstanceMSDeployOperationOptions struct {
	// placeholder for future optional parameters
}

// WebAppsBeginCreateInstanceMSDeployOperationSlotOptions contains the optional parameters for the WebApps.BeginCreateInstanceMSDeployOperationSlot method.
type WebAppsBeginCreateInstanceMSDeployOperationSlotOptions struct {
	// placeholder for future optional parameters
}

// WebAppsBeginCreateMSDeployOperationOptions contains the optional parameters for the WebApps.BeginCreateMSDeployOperation method.
type WebAppsBeginCreateMSDeployOperationOptions struct {
	// placeholder for future optional parameters
}

// WebAppsBeginCreateMSDeployOperationSlotOptions contains the optional parameters for the WebApps.BeginCreateMSDeployOperationSlot method.
type WebAppsBeginCreateMSDeployOperationSlotOptions struct {
	// placeholder for future optional parameters
}

// WebAppsBeginCreateOrUpdateOptions contains the optional parameters for the WebApps.BeginCreateOrUpdate method.
type WebAppsBeginCreateOrUpdateOptions struct {
	// placeholder for future optional parameters
}

// WebAppsBeginCreateOrUpdateSlotOptions contains the optional parameters for the WebApps.BeginCreateOrUpdateSlot method.
type WebAppsBeginCreateOrUpdateSlotOptions struct {
	// placeholder for future optional parameters
}

// WebAppsBeginCreateOrUpdateSourceControlOptions contains the optional parameters for the WebApps.BeginCreateOrUpdateSourceControl method.
type WebAppsBeginCreateOrUpdateSourceControlOptions struct {
	// placeholder for future optional parameters
}

// WebAppsBeginCreateOrUpdateSourceControlSlotOptions contains the optional parameters for the WebApps.BeginCreateOrUpdateSourceControlSlot method.
type WebAppsBeginCreateOrUpdateSourceControlSlotOptions struct {
	// placeholder for future optional parameters
}

// WebAppsBeginDeletePrivateEndpointConnectionOptions contains the optional parameters for the WebApps.BeginDeletePrivateEndpointConnection method.
type WebAppsBeginDeletePrivateEndpointConnectionOptions struct {
	// placeholder for future optional parameters
}

// WebAppsBeginDeletePrivateEndpointConnectionSlotOptions contains the optional parameters for the WebApps.BeginDeletePrivateEndpointConnectionSlot method.
type WebAppsBeginDeletePrivateEndpointConnectionSlotOptions struct {
	// placeholder for future optional parameters
}

// WebAppsBeginInstallSiteExtensionOptions contains the optional parameters for the WebApps.BeginInstallSiteExtension method.
type WebAppsBeginInstallSiteExtensionOptions struct {
	// placeholder for future optional parameters
}

// WebAppsBeginInstallSiteExtensionSlotOptions contains the optional parameters for the WebApps.BeginInstallSiteExtensionSlot method.
type WebAppsBeginInstallSiteExtensionSlotOptions struct {
	// placeholder for future optional parameters
}

// WebAppsBeginListPublishingCredentialsOptions contains the optional parameters for the WebApps.BeginListPublishingCredentials method.
type WebAppsBeginListPublishingCredentialsOptions struct {
	// placeholder for future optional parameters
}

// WebAppsBeginListPublishingCredentialsSlotOptions contains the optional parameters for the WebApps.BeginListPublishingCredentialsSlot method.
type WebAppsBeginListPublishingCredentialsSlotOptions struct {
	// placeholder for future optional parameters
}

// WebAppsBeginMigrateMySQLOptions contains the optional parameters for the WebApps.BeginMigrateMySQL method.
type WebAppsBeginMigrateMySQLOptions struct {
	// placeholder for future optional parameters
}

// WebAppsBeginMigrateStorageOptions contains the optional parameters for the WebApps.BeginMigrateStorage method.
type WebAppsBeginMigrateStorageOptions struct {
	// placeholder for future optional parameters
}

// WebAppsBeginRestoreFromBackupBlobOptions contains the optional parameters for the WebApps.BeginRestoreFromBackupBlob method.
type WebAppsBeginRestoreFromBackupBlobOptions struct {
	// placeholder for future optional parameters
}

// WebAppsBeginRestoreFromBackupBlobSlotOptions contains the optional parameters for the WebApps.BeginRestoreFromBackupBlobSlot method.
type WebAppsBeginRestoreFromBackupBlobSlotOptions struct {
	// placeholder for future optional parameters
}

// WebAppsBeginRestoreFromDeletedAppOptions contains the optional parameters for the WebApps.BeginRestoreFromDeletedApp method.
type WebAppsBeginRestoreFromDeletedAppOptions struct {
	// placeholder for future optional parameters
}

// WebAppsBeginRestoreFromDeletedAppSlotOptions contains the optional parameters for the WebApps.BeginRestoreFromDeletedAppSlot method.
type WebAppsBeginRestoreFromDeletedAppSlotOptions struct {
	// placeholder for future optional parameters
}

// WebAppsBeginRestoreOptions contains the optional parameters for the WebApps.BeginRestore method.
type WebAppsBeginRestoreOptions struct {
	// placeholder for future optional parameters
}

// WebAppsBeginRestoreSlotOptions contains the optional parameters for the WebApps.BeginRestoreSlot method.
type WebAppsBeginRestoreSlotOptions struct {
	// placeholder for future optional parameters
}

// WebAppsBeginRestoreSnapshotOptions contains the optional parameters for the WebApps.BeginRestoreSnapshot method.
type WebAppsBeginRestoreSnapshotOptions struct {
	// placeholder for future optional parameters
}

// WebAppsBeginRestoreSnapshotSlotOptions contains the optional parameters for the WebApps.BeginRestoreSnapshotSlot method.
type WebAppsBeginRestoreSnapshotSlotOptions struct {
	// placeholder for future optional parameters
}

// WebAppsBeginStartNetworkTraceOptions contains the optional parameters for the WebApps.BeginStartNetworkTrace method.
type WebAppsBeginStartNetworkTraceOptions struct {
	// The duration to keep capturing in seconds.
	DurationInSeconds *int32
	// The maximum frame length in bytes (Optional).
	MaxFrameLength *int32
	// The Blob URL to store capture file.
	SasURL *string
}

// WebAppsBeginStartNetworkTraceSlotOptions contains the optional parameters for the WebApps.BeginStartNetworkTraceSlot method.
type WebAppsBeginStartNetworkTraceSlotOptions struct {
	// The duration to keep capturing in seconds.
	DurationInSeconds *int32
	// The maximum frame length in bytes (Optional).
	MaxFrameLength *int32
	// The Blob URL to store capture file.
	SasURL *string
}

// WebAppsBeginStartWebSiteNetworkTraceOperationOptions contains the optional parameters for the WebApps.BeginStartWebSiteNetworkTraceOperation method.
type WebAppsBeginStartWebSiteNetworkTraceOperationOptions struct {
	// The duration to keep capturing in seconds.
	DurationInSeconds *int32
	// The maximum frame length in bytes (Optional).
	MaxFrameLength *int32
	// The Blob URL to store capture file.
	SasURL *string
}

// WebAppsBeginStartWebSiteNetworkTraceOperationSlotOptions contains the optional parameters for the WebApps.BeginStartWebSiteNetworkTraceOperationSlot
// method.
type WebAppsBeginStartWebSiteNetworkTraceOperationSlotOptions struct {
	// The duration to keep capturing in seconds.
	DurationInSeconds *int32
	// The maximum frame length in bytes (Optional).
	MaxFrameLength *int32
	// The Blob URL to store capture file.
	SasURL *string
}

// WebAppsBeginSwapSlotOptions contains the optional parameters for the WebApps.BeginSwapSlot method.
type WebAppsBeginSwapSlotOptions struct {
	// placeholder for future optional parameters
}

// WebAppsBeginSwapSlotWithProductionOptions contains the optional parameters for the WebApps.BeginSwapSlotWithProduction method.
type WebAppsBeginSwapSlotWithProductionOptions struct {
	// placeholder for future optional parameters
}

// WebAppsCreateDeploymentOptions contains the optional parameters for the WebApps.CreateDeployment method.
type WebAppsCreateDeploymentOptions struct {
	// placeholder for future optional parameters
}

// WebAppsCreateDeploymentSlotOptions contains the optional parameters for the WebApps.CreateDeploymentSlot method.
type WebAppsCreateDeploymentSlotOptions struct {
	// placeholder for future optional parameters
}

// WebAppsCreateOrUpdateConfigurationOptions contains the optional parameters for the WebApps.CreateOrUpdateConfiguration method.
type WebAppsCreateOrUpdateConfigurationOptions struct {
	// placeholder for future optional parameters
}

// WebAppsCreateOrUpdateConfigurationSlotOptions contains the optional parameters for the WebApps.CreateOrUpdateConfigurationSlot method.
type WebAppsCreateOrUpdateConfigurationSlotOptions struct {
	// placeholder for future optional parameters
}

// WebAppsCreateOrUpdateDomainOwnershipIdentifierOptions contains the optional parameters for the WebApps.CreateOrUpdateDomainOwnershipIdentifier method.
type WebAppsCreateOrUpdateDomainOwnershipIdentifierOptions struct {
	// placeholder for future optional parameters
}

// WebAppsCreateOrUpdateDomainOwnershipIdentifierSlotOptions contains the optional parameters for the WebApps.CreateOrUpdateDomainOwnershipIdentifierSlot
// method.
type WebAppsCreateOrUpdateDomainOwnershipIdentifierSlotOptions struct {
	// placeholder for future optional parameters
}

// WebAppsCreateOrUpdateFunctionSecretOptions contains the optional parameters for the WebApps.CreateOrUpdateFunctionSecret method.
type WebAppsCreateOrUpdateFunctionSecretOptions struct {
	// placeholder for future optional parameters
}

// WebAppsCreateOrUpdateFunctionSecretSlotOptions contains the optional parameters for the WebApps.CreateOrUpdateFunctionSecretSlot method.
type WebAppsCreateOrUpdateFunctionSecretSlotOptions struct {
	// placeholder for future optional parameters
}

// WebAppsCreateOrUpdateHostNameBindingOptions contains the optional parameters for the WebApps.CreateOrUpdateHostNameBinding method.
type WebAppsCreateOrUpdateHostNameBindingOptions struct {
	// placeholder for future optional parameters
}

// WebAppsCreateOrUpdateHostNameBindingSlotOptions contains the optional parameters for the WebApps.CreateOrUpdateHostNameBindingSlot method.
type WebAppsCreateOrUpdateHostNameBindingSlotOptions struct {
	// placeholder for future optional parameters
}

// WebAppsCreateOrUpdateHostSecretOptions contains the optional parameters for the WebApps.CreateOrUpdateHostSecret method.
type WebAppsCreateOrUpdateHostSecretOptions struct {
	// placeholder for future optional parameters
}

// WebAppsCreateOrUpdateHostSecretSlotOptions contains the optional parameters for the WebApps.CreateOrUpdateHostSecretSlot method.
type WebAppsCreateOrUpdateHostSecretSlotOptions struct {
	// placeholder for future optional parameters
}

// WebAppsCreateOrUpdateHybridConnectionOptions contains the optional parameters for the WebApps.CreateOrUpdateHybridConnection method.
type WebAppsCreateOrUpdateHybridConnectionOptions struct {
	// placeholder for future optional parameters
}

// WebAppsCreateOrUpdateHybridConnectionSlotOptions contains the optional parameters for the WebApps.CreateOrUpdateHybridConnectionSlot method.
type WebAppsCreateOrUpdateHybridConnectionSlotOptions struct {
	// placeholder for future optional parameters
}

// WebAppsCreateOrUpdatePublicCertificateOptions contains the optional parameters for the WebApps.CreateOrUpdatePublicCertificate method.
type WebAppsCreateOrUpdatePublicCertificateOptions struct {
	// placeholder for future optional parameters
}

// WebAppsCreateOrUpdatePublicCertificateSlotOptions contains the optional parameters for the WebApps.CreateOrUpdatePublicCertificateSlot method.
type WebAppsCreateOrUpdatePublicCertificateSlotOptions struct {
	// placeholder for future optional parameters
}

// WebAppsCreateOrUpdateRelayServiceConnectionOptions contains the optional parameters for the WebApps.CreateOrUpdateRelayServiceConnection method.
type WebAppsCreateOrUpdateRelayServiceConnectionOptions struct {
	// placeholder for future optional parameters
}

// WebAppsCreateOrUpdateRelayServiceConnectionSlotOptions contains the optional parameters for the WebApps.CreateOrUpdateRelayServiceConnectionSlot method.
type WebAppsCreateOrUpdateRelayServiceConnectionSlotOptions struct {
	// placeholder for future optional parameters
}

// WebAppsCreateOrUpdateSwiftVirtualNetworkConnectionWithCheckOptions contains the optional parameters for the WebApps.CreateOrUpdateSwiftVirtualNetworkConnectionWithCheck
// method.
type WebAppsCreateOrUpdateSwiftVirtualNetworkConnectionWithCheckOptions struct {
	// placeholder for future optional parameters
}

// WebAppsCreateOrUpdateSwiftVirtualNetworkConnectionWithCheckSlotOptions contains the optional parameters for the WebApps.CreateOrUpdateSwiftVirtualNetworkConnectionWithCheckSlot
// method.
type WebAppsCreateOrUpdateSwiftVirtualNetworkConnectionWithCheckSlotOptions struct {
	// placeholder for future optional parameters
}

// WebAppsCreateOrUpdateVnetConnectionGatewayOptions contains the optional parameters for the WebApps.CreateOrUpdateVnetConnectionGateway method.
type WebAppsCreateOrUpdateVnetConnectionGatewayOptions struct {
	// placeholder for future optional parameters
}

// WebAppsCreateOrUpdateVnetConnectionGatewaySlotOptions contains the optional parameters for the WebApps.CreateOrUpdateVnetConnectionGatewaySlot method.
type WebAppsCreateOrUpdateVnetConnectionGatewaySlotOptions struct {
	// placeholder for future optional parameters
}

// WebAppsCreateOrUpdateVnetConnectionOptions contains the optional parameters for the WebApps.CreateOrUpdateVnetConnection method.
type WebAppsCreateOrUpdateVnetConnectionOptions struct {
	// placeholder for future optional parameters
}

// WebAppsCreateOrUpdateVnetConnectionSlotOptions contains the optional parameters for the WebApps.CreateOrUpdateVnetConnectionSlot method.
type WebAppsCreateOrUpdateVnetConnectionSlotOptions struct {
	// placeholder for future optional parameters
}

// WebAppsDeleteBackupConfigurationOptions contains the optional parameters for the WebApps.DeleteBackupConfiguration method.
type WebAppsDeleteBackupConfigurationOptions struct {
	// placeholder for future optional parameters
}

// WebAppsDeleteBackupConfigurationSlotOptions contains the optional parameters for the WebApps.DeleteBackupConfigurationSlot method.
type WebAppsDeleteBackupConfigurationSlotOptions struct {
	// placeholder for future optional parameters
}

// WebAppsDeleteBackupOptions contains the optional parameters for the WebApps.DeleteBackup method.
type WebAppsDeleteBackupOptions struct {
	// placeholder for future optional parameters
}

// WebAppsDeleteBackupSlotOptions contains the optional parameters for the WebApps.DeleteBackupSlot method.
type WebAppsDeleteBackupSlotOptions struct {
	// placeholder for future optional parameters
}

// WebAppsDeleteContinuousWebJobOptions contains the optional parameters for the WebApps.DeleteContinuousWebJob method.
type WebAppsDeleteContinuousWebJobOptions struct {
	// placeholder for future optional parameters
}

// WebAppsDeleteContinuousWebJobSlotOptions contains the optional parameters for the WebApps.DeleteContinuousWebJobSlot method.
type WebAppsDeleteContinuousWebJobSlotOptions struct {
	// placeholder for future optional parameters
}

// WebAppsDeleteDeploymentOptions contains the optional parameters for the WebApps.DeleteDeployment method.
type WebAppsDeleteDeploymentOptions struct {
	// placeholder for future optional parameters
}

// WebAppsDeleteDeploymentSlotOptions contains the optional parameters for the WebApps.DeleteDeploymentSlot method.
type WebAppsDeleteDeploymentSlotOptions struct {
	// placeholder for future optional parameters
}

// WebAppsDeleteDomainOwnershipIdentifierOptions contains the optional parameters for the WebApps.DeleteDomainOwnershipIdentifier method.
type WebAppsDeleteDomainOwnershipIdentifierOptions struct {
	// placeholder for future optional parameters
}

// WebAppsDeleteDomainOwnershipIdentifierSlotOptions contains the optional parameters for the WebApps.DeleteDomainOwnershipIdentifierSlot method.
type WebAppsDeleteDomainOwnershipIdentifierSlotOptions struct {
	// placeholder for future optional parameters
}

// WebAppsDeleteFunctionOptions contains the optional parameters for the WebApps.DeleteFunction method.
type WebAppsDeleteFunctionOptions struct {
	// placeholder for future optional parameters
}

// WebAppsDeleteFunctionSecretOptions contains the optional parameters for the WebApps.DeleteFunctionSecret method.
type WebAppsDeleteFunctionSecretOptions struct {
	// placeholder for future optional parameters
}

// WebAppsDeleteFunctionSecretSlotOptions contains the optional parameters for the WebApps.DeleteFunctionSecretSlot method.
type WebAppsDeleteFunctionSecretSlotOptions struct {
	// placeholder for future optional parameters
}

// WebAppsDeleteHostNameBindingOptions contains the optional parameters for the WebApps.DeleteHostNameBinding method.
type WebAppsDeleteHostNameBindingOptions struct {
	// placeholder for future optional parameters
}

// WebAppsDeleteHostNameBindingSlotOptions contains the optional parameters for the WebApps.DeleteHostNameBindingSlot method.
type WebAppsDeleteHostNameBindingSlotOptions struct {
	// placeholder for future optional parameters
}

// WebAppsDeleteHostSecretOptions contains the optional parameters for the WebApps.DeleteHostSecret method.
type WebAppsDeleteHostSecretOptions struct {
	// placeholder for future optional parameters
}

// WebAppsDeleteHostSecretSlotOptions contains the optional parameters for the WebApps.DeleteHostSecretSlot method.
type WebAppsDeleteHostSecretSlotOptions struct {
	// placeholder for future optional parameters
}

// WebAppsDeleteHybridConnectionOptions contains the optional parameters for the WebApps.DeleteHybridConnection method.
type WebAppsDeleteHybridConnectionOptions struct {
	// placeholder for future optional parameters
}

// WebAppsDeleteHybridConnectionSlotOptions contains the optional parameters for the WebApps.DeleteHybridConnectionSlot method.
type WebAppsDeleteHybridConnectionSlotOptions struct {
	// placeholder for future optional parameters
}

// WebAppsDeleteInstanceFunctionSlotOptions contains the optional parameters for the WebApps.DeleteInstanceFunctionSlot method.
type WebAppsDeleteInstanceFunctionSlotOptions struct {
	// placeholder for future optional parameters
}

// WebAppsDeleteInstanceProcessOptions contains the optional parameters for the WebApps.DeleteInstanceProcess method.
type WebAppsDeleteInstanceProcessOptions struct {
	// placeholder for future optional parameters
}

// WebAppsDeleteInstanceProcessSlotOptions contains the optional parameters for the WebApps.DeleteInstanceProcessSlot method.
type WebAppsDeleteInstanceProcessSlotOptions struct {
	// placeholder for future optional parameters
}

// WebAppsDeleteOptions contains the optional parameters for the WebApps.Delete method.
type WebAppsDeleteOptions struct {
	// Specify false if you want to keep empty App Service plan. By default, empty App Service plan is deleted.
	DeleteEmptyServerFarm *bool
	// If true, web app metrics are also deleted.
	DeleteMetrics *bool
}

// WebAppsDeletePremierAddOnOptions contains the optional parameters for the WebApps.DeletePremierAddOn method.
type WebAppsDeletePremierAddOnOptions struct {
	// placeholder for future optional parameters
}

// WebAppsDeletePremierAddOnSlotOptions contains the optional parameters for the WebApps.DeletePremierAddOnSlot method.
type WebAppsDeletePremierAddOnSlotOptions struct {
	// placeholder for future optional parameters
}

// WebAppsDeleteProcessOptions contains the optional parameters for the WebApps.DeleteProcess method.
type WebAppsDeleteProcessOptions struct {
	// placeholder for future optional parameters
}

// WebAppsDeleteProcessSlotOptions contains the optional parameters for the WebApps.DeleteProcessSlot method.
type WebAppsDeleteProcessSlotOptions struct {
	// placeholder for future optional parameters
}

// WebAppsDeletePublicCertificateOptions contains the optional parameters for the WebApps.DeletePublicCertificate method.
type WebAppsDeletePublicCertificateOptions struct {
	// placeholder for future optional parameters
}

// WebAppsDeletePublicCertificateSlotOptions contains the optional parameters for the WebApps.DeletePublicCertificateSlot method.
type WebAppsDeletePublicCertificateSlotOptions struct {
	// placeholder for future optional parameters
}

// WebAppsDeleteRelayServiceConnectionOptions contains the optional parameters for the WebApps.DeleteRelayServiceConnection method.
type WebAppsDeleteRelayServiceConnectionOptions struct {
	// placeholder for future optional parameters
}

// WebAppsDeleteRelayServiceConnectionSlotOptions contains the optional parameters for the WebApps.DeleteRelayServiceConnectionSlot method.
type WebAppsDeleteRelayServiceConnectionSlotOptions struct {
	// placeholder for future optional parameters
}

// WebAppsDeleteSiteExtensionOptions contains the optional parameters for the WebApps.DeleteSiteExtension method.
type WebAppsDeleteSiteExtensionOptions struct {
	// placeholder for future optional parameters
}

// WebAppsDeleteSiteExtensionSlotOptions contains the optional parameters for the WebApps.DeleteSiteExtensionSlot method.
type WebAppsDeleteSiteExtensionSlotOptions struct {
	// placeholder for future optional parameters
}

// WebAppsDeleteSlotOptions contains the optional parameters for the WebApps.DeleteSlot method.
type WebAppsDeleteSlotOptions struct {
	// Specify false if you want to keep empty App Service plan. By default, empty App Service plan is deleted.
	DeleteEmptyServerFarm *bool
	// If true, web app metrics are also deleted.
	DeleteMetrics *bool
}

// WebAppsDeleteSourceControlOptions contains the optional parameters for the WebApps.DeleteSourceControl method.
type WebAppsDeleteSourceControlOptions struct {
	AdditionalFlags *string
}

// WebAppsDeleteSourceControlSlotOptions contains the optional parameters for the WebApps.DeleteSourceControlSlot method.
type WebAppsDeleteSourceControlSlotOptions struct {
	AdditionalFlags *string
}

// WebAppsDeleteSwiftVirtualNetworkOptions contains the optional parameters for the WebApps.DeleteSwiftVirtualNetwork method.
type WebAppsDeleteSwiftVirtualNetworkOptions struct {
	// placeholder for future optional parameters
}

// WebAppsDeleteSwiftVirtualNetworkSlotOptions contains the optional parameters for the WebApps.DeleteSwiftVirtualNetworkSlot method.
type WebAppsDeleteSwiftVirtualNetworkSlotOptions struct {
	// placeholder for future optional parameters
}

// WebAppsDeleteTriggeredWebJobOptions contains the optional parameters for the WebApps.DeleteTriggeredWebJob method.
type WebAppsDeleteTriggeredWebJobOptions struct {
	// placeholder for future optional parameters
}

// WebAppsDeleteTriggeredWebJobSlotOptions contains the optional parameters for the WebApps.DeleteTriggeredWebJobSlot method.
type WebAppsDeleteTriggeredWebJobSlotOptions struct {
	// placeholder for future optional parameters
}

// WebAppsDeleteVnetConnectionOptions contains the optional parameters for the WebApps.DeleteVnetConnection method.
type WebAppsDeleteVnetConnectionOptions struct {
	// placeholder for future optional parameters
}

// WebAppsDeleteVnetConnectionSlotOptions contains the optional parameters for the WebApps.DeleteVnetConnectionSlot method.
type WebAppsDeleteVnetConnectionSlotOptions struct {
	// placeholder for future optional parameters
}

// WebAppsDiscoverBackupOptions contains the optional parameters for the WebApps.DiscoverBackup method.
type WebAppsDiscoverBackupOptions struct {
	// placeholder for future optional parameters
}

// WebAppsDiscoverBackupSlotOptions contains the optional parameters for the WebApps.DiscoverBackupSlot method.
type WebAppsDiscoverBackupSlotOptions struct {
	// placeholder for future optional parameters
}

// WebAppsGenerateNewSitePublishingPasswordOptions contains the optional parameters for the WebApps.GenerateNewSitePublishingPassword method.
type WebAppsGenerateNewSitePublishingPasswordOptions struct {
	// placeholder for future optional parameters
}

// WebAppsGenerateNewSitePublishingPasswordSlotOptions contains the optional parameters for the WebApps.GenerateNewSitePublishingPasswordSlot method.
type WebAppsGenerateNewSitePublishingPasswordSlotOptions struct {
	// placeholder for future optional parameters
}

// WebAppsGetAppSettingKeyVaultReferenceOptions contains the optional parameters for the WebApps.GetAppSettingKeyVaultReference method.
type WebAppsGetAppSettingKeyVaultReferenceOptions struct {
	// placeholder for future optional parameters
}

// WebAppsGetAppSettingKeyVaultReferenceSlotOptions contains the optional parameters for the WebApps.GetAppSettingKeyVaultReferenceSlot method.
type WebAppsGetAppSettingKeyVaultReferenceSlotOptions struct {
	// placeholder for future optional parameters
}

// WebAppsGetAppSettingsKeyVaultReferencesOptions contains the optional parameters for the WebApps.GetAppSettingsKeyVaultReferences method.
type WebAppsGetAppSettingsKeyVaultReferencesOptions struct {
	// placeholder for future optional parameters
}

// WebAppsGetAppSettingsKeyVaultReferencesSlotOptions contains the optional parameters for the WebApps.GetAppSettingsKeyVaultReferencesSlot method.
type WebAppsGetAppSettingsKeyVaultReferencesSlotOptions struct {
	// placeholder for future optional parameters
}

// WebAppsGetAuthSettingsOptions contains the optional parameters for the WebApps.GetAuthSettings method.
type WebAppsGetAuthSettingsOptions struct {
	// placeholder for future optional parameters
}

// WebAppsGetAuthSettingsSlotOptions contains the optional parameters for the WebApps.GetAuthSettingsSlot method.
type WebAppsGetAuthSettingsSlotOptions struct {
	// placeholder for future optional parameters
}

// WebAppsGetAuthSettingsV2Options contains the optional parameters for the WebApps.GetAuthSettingsV2 method.
type WebAppsGetAuthSettingsV2Options struct {
	// placeholder for future optional parameters
}

// WebAppsGetAuthSettingsV2SlotOptions contains the optional parameters for the WebApps.GetAuthSettingsV2Slot method.
type WebAppsGetAuthSettingsV2SlotOptions struct {
	// placeholder for future optional parameters
}

// WebAppsGetBackupConfigurationOptions contains the optional parameters for the WebApps.GetBackupConfiguration method.
type WebAppsGetBackupConfigurationOptions struct {
	// placeholder for future optional parameters
}

// WebAppsGetBackupConfigurationSlotOptions contains the optional parameters for the WebApps.GetBackupConfigurationSlot method.
type WebAppsGetBackupConfigurationSlotOptions struct {
	// placeholder for future optional parameters
}

// WebAppsGetBackupStatusOptions contains the optional parameters for the WebApps.GetBackupStatus method.
type WebAppsGetBackupStatusOptions struct {
	// placeholder for future optional parameters
}

// WebAppsGetBackupStatusSlotOptions contains the optional parameters for the WebApps.GetBackupStatusSlot method.
type WebAppsGetBackupStatusSlotOptions struct {
	// placeholder for future optional parameters
}

// WebAppsGetConfigurationOptions contains the optional parameters for the WebApps.GetConfiguration method.
type WebAppsGetConfigurationOptions struct {
	// placeholder for future optional parameters
}

// WebAppsGetConfigurationSlotOptions contains the optional parameters for the WebApps.GetConfigurationSlot method.
type WebAppsGetConfigurationSlotOptions struct {
	// placeholder for future optional parameters
}

// WebAppsGetConfigurationSnapshotOptions contains the optional parameters for the WebApps.GetConfigurationSnapshot method.
type WebAppsGetConfigurationSnapshotOptions struct {
	// placeholder for future optional parameters
}

// WebAppsGetConfigurationSnapshotSlotOptions contains the optional parameters for the WebApps.GetConfigurationSnapshotSlot method.
type WebAppsGetConfigurationSnapshotSlotOptions struct {
	// placeholder for future optional parameters
}

// WebAppsGetContainerLogsZipOptions contains the optional parameters for the WebApps.GetContainerLogsZip method.
type WebAppsGetContainerLogsZipOptions struct {
	// placeholder for future optional parameters
}

// WebAppsGetContainerLogsZipSlotOptions contains the optional parameters for the WebApps.GetContainerLogsZipSlot method.
type WebAppsGetContainerLogsZipSlotOptions struct {
	// placeholder for future optional parameters
}

// WebAppsGetContinuousWebJobOptions contains the optional parameters for the WebApps.GetContinuousWebJob method.
type WebAppsGetContinuousWebJobOptions struct {
	// placeholder for future optional parameters
}

// WebAppsGetContinuousWebJobSlotOptions contains the optional parameters for the WebApps.GetContinuousWebJobSlot method.
type WebAppsGetContinuousWebJobSlotOptions struct {
	// placeholder for future optional parameters
}

// WebAppsGetDeploymentOptions contains the optional parameters for the WebApps.GetDeployment method.
type WebAppsGetDeploymentOptions struct {
	// placeholder for future optional parameters
}

// WebAppsGetDeploymentSlotOptions contains the optional parameters for the WebApps.GetDeploymentSlot method.
type WebAppsGetDeploymentSlotOptions struct {
	// placeholder for future optional parameters
}

// WebAppsGetDiagnosticLogsConfigurationOptions contains the optional parameters for the WebApps.GetDiagnosticLogsConfiguration method.
type WebAppsGetDiagnosticLogsConfigurationOptions struct {
	// placeholder for future optional parameters
}

// WebAppsGetDiagnosticLogsConfigurationSlotOptions contains the optional parameters for the WebApps.GetDiagnosticLogsConfigurationSlot method.
type WebAppsGetDiagnosticLogsConfigurationSlotOptions struct {
	// placeholder for future optional parameters
}

// WebAppsGetDomainOwnershipIdentifierOptions contains the optional parameters for the WebApps.GetDomainOwnershipIdentifier method.
type WebAppsGetDomainOwnershipIdentifierOptions struct {
	// placeholder for future optional parameters
}

// WebAppsGetDomainOwnershipIdentifierSlotOptions contains the optional parameters for the WebApps.GetDomainOwnershipIdentifierSlot method.
type WebAppsGetDomainOwnershipIdentifierSlotOptions struct {
	// placeholder for future optional parameters
}

// WebAppsGetFtpAllowedOptions contains the optional parameters for the WebApps.GetFtpAllowed method.
type WebAppsGetFtpAllowedOptions struct {
	// placeholder for future optional parameters
}

// WebAppsGetFtpAllowedSlotOptions contains the optional parameters for the WebApps.GetFtpAllowedSlot method.
type WebAppsGetFtpAllowedSlotOptions struct {
	// placeholder for future optional parameters
}

// WebAppsGetFunctionOptions contains the optional parameters for the WebApps.GetFunction method.
type WebAppsGetFunctionOptions struct {
	// placeholder for future optional parameters
}

// WebAppsGetFunctionsAdminTokenOptions contains the optional parameters for the WebApps.GetFunctionsAdminToken method.
type WebAppsGetFunctionsAdminTokenOptions struct {
	// placeholder for future optional parameters
}

// WebAppsGetFunctionsAdminTokenSlotOptions contains the optional parameters for the WebApps.GetFunctionsAdminTokenSlot method.
type WebAppsGetFunctionsAdminTokenSlotOptions struct {
	// placeholder for future optional parameters
}

// WebAppsGetHostNameBindingOptions contains the optional parameters for the WebApps.GetHostNameBinding method.
type WebAppsGetHostNameBindingOptions struct {
	// placeholder for future optional parameters
}

// WebAppsGetHostNameBindingSlotOptions contains the optional parameters for the WebApps.GetHostNameBindingSlot method.
type WebAppsGetHostNameBindingSlotOptions struct {
	// placeholder for future optional parameters
}

// WebAppsGetHybridConnectionOptions contains the optional parameters for the WebApps.GetHybridConnection method.
type WebAppsGetHybridConnectionOptions struct {
	// placeholder for future optional parameters
}

// WebAppsGetHybridConnectionSlotOptions contains the optional parameters for the WebApps.GetHybridConnectionSlot method.
type WebAppsGetHybridConnectionSlotOptions struct {
	// placeholder for future optional parameters
}

// WebAppsGetInstanceFunctionSlotOptions contains the optional parameters for the WebApps.GetInstanceFunctionSlot method.
type WebAppsGetInstanceFunctionSlotOptions struct {
	// placeholder for future optional parameters
}

// WebAppsGetInstanceInfoOptions contains the optional parameters for the WebApps.GetInstanceInfo method.
type WebAppsGetInstanceInfoOptions struct {
	// placeholder for future optional parameters
}

// WebAppsGetInstanceInfoSlotOptions contains the optional parameters for the WebApps.GetInstanceInfoSlot method.
type WebAppsGetInstanceInfoSlotOptions struct {
	// placeholder for future optional parameters
}

// WebAppsGetInstanceMSDeployLogOptions contains the optional parameters for the WebApps.GetInstanceMSDeployLog method.
type WebAppsGetInstanceMSDeployLogOptions struct {
	// placeholder for future optional parameters
}

// WebAppsGetInstanceMSDeployLogSlotOptions contains the optional parameters for the WebApps.GetInstanceMSDeployLogSlot method.
type WebAppsGetInstanceMSDeployLogSlotOptions struct {
	// placeholder for future optional parameters
}

// WebAppsGetInstanceMsDeployStatusOptions contains the optional parameters for the WebApps.GetInstanceMsDeployStatus method.
type WebAppsGetInstanceMsDeployStatusOptions struct {
	// placeholder for future optional parameters
}

// WebAppsGetInstanceMsDeployStatusSlotOptions contains the optional parameters for the WebApps.GetInstanceMsDeployStatusSlot method.
type WebAppsGetInstanceMsDeployStatusSlotOptions struct {
	// placeholder for future optional parameters
}

// WebAppsGetInstanceProcessDumpOptions contains the optional parameters for the WebApps.GetInstanceProcessDump method.
type WebAppsGetInstanceProcessDumpOptions struct {
	// placeholder for future optional parameters
}

// WebAppsGetInstanceProcessDumpSlotOptions contains the optional parameters for the WebApps.GetInstanceProcessDumpSlot method.
type WebAppsGetInstanceProcessDumpSlotOptions struct {
	// placeholder for future optional parameters
}

// WebAppsGetInstanceProcessModuleOptions contains the optional parameters for the WebApps.GetInstanceProcessModule method.
type WebAppsGetInstanceProcessModuleOptions struct {
	// placeholder for future optional parameters
}

// WebAppsGetInstanceProcessModuleSlotOptions contains the optional parameters for the WebApps.GetInstanceProcessModuleSlot method.
type WebAppsGetInstanceProcessModuleSlotOptions struct {
	// placeholder for future optional parameters
}

// WebAppsGetInstanceProcessOptions contains the optional parameters for the WebApps.GetInstanceProcess method.
type WebAppsGetInstanceProcessOptions struct {
	// placeholder for future optional parameters
}

// WebAppsGetInstanceProcessSlotOptions contains the optional parameters for the WebApps.GetInstanceProcessSlot method.
type WebAppsGetInstanceProcessSlotOptions struct {
	// placeholder for future optional parameters
}

// WebAppsGetMSDeployLogOptions contains the optional parameters for the WebApps.GetMSDeployLog method.
type WebAppsGetMSDeployLogOptions struct {
	// placeholder for future optional parameters
}

// WebAppsGetMSDeployLogSlotOptions contains the optional parameters for the WebApps.GetMSDeployLogSlot method.
type WebAppsGetMSDeployLogSlotOptions struct {
	// placeholder for future optional parameters
}

// WebAppsGetMSDeployStatusOptions contains the optional parameters for the WebApps.GetMSDeployStatus method.
type WebAppsGetMSDeployStatusOptions struct {
	// placeholder for future optional parameters
}

// WebAppsGetMSDeployStatusSlotOptions contains the optional parameters for the WebApps.GetMSDeployStatusSlot method.
type WebAppsGetMSDeployStatusSlotOptions struct {
	// placeholder for future optional parameters
}

// WebAppsGetMigrateMySQLStatusOptions contains the optional parameters for the WebApps.GetMigrateMySQLStatus method.
type WebAppsGetMigrateMySQLStatusOptions struct {
	// placeholder for future optional parameters
}

// WebAppsGetMigrateMySQLStatusSlotOptions contains the optional parameters for the WebApps.GetMigrateMySQLStatusSlot method.
type WebAppsGetMigrateMySQLStatusSlotOptions struct {
	// placeholder for future optional parameters
}

// WebAppsGetNetworkTraceOperationOptions contains the optional parameters for the WebApps.GetNetworkTraceOperation method.
type WebAppsGetNetworkTraceOperationOptions struct {
	// placeholder for future optional parameters
}

// WebAppsGetNetworkTraceOperationSlotOptions contains the optional parameters for the WebApps.GetNetworkTraceOperationSlot method.
type WebAppsGetNetworkTraceOperationSlotOptions struct {
	// placeholder for future optional parameters
}

// WebAppsGetNetworkTraceOperationSlotV2Options contains the optional parameters for the WebApps.GetNetworkTraceOperationSlotV2 method.
type WebAppsGetNetworkTraceOperationSlotV2Options struct {
	// placeholder for future optional parameters
}

// WebAppsGetNetworkTraceOperationV2Options contains the optional parameters for the WebApps.GetNetworkTraceOperationV2 method.
type WebAppsGetNetworkTraceOperationV2Options struct {
	// placeholder for future optional parameters
}

// WebAppsGetNetworkTracesOptions contains the optional parameters for the WebApps.GetNetworkTraces method.
type WebAppsGetNetworkTracesOptions struct {
	// placeholder for future optional parameters
}

// WebAppsGetNetworkTracesSlotOptions contains the optional parameters for the WebApps.GetNetworkTracesSlot method.
type WebAppsGetNetworkTracesSlotOptions struct {
	// placeholder for future optional parameters
}

// WebAppsGetNetworkTracesSlotV2Options contains the optional parameters for the WebApps.GetNetworkTracesSlotV2 method.
type WebAppsGetNetworkTracesSlotV2Options struct {
	// placeholder for future optional parameters
}

// WebAppsGetNetworkTracesV2Options contains the optional parameters for the WebApps.GetNetworkTracesV2 method.
type WebAppsGetNetworkTracesV2Options struct {
	// placeholder for future optional parameters
}

// WebAppsGetOptions contains the optional parameters for the WebApps.Get method.
type WebAppsGetOptions struct {
	// placeholder for future optional parameters
}

// WebAppsGetPremierAddOnOptions contains the optional parameters for the WebApps.GetPremierAddOn method.
type WebAppsGetPremierAddOnOptions struct {
	// placeholder for future optional parameters
}

// WebAppsGetPremierAddOnSlotOptions contains the optional parameters for the WebApps.GetPremierAddOnSlot method.
type WebAppsGetPremierAddOnSlotOptions struct {
	// placeholder for future optional parameters
}

// WebAppsGetPrivateAccessOptions contains the optional parameters for the WebApps.GetPrivateAccess method.
type WebAppsGetPrivateAccessOptions struct {
	// placeholder for future optional parameters
}

// WebAppsGetPrivateAccessSlotOptions contains the optional parameters for the WebApps.GetPrivateAccessSlot method.
type WebAppsGetPrivateAccessSlotOptions struct {
	// placeholder for future optional parameters
}

// WebAppsGetPrivateEndpointConnectionListOptions contains the optional parameters for the WebApps.GetPrivateEndpointConnectionList method.
type WebAppsGetPrivateEndpointConnectionListOptions struct {
	// placeholder for future optional parameters
}

// WebAppsGetPrivateEndpointConnectionListSlotOptions contains the optional parameters for the WebApps.GetPrivateEndpointConnectionListSlot method.
type WebAppsGetPrivateEndpointConnectionListSlotOptions struct {
	// placeholder for future optional parameters
}

// WebAppsGetPrivateEndpointConnectionOptions contains the optional parameters for the WebApps.GetPrivateEndpointConnection method.
type WebAppsGetPrivateEndpointConnectionOptions struct {
	// placeholder for future optional parameters
}

// WebAppsGetPrivateEndpointConnectionSlotOptions contains the optional parameters for the WebApps.GetPrivateEndpointConnectionSlot method.
type WebAppsGetPrivateEndpointConnectionSlotOptions struct {
	// placeholder for future optional parameters
}

// WebAppsGetPrivateLinkResourcesOptions contains the optional parameters for the WebApps.GetPrivateLinkResources method.
type WebAppsGetPrivateLinkResourcesOptions struct {
	// placeholder for future optional parameters
}

// WebAppsGetPrivateLinkResourcesSlotOptions contains the optional parameters for the WebApps.GetPrivateLinkResourcesSlot method.
type WebAppsGetPrivateLinkResourcesSlotOptions struct {
	// placeholder for future optional parameters
}

// WebAppsGetProcessDumpOptions contains the optional parameters for the WebApps.GetProcessDump method.
type WebAppsGetProcessDumpOptions struct {
	// placeholder for future optional parameters
}

// WebAppsGetProcessDumpSlotOptions contains the optional parameters for the WebApps.GetProcessDumpSlot method.
type WebAppsGetProcessDumpSlotOptions struct {
	// placeholder for future optional parameters
}

// WebAppsGetProcessModuleOptions contains the optional parameters for the WebApps.GetProcessModule method.
type WebAppsGetProcessModuleOptions struct {
	// placeholder for future optional parameters
}

// WebAppsGetProcessModuleSlotOptions contains the optional parameters for the WebApps.GetProcessModuleSlot method.
type WebAppsGetProcessModuleSlotOptions struct {
	// placeholder for future optional parameters
}

// WebAppsGetProcessOptions contains the optional parameters for the WebApps.GetProcess method.
type WebAppsGetProcessOptions struct {
	// placeholder for future optional parameters
}

// WebAppsGetProcessSlotOptions contains the optional parameters for the WebApps.GetProcessSlot method.
type WebAppsGetProcessSlotOptions struct {
	// placeholder for future optional parameters
}

// WebAppsGetPublicCertificateOptions contains the optional parameters for the WebApps.GetPublicCertificate method.
type WebAppsGetPublicCertificateOptions struct {
	// placeholder for future optional parameters
}

// WebAppsGetPublicCertificateSlotOptions contains the optional parameters for the WebApps.GetPublicCertificateSlot method.
type WebAppsGetPublicCertificateSlotOptions struct {
	// placeholder for future optional parameters
}

// WebAppsGetRelayServiceConnectionOptions contains the optional parameters for the WebApps.GetRelayServiceConnection method.
type WebAppsGetRelayServiceConnectionOptions struct {
	// placeholder for future optional parameters
}

// WebAppsGetRelayServiceConnectionSlotOptions contains the optional parameters for the WebApps.GetRelayServiceConnectionSlot method.
type WebAppsGetRelayServiceConnectionSlotOptions struct {
	// placeholder for future optional parameters
}

// WebAppsGetScmAllowedOptions contains the optional parameters for the WebApps.GetScmAllowed method.
type WebAppsGetScmAllowedOptions struct {
	// placeholder for future optional parameters
}

// WebAppsGetScmAllowedSlotOptions contains the optional parameters for the WebApps.GetScmAllowedSlot method.
type WebAppsGetScmAllowedSlotOptions struct {
	// placeholder for future optional parameters
}

// WebAppsGetSiteConnectionStringKeyVaultReferenceOptions contains the optional parameters for the WebApps.GetSiteConnectionStringKeyVaultReference method.
type WebAppsGetSiteConnectionStringKeyVaultReferenceOptions struct {
	// placeholder for future optional parameters
}

// WebAppsGetSiteConnectionStringKeyVaultReferenceSlotOptions contains the optional parameters for the WebApps.GetSiteConnectionStringKeyVaultReferenceSlot
// method.
type WebAppsGetSiteConnectionStringKeyVaultReferenceSlotOptions struct {
	// placeholder for future optional parameters
}

// WebAppsGetSiteConnectionStringKeyVaultReferencesOptions contains the optional parameters for the WebApps.GetSiteConnectionStringKeyVaultReferences method.
type WebAppsGetSiteConnectionStringKeyVaultReferencesOptions struct {
	// placeholder for future optional parameters
}

// WebAppsGetSiteConnectionStringKeyVaultReferencesSlotOptions contains the optional parameters for the WebApps.GetSiteConnectionStringKeyVaultReferencesSlot
// method.
type WebAppsGetSiteConnectionStringKeyVaultReferencesSlotOptions struct {
	// placeholder for future optional parameters
}

// WebAppsGetSiteExtensionOptions contains the optional parameters for the WebApps.GetSiteExtension method.
type WebAppsGetSiteExtensionOptions struct {
	// placeholder for future optional parameters
}

// WebAppsGetSiteExtensionSlotOptions contains the optional parameters for the WebApps.GetSiteExtensionSlot method.
type WebAppsGetSiteExtensionSlotOptions struct {
	// placeholder for future optional parameters
}

// WebAppsGetSitePhpErrorLogFlagOptions contains the optional parameters for the WebApps.GetSitePhpErrorLogFlag method.
type WebAppsGetSitePhpErrorLogFlagOptions struct {
	// placeholder for future optional parameters
}

// WebAppsGetSitePhpErrorLogFlagSlotOptions contains the optional parameters for the WebApps.GetSitePhpErrorLogFlagSlot method.
type WebAppsGetSitePhpErrorLogFlagSlotOptions struct {
	// placeholder for future optional parameters
}

// WebAppsGetSlotOptions contains the optional parameters for the WebApps.GetSlot method.
type WebAppsGetSlotOptions struct {
	// placeholder for future optional parameters
}

// WebAppsGetSourceControlOptions contains the optional parameters for the WebApps.GetSourceControl method.
type WebAppsGetSourceControlOptions struct {
	// placeholder for future optional parameters
}

// WebAppsGetSourceControlSlotOptions contains the optional parameters for the WebApps.GetSourceControlSlot method.
type WebAppsGetSourceControlSlotOptions struct {
	// placeholder for future optional parameters
}

// WebAppsGetSwiftVirtualNetworkConnectionOptions contains the optional parameters for the WebApps.GetSwiftVirtualNetworkConnection method.
type WebAppsGetSwiftVirtualNetworkConnectionOptions struct {
	// placeholder for future optional parameters
}

// WebAppsGetSwiftVirtualNetworkConnectionSlotOptions contains the optional parameters for the WebApps.GetSwiftVirtualNetworkConnectionSlot method.
type WebAppsGetSwiftVirtualNetworkConnectionSlotOptions struct {
	// placeholder for future optional parameters
}

// WebAppsGetTriggeredWebJobHistoryOptions contains the optional parameters for the WebApps.GetTriggeredWebJobHistory method.
type WebAppsGetTriggeredWebJobHistoryOptions struct {
	// placeholder for future optional parameters
}

// WebAppsGetTriggeredWebJobHistorySlotOptions contains the optional parameters for the WebApps.GetTriggeredWebJobHistorySlot method.
type WebAppsGetTriggeredWebJobHistorySlotOptions struct {
	// placeholder for future optional parameters
}

// WebAppsGetTriggeredWebJobOptions contains the optional parameters for the WebApps.GetTriggeredWebJob method.
type WebAppsGetTriggeredWebJobOptions struct {
	// placeholder for future optional parameters
}

// WebAppsGetTriggeredWebJobSlotOptions contains the optional parameters for the WebApps.GetTriggeredWebJobSlot method.
type WebAppsGetTriggeredWebJobSlotOptions struct {
	// placeholder for future optional parameters
}

// WebAppsGetVnetConnectionGatewayOptions contains the optional parameters for the WebApps.GetVnetConnectionGateway method.
type WebAppsGetVnetConnectionGatewayOptions struct {
	// placeholder for future optional parameters
}

// WebAppsGetVnetConnectionGatewaySlotOptions contains the optional parameters for the WebApps.GetVnetConnectionGatewaySlot method.
type WebAppsGetVnetConnectionGatewaySlotOptions struct {
	// placeholder for future optional parameters
}

// WebAppsGetVnetConnectionOptions contains the optional parameters for the WebApps.GetVnetConnection method.
type WebAppsGetVnetConnectionOptions struct {
	// placeholder for future optional parameters
}

// WebAppsGetVnetConnectionSlotOptions contains the optional parameters for the WebApps.GetVnetConnectionSlot method.
type WebAppsGetVnetConnectionSlotOptions struct {
	// placeholder for future optional parameters
}

// WebAppsGetWebJobOptions contains the optional parameters for the WebApps.GetWebJob method.
type WebAppsGetWebJobOptions struct {
	// placeholder for future optional parameters
}

// WebAppsGetWebJobSlotOptions contains the optional parameters for the WebApps.GetWebJobSlot method.
type WebAppsGetWebJobSlotOptions struct {
	// placeholder for future optional parameters
}

// WebAppsGetWebSiteContainerLogsOptions contains the optional parameters for the WebApps.GetWebSiteContainerLogs method.
type WebAppsGetWebSiteContainerLogsOptions struct {
	// placeholder for future optional parameters
}

// WebAppsGetWebSiteContainerLogsSlotOptions contains the optional parameters for the WebApps.GetWebSiteContainerLogsSlot method.
type WebAppsGetWebSiteContainerLogsSlotOptions struct {
	// placeholder for future optional parameters
}

// WebAppsIsCloneableOptions contains the optional parameters for the WebApps.IsCloneable method.
type WebAppsIsCloneableOptions struct {
	// placeholder for future optional parameters
}

// WebAppsIsCloneableSlotOptions contains the optional parameters for the WebApps.IsCloneableSlot method.
type WebAppsIsCloneableSlotOptions struct {
	// placeholder for future optional parameters
}

// WebAppsListApplicationSettingsOptions contains the optional parameters for the WebApps.ListApplicationSettings method.
type WebAppsListApplicationSettingsOptions struct {
	// placeholder for future optional parameters
}

// WebAppsListApplicationSettingsSlotOptions contains the optional parameters for the WebApps.ListApplicationSettingsSlot method.
type WebAppsListApplicationSettingsSlotOptions struct {
	// placeholder for future optional parameters
}

// WebAppsListAzureStorageAccountsOptions contains the optional parameters for the WebApps.ListAzureStorageAccounts method.
type WebAppsListAzureStorageAccountsOptions struct {
	// placeholder for future optional parameters
}

// WebAppsListAzureStorageAccountsSlotOptions contains the optional parameters for the WebApps.ListAzureStorageAccountsSlot method.
type WebAppsListAzureStorageAccountsSlotOptions struct {
	// placeholder for future optional parameters
}

// WebAppsListBackupStatusSecretsOptions contains the optional parameters for the WebApps.ListBackupStatusSecrets method.
type WebAppsListBackupStatusSecretsOptions struct {
	// placeholder for future optional parameters
}

// WebAppsListBackupStatusSecretsSlotOptions contains the optional parameters for the WebApps.ListBackupStatusSecretsSlot method.
type WebAppsListBackupStatusSecretsSlotOptions struct {
	// placeholder for future optional parameters
}

// WebAppsListBackupsOptions contains the optional parameters for the WebApps.ListBackups method.
type WebAppsListBackupsOptions struct {
	// placeholder for future optional parameters
}

// WebAppsListBackupsSlotOptions contains the optional parameters for the WebApps.ListBackupsSlot method.
type WebAppsListBackupsSlotOptions struct {
	// placeholder for future optional parameters
}

// WebAppsListBasicPublishingCredentialsPoliciesOptions contains the optional parameters for the WebApps.ListBasicPublishingCredentialsPolicies method.
type WebAppsListBasicPublishingCredentialsPoliciesOptions struct {
	// placeholder for future optional parameters
}

// WebAppsListBasicPublishingCredentialsPoliciesSlotOptions contains the optional parameters for the WebApps.ListBasicPublishingCredentialsPoliciesSlot
// method.
type WebAppsListBasicPublishingCredentialsPoliciesSlotOptions struct {
	// placeholder for future optional parameters
}

// WebAppsListByResourceGroupOptions contains the optional parameters for the WebApps.ListByResourceGroup method.
type WebAppsListByResourceGroupOptions struct {
	// Specify <strong>true</strong> to include deployment slots in results. The default is false, which only gives you the production slot of all apps.
	IncludeSlots *bool
}

// WebAppsListConfigurationSnapshotInfoOptions contains the optional parameters for the WebApps.ListConfigurationSnapshotInfo method.
type WebAppsListConfigurationSnapshotInfoOptions struct {
	// placeholder for future optional parameters
}

// WebAppsListConfigurationSnapshotInfoSlotOptions contains the optional parameters for the WebApps.ListConfigurationSnapshotInfoSlot method.
type WebAppsListConfigurationSnapshotInfoSlotOptions struct {
	// placeholder for future optional parameters
}

// WebAppsListConfigurationsOptions contains the optional parameters for the WebApps.ListConfigurations method.
type WebAppsListConfigurationsOptions struct {
	// placeholder for future optional parameters
}

// WebAppsListConfigurationsSlotOptions contains the optional parameters for the WebApps.ListConfigurationsSlot method.
type WebAppsListConfigurationsSlotOptions struct {
	// placeholder for future optional parameters
}

// WebAppsListConnectionStringsOptions contains the optional parameters for the WebApps.ListConnectionStrings method.
type WebAppsListConnectionStringsOptions struct {
	// placeholder for future optional parameters
}

// WebAppsListConnectionStringsSlotOptions contains the optional parameters for the WebApps.ListConnectionStringsSlot method.
type WebAppsListConnectionStringsSlotOptions struct {
	// placeholder for future optional parameters
}

// WebAppsListContinuousWebJobsOptions contains the optional parameters for the WebApps.ListContinuousWebJobs method.
type WebAppsListContinuousWebJobsOptions struct {
	// placeholder for future optional parameters
}

// WebAppsListContinuousWebJobsSlotOptions contains the optional parameters for the WebApps.ListContinuousWebJobsSlot method.
type WebAppsListContinuousWebJobsSlotOptions struct {
	// placeholder for future optional parameters
}

// WebAppsListDeploymentLogOptions contains the optional parameters for the WebApps.ListDeploymentLog method.
type WebAppsListDeploymentLogOptions struct {
	// placeholder for future optional parameters
}

// WebAppsListDeploymentLogSlotOptions contains the optional parameters for the WebApps.ListDeploymentLogSlot method.
type WebAppsListDeploymentLogSlotOptions struct {
	// placeholder for future optional parameters
}

// WebAppsListDeploymentsOptions contains the optional parameters for the WebApps.ListDeployments method.
type WebAppsListDeploymentsOptions struct {
	// placeholder for future optional parameters
}

// WebAppsListDeploymentsSlotOptions contains the optional parameters for the WebApps.ListDeploymentsSlot method.
type WebAppsListDeploymentsSlotOptions struct {
	// placeholder for future optional parameters
}

// WebAppsListDomainOwnershipIdentifiersOptions contains the optional parameters for the WebApps.ListDomainOwnershipIdentifiers method.
type WebAppsListDomainOwnershipIdentifiersOptions struct {
	// placeholder for future optional parameters
}

// WebAppsListDomainOwnershipIdentifiersSlotOptions contains the optional parameters for the WebApps.ListDomainOwnershipIdentifiersSlot method.
type WebAppsListDomainOwnershipIdentifiersSlotOptions struct {
	// placeholder for future optional parameters
}

// WebAppsListFunctionKeysOptions contains the optional parameters for the WebApps.ListFunctionKeys method.
type WebAppsListFunctionKeysOptions struct {
	// placeholder for future optional parameters
}

// WebAppsListFunctionKeysSlotOptions contains the optional parameters for the WebApps.ListFunctionKeysSlot method.
type WebAppsListFunctionKeysSlotOptions struct {
	// placeholder for future optional parameters
}

// WebAppsListFunctionSecretsOptions contains the optional parameters for the WebApps.ListFunctionSecrets method.
type WebAppsListFunctionSecretsOptions struct {
	// placeholder for future optional parameters
}

// WebAppsListFunctionSecretsSlotOptions contains the optional parameters for the WebApps.ListFunctionSecretsSlot method.
type WebAppsListFunctionSecretsSlotOptions struct {
	// placeholder for future optional parameters
}

// WebAppsListFunctionsOptions contains the optional parameters for the WebApps.ListFunctions method.
type WebAppsListFunctionsOptions struct {
	// placeholder for future optional parameters
}

// WebAppsListHostKeysOptions contains the optional parameters for the WebApps.ListHostKeys method.
type WebAppsListHostKeysOptions struct {
	// placeholder for future optional parameters
}

// WebAppsListHostKeysSlotOptions contains the optional parameters for the WebApps.ListHostKeysSlot method.
type WebAppsListHostKeysSlotOptions struct {
	// placeholder for future optional parameters
}

// WebAppsListHostNameBindingsOptions contains the optional parameters for the WebApps.ListHostNameBindings method.
type WebAppsListHostNameBindingsOptions struct {
	// placeholder for future optional parameters
}

// WebAppsListHostNameBindingsSlotOptions contains the optional parameters for the WebApps.ListHostNameBindingsSlot method.
type WebAppsListHostNameBindingsSlotOptions struct {
	// placeholder for future optional parameters
}

// WebAppsListHybridConnectionsOptions contains the optional parameters for the WebApps.ListHybridConnections method.
type WebAppsListHybridConnectionsOptions struct {
	// placeholder for future optional parameters
}

// WebAppsListHybridConnectionsSlotOptions contains the optional parameters for the WebApps.ListHybridConnectionsSlot method.
type WebAppsListHybridConnectionsSlotOptions struct {
	// placeholder for future optional parameters
}

// WebAppsListInstanceFunctionsSlotOptions contains the optional parameters for the WebApps.ListInstanceFunctionsSlot method.
type WebAppsListInstanceFunctionsSlotOptions struct {
	// placeholder for future optional parameters
}

// WebAppsListInstanceIdentifiersOptions contains the optional parameters for the WebApps.ListInstanceIdentifiers method.
type WebAppsListInstanceIdentifiersOptions struct {
	// placeholder for future optional parameters
}

// WebAppsListInstanceIdentifiersSlotOptions contains the optional parameters for the WebApps.ListInstanceIdentifiersSlot method.
type WebAppsListInstanceIdentifiersSlotOptions struct {
	// placeholder for future optional parameters
}

// WebAppsListInstanceProcessModulesOptions contains the optional parameters for the WebApps.ListInstanceProcessModules method.
type WebAppsListInstanceProcessModulesOptions struct {
	// placeholder for future optional parameters
}

// WebAppsListInstanceProcessModulesSlotOptions contains the optional parameters for the WebApps.ListInstanceProcessModulesSlot method.
type WebAppsListInstanceProcessModulesSlotOptions struct {
	// placeholder for future optional parameters
}

// WebAppsListInstanceProcessThreadsOptions contains the optional parameters for the WebApps.ListInstanceProcessThreads method.
type WebAppsListInstanceProcessThreadsOptions struct {
	// placeholder for future optional parameters
}

// WebAppsListInstanceProcessThreadsSlotOptions contains the optional parameters for the WebApps.ListInstanceProcessThreadsSlot method.
type WebAppsListInstanceProcessThreadsSlotOptions struct {
	// placeholder for future optional parameters
}

// WebAppsListInstanceProcessesOptions contains the optional parameters for the WebApps.ListInstanceProcesses method.
type WebAppsListInstanceProcessesOptions struct {
	// placeholder for future optional parameters
}

// WebAppsListInstanceProcessesSlotOptions contains the optional parameters for the WebApps.ListInstanceProcessesSlot method.
type WebAppsListInstanceProcessesSlotOptions struct {
	// placeholder for future optional parameters
}

// WebAppsListMetadataOptions contains the optional parameters for the WebApps.ListMetadata method.
type WebAppsListMetadataOptions struct {
	// placeholder for future optional parameters
}

// WebAppsListMetadataSlotOptions contains the optional parameters for the WebApps.ListMetadataSlot method.
type WebAppsListMetadataSlotOptions struct {
	// placeholder for future optional parameters
}

// WebAppsListNetworkFeaturesOptions contains the optional parameters for the WebApps.ListNetworkFeatures method.
type WebAppsListNetworkFeaturesOptions struct {
	// placeholder for future optional parameters
}

// WebAppsListNetworkFeaturesSlotOptions contains the optional parameters for the WebApps.ListNetworkFeaturesSlot method.
type WebAppsListNetworkFeaturesSlotOptions struct {
	// placeholder for future optional parameters
}

// WebAppsListOptions contains the optional parameters for the WebApps.List method.
type WebAppsListOptions struct {
	// placeholder for future optional parameters
}

// WebAppsListPerfMonCountersOptions contains the optional parameters for the WebApps.ListPerfMonCounters method.
type WebAppsListPerfMonCountersOptions struct {
	// Return only usages/metrics specified in the filter. Filter conforms to odata syntax. Example: $filter=(startTime eq 2014-01-01T00:00:00Z and endTime
	// eq 2014-12-31T23:59:59Z and timeGrain eq duration'[Hour|Minute|Day]'.
	Filter *string
}

// WebAppsListPerfMonCountersSlotOptions contains the optional parameters for the WebApps.ListPerfMonCountersSlot method.
type WebAppsListPerfMonCountersSlotOptions struct {
	// Return only usages/metrics specified in the filter. Filter conforms to odata syntax. Example: $filter=(startTime eq 2014-01-01T00:00:00Z and endTime
	// eq 2014-12-31T23:59:59Z and timeGrain eq duration'[Hour|Minute|Day]'.
	Filter *string
}

// WebAppsListPremierAddOnsOptions contains the optional parameters for the WebApps.ListPremierAddOns method.
type WebAppsListPremierAddOnsOptions struct {
	// placeholder for future optional parameters
}

// WebAppsListPremierAddOnsSlotOptions contains the optional parameters for the WebApps.ListPremierAddOnsSlot method.
type WebAppsListPremierAddOnsSlotOptions struct {
	// placeholder for future optional parameters
}

// WebAppsListProcessModulesOptions contains the optional parameters for the WebApps.ListProcessModules method.
type WebAppsListProcessModulesOptions struct {
	// placeholder for future optional parameters
}

// WebAppsListProcessModulesSlotOptions contains the optional parameters for the WebApps.ListProcessModulesSlot method.
type WebAppsListProcessModulesSlotOptions struct {
	// placeholder for future optional parameters
}

// WebAppsListProcessThreadsOptions contains the optional parameters for the WebApps.ListProcessThreads method.
type WebAppsListProcessThreadsOptions struct {
	// placeholder for future optional parameters
}

// WebAppsListProcessThreadsSlotOptions contains the optional parameters for the WebApps.ListProcessThreadsSlot method.
type WebAppsListProcessThreadsSlotOptions struct {
	// placeholder for future optional parameters
}

// WebAppsListProcessesOptions contains the optional parameters for the WebApps.ListProcesses method.
type WebAppsListProcessesOptions struct {
	// placeholder for future optional parameters
}

// WebAppsListProcessesSlotOptions contains the optional parameters for the WebApps.ListProcessesSlot method.
type WebAppsListProcessesSlotOptions struct {
	// placeholder for future optional parameters
}

// WebAppsListPublicCertificatesOptions contains the optional parameters for the WebApps.ListPublicCertificates method.
type WebAppsListPublicCertificatesOptions struct {
	// placeholder for future optional parameters
}

// WebAppsListPublicCertificatesSlotOptions contains the optional parameters for the WebApps.ListPublicCertificatesSlot method.
type WebAppsListPublicCertificatesSlotOptions struct {
	// placeholder for future optional parameters
}

// WebAppsListPublishingProfileXMLWithSecretsOptions contains the optional parameters for the WebApps.ListPublishingProfileXMLWithSecrets method.
type WebAppsListPublishingProfileXMLWithSecretsOptions struct {
	// placeholder for future optional parameters
}

// WebAppsListPublishingProfileXMLWithSecretsSlotOptions contains the optional parameters for the WebApps.ListPublishingProfileXMLWithSecretsSlot method.
type WebAppsListPublishingProfileXMLWithSecretsSlotOptions struct {
	// placeholder for future optional parameters
}

// WebAppsListRelayServiceConnectionsOptions contains the optional parameters for the WebApps.ListRelayServiceConnections method.
type WebAppsListRelayServiceConnectionsOptions struct {
	// placeholder for future optional parameters
}

// WebAppsListRelayServiceConnectionsSlotOptions contains the optional parameters for the WebApps.ListRelayServiceConnectionsSlot method.
type WebAppsListRelayServiceConnectionsSlotOptions struct {
	// placeholder for future optional parameters
}

// WebAppsListSiteBackupsOptions contains the optional parameters for the WebApps.ListSiteBackups method.
type WebAppsListSiteBackupsOptions struct {
	// placeholder for future optional parameters
}

// WebAppsListSiteBackupsSlotOptions contains the optional parameters for the WebApps.ListSiteBackupsSlot method.
type WebAppsListSiteBackupsSlotOptions struct {
	// placeholder for future optional parameters
}

// WebAppsListSiteExtensionsOptions contains the optional parameters for the WebApps.ListSiteExtensions method.
type WebAppsListSiteExtensionsOptions struct {
	// placeholder for future optional parameters
}

// WebAppsListSiteExtensionsSlotOptions contains the optional parameters for the WebApps.ListSiteExtensionsSlot method.
type WebAppsListSiteExtensionsSlotOptions struct {
	// placeholder for future optional parameters
}

// WebAppsListSitePushSettingsOptions contains the optional parameters for the WebApps.ListSitePushSettings method.
type WebAppsListSitePushSettingsOptions struct {
	// placeholder for future optional parameters
}

// WebAppsListSitePushSettingsSlotOptions contains the optional parameters for the WebApps.ListSitePushSettingsSlot method.
type WebAppsListSitePushSettingsSlotOptions struct {
	// placeholder for future optional parameters
}

// WebAppsListSlotConfigurationNamesOptions contains the optional parameters for the WebApps.ListSlotConfigurationNames method.
type WebAppsListSlotConfigurationNamesOptions struct {
	// placeholder for future optional parameters
}

// WebAppsListSlotDifferencesFromProductionOptions contains the optional parameters for the WebApps.ListSlotDifferencesFromProduction method.
type WebAppsListSlotDifferencesFromProductionOptions struct {
	// placeholder for future optional parameters
}

// WebAppsListSlotDifferencesSlotOptions contains the optional parameters for the WebApps.ListSlotDifferencesSlot method.
type WebAppsListSlotDifferencesSlotOptions struct {
	// placeholder for future optional parameters
}

// WebAppsListSlotsOptions contains the optional parameters for the WebApps.ListSlots method.
type WebAppsListSlotsOptions struct {
	// placeholder for future optional parameters
}

// WebAppsListSnapshotsFromDRSecondaryOptions contains the optional parameters for the WebApps.ListSnapshotsFromDRSecondary method.
type WebAppsListSnapshotsFromDRSecondaryOptions struct {
	// placeholder for future optional parameters
}

// WebAppsListSnapshotsFromDRSecondarySlotOptions contains the optional parameters for the WebApps.ListSnapshotsFromDRSecondarySlot method.
type WebAppsListSnapshotsFromDRSecondarySlotOptions struct {
	// placeholder for future optional parameters
}

// WebAppsListSnapshotsOptions contains the optional parameters for the WebApps.ListSnapshots method.
type WebAppsListSnapshotsOptions struct {
	// placeholder for future optional parameters
}

// WebAppsListSnapshotsSlotOptions contains the optional parameters for the WebApps.ListSnapshotsSlot method.
type WebAppsListSnapshotsSlotOptions struct {
	// placeholder for future optional parameters
}

// WebAppsListSyncFunctionTriggersOptions contains the optional parameters for the WebApps.ListSyncFunctionTriggers method.
type WebAppsListSyncFunctionTriggersOptions struct {
	// placeholder for future optional parameters
}

// WebAppsListSyncFunctionTriggersSlotOptions contains the optional parameters for the WebApps.ListSyncFunctionTriggersSlot method.
type WebAppsListSyncFunctionTriggersSlotOptions struct {
	// placeholder for future optional parameters
}

// WebAppsListSyncStatusOptions contains the optional parameters for the WebApps.ListSyncStatus method.
type WebAppsListSyncStatusOptions struct {
	// placeholder for future optional parameters
}

// WebAppsListSyncStatusSlotOptions contains the optional parameters for the WebApps.ListSyncStatusSlot method.
type WebAppsListSyncStatusSlotOptions struct {
	// placeholder for future optional parameters
}

// WebAppsListTriggeredWebJobHistoryOptions contains the optional parameters for the WebApps.ListTriggeredWebJobHistory method.
type WebAppsListTriggeredWebJobHistoryOptions struct {
	// placeholder for future optional parameters
}

// WebAppsListTriggeredWebJobHistorySlotOptions contains the optional parameters for the WebApps.ListTriggeredWebJobHistorySlot method.
type WebAppsListTriggeredWebJobHistorySlotOptions struct {
	// placeholder for future optional parameters
}

// WebAppsListTriggeredWebJobsOptions contains the optional parameters for the WebApps.ListTriggeredWebJobs method.
type WebAppsListTriggeredWebJobsOptions struct {
	// placeholder for future optional parameters
}

// WebAppsListTriggeredWebJobsSlotOptions contains the optional parameters for the WebApps.ListTriggeredWebJobsSlot method.
type WebAppsListTriggeredWebJobsSlotOptions struct {
	// placeholder for future optional parameters
}

// WebAppsListUsagesOptions contains the optional parameters for the WebApps.ListUsages method.
type WebAppsListUsagesOptions struct {
	// Return only information specified in the filter (using OData syntax). For example: $filter=(name.value eq 'Metric1' or name.value eq 'Metric2') and startTime
	// eq 2014-01-01T00:00:00Z and endTime eq 2014-12-31T23:59:59Z and timeGrain eq duration'[Hour|Minute|Day]'.
	Filter *string
}

// WebAppsListUsagesSlotOptions contains the optional parameters for the WebApps.ListUsagesSlot method.
type WebAppsListUsagesSlotOptions struct {
	// Return only information specified in the filter (using OData syntax). For example: $filter=(name.value eq 'Metric1' or name.value eq 'Metric2') and startTime
	// eq 2014-01-01T00:00:00Z and endTime eq 2014-12-31T23:59:59Z and timeGrain eq duration'[Hour|Minute|Day]'.
	Filter *string
}

// WebAppsListVnetConnectionsOptions contains the optional parameters for the WebApps.ListVnetConnections method.
type WebAppsListVnetConnectionsOptions struct {
	// placeholder for future optional parameters
}

// WebAppsListVnetConnectionsSlotOptions contains the optional parameters for the WebApps.ListVnetConnectionsSlot method.
type WebAppsListVnetConnectionsSlotOptions struct {
	// placeholder for future optional parameters
}

// WebAppsListWebJobsOptions contains the optional parameters for the WebApps.ListWebJobs method.
type WebAppsListWebJobsOptions struct {
	// placeholder for future optional parameters
}

// WebAppsListWebJobsSlotOptions contains the optional parameters for the WebApps.ListWebJobsSlot method.
type WebAppsListWebJobsSlotOptions struct {
	// placeholder for future optional parameters
}

// WebAppsPutPrivateAccessVnetOptions contains the optional parameters for the WebApps.PutPrivateAccessVnet method.
type WebAppsPutPrivateAccessVnetOptions struct {
	// placeholder for future optional parameters
}

// WebAppsPutPrivateAccessVnetSlotOptions contains the optional parameters for the WebApps.PutPrivateAccessVnetSlot method.
type WebAppsPutPrivateAccessVnetSlotOptions struct {
	// placeholder for future optional parameters
}

// WebAppsRecoverSiteConfigurationSnapshotOptions contains the optional parameters for the WebApps.RecoverSiteConfigurationSnapshot method.
type WebAppsRecoverSiteConfigurationSnapshotOptions struct {
	// placeholder for future optional parameters
}

// WebAppsRecoverSiteConfigurationSnapshotSlotOptions contains the optional parameters for the WebApps.RecoverSiteConfigurationSnapshotSlot method.
type WebAppsRecoverSiteConfigurationSnapshotSlotOptions struct {
	// placeholder for future optional parameters
}

// WebAppsResetProductionSlotConfigOptions contains the optional parameters for the WebApps.ResetProductionSlotConfig method.
type WebAppsResetProductionSlotConfigOptions struct {
	// placeholder for future optional parameters
}

// WebAppsResetSlotConfigurationSlotOptions contains the optional parameters for the WebApps.ResetSlotConfigurationSlot method.
type WebAppsResetSlotConfigurationSlotOptions struct {
	// placeholder for future optional parameters
}

// WebAppsRestartOptions contains the optional parameters for the WebApps.Restart method.
type WebAppsRestartOptions struct {
	// Specify true to apply the configuration settings and restarts the app only if necessary. By default, the API always restarts and reprovisions the app.
	SoftRestart *bool
	// Specify true to block until the app is restarted. By default, it is set to false, and the API responds immediately (asynchronous).
	Synchronous *bool
}

// WebAppsRestartSlotOptions contains the optional parameters for the WebApps.RestartSlot method.
type WebAppsRestartSlotOptions struct {
	// Specify true to apply the configuration settings and restarts the app only if necessary. By default, the API always restarts and reprovisions the app.
	SoftRestart *bool
	// Specify true to block until the app is restarted. By default, it is set to false, and the API responds immediately (asynchronous).
	Synchronous *bool
}

// WebAppsRunTriggeredWebJobOptions contains the optional parameters for the WebApps.RunTriggeredWebJob method.
type WebAppsRunTriggeredWebJobOptions struct {
	// placeholder for future optional parameters
}

// WebAppsRunTriggeredWebJobSlotOptions contains the optional parameters for the WebApps.RunTriggeredWebJobSlot method.
type WebAppsRunTriggeredWebJobSlotOptions struct {
	// placeholder for future optional parameters
}

// WebAppsStartContinuousWebJobOptions contains the optional parameters for the WebApps.StartContinuousWebJob method.
type WebAppsStartContinuousWebJobOptions struct {
	// placeholder for future optional parameters
}

// WebAppsStartContinuousWebJobSlotOptions contains the optional parameters for the WebApps.StartContinuousWebJobSlot method.
type WebAppsStartContinuousWebJobSlotOptions struct {
	// placeholder for future optional parameters
}

// WebAppsStartOptions contains the optional parameters for the WebApps.Start method.
type WebAppsStartOptions struct {
	// placeholder for future optional parameters
}

// WebAppsStartSlotOptions contains the optional parameters for the WebApps.StartSlot method.
type WebAppsStartSlotOptions struct {
	// placeholder for future optional parameters
}

// WebAppsStartWebSiteNetworkTraceOptions contains the optional parameters for the WebApps.StartWebSiteNetworkTrace method.
type WebAppsStartWebSiteNetworkTraceOptions struct {
	// The duration to keep capturing in seconds.
	DurationInSeconds *int32
	// The maximum frame length in bytes (Optional).
	MaxFrameLength *int32
	// The Blob URL to store capture file.
	SasURL *string
}

// WebAppsStartWebSiteNetworkTraceSlotOptions contains the optional parameters for the WebApps.StartWebSiteNetworkTraceSlot method.
type WebAppsStartWebSiteNetworkTraceSlotOptions struct {
	// The duration to keep capturing in seconds.
	DurationInSeconds *int32
	// The maximum frame length in bytes (Optional).
	MaxFrameLength *int32
	// The Blob URL to store capture file.
	SasURL *string
}

// WebAppsStopContinuousWebJobOptions contains the optional parameters for the WebApps.StopContinuousWebJob method.
type WebAppsStopContinuousWebJobOptions struct {
	// placeholder for future optional parameters
}

// WebAppsStopContinuousWebJobSlotOptions contains the optional parameters for the WebApps.StopContinuousWebJobSlot method.
type WebAppsStopContinuousWebJobSlotOptions struct {
	// placeholder for future optional parameters
}

// WebAppsStopNetworkTraceOptions contains the optional parameters for the WebApps.StopNetworkTrace method.
type WebAppsStopNetworkTraceOptions struct {
	// placeholder for future optional parameters
}

// WebAppsStopNetworkTraceSlotOptions contains the optional parameters for the WebApps.StopNetworkTraceSlot method.
type WebAppsStopNetworkTraceSlotOptions struct {
	// placeholder for future optional parameters
}

// WebAppsStopOptions contains the optional parameters for the WebApps.Stop method.
type WebAppsStopOptions struct {
	// placeholder for future optional parameters
}

// WebAppsStopSlotOptions contains the optional parameters for the WebApps.StopSlot method.
type WebAppsStopSlotOptions struct {
	// placeholder for future optional parameters
}

// WebAppsStopWebSiteNetworkTraceOptions contains the optional parameters for the WebApps.StopWebSiteNetworkTrace method.
type WebAppsStopWebSiteNetworkTraceOptions struct {
	// placeholder for future optional parameters
}

// WebAppsStopWebSiteNetworkTraceSlotOptions contains the optional parameters for the WebApps.StopWebSiteNetworkTraceSlot method.
type WebAppsStopWebSiteNetworkTraceSlotOptions struct {
	// placeholder for future optional parameters
}

// WebAppsSyncFunctionTriggersOptions contains the optional parameters for the WebApps.SyncFunctionTriggers method.
type WebAppsSyncFunctionTriggersOptions struct {
	// placeholder for future optional parameters
}

// WebAppsSyncFunctionTriggersSlotOptions contains the optional parameters for the WebApps.SyncFunctionTriggersSlot method.
type WebAppsSyncFunctionTriggersSlotOptions struct {
	// placeholder for future optional parameters
}

// WebAppsSyncFunctionsOptions contains the optional parameters for the WebApps.SyncFunctions method.
type WebAppsSyncFunctionsOptions struct {
	// placeholder for future optional parameters
}

// WebAppsSyncFunctionsSlotOptions contains the optional parameters for the WebApps.SyncFunctionsSlot method.
type WebAppsSyncFunctionsSlotOptions struct {
	// placeholder for future optional parameters
}

// WebAppsSyncRepositoryOptions contains the optional parameters for the WebApps.SyncRepository method.
type WebAppsSyncRepositoryOptions struct {
	// placeholder for future optional parameters
}

// WebAppsSyncRepositorySlotOptions contains the optional parameters for the WebApps.SyncRepositorySlot method.
type WebAppsSyncRepositorySlotOptions struct {
	// placeholder for future optional parameters
}

// WebAppsUpdateApplicationSettingsOptions contains the optional parameters for the WebApps.UpdateApplicationSettings method.
type WebAppsUpdateApplicationSettingsOptions struct {
	// placeholder for future optional parameters
}

// WebAppsUpdateApplicationSettingsSlotOptions contains the optional parameters for the WebApps.UpdateApplicationSettingsSlot method.
type WebAppsUpdateApplicationSettingsSlotOptions struct {
	// placeholder for future optional parameters
}

// WebAppsUpdateAuthSettingsOptions contains the optional parameters for the WebApps.UpdateAuthSettings method.
type WebAppsUpdateAuthSettingsOptions struct {
	// placeholder for future optional parameters
}

// WebAppsUpdateAuthSettingsSlotOptions contains the optional parameters for the WebApps.UpdateAuthSettingsSlot method.
type WebAppsUpdateAuthSettingsSlotOptions struct {
	// placeholder for future optional parameters
}

// WebAppsUpdateAuthSettingsV2Options contains the optional parameters for the WebApps.UpdateAuthSettingsV2 method.
type WebAppsUpdateAuthSettingsV2Options struct {
	// placeholder for future optional parameters
}

// WebAppsUpdateAuthSettingsV2SlotOptions contains the optional parameters for the WebApps.UpdateAuthSettingsV2Slot method.
type WebAppsUpdateAuthSettingsV2SlotOptions struct {
	// placeholder for future optional parameters
}

// WebAppsUpdateAzureStorageAccountsOptions contains the optional parameters for the WebApps.UpdateAzureStorageAccounts method.
type WebAppsUpdateAzureStorageAccountsOptions struct {
	// placeholder for future optional parameters
}

// WebAppsUpdateAzureStorageAccountsSlotOptions contains the optional parameters for the WebApps.UpdateAzureStorageAccountsSlot method.
type WebAppsUpdateAzureStorageAccountsSlotOptions struct {
	// placeholder for future optional parameters
}

// WebAppsUpdateBackupConfigurationOptions contains the optional parameters for the WebApps.UpdateBackupConfiguration method.
type WebAppsUpdateBackupConfigurationOptions struct {
	// placeholder for future optional parameters
}

// WebAppsUpdateBackupConfigurationSlotOptions contains the optional parameters for the WebApps.UpdateBackupConfigurationSlot method.
type WebAppsUpdateBackupConfigurationSlotOptions struct {
	// placeholder for future optional parameters
}

// WebAppsUpdateConfigurationOptions contains the optional parameters for the WebApps.UpdateConfiguration method.
type WebAppsUpdateConfigurationOptions struct {
	// placeholder for future optional parameters
}

// WebAppsUpdateConfigurationSlotOptions contains the optional parameters for the WebApps.UpdateConfigurationSlot method.
type WebAppsUpdateConfigurationSlotOptions struct {
	// placeholder for future optional parameters
}

// WebAppsUpdateConnectionStringsOptions contains the optional parameters for the WebApps.UpdateConnectionStrings method.
type WebAppsUpdateConnectionStringsOptions struct {
	// placeholder for future optional parameters
}

// WebAppsUpdateConnectionStringsSlotOptions contains the optional parameters for the WebApps.UpdateConnectionStringsSlot method.
type WebAppsUpdateConnectionStringsSlotOptions struct {
	// placeholder for future optional parameters
}

// WebAppsUpdateDiagnosticLogsConfigOptions contains the optional parameters for the WebApps.UpdateDiagnosticLogsConfig method.
type WebAppsUpdateDiagnosticLogsConfigOptions struct {
	// placeholder for future optional parameters
}

// WebAppsUpdateDiagnosticLogsConfigSlotOptions contains the optional parameters for the WebApps.UpdateDiagnosticLogsConfigSlot method.
type WebAppsUpdateDiagnosticLogsConfigSlotOptions struct {
	// placeholder for future optional parameters
}

// WebAppsUpdateDomainOwnershipIdentifierOptions contains the optional parameters for the WebApps.UpdateDomainOwnershipIdentifier method.
type WebAppsUpdateDomainOwnershipIdentifierOptions struct {
	// placeholder for future optional parameters
}

// WebAppsUpdateDomainOwnershipIdentifierSlotOptions contains the optional parameters for the WebApps.UpdateDomainOwnershipIdentifierSlot method.
type WebAppsUpdateDomainOwnershipIdentifierSlotOptions struct {
	// placeholder for future optional parameters
}

// WebAppsUpdateFtpAllowedOptions contains the optional parameters for the WebApps.UpdateFtpAllowed method.
type WebAppsUpdateFtpAllowedOptions struct {
	// placeholder for future optional parameters
}

// WebAppsUpdateFtpAllowedSlotOptions contains the optional parameters for the WebApps.UpdateFtpAllowedSlot method.
type WebAppsUpdateFtpAllowedSlotOptions struct {
	// placeholder for future optional parameters
}

// WebAppsUpdateHybridConnectionOptions contains the optional parameters for the WebApps.UpdateHybridConnection method.
type WebAppsUpdateHybridConnectionOptions struct {
	// placeholder for future optional parameters
}

// WebAppsUpdateHybridConnectionSlotOptions contains the optional parameters for the WebApps.UpdateHybridConnectionSlot method.
type WebAppsUpdateHybridConnectionSlotOptions struct {
	// placeholder for future optional parameters
}

// WebAppsUpdateMetadataOptions contains the optional parameters for the WebApps.UpdateMetadata method.
type WebAppsUpdateMetadataOptions struct {
	// placeholder for future optional parameters
}

// WebAppsUpdateMetadataSlotOptions contains the optional parameters for the WebApps.UpdateMetadataSlot method.
type WebAppsUpdateMetadataSlotOptions struct {
	// placeholder for future optional parameters
}

// WebAppsUpdateOptions contains the optional parameters for the WebApps.Update method.
type WebAppsUpdateOptions struct {
	// placeholder for future optional parameters
}

// WebAppsUpdatePremierAddOnOptions contains the optional parameters for the WebApps.UpdatePremierAddOn method.
type WebAppsUpdatePremierAddOnOptions struct {
	// placeholder for future optional parameters
}

// WebAppsUpdatePremierAddOnSlotOptions contains the optional parameters for the WebApps.UpdatePremierAddOnSlot method.
type WebAppsUpdatePremierAddOnSlotOptions struct {
	// placeholder for future optional parameters
}

// WebAppsUpdateRelayServiceConnectionOptions contains the optional parameters for the WebApps.UpdateRelayServiceConnection method.
type WebAppsUpdateRelayServiceConnectionOptions struct {
	// placeholder for future optional parameters
}

// WebAppsUpdateRelayServiceConnectionSlotOptions contains the optional parameters for the WebApps.UpdateRelayServiceConnectionSlot method.
type WebAppsUpdateRelayServiceConnectionSlotOptions struct {
	// placeholder for future optional parameters
}

// WebAppsUpdateScmAllowedOptions contains the optional parameters for the WebApps.UpdateScmAllowed method.
type WebAppsUpdateScmAllowedOptions struct {
	// placeholder for future optional parameters
}

// WebAppsUpdateScmAllowedSlotOptions contains the optional parameters for the WebApps.UpdateScmAllowedSlot method.
type WebAppsUpdateScmAllowedSlotOptions struct {
	// placeholder for future optional parameters
}

// WebAppsUpdateSitePushSettingsOptions contains the optional parameters for the WebApps.UpdateSitePushSettings method.
type WebAppsUpdateSitePushSettingsOptions struct {
	// placeholder for future optional parameters
}

// WebAppsUpdateSitePushSettingsSlotOptions contains the optional parameters for the WebApps.UpdateSitePushSettingsSlot method.
type WebAppsUpdateSitePushSettingsSlotOptions struct {
	// placeholder for future optional parameters
}

// WebAppsUpdateSlotConfigurationNamesOptions contains the optional parameters for the WebApps.UpdateSlotConfigurationNames method.
type WebAppsUpdateSlotConfigurationNamesOptions struct {
	// placeholder for future optional parameters
}

// WebAppsUpdateSlotOptions contains the optional parameters for the WebApps.UpdateSlot method.
type WebAppsUpdateSlotOptions struct {
	// placeholder for future optional parameters
}

// WebAppsUpdateSourceControlOptions contains the optional parameters for the WebApps.UpdateSourceControl method.
type WebAppsUpdateSourceControlOptions struct {
	// placeholder for future optional parameters
}

// WebAppsUpdateSourceControlSlotOptions contains the optional parameters for the WebApps.UpdateSourceControlSlot method.
type WebAppsUpdateSourceControlSlotOptions struct {
	// placeholder for future optional parameters
}

// WebAppsUpdateSwiftVirtualNetworkConnectionWithCheckOptions contains the optional parameters for the WebApps.UpdateSwiftVirtualNetworkConnectionWithCheck
// method.
type WebAppsUpdateSwiftVirtualNetworkConnectionWithCheckOptions struct {
	// placeholder for future optional parameters
}

// WebAppsUpdateSwiftVirtualNetworkConnectionWithCheckSlotOptions contains the optional parameters for the WebApps.UpdateSwiftVirtualNetworkConnectionWithCheckSlot
// method.
type WebAppsUpdateSwiftVirtualNetworkConnectionWithCheckSlotOptions struct {
	// placeholder for future optional parameters
}

// WebAppsUpdateVnetConnectionGatewayOptions contains the optional parameters for the WebApps.UpdateVnetConnectionGateway method.
type WebAppsUpdateVnetConnectionGatewayOptions struct {
	// placeholder for future optional parameters
}

// WebAppsUpdateVnetConnectionGatewaySlotOptions contains the optional parameters for the WebApps.UpdateVnetConnectionGatewaySlot method.
type WebAppsUpdateVnetConnectionGatewaySlotOptions struct {
	// placeholder for future optional parameters
}

// WebAppsUpdateVnetConnectionOptions contains the optional parameters for the WebApps.UpdateVnetConnection method.
type WebAppsUpdateVnetConnectionOptions struct {
	// placeholder for future optional parameters
}

// WebAppsUpdateVnetConnectionSlotOptions contains the optional parameters for the WebApps.UpdateVnetConnectionSlot method.
type WebAppsUpdateVnetConnectionSlotOptions struct {
	// placeholder for future optional parameters
}

// WebJob - Web Job Information.
type WebJob struct {
	ProxyOnlyResource
	// WebJob resource specific properties
	Properties *WebJobProperties `json:"properties,omitempty"`
}

// MarshalJSON implements the json.Marshaller interface for type WebJob.
func (w WebJob) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	w.ProxyOnlyResource.marshalInternal(objectMap)
	populate(objectMap, "properties", w.Properties)
	return json.Marshal(objectMap)
}

// WebJobCollection - Collection of Kudu web job information elements.
type WebJobCollection struct {
	// REQUIRED; Collection of resources.
	Value []*WebJob `json:"value,omitempty"`

	// READ-ONLY; Link to next page of resources.
	NextLink *string `json:"nextLink,omitempty" azure:"ro"`
}

// MarshalJSON implements the json.Marshaller interface for type WebJobCollection.
func (w WebJobCollection) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "nextLink", w.NextLink)
	populate(objectMap, "value", w.Value)
	return json.Marshal(objectMap)
}

// WebJobProperties - WebJob resource specific properties
type WebJobProperties struct {
	// Error information.
	Error *string `json:"error,omitempty"`

	// Extra Info URL.
	ExtraInfoURL *string `json:"extra_info_url,omitempty"`

	// Run command.
	RunCommand *string `json:"run_command,omitempty"`

	// Job settings.
	Settings map[string]map[string]interface{} `json:"settings,omitempty"`

	// Job URL.
	URL *string `json:"url,omitempty"`

	// Using SDK?
	UsingSdk *bool `json:"using_sdk,omitempty"`

	// Job type.
	WebJobType *WebJobType `json:"web_job_type,omitempty"`
}

// MarshalJSON implements the json.Marshaller interface for type WebJobProperties.
func (w WebJobProperties) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "error", w.Error)
	populate(objectMap, "extra_info_url", w.ExtraInfoURL)
	populate(objectMap, "run_command", w.RunCommand)
	populate(objectMap, "settings", w.Settings)
	populate(objectMap, "url", w.URL)
	populate(objectMap, "using_sdk", w.UsingSdk)
	populate(objectMap, "web_job_type", w.WebJobType)
	return json.Marshal(objectMap)
}

type WebSiteInstanceStatus struct {
	ProxyOnlyResource
	// WebSiteInstanceStatus resource specific properties
	Properties *WebSiteInstanceStatusProperties `json:"properties,omitempty"`
}

// MarshalJSON implements the json.Marshaller interface for type WebSiteInstanceStatus.
func (w WebSiteInstanceStatus) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	w.ProxyOnlyResource.marshalInternal(objectMap)
	populate(objectMap, "properties", w.Properties)
	return json.Marshal(objectMap)
}

// WebSiteInstanceStatusProperties - WebSiteInstanceStatus resource specific properties
type WebSiteInstanceStatusProperties struct {
	// Link to the console to web app instance
	ConsoleURL *string `json:"consoleUrl,omitempty"`

	// Dictionary of
	Containers map[string]*ContainerInfo `json:"containers,omitempty"`

	// Link to the Diagnose and Solve Portal
	DetectorURL *string `json:"detectorUrl,omitempty"`

	// Link to the console to web app instance
	HealthCheckURL *string           `json:"healthCheckUrl,omitempty"`
	State          *SiteRuntimeState `json:"state,omitempty"`

	// Link to the GetStatusApi in Kudu
	StatusURL *string `json:"statusUrl,omitempty"`
}

// MarshalJSON implements the json.Marshaller interface for type WebSiteInstanceStatusProperties.
func (w WebSiteInstanceStatusProperties) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "consoleUrl", w.ConsoleURL)
	populate(objectMap, "containers", w.Containers)
	populate(objectMap, "detectorUrl", w.DetectorURL)
	populate(objectMap, "healthCheckUrl", w.HealthCheckURL)
	populate(objectMap, "state", w.State)
	populate(objectMap, "statusUrl", w.StatusURL)
	return json.Marshal(objectMap)
}

// WebSiteManagementClientCheckNameAvailabilityOptions contains the optional parameters for the WebSiteManagementClient.CheckNameAvailability method.
type WebSiteManagementClientCheckNameAvailabilityOptions struct {
	// placeholder for future optional parameters
}

// WebSiteManagementClientGenerateGithubAccessTokenForAppserviceCLIAsyncOptions contains the optional parameters for the WebSiteManagementClient.GenerateGithubAccessTokenForAppserviceCLIAsync
// method.
type WebSiteManagementClientGenerateGithubAccessTokenForAppserviceCLIAsyncOptions struct {
	// placeholder for future optional parameters
}

// WebSiteManagementClientGetPublishingUserOptions contains the optional parameters for the WebSiteManagementClient.GetPublishingUser method.
type WebSiteManagementClientGetPublishingUserOptions struct {
	// placeholder for future optional parameters
}

// WebSiteManagementClientGetSourceControlOptions contains the optional parameters for the WebSiteManagementClient.GetSourceControl method.
type WebSiteManagementClientGetSourceControlOptions struct {
	// placeholder for future optional parameters
}

// WebSiteManagementClientGetSubscriptionDeploymentLocationsOptions contains the optional parameters for the WebSiteManagementClient.GetSubscriptionDeploymentLocations
// method.
type WebSiteManagementClientGetSubscriptionDeploymentLocationsOptions struct {
	// placeholder for future optional parameters
}

// WebSiteManagementClientListBillingMetersOptions contains the optional parameters for the WebSiteManagementClient.ListBillingMeters method.
type WebSiteManagementClientListBillingMetersOptions struct {
	// Azure Location of billable resource
	BillingLocation *string
	// App Service OS type meters used for
	OSType *string
}

// WebSiteManagementClientListGeoRegionsOptions contains the optional parameters for the WebSiteManagementClient.ListGeoRegions method.
type WebSiteManagementClientListGeoRegionsOptions struct {
	// Specify <code>true</code> if you want to filter to only regions that support Linux Consumption Workers.
	LinuxDynamicWorkersEnabled *bool
	// Specify <code>true</code> if you want to filter to only regions that support Linux workers.
	LinuxWorkersEnabled *bool
	// Name of SKU used to filter the regions.
	SKU *SKUName
	// Specify <code>true</code> if you want to filter to only regions that support Xenon workers.
	XenonWorkersEnabled *bool
}

// WebSiteManagementClientListPremierAddOnOffersOptions contains the optional parameters for the WebSiteManagementClient.ListPremierAddOnOffers method.
type WebSiteManagementClientListPremierAddOnOffersOptions struct {
	// placeholder for future optional parameters
}

// WebSiteManagementClientListSKUsOptions contains the optional parameters for the WebSiteManagementClient.ListSKUs method.
type WebSiteManagementClientListSKUsOptions struct {
	// placeholder for future optional parameters
}

// WebSiteManagementClientListSiteIdentifiersAssignedToHostNameOptions contains the optional parameters for the WebSiteManagementClient.ListSiteIdentifiersAssignedToHostName
// method.
type WebSiteManagementClientListSiteIdentifiersAssignedToHostNameOptions struct {
	// placeholder for future optional parameters
}

// WebSiteManagementClientListSourceControlsOptions contains the optional parameters for the WebSiteManagementClient.ListSourceControls method.
type WebSiteManagementClientListSourceControlsOptions struct {
	// placeholder for future optional parameters
}

// WebSiteManagementClientMoveOptions contains the optional parameters for the WebSiteManagementClient.Move method.
type WebSiteManagementClientMoveOptions struct {
	// placeholder for future optional parameters
}

// WebSiteManagementClientUpdatePublishingUserOptions contains the optional parameters for the WebSiteManagementClient.UpdatePublishingUser method.
type WebSiteManagementClientUpdatePublishingUserOptions struct {
	// placeholder for future optional parameters
}

// WebSiteManagementClientUpdateSourceControlOptions contains the optional parameters for the WebSiteManagementClient.UpdateSourceControl method.
type WebSiteManagementClientUpdateSourceControlOptions struct {
	// placeholder for future optional parameters
}

// WebSiteManagementClientValidateMoveOptions contains the optional parameters for the WebSiteManagementClient.ValidateMove method.
type WebSiteManagementClientValidateMoveOptions struct {
	// placeholder for future optional parameters
}

// WebSiteManagementClientValidateOptions contains the optional parameters for the WebSiteManagementClient.Validate method.
type WebSiteManagementClientValidateOptions struct {
	// placeholder for future optional parameters
}

// WebSiteManagementClientVerifyHostingEnvironmentVnetOptions contains the optional parameters for the WebSiteManagementClient.VerifyHostingEnvironmentVnet
// method.
type WebSiteManagementClientVerifyHostingEnvironmentVnetOptions struct {
	// placeholder for future optional parameters
}

// WindowsJavaContainerSettings - Windows Java Container settings.
type WindowsJavaContainerSettings struct {
	// READ-ONLY; End-of-life date for the minor version.
	EndOfLifeDate *time.Time `json:"endOfLifeDate,omitempty" azure:"ro"`

	// READ-ONLY; true if the stack version is auto-updated; otherwise, false.
	IsAutoUpdate *bool `json:"isAutoUpdate,omitempty" azure:"ro"`

	// READ-ONLY; true if the stack is deprecated; otherwise, false.
	IsDeprecated *bool `json:"isDeprecated,omitempty" azure:"ro"`

	// READ-ONLY; true if the minor version is early-access; otherwise, false.
	IsEarlyAccess *bool `json:"isEarlyAccess,omitempty" azure:"ro"`

	// READ-ONLY; true if the stack should be hidden; otherwise, false.
	IsHidden *bool `json:"isHidden,omitempty" azure:"ro"`

	// READ-ONLY; true if the stack is in preview; otherwise, false.
	IsPreview *bool `json:"isPreview,omitempty" azure:"ro"`

	// READ-ONLY; Java container (runtime only).
	JavaContainer *string `json:"javaContainer,omitempty" azure:"ro"`

	// READ-ONLY; Java container version (runtime only).
	JavaContainerVersion *string `json:"javaContainerVersion,omitempty" azure:"ro"`
}

// MarshalJSON implements the json.Marshaller interface for type WindowsJavaContainerSettings.
func (w WindowsJavaContainerSettings) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "endOfLifeDate", (*timeRFC3339)(w.EndOfLifeDate))
	populate(objectMap, "isAutoUpdate", w.IsAutoUpdate)
	populate(objectMap, "isDeprecated", w.IsDeprecated)
	populate(objectMap, "isEarlyAccess", w.IsEarlyAccess)
	populate(objectMap, "isHidden", w.IsHidden)
	populate(objectMap, "isPreview", w.IsPreview)
	populate(objectMap, "javaContainer", w.JavaContainer)
	populate(objectMap, "javaContainerVersion", w.JavaContainerVersion)
	return json.Marshal(objectMap)
}

// UnmarshalJSON implements the json.Unmarshaller interface for type WindowsJavaContainerSettings.
func (w *WindowsJavaContainerSettings) UnmarshalJSON(data []byte) error {
	var rawMsg map[string]json.RawMessage
	if err := json.Unmarshal(data, &rawMsg); err != nil {
		return err
	}
	for key, val := range rawMsg {
		var err error
		switch key {
		case "endOfLifeDate":
			var aux timeRFC3339
			err = unpopulate(val, &aux)
			w.EndOfLifeDate = (*time.Time)(&aux)
			delete(rawMsg, key)
		case "isAutoUpdate":
			err = unpopulate(val, &w.IsAutoUpdate)
			delete(rawMsg, key)
		case "isDeprecated":
			err = unpopulate(val, &w.IsDeprecated)
			delete(rawMsg, key)
		case "isEarlyAccess":
			err = unpopulate(val, &w.IsEarlyAccess)
			delete(rawMsg, key)
		case "isHidden":
			err = unpopulate(val, &w.IsHidden)
			delete(rawMsg, key)
		case "isPreview":
			err = unpopulate(val, &w.IsPreview)
			delete(rawMsg, key)
		case "javaContainer":
			err = unpopulate(val, &w.JavaContainer)
			delete(rawMsg, key)
		case "javaContainerVersion":
			err = unpopulate(val, &w.JavaContainerVersion)
			delete(rawMsg, key)
		}
		if err != nil {
			return err
		}
	}
	return nil
}

// WorkerPool - Worker pool of an App Service Environment.
type WorkerPool struct {
	// Shared or dedicated app hosting.
	ComputeMode *ComputeModeOptions `json:"computeMode,omitempty"`

	// Number of instances in the worker pool.
	WorkerCount *int32 `json:"workerCount,omitempty"`

	// VM size of the worker pool instances.
	WorkerSize *string `json:"workerSize,omitempty"`

	// Worker size ID for referencing this worker pool.
	WorkerSizeID *int32 `json:"workerSizeId,omitempty"`

	// READ-ONLY; Names of all instances in the worker pool (read only).
	InstanceNames []*string `json:"instanceNames,omitempty" azure:"ro"`
}

// MarshalJSON implements the json.Marshaller interface for type WorkerPool.
func (w WorkerPool) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "computeMode", w.ComputeMode)
	populate(objectMap, "instanceNames", w.InstanceNames)
	populate(objectMap, "workerCount", w.WorkerCount)
	populate(objectMap, "workerSize", w.WorkerSize)
	populate(objectMap, "workerSizeId", w.WorkerSizeID)
	return json.Marshal(objectMap)
}

// WorkerPoolCollection - Collection of worker pools.
type WorkerPoolCollection struct {
	// REQUIRED; Collection of resources.
	Value []*WorkerPoolResource `json:"value,omitempty"`

	// READ-ONLY; Link to next page of resources.
	NextLink *string `json:"nextLink,omitempty" azure:"ro"`
}

// MarshalJSON implements the json.Marshaller interface for type WorkerPoolCollection.
func (w WorkerPoolCollection) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "nextLink", w.NextLink)
	populate(objectMap, "value", w.Value)
	return json.Marshal(objectMap)
}

// WorkerPoolResource - Worker pool of an App Service Environment ARM resource.
type WorkerPoolResource struct {
	ProxyOnlyResource
	// Core resource properties
	Properties *WorkerPool `json:"properties,omitempty"`

	// Description of a SKU for a scalable resource.
	SKU *SKUDescription `json:"sku,omitempty"`
}

// MarshalJSON implements the json.Marshaller interface for type WorkerPoolResource.
func (w WorkerPoolResource) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	w.ProxyOnlyResource.marshalInternal(objectMap)
	populate(objectMap, "properties", w.Properties)
	populate(objectMap, "sku", w.SKU)
	return json.Marshal(objectMap)
}

func populate(m map[string]interface{}, k string, v interface{}) {
	if v == nil {
		return
	} else if azcore.IsNullValue(v) {
		m[k] = nil
	} else if !reflect.ValueOf(v).IsNil() {
		m[k] = v
	}
}

func populateByteArray(m map[string]interface{}, k string, b []byte, f runtime.Base64Encoding) {
	if azcore.IsNullValue(b) {
		m[k] = nil
	} else if len(b) == 0 {
		return
	} else {
		m[k] = runtime.EncodeByteArray(b, f)
	}
}

func unpopulate(data json.RawMessage, v interface{}) error {
	if data == nil {
		return nil
	}
	return json.Unmarshal(data, v)
}
