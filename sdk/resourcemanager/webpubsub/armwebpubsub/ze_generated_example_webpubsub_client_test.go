//go:build go1.16
// +build go1.16

// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

package armwebpubsub_test

import (
	"context"
	"log"

	"time"

	"github.com/Azure/azure-sdk-for-go/sdk/azcore/to"
	"github.com/Azure/azure-sdk-for-go/sdk/azidentity"
	"github.com/Azure/azure-sdk-for-go/sdk/resourcemanager/webpubsub/armwebpubsub"
)

// x-ms-original-file: specification/webpubsub/resource-manager/Microsoft.SignalRService/stable/2021-10-01/examples/WebPubSub_CheckNameAvailability.json
func ExampleWebPubSubClient_CheckNameAvailability() {
	cred, err := azidentity.NewDefaultAzureCredential(nil)
	if err != nil {
		log.Fatalf("failed to obtain a credential: %v", err)
	}
	ctx := context.Background()
	client := armwebpubsub.NewWebPubSubClient("<subscription-id>", cred, nil)
	_, err = client.CheckNameAvailability(ctx,
		"<location>",
		armwebpubsub.NameAvailabilityParameters{
			Name: to.StringPtr("<name>"),
			Type: to.StringPtr("<type>"),
		},
		nil)
	if err != nil {
		log.Fatal(err)
	}
}

// x-ms-original-file: specification/webpubsub/resource-manager/Microsoft.SignalRService/stable/2021-10-01/examples/WebPubSub_ListBySubscription.json
func ExampleWebPubSubClient_ListBySubscription() {
	cred, err := azidentity.NewDefaultAzureCredential(nil)
	if err != nil {
		log.Fatalf("failed to obtain a credential: %v", err)
	}
	ctx := context.Background()
	client := armwebpubsub.NewWebPubSubClient("<subscription-id>", cred, nil)
	pager := client.ListBySubscription(nil)
	for pager.NextPage(ctx) {
		if err := pager.Err(); err != nil {
			log.Fatalf("failed to advance page: %v", err)
		}
		for _, v := range pager.PageResponse().Value {
			log.Printf("WebPubSubResource.ID: %s\n", *v.ID)
		}
	}
}

// x-ms-original-file: specification/webpubsub/resource-manager/Microsoft.SignalRService/stable/2021-10-01/examples/WebPubSub_ListByResourceGroup.json
func ExampleWebPubSubClient_ListByResourceGroup() {
	cred, err := azidentity.NewDefaultAzureCredential(nil)
	if err != nil {
		log.Fatalf("failed to obtain a credential: %v", err)
	}
	ctx := context.Background()
	client := armwebpubsub.NewWebPubSubClient("<subscription-id>", cred, nil)
	pager := client.ListByResourceGroup("<resource-group-name>",
		nil)
	for pager.NextPage(ctx) {
		if err := pager.Err(); err != nil {
			log.Fatalf("failed to advance page: %v", err)
		}
		for _, v := range pager.PageResponse().Value {
			log.Printf("WebPubSubResource.ID: %s\n", *v.ID)
		}
	}
}

// x-ms-original-file: specification/webpubsub/resource-manager/Microsoft.SignalRService/stable/2021-10-01/examples/WebPubSub_Get.json
func ExampleWebPubSubClient_Get() {
	cred, err := azidentity.NewDefaultAzureCredential(nil)
	if err != nil {
		log.Fatalf("failed to obtain a credential: %v", err)
	}
	ctx := context.Background()
	client := armwebpubsub.NewWebPubSubClient("<subscription-id>", cred, nil)
	res, err := client.Get(ctx,
		"<resource-group-name>",
		"<resource-name>",
		nil)
	if err != nil {
		log.Fatal(err)
	}
	log.Printf("WebPubSubResource.ID: %s\n", *res.ID)
}

// x-ms-original-file: specification/webpubsub/resource-manager/Microsoft.SignalRService/stable/2021-10-01/examples/WebPubSub_CreateOrUpdate.json
func ExampleWebPubSubClient_BeginCreateOrUpdate() {
	cred, err := azidentity.NewDefaultAzureCredential(nil)
	if err != nil {
		log.Fatalf("failed to obtain a credential: %v", err)
	}
	ctx := context.Background()
	client := armwebpubsub.NewWebPubSubClient("<subscription-id>", cred, nil)
	poller, err := client.BeginCreateOrUpdate(ctx,
		"<resource-group-name>",
		"<resource-name>",
		armwebpubsub.WebPubSubResource{
			TrackedResource: armwebpubsub.TrackedResource{
				Location: to.StringPtr("<location>"),
				Tags: map[string]*string{
					"key1": to.StringPtr("value1"),
				},
			},
			Identity: &armwebpubsub.ManagedIdentity{
				Type: armwebpubsub.ManagedIdentityTypeSystemAssigned.ToPtr(),
			},
			Properties: &armwebpubsub.WebPubSubProperties{
				DisableAADAuth:   to.BoolPtr(false),
				DisableLocalAuth: to.BoolPtr(false),
				LiveTraceConfiguration: &armwebpubsub.LiveTraceConfiguration{
					Categories: []*armwebpubsub.LiveTraceCategory{
						{
							Name:    to.StringPtr("<name>"),
							Enabled: to.StringPtr("<enabled>"),
						}},
					Enabled: to.StringPtr("<enabled>"),
				},
				NetworkACLs: &armwebpubsub.WebPubSubNetworkACLs{
					DefaultAction: armwebpubsub.ACLActionDeny.ToPtr(),
					PrivateEndpoints: []*armwebpubsub.PrivateEndpointACL{
						{
							NetworkACL: armwebpubsub.NetworkACL{
								Allow: []*armwebpubsub.WebPubSubRequestType{
									armwebpubsub.WebPubSubRequestTypeServerConnection.ToPtr()},
							},
							Name: to.StringPtr("<name>"),
						}},
					PublicNetwork: &armwebpubsub.NetworkACL{
						Allow: []*armwebpubsub.WebPubSubRequestType{
							armwebpubsub.WebPubSubRequestTypeClientConnection.ToPtr()},
					},
				},
				PublicNetworkAccess: to.StringPtr("<public-network-access>"),
				TLS: &armwebpubsub.WebPubSubTLSSettings{
					ClientCertEnabled: to.BoolPtr(false),
				},
			},
			SKU: &armwebpubsub.ResourceSKU{
				Name:     to.StringPtr("<name>"),
				Capacity: to.Int32Ptr(1),
				Tier:     armwebpubsub.WebPubSubSKUTierStandard.ToPtr(),
			},
		},
		nil)
	if err != nil {
		log.Fatal(err)
	}
	res, err := poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		log.Fatal(err)
	}
	log.Printf("WebPubSubResource.ID: %s\n", *res.ID)
}

// x-ms-original-file: specification/webpubsub/resource-manager/Microsoft.SignalRService/stable/2021-10-01/examples/WebPubSub_Delete.json
func ExampleWebPubSubClient_BeginDelete() {
	cred, err := azidentity.NewDefaultAzureCredential(nil)
	if err != nil {
		log.Fatalf("failed to obtain a credential: %v", err)
	}
	ctx := context.Background()
	client := armwebpubsub.NewWebPubSubClient("<subscription-id>", cred, nil)
	poller, err := client.BeginDelete(ctx,
		"<resource-group-name>",
		"<resource-name>",
		nil)
	if err != nil {
		log.Fatal(err)
	}
	_, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		log.Fatal(err)
	}
}

// x-ms-original-file: specification/webpubsub/resource-manager/Microsoft.SignalRService/stable/2021-10-01/examples/WebPubSub_Update.json
func ExampleWebPubSubClient_BeginUpdate() {
	cred, err := azidentity.NewDefaultAzureCredential(nil)
	if err != nil {
		log.Fatalf("failed to obtain a credential: %v", err)
	}
	ctx := context.Background()
	client := armwebpubsub.NewWebPubSubClient("<subscription-id>", cred, nil)
	poller, err := client.BeginUpdate(ctx,
		"<resource-group-name>",
		"<resource-name>",
		armwebpubsub.WebPubSubResource{
			TrackedResource: armwebpubsub.TrackedResource{
				Location: to.StringPtr("<location>"),
				Tags: map[string]*string{
					"key1": to.StringPtr("value1"),
				},
			},
			Identity: &armwebpubsub.ManagedIdentity{
				Type: armwebpubsub.ManagedIdentityTypeSystemAssigned.ToPtr(),
			},
			Properties: &armwebpubsub.WebPubSubProperties{
				DisableAADAuth:   to.BoolPtr(false),
				DisableLocalAuth: to.BoolPtr(false),
				LiveTraceConfiguration: &armwebpubsub.LiveTraceConfiguration{
					Categories: []*armwebpubsub.LiveTraceCategory{
						{
							Name:    to.StringPtr("<name>"),
							Enabled: to.StringPtr("<enabled>"),
						}},
					Enabled: to.StringPtr("<enabled>"),
				},
				NetworkACLs: &armwebpubsub.WebPubSubNetworkACLs{
					DefaultAction: armwebpubsub.ACLActionDeny.ToPtr(),
					PrivateEndpoints: []*armwebpubsub.PrivateEndpointACL{
						{
							NetworkACL: armwebpubsub.NetworkACL{
								Allow: []*armwebpubsub.WebPubSubRequestType{
									armwebpubsub.WebPubSubRequestTypeServerConnection.ToPtr()},
							},
							Name: to.StringPtr("<name>"),
						}},
					PublicNetwork: &armwebpubsub.NetworkACL{
						Allow: []*armwebpubsub.WebPubSubRequestType{
							armwebpubsub.WebPubSubRequestTypeClientConnection.ToPtr()},
					},
				},
				PublicNetworkAccess: to.StringPtr("<public-network-access>"),
				TLS: &armwebpubsub.WebPubSubTLSSettings{
					ClientCertEnabled: to.BoolPtr(false),
				},
			},
			SKU: &armwebpubsub.ResourceSKU{
				Name:     to.StringPtr("<name>"),
				Capacity: to.Int32Ptr(1),
				Tier:     armwebpubsub.WebPubSubSKUTierStandard.ToPtr(),
			},
		},
		nil)
	if err != nil {
		log.Fatal(err)
	}
	res, err := poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		log.Fatal(err)
	}
	log.Printf("WebPubSubResource.ID: %s\n", *res.ID)
}

// x-ms-original-file: specification/webpubsub/resource-manager/Microsoft.SignalRService/stable/2021-10-01/examples/WebPubSub_ListKeys.json
func ExampleWebPubSubClient_ListKeys() {
	cred, err := azidentity.NewDefaultAzureCredential(nil)
	if err != nil {
		log.Fatalf("failed to obtain a credential: %v", err)
	}
	ctx := context.Background()
	client := armwebpubsub.NewWebPubSubClient("<subscription-id>", cred, nil)
	_, err = client.ListKeys(ctx,
		"<resource-group-name>",
		"<resource-name>",
		nil)
	if err != nil {
		log.Fatal(err)
	}
}

// x-ms-original-file: specification/webpubsub/resource-manager/Microsoft.SignalRService/stable/2021-10-01/examples/WebPubSub_RegenerateKey.json
func ExampleWebPubSubClient_BeginRegenerateKey() {
	cred, err := azidentity.NewDefaultAzureCredential(nil)
	if err != nil {
		log.Fatalf("failed to obtain a credential: %v", err)
	}
	ctx := context.Background()
	client := armwebpubsub.NewWebPubSubClient("<subscription-id>", cred, nil)
	poller, err := client.BeginRegenerateKey(ctx,
		"<resource-group-name>",
		"<resource-name>",
		armwebpubsub.RegenerateKeyParameters{
			KeyType: armwebpubsub.KeyTypePrimary.ToPtr(),
		},
		nil)
	if err != nil {
		log.Fatal(err)
	}
	_, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		log.Fatal(err)
	}
}

// x-ms-original-file: specification/webpubsub/resource-manager/Microsoft.SignalRService/stable/2021-10-01/examples/WebPubSub_Restart.json
func ExampleWebPubSubClient_BeginRestart() {
	cred, err := azidentity.NewDefaultAzureCredential(nil)
	if err != nil {
		log.Fatalf("failed to obtain a credential: %v", err)
	}
	ctx := context.Background()
	client := armwebpubsub.NewWebPubSubClient("<subscription-id>", cred, nil)
	poller, err := client.BeginRestart(ctx,
		"<resource-group-name>",
		"<resource-name>",
		nil)
	if err != nil {
		log.Fatal(err)
	}
	_, err = poller.PollUntilDone(ctx, 30*time.Second)
	if err != nil {
		log.Fatal(err)
	}
}

// x-ms-original-file: specification/webpubsub/resource-manager/Microsoft.SignalRService/stable/2021-10-01/examples/WebPubSub_ListSkus.json
func ExampleWebPubSubClient_ListSKUs() {
	cred, err := azidentity.NewDefaultAzureCredential(nil)
	if err != nil {
		log.Fatalf("failed to obtain a credential: %v", err)
	}
	ctx := context.Background()
	client := armwebpubsub.NewWebPubSubClient("<subscription-id>", cred, nil)
	_, err = client.ListSKUs(ctx,
		"<resource-group-name>",
		"<resource-name>",
		nil)
	if err != nil {
		log.Fatal(err)
	}
}
