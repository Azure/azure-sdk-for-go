//go:build go1.16
// +build go1.16

// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

package armwebpubsub

import (
	"context"
	armruntime "github.com/Azure/azure-sdk-for-go/sdk/azcore/arm/runtime"
	"net/http"
	"time"
)

// OperationsListResponse contains the response from method Operations.List.
type OperationsListResponse struct {
	OperationsListResult
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// OperationsListResult contains the result from method Operations.List.
type OperationsListResult struct {
	OperationList
}

// UsagesListResponse contains the response from method Usages.List.
type UsagesListResponse struct {
	UsagesListResult
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// UsagesListResult contains the result from method Usages.List.
type UsagesListResult struct {
	SignalRServiceUsageList
}

// WebPubSubCheckNameAvailabilityResponse contains the response from method WebPubSub.CheckNameAvailability.
type WebPubSubCheckNameAvailabilityResponse struct {
	WebPubSubCheckNameAvailabilityResult
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// WebPubSubCheckNameAvailabilityResult contains the result from method WebPubSub.CheckNameAvailability.
type WebPubSubCheckNameAvailabilityResult struct {
	NameAvailability
}

// WebPubSubCreateOrUpdatePollerResponse contains the response from method WebPubSub.CreateOrUpdate.
type WebPubSubCreateOrUpdatePollerResponse struct {
	// Poller contains an initialized poller.
	Poller *WebPubSubCreateOrUpdatePoller

	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// PollUntilDone will poll the service endpoint until a terminal state is reached or an error is received.
// freq: the time to wait between intervals in absence of a Retry-After header. Allowed minimum is one second.
// A good starting value is 30 seconds. Note that some resources might benefit from a different value.
func (l WebPubSubCreateOrUpdatePollerResponse) PollUntilDone(ctx context.Context, freq time.Duration) (WebPubSubCreateOrUpdateResponse, error) {
	respType := WebPubSubCreateOrUpdateResponse{}
	resp, err := l.Poller.pt.PollUntilDone(ctx, freq, &respType.WebPubSubResource)
	if err != nil {
		return respType, err
	}
	respType.RawResponse = resp
	return respType, nil
}

// Resume rehydrates a WebPubSubCreateOrUpdatePollerResponse from the provided client and resume token.
func (l *WebPubSubCreateOrUpdatePollerResponse) Resume(ctx context.Context, client *WebPubSubClient, token string) error {
	pt, err := armruntime.NewPollerFromResumeToken("WebPubSubClient.CreateOrUpdate", token, client.pl, client.createOrUpdateHandleError)
	if err != nil {
		return err
	}
	poller := &WebPubSubCreateOrUpdatePoller{
		pt: pt,
	}
	resp, err := poller.Poll(ctx)
	if err != nil {
		return err
	}
	l.Poller = poller
	l.RawResponse = resp
	return nil
}

// WebPubSubCreateOrUpdateResponse contains the response from method WebPubSub.CreateOrUpdate.
type WebPubSubCreateOrUpdateResponse struct {
	WebPubSubCreateOrUpdateResult
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// WebPubSubCreateOrUpdateResult contains the result from method WebPubSub.CreateOrUpdate.
type WebPubSubCreateOrUpdateResult struct {
	WebPubSubResource
}

// WebPubSubDeletePollerResponse contains the response from method WebPubSub.Delete.
type WebPubSubDeletePollerResponse struct {
	// Poller contains an initialized poller.
	Poller *WebPubSubDeletePoller

	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// PollUntilDone will poll the service endpoint until a terminal state is reached or an error is received.
// freq: the time to wait between intervals in absence of a Retry-After header. Allowed minimum is one second.
// A good starting value is 30 seconds. Note that some resources might benefit from a different value.
func (l WebPubSubDeletePollerResponse) PollUntilDone(ctx context.Context, freq time.Duration) (WebPubSubDeleteResponse, error) {
	respType := WebPubSubDeleteResponse{}
	resp, err := l.Poller.pt.PollUntilDone(ctx, freq, nil)
	if err != nil {
		return respType, err
	}
	respType.RawResponse = resp
	return respType, nil
}

// Resume rehydrates a WebPubSubDeletePollerResponse from the provided client and resume token.
func (l *WebPubSubDeletePollerResponse) Resume(ctx context.Context, client *WebPubSubClient, token string) error {
	pt, err := armruntime.NewPollerFromResumeToken("WebPubSubClient.Delete", token, client.pl, client.deleteHandleError)
	if err != nil {
		return err
	}
	poller := &WebPubSubDeletePoller{
		pt: pt,
	}
	resp, err := poller.Poll(ctx)
	if err != nil {
		return err
	}
	l.Poller = poller
	l.RawResponse = resp
	return nil
}

// WebPubSubDeleteResponse contains the response from method WebPubSub.Delete.
type WebPubSubDeleteResponse struct {
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// WebPubSubGetResponse contains the response from method WebPubSub.Get.
type WebPubSubGetResponse struct {
	WebPubSubGetResult
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// WebPubSubGetResult contains the result from method WebPubSub.Get.
type WebPubSubGetResult struct {
	WebPubSubResource
}

// WebPubSubHubsCreateOrUpdatePollerResponse contains the response from method WebPubSubHubs.CreateOrUpdate.
type WebPubSubHubsCreateOrUpdatePollerResponse struct {
	// Poller contains an initialized poller.
	Poller *WebPubSubHubsCreateOrUpdatePoller

	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// PollUntilDone will poll the service endpoint until a terminal state is reached or an error is received.
// freq: the time to wait between intervals in absence of a Retry-After header. Allowed minimum is one second.
// A good starting value is 30 seconds. Note that some resources might benefit from a different value.
func (l WebPubSubHubsCreateOrUpdatePollerResponse) PollUntilDone(ctx context.Context, freq time.Duration) (WebPubSubHubsCreateOrUpdateResponse, error) {
	respType := WebPubSubHubsCreateOrUpdateResponse{}
	resp, err := l.Poller.pt.PollUntilDone(ctx, freq, &respType.WebPubSubHub)
	if err != nil {
		return respType, err
	}
	respType.RawResponse = resp
	return respType, nil
}

// Resume rehydrates a WebPubSubHubsCreateOrUpdatePollerResponse from the provided client and resume token.
func (l *WebPubSubHubsCreateOrUpdatePollerResponse) Resume(ctx context.Context, client *WebPubSubHubsClient, token string) error {
	pt, err := armruntime.NewPollerFromResumeToken("WebPubSubHubsClient.CreateOrUpdate", token, client.pl, client.createOrUpdateHandleError)
	if err != nil {
		return err
	}
	poller := &WebPubSubHubsCreateOrUpdatePoller{
		pt: pt,
	}
	resp, err := poller.Poll(ctx)
	if err != nil {
		return err
	}
	l.Poller = poller
	l.RawResponse = resp
	return nil
}

// WebPubSubHubsCreateOrUpdateResponse contains the response from method WebPubSubHubs.CreateOrUpdate.
type WebPubSubHubsCreateOrUpdateResponse struct {
	WebPubSubHubsCreateOrUpdateResult
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// WebPubSubHubsCreateOrUpdateResult contains the result from method WebPubSubHubs.CreateOrUpdate.
type WebPubSubHubsCreateOrUpdateResult struct {
	WebPubSubHub
}

// WebPubSubHubsDeletePollerResponse contains the response from method WebPubSubHubs.Delete.
type WebPubSubHubsDeletePollerResponse struct {
	// Poller contains an initialized poller.
	Poller *WebPubSubHubsDeletePoller

	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// PollUntilDone will poll the service endpoint until a terminal state is reached or an error is received.
// freq: the time to wait between intervals in absence of a Retry-After header. Allowed minimum is one second.
// A good starting value is 30 seconds. Note that some resources might benefit from a different value.
func (l WebPubSubHubsDeletePollerResponse) PollUntilDone(ctx context.Context, freq time.Duration) (WebPubSubHubsDeleteResponse, error) {
	respType := WebPubSubHubsDeleteResponse{}
	resp, err := l.Poller.pt.PollUntilDone(ctx, freq, nil)
	if err != nil {
		return respType, err
	}
	respType.RawResponse = resp
	return respType, nil
}

// Resume rehydrates a WebPubSubHubsDeletePollerResponse from the provided client and resume token.
func (l *WebPubSubHubsDeletePollerResponse) Resume(ctx context.Context, client *WebPubSubHubsClient, token string) error {
	pt, err := armruntime.NewPollerFromResumeToken("WebPubSubHubsClient.Delete", token, client.pl, client.deleteHandleError)
	if err != nil {
		return err
	}
	poller := &WebPubSubHubsDeletePoller{
		pt: pt,
	}
	resp, err := poller.Poll(ctx)
	if err != nil {
		return err
	}
	l.Poller = poller
	l.RawResponse = resp
	return nil
}

// WebPubSubHubsDeleteResponse contains the response from method WebPubSubHubs.Delete.
type WebPubSubHubsDeleteResponse struct {
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// WebPubSubHubsGetResponse contains the response from method WebPubSubHubs.Get.
type WebPubSubHubsGetResponse struct {
	WebPubSubHubsGetResult
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// WebPubSubHubsGetResult contains the result from method WebPubSubHubs.Get.
type WebPubSubHubsGetResult struct {
	WebPubSubHub
}

// WebPubSubHubsListResponse contains the response from method WebPubSubHubs.List.
type WebPubSubHubsListResponse struct {
	WebPubSubHubsListResult
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// WebPubSubHubsListResult contains the result from method WebPubSubHubs.List.
type WebPubSubHubsListResult struct {
	WebPubSubHubList
}

// WebPubSubListByResourceGroupResponse contains the response from method WebPubSub.ListByResourceGroup.
type WebPubSubListByResourceGroupResponse struct {
	WebPubSubListByResourceGroupResult
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// WebPubSubListByResourceGroupResult contains the result from method WebPubSub.ListByResourceGroup.
type WebPubSubListByResourceGroupResult struct {
	WebPubSubResourceList
}

// WebPubSubListBySubscriptionResponse contains the response from method WebPubSub.ListBySubscription.
type WebPubSubListBySubscriptionResponse struct {
	WebPubSubListBySubscriptionResult
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// WebPubSubListBySubscriptionResult contains the result from method WebPubSub.ListBySubscription.
type WebPubSubListBySubscriptionResult struct {
	WebPubSubResourceList
}

// WebPubSubListKeysResponse contains the response from method WebPubSub.ListKeys.
type WebPubSubListKeysResponse struct {
	WebPubSubListKeysResult
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// WebPubSubListKeysResult contains the result from method WebPubSub.ListKeys.
type WebPubSubListKeysResult struct {
	WebPubSubKeys
}

// WebPubSubListSKUsResponse contains the response from method WebPubSub.ListSKUs.
type WebPubSubListSKUsResponse struct {
	WebPubSubListSKUsResult
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// WebPubSubListSKUsResult contains the result from method WebPubSub.ListSKUs.
type WebPubSubListSKUsResult struct {
	SKUList
}

// WebPubSubPrivateEndpointConnectionsDeletePollerResponse contains the response from method WebPubSubPrivateEndpointConnections.Delete.
type WebPubSubPrivateEndpointConnectionsDeletePollerResponse struct {
	// Poller contains an initialized poller.
	Poller *WebPubSubPrivateEndpointConnectionsDeletePoller

	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// PollUntilDone will poll the service endpoint until a terminal state is reached or an error is received.
// freq: the time to wait between intervals in absence of a Retry-After header. Allowed minimum is one second.
// A good starting value is 30 seconds. Note that some resources might benefit from a different value.
func (l WebPubSubPrivateEndpointConnectionsDeletePollerResponse) PollUntilDone(ctx context.Context, freq time.Duration) (WebPubSubPrivateEndpointConnectionsDeleteResponse, error) {
	respType := WebPubSubPrivateEndpointConnectionsDeleteResponse{}
	resp, err := l.Poller.pt.PollUntilDone(ctx, freq, nil)
	if err != nil {
		return respType, err
	}
	respType.RawResponse = resp
	return respType, nil
}

// Resume rehydrates a WebPubSubPrivateEndpointConnectionsDeletePollerResponse from the provided client and resume token.
func (l *WebPubSubPrivateEndpointConnectionsDeletePollerResponse) Resume(ctx context.Context, client *WebPubSubPrivateEndpointConnectionsClient, token string) error {
	pt, err := armruntime.NewPollerFromResumeToken("WebPubSubPrivateEndpointConnectionsClient.Delete", token, client.pl, client.deleteHandleError)
	if err != nil {
		return err
	}
	poller := &WebPubSubPrivateEndpointConnectionsDeletePoller{
		pt: pt,
	}
	resp, err := poller.Poll(ctx)
	if err != nil {
		return err
	}
	l.Poller = poller
	l.RawResponse = resp
	return nil
}

// WebPubSubPrivateEndpointConnectionsDeleteResponse contains the response from method WebPubSubPrivateEndpointConnections.Delete.
type WebPubSubPrivateEndpointConnectionsDeleteResponse struct {
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// WebPubSubPrivateEndpointConnectionsGetResponse contains the response from method WebPubSubPrivateEndpointConnections.Get.
type WebPubSubPrivateEndpointConnectionsGetResponse struct {
	WebPubSubPrivateEndpointConnectionsGetResult
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// WebPubSubPrivateEndpointConnectionsGetResult contains the result from method WebPubSubPrivateEndpointConnections.Get.
type WebPubSubPrivateEndpointConnectionsGetResult struct {
	PrivateEndpointConnection
}

// WebPubSubPrivateEndpointConnectionsListResponse contains the response from method WebPubSubPrivateEndpointConnections.List.
type WebPubSubPrivateEndpointConnectionsListResponse struct {
	WebPubSubPrivateEndpointConnectionsListResult
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// WebPubSubPrivateEndpointConnectionsListResult contains the result from method WebPubSubPrivateEndpointConnections.List.
type WebPubSubPrivateEndpointConnectionsListResult struct {
	PrivateEndpointConnectionList
}

// WebPubSubPrivateEndpointConnectionsUpdateResponse contains the response from method WebPubSubPrivateEndpointConnections.Update.
type WebPubSubPrivateEndpointConnectionsUpdateResponse struct {
	WebPubSubPrivateEndpointConnectionsUpdateResult
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// WebPubSubPrivateEndpointConnectionsUpdateResult contains the result from method WebPubSubPrivateEndpointConnections.Update.
type WebPubSubPrivateEndpointConnectionsUpdateResult struct {
	PrivateEndpointConnection
}

// WebPubSubPrivateLinkResourcesListResponse contains the response from method WebPubSubPrivateLinkResources.List.
type WebPubSubPrivateLinkResourcesListResponse struct {
	WebPubSubPrivateLinkResourcesListResult
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// WebPubSubPrivateLinkResourcesListResult contains the result from method WebPubSubPrivateLinkResources.List.
type WebPubSubPrivateLinkResourcesListResult struct {
	PrivateLinkResourceList
}

// WebPubSubRegenerateKeyPollerResponse contains the response from method WebPubSub.RegenerateKey.
type WebPubSubRegenerateKeyPollerResponse struct {
	// Poller contains an initialized poller.
	Poller *WebPubSubRegenerateKeyPoller

	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// PollUntilDone will poll the service endpoint until a terminal state is reached or an error is received.
// freq: the time to wait between intervals in absence of a Retry-After header. Allowed minimum is one second.
// A good starting value is 30 seconds. Note that some resources might benefit from a different value.
func (l WebPubSubRegenerateKeyPollerResponse) PollUntilDone(ctx context.Context, freq time.Duration) (WebPubSubRegenerateKeyResponse, error) {
	respType := WebPubSubRegenerateKeyResponse{}
	resp, err := l.Poller.pt.PollUntilDone(ctx, freq, &respType.WebPubSubKeys)
	if err != nil {
		return respType, err
	}
	respType.RawResponse = resp
	return respType, nil
}

// Resume rehydrates a WebPubSubRegenerateKeyPollerResponse from the provided client and resume token.
func (l *WebPubSubRegenerateKeyPollerResponse) Resume(ctx context.Context, client *WebPubSubClient, token string) error {
	pt, err := armruntime.NewPollerFromResumeToken("WebPubSubClient.RegenerateKey", token, client.pl, client.regenerateKeyHandleError)
	if err != nil {
		return err
	}
	poller := &WebPubSubRegenerateKeyPoller{
		pt: pt,
	}
	resp, err := poller.Poll(ctx)
	if err != nil {
		return err
	}
	l.Poller = poller
	l.RawResponse = resp
	return nil
}

// WebPubSubRegenerateKeyResponse contains the response from method WebPubSub.RegenerateKey.
type WebPubSubRegenerateKeyResponse struct {
	WebPubSubRegenerateKeyResult
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// WebPubSubRegenerateKeyResult contains the result from method WebPubSub.RegenerateKey.
type WebPubSubRegenerateKeyResult struct {
	WebPubSubKeys
}

// WebPubSubRestartPollerResponse contains the response from method WebPubSub.Restart.
type WebPubSubRestartPollerResponse struct {
	// Poller contains an initialized poller.
	Poller *WebPubSubRestartPoller

	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// PollUntilDone will poll the service endpoint until a terminal state is reached or an error is received.
// freq: the time to wait between intervals in absence of a Retry-After header. Allowed minimum is one second.
// A good starting value is 30 seconds. Note that some resources might benefit from a different value.
func (l WebPubSubRestartPollerResponse) PollUntilDone(ctx context.Context, freq time.Duration) (WebPubSubRestartResponse, error) {
	respType := WebPubSubRestartResponse{}
	resp, err := l.Poller.pt.PollUntilDone(ctx, freq, nil)
	if err != nil {
		return respType, err
	}
	respType.RawResponse = resp
	return respType, nil
}

// Resume rehydrates a WebPubSubRestartPollerResponse from the provided client and resume token.
func (l *WebPubSubRestartPollerResponse) Resume(ctx context.Context, client *WebPubSubClient, token string) error {
	pt, err := armruntime.NewPollerFromResumeToken("WebPubSubClient.Restart", token, client.pl, client.restartHandleError)
	if err != nil {
		return err
	}
	poller := &WebPubSubRestartPoller{
		pt: pt,
	}
	resp, err := poller.Poll(ctx)
	if err != nil {
		return err
	}
	l.Poller = poller
	l.RawResponse = resp
	return nil
}

// WebPubSubRestartResponse contains the response from method WebPubSub.Restart.
type WebPubSubRestartResponse struct {
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// WebPubSubSharedPrivateLinkResourcesCreateOrUpdatePollerResponse contains the response from method WebPubSubSharedPrivateLinkResources.CreateOrUpdate.
type WebPubSubSharedPrivateLinkResourcesCreateOrUpdatePollerResponse struct {
	// Poller contains an initialized poller.
	Poller *WebPubSubSharedPrivateLinkResourcesCreateOrUpdatePoller

	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// PollUntilDone will poll the service endpoint until a terminal state is reached or an error is received.
// freq: the time to wait between intervals in absence of a Retry-After header. Allowed minimum is one second.
// A good starting value is 30 seconds. Note that some resources might benefit from a different value.
func (l WebPubSubSharedPrivateLinkResourcesCreateOrUpdatePollerResponse) PollUntilDone(ctx context.Context, freq time.Duration) (WebPubSubSharedPrivateLinkResourcesCreateOrUpdateResponse, error) {
	respType := WebPubSubSharedPrivateLinkResourcesCreateOrUpdateResponse{}
	resp, err := l.Poller.pt.PollUntilDone(ctx, freq, &respType.SharedPrivateLinkResource)
	if err != nil {
		return respType, err
	}
	respType.RawResponse = resp
	return respType, nil
}

// Resume rehydrates a WebPubSubSharedPrivateLinkResourcesCreateOrUpdatePollerResponse from the provided client and resume token.
func (l *WebPubSubSharedPrivateLinkResourcesCreateOrUpdatePollerResponse) Resume(ctx context.Context, client *WebPubSubSharedPrivateLinkResourcesClient, token string) error {
	pt, err := armruntime.NewPollerFromResumeToken("WebPubSubSharedPrivateLinkResourcesClient.CreateOrUpdate", token, client.pl, client.createOrUpdateHandleError)
	if err != nil {
		return err
	}
	poller := &WebPubSubSharedPrivateLinkResourcesCreateOrUpdatePoller{
		pt: pt,
	}
	resp, err := poller.Poll(ctx)
	if err != nil {
		return err
	}
	l.Poller = poller
	l.RawResponse = resp
	return nil
}

// WebPubSubSharedPrivateLinkResourcesCreateOrUpdateResponse contains the response from method WebPubSubSharedPrivateLinkResources.CreateOrUpdate.
type WebPubSubSharedPrivateLinkResourcesCreateOrUpdateResponse struct {
	WebPubSubSharedPrivateLinkResourcesCreateOrUpdateResult
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// WebPubSubSharedPrivateLinkResourcesCreateOrUpdateResult contains the result from method WebPubSubSharedPrivateLinkResources.CreateOrUpdate.
type WebPubSubSharedPrivateLinkResourcesCreateOrUpdateResult struct {
	SharedPrivateLinkResource
}

// WebPubSubSharedPrivateLinkResourcesDeletePollerResponse contains the response from method WebPubSubSharedPrivateLinkResources.Delete.
type WebPubSubSharedPrivateLinkResourcesDeletePollerResponse struct {
	// Poller contains an initialized poller.
	Poller *WebPubSubSharedPrivateLinkResourcesDeletePoller

	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// PollUntilDone will poll the service endpoint until a terminal state is reached or an error is received.
// freq: the time to wait between intervals in absence of a Retry-After header. Allowed minimum is one second.
// A good starting value is 30 seconds. Note that some resources might benefit from a different value.
func (l WebPubSubSharedPrivateLinkResourcesDeletePollerResponse) PollUntilDone(ctx context.Context, freq time.Duration) (WebPubSubSharedPrivateLinkResourcesDeleteResponse, error) {
	respType := WebPubSubSharedPrivateLinkResourcesDeleteResponse{}
	resp, err := l.Poller.pt.PollUntilDone(ctx, freq, nil)
	if err != nil {
		return respType, err
	}
	respType.RawResponse = resp
	return respType, nil
}

// Resume rehydrates a WebPubSubSharedPrivateLinkResourcesDeletePollerResponse from the provided client and resume token.
func (l *WebPubSubSharedPrivateLinkResourcesDeletePollerResponse) Resume(ctx context.Context, client *WebPubSubSharedPrivateLinkResourcesClient, token string) error {
	pt, err := armruntime.NewPollerFromResumeToken("WebPubSubSharedPrivateLinkResourcesClient.Delete", token, client.pl, client.deleteHandleError)
	if err != nil {
		return err
	}
	poller := &WebPubSubSharedPrivateLinkResourcesDeletePoller{
		pt: pt,
	}
	resp, err := poller.Poll(ctx)
	if err != nil {
		return err
	}
	l.Poller = poller
	l.RawResponse = resp
	return nil
}

// WebPubSubSharedPrivateLinkResourcesDeleteResponse contains the response from method WebPubSubSharedPrivateLinkResources.Delete.
type WebPubSubSharedPrivateLinkResourcesDeleteResponse struct {
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// WebPubSubSharedPrivateLinkResourcesGetResponse contains the response from method WebPubSubSharedPrivateLinkResources.Get.
type WebPubSubSharedPrivateLinkResourcesGetResponse struct {
	WebPubSubSharedPrivateLinkResourcesGetResult
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// WebPubSubSharedPrivateLinkResourcesGetResult contains the result from method WebPubSubSharedPrivateLinkResources.Get.
type WebPubSubSharedPrivateLinkResourcesGetResult struct {
	SharedPrivateLinkResource
}

// WebPubSubSharedPrivateLinkResourcesListResponse contains the response from method WebPubSubSharedPrivateLinkResources.List.
type WebPubSubSharedPrivateLinkResourcesListResponse struct {
	WebPubSubSharedPrivateLinkResourcesListResult
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// WebPubSubSharedPrivateLinkResourcesListResult contains the result from method WebPubSubSharedPrivateLinkResources.List.
type WebPubSubSharedPrivateLinkResourcesListResult struct {
	SharedPrivateLinkResourceList
}

// WebPubSubUpdatePollerResponse contains the response from method WebPubSub.Update.
type WebPubSubUpdatePollerResponse struct {
	// Poller contains an initialized poller.
	Poller *WebPubSubUpdatePoller

	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// PollUntilDone will poll the service endpoint until a terminal state is reached or an error is received.
// freq: the time to wait between intervals in absence of a Retry-After header. Allowed minimum is one second.
// A good starting value is 30 seconds. Note that some resources might benefit from a different value.
func (l WebPubSubUpdatePollerResponse) PollUntilDone(ctx context.Context, freq time.Duration) (WebPubSubUpdateResponse, error) {
	respType := WebPubSubUpdateResponse{}
	resp, err := l.Poller.pt.PollUntilDone(ctx, freq, &respType.WebPubSubResource)
	if err != nil {
		return respType, err
	}
	respType.RawResponse = resp
	return respType, nil
}

// Resume rehydrates a WebPubSubUpdatePollerResponse from the provided client and resume token.
func (l *WebPubSubUpdatePollerResponse) Resume(ctx context.Context, client *WebPubSubClient, token string) error {
	pt, err := armruntime.NewPollerFromResumeToken("WebPubSubClient.Update", token, client.pl, client.updateHandleError)
	if err != nil {
		return err
	}
	poller := &WebPubSubUpdatePoller{
		pt: pt,
	}
	resp, err := poller.Poll(ctx)
	if err != nil {
		return err
	}
	l.Poller = poller
	l.RawResponse = resp
	return nil
}

// WebPubSubUpdateResponse contains the response from method WebPubSub.Update.
type WebPubSubUpdateResponse struct {
	WebPubSubUpdateResult
	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response
}

// WebPubSubUpdateResult contains the result from method WebPubSub.Update.
type WebPubSubUpdateResult struct {
	WebPubSubResource
}
