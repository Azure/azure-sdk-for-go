//go:build go1.16
// +build go1.16

// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

package armwindowsesu

import (
	"encoding/json"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore"
	"reflect"
	"time"
)

// ErrorDefinition - Error definition.
type ErrorDefinition struct {
	// READ-ONLY; Service specific error code which serves as the substatus for the HTTP error code.
	Code *string `json:"code,omitempty" azure:"ro"`

	// READ-ONLY; Internal error details.
	Details []*ErrorDefinition `json:"details,omitempty" azure:"ro"`

	// READ-ONLY; Description of the error.
	Message *string `json:"message,omitempty" azure:"ro"`
}

// MarshalJSON implements the json.Marshaller interface for type ErrorDefinition.
func (e ErrorDefinition) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "code", e.Code)
	populate(objectMap, "details", e.Details)
	populate(objectMap, "message", e.Message)
	return json.Marshal(objectMap)
}

// ErrorResponse - Error response.
// Implements the error and azcore.HTTPResponse interfaces.
type ErrorResponse struct {
	raw string
	// The error details.
	InnerError *ErrorDefinition `json:"error,omitempty"`
}

// Error implements the error interface for type ErrorResponse.
// The contents of the error text are not contractual and subject to change.
func (e ErrorResponse) Error() string {
	return e.raw
}

// MultipleActivationKey - MAK key details.
type MultipleActivationKey struct {
	TrackedResource
	// MAK key specific properties.
	Properties *MultipleActivationKeyProperties `json:"properties,omitempty"`
}

// MarshalJSON implements the json.Marshaller interface for type MultipleActivationKey.
func (m MultipleActivationKey) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	m.TrackedResource.marshalInternal(objectMap)
	populate(objectMap, "properties", m.Properties)
	return json.Marshal(objectMap)
}

// MultipleActivationKeyList - List of MAK keys.
type MultipleActivationKeyList struct {
	// List of MAK keys.
	Value []*MultipleActivationKey `json:"value,omitempty"`

	// READ-ONLY; Link to the next page of resources.
	NextLink *string `json:"nextLink,omitempty" azure:"ro"`
}

// MarshalJSON implements the json.Marshaller interface for type MultipleActivationKeyList.
func (m MultipleActivationKeyList) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "nextLink", m.NextLink)
	populate(objectMap, "value", m.Value)
	return json.Marshal(objectMap)
}

// MultipleActivationKeyProperties - MAK key specific properties.
type MultipleActivationKeyProperties struct {
	// Agreement number under which the key is requested.
	AgreementNumber *string `json:"agreementNumber,omitempty"`

	// Number of activations/servers using the MAK key.
	InstalledServerNumber *int32 `json:"installedServerNumber,omitempty"`

	// true if user has eligible on-premises Windows physical or virtual machines, and that the requested key will only be used in their organization; false
	// otherwise.
	IsEligible *bool `json:"isEligible,omitempty"`

	// Type of OS for which the key is requested.
	OSType *OsType `json:"osType,omitempty"`

	// Type of support
	SupportType *SupportType `json:"supportType,omitempty"`

	// READ-ONLY; End of support of security updates activated by the MAK key.
	ExpirationDate *time.Time `json:"expirationDate,omitempty" azure:"ro"`

	// READ-ONLY; MAK 5x5 key.
	MultipleActivationKey *string `json:"multipleActivationKey,omitempty" azure:"ro"`

	// READ-ONLY
	ProvisioningState *ProvisioningState `json:"provisioningState,omitempty" azure:"ro"`
}

// MarshalJSON implements the json.Marshaller interface for type MultipleActivationKeyProperties.
func (m MultipleActivationKeyProperties) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "agreementNumber", m.AgreementNumber)
	populateTimeRFC3339(objectMap, "expirationDate", m.ExpirationDate)
	populate(objectMap, "installedServerNumber", m.InstalledServerNumber)
	populate(objectMap, "isEligible", m.IsEligible)
	populate(objectMap, "multipleActivationKey", m.MultipleActivationKey)
	populate(objectMap, "osType", m.OSType)
	populate(objectMap, "provisioningState", m.ProvisioningState)
	populate(objectMap, "supportType", m.SupportType)
	return json.Marshal(objectMap)
}

// UnmarshalJSON implements the json.Unmarshaller interface for type MultipleActivationKeyProperties.
func (m *MultipleActivationKeyProperties) UnmarshalJSON(data []byte) error {
	var rawMsg map[string]json.RawMessage
	if err := json.Unmarshal(data, &rawMsg); err != nil {
		return err
	}
	for key, val := range rawMsg {
		var err error
		switch key {
		case "agreementNumber":
			err = unpopulate(val, &m.AgreementNumber)
			delete(rawMsg, key)
		case "expirationDate":
			err = unpopulateTimeRFC3339(val, &m.ExpirationDate)
			delete(rawMsg, key)
		case "installedServerNumber":
			err = unpopulate(val, &m.InstalledServerNumber)
			delete(rawMsg, key)
		case "isEligible":
			err = unpopulate(val, &m.IsEligible)
			delete(rawMsg, key)
		case "multipleActivationKey":
			err = unpopulate(val, &m.MultipleActivationKey)
			delete(rawMsg, key)
		case "osType":
			err = unpopulate(val, &m.OSType)
			delete(rawMsg, key)
		case "provisioningState":
			err = unpopulate(val, &m.ProvisioningState)
			delete(rawMsg, key)
		case "supportType":
			err = unpopulate(val, &m.SupportType)
			delete(rawMsg, key)
		}
		if err != nil {
			return err
		}
	}
	return nil
}

// MultipleActivationKeyUpdate - MAK key details.
type MultipleActivationKeyUpdate struct {
	// Resource tags.
	Tags map[string]*string `json:"tags,omitempty"`
}

// MarshalJSON implements the json.Marshaller interface for type MultipleActivationKeyUpdate.
func (m MultipleActivationKeyUpdate) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "tags", m.Tags)
	return json.Marshal(objectMap)
}

// MultipleActivationKeysBeginCreateOptions contains the optional parameters for the MultipleActivationKeys.BeginCreate method.
type MultipleActivationKeysBeginCreateOptions struct {
	// placeholder for future optional parameters
}

// MultipleActivationKeysDeleteOptions contains the optional parameters for the MultipleActivationKeys.Delete method.
type MultipleActivationKeysDeleteOptions struct {
	// placeholder for future optional parameters
}

// MultipleActivationKeysGetOptions contains the optional parameters for the MultipleActivationKeys.Get method.
type MultipleActivationKeysGetOptions struct {
	// placeholder for future optional parameters
}

// MultipleActivationKeysListByResourceGroupOptions contains the optional parameters for the MultipleActivationKeys.ListByResourceGroup method.
type MultipleActivationKeysListByResourceGroupOptions struct {
	// placeholder for future optional parameters
}

// MultipleActivationKeysListOptions contains the optional parameters for the MultipleActivationKeys.List method.
type MultipleActivationKeysListOptions struct {
	// placeholder for future optional parameters
}

// MultipleActivationKeysUpdateOptions contains the optional parameters for the MultipleActivationKeys.Update method.
type MultipleActivationKeysUpdateOptions struct {
	// placeholder for future optional parameters
}

// Operation - REST API operation details.
type Operation struct {
	// Meta data about operation used for display in portal.
	Display *OperationDisplay `json:"display,omitempty"`

	// READ-ONLY; Name of the operation.
	Name *string `json:"name,omitempty" azure:"ro"`
}

// OperationDisplay - Meta data about operation used for display in portal.
type OperationDisplay struct {
	Description *string `json:"description,omitempty"`
	Operation   *string `json:"operation,omitempty"`
	Provider    *string `json:"provider,omitempty"`
	Resource    *string `json:"resource,omitempty"`
}

// OperationList - List of available REST API operations.
type OperationList struct {
	// List of operations.
	Value []*Operation `json:"value,omitempty"`

	// READ-ONLY; Link to the next page of resources.
	NextLink *string `json:"nextLink,omitempty" azure:"ro"`
}

// MarshalJSON implements the json.Marshaller interface for type OperationList.
func (o OperationList) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "nextLink", o.NextLink)
	populate(objectMap, "value", o.Value)
	return json.Marshal(objectMap)
}

// OperationsListOptions contains the optional parameters for the Operations.List method.
type OperationsListOptions struct {
	// placeholder for future optional parameters
}

// Resource - Common fields that are returned in the response for all Azure Resource Manager resources
type Resource struct {
	// READ-ONLY; Fully qualified resource ID for the resource. Ex - /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}
	ID *string `json:"id,omitempty" azure:"ro"`

	// READ-ONLY; The name of the resource
	Name *string `json:"name,omitempty" azure:"ro"`

	// READ-ONLY; The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or "Microsoft.Storage/storageAccounts"
	Type *string `json:"type,omitempty" azure:"ro"`
}

// MarshalJSON implements the json.Marshaller interface for type Resource.
func (r Resource) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	r.marshalInternal(objectMap)
	return json.Marshal(objectMap)
}

func (r Resource) marshalInternal(objectMap map[string]interface{}) {
	populate(objectMap, "id", r.ID)
	populate(objectMap, "name", r.Name)
	populate(objectMap, "type", r.Type)
}

// TrackedResource - The resource model definition for an Azure Resource Manager tracked top level resource which has 'tags' and a 'location'
type TrackedResource struct {
	Resource
	// REQUIRED; The geo-location where the resource lives
	Location *string `json:"location,omitempty"`

	// Resource tags.
	Tags map[string]*string `json:"tags,omitempty"`
}

// MarshalJSON implements the json.Marshaller interface for type TrackedResource.
func (t TrackedResource) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	t.marshalInternal(objectMap)
	return json.Marshal(objectMap)
}

func (t TrackedResource) marshalInternal(objectMap map[string]interface{}) {
	t.Resource.marshalInternal(objectMap)
	populate(objectMap, "location", t.Location)
	populate(objectMap, "tags", t.Tags)
}

func populate(m map[string]interface{}, k string, v interface{}) {
	if v == nil {
		return
	} else if azcore.IsNullValue(v) {
		m[k] = nil
	} else if !reflect.ValueOf(v).IsNil() {
		m[k] = v
	}
}

func unpopulate(data json.RawMessage, v interface{}) error {
	if data == nil {
		return nil
	}
	return json.Unmarshal(data, v)
}
