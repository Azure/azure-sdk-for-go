//go:build go1.16
// +build go1.16

// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

package armwindowsiot

import (
	"encoding/json"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore"
	"reflect"
	"time"
)

// DeviceService - The description of the Windows IoT Device Service.
type DeviceService struct {
	TrackedResource
	// The Etag field is not required. If it is provided in the response body, it must also be provided as a header per the normal ETag convention.
	Etag *string `json:"etag,omitempty"`

	// The properties of a Windows IoT Device Service.
	Properties *DeviceServiceProperties `json:"properties,omitempty"`
}

// MarshalJSON implements the json.Marshaller interface for type DeviceService.
func (d DeviceService) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	d.TrackedResource.marshalInternal(objectMap)
	populate(objectMap, "etag", d.Etag)
	populate(objectMap, "properties", d.Properties)
	return json.Marshal(objectMap)
}

// DeviceServiceCheckNameAvailabilityParameters - Input values.
type DeviceServiceCheckNameAvailabilityParameters struct {
	// REQUIRED; The name of the Windows IoT Device Service to check.
	Name *string `json:"name,omitempty"`
}

// DeviceServiceDescriptionListResult - The JSON-serialized array of DeviceService objects with a next link.
type DeviceServiceDescriptionListResult struct {
	// The array of DeviceService objects.
	Value []*DeviceService `json:"value,omitempty"`

	// READ-ONLY; The next link.
	NextLink *string `json:"nextLink,omitempty" azure:"ro"`
}

// MarshalJSON implements the json.Marshaller interface for type DeviceServiceDescriptionListResult.
func (d DeviceServiceDescriptionListResult) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "nextLink", d.NextLink)
	populate(objectMap, "value", d.Value)
	return json.Marshal(objectMap)
}

// DeviceServiceNameAvailabilityInfo - The properties indicating whether a given Windows IoT Device Service name is available.
type DeviceServiceNameAvailabilityInfo struct {
	// The detailed reason message.
	Message *string `json:"message,omitempty"`

	// READ-ONLY; The value which indicates whether the provided name is available.
	NameAvailable *bool `json:"nameAvailable,omitempty" azure:"ro"`

	// READ-ONLY; The reason for unavailability.
	Reason *ServiceNameUnavailabilityReason `json:"reason,omitempty" azure:"ro"`
}

// DeviceServiceProperties - The properties of a Windows IoT Device Service.
type DeviceServiceProperties struct {
	// Windows IoT Device Service OEM AAD domain
	AdminDomainName *string `json:"adminDomainName,omitempty"`

	// Windows IoT Device Service ODM AAD domain
	BillingDomainName *string `json:"billingDomainName,omitempty"`

	// Windows IoT Device Service notes.
	Notes *string `json:"notes,omitempty"`

	// Windows IoT Device Service device allocation,
	Quantity *int64 `json:"quantity,omitempty"`

	// READ-ONLY; Windows IoT Device Service start date,
	StartDate *time.Time `json:"startDate,omitempty" azure:"ro"`
}

// MarshalJSON implements the json.Marshaller interface for type DeviceServiceProperties.
func (d DeviceServiceProperties) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "adminDomainName", d.AdminDomainName)
	populate(objectMap, "billingDomainName", d.BillingDomainName)
	populate(objectMap, "notes", d.Notes)
	populate(objectMap, "quantity", d.Quantity)
	populateTimeRFC3339(objectMap, "startDate", d.StartDate)
	return json.Marshal(objectMap)
}

// UnmarshalJSON implements the json.Unmarshaller interface for type DeviceServiceProperties.
func (d *DeviceServiceProperties) UnmarshalJSON(data []byte) error {
	var rawMsg map[string]json.RawMessage
	if err := json.Unmarshal(data, &rawMsg); err != nil {
		return err
	}
	for key, val := range rawMsg {
		var err error
		switch key {
		case "adminDomainName":
			err = unpopulate(val, &d.AdminDomainName)
			delete(rawMsg, key)
		case "billingDomainName":
			err = unpopulate(val, &d.BillingDomainName)
			delete(rawMsg, key)
		case "notes":
			err = unpopulate(val, &d.Notes)
			delete(rawMsg, key)
		case "quantity":
			err = unpopulate(val, &d.Quantity)
			delete(rawMsg, key)
		case "startDate":
			err = unpopulateTimeRFC3339(val, &d.StartDate)
			delete(rawMsg, key)
		}
		if err != nil {
			return err
		}
	}
	return nil
}

// ErrorDetails - The details of the error.
// Implements the error and azcore.HTTPResponse interfaces.
type ErrorDetails struct {
	raw string
	// The error object.
	InnerError *ErrorDetailsError `json:"error,omitempty"`
}

// Error implements the error interface for type ErrorDetails.
// The contents of the error text are not contractual and subject to change.
func (e ErrorDetails) Error() string {
	return e.raw
}

// ErrorDetailsError - The error object.
type ErrorDetailsError struct {
	// One of a server-defined set of error codes.
	Code *string `json:"code,omitempty"`

	// A human-readable representation of the error's details.
	Details *string `json:"details,omitempty"`

	// A human-readable representation of the error.
	Message *string `json:"message,omitempty"`

	// The target of the particular error.
	Target *string `json:"target,omitempty"`
}

// OperationDisplayInfo - The operation supported by Azure Data Catalog Service.
type OperationDisplayInfo struct {
	// The description of the operation.
	Description *string `json:"description,omitempty"`

	// The action that users can perform, based on their permission level.
	Operation *string `json:"operation,omitempty"`

	// Service provider: Azure Data Catalog Service.
	Provider *string `json:"provider,omitempty"`

	// Resource on which the operation is performed.
	Resource *string `json:"resource,omitempty"`
}

// OperationEntity - The operation supported by Azure Data Catalog Service.
type OperationEntity struct {
	// The operation supported by Azure Data Catalog Service.
	Display *OperationDisplayInfo `json:"display,omitempty"`

	// Indicates whether the operation is a data action
	IsDataAction *bool `json:"isDataAction,omitempty"`

	// Operation name: {provider}/{resource}/{operation}.
	Name *string `json:"name,omitempty"`

	// Indicates the executor of the operation.
	Origin *string `json:"origin,omitempty"`
}

// OperationListResult - Result of the request to list Windows IoT Device Service operations. It contains a list of operations and a URL link to get the
// next set of results.
type OperationListResult struct {
	// READ-ONLY; URL to get the next set of operation list results if there are any.
	NextLink *string `json:"nextLink,omitempty" azure:"ro"`

	// READ-ONLY; List of Windows IoT Device Service operations supported by the Microsoft.WindowsIoT resource provider.
	Value []*OperationEntity `json:"value,omitempty" azure:"ro"`
}

// MarshalJSON implements the json.Marshaller interface for type OperationListResult.
func (o OperationListResult) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "nextLink", o.NextLink)
	populate(objectMap, "value", o.Value)
	return json.Marshal(objectMap)
}

// OperationsListOptions contains the optional parameters for the Operations.List method.
type OperationsListOptions struct {
	// placeholder for future optional parameters
}

// ProxyResource - The resource model definition for a ARM proxy resource. It will have everything other than required location and tags
type ProxyResource struct {
	Resource
}

// Resource - The core properties of ARM resources
type Resource struct {
	// READ-ONLY; Fully qualified resource Id for the resource
	ID *string `json:"id,omitempty" azure:"ro"`

	// READ-ONLY; The name of the resource
	Name *string `json:"name,omitempty" azure:"ro"`

	// READ-ONLY; The type of the resource.
	Type *string `json:"type,omitempty" azure:"ro"`
}

// MarshalJSON implements the json.Marshaller interface for type Resource.
func (r Resource) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	r.marshalInternal(objectMap)
	return json.Marshal(objectMap)
}

func (r Resource) marshalInternal(objectMap map[string]interface{}) {
	populate(objectMap, "id", r.ID)
	populate(objectMap, "name", r.Name)
	populate(objectMap, "type", r.Type)
}

// ServicesCheckDeviceServiceNameAvailabilityOptions contains the optional parameters for the Services.CheckDeviceServiceNameAvailability method.
type ServicesCheckDeviceServiceNameAvailabilityOptions struct {
	// placeholder for future optional parameters
}

// ServicesCreateOrUpdateOptions contains the optional parameters for the Services.CreateOrUpdate method.
type ServicesCreateOrUpdateOptions struct {
	// ETag of the Windows IoT Device Service. Do not specify for creating a new Windows IoT Device Service. Required to update an existing Windows IoT Device
	// Service.
	IfMatch *string
}

// ServicesDeleteOptions contains the optional parameters for the Services.Delete method.
type ServicesDeleteOptions struct {
	// placeholder for future optional parameters
}

// ServicesGetOptions contains the optional parameters for the Services.Get method.
type ServicesGetOptions struct {
	// placeholder for future optional parameters
}

// ServicesListByResourceGroupOptions contains the optional parameters for the Services.ListByResourceGroup method.
type ServicesListByResourceGroupOptions struct {
	// placeholder for future optional parameters
}

// ServicesListOptions contains the optional parameters for the Services.List method.
type ServicesListOptions struct {
	// placeholder for future optional parameters
}

// ServicesUpdateOptions contains the optional parameters for the Services.Update method.
type ServicesUpdateOptions struct {
	// ETag of the Windows IoT Device Service. Do not specify for creating a brand new Windows IoT Device Service. Required to update an existing Windows IoT
	// Device Service.
	IfMatch *string
}

// TrackedResource - The resource model definition for a ARM tracked top level resource
type TrackedResource struct {
	Resource
	// The Azure Region where the resource lives
	Location *string `json:"location,omitempty"`

	// Resource tags.
	Tags map[string]*string `json:"tags,omitempty"`
}

// MarshalJSON implements the json.Marshaller interface for type TrackedResource.
func (t TrackedResource) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	t.marshalInternal(objectMap)
	return json.Marshal(objectMap)
}

func (t TrackedResource) marshalInternal(objectMap map[string]interface{}) {
	t.Resource.marshalInternal(objectMap)
	populate(objectMap, "location", t.Location)
	populate(objectMap, "tags", t.Tags)
}

func populate(m map[string]interface{}, k string, v interface{}) {
	if v == nil {
		return
	} else if azcore.IsNullValue(v) {
		m[k] = nil
	} else if !reflect.ValueOf(v).IsNil() {
		m[k] = v
	}
}

func unpopulate(data json.RawMessage, v interface{}) error {
	if data == nil {
		return nil
	}
	return json.Unmarshal(data, v)
}
