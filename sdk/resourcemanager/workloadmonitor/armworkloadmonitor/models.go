//go:build go1.18
// +build go1.18

// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator. DO NOT EDIT.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

package armworkloadmonitor

// ErrorDetails - Error details
type ErrorDetails struct {
	// Error code identifying the specific error.
	Code *string

	// A human-readable error message.
	Message *string
}

// ErrorResponse - Error response
type ErrorResponse struct {
	// Error info.
	Error *ErrorResponseError
}

// ErrorResponseError - Error info.
type ErrorResponseError struct {
	// Service-defined error code. This code serves as a sub-status for the HTTP error code specified in the response.
	Code *string

	// Error details.
	Details []*ErrorDetails

	// Human-readable representation of the error.
	Message *string
}

// HealthMonitor - Information about the monitor’s current health status.
type HealthMonitor struct {
	// Properties of the monitor's health status.
	Properties *HealthMonitorProperties

	// READ-ONLY; The resource Id.
	ID *string

	// READ-ONLY; The resource name.
	Name *string

	// READ-ONLY; The resource type.
	Type *string
}

// HealthMonitorList - Information about the current health statuses of the monitors.
type HealthMonitorList struct {
	// Link to next page if the list is too long.
	NextLink *string

	// Array of health monitors of the virtual machine.
	Value []*HealthMonitor
}

// HealthMonitorProperties - Properties of the monitor.
type HealthMonitorProperties struct {
	// Timestamp of the monitor's last health state change.
	CurrentStateFirstObservedTimestamp *string

	// Timestamp of the monitor's last health evaluation.
	EvaluationTimestamp *string

	// Evidence validating the monitor's current health state.
	Evidence any

	// Timestamp of the monitor's last reported health state.
	LastReportedTimestamp *string

	// The configuration settings at the time of the monitor's health evaluation.
	MonitorConfiguration any

	// Human-readable name of the monitor.
	MonitorName *string

	// Type of the monitor.
	MonitorType *string

	// Dynamic monitored object of the monitor.
	MonitoredObject *string

	// Name of the parent monitor.
	ParentMonitorName *string

	// READ-ONLY; Current health state of the monitor.
	CurrentMonitorState *HealthState

	// READ-ONLY; Previous health state of the monitor.
	PreviousMonitorState *HealthState
}

// HealthMonitorStateChange - Information about the monitor’s health state change at the provided timestamp.
type HealthMonitorStateChange struct {
	// Properties of the monitor's state change.
	Properties *HealthMonitorStateChangeProperties

	// READ-ONLY; The resource Id.
	ID *string

	// READ-ONLY; The resource name.
	Name *string

	// READ-ONLY; The resource type.
	Type *string
}

// HealthMonitorStateChangeList - Information about the health state changes of the monitor within the provided time window.
type HealthMonitorStateChangeList struct {
	// Link to next page if the list is too long.
	NextLink *string

	// Array of health state changes within the specified time window.
	Value []*HealthMonitorStateChange
}

// HealthMonitorStateChangeProperties - Properties of the monitor.
type HealthMonitorStateChangeProperties struct {
	// Timestamp of the monitor's last health state change.
	CurrentStateFirstObservedTimestamp *string

	// Timestamp of the monitor's last health evaluation.
	EvaluationTimestamp *string

	// Evidence validating the monitor's current health state.
	Evidence any

	// The configuration settings at the time of the monitor's health evaluation.
	MonitorConfiguration any

	// Human-readable name of the monitor.
	MonitorName *string

	// Type of the monitor.
	MonitorType *string

	// Dynamic monitored object of the monitor.
	MonitoredObject *string

	// READ-ONLY; Current health state of the monitor.
	CurrentMonitorState *HealthState

	// READ-ONLY; Previous health state of the monitor.
	PreviousMonitorState *HealthState
}

// Operation supported by the resource provider.
type Operation struct {
	// REQUIRED; The localized display information for this particular operation or action.
	Display *OperationDisplay

	// REQUIRED; The name of the operation being performed on this particular object.
	Name *string

	// REQUIRED; The intended executor of the operation.
	Origin *string
}

// OperationDisplay - The localized display information for this particular operation or action.
type OperationDisplay struct {
	// REQUIRED; Operation description.
	Description *string

	// REQUIRED; Human-readable, friendly name for the operation.
	Operation *string

	// REQUIRED; Operation resource provider name.
	Provider *string

	// REQUIRED; Resource on which the operation is performed.
	Resource *string
}

// OperationList - List of available REST API operations
type OperationList struct {
	// Link to next page if the list is too long.
	NextLink *string

	// Array of available REST API operations.
	Value []*Operation
}

// Resource - The resource model definition for the ARM proxy resource, 'microsoft.workloadmonitor/monitors'.
type Resource struct {
	// READ-ONLY; The resource Id.
	ID *string

	// READ-ONLY; The resource name.
	Name *string

	// READ-ONLY; The resource type.
	Type *string
}

