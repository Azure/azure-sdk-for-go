// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) Go Code Generator. DO NOT EDIT.

package armworkloadorchestration

import (
	"context"
	"errors"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/arm"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/policy"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/runtime"
	"net/http"
	"net/url"
	"strings"
)

// ConfigTemplatesClient contains the methods for the ConfigTemplates group.
// Don't use this type directly, use NewConfigTemplatesClient() instead.
type ConfigTemplatesClient struct {
	internal       *arm.Client
	subscriptionID string
}

// NewConfigTemplatesClient creates a new instance of ConfigTemplatesClient with the specified values.
//   - subscriptionID - The ID of the target subscription. The value must be an UUID.
//   - credential - used to authorize requests. Usually a credential from azidentity.
//   - options - pass nil to accept the default values.
func NewConfigTemplatesClient(subscriptionID string, credential azcore.TokenCredential, options *arm.ClientOptions) (*ConfigTemplatesClient, error) {
	cl, err := arm.NewClient(moduleName, moduleVersion, credential, options)
	if err != nil {
		return nil, err
	}
	client := &ConfigTemplatesClient{
		subscriptionID: subscriptionID,
		internal:       cl,
	}
	return client, nil
}

// BeginCreateOrUpdate - Create or update a Config Template Resource
// If the operation fails it returns an *azcore.ResponseError type.
//
// Generated from API version 2025-06-01
//   - resourceGroupName - The name of the resource group. The name is case insensitive.
//   - configTemplateName - The name of the ConfigTemplate
//   - resource - Resource create parameters.
//   - options - ConfigTemplatesClientBeginCreateOrUpdateOptions contains the optional parameters for the ConfigTemplatesClient.BeginCreateOrUpdate
//     method.
func (client *ConfigTemplatesClient) BeginCreateOrUpdate(ctx context.Context, resourceGroupName string, configTemplateName string, resource ConfigTemplate, options *ConfigTemplatesClientBeginCreateOrUpdateOptions) (*runtime.Poller[ConfigTemplatesClientCreateOrUpdateResponse], error) {
	if options == nil || options.ResumeToken == "" {
		resp, err := client.createOrUpdate(ctx, resourceGroupName, configTemplateName, resource, options)
		if err != nil {
			return nil, err
		}
		poller, err := runtime.NewPoller(resp, client.internal.Pipeline(), &runtime.NewPollerOptions[ConfigTemplatesClientCreateOrUpdateResponse]{
			Tracer: client.internal.Tracer(),
		})
		return poller, err
	} else {
		return runtime.NewPollerFromResumeToken(options.ResumeToken, client.internal.Pipeline(), &runtime.NewPollerFromResumeTokenOptions[ConfigTemplatesClientCreateOrUpdateResponse]{
			Tracer: client.internal.Tracer(),
		})
	}
}

// CreateOrUpdate - Create or update a Config Template Resource
// If the operation fails it returns an *azcore.ResponseError type.
//
// Generated from API version 2025-06-01
func (client *ConfigTemplatesClient) createOrUpdate(ctx context.Context, resourceGroupName string, configTemplateName string, resource ConfigTemplate, options *ConfigTemplatesClientBeginCreateOrUpdateOptions) (*http.Response, error) {
	var err error
	const operationName = "ConfigTemplatesClient.BeginCreateOrUpdate"
	ctx = context.WithValue(ctx, runtime.CtxAPINameKey{}, operationName)
	ctx, endSpan := runtime.StartSpan(ctx, operationName, client.internal.Tracer(), nil)
	defer func() { endSpan(err) }()
	req, err := client.createOrUpdateCreateRequest(ctx, resourceGroupName, configTemplateName, resource, options)
	if err != nil {
		return nil, err
	}
	httpResp, err := client.internal.Pipeline().Do(req)
	if err != nil {
		return nil, err
	}
	if !runtime.HasStatusCode(httpResp, http.StatusOK, http.StatusCreated) {
		err = runtime.NewResponseError(httpResp)
		return nil, err
	}
	return httpResp, nil
}

// createOrUpdateCreateRequest creates the CreateOrUpdate request.
func (client *ConfigTemplatesClient) createOrUpdateCreateRequest(ctx context.Context, resourceGroupName string, configTemplateName string, resource ConfigTemplate, _ *ConfigTemplatesClientBeginCreateOrUpdateOptions) (*policy.Request, error) {
	urlPath := "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Edge/configTemplates/{configTemplateName}"
	if client.subscriptionID == "" {
		return nil, errors.New("parameter client.subscriptionID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{subscriptionId}", url.PathEscape(client.subscriptionID))
	if resourceGroupName == "" {
		return nil, errors.New("parameter resourceGroupName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{resourceGroupName}", url.PathEscape(resourceGroupName))
	if configTemplateName == "" {
		return nil, errors.New("parameter configTemplateName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{configTemplateName}", url.PathEscape(configTemplateName))
	req, err := runtime.NewRequest(ctx, http.MethodPut, runtime.JoinPaths(client.internal.Endpoint(), urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("api-version", "2025-06-01")
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header["Accept"] = []string{"application/json"}
	req.Raw().Header["Content-Type"] = []string{"application/json"}
	if err := runtime.MarshalAsJSON(req, resource); err != nil {
		return nil, err
	}
	return req, nil
}

// BeginCreateVersion - Create or update a Config Template Version Resource with the specified UpdateType
// If the operation fails it returns an *azcore.ResponseError type.
//
// Generated from API version 2025-06-01
//   - resourceGroupName - The name of the resource group. The name is case insensitive.
//   - configTemplateName - The name of the ConfigTemplate
//   - body - The content of the action request
//   - options - ConfigTemplatesClientBeginCreateVersionOptions contains the optional parameters for the ConfigTemplatesClient.BeginCreateVersion
//     method.
func (client *ConfigTemplatesClient) BeginCreateVersion(ctx context.Context, resourceGroupName string, configTemplateName string, body ConfigTemplateVersionWithUpdateType, options *ConfigTemplatesClientBeginCreateVersionOptions) (*runtime.Poller[ConfigTemplatesClientCreateVersionResponse], error) {
	if options == nil || options.ResumeToken == "" {
		resp, err := client.createVersion(ctx, resourceGroupName, configTemplateName, body, options)
		if err != nil {
			return nil, err
		}
		poller, err := runtime.NewPoller(resp, client.internal.Pipeline(), &runtime.NewPollerOptions[ConfigTemplatesClientCreateVersionResponse]{
			Tracer: client.internal.Tracer(),
		})
		return poller, err
	} else {
		return runtime.NewPollerFromResumeToken(options.ResumeToken, client.internal.Pipeline(), &runtime.NewPollerFromResumeTokenOptions[ConfigTemplatesClientCreateVersionResponse]{
			Tracer: client.internal.Tracer(),
		})
	}
}

// CreateVersion - Create or update a Config Template Version Resource with the specified UpdateType
// If the operation fails it returns an *azcore.ResponseError type.
//
// Generated from API version 2025-06-01
func (client *ConfigTemplatesClient) createVersion(ctx context.Context, resourceGroupName string, configTemplateName string, body ConfigTemplateVersionWithUpdateType, options *ConfigTemplatesClientBeginCreateVersionOptions) (*http.Response, error) {
	var err error
	const operationName = "ConfigTemplatesClient.BeginCreateVersion"
	ctx = context.WithValue(ctx, runtime.CtxAPINameKey{}, operationName)
	ctx, endSpan := runtime.StartSpan(ctx, operationName, client.internal.Tracer(), nil)
	defer func() { endSpan(err) }()
	req, err := client.createVersionCreateRequest(ctx, resourceGroupName, configTemplateName, body, options)
	if err != nil {
		return nil, err
	}
	httpResp, err := client.internal.Pipeline().Do(req)
	if err != nil {
		return nil, err
	}
	if !runtime.HasStatusCode(httpResp, http.StatusOK, http.StatusAccepted) {
		err = runtime.NewResponseError(httpResp)
		return nil, err
	}
	return httpResp, nil
}

// createVersionCreateRequest creates the CreateVersion request.
func (client *ConfigTemplatesClient) createVersionCreateRequest(ctx context.Context, resourceGroupName string, configTemplateName string, body ConfigTemplateVersionWithUpdateType, _ *ConfigTemplatesClientBeginCreateVersionOptions) (*policy.Request, error) {
	urlPath := "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Edge/configTemplates/{configTemplateName}/createVersion"
	if client.subscriptionID == "" {
		return nil, errors.New("parameter client.subscriptionID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{subscriptionId}", url.PathEscape(client.subscriptionID))
	if resourceGroupName == "" {
		return nil, errors.New("parameter resourceGroupName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{resourceGroupName}", url.PathEscape(resourceGroupName))
	if configTemplateName == "" {
		return nil, errors.New("parameter configTemplateName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{configTemplateName}", url.PathEscape(configTemplateName))
	req, err := runtime.NewRequest(ctx, http.MethodPost, runtime.JoinPaths(client.internal.Endpoint(), urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("api-version", "2025-06-01")
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header["Accept"] = []string{"application/json"}
	req.Raw().Header["Content-Type"] = []string{"application/json"}
	if err := runtime.MarshalAsJSON(req, body); err != nil {
		return nil, err
	}
	return req, nil
}

// BeginDelete - Delete a Config Template Resource
// If the operation fails it returns an *azcore.ResponseError type.
//
// Generated from API version 2025-06-01
//   - resourceGroupName - The name of the resource group. The name is case insensitive.
//   - configTemplateName - The name of the ConfigTemplate
//   - options - ConfigTemplatesClientBeginDeleteOptions contains the optional parameters for the ConfigTemplatesClient.BeginDelete
//     method.
func (client *ConfigTemplatesClient) BeginDelete(ctx context.Context, resourceGroupName string, configTemplateName string, options *ConfigTemplatesClientBeginDeleteOptions) (*runtime.Poller[ConfigTemplatesClientDeleteResponse], error) {
	if options == nil || options.ResumeToken == "" {
		resp, err := client.deleteOperation(ctx, resourceGroupName, configTemplateName, options)
		if err != nil {
			return nil, err
		}
		poller, err := runtime.NewPoller(resp, client.internal.Pipeline(), &runtime.NewPollerOptions[ConfigTemplatesClientDeleteResponse]{
			Tracer: client.internal.Tracer(),
		})
		return poller, err
	} else {
		return runtime.NewPollerFromResumeToken(options.ResumeToken, client.internal.Pipeline(), &runtime.NewPollerFromResumeTokenOptions[ConfigTemplatesClientDeleteResponse]{
			Tracer: client.internal.Tracer(),
		})
	}
}

// Delete - Delete a Config Template Resource
// If the operation fails it returns an *azcore.ResponseError type.
//
// Generated from API version 2025-06-01
func (client *ConfigTemplatesClient) deleteOperation(ctx context.Context, resourceGroupName string, configTemplateName string, options *ConfigTemplatesClientBeginDeleteOptions) (*http.Response, error) {
	var err error
	const operationName = "ConfigTemplatesClient.BeginDelete"
	ctx = context.WithValue(ctx, runtime.CtxAPINameKey{}, operationName)
	ctx, endSpan := runtime.StartSpan(ctx, operationName, client.internal.Tracer(), nil)
	defer func() { endSpan(err) }()
	req, err := client.deleteCreateRequest(ctx, resourceGroupName, configTemplateName, options)
	if err != nil {
		return nil, err
	}
	httpResp, err := client.internal.Pipeline().Do(req)
	if err != nil {
		return nil, err
	}
	if !runtime.HasStatusCode(httpResp, http.StatusAccepted, http.StatusNoContent) {
		err = runtime.NewResponseError(httpResp)
		return nil, err
	}
	return httpResp, nil
}

// deleteCreateRequest creates the Delete request.
func (client *ConfigTemplatesClient) deleteCreateRequest(ctx context.Context, resourceGroupName string, configTemplateName string, _ *ConfigTemplatesClientBeginDeleteOptions) (*policy.Request, error) {
	urlPath := "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Edge/configTemplates/{configTemplateName}"
	if client.subscriptionID == "" {
		return nil, errors.New("parameter client.subscriptionID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{subscriptionId}", url.PathEscape(client.subscriptionID))
	if resourceGroupName == "" {
		return nil, errors.New("parameter resourceGroupName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{resourceGroupName}", url.PathEscape(resourceGroupName))
	if configTemplateName == "" {
		return nil, errors.New("parameter configTemplateName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{configTemplateName}", url.PathEscape(configTemplateName))
	req, err := runtime.NewRequest(ctx, http.MethodDelete, runtime.JoinPaths(client.internal.Endpoint(), urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("api-version", "2025-06-01")
	req.Raw().URL.RawQuery = reqQP.Encode()
	return req, nil
}

// Get - Get a Config Template Resource
// If the operation fails it returns an *azcore.ResponseError type.
//
// Generated from API version 2025-06-01
//   - resourceGroupName - The name of the resource group. The name is case insensitive.
//   - configTemplateName - The name of the ConfigTemplate
//   - options - ConfigTemplatesClientGetOptions contains the optional parameters for the ConfigTemplatesClient.Get method.
func (client *ConfigTemplatesClient) Get(ctx context.Context, resourceGroupName string, configTemplateName string, options *ConfigTemplatesClientGetOptions) (ConfigTemplatesClientGetResponse, error) {
	var err error
	const operationName = "ConfigTemplatesClient.Get"
	ctx = context.WithValue(ctx, runtime.CtxAPINameKey{}, operationName)
	ctx, endSpan := runtime.StartSpan(ctx, operationName, client.internal.Tracer(), nil)
	defer func() { endSpan(err) }()
	req, err := client.getCreateRequest(ctx, resourceGroupName, configTemplateName, options)
	if err != nil {
		return ConfigTemplatesClientGetResponse{}, err
	}
	httpResp, err := client.internal.Pipeline().Do(req)
	if err != nil {
		return ConfigTemplatesClientGetResponse{}, err
	}
	if !runtime.HasStatusCode(httpResp, http.StatusOK) {
		err = runtime.NewResponseError(httpResp)
		return ConfigTemplatesClientGetResponse{}, err
	}
	resp, err := client.getHandleResponse(httpResp)
	return resp, err
}

// getCreateRequest creates the Get request.
func (client *ConfigTemplatesClient) getCreateRequest(ctx context.Context, resourceGroupName string, configTemplateName string, _ *ConfigTemplatesClientGetOptions) (*policy.Request, error) {
	urlPath := "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Edge/configTemplates/{configTemplateName}"
	if client.subscriptionID == "" {
		return nil, errors.New("parameter client.subscriptionID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{subscriptionId}", url.PathEscape(client.subscriptionID))
	if resourceGroupName == "" {
		return nil, errors.New("parameter resourceGroupName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{resourceGroupName}", url.PathEscape(resourceGroupName))
	if configTemplateName == "" {
		return nil, errors.New("parameter configTemplateName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{configTemplateName}", url.PathEscape(configTemplateName))
	req, err := runtime.NewRequest(ctx, http.MethodGet, runtime.JoinPaths(client.internal.Endpoint(), urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("api-version", "2025-06-01")
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header["Accept"] = []string{"application/json"}
	return req, nil
}

// getHandleResponse handles the Get response.
func (client *ConfigTemplatesClient) getHandleResponse(resp *http.Response) (ConfigTemplatesClientGetResponse, error) {
	result := ConfigTemplatesClientGetResponse{}
	if err := runtime.UnmarshalAsJSON(resp, &result.ConfigTemplate); err != nil {
		return ConfigTemplatesClientGetResponse{}, err
	}
	return result, nil
}

// NewListByResourceGroupPager - List by specified resource group
//
// Generated from API version 2025-06-01
//   - resourceGroupName - The name of the resource group. The name is case insensitive.
//   - options - ConfigTemplatesClientListByResourceGroupOptions contains the optional parameters for the ConfigTemplatesClient.NewListByResourceGroupPager
//     method.
func (client *ConfigTemplatesClient) NewListByResourceGroupPager(resourceGroupName string, options *ConfigTemplatesClientListByResourceGroupOptions) *runtime.Pager[ConfigTemplatesClientListByResourceGroupResponse] {
	return runtime.NewPager(runtime.PagingHandler[ConfigTemplatesClientListByResourceGroupResponse]{
		More: func(page ConfigTemplatesClientListByResourceGroupResponse) bool {
			return page.NextLink != nil && len(*page.NextLink) > 0
		},
		Fetcher: func(ctx context.Context, page *ConfigTemplatesClientListByResourceGroupResponse) (ConfigTemplatesClientListByResourceGroupResponse, error) {
			ctx = context.WithValue(ctx, runtime.CtxAPINameKey{}, "ConfigTemplatesClient.NewListByResourceGroupPager")
			nextLink := ""
			if page != nil {
				nextLink = *page.NextLink
			}
			resp, err := runtime.FetcherForNextLink(ctx, client.internal.Pipeline(), nextLink, func(ctx context.Context) (*policy.Request, error) {
				return client.listByResourceGroupCreateRequest(ctx, resourceGroupName, options)
			}, nil)
			if err != nil {
				return ConfigTemplatesClientListByResourceGroupResponse{}, err
			}
			return client.listByResourceGroupHandleResponse(resp)
		},
		Tracer: client.internal.Tracer(),
	})
}

// listByResourceGroupCreateRequest creates the ListByResourceGroup request.
func (client *ConfigTemplatesClient) listByResourceGroupCreateRequest(ctx context.Context, resourceGroupName string, _ *ConfigTemplatesClientListByResourceGroupOptions) (*policy.Request, error) {
	urlPath := "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Edge/configTemplates"
	if client.subscriptionID == "" {
		return nil, errors.New("parameter client.subscriptionID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{subscriptionId}", url.PathEscape(client.subscriptionID))
	if resourceGroupName == "" {
		return nil, errors.New("parameter resourceGroupName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{resourceGroupName}", url.PathEscape(resourceGroupName))
	req, err := runtime.NewRequest(ctx, http.MethodGet, runtime.JoinPaths(client.internal.Endpoint(), urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("api-version", "2025-06-01")
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header["Accept"] = []string{"application/json"}
	return req, nil
}

// listByResourceGroupHandleResponse handles the ListByResourceGroup response.
func (client *ConfigTemplatesClient) listByResourceGroupHandleResponse(resp *http.Response) (ConfigTemplatesClientListByResourceGroupResponse, error) {
	result := ConfigTemplatesClientListByResourceGroupResponse{}
	if err := runtime.UnmarshalAsJSON(resp, &result.ConfigTemplateListResult); err != nil {
		return ConfigTemplatesClientListByResourceGroupResponse{}, err
	}
	return result, nil
}

// NewListBySubscriptionPager - List by subscription
//
// Generated from API version 2025-06-01
//   - options - ConfigTemplatesClientListBySubscriptionOptions contains the optional parameters for the ConfigTemplatesClient.NewListBySubscriptionPager
//     method.
func (client *ConfigTemplatesClient) NewListBySubscriptionPager(options *ConfigTemplatesClientListBySubscriptionOptions) *runtime.Pager[ConfigTemplatesClientListBySubscriptionResponse] {
	return runtime.NewPager(runtime.PagingHandler[ConfigTemplatesClientListBySubscriptionResponse]{
		More: func(page ConfigTemplatesClientListBySubscriptionResponse) bool {
			return page.NextLink != nil && len(*page.NextLink) > 0
		},
		Fetcher: func(ctx context.Context, page *ConfigTemplatesClientListBySubscriptionResponse) (ConfigTemplatesClientListBySubscriptionResponse, error) {
			ctx = context.WithValue(ctx, runtime.CtxAPINameKey{}, "ConfigTemplatesClient.NewListBySubscriptionPager")
			nextLink := ""
			if page != nil {
				nextLink = *page.NextLink
			}
			resp, err := runtime.FetcherForNextLink(ctx, client.internal.Pipeline(), nextLink, func(ctx context.Context) (*policy.Request, error) {
				return client.listBySubscriptionCreateRequest(ctx, options)
			}, nil)
			if err != nil {
				return ConfigTemplatesClientListBySubscriptionResponse{}, err
			}
			return client.listBySubscriptionHandleResponse(resp)
		},
		Tracer: client.internal.Tracer(),
	})
}

// listBySubscriptionCreateRequest creates the ListBySubscription request.
func (client *ConfigTemplatesClient) listBySubscriptionCreateRequest(ctx context.Context, _ *ConfigTemplatesClientListBySubscriptionOptions) (*policy.Request, error) {
	urlPath := "/subscriptions/{subscriptionId}/providers/Microsoft.Edge/configTemplates"
	if client.subscriptionID == "" {
		return nil, errors.New("parameter client.subscriptionID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{subscriptionId}", url.PathEscape(client.subscriptionID))
	req, err := runtime.NewRequest(ctx, http.MethodGet, runtime.JoinPaths(client.internal.Endpoint(), urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("api-version", "2025-06-01")
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header["Accept"] = []string{"application/json"}
	return req, nil
}

// listBySubscriptionHandleResponse handles the ListBySubscription response.
func (client *ConfigTemplatesClient) listBySubscriptionHandleResponse(resp *http.Response) (ConfigTemplatesClientListBySubscriptionResponse, error) {
	result := ConfigTemplatesClientListBySubscriptionResponse{}
	if err := runtime.UnmarshalAsJSON(resp, &result.ConfigTemplateListResult); err != nil {
		return ConfigTemplatesClientListBySubscriptionResponse{}, err
	}
	return result, nil
}

// RemoveVersion - Remove Config Template Version Resource
// If the operation fails it returns an *azcore.ResponseError type.
//
// Generated from API version 2025-06-01
//   - resourceGroupName - The name of the resource group. The name is case insensitive.
//   - configTemplateName - The name of the ConfigTemplate
//   - body - The content of the action request
//   - options - ConfigTemplatesClientRemoveVersionOptions contains the optional parameters for the ConfigTemplatesClient.RemoveVersion
//     method.
func (client *ConfigTemplatesClient) RemoveVersion(ctx context.Context, resourceGroupName string, configTemplateName string, body VersionParameter, options *ConfigTemplatesClientRemoveVersionOptions) (ConfigTemplatesClientRemoveVersionResponse, error) {
	var err error
	const operationName = "ConfigTemplatesClient.RemoveVersion"
	ctx = context.WithValue(ctx, runtime.CtxAPINameKey{}, operationName)
	ctx, endSpan := runtime.StartSpan(ctx, operationName, client.internal.Tracer(), nil)
	defer func() { endSpan(err) }()
	req, err := client.removeVersionCreateRequest(ctx, resourceGroupName, configTemplateName, body, options)
	if err != nil {
		return ConfigTemplatesClientRemoveVersionResponse{}, err
	}
	httpResp, err := client.internal.Pipeline().Do(req)
	if err != nil {
		return ConfigTemplatesClientRemoveVersionResponse{}, err
	}
	if !runtime.HasStatusCode(httpResp, http.StatusOK) {
		err = runtime.NewResponseError(httpResp)
		return ConfigTemplatesClientRemoveVersionResponse{}, err
	}
	resp, err := client.removeVersionHandleResponse(httpResp)
	return resp, err
}

// removeVersionCreateRequest creates the RemoveVersion request.
func (client *ConfigTemplatesClient) removeVersionCreateRequest(ctx context.Context, resourceGroupName string, configTemplateName string, body VersionParameter, _ *ConfigTemplatesClientRemoveVersionOptions) (*policy.Request, error) {
	urlPath := "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Edge/configTemplates/{configTemplateName}/removeVersion"
	if client.subscriptionID == "" {
		return nil, errors.New("parameter client.subscriptionID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{subscriptionId}", url.PathEscape(client.subscriptionID))
	if resourceGroupName == "" {
		return nil, errors.New("parameter resourceGroupName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{resourceGroupName}", url.PathEscape(resourceGroupName))
	if configTemplateName == "" {
		return nil, errors.New("parameter configTemplateName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{configTemplateName}", url.PathEscape(configTemplateName))
	req, err := runtime.NewRequest(ctx, http.MethodPost, runtime.JoinPaths(client.internal.Endpoint(), urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("api-version", "2025-06-01")
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header["Accept"] = []string{"application/json"}
	req.Raw().Header["Content-Type"] = []string{"application/json"}
	if err := runtime.MarshalAsJSON(req, body); err != nil {
		return nil, err
	}
	return req, nil
}

// removeVersionHandleResponse handles the RemoveVersion response.
func (client *ConfigTemplatesClient) removeVersionHandleResponse(resp *http.Response) (ConfigTemplatesClientRemoveVersionResponse, error) {
	result := ConfigTemplatesClientRemoveVersionResponse{}
	if err := runtime.UnmarshalAsJSON(resp, &result.RemoveVersionResponse); err != nil {
		return ConfigTemplatesClientRemoveVersionResponse{}, err
	}
	return result, nil
}

// Update - update a Config Template Resource
// If the operation fails it returns an *azcore.ResponseError type.
//
// Generated from API version 2025-06-01
//   - resourceGroupName - The name of the resource group. The name is case insensitive.
//   - configTemplateName - The name of the ConfigTemplate
//   - properties - The resource properties to be updated.
//   - options - ConfigTemplatesClientUpdateOptions contains the optional parameters for the ConfigTemplatesClient.Update method.
func (client *ConfigTemplatesClient) Update(ctx context.Context, resourceGroupName string, configTemplateName string, properties ConfigTemplateUpdate, options *ConfigTemplatesClientUpdateOptions) (ConfigTemplatesClientUpdateResponse, error) {
	var err error
	const operationName = "ConfigTemplatesClient.Update"
	ctx = context.WithValue(ctx, runtime.CtxAPINameKey{}, operationName)
	ctx, endSpan := runtime.StartSpan(ctx, operationName, client.internal.Tracer(), nil)
	defer func() { endSpan(err) }()
	req, err := client.updateCreateRequest(ctx, resourceGroupName, configTemplateName, properties, options)
	if err != nil {
		return ConfigTemplatesClientUpdateResponse{}, err
	}
	httpResp, err := client.internal.Pipeline().Do(req)
	if err != nil {
		return ConfigTemplatesClientUpdateResponse{}, err
	}
	if !runtime.HasStatusCode(httpResp, http.StatusOK) {
		err = runtime.NewResponseError(httpResp)
		return ConfigTemplatesClientUpdateResponse{}, err
	}
	resp, err := client.updateHandleResponse(httpResp)
	return resp, err
}

// updateCreateRequest creates the Update request.
func (client *ConfigTemplatesClient) updateCreateRequest(ctx context.Context, resourceGroupName string, configTemplateName string, properties ConfigTemplateUpdate, _ *ConfigTemplatesClientUpdateOptions) (*policy.Request, error) {
	urlPath := "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Edge/configTemplates/{configTemplateName}"
	if client.subscriptionID == "" {
		return nil, errors.New("parameter client.subscriptionID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{subscriptionId}", url.PathEscape(client.subscriptionID))
	if resourceGroupName == "" {
		return nil, errors.New("parameter resourceGroupName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{resourceGroupName}", url.PathEscape(resourceGroupName))
	if configTemplateName == "" {
		return nil, errors.New("parameter configTemplateName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{configTemplateName}", url.PathEscape(configTemplateName))
	req, err := runtime.NewRequest(ctx, http.MethodPatch, runtime.JoinPaths(client.internal.Endpoint(), urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("api-version", "2025-06-01")
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header["Accept"] = []string{"application/json"}
	req.Raw().Header["Content-Type"] = []string{"application/json"}
	if err := runtime.MarshalAsJSON(req, properties); err != nil {
		return nil, err
	}
	return req, nil
}

// updateHandleResponse handles the Update response.
func (client *ConfigTemplatesClient) updateHandleResponse(resp *http.Response) (ConfigTemplatesClientUpdateResponse, error) {
	result := ConfigTemplatesClientUpdateResponse{}
	if err := runtime.UnmarshalAsJSON(resp, &result.ConfigTemplate); err != nil {
		return ConfigTemplatesClientUpdateResponse{}, err
	}
	return result, nil
}
