// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) Go Code Generator. DO NOT EDIT.

package fake

import (
	"context"
	"errors"
	"fmt"
	azfake "github.com/Azure/azure-sdk-for-go/sdk/azcore/fake"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/fake/server"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/runtime"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/to"
	"github.com/Azure/azure-sdk-for-go/sdk/resourcemanager/workloadorchestration/armworkloadorchestration"
	"net/http"
	"net/url"
	"regexp"
)

// ConfigTemplateVersionsServer is a fake server for instances of the armworkloadorchestration.ConfigTemplateVersionsClient type.
type ConfigTemplateVersionsServer struct {
	// Get is the fake for method ConfigTemplateVersionsClient.Get
	// HTTP status codes to indicate success: http.StatusOK
	Get func(ctx context.Context, resourceGroupName string, configTemplateName string, configTemplateVersionName string, options *armworkloadorchestration.ConfigTemplateVersionsClientGetOptions) (resp azfake.Responder[armworkloadorchestration.ConfigTemplateVersionsClientGetResponse], errResp azfake.ErrorResponder)

	// NewListByConfigTemplatePager is the fake for method ConfigTemplateVersionsClient.NewListByConfigTemplatePager
	// HTTP status codes to indicate success: http.StatusOK
	NewListByConfigTemplatePager func(resourceGroupName string, configTemplateName string, options *armworkloadorchestration.ConfigTemplateVersionsClientListByConfigTemplateOptions) (resp azfake.PagerResponder[armworkloadorchestration.ConfigTemplateVersionsClientListByConfigTemplateResponse])
}

// NewConfigTemplateVersionsServerTransport creates a new instance of ConfigTemplateVersionsServerTransport with the provided implementation.
// The returned ConfigTemplateVersionsServerTransport instance is connected to an instance of armworkloadorchestration.ConfigTemplateVersionsClient via the
// azcore.ClientOptions.Transporter field in the client's constructor parameters.
func NewConfigTemplateVersionsServerTransport(srv *ConfigTemplateVersionsServer) *ConfigTemplateVersionsServerTransport {
	return &ConfigTemplateVersionsServerTransport{
		srv:                          srv,
		newListByConfigTemplatePager: newTracker[azfake.PagerResponder[armworkloadorchestration.ConfigTemplateVersionsClientListByConfigTemplateResponse]](),
	}
}

// ConfigTemplateVersionsServerTransport connects instances of armworkloadorchestration.ConfigTemplateVersionsClient to instances of ConfigTemplateVersionsServer.
// Don't use this type directly, use NewConfigTemplateVersionsServerTransport instead.
type ConfigTemplateVersionsServerTransport struct {
	srv                          *ConfigTemplateVersionsServer
	newListByConfigTemplatePager *tracker[azfake.PagerResponder[armworkloadorchestration.ConfigTemplateVersionsClientListByConfigTemplateResponse]]
}

// Do implements the policy.Transporter interface for ConfigTemplateVersionsServerTransport.
func (c *ConfigTemplateVersionsServerTransport) Do(req *http.Request) (*http.Response, error) {
	rawMethod := req.Context().Value(runtime.CtxAPINameKey{})
	method, ok := rawMethod.(string)
	if !ok {
		return nil, nonRetriableError{errors.New("unable to dispatch request, missing value for CtxAPINameKey")}
	}

	return c.dispatchToMethodFake(req, method)
}

func (c *ConfigTemplateVersionsServerTransport) dispatchToMethodFake(req *http.Request, method string) (*http.Response, error) {
	resultChan := make(chan result)
	defer close(resultChan)

	go func() {
		var intercepted bool
		var res result
		if configTemplateVersionsServerTransportInterceptor != nil {
			res.resp, res.err, intercepted = configTemplateVersionsServerTransportInterceptor.Do(req)
		}
		if !intercepted {
			switch method {
			case "ConfigTemplateVersionsClient.Get":
				res.resp, res.err = c.dispatchGet(req)
			case "ConfigTemplateVersionsClient.NewListByConfigTemplatePager":
				res.resp, res.err = c.dispatchNewListByConfigTemplatePager(req)
			default:
				res.err = fmt.Errorf("unhandled API %s", method)
			}

		}
		select {
		case resultChan <- res:
		case <-req.Context().Done():
		}
	}()

	select {
	case <-req.Context().Done():
		return nil, req.Context().Err()
	case res := <-resultChan:
		return res.resp, res.err
	}
}

func (c *ConfigTemplateVersionsServerTransport) dispatchGet(req *http.Request) (*http.Response, error) {
	if c.srv.Get == nil {
		return nil, &nonRetriableError{errors.New("fake for method Get not implemented")}
	}
	const regexStr = `/subscriptions/(?P<subscriptionId>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/resourceGroups/(?P<resourceGroupName>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/providers/Microsoft\.Edge/configTemplates/(?P<configTemplateName>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/versions/(?P<configTemplateVersionName>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)`
	regex := regexp.MustCompile(regexStr)
	matches := regex.FindStringSubmatch(req.URL.EscapedPath())
	if len(matches) < 5 {
		return nil, fmt.Errorf("failed to parse path %s", req.URL.Path)
	}
	resourceGroupNameParam, err := url.PathUnescape(matches[regex.SubexpIndex("resourceGroupName")])
	if err != nil {
		return nil, err
	}
	configTemplateNameParam, err := url.PathUnescape(matches[regex.SubexpIndex("configTemplateName")])
	if err != nil {
		return nil, err
	}
	configTemplateVersionNameParam, err := url.PathUnescape(matches[regex.SubexpIndex("configTemplateVersionName")])
	if err != nil {
		return nil, err
	}
	respr, errRespr := c.srv.Get(req.Context(), resourceGroupNameParam, configTemplateNameParam, configTemplateVersionNameParam, nil)
	if respErr := server.GetError(errRespr, req); respErr != nil {
		return nil, respErr
	}
	respContent := server.GetResponseContent(respr)
	if !contains([]int{http.StatusOK}, respContent.HTTPStatus) {
		return nil, &nonRetriableError{fmt.Errorf("unexpected status code %d. acceptable values are http.StatusOK", respContent.HTTPStatus)}
	}
	resp, err := server.MarshalResponseAsJSON(respContent, server.GetResponse(respr).ConfigTemplateVersion, req)
	if err != nil {
		return nil, err
	}
	return resp, nil
}

func (c *ConfigTemplateVersionsServerTransport) dispatchNewListByConfigTemplatePager(req *http.Request) (*http.Response, error) {
	if c.srv.NewListByConfigTemplatePager == nil {
		return nil, &nonRetriableError{errors.New("fake for method NewListByConfigTemplatePager not implemented")}
	}
	newListByConfigTemplatePager := c.newListByConfigTemplatePager.get(req)
	if newListByConfigTemplatePager == nil {
		const regexStr = `/subscriptions/(?P<subscriptionId>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/resourceGroups/(?P<resourceGroupName>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/providers/Microsoft\.Edge/configTemplates/(?P<configTemplateName>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/versions`
		regex := regexp.MustCompile(regexStr)
		matches := regex.FindStringSubmatch(req.URL.EscapedPath())
		if len(matches) < 4 {
			return nil, fmt.Errorf("failed to parse path %s", req.URL.Path)
		}
		resourceGroupNameParam, err := url.PathUnescape(matches[regex.SubexpIndex("resourceGroupName")])
		if err != nil {
			return nil, err
		}
		configTemplateNameParam, err := url.PathUnescape(matches[regex.SubexpIndex("configTemplateName")])
		if err != nil {
			return nil, err
		}
		resp := c.srv.NewListByConfigTemplatePager(resourceGroupNameParam, configTemplateNameParam, nil)
		newListByConfigTemplatePager = &resp
		c.newListByConfigTemplatePager.add(req, newListByConfigTemplatePager)
		server.PagerResponderInjectNextLinks(newListByConfigTemplatePager, req, func(page *armworkloadorchestration.ConfigTemplateVersionsClientListByConfigTemplateResponse, createLink func() string) {
			page.NextLink = to.Ptr(createLink())
		})
	}
	resp, err := server.PagerResponderNext(newListByConfigTemplatePager, req)
	if err != nil {
		return nil, err
	}
	if !contains([]int{http.StatusOK}, resp.StatusCode) {
		c.newListByConfigTemplatePager.remove(req)
		return nil, &nonRetriableError{fmt.Errorf("unexpected status code %d. acceptable values are http.StatusOK", resp.StatusCode)}
	}
	if !server.PagerResponderMore(newListByConfigTemplatePager) {
		c.newListByConfigTemplatePager.remove(req)
	}
	return resp, nil
}

// set this to conditionally intercept incoming requests to ConfigTemplateVersionsServerTransport
var configTemplateVersionsServerTransportInterceptor interface {
	// Do returns true if the server transport should use the returned response/error
	Do(*http.Request) (*http.Response, error, bool)
}
