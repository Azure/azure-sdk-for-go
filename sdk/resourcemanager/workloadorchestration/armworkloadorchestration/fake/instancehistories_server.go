// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) Go Code Generator. DO NOT EDIT.

package fake

import (
	"context"
	"errors"
	"fmt"
	azfake "github.com/Azure/azure-sdk-for-go/sdk/azcore/fake"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/fake/server"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/runtime"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/to"
	"github.com/Azure/azure-sdk-for-go/sdk/resourcemanager/workloadorchestration/armworkloadorchestration"
	"net/http"
	"net/url"
	"regexp"
)

// InstanceHistoriesServer is a fake server for instances of the armworkloadorchestration.InstanceHistoriesClient type.
type InstanceHistoriesServer struct {
	// Get is the fake for method InstanceHistoriesClient.Get
	// HTTP status codes to indicate success: http.StatusOK
	Get func(ctx context.Context, resourceGroupName string, targetName string, solutionName string, instanceName string, instanceHistoryName string, options *armworkloadorchestration.InstanceHistoriesClientGetOptions) (resp azfake.Responder[armworkloadorchestration.InstanceHistoriesClientGetResponse], errResp azfake.ErrorResponder)

	// NewListByInstancePager is the fake for method InstanceHistoriesClient.NewListByInstancePager
	// HTTP status codes to indicate success: http.StatusOK
	NewListByInstancePager func(resourceGroupName string, targetName string, solutionName string, instanceName string, options *armworkloadorchestration.InstanceHistoriesClientListByInstanceOptions) (resp azfake.PagerResponder[armworkloadorchestration.InstanceHistoriesClientListByInstanceResponse])
}

// NewInstanceHistoriesServerTransport creates a new instance of InstanceHistoriesServerTransport with the provided implementation.
// The returned InstanceHistoriesServerTransport instance is connected to an instance of armworkloadorchestration.InstanceHistoriesClient via the
// azcore.ClientOptions.Transporter field in the client's constructor parameters.
func NewInstanceHistoriesServerTransport(srv *InstanceHistoriesServer) *InstanceHistoriesServerTransport {
	return &InstanceHistoriesServerTransport{
		srv:                    srv,
		newListByInstancePager: newTracker[azfake.PagerResponder[armworkloadorchestration.InstanceHistoriesClientListByInstanceResponse]](),
	}
}

// InstanceHistoriesServerTransport connects instances of armworkloadorchestration.InstanceHistoriesClient to instances of InstanceHistoriesServer.
// Don't use this type directly, use NewInstanceHistoriesServerTransport instead.
type InstanceHistoriesServerTransport struct {
	srv                    *InstanceHistoriesServer
	newListByInstancePager *tracker[azfake.PagerResponder[armworkloadorchestration.InstanceHistoriesClientListByInstanceResponse]]
}

// Do implements the policy.Transporter interface for InstanceHistoriesServerTransport.
func (i *InstanceHistoriesServerTransport) Do(req *http.Request) (*http.Response, error) {
	rawMethod := req.Context().Value(runtime.CtxAPINameKey{})
	method, ok := rawMethod.(string)
	if !ok {
		return nil, nonRetriableError{errors.New("unable to dispatch request, missing value for CtxAPINameKey")}
	}

	return i.dispatchToMethodFake(req, method)
}

func (i *InstanceHistoriesServerTransport) dispatchToMethodFake(req *http.Request, method string) (*http.Response, error) {
	resultChan := make(chan result)
	defer close(resultChan)

	go func() {
		var intercepted bool
		var res result
		if instanceHistoriesServerTransportInterceptor != nil {
			res.resp, res.err, intercepted = instanceHistoriesServerTransportInterceptor.Do(req)
		}
		if !intercepted {
			switch method {
			case "InstanceHistoriesClient.Get":
				res.resp, res.err = i.dispatchGet(req)
			case "InstanceHistoriesClient.NewListByInstancePager":
				res.resp, res.err = i.dispatchNewListByInstancePager(req)
			default:
				res.err = fmt.Errorf("unhandled API %s", method)
			}

		}
		select {
		case resultChan <- res:
		case <-req.Context().Done():
		}
	}()

	select {
	case <-req.Context().Done():
		return nil, req.Context().Err()
	case res := <-resultChan:
		return res.resp, res.err
	}
}

func (i *InstanceHistoriesServerTransport) dispatchGet(req *http.Request) (*http.Response, error) {
	if i.srv.Get == nil {
		return nil, &nonRetriableError{errors.New("fake for method Get not implemented")}
	}
	const regexStr = `/subscriptions/(?P<subscriptionId>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/resourceGroups/(?P<resourceGroupName>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/providers/Microsoft\.Edge/targets/(?P<targetName>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/solutions/(?P<solutionName>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/instances/(?P<instanceName>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/histories/(?P<instanceHistoryName>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)`
	regex := regexp.MustCompile(regexStr)
	matches := regex.FindStringSubmatch(req.URL.EscapedPath())
	if len(matches) < 7 {
		return nil, fmt.Errorf("failed to parse path %s", req.URL.Path)
	}
	resourceGroupNameParam, err := url.PathUnescape(matches[regex.SubexpIndex("resourceGroupName")])
	if err != nil {
		return nil, err
	}
	targetNameParam, err := url.PathUnescape(matches[regex.SubexpIndex("targetName")])
	if err != nil {
		return nil, err
	}
	solutionNameParam, err := url.PathUnescape(matches[regex.SubexpIndex("solutionName")])
	if err != nil {
		return nil, err
	}
	instanceNameParam, err := url.PathUnescape(matches[regex.SubexpIndex("instanceName")])
	if err != nil {
		return nil, err
	}
	instanceHistoryNameParam, err := url.PathUnescape(matches[regex.SubexpIndex("instanceHistoryName")])
	if err != nil {
		return nil, err
	}
	respr, errRespr := i.srv.Get(req.Context(), resourceGroupNameParam, targetNameParam, solutionNameParam, instanceNameParam, instanceHistoryNameParam, nil)
	if respErr := server.GetError(errRespr, req); respErr != nil {
		return nil, respErr
	}
	respContent := server.GetResponseContent(respr)
	if !contains([]int{http.StatusOK}, respContent.HTTPStatus) {
		return nil, &nonRetriableError{fmt.Errorf("unexpected status code %d. acceptable values are http.StatusOK", respContent.HTTPStatus)}
	}
	resp, err := server.MarshalResponseAsJSON(respContent, server.GetResponse(respr).InstanceHistory, req)
	if err != nil {
		return nil, err
	}
	return resp, nil
}

func (i *InstanceHistoriesServerTransport) dispatchNewListByInstancePager(req *http.Request) (*http.Response, error) {
	if i.srv.NewListByInstancePager == nil {
		return nil, &nonRetriableError{errors.New("fake for method NewListByInstancePager not implemented")}
	}
	newListByInstancePager := i.newListByInstancePager.get(req)
	if newListByInstancePager == nil {
		const regexStr = `/subscriptions/(?P<subscriptionId>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/resourceGroups/(?P<resourceGroupName>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/providers/Microsoft\.Edge/targets/(?P<targetName>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/solutions/(?P<solutionName>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/instances/(?P<instanceName>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/histories`
		regex := regexp.MustCompile(regexStr)
		matches := regex.FindStringSubmatch(req.URL.EscapedPath())
		if len(matches) < 6 {
			return nil, fmt.Errorf("failed to parse path %s", req.URL.Path)
		}
		resourceGroupNameParam, err := url.PathUnescape(matches[regex.SubexpIndex("resourceGroupName")])
		if err != nil {
			return nil, err
		}
		targetNameParam, err := url.PathUnescape(matches[regex.SubexpIndex("targetName")])
		if err != nil {
			return nil, err
		}
		solutionNameParam, err := url.PathUnescape(matches[regex.SubexpIndex("solutionName")])
		if err != nil {
			return nil, err
		}
		instanceNameParam, err := url.PathUnescape(matches[regex.SubexpIndex("instanceName")])
		if err != nil {
			return nil, err
		}
		resp := i.srv.NewListByInstancePager(resourceGroupNameParam, targetNameParam, solutionNameParam, instanceNameParam, nil)
		newListByInstancePager = &resp
		i.newListByInstancePager.add(req, newListByInstancePager)
		server.PagerResponderInjectNextLinks(newListByInstancePager, req, func(page *armworkloadorchestration.InstanceHistoriesClientListByInstanceResponse, createLink func() string) {
			page.NextLink = to.Ptr(createLink())
		})
	}
	resp, err := server.PagerResponderNext(newListByInstancePager, req)
	if err != nil {
		return nil, err
	}
	if !contains([]int{http.StatusOK}, resp.StatusCode) {
		i.newListByInstancePager.remove(req)
		return nil, &nonRetriableError{fmt.Errorf("unexpected status code %d. acceptable values are http.StatusOK", resp.StatusCode)}
	}
	if !server.PagerResponderMore(newListByInstancePager) {
		i.newListByInstancePager.remove(req)
	}
	return resp, nil
}

// set this to conditionally intercept incoming requests to InstanceHistoriesServerTransport
var instanceHistoriesServerTransportInterceptor interface {
	// Do returns true if the server transport should use the returned response/error
	Do(*http.Request) (*http.Response, error, bool)
}
