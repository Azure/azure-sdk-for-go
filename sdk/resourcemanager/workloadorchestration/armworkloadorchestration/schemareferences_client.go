// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) Go Code Generator. DO NOT EDIT.

package armworkloadorchestration

import (
	"context"
	"errors"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/arm"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/policy"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/runtime"
	"net/http"
	"net/url"
	"strings"
)

// SchemaReferencesClient contains the methods for the SchemaReferences group.
// Don't use this type directly, use NewSchemaReferencesClient() instead.
type SchemaReferencesClient struct {
	internal *arm.Client
}

// NewSchemaReferencesClient creates a new instance of SchemaReferencesClient with the specified values.
//   - credential - used to authorize requests. Usually a credential from azidentity.
//   - options - pass nil to accept the default values.
func NewSchemaReferencesClient(credential azcore.TokenCredential, options *arm.ClientOptions) (*SchemaReferencesClient, error) {
	cl, err := arm.NewClient(moduleName, moduleVersion, credential, options)
	if err != nil {
		return nil, err
	}
	client := &SchemaReferencesClient{
		internal: cl,
	}
	return client, nil
}

// Get - Get a Schema Reference Resource
// If the operation fails it returns an *azcore.ResponseError type.
//
// Generated from API version 2025-06-01
//   - resourceURI - The fully qualified Azure Resource manager identifier of the resource.
//   - schemaReferenceName - The name of the SchemaReference
//   - options - SchemaReferencesClientGetOptions contains the optional parameters for the SchemaReferencesClient.Get method.
func (client *SchemaReferencesClient) Get(ctx context.Context, resourceURI string, schemaReferenceName string, options *SchemaReferencesClientGetOptions) (SchemaReferencesClientGetResponse, error) {
	var err error
	const operationName = "SchemaReferencesClient.Get"
	ctx = context.WithValue(ctx, runtime.CtxAPINameKey{}, operationName)
	ctx, endSpan := runtime.StartSpan(ctx, operationName, client.internal.Tracer(), nil)
	defer func() { endSpan(err) }()
	req, err := client.getCreateRequest(ctx, resourceURI, schemaReferenceName, options)
	if err != nil {
		return SchemaReferencesClientGetResponse{}, err
	}
	httpResp, err := client.internal.Pipeline().Do(req)
	if err != nil {
		return SchemaReferencesClientGetResponse{}, err
	}
	if !runtime.HasStatusCode(httpResp, http.StatusOK) {
		err = runtime.NewResponseError(httpResp)
		return SchemaReferencesClientGetResponse{}, err
	}
	resp, err := client.getHandleResponse(httpResp)
	return resp, err
}

// getCreateRequest creates the Get request.
func (client *SchemaReferencesClient) getCreateRequest(ctx context.Context, resourceURI string, schemaReferenceName string, _ *SchemaReferencesClientGetOptions) (*policy.Request, error) {
	urlPath := "/{resourceUri}/providers/Microsoft.Edge/schemaReferences/{schemaReferenceName}"
	urlPath = strings.ReplaceAll(urlPath, "{resourceUri}", resourceURI)
	if schemaReferenceName == "" {
		return nil, errors.New("parameter schemaReferenceName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{schemaReferenceName}", url.PathEscape(schemaReferenceName))
	req, err := runtime.NewRequest(ctx, http.MethodGet, runtime.JoinPaths(client.internal.Endpoint(), urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("api-version", "2025-06-01")
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header["Accept"] = []string{"application/json"}
	return req, nil
}

// getHandleResponse handles the Get response.
func (client *SchemaReferencesClient) getHandleResponse(resp *http.Response) (SchemaReferencesClientGetResponse, error) {
	result := SchemaReferencesClientGetResponse{}
	if err := runtime.UnmarshalAsJSON(resp, &result.SchemaReference); err != nil {
		return SchemaReferencesClientGetResponse{}, err
	}
	return result, nil
}

// NewListByResourceGroupPager - List by specified resource group
//
// Generated from API version 2025-06-01
//   - resourceURI - The fully qualified Azure Resource manager identifier of the resource.
//   - options - SchemaReferencesClientListByResourceGroupOptions contains the optional parameters for the SchemaReferencesClient.NewListByResourceGroupPager
//     method.
func (client *SchemaReferencesClient) NewListByResourceGroupPager(resourceURI string, options *SchemaReferencesClientListByResourceGroupOptions) *runtime.Pager[SchemaReferencesClientListByResourceGroupResponse] {
	return runtime.NewPager(runtime.PagingHandler[SchemaReferencesClientListByResourceGroupResponse]{
		More: func(page SchemaReferencesClientListByResourceGroupResponse) bool {
			return page.NextLink != nil && len(*page.NextLink) > 0
		},
		Fetcher: func(ctx context.Context, page *SchemaReferencesClientListByResourceGroupResponse) (SchemaReferencesClientListByResourceGroupResponse, error) {
			ctx = context.WithValue(ctx, runtime.CtxAPINameKey{}, "SchemaReferencesClient.NewListByResourceGroupPager")
			nextLink := ""
			if page != nil {
				nextLink = *page.NextLink
			}
			resp, err := runtime.FetcherForNextLink(ctx, client.internal.Pipeline(), nextLink, func(ctx context.Context) (*policy.Request, error) {
				return client.listByResourceGroupCreateRequest(ctx, resourceURI, options)
			}, nil)
			if err != nil {
				return SchemaReferencesClientListByResourceGroupResponse{}, err
			}
			return client.listByResourceGroupHandleResponse(resp)
		},
		Tracer: client.internal.Tracer(),
	})
}

// listByResourceGroupCreateRequest creates the ListByResourceGroup request.
func (client *SchemaReferencesClient) listByResourceGroupCreateRequest(ctx context.Context, resourceURI string, _ *SchemaReferencesClientListByResourceGroupOptions) (*policy.Request, error) {
	urlPath := "/{resourceUri}/providers/Microsoft.Edge/schemaReferences"
	urlPath = strings.ReplaceAll(urlPath, "{resourceUri}", resourceURI)
	req, err := runtime.NewRequest(ctx, http.MethodGet, runtime.JoinPaths(client.internal.Endpoint(), urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("api-version", "2025-06-01")
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header["Accept"] = []string{"application/json"}
	return req, nil
}

// listByResourceGroupHandleResponse handles the ListByResourceGroup response.
func (client *SchemaReferencesClient) listByResourceGroupHandleResponse(resp *http.Response) (SchemaReferencesClientListByResourceGroupResponse, error) {
	result := SchemaReferencesClientListByResourceGroupResponse{}
	if err := runtime.UnmarshalAsJSON(resp, &result.SchemaReferenceListResult); err != nil {
		return SchemaReferencesClientListByResourceGroupResponse{}, err
	}
	return result, nil
}
