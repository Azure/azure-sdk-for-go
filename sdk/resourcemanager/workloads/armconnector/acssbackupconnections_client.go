//go:build go1.18
// +build go1.18

// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator. DO NOT EDIT.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

package armconnector

import (
	"context"
	"errors"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/arm"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/policy"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/runtime"
	"net/http"
	"net/url"
	"strings"
)

// ACSSBackupConnectionsClient contains the methods for the ACSSBackupConnections group.
// Don't use this type directly, use NewACSSBackupConnectionsClient() instead.
type ACSSBackupConnectionsClient struct {
	internal       *arm.Client
	subscriptionID string
}

// NewACSSBackupConnectionsClient creates a new instance of ACSSBackupConnectionsClient with the specified values.
//   - subscriptionID - The ID of the target subscription.
//   - credential - used to authorize requests. Usually a credential from azidentity.
//   - options - pass nil to accept the default values.
func NewACSSBackupConnectionsClient(subscriptionID string, credential azcore.TokenCredential, options *arm.ClientOptions) (*ACSSBackupConnectionsClient, error) {
	cl, err := arm.NewClient(moduleName+".ACSSBackupConnectionsClient", moduleVersion, credential, options)
	if err != nil {
		return nil, err
	}
	client := &ACSSBackupConnectionsClient{
		subscriptionID: subscriptionID,
		internal:       cl,
	}
	return client, nil
}

// BeginCreate - Creates the backup connection resource of virtual instance for SAP.
// If the operation fails it returns an *azcore.ResponseError type.
//
// Generated from API version 2023-10-01-preview
//   - resourceGroupName - The name of the resource group. The name is case insensitive.
//   - connectorName - The name of the connector resource
//   - backupName - The name of the backup connection resource of virtual instance for SAP.
//   - body - The request body of backup connection of virtual instance for SAP.
//   - options - ACSSBackupConnectionsClientBeginCreateOptions contains the optional parameters for the ACSSBackupConnectionsClient.BeginCreate
//     method.
func (client *ACSSBackupConnectionsClient) BeginCreate(ctx context.Context, resourceGroupName string, connectorName string, backupName string, body ACSSBackupConnection, options *ACSSBackupConnectionsClientBeginCreateOptions) (*runtime.Poller[ACSSBackupConnectionsClientCreateResponse], error) {
	if options == nil || options.ResumeToken == "" {
		resp, err := client.create(ctx, resourceGroupName, connectorName, backupName, body, options)
		if err != nil {
			return nil, err
		}
		poller, err := runtime.NewPoller[ACSSBackupConnectionsClientCreateResponse](resp, client.internal.Pipeline(), nil)
		return poller, err
	} else {
		return runtime.NewPollerFromResumeToken[ACSSBackupConnectionsClientCreateResponse](options.ResumeToken, client.internal.Pipeline(), nil)
	}
}

// Create - Creates the backup connection resource of virtual instance for SAP.
// If the operation fails it returns an *azcore.ResponseError type.
//
// Generated from API version 2023-10-01-preview
func (client *ACSSBackupConnectionsClient) create(ctx context.Context, resourceGroupName string, connectorName string, backupName string, body ACSSBackupConnection, options *ACSSBackupConnectionsClientBeginCreateOptions) (*http.Response, error) {
	var err error
	req, err := client.createCreateRequest(ctx, resourceGroupName, connectorName, backupName, body, options)
	if err != nil {
		return nil, err
	}
	httpResp, err := client.internal.Pipeline().Do(req)
	if err != nil {
		return nil, err
	}
	if !runtime.HasStatusCode(httpResp, http.StatusOK, http.StatusCreated) {
		err = runtime.NewResponseError(httpResp)
		return nil, err
	}
	return httpResp, nil
}

// createCreateRequest creates the Create request.
func (client *ACSSBackupConnectionsClient) createCreateRequest(ctx context.Context, resourceGroupName string, connectorName string, backupName string, body ACSSBackupConnection, options *ACSSBackupConnectionsClientBeginCreateOptions) (*policy.Request, error) {
	urlPath := "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Workloads/connectors/{connectorName}/acssBackups/{backupName}"
	if client.subscriptionID == "" {
		return nil, errors.New("parameter client.subscriptionID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{subscriptionId}", url.PathEscape(client.subscriptionID))
	if resourceGroupName == "" {
		return nil, errors.New("parameter resourceGroupName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{resourceGroupName}", url.PathEscape(resourceGroupName))
	if connectorName == "" {
		return nil, errors.New("parameter connectorName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{connectorName}", url.PathEscape(connectorName))
	if backupName == "" {
		return nil, errors.New("parameter backupName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{backupName}", url.PathEscape(backupName))
	req, err := runtime.NewRequest(ctx, http.MethodPut, runtime.JoinPaths(client.internal.Endpoint(), urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("api-version", "2023-10-01-preview")
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header["Accept"] = []string{"application/json"}
	if err := runtime.MarshalAsJSON(req, body); err != nil {
		return nil, err
	}
	return req, nil
}

// BeginDelete - Deletes the backup connection resource of virtual instance for SAP.
// If the operation fails it returns an *azcore.ResponseError type.
//
// Generated from API version 2023-10-01-preview
//   - resourceGroupName - The name of the resource group. The name is case insensitive.
//   - connectorName - The name of the connector resource
//   - backupName - The name of the backup connection resource of virtual instance for SAP.
//   - options - ACSSBackupConnectionsClientBeginDeleteOptions contains the optional parameters for the ACSSBackupConnectionsClient.BeginDelete
//     method.
func (client *ACSSBackupConnectionsClient) BeginDelete(ctx context.Context, resourceGroupName string, connectorName string, backupName string, options *ACSSBackupConnectionsClientBeginDeleteOptions) (*runtime.Poller[ACSSBackupConnectionsClientDeleteResponse], error) {
	if options == nil || options.ResumeToken == "" {
		resp, err := client.deleteOperation(ctx, resourceGroupName, connectorName, backupName, options)
		if err != nil {
			return nil, err
		}
		poller, err := runtime.NewPoller[ACSSBackupConnectionsClientDeleteResponse](resp, client.internal.Pipeline(), nil)
		return poller, err
	} else {
		return runtime.NewPollerFromResumeToken[ACSSBackupConnectionsClientDeleteResponse](options.ResumeToken, client.internal.Pipeline(), nil)
	}
}

// Delete - Deletes the backup connection resource of virtual instance for SAP.
// If the operation fails it returns an *azcore.ResponseError type.
//
// Generated from API version 2023-10-01-preview
func (client *ACSSBackupConnectionsClient) deleteOperation(ctx context.Context, resourceGroupName string, connectorName string, backupName string, options *ACSSBackupConnectionsClientBeginDeleteOptions) (*http.Response, error) {
	var err error
	req, err := client.deleteCreateRequest(ctx, resourceGroupName, connectorName, backupName, options)
	if err != nil {
		return nil, err
	}
	httpResp, err := client.internal.Pipeline().Do(req)
	if err != nil {
		return nil, err
	}
	if !runtime.HasStatusCode(httpResp, http.StatusAccepted, http.StatusNoContent) {
		err = runtime.NewResponseError(httpResp)
		return nil, err
	}
	return httpResp, nil
}

// deleteCreateRequest creates the Delete request.
func (client *ACSSBackupConnectionsClient) deleteCreateRequest(ctx context.Context, resourceGroupName string, connectorName string, backupName string, options *ACSSBackupConnectionsClientBeginDeleteOptions) (*policy.Request, error) {
	urlPath := "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Workloads/connectors/{connectorName}/acssBackups/{backupName}"
	if client.subscriptionID == "" {
		return nil, errors.New("parameter client.subscriptionID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{subscriptionId}", url.PathEscape(client.subscriptionID))
	if resourceGroupName == "" {
		return nil, errors.New("parameter resourceGroupName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{resourceGroupName}", url.PathEscape(resourceGroupName))
	if connectorName == "" {
		return nil, errors.New("parameter connectorName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{connectorName}", url.PathEscape(connectorName))
	if backupName == "" {
		return nil, errors.New("parameter backupName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{backupName}", url.PathEscape(backupName))
	req, err := runtime.NewRequest(ctx, http.MethodDelete, runtime.JoinPaths(client.internal.Endpoint(), urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("api-version", "2023-10-01-preview")
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header["Accept"] = []string{"application/json"}
	return req, nil
}

// Get - Gets the backup connection resource of virtual instance for SAP.
// If the operation fails it returns an *azcore.ResponseError type.
//
// Generated from API version 2023-10-01-preview
//   - resourceGroupName - The name of the resource group. The name is case insensitive.
//   - connectorName - The name of the connector resource
//   - backupName - The name of the backup connection resource of virtual instance for SAP.
//   - options - ACSSBackupConnectionsClientGetOptions contains the optional parameters for the ACSSBackupConnectionsClient.Get
//     method.
func (client *ACSSBackupConnectionsClient) Get(ctx context.Context, resourceGroupName string, connectorName string, backupName string, options *ACSSBackupConnectionsClientGetOptions) (ACSSBackupConnectionsClientGetResponse, error) {
	var err error
	req, err := client.getCreateRequest(ctx, resourceGroupName, connectorName, backupName, options)
	if err != nil {
		return ACSSBackupConnectionsClientGetResponse{}, err
	}
	httpResp, err := client.internal.Pipeline().Do(req)
	if err != nil {
		return ACSSBackupConnectionsClientGetResponse{}, err
	}
	if !runtime.HasStatusCode(httpResp, http.StatusOK) {
		err = runtime.NewResponseError(httpResp)
		return ACSSBackupConnectionsClientGetResponse{}, err
	}
	resp, err := client.getHandleResponse(httpResp)
	return resp, err
}

// getCreateRequest creates the Get request.
func (client *ACSSBackupConnectionsClient) getCreateRequest(ctx context.Context, resourceGroupName string, connectorName string, backupName string, options *ACSSBackupConnectionsClientGetOptions) (*policy.Request, error) {
	urlPath := "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Workloads/connectors/{connectorName}/acssBackups/{backupName}"
	if client.subscriptionID == "" {
		return nil, errors.New("parameter client.subscriptionID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{subscriptionId}", url.PathEscape(client.subscriptionID))
	if resourceGroupName == "" {
		return nil, errors.New("parameter resourceGroupName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{resourceGroupName}", url.PathEscape(resourceGroupName))
	if connectorName == "" {
		return nil, errors.New("parameter connectorName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{connectorName}", url.PathEscape(connectorName))
	if backupName == "" {
		return nil, errors.New("parameter backupName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{backupName}", url.PathEscape(backupName))
	req, err := runtime.NewRequest(ctx, http.MethodGet, runtime.JoinPaths(client.internal.Endpoint(), urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("api-version", "2023-10-01-preview")
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header["Accept"] = []string{"application/json"}
	return req, nil
}

// getHandleResponse handles the Get response.
func (client *ACSSBackupConnectionsClient) getHandleResponse(resp *http.Response) (ACSSBackupConnectionsClientGetResponse, error) {
	result := ACSSBackupConnectionsClientGetResponse{}
	if err := runtime.UnmarshalAsJSON(resp, &result.ACSSBackupConnection); err != nil {
		return ACSSBackupConnectionsClientGetResponse{}, err
	}
	return result, nil
}

// NewListPager - Lists the backup connection resources of virtual instance for SAP under the given connector resource.
//
// Generated from API version 2023-10-01-preview
//   - resourceGroupName - The name of the resource group. The name is case insensitive.
//   - connectorName - The name of the connector resource
//   - options - ACSSBackupConnectionsClientListOptions contains the optional parameters for the ACSSBackupConnectionsClient.NewListPager
//     method.
func (client *ACSSBackupConnectionsClient) NewListPager(resourceGroupName string, connectorName string, options *ACSSBackupConnectionsClientListOptions) *runtime.Pager[ACSSBackupConnectionsClientListResponse] {
	return runtime.NewPager(runtime.PagingHandler[ACSSBackupConnectionsClientListResponse]{
		More: func(page ACSSBackupConnectionsClientListResponse) bool {
			return page.NextLink != nil && len(*page.NextLink) > 0
		},
		Fetcher: func(ctx context.Context, page *ACSSBackupConnectionsClientListResponse) (ACSSBackupConnectionsClientListResponse, error) {
			var req *policy.Request
			var err error
			if page == nil {
				req, err = client.listCreateRequest(ctx, resourceGroupName, connectorName, options)
			} else {
				req, err = runtime.NewRequest(ctx, http.MethodGet, *page.NextLink)
			}
			if err != nil {
				return ACSSBackupConnectionsClientListResponse{}, err
			}
			resp, err := client.internal.Pipeline().Do(req)
			if err != nil {
				return ACSSBackupConnectionsClientListResponse{}, err
			}
			if !runtime.HasStatusCode(resp, http.StatusOK) {
				return ACSSBackupConnectionsClientListResponse{}, runtime.NewResponseError(resp)
			}
			return client.listHandleResponse(resp)
		},
	})
}

// listCreateRequest creates the List request.
func (client *ACSSBackupConnectionsClient) listCreateRequest(ctx context.Context, resourceGroupName string, connectorName string, options *ACSSBackupConnectionsClientListOptions) (*policy.Request, error) {
	urlPath := "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Workloads/connectors/{connectorName}/acssBackups"
	if client.subscriptionID == "" {
		return nil, errors.New("parameter client.subscriptionID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{subscriptionId}", url.PathEscape(client.subscriptionID))
	if resourceGroupName == "" {
		return nil, errors.New("parameter resourceGroupName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{resourceGroupName}", url.PathEscape(resourceGroupName))
	if connectorName == "" {
		return nil, errors.New("parameter connectorName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{connectorName}", url.PathEscape(connectorName))
	req, err := runtime.NewRequest(ctx, http.MethodGet, runtime.JoinPaths(client.internal.Endpoint(), urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("api-version", "2023-10-01-preview")
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header["Accept"] = []string{"application/json"}
	return req, nil
}

// listHandleResponse handles the List response.
func (client *ACSSBackupConnectionsClient) listHandleResponse(resp *http.Response) (ACSSBackupConnectionsClientListResponse, error) {
	result := ACSSBackupConnectionsClientListResponse{}
	if err := runtime.UnmarshalAsJSON(resp, &result.ACSSBackupConnectionList); err != nil {
		return ACSSBackupConnectionsClientListResponse{}, err
	}
	return result, nil
}

// BeginUpdate - Updates the backup connection resource of virtual instance for SAP.
// This can be used to update tags on the resource.
// If the operation fails it returns an *azcore.ResponseError type.
//
// Generated from API version 2023-10-01-preview
//   - resourceGroupName - The name of the resource group. The name is case insensitive.
//   - connectorName - The name of the connector resource
//   - backupName - The name of the backup connection resource of virtual instance for SAP.
//   - body - The request body of backup connection resource of virtual instance for SAP.
//   - options - ACSSBackupConnectionsClientBeginUpdateOptions contains the optional parameters for the ACSSBackupConnectionsClient.BeginUpdate
//     method.
func (client *ACSSBackupConnectionsClient) BeginUpdate(ctx context.Context, resourceGroupName string, connectorName string, backupName string, body UpdateACSSBackupConnectionRequest, options *ACSSBackupConnectionsClientBeginUpdateOptions) (*runtime.Poller[ACSSBackupConnectionsClientUpdateResponse], error) {
	if options == nil || options.ResumeToken == "" {
		resp, err := client.update(ctx, resourceGroupName, connectorName, backupName, body, options)
		if err != nil {
			return nil, err
		}
		poller, err := runtime.NewPoller[ACSSBackupConnectionsClientUpdateResponse](resp, client.internal.Pipeline(), nil)
		return poller, err
	} else {
		return runtime.NewPollerFromResumeToken[ACSSBackupConnectionsClientUpdateResponse](options.ResumeToken, client.internal.Pipeline(), nil)
	}
}

// Update - Updates the backup connection resource of virtual instance for SAP.
// This can be used to update tags on the resource.
// If the operation fails it returns an *azcore.ResponseError type.
//
// Generated from API version 2023-10-01-preview
func (client *ACSSBackupConnectionsClient) update(ctx context.Context, resourceGroupName string, connectorName string, backupName string, body UpdateACSSBackupConnectionRequest, options *ACSSBackupConnectionsClientBeginUpdateOptions) (*http.Response, error) {
	var err error
	req, err := client.updateCreateRequest(ctx, resourceGroupName, connectorName, backupName, body, options)
	if err != nil {
		return nil, err
	}
	httpResp, err := client.internal.Pipeline().Do(req)
	if err != nil {
		return nil, err
	}
	if !runtime.HasStatusCode(httpResp, http.StatusOK, http.StatusAccepted) {
		err = runtime.NewResponseError(httpResp)
		return nil, err
	}
	return httpResp, nil
}

// updateCreateRequest creates the Update request.
func (client *ACSSBackupConnectionsClient) updateCreateRequest(ctx context.Context, resourceGroupName string, connectorName string, backupName string, body UpdateACSSBackupConnectionRequest, options *ACSSBackupConnectionsClientBeginUpdateOptions) (*policy.Request, error) {
	urlPath := "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Workloads/connectors/{connectorName}/acssBackups/{backupName}"
	if client.subscriptionID == "" {
		return nil, errors.New("parameter client.subscriptionID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{subscriptionId}", url.PathEscape(client.subscriptionID))
	if resourceGroupName == "" {
		return nil, errors.New("parameter resourceGroupName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{resourceGroupName}", url.PathEscape(resourceGroupName))
	if connectorName == "" {
		return nil, errors.New("parameter connectorName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{connectorName}", url.PathEscape(connectorName))
	if backupName == "" {
		return nil, errors.New("parameter backupName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{backupName}", url.PathEscape(backupName))
	req, err := runtime.NewRequest(ctx, http.MethodPatch, runtime.JoinPaths(client.internal.Endpoint(), urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("api-version", "2023-10-01-preview")
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header["Accept"] = []string{"application/json"}
	if err := runtime.MarshalAsJSON(req, body); err != nil {
		return nil, err
	}
	return req, nil
}
