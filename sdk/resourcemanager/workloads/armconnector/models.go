//go:build go1.18
// +build go1.18

// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator. DO NOT EDIT.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

package armconnector

import "time"

// ACSSBackupConnection - Define the backup connection resource of virtual instance for SAP..
type ACSSBackupConnection struct {
	// REQUIRED; The geo-location where the resource lives
	Location *string

	// Defines the backup connection properties for a virtual instance for SAP.
	Properties *ACSSBackupConnectionProperties

	// Resource tags.
	Tags map[string]*string

	// READ-ONLY; Fully qualified resource ID for the resource. Ex - /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}
	ID *string

	// READ-ONLY; The name of the resource
	Name *string

	// READ-ONLY; Azure Resource Manager metadata containing createdBy and modifiedBy information.
	SystemData *SystemData

	// READ-ONLY; The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or "Microsoft.Storage/storageAccounts"
	Type *string
}

// ACSSBackupConnectionList - Defines the collection of backup connection resources of virtual instances for SAP.
type ACSSBackupConnectionList struct {
	// REQUIRED; Gets the list of backup connection resources of virtual instances for SAP.
	Value []*ACSSBackupConnection

	// Gets the value of next link.
	NextLink *string
}

// ACSSBackupConnectionProperties - Defines the backup connection properties for a virtual instance for SAP.
type ACSSBackupConnectionProperties struct {
	// Information about the recovery services vault and backup policy used for backup.
	BackupData BackupDataClassification

	// READ-ONLY; Defines the errors related to backup connection resource of virtual instance for SAP.
	Errors *ErrorDefinition

	// READ-ONLY; Defines the provisioning states.
	ProvisioningState *ConnectorProvisioningState
}

// AzureIaaSVMProtectionPolicy - IaaS VM workload-specific backup policy.
type AzureIaaSVMProtectionPolicy struct {
	// REQUIRED; This property will be used as the discriminator for deciding the specific types in the polymorphic chain of types.
	BackupManagementType *string

	// Instant recovery point additional details.
	InstantRPDetails *InstantRPAdditionalDetails

	// Instant RP retention policy range in days
	InstantRpRetentionRangeInDays *int32

	// The policy type.
	PolicyType *IAASVMPolicyType

	// Number of items associated with this policy.
	ProtectedItemsCount *int32

	// ResourceGuard Operation Requests
	ResourceGuardOperationRequests []*string

	// Retention policy with the details on backup copy retention ranges.
	RetentionPolicy RetentionPolicyClassification

	// Backup schedule specified as part of backup policy.
	SchedulePolicy SchedulePolicyClassification

	// Tiering policy to automatically move RPs to another tier Key is Target Tier, defined in RecoveryPointTierType enum. Tiering
	// policy specifies the criteria to move RP to the target tier.
	TieringPolicy map[string]*TieringPolicy

	// Time zone optional input as string. For example: "Pacific Standard Time".
	TimeZone *string
}

// GetProtectionPolicy implements the ProtectionPolicyClassification interface for type AzureIaaSVMProtectionPolicy.
func (a *AzureIaaSVMProtectionPolicy) GetProtectionPolicy() *ProtectionPolicy {
	return &ProtectionPolicy{
		BackupManagementType:           a.BackupManagementType,
		ProtectedItemsCount:            a.ProtectedItemsCount,
		ResourceGuardOperationRequests: a.ResourceGuardOperationRequests,
	}
}

// AzureVMWorkloadProtectionPolicy - Azure VM (Mercury) workload-specific backup policy.
type AzureVMWorkloadProtectionPolicy struct {
	// REQUIRED; This property will be used as the discriminator for deciding the specific types in the polymorphic chain of types.
	BackupManagementType *string

	// Fix the policy inconsistency
	MakePolicyConsistent *bool

	// Number of items associated with this policy.
	ProtectedItemsCount *int32

	// ResourceGuard Operation Requests
	ResourceGuardOperationRequests []*string

	// Common settings for the backup management
	Settings *Settings

	// List of sub-protection policies which includes schedule and retention
	SubProtectionPolicy []*SubProtectionPolicy

	// Type of workload for the backup management
	WorkLoadType *WorkloadType
}

// GetProtectionPolicy implements the ProtectionPolicyClassification interface for type AzureVMWorkloadProtectionPolicy.
func (a *AzureVMWorkloadProtectionPolicy) GetProtectionPolicy() *ProtectionPolicy {
	return &ProtectionPolicy{
		BackupManagementType:           a.BackupManagementType,
		ProtectedItemsCount:            a.ProtectedItemsCount,
		ResourceGuardOperationRequests: a.ResourceGuardOperationRequests,
	}
}

// BackupData - Information about the recovery services vault and backup policy used for backup.
type BackupData struct {
	// REQUIRED; The type of backup, VM, SQL or HANA.
	BackupType *BackupType

	// REQUIRED; The properties of the recovery services vault used for backup.
	RecoveryServicesVault RecoveryServicesVaultPropertiesClassification
}

// GetBackupData implements the BackupDataClassification interface for type BackupData.
func (b *BackupData) GetBackupData() *BackupData { return b }

// Connector - Define the connector resource.
type Connector struct {
	// REQUIRED; The geo-location where the resource lives
	Location *string

	// REQUIRED; Defines the connector resource properties.
	Properties *Properties

	// Managed service identity (user assigned identities)
	Identity *UserAssignedServiceIdentity

	// Resource tags.
	Tags map[string]*string

	// READ-ONLY; Fully qualified resource ID for the resource. Ex - /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}
	ID *string

	// READ-ONLY; The name of the resource
	Name *string

	// READ-ONLY; Azure Resource Manager metadata containing createdBy and modifiedBy information.
	SystemData *SystemData

	// READ-ONLY; The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or "Microsoft.Storage/storageAccounts"
	Type *string
}

// DBBackupPolicyProperties - Defines the policy properties for database backup.
type DBBackupPolicyProperties struct {
	// REQUIRED; The name of the DB backup policy.
	Name *string

	// Azure VM (Mercury) workload-specific backup policy.
	Properties *AzureVMWorkloadProtectionPolicy
}

// DailyRetentionFormat - Daily retention format.
type DailyRetentionFormat struct {
	// List of days of the month.
	DaysOfTheMonth []*Day
}

// DailyRetentionSchedule - Daily retention schedule.
type DailyRetentionSchedule struct {
	// Retention duration of retention Policy.
	RetentionDuration *RetentionDuration

	// Retention times of retention policy.
	RetentionTimes []*time.Time
}

// DailySchedule - Daily schedule.
type DailySchedule struct {
	// List of times of day this schedule has to be run.
	ScheduleRunTimes []*time.Time
}

// Day of the week.
type Day struct {
	// Date of the month
	Date *int32

	// Whether Date is last date of month
	IsLast *bool
}

// DiskExclusionProperties - Defines the disk exclusion properties for virtual machine backup.
type DiskExclusionProperties struct {
	// REQUIRED; List of Disks' Logical Unit Numbers (LUN) to be used for VM Protection.
	DiskLunList []*int32

	// REQUIRED; Flag to indicate whether DiskLunList is to be included/ excluded from backup.
	IsInclusionList *bool
}

// ErrorDefinition - Error definition.
type ErrorDefinition struct {
	// READ-ONLY; Service specific error code which serves as the substatus for the HTTP error code.
	Code *string

	// READ-ONLY; Internal error details.
	Details []*ErrorDefinition

	// READ-ONLY; Description of the error.
	Message *string
}

// ExistingRecoveryServicesVault - Existing recovery services vault.
type ExistingRecoveryServicesVault struct {
	// REQUIRED; The resource ID of the recovery services vault that has been created.
	ID *string

	// REQUIRED; The vault type, whether it is existing or has to be created.
	VaultType *VaultType
}

// GetRecoveryServicesVaultProperties implements the RecoveryServicesVaultPropertiesClassification interface for type ExistingRecoveryServicesVault.
func (e *ExistingRecoveryServicesVault) GetRecoveryServicesVaultProperties() *RecoveryServicesVaultProperties {
	return &RecoveryServicesVaultProperties{
		VaultType: e.VaultType,
	}
}

// HanaBackupData - Defines the HANA Backup data for a virtual instance for SAP.
type HanaBackupData struct {
	// REQUIRED; Defines the policy properties for database backup.
	BackupPolicy *DBBackupPolicyProperties

	// REQUIRED; The type of backup, VM, SQL or HANA.
	BackupType *BackupType

	// REQUIRED; Name of the HANA Database User Store Key.
	HdbuserstoreKeyName *string

	// REQUIRED; The properties of the recovery services vault used for backup.
	RecoveryServicesVault RecoveryServicesVaultPropertiesClassification

	// Defines the policy properties for database backup.
	DbInstanceSnapshotBackupPolicy *DBBackupPolicyProperties

	// Gets or sets the database instance number.
	InstanceNumber *string

	// Path of the SSL key store.
	SSLConfiguration *SSLConfiguration
}

// GetBackupData implements the BackupDataClassification interface for type HanaBackupData.
func (h *HanaBackupData) GetBackupData() *BackupData {
	return &BackupData{
		BackupType:            h.BackupType,
		RecoveryServicesVault: h.RecoveryServicesVault,
	}
}

// HourlySchedule - Hourly schedule.
type HourlySchedule struct {
	// Interval at which backup needs to be triggered. For hourly the value can be 4/6/8/12
	Interval *int32

	// To specify duration of the backup window
	ScheduleWindowDuration *int32

	// To specify start time of the backup window
	ScheduleWindowStartTime *time.Time
}

// InstantRPAdditionalDetails - Instant recovery point additional details.
type InstantRPAdditionalDetails struct {
	// Azure backup resource group name prefix.
	AzureBackupRGNamePrefix *string

	// Azure backup resource group name suffix.
	AzureBackupRGNameSuffix *string
}

// List - Defines the collection of connector resources.
type List struct {
	// REQUIRED; Gets the list of connector resources.
	Value []*Connector

	// Gets the value of next link.
	NextLink *string
}

// LogSchedulePolicy - Log policy schedule.
type LogSchedulePolicy struct {
	// REQUIRED; This property will be used as the discriminator for deciding the specific types in the polymorphic chain of types.
	SchedulePolicyType *string

	// Frequency of the log schedule operation of this policy in minutes.
	ScheduleFrequencyInMins *int32
}

// GetSchedulePolicy implements the SchedulePolicyClassification interface for type LogSchedulePolicy.
func (l *LogSchedulePolicy) GetSchedulePolicy() *SchedulePolicy {
	return &SchedulePolicy{
		SchedulePolicyType: l.SchedulePolicyType,
	}
}

// LongTermRetentionPolicy - Long term retention policy.
type LongTermRetentionPolicy struct {
	// REQUIRED; This property will be used as the discriminator for deciding the specific types in the polymorphic chain of types.
	RetentionPolicyType *string

	// Daily retention schedule of the protection policy.
	DailySchedule *DailyRetentionSchedule

	// Monthly retention schedule of the protection policy.
	MonthlySchedule *MonthlyRetentionSchedule

	// Weekly retention schedule of the protection policy.
	WeeklySchedule *WeeklyRetentionSchedule

	// Yearly retention schedule of the protection policy.
	YearlySchedule *YearlyRetentionSchedule
}

// GetRetentionPolicy implements the RetentionPolicyClassification interface for type LongTermRetentionPolicy.
func (l *LongTermRetentionPolicy) GetRetentionPolicy() *RetentionPolicy {
	return &RetentionPolicy{
		RetentionPolicyType: l.RetentionPolicyType,
	}
}

// LongTermSchedulePolicy - Long term policy schedule.
type LongTermSchedulePolicy struct {
	// REQUIRED; This property will be used as the discriminator for deciding the specific types in the polymorphic chain of types.
	SchedulePolicyType *string
}

// GetSchedulePolicy implements the SchedulePolicyClassification interface for type LongTermSchedulePolicy.
func (l *LongTermSchedulePolicy) GetSchedulePolicy() *SchedulePolicy {
	return &SchedulePolicy{
		SchedulePolicyType: l.SchedulePolicyType,
	}
}

// ManagedRGConfiguration - Managed resource group configuration
type ManagedRGConfiguration struct {
	// Managed resource group name
	Name *string
}

// MonthlyRetentionSchedule - Monthly retention schedule.
type MonthlyRetentionSchedule struct {
	// Retention duration of retention Policy.
	RetentionDuration *RetentionDuration

	// Daily retention format for monthly retention policy.
	RetentionScheduleDaily *DailyRetentionFormat

	// Retention schedule format type for monthly retention policy.
	RetentionScheduleFormatType *RetentionScheduleFormat

	// Weekly retention format for monthly retention policy.
	RetentionScheduleWeekly *WeeklyRetentionFormat

	// Retention times of retention policy.
	RetentionTimes []*time.Time
}

// NewRecoveryServicesVault - New recovery services vault.
type NewRecoveryServicesVault struct {
	// REQUIRED; The name of the recovery services vault has to be created.
	Name *string

	// REQUIRED; The name of the resource group where the recovery services vault has to be created.
	ResourceGroup *string

	// REQUIRED; The vault type, whether it is existing or has to be created.
	VaultType *VaultType
}

// GetRecoveryServicesVaultProperties implements the RecoveryServicesVaultPropertiesClassification interface for type NewRecoveryServicesVault.
func (n *NewRecoveryServicesVault) GetRecoveryServicesVaultProperties() *RecoveryServicesVaultProperties {
	return &RecoveryServicesVaultProperties{
		VaultType: n.VaultType,
	}
}

// Operation - Details of a REST API operation, returned from the Resource Provider Operations API
type Operation struct {
	// Localized display information for this particular operation.
	Display *OperationDisplay

	// READ-ONLY; Enum. Indicates the action type. "Internal" refers to actions that are for internal only APIs.
	ActionType *ActionType

	// READ-ONLY; Whether the operation applies to data-plane. This is "true" for data-plane operations and "false" for ARM/control-plane
	// operations.
	IsDataAction *bool

	// READ-ONLY; The name of the operation, as per Resource-Based Access Control (RBAC). Examples: "Microsoft.Compute/virtualMachines/write",
	// "Microsoft.Compute/virtualMachines/capture/action"
	Name *string

	// READ-ONLY; The intended executor of the operation; as in Resource Based Access Control (RBAC) and audit logs UX. Default
	// value is "user,system"
	Origin *Origin
}

// OperationDisplay - Localized display information for this particular operation.
type OperationDisplay struct {
	// READ-ONLY; The short, localized friendly description of the operation; suitable for tool tips and detailed views.
	Description *string

	// READ-ONLY; The concise, localized friendly name for the operation; suitable for dropdowns. E.g. "Create or Update Virtual
	// Machine", "Restart Virtual Machine".
	Operation *string

	// READ-ONLY; The localized friendly form of the resource provider name, e.g. "Microsoft Monitoring Insights" or "Microsoft
	// Compute".
	Provider *string

	// READ-ONLY; The localized friendly name of the resource type related to this operation. E.g. "Virtual Machines" or "Job
	// Schedule Collections".
	Resource *string
}

// OperationListResult - A list of REST API operations supported by an Azure Resource Provider. It contains an URL link to
// get the next set of results.
type OperationListResult struct {
	// READ-ONLY; URL to get the next set of operation list results (if there are any).
	NextLink *string

	// READ-ONLY; List of operations supported by the resource provider
	Value []*Operation
}

// Properties - Defines the connector resource properties.
type Properties struct {
	// REQUIRED; Defines the ID of the connector's source resource.
	SourceResourceID *string

	// Managed resource group configuration
	ManagedResourceGroupConfiguration *ManagedRGConfiguration

	// READ-ONLY; Indicates any errors on the connector resource.
	Errors *ErrorDefinition

	// READ-ONLY; Defines the provisioning states.
	ProvisioningState *ConnectorProvisioningState
}

// ProtectionPolicy - Base class for backup policy. Workload-specific backup policies are derived from this class.
type ProtectionPolicy struct {
	// REQUIRED; This property will be used as the discriminator for deciding the specific types in the polymorphic chain of types.
	BackupManagementType *string

	// Number of items associated with this policy.
	ProtectedItemsCount *int32

	// ResourceGuard Operation Requests
	ResourceGuardOperationRequests []*string
}

// GetProtectionPolicy implements the ProtectionPolicyClassification interface for type ProtectionPolicy.
func (p *ProtectionPolicy) GetProtectionPolicy() *ProtectionPolicy { return p }

// RecoveryServicesVaultProperties - The properties of the recovery services vault used for backup.
type RecoveryServicesVaultProperties struct {
	// REQUIRED; The vault type, whether it is existing or has to be created.
	VaultType *VaultType
}

// GetRecoveryServicesVaultProperties implements the RecoveryServicesVaultPropertiesClassification interface for type RecoveryServicesVaultProperties.
func (r *RecoveryServicesVaultProperties) GetRecoveryServicesVaultProperties() *RecoveryServicesVaultProperties {
	return r
}

// RetentionDuration - Retention duration.
type RetentionDuration struct {
	// Count of duration types. Retention duration is obtained by the counting the duration type Count times. For example, when
	// Count = 3 and DurationType = Weeks, retention duration will be three weeks.
	Count *int32

	// Retention duration type of retention policy.
	DurationType *RetentionDurationType
}

// RetentionPolicy - Base class for retention policy.
type RetentionPolicy struct {
	// REQUIRED; This property will be used as the discriminator for deciding the specific types in the polymorphic chain of types.
	RetentionPolicyType *string
}

// GetRetentionPolicy implements the RetentionPolicyClassification interface for type RetentionPolicy.
func (r *RetentionPolicy) GetRetentionPolicy() *RetentionPolicy { return r }

// SQLBackupData - Defines the SQL Backup data for a virtual instance for SAP.
type SQLBackupData struct {
	// REQUIRED; Defines the policy properties for database backup.
	BackupPolicy *DBBackupPolicyProperties

	// REQUIRED; The type of backup, VM, SQL or HANA.
	BackupType *BackupType

	// REQUIRED; The properties of the recovery services vault used for backup.
	RecoveryServicesVault RecoveryServicesVaultPropertiesClassification
}

// GetBackupData implements the BackupDataClassification interface for type SQLBackupData.
func (s *SQLBackupData) GetBackupData() *BackupData {
	return &BackupData{
		BackupType:            s.BackupType,
		RecoveryServicesVault: s.RecoveryServicesVault,
	}
}

// SSLConfiguration - Specify the HANA database TLS/SSL properties which will be used for enabling Azure Backup for this database.
// You need to specify these details if you have enabled secure communication for your HANA
// database.
type SSLConfiguration struct {
	// Specify the crypto provider being used (commoncrypto/openssl). If this argument is not provided, it is automatically determined
	// by searching in the configuration files.
	SSLCryptoProvider *SSLCryptoProvider

	// Specify the hostname as mentioned in the SSL certificate. If this argument is not provided, it is automatically determined
	// by searching in the SSL certificate.
	SSLHostNameInCertificate *string

	// Specify the name of the keystore file that contains the client's identity (eg. sapsrv.pse). The script will search for
	// the file in the appropriate directory depending on the crypto provider mentioned.
	// If this argument is not provided, it is automatically determined by searching in the configuration files.
	SSLKeyStore *string

	// Specify the name of the trust store file that contains the server’s public certificates (eg. sapsrv.pse). The script will
	// search for the file in the appropriate directory depending on the crypto
	// provider mentioned. If this argument is not provided, it is automatically determined by searching in the configuration
	// files.
	SSLTrustStore *string
}

// SchedulePolicy - Base class for backup schedule.
type SchedulePolicy struct {
	// REQUIRED; This property will be used as the discriminator for deciding the specific types in the polymorphic chain of types.
	SchedulePolicyType *string
}

// GetSchedulePolicy implements the SchedulePolicyClassification interface for type SchedulePolicy.
func (s *SchedulePolicy) GetSchedulePolicy() *SchedulePolicy { return s }

// Settings - Common settings field for backup management
type Settings struct {
	// Workload compression flag. This has been added so that 'isSqlCompression' will be deprecated once clients upgrade to consider
	// this flag.
	IsCompression *bool

	// SQL compression flag
	Issqlcompression *bool

	// TimeZone optional input as string. For example: TimeZone = "Pacific Standard Time".
	TimeZone *string
}

// SimpleRetentionPolicy - Simple policy retention.
type SimpleRetentionPolicy struct {
	// REQUIRED; This property will be used as the discriminator for deciding the specific types in the polymorphic chain of types.
	RetentionPolicyType *string

	// Retention duration of the protection policy.
	RetentionDuration *RetentionDuration
}

// GetRetentionPolicy implements the RetentionPolicyClassification interface for type SimpleRetentionPolicy.
func (s *SimpleRetentionPolicy) GetRetentionPolicy() *RetentionPolicy {
	return &RetentionPolicy{
		RetentionPolicyType: s.RetentionPolicyType,
	}
}

// SimpleSchedulePolicy - Simple policy schedule.
type SimpleSchedulePolicy struct {
	// REQUIRED; This property will be used as the discriminator for deciding the specific types in the polymorphic chain of types.
	SchedulePolicyType *string

	// Hourly Schedule of this Policy
	HourlySchedule *HourlySchedule

	// List of days of week this schedule has to be run.
	ScheduleRunDays []*DayOfWeek

	// Frequency of the schedule operation of this policy.
	ScheduleRunFrequency *ScheduleRunType

	// List of times of day this schedule has to be run.
	ScheduleRunTimes []*time.Time

	// At every number weeks this schedule has to be run.
	ScheduleWeeklyFrequency *int32
}

// GetSchedulePolicy implements the SchedulePolicyClassification interface for type SimpleSchedulePolicy.
func (s *SimpleSchedulePolicy) GetSchedulePolicy() *SchedulePolicy {
	return &SchedulePolicy{
		SchedulePolicyType: s.SchedulePolicyType,
	}
}

// SimpleSchedulePolicyV2 - The V2 policy schedule for IaaS that supports hourly backups.
type SimpleSchedulePolicyV2 struct {
	// REQUIRED; This property will be used as the discriminator for deciding the specific types in the polymorphic chain of types.
	SchedulePolicyType *string

	// Daily schedule of this policy
	DailySchedule *DailySchedule

	// hourly schedule of this policy
	HourlySchedule *HourlySchedule

	// Frequency of the schedule operation of this policy.
	ScheduleRunFrequency *ScheduleRunType

	// Weekly schedule of this policy
	WeeklySchedule *WeeklySchedule
}

// GetSchedulePolicy implements the SchedulePolicyClassification interface for type SimpleSchedulePolicyV2.
func (s *SimpleSchedulePolicyV2) GetSchedulePolicy() *SchedulePolicy {
	return &SchedulePolicy{
		SchedulePolicyType: s.SchedulePolicyType,
	}
}

// SnapshotBackupAdditionalDetails - Snapshot Backup related fields for WorkloadType SAP Hana system
type SnapshotBackupAdditionalDetails struct {
	// Instant RP details for the snapshot.
	InstantRPDetails *string

	// Retention range for instant Rp in days.
	InstantRpRetentionRangeInDays *int32

	// User Assigned managed identity details used for snapshot policy.
	UserAssignedManagedIdentityDetails *UserAssignedManagedIdentityDetails
}

// SubProtectionPolicy - Sub-protection policy which includes schedule and retention
type SubProtectionPolicy struct {
	// Type of backup policy type
	PolicyType *PolicyType

	// Retention policy with the details on backup copy retention ranges.
	RetentionPolicy RetentionPolicyClassification

	// Backup schedule specified as part of backup policy.
	SchedulePolicy SchedulePolicyClassification

	// Hana DB instance snapshot backup additional details.
	SnapshotBackupAdditionalDetails *SnapshotBackupAdditionalDetails

	// Tiering policy to automatically move RPs to another tier. Key is Target Tier, defined in RecoveryPointTierType enum. Tiering
	// policy specifies the criteria to move RP to the target tier.
	TieringPolicy map[string]*TieringPolicy
}

// SystemData - Metadata pertaining to creation and last modification of the resource.
type SystemData struct {
	// The timestamp of resource creation (UTC).
	CreatedAt *time.Time

	// The identity that created the resource.
	CreatedBy *string

	// The type of identity that created the resource.
	CreatedByType *CreatedByType

	// The timestamp of resource last modification (UTC)
	LastModifiedAt *time.Time

	// The identity that last modified the resource.
	LastModifiedBy *string

	// The type of identity that last modified the resource.
	LastModifiedByType *CreatedByType
}

// TieringPolicy - Tiering Policy for a target tier. If the policy is not specified for a given target tier, service retains
// the existing configured tiering policy for that tier
type TieringPolicy struct {
	// Number of days/weeks/months/years to retain backups in current tier before tiering. Used only if TieringMode is set to
	// TierAfter
	Duration *int32

	// Retention duration type: days/weeks/months/years Used only if TieringMode is set to TierAfter
	DurationType *RetentionDurationType

	// Tiering Mode to control automatic tiering of recovery points. Supported values are:
	// 1. TierRecommended: Tier all recovery points recommended to be tiered
	// 2. TierAfter: Tier all recovery points after a fixed period, as specified in duration + durationType below.
	// 3. DoNotTier: Do not tier any recovery points
	TieringMode *TieringMode
}

// UpdateACSSBackupConnectionRequest - Defines the request body for updating backup connection resource of virtual instance
// for SAP.
type UpdateACSSBackupConnectionRequest struct {
	// Gets or sets the Resource tags.
	Tags map[string]*string
}

// UpdateConnectorRequest - Defines the request body for updating a connector.
type UpdateConnectorRequest struct {
	// Managed service identity (user assigned identities)
	Identity *UserAssignedServiceIdentity

	// Gets or sets the resource tags.
	Tags map[string]*string
}

// UserAssignedIdentity - User assigned identity properties
type UserAssignedIdentity struct {
	// READ-ONLY; The client ID of the assigned identity.
	ClientID *string

	// READ-ONLY; The principal ID of the assigned identity.
	PrincipalID *string
}

// UserAssignedIdentityProperties - User assigned managed identity properties.
type UserAssignedIdentityProperties struct {
	ClientID    *string
	PrincipalID *string
}

// UserAssignedManagedIdentityDetails - User assigned managed identity details.
type UserAssignedManagedIdentityDetails struct {
	IdentityArmID *string
	IdentityName  *string

	// User assigned managed identity properties.
	UserAssignedIdentityProperties *UserAssignedIdentityProperties
}

// UserAssignedServiceIdentity - Managed service identity (user assigned identities)
type UserAssignedServiceIdentity struct {
	// REQUIRED; Type of manage identity
	Type *ManagedServiceIdentityType

	// User assigned identities dictionary
	UserAssignedIdentities map[string]*UserAssignedIdentity
}

// VMBackupData - Defines the VM Backup data for a virtual instance for SAP.
type VMBackupData struct {
	// REQUIRED; Defines the policy properties for virtual machine backup.
	BackupPolicy *VMBackupPolicyProperties

	// REQUIRED; The type of backup, VM, SQL or HANA.
	BackupType *BackupType

	// REQUIRED; The properties of the recovery services vault used for backup.
	RecoveryServicesVault RecoveryServicesVaultPropertiesClassification

	// Defines the disk exclusion properties for virtual machine backup.
	DiskExclusionProperties *DiskExclusionProperties
}

// GetBackupData implements the BackupDataClassification interface for type VMBackupData.
func (v *VMBackupData) GetBackupData() *BackupData {
	return &BackupData{
		BackupType:            v.BackupType,
		RecoveryServicesVault: v.RecoveryServicesVault,
	}
}

// VMBackupPolicyProperties - Defines the policy properties for virtual machine backup.
type VMBackupPolicyProperties struct {
	// REQUIRED; The name of the VM Backup policy.
	Name *string

	// IaaS VM workload-specific backup policy.
	Properties *AzureIaaSVMProtectionPolicy
}

// WeeklyRetentionFormat - Weekly retention format.
type WeeklyRetentionFormat struct {
	// List of days of the week.
	DaysOfTheWeek []*DayOfWeek

	// List of weeks of month.
	WeeksOfTheMonth []*WeekOfMonth
}

// WeeklyRetentionSchedule - Weekly retention schedule.
type WeeklyRetentionSchedule struct {
	// List of days of week for weekly retention policy.
	DaysOfTheWeek []*DayOfWeek

	// Retention duration of retention Policy.
	RetentionDuration *RetentionDuration

	// Retention times of retention policy.
	RetentionTimes []*time.Time
}

// WeeklySchedule - Weekly schedule.
type WeeklySchedule struct {
	// Schedule run days.
	ScheduleRunDays []*DayOfWeek

	// List of times of day this schedule has to be run.
	ScheduleRunTimes []*time.Time
}

// YearlyRetentionSchedule - Yearly retention schedule.
type YearlyRetentionSchedule struct {
	// List of months of year of yearly retention policy.
	MonthsOfYear []*MonthOfYear

	// Retention duration of retention Policy.
	RetentionDuration *RetentionDuration

	// Daily retention format for yearly retention policy.
	RetentionScheduleDaily *DailyRetentionFormat

	// Retention schedule format for yearly retention policy.
	RetentionScheduleFormatType *RetentionScheduleFormat

	// Weekly retention format for yearly retention policy.
	RetentionScheduleWeekly *WeeklyRetentionFormat

	// Retention times of retention policy.
	RetentionTimes []*time.Time
}
