//go:build go1.18
// +build go1.18

// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator. DO NOT EDIT.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

package armconnector

import "encoding/json"

func unmarshalBackupDataClassification(rawMsg json.RawMessage) (BackupDataClassification, error) {
	if rawMsg == nil {
		return nil, nil
	}
	var m map[string]any
	if err := json.Unmarshal(rawMsg, &m); err != nil {
		return nil, err
	}
	var b BackupDataClassification
	switch m["backupType"] {
	case string(BackupTypeHANA):
		b = &HanaBackupData{}
	case string(BackupTypeSQL):
		b = &SQLBackupData{}
	case string(BackupTypeVM):
		b = &VMBackupData{}
	default:
		b = &BackupData{}
	}
	if err := json.Unmarshal(rawMsg, b); err != nil {
		return nil, err
	}
	return b, nil
}

func unmarshalRecoveryServicesVaultPropertiesClassification(rawMsg json.RawMessage) (RecoveryServicesVaultPropertiesClassification, error) {
	if rawMsg == nil {
		return nil, nil
	}
	var m map[string]any
	if err := json.Unmarshal(rawMsg, &m); err != nil {
		return nil, err
	}
	var b RecoveryServicesVaultPropertiesClassification
	switch m["vaultType"] {
	case string(VaultTypeExisting):
		b = &ExistingRecoveryServicesVault{}
	case string(VaultTypeNew):
		b = &NewRecoveryServicesVault{}
	default:
		b = &RecoveryServicesVaultProperties{}
	}
	if err := json.Unmarshal(rawMsg, b); err != nil {
		return nil, err
	}
	return b, nil
}

func unmarshalRetentionPolicyClassification(rawMsg json.RawMessage) (RetentionPolicyClassification, error) {
	if rawMsg == nil {
		return nil, nil
	}
	var m map[string]any
	if err := json.Unmarshal(rawMsg, &m); err != nil {
		return nil, err
	}
	var b RetentionPolicyClassification
	switch m["retentionPolicyType"] {
	case "LongTermRetentionPolicy":
		b = &LongTermRetentionPolicy{}
	case "SimpleRetentionPolicy":
		b = &SimpleRetentionPolicy{}
	default:
		b = &RetentionPolicy{}
	}
	if err := json.Unmarshal(rawMsg, b); err != nil {
		return nil, err
	}
	return b, nil
}

func unmarshalSchedulePolicyClassification(rawMsg json.RawMessage) (SchedulePolicyClassification, error) {
	if rawMsg == nil {
		return nil, nil
	}
	var m map[string]any
	if err := json.Unmarshal(rawMsg, &m); err != nil {
		return nil, err
	}
	var b SchedulePolicyClassification
	switch m["schedulePolicyType"] {
	case "LogSchedulePolicy":
		b = &LogSchedulePolicy{}
	case "LongTermSchedulePolicy":
		b = &LongTermSchedulePolicy{}
	case "SimpleSchedulePolicy":
		b = &SimpleSchedulePolicy{}
	case "SimpleSchedulePolicyV2":
		b = &SimpleSchedulePolicyV2{}
	default:
		b = &SchedulePolicy{}
	}
	if err := json.Unmarshal(rawMsg, b); err != nil {
		return nil, err
	}
	return b, nil
}
