//go:build go1.18
// +build go1.18

// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

package armworkloads

import (
	"encoding/json"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore"
	"reflect"
)

// GetProviderSpecificProperties implements the ProviderSpecificPropertiesClassification interface for type DB2ProviderInstanceProperties.
func (d *DB2ProviderInstanceProperties) GetProviderSpecificProperties() *ProviderSpecificProperties {
	return &ProviderSpecificProperties{
		ProviderType: d.ProviderType,
	}
}

// MarshalJSON implements the json.Marshaller interface for type DB2ProviderInstanceProperties.
func (d DB2ProviderInstanceProperties) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "dbName", d.DbName)
	populate(objectMap, "dbPassword", d.DbPassword)
	populate(objectMap, "dbPasswordUri", d.DbPasswordURI)
	populate(objectMap, "dbPort", d.DbPort)
	populate(objectMap, "dbUsername", d.DbUsername)
	populate(objectMap, "hostname", d.Hostname)
	objectMap["providerType"] = "Db2"
	populate(objectMap, "sapSid", d.SapSid)
	return json.Marshal(objectMap)
}

// UnmarshalJSON implements the json.Unmarshaller interface for type DB2ProviderInstanceProperties.
func (d *DB2ProviderInstanceProperties) UnmarshalJSON(data []byte) error {
	var rawMsg map[string]json.RawMessage
	if err := json.Unmarshal(data, &rawMsg); err != nil {
		return err
	}
	for key, val := range rawMsg {
		var err error
		switch key {
		case "dbName":
			err = unpopulate(val, &d.DbName)
			delete(rawMsg, key)
		case "dbPassword":
			err = unpopulate(val, &d.DbPassword)
			delete(rawMsg, key)
		case "dbPasswordUri":
			err = unpopulate(val, &d.DbPasswordURI)
			delete(rawMsg, key)
		case "dbPort":
			err = unpopulate(val, &d.DbPort)
			delete(rawMsg, key)
		case "dbUsername":
			err = unpopulate(val, &d.DbUsername)
			delete(rawMsg, key)
		case "hostname":
			err = unpopulate(val, &d.Hostname)
			delete(rawMsg, key)
		case "providerType":
			err = unpopulate(val, &d.ProviderType)
			delete(rawMsg, key)
		case "sapSid":
			err = unpopulate(val, &d.SapSid)
			delete(rawMsg, key)
		}
		if err != nil {
			return err
		}
	}
	return nil
}

// MarshalJSON implements the json.Marshaller interface for type Error.
func (e Error) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "code", e.Code)
	populate(objectMap, "details", e.Details)
	populate(objectMap, "innerError", e.InnerError)
	populate(objectMap, "message", e.Message)
	populate(objectMap, "target", e.Target)
	return json.Marshal(objectMap)
}

// MarshalJSON implements the json.Marshaller interface for type ErrorDetail.
func (e ErrorDetail) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "additionalInfo", e.AdditionalInfo)
	populate(objectMap, "code", e.Code)
	populate(objectMap, "details", e.Details)
	populate(objectMap, "message", e.Message)
	populate(objectMap, "target", e.Target)
	return json.Marshal(objectMap)
}

// GetProviderSpecificProperties implements the ProviderSpecificPropertiesClassification interface for type HanaDbProviderInstanceProperties.
func (h *HanaDbProviderInstanceProperties) GetProviderSpecificProperties() *ProviderSpecificProperties {
	return &ProviderSpecificProperties{
		ProviderType: h.ProviderType,
	}
}

// MarshalJSON implements the json.Marshaller interface for type HanaDbProviderInstanceProperties.
func (h HanaDbProviderInstanceProperties) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "dbName", h.DbName)
	populate(objectMap, "dbPassword", h.DbPassword)
	populate(objectMap, "dbPasswordUri", h.DbPasswordURI)
	populate(objectMap, "dbSslCertificateUri", h.DbSSLCertificateURI)
	populate(objectMap, "dbUsername", h.DbUsername)
	populate(objectMap, "hostname", h.Hostname)
	populate(objectMap, "instanceNumber", h.InstanceNumber)
	objectMap["providerType"] = "SapHana"
	populate(objectMap, "sqlPort", h.SQLPort)
	populate(objectMap, "sslHostNameInCertificate", h.SSLHostNameInCertificate)
	return json.Marshal(objectMap)
}

// UnmarshalJSON implements the json.Unmarshaller interface for type HanaDbProviderInstanceProperties.
func (h *HanaDbProviderInstanceProperties) UnmarshalJSON(data []byte) error {
	var rawMsg map[string]json.RawMessage
	if err := json.Unmarshal(data, &rawMsg); err != nil {
		return err
	}
	for key, val := range rawMsg {
		var err error
		switch key {
		case "dbName":
			err = unpopulate(val, &h.DbName)
			delete(rawMsg, key)
		case "dbPassword":
			err = unpopulate(val, &h.DbPassword)
			delete(rawMsg, key)
		case "dbPasswordUri":
			err = unpopulate(val, &h.DbPasswordURI)
			delete(rawMsg, key)
		case "dbSslCertificateUri":
			err = unpopulate(val, &h.DbSSLCertificateURI)
			delete(rawMsg, key)
		case "dbUsername":
			err = unpopulate(val, &h.DbUsername)
			delete(rawMsg, key)
		case "hostname":
			err = unpopulate(val, &h.Hostname)
			delete(rawMsg, key)
		case "instanceNumber":
			err = unpopulate(val, &h.InstanceNumber)
			delete(rawMsg, key)
		case "providerType":
			err = unpopulate(val, &h.ProviderType)
			delete(rawMsg, key)
		case "sqlPort":
			err = unpopulate(val, &h.SQLPort)
			delete(rawMsg, key)
		case "sslHostNameInCertificate":
			err = unpopulate(val, &h.SSLHostNameInCertificate)
			delete(rawMsg, key)
		}
		if err != nil {
			return err
		}
	}
	return nil
}

// MarshalJSON implements the json.Marshaller interface for type Monitor.
func (m Monitor) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "id", m.ID)
	populate(objectMap, "location", m.Location)
	populate(objectMap, "name", m.Name)
	populate(objectMap, "properties", m.Properties)
	populate(objectMap, "systemData", m.SystemData)
	populate(objectMap, "tags", m.Tags)
	populate(objectMap, "type", m.Type)
	return json.Marshal(objectMap)
}

// MarshalJSON implements the json.Marshaller interface for type MonitorListResult.
func (m MonitorListResult) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "nextLink", m.NextLink)
	populate(objectMap, "value", m.Value)
	return json.Marshal(objectMap)
}

// MarshalJSON implements the json.Marshaller interface for type MonitorPropertiesErrors.
func (m MonitorPropertiesErrors) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "code", m.Code)
	populate(objectMap, "details", m.Details)
	populate(objectMap, "innerError", m.InnerError)
	populate(objectMap, "message", m.Message)
	populate(objectMap, "target", m.Target)
	return json.Marshal(objectMap)
}

// GetProviderSpecificProperties implements the ProviderSpecificPropertiesClassification interface for type MsSQLServerProviderInstanceProperties.
func (m *MsSQLServerProviderInstanceProperties) GetProviderSpecificProperties() *ProviderSpecificProperties {
	return &ProviderSpecificProperties{
		ProviderType: m.ProviderType,
	}
}

// MarshalJSON implements the json.Marshaller interface for type MsSQLServerProviderInstanceProperties.
func (m MsSQLServerProviderInstanceProperties) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "dbPassword", m.DbPassword)
	populate(objectMap, "dbPasswordUri", m.DbPasswordURI)
	populate(objectMap, "dbPort", m.DbPort)
	populate(objectMap, "dbUsername", m.DbUsername)
	populate(objectMap, "hostname", m.Hostname)
	objectMap["providerType"] = "MsSqlServer"
	populate(objectMap, "sapSid", m.SapSid)
	return json.Marshal(objectMap)
}

// UnmarshalJSON implements the json.Unmarshaller interface for type MsSQLServerProviderInstanceProperties.
func (m *MsSQLServerProviderInstanceProperties) UnmarshalJSON(data []byte) error {
	var rawMsg map[string]json.RawMessage
	if err := json.Unmarshal(data, &rawMsg); err != nil {
		return err
	}
	for key, val := range rawMsg {
		var err error
		switch key {
		case "dbPassword":
			err = unpopulate(val, &m.DbPassword)
			delete(rawMsg, key)
		case "dbPasswordUri":
			err = unpopulate(val, &m.DbPasswordURI)
			delete(rawMsg, key)
		case "dbPort":
			err = unpopulate(val, &m.DbPort)
			delete(rawMsg, key)
		case "dbUsername":
			err = unpopulate(val, &m.DbUsername)
			delete(rawMsg, key)
		case "hostname":
			err = unpopulate(val, &m.Hostname)
			delete(rawMsg, key)
		case "providerType":
			err = unpopulate(val, &m.ProviderType)
			delete(rawMsg, key)
		case "sapSid":
			err = unpopulate(val, &m.SapSid)
			delete(rawMsg, key)
		}
		if err != nil {
			return err
		}
	}
	return nil
}

// MarshalJSON implements the json.Marshaller interface for type OperationListResult.
func (o OperationListResult) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "nextLink", o.NextLink)
	populate(objectMap, "value", o.Value)
	return json.Marshal(objectMap)
}

// MarshalJSON implements the json.Marshaller interface for type OperationStatusResult.
func (o OperationStatusResult) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populateTimeRFC3339(objectMap, "endTime", o.EndTime)
	populate(objectMap, "error", o.Error)
	populate(objectMap, "id", o.ID)
	populate(objectMap, "name", o.Name)
	populate(objectMap, "operations", o.Operations)
	populate(objectMap, "percentComplete", o.PercentComplete)
	populateTimeRFC3339(objectMap, "startTime", o.StartTime)
	populate(objectMap, "status", o.Status)
	return json.Marshal(objectMap)
}

// UnmarshalJSON implements the json.Unmarshaller interface for type OperationStatusResult.
func (o *OperationStatusResult) UnmarshalJSON(data []byte) error {
	var rawMsg map[string]json.RawMessage
	if err := json.Unmarshal(data, &rawMsg); err != nil {
		return err
	}
	for key, val := range rawMsg {
		var err error
		switch key {
		case "endTime":
			err = unpopulateTimeRFC3339(val, &o.EndTime)
			delete(rawMsg, key)
		case "error":
			err = unpopulate(val, &o.Error)
			delete(rawMsg, key)
		case "id":
			err = unpopulate(val, &o.ID)
			delete(rawMsg, key)
		case "name":
			err = unpopulate(val, &o.Name)
			delete(rawMsg, key)
		case "operations":
			err = unpopulate(val, &o.Operations)
			delete(rawMsg, key)
		case "percentComplete":
			err = unpopulate(val, &o.PercentComplete)
			delete(rawMsg, key)
		case "startTime":
			err = unpopulateTimeRFC3339(val, &o.StartTime)
			delete(rawMsg, key)
		case "status":
			err = unpopulate(val, &o.Status)
			delete(rawMsg, key)
		}
		if err != nil {
			return err
		}
	}
	return nil
}

// MarshalJSON implements the json.Marshaller interface for type OperationsDefinitionArrayResponseWithContinuation.
func (o OperationsDefinitionArrayResponseWithContinuation) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "nextLink", o.NextLink)
	populate(objectMap, "value", o.Value)
	return json.Marshal(objectMap)
}

// GetProviderSpecificProperties implements the ProviderSpecificPropertiesClassification interface for type PrometheusHaClusterProviderInstanceProperties.
func (p *PrometheusHaClusterProviderInstanceProperties) GetProviderSpecificProperties() *ProviderSpecificProperties {
	return &ProviderSpecificProperties{
		ProviderType: p.ProviderType,
	}
}

// MarshalJSON implements the json.Marshaller interface for type PrometheusHaClusterProviderInstanceProperties.
func (p PrometheusHaClusterProviderInstanceProperties) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "clusterName", p.ClusterName)
	populate(objectMap, "hostname", p.Hostname)
	populate(objectMap, "prometheusUrl", p.PrometheusURL)
	objectMap["providerType"] = "PrometheusHaCluster"
	populate(objectMap, "sid", p.Sid)
	return json.Marshal(objectMap)
}

// UnmarshalJSON implements the json.Unmarshaller interface for type PrometheusHaClusterProviderInstanceProperties.
func (p *PrometheusHaClusterProviderInstanceProperties) UnmarshalJSON(data []byte) error {
	var rawMsg map[string]json.RawMessage
	if err := json.Unmarshal(data, &rawMsg); err != nil {
		return err
	}
	for key, val := range rawMsg {
		var err error
		switch key {
		case "clusterName":
			err = unpopulate(val, &p.ClusterName)
			delete(rawMsg, key)
		case "hostname":
			err = unpopulate(val, &p.Hostname)
			delete(rawMsg, key)
		case "prometheusUrl":
			err = unpopulate(val, &p.PrometheusURL)
			delete(rawMsg, key)
		case "providerType":
			err = unpopulate(val, &p.ProviderType)
			delete(rawMsg, key)
		case "sid":
			err = unpopulate(val, &p.Sid)
			delete(rawMsg, key)
		}
		if err != nil {
			return err
		}
	}
	return nil
}

// GetProviderSpecificProperties implements the ProviderSpecificPropertiesClassification interface for type PrometheusOSProviderInstanceProperties.
func (p *PrometheusOSProviderInstanceProperties) GetProviderSpecificProperties() *ProviderSpecificProperties {
	return &ProviderSpecificProperties{
		ProviderType: p.ProviderType,
	}
}

// MarshalJSON implements the json.Marshaller interface for type PrometheusOSProviderInstanceProperties.
func (p PrometheusOSProviderInstanceProperties) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "prometheusUrl", p.PrometheusURL)
	objectMap["providerType"] = "PrometheusOS"
	return json.Marshal(objectMap)
}

// UnmarshalJSON implements the json.Unmarshaller interface for type PrometheusOSProviderInstanceProperties.
func (p *PrometheusOSProviderInstanceProperties) UnmarshalJSON(data []byte) error {
	var rawMsg map[string]json.RawMessage
	if err := json.Unmarshal(data, &rawMsg); err != nil {
		return err
	}
	for key, val := range rawMsg {
		var err error
		switch key {
		case "prometheusUrl":
			err = unpopulate(val, &p.PrometheusURL)
			delete(rawMsg, key)
		case "providerType":
			err = unpopulate(val, &p.ProviderType)
			delete(rawMsg, key)
		}
		if err != nil {
			return err
		}
	}
	return nil
}

// MarshalJSON implements the json.Marshaller interface for type ProviderInstanceListResult.
func (p ProviderInstanceListResult) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "nextLink", p.NextLink)
	populate(objectMap, "value", p.Value)
	return json.Marshal(objectMap)
}

// MarshalJSON implements the json.Marshaller interface for type ProviderInstanceProperties.
func (p ProviderInstanceProperties) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "errors", p.Errors)
	populate(objectMap, "providerSettings", p.ProviderSettings)
	populate(objectMap, "provisioningState", p.ProvisioningState)
	return json.Marshal(objectMap)
}

// UnmarshalJSON implements the json.Unmarshaller interface for type ProviderInstanceProperties.
func (p *ProviderInstanceProperties) UnmarshalJSON(data []byte) error {
	var rawMsg map[string]json.RawMessage
	if err := json.Unmarshal(data, &rawMsg); err != nil {
		return err
	}
	for key, val := range rawMsg {
		var err error
		switch key {
		case "errors":
			err = unpopulate(val, &p.Errors)
			delete(rawMsg, key)
		case "providerSettings":
			p.ProviderSettings, err = unmarshalProviderSpecificPropertiesClassification(val)
			delete(rawMsg, key)
		case "provisioningState":
			err = unpopulate(val, &p.ProvisioningState)
			delete(rawMsg, key)
		}
		if err != nil {
			return err
		}
	}
	return nil
}

// MarshalJSON implements the json.Marshaller interface for type ProviderInstancePropertiesErrors.
func (p ProviderInstancePropertiesErrors) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "code", p.Code)
	populate(objectMap, "details", p.Details)
	populate(objectMap, "innerError", p.InnerError)
	populate(objectMap, "message", p.Message)
	populate(objectMap, "target", p.Target)
	return json.Marshal(objectMap)
}

// GetProviderSpecificProperties implements the ProviderSpecificPropertiesClassification interface for type ProviderSpecificProperties.
func (p *ProviderSpecificProperties) GetProviderSpecificProperties() *ProviderSpecificProperties {
	return p
}

// GetProviderSpecificProperties implements the ProviderSpecificPropertiesClassification interface for type SapNetWeaverProviderInstanceProperties.
func (s *SapNetWeaverProviderInstanceProperties) GetProviderSpecificProperties() *ProviderSpecificProperties {
	return &ProviderSpecificProperties{
		ProviderType: s.ProviderType,
	}
}

// MarshalJSON implements the json.Marshaller interface for type SapNetWeaverProviderInstanceProperties.
func (s SapNetWeaverProviderInstanceProperties) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	objectMap["providerType"] = "SapNetWeaver"
	populate(objectMap, "sapClientId", s.SapClientID)
	populate(objectMap, "sapHostFileEntries", s.SapHostFileEntries)
	populate(objectMap, "sapHostname", s.SapHostname)
	populate(objectMap, "sapInstanceNr", s.SapInstanceNr)
	populate(objectMap, "sapPassword", s.SapPassword)
	populate(objectMap, "sapPasswordUri", s.SapPasswordURI)
	populate(objectMap, "sapPortNumber", s.SapPortNumber)
	populate(objectMap, "sapSslCertificateUri", s.SapSSLCertificateURI)
	populate(objectMap, "sapSid", s.SapSid)
	populate(objectMap, "sapUsername", s.SapUsername)
	return json.Marshal(objectMap)
}

// UnmarshalJSON implements the json.Unmarshaller interface for type SapNetWeaverProviderInstanceProperties.
func (s *SapNetWeaverProviderInstanceProperties) UnmarshalJSON(data []byte) error {
	var rawMsg map[string]json.RawMessage
	if err := json.Unmarshal(data, &rawMsg); err != nil {
		return err
	}
	for key, val := range rawMsg {
		var err error
		switch key {
		case "providerType":
			err = unpopulate(val, &s.ProviderType)
			delete(rawMsg, key)
		case "sapClientId":
			err = unpopulate(val, &s.SapClientID)
			delete(rawMsg, key)
		case "sapHostFileEntries":
			err = unpopulate(val, &s.SapHostFileEntries)
			delete(rawMsg, key)
		case "sapHostname":
			err = unpopulate(val, &s.SapHostname)
			delete(rawMsg, key)
		case "sapInstanceNr":
			err = unpopulate(val, &s.SapInstanceNr)
			delete(rawMsg, key)
		case "sapPassword":
			err = unpopulate(val, &s.SapPassword)
			delete(rawMsg, key)
		case "sapPasswordUri":
			err = unpopulate(val, &s.SapPasswordURI)
			delete(rawMsg, key)
		case "sapPortNumber":
			err = unpopulate(val, &s.SapPortNumber)
			delete(rawMsg, key)
		case "sapSslCertificateUri":
			err = unpopulate(val, &s.SapSSLCertificateURI)
			delete(rawMsg, key)
		case "sapSid":
			err = unpopulate(val, &s.SapSid)
			delete(rawMsg, key)
		case "sapUsername":
			err = unpopulate(val, &s.SapUsername)
			delete(rawMsg, key)
		}
		if err != nil {
			return err
		}
	}
	return nil
}

// MarshalJSON implements the json.Marshaller interface for type SystemData.
func (s SystemData) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populateTimeRFC3339(objectMap, "createdAt", s.CreatedAt)
	populate(objectMap, "createdBy", s.CreatedBy)
	populate(objectMap, "createdByType", s.CreatedByType)
	populateTimeRFC3339(objectMap, "lastModifiedAt", s.LastModifiedAt)
	populate(objectMap, "lastModifiedBy", s.LastModifiedBy)
	populate(objectMap, "lastModifiedByType", s.LastModifiedByType)
	return json.Marshal(objectMap)
}

// UnmarshalJSON implements the json.Unmarshaller interface for type SystemData.
func (s *SystemData) UnmarshalJSON(data []byte) error {
	var rawMsg map[string]json.RawMessage
	if err := json.Unmarshal(data, &rawMsg); err != nil {
		return err
	}
	for key, val := range rawMsg {
		var err error
		switch key {
		case "createdAt":
			err = unpopulateTimeRFC3339(val, &s.CreatedAt)
			delete(rawMsg, key)
		case "createdBy":
			err = unpopulate(val, &s.CreatedBy)
			delete(rawMsg, key)
		case "createdByType":
			err = unpopulate(val, &s.CreatedByType)
			delete(rawMsg, key)
		case "lastModifiedAt":
			err = unpopulateTimeRFC3339(val, &s.LastModifiedAt)
			delete(rawMsg, key)
		case "lastModifiedBy":
			err = unpopulate(val, &s.LastModifiedBy)
			delete(rawMsg, key)
		case "lastModifiedByType":
			err = unpopulate(val, &s.LastModifiedByType)
			delete(rawMsg, key)
		}
		if err != nil {
			return err
		}
	}
	return nil
}

// MarshalJSON implements the json.Marshaller interface for type Tags.
func (t Tags) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "tags", t.Tags)
	return json.Marshal(objectMap)
}

// MarshalJSON implements the json.Marshaller interface for type TrackedResource.
func (t TrackedResource) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	populate(objectMap, "id", t.ID)
	populate(objectMap, "location", t.Location)
	populate(objectMap, "name", t.Name)
	populate(objectMap, "systemData", t.SystemData)
	populate(objectMap, "tags", t.Tags)
	populate(objectMap, "type", t.Type)
	return json.Marshal(objectMap)
}

func populate(m map[string]interface{}, k string, v interface{}) {
	if v == nil {
		return
	} else if azcore.IsNullValue(v) {
		m[k] = nil
	} else if !reflect.ValueOf(v).IsNil() {
		m[k] = v
	}
}

func unpopulate(data json.RawMessage, v interface{}) error {
	if data == nil {
		return nil
	}
	return json.Unmarshal(data, v)
}
