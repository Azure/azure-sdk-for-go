// +build go1.13

// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

package armresources

import (
	"context"
	"github.com/Azure/azure-sdk-for-go/sdk/armcore"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore"
	"net/http"
	"time"
)

// DeploymentExtendedPoller provides polling facilities until the operation reaches a terminal state.
type DeploymentExtendedPoller interface {
	azcore.Poller
	// FinalResponse performs a final GET to the service and returns the final response
	// for the polling operation. If there is an error performing the final GET then an error is returned.
	// If the final GET succeeded then the final DeploymentExtendedResponse will be returned.
	FinalResponse(ctx context.Context) (DeploymentExtendedResponse, error)
}

type deploymentExtendedPoller struct {
	pipeline azcore.Pipeline
	pt       armcore.Poller
}

func (p *deploymentExtendedPoller) Done() bool {
	return p.pt.Done()
}

func (p *deploymentExtendedPoller) Poll(ctx context.Context) (*http.Response, error) {
	return p.pt.Poll(ctx, p.pipeline)
}

func (p *deploymentExtendedPoller) FinalResponse(ctx context.Context) (DeploymentExtendedResponse, error) {
	respType := DeploymentExtendedResponse{DeploymentExtended: &DeploymentExtended{}}
	resp, err := p.pt.FinalResponse(ctx, p.pipeline, respType.DeploymentExtended)
	if err != nil {
		return DeploymentExtendedResponse{}, err
	}
	respType.RawResponse = resp
	return respType, nil
}

func (p *deploymentExtendedPoller) ResumeToken() (string, error) {
	return p.pt.ResumeToken()
}

func (p *deploymentExtendedPoller) pollUntilDone(ctx context.Context, freq time.Duration) (DeploymentExtendedResponse, error) {
	respType := DeploymentExtendedResponse{DeploymentExtended: &DeploymentExtended{}}
	resp, err := p.pt.PollUntilDone(ctx, freq, p.pipeline, respType.DeploymentExtended)
	if err != nil {
		return DeploymentExtendedResponse{}, err
	}
	respType.RawResponse = resp
	return respType, nil
}

// DeploymentValidateResultPoller provides polling facilities until the operation reaches a terminal state.
type DeploymentValidateResultPoller interface {
	azcore.Poller
	// FinalResponse performs a final GET to the service and returns the final response
	// for the polling operation. If there is an error performing the final GET then an error is returned.
	// If the final GET succeeded then the final DeploymentValidateResultResponse will be returned.
	FinalResponse(ctx context.Context) (DeploymentValidateResultResponse, error)
}

type deploymentValidateResultPoller struct {
	pipeline azcore.Pipeline
	pt       armcore.Poller
}

func (p *deploymentValidateResultPoller) Done() bool {
	return p.pt.Done()
}

func (p *deploymentValidateResultPoller) Poll(ctx context.Context) (*http.Response, error) {
	return p.pt.Poll(ctx, p.pipeline)
}

func (p *deploymentValidateResultPoller) FinalResponse(ctx context.Context) (DeploymentValidateResultResponse, error) {
	respType := DeploymentValidateResultResponse{DeploymentValidateResult: &DeploymentValidateResult{}}
	resp, err := p.pt.FinalResponse(ctx, p.pipeline, respType.DeploymentValidateResult)
	if err != nil {
		return DeploymentValidateResultResponse{}, err
	}
	respType.RawResponse = resp
	return respType, nil
}

func (p *deploymentValidateResultPoller) ResumeToken() (string, error) {
	return p.pt.ResumeToken()
}

func (p *deploymentValidateResultPoller) pollUntilDone(ctx context.Context, freq time.Duration) (DeploymentValidateResultResponse, error) {
	respType := DeploymentValidateResultResponse{DeploymentValidateResult: &DeploymentValidateResult{}}
	resp, err := p.pt.PollUntilDone(ctx, freq, p.pipeline, respType.DeploymentValidateResult)
	if err != nil {
		return DeploymentValidateResultResponse{}, err
	}
	respType.RawResponse = resp
	return respType, nil
}

// GenericResourcePoller provides polling facilities until the operation reaches a terminal state.
type GenericResourcePoller interface {
	azcore.Poller
	// FinalResponse performs a final GET to the service and returns the final response
	// for the polling operation. If there is an error performing the final GET then an error is returned.
	// If the final GET succeeded then the final GenericResourceResponse will be returned.
	FinalResponse(ctx context.Context) (GenericResourceResponse, error)
}

type genericResourcePoller struct {
	pipeline azcore.Pipeline
	pt       armcore.Poller
}

func (p *genericResourcePoller) Done() bool {
	return p.pt.Done()
}

func (p *genericResourcePoller) Poll(ctx context.Context) (*http.Response, error) {
	return p.pt.Poll(ctx, p.pipeline)
}

func (p *genericResourcePoller) FinalResponse(ctx context.Context) (GenericResourceResponse, error) {
	respType := GenericResourceResponse{GenericResource: &GenericResource{}}
	resp, err := p.pt.FinalResponse(ctx, p.pipeline, respType.GenericResource)
	if err != nil {
		return GenericResourceResponse{}, err
	}
	respType.RawResponse = resp
	return respType, nil
}

func (p *genericResourcePoller) ResumeToken() (string, error) {
	return p.pt.ResumeToken()
}

func (p *genericResourcePoller) pollUntilDone(ctx context.Context, freq time.Duration) (GenericResourceResponse, error) {
	respType := GenericResourceResponse{GenericResource: &GenericResource{}}
	resp, err := p.pt.PollUntilDone(ctx, freq, p.pipeline, respType.GenericResource)
	if err != nil {
		return GenericResourceResponse{}, err
	}
	respType.RawResponse = resp
	return respType, nil
}

// HTTPPoller provides polling facilities until the operation reaches a terminal state.
type HTTPPoller interface {
	azcore.Poller
	// FinalResponse performs a final GET to the service and returns the final response
	// for the polling operation. If there is an error performing the final GET then an error is returned.
	// If the final GET succeeded then the final *http.Response will be returned.
	FinalResponse(ctx context.Context) (*http.Response, error)
}

type httpPoller struct {
	pipeline azcore.Pipeline
	pt       armcore.Poller
}

func (p *httpPoller) Done() bool {
	return p.pt.Done()
}

func (p *httpPoller) Poll(ctx context.Context) (*http.Response, error) {
	return p.pt.Poll(ctx, p.pipeline)
}

func (p *httpPoller) FinalResponse(ctx context.Context) (*http.Response, error) {
	return p.pt.FinalResponse(ctx, p.pipeline, nil)
}

func (p *httpPoller) ResumeToken() (string, error) {
	return p.pt.ResumeToken()
}

func (p *httpPoller) pollUntilDone(ctx context.Context, freq time.Duration) (*http.Response, error) {
	return p.pt.PollUntilDone(ctx, freq, p.pipeline, nil)
}

// ResourceGroupExportResultPoller provides polling facilities until the operation reaches a terminal state.
type ResourceGroupExportResultPoller interface {
	azcore.Poller
	// FinalResponse performs a final GET to the service and returns the final response
	// for the polling operation. If there is an error performing the final GET then an error is returned.
	// If the final GET succeeded then the final ResourceGroupExportResultResponse will be returned.
	FinalResponse(ctx context.Context) (ResourceGroupExportResultResponse, error)
}

type resourceGroupExportResultPoller struct {
	pipeline azcore.Pipeline
	pt       armcore.Poller
}

func (p *resourceGroupExportResultPoller) Done() bool {
	return p.pt.Done()
}

func (p *resourceGroupExportResultPoller) Poll(ctx context.Context) (*http.Response, error) {
	return p.pt.Poll(ctx, p.pipeline)
}

func (p *resourceGroupExportResultPoller) FinalResponse(ctx context.Context) (ResourceGroupExportResultResponse, error) {
	respType := ResourceGroupExportResultResponse{ResourceGroupExportResult: &ResourceGroupExportResult{}}
	resp, err := p.pt.FinalResponse(ctx, p.pipeline, respType.ResourceGroupExportResult)
	if err != nil {
		return ResourceGroupExportResultResponse{}, err
	}
	respType.RawResponse = resp
	return respType, nil
}

func (p *resourceGroupExportResultPoller) ResumeToken() (string, error) {
	return p.pt.ResumeToken()
}

func (p *resourceGroupExportResultPoller) pollUntilDone(ctx context.Context, freq time.Duration) (ResourceGroupExportResultResponse, error) {
	respType := ResourceGroupExportResultResponse{ResourceGroupExportResult: &ResourceGroupExportResult{}}
	resp, err := p.pt.PollUntilDone(ctx, freq, p.pipeline, respType.ResourceGroupExportResult)
	if err != nil {
		return ResourceGroupExportResultResponse{}, err
	}
	respType.RawResponse = resp
	return respType, nil
}

// WhatIfOperationResultPoller provides polling facilities until the operation reaches a terminal state.
type WhatIfOperationResultPoller interface {
	azcore.Poller
	// FinalResponse performs a final GET to the service and returns the final response
	// for the polling operation. If there is an error performing the final GET then an error is returned.
	// If the final GET succeeded then the final WhatIfOperationResultResponse will be returned.
	FinalResponse(ctx context.Context) (WhatIfOperationResultResponse, error)
}

type whatIfOperationResultPoller struct {
	pipeline azcore.Pipeline
	pt       armcore.Poller
}

func (p *whatIfOperationResultPoller) Done() bool {
	return p.pt.Done()
}

func (p *whatIfOperationResultPoller) Poll(ctx context.Context) (*http.Response, error) {
	return p.pt.Poll(ctx, p.pipeline)
}

func (p *whatIfOperationResultPoller) FinalResponse(ctx context.Context) (WhatIfOperationResultResponse, error) {
	respType := WhatIfOperationResultResponse{WhatIfOperationResult: &WhatIfOperationResult{}}
	resp, err := p.pt.FinalResponse(ctx, p.pipeline, respType.WhatIfOperationResult)
	if err != nil {
		return WhatIfOperationResultResponse{}, err
	}
	respType.RawResponse = resp
	return respType, nil
}

func (p *whatIfOperationResultPoller) ResumeToken() (string, error) {
	return p.pt.ResumeToken()
}

func (p *whatIfOperationResultPoller) pollUntilDone(ctx context.Context, freq time.Duration) (WhatIfOperationResultResponse, error) {
	respType := WhatIfOperationResultResponse{WhatIfOperationResult: &WhatIfOperationResult{}}
	resp, err := p.pt.PollUntilDone(ctx, freq, p.pipeline, respType.WhatIfOperationResult)
	if err != nil {
		return WhatIfOperationResultResponse{}, err
	}
	respType.RawResponse = resp
	return respType, nil
}
