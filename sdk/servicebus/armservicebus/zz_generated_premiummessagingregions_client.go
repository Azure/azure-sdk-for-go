// +build go1.13

// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

package armservicebus

import (
	"context"
	"errors"
	"fmt"
	"github.com/Azure/azure-sdk-for-go/sdk/armcore"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore"
	"net/http"
	"net/url"
	"strings"
)

// PremiumMessagingRegionsClient contains the methods for the PremiumMessagingRegions group.
// Don't use this type directly, use NewPremiumMessagingRegionsClient() instead.
type PremiumMessagingRegionsClient struct {
	con            *armcore.Connection
	subscriptionID string
}

// NewPremiumMessagingRegionsClient creates a new instance of PremiumMessagingRegionsClient with the specified values.
func NewPremiumMessagingRegionsClient(con *armcore.Connection, subscriptionID string) *PremiumMessagingRegionsClient {
	return &PremiumMessagingRegionsClient{con: con, subscriptionID: subscriptionID}
}

// List - Gets the available premium messaging regions for servicebus
// If the operation fails it returns the *ErrorResponse error type.
func (client *PremiumMessagingRegionsClient) List(options *PremiumMessagingRegionsListOptions) PremiumMessagingRegionsListPager {
	return &premiumMessagingRegionsListPager{
		client: client,
		requester: func(ctx context.Context) (*azcore.Request, error) {
			return client.listCreateRequest(ctx, options)
		},
		advancer: func(ctx context.Context, resp PremiumMessagingRegionsListResponse) (*azcore.Request, error) {
			return azcore.NewRequest(ctx, http.MethodGet, *resp.PremiumMessagingRegionsListResult.NextLink)
		},
	}
}

// listCreateRequest creates the List request.
func (client *PremiumMessagingRegionsClient) listCreateRequest(ctx context.Context, options *PremiumMessagingRegionsListOptions) (*azcore.Request, error) {
	urlPath := "/subscriptions/{subscriptionId}/providers/Microsoft.ServiceBus/premiumMessagingRegions"
	if client.subscriptionID == "" {
		return nil, errors.New("parameter client.subscriptionID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{subscriptionId}", url.PathEscape(client.subscriptionID))
	req, err := azcore.NewRequest(ctx, http.MethodGet, azcore.JoinPaths(client.con.Endpoint(), urlPath))
	if err != nil {
		return nil, err
	}
	req.Telemetry(telemetryInfo)
	reqQP := req.URL.Query()
	reqQP.Set("api-version", "2018-01-01-preview")
	req.URL.RawQuery = reqQP.Encode()
	req.Header.Set("Accept", "application/json")
	return req, nil
}

// listHandleResponse handles the List response.
func (client *PremiumMessagingRegionsClient) listHandleResponse(resp *azcore.Response) (PremiumMessagingRegionsListResponse, error) {
	result := PremiumMessagingRegionsListResponse{RawResponse: resp.Response}
	if err := resp.UnmarshalAsJSON(&result.PremiumMessagingRegionsListResult); err != nil {
		return PremiumMessagingRegionsListResponse{}, err
	}
	return result, nil
}

// listHandleError handles the List error response.
func (client *PremiumMessagingRegionsClient) listHandleError(resp *azcore.Response) error {
	body, err := resp.Payload()
	if err != nil {
		return azcore.NewResponseError(err, resp.Response)
	}
	errType := ErrorResponse{raw: string(body)}
	if err := resp.UnmarshalAsJSON(&errType); err != nil {
		return azcore.NewResponseError(fmt.Errorf("%s\n%s", string(body), err), resp.Response)
	}
	return azcore.NewResponseError(&errType, resp.Response)
}
