// +build go1.13

// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

package azblob

import (
	"fmt"

	"github.com/Azure/azure-sdk-for-go/sdk/azcore"
)

const scope = "https://storage.azure.com/.default"
const telemetryInfo = "azsdk-go-generated/<version>"

// connectionOptions contains configuration settings for the connection's pipeline.
type connectionOptions struct {
	// HTTPClient sets the transport for making HTTP requests.
	HTTPClient azcore.Transport
	// Retry configures the built-in retry policy behavior.
	Retry azcore.RetryOptions
	// Telemetry configures the built-in telemetry policy behavior.
	Telemetry azcore.TelemetryOptions
}

// defaultConnectionOptions creates a connectionOptions type initialized with default values.
func defaultConnectionOptions() connectionOptions {
	return connectionOptions{
		Retry:     azcore.DefaultRetryOptions(),
		Telemetry: azcore.DefaultTelemetryOptions(),
	}
}

func (c *connectionOptions) telemetryOptions() *azcore.TelemetryOptions {
	to := c.Telemetry
	if to.Value == "" {
		to.Value = telemetryInfo
	} else {
		to.Value = fmt.Sprintf("%s %s", telemetryInfo, to.Value)
	}
	return &to
}

type connection struct {
	u string
	p azcore.Pipeline
}

// newConnection creates an instance of the connection type with the specified endpoint.
func newConnection(endpoint string, cred azcore.Credential, options *connectionOptions) *connection {
	if options == nil {
		o := defaultConnectionOptions()
		options = &o
	}
	p := azcore.NewPipeline(options.HTTPClient,
		azcore.NewTelemetryPolicy(options.telemetryOptions()),
		azcore.NewRetryPolicy(&options.Retry),
		cred.AuthenticationPolicy(azcore.AuthenticationPolicyOptions{Options: azcore.TokenRequestOptions{Scopes: []string{scope}}}),
		azcore.NewLogPolicy(nil))
	return newConnectionWithPipeline(endpoint, p)
}

// newConnectionWithPipeline creates an instance of the connection type with the specified endpoint and pipeline.
func newConnectionWithPipeline(endpoint string, p azcore.Pipeline) *connection {
	return &connection{u: endpoint, p: p}
}

// Endpoint returns the connection's endpoint.
func (c *connection) Endpoint() string {
	return c.u
}

// Pipeline returns the connection's pipeline.
func (c *connection) Pipeline() azcore.Pipeline {
	return c.p
}
