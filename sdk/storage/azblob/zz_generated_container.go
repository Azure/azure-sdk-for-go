// +build go1.13

// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

package azblob

import (
	"context"
	"encoding/xml"
	"fmt"
	"net/http"
	"strconv"
	"strings"
	"time"

	"github.com/Azure/azure-sdk-for-go/sdk/azcore"
)

type containerClient struct {
	con *connection
}

// Pipeline returns the pipeline associated with this client.
func (client containerClient) Pipeline() azcore.Pipeline {
	return client.con.Pipeline()
}

// AcquireLease - [Update] establishes and manages a lock on a container for delete operations. The lock duration can be 15 to 60 seconds, or can be infinite
func (client containerClient) AcquireLease(ctx context.Context, containerAcquireLeaseOptions *ContainerAcquireLeaseOptions, modifiedAccessConditions *ModifiedAccessConditions) (ContainerAcquireLeaseResponse, error) {
	req, err := client.acquireLeaseCreateRequest(ctx, containerAcquireLeaseOptions, modifiedAccessConditions)
	if err != nil {
		return ContainerAcquireLeaseResponse{}, err
	}
	resp, err := client.Pipeline().Do(req)
	if err != nil {
		return ContainerAcquireLeaseResponse{}, err
	}
	if !resp.HasStatusCode(http.StatusCreated) {
		return ContainerAcquireLeaseResponse{}, client.acquireLeaseHandleError(resp)
	}
	result, err := client.acquireLeaseHandleResponse(resp)
	if err != nil {
		return ContainerAcquireLeaseResponse{}, err
	}
	return result, nil
}

// acquireLeaseCreateRequest creates the AcquireLease request.
func (client containerClient) acquireLeaseCreateRequest(ctx context.Context, containerAcquireLeaseOptions *ContainerAcquireLeaseOptions, modifiedAccessConditions *ModifiedAccessConditions) (*azcore.Request, error) {
	req, err := azcore.NewRequest(ctx, http.MethodPut, client.con.Endpoint())
	if err != nil {
		return nil, err
	}
	req.Telemetry(telemetryInfo)
	query := req.URL.Query()
	query.Set("comp", "lease")
	query.Set("restype", "container")
	if containerAcquireLeaseOptions != nil && containerAcquireLeaseOptions.Timeout != nil {
		query.Set("timeout", strconv.FormatInt(int64(*containerAcquireLeaseOptions.Timeout), 10))
	}
	req.URL.RawQuery = query.Encode()
	req.Header.Set("x-ms-lease-action", "acquire")
	if containerAcquireLeaseOptions != nil && containerAcquireLeaseOptions.Duration != nil {
		req.Header.Set("x-ms-lease-duration", strconv.FormatInt(int64(*containerAcquireLeaseOptions.Duration), 10))
	}
	if containerAcquireLeaseOptions != nil && containerAcquireLeaseOptions.ProposedLeaseId != nil {
		req.Header.Set("x-ms-proposed-lease-id", *containerAcquireLeaseOptions.ProposedLeaseId)
	}
	if modifiedAccessConditions != nil && modifiedAccessConditions.IfModifiedSince != nil {
		req.Header.Set("If-Modified-Since", modifiedAccessConditions.IfModifiedSince.Format(time.RFC1123))
	}
	if modifiedAccessConditions != nil && modifiedAccessConditions.IfUnmodifiedSince != nil {
		req.Header.Set("If-Unmodified-Since", modifiedAccessConditions.IfUnmodifiedSince.Format(time.RFC1123))
	}
	req.Header.Set("x-ms-version", "2019-12-12")
	if containerAcquireLeaseOptions != nil && containerAcquireLeaseOptions.RequestId != nil {
		req.Header.Set("x-ms-client-request-id", *containerAcquireLeaseOptions.RequestId)
	}
	req.Header.Set("Accept", "application/xml")
	return req, nil
}

// acquireLeaseHandleResponse handles the AcquireLease response.
func (client containerClient) acquireLeaseHandleResponse(resp *azcore.Response) (ContainerAcquireLeaseResponse, error) {
	result := ContainerAcquireLeaseResponse{RawResponse: resp.Response}
	if val := resp.Header.Get("ETag"); val != "" {
		result.ETag = &val
	}
	if val := resp.Header.Get("Last-Modified"); val != "" {
		lastModified, err := time.Parse(time.RFC1123, val)
		if err != nil {
			return ContainerAcquireLeaseResponse{}, err
		}
		result.LastModified = &lastModified
	}
	if val := resp.Header.Get("x-ms-lease-id"); val != "" {
		result.LeaseID = &val
	}
	if val := resp.Header.Get("x-ms-client-request-id"); val != "" {
		result.ClientRequestID = &val
	}
	if val := resp.Header.Get("x-ms-request-id"); val != "" {
		result.RequestID = &val
	}
	if val := resp.Header.Get("x-ms-version"); val != "" {
		result.Version = &val
	}
	if val := resp.Header.Get("Date"); val != "" {
		date, err := time.Parse(time.RFC1123, val)
		if err != nil {
			return ContainerAcquireLeaseResponse{}, err
		}
		result.Date = &date
	}
	return result, nil
}

// acquireLeaseHandleError handles the AcquireLease error response.
func (client containerClient) acquireLeaseHandleError(resp *azcore.Response) error {
	var err StorageError
	if err := resp.UnmarshalAsXML(&err); err != nil {
		return err
	}
	return azcore.NewResponseError(&err, resp.Response)
}

// BreakLease - [Update] establishes and manages a lock on a container for delete operations. The lock duration can be 15 to 60 seconds, or can be infinite
func (client containerClient) BreakLease(ctx context.Context, containerBreakLeaseOptions *ContainerBreakLeaseOptions, modifiedAccessConditions *ModifiedAccessConditions) (ContainerBreakLeaseResponse, error) {
	req, err := client.breakLeaseCreateRequest(ctx, containerBreakLeaseOptions, modifiedAccessConditions)
	if err != nil {
		return ContainerBreakLeaseResponse{}, err
	}
	resp, err := client.Pipeline().Do(req)
	if err != nil {
		return ContainerBreakLeaseResponse{}, err
	}
	if !resp.HasStatusCode(http.StatusAccepted) {
		return ContainerBreakLeaseResponse{}, client.breakLeaseHandleError(resp)
	}
	result, err := client.breakLeaseHandleResponse(resp)
	if err != nil {
		return ContainerBreakLeaseResponse{}, err
	}
	return result, nil
}

// breakLeaseCreateRequest creates the BreakLease request.
func (client containerClient) breakLeaseCreateRequest(ctx context.Context, containerBreakLeaseOptions *ContainerBreakLeaseOptions, modifiedAccessConditions *ModifiedAccessConditions) (*azcore.Request, error) {
	req, err := azcore.NewRequest(ctx, http.MethodPut, client.con.Endpoint())
	if err != nil {
		return nil, err
	}
	req.Telemetry(telemetryInfo)
	query := req.URL.Query()
	query.Set("comp", "lease")
	query.Set("restype", "container")
	if containerBreakLeaseOptions != nil && containerBreakLeaseOptions.Timeout != nil {
		query.Set("timeout", strconv.FormatInt(int64(*containerBreakLeaseOptions.Timeout), 10))
	}
	req.URL.RawQuery = query.Encode()
	req.Header.Set("x-ms-lease-action", "break")
	if containerBreakLeaseOptions != nil && containerBreakLeaseOptions.BreakPeriod != nil {
		req.Header.Set("x-ms-lease-break-period", strconv.FormatInt(int64(*containerBreakLeaseOptions.BreakPeriod), 10))
	}
	if modifiedAccessConditions != nil && modifiedAccessConditions.IfModifiedSince != nil {
		req.Header.Set("If-Modified-Since", modifiedAccessConditions.IfModifiedSince.Format(time.RFC1123))
	}
	if modifiedAccessConditions != nil && modifiedAccessConditions.IfUnmodifiedSince != nil {
		req.Header.Set("If-Unmodified-Since", modifiedAccessConditions.IfUnmodifiedSince.Format(time.RFC1123))
	}
	req.Header.Set("x-ms-version", "2019-12-12")
	if containerBreakLeaseOptions != nil && containerBreakLeaseOptions.RequestId != nil {
		req.Header.Set("x-ms-client-request-id", *containerBreakLeaseOptions.RequestId)
	}
	req.Header.Set("Accept", "application/xml")
	return req, nil
}

// breakLeaseHandleResponse handles the BreakLease response.
func (client containerClient) breakLeaseHandleResponse(resp *azcore.Response) (ContainerBreakLeaseResponse, error) {
	result := ContainerBreakLeaseResponse{RawResponse: resp.Response}
	if val := resp.Header.Get("ETag"); val != "" {
		result.ETag = &val
	}
	if val := resp.Header.Get("Last-Modified"); val != "" {
		lastModified, err := time.Parse(time.RFC1123, val)
		if err != nil {
			return ContainerBreakLeaseResponse{}, err
		}
		result.LastModified = &lastModified
	}
	if val := resp.Header.Get("x-ms-lease-time"); val != "" {
		leaseTime32, err := strconv.ParseInt(val, 10, 32)
		leaseTime := int32(leaseTime32)
		if err != nil {
			return ContainerBreakLeaseResponse{}, err
		}
		result.LeaseTime = &leaseTime
	}
	if val := resp.Header.Get("x-ms-client-request-id"); val != "" {
		result.ClientRequestID = &val
	}
	if val := resp.Header.Get("x-ms-request-id"); val != "" {
		result.RequestID = &val
	}
	if val := resp.Header.Get("x-ms-version"); val != "" {
		result.Version = &val
	}
	if val := resp.Header.Get("Date"); val != "" {
		date, err := time.Parse(time.RFC1123, val)
		if err != nil {
			return ContainerBreakLeaseResponse{}, err
		}
		result.Date = &date
	}
	return result, nil
}

// breakLeaseHandleError handles the BreakLease error response.
func (client containerClient) breakLeaseHandleError(resp *azcore.Response) error {
	var err StorageError
	if err := resp.UnmarshalAsXML(&err); err != nil {
		return err
	}
	return azcore.NewResponseError(&err, resp.Response)
}

// ChangeLease - [Update] establishes and manages a lock on a container for delete operations. The lock duration can be 15 to 60 seconds, or can be infinite
func (client containerClient) ChangeLease(ctx context.Context, leaseId string, proposedLeaseId string, containerChangeLeaseOptions *ContainerChangeLeaseOptions, modifiedAccessConditions *ModifiedAccessConditions) (ContainerChangeLeaseResponse, error) {
	req, err := client.changeLeaseCreateRequest(ctx, leaseId, proposedLeaseId, containerChangeLeaseOptions, modifiedAccessConditions)
	if err != nil {
		return ContainerChangeLeaseResponse{}, err
	}
	resp, err := client.Pipeline().Do(req)
	if err != nil {
		return ContainerChangeLeaseResponse{}, err
	}
	if !resp.HasStatusCode(http.StatusOK) {
		return ContainerChangeLeaseResponse{}, client.changeLeaseHandleError(resp)
	}
	result, err := client.changeLeaseHandleResponse(resp)
	if err != nil {
		return ContainerChangeLeaseResponse{}, err
	}
	return result, nil
}

// changeLeaseCreateRequest creates the ChangeLease request.
func (client containerClient) changeLeaseCreateRequest(ctx context.Context, leaseId string, proposedLeaseId string, containerChangeLeaseOptions *ContainerChangeLeaseOptions, modifiedAccessConditions *ModifiedAccessConditions) (*azcore.Request, error) {
	req, err := azcore.NewRequest(ctx, http.MethodPut, client.con.Endpoint())
	if err != nil {
		return nil, err
	}
	req.Telemetry(telemetryInfo)
	query := req.URL.Query()
	query.Set("comp", "lease")
	query.Set("restype", "container")
	if containerChangeLeaseOptions != nil && containerChangeLeaseOptions.Timeout != nil {
		query.Set("timeout", strconv.FormatInt(int64(*containerChangeLeaseOptions.Timeout), 10))
	}
	req.URL.RawQuery = query.Encode()
	req.Header.Set("x-ms-lease-action", "change")
	req.Header.Set("x-ms-lease-id", leaseId)
	req.Header.Set("x-ms-proposed-lease-id", proposedLeaseId)
	if modifiedAccessConditions != nil && modifiedAccessConditions.IfModifiedSince != nil {
		req.Header.Set("If-Modified-Since", modifiedAccessConditions.IfModifiedSince.Format(time.RFC1123))
	}
	if modifiedAccessConditions != nil && modifiedAccessConditions.IfUnmodifiedSince != nil {
		req.Header.Set("If-Unmodified-Since", modifiedAccessConditions.IfUnmodifiedSince.Format(time.RFC1123))
	}
	req.Header.Set("x-ms-version", "2019-12-12")
	if containerChangeLeaseOptions != nil && containerChangeLeaseOptions.RequestId != nil {
		req.Header.Set("x-ms-client-request-id", *containerChangeLeaseOptions.RequestId)
	}
	req.Header.Set("Accept", "application/xml")
	return req, nil
}

// changeLeaseHandleResponse handles the ChangeLease response.
func (client containerClient) changeLeaseHandleResponse(resp *azcore.Response) (ContainerChangeLeaseResponse, error) {
	result := ContainerChangeLeaseResponse{RawResponse: resp.Response}
	if val := resp.Header.Get("ETag"); val != "" {
		result.ETag = &val
	}
	if val := resp.Header.Get("Last-Modified"); val != "" {
		lastModified, err := time.Parse(time.RFC1123, val)
		if err != nil {
			return ContainerChangeLeaseResponse{}, err
		}
		result.LastModified = &lastModified
	}
	if val := resp.Header.Get("x-ms-lease-id"); val != "" {
		result.LeaseID = &val
	}
	if val := resp.Header.Get("x-ms-client-request-id"); val != "" {
		result.ClientRequestID = &val
	}
	if val := resp.Header.Get("x-ms-request-id"); val != "" {
		result.RequestID = &val
	}
	if val := resp.Header.Get("x-ms-version"); val != "" {
		result.Version = &val
	}
	if val := resp.Header.Get("Date"); val != "" {
		date, err := time.Parse(time.RFC1123, val)
		if err != nil {
			return ContainerChangeLeaseResponse{}, err
		}
		result.Date = &date
	}
	return result, nil
}

// changeLeaseHandleError handles the ChangeLease error response.
func (client containerClient) changeLeaseHandleError(resp *azcore.Response) error {
	var err StorageError
	if err := resp.UnmarshalAsXML(&err); err != nil {
		return err
	}
	return azcore.NewResponseError(&err, resp.Response)
}

// Create - creates a new container under the specified account. If the container with the same name already exists, the operation fails
func (client containerClient) Create(ctx context.Context, containerCreateOptions *ContainerCreateOptions, containerCpkScopeInfo *ContainerCpkScopeInfo) (ContainerCreateResponse, error) {
	req, err := client.createCreateRequest(ctx, containerCreateOptions, containerCpkScopeInfo)
	if err != nil {
		return ContainerCreateResponse{}, err
	}
	resp, err := client.Pipeline().Do(req)
	if err != nil {
		return ContainerCreateResponse{}, err
	}
	if !resp.HasStatusCode(http.StatusCreated) {
		return ContainerCreateResponse{}, client.createHandleError(resp)
	}
	result, err := client.createHandleResponse(resp)
	if err != nil {
		return ContainerCreateResponse{}, err
	}
	return result, nil
}

// createCreateRequest creates the Create request.
func (client containerClient) createCreateRequest(ctx context.Context, containerCreateOptions *ContainerCreateOptions, containerCpkScopeInfo *ContainerCpkScopeInfo) (*azcore.Request, error) {
	req, err := azcore.NewRequest(ctx, http.MethodPut, client.con.Endpoint())
	if err != nil {
		return nil, err
	}
	req.Telemetry(telemetryInfo)
	query := req.URL.Query()
	query.Set("restype", "container")
	if containerCreateOptions != nil && containerCreateOptions.Timeout != nil {
		query.Set("timeout", strconv.FormatInt(int64(*containerCreateOptions.Timeout), 10))
	}
	req.URL.RawQuery = query.Encode()
	if containerCreateOptions != nil && containerCreateOptions.Metadata != nil {
		for k, v := range *containerCreateOptions.Metadata {
			req.Header.Set("x-ms-meta-"+k, v)
		}
	}
	if containerCreateOptions != nil && containerCreateOptions.Access != nil {
		req.Header.Set("x-ms-blob-public-access", string(*containerCreateOptions.Access))
	}
	req.Header.Set("x-ms-version", "2019-12-12")
	if containerCreateOptions != nil && containerCreateOptions.RequestId != nil {
		req.Header.Set("x-ms-client-request-id", *containerCreateOptions.RequestId)
	}
	if containerCpkScopeInfo != nil && containerCpkScopeInfo.DefaultEncryptionScope != nil {
		req.Header.Set("x-ms-default-encryption-scope", *containerCpkScopeInfo.DefaultEncryptionScope)
	}
	if containerCpkScopeInfo != nil && containerCpkScopeInfo.PreventEncryptionScopeOverride != nil {
		req.Header.Set("x-ms-deny-encryption-scope-override", strconv.FormatBool(*containerCpkScopeInfo.PreventEncryptionScopeOverride))
	}
	req.Header.Set("Accept", "application/xml")
	return req, nil
}

// createHandleResponse handles the Create response.
func (client containerClient) createHandleResponse(resp *azcore.Response) (ContainerCreateResponse, error) {
	result := ContainerCreateResponse{RawResponse: resp.Response}
	if val := resp.Header.Get("ETag"); val != "" {
		result.ETag = &val
	}
	if val := resp.Header.Get("Last-Modified"); val != "" {
		lastModified, err := time.Parse(time.RFC1123, val)
		if err != nil {
			return ContainerCreateResponse{}, err
		}
		result.LastModified = &lastModified
	}
	if val := resp.Header.Get("x-ms-client-request-id"); val != "" {
		result.ClientRequestID = &val
	}
	if val := resp.Header.Get("x-ms-request-id"); val != "" {
		result.RequestID = &val
	}
	if val := resp.Header.Get("x-ms-version"); val != "" {
		result.Version = &val
	}
	if val := resp.Header.Get("Date"); val != "" {
		date, err := time.Parse(time.RFC1123, val)
		if err != nil {
			return ContainerCreateResponse{}, err
		}
		result.Date = &date
	}
	return result, nil
}

// createHandleError handles the Create error response.
func (client containerClient) createHandleError(resp *azcore.Response) error {
	var err StorageError
	if err := resp.UnmarshalAsXML(&err); err != nil {
		return err
	}
	return azcore.NewResponseError(&err, resp.Response)
}

// Delete - operation marks the specified container for deletion. The container and any blobs contained within it are later deleted during garbage collection
func (client containerClient) Delete(ctx context.Context, containerDeleteOptions *ContainerDeleteOptions, leaseAccessConditions *LeaseAccessConditions, modifiedAccessConditions *ModifiedAccessConditions) (ContainerDeleteResponse, error) {
	req, err := client.deleteCreateRequest(ctx, containerDeleteOptions, leaseAccessConditions, modifiedAccessConditions)
	if err != nil {
		return ContainerDeleteResponse{}, err
	}
	resp, err := client.Pipeline().Do(req)
	if err != nil {
		return ContainerDeleteResponse{}, err
	}
	if !resp.HasStatusCode(http.StatusAccepted) {
		return ContainerDeleteResponse{}, client.deleteHandleError(resp)
	}
	result, err := client.deleteHandleResponse(resp)
	if err != nil {
		return ContainerDeleteResponse{}, err
	}
	return result, nil
}

// deleteCreateRequest creates the Delete request.
func (client containerClient) deleteCreateRequest(ctx context.Context, containerDeleteOptions *ContainerDeleteOptions, leaseAccessConditions *LeaseAccessConditions, modifiedAccessConditions *ModifiedAccessConditions) (*azcore.Request, error) {
	req, err := azcore.NewRequest(ctx, http.MethodDelete, client.con.Endpoint())
	if err != nil {
		return nil, err
	}
	req.Telemetry(telemetryInfo)
	query := req.URL.Query()
	query.Set("restype", "container")
	if containerDeleteOptions != nil && containerDeleteOptions.Timeout != nil {
		query.Set("timeout", strconv.FormatInt(int64(*containerDeleteOptions.Timeout), 10))
	}
	req.URL.RawQuery = query.Encode()
	if leaseAccessConditions != nil && leaseAccessConditions.LeaseId != nil {
		req.Header.Set("x-ms-lease-id", *leaseAccessConditions.LeaseId)
	}
	if modifiedAccessConditions != nil && modifiedAccessConditions.IfModifiedSince != nil {
		req.Header.Set("If-Modified-Since", modifiedAccessConditions.IfModifiedSince.Format(time.RFC1123))
	}
	if modifiedAccessConditions != nil && modifiedAccessConditions.IfUnmodifiedSince != nil {
		req.Header.Set("If-Unmodified-Since", modifiedAccessConditions.IfUnmodifiedSince.Format(time.RFC1123))
	}
	req.Header.Set("x-ms-version", "2019-12-12")
	if containerDeleteOptions != nil && containerDeleteOptions.RequestId != nil {
		req.Header.Set("x-ms-client-request-id", *containerDeleteOptions.RequestId)
	}
	req.Header.Set("Accept", "application/xml")
	return req, nil
}

// deleteHandleResponse handles the Delete response.
func (client containerClient) deleteHandleResponse(resp *azcore.Response) (ContainerDeleteResponse, error) {
	result := ContainerDeleteResponse{RawResponse: resp.Response}
	if val := resp.Header.Get("x-ms-client-request-id"); val != "" {
		result.ClientRequestID = &val
	}
	if val := resp.Header.Get("x-ms-request-id"); val != "" {
		result.RequestID = &val
	}
	if val := resp.Header.Get("x-ms-version"); val != "" {
		result.Version = &val
	}
	if val := resp.Header.Get("Date"); val != "" {
		date, err := time.Parse(time.RFC1123, val)
		if err != nil {
			return ContainerDeleteResponse{}, err
		}
		result.Date = &date
	}
	return result, nil
}

// deleteHandleError handles the Delete error response.
func (client containerClient) deleteHandleError(resp *azcore.Response) error {
	var err StorageError
	if err := resp.UnmarshalAsXML(&err); err != nil {
		return err
	}
	return azcore.NewResponseError(&err, resp.Response)
}

// GetAccessPolicy - gets the permissions for the specified container. The permissions indicate whether container data may be accessed publicly.
func (client containerClient) GetAccessPolicy(ctx context.Context, containerGetAccessPolicyOptions *ContainerGetAccessPolicyOptions, leaseAccessConditions *LeaseAccessConditions) (SignedIDentifierArrayResponse, error) {
	req, err := client.getAccessPolicyCreateRequest(ctx, containerGetAccessPolicyOptions, leaseAccessConditions)
	if err != nil {
		return SignedIDentifierArrayResponse{}, err
	}
	resp, err := client.Pipeline().Do(req)
	if err != nil {
		return SignedIDentifierArrayResponse{}, err
	}
	if !resp.HasStatusCode(http.StatusOK) {
		return SignedIDentifierArrayResponse{}, client.getAccessPolicyHandleError(resp)
	}
	result, err := client.getAccessPolicyHandleResponse(resp)
	if err != nil {
		return SignedIDentifierArrayResponse{}, err
	}
	return result, nil
}

// getAccessPolicyCreateRequest creates the GetAccessPolicy request.
func (client containerClient) getAccessPolicyCreateRequest(ctx context.Context, containerGetAccessPolicyOptions *ContainerGetAccessPolicyOptions, leaseAccessConditions *LeaseAccessConditions) (*azcore.Request, error) {
	req, err := azcore.NewRequest(ctx, http.MethodGet, client.con.Endpoint())
	if err != nil {
		return nil, err
	}
	req.Telemetry(telemetryInfo)
	query := req.URL.Query()
	query.Set("restype", "container")
	query.Set("comp", "acl")
	if containerGetAccessPolicyOptions != nil && containerGetAccessPolicyOptions.Timeout != nil {
		query.Set("timeout", strconv.FormatInt(int64(*containerGetAccessPolicyOptions.Timeout), 10))
	}
	req.URL.RawQuery = query.Encode()
	if leaseAccessConditions != nil && leaseAccessConditions.LeaseId != nil {
		req.Header.Set("x-ms-lease-id", *leaseAccessConditions.LeaseId)
	}
	req.Header.Set("x-ms-version", "2019-12-12")
	if containerGetAccessPolicyOptions != nil && containerGetAccessPolicyOptions.RequestId != nil {
		req.Header.Set("x-ms-client-request-id", *containerGetAccessPolicyOptions.RequestId)
	}
	req.Header.Set("Accept", "application/xml")
	return req, nil
}

// getAccessPolicyHandleResponse handles the GetAccessPolicy response.
func (client containerClient) getAccessPolicyHandleResponse(resp *azcore.Response) (SignedIDentifierArrayResponse, error) {
	result := SignedIDentifierArrayResponse{RawResponse: resp.Response}
	if val := resp.Header.Get("x-ms-blob-public-access"); val != "" {
		result.BlobPublicAccess = (*PublicAccessType)(&val)
	}
	if val := resp.Header.Get("ETag"); val != "" {
		result.ETag = &val
	}
	if val := resp.Header.Get("Last-Modified"); val != "" {
		lastModified, err := time.Parse(time.RFC1123, val)
		if err != nil {
			return SignedIDentifierArrayResponse{}, err
		}
		result.LastModified = &lastModified
	}
	if val := resp.Header.Get("x-ms-client-request-id"); val != "" {
		result.ClientRequestID = &val
	}
	if val := resp.Header.Get("x-ms-request-id"); val != "" {
		result.RequestID = &val
	}
	if val := resp.Header.Get("x-ms-version"); val != "" {
		result.Version = &val
	}
	if val := resp.Header.Get("Date"); val != "" {
		date, err := time.Parse(time.RFC1123, val)
		if err != nil {
			return SignedIDentifierArrayResponse{}, err
		}
		result.Date = &date
	}
	err := resp.UnmarshalAsXML(&result)
	return result, err
}

// getAccessPolicyHandleError handles the GetAccessPolicy error response.
func (client containerClient) getAccessPolicyHandleError(resp *azcore.Response) error {
	var err StorageError
	if err := resp.UnmarshalAsXML(&err); err != nil {
		return err
	}
	return azcore.NewResponseError(&err, resp.Response)
}

// GetAccountInfo - Returns the sku name and account kind
func (client containerClient) GetAccountInfo(ctx context.Context, options *ContainerGetAccountInfoOptions) (ContainerGetAccountInfoResponse, error) {
	req, err := client.getAccountInfoCreateRequest(ctx, options)
	if err != nil {
		return ContainerGetAccountInfoResponse{}, err
	}
	resp, err := client.Pipeline().Do(req)
	if err != nil {
		return ContainerGetAccountInfoResponse{}, err
	}
	if !resp.HasStatusCode(http.StatusOK) {
		return ContainerGetAccountInfoResponse{}, client.getAccountInfoHandleError(resp)
	}
	result, err := client.getAccountInfoHandleResponse(resp)
	if err != nil {
		return ContainerGetAccountInfoResponse{}, err
	}
	return result, nil
}

// getAccountInfoCreateRequest creates the GetAccountInfo request.
func (client containerClient) getAccountInfoCreateRequest(ctx context.Context, options *ContainerGetAccountInfoOptions) (*azcore.Request, error) {
	req, err := azcore.NewRequest(ctx, http.MethodGet, client.con.Endpoint())
	if err != nil {
		return nil, err
	}
	req.Telemetry(telemetryInfo)
	query := req.URL.Query()
	query.Set("restype", "account")
	query.Set("comp", "properties")
	req.URL.RawQuery = query.Encode()
	req.Header.Set("x-ms-version", "2019-12-12")
	req.Header.Set("Accept", "application/xml")
	return req, nil
}

// getAccountInfoHandleResponse handles the GetAccountInfo response.
func (client containerClient) getAccountInfoHandleResponse(resp *azcore.Response) (ContainerGetAccountInfoResponse, error) {
	result := ContainerGetAccountInfoResponse{RawResponse: resp.Response}
	if val := resp.Header.Get("x-ms-client-request-id"); val != "" {
		result.ClientRequestID = &val
	}
	if val := resp.Header.Get("x-ms-request-id"); val != "" {
		result.RequestID = &val
	}
	if val := resp.Header.Get("x-ms-version"); val != "" {
		result.Version = &val
	}
	if val := resp.Header.Get("Date"); val != "" {
		date, err := time.Parse(time.RFC1123, val)
		if err != nil {
			return ContainerGetAccountInfoResponse{}, err
		}
		result.Date = &date
	}
	if val := resp.Header.Get("x-ms-sku-name"); val != "" {
		result.SKUName = (*SKUName)(&val)
	}
	if val := resp.Header.Get("x-ms-account-kind"); val != "" {
		result.AccountKind = (*AccountKind)(&val)
	}
	return result, nil
}

// getAccountInfoHandleError handles the GetAccountInfo error response.
func (client containerClient) getAccountInfoHandleError(resp *azcore.Response) error {
	var err StorageError
	if err := resp.UnmarshalAsXML(&err); err != nil {
		return err
	}
	return azcore.NewResponseError(&err, resp.Response)
}

// GetProperties - returns all user-defined metadata and system properties for the specified container. The data returned does not include the container's
// list of blobs
func (client containerClient) GetProperties(ctx context.Context, containerGetPropertiesOptions *ContainerGetPropertiesOptions, leaseAccessConditions *LeaseAccessConditions) (ContainerGetPropertiesResponse, error) {
	req, err := client.getPropertiesCreateRequest(ctx, containerGetPropertiesOptions, leaseAccessConditions)
	if err != nil {
		return ContainerGetPropertiesResponse{}, err
	}
	resp, err := client.Pipeline().Do(req)
	if err != nil {
		return ContainerGetPropertiesResponse{}, err
	}
	if !resp.HasStatusCode(http.StatusOK) {
		return ContainerGetPropertiesResponse{}, client.getPropertiesHandleError(resp)
	}
	result, err := client.getPropertiesHandleResponse(resp)
	if err != nil {
		return ContainerGetPropertiesResponse{}, err
	}
	return result, nil
}

// getPropertiesCreateRequest creates the GetProperties request.
func (client containerClient) getPropertiesCreateRequest(ctx context.Context, containerGetPropertiesOptions *ContainerGetPropertiesOptions, leaseAccessConditions *LeaseAccessConditions) (*azcore.Request, error) {
	req, err := azcore.NewRequest(ctx, http.MethodGet, client.con.Endpoint())
	if err != nil {
		return nil, err
	}
	req.Telemetry(telemetryInfo)
	query := req.URL.Query()
	query.Set("restype", "container")
	if containerGetPropertiesOptions != nil && containerGetPropertiesOptions.Timeout != nil {
		query.Set("timeout", strconv.FormatInt(int64(*containerGetPropertiesOptions.Timeout), 10))
	}
	req.URL.RawQuery = query.Encode()
	if leaseAccessConditions != nil && leaseAccessConditions.LeaseId != nil {
		req.Header.Set("x-ms-lease-id", *leaseAccessConditions.LeaseId)
	}
	req.Header.Set("x-ms-version", "2019-12-12")
	if containerGetPropertiesOptions != nil && containerGetPropertiesOptions.RequestId != nil {
		req.Header.Set("x-ms-client-request-id", *containerGetPropertiesOptions.RequestId)
	}
	req.Header.Set("Accept", "application/xml")
	return req, nil
}

// getPropertiesHandleResponse handles the GetProperties response.
func (client containerClient) getPropertiesHandleResponse(resp *azcore.Response) (ContainerGetPropertiesResponse, error) {
	result := ContainerGetPropertiesResponse{RawResponse: resp.Response}
	for hh := range resp.Header {
		if strings.HasPrefix(hh, "x-ms-meta-") {
			if result.Metadata == nil {
				result.Metadata = &map[string]string{}
			}
			(*result.Metadata)[hh[len("x-ms-meta-"):]] = resp.Header.Get(hh)
		}
	}
	if val := resp.Header.Get("ETag"); val != "" {
		result.ETag = &val
	}
	if val := resp.Header.Get("Last-Modified"); val != "" {
		lastModified, err := time.Parse(time.RFC1123, val)
		if err != nil {
			return ContainerGetPropertiesResponse{}, err
		}
		result.LastModified = &lastModified
	}
	if val := resp.Header.Get("x-ms-lease-duration"); val != "" {
		result.LeaseDuration = (*LeaseDurationType)(&val)
	}
	if val := resp.Header.Get("x-ms-lease-state"); val != "" {
		result.LeaseState = (*LeaseStateType)(&val)
	}
	if val := resp.Header.Get("x-ms-lease-status"); val != "" {
		result.LeaseStatus = (*LeaseStatusType)(&val)
	}
	if val := resp.Header.Get("x-ms-client-request-id"); val != "" {
		result.ClientRequestID = &val
	}
	if val := resp.Header.Get("x-ms-request-id"); val != "" {
		result.RequestID = &val
	}
	if val := resp.Header.Get("x-ms-version"); val != "" {
		result.Version = &val
	}
	if val := resp.Header.Get("Date"); val != "" {
		date, err := time.Parse(time.RFC1123, val)
		if err != nil {
			return ContainerGetPropertiesResponse{}, err
		}
		result.Date = &date
	}
	if val := resp.Header.Get("x-ms-blob-public-access"); val != "" {
		result.BlobPublicAccess = (*PublicAccessType)(&val)
	}
	if val := resp.Header.Get("x-ms-has-immutability-policy"); val != "" {
		hasImmutabilityPolicy, err := strconv.ParseBool(val)
		if err != nil {
			return ContainerGetPropertiesResponse{}, err
		}
		result.HasImmutabilityPolicy = &hasImmutabilityPolicy
	}
	if val := resp.Header.Get("x-ms-has-legal-hold"); val != "" {
		hasLegalHold, err := strconv.ParseBool(val)
		if err != nil {
			return ContainerGetPropertiesResponse{}, err
		}
		result.HasLegalHold = &hasLegalHold
	}
	if val := resp.Header.Get("x-ms-default-encryption-scope"); val != "" {
		result.DefaultEncryptionScope = &val
	}
	if val := resp.Header.Get("x-ms-deny-encryption-scope-override"); val != "" {
		denyEncryptionScopeOverride, err := strconv.ParseBool(val)
		if err != nil {
			return ContainerGetPropertiesResponse{}, err
		}
		result.DenyEncryptionScopeOverride = &denyEncryptionScopeOverride
	}
	return result, nil
}

// getPropertiesHandleError handles the GetProperties error response.
func (client containerClient) getPropertiesHandleError(resp *azcore.Response) error {
	var err StorageError
	if err := resp.UnmarshalAsXML(&err); err != nil {
		return err
	}
	return azcore.NewResponseError(&err, resp.Response)
}

// ListBlobFlatSegment - [Update] The List Blobs operation returns a list of the blobs under the specified container
func (client containerClient) ListBlobFlatSegment(options *ContainerListBlobFlatSegmentOptions) ListBlobsFlatSegmentResponsePager {
	return &listBlobsFlatSegmentResponsePager{
		pipeline: client.con.Pipeline(),
		requester: func(ctx context.Context) (*azcore.Request, error) {
			return client.listBlobFlatSegmentCreateRequest(ctx, options)
		},
		responder: client.listBlobFlatSegmentHandleResponse,
		errorer:   client.listBlobFlatSegmentHandleError,
		advancer: func(ctx context.Context, resp ListBlobsFlatSegmentResponseResponse) (*azcore.Request, error) {
			return azcore.NewRequest(ctx, http.MethodGet, *resp.EnumerationResults.NextMarker)
		},
		statusCodes: []int{http.StatusOK},
	}
}

// listBlobFlatSegmentCreateRequest creates the ListBlobFlatSegment request.
func (client containerClient) listBlobFlatSegmentCreateRequest(ctx context.Context, options *ContainerListBlobFlatSegmentOptions) (*azcore.Request, error) {
	req, err := azcore.NewRequest(ctx, http.MethodGet, client.con.Endpoint())
	if err != nil {
		return nil, err
	}
	req.Telemetry(telemetryInfo)
	query := req.URL.Query()
	query.Set("restype", "container")
	query.Set("comp", "list")
	if options != nil && options.Prefix != nil {
		query.Set("prefix", *options.Prefix)
	}
	if options != nil && options.Marker != nil {
		query.Set("marker", *options.Marker)
	}
	if options != nil && options.Maxresults != nil {
		query.Set("maxresults", strconv.FormatInt(int64(*options.Maxresults), 10))
	}
	if options != nil && options.Include != nil {
		query.Set("include", strings.Join(strings.Fields(strings.Trim(fmt.Sprint(*options.Include), "[]")), ","))
	}
	if options != nil && options.Timeout != nil {
		query.Set("timeout", strconv.FormatInt(int64(*options.Timeout), 10))
	}
	req.URL.RawQuery = query.Encode()
	req.Header.Set("x-ms-version", "2019-12-12")
	if options != nil && options.RequestId != nil {
		req.Header.Set("x-ms-client-request-id", *options.RequestId)
	}
	req.Header.Set("Accept", "application/xml")
	return req, nil
}

// listBlobFlatSegmentHandleResponse handles the ListBlobFlatSegment response.
func (client containerClient) listBlobFlatSegmentHandleResponse(resp *azcore.Response) (ListBlobsFlatSegmentResponseResponse, error) {
	result := ListBlobsFlatSegmentResponseResponse{RawResponse: resp.Response}
	if val := resp.Header.Get("Content-Type"); val != "" {
		result.ContentType = &val
	}
	if val := resp.Header.Get("x-ms-client-request-id"); val != "" {
		result.ClientRequestID = &val
	}
	if val := resp.Header.Get("x-ms-request-id"); val != "" {
		result.RequestID = &val
	}
	if val := resp.Header.Get("x-ms-version"); val != "" {
		result.Version = &val
	}
	if val := resp.Header.Get("Date"); val != "" {
		date, err := time.Parse(time.RFC1123, val)
		if err != nil {
			return ListBlobsFlatSegmentResponseResponse{}, err
		}
		result.Date = &date
	}
	err := resp.UnmarshalAsXML(&result.EnumerationResults)
	return result, err
}

// listBlobFlatSegmentHandleError handles the ListBlobFlatSegment error response.
func (client containerClient) listBlobFlatSegmentHandleError(resp *azcore.Response) error {
	var err StorageError
	if err := resp.UnmarshalAsXML(&err); err != nil {
		return err
	}
	return azcore.NewResponseError(&err, resp.Response)
}

// ListBlobHierarchySegment - [Update] The List Blobs operation returns a list of the blobs under the specified container
func (client containerClient) ListBlobHierarchySegment(delimiter string, options *ContainerListBlobHierarchySegmentOptions) ListBlobsHierarchySegmentResponsePager {
	return &listBlobsHierarchySegmentResponsePager{
		pipeline: client.con.Pipeline(),
		requester: func(ctx context.Context) (*azcore.Request, error) {
			return client.listBlobHierarchySegmentCreateRequest(ctx, delimiter, options)
		},
		responder: client.listBlobHierarchySegmentHandleResponse,
		errorer:   client.listBlobHierarchySegmentHandleError,
		advancer: func(ctx context.Context, resp ListBlobsHierarchySegmentResponseResponse) (*azcore.Request, error) {
			return azcore.NewRequest(ctx, http.MethodGet, *resp.EnumerationResults.NextMarker)
		},
		statusCodes: []int{http.StatusOK},
	}
}

// listBlobHierarchySegmentCreateRequest creates the ListBlobHierarchySegment request.
func (client containerClient) listBlobHierarchySegmentCreateRequest(ctx context.Context, delimiter string, options *ContainerListBlobHierarchySegmentOptions) (*azcore.Request, error) {
	req, err := azcore.NewRequest(ctx, http.MethodGet, client.con.Endpoint())
	if err != nil {
		return nil, err
	}
	req.Telemetry(telemetryInfo)
	query := req.URL.Query()
	query.Set("restype", "container")
	query.Set("comp", "list")
	if options != nil && options.Prefix != nil {
		query.Set("prefix", *options.Prefix)
	}
	query.Set("delimiter", delimiter)
	if options != nil && options.Marker != nil {
		query.Set("marker", *options.Marker)
	}
	if options != nil && options.Maxresults != nil {
		query.Set("maxresults", strconv.FormatInt(int64(*options.Maxresults), 10))
	}
	if options != nil && options.Include != nil {
		query.Set("include", strings.Join(strings.Fields(strings.Trim(fmt.Sprint(*options.Include), "[]")), ","))
	}
	if options != nil && options.Timeout != nil {
		query.Set("timeout", strconv.FormatInt(int64(*options.Timeout), 10))
	}
	req.URL.RawQuery = query.Encode()
	req.Header.Set("x-ms-version", "2019-12-12")
	if options != nil && options.RequestId != nil {
		req.Header.Set("x-ms-client-request-id", *options.RequestId)
	}
	req.Header.Set("Accept", "application/xml")
	return req, nil
}

// listBlobHierarchySegmentHandleResponse handles the ListBlobHierarchySegment response.
func (client containerClient) listBlobHierarchySegmentHandleResponse(resp *azcore.Response) (ListBlobsHierarchySegmentResponseResponse, error) {
	result := ListBlobsHierarchySegmentResponseResponse{RawResponse: resp.Response}
	if val := resp.Header.Get("Content-Type"); val != "" {
		result.ContentType = &val
	}
	if val := resp.Header.Get("x-ms-client-request-id"); val != "" {
		result.ClientRequestID = &val
	}
	if val := resp.Header.Get("x-ms-request-id"); val != "" {
		result.RequestID = &val
	}
	if val := resp.Header.Get("x-ms-version"); val != "" {
		result.Version = &val
	}
	if val := resp.Header.Get("Date"); val != "" {
		date, err := time.Parse(time.RFC1123, val)
		if err != nil {
			return ListBlobsHierarchySegmentResponseResponse{}, err
		}
		result.Date = &date
	}
	err := resp.UnmarshalAsXML(&result.EnumerationResults)
	return result, err
}

// listBlobHierarchySegmentHandleError handles the ListBlobHierarchySegment error response.
func (client containerClient) listBlobHierarchySegmentHandleError(resp *azcore.Response) error {
	var err StorageError
	if err := resp.UnmarshalAsXML(&err); err != nil {
		return err
	}
	return azcore.NewResponseError(&err, resp.Response)
}

// ReleaseLease - [Update] establishes and manages a lock on a container for delete operations. The lock duration can be 15 to 60 seconds, or can be infinite
func (client containerClient) ReleaseLease(ctx context.Context, leaseId string, containerReleaseLeaseOptions *ContainerReleaseLeaseOptions, modifiedAccessConditions *ModifiedAccessConditions) (ContainerReleaseLeaseResponse, error) {
	req, err := client.releaseLeaseCreateRequest(ctx, leaseId, containerReleaseLeaseOptions, modifiedAccessConditions)
	if err != nil {
		return ContainerReleaseLeaseResponse{}, err
	}
	resp, err := client.Pipeline().Do(req)
	if err != nil {
		return ContainerReleaseLeaseResponse{}, err
	}
	if !resp.HasStatusCode(http.StatusOK) {
		return ContainerReleaseLeaseResponse{}, client.releaseLeaseHandleError(resp)
	}
	result, err := client.releaseLeaseHandleResponse(resp)
	if err != nil {
		return ContainerReleaseLeaseResponse{}, err
	}
	return result, nil
}

// releaseLeaseCreateRequest creates the ReleaseLease request.
func (client containerClient) releaseLeaseCreateRequest(ctx context.Context, leaseId string, containerReleaseLeaseOptions *ContainerReleaseLeaseOptions, modifiedAccessConditions *ModifiedAccessConditions) (*azcore.Request, error) {
	req, err := azcore.NewRequest(ctx, http.MethodPut, client.con.Endpoint())
	if err != nil {
		return nil, err
	}
	req.Telemetry(telemetryInfo)
	query := req.URL.Query()
	query.Set("comp", "lease")
	query.Set("restype", "container")
	if containerReleaseLeaseOptions != nil && containerReleaseLeaseOptions.Timeout != nil {
		query.Set("timeout", strconv.FormatInt(int64(*containerReleaseLeaseOptions.Timeout), 10))
	}
	req.URL.RawQuery = query.Encode()
	req.Header.Set("x-ms-lease-action", "release")
	req.Header.Set("x-ms-lease-id", leaseId)
	if modifiedAccessConditions != nil && modifiedAccessConditions.IfModifiedSince != nil {
		req.Header.Set("If-Modified-Since", modifiedAccessConditions.IfModifiedSince.Format(time.RFC1123))
	}
	if modifiedAccessConditions != nil && modifiedAccessConditions.IfUnmodifiedSince != nil {
		req.Header.Set("If-Unmodified-Since", modifiedAccessConditions.IfUnmodifiedSince.Format(time.RFC1123))
	}
	req.Header.Set("x-ms-version", "2019-12-12")
	if containerReleaseLeaseOptions != nil && containerReleaseLeaseOptions.RequestId != nil {
		req.Header.Set("x-ms-client-request-id", *containerReleaseLeaseOptions.RequestId)
	}
	req.Header.Set("Accept", "application/xml")
	return req, nil
}

// releaseLeaseHandleResponse handles the ReleaseLease response.
func (client containerClient) releaseLeaseHandleResponse(resp *azcore.Response) (ContainerReleaseLeaseResponse, error) {
	result := ContainerReleaseLeaseResponse{RawResponse: resp.Response}
	if val := resp.Header.Get("ETag"); val != "" {
		result.ETag = &val
	}
	if val := resp.Header.Get("Last-Modified"); val != "" {
		lastModified, err := time.Parse(time.RFC1123, val)
		if err != nil {
			return ContainerReleaseLeaseResponse{}, err
		}
		result.LastModified = &lastModified
	}
	if val := resp.Header.Get("x-ms-client-request-id"); val != "" {
		result.ClientRequestID = &val
	}
	if val := resp.Header.Get("x-ms-request-id"); val != "" {
		result.RequestID = &val
	}
	if val := resp.Header.Get("x-ms-version"); val != "" {
		result.Version = &val
	}
	if val := resp.Header.Get("Date"); val != "" {
		date, err := time.Parse(time.RFC1123, val)
		if err != nil {
			return ContainerReleaseLeaseResponse{}, err
		}
		result.Date = &date
	}
	return result, nil
}

// releaseLeaseHandleError handles the ReleaseLease error response.
func (client containerClient) releaseLeaseHandleError(resp *azcore.Response) error {
	var err StorageError
	if err := resp.UnmarshalAsXML(&err); err != nil {
		return err
	}
	return azcore.NewResponseError(&err, resp.Response)
}

// RenewLease - [Update] establishes and manages a lock on a container for delete operations. The lock duration can be 15 to 60 seconds, or can be infinite
func (client containerClient) RenewLease(ctx context.Context, leaseId string, containerRenewLeaseOptions *ContainerRenewLeaseOptions, modifiedAccessConditions *ModifiedAccessConditions) (ContainerRenewLeaseResponse, error) {
	req, err := client.renewLeaseCreateRequest(ctx, leaseId, containerRenewLeaseOptions, modifiedAccessConditions)
	if err != nil {
		return ContainerRenewLeaseResponse{}, err
	}
	resp, err := client.Pipeline().Do(req)
	if err != nil {
		return ContainerRenewLeaseResponse{}, err
	}
	if !resp.HasStatusCode(http.StatusOK) {
		return ContainerRenewLeaseResponse{}, client.renewLeaseHandleError(resp)
	}
	result, err := client.renewLeaseHandleResponse(resp)
	if err != nil {
		return ContainerRenewLeaseResponse{}, err
	}
	return result, nil
}

// renewLeaseCreateRequest creates the RenewLease request.
func (client containerClient) renewLeaseCreateRequest(ctx context.Context, leaseId string, containerRenewLeaseOptions *ContainerRenewLeaseOptions, modifiedAccessConditions *ModifiedAccessConditions) (*azcore.Request, error) {
	req, err := azcore.NewRequest(ctx, http.MethodPut, client.con.Endpoint())
	if err != nil {
		return nil, err
	}
	req.Telemetry(telemetryInfo)
	query := req.URL.Query()
	query.Set("comp", "lease")
	query.Set("restype", "container")
	if containerRenewLeaseOptions != nil && containerRenewLeaseOptions.Timeout != nil {
		query.Set("timeout", strconv.FormatInt(int64(*containerRenewLeaseOptions.Timeout), 10))
	}
	req.URL.RawQuery = query.Encode()
	req.Header.Set("x-ms-lease-action", "renew")
	req.Header.Set("x-ms-lease-id", leaseId)
	if modifiedAccessConditions != nil && modifiedAccessConditions.IfModifiedSince != nil {
		req.Header.Set("If-Modified-Since", modifiedAccessConditions.IfModifiedSince.Format(time.RFC1123))
	}
	if modifiedAccessConditions != nil && modifiedAccessConditions.IfUnmodifiedSince != nil {
		req.Header.Set("If-Unmodified-Since", modifiedAccessConditions.IfUnmodifiedSince.Format(time.RFC1123))
	}
	req.Header.Set("x-ms-version", "2019-12-12")
	if containerRenewLeaseOptions != nil && containerRenewLeaseOptions.RequestId != nil {
		req.Header.Set("x-ms-client-request-id", *containerRenewLeaseOptions.RequestId)
	}
	req.Header.Set("Accept", "application/xml")
	return req, nil
}

// renewLeaseHandleResponse handles the RenewLease response.
func (client containerClient) renewLeaseHandleResponse(resp *azcore.Response) (ContainerRenewLeaseResponse, error) {
	result := ContainerRenewLeaseResponse{RawResponse: resp.Response}
	if val := resp.Header.Get("ETag"); val != "" {
		result.ETag = &val
	}
	if val := resp.Header.Get("Last-Modified"); val != "" {
		lastModified, err := time.Parse(time.RFC1123, val)
		if err != nil {
			return ContainerRenewLeaseResponse{}, err
		}
		result.LastModified = &lastModified
	}
	if val := resp.Header.Get("x-ms-lease-id"); val != "" {
		result.LeaseID = &val
	}
	if val := resp.Header.Get("x-ms-client-request-id"); val != "" {
		result.ClientRequestID = &val
	}
	if val := resp.Header.Get("x-ms-request-id"); val != "" {
		result.RequestID = &val
	}
	if val := resp.Header.Get("x-ms-version"); val != "" {
		result.Version = &val
	}
	if val := resp.Header.Get("Date"); val != "" {
		date, err := time.Parse(time.RFC1123, val)
		if err != nil {
			return ContainerRenewLeaseResponse{}, err
		}
		result.Date = &date
	}
	return result, nil
}

// renewLeaseHandleError handles the RenewLease error response.
func (client containerClient) renewLeaseHandleError(resp *azcore.Response) error {
	var err StorageError
	if err := resp.UnmarshalAsXML(&err); err != nil {
		return err
	}
	return azcore.NewResponseError(&err, resp.Response)
}

// Restore - Restores a previously-deleted container.
func (client containerClient) Restore(ctx context.Context, options *ContainerRestoreOptions) (ContainerRestoreResponse, error) {
	req, err := client.restoreCreateRequest(ctx, options)
	if err != nil {
		return ContainerRestoreResponse{}, err
	}
	resp, err := client.Pipeline().Do(req)
	if err != nil {
		return ContainerRestoreResponse{}, err
	}
	if !resp.HasStatusCode(http.StatusCreated) {
		return ContainerRestoreResponse{}, client.restoreHandleError(resp)
	}
	result, err := client.restoreHandleResponse(resp)
	if err != nil {
		return ContainerRestoreResponse{}, err
	}
	return result, nil
}

// restoreCreateRequest creates the Restore request.
func (client containerClient) restoreCreateRequest(ctx context.Context, options *ContainerRestoreOptions) (*azcore.Request, error) {
	req, err := azcore.NewRequest(ctx, http.MethodPut, client.con.Endpoint())
	if err != nil {
		return nil, err
	}
	req.Telemetry(telemetryInfo)
	query := req.URL.Query()
	query.Set("restype", "container")
	query.Set("comp", "undelete")
	if options != nil && options.Timeout != nil {
		query.Set("timeout", strconv.FormatInt(int64(*options.Timeout), 10))
	}
	req.URL.RawQuery = query.Encode()
	req.Header.Set("x-ms-version", "2019-12-12")
	if options != nil && options.RequestId != nil {
		req.Header.Set("x-ms-client-request-id", *options.RequestId)
	}
	if options != nil && options.DeletedContainerName != nil {
		req.Header.Set("x-ms-deleted-container-name", *options.DeletedContainerName)
	}
	if options != nil && options.DeletedContainerVersion != nil {
		req.Header.Set("x-ms-deleted-container-version", *options.DeletedContainerVersion)
	}
	req.Header.Set("Accept", "application/xml")
	return req, nil
}

// restoreHandleResponse handles the Restore response.
func (client containerClient) restoreHandleResponse(resp *azcore.Response) (ContainerRestoreResponse, error) {
	result := ContainerRestoreResponse{RawResponse: resp.Response}
	if val := resp.Header.Get("x-ms-client-request-id"); val != "" {
		result.ClientRequestID = &val
	}
	if val := resp.Header.Get("x-ms-request-id"); val != "" {
		result.RequestID = &val
	}
	if val := resp.Header.Get("x-ms-version"); val != "" {
		result.Version = &val
	}
	if val := resp.Header.Get("Date"); val != "" {
		date, err := time.Parse(time.RFC1123, val)
		if err != nil {
			return ContainerRestoreResponse{}, err
		}
		result.Date = &date
	}
	return result, nil
}

// restoreHandleError handles the Restore error response.
func (client containerClient) restoreHandleError(resp *azcore.Response) error {
	var err StorageError
	if err := resp.UnmarshalAsXML(&err); err != nil {
		return err
	}
	return azcore.NewResponseError(&err, resp.Response)
}

// SetAccessPolicy - sets the permissions for the specified container. The permissions indicate whether blobs in a container may be accessed publicly.
func (client containerClient) SetAccessPolicy(ctx context.Context, containerSetAccessPolicyOptions *ContainerSetAccessPolicyOptions, leaseAccessConditions *LeaseAccessConditions, modifiedAccessConditions *ModifiedAccessConditions) (ContainerSetAccessPolicyResponse, error) {
	req, err := client.setAccessPolicyCreateRequest(ctx, containerSetAccessPolicyOptions, leaseAccessConditions, modifiedAccessConditions)
	if err != nil {
		return ContainerSetAccessPolicyResponse{}, err
	}
	resp, err := client.Pipeline().Do(req)
	if err != nil {
		return ContainerSetAccessPolicyResponse{}, err
	}
	if !resp.HasStatusCode(http.StatusOK) {
		return ContainerSetAccessPolicyResponse{}, client.setAccessPolicyHandleError(resp)
	}
	result, err := client.setAccessPolicyHandleResponse(resp)
	if err != nil {
		return ContainerSetAccessPolicyResponse{}, err
	}
	return result, nil
}

// setAccessPolicyCreateRequest creates the SetAccessPolicy request.
func (client containerClient) setAccessPolicyCreateRequest(ctx context.Context, containerSetAccessPolicyOptions *ContainerSetAccessPolicyOptions, leaseAccessConditions *LeaseAccessConditions, modifiedAccessConditions *ModifiedAccessConditions) (*azcore.Request, error) {
	req, err := azcore.NewRequest(ctx, http.MethodPut, client.con.Endpoint())
	if err != nil {
		return nil, err
	}
	req.Telemetry(telemetryInfo)
	query := req.URL.Query()
	query.Set("restype", "container")
	query.Set("comp", "acl")
	if containerSetAccessPolicyOptions != nil && containerSetAccessPolicyOptions.Timeout != nil {
		query.Set("timeout", strconv.FormatInt(int64(*containerSetAccessPolicyOptions.Timeout), 10))
	}
	req.URL.RawQuery = query.Encode()
	if leaseAccessConditions != nil && leaseAccessConditions.LeaseId != nil {
		req.Header.Set("x-ms-lease-id", *leaseAccessConditions.LeaseId)
	}
	if containerSetAccessPolicyOptions != nil && containerSetAccessPolicyOptions.Access != nil {
		req.Header.Set("x-ms-blob-public-access", string(*containerSetAccessPolicyOptions.Access))
	}
	if modifiedAccessConditions != nil && modifiedAccessConditions.IfModifiedSince != nil {
		req.Header.Set("If-Modified-Since", modifiedAccessConditions.IfModifiedSince.Format(time.RFC1123))
	}
	if modifiedAccessConditions != nil && modifiedAccessConditions.IfUnmodifiedSince != nil {
		req.Header.Set("If-Unmodified-Since", modifiedAccessConditions.IfUnmodifiedSince.Format(time.RFC1123))
	}
	req.Header.Set("x-ms-version", "2019-12-12")
	if containerSetAccessPolicyOptions != nil && containerSetAccessPolicyOptions.RequestId != nil {
		req.Header.Set("x-ms-client-request-id", *containerSetAccessPolicyOptions.RequestId)
	}
	req.Header.Set("Accept", "application/xml")
	type wrapper struct {
		XMLName      xml.Name            `xml:"SignedIdentifiers"`
		ContainerAcl *[]SignedIDentifier `xml:"SignedIdentifier"`
	}
	if containerSetAccessPolicyOptions != nil {
		return req, req.MarshalAsXML(wrapper{ContainerAcl: containerSetAccessPolicyOptions.ContainerAcl})
	}
	return req, nil
}

// setAccessPolicyHandleResponse handles the SetAccessPolicy response.
func (client containerClient) setAccessPolicyHandleResponse(resp *azcore.Response) (ContainerSetAccessPolicyResponse, error) {
	result := ContainerSetAccessPolicyResponse{RawResponse: resp.Response}
	if val := resp.Header.Get("ETag"); val != "" {
		result.ETag = &val
	}
	if val := resp.Header.Get("Last-Modified"); val != "" {
		lastModified, err := time.Parse(time.RFC1123, val)
		if err != nil {
			return ContainerSetAccessPolicyResponse{}, err
		}
		result.LastModified = &lastModified
	}
	if val := resp.Header.Get("x-ms-client-request-id"); val != "" {
		result.ClientRequestID = &val
	}
	if val := resp.Header.Get("x-ms-request-id"); val != "" {
		result.RequestID = &val
	}
	if val := resp.Header.Get("x-ms-version"); val != "" {
		result.Version = &val
	}
	if val := resp.Header.Get("Date"); val != "" {
		date, err := time.Parse(time.RFC1123, val)
		if err != nil {
			return ContainerSetAccessPolicyResponse{}, err
		}
		result.Date = &date
	}
	return result, nil
}

// setAccessPolicyHandleError handles the SetAccessPolicy error response.
func (client containerClient) setAccessPolicyHandleError(resp *azcore.Response) error {
	var err StorageError
	if err := resp.UnmarshalAsXML(&err); err != nil {
		return err
	}
	return azcore.NewResponseError(&err, resp.Response)
}

// SetMetadata - operation sets one or more user-defined name-value pairs for the specified container.
func (client containerClient) SetMetadata(ctx context.Context, containerSetMetadataOptions *ContainerSetMetadataOptions, leaseAccessConditions *LeaseAccessConditions, modifiedAccessConditions *ModifiedAccessConditions) (ContainerSetMetadataResponse, error) {
	req, err := client.setMetadataCreateRequest(ctx, containerSetMetadataOptions, leaseAccessConditions, modifiedAccessConditions)
	if err != nil {
		return ContainerSetMetadataResponse{}, err
	}
	resp, err := client.Pipeline().Do(req)
	if err != nil {
		return ContainerSetMetadataResponse{}, err
	}
	if !resp.HasStatusCode(http.StatusOK) {
		return ContainerSetMetadataResponse{}, client.setMetadataHandleError(resp)
	}
	result, err := client.setMetadataHandleResponse(resp)
	if err != nil {
		return ContainerSetMetadataResponse{}, err
	}
	return result, nil
}

// setMetadataCreateRequest creates the SetMetadata request.
func (client containerClient) setMetadataCreateRequest(ctx context.Context, containerSetMetadataOptions *ContainerSetMetadataOptions, leaseAccessConditions *LeaseAccessConditions, modifiedAccessConditions *ModifiedAccessConditions) (*azcore.Request, error) {
	req, err := azcore.NewRequest(ctx, http.MethodPut, client.con.Endpoint())
	if err != nil {
		return nil, err
	}
	req.Telemetry(telemetryInfo)
	query := req.URL.Query()
	query.Set("restype", "container")
	query.Set("comp", "metadata")
	if containerSetMetadataOptions != nil && containerSetMetadataOptions.Timeout != nil {
		query.Set("timeout", strconv.FormatInt(int64(*containerSetMetadataOptions.Timeout), 10))
	}
	req.URL.RawQuery = query.Encode()
	if leaseAccessConditions != nil && leaseAccessConditions.LeaseId != nil {
		req.Header.Set("x-ms-lease-id", *leaseAccessConditions.LeaseId)
	}
	if containerSetMetadataOptions != nil && containerSetMetadataOptions.Metadata != nil {
		for k, v := range *containerSetMetadataOptions.Metadata {
			req.Header.Set("x-ms-meta-"+k, v)
		}
	}
	if modifiedAccessConditions != nil && modifiedAccessConditions.IfModifiedSince != nil {
		req.Header.Set("If-Modified-Since", modifiedAccessConditions.IfModifiedSince.Format(time.RFC1123))
	}
	req.Header.Set("x-ms-version", "2019-12-12")
	if containerSetMetadataOptions != nil && containerSetMetadataOptions.RequestId != nil {
		req.Header.Set("x-ms-client-request-id", *containerSetMetadataOptions.RequestId)
	}
	req.Header.Set("Accept", "application/xml")
	return req, nil
}

// setMetadataHandleResponse handles the SetMetadata response.
func (client containerClient) setMetadataHandleResponse(resp *azcore.Response) (ContainerSetMetadataResponse, error) {
	result := ContainerSetMetadataResponse{RawResponse: resp.Response}
	if val := resp.Header.Get("ETag"); val != "" {
		result.ETag = &val
	}
	if val := resp.Header.Get("Last-Modified"); val != "" {
		lastModified, err := time.Parse(time.RFC1123, val)
		if err != nil {
			return ContainerSetMetadataResponse{}, err
		}
		result.LastModified = &lastModified
	}
	if val := resp.Header.Get("x-ms-client-request-id"); val != "" {
		result.ClientRequestID = &val
	}
	if val := resp.Header.Get("x-ms-request-id"); val != "" {
		result.RequestID = &val
	}
	if val := resp.Header.Get("x-ms-version"); val != "" {
		result.Version = &val
	}
	if val := resp.Header.Get("Date"); val != "" {
		date, err := time.Parse(time.RFC1123, val)
		if err != nil {
			return ContainerSetMetadataResponse{}, err
		}
		result.Date = &date
	}
	return result, nil
}

// setMetadataHandleError handles the SetMetadata error response.
func (client containerClient) setMetadataHandleError(resp *azcore.Response) error {
	var err StorageError
	if err := resp.UnmarshalAsXML(&err); err != nil {
		return err
	}
	return azcore.NewResponseError(&err, resp.Response)
}
