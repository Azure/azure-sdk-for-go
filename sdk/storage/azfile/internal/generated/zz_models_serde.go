//go:build go1.18
// +build go1.18

// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.
// DO NOT EDIT.

package generated

import (
	"encoding/json"
	"encoding/xml"
	"fmt"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore"
	"reflect"
	"time"
)

// MarshalXML implements the xml.Marshaller interface for type AccessPolicy.
func (a AccessPolicy) MarshalXML(enc *xml.Encoder, start xml.StartElement) error {
	type alias AccessPolicy
	aux := &struct {
		*alias
		Expiry *timeRFC3339 `xml:"Expiry"`
		Start  *timeRFC3339 `xml:"Start"`
	}{
		alias:  (*alias)(&a),
		Expiry: (*timeRFC3339)(a.Expiry),
		Start:  (*timeRFC3339)(a.Start),
	}
	return enc.EncodeElement(aux, start)
}

// UnmarshalXML implements the xml.Unmarshaller interface for type AccessPolicy.
func (a *AccessPolicy) UnmarshalXML(dec *xml.Decoder, start xml.StartElement) error {
	type alias AccessPolicy
	aux := &struct {
		*alias
		Expiry *timeRFC3339 `xml:"Expiry"`
		Start  *timeRFC3339 `xml:"Start"`
	}{
		alias: (*alias)(a),
	}
	if err := dec.DecodeElement(aux, &start); err != nil {
		return err
	}
	a.Expiry = (*time.Time)(aux.Expiry)
	a.Start = (*time.Time)(aux.Start)
	return nil
}

// MarshalXML implements the xml.Marshaller interface for type FileProperty.
func (f FileProperty) MarshalXML(enc *xml.Encoder, start xml.StartElement) error {
	type alias FileProperty
	aux := &struct {
		*alias
		ChangeTime     *timeRFC3339 `xml:"ChangeTime"`
		CreationTime   *timeRFC3339 `xml:"CreationTime"`
		LastAccessTime *timeRFC3339 `xml:"LastAccessTime"`
		LastModified   *timeRFC1123 `xml:"Last-Modified"`
		LastWriteTime  *timeRFC3339 `xml:"LastWriteTime"`
	}{
		alias:          (*alias)(&f),
		ChangeTime:     (*timeRFC3339)(f.ChangeTime),
		CreationTime:   (*timeRFC3339)(f.CreationTime),
		LastAccessTime: (*timeRFC3339)(f.LastAccessTime),
		LastModified:   (*timeRFC1123)(f.LastModified),
		LastWriteTime:  (*timeRFC3339)(f.LastWriteTime),
	}
	return enc.EncodeElement(aux, start)
}

// UnmarshalXML implements the xml.Unmarshaller interface for type FileProperty.
func (f *FileProperty) UnmarshalXML(dec *xml.Decoder, start xml.StartElement) error {
	type alias FileProperty
	aux := &struct {
		*alias
		ChangeTime     *timeRFC3339 `xml:"ChangeTime"`
		CreationTime   *timeRFC3339 `xml:"CreationTime"`
		LastAccessTime *timeRFC3339 `xml:"LastAccessTime"`
		LastModified   *timeRFC1123 `xml:"Last-Modified"`
		LastWriteTime  *timeRFC3339 `xml:"LastWriteTime"`
	}{
		alias: (*alias)(f),
	}
	if err := dec.DecodeElement(aux, &start); err != nil {
		return err
	}
	f.ChangeTime = (*time.Time)(aux.ChangeTime)
	f.CreationTime = (*time.Time)(aux.CreationTime)
	f.LastAccessTime = (*time.Time)(aux.LastAccessTime)
	f.LastModified = (*time.Time)(aux.LastModified)
	f.LastWriteTime = (*time.Time)(aux.LastWriteTime)
	return nil
}

// MarshalXML implements the xml.Marshaller interface for type FilesAndDirectoriesListSegment.
func (f FilesAndDirectoriesListSegment) MarshalXML(enc *xml.Encoder, start xml.StartElement) error {
	type alias FilesAndDirectoriesListSegment
	aux := &struct {
		*alias
		DirectoryItems *[]*DirectoryItem `xml:"Directory"`
		FileItems      *[]*FileItem      `xml:"File"`
	}{
		alias: (*alias)(&f),
	}
	if f.DirectoryItems != nil {
		aux.DirectoryItems = &f.DirectoryItems
	}
	if f.FileItems != nil {
		aux.FileItems = &f.FileItems
	}
	return enc.EncodeElement(aux, start)
}

// MarshalXML implements the xml.Marshaller interface for type HandleItem.
func (h HandleItem) MarshalXML(enc *xml.Encoder, start xml.StartElement) error {
	type alias HandleItem
	aux := &struct {
		*alias
		LastReconnectTime *timeRFC1123 `xml:"LastReconnectTime"`
		OpenTime          *timeRFC1123 `xml:"OpenTime"`
	}{
		alias:             (*alias)(&h),
		LastReconnectTime: (*timeRFC1123)(h.LastReconnectTime),
		OpenTime:          (*timeRFC1123)(h.OpenTime),
	}
	return enc.EncodeElement(aux, start)
}

// UnmarshalXML implements the xml.Unmarshaller interface for type HandleItem.
func (h *HandleItem) UnmarshalXML(dec *xml.Decoder, start xml.StartElement) error {
	type alias HandleItem
	aux := &struct {
		*alias
		LastReconnectTime *timeRFC1123 `xml:"LastReconnectTime"`
		OpenTime          *timeRFC1123 `xml:"OpenTime"`
	}{
		alias: (*alias)(h),
	}
	if err := dec.DecodeElement(aux, &start); err != nil {
		return err
	}
	h.LastReconnectTime = (*time.Time)(aux.LastReconnectTime)
	h.OpenTime = (*time.Time)(aux.OpenTime)
	return nil
}

// MarshalXML implements the xml.Marshaller interface for type ListHandlesResponse.
func (l ListHandlesResponse) MarshalXML(enc *xml.Encoder, start xml.StartElement) error {
	type alias ListHandlesResponse
	aux := &struct {
		*alias
		HandleList *[]*HandleItem `xml:"Entries>Handle"`
	}{
		alias: (*alias)(&l),
	}
	if l.HandleList != nil {
		aux.HandleList = &l.HandleList
	}
	return enc.EncodeElement(aux, start)
}

// MarshalXML implements the xml.Marshaller interface for type ListSharesResponse.
func (l ListSharesResponse) MarshalXML(enc *xml.Encoder, start xml.StartElement) error {
	type alias ListSharesResponse
	aux := &struct {
		*alias
		ShareItems *[]*ShareItemInternal `xml:"Shares>Share"`
	}{
		alias: (*alias)(&l),
	}
	if l.ShareItems != nil {
		aux.ShareItems = &l.ShareItems
	}
	return enc.EncodeElement(aux, start)
}

// MarshalXML implements the xml.Marshaller interface for type ShareFileRangeList.
func (s ShareFileRangeList) MarshalXML(enc *xml.Encoder, start xml.StartElement) error {
	type alias ShareFileRangeList
	aux := &struct {
		*alias
		ClearRanges *[]*ClearRange `xml:"ClearRange"`
		Ranges      *[]*FileRange  `xml:"Range"`
	}{
		alias: (*alias)(&s),
	}
	if s.ClearRanges != nil {
		aux.ClearRanges = &s.ClearRanges
	}
	if s.Ranges != nil {
		aux.Ranges = &s.Ranges
	}
	return enc.EncodeElement(aux, start)
}

// UnmarshalXML implements the xml.Unmarshaller interface for type ShareItemInternal.
func (s *ShareItemInternal) UnmarshalXML(dec *xml.Decoder, start xml.StartElement) error {
	type alias ShareItemInternal
	aux := &struct {
		*alias
		Metadata additionalProperties `xml:"Metadata"`
	}{
		alias: (*alias)(s),
	}
	if err := dec.DecodeElement(aux, &start); err != nil {
		return err
	}
	s.Metadata = (map[string]*string)(aux.Metadata)
	return nil
}

// MarshalJSON implements the json.Marshaller interface for type SharePermission.
func (s SharePermission) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]any)
	populate(objectMap, "permission", s.Permission)
	return json.Marshal(objectMap)
}

// UnmarshalJSON implements the json.Unmarshaller interface for type SharePermission.
func (s *SharePermission) UnmarshalJSON(data []byte) error {
	var rawMsg map[string]json.RawMessage
	if err := json.Unmarshal(data, &rawMsg); err != nil {
		return fmt.Errorf("unmarshalling type %T: %v", s, err)
	}
	for key, val := range rawMsg {
		var err error
		switch key {
		case "permission":
			err = unpopulate(val, "Permission", &s.Permission)
			delete(rawMsg, key)
		}
		if err != nil {
			return fmt.Errorf("unmarshalling type %T: %v", s, err)
		}
	}
	return nil
}

// MarshalXML implements the xml.Marshaller interface for type SharePropertiesInternal.
func (s SharePropertiesInternal) MarshalXML(enc *xml.Encoder, start xml.StartElement) error {
	type alias SharePropertiesInternal
	aux := &struct {
		*alias
		AccessTierChangeTime          *timeRFC1123 `xml:"AccessTierChangeTime"`
		DeletedTime                   *timeRFC1123 `xml:"DeletedTime"`
		LastModified                  *timeRFC1123 `xml:"Last-Modified"`
		NextAllowedQuotaDowngradeTime *timeRFC1123 `xml:"NextAllowedQuotaDowngradeTime"`
	}{
		alias:                         (*alias)(&s),
		AccessTierChangeTime:          (*timeRFC1123)(s.AccessTierChangeTime),
		DeletedTime:                   (*timeRFC1123)(s.DeletedTime),
		LastModified:                  (*timeRFC1123)(s.LastModified),
		NextAllowedQuotaDowngradeTime: (*timeRFC1123)(s.NextAllowedQuotaDowngradeTime),
	}
	return enc.EncodeElement(aux, start)
}

// UnmarshalXML implements the xml.Unmarshaller interface for type SharePropertiesInternal.
func (s *SharePropertiesInternal) UnmarshalXML(dec *xml.Decoder, start xml.StartElement) error {
	type alias SharePropertiesInternal
	aux := &struct {
		*alias
		AccessTierChangeTime          *timeRFC1123 `xml:"AccessTierChangeTime"`
		DeletedTime                   *timeRFC1123 `xml:"DeletedTime"`
		LastModified                  *timeRFC1123 `xml:"Last-Modified"`
		NextAllowedQuotaDowngradeTime *timeRFC1123 `xml:"NextAllowedQuotaDowngradeTime"`
	}{
		alias: (*alias)(s),
	}
	if err := dec.DecodeElement(aux, &start); err != nil {
		return err
	}
	s.AccessTierChangeTime = (*time.Time)(aux.AccessTierChangeTime)
	s.DeletedTime = (*time.Time)(aux.DeletedTime)
	s.LastModified = (*time.Time)(aux.LastModified)
	s.NextAllowedQuotaDowngradeTime = (*time.Time)(aux.NextAllowedQuotaDowngradeTime)
	return nil
}

// MarshalXML implements the xml.Marshaller interface for type ShareServiceProperties.
func (s ShareServiceProperties) MarshalXML(enc *xml.Encoder, start xml.StartElement) error {
	start.Name.Local = "StorageServiceProperties"
	type alias ShareServiceProperties
	aux := &struct {
		*alias
		Cors *[]*ShareCorsRule `xml:"Cors>CorsRule"`
	}{
		alias: (*alias)(&s),
	}
	if s.Cors != nil {
		aux.Cors = &s.Cors
	}
	return enc.EncodeElement(aux, start)
}

// MarshalJSON implements the json.Marshaller interface for type StorageError.
func (s StorageError) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]any)
	populate(objectMap, "Message", s.Message)
	return json.Marshal(objectMap)
}

// UnmarshalJSON implements the json.Unmarshaller interface for type StorageError.
func (s *StorageError) UnmarshalJSON(data []byte) error {
	var rawMsg map[string]json.RawMessage
	if err := json.Unmarshal(data, &rawMsg); err != nil {
		return fmt.Errorf("unmarshalling type %T: %v", s, err)
	}
	for key, val := range rawMsg {
		var err error
		switch key {
		case "Message":
			err = unpopulate(val, "Message", &s.Message)
			delete(rawMsg, key)
		}
		if err != nil {
			return fmt.Errorf("unmarshalling type %T: %v", s, err)
		}
	}
	return nil
}

func populate(m map[string]any, k string, v any) {
	if v == nil {
		return
	} else if azcore.IsNullValue(v) {
		m[k] = nil
	} else if !reflect.ValueOf(v).IsNil() {
		m[k] = v
	}
}

func unpopulate(data json.RawMessage, fn string, v any) error {
	if data == nil {
		return nil
	}
	if err := json.Unmarshal(data, v); err != nil {
		return fmt.Errorf("struct field %s: %v", fn, err)
	}
	return nil
}
