// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

package azblob

import (
	"encoding/xml"
	"fmt"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore"
	"net/http"
	"net/url"
	"time"
)

// An Access policy
type AccessPolicy struct {
	// the date-time the policy expires
	Expiry *time.Time `xml:"Expiry"`

	// the permissions for the acl policy
	Permission *string `xml:"Permission"`

	// the date-time the policy is active
	Start *time.Time `xml:"Start"`
}

func (a AccessPolicy) MarshalXML(e *xml.Encoder, start xml.StartElement) error {
	type alias AccessPolicy
	aux := &struct {
		*alias
		Expiry *timeRFC3339 `xml:"Expiry"`
		Start  *timeRFC3339 `xml:"Start"`
	}{
		alias:  (*alias)(&a),
		Expiry: (*timeRFC3339)(a.Expiry),
		Start:  (*timeRFC3339)(a.Start),
	}
	return e.EncodeElement(aux, start)
}

func (a *AccessPolicy) UnmarshalXML(d *xml.Decoder, start xml.StartElement) error {
	type alias AccessPolicy
	aux := &struct {
		*alias
		Expiry *timeRFC3339 `xml:"Expiry"`
		Start  *timeRFC3339 `xml:"Start"`
	}{
		alias: (*alias)(a),
	}
	if err := d.DecodeElement(aux, &start); err != nil {
		return err
	}
	a.Expiry = (*time.Time)(aux.Expiry)
	a.Start = (*time.Time)(aux.Start)
	return nil
}

// AppendBlobAppendBlockFromURLOptions contains the optional parameters for the AppendBlob.AppendBlockFromURL method.
type AppendBlobAppendBlockFromURLOptions struct {
	// Optional conditional header, used only for the Append Block operation. A number indicating the byte offset to compare.
	// Append Block will succeed only if the append position is equal to this number. If it is not, the request will fail with
	// the AppendPositionConditionNotMet error (HTTP status code 412 - Precondition Failed).
	AppendPosition *int64
	// Optional. Specifies the encryption key to use to encrypt the data provided in the request. If not specified, encryption
	// is performed with the root account encryption key. For more information, see Encryption at Rest for Azure Storage Services.
	EncryptionKey *string
	// The SHA-256 hash of the provided encryption key. Must be provided if the x-ms-encryption-key header is provided.
	EncryptionKeySha256 *string
	// Optional. Version 2019-07-07 and later. Specifies the name of the encryption scope to use to encrypt the data provided
	// in the request. If not specified, encryption is performed with the default account encryption scope. For more information,
	// see Encryption at Rest for Azure Storage Services.
	EncryptionScope *string
	// Specify an ETag value to operate only on blobs with a matching value.
	IfMatch *string
	// Specify this header value to operate only on a blob if it has been modified since the specified date/time.
	IfModifiedSince *time.Time
	// Specify an ETag value to operate only on blobs without a matching value.
	IfNoneMatch *string
	// Specify this header value to operate only on a blob if it has not been modified since the specified date/time.
	IfUnmodifiedSince *time.Time
	// If specified, the operation only succeeds if the resource's lease is active and matches this ID.
	LeaseId *string
	// Optional conditional header. The max length in bytes permitted for the append blob. If the Append Block operation would
	// cause the blob to exceed that limit or if the blob size is already greater than the value specified in this header, the
	// request will fail with MaxBlobSizeConditionNotMet error (HTTP status code 412 - Precondition Failed).
	MaxSize *int64
	// Provides a client-generated, opaque value with a 1 KB character limit that is recorded in the analytics logs when storage
	// analytics logging is enabled.
	RequestId *string
	// Specify the md5 calculated for the range of bytes that must be read from the copy source.
	SourceContentMd5 *[]byte
	// Specify the crc64 calculated for the range of bytes that must be read from the copy source.
	SourceContentcrc64 *[]byte
	// Specify an ETag value to operate only on blobs with a matching value.
	SourceIfMatch *string
	// Specify this header value to operate only on a blob if it has been modified since the specified date/time.
	SourceIfModifiedSince *time.Time
	// Specify an ETag value to operate only on blobs without a matching value.
	SourceIfNoneMatch *string
	// Specify this header value to operate only on a blob if it has not been modified since the specified date/time.
	SourceIfUnmodifiedSince *time.Time
	// Bytes of source data in the specified range.
	SourceRange *string
	// The timeout parameter is expressed in seconds. For more information, see <a href="https://docs.microsoft.com/en-us/rest/api/storageservices/fileservices/setting-timeouts-for-blob-service-operations">Setting
	// Timeouts for Blob Service Operations.</a>
	Timeout *int32
	// Specify the transactional md5 for the body, to be validated by the service.
	TransactionalContentMd5 *[]byte
}

// AppendBlobAppendBlockFromURLResponse contains the response from method AppendBlob.AppendBlockFromURL.
type AppendBlobAppendBlockFromURLResponse struct {
	// BlobAppendOffset contains the information returned from the x-ms-blob-append-offset header response.
	BlobAppendOffset *string

	// BlobCommittedBlockCount contains the information returned from the x-ms-blob-committed-block-count header response.
	BlobCommittedBlockCount *int32

	// ContentCrc64 contains the information returned from the x-ms-content-crc64 header response.
	ContentCrc64 *[]byte

	// ContentMd5 contains the information returned from the Content-MD5 header response.
	ContentMd5 *[]byte

	// Date contains the information returned from the Date header response.
	Date *time.Time

	// ETag contains the information returned from the ETag header response.
	ETag *string

	// EncryptionKeySha256 contains the information returned from the x-ms-encryption-key-sha256 header response.
	EncryptionKeySha256 *string

	// EncryptionScope contains the information returned from the x-ms-encryption-scope header response.
	EncryptionScope *string

	// LastModified contains the information returned from the Last-Modified header response.
	LastModified *time.Time

	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response

	// RequestId contains the information returned from the x-ms-request-id header response.
	RequestId *string

	// RequestServerEncrypted contains the information returned from the x-ms-request-server-encrypted header response.
	RequestServerEncrypted *bool

	// Version contains the information returned from the x-ms-version header response.
	Version *string
}

// AppendBlobAppendBlockOptions contains the optional parameters for the AppendBlob.AppendBlock method.
type AppendBlobAppendBlockOptions struct {
	// Optional conditional header, used only for the Append Block operation. A number indicating the byte offset to compare.
	// Append Block will succeed only if the append position is equal to this number. If it is not, the request will fail with
	// the AppendPositionConditionNotMet error (HTTP status code 412 - Precondition Failed).
	AppendPosition *int64
	// Initial data
	Body *azcore.ReadSeekCloser
	// Optional. Specifies the encryption key to use to encrypt the data provided in the request. If not specified, encryption
	// is performed with the root account encryption key. For more information, see Encryption at Rest for Azure Storage Services.
	EncryptionKey *string
	// The SHA-256 hash of the provided encryption key. Must be provided if the x-ms-encryption-key header is provided.
	EncryptionKeySha256 *string
	// Optional. Version 2019-07-07 and later. Specifies the name of the encryption scope to use to encrypt the data provided
	// in the request. If not specified, encryption is performed with the default account encryption scope. For more information,
	// see Encryption at Rest for Azure Storage Services.
	EncryptionScope *string
	// Specify an ETag value to operate only on blobs with a matching value.
	IfMatch *string
	// Specify this header value to operate only on a blob if it has been modified since the specified date/time.
	IfModifiedSince *time.Time
	// Specify an ETag value to operate only on blobs without a matching value.
	IfNoneMatch *string
	// Specify this header value to operate only on a blob if it has not been modified since the specified date/time.
	IfUnmodifiedSince *time.Time
	// If specified, the operation only succeeds if the resource's lease is active and matches this ID.
	LeaseId *string
	// Optional conditional header. The max length in bytes permitted for the append blob. If the Append Block operation would
	// cause the blob to exceed that limit or if the blob size is already greater than the value specified in this header, the
	// request will fail with MaxBlobSizeConditionNotMet error (HTTP status code 412 - Precondition Failed).
	MaxSize *int64
	// Provides a client-generated, opaque value with a 1 KB character limit that is recorded in the analytics logs when storage
	// analytics logging is enabled.
	RequestId *string
	// The timeout parameter is expressed in seconds. For more information, see <a href="https://docs.microsoft.com/en-us/rest/api/storageservices/fileservices/setting-timeouts-for-blob-service-operations">Setting
	// Timeouts for Blob Service Operations.</a>
	Timeout *int32
	// Specify the transactional crc64 for the body, to be validated by the service.
	TransactionalContentCrc64 *[]byte
	// Specify the transactional md5 for the body, to be validated by the service.
	TransactionalContentMd5 *[]byte
}

// AppendBlobAppendBlockResponse contains the response from method AppendBlob.AppendBlock.
type AppendBlobAppendBlockResponse struct {
	// BlobAppendOffset contains the information returned from the x-ms-blob-append-offset header response.
	BlobAppendOffset *string

	// BlobCommittedBlockCount contains the information returned from the x-ms-blob-committed-block-count header response.
	BlobCommittedBlockCount *int32

	// ClientRequestId contains the information returned from the x-ms-client-request-id header response.
	ClientRequestId *string

	// ContentCrc64 contains the information returned from the x-ms-content-crc64 header response.
	ContentCrc64 *[]byte

	// ContentMd5 contains the information returned from the Content-MD5 header response.
	ContentMd5 *[]byte

	// Date contains the information returned from the Date header response.
	Date *time.Time

	// ETag contains the information returned from the ETag header response.
	ETag *string

	// EncryptionKeySha256 contains the information returned from the x-ms-encryption-key-sha256 header response.
	EncryptionKeySha256 *string

	// EncryptionScope contains the information returned from the x-ms-encryption-scope header response.
	EncryptionScope *string

	// LastModified contains the information returned from the Last-Modified header response.
	LastModified *time.Time

	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response

	// RequestId contains the information returned from the x-ms-request-id header response.
	RequestId *string

	// RequestServerEncrypted contains the information returned from the x-ms-request-server-encrypted header response.
	RequestServerEncrypted *bool

	// Version contains the information returned from the x-ms-version header response.
	Version *string
}

// AppendBlobCreateOptions contains the optional parameters for the AppendBlob.Create method.
type AppendBlobCreateOptions struct {
	// Optional. Sets the blob's cache control. If specified, this property is stored with the blob and returned with a read request.
	BlobCacheControl *string
	// Optional. Sets the blob's Content-Disposition header.
	BlobContentDisposition *string
	// Optional. Sets the blob's content encoding. If specified, this property is stored with the blob and returned with a read
	// request.
	BlobContentEncoding *string
	// Optional. Set the blob's content language. If specified, this property is stored with the blob and returned with a read
	// request.
	BlobContentLanguage *string
	// Optional. An MD5 hash of the blob content. Note that this hash is not validated, as the hashes for the individual blocks
	// were validated when each was uploaded.
	BlobContentMd5 *[]byte
	// Optional. Sets the blob's content type. If specified, this property is stored with the blob and returned with a read request.
	BlobContentType *string
	// Optional. Specifies the encryption key to use to encrypt the data provided in the request. If not specified, encryption
	// is performed with the root account encryption key. For more information, see Encryption at Rest for Azure Storage Services.
	EncryptionKey *string
	// The SHA-256 hash of the provided encryption key. Must be provided if the x-ms-encryption-key header is provided.
	EncryptionKeySha256 *string
	// Optional. Version 2019-07-07 and later. Specifies the name of the encryption scope to use to encrypt the data provided
	// in the request. If not specified, encryption is performed with the default account encryption scope. For more information,
	// see Encryption at Rest for Azure Storage Services.
	EncryptionScope *string
	// Specify an ETag value to operate only on blobs with a matching value.
	IfMatch *string
	// Specify this header value to operate only on a blob if it has been modified since the specified date/time.
	IfModifiedSince *time.Time
	// Specify an ETag value to operate only on blobs without a matching value.
	IfNoneMatch *string
	// Specify this header value to operate only on a blob if it has not been modified since the specified date/time.
	IfUnmodifiedSince *time.Time
	// If specified, the operation only succeeds if the resource's lease is active and matches this ID.
	LeaseId *string
	// Optional. Specifies a user-defined name-value pair associated with the blob. If no name-value pairs are specified, the
	// operation will copy the metadata from the source blob or file to the destination blob. If one or more name-value pairs
	// are specified, the destination blob is created with the specified metadata, and metadata is not copied from the source
	// blob or file. Note that beginning with version 2009-09-19, metadata names must adhere to the naming rules for C# identifiers.
	// See Naming and Referencing Containers, Blobs, and Metadata for more information.
	Metadata *string
	// Provides a client-generated, opaque value with a 1 KB character limit that is recorded in the analytics logs when storage
	// analytics logging is enabled.
	RequestId *string
	// The timeout parameter is expressed in seconds. For more information, see <a href="https://docs.microsoft.com/en-us/rest/api/storageservices/fileservices/setting-timeouts-for-blob-service-operations">Setting
	// Timeouts for Blob Service Operations.</a>
	Timeout *int32
}

// AppendBlobCreateResponse contains the response from method AppendBlob.Create.
type AppendBlobCreateResponse struct {
	// ClientRequestId contains the information returned from the x-ms-client-request-id header response.
	ClientRequestId *string

	// ContentMd5 contains the information returned from the Content-MD5 header response.
	ContentMd5 *[]byte

	// Date contains the information returned from the Date header response.
	Date *time.Time

	// ETag contains the information returned from the ETag header response.
	ETag *string

	// EncryptionKeySha256 contains the information returned from the x-ms-encryption-key-sha256 header response.
	EncryptionKeySha256 *string

	// EncryptionScope contains the information returned from the x-ms-encryption-scope header response.
	EncryptionScope *string

	// LastModified contains the information returned from the Last-Modified header response.
	LastModified *time.Time

	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response

	// RequestId contains the information returned from the x-ms-request-id header response.
	RequestId *string

	// RequestServerEncrypted contains the information returned from the x-ms-request-server-encrypted header response.
	RequestServerEncrypted *bool

	// Version contains the information returned from the x-ms-version header response.
	Version *string
}

// BlobAbortCopyFromURLOptions contains the optional parameters for the Blob.AbortCopyFromURL method.
type BlobAbortCopyFromURLOptions struct {
	// If specified, the operation only succeeds if the resource's lease is active and matches this ID.
	LeaseId *string
	// Provides a client-generated, opaque value with a 1 KB character limit that is recorded in the analytics logs when storage
	// analytics logging is enabled.
	RequestId *string
	// The timeout parameter is expressed in seconds. For more information, see <a href="https://docs.microsoft.com/en-us/rest/api/storageservices/fileservices/setting-timeouts-for-blob-service-operations">Setting
	// Timeouts for Blob Service Operations.</a>
	Timeout *int32
}

// BlobAbortCopyFromURLResponse contains the response from method Blob.AbortCopyFromURL.
type BlobAbortCopyFromURLResponse struct {
	// ClientRequestId contains the information returned from the x-ms-client-request-id header response.
	ClientRequestId *string

	// Date contains the information returned from the Date header response.
	Date *time.Time

	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response

	// RequestId contains the information returned from the x-ms-request-id header response.
	RequestId *string

	// Version contains the information returned from the x-ms-version header response.
	Version *string
}

// BlobAcquireLeaseOptions contains the optional parameters for the Blob.AcquireLease method.
type BlobAcquireLeaseOptions struct {
	// Specifies the duration of the lease, in seconds, or negative one (-1) for a lease that never expires. A non-infinite lease
	// can be between 15 and 60 seconds. A lease duration cannot be changed using renew or change.
	Duration *int32
	// Specify an ETag value to operate only on blobs with a matching value.
	IfMatch *string
	// Specify this header value to operate only on a blob if it has been modified since the specified date/time.
	IfModifiedSince *time.Time
	// Specify an ETag value to operate only on blobs without a matching value.
	IfNoneMatch *string
	// Specify this header value to operate only on a blob if it has not been modified since the specified date/time.
	IfUnmodifiedSince *time.Time
	// Proposed lease ID, in a GUID string format. The Blob service returns 400 (Invalid request) if the proposed lease ID is
	// not in the correct format. See Guid Constructor (String) for a list of valid GUID string formats.
	ProposedLeaseId *string
	// Provides a client-generated, opaque value with a 1 KB character limit that is recorded in the analytics logs when storage
	// analytics logging is enabled.
	RequestId *string
	// The timeout parameter is expressed in seconds. For more information, see <a href="https://docs.microsoft.com/en-us/rest/api/storageservices/fileservices/setting-timeouts-for-blob-service-operations">Setting
	// Timeouts for Blob Service Operations.</a>
	Timeout *int32
}

// BlobAcquireLeaseResponse contains the response from method Blob.AcquireLease.
type BlobAcquireLeaseResponse struct {
	// ClientRequestId contains the information returned from the x-ms-client-request-id header response.
	ClientRequestId *string

	// Date contains the information returned from the Date header response.
	Date *time.Time

	// ETag contains the information returned from the ETag header response.
	ETag *string

	// LastModified contains the information returned from the Last-Modified header response.
	LastModified *time.Time

	// LeaseId contains the information returned from the x-ms-lease-id header response.
	LeaseId *string

	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response

	// RequestId contains the information returned from the x-ms-request-id header response.
	RequestId *string

	// Version contains the information returned from the x-ms-version header response.
	Version *string
}

// BlobBreakLeaseOptions contains the optional parameters for the Blob.BreakLease method.
type BlobBreakLeaseOptions struct {
	// For a break operation, proposed duration the lease should continue before it is broken, in seconds, between 0 and 60. This
	// break period is only used if it is shorter than the time remaining on the lease. If longer, the time remaining on the lease
	// is used. A new lease will not be available before the break period has expired, but the lease may be held for longer than
	// the break period. If this header does not appear with a break operation, a fixed-duration lease breaks after the remaining
	// lease period elapses, and an infinite lease breaks immediately.
	BreakPeriod *int32
	// Specify an ETag value to operate only on blobs with a matching value.
	IfMatch *string
	// Specify this header value to operate only on a blob if it has been modified since the specified date/time.
	IfModifiedSince *time.Time
	// Specify an ETag value to operate only on blobs without a matching value.
	IfNoneMatch *string
	// Specify this header value to operate only on a blob if it has not been modified since the specified date/time.
	IfUnmodifiedSince *time.Time
	// Provides a client-generated, opaque value with a 1 KB character limit that is recorded in the analytics logs when storage
	// analytics logging is enabled.
	RequestId *string
	// The timeout parameter is expressed in seconds. For more information, see <a href="https://docs.microsoft.com/en-us/rest/api/storageservices/fileservices/setting-timeouts-for-blob-service-operations">Setting
	// Timeouts for Blob Service Operations.</a>
	Timeout *int32
}

// BlobBreakLeaseResponse contains the response from method Blob.BreakLease.
type BlobBreakLeaseResponse struct {
	// ClientRequestId contains the information returned from the x-ms-client-request-id header response.
	ClientRequestId *string

	// Date contains the information returned from the Date header response.
	Date *time.Time

	// ETag contains the information returned from the ETag header response.
	ETag *string

	// LastModified contains the information returned from the Last-Modified header response.
	LastModified *time.Time

	// LeaseTime contains the information returned from the x-ms-lease-time header response.
	LeaseTime *int32

	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response

	// RequestId contains the information returned from the x-ms-request-id header response.
	RequestId *string

	// Version contains the information returned from the x-ms-version header response.
	Version *string
}

// BlobChangeLeaseOptions contains the optional parameters for the Blob.ChangeLease method.
type BlobChangeLeaseOptions struct {
	// Specify an ETag value to operate only on blobs with a matching value.
	IfMatch *string
	// Specify this header value to operate only on a blob if it has been modified since the specified date/time.
	IfModifiedSince *time.Time
	// Specify an ETag value to operate only on blobs without a matching value.
	IfNoneMatch *string
	// Specify this header value to operate only on a blob if it has not been modified since the specified date/time.
	IfUnmodifiedSince *time.Time
	// Provides a client-generated, opaque value with a 1 KB character limit that is recorded in the analytics logs when storage
	// analytics logging is enabled.
	RequestId *string
	// The timeout parameter is expressed in seconds. For more information, see <a href="https://docs.microsoft.com/en-us/rest/api/storageservices/fileservices/setting-timeouts-for-blob-service-operations">Setting
	// Timeouts for Blob Service Operations.</a>
	Timeout *int32
}

// BlobChangeLeaseResponse contains the response from method Blob.ChangeLease.
type BlobChangeLeaseResponse struct {
	// ClientRequestId contains the information returned from the x-ms-client-request-id header response.
	ClientRequestId *string

	// Date contains the information returned from the Date header response.
	Date *time.Time

	// ETag contains the information returned from the ETag header response.
	ETag *string

	// LastModified contains the information returned from the Last-Modified header response.
	LastModified *time.Time

	// LeaseId contains the information returned from the x-ms-lease-id header response.
	LeaseId *string

	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response

	// RequestId contains the information returned from the x-ms-request-id header response.
	RequestId *string

	// Version contains the information returned from the x-ms-version header response.
	Version *string
}

// BlobCopyFromURLOptions contains the optional parameters for the Blob.CopyFromURL method.
type BlobCopyFromURLOptions struct {
	// Specify an ETag value to operate only on blobs with a matching value.
	IfMatch *string
	// Specify this header value to operate only on a blob if it has been modified since the specified date/time.
	IfModifiedSince *time.Time
	// Specify an ETag value to operate only on blobs without a matching value.
	IfNoneMatch *string
	// Specify this header value to operate only on a blob if it has not been modified since the specified date/time.
	IfUnmodifiedSince *time.Time
	// If specified, the operation only succeeds if the resource's lease is active and matches this ID.
	LeaseId *string
	// Optional. Specifies a user-defined name-value pair associated with the blob. If no name-value pairs are specified, the
	// operation will copy the metadata from the source blob or file to the destination blob. If one or more name-value pairs
	// are specified, the destination blob is created with the specified metadata, and metadata is not copied from the source
	// blob or file. Note that beginning with version 2009-09-19, metadata names must adhere to the naming rules for C# identifiers.
	// See Naming and Referencing Containers, Blobs, and Metadata for more information.
	Metadata *string
	// Provides a client-generated, opaque value with a 1 KB character limit that is recorded in the analytics logs when storage
	// analytics logging is enabled.
	RequestId *string
	// Specify the md5 calculated for the range of bytes that must be read from the copy source.
	SourceContentMd5 *[]byte
	// Specify an ETag value to operate only on blobs with a matching value.
	SourceIfMatch *string
	// Specify this header value to operate only on a blob if it has been modified since the specified date/time.
	SourceIfModifiedSince *time.Time
	// Specify an ETag value to operate only on blobs without a matching value.
	SourceIfNoneMatch *string
	// Specify this header value to operate only on a blob if it has not been modified since the specified date/time.
	SourceIfUnmodifiedSince *time.Time
	// Optional. Indicates the tier to be set on the blob.
	Tier *AccessTier
	// The timeout parameter is expressed in seconds. For more information, see <a href="https://docs.microsoft.com/en-us/rest/api/storageservices/fileservices/setting-timeouts-for-blob-service-operations">Setting
	// Timeouts for Blob Service Operations.</a>
	Timeout *int32
}

// BlobCopyFromURLResponse contains the response from method Blob.CopyFromURL.
type BlobCopyFromURLResponse struct {
	// ClientRequestId contains the information returned from the x-ms-client-request-id header response.
	ClientRequestId *string

	// ContentCrc64 contains the information returned from the x-ms-content-crc64 header response.
	ContentCrc64 *[]byte

	// ContentMd5 contains the information returned from the Content-MD5 header response.
	ContentMd5 *[]byte

	// CopyId contains the information returned from the x-ms-copy-id header response.
	CopyId *string

	// CopyStatus contains the information returned from the x-ms-copy-status header response.
	CopyStatus *string

	// Date contains the information returned from the Date header response.
	Date *time.Time

	// ETag contains the information returned from the ETag header response.
	ETag *string

	// LastModified contains the information returned from the Last-Modified header response.
	LastModified *time.Time

	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response

	// RequestId contains the information returned from the x-ms-request-id header response.
	RequestId *string

	// Version contains the information returned from the x-ms-version header response.
	Version *string
}

// BlobCreateSnapshotOptions contains the optional parameters for the Blob.CreateSnapshot method.
type BlobCreateSnapshotOptions struct {
	// Optional. Specifies the encryption key to use to encrypt the data provided in the request. If not specified, encryption
	// is performed with the root account encryption key. For more information, see Encryption at Rest for Azure Storage Services.
	EncryptionKey *string
	// The SHA-256 hash of the provided encryption key. Must be provided if the x-ms-encryption-key header is provided.
	EncryptionKeySha256 *string
	// Optional. Version 2019-07-07 and later. Specifies the name of the encryption scope to use to encrypt the data provided
	// in the request. If not specified, encryption is performed with the default account encryption scope. For more information,
	// see Encryption at Rest for Azure Storage Services.
	EncryptionScope *string
	// Specify an ETag value to operate only on blobs with a matching value.
	IfMatch *string
	// Specify this header value to operate only on a blob if it has been modified since the specified date/time.
	IfModifiedSince *time.Time
	// Specify an ETag value to operate only on blobs without a matching value.
	IfNoneMatch *string
	// Specify this header value to operate only on a blob if it has not been modified since the specified date/time.
	IfUnmodifiedSince *time.Time
	// If specified, the operation only succeeds if the resource's lease is active and matches this ID.
	LeaseId *string
	// Optional. Specifies a user-defined name-value pair associated with the blob. If no name-value pairs are specified, the
	// operation will copy the metadata from the source blob or file to the destination blob. If one or more name-value pairs
	// are specified, the destination blob is created with the specified metadata, and metadata is not copied from the source
	// blob or file. Note that beginning with version 2009-09-19, metadata names must adhere to the naming rules for C# identifiers.
	// See Naming and Referencing Containers, Blobs, and Metadata for more information.
	Metadata *string
	// Provides a client-generated, opaque value with a 1 KB character limit that is recorded in the analytics logs when storage
	// analytics logging is enabled.
	RequestId *string
	// The timeout parameter is expressed in seconds. For more information, see <a href="https://docs.microsoft.com/en-us/rest/api/storageservices/fileservices/setting-timeouts-for-blob-service-operations">Setting
	// Timeouts for Blob Service Operations.</a>
	Timeout *int32
}

// BlobCreateSnapshotResponse contains the response from method Blob.CreateSnapshot.
type BlobCreateSnapshotResponse struct {
	// ClientRequestId contains the information returned from the x-ms-client-request-id header response.
	ClientRequestId *string

	// Date contains the information returned from the Date header response.
	Date *time.Time

	// ETag contains the information returned from the ETag header response.
	ETag *string

	// LastModified contains the information returned from the Last-Modified header response.
	LastModified *time.Time

	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response

	// RequestId contains the information returned from the x-ms-request-id header response.
	RequestId *string

	// RequestServerEncrypted contains the information returned from the x-ms-request-server-encrypted header response.
	RequestServerEncrypted *bool

	// Snapshot contains the information returned from the x-ms-snapshot header response.
	Snapshot *string

	// Version contains the information returned from the x-ms-version header response.
	Version *string
}

// BlobDeleteOptions contains the optional parameters for the Blob.Delete method.
type BlobDeleteOptions struct {
	// Required if the blob has associated snapshots. Specify one of the following two options: include: Delete the base blob
	// and all of its snapshots. only: Delete only the blob's snapshots and not the blob itself
	DeleteSnapshots *DeleteSnapshotsOptionType
	// Specify an ETag value to operate only on blobs with a matching value.
	IfMatch *string
	// Specify this header value to operate only on a blob if it has been modified since the specified date/time.
	IfModifiedSince *time.Time
	// Specify an ETag value to operate only on blobs without a matching value.
	IfNoneMatch *string
	// Specify this header value to operate only on a blob if it has not been modified since the specified date/time.
	IfUnmodifiedSince *time.Time
	// If specified, the operation only succeeds if the resource's lease is active and matches this ID.
	LeaseId *string
	// Provides a client-generated, opaque value with a 1 KB character limit that is recorded in the analytics logs when storage
	// analytics logging is enabled.
	RequestId *string
	// The snapshot parameter is an opaque DateTime value that, when present, specifies the blob snapshot to retrieve. For more
	// information on working with blob snapshots, see <a href="https://docs.microsoft.com/en-us/rest/api/storageservices/fileservices/creating-a-snapshot-of-a-blob">Creating
	// a Snapshot of a Blob.</a>
	Snapshot *string
	// The timeout parameter is expressed in seconds. For more information, see <a href="https://docs.microsoft.com/en-us/rest/api/storageservices/fileservices/setting-timeouts-for-blob-service-operations">Setting
	// Timeouts for Blob Service Operations.</a>
	Timeout *int32
}

// BlobDeleteResponse contains the response from method Blob.Delete.
type BlobDeleteResponse struct {
	// ClientRequestId contains the information returned from the x-ms-client-request-id header response.
	ClientRequestId *string

	// Date contains the information returned from the Date header response.
	Date *time.Time

	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response

	// RequestId contains the information returned from the x-ms-request-id header response.
	RequestId *string

	// Version contains the information returned from the x-ms-version header response.
	Version *string
}

// BlobDownloadOptions contains the optional parameters for the Blob.Download method.
type BlobDownloadOptions struct {
	// Optional. Specifies the encryption key to use to encrypt the data provided in the request. If not specified, encryption
	// is performed with the root account encryption key. For more information, see Encryption at Rest for Azure Storage Services.
	EncryptionKey *string
	// The SHA-256 hash of the provided encryption key. Must be provided if the x-ms-encryption-key header is provided.
	EncryptionKeySha256 *string
	// Specify an ETag value to operate only on blobs with a matching value.
	IfMatch *string
	// Specify this header value to operate only on a blob if it has been modified since the specified date/time.
	IfModifiedSince *time.Time
	// Specify an ETag value to operate only on blobs without a matching value.
	IfNoneMatch *string
	// Specify this header value to operate only on a blob if it has not been modified since the specified date/time.
	IfUnmodifiedSince *time.Time
	// If specified, the operation only succeeds if the resource's lease is active and matches this ID.
	LeaseId *string
	// When set to true and specified together with the Range, the service returns the CRC64 hash for the range, as long as the
	// range is less than or equal to 4 MB in size.
	RangeGetContentCrc64 *bool
	// When set to true and specified together with the Range, the service returns the MD5 hash for the range, as long as the
	// range is less than or equal to 4 MB in size.
	RangeGetContentMd5 *bool
	// Return only the bytes of the blob in the specified range.
	RangeParameter *string
	// Provides a client-generated, opaque value with a 1 KB character limit that is recorded in the analytics logs when storage
	// analytics logging is enabled.
	RequestId *string
	// The snapshot parameter is an opaque DateTime value that, when present, specifies the blob snapshot to retrieve. For more
	// information on working with blob snapshots, see <a href="https://docs.microsoft.com/en-us/rest/api/storageservices/fileservices/creating-a-snapshot-of-a-blob">Creating
	// a Snapshot of a Blob.</a>
	Snapshot *string
	// The timeout parameter is expressed in seconds. For more information, see <a href="https://docs.microsoft.com/en-us/rest/api/storageservices/fileservices/setting-timeouts-for-blob-service-operations">Setting
	// Timeouts for Blob Service Operations.</a>
	Timeout *int32
}

// BlobDownloadResponse contains the response from method Blob.Download.
type BlobDownloadResponse struct {
	// AcceptRanges contains the information returned from the Accept-Ranges header response.
	AcceptRanges *string

	// BlobCommittedBlockCount contains the information returned from the x-ms-blob-committed-block-count header response.
	BlobCommittedBlockCount *int32

	// BlobContentMd5 contains the information returned from the x-ms-blob-content-md5 header response.
	BlobContentMd5 *[]byte

	// BlobSequenceNumber contains the information returned from the x-ms-blob-sequence-number header response.
	BlobSequenceNumber *int64

	// BlobType contains the information returned from the x-ms-blob-type header response.
	BlobType *BlobType

	// CacheControl contains the information returned from the Cache-Control header response.
	CacheControl *string

	// ClientRequestId contains the information returned from the x-ms-client-request-id header response.
	ClientRequestId *string

	// ContentCrc64 contains the information returned from the x-ms-content-crc64 header response.
	ContentCrc64 *[]byte

	// ContentDisposition contains the information returned from the Content-Disposition header response.
	ContentDisposition *string

	// ContentEncoding contains the information returned from the Content-Encoding header response.
	ContentEncoding *string

	// ContentLanguage contains the information returned from the Content-Language header response.
	ContentLanguage *string

	// ContentLength contains the information returned from the Content-Length header response.
	ContentLength *int64

	// ContentMd5 contains the information returned from the Content-MD5 header response.
	ContentMd5 *[]byte

	// ContentRange contains the information returned from the Content-Range header response.
	ContentRange *string

	// ContentType contains the information returned from the Content-Type header response.
	ContentType *string

	// CopyCompletionTime contains the information returned from the x-ms-copy-completion-time header response.
	CopyCompletionTime *time.Time

	// CopyId contains the information returned from the x-ms-copy-id header response.
	CopyId *string

	// CopyProgress contains the information returned from the x-ms-copy-progress header response.
	CopyProgress *string

	// CopySource contains the information returned from the x-ms-copy-source header response.
	CopySource *string

	// CopyStatus contains the information returned from the x-ms-copy-status header response.
	CopyStatus *CopyStatusType

	// CopyStatusDescription contains the information returned from the x-ms-copy-status-description header response.
	CopyStatusDescription *string

	// Date contains the information returned from the Date header response.
	Date *time.Time

	// ETag contains the information returned from the ETag header response.
	ETag *string

	// EncryptionKeySha256 contains the information returned from the x-ms-encryption-key-sha256 header response.
	EncryptionKeySha256 *string

	// EncryptionScope contains the information returned from the x-ms-encryption-scope header response.
	EncryptionScope *string

	// LastModified contains the information returned from the Last-Modified header response.
	LastModified *time.Time

	// LeaseDuration contains the information returned from the x-ms-lease-duration header response.
	LeaseDuration *LeaseDurationType

	// LeaseState contains the information returned from the x-ms-lease-state header response.
	LeaseState *LeaseStateType

	// LeaseStatus contains the information returned from the x-ms-lease-status header response.
	LeaseStatus *LeaseStatusType

	// Meta contains the information returned from the x-ms-meta header response.
	Meta *string

	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response

	// RequestId contains the information returned from the x-ms-request-id header response.
	RequestId *string

	// ServerEncrypted contains the information returned from the x-ms-server-encrypted header response.
	ServerEncrypted *bool

	// Version contains the information returned from the x-ms-version header response.
	Version *string
}

type BlobFlatListSegment struct {
	BlobItems *[]BlobItem `xml:"Blob"`
}

// BlobGetAccessControlOptions contains the optional parameters for the Blob.GetAccessControl method.
type BlobGetAccessControlOptions struct {
	// Specify an ETag value to operate only on blobs with a matching value.
	IfMatch *string
	// Specify this header value to operate only on a blob if it has been modified since the specified date/time.
	IfModifiedSince *time.Time
	// Specify an ETag value to operate only on blobs without a matching value.
	IfNoneMatch *string
	// Specify this header value to operate only on a blob if it has not been modified since the specified date/time.
	IfUnmodifiedSince *time.Time
	// If specified, the operation only succeeds if the resource's lease is active and matches this ID.
	LeaseId *string
	// Provides a client-generated, opaque value with a 1 KB character limit that is recorded in the analytics logs when storage
	// analytics logging is enabled.
	RequestId *string
	// The timeout parameter is expressed in seconds. For more information, see <a href="https://docs.microsoft.com/en-us/rest/api/storageservices/fileservices/setting-timeouts-for-blob-service-operations">Setting
	// Timeouts for Blob Service Operations.</a>
	Timeout *int32
	// Optional. Valid only when Hierarchical Namespace is enabled for the account. If "true", the identity values returned in
	// the x-ms-owner, x-ms-group, and x-ms-acl response headers will be transformed from Azure Active Directory Object IDs to
	// User Principal Names. If "false", the values will be returned as Azure Active Directory Object IDs. The default value is
	// false.
	Upn *bool
}

// BlobGetAccessControlResponse contains the response from method Blob.GetAccessControl.
type BlobGetAccessControlResponse struct {
	// Acl contains the information returned from the x-ms-acl header response.
	Acl *string

	// Date contains the information returned from the Date header response.
	Date *time.Time

	// ETag contains the information returned from the ETag header response.
	ETag *string

	// Group contains the information returned from the x-ms-group header response.
	Group *string

	// LastModified contains the information returned from the Last-Modified header response.
	LastModified *time.Time

	// Owner contains the information returned from the x-ms-owner header response.
	Owner *string

	// Permissions contains the information returned from the x-ms-permissions header response.
	Permissions *string

	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response

	// RequestId contains the information returned from the x-ms-request-id header response.
	RequestId *string

	// Version contains the information returned from the x-ms-version header response.
	Version *string
}

// BlobGetAccountInfoResponse contains the response from method Blob.GetAccountInfo.
type BlobGetAccountInfoResponse struct {
	// AccountKind contains the information returned from the x-ms-account-kind header response.
	AccountKind *AccountKind

	// ClientRequestId contains the information returned from the x-ms-client-request-id header response.
	ClientRequestId *string

	// Date contains the information returned from the Date header response.
	Date *time.Time

	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response

	// RequestId contains the information returned from the x-ms-request-id header response.
	RequestId *string

	// SkuName contains the information returned from the x-ms-sku-name header response.
	SkuName *SkuName

	// Version contains the information returned from the x-ms-version header response.
	Version *string
}

// BlobGetPropertiesOptions contains the optional parameters for the Blob.GetProperties method.
type BlobGetPropertiesOptions struct {
	// Optional. Specifies the encryption key to use to encrypt the data provided in the request. If not specified, encryption
	// is performed with the root account encryption key. For more information, see Encryption at Rest for Azure Storage Services.
	EncryptionKey *string
	// The SHA-256 hash of the provided encryption key. Must be provided if the x-ms-encryption-key header is provided.
	EncryptionKeySha256 *string
	// Specify an ETag value to operate only on blobs with a matching value.
	IfMatch *string
	// Specify this header value to operate only on a blob if it has been modified since the specified date/time.
	IfModifiedSince *time.Time
	// Specify an ETag value to operate only on blobs without a matching value.
	IfNoneMatch *string
	// Specify this header value to operate only on a blob if it has not been modified since the specified date/time.
	IfUnmodifiedSince *time.Time
	// If specified, the operation only succeeds if the resource's lease is active and matches this ID.
	LeaseId *string
	// Provides a client-generated, opaque value with a 1 KB character limit that is recorded in the analytics logs when storage
	// analytics logging is enabled.
	RequestId *string
	// The snapshot parameter is an opaque DateTime value that, when present, specifies the blob snapshot to retrieve. For more
	// information on working with blob snapshots, see <a href="https://docs.microsoft.com/en-us/rest/api/storageservices/fileservices/creating-a-snapshot-of-a-blob">Creating
	// a Snapshot of a Blob.</a>
	Snapshot *string
	// The timeout parameter is expressed in seconds. For more information, see <a href="https://docs.microsoft.com/en-us/rest/api/storageservices/fileservices/setting-timeouts-for-blob-service-operations">Setting
	// Timeouts for Blob Service Operations.</a>
	Timeout *int32
}

// BlobGetPropertiesResponse contains the response from method Blob.GetProperties.
type BlobGetPropertiesResponse struct {
	// AcceptRanges contains the information returned from the Accept-Ranges header response.
	AcceptRanges *string

	// AccessTier contains the information returned from the x-ms-access-tier header response.
	AccessTier *string

	// AccessTierChangeTime contains the information returned from the x-ms-access-tier-change-time header response.
	AccessTierChangeTime *time.Time

	// AccessTierInferred contains the information returned from the x-ms-access-tier-inferred header response.
	AccessTierInferred *bool

	// ArchiveStatus contains the information returned from the x-ms-archive-status header response.
	ArchiveStatus *string

	// BlobCommittedBlockCount contains the information returned from the x-ms-blob-committed-block-count header response.
	BlobCommittedBlockCount *int32

	// BlobSequenceNumber contains the information returned from the x-ms-blob-sequence-number header response.
	BlobSequenceNumber *int64

	// BlobType contains the information returned from the x-ms-blob-type header response.
	BlobType *BlobType

	// CacheControl contains the information returned from the Cache-Control header response.
	CacheControl *string

	// ClientRequestId contains the information returned from the x-ms-client-request-id header response.
	ClientRequestId *string

	// ContentDisposition contains the information returned from the Content-Disposition header response.
	ContentDisposition *string

	// ContentEncoding contains the information returned from the Content-Encoding header response.
	ContentEncoding *string

	// ContentLanguage contains the information returned from the Content-Language header response.
	ContentLanguage *string

	// ContentLength contains the information returned from the Content-Length header response.
	ContentLength *int64

	// ContentMd5 contains the information returned from the Content-MD5 header response.
	ContentMd5 *[]byte

	// ContentType contains the information returned from the Content-Type header response.
	ContentType *string

	// CopyCompletionTime contains the information returned from the x-ms-copy-completion-time header response.
	CopyCompletionTime *time.Time

	// CopyDestinationSnapshot contains the information returned from the x-ms-copy-destination-snapshot header response.
	CopyDestinationSnapshot *string

	// CopyId contains the information returned from the x-ms-copy-id header response.
	CopyId *string

	// CopyProgress contains the information returned from the x-ms-copy-progress header response.
	CopyProgress *string

	// CopySource contains the information returned from the x-ms-copy-source header response.
	CopySource *string

	// CopyStatus contains the information returned from the x-ms-copy-status header response.
	CopyStatus *CopyStatusType

	// CopyStatusDescription contains the information returned from the x-ms-copy-status-description header response.
	CopyStatusDescription *string

	// CreationTime contains the information returned from the x-ms-creation-time header response.
	CreationTime *time.Time

	// Date contains the information returned from the Date header response.
	Date *time.Time

	// ETag contains the information returned from the ETag header response.
	ETag *string

	// EncryptionKeySha256 contains the information returned from the x-ms-encryption-key-sha256 header response.
	EncryptionKeySha256 *string

	// EncryptionScope contains the information returned from the x-ms-encryption-scope header response.
	EncryptionScope *string

	// IncrementalCopy contains the information returned from the x-ms-incremental-copy header response.
	IncrementalCopy *bool

	// LastModified contains the information returned from the Last-Modified header response.
	LastModified *time.Time

	// LeaseDuration contains the information returned from the x-ms-lease-duration header response.
	LeaseDuration *LeaseDurationType

	// LeaseState contains the information returned from the x-ms-lease-state header response.
	LeaseState *LeaseStateType

	// LeaseStatus contains the information returned from the x-ms-lease-status header response.
	LeaseStatus *LeaseStatusType

	// Meta contains the information returned from the x-ms-meta header response.
	Meta *string

	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response

	// RequestId contains the information returned from the x-ms-request-id header response.
	RequestId *string

	// ServerEncrypted contains the information returned from the x-ms-server-encrypted header response.
	ServerEncrypted *bool

	// Version contains the information returned from the x-ms-version header response.
	Version *string
}

type BlobHierarchyListSegment struct {
	BlobItems    *[]BlobItem   `xml:"Blob"`
	BlobPrefixes *[]BlobPrefix `xml:"BlobPrefix"`
}

// An Azure Storage blob
type BlobItem struct {
	Deleted  *bool         `xml:"Deleted"`
	Metadata *BlobMetadata `xml:"Metadata"`
	Name     *string       `xml:"Name"`

	// Properties of a blob
	Properties *BlobProperties `xml:"Properties"`
	Snapshot   *string         `xml:"Snapshot"`
}

type BlobMetadata struct {
	Encrypted *string `xml:"Encrypted,attr"`
}

type BlobPrefix struct {
	Name *string `xml:"Name"`
}

// Properties of a blob
type BlobProperties struct {
	AccessTier           *AccessTier    `xml:"AccessTier"`
	AccessTierChangeTime *time.Time     `xml:"AccessTierChangeTime"`
	AccessTierInferred   *bool          `xml:"AccessTierInferred"`
	ArchiveStatus        *ArchiveStatus `xml:"ArchiveStatus"`
	BlobSequenceNumber   *int64         `xml:"x-ms-blob-sequence-number"`
	BlobType             *BlobType      `xml:"BlobType"`
	CacheControl         *string        `xml:"Cache-Control"`
	ContentDisposition   *string        `xml:"Content-Disposition"`
	ContentEncoding      *string        `xml:"Content-Encoding"`
	ContentLanguage      *string        `xml:"Content-Language"`

	// Size in bytes
	ContentLength             *int64          `xml:"Content-Length"`
	ContentMd5                *[]byte         `xml:"Content-MD5"`
	ContentType               *string         `xml:"Content-Type"`
	CopyCompletionTime        *time.Time      `xml:"CopyCompletionTime"`
	CopyID                    *string         `xml:"CopyId"`
	CopyProgress              *string         `xml:"CopyProgress"`
	CopySource                *string         `xml:"CopySource"`
	CopyStatus                *CopyStatusType `xml:"CopyStatus"`
	CopyStatusDescription     *string         `xml:"CopyStatusDescription"`
	CreationTime              *time.Time      `xml:"Creation-Time"`
	CustomerProvidedKeySha256 *string         `xml:"CustomerProvidedKeySha256"`
	DeletedTime               *time.Time      `xml:"DeletedTime"`
	DestinationSnapshot       *string         `xml:"DestinationSnapshot"`

	// The name of the encryption scope under which the blob is encrypted.
	EncryptionScope        *string            `xml:"EncryptionScope"`
	Etag                   *string            `xml:"Etag"`
	IncrementalCopy        *bool              `xml:"IncrementalCopy"`
	LastModified           *time.Time         `xml:"Last-Modified"`
	LeaseDuration          *LeaseDurationType `xml:"LeaseDuration"`
	LeaseState             *LeaseStateType    `xml:"LeaseState"`
	LeaseStatus            *LeaseStatusType   `xml:"LeaseStatus"`
	RemainingRetentionDays *int32             `xml:"RemainingRetentionDays"`
	ServerEncrypted        *bool              `xml:"ServerEncrypted"`
}

func (b BlobProperties) MarshalXML(e *xml.Encoder, start xml.StartElement) error {
	type alias BlobProperties
	aux := &struct {
		*alias
		AccessTierChangeTime *timeRFC1123 `xml:"AccessTierChangeTime"`
		CopyCompletionTime   *timeRFC1123 `xml:"CopyCompletionTime"`
		CreationTime         *timeRFC1123 `xml:"Creation-Time"`
		DeletedTime          *timeRFC1123 `xml:"DeletedTime"`
		LastModified         *timeRFC1123 `xml:"Last-Modified"`
	}{
		alias:                (*alias)(&b),
		AccessTierChangeTime: (*timeRFC1123)(b.AccessTierChangeTime),
		CopyCompletionTime:   (*timeRFC1123)(b.CopyCompletionTime),
		CreationTime:         (*timeRFC1123)(b.CreationTime),
		DeletedTime:          (*timeRFC1123)(b.DeletedTime),
		LastModified:         (*timeRFC1123)(b.LastModified),
	}
	return e.EncodeElement(aux, start)
}

func (b *BlobProperties) UnmarshalXML(d *xml.Decoder, start xml.StartElement) error {
	type alias BlobProperties
	aux := &struct {
		*alias
		AccessTierChangeTime *timeRFC1123 `xml:"AccessTierChangeTime"`
		CopyCompletionTime   *timeRFC1123 `xml:"CopyCompletionTime"`
		CreationTime         *timeRFC1123 `xml:"Creation-Time"`
		DeletedTime          *timeRFC1123 `xml:"DeletedTime"`
		LastModified         *timeRFC1123 `xml:"Last-Modified"`
	}{
		alias: (*alias)(b),
	}
	if err := d.DecodeElement(aux, &start); err != nil {
		return err
	}
	b.AccessTierChangeTime = (*time.Time)(aux.AccessTierChangeTime)
	b.CopyCompletionTime = (*time.Time)(aux.CopyCompletionTime)
	b.CreationTime = (*time.Time)(aux.CreationTime)
	b.DeletedTime = (*time.Time)(aux.DeletedTime)
	b.LastModified = (*time.Time)(aux.LastModified)
	return nil
}

// BlobReleaseLeaseOptions contains the optional parameters for the Blob.ReleaseLease method.
type BlobReleaseLeaseOptions struct {
	// Specify an ETag value to operate only on blobs with a matching value.
	IfMatch *string
	// Specify this header value to operate only on a blob if it has been modified since the specified date/time.
	IfModifiedSince *time.Time
	// Specify an ETag value to operate only on blobs without a matching value.
	IfNoneMatch *string
	// Specify this header value to operate only on a blob if it has not been modified since the specified date/time.
	IfUnmodifiedSince *time.Time
	// Provides a client-generated, opaque value with a 1 KB character limit that is recorded in the analytics logs when storage
	// analytics logging is enabled.
	RequestId *string
	// The timeout parameter is expressed in seconds. For more information, see <a href="https://docs.microsoft.com/en-us/rest/api/storageservices/fileservices/setting-timeouts-for-blob-service-operations">Setting
	// Timeouts for Blob Service Operations.</a>
	Timeout *int32
}

// BlobReleaseLeaseResponse contains the response from method Blob.ReleaseLease.
type BlobReleaseLeaseResponse struct {
	// ClientRequestId contains the information returned from the x-ms-client-request-id header response.
	ClientRequestId *string

	// Date contains the information returned from the Date header response.
	Date *time.Time

	// ETag contains the information returned from the ETag header response.
	ETag *string

	// LastModified contains the information returned from the Last-Modified header response.
	LastModified *time.Time

	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response

	// RequestId contains the information returned from the x-ms-request-id header response.
	RequestId *string

	// Version contains the information returned from the x-ms-version header response.
	Version *string
}

// BlobRenameOptions contains the optional parameters for the Blob.Rename method.
type BlobRenameOptions struct {
	// Cache control for given resource
	CacheControl *string
	// Content disposition for given resource
	ContentDisposition *string
	// Content encoding for given resource
	ContentEncoding *string
	// Content language for given resource
	ContentLanguage *string
	// Content type for given resource
	ContentType *string
	// Optional. User-defined properties to be stored with the file or directory, in the format of a comma-separated list of name
	// and value pairs "n1=v1, n2=v2, ...", where each value is base64 encoded.
	DirectoryProperties *string
	// Specify an ETag value to operate only on blobs with a matching value.
	IfMatch *string
	// Specify this header value to operate only on a blob if it has been modified since the specified date/time.
	IfModifiedSince *time.Time
	// Specify an ETag value to operate only on blobs without a matching value.
	IfNoneMatch *string
	// Specify this header value to operate only on a blob if it has not been modified since the specified date/time.
	IfUnmodifiedSince *time.Time
	// If specified, the operation only succeeds if the resource's lease is active and matches this ID.
	LeaseId *string
	// Optional and only valid if Hierarchical Namespace is enabled for the account. Sets POSIX access permissions for the file
	// owner, the file owning group, and others. Each class may be granted read, write, or execute permission. The sticky bit
	// is also supported. Both symbolic (rwxrw-rw-) and 4-digit octal notation (e.g. 0766) are supported.
	PosixPermissions *string
	// Only valid if Hierarchical Namespace is enabled for the account. This umask restricts permission settings for file and
	// directory, and will only be applied when default Acl does not exist in parent directory. If the umask bit has set, it means
	// that the corresponding permission will be disabled. Otherwise the corresponding permission will be determined by the permission.
	// A 4-digit octal notation (e.g. 0022) is supported here. If no umask was specified, a default umask - 0027 will be used.
	PosixUmask *string
	// Provides a client-generated, opaque value with a 1 KB character limit that is recorded in the analytics logs when storage
	// analytics logging is enabled.
	RequestId *string
	// Specify an ETag value to operate only on blobs with a matching value.
	SourceIfMatch *string
	// Specify this header value to operate only on a blob if it has been modified since the specified date/time.
	SourceIfModifiedSince *time.Time
	// Specify an ETag value to operate only on blobs without a matching value.
	SourceIfNoneMatch *string
	// Specify this header value to operate only on a blob if it has not been modified since the specified date/time.
	SourceIfUnmodifiedSince *time.Time
	// A lease ID for the source path. If specified, the source path must have an active lease and the leaase ID must match.
	SourceLeaseId *string
	// The timeout parameter is expressed in seconds. For more information, see <a href="https://docs.microsoft.com/en-us/rest/api/storageservices/fileservices/setting-timeouts-for-blob-service-operations">Setting
	// Timeouts for Blob Service Operations.</a>
	Timeout *int32
}

// BlobRenameResponse contains the response from method Blob.Rename.
type BlobRenameResponse struct {
	// ClientRequestId contains the information returned from the x-ms-client-request-id header response.
	ClientRequestId *string

	// ContentLength contains the information returned from the Content-Length header response.
	ContentLength *int64

	// Date contains the information returned from the Date header response.
	Date *time.Time

	// ETag contains the information returned from the ETag header response.
	ETag *string

	// LastModified contains the information returned from the Last-Modified header response.
	LastModified *time.Time

	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response

	// RequestId contains the information returned from the x-ms-request-id header response.
	RequestId *string

	// Version contains the information returned from the x-ms-version header response.
	Version *string
}

// BlobRenewLeaseOptions contains the optional parameters for the Blob.RenewLease method.
type BlobRenewLeaseOptions struct {
	// Specify an ETag value to operate only on blobs with a matching value.
	IfMatch *string
	// Specify this header value to operate only on a blob if it has been modified since the specified date/time.
	IfModifiedSince *time.Time
	// Specify an ETag value to operate only on blobs without a matching value.
	IfNoneMatch *string
	// Specify this header value to operate only on a blob if it has not been modified since the specified date/time.
	IfUnmodifiedSince *time.Time
	// Provides a client-generated, opaque value with a 1 KB character limit that is recorded in the analytics logs when storage
	// analytics logging is enabled.
	RequestId *string
	// The timeout parameter is expressed in seconds. For more information, see <a href="https://docs.microsoft.com/en-us/rest/api/storageservices/fileservices/setting-timeouts-for-blob-service-operations">Setting
	// Timeouts for Blob Service Operations.</a>
	Timeout *int32
}

// BlobRenewLeaseResponse contains the response from method Blob.RenewLease.
type BlobRenewLeaseResponse struct {
	// ClientRequestId contains the information returned from the x-ms-client-request-id header response.
	ClientRequestId *string

	// Date contains the information returned from the Date header response.
	Date *time.Time

	// ETag contains the information returned from the ETag header response.
	ETag *string

	// LastModified contains the information returned from the Last-Modified header response.
	LastModified *time.Time

	// LeaseId contains the information returned from the x-ms-lease-id header response.
	LeaseId *string

	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response

	// RequestId contains the information returned from the x-ms-request-id header response.
	RequestId *string

	// Version contains the information returned from the x-ms-version header response.
	Version *string
}

// BlobSetAccessControlOptions contains the optional parameters for the Blob.SetAccessControl method.
type BlobSetAccessControlOptions struct {
	// Optional. The owning group of the blob or directory.
	Group *string
	// Specify an ETag value to operate only on blobs with a matching value.
	IfMatch *string
	// Specify this header value to operate only on a blob if it has been modified since the specified date/time.
	IfModifiedSince *time.Time
	// Specify an ETag value to operate only on blobs without a matching value.
	IfNoneMatch *string
	// Specify this header value to operate only on a blob if it has not been modified since the specified date/time.
	IfUnmodifiedSince *time.Time
	// If specified, the operation only succeeds if the resource's lease is active and matches this ID.
	LeaseId *string
	// Optional. The owner of the blob or directory.
	Owner *string
	// Sets POSIX access control rights on files and directories. The value is a comma-separated list of access control entries.
	// Each access control entry (ACE) consists of a scope, a type, a user or group identifier, and permissions in the format
	// "[scope:][type]:[id]:[permissions]".
	PosixAcl *string
	// Optional and only valid if Hierarchical Namespace is enabled for the account. Sets POSIX access permissions for the file
	// owner, the file owning group, and others. Each class may be granted read, write, or execute permission. The sticky bit
	// is also supported. Both symbolic (rwxrw-rw-) and 4-digit octal notation (e.g. 0766) are supported.
	PosixPermissions *string
	// Provides a client-generated, opaque value with a 1 KB character limit that is recorded in the analytics logs when storage
	// analytics logging is enabled.
	RequestId *string
	// The timeout parameter is expressed in seconds. For more information, see <a href="https://docs.microsoft.com/en-us/rest/api/storageservices/fileservices/setting-timeouts-for-blob-service-operations">Setting
	// Timeouts for Blob Service Operations.</a>
	Timeout *int32
}

// BlobSetAccessControlResponse contains the response from method Blob.SetAccessControl.
type BlobSetAccessControlResponse struct {
	// Date contains the information returned from the Date header response.
	Date *time.Time

	// ETag contains the information returned from the ETag header response.
	ETag *string

	// LastModified contains the information returned from the Last-Modified header response.
	LastModified *time.Time

	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response

	// RequestId contains the information returned from the x-ms-request-id header response.
	RequestId *string

	// Version contains the information returned from the x-ms-version header response.
	Version *string
}

// BlobSetHTTPHeadersOptions contains the optional parameters for the Blob.SetHTTPHeaders method.
type BlobSetHTTPHeadersOptions struct {
	// Optional. Sets the blob's cache control. If specified, this property is stored with the blob and returned with a read request.
	BlobCacheControl *string
	// Optional. Sets the blob's Content-Disposition header.
	BlobContentDisposition *string
	// Optional. Sets the blob's content encoding. If specified, this property is stored with the blob and returned with a read
	// request.
	BlobContentEncoding *string
	// Optional. Set the blob's content language. If specified, this property is stored with the blob and returned with a read
	// request.
	BlobContentLanguage *string
	// Optional. An MD5 hash of the blob content. Note that this hash is not validated, as the hashes for the individual blocks
	// were validated when each was uploaded.
	BlobContentMd5 *[]byte
	// Optional. Sets the blob's content type. If specified, this property is stored with the blob and returned with a read request.
	BlobContentType *string
	// Specify an ETag value to operate only on blobs with a matching value.
	IfMatch *string
	// Specify this header value to operate only on a blob if it has been modified since the specified date/time.
	IfModifiedSince *time.Time
	// Specify an ETag value to operate only on blobs without a matching value.
	IfNoneMatch *string
	// Specify this header value to operate only on a blob if it has not been modified since the specified date/time.
	IfUnmodifiedSince *time.Time
	// If specified, the operation only succeeds if the resource's lease is active and matches this ID.
	LeaseId *string
	// Provides a client-generated, opaque value with a 1 KB character limit that is recorded in the analytics logs when storage
	// analytics logging is enabled.
	RequestId *string
	// The timeout parameter is expressed in seconds. For more information, see <a href="https://docs.microsoft.com/en-us/rest/api/storageservices/fileservices/setting-timeouts-for-blob-service-operations">Setting
	// Timeouts for Blob Service Operations.</a>
	Timeout *int32
}

// BlobSetHTTPHeadersResponse contains the response from method Blob.SetHTTPHeaders.
type BlobSetHTTPHeadersResponse struct {
	// BlobSequenceNumber contains the information returned from the x-ms-blob-sequence-number header response.
	BlobSequenceNumber *int64

	// ClientRequestId contains the information returned from the x-ms-client-request-id header response.
	ClientRequestId *string

	// Date contains the information returned from the Date header response.
	Date *time.Time

	// ETag contains the information returned from the ETag header response.
	ETag *string

	// LastModified contains the information returned from the Last-Modified header response.
	LastModified *time.Time

	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response

	// RequestId contains the information returned from the x-ms-request-id header response.
	RequestId *string

	// Version contains the information returned from the x-ms-version header response.
	Version *string
}

// BlobSetMetadataOptions contains the optional parameters for the Blob.SetMetadata method.
type BlobSetMetadataOptions struct {
	// Optional. Specifies the encryption key to use to encrypt the data provided in the request. If not specified, encryption
	// is performed with the root account encryption key. For more information, see Encryption at Rest for Azure Storage Services.
	EncryptionKey *string
	// The SHA-256 hash of the provided encryption key. Must be provided if the x-ms-encryption-key header is provided.
	EncryptionKeySha256 *string
	// Optional. Version 2019-07-07 and later. Specifies the name of the encryption scope to use to encrypt the data provided
	// in the request. If not specified, encryption is performed with the default account encryption scope. For more information,
	// see Encryption at Rest for Azure Storage Services.
	EncryptionScope *string
	// Specify an ETag value to operate only on blobs with a matching value.
	IfMatch *string
	// Specify this header value to operate only on a blob if it has been modified since the specified date/time.
	IfModifiedSince *time.Time
	// Specify an ETag value to operate only on blobs without a matching value.
	IfNoneMatch *string
	// Specify this header value to operate only on a blob if it has not been modified since the specified date/time.
	IfUnmodifiedSince *time.Time
	// If specified, the operation only succeeds if the resource's lease is active and matches this ID.
	LeaseId *string
	// Optional. Specifies a user-defined name-value pair associated with the blob. If no name-value pairs are specified, the
	// operation will copy the metadata from the source blob or file to the destination blob. If one or more name-value pairs
	// are specified, the destination blob is created with the specified metadata, and metadata is not copied from the source
	// blob or file. Note that beginning with version 2009-09-19, metadata names must adhere to the naming rules for C# identifiers.
	// See Naming and Referencing Containers, Blobs, and Metadata for more information.
	Metadata *string
	// Provides a client-generated, opaque value with a 1 KB character limit that is recorded in the analytics logs when storage
	// analytics logging is enabled.
	RequestId *string
	// The timeout parameter is expressed in seconds. For more information, see <a href="https://docs.microsoft.com/en-us/rest/api/storageservices/fileservices/setting-timeouts-for-blob-service-operations">Setting
	// Timeouts for Blob Service Operations.</a>
	Timeout *int32
}

// BlobSetMetadataResponse contains the response from method Blob.SetMetadata.
type BlobSetMetadataResponse struct {
	// ClientRequestId contains the information returned from the x-ms-client-request-id header response.
	ClientRequestId *string

	// Date contains the information returned from the Date header response.
	Date *time.Time

	// ETag contains the information returned from the ETag header response.
	ETag *string

	// EncryptionKeySha256 contains the information returned from the x-ms-encryption-key-sha256 header response.
	EncryptionKeySha256 *string

	// EncryptionScope contains the information returned from the x-ms-encryption-scope header response.
	EncryptionScope *string

	// LastModified contains the information returned from the Last-Modified header response.
	LastModified *time.Time

	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response

	// RequestId contains the information returned from the x-ms-request-id header response.
	RequestId *string

	// RequestServerEncrypted contains the information returned from the x-ms-request-server-encrypted header response.
	RequestServerEncrypted *bool

	// Version contains the information returned from the x-ms-version header response.
	Version *string
}

// BlobSetTierOptions contains the optional parameters for the Blob.SetTier method.
type BlobSetTierOptions struct {
	// If specified, the operation only succeeds if the resource's lease is active and matches this ID.
	LeaseId *string
	// Optional: Indicates the priority with which to rehydrate an archived blob.
	RehydratePriority *RehydratePriority
	// Provides a client-generated, opaque value with a 1 KB character limit that is recorded in the analytics logs when storage
	// analytics logging is enabled.
	RequestId *string
	// The timeout parameter is expressed in seconds. For more information, see <a href="https://docs.microsoft.com/en-us/rest/api/storageservices/fileservices/setting-timeouts-for-blob-service-operations">Setting
	// Timeouts for Blob Service Operations.</a>
	Timeout *int32
}

// BlobSetTierResponse contains the response from method Blob.SetTier.
type BlobSetTierResponse struct {
	// ClientRequestId contains the information returned from the x-ms-client-request-id header response.
	ClientRequestId *string

	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response

	// RequestId contains the information returned from the x-ms-request-id header response.
	RequestId *string

	// Version contains the information returned from the x-ms-version header response.
	Version *string
}

// BlobStartCopyFromURLOptions contains the optional parameters for the Blob.StartCopyFromURL method.
type BlobStartCopyFromURLOptions struct {
	// Specify an ETag value to operate only on blobs with a matching value.
	IfMatch *string
	// Specify this header value to operate only on a blob if it has been modified since the specified date/time.
	IfModifiedSince *time.Time
	// Specify an ETag value to operate only on blobs without a matching value.
	IfNoneMatch *string
	// Specify this header value to operate only on a blob if it has not been modified since the specified date/time.
	IfUnmodifiedSince *time.Time
	// If specified, the operation only succeeds if the resource's lease is active and matches this ID.
	LeaseId *string
	// Optional. Specifies a user-defined name-value pair associated with the blob. If no name-value pairs are specified, the
	// operation will copy the metadata from the source blob or file to the destination blob. If one or more name-value pairs
	// are specified, the destination blob is created with the specified metadata, and metadata is not copied from the source
	// blob or file. Note that beginning with version 2009-09-19, metadata names must adhere to the naming rules for C# identifiers.
	// See Naming and Referencing Containers, Blobs, and Metadata for more information.
	Metadata *string
	// Optional: Indicates the priority with which to rehydrate an archived blob.
	RehydratePriority *RehydratePriority
	// Provides a client-generated, opaque value with a 1 KB character limit that is recorded in the analytics logs when storage
	// analytics logging is enabled.
	RequestId *string
	// Specify an ETag value to operate only on blobs with a matching value.
	SourceIfMatch *string
	// Specify this header value to operate only on a blob if it has been modified since the specified date/time.
	SourceIfModifiedSince *time.Time
	// Specify an ETag value to operate only on blobs without a matching value.
	SourceIfNoneMatch *string
	// Specify this header value to operate only on a blob if it has not been modified since the specified date/time.
	SourceIfUnmodifiedSince *time.Time
	// Optional. Indicates the tier to be set on the blob.
	Tier *AccessTier
	// The timeout parameter is expressed in seconds. For more information, see <a href="https://docs.microsoft.com/en-us/rest/api/storageservices/fileservices/setting-timeouts-for-blob-service-operations">Setting
	// Timeouts for Blob Service Operations.</a>
	Timeout *int32
}

// BlobStartCopyFromURLResponse contains the response from method Blob.StartCopyFromURL.
type BlobStartCopyFromURLResponse struct {
	// ClientRequestId contains the information returned from the x-ms-client-request-id header response.
	ClientRequestId *string

	// CopyId contains the information returned from the x-ms-copy-id header response.
	CopyId *string

	// CopyStatus contains the information returned from the x-ms-copy-status header response.
	CopyStatus *CopyStatusType

	// Date contains the information returned from the Date header response.
	Date *time.Time

	// ETag contains the information returned from the ETag header response.
	ETag *string

	// LastModified contains the information returned from the Last-Modified header response.
	LastModified *time.Time

	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response

	// RequestId contains the information returned from the x-ms-request-id header response.
	RequestId *string

	// Version contains the information returned from the x-ms-version header response.
	Version *string
}

// BlobUndeleteOptions contains the optional parameters for the Blob.Undelete method.
type BlobUndeleteOptions struct {
	// Provides a client-generated, opaque value with a 1 KB character limit that is recorded in the analytics logs when storage
	// analytics logging is enabled.
	RequestId *string
	// The timeout parameter is expressed in seconds. For more information, see <a href="https://docs.microsoft.com/en-us/rest/api/storageservices/fileservices/setting-timeouts-for-blob-service-operations">Setting
	// Timeouts for Blob Service Operations.</a>
	Timeout *int32
}

// BlobUndeleteResponse contains the response from method Blob.Undelete.
type BlobUndeleteResponse struct {
	// ClientRequestId contains the information returned from the x-ms-client-request-id header response.
	ClientRequestId *string

	// Date contains the information returned from the Date header response.
	Date *time.Time

	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response

	// RequestId contains the information returned from the x-ms-request-id header response.
	RequestId *string

	// Version contains the information returned from the x-ms-version header response.
	Version *string
}

// Represents a single block in a block blob. It describes the block's ID and size.
type Block struct {
	// The base64 encoded block ID.
	Name *string `xml:"Name"`

	// The block size in bytes.
	Size *int32 `xml:"Size"`
}

// BlockBlobCommitBlockListOptions contains the optional parameters for the BlockBlob.CommitBlockList method.
type BlockBlobCommitBlockListOptions struct {
	// Optional. Sets the blob's cache control. If specified, this property is stored with the blob and returned with a read request.
	BlobCacheControl *string
	// Optional. Sets the blob's Content-Disposition header.
	BlobContentDisposition *string
	// Optional. Sets the blob's content encoding. If specified, this property is stored with the blob and returned with a read
	// request.
	BlobContentEncoding *string
	// Optional. Set the blob's content language. If specified, this property is stored with the blob and returned with a read
	// request.
	BlobContentLanguage *string
	// Optional. An MD5 hash of the blob content. Note that this hash is not validated, as the hashes for the individual blocks
	// were validated when each was uploaded.
	BlobContentMd5 *[]byte
	// Optional. Sets the blob's content type. If specified, this property is stored with the blob and returned with a read request.
	BlobContentType *string
	// Optional. Specifies the encryption key to use to encrypt the data provided in the request. If not specified, encryption
	// is performed with the root account encryption key. For more information, see Encryption at Rest for Azure Storage Services.
	EncryptionKey *string
	// The SHA-256 hash of the provided encryption key. Must be provided if the x-ms-encryption-key header is provided.
	EncryptionKeySha256 *string
	// Optional. Version 2019-07-07 and later. Specifies the name of the encryption scope to use to encrypt the data provided
	// in the request. If not specified, encryption is performed with the default account encryption scope. For more information,
	// see Encryption at Rest for Azure Storage Services.
	EncryptionScope *string
	// Specify an ETag value to operate only on blobs with a matching value.
	IfMatch *string
	// Specify this header value to operate only on a blob if it has been modified since the specified date/time.
	IfModifiedSince *time.Time
	// Specify an ETag value to operate only on blobs without a matching value.
	IfNoneMatch *string
	// Specify this header value to operate only on a blob if it has not been modified since the specified date/time.
	IfUnmodifiedSince *time.Time
	// If specified, the operation only succeeds if the resource's lease is active and matches this ID.
	LeaseId *string
	// Optional. Specifies a user-defined name-value pair associated with the blob. If no name-value pairs are specified, the
	// operation will copy the metadata from the source blob or file to the destination blob. If one or more name-value pairs
	// are specified, the destination blob is created with the specified metadata, and metadata is not copied from the source
	// blob or file. Note that beginning with version 2009-09-19, metadata names must adhere to the naming rules for C# identifiers.
	// See Naming and Referencing Containers, Blobs, and Metadata for more information.
	Metadata *string
	// Provides a client-generated, opaque value with a 1 KB character limit that is recorded in the analytics logs when storage
	// analytics logging is enabled.
	RequestId *string
	// Optional. Indicates the tier to be set on the blob.
	Tier *AccessTier
	// The timeout parameter is expressed in seconds. For more information, see <a href="https://docs.microsoft.com/en-us/rest/api/storageservices/fileservices/setting-timeouts-for-blob-service-operations">Setting
	// Timeouts for Blob Service Operations.</a>
	Timeout *int32
	// Specify the transactional crc64 for the body, to be validated by the service.
	TransactionalContentCrc64 *[]byte
	// Specify the transactional md5 for the body, to be validated by the service.
	TransactionalContentMd5 *[]byte
}

// BlockBlobCommitBlockListResponse contains the response from method BlockBlob.CommitBlockList.
type BlockBlobCommitBlockListResponse struct {
	// ClientRequestId contains the information returned from the x-ms-client-request-id header response.
	ClientRequestId *string

	// ContentCrc64 contains the information returned from the x-ms-content-crc64 header response.
	ContentCrc64 *[]byte

	// ContentMd5 contains the information returned from the Content-MD5 header response.
	ContentMd5 *[]byte

	// Date contains the information returned from the Date header response.
	Date *time.Time

	// ETag contains the information returned from the ETag header response.
	ETag *string

	// EncryptionKeySha256 contains the information returned from the x-ms-encryption-key-sha256 header response.
	EncryptionKeySha256 *string

	// EncryptionScope contains the information returned from the x-ms-encryption-scope header response.
	EncryptionScope *string

	// LastModified contains the information returned from the Last-Modified header response.
	LastModified *time.Time

	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response

	// RequestId contains the information returned from the x-ms-request-id header response.
	RequestId *string

	// RequestServerEncrypted contains the information returned from the x-ms-request-server-encrypted header response.
	RequestServerEncrypted *bool

	// Version contains the information returned from the x-ms-version header response.
	Version *string
}

// BlockBlobGetBlockListOptions contains the optional parameters for the BlockBlob.GetBlockList method.
type BlockBlobGetBlockListOptions struct {
	// If specified, the operation only succeeds if the resource's lease is active and matches this ID.
	LeaseId *string
	// Provides a client-generated, opaque value with a 1 KB character limit that is recorded in the analytics logs when storage
	// analytics logging is enabled.
	RequestId *string
	// The snapshot parameter is an opaque DateTime value that, when present, specifies the blob snapshot to retrieve. For more
	// information on working with blob snapshots, see <a href="https://docs.microsoft.com/en-us/rest/api/storageservices/fileservices/creating-a-snapshot-of-a-blob">Creating
	// a Snapshot of a Blob.</a>
	Snapshot *string
	// The timeout parameter is expressed in seconds. For more information, see <a href="https://docs.microsoft.com/en-us/rest/api/storageservices/fileservices/setting-timeouts-for-blob-service-operations">Setting
	// Timeouts for Blob Service Operations.</a>
	Timeout *int32
}

// BlockBlobStageBlockFromURLOptions contains the optional parameters for the BlockBlob.StageBlockFromURL method.
type BlockBlobStageBlockFromURLOptions struct {
	// Optional. Specifies the encryption key to use to encrypt the data provided in the request. If not specified, encryption
	// is performed with the root account encryption key. For more information, see Encryption at Rest for Azure Storage Services.
	EncryptionKey *string
	// The SHA-256 hash of the provided encryption key. Must be provided if the x-ms-encryption-key header is provided.
	EncryptionKeySha256 *string
	// Optional. Version 2019-07-07 and later. Specifies the name of the encryption scope to use to encrypt the data provided
	// in the request. If not specified, encryption is performed with the default account encryption scope. For more information,
	// see Encryption at Rest for Azure Storage Services.
	EncryptionScope *string
	// If specified, the operation only succeeds if the resource's lease is active and matches this ID.
	LeaseId *string
	// Provides a client-generated, opaque value with a 1 KB character limit that is recorded in the analytics logs when storage
	// analytics logging is enabled.
	RequestId *string
	// Specify the md5 calculated for the range of bytes that must be read from the copy source.
	SourceContentMd5 *[]byte
	// Specify the crc64 calculated for the range of bytes that must be read from the copy source.
	SourceContentcrc64 *[]byte
	// Specify an ETag value to operate only on blobs with a matching value.
	SourceIfMatch *string
	// Specify this header value to operate only on a blob if it has been modified since the specified date/time.
	SourceIfModifiedSince *time.Time
	// Specify an ETag value to operate only on blobs without a matching value.
	SourceIfNoneMatch *string
	// Specify this header value to operate only on a blob if it has not been modified since the specified date/time.
	SourceIfUnmodifiedSince *time.Time
	// Bytes of source data in the specified range.
	SourceRange *string
	// The timeout parameter is expressed in seconds. For more information, see <a href="https://docs.microsoft.com/en-us/rest/api/storageservices/fileservices/setting-timeouts-for-blob-service-operations">Setting
	// Timeouts for Blob Service Operations.</a>
	Timeout *int32
}

// BlockBlobStageBlockFromURLResponse contains the response from method BlockBlob.StageBlockFromURL.
type BlockBlobStageBlockFromURLResponse struct {
	// ClientRequestId contains the information returned from the x-ms-client-request-id header response.
	ClientRequestId *string

	// ContentCrc64 contains the information returned from the x-ms-content-crc64 header response.
	ContentCrc64 *[]byte

	// ContentMd5 contains the information returned from the Content-MD5 header response.
	ContentMd5 *[]byte

	// Date contains the information returned from the Date header response.
	Date *time.Time

	// EncryptionKeySha256 contains the information returned from the x-ms-encryption-key-sha256 header response.
	EncryptionKeySha256 *string

	// EncryptionScope contains the information returned from the x-ms-encryption-scope header response.
	EncryptionScope *string

	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response

	// RequestId contains the information returned from the x-ms-request-id header response.
	RequestId *string

	// RequestServerEncrypted contains the information returned from the x-ms-request-server-encrypted header response.
	RequestServerEncrypted *bool

	// Version contains the information returned from the x-ms-version header response.
	Version *string
}

// BlockBlobStageBlockOptions contains the optional parameters for the BlockBlob.StageBlock method.
type BlockBlobStageBlockOptions struct {
	// Initial data
	Body *azcore.ReadSeekCloser
	// Optional. Specifies the encryption key to use to encrypt the data provided in the request. If not specified, encryption
	// is performed with the root account encryption key. For more information, see Encryption at Rest for Azure Storage Services.
	EncryptionKey *string
	// The SHA-256 hash of the provided encryption key. Must be provided if the x-ms-encryption-key header is provided.
	EncryptionKeySha256 *string
	// Optional. Version 2019-07-07 and later. Specifies the name of the encryption scope to use to encrypt the data provided
	// in the request. If not specified, encryption is performed with the default account encryption scope. For more information,
	// see Encryption at Rest for Azure Storage Services.
	EncryptionScope *string
	// If specified, the operation only succeeds if the resource's lease is active and matches this ID.
	LeaseId *string
	// Provides a client-generated, opaque value with a 1 KB character limit that is recorded in the analytics logs when storage
	// analytics logging is enabled.
	RequestId *string
	// The timeout parameter is expressed in seconds. For more information, see <a href="https://docs.microsoft.com/en-us/rest/api/storageservices/fileservices/setting-timeouts-for-blob-service-operations">Setting
	// Timeouts for Blob Service Operations.</a>
	Timeout *int32
	// Specify the transactional crc64 for the body, to be validated by the service.
	TransactionalContentCrc64 *[]byte
	// Specify the transactional md5 for the body, to be validated by the service.
	TransactionalContentMd5 *[]byte
}

// BlockBlobStageBlockResponse contains the response from method BlockBlob.StageBlock.
type BlockBlobStageBlockResponse struct {
	// ClientRequestId contains the information returned from the x-ms-client-request-id header response.
	ClientRequestId *string

	// ContentCrc64 contains the information returned from the x-ms-content-crc64 header response.
	ContentCrc64 *[]byte

	// ContentMd5 contains the information returned from the Content-MD5 header response.
	ContentMd5 *[]byte

	// Date contains the information returned from the Date header response.
	Date *time.Time

	// EncryptionKeySha256 contains the information returned from the x-ms-encryption-key-sha256 header response.
	EncryptionKeySha256 *string

	// EncryptionScope contains the information returned from the x-ms-encryption-scope header response.
	EncryptionScope *string

	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response

	// RequestId contains the information returned from the x-ms-request-id header response.
	RequestId *string

	// RequestServerEncrypted contains the information returned from the x-ms-request-server-encrypted header response.
	RequestServerEncrypted *bool

	// Version contains the information returned from the x-ms-version header response.
	Version *string
}

// BlockBlobUploadOptions contains the optional parameters for the BlockBlob.Upload method.
type BlockBlobUploadOptions struct {
	// Optional. Sets the blob's cache control. If specified, this property is stored with the blob and returned with a read request.
	BlobCacheControl *string
	// Optional. Sets the blob's Content-Disposition header.
	BlobContentDisposition *string
	// Optional. Sets the blob's content encoding. If specified, this property is stored with the blob and returned with a read
	// request.
	BlobContentEncoding *string
	// Optional. Set the blob's content language. If specified, this property is stored with the blob and returned with a read
	// request.
	BlobContentLanguage *string
	// Optional. An MD5 hash of the blob content. Note that this hash is not validated, as the hashes for the individual blocks
	// were validated when each was uploaded.
	BlobContentMd5 *[]byte
	// Optional. Sets the blob's content type. If specified, this property is stored with the blob and returned with a read request.
	BlobContentType *string
	// Initial data
	Body *azcore.ReadSeekCloser
	// Optional. Specifies the encryption key to use to encrypt the data provided in the request. If not specified, encryption
	// is performed with the root account encryption key. For more information, see Encryption at Rest for Azure Storage Services.
	EncryptionKey *string
	// The SHA-256 hash of the provided encryption key. Must be provided if the x-ms-encryption-key header is provided.
	EncryptionKeySha256 *string
	// Optional. Version 2019-07-07 and later. Specifies the name of the encryption scope to use to encrypt the data provided
	// in the request. If not specified, encryption is performed with the default account encryption scope. For more information,
	// see Encryption at Rest for Azure Storage Services.
	EncryptionScope *string
	// Specify an ETag value to operate only on blobs with a matching value.
	IfMatch *string
	// Specify this header value to operate only on a blob if it has been modified since the specified date/time.
	IfModifiedSince *time.Time
	// Specify an ETag value to operate only on blobs without a matching value.
	IfNoneMatch *string
	// Specify this header value to operate only on a blob if it has not been modified since the specified date/time.
	IfUnmodifiedSince *time.Time
	// If specified, the operation only succeeds if the resource's lease is active and matches this ID.
	LeaseId *string
	// Optional. Specifies a user-defined name-value pair associated with the blob. If no name-value pairs are specified, the
	// operation will copy the metadata from the source blob or file to the destination blob. If one or more name-value pairs
	// are specified, the destination blob is created with the specified metadata, and metadata is not copied from the source
	// blob or file. Note that beginning with version 2009-09-19, metadata names must adhere to the naming rules for C# identifiers.
	// See Naming and Referencing Containers, Blobs, and Metadata for more information.
	Metadata *string
	// Provides a client-generated, opaque value with a 1 KB character limit that is recorded in the analytics logs when storage
	// analytics logging is enabled.
	RequestId *string
	// Optional. Indicates the tier to be set on the blob.
	Tier *AccessTier
	// The timeout parameter is expressed in seconds. For more information, see <a href="https://docs.microsoft.com/en-us/rest/api/storageservices/fileservices/setting-timeouts-for-blob-service-operations">Setting
	// Timeouts for Blob Service Operations.</a>
	Timeout *int32
	// Specify the transactional md5 for the body, to be validated by the service.
	TransactionalContentMd5 *[]byte
}

// BlockBlobUploadResponse contains the response from method BlockBlob.Upload.
type BlockBlobUploadResponse struct {
	// ClientRequestId contains the information returned from the x-ms-client-request-id header response.
	ClientRequestId *string

	// ContentMd5 contains the information returned from the Content-MD5 header response.
	ContentMd5 *[]byte

	// Date contains the information returned from the Date header response.
	Date *time.Time

	// ETag contains the information returned from the ETag header response.
	ETag *string

	// EncryptionKeySha256 contains the information returned from the x-ms-encryption-key-sha256 header response.
	EncryptionKeySha256 *string

	// EncryptionScope contains the information returned from the x-ms-encryption-scope header response.
	EncryptionScope *string

	// LastModified contains the information returned from the Last-Modified header response.
	LastModified *time.Time

	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response

	// RequestId contains the information returned from the x-ms-request-id header response.
	RequestId *string

	// RequestServerEncrypted contains the information returned from the x-ms-request-server-encrypted header response.
	RequestServerEncrypted *bool

	// Version contains the information returned from the x-ms-version header response.
	Version *string
}

type BlockList struct {
	CommittedBlocks   *[]Block `xml:"CommittedBlocks>Block"`
	UncommittedBlocks *[]Block `xml:"UncommittedBlocks>Block"`
}

// BlockListResponse is the response envelope for operations that return a BlockList type.
type BlockListResponse struct {
	// BlobContentLength contains the information returned from the x-ms-blob-content-length header response.
	BlobContentLength *int64     `xml:"BlobContentLength"`
	BlockList         *BlockList `xml:"BlockList"`

	// ClientRequestId contains the information returned from the x-ms-client-request-id header response.
	ClientRequestId *string `xml:"ClientRequestId"`

	// ContentType contains the information returned from the Content-Type header response.
	ContentType *string `xml:"ContentType"`

	// Date contains the information returned from the Date header response.
	Date *time.Time `xml:"Date"`

	// ETag contains the information returned from the ETag header response.
	ETag *string `xml:"ETag"`

	// LastModified contains the information returned from the Last-Modified header response.
	LastModified *time.Time `xml:"LastModified"`

	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response

	// RequestId contains the information returned from the x-ms-request-id header response.
	RequestId *string `xml:"RequestId"`

	// Version contains the information returned from the x-ms-version header response.
	Version *string `xml:"Version"`
}

type BlockLookupList struct {
	Committed   *[]string `xml:"Committed"`
	Latest      *[]string `xml:"Latest"`
	Uncommitted *[]string `xml:"Uncommitted"`
}

func (b BlockLookupList) MarshalXML(e *xml.Encoder, start xml.StartElement) error {
	start.Name.Local = "BlockList"
	type alias BlockLookupList
	aux := &struct {
		*alias
	}{
		alias: (*alias)(&b),
	}
	return e.EncodeElement(aux, start)
}

type ClearRange struct {
	End   *int64 `xml:"End"`
	Start *int64 `xml:"Start"`
}

// ContainerAcquireLeaseOptions contains the optional parameters for the Container.AcquireLease method.
type ContainerAcquireLeaseOptions struct {
	// Specifies the duration of the lease, in seconds, or negative one (-1) for a lease that never expires. A non-infinite lease
	// can be between 15 and 60 seconds. A lease duration cannot be changed using renew or change.
	Duration *int32
	// Specify this header value to operate only on a blob if it has been modified since the specified date/time.
	IfModifiedSince *time.Time
	// Specify this header value to operate only on a blob if it has not been modified since the specified date/time.
	IfUnmodifiedSince *time.Time
	// Proposed lease ID, in a GUID string format. The Blob service returns 400 (Invalid request) if the proposed lease ID is
	// not in the correct format. See Guid Constructor (String) for a list of valid GUID string formats.
	ProposedLeaseId *string
	// Provides a client-generated, opaque value with a 1 KB character limit that is recorded in the analytics logs when storage
	// analytics logging is enabled.
	RequestId *string
	// The timeout parameter is expressed in seconds. For more information, see <a href="https://docs.microsoft.com/en-us/rest/api/storageservices/fileservices/setting-timeouts-for-blob-service-operations">Setting
	// Timeouts for Blob Service Operations.</a>
	Timeout *int32
}

// ContainerAcquireLeaseResponse contains the response from method Container.AcquireLease.
type ContainerAcquireLeaseResponse struct {
	// ClientRequestId contains the information returned from the x-ms-client-request-id header response.
	ClientRequestId *string

	// Date contains the information returned from the Date header response.
	Date *time.Time

	// ETag contains the information returned from the ETag header response.
	ETag *string

	// LastModified contains the information returned from the Last-Modified header response.
	LastModified *time.Time

	// LeaseId contains the information returned from the x-ms-lease-id header response.
	LeaseId *string

	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response

	// RequestId contains the information returned from the x-ms-request-id header response.
	RequestId *string

	// Version contains the information returned from the x-ms-version header response.
	Version *string
}

// ContainerBreakLeaseOptions contains the optional parameters for the Container.BreakLease method.
type ContainerBreakLeaseOptions struct {
	// For a break operation, proposed duration the lease should continue before it is broken, in seconds, between 0 and 60. This
	// break period is only used if it is shorter than the time remaining on the lease. If longer, the time remaining on the lease
	// is used. A new lease will not be available before the break period has expired, but the lease may be held for longer than
	// the break period. If this header does not appear with a break operation, a fixed-duration lease breaks after the remaining
	// lease period elapses, and an infinite lease breaks immediately.
	BreakPeriod *int32
	// Specify this header value to operate only on a blob if it has been modified since the specified date/time.
	IfModifiedSince *time.Time
	// Specify this header value to operate only on a blob if it has not been modified since the specified date/time.
	IfUnmodifiedSince *time.Time
	// Provides a client-generated, opaque value with a 1 KB character limit that is recorded in the analytics logs when storage
	// analytics logging is enabled.
	RequestId *string
	// The timeout parameter is expressed in seconds. For more information, see <a href="https://docs.microsoft.com/en-us/rest/api/storageservices/fileservices/setting-timeouts-for-blob-service-operations">Setting
	// Timeouts for Blob Service Operations.</a>
	Timeout *int32
}

// ContainerBreakLeaseResponse contains the response from method Container.BreakLease.
type ContainerBreakLeaseResponse struct {
	// ClientRequestId contains the information returned from the x-ms-client-request-id header response.
	ClientRequestId *string

	// Date contains the information returned from the Date header response.
	Date *time.Time

	// ETag contains the information returned from the ETag header response.
	ETag *string

	// LastModified contains the information returned from the Last-Modified header response.
	LastModified *time.Time

	// LeaseTime contains the information returned from the x-ms-lease-time header response.
	LeaseTime *int32

	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response

	// RequestId contains the information returned from the x-ms-request-id header response.
	RequestId *string

	// Version contains the information returned from the x-ms-version header response.
	Version *string
}

// ContainerChangeLeaseOptions contains the optional parameters for the Container.ChangeLease method.
type ContainerChangeLeaseOptions struct {
	// Specify this header value to operate only on a blob if it has been modified since the specified date/time.
	IfModifiedSince *time.Time
	// Specify this header value to operate only on a blob if it has not been modified since the specified date/time.
	IfUnmodifiedSince *time.Time
	// Provides a client-generated, opaque value with a 1 KB character limit that is recorded in the analytics logs when storage
	// analytics logging is enabled.
	RequestId *string
	// The timeout parameter is expressed in seconds. For more information, see <a href="https://docs.microsoft.com/en-us/rest/api/storageservices/fileservices/setting-timeouts-for-blob-service-operations">Setting
	// Timeouts for Blob Service Operations.</a>
	Timeout *int32
}

// ContainerChangeLeaseResponse contains the response from method Container.ChangeLease.
type ContainerChangeLeaseResponse struct {
	// ClientRequestId contains the information returned from the x-ms-client-request-id header response.
	ClientRequestId *string

	// Date contains the information returned from the Date header response.
	Date *time.Time

	// ETag contains the information returned from the ETag header response.
	ETag *string

	// LastModified contains the information returned from the Last-Modified header response.
	LastModified *time.Time

	// LeaseId contains the information returned from the x-ms-lease-id header response.
	LeaseId *string

	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response

	// RequestId contains the information returned from the x-ms-request-id header response.
	RequestId *string

	// Version contains the information returned from the x-ms-version header response.
	Version *string
}

// ContainerCreateOptions contains the optional parameters for the Container.Create method.
type ContainerCreateOptions struct {
	// Specifies whether data in the container may be accessed publicly and the level of access
	Access *PublicAccessType
	// Optional. Version 2019-07-07 and later. Specifies the default encryption scope to set on the container and use for all
	// future writes.
	DefaultEncryptionScope *string
	// Optional. Specifies a user-defined name-value pair associated with the blob. If no name-value pairs are specified, the
	// operation will copy the metadata from the source blob or file to the destination blob. If one or more name-value pairs
	// are specified, the destination blob is created with the specified metadata, and metadata is not copied from the source
	// blob or file. Note that beginning with version 2009-09-19, metadata names must adhere to the naming rules for C# identifiers.
	// See Naming and Referencing Containers, Blobs, and Metadata for more information.
	Metadata *string
	// Optional. Version 2019-07-07 and newer. If true, prevents any request from specifying a different encryption scope than
	// the scope set on the container.
	PreventEncryptionScopeOverride *bool
	// Provides a client-generated, opaque value with a 1 KB character limit that is recorded in the analytics logs when storage
	// analytics logging is enabled.
	RequestId *string
	// The timeout parameter is expressed in seconds. For more information, see <a href="https://docs.microsoft.com/en-us/rest/api/storageservices/fileservices/setting-timeouts-for-blob-service-operations">Setting
	// Timeouts for Blob Service Operations.</a>
	Timeout *int32
}

// ContainerCreateResponse contains the response from method Container.Create.
type ContainerCreateResponse struct {
	// ClientRequestId contains the information returned from the x-ms-client-request-id header response.
	ClientRequestId *string

	// Date contains the information returned from the Date header response.
	Date *time.Time

	// ETag contains the information returned from the ETag header response.
	ETag *string

	// LastModified contains the information returned from the Last-Modified header response.
	LastModified *time.Time

	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response

	// RequestId contains the information returned from the x-ms-request-id header response.
	RequestId *string

	// Version contains the information returned from the x-ms-version header response.
	Version *string
}

// ContainerDeleteOptions contains the optional parameters for the Container.Delete method.
type ContainerDeleteOptions struct {
	// Specify this header value to operate only on a blob if it has been modified since the specified date/time.
	IfModifiedSince *time.Time
	// Specify this header value to operate only on a blob if it has not been modified since the specified date/time.
	IfUnmodifiedSince *time.Time
	// If specified, the operation only succeeds if the resource's lease is active and matches this ID.
	LeaseId *string
	// Provides a client-generated, opaque value with a 1 KB character limit that is recorded in the analytics logs when storage
	// analytics logging is enabled.
	RequestId *string
	// The timeout parameter is expressed in seconds. For more information, see <a href="https://docs.microsoft.com/en-us/rest/api/storageservices/fileservices/setting-timeouts-for-blob-service-operations">Setting
	// Timeouts for Blob Service Operations.</a>
	Timeout *int32
}

// ContainerDeleteResponse contains the response from method Container.Delete.
type ContainerDeleteResponse struct {
	// ClientRequestId contains the information returned from the x-ms-client-request-id header response.
	ClientRequestId *string

	// Date contains the information returned from the Date header response.
	Date *time.Time

	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response

	// RequestId contains the information returned from the x-ms-request-id header response.
	RequestId *string

	// Version contains the information returned from the x-ms-version header response.
	Version *string
}

// ContainerGetAccessPolicyOptions contains the optional parameters for the Container.GetAccessPolicy method.
type ContainerGetAccessPolicyOptions struct {
	// If specified, the operation only succeeds if the resource's lease is active and matches this ID.
	LeaseId *string
	// Provides a client-generated, opaque value with a 1 KB character limit that is recorded in the analytics logs when storage
	// analytics logging is enabled.
	RequestId *string
	// The timeout parameter is expressed in seconds. For more information, see <a href="https://docs.microsoft.com/en-us/rest/api/storageservices/fileservices/setting-timeouts-for-blob-service-operations">Setting
	// Timeouts for Blob Service Operations.</a>
	Timeout *int32
}

// ContainerGetAccountInfoResponse contains the response from method Container.GetAccountInfo.
type ContainerGetAccountInfoResponse struct {
	// AccountKind contains the information returned from the x-ms-account-kind header response.
	AccountKind *AccountKind

	// ClientRequestId contains the information returned from the x-ms-client-request-id header response.
	ClientRequestId *string

	// Date contains the information returned from the Date header response.
	Date *time.Time

	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response

	// RequestId contains the information returned from the x-ms-request-id header response.
	RequestId *string

	// SkuName contains the information returned from the x-ms-sku-name header response.
	SkuName *SkuName

	// Version contains the information returned from the x-ms-version header response.
	Version *string
}

// ContainerGetPropertiesOptions contains the optional parameters for the Container.GetProperties method.
type ContainerGetPropertiesOptions struct {
	// If specified, the operation only succeeds if the resource's lease is active and matches this ID.
	LeaseId *string
	// Provides a client-generated, opaque value with a 1 KB character limit that is recorded in the analytics logs when storage
	// analytics logging is enabled.
	RequestId *string
	// The timeout parameter is expressed in seconds. For more information, see <a href="https://docs.microsoft.com/en-us/rest/api/storageservices/fileservices/setting-timeouts-for-blob-service-operations">Setting
	// Timeouts for Blob Service Operations.</a>
	Timeout *int32
}

// ContainerGetPropertiesResponse contains the response from method Container.GetProperties.
type ContainerGetPropertiesResponse struct {
	// BlobPublicAccess contains the information returned from the x-ms-blob-public-access header response.
	BlobPublicAccess *PublicAccessType

	// ClientRequestId contains the information returned from the x-ms-client-request-id header response.
	ClientRequestId *string

	// Date contains the information returned from the Date header response.
	Date *time.Time

	// DefaultEncryptionScope contains the information returned from the x-ms-default-encryption-scope header response.
	DefaultEncryptionScope *string

	// DenyEncryptionScopeOverride contains the information returned from the x-ms-deny-encryption-scope-override header response.
	DenyEncryptionScopeOverride *bool

	// ETag contains the information returned from the ETag header response.
	ETag *string

	// HasImmutabilityPolicy contains the information returned from the x-ms-has-immutability-policy header response.
	HasImmutabilityPolicy *bool

	// HasLegalHold contains the information returned from the x-ms-has-legal-hold header response.
	HasLegalHold *bool

	// LastModified contains the information returned from the Last-Modified header response.
	LastModified *time.Time

	// LeaseDuration contains the information returned from the x-ms-lease-duration header response.
	LeaseDuration *LeaseDurationType

	// LeaseState contains the information returned from the x-ms-lease-state header response.
	LeaseState *LeaseStateType

	// LeaseStatus contains the information returned from the x-ms-lease-status header response.
	LeaseStatus *LeaseStatusType

	// Meta contains the information returned from the x-ms-meta header response.
	Meta *string

	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response

	// RequestId contains the information returned from the x-ms-request-id header response.
	RequestId *string

	// Version contains the information returned from the x-ms-version header response.
	Version *string
}

// An Azure Storage container
type ContainerItem struct {
	// Dictionary of <string>
	Metadata *map[string]*string `xml:"string"`
	Name     *string             `xml:"Name"`

	// Properties of a container
	Properties *ContainerProperties `xml:"Properties"`
}

// ContainerListBlobFlatSegmentOptions contains the optional parameters for the Container.ListBlobFlatSegment method.
type ContainerListBlobFlatSegmentOptions struct {
	// Include this parameter to specify one or more datasets to include in the response.
	Include *[]ListBlobsIncludeItem
	// A string value that identifies the portion of the list of containers to be returned with the next listing operation. The
	// operation returns the NextMarker value within the response body if the listing operation did not return all containers
	// remaining to be listed with the current page. The NextMarker value can be used as the value for the marker parameter in
	// a subsequent call to request the next page of list items. The marker value is opaque to the client.
	Marker *string
	// Specifies the maximum number of containers to return. If the request does not specify maxresults, or specifies a value
	// greater than 5000, the server will return up to 5000 items. Note that if the listing operation crosses a partition boundary,
	// then the service will return a continuation token for retrieving the remainder of the results. For this reason, it is possible
	// that the service will return fewer results than specified by maxresults, or than the default of 5000.
	Maxresults *int32
	// Filters the results to return only containers whose name begins with the specified prefix.
	Prefix *string
	// Provides a client-generated, opaque value with a 1 KB character limit that is recorded in the analytics logs when storage
	// analytics logging is enabled.
	RequestId *string
	// The timeout parameter is expressed in seconds. For more information, see <a href="https://docs.microsoft.com/en-us/rest/api/storageservices/fileservices/setting-timeouts-for-blob-service-operations">Setting
	// Timeouts for Blob Service Operations.</a>
	Timeout *int32
}

// ContainerListBlobHierarchySegmentOptions contains the optional parameters for the Container.ListBlobHierarchySegment method.
type ContainerListBlobHierarchySegmentOptions struct {
	// Include this parameter to specify one or more datasets to include in the response.
	Include *[]ListBlobsIncludeItem
	// A string value that identifies the portion of the list of containers to be returned with the next listing operation. The
	// operation returns the NextMarker value within the response body if the listing operation did not return all containers
	// remaining to be listed with the current page. The NextMarker value can be used as the value for the marker parameter in
	// a subsequent call to request the next page of list items. The marker value is opaque to the client.
	Marker *string
	// Specifies the maximum number of containers to return. If the request does not specify maxresults, or specifies a value
	// greater than 5000, the server will return up to 5000 items. Note that if the listing operation crosses a partition boundary,
	// then the service will return a continuation token for retrieving the remainder of the results. For this reason, it is possible
	// that the service will return fewer results than specified by maxresults, or than the default of 5000.
	Maxresults *int32
	// Filters the results to return only containers whose name begins with the specified prefix.
	Prefix *string
	// Provides a client-generated, opaque value with a 1 KB character limit that is recorded in the analytics logs when storage
	// analytics logging is enabled.
	RequestId *string
	// The timeout parameter is expressed in seconds. For more information, see <a href="https://docs.microsoft.com/en-us/rest/api/storageservices/fileservices/setting-timeouts-for-blob-service-operations">Setting
	// Timeouts for Blob Service Operations.</a>
	Timeout *int32
}

// Properties of a container
type ContainerProperties struct {
	DefaultEncryptionScope         *string            `xml:"DefaultEncryptionScope"`
	Etag                           *string            `xml:"Etag"`
	HasImmutabilityPolicy          *bool              `xml:"HasImmutabilityPolicy"`
	HasLegalHold                   *bool              `xml:"HasLegalHold"`
	LastModified                   *time.Time         `xml:"Last-Modified"`
	LeaseDuration                  *LeaseDurationType `xml:"LeaseDuration"`
	LeaseState                     *LeaseStateType    `xml:"LeaseState"`
	LeaseStatus                    *LeaseStatusType   `xml:"LeaseStatus"`
	PreventEncryptionScopeOverride *bool              `xml:"DenyEncryptionScopeOverride"`
	PublicAccess                   *PublicAccessType  `xml:"PublicAccess"`
}

func (c ContainerProperties) MarshalXML(e *xml.Encoder, start xml.StartElement) error {
	type alias ContainerProperties
	aux := &struct {
		*alias
		LastModified *timeRFC1123 `xml:"Last-Modified"`
	}{
		alias:        (*alias)(&c),
		LastModified: (*timeRFC1123)(c.LastModified),
	}
	return e.EncodeElement(aux, start)
}

func (c *ContainerProperties) UnmarshalXML(d *xml.Decoder, start xml.StartElement) error {
	type alias ContainerProperties
	aux := &struct {
		*alias
		LastModified *timeRFC1123 `xml:"Last-Modified"`
	}{
		alias: (*alias)(c),
	}
	if err := d.DecodeElement(aux, &start); err != nil {
		return err
	}
	c.LastModified = (*time.Time)(aux.LastModified)
	return nil
}

// ContainerReleaseLeaseOptions contains the optional parameters for the Container.ReleaseLease method.
type ContainerReleaseLeaseOptions struct {
	// Specify this header value to operate only on a blob if it has been modified since the specified date/time.
	IfModifiedSince *time.Time
	// Specify this header value to operate only on a blob if it has not been modified since the specified date/time.
	IfUnmodifiedSince *time.Time
	// Provides a client-generated, opaque value with a 1 KB character limit that is recorded in the analytics logs when storage
	// analytics logging is enabled.
	RequestId *string
	// The timeout parameter is expressed in seconds. For more information, see <a href="https://docs.microsoft.com/en-us/rest/api/storageservices/fileservices/setting-timeouts-for-blob-service-operations">Setting
	// Timeouts for Blob Service Operations.</a>
	Timeout *int32
}

// ContainerReleaseLeaseResponse contains the response from method Container.ReleaseLease.
type ContainerReleaseLeaseResponse struct {
	// ClientRequestId contains the information returned from the x-ms-client-request-id header response.
	ClientRequestId *string

	// Date contains the information returned from the Date header response.
	Date *time.Time

	// ETag contains the information returned from the ETag header response.
	ETag *string

	// LastModified contains the information returned from the Last-Modified header response.
	LastModified *time.Time

	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response

	// RequestId contains the information returned from the x-ms-request-id header response.
	RequestId *string

	// Version contains the information returned from the x-ms-version header response.
	Version *string
}

// ContainerRenewLeaseOptions contains the optional parameters for the Container.RenewLease method.
type ContainerRenewLeaseOptions struct {
	// Specify this header value to operate only on a blob if it has been modified since the specified date/time.
	IfModifiedSince *time.Time
	// Specify this header value to operate only on a blob if it has not been modified since the specified date/time.
	IfUnmodifiedSince *time.Time
	// Provides a client-generated, opaque value with a 1 KB character limit that is recorded in the analytics logs when storage
	// analytics logging is enabled.
	RequestId *string
	// The timeout parameter is expressed in seconds. For more information, see <a href="https://docs.microsoft.com/en-us/rest/api/storageservices/fileservices/setting-timeouts-for-blob-service-operations">Setting
	// Timeouts for Blob Service Operations.</a>
	Timeout *int32
}

// ContainerRenewLeaseResponse contains the response from method Container.RenewLease.
type ContainerRenewLeaseResponse struct {
	// ClientRequestId contains the information returned from the x-ms-client-request-id header response.
	ClientRequestId *string

	// Date contains the information returned from the Date header response.
	Date *time.Time

	// ETag contains the information returned from the ETag header response.
	ETag *string

	// LastModified contains the information returned from the Last-Modified header response.
	LastModified *time.Time

	// LeaseId contains the information returned from the x-ms-lease-id header response.
	LeaseId *string

	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response

	// RequestId contains the information returned from the x-ms-request-id header response.
	RequestId *string

	// Version contains the information returned from the x-ms-version header response.
	Version *string
}

// ContainerSetAccessPolicyOptions contains the optional parameters for the Container.SetAccessPolicy method.
type ContainerSetAccessPolicyOptions struct {
	// Specifies whether data in the container may be accessed publicly and the level of access
	Access *PublicAccessType
	// the acls for the container
	ContainerAcl *[]SignedIDentifier
	// Specify this header value to operate only on a blob if it has been modified since the specified date/time.
	IfModifiedSince *time.Time
	// Specify this header value to operate only on a blob if it has not been modified since the specified date/time.
	IfUnmodifiedSince *time.Time
	// If specified, the operation only succeeds if the resource's lease is active and matches this ID.
	LeaseId *string
	// Provides a client-generated, opaque value with a 1 KB character limit that is recorded in the analytics logs when storage
	// analytics logging is enabled.
	RequestId *string
	// The timeout parameter is expressed in seconds. For more information, see <a href="https://docs.microsoft.com/en-us/rest/api/storageservices/fileservices/setting-timeouts-for-blob-service-operations">Setting
	// Timeouts for Blob Service Operations.</a>
	Timeout *int32
}

// ContainerSetAccessPolicyResponse contains the response from method Container.SetAccessPolicy.
type ContainerSetAccessPolicyResponse struct {
	// ClientRequestId contains the information returned from the x-ms-client-request-id header response.
	ClientRequestId *string

	// Date contains the information returned from the Date header response.
	Date *time.Time

	// ETag contains the information returned from the ETag header response.
	ETag *string

	// LastModified contains the information returned from the Last-Modified header response.
	LastModified *time.Time

	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response

	// RequestId contains the information returned from the x-ms-request-id header response.
	RequestId *string

	// Version contains the information returned from the x-ms-version header response.
	Version *string
}

// ContainerSetMetadataOptions contains the optional parameters for the Container.SetMetadata method.
type ContainerSetMetadataOptions struct {
	// Specify this header value to operate only on a blob if it has been modified since the specified date/time.
	IfModifiedSince *time.Time
	// If specified, the operation only succeeds if the resource's lease is active and matches this ID.
	LeaseId *string
	// Optional. Specifies a user-defined name-value pair associated with the blob. If no name-value pairs are specified, the
	// operation will copy the metadata from the source blob or file to the destination blob. If one or more name-value pairs
	// are specified, the destination blob is created with the specified metadata, and metadata is not copied from the source
	// blob or file. Note that beginning with version 2009-09-19, metadata names must adhere to the naming rules for C# identifiers.
	// See Naming and Referencing Containers, Blobs, and Metadata for more information.
	Metadata *string
	// Provides a client-generated, opaque value with a 1 KB character limit that is recorded in the analytics logs when storage
	// analytics logging is enabled.
	RequestId *string
	// The timeout parameter is expressed in seconds. For more information, see <a href="https://docs.microsoft.com/en-us/rest/api/storageservices/fileservices/setting-timeouts-for-blob-service-operations">Setting
	// Timeouts for Blob Service Operations.</a>
	Timeout *int32
}

// ContainerSetMetadataResponse contains the response from method Container.SetMetadata.
type ContainerSetMetadataResponse struct {
	// ClientRequestId contains the information returned from the x-ms-client-request-id header response.
	ClientRequestId *string

	// Date contains the information returned from the Date header response.
	Date *time.Time

	// ETag contains the information returned from the ETag header response.
	ETag *string

	// LastModified contains the information returned from the Last-Modified header response.
	LastModified *time.Time

	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response

	// RequestId contains the information returned from the x-ms-request-id header response.
	RequestId *string

	// Version contains the information returned from the x-ms-version header response.
	Version *string
}

// CORS is an HTTP feature that enables a web application running under one domain to access resources in another domain.
// Web browsers implement a security restriction known as same-origin policy that prevents a web page from calling APIs in
// a different domain; CORS provides a secure way to allow one domain (the origin domain) to call APIs in another domain
type CorsRule struct {
	// the request headers that the origin domain may specify on the CORS request.
	AllowedHeaders *string `xml:"AllowedHeaders"`

	// The methods (HTTP request verbs) that the origin domain may use for a CORS request. (comma separated)
	AllowedMethods *string `xml:"AllowedMethods"`

	// The origin domains that are permitted to make a request against the storage service via CORS. The origin domain is the
	// domain from which the request originates. Note that the origin must be an exact case-sensitive match with the origin that
	// the user age sends to the service. You can also use the wildcard character '*' to allow all origin domains to make requests
	// via CORS.
	AllowedOrigins *string `xml:"AllowedOrigins"`

	// The response headers that may be sent in the response to the CORS request and exposed by the browser to the request issuer
	ExposedHeaders *string `xml:"ExposedHeaders"`

	// The maximum amount time that a browser should cache the preflight OPTIONS request.
	MaxAgeInSeconds *int32 `xml:"MaxAgeInSeconds"`
}

type DataLakeStorageError struct {
	// The service error response object.
	DataLakeStorageErrorDetails *DataLakeStorageErrorDetails `xml:"error"`
}

func newDataLakeStorageError(resp *azcore.Response) error {
	err := DataLakeStorageError{}
	if err := resp.UnmarshalAsXML(&err); err != nil {
		return err
	}
	return err
}

func (e DataLakeStorageError) Error() string {
	msg := ""
	if e.DataLakeStorageErrorDetails != nil {
		msg += fmt.Sprintf("DataLakeStorageErrorDetails: %v\n", *e.DataLakeStorageErrorDetails)
	}
	if msg == "" {
		msg = "missing error info"
	}
	return msg
}

// The service error response object.
type DataLakeStorageErrorDetails struct {
	// The service error code.
	Code *string `xml:"Code"`

	// The service error message.
	Message *string `xml:"Message"`
}

// DirectoryCreateOptions contains the optional parameters for the Directory.Create method.
type DirectoryCreateOptions struct {
	// Cache control for given resource
	CacheControl *string
	// Content disposition for given resource
	ContentDisposition *string
	// Content encoding for given resource
	ContentEncoding *string
	// Content language for given resource
	ContentLanguage *string
	// Content type for given resource
	ContentType *string
	// Optional. User-defined properties to be stored with the file or directory, in the format of a comma-separated list of name
	// and value pairs "n1=v1, n2=v2, ...", where each value is base64 encoded.
	DirectoryProperties *string
	// Specify an ETag value to operate only on blobs with a matching value.
	IfMatch *string
	// Specify this header value to operate only on a blob if it has been modified since the specified date/time.
	IfModifiedSince *time.Time
	// Specify an ETag value to operate only on blobs without a matching value.
	IfNoneMatch *string
	// Specify this header value to operate only on a blob if it has not been modified since the specified date/time.
	IfUnmodifiedSince *time.Time
	// If specified, the operation only succeeds if the resource's lease is active and matches this ID.
	LeaseId *string
	// Optional and only valid if Hierarchical Namespace is enabled for the account. Sets POSIX access permissions for the file
	// owner, the file owning group, and others. Each class may be granted read, write, or execute permission. The sticky bit
	// is also supported. Both symbolic (rwxrw-rw-) and 4-digit octal notation (e.g. 0766) are supported.
	PosixPermissions *string
	// Only valid if Hierarchical Namespace is enabled for the account. This umask restricts permission settings for file and
	// directory, and will only be applied when default Acl does not exist in parent directory. If the umask bit has set, it means
	// that the corresponding permission will be disabled. Otherwise the corresponding permission will be determined by the permission.
	// A 4-digit octal notation (e.g. 0022) is supported here. If no umask was specified, a default umask - 0027 will be used.
	PosixUmask *string
	// Provides a client-generated, opaque value with a 1 KB character limit that is recorded in the analytics logs when storage
	// analytics logging is enabled.
	RequestId *string
	// The timeout parameter is expressed in seconds. For more information, see <a href="https://docs.microsoft.com/en-us/rest/api/storageservices/fileservices/setting-timeouts-for-blob-service-operations">Setting
	// Timeouts for Blob Service Operations.</a>
	Timeout *int32
}

// DirectoryCreateResponse contains the response from method Directory.Create.
type DirectoryCreateResponse struct {
	// ClientRequestId contains the information returned from the x-ms-client-request-id header response.
	ClientRequestId *string

	// ContentLength contains the information returned from the Content-Length header response.
	ContentLength *int64

	// Date contains the information returned from the Date header response.
	Date *time.Time

	// ETag contains the information returned from the ETag header response.
	ETag *string

	// LastModified contains the information returned from the Last-Modified header response.
	LastModified *time.Time

	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response

	// RequestId contains the information returned from the x-ms-request-id header response.
	RequestId *string

	// Version contains the information returned from the x-ms-version header response.
	Version *string
}

// DirectoryDeleteOptions contains the optional parameters for the Directory.Delete method.
type DirectoryDeleteOptions struct {
	// Specify an ETag value to operate only on blobs with a matching value.
	IfMatch *string
	// Specify this header value to operate only on a blob if it has been modified since the specified date/time.
	IfModifiedSince *time.Time
	// Specify an ETag value to operate only on blobs without a matching value.
	IfNoneMatch *string
	// Specify this header value to operate only on a blob if it has not been modified since the specified date/time.
	IfUnmodifiedSince *time.Time
	// If specified, the operation only succeeds if the resource's lease is active and matches this ID.
	LeaseId *string
	// When renaming a directory, the number of paths that are renamed with each invocation is limited. If the number of paths
	// to be renamed exceeds this limit, a continuation token is returned in this response header. When a continuation token is
	// returned in the response, it must be specified in a subsequent invocation of the rename operation to continue renaming
	// the directory.
	Marker *string
	// Provides a client-generated, opaque value with a 1 KB character limit that is recorded in the analytics logs when storage
	// analytics logging is enabled.
	RequestId *string
	// The timeout parameter is expressed in seconds. For more information, see <a href="https://docs.microsoft.com/en-us/rest/api/storageservices/fileservices/setting-timeouts-for-blob-service-operations">Setting
	// Timeouts for Blob Service Operations.</a>
	Timeout *int32
}

// DirectoryDeleteResponse contains the response from method Directory.Delete.
type DirectoryDeleteResponse struct {
	// ClientRequestId contains the information returned from the x-ms-client-request-id header response.
	ClientRequestId *string

	// Continuation contains the information returned from the x-ms-continuation header response.
	Continuation *string

	// Date contains the information returned from the Date header response.
	Date *time.Time

	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response

	// RequestId contains the information returned from the x-ms-request-id header response.
	RequestId *string

	// Version contains the information returned from the x-ms-version header response.
	Version *string
}

// DirectoryGetAccessControlOptions contains the optional parameters for the Directory.GetAccessControl method.
type DirectoryGetAccessControlOptions struct {
	// Specify an ETag value to operate only on blobs with a matching value.
	IfMatch *string
	// Specify this header value to operate only on a blob if it has been modified since the specified date/time.
	IfModifiedSince *time.Time
	// Specify an ETag value to operate only on blobs without a matching value.
	IfNoneMatch *string
	// Specify this header value to operate only on a blob if it has not been modified since the specified date/time.
	IfUnmodifiedSince *time.Time
	// If specified, the operation only succeeds if the resource's lease is active and matches this ID.
	LeaseId *string
	// Provides a client-generated, opaque value with a 1 KB character limit that is recorded in the analytics logs when storage
	// analytics logging is enabled.
	RequestId *string
	// The timeout parameter is expressed in seconds. For more information, see <a href="https://docs.microsoft.com/en-us/rest/api/storageservices/fileservices/setting-timeouts-for-blob-service-operations">Setting
	// Timeouts for Blob Service Operations.</a>
	Timeout *int32
	// Optional. Valid only when Hierarchical Namespace is enabled for the account. If "true", the identity values returned in
	// the x-ms-owner, x-ms-group, and x-ms-acl response headers will be transformed from Azure Active Directory Object IDs to
	// User Principal Names. If "false", the values will be returned as Azure Active Directory Object IDs. The default value is
	// false.
	Upn *bool
}

// DirectoryGetAccessControlResponse contains the response from method Directory.GetAccessControl.
type DirectoryGetAccessControlResponse struct {
	// Acl contains the information returned from the x-ms-acl header response.
	Acl *string

	// Date contains the information returned from the Date header response.
	Date *time.Time

	// ETag contains the information returned from the ETag header response.
	ETag *string

	// Group contains the information returned from the x-ms-group header response.
	Group *string

	// LastModified contains the information returned from the Last-Modified header response.
	LastModified *time.Time

	// Owner contains the information returned from the x-ms-owner header response.
	Owner *string

	// Permissions contains the information returned from the x-ms-permissions header response.
	Permissions *string

	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response

	// RequestId contains the information returned from the x-ms-request-id header response.
	RequestId *string

	// Version contains the information returned from the x-ms-version header response.
	Version *string
}

// DirectoryRenameOptions contains the optional parameters for the Directory.Rename method.
type DirectoryRenameOptions struct {
	// Cache control for given resource
	CacheControl *string
	// Content disposition for given resource
	ContentDisposition *string
	// Content encoding for given resource
	ContentEncoding *string
	// Content language for given resource
	ContentLanguage *string
	// Content type for given resource
	ContentType *string
	// Optional. User-defined properties to be stored with the file or directory, in the format of a comma-separated list of name
	// and value pairs "n1=v1, n2=v2, ...", where each value is base64 encoded.
	DirectoryProperties *string
	// Specify an ETag value to operate only on blobs with a matching value.
	IfMatch *string
	// Specify this header value to operate only on a blob if it has been modified since the specified date/time.
	IfModifiedSince *time.Time
	// Specify an ETag value to operate only on blobs without a matching value.
	IfNoneMatch *string
	// Specify this header value to operate only on a blob if it has not been modified since the specified date/time.
	IfUnmodifiedSince *time.Time
	// If specified, the operation only succeeds if the resource's lease is active and matches this ID.
	LeaseId *string
	// When renaming a directory, the number of paths that are renamed with each invocation is limited. If the number of paths
	// to be renamed exceeds this limit, a continuation token is returned in this response header. When a continuation token is
	// returned in the response, it must be specified in a subsequent invocation of the rename operation to continue renaming
	// the directory.
	Marker *string
	// Optional and only valid if Hierarchical Namespace is enabled for the account. Sets POSIX access permissions for the file
	// owner, the file owning group, and others. Each class may be granted read, write, or execute permission. The sticky bit
	// is also supported. Both symbolic (rwxrw-rw-) and 4-digit octal notation (e.g. 0766) are supported.
	PosixPermissions *string
	// Only valid if Hierarchical Namespace is enabled for the account. This umask restricts permission settings for file and
	// directory, and will only be applied when default Acl does not exist in parent directory. If the umask bit has set, it means
	// that the corresponding permission will be disabled. Otherwise the corresponding permission will be determined by the permission.
	// A 4-digit octal notation (e.g. 0022) is supported here. If no umask was specified, a default umask - 0027 will be used.
	PosixUmask *string
	// Provides a client-generated, opaque value with a 1 KB character limit that is recorded in the analytics logs when storage
	// analytics logging is enabled.
	RequestId *string
	// Specify an ETag value to operate only on blobs with a matching value.
	SourceIfMatch *string
	// Specify this header value to operate only on a blob if it has been modified since the specified date/time.
	SourceIfModifiedSince *time.Time
	// Specify an ETag value to operate only on blobs without a matching value.
	SourceIfNoneMatch *string
	// Specify this header value to operate only on a blob if it has not been modified since the specified date/time.
	SourceIfUnmodifiedSince *time.Time
	// A lease ID for the source path. If specified, the source path must have an active lease and the leaase ID must match.
	SourceLeaseId *string
	// The timeout parameter is expressed in seconds. For more information, see <a href="https://docs.microsoft.com/en-us/rest/api/storageservices/fileservices/setting-timeouts-for-blob-service-operations">Setting
	// Timeouts for Blob Service Operations.</a>
	Timeout *int32
}

// DirectoryRenameResponse contains the response from method Directory.Rename.
type DirectoryRenameResponse struct {
	// ClientRequestId contains the information returned from the x-ms-client-request-id header response.
	ClientRequestId *string

	// ContentLength contains the information returned from the Content-Length header response.
	ContentLength *int64

	// Continuation contains the information returned from the x-ms-continuation header response.
	Continuation *string

	// Date contains the information returned from the Date header response.
	Date *time.Time

	// ETag contains the information returned from the ETag header response.
	ETag *string

	// LastModified contains the information returned from the Last-Modified header response.
	LastModified *time.Time

	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response

	// RequestId contains the information returned from the x-ms-request-id header response.
	RequestId *string

	// Version contains the information returned from the x-ms-version header response.
	Version *string
}

// DirectorySetAccessControlOptions contains the optional parameters for the Directory.SetAccessControl method.
type DirectorySetAccessControlOptions struct {
	// Optional. The owning group of the blob or directory.
	Group *string
	// Specify an ETag value to operate only on blobs with a matching value.
	IfMatch *string
	// Specify this header value to operate only on a blob if it has been modified since the specified date/time.
	IfModifiedSince *time.Time
	// Specify an ETag value to operate only on blobs without a matching value.
	IfNoneMatch *string
	// Specify this header value to operate only on a blob if it has not been modified since the specified date/time.
	IfUnmodifiedSince *time.Time
	// If specified, the operation only succeeds if the resource's lease is active and matches this ID.
	LeaseId *string
	// Optional. The owner of the blob or directory.
	Owner *string
	// Sets POSIX access control rights on files and directories. The value is a comma-separated list of access control entries.
	// Each access control entry (ACE) consists of a scope, a type, a user or group identifier, and permissions in the format
	// "[scope:][type]:[id]:[permissions]".
	PosixAcl *string
	// Optional and only valid if Hierarchical Namespace is enabled for the account. Sets POSIX access permissions for the file
	// owner, the file owning group, and others. Each class may be granted read, write, or execute permission. The sticky bit
	// is also supported. Both symbolic (rwxrw-rw-) and 4-digit octal notation (e.g. 0766) are supported.
	PosixPermissions *string
	// Provides a client-generated, opaque value with a 1 KB character limit that is recorded in the analytics logs when storage
	// analytics logging is enabled.
	RequestId *string
	// The timeout parameter is expressed in seconds. For more information, see <a href="https://docs.microsoft.com/en-us/rest/api/storageservices/fileservices/setting-timeouts-for-blob-service-operations">Setting
	// Timeouts for Blob Service Operations.</a>
	Timeout *int32
}

// DirectorySetAccessControlResponse contains the response from method Directory.SetAccessControl.
type DirectorySetAccessControlResponse struct {
	// Date contains the information returned from the Date header response.
	Date *time.Time

	// ETag contains the information returned from the ETag header response.
	ETag *string

	// LastModified contains the information returned from the Last-Modified header response.
	LastModified *time.Time

	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response

	// RequestId contains the information returned from the x-ms-request-id header response.
	RequestId *string

	// Version contains the information returned from the x-ms-version header response.
	Version *string
}

// Geo-Replication information for the Secondary Storage Service
type GeoReplication struct {
	// A GMT date/time value, to the second. All primary writes preceding this value are guaranteed to be available for read operations
	// at the secondary. Primary writes after this point in time may or may not be available for reads.
	LastSyncTime *time.Time `xml:"LastSyncTime"`

	// The status of the secondary location
	Status *GeoReplicationStatusType `xml:"Status"`
}

func (g GeoReplication) MarshalXML(e *xml.Encoder, start xml.StartElement) error {
	type alias GeoReplication
	aux := &struct {
		*alias
		LastSyncTime *timeRFC1123 `xml:"LastSyncTime"`
	}{
		alias:        (*alias)(&g),
		LastSyncTime: (*timeRFC1123)(g.LastSyncTime),
	}
	return e.EncodeElement(aux, start)
}

func (g *GeoReplication) UnmarshalXML(d *xml.Decoder, start xml.StartElement) error {
	type alias GeoReplication
	aux := &struct {
		*alias
		LastSyncTime *timeRFC1123 `xml:"LastSyncTime"`
	}{
		alias: (*alias)(g),
	}
	if err := d.DecodeElement(aux, &start); err != nil {
		return err
	}
	g.LastSyncTime = (*time.Time)(aux.LastSyncTime)
	return nil
}

// Key information
type KeyInfo struct {
	// The date-time the key expires in ISO 8601 UTC time
	Expiry *string `xml:"Expiry"`

	// The date-time the key is active in ISO 8601 UTC time
	Start *string `xml:"Start"`
}

// An enumeration of blobs
type ListBlobsFlatSegmentResponse struct {
	ContainerName   *string              `xml:"ContainerName,attr"`
	Marker          *string              `xml:"Marker"`
	MaxResults      *int32               `xml:"MaxResults"`
	NextMarker      *string              `xml:"NextMarker"`
	Prefix          *string              `xml:"Prefix"`
	Segment         *BlobFlatListSegment `xml:"Blobs"`
	ServiceEndpoint *string              `xml:"ServiceEndpoint,attr"`
}

// ListBlobsFlatSegmentResponseResponse is the response envelope for operations that return a ListBlobsFlatSegmentResponse
// type.
type ListBlobsFlatSegmentResponseResponse struct {
	// ClientRequestId contains the information returned from the x-ms-client-request-id header response.
	ClientRequestId *string `xml:"ClientRequestId"`

	// ContentType contains the information returned from the Content-Type header response.
	ContentType *string `xml:"ContentType"`

	// Date contains the information returned from the Date header response.
	Date *time.Time `xml:"Date"`

	// An enumeration of blobs
	EnumerationResults *ListBlobsFlatSegmentResponse `xml:"EnumerationResults"`

	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response

	// RequestId contains the information returned from the x-ms-request-id header response.
	RequestId *string `xml:"RequestId"`

	// Version contains the information returned from the x-ms-version header response.
	Version *string `xml:"Version"`
}

// An enumeration of blobs
type ListBlobsHierarchySegmentResponse struct {
	ContainerName   *string                   `xml:"ContainerName,attr"`
	Delimiter       *string                   `xml:"Delimiter"`
	Marker          *string                   `xml:"Marker"`
	MaxResults      *int32                    `xml:"MaxResults"`
	NextMarker      *string                   `xml:"NextMarker"`
	Prefix          *string                   `xml:"Prefix"`
	Segment         *BlobHierarchyListSegment `xml:"Blobs"`
	ServiceEndpoint *string                   `xml:"ServiceEndpoint,attr"`
}

// ListBlobsHierarchySegmentResponseResponse is the response envelope for operations that return a ListBlobsHierarchySegmentResponse
// type.
type ListBlobsHierarchySegmentResponseResponse struct {
	// ClientRequestId contains the information returned from the x-ms-client-request-id header response.
	ClientRequestId *string `xml:"ClientRequestId"`

	// ContentType contains the information returned from the Content-Type header response.
	ContentType *string `xml:"ContentType"`

	// Date contains the information returned from the Date header response.
	Date *time.Time `xml:"Date"`

	// An enumeration of blobs
	EnumerationResults *ListBlobsHierarchySegmentResponse `xml:"EnumerationResults"`

	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response

	// RequestId contains the information returned from the x-ms-request-id header response.
	RequestId *string `xml:"RequestId"`

	// Version contains the information returned from the x-ms-version header response.
	Version *string `xml:"Version"`
}

// An enumeration of containers
type ListContainersSegmentResponse struct {
	ContainerItems  *[]ContainerItem `xml:"Containers>Container"`
	Marker          *string          `xml:"Marker"`
	MaxResults      *int32           `xml:"MaxResults"`
	NextMarker      *string          `xml:"NextMarker"`
	Prefix          *string          `xml:"Prefix"`
	ServiceEndpoint *string          `xml:"ServiceEndpoint,attr"`
}

// ListContainersSegmentResponseResponse is the response envelope for operations that return a ListContainersSegmentResponse
// type.
type ListContainersSegmentResponseResponse struct {
	// ClientRequestId contains the information returned from the x-ms-client-request-id header response.
	ClientRequestId *string `xml:"ClientRequestId"`

	// An enumeration of containers
	EnumerationResults *ListContainersSegmentResponse `xml:"EnumerationResults"`

	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response

	// RequestId contains the information returned from the x-ms-request-id header response.
	RequestId *string `xml:"RequestId"`

	// Version contains the information returned from the x-ms-version header response.
	Version *string `xml:"Version"`
}

// Azure Analytics Logging settings.
type Logging struct {
	// Indicates whether all delete requests should be logged.
	Delete *bool `xml:"Delete"`

	// Indicates whether all read requests should be logged.
	Read *bool `xml:"Read"`

	// the retention policy which determines how long the associated data should persist
	RetentionPolicy *RetentionPolicy `xml:"RetentionPolicy"`

	// The version of Storage Analytics to configure.
	Version *string `xml:"Version"`

	// Indicates whether all write requests should be logged.
	Write *bool `xml:"Write"`
}

// a summary of request statistics grouped by API in hour or minute aggregates for blobs
type Metrics struct {
	// Indicates whether metrics are enabled for the Blob service.
	Enabled *bool `xml:"Enabled"`

	// Indicates whether metrics should generate summary statistics for called API operations.
	IncludeApIs *bool `xml:"IncludeAPIs"`

	// the retention policy which determines how long the associated data should persist
	RetentionPolicy *RetentionPolicy `xml:"RetentionPolicy"`

	// The version of Storage Analytics to configure.
	Version *string `xml:"Version"`
}

// PageBlobClearPagesOptions contains the optional parameters for the PageBlob.ClearPages method.
type PageBlobClearPagesOptions struct {
	// Optional. Specifies the encryption key to use to encrypt the data provided in the request. If not specified, encryption
	// is performed with the root account encryption key. For more information, see Encryption at Rest for Azure Storage Services.
	EncryptionKey *string
	// The SHA-256 hash of the provided encryption key. Must be provided if the x-ms-encryption-key header is provided.
	EncryptionKeySha256 *string
	// Optional. Version 2019-07-07 and later. Specifies the name of the encryption scope to use to encrypt the data provided
	// in the request. If not specified, encryption is performed with the default account encryption scope. For more information,
	// see Encryption at Rest for Azure Storage Services.
	EncryptionScope *string
	// Specify an ETag value to operate only on blobs with a matching value.
	IfMatch *string
	// Specify this header value to operate only on a blob if it has been modified since the specified date/time.
	IfModifiedSince *time.Time
	// Specify an ETag value to operate only on blobs without a matching value.
	IfNoneMatch *string
	// Specify this header value to operate only on a blob if it has the specified sequence number.
	IfSequenceNumberEqualTo *int64
	// Specify this header value to operate only on a blob if it has a sequence number less than the specified.
	IfSequenceNumberLessThan *int64
	// Specify this header value to operate only on a blob if it has a sequence number less than or equal to the specified.
	IfSequenceNumberLessThanOrEqualTo *int64
	// Specify this header value to operate only on a blob if it has not been modified since the specified date/time.
	IfUnmodifiedSince *time.Time
	// If specified, the operation only succeeds if the resource's lease is active and matches this ID.
	LeaseId *string
	// Return only the bytes of the blob in the specified range.
	RangeParameter *string
	// Provides a client-generated, opaque value with a 1 KB character limit that is recorded in the analytics logs when storage
	// analytics logging is enabled.
	RequestId *string
	// The timeout parameter is expressed in seconds. For more information, see <a href="https://docs.microsoft.com/en-us/rest/api/storageservices/fileservices/setting-timeouts-for-blob-service-operations">Setting
	// Timeouts for Blob Service Operations.</a>
	Timeout *int32
}

// PageBlobClearPagesResponse contains the response from method PageBlob.ClearPages.
type PageBlobClearPagesResponse struct {
	// BlobSequenceNumber contains the information returned from the x-ms-blob-sequence-number header response.
	BlobSequenceNumber *int64

	// ClientRequestId contains the information returned from the x-ms-client-request-id header response.
	ClientRequestId *string

	// ContentCrc64 contains the information returned from the x-ms-content-crc64 header response.
	ContentCrc64 *[]byte

	// ContentMd5 contains the information returned from the Content-MD5 header response.
	ContentMd5 *[]byte

	// Date contains the information returned from the Date header response.
	Date *time.Time

	// ETag contains the information returned from the ETag header response.
	ETag *string

	// LastModified contains the information returned from the Last-Modified header response.
	LastModified *time.Time

	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response

	// RequestId contains the information returned from the x-ms-request-id header response.
	RequestId *string

	// Version contains the information returned from the x-ms-version header response.
	Version *string
}

// PageBlobCopyIncrementalOptions contains the optional parameters for the PageBlob.CopyIncremental method.
type PageBlobCopyIncrementalOptions struct {
	// Specify an ETag value to operate only on blobs with a matching value.
	IfMatch *string
	// Specify this header value to operate only on a blob if it has been modified since the specified date/time.
	IfModifiedSince *time.Time
	// Specify an ETag value to operate only on blobs without a matching value.
	IfNoneMatch *string
	// Specify this header value to operate only on a blob if it has not been modified since the specified date/time.
	IfUnmodifiedSince *time.Time
	// Provides a client-generated, opaque value with a 1 KB character limit that is recorded in the analytics logs when storage
	// analytics logging is enabled.
	RequestId *string
	// The timeout parameter is expressed in seconds. For more information, see <a href="https://docs.microsoft.com/en-us/rest/api/storageservices/fileservices/setting-timeouts-for-blob-service-operations">Setting
	// Timeouts for Blob Service Operations.</a>
	Timeout *int32
}

// PageBlobCopyIncrementalResponse contains the response from method PageBlob.CopyIncremental.
type PageBlobCopyIncrementalResponse struct {
	// ClientRequestId contains the information returned from the x-ms-client-request-id header response.
	ClientRequestId *string

	// CopyId contains the information returned from the x-ms-copy-id header response.
	CopyId *string

	// CopyStatus contains the information returned from the x-ms-copy-status header response.
	CopyStatus *CopyStatusType

	// Date contains the information returned from the Date header response.
	Date *time.Time

	// ETag contains the information returned from the ETag header response.
	ETag *string

	// LastModified contains the information returned from the Last-Modified header response.
	LastModified *time.Time

	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response

	// RequestId contains the information returned from the x-ms-request-id header response.
	RequestId *string

	// Version contains the information returned from the x-ms-version header response.
	Version *string
}

// PageBlobCreateOptions contains the optional parameters for the PageBlob.Create method.
type PageBlobCreateOptions struct {
	// Optional. Sets the blob's cache control. If specified, this property is stored with the blob and returned with a read request.
	BlobCacheControl *string
	// Optional. Sets the blob's Content-Disposition header.
	BlobContentDisposition *string
	// Optional. Sets the blob's content encoding. If specified, this property is stored with the blob and returned with a read
	// request.
	BlobContentEncoding *string
	// Optional. Set the blob's content language. If specified, this property is stored with the blob and returned with a read
	// request.
	BlobContentLanguage *string
	// Optional. An MD5 hash of the blob content. Note that this hash is not validated, as the hashes for the individual blocks
	// were validated when each was uploaded.
	BlobContentMd5 *[]byte
	// Optional. Sets the blob's content type. If specified, this property is stored with the blob and returned with a read request.
	BlobContentType *string
	// Set for page blobs only. The sequence number is a user-controlled value that you can use to track requests. The value of
	// the sequence number must be between 0 and 2^63 - 1.
	BlobSequenceNumber *int64
	// Optional. Specifies the encryption key to use to encrypt the data provided in the request. If not specified, encryption
	// is performed with the root account encryption key. For more information, see Encryption at Rest for Azure Storage Services.
	EncryptionKey *string
	// The SHA-256 hash of the provided encryption key. Must be provided if the x-ms-encryption-key header is provided.
	EncryptionKeySha256 *string
	// Optional. Version 2019-07-07 and later. Specifies the name of the encryption scope to use to encrypt the data provided
	// in the request. If not specified, encryption is performed with the default account encryption scope. For more information,
	// see Encryption at Rest for Azure Storage Services.
	EncryptionScope *string
	// Specify an ETag value to operate only on blobs with a matching value.
	IfMatch *string
	// Specify this header value to operate only on a blob if it has been modified since the specified date/time.
	IfModifiedSince *time.Time
	// Specify an ETag value to operate only on blobs without a matching value.
	IfNoneMatch *string
	// Specify this header value to operate only on a blob if it has not been modified since the specified date/time.
	IfUnmodifiedSince *time.Time
	// If specified, the operation only succeeds if the resource's lease is active and matches this ID.
	LeaseId *string
	// Optional. Specifies a user-defined name-value pair associated with the blob. If no name-value pairs are specified, the
	// operation will copy the metadata from the source blob or file to the destination blob. If one or more name-value pairs
	// are specified, the destination blob is created with the specified metadata, and metadata is not copied from the source
	// blob or file. Note that beginning with version 2009-09-19, metadata names must adhere to the naming rules for C# identifiers.
	// See Naming and Referencing Containers, Blobs, and Metadata for more information.
	Metadata *string
	// Provides a client-generated, opaque value with a 1 KB character limit that is recorded in the analytics logs when storage
	// analytics logging is enabled.
	RequestId *string
	// Optional. Indicates the tier to be set on the page blob.
	Tier *PremiumPageBlobAccessTier
	// The timeout parameter is expressed in seconds. For more information, see <a href="https://docs.microsoft.com/en-us/rest/api/storageservices/fileservices/setting-timeouts-for-blob-service-operations">Setting
	// Timeouts for Blob Service Operations.</a>
	Timeout *int32
}

// PageBlobCreateResponse contains the response from method PageBlob.Create.
type PageBlobCreateResponse struct {
	// ClientRequestId contains the information returned from the x-ms-client-request-id header response.
	ClientRequestId *string

	// ContentMd5 contains the information returned from the Content-MD5 header response.
	ContentMd5 *[]byte

	// Date contains the information returned from the Date header response.
	Date *time.Time

	// ETag contains the information returned from the ETag header response.
	ETag *string

	// EncryptionKeySha256 contains the information returned from the x-ms-encryption-key-sha256 header response.
	EncryptionKeySha256 *string

	// EncryptionScope contains the information returned from the x-ms-encryption-scope header response.
	EncryptionScope *string

	// LastModified contains the information returned from the Last-Modified header response.
	LastModified *time.Time

	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response

	// RequestId contains the information returned from the x-ms-request-id header response.
	RequestId *string

	// RequestServerEncrypted contains the information returned from the x-ms-request-server-encrypted header response.
	RequestServerEncrypted *bool

	// Version contains the information returned from the x-ms-version header response.
	Version *string
}

// PageBlobGetPageRangesDiffOptions contains the optional parameters for the PageBlob.GetPageRangesDiff method.
type PageBlobGetPageRangesDiffOptions struct {
	// Specify an ETag value to operate only on blobs with a matching value.
	IfMatch *string
	// Specify this header value to operate only on a blob if it has been modified since the specified date/time.
	IfModifiedSince *time.Time
	// Specify an ETag value to operate only on blobs without a matching value.
	IfNoneMatch *string
	// Specify this header value to operate only on a blob if it has not been modified since the specified date/time.
	IfUnmodifiedSince *time.Time
	// If specified, the operation only succeeds if the resource's lease is active and matches this ID.
	LeaseId *string
	// Optional. This header is only supported in service versions 2019-04-19 and after and specifies the URL of a previous snapshot
	// of the target blob. The response will only contain pages that were changed between the target blob and its previous snapshot.
	PrevSnapshotUrl *url.URL
	// Optional in version 2015-07-08 and newer. The prevsnapshot parameter is a DateTime value that specifies that the response
	// will contain only pages that were changed between target blob and previous snapshot. Changed pages include both updated
	// and cleared pages. The target blob may be a snapshot, as long as the snapshot specified by prevsnapshot is the older of
	// the two. Note that incremental snapshots are currently supported only for blobs created on or after January 1, 2016.
	Prevsnapshot *string
	// Return only the bytes of the blob in the specified range.
	RangeParameter *string
	// Provides a client-generated, opaque value with a 1 KB character limit that is recorded in the analytics logs when storage
	// analytics logging is enabled.
	RequestId *string
	// The snapshot parameter is an opaque DateTime value that, when present, specifies the blob snapshot to retrieve. For more
	// information on working with blob snapshots, see <a href="https://docs.microsoft.com/en-us/rest/api/storageservices/fileservices/creating-a-snapshot-of-a-blob">Creating
	// a Snapshot of a Blob.</a>
	Snapshot *string
	// The timeout parameter is expressed in seconds. For more information, see <a href="https://docs.microsoft.com/en-us/rest/api/storageservices/fileservices/setting-timeouts-for-blob-service-operations">Setting
	// Timeouts for Blob Service Operations.</a>
	Timeout *int32
}

// PageBlobGetPageRangesOptions contains the optional parameters for the PageBlob.GetPageRanges method.
type PageBlobGetPageRangesOptions struct {
	// Specify an ETag value to operate only on blobs with a matching value.
	IfMatch *string
	// Specify this header value to operate only on a blob if it has been modified since the specified date/time.
	IfModifiedSince *time.Time
	// Specify an ETag value to operate only on blobs without a matching value.
	IfNoneMatch *string
	// Specify this header value to operate only on a blob if it has not been modified since the specified date/time.
	IfUnmodifiedSince *time.Time
	// If specified, the operation only succeeds if the resource's lease is active and matches this ID.
	LeaseId *string
	// Return only the bytes of the blob in the specified range.
	RangeParameter *string
	// Provides a client-generated, opaque value with a 1 KB character limit that is recorded in the analytics logs when storage
	// analytics logging is enabled.
	RequestId *string
	// The snapshot parameter is an opaque DateTime value that, when present, specifies the blob snapshot to retrieve. For more
	// information on working with blob snapshots, see <a href="https://docs.microsoft.com/en-us/rest/api/storageservices/fileservices/creating-a-snapshot-of-a-blob">Creating
	// a Snapshot of a Blob.</a>
	Snapshot *string
	// The timeout parameter is expressed in seconds. For more information, see <a href="https://docs.microsoft.com/en-us/rest/api/storageservices/fileservices/setting-timeouts-for-blob-service-operations">Setting
	// Timeouts for Blob Service Operations.</a>
	Timeout *int32
}

// PageBlobResizeOptions contains the optional parameters for the PageBlob.Resize method.
type PageBlobResizeOptions struct {
	// Optional. Specifies the encryption key to use to encrypt the data provided in the request. If not specified, encryption
	// is performed with the root account encryption key. For more information, see Encryption at Rest for Azure Storage Services.
	EncryptionKey *string
	// The SHA-256 hash of the provided encryption key. Must be provided if the x-ms-encryption-key header is provided.
	EncryptionKeySha256 *string
	// Optional. Version 2019-07-07 and later. Specifies the name of the encryption scope to use to encrypt the data provided
	// in the request. If not specified, encryption is performed with the default account encryption scope. For more information,
	// see Encryption at Rest for Azure Storage Services.
	EncryptionScope *string
	// Specify an ETag value to operate only on blobs with a matching value.
	IfMatch *string
	// Specify this header value to operate only on a blob if it has been modified since the specified date/time.
	IfModifiedSince *time.Time
	// Specify an ETag value to operate only on blobs without a matching value.
	IfNoneMatch *string
	// Specify this header value to operate only on a blob if it has not been modified since the specified date/time.
	IfUnmodifiedSince *time.Time
	// If specified, the operation only succeeds if the resource's lease is active and matches this ID.
	LeaseId *string
	// Provides a client-generated, opaque value with a 1 KB character limit that is recorded in the analytics logs when storage
	// analytics logging is enabled.
	RequestId *string
	// The timeout parameter is expressed in seconds. For more information, see <a href="https://docs.microsoft.com/en-us/rest/api/storageservices/fileservices/setting-timeouts-for-blob-service-operations">Setting
	// Timeouts for Blob Service Operations.</a>
	Timeout *int32
}

// PageBlobResizeResponse contains the response from method PageBlob.Resize.
type PageBlobResizeResponse struct {
	// BlobSequenceNumber contains the information returned from the x-ms-blob-sequence-number header response.
	BlobSequenceNumber *int64

	// ClientRequestId contains the information returned from the x-ms-client-request-id header response.
	ClientRequestId *string

	// Date contains the information returned from the Date header response.
	Date *time.Time

	// ETag contains the information returned from the ETag header response.
	ETag *string

	// LastModified contains the information returned from the Last-Modified header response.
	LastModified *time.Time

	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response

	// RequestId contains the information returned from the x-ms-request-id header response.
	RequestId *string

	// Version contains the information returned from the x-ms-version header response.
	Version *string
}

// PageBlobUpdateSequenceNumberOptions contains the optional parameters for the PageBlob.UpdateSequenceNumber method.
type PageBlobUpdateSequenceNumberOptions struct {
	// Set for page blobs only. The sequence number is a user-controlled value that you can use to track requests. The value of
	// the sequence number must be between 0 and 2^63 - 1.
	BlobSequenceNumber *int64
	// Specify an ETag value to operate only on blobs with a matching value.
	IfMatch *string
	// Specify this header value to operate only on a blob if it has been modified since the specified date/time.
	IfModifiedSince *time.Time
	// Specify an ETag value to operate only on blobs without a matching value.
	IfNoneMatch *string
	// Specify this header value to operate only on a blob if it has not been modified since the specified date/time.
	IfUnmodifiedSince *time.Time
	// If specified, the operation only succeeds if the resource's lease is active and matches this ID.
	LeaseId *string
	// Provides a client-generated, opaque value with a 1 KB character limit that is recorded in the analytics logs when storage
	// analytics logging is enabled.
	RequestId *string
	// The timeout parameter is expressed in seconds. For more information, see <a href="https://docs.microsoft.com/en-us/rest/api/storageservices/fileservices/setting-timeouts-for-blob-service-operations">Setting
	// Timeouts for Blob Service Operations.</a>
	Timeout *int32
}

// PageBlobUpdateSequenceNumberResponse contains the response from method PageBlob.UpdateSequenceNumber.
type PageBlobUpdateSequenceNumberResponse struct {
	// BlobSequenceNumber contains the information returned from the x-ms-blob-sequence-number header response.
	BlobSequenceNumber *int64

	// ClientRequestId contains the information returned from the x-ms-client-request-id header response.
	ClientRequestId *string

	// Date contains the information returned from the Date header response.
	Date *time.Time

	// ETag contains the information returned from the ETag header response.
	ETag *string

	// LastModified contains the information returned from the Last-Modified header response.
	LastModified *time.Time

	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response

	// RequestId contains the information returned from the x-ms-request-id header response.
	RequestId *string

	// Version contains the information returned from the x-ms-version header response.
	Version *string
}

// PageBlobUploadPagesFromURLOptions contains the optional parameters for the PageBlob.UploadPagesFromURL method.
type PageBlobUploadPagesFromURLOptions struct {
	// Optional. Specifies the encryption key to use to encrypt the data provided in the request. If not specified, encryption
	// is performed with the root account encryption key. For more information, see Encryption at Rest for Azure Storage Services.
	EncryptionKey *string
	// The SHA-256 hash of the provided encryption key. Must be provided if the x-ms-encryption-key header is provided.
	EncryptionKeySha256 *string
	// Optional. Version 2019-07-07 and later. Specifies the name of the encryption scope to use to encrypt the data provided
	// in the request. If not specified, encryption is performed with the default account encryption scope. For more information,
	// see Encryption at Rest for Azure Storage Services.
	EncryptionScope *string
	// Specify an ETag value to operate only on blobs with a matching value.
	IfMatch *string
	// Specify this header value to operate only on a blob if it has been modified since the specified date/time.
	IfModifiedSince *time.Time
	// Specify an ETag value to operate only on blobs without a matching value.
	IfNoneMatch *string
	// Specify this header value to operate only on a blob if it has the specified sequence number.
	IfSequenceNumberEqualTo *int64
	// Specify this header value to operate only on a blob if it has a sequence number less than the specified.
	IfSequenceNumberLessThan *int64
	// Specify this header value to operate only on a blob if it has a sequence number less than or equal to the specified.
	IfSequenceNumberLessThanOrEqualTo *int64
	// Specify this header value to operate only on a blob if it has not been modified since the specified date/time.
	IfUnmodifiedSince *time.Time
	// If specified, the operation only succeeds if the resource's lease is active and matches this ID.
	LeaseId *string
	// Provides a client-generated, opaque value with a 1 KB character limit that is recorded in the analytics logs when storage
	// analytics logging is enabled.
	RequestId *string
	// Specify the md5 calculated for the range of bytes that must be read from the copy source.
	SourceContentMd5 *[]byte
	// Specify the crc64 calculated for the range of bytes that must be read from the copy source.
	SourceContentcrc64 *[]byte
	// Specify an ETag value to operate only on blobs with a matching value.
	SourceIfMatch *string
	// Specify this header value to operate only on a blob if it has been modified since the specified date/time.
	SourceIfModifiedSince *time.Time
	// Specify an ETag value to operate only on blobs without a matching value.
	SourceIfNoneMatch *string
	// Specify this header value to operate only on a blob if it has not been modified since the specified date/time.
	SourceIfUnmodifiedSince *time.Time
	// The timeout parameter is expressed in seconds. For more information, see <a href="https://docs.microsoft.com/en-us/rest/api/storageservices/fileservices/setting-timeouts-for-blob-service-operations">Setting
	// Timeouts for Blob Service Operations.</a>
	Timeout *int32
}

// PageBlobUploadPagesFromURLResponse contains the response from method PageBlob.UploadPagesFromURL.
type PageBlobUploadPagesFromURLResponse struct {
	// BlobSequenceNumber contains the information returned from the x-ms-blob-sequence-number header response.
	BlobSequenceNumber *int64

	// ContentCrc64 contains the information returned from the x-ms-content-crc64 header response.
	ContentCrc64 *[]byte

	// ContentMd5 contains the information returned from the Content-MD5 header response.
	ContentMd5 *[]byte

	// Date contains the information returned from the Date header response.
	Date *time.Time

	// ETag contains the information returned from the ETag header response.
	ETag *string

	// EncryptionKeySha256 contains the information returned from the x-ms-encryption-key-sha256 header response.
	EncryptionKeySha256 *string

	// EncryptionScope contains the information returned from the x-ms-encryption-scope header response.
	EncryptionScope *string

	// LastModified contains the information returned from the Last-Modified header response.
	LastModified *time.Time

	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response

	// RequestId contains the information returned from the x-ms-request-id header response.
	RequestId *string

	// RequestServerEncrypted contains the information returned from the x-ms-request-server-encrypted header response.
	RequestServerEncrypted *bool

	// Version contains the information returned from the x-ms-version header response.
	Version *string
}

// PageBlobUploadPagesOptions contains the optional parameters for the PageBlob.UploadPages method.
type PageBlobUploadPagesOptions struct {
	// Initial data
	Body *azcore.ReadSeekCloser
	// Optional. Specifies the encryption key to use to encrypt the data provided in the request. If not specified, encryption
	// is performed with the root account encryption key. For more information, see Encryption at Rest for Azure Storage Services.
	EncryptionKey *string
	// The SHA-256 hash of the provided encryption key. Must be provided if the x-ms-encryption-key header is provided.
	EncryptionKeySha256 *string
	// Optional. Version 2019-07-07 and later. Specifies the name of the encryption scope to use to encrypt the data provided
	// in the request. If not specified, encryption is performed with the default account encryption scope. For more information,
	// see Encryption at Rest for Azure Storage Services.
	EncryptionScope *string
	// Specify an ETag value to operate only on blobs with a matching value.
	IfMatch *string
	// Specify this header value to operate only on a blob if it has been modified since the specified date/time.
	IfModifiedSince *time.Time
	// Specify an ETag value to operate only on blobs without a matching value.
	IfNoneMatch *string
	// Specify this header value to operate only on a blob if it has the specified sequence number.
	IfSequenceNumberEqualTo *int64
	// Specify this header value to operate only on a blob if it has a sequence number less than the specified.
	IfSequenceNumberLessThan *int64
	// Specify this header value to operate only on a blob if it has a sequence number less than or equal to the specified.
	IfSequenceNumberLessThanOrEqualTo *int64
	// Specify this header value to operate only on a blob if it has not been modified since the specified date/time.
	IfUnmodifiedSince *time.Time
	// If specified, the operation only succeeds if the resource's lease is active and matches this ID.
	LeaseId *string
	// Return only the bytes of the blob in the specified range.
	RangeParameter *string
	// Provides a client-generated, opaque value with a 1 KB character limit that is recorded in the analytics logs when storage
	// analytics logging is enabled.
	RequestId *string
	// The timeout parameter is expressed in seconds. For more information, see <a href="https://docs.microsoft.com/en-us/rest/api/storageservices/fileservices/setting-timeouts-for-blob-service-operations">Setting
	// Timeouts for Blob Service Operations.</a>
	Timeout *int32
	// Specify the transactional crc64 for the body, to be validated by the service.
	TransactionalContentCrc64 *[]byte
	// Specify the transactional md5 for the body, to be validated by the service.
	TransactionalContentMd5 *[]byte
}

// PageBlobUploadPagesResponse contains the response from method PageBlob.UploadPages.
type PageBlobUploadPagesResponse struct {
	// BlobSequenceNumber contains the information returned from the x-ms-blob-sequence-number header response.
	BlobSequenceNumber *int64

	// ClientRequestId contains the information returned from the x-ms-client-request-id header response.
	ClientRequestId *string

	// ContentCrc64 contains the information returned from the x-ms-content-crc64 header response.
	ContentCrc64 *[]byte

	// ContentMd5 contains the information returned from the Content-MD5 header response.
	ContentMd5 *[]byte

	// Date contains the information returned from the Date header response.
	Date *time.Time

	// ETag contains the information returned from the ETag header response.
	ETag *string

	// EncryptionKeySha256 contains the information returned from the x-ms-encryption-key-sha256 header response.
	EncryptionKeySha256 *string

	// EncryptionScope contains the information returned from the x-ms-encryption-scope header response.
	EncryptionScope *string

	// LastModified contains the information returned from the Last-Modified header response.
	LastModified *time.Time

	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response

	// RequestId contains the information returned from the x-ms-request-id header response.
	RequestId *string

	// RequestServerEncrypted contains the information returned from the x-ms-request-server-encrypted header response.
	RequestServerEncrypted *bool

	// Version contains the information returned from the x-ms-version header response.
	Version *string
}

// the list of pages
type PageList struct {
	ClearRange *[]ClearRange `xml:"ClearRange"`
	PageRange  *[]PageRange  `xml:"PageRange"`
}

// PageListResponse is the response envelope for operations that return a PageList type.
type PageListResponse struct {
	// BlobContentLength contains the information returned from the x-ms-blob-content-length header response.
	BlobContentLength *int64 `xml:"BlobContentLength"`

	// ClientRequestId contains the information returned from the x-ms-client-request-id header response.
	ClientRequestId *string `xml:"ClientRequestId"`

	// Date contains the information returned from the Date header response.
	Date *time.Time `xml:"Date"`

	// ETag contains the information returned from the ETag header response.
	ETag *string `xml:"ETag"`

	// LastModified contains the information returned from the Last-Modified header response.
	LastModified *time.Time `xml:"LastModified"`

	// the list of pages
	PageList *PageList `xml:"PageList"`

	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response

	// RequestId contains the information returned from the x-ms-request-id header response.
	RequestId *string `xml:"RequestId"`

	// Version contains the information returned from the x-ms-version header response.
	Version *string `xml:"Version"`
}

type PageRange struct {
	End   *int64 `xml:"End"`
	Start *int64 `xml:"Start"`
}

// the retention policy which determines how long the associated data should persist
type RetentionPolicy struct {
	// Indicates the number of days that metrics or logging or soft-deleted data should be retained. All data older than this
	// value will be deleted
	Days *int32 `xml:"Days"`

	// Indicates whether a retention policy is enabled for the storage service
	Enabled *bool `xml:"Enabled"`
}

// ServiceGetAccountInfoResponse contains the response from method Service.GetAccountInfo.
type ServiceGetAccountInfoResponse struct {
	// AccountKind contains the information returned from the x-ms-account-kind header response.
	AccountKind *AccountKind

	// ClientRequestId contains the information returned from the x-ms-client-request-id header response.
	ClientRequestId *string

	// Date contains the information returned from the Date header response.
	Date *time.Time

	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response

	// RequestId contains the information returned from the x-ms-request-id header response.
	RequestId *string

	// SkuName contains the information returned from the x-ms-sku-name header response.
	SkuName *SkuName

	// Version contains the information returned from the x-ms-version header response.
	Version *string
}

// ServiceGetPropertiesOptions contains the optional parameters for the Service.GetProperties method.
type ServiceGetPropertiesOptions struct {
	// Provides a client-generated, opaque value with a 1 KB character limit that is recorded in the analytics logs when storage
	// analytics logging is enabled.
	RequestId *string
	// The timeout parameter is expressed in seconds. For more information, see <a href="https://docs.microsoft.com/en-us/rest/api/storageservices/fileservices/setting-timeouts-for-blob-service-operations">Setting
	// Timeouts for Blob Service Operations.</a>
	Timeout *int32
}

// ServiceGetStatisticsOptions contains the optional parameters for the Service.GetStatistics method.
type ServiceGetStatisticsOptions struct {
	// Provides a client-generated, opaque value with a 1 KB character limit that is recorded in the analytics logs when storage
	// analytics logging is enabled.
	RequestId *string
	// The timeout parameter is expressed in seconds. For more information, see <a href="https://docs.microsoft.com/en-us/rest/api/storageservices/fileservices/setting-timeouts-for-blob-service-operations">Setting
	// Timeouts for Blob Service Operations.</a>
	Timeout *int32
}

// ServiceGetUserDelegationKeyOptions contains the optional parameters for the Service.GetUserDelegationKey method.
type ServiceGetUserDelegationKeyOptions struct {
	// Provides a client-generated, opaque value with a 1 KB character limit that is recorded in the analytics logs when storage
	// analytics logging is enabled.
	RequestId *string
	// The timeout parameter is expressed in seconds. For more information, see <a href="https://docs.microsoft.com/en-us/rest/api/storageservices/fileservices/setting-timeouts-for-blob-service-operations">Setting
	// Timeouts for Blob Service Operations.</a>
	Timeout *int32
}

// ServiceListContainersSegmentOptions contains the optional parameters for the Service.ListContainersSegment method.
type ServiceListContainersSegmentOptions struct {
	// A string value that identifies the portion of the list of containers to be returned with the next listing operation. The
	// operation returns the NextMarker value within the response body if the listing operation did not return all containers
	// remaining to be listed with the current page. The NextMarker value can be used as the value for the marker parameter in
	// a subsequent call to request the next page of list items. The marker value is opaque to the client.
	Marker *string
	// Specifies the maximum number of containers to return. If the request does not specify maxresults, or specifies a value
	// greater than 5000, the server will return up to 5000 items. Note that if the listing operation crosses a partition boundary,
	// then the service will return a continuation token for retrieving the remainder of the results. For this reason, it is possible
	// that the service will return fewer results than specified by maxresults, or than the default of 5000.
	Maxresults *int32
	// Filters the results to return only containers whose name begins with the specified prefix.
	Prefix *string
	// Provides a client-generated, opaque value with a 1 KB character limit that is recorded in the analytics logs when storage
	// analytics logging is enabled.
	RequestId *string
	// The timeout parameter is expressed in seconds. For more information, see <a href="https://docs.microsoft.com/en-us/rest/api/storageservices/fileservices/setting-timeouts-for-blob-service-operations">Setting
	// Timeouts for Blob Service Operations.</a>
	Timeout *int32
}

// ServiceSetPropertiesOptions contains the optional parameters for the Service.SetProperties method.
type ServiceSetPropertiesOptions struct {
	// Provides a client-generated, opaque value with a 1 KB character limit that is recorded in the analytics logs when storage
	// analytics logging is enabled.
	RequestId *string
	// The timeout parameter is expressed in seconds. For more information, see <a href="https://docs.microsoft.com/en-us/rest/api/storageservices/fileservices/setting-timeouts-for-blob-service-operations">Setting
	// Timeouts for Blob Service Operations.</a>
	Timeout *int32
}

// ServiceSetPropertiesResponse contains the response from method Service.SetProperties.
type ServiceSetPropertiesResponse struct {
	// ClientRequestId contains the information returned from the x-ms-client-request-id header response.
	ClientRequestId *string

	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response

	// RequestId contains the information returned from the x-ms-request-id header response.
	RequestId *string

	// Version contains the information returned from the x-ms-version header response.
	Version *string
}

// ServiceSubmitBatchOptions contains the optional parameters for the Service.SubmitBatch method.
type ServiceSubmitBatchOptions struct {
	// Provides a client-generated, opaque value with a 1 KB character limit that is recorded in the analytics logs when storage
	// analytics logging is enabled.
	RequestId *string
	// The timeout parameter is expressed in seconds. For more information, see <a href="https://docs.microsoft.com/en-us/rest/api/storageservices/fileservices/setting-timeouts-for-blob-service-operations">Setting
	// Timeouts for Blob Service Operations.</a>
	Timeout *int32
}

// ServiceSubmitBatchResponse contains the response from method Service.SubmitBatch.
type ServiceSubmitBatchResponse struct {
	// ContentType contains the information returned from the Content-Type header response.
	ContentType *string

	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response

	// RequestId contains the information returned from the x-ms-request-id header response.
	RequestId *string

	// Version contains the information returned from the x-ms-version header response.
	Version *string
}

// signed identifier
type SignedIDentifier struct {
	// An Access policy
	AccessPolicy *AccessPolicy `xml:"AccessPolicy"`

	// a unique id
	ID *string `xml:"Id"`
}

// SignedIDentifierArrayResponse is the response envelope for operations that return a []SignedIDentifier type.
type SignedIDentifierArrayResponse struct {
	// BlobPublicAccess contains the information returned from the x-ms-blob-public-access header response.
	BlobPublicAccess *PublicAccessType `xml:"BlobPublicAccess"`

	// ClientRequestId contains the information returned from the x-ms-client-request-id header response.
	ClientRequestId *string `xml:"ClientRequestId"`

	// Date contains the information returned from the Date header response.
	Date *time.Time `xml:"Date"`

	// ETag contains the information returned from the ETag header response.
	ETag *string `xml:"ETag"`

	// LastModified contains the information returned from the Last-Modified header response.
	LastModified *time.Time `xml:"LastModified"`

	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response

	// RequestId contains the information returned from the x-ms-request-id header response.
	RequestId *string `xml:"RequestId"`

	// a collection of signed identifiers
	SignedIdentifiers *[]SignedIDentifier `xml:"SignedIdentifier"`

	// Version contains the information returned from the x-ms-version header response.
	Version *string `xml:"Version"`
}

// The properties that enable an account to host a static website
type StaticWebsite struct {
	// Indicates whether this account is hosting a static website
	Enabled *bool `xml:"Enabled"`

	// The absolute path of the custom 404 page
	ErrorDocument404Path *string `xml:"ErrorDocument404Path"`

	// The default name of the index page under each directory
	IndexDocument *string `xml:"IndexDocument"`
}

type StorageError struct {
	Message *string `xml:"Message"`
}

func newStorageError(resp *azcore.Response) error {
	err := StorageError{}
	if err := resp.UnmarshalAsXML(&err); err != nil {
		return err
	}
	return err
}

func (e StorageError) Error() string {
	msg := ""
	if e.Message != nil {
		msg += fmt.Sprintf("Message: %v\n", *e.Message)
	}
	if msg == "" {
		msg = "missing error info"
	}
	return msg
}

// Storage Service Properties.
type StorageServiceProperties struct {
	// The set of CORS rules.
	Cors *[]CorsRule `xml:"Cors>CorsRule"`

	// The default version to use for requests to the Blob service if an incoming request's version is not specified. Possible
	// values include version 2008-10-27 and all more recent versions
	DefaultServiceVersion *string `xml:"DefaultServiceVersion"`

	// the retention policy which determines how long the associated data should persist
	DeleteRetentionPolicy *RetentionPolicy `xml:"DeleteRetentionPolicy"`

	// a summary of request statistics grouped by API in hour or minute aggregates for blobs
	HourMetrics *Metrics `xml:"HourMetrics"`

	// Azure Analytics Logging settings.
	Logging *Logging `xml:"Logging"`

	// a summary of request statistics grouped by API in hour or minute aggregates for blobs
	MinuteMetrics *Metrics `xml:"MinuteMetrics"`

	// The properties that enable an account to host a static website
	StaticWebsite *StaticWebsite `xml:"StaticWebsite"`
}

// StorageServicePropertiesResponse is the response envelope for operations that return a StorageServiceProperties type.
type StorageServicePropertiesResponse struct {
	// ClientRequestId contains the information returned from the x-ms-client-request-id header response.
	ClientRequestId *string `xml:"ClientRequestId"`

	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response

	// RequestId contains the information returned from the x-ms-request-id header response.
	RequestId *string `xml:"RequestId"`

	// Storage Service Properties.
	StorageServiceProperties *StorageServiceProperties `xml:"StorageServiceProperties"`

	// Version contains the information returned from the x-ms-version header response.
	Version *string `xml:"Version"`
}

// Stats for the storage service.
type StorageServiceStats struct {
	// Geo-Replication information for the Secondary Storage Service
	GeoReplication *GeoReplication `xml:"GeoReplication"`
}

// StorageServiceStatsResponse is the response envelope for operations that return a StorageServiceStats type.
type StorageServiceStatsResponse struct {
	// ClientRequestId contains the information returned from the x-ms-client-request-id header response.
	ClientRequestId *string `xml:"ClientRequestId"`

	// Date contains the information returned from the Date header response.
	Date *time.Time `xml:"Date"`

	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response

	// RequestId contains the information returned from the x-ms-request-id header response.
	RequestId *string `xml:"RequestId"`

	// Stats for the storage service.
	StorageServiceStats *StorageServiceStats `xml:"StorageServiceStats"`

	// Version contains the information returned from the x-ms-version header response.
	Version *string `xml:"Version"`
}

// A user delegation key
type UserDelegationKey struct {
	// The date-time the key expires
	SignedExpiry *time.Time `xml:"SignedExpiry"`

	// The Azure Active Directory object ID in GUID format.
	SignedOid *string `xml:"SignedOid"`

	// Abbreviation of the Azure Storage service that accepts the key
	SignedService *string `xml:"SignedService"`

	// The date-time the key is active
	SignedStart *time.Time `xml:"SignedStart"`

	// The Azure Active Directory tenant ID in GUID format
	SignedTid *string `xml:"SignedTid"`

	// The service version that created the key
	SignedVersion *string `xml:"SignedVersion"`

	// The key as a base64 string
	Value *string `xml:"Value"`
}

func (u UserDelegationKey) MarshalXML(e *xml.Encoder, start xml.StartElement) error {
	type alias UserDelegationKey
	aux := &struct {
		*alias
		SignedExpiry *timeRFC3339 `xml:"SignedExpiry"`
		SignedStart  *timeRFC3339 `xml:"SignedStart"`
	}{
		alias:        (*alias)(&u),
		SignedExpiry: (*timeRFC3339)(u.SignedExpiry),
		SignedStart:  (*timeRFC3339)(u.SignedStart),
	}
	return e.EncodeElement(aux, start)
}

func (u *UserDelegationKey) UnmarshalXML(d *xml.Decoder, start xml.StartElement) error {
	type alias UserDelegationKey
	aux := &struct {
		*alias
		SignedExpiry *timeRFC3339 `xml:"SignedExpiry"`
		SignedStart  *timeRFC3339 `xml:"SignedStart"`
	}{
		alias: (*alias)(u),
	}
	if err := d.DecodeElement(aux, &start); err != nil {
		return err
	}
	u.SignedExpiry = (*time.Time)(aux.SignedExpiry)
	u.SignedStart = (*time.Time)(aux.SignedStart)
	return nil
}

// UserDelegationKeyResponse is the response envelope for operations that return a UserDelegationKey type.
type UserDelegationKeyResponse struct {
	// ClientRequestId contains the information returned from the x-ms-client-request-id header response.
	ClientRequestId *string `xml:"ClientRequestId"`

	// Date contains the information returned from the Date header response.
	Date *time.Time `xml:"Date"`

	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response

	// RequestId contains the information returned from the x-ms-request-id header response.
	RequestId *string `xml:"RequestId"`

	// A user delegation key
	UserDelegationKey *UserDelegationKey `xml:"UserDelegationKey"`

	// Version contains the information returned from the x-ms-version header response.
	Version *string `xml:"Version"`
}
