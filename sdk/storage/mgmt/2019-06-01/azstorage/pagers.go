// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

package azstorage

import (
	"context"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore"
)

// EncryptionScopeListResultPager provides iteration over EncryptionScopeListResult pages.
type EncryptionScopeListResultPager interface {
	// NextPage returns true if the pager advanced to the next page.
	// Returns false if there are no more pages or an error occurred.
	NextPage(context.Context) bool

	// Page returns the current EncryptionScopeListResultResponse.
	PageResponse() *EncryptionScopeListResultResponse

	// Err returns the last error encountered while paging.
	Err() error
}

type encryptionScopeListResultHandleResponse func(*azcore.Response) (*EncryptionScopeListResultResponse, error)

type encryptionScopeListResultAdvancePage func(*EncryptionScopeListResultResponse) (*azcore.Request, error)

type encryptionScopeListResultPager struct {
	// the pipeline for making the request
	pipeline azcore.Pipeline
	// contains the pending request
	request *azcore.Request
	// callback for handling the HTTP response
	responder encryptionScopeListResultHandleResponse
	// callback for advancing to the next page
	advancer encryptionScopeListResultAdvancePage
	// contains the current response
	current *EncryptionScopeListResultResponse
	// any error encountered
	err error
}

func (p *encryptionScopeListResultPager) Err() error {
	return p.err
}

func (p *encryptionScopeListResultPager) NextPage(ctx context.Context) bool {
	if p.current != nil {
		if p.current.EncryptionScopeListResult.NextLink == nil || len(*p.current.EncryptionScopeListResult.NextLink) == 0 {
			return false
		}
		req, err := p.advancer(p.current)
		if err != nil {
			p.err = err
			return false
		}
		p.request = req
	}
	resp, err := p.pipeline.Do(ctx, p.request)
	if err != nil {
		p.err = err
		return false
	}
	result, err := p.responder(resp)
	if err != nil {
		p.err = err
		return false
	}
	p.current = result
	return true
}

func (p *encryptionScopeListResultPager) PageResponse() *EncryptionScopeListResultResponse {
	return p.current
}

// FileShareItemsPager provides iteration over FileShareItems pages.
type FileShareItemsPager interface {
	// NextPage returns true if the pager advanced to the next page.
	// Returns false if there are no more pages or an error occurred.
	NextPage(context.Context) bool

	// Page returns the current FileShareItemsResponse.
	PageResponse() *FileShareItemsResponse

	// Err returns the last error encountered while paging.
	Err() error
}

type fileShareItemsHandleResponse func(*azcore.Response) (*FileShareItemsResponse, error)

type fileShareItemsAdvancePage func(*FileShareItemsResponse) (*azcore.Request, error)

type fileShareItemsPager struct {
	// the pipeline for making the request
	pipeline azcore.Pipeline
	// contains the pending request
	request *azcore.Request
	// callback for handling the HTTP response
	responder fileShareItemsHandleResponse
	// callback for advancing to the next page
	advancer fileShareItemsAdvancePage
	// contains the current response
	current *FileShareItemsResponse
	// any error encountered
	err error
}

func (p *fileShareItemsPager) Err() error {
	return p.err
}

func (p *fileShareItemsPager) NextPage(ctx context.Context) bool {
	if p.current != nil {
		if p.current.FileShareItems.NextLink == nil || len(*p.current.FileShareItems.NextLink) == 0 {
			return false
		}
		req, err := p.advancer(p.current)
		if err != nil {
			p.err = err
			return false
		}
		p.request = req
	}
	resp, err := p.pipeline.Do(ctx, p.request)
	if err != nil {
		p.err = err
		return false
	}
	result, err := p.responder(resp)
	if err != nil {
		p.err = err
		return false
	}
	p.current = result
	return true
}

func (p *fileShareItemsPager) PageResponse() *FileShareItemsResponse {
	return p.current
}

// ListContainerItemsPager provides iteration over ListContainerItems pages.
type ListContainerItemsPager interface {
	// NextPage returns true if the pager advanced to the next page.
	// Returns false if there are no more pages or an error occurred.
	NextPage(context.Context) bool

	// Page returns the current ListContainerItemsResponse.
	PageResponse() *ListContainerItemsResponse

	// Err returns the last error encountered while paging.
	Err() error
}

type listContainerItemsHandleResponse func(*azcore.Response) (*ListContainerItemsResponse, error)

type listContainerItemsAdvancePage func(*ListContainerItemsResponse) (*azcore.Request, error)

type listContainerItemsPager struct {
	// the pipeline for making the request
	pipeline azcore.Pipeline
	// contains the pending request
	request *azcore.Request
	// callback for handling the HTTP response
	responder listContainerItemsHandleResponse
	// callback for advancing to the next page
	advancer listContainerItemsAdvancePage
	// contains the current response
	current *ListContainerItemsResponse
	// any error encountered
	err error
}

func (p *listContainerItemsPager) Err() error {
	return p.err
}

func (p *listContainerItemsPager) NextPage(ctx context.Context) bool {
	if p.current != nil {
		if p.current.ListContainerItems.NextLink == nil || len(*p.current.ListContainerItems.NextLink) == 0 {
			return false
		}
		req, err := p.advancer(p.current)
		if err != nil {
			p.err = err
			return false
		}
		p.request = req
	}
	resp, err := p.pipeline.Do(ctx, p.request)
	if err != nil {
		p.err = err
		return false
	}
	result, err := p.responder(resp)
	if err != nil {
		p.err = err
		return false
	}
	p.current = result
	return true
}

func (p *listContainerItemsPager) PageResponse() *ListContainerItemsResponse {
	return p.current
}

// StorageAccountListResultPager provides iteration over StorageAccountListResult pages.
type StorageAccountListResultPager interface {
	// NextPage returns true if the pager advanced to the next page.
	// Returns false if there are no more pages or an error occurred.
	NextPage(context.Context) bool

	// Page returns the current StorageAccountListResultResponse.
	PageResponse() *StorageAccountListResultResponse

	// Err returns the last error encountered while paging.
	Err() error
}

type storageAccountListResultHandleResponse func(*azcore.Response) (*StorageAccountListResultResponse, error)

type storageAccountListResultAdvancePage func(*StorageAccountListResultResponse) (*azcore.Request, error)

type storageAccountListResultPager struct {
	// the pipeline for making the request
	pipeline azcore.Pipeline
	// contains the pending request
	request *azcore.Request
	// callback for handling the HTTP response
	responder storageAccountListResultHandleResponse
	// callback for advancing to the next page
	advancer storageAccountListResultAdvancePage
	// contains the current response
	current *StorageAccountListResultResponse
	// any error encountered
	err error
}

func (p *storageAccountListResultPager) Err() error {
	return p.err
}

func (p *storageAccountListResultPager) NextPage(ctx context.Context) bool {
	if p.current != nil {
		if p.current.StorageAccountListResult.NextLink == nil || len(*p.current.StorageAccountListResult.NextLink) == 0 {
			return false
		}
		req, err := p.advancer(p.current)
		if err != nil {
			p.err = err
			return false
		}
		p.request = req
	}
	resp, err := p.pipeline.Do(ctx, p.request)
	if err != nil {
		p.err = err
		return false
	}
	result, err := p.responder(resp)
	if err != nil {
		p.err = err
		return false
	}
	p.current = result
	return true
}

func (p *storageAccountListResultPager) PageResponse() *StorageAccountListResultResponse {
	return p.current
}
