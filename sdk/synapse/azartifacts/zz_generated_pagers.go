// +build go1.13

// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

package azartifacts

import (
	"context"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore"
	"reflect"
)

// DataFlowListResponsePager provides iteration over DataFlowListResponse pages.
type DataFlowListResponsePager interface {
	azcore.Pager

	// Page returns the current DataFlowListResponseResponse.
	PageResponse() DataFlowListResponseResponse
}

type dataFlowListResponseCreateRequest func(context.Context) (*azcore.Request, error)

type dataFlowListResponseHandleError func(*azcore.Response) error

type dataFlowListResponseHandleResponse func(*azcore.Response) (DataFlowListResponseResponse, error)

type dataFlowListResponseAdvancePage func(context.Context, DataFlowListResponseResponse) (*azcore.Request, error)

type dataFlowListResponsePager struct {
	// the pipeline for making the request
	pipeline azcore.Pipeline
	// creates the initial request (non-LRO case)
	requester dataFlowListResponseCreateRequest
	// callback for handling response errors
	errorer dataFlowListResponseHandleError
	// callback for handling the HTTP response
	responder dataFlowListResponseHandleResponse
	// callback for advancing to the next page
	advancer dataFlowListResponseAdvancePage
	// contains the current response
	current DataFlowListResponseResponse
	// status codes for successful retrieval
	statusCodes []int
	// any error encountered
	err error
}

func (p *dataFlowListResponsePager) Err() error {
	return p.err
}

func (p *dataFlowListResponsePager) NextPage(ctx context.Context) bool {
	var req *azcore.Request
	var err error
	if !reflect.ValueOf(p.current).IsZero() {
		if p.current.DataFlowListResponse.NextLink == nil || len(*p.current.DataFlowListResponse.NextLink) == 0 {
			return false
		}
		req, err = p.advancer(ctx, p.current)
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		p.err = err
		return false
	}
	resp, err := p.pipeline.Do(req)
	if err != nil {
		p.err = err
		return false
	}
	if !resp.HasStatusCode(p.statusCodes...) {
		p.err = p.errorer(resp)
		return false
	}
	result, err := p.responder(resp)
	if err != nil {
		p.err = err
		return false
	}
	p.current = result
	return true
}

func (p *dataFlowListResponsePager) PageResponse() DataFlowListResponseResponse {
	return p.current
}

// DatasetListResponsePager provides iteration over DatasetListResponse pages.
type DatasetListResponsePager interface {
	azcore.Pager

	// Page returns the current DatasetListResponseResponse.
	PageResponse() DatasetListResponseResponse
}

type datasetListResponseCreateRequest func(context.Context) (*azcore.Request, error)

type datasetListResponseHandleError func(*azcore.Response) error

type datasetListResponseHandleResponse func(*azcore.Response) (DatasetListResponseResponse, error)

type datasetListResponseAdvancePage func(context.Context, DatasetListResponseResponse) (*azcore.Request, error)

type datasetListResponsePager struct {
	// the pipeline for making the request
	pipeline azcore.Pipeline
	// creates the initial request (non-LRO case)
	requester datasetListResponseCreateRequest
	// callback for handling response errors
	errorer datasetListResponseHandleError
	// callback for handling the HTTP response
	responder datasetListResponseHandleResponse
	// callback for advancing to the next page
	advancer datasetListResponseAdvancePage
	// contains the current response
	current DatasetListResponseResponse
	// status codes for successful retrieval
	statusCodes []int
	// any error encountered
	err error
}

func (p *datasetListResponsePager) Err() error {
	return p.err
}

func (p *datasetListResponsePager) NextPage(ctx context.Context) bool {
	var req *azcore.Request
	var err error
	if !reflect.ValueOf(p.current).IsZero() {
		if p.current.DatasetListResponse.NextLink == nil || len(*p.current.DatasetListResponse.NextLink) == 0 {
			return false
		}
		req, err = p.advancer(ctx, p.current)
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		p.err = err
		return false
	}
	resp, err := p.pipeline.Do(req)
	if err != nil {
		p.err = err
		return false
	}
	if !resp.HasStatusCode(p.statusCodes...) {
		p.err = p.errorer(resp)
		return false
	}
	result, err := p.responder(resp)
	if err != nil {
		p.err = err
		return false
	}
	p.current = result
	return true
}

func (p *datasetListResponsePager) PageResponse() DatasetListResponseResponse {
	return p.current
}

// LibraryListResponsePager provides iteration over LibraryListResponse pages.
type LibraryListResponsePager interface {
	azcore.Pager

	// Page returns the current LibraryListResponseResponse.
	PageResponse() LibraryListResponseResponse
}

type libraryListResponseCreateRequest func(context.Context) (*azcore.Request, error)

type libraryListResponseHandleError func(*azcore.Response) error

type libraryListResponseHandleResponse func(*azcore.Response) (LibraryListResponseResponse, error)

type libraryListResponseAdvancePage func(context.Context, LibraryListResponseResponse) (*azcore.Request, error)

type libraryListResponsePager struct {
	// the pipeline for making the request
	pipeline azcore.Pipeline
	// creates the initial request (non-LRO case)
	requester libraryListResponseCreateRequest
	// callback for handling response errors
	errorer libraryListResponseHandleError
	// callback for handling the HTTP response
	responder libraryListResponseHandleResponse
	// callback for advancing to the next page
	advancer libraryListResponseAdvancePage
	// contains the current response
	current LibraryListResponseResponse
	// status codes for successful retrieval
	statusCodes []int
	// any error encountered
	err error
}

func (p *libraryListResponsePager) Err() error {
	return p.err
}

func (p *libraryListResponsePager) NextPage(ctx context.Context) bool {
	var req *azcore.Request
	var err error
	if !reflect.ValueOf(p.current).IsZero() {
		if p.current.LibraryListResponse.NextLink == nil || len(*p.current.LibraryListResponse.NextLink) == 0 {
			return false
		}
		req, err = p.advancer(ctx, p.current)
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		p.err = err
		return false
	}
	resp, err := p.pipeline.Do(req)
	if err != nil {
		p.err = err
		return false
	}
	if !resp.HasStatusCode(p.statusCodes...) {
		p.err = p.errorer(resp)
		return false
	}
	result, err := p.responder(resp)
	if err != nil {
		p.err = err
		return false
	}
	p.current = result
	return true
}

func (p *libraryListResponsePager) PageResponse() LibraryListResponseResponse {
	return p.current
}

// LinkedServiceListResponsePager provides iteration over LinkedServiceListResponse pages.
type LinkedServiceListResponsePager interface {
	azcore.Pager

	// Page returns the current LinkedServiceListResponseResponse.
	PageResponse() LinkedServiceListResponseResponse
}

type linkedServiceListResponseCreateRequest func(context.Context) (*azcore.Request, error)

type linkedServiceListResponseHandleError func(*azcore.Response) error

type linkedServiceListResponseHandleResponse func(*azcore.Response) (LinkedServiceListResponseResponse, error)

type linkedServiceListResponseAdvancePage func(context.Context, LinkedServiceListResponseResponse) (*azcore.Request, error)

type linkedServiceListResponsePager struct {
	// the pipeline for making the request
	pipeline azcore.Pipeline
	// creates the initial request (non-LRO case)
	requester linkedServiceListResponseCreateRequest
	// callback for handling response errors
	errorer linkedServiceListResponseHandleError
	// callback for handling the HTTP response
	responder linkedServiceListResponseHandleResponse
	// callback for advancing to the next page
	advancer linkedServiceListResponseAdvancePage
	// contains the current response
	current LinkedServiceListResponseResponse
	// status codes for successful retrieval
	statusCodes []int
	// any error encountered
	err error
}

func (p *linkedServiceListResponsePager) Err() error {
	return p.err
}

func (p *linkedServiceListResponsePager) NextPage(ctx context.Context) bool {
	var req *azcore.Request
	var err error
	if !reflect.ValueOf(p.current).IsZero() {
		if p.current.LinkedServiceListResponse.NextLink == nil || len(*p.current.LinkedServiceListResponse.NextLink) == 0 {
			return false
		}
		req, err = p.advancer(ctx, p.current)
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		p.err = err
		return false
	}
	resp, err := p.pipeline.Do(req)
	if err != nil {
		p.err = err
		return false
	}
	if !resp.HasStatusCode(p.statusCodes...) {
		p.err = p.errorer(resp)
		return false
	}
	result, err := p.responder(resp)
	if err != nil {
		p.err = err
		return false
	}
	p.current = result
	return true
}

func (p *linkedServiceListResponsePager) PageResponse() LinkedServiceListResponseResponse {
	return p.current
}

// NotebookListResponsePager provides iteration over NotebookListResponse pages.
type NotebookListResponsePager interface {
	azcore.Pager

	// Page returns the current NotebookListResponseResponse.
	PageResponse() NotebookListResponseResponse
}

type notebookListResponseCreateRequest func(context.Context) (*azcore.Request, error)

type notebookListResponseHandleError func(*azcore.Response) error

type notebookListResponseHandleResponse func(*azcore.Response) (NotebookListResponseResponse, error)

type notebookListResponseAdvancePage func(context.Context, NotebookListResponseResponse) (*azcore.Request, error)

type notebookListResponsePager struct {
	// the pipeline for making the request
	pipeline azcore.Pipeline
	// creates the initial request (non-LRO case)
	requester notebookListResponseCreateRequest
	// callback for handling response errors
	errorer notebookListResponseHandleError
	// callback for handling the HTTP response
	responder notebookListResponseHandleResponse
	// callback for advancing to the next page
	advancer notebookListResponseAdvancePage
	// contains the current response
	current NotebookListResponseResponse
	// status codes for successful retrieval
	statusCodes []int
	// any error encountered
	err error
}

func (p *notebookListResponsePager) Err() error {
	return p.err
}

func (p *notebookListResponsePager) NextPage(ctx context.Context) bool {
	var req *azcore.Request
	var err error
	if !reflect.ValueOf(p.current).IsZero() {
		if p.current.NotebookListResponse.NextLink == nil || len(*p.current.NotebookListResponse.NextLink) == 0 {
			return false
		}
		req, err = p.advancer(ctx, p.current)
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		p.err = err
		return false
	}
	resp, err := p.pipeline.Do(req)
	if err != nil {
		p.err = err
		return false
	}
	if !resp.HasStatusCode(p.statusCodes...) {
		p.err = p.errorer(resp)
		return false
	}
	result, err := p.responder(resp)
	if err != nil {
		p.err = err
		return false
	}
	p.current = result
	return true
}

func (p *notebookListResponsePager) PageResponse() NotebookListResponseResponse {
	return p.current
}

// PipelineListResponsePager provides iteration over PipelineListResponse pages.
type PipelineListResponsePager interface {
	azcore.Pager

	// Page returns the current PipelineListResponseResponse.
	PageResponse() PipelineListResponseResponse
}

type pipelineListResponseCreateRequest func(context.Context) (*azcore.Request, error)

type pipelineListResponseHandleError func(*azcore.Response) error

type pipelineListResponseHandleResponse func(*azcore.Response) (PipelineListResponseResponse, error)

type pipelineListResponseAdvancePage func(context.Context, PipelineListResponseResponse) (*azcore.Request, error)

type pipelineListResponsePager struct {
	// the pipeline for making the request
	pipeline azcore.Pipeline
	// creates the initial request (non-LRO case)
	requester pipelineListResponseCreateRequest
	// callback for handling response errors
	errorer pipelineListResponseHandleError
	// callback for handling the HTTP response
	responder pipelineListResponseHandleResponse
	// callback for advancing to the next page
	advancer pipelineListResponseAdvancePage
	// contains the current response
	current PipelineListResponseResponse
	// status codes for successful retrieval
	statusCodes []int
	// any error encountered
	err error
}

func (p *pipelineListResponsePager) Err() error {
	return p.err
}

func (p *pipelineListResponsePager) NextPage(ctx context.Context) bool {
	var req *azcore.Request
	var err error
	if !reflect.ValueOf(p.current).IsZero() {
		if p.current.PipelineListResponse.NextLink == nil || len(*p.current.PipelineListResponse.NextLink) == 0 {
			return false
		}
		req, err = p.advancer(ctx, p.current)
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		p.err = err
		return false
	}
	resp, err := p.pipeline.Do(req)
	if err != nil {
		p.err = err
		return false
	}
	if !resp.HasStatusCode(p.statusCodes...) {
		p.err = p.errorer(resp)
		return false
	}
	result, err := p.responder(resp)
	if err != nil {
		p.err = err
		return false
	}
	p.current = result
	return true
}

func (p *pipelineListResponsePager) PageResponse() PipelineListResponseResponse {
	return p.current
}

// QueryDataFlowDebugSessionsResponsePager provides iteration over QueryDataFlowDebugSessionsResponse pages.
type QueryDataFlowDebugSessionsResponsePager interface {
	azcore.Pager

	// Page returns the current QueryDataFlowDebugSessionsResponseResponse.
	PageResponse() QueryDataFlowDebugSessionsResponseResponse
}

type queryDataFlowDebugSessionsResponseCreateRequest func(context.Context) (*azcore.Request, error)

type queryDataFlowDebugSessionsResponseHandleError func(*azcore.Response) error

type queryDataFlowDebugSessionsResponseHandleResponse func(*azcore.Response) (QueryDataFlowDebugSessionsResponseResponse, error)

type queryDataFlowDebugSessionsResponseAdvancePage func(context.Context, QueryDataFlowDebugSessionsResponseResponse) (*azcore.Request, error)

type queryDataFlowDebugSessionsResponsePager struct {
	// the pipeline for making the request
	pipeline azcore.Pipeline
	// creates the initial request (non-LRO case)
	requester queryDataFlowDebugSessionsResponseCreateRequest
	// callback for handling response errors
	errorer queryDataFlowDebugSessionsResponseHandleError
	// callback for handling the HTTP response
	responder queryDataFlowDebugSessionsResponseHandleResponse
	// callback for advancing to the next page
	advancer queryDataFlowDebugSessionsResponseAdvancePage
	// contains the current response
	current QueryDataFlowDebugSessionsResponseResponse
	// status codes for successful retrieval
	statusCodes []int
	// any error encountered
	err error
}

func (p *queryDataFlowDebugSessionsResponsePager) Err() error {
	return p.err
}

func (p *queryDataFlowDebugSessionsResponsePager) NextPage(ctx context.Context) bool {
	var req *azcore.Request
	var err error
	if !reflect.ValueOf(p.current).IsZero() {
		if p.current.QueryDataFlowDebugSessionsResponse.NextLink == nil || len(*p.current.QueryDataFlowDebugSessionsResponse.NextLink) == 0 {
			return false
		}
		req, err = p.advancer(ctx, p.current)
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		p.err = err
		return false
	}
	resp, err := p.pipeline.Do(req)
	if err != nil {
		p.err = err
		return false
	}
	if !resp.HasStatusCode(p.statusCodes...) {
		p.err = p.errorer(resp)
		return false
	}
	result, err := p.responder(resp)
	if err != nil {
		p.err = err
		return false
	}
	p.current = result
	return true
}

func (p *queryDataFlowDebugSessionsResponsePager) PageResponse() QueryDataFlowDebugSessionsResponseResponse {
	return p.current
}

// SQLScriptsListResponsePager provides iteration over SQLScriptsListResponse pages.
type SQLScriptsListResponsePager interface {
	azcore.Pager

	// Page returns the current SQLScriptsListResponseResponse.
	PageResponse() SQLScriptsListResponseResponse
}

type sqlScriptsListResponseCreateRequest func(context.Context) (*azcore.Request, error)

type sqlScriptsListResponseHandleError func(*azcore.Response) error

type sqlScriptsListResponseHandleResponse func(*azcore.Response) (SQLScriptsListResponseResponse, error)

type sqlScriptsListResponseAdvancePage func(context.Context, SQLScriptsListResponseResponse) (*azcore.Request, error)

type sqlScriptsListResponsePager struct {
	// the pipeline for making the request
	pipeline azcore.Pipeline
	// creates the initial request (non-LRO case)
	requester sqlScriptsListResponseCreateRequest
	// callback for handling response errors
	errorer sqlScriptsListResponseHandleError
	// callback for handling the HTTP response
	responder sqlScriptsListResponseHandleResponse
	// callback for advancing to the next page
	advancer sqlScriptsListResponseAdvancePage
	// contains the current response
	current SQLScriptsListResponseResponse
	// status codes for successful retrieval
	statusCodes []int
	// any error encountered
	err error
}

func (p *sqlScriptsListResponsePager) Err() error {
	return p.err
}

func (p *sqlScriptsListResponsePager) NextPage(ctx context.Context) bool {
	var req *azcore.Request
	var err error
	if !reflect.ValueOf(p.current).IsZero() {
		if p.current.SQLScriptsListResponse.NextLink == nil || len(*p.current.SQLScriptsListResponse.NextLink) == 0 {
			return false
		}
		req, err = p.advancer(ctx, p.current)
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		p.err = err
		return false
	}
	resp, err := p.pipeline.Do(req)
	if err != nil {
		p.err = err
		return false
	}
	if !resp.HasStatusCode(p.statusCodes...) {
		p.err = p.errorer(resp)
		return false
	}
	result, err := p.responder(resp)
	if err != nil {
		p.err = err
		return false
	}
	p.current = result
	return true
}

func (p *sqlScriptsListResponsePager) PageResponse() SQLScriptsListResponseResponse {
	return p.current
}

// SparkJobDefinitionsListResponsePager provides iteration over SparkJobDefinitionsListResponse pages.
type SparkJobDefinitionsListResponsePager interface {
	azcore.Pager

	// Page returns the current SparkJobDefinitionsListResponseResponse.
	PageResponse() SparkJobDefinitionsListResponseResponse
}

type sparkJobDefinitionsListResponseCreateRequest func(context.Context) (*azcore.Request, error)

type sparkJobDefinitionsListResponseHandleError func(*azcore.Response) error

type sparkJobDefinitionsListResponseHandleResponse func(*azcore.Response) (SparkJobDefinitionsListResponseResponse, error)

type sparkJobDefinitionsListResponseAdvancePage func(context.Context, SparkJobDefinitionsListResponseResponse) (*azcore.Request, error)

type sparkJobDefinitionsListResponsePager struct {
	// the pipeline for making the request
	pipeline azcore.Pipeline
	// creates the initial request (non-LRO case)
	requester sparkJobDefinitionsListResponseCreateRequest
	// callback for handling response errors
	errorer sparkJobDefinitionsListResponseHandleError
	// callback for handling the HTTP response
	responder sparkJobDefinitionsListResponseHandleResponse
	// callback for advancing to the next page
	advancer sparkJobDefinitionsListResponseAdvancePage
	// contains the current response
	current SparkJobDefinitionsListResponseResponse
	// status codes for successful retrieval
	statusCodes []int
	// any error encountered
	err error
}

func (p *sparkJobDefinitionsListResponsePager) Err() error {
	return p.err
}

func (p *sparkJobDefinitionsListResponsePager) NextPage(ctx context.Context) bool {
	var req *azcore.Request
	var err error
	if !reflect.ValueOf(p.current).IsZero() {
		if p.current.SparkJobDefinitionsListResponse.NextLink == nil || len(*p.current.SparkJobDefinitionsListResponse.NextLink) == 0 {
			return false
		}
		req, err = p.advancer(ctx, p.current)
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		p.err = err
		return false
	}
	resp, err := p.pipeline.Do(req)
	if err != nil {
		p.err = err
		return false
	}
	if !resp.HasStatusCode(p.statusCodes...) {
		p.err = p.errorer(resp)
		return false
	}
	result, err := p.responder(resp)
	if err != nil {
		p.err = err
		return false
	}
	p.current = result
	return true
}

func (p *sparkJobDefinitionsListResponsePager) PageResponse() SparkJobDefinitionsListResponseResponse {
	return p.current
}

// TriggerListResponsePager provides iteration over TriggerListResponse pages.
type TriggerListResponsePager interface {
	azcore.Pager

	// Page returns the current TriggerListResponseResponse.
	PageResponse() TriggerListResponseResponse
}

type triggerListResponseCreateRequest func(context.Context) (*azcore.Request, error)

type triggerListResponseHandleError func(*azcore.Response) error

type triggerListResponseHandleResponse func(*azcore.Response) (TriggerListResponseResponse, error)

type triggerListResponseAdvancePage func(context.Context, TriggerListResponseResponse) (*azcore.Request, error)

type triggerListResponsePager struct {
	// the pipeline for making the request
	pipeline azcore.Pipeline
	// creates the initial request (non-LRO case)
	requester triggerListResponseCreateRequest
	// callback for handling response errors
	errorer triggerListResponseHandleError
	// callback for handling the HTTP response
	responder triggerListResponseHandleResponse
	// callback for advancing to the next page
	advancer triggerListResponseAdvancePage
	// contains the current response
	current TriggerListResponseResponse
	// status codes for successful retrieval
	statusCodes []int
	// any error encountered
	err error
}

func (p *triggerListResponsePager) Err() error {
	return p.err
}

func (p *triggerListResponsePager) NextPage(ctx context.Context) bool {
	var req *azcore.Request
	var err error
	if !reflect.ValueOf(p.current).IsZero() {
		if p.current.TriggerListResponse.NextLink == nil || len(*p.current.TriggerListResponse.NextLink) == 0 {
			return false
		}
		req, err = p.advancer(ctx, p.current)
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		p.err = err
		return false
	}
	resp, err := p.pipeline.Do(req)
	if err != nil {
		p.err = err
		return false
	}
	if !resp.HasStatusCode(p.statusCodes...) {
		p.err = p.errorer(resp)
		return false
	}
	result, err := p.responder(resp)
	if err != nil {
		p.err = err
		return false
	}
	p.current = result
	return true
}

func (p *triggerListResponsePager) PageResponse() TriggerListResponseResponse {
	return p.current
}
