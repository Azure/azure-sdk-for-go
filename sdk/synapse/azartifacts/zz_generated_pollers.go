// +build go1.13

// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

package azartifacts

import (
	"context"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore"
	"net/http"
	"time"
)

// CreateDataFlowDebugSessionResponsePoller provides polling facilities until the operation reaches a terminal state.
type CreateDataFlowDebugSessionResponsePoller interface {
	azcore.Poller
	// FinalResponse performs a final GET to the service and returns the final response
	// for the polling operation. If there is an error performing the final GET then an error is returned.
	// If the final GET succeeded then the final CreateDataFlowDebugSessionResponseResponse will be returned.
	FinalResponse(ctx context.Context) (CreateDataFlowDebugSessionResponseResponse, error)
}

type createDataFlowDebugSessionResponsePoller struct {
	pt *azcore.LROPoller
}

func (p *createDataFlowDebugSessionResponsePoller) Done() bool {
	return p.pt.Done()
}

func (p *createDataFlowDebugSessionResponsePoller) Poll(ctx context.Context) (*http.Response, error) {
	return p.pt.Poll(ctx)
}

func (p *createDataFlowDebugSessionResponsePoller) FinalResponse(ctx context.Context) (CreateDataFlowDebugSessionResponseResponse, error) {
	respType := CreateDataFlowDebugSessionResponseResponse{CreateDataFlowDebugSessionResponse: &CreateDataFlowDebugSessionResponse{}}
	resp, err := p.pt.FinalResponse(ctx, respType.CreateDataFlowDebugSessionResponse)
	if err != nil {
		return CreateDataFlowDebugSessionResponseResponse{}, err
	}
	respType.RawResponse = resp
	return respType, nil
}

func (p *createDataFlowDebugSessionResponsePoller) ResumeToken() (string, error) {
	return p.pt.ResumeToken()
}

func (p *createDataFlowDebugSessionResponsePoller) pollUntilDone(ctx context.Context, freq time.Duration) (CreateDataFlowDebugSessionResponseResponse, error) {
	respType := CreateDataFlowDebugSessionResponseResponse{CreateDataFlowDebugSessionResponse: &CreateDataFlowDebugSessionResponse{}}
	resp, err := p.pt.PollUntilDone(ctx, freq, respType.CreateDataFlowDebugSessionResponse)
	if err != nil {
		return CreateDataFlowDebugSessionResponseResponse{}, err
	}
	respType.RawResponse = resp
	return respType, nil
}

// DataFlowDebugCommandResponsePoller provides polling facilities until the operation reaches a terminal state.
type DataFlowDebugCommandResponsePoller interface {
	azcore.Poller
	// FinalResponse performs a final GET to the service and returns the final response
	// for the polling operation. If there is an error performing the final GET then an error is returned.
	// If the final GET succeeded then the final DataFlowDebugCommandResponseResponse will be returned.
	FinalResponse(ctx context.Context) (DataFlowDebugCommandResponseResponse, error)
}

type dataFlowDebugCommandResponsePoller struct {
	pt *azcore.LROPoller
}

func (p *dataFlowDebugCommandResponsePoller) Done() bool {
	return p.pt.Done()
}

func (p *dataFlowDebugCommandResponsePoller) Poll(ctx context.Context) (*http.Response, error) {
	return p.pt.Poll(ctx)
}

func (p *dataFlowDebugCommandResponsePoller) FinalResponse(ctx context.Context) (DataFlowDebugCommandResponseResponse, error) {
	respType := DataFlowDebugCommandResponseResponse{DataFlowDebugCommandResponse: &DataFlowDebugCommandResponse{}}
	resp, err := p.pt.FinalResponse(ctx, respType.DataFlowDebugCommandResponse)
	if err != nil {
		return DataFlowDebugCommandResponseResponse{}, err
	}
	respType.RawResponse = resp
	return respType, nil
}

func (p *dataFlowDebugCommandResponsePoller) ResumeToken() (string, error) {
	return p.pt.ResumeToken()
}

func (p *dataFlowDebugCommandResponsePoller) pollUntilDone(ctx context.Context, freq time.Duration) (DataFlowDebugCommandResponseResponse, error) {
	respType := DataFlowDebugCommandResponseResponse{DataFlowDebugCommandResponse: &DataFlowDebugCommandResponse{}}
	resp, err := p.pt.PollUntilDone(ctx, freq, respType.DataFlowDebugCommandResponse)
	if err != nil {
		return DataFlowDebugCommandResponseResponse{}, err
	}
	respType.RawResponse = resp
	return respType, nil
}

// DataFlowResourcePoller provides polling facilities until the operation reaches a terminal state.
type DataFlowResourcePoller interface {
	azcore.Poller
	// FinalResponse performs a final GET to the service and returns the final response
	// for the polling operation. If there is an error performing the final GET then an error is returned.
	// If the final GET succeeded then the final DataFlowResourceResponse will be returned.
	FinalResponse(ctx context.Context) (DataFlowResourceResponse, error)
}

type dataFlowResourcePoller struct {
	pt *azcore.LROPoller
}

func (p *dataFlowResourcePoller) Done() bool {
	return p.pt.Done()
}

func (p *dataFlowResourcePoller) Poll(ctx context.Context) (*http.Response, error) {
	return p.pt.Poll(ctx)
}

func (p *dataFlowResourcePoller) FinalResponse(ctx context.Context) (DataFlowResourceResponse, error) {
	respType := DataFlowResourceResponse{DataFlowResource: &DataFlowResource{}}
	resp, err := p.pt.FinalResponse(ctx, respType.DataFlowResource)
	if err != nil {
		return DataFlowResourceResponse{}, err
	}
	respType.RawResponse = resp
	return respType, nil
}

func (p *dataFlowResourcePoller) ResumeToken() (string, error) {
	return p.pt.ResumeToken()
}

func (p *dataFlowResourcePoller) pollUntilDone(ctx context.Context, freq time.Duration) (DataFlowResourceResponse, error) {
	respType := DataFlowResourceResponse{DataFlowResource: &DataFlowResource{}}
	resp, err := p.pt.PollUntilDone(ctx, freq, respType.DataFlowResource)
	if err != nil {
		return DataFlowResourceResponse{}, err
	}
	respType.RawResponse = resp
	return respType, nil
}

// DatasetResourcePoller provides polling facilities until the operation reaches a terminal state.
type DatasetResourcePoller interface {
	azcore.Poller
	// FinalResponse performs a final GET to the service and returns the final response
	// for the polling operation. If there is an error performing the final GET then an error is returned.
	// If the final GET succeeded then the final DatasetResourceResponse will be returned.
	FinalResponse(ctx context.Context) (DatasetResourceResponse, error)
}

type datasetResourcePoller struct {
	pt *azcore.LROPoller
}

func (p *datasetResourcePoller) Done() bool {
	return p.pt.Done()
}

func (p *datasetResourcePoller) Poll(ctx context.Context) (*http.Response, error) {
	return p.pt.Poll(ctx)
}

func (p *datasetResourcePoller) FinalResponse(ctx context.Context) (DatasetResourceResponse, error) {
	respType := DatasetResourceResponse{DatasetResource: &DatasetResource{}}
	resp, err := p.pt.FinalResponse(ctx, respType.DatasetResource)
	if err != nil {
		return DatasetResourceResponse{}, err
	}
	respType.RawResponse = resp
	return respType, nil
}

func (p *datasetResourcePoller) ResumeToken() (string, error) {
	return p.pt.ResumeToken()
}

func (p *datasetResourcePoller) pollUntilDone(ctx context.Context, freq time.Duration) (DatasetResourceResponse, error) {
	respType := DatasetResourceResponse{DatasetResource: &DatasetResource{}}
	resp, err := p.pt.PollUntilDone(ctx, freq, respType.DatasetResource)
	if err != nil {
		return DatasetResourceResponse{}, err
	}
	respType.RawResponse = resp
	return respType, nil
}

// HTTPPoller provides polling facilities until the operation reaches a terminal state.
type HTTPPoller interface {
	azcore.Poller
	// FinalResponse performs a final GET to the service and returns the final response
	// for the polling operation. If there is an error performing the final GET then an error is returned.
	// If the final GET succeeded then the final *http.Response will be returned.
	FinalResponse(ctx context.Context) (*http.Response, error)
}

type httpPoller struct {
	pt *azcore.LROPoller
}

func (p *httpPoller) Done() bool {
	return p.pt.Done()
}

func (p *httpPoller) Poll(ctx context.Context) (*http.Response, error) {
	return p.pt.Poll(ctx)
}

func (p *httpPoller) FinalResponse(ctx context.Context) (*http.Response, error) {
	return p.pt.FinalResponse(ctx, nil)
}

func (p *httpPoller) ResumeToken() (string, error) {
	return p.pt.ResumeToken()
}

func (p *httpPoller) pollUntilDone(ctx context.Context, freq time.Duration) (*http.Response, error) {
	return p.pt.PollUntilDone(ctx, freq, nil)
}

// LibraryResourceInfoPoller provides polling facilities until the operation reaches a terminal state.
type LibraryResourceInfoPoller interface {
	azcore.Poller
	// FinalResponse performs a final GET to the service and returns the final response
	// for the polling operation. If there is an error performing the final GET then an error is returned.
	// If the final GET succeeded then the final LibraryResourceInfoResponse will be returned.
	FinalResponse(ctx context.Context) (LibraryResourceInfoResponse, error)
}

type libraryResourceInfoPoller struct {
	pt *azcore.LROPoller
}

func (p *libraryResourceInfoPoller) Done() bool {
	return p.pt.Done()
}

func (p *libraryResourceInfoPoller) Poll(ctx context.Context) (*http.Response, error) {
	return p.pt.Poll(ctx)
}

func (p *libraryResourceInfoPoller) FinalResponse(ctx context.Context) (LibraryResourceInfoResponse, error) {
	respType := LibraryResourceInfoResponse{LibraryResourceInfo: &LibraryResourceInfo{}}
	resp, err := p.pt.FinalResponse(ctx, respType.LibraryResourceInfo)
	if err != nil {
		return LibraryResourceInfoResponse{}, err
	}
	respType.RawResponse = resp
	return respType, nil
}

func (p *libraryResourceInfoPoller) ResumeToken() (string, error) {
	return p.pt.ResumeToken()
}

func (p *libraryResourceInfoPoller) pollUntilDone(ctx context.Context, freq time.Duration) (LibraryResourceInfoResponse, error) {
	respType := LibraryResourceInfoResponse{LibraryResourceInfo: &LibraryResourceInfo{}}
	resp, err := p.pt.PollUntilDone(ctx, freq, respType.LibraryResourceInfo)
	if err != nil {
		return LibraryResourceInfoResponse{}, err
	}
	respType.RawResponse = resp
	return respType, nil
}

// LinkedServiceResourcePoller provides polling facilities until the operation reaches a terminal state.
type LinkedServiceResourcePoller interface {
	azcore.Poller
	// FinalResponse performs a final GET to the service and returns the final response
	// for the polling operation. If there is an error performing the final GET then an error is returned.
	// If the final GET succeeded then the final LinkedServiceResourceResponse will be returned.
	FinalResponse(ctx context.Context) (LinkedServiceResourceResponse, error)
}

type linkedServiceResourcePoller struct {
	pt *azcore.LROPoller
}

func (p *linkedServiceResourcePoller) Done() bool {
	return p.pt.Done()
}

func (p *linkedServiceResourcePoller) Poll(ctx context.Context) (*http.Response, error) {
	return p.pt.Poll(ctx)
}

func (p *linkedServiceResourcePoller) FinalResponse(ctx context.Context) (LinkedServiceResourceResponse, error) {
	respType := LinkedServiceResourceResponse{LinkedServiceResource: &LinkedServiceResource{}}
	resp, err := p.pt.FinalResponse(ctx, respType.LinkedServiceResource)
	if err != nil {
		return LinkedServiceResourceResponse{}, err
	}
	respType.RawResponse = resp
	return respType, nil
}

func (p *linkedServiceResourcePoller) ResumeToken() (string, error) {
	return p.pt.ResumeToken()
}

func (p *linkedServiceResourcePoller) pollUntilDone(ctx context.Context, freq time.Duration) (LinkedServiceResourceResponse, error) {
	respType := LinkedServiceResourceResponse{LinkedServiceResource: &LinkedServiceResource{}}
	resp, err := p.pt.PollUntilDone(ctx, freq, respType.LinkedServiceResource)
	if err != nil {
		return LinkedServiceResourceResponse{}, err
	}
	respType.RawResponse = resp
	return respType, nil
}

// NotebookResourcePoller provides polling facilities until the operation reaches a terminal state.
type NotebookResourcePoller interface {
	azcore.Poller
	// FinalResponse performs a final GET to the service and returns the final response
	// for the polling operation. If there is an error performing the final GET then an error is returned.
	// If the final GET succeeded then the final NotebookResourceResponse will be returned.
	FinalResponse(ctx context.Context) (NotebookResourceResponse, error)
}

type notebookResourcePoller struct {
	pt *azcore.LROPoller
}

func (p *notebookResourcePoller) Done() bool {
	return p.pt.Done()
}

func (p *notebookResourcePoller) Poll(ctx context.Context) (*http.Response, error) {
	return p.pt.Poll(ctx)
}

func (p *notebookResourcePoller) FinalResponse(ctx context.Context) (NotebookResourceResponse, error) {
	respType := NotebookResourceResponse{NotebookResource: &NotebookResource{}}
	resp, err := p.pt.FinalResponse(ctx, respType.NotebookResource)
	if err != nil {
		return NotebookResourceResponse{}, err
	}
	respType.RawResponse = resp
	return respType, nil
}

func (p *notebookResourcePoller) ResumeToken() (string, error) {
	return p.pt.ResumeToken()
}

func (p *notebookResourcePoller) pollUntilDone(ctx context.Context, freq time.Duration) (NotebookResourceResponse, error) {
	respType := NotebookResourceResponse{NotebookResource: &NotebookResource{}}
	resp, err := p.pt.PollUntilDone(ctx, freq, respType.NotebookResource)
	if err != nil {
		return NotebookResourceResponse{}, err
	}
	respType.RawResponse = resp
	return respType, nil
}

// PipelineResourcePoller provides polling facilities until the operation reaches a terminal state.
type PipelineResourcePoller interface {
	azcore.Poller
	// FinalResponse performs a final GET to the service and returns the final response
	// for the polling operation. If there is an error performing the final GET then an error is returned.
	// If the final GET succeeded then the final PipelineResourceResponse will be returned.
	FinalResponse(ctx context.Context) (PipelineResourceResponse, error)
}

type pipelineResourcePoller struct {
	pt *azcore.LROPoller
}

func (p *pipelineResourcePoller) Done() bool {
	return p.pt.Done()
}

func (p *pipelineResourcePoller) Poll(ctx context.Context) (*http.Response, error) {
	return p.pt.Poll(ctx)
}

func (p *pipelineResourcePoller) FinalResponse(ctx context.Context) (PipelineResourceResponse, error) {
	respType := PipelineResourceResponse{PipelineResource: &PipelineResource{}}
	resp, err := p.pt.FinalResponse(ctx, respType.PipelineResource)
	if err != nil {
		return PipelineResourceResponse{}, err
	}
	respType.RawResponse = resp
	return respType, nil
}

func (p *pipelineResourcePoller) ResumeToken() (string, error) {
	return p.pt.ResumeToken()
}

func (p *pipelineResourcePoller) pollUntilDone(ctx context.Context, freq time.Duration) (PipelineResourceResponse, error) {
	respType := PipelineResourceResponse{PipelineResource: &PipelineResource{}}
	resp, err := p.pt.PollUntilDone(ctx, freq, respType.PipelineResource)
	if err != nil {
		return PipelineResourceResponse{}, err
	}
	respType.RawResponse = resp
	return respType, nil
}

// SQLScriptResourcePoller provides polling facilities until the operation reaches a terminal state.
type SQLScriptResourcePoller interface {
	azcore.Poller
	// FinalResponse performs a final GET to the service and returns the final response
	// for the polling operation. If there is an error performing the final GET then an error is returned.
	// If the final GET succeeded then the final SQLScriptResourceResponse will be returned.
	FinalResponse(ctx context.Context) (SQLScriptResourceResponse, error)
}

type sqlScriptResourcePoller struct {
	pt *azcore.LROPoller
}

func (p *sqlScriptResourcePoller) Done() bool {
	return p.pt.Done()
}

func (p *sqlScriptResourcePoller) Poll(ctx context.Context) (*http.Response, error) {
	return p.pt.Poll(ctx)
}

func (p *sqlScriptResourcePoller) FinalResponse(ctx context.Context) (SQLScriptResourceResponse, error) {
	respType := SQLScriptResourceResponse{SQLScriptResource: &SQLScriptResource{}}
	resp, err := p.pt.FinalResponse(ctx, respType.SQLScriptResource)
	if err != nil {
		return SQLScriptResourceResponse{}, err
	}
	respType.RawResponse = resp
	return respType, nil
}

func (p *sqlScriptResourcePoller) ResumeToken() (string, error) {
	return p.pt.ResumeToken()
}

func (p *sqlScriptResourcePoller) pollUntilDone(ctx context.Context, freq time.Duration) (SQLScriptResourceResponse, error) {
	respType := SQLScriptResourceResponse{SQLScriptResource: &SQLScriptResource{}}
	resp, err := p.pt.PollUntilDone(ctx, freq, respType.SQLScriptResource)
	if err != nil {
		return SQLScriptResourceResponse{}, err
	}
	respType.RawResponse = resp
	return respType, nil
}

// SparkBatchJobPoller provides polling facilities until the operation reaches a terminal state.
type SparkBatchJobPoller interface {
	azcore.Poller
	// FinalResponse performs a final GET to the service and returns the final response
	// for the polling operation. If there is an error performing the final GET then an error is returned.
	// If the final GET succeeded then the final SparkBatchJobResponse will be returned.
	FinalResponse(ctx context.Context) (SparkBatchJobResponse, error)
}

type sparkBatchJobPoller struct {
	pt *azcore.LROPoller
}

func (p *sparkBatchJobPoller) Done() bool {
	return p.pt.Done()
}

func (p *sparkBatchJobPoller) Poll(ctx context.Context) (*http.Response, error) {
	return p.pt.Poll(ctx)
}

func (p *sparkBatchJobPoller) FinalResponse(ctx context.Context) (SparkBatchJobResponse, error) {
	respType := SparkBatchJobResponse{SparkBatchJob: &SparkBatchJob{}}
	resp, err := p.pt.FinalResponse(ctx, respType.SparkBatchJob)
	if err != nil {
		return SparkBatchJobResponse{}, err
	}
	respType.RawResponse = resp
	return respType, nil
}

func (p *sparkBatchJobPoller) ResumeToken() (string, error) {
	return p.pt.ResumeToken()
}

func (p *sparkBatchJobPoller) pollUntilDone(ctx context.Context, freq time.Duration) (SparkBatchJobResponse, error) {
	respType := SparkBatchJobResponse{SparkBatchJob: &SparkBatchJob{}}
	resp, err := p.pt.PollUntilDone(ctx, freq, respType.SparkBatchJob)
	if err != nil {
		return SparkBatchJobResponse{}, err
	}
	respType.RawResponse = resp
	return respType, nil
}

// SparkJobDefinitionResourcePoller provides polling facilities until the operation reaches a terminal state.
type SparkJobDefinitionResourcePoller interface {
	azcore.Poller
	// FinalResponse performs a final GET to the service and returns the final response
	// for the polling operation. If there is an error performing the final GET then an error is returned.
	// If the final GET succeeded then the final SparkJobDefinitionResourceResponse will be returned.
	FinalResponse(ctx context.Context) (SparkJobDefinitionResourceResponse, error)
}

type sparkJobDefinitionResourcePoller struct {
	pt *azcore.LROPoller
}

func (p *sparkJobDefinitionResourcePoller) Done() bool {
	return p.pt.Done()
}

func (p *sparkJobDefinitionResourcePoller) Poll(ctx context.Context) (*http.Response, error) {
	return p.pt.Poll(ctx)
}

func (p *sparkJobDefinitionResourcePoller) FinalResponse(ctx context.Context) (SparkJobDefinitionResourceResponse, error) {
	respType := SparkJobDefinitionResourceResponse{SparkJobDefinitionResource: &SparkJobDefinitionResource{}}
	resp, err := p.pt.FinalResponse(ctx, respType.SparkJobDefinitionResource)
	if err != nil {
		return SparkJobDefinitionResourceResponse{}, err
	}
	respType.RawResponse = resp
	return respType, nil
}

func (p *sparkJobDefinitionResourcePoller) ResumeToken() (string, error) {
	return p.pt.ResumeToken()
}

func (p *sparkJobDefinitionResourcePoller) pollUntilDone(ctx context.Context, freq time.Duration) (SparkJobDefinitionResourceResponse, error) {
	respType := SparkJobDefinitionResourceResponse{SparkJobDefinitionResource: &SparkJobDefinitionResource{}}
	resp, err := p.pt.PollUntilDone(ctx, freq, respType.SparkJobDefinitionResource)
	if err != nil {
		return SparkJobDefinitionResourceResponse{}, err
	}
	respType.RawResponse = resp
	return respType, nil
}

// TriggerResourcePoller provides polling facilities until the operation reaches a terminal state.
type TriggerResourcePoller interface {
	azcore.Poller
	// FinalResponse performs a final GET to the service and returns the final response
	// for the polling operation. If there is an error performing the final GET then an error is returned.
	// If the final GET succeeded then the final TriggerResourceResponse will be returned.
	FinalResponse(ctx context.Context) (TriggerResourceResponse, error)
}

type triggerResourcePoller struct {
	pt *azcore.LROPoller
}

func (p *triggerResourcePoller) Done() bool {
	return p.pt.Done()
}

func (p *triggerResourcePoller) Poll(ctx context.Context) (*http.Response, error) {
	return p.pt.Poll(ctx)
}

func (p *triggerResourcePoller) FinalResponse(ctx context.Context) (TriggerResourceResponse, error) {
	respType := TriggerResourceResponse{TriggerResource: &TriggerResource{}}
	resp, err := p.pt.FinalResponse(ctx, respType.TriggerResource)
	if err != nil {
		return TriggerResourceResponse{}, err
	}
	respType.RawResponse = resp
	return respType, nil
}

func (p *triggerResourcePoller) ResumeToken() (string, error) {
	return p.pt.ResumeToken()
}

func (p *triggerResourcePoller) pollUntilDone(ctx context.Context, freq time.Duration) (TriggerResourceResponse, error) {
	respType := TriggerResourceResponse{TriggerResource: &TriggerResource{}}
	resp, err := p.pt.PollUntilDone(ctx, freq, respType.TriggerResource)
	if err != nil {
		return TriggerResourceResponse{}, err
	}
	respType.RawResponse = resp
	return respType, nil
}

// TriggerSubscriptionOperationStatusPoller provides polling facilities until the operation reaches a terminal state.
type TriggerSubscriptionOperationStatusPoller interface {
	azcore.Poller
	// FinalResponse performs a final GET to the service and returns the final response
	// for the polling operation. If there is an error performing the final GET then an error is returned.
	// If the final GET succeeded then the final TriggerSubscriptionOperationStatusResponse will be returned.
	FinalResponse(ctx context.Context) (TriggerSubscriptionOperationStatusResponse, error)
}

type triggerSubscriptionOperationStatusPoller struct {
	pt *azcore.LROPoller
}

func (p *triggerSubscriptionOperationStatusPoller) Done() bool {
	return p.pt.Done()
}

func (p *triggerSubscriptionOperationStatusPoller) Poll(ctx context.Context) (*http.Response, error) {
	return p.pt.Poll(ctx)
}

func (p *triggerSubscriptionOperationStatusPoller) FinalResponse(ctx context.Context) (TriggerSubscriptionOperationStatusResponse, error) {
	respType := TriggerSubscriptionOperationStatusResponse{TriggerSubscriptionOperationStatus: &TriggerSubscriptionOperationStatus{}}
	resp, err := p.pt.FinalResponse(ctx, respType.TriggerSubscriptionOperationStatus)
	if err != nil {
		return TriggerSubscriptionOperationStatusResponse{}, err
	}
	respType.RawResponse = resp
	return respType, nil
}

func (p *triggerSubscriptionOperationStatusPoller) ResumeToken() (string, error) {
	return p.pt.ResumeToken()
}

func (p *triggerSubscriptionOperationStatusPoller) pollUntilDone(ctx context.Context, freq time.Duration) (TriggerSubscriptionOperationStatusResponse, error) {
	respType := TriggerSubscriptionOperationStatusResponse{TriggerSubscriptionOperationStatus: &TriggerSubscriptionOperationStatus{}}
	resp, err := p.pt.PollUntilDone(ctx, freq, respType.TriggerSubscriptionOperationStatus)
	if err != nil {
		return TriggerSubscriptionOperationStatusResponse{}, err
	}
	respType.RawResponse = resp
	return respType, nil
}
