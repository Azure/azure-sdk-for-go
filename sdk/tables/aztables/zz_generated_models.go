// +build go1.13

// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

package aztables

import (
	"encoding/xml"
	"fmt"
	"net/http"
	"time"
)

// An Access policy.
type AccessPolicy struct {
	// The datetime that the policy expires.
	Expiry *time.Time `xml:"Expiry"`

	// The permissions for the acl policy.
	Permission *string `xml:"Permission"`

	// The start datetime from which the policy is active.
	Start *time.Time `xml:"Start"`
}

// MarshalXML implements the xml.Marshaller interface for type AccessPolicy.
func (a AccessPolicy) MarshalXML(e *xml.Encoder, start xml.StartElement) error {
	type alias AccessPolicy
	aux := &struct {
		*alias
		Expiry *timeRFC3339 `xml:"Expiry"`
		Start  *timeRFC3339 `xml:"Start"`
	}{
		alias:  (*alias)(&a),
		Expiry: (*timeRFC3339)(a.Expiry),
		Start:  (*timeRFC3339)(a.Start),
	}
	return e.EncodeElement(aux, start)
}

// UnmarshalXML implements the xml.Unmarshaller interface for type AccessPolicy.
func (a *AccessPolicy) UnmarshalXML(d *xml.Decoder, start xml.StartElement) error {
	type alias AccessPolicy
	aux := &struct {
		*alias
		Expiry *timeRFC3339 `xml:"Expiry"`
		Start  *timeRFC3339 `xml:"Start"`
	}{
		alias: (*alias)(a),
	}
	if err := d.DecodeElement(aux, &start); err != nil {
		return err
	}
	a.Expiry = (*time.Time)(aux.Expiry)
	a.Start = (*time.Time)(aux.Start)
	return nil
}

// CORS is an HTTP feature that enables a web application running under one domain to access resources in another domain. Web browsers implement a security
// restriction known as same-origin policy that
// prevents a web page from calling APIs in a different domain; CORS provides a secure way to allow one domain (the origin domain) to call APIs in another
// domain.
type CorsRule struct {
	// The request headers that the origin domain may specify on the CORS request.
	AllowedHeaders *string `xml:"AllowedHeaders"`

	// The methods (HTTP request verbs) that the origin domain may use for a CORS request. (comma separated)
	AllowedMethods *string `xml:"AllowedMethods"`

	// The origin domains that are permitted to make a request against the service via CORS. The origin domain is the domain from which the request originates.
	// Note that the origin must be an exact
	// case-sensitive match with the origin that the user age sends to the service. You can also use the wildcard character '*' to allow all origin domains
	// to make requests via CORS.
	AllowedOrigins *string `xml:"AllowedOrigins"`

	// The response headers that may be sent in the response to the CORS request and exposed by the browser to the request issuer.
	ExposedHeaders *string `xml:"ExposedHeaders"`

	// The maximum amount time that a browser should cache the preflight OPTIONS request.
	MaxAgeInSeconds *int32 `xml:"MaxAgeInSeconds"`
}

type GeoReplication struct {
	// A GMT date/time value, to the second. All primary writes preceding this value are guaranteed to be available for read operations at the secondary. Primary
	// writes after this point in time may or may
	// not be available for reads.
	LastSyncTime *time.Time `xml:"LastSyncTime"`

	// The status of the secondary location.
	Status *GeoReplicationStatusType `xml:"Status"`
}

// MarshalXML implements the xml.Marshaller interface for type GeoReplication.
func (g GeoReplication) MarshalXML(e *xml.Encoder, start xml.StartElement) error {
	type alias GeoReplication
	aux := &struct {
		*alias
		LastSyncTime *timeRFC1123 `xml:"LastSyncTime"`
	}{
		alias:        (*alias)(&g),
		LastSyncTime: (*timeRFC1123)(g.LastSyncTime),
	}
	return e.EncodeElement(aux, start)
}

// UnmarshalXML implements the xml.Unmarshaller interface for type GeoReplication.
func (g *GeoReplication) UnmarshalXML(d *xml.Decoder, start xml.StartElement) error {
	type alias GeoReplication
	aux := &struct {
		*alias
		LastSyncTime *timeRFC1123 `xml:"LastSyncTime"`
	}{
		alias: (*alias)(g),
	}
	if err := d.DecodeElement(aux, &start); err != nil {
		return err
	}
	g.LastSyncTime = (*time.Time)(aux.LastSyncTime)
	return nil
}

// Azure Analytics Logging settings.
type Logging struct {
	// Indicates whether all delete requests should be logged.
	Delete *bool `xml:"Delete"`

	// Indicates whether all read requests should be logged.
	Read *bool `xml:"Read"`

	// The retention policy.
	RetentionPolicy *RetentionPolicy `xml:"RetentionPolicy"`

	// The version of Analytics to configure.
	Version *string `xml:"Version"`

	// Indicates whether all write requests should be logged.
	Write *bool `xml:"Write"`
}

// MapOfInterfaceResponse is the response envelope for operations that return a map[string]interface{} type.
type MapOfInterfaceResponse struct {
	// ClientRequestID contains the information returned from the x-ms-client-request-id header response.
	ClientRequestID *string

	// ContentType contains the information returned from the Content-Type header response.
	ContentType *string

	// Date contains the information returned from the Date header response.
	Date *time.Time

	// ETag contains the information returned from the ETag header response.
	ETag *string

	// PreferenceApplied contains the information returned from the Preference-Applied header response.
	PreferenceApplied *string

	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response

	// RequestID contains the information returned from the x-ms-request-id header response.
	RequestID *string

	// The other properties of the table entity.
	Value map[string]interface{}

	// Version contains the information returned from the x-ms-version header response.
	Version *string
}

type Metrics struct {
	// Indicates whether metrics are enabled for the Table service.
	Enabled *bool `xml:"Enabled"`

	// Indicates whether metrics should generate summary statistics for called API operations.
	IncludeAPIs *bool `xml:"IncludeAPIs"`

	// The retention policy.
	RetentionPolicy *RetentionPolicy `xml:"RetentionPolicy"`

	// The version of Analytics to configure.
	Version *string `xml:"Version"`
}

// QueryOptions contains a group of parameters for the Table.Query method.
type QueryOptions struct {
	// OData filter expression.
	Filter *string
	// Specifies the media type for the response.
	Format *OdataMetadataFormat
	// Select expression using OData notation. Limits the columns on each record to just those requested, e.g. "$select=PolicyAssignmentId, ResourceId".
	Select *string
	// Maximum number of records to return.
	Top *int32
}

// The retention policy.
type RetentionPolicy struct {
	// Indicates the number of days that metrics or logging or soft-deleted data should be retained. All data older than this value will be deleted.
	Days *int32 `xml:"Days"`

	// Indicates whether a retention policy is enabled for the service.
	Enabled *bool `xml:"Enabled"`
}

// ServiceGetPropertiesOptions contains the optional parameters for the Service.GetProperties method.
type ServiceGetPropertiesOptions struct {
	// Provides a client-generated, opaque value with a 1 KB character limit that is recorded in the analytics logs when analytics logging is enabled.
	RequestID *string
	// The timeout parameter is expressed in seconds.
	Timeout *int32
}

// ServiceGetStatisticsOptions contains the optional parameters for the Service.GetStatistics method.
type ServiceGetStatisticsOptions struct {
	// Provides a client-generated, opaque value with a 1 KB character limit that is recorded in the analytics logs when analytics logging is enabled.
	RequestID *string
	// The timeout parameter is expressed in seconds.
	Timeout *int32
}

// ServiceSetPropertiesOptions contains the optional parameters for the Service.SetProperties method.
type ServiceSetPropertiesOptions struct {
	// Provides a client-generated, opaque value with a 1 KB character limit that is recorded in the analytics logs when analytics logging is enabled.
	RequestID *string
	// The timeout parameter is expressed in seconds.
	Timeout *int32
}

// ServiceSetPropertiesResponse contains the response from method Service.SetProperties.
type ServiceSetPropertiesResponse struct {
	// ClientRequestID contains the information returned from the x-ms-client-request-id header response.
	ClientRequestID *string

	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response

	// RequestID contains the information returned from the x-ms-request-id header response.
	RequestID *string

	// Version contains the information returned from the x-ms-version header response.
	Version *string
}

// A signed identifier.
type SignedIdentifier struct {
	// The access policy.
	AccessPolicy *AccessPolicy `xml:"AccessPolicy"`

	// A unique id.
	ID *string `xml:"Id"`
}

// SignedIdentifierArrayResponse is the response envelope for operations that return a []SignedIdentifier type.
type SignedIdentifierArrayResponse struct {
	// ClientRequestID contains the information returned from the x-ms-client-request-id header response.
	ClientRequestID *string `xml:"ClientRequestID"`

	// Date contains the information returned from the Date header response.
	Date *time.Time `xml:"Date"`

	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response

	// RequestID contains the information returned from the x-ms-request-id header response.
	RequestID *string `xml:"RequestID"`

	// A collection of signed identifiers.
	SignedIdentifiers []SignedIdentifier `xml:"SignedIdentifier"`

	// Version contains the information returned from the x-ms-version header response.
	Version *string `xml:"Version"`
}

// TableCreateOptions contains the optional parameters for the Table.Create method.
type TableCreateOptions struct {
	// Provides a client-generated, opaque value with a 1 KB character limit that is recorded in the analytics logs when analytics logging is enabled.
	RequestID *string
	// Specifies whether the response should include the inserted entity in the payload. Possible values are return-no-content and return-content.
	ResponsePreference *ResponseFormat
}

// TableCreateResponse contains the response from method Table.Create.
type TableCreateResponse struct {
	// ClientRequestID contains the information returned from the x-ms-client-request-id header response.
	ClientRequestID *string

	// Date contains the information returned from the Date header response.
	Date *time.Time

	// PreferenceApplied contains the information returned from the Preference-Applied header response.
	PreferenceApplied *string

	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response

	// RequestID contains the information returned from the x-ms-request-id header response.
	RequestID *string

	// Version contains the information returned from the x-ms-version header response.
	Version *string
}

// TableDeleteEntityOptions contains the optional parameters for the Table.DeleteEntity method.
type TableDeleteEntityOptions struct {
	// Provides a client-generated, opaque value with a 1 KB character limit that is recorded in the analytics logs when analytics logging is enabled.
	RequestID *string
	// The timeout parameter is expressed in seconds.
	Timeout *int32
}

// TableDeleteEntityResponse contains the response from method Table.DeleteEntity.
type TableDeleteEntityResponse struct {
	// ClientRequestID contains the information returned from the x-ms-client-request-id header response.
	ClientRequestID *string

	// Date contains the information returned from the Date header response.
	Date *time.Time

	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response

	// RequestID contains the information returned from the x-ms-request-id header response.
	RequestID *string

	// Version contains the information returned from the x-ms-version header response.
	Version *string
}

// TableDeleteOptions contains the optional parameters for the Table.Delete method.
type TableDeleteOptions struct {
	// Provides a client-generated, opaque value with a 1 KB character limit that is recorded in the analytics logs when analytics logging is enabled.
	RequestID *string
}

// TableDeleteResponse contains the response from method Table.Delete.
type TableDeleteResponse struct {
	// ClientRequestID contains the information returned from the x-ms-client-request-id header response.
	ClientRequestID *string

	// Date contains the information returned from the Date header response.
	Date *time.Time

	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response

	// RequestID contains the information returned from the x-ms-request-id header response.
	RequestID *string

	// Version contains the information returned from the x-ms-version header response.
	Version *string
}

// The properties for the table entity query response.
type TableEntityQueryResponse struct {
	// The metadata response of the table.
	OdataMetadata *string `json:"odata.metadata,omitempty"`

	// List of table entities.
	Value *[]map[string]interface{} `json:"value,omitempty"`
}

// TableEntityQueryResponseResponse is the response envelope for operations that return a TableEntityQueryResponse type.
type TableEntityQueryResponseResponse struct {
	// ClientRequestID contains the information returned from the x-ms-client-request-id header response.
	ClientRequestID *string

	// Date contains the information returned from the Date header response.
	Date *time.Time

	// ETag contains the information returned from the ETag header response.
	ETag *string

	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response

	// RequestID contains the information returned from the x-ms-request-id header response.
	RequestID *string

	// The properties for the table entity query response.
	TableEntityQueryResponse *TableEntityQueryResponse

	// Version contains the information returned from the x-ms-version header response.
	Version *string

	// XMSContinuationNextPartitionKey contains the information returned from the x-ms-continuation-NextPartitionKey header response.
	XMSContinuationNextPartitionKey *string

	// XMSContinuationNextRowKey contains the information returned from the x-ms-continuation-NextRowKey header response.
	XMSContinuationNextRowKey *string
}

// TableGetAccessPolicyOptions contains the optional parameters for the Table.GetAccessPolicy method.
type TableGetAccessPolicyOptions struct {
	// Provides a client-generated, opaque value with a 1 KB character limit that is recorded in the analytics logs when analytics logging is enabled.
	RequestID *string
	// The timeout parameter is expressed in seconds.
	Timeout *int32
}

// TableInsertEntityOptions contains the optional parameters for the Table.InsertEntity method.
type TableInsertEntityOptions struct {
	// Provides a client-generated, opaque value with a 1 KB character limit that is recorded in the analytics logs when analytics logging is enabled.
	RequestID *string
	// Specifies whether the response should include the inserted entity in the payload. Possible values are return-no-content and return-content.
	ResponsePreference *ResponseFormat
	// The properties for the table entity.
	TableEntityProperties *map[string]interface{}
	// The timeout parameter is expressed in seconds.
	Timeout *int32
}

// TableInsertEntityResponse contains the response from method Table.InsertEntity.
type TableInsertEntityResponse struct {
	// ClientRequestID contains the information returned from the x-ms-client-request-id header response.
	ClientRequestID *string

	// ContentType contains the information returned from the Content-Type header response.
	ContentType *string

	// Date contains the information returned from the Date header response.
	Date *time.Time

	// ETag contains the information returned from the ETag header response.
	ETag *string

	// PreferenceApplied contains the information returned from the Preference-Applied header response.
	PreferenceApplied *string

	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response

	// RequestID contains the information returned from the x-ms-request-id header response.
	RequestID *string

	// Version contains the information returned from the x-ms-version header response.
	Version *string
}

// TableMergeEntityOptions contains the optional parameters for the Table.MergeEntity method.
type TableMergeEntityOptions struct {
	// Match condition for an entity to be updated. If specified and a matching entity is not found, an error will be raised. To force an unconditional update,
	// set to the wildcard character (*). If not specified, an insert will be performed when no existing entity is found to update and a merge will be performed
	// if an existing entity is found.
	IfMatch *string
	// Provides a client-generated, opaque value with a 1 KB character limit that is recorded in the analytics logs when analytics logging is enabled.
	RequestID *string
	// The properties for the table entity.
	TableEntityProperties *map[string]interface{}
	// The timeout parameter is expressed in seconds.
	Timeout *int32
}

// TableMergeEntityResponse contains the response from method Table.MergeEntity.
type TableMergeEntityResponse struct {
	// ClientRequestID contains the information returned from the x-ms-client-request-id header response.
	ClientRequestID *string

	// Date contains the information returned from the Date header response.
	Date *time.Time

	// ETag contains the information returned from the ETag header response.
	ETag *string

	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response

	// RequestID contains the information returned from the x-ms-request-id header response.
	RequestID *string

	// Version contains the information returned from the x-ms-version header response.
	Version *string
}

// The properties for creating a table.
type TableProperties struct {
	// The name of the table to create.
	TableName *string `json:"TableName,omitempty"`
}

// TableQueryEntitiesOptions contains the optional parameters for the Table.QueryEntities method.
type TableQueryEntitiesOptions struct {
	// An entity query continuation token from a previous call.
	NextPartitionKey *string
	// An entity query continuation token from a previous call.
	NextRowKey *string
	// Provides a client-generated, opaque value with a 1 KB character limit that is recorded in the analytics logs when analytics logging is enabled.
	RequestID *string
	// The timeout parameter is expressed in seconds.
	Timeout *int32
}

// TableQueryEntitiesWithPartitionAndRowKeyOptions contains the optional parameters for the Table.QueryEntitiesWithPartitionAndRowKey method.
type TableQueryEntitiesWithPartitionAndRowKeyOptions struct {
	// Provides a client-generated, opaque value with a 1 KB character limit that is recorded in the analytics logs when analytics logging is enabled.
	RequestID *string
	// The timeout parameter is expressed in seconds.
	Timeout *int32
}

// TableQueryOptions contains the optional parameters for the Table.Query method.
type TableQueryOptions struct {
	// A table query continuation token from a previous call.
	NextTableName *string
	// Provides a client-generated, opaque value with a 1 KB character limit that is recorded in the analytics logs when analytics logging is enabled.
	RequestID *string
}

// The properties for the table query response.
type TableQueryResponse struct {
	// The metadata response of the table.
	OdataMetadata *string `json:"odata.metadata,omitempty"`

	// List of tables.
	Value *[]TableResponseProperties `json:"value,omitempty"`
}

// TableQueryResponseResponse is the response envelope for operations that return a TableQueryResponse type.
type TableQueryResponseResponse struct {
	// ClientRequestID contains the information returned from the x-ms-client-request-id header response.
	ClientRequestID *string

	// Date contains the information returned from the Date header response.
	Date *time.Time

	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response

	// RequestID contains the information returned from the x-ms-request-id header response.
	RequestID *string

	// The properties for the table query response.
	TableQueryResponse *TableQueryResponse

	// Version contains the information returned from the x-ms-version header response.
	Version *string

	// XMSContinuationNextTableName contains the information returned from the x-ms-continuation-NextTableName header response.
	XMSContinuationNextTableName *string
}

// The response for a single table.
type TableResponse struct {
	TableResponseProperties
	// The metadata response of the table.
	OdataMetadata *string `json:"odata.metadata,omitempty"`
}

// The properties for the table response.
type TableResponseProperties struct {
	// The edit link of the table.
	OdataEditLink *string `json:"odata.editLink,omitempty"`

	// The id of the table.
	OdataID *string `json:"odata.id,omitempty"`

	// The odata type of the table.
	OdataType *string `json:"odata.type,omitempty"`

	// The name of the table.
	TableName *string `json:"TableName,omitempty"`
}

// TableResponseResponse is the response envelope for operations that return a TableResponse type.
type TableResponseResponse struct {
	// ClientRequestID contains the information returned from the x-ms-client-request-id header response.
	ClientRequestID *string

	// Date contains the information returned from the Date header response.
	Date *time.Time

	// PreferenceApplied contains the information returned from the Preference-Applied header response.
	PreferenceApplied *string

	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response

	// RequestID contains the information returned from the x-ms-request-id header response.
	RequestID *string

	// The response for a single table.
	TableResponse *TableResponse

	// Version contains the information returned from the x-ms-version header response.
	Version *string
}

// Table Service error.
type TableServiceError struct {
	// The error message.
	Message *string `json:"Message,omitempty"`
}

// Error implements the error interface for type TableServiceError.
func (e TableServiceError) Error() string {
	msg := ""
	if e.Message != nil {
		msg += fmt.Sprintf("Message: %v\n", *e.Message)
	}
	if msg == "" {
		msg = "missing error info"
	}
	return msg
}

// Table Service Properties.
type TableServiceProperties struct {
	// The set of CORS rules.
	Cors *[]CorsRule `xml:"Cors>CorsRule"`

	// A summary of request statistics grouped by API in hourly aggregates for tables.
	HourMetrics *Metrics `xml:"HourMetrics"`

	// Azure Analytics Logging settings.
	Logging *Logging `xml:"Logging"`

	// A summary of request statistics grouped by API in minute aggregates for tables.
	MinuteMetrics *Metrics `xml:"MinuteMetrics"`
}

// MarshalXML implements the xml.Marshaller interface for type TableServiceProperties.
func (t TableServiceProperties) MarshalXML(e *xml.Encoder, start xml.StartElement) error {
	start.Name.Local = "StorageServiceProperties"
	type alias TableServiceProperties
	aux := &struct {
		*alias
	}{
		alias: (*alias)(&t),
	}
	return e.EncodeElement(aux, start)
}

// TableServicePropertiesResponse is the response envelope for operations that return a TableServiceProperties type.
type TableServicePropertiesResponse struct {
	// ClientRequestID contains the information returned from the x-ms-client-request-id header response.
	ClientRequestID *string `xml:"ClientRequestID"`

	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response

	// RequestID contains the information returned from the x-ms-request-id header response.
	RequestID *string `xml:"RequestID"`

	// Table Service Properties.
	StorageServiceProperties *TableServiceProperties `xml:"StorageServiceProperties"`

	// Version contains the information returned from the x-ms-version header response.
	Version *string `xml:"Version"`
}

// Stats for the service.
type TableServiceStats struct {
	// Geo-Replication information for the Secondary Storage Service.
	GeoReplication *GeoReplication `xml:"GeoReplication"`
}

// TableServiceStatsResponse is the response envelope for operations that return a TableServiceStats type.
type TableServiceStatsResponse struct {
	// ClientRequestID contains the information returned from the x-ms-client-request-id header response.
	ClientRequestID *string `xml:"ClientRequestID"`

	// Date contains the information returned from the Date header response.
	Date *time.Time `xml:"Date"`

	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response

	// RequestID contains the information returned from the x-ms-request-id header response.
	RequestID *string `xml:"RequestID"`

	// Stats for the service.
	StorageServiceStats *TableServiceStats `xml:"StorageServiceStats"`

	// Version contains the information returned from the x-ms-version header response.
	Version *string `xml:"Version"`
}

// TableSetAccessPolicyOptions contains the optional parameters for the Table.SetAccessPolicy method.
type TableSetAccessPolicyOptions struct {
	// Provides a client-generated, opaque value with a 1 KB character limit that is recorded in the analytics logs when analytics logging is enabled.
	RequestID *string
	// The acls for the table.
	TableACL *[]SignedIdentifier
	// The timeout parameter is expressed in seconds.
	Timeout *int32
}

// TableSetAccessPolicyResponse contains the response from method Table.SetAccessPolicy.
type TableSetAccessPolicyResponse struct {
	// ClientRequestID contains the information returned from the x-ms-client-request-id header response.
	ClientRequestID *string

	// Date contains the information returned from the Date header response.
	Date *time.Time

	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response

	// RequestID contains the information returned from the x-ms-request-id header response.
	RequestID *string

	// Version contains the information returned from the x-ms-version header response.
	Version *string
}

// TableUpdateEntityOptions contains the optional parameters for the Table.UpdateEntity method.
type TableUpdateEntityOptions struct {
	// Match condition for an entity to be updated. If specified and a matching entity is not found, an error will be raised. To force an unconditional update,
	// set to the wildcard character (*). If not specified, an insert will be performed when no existing entity is found to update and a replace will be performed
	// if an existing entity is found.
	IfMatch *string
	// Provides a client-generated, opaque value with a 1 KB character limit that is recorded in the analytics logs when analytics logging is enabled.
	RequestID *string
	// The properties for the table entity.
	TableEntityProperties *map[string]interface{}
	// The timeout parameter is expressed in seconds.
	Timeout *int32
}

// TableUpdateEntityResponse contains the response from method Table.UpdateEntity.
type TableUpdateEntityResponse struct {
	// ClientRequestID contains the information returned from the x-ms-client-request-id header response.
	ClientRequestID *string

	// Date contains the information returned from the Date header response.
	Date *time.Time

	// ETag contains the information returned from the ETag header response.
	ETag *string

	// RawResponse contains the underlying HTTP response.
	RawResponse *http.Response

	// RequestID contains the information returned from the x-ms-request-id header response.
	RequestID *string

	// Version contains the information returned from the x-ms-version header response.
	Version *string
}
