// +build go1.13

// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

package armweb

import (
	"context"
	"errors"
	"fmt"
	"github.com/Azure/azure-sdk-for-go/sdk/armcore"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore"
	"net/http"
	"net/url"
	"strconv"
	"strings"
	"time"
)

// AppServicePlansClient contains the methods for the AppServicePlans group.
// Don't use this type directly, use NewAppServicePlansClient() instead.
type AppServicePlansClient struct {
	con            *armcore.Connection
	subscriptionID string
}

// NewAppServicePlansClient creates a new instance of AppServicePlansClient with the specified values.
func NewAppServicePlansClient(con *armcore.Connection, subscriptionID string) *AppServicePlansClient {
	return &AppServicePlansClient{con: con, subscriptionID: subscriptionID}
}

// BeginCreateOrUpdate - Description for Creates or updates an App Service Plan.
// If the operation fails it returns the *DefaultErrorResponse error type.
func (client *AppServicePlansClient) BeginCreateOrUpdate(ctx context.Context, resourceGroupName string, name string, appServicePlan AppServicePlan, options *AppServicePlansBeginCreateOrUpdateOptions) (AppServicePlansCreateOrUpdatePollerResponse, error) {
	resp, err := client.createOrUpdate(ctx, resourceGroupName, name, appServicePlan, options)
	if err != nil {
		return AppServicePlansCreateOrUpdatePollerResponse{}, err
	}
	result := AppServicePlansCreateOrUpdatePollerResponse{
		RawResponse: resp.Response,
	}
	pt, err := armcore.NewLROPoller("AppServicePlansClient.CreateOrUpdate", "", resp, client.con.Pipeline(), client.createOrUpdateHandleError)
	if err != nil {
		return AppServicePlansCreateOrUpdatePollerResponse{}, err
	}
	poller := &appServicePlansCreateOrUpdatePoller{
		pt: pt,
	}
	result.Poller = poller
	result.PollUntilDone = func(ctx context.Context, frequency time.Duration) (AppServicePlansCreateOrUpdateResponse, error) {
		return poller.pollUntilDone(ctx, frequency)
	}
	return result, nil
}

// ResumeCreateOrUpdate creates a new AppServicePlansCreateOrUpdatePoller from the specified resume token.
// token - The value must come from a previous call to AppServicePlansCreateOrUpdatePoller.ResumeToken().
func (client *AppServicePlansClient) ResumeCreateOrUpdate(ctx context.Context, token string) (AppServicePlansCreateOrUpdatePollerResponse, error) {
	pt, err := armcore.NewLROPollerFromResumeToken("AppServicePlansClient.CreateOrUpdate", token, client.con.Pipeline(), client.createOrUpdateHandleError)
	if err != nil {
		return AppServicePlansCreateOrUpdatePollerResponse{}, err
	}
	poller := &appServicePlansCreateOrUpdatePoller{
		pt: pt,
	}
	resp, err := poller.Poll(ctx)
	if err != nil {
		return AppServicePlansCreateOrUpdatePollerResponse{}, err
	}
	result := AppServicePlansCreateOrUpdatePollerResponse{
		RawResponse: resp,
	}
	result.Poller = poller
	result.PollUntilDone = func(ctx context.Context, frequency time.Duration) (AppServicePlansCreateOrUpdateResponse, error) {
		return poller.pollUntilDone(ctx, frequency)
	}
	return result, nil
}

// CreateOrUpdate - Description for Creates or updates an App Service Plan.
// If the operation fails it returns the *DefaultErrorResponse error type.
func (client *AppServicePlansClient) createOrUpdate(ctx context.Context, resourceGroupName string, name string, appServicePlan AppServicePlan, options *AppServicePlansBeginCreateOrUpdateOptions) (*azcore.Response, error) {
	req, err := client.createOrUpdateCreateRequest(ctx, resourceGroupName, name, appServicePlan, options)
	if err != nil {
		return nil, err
	}
	resp, err := client.con.Pipeline().Do(req)
	if err != nil {
		return nil, err
	}
	if !resp.HasStatusCode(http.StatusOK, http.StatusAccepted) {
		return nil, client.createOrUpdateHandleError(resp)
	}
	return resp, nil
}

// createOrUpdateCreateRequest creates the CreateOrUpdate request.
func (client *AppServicePlansClient) createOrUpdateCreateRequest(ctx context.Context, resourceGroupName string, name string, appServicePlan AppServicePlan, options *AppServicePlansBeginCreateOrUpdateOptions) (*azcore.Request, error) {
	urlPath := "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/serverfarms/{name}"
	if resourceGroupName == "" {
		return nil, errors.New("parameter resourceGroupName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{resourceGroupName}", url.PathEscape(resourceGroupName))
	if name == "" {
		return nil, errors.New("parameter name cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{name}", url.PathEscape(name))
	if client.subscriptionID == "" {
		return nil, errors.New("parameter client.subscriptionID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{subscriptionId}", url.PathEscape(client.subscriptionID))
	req, err := azcore.NewRequest(ctx, http.MethodPut, azcore.JoinPaths(client.con.Endpoint(), urlPath))
	if err != nil {
		return nil, err
	}
	req.Telemetry(telemetryInfo)
	reqQP := req.URL.Query()
	reqQP.Set("api-version", "2021-02-01")
	req.URL.RawQuery = reqQP.Encode()
	req.Header.Set("Accept", "application/json")
	return req, req.MarshalAsJSON(appServicePlan)
}

// createOrUpdateHandleError handles the CreateOrUpdate error response.
func (client *AppServicePlansClient) createOrUpdateHandleError(resp *azcore.Response) error {
	body, err := resp.Payload()
	if err != nil {
		return azcore.NewResponseError(err, resp.Response)
	}
	errType := DefaultErrorResponse{raw: string(body)}
	if err := resp.UnmarshalAsJSON(&errType); err != nil {
		return azcore.NewResponseError(fmt.Errorf("%s\n%s", string(body), err), resp.Response)
	}
	return azcore.NewResponseError(&errType, resp.Response)
}

// CreateOrUpdateVnetRoute - Description for Create or update a Virtual Network route in an App Service plan.
// If the operation fails it returns the *DefaultErrorResponse error type.
func (client *AppServicePlansClient) CreateOrUpdateVnetRoute(ctx context.Context, resourceGroupName string, name string, vnetName string, routeName string, route VnetRoute, options *AppServicePlansCreateOrUpdateVnetRouteOptions) (AppServicePlansCreateOrUpdateVnetRouteResponse, error) {
	req, err := client.createOrUpdateVnetRouteCreateRequest(ctx, resourceGroupName, name, vnetName, routeName, route, options)
	if err != nil {
		return AppServicePlansCreateOrUpdateVnetRouteResponse{}, err
	}
	resp, err := client.con.Pipeline().Do(req)
	if err != nil {
		return AppServicePlansCreateOrUpdateVnetRouteResponse{}, err
	}
	if !resp.HasStatusCode(http.StatusOK) {
		return AppServicePlansCreateOrUpdateVnetRouteResponse{}, client.createOrUpdateVnetRouteHandleError(resp)
	}
	return client.createOrUpdateVnetRouteHandleResponse(resp)
}

// createOrUpdateVnetRouteCreateRequest creates the CreateOrUpdateVnetRoute request.
func (client *AppServicePlansClient) createOrUpdateVnetRouteCreateRequest(ctx context.Context, resourceGroupName string, name string, vnetName string, routeName string, route VnetRoute, options *AppServicePlansCreateOrUpdateVnetRouteOptions) (*azcore.Request, error) {
	urlPath := "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/serverfarms/{name}/virtualNetworkConnections/{vnetName}/routes/{routeName}"
	if resourceGroupName == "" {
		return nil, errors.New("parameter resourceGroupName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{resourceGroupName}", url.PathEscape(resourceGroupName))
	if name == "" {
		return nil, errors.New("parameter name cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{name}", url.PathEscape(name))
	if vnetName == "" {
		return nil, errors.New("parameter vnetName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{vnetName}", url.PathEscape(vnetName))
	if routeName == "" {
		return nil, errors.New("parameter routeName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{routeName}", url.PathEscape(routeName))
	if client.subscriptionID == "" {
		return nil, errors.New("parameter client.subscriptionID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{subscriptionId}", url.PathEscape(client.subscriptionID))
	req, err := azcore.NewRequest(ctx, http.MethodPut, azcore.JoinPaths(client.con.Endpoint(), urlPath))
	if err != nil {
		return nil, err
	}
	req.Telemetry(telemetryInfo)
	reqQP := req.URL.Query()
	reqQP.Set("api-version", "2021-02-01")
	req.URL.RawQuery = reqQP.Encode()
	req.Header.Set("Accept", "application/json")
	return req, req.MarshalAsJSON(route)
}

// createOrUpdateVnetRouteHandleResponse handles the CreateOrUpdateVnetRoute response.
func (client *AppServicePlansClient) createOrUpdateVnetRouteHandleResponse(resp *azcore.Response) (AppServicePlansCreateOrUpdateVnetRouteResponse, error) {
	result := AppServicePlansCreateOrUpdateVnetRouteResponse{RawResponse: resp.Response}
	if err := resp.UnmarshalAsJSON(&result.VnetRoute); err != nil {
		return AppServicePlansCreateOrUpdateVnetRouteResponse{}, err
	}
	return result, nil
}

// createOrUpdateVnetRouteHandleError handles the CreateOrUpdateVnetRoute error response.
func (client *AppServicePlansClient) createOrUpdateVnetRouteHandleError(resp *azcore.Response) error {
	body, err := resp.Payload()
	if err != nil {
		return azcore.NewResponseError(err, resp.Response)
	}
	switch resp.StatusCode {
	case http.StatusBadRequest, http.StatusNotFound:
		if len(body) == 0 {
			return azcore.NewResponseError(errors.New(resp.Status), resp.Response)
		}
		return azcore.NewResponseError(errors.New(string(body)), resp.Response)
	default:
		errType := DefaultErrorResponse{raw: string(body)}
		if err := resp.UnmarshalAsJSON(&errType); err != nil {
			return azcore.NewResponseError(fmt.Errorf("%s\n%s", string(body), err), resp.Response)
		}
		return azcore.NewResponseError(&errType, resp.Response)
	}
}

// Delete - Description for Delete an App Service plan.
// If the operation fails it returns the *DefaultErrorResponse error type.
func (client *AppServicePlansClient) Delete(ctx context.Context, resourceGroupName string, name string, options *AppServicePlansDeleteOptions) (AppServicePlansDeleteResponse, error) {
	req, err := client.deleteCreateRequest(ctx, resourceGroupName, name, options)
	if err != nil {
		return AppServicePlansDeleteResponse{}, err
	}
	resp, err := client.con.Pipeline().Do(req)
	if err != nil {
		return AppServicePlansDeleteResponse{}, err
	}
	if !resp.HasStatusCode(http.StatusOK, http.StatusNoContent) {
		return AppServicePlansDeleteResponse{}, client.deleteHandleError(resp)
	}
	return AppServicePlansDeleteResponse{RawResponse: resp.Response}, nil
}

// deleteCreateRequest creates the Delete request.
func (client *AppServicePlansClient) deleteCreateRequest(ctx context.Context, resourceGroupName string, name string, options *AppServicePlansDeleteOptions) (*azcore.Request, error) {
	urlPath := "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/serverfarms/{name}"
	if resourceGroupName == "" {
		return nil, errors.New("parameter resourceGroupName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{resourceGroupName}", url.PathEscape(resourceGroupName))
	if name == "" {
		return nil, errors.New("parameter name cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{name}", url.PathEscape(name))
	if client.subscriptionID == "" {
		return nil, errors.New("parameter client.subscriptionID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{subscriptionId}", url.PathEscape(client.subscriptionID))
	req, err := azcore.NewRequest(ctx, http.MethodDelete, azcore.JoinPaths(client.con.Endpoint(), urlPath))
	if err != nil {
		return nil, err
	}
	req.Telemetry(telemetryInfo)
	reqQP := req.URL.Query()
	reqQP.Set("api-version", "2021-02-01")
	req.URL.RawQuery = reqQP.Encode()
	req.Header.Set("Accept", "application/json")
	return req, nil
}

// deleteHandleError handles the Delete error response.
func (client *AppServicePlansClient) deleteHandleError(resp *azcore.Response) error {
	body, err := resp.Payload()
	if err != nil {
		return azcore.NewResponseError(err, resp.Response)
	}
	errType := DefaultErrorResponse{raw: string(body)}
	if err := resp.UnmarshalAsJSON(&errType); err != nil {
		return azcore.NewResponseError(fmt.Errorf("%s\n%s", string(body), err), resp.Response)
	}
	return azcore.NewResponseError(&errType, resp.Response)
}

// DeleteHybridConnection - Description for Delete a Hybrid Connection in use in an App Service plan.
// If the operation fails it returns the *DefaultErrorResponse error type.
func (client *AppServicePlansClient) DeleteHybridConnection(ctx context.Context, resourceGroupName string, name string, namespaceName string, relayName string, options *AppServicePlansDeleteHybridConnectionOptions) (AppServicePlansDeleteHybridConnectionResponse, error) {
	req, err := client.deleteHybridConnectionCreateRequest(ctx, resourceGroupName, name, namespaceName, relayName, options)
	if err != nil {
		return AppServicePlansDeleteHybridConnectionResponse{}, err
	}
	resp, err := client.con.Pipeline().Do(req)
	if err != nil {
		return AppServicePlansDeleteHybridConnectionResponse{}, err
	}
	if !resp.HasStatusCode(http.StatusOK, http.StatusNoContent) {
		return AppServicePlansDeleteHybridConnectionResponse{}, client.deleteHybridConnectionHandleError(resp)
	}
	return AppServicePlansDeleteHybridConnectionResponse{RawResponse: resp.Response}, nil
}

// deleteHybridConnectionCreateRequest creates the DeleteHybridConnection request.
func (client *AppServicePlansClient) deleteHybridConnectionCreateRequest(ctx context.Context, resourceGroupName string, name string, namespaceName string, relayName string, options *AppServicePlansDeleteHybridConnectionOptions) (*azcore.Request, error) {
	urlPath := "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/serverfarms/{name}/hybridConnectionNamespaces/{namespaceName}/relays/{relayName}"
	if resourceGroupName == "" {
		return nil, errors.New("parameter resourceGroupName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{resourceGroupName}", url.PathEscape(resourceGroupName))
	if name == "" {
		return nil, errors.New("parameter name cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{name}", url.PathEscape(name))
	if namespaceName == "" {
		return nil, errors.New("parameter namespaceName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{namespaceName}", url.PathEscape(namespaceName))
	if relayName == "" {
		return nil, errors.New("parameter relayName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{relayName}", url.PathEscape(relayName))
	if client.subscriptionID == "" {
		return nil, errors.New("parameter client.subscriptionID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{subscriptionId}", url.PathEscape(client.subscriptionID))
	req, err := azcore.NewRequest(ctx, http.MethodDelete, azcore.JoinPaths(client.con.Endpoint(), urlPath))
	if err != nil {
		return nil, err
	}
	req.Telemetry(telemetryInfo)
	reqQP := req.URL.Query()
	reqQP.Set("api-version", "2021-02-01")
	req.URL.RawQuery = reqQP.Encode()
	req.Header.Set("Accept", "application/json")
	return req, nil
}

// deleteHybridConnectionHandleError handles the DeleteHybridConnection error response.
func (client *AppServicePlansClient) deleteHybridConnectionHandleError(resp *azcore.Response) error {
	body, err := resp.Payload()
	if err != nil {
		return azcore.NewResponseError(err, resp.Response)
	}
	errType := DefaultErrorResponse{raw: string(body)}
	if err := resp.UnmarshalAsJSON(&errType); err != nil {
		return azcore.NewResponseError(fmt.Errorf("%s\n%s", string(body), err), resp.Response)
	}
	return azcore.NewResponseError(&errType, resp.Response)
}

// DeleteVnetRoute - Description for Delete a Virtual Network route in an App Service plan.
// If the operation fails it returns the *DefaultErrorResponse error type.
func (client *AppServicePlansClient) DeleteVnetRoute(ctx context.Context, resourceGroupName string, name string, vnetName string, routeName string, options *AppServicePlansDeleteVnetRouteOptions) (AppServicePlansDeleteVnetRouteResponse, error) {
	req, err := client.deleteVnetRouteCreateRequest(ctx, resourceGroupName, name, vnetName, routeName, options)
	if err != nil {
		return AppServicePlansDeleteVnetRouteResponse{}, err
	}
	resp, err := client.con.Pipeline().Do(req)
	if err != nil {
		return AppServicePlansDeleteVnetRouteResponse{}, err
	}
	if !resp.HasStatusCode(http.StatusOK) {
		return AppServicePlansDeleteVnetRouteResponse{}, client.deleteVnetRouteHandleError(resp)
	}
	return AppServicePlansDeleteVnetRouteResponse{RawResponse: resp.Response}, nil
}

// deleteVnetRouteCreateRequest creates the DeleteVnetRoute request.
func (client *AppServicePlansClient) deleteVnetRouteCreateRequest(ctx context.Context, resourceGroupName string, name string, vnetName string, routeName string, options *AppServicePlansDeleteVnetRouteOptions) (*azcore.Request, error) {
	urlPath := "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/serverfarms/{name}/virtualNetworkConnections/{vnetName}/routes/{routeName}"
	if resourceGroupName == "" {
		return nil, errors.New("parameter resourceGroupName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{resourceGroupName}", url.PathEscape(resourceGroupName))
	if name == "" {
		return nil, errors.New("parameter name cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{name}", url.PathEscape(name))
	if vnetName == "" {
		return nil, errors.New("parameter vnetName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{vnetName}", url.PathEscape(vnetName))
	if routeName == "" {
		return nil, errors.New("parameter routeName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{routeName}", url.PathEscape(routeName))
	if client.subscriptionID == "" {
		return nil, errors.New("parameter client.subscriptionID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{subscriptionId}", url.PathEscape(client.subscriptionID))
	req, err := azcore.NewRequest(ctx, http.MethodDelete, azcore.JoinPaths(client.con.Endpoint(), urlPath))
	if err != nil {
		return nil, err
	}
	req.Telemetry(telemetryInfo)
	reqQP := req.URL.Query()
	reqQP.Set("api-version", "2021-02-01")
	req.URL.RawQuery = reqQP.Encode()
	req.Header.Set("Accept", "application/json")
	return req, nil
}

// deleteVnetRouteHandleError handles the DeleteVnetRoute error response.
func (client *AppServicePlansClient) deleteVnetRouteHandleError(resp *azcore.Response) error {
	body, err := resp.Payload()
	if err != nil {
		return azcore.NewResponseError(err, resp.Response)
	}
	switch resp.StatusCode {
	case http.StatusNotFound:
		if len(body) == 0 {
			return azcore.NewResponseError(errors.New(resp.Status), resp.Response)
		}
		return azcore.NewResponseError(errors.New(string(body)), resp.Response)
	default:
		errType := DefaultErrorResponse{raw: string(body)}
		if err := resp.UnmarshalAsJSON(&errType); err != nil {
			return azcore.NewResponseError(fmt.Errorf("%s\n%s", string(body), err), resp.Response)
		}
		return azcore.NewResponseError(&errType, resp.Response)
	}
}

// Get - Description for Get an App Service plan.
// If the operation fails it returns the *DefaultErrorResponse error type.
func (client *AppServicePlansClient) Get(ctx context.Context, resourceGroupName string, name string, options *AppServicePlansGetOptions) (AppServicePlansGetResponse, error) {
	req, err := client.getCreateRequest(ctx, resourceGroupName, name, options)
	if err != nil {
		return AppServicePlansGetResponse{}, err
	}
	resp, err := client.con.Pipeline().Do(req)
	if err != nil {
		return AppServicePlansGetResponse{}, err
	}
	if !resp.HasStatusCode(http.StatusOK) {
		return AppServicePlansGetResponse{}, client.getHandleError(resp)
	}
	return client.getHandleResponse(resp)
}

// getCreateRequest creates the Get request.
func (client *AppServicePlansClient) getCreateRequest(ctx context.Context, resourceGroupName string, name string, options *AppServicePlansGetOptions) (*azcore.Request, error) {
	urlPath := "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/serverfarms/{name}"
	if resourceGroupName == "" {
		return nil, errors.New("parameter resourceGroupName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{resourceGroupName}", url.PathEscape(resourceGroupName))
	if name == "" {
		return nil, errors.New("parameter name cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{name}", url.PathEscape(name))
	if client.subscriptionID == "" {
		return nil, errors.New("parameter client.subscriptionID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{subscriptionId}", url.PathEscape(client.subscriptionID))
	req, err := azcore.NewRequest(ctx, http.MethodGet, azcore.JoinPaths(client.con.Endpoint(), urlPath))
	if err != nil {
		return nil, err
	}
	req.Telemetry(telemetryInfo)
	reqQP := req.URL.Query()
	reqQP.Set("api-version", "2021-02-01")
	req.URL.RawQuery = reqQP.Encode()
	req.Header.Set("Accept", "application/json")
	return req, nil
}

// getHandleResponse handles the Get response.
func (client *AppServicePlansClient) getHandleResponse(resp *azcore.Response) (AppServicePlansGetResponse, error) {
	result := AppServicePlansGetResponse{RawResponse: resp.Response}
	if err := resp.UnmarshalAsJSON(&result.AppServicePlan); err != nil {
		return AppServicePlansGetResponse{}, err
	}
	return result, nil
}

// getHandleError handles the Get error response.
func (client *AppServicePlansClient) getHandleError(resp *azcore.Response) error {
	body, err := resp.Payload()
	if err != nil {
		return azcore.NewResponseError(err, resp.Response)
	}
	switch resp.StatusCode {
	case http.StatusNotFound:
		if len(body) == 0 {
			return azcore.NewResponseError(errors.New(resp.Status), resp.Response)
		}
		return azcore.NewResponseError(errors.New(string(body)), resp.Response)
	default:
		errType := DefaultErrorResponse{raw: string(body)}
		if err := resp.UnmarshalAsJSON(&errType); err != nil {
			return azcore.NewResponseError(fmt.Errorf("%s\n%s", string(body), err), resp.Response)
		}
		return azcore.NewResponseError(&errType, resp.Response)
	}
}

// GetHybridConnection - Description for Retrieve a Hybrid Connection in use in an App Service plan.
// If the operation fails it returns the *DefaultErrorResponse error type.
func (client *AppServicePlansClient) GetHybridConnection(ctx context.Context, resourceGroupName string, name string, namespaceName string, relayName string, options *AppServicePlansGetHybridConnectionOptions) (AppServicePlansGetHybridConnectionResponse, error) {
	req, err := client.getHybridConnectionCreateRequest(ctx, resourceGroupName, name, namespaceName, relayName, options)
	if err != nil {
		return AppServicePlansGetHybridConnectionResponse{}, err
	}
	resp, err := client.con.Pipeline().Do(req)
	if err != nil {
		return AppServicePlansGetHybridConnectionResponse{}, err
	}
	if !resp.HasStatusCode(http.StatusOK) {
		return AppServicePlansGetHybridConnectionResponse{}, client.getHybridConnectionHandleError(resp)
	}
	return client.getHybridConnectionHandleResponse(resp)
}

// getHybridConnectionCreateRequest creates the GetHybridConnection request.
func (client *AppServicePlansClient) getHybridConnectionCreateRequest(ctx context.Context, resourceGroupName string, name string, namespaceName string, relayName string, options *AppServicePlansGetHybridConnectionOptions) (*azcore.Request, error) {
	urlPath := "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/serverfarms/{name}/hybridConnectionNamespaces/{namespaceName}/relays/{relayName}"
	if resourceGroupName == "" {
		return nil, errors.New("parameter resourceGroupName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{resourceGroupName}", url.PathEscape(resourceGroupName))
	if name == "" {
		return nil, errors.New("parameter name cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{name}", url.PathEscape(name))
	if namespaceName == "" {
		return nil, errors.New("parameter namespaceName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{namespaceName}", url.PathEscape(namespaceName))
	if relayName == "" {
		return nil, errors.New("parameter relayName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{relayName}", url.PathEscape(relayName))
	if client.subscriptionID == "" {
		return nil, errors.New("parameter client.subscriptionID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{subscriptionId}", url.PathEscape(client.subscriptionID))
	req, err := azcore.NewRequest(ctx, http.MethodGet, azcore.JoinPaths(client.con.Endpoint(), urlPath))
	if err != nil {
		return nil, err
	}
	req.Telemetry(telemetryInfo)
	reqQP := req.URL.Query()
	reqQP.Set("api-version", "2021-02-01")
	req.URL.RawQuery = reqQP.Encode()
	req.Header.Set("Accept", "application/json")
	return req, nil
}

// getHybridConnectionHandleResponse handles the GetHybridConnection response.
func (client *AppServicePlansClient) getHybridConnectionHandleResponse(resp *azcore.Response) (AppServicePlansGetHybridConnectionResponse, error) {
	result := AppServicePlansGetHybridConnectionResponse{RawResponse: resp.Response}
	if err := resp.UnmarshalAsJSON(&result.HybridConnection); err != nil {
		return AppServicePlansGetHybridConnectionResponse{}, err
	}
	return result, nil
}

// getHybridConnectionHandleError handles the GetHybridConnection error response.
func (client *AppServicePlansClient) getHybridConnectionHandleError(resp *azcore.Response) error {
	body, err := resp.Payload()
	if err != nil {
		return azcore.NewResponseError(err, resp.Response)
	}
	errType := DefaultErrorResponse{raw: string(body)}
	if err := resp.UnmarshalAsJSON(&errType); err != nil {
		return azcore.NewResponseError(fmt.Errorf("%s\n%s", string(body), err), resp.Response)
	}
	return azcore.NewResponseError(&errType, resp.Response)
}

// GetHybridConnectionPlanLimit - Description for Get the maximum number of Hybrid Connections allowed in an App Service plan.
// If the operation fails it returns the *DefaultErrorResponse error type.
func (client *AppServicePlansClient) GetHybridConnectionPlanLimit(ctx context.Context, resourceGroupName string, name string, options *AppServicePlansGetHybridConnectionPlanLimitOptions) (AppServicePlansGetHybridConnectionPlanLimitResponse, error) {
	req, err := client.getHybridConnectionPlanLimitCreateRequest(ctx, resourceGroupName, name, options)
	if err != nil {
		return AppServicePlansGetHybridConnectionPlanLimitResponse{}, err
	}
	resp, err := client.con.Pipeline().Do(req)
	if err != nil {
		return AppServicePlansGetHybridConnectionPlanLimitResponse{}, err
	}
	if !resp.HasStatusCode(http.StatusOK) {
		return AppServicePlansGetHybridConnectionPlanLimitResponse{}, client.getHybridConnectionPlanLimitHandleError(resp)
	}
	return client.getHybridConnectionPlanLimitHandleResponse(resp)
}

// getHybridConnectionPlanLimitCreateRequest creates the GetHybridConnectionPlanLimit request.
func (client *AppServicePlansClient) getHybridConnectionPlanLimitCreateRequest(ctx context.Context, resourceGroupName string, name string, options *AppServicePlansGetHybridConnectionPlanLimitOptions) (*azcore.Request, error) {
	urlPath := "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/serverfarms/{name}/hybridConnectionPlanLimits/limit"
	if resourceGroupName == "" {
		return nil, errors.New("parameter resourceGroupName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{resourceGroupName}", url.PathEscape(resourceGroupName))
	if name == "" {
		return nil, errors.New("parameter name cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{name}", url.PathEscape(name))
	if client.subscriptionID == "" {
		return nil, errors.New("parameter client.subscriptionID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{subscriptionId}", url.PathEscape(client.subscriptionID))
	req, err := azcore.NewRequest(ctx, http.MethodGet, azcore.JoinPaths(client.con.Endpoint(), urlPath))
	if err != nil {
		return nil, err
	}
	req.Telemetry(telemetryInfo)
	reqQP := req.URL.Query()
	reqQP.Set("api-version", "2021-02-01")
	req.URL.RawQuery = reqQP.Encode()
	req.Header.Set("Accept", "application/json")
	return req, nil
}

// getHybridConnectionPlanLimitHandleResponse handles the GetHybridConnectionPlanLimit response.
func (client *AppServicePlansClient) getHybridConnectionPlanLimitHandleResponse(resp *azcore.Response) (AppServicePlansGetHybridConnectionPlanLimitResponse, error) {
	result := AppServicePlansGetHybridConnectionPlanLimitResponse{RawResponse: resp.Response}
	if err := resp.UnmarshalAsJSON(&result.HybridConnectionLimits); err != nil {
		return AppServicePlansGetHybridConnectionPlanLimitResponse{}, err
	}
	return result, nil
}

// getHybridConnectionPlanLimitHandleError handles the GetHybridConnectionPlanLimit error response.
func (client *AppServicePlansClient) getHybridConnectionPlanLimitHandleError(resp *azcore.Response) error {
	body, err := resp.Payload()
	if err != nil {
		return azcore.NewResponseError(err, resp.Response)
	}
	errType := DefaultErrorResponse{raw: string(body)}
	if err := resp.UnmarshalAsJSON(&errType); err != nil {
		return azcore.NewResponseError(fmt.Errorf("%s\n%s", string(body), err), resp.Response)
	}
	return azcore.NewResponseError(&errType, resp.Response)
}

// GetRouteForVnet - Description for Get a Virtual Network route in an App Service plan.
// If the operation fails it returns the *DefaultErrorResponse error type.
func (client *AppServicePlansClient) GetRouteForVnet(ctx context.Context, resourceGroupName string, name string, vnetName string, routeName string, options *AppServicePlansGetRouteForVnetOptions) (AppServicePlansGetRouteForVnetResponse, error) {
	req, err := client.getRouteForVnetCreateRequest(ctx, resourceGroupName, name, vnetName, routeName, options)
	if err != nil {
		return AppServicePlansGetRouteForVnetResponse{}, err
	}
	resp, err := client.con.Pipeline().Do(req)
	if err != nil {
		return AppServicePlansGetRouteForVnetResponse{}, err
	}
	if !resp.HasStatusCode(http.StatusOK) {
		return AppServicePlansGetRouteForVnetResponse{}, client.getRouteForVnetHandleError(resp)
	}
	return client.getRouteForVnetHandleResponse(resp)
}

// getRouteForVnetCreateRequest creates the GetRouteForVnet request.
func (client *AppServicePlansClient) getRouteForVnetCreateRequest(ctx context.Context, resourceGroupName string, name string, vnetName string, routeName string, options *AppServicePlansGetRouteForVnetOptions) (*azcore.Request, error) {
	urlPath := "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/serverfarms/{name}/virtualNetworkConnections/{vnetName}/routes/{routeName}"
	if resourceGroupName == "" {
		return nil, errors.New("parameter resourceGroupName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{resourceGroupName}", url.PathEscape(resourceGroupName))
	if name == "" {
		return nil, errors.New("parameter name cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{name}", url.PathEscape(name))
	if vnetName == "" {
		return nil, errors.New("parameter vnetName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{vnetName}", url.PathEscape(vnetName))
	if routeName == "" {
		return nil, errors.New("parameter routeName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{routeName}", url.PathEscape(routeName))
	if client.subscriptionID == "" {
		return nil, errors.New("parameter client.subscriptionID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{subscriptionId}", url.PathEscape(client.subscriptionID))
	req, err := azcore.NewRequest(ctx, http.MethodGet, azcore.JoinPaths(client.con.Endpoint(), urlPath))
	if err != nil {
		return nil, err
	}
	req.Telemetry(telemetryInfo)
	reqQP := req.URL.Query()
	reqQP.Set("api-version", "2021-02-01")
	req.URL.RawQuery = reqQP.Encode()
	req.Header.Set("Accept", "application/json")
	return req, nil
}

// getRouteForVnetHandleResponse handles the GetRouteForVnet response.
func (client *AppServicePlansClient) getRouteForVnetHandleResponse(resp *azcore.Response) (AppServicePlansGetRouteForVnetResponse, error) {
	result := AppServicePlansGetRouteForVnetResponse{RawResponse: resp.Response}
	if err := resp.UnmarshalAsJSON(&result.VnetRouteArray); err != nil {
		return AppServicePlansGetRouteForVnetResponse{}, err
	}
	return result, nil
}

// getRouteForVnetHandleError handles the GetRouteForVnet error response.
func (client *AppServicePlansClient) getRouteForVnetHandleError(resp *azcore.Response) error {
	body, err := resp.Payload()
	if err != nil {
		return azcore.NewResponseError(err, resp.Response)
	}
	switch resp.StatusCode {
	case http.StatusNotFound:
		if len(body) == 0 {
			return azcore.NewResponseError(errors.New(resp.Status), resp.Response)
		}
		return azcore.NewResponseError(errors.New(string(body)), resp.Response)
	default:
		errType := DefaultErrorResponse{raw: string(body)}
		if err := resp.UnmarshalAsJSON(&errType); err != nil {
			return azcore.NewResponseError(fmt.Errorf("%s\n%s", string(body), err), resp.Response)
		}
		return azcore.NewResponseError(&errType, resp.Response)
	}
}

// GetServerFarmSKUs - Description for Gets all selectable SKUs for a given App Service Plan
// If the operation fails it returns the *DefaultErrorResponse error type.
func (client *AppServicePlansClient) GetServerFarmSKUs(ctx context.Context, resourceGroupName string, name string, options *AppServicePlansGetServerFarmSKUsOptions) (AppServicePlansGetServerFarmSKUsResponse, error) {
	req, err := client.getServerFarmSKUsCreateRequest(ctx, resourceGroupName, name, options)
	if err != nil {
		return AppServicePlansGetServerFarmSKUsResponse{}, err
	}
	resp, err := client.con.Pipeline().Do(req)
	if err != nil {
		return AppServicePlansGetServerFarmSKUsResponse{}, err
	}
	if !resp.HasStatusCode(http.StatusOK) {
		return AppServicePlansGetServerFarmSKUsResponse{}, client.getServerFarmSKUsHandleError(resp)
	}
	return client.getServerFarmSKUsHandleResponse(resp)
}

// getServerFarmSKUsCreateRequest creates the GetServerFarmSKUs request.
func (client *AppServicePlansClient) getServerFarmSKUsCreateRequest(ctx context.Context, resourceGroupName string, name string, options *AppServicePlansGetServerFarmSKUsOptions) (*azcore.Request, error) {
	urlPath := "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/serverfarms/{name}/skus"
	if resourceGroupName == "" {
		return nil, errors.New("parameter resourceGroupName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{resourceGroupName}", url.PathEscape(resourceGroupName))
	if name == "" {
		return nil, errors.New("parameter name cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{name}", url.PathEscape(name))
	if client.subscriptionID == "" {
		return nil, errors.New("parameter client.subscriptionID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{subscriptionId}", url.PathEscape(client.subscriptionID))
	req, err := azcore.NewRequest(ctx, http.MethodGet, azcore.JoinPaths(client.con.Endpoint(), urlPath))
	if err != nil {
		return nil, err
	}
	req.Telemetry(telemetryInfo)
	reqQP := req.URL.Query()
	reqQP.Set("api-version", "2021-02-01")
	req.URL.RawQuery = reqQP.Encode()
	req.Header.Set("Accept", "application/json")
	return req, nil
}

// getServerFarmSKUsHandleResponse handles the GetServerFarmSKUs response.
func (client *AppServicePlansClient) getServerFarmSKUsHandleResponse(resp *azcore.Response) (AppServicePlansGetServerFarmSKUsResponse, error) {
	result := AppServicePlansGetServerFarmSKUsResponse{RawResponse: resp.Response}
	if err := resp.UnmarshalAsJSON(&result.Object); err != nil {
		return AppServicePlansGetServerFarmSKUsResponse{}, err
	}
	return result, nil
}

// getServerFarmSKUsHandleError handles the GetServerFarmSKUs error response.
func (client *AppServicePlansClient) getServerFarmSKUsHandleError(resp *azcore.Response) error {
	body, err := resp.Payload()
	if err != nil {
		return azcore.NewResponseError(err, resp.Response)
	}
	errType := DefaultErrorResponse{raw: string(body)}
	if err := resp.UnmarshalAsJSON(&errType); err != nil {
		return azcore.NewResponseError(fmt.Errorf("%s\n%s", string(body), err), resp.Response)
	}
	return azcore.NewResponseError(&errType, resp.Response)
}

// GetVnetFromServerFarm - Description for Get a Virtual Network associated with an App Service plan.
// If the operation fails it returns the *DefaultErrorResponse error type.
func (client *AppServicePlansClient) GetVnetFromServerFarm(ctx context.Context, resourceGroupName string, name string, vnetName string, options *AppServicePlansGetVnetFromServerFarmOptions) (AppServicePlansGetVnetFromServerFarmResponse, error) {
	req, err := client.getVnetFromServerFarmCreateRequest(ctx, resourceGroupName, name, vnetName, options)
	if err != nil {
		return AppServicePlansGetVnetFromServerFarmResponse{}, err
	}
	resp, err := client.con.Pipeline().Do(req)
	if err != nil {
		return AppServicePlansGetVnetFromServerFarmResponse{}, err
	}
	if !resp.HasStatusCode(http.StatusOK) {
		return AppServicePlansGetVnetFromServerFarmResponse{}, client.getVnetFromServerFarmHandleError(resp)
	}
	return client.getVnetFromServerFarmHandleResponse(resp)
}

// getVnetFromServerFarmCreateRequest creates the GetVnetFromServerFarm request.
func (client *AppServicePlansClient) getVnetFromServerFarmCreateRequest(ctx context.Context, resourceGroupName string, name string, vnetName string, options *AppServicePlansGetVnetFromServerFarmOptions) (*azcore.Request, error) {
	urlPath := "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/serverfarms/{name}/virtualNetworkConnections/{vnetName}"
	if resourceGroupName == "" {
		return nil, errors.New("parameter resourceGroupName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{resourceGroupName}", url.PathEscape(resourceGroupName))
	if name == "" {
		return nil, errors.New("parameter name cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{name}", url.PathEscape(name))
	if vnetName == "" {
		return nil, errors.New("parameter vnetName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{vnetName}", url.PathEscape(vnetName))
	if client.subscriptionID == "" {
		return nil, errors.New("parameter client.subscriptionID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{subscriptionId}", url.PathEscape(client.subscriptionID))
	req, err := azcore.NewRequest(ctx, http.MethodGet, azcore.JoinPaths(client.con.Endpoint(), urlPath))
	if err != nil {
		return nil, err
	}
	req.Telemetry(telemetryInfo)
	reqQP := req.URL.Query()
	reqQP.Set("api-version", "2021-02-01")
	req.URL.RawQuery = reqQP.Encode()
	req.Header.Set("Accept", "application/json")
	return req, nil
}

// getVnetFromServerFarmHandleResponse handles the GetVnetFromServerFarm response.
func (client *AppServicePlansClient) getVnetFromServerFarmHandleResponse(resp *azcore.Response) (AppServicePlansGetVnetFromServerFarmResponse, error) {
	result := AppServicePlansGetVnetFromServerFarmResponse{RawResponse: resp.Response}
	if err := resp.UnmarshalAsJSON(&result.VnetInfoResource); err != nil {
		return AppServicePlansGetVnetFromServerFarmResponse{}, err
	}
	return result, nil
}

// getVnetFromServerFarmHandleError handles the GetVnetFromServerFarm error response.
func (client *AppServicePlansClient) getVnetFromServerFarmHandleError(resp *azcore.Response) error {
	body, err := resp.Payload()
	if err != nil {
		return azcore.NewResponseError(err, resp.Response)
	}
	switch resp.StatusCode {
	case http.StatusNotFound:
		if len(body) == 0 {
			return azcore.NewResponseError(errors.New(resp.Status), resp.Response)
		}
		return azcore.NewResponseError(errors.New(string(body)), resp.Response)
	default:
		errType := DefaultErrorResponse{raw: string(body)}
		if err := resp.UnmarshalAsJSON(&errType); err != nil {
			return azcore.NewResponseError(fmt.Errorf("%s\n%s", string(body), err), resp.Response)
		}
		return azcore.NewResponseError(&errType, resp.Response)
	}
}

// GetVnetGateway - Description for Get a Virtual Network gateway.
// If the operation fails it returns the *DefaultErrorResponse error type.
func (client *AppServicePlansClient) GetVnetGateway(ctx context.Context, resourceGroupName string, name string, vnetName string, gatewayName string, options *AppServicePlansGetVnetGatewayOptions) (AppServicePlansGetVnetGatewayResponse, error) {
	req, err := client.getVnetGatewayCreateRequest(ctx, resourceGroupName, name, vnetName, gatewayName, options)
	if err != nil {
		return AppServicePlansGetVnetGatewayResponse{}, err
	}
	resp, err := client.con.Pipeline().Do(req)
	if err != nil {
		return AppServicePlansGetVnetGatewayResponse{}, err
	}
	if !resp.HasStatusCode(http.StatusOK) {
		return AppServicePlansGetVnetGatewayResponse{}, client.getVnetGatewayHandleError(resp)
	}
	return client.getVnetGatewayHandleResponse(resp)
}

// getVnetGatewayCreateRequest creates the GetVnetGateway request.
func (client *AppServicePlansClient) getVnetGatewayCreateRequest(ctx context.Context, resourceGroupName string, name string, vnetName string, gatewayName string, options *AppServicePlansGetVnetGatewayOptions) (*azcore.Request, error) {
	urlPath := "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/serverfarms/{name}/virtualNetworkConnections/{vnetName}/gateways/{gatewayName}"
	if resourceGroupName == "" {
		return nil, errors.New("parameter resourceGroupName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{resourceGroupName}", url.PathEscape(resourceGroupName))
	if name == "" {
		return nil, errors.New("parameter name cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{name}", url.PathEscape(name))
	if vnetName == "" {
		return nil, errors.New("parameter vnetName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{vnetName}", url.PathEscape(vnetName))
	if gatewayName == "" {
		return nil, errors.New("parameter gatewayName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{gatewayName}", url.PathEscape(gatewayName))
	if client.subscriptionID == "" {
		return nil, errors.New("parameter client.subscriptionID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{subscriptionId}", url.PathEscape(client.subscriptionID))
	req, err := azcore.NewRequest(ctx, http.MethodGet, azcore.JoinPaths(client.con.Endpoint(), urlPath))
	if err != nil {
		return nil, err
	}
	req.Telemetry(telemetryInfo)
	reqQP := req.URL.Query()
	reqQP.Set("api-version", "2021-02-01")
	req.URL.RawQuery = reqQP.Encode()
	req.Header.Set("Accept", "application/json")
	return req, nil
}

// getVnetGatewayHandleResponse handles the GetVnetGateway response.
func (client *AppServicePlansClient) getVnetGatewayHandleResponse(resp *azcore.Response) (AppServicePlansGetVnetGatewayResponse, error) {
	result := AppServicePlansGetVnetGatewayResponse{RawResponse: resp.Response}
	if err := resp.UnmarshalAsJSON(&result.VnetGateway); err != nil {
		return AppServicePlansGetVnetGatewayResponse{}, err
	}
	return result, nil
}

// getVnetGatewayHandleError handles the GetVnetGateway error response.
func (client *AppServicePlansClient) getVnetGatewayHandleError(resp *azcore.Response) error {
	body, err := resp.Payload()
	if err != nil {
		return azcore.NewResponseError(err, resp.Response)
	}
	errType := DefaultErrorResponse{raw: string(body)}
	if err := resp.UnmarshalAsJSON(&errType); err != nil {
		return azcore.NewResponseError(fmt.Errorf("%s\n%s", string(body), err), resp.Response)
	}
	return azcore.NewResponseError(&errType, resp.Response)
}

// List - Description for Get all App Service plans for a subscription.
// If the operation fails it returns the *DefaultErrorResponse error type.
func (client *AppServicePlansClient) List(options *AppServicePlansListOptions) AppServicePlansListPager {
	return &appServicePlansListPager{
		client: client,
		requester: func(ctx context.Context) (*azcore.Request, error) {
			return client.listCreateRequest(ctx, options)
		},
		advancer: func(ctx context.Context, resp AppServicePlansListResponse) (*azcore.Request, error) {
			return azcore.NewRequest(ctx, http.MethodGet, *resp.AppServicePlanCollection.NextLink)
		},
	}
}

// listCreateRequest creates the List request.
func (client *AppServicePlansClient) listCreateRequest(ctx context.Context, options *AppServicePlansListOptions) (*azcore.Request, error) {
	urlPath := "/subscriptions/{subscriptionId}/providers/Microsoft.Web/serverfarms"
	if client.subscriptionID == "" {
		return nil, errors.New("parameter client.subscriptionID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{subscriptionId}", url.PathEscape(client.subscriptionID))
	req, err := azcore.NewRequest(ctx, http.MethodGet, azcore.JoinPaths(client.con.Endpoint(), urlPath))
	if err != nil {
		return nil, err
	}
	req.Telemetry(telemetryInfo)
	reqQP := req.URL.Query()
	if options != nil && options.Detailed != nil {
		reqQP.Set("detailed", strconv.FormatBool(*options.Detailed))
	}
	reqQP.Set("api-version", "2021-02-01")
	req.URL.RawQuery = reqQP.Encode()
	req.Header.Set("Accept", "application/json")
	return req, nil
}

// listHandleResponse handles the List response.
func (client *AppServicePlansClient) listHandleResponse(resp *azcore.Response) (AppServicePlansListResponse, error) {
	result := AppServicePlansListResponse{RawResponse: resp.Response}
	if err := resp.UnmarshalAsJSON(&result.AppServicePlanCollection); err != nil {
		return AppServicePlansListResponse{}, err
	}
	return result, nil
}

// listHandleError handles the List error response.
func (client *AppServicePlansClient) listHandleError(resp *azcore.Response) error {
	body, err := resp.Payload()
	if err != nil {
		return azcore.NewResponseError(err, resp.Response)
	}
	errType := DefaultErrorResponse{raw: string(body)}
	if err := resp.UnmarshalAsJSON(&errType); err != nil {
		return azcore.NewResponseError(fmt.Errorf("%s\n%s", string(body), err), resp.Response)
	}
	return azcore.NewResponseError(&errType, resp.Response)
}

// ListByResourceGroup - Description for Get all App Service plans in a resource group.
// If the operation fails it returns the *DefaultErrorResponse error type.
func (client *AppServicePlansClient) ListByResourceGroup(resourceGroupName string, options *AppServicePlansListByResourceGroupOptions) AppServicePlansListByResourceGroupPager {
	return &appServicePlansListByResourceGroupPager{
		client: client,
		requester: func(ctx context.Context) (*azcore.Request, error) {
			return client.listByResourceGroupCreateRequest(ctx, resourceGroupName, options)
		},
		advancer: func(ctx context.Context, resp AppServicePlansListByResourceGroupResponse) (*azcore.Request, error) {
			return azcore.NewRequest(ctx, http.MethodGet, *resp.AppServicePlanCollection.NextLink)
		},
	}
}

// listByResourceGroupCreateRequest creates the ListByResourceGroup request.
func (client *AppServicePlansClient) listByResourceGroupCreateRequest(ctx context.Context, resourceGroupName string, options *AppServicePlansListByResourceGroupOptions) (*azcore.Request, error) {
	urlPath := "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/serverfarms"
	if resourceGroupName == "" {
		return nil, errors.New("parameter resourceGroupName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{resourceGroupName}", url.PathEscape(resourceGroupName))
	if client.subscriptionID == "" {
		return nil, errors.New("parameter client.subscriptionID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{subscriptionId}", url.PathEscape(client.subscriptionID))
	req, err := azcore.NewRequest(ctx, http.MethodGet, azcore.JoinPaths(client.con.Endpoint(), urlPath))
	if err != nil {
		return nil, err
	}
	req.Telemetry(telemetryInfo)
	reqQP := req.URL.Query()
	reqQP.Set("api-version", "2021-02-01")
	req.URL.RawQuery = reqQP.Encode()
	req.Header.Set("Accept", "application/json")
	return req, nil
}

// listByResourceGroupHandleResponse handles the ListByResourceGroup response.
func (client *AppServicePlansClient) listByResourceGroupHandleResponse(resp *azcore.Response) (AppServicePlansListByResourceGroupResponse, error) {
	result := AppServicePlansListByResourceGroupResponse{RawResponse: resp.Response}
	if err := resp.UnmarshalAsJSON(&result.AppServicePlanCollection); err != nil {
		return AppServicePlansListByResourceGroupResponse{}, err
	}
	return result, nil
}

// listByResourceGroupHandleError handles the ListByResourceGroup error response.
func (client *AppServicePlansClient) listByResourceGroupHandleError(resp *azcore.Response) error {
	body, err := resp.Payload()
	if err != nil {
		return azcore.NewResponseError(err, resp.Response)
	}
	errType := DefaultErrorResponse{raw: string(body)}
	if err := resp.UnmarshalAsJSON(&errType); err != nil {
		return azcore.NewResponseError(fmt.Errorf("%s\n%s", string(body), err), resp.Response)
	}
	return azcore.NewResponseError(&errType, resp.Response)
}

// ListCapabilities - Description for List all capabilities of an App Service plan.
// If the operation fails it returns the *DefaultErrorResponse error type.
func (client *AppServicePlansClient) ListCapabilities(ctx context.Context, resourceGroupName string, name string, options *AppServicePlansListCapabilitiesOptions) (AppServicePlansListCapabilitiesResponse, error) {
	req, err := client.listCapabilitiesCreateRequest(ctx, resourceGroupName, name, options)
	if err != nil {
		return AppServicePlansListCapabilitiesResponse{}, err
	}
	resp, err := client.con.Pipeline().Do(req)
	if err != nil {
		return AppServicePlansListCapabilitiesResponse{}, err
	}
	if !resp.HasStatusCode(http.StatusOK) {
		return AppServicePlansListCapabilitiesResponse{}, client.listCapabilitiesHandleError(resp)
	}
	return client.listCapabilitiesHandleResponse(resp)
}

// listCapabilitiesCreateRequest creates the ListCapabilities request.
func (client *AppServicePlansClient) listCapabilitiesCreateRequest(ctx context.Context, resourceGroupName string, name string, options *AppServicePlansListCapabilitiesOptions) (*azcore.Request, error) {
	urlPath := "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/serverfarms/{name}/capabilities"
	if resourceGroupName == "" {
		return nil, errors.New("parameter resourceGroupName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{resourceGroupName}", url.PathEscape(resourceGroupName))
	if name == "" {
		return nil, errors.New("parameter name cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{name}", url.PathEscape(name))
	if client.subscriptionID == "" {
		return nil, errors.New("parameter client.subscriptionID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{subscriptionId}", url.PathEscape(client.subscriptionID))
	req, err := azcore.NewRequest(ctx, http.MethodGet, azcore.JoinPaths(client.con.Endpoint(), urlPath))
	if err != nil {
		return nil, err
	}
	req.Telemetry(telemetryInfo)
	reqQP := req.URL.Query()
	reqQP.Set("api-version", "2021-02-01")
	req.URL.RawQuery = reqQP.Encode()
	req.Header.Set("Accept", "application/json")
	return req, nil
}

// listCapabilitiesHandleResponse handles the ListCapabilities response.
func (client *AppServicePlansClient) listCapabilitiesHandleResponse(resp *azcore.Response) (AppServicePlansListCapabilitiesResponse, error) {
	result := AppServicePlansListCapabilitiesResponse{RawResponse: resp.Response}
	if err := resp.UnmarshalAsJSON(&result.CapabilityArray); err != nil {
		return AppServicePlansListCapabilitiesResponse{}, err
	}
	return result, nil
}

// listCapabilitiesHandleError handles the ListCapabilities error response.
func (client *AppServicePlansClient) listCapabilitiesHandleError(resp *azcore.Response) error {
	body, err := resp.Payload()
	if err != nil {
		return azcore.NewResponseError(err, resp.Response)
	}
	errType := DefaultErrorResponse{raw: string(body)}
	if err := resp.UnmarshalAsJSON(&errType); err != nil {
		return azcore.NewResponseError(fmt.Errorf("%s\n%s", string(body), err), resp.Response)
	}
	return azcore.NewResponseError(&errType, resp.Response)
}

// ListHybridConnectionKeys - Description for Get the send key name and value of a Hybrid Connection.
// If the operation fails it returns the *DefaultErrorResponse error type.
func (client *AppServicePlansClient) ListHybridConnectionKeys(ctx context.Context, resourceGroupName string, name string, namespaceName string, relayName string, options *AppServicePlansListHybridConnectionKeysOptions) (AppServicePlansListHybridConnectionKeysResponse, error) {
	req, err := client.listHybridConnectionKeysCreateRequest(ctx, resourceGroupName, name, namespaceName, relayName, options)
	if err != nil {
		return AppServicePlansListHybridConnectionKeysResponse{}, err
	}
	resp, err := client.con.Pipeline().Do(req)
	if err != nil {
		return AppServicePlansListHybridConnectionKeysResponse{}, err
	}
	if !resp.HasStatusCode(http.StatusOK) {
		return AppServicePlansListHybridConnectionKeysResponse{}, client.listHybridConnectionKeysHandleError(resp)
	}
	return client.listHybridConnectionKeysHandleResponse(resp)
}

// listHybridConnectionKeysCreateRequest creates the ListHybridConnectionKeys request.
func (client *AppServicePlansClient) listHybridConnectionKeysCreateRequest(ctx context.Context, resourceGroupName string, name string, namespaceName string, relayName string, options *AppServicePlansListHybridConnectionKeysOptions) (*azcore.Request, error) {
	urlPath := "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/serverfarms/{name}/hybridConnectionNamespaces/{namespaceName}/relays/{relayName}/listKeys"
	if resourceGroupName == "" {
		return nil, errors.New("parameter resourceGroupName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{resourceGroupName}", url.PathEscape(resourceGroupName))
	if name == "" {
		return nil, errors.New("parameter name cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{name}", url.PathEscape(name))
	if namespaceName == "" {
		return nil, errors.New("parameter namespaceName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{namespaceName}", url.PathEscape(namespaceName))
	if relayName == "" {
		return nil, errors.New("parameter relayName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{relayName}", url.PathEscape(relayName))
	if client.subscriptionID == "" {
		return nil, errors.New("parameter client.subscriptionID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{subscriptionId}", url.PathEscape(client.subscriptionID))
	req, err := azcore.NewRequest(ctx, http.MethodPost, azcore.JoinPaths(client.con.Endpoint(), urlPath))
	if err != nil {
		return nil, err
	}
	req.Telemetry(telemetryInfo)
	reqQP := req.URL.Query()
	reqQP.Set("api-version", "2021-02-01")
	req.URL.RawQuery = reqQP.Encode()
	req.Header.Set("Accept", "application/json")
	return req, nil
}

// listHybridConnectionKeysHandleResponse handles the ListHybridConnectionKeys response.
func (client *AppServicePlansClient) listHybridConnectionKeysHandleResponse(resp *azcore.Response) (AppServicePlansListHybridConnectionKeysResponse, error) {
	result := AppServicePlansListHybridConnectionKeysResponse{RawResponse: resp.Response}
	if err := resp.UnmarshalAsJSON(&result.HybridConnectionKey); err != nil {
		return AppServicePlansListHybridConnectionKeysResponse{}, err
	}
	return result, nil
}

// listHybridConnectionKeysHandleError handles the ListHybridConnectionKeys error response.
func (client *AppServicePlansClient) listHybridConnectionKeysHandleError(resp *azcore.Response) error {
	body, err := resp.Payload()
	if err != nil {
		return azcore.NewResponseError(err, resp.Response)
	}
	errType := DefaultErrorResponse{raw: string(body)}
	if err := resp.UnmarshalAsJSON(&errType); err != nil {
		return azcore.NewResponseError(fmt.Errorf("%s\n%s", string(body), err), resp.Response)
	}
	return azcore.NewResponseError(&errType, resp.Response)
}

// ListHybridConnections - Description for Retrieve all Hybrid Connections in use in an App Service plan.
// If the operation fails it returns the *DefaultErrorResponse error type.
func (client *AppServicePlansClient) ListHybridConnections(resourceGroupName string, name string, options *AppServicePlansListHybridConnectionsOptions) AppServicePlansListHybridConnectionsPager {
	return &appServicePlansListHybridConnectionsPager{
		client: client,
		requester: func(ctx context.Context) (*azcore.Request, error) {
			return client.listHybridConnectionsCreateRequest(ctx, resourceGroupName, name, options)
		},
		advancer: func(ctx context.Context, resp AppServicePlansListHybridConnectionsResponse) (*azcore.Request, error) {
			return azcore.NewRequest(ctx, http.MethodGet, *resp.HybridConnectionCollection.NextLink)
		},
	}
}

// listHybridConnectionsCreateRequest creates the ListHybridConnections request.
func (client *AppServicePlansClient) listHybridConnectionsCreateRequest(ctx context.Context, resourceGroupName string, name string, options *AppServicePlansListHybridConnectionsOptions) (*azcore.Request, error) {
	urlPath := "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/serverfarms/{name}/hybridConnectionRelays"
	if resourceGroupName == "" {
		return nil, errors.New("parameter resourceGroupName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{resourceGroupName}", url.PathEscape(resourceGroupName))
	if name == "" {
		return nil, errors.New("parameter name cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{name}", url.PathEscape(name))
	if client.subscriptionID == "" {
		return nil, errors.New("parameter client.subscriptionID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{subscriptionId}", url.PathEscape(client.subscriptionID))
	req, err := azcore.NewRequest(ctx, http.MethodGet, azcore.JoinPaths(client.con.Endpoint(), urlPath))
	if err != nil {
		return nil, err
	}
	req.Telemetry(telemetryInfo)
	reqQP := req.URL.Query()
	reqQP.Set("api-version", "2021-02-01")
	req.URL.RawQuery = reqQP.Encode()
	req.Header.Set("Accept", "application/json")
	return req, nil
}

// listHybridConnectionsHandleResponse handles the ListHybridConnections response.
func (client *AppServicePlansClient) listHybridConnectionsHandleResponse(resp *azcore.Response) (AppServicePlansListHybridConnectionsResponse, error) {
	result := AppServicePlansListHybridConnectionsResponse{RawResponse: resp.Response}
	if err := resp.UnmarshalAsJSON(&result.HybridConnectionCollection); err != nil {
		return AppServicePlansListHybridConnectionsResponse{}, err
	}
	return result, nil
}

// listHybridConnectionsHandleError handles the ListHybridConnections error response.
func (client *AppServicePlansClient) listHybridConnectionsHandleError(resp *azcore.Response) error {
	body, err := resp.Payload()
	if err != nil {
		return azcore.NewResponseError(err, resp.Response)
	}
	errType := DefaultErrorResponse{raw: string(body)}
	if err := resp.UnmarshalAsJSON(&errType); err != nil {
		return azcore.NewResponseError(fmt.Errorf("%s\n%s", string(body), err), resp.Response)
	}
	return azcore.NewResponseError(&errType, resp.Response)
}

// ListRoutesForVnet - Description for Get all routes that are associated with a Virtual Network in an App Service plan.
// If the operation fails it returns the *DefaultErrorResponse error type.
func (client *AppServicePlansClient) ListRoutesForVnet(ctx context.Context, resourceGroupName string, name string, vnetName string, options *AppServicePlansListRoutesForVnetOptions) (AppServicePlansListRoutesForVnetResponse, error) {
	req, err := client.listRoutesForVnetCreateRequest(ctx, resourceGroupName, name, vnetName, options)
	if err != nil {
		return AppServicePlansListRoutesForVnetResponse{}, err
	}
	resp, err := client.con.Pipeline().Do(req)
	if err != nil {
		return AppServicePlansListRoutesForVnetResponse{}, err
	}
	if !resp.HasStatusCode(http.StatusOK) {
		return AppServicePlansListRoutesForVnetResponse{}, client.listRoutesForVnetHandleError(resp)
	}
	return client.listRoutesForVnetHandleResponse(resp)
}

// listRoutesForVnetCreateRequest creates the ListRoutesForVnet request.
func (client *AppServicePlansClient) listRoutesForVnetCreateRequest(ctx context.Context, resourceGroupName string, name string, vnetName string, options *AppServicePlansListRoutesForVnetOptions) (*azcore.Request, error) {
	urlPath := "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/serverfarms/{name}/virtualNetworkConnections/{vnetName}/routes"
	if resourceGroupName == "" {
		return nil, errors.New("parameter resourceGroupName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{resourceGroupName}", url.PathEscape(resourceGroupName))
	if name == "" {
		return nil, errors.New("parameter name cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{name}", url.PathEscape(name))
	if vnetName == "" {
		return nil, errors.New("parameter vnetName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{vnetName}", url.PathEscape(vnetName))
	if client.subscriptionID == "" {
		return nil, errors.New("parameter client.subscriptionID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{subscriptionId}", url.PathEscape(client.subscriptionID))
	req, err := azcore.NewRequest(ctx, http.MethodGet, azcore.JoinPaths(client.con.Endpoint(), urlPath))
	if err != nil {
		return nil, err
	}
	req.Telemetry(telemetryInfo)
	reqQP := req.URL.Query()
	reqQP.Set("api-version", "2021-02-01")
	req.URL.RawQuery = reqQP.Encode()
	req.Header.Set("Accept", "application/json")
	return req, nil
}

// listRoutesForVnetHandleResponse handles the ListRoutesForVnet response.
func (client *AppServicePlansClient) listRoutesForVnetHandleResponse(resp *azcore.Response) (AppServicePlansListRoutesForVnetResponse, error) {
	result := AppServicePlansListRoutesForVnetResponse{RawResponse: resp.Response}
	if err := resp.UnmarshalAsJSON(&result.VnetRouteArray); err != nil {
		return AppServicePlansListRoutesForVnetResponse{}, err
	}
	return result, nil
}

// listRoutesForVnetHandleError handles the ListRoutesForVnet error response.
func (client *AppServicePlansClient) listRoutesForVnetHandleError(resp *azcore.Response) error {
	body, err := resp.Payload()
	if err != nil {
		return azcore.NewResponseError(err, resp.Response)
	}
	errType := DefaultErrorResponse{raw: string(body)}
	if err := resp.UnmarshalAsJSON(&errType); err != nil {
		return azcore.NewResponseError(fmt.Errorf("%s\n%s", string(body), err), resp.Response)
	}
	return azcore.NewResponseError(&errType, resp.Response)
}

// ListUsages - Description for Gets server farm usage information
// If the operation fails it returns the *DefaultErrorResponse error type.
func (client *AppServicePlansClient) ListUsages(resourceGroupName string, name string, options *AppServicePlansListUsagesOptions) AppServicePlansListUsagesPager {
	return &appServicePlansListUsagesPager{
		client: client,
		requester: func(ctx context.Context) (*azcore.Request, error) {
			return client.listUsagesCreateRequest(ctx, resourceGroupName, name, options)
		},
		advancer: func(ctx context.Context, resp AppServicePlansListUsagesResponse) (*azcore.Request, error) {
			return azcore.NewRequest(ctx, http.MethodGet, *resp.CsmUsageQuotaCollection.NextLink)
		},
	}
}

// listUsagesCreateRequest creates the ListUsages request.
func (client *AppServicePlansClient) listUsagesCreateRequest(ctx context.Context, resourceGroupName string, name string, options *AppServicePlansListUsagesOptions) (*azcore.Request, error) {
	urlPath := "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/serverfarms/{name}/usages"
	if resourceGroupName == "" {
		return nil, errors.New("parameter resourceGroupName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{resourceGroupName}", url.PathEscape(resourceGroupName))
	if name == "" {
		return nil, errors.New("parameter name cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{name}", url.PathEscape(name))
	if client.subscriptionID == "" {
		return nil, errors.New("parameter client.subscriptionID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{subscriptionId}", url.PathEscape(client.subscriptionID))
	req, err := azcore.NewRequest(ctx, http.MethodGet, azcore.JoinPaths(client.con.Endpoint(), urlPath))
	if err != nil {
		return nil, err
	}
	req.Telemetry(telemetryInfo)
	reqQP := req.URL.Query()
	reqQP.Set("api-version", "2021-02-01")
	req.URL.RawQuery = reqQP.Encode()
	unencodedParams := []string{req.URL.RawQuery}
	if options != nil && options.Filter != nil {
		unencodedParams = append(unencodedParams, "$filter="+*options.Filter)
	}
	req.URL.RawQuery = strings.Join(unencodedParams, "&")
	req.Header.Set("Accept", "application/json")
	return req, nil
}

// listUsagesHandleResponse handles the ListUsages response.
func (client *AppServicePlansClient) listUsagesHandleResponse(resp *azcore.Response) (AppServicePlansListUsagesResponse, error) {
	result := AppServicePlansListUsagesResponse{RawResponse: resp.Response}
	if err := resp.UnmarshalAsJSON(&result.CsmUsageQuotaCollection); err != nil {
		return AppServicePlansListUsagesResponse{}, err
	}
	return result, nil
}

// listUsagesHandleError handles the ListUsages error response.
func (client *AppServicePlansClient) listUsagesHandleError(resp *azcore.Response) error {
	body, err := resp.Payload()
	if err != nil {
		return azcore.NewResponseError(err, resp.Response)
	}
	errType := DefaultErrorResponse{raw: string(body)}
	if err := resp.UnmarshalAsJSON(&errType); err != nil {
		return azcore.NewResponseError(fmt.Errorf("%s\n%s", string(body), err), resp.Response)
	}
	return azcore.NewResponseError(&errType, resp.Response)
}

// ListVnets - Description for Get all Virtual Networks associated with an App Service plan.
// If the operation fails it returns the *DefaultErrorResponse error type.
func (client *AppServicePlansClient) ListVnets(ctx context.Context, resourceGroupName string, name string, options *AppServicePlansListVnetsOptions) (AppServicePlansListVnetsResponse, error) {
	req, err := client.listVnetsCreateRequest(ctx, resourceGroupName, name, options)
	if err != nil {
		return AppServicePlansListVnetsResponse{}, err
	}
	resp, err := client.con.Pipeline().Do(req)
	if err != nil {
		return AppServicePlansListVnetsResponse{}, err
	}
	if !resp.HasStatusCode(http.StatusOK) {
		return AppServicePlansListVnetsResponse{}, client.listVnetsHandleError(resp)
	}
	return client.listVnetsHandleResponse(resp)
}

// listVnetsCreateRequest creates the ListVnets request.
func (client *AppServicePlansClient) listVnetsCreateRequest(ctx context.Context, resourceGroupName string, name string, options *AppServicePlansListVnetsOptions) (*azcore.Request, error) {
	urlPath := "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/serverfarms/{name}/virtualNetworkConnections"
	if resourceGroupName == "" {
		return nil, errors.New("parameter resourceGroupName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{resourceGroupName}", url.PathEscape(resourceGroupName))
	if name == "" {
		return nil, errors.New("parameter name cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{name}", url.PathEscape(name))
	if client.subscriptionID == "" {
		return nil, errors.New("parameter client.subscriptionID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{subscriptionId}", url.PathEscape(client.subscriptionID))
	req, err := azcore.NewRequest(ctx, http.MethodGet, azcore.JoinPaths(client.con.Endpoint(), urlPath))
	if err != nil {
		return nil, err
	}
	req.Telemetry(telemetryInfo)
	reqQP := req.URL.Query()
	reqQP.Set("api-version", "2021-02-01")
	req.URL.RawQuery = reqQP.Encode()
	req.Header.Set("Accept", "application/json")
	return req, nil
}

// listVnetsHandleResponse handles the ListVnets response.
func (client *AppServicePlansClient) listVnetsHandleResponse(resp *azcore.Response) (AppServicePlansListVnetsResponse, error) {
	result := AppServicePlansListVnetsResponse{RawResponse: resp.Response}
	if err := resp.UnmarshalAsJSON(&result.VnetInfoResourceArray); err != nil {
		return AppServicePlansListVnetsResponse{}, err
	}
	return result, nil
}

// listVnetsHandleError handles the ListVnets error response.
func (client *AppServicePlansClient) listVnetsHandleError(resp *azcore.Response) error {
	body, err := resp.Payload()
	if err != nil {
		return azcore.NewResponseError(err, resp.Response)
	}
	errType := DefaultErrorResponse{raw: string(body)}
	if err := resp.UnmarshalAsJSON(&errType); err != nil {
		return azcore.NewResponseError(fmt.Errorf("%s\n%s", string(body), err), resp.Response)
	}
	return azcore.NewResponseError(&errType, resp.Response)
}

// ListWebApps - Description for Get all apps associated with an App Service plan.
// If the operation fails it returns the *DefaultErrorResponse error type.
func (client *AppServicePlansClient) ListWebApps(resourceGroupName string, name string, options *AppServicePlansListWebAppsOptions) AppServicePlansListWebAppsPager {
	return &appServicePlansListWebAppsPager{
		client: client,
		requester: func(ctx context.Context) (*azcore.Request, error) {
			return client.listWebAppsCreateRequest(ctx, resourceGroupName, name, options)
		},
		advancer: func(ctx context.Context, resp AppServicePlansListWebAppsResponse) (*azcore.Request, error) {
			return azcore.NewRequest(ctx, http.MethodGet, *resp.WebAppCollection.NextLink)
		},
	}
}

// listWebAppsCreateRequest creates the ListWebApps request.
func (client *AppServicePlansClient) listWebAppsCreateRequest(ctx context.Context, resourceGroupName string, name string, options *AppServicePlansListWebAppsOptions) (*azcore.Request, error) {
	urlPath := "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/serverfarms/{name}/sites"
	if resourceGroupName == "" {
		return nil, errors.New("parameter resourceGroupName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{resourceGroupName}", url.PathEscape(resourceGroupName))
	if name == "" {
		return nil, errors.New("parameter name cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{name}", url.PathEscape(name))
	if client.subscriptionID == "" {
		return nil, errors.New("parameter client.subscriptionID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{subscriptionId}", url.PathEscape(client.subscriptionID))
	req, err := azcore.NewRequest(ctx, http.MethodGet, azcore.JoinPaths(client.con.Endpoint(), urlPath))
	if err != nil {
		return nil, err
	}
	req.Telemetry(telemetryInfo)
	reqQP := req.URL.Query()
	reqQP.Set("api-version", "2021-02-01")
	if options != nil && options.SkipToken != nil {
		reqQP.Set("$skipToken", *options.SkipToken)
	}
	if options != nil && options.Top != nil {
		reqQP.Set("$top", *options.Top)
	}
	req.URL.RawQuery = reqQP.Encode()
	unencodedParams := []string{req.URL.RawQuery}
	if options != nil && options.Filter != nil {
		unencodedParams = append(unencodedParams, "$filter="+*options.Filter)
	}
	req.URL.RawQuery = strings.Join(unencodedParams, "&")
	req.Header.Set("Accept", "application/json")
	return req, nil
}

// listWebAppsHandleResponse handles the ListWebApps response.
func (client *AppServicePlansClient) listWebAppsHandleResponse(resp *azcore.Response) (AppServicePlansListWebAppsResponse, error) {
	result := AppServicePlansListWebAppsResponse{RawResponse: resp.Response}
	if err := resp.UnmarshalAsJSON(&result.WebAppCollection); err != nil {
		return AppServicePlansListWebAppsResponse{}, err
	}
	return result, nil
}

// listWebAppsHandleError handles the ListWebApps error response.
func (client *AppServicePlansClient) listWebAppsHandleError(resp *azcore.Response) error {
	body, err := resp.Payload()
	if err != nil {
		return azcore.NewResponseError(err, resp.Response)
	}
	errType := DefaultErrorResponse{raw: string(body)}
	if err := resp.UnmarshalAsJSON(&errType); err != nil {
		return azcore.NewResponseError(fmt.Errorf("%s\n%s", string(body), err), resp.Response)
	}
	return azcore.NewResponseError(&errType, resp.Response)
}

// ListWebAppsByHybridConnection - Description for Get all apps that use a Hybrid Connection in an App Service Plan.
// If the operation fails it returns the *DefaultErrorResponse error type.
func (client *AppServicePlansClient) ListWebAppsByHybridConnection(resourceGroupName string, name string, namespaceName string, relayName string, options *AppServicePlansListWebAppsByHybridConnectionOptions) AppServicePlansListWebAppsByHybridConnectionPager {
	return &appServicePlansListWebAppsByHybridConnectionPager{
		client: client,
		requester: func(ctx context.Context) (*azcore.Request, error) {
			return client.listWebAppsByHybridConnectionCreateRequest(ctx, resourceGroupName, name, namespaceName, relayName, options)
		},
		advancer: func(ctx context.Context, resp AppServicePlansListWebAppsByHybridConnectionResponse) (*azcore.Request, error) {
			return azcore.NewRequest(ctx, http.MethodGet, *resp.ResourceCollection.NextLink)
		},
	}
}

// listWebAppsByHybridConnectionCreateRequest creates the ListWebAppsByHybridConnection request.
func (client *AppServicePlansClient) listWebAppsByHybridConnectionCreateRequest(ctx context.Context, resourceGroupName string, name string, namespaceName string, relayName string, options *AppServicePlansListWebAppsByHybridConnectionOptions) (*azcore.Request, error) {
	urlPath := "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/serverfarms/{name}/hybridConnectionNamespaces/{namespaceName}/relays/{relayName}/sites"
	if resourceGroupName == "" {
		return nil, errors.New("parameter resourceGroupName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{resourceGroupName}", url.PathEscape(resourceGroupName))
	if name == "" {
		return nil, errors.New("parameter name cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{name}", url.PathEscape(name))
	if namespaceName == "" {
		return nil, errors.New("parameter namespaceName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{namespaceName}", url.PathEscape(namespaceName))
	if relayName == "" {
		return nil, errors.New("parameter relayName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{relayName}", url.PathEscape(relayName))
	if client.subscriptionID == "" {
		return nil, errors.New("parameter client.subscriptionID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{subscriptionId}", url.PathEscape(client.subscriptionID))
	req, err := azcore.NewRequest(ctx, http.MethodGet, azcore.JoinPaths(client.con.Endpoint(), urlPath))
	if err != nil {
		return nil, err
	}
	req.Telemetry(telemetryInfo)
	reqQP := req.URL.Query()
	reqQP.Set("api-version", "2021-02-01")
	req.URL.RawQuery = reqQP.Encode()
	req.Header.Set("Accept", "application/json")
	return req, nil
}

// listWebAppsByHybridConnectionHandleResponse handles the ListWebAppsByHybridConnection response.
func (client *AppServicePlansClient) listWebAppsByHybridConnectionHandleResponse(resp *azcore.Response) (AppServicePlansListWebAppsByHybridConnectionResponse, error) {
	result := AppServicePlansListWebAppsByHybridConnectionResponse{RawResponse: resp.Response}
	if err := resp.UnmarshalAsJSON(&result.ResourceCollection); err != nil {
		return AppServicePlansListWebAppsByHybridConnectionResponse{}, err
	}
	return result, nil
}

// listWebAppsByHybridConnectionHandleError handles the ListWebAppsByHybridConnection error response.
func (client *AppServicePlansClient) listWebAppsByHybridConnectionHandleError(resp *azcore.Response) error {
	body, err := resp.Payload()
	if err != nil {
		return azcore.NewResponseError(err, resp.Response)
	}
	errType := DefaultErrorResponse{raw: string(body)}
	if err := resp.UnmarshalAsJSON(&errType); err != nil {
		return azcore.NewResponseError(fmt.Errorf("%s\n%s", string(body), err), resp.Response)
	}
	return azcore.NewResponseError(&errType, resp.Response)
}

// RebootWorker - Description for Reboot a worker machine in an App Service plan.
// If the operation fails it returns the *DefaultErrorResponse error type.
func (client *AppServicePlansClient) RebootWorker(ctx context.Context, resourceGroupName string, name string, workerName string, options *AppServicePlansRebootWorkerOptions) (AppServicePlansRebootWorkerResponse, error) {
	req, err := client.rebootWorkerCreateRequest(ctx, resourceGroupName, name, workerName, options)
	if err != nil {
		return AppServicePlansRebootWorkerResponse{}, err
	}
	resp, err := client.con.Pipeline().Do(req)
	if err != nil {
		return AppServicePlansRebootWorkerResponse{}, err
	}
	if !resp.HasStatusCode(http.StatusNoContent) {
		return AppServicePlansRebootWorkerResponse{}, client.rebootWorkerHandleError(resp)
	}
	return AppServicePlansRebootWorkerResponse{RawResponse: resp.Response}, nil
}

// rebootWorkerCreateRequest creates the RebootWorker request.
func (client *AppServicePlansClient) rebootWorkerCreateRequest(ctx context.Context, resourceGroupName string, name string, workerName string, options *AppServicePlansRebootWorkerOptions) (*azcore.Request, error) {
	urlPath := "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/serverfarms/{name}/workers/{workerName}/reboot"
	if resourceGroupName == "" {
		return nil, errors.New("parameter resourceGroupName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{resourceGroupName}", url.PathEscape(resourceGroupName))
	if name == "" {
		return nil, errors.New("parameter name cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{name}", url.PathEscape(name))
	if workerName == "" {
		return nil, errors.New("parameter workerName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{workerName}", url.PathEscape(workerName))
	if client.subscriptionID == "" {
		return nil, errors.New("parameter client.subscriptionID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{subscriptionId}", url.PathEscape(client.subscriptionID))
	req, err := azcore.NewRequest(ctx, http.MethodPost, azcore.JoinPaths(client.con.Endpoint(), urlPath))
	if err != nil {
		return nil, err
	}
	req.Telemetry(telemetryInfo)
	reqQP := req.URL.Query()
	reqQP.Set("api-version", "2021-02-01")
	req.URL.RawQuery = reqQP.Encode()
	req.Header.Set("Accept", "application/json")
	return req, nil
}

// rebootWorkerHandleError handles the RebootWorker error response.
func (client *AppServicePlansClient) rebootWorkerHandleError(resp *azcore.Response) error {
	body, err := resp.Payload()
	if err != nil {
		return azcore.NewResponseError(err, resp.Response)
	}
	errType := DefaultErrorResponse{raw: string(body)}
	if err := resp.UnmarshalAsJSON(&errType); err != nil {
		return azcore.NewResponseError(fmt.Errorf("%s\n%s", string(body), err), resp.Response)
	}
	return azcore.NewResponseError(&errType, resp.Response)
}

// RestartWebApps - Description for Restart all apps in an App Service plan.
// If the operation fails it returns the *DefaultErrorResponse error type.
func (client *AppServicePlansClient) RestartWebApps(ctx context.Context, resourceGroupName string, name string, options *AppServicePlansRestartWebAppsOptions) (AppServicePlansRestartWebAppsResponse, error) {
	req, err := client.restartWebAppsCreateRequest(ctx, resourceGroupName, name, options)
	if err != nil {
		return AppServicePlansRestartWebAppsResponse{}, err
	}
	resp, err := client.con.Pipeline().Do(req)
	if err != nil {
		return AppServicePlansRestartWebAppsResponse{}, err
	}
	if !resp.HasStatusCode(http.StatusNoContent) {
		return AppServicePlansRestartWebAppsResponse{}, client.restartWebAppsHandleError(resp)
	}
	return AppServicePlansRestartWebAppsResponse{RawResponse: resp.Response}, nil
}

// restartWebAppsCreateRequest creates the RestartWebApps request.
func (client *AppServicePlansClient) restartWebAppsCreateRequest(ctx context.Context, resourceGroupName string, name string, options *AppServicePlansRestartWebAppsOptions) (*azcore.Request, error) {
	urlPath := "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/serverfarms/{name}/restartSites"
	if resourceGroupName == "" {
		return nil, errors.New("parameter resourceGroupName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{resourceGroupName}", url.PathEscape(resourceGroupName))
	if name == "" {
		return nil, errors.New("parameter name cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{name}", url.PathEscape(name))
	if client.subscriptionID == "" {
		return nil, errors.New("parameter client.subscriptionID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{subscriptionId}", url.PathEscape(client.subscriptionID))
	req, err := azcore.NewRequest(ctx, http.MethodPost, azcore.JoinPaths(client.con.Endpoint(), urlPath))
	if err != nil {
		return nil, err
	}
	req.Telemetry(telemetryInfo)
	reqQP := req.URL.Query()
	if options != nil && options.SoftRestart != nil {
		reqQP.Set("softRestart", strconv.FormatBool(*options.SoftRestart))
	}
	reqQP.Set("api-version", "2021-02-01")
	req.URL.RawQuery = reqQP.Encode()
	req.Header.Set("Accept", "application/json")
	return req, nil
}

// restartWebAppsHandleError handles the RestartWebApps error response.
func (client *AppServicePlansClient) restartWebAppsHandleError(resp *azcore.Response) error {
	body, err := resp.Payload()
	if err != nil {
		return azcore.NewResponseError(err, resp.Response)
	}
	errType := DefaultErrorResponse{raw: string(body)}
	if err := resp.UnmarshalAsJSON(&errType); err != nil {
		return azcore.NewResponseError(fmt.Errorf("%s\n%s", string(body), err), resp.Response)
	}
	return azcore.NewResponseError(&errType, resp.Response)
}

// Update - Description for Creates or updates an App Service Plan.
// If the operation fails it returns the *DefaultErrorResponse error type.
func (client *AppServicePlansClient) Update(ctx context.Context, resourceGroupName string, name string, appServicePlan AppServicePlanPatchResource, options *AppServicePlansUpdateOptions) (AppServicePlansUpdateResponse, error) {
	req, err := client.updateCreateRequest(ctx, resourceGroupName, name, appServicePlan, options)
	if err != nil {
		return AppServicePlansUpdateResponse{}, err
	}
	resp, err := client.con.Pipeline().Do(req)
	if err != nil {
		return AppServicePlansUpdateResponse{}, err
	}
	if !resp.HasStatusCode(http.StatusOK, http.StatusAccepted) {
		return AppServicePlansUpdateResponse{}, client.updateHandleError(resp)
	}
	return client.updateHandleResponse(resp)
}

// updateCreateRequest creates the Update request.
func (client *AppServicePlansClient) updateCreateRequest(ctx context.Context, resourceGroupName string, name string, appServicePlan AppServicePlanPatchResource, options *AppServicePlansUpdateOptions) (*azcore.Request, error) {
	urlPath := "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/serverfarms/{name}"
	if resourceGroupName == "" {
		return nil, errors.New("parameter resourceGroupName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{resourceGroupName}", url.PathEscape(resourceGroupName))
	if name == "" {
		return nil, errors.New("parameter name cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{name}", url.PathEscape(name))
	if client.subscriptionID == "" {
		return nil, errors.New("parameter client.subscriptionID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{subscriptionId}", url.PathEscape(client.subscriptionID))
	req, err := azcore.NewRequest(ctx, http.MethodPatch, azcore.JoinPaths(client.con.Endpoint(), urlPath))
	if err != nil {
		return nil, err
	}
	req.Telemetry(telemetryInfo)
	reqQP := req.URL.Query()
	reqQP.Set("api-version", "2021-02-01")
	req.URL.RawQuery = reqQP.Encode()
	req.Header.Set("Accept", "application/json")
	return req, req.MarshalAsJSON(appServicePlan)
}

// updateHandleResponse handles the Update response.
func (client *AppServicePlansClient) updateHandleResponse(resp *azcore.Response) (AppServicePlansUpdateResponse, error) {
	result := AppServicePlansUpdateResponse{RawResponse: resp.Response}
	if err := resp.UnmarshalAsJSON(&result.AppServicePlan); err != nil {
		return AppServicePlansUpdateResponse{}, err
	}
	return result, nil
}

// updateHandleError handles the Update error response.
func (client *AppServicePlansClient) updateHandleError(resp *azcore.Response) error {
	body, err := resp.Payload()
	if err != nil {
		return azcore.NewResponseError(err, resp.Response)
	}
	errType := DefaultErrorResponse{raw: string(body)}
	if err := resp.UnmarshalAsJSON(&errType); err != nil {
		return azcore.NewResponseError(fmt.Errorf("%s\n%s", string(body), err), resp.Response)
	}
	return azcore.NewResponseError(&errType, resp.Response)
}

// UpdateVnetGateway - Description for Update a Virtual Network gateway.
// If the operation fails it returns the *DefaultErrorResponse error type.
func (client *AppServicePlansClient) UpdateVnetGateway(ctx context.Context, resourceGroupName string, name string, vnetName string, gatewayName string, connectionEnvelope VnetGateway, options *AppServicePlansUpdateVnetGatewayOptions) (AppServicePlansUpdateVnetGatewayResponse, error) {
	req, err := client.updateVnetGatewayCreateRequest(ctx, resourceGroupName, name, vnetName, gatewayName, connectionEnvelope, options)
	if err != nil {
		return AppServicePlansUpdateVnetGatewayResponse{}, err
	}
	resp, err := client.con.Pipeline().Do(req)
	if err != nil {
		return AppServicePlansUpdateVnetGatewayResponse{}, err
	}
	if !resp.HasStatusCode(http.StatusOK) {
		return AppServicePlansUpdateVnetGatewayResponse{}, client.updateVnetGatewayHandleError(resp)
	}
	return client.updateVnetGatewayHandleResponse(resp)
}

// updateVnetGatewayCreateRequest creates the UpdateVnetGateway request.
func (client *AppServicePlansClient) updateVnetGatewayCreateRequest(ctx context.Context, resourceGroupName string, name string, vnetName string, gatewayName string, connectionEnvelope VnetGateway, options *AppServicePlansUpdateVnetGatewayOptions) (*azcore.Request, error) {
	urlPath := "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/serverfarms/{name}/virtualNetworkConnections/{vnetName}/gateways/{gatewayName}"
	if resourceGroupName == "" {
		return nil, errors.New("parameter resourceGroupName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{resourceGroupName}", url.PathEscape(resourceGroupName))
	if name == "" {
		return nil, errors.New("parameter name cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{name}", url.PathEscape(name))
	if vnetName == "" {
		return nil, errors.New("parameter vnetName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{vnetName}", url.PathEscape(vnetName))
	if gatewayName == "" {
		return nil, errors.New("parameter gatewayName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{gatewayName}", url.PathEscape(gatewayName))
	if client.subscriptionID == "" {
		return nil, errors.New("parameter client.subscriptionID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{subscriptionId}", url.PathEscape(client.subscriptionID))
	req, err := azcore.NewRequest(ctx, http.MethodPut, azcore.JoinPaths(client.con.Endpoint(), urlPath))
	if err != nil {
		return nil, err
	}
	req.Telemetry(telemetryInfo)
	reqQP := req.URL.Query()
	reqQP.Set("api-version", "2021-02-01")
	req.URL.RawQuery = reqQP.Encode()
	req.Header.Set("Accept", "application/json")
	return req, req.MarshalAsJSON(connectionEnvelope)
}

// updateVnetGatewayHandleResponse handles the UpdateVnetGateway response.
func (client *AppServicePlansClient) updateVnetGatewayHandleResponse(resp *azcore.Response) (AppServicePlansUpdateVnetGatewayResponse, error) {
	result := AppServicePlansUpdateVnetGatewayResponse{RawResponse: resp.Response}
	if err := resp.UnmarshalAsJSON(&result.VnetGateway); err != nil {
		return AppServicePlansUpdateVnetGatewayResponse{}, err
	}
	return result, nil
}

// updateVnetGatewayHandleError handles the UpdateVnetGateway error response.
func (client *AppServicePlansClient) updateVnetGatewayHandleError(resp *azcore.Response) error {
	body, err := resp.Payload()
	if err != nil {
		return azcore.NewResponseError(err, resp.Response)
	}
	errType := DefaultErrorResponse{raw: string(body)}
	if err := resp.UnmarshalAsJSON(&errType); err != nil {
		return azcore.NewResponseError(fmt.Errorf("%s\n%s", string(body), err), resp.Response)
	}
	return azcore.NewResponseError(&errType, resp.Response)
}

// UpdateVnetRoute - Description for Create or update a Virtual Network route in an App Service plan.
// If the operation fails it returns the *DefaultErrorResponse error type.
func (client *AppServicePlansClient) UpdateVnetRoute(ctx context.Context, resourceGroupName string, name string, vnetName string, routeName string, route VnetRoute, options *AppServicePlansUpdateVnetRouteOptions) (AppServicePlansUpdateVnetRouteResponse, error) {
	req, err := client.updateVnetRouteCreateRequest(ctx, resourceGroupName, name, vnetName, routeName, route, options)
	if err != nil {
		return AppServicePlansUpdateVnetRouteResponse{}, err
	}
	resp, err := client.con.Pipeline().Do(req)
	if err != nil {
		return AppServicePlansUpdateVnetRouteResponse{}, err
	}
	if !resp.HasStatusCode(http.StatusOK) {
		return AppServicePlansUpdateVnetRouteResponse{}, client.updateVnetRouteHandleError(resp)
	}
	return client.updateVnetRouteHandleResponse(resp)
}

// updateVnetRouteCreateRequest creates the UpdateVnetRoute request.
func (client *AppServicePlansClient) updateVnetRouteCreateRequest(ctx context.Context, resourceGroupName string, name string, vnetName string, routeName string, route VnetRoute, options *AppServicePlansUpdateVnetRouteOptions) (*azcore.Request, error) {
	urlPath := "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/serverfarms/{name}/virtualNetworkConnections/{vnetName}/routes/{routeName}"
	if resourceGroupName == "" {
		return nil, errors.New("parameter resourceGroupName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{resourceGroupName}", url.PathEscape(resourceGroupName))
	if name == "" {
		return nil, errors.New("parameter name cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{name}", url.PathEscape(name))
	if vnetName == "" {
		return nil, errors.New("parameter vnetName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{vnetName}", url.PathEscape(vnetName))
	if routeName == "" {
		return nil, errors.New("parameter routeName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{routeName}", url.PathEscape(routeName))
	if client.subscriptionID == "" {
		return nil, errors.New("parameter client.subscriptionID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{subscriptionId}", url.PathEscape(client.subscriptionID))
	req, err := azcore.NewRequest(ctx, http.MethodPatch, azcore.JoinPaths(client.con.Endpoint(), urlPath))
	if err != nil {
		return nil, err
	}
	req.Telemetry(telemetryInfo)
	reqQP := req.URL.Query()
	reqQP.Set("api-version", "2021-02-01")
	req.URL.RawQuery = reqQP.Encode()
	req.Header.Set("Accept", "application/json")
	return req, req.MarshalAsJSON(route)
}

// updateVnetRouteHandleResponse handles the UpdateVnetRoute response.
func (client *AppServicePlansClient) updateVnetRouteHandleResponse(resp *azcore.Response) (AppServicePlansUpdateVnetRouteResponse, error) {
	result := AppServicePlansUpdateVnetRouteResponse{RawResponse: resp.Response}
	if err := resp.UnmarshalAsJSON(&result.VnetRoute); err != nil {
		return AppServicePlansUpdateVnetRouteResponse{}, err
	}
	return result, nil
}

// updateVnetRouteHandleError handles the UpdateVnetRoute error response.
func (client *AppServicePlansClient) updateVnetRouteHandleError(resp *azcore.Response) error {
	body, err := resp.Payload()
	if err != nil {
		return azcore.NewResponseError(err, resp.Response)
	}
	switch resp.StatusCode {
	case http.StatusBadRequest, http.StatusNotFound:
		if len(body) == 0 {
			return azcore.NewResponseError(errors.New(resp.Status), resp.Response)
		}
		return azcore.NewResponseError(errors.New(string(body)), resp.Response)
	default:
		errType := DefaultErrorResponse{raw: string(body)}
		if err := resp.UnmarshalAsJSON(&errType); err != nil {
			return azcore.NewResponseError(fmt.Errorf("%s\n%s", string(body), err), resp.Response)
		}
		return azcore.NewResponseError(&errType, resp.Response)
	}
}
