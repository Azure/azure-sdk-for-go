// +build go1.13

// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

package armweb

import (
	"context"
	"fmt"
	"github.com/Azure/azure-sdk-for-go/sdk/armcore"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore"
	"net/http"
)

// CertificateRegistrationProviderClient contains the methods for the CertificateRegistrationProvider group.
// Don't use this type directly, use NewCertificateRegistrationProviderClient() instead.
type CertificateRegistrationProviderClient struct {
	con *armcore.Connection
}

// NewCertificateRegistrationProviderClient creates a new instance of CertificateRegistrationProviderClient with the specified values.
func NewCertificateRegistrationProviderClient(con *armcore.Connection) *CertificateRegistrationProviderClient {
	return &CertificateRegistrationProviderClient{con: con}
}

// ListOperations - Description for Implements Csm operations Api to exposes the list of available Csm Apis under the resource provider
// If the operation fails it returns the *DefaultErrorResponse error type.
func (client *CertificateRegistrationProviderClient) ListOperations(options *CertificateRegistrationProviderListOperationsOptions) CertificateRegistrationProviderListOperationsPager {
	return &certificateRegistrationProviderListOperationsPager{
		client: client,
		requester: func(ctx context.Context) (*azcore.Request, error) {
			return client.listOperationsCreateRequest(ctx, options)
		},
		advancer: func(ctx context.Context, resp CertificateRegistrationProviderListOperationsResponse) (*azcore.Request, error) {
			return azcore.NewRequest(ctx, http.MethodGet, *resp.CsmOperationCollection.NextLink)
		},
	}
}

// listOperationsCreateRequest creates the ListOperations request.
func (client *CertificateRegistrationProviderClient) listOperationsCreateRequest(ctx context.Context, options *CertificateRegistrationProviderListOperationsOptions) (*azcore.Request, error) {
	urlPath := "/providers/Microsoft.CertificateRegistration/operations"
	req, err := azcore.NewRequest(ctx, http.MethodGet, azcore.JoinPaths(client.con.Endpoint(), urlPath))
	if err != nil {
		return nil, err
	}
	req.Telemetry(telemetryInfo)
	reqQP := req.URL.Query()
	reqQP.Set("api-version", "2021-02-01")
	req.URL.RawQuery = reqQP.Encode()
	req.Header.Set("Accept", "application/json")
	return req, nil
}

// listOperationsHandleResponse handles the ListOperations response.
func (client *CertificateRegistrationProviderClient) listOperationsHandleResponse(resp *azcore.Response) (CertificateRegistrationProviderListOperationsResponse, error) {
	result := CertificateRegistrationProviderListOperationsResponse{RawResponse: resp.Response}
	if err := resp.UnmarshalAsJSON(&result.CsmOperationCollection); err != nil {
		return CertificateRegistrationProviderListOperationsResponse{}, err
	}
	return result, nil
}

// listOperationsHandleError handles the ListOperations error response.
func (client *CertificateRegistrationProviderClient) listOperationsHandleError(resp *azcore.Response) error {
	body, err := resp.Payload()
	if err != nil {
		return azcore.NewResponseError(err, resp.Response)
	}
	errType := DefaultErrorResponse{raw: string(body)}
	if err := resp.UnmarshalAsJSON(&errType); err != nil {
		return azcore.NewResponseError(fmt.Errorf("%s\n%s", string(body), err), resp.Response)
	}
	return azcore.NewResponseError(&errType, resp.Response)
}
