// +build go1.13

// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

package armweb

import (
	"context"
	"errors"
	"fmt"
	"github.com/Azure/azure-sdk-for-go/sdk/armcore"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore"
	"net/http"
	"net/url"
	"strings"
)

// GlobalClient contains the methods for the Global group.
// Don't use this type directly, use NewGlobalClient() instead.
type GlobalClient struct {
	con            *armcore.Connection
	subscriptionID string
}

// NewGlobalClient creates a new instance of GlobalClient with the specified values.
func NewGlobalClient(con *armcore.Connection, subscriptionID string) *GlobalClient {
	return &GlobalClient{con: con, subscriptionID: subscriptionID}
}

// GetDeletedWebApp - Description for Get deleted app for a subscription.
// If the operation fails it returns the *DefaultErrorResponse error type.
func (client *GlobalClient) GetDeletedWebApp(ctx context.Context, deletedSiteID string, options *GlobalGetDeletedWebAppOptions) (GlobalGetDeletedWebAppResponse, error) {
	req, err := client.getDeletedWebAppCreateRequest(ctx, deletedSiteID, options)
	if err != nil {
		return GlobalGetDeletedWebAppResponse{}, err
	}
	resp, err := client.con.Pipeline().Do(req)
	if err != nil {
		return GlobalGetDeletedWebAppResponse{}, err
	}
	if !resp.HasStatusCode(http.StatusOK) {
		return GlobalGetDeletedWebAppResponse{}, client.getDeletedWebAppHandleError(resp)
	}
	return client.getDeletedWebAppHandleResponse(resp)
}

// getDeletedWebAppCreateRequest creates the GetDeletedWebApp request.
func (client *GlobalClient) getDeletedWebAppCreateRequest(ctx context.Context, deletedSiteID string, options *GlobalGetDeletedWebAppOptions) (*azcore.Request, error) {
	urlPath := "/subscriptions/{subscriptionId}/providers/Microsoft.Web/deletedSites/{deletedSiteId}"
	if deletedSiteID == "" {
		return nil, errors.New("parameter deletedSiteID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{deletedSiteId}", url.PathEscape(deletedSiteID))
	if client.subscriptionID == "" {
		return nil, errors.New("parameter client.subscriptionID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{subscriptionId}", url.PathEscape(client.subscriptionID))
	req, err := azcore.NewRequest(ctx, http.MethodGet, azcore.JoinPaths(client.con.Endpoint(), urlPath))
	if err != nil {
		return nil, err
	}
	req.Telemetry(telemetryInfo)
	reqQP := req.URL.Query()
	reqQP.Set("api-version", "2021-02-01")
	req.URL.RawQuery = reqQP.Encode()
	req.Header.Set("Accept", "application/json")
	return req, nil
}

// getDeletedWebAppHandleResponse handles the GetDeletedWebApp response.
func (client *GlobalClient) getDeletedWebAppHandleResponse(resp *azcore.Response) (GlobalGetDeletedWebAppResponse, error) {
	result := GlobalGetDeletedWebAppResponse{RawResponse: resp.Response}
	if err := resp.UnmarshalAsJSON(&result.DeletedSite); err != nil {
		return GlobalGetDeletedWebAppResponse{}, err
	}
	return result, nil
}

// getDeletedWebAppHandleError handles the GetDeletedWebApp error response.
func (client *GlobalClient) getDeletedWebAppHandleError(resp *azcore.Response) error {
	body, err := resp.Payload()
	if err != nil {
		return azcore.NewResponseError(err, resp.Response)
	}
	errType := DefaultErrorResponse{raw: string(body)}
	if err := resp.UnmarshalAsJSON(&errType); err != nil {
		return azcore.NewResponseError(fmt.Errorf("%s\n%s", string(body), err), resp.Response)
	}
	return azcore.NewResponseError(&errType, resp.Response)
}

// GetDeletedWebAppSnapshots - Description for Get all deleted apps for a subscription.
// If the operation fails it returns the *DefaultErrorResponse error type.
func (client *GlobalClient) GetDeletedWebAppSnapshots(ctx context.Context, deletedSiteID string, options *GlobalGetDeletedWebAppSnapshotsOptions) (GlobalGetDeletedWebAppSnapshotsResponse, error) {
	req, err := client.getDeletedWebAppSnapshotsCreateRequest(ctx, deletedSiteID, options)
	if err != nil {
		return GlobalGetDeletedWebAppSnapshotsResponse{}, err
	}
	resp, err := client.con.Pipeline().Do(req)
	if err != nil {
		return GlobalGetDeletedWebAppSnapshotsResponse{}, err
	}
	if !resp.HasStatusCode(http.StatusOK) {
		return GlobalGetDeletedWebAppSnapshotsResponse{}, client.getDeletedWebAppSnapshotsHandleError(resp)
	}
	return client.getDeletedWebAppSnapshotsHandleResponse(resp)
}

// getDeletedWebAppSnapshotsCreateRequest creates the GetDeletedWebAppSnapshots request.
func (client *GlobalClient) getDeletedWebAppSnapshotsCreateRequest(ctx context.Context, deletedSiteID string, options *GlobalGetDeletedWebAppSnapshotsOptions) (*azcore.Request, error) {
	urlPath := "/subscriptions/{subscriptionId}/providers/Microsoft.Web/deletedSites/{deletedSiteId}/snapshots"
	if deletedSiteID == "" {
		return nil, errors.New("parameter deletedSiteID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{deletedSiteId}", url.PathEscape(deletedSiteID))
	if client.subscriptionID == "" {
		return nil, errors.New("parameter client.subscriptionID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{subscriptionId}", url.PathEscape(client.subscriptionID))
	req, err := azcore.NewRequest(ctx, http.MethodGet, azcore.JoinPaths(client.con.Endpoint(), urlPath))
	if err != nil {
		return nil, err
	}
	req.Telemetry(telemetryInfo)
	reqQP := req.URL.Query()
	reqQP.Set("api-version", "2021-02-01")
	req.URL.RawQuery = reqQP.Encode()
	req.Header.Set("Accept", "application/json")
	return req, nil
}

// getDeletedWebAppSnapshotsHandleResponse handles the GetDeletedWebAppSnapshots response.
func (client *GlobalClient) getDeletedWebAppSnapshotsHandleResponse(resp *azcore.Response) (GlobalGetDeletedWebAppSnapshotsResponse, error) {
	result := GlobalGetDeletedWebAppSnapshotsResponse{RawResponse: resp.Response}
	if err := resp.UnmarshalAsJSON(&result.SnapshotArray); err != nil {
		return GlobalGetDeletedWebAppSnapshotsResponse{}, err
	}
	return result, nil
}

// getDeletedWebAppSnapshotsHandleError handles the GetDeletedWebAppSnapshots error response.
func (client *GlobalClient) getDeletedWebAppSnapshotsHandleError(resp *azcore.Response) error {
	body, err := resp.Payload()
	if err != nil {
		return azcore.NewResponseError(err, resp.Response)
	}
	errType := DefaultErrorResponse{raw: string(body)}
	if err := resp.UnmarshalAsJSON(&errType); err != nil {
		return azcore.NewResponseError(fmt.Errorf("%s\n%s", string(body), err), resp.Response)
	}
	return azcore.NewResponseError(&errType, resp.Response)
}

// GetSubscriptionOperationWithAsyncResponse - Description for Gets an operation in a subscription and given region
// If the operation fails it returns the *DefaultErrorResponse error type.
func (client *GlobalClient) GetSubscriptionOperationWithAsyncResponse(ctx context.Context, location string, operationID string, options *GlobalGetSubscriptionOperationWithAsyncResponseOptions) (GlobalGetSubscriptionOperationWithAsyncResponseResponse, error) {
	req, err := client.getSubscriptionOperationWithAsyncResponseCreateRequest(ctx, location, operationID, options)
	if err != nil {
		return GlobalGetSubscriptionOperationWithAsyncResponseResponse{}, err
	}
	resp, err := client.con.Pipeline().Do(req)
	if err != nil {
		return GlobalGetSubscriptionOperationWithAsyncResponseResponse{}, err
	}
	if !resp.HasStatusCode(http.StatusNoContent) {
		return GlobalGetSubscriptionOperationWithAsyncResponseResponse{}, client.getSubscriptionOperationWithAsyncResponseHandleError(resp)
	}
	return GlobalGetSubscriptionOperationWithAsyncResponseResponse{RawResponse: resp.Response}, nil
}

// getSubscriptionOperationWithAsyncResponseCreateRequest creates the GetSubscriptionOperationWithAsyncResponse request.
func (client *GlobalClient) getSubscriptionOperationWithAsyncResponseCreateRequest(ctx context.Context, location string, operationID string, options *GlobalGetSubscriptionOperationWithAsyncResponseOptions) (*azcore.Request, error) {
	urlPath := "/subscriptions/{subscriptionId}/providers/Microsoft.Web/locations/{location}/operations/{operationId}"
	if location == "" {
		return nil, errors.New("parameter location cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{location}", url.PathEscape(location))
	if operationID == "" {
		return nil, errors.New("parameter operationID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{operationId}", url.PathEscape(operationID))
	if client.subscriptionID == "" {
		return nil, errors.New("parameter client.subscriptionID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{subscriptionId}", url.PathEscape(client.subscriptionID))
	req, err := azcore.NewRequest(ctx, http.MethodGet, azcore.JoinPaths(client.con.Endpoint(), urlPath))
	if err != nil {
		return nil, err
	}
	req.Telemetry(telemetryInfo)
	reqQP := req.URL.Query()
	reqQP.Set("api-version", "2021-02-01")
	req.URL.RawQuery = reqQP.Encode()
	req.Header.Set("Accept", "application/json")
	return req, nil
}

// getSubscriptionOperationWithAsyncResponseHandleError handles the GetSubscriptionOperationWithAsyncResponse error response.
func (client *GlobalClient) getSubscriptionOperationWithAsyncResponseHandleError(resp *azcore.Response) error {
	body, err := resp.Payload()
	if err != nil {
		return azcore.NewResponseError(err, resp.Response)
	}
	errType := DefaultErrorResponse{raw: string(body)}
	if err := resp.UnmarshalAsJSON(&errType); err != nil {
		return azcore.NewResponseError(fmt.Errorf("%s\n%s", string(body), err), resp.Response)
	}
	return azcore.NewResponseError(&errType, resp.Response)
}
