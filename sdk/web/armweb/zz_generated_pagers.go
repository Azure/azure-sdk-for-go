// +build go1.13

// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

package armweb

import (
	"context"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore"
	"net/http"
	"reflect"
)

type AppServiceCertificateOrdersListByResourceGroupPager interface {
	azcore.Pager
	// PageResponse returns the current AppServiceCertificateOrdersListByResourceGroupResponse.
	PageResponse() AppServiceCertificateOrdersListByResourceGroupResponse
}

type appServiceCertificateOrdersListByResourceGroupPager struct {
	client    *AppServiceCertificateOrdersClient
	current   AppServiceCertificateOrdersListByResourceGroupResponse
	err       error
	requester func(context.Context) (*azcore.Request, error)
	advancer  func(context.Context, AppServiceCertificateOrdersListByResourceGroupResponse) (*azcore.Request, error)
}

func (p *appServiceCertificateOrdersListByResourceGroupPager) Err() error {
	return p.err
}

func (p *appServiceCertificateOrdersListByResourceGroupPager) NextPage(ctx context.Context) bool {
	var req *azcore.Request
	var err error
	if !reflect.ValueOf(p.current).IsZero() {
		if p.current.AppServiceCertificateOrderCollection.NextLink == nil || len(*p.current.AppServiceCertificateOrderCollection.NextLink) == 0 {
			return false
		}
		req, err = p.advancer(ctx, p.current)
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		p.err = err
		return false
	}
	resp, err := p.client.con.Pipeline().Do(req)
	if err != nil {
		p.err = err
		return false
	}
	if !resp.HasStatusCode(http.StatusOK) {
		p.err = p.client.listByResourceGroupHandleError(resp)
		return false
	}
	result, err := p.client.listByResourceGroupHandleResponse(resp)
	if err != nil {
		p.err = err
		return false
	}
	p.current = result
	return true
}

func (p *appServiceCertificateOrdersListByResourceGroupPager) PageResponse() AppServiceCertificateOrdersListByResourceGroupResponse {
	return p.current
}

type AppServiceCertificateOrdersListCertificatesPager interface {
	azcore.Pager
	// PageResponse returns the current AppServiceCertificateOrdersListCertificatesResponse.
	PageResponse() AppServiceCertificateOrdersListCertificatesResponse
}

type appServiceCertificateOrdersListCertificatesPager struct {
	client    *AppServiceCertificateOrdersClient
	current   AppServiceCertificateOrdersListCertificatesResponse
	err       error
	requester func(context.Context) (*azcore.Request, error)
	advancer  func(context.Context, AppServiceCertificateOrdersListCertificatesResponse) (*azcore.Request, error)
}

func (p *appServiceCertificateOrdersListCertificatesPager) Err() error {
	return p.err
}

func (p *appServiceCertificateOrdersListCertificatesPager) NextPage(ctx context.Context) bool {
	var req *azcore.Request
	var err error
	if !reflect.ValueOf(p.current).IsZero() {
		if p.current.AppServiceCertificateCollection.NextLink == nil || len(*p.current.AppServiceCertificateCollection.NextLink) == 0 {
			return false
		}
		req, err = p.advancer(ctx, p.current)
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		p.err = err
		return false
	}
	resp, err := p.client.con.Pipeline().Do(req)
	if err != nil {
		p.err = err
		return false
	}
	if !resp.HasStatusCode(http.StatusOK) {
		p.err = p.client.listCertificatesHandleError(resp)
		return false
	}
	result, err := p.client.listCertificatesHandleResponse(resp)
	if err != nil {
		p.err = err
		return false
	}
	p.current = result
	return true
}

func (p *appServiceCertificateOrdersListCertificatesPager) PageResponse() AppServiceCertificateOrdersListCertificatesResponse {
	return p.current
}

type AppServiceCertificateOrdersListPager interface {
	azcore.Pager
	// PageResponse returns the current AppServiceCertificateOrdersListResponse.
	PageResponse() AppServiceCertificateOrdersListResponse
}

type appServiceCertificateOrdersListPager struct {
	client    *AppServiceCertificateOrdersClient
	current   AppServiceCertificateOrdersListResponse
	err       error
	requester func(context.Context) (*azcore.Request, error)
	advancer  func(context.Context, AppServiceCertificateOrdersListResponse) (*azcore.Request, error)
}

func (p *appServiceCertificateOrdersListPager) Err() error {
	return p.err
}

func (p *appServiceCertificateOrdersListPager) NextPage(ctx context.Context) bool {
	var req *azcore.Request
	var err error
	if !reflect.ValueOf(p.current).IsZero() {
		if p.current.AppServiceCertificateOrderCollection.NextLink == nil || len(*p.current.AppServiceCertificateOrderCollection.NextLink) == 0 {
			return false
		}
		req, err = p.advancer(ctx, p.current)
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		p.err = err
		return false
	}
	resp, err := p.client.con.Pipeline().Do(req)
	if err != nil {
		p.err = err
		return false
	}
	if !resp.HasStatusCode(http.StatusOK) {
		p.err = p.client.listHandleError(resp)
		return false
	}
	result, err := p.client.listHandleResponse(resp)
	if err != nil {
		p.err = err
		return false
	}
	p.current = result
	return true
}

func (p *appServiceCertificateOrdersListPager) PageResponse() AppServiceCertificateOrdersListResponse {
	return p.current
}

type AppServiceEnvironmentsChangeVnetPager interface {
	azcore.Pager
	// PageResponse returns the current AppServiceEnvironmentsChangeVnetResponse.
	PageResponse() AppServiceEnvironmentsChangeVnetResponse
}

type appServiceEnvironmentsChangeVnetPager struct {
	client  *AppServiceEnvironmentsClient
	current AppServiceEnvironmentsChangeVnetResponse
	err     error
	second  bool
}

func (p *appServiceEnvironmentsChangeVnetPager) Err() error {
	return p.err
}

func (p *appServiceEnvironmentsChangeVnetPager) NextPage(ctx context.Context) bool {
	if !p.second {
		p.second = true
		return true
	} else if !reflect.ValueOf(p.current).IsZero() {
		if p.current.WebAppCollection.NextLink == nil || len(*p.current.WebAppCollection.NextLink) == 0 {
			return false
		}
	}
	req, err := azcore.NewRequest(ctx, http.MethodGet, *p.current.WebAppCollection.NextLink)
	if err != nil {
		p.err = err
		return false
	}
	resp, err := p.client.con.Pipeline().Do(req)
	if err != nil {
		p.err = err
		return false
	}
	if !resp.HasStatusCode(http.StatusOK, http.StatusCreated, http.StatusAccepted) {
		p.err = p.client.changeVnetHandleError(resp)
		return false
	}
	result, err := p.client.changeVnetHandleResponse(resp)
	if err != nil {
		p.err = err
		return false
	}
	p.current = result
	return true
}

func (p *appServiceEnvironmentsChangeVnetPager) PageResponse() AppServiceEnvironmentsChangeVnetResponse {
	return p.current
}

type AppServiceEnvironmentsGetInboundNetworkDependenciesEndpointsPager interface {
	azcore.Pager
	// PageResponse returns the current AppServiceEnvironmentsGetInboundNetworkDependenciesEndpointsResponse.
	PageResponse() AppServiceEnvironmentsGetInboundNetworkDependenciesEndpointsResponse
}

type appServiceEnvironmentsGetInboundNetworkDependenciesEndpointsPager struct {
	client    *AppServiceEnvironmentsClient
	current   AppServiceEnvironmentsGetInboundNetworkDependenciesEndpointsResponse
	err       error
	requester func(context.Context) (*azcore.Request, error)
	advancer  func(context.Context, AppServiceEnvironmentsGetInboundNetworkDependenciesEndpointsResponse) (*azcore.Request, error)
}

func (p *appServiceEnvironmentsGetInboundNetworkDependenciesEndpointsPager) Err() error {
	return p.err
}

func (p *appServiceEnvironmentsGetInboundNetworkDependenciesEndpointsPager) NextPage(ctx context.Context) bool {
	var req *azcore.Request
	var err error
	if !reflect.ValueOf(p.current).IsZero() {
		if p.current.InboundEnvironmentEndpointCollection.NextLink == nil || len(*p.current.InboundEnvironmentEndpointCollection.NextLink) == 0 {
			return false
		}
		req, err = p.advancer(ctx, p.current)
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		p.err = err
		return false
	}
	resp, err := p.client.con.Pipeline().Do(req)
	if err != nil {
		p.err = err
		return false
	}
	if !resp.HasStatusCode(http.StatusOK) {
		p.err = p.client.getInboundNetworkDependenciesEndpointsHandleError(resp)
		return false
	}
	result, err := p.client.getInboundNetworkDependenciesEndpointsHandleResponse(resp)
	if err != nil {
		p.err = err
		return false
	}
	p.current = result
	return true
}

func (p *appServiceEnvironmentsGetInboundNetworkDependenciesEndpointsPager) PageResponse() AppServiceEnvironmentsGetInboundNetworkDependenciesEndpointsResponse {
	return p.current
}

type AppServiceEnvironmentsGetOutboundNetworkDependenciesEndpointsPager interface {
	azcore.Pager
	// PageResponse returns the current AppServiceEnvironmentsGetOutboundNetworkDependenciesEndpointsResponse.
	PageResponse() AppServiceEnvironmentsGetOutboundNetworkDependenciesEndpointsResponse
}

type appServiceEnvironmentsGetOutboundNetworkDependenciesEndpointsPager struct {
	client    *AppServiceEnvironmentsClient
	current   AppServiceEnvironmentsGetOutboundNetworkDependenciesEndpointsResponse
	err       error
	requester func(context.Context) (*azcore.Request, error)
	advancer  func(context.Context, AppServiceEnvironmentsGetOutboundNetworkDependenciesEndpointsResponse) (*azcore.Request, error)
}

func (p *appServiceEnvironmentsGetOutboundNetworkDependenciesEndpointsPager) Err() error {
	return p.err
}

func (p *appServiceEnvironmentsGetOutboundNetworkDependenciesEndpointsPager) NextPage(ctx context.Context) bool {
	var req *azcore.Request
	var err error
	if !reflect.ValueOf(p.current).IsZero() {
		if p.current.OutboundEnvironmentEndpointCollection.NextLink == nil || len(*p.current.OutboundEnvironmentEndpointCollection.NextLink) == 0 {
			return false
		}
		req, err = p.advancer(ctx, p.current)
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		p.err = err
		return false
	}
	resp, err := p.client.con.Pipeline().Do(req)
	if err != nil {
		p.err = err
		return false
	}
	if !resp.HasStatusCode(http.StatusOK) {
		p.err = p.client.getOutboundNetworkDependenciesEndpointsHandleError(resp)
		return false
	}
	result, err := p.client.getOutboundNetworkDependenciesEndpointsHandleResponse(resp)
	if err != nil {
		p.err = err
		return false
	}
	p.current = result
	return true
}

func (p *appServiceEnvironmentsGetOutboundNetworkDependenciesEndpointsPager) PageResponse() AppServiceEnvironmentsGetOutboundNetworkDependenciesEndpointsResponse {
	return p.current
}

type AppServiceEnvironmentsGetPrivateEndpointConnectionListPager interface {
	azcore.Pager
	// PageResponse returns the current AppServiceEnvironmentsGetPrivateEndpointConnectionListResponse.
	PageResponse() AppServiceEnvironmentsGetPrivateEndpointConnectionListResponse
}

type appServiceEnvironmentsGetPrivateEndpointConnectionListPager struct {
	client    *AppServiceEnvironmentsClient
	current   AppServiceEnvironmentsGetPrivateEndpointConnectionListResponse
	err       error
	requester func(context.Context) (*azcore.Request, error)
	advancer  func(context.Context, AppServiceEnvironmentsGetPrivateEndpointConnectionListResponse) (*azcore.Request, error)
}

func (p *appServiceEnvironmentsGetPrivateEndpointConnectionListPager) Err() error {
	return p.err
}

func (p *appServiceEnvironmentsGetPrivateEndpointConnectionListPager) NextPage(ctx context.Context) bool {
	var req *azcore.Request
	var err error
	if !reflect.ValueOf(p.current).IsZero() {
		if p.current.PrivateEndpointConnectionCollection.NextLink == nil || len(*p.current.PrivateEndpointConnectionCollection.NextLink) == 0 {
			return false
		}
		req, err = p.advancer(ctx, p.current)
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		p.err = err
		return false
	}
	resp, err := p.client.con.Pipeline().Do(req)
	if err != nil {
		p.err = err
		return false
	}
	if !resp.HasStatusCode(http.StatusOK) {
		p.err = p.client.getPrivateEndpointConnectionListHandleError(resp)
		return false
	}
	result, err := p.client.getPrivateEndpointConnectionListHandleResponse(resp)
	if err != nil {
		p.err = err
		return false
	}
	p.current = result
	return true
}

func (p *appServiceEnvironmentsGetPrivateEndpointConnectionListPager) PageResponse() AppServiceEnvironmentsGetPrivateEndpointConnectionListResponse {
	return p.current
}

type AppServiceEnvironmentsListAppServicePlansPager interface {
	azcore.Pager
	// PageResponse returns the current AppServiceEnvironmentsListAppServicePlansResponse.
	PageResponse() AppServiceEnvironmentsListAppServicePlansResponse
}

type appServiceEnvironmentsListAppServicePlansPager struct {
	client    *AppServiceEnvironmentsClient
	current   AppServiceEnvironmentsListAppServicePlansResponse
	err       error
	requester func(context.Context) (*azcore.Request, error)
	advancer  func(context.Context, AppServiceEnvironmentsListAppServicePlansResponse) (*azcore.Request, error)
}

func (p *appServiceEnvironmentsListAppServicePlansPager) Err() error {
	return p.err
}

func (p *appServiceEnvironmentsListAppServicePlansPager) NextPage(ctx context.Context) bool {
	var req *azcore.Request
	var err error
	if !reflect.ValueOf(p.current).IsZero() {
		if p.current.AppServicePlanCollection.NextLink == nil || len(*p.current.AppServicePlanCollection.NextLink) == 0 {
			return false
		}
		req, err = p.advancer(ctx, p.current)
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		p.err = err
		return false
	}
	resp, err := p.client.con.Pipeline().Do(req)
	if err != nil {
		p.err = err
		return false
	}
	if !resp.HasStatusCode(http.StatusOK) {
		p.err = p.client.listAppServicePlansHandleError(resp)
		return false
	}
	result, err := p.client.listAppServicePlansHandleResponse(resp)
	if err != nil {
		p.err = err
		return false
	}
	p.current = result
	return true
}

func (p *appServiceEnvironmentsListAppServicePlansPager) PageResponse() AppServiceEnvironmentsListAppServicePlansResponse {
	return p.current
}

type AppServiceEnvironmentsListByResourceGroupPager interface {
	azcore.Pager
	// PageResponse returns the current AppServiceEnvironmentsListByResourceGroupResponse.
	PageResponse() AppServiceEnvironmentsListByResourceGroupResponse
}

type appServiceEnvironmentsListByResourceGroupPager struct {
	client    *AppServiceEnvironmentsClient
	current   AppServiceEnvironmentsListByResourceGroupResponse
	err       error
	requester func(context.Context) (*azcore.Request, error)
	advancer  func(context.Context, AppServiceEnvironmentsListByResourceGroupResponse) (*azcore.Request, error)
}

func (p *appServiceEnvironmentsListByResourceGroupPager) Err() error {
	return p.err
}

func (p *appServiceEnvironmentsListByResourceGroupPager) NextPage(ctx context.Context) bool {
	var req *azcore.Request
	var err error
	if !reflect.ValueOf(p.current).IsZero() {
		if p.current.AppServiceEnvironmentCollection.NextLink == nil || len(*p.current.AppServiceEnvironmentCollection.NextLink) == 0 {
			return false
		}
		req, err = p.advancer(ctx, p.current)
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		p.err = err
		return false
	}
	resp, err := p.client.con.Pipeline().Do(req)
	if err != nil {
		p.err = err
		return false
	}
	if !resp.HasStatusCode(http.StatusOK) {
		p.err = p.client.listByResourceGroupHandleError(resp)
		return false
	}
	result, err := p.client.listByResourceGroupHandleResponse(resp)
	if err != nil {
		p.err = err
		return false
	}
	p.current = result
	return true
}

func (p *appServiceEnvironmentsListByResourceGroupPager) PageResponse() AppServiceEnvironmentsListByResourceGroupResponse {
	return p.current
}

type AppServiceEnvironmentsListCapacitiesPager interface {
	azcore.Pager
	// PageResponse returns the current AppServiceEnvironmentsListCapacitiesResponse.
	PageResponse() AppServiceEnvironmentsListCapacitiesResponse
}

type appServiceEnvironmentsListCapacitiesPager struct {
	client    *AppServiceEnvironmentsClient
	current   AppServiceEnvironmentsListCapacitiesResponse
	err       error
	requester func(context.Context) (*azcore.Request, error)
	advancer  func(context.Context, AppServiceEnvironmentsListCapacitiesResponse) (*azcore.Request, error)
}

func (p *appServiceEnvironmentsListCapacitiesPager) Err() error {
	return p.err
}

func (p *appServiceEnvironmentsListCapacitiesPager) NextPage(ctx context.Context) bool {
	var req *azcore.Request
	var err error
	if !reflect.ValueOf(p.current).IsZero() {
		if p.current.StampCapacityCollection.NextLink == nil || len(*p.current.StampCapacityCollection.NextLink) == 0 {
			return false
		}
		req, err = p.advancer(ctx, p.current)
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		p.err = err
		return false
	}
	resp, err := p.client.con.Pipeline().Do(req)
	if err != nil {
		p.err = err
		return false
	}
	if !resp.HasStatusCode(http.StatusOK) {
		p.err = p.client.listCapacitiesHandleError(resp)
		return false
	}
	result, err := p.client.listCapacitiesHandleResponse(resp)
	if err != nil {
		p.err = err
		return false
	}
	p.current = result
	return true
}

func (p *appServiceEnvironmentsListCapacitiesPager) PageResponse() AppServiceEnvironmentsListCapacitiesResponse {
	return p.current
}

type AppServiceEnvironmentsListMultiRoleMetricDefinitionsPager interface {
	azcore.Pager
	// PageResponse returns the current AppServiceEnvironmentsListMultiRoleMetricDefinitionsResponse.
	PageResponse() AppServiceEnvironmentsListMultiRoleMetricDefinitionsResponse
}

type appServiceEnvironmentsListMultiRoleMetricDefinitionsPager struct {
	client    *AppServiceEnvironmentsClient
	current   AppServiceEnvironmentsListMultiRoleMetricDefinitionsResponse
	err       error
	requester func(context.Context) (*azcore.Request, error)
	advancer  func(context.Context, AppServiceEnvironmentsListMultiRoleMetricDefinitionsResponse) (*azcore.Request, error)
}

func (p *appServiceEnvironmentsListMultiRoleMetricDefinitionsPager) Err() error {
	return p.err
}

func (p *appServiceEnvironmentsListMultiRoleMetricDefinitionsPager) NextPage(ctx context.Context) bool {
	var req *azcore.Request
	var err error
	if !reflect.ValueOf(p.current).IsZero() {
		if p.current.ResourceMetricDefinitionCollection.NextLink == nil || len(*p.current.ResourceMetricDefinitionCollection.NextLink) == 0 {
			return false
		}
		req, err = p.advancer(ctx, p.current)
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		p.err = err
		return false
	}
	resp, err := p.client.con.Pipeline().Do(req)
	if err != nil {
		p.err = err
		return false
	}
	if !resp.HasStatusCode(http.StatusOK) {
		p.err = p.client.listMultiRoleMetricDefinitionsHandleError(resp)
		return false
	}
	result, err := p.client.listMultiRoleMetricDefinitionsHandleResponse(resp)
	if err != nil {
		p.err = err
		return false
	}
	p.current = result
	return true
}

func (p *appServiceEnvironmentsListMultiRoleMetricDefinitionsPager) PageResponse() AppServiceEnvironmentsListMultiRoleMetricDefinitionsResponse {
	return p.current
}

type AppServiceEnvironmentsListMultiRolePoolInstanceMetricDefinitionsPager interface {
	azcore.Pager
	// PageResponse returns the current AppServiceEnvironmentsListMultiRolePoolInstanceMetricDefinitionsResponse.
	PageResponse() AppServiceEnvironmentsListMultiRolePoolInstanceMetricDefinitionsResponse
}

type appServiceEnvironmentsListMultiRolePoolInstanceMetricDefinitionsPager struct {
	client    *AppServiceEnvironmentsClient
	current   AppServiceEnvironmentsListMultiRolePoolInstanceMetricDefinitionsResponse
	err       error
	requester func(context.Context) (*azcore.Request, error)
	advancer  func(context.Context, AppServiceEnvironmentsListMultiRolePoolInstanceMetricDefinitionsResponse) (*azcore.Request, error)
}

func (p *appServiceEnvironmentsListMultiRolePoolInstanceMetricDefinitionsPager) Err() error {
	return p.err
}

func (p *appServiceEnvironmentsListMultiRolePoolInstanceMetricDefinitionsPager) NextPage(ctx context.Context) bool {
	var req *azcore.Request
	var err error
	if !reflect.ValueOf(p.current).IsZero() {
		if p.current.ResourceMetricDefinitionCollection.NextLink == nil || len(*p.current.ResourceMetricDefinitionCollection.NextLink) == 0 {
			return false
		}
		req, err = p.advancer(ctx, p.current)
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		p.err = err
		return false
	}
	resp, err := p.client.con.Pipeline().Do(req)
	if err != nil {
		p.err = err
		return false
	}
	if !resp.HasStatusCode(http.StatusOK) {
		p.err = p.client.listMultiRolePoolInstanceMetricDefinitionsHandleError(resp)
		return false
	}
	result, err := p.client.listMultiRolePoolInstanceMetricDefinitionsHandleResponse(resp)
	if err != nil {
		p.err = err
		return false
	}
	p.current = result
	return true
}

func (p *appServiceEnvironmentsListMultiRolePoolInstanceMetricDefinitionsPager) PageResponse() AppServiceEnvironmentsListMultiRolePoolInstanceMetricDefinitionsResponse {
	return p.current
}

type AppServiceEnvironmentsListMultiRolePoolSKUsPager interface {
	azcore.Pager
	// PageResponse returns the current AppServiceEnvironmentsListMultiRolePoolSKUsResponse.
	PageResponse() AppServiceEnvironmentsListMultiRolePoolSKUsResponse
}

type appServiceEnvironmentsListMultiRolePoolSKUsPager struct {
	client    *AppServiceEnvironmentsClient
	current   AppServiceEnvironmentsListMultiRolePoolSKUsResponse
	err       error
	requester func(context.Context) (*azcore.Request, error)
	advancer  func(context.Context, AppServiceEnvironmentsListMultiRolePoolSKUsResponse) (*azcore.Request, error)
}

func (p *appServiceEnvironmentsListMultiRolePoolSKUsPager) Err() error {
	return p.err
}

func (p *appServiceEnvironmentsListMultiRolePoolSKUsPager) NextPage(ctx context.Context) bool {
	var req *azcore.Request
	var err error
	if !reflect.ValueOf(p.current).IsZero() {
		if p.current.SKUInfoCollection.NextLink == nil || len(*p.current.SKUInfoCollection.NextLink) == 0 {
			return false
		}
		req, err = p.advancer(ctx, p.current)
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		p.err = err
		return false
	}
	resp, err := p.client.con.Pipeline().Do(req)
	if err != nil {
		p.err = err
		return false
	}
	if !resp.HasStatusCode(http.StatusOK) {
		p.err = p.client.listMultiRolePoolSKUsHandleError(resp)
		return false
	}
	result, err := p.client.listMultiRolePoolSKUsHandleResponse(resp)
	if err != nil {
		p.err = err
		return false
	}
	p.current = result
	return true
}

func (p *appServiceEnvironmentsListMultiRolePoolSKUsPager) PageResponse() AppServiceEnvironmentsListMultiRolePoolSKUsResponse {
	return p.current
}

type AppServiceEnvironmentsListMultiRolePoolsPager interface {
	azcore.Pager
	// PageResponse returns the current AppServiceEnvironmentsListMultiRolePoolsResponse.
	PageResponse() AppServiceEnvironmentsListMultiRolePoolsResponse
}

type appServiceEnvironmentsListMultiRolePoolsPager struct {
	client    *AppServiceEnvironmentsClient
	current   AppServiceEnvironmentsListMultiRolePoolsResponse
	err       error
	requester func(context.Context) (*azcore.Request, error)
	advancer  func(context.Context, AppServiceEnvironmentsListMultiRolePoolsResponse) (*azcore.Request, error)
}

func (p *appServiceEnvironmentsListMultiRolePoolsPager) Err() error {
	return p.err
}

func (p *appServiceEnvironmentsListMultiRolePoolsPager) NextPage(ctx context.Context) bool {
	var req *azcore.Request
	var err error
	if !reflect.ValueOf(p.current).IsZero() {
		if p.current.WorkerPoolCollection.NextLink == nil || len(*p.current.WorkerPoolCollection.NextLink) == 0 {
			return false
		}
		req, err = p.advancer(ctx, p.current)
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		p.err = err
		return false
	}
	resp, err := p.client.con.Pipeline().Do(req)
	if err != nil {
		p.err = err
		return false
	}
	if !resp.HasStatusCode(http.StatusOK) {
		p.err = p.client.listMultiRolePoolsHandleError(resp)
		return false
	}
	result, err := p.client.listMultiRolePoolsHandleResponse(resp)
	if err != nil {
		p.err = err
		return false
	}
	p.current = result
	return true
}

func (p *appServiceEnvironmentsListMultiRolePoolsPager) PageResponse() AppServiceEnvironmentsListMultiRolePoolsResponse {
	return p.current
}

type AppServiceEnvironmentsListMultiRoleUsagesPager interface {
	azcore.Pager
	// PageResponse returns the current AppServiceEnvironmentsListMultiRoleUsagesResponse.
	PageResponse() AppServiceEnvironmentsListMultiRoleUsagesResponse
}

type appServiceEnvironmentsListMultiRoleUsagesPager struct {
	client    *AppServiceEnvironmentsClient
	current   AppServiceEnvironmentsListMultiRoleUsagesResponse
	err       error
	requester func(context.Context) (*azcore.Request, error)
	advancer  func(context.Context, AppServiceEnvironmentsListMultiRoleUsagesResponse) (*azcore.Request, error)
}

func (p *appServiceEnvironmentsListMultiRoleUsagesPager) Err() error {
	return p.err
}

func (p *appServiceEnvironmentsListMultiRoleUsagesPager) NextPage(ctx context.Context) bool {
	var req *azcore.Request
	var err error
	if !reflect.ValueOf(p.current).IsZero() {
		if p.current.UsageCollection.NextLink == nil || len(*p.current.UsageCollection.NextLink) == 0 {
			return false
		}
		req, err = p.advancer(ctx, p.current)
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		p.err = err
		return false
	}
	resp, err := p.client.con.Pipeline().Do(req)
	if err != nil {
		p.err = err
		return false
	}
	if !resp.HasStatusCode(http.StatusOK) {
		p.err = p.client.listMultiRoleUsagesHandleError(resp)
		return false
	}
	result, err := p.client.listMultiRoleUsagesHandleResponse(resp)
	if err != nil {
		p.err = err
		return false
	}
	p.current = result
	return true
}

func (p *appServiceEnvironmentsListMultiRoleUsagesPager) PageResponse() AppServiceEnvironmentsListMultiRoleUsagesResponse {
	return p.current
}

type AppServiceEnvironmentsListPager interface {
	azcore.Pager
	// PageResponse returns the current AppServiceEnvironmentsListResponse.
	PageResponse() AppServiceEnvironmentsListResponse
}

type appServiceEnvironmentsListPager struct {
	client    *AppServiceEnvironmentsClient
	current   AppServiceEnvironmentsListResponse
	err       error
	requester func(context.Context) (*azcore.Request, error)
	advancer  func(context.Context, AppServiceEnvironmentsListResponse) (*azcore.Request, error)
}

func (p *appServiceEnvironmentsListPager) Err() error {
	return p.err
}

func (p *appServiceEnvironmentsListPager) NextPage(ctx context.Context) bool {
	var req *azcore.Request
	var err error
	if !reflect.ValueOf(p.current).IsZero() {
		if p.current.AppServiceEnvironmentCollection.NextLink == nil || len(*p.current.AppServiceEnvironmentCollection.NextLink) == 0 {
			return false
		}
		req, err = p.advancer(ctx, p.current)
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		p.err = err
		return false
	}
	resp, err := p.client.con.Pipeline().Do(req)
	if err != nil {
		p.err = err
		return false
	}
	if !resp.HasStatusCode(http.StatusOK) {
		p.err = p.client.listHandleError(resp)
		return false
	}
	result, err := p.client.listHandleResponse(resp)
	if err != nil {
		p.err = err
		return false
	}
	p.current = result
	return true
}

func (p *appServiceEnvironmentsListPager) PageResponse() AppServiceEnvironmentsListResponse {
	return p.current
}

type AppServiceEnvironmentsListUsagesPager interface {
	azcore.Pager
	// PageResponse returns the current AppServiceEnvironmentsListUsagesResponse.
	PageResponse() AppServiceEnvironmentsListUsagesResponse
}

type appServiceEnvironmentsListUsagesPager struct {
	client    *AppServiceEnvironmentsClient
	current   AppServiceEnvironmentsListUsagesResponse
	err       error
	requester func(context.Context) (*azcore.Request, error)
	advancer  func(context.Context, AppServiceEnvironmentsListUsagesResponse) (*azcore.Request, error)
}

func (p *appServiceEnvironmentsListUsagesPager) Err() error {
	return p.err
}

func (p *appServiceEnvironmentsListUsagesPager) NextPage(ctx context.Context) bool {
	var req *azcore.Request
	var err error
	if !reflect.ValueOf(p.current).IsZero() {
		if p.current.CsmUsageQuotaCollection.NextLink == nil || len(*p.current.CsmUsageQuotaCollection.NextLink) == 0 {
			return false
		}
		req, err = p.advancer(ctx, p.current)
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		p.err = err
		return false
	}
	resp, err := p.client.con.Pipeline().Do(req)
	if err != nil {
		p.err = err
		return false
	}
	if !resp.HasStatusCode(http.StatusOK) {
		p.err = p.client.listUsagesHandleError(resp)
		return false
	}
	result, err := p.client.listUsagesHandleResponse(resp)
	if err != nil {
		p.err = err
		return false
	}
	p.current = result
	return true
}

func (p *appServiceEnvironmentsListUsagesPager) PageResponse() AppServiceEnvironmentsListUsagesResponse {
	return p.current
}

type AppServiceEnvironmentsListWebAppsPager interface {
	azcore.Pager
	// PageResponse returns the current AppServiceEnvironmentsListWebAppsResponse.
	PageResponse() AppServiceEnvironmentsListWebAppsResponse
}

type appServiceEnvironmentsListWebAppsPager struct {
	client    *AppServiceEnvironmentsClient
	current   AppServiceEnvironmentsListWebAppsResponse
	err       error
	requester func(context.Context) (*azcore.Request, error)
	advancer  func(context.Context, AppServiceEnvironmentsListWebAppsResponse) (*azcore.Request, error)
}

func (p *appServiceEnvironmentsListWebAppsPager) Err() error {
	return p.err
}

func (p *appServiceEnvironmentsListWebAppsPager) NextPage(ctx context.Context) bool {
	var req *azcore.Request
	var err error
	if !reflect.ValueOf(p.current).IsZero() {
		if p.current.WebAppCollection.NextLink == nil || len(*p.current.WebAppCollection.NextLink) == 0 {
			return false
		}
		req, err = p.advancer(ctx, p.current)
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		p.err = err
		return false
	}
	resp, err := p.client.con.Pipeline().Do(req)
	if err != nil {
		p.err = err
		return false
	}
	if !resp.HasStatusCode(http.StatusOK) {
		p.err = p.client.listWebAppsHandleError(resp)
		return false
	}
	result, err := p.client.listWebAppsHandleResponse(resp)
	if err != nil {
		p.err = err
		return false
	}
	p.current = result
	return true
}

func (p *appServiceEnvironmentsListWebAppsPager) PageResponse() AppServiceEnvironmentsListWebAppsResponse {
	return p.current
}

type AppServiceEnvironmentsListWebWorkerMetricDefinitionsPager interface {
	azcore.Pager
	// PageResponse returns the current AppServiceEnvironmentsListWebWorkerMetricDefinitionsResponse.
	PageResponse() AppServiceEnvironmentsListWebWorkerMetricDefinitionsResponse
}

type appServiceEnvironmentsListWebWorkerMetricDefinitionsPager struct {
	client    *AppServiceEnvironmentsClient
	current   AppServiceEnvironmentsListWebWorkerMetricDefinitionsResponse
	err       error
	requester func(context.Context) (*azcore.Request, error)
	advancer  func(context.Context, AppServiceEnvironmentsListWebWorkerMetricDefinitionsResponse) (*azcore.Request, error)
}

func (p *appServiceEnvironmentsListWebWorkerMetricDefinitionsPager) Err() error {
	return p.err
}

func (p *appServiceEnvironmentsListWebWorkerMetricDefinitionsPager) NextPage(ctx context.Context) bool {
	var req *azcore.Request
	var err error
	if !reflect.ValueOf(p.current).IsZero() {
		if p.current.ResourceMetricDefinitionCollection.NextLink == nil || len(*p.current.ResourceMetricDefinitionCollection.NextLink) == 0 {
			return false
		}
		req, err = p.advancer(ctx, p.current)
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		p.err = err
		return false
	}
	resp, err := p.client.con.Pipeline().Do(req)
	if err != nil {
		p.err = err
		return false
	}
	if !resp.HasStatusCode(http.StatusOK) {
		p.err = p.client.listWebWorkerMetricDefinitionsHandleError(resp)
		return false
	}
	result, err := p.client.listWebWorkerMetricDefinitionsHandleResponse(resp)
	if err != nil {
		p.err = err
		return false
	}
	p.current = result
	return true
}

func (p *appServiceEnvironmentsListWebWorkerMetricDefinitionsPager) PageResponse() AppServiceEnvironmentsListWebWorkerMetricDefinitionsResponse {
	return p.current
}

type AppServiceEnvironmentsListWebWorkerUsagesPager interface {
	azcore.Pager
	// PageResponse returns the current AppServiceEnvironmentsListWebWorkerUsagesResponse.
	PageResponse() AppServiceEnvironmentsListWebWorkerUsagesResponse
}

type appServiceEnvironmentsListWebWorkerUsagesPager struct {
	client    *AppServiceEnvironmentsClient
	current   AppServiceEnvironmentsListWebWorkerUsagesResponse
	err       error
	requester func(context.Context) (*azcore.Request, error)
	advancer  func(context.Context, AppServiceEnvironmentsListWebWorkerUsagesResponse) (*azcore.Request, error)
}

func (p *appServiceEnvironmentsListWebWorkerUsagesPager) Err() error {
	return p.err
}

func (p *appServiceEnvironmentsListWebWorkerUsagesPager) NextPage(ctx context.Context) bool {
	var req *azcore.Request
	var err error
	if !reflect.ValueOf(p.current).IsZero() {
		if p.current.UsageCollection.NextLink == nil || len(*p.current.UsageCollection.NextLink) == 0 {
			return false
		}
		req, err = p.advancer(ctx, p.current)
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		p.err = err
		return false
	}
	resp, err := p.client.con.Pipeline().Do(req)
	if err != nil {
		p.err = err
		return false
	}
	if !resp.HasStatusCode(http.StatusOK) {
		p.err = p.client.listWebWorkerUsagesHandleError(resp)
		return false
	}
	result, err := p.client.listWebWorkerUsagesHandleResponse(resp)
	if err != nil {
		p.err = err
		return false
	}
	p.current = result
	return true
}

func (p *appServiceEnvironmentsListWebWorkerUsagesPager) PageResponse() AppServiceEnvironmentsListWebWorkerUsagesResponse {
	return p.current
}

type AppServiceEnvironmentsListWorkerPoolInstanceMetricDefinitionsPager interface {
	azcore.Pager
	// PageResponse returns the current AppServiceEnvironmentsListWorkerPoolInstanceMetricDefinitionsResponse.
	PageResponse() AppServiceEnvironmentsListWorkerPoolInstanceMetricDefinitionsResponse
}

type appServiceEnvironmentsListWorkerPoolInstanceMetricDefinitionsPager struct {
	client    *AppServiceEnvironmentsClient
	current   AppServiceEnvironmentsListWorkerPoolInstanceMetricDefinitionsResponse
	err       error
	requester func(context.Context) (*azcore.Request, error)
	advancer  func(context.Context, AppServiceEnvironmentsListWorkerPoolInstanceMetricDefinitionsResponse) (*azcore.Request, error)
}

func (p *appServiceEnvironmentsListWorkerPoolInstanceMetricDefinitionsPager) Err() error {
	return p.err
}

func (p *appServiceEnvironmentsListWorkerPoolInstanceMetricDefinitionsPager) NextPage(ctx context.Context) bool {
	var req *azcore.Request
	var err error
	if !reflect.ValueOf(p.current).IsZero() {
		if p.current.ResourceMetricDefinitionCollection.NextLink == nil || len(*p.current.ResourceMetricDefinitionCollection.NextLink) == 0 {
			return false
		}
		req, err = p.advancer(ctx, p.current)
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		p.err = err
		return false
	}
	resp, err := p.client.con.Pipeline().Do(req)
	if err != nil {
		p.err = err
		return false
	}
	if !resp.HasStatusCode(http.StatusOK) {
		p.err = p.client.listWorkerPoolInstanceMetricDefinitionsHandleError(resp)
		return false
	}
	result, err := p.client.listWorkerPoolInstanceMetricDefinitionsHandleResponse(resp)
	if err != nil {
		p.err = err
		return false
	}
	p.current = result
	return true
}

func (p *appServiceEnvironmentsListWorkerPoolInstanceMetricDefinitionsPager) PageResponse() AppServiceEnvironmentsListWorkerPoolInstanceMetricDefinitionsResponse {
	return p.current
}

type AppServiceEnvironmentsListWorkerPoolSKUsPager interface {
	azcore.Pager
	// PageResponse returns the current AppServiceEnvironmentsListWorkerPoolSKUsResponse.
	PageResponse() AppServiceEnvironmentsListWorkerPoolSKUsResponse
}

type appServiceEnvironmentsListWorkerPoolSKUsPager struct {
	client    *AppServiceEnvironmentsClient
	current   AppServiceEnvironmentsListWorkerPoolSKUsResponse
	err       error
	requester func(context.Context) (*azcore.Request, error)
	advancer  func(context.Context, AppServiceEnvironmentsListWorkerPoolSKUsResponse) (*azcore.Request, error)
}

func (p *appServiceEnvironmentsListWorkerPoolSKUsPager) Err() error {
	return p.err
}

func (p *appServiceEnvironmentsListWorkerPoolSKUsPager) NextPage(ctx context.Context) bool {
	var req *azcore.Request
	var err error
	if !reflect.ValueOf(p.current).IsZero() {
		if p.current.SKUInfoCollection.NextLink == nil || len(*p.current.SKUInfoCollection.NextLink) == 0 {
			return false
		}
		req, err = p.advancer(ctx, p.current)
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		p.err = err
		return false
	}
	resp, err := p.client.con.Pipeline().Do(req)
	if err != nil {
		p.err = err
		return false
	}
	if !resp.HasStatusCode(http.StatusOK) {
		p.err = p.client.listWorkerPoolSKUsHandleError(resp)
		return false
	}
	result, err := p.client.listWorkerPoolSKUsHandleResponse(resp)
	if err != nil {
		p.err = err
		return false
	}
	p.current = result
	return true
}

func (p *appServiceEnvironmentsListWorkerPoolSKUsPager) PageResponse() AppServiceEnvironmentsListWorkerPoolSKUsResponse {
	return p.current
}

type AppServiceEnvironmentsListWorkerPoolsPager interface {
	azcore.Pager
	// PageResponse returns the current AppServiceEnvironmentsListWorkerPoolsResponse.
	PageResponse() AppServiceEnvironmentsListWorkerPoolsResponse
}

type appServiceEnvironmentsListWorkerPoolsPager struct {
	client    *AppServiceEnvironmentsClient
	current   AppServiceEnvironmentsListWorkerPoolsResponse
	err       error
	requester func(context.Context) (*azcore.Request, error)
	advancer  func(context.Context, AppServiceEnvironmentsListWorkerPoolsResponse) (*azcore.Request, error)
}

func (p *appServiceEnvironmentsListWorkerPoolsPager) Err() error {
	return p.err
}

func (p *appServiceEnvironmentsListWorkerPoolsPager) NextPage(ctx context.Context) bool {
	var req *azcore.Request
	var err error
	if !reflect.ValueOf(p.current).IsZero() {
		if p.current.WorkerPoolCollection.NextLink == nil || len(*p.current.WorkerPoolCollection.NextLink) == 0 {
			return false
		}
		req, err = p.advancer(ctx, p.current)
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		p.err = err
		return false
	}
	resp, err := p.client.con.Pipeline().Do(req)
	if err != nil {
		p.err = err
		return false
	}
	if !resp.HasStatusCode(http.StatusOK) {
		p.err = p.client.listWorkerPoolsHandleError(resp)
		return false
	}
	result, err := p.client.listWorkerPoolsHandleResponse(resp)
	if err != nil {
		p.err = err
		return false
	}
	p.current = result
	return true
}

func (p *appServiceEnvironmentsListWorkerPoolsPager) PageResponse() AppServiceEnvironmentsListWorkerPoolsResponse {
	return p.current
}

type AppServiceEnvironmentsResumePager interface {
	azcore.Pager
	// PageResponse returns the current AppServiceEnvironmentsResumeResponse.
	PageResponse() AppServiceEnvironmentsResumeResponse
}

type appServiceEnvironmentsResumePager struct {
	client  *AppServiceEnvironmentsClient
	current AppServiceEnvironmentsResumeResponse
	err     error
	second  bool
}

func (p *appServiceEnvironmentsResumePager) Err() error {
	return p.err
}

func (p *appServiceEnvironmentsResumePager) NextPage(ctx context.Context) bool {
	if !p.second {
		p.second = true
		return true
	} else if !reflect.ValueOf(p.current).IsZero() {
		if p.current.WebAppCollection.NextLink == nil || len(*p.current.WebAppCollection.NextLink) == 0 {
			return false
		}
	}
	req, err := azcore.NewRequest(ctx, http.MethodGet, *p.current.WebAppCollection.NextLink)
	if err != nil {
		p.err = err
		return false
	}
	resp, err := p.client.con.Pipeline().Do(req)
	if err != nil {
		p.err = err
		return false
	}
	if !resp.HasStatusCode(http.StatusOK, http.StatusCreated, http.StatusAccepted) {
		p.err = p.client.resumeHandleError(resp)
		return false
	}
	result, err := p.client.resumeHandleResponse(resp)
	if err != nil {
		p.err = err
		return false
	}
	p.current = result
	return true
}

func (p *appServiceEnvironmentsResumePager) PageResponse() AppServiceEnvironmentsResumeResponse {
	return p.current
}

type AppServiceEnvironmentsSuspendPager interface {
	azcore.Pager
	// PageResponse returns the current AppServiceEnvironmentsSuspendResponse.
	PageResponse() AppServiceEnvironmentsSuspendResponse
}

type appServiceEnvironmentsSuspendPager struct {
	client  *AppServiceEnvironmentsClient
	current AppServiceEnvironmentsSuspendResponse
	err     error
	second  bool
}

func (p *appServiceEnvironmentsSuspendPager) Err() error {
	return p.err
}

func (p *appServiceEnvironmentsSuspendPager) NextPage(ctx context.Context) bool {
	if !p.second {
		p.second = true
		return true
	} else if !reflect.ValueOf(p.current).IsZero() {
		if p.current.WebAppCollection.NextLink == nil || len(*p.current.WebAppCollection.NextLink) == 0 {
			return false
		}
	}
	req, err := azcore.NewRequest(ctx, http.MethodGet, *p.current.WebAppCollection.NextLink)
	if err != nil {
		p.err = err
		return false
	}
	resp, err := p.client.con.Pipeline().Do(req)
	if err != nil {
		p.err = err
		return false
	}
	if !resp.HasStatusCode(http.StatusOK, http.StatusCreated, http.StatusAccepted) {
		p.err = p.client.suspendHandleError(resp)
		return false
	}
	result, err := p.client.suspendHandleResponse(resp)
	if err != nil {
		p.err = err
		return false
	}
	p.current = result
	return true
}

func (p *appServiceEnvironmentsSuspendPager) PageResponse() AppServiceEnvironmentsSuspendResponse {
	return p.current
}

type AppServicePlansListByResourceGroupPager interface {
	azcore.Pager
	// PageResponse returns the current AppServicePlansListByResourceGroupResponse.
	PageResponse() AppServicePlansListByResourceGroupResponse
}

type appServicePlansListByResourceGroupPager struct {
	client    *AppServicePlansClient
	current   AppServicePlansListByResourceGroupResponse
	err       error
	requester func(context.Context) (*azcore.Request, error)
	advancer  func(context.Context, AppServicePlansListByResourceGroupResponse) (*azcore.Request, error)
}

func (p *appServicePlansListByResourceGroupPager) Err() error {
	return p.err
}

func (p *appServicePlansListByResourceGroupPager) NextPage(ctx context.Context) bool {
	var req *azcore.Request
	var err error
	if !reflect.ValueOf(p.current).IsZero() {
		if p.current.AppServicePlanCollection.NextLink == nil || len(*p.current.AppServicePlanCollection.NextLink) == 0 {
			return false
		}
		req, err = p.advancer(ctx, p.current)
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		p.err = err
		return false
	}
	resp, err := p.client.con.Pipeline().Do(req)
	if err != nil {
		p.err = err
		return false
	}
	if !resp.HasStatusCode(http.StatusOK) {
		p.err = p.client.listByResourceGroupHandleError(resp)
		return false
	}
	result, err := p.client.listByResourceGroupHandleResponse(resp)
	if err != nil {
		p.err = err
		return false
	}
	p.current = result
	return true
}

func (p *appServicePlansListByResourceGroupPager) PageResponse() AppServicePlansListByResourceGroupResponse {
	return p.current
}

type AppServicePlansListHybridConnectionsPager interface {
	azcore.Pager
	// PageResponse returns the current AppServicePlansListHybridConnectionsResponse.
	PageResponse() AppServicePlansListHybridConnectionsResponse
}

type appServicePlansListHybridConnectionsPager struct {
	client    *AppServicePlansClient
	current   AppServicePlansListHybridConnectionsResponse
	err       error
	requester func(context.Context) (*azcore.Request, error)
	advancer  func(context.Context, AppServicePlansListHybridConnectionsResponse) (*azcore.Request, error)
}

func (p *appServicePlansListHybridConnectionsPager) Err() error {
	return p.err
}

func (p *appServicePlansListHybridConnectionsPager) NextPage(ctx context.Context) bool {
	var req *azcore.Request
	var err error
	if !reflect.ValueOf(p.current).IsZero() {
		if p.current.HybridConnectionCollection.NextLink == nil || len(*p.current.HybridConnectionCollection.NextLink) == 0 {
			return false
		}
		req, err = p.advancer(ctx, p.current)
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		p.err = err
		return false
	}
	resp, err := p.client.con.Pipeline().Do(req)
	if err != nil {
		p.err = err
		return false
	}
	if !resp.HasStatusCode(http.StatusOK) {
		p.err = p.client.listHybridConnectionsHandleError(resp)
		return false
	}
	result, err := p.client.listHybridConnectionsHandleResponse(resp)
	if err != nil {
		p.err = err
		return false
	}
	p.current = result
	return true
}

func (p *appServicePlansListHybridConnectionsPager) PageResponse() AppServicePlansListHybridConnectionsResponse {
	return p.current
}

type AppServicePlansListPager interface {
	azcore.Pager
	// PageResponse returns the current AppServicePlansListResponse.
	PageResponse() AppServicePlansListResponse
}

type appServicePlansListPager struct {
	client    *AppServicePlansClient
	current   AppServicePlansListResponse
	err       error
	requester func(context.Context) (*azcore.Request, error)
	advancer  func(context.Context, AppServicePlansListResponse) (*azcore.Request, error)
}

func (p *appServicePlansListPager) Err() error {
	return p.err
}

func (p *appServicePlansListPager) NextPage(ctx context.Context) bool {
	var req *azcore.Request
	var err error
	if !reflect.ValueOf(p.current).IsZero() {
		if p.current.AppServicePlanCollection.NextLink == nil || len(*p.current.AppServicePlanCollection.NextLink) == 0 {
			return false
		}
		req, err = p.advancer(ctx, p.current)
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		p.err = err
		return false
	}
	resp, err := p.client.con.Pipeline().Do(req)
	if err != nil {
		p.err = err
		return false
	}
	if !resp.HasStatusCode(http.StatusOK) {
		p.err = p.client.listHandleError(resp)
		return false
	}
	result, err := p.client.listHandleResponse(resp)
	if err != nil {
		p.err = err
		return false
	}
	p.current = result
	return true
}

func (p *appServicePlansListPager) PageResponse() AppServicePlansListResponse {
	return p.current
}

type AppServicePlansListUsagesPager interface {
	azcore.Pager
	// PageResponse returns the current AppServicePlansListUsagesResponse.
	PageResponse() AppServicePlansListUsagesResponse
}

type appServicePlansListUsagesPager struct {
	client    *AppServicePlansClient
	current   AppServicePlansListUsagesResponse
	err       error
	requester func(context.Context) (*azcore.Request, error)
	advancer  func(context.Context, AppServicePlansListUsagesResponse) (*azcore.Request, error)
}

func (p *appServicePlansListUsagesPager) Err() error {
	return p.err
}

func (p *appServicePlansListUsagesPager) NextPage(ctx context.Context) bool {
	var req *azcore.Request
	var err error
	if !reflect.ValueOf(p.current).IsZero() {
		if p.current.CsmUsageQuotaCollection.NextLink == nil || len(*p.current.CsmUsageQuotaCollection.NextLink) == 0 {
			return false
		}
		req, err = p.advancer(ctx, p.current)
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		p.err = err
		return false
	}
	resp, err := p.client.con.Pipeline().Do(req)
	if err != nil {
		p.err = err
		return false
	}
	if !resp.HasStatusCode(http.StatusOK) {
		p.err = p.client.listUsagesHandleError(resp)
		return false
	}
	result, err := p.client.listUsagesHandleResponse(resp)
	if err != nil {
		p.err = err
		return false
	}
	p.current = result
	return true
}

func (p *appServicePlansListUsagesPager) PageResponse() AppServicePlansListUsagesResponse {
	return p.current
}

type AppServicePlansListWebAppsByHybridConnectionPager interface {
	azcore.Pager
	// PageResponse returns the current AppServicePlansListWebAppsByHybridConnectionResponse.
	PageResponse() AppServicePlansListWebAppsByHybridConnectionResponse
}

type appServicePlansListWebAppsByHybridConnectionPager struct {
	client    *AppServicePlansClient
	current   AppServicePlansListWebAppsByHybridConnectionResponse
	err       error
	requester func(context.Context) (*azcore.Request, error)
	advancer  func(context.Context, AppServicePlansListWebAppsByHybridConnectionResponse) (*azcore.Request, error)
}

func (p *appServicePlansListWebAppsByHybridConnectionPager) Err() error {
	return p.err
}

func (p *appServicePlansListWebAppsByHybridConnectionPager) NextPage(ctx context.Context) bool {
	var req *azcore.Request
	var err error
	if !reflect.ValueOf(p.current).IsZero() {
		if p.current.ResourceCollection.NextLink == nil || len(*p.current.ResourceCollection.NextLink) == 0 {
			return false
		}
		req, err = p.advancer(ctx, p.current)
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		p.err = err
		return false
	}
	resp, err := p.client.con.Pipeline().Do(req)
	if err != nil {
		p.err = err
		return false
	}
	if !resp.HasStatusCode(http.StatusOK) {
		p.err = p.client.listWebAppsByHybridConnectionHandleError(resp)
		return false
	}
	result, err := p.client.listWebAppsByHybridConnectionHandleResponse(resp)
	if err != nil {
		p.err = err
		return false
	}
	p.current = result
	return true
}

func (p *appServicePlansListWebAppsByHybridConnectionPager) PageResponse() AppServicePlansListWebAppsByHybridConnectionResponse {
	return p.current
}

type AppServicePlansListWebAppsPager interface {
	azcore.Pager
	// PageResponse returns the current AppServicePlansListWebAppsResponse.
	PageResponse() AppServicePlansListWebAppsResponse
}

type appServicePlansListWebAppsPager struct {
	client    *AppServicePlansClient
	current   AppServicePlansListWebAppsResponse
	err       error
	requester func(context.Context) (*azcore.Request, error)
	advancer  func(context.Context, AppServicePlansListWebAppsResponse) (*azcore.Request, error)
}

func (p *appServicePlansListWebAppsPager) Err() error {
	return p.err
}

func (p *appServicePlansListWebAppsPager) NextPage(ctx context.Context) bool {
	var req *azcore.Request
	var err error
	if !reflect.ValueOf(p.current).IsZero() {
		if p.current.WebAppCollection.NextLink == nil || len(*p.current.WebAppCollection.NextLink) == 0 {
			return false
		}
		req, err = p.advancer(ctx, p.current)
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		p.err = err
		return false
	}
	resp, err := p.client.con.Pipeline().Do(req)
	if err != nil {
		p.err = err
		return false
	}
	if !resp.HasStatusCode(http.StatusOK) {
		p.err = p.client.listWebAppsHandleError(resp)
		return false
	}
	result, err := p.client.listWebAppsHandleResponse(resp)
	if err != nil {
		p.err = err
		return false
	}
	p.current = result
	return true
}

func (p *appServicePlansListWebAppsPager) PageResponse() AppServicePlansListWebAppsResponse {
	return p.current
}

type CertificateOrdersDiagnosticsListAppServiceCertificateOrderDetectorResponsePager interface {
	azcore.Pager
	// PageResponse returns the current CertificateOrdersDiagnosticsListAppServiceCertificateOrderDetectorResponseResponse.
	PageResponse() CertificateOrdersDiagnosticsListAppServiceCertificateOrderDetectorResponseResponse
}

type certificateOrdersDiagnosticsListAppServiceCertificateOrderDetectorResponsePager struct {
	client    *CertificateOrdersDiagnosticsClient
	current   CertificateOrdersDiagnosticsListAppServiceCertificateOrderDetectorResponseResponse
	err       error
	requester func(context.Context) (*azcore.Request, error)
	advancer  func(context.Context, CertificateOrdersDiagnosticsListAppServiceCertificateOrderDetectorResponseResponse) (*azcore.Request, error)
}

func (p *certificateOrdersDiagnosticsListAppServiceCertificateOrderDetectorResponsePager) Err() error {
	return p.err
}

func (p *certificateOrdersDiagnosticsListAppServiceCertificateOrderDetectorResponsePager) NextPage(ctx context.Context) bool {
	var req *azcore.Request
	var err error
	if !reflect.ValueOf(p.current).IsZero() {
		if p.current.DetectorResponseCollection.NextLink == nil || len(*p.current.DetectorResponseCollection.NextLink) == 0 {
			return false
		}
		req, err = p.advancer(ctx, p.current)
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		p.err = err
		return false
	}
	resp, err := p.client.con.Pipeline().Do(req)
	if err != nil {
		p.err = err
		return false
	}
	if !resp.HasStatusCode(http.StatusOK) {
		p.err = p.client.listAppServiceCertificateOrderDetectorResponseHandleError(resp)
		return false
	}
	result, err := p.client.listAppServiceCertificateOrderDetectorResponseHandleResponse(resp)
	if err != nil {
		p.err = err
		return false
	}
	p.current = result
	return true
}

func (p *certificateOrdersDiagnosticsListAppServiceCertificateOrderDetectorResponsePager) PageResponse() CertificateOrdersDiagnosticsListAppServiceCertificateOrderDetectorResponseResponse {
	return p.current
}

type CertificateRegistrationProviderListOperationsPager interface {
	azcore.Pager
	// PageResponse returns the current CertificateRegistrationProviderListOperationsResponse.
	PageResponse() CertificateRegistrationProviderListOperationsResponse
}

type certificateRegistrationProviderListOperationsPager struct {
	client    *CertificateRegistrationProviderClient
	current   CertificateRegistrationProviderListOperationsResponse
	err       error
	requester func(context.Context) (*azcore.Request, error)
	advancer  func(context.Context, CertificateRegistrationProviderListOperationsResponse) (*azcore.Request, error)
}

func (p *certificateRegistrationProviderListOperationsPager) Err() error {
	return p.err
}

func (p *certificateRegistrationProviderListOperationsPager) NextPage(ctx context.Context) bool {
	var req *azcore.Request
	var err error
	if !reflect.ValueOf(p.current).IsZero() {
		if p.current.CsmOperationCollection.NextLink == nil || len(*p.current.CsmOperationCollection.NextLink) == 0 {
			return false
		}
		req, err = p.advancer(ctx, p.current)
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		p.err = err
		return false
	}
	resp, err := p.client.con.Pipeline().Do(req)
	if err != nil {
		p.err = err
		return false
	}
	if !resp.HasStatusCode(http.StatusOK) {
		p.err = p.client.listOperationsHandleError(resp)
		return false
	}
	result, err := p.client.listOperationsHandleResponse(resp)
	if err != nil {
		p.err = err
		return false
	}
	p.current = result
	return true
}

func (p *certificateRegistrationProviderListOperationsPager) PageResponse() CertificateRegistrationProviderListOperationsResponse {
	return p.current
}

type CertificatesListByResourceGroupPager interface {
	azcore.Pager
	// PageResponse returns the current CertificatesListByResourceGroupResponse.
	PageResponse() CertificatesListByResourceGroupResponse
}

type certificatesListByResourceGroupPager struct {
	client    *CertificatesClient
	current   CertificatesListByResourceGroupResponse
	err       error
	requester func(context.Context) (*azcore.Request, error)
	advancer  func(context.Context, CertificatesListByResourceGroupResponse) (*azcore.Request, error)
}

func (p *certificatesListByResourceGroupPager) Err() error {
	return p.err
}

func (p *certificatesListByResourceGroupPager) NextPage(ctx context.Context) bool {
	var req *azcore.Request
	var err error
	if !reflect.ValueOf(p.current).IsZero() {
		if p.current.CertificateCollection.NextLink == nil || len(*p.current.CertificateCollection.NextLink) == 0 {
			return false
		}
		req, err = p.advancer(ctx, p.current)
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		p.err = err
		return false
	}
	resp, err := p.client.con.Pipeline().Do(req)
	if err != nil {
		p.err = err
		return false
	}
	if !resp.HasStatusCode(http.StatusOK) {
		p.err = p.client.listByResourceGroupHandleError(resp)
		return false
	}
	result, err := p.client.listByResourceGroupHandleResponse(resp)
	if err != nil {
		p.err = err
		return false
	}
	p.current = result
	return true
}

func (p *certificatesListByResourceGroupPager) PageResponse() CertificatesListByResourceGroupResponse {
	return p.current
}

type CertificatesListPager interface {
	azcore.Pager
	// PageResponse returns the current CertificatesListResponse.
	PageResponse() CertificatesListResponse
}

type certificatesListPager struct {
	client    *CertificatesClient
	current   CertificatesListResponse
	err       error
	requester func(context.Context) (*azcore.Request, error)
	advancer  func(context.Context, CertificatesListResponse) (*azcore.Request, error)
}

func (p *certificatesListPager) Err() error {
	return p.err
}

func (p *certificatesListPager) NextPage(ctx context.Context) bool {
	var req *azcore.Request
	var err error
	if !reflect.ValueOf(p.current).IsZero() {
		if p.current.CertificateCollection.NextLink == nil || len(*p.current.CertificateCollection.NextLink) == 0 {
			return false
		}
		req, err = p.advancer(ctx, p.current)
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		p.err = err
		return false
	}
	resp, err := p.client.con.Pipeline().Do(req)
	if err != nil {
		p.err = err
		return false
	}
	if !resp.HasStatusCode(http.StatusOK) {
		p.err = p.client.listHandleError(resp)
		return false
	}
	result, err := p.client.listHandleResponse(resp)
	if err != nil {
		p.err = err
		return false
	}
	p.current = result
	return true
}

func (p *certificatesListPager) PageResponse() CertificatesListResponse {
	return p.current
}

type DeletedWebAppsListByLocationPager interface {
	azcore.Pager
	// PageResponse returns the current DeletedWebAppsListByLocationResponse.
	PageResponse() DeletedWebAppsListByLocationResponse
}

type deletedWebAppsListByLocationPager struct {
	client    *DeletedWebAppsClient
	current   DeletedWebAppsListByLocationResponse
	err       error
	requester func(context.Context) (*azcore.Request, error)
	advancer  func(context.Context, DeletedWebAppsListByLocationResponse) (*azcore.Request, error)
}

func (p *deletedWebAppsListByLocationPager) Err() error {
	return p.err
}

func (p *deletedWebAppsListByLocationPager) NextPage(ctx context.Context) bool {
	var req *azcore.Request
	var err error
	if !reflect.ValueOf(p.current).IsZero() {
		if p.current.DeletedWebAppCollection.NextLink == nil || len(*p.current.DeletedWebAppCollection.NextLink) == 0 {
			return false
		}
		req, err = p.advancer(ctx, p.current)
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		p.err = err
		return false
	}
	resp, err := p.client.con.Pipeline().Do(req)
	if err != nil {
		p.err = err
		return false
	}
	if !resp.HasStatusCode(http.StatusOK) {
		p.err = p.client.listByLocationHandleError(resp)
		return false
	}
	result, err := p.client.listByLocationHandleResponse(resp)
	if err != nil {
		p.err = err
		return false
	}
	p.current = result
	return true
}

func (p *deletedWebAppsListByLocationPager) PageResponse() DeletedWebAppsListByLocationResponse {
	return p.current
}

type DeletedWebAppsListPager interface {
	azcore.Pager
	// PageResponse returns the current DeletedWebAppsListResponse.
	PageResponse() DeletedWebAppsListResponse
}

type deletedWebAppsListPager struct {
	client    *DeletedWebAppsClient
	current   DeletedWebAppsListResponse
	err       error
	requester func(context.Context) (*azcore.Request, error)
	advancer  func(context.Context, DeletedWebAppsListResponse) (*azcore.Request, error)
}

func (p *deletedWebAppsListPager) Err() error {
	return p.err
}

func (p *deletedWebAppsListPager) NextPage(ctx context.Context) bool {
	var req *azcore.Request
	var err error
	if !reflect.ValueOf(p.current).IsZero() {
		if p.current.DeletedWebAppCollection.NextLink == nil || len(*p.current.DeletedWebAppCollection.NextLink) == 0 {
			return false
		}
		req, err = p.advancer(ctx, p.current)
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		p.err = err
		return false
	}
	resp, err := p.client.con.Pipeline().Do(req)
	if err != nil {
		p.err = err
		return false
	}
	if !resp.HasStatusCode(http.StatusOK) {
		p.err = p.client.listHandleError(resp)
		return false
	}
	result, err := p.client.listHandleResponse(resp)
	if err != nil {
		p.err = err
		return false
	}
	p.current = result
	return true
}

func (p *deletedWebAppsListPager) PageResponse() DeletedWebAppsListResponse {
	return p.current
}

type DiagnosticsListHostingEnvironmentDetectorResponsesPager interface {
	azcore.Pager
	// PageResponse returns the current DiagnosticsListHostingEnvironmentDetectorResponsesResponse.
	PageResponse() DiagnosticsListHostingEnvironmentDetectorResponsesResponse
}

type diagnosticsListHostingEnvironmentDetectorResponsesPager struct {
	client    *DiagnosticsClient
	current   DiagnosticsListHostingEnvironmentDetectorResponsesResponse
	err       error
	requester func(context.Context) (*azcore.Request, error)
	advancer  func(context.Context, DiagnosticsListHostingEnvironmentDetectorResponsesResponse) (*azcore.Request, error)
}

func (p *diagnosticsListHostingEnvironmentDetectorResponsesPager) Err() error {
	return p.err
}

func (p *diagnosticsListHostingEnvironmentDetectorResponsesPager) NextPage(ctx context.Context) bool {
	var req *azcore.Request
	var err error
	if !reflect.ValueOf(p.current).IsZero() {
		if p.current.DetectorResponseCollection.NextLink == nil || len(*p.current.DetectorResponseCollection.NextLink) == 0 {
			return false
		}
		req, err = p.advancer(ctx, p.current)
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		p.err = err
		return false
	}
	resp, err := p.client.con.Pipeline().Do(req)
	if err != nil {
		p.err = err
		return false
	}
	if !resp.HasStatusCode(http.StatusOK) {
		p.err = p.client.listHostingEnvironmentDetectorResponsesHandleError(resp)
		return false
	}
	result, err := p.client.listHostingEnvironmentDetectorResponsesHandleResponse(resp)
	if err != nil {
		p.err = err
		return false
	}
	p.current = result
	return true
}

func (p *diagnosticsListHostingEnvironmentDetectorResponsesPager) PageResponse() DiagnosticsListHostingEnvironmentDetectorResponsesResponse {
	return p.current
}

type DiagnosticsListSiteAnalysesPager interface {
	azcore.Pager
	// PageResponse returns the current DiagnosticsListSiteAnalysesResponse.
	PageResponse() DiagnosticsListSiteAnalysesResponse
}

type diagnosticsListSiteAnalysesPager struct {
	client    *DiagnosticsClient
	current   DiagnosticsListSiteAnalysesResponse
	err       error
	requester func(context.Context) (*azcore.Request, error)
	advancer  func(context.Context, DiagnosticsListSiteAnalysesResponse) (*azcore.Request, error)
}

func (p *diagnosticsListSiteAnalysesPager) Err() error {
	return p.err
}

func (p *diagnosticsListSiteAnalysesPager) NextPage(ctx context.Context) bool {
	var req *azcore.Request
	var err error
	if !reflect.ValueOf(p.current).IsZero() {
		if p.current.DiagnosticAnalysisCollection.NextLink == nil || len(*p.current.DiagnosticAnalysisCollection.NextLink) == 0 {
			return false
		}
		req, err = p.advancer(ctx, p.current)
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		p.err = err
		return false
	}
	resp, err := p.client.con.Pipeline().Do(req)
	if err != nil {
		p.err = err
		return false
	}
	if !resp.HasStatusCode(http.StatusOK) {
		p.err = p.client.listSiteAnalysesHandleError(resp)
		return false
	}
	result, err := p.client.listSiteAnalysesHandleResponse(resp)
	if err != nil {
		p.err = err
		return false
	}
	p.current = result
	return true
}

func (p *diagnosticsListSiteAnalysesPager) PageResponse() DiagnosticsListSiteAnalysesResponse {
	return p.current
}

type DiagnosticsListSiteAnalysesSlotPager interface {
	azcore.Pager
	// PageResponse returns the current DiagnosticsListSiteAnalysesSlotResponse.
	PageResponse() DiagnosticsListSiteAnalysesSlotResponse
}

type diagnosticsListSiteAnalysesSlotPager struct {
	client    *DiagnosticsClient
	current   DiagnosticsListSiteAnalysesSlotResponse
	err       error
	requester func(context.Context) (*azcore.Request, error)
	advancer  func(context.Context, DiagnosticsListSiteAnalysesSlotResponse) (*azcore.Request, error)
}

func (p *diagnosticsListSiteAnalysesSlotPager) Err() error {
	return p.err
}

func (p *diagnosticsListSiteAnalysesSlotPager) NextPage(ctx context.Context) bool {
	var req *azcore.Request
	var err error
	if !reflect.ValueOf(p.current).IsZero() {
		if p.current.DiagnosticAnalysisCollection.NextLink == nil || len(*p.current.DiagnosticAnalysisCollection.NextLink) == 0 {
			return false
		}
		req, err = p.advancer(ctx, p.current)
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		p.err = err
		return false
	}
	resp, err := p.client.con.Pipeline().Do(req)
	if err != nil {
		p.err = err
		return false
	}
	if !resp.HasStatusCode(http.StatusOK) {
		p.err = p.client.listSiteAnalysesSlotHandleError(resp)
		return false
	}
	result, err := p.client.listSiteAnalysesSlotHandleResponse(resp)
	if err != nil {
		p.err = err
		return false
	}
	p.current = result
	return true
}

func (p *diagnosticsListSiteAnalysesSlotPager) PageResponse() DiagnosticsListSiteAnalysesSlotResponse {
	return p.current
}

type DiagnosticsListSiteDetectorResponsesPager interface {
	azcore.Pager
	// PageResponse returns the current DiagnosticsListSiteDetectorResponsesResponse.
	PageResponse() DiagnosticsListSiteDetectorResponsesResponse
}

type diagnosticsListSiteDetectorResponsesPager struct {
	client    *DiagnosticsClient
	current   DiagnosticsListSiteDetectorResponsesResponse
	err       error
	requester func(context.Context) (*azcore.Request, error)
	advancer  func(context.Context, DiagnosticsListSiteDetectorResponsesResponse) (*azcore.Request, error)
}

func (p *diagnosticsListSiteDetectorResponsesPager) Err() error {
	return p.err
}

func (p *diagnosticsListSiteDetectorResponsesPager) NextPage(ctx context.Context) bool {
	var req *azcore.Request
	var err error
	if !reflect.ValueOf(p.current).IsZero() {
		if p.current.DetectorResponseCollection.NextLink == nil || len(*p.current.DetectorResponseCollection.NextLink) == 0 {
			return false
		}
		req, err = p.advancer(ctx, p.current)
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		p.err = err
		return false
	}
	resp, err := p.client.con.Pipeline().Do(req)
	if err != nil {
		p.err = err
		return false
	}
	if !resp.HasStatusCode(http.StatusOK) {
		p.err = p.client.listSiteDetectorResponsesHandleError(resp)
		return false
	}
	result, err := p.client.listSiteDetectorResponsesHandleResponse(resp)
	if err != nil {
		p.err = err
		return false
	}
	p.current = result
	return true
}

func (p *diagnosticsListSiteDetectorResponsesPager) PageResponse() DiagnosticsListSiteDetectorResponsesResponse {
	return p.current
}

type DiagnosticsListSiteDetectorResponsesSlotPager interface {
	azcore.Pager
	// PageResponse returns the current DiagnosticsListSiteDetectorResponsesSlotResponse.
	PageResponse() DiagnosticsListSiteDetectorResponsesSlotResponse
}

type diagnosticsListSiteDetectorResponsesSlotPager struct {
	client    *DiagnosticsClient
	current   DiagnosticsListSiteDetectorResponsesSlotResponse
	err       error
	requester func(context.Context) (*azcore.Request, error)
	advancer  func(context.Context, DiagnosticsListSiteDetectorResponsesSlotResponse) (*azcore.Request, error)
}

func (p *diagnosticsListSiteDetectorResponsesSlotPager) Err() error {
	return p.err
}

func (p *diagnosticsListSiteDetectorResponsesSlotPager) NextPage(ctx context.Context) bool {
	var req *azcore.Request
	var err error
	if !reflect.ValueOf(p.current).IsZero() {
		if p.current.DetectorResponseCollection.NextLink == nil || len(*p.current.DetectorResponseCollection.NextLink) == 0 {
			return false
		}
		req, err = p.advancer(ctx, p.current)
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		p.err = err
		return false
	}
	resp, err := p.client.con.Pipeline().Do(req)
	if err != nil {
		p.err = err
		return false
	}
	if !resp.HasStatusCode(http.StatusOK) {
		p.err = p.client.listSiteDetectorResponsesSlotHandleError(resp)
		return false
	}
	result, err := p.client.listSiteDetectorResponsesSlotHandleResponse(resp)
	if err != nil {
		p.err = err
		return false
	}
	p.current = result
	return true
}

func (p *diagnosticsListSiteDetectorResponsesSlotPager) PageResponse() DiagnosticsListSiteDetectorResponsesSlotResponse {
	return p.current
}

type DiagnosticsListSiteDetectorsPager interface {
	azcore.Pager
	// PageResponse returns the current DiagnosticsListSiteDetectorsResponse.
	PageResponse() DiagnosticsListSiteDetectorsResponse
}

type diagnosticsListSiteDetectorsPager struct {
	client    *DiagnosticsClient
	current   DiagnosticsListSiteDetectorsResponse
	err       error
	requester func(context.Context) (*azcore.Request, error)
	advancer  func(context.Context, DiagnosticsListSiteDetectorsResponse) (*azcore.Request, error)
}

func (p *diagnosticsListSiteDetectorsPager) Err() error {
	return p.err
}

func (p *diagnosticsListSiteDetectorsPager) NextPage(ctx context.Context) bool {
	var req *azcore.Request
	var err error
	if !reflect.ValueOf(p.current).IsZero() {
		if p.current.DiagnosticDetectorCollection.NextLink == nil || len(*p.current.DiagnosticDetectorCollection.NextLink) == 0 {
			return false
		}
		req, err = p.advancer(ctx, p.current)
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		p.err = err
		return false
	}
	resp, err := p.client.con.Pipeline().Do(req)
	if err != nil {
		p.err = err
		return false
	}
	if !resp.HasStatusCode(http.StatusOK) {
		p.err = p.client.listSiteDetectorsHandleError(resp)
		return false
	}
	result, err := p.client.listSiteDetectorsHandleResponse(resp)
	if err != nil {
		p.err = err
		return false
	}
	p.current = result
	return true
}

func (p *diagnosticsListSiteDetectorsPager) PageResponse() DiagnosticsListSiteDetectorsResponse {
	return p.current
}

type DiagnosticsListSiteDetectorsSlotPager interface {
	azcore.Pager
	// PageResponse returns the current DiagnosticsListSiteDetectorsSlotResponse.
	PageResponse() DiagnosticsListSiteDetectorsSlotResponse
}

type diagnosticsListSiteDetectorsSlotPager struct {
	client    *DiagnosticsClient
	current   DiagnosticsListSiteDetectorsSlotResponse
	err       error
	requester func(context.Context) (*azcore.Request, error)
	advancer  func(context.Context, DiagnosticsListSiteDetectorsSlotResponse) (*azcore.Request, error)
}

func (p *diagnosticsListSiteDetectorsSlotPager) Err() error {
	return p.err
}

func (p *diagnosticsListSiteDetectorsSlotPager) NextPage(ctx context.Context) bool {
	var req *azcore.Request
	var err error
	if !reflect.ValueOf(p.current).IsZero() {
		if p.current.DiagnosticDetectorCollection.NextLink == nil || len(*p.current.DiagnosticDetectorCollection.NextLink) == 0 {
			return false
		}
		req, err = p.advancer(ctx, p.current)
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		p.err = err
		return false
	}
	resp, err := p.client.con.Pipeline().Do(req)
	if err != nil {
		p.err = err
		return false
	}
	if !resp.HasStatusCode(http.StatusOK) {
		p.err = p.client.listSiteDetectorsSlotHandleError(resp)
		return false
	}
	result, err := p.client.listSiteDetectorsSlotHandleResponse(resp)
	if err != nil {
		p.err = err
		return false
	}
	p.current = result
	return true
}

func (p *diagnosticsListSiteDetectorsSlotPager) PageResponse() DiagnosticsListSiteDetectorsSlotResponse {
	return p.current
}

type DiagnosticsListSiteDiagnosticCategoriesPager interface {
	azcore.Pager
	// PageResponse returns the current DiagnosticsListSiteDiagnosticCategoriesResponse.
	PageResponse() DiagnosticsListSiteDiagnosticCategoriesResponse
}

type diagnosticsListSiteDiagnosticCategoriesPager struct {
	client    *DiagnosticsClient
	current   DiagnosticsListSiteDiagnosticCategoriesResponse
	err       error
	requester func(context.Context) (*azcore.Request, error)
	advancer  func(context.Context, DiagnosticsListSiteDiagnosticCategoriesResponse) (*azcore.Request, error)
}

func (p *diagnosticsListSiteDiagnosticCategoriesPager) Err() error {
	return p.err
}

func (p *diagnosticsListSiteDiagnosticCategoriesPager) NextPage(ctx context.Context) bool {
	var req *azcore.Request
	var err error
	if !reflect.ValueOf(p.current).IsZero() {
		if p.current.DiagnosticCategoryCollection.NextLink == nil || len(*p.current.DiagnosticCategoryCollection.NextLink) == 0 {
			return false
		}
		req, err = p.advancer(ctx, p.current)
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		p.err = err
		return false
	}
	resp, err := p.client.con.Pipeline().Do(req)
	if err != nil {
		p.err = err
		return false
	}
	if !resp.HasStatusCode(http.StatusOK) {
		p.err = p.client.listSiteDiagnosticCategoriesHandleError(resp)
		return false
	}
	result, err := p.client.listSiteDiagnosticCategoriesHandleResponse(resp)
	if err != nil {
		p.err = err
		return false
	}
	p.current = result
	return true
}

func (p *diagnosticsListSiteDiagnosticCategoriesPager) PageResponse() DiagnosticsListSiteDiagnosticCategoriesResponse {
	return p.current
}

type DiagnosticsListSiteDiagnosticCategoriesSlotPager interface {
	azcore.Pager
	// PageResponse returns the current DiagnosticsListSiteDiagnosticCategoriesSlotResponse.
	PageResponse() DiagnosticsListSiteDiagnosticCategoriesSlotResponse
}

type diagnosticsListSiteDiagnosticCategoriesSlotPager struct {
	client    *DiagnosticsClient
	current   DiagnosticsListSiteDiagnosticCategoriesSlotResponse
	err       error
	requester func(context.Context) (*azcore.Request, error)
	advancer  func(context.Context, DiagnosticsListSiteDiagnosticCategoriesSlotResponse) (*azcore.Request, error)
}

func (p *diagnosticsListSiteDiagnosticCategoriesSlotPager) Err() error {
	return p.err
}

func (p *diagnosticsListSiteDiagnosticCategoriesSlotPager) NextPage(ctx context.Context) bool {
	var req *azcore.Request
	var err error
	if !reflect.ValueOf(p.current).IsZero() {
		if p.current.DiagnosticCategoryCollection.NextLink == nil || len(*p.current.DiagnosticCategoryCollection.NextLink) == 0 {
			return false
		}
		req, err = p.advancer(ctx, p.current)
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		p.err = err
		return false
	}
	resp, err := p.client.con.Pipeline().Do(req)
	if err != nil {
		p.err = err
		return false
	}
	if !resp.HasStatusCode(http.StatusOK) {
		p.err = p.client.listSiteDiagnosticCategoriesSlotHandleError(resp)
		return false
	}
	result, err := p.client.listSiteDiagnosticCategoriesSlotHandleResponse(resp)
	if err != nil {
		p.err = err
		return false
	}
	p.current = result
	return true
}

func (p *diagnosticsListSiteDiagnosticCategoriesSlotPager) PageResponse() DiagnosticsListSiteDiagnosticCategoriesSlotResponse {
	return p.current
}

type DomainRegistrationProviderListOperationsPager interface {
	azcore.Pager
	// PageResponse returns the current DomainRegistrationProviderListOperationsResponse.
	PageResponse() DomainRegistrationProviderListOperationsResponse
}

type domainRegistrationProviderListOperationsPager struct {
	client    *DomainRegistrationProviderClient
	current   DomainRegistrationProviderListOperationsResponse
	err       error
	requester func(context.Context) (*azcore.Request, error)
	advancer  func(context.Context, DomainRegistrationProviderListOperationsResponse) (*azcore.Request, error)
}

func (p *domainRegistrationProviderListOperationsPager) Err() error {
	return p.err
}

func (p *domainRegistrationProviderListOperationsPager) NextPage(ctx context.Context) bool {
	var req *azcore.Request
	var err error
	if !reflect.ValueOf(p.current).IsZero() {
		if p.current.CsmOperationCollection.NextLink == nil || len(*p.current.CsmOperationCollection.NextLink) == 0 {
			return false
		}
		req, err = p.advancer(ctx, p.current)
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		p.err = err
		return false
	}
	resp, err := p.client.con.Pipeline().Do(req)
	if err != nil {
		p.err = err
		return false
	}
	if !resp.HasStatusCode(http.StatusOK) {
		p.err = p.client.listOperationsHandleError(resp)
		return false
	}
	result, err := p.client.listOperationsHandleResponse(resp)
	if err != nil {
		p.err = err
		return false
	}
	p.current = result
	return true
}

func (p *domainRegistrationProviderListOperationsPager) PageResponse() DomainRegistrationProviderListOperationsResponse {
	return p.current
}

type DomainsListByResourceGroupPager interface {
	azcore.Pager
	// PageResponse returns the current DomainsListByResourceGroupResponse.
	PageResponse() DomainsListByResourceGroupResponse
}

type domainsListByResourceGroupPager struct {
	client    *DomainsClient
	current   DomainsListByResourceGroupResponse
	err       error
	requester func(context.Context) (*azcore.Request, error)
	advancer  func(context.Context, DomainsListByResourceGroupResponse) (*azcore.Request, error)
}

func (p *domainsListByResourceGroupPager) Err() error {
	return p.err
}

func (p *domainsListByResourceGroupPager) NextPage(ctx context.Context) bool {
	var req *azcore.Request
	var err error
	if !reflect.ValueOf(p.current).IsZero() {
		if p.current.DomainCollection.NextLink == nil || len(*p.current.DomainCollection.NextLink) == 0 {
			return false
		}
		req, err = p.advancer(ctx, p.current)
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		p.err = err
		return false
	}
	resp, err := p.client.con.Pipeline().Do(req)
	if err != nil {
		p.err = err
		return false
	}
	if !resp.HasStatusCode(http.StatusOK) {
		p.err = p.client.listByResourceGroupHandleError(resp)
		return false
	}
	result, err := p.client.listByResourceGroupHandleResponse(resp)
	if err != nil {
		p.err = err
		return false
	}
	p.current = result
	return true
}

func (p *domainsListByResourceGroupPager) PageResponse() DomainsListByResourceGroupResponse {
	return p.current
}

type DomainsListOwnershipIdentifiersPager interface {
	azcore.Pager
	// PageResponse returns the current DomainsListOwnershipIdentifiersResponse.
	PageResponse() DomainsListOwnershipIdentifiersResponse
}

type domainsListOwnershipIdentifiersPager struct {
	client    *DomainsClient
	current   DomainsListOwnershipIdentifiersResponse
	err       error
	requester func(context.Context) (*azcore.Request, error)
	advancer  func(context.Context, DomainsListOwnershipIdentifiersResponse) (*azcore.Request, error)
}

func (p *domainsListOwnershipIdentifiersPager) Err() error {
	return p.err
}

func (p *domainsListOwnershipIdentifiersPager) NextPage(ctx context.Context) bool {
	var req *azcore.Request
	var err error
	if !reflect.ValueOf(p.current).IsZero() {
		if p.current.DomainOwnershipIdentifierCollection.NextLink == nil || len(*p.current.DomainOwnershipIdentifierCollection.NextLink) == 0 {
			return false
		}
		req, err = p.advancer(ctx, p.current)
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		p.err = err
		return false
	}
	resp, err := p.client.con.Pipeline().Do(req)
	if err != nil {
		p.err = err
		return false
	}
	if !resp.HasStatusCode(http.StatusOK) {
		p.err = p.client.listOwnershipIdentifiersHandleError(resp)
		return false
	}
	result, err := p.client.listOwnershipIdentifiersHandleResponse(resp)
	if err != nil {
		p.err = err
		return false
	}
	p.current = result
	return true
}

func (p *domainsListOwnershipIdentifiersPager) PageResponse() DomainsListOwnershipIdentifiersResponse {
	return p.current
}

type DomainsListPager interface {
	azcore.Pager
	// PageResponse returns the current DomainsListResponse.
	PageResponse() DomainsListResponse
}

type domainsListPager struct {
	client    *DomainsClient
	current   DomainsListResponse
	err       error
	requester func(context.Context) (*azcore.Request, error)
	advancer  func(context.Context, DomainsListResponse) (*azcore.Request, error)
}

func (p *domainsListPager) Err() error {
	return p.err
}

func (p *domainsListPager) NextPage(ctx context.Context) bool {
	var req *azcore.Request
	var err error
	if !reflect.ValueOf(p.current).IsZero() {
		if p.current.DomainCollection.NextLink == nil || len(*p.current.DomainCollection.NextLink) == 0 {
			return false
		}
		req, err = p.advancer(ctx, p.current)
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		p.err = err
		return false
	}
	resp, err := p.client.con.Pipeline().Do(req)
	if err != nil {
		p.err = err
		return false
	}
	if !resp.HasStatusCode(http.StatusOK) {
		p.err = p.client.listHandleError(resp)
		return false
	}
	result, err := p.client.listHandleResponse(resp)
	if err != nil {
		p.err = err
		return false
	}
	p.current = result
	return true
}

func (p *domainsListPager) PageResponse() DomainsListResponse {
	return p.current
}

type DomainsListRecommendationsPager interface {
	azcore.Pager
	// PageResponse returns the current DomainsListRecommendationsResponse.
	PageResponse() DomainsListRecommendationsResponse
}

type domainsListRecommendationsPager struct {
	client    *DomainsClient
	current   DomainsListRecommendationsResponse
	err       error
	requester func(context.Context) (*azcore.Request, error)
	advancer  func(context.Context, DomainsListRecommendationsResponse) (*azcore.Request, error)
}

func (p *domainsListRecommendationsPager) Err() error {
	return p.err
}

func (p *domainsListRecommendationsPager) NextPage(ctx context.Context) bool {
	var req *azcore.Request
	var err error
	if !reflect.ValueOf(p.current).IsZero() {
		if p.current.NameIdentifierCollection.NextLink == nil || len(*p.current.NameIdentifierCollection.NextLink) == 0 {
			return false
		}
		req, err = p.advancer(ctx, p.current)
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		p.err = err
		return false
	}
	resp, err := p.client.con.Pipeline().Do(req)
	if err != nil {
		p.err = err
		return false
	}
	if !resp.HasStatusCode(http.StatusOK) {
		p.err = p.client.listRecommendationsHandleError(resp)
		return false
	}
	result, err := p.client.listRecommendationsHandleResponse(resp)
	if err != nil {
		p.err = err
		return false
	}
	p.current = result
	return true
}

func (p *domainsListRecommendationsPager) PageResponse() DomainsListRecommendationsResponse {
	return p.current
}

type KubeEnvironmentsListByResourceGroupPager interface {
	azcore.Pager
	// PageResponse returns the current KubeEnvironmentsListByResourceGroupResponse.
	PageResponse() KubeEnvironmentsListByResourceGroupResponse
}

type kubeEnvironmentsListByResourceGroupPager struct {
	client    *KubeEnvironmentsClient
	current   KubeEnvironmentsListByResourceGroupResponse
	err       error
	requester func(context.Context) (*azcore.Request, error)
	advancer  func(context.Context, KubeEnvironmentsListByResourceGroupResponse) (*azcore.Request, error)
}

func (p *kubeEnvironmentsListByResourceGroupPager) Err() error {
	return p.err
}

func (p *kubeEnvironmentsListByResourceGroupPager) NextPage(ctx context.Context) bool {
	var req *azcore.Request
	var err error
	if !reflect.ValueOf(p.current).IsZero() {
		if p.current.KubeEnvironmentCollection.NextLink == nil || len(*p.current.KubeEnvironmentCollection.NextLink) == 0 {
			return false
		}
		req, err = p.advancer(ctx, p.current)
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		p.err = err
		return false
	}
	resp, err := p.client.con.Pipeline().Do(req)
	if err != nil {
		p.err = err
		return false
	}
	if !resp.HasStatusCode(http.StatusOK) {
		p.err = p.client.listByResourceGroupHandleError(resp)
		return false
	}
	result, err := p.client.listByResourceGroupHandleResponse(resp)
	if err != nil {
		p.err = err
		return false
	}
	p.current = result
	return true
}

func (p *kubeEnvironmentsListByResourceGroupPager) PageResponse() KubeEnvironmentsListByResourceGroupResponse {
	return p.current
}

type KubeEnvironmentsListBySubscriptionPager interface {
	azcore.Pager
	// PageResponse returns the current KubeEnvironmentsListBySubscriptionResponse.
	PageResponse() KubeEnvironmentsListBySubscriptionResponse
}

type kubeEnvironmentsListBySubscriptionPager struct {
	client    *KubeEnvironmentsClient
	current   KubeEnvironmentsListBySubscriptionResponse
	err       error
	requester func(context.Context) (*azcore.Request, error)
	advancer  func(context.Context, KubeEnvironmentsListBySubscriptionResponse) (*azcore.Request, error)
}

func (p *kubeEnvironmentsListBySubscriptionPager) Err() error {
	return p.err
}

func (p *kubeEnvironmentsListBySubscriptionPager) NextPage(ctx context.Context) bool {
	var req *azcore.Request
	var err error
	if !reflect.ValueOf(p.current).IsZero() {
		if p.current.KubeEnvironmentCollection.NextLink == nil || len(*p.current.KubeEnvironmentCollection.NextLink) == 0 {
			return false
		}
		req, err = p.advancer(ctx, p.current)
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		p.err = err
		return false
	}
	resp, err := p.client.con.Pipeline().Do(req)
	if err != nil {
		p.err = err
		return false
	}
	if !resp.HasStatusCode(http.StatusOK) {
		p.err = p.client.listBySubscriptionHandleError(resp)
		return false
	}
	result, err := p.client.listBySubscriptionHandleResponse(resp)
	if err != nil {
		p.err = err
		return false
	}
	p.current = result
	return true
}

func (p *kubeEnvironmentsListBySubscriptionPager) PageResponse() KubeEnvironmentsListBySubscriptionResponse {
	return p.current
}

type ProviderGetAvailableStacksOnPremPager interface {
	azcore.Pager
	// PageResponse returns the current ProviderGetAvailableStacksOnPremResponse.
	PageResponse() ProviderGetAvailableStacksOnPremResponse
}

type providerGetAvailableStacksOnPremPager struct {
	client    *ProviderClient
	current   ProviderGetAvailableStacksOnPremResponse
	err       error
	requester func(context.Context) (*azcore.Request, error)
	advancer  func(context.Context, ProviderGetAvailableStacksOnPremResponse) (*azcore.Request, error)
}

func (p *providerGetAvailableStacksOnPremPager) Err() error {
	return p.err
}

func (p *providerGetAvailableStacksOnPremPager) NextPage(ctx context.Context) bool {
	var req *azcore.Request
	var err error
	if !reflect.ValueOf(p.current).IsZero() {
		if p.current.ApplicationStackCollection.NextLink == nil || len(*p.current.ApplicationStackCollection.NextLink) == 0 {
			return false
		}
		req, err = p.advancer(ctx, p.current)
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		p.err = err
		return false
	}
	resp, err := p.client.con.Pipeline().Do(req)
	if err != nil {
		p.err = err
		return false
	}
	if !resp.HasStatusCode(http.StatusOK) {
		p.err = p.client.getAvailableStacksOnPremHandleError(resp)
		return false
	}
	result, err := p.client.getAvailableStacksOnPremHandleResponse(resp)
	if err != nil {
		p.err = err
		return false
	}
	p.current = result
	return true
}

func (p *providerGetAvailableStacksOnPremPager) PageResponse() ProviderGetAvailableStacksOnPremResponse {
	return p.current
}

type ProviderGetAvailableStacksPager interface {
	azcore.Pager
	// PageResponse returns the current ProviderGetAvailableStacksResponse.
	PageResponse() ProviderGetAvailableStacksResponse
}

type providerGetAvailableStacksPager struct {
	client    *ProviderClient
	current   ProviderGetAvailableStacksResponse
	err       error
	requester func(context.Context) (*azcore.Request, error)
	advancer  func(context.Context, ProviderGetAvailableStacksResponse) (*azcore.Request, error)
}

func (p *providerGetAvailableStacksPager) Err() error {
	return p.err
}

func (p *providerGetAvailableStacksPager) NextPage(ctx context.Context) bool {
	var req *azcore.Request
	var err error
	if !reflect.ValueOf(p.current).IsZero() {
		if p.current.ApplicationStackCollection.NextLink == nil || len(*p.current.ApplicationStackCollection.NextLink) == 0 {
			return false
		}
		req, err = p.advancer(ctx, p.current)
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		p.err = err
		return false
	}
	resp, err := p.client.con.Pipeline().Do(req)
	if err != nil {
		p.err = err
		return false
	}
	if !resp.HasStatusCode(http.StatusOK) {
		p.err = p.client.getAvailableStacksHandleError(resp)
		return false
	}
	result, err := p.client.getAvailableStacksHandleResponse(resp)
	if err != nil {
		p.err = err
		return false
	}
	p.current = result
	return true
}

func (p *providerGetAvailableStacksPager) PageResponse() ProviderGetAvailableStacksResponse {
	return p.current
}

type ProviderGetFunctionAppStacksForLocationPager interface {
	azcore.Pager
	// PageResponse returns the current ProviderGetFunctionAppStacksForLocationResponse.
	PageResponse() ProviderGetFunctionAppStacksForLocationResponse
}

type providerGetFunctionAppStacksForLocationPager struct {
	client    *ProviderClient
	current   ProviderGetFunctionAppStacksForLocationResponse
	err       error
	requester func(context.Context) (*azcore.Request, error)
	advancer  func(context.Context, ProviderGetFunctionAppStacksForLocationResponse) (*azcore.Request, error)
}

func (p *providerGetFunctionAppStacksForLocationPager) Err() error {
	return p.err
}

func (p *providerGetFunctionAppStacksForLocationPager) NextPage(ctx context.Context) bool {
	var req *azcore.Request
	var err error
	if !reflect.ValueOf(p.current).IsZero() {
		if p.current.FunctionAppStackCollection.NextLink == nil || len(*p.current.FunctionAppStackCollection.NextLink) == 0 {
			return false
		}
		req, err = p.advancer(ctx, p.current)
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		p.err = err
		return false
	}
	resp, err := p.client.con.Pipeline().Do(req)
	if err != nil {
		p.err = err
		return false
	}
	if !resp.HasStatusCode(http.StatusOK) {
		p.err = p.client.getFunctionAppStacksForLocationHandleError(resp)
		return false
	}
	result, err := p.client.getFunctionAppStacksForLocationHandleResponse(resp)
	if err != nil {
		p.err = err
		return false
	}
	p.current = result
	return true
}

func (p *providerGetFunctionAppStacksForLocationPager) PageResponse() ProviderGetFunctionAppStacksForLocationResponse {
	return p.current
}

type ProviderGetFunctionAppStacksPager interface {
	azcore.Pager
	// PageResponse returns the current ProviderGetFunctionAppStacksResponse.
	PageResponse() ProviderGetFunctionAppStacksResponse
}

type providerGetFunctionAppStacksPager struct {
	client    *ProviderClient
	current   ProviderGetFunctionAppStacksResponse
	err       error
	requester func(context.Context) (*azcore.Request, error)
	advancer  func(context.Context, ProviderGetFunctionAppStacksResponse) (*azcore.Request, error)
}

func (p *providerGetFunctionAppStacksPager) Err() error {
	return p.err
}

func (p *providerGetFunctionAppStacksPager) NextPage(ctx context.Context) bool {
	var req *azcore.Request
	var err error
	if !reflect.ValueOf(p.current).IsZero() {
		if p.current.FunctionAppStackCollection.NextLink == nil || len(*p.current.FunctionAppStackCollection.NextLink) == 0 {
			return false
		}
		req, err = p.advancer(ctx, p.current)
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		p.err = err
		return false
	}
	resp, err := p.client.con.Pipeline().Do(req)
	if err != nil {
		p.err = err
		return false
	}
	if !resp.HasStatusCode(http.StatusOK) {
		p.err = p.client.getFunctionAppStacksHandleError(resp)
		return false
	}
	result, err := p.client.getFunctionAppStacksHandleResponse(resp)
	if err != nil {
		p.err = err
		return false
	}
	p.current = result
	return true
}

func (p *providerGetFunctionAppStacksPager) PageResponse() ProviderGetFunctionAppStacksResponse {
	return p.current
}

type ProviderGetWebAppStacksForLocationPager interface {
	azcore.Pager
	// PageResponse returns the current ProviderGetWebAppStacksForLocationResponse.
	PageResponse() ProviderGetWebAppStacksForLocationResponse
}

type providerGetWebAppStacksForLocationPager struct {
	client    *ProviderClient
	current   ProviderGetWebAppStacksForLocationResponse
	err       error
	requester func(context.Context) (*azcore.Request, error)
	advancer  func(context.Context, ProviderGetWebAppStacksForLocationResponse) (*azcore.Request, error)
}

func (p *providerGetWebAppStacksForLocationPager) Err() error {
	return p.err
}

func (p *providerGetWebAppStacksForLocationPager) NextPage(ctx context.Context) bool {
	var req *azcore.Request
	var err error
	if !reflect.ValueOf(p.current).IsZero() {
		if p.current.WebAppStackCollection.NextLink == nil || len(*p.current.WebAppStackCollection.NextLink) == 0 {
			return false
		}
		req, err = p.advancer(ctx, p.current)
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		p.err = err
		return false
	}
	resp, err := p.client.con.Pipeline().Do(req)
	if err != nil {
		p.err = err
		return false
	}
	if !resp.HasStatusCode(http.StatusOK) {
		p.err = p.client.getWebAppStacksForLocationHandleError(resp)
		return false
	}
	result, err := p.client.getWebAppStacksForLocationHandleResponse(resp)
	if err != nil {
		p.err = err
		return false
	}
	p.current = result
	return true
}

func (p *providerGetWebAppStacksForLocationPager) PageResponse() ProviderGetWebAppStacksForLocationResponse {
	return p.current
}

type ProviderGetWebAppStacksPager interface {
	azcore.Pager
	// PageResponse returns the current ProviderGetWebAppStacksResponse.
	PageResponse() ProviderGetWebAppStacksResponse
}

type providerGetWebAppStacksPager struct {
	client    *ProviderClient
	current   ProviderGetWebAppStacksResponse
	err       error
	requester func(context.Context) (*azcore.Request, error)
	advancer  func(context.Context, ProviderGetWebAppStacksResponse) (*azcore.Request, error)
}

func (p *providerGetWebAppStacksPager) Err() error {
	return p.err
}

func (p *providerGetWebAppStacksPager) NextPage(ctx context.Context) bool {
	var req *azcore.Request
	var err error
	if !reflect.ValueOf(p.current).IsZero() {
		if p.current.WebAppStackCollection.NextLink == nil || len(*p.current.WebAppStackCollection.NextLink) == 0 {
			return false
		}
		req, err = p.advancer(ctx, p.current)
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		p.err = err
		return false
	}
	resp, err := p.client.con.Pipeline().Do(req)
	if err != nil {
		p.err = err
		return false
	}
	if !resp.HasStatusCode(http.StatusOK) {
		p.err = p.client.getWebAppStacksHandleError(resp)
		return false
	}
	result, err := p.client.getWebAppStacksHandleResponse(resp)
	if err != nil {
		p.err = err
		return false
	}
	p.current = result
	return true
}

func (p *providerGetWebAppStacksPager) PageResponse() ProviderGetWebAppStacksResponse {
	return p.current
}

type ProviderListOperationsPager interface {
	azcore.Pager
	// PageResponse returns the current ProviderListOperationsResponse.
	PageResponse() ProviderListOperationsResponse
}

type providerListOperationsPager struct {
	client    *ProviderClient
	current   ProviderListOperationsResponse
	err       error
	requester func(context.Context) (*azcore.Request, error)
	advancer  func(context.Context, ProviderListOperationsResponse) (*azcore.Request, error)
}

func (p *providerListOperationsPager) Err() error {
	return p.err
}

func (p *providerListOperationsPager) NextPage(ctx context.Context) bool {
	var req *azcore.Request
	var err error
	if !reflect.ValueOf(p.current).IsZero() {
		if p.current.CsmOperationCollection.NextLink == nil || len(*p.current.CsmOperationCollection.NextLink) == 0 {
			return false
		}
		req, err = p.advancer(ctx, p.current)
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		p.err = err
		return false
	}
	resp, err := p.client.con.Pipeline().Do(req)
	if err != nil {
		p.err = err
		return false
	}
	if !resp.HasStatusCode(http.StatusOK) {
		p.err = p.client.listOperationsHandleError(resp)
		return false
	}
	result, err := p.client.listOperationsHandleResponse(resp)
	if err != nil {
		p.err = err
		return false
	}
	p.current = result
	return true
}

func (p *providerListOperationsPager) PageResponse() ProviderListOperationsResponse {
	return p.current
}

type RecommendationsListHistoryForHostingEnvironmentPager interface {
	azcore.Pager
	// PageResponse returns the current RecommendationsListHistoryForHostingEnvironmentResponse.
	PageResponse() RecommendationsListHistoryForHostingEnvironmentResponse
}

type recommendationsListHistoryForHostingEnvironmentPager struct {
	client    *RecommendationsClient
	current   RecommendationsListHistoryForHostingEnvironmentResponse
	err       error
	requester func(context.Context) (*azcore.Request, error)
	advancer  func(context.Context, RecommendationsListHistoryForHostingEnvironmentResponse) (*azcore.Request, error)
}

func (p *recommendationsListHistoryForHostingEnvironmentPager) Err() error {
	return p.err
}

func (p *recommendationsListHistoryForHostingEnvironmentPager) NextPage(ctx context.Context) bool {
	var req *azcore.Request
	var err error
	if !reflect.ValueOf(p.current).IsZero() {
		if p.current.RecommendationCollection.NextLink == nil || len(*p.current.RecommendationCollection.NextLink) == 0 {
			return false
		}
		req, err = p.advancer(ctx, p.current)
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		p.err = err
		return false
	}
	resp, err := p.client.con.Pipeline().Do(req)
	if err != nil {
		p.err = err
		return false
	}
	if !resp.HasStatusCode(http.StatusOK) {
		p.err = p.client.listHistoryForHostingEnvironmentHandleError(resp)
		return false
	}
	result, err := p.client.listHistoryForHostingEnvironmentHandleResponse(resp)
	if err != nil {
		p.err = err
		return false
	}
	p.current = result
	return true
}

func (p *recommendationsListHistoryForHostingEnvironmentPager) PageResponse() RecommendationsListHistoryForHostingEnvironmentResponse {
	return p.current
}

type RecommendationsListHistoryForWebAppPager interface {
	azcore.Pager
	// PageResponse returns the current RecommendationsListHistoryForWebAppResponse.
	PageResponse() RecommendationsListHistoryForWebAppResponse
}

type recommendationsListHistoryForWebAppPager struct {
	client    *RecommendationsClient
	current   RecommendationsListHistoryForWebAppResponse
	err       error
	requester func(context.Context) (*azcore.Request, error)
	advancer  func(context.Context, RecommendationsListHistoryForWebAppResponse) (*azcore.Request, error)
}

func (p *recommendationsListHistoryForWebAppPager) Err() error {
	return p.err
}

func (p *recommendationsListHistoryForWebAppPager) NextPage(ctx context.Context) bool {
	var req *azcore.Request
	var err error
	if !reflect.ValueOf(p.current).IsZero() {
		if p.current.RecommendationCollection.NextLink == nil || len(*p.current.RecommendationCollection.NextLink) == 0 {
			return false
		}
		req, err = p.advancer(ctx, p.current)
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		p.err = err
		return false
	}
	resp, err := p.client.con.Pipeline().Do(req)
	if err != nil {
		p.err = err
		return false
	}
	if !resp.HasStatusCode(http.StatusOK) {
		p.err = p.client.listHistoryForWebAppHandleError(resp)
		return false
	}
	result, err := p.client.listHistoryForWebAppHandleResponse(resp)
	if err != nil {
		p.err = err
		return false
	}
	p.current = result
	return true
}

func (p *recommendationsListHistoryForWebAppPager) PageResponse() RecommendationsListHistoryForWebAppResponse {
	return p.current
}

type RecommendationsListPager interface {
	azcore.Pager
	// PageResponse returns the current RecommendationsListResponse.
	PageResponse() RecommendationsListResponse
}

type recommendationsListPager struct {
	client    *RecommendationsClient
	current   RecommendationsListResponse
	err       error
	requester func(context.Context) (*azcore.Request, error)
	advancer  func(context.Context, RecommendationsListResponse) (*azcore.Request, error)
}

func (p *recommendationsListPager) Err() error {
	return p.err
}

func (p *recommendationsListPager) NextPage(ctx context.Context) bool {
	var req *azcore.Request
	var err error
	if !reflect.ValueOf(p.current).IsZero() {
		if p.current.RecommendationCollection.NextLink == nil || len(*p.current.RecommendationCollection.NextLink) == 0 {
			return false
		}
		req, err = p.advancer(ctx, p.current)
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		p.err = err
		return false
	}
	resp, err := p.client.con.Pipeline().Do(req)
	if err != nil {
		p.err = err
		return false
	}
	if !resp.HasStatusCode(http.StatusOK) {
		p.err = p.client.listHandleError(resp)
		return false
	}
	result, err := p.client.listHandleResponse(resp)
	if err != nil {
		p.err = err
		return false
	}
	p.current = result
	return true
}

func (p *recommendationsListPager) PageResponse() RecommendationsListResponse {
	return p.current
}

type RecommendationsListRecommendedRulesForHostingEnvironmentPager interface {
	azcore.Pager
	// PageResponse returns the current RecommendationsListRecommendedRulesForHostingEnvironmentResponse.
	PageResponse() RecommendationsListRecommendedRulesForHostingEnvironmentResponse
}

type recommendationsListRecommendedRulesForHostingEnvironmentPager struct {
	client    *RecommendationsClient
	current   RecommendationsListRecommendedRulesForHostingEnvironmentResponse
	err       error
	requester func(context.Context) (*azcore.Request, error)
	advancer  func(context.Context, RecommendationsListRecommendedRulesForHostingEnvironmentResponse) (*azcore.Request, error)
}

func (p *recommendationsListRecommendedRulesForHostingEnvironmentPager) Err() error {
	return p.err
}

func (p *recommendationsListRecommendedRulesForHostingEnvironmentPager) NextPage(ctx context.Context) bool {
	var req *azcore.Request
	var err error
	if !reflect.ValueOf(p.current).IsZero() {
		if p.current.RecommendationCollection.NextLink == nil || len(*p.current.RecommendationCollection.NextLink) == 0 {
			return false
		}
		req, err = p.advancer(ctx, p.current)
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		p.err = err
		return false
	}
	resp, err := p.client.con.Pipeline().Do(req)
	if err != nil {
		p.err = err
		return false
	}
	if !resp.HasStatusCode(http.StatusOK) {
		p.err = p.client.listRecommendedRulesForHostingEnvironmentHandleError(resp)
		return false
	}
	result, err := p.client.listRecommendedRulesForHostingEnvironmentHandleResponse(resp)
	if err != nil {
		p.err = err
		return false
	}
	p.current = result
	return true
}

func (p *recommendationsListRecommendedRulesForHostingEnvironmentPager) PageResponse() RecommendationsListRecommendedRulesForHostingEnvironmentResponse {
	return p.current
}

type RecommendationsListRecommendedRulesForWebAppPager interface {
	azcore.Pager
	// PageResponse returns the current RecommendationsListRecommendedRulesForWebAppResponse.
	PageResponse() RecommendationsListRecommendedRulesForWebAppResponse
}

type recommendationsListRecommendedRulesForWebAppPager struct {
	client    *RecommendationsClient
	current   RecommendationsListRecommendedRulesForWebAppResponse
	err       error
	requester func(context.Context) (*azcore.Request, error)
	advancer  func(context.Context, RecommendationsListRecommendedRulesForWebAppResponse) (*azcore.Request, error)
}

func (p *recommendationsListRecommendedRulesForWebAppPager) Err() error {
	return p.err
}

func (p *recommendationsListRecommendedRulesForWebAppPager) NextPage(ctx context.Context) bool {
	var req *azcore.Request
	var err error
	if !reflect.ValueOf(p.current).IsZero() {
		if p.current.RecommendationCollection.NextLink == nil || len(*p.current.RecommendationCollection.NextLink) == 0 {
			return false
		}
		req, err = p.advancer(ctx, p.current)
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		p.err = err
		return false
	}
	resp, err := p.client.con.Pipeline().Do(req)
	if err != nil {
		p.err = err
		return false
	}
	if !resp.HasStatusCode(http.StatusOK) {
		p.err = p.client.listRecommendedRulesForWebAppHandleError(resp)
		return false
	}
	result, err := p.client.listRecommendedRulesForWebAppHandleResponse(resp)
	if err != nil {
		p.err = err
		return false
	}
	p.current = result
	return true
}

func (p *recommendationsListRecommendedRulesForWebAppPager) PageResponse() RecommendationsListRecommendedRulesForWebAppResponse {
	return p.current
}

type ResourceHealthMetadataListByResourceGroupPager interface {
	azcore.Pager
	// PageResponse returns the current ResourceHealthMetadataListByResourceGroupResponse.
	PageResponse() ResourceHealthMetadataListByResourceGroupResponse
}

type resourceHealthMetadataListByResourceGroupPager struct {
	client    *ResourceHealthMetadataClient
	current   ResourceHealthMetadataListByResourceGroupResponse
	err       error
	requester func(context.Context) (*azcore.Request, error)
	advancer  func(context.Context, ResourceHealthMetadataListByResourceGroupResponse) (*azcore.Request, error)
}

func (p *resourceHealthMetadataListByResourceGroupPager) Err() error {
	return p.err
}

func (p *resourceHealthMetadataListByResourceGroupPager) NextPage(ctx context.Context) bool {
	var req *azcore.Request
	var err error
	if !reflect.ValueOf(p.current).IsZero() {
		if p.current.ResourceHealthMetadataCollection.NextLink == nil || len(*p.current.ResourceHealthMetadataCollection.NextLink) == 0 {
			return false
		}
		req, err = p.advancer(ctx, p.current)
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		p.err = err
		return false
	}
	resp, err := p.client.con.Pipeline().Do(req)
	if err != nil {
		p.err = err
		return false
	}
	if !resp.HasStatusCode(http.StatusOK) {
		p.err = p.client.listByResourceGroupHandleError(resp)
		return false
	}
	result, err := p.client.listByResourceGroupHandleResponse(resp)
	if err != nil {
		p.err = err
		return false
	}
	p.current = result
	return true
}

func (p *resourceHealthMetadataListByResourceGroupPager) PageResponse() ResourceHealthMetadataListByResourceGroupResponse {
	return p.current
}

type ResourceHealthMetadataListBySitePager interface {
	azcore.Pager
	// PageResponse returns the current ResourceHealthMetadataListBySiteResponse.
	PageResponse() ResourceHealthMetadataListBySiteResponse
}

type resourceHealthMetadataListBySitePager struct {
	client    *ResourceHealthMetadataClient
	current   ResourceHealthMetadataListBySiteResponse
	err       error
	requester func(context.Context) (*azcore.Request, error)
	advancer  func(context.Context, ResourceHealthMetadataListBySiteResponse) (*azcore.Request, error)
}

func (p *resourceHealthMetadataListBySitePager) Err() error {
	return p.err
}

func (p *resourceHealthMetadataListBySitePager) NextPage(ctx context.Context) bool {
	var req *azcore.Request
	var err error
	if !reflect.ValueOf(p.current).IsZero() {
		if p.current.ResourceHealthMetadataCollection.NextLink == nil || len(*p.current.ResourceHealthMetadataCollection.NextLink) == 0 {
			return false
		}
		req, err = p.advancer(ctx, p.current)
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		p.err = err
		return false
	}
	resp, err := p.client.con.Pipeline().Do(req)
	if err != nil {
		p.err = err
		return false
	}
	if !resp.HasStatusCode(http.StatusOK) {
		p.err = p.client.listBySiteHandleError(resp)
		return false
	}
	result, err := p.client.listBySiteHandleResponse(resp)
	if err != nil {
		p.err = err
		return false
	}
	p.current = result
	return true
}

func (p *resourceHealthMetadataListBySitePager) PageResponse() ResourceHealthMetadataListBySiteResponse {
	return p.current
}

type ResourceHealthMetadataListBySiteSlotPager interface {
	azcore.Pager
	// PageResponse returns the current ResourceHealthMetadataListBySiteSlotResponse.
	PageResponse() ResourceHealthMetadataListBySiteSlotResponse
}

type resourceHealthMetadataListBySiteSlotPager struct {
	client    *ResourceHealthMetadataClient
	current   ResourceHealthMetadataListBySiteSlotResponse
	err       error
	requester func(context.Context) (*azcore.Request, error)
	advancer  func(context.Context, ResourceHealthMetadataListBySiteSlotResponse) (*azcore.Request, error)
}

func (p *resourceHealthMetadataListBySiteSlotPager) Err() error {
	return p.err
}

func (p *resourceHealthMetadataListBySiteSlotPager) NextPage(ctx context.Context) bool {
	var req *azcore.Request
	var err error
	if !reflect.ValueOf(p.current).IsZero() {
		if p.current.ResourceHealthMetadataCollection.NextLink == nil || len(*p.current.ResourceHealthMetadataCollection.NextLink) == 0 {
			return false
		}
		req, err = p.advancer(ctx, p.current)
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		p.err = err
		return false
	}
	resp, err := p.client.con.Pipeline().Do(req)
	if err != nil {
		p.err = err
		return false
	}
	if !resp.HasStatusCode(http.StatusOK) {
		p.err = p.client.listBySiteSlotHandleError(resp)
		return false
	}
	result, err := p.client.listBySiteSlotHandleResponse(resp)
	if err != nil {
		p.err = err
		return false
	}
	p.current = result
	return true
}

func (p *resourceHealthMetadataListBySiteSlotPager) PageResponse() ResourceHealthMetadataListBySiteSlotResponse {
	return p.current
}

type ResourceHealthMetadataListPager interface {
	azcore.Pager
	// PageResponse returns the current ResourceHealthMetadataListResponse.
	PageResponse() ResourceHealthMetadataListResponse
}

type resourceHealthMetadataListPager struct {
	client    *ResourceHealthMetadataClient
	current   ResourceHealthMetadataListResponse
	err       error
	requester func(context.Context) (*azcore.Request, error)
	advancer  func(context.Context, ResourceHealthMetadataListResponse) (*azcore.Request, error)
}

func (p *resourceHealthMetadataListPager) Err() error {
	return p.err
}

func (p *resourceHealthMetadataListPager) NextPage(ctx context.Context) bool {
	var req *azcore.Request
	var err error
	if !reflect.ValueOf(p.current).IsZero() {
		if p.current.ResourceHealthMetadataCollection.NextLink == nil || len(*p.current.ResourceHealthMetadataCollection.NextLink) == 0 {
			return false
		}
		req, err = p.advancer(ctx, p.current)
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		p.err = err
		return false
	}
	resp, err := p.client.con.Pipeline().Do(req)
	if err != nil {
		p.err = err
		return false
	}
	if !resp.HasStatusCode(http.StatusOK) {
		p.err = p.client.listHandleError(resp)
		return false
	}
	result, err := p.client.listHandleResponse(resp)
	if err != nil {
		p.err = err
		return false
	}
	p.current = result
	return true
}

func (p *resourceHealthMetadataListPager) PageResponse() ResourceHealthMetadataListResponse {
	return p.current
}

type StaticSitesGetPrivateEndpointConnectionListPager interface {
	azcore.Pager
	// PageResponse returns the current StaticSitesGetPrivateEndpointConnectionListResponse.
	PageResponse() StaticSitesGetPrivateEndpointConnectionListResponse
}

type staticSitesGetPrivateEndpointConnectionListPager struct {
	client    *StaticSitesClient
	current   StaticSitesGetPrivateEndpointConnectionListResponse
	err       error
	requester func(context.Context) (*azcore.Request, error)
	advancer  func(context.Context, StaticSitesGetPrivateEndpointConnectionListResponse) (*azcore.Request, error)
}

func (p *staticSitesGetPrivateEndpointConnectionListPager) Err() error {
	return p.err
}

func (p *staticSitesGetPrivateEndpointConnectionListPager) NextPage(ctx context.Context) bool {
	var req *azcore.Request
	var err error
	if !reflect.ValueOf(p.current).IsZero() {
		if p.current.PrivateEndpointConnectionCollection.NextLink == nil || len(*p.current.PrivateEndpointConnectionCollection.NextLink) == 0 {
			return false
		}
		req, err = p.advancer(ctx, p.current)
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		p.err = err
		return false
	}
	resp, err := p.client.con.Pipeline().Do(req)
	if err != nil {
		p.err = err
		return false
	}
	if !resp.HasStatusCode(http.StatusOK) {
		p.err = p.client.getPrivateEndpointConnectionListHandleError(resp)
		return false
	}
	result, err := p.client.getPrivateEndpointConnectionListHandleResponse(resp)
	if err != nil {
		p.err = err
		return false
	}
	p.current = result
	return true
}

func (p *staticSitesGetPrivateEndpointConnectionListPager) PageResponse() StaticSitesGetPrivateEndpointConnectionListResponse {
	return p.current
}

type StaticSitesGetStaticSiteBuildsPager interface {
	azcore.Pager
	// PageResponse returns the current StaticSitesGetStaticSiteBuildsResponse.
	PageResponse() StaticSitesGetStaticSiteBuildsResponse
}

type staticSitesGetStaticSiteBuildsPager struct {
	client    *StaticSitesClient
	current   StaticSitesGetStaticSiteBuildsResponse
	err       error
	requester func(context.Context) (*azcore.Request, error)
	advancer  func(context.Context, StaticSitesGetStaticSiteBuildsResponse) (*azcore.Request, error)
}

func (p *staticSitesGetStaticSiteBuildsPager) Err() error {
	return p.err
}

func (p *staticSitesGetStaticSiteBuildsPager) NextPage(ctx context.Context) bool {
	var req *azcore.Request
	var err error
	if !reflect.ValueOf(p.current).IsZero() {
		if p.current.StaticSiteBuildCollection.NextLink == nil || len(*p.current.StaticSiteBuildCollection.NextLink) == 0 {
			return false
		}
		req, err = p.advancer(ctx, p.current)
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		p.err = err
		return false
	}
	resp, err := p.client.con.Pipeline().Do(req)
	if err != nil {
		p.err = err
		return false
	}
	if !resp.HasStatusCode(http.StatusOK) {
		p.err = p.client.getStaticSiteBuildsHandleError(resp)
		return false
	}
	result, err := p.client.getStaticSiteBuildsHandleResponse(resp)
	if err != nil {
		p.err = err
		return false
	}
	p.current = result
	return true
}

func (p *staticSitesGetStaticSiteBuildsPager) PageResponse() StaticSitesGetStaticSiteBuildsResponse {
	return p.current
}

type StaticSitesGetStaticSitesByResourceGroupPager interface {
	azcore.Pager
	// PageResponse returns the current StaticSitesGetStaticSitesByResourceGroupResponse.
	PageResponse() StaticSitesGetStaticSitesByResourceGroupResponse
}

type staticSitesGetStaticSitesByResourceGroupPager struct {
	client    *StaticSitesClient
	current   StaticSitesGetStaticSitesByResourceGroupResponse
	err       error
	requester func(context.Context) (*azcore.Request, error)
	advancer  func(context.Context, StaticSitesGetStaticSitesByResourceGroupResponse) (*azcore.Request, error)
}

func (p *staticSitesGetStaticSitesByResourceGroupPager) Err() error {
	return p.err
}

func (p *staticSitesGetStaticSitesByResourceGroupPager) NextPage(ctx context.Context) bool {
	var req *azcore.Request
	var err error
	if !reflect.ValueOf(p.current).IsZero() {
		if p.current.StaticSiteCollection.NextLink == nil || len(*p.current.StaticSiteCollection.NextLink) == 0 {
			return false
		}
		req, err = p.advancer(ctx, p.current)
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		p.err = err
		return false
	}
	resp, err := p.client.con.Pipeline().Do(req)
	if err != nil {
		p.err = err
		return false
	}
	if !resp.HasStatusCode(http.StatusOK) {
		p.err = p.client.getStaticSitesByResourceGroupHandleError(resp)
		return false
	}
	result, err := p.client.getStaticSitesByResourceGroupHandleResponse(resp)
	if err != nil {
		p.err = err
		return false
	}
	p.current = result
	return true
}

func (p *staticSitesGetStaticSitesByResourceGroupPager) PageResponse() StaticSitesGetStaticSitesByResourceGroupResponse {
	return p.current
}

type StaticSitesGetUserProvidedFunctionAppsForStaticSiteBuildPager interface {
	azcore.Pager
	// PageResponse returns the current StaticSitesGetUserProvidedFunctionAppsForStaticSiteBuildResponse.
	PageResponse() StaticSitesGetUserProvidedFunctionAppsForStaticSiteBuildResponse
}

type staticSitesGetUserProvidedFunctionAppsForStaticSiteBuildPager struct {
	client    *StaticSitesClient
	current   StaticSitesGetUserProvidedFunctionAppsForStaticSiteBuildResponse
	err       error
	requester func(context.Context) (*azcore.Request, error)
	advancer  func(context.Context, StaticSitesGetUserProvidedFunctionAppsForStaticSiteBuildResponse) (*azcore.Request, error)
}

func (p *staticSitesGetUserProvidedFunctionAppsForStaticSiteBuildPager) Err() error {
	return p.err
}

func (p *staticSitesGetUserProvidedFunctionAppsForStaticSiteBuildPager) NextPage(ctx context.Context) bool {
	var req *azcore.Request
	var err error
	if !reflect.ValueOf(p.current).IsZero() {
		if p.current.StaticSiteUserProvidedFunctionAppsCollection.NextLink == nil || len(*p.current.StaticSiteUserProvidedFunctionAppsCollection.NextLink) == 0 {
			return false
		}
		req, err = p.advancer(ctx, p.current)
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		p.err = err
		return false
	}
	resp, err := p.client.con.Pipeline().Do(req)
	if err != nil {
		p.err = err
		return false
	}
	if !resp.HasStatusCode(http.StatusOK) {
		p.err = p.client.getUserProvidedFunctionAppsForStaticSiteBuildHandleError(resp)
		return false
	}
	result, err := p.client.getUserProvidedFunctionAppsForStaticSiteBuildHandleResponse(resp)
	if err != nil {
		p.err = err
		return false
	}
	p.current = result
	return true
}

func (p *staticSitesGetUserProvidedFunctionAppsForStaticSiteBuildPager) PageResponse() StaticSitesGetUserProvidedFunctionAppsForStaticSiteBuildResponse {
	return p.current
}

type StaticSitesGetUserProvidedFunctionAppsForStaticSitePager interface {
	azcore.Pager
	// PageResponse returns the current StaticSitesGetUserProvidedFunctionAppsForStaticSiteResponse.
	PageResponse() StaticSitesGetUserProvidedFunctionAppsForStaticSiteResponse
}

type staticSitesGetUserProvidedFunctionAppsForStaticSitePager struct {
	client    *StaticSitesClient
	current   StaticSitesGetUserProvidedFunctionAppsForStaticSiteResponse
	err       error
	requester func(context.Context) (*azcore.Request, error)
	advancer  func(context.Context, StaticSitesGetUserProvidedFunctionAppsForStaticSiteResponse) (*azcore.Request, error)
}

func (p *staticSitesGetUserProvidedFunctionAppsForStaticSitePager) Err() error {
	return p.err
}

func (p *staticSitesGetUserProvidedFunctionAppsForStaticSitePager) NextPage(ctx context.Context) bool {
	var req *azcore.Request
	var err error
	if !reflect.ValueOf(p.current).IsZero() {
		if p.current.StaticSiteUserProvidedFunctionAppsCollection.NextLink == nil || len(*p.current.StaticSiteUserProvidedFunctionAppsCollection.NextLink) == 0 {
			return false
		}
		req, err = p.advancer(ctx, p.current)
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		p.err = err
		return false
	}
	resp, err := p.client.con.Pipeline().Do(req)
	if err != nil {
		p.err = err
		return false
	}
	if !resp.HasStatusCode(http.StatusOK) {
		p.err = p.client.getUserProvidedFunctionAppsForStaticSiteHandleError(resp)
		return false
	}
	result, err := p.client.getUserProvidedFunctionAppsForStaticSiteHandleResponse(resp)
	if err != nil {
		p.err = err
		return false
	}
	p.current = result
	return true
}

func (p *staticSitesGetUserProvidedFunctionAppsForStaticSitePager) PageResponse() StaticSitesGetUserProvidedFunctionAppsForStaticSiteResponse {
	return p.current
}

type StaticSitesListPager interface {
	azcore.Pager
	// PageResponse returns the current StaticSitesListResponse.
	PageResponse() StaticSitesListResponse
}

type staticSitesListPager struct {
	client    *StaticSitesClient
	current   StaticSitesListResponse
	err       error
	requester func(context.Context) (*azcore.Request, error)
	advancer  func(context.Context, StaticSitesListResponse) (*azcore.Request, error)
}

func (p *staticSitesListPager) Err() error {
	return p.err
}

func (p *staticSitesListPager) NextPage(ctx context.Context) bool {
	var req *azcore.Request
	var err error
	if !reflect.ValueOf(p.current).IsZero() {
		if p.current.StaticSiteCollection.NextLink == nil || len(*p.current.StaticSiteCollection.NextLink) == 0 {
			return false
		}
		req, err = p.advancer(ctx, p.current)
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		p.err = err
		return false
	}
	resp, err := p.client.con.Pipeline().Do(req)
	if err != nil {
		p.err = err
		return false
	}
	if !resp.HasStatusCode(http.StatusOK) {
		p.err = p.client.listHandleError(resp)
		return false
	}
	result, err := p.client.listHandleResponse(resp)
	if err != nil {
		p.err = err
		return false
	}
	p.current = result
	return true
}

func (p *staticSitesListPager) PageResponse() StaticSitesListResponse {
	return p.current
}

type StaticSitesListStaticSiteBuildFunctionsPager interface {
	azcore.Pager
	// PageResponse returns the current StaticSitesListStaticSiteBuildFunctionsResponse.
	PageResponse() StaticSitesListStaticSiteBuildFunctionsResponse
}

type staticSitesListStaticSiteBuildFunctionsPager struct {
	client    *StaticSitesClient
	current   StaticSitesListStaticSiteBuildFunctionsResponse
	err       error
	requester func(context.Context) (*azcore.Request, error)
	advancer  func(context.Context, StaticSitesListStaticSiteBuildFunctionsResponse) (*azcore.Request, error)
}

func (p *staticSitesListStaticSiteBuildFunctionsPager) Err() error {
	return p.err
}

func (p *staticSitesListStaticSiteBuildFunctionsPager) NextPage(ctx context.Context) bool {
	var req *azcore.Request
	var err error
	if !reflect.ValueOf(p.current).IsZero() {
		if p.current.StaticSiteFunctionOverviewCollection.NextLink == nil || len(*p.current.StaticSiteFunctionOverviewCollection.NextLink) == 0 {
			return false
		}
		req, err = p.advancer(ctx, p.current)
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		p.err = err
		return false
	}
	resp, err := p.client.con.Pipeline().Do(req)
	if err != nil {
		p.err = err
		return false
	}
	if !resp.HasStatusCode(http.StatusOK) {
		p.err = p.client.listStaticSiteBuildFunctionsHandleError(resp)
		return false
	}
	result, err := p.client.listStaticSiteBuildFunctionsHandleResponse(resp)
	if err != nil {
		p.err = err
		return false
	}
	p.current = result
	return true
}

func (p *staticSitesListStaticSiteBuildFunctionsPager) PageResponse() StaticSitesListStaticSiteBuildFunctionsResponse {
	return p.current
}

type StaticSitesListStaticSiteCustomDomainsPager interface {
	azcore.Pager
	// PageResponse returns the current StaticSitesListStaticSiteCustomDomainsResponse.
	PageResponse() StaticSitesListStaticSiteCustomDomainsResponse
}

type staticSitesListStaticSiteCustomDomainsPager struct {
	client    *StaticSitesClient
	current   StaticSitesListStaticSiteCustomDomainsResponse
	err       error
	requester func(context.Context) (*azcore.Request, error)
	advancer  func(context.Context, StaticSitesListStaticSiteCustomDomainsResponse) (*azcore.Request, error)
}

func (p *staticSitesListStaticSiteCustomDomainsPager) Err() error {
	return p.err
}

func (p *staticSitesListStaticSiteCustomDomainsPager) NextPage(ctx context.Context) bool {
	var req *azcore.Request
	var err error
	if !reflect.ValueOf(p.current).IsZero() {
		if p.current.StaticSiteCustomDomainOverviewCollection.NextLink == nil || len(*p.current.StaticSiteCustomDomainOverviewCollection.NextLink) == 0 {
			return false
		}
		req, err = p.advancer(ctx, p.current)
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		p.err = err
		return false
	}
	resp, err := p.client.con.Pipeline().Do(req)
	if err != nil {
		p.err = err
		return false
	}
	if !resp.HasStatusCode(http.StatusOK) {
		p.err = p.client.listStaticSiteCustomDomainsHandleError(resp)
		return false
	}
	result, err := p.client.listStaticSiteCustomDomainsHandleResponse(resp)
	if err != nil {
		p.err = err
		return false
	}
	p.current = result
	return true
}

func (p *staticSitesListStaticSiteCustomDomainsPager) PageResponse() StaticSitesListStaticSiteCustomDomainsResponse {
	return p.current
}

type StaticSitesListStaticSiteFunctionsPager interface {
	azcore.Pager
	// PageResponse returns the current StaticSitesListStaticSiteFunctionsResponse.
	PageResponse() StaticSitesListStaticSiteFunctionsResponse
}

type staticSitesListStaticSiteFunctionsPager struct {
	client    *StaticSitesClient
	current   StaticSitesListStaticSiteFunctionsResponse
	err       error
	requester func(context.Context) (*azcore.Request, error)
	advancer  func(context.Context, StaticSitesListStaticSiteFunctionsResponse) (*azcore.Request, error)
}

func (p *staticSitesListStaticSiteFunctionsPager) Err() error {
	return p.err
}

func (p *staticSitesListStaticSiteFunctionsPager) NextPage(ctx context.Context) bool {
	var req *azcore.Request
	var err error
	if !reflect.ValueOf(p.current).IsZero() {
		if p.current.StaticSiteFunctionOverviewCollection.NextLink == nil || len(*p.current.StaticSiteFunctionOverviewCollection.NextLink) == 0 {
			return false
		}
		req, err = p.advancer(ctx, p.current)
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		p.err = err
		return false
	}
	resp, err := p.client.con.Pipeline().Do(req)
	if err != nil {
		p.err = err
		return false
	}
	if !resp.HasStatusCode(http.StatusOK) {
		p.err = p.client.listStaticSiteFunctionsHandleError(resp)
		return false
	}
	result, err := p.client.listStaticSiteFunctionsHandleResponse(resp)
	if err != nil {
		p.err = err
		return false
	}
	p.current = result
	return true
}

func (p *staticSitesListStaticSiteFunctionsPager) PageResponse() StaticSitesListStaticSiteFunctionsResponse {
	return p.current
}

type StaticSitesListStaticSiteUsersPager interface {
	azcore.Pager
	// PageResponse returns the current StaticSitesListStaticSiteUsersResponse.
	PageResponse() StaticSitesListStaticSiteUsersResponse
}

type staticSitesListStaticSiteUsersPager struct {
	client    *StaticSitesClient
	current   StaticSitesListStaticSiteUsersResponse
	err       error
	requester func(context.Context) (*azcore.Request, error)
	advancer  func(context.Context, StaticSitesListStaticSiteUsersResponse) (*azcore.Request, error)
}

func (p *staticSitesListStaticSiteUsersPager) Err() error {
	return p.err
}

func (p *staticSitesListStaticSiteUsersPager) NextPage(ctx context.Context) bool {
	var req *azcore.Request
	var err error
	if !reflect.ValueOf(p.current).IsZero() {
		if p.current.StaticSiteUserCollection.NextLink == nil || len(*p.current.StaticSiteUserCollection.NextLink) == 0 {
			return false
		}
		req, err = p.advancer(ctx, p.current)
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		p.err = err
		return false
	}
	resp, err := p.client.con.Pipeline().Do(req)
	if err != nil {
		p.err = err
		return false
	}
	if !resp.HasStatusCode(http.StatusOK) {
		p.err = p.client.listStaticSiteUsersHandleError(resp)
		return false
	}
	result, err := p.client.listStaticSiteUsersHandleResponse(resp)
	if err != nil {
		p.err = err
		return false
	}
	p.current = result
	return true
}

func (p *staticSitesListStaticSiteUsersPager) PageResponse() StaticSitesListStaticSiteUsersResponse {
	return p.current
}

type TopLevelDomainsListAgreementsPager interface {
	azcore.Pager
	// PageResponse returns the current TopLevelDomainsListAgreementsResponse.
	PageResponse() TopLevelDomainsListAgreementsResponse
}

type topLevelDomainsListAgreementsPager struct {
	client    *TopLevelDomainsClient
	current   TopLevelDomainsListAgreementsResponse
	err       error
	requester func(context.Context) (*azcore.Request, error)
	advancer  func(context.Context, TopLevelDomainsListAgreementsResponse) (*azcore.Request, error)
}

func (p *topLevelDomainsListAgreementsPager) Err() error {
	return p.err
}

func (p *topLevelDomainsListAgreementsPager) NextPage(ctx context.Context) bool {
	var req *azcore.Request
	var err error
	if !reflect.ValueOf(p.current).IsZero() {
		if p.current.TldLegalAgreementCollection.NextLink == nil || len(*p.current.TldLegalAgreementCollection.NextLink) == 0 {
			return false
		}
		req, err = p.advancer(ctx, p.current)
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		p.err = err
		return false
	}
	resp, err := p.client.con.Pipeline().Do(req)
	if err != nil {
		p.err = err
		return false
	}
	if !resp.HasStatusCode(http.StatusOK) {
		p.err = p.client.listAgreementsHandleError(resp)
		return false
	}
	result, err := p.client.listAgreementsHandleResponse(resp)
	if err != nil {
		p.err = err
		return false
	}
	p.current = result
	return true
}

func (p *topLevelDomainsListAgreementsPager) PageResponse() TopLevelDomainsListAgreementsResponse {
	return p.current
}

type TopLevelDomainsListPager interface {
	azcore.Pager
	// PageResponse returns the current TopLevelDomainsListResponse.
	PageResponse() TopLevelDomainsListResponse
}

type topLevelDomainsListPager struct {
	client    *TopLevelDomainsClient
	current   TopLevelDomainsListResponse
	err       error
	requester func(context.Context) (*azcore.Request, error)
	advancer  func(context.Context, TopLevelDomainsListResponse) (*azcore.Request, error)
}

func (p *topLevelDomainsListPager) Err() error {
	return p.err
}

func (p *topLevelDomainsListPager) NextPage(ctx context.Context) bool {
	var req *azcore.Request
	var err error
	if !reflect.ValueOf(p.current).IsZero() {
		if p.current.TopLevelDomainCollection.NextLink == nil || len(*p.current.TopLevelDomainCollection.NextLink) == 0 {
			return false
		}
		req, err = p.advancer(ctx, p.current)
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		p.err = err
		return false
	}
	resp, err := p.client.con.Pipeline().Do(req)
	if err != nil {
		p.err = err
		return false
	}
	if !resp.HasStatusCode(http.StatusOK) {
		p.err = p.client.listHandleError(resp)
		return false
	}
	result, err := p.client.listHandleResponse(resp)
	if err != nil {
		p.err = err
		return false
	}
	p.current = result
	return true
}

func (p *topLevelDomainsListPager) PageResponse() TopLevelDomainsListResponse {
	return p.current
}

type WebAppsGetAppSettingsKeyVaultReferencesPager interface {
	azcore.Pager
	// PageResponse returns the current WebAppsGetAppSettingsKeyVaultReferencesResponse.
	PageResponse() WebAppsGetAppSettingsKeyVaultReferencesResponse
}

type webAppsGetAppSettingsKeyVaultReferencesPager struct {
	client    *WebAppsClient
	current   WebAppsGetAppSettingsKeyVaultReferencesResponse
	err       error
	requester func(context.Context) (*azcore.Request, error)
	advancer  func(context.Context, WebAppsGetAppSettingsKeyVaultReferencesResponse) (*azcore.Request, error)
}

func (p *webAppsGetAppSettingsKeyVaultReferencesPager) Err() error {
	return p.err
}

func (p *webAppsGetAppSettingsKeyVaultReferencesPager) NextPage(ctx context.Context) bool {
	var req *azcore.Request
	var err error
	if !reflect.ValueOf(p.current).IsZero() {
		if p.current.APIKVReferenceCollection.NextLink == nil || len(*p.current.APIKVReferenceCollection.NextLink) == 0 {
			return false
		}
		req, err = p.advancer(ctx, p.current)
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		p.err = err
		return false
	}
	resp, err := p.client.con.Pipeline().Do(req)
	if err != nil {
		p.err = err
		return false
	}
	if !resp.HasStatusCode(http.StatusOK) {
		p.err = p.client.getAppSettingsKeyVaultReferencesHandleError(resp)
		return false
	}
	result, err := p.client.getAppSettingsKeyVaultReferencesHandleResponse(resp)
	if err != nil {
		p.err = err
		return false
	}
	p.current = result
	return true
}

func (p *webAppsGetAppSettingsKeyVaultReferencesPager) PageResponse() WebAppsGetAppSettingsKeyVaultReferencesResponse {
	return p.current
}

type WebAppsGetAppSettingsKeyVaultReferencesSlotPager interface {
	azcore.Pager
	// PageResponse returns the current WebAppsGetAppSettingsKeyVaultReferencesSlotResponse.
	PageResponse() WebAppsGetAppSettingsKeyVaultReferencesSlotResponse
}

type webAppsGetAppSettingsKeyVaultReferencesSlotPager struct {
	client    *WebAppsClient
	current   WebAppsGetAppSettingsKeyVaultReferencesSlotResponse
	err       error
	requester func(context.Context) (*azcore.Request, error)
	advancer  func(context.Context, WebAppsGetAppSettingsKeyVaultReferencesSlotResponse) (*azcore.Request, error)
}

func (p *webAppsGetAppSettingsKeyVaultReferencesSlotPager) Err() error {
	return p.err
}

func (p *webAppsGetAppSettingsKeyVaultReferencesSlotPager) NextPage(ctx context.Context) bool {
	var req *azcore.Request
	var err error
	if !reflect.ValueOf(p.current).IsZero() {
		if p.current.APIKVReferenceCollection.NextLink == nil || len(*p.current.APIKVReferenceCollection.NextLink) == 0 {
			return false
		}
		req, err = p.advancer(ctx, p.current)
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		p.err = err
		return false
	}
	resp, err := p.client.con.Pipeline().Do(req)
	if err != nil {
		p.err = err
		return false
	}
	if !resp.HasStatusCode(http.StatusOK) {
		p.err = p.client.getAppSettingsKeyVaultReferencesSlotHandleError(resp)
		return false
	}
	result, err := p.client.getAppSettingsKeyVaultReferencesSlotHandleResponse(resp)
	if err != nil {
		p.err = err
		return false
	}
	p.current = result
	return true
}

func (p *webAppsGetAppSettingsKeyVaultReferencesSlotPager) PageResponse() WebAppsGetAppSettingsKeyVaultReferencesSlotResponse {
	return p.current
}

type WebAppsGetPrivateEndpointConnectionListPager interface {
	azcore.Pager
	// PageResponse returns the current WebAppsGetPrivateEndpointConnectionListResponse.
	PageResponse() WebAppsGetPrivateEndpointConnectionListResponse
}

type webAppsGetPrivateEndpointConnectionListPager struct {
	client    *WebAppsClient
	current   WebAppsGetPrivateEndpointConnectionListResponse
	err       error
	requester func(context.Context) (*azcore.Request, error)
	advancer  func(context.Context, WebAppsGetPrivateEndpointConnectionListResponse) (*azcore.Request, error)
}

func (p *webAppsGetPrivateEndpointConnectionListPager) Err() error {
	return p.err
}

func (p *webAppsGetPrivateEndpointConnectionListPager) NextPage(ctx context.Context) bool {
	var req *azcore.Request
	var err error
	if !reflect.ValueOf(p.current).IsZero() {
		if p.current.PrivateEndpointConnectionCollection.NextLink == nil || len(*p.current.PrivateEndpointConnectionCollection.NextLink) == 0 {
			return false
		}
		req, err = p.advancer(ctx, p.current)
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		p.err = err
		return false
	}
	resp, err := p.client.con.Pipeline().Do(req)
	if err != nil {
		p.err = err
		return false
	}
	if !resp.HasStatusCode(http.StatusOK) {
		p.err = p.client.getPrivateEndpointConnectionListHandleError(resp)
		return false
	}
	result, err := p.client.getPrivateEndpointConnectionListHandleResponse(resp)
	if err != nil {
		p.err = err
		return false
	}
	p.current = result
	return true
}

func (p *webAppsGetPrivateEndpointConnectionListPager) PageResponse() WebAppsGetPrivateEndpointConnectionListResponse {
	return p.current
}

type WebAppsGetPrivateEndpointConnectionListSlotPager interface {
	azcore.Pager
	// PageResponse returns the current WebAppsGetPrivateEndpointConnectionListSlotResponse.
	PageResponse() WebAppsGetPrivateEndpointConnectionListSlotResponse
}

type webAppsGetPrivateEndpointConnectionListSlotPager struct {
	client    *WebAppsClient
	current   WebAppsGetPrivateEndpointConnectionListSlotResponse
	err       error
	requester func(context.Context) (*azcore.Request, error)
	advancer  func(context.Context, WebAppsGetPrivateEndpointConnectionListSlotResponse) (*azcore.Request, error)
}

func (p *webAppsGetPrivateEndpointConnectionListSlotPager) Err() error {
	return p.err
}

func (p *webAppsGetPrivateEndpointConnectionListSlotPager) NextPage(ctx context.Context) bool {
	var req *azcore.Request
	var err error
	if !reflect.ValueOf(p.current).IsZero() {
		if p.current.PrivateEndpointConnectionCollection.NextLink == nil || len(*p.current.PrivateEndpointConnectionCollection.NextLink) == 0 {
			return false
		}
		req, err = p.advancer(ctx, p.current)
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		p.err = err
		return false
	}
	resp, err := p.client.con.Pipeline().Do(req)
	if err != nil {
		p.err = err
		return false
	}
	if !resp.HasStatusCode(http.StatusOK) {
		p.err = p.client.getPrivateEndpointConnectionListSlotHandleError(resp)
		return false
	}
	result, err := p.client.getPrivateEndpointConnectionListSlotHandleResponse(resp)
	if err != nil {
		p.err = err
		return false
	}
	p.current = result
	return true
}

func (p *webAppsGetPrivateEndpointConnectionListSlotPager) PageResponse() WebAppsGetPrivateEndpointConnectionListSlotResponse {
	return p.current
}

type WebAppsGetSiteConnectionStringKeyVaultReferencesPager interface {
	azcore.Pager
	// PageResponse returns the current WebAppsGetSiteConnectionStringKeyVaultReferencesResponse.
	PageResponse() WebAppsGetSiteConnectionStringKeyVaultReferencesResponse
}

type webAppsGetSiteConnectionStringKeyVaultReferencesPager struct {
	client    *WebAppsClient
	current   WebAppsGetSiteConnectionStringKeyVaultReferencesResponse
	err       error
	requester func(context.Context) (*azcore.Request, error)
	advancer  func(context.Context, WebAppsGetSiteConnectionStringKeyVaultReferencesResponse) (*azcore.Request, error)
}

func (p *webAppsGetSiteConnectionStringKeyVaultReferencesPager) Err() error {
	return p.err
}

func (p *webAppsGetSiteConnectionStringKeyVaultReferencesPager) NextPage(ctx context.Context) bool {
	var req *azcore.Request
	var err error
	if !reflect.ValueOf(p.current).IsZero() {
		if p.current.APIKVReferenceCollection.NextLink == nil || len(*p.current.APIKVReferenceCollection.NextLink) == 0 {
			return false
		}
		req, err = p.advancer(ctx, p.current)
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		p.err = err
		return false
	}
	resp, err := p.client.con.Pipeline().Do(req)
	if err != nil {
		p.err = err
		return false
	}
	if !resp.HasStatusCode(http.StatusOK) {
		p.err = p.client.getSiteConnectionStringKeyVaultReferencesHandleError(resp)
		return false
	}
	result, err := p.client.getSiteConnectionStringKeyVaultReferencesHandleResponse(resp)
	if err != nil {
		p.err = err
		return false
	}
	p.current = result
	return true
}

func (p *webAppsGetSiteConnectionStringKeyVaultReferencesPager) PageResponse() WebAppsGetSiteConnectionStringKeyVaultReferencesResponse {
	return p.current
}

type WebAppsGetSiteConnectionStringKeyVaultReferencesSlotPager interface {
	azcore.Pager
	// PageResponse returns the current WebAppsGetSiteConnectionStringKeyVaultReferencesSlotResponse.
	PageResponse() WebAppsGetSiteConnectionStringKeyVaultReferencesSlotResponse
}

type webAppsGetSiteConnectionStringKeyVaultReferencesSlotPager struct {
	client    *WebAppsClient
	current   WebAppsGetSiteConnectionStringKeyVaultReferencesSlotResponse
	err       error
	requester func(context.Context) (*azcore.Request, error)
	advancer  func(context.Context, WebAppsGetSiteConnectionStringKeyVaultReferencesSlotResponse) (*azcore.Request, error)
}

func (p *webAppsGetSiteConnectionStringKeyVaultReferencesSlotPager) Err() error {
	return p.err
}

func (p *webAppsGetSiteConnectionStringKeyVaultReferencesSlotPager) NextPage(ctx context.Context) bool {
	var req *azcore.Request
	var err error
	if !reflect.ValueOf(p.current).IsZero() {
		if p.current.APIKVReferenceCollection.NextLink == nil || len(*p.current.APIKVReferenceCollection.NextLink) == 0 {
			return false
		}
		req, err = p.advancer(ctx, p.current)
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		p.err = err
		return false
	}
	resp, err := p.client.con.Pipeline().Do(req)
	if err != nil {
		p.err = err
		return false
	}
	if !resp.HasStatusCode(http.StatusOK) {
		p.err = p.client.getSiteConnectionStringKeyVaultReferencesSlotHandleError(resp)
		return false
	}
	result, err := p.client.getSiteConnectionStringKeyVaultReferencesSlotHandleResponse(resp)
	if err != nil {
		p.err = err
		return false
	}
	p.current = result
	return true
}

func (p *webAppsGetSiteConnectionStringKeyVaultReferencesSlotPager) PageResponse() WebAppsGetSiteConnectionStringKeyVaultReferencesSlotResponse {
	return p.current
}

type WebAppsListBackupsPager interface {
	azcore.Pager
	// PageResponse returns the current WebAppsListBackupsResponse.
	PageResponse() WebAppsListBackupsResponse
}

type webAppsListBackupsPager struct {
	client    *WebAppsClient
	current   WebAppsListBackupsResponse
	err       error
	requester func(context.Context) (*azcore.Request, error)
	advancer  func(context.Context, WebAppsListBackupsResponse) (*azcore.Request, error)
}

func (p *webAppsListBackupsPager) Err() error {
	return p.err
}

func (p *webAppsListBackupsPager) NextPage(ctx context.Context) bool {
	var req *azcore.Request
	var err error
	if !reflect.ValueOf(p.current).IsZero() {
		if p.current.BackupItemCollection.NextLink == nil || len(*p.current.BackupItemCollection.NextLink) == 0 {
			return false
		}
		req, err = p.advancer(ctx, p.current)
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		p.err = err
		return false
	}
	resp, err := p.client.con.Pipeline().Do(req)
	if err != nil {
		p.err = err
		return false
	}
	if !resp.HasStatusCode(http.StatusOK) {
		p.err = p.client.listBackupsHandleError(resp)
		return false
	}
	result, err := p.client.listBackupsHandleResponse(resp)
	if err != nil {
		p.err = err
		return false
	}
	p.current = result
	return true
}

func (p *webAppsListBackupsPager) PageResponse() WebAppsListBackupsResponse {
	return p.current
}

type WebAppsListBackupsSlotPager interface {
	azcore.Pager
	// PageResponse returns the current WebAppsListBackupsSlotResponse.
	PageResponse() WebAppsListBackupsSlotResponse
}

type webAppsListBackupsSlotPager struct {
	client    *WebAppsClient
	current   WebAppsListBackupsSlotResponse
	err       error
	requester func(context.Context) (*azcore.Request, error)
	advancer  func(context.Context, WebAppsListBackupsSlotResponse) (*azcore.Request, error)
}

func (p *webAppsListBackupsSlotPager) Err() error {
	return p.err
}

func (p *webAppsListBackupsSlotPager) NextPage(ctx context.Context) bool {
	var req *azcore.Request
	var err error
	if !reflect.ValueOf(p.current).IsZero() {
		if p.current.BackupItemCollection.NextLink == nil || len(*p.current.BackupItemCollection.NextLink) == 0 {
			return false
		}
		req, err = p.advancer(ctx, p.current)
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		p.err = err
		return false
	}
	resp, err := p.client.con.Pipeline().Do(req)
	if err != nil {
		p.err = err
		return false
	}
	if !resp.HasStatusCode(http.StatusOK) {
		p.err = p.client.listBackupsSlotHandleError(resp)
		return false
	}
	result, err := p.client.listBackupsSlotHandleResponse(resp)
	if err != nil {
		p.err = err
		return false
	}
	p.current = result
	return true
}

func (p *webAppsListBackupsSlotPager) PageResponse() WebAppsListBackupsSlotResponse {
	return p.current
}

type WebAppsListBasicPublishingCredentialsPoliciesPager interface {
	azcore.Pager
	// PageResponse returns the current WebAppsListBasicPublishingCredentialsPoliciesResponse.
	PageResponse() WebAppsListBasicPublishingCredentialsPoliciesResponse
}

type webAppsListBasicPublishingCredentialsPoliciesPager struct {
	client    *WebAppsClient
	current   WebAppsListBasicPublishingCredentialsPoliciesResponse
	err       error
	requester func(context.Context) (*azcore.Request, error)
	advancer  func(context.Context, WebAppsListBasicPublishingCredentialsPoliciesResponse) (*azcore.Request, error)
}

func (p *webAppsListBasicPublishingCredentialsPoliciesPager) Err() error {
	return p.err
}

func (p *webAppsListBasicPublishingCredentialsPoliciesPager) NextPage(ctx context.Context) bool {
	var req *azcore.Request
	var err error
	if !reflect.ValueOf(p.current).IsZero() {
		if p.current.PublishingCredentialsPoliciesCollection.NextLink == nil || len(*p.current.PublishingCredentialsPoliciesCollection.NextLink) == 0 {
			return false
		}
		req, err = p.advancer(ctx, p.current)
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		p.err = err
		return false
	}
	resp, err := p.client.con.Pipeline().Do(req)
	if err != nil {
		p.err = err
		return false
	}
	if !resp.HasStatusCode(http.StatusOK) {
		p.err = p.client.listBasicPublishingCredentialsPoliciesHandleError(resp)
		return false
	}
	result, err := p.client.listBasicPublishingCredentialsPoliciesHandleResponse(resp)
	if err != nil {
		p.err = err
		return false
	}
	p.current = result
	return true
}

func (p *webAppsListBasicPublishingCredentialsPoliciesPager) PageResponse() WebAppsListBasicPublishingCredentialsPoliciesResponse {
	return p.current
}

type WebAppsListBasicPublishingCredentialsPoliciesSlotPager interface {
	azcore.Pager
	// PageResponse returns the current WebAppsListBasicPublishingCredentialsPoliciesSlotResponse.
	PageResponse() WebAppsListBasicPublishingCredentialsPoliciesSlotResponse
}

type webAppsListBasicPublishingCredentialsPoliciesSlotPager struct {
	client    *WebAppsClient
	current   WebAppsListBasicPublishingCredentialsPoliciesSlotResponse
	err       error
	requester func(context.Context) (*azcore.Request, error)
	advancer  func(context.Context, WebAppsListBasicPublishingCredentialsPoliciesSlotResponse) (*azcore.Request, error)
}

func (p *webAppsListBasicPublishingCredentialsPoliciesSlotPager) Err() error {
	return p.err
}

func (p *webAppsListBasicPublishingCredentialsPoliciesSlotPager) NextPage(ctx context.Context) bool {
	var req *azcore.Request
	var err error
	if !reflect.ValueOf(p.current).IsZero() {
		if p.current.PublishingCredentialsPoliciesCollection.NextLink == nil || len(*p.current.PublishingCredentialsPoliciesCollection.NextLink) == 0 {
			return false
		}
		req, err = p.advancer(ctx, p.current)
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		p.err = err
		return false
	}
	resp, err := p.client.con.Pipeline().Do(req)
	if err != nil {
		p.err = err
		return false
	}
	if !resp.HasStatusCode(http.StatusOK) {
		p.err = p.client.listBasicPublishingCredentialsPoliciesSlotHandleError(resp)
		return false
	}
	result, err := p.client.listBasicPublishingCredentialsPoliciesSlotHandleResponse(resp)
	if err != nil {
		p.err = err
		return false
	}
	p.current = result
	return true
}

func (p *webAppsListBasicPublishingCredentialsPoliciesSlotPager) PageResponse() WebAppsListBasicPublishingCredentialsPoliciesSlotResponse {
	return p.current
}

type WebAppsListByResourceGroupPager interface {
	azcore.Pager
	// PageResponse returns the current WebAppsListByResourceGroupResponse.
	PageResponse() WebAppsListByResourceGroupResponse
}

type webAppsListByResourceGroupPager struct {
	client    *WebAppsClient
	current   WebAppsListByResourceGroupResponse
	err       error
	requester func(context.Context) (*azcore.Request, error)
	advancer  func(context.Context, WebAppsListByResourceGroupResponse) (*azcore.Request, error)
}

func (p *webAppsListByResourceGroupPager) Err() error {
	return p.err
}

func (p *webAppsListByResourceGroupPager) NextPage(ctx context.Context) bool {
	var req *azcore.Request
	var err error
	if !reflect.ValueOf(p.current).IsZero() {
		if p.current.WebAppCollection.NextLink == nil || len(*p.current.WebAppCollection.NextLink) == 0 {
			return false
		}
		req, err = p.advancer(ctx, p.current)
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		p.err = err
		return false
	}
	resp, err := p.client.con.Pipeline().Do(req)
	if err != nil {
		p.err = err
		return false
	}
	if !resp.HasStatusCode(http.StatusOK) {
		p.err = p.client.listByResourceGroupHandleError(resp)
		return false
	}
	result, err := p.client.listByResourceGroupHandleResponse(resp)
	if err != nil {
		p.err = err
		return false
	}
	p.current = result
	return true
}

func (p *webAppsListByResourceGroupPager) PageResponse() WebAppsListByResourceGroupResponse {
	return p.current
}

type WebAppsListConfigurationSnapshotInfoPager interface {
	azcore.Pager
	// PageResponse returns the current WebAppsListConfigurationSnapshotInfoResponse.
	PageResponse() WebAppsListConfigurationSnapshotInfoResponse
}

type webAppsListConfigurationSnapshotInfoPager struct {
	client    *WebAppsClient
	current   WebAppsListConfigurationSnapshotInfoResponse
	err       error
	requester func(context.Context) (*azcore.Request, error)
	advancer  func(context.Context, WebAppsListConfigurationSnapshotInfoResponse) (*azcore.Request, error)
}

func (p *webAppsListConfigurationSnapshotInfoPager) Err() error {
	return p.err
}

func (p *webAppsListConfigurationSnapshotInfoPager) NextPage(ctx context.Context) bool {
	var req *azcore.Request
	var err error
	if !reflect.ValueOf(p.current).IsZero() {
		if p.current.SiteConfigurationSnapshotInfoCollection.NextLink == nil || len(*p.current.SiteConfigurationSnapshotInfoCollection.NextLink) == 0 {
			return false
		}
		req, err = p.advancer(ctx, p.current)
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		p.err = err
		return false
	}
	resp, err := p.client.con.Pipeline().Do(req)
	if err != nil {
		p.err = err
		return false
	}
	if !resp.HasStatusCode(http.StatusOK) {
		p.err = p.client.listConfigurationSnapshotInfoHandleError(resp)
		return false
	}
	result, err := p.client.listConfigurationSnapshotInfoHandleResponse(resp)
	if err != nil {
		p.err = err
		return false
	}
	p.current = result
	return true
}

func (p *webAppsListConfigurationSnapshotInfoPager) PageResponse() WebAppsListConfigurationSnapshotInfoResponse {
	return p.current
}

type WebAppsListConfigurationSnapshotInfoSlotPager interface {
	azcore.Pager
	// PageResponse returns the current WebAppsListConfigurationSnapshotInfoSlotResponse.
	PageResponse() WebAppsListConfigurationSnapshotInfoSlotResponse
}

type webAppsListConfigurationSnapshotInfoSlotPager struct {
	client    *WebAppsClient
	current   WebAppsListConfigurationSnapshotInfoSlotResponse
	err       error
	requester func(context.Context) (*azcore.Request, error)
	advancer  func(context.Context, WebAppsListConfigurationSnapshotInfoSlotResponse) (*azcore.Request, error)
}

func (p *webAppsListConfigurationSnapshotInfoSlotPager) Err() error {
	return p.err
}

func (p *webAppsListConfigurationSnapshotInfoSlotPager) NextPage(ctx context.Context) bool {
	var req *azcore.Request
	var err error
	if !reflect.ValueOf(p.current).IsZero() {
		if p.current.SiteConfigurationSnapshotInfoCollection.NextLink == nil || len(*p.current.SiteConfigurationSnapshotInfoCollection.NextLink) == 0 {
			return false
		}
		req, err = p.advancer(ctx, p.current)
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		p.err = err
		return false
	}
	resp, err := p.client.con.Pipeline().Do(req)
	if err != nil {
		p.err = err
		return false
	}
	if !resp.HasStatusCode(http.StatusOK) {
		p.err = p.client.listConfigurationSnapshotInfoSlotHandleError(resp)
		return false
	}
	result, err := p.client.listConfigurationSnapshotInfoSlotHandleResponse(resp)
	if err != nil {
		p.err = err
		return false
	}
	p.current = result
	return true
}

func (p *webAppsListConfigurationSnapshotInfoSlotPager) PageResponse() WebAppsListConfigurationSnapshotInfoSlotResponse {
	return p.current
}

type WebAppsListConfigurationsPager interface {
	azcore.Pager
	// PageResponse returns the current WebAppsListConfigurationsResponse.
	PageResponse() WebAppsListConfigurationsResponse
}

type webAppsListConfigurationsPager struct {
	client    *WebAppsClient
	current   WebAppsListConfigurationsResponse
	err       error
	requester func(context.Context) (*azcore.Request, error)
	advancer  func(context.Context, WebAppsListConfigurationsResponse) (*azcore.Request, error)
}

func (p *webAppsListConfigurationsPager) Err() error {
	return p.err
}

func (p *webAppsListConfigurationsPager) NextPage(ctx context.Context) bool {
	var req *azcore.Request
	var err error
	if !reflect.ValueOf(p.current).IsZero() {
		if p.current.SiteConfigResourceCollection.NextLink == nil || len(*p.current.SiteConfigResourceCollection.NextLink) == 0 {
			return false
		}
		req, err = p.advancer(ctx, p.current)
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		p.err = err
		return false
	}
	resp, err := p.client.con.Pipeline().Do(req)
	if err != nil {
		p.err = err
		return false
	}
	if !resp.HasStatusCode(http.StatusOK) {
		p.err = p.client.listConfigurationsHandleError(resp)
		return false
	}
	result, err := p.client.listConfigurationsHandleResponse(resp)
	if err != nil {
		p.err = err
		return false
	}
	p.current = result
	return true
}

func (p *webAppsListConfigurationsPager) PageResponse() WebAppsListConfigurationsResponse {
	return p.current
}

type WebAppsListConfigurationsSlotPager interface {
	azcore.Pager
	// PageResponse returns the current WebAppsListConfigurationsSlotResponse.
	PageResponse() WebAppsListConfigurationsSlotResponse
}

type webAppsListConfigurationsSlotPager struct {
	client    *WebAppsClient
	current   WebAppsListConfigurationsSlotResponse
	err       error
	requester func(context.Context) (*azcore.Request, error)
	advancer  func(context.Context, WebAppsListConfigurationsSlotResponse) (*azcore.Request, error)
}

func (p *webAppsListConfigurationsSlotPager) Err() error {
	return p.err
}

func (p *webAppsListConfigurationsSlotPager) NextPage(ctx context.Context) bool {
	var req *azcore.Request
	var err error
	if !reflect.ValueOf(p.current).IsZero() {
		if p.current.SiteConfigResourceCollection.NextLink == nil || len(*p.current.SiteConfigResourceCollection.NextLink) == 0 {
			return false
		}
		req, err = p.advancer(ctx, p.current)
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		p.err = err
		return false
	}
	resp, err := p.client.con.Pipeline().Do(req)
	if err != nil {
		p.err = err
		return false
	}
	if !resp.HasStatusCode(http.StatusOK) {
		p.err = p.client.listConfigurationsSlotHandleError(resp)
		return false
	}
	result, err := p.client.listConfigurationsSlotHandleResponse(resp)
	if err != nil {
		p.err = err
		return false
	}
	p.current = result
	return true
}

func (p *webAppsListConfigurationsSlotPager) PageResponse() WebAppsListConfigurationsSlotResponse {
	return p.current
}

type WebAppsListContinuousWebJobsPager interface {
	azcore.Pager
	// PageResponse returns the current WebAppsListContinuousWebJobsResponse.
	PageResponse() WebAppsListContinuousWebJobsResponse
}

type webAppsListContinuousWebJobsPager struct {
	client    *WebAppsClient
	current   WebAppsListContinuousWebJobsResponse
	err       error
	requester func(context.Context) (*azcore.Request, error)
	advancer  func(context.Context, WebAppsListContinuousWebJobsResponse) (*azcore.Request, error)
}

func (p *webAppsListContinuousWebJobsPager) Err() error {
	return p.err
}

func (p *webAppsListContinuousWebJobsPager) NextPage(ctx context.Context) bool {
	var req *azcore.Request
	var err error
	if !reflect.ValueOf(p.current).IsZero() {
		if p.current.ContinuousWebJobCollection.NextLink == nil || len(*p.current.ContinuousWebJobCollection.NextLink) == 0 {
			return false
		}
		req, err = p.advancer(ctx, p.current)
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		p.err = err
		return false
	}
	resp, err := p.client.con.Pipeline().Do(req)
	if err != nil {
		p.err = err
		return false
	}
	if !resp.HasStatusCode(http.StatusOK) {
		p.err = p.client.listContinuousWebJobsHandleError(resp)
		return false
	}
	result, err := p.client.listContinuousWebJobsHandleResponse(resp)
	if err != nil {
		p.err = err
		return false
	}
	p.current = result
	return true
}

func (p *webAppsListContinuousWebJobsPager) PageResponse() WebAppsListContinuousWebJobsResponse {
	return p.current
}

type WebAppsListContinuousWebJobsSlotPager interface {
	azcore.Pager
	// PageResponse returns the current WebAppsListContinuousWebJobsSlotResponse.
	PageResponse() WebAppsListContinuousWebJobsSlotResponse
}

type webAppsListContinuousWebJobsSlotPager struct {
	client    *WebAppsClient
	current   WebAppsListContinuousWebJobsSlotResponse
	err       error
	requester func(context.Context) (*azcore.Request, error)
	advancer  func(context.Context, WebAppsListContinuousWebJobsSlotResponse) (*azcore.Request, error)
}

func (p *webAppsListContinuousWebJobsSlotPager) Err() error {
	return p.err
}

func (p *webAppsListContinuousWebJobsSlotPager) NextPage(ctx context.Context) bool {
	var req *azcore.Request
	var err error
	if !reflect.ValueOf(p.current).IsZero() {
		if p.current.ContinuousWebJobCollection.NextLink == nil || len(*p.current.ContinuousWebJobCollection.NextLink) == 0 {
			return false
		}
		req, err = p.advancer(ctx, p.current)
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		p.err = err
		return false
	}
	resp, err := p.client.con.Pipeline().Do(req)
	if err != nil {
		p.err = err
		return false
	}
	if !resp.HasStatusCode(http.StatusOK) {
		p.err = p.client.listContinuousWebJobsSlotHandleError(resp)
		return false
	}
	result, err := p.client.listContinuousWebJobsSlotHandleResponse(resp)
	if err != nil {
		p.err = err
		return false
	}
	p.current = result
	return true
}

func (p *webAppsListContinuousWebJobsSlotPager) PageResponse() WebAppsListContinuousWebJobsSlotResponse {
	return p.current
}

type WebAppsListDeploymentsPager interface {
	azcore.Pager
	// PageResponse returns the current WebAppsListDeploymentsResponse.
	PageResponse() WebAppsListDeploymentsResponse
}

type webAppsListDeploymentsPager struct {
	client    *WebAppsClient
	current   WebAppsListDeploymentsResponse
	err       error
	requester func(context.Context) (*azcore.Request, error)
	advancer  func(context.Context, WebAppsListDeploymentsResponse) (*azcore.Request, error)
}

func (p *webAppsListDeploymentsPager) Err() error {
	return p.err
}

func (p *webAppsListDeploymentsPager) NextPage(ctx context.Context) bool {
	var req *azcore.Request
	var err error
	if !reflect.ValueOf(p.current).IsZero() {
		if p.current.DeploymentCollection.NextLink == nil || len(*p.current.DeploymentCollection.NextLink) == 0 {
			return false
		}
		req, err = p.advancer(ctx, p.current)
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		p.err = err
		return false
	}
	resp, err := p.client.con.Pipeline().Do(req)
	if err != nil {
		p.err = err
		return false
	}
	if !resp.HasStatusCode(http.StatusOK) {
		p.err = p.client.listDeploymentsHandleError(resp)
		return false
	}
	result, err := p.client.listDeploymentsHandleResponse(resp)
	if err != nil {
		p.err = err
		return false
	}
	p.current = result
	return true
}

func (p *webAppsListDeploymentsPager) PageResponse() WebAppsListDeploymentsResponse {
	return p.current
}

type WebAppsListDeploymentsSlotPager interface {
	azcore.Pager
	// PageResponse returns the current WebAppsListDeploymentsSlotResponse.
	PageResponse() WebAppsListDeploymentsSlotResponse
}

type webAppsListDeploymentsSlotPager struct {
	client    *WebAppsClient
	current   WebAppsListDeploymentsSlotResponse
	err       error
	requester func(context.Context) (*azcore.Request, error)
	advancer  func(context.Context, WebAppsListDeploymentsSlotResponse) (*azcore.Request, error)
}

func (p *webAppsListDeploymentsSlotPager) Err() error {
	return p.err
}

func (p *webAppsListDeploymentsSlotPager) NextPage(ctx context.Context) bool {
	var req *azcore.Request
	var err error
	if !reflect.ValueOf(p.current).IsZero() {
		if p.current.DeploymentCollection.NextLink == nil || len(*p.current.DeploymentCollection.NextLink) == 0 {
			return false
		}
		req, err = p.advancer(ctx, p.current)
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		p.err = err
		return false
	}
	resp, err := p.client.con.Pipeline().Do(req)
	if err != nil {
		p.err = err
		return false
	}
	if !resp.HasStatusCode(http.StatusOK) {
		p.err = p.client.listDeploymentsSlotHandleError(resp)
		return false
	}
	result, err := p.client.listDeploymentsSlotHandleResponse(resp)
	if err != nil {
		p.err = err
		return false
	}
	p.current = result
	return true
}

func (p *webAppsListDeploymentsSlotPager) PageResponse() WebAppsListDeploymentsSlotResponse {
	return p.current
}

type WebAppsListDomainOwnershipIdentifiersPager interface {
	azcore.Pager
	// PageResponse returns the current WebAppsListDomainOwnershipIdentifiersResponse.
	PageResponse() WebAppsListDomainOwnershipIdentifiersResponse
}

type webAppsListDomainOwnershipIdentifiersPager struct {
	client    *WebAppsClient
	current   WebAppsListDomainOwnershipIdentifiersResponse
	err       error
	requester func(context.Context) (*azcore.Request, error)
	advancer  func(context.Context, WebAppsListDomainOwnershipIdentifiersResponse) (*azcore.Request, error)
}

func (p *webAppsListDomainOwnershipIdentifiersPager) Err() error {
	return p.err
}

func (p *webAppsListDomainOwnershipIdentifiersPager) NextPage(ctx context.Context) bool {
	var req *azcore.Request
	var err error
	if !reflect.ValueOf(p.current).IsZero() {
		if p.current.IdentifierCollection.NextLink == nil || len(*p.current.IdentifierCollection.NextLink) == 0 {
			return false
		}
		req, err = p.advancer(ctx, p.current)
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		p.err = err
		return false
	}
	resp, err := p.client.con.Pipeline().Do(req)
	if err != nil {
		p.err = err
		return false
	}
	if !resp.HasStatusCode(http.StatusOK) {
		p.err = p.client.listDomainOwnershipIdentifiersHandleError(resp)
		return false
	}
	result, err := p.client.listDomainOwnershipIdentifiersHandleResponse(resp)
	if err != nil {
		p.err = err
		return false
	}
	p.current = result
	return true
}

func (p *webAppsListDomainOwnershipIdentifiersPager) PageResponse() WebAppsListDomainOwnershipIdentifiersResponse {
	return p.current
}

type WebAppsListDomainOwnershipIdentifiersSlotPager interface {
	azcore.Pager
	// PageResponse returns the current WebAppsListDomainOwnershipIdentifiersSlotResponse.
	PageResponse() WebAppsListDomainOwnershipIdentifiersSlotResponse
}

type webAppsListDomainOwnershipIdentifiersSlotPager struct {
	client    *WebAppsClient
	current   WebAppsListDomainOwnershipIdentifiersSlotResponse
	err       error
	requester func(context.Context) (*azcore.Request, error)
	advancer  func(context.Context, WebAppsListDomainOwnershipIdentifiersSlotResponse) (*azcore.Request, error)
}

func (p *webAppsListDomainOwnershipIdentifiersSlotPager) Err() error {
	return p.err
}

func (p *webAppsListDomainOwnershipIdentifiersSlotPager) NextPage(ctx context.Context) bool {
	var req *azcore.Request
	var err error
	if !reflect.ValueOf(p.current).IsZero() {
		if p.current.IdentifierCollection.NextLink == nil || len(*p.current.IdentifierCollection.NextLink) == 0 {
			return false
		}
		req, err = p.advancer(ctx, p.current)
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		p.err = err
		return false
	}
	resp, err := p.client.con.Pipeline().Do(req)
	if err != nil {
		p.err = err
		return false
	}
	if !resp.HasStatusCode(http.StatusOK) {
		p.err = p.client.listDomainOwnershipIdentifiersSlotHandleError(resp)
		return false
	}
	result, err := p.client.listDomainOwnershipIdentifiersSlotHandleResponse(resp)
	if err != nil {
		p.err = err
		return false
	}
	p.current = result
	return true
}

func (p *webAppsListDomainOwnershipIdentifiersSlotPager) PageResponse() WebAppsListDomainOwnershipIdentifiersSlotResponse {
	return p.current
}

type WebAppsListFunctionsPager interface {
	azcore.Pager
	// PageResponse returns the current WebAppsListFunctionsResponse.
	PageResponse() WebAppsListFunctionsResponse
}

type webAppsListFunctionsPager struct {
	client    *WebAppsClient
	current   WebAppsListFunctionsResponse
	err       error
	requester func(context.Context) (*azcore.Request, error)
	advancer  func(context.Context, WebAppsListFunctionsResponse) (*azcore.Request, error)
}

func (p *webAppsListFunctionsPager) Err() error {
	return p.err
}

func (p *webAppsListFunctionsPager) NextPage(ctx context.Context) bool {
	var req *azcore.Request
	var err error
	if !reflect.ValueOf(p.current).IsZero() {
		if p.current.FunctionEnvelopeCollection.NextLink == nil || len(*p.current.FunctionEnvelopeCollection.NextLink) == 0 {
			return false
		}
		req, err = p.advancer(ctx, p.current)
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		p.err = err
		return false
	}
	resp, err := p.client.con.Pipeline().Do(req)
	if err != nil {
		p.err = err
		return false
	}
	if !resp.HasStatusCode(http.StatusOK) {
		p.err = p.client.listFunctionsHandleError(resp)
		return false
	}
	result, err := p.client.listFunctionsHandleResponse(resp)
	if err != nil {
		p.err = err
		return false
	}
	p.current = result
	return true
}

func (p *webAppsListFunctionsPager) PageResponse() WebAppsListFunctionsResponse {
	return p.current
}

type WebAppsListHostNameBindingsPager interface {
	azcore.Pager
	// PageResponse returns the current WebAppsListHostNameBindingsResponse.
	PageResponse() WebAppsListHostNameBindingsResponse
}

type webAppsListHostNameBindingsPager struct {
	client    *WebAppsClient
	current   WebAppsListHostNameBindingsResponse
	err       error
	requester func(context.Context) (*azcore.Request, error)
	advancer  func(context.Context, WebAppsListHostNameBindingsResponse) (*azcore.Request, error)
}

func (p *webAppsListHostNameBindingsPager) Err() error {
	return p.err
}

func (p *webAppsListHostNameBindingsPager) NextPage(ctx context.Context) bool {
	var req *azcore.Request
	var err error
	if !reflect.ValueOf(p.current).IsZero() {
		if p.current.HostNameBindingCollection.NextLink == nil || len(*p.current.HostNameBindingCollection.NextLink) == 0 {
			return false
		}
		req, err = p.advancer(ctx, p.current)
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		p.err = err
		return false
	}
	resp, err := p.client.con.Pipeline().Do(req)
	if err != nil {
		p.err = err
		return false
	}
	if !resp.HasStatusCode(http.StatusOK) {
		p.err = p.client.listHostNameBindingsHandleError(resp)
		return false
	}
	result, err := p.client.listHostNameBindingsHandleResponse(resp)
	if err != nil {
		p.err = err
		return false
	}
	p.current = result
	return true
}

func (p *webAppsListHostNameBindingsPager) PageResponse() WebAppsListHostNameBindingsResponse {
	return p.current
}

type WebAppsListHostNameBindingsSlotPager interface {
	azcore.Pager
	// PageResponse returns the current WebAppsListHostNameBindingsSlotResponse.
	PageResponse() WebAppsListHostNameBindingsSlotResponse
}

type webAppsListHostNameBindingsSlotPager struct {
	client    *WebAppsClient
	current   WebAppsListHostNameBindingsSlotResponse
	err       error
	requester func(context.Context) (*azcore.Request, error)
	advancer  func(context.Context, WebAppsListHostNameBindingsSlotResponse) (*azcore.Request, error)
}

func (p *webAppsListHostNameBindingsSlotPager) Err() error {
	return p.err
}

func (p *webAppsListHostNameBindingsSlotPager) NextPage(ctx context.Context) bool {
	var req *azcore.Request
	var err error
	if !reflect.ValueOf(p.current).IsZero() {
		if p.current.HostNameBindingCollection.NextLink == nil || len(*p.current.HostNameBindingCollection.NextLink) == 0 {
			return false
		}
		req, err = p.advancer(ctx, p.current)
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		p.err = err
		return false
	}
	resp, err := p.client.con.Pipeline().Do(req)
	if err != nil {
		p.err = err
		return false
	}
	if !resp.HasStatusCode(http.StatusOK) {
		p.err = p.client.listHostNameBindingsSlotHandleError(resp)
		return false
	}
	result, err := p.client.listHostNameBindingsSlotHandleResponse(resp)
	if err != nil {
		p.err = err
		return false
	}
	p.current = result
	return true
}

func (p *webAppsListHostNameBindingsSlotPager) PageResponse() WebAppsListHostNameBindingsSlotResponse {
	return p.current
}

type WebAppsListInstanceFunctionsSlotPager interface {
	azcore.Pager
	// PageResponse returns the current WebAppsListInstanceFunctionsSlotResponse.
	PageResponse() WebAppsListInstanceFunctionsSlotResponse
}

type webAppsListInstanceFunctionsSlotPager struct {
	client    *WebAppsClient
	current   WebAppsListInstanceFunctionsSlotResponse
	err       error
	requester func(context.Context) (*azcore.Request, error)
	advancer  func(context.Context, WebAppsListInstanceFunctionsSlotResponse) (*azcore.Request, error)
}

func (p *webAppsListInstanceFunctionsSlotPager) Err() error {
	return p.err
}

func (p *webAppsListInstanceFunctionsSlotPager) NextPage(ctx context.Context) bool {
	var req *azcore.Request
	var err error
	if !reflect.ValueOf(p.current).IsZero() {
		if p.current.FunctionEnvelopeCollection.NextLink == nil || len(*p.current.FunctionEnvelopeCollection.NextLink) == 0 {
			return false
		}
		req, err = p.advancer(ctx, p.current)
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		p.err = err
		return false
	}
	resp, err := p.client.con.Pipeline().Do(req)
	if err != nil {
		p.err = err
		return false
	}
	if !resp.HasStatusCode(http.StatusOK) {
		p.err = p.client.listInstanceFunctionsSlotHandleError(resp)
		return false
	}
	result, err := p.client.listInstanceFunctionsSlotHandleResponse(resp)
	if err != nil {
		p.err = err
		return false
	}
	p.current = result
	return true
}

func (p *webAppsListInstanceFunctionsSlotPager) PageResponse() WebAppsListInstanceFunctionsSlotResponse {
	return p.current
}

type WebAppsListInstanceIdentifiersPager interface {
	azcore.Pager
	// PageResponse returns the current WebAppsListInstanceIdentifiersResponse.
	PageResponse() WebAppsListInstanceIdentifiersResponse
}

type webAppsListInstanceIdentifiersPager struct {
	client    *WebAppsClient
	current   WebAppsListInstanceIdentifiersResponse
	err       error
	requester func(context.Context) (*azcore.Request, error)
	advancer  func(context.Context, WebAppsListInstanceIdentifiersResponse) (*azcore.Request, error)
}

func (p *webAppsListInstanceIdentifiersPager) Err() error {
	return p.err
}

func (p *webAppsListInstanceIdentifiersPager) NextPage(ctx context.Context) bool {
	var req *azcore.Request
	var err error
	if !reflect.ValueOf(p.current).IsZero() {
		if p.current.WebAppInstanceStatusCollection.NextLink == nil || len(*p.current.WebAppInstanceStatusCollection.NextLink) == 0 {
			return false
		}
		req, err = p.advancer(ctx, p.current)
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		p.err = err
		return false
	}
	resp, err := p.client.con.Pipeline().Do(req)
	if err != nil {
		p.err = err
		return false
	}
	if !resp.HasStatusCode(http.StatusOK) {
		p.err = p.client.listInstanceIdentifiersHandleError(resp)
		return false
	}
	result, err := p.client.listInstanceIdentifiersHandleResponse(resp)
	if err != nil {
		p.err = err
		return false
	}
	p.current = result
	return true
}

func (p *webAppsListInstanceIdentifiersPager) PageResponse() WebAppsListInstanceIdentifiersResponse {
	return p.current
}

type WebAppsListInstanceIdentifiersSlotPager interface {
	azcore.Pager
	// PageResponse returns the current WebAppsListInstanceIdentifiersSlotResponse.
	PageResponse() WebAppsListInstanceIdentifiersSlotResponse
}

type webAppsListInstanceIdentifiersSlotPager struct {
	client    *WebAppsClient
	current   WebAppsListInstanceIdentifiersSlotResponse
	err       error
	requester func(context.Context) (*azcore.Request, error)
	advancer  func(context.Context, WebAppsListInstanceIdentifiersSlotResponse) (*azcore.Request, error)
}

func (p *webAppsListInstanceIdentifiersSlotPager) Err() error {
	return p.err
}

func (p *webAppsListInstanceIdentifiersSlotPager) NextPage(ctx context.Context) bool {
	var req *azcore.Request
	var err error
	if !reflect.ValueOf(p.current).IsZero() {
		if p.current.WebAppInstanceStatusCollection.NextLink == nil || len(*p.current.WebAppInstanceStatusCollection.NextLink) == 0 {
			return false
		}
		req, err = p.advancer(ctx, p.current)
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		p.err = err
		return false
	}
	resp, err := p.client.con.Pipeline().Do(req)
	if err != nil {
		p.err = err
		return false
	}
	if !resp.HasStatusCode(http.StatusOK) {
		p.err = p.client.listInstanceIdentifiersSlotHandleError(resp)
		return false
	}
	result, err := p.client.listInstanceIdentifiersSlotHandleResponse(resp)
	if err != nil {
		p.err = err
		return false
	}
	p.current = result
	return true
}

func (p *webAppsListInstanceIdentifiersSlotPager) PageResponse() WebAppsListInstanceIdentifiersSlotResponse {
	return p.current
}

type WebAppsListInstanceProcessModulesPager interface {
	azcore.Pager
	// PageResponse returns the current WebAppsListInstanceProcessModulesResponse.
	PageResponse() WebAppsListInstanceProcessModulesResponse
}

type webAppsListInstanceProcessModulesPager struct {
	client    *WebAppsClient
	current   WebAppsListInstanceProcessModulesResponse
	err       error
	requester func(context.Context) (*azcore.Request, error)
	advancer  func(context.Context, WebAppsListInstanceProcessModulesResponse) (*azcore.Request, error)
}

func (p *webAppsListInstanceProcessModulesPager) Err() error {
	return p.err
}

func (p *webAppsListInstanceProcessModulesPager) NextPage(ctx context.Context) bool {
	var req *azcore.Request
	var err error
	if !reflect.ValueOf(p.current).IsZero() {
		if p.current.ProcessModuleInfoCollection.NextLink == nil || len(*p.current.ProcessModuleInfoCollection.NextLink) == 0 {
			return false
		}
		req, err = p.advancer(ctx, p.current)
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		p.err = err
		return false
	}
	resp, err := p.client.con.Pipeline().Do(req)
	if err != nil {
		p.err = err
		return false
	}
	if !resp.HasStatusCode(http.StatusOK) {
		p.err = p.client.listInstanceProcessModulesHandleError(resp)
		return false
	}
	result, err := p.client.listInstanceProcessModulesHandleResponse(resp)
	if err != nil {
		p.err = err
		return false
	}
	p.current = result
	return true
}

func (p *webAppsListInstanceProcessModulesPager) PageResponse() WebAppsListInstanceProcessModulesResponse {
	return p.current
}

type WebAppsListInstanceProcessModulesSlotPager interface {
	azcore.Pager
	// PageResponse returns the current WebAppsListInstanceProcessModulesSlotResponse.
	PageResponse() WebAppsListInstanceProcessModulesSlotResponse
}

type webAppsListInstanceProcessModulesSlotPager struct {
	client    *WebAppsClient
	current   WebAppsListInstanceProcessModulesSlotResponse
	err       error
	requester func(context.Context) (*azcore.Request, error)
	advancer  func(context.Context, WebAppsListInstanceProcessModulesSlotResponse) (*azcore.Request, error)
}

func (p *webAppsListInstanceProcessModulesSlotPager) Err() error {
	return p.err
}

func (p *webAppsListInstanceProcessModulesSlotPager) NextPage(ctx context.Context) bool {
	var req *azcore.Request
	var err error
	if !reflect.ValueOf(p.current).IsZero() {
		if p.current.ProcessModuleInfoCollection.NextLink == nil || len(*p.current.ProcessModuleInfoCollection.NextLink) == 0 {
			return false
		}
		req, err = p.advancer(ctx, p.current)
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		p.err = err
		return false
	}
	resp, err := p.client.con.Pipeline().Do(req)
	if err != nil {
		p.err = err
		return false
	}
	if !resp.HasStatusCode(http.StatusOK) {
		p.err = p.client.listInstanceProcessModulesSlotHandleError(resp)
		return false
	}
	result, err := p.client.listInstanceProcessModulesSlotHandleResponse(resp)
	if err != nil {
		p.err = err
		return false
	}
	p.current = result
	return true
}

func (p *webAppsListInstanceProcessModulesSlotPager) PageResponse() WebAppsListInstanceProcessModulesSlotResponse {
	return p.current
}

type WebAppsListInstanceProcessThreadsPager interface {
	azcore.Pager
	// PageResponse returns the current WebAppsListInstanceProcessThreadsResponse.
	PageResponse() WebAppsListInstanceProcessThreadsResponse
}

type webAppsListInstanceProcessThreadsPager struct {
	client    *WebAppsClient
	current   WebAppsListInstanceProcessThreadsResponse
	err       error
	requester func(context.Context) (*azcore.Request, error)
	advancer  func(context.Context, WebAppsListInstanceProcessThreadsResponse) (*azcore.Request, error)
}

func (p *webAppsListInstanceProcessThreadsPager) Err() error {
	return p.err
}

func (p *webAppsListInstanceProcessThreadsPager) NextPage(ctx context.Context) bool {
	var req *azcore.Request
	var err error
	if !reflect.ValueOf(p.current).IsZero() {
		if p.current.ProcessThreadInfoCollection.NextLink == nil || len(*p.current.ProcessThreadInfoCollection.NextLink) == 0 {
			return false
		}
		req, err = p.advancer(ctx, p.current)
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		p.err = err
		return false
	}
	resp, err := p.client.con.Pipeline().Do(req)
	if err != nil {
		p.err = err
		return false
	}
	if !resp.HasStatusCode(http.StatusOK) {
		p.err = p.client.listInstanceProcessThreadsHandleError(resp)
		return false
	}
	result, err := p.client.listInstanceProcessThreadsHandleResponse(resp)
	if err != nil {
		p.err = err
		return false
	}
	p.current = result
	return true
}

func (p *webAppsListInstanceProcessThreadsPager) PageResponse() WebAppsListInstanceProcessThreadsResponse {
	return p.current
}

type WebAppsListInstanceProcessThreadsSlotPager interface {
	azcore.Pager
	// PageResponse returns the current WebAppsListInstanceProcessThreadsSlotResponse.
	PageResponse() WebAppsListInstanceProcessThreadsSlotResponse
}

type webAppsListInstanceProcessThreadsSlotPager struct {
	client    *WebAppsClient
	current   WebAppsListInstanceProcessThreadsSlotResponse
	err       error
	requester func(context.Context) (*azcore.Request, error)
	advancer  func(context.Context, WebAppsListInstanceProcessThreadsSlotResponse) (*azcore.Request, error)
}

func (p *webAppsListInstanceProcessThreadsSlotPager) Err() error {
	return p.err
}

func (p *webAppsListInstanceProcessThreadsSlotPager) NextPage(ctx context.Context) bool {
	var req *azcore.Request
	var err error
	if !reflect.ValueOf(p.current).IsZero() {
		if p.current.ProcessThreadInfoCollection.NextLink == nil || len(*p.current.ProcessThreadInfoCollection.NextLink) == 0 {
			return false
		}
		req, err = p.advancer(ctx, p.current)
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		p.err = err
		return false
	}
	resp, err := p.client.con.Pipeline().Do(req)
	if err != nil {
		p.err = err
		return false
	}
	if !resp.HasStatusCode(http.StatusOK) {
		p.err = p.client.listInstanceProcessThreadsSlotHandleError(resp)
		return false
	}
	result, err := p.client.listInstanceProcessThreadsSlotHandleResponse(resp)
	if err != nil {
		p.err = err
		return false
	}
	p.current = result
	return true
}

func (p *webAppsListInstanceProcessThreadsSlotPager) PageResponse() WebAppsListInstanceProcessThreadsSlotResponse {
	return p.current
}

type WebAppsListInstanceProcessesPager interface {
	azcore.Pager
	// PageResponse returns the current WebAppsListInstanceProcessesResponse.
	PageResponse() WebAppsListInstanceProcessesResponse
}

type webAppsListInstanceProcessesPager struct {
	client    *WebAppsClient
	current   WebAppsListInstanceProcessesResponse
	err       error
	requester func(context.Context) (*azcore.Request, error)
	advancer  func(context.Context, WebAppsListInstanceProcessesResponse) (*azcore.Request, error)
}

func (p *webAppsListInstanceProcessesPager) Err() error {
	return p.err
}

func (p *webAppsListInstanceProcessesPager) NextPage(ctx context.Context) bool {
	var req *azcore.Request
	var err error
	if !reflect.ValueOf(p.current).IsZero() {
		if p.current.ProcessInfoCollection.NextLink == nil || len(*p.current.ProcessInfoCollection.NextLink) == 0 {
			return false
		}
		req, err = p.advancer(ctx, p.current)
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		p.err = err
		return false
	}
	resp, err := p.client.con.Pipeline().Do(req)
	if err != nil {
		p.err = err
		return false
	}
	if !resp.HasStatusCode(http.StatusOK) {
		p.err = p.client.listInstanceProcessesHandleError(resp)
		return false
	}
	result, err := p.client.listInstanceProcessesHandleResponse(resp)
	if err != nil {
		p.err = err
		return false
	}
	p.current = result
	return true
}

func (p *webAppsListInstanceProcessesPager) PageResponse() WebAppsListInstanceProcessesResponse {
	return p.current
}

type WebAppsListInstanceProcessesSlotPager interface {
	azcore.Pager
	// PageResponse returns the current WebAppsListInstanceProcessesSlotResponse.
	PageResponse() WebAppsListInstanceProcessesSlotResponse
}

type webAppsListInstanceProcessesSlotPager struct {
	client    *WebAppsClient
	current   WebAppsListInstanceProcessesSlotResponse
	err       error
	requester func(context.Context) (*azcore.Request, error)
	advancer  func(context.Context, WebAppsListInstanceProcessesSlotResponse) (*azcore.Request, error)
}

func (p *webAppsListInstanceProcessesSlotPager) Err() error {
	return p.err
}

func (p *webAppsListInstanceProcessesSlotPager) NextPage(ctx context.Context) bool {
	var req *azcore.Request
	var err error
	if !reflect.ValueOf(p.current).IsZero() {
		if p.current.ProcessInfoCollection.NextLink == nil || len(*p.current.ProcessInfoCollection.NextLink) == 0 {
			return false
		}
		req, err = p.advancer(ctx, p.current)
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		p.err = err
		return false
	}
	resp, err := p.client.con.Pipeline().Do(req)
	if err != nil {
		p.err = err
		return false
	}
	if !resp.HasStatusCode(http.StatusOK) {
		p.err = p.client.listInstanceProcessesSlotHandleError(resp)
		return false
	}
	result, err := p.client.listInstanceProcessesSlotHandleResponse(resp)
	if err != nil {
		p.err = err
		return false
	}
	p.current = result
	return true
}

func (p *webAppsListInstanceProcessesSlotPager) PageResponse() WebAppsListInstanceProcessesSlotResponse {
	return p.current
}

type WebAppsListPager interface {
	azcore.Pager
	// PageResponse returns the current WebAppsListResponse.
	PageResponse() WebAppsListResponse
}

type webAppsListPager struct {
	client    *WebAppsClient
	current   WebAppsListResponse
	err       error
	requester func(context.Context) (*azcore.Request, error)
	advancer  func(context.Context, WebAppsListResponse) (*azcore.Request, error)
}

func (p *webAppsListPager) Err() error {
	return p.err
}

func (p *webAppsListPager) NextPage(ctx context.Context) bool {
	var req *azcore.Request
	var err error
	if !reflect.ValueOf(p.current).IsZero() {
		if p.current.WebAppCollection.NextLink == nil || len(*p.current.WebAppCollection.NextLink) == 0 {
			return false
		}
		req, err = p.advancer(ctx, p.current)
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		p.err = err
		return false
	}
	resp, err := p.client.con.Pipeline().Do(req)
	if err != nil {
		p.err = err
		return false
	}
	if !resp.HasStatusCode(http.StatusOK) {
		p.err = p.client.listHandleError(resp)
		return false
	}
	result, err := p.client.listHandleResponse(resp)
	if err != nil {
		p.err = err
		return false
	}
	p.current = result
	return true
}

func (p *webAppsListPager) PageResponse() WebAppsListResponse {
	return p.current
}

type WebAppsListPerfMonCountersPager interface {
	azcore.Pager
	// PageResponse returns the current WebAppsListPerfMonCountersResponse.
	PageResponse() WebAppsListPerfMonCountersResponse
}

type webAppsListPerfMonCountersPager struct {
	client    *WebAppsClient
	current   WebAppsListPerfMonCountersResponse
	err       error
	requester func(context.Context) (*azcore.Request, error)
	advancer  func(context.Context, WebAppsListPerfMonCountersResponse) (*azcore.Request, error)
}

func (p *webAppsListPerfMonCountersPager) Err() error {
	return p.err
}

func (p *webAppsListPerfMonCountersPager) NextPage(ctx context.Context) bool {
	var req *azcore.Request
	var err error
	if !reflect.ValueOf(p.current).IsZero() {
		if p.current.PerfMonCounterCollection.NextLink == nil || len(*p.current.PerfMonCounterCollection.NextLink) == 0 {
			return false
		}
		req, err = p.advancer(ctx, p.current)
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		p.err = err
		return false
	}
	resp, err := p.client.con.Pipeline().Do(req)
	if err != nil {
		p.err = err
		return false
	}
	if !resp.HasStatusCode(http.StatusOK) {
		p.err = p.client.listPerfMonCountersHandleError(resp)
		return false
	}
	result, err := p.client.listPerfMonCountersHandleResponse(resp)
	if err != nil {
		p.err = err
		return false
	}
	p.current = result
	return true
}

func (p *webAppsListPerfMonCountersPager) PageResponse() WebAppsListPerfMonCountersResponse {
	return p.current
}

type WebAppsListPerfMonCountersSlotPager interface {
	azcore.Pager
	// PageResponse returns the current WebAppsListPerfMonCountersSlotResponse.
	PageResponse() WebAppsListPerfMonCountersSlotResponse
}

type webAppsListPerfMonCountersSlotPager struct {
	client    *WebAppsClient
	current   WebAppsListPerfMonCountersSlotResponse
	err       error
	requester func(context.Context) (*azcore.Request, error)
	advancer  func(context.Context, WebAppsListPerfMonCountersSlotResponse) (*azcore.Request, error)
}

func (p *webAppsListPerfMonCountersSlotPager) Err() error {
	return p.err
}

func (p *webAppsListPerfMonCountersSlotPager) NextPage(ctx context.Context) bool {
	var req *azcore.Request
	var err error
	if !reflect.ValueOf(p.current).IsZero() {
		if p.current.PerfMonCounterCollection.NextLink == nil || len(*p.current.PerfMonCounterCollection.NextLink) == 0 {
			return false
		}
		req, err = p.advancer(ctx, p.current)
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		p.err = err
		return false
	}
	resp, err := p.client.con.Pipeline().Do(req)
	if err != nil {
		p.err = err
		return false
	}
	if !resp.HasStatusCode(http.StatusOK) {
		p.err = p.client.listPerfMonCountersSlotHandleError(resp)
		return false
	}
	result, err := p.client.listPerfMonCountersSlotHandleResponse(resp)
	if err != nil {
		p.err = err
		return false
	}
	p.current = result
	return true
}

func (p *webAppsListPerfMonCountersSlotPager) PageResponse() WebAppsListPerfMonCountersSlotResponse {
	return p.current
}

type WebAppsListProcessModulesPager interface {
	azcore.Pager
	// PageResponse returns the current WebAppsListProcessModulesResponse.
	PageResponse() WebAppsListProcessModulesResponse
}

type webAppsListProcessModulesPager struct {
	client    *WebAppsClient
	current   WebAppsListProcessModulesResponse
	err       error
	requester func(context.Context) (*azcore.Request, error)
	advancer  func(context.Context, WebAppsListProcessModulesResponse) (*azcore.Request, error)
}

func (p *webAppsListProcessModulesPager) Err() error {
	return p.err
}

func (p *webAppsListProcessModulesPager) NextPage(ctx context.Context) bool {
	var req *azcore.Request
	var err error
	if !reflect.ValueOf(p.current).IsZero() {
		if p.current.ProcessModuleInfoCollection.NextLink == nil || len(*p.current.ProcessModuleInfoCollection.NextLink) == 0 {
			return false
		}
		req, err = p.advancer(ctx, p.current)
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		p.err = err
		return false
	}
	resp, err := p.client.con.Pipeline().Do(req)
	if err != nil {
		p.err = err
		return false
	}
	if !resp.HasStatusCode(http.StatusOK) {
		p.err = p.client.listProcessModulesHandleError(resp)
		return false
	}
	result, err := p.client.listProcessModulesHandleResponse(resp)
	if err != nil {
		p.err = err
		return false
	}
	p.current = result
	return true
}

func (p *webAppsListProcessModulesPager) PageResponse() WebAppsListProcessModulesResponse {
	return p.current
}

type WebAppsListProcessModulesSlotPager interface {
	azcore.Pager
	// PageResponse returns the current WebAppsListProcessModulesSlotResponse.
	PageResponse() WebAppsListProcessModulesSlotResponse
}

type webAppsListProcessModulesSlotPager struct {
	client    *WebAppsClient
	current   WebAppsListProcessModulesSlotResponse
	err       error
	requester func(context.Context) (*azcore.Request, error)
	advancer  func(context.Context, WebAppsListProcessModulesSlotResponse) (*azcore.Request, error)
}

func (p *webAppsListProcessModulesSlotPager) Err() error {
	return p.err
}

func (p *webAppsListProcessModulesSlotPager) NextPage(ctx context.Context) bool {
	var req *azcore.Request
	var err error
	if !reflect.ValueOf(p.current).IsZero() {
		if p.current.ProcessModuleInfoCollection.NextLink == nil || len(*p.current.ProcessModuleInfoCollection.NextLink) == 0 {
			return false
		}
		req, err = p.advancer(ctx, p.current)
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		p.err = err
		return false
	}
	resp, err := p.client.con.Pipeline().Do(req)
	if err != nil {
		p.err = err
		return false
	}
	if !resp.HasStatusCode(http.StatusOK) {
		p.err = p.client.listProcessModulesSlotHandleError(resp)
		return false
	}
	result, err := p.client.listProcessModulesSlotHandleResponse(resp)
	if err != nil {
		p.err = err
		return false
	}
	p.current = result
	return true
}

func (p *webAppsListProcessModulesSlotPager) PageResponse() WebAppsListProcessModulesSlotResponse {
	return p.current
}

type WebAppsListProcessThreadsPager interface {
	azcore.Pager
	// PageResponse returns the current WebAppsListProcessThreadsResponse.
	PageResponse() WebAppsListProcessThreadsResponse
}

type webAppsListProcessThreadsPager struct {
	client    *WebAppsClient
	current   WebAppsListProcessThreadsResponse
	err       error
	requester func(context.Context) (*azcore.Request, error)
	advancer  func(context.Context, WebAppsListProcessThreadsResponse) (*azcore.Request, error)
}

func (p *webAppsListProcessThreadsPager) Err() error {
	return p.err
}

func (p *webAppsListProcessThreadsPager) NextPage(ctx context.Context) bool {
	var req *azcore.Request
	var err error
	if !reflect.ValueOf(p.current).IsZero() {
		if p.current.ProcessThreadInfoCollection.NextLink == nil || len(*p.current.ProcessThreadInfoCollection.NextLink) == 0 {
			return false
		}
		req, err = p.advancer(ctx, p.current)
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		p.err = err
		return false
	}
	resp, err := p.client.con.Pipeline().Do(req)
	if err != nil {
		p.err = err
		return false
	}
	if !resp.HasStatusCode(http.StatusOK) {
		p.err = p.client.listProcessThreadsHandleError(resp)
		return false
	}
	result, err := p.client.listProcessThreadsHandleResponse(resp)
	if err != nil {
		p.err = err
		return false
	}
	p.current = result
	return true
}

func (p *webAppsListProcessThreadsPager) PageResponse() WebAppsListProcessThreadsResponse {
	return p.current
}

type WebAppsListProcessThreadsSlotPager interface {
	azcore.Pager
	// PageResponse returns the current WebAppsListProcessThreadsSlotResponse.
	PageResponse() WebAppsListProcessThreadsSlotResponse
}

type webAppsListProcessThreadsSlotPager struct {
	client    *WebAppsClient
	current   WebAppsListProcessThreadsSlotResponse
	err       error
	requester func(context.Context) (*azcore.Request, error)
	advancer  func(context.Context, WebAppsListProcessThreadsSlotResponse) (*azcore.Request, error)
}

func (p *webAppsListProcessThreadsSlotPager) Err() error {
	return p.err
}

func (p *webAppsListProcessThreadsSlotPager) NextPage(ctx context.Context) bool {
	var req *azcore.Request
	var err error
	if !reflect.ValueOf(p.current).IsZero() {
		if p.current.ProcessThreadInfoCollection.NextLink == nil || len(*p.current.ProcessThreadInfoCollection.NextLink) == 0 {
			return false
		}
		req, err = p.advancer(ctx, p.current)
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		p.err = err
		return false
	}
	resp, err := p.client.con.Pipeline().Do(req)
	if err != nil {
		p.err = err
		return false
	}
	if !resp.HasStatusCode(http.StatusOK) {
		p.err = p.client.listProcessThreadsSlotHandleError(resp)
		return false
	}
	result, err := p.client.listProcessThreadsSlotHandleResponse(resp)
	if err != nil {
		p.err = err
		return false
	}
	p.current = result
	return true
}

func (p *webAppsListProcessThreadsSlotPager) PageResponse() WebAppsListProcessThreadsSlotResponse {
	return p.current
}

type WebAppsListProcessesPager interface {
	azcore.Pager
	// PageResponse returns the current WebAppsListProcessesResponse.
	PageResponse() WebAppsListProcessesResponse
}

type webAppsListProcessesPager struct {
	client    *WebAppsClient
	current   WebAppsListProcessesResponse
	err       error
	requester func(context.Context) (*azcore.Request, error)
	advancer  func(context.Context, WebAppsListProcessesResponse) (*azcore.Request, error)
}

func (p *webAppsListProcessesPager) Err() error {
	return p.err
}

func (p *webAppsListProcessesPager) NextPage(ctx context.Context) bool {
	var req *azcore.Request
	var err error
	if !reflect.ValueOf(p.current).IsZero() {
		if p.current.ProcessInfoCollection.NextLink == nil || len(*p.current.ProcessInfoCollection.NextLink) == 0 {
			return false
		}
		req, err = p.advancer(ctx, p.current)
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		p.err = err
		return false
	}
	resp, err := p.client.con.Pipeline().Do(req)
	if err != nil {
		p.err = err
		return false
	}
	if !resp.HasStatusCode(http.StatusOK) {
		p.err = p.client.listProcessesHandleError(resp)
		return false
	}
	result, err := p.client.listProcessesHandleResponse(resp)
	if err != nil {
		p.err = err
		return false
	}
	p.current = result
	return true
}

func (p *webAppsListProcessesPager) PageResponse() WebAppsListProcessesResponse {
	return p.current
}

type WebAppsListProcessesSlotPager interface {
	azcore.Pager
	// PageResponse returns the current WebAppsListProcessesSlotResponse.
	PageResponse() WebAppsListProcessesSlotResponse
}

type webAppsListProcessesSlotPager struct {
	client    *WebAppsClient
	current   WebAppsListProcessesSlotResponse
	err       error
	requester func(context.Context) (*azcore.Request, error)
	advancer  func(context.Context, WebAppsListProcessesSlotResponse) (*azcore.Request, error)
}

func (p *webAppsListProcessesSlotPager) Err() error {
	return p.err
}

func (p *webAppsListProcessesSlotPager) NextPage(ctx context.Context) bool {
	var req *azcore.Request
	var err error
	if !reflect.ValueOf(p.current).IsZero() {
		if p.current.ProcessInfoCollection.NextLink == nil || len(*p.current.ProcessInfoCollection.NextLink) == 0 {
			return false
		}
		req, err = p.advancer(ctx, p.current)
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		p.err = err
		return false
	}
	resp, err := p.client.con.Pipeline().Do(req)
	if err != nil {
		p.err = err
		return false
	}
	if !resp.HasStatusCode(http.StatusOK) {
		p.err = p.client.listProcessesSlotHandleError(resp)
		return false
	}
	result, err := p.client.listProcessesSlotHandleResponse(resp)
	if err != nil {
		p.err = err
		return false
	}
	p.current = result
	return true
}

func (p *webAppsListProcessesSlotPager) PageResponse() WebAppsListProcessesSlotResponse {
	return p.current
}

type WebAppsListPublicCertificatesPager interface {
	azcore.Pager
	// PageResponse returns the current WebAppsListPublicCertificatesResponse.
	PageResponse() WebAppsListPublicCertificatesResponse
}

type webAppsListPublicCertificatesPager struct {
	client    *WebAppsClient
	current   WebAppsListPublicCertificatesResponse
	err       error
	requester func(context.Context) (*azcore.Request, error)
	advancer  func(context.Context, WebAppsListPublicCertificatesResponse) (*azcore.Request, error)
}

func (p *webAppsListPublicCertificatesPager) Err() error {
	return p.err
}

func (p *webAppsListPublicCertificatesPager) NextPage(ctx context.Context) bool {
	var req *azcore.Request
	var err error
	if !reflect.ValueOf(p.current).IsZero() {
		if p.current.PublicCertificateCollection.NextLink == nil || len(*p.current.PublicCertificateCollection.NextLink) == 0 {
			return false
		}
		req, err = p.advancer(ctx, p.current)
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		p.err = err
		return false
	}
	resp, err := p.client.con.Pipeline().Do(req)
	if err != nil {
		p.err = err
		return false
	}
	if !resp.HasStatusCode(http.StatusOK) {
		p.err = p.client.listPublicCertificatesHandleError(resp)
		return false
	}
	result, err := p.client.listPublicCertificatesHandleResponse(resp)
	if err != nil {
		p.err = err
		return false
	}
	p.current = result
	return true
}

func (p *webAppsListPublicCertificatesPager) PageResponse() WebAppsListPublicCertificatesResponse {
	return p.current
}

type WebAppsListPublicCertificatesSlotPager interface {
	azcore.Pager
	// PageResponse returns the current WebAppsListPublicCertificatesSlotResponse.
	PageResponse() WebAppsListPublicCertificatesSlotResponse
}

type webAppsListPublicCertificatesSlotPager struct {
	client    *WebAppsClient
	current   WebAppsListPublicCertificatesSlotResponse
	err       error
	requester func(context.Context) (*azcore.Request, error)
	advancer  func(context.Context, WebAppsListPublicCertificatesSlotResponse) (*azcore.Request, error)
}

func (p *webAppsListPublicCertificatesSlotPager) Err() error {
	return p.err
}

func (p *webAppsListPublicCertificatesSlotPager) NextPage(ctx context.Context) bool {
	var req *azcore.Request
	var err error
	if !reflect.ValueOf(p.current).IsZero() {
		if p.current.PublicCertificateCollection.NextLink == nil || len(*p.current.PublicCertificateCollection.NextLink) == 0 {
			return false
		}
		req, err = p.advancer(ctx, p.current)
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		p.err = err
		return false
	}
	resp, err := p.client.con.Pipeline().Do(req)
	if err != nil {
		p.err = err
		return false
	}
	if !resp.HasStatusCode(http.StatusOK) {
		p.err = p.client.listPublicCertificatesSlotHandleError(resp)
		return false
	}
	result, err := p.client.listPublicCertificatesSlotHandleResponse(resp)
	if err != nil {
		p.err = err
		return false
	}
	p.current = result
	return true
}

func (p *webAppsListPublicCertificatesSlotPager) PageResponse() WebAppsListPublicCertificatesSlotResponse {
	return p.current
}

type WebAppsListSiteBackupsPager interface {
	azcore.Pager
	// PageResponse returns the current WebAppsListSiteBackupsResponse.
	PageResponse() WebAppsListSiteBackupsResponse
}

type webAppsListSiteBackupsPager struct {
	client    *WebAppsClient
	current   WebAppsListSiteBackupsResponse
	err       error
	requester func(context.Context) (*azcore.Request, error)
	advancer  func(context.Context, WebAppsListSiteBackupsResponse) (*azcore.Request, error)
}

func (p *webAppsListSiteBackupsPager) Err() error {
	return p.err
}

func (p *webAppsListSiteBackupsPager) NextPage(ctx context.Context) bool {
	var req *azcore.Request
	var err error
	if !reflect.ValueOf(p.current).IsZero() {
		if p.current.BackupItemCollection.NextLink == nil || len(*p.current.BackupItemCollection.NextLink) == 0 {
			return false
		}
		req, err = p.advancer(ctx, p.current)
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		p.err = err
		return false
	}
	resp, err := p.client.con.Pipeline().Do(req)
	if err != nil {
		p.err = err
		return false
	}
	if !resp.HasStatusCode(http.StatusOK) {
		p.err = p.client.listSiteBackupsHandleError(resp)
		return false
	}
	result, err := p.client.listSiteBackupsHandleResponse(resp)
	if err != nil {
		p.err = err
		return false
	}
	p.current = result
	return true
}

func (p *webAppsListSiteBackupsPager) PageResponse() WebAppsListSiteBackupsResponse {
	return p.current
}

type WebAppsListSiteBackupsSlotPager interface {
	azcore.Pager
	// PageResponse returns the current WebAppsListSiteBackupsSlotResponse.
	PageResponse() WebAppsListSiteBackupsSlotResponse
}

type webAppsListSiteBackupsSlotPager struct {
	client    *WebAppsClient
	current   WebAppsListSiteBackupsSlotResponse
	err       error
	requester func(context.Context) (*azcore.Request, error)
	advancer  func(context.Context, WebAppsListSiteBackupsSlotResponse) (*azcore.Request, error)
}

func (p *webAppsListSiteBackupsSlotPager) Err() error {
	return p.err
}

func (p *webAppsListSiteBackupsSlotPager) NextPage(ctx context.Context) bool {
	var req *azcore.Request
	var err error
	if !reflect.ValueOf(p.current).IsZero() {
		if p.current.BackupItemCollection.NextLink == nil || len(*p.current.BackupItemCollection.NextLink) == 0 {
			return false
		}
		req, err = p.advancer(ctx, p.current)
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		p.err = err
		return false
	}
	resp, err := p.client.con.Pipeline().Do(req)
	if err != nil {
		p.err = err
		return false
	}
	if !resp.HasStatusCode(http.StatusOK) {
		p.err = p.client.listSiteBackupsSlotHandleError(resp)
		return false
	}
	result, err := p.client.listSiteBackupsSlotHandleResponse(resp)
	if err != nil {
		p.err = err
		return false
	}
	p.current = result
	return true
}

func (p *webAppsListSiteBackupsSlotPager) PageResponse() WebAppsListSiteBackupsSlotResponse {
	return p.current
}

type WebAppsListSiteExtensionsPager interface {
	azcore.Pager
	// PageResponse returns the current WebAppsListSiteExtensionsResponse.
	PageResponse() WebAppsListSiteExtensionsResponse
}

type webAppsListSiteExtensionsPager struct {
	client    *WebAppsClient
	current   WebAppsListSiteExtensionsResponse
	err       error
	requester func(context.Context) (*azcore.Request, error)
	advancer  func(context.Context, WebAppsListSiteExtensionsResponse) (*azcore.Request, error)
}

func (p *webAppsListSiteExtensionsPager) Err() error {
	return p.err
}

func (p *webAppsListSiteExtensionsPager) NextPage(ctx context.Context) bool {
	var req *azcore.Request
	var err error
	if !reflect.ValueOf(p.current).IsZero() {
		if p.current.SiteExtensionInfoCollection.NextLink == nil || len(*p.current.SiteExtensionInfoCollection.NextLink) == 0 {
			return false
		}
		req, err = p.advancer(ctx, p.current)
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		p.err = err
		return false
	}
	resp, err := p.client.con.Pipeline().Do(req)
	if err != nil {
		p.err = err
		return false
	}
	if !resp.HasStatusCode(http.StatusOK) {
		p.err = p.client.listSiteExtensionsHandleError(resp)
		return false
	}
	result, err := p.client.listSiteExtensionsHandleResponse(resp)
	if err != nil {
		p.err = err
		return false
	}
	p.current = result
	return true
}

func (p *webAppsListSiteExtensionsPager) PageResponse() WebAppsListSiteExtensionsResponse {
	return p.current
}

type WebAppsListSiteExtensionsSlotPager interface {
	azcore.Pager
	// PageResponse returns the current WebAppsListSiteExtensionsSlotResponse.
	PageResponse() WebAppsListSiteExtensionsSlotResponse
}

type webAppsListSiteExtensionsSlotPager struct {
	client    *WebAppsClient
	current   WebAppsListSiteExtensionsSlotResponse
	err       error
	requester func(context.Context) (*azcore.Request, error)
	advancer  func(context.Context, WebAppsListSiteExtensionsSlotResponse) (*azcore.Request, error)
}

func (p *webAppsListSiteExtensionsSlotPager) Err() error {
	return p.err
}

func (p *webAppsListSiteExtensionsSlotPager) NextPage(ctx context.Context) bool {
	var req *azcore.Request
	var err error
	if !reflect.ValueOf(p.current).IsZero() {
		if p.current.SiteExtensionInfoCollection.NextLink == nil || len(*p.current.SiteExtensionInfoCollection.NextLink) == 0 {
			return false
		}
		req, err = p.advancer(ctx, p.current)
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		p.err = err
		return false
	}
	resp, err := p.client.con.Pipeline().Do(req)
	if err != nil {
		p.err = err
		return false
	}
	if !resp.HasStatusCode(http.StatusOK) {
		p.err = p.client.listSiteExtensionsSlotHandleError(resp)
		return false
	}
	result, err := p.client.listSiteExtensionsSlotHandleResponse(resp)
	if err != nil {
		p.err = err
		return false
	}
	p.current = result
	return true
}

func (p *webAppsListSiteExtensionsSlotPager) PageResponse() WebAppsListSiteExtensionsSlotResponse {
	return p.current
}

type WebAppsListSlotDifferencesFromProductionPager interface {
	azcore.Pager
	// PageResponse returns the current WebAppsListSlotDifferencesFromProductionResponse.
	PageResponse() WebAppsListSlotDifferencesFromProductionResponse
}

type webAppsListSlotDifferencesFromProductionPager struct {
	client    *WebAppsClient
	current   WebAppsListSlotDifferencesFromProductionResponse
	err       error
	requester func(context.Context) (*azcore.Request, error)
	advancer  func(context.Context, WebAppsListSlotDifferencesFromProductionResponse) (*azcore.Request, error)
}

func (p *webAppsListSlotDifferencesFromProductionPager) Err() error {
	return p.err
}

func (p *webAppsListSlotDifferencesFromProductionPager) NextPage(ctx context.Context) bool {
	var req *azcore.Request
	var err error
	if !reflect.ValueOf(p.current).IsZero() {
		if p.current.SlotDifferenceCollection.NextLink == nil || len(*p.current.SlotDifferenceCollection.NextLink) == 0 {
			return false
		}
		req, err = p.advancer(ctx, p.current)
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		p.err = err
		return false
	}
	resp, err := p.client.con.Pipeline().Do(req)
	if err != nil {
		p.err = err
		return false
	}
	if !resp.HasStatusCode(http.StatusOK) {
		p.err = p.client.listSlotDifferencesFromProductionHandleError(resp)
		return false
	}
	result, err := p.client.listSlotDifferencesFromProductionHandleResponse(resp)
	if err != nil {
		p.err = err
		return false
	}
	p.current = result
	return true
}

func (p *webAppsListSlotDifferencesFromProductionPager) PageResponse() WebAppsListSlotDifferencesFromProductionResponse {
	return p.current
}

type WebAppsListSlotDifferencesSlotPager interface {
	azcore.Pager
	// PageResponse returns the current WebAppsListSlotDifferencesSlotResponse.
	PageResponse() WebAppsListSlotDifferencesSlotResponse
}

type webAppsListSlotDifferencesSlotPager struct {
	client    *WebAppsClient
	current   WebAppsListSlotDifferencesSlotResponse
	err       error
	requester func(context.Context) (*azcore.Request, error)
	advancer  func(context.Context, WebAppsListSlotDifferencesSlotResponse) (*azcore.Request, error)
}

func (p *webAppsListSlotDifferencesSlotPager) Err() error {
	return p.err
}

func (p *webAppsListSlotDifferencesSlotPager) NextPage(ctx context.Context) bool {
	var req *azcore.Request
	var err error
	if !reflect.ValueOf(p.current).IsZero() {
		if p.current.SlotDifferenceCollection.NextLink == nil || len(*p.current.SlotDifferenceCollection.NextLink) == 0 {
			return false
		}
		req, err = p.advancer(ctx, p.current)
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		p.err = err
		return false
	}
	resp, err := p.client.con.Pipeline().Do(req)
	if err != nil {
		p.err = err
		return false
	}
	if !resp.HasStatusCode(http.StatusOK) {
		p.err = p.client.listSlotDifferencesSlotHandleError(resp)
		return false
	}
	result, err := p.client.listSlotDifferencesSlotHandleResponse(resp)
	if err != nil {
		p.err = err
		return false
	}
	p.current = result
	return true
}

func (p *webAppsListSlotDifferencesSlotPager) PageResponse() WebAppsListSlotDifferencesSlotResponse {
	return p.current
}

type WebAppsListSlotsPager interface {
	azcore.Pager
	// PageResponse returns the current WebAppsListSlotsResponse.
	PageResponse() WebAppsListSlotsResponse
}

type webAppsListSlotsPager struct {
	client    *WebAppsClient
	current   WebAppsListSlotsResponse
	err       error
	requester func(context.Context) (*azcore.Request, error)
	advancer  func(context.Context, WebAppsListSlotsResponse) (*azcore.Request, error)
}

func (p *webAppsListSlotsPager) Err() error {
	return p.err
}

func (p *webAppsListSlotsPager) NextPage(ctx context.Context) bool {
	var req *azcore.Request
	var err error
	if !reflect.ValueOf(p.current).IsZero() {
		if p.current.WebAppCollection.NextLink == nil || len(*p.current.WebAppCollection.NextLink) == 0 {
			return false
		}
		req, err = p.advancer(ctx, p.current)
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		p.err = err
		return false
	}
	resp, err := p.client.con.Pipeline().Do(req)
	if err != nil {
		p.err = err
		return false
	}
	if !resp.HasStatusCode(http.StatusOK) {
		p.err = p.client.listSlotsHandleError(resp)
		return false
	}
	result, err := p.client.listSlotsHandleResponse(resp)
	if err != nil {
		p.err = err
		return false
	}
	p.current = result
	return true
}

func (p *webAppsListSlotsPager) PageResponse() WebAppsListSlotsResponse {
	return p.current
}

type WebAppsListSnapshotsFromDRSecondaryPager interface {
	azcore.Pager
	// PageResponse returns the current WebAppsListSnapshotsFromDRSecondaryResponse.
	PageResponse() WebAppsListSnapshotsFromDRSecondaryResponse
}

type webAppsListSnapshotsFromDRSecondaryPager struct {
	client    *WebAppsClient
	current   WebAppsListSnapshotsFromDRSecondaryResponse
	err       error
	requester func(context.Context) (*azcore.Request, error)
	advancer  func(context.Context, WebAppsListSnapshotsFromDRSecondaryResponse) (*azcore.Request, error)
}

func (p *webAppsListSnapshotsFromDRSecondaryPager) Err() error {
	return p.err
}

func (p *webAppsListSnapshotsFromDRSecondaryPager) NextPage(ctx context.Context) bool {
	var req *azcore.Request
	var err error
	if !reflect.ValueOf(p.current).IsZero() {
		if p.current.SnapshotCollection.NextLink == nil || len(*p.current.SnapshotCollection.NextLink) == 0 {
			return false
		}
		req, err = p.advancer(ctx, p.current)
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		p.err = err
		return false
	}
	resp, err := p.client.con.Pipeline().Do(req)
	if err != nil {
		p.err = err
		return false
	}
	if !resp.HasStatusCode(http.StatusOK) {
		p.err = p.client.listSnapshotsFromDRSecondaryHandleError(resp)
		return false
	}
	result, err := p.client.listSnapshotsFromDRSecondaryHandleResponse(resp)
	if err != nil {
		p.err = err
		return false
	}
	p.current = result
	return true
}

func (p *webAppsListSnapshotsFromDRSecondaryPager) PageResponse() WebAppsListSnapshotsFromDRSecondaryResponse {
	return p.current
}

type WebAppsListSnapshotsFromDRSecondarySlotPager interface {
	azcore.Pager
	// PageResponse returns the current WebAppsListSnapshotsFromDRSecondarySlotResponse.
	PageResponse() WebAppsListSnapshotsFromDRSecondarySlotResponse
}

type webAppsListSnapshotsFromDRSecondarySlotPager struct {
	client    *WebAppsClient
	current   WebAppsListSnapshotsFromDRSecondarySlotResponse
	err       error
	requester func(context.Context) (*azcore.Request, error)
	advancer  func(context.Context, WebAppsListSnapshotsFromDRSecondarySlotResponse) (*azcore.Request, error)
}

func (p *webAppsListSnapshotsFromDRSecondarySlotPager) Err() error {
	return p.err
}

func (p *webAppsListSnapshotsFromDRSecondarySlotPager) NextPage(ctx context.Context) bool {
	var req *azcore.Request
	var err error
	if !reflect.ValueOf(p.current).IsZero() {
		if p.current.SnapshotCollection.NextLink == nil || len(*p.current.SnapshotCollection.NextLink) == 0 {
			return false
		}
		req, err = p.advancer(ctx, p.current)
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		p.err = err
		return false
	}
	resp, err := p.client.con.Pipeline().Do(req)
	if err != nil {
		p.err = err
		return false
	}
	if !resp.HasStatusCode(http.StatusOK) {
		p.err = p.client.listSnapshotsFromDRSecondarySlotHandleError(resp)
		return false
	}
	result, err := p.client.listSnapshotsFromDRSecondarySlotHandleResponse(resp)
	if err != nil {
		p.err = err
		return false
	}
	p.current = result
	return true
}

func (p *webAppsListSnapshotsFromDRSecondarySlotPager) PageResponse() WebAppsListSnapshotsFromDRSecondarySlotResponse {
	return p.current
}

type WebAppsListSnapshotsPager interface {
	azcore.Pager
	// PageResponse returns the current WebAppsListSnapshotsResponse.
	PageResponse() WebAppsListSnapshotsResponse
}

type webAppsListSnapshotsPager struct {
	client    *WebAppsClient
	current   WebAppsListSnapshotsResponse
	err       error
	requester func(context.Context) (*azcore.Request, error)
	advancer  func(context.Context, WebAppsListSnapshotsResponse) (*azcore.Request, error)
}

func (p *webAppsListSnapshotsPager) Err() error {
	return p.err
}

func (p *webAppsListSnapshotsPager) NextPage(ctx context.Context) bool {
	var req *azcore.Request
	var err error
	if !reflect.ValueOf(p.current).IsZero() {
		if p.current.SnapshotCollection.NextLink == nil || len(*p.current.SnapshotCollection.NextLink) == 0 {
			return false
		}
		req, err = p.advancer(ctx, p.current)
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		p.err = err
		return false
	}
	resp, err := p.client.con.Pipeline().Do(req)
	if err != nil {
		p.err = err
		return false
	}
	if !resp.HasStatusCode(http.StatusOK) {
		p.err = p.client.listSnapshotsHandleError(resp)
		return false
	}
	result, err := p.client.listSnapshotsHandleResponse(resp)
	if err != nil {
		p.err = err
		return false
	}
	p.current = result
	return true
}

func (p *webAppsListSnapshotsPager) PageResponse() WebAppsListSnapshotsResponse {
	return p.current
}

type WebAppsListSnapshotsSlotPager interface {
	azcore.Pager
	// PageResponse returns the current WebAppsListSnapshotsSlotResponse.
	PageResponse() WebAppsListSnapshotsSlotResponse
}

type webAppsListSnapshotsSlotPager struct {
	client    *WebAppsClient
	current   WebAppsListSnapshotsSlotResponse
	err       error
	requester func(context.Context) (*azcore.Request, error)
	advancer  func(context.Context, WebAppsListSnapshotsSlotResponse) (*azcore.Request, error)
}

func (p *webAppsListSnapshotsSlotPager) Err() error {
	return p.err
}

func (p *webAppsListSnapshotsSlotPager) NextPage(ctx context.Context) bool {
	var req *azcore.Request
	var err error
	if !reflect.ValueOf(p.current).IsZero() {
		if p.current.SnapshotCollection.NextLink == nil || len(*p.current.SnapshotCollection.NextLink) == 0 {
			return false
		}
		req, err = p.advancer(ctx, p.current)
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		p.err = err
		return false
	}
	resp, err := p.client.con.Pipeline().Do(req)
	if err != nil {
		p.err = err
		return false
	}
	if !resp.HasStatusCode(http.StatusOK) {
		p.err = p.client.listSnapshotsSlotHandleError(resp)
		return false
	}
	result, err := p.client.listSnapshotsSlotHandleResponse(resp)
	if err != nil {
		p.err = err
		return false
	}
	p.current = result
	return true
}

func (p *webAppsListSnapshotsSlotPager) PageResponse() WebAppsListSnapshotsSlotResponse {
	return p.current
}

type WebAppsListTriggeredWebJobHistoryPager interface {
	azcore.Pager
	// PageResponse returns the current WebAppsListTriggeredWebJobHistoryResponse.
	PageResponse() WebAppsListTriggeredWebJobHistoryResponse
}

type webAppsListTriggeredWebJobHistoryPager struct {
	client    *WebAppsClient
	current   WebAppsListTriggeredWebJobHistoryResponse
	err       error
	requester func(context.Context) (*azcore.Request, error)
	advancer  func(context.Context, WebAppsListTriggeredWebJobHistoryResponse) (*azcore.Request, error)
}

func (p *webAppsListTriggeredWebJobHistoryPager) Err() error {
	return p.err
}

func (p *webAppsListTriggeredWebJobHistoryPager) NextPage(ctx context.Context) bool {
	var req *azcore.Request
	var err error
	if !reflect.ValueOf(p.current).IsZero() {
		if p.current.TriggeredJobHistoryCollection.NextLink == nil || len(*p.current.TriggeredJobHistoryCollection.NextLink) == 0 {
			return false
		}
		req, err = p.advancer(ctx, p.current)
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		p.err = err
		return false
	}
	resp, err := p.client.con.Pipeline().Do(req)
	if err != nil {
		p.err = err
		return false
	}
	if !resp.HasStatusCode(http.StatusOK) {
		p.err = p.client.listTriggeredWebJobHistoryHandleError(resp)
		return false
	}
	result, err := p.client.listTriggeredWebJobHistoryHandleResponse(resp)
	if err != nil {
		p.err = err
		return false
	}
	p.current = result
	return true
}

func (p *webAppsListTriggeredWebJobHistoryPager) PageResponse() WebAppsListTriggeredWebJobHistoryResponse {
	return p.current
}

type WebAppsListTriggeredWebJobHistorySlotPager interface {
	azcore.Pager
	// PageResponse returns the current WebAppsListTriggeredWebJobHistorySlotResponse.
	PageResponse() WebAppsListTriggeredWebJobHistorySlotResponse
}

type webAppsListTriggeredWebJobHistorySlotPager struct {
	client    *WebAppsClient
	current   WebAppsListTriggeredWebJobHistorySlotResponse
	err       error
	requester func(context.Context) (*azcore.Request, error)
	advancer  func(context.Context, WebAppsListTriggeredWebJobHistorySlotResponse) (*azcore.Request, error)
}

func (p *webAppsListTriggeredWebJobHistorySlotPager) Err() error {
	return p.err
}

func (p *webAppsListTriggeredWebJobHistorySlotPager) NextPage(ctx context.Context) bool {
	var req *azcore.Request
	var err error
	if !reflect.ValueOf(p.current).IsZero() {
		if p.current.TriggeredJobHistoryCollection.NextLink == nil || len(*p.current.TriggeredJobHistoryCollection.NextLink) == 0 {
			return false
		}
		req, err = p.advancer(ctx, p.current)
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		p.err = err
		return false
	}
	resp, err := p.client.con.Pipeline().Do(req)
	if err != nil {
		p.err = err
		return false
	}
	if !resp.HasStatusCode(http.StatusOK) {
		p.err = p.client.listTriggeredWebJobHistorySlotHandleError(resp)
		return false
	}
	result, err := p.client.listTriggeredWebJobHistorySlotHandleResponse(resp)
	if err != nil {
		p.err = err
		return false
	}
	p.current = result
	return true
}

func (p *webAppsListTriggeredWebJobHistorySlotPager) PageResponse() WebAppsListTriggeredWebJobHistorySlotResponse {
	return p.current
}

type WebAppsListTriggeredWebJobsPager interface {
	azcore.Pager
	// PageResponse returns the current WebAppsListTriggeredWebJobsResponse.
	PageResponse() WebAppsListTriggeredWebJobsResponse
}

type webAppsListTriggeredWebJobsPager struct {
	client    *WebAppsClient
	current   WebAppsListTriggeredWebJobsResponse
	err       error
	requester func(context.Context) (*azcore.Request, error)
	advancer  func(context.Context, WebAppsListTriggeredWebJobsResponse) (*azcore.Request, error)
}

func (p *webAppsListTriggeredWebJobsPager) Err() error {
	return p.err
}

func (p *webAppsListTriggeredWebJobsPager) NextPage(ctx context.Context) bool {
	var req *azcore.Request
	var err error
	if !reflect.ValueOf(p.current).IsZero() {
		if p.current.TriggeredWebJobCollection.NextLink == nil || len(*p.current.TriggeredWebJobCollection.NextLink) == 0 {
			return false
		}
		req, err = p.advancer(ctx, p.current)
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		p.err = err
		return false
	}
	resp, err := p.client.con.Pipeline().Do(req)
	if err != nil {
		p.err = err
		return false
	}
	if !resp.HasStatusCode(http.StatusOK) {
		p.err = p.client.listTriggeredWebJobsHandleError(resp)
		return false
	}
	result, err := p.client.listTriggeredWebJobsHandleResponse(resp)
	if err != nil {
		p.err = err
		return false
	}
	p.current = result
	return true
}

func (p *webAppsListTriggeredWebJobsPager) PageResponse() WebAppsListTriggeredWebJobsResponse {
	return p.current
}

type WebAppsListTriggeredWebJobsSlotPager interface {
	azcore.Pager
	// PageResponse returns the current WebAppsListTriggeredWebJobsSlotResponse.
	PageResponse() WebAppsListTriggeredWebJobsSlotResponse
}

type webAppsListTriggeredWebJobsSlotPager struct {
	client    *WebAppsClient
	current   WebAppsListTriggeredWebJobsSlotResponse
	err       error
	requester func(context.Context) (*azcore.Request, error)
	advancer  func(context.Context, WebAppsListTriggeredWebJobsSlotResponse) (*azcore.Request, error)
}

func (p *webAppsListTriggeredWebJobsSlotPager) Err() error {
	return p.err
}

func (p *webAppsListTriggeredWebJobsSlotPager) NextPage(ctx context.Context) bool {
	var req *azcore.Request
	var err error
	if !reflect.ValueOf(p.current).IsZero() {
		if p.current.TriggeredWebJobCollection.NextLink == nil || len(*p.current.TriggeredWebJobCollection.NextLink) == 0 {
			return false
		}
		req, err = p.advancer(ctx, p.current)
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		p.err = err
		return false
	}
	resp, err := p.client.con.Pipeline().Do(req)
	if err != nil {
		p.err = err
		return false
	}
	if !resp.HasStatusCode(http.StatusOK) {
		p.err = p.client.listTriggeredWebJobsSlotHandleError(resp)
		return false
	}
	result, err := p.client.listTriggeredWebJobsSlotHandleResponse(resp)
	if err != nil {
		p.err = err
		return false
	}
	p.current = result
	return true
}

func (p *webAppsListTriggeredWebJobsSlotPager) PageResponse() WebAppsListTriggeredWebJobsSlotResponse {
	return p.current
}

type WebAppsListUsagesPager interface {
	azcore.Pager
	// PageResponse returns the current WebAppsListUsagesResponse.
	PageResponse() WebAppsListUsagesResponse
}

type webAppsListUsagesPager struct {
	client    *WebAppsClient
	current   WebAppsListUsagesResponse
	err       error
	requester func(context.Context) (*azcore.Request, error)
	advancer  func(context.Context, WebAppsListUsagesResponse) (*azcore.Request, error)
}

func (p *webAppsListUsagesPager) Err() error {
	return p.err
}

func (p *webAppsListUsagesPager) NextPage(ctx context.Context) bool {
	var req *azcore.Request
	var err error
	if !reflect.ValueOf(p.current).IsZero() {
		if p.current.CsmUsageQuotaCollection.NextLink == nil || len(*p.current.CsmUsageQuotaCollection.NextLink) == 0 {
			return false
		}
		req, err = p.advancer(ctx, p.current)
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		p.err = err
		return false
	}
	resp, err := p.client.con.Pipeline().Do(req)
	if err != nil {
		p.err = err
		return false
	}
	if !resp.HasStatusCode(http.StatusOK) {
		p.err = p.client.listUsagesHandleError(resp)
		return false
	}
	result, err := p.client.listUsagesHandleResponse(resp)
	if err != nil {
		p.err = err
		return false
	}
	p.current = result
	return true
}

func (p *webAppsListUsagesPager) PageResponse() WebAppsListUsagesResponse {
	return p.current
}

type WebAppsListUsagesSlotPager interface {
	azcore.Pager
	// PageResponse returns the current WebAppsListUsagesSlotResponse.
	PageResponse() WebAppsListUsagesSlotResponse
}

type webAppsListUsagesSlotPager struct {
	client    *WebAppsClient
	current   WebAppsListUsagesSlotResponse
	err       error
	requester func(context.Context) (*azcore.Request, error)
	advancer  func(context.Context, WebAppsListUsagesSlotResponse) (*azcore.Request, error)
}

func (p *webAppsListUsagesSlotPager) Err() error {
	return p.err
}

func (p *webAppsListUsagesSlotPager) NextPage(ctx context.Context) bool {
	var req *azcore.Request
	var err error
	if !reflect.ValueOf(p.current).IsZero() {
		if p.current.CsmUsageQuotaCollection.NextLink == nil || len(*p.current.CsmUsageQuotaCollection.NextLink) == 0 {
			return false
		}
		req, err = p.advancer(ctx, p.current)
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		p.err = err
		return false
	}
	resp, err := p.client.con.Pipeline().Do(req)
	if err != nil {
		p.err = err
		return false
	}
	if !resp.HasStatusCode(http.StatusOK) {
		p.err = p.client.listUsagesSlotHandleError(resp)
		return false
	}
	result, err := p.client.listUsagesSlotHandleResponse(resp)
	if err != nil {
		p.err = err
		return false
	}
	p.current = result
	return true
}

func (p *webAppsListUsagesSlotPager) PageResponse() WebAppsListUsagesSlotResponse {
	return p.current
}

type WebAppsListWebJobsPager interface {
	azcore.Pager
	// PageResponse returns the current WebAppsListWebJobsResponse.
	PageResponse() WebAppsListWebJobsResponse
}

type webAppsListWebJobsPager struct {
	client    *WebAppsClient
	current   WebAppsListWebJobsResponse
	err       error
	requester func(context.Context) (*azcore.Request, error)
	advancer  func(context.Context, WebAppsListWebJobsResponse) (*azcore.Request, error)
}

func (p *webAppsListWebJobsPager) Err() error {
	return p.err
}

func (p *webAppsListWebJobsPager) NextPage(ctx context.Context) bool {
	var req *azcore.Request
	var err error
	if !reflect.ValueOf(p.current).IsZero() {
		if p.current.WebJobCollection.NextLink == nil || len(*p.current.WebJobCollection.NextLink) == 0 {
			return false
		}
		req, err = p.advancer(ctx, p.current)
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		p.err = err
		return false
	}
	resp, err := p.client.con.Pipeline().Do(req)
	if err != nil {
		p.err = err
		return false
	}
	if !resp.HasStatusCode(http.StatusOK) {
		p.err = p.client.listWebJobsHandleError(resp)
		return false
	}
	result, err := p.client.listWebJobsHandleResponse(resp)
	if err != nil {
		p.err = err
		return false
	}
	p.current = result
	return true
}

func (p *webAppsListWebJobsPager) PageResponse() WebAppsListWebJobsResponse {
	return p.current
}

type WebAppsListWebJobsSlotPager interface {
	azcore.Pager
	// PageResponse returns the current WebAppsListWebJobsSlotResponse.
	PageResponse() WebAppsListWebJobsSlotResponse
}

type webAppsListWebJobsSlotPager struct {
	client    *WebAppsClient
	current   WebAppsListWebJobsSlotResponse
	err       error
	requester func(context.Context) (*azcore.Request, error)
	advancer  func(context.Context, WebAppsListWebJobsSlotResponse) (*azcore.Request, error)
}

func (p *webAppsListWebJobsSlotPager) Err() error {
	return p.err
}

func (p *webAppsListWebJobsSlotPager) NextPage(ctx context.Context) bool {
	var req *azcore.Request
	var err error
	if !reflect.ValueOf(p.current).IsZero() {
		if p.current.WebJobCollection.NextLink == nil || len(*p.current.WebJobCollection.NextLink) == 0 {
			return false
		}
		req, err = p.advancer(ctx, p.current)
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		p.err = err
		return false
	}
	resp, err := p.client.con.Pipeline().Do(req)
	if err != nil {
		p.err = err
		return false
	}
	if !resp.HasStatusCode(http.StatusOK) {
		p.err = p.client.listWebJobsSlotHandleError(resp)
		return false
	}
	result, err := p.client.listWebJobsSlotHandleResponse(resp)
	if err != nil {
		p.err = err
		return false
	}
	p.current = result
	return true
}

func (p *webAppsListWebJobsSlotPager) PageResponse() WebAppsListWebJobsSlotResponse {
	return p.current
}

type WebSiteManagementClientListBillingMetersPager interface {
	azcore.Pager
	// PageResponse returns the current WebSiteManagementClientListBillingMetersResponse.
	PageResponse() WebSiteManagementClientListBillingMetersResponse
}

type webSiteManagementClientListBillingMetersPager struct {
	client    *WebSiteManagementClient
	current   WebSiteManagementClientListBillingMetersResponse
	err       error
	requester func(context.Context) (*azcore.Request, error)
	advancer  func(context.Context, WebSiteManagementClientListBillingMetersResponse) (*azcore.Request, error)
}

func (p *webSiteManagementClientListBillingMetersPager) Err() error {
	return p.err
}

func (p *webSiteManagementClientListBillingMetersPager) NextPage(ctx context.Context) bool {
	var req *azcore.Request
	var err error
	if !reflect.ValueOf(p.current).IsZero() {
		if p.current.BillingMeterCollection.NextLink == nil || len(*p.current.BillingMeterCollection.NextLink) == 0 {
			return false
		}
		req, err = p.advancer(ctx, p.current)
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		p.err = err
		return false
	}
	resp, err := p.client.con.Pipeline().Do(req)
	if err != nil {
		p.err = err
		return false
	}
	if !resp.HasStatusCode(http.StatusOK) {
		p.err = p.client.listBillingMetersHandleError(resp)
		return false
	}
	result, err := p.client.listBillingMetersHandleResponse(resp)
	if err != nil {
		p.err = err
		return false
	}
	p.current = result
	return true
}

func (p *webSiteManagementClientListBillingMetersPager) PageResponse() WebSiteManagementClientListBillingMetersResponse {
	return p.current
}

type WebSiteManagementClientListGeoRegionsPager interface {
	azcore.Pager
	// PageResponse returns the current WebSiteManagementClientListGeoRegionsResponse.
	PageResponse() WebSiteManagementClientListGeoRegionsResponse
}

type webSiteManagementClientListGeoRegionsPager struct {
	client    *WebSiteManagementClient
	current   WebSiteManagementClientListGeoRegionsResponse
	err       error
	requester func(context.Context) (*azcore.Request, error)
	advancer  func(context.Context, WebSiteManagementClientListGeoRegionsResponse) (*azcore.Request, error)
}

func (p *webSiteManagementClientListGeoRegionsPager) Err() error {
	return p.err
}

func (p *webSiteManagementClientListGeoRegionsPager) NextPage(ctx context.Context) bool {
	var req *azcore.Request
	var err error
	if !reflect.ValueOf(p.current).IsZero() {
		if p.current.GeoRegionCollection.NextLink == nil || len(*p.current.GeoRegionCollection.NextLink) == 0 {
			return false
		}
		req, err = p.advancer(ctx, p.current)
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		p.err = err
		return false
	}
	resp, err := p.client.con.Pipeline().Do(req)
	if err != nil {
		p.err = err
		return false
	}
	if !resp.HasStatusCode(http.StatusOK) {
		p.err = p.client.listGeoRegionsHandleError(resp)
		return false
	}
	result, err := p.client.listGeoRegionsHandleResponse(resp)
	if err != nil {
		p.err = err
		return false
	}
	p.current = result
	return true
}

func (p *webSiteManagementClientListGeoRegionsPager) PageResponse() WebSiteManagementClientListGeoRegionsResponse {
	return p.current
}

type WebSiteManagementClientListPremierAddOnOffersPager interface {
	azcore.Pager
	// PageResponse returns the current WebSiteManagementClientListPremierAddOnOffersResponse.
	PageResponse() WebSiteManagementClientListPremierAddOnOffersResponse
}

type webSiteManagementClientListPremierAddOnOffersPager struct {
	client    *WebSiteManagementClient
	current   WebSiteManagementClientListPremierAddOnOffersResponse
	err       error
	requester func(context.Context) (*azcore.Request, error)
	advancer  func(context.Context, WebSiteManagementClientListPremierAddOnOffersResponse) (*azcore.Request, error)
}

func (p *webSiteManagementClientListPremierAddOnOffersPager) Err() error {
	return p.err
}

func (p *webSiteManagementClientListPremierAddOnOffersPager) NextPage(ctx context.Context) bool {
	var req *azcore.Request
	var err error
	if !reflect.ValueOf(p.current).IsZero() {
		if p.current.PremierAddOnOfferCollection.NextLink == nil || len(*p.current.PremierAddOnOfferCollection.NextLink) == 0 {
			return false
		}
		req, err = p.advancer(ctx, p.current)
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		p.err = err
		return false
	}
	resp, err := p.client.con.Pipeline().Do(req)
	if err != nil {
		p.err = err
		return false
	}
	if !resp.HasStatusCode(http.StatusOK) {
		p.err = p.client.listPremierAddOnOffersHandleError(resp)
		return false
	}
	result, err := p.client.listPremierAddOnOffersHandleResponse(resp)
	if err != nil {
		p.err = err
		return false
	}
	p.current = result
	return true
}

func (p *webSiteManagementClientListPremierAddOnOffersPager) PageResponse() WebSiteManagementClientListPremierAddOnOffersResponse {
	return p.current
}

type WebSiteManagementClientListSiteIdentifiersAssignedToHostNamePager interface {
	azcore.Pager
	// PageResponse returns the current WebSiteManagementClientListSiteIdentifiersAssignedToHostNameResponse.
	PageResponse() WebSiteManagementClientListSiteIdentifiersAssignedToHostNameResponse
}

type webSiteManagementClientListSiteIdentifiersAssignedToHostNamePager struct {
	client    *WebSiteManagementClient
	current   WebSiteManagementClientListSiteIdentifiersAssignedToHostNameResponse
	err       error
	requester func(context.Context) (*azcore.Request, error)
	advancer  func(context.Context, WebSiteManagementClientListSiteIdentifiersAssignedToHostNameResponse) (*azcore.Request, error)
}

func (p *webSiteManagementClientListSiteIdentifiersAssignedToHostNamePager) Err() error {
	return p.err
}

func (p *webSiteManagementClientListSiteIdentifiersAssignedToHostNamePager) NextPage(ctx context.Context) bool {
	var req *azcore.Request
	var err error
	if !reflect.ValueOf(p.current).IsZero() {
		if p.current.IdentifierCollection.NextLink == nil || len(*p.current.IdentifierCollection.NextLink) == 0 {
			return false
		}
		req, err = p.advancer(ctx, p.current)
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		p.err = err
		return false
	}
	resp, err := p.client.con.Pipeline().Do(req)
	if err != nil {
		p.err = err
		return false
	}
	if !resp.HasStatusCode(http.StatusOK) {
		p.err = p.client.listSiteIdentifiersAssignedToHostNameHandleError(resp)
		return false
	}
	result, err := p.client.listSiteIdentifiersAssignedToHostNameHandleResponse(resp)
	if err != nil {
		p.err = err
		return false
	}
	p.current = result
	return true
}

func (p *webSiteManagementClientListSiteIdentifiersAssignedToHostNamePager) PageResponse() WebSiteManagementClientListSiteIdentifiersAssignedToHostNameResponse {
	return p.current
}

type WebSiteManagementClientListSourceControlsPager interface {
	azcore.Pager
	// PageResponse returns the current WebSiteManagementClientListSourceControlsResponse.
	PageResponse() WebSiteManagementClientListSourceControlsResponse
}

type webSiteManagementClientListSourceControlsPager struct {
	client    *WebSiteManagementClient
	current   WebSiteManagementClientListSourceControlsResponse
	err       error
	requester func(context.Context) (*azcore.Request, error)
	advancer  func(context.Context, WebSiteManagementClientListSourceControlsResponse) (*azcore.Request, error)
}

func (p *webSiteManagementClientListSourceControlsPager) Err() error {
	return p.err
}

func (p *webSiteManagementClientListSourceControlsPager) NextPage(ctx context.Context) bool {
	var req *azcore.Request
	var err error
	if !reflect.ValueOf(p.current).IsZero() {
		if p.current.SourceControlCollection.NextLink == nil || len(*p.current.SourceControlCollection.NextLink) == 0 {
			return false
		}
		req, err = p.advancer(ctx, p.current)
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		p.err = err
		return false
	}
	resp, err := p.client.con.Pipeline().Do(req)
	if err != nil {
		p.err = err
		return false
	}
	if !resp.HasStatusCode(http.StatusOK) {
		p.err = p.client.listSourceControlsHandleError(resp)
		return false
	}
	result, err := p.client.listSourceControlsHandleResponse(resp)
	if err != nil {
		p.err = err
		return false
	}
	p.current = result
	return true
}

func (p *webSiteManagementClientListSourceControlsPager) PageResponse() WebSiteManagementClientListSourceControlsResponse {
	return p.current
}
