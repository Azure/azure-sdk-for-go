//go:build go1.16
// +build go1.16

// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

package armweb

import (
	"context"
	"net/http"
	"reflect"

	"github.com/Azure/azure-sdk-for-go/sdk/azcore/policy"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/runtime"
)

// AppServiceCertificateOrdersListByResourceGroupPager provides operations for iterating over paged responses.
type AppServiceCertificateOrdersListByResourceGroupPager struct {
	client    *AppServiceCertificateOrdersClient
	current   AppServiceCertificateOrdersListByResourceGroupResponse
	err       error
	requester func(context.Context) (*policy.Request, error)
	advancer  func(context.Context, AppServiceCertificateOrdersListByResourceGroupResponse) (*policy.Request, error)
}

// Err returns the last error encountered while paging.
func (p *AppServiceCertificateOrdersListByResourceGroupPager) Err() error {
	return p.err
}

// NextPage returns true if the pager advanced to the next page.
// Returns false if there are no more pages or an error occurred.
func (p *AppServiceCertificateOrdersListByResourceGroupPager) NextPage(ctx context.Context) bool {
	var req *policy.Request
	var err error
	if !reflect.ValueOf(p.current).IsZero() {
		if p.current.AppServiceCertificateOrderCollection.NextLink == nil || len(*p.current.AppServiceCertificateOrderCollection.NextLink) == 0 {
			return false
		}
		req, err = p.advancer(ctx, p.current)
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		p.err = err
		return false
	}
	resp, err := p.client.pl.Do(req)
	if err != nil {
		p.err = err
		return false
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {
		p.err = p.client.listByResourceGroupHandleError(resp)
		return false
	}
	result, err := p.client.listByResourceGroupHandleResponse(resp)
	if err != nil {
		p.err = err
		return false
	}
	p.current = result
	return true
}

// PageResponse returns the current AppServiceCertificateOrdersListByResourceGroupResponse page.
func (p *AppServiceCertificateOrdersListByResourceGroupPager) PageResponse() AppServiceCertificateOrdersListByResourceGroupResponse {
	return p.current
}

// AppServiceCertificateOrdersListCertificatesPager provides operations for iterating over paged responses.
type AppServiceCertificateOrdersListCertificatesPager struct {
	client    *AppServiceCertificateOrdersClient
	current   AppServiceCertificateOrdersListCertificatesResponse
	err       error
	requester func(context.Context) (*policy.Request, error)
	advancer  func(context.Context, AppServiceCertificateOrdersListCertificatesResponse) (*policy.Request, error)
}

// Err returns the last error encountered while paging.
func (p *AppServiceCertificateOrdersListCertificatesPager) Err() error {
	return p.err
}

// NextPage returns true if the pager advanced to the next page.
// Returns false if there are no more pages or an error occurred.
func (p *AppServiceCertificateOrdersListCertificatesPager) NextPage(ctx context.Context) bool {
	var req *policy.Request
	var err error
	if !reflect.ValueOf(p.current).IsZero() {
		if p.current.AppServiceCertificateCollection.NextLink == nil || len(*p.current.AppServiceCertificateCollection.NextLink) == 0 {
			return false
		}
		req, err = p.advancer(ctx, p.current)
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		p.err = err
		return false
	}
	resp, err := p.client.pl.Do(req)
	if err != nil {
		p.err = err
		return false
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {
		p.err = p.client.listCertificatesHandleError(resp)
		return false
	}
	result, err := p.client.listCertificatesHandleResponse(resp)
	if err != nil {
		p.err = err
		return false
	}
	p.current = result
	return true
}

// PageResponse returns the current AppServiceCertificateOrdersListCertificatesResponse page.
func (p *AppServiceCertificateOrdersListCertificatesPager) PageResponse() AppServiceCertificateOrdersListCertificatesResponse {
	return p.current
}

// AppServiceCertificateOrdersListPager provides operations for iterating over paged responses.
type AppServiceCertificateOrdersListPager struct {
	client    *AppServiceCertificateOrdersClient
	current   AppServiceCertificateOrdersListResponse
	err       error
	requester func(context.Context) (*policy.Request, error)
	advancer  func(context.Context, AppServiceCertificateOrdersListResponse) (*policy.Request, error)
}

// Err returns the last error encountered while paging.
func (p *AppServiceCertificateOrdersListPager) Err() error {
	return p.err
}

// NextPage returns true if the pager advanced to the next page.
// Returns false if there are no more pages or an error occurred.
func (p *AppServiceCertificateOrdersListPager) NextPage(ctx context.Context) bool {
	var req *policy.Request
	var err error
	if !reflect.ValueOf(p.current).IsZero() {
		if p.current.AppServiceCertificateOrderCollection.NextLink == nil || len(*p.current.AppServiceCertificateOrderCollection.NextLink) == 0 {
			return false
		}
		req, err = p.advancer(ctx, p.current)
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		p.err = err
		return false
	}
	resp, err := p.client.pl.Do(req)
	if err != nil {
		p.err = err
		return false
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {
		p.err = p.client.listHandleError(resp)
		return false
	}
	result, err := p.client.listHandleResponse(resp)
	if err != nil {
		p.err = err
		return false
	}
	p.current = result
	return true
}

// PageResponse returns the current AppServiceCertificateOrdersListResponse page.
func (p *AppServiceCertificateOrdersListPager) PageResponse() AppServiceCertificateOrdersListResponse {
	return p.current
}

// AppServiceEnvironmentsChangeVnetPager provides operations for iterating over paged responses.
type AppServiceEnvironmentsChangeVnetPager struct {
	client  *AppServiceEnvironmentsClient
	current AppServiceEnvironmentsChangeVnetResponse
	err     error
	second  bool
}

// Err returns the last error encountered while paging.
func (p *AppServiceEnvironmentsChangeVnetPager) Err() error {
	return p.err
}

// NextPage returns true if the pager advanced to the next page.
// Returns false if there are no more pages or an error occurred.
func (p *AppServiceEnvironmentsChangeVnetPager) NextPage(ctx context.Context) bool {
	if !p.second {
		p.second = true
		return true
	} else if !reflect.ValueOf(p.current).IsZero() {
		if p.current.WebAppCollection.NextLink == nil || len(*p.current.WebAppCollection.NextLink) == 0 {
			return false
		}
	}
	req, err := runtime.NewRequest(ctx, http.MethodGet, *p.current.WebAppCollection.NextLink)
	if err != nil {
		p.err = err
		return false
	}
	resp, err := p.client.pl.Do(req)
	if err != nil {
		p.err = err
		return false
	}
	if !runtime.HasStatusCode(resp, http.StatusOK, http.StatusCreated, http.StatusAccepted) {
		p.err = p.client.changeVnetHandleError(resp)
		return false
	}
	result, err := p.client.changeVnetHandleResponse(resp)
	if err != nil {
		p.err = err
		return false
	}
	p.current = result
	return true
}

// PageResponse returns the current AppServiceEnvironmentsChangeVnetResponse page.
func (p *AppServiceEnvironmentsChangeVnetPager) PageResponse() AppServiceEnvironmentsChangeVnetResponse {
	return p.current
}

// AppServiceEnvironmentsGetInboundNetworkDependenciesEndpointsPager provides operations for iterating over paged responses.
type AppServiceEnvironmentsGetInboundNetworkDependenciesEndpointsPager struct {
	client    *AppServiceEnvironmentsClient
	current   AppServiceEnvironmentsGetInboundNetworkDependenciesEndpointsResponse
	err       error
	requester func(context.Context) (*policy.Request, error)
	advancer  func(context.Context, AppServiceEnvironmentsGetInboundNetworkDependenciesEndpointsResponse) (*policy.Request, error)
}

// Err returns the last error encountered while paging.
func (p *AppServiceEnvironmentsGetInboundNetworkDependenciesEndpointsPager) Err() error {
	return p.err
}

// NextPage returns true if the pager advanced to the next page.
// Returns false if there are no more pages or an error occurred.
func (p *AppServiceEnvironmentsGetInboundNetworkDependenciesEndpointsPager) NextPage(ctx context.Context) bool {
	var req *policy.Request
	var err error
	if !reflect.ValueOf(p.current).IsZero() {
		if p.current.InboundEnvironmentEndpointCollection.NextLink == nil || len(*p.current.InboundEnvironmentEndpointCollection.NextLink) == 0 {
			return false
		}
		req, err = p.advancer(ctx, p.current)
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		p.err = err
		return false
	}
	resp, err := p.client.pl.Do(req)
	if err != nil {
		p.err = err
		return false
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {
		p.err = p.client.getInboundNetworkDependenciesEndpointsHandleError(resp)
		return false
	}
	result, err := p.client.getInboundNetworkDependenciesEndpointsHandleResponse(resp)
	if err != nil {
		p.err = err
		return false
	}
	p.current = result
	return true
}

// PageResponse returns the current AppServiceEnvironmentsGetInboundNetworkDependenciesEndpointsResponse page.
func (p *AppServiceEnvironmentsGetInboundNetworkDependenciesEndpointsPager) PageResponse() AppServiceEnvironmentsGetInboundNetworkDependenciesEndpointsResponse {
	return p.current
}

// AppServiceEnvironmentsGetOutboundNetworkDependenciesEndpointsPager provides operations for iterating over paged responses.
type AppServiceEnvironmentsGetOutboundNetworkDependenciesEndpointsPager struct {
	client    *AppServiceEnvironmentsClient
	current   AppServiceEnvironmentsGetOutboundNetworkDependenciesEndpointsResponse
	err       error
	requester func(context.Context) (*policy.Request, error)
	advancer  func(context.Context, AppServiceEnvironmentsGetOutboundNetworkDependenciesEndpointsResponse) (*policy.Request, error)
}

// Err returns the last error encountered while paging.
func (p *AppServiceEnvironmentsGetOutboundNetworkDependenciesEndpointsPager) Err() error {
	return p.err
}

// NextPage returns true if the pager advanced to the next page.
// Returns false if there are no more pages or an error occurred.
func (p *AppServiceEnvironmentsGetOutboundNetworkDependenciesEndpointsPager) NextPage(ctx context.Context) bool {
	var req *policy.Request
	var err error
	if !reflect.ValueOf(p.current).IsZero() {
		if p.current.OutboundEnvironmentEndpointCollection.NextLink == nil || len(*p.current.OutboundEnvironmentEndpointCollection.NextLink) == 0 {
			return false
		}
		req, err = p.advancer(ctx, p.current)
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		p.err = err
		return false
	}
	resp, err := p.client.pl.Do(req)
	if err != nil {
		p.err = err
		return false
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {
		p.err = p.client.getOutboundNetworkDependenciesEndpointsHandleError(resp)
		return false
	}
	result, err := p.client.getOutboundNetworkDependenciesEndpointsHandleResponse(resp)
	if err != nil {
		p.err = err
		return false
	}
	p.current = result
	return true
}

// PageResponse returns the current AppServiceEnvironmentsGetOutboundNetworkDependenciesEndpointsResponse page.
func (p *AppServiceEnvironmentsGetOutboundNetworkDependenciesEndpointsPager) PageResponse() AppServiceEnvironmentsGetOutboundNetworkDependenciesEndpointsResponse {
	return p.current
}

// AppServiceEnvironmentsGetPrivateEndpointConnectionListPager provides operations for iterating over paged responses.
type AppServiceEnvironmentsGetPrivateEndpointConnectionListPager struct {
	client    *AppServiceEnvironmentsClient
	current   AppServiceEnvironmentsGetPrivateEndpointConnectionListResponse
	err       error
	requester func(context.Context) (*policy.Request, error)
	advancer  func(context.Context, AppServiceEnvironmentsGetPrivateEndpointConnectionListResponse) (*policy.Request, error)
}

// Err returns the last error encountered while paging.
func (p *AppServiceEnvironmentsGetPrivateEndpointConnectionListPager) Err() error {
	return p.err
}

// NextPage returns true if the pager advanced to the next page.
// Returns false if there are no more pages or an error occurred.
func (p *AppServiceEnvironmentsGetPrivateEndpointConnectionListPager) NextPage(ctx context.Context) bool {
	var req *policy.Request
	var err error
	if !reflect.ValueOf(p.current).IsZero() {
		if p.current.PrivateEndpointConnectionCollection.NextLink == nil || len(*p.current.PrivateEndpointConnectionCollection.NextLink) == 0 {
			return false
		}
		req, err = p.advancer(ctx, p.current)
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		p.err = err
		return false
	}
	resp, err := p.client.pl.Do(req)
	if err != nil {
		p.err = err
		return false
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {
		p.err = p.client.getPrivateEndpointConnectionListHandleError(resp)
		return false
	}
	result, err := p.client.getPrivateEndpointConnectionListHandleResponse(resp)
	if err != nil {
		p.err = err
		return false
	}
	p.current = result
	return true
}

// PageResponse returns the current AppServiceEnvironmentsGetPrivateEndpointConnectionListResponse page.
func (p *AppServiceEnvironmentsGetPrivateEndpointConnectionListPager) PageResponse() AppServiceEnvironmentsGetPrivateEndpointConnectionListResponse {
	return p.current
}

// AppServiceEnvironmentsListAppServicePlansPager provides operations for iterating over paged responses.
type AppServiceEnvironmentsListAppServicePlansPager struct {
	client    *AppServiceEnvironmentsClient
	current   AppServiceEnvironmentsListAppServicePlansResponse
	err       error
	requester func(context.Context) (*policy.Request, error)
	advancer  func(context.Context, AppServiceEnvironmentsListAppServicePlansResponse) (*policy.Request, error)
}

// Err returns the last error encountered while paging.
func (p *AppServiceEnvironmentsListAppServicePlansPager) Err() error {
	return p.err
}

// NextPage returns true if the pager advanced to the next page.
// Returns false if there are no more pages or an error occurred.
func (p *AppServiceEnvironmentsListAppServicePlansPager) NextPage(ctx context.Context) bool {
	var req *policy.Request
	var err error
	if !reflect.ValueOf(p.current).IsZero() {
		if p.current.AppServicePlanCollection.NextLink == nil || len(*p.current.AppServicePlanCollection.NextLink) == 0 {
			return false
		}
		req, err = p.advancer(ctx, p.current)
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		p.err = err
		return false
	}
	resp, err := p.client.pl.Do(req)
	if err != nil {
		p.err = err
		return false
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {
		p.err = p.client.listAppServicePlansHandleError(resp)
		return false
	}
	result, err := p.client.listAppServicePlansHandleResponse(resp)
	if err != nil {
		p.err = err
		return false
	}
	p.current = result
	return true
}

// PageResponse returns the current AppServiceEnvironmentsListAppServicePlansResponse page.
func (p *AppServiceEnvironmentsListAppServicePlansPager) PageResponse() AppServiceEnvironmentsListAppServicePlansResponse {
	return p.current
}

// AppServiceEnvironmentsListByResourceGroupPager provides operations for iterating over paged responses.
type AppServiceEnvironmentsListByResourceGroupPager struct {
	client    *AppServiceEnvironmentsClient
	current   AppServiceEnvironmentsListByResourceGroupResponse
	err       error
	requester func(context.Context) (*policy.Request, error)
	advancer  func(context.Context, AppServiceEnvironmentsListByResourceGroupResponse) (*policy.Request, error)
}

// Err returns the last error encountered while paging.
func (p *AppServiceEnvironmentsListByResourceGroupPager) Err() error {
	return p.err
}

// NextPage returns true if the pager advanced to the next page.
// Returns false if there are no more pages or an error occurred.
func (p *AppServiceEnvironmentsListByResourceGroupPager) NextPage(ctx context.Context) bool {
	var req *policy.Request
	var err error
	if !reflect.ValueOf(p.current).IsZero() {
		if p.current.AppServiceEnvironmentCollection.NextLink == nil || len(*p.current.AppServiceEnvironmentCollection.NextLink) == 0 {
			return false
		}
		req, err = p.advancer(ctx, p.current)
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		p.err = err
		return false
	}
	resp, err := p.client.pl.Do(req)
	if err != nil {
		p.err = err
		return false
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {
		p.err = p.client.listByResourceGroupHandleError(resp)
		return false
	}
	result, err := p.client.listByResourceGroupHandleResponse(resp)
	if err != nil {
		p.err = err
		return false
	}
	p.current = result
	return true
}

// PageResponse returns the current AppServiceEnvironmentsListByResourceGroupResponse page.
func (p *AppServiceEnvironmentsListByResourceGroupPager) PageResponse() AppServiceEnvironmentsListByResourceGroupResponse {
	return p.current
}

// AppServiceEnvironmentsListCapacitiesPager provides operations for iterating over paged responses.
type AppServiceEnvironmentsListCapacitiesPager struct {
	client    *AppServiceEnvironmentsClient
	current   AppServiceEnvironmentsListCapacitiesResponse
	err       error
	requester func(context.Context) (*policy.Request, error)
	advancer  func(context.Context, AppServiceEnvironmentsListCapacitiesResponse) (*policy.Request, error)
}

// Err returns the last error encountered while paging.
func (p *AppServiceEnvironmentsListCapacitiesPager) Err() error {
	return p.err
}

// NextPage returns true if the pager advanced to the next page.
// Returns false if there are no more pages or an error occurred.
func (p *AppServiceEnvironmentsListCapacitiesPager) NextPage(ctx context.Context) bool {
	var req *policy.Request
	var err error
	if !reflect.ValueOf(p.current).IsZero() {
		if p.current.StampCapacityCollection.NextLink == nil || len(*p.current.StampCapacityCollection.NextLink) == 0 {
			return false
		}
		req, err = p.advancer(ctx, p.current)
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		p.err = err
		return false
	}
	resp, err := p.client.pl.Do(req)
	if err != nil {
		p.err = err
		return false
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {
		p.err = p.client.listCapacitiesHandleError(resp)
		return false
	}
	result, err := p.client.listCapacitiesHandleResponse(resp)
	if err != nil {
		p.err = err
		return false
	}
	p.current = result
	return true
}

// PageResponse returns the current AppServiceEnvironmentsListCapacitiesResponse page.
func (p *AppServiceEnvironmentsListCapacitiesPager) PageResponse() AppServiceEnvironmentsListCapacitiesResponse {
	return p.current
}

// AppServiceEnvironmentsListMultiRoleMetricDefinitionsPager provides operations for iterating over paged responses.
type AppServiceEnvironmentsListMultiRoleMetricDefinitionsPager struct {
	client    *AppServiceEnvironmentsClient
	current   AppServiceEnvironmentsListMultiRoleMetricDefinitionsResponse
	err       error
	requester func(context.Context) (*policy.Request, error)
	advancer  func(context.Context, AppServiceEnvironmentsListMultiRoleMetricDefinitionsResponse) (*policy.Request, error)
}

// Err returns the last error encountered while paging.
func (p *AppServiceEnvironmentsListMultiRoleMetricDefinitionsPager) Err() error {
	return p.err
}

// NextPage returns true if the pager advanced to the next page.
// Returns false if there are no more pages or an error occurred.
func (p *AppServiceEnvironmentsListMultiRoleMetricDefinitionsPager) NextPage(ctx context.Context) bool {
	var req *policy.Request
	var err error
	if !reflect.ValueOf(p.current).IsZero() {
		if p.current.ResourceMetricDefinitionCollection.NextLink == nil || len(*p.current.ResourceMetricDefinitionCollection.NextLink) == 0 {
			return false
		}
		req, err = p.advancer(ctx, p.current)
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		p.err = err
		return false
	}
	resp, err := p.client.pl.Do(req)
	if err != nil {
		p.err = err
		return false
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {
		p.err = p.client.listMultiRoleMetricDefinitionsHandleError(resp)
		return false
	}
	result, err := p.client.listMultiRoleMetricDefinitionsHandleResponse(resp)
	if err != nil {
		p.err = err
		return false
	}
	p.current = result
	return true
}

// PageResponse returns the current AppServiceEnvironmentsListMultiRoleMetricDefinitionsResponse page.
func (p *AppServiceEnvironmentsListMultiRoleMetricDefinitionsPager) PageResponse() AppServiceEnvironmentsListMultiRoleMetricDefinitionsResponse {
	return p.current
}

// AppServiceEnvironmentsListMultiRolePoolInstanceMetricDefinitionsPager provides operations for iterating over paged responses.
type AppServiceEnvironmentsListMultiRolePoolInstanceMetricDefinitionsPager struct {
	client    *AppServiceEnvironmentsClient
	current   AppServiceEnvironmentsListMultiRolePoolInstanceMetricDefinitionsResponse
	err       error
	requester func(context.Context) (*policy.Request, error)
	advancer  func(context.Context, AppServiceEnvironmentsListMultiRolePoolInstanceMetricDefinitionsResponse) (*policy.Request, error)
}

// Err returns the last error encountered while paging.
func (p *AppServiceEnvironmentsListMultiRolePoolInstanceMetricDefinitionsPager) Err() error {
	return p.err
}

// NextPage returns true if the pager advanced to the next page.
// Returns false if there are no more pages or an error occurred.
func (p *AppServiceEnvironmentsListMultiRolePoolInstanceMetricDefinitionsPager) NextPage(ctx context.Context) bool {
	var req *policy.Request
	var err error
	if !reflect.ValueOf(p.current).IsZero() {
		if p.current.ResourceMetricDefinitionCollection.NextLink == nil || len(*p.current.ResourceMetricDefinitionCollection.NextLink) == 0 {
			return false
		}
		req, err = p.advancer(ctx, p.current)
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		p.err = err
		return false
	}
	resp, err := p.client.pl.Do(req)
	if err != nil {
		p.err = err
		return false
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {
		p.err = p.client.listMultiRolePoolInstanceMetricDefinitionsHandleError(resp)
		return false
	}
	result, err := p.client.listMultiRolePoolInstanceMetricDefinitionsHandleResponse(resp)
	if err != nil {
		p.err = err
		return false
	}
	p.current = result
	return true
}

// PageResponse returns the current AppServiceEnvironmentsListMultiRolePoolInstanceMetricDefinitionsResponse page.
func (p *AppServiceEnvironmentsListMultiRolePoolInstanceMetricDefinitionsPager) PageResponse() AppServiceEnvironmentsListMultiRolePoolInstanceMetricDefinitionsResponse {
	return p.current
}

// AppServiceEnvironmentsListMultiRolePoolSKUsPager provides operations for iterating over paged responses.
type AppServiceEnvironmentsListMultiRolePoolSKUsPager struct {
	client    *AppServiceEnvironmentsClient
	current   AppServiceEnvironmentsListMultiRolePoolSKUsResponse
	err       error
	requester func(context.Context) (*policy.Request, error)
	advancer  func(context.Context, AppServiceEnvironmentsListMultiRolePoolSKUsResponse) (*policy.Request, error)
}

// Err returns the last error encountered while paging.
func (p *AppServiceEnvironmentsListMultiRolePoolSKUsPager) Err() error {
	return p.err
}

// NextPage returns true if the pager advanced to the next page.
// Returns false if there are no more pages or an error occurred.
func (p *AppServiceEnvironmentsListMultiRolePoolSKUsPager) NextPage(ctx context.Context) bool {
	var req *policy.Request
	var err error
	if !reflect.ValueOf(p.current).IsZero() {
		if p.current.SKUInfoCollection.NextLink == nil || len(*p.current.SKUInfoCollection.NextLink) == 0 {
			return false
		}
		req, err = p.advancer(ctx, p.current)
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		p.err = err
		return false
	}
	resp, err := p.client.pl.Do(req)
	if err != nil {
		p.err = err
		return false
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {
		p.err = p.client.listMultiRolePoolSKUsHandleError(resp)
		return false
	}
	result, err := p.client.listMultiRolePoolSKUsHandleResponse(resp)
	if err != nil {
		p.err = err
		return false
	}
	p.current = result
	return true
}

// PageResponse returns the current AppServiceEnvironmentsListMultiRolePoolSKUsResponse page.
func (p *AppServiceEnvironmentsListMultiRolePoolSKUsPager) PageResponse() AppServiceEnvironmentsListMultiRolePoolSKUsResponse {
	return p.current
}

// AppServiceEnvironmentsListMultiRolePoolsPager provides operations for iterating over paged responses.
type AppServiceEnvironmentsListMultiRolePoolsPager struct {
	client    *AppServiceEnvironmentsClient
	current   AppServiceEnvironmentsListMultiRolePoolsResponse
	err       error
	requester func(context.Context) (*policy.Request, error)
	advancer  func(context.Context, AppServiceEnvironmentsListMultiRolePoolsResponse) (*policy.Request, error)
}

// Err returns the last error encountered while paging.
func (p *AppServiceEnvironmentsListMultiRolePoolsPager) Err() error {
	return p.err
}

// NextPage returns true if the pager advanced to the next page.
// Returns false if there are no more pages or an error occurred.
func (p *AppServiceEnvironmentsListMultiRolePoolsPager) NextPage(ctx context.Context) bool {
	var req *policy.Request
	var err error
	if !reflect.ValueOf(p.current).IsZero() {
		if p.current.WorkerPoolCollection.NextLink == nil || len(*p.current.WorkerPoolCollection.NextLink) == 0 {
			return false
		}
		req, err = p.advancer(ctx, p.current)
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		p.err = err
		return false
	}
	resp, err := p.client.pl.Do(req)
	if err != nil {
		p.err = err
		return false
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {
		p.err = p.client.listMultiRolePoolsHandleError(resp)
		return false
	}
	result, err := p.client.listMultiRolePoolsHandleResponse(resp)
	if err != nil {
		p.err = err
		return false
	}
	p.current = result
	return true
}

// PageResponse returns the current AppServiceEnvironmentsListMultiRolePoolsResponse page.
func (p *AppServiceEnvironmentsListMultiRolePoolsPager) PageResponse() AppServiceEnvironmentsListMultiRolePoolsResponse {
	return p.current
}

// AppServiceEnvironmentsListMultiRoleUsagesPager provides operations for iterating over paged responses.
type AppServiceEnvironmentsListMultiRoleUsagesPager struct {
	client    *AppServiceEnvironmentsClient
	current   AppServiceEnvironmentsListMultiRoleUsagesResponse
	err       error
	requester func(context.Context) (*policy.Request, error)
	advancer  func(context.Context, AppServiceEnvironmentsListMultiRoleUsagesResponse) (*policy.Request, error)
}

// Err returns the last error encountered while paging.
func (p *AppServiceEnvironmentsListMultiRoleUsagesPager) Err() error {
	return p.err
}

// NextPage returns true if the pager advanced to the next page.
// Returns false if there are no more pages or an error occurred.
func (p *AppServiceEnvironmentsListMultiRoleUsagesPager) NextPage(ctx context.Context) bool {
	var req *policy.Request
	var err error
	if !reflect.ValueOf(p.current).IsZero() {
		if p.current.UsageCollection.NextLink == nil || len(*p.current.UsageCollection.NextLink) == 0 {
			return false
		}
		req, err = p.advancer(ctx, p.current)
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		p.err = err
		return false
	}
	resp, err := p.client.pl.Do(req)
	if err != nil {
		p.err = err
		return false
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {
		p.err = p.client.listMultiRoleUsagesHandleError(resp)
		return false
	}
	result, err := p.client.listMultiRoleUsagesHandleResponse(resp)
	if err != nil {
		p.err = err
		return false
	}
	p.current = result
	return true
}

// PageResponse returns the current AppServiceEnvironmentsListMultiRoleUsagesResponse page.
func (p *AppServiceEnvironmentsListMultiRoleUsagesPager) PageResponse() AppServiceEnvironmentsListMultiRoleUsagesResponse {
	return p.current
}

// AppServiceEnvironmentsListPager provides operations for iterating over paged responses.
type AppServiceEnvironmentsListPager struct {
	client    *AppServiceEnvironmentsClient
	current   AppServiceEnvironmentsListResponse
	err       error
	requester func(context.Context) (*policy.Request, error)
	advancer  func(context.Context, AppServiceEnvironmentsListResponse) (*policy.Request, error)
}

// Err returns the last error encountered while paging.
func (p *AppServiceEnvironmentsListPager) Err() error {
	return p.err
}

// NextPage returns true if the pager advanced to the next page.
// Returns false if there are no more pages or an error occurred.
func (p *AppServiceEnvironmentsListPager) NextPage(ctx context.Context) bool {
	var req *policy.Request
	var err error
	if !reflect.ValueOf(p.current).IsZero() {
		if p.current.AppServiceEnvironmentCollection.NextLink == nil || len(*p.current.AppServiceEnvironmentCollection.NextLink) == 0 {
			return false
		}
		req, err = p.advancer(ctx, p.current)
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		p.err = err
		return false
	}
	resp, err := p.client.pl.Do(req)
	if err != nil {
		p.err = err
		return false
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {
		p.err = p.client.listHandleError(resp)
		return false
	}
	result, err := p.client.listHandleResponse(resp)
	if err != nil {
		p.err = err
		return false
	}
	p.current = result
	return true
}

// PageResponse returns the current AppServiceEnvironmentsListResponse page.
func (p *AppServiceEnvironmentsListPager) PageResponse() AppServiceEnvironmentsListResponse {
	return p.current
}

// AppServiceEnvironmentsListUsagesPager provides operations for iterating over paged responses.
type AppServiceEnvironmentsListUsagesPager struct {
	client    *AppServiceEnvironmentsClient
	current   AppServiceEnvironmentsListUsagesResponse
	err       error
	requester func(context.Context) (*policy.Request, error)
	advancer  func(context.Context, AppServiceEnvironmentsListUsagesResponse) (*policy.Request, error)
}

// Err returns the last error encountered while paging.
func (p *AppServiceEnvironmentsListUsagesPager) Err() error {
	return p.err
}

// NextPage returns true if the pager advanced to the next page.
// Returns false if there are no more pages or an error occurred.
func (p *AppServiceEnvironmentsListUsagesPager) NextPage(ctx context.Context) bool {
	var req *policy.Request
	var err error
	if !reflect.ValueOf(p.current).IsZero() {
		if p.current.CsmUsageQuotaCollection.NextLink == nil || len(*p.current.CsmUsageQuotaCollection.NextLink) == 0 {
			return false
		}
		req, err = p.advancer(ctx, p.current)
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		p.err = err
		return false
	}
	resp, err := p.client.pl.Do(req)
	if err != nil {
		p.err = err
		return false
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {
		p.err = p.client.listUsagesHandleError(resp)
		return false
	}
	result, err := p.client.listUsagesHandleResponse(resp)
	if err != nil {
		p.err = err
		return false
	}
	p.current = result
	return true
}

// PageResponse returns the current AppServiceEnvironmentsListUsagesResponse page.
func (p *AppServiceEnvironmentsListUsagesPager) PageResponse() AppServiceEnvironmentsListUsagesResponse {
	return p.current
}

// AppServiceEnvironmentsListWebAppsPager provides operations for iterating over paged responses.
type AppServiceEnvironmentsListWebAppsPager struct {
	client    *AppServiceEnvironmentsClient
	current   AppServiceEnvironmentsListWebAppsResponse
	err       error
	requester func(context.Context) (*policy.Request, error)
	advancer  func(context.Context, AppServiceEnvironmentsListWebAppsResponse) (*policy.Request, error)
}

// Err returns the last error encountered while paging.
func (p *AppServiceEnvironmentsListWebAppsPager) Err() error {
	return p.err
}

// NextPage returns true if the pager advanced to the next page.
// Returns false if there are no more pages or an error occurred.
func (p *AppServiceEnvironmentsListWebAppsPager) NextPage(ctx context.Context) bool {
	var req *policy.Request
	var err error
	if !reflect.ValueOf(p.current).IsZero() {
		if p.current.WebAppCollection.NextLink == nil || len(*p.current.WebAppCollection.NextLink) == 0 {
			return false
		}
		req, err = p.advancer(ctx, p.current)
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		p.err = err
		return false
	}
	resp, err := p.client.pl.Do(req)
	if err != nil {
		p.err = err
		return false
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {
		p.err = p.client.listWebAppsHandleError(resp)
		return false
	}
	result, err := p.client.listWebAppsHandleResponse(resp)
	if err != nil {
		p.err = err
		return false
	}
	p.current = result
	return true
}

// PageResponse returns the current AppServiceEnvironmentsListWebAppsResponse page.
func (p *AppServiceEnvironmentsListWebAppsPager) PageResponse() AppServiceEnvironmentsListWebAppsResponse {
	return p.current
}

// AppServiceEnvironmentsListWebWorkerMetricDefinitionsPager provides operations for iterating over paged responses.
type AppServiceEnvironmentsListWebWorkerMetricDefinitionsPager struct {
	client    *AppServiceEnvironmentsClient
	current   AppServiceEnvironmentsListWebWorkerMetricDefinitionsResponse
	err       error
	requester func(context.Context) (*policy.Request, error)
	advancer  func(context.Context, AppServiceEnvironmentsListWebWorkerMetricDefinitionsResponse) (*policy.Request, error)
}

// Err returns the last error encountered while paging.
func (p *AppServiceEnvironmentsListWebWorkerMetricDefinitionsPager) Err() error {
	return p.err
}

// NextPage returns true if the pager advanced to the next page.
// Returns false if there are no more pages or an error occurred.
func (p *AppServiceEnvironmentsListWebWorkerMetricDefinitionsPager) NextPage(ctx context.Context) bool {
	var req *policy.Request
	var err error
	if !reflect.ValueOf(p.current).IsZero() {
		if p.current.ResourceMetricDefinitionCollection.NextLink == nil || len(*p.current.ResourceMetricDefinitionCollection.NextLink) == 0 {
			return false
		}
		req, err = p.advancer(ctx, p.current)
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		p.err = err
		return false
	}
	resp, err := p.client.pl.Do(req)
	if err != nil {
		p.err = err
		return false
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {
		p.err = p.client.listWebWorkerMetricDefinitionsHandleError(resp)
		return false
	}
	result, err := p.client.listWebWorkerMetricDefinitionsHandleResponse(resp)
	if err != nil {
		p.err = err
		return false
	}
	p.current = result
	return true
}

// PageResponse returns the current AppServiceEnvironmentsListWebWorkerMetricDefinitionsResponse page.
func (p *AppServiceEnvironmentsListWebWorkerMetricDefinitionsPager) PageResponse() AppServiceEnvironmentsListWebWorkerMetricDefinitionsResponse {
	return p.current
}

// AppServiceEnvironmentsListWebWorkerUsagesPager provides operations for iterating over paged responses.
type AppServiceEnvironmentsListWebWorkerUsagesPager struct {
	client    *AppServiceEnvironmentsClient
	current   AppServiceEnvironmentsListWebWorkerUsagesResponse
	err       error
	requester func(context.Context) (*policy.Request, error)
	advancer  func(context.Context, AppServiceEnvironmentsListWebWorkerUsagesResponse) (*policy.Request, error)
}

// Err returns the last error encountered while paging.
func (p *AppServiceEnvironmentsListWebWorkerUsagesPager) Err() error {
	return p.err
}

// NextPage returns true if the pager advanced to the next page.
// Returns false if there are no more pages or an error occurred.
func (p *AppServiceEnvironmentsListWebWorkerUsagesPager) NextPage(ctx context.Context) bool {
	var req *policy.Request
	var err error
	if !reflect.ValueOf(p.current).IsZero() {
		if p.current.UsageCollection.NextLink == nil || len(*p.current.UsageCollection.NextLink) == 0 {
			return false
		}
		req, err = p.advancer(ctx, p.current)
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		p.err = err
		return false
	}
	resp, err := p.client.pl.Do(req)
	if err != nil {
		p.err = err
		return false
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {
		p.err = p.client.listWebWorkerUsagesHandleError(resp)
		return false
	}
	result, err := p.client.listWebWorkerUsagesHandleResponse(resp)
	if err != nil {
		p.err = err
		return false
	}
	p.current = result
	return true
}

// PageResponse returns the current AppServiceEnvironmentsListWebWorkerUsagesResponse page.
func (p *AppServiceEnvironmentsListWebWorkerUsagesPager) PageResponse() AppServiceEnvironmentsListWebWorkerUsagesResponse {
	return p.current
}

// AppServiceEnvironmentsListWorkerPoolInstanceMetricDefinitionsPager provides operations for iterating over paged responses.
type AppServiceEnvironmentsListWorkerPoolInstanceMetricDefinitionsPager struct {
	client    *AppServiceEnvironmentsClient
	current   AppServiceEnvironmentsListWorkerPoolInstanceMetricDefinitionsResponse
	err       error
	requester func(context.Context) (*policy.Request, error)
	advancer  func(context.Context, AppServiceEnvironmentsListWorkerPoolInstanceMetricDefinitionsResponse) (*policy.Request, error)
}

// Err returns the last error encountered while paging.
func (p *AppServiceEnvironmentsListWorkerPoolInstanceMetricDefinitionsPager) Err() error {
	return p.err
}

// NextPage returns true if the pager advanced to the next page.
// Returns false if there are no more pages or an error occurred.
func (p *AppServiceEnvironmentsListWorkerPoolInstanceMetricDefinitionsPager) NextPage(ctx context.Context) bool {
	var req *policy.Request
	var err error
	if !reflect.ValueOf(p.current).IsZero() {
		if p.current.ResourceMetricDefinitionCollection.NextLink == nil || len(*p.current.ResourceMetricDefinitionCollection.NextLink) == 0 {
			return false
		}
		req, err = p.advancer(ctx, p.current)
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		p.err = err
		return false
	}
	resp, err := p.client.pl.Do(req)
	if err != nil {
		p.err = err
		return false
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {
		p.err = p.client.listWorkerPoolInstanceMetricDefinitionsHandleError(resp)
		return false
	}
	result, err := p.client.listWorkerPoolInstanceMetricDefinitionsHandleResponse(resp)
	if err != nil {
		p.err = err
		return false
	}
	p.current = result
	return true
}

// PageResponse returns the current AppServiceEnvironmentsListWorkerPoolInstanceMetricDefinitionsResponse page.
func (p *AppServiceEnvironmentsListWorkerPoolInstanceMetricDefinitionsPager) PageResponse() AppServiceEnvironmentsListWorkerPoolInstanceMetricDefinitionsResponse {
	return p.current
}

// AppServiceEnvironmentsListWorkerPoolSKUsPager provides operations for iterating over paged responses.
type AppServiceEnvironmentsListWorkerPoolSKUsPager struct {
	client    *AppServiceEnvironmentsClient
	current   AppServiceEnvironmentsListWorkerPoolSKUsResponse
	err       error
	requester func(context.Context) (*policy.Request, error)
	advancer  func(context.Context, AppServiceEnvironmentsListWorkerPoolSKUsResponse) (*policy.Request, error)
}

// Err returns the last error encountered while paging.
func (p *AppServiceEnvironmentsListWorkerPoolSKUsPager) Err() error {
	return p.err
}

// NextPage returns true if the pager advanced to the next page.
// Returns false if there are no more pages or an error occurred.
func (p *AppServiceEnvironmentsListWorkerPoolSKUsPager) NextPage(ctx context.Context) bool {
	var req *policy.Request
	var err error
	if !reflect.ValueOf(p.current).IsZero() {
		if p.current.SKUInfoCollection.NextLink == nil || len(*p.current.SKUInfoCollection.NextLink) == 0 {
			return false
		}
		req, err = p.advancer(ctx, p.current)
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		p.err = err
		return false
	}
	resp, err := p.client.pl.Do(req)
	if err != nil {
		p.err = err
		return false
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {
		p.err = p.client.listWorkerPoolSKUsHandleError(resp)
		return false
	}
	result, err := p.client.listWorkerPoolSKUsHandleResponse(resp)
	if err != nil {
		p.err = err
		return false
	}
	p.current = result
	return true
}

// PageResponse returns the current AppServiceEnvironmentsListWorkerPoolSKUsResponse page.
func (p *AppServiceEnvironmentsListWorkerPoolSKUsPager) PageResponse() AppServiceEnvironmentsListWorkerPoolSKUsResponse {
	return p.current
}

// AppServiceEnvironmentsListWorkerPoolsPager provides operations for iterating over paged responses.
type AppServiceEnvironmentsListWorkerPoolsPager struct {
	client    *AppServiceEnvironmentsClient
	current   AppServiceEnvironmentsListWorkerPoolsResponse
	err       error
	requester func(context.Context) (*policy.Request, error)
	advancer  func(context.Context, AppServiceEnvironmentsListWorkerPoolsResponse) (*policy.Request, error)
}

// Err returns the last error encountered while paging.
func (p *AppServiceEnvironmentsListWorkerPoolsPager) Err() error {
	return p.err
}

// NextPage returns true if the pager advanced to the next page.
// Returns false if there are no more pages or an error occurred.
func (p *AppServiceEnvironmentsListWorkerPoolsPager) NextPage(ctx context.Context) bool {
	var req *policy.Request
	var err error
	if !reflect.ValueOf(p.current).IsZero() {
		if p.current.WorkerPoolCollection.NextLink == nil || len(*p.current.WorkerPoolCollection.NextLink) == 0 {
			return false
		}
		req, err = p.advancer(ctx, p.current)
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		p.err = err
		return false
	}
	resp, err := p.client.pl.Do(req)
	if err != nil {
		p.err = err
		return false
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {
		p.err = p.client.listWorkerPoolsHandleError(resp)
		return false
	}
	result, err := p.client.listWorkerPoolsHandleResponse(resp)
	if err != nil {
		p.err = err
		return false
	}
	p.current = result
	return true
}

// PageResponse returns the current AppServiceEnvironmentsListWorkerPoolsResponse page.
func (p *AppServiceEnvironmentsListWorkerPoolsPager) PageResponse() AppServiceEnvironmentsListWorkerPoolsResponse {
	return p.current
}

// AppServiceEnvironmentsResumePager provides operations for iterating over paged responses.
type AppServiceEnvironmentsResumePager struct {
	client  *AppServiceEnvironmentsClient
	current AppServiceEnvironmentsResumeResponse
	err     error
	second  bool
}

// Err returns the last error encountered while paging.
func (p *AppServiceEnvironmentsResumePager) Err() error {
	return p.err
}

// NextPage returns true if the pager advanced to the next page.
// Returns false if there are no more pages or an error occurred.
func (p *AppServiceEnvironmentsResumePager) NextPage(ctx context.Context) bool {
	if !p.second {
		p.second = true
		return true
	} else if !reflect.ValueOf(p.current).IsZero() {
		if p.current.WebAppCollection.NextLink == nil || len(*p.current.WebAppCollection.NextLink) == 0 {
			return false
		}
	}
	req, err := runtime.NewRequest(ctx, http.MethodGet, *p.current.WebAppCollection.NextLink)
	if err != nil {
		p.err = err
		return false
	}
	resp, err := p.client.pl.Do(req)
	if err != nil {
		p.err = err
		return false
	}
	if !runtime.HasStatusCode(resp, http.StatusOK, http.StatusCreated, http.StatusAccepted) {
		p.err = p.client.resumeHandleError(resp)
		return false
	}
	result, err := p.client.resumeHandleResponse(resp)
	if err != nil {
		p.err = err
		return false
	}
	p.current = result
	return true
}

// PageResponse returns the current AppServiceEnvironmentsResumeResponse page.
func (p *AppServiceEnvironmentsResumePager) PageResponse() AppServiceEnvironmentsResumeResponse {
	return p.current
}

// AppServiceEnvironmentsSuspendPager provides operations for iterating over paged responses.
type AppServiceEnvironmentsSuspendPager struct {
	client  *AppServiceEnvironmentsClient
	current AppServiceEnvironmentsSuspendResponse
	err     error
	second  bool
}

// Err returns the last error encountered while paging.
func (p *AppServiceEnvironmentsSuspendPager) Err() error {
	return p.err
}

// NextPage returns true if the pager advanced to the next page.
// Returns false if there are no more pages or an error occurred.
func (p *AppServiceEnvironmentsSuspendPager) NextPage(ctx context.Context) bool {
	if !p.second {
		p.second = true
		return true
	} else if !reflect.ValueOf(p.current).IsZero() {
		if p.current.WebAppCollection.NextLink == nil || len(*p.current.WebAppCollection.NextLink) == 0 {
			return false
		}
	}
	req, err := runtime.NewRequest(ctx, http.MethodGet, *p.current.WebAppCollection.NextLink)
	if err != nil {
		p.err = err
		return false
	}
	resp, err := p.client.pl.Do(req)
	if err != nil {
		p.err = err
		return false
	}
	if !runtime.HasStatusCode(resp, http.StatusOK, http.StatusCreated, http.StatusAccepted) {
		p.err = p.client.suspendHandleError(resp)
		return false
	}
	result, err := p.client.suspendHandleResponse(resp)
	if err != nil {
		p.err = err
		return false
	}
	p.current = result
	return true
}

// PageResponse returns the current AppServiceEnvironmentsSuspendResponse page.
func (p *AppServiceEnvironmentsSuspendPager) PageResponse() AppServiceEnvironmentsSuspendResponse {
	return p.current
}

// AppServicePlansListByResourceGroupPager provides operations for iterating over paged responses.
type AppServicePlansListByResourceGroupPager struct {
	client    *AppServicePlansClient
	current   AppServicePlansListByResourceGroupResponse
	err       error
	requester func(context.Context) (*policy.Request, error)
	advancer  func(context.Context, AppServicePlansListByResourceGroupResponse) (*policy.Request, error)
}

// Err returns the last error encountered while paging.
func (p *AppServicePlansListByResourceGroupPager) Err() error {
	return p.err
}

// NextPage returns true if the pager advanced to the next page.
// Returns false if there are no more pages or an error occurred.
func (p *AppServicePlansListByResourceGroupPager) NextPage(ctx context.Context) bool {
	var req *policy.Request
	var err error
	if !reflect.ValueOf(p.current).IsZero() {
		if p.current.AppServicePlanCollection.NextLink == nil || len(*p.current.AppServicePlanCollection.NextLink) == 0 {
			return false
		}
		req, err = p.advancer(ctx, p.current)
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		p.err = err
		return false
	}
	resp, err := p.client.pl.Do(req)
	if err != nil {
		p.err = err
		return false
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {
		p.err = p.client.listByResourceGroupHandleError(resp)
		return false
	}
	result, err := p.client.listByResourceGroupHandleResponse(resp)
	if err != nil {
		p.err = err
		return false
	}
	p.current = result
	return true
}

// PageResponse returns the current AppServicePlansListByResourceGroupResponse page.
func (p *AppServicePlansListByResourceGroupPager) PageResponse() AppServicePlansListByResourceGroupResponse {
	return p.current
}

// AppServicePlansListHybridConnectionsPager provides operations for iterating over paged responses.
type AppServicePlansListHybridConnectionsPager struct {
	client    *AppServicePlansClient
	current   AppServicePlansListHybridConnectionsResponse
	err       error
	requester func(context.Context) (*policy.Request, error)
	advancer  func(context.Context, AppServicePlansListHybridConnectionsResponse) (*policy.Request, error)
}

// Err returns the last error encountered while paging.
func (p *AppServicePlansListHybridConnectionsPager) Err() error {
	return p.err
}

// NextPage returns true if the pager advanced to the next page.
// Returns false if there are no more pages or an error occurred.
func (p *AppServicePlansListHybridConnectionsPager) NextPage(ctx context.Context) bool {
	var req *policy.Request
	var err error
	if !reflect.ValueOf(p.current).IsZero() {
		if p.current.HybridConnectionCollection.NextLink == nil || len(*p.current.HybridConnectionCollection.NextLink) == 0 {
			return false
		}
		req, err = p.advancer(ctx, p.current)
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		p.err = err
		return false
	}
	resp, err := p.client.pl.Do(req)
	if err != nil {
		p.err = err
		return false
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {
		p.err = p.client.listHybridConnectionsHandleError(resp)
		return false
	}
	result, err := p.client.listHybridConnectionsHandleResponse(resp)
	if err != nil {
		p.err = err
		return false
	}
	p.current = result
	return true
}

// PageResponse returns the current AppServicePlansListHybridConnectionsResponse page.
func (p *AppServicePlansListHybridConnectionsPager) PageResponse() AppServicePlansListHybridConnectionsResponse {
	return p.current
}

// AppServicePlansListPager provides operations for iterating over paged responses.
type AppServicePlansListPager struct {
	client    *AppServicePlansClient
	current   AppServicePlansListResponse
	err       error
	requester func(context.Context) (*policy.Request, error)
	advancer  func(context.Context, AppServicePlansListResponse) (*policy.Request, error)
}

// Err returns the last error encountered while paging.
func (p *AppServicePlansListPager) Err() error {
	return p.err
}

// NextPage returns true if the pager advanced to the next page.
// Returns false if there are no more pages or an error occurred.
func (p *AppServicePlansListPager) NextPage(ctx context.Context) bool {
	var req *policy.Request
	var err error
	if !reflect.ValueOf(p.current).IsZero() {
		if p.current.AppServicePlanCollection.NextLink == nil || len(*p.current.AppServicePlanCollection.NextLink) == 0 {
			return false
		}
		req, err = p.advancer(ctx, p.current)
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		p.err = err
		return false
	}
	resp, err := p.client.pl.Do(req)
	if err != nil {
		p.err = err
		return false
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {
		p.err = p.client.listHandleError(resp)
		return false
	}
	result, err := p.client.listHandleResponse(resp)
	if err != nil {
		p.err = err
		return false
	}
	p.current = result
	return true
}

// PageResponse returns the current AppServicePlansListResponse page.
func (p *AppServicePlansListPager) PageResponse() AppServicePlansListResponse {
	return p.current
}

// AppServicePlansListUsagesPager provides operations for iterating over paged responses.
type AppServicePlansListUsagesPager struct {
	client    *AppServicePlansClient
	current   AppServicePlansListUsagesResponse
	err       error
	requester func(context.Context) (*policy.Request, error)
	advancer  func(context.Context, AppServicePlansListUsagesResponse) (*policy.Request, error)
}

// Err returns the last error encountered while paging.
func (p *AppServicePlansListUsagesPager) Err() error {
	return p.err
}

// NextPage returns true if the pager advanced to the next page.
// Returns false if there are no more pages or an error occurred.
func (p *AppServicePlansListUsagesPager) NextPage(ctx context.Context) bool {
	var req *policy.Request
	var err error
	if !reflect.ValueOf(p.current).IsZero() {
		if p.current.CsmUsageQuotaCollection.NextLink == nil || len(*p.current.CsmUsageQuotaCollection.NextLink) == 0 {
			return false
		}
		req, err = p.advancer(ctx, p.current)
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		p.err = err
		return false
	}
	resp, err := p.client.pl.Do(req)
	if err != nil {
		p.err = err
		return false
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {
		p.err = p.client.listUsagesHandleError(resp)
		return false
	}
	result, err := p.client.listUsagesHandleResponse(resp)
	if err != nil {
		p.err = err
		return false
	}
	p.current = result
	return true
}

// PageResponse returns the current AppServicePlansListUsagesResponse page.
func (p *AppServicePlansListUsagesPager) PageResponse() AppServicePlansListUsagesResponse {
	return p.current
}

// AppServicePlansListWebAppsByHybridConnectionPager provides operations for iterating over paged responses.
type AppServicePlansListWebAppsByHybridConnectionPager struct {
	client    *AppServicePlansClient
	current   AppServicePlansListWebAppsByHybridConnectionResponse
	err       error
	requester func(context.Context) (*policy.Request, error)
	advancer  func(context.Context, AppServicePlansListWebAppsByHybridConnectionResponse) (*policy.Request, error)
}

// Err returns the last error encountered while paging.
func (p *AppServicePlansListWebAppsByHybridConnectionPager) Err() error {
	return p.err
}

// NextPage returns true if the pager advanced to the next page.
// Returns false if there are no more pages or an error occurred.
func (p *AppServicePlansListWebAppsByHybridConnectionPager) NextPage(ctx context.Context) bool {
	var req *policy.Request
	var err error
	if !reflect.ValueOf(p.current).IsZero() {
		if p.current.ResourceCollection.NextLink == nil || len(*p.current.ResourceCollection.NextLink) == 0 {
			return false
		}
		req, err = p.advancer(ctx, p.current)
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		p.err = err
		return false
	}
	resp, err := p.client.pl.Do(req)
	if err != nil {
		p.err = err
		return false
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {
		p.err = p.client.listWebAppsByHybridConnectionHandleError(resp)
		return false
	}
	result, err := p.client.listWebAppsByHybridConnectionHandleResponse(resp)
	if err != nil {
		p.err = err
		return false
	}
	p.current = result
	return true
}

// PageResponse returns the current AppServicePlansListWebAppsByHybridConnectionResponse page.
func (p *AppServicePlansListWebAppsByHybridConnectionPager) PageResponse() AppServicePlansListWebAppsByHybridConnectionResponse {
	return p.current
}

// AppServicePlansListWebAppsPager provides operations for iterating over paged responses.
type AppServicePlansListWebAppsPager struct {
	client    *AppServicePlansClient
	current   AppServicePlansListWebAppsResponse
	err       error
	requester func(context.Context) (*policy.Request, error)
	advancer  func(context.Context, AppServicePlansListWebAppsResponse) (*policy.Request, error)
}

// Err returns the last error encountered while paging.
func (p *AppServicePlansListWebAppsPager) Err() error {
	return p.err
}

// NextPage returns true if the pager advanced to the next page.
// Returns false if there are no more pages or an error occurred.
func (p *AppServicePlansListWebAppsPager) NextPage(ctx context.Context) bool {
	var req *policy.Request
	var err error
	if !reflect.ValueOf(p.current).IsZero() {
		if p.current.WebAppCollection.NextLink == nil || len(*p.current.WebAppCollection.NextLink) == 0 {
			return false
		}
		req, err = p.advancer(ctx, p.current)
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		p.err = err
		return false
	}
	resp, err := p.client.pl.Do(req)
	if err != nil {
		p.err = err
		return false
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {
		p.err = p.client.listWebAppsHandleError(resp)
		return false
	}
	result, err := p.client.listWebAppsHandleResponse(resp)
	if err != nil {
		p.err = err
		return false
	}
	p.current = result
	return true
}

// PageResponse returns the current AppServicePlansListWebAppsResponse page.
func (p *AppServicePlansListWebAppsPager) PageResponse() AppServicePlansListWebAppsResponse {
	return p.current
}

// CertificateOrdersDiagnosticsListAppServiceCertificateOrderDetectorResponsePager provides operations for iterating over paged responses.
type CertificateOrdersDiagnosticsListAppServiceCertificateOrderDetectorResponsePager struct {
	client    *CertificateOrdersDiagnosticsClient
	current   CertificateOrdersDiagnosticsListAppServiceCertificateOrderDetectorResponseResponse
	err       error
	requester func(context.Context) (*policy.Request, error)
	advancer  func(context.Context, CertificateOrdersDiagnosticsListAppServiceCertificateOrderDetectorResponseResponse) (*policy.Request, error)
}

// Err returns the last error encountered while paging.
func (p *CertificateOrdersDiagnosticsListAppServiceCertificateOrderDetectorResponsePager) Err() error {
	return p.err
}

// NextPage returns true if the pager advanced to the next page.
// Returns false if there are no more pages or an error occurred.
func (p *CertificateOrdersDiagnosticsListAppServiceCertificateOrderDetectorResponsePager) NextPage(ctx context.Context) bool {
	var req *policy.Request
	var err error
	if !reflect.ValueOf(p.current).IsZero() {
		if p.current.DetectorResponseCollection.NextLink == nil || len(*p.current.DetectorResponseCollection.NextLink) == 0 {
			return false
		}
		req, err = p.advancer(ctx, p.current)
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		p.err = err
		return false
	}
	resp, err := p.client.pl.Do(req)
	if err != nil {
		p.err = err
		return false
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {
		p.err = p.client.listAppServiceCertificateOrderDetectorResponseHandleError(resp)
		return false
	}
	result, err := p.client.listAppServiceCertificateOrderDetectorResponseHandleResponse(resp)
	if err != nil {
		p.err = err
		return false
	}
	p.current = result
	return true
}

// PageResponse returns the current CertificateOrdersDiagnosticsListAppServiceCertificateOrderDetectorResponseResponse page.
func (p *CertificateOrdersDiagnosticsListAppServiceCertificateOrderDetectorResponsePager) PageResponse() CertificateOrdersDiagnosticsListAppServiceCertificateOrderDetectorResponseResponse {
	return p.current
}

// CertificateRegistrationProviderListOperationsPager provides operations for iterating over paged responses.
type CertificateRegistrationProviderListOperationsPager struct {
	client    *CertificateRegistrationProviderClient
	current   CertificateRegistrationProviderListOperationsResponse
	err       error
	requester func(context.Context) (*policy.Request, error)
	advancer  func(context.Context, CertificateRegistrationProviderListOperationsResponse) (*policy.Request, error)
}

// Err returns the last error encountered while paging.
func (p *CertificateRegistrationProviderListOperationsPager) Err() error {
	return p.err
}

// NextPage returns true if the pager advanced to the next page.
// Returns false if there are no more pages or an error occurred.
func (p *CertificateRegistrationProviderListOperationsPager) NextPage(ctx context.Context) bool {
	var req *policy.Request
	var err error
	if !reflect.ValueOf(p.current).IsZero() {
		if p.current.CsmOperationCollection.NextLink == nil || len(*p.current.CsmOperationCollection.NextLink) == 0 {
			return false
		}
		req, err = p.advancer(ctx, p.current)
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		p.err = err
		return false
	}
	resp, err := p.client.pl.Do(req)
	if err != nil {
		p.err = err
		return false
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {
		p.err = p.client.listOperationsHandleError(resp)
		return false
	}
	result, err := p.client.listOperationsHandleResponse(resp)
	if err != nil {
		p.err = err
		return false
	}
	p.current = result
	return true
}

// PageResponse returns the current CertificateRegistrationProviderListOperationsResponse page.
func (p *CertificateRegistrationProviderListOperationsPager) PageResponse() CertificateRegistrationProviderListOperationsResponse {
	return p.current
}

// CertificatesListByResourceGroupPager provides operations for iterating over paged responses.
type CertificatesListByResourceGroupPager struct {
	client    *CertificatesClient
	current   CertificatesListByResourceGroupResponse
	err       error
	requester func(context.Context) (*policy.Request, error)
	advancer  func(context.Context, CertificatesListByResourceGroupResponse) (*policy.Request, error)
}

// Err returns the last error encountered while paging.
func (p *CertificatesListByResourceGroupPager) Err() error {
	return p.err
}

// NextPage returns true if the pager advanced to the next page.
// Returns false if there are no more pages or an error occurred.
func (p *CertificatesListByResourceGroupPager) NextPage(ctx context.Context) bool {
	var req *policy.Request
	var err error
	if !reflect.ValueOf(p.current).IsZero() {
		if p.current.CertificateCollection.NextLink == nil || len(*p.current.CertificateCollection.NextLink) == 0 {
			return false
		}
		req, err = p.advancer(ctx, p.current)
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		p.err = err
		return false
	}
	resp, err := p.client.pl.Do(req)
	if err != nil {
		p.err = err
		return false
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {
		p.err = p.client.listByResourceGroupHandleError(resp)
		return false
	}
	result, err := p.client.listByResourceGroupHandleResponse(resp)
	if err != nil {
		p.err = err
		return false
	}
	p.current = result
	return true
}

// PageResponse returns the current CertificatesListByResourceGroupResponse page.
func (p *CertificatesListByResourceGroupPager) PageResponse() CertificatesListByResourceGroupResponse {
	return p.current
}

// CertificatesListPager provides operations for iterating over paged responses.
type CertificatesListPager struct {
	client    *CertificatesClient
	current   CertificatesListResponse
	err       error
	requester func(context.Context) (*policy.Request, error)
	advancer  func(context.Context, CertificatesListResponse) (*policy.Request, error)
}

// Err returns the last error encountered while paging.
func (p *CertificatesListPager) Err() error {
	return p.err
}

// NextPage returns true if the pager advanced to the next page.
// Returns false if there are no more pages or an error occurred.
func (p *CertificatesListPager) NextPage(ctx context.Context) bool {
	var req *policy.Request
	var err error
	if !reflect.ValueOf(p.current).IsZero() {
		if p.current.CertificateCollection.NextLink == nil || len(*p.current.CertificateCollection.NextLink) == 0 {
			return false
		}
		req, err = p.advancer(ctx, p.current)
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		p.err = err
		return false
	}
	resp, err := p.client.pl.Do(req)
	if err != nil {
		p.err = err
		return false
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {
		p.err = p.client.listHandleError(resp)
		return false
	}
	result, err := p.client.listHandleResponse(resp)
	if err != nil {
		p.err = err
		return false
	}
	p.current = result
	return true
}

// PageResponse returns the current CertificatesListResponse page.
func (p *CertificatesListPager) PageResponse() CertificatesListResponse {
	return p.current
}

// DeletedWebAppsListByLocationPager provides operations for iterating over paged responses.
type DeletedWebAppsListByLocationPager struct {
	client    *DeletedWebAppsClient
	current   DeletedWebAppsListByLocationResponse
	err       error
	requester func(context.Context) (*policy.Request, error)
	advancer  func(context.Context, DeletedWebAppsListByLocationResponse) (*policy.Request, error)
}

// Err returns the last error encountered while paging.
func (p *DeletedWebAppsListByLocationPager) Err() error {
	return p.err
}

// NextPage returns true if the pager advanced to the next page.
// Returns false if there are no more pages or an error occurred.
func (p *DeletedWebAppsListByLocationPager) NextPage(ctx context.Context) bool {
	var req *policy.Request
	var err error
	if !reflect.ValueOf(p.current).IsZero() {
		if p.current.DeletedWebAppCollection.NextLink == nil || len(*p.current.DeletedWebAppCollection.NextLink) == 0 {
			return false
		}
		req, err = p.advancer(ctx, p.current)
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		p.err = err
		return false
	}
	resp, err := p.client.pl.Do(req)
	if err != nil {
		p.err = err
		return false
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {
		p.err = p.client.listByLocationHandleError(resp)
		return false
	}
	result, err := p.client.listByLocationHandleResponse(resp)
	if err != nil {
		p.err = err
		return false
	}
	p.current = result
	return true
}

// PageResponse returns the current DeletedWebAppsListByLocationResponse page.
func (p *DeletedWebAppsListByLocationPager) PageResponse() DeletedWebAppsListByLocationResponse {
	return p.current
}

// DeletedWebAppsListPager provides operations for iterating over paged responses.
type DeletedWebAppsListPager struct {
	client    *DeletedWebAppsClient
	current   DeletedWebAppsListResponse
	err       error
	requester func(context.Context) (*policy.Request, error)
	advancer  func(context.Context, DeletedWebAppsListResponse) (*policy.Request, error)
}

// Err returns the last error encountered while paging.
func (p *DeletedWebAppsListPager) Err() error {
	return p.err
}

// NextPage returns true if the pager advanced to the next page.
// Returns false if there are no more pages or an error occurred.
func (p *DeletedWebAppsListPager) NextPage(ctx context.Context) bool {
	var req *policy.Request
	var err error
	if !reflect.ValueOf(p.current).IsZero() {
		if p.current.DeletedWebAppCollection.NextLink == nil || len(*p.current.DeletedWebAppCollection.NextLink) == 0 {
			return false
		}
		req, err = p.advancer(ctx, p.current)
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		p.err = err
		return false
	}
	resp, err := p.client.pl.Do(req)
	if err != nil {
		p.err = err
		return false
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {
		p.err = p.client.listHandleError(resp)
		return false
	}
	result, err := p.client.listHandleResponse(resp)
	if err != nil {
		p.err = err
		return false
	}
	p.current = result
	return true
}

// PageResponse returns the current DeletedWebAppsListResponse page.
func (p *DeletedWebAppsListPager) PageResponse() DeletedWebAppsListResponse {
	return p.current
}

// DiagnosticsListHostingEnvironmentDetectorResponsesPager provides operations for iterating over paged responses.
type DiagnosticsListHostingEnvironmentDetectorResponsesPager struct {
	client    *DiagnosticsClient
	current   DiagnosticsListHostingEnvironmentDetectorResponsesResponse
	err       error
	requester func(context.Context) (*policy.Request, error)
	advancer  func(context.Context, DiagnosticsListHostingEnvironmentDetectorResponsesResponse) (*policy.Request, error)
}

// Err returns the last error encountered while paging.
func (p *DiagnosticsListHostingEnvironmentDetectorResponsesPager) Err() error {
	return p.err
}

// NextPage returns true if the pager advanced to the next page.
// Returns false if there are no more pages or an error occurred.
func (p *DiagnosticsListHostingEnvironmentDetectorResponsesPager) NextPage(ctx context.Context) bool {
	var req *policy.Request
	var err error
	if !reflect.ValueOf(p.current).IsZero() {
		if p.current.DetectorResponseCollection.NextLink == nil || len(*p.current.DetectorResponseCollection.NextLink) == 0 {
			return false
		}
		req, err = p.advancer(ctx, p.current)
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		p.err = err
		return false
	}
	resp, err := p.client.pl.Do(req)
	if err != nil {
		p.err = err
		return false
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {
		p.err = p.client.listHostingEnvironmentDetectorResponsesHandleError(resp)
		return false
	}
	result, err := p.client.listHostingEnvironmentDetectorResponsesHandleResponse(resp)
	if err != nil {
		p.err = err
		return false
	}
	p.current = result
	return true
}

// PageResponse returns the current DiagnosticsListHostingEnvironmentDetectorResponsesResponse page.
func (p *DiagnosticsListHostingEnvironmentDetectorResponsesPager) PageResponse() DiagnosticsListHostingEnvironmentDetectorResponsesResponse {
	return p.current
}

// DiagnosticsListSiteAnalysesPager provides operations for iterating over paged responses.
type DiagnosticsListSiteAnalysesPager struct {
	client    *DiagnosticsClient
	current   DiagnosticsListSiteAnalysesResponse
	err       error
	requester func(context.Context) (*policy.Request, error)
	advancer  func(context.Context, DiagnosticsListSiteAnalysesResponse) (*policy.Request, error)
}

// Err returns the last error encountered while paging.
func (p *DiagnosticsListSiteAnalysesPager) Err() error {
	return p.err
}

// NextPage returns true if the pager advanced to the next page.
// Returns false if there are no more pages or an error occurred.
func (p *DiagnosticsListSiteAnalysesPager) NextPage(ctx context.Context) bool {
	var req *policy.Request
	var err error
	if !reflect.ValueOf(p.current).IsZero() {
		if p.current.DiagnosticAnalysisCollection.NextLink == nil || len(*p.current.DiagnosticAnalysisCollection.NextLink) == 0 {
			return false
		}
		req, err = p.advancer(ctx, p.current)
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		p.err = err
		return false
	}
	resp, err := p.client.pl.Do(req)
	if err != nil {
		p.err = err
		return false
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {
		p.err = p.client.listSiteAnalysesHandleError(resp)
		return false
	}
	result, err := p.client.listSiteAnalysesHandleResponse(resp)
	if err != nil {
		p.err = err
		return false
	}
	p.current = result
	return true
}

// PageResponse returns the current DiagnosticsListSiteAnalysesResponse page.
func (p *DiagnosticsListSiteAnalysesPager) PageResponse() DiagnosticsListSiteAnalysesResponse {
	return p.current
}

// DiagnosticsListSiteAnalysesSlotPager provides operations for iterating over paged responses.
type DiagnosticsListSiteAnalysesSlotPager struct {
	client    *DiagnosticsClient
	current   DiagnosticsListSiteAnalysesSlotResponse
	err       error
	requester func(context.Context) (*policy.Request, error)
	advancer  func(context.Context, DiagnosticsListSiteAnalysesSlotResponse) (*policy.Request, error)
}

// Err returns the last error encountered while paging.
func (p *DiagnosticsListSiteAnalysesSlotPager) Err() error {
	return p.err
}

// NextPage returns true if the pager advanced to the next page.
// Returns false if there are no more pages or an error occurred.
func (p *DiagnosticsListSiteAnalysesSlotPager) NextPage(ctx context.Context) bool {
	var req *policy.Request
	var err error
	if !reflect.ValueOf(p.current).IsZero() {
		if p.current.DiagnosticAnalysisCollection.NextLink == nil || len(*p.current.DiagnosticAnalysisCollection.NextLink) == 0 {
			return false
		}
		req, err = p.advancer(ctx, p.current)
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		p.err = err
		return false
	}
	resp, err := p.client.pl.Do(req)
	if err != nil {
		p.err = err
		return false
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {
		p.err = p.client.listSiteAnalysesSlotHandleError(resp)
		return false
	}
	result, err := p.client.listSiteAnalysesSlotHandleResponse(resp)
	if err != nil {
		p.err = err
		return false
	}
	p.current = result
	return true
}

// PageResponse returns the current DiagnosticsListSiteAnalysesSlotResponse page.
func (p *DiagnosticsListSiteAnalysesSlotPager) PageResponse() DiagnosticsListSiteAnalysesSlotResponse {
	return p.current
}

// DiagnosticsListSiteDetectorResponsesPager provides operations for iterating over paged responses.
type DiagnosticsListSiteDetectorResponsesPager struct {
	client    *DiagnosticsClient
	current   DiagnosticsListSiteDetectorResponsesResponse
	err       error
	requester func(context.Context) (*policy.Request, error)
	advancer  func(context.Context, DiagnosticsListSiteDetectorResponsesResponse) (*policy.Request, error)
}

// Err returns the last error encountered while paging.
func (p *DiagnosticsListSiteDetectorResponsesPager) Err() error {
	return p.err
}

// NextPage returns true if the pager advanced to the next page.
// Returns false if there are no more pages or an error occurred.
func (p *DiagnosticsListSiteDetectorResponsesPager) NextPage(ctx context.Context) bool {
	var req *policy.Request
	var err error
	if !reflect.ValueOf(p.current).IsZero() {
		if p.current.DetectorResponseCollection.NextLink == nil || len(*p.current.DetectorResponseCollection.NextLink) == 0 {
			return false
		}
		req, err = p.advancer(ctx, p.current)
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		p.err = err
		return false
	}
	resp, err := p.client.pl.Do(req)
	if err != nil {
		p.err = err
		return false
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {
		p.err = p.client.listSiteDetectorResponsesHandleError(resp)
		return false
	}
	result, err := p.client.listSiteDetectorResponsesHandleResponse(resp)
	if err != nil {
		p.err = err
		return false
	}
	p.current = result
	return true
}

// PageResponse returns the current DiagnosticsListSiteDetectorResponsesResponse page.
func (p *DiagnosticsListSiteDetectorResponsesPager) PageResponse() DiagnosticsListSiteDetectorResponsesResponse {
	return p.current
}

// DiagnosticsListSiteDetectorResponsesSlotPager provides operations for iterating over paged responses.
type DiagnosticsListSiteDetectorResponsesSlotPager struct {
	client    *DiagnosticsClient
	current   DiagnosticsListSiteDetectorResponsesSlotResponse
	err       error
	requester func(context.Context) (*policy.Request, error)
	advancer  func(context.Context, DiagnosticsListSiteDetectorResponsesSlotResponse) (*policy.Request, error)
}

// Err returns the last error encountered while paging.
func (p *DiagnosticsListSiteDetectorResponsesSlotPager) Err() error {
	return p.err
}

// NextPage returns true if the pager advanced to the next page.
// Returns false if there are no more pages or an error occurred.
func (p *DiagnosticsListSiteDetectorResponsesSlotPager) NextPage(ctx context.Context) bool {
	var req *policy.Request
	var err error
	if !reflect.ValueOf(p.current).IsZero() {
		if p.current.DetectorResponseCollection.NextLink == nil || len(*p.current.DetectorResponseCollection.NextLink) == 0 {
			return false
		}
		req, err = p.advancer(ctx, p.current)
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		p.err = err
		return false
	}
	resp, err := p.client.pl.Do(req)
	if err != nil {
		p.err = err
		return false
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {
		p.err = p.client.listSiteDetectorResponsesSlotHandleError(resp)
		return false
	}
	result, err := p.client.listSiteDetectorResponsesSlotHandleResponse(resp)
	if err != nil {
		p.err = err
		return false
	}
	p.current = result
	return true
}

// PageResponse returns the current DiagnosticsListSiteDetectorResponsesSlotResponse page.
func (p *DiagnosticsListSiteDetectorResponsesSlotPager) PageResponse() DiagnosticsListSiteDetectorResponsesSlotResponse {
	return p.current
}

// DiagnosticsListSiteDetectorsPager provides operations for iterating over paged responses.
type DiagnosticsListSiteDetectorsPager struct {
	client    *DiagnosticsClient
	current   DiagnosticsListSiteDetectorsResponse
	err       error
	requester func(context.Context) (*policy.Request, error)
	advancer  func(context.Context, DiagnosticsListSiteDetectorsResponse) (*policy.Request, error)
}

// Err returns the last error encountered while paging.
func (p *DiagnosticsListSiteDetectorsPager) Err() error {
	return p.err
}

// NextPage returns true if the pager advanced to the next page.
// Returns false if there are no more pages or an error occurred.
func (p *DiagnosticsListSiteDetectorsPager) NextPage(ctx context.Context) bool {
	var req *policy.Request
	var err error
	if !reflect.ValueOf(p.current).IsZero() {
		if p.current.DiagnosticDetectorCollection.NextLink == nil || len(*p.current.DiagnosticDetectorCollection.NextLink) == 0 {
			return false
		}
		req, err = p.advancer(ctx, p.current)
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		p.err = err
		return false
	}
	resp, err := p.client.pl.Do(req)
	if err != nil {
		p.err = err
		return false
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {
		p.err = p.client.listSiteDetectorsHandleError(resp)
		return false
	}
	result, err := p.client.listSiteDetectorsHandleResponse(resp)
	if err != nil {
		p.err = err
		return false
	}
	p.current = result
	return true
}

// PageResponse returns the current DiagnosticsListSiteDetectorsResponse page.
func (p *DiagnosticsListSiteDetectorsPager) PageResponse() DiagnosticsListSiteDetectorsResponse {
	return p.current
}

// DiagnosticsListSiteDetectorsSlotPager provides operations for iterating over paged responses.
type DiagnosticsListSiteDetectorsSlotPager struct {
	client    *DiagnosticsClient
	current   DiagnosticsListSiteDetectorsSlotResponse
	err       error
	requester func(context.Context) (*policy.Request, error)
	advancer  func(context.Context, DiagnosticsListSiteDetectorsSlotResponse) (*policy.Request, error)
}

// Err returns the last error encountered while paging.
func (p *DiagnosticsListSiteDetectorsSlotPager) Err() error {
	return p.err
}

// NextPage returns true if the pager advanced to the next page.
// Returns false if there are no more pages or an error occurred.
func (p *DiagnosticsListSiteDetectorsSlotPager) NextPage(ctx context.Context) bool {
	var req *policy.Request
	var err error
	if !reflect.ValueOf(p.current).IsZero() {
		if p.current.DiagnosticDetectorCollection.NextLink == nil || len(*p.current.DiagnosticDetectorCollection.NextLink) == 0 {
			return false
		}
		req, err = p.advancer(ctx, p.current)
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		p.err = err
		return false
	}
	resp, err := p.client.pl.Do(req)
	if err != nil {
		p.err = err
		return false
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {
		p.err = p.client.listSiteDetectorsSlotHandleError(resp)
		return false
	}
	result, err := p.client.listSiteDetectorsSlotHandleResponse(resp)
	if err != nil {
		p.err = err
		return false
	}
	p.current = result
	return true
}

// PageResponse returns the current DiagnosticsListSiteDetectorsSlotResponse page.
func (p *DiagnosticsListSiteDetectorsSlotPager) PageResponse() DiagnosticsListSiteDetectorsSlotResponse {
	return p.current
}

// DiagnosticsListSiteDiagnosticCategoriesPager provides operations for iterating over paged responses.
type DiagnosticsListSiteDiagnosticCategoriesPager struct {
	client    *DiagnosticsClient
	current   DiagnosticsListSiteDiagnosticCategoriesResponse
	err       error
	requester func(context.Context) (*policy.Request, error)
	advancer  func(context.Context, DiagnosticsListSiteDiagnosticCategoriesResponse) (*policy.Request, error)
}

// Err returns the last error encountered while paging.
func (p *DiagnosticsListSiteDiagnosticCategoriesPager) Err() error {
	return p.err
}

// NextPage returns true if the pager advanced to the next page.
// Returns false if there are no more pages or an error occurred.
func (p *DiagnosticsListSiteDiagnosticCategoriesPager) NextPage(ctx context.Context) bool {
	var req *policy.Request
	var err error
	if !reflect.ValueOf(p.current).IsZero() {
		if p.current.DiagnosticCategoryCollection.NextLink == nil || len(*p.current.DiagnosticCategoryCollection.NextLink) == 0 {
			return false
		}
		req, err = p.advancer(ctx, p.current)
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		p.err = err
		return false
	}
	resp, err := p.client.pl.Do(req)
	if err != nil {
		p.err = err
		return false
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {
		p.err = p.client.listSiteDiagnosticCategoriesHandleError(resp)
		return false
	}
	result, err := p.client.listSiteDiagnosticCategoriesHandleResponse(resp)
	if err != nil {
		p.err = err
		return false
	}
	p.current = result
	return true
}

// PageResponse returns the current DiagnosticsListSiteDiagnosticCategoriesResponse page.
func (p *DiagnosticsListSiteDiagnosticCategoriesPager) PageResponse() DiagnosticsListSiteDiagnosticCategoriesResponse {
	return p.current
}

// DiagnosticsListSiteDiagnosticCategoriesSlotPager provides operations for iterating over paged responses.
type DiagnosticsListSiteDiagnosticCategoriesSlotPager struct {
	client    *DiagnosticsClient
	current   DiagnosticsListSiteDiagnosticCategoriesSlotResponse
	err       error
	requester func(context.Context) (*policy.Request, error)
	advancer  func(context.Context, DiagnosticsListSiteDiagnosticCategoriesSlotResponse) (*policy.Request, error)
}

// Err returns the last error encountered while paging.
func (p *DiagnosticsListSiteDiagnosticCategoriesSlotPager) Err() error {
	return p.err
}

// NextPage returns true if the pager advanced to the next page.
// Returns false if there are no more pages or an error occurred.
func (p *DiagnosticsListSiteDiagnosticCategoriesSlotPager) NextPage(ctx context.Context) bool {
	var req *policy.Request
	var err error
	if !reflect.ValueOf(p.current).IsZero() {
		if p.current.DiagnosticCategoryCollection.NextLink == nil || len(*p.current.DiagnosticCategoryCollection.NextLink) == 0 {
			return false
		}
		req, err = p.advancer(ctx, p.current)
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		p.err = err
		return false
	}
	resp, err := p.client.pl.Do(req)
	if err != nil {
		p.err = err
		return false
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {
		p.err = p.client.listSiteDiagnosticCategoriesSlotHandleError(resp)
		return false
	}
	result, err := p.client.listSiteDiagnosticCategoriesSlotHandleResponse(resp)
	if err != nil {
		p.err = err
		return false
	}
	p.current = result
	return true
}

// PageResponse returns the current DiagnosticsListSiteDiagnosticCategoriesSlotResponse page.
func (p *DiagnosticsListSiteDiagnosticCategoriesSlotPager) PageResponse() DiagnosticsListSiteDiagnosticCategoriesSlotResponse {
	return p.current
}

// DomainRegistrationProviderListOperationsPager provides operations for iterating over paged responses.
type DomainRegistrationProviderListOperationsPager struct {
	client    *DomainRegistrationProviderClient
	current   DomainRegistrationProviderListOperationsResponse
	err       error
	requester func(context.Context) (*policy.Request, error)
	advancer  func(context.Context, DomainRegistrationProviderListOperationsResponse) (*policy.Request, error)
}

// Err returns the last error encountered while paging.
func (p *DomainRegistrationProviderListOperationsPager) Err() error {
	return p.err
}

// NextPage returns true if the pager advanced to the next page.
// Returns false if there are no more pages or an error occurred.
func (p *DomainRegistrationProviderListOperationsPager) NextPage(ctx context.Context) bool {
	var req *policy.Request
	var err error
	if !reflect.ValueOf(p.current).IsZero() {
		if p.current.CsmOperationCollection.NextLink == nil || len(*p.current.CsmOperationCollection.NextLink) == 0 {
			return false
		}
		req, err = p.advancer(ctx, p.current)
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		p.err = err
		return false
	}
	resp, err := p.client.pl.Do(req)
	if err != nil {
		p.err = err
		return false
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {
		p.err = p.client.listOperationsHandleError(resp)
		return false
	}
	result, err := p.client.listOperationsHandleResponse(resp)
	if err != nil {
		p.err = err
		return false
	}
	p.current = result
	return true
}

// PageResponse returns the current DomainRegistrationProviderListOperationsResponse page.
func (p *DomainRegistrationProviderListOperationsPager) PageResponse() DomainRegistrationProviderListOperationsResponse {
	return p.current
}

// DomainsListByResourceGroupPager provides operations for iterating over paged responses.
type DomainsListByResourceGroupPager struct {
	client    *DomainsClient
	current   DomainsListByResourceGroupResponse
	err       error
	requester func(context.Context) (*policy.Request, error)
	advancer  func(context.Context, DomainsListByResourceGroupResponse) (*policy.Request, error)
}

// Err returns the last error encountered while paging.
func (p *DomainsListByResourceGroupPager) Err() error {
	return p.err
}

// NextPage returns true if the pager advanced to the next page.
// Returns false if there are no more pages or an error occurred.
func (p *DomainsListByResourceGroupPager) NextPage(ctx context.Context) bool {
	var req *policy.Request
	var err error
	if !reflect.ValueOf(p.current).IsZero() {
		if p.current.DomainCollection.NextLink == nil || len(*p.current.DomainCollection.NextLink) == 0 {
			return false
		}
		req, err = p.advancer(ctx, p.current)
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		p.err = err
		return false
	}
	resp, err := p.client.pl.Do(req)
	if err != nil {
		p.err = err
		return false
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {
		p.err = p.client.listByResourceGroupHandleError(resp)
		return false
	}
	result, err := p.client.listByResourceGroupHandleResponse(resp)
	if err != nil {
		p.err = err
		return false
	}
	p.current = result
	return true
}

// PageResponse returns the current DomainsListByResourceGroupResponse page.
func (p *DomainsListByResourceGroupPager) PageResponse() DomainsListByResourceGroupResponse {
	return p.current
}

// DomainsListOwnershipIdentifiersPager provides operations for iterating over paged responses.
type DomainsListOwnershipIdentifiersPager struct {
	client    *DomainsClient
	current   DomainsListOwnershipIdentifiersResponse
	err       error
	requester func(context.Context) (*policy.Request, error)
	advancer  func(context.Context, DomainsListOwnershipIdentifiersResponse) (*policy.Request, error)
}

// Err returns the last error encountered while paging.
func (p *DomainsListOwnershipIdentifiersPager) Err() error {
	return p.err
}

// NextPage returns true if the pager advanced to the next page.
// Returns false if there are no more pages or an error occurred.
func (p *DomainsListOwnershipIdentifiersPager) NextPage(ctx context.Context) bool {
	var req *policy.Request
	var err error
	if !reflect.ValueOf(p.current).IsZero() {
		if p.current.DomainOwnershipIdentifierCollection.NextLink == nil || len(*p.current.DomainOwnershipIdentifierCollection.NextLink) == 0 {
			return false
		}
		req, err = p.advancer(ctx, p.current)
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		p.err = err
		return false
	}
	resp, err := p.client.pl.Do(req)
	if err != nil {
		p.err = err
		return false
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {
		p.err = p.client.listOwnershipIdentifiersHandleError(resp)
		return false
	}
	result, err := p.client.listOwnershipIdentifiersHandleResponse(resp)
	if err != nil {
		p.err = err
		return false
	}
	p.current = result
	return true
}

// PageResponse returns the current DomainsListOwnershipIdentifiersResponse page.
func (p *DomainsListOwnershipIdentifiersPager) PageResponse() DomainsListOwnershipIdentifiersResponse {
	return p.current
}

// DomainsListPager provides operations for iterating over paged responses.
type DomainsListPager struct {
	client    *DomainsClient
	current   DomainsListResponse
	err       error
	requester func(context.Context) (*policy.Request, error)
	advancer  func(context.Context, DomainsListResponse) (*policy.Request, error)
}

// Err returns the last error encountered while paging.
func (p *DomainsListPager) Err() error {
	return p.err
}

// NextPage returns true if the pager advanced to the next page.
// Returns false if there are no more pages or an error occurred.
func (p *DomainsListPager) NextPage(ctx context.Context) bool {
	var req *policy.Request
	var err error
	if !reflect.ValueOf(p.current).IsZero() {
		if p.current.DomainCollection.NextLink == nil || len(*p.current.DomainCollection.NextLink) == 0 {
			return false
		}
		req, err = p.advancer(ctx, p.current)
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		p.err = err
		return false
	}
	resp, err := p.client.pl.Do(req)
	if err != nil {
		p.err = err
		return false
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {
		p.err = p.client.listHandleError(resp)
		return false
	}
	result, err := p.client.listHandleResponse(resp)
	if err != nil {
		p.err = err
		return false
	}
	p.current = result
	return true
}

// PageResponse returns the current DomainsListResponse page.
func (p *DomainsListPager) PageResponse() DomainsListResponse {
	return p.current
}

// DomainsListRecommendationsPager provides operations for iterating over paged responses.
type DomainsListRecommendationsPager struct {
	client    *DomainsClient
	current   DomainsListRecommendationsResponse
	err       error
	requester func(context.Context) (*policy.Request, error)
	advancer  func(context.Context, DomainsListRecommendationsResponse) (*policy.Request, error)
}

// Err returns the last error encountered while paging.
func (p *DomainsListRecommendationsPager) Err() error {
	return p.err
}

// NextPage returns true if the pager advanced to the next page.
// Returns false if there are no more pages or an error occurred.
func (p *DomainsListRecommendationsPager) NextPage(ctx context.Context) bool {
	var req *policy.Request
	var err error
	if !reflect.ValueOf(p.current).IsZero() {
		if p.current.NameIdentifierCollection.NextLink == nil || len(*p.current.NameIdentifierCollection.NextLink) == 0 {
			return false
		}
		req, err = p.advancer(ctx, p.current)
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		p.err = err
		return false
	}
	resp, err := p.client.pl.Do(req)
	if err != nil {
		p.err = err
		return false
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {
		p.err = p.client.listRecommendationsHandleError(resp)
		return false
	}
	result, err := p.client.listRecommendationsHandleResponse(resp)
	if err != nil {
		p.err = err
		return false
	}
	p.current = result
	return true
}

// PageResponse returns the current DomainsListRecommendationsResponse page.
func (p *DomainsListRecommendationsPager) PageResponse() DomainsListRecommendationsResponse {
	return p.current
}

// KubeEnvironmentsListByResourceGroupPager provides operations for iterating over paged responses.
type KubeEnvironmentsListByResourceGroupPager struct {
	client    *KubeEnvironmentsClient
	current   KubeEnvironmentsListByResourceGroupResponse
	err       error
	requester func(context.Context) (*policy.Request, error)
	advancer  func(context.Context, KubeEnvironmentsListByResourceGroupResponse) (*policy.Request, error)
}

// Err returns the last error encountered while paging.
func (p *KubeEnvironmentsListByResourceGroupPager) Err() error {
	return p.err
}

// NextPage returns true if the pager advanced to the next page.
// Returns false if there are no more pages or an error occurred.
func (p *KubeEnvironmentsListByResourceGroupPager) NextPage(ctx context.Context) bool {
	var req *policy.Request
	var err error
	if !reflect.ValueOf(p.current).IsZero() {
		if p.current.KubeEnvironmentCollection.NextLink == nil || len(*p.current.KubeEnvironmentCollection.NextLink) == 0 {
			return false
		}
		req, err = p.advancer(ctx, p.current)
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		p.err = err
		return false
	}
	resp, err := p.client.pl.Do(req)
	if err != nil {
		p.err = err
		return false
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {
		p.err = p.client.listByResourceGroupHandleError(resp)
		return false
	}
	result, err := p.client.listByResourceGroupHandleResponse(resp)
	if err != nil {
		p.err = err
		return false
	}
	p.current = result
	return true
}

// PageResponse returns the current KubeEnvironmentsListByResourceGroupResponse page.
func (p *KubeEnvironmentsListByResourceGroupPager) PageResponse() KubeEnvironmentsListByResourceGroupResponse {
	return p.current
}

// KubeEnvironmentsListBySubscriptionPager provides operations for iterating over paged responses.
type KubeEnvironmentsListBySubscriptionPager struct {
	client    *KubeEnvironmentsClient
	current   KubeEnvironmentsListBySubscriptionResponse
	err       error
	requester func(context.Context) (*policy.Request, error)
	advancer  func(context.Context, KubeEnvironmentsListBySubscriptionResponse) (*policy.Request, error)
}

// Err returns the last error encountered while paging.
func (p *KubeEnvironmentsListBySubscriptionPager) Err() error {
	return p.err
}

// NextPage returns true if the pager advanced to the next page.
// Returns false if there are no more pages or an error occurred.
func (p *KubeEnvironmentsListBySubscriptionPager) NextPage(ctx context.Context) bool {
	var req *policy.Request
	var err error
	if !reflect.ValueOf(p.current).IsZero() {
		if p.current.KubeEnvironmentCollection.NextLink == nil || len(*p.current.KubeEnvironmentCollection.NextLink) == 0 {
			return false
		}
		req, err = p.advancer(ctx, p.current)
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		p.err = err
		return false
	}
	resp, err := p.client.pl.Do(req)
	if err != nil {
		p.err = err
		return false
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {
		p.err = p.client.listBySubscriptionHandleError(resp)
		return false
	}
	result, err := p.client.listBySubscriptionHandleResponse(resp)
	if err != nil {
		p.err = err
		return false
	}
	p.current = result
	return true
}

// PageResponse returns the current KubeEnvironmentsListBySubscriptionResponse page.
func (p *KubeEnvironmentsListBySubscriptionPager) PageResponse() KubeEnvironmentsListBySubscriptionResponse {
	return p.current
}

// ProviderGetAvailableStacksOnPremPager provides operations for iterating over paged responses.
type ProviderGetAvailableStacksOnPremPager struct {
	client    *ProviderClient
	current   ProviderGetAvailableStacksOnPremResponse
	err       error
	requester func(context.Context) (*policy.Request, error)
	advancer  func(context.Context, ProviderGetAvailableStacksOnPremResponse) (*policy.Request, error)
}

// Err returns the last error encountered while paging.
func (p *ProviderGetAvailableStacksOnPremPager) Err() error {
	return p.err
}

// NextPage returns true if the pager advanced to the next page.
// Returns false if there are no more pages or an error occurred.
func (p *ProviderGetAvailableStacksOnPremPager) NextPage(ctx context.Context) bool {
	var req *policy.Request
	var err error
	if !reflect.ValueOf(p.current).IsZero() {
		if p.current.ApplicationStackCollection.NextLink == nil || len(*p.current.ApplicationStackCollection.NextLink) == 0 {
			return false
		}
		req, err = p.advancer(ctx, p.current)
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		p.err = err
		return false
	}
	resp, err := p.client.pl.Do(req)
	if err != nil {
		p.err = err
		return false
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {
		p.err = p.client.getAvailableStacksOnPremHandleError(resp)
		return false
	}
	result, err := p.client.getAvailableStacksOnPremHandleResponse(resp)
	if err != nil {
		p.err = err
		return false
	}
	p.current = result
	return true
}

// PageResponse returns the current ProviderGetAvailableStacksOnPremResponse page.
func (p *ProviderGetAvailableStacksOnPremPager) PageResponse() ProviderGetAvailableStacksOnPremResponse {
	return p.current
}

// ProviderGetAvailableStacksPager provides operations for iterating over paged responses.
type ProviderGetAvailableStacksPager struct {
	client    *ProviderClient
	current   ProviderGetAvailableStacksResponse
	err       error
	requester func(context.Context) (*policy.Request, error)
	advancer  func(context.Context, ProviderGetAvailableStacksResponse) (*policy.Request, error)
}

// Err returns the last error encountered while paging.
func (p *ProviderGetAvailableStacksPager) Err() error {
	return p.err
}

// NextPage returns true if the pager advanced to the next page.
// Returns false if there are no more pages or an error occurred.
func (p *ProviderGetAvailableStacksPager) NextPage(ctx context.Context) bool {
	var req *policy.Request
	var err error
	if !reflect.ValueOf(p.current).IsZero() {
		if p.current.ApplicationStackCollection.NextLink == nil || len(*p.current.ApplicationStackCollection.NextLink) == 0 {
			return false
		}
		req, err = p.advancer(ctx, p.current)
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		p.err = err
		return false
	}
	resp, err := p.client.pl.Do(req)
	if err != nil {
		p.err = err
		return false
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {
		p.err = p.client.getAvailableStacksHandleError(resp)
		return false
	}
	result, err := p.client.getAvailableStacksHandleResponse(resp)
	if err != nil {
		p.err = err
		return false
	}
	p.current = result
	return true
}

// PageResponse returns the current ProviderGetAvailableStacksResponse page.
func (p *ProviderGetAvailableStacksPager) PageResponse() ProviderGetAvailableStacksResponse {
	return p.current
}

// ProviderGetFunctionAppStacksForLocationPager provides operations for iterating over paged responses.
type ProviderGetFunctionAppStacksForLocationPager struct {
	client    *ProviderClient
	current   ProviderGetFunctionAppStacksForLocationResponse
	err       error
	requester func(context.Context) (*policy.Request, error)
	advancer  func(context.Context, ProviderGetFunctionAppStacksForLocationResponse) (*policy.Request, error)
}

// Err returns the last error encountered while paging.
func (p *ProviderGetFunctionAppStacksForLocationPager) Err() error {
	return p.err
}

// NextPage returns true if the pager advanced to the next page.
// Returns false if there are no more pages or an error occurred.
func (p *ProviderGetFunctionAppStacksForLocationPager) NextPage(ctx context.Context) bool {
	var req *policy.Request
	var err error
	if !reflect.ValueOf(p.current).IsZero() {
		if p.current.FunctionAppStackCollection.NextLink == nil || len(*p.current.FunctionAppStackCollection.NextLink) == 0 {
			return false
		}
		req, err = p.advancer(ctx, p.current)
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		p.err = err
		return false
	}
	resp, err := p.client.pl.Do(req)
	if err != nil {
		p.err = err
		return false
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {
		p.err = p.client.getFunctionAppStacksForLocationHandleError(resp)
		return false
	}
	result, err := p.client.getFunctionAppStacksForLocationHandleResponse(resp)
	if err != nil {
		p.err = err
		return false
	}
	p.current = result
	return true
}

// PageResponse returns the current ProviderGetFunctionAppStacksForLocationResponse page.
func (p *ProviderGetFunctionAppStacksForLocationPager) PageResponse() ProviderGetFunctionAppStacksForLocationResponse {
	return p.current
}

// ProviderGetFunctionAppStacksPager provides operations for iterating over paged responses.
type ProviderGetFunctionAppStacksPager struct {
	client    *ProviderClient
	current   ProviderGetFunctionAppStacksResponse
	err       error
	requester func(context.Context) (*policy.Request, error)
	advancer  func(context.Context, ProviderGetFunctionAppStacksResponse) (*policy.Request, error)
}

// Err returns the last error encountered while paging.
func (p *ProviderGetFunctionAppStacksPager) Err() error {
	return p.err
}

// NextPage returns true if the pager advanced to the next page.
// Returns false if there are no more pages or an error occurred.
func (p *ProviderGetFunctionAppStacksPager) NextPage(ctx context.Context) bool {
	var req *policy.Request
	var err error
	if !reflect.ValueOf(p.current).IsZero() {
		if p.current.FunctionAppStackCollection.NextLink == nil || len(*p.current.FunctionAppStackCollection.NextLink) == 0 {
			return false
		}
		req, err = p.advancer(ctx, p.current)
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		p.err = err
		return false
	}
	resp, err := p.client.pl.Do(req)
	if err != nil {
		p.err = err
		return false
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {
		p.err = p.client.getFunctionAppStacksHandleError(resp)
		return false
	}
	result, err := p.client.getFunctionAppStacksHandleResponse(resp)
	if err != nil {
		p.err = err
		return false
	}
	p.current = result
	return true
}

// PageResponse returns the current ProviderGetFunctionAppStacksResponse page.
func (p *ProviderGetFunctionAppStacksPager) PageResponse() ProviderGetFunctionAppStacksResponse {
	return p.current
}

// ProviderGetWebAppStacksForLocationPager provides operations for iterating over paged responses.
type ProviderGetWebAppStacksForLocationPager struct {
	client    *ProviderClient
	current   ProviderGetWebAppStacksForLocationResponse
	err       error
	requester func(context.Context) (*policy.Request, error)
	advancer  func(context.Context, ProviderGetWebAppStacksForLocationResponse) (*policy.Request, error)
}

// Err returns the last error encountered while paging.
func (p *ProviderGetWebAppStacksForLocationPager) Err() error {
	return p.err
}

// NextPage returns true if the pager advanced to the next page.
// Returns false if there are no more pages or an error occurred.
func (p *ProviderGetWebAppStacksForLocationPager) NextPage(ctx context.Context) bool {
	var req *policy.Request
	var err error
	if !reflect.ValueOf(p.current).IsZero() {
		if p.current.WebAppStackCollection.NextLink == nil || len(*p.current.WebAppStackCollection.NextLink) == 0 {
			return false
		}
		req, err = p.advancer(ctx, p.current)
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		p.err = err
		return false
	}
	resp, err := p.client.pl.Do(req)
	if err != nil {
		p.err = err
		return false
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {
		p.err = p.client.getWebAppStacksForLocationHandleError(resp)
		return false
	}
	result, err := p.client.getWebAppStacksForLocationHandleResponse(resp)
	if err != nil {
		p.err = err
		return false
	}
	p.current = result
	return true
}

// PageResponse returns the current ProviderGetWebAppStacksForLocationResponse page.
func (p *ProviderGetWebAppStacksForLocationPager) PageResponse() ProviderGetWebAppStacksForLocationResponse {
	return p.current
}

// ProviderGetWebAppStacksPager provides operations for iterating over paged responses.
type ProviderGetWebAppStacksPager struct {
	client    *ProviderClient
	current   ProviderGetWebAppStacksResponse
	err       error
	requester func(context.Context) (*policy.Request, error)
	advancer  func(context.Context, ProviderGetWebAppStacksResponse) (*policy.Request, error)
}

// Err returns the last error encountered while paging.
func (p *ProviderGetWebAppStacksPager) Err() error {
	return p.err
}

// NextPage returns true if the pager advanced to the next page.
// Returns false if there are no more pages or an error occurred.
func (p *ProviderGetWebAppStacksPager) NextPage(ctx context.Context) bool {
	var req *policy.Request
	var err error
	if !reflect.ValueOf(p.current).IsZero() {
		if p.current.WebAppStackCollection.NextLink == nil || len(*p.current.WebAppStackCollection.NextLink) == 0 {
			return false
		}
		req, err = p.advancer(ctx, p.current)
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		p.err = err
		return false
	}
	resp, err := p.client.pl.Do(req)
	if err != nil {
		p.err = err
		return false
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {
		p.err = p.client.getWebAppStacksHandleError(resp)
		return false
	}
	result, err := p.client.getWebAppStacksHandleResponse(resp)
	if err != nil {
		p.err = err
		return false
	}
	p.current = result
	return true
}

// PageResponse returns the current ProviderGetWebAppStacksResponse page.
func (p *ProviderGetWebAppStacksPager) PageResponse() ProviderGetWebAppStacksResponse {
	return p.current
}

// ProviderListOperationsPager provides operations for iterating over paged responses.
type ProviderListOperationsPager struct {
	client    *ProviderClient
	current   ProviderListOperationsResponse
	err       error
	requester func(context.Context) (*policy.Request, error)
	advancer  func(context.Context, ProviderListOperationsResponse) (*policy.Request, error)
}

// Err returns the last error encountered while paging.
func (p *ProviderListOperationsPager) Err() error {
	return p.err
}

// NextPage returns true if the pager advanced to the next page.
// Returns false if there are no more pages or an error occurred.
func (p *ProviderListOperationsPager) NextPage(ctx context.Context) bool {
	var req *policy.Request
	var err error
	if !reflect.ValueOf(p.current).IsZero() {
		if p.current.CsmOperationCollection.NextLink == nil || len(*p.current.CsmOperationCollection.NextLink) == 0 {
			return false
		}
		req, err = p.advancer(ctx, p.current)
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		p.err = err
		return false
	}
	resp, err := p.client.pl.Do(req)
	if err != nil {
		p.err = err
		return false
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {
		p.err = p.client.listOperationsHandleError(resp)
		return false
	}
	result, err := p.client.listOperationsHandleResponse(resp)
	if err != nil {
		p.err = err
		return false
	}
	p.current = result
	return true
}

// PageResponse returns the current ProviderListOperationsResponse page.
func (p *ProviderListOperationsPager) PageResponse() ProviderListOperationsResponse {
	return p.current
}

// RecommendationsListHistoryForHostingEnvironmentPager provides operations for iterating over paged responses.
type RecommendationsListHistoryForHostingEnvironmentPager struct {
	client    *RecommendationsClient
	current   RecommendationsListHistoryForHostingEnvironmentResponse
	err       error
	requester func(context.Context) (*policy.Request, error)
	advancer  func(context.Context, RecommendationsListHistoryForHostingEnvironmentResponse) (*policy.Request, error)
}

// Err returns the last error encountered while paging.
func (p *RecommendationsListHistoryForHostingEnvironmentPager) Err() error {
	return p.err
}

// NextPage returns true if the pager advanced to the next page.
// Returns false if there are no more pages or an error occurred.
func (p *RecommendationsListHistoryForHostingEnvironmentPager) NextPage(ctx context.Context) bool {
	var req *policy.Request
	var err error
	if !reflect.ValueOf(p.current).IsZero() {
		if p.current.RecommendationCollection.NextLink == nil || len(*p.current.RecommendationCollection.NextLink) == 0 {
			return false
		}
		req, err = p.advancer(ctx, p.current)
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		p.err = err
		return false
	}
	resp, err := p.client.pl.Do(req)
	if err != nil {
		p.err = err
		return false
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {
		p.err = p.client.listHistoryForHostingEnvironmentHandleError(resp)
		return false
	}
	result, err := p.client.listHistoryForHostingEnvironmentHandleResponse(resp)
	if err != nil {
		p.err = err
		return false
	}
	p.current = result
	return true
}

// PageResponse returns the current RecommendationsListHistoryForHostingEnvironmentResponse page.
func (p *RecommendationsListHistoryForHostingEnvironmentPager) PageResponse() RecommendationsListHistoryForHostingEnvironmentResponse {
	return p.current
}

// RecommendationsListHistoryForWebAppPager provides operations for iterating over paged responses.
type RecommendationsListHistoryForWebAppPager struct {
	client    *RecommendationsClient
	current   RecommendationsListHistoryForWebAppResponse
	err       error
	requester func(context.Context) (*policy.Request, error)
	advancer  func(context.Context, RecommendationsListHistoryForWebAppResponse) (*policy.Request, error)
}

// Err returns the last error encountered while paging.
func (p *RecommendationsListHistoryForWebAppPager) Err() error {
	return p.err
}

// NextPage returns true if the pager advanced to the next page.
// Returns false if there are no more pages or an error occurred.
func (p *RecommendationsListHistoryForWebAppPager) NextPage(ctx context.Context) bool {
	var req *policy.Request
	var err error
	if !reflect.ValueOf(p.current).IsZero() {
		if p.current.RecommendationCollection.NextLink == nil || len(*p.current.RecommendationCollection.NextLink) == 0 {
			return false
		}
		req, err = p.advancer(ctx, p.current)
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		p.err = err
		return false
	}
	resp, err := p.client.pl.Do(req)
	if err != nil {
		p.err = err
		return false
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {
		p.err = p.client.listHistoryForWebAppHandleError(resp)
		return false
	}
	result, err := p.client.listHistoryForWebAppHandleResponse(resp)
	if err != nil {
		p.err = err
		return false
	}
	p.current = result
	return true
}

// PageResponse returns the current RecommendationsListHistoryForWebAppResponse page.
func (p *RecommendationsListHistoryForWebAppPager) PageResponse() RecommendationsListHistoryForWebAppResponse {
	return p.current
}

// RecommendationsListPager provides operations for iterating over paged responses.
type RecommendationsListPager struct {
	client    *RecommendationsClient
	current   RecommendationsListResponse
	err       error
	requester func(context.Context) (*policy.Request, error)
	advancer  func(context.Context, RecommendationsListResponse) (*policy.Request, error)
}

// Err returns the last error encountered while paging.
func (p *RecommendationsListPager) Err() error {
	return p.err
}

// NextPage returns true if the pager advanced to the next page.
// Returns false if there are no more pages or an error occurred.
func (p *RecommendationsListPager) NextPage(ctx context.Context) bool {
	var req *policy.Request
	var err error
	if !reflect.ValueOf(p.current).IsZero() {
		if p.current.RecommendationCollection.NextLink == nil || len(*p.current.RecommendationCollection.NextLink) == 0 {
			return false
		}
		req, err = p.advancer(ctx, p.current)
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		p.err = err
		return false
	}
	resp, err := p.client.pl.Do(req)
	if err != nil {
		p.err = err
		return false
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {
		p.err = p.client.listHandleError(resp)
		return false
	}
	result, err := p.client.listHandleResponse(resp)
	if err != nil {
		p.err = err
		return false
	}
	p.current = result
	return true
}

// PageResponse returns the current RecommendationsListResponse page.
func (p *RecommendationsListPager) PageResponse() RecommendationsListResponse {
	return p.current
}

// RecommendationsListRecommendedRulesForHostingEnvironmentPager provides operations for iterating over paged responses.
type RecommendationsListRecommendedRulesForHostingEnvironmentPager struct {
	client    *RecommendationsClient
	current   RecommendationsListRecommendedRulesForHostingEnvironmentResponse
	err       error
	requester func(context.Context) (*policy.Request, error)
	advancer  func(context.Context, RecommendationsListRecommendedRulesForHostingEnvironmentResponse) (*policy.Request, error)
}

// Err returns the last error encountered while paging.
func (p *RecommendationsListRecommendedRulesForHostingEnvironmentPager) Err() error {
	return p.err
}

// NextPage returns true if the pager advanced to the next page.
// Returns false if there are no more pages or an error occurred.
func (p *RecommendationsListRecommendedRulesForHostingEnvironmentPager) NextPage(ctx context.Context) bool {
	var req *policy.Request
	var err error
	if !reflect.ValueOf(p.current).IsZero() {
		if p.current.RecommendationCollection.NextLink == nil || len(*p.current.RecommendationCollection.NextLink) == 0 {
			return false
		}
		req, err = p.advancer(ctx, p.current)
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		p.err = err
		return false
	}
	resp, err := p.client.pl.Do(req)
	if err != nil {
		p.err = err
		return false
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {
		p.err = p.client.listRecommendedRulesForHostingEnvironmentHandleError(resp)
		return false
	}
	result, err := p.client.listRecommendedRulesForHostingEnvironmentHandleResponse(resp)
	if err != nil {
		p.err = err
		return false
	}
	p.current = result
	return true
}

// PageResponse returns the current RecommendationsListRecommendedRulesForHostingEnvironmentResponse page.
func (p *RecommendationsListRecommendedRulesForHostingEnvironmentPager) PageResponse() RecommendationsListRecommendedRulesForHostingEnvironmentResponse {
	return p.current
}

// RecommendationsListRecommendedRulesForWebAppPager provides operations for iterating over paged responses.
type RecommendationsListRecommendedRulesForWebAppPager struct {
	client    *RecommendationsClient
	current   RecommendationsListRecommendedRulesForWebAppResponse
	err       error
	requester func(context.Context) (*policy.Request, error)
	advancer  func(context.Context, RecommendationsListRecommendedRulesForWebAppResponse) (*policy.Request, error)
}

// Err returns the last error encountered while paging.
func (p *RecommendationsListRecommendedRulesForWebAppPager) Err() error {
	return p.err
}

// NextPage returns true if the pager advanced to the next page.
// Returns false if there are no more pages or an error occurred.
func (p *RecommendationsListRecommendedRulesForWebAppPager) NextPage(ctx context.Context) bool {
	var req *policy.Request
	var err error
	if !reflect.ValueOf(p.current).IsZero() {
		if p.current.RecommendationCollection.NextLink == nil || len(*p.current.RecommendationCollection.NextLink) == 0 {
			return false
		}
		req, err = p.advancer(ctx, p.current)
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		p.err = err
		return false
	}
	resp, err := p.client.pl.Do(req)
	if err != nil {
		p.err = err
		return false
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {
		p.err = p.client.listRecommendedRulesForWebAppHandleError(resp)
		return false
	}
	result, err := p.client.listRecommendedRulesForWebAppHandleResponse(resp)
	if err != nil {
		p.err = err
		return false
	}
	p.current = result
	return true
}

// PageResponse returns the current RecommendationsListRecommendedRulesForWebAppResponse page.
func (p *RecommendationsListRecommendedRulesForWebAppPager) PageResponse() RecommendationsListRecommendedRulesForWebAppResponse {
	return p.current
}

// ResourceHealthMetadataListByResourceGroupPager provides operations for iterating over paged responses.
type ResourceHealthMetadataListByResourceGroupPager struct {
	client    *ResourceHealthMetadataClient
	current   ResourceHealthMetadataListByResourceGroupResponse
	err       error
	requester func(context.Context) (*policy.Request, error)
	advancer  func(context.Context, ResourceHealthMetadataListByResourceGroupResponse) (*policy.Request, error)
}

// Err returns the last error encountered while paging.
func (p *ResourceHealthMetadataListByResourceGroupPager) Err() error {
	return p.err
}

// NextPage returns true if the pager advanced to the next page.
// Returns false if there are no more pages or an error occurred.
func (p *ResourceHealthMetadataListByResourceGroupPager) NextPage(ctx context.Context) bool {
	var req *policy.Request
	var err error
	if !reflect.ValueOf(p.current).IsZero() {
		if p.current.ResourceHealthMetadataCollection.NextLink == nil || len(*p.current.ResourceHealthMetadataCollection.NextLink) == 0 {
			return false
		}
		req, err = p.advancer(ctx, p.current)
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		p.err = err
		return false
	}
	resp, err := p.client.pl.Do(req)
	if err != nil {
		p.err = err
		return false
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {
		p.err = p.client.listByResourceGroupHandleError(resp)
		return false
	}
	result, err := p.client.listByResourceGroupHandleResponse(resp)
	if err != nil {
		p.err = err
		return false
	}
	p.current = result
	return true
}

// PageResponse returns the current ResourceHealthMetadataListByResourceGroupResponse page.
func (p *ResourceHealthMetadataListByResourceGroupPager) PageResponse() ResourceHealthMetadataListByResourceGroupResponse {
	return p.current
}

// ResourceHealthMetadataListBySitePager provides operations for iterating over paged responses.
type ResourceHealthMetadataListBySitePager struct {
	client    *ResourceHealthMetadataClient
	current   ResourceHealthMetadataListBySiteResponse
	err       error
	requester func(context.Context) (*policy.Request, error)
	advancer  func(context.Context, ResourceHealthMetadataListBySiteResponse) (*policy.Request, error)
}

// Err returns the last error encountered while paging.
func (p *ResourceHealthMetadataListBySitePager) Err() error {
	return p.err
}

// NextPage returns true if the pager advanced to the next page.
// Returns false if there are no more pages or an error occurred.
func (p *ResourceHealthMetadataListBySitePager) NextPage(ctx context.Context) bool {
	var req *policy.Request
	var err error
	if !reflect.ValueOf(p.current).IsZero() {
		if p.current.ResourceHealthMetadataCollection.NextLink == nil || len(*p.current.ResourceHealthMetadataCollection.NextLink) == 0 {
			return false
		}
		req, err = p.advancer(ctx, p.current)
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		p.err = err
		return false
	}
	resp, err := p.client.pl.Do(req)
	if err != nil {
		p.err = err
		return false
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {
		p.err = p.client.listBySiteHandleError(resp)
		return false
	}
	result, err := p.client.listBySiteHandleResponse(resp)
	if err != nil {
		p.err = err
		return false
	}
	p.current = result
	return true
}

// PageResponse returns the current ResourceHealthMetadataListBySiteResponse page.
func (p *ResourceHealthMetadataListBySitePager) PageResponse() ResourceHealthMetadataListBySiteResponse {
	return p.current
}

// ResourceHealthMetadataListBySiteSlotPager provides operations for iterating over paged responses.
type ResourceHealthMetadataListBySiteSlotPager struct {
	client    *ResourceHealthMetadataClient
	current   ResourceHealthMetadataListBySiteSlotResponse
	err       error
	requester func(context.Context) (*policy.Request, error)
	advancer  func(context.Context, ResourceHealthMetadataListBySiteSlotResponse) (*policy.Request, error)
}

// Err returns the last error encountered while paging.
func (p *ResourceHealthMetadataListBySiteSlotPager) Err() error {
	return p.err
}

// NextPage returns true if the pager advanced to the next page.
// Returns false if there are no more pages or an error occurred.
func (p *ResourceHealthMetadataListBySiteSlotPager) NextPage(ctx context.Context) bool {
	var req *policy.Request
	var err error
	if !reflect.ValueOf(p.current).IsZero() {
		if p.current.ResourceHealthMetadataCollection.NextLink == nil || len(*p.current.ResourceHealthMetadataCollection.NextLink) == 0 {
			return false
		}
		req, err = p.advancer(ctx, p.current)
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		p.err = err
		return false
	}
	resp, err := p.client.pl.Do(req)
	if err != nil {
		p.err = err
		return false
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {
		p.err = p.client.listBySiteSlotHandleError(resp)
		return false
	}
	result, err := p.client.listBySiteSlotHandleResponse(resp)
	if err != nil {
		p.err = err
		return false
	}
	p.current = result
	return true
}

// PageResponse returns the current ResourceHealthMetadataListBySiteSlotResponse page.
func (p *ResourceHealthMetadataListBySiteSlotPager) PageResponse() ResourceHealthMetadataListBySiteSlotResponse {
	return p.current
}

// ResourceHealthMetadataListPager provides operations for iterating over paged responses.
type ResourceHealthMetadataListPager struct {
	client    *ResourceHealthMetadataClient
	current   ResourceHealthMetadataListResponse
	err       error
	requester func(context.Context) (*policy.Request, error)
	advancer  func(context.Context, ResourceHealthMetadataListResponse) (*policy.Request, error)
}

// Err returns the last error encountered while paging.
func (p *ResourceHealthMetadataListPager) Err() error {
	return p.err
}

// NextPage returns true if the pager advanced to the next page.
// Returns false if there are no more pages or an error occurred.
func (p *ResourceHealthMetadataListPager) NextPage(ctx context.Context) bool {
	var req *policy.Request
	var err error
	if !reflect.ValueOf(p.current).IsZero() {
		if p.current.ResourceHealthMetadataCollection.NextLink == nil || len(*p.current.ResourceHealthMetadataCollection.NextLink) == 0 {
			return false
		}
		req, err = p.advancer(ctx, p.current)
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		p.err = err
		return false
	}
	resp, err := p.client.pl.Do(req)
	if err != nil {
		p.err = err
		return false
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {
		p.err = p.client.listHandleError(resp)
		return false
	}
	result, err := p.client.listHandleResponse(resp)
	if err != nil {
		p.err = err
		return false
	}
	p.current = result
	return true
}

// PageResponse returns the current ResourceHealthMetadataListResponse page.
func (p *ResourceHealthMetadataListPager) PageResponse() ResourceHealthMetadataListResponse {
	return p.current
}

// StaticSitesGetPrivateEndpointConnectionListPager provides operations for iterating over paged responses.
type StaticSitesGetPrivateEndpointConnectionListPager struct {
	client    *StaticSitesClient
	current   StaticSitesGetPrivateEndpointConnectionListResponse
	err       error
	requester func(context.Context) (*policy.Request, error)
	advancer  func(context.Context, StaticSitesGetPrivateEndpointConnectionListResponse) (*policy.Request, error)
}

// Err returns the last error encountered while paging.
func (p *StaticSitesGetPrivateEndpointConnectionListPager) Err() error {
	return p.err
}

// NextPage returns true if the pager advanced to the next page.
// Returns false if there are no more pages or an error occurred.
func (p *StaticSitesGetPrivateEndpointConnectionListPager) NextPage(ctx context.Context) bool {
	var req *policy.Request
	var err error
	if !reflect.ValueOf(p.current).IsZero() {
		if p.current.PrivateEndpointConnectionCollection.NextLink == nil || len(*p.current.PrivateEndpointConnectionCollection.NextLink) == 0 {
			return false
		}
		req, err = p.advancer(ctx, p.current)
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		p.err = err
		return false
	}
	resp, err := p.client.pl.Do(req)
	if err != nil {
		p.err = err
		return false
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {
		p.err = p.client.getPrivateEndpointConnectionListHandleError(resp)
		return false
	}
	result, err := p.client.getPrivateEndpointConnectionListHandleResponse(resp)
	if err != nil {
		p.err = err
		return false
	}
	p.current = result
	return true
}

// PageResponse returns the current StaticSitesGetPrivateEndpointConnectionListResponse page.
func (p *StaticSitesGetPrivateEndpointConnectionListPager) PageResponse() StaticSitesGetPrivateEndpointConnectionListResponse {
	return p.current
}

// StaticSitesGetStaticSiteBuildsPager provides operations for iterating over paged responses.
type StaticSitesGetStaticSiteBuildsPager struct {
	client    *StaticSitesClient
	current   StaticSitesGetStaticSiteBuildsResponse
	err       error
	requester func(context.Context) (*policy.Request, error)
	advancer  func(context.Context, StaticSitesGetStaticSiteBuildsResponse) (*policy.Request, error)
}

// Err returns the last error encountered while paging.
func (p *StaticSitesGetStaticSiteBuildsPager) Err() error {
	return p.err
}

// NextPage returns true if the pager advanced to the next page.
// Returns false if there are no more pages or an error occurred.
func (p *StaticSitesGetStaticSiteBuildsPager) NextPage(ctx context.Context) bool {
	var req *policy.Request
	var err error
	if !reflect.ValueOf(p.current).IsZero() {
		if p.current.StaticSiteBuildCollection.NextLink == nil || len(*p.current.StaticSiteBuildCollection.NextLink) == 0 {
			return false
		}
		req, err = p.advancer(ctx, p.current)
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		p.err = err
		return false
	}
	resp, err := p.client.pl.Do(req)
	if err != nil {
		p.err = err
		return false
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {
		p.err = p.client.getStaticSiteBuildsHandleError(resp)
		return false
	}
	result, err := p.client.getStaticSiteBuildsHandleResponse(resp)
	if err != nil {
		p.err = err
		return false
	}
	p.current = result
	return true
}

// PageResponse returns the current StaticSitesGetStaticSiteBuildsResponse page.
func (p *StaticSitesGetStaticSiteBuildsPager) PageResponse() StaticSitesGetStaticSiteBuildsResponse {
	return p.current
}

// StaticSitesGetStaticSitesByResourceGroupPager provides operations for iterating over paged responses.
type StaticSitesGetStaticSitesByResourceGroupPager struct {
	client    *StaticSitesClient
	current   StaticSitesGetStaticSitesByResourceGroupResponse
	err       error
	requester func(context.Context) (*policy.Request, error)
	advancer  func(context.Context, StaticSitesGetStaticSitesByResourceGroupResponse) (*policy.Request, error)
}

// Err returns the last error encountered while paging.
func (p *StaticSitesGetStaticSitesByResourceGroupPager) Err() error {
	return p.err
}

// NextPage returns true if the pager advanced to the next page.
// Returns false if there are no more pages or an error occurred.
func (p *StaticSitesGetStaticSitesByResourceGroupPager) NextPage(ctx context.Context) bool {
	var req *policy.Request
	var err error
	if !reflect.ValueOf(p.current).IsZero() {
		if p.current.StaticSiteCollection.NextLink == nil || len(*p.current.StaticSiteCollection.NextLink) == 0 {
			return false
		}
		req, err = p.advancer(ctx, p.current)
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		p.err = err
		return false
	}
	resp, err := p.client.pl.Do(req)
	if err != nil {
		p.err = err
		return false
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {
		p.err = p.client.getStaticSitesByResourceGroupHandleError(resp)
		return false
	}
	result, err := p.client.getStaticSitesByResourceGroupHandleResponse(resp)
	if err != nil {
		p.err = err
		return false
	}
	p.current = result
	return true
}

// PageResponse returns the current StaticSitesGetStaticSitesByResourceGroupResponse page.
func (p *StaticSitesGetStaticSitesByResourceGroupPager) PageResponse() StaticSitesGetStaticSitesByResourceGroupResponse {
	return p.current
}

// StaticSitesGetUserProvidedFunctionAppsForStaticSiteBuildPager provides operations for iterating over paged responses.
type StaticSitesGetUserProvidedFunctionAppsForStaticSiteBuildPager struct {
	client    *StaticSitesClient
	current   StaticSitesGetUserProvidedFunctionAppsForStaticSiteBuildResponse
	err       error
	requester func(context.Context) (*policy.Request, error)
	advancer  func(context.Context, StaticSitesGetUserProvidedFunctionAppsForStaticSiteBuildResponse) (*policy.Request, error)
}

// Err returns the last error encountered while paging.
func (p *StaticSitesGetUserProvidedFunctionAppsForStaticSiteBuildPager) Err() error {
	return p.err
}

// NextPage returns true if the pager advanced to the next page.
// Returns false if there are no more pages or an error occurred.
func (p *StaticSitesGetUserProvidedFunctionAppsForStaticSiteBuildPager) NextPage(ctx context.Context) bool {
	var req *policy.Request
	var err error
	if !reflect.ValueOf(p.current).IsZero() {
		if p.current.StaticSiteUserProvidedFunctionAppsCollection.NextLink == nil || len(*p.current.StaticSiteUserProvidedFunctionAppsCollection.NextLink) == 0 {
			return false
		}
		req, err = p.advancer(ctx, p.current)
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		p.err = err
		return false
	}
	resp, err := p.client.pl.Do(req)
	if err != nil {
		p.err = err
		return false
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {
		p.err = p.client.getUserProvidedFunctionAppsForStaticSiteBuildHandleError(resp)
		return false
	}
	result, err := p.client.getUserProvidedFunctionAppsForStaticSiteBuildHandleResponse(resp)
	if err != nil {
		p.err = err
		return false
	}
	p.current = result
	return true
}

// PageResponse returns the current StaticSitesGetUserProvidedFunctionAppsForStaticSiteBuildResponse page.
func (p *StaticSitesGetUserProvidedFunctionAppsForStaticSiteBuildPager) PageResponse() StaticSitesGetUserProvidedFunctionAppsForStaticSiteBuildResponse {
	return p.current
}

// StaticSitesGetUserProvidedFunctionAppsForStaticSitePager provides operations for iterating over paged responses.
type StaticSitesGetUserProvidedFunctionAppsForStaticSitePager struct {
	client    *StaticSitesClient
	current   StaticSitesGetUserProvidedFunctionAppsForStaticSiteResponse
	err       error
	requester func(context.Context) (*policy.Request, error)
	advancer  func(context.Context, StaticSitesGetUserProvidedFunctionAppsForStaticSiteResponse) (*policy.Request, error)
}

// Err returns the last error encountered while paging.
func (p *StaticSitesGetUserProvidedFunctionAppsForStaticSitePager) Err() error {
	return p.err
}

// NextPage returns true if the pager advanced to the next page.
// Returns false if there are no more pages or an error occurred.
func (p *StaticSitesGetUserProvidedFunctionAppsForStaticSitePager) NextPage(ctx context.Context) bool {
	var req *policy.Request
	var err error
	if !reflect.ValueOf(p.current).IsZero() {
		if p.current.StaticSiteUserProvidedFunctionAppsCollection.NextLink == nil || len(*p.current.StaticSiteUserProvidedFunctionAppsCollection.NextLink) == 0 {
			return false
		}
		req, err = p.advancer(ctx, p.current)
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		p.err = err
		return false
	}
	resp, err := p.client.pl.Do(req)
	if err != nil {
		p.err = err
		return false
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {
		p.err = p.client.getUserProvidedFunctionAppsForStaticSiteHandleError(resp)
		return false
	}
	result, err := p.client.getUserProvidedFunctionAppsForStaticSiteHandleResponse(resp)
	if err != nil {
		p.err = err
		return false
	}
	p.current = result
	return true
}

// PageResponse returns the current StaticSitesGetUserProvidedFunctionAppsForStaticSiteResponse page.
func (p *StaticSitesGetUserProvidedFunctionAppsForStaticSitePager) PageResponse() StaticSitesGetUserProvidedFunctionAppsForStaticSiteResponse {
	return p.current
}

// StaticSitesListPager provides operations for iterating over paged responses.
type StaticSitesListPager struct {
	client    *StaticSitesClient
	current   StaticSitesListResponse
	err       error
	requester func(context.Context) (*policy.Request, error)
	advancer  func(context.Context, StaticSitesListResponse) (*policy.Request, error)
}

// Err returns the last error encountered while paging.
func (p *StaticSitesListPager) Err() error {
	return p.err
}

// NextPage returns true if the pager advanced to the next page.
// Returns false if there are no more pages or an error occurred.
func (p *StaticSitesListPager) NextPage(ctx context.Context) bool {
	var req *policy.Request
	var err error
	if !reflect.ValueOf(p.current).IsZero() {
		if p.current.StaticSiteCollection.NextLink == nil || len(*p.current.StaticSiteCollection.NextLink) == 0 {
			return false
		}
		req, err = p.advancer(ctx, p.current)
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		p.err = err
		return false
	}
	resp, err := p.client.pl.Do(req)
	if err != nil {
		p.err = err
		return false
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {
		p.err = p.client.listHandleError(resp)
		return false
	}
	result, err := p.client.listHandleResponse(resp)
	if err != nil {
		p.err = err
		return false
	}
	p.current = result
	return true
}

// PageResponse returns the current StaticSitesListResponse page.
func (p *StaticSitesListPager) PageResponse() StaticSitesListResponse {
	return p.current
}

// StaticSitesListStaticSiteBuildFunctionsPager provides operations for iterating over paged responses.
type StaticSitesListStaticSiteBuildFunctionsPager struct {
	client    *StaticSitesClient
	current   StaticSitesListStaticSiteBuildFunctionsResponse
	err       error
	requester func(context.Context) (*policy.Request, error)
	advancer  func(context.Context, StaticSitesListStaticSiteBuildFunctionsResponse) (*policy.Request, error)
}

// Err returns the last error encountered while paging.
func (p *StaticSitesListStaticSiteBuildFunctionsPager) Err() error {
	return p.err
}

// NextPage returns true if the pager advanced to the next page.
// Returns false if there are no more pages or an error occurred.
func (p *StaticSitesListStaticSiteBuildFunctionsPager) NextPage(ctx context.Context) bool {
	var req *policy.Request
	var err error
	if !reflect.ValueOf(p.current).IsZero() {
		if p.current.StaticSiteFunctionOverviewCollection.NextLink == nil || len(*p.current.StaticSiteFunctionOverviewCollection.NextLink) == 0 {
			return false
		}
		req, err = p.advancer(ctx, p.current)
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		p.err = err
		return false
	}
	resp, err := p.client.pl.Do(req)
	if err != nil {
		p.err = err
		return false
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {
		p.err = p.client.listStaticSiteBuildFunctionsHandleError(resp)
		return false
	}
	result, err := p.client.listStaticSiteBuildFunctionsHandleResponse(resp)
	if err != nil {
		p.err = err
		return false
	}
	p.current = result
	return true
}

// PageResponse returns the current StaticSitesListStaticSiteBuildFunctionsResponse page.
func (p *StaticSitesListStaticSiteBuildFunctionsPager) PageResponse() StaticSitesListStaticSiteBuildFunctionsResponse {
	return p.current
}

// StaticSitesListStaticSiteCustomDomainsPager provides operations for iterating over paged responses.
type StaticSitesListStaticSiteCustomDomainsPager struct {
	client    *StaticSitesClient
	current   StaticSitesListStaticSiteCustomDomainsResponse
	err       error
	requester func(context.Context) (*policy.Request, error)
	advancer  func(context.Context, StaticSitesListStaticSiteCustomDomainsResponse) (*policy.Request, error)
}

// Err returns the last error encountered while paging.
func (p *StaticSitesListStaticSiteCustomDomainsPager) Err() error {
	return p.err
}

// NextPage returns true if the pager advanced to the next page.
// Returns false if there are no more pages or an error occurred.
func (p *StaticSitesListStaticSiteCustomDomainsPager) NextPage(ctx context.Context) bool {
	var req *policy.Request
	var err error
	if !reflect.ValueOf(p.current).IsZero() {
		if p.current.StaticSiteCustomDomainOverviewCollection.NextLink == nil || len(*p.current.StaticSiteCustomDomainOverviewCollection.NextLink) == 0 {
			return false
		}
		req, err = p.advancer(ctx, p.current)
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		p.err = err
		return false
	}
	resp, err := p.client.pl.Do(req)
	if err != nil {
		p.err = err
		return false
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {
		p.err = p.client.listStaticSiteCustomDomainsHandleError(resp)
		return false
	}
	result, err := p.client.listStaticSiteCustomDomainsHandleResponse(resp)
	if err != nil {
		p.err = err
		return false
	}
	p.current = result
	return true
}

// PageResponse returns the current StaticSitesListStaticSiteCustomDomainsResponse page.
func (p *StaticSitesListStaticSiteCustomDomainsPager) PageResponse() StaticSitesListStaticSiteCustomDomainsResponse {
	return p.current
}

// StaticSitesListStaticSiteFunctionsPager provides operations for iterating over paged responses.
type StaticSitesListStaticSiteFunctionsPager struct {
	client    *StaticSitesClient
	current   StaticSitesListStaticSiteFunctionsResponse
	err       error
	requester func(context.Context) (*policy.Request, error)
	advancer  func(context.Context, StaticSitesListStaticSiteFunctionsResponse) (*policy.Request, error)
}

// Err returns the last error encountered while paging.
func (p *StaticSitesListStaticSiteFunctionsPager) Err() error {
	return p.err
}

// NextPage returns true if the pager advanced to the next page.
// Returns false if there are no more pages or an error occurred.
func (p *StaticSitesListStaticSiteFunctionsPager) NextPage(ctx context.Context) bool {
	var req *policy.Request
	var err error
	if !reflect.ValueOf(p.current).IsZero() {
		if p.current.StaticSiteFunctionOverviewCollection.NextLink == nil || len(*p.current.StaticSiteFunctionOverviewCollection.NextLink) == 0 {
			return false
		}
		req, err = p.advancer(ctx, p.current)
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		p.err = err
		return false
	}
	resp, err := p.client.pl.Do(req)
	if err != nil {
		p.err = err
		return false
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {
		p.err = p.client.listStaticSiteFunctionsHandleError(resp)
		return false
	}
	result, err := p.client.listStaticSiteFunctionsHandleResponse(resp)
	if err != nil {
		p.err = err
		return false
	}
	p.current = result
	return true
}

// PageResponse returns the current StaticSitesListStaticSiteFunctionsResponse page.
func (p *StaticSitesListStaticSiteFunctionsPager) PageResponse() StaticSitesListStaticSiteFunctionsResponse {
	return p.current
}

// StaticSitesListStaticSiteUsersPager provides operations for iterating over paged responses.
type StaticSitesListStaticSiteUsersPager struct {
	client    *StaticSitesClient
	current   StaticSitesListStaticSiteUsersResponse
	err       error
	requester func(context.Context) (*policy.Request, error)
	advancer  func(context.Context, StaticSitesListStaticSiteUsersResponse) (*policy.Request, error)
}

// Err returns the last error encountered while paging.
func (p *StaticSitesListStaticSiteUsersPager) Err() error {
	return p.err
}

// NextPage returns true if the pager advanced to the next page.
// Returns false if there are no more pages or an error occurred.
func (p *StaticSitesListStaticSiteUsersPager) NextPage(ctx context.Context) bool {
	var req *policy.Request
	var err error
	if !reflect.ValueOf(p.current).IsZero() {
		if p.current.StaticSiteUserCollection.NextLink == nil || len(*p.current.StaticSiteUserCollection.NextLink) == 0 {
			return false
		}
		req, err = p.advancer(ctx, p.current)
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		p.err = err
		return false
	}
	resp, err := p.client.pl.Do(req)
	if err != nil {
		p.err = err
		return false
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {
		p.err = p.client.listStaticSiteUsersHandleError(resp)
		return false
	}
	result, err := p.client.listStaticSiteUsersHandleResponse(resp)
	if err != nil {
		p.err = err
		return false
	}
	p.current = result
	return true
}

// PageResponse returns the current StaticSitesListStaticSiteUsersResponse page.
func (p *StaticSitesListStaticSiteUsersPager) PageResponse() StaticSitesListStaticSiteUsersResponse {
	return p.current
}

// TopLevelDomainsListAgreementsPager provides operations for iterating over paged responses.
type TopLevelDomainsListAgreementsPager struct {
	client    *TopLevelDomainsClient
	current   TopLevelDomainsListAgreementsResponse
	err       error
	requester func(context.Context) (*policy.Request, error)
	advancer  func(context.Context, TopLevelDomainsListAgreementsResponse) (*policy.Request, error)
}

// Err returns the last error encountered while paging.
func (p *TopLevelDomainsListAgreementsPager) Err() error {
	return p.err
}

// NextPage returns true if the pager advanced to the next page.
// Returns false if there are no more pages or an error occurred.
func (p *TopLevelDomainsListAgreementsPager) NextPage(ctx context.Context) bool {
	var req *policy.Request
	var err error
	if !reflect.ValueOf(p.current).IsZero() {
		if p.current.TldLegalAgreementCollection.NextLink == nil || len(*p.current.TldLegalAgreementCollection.NextLink) == 0 {
			return false
		}
		req, err = p.advancer(ctx, p.current)
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		p.err = err
		return false
	}
	resp, err := p.client.pl.Do(req)
	if err != nil {
		p.err = err
		return false
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {
		p.err = p.client.listAgreementsHandleError(resp)
		return false
	}
	result, err := p.client.listAgreementsHandleResponse(resp)
	if err != nil {
		p.err = err
		return false
	}
	p.current = result
	return true
}

// PageResponse returns the current TopLevelDomainsListAgreementsResponse page.
func (p *TopLevelDomainsListAgreementsPager) PageResponse() TopLevelDomainsListAgreementsResponse {
	return p.current
}

// TopLevelDomainsListPager provides operations for iterating over paged responses.
type TopLevelDomainsListPager struct {
	client    *TopLevelDomainsClient
	current   TopLevelDomainsListResponse
	err       error
	requester func(context.Context) (*policy.Request, error)
	advancer  func(context.Context, TopLevelDomainsListResponse) (*policy.Request, error)
}

// Err returns the last error encountered while paging.
func (p *TopLevelDomainsListPager) Err() error {
	return p.err
}

// NextPage returns true if the pager advanced to the next page.
// Returns false if there are no more pages or an error occurred.
func (p *TopLevelDomainsListPager) NextPage(ctx context.Context) bool {
	var req *policy.Request
	var err error
	if !reflect.ValueOf(p.current).IsZero() {
		if p.current.TopLevelDomainCollection.NextLink == nil || len(*p.current.TopLevelDomainCollection.NextLink) == 0 {
			return false
		}
		req, err = p.advancer(ctx, p.current)
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		p.err = err
		return false
	}
	resp, err := p.client.pl.Do(req)
	if err != nil {
		p.err = err
		return false
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {
		p.err = p.client.listHandleError(resp)
		return false
	}
	result, err := p.client.listHandleResponse(resp)
	if err != nil {
		p.err = err
		return false
	}
	p.current = result
	return true
}

// PageResponse returns the current TopLevelDomainsListResponse page.
func (p *TopLevelDomainsListPager) PageResponse() TopLevelDomainsListResponse {
	return p.current
}

// WebAppsGetAppSettingsKeyVaultReferencesPager provides operations for iterating over paged responses.
type WebAppsGetAppSettingsKeyVaultReferencesPager struct {
	client    *WebAppsClient
	current   WebAppsGetAppSettingsKeyVaultReferencesResponse
	err       error
	requester func(context.Context) (*policy.Request, error)
	advancer  func(context.Context, WebAppsGetAppSettingsKeyVaultReferencesResponse) (*policy.Request, error)
}

// Err returns the last error encountered while paging.
func (p *WebAppsGetAppSettingsKeyVaultReferencesPager) Err() error {
	return p.err
}

// NextPage returns true if the pager advanced to the next page.
// Returns false if there are no more pages or an error occurred.
func (p *WebAppsGetAppSettingsKeyVaultReferencesPager) NextPage(ctx context.Context) bool {
	var req *policy.Request
	var err error
	if !reflect.ValueOf(p.current).IsZero() {
		if p.current.APIKVReferenceCollection.NextLink == nil || len(*p.current.APIKVReferenceCollection.NextLink) == 0 {
			return false
		}
		req, err = p.advancer(ctx, p.current)
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		p.err = err
		return false
	}
	resp, err := p.client.pl.Do(req)
	if err != nil {
		p.err = err
		return false
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {
		p.err = p.client.getAppSettingsKeyVaultReferencesHandleError(resp)
		return false
	}
	result, err := p.client.getAppSettingsKeyVaultReferencesHandleResponse(resp)
	if err != nil {
		p.err = err
		return false
	}
	p.current = result
	return true
}

// PageResponse returns the current WebAppsGetAppSettingsKeyVaultReferencesResponse page.
func (p *WebAppsGetAppSettingsKeyVaultReferencesPager) PageResponse() WebAppsGetAppSettingsKeyVaultReferencesResponse {
	return p.current
}

// WebAppsGetAppSettingsKeyVaultReferencesSlotPager provides operations for iterating over paged responses.
type WebAppsGetAppSettingsKeyVaultReferencesSlotPager struct {
	client    *WebAppsClient
	current   WebAppsGetAppSettingsKeyVaultReferencesSlotResponse
	err       error
	requester func(context.Context) (*policy.Request, error)
	advancer  func(context.Context, WebAppsGetAppSettingsKeyVaultReferencesSlotResponse) (*policy.Request, error)
}

// Err returns the last error encountered while paging.
func (p *WebAppsGetAppSettingsKeyVaultReferencesSlotPager) Err() error {
	return p.err
}

// NextPage returns true if the pager advanced to the next page.
// Returns false if there are no more pages or an error occurred.
func (p *WebAppsGetAppSettingsKeyVaultReferencesSlotPager) NextPage(ctx context.Context) bool {
	var req *policy.Request
	var err error
	if !reflect.ValueOf(p.current).IsZero() {
		if p.current.APIKVReferenceCollection.NextLink == nil || len(*p.current.APIKVReferenceCollection.NextLink) == 0 {
			return false
		}
		req, err = p.advancer(ctx, p.current)
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		p.err = err
		return false
	}
	resp, err := p.client.pl.Do(req)
	if err != nil {
		p.err = err
		return false
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {
		p.err = p.client.getAppSettingsKeyVaultReferencesSlotHandleError(resp)
		return false
	}
	result, err := p.client.getAppSettingsKeyVaultReferencesSlotHandleResponse(resp)
	if err != nil {
		p.err = err
		return false
	}
	p.current = result
	return true
}

// PageResponse returns the current WebAppsGetAppSettingsKeyVaultReferencesSlotResponse page.
func (p *WebAppsGetAppSettingsKeyVaultReferencesSlotPager) PageResponse() WebAppsGetAppSettingsKeyVaultReferencesSlotResponse {
	return p.current
}

// WebAppsGetPrivateEndpointConnectionListPager provides operations for iterating over paged responses.
type WebAppsGetPrivateEndpointConnectionListPager struct {
	client    *WebAppsClient
	current   WebAppsGetPrivateEndpointConnectionListResponse
	err       error
	requester func(context.Context) (*policy.Request, error)
	advancer  func(context.Context, WebAppsGetPrivateEndpointConnectionListResponse) (*policy.Request, error)
}

// Err returns the last error encountered while paging.
func (p *WebAppsGetPrivateEndpointConnectionListPager) Err() error {
	return p.err
}

// NextPage returns true if the pager advanced to the next page.
// Returns false if there are no more pages or an error occurred.
func (p *WebAppsGetPrivateEndpointConnectionListPager) NextPage(ctx context.Context) bool {
	var req *policy.Request
	var err error
	if !reflect.ValueOf(p.current).IsZero() {
		if p.current.PrivateEndpointConnectionCollection.NextLink == nil || len(*p.current.PrivateEndpointConnectionCollection.NextLink) == 0 {
			return false
		}
		req, err = p.advancer(ctx, p.current)
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		p.err = err
		return false
	}
	resp, err := p.client.pl.Do(req)
	if err != nil {
		p.err = err
		return false
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {
		p.err = p.client.getPrivateEndpointConnectionListHandleError(resp)
		return false
	}
	result, err := p.client.getPrivateEndpointConnectionListHandleResponse(resp)
	if err != nil {
		p.err = err
		return false
	}
	p.current = result
	return true
}

// PageResponse returns the current WebAppsGetPrivateEndpointConnectionListResponse page.
func (p *WebAppsGetPrivateEndpointConnectionListPager) PageResponse() WebAppsGetPrivateEndpointConnectionListResponse {
	return p.current
}

// WebAppsGetPrivateEndpointConnectionListSlotPager provides operations for iterating over paged responses.
type WebAppsGetPrivateEndpointConnectionListSlotPager struct {
	client    *WebAppsClient
	current   WebAppsGetPrivateEndpointConnectionListSlotResponse
	err       error
	requester func(context.Context) (*policy.Request, error)
	advancer  func(context.Context, WebAppsGetPrivateEndpointConnectionListSlotResponse) (*policy.Request, error)
}

// Err returns the last error encountered while paging.
func (p *WebAppsGetPrivateEndpointConnectionListSlotPager) Err() error {
	return p.err
}

// NextPage returns true if the pager advanced to the next page.
// Returns false if there are no more pages or an error occurred.
func (p *WebAppsGetPrivateEndpointConnectionListSlotPager) NextPage(ctx context.Context) bool {
	var req *policy.Request
	var err error
	if !reflect.ValueOf(p.current).IsZero() {
		if p.current.PrivateEndpointConnectionCollection.NextLink == nil || len(*p.current.PrivateEndpointConnectionCollection.NextLink) == 0 {
			return false
		}
		req, err = p.advancer(ctx, p.current)
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		p.err = err
		return false
	}
	resp, err := p.client.pl.Do(req)
	if err != nil {
		p.err = err
		return false
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {
		p.err = p.client.getPrivateEndpointConnectionListSlotHandleError(resp)
		return false
	}
	result, err := p.client.getPrivateEndpointConnectionListSlotHandleResponse(resp)
	if err != nil {
		p.err = err
		return false
	}
	p.current = result
	return true
}

// PageResponse returns the current WebAppsGetPrivateEndpointConnectionListSlotResponse page.
func (p *WebAppsGetPrivateEndpointConnectionListSlotPager) PageResponse() WebAppsGetPrivateEndpointConnectionListSlotResponse {
	return p.current
}

// WebAppsGetSiteConnectionStringKeyVaultReferencesPager provides operations for iterating over paged responses.
type WebAppsGetSiteConnectionStringKeyVaultReferencesPager struct {
	client    *WebAppsClient
	current   WebAppsGetSiteConnectionStringKeyVaultReferencesResponse
	err       error
	requester func(context.Context) (*policy.Request, error)
	advancer  func(context.Context, WebAppsGetSiteConnectionStringKeyVaultReferencesResponse) (*policy.Request, error)
}

// Err returns the last error encountered while paging.
func (p *WebAppsGetSiteConnectionStringKeyVaultReferencesPager) Err() error {
	return p.err
}

// NextPage returns true if the pager advanced to the next page.
// Returns false if there are no more pages or an error occurred.
func (p *WebAppsGetSiteConnectionStringKeyVaultReferencesPager) NextPage(ctx context.Context) bool {
	var req *policy.Request
	var err error
	if !reflect.ValueOf(p.current).IsZero() {
		if p.current.APIKVReferenceCollection.NextLink == nil || len(*p.current.APIKVReferenceCollection.NextLink) == 0 {
			return false
		}
		req, err = p.advancer(ctx, p.current)
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		p.err = err
		return false
	}
	resp, err := p.client.pl.Do(req)
	if err != nil {
		p.err = err
		return false
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {
		p.err = p.client.getSiteConnectionStringKeyVaultReferencesHandleError(resp)
		return false
	}
	result, err := p.client.getSiteConnectionStringKeyVaultReferencesHandleResponse(resp)
	if err != nil {
		p.err = err
		return false
	}
	p.current = result
	return true
}

// PageResponse returns the current WebAppsGetSiteConnectionStringKeyVaultReferencesResponse page.
func (p *WebAppsGetSiteConnectionStringKeyVaultReferencesPager) PageResponse() WebAppsGetSiteConnectionStringKeyVaultReferencesResponse {
	return p.current
}

// WebAppsGetSiteConnectionStringKeyVaultReferencesSlotPager provides operations for iterating over paged responses.
type WebAppsGetSiteConnectionStringKeyVaultReferencesSlotPager struct {
	client    *WebAppsClient
	current   WebAppsGetSiteConnectionStringKeyVaultReferencesSlotResponse
	err       error
	requester func(context.Context) (*policy.Request, error)
	advancer  func(context.Context, WebAppsGetSiteConnectionStringKeyVaultReferencesSlotResponse) (*policy.Request, error)
}

// Err returns the last error encountered while paging.
func (p *WebAppsGetSiteConnectionStringKeyVaultReferencesSlotPager) Err() error {
	return p.err
}

// NextPage returns true if the pager advanced to the next page.
// Returns false if there are no more pages or an error occurred.
func (p *WebAppsGetSiteConnectionStringKeyVaultReferencesSlotPager) NextPage(ctx context.Context) bool {
	var req *policy.Request
	var err error
	if !reflect.ValueOf(p.current).IsZero() {
		if p.current.APIKVReferenceCollection.NextLink == nil || len(*p.current.APIKVReferenceCollection.NextLink) == 0 {
			return false
		}
		req, err = p.advancer(ctx, p.current)
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		p.err = err
		return false
	}
	resp, err := p.client.pl.Do(req)
	if err != nil {
		p.err = err
		return false
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {
		p.err = p.client.getSiteConnectionStringKeyVaultReferencesSlotHandleError(resp)
		return false
	}
	result, err := p.client.getSiteConnectionStringKeyVaultReferencesSlotHandleResponse(resp)
	if err != nil {
		p.err = err
		return false
	}
	p.current = result
	return true
}

// PageResponse returns the current WebAppsGetSiteConnectionStringKeyVaultReferencesSlotResponse page.
func (p *WebAppsGetSiteConnectionStringKeyVaultReferencesSlotPager) PageResponse() WebAppsGetSiteConnectionStringKeyVaultReferencesSlotResponse {
	return p.current
}

// WebAppsListBackupsPager provides operations for iterating over paged responses.
type WebAppsListBackupsPager struct {
	client    *WebAppsClient
	current   WebAppsListBackupsResponse
	err       error
	requester func(context.Context) (*policy.Request, error)
	advancer  func(context.Context, WebAppsListBackupsResponse) (*policy.Request, error)
}

// Err returns the last error encountered while paging.
func (p *WebAppsListBackupsPager) Err() error {
	return p.err
}

// NextPage returns true if the pager advanced to the next page.
// Returns false if there are no more pages or an error occurred.
func (p *WebAppsListBackupsPager) NextPage(ctx context.Context) bool {
	var req *policy.Request
	var err error
	if !reflect.ValueOf(p.current).IsZero() {
		if p.current.BackupItemCollection.NextLink == nil || len(*p.current.BackupItemCollection.NextLink) == 0 {
			return false
		}
		req, err = p.advancer(ctx, p.current)
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		p.err = err
		return false
	}
	resp, err := p.client.pl.Do(req)
	if err != nil {
		p.err = err
		return false
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {
		p.err = p.client.listBackupsHandleError(resp)
		return false
	}
	result, err := p.client.listBackupsHandleResponse(resp)
	if err != nil {
		p.err = err
		return false
	}
	p.current = result
	return true
}

// PageResponse returns the current WebAppsListBackupsResponse page.
func (p *WebAppsListBackupsPager) PageResponse() WebAppsListBackupsResponse {
	return p.current
}

// WebAppsListBackupsSlotPager provides operations for iterating over paged responses.
type WebAppsListBackupsSlotPager struct {
	client    *WebAppsClient
	current   WebAppsListBackupsSlotResponse
	err       error
	requester func(context.Context) (*policy.Request, error)
	advancer  func(context.Context, WebAppsListBackupsSlotResponse) (*policy.Request, error)
}

// Err returns the last error encountered while paging.
func (p *WebAppsListBackupsSlotPager) Err() error {
	return p.err
}

// NextPage returns true if the pager advanced to the next page.
// Returns false if there are no more pages or an error occurred.
func (p *WebAppsListBackupsSlotPager) NextPage(ctx context.Context) bool {
	var req *policy.Request
	var err error
	if !reflect.ValueOf(p.current).IsZero() {
		if p.current.BackupItemCollection.NextLink == nil || len(*p.current.BackupItemCollection.NextLink) == 0 {
			return false
		}
		req, err = p.advancer(ctx, p.current)
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		p.err = err
		return false
	}
	resp, err := p.client.pl.Do(req)
	if err != nil {
		p.err = err
		return false
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {
		p.err = p.client.listBackupsSlotHandleError(resp)
		return false
	}
	result, err := p.client.listBackupsSlotHandleResponse(resp)
	if err != nil {
		p.err = err
		return false
	}
	p.current = result
	return true
}

// PageResponse returns the current WebAppsListBackupsSlotResponse page.
func (p *WebAppsListBackupsSlotPager) PageResponse() WebAppsListBackupsSlotResponse {
	return p.current
}

// WebAppsListBasicPublishingCredentialsPoliciesPager provides operations for iterating over paged responses.
type WebAppsListBasicPublishingCredentialsPoliciesPager struct {
	client    *WebAppsClient
	current   WebAppsListBasicPublishingCredentialsPoliciesResponse
	err       error
	requester func(context.Context) (*policy.Request, error)
	advancer  func(context.Context, WebAppsListBasicPublishingCredentialsPoliciesResponse) (*policy.Request, error)
}

// Err returns the last error encountered while paging.
func (p *WebAppsListBasicPublishingCredentialsPoliciesPager) Err() error {
	return p.err
}

// NextPage returns true if the pager advanced to the next page.
// Returns false if there are no more pages or an error occurred.
func (p *WebAppsListBasicPublishingCredentialsPoliciesPager) NextPage(ctx context.Context) bool {
	var req *policy.Request
	var err error
	if !reflect.ValueOf(p.current).IsZero() {
		if p.current.PublishingCredentialsPoliciesCollection.NextLink == nil || len(*p.current.PublishingCredentialsPoliciesCollection.NextLink) == 0 {
			return false
		}
		req, err = p.advancer(ctx, p.current)
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		p.err = err
		return false
	}
	resp, err := p.client.pl.Do(req)
	if err != nil {
		p.err = err
		return false
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {
		p.err = p.client.listBasicPublishingCredentialsPoliciesHandleError(resp)
		return false
	}
	result, err := p.client.listBasicPublishingCredentialsPoliciesHandleResponse(resp)
	if err != nil {
		p.err = err
		return false
	}
	p.current = result
	return true
}

// PageResponse returns the current WebAppsListBasicPublishingCredentialsPoliciesResponse page.
func (p *WebAppsListBasicPublishingCredentialsPoliciesPager) PageResponse() WebAppsListBasicPublishingCredentialsPoliciesResponse {
	return p.current
}

// WebAppsListBasicPublishingCredentialsPoliciesSlotPager provides operations for iterating over paged responses.
type WebAppsListBasicPublishingCredentialsPoliciesSlotPager struct {
	client    *WebAppsClient
	current   WebAppsListBasicPublishingCredentialsPoliciesSlotResponse
	err       error
	requester func(context.Context) (*policy.Request, error)
	advancer  func(context.Context, WebAppsListBasicPublishingCredentialsPoliciesSlotResponse) (*policy.Request, error)
}

// Err returns the last error encountered while paging.
func (p *WebAppsListBasicPublishingCredentialsPoliciesSlotPager) Err() error {
	return p.err
}

// NextPage returns true if the pager advanced to the next page.
// Returns false if there are no more pages or an error occurred.
func (p *WebAppsListBasicPublishingCredentialsPoliciesSlotPager) NextPage(ctx context.Context) bool {
	var req *policy.Request
	var err error
	if !reflect.ValueOf(p.current).IsZero() {
		if p.current.PublishingCredentialsPoliciesCollection.NextLink == nil || len(*p.current.PublishingCredentialsPoliciesCollection.NextLink) == 0 {
			return false
		}
		req, err = p.advancer(ctx, p.current)
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		p.err = err
		return false
	}
	resp, err := p.client.pl.Do(req)
	if err != nil {
		p.err = err
		return false
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {
		p.err = p.client.listBasicPublishingCredentialsPoliciesSlotHandleError(resp)
		return false
	}
	result, err := p.client.listBasicPublishingCredentialsPoliciesSlotHandleResponse(resp)
	if err != nil {
		p.err = err
		return false
	}
	p.current = result
	return true
}

// PageResponse returns the current WebAppsListBasicPublishingCredentialsPoliciesSlotResponse page.
func (p *WebAppsListBasicPublishingCredentialsPoliciesSlotPager) PageResponse() WebAppsListBasicPublishingCredentialsPoliciesSlotResponse {
	return p.current
}

// WebAppsListByResourceGroupPager provides operations for iterating over paged responses.
type WebAppsListByResourceGroupPager struct {
	client    *WebAppsClient
	current   WebAppsListByResourceGroupResponse
	err       error
	requester func(context.Context) (*policy.Request, error)
	advancer  func(context.Context, WebAppsListByResourceGroupResponse) (*policy.Request, error)
}

// Err returns the last error encountered while paging.
func (p *WebAppsListByResourceGroupPager) Err() error {
	return p.err
}

// NextPage returns true if the pager advanced to the next page.
// Returns false if there are no more pages or an error occurred.
func (p *WebAppsListByResourceGroupPager) NextPage(ctx context.Context) bool {
	var req *policy.Request
	var err error
	if !reflect.ValueOf(p.current).IsZero() {
		if p.current.WebAppCollection.NextLink == nil || len(*p.current.WebAppCollection.NextLink) == 0 {
			return false
		}
		req, err = p.advancer(ctx, p.current)
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		p.err = err
		return false
	}
	resp, err := p.client.pl.Do(req)
	if err != nil {
		p.err = err
		return false
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {
		p.err = p.client.listByResourceGroupHandleError(resp)
		return false
	}
	result, err := p.client.listByResourceGroupHandleResponse(resp)
	if err != nil {
		p.err = err
		return false
	}
	p.current = result
	return true
}

// PageResponse returns the current WebAppsListByResourceGroupResponse page.
func (p *WebAppsListByResourceGroupPager) PageResponse() WebAppsListByResourceGroupResponse {
	return p.current
}

// WebAppsListConfigurationSnapshotInfoPager provides operations for iterating over paged responses.
type WebAppsListConfigurationSnapshotInfoPager struct {
	client    *WebAppsClient
	current   WebAppsListConfigurationSnapshotInfoResponse
	err       error
	requester func(context.Context) (*policy.Request, error)
	advancer  func(context.Context, WebAppsListConfigurationSnapshotInfoResponse) (*policy.Request, error)
}

// Err returns the last error encountered while paging.
func (p *WebAppsListConfigurationSnapshotInfoPager) Err() error {
	return p.err
}

// NextPage returns true if the pager advanced to the next page.
// Returns false if there are no more pages or an error occurred.
func (p *WebAppsListConfigurationSnapshotInfoPager) NextPage(ctx context.Context) bool {
	var req *policy.Request
	var err error
	if !reflect.ValueOf(p.current).IsZero() {
		if p.current.SiteConfigurationSnapshotInfoCollection.NextLink == nil || len(*p.current.SiteConfigurationSnapshotInfoCollection.NextLink) == 0 {
			return false
		}
		req, err = p.advancer(ctx, p.current)
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		p.err = err
		return false
	}
	resp, err := p.client.pl.Do(req)
	if err != nil {
		p.err = err
		return false
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {
		p.err = p.client.listConfigurationSnapshotInfoHandleError(resp)
		return false
	}
	result, err := p.client.listConfigurationSnapshotInfoHandleResponse(resp)
	if err != nil {
		p.err = err
		return false
	}
	p.current = result
	return true
}

// PageResponse returns the current WebAppsListConfigurationSnapshotInfoResponse page.
func (p *WebAppsListConfigurationSnapshotInfoPager) PageResponse() WebAppsListConfigurationSnapshotInfoResponse {
	return p.current
}

// WebAppsListConfigurationSnapshotInfoSlotPager provides operations for iterating over paged responses.
type WebAppsListConfigurationSnapshotInfoSlotPager struct {
	client    *WebAppsClient
	current   WebAppsListConfigurationSnapshotInfoSlotResponse
	err       error
	requester func(context.Context) (*policy.Request, error)
	advancer  func(context.Context, WebAppsListConfigurationSnapshotInfoSlotResponse) (*policy.Request, error)
}

// Err returns the last error encountered while paging.
func (p *WebAppsListConfigurationSnapshotInfoSlotPager) Err() error {
	return p.err
}

// NextPage returns true if the pager advanced to the next page.
// Returns false if there are no more pages or an error occurred.
func (p *WebAppsListConfigurationSnapshotInfoSlotPager) NextPage(ctx context.Context) bool {
	var req *policy.Request
	var err error
	if !reflect.ValueOf(p.current).IsZero() {
		if p.current.SiteConfigurationSnapshotInfoCollection.NextLink == nil || len(*p.current.SiteConfigurationSnapshotInfoCollection.NextLink) == 0 {
			return false
		}
		req, err = p.advancer(ctx, p.current)
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		p.err = err
		return false
	}
	resp, err := p.client.pl.Do(req)
	if err != nil {
		p.err = err
		return false
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {
		p.err = p.client.listConfigurationSnapshotInfoSlotHandleError(resp)
		return false
	}
	result, err := p.client.listConfigurationSnapshotInfoSlotHandleResponse(resp)
	if err != nil {
		p.err = err
		return false
	}
	p.current = result
	return true
}

// PageResponse returns the current WebAppsListConfigurationSnapshotInfoSlotResponse page.
func (p *WebAppsListConfigurationSnapshotInfoSlotPager) PageResponse() WebAppsListConfigurationSnapshotInfoSlotResponse {
	return p.current
}

// WebAppsListConfigurationsPager provides operations for iterating over paged responses.
type WebAppsListConfigurationsPager struct {
	client    *WebAppsClient
	current   WebAppsListConfigurationsResponse
	err       error
	requester func(context.Context) (*policy.Request, error)
	advancer  func(context.Context, WebAppsListConfigurationsResponse) (*policy.Request, error)
}

// Err returns the last error encountered while paging.
func (p *WebAppsListConfigurationsPager) Err() error {
	return p.err
}

// NextPage returns true if the pager advanced to the next page.
// Returns false if there are no more pages or an error occurred.
func (p *WebAppsListConfigurationsPager) NextPage(ctx context.Context) bool {
	var req *policy.Request
	var err error
	if !reflect.ValueOf(p.current).IsZero() {
		if p.current.SiteConfigResourceCollection.NextLink == nil || len(*p.current.SiteConfigResourceCollection.NextLink) == 0 {
			return false
		}
		req, err = p.advancer(ctx, p.current)
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		p.err = err
		return false
	}
	resp, err := p.client.pl.Do(req)
	if err != nil {
		p.err = err
		return false
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {
		p.err = p.client.listConfigurationsHandleError(resp)
		return false
	}
	result, err := p.client.listConfigurationsHandleResponse(resp)
	if err != nil {
		p.err = err
		return false
	}
	p.current = result
	return true
}

// PageResponse returns the current WebAppsListConfigurationsResponse page.
func (p *WebAppsListConfigurationsPager) PageResponse() WebAppsListConfigurationsResponse {
	return p.current
}

// WebAppsListConfigurationsSlotPager provides operations for iterating over paged responses.
type WebAppsListConfigurationsSlotPager struct {
	client    *WebAppsClient
	current   WebAppsListConfigurationsSlotResponse
	err       error
	requester func(context.Context) (*policy.Request, error)
	advancer  func(context.Context, WebAppsListConfigurationsSlotResponse) (*policy.Request, error)
}

// Err returns the last error encountered while paging.
func (p *WebAppsListConfigurationsSlotPager) Err() error {
	return p.err
}

// NextPage returns true if the pager advanced to the next page.
// Returns false if there are no more pages or an error occurred.
func (p *WebAppsListConfigurationsSlotPager) NextPage(ctx context.Context) bool {
	var req *policy.Request
	var err error
	if !reflect.ValueOf(p.current).IsZero() {
		if p.current.SiteConfigResourceCollection.NextLink == nil || len(*p.current.SiteConfigResourceCollection.NextLink) == 0 {
			return false
		}
		req, err = p.advancer(ctx, p.current)
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		p.err = err
		return false
	}
	resp, err := p.client.pl.Do(req)
	if err != nil {
		p.err = err
		return false
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {
		p.err = p.client.listConfigurationsSlotHandleError(resp)
		return false
	}
	result, err := p.client.listConfigurationsSlotHandleResponse(resp)
	if err != nil {
		p.err = err
		return false
	}
	p.current = result
	return true
}

// PageResponse returns the current WebAppsListConfigurationsSlotResponse page.
func (p *WebAppsListConfigurationsSlotPager) PageResponse() WebAppsListConfigurationsSlotResponse {
	return p.current
}

// WebAppsListContinuousWebJobsPager provides operations for iterating over paged responses.
type WebAppsListContinuousWebJobsPager struct {
	client    *WebAppsClient
	current   WebAppsListContinuousWebJobsResponse
	err       error
	requester func(context.Context) (*policy.Request, error)
	advancer  func(context.Context, WebAppsListContinuousWebJobsResponse) (*policy.Request, error)
}

// Err returns the last error encountered while paging.
func (p *WebAppsListContinuousWebJobsPager) Err() error {
	return p.err
}

// NextPage returns true if the pager advanced to the next page.
// Returns false if there are no more pages or an error occurred.
func (p *WebAppsListContinuousWebJobsPager) NextPage(ctx context.Context) bool {
	var req *policy.Request
	var err error
	if !reflect.ValueOf(p.current).IsZero() {
		if p.current.ContinuousWebJobCollection.NextLink == nil || len(*p.current.ContinuousWebJobCollection.NextLink) == 0 {
			return false
		}
		req, err = p.advancer(ctx, p.current)
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		p.err = err
		return false
	}
	resp, err := p.client.pl.Do(req)
	if err != nil {
		p.err = err
		return false
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {
		p.err = p.client.listContinuousWebJobsHandleError(resp)
		return false
	}
	result, err := p.client.listContinuousWebJobsHandleResponse(resp)
	if err != nil {
		p.err = err
		return false
	}
	p.current = result
	return true
}

// PageResponse returns the current WebAppsListContinuousWebJobsResponse page.
func (p *WebAppsListContinuousWebJobsPager) PageResponse() WebAppsListContinuousWebJobsResponse {
	return p.current
}

// WebAppsListContinuousWebJobsSlotPager provides operations for iterating over paged responses.
type WebAppsListContinuousWebJobsSlotPager struct {
	client    *WebAppsClient
	current   WebAppsListContinuousWebJobsSlotResponse
	err       error
	requester func(context.Context) (*policy.Request, error)
	advancer  func(context.Context, WebAppsListContinuousWebJobsSlotResponse) (*policy.Request, error)
}

// Err returns the last error encountered while paging.
func (p *WebAppsListContinuousWebJobsSlotPager) Err() error {
	return p.err
}

// NextPage returns true if the pager advanced to the next page.
// Returns false if there are no more pages or an error occurred.
func (p *WebAppsListContinuousWebJobsSlotPager) NextPage(ctx context.Context) bool {
	var req *policy.Request
	var err error
	if !reflect.ValueOf(p.current).IsZero() {
		if p.current.ContinuousWebJobCollection.NextLink == nil || len(*p.current.ContinuousWebJobCollection.NextLink) == 0 {
			return false
		}
		req, err = p.advancer(ctx, p.current)
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		p.err = err
		return false
	}
	resp, err := p.client.pl.Do(req)
	if err != nil {
		p.err = err
		return false
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {
		p.err = p.client.listContinuousWebJobsSlotHandleError(resp)
		return false
	}
	result, err := p.client.listContinuousWebJobsSlotHandleResponse(resp)
	if err != nil {
		p.err = err
		return false
	}
	p.current = result
	return true
}

// PageResponse returns the current WebAppsListContinuousWebJobsSlotResponse page.
func (p *WebAppsListContinuousWebJobsSlotPager) PageResponse() WebAppsListContinuousWebJobsSlotResponse {
	return p.current
}

// WebAppsListDeploymentsPager provides operations for iterating over paged responses.
type WebAppsListDeploymentsPager struct {
	client    *WebAppsClient
	current   WebAppsListDeploymentsResponse
	err       error
	requester func(context.Context) (*policy.Request, error)
	advancer  func(context.Context, WebAppsListDeploymentsResponse) (*policy.Request, error)
}

// Err returns the last error encountered while paging.
func (p *WebAppsListDeploymentsPager) Err() error {
	return p.err
}

// NextPage returns true if the pager advanced to the next page.
// Returns false if there are no more pages or an error occurred.
func (p *WebAppsListDeploymentsPager) NextPage(ctx context.Context) bool {
	var req *policy.Request
	var err error
	if !reflect.ValueOf(p.current).IsZero() {
		if p.current.DeploymentCollection.NextLink == nil || len(*p.current.DeploymentCollection.NextLink) == 0 {
			return false
		}
		req, err = p.advancer(ctx, p.current)
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		p.err = err
		return false
	}
	resp, err := p.client.pl.Do(req)
	if err != nil {
		p.err = err
		return false
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {
		p.err = p.client.listDeploymentsHandleError(resp)
		return false
	}
	result, err := p.client.listDeploymentsHandleResponse(resp)
	if err != nil {
		p.err = err
		return false
	}
	p.current = result
	return true
}

// PageResponse returns the current WebAppsListDeploymentsResponse page.
func (p *WebAppsListDeploymentsPager) PageResponse() WebAppsListDeploymentsResponse {
	return p.current
}

// WebAppsListDeploymentsSlotPager provides operations for iterating over paged responses.
type WebAppsListDeploymentsSlotPager struct {
	client    *WebAppsClient
	current   WebAppsListDeploymentsSlotResponse
	err       error
	requester func(context.Context) (*policy.Request, error)
	advancer  func(context.Context, WebAppsListDeploymentsSlotResponse) (*policy.Request, error)
}

// Err returns the last error encountered while paging.
func (p *WebAppsListDeploymentsSlotPager) Err() error {
	return p.err
}

// NextPage returns true if the pager advanced to the next page.
// Returns false if there are no more pages or an error occurred.
func (p *WebAppsListDeploymentsSlotPager) NextPage(ctx context.Context) bool {
	var req *policy.Request
	var err error
	if !reflect.ValueOf(p.current).IsZero() {
		if p.current.DeploymentCollection.NextLink == nil || len(*p.current.DeploymentCollection.NextLink) == 0 {
			return false
		}
		req, err = p.advancer(ctx, p.current)
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		p.err = err
		return false
	}
	resp, err := p.client.pl.Do(req)
	if err != nil {
		p.err = err
		return false
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {
		p.err = p.client.listDeploymentsSlotHandleError(resp)
		return false
	}
	result, err := p.client.listDeploymentsSlotHandleResponse(resp)
	if err != nil {
		p.err = err
		return false
	}
	p.current = result
	return true
}

// PageResponse returns the current WebAppsListDeploymentsSlotResponse page.
func (p *WebAppsListDeploymentsSlotPager) PageResponse() WebAppsListDeploymentsSlotResponse {
	return p.current
}

// WebAppsListDomainOwnershipIdentifiersPager provides operations for iterating over paged responses.
type WebAppsListDomainOwnershipIdentifiersPager struct {
	client    *WebAppsClient
	current   WebAppsListDomainOwnershipIdentifiersResponse
	err       error
	requester func(context.Context) (*policy.Request, error)
	advancer  func(context.Context, WebAppsListDomainOwnershipIdentifiersResponse) (*policy.Request, error)
}

// Err returns the last error encountered while paging.
func (p *WebAppsListDomainOwnershipIdentifiersPager) Err() error {
	return p.err
}

// NextPage returns true if the pager advanced to the next page.
// Returns false if there are no more pages or an error occurred.
func (p *WebAppsListDomainOwnershipIdentifiersPager) NextPage(ctx context.Context) bool {
	var req *policy.Request
	var err error
	if !reflect.ValueOf(p.current).IsZero() {
		if p.current.IdentifierCollection.NextLink == nil || len(*p.current.IdentifierCollection.NextLink) == 0 {
			return false
		}
		req, err = p.advancer(ctx, p.current)
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		p.err = err
		return false
	}
	resp, err := p.client.pl.Do(req)
	if err != nil {
		p.err = err
		return false
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {
		p.err = p.client.listDomainOwnershipIdentifiersHandleError(resp)
		return false
	}
	result, err := p.client.listDomainOwnershipIdentifiersHandleResponse(resp)
	if err != nil {
		p.err = err
		return false
	}
	p.current = result
	return true
}

// PageResponse returns the current WebAppsListDomainOwnershipIdentifiersResponse page.
func (p *WebAppsListDomainOwnershipIdentifiersPager) PageResponse() WebAppsListDomainOwnershipIdentifiersResponse {
	return p.current
}

// WebAppsListDomainOwnershipIdentifiersSlotPager provides operations for iterating over paged responses.
type WebAppsListDomainOwnershipIdentifiersSlotPager struct {
	client    *WebAppsClient
	current   WebAppsListDomainOwnershipIdentifiersSlotResponse
	err       error
	requester func(context.Context) (*policy.Request, error)
	advancer  func(context.Context, WebAppsListDomainOwnershipIdentifiersSlotResponse) (*policy.Request, error)
}

// Err returns the last error encountered while paging.
func (p *WebAppsListDomainOwnershipIdentifiersSlotPager) Err() error {
	return p.err
}

// NextPage returns true if the pager advanced to the next page.
// Returns false if there are no more pages or an error occurred.
func (p *WebAppsListDomainOwnershipIdentifiersSlotPager) NextPage(ctx context.Context) bool {
	var req *policy.Request
	var err error
	if !reflect.ValueOf(p.current).IsZero() {
		if p.current.IdentifierCollection.NextLink == nil || len(*p.current.IdentifierCollection.NextLink) == 0 {
			return false
		}
		req, err = p.advancer(ctx, p.current)
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		p.err = err
		return false
	}
	resp, err := p.client.pl.Do(req)
	if err != nil {
		p.err = err
		return false
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {
		p.err = p.client.listDomainOwnershipIdentifiersSlotHandleError(resp)
		return false
	}
	result, err := p.client.listDomainOwnershipIdentifiersSlotHandleResponse(resp)
	if err != nil {
		p.err = err
		return false
	}
	p.current = result
	return true
}

// PageResponse returns the current WebAppsListDomainOwnershipIdentifiersSlotResponse page.
func (p *WebAppsListDomainOwnershipIdentifiersSlotPager) PageResponse() WebAppsListDomainOwnershipIdentifiersSlotResponse {
	return p.current
}

// WebAppsListFunctionsPager provides operations for iterating over paged responses.
type WebAppsListFunctionsPager struct {
	client    *WebAppsClient
	current   WebAppsListFunctionsResponse
	err       error
	requester func(context.Context) (*policy.Request, error)
	advancer  func(context.Context, WebAppsListFunctionsResponse) (*policy.Request, error)
}

// Err returns the last error encountered while paging.
func (p *WebAppsListFunctionsPager) Err() error {
	return p.err
}

// NextPage returns true if the pager advanced to the next page.
// Returns false if there are no more pages or an error occurred.
func (p *WebAppsListFunctionsPager) NextPage(ctx context.Context) bool {
	var req *policy.Request
	var err error
	if !reflect.ValueOf(p.current).IsZero() {
		if p.current.FunctionEnvelopeCollection.NextLink == nil || len(*p.current.FunctionEnvelopeCollection.NextLink) == 0 {
			return false
		}
		req, err = p.advancer(ctx, p.current)
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		p.err = err
		return false
	}
	resp, err := p.client.pl.Do(req)
	if err != nil {
		p.err = err
		return false
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {
		p.err = p.client.listFunctionsHandleError(resp)
		return false
	}
	result, err := p.client.listFunctionsHandleResponse(resp)
	if err != nil {
		p.err = err
		return false
	}
	p.current = result
	return true
}

// PageResponse returns the current WebAppsListFunctionsResponse page.
func (p *WebAppsListFunctionsPager) PageResponse() WebAppsListFunctionsResponse {
	return p.current
}

// WebAppsListHostNameBindingsPager provides operations for iterating over paged responses.
type WebAppsListHostNameBindingsPager struct {
	client    *WebAppsClient
	current   WebAppsListHostNameBindingsResponse
	err       error
	requester func(context.Context) (*policy.Request, error)
	advancer  func(context.Context, WebAppsListHostNameBindingsResponse) (*policy.Request, error)
}

// Err returns the last error encountered while paging.
func (p *WebAppsListHostNameBindingsPager) Err() error {
	return p.err
}

// NextPage returns true if the pager advanced to the next page.
// Returns false if there are no more pages or an error occurred.
func (p *WebAppsListHostNameBindingsPager) NextPage(ctx context.Context) bool {
	var req *policy.Request
	var err error
	if !reflect.ValueOf(p.current).IsZero() {
		if p.current.HostNameBindingCollection.NextLink == nil || len(*p.current.HostNameBindingCollection.NextLink) == 0 {
			return false
		}
		req, err = p.advancer(ctx, p.current)
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		p.err = err
		return false
	}
	resp, err := p.client.pl.Do(req)
	if err != nil {
		p.err = err
		return false
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {
		p.err = p.client.listHostNameBindingsHandleError(resp)
		return false
	}
	result, err := p.client.listHostNameBindingsHandleResponse(resp)
	if err != nil {
		p.err = err
		return false
	}
	p.current = result
	return true
}

// PageResponse returns the current WebAppsListHostNameBindingsResponse page.
func (p *WebAppsListHostNameBindingsPager) PageResponse() WebAppsListHostNameBindingsResponse {
	return p.current
}

// WebAppsListHostNameBindingsSlotPager provides operations for iterating over paged responses.
type WebAppsListHostNameBindingsSlotPager struct {
	client    *WebAppsClient
	current   WebAppsListHostNameBindingsSlotResponse
	err       error
	requester func(context.Context) (*policy.Request, error)
	advancer  func(context.Context, WebAppsListHostNameBindingsSlotResponse) (*policy.Request, error)
}

// Err returns the last error encountered while paging.
func (p *WebAppsListHostNameBindingsSlotPager) Err() error {
	return p.err
}

// NextPage returns true if the pager advanced to the next page.
// Returns false if there are no more pages or an error occurred.
func (p *WebAppsListHostNameBindingsSlotPager) NextPage(ctx context.Context) bool {
	var req *policy.Request
	var err error
	if !reflect.ValueOf(p.current).IsZero() {
		if p.current.HostNameBindingCollection.NextLink == nil || len(*p.current.HostNameBindingCollection.NextLink) == 0 {
			return false
		}
		req, err = p.advancer(ctx, p.current)
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		p.err = err
		return false
	}
	resp, err := p.client.pl.Do(req)
	if err != nil {
		p.err = err
		return false
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {
		p.err = p.client.listHostNameBindingsSlotHandleError(resp)
		return false
	}
	result, err := p.client.listHostNameBindingsSlotHandleResponse(resp)
	if err != nil {
		p.err = err
		return false
	}
	p.current = result
	return true
}

// PageResponse returns the current WebAppsListHostNameBindingsSlotResponse page.
func (p *WebAppsListHostNameBindingsSlotPager) PageResponse() WebAppsListHostNameBindingsSlotResponse {
	return p.current
}

// WebAppsListInstanceFunctionsSlotPager provides operations for iterating over paged responses.
type WebAppsListInstanceFunctionsSlotPager struct {
	client    *WebAppsClient
	current   WebAppsListInstanceFunctionsSlotResponse
	err       error
	requester func(context.Context) (*policy.Request, error)
	advancer  func(context.Context, WebAppsListInstanceFunctionsSlotResponse) (*policy.Request, error)
}

// Err returns the last error encountered while paging.
func (p *WebAppsListInstanceFunctionsSlotPager) Err() error {
	return p.err
}

// NextPage returns true if the pager advanced to the next page.
// Returns false if there are no more pages or an error occurred.
func (p *WebAppsListInstanceFunctionsSlotPager) NextPage(ctx context.Context) bool {
	var req *policy.Request
	var err error
	if !reflect.ValueOf(p.current).IsZero() {
		if p.current.FunctionEnvelopeCollection.NextLink == nil || len(*p.current.FunctionEnvelopeCollection.NextLink) == 0 {
			return false
		}
		req, err = p.advancer(ctx, p.current)
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		p.err = err
		return false
	}
	resp, err := p.client.pl.Do(req)
	if err != nil {
		p.err = err
		return false
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {
		p.err = p.client.listInstanceFunctionsSlotHandleError(resp)
		return false
	}
	result, err := p.client.listInstanceFunctionsSlotHandleResponse(resp)
	if err != nil {
		p.err = err
		return false
	}
	p.current = result
	return true
}

// PageResponse returns the current WebAppsListInstanceFunctionsSlotResponse page.
func (p *WebAppsListInstanceFunctionsSlotPager) PageResponse() WebAppsListInstanceFunctionsSlotResponse {
	return p.current
}

// WebAppsListInstanceIdentifiersPager provides operations for iterating over paged responses.
type WebAppsListInstanceIdentifiersPager struct {
	client    *WebAppsClient
	current   WebAppsListInstanceIdentifiersResponse
	err       error
	requester func(context.Context) (*policy.Request, error)
	advancer  func(context.Context, WebAppsListInstanceIdentifiersResponse) (*policy.Request, error)
}

// Err returns the last error encountered while paging.
func (p *WebAppsListInstanceIdentifiersPager) Err() error {
	return p.err
}

// NextPage returns true if the pager advanced to the next page.
// Returns false if there are no more pages or an error occurred.
func (p *WebAppsListInstanceIdentifiersPager) NextPage(ctx context.Context) bool {
	var req *policy.Request
	var err error
	if !reflect.ValueOf(p.current).IsZero() {
		if p.current.WebAppInstanceStatusCollection.NextLink == nil || len(*p.current.WebAppInstanceStatusCollection.NextLink) == 0 {
			return false
		}
		req, err = p.advancer(ctx, p.current)
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		p.err = err
		return false
	}
	resp, err := p.client.pl.Do(req)
	if err != nil {
		p.err = err
		return false
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {
		p.err = p.client.listInstanceIdentifiersHandleError(resp)
		return false
	}
	result, err := p.client.listInstanceIdentifiersHandleResponse(resp)
	if err != nil {
		p.err = err
		return false
	}
	p.current = result
	return true
}

// PageResponse returns the current WebAppsListInstanceIdentifiersResponse page.
func (p *WebAppsListInstanceIdentifiersPager) PageResponse() WebAppsListInstanceIdentifiersResponse {
	return p.current
}

// WebAppsListInstanceIdentifiersSlotPager provides operations for iterating over paged responses.
type WebAppsListInstanceIdentifiersSlotPager struct {
	client    *WebAppsClient
	current   WebAppsListInstanceIdentifiersSlotResponse
	err       error
	requester func(context.Context) (*policy.Request, error)
	advancer  func(context.Context, WebAppsListInstanceIdentifiersSlotResponse) (*policy.Request, error)
}

// Err returns the last error encountered while paging.
func (p *WebAppsListInstanceIdentifiersSlotPager) Err() error {
	return p.err
}

// NextPage returns true if the pager advanced to the next page.
// Returns false if there are no more pages or an error occurred.
func (p *WebAppsListInstanceIdentifiersSlotPager) NextPage(ctx context.Context) bool {
	var req *policy.Request
	var err error
	if !reflect.ValueOf(p.current).IsZero() {
		if p.current.WebAppInstanceStatusCollection.NextLink == nil || len(*p.current.WebAppInstanceStatusCollection.NextLink) == 0 {
			return false
		}
		req, err = p.advancer(ctx, p.current)
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		p.err = err
		return false
	}
	resp, err := p.client.pl.Do(req)
	if err != nil {
		p.err = err
		return false
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {
		p.err = p.client.listInstanceIdentifiersSlotHandleError(resp)
		return false
	}
	result, err := p.client.listInstanceIdentifiersSlotHandleResponse(resp)
	if err != nil {
		p.err = err
		return false
	}
	p.current = result
	return true
}

// PageResponse returns the current WebAppsListInstanceIdentifiersSlotResponse page.
func (p *WebAppsListInstanceIdentifiersSlotPager) PageResponse() WebAppsListInstanceIdentifiersSlotResponse {
	return p.current
}

// WebAppsListInstanceProcessModulesPager provides operations for iterating over paged responses.
type WebAppsListInstanceProcessModulesPager struct {
	client    *WebAppsClient
	current   WebAppsListInstanceProcessModulesResponse
	err       error
	requester func(context.Context) (*policy.Request, error)
	advancer  func(context.Context, WebAppsListInstanceProcessModulesResponse) (*policy.Request, error)
}

// Err returns the last error encountered while paging.
func (p *WebAppsListInstanceProcessModulesPager) Err() error {
	return p.err
}

// NextPage returns true if the pager advanced to the next page.
// Returns false if there are no more pages or an error occurred.
func (p *WebAppsListInstanceProcessModulesPager) NextPage(ctx context.Context) bool {
	var req *policy.Request
	var err error
	if !reflect.ValueOf(p.current).IsZero() {
		if p.current.ProcessModuleInfoCollection.NextLink == nil || len(*p.current.ProcessModuleInfoCollection.NextLink) == 0 {
			return false
		}
		req, err = p.advancer(ctx, p.current)
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		p.err = err
		return false
	}
	resp, err := p.client.pl.Do(req)
	if err != nil {
		p.err = err
		return false
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {
		p.err = p.client.listInstanceProcessModulesHandleError(resp)
		return false
	}
	result, err := p.client.listInstanceProcessModulesHandleResponse(resp)
	if err != nil {
		p.err = err
		return false
	}
	p.current = result
	return true
}

// PageResponse returns the current WebAppsListInstanceProcessModulesResponse page.
func (p *WebAppsListInstanceProcessModulesPager) PageResponse() WebAppsListInstanceProcessModulesResponse {
	return p.current
}

// WebAppsListInstanceProcessModulesSlotPager provides operations for iterating over paged responses.
type WebAppsListInstanceProcessModulesSlotPager struct {
	client    *WebAppsClient
	current   WebAppsListInstanceProcessModulesSlotResponse
	err       error
	requester func(context.Context) (*policy.Request, error)
	advancer  func(context.Context, WebAppsListInstanceProcessModulesSlotResponse) (*policy.Request, error)
}

// Err returns the last error encountered while paging.
func (p *WebAppsListInstanceProcessModulesSlotPager) Err() error {
	return p.err
}

// NextPage returns true if the pager advanced to the next page.
// Returns false if there are no more pages or an error occurred.
func (p *WebAppsListInstanceProcessModulesSlotPager) NextPage(ctx context.Context) bool {
	var req *policy.Request
	var err error
	if !reflect.ValueOf(p.current).IsZero() {
		if p.current.ProcessModuleInfoCollection.NextLink == nil || len(*p.current.ProcessModuleInfoCollection.NextLink) == 0 {
			return false
		}
		req, err = p.advancer(ctx, p.current)
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		p.err = err
		return false
	}
	resp, err := p.client.pl.Do(req)
	if err != nil {
		p.err = err
		return false
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {
		p.err = p.client.listInstanceProcessModulesSlotHandleError(resp)
		return false
	}
	result, err := p.client.listInstanceProcessModulesSlotHandleResponse(resp)
	if err != nil {
		p.err = err
		return false
	}
	p.current = result
	return true
}

// PageResponse returns the current WebAppsListInstanceProcessModulesSlotResponse page.
func (p *WebAppsListInstanceProcessModulesSlotPager) PageResponse() WebAppsListInstanceProcessModulesSlotResponse {
	return p.current
}

// WebAppsListInstanceProcessThreadsPager provides operations for iterating over paged responses.
type WebAppsListInstanceProcessThreadsPager struct {
	client    *WebAppsClient
	current   WebAppsListInstanceProcessThreadsResponse
	err       error
	requester func(context.Context) (*policy.Request, error)
	advancer  func(context.Context, WebAppsListInstanceProcessThreadsResponse) (*policy.Request, error)
}

// Err returns the last error encountered while paging.
func (p *WebAppsListInstanceProcessThreadsPager) Err() error {
	return p.err
}

// NextPage returns true if the pager advanced to the next page.
// Returns false if there are no more pages or an error occurred.
func (p *WebAppsListInstanceProcessThreadsPager) NextPage(ctx context.Context) bool {
	var req *policy.Request
	var err error
	if !reflect.ValueOf(p.current).IsZero() {
		if p.current.ProcessThreadInfoCollection.NextLink == nil || len(*p.current.ProcessThreadInfoCollection.NextLink) == 0 {
			return false
		}
		req, err = p.advancer(ctx, p.current)
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		p.err = err
		return false
	}
	resp, err := p.client.pl.Do(req)
	if err != nil {
		p.err = err
		return false
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {
		p.err = p.client.listInstanceProcessThreadsHandleError(resp)
		return false
	}
	result, err := p.client.listInstanceProcessThreadsHandleResponse(resp)
	if err != nil {
		p.err = err
		return false
	}
	p.current = result
	return true
}

// PageResponse returns the current WebAppsListInstanceProcessThreadsResponse page.
func (p *WebAppsListInstanceProcessThreadsPager) PageResponse() WebAppsListInstanceProcessThreadsResponse {
	return p.current
}

// WebAppsListInstanceProcessThreadsSlotPager provides operations for iterating over paged responses.
type WebAppsListInstanceProcessThreadsSlotPager struct {
	client    *WebAppsClient
	current   WebAppsListInstanceProcessThreadsSlotResponse
	err       error
	requester func(context.Context) (*policy.Request, error)
	advancer  func(context.Context, WebAppsListInstanceProcessThreadsSlotResponse) (*policy.Request, error)
}

// Err returns the last error encountered while paging.
func (p *WebAppsListInstanceProcessThreadsSlotPager) Err() error {
	return p.err
}

// NextPage returns true if the pager advanced to the next page.
// Returns false if there are no more pages or an error occurred.
func (p *WebAppsListInstanceProcessThreadsSlotPager) NextPage(ctx context.Context) bool {
	var req *policy.Request
	var err error
	if !reflect.ValueOf(p.current).IsZero() {
		if p.current.ProcessThreadInfoCollection.NextLink == nil || len(*p.current.ProcessThreadInfoCollection.NextLink) == 0 {
			return false
		}
		req, err = p.advancer(ctx, p.current)
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		p.err = err
		return false
	}
	resp, err := p.client.pl.Do(req)
	if err != nil {
		p.err = err
		return false
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {
		p.err = p.client.listInstanceProcessThreadsSlotHandleError(resp)
		return false
	}
	result, err := p.client.listInstanceProcessThreadsSlotHandleResponse(resp)
	if err != nil {
		p.err = err
		return false
	}
	p.current = result
	return true
}

// PageResponse returns the current WebAppsListInstanceProcessThreadsSlotResponse page.
func (p *WebAppsListInstanceProcessThreadsSlotPager) PageResponse() WebAppsListInstanceProcessThreadsSlotResponse {
	return p.current
}

// WebAppsListInstanceProcessesPager provides operations for iterating over paged responses.
type WebAppsListInstanceProcessesPager struct {
	client    *WebAppsClient
	current   WebAppsListInstanceProcessesResponse
	err       error
	requester func(context.Context) (*policy.Request, error)
	advancer  func(context.Context, WebAppsListInstanceProcessesResponse) (*policy.Request, error)
}

// Err returns the last error encountered while paging.
func (p *WebAppsListInstanceProcessesPager) Err() error {
	return p.err
}

// NextPage returns true if the pager advanced to the next page.
// Returns false if there are no more pages or an error occurred.
func (p *WebAppsListInstanceProcessesPager) NextPage(ctx context.Context) bool {
	var req *policy.Request
	var err error
	if !reflect.ValueOf(p.current).IsZero() {
		if p.current.ProcessInfoCollection.NextLink == nil || len(*p.current.ProcessInfoCollection.NextLink) == 0 {
			return false
		}
		req, err = p.advancer(ctx, p.current)
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		p.err = err
		return false
	}
	resp, err := p.client.pl.Do(req)
	if err != nil {
		p.err = err
		return false
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {
		p.err = p.client.listInstanceProcessesHandleError(resp)
		return false
	}
	result, err := p.client.listInstanceProcessesHandleResponse(resp)
	if err != nil {
		p.err = err
		return false
	}
	p.current = result
	return true
}

// PageResponse returns the current WebAppsListInstanceProcessesResponse page.
func (p *WebAppsListInstanceProcessesPager) PageResponse() WebAppsListInstanceProcessesResponse {
	return p.current
}

// WebAppsListInstanceProcessesSlotPager provides operations for iterating over paged responses.
type WebAppsListInstanceProcessesSlotPager struct {
	client    *WebAppsClient
	current   WebAppsListInstanceProcessesSlotResponse
	err       error
	requester func(context.Context) (*policy.Request, error)
	advancer  func(context.Context, WebAppsListInstanceProcessesSlotResponse) (*policy.Request, error)
}

// Err returns the last error encountered while paging.
func (p *WebAppsListInstanceProcessesSlotPager) Err() error {
	return p.err
}

// NextPage returns true if the pager advanced to the next page.
// Returns false if there are no more pages or an error occurred.
func (p *WebAppsListInstanceProcessesSlotPager) NextPage(ctx context.Context) bool {
	var req *policy.Request
	var err error
	if !reflect.ValueOf(p.current).IsZero() {
		if p.current.ProcessInfoCollection.NextLink == nil || len(*p.current.ProcessInfoCollection.NextLink) == 0 {
			return false
		}
		req, err = p.advancer(ctx, p.current)
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		p.err = err
		return false
	}
	resp, err := p.client.pl.Do(req)
	if err != nil {
		p.err = err
		return false
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {
		p.err = p.client.listInstanceProcessesSlotHandleError(resp)
		return false
	}
	result, err := p.client.listInstanceProcessesSlotHandleResponse(resp)
	if err != nil {
		p.err = err
		return false
	}
	p.current = result
	return true
}

// PageResponse returns the current WebAppsListInstanceProcessesSlotResponse page.
func (p *WebAppsListInstanceProcessesSlotPager) PageResponse() WebAppsListInstanceProcessesSlotResponse {
	return p.current
}

// WebAppsListPager provides operations for iterating over paged responses.
type WebAppsListPager struct {
	client    *WebAppsClient
	current   WebAppsListResponse
	err       error
	requester func(context.Context) (*policy.Request, error)
	advancer  func(context.Context, WebAppsListResponse) (*policy.Request, error)
}

// Err returns the last error encountered while paging.
func (p *WebAppsListPager) Err() error {
	return p.err
}

// NextPage returns true if the pager advanced to the next page.
// Returns false if there are no more pages or an error occurred.
func (p *WebAppsListPager) NextPage(ctx context.Context) bool {
	var req *policy.Request
	var err error
	if !reflect.ValueOf(p.current).IsZero() {
		if p.current.WebAppCollection.NextLink == nil || len(*p.current.WebAppCollection.NextLink) == 0 {
			return false
		}
		req, err = p.advancer(ctx, p.current)
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		p.err = err
		return false
	}
	resp, err := p.client.pl.Do(req)
	if err != nil {
		p.err = err
		return false
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {
		p.err = p.client.listHandleError(resp)
		return false
	}
	result, err := p.client.listHandleResponse(resp)
	if err != nil {
		p.err = err
		return false
	}
	p.current = result
	return true
}

// PageResponse returns the current WebAppsListResponse page.
func (p *WebAppsListPager) PageResponse() WebAppsListResponse {
	return p.current
}

// WebAppsListPerfMonCountersPager provides operations for iterating over paged responses.
type WebAppsListPerfMonCountersPager struct {
	client    *WebAppsClient
	current   WebAppsListPerfMonCountersResponse
	err       error
	requester func(context.Context) (*policy.Request, error)
	advancer  func(context.Context, WebAppsListPerfMonCountersResponse) (*policy.Request, error)
}

// Err returns the last error encountered while paging.
func (p *WebAppsListPerfMonCountersPager) Err() error {
	return p.err
}

// NextPage returns true if the pager advanced to the next page.
// Returns false if there are no more pages or an error occurred.
func (p *WebAppsListPerfMonCountersPager) NextPage(ctx context.Context) bool {
	var req *policy.Request
	var err error
	if !reflect.ValueOf(p.current).IsZero() {
		if p.current.PerfMonCounterCollection.NextLink == nil || len(*p.current.PerfMonCounterCollection.NextLink) == 0 {
			return false
		}
		req, err = p.advancer(ctx, p.current)
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		p.err = err
		return false
	}
	resp, err := p.client.pl.Do(req)
	if err != nil {
		p.err = err
		return false
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {
		p.err = p.client.listPerfMonCountersHandleError(resp)
		return false
	}
	result, err := p.client.listPerfMonCountersHandleResponse(resp)
	if err != nil {
		p.err = err
		return false
	}
	p.current = result
	return true
}

// PageResponse returns the current WebAppsListPerfMonCountersResponse page.
func (p *WebAppsListPerfMonCountersPager) PageResponse() WebAppsListPerfMonCountersResponse {
	return p.current
}

// WebAppsListPerfMonCountersSlotPager provides operations for iterating over paged responses.
type WebAppsListPerfMonCountersSlotPager struct {
	client    *WebAppsClient
	current   WebAppsListPerfMonCountersSlotResponse
	err       error
	requester func(context.Context) (*policy.Request, error)
	advancer  func(context.Context, WebAppsListPerfMonCountersSlotResponse) (*policy.Request, error)
}

// Err returns the last error encountered while paging.
func (p *WebAppsListPerfMonCountersSlotPager) Err() error {
	return p.err
}

// NextPage returns true if the pager advanced to the next page.
// Returns false if there are no more pages or an error occurred.
func (p *WebAppsListPerfMonCountersSlotPager) NextPage(ctx context.Context) bool {
	var req *policy.Request
	var err error
	if !reflect.ValueOf(p.current).IsZero() {
		if p.current.PerfMonCounterCollection.NextLink == nil || len(*p.current.PerfMonCounterCollection.NextLink) == 0 {
			return false
		}
		req, err = p.advancer(ctx, p.current)
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		p.err = err
		return false
	}
	resp, err := p.client.pl.Do(req)
	if err != nil {
		p.err = err
		return false
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {
		p.err = p.client.listPerfMonCountersSlotHandleError(resp)
		return false
	}
	result, err := p.client.listPerfMonCountersSlotHandleResponse(resp)
	if err != nil {
		p.err = err
		return false
	}
	p.current = result
	return true
}

// PageResponse returns the current WebAppsListPerfMonCountersSlotResponse page.
func (p *WebAppsListPerfMonCountersSlotPager) PageResponse() WebAppsListPerfMonCountersSlotResponse {
	return p.current
}

// WebAppsListProcessModulesPager provides operations for iterating over paged responses.
type WebAppsListProcessModulesPager struct {
	client    *WebAppsClient
	current   WebAppsListProcessModulesResponse
	err       error
	requester func(context.Context) (*policy.Request, error)
	advancer  func(context.Context, WebAppsListProcessModulesResponse) (*policy.Request, error)
}

// Err returns the last error encountered while paging.
func (p *WebAppsListProcessModulesPager) Err() error {
	return p.err
}

// NextPage returns true if the pager advanced to the next page.
// Returns false if there are no more pages or an error occurred.
func (p *WebAppsListProcessModulesPager) NextPage(ctx context.Context) bool {
	var req *policy.Request
	var err error
	if !reflect.ValueOf(p.current).IsZero() {
		if p.current.ProcessModuleInfoCollection.NextLink == nil || len(*p.current.ProcessModuleInfoCollection.NextLink) == 0 {
			return false
		}
		req, err = p.advancer(ctx, p.current)
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		p.err = err
		return false
	}
	resp, err := p.client.pl.Do(req)
	if err != nil {
		p.err = err
		return false
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {
		p.err = p.client.listProcessModulesHandleError(resp)
		return false
	}
	result, err := p.client.listProcessModulesHandleResponse(resp)
	if err != nil {
		p.err = err
		return false
	}
	p.current = result
	return true
}

// PageResponse returns the current WebAppsListProcessModulesResponse page.
func (p *WebAppsListProcessModulesPager) PageResponse() WebAppsListProcessModulesResponse {
	return p.current
}

// WebAppsListProcessModulesSlotPager provides operations for iterating over paged responses.
type WebAppsListProcessModulesSlotPager struct {
	client    *WebAppsClient
	current   WebAppsListProcessModulesSlotResponse
	err       error
	requester func(context.Context) (*policy.Request, error)
	advancer  func(context.Context, WebAppsListProcessModulesSlotResponse) (*policy.Request, error)
}

// Err returns the last error encountered while paging.
func (p *WebAppsListProcessModulesSlotPager) Err() error {
	return p.err
}

// NextPage returns true if the pager advanced to the next page.
// Returns false if there are no more pages or an error occurred.
func (p *WebAppsListProcessModulesSlotPager) NextPage(ctx context.Context) bool {
	var req *policy.Request
	var err error
	if !reflect.ValueOf(p.current).IsZero() {
		if p.current.ProcessModuleInfoCollection.NextLink == nil || len(*p.current.ProcessModuleInfoCollection.NextLink) == 0 {
			return false
		}
		req, err = p.advancer(ctx, p.current)
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		p.err = err
		return false
	}
	resp, err := p.client.pl.Do(req)
	if err != nil {
		p.err = err
		return false
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {
		p.err = p.client.listProcessModulesSlotHandleError(resp)
		return false
	}
	result, err := p.client.listProcessModulesSlotHandleResponse(resp)
	if err != nil {
		p.err = err
		return false
	}
	p.current = result
	return true
}

// PageResponse returns the current WebAppsListProcessModulesSlotResponse page.
func (p *WebAppsListProcessModulesSlotPager) PageResponse() WebAppsListProcessModulesSlotResponse {
	return p.current
}

// WebAppsListProcessThreadsPager provides operations for iterating over paged responses.
type WebAppsListProcessThreadsPager struct {
	client    *WebAppsClient
	current   WebAppsListProcessThreadsResponse
	err       error
	requester func(context.Context) (*policy.Request, error)
	advancer  func(context.Context, WebAppsListProcessThreadsResponse) (*policy.Request, error)
}

// Err returns the last error encountered while paging.
func (p *WebAppsListProcessThreadsPager) Err() error {
	return p.err
}

// NextPage returns true if the pager advanced to the next page.
// Returns false if there are no more pages or an error occurred.
func (p *WebAppsListProcessThreadsPager) NextPage(ctx context.Context) bool {
	var req *policy.Request
	var err error
	if !reflect.ValueOf(p.current).IsZero() {
		if p.current.ProcessThreadInfoCollection.NextLink == nil || len(*p.current.ProcessThreadInfoCollection.NextLink) == 0 {
			return false
		}
		req, err = p.advancer(ctx, p.current)
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		p.err = err
		return false
	}
	resp, err := p.client.pl.Do(req)
	if err != nil {
		p.err = err
		return false
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {
		p.err = p.client.listProcessThreadsHandleError(resp)
		return false
	}
	result, err := p.client.listProcessThreadsHandleResponse(resp)
	if err != nil {
		p.err = err
		return false
	}
	p.current = result
	return true
}

// PageResponse returns the current WebAppsListProcessThreadsResponse page.
func (p *WebAppsListProcessThreadsPager) PageResponse() WebAppsListProcessThreadsResponse {
	return p.current
}

// WebAppsListProcessThreadsSlotPager provides operations for iterating over paged responses.
type WebAppsListProcessThreadsSlotPager struct {
	client    *WebAppsClient
	current   WebAppsListProcessThreadsSlotResponse
	err       error
	requester func(context.Context) (*policy.Request, error)
	advancer  func(context.Context, WebAppsListProcessThreadsSlotResponse) (*policy.Request, error)
}

// Err returns the last error encountered while paging.
func (p *WebAppsListProcessThreadsSlotPager) Err() error {
	return p.err
}

// NextPage returns true if the pager advanced to the next page.
// Returns false if there are no more pages or an error occurred.
func (p *WebAppsListProcessThreadsSlotPager) NextPage(ctx context.Context) bool {
	var req *policy.Request
	var err error
	if !reflect.ValueOf(p.current).IsZero() {
		if p.current.ProcessThreadInfoCollection.NextLink == nil || len(*p.current.ProcessThreadInfoCollection.NextLink) == 0 {
			return false
		}
		req, err = p.advancer(ctx, p.current)
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		p.err = err
		return false
	}
	resp, err := p.client.pl.Do(req)
	if err != nil {
		p.err = err
		return false
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {
		p.err = p.client.listProcessThreadsSlotHandleError(resp)
		return false
	}
	result, err := p.client.listProcessThreadsSlotHandleResponse(resp)
	if err != nil {
		p.err = err
		return false
	}
	p.current = result
	return true
}

// PageResponse returns the current WebAppsListProcessThreadsSlotResponse page.
func (p *WebAppsListProcessThreadsSlotPager) PageResponse() WebAppsListProcessThreadsSlotResponse {
	return p.current
}

// WebAppsListProcessesPager provides operations for iterating over paged responses.
type WebAppsListProcessesPager struct {
	client    *WebAppsClient
	current   WebAppsListProcessesResponse
	err       error
	requester func(context.Context) (*policy.Request, error)
	advancer  func(context.Context, WebAppsListProcessesResponse) (*policy.Request, error)
}

// Err returns the last error encountered while paging.
func (p *WebAppsListProcessesPager) Err() error {
	return p.err
}

// NextPage returns true if the pager advanced to the next page.
// Returns false if there are no more pages or an error occurred.
func (p *WebAppsListProcessesPager) NextPage(ctx context.Context) bool {
	var req *policy.Request
	var err error
	if !reflect.ValueOf(p.current).IsZero() {
		if p.current.ProcessInfoCollection.NextLink == nil || len(*p.current.ProcessInfoCollection.NextLink) == 0 {
			return false
		}
		req, err = p.advancer(ctx, p.current)
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		p.err = err
		return false
	}
	resp, err := p.client.pl.Do(req)
	if err != nil {
		p.err = err
		return false
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {
		p.err = p.client.listProcessesHandleError(resp)
		return false
	}
	result, err := p.client.listProcessesHandleResponse(resp)
	if err != nil {
		p.err = err
		return false
	}
	p.current = result
	return true
}

// PageResponse returns the current WebAppsListProcessesResponse page.
func (p *WebAppsListProcessesPager) PageResponse() WebAppsListProcessesResponse {
	return p.current
}

// WebAppsListProcessesSlotPager provides operations for iterating over paged responses.
type WebAppsListProcessesSlotPager struct {
	client    *WebAppsClient
	current   WebAppsListProcessesSlotResponse
	err       error
	requester func(context.Context) (*policy.Request, error)
	advancer  func(context.Context, WebAppsListProcessesSlotResponse) (*policy.Request, error)
}

// Err returns the last error encountered while paging.
func (p *WebAppsListProcessesSlotPager) Err() error {
	return p.err
}

// NextPage returns true if the pager advanced to the next page.
// Returns false if there are no more pages or an error occurred.
func (p *WebAppsListProcessesSlotPager) NextPage(ctx context.Context) bool {
	var req *policy.Request
	var err error
	if !reflect.ValueOf(p.current).IsZero() {
		if p.current.ProcessInfoCollection.NextLink == nil || len(*p.current.ProcessInfoCollection.NextLink) == 0 {
			return false
		}
		req, err = p.advancer(ctx, p.current)
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		p.err = err
		return false
	}
	resp, err := p.client.pl.Do(req)
	if err != nil {
		p.err = err
		return false
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {
		p.err = p.client.listProcessesSlotHandleError(resp)
		return false
	}
	result, err := p.client.listProcessesSlotHandleResponse(resp)
	if err != nil {
		p.err = err
		return false
	}
	p.current = result
	return true
}

// PageResponse returns the current WebAppsListProcessesSlotResponse page.
func (p *WebAppsListProcessesSlotPager) PageResponse() WebAppsListProcessesSlotResponse {
	return p.current
}

// WebAppsListPublicCertificatesPager provides operations for iterating over paged responses.
type WebAppsListPublicCertificatesPager struct {
	client    *WebAppsClient
	current   WebAppsListPublicCertificatesResponse
	err       error
	requester func(context.Context) (*policy.Request, error)
	advancer  func(context.Context, WebAppsListPublicCertificatesResponse) (*policy.Request, error)
}

// Err returns the last error encountered while paging.
func (p *WebAppsListPublicCertificatesPager) Err() error {
	return p.err
}

// NextPage returns true if the pager advanced to the next page.
// Returns false if there are no more pages or an error occurred.
func (p *WebAppsListPublicCertificatesPager) NextPage(ctx context.Context) bool {
	var req *policy.Request
	var err error
	if !reflect.ValueOf(p.current).IsZero() {
		if p.current.PublicCertificateCollection.NextLink == nil || len(*p.current.PublicCertificateCollection.NextLink) == 0 {
			return false
		}
		req, err = p.advancer(ctx, p.current)
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		p.err = err
		return false
	}
	resp, err := p.client.pl.Do(req)
	if err != nil {
		p.err = err
		return false
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {
		p.err = p.client.listPublicCertificatesHandleError(resp)
		return false
	}
	result, err := p.client.listPublicCertificatesHandleResponse(resp)
	if err != nil {
		p.err = err
		return false
	}
	p.current = result
	return true
}

// PageResponse returns the current WebAppsListPublicCertificatesResponse page.
func (p *WebAppsListPublicCertificatesPager) PageResponse() WebAppsListPublicCertificatesResponse {
	return p.current
}

// WebAppsListPublicCertificatesSlotPager provides operations for iterating over paged responses.
type WebAppsListPublicCertificatesSlotPager struct {
	client    *WebAppsClient
	current   WebAppsListPublicCertificatesSlotResponse
	err       error
	requester func(context.Context) (*policy.Request, error)
	advancer  func(context.Context, WebAppsListPublicCertificatesSlotResponse) (*policy.Request, error)
}

// Err returns the last error encountered while paging.
func (p *WebAppsListPublicCertificatesSlotPager) Err() error {
	return p.err
}

// NextPage returns true if the pager advanced to the next page.
// Returns false if there are no more pages or an error occurred.
func (p *WebAppsListPublicCertificatesSlotPager) NextPage(ctx context.Context) bool {
	var req *policy.Request
	var err error
	if !reflect.ValueOf(p.current).IsZero() {
		if p.current.PublicCertificateCollection.NextLink == nil || len(*p.current.PublicCertificateCollection.NextLink) == 0 {
			return false
		}
		req, err = p.advancer(ctx, p.current)
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		p.err = err
		return false
	}
	resp, err := p.client.pl.Do(req)
	if err != nil {
		p.err = err
		return false
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {
		p.err = p.client.listPublicCertificatesSlotHandleError(resp)
		return false
	}
	result, err := p.client.listPublicCertificatesSlotHandleResponse(resp)
	if err != nil {
		p.err = err
		return false
	}
	p.current = result
	return true
}

// PageResponse returns the current WebAppsListPublicCertificatesSlotResponse page.
func (p *WebAppsListPublicCertificatesSlotPager) PageResponse() WebAppsListPublicCertificatesSlotResponse {
	return p.current
}

// WebAppsListSiteBackupsPager provides operations for iterating over paged responses.
type WebAppsListSiteBackupsPager struct {
	client    *WebAppsClient
	current   WebAppsListSiteBackupsResponse
	err       error
	requester func(context.Context) (*policy.Request, error)
	advancer  func(context.Context, WebAppsListSiteBackupsResponse) (*policy.Request, error)
}

// Err returns the last error encountered while paging.
func (p *WebAppsListSiteBackupsPager) Err() error {
	return p.err
}

// NextPage returns true if the pager advanced to the next page.
// Returns false if there are no more pages or an error occurred.
func (p *WebAppsListSiteBackupsPager) NextPage(ctx context.Context) bool {
	var req *policy.Request
	var err error
	if !reflect.ValueOf(p.current).IsZero() {
		if p.current.BackupItemCollection.NextLink == nil || len(*p.current.BackupItemCollection.NextLink) == 0 {
			return false
		}
		req, err = p.advancer(ctx, p.current)
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		p.err = err
		return false
	}
	resp, err := p.client.pl.Do(req)
	if err != nil {
		p.err = err
		return false
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {
		p.err = p.client.listSiteBackupsHandleError(resp)
		return false
	}
	result, err := p.client.listSiteBackupsHandleResponse(resp)
	if err != nil {
		p.err = err
		return false
	}
	p.current = result
	return true
}

// PageResponse returns the current WebAppsListSiteBackupsResponse page.
func (p *WebAppsListSiteBackupsPager) PageResponse() WebAppsListSiteBackupsResponse {
	return p.current
}

// WebAppsListSiteBackupsSlotPager provides operations for iterating over paged responses.
type WebAppsListSiteBackupsSlotPager struct {
	client    *WebAppsClient
	current   WebAppsListSiteBackupsSlotResponse
	err       error
	requester func(context.Context) (*policy.Request, error)
	advancer  func(context.Context, WebAppsListSiteBackupsSlotResponse) (*policy.Request, error)
}

// Err returns the last error encountered while paging.
func (p *WebAppsListSiteBackupsSlotPager) Err() error {
	return p.err
}

// NextPage returns true if the pager advanced to the next page.
// Returns false if there are no more pages or an error occurred.
func (p *WebAppsListSiteBackupsSlotPager) NextPage(ctx context.Context) bool {
	var req *policy.Request
	var err error
	if !reflect.ValueOf(p.current).IsZero() {
		if p.current.BackupItemCollection.NextLink == nil || len(*p.current.BackupItemCollection.NextLink) == 0 {
			return false
		}
		req, err = p.advancer(ctx, p.current)
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		p.err = err
		return false
	}
	resp, err := p.client.pl.Do(req)
	if err != nil {
		p.err = err
		return false
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {
		p.err = p.client.listSiteBackupsSlotHandleError(resp)
		return false
	}
	result, err := p.client.listSiteBackupsSlotHandleResponse(resp)
	if err != nil {
		p.err = err
		return false
	}
	p.current = result
	return true
}

// PageResponse returns the current WebAppsListSiteBackupsSlotResponse page.
func (p *WebAppsListSiteBackupsSlotPager) PageResponse() WebAppsListSiteBackupsSlotResponse {
	return p.current
}

// WebAppsListSiteExtensionsPager provides operations for iterating over paged responses.
type WebAppsListSiteExtensionsPager struct {
	client    *WebAppsClient
	current   WebAppsListSiteExtensionsResponse
	err       error
	requester func(context.Context) (*policy.Request, error)
	advancer  func(context.Context, WebAppsListSiteExtensionsResponse) (*policy.Request, error)
}

// Err returns the last error encountered while paging.
func (p *WebAppsListSiteExtensionsPager) Err() error {
	return p.err
}

// NextPage returns true if the pager advanced to the next page.
// Returns false if there are no more pages or an error occurred.
func (p *WebAppsListSiteExtensionsPager) NextPage(ctx context.Context) bool {
	var req *policy.Request
	var err error
	if !reflect.ValueOf(p.current).IsZero() {
		if p.current.SiteExtensionInfoCollection.NextLink == nil || len(*p.current.SiteExtensionInfoCollection.NextLink) == 0 {
			return false
		}
		req, err = p.advancer(ctx, p.current)
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		p.err = err
		return false
	}
	resp, err := p.client.pl.Do(req)
	if err != nil {
		p.err = err
		return false
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {
		p.err = p.client.listSiteExtensionsHandleError(resp)
		return false
	}
	result, err := p.client.listSiteExtensionsHandleResponse(resp)
	if err != nil {
		p.err = err
		return false
	}
	p.current = result
	return true
}

// PageResponse returns the current WebAppsListSiteExtensionsResponse page.
func (p *WebAppsListSiteExtensionsPager) PageResponse() WebAppsListSiteExtensionsResponse {
	return p.current
}

// WebAppsListSiteExtensionsSlotPager provides operations for iterating over paged responses.
type WebAppsListSiteExtensionsSlotPager struct {
	client    *WebAppsClient
	current   WebAppsListSiteExtensionsSlotResponse
	err       error
	requester func(context.Context) (*policy.Request, error)
	advancer  func(context.Context, WebAppsListSiteExtensionsSlotResponse) (*policy.Request, error)
}

// Err returns the last error encountered while paging.
func (p *WebAppsListSiteExtensionsSlotPager) Err() error {
	return p.err
}

// NextPage returns true if the pager advanced to the next page.
// Returns false if there are no more pages or an error occurred.
func (p *WebAppsListSiteExtensionsSlotPager) NextPage(ctx context.Context) bool {
	var req *policy.Request
	var err error
	if !reflect.ValueOf(p.current).IsZero() {
		if p.current.SiteExtensionInfoCollection.NextLink == nil || len(*p.current.SiteExtensionInfoCollection.NextLink) == 0 {
			return false
		}
		req, err = p.advancer(ctx, p.current)
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		p.err = err
		return false
	}
	resp, err := p.client.pl.Do(req)
	if err != nil {
		p.err = err
		return false
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {
		p.err = p.client.listSiteExtensionsSlotHandleError(resp)
		return false
	}
	result, err := p.client.listSiteExtensionsSlotHandleResponse(resp)
	if err != nil {
		p.err = err
		return false
	}
	p.current = result
	return true
}

// PageResponse returns the current WebAppsListSiteExtensionsSlotResponse page.
func (p *WebAppsListSiteExtensionsSlotPager) PageResponse() WebAppsListSiteExtensionsSlotResponse {
	return p.current
}

// WebAppsListSlotDifferencesFromProductionPager provides operations for iterating over paged responses.
type WebAppsListSlotDifferencesFromProductionPager struct {
	client    *WebAppsClient
	current   WebAppsListSlotDifferencesFromProductionResponse
	err       error
	requester func(context.Context) (*policy.Request, error)
	advancer  func(context.Context, WebAppsListSlotDifferencesFromProductionResponse) (*policy.Request, error)
}

// Err returns the last error encountered while paging.
func (p *WebAppsListSlotDifferencesFromProductionPager) Err() error {
	return p.err
}

// NextPage returns true if the pager advanced to the next page.
// Returns false if there are no more pages or an error occurred.
func (p *WebAppsListSlotDifferencesFromProductionPager) NextPage(ctx context.Context) bool {
	var req *policy.Request
	var err error
	if !reflect.ValueOf(p.current).IsZero() {
		if p.current.SlotDifferenceCollection.NextLink == nil || len(*p.current.SlotDifferenceCollection.NextLink) == 0 {
			return false
		}
		req, err = p.advancer(ctx, p.current)
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		p.err = err
		return false
	}
	resp, err := p.client.pl.Do(req)
	if err != nil {
		p.err = err
		return false
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {
		p.err = p.client.listSlotDifferencesFromProductionHandleError(resp)
		return false
	}
	result, err := p.client.listSlotDifferencesFromProductionHandleResponse(resp)
	if err != nil {
		p.err = err
		return false
	}
	p.current = result
	return true
}

// PageResponse returns the current WebAppsListSlotDifferencesFromProductionResponse page.
func (p *WebAppsListSlotDifferencesFromProductionPager) PageResponse() WebAppsListSlotDifferencesFromProductionResponse {
	return p.current
}

// WebAppsListSlotDifferencesSlotPager provides operations for iterating over paged responses.
type WebAppsListSlotDifferencesSlotPager struct {
	client    *WebAppsClient
	current   WebAppsListSlotDifferencesSlotResponse
	err       error
	requester func(context.Context) (*policy.Request, error)
	advancer  func(context.Context, WebAppsListSlotDifferencesSlotResponse) (*policy.Request, error)
}

// Err returns the last error encountered while paging.
func (p *WebAppsListSlotDifferencesSlotPager) Err() error {
	return p.err
}

// NextPage returns true if the pager advanced to the next page.
// Returns false if there are no more pages or an error occurred.
func (p *WebAppsListSlotDifferencesSlotPager) NextPage(ctx context.Context) bool {
	var req *policy.Request
	var err error
	if !reflect.ValueOf(p.current).IsZero() {
		if p.current.SlotDifferenceCollection.NextLink == nil || len(*p.current.SlotDifferenceCollection.NextLink) == 0 {
			return false
		}
		req, err = p.advancer(ctx, p.current)
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		p.err = err
		return false
	}
	resp, err := p.client.pl.Do(req)
	if err != nil {
		p.err = err
		return false
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {
		p.err = p.client.listSlotDifferencesSlotHandleError(resp)
		return false
	}
	result, err := p.client.listSlotDifferencesSlotHandleResponse(resp)
	if err != nil {
		p.err = err
		return false
	}
	p.current = result
	return true
}

// PageResponse returns the current WebAppsListSlotDifferencesSlotResponse page.
func (p *WebAppsListSlotDifferencesSlotPager) PageResponse() WebAppsListSlotDifferencesSlotResponse {
	return p.current
}

// WebAppsListSlotsPager provides operations for iterating over paged responses.
type WebAppsListSlotsPager struct {
	client    *WebAppsClient
	current   WebAppsListSlotsResponse
	err       error
	requester func(context.Context) (*policy.Request, error)
	advancer  func(context.Context, WebAppsListSlotsResponse) (*policy.Request, error)
}

// Err returns the last error encountered while paging.
func (p *WebAppsListSlotsPager) Err() error {
	return p.err
}

// NextPage returns true if the pager advanced to the next page.
// Returns false if there are no more pages or an error occurred.
func (p *WebAppsListSlotsPager) NextPage(ctx context.Context) bool {
	var req *policy.Request
	var err error
	if !reflect.ValueOf(p.current).IsZero() {
		if p.current.WebAppCollection.NextLink == nil || len(*p.current.WebAppCollection.NextLink) == 0 {
			return false
		}
		req, err = p.advancer(ctx, p.current)
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		p.err = err
		return false
	}
	resp, err := p.client.pl.Do(req)
	if err != nil {
		p.err = err
		return false
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {
		p.err = p.client.listSlotsHandleError(resp)
		return false
	}
	result, err := p.client.listSlotsHandleResponse(resp)
	if err != nil {
		p.err = err
		return false
	}
	p.current = result
	return true
}

// PageResponse returns the current WebAppsListSlotsResponse page.
func (p *WebAppsListSlotsPager) PageResponse() WebAppsListSlotsResponse {
	return p.current
}

// WebAppsListSnapshotsFromDRSecondaryPager provides operations for iterating over paged responses.
type WebAppsListSnapshotsFromDRSecondaryPager struct {
	client    *WebAppsClient
	current   WebAppsListSnapshotsFromDRSecondaryResponse
	err       error
	requester func(context.Context) (*policy.Request, error)
	advancer  func(context.Context, WebAppsListSnapshotsFromDRSecondaryResponse) (*policy.Request, error)
}

// Err returns the last error encountered while paging.
func (p *WebAppsListSnapshotsFromDRSecondaryPager) Err() error {
	return p.err
}

// NextPage returns true if the pager advanced to the next page.
// Returns false if there are no more pages or an error occurred.
func (p *WebAppsListSnapshotsFromDRSecondaryPager) NextPage(ctx context.Context) bool {
	var req *policy.Request
	var err error
	if !reflect.ValueOf(p.current).IsZero() {
		if p.current.SnapshotCollection.NextLink == nil || len(*p.current.SnapshotCollection.NextLink) == 0 {
			return false
		}
		req, err = p.advancer(ctx, p.current)
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		p.err = err
		return false
	}
	resp, err := p.client.pl.Do(req)
	if err != nil {
		p.err = err
		return false
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {
		p.err = p.client.listSnapshotsFromDRSecondaryHandleError(resp)
		return false
	}
	result, err := p.client.listSnapshotsFromDRSecondaryHandleResponse(resp)
	if err != nil {
		p.err = err
		return false
	}
	p.current = result
	return true
}

// PageResponse returns the current WebAppsListSnapshotsFromDRSecondaryResponse page.
func (p *WebAppsListSnapshotsFromDRSecondaryPager) PageResponse() WebAppsListSnapshotsFromDRSecondaryResponse {
	return p.current
}

// WebAppsListSnapshotsFromDRSecondarySlotPager provides operations for iterating over paged responses.
type WebAppsListSnapshotsFromDRSecondarySlotPager struct {
	client    *WebAppsClient
	current   WebAppsListSnapshotsFromDRSecondarySlotResponse
	err       error
	requester func(context.Context) (*policy.Request, error)
	advancer  func(context.Context, WebAppsListSnapshotsFromDRSecondarySlotResponse) (*policy.Request, error)
}

// Err returns the last error encountered while paging.
func (p *WebAppsListSnapshotsFromDRSecondarySlotPager) Err() error {
	return p.err
}

// NextPage returns true if the pager advanced to the next page.
// Returns false if there are no more pages or an error occurred.
func (p *WebAppsListSnapshotsFromDRSecondarySlotPager) NextPage(ctx context.Context) bool {
	var req *policy.Request
	var err error
	if !reflect.ValueOf(p.current).IsZero() {
		if p.current.SnapshotCollection.NextLink == nil || len(*p.current.SnapshotCollection.NextLink) == 0 {
			return false
		}
		req, err = p.advancer(ctx, p.current)
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		p.err = err
		return false
	}
	resp, err := p.client.pl.Do(req)
	if err != nil {
		p.err = err
		return false
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {
		p.err = p.client.listSnapshotsFromDRSecondarySlotHandleError(resp)
		return false
	}
	result, err := p.client.listSnapshotsFromDRSecondarySlotHandleResponse(resp)
	if err != nil {
		p.err = err
		return false
	}
	p.current = result
	return true
}

// PageResponse returns the current WebAppsListSnapshotsFromDRSecondarySlotResponse page.
func (p *WebAppsListSnapshotsFromDRSecondarySlotPager) PageResponse() WebAppsListSnapshotsFromDRSecondarySlotResponse {
	return p.current
}

// WebAppsListSnapshotsPager provides operations for iterating over paged responses.
type WebAppsListSnapshotsPager struct {
	client    *WebAppsClient
	current   WebAppsListSnapshotsResponse
	err       error
	requester func(context.Context) (*policy.Request, error)
	advancer  func(context.Context, WebAppsListSnapshotsResponse) (*policy.Request, error)
}

// Err returns the last error encountered while paging.
func (p *WebAppsListSnapshotsPager) Err() error {
	return p.err
}

// NextPage returns true if the pager advanced to the next page.
// Returns false if there are no more pages or an error occurred.
func (p *WebAppsListSnapshotsPager) NextPage(ctx context.Context) bool {
	var req *policy.Request
	var err error
	if !reflect.ValueOf(p.current).IsZero() {
		if p.current.SnapshotCollection.NextLink == nil || len(*p.current.SnapshotCollection.NextLink) == 0 {
			return false
		}
		req, err = p.advancer(ctx, p.current)
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		p.err = err
		return false
	}
	resp, err := p.client.pl.Do(req)
	if err != nil {
		p.err = err
		return false
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {
		p.err = p.client.listSnapshotsHandleError(resp)
		return false
	}
	result, err := p.client.listSnapshotsHandleResponse(resp)
	if err != nil {
		p.err = err
		return false
	}
	p.current = result
	return true
}

// PageResponse returns the current WebAppsListSnapshotsResponse page.
func (p *WebAppsListSnapshotsPager) PageResponse() WebAppsListSnapshotsResponse {
	return p.current
}

// WebAppsListSnapshotsSlotPager provides operations for iterating over paged responses.
type WebAppsListSnapshotsSlotPager struct {
	client    *WebAppsClient
	current   WebAppsListSnapshotsSlotResponse
	err       error
	requester func(context.Context) (*policy.Request, error)
	advancer  func(context.Context, WebAppsListSnapshotsSlotResponse) (*policy.Request, error)
}

// Err returns the last error encountered while paging.
func (p *WebAppsListSnapshotsSlotPager) Err() error {
	return p.err
}

// NextPage returns true if the pager advanced to the next page.
// Returns false if there are no more pages or an error occurred.
func (p *WebAppsListSnapshotsSlotPager) NextPage(ctx context.Context) bool {
	var req *policy.Request
	var err error
	if !reflect.ValueOf(p.current).IsZero() {
		if p.current.SnapshotCollection.NextLink == nil || len(*p.current.SnapshotCollection.NextLink) == 0 {
			return false
		}
		req, err = p.advancer(ctx, p.current)
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		p.err = err
		return false
	}
	resp, err := p.client.pl.Do(req)
	if err != nil {
		p.err = err
		return false
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {
		p.err = p.client.listSnapshotsSlotHandleError(resp)
		return false
	}
	result, err := p.client.listSnapshotsSlotHandleResponse(resp)
	if err != nil {
		p.err = err
		return false
	}
	p.current = result
	return true
}

// PageResponse returns the current WebAppsListSnapshotsSlotResponse page.
func (p *WebAppsListSnapshotsSlotPager) PageResponse() WebAppsListSnapshotsSlotResponse {
	return p.current
}

// WebAppsListTriggeredWebJobHistoryPager provides operations for iterating over paged responses.
type WebAppsListTriggeredWebJobHistoryPager struct {
	client    *WebAppsClient
	current   WebAppsListTriggeredWebJobHistoryResponse
	err       error
	requester func(context.Context) (*policy.Request, error)
	advancer  func(context.Context, WebAppsListTriggeredWebJobHistoryResponse) (*policy.Request, error)
}

// Err returns the last error encountered while paging.
func (p *WebAppsListTriggeredWebJobHistoryPager) Err() error {
	return p.err
}

// NextPage returns true if the pager advanced to the next page.
// Returns false if there are no more pages or an error occurred.
func (p *WebAppsListTriggeredWebJobHistoryPager) NextPage(ctx context.Context) bool {
	var req *policy.Request
	var err error
	if !reflect.ValueOf(p.current).IsZero() {
		if p.current.TriggeredJobHistoryCollection.NextLink == nil || len(*p.current.TriggeredJobHistoryCollection.NextLink) == 0 {
			return false
		}
		req, err = p.advancer(ctx, p.current)
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		p.err = err
		return false
	}
	resp, err := p.client.pl.Do(req)
	if err != nil {
		p.err = err
		return false
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {
		p.err = p.client.listTriggeredWebJobHistoryHandleError(resp)
		return false
	}
	result, err := p.client.listTriggeredWebJobHistoryHandleResponse(resp)
	if err != nil {
		p.err = err
		return false
	}
	p.current = result
	return true
}

// PageResponse returns the current WebAppsListTriggeredWebJobHistoryResponse page.
func (p *WebAppsListTriggeredWebJobHistoryPager) PageResponse() WebAppsListTriggeredWebJobHistoryResponse {
	return p.current
}

// WebAppsListTriggeredWebJobHistorySlotPager provides operations for iterating over paged responses.
type WebAppsListTriggeredWebJobHistorySlotPager struct {
	client    *WebAppsClient
	current   WebAppsListTriggeredWebJobHistorySlotResponse
	err       error
	requester func(context.Context) (*policy.Request, error)
	advancer  func(context.Context, WebAppsListTriggeredWebJobHistorySlotResponse) (*policy.Request, error)
}

// Err returns the last error encountered while paging.
func (p *WebAppsListTriggeredWebJobHistorySlotPager) Err() error {
	return p.err
}

// NextPage returns true if the pager advanced to the next page.
// Returns false if there are no more pages or an error occurred.
func (p *WebAppsListTriggeredWebJobHistorySlotPager) NextPage(ctx context.Context) bool {
	var req *policy.Request
	var err error
	if !reflect.ValueOf(p.current).IsZero() {
		if p.current.TriggeredJobHistoryCollection.NextLink == nil || len(*p.current.TriggeredJobHistoryCollection.NextLink) == 0 {
			return false
		}
		req, err = p.advancer(ctx, p.current)
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		p.err = err
		return false
	}
	resp, err := p.client.pl.Do(req)
	if err != nil {
		p.err = err
		return false
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {
		p.err = p.client.listTriggeredWebJobHistorySlotHandleError(resp)
		return false
	}
	result, err := p.client.listTriggeredWebJobHistorySlotHandleResponse(resp)
	if err != nil {
		p.err = err
		return false
	}
	p.current = result
	return true
}

// PageResponse returns the current WebAppsListTriggeredWebJobHistorySlotResponse page.
func (p *WebAppsListTriggeredWebJobHistorySlotPager) PageResponse() WebAppsListTriggeredWebJobHistorySlotResponse {
	return p.current
}

// WebAppsListTriggeredWebJobsPager provides operations for iterating over paged responses.
type WebAppsListTriggeredWebJobsPager struct {
	client    *WebAppsClient
	current   WebAppsListTriggeredWebJobsResponse
	err       error
	requester func(context.Context) (*policy.Request, error)
	advancer  func(context.Context, WebAppsListTriggeredWebJobsResponse) (*policy.Request, error)
}

// Err returns the last error encountered while paging.
func (p *WebAppsListTriggeredWebJobsPager) Err() error {
	return p.err
}

// NextPage returns true if the pager advanced to the next page.
// Returns false if there are no more pages or an error occurred.
func (p *WebAppsListTriggeredWebJobsPager) NextPage(ctx context.Context) bool {
	var req *policy.Request
	var err error
	if !reflect.ValueOf(p.current).IsZero() {
		if p.current.TriggeredWebJobCollection.NextLink == nil || len(*p.current.TriggeredWebJobCollection.NextLink) == 0 {
			return false
		}
		req, err = p.advancer(ctx, p.current)
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		p.err = err
		return false
	}
	resp, err := p.client.pl.Do(req)
	if err != nil {
		p.err = err
		return false
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {
		p.err = p.client.listTriggeredWebJobsHandleError(resp)
		return false
	}
	result, err := p.client.listTriggeredWebJobsHandleResponse(resp)
	if err != nil {
		p.err = err
		return false
	}
	p.current = result
	return true
}

// PageResponse returns the current WebAppsListTriggeredWebJobsResponse page.
func (p *WebAppsListTriggeredWebJobsPager) PageResponse() WebAppsListTriggeredWebJobsResponse {
	return p.current
}

// WebAppsListTriggeredWebJobsSlotPager provides operations for iterating over paged responses.
type WebAppsListTriggeredWebJobsSlotPager struct {
	client    *WebAppsClient
	current   WebAppsListTriggeredWebJobsSlotResponse
	err       error
	requester func(context.Context) (*policy.Request, error)
	advancer  func(context.Context, WebAppsListTriggeredWebJobsSlotResponse) (*policy.Request, error)
}

// Err returns the last error encountered while paging.
func (p *WebAppsListTriggeredWebJobsSlotPager) Err() error {
	return p.err
}

// NextPage returns true if the pager advanced to the next page.
// Returns false if there are no more pages or an error occurred.
func (p *WebAppsListTriggeredWebJobsSlotPager) NextPage(ctx context.Context) bool {
	var req *policy.Request
	var err error
	if !reflect.ValueOf(p.current).IsZero() {
		if p.current.TriggeredWebJobCollection.NextLink == nil || len(*p.current.TriggeredWebJobCollection.NextLink) == 0 {
			return false
		}
		req, err = p.advancer(ctx, p.current)
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		p.err = err
		return false
	}
	resp, err := p.client.pl.Do(req)
	if err != nil {
		p.err = err
		return false
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {
		p.err = p.client.listTriggeredWebJobsSlotHandleError(resp)
		return false
	}
	result, err := p.client.listTriggeredWebJobsSlotHandleResponse(resp)
	if err != nil {
		p.err = err
		return false
	}
	p.current = result
	return true
}

// PageResponse returns the current WebAppsListTriggeredWebJobsSlotResponse page.
func (p *WebAppsListTriggeredWebJobsSlotPager) PageResponse() WebAppsListTriggeredWebJobsSlotResponse {
	return p.current
}

// WebAppsListUsagesPager provides operations for iterating over paged responses.
type WebAppsListUsagesPager struct {
	client    *WebAppsClient
	current   WebAppsListUsagesResponse
	err       error
	requester func(context.Context) (*policy.Request, error)
	advancer  func(context.Context, WebAppsListUsagesResponse) (*policy.Request, error)
}

// Err returns the last error encountered while paging.
func (p *WebAppsListUsagesPager) Err() error {
	return p.err
}

// NextPage returns true if the pager advanced to the next page.
// Returns false if there are no more pages or an error occurred.
func (p *WebAppsListUsagesPager) NextPage(ctx context.Context) bool {
	var req *policy.Request
	var err error
	if !reflect.ValueOf(p.current).IsZero() {
		if p.current.CsmUsageQuotaCollection.NextLink == nil || len(*p.current.CsmUsageQuotaCollection.NextLink) == 0 {
			return false
		}
		req, err = p.advancer(ctx, p.current)
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		p.err = err
		return false
	}
	resp, err := p.client.pl.Do(req)
	if err != nil {
		p.err = err
		return false
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {
		p.err = p.client.listUsagesHandleError(resp)
		return false
	}
	result, err := p.client.listUsagesHandleResponse(resp)
	if err != nil {
		p.err = err
		return false
	}
	p.current = result
	return true
}

// PageResponse returns the current WebAppsListUsagesResponse page.
func (p *WebAppsListUsagesPager) PageResponse() WebAppsListUsagesResponse {
	return p.current
}

// WebAppsListUsagesSlotPager provides operations for iterating over paged responses.
type WebAppsListUsagesSlotPager struct {
	client    *WebAppsClient
	current   WebAppsListUsagesSlotResponse
	err       error
	requester func(context.Context) (*policy.Request, error)
	advancer  func(context.Context, WebAppsListUsagesSlotResponse) (*policy.Request, error)
}

// Err returns the last error encountered while paging.
func (p *WebAppsListUsagesSlotPager) Err() error {
	return p.err
}

// NextPage returns true if the pager advanced to the next page.
// Returns false if there are no more pages or an error occurred.
func (p *WebAppsListUsagesSlotPager) NextPage(ctx context.Context) bool {
	var req *policy.Request
	var err error
	if !reflect.ValueOf(p.current).IsZero() {
		if p.current.CsmUsageQuotaCollection.NextLink == nil || len(*p.current.CsmUsageQuotaCollection.NextLink) == 0 {
			return false
		}
		req, err = p.advancer(ctx, p.current)
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		p.err = err
		return false
	}
	resp, err := p.client.pl.Do(req)
	if err != nil {
		p.err = err
		return false
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {
		p.err = p.client.listUsagesSlotHandleError(resp)
		return false
	}
	result, err := p.client.listUsagesSlotHandleResponse(resp)
	if err != nil {
		p.err = err
		return false
	}
	p.current = result
	return true
}

// PageResponse returns the current WebAppsListUsagesSlotResponse page.
func (p *WebAppsListUsagesSlotPager) PageResponse() WebAppsListUsagesSlotResponse {
	return p.current
}

// WebAppsListWebJobsPager provides operations for iterating over paged responses.
type WebAppsListWebJobsPager struct {
	client    *WebAppsClient
	current   WebAppsListWebJobsResponse
	err       error
	requester func(context.Context) (*policy.Request, error)
	advancer  func(context.Context, WebAppsListWebJobsResponse) (*policy.Request, error)
}

// Err returns the last error encountered while paging.
func (p *WebAppsListWebJobsPager) Err() error {
	return p.err
}

// NextPage returns true if the pager advanced to the next page.
// Returns false if there are no more pages or an error occurred.
func (p *WebAppsListWebJobsPager) NextPage(ctx context.Context) bool {
	var req *policy.Request
	var err error
	if !reflect.ValueOf(p.current).IsZero() {
		if p.current.WebJobCollection.NextLink == nil || len(*p.current.WebJobCollection.NextLink) == 0 {
			return false
		}
		req, err = p.advancer(ctx, p.current)
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		p.err = err
		return false
	}
	resp, err := p.client.pl.Do(req)
	if err != nil {
		p.err = err
		return false
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {
		p.err = p.client.listWebJobsHandleError(resp)
		return false
	}
	result, err := p.client.listWebJobsHandleResponse(resp)
	if err != nil {
		p.err = err
		return false
	}
	p.current = result
	return true
}

// PageResponse returns the current WebAppsListWebJobsResponse page.
func (p *WebAppsListWebJobsPager) PageResponse() WebAppsListWebJobsResponse {
	return p.current
}

// WebAppsListWebJobsSlotPager provides operations for iterating over paged responses.
type WebAppsListWebJobsSlotPager struct {
	client    *WebAppsClient
	current   WebAppsListWebJobsSlotResponse
	err       error
	requester func(context.Context) (*policy.Request, error)
	advancer  func(context.Context, WebAppsListWebJobsSlotResponse) (*policy.Request, error)
}

// Err returns the last error encountered while paging.
func (p *WebAppsListWebJobsSlotPager) Err() error {
	return p.err
}

// NextPage returns true if the pager advanced to the next page.
// Returns false if there are no more pages or an error occurred.
func (p *WebAppsListWebJobsSlotPager) NextPage(ctx context.Context) bool {
	var req *policy.Request
	var err error
	if !reflect.ValueOf(p.current).IsZero() {
		if p.current.WebJobCollection.NextLink == nil || len(*p.current.WebJobCollection.NextLink) == 0 {
			return false
		}
		req, err = p.advancer(ctx, p.current)
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		p.err = err
		return false
	}
	resp, err := p.client.pl.Do(req)
	if err != nil {
		p.err = err
		return false
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {
		p.err = p.client.listWebJobsSlotHandleError(resp)
		return false
	}
	result, err := p.client.listWebJobsSlotHandleResponse(resp)
	if err != nil {
		p.err = err
		return false
	}
	p.current = result
	return true
}

// PageResponse returns the current WebAppsListWebJobsSlotResponse page.
func (p *WebAppsListWebJobsSlotPager) PageResponse() WebAppsListWebJobsSlotResponse {
	return p.current
}

// WebSiteManagementClientListBillingMetersPager provides operations for iterating over paged responses.
type WebSiteManagementClientListBillingMetersPager struct {
	client    *WebSiteManagementClient
	current   WebSiteManagementClientListBillingMetersResponse
	err       error
	requester func(context.Context) (*policy.Request, error)
	advancer  func(context.Context, WebSiteManagementClientListBillingMetersResponse) (*policy.Request, error)
}

// Err returns the last error encountered while paging.
func (p *WebSiteManagementClientListBillingMetersPager) Err() error {
	return p.err
}

// NextPage returns true if the pager advanced to the next page.
// Returns false if there are no more pages or an error occurred.
func (p *WebSiteManagementClientListBillingMetersPager) NextPage(ctx context.Context) bool {
	var req *policy.Request
	var err error
	if !reflect.ValueOf(p.current).IsZero() {
		if p.current.BillingMeterCollection.NextLink == nil || len(*p.current.BillingMeterCollection.NextLink) == 0 {
			return false
		}
		req, err = p.advancer(ctx, p.current)
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		p.err = err
		return false
	}
	resp, err := p.client.pl.Do(req)
	if err != nil {
		p.err = err
		return false
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {
		p.err = p.client.listBillingMetersHandleError(resp)
		return false
	}
	result, err := p.client.listBillingMetersHandleResponse(resp)
	if err != nil {
		p.err = err
		return false
	}
	p.current = result
	return true
}

// PageResponse returns the current WebSiteManagementClientListBillingMetersResponse page.
func (p *WebSiteManagementClientListBillingMetersPager) PageResponse() WebSiteManagementClientListBillingMetersResponse {
	return p.current
}

// WebSiteManagementClientListGeoRegionsPager provides operations for iterating over paged responses.
type WebSiteManagementClientListGeoRegionsPager struct {
	client    *WebSiteManagementClient
	current   WebSiteManagementClientListGeoRegionsResponse
	err       error
	requester func(context.Context) (*policy.Request, error)
	advancer  func(context.Context, WebSiteManagementClientListGeoRegionsResponse) (*policy.Request, error)
}

// Err returns the last error encountered while paging.
func (p *WebSiteManagementClientListGeoRegionsPager) Err() error {
	return p.err
}

// NextPage returns true if the pager advanced to the next page.
// Returns false if there are no more pages or an error occurred.
func (p *WebSiteManagementClientListGeoRegionsPager) NextPage(ctx context.Context) bool {
	var req *policy.Request
	var err error
	if !reflect.ValueOf(p.current).IsZero() {
		if p.current.GeoRegionCollection.NextLink == nil || len(*p.current.GeoRegionCollection.NextLink) == 0 {
			return false
		}
		req, err = p.advancer(ctx, p.current)
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		p.err = err
		return false
	}
	resp, err := p.client.pl.Do(req)
	if err != nil {
		p.err = err
		return false
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {
		p.err = p.client.listGeoRegionsHandleError(resp)
		return false
	}
	result, err := p.client.listGeoRegionsHandleResponse(resp)
	if err != nil {
		p.err = err
		return false
	}
	p.current = result
	return true
}

// PageResponse returns the current WebSiteManagementClientListGeoRegionsResponse page.
func (p *WebSiteManagementClientListGeoRegionsPager) PageResponse() WebSiteManagementClientListGeoRegionsResponse {
	return p.current
}

// WebSiteManagementClientListPremierAddOnOffersPager provides operations for iterating over paged responses.
type WebSiteManagementClientListPremierAddOnOffersPager struct {
	client    *WebSiteManagementClient
	current   WebSiteManagementClientListPremierAddOnOffersResponse
	err       error
	requester func(context.Context) (*policy.Request, error)
	advancer  func(context.Context, WebSiteManagementClientListPremierAddOnOffersResponse) (*policy.Request, error)
}

// Err returns the last error encountered while paging.
func (p *WebSiteManagementClientListPremierAddOnOffersPager) Err() error {
	return p.err
}

// NextPage returns true if the pager advanced to the next page.
// Returns false if there are no more pages or an error occurred.
func (p *WebSiteManagementClientListPremierAddOnOffersPager) NextPage(ctx context.Context) bool {
	var req *policy.Request
	var err error
	if !reflect.ValueOf(p.current).IsZero() {
		if p.current.PremierAddOnOfferCollection.NextLink == nil || len(*p.current.PremierAddOnOfferCollection.NextLink) == 0 {
			return false
		}
		req, err = p.advancer(ctx, p.current)
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		p.err = err
		return false
	}
	resp, err := p.client.pl.Do(req)
	if err != nil {
		p.err = err
		return false
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {
		p.err = p.client.listPremierAddOnOffersHandleError(resp)
		return false
	}
	result, err := p.client.listPremierAddOnOffersHandleResponse(resp)
	if err != nil {
		p.err = err
		return false
	}
	p.current = result
	return true
}

// PageResponse returns the current WebSiteManagementClientListPremierAddOnOffersResponse page.
func (p *WebSiteManagementClientListPremierAddOnOffersPager) PageResponse() WebSiteManagementClientListPremierAddOnOffersResponse {
	return p.current
}

// WebSiteManagementClientListSiteIdentifiersAssignedToHostNamePager provides operations for iterating over paged responses.
type WebSiteManagementClientListSiteIdentifiersAssignedToHostNamePager struct {
	client    *WebSiteManagementClient
	current   WebSiteManagementClientListSiteIdentifiersAssignedToHostNameResponse
	err       error
	requester func(context.Context) (*policy.Request, error)
	advancer  func(context.Context, WebSiteManagementClientListSiteIdentifiersAssignedToHostNameResponse) (*policy.Request, error)
}

// Err returns the last error encountered while paging.
func (p *WebSiteManagementClientListSiteIdentifiersAssignedToHostNamePager) Err() error {
	return p.err
}

// NextPage returns true if the pager advanced to the next page.
// Returns false if there are no more pages or an error occurred.
func (p *WebSiteManagementClientListSiteIdentifiersAssignedToHostNamePager) NextPage(ctx context.Context) bool {
	var req *policy.Request
	var err error
	if !reflect.ValueOf(p.current).IsZero() {
		if p.current.IdentifierCollection.NextLink == nil || len(*p.current.IdentifierCollection.NextLink) == 0 {
			return false
		}
		req, err = p.advancer(ctx, p.current)
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		p.err = err
		return false
	}
	resp, err := p.client.pl.Do(req)
	if err != nil {
		p.err = err
		return false
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {
		p.err = p.client.listSiteIdentifiersAssignedToHostNameHandleError(resp)
		return false
	}
	result, err := p.client.listSiteIdentifiersAssignedToHostNameHandleResponse(resp)
	if err != nil {
		p.err = err
		return false
	}
	p.current = result
	return true
}

// PageResponse returns the current WebSiteManagementClientListSiteIdentifiersAssignedToHostNameResponse page.
func (p *WebSiteManagementClientListSiteIdentifiersAssignedToHostNamePager) PageResponse() WebSiteManagementClientListSiteIdentifiersAssignedToHostNameResponse {
	return p.current
}

// WebSiteManagementClientListSourceControlsPager provides operations for iterating over paged responses.
type WebSiteManagementClientListSourceControlsPager struct {
	client    *WebSiteManagementClient
	current   WebSiteManagementClientListSourceControlsResponse
	err       error
	requester func(context.Context) (*policy.Request, error)
	advancer  func(context.Context, WebSiteManagementClientListSourceControlsResponse) (*policy.Request, error)
}

// Err returns the last error encountered while paging.
func (p *WebSiteManagementClientListSourceControlsPager) Err() error {
	return p.err
}

// NextPage returns true if the pager advanced to the next page.
// Returns false if there are no more pages or an error occurred.
func (p *WebSiteManagementClientListSourceControlsPager) NextPage(ctx context.Context) bool {
	var req *policy.Request
	var err error
	if !reflect.ValueOf(p.current).IsZero() {
		if p.current.SourceControlCollection.NextLink == nil || len(*p.current.SourceControlCollection.NextLink) == 0 {
			return false
		}
		req, err = p.advancer(ctx, p.current)
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		p.err = err
		return false
	}
	resp, err := p.client.pl.Do(req)
	if err != nil {
		p.err = err
		return false
	}
	if !runtime.HasStatusCode(resp, http.StatusOK) {
		p.err = p.client.listSourceControlsHandleError(resp)
		return false
	}
	result, err := p.client.listSourceControlsHandleResponse(resp)
	if err != nil {
		p.err = err
		return false
	}
	p.current = result
	return true
}

// PageResponse returns the current WebSiteManagementClientListSourceControlsResponse page.
func (p *WebSiteManagementClientListSourceControlsPager) PageResponse() WebSiteManagementClientListSourceControlsResponse {
	return p.current
}
