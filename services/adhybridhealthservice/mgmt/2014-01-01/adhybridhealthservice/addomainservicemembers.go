package adhybridhealthservice

// Copyright (c) Microsoft and contributors.  All rights reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
// http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
//
// See the License for the specific language governing permissions and
// limitations under the License.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

import (
	"context"
	"github.com/Azure/go-autorest/autorest"
	"github.com/Azure/go-autorest/autorest/azure"
	"net/http"
)

// AddomainservicemembersClient is the REST APIs for Azure Active Drectory Connect Health
type AddomainservicemembersClient struct {
	BaseClient
}

// NewAddomainservicemembersClient creates an instance of the AddomainservicemembersClient client.
func NewAddomainservicemembersClient() AddomainservicemembersClient {
	return NewAddomainservicemembersClientWithBaseURI(DefaultBaseURI)
}

// NewAddomainservicemembersClientWithBaseURI creates an instance of the AddomainservicemembersClient client.
func NewAddomainservicemembersClientWithBaseURI(baseURI string) AddomainservicemembersClient {
	return AddomainservicemembersClient{NewWithBaseURI(baseURI)}
}

// GetServiceMembersV2 gets the details of the servers, for a given Active Directory Domain Service, that are onboarded
// to Azure Active Directory Connect Health.
//
// serviceName is the name of the service. isGroupbySite is indicates if the result should be grouped by site or
// not. filter is the server property filter to apply. query is the custom query. nextPartitionKey is the next
// partition key to query for. nextRowKey is the next row key to query for. takeCount is the take count , which
// specifies the number of elements that can be returned from a sequence.
func (client AddomainservicemembersClient) GetServiceMembersV2(ctx context.Context, serviceName string, isGroupbySite bool, filter string, query string, nextPartitionKey string, nextRowKey string, takeCount *int32) (result AddsServiceMembers, err error) {
	req, err := client.GetServiceMembersV2Preparer(ctx, serviceName, isGroupbySite, filter, query, nextPartitionKey, nextRowKey, takeCount)
	if err != nil {
		err = autorest.NewErrorWithError(err, "adhybridhealthservice.AddomainservicemembersClient", "GetServiceMembersV2", nil, "Failure preparing request")
		return
	}

	resp, err := client.GetServiceMembersV2Sender(req)
	if err != nil {
		result.Response = autorest.Response{Response: resp}
		err = autorest.NewErrorWithError(err, "adhybridhealthservice.AddomainservicemembersClient", "GetServiceMembersV2", resp, "Failure sending request")
		return
	}

	result, err = client.GetServiceMembersV2Responder(resp)
	if err != nil {
		err = autorest.NewErrorWithError(err, "adhybridhealthservice.AddomainservicemembersClient", "GetServiceMembersV2", resp, "Failure responding to request")
	}

	return
}

// GetServiceMembersV2Preparer prepares the GetServiceMembersV2 request.
func (client AddomainservicemembersClient) GetServiceMembersV2Preparer(ctx context.Context, serviceName string, isGroupbySite bool, filter string, query string, nextPartitionKey string, nextRowKey string, takeCount *int32) (*http.Request, error) {
	pathParameters := map[string]interface{}{
		"serviceName": autorest.Encode("path", serviceName),
	}

	const APIVersion = "2014-01-01"
	queryParameters := map[string]interface{}{
		"api-version":   APIVersion,
		"isGroupbySite": autorest.Encode("query", isGroupbySite),
	}
	if len(filter) > 0 {
		queryParameters["$filter"] = autorest.Encode("query", filter)
	}
	if len(query) > 0 {
		queryParameters["query"] = autorest.Encode("query", query)
	}
	if len(nextPartitionKey) > 0 {
		queryParameters["nextPartitionKey"] = autorest.Encode("query", nextPartitionKey)
	}
	if len(nextRowKey) > 0 {
		queryParameters["nextRowKey"] = autorest.Encode("query", nextRowKey)
	}
	if takeCount != nil {
		queryParameters["takeCount"] = autorest.Encode("query", *takeCount)
	}

	preparer := autorest.CreatePreparer(
		autorest.AsGet(),
		autorest.WithBaseURL(client.BaseURI),
		autorest.WithPathParameters("/providers/Microsoft.ADHybridHealthService/addsservices/{serviceName}/addomainservicemembers", pathParameters),
		autorest.WithQueryParameters(queryParameters))
	return preparer.Prepare((&http.Request{}).WithContext(ctx))
}

// GetServiceMembersV2Sender sends the GetServiceMembersV2 request. The method will close the
// http.Response Body if it receives an error.
func (client AddomainservicemembersClient) GetServiceMembersV2Sender(req *http.Request) (*http.Response, error) {
	return autorest.SendWithSender(client, req,
		autorest.DoRetryForStatusCodes(client.RetryAttempts, client.RetryDuration, autorest.StatusCodesForRetry...))
}

// GetServiceMembersV2Responder handles the response to the GetServiceMembersV2 request. The method always
// closes the http.Response Body.
func (client AddomainservicemembersClient) GetServiceMembersV2Responder(resp *http.Response) (result AddsServiceMembers, err error) {
	err = autorest.Respond(
		resp,
		client.ByInspecting(),
		azure.WithErrorUnlessStatusCode(http.StatusOK),
		autorest.ByUnmarshallingJSON(&result),
		autorest.ByClosing())
	result.Response = autorest.Response{Response: resp}
	return
}
