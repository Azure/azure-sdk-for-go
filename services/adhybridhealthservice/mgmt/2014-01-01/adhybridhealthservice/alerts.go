package adhybridhealthservice

// Copyright (c) Microsoft and contributors.  All rights reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
// http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
//
// See the License for the specific language governing permissions and
// limitations under the License.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

import (
	"context"
	"github.com/Azure/go-autorest/autorest"
	"github.com/Azure/go-autorest/autorest/azure"
	"github.com/Azure/go-autorest/autorest/date"
	"github.com/satori/go.uuid"
	"net/http"
)

// AlertsClient is the REST APIs for Azure Active Drectory Connect Health
type AlertsClient struct {
	BaseClient
}

// NewAlertsClient creates an instance of the AlertsClient client.
func NewAlertsClient() AlertsClient {
	return NewAlertsClientWithBaseURI(DefaultBaseURI)
}

// NewAlertsClientWithBaseURI creates an instance of the AlertsClient client.
func NewAlertsClientWithBaseURI(baseURI string) AlertsClient {
	return AlertsClient{NewWithBaseURI(baseURI)}
}

// GetAddsServiceMemberAlerts gets the details of an alert for a given Active Directory Domain Controller service and
// server combination.
//
// serviceMemberID is the server Id for which the laert details needs to be queried. serviceName is the name of the
// service. filter is the alert property filter to apply. state is the alert state to query for. from is the start
// date to query for. toParameter is the end date till when to query for.
func (client AlertsClient) GetAddsServiceMemberAlerts(ctx context.Context, serviceMemberID uuid.UUID, serviceName string, filter string, state string, from *date.Time, toParameter *date.Time) (result Alerts, err error) {
	req, err := client.GetAddsServiceMemberAlertsPreparer(ctx, serviceMemberID, serviceName, filter, state, from, toParameter)
	if err != nil {
		err = autorest.NewErrorWithError(err, "adhybridhealthservice.AlertsClient", "GetAddsServiceMemberAlerts", nil, "Failure preparing request")
		return
	}

	resp, err := client.GetAddsServiceMemberAlertsSender(req)
	if err != nil {
		result.Response = autorest.Response{Response: resp}
		err = autorest.NewErrorWithError(err, "adhybridhealthservice.AlertsClient", "GetAddsServiceMemberAlerts", resp, "Failure sending request")
		return
	}

	result, err = client.GetAddsServiceMemberAlertsResponder(resp)
	if err != nil {
		err = autorest.NewErrorWithError(err, "adhybridhealthservice.AlertsClient", "GetAddsServiceMemberAlerts", resp, "Failure responding to request")
	}

	return
}

// GetAddsServiceMemberAlertsPreparer prepares the GetAddsServiceMemberAlerts request.
func (client AlertsClient) GetAddsServiceMemberAlertsPreparer(ctx context.Context, serviceMemberID uuid.UUID, serviceName string, filter string, state string, from *date.Time, toParameter *date.Time) (*http.Request, error) {
	pathParameters := map[string]interface{}{
		"serviceMemberId": autorest.Encode("path", serviceMemberID),
		"serviceName":     autorest.Encode("path", serviceName),
	}

	const APIVersion = "2014-01-01"
	queryParameters := map[string]interface{}{
		"api-version": APIVersion,
	}
	if len(filter) > 0 {
		queryParameters["$filter"] = autorest.Encode("query", filter)
	}
	if len(state) > 0 {
		queryParameters["state"] = autorest.Encode("query", state)
	}
	if from != nil {
		queryParameters["from"] = autorest.Encode("query", *from)
	}
	if toParameter != nil {
		queryParameters["to"] = autorest.Encode("query", *toParameter)
	}

	preparer := autorest.CreatePreparer(
		autorest.AsGet(),
		autorest.WithBaseURL(client.BaseURI),
		autorest.WithPathParameters("/providers/Microsoft.ADHybridHealthService/addsservices/{serviceName}/servicemembers/{serviceMemberId}/alerts", pathParameters),
		autorest.WithQueryParameters(queryParameters))
	return preparer.Prepare((&http.Request{}).WithContext(ctx))
}

// GetAddsServiceMemberAlertsSender sends the GetAddsServiceMemberAlerts request. The method will close the
// http.Response Body if it receives an error.
func (client AlertsClient) GetAddsServiceMemberAlertsSender(req *http.Request) (*http.Response, error) {
	return autorest.SendWithSender(client, req,
		autorest.DoRetryForStatusCodes(client.RetryAttempts, client.RetryDuration, autorest.StatusCodesForRetry...))
}

// GetAddsServiceMemberAlertsResponder handles the response to the GetAddsServiceMemberAlerts request. The method always
// closes the http.Response Body.
func (client AlertsClient) GetAddsServiceMemberAlertsResponder(resp *http.Response) (result Alerts, err error) {
	err = autorest.Respond(
		resp,
		client.ByInspecting(),
		azure.WithErrorUnlessStatusCode(http.StatusOK),
		autorest.ByUnmarshallingJSON(&result),
		autorest.ByClosing())
	result.Response = autorest.Response{Response: resp}
	return
}

// GetAddsServicesAlerts gets the alerts for a given Active Directory Domain Service.
//
// serviceName is the name of the service. filter is the alert property filter to apply. state is the alert state
// to query for. from is the start date to query for. toParameter is the end date till when to query for.
func (client AlertsClient) GetAddsServicesAlerts(ctx context.Context, serviceName string, filter string, state string, from *date.Time, toParameter *date.Time) (result Alerts, err error) {
	req, err := client.GetAddsServicesAlertsPreparer(ctx, serviceName, filter, state, from, toParameter)
	if err != nil {
		err = autorest.NewErrorWithError(err, "adhybridhealthservice.AlertsClient", "GetAddsServicesAlerts", nil, "Failure preparing request")
		return
	}

	resp, err := client.GetAddsServicesAlertsSender(req)
	if err != nil {
		result.Response = autorest.Response{Response: resp}
		err = autorest.NewErrorWithError(err, "adhybridhealthservice.AlertsClient", "GetAddsServicesAlerts", resp, "Failure sending request")
		return
	}

	result, err = client.GetAddsServicesAlertsResponder(resp)
	if err != nil {
		err = autorest.NewErrorWithError(err, "adhybridhealthservice.AlertsClient", "GetAddsServicesAlerts", resp, "Failure responding to request")
	}

	return
}

// GetAddsServicesAlertsPreparer prepares the GetAddsServicesAlerts request.
func (client AlertsClient) GetAddsServicesAlertsPreparer(ctx context.Context, serviceName string, filter string, state string, from *date.Time, toParameter *date.Time) (*http.Request, error) {
	pathParameters := map[string]interface{}{
		"serviceName": autorest.Encode("path", serviceName),
	}

	const APIVersion = "2014-01-01"
	queryParameters := map[string]interface{}{
		"api-version": APIVersion,
	}
	if len(filter) > 0 {
		queryParameters["$filter"] = autorest.Encode("query", filter)
	}
	if len(state) > 0 {
		queryParameters["state"] = autorest.Encode("query", state)
	}
	if from != nil {
		queryParameters["from"] = autorest.Encode("query", *from)
	}
	if toParameter != nil {
		queryParameters["to"] = autorest.Encode("query", *toParameter)
	}

	preparer := autorest.CreatePreparer(
		autorest.AsGet(),
		autorest.WithBaseURL(client.BaseURI),
		autorest.WithPathParameters("/providers/Microsoft.ADHybridHealthService/addsservices/{serviceName}/alerts", pathParameters),
		autorest.WithQueryParameters(queryParameters))
	return preparer.Prepare((&http.Request{}).WithContext(ctx))
}

// GetAddsServicesAlertsSender sends the GetAddsServicesAlerts request. The method will close the
// http.Response Body if it receives an error.
func (client AlertsClient) GetAddsServicesAlertsSender(req *http.Request) (*http.Response, error) {
	return autorest.SendWithSender(client, req,
		autorest.DoRetryForStatusCodes(client.RetryAttempts, client.RetryDuration, autorest.StatusCodesForRetry...))
}

// GetAddsServicesAlertsResponder handles the response to the GetAddsServicesAlerts request. The method always
// closes the http.Response Body.
func (client AlertsClient) GetAddsServicesAlertsResponder(resp *http.Response) (result Alerts, err error) {
	err = autorest.Respond(
		resp,
		client.ByInspecting(),
		azure.WithErrorUnlessStatusCode(http.StatusOK),
		autorest.ByUnmarshallingJSON(&result),
		autorest.ByClosing())
	result.Response = autorest.Response{Response: resp}
	return
}

// GetAlerts gets the alerts for a given service.
//
// serviceName is the name of the service. filter is the alert property filter to apply. state is the alert state
// to query for. from is the start date to query for. toParameter is the end date till when to query for.
func (client AlertsClient) GetAlerts(ctx context.Context, serviceName string, filter string, state string, from *date.Time, toParameter *date.Time) (result Alerts, err error) {
	req, err := client.GetAlertsPreparer(ctx, serviceName, filter, state, from, toParameter)
	if err != nil {
		err = autorest.NewErrorWithError(err, "adhybridhealthservice.AlertsClient", "GetAlerts", nil, "Failure preparing request")
		return
	}

	resp, err := client.GetAlertsSender(req)
	if err != nil {
		result.Response = autorest.Response{Response: resp}
		err = autorest.NewErrorWithError(err, "adhybridhealthservice.AlertsClient", "GetAlerts", resp, "Failure sending request")
		return
	}

	result, err = client.GetAlertsResponder(resp)
	if err != nil {
		err = autorest.NewErrorWithError(err, "adhybridhealthservice.AlertsClient", "GetAlerts", resp, "Failure responding to request")
	}

	return
}

// GetAlertsPreparer prepares the GetAlerts request.
func (client AlertsClient) GetAlertsPreparer(ctx context.Context, serviceName string, filter string, state string, from *date.Time, toParameter *date.Time) (*http.Request, error) {
	pathParameters := map[string]interface{}{
		"serviceName": autorest.Encode("path", serviceName),
	}

	const APIVersion = "2014-01-01"
	queryParameters := map[string]interface{}{
		"api-version": APIVersion,
	}
	if len(filter) > 0 {
		queryParameters["$filter"] = autorest.Encode("query", filter)
	}
	if len(state) > 0 {
		queryParameters["state"] = autorest.Encode("query", state)
	}
	if from != nil {
		queryParameters["from"] = autorest.Encode("query", *from)
	}
	if toParameter != nil {
		queryParameters["to"] = autorest.Encode("query", *toParameter)
	}

	preparer := autorest.CreatePreparer(
		autorest.AsGet(),
		autorest.WithBaseURL(client.BaseURI),
		autorest.WithPathParameters("/providers/Microsoft.ADHybridHealthService/services/{serviceName}/alerts", pathParameters),
		autorest.WithQueryParameters(queryParameters))
	return preparer.Prepare((&http.Request{}).WithContext(ctx))
}

// GetAlertsSender sends the GetAlerts request. The method will close the
// http.Response Body if it receives an error.
func (client AlertsClient) GetAlertsSender(req *http.Request) (*http.Response, error) {
	return autorest.SendWithSender(client, req,
		autorest.DoRetryForStatusCodes(client.RetryAttempts, client.RetryDuration, autorest.StatusCodesForRetry...))
}

// GetAlertsResponder handles the response to the GetAlerts request. The method always
// closes the http.Response Body.
func (client AlertsClient) GetAlertsResponder(resp *http.Response) (result Alerts, err error) {
	err = autorest.Respond(
		resp,
		client.ByInspecting(),
		azure.WithErrorUnlessStatusCode(http.StatusOK),
		autorest.ByUnmarshallingJSON(&result),
		autorest.ByClosing())
	result.Response = autorest.Response{Response: resp}
	return
}
