// Package adhybridhealthservice implements the Azure ARM Adhybridhealthservice service API version 2014-01-01.
//
// REST APIs for Azure Active Drectory Connect Health
package adhybridhealthservice

// Copyright (c) Microsoft and contributors.  All rights reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
// http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
//
// See the License for the specific language governing permissions and
// limitations under the License.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

import (
	"context"
	"github.com/Azure/go-autorest/autorest"
	"github.com/Azure/go-autorest/autorest/azure"
	"net/http"
)

const (
	// DefaultBaseURI is the default URI used for the service Adhybridhealthservice
	DefaultBaseURI = "https://management.azure.com"
)

// BaseClient is the base client for Adhybridhealthservice.
type BaseClient struct {
	autorest.Client
	BaseURI string
}

// New creates an instance of the BaseClient client.
func New() BaseClient {
	return NewWithBaseURI(DefaultBaseURI)
}

// NewWithBaseURI creates an instance of the BaseClient client.
func NewWithBaseURI(baseURI string) BaseClient {
	return BaseClient{
		Client:  autorest.NewClientWithUserAgent(UserAgent()),
		BaseURI: baseURI,
	}
}

// ServicesGetBadPwdUserReport gets the bad password login attempt report for an user
//
// serviceName is the name of the service. dataSource is the source of data, if its test data or customer data.
func (client BaseClient) ServicesGetBadPwdUserReport(ctx context.Context, serviceName string, dataSource string) (result ErrorReportUsersEntries, err error) {
	req, err := client.ServicesGetBadPwdUserReportPreparer(ctx, serviceName, dataSource)
	if err != nil {
		err = autorest.NewErrorWithError(err, "adhybridhealthservice.BaseClient", "ServicesGetBadPwdUserReport", nil, "Failure preparing request")
		return
	}

	resp, err := client.ServicesGetBadPwdUserReportSender(req)
	if err != nil {
		result.Response = autorest.Response{Response: resp}
		err = autorest.NewErrorWithError(err, "adhybridhealthservice.BaseClient", "ServicesGetBadPwdUserReport", resp, "Failure sending request")
		return
	}

	result, err = client.ServicesGetBadPwdUserReportResponder(resp)
	if err != nil {
		err = autorest.NewErrorWithError(err, "adhybridhealthservice.BaseClient", "ServicesGetBadPwdUserReport", resp, "Failure responding to request")
	}

	return
}

// ServicesGetBadPwdUserReportPreparer prepares the ServicesGetBadPwdUserReport request.
func (client BaseClient) ServicesGetBadPwdUserReportPreparer(ctx context.Context, serviceName string, dataSource string) (*http.Request, error) {
	pathParameters := map[string]interface{}{
		"serviceName": autorest.Encode("path", serviceName),
	}

	const APIVersion = "2014-01-01"
	queryParameters := map[string]interface{}{
		"api-version": APIVersion,
	}
	if len(dataSource) > 0 {
		queryParameters["dataSource"] = autorest.Encode("query", dataSource)
	}

	preparer := autorest.CreatePreparer(
		autorest.AsGet(),
		autorest.WithBaseURL(client.BaseURI),
		autorest.WithPathParameters("/providers/Microsoft.ADHybridHealthService/services/{serviceName}/reports/badpassword/details/user", pathParameters),
		autorest.WithQueryParameters(queryParameters))
	return preparer.Prepare((&http.Request{}).WithContext(ctx))
}

// ServicesGetBadPwdUserReportSender sends the ServicesGetBadPwdUserReport request. The method will close the
// http.Response Body if it receives an error.
func (client BaseClient) ServicesGetBadPwdUserReportSender(req *http.Request) (*http.Response, error) {
	return autorest.SendWithSender(client, req,
		autorest.DoRetryForStatusCodes(client.RetryAttempts, client.RetryDuration, autorest.StatusCodesForRetry...))
}

// ServicesGetBadPwdUserReportResponder handles the response to the ServicesGetBadPwdUserReport request. The method always
// closes the http.Response Body.
func (client BaseClient) ServicesGetBadPwdUserReportResponder(resp *http.Response) (result ErrorReportUsersEntries, err error) {
	err = autorest.Respond(
		resp,
		client.ByInspecting(),
		azure.WithErrorUnlessStatusCode(http.StatusOK),
		autorest.ByUnmarshallingJSON(&result),
		autorest.ByClosing())
	result.Response = autorest.Response{Response: resp}
	return
}
