package adhybridhealthservice

// Copyright (c) Microsoft and contributors.  All rights reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
// http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
//
// See the License for the specific language governing permissions and
// limitations under the License.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

import (
	"context"
	"github.com/Azure/go-autorest/autorest"
	"github.com/Azure/go-autorest/autorest/azure"
	"net/http"
)

// ConfigurationClient is the REST APIs for Azure Active Drectory Connect Health
type ConfigurationClient struct {
	BaseClient
}

// NewConfigurationClient creates an instance of the ConfigurationClient client.
func NewConfigurationClient() ConfigurationClient {
	return NewConfigurationClientWithBaseURI(DefaultBaseURI)
}

// NewConfigurationClientWithBaseURI creates an instance of the ConfigurationClient client.
func NewConfigurationClientWithBaseURI(baseURI string) ConfigurationClient {
	return ConfigurationClient{NewWithBaseURI(baseURI)}
}

// GetTenant gets the details of a tenant onboarded to Azure Active Directory Connect Health.
func (client ConfigurationClient) GetTenant(ctx context.Context) (result Tenant, err error) {
	req, err := client.GetTenantPreparer(ctx)
	if err != nil {
		err = autorest.NewErrorWithError(err, "adhybridhealthservice.ConfigurationClient", "GetTenant", nil, "Failure preparing request")
		return
	}

	resp, err := client.GetTenantSender(req)
	if err != nil {
		result.Response = autorest.Response{Response: resp}
		err = autorest.NewErrorWithError(err, "adhybridhealthservice.ConfigurationClient", "GetTenant", resp, "Failure sending request")
		return
	}

	result, err = client.GetTenantResponder(resp)
	if err != nil {
		err = autorest.NewErrorWithError(err, "adhybridhealthservice.ConfigurationClient", "GetTenant", resp, "Failure responding to request")
	}

	return
}

// GetTenantPreparer prepares the GetTenant request.
func (client ConfigurationClient) GetTenantPreparer(ctx context.Context) (*http.Request, error) {
	const APIVersion = "2014-01-01"
	queryParameters := map[string]interface{}{
		"api-version": APIVersion,
	}

	preparer := autorest.CreatePreparer(
		autorest.AsGet(),
		autorest.WithBaseURL(client.BaseURI),
		autorest.WithPath("/providers/Microsoft.ADHybridHealthService/configuration"),
		autorest.WithQueryParameters(queryParameters))
	return preparer.Prepare((&http.Request{}).WithContext(ctx))
}

// GetTenantSender sends the GetTenant request. The method will close the
// http.Response Body if it receives an error.
func (client ConfigurationClient) GetTenantSender(req *http.Request) (*http.Response, error) {
	return autorest.SendWithSender(client, req,
		autorest.DoRetryForStatusCodes(client.RetryAttempts, client.RetryDuration, autorest.StatusCodesForRetry...))
}

// GetTenantResponder handles the response to the GetTenant request. The method always
// closes the http.Response Body.
func (client ConfigurationClient) GetTenantResponder(resp *http.Response) (result Tenant, err error) {
	err = autorest.Respond(
		resp,
		client.ByInspecting(),
		azure.WithErrorUnlessStatusCode(http.StatusOK, http.StatusBadRequest),
		autorest.ByUnmarshallingJSON(&result),
		autorest.ByClosing())
	result.Response = autorest.Response{Response: resp}
	return
}

// PatchTenant updates tenant properties for tenants onboarded to Azure Active Directory Connect Health.
// Parameters:
// tenant - the tenant object with the properties set to the updated value.
func (client ConfigurationClient) PatchTenant(ctx context.Context, tenant Tenant) (result Tenant, err error) {
	req, err := client.PatchTenantPreparer(ctx, tenant)
	if err != nil {
		err = autorest.NewErrorWithError(err, "adhybridhealthservice.ConfigurationClient", "PatchTenant", nil, "Failure preparing request")
		return
	}

	resp, err := client.PatchTenantSender(req)
	if err != nil {
		result.Response = autorest.Response{Response: resp}
		err = autorest.NewErrorWithError(err, "adhybridhealthservice.ConfigurationClient", "PatchTenant", resp, "Failure sending request")
		return
	}

	result, err = client.PatchTenantResponder(resp)
	if err != nil {
		err = autorest.NewErrorWithError(err, "adhybridhealthservice.ConfigurationClient", "PatchTenant", resp, "Failure responding to request")
	}

	return
}

// PatchTenantPreparer prepares the PatchTenant request.
func (client ConfigurationClient) PatchTenantPreparer(ctx context.Context, tenant Tenant) (*http.Request, error) {
	const APIVersion = "2014-01-01"
	queryParameters := map[string]interface{}{
		"api-version": APIVersion,
	}

	preparer := autorest.CreatePreparer(
		autorest.AsContentType("application/json; charset=utf-8"),
		autorest.AsPatch(),
		autorest.WithBaseURL(client.BaseURI),
		autorest.WithPath("/providers/Microsoft.ADHybridHealthService/configuration"),
		autorest.WithJSON(tenant),
		autorest.WithQueryParameters(queryParameters))
	return preparer.Prepare((&http.Request{}).WithContext(ctx))
}

// PatchTenantSender sends the PatchTenant request. The method will close the
// http.Response Body if it receives an error.
func (client ConfigurationClient) PatchTenantSender(req *http.Request) (*http.Response, error) {
	return autorest.SendWithSender(client, req,
		autorest.DoRetryForStatusCodes(client.RetryAttempts, client.RetryDuration, autorest.StatusCodesForRetry...))
}

// PatchTenantResponder handles the response to the PatchTenant request. The method always
// closes the http.Response Body.
func (client ConfigurationClient) PatchTenantResponder(resp *http.Response) (result Tenant, err error) {
	err = autorest.Respond(
		resp,
		client.ByInspecting(),
		azure.WithErrorUnlessStatusCode(http.StatusOK, http.StatusNotFound),
		autorest.ByUnmarshallingJSON(&result),
		autorest.ByClosing())
	result.Response = autorest.Response{Response: resp}
	return
}

// PostTenantConfiguration onboards a tenant in Azure Active Directory Connect Health.
func (client ConfigurationClient) PostTenantConfiguration(ctx context.Context) (result Tenant, err error) {
	req, err := client.PostTenantConfigurationPreparer(ctx)
	if err != nil {
		err = autorest.NewErrorWithError(err, "adhybridhealthservice.ConfigurationClient", "PostTenantConfiguration", nil, "Failure preparing request")
		return
	}

	resp, err := client.PostTenantConfigurationSender(req)
	if err != nil {
		result.Response = autorest.Response{Response: resp}
		err = autorest.NewErrorWithError(err, "adhybridhealthservice.ConfigurationClient", "PostTenantConfiguration", resp, "Failure sending request")
		return
	}

	result, err = client.PostTenantConfigurationResponder(resp)
	if err != nil {
		err = autorest.NewErrorWithError(err, "adhybridhealthservice.ConfigurationClient", "PostTenantConfiguration", resp, "Failure responding to request")
	}

	return
}

// PostTenantConfigurationPreparer prepares the PostTenantConfiguration request.
func (client ConfigurationClient) PostTenantConfigurationPreparer(ctx context.Context) (*http.Request, error) {
	const APIVersion = "2014-01-01"
	queryParameters := map[string]interface{}{
		"api-version": APIVersion,
	}

	preparer := autorest.CreatePreparer(
		autorest.AsPost(),
		autorest.WithBaseURL(client.BaseURI),
		autorest.WithPath("/providers/Microsoft.ADHybridHealthService/configuration"),
		autorest.WithQueryParameters(queryParameters))
	return preparer.Prepare((&http.Request{}).WithContext(ctx))
}

// PostTenantConfigurationSender sends the PostTenantConfiguration request. The method will close the
// http.Response Body if it receives an error.
func (client ConfigurationClient) PostTenantConfigurationSender(req *http.Request) (*http.Response, error) {
	return autorest.SendWithSender(client, req,
		autorest.DoRetryForStatusCodes(client.RetryAttempts, client.RetryDuration, autorest.StatusCodesForRetry...))
}

// PostTenantConfigurationResponder handles the response to the PostTenantConfiguration request. The method always
// closes the http.Response Body.
func (client ConfigurationClient) PostTenantConfigurationResponder(resp *http.Response) (result Tenant, err error) {
	err = autorest.Respond(
		resp,
		client.ByInspecting(),
		azure.WithErrorUnlessStatusCode(http.StatusOK, http.StatusForbidden),
		autorest.ByUnmarshallingJSON(&result),
		autorest.ByClosing())
	result.Response = autorest.Response{Response: resp}
	return
}
