package adhybridhealthservice

// Copyright (c) Microsoft and contributors.  All rights reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
// http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
//
// See the License for the specific language governing permissions and
// limitations under the License.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

import (
	"context"
	"github.com/Azure/go-autorest/autorest"
	"github.com/Azure/go-autorest/autorest/azure"
	"net/http"
)

// MetricsClient is the REST APIs for Azure Active Drectory Connect Health
type MetricsClient struct {
	BaseClient
}

// NewMetricsClient creates an instance of the MetricsClient client.
func NewMetricsClient() MetricsClient {
	return NewMetricsClientWithBaseURI(DefaultBaseURI)
}

// NewMetricsClientWithBaseURI creates an instance of the MetricsClient client.
func NewMetricsClientWithBaseURI(baseURI string) MetricsClient {
	return MetricsClient{NewWithBaseURI(baseURI)}
}

// GetAddsServiceMetricsAverage gets the average of the metric values for a given metric and group combination.
//
// serviceName is the name of the service. metricName is the metric name groupName is the group name
func (client MetricsClient) GetAddsServiceMetricsAverage(ctx context.Context, serviceName string, metricName string, groupName string) (result Items, err error) {
	req, err := client.GetAddsServiceMetricsAveragePreparer(ctx, serviceName, metricName, groupName)
	if err != nil {
		err = autorest.NewErrorWithError(err, "adhybridhealthservice.MetricsClient", "GetAddsServiceMetricsAverage", nil, "Failure preparing request")
		return
	}

	resp, err := client.GetAddsServiceMetricsAverageSender(req)
	if err != nil {
		result.Response = autorest.Response{Response: resp}
		err = autorest.NewErrorWithError(err, "adhybridhealthservice.MetricsClient", "GetAddsServiceMetricsAverage", resp, "Failure sending request")
		return
	}

	result, err = client.GetAddsServiceMetricsAverageResponder(resp)
	if err != nil {
		err = autorest.NewErrorWithError(err, "adhybridhealthservice.MetricsClient", "GetAddsServiceMetricsAverage", resp, "Failure responding to request")
	}

	return
}

// GetAddsServiceMetricsAveragePreparer prepares the GetAddsServiceMetricsAverage request.
func (client MetricsClient) GetAddsServiceMetricsAveragePreparer(ctx context.Context, serviceName string, metricName string, groupName string) (*http.Request, error) {
	pathParameters := map[string]interface{}{
		"groupName":   autorest.Encode("path", groupName),
		"metricName":  autorest.Encode("path", metricName),
		"serviceName": autorest.Encode("path", serviceName),
	}

	const APIVersion = "2014-01-01"
	queryParameters := map[string]interface{}{
		"api-version": APIVersion,
	}

	preparer := autorest.CreatePreparer(
		autorest.AsGet(),
		autorest.WithBaseURL(client.BaseURI),
		autorest.WithPathParameters("/providers/Microsoft.ADHybridHealthService/addsservices/{serviceName}/metrics/{metricName}/groups/{groupName}/average", pathParameters),
		autorest.WithQueryParameters(queryParameters))
	return preparer.Prepare((&http.Request{}).WithContext(ctx))
}

// GetAddsServiceMetricsAverageSender sends the GetAddsServiceMetricsAverage request. The method will close the
// http.Response Body if it receives an error.
func (client MetricsClient) GetAddsServiceMetricsAverageSender(req *http.Request) (*http.Response, error) {
	return autorest.SendWithSender(client, req,
		autorest.DoRetryForStatusCodes(client.RetryAttempts, client.RetryDuration, autorest.StatusCodesForRetry...))
}

// GetAddsServiceMetricsAverageResponder handles the response to the GetAddsServiceMetricsAverage request. The method always
// closes the http.Response Body.
func (client MetricsClient) GetAddsServiceMetricsAverageResponder(resp *http.Response) (result Items, err error) {
	err = autorest.Respond(
		resp,
		client.ByInspecting(),
		azure.WithErrorUnlessStatusCode(http.StatusOK),
		autorest.ByUnmarshallingJSON(&result),
		autorest.ByClosing())
	result.Response = autorest.Response{Response: resp}
	return
}
