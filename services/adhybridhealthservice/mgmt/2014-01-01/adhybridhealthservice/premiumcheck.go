package adhybridhealthservice

// Copyright (c) Microsoft and contributors.  All rights reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
// http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
//
// See the License for the specific language governing permissions and
// limitations under the License.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

import (
	"context"
	"github.com/Azure/go-autorest/autorest"
	"github.com/Azure/go-autorest/autorest/azure"
	"net/http"
)

// PremiumCheckClient is the REST APIs for Azure Active Drectory Connect Health
type PremiumCheckClient struct {
	BaseClient
}

// NewPremiumCheckClient creates an instance of the PremiumCheckClient client.
func NewPremiumCheckClient() PremiumCheckClient {
	return NewPremiumCheckClientWithBaseURI(DefaultBaseURI)
}

// NewPremiumCheckClientWithBaseURI creates an instance of the PremiumCheckClient client.
func NewPremiumCheckClientWithBaseURI(baseURI string) PremiumCheckClient {
	return PremiumCheckClient{NewWithBaseURI(baseURI)}
}

// GetServicesPremiumCheck gets the details of services for a tenant having Azure AD Premium license and is onboarded
// to Azure Active Directory Connect Health.
// Parameters:
// filter - the service property filter to apply.
// serviceType - the service type for the services onboarded to Azure Active Directory Connect Health.
// Depending on whether the service is monitoring, ADFS, Sync or ADDS roles, the service type can either be
// AdFederationService or AadSyncService or AdDomainService.
// skipCount - the skip count, which specifies the number of elements that can be bypassed from a sequence and
// then return the remaining elements.
// takeCount - the take count , which specifies the number of elements that can be returned from a sequence.
func (client PremiumCheckClient) GetServicesPremiumCheck(ctx context.Context, filter string, serviceType string, skipCount *int32, takeCount *int32) (result Services, err error) {
	req, err := client.GetServicesPremiumCheckPreparer(ctx, filter, serviceType, skipCount, takeCount)
	if err != nil {
		err = autorest.NewErrorWithError(err, "adhybridhealthservice.PremiumCheckClient", "GetServicesPremiumCheck", nil, "Failure preparing request")
		return
	}

	resp, err := client.GetServicesPremiumCheckSender(req)
	if err != nil {
		result.Response = autorest.Response{Response: resp}
		err = autorest.NewErrorWithError(err, "adhybridhealthservice.PremiumCheckClient", "GetServicesPremiumCheck", resp, "Failure sending request")
		return
	}

	result, err = client.GetServicesPremiumCheckResponder(resp)
	if err != nil {
		err = autorest.NewErrorWithError(err, "adhybridhealthservice.PremiumCheckClient", "GetServicesPremiumCheck", resp, "Failure responding to request")
	}

	return
}

// GetServicesPremiumCheckPreparer prepares the GetServicesPremiumCheck request.
func (client PremiumCheckClient) GetServicesPremiumCheckPreparer(ctx context.Context, filter string, serviceType string, skipCount *int32, takeCount *int32) (*http.Request, error) {
	const APIVersion = "2014-01-01"
	queryParameters := map[string]interface{}{
		"api-version": APIVersion,
	}
	if len(filter) > 0 {
		queryParameters["$filter"] = autorest.Encode("query", filter)
	}
	if len(serviceType) > 0 {
		queryParameters["serviceType"] = autorest.Encode("query", serviceType)
	}
	if skipCount != nil {
		queryParameters["skipCount"] = autorest.Encode("query", *skipCount)
	}
	if takeCount != nil {
		queryParameters["takeCount"] = autorest.Encode("query", *takeCount)
	}

	preparer := autorest.CreatePreparer(
		autorest.AsGet(),
		autorest.WithBaseURL(client.BaseURI),
		autorest.WithPath("/providers/Microsoft.ADHybridHealthService/services/premiumCheck"),
		autorest.WithQueryParameters(queryParameters))
	return preparer.Prepare((&http.Request{}).WithContext(ctx))
}

// GetServicesPremiumCheckSender sends the GetServicesPremiumCheck request. The method will close the
// http.Response Body if it receives an error.
func (client PremiumCheckClient) GetServicesPremiumCheckSender(req *http.Request) (*http.Response, error) {
	return autorest.SendWithSender(client, req,
		autorest.DoRetryForStatusCodes(client.RetryAttempts, client.RetryDuration, autorest.StatusCodesForRetry...))
}

// GetServicesPremiumCheckResponder handles the response to the GetServicesPremiumCheck request. The method always
// closes the http.Response Body.
func (client PremiumCheckClient) GetServicesPremiumCheckResponder(resp *http.Response) (result Services, err error) {
	err = autorest.Respond(
		resp,
		client.ByInspecting(),
		azure.WithErrorUnlessStatusCode(http.StatusOK),
		autorest.ByUnmarshallingJSON(&result),
		autorest.ByClosing())
	result.Response = autorest.Response{Response: resp}
	return
}
