package adhybridhealthservice

// Copyright (c) Microsoft and contributors.  All rights reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
// http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
//
// See the License for the specific language governing permissions and
// limitations under the License.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

import (
	"context"
	"github.com/Azure/go-autorest/autorest"
	"github.com/Azure/go-autorest/autorest/azure"
	"net/http"
)

// ReplicationsummaryClient is the REST APIs for Azure Active Drectory Connect Health
type ReplicationsummaryClient struct {
	BaseClient
}

// NewReplicationsummaryClient creates an instance of the ReplicationsummaryClient client.
func NewReplicationsummaryClient() ReplicationsummaryClient {
	return NewReplicationsummaryClientWithBaseURI(DefaultBaseURI)
}

// NewReplicationsummaryClientWithBaseURI creates an instance of the ReplicationsummaryClient client.
func NewReplicationsummaryClientWithBaseURI(baseURI string) ReplicationsummaryClient {
	return ReplicationsummaryClient{NewWithBaseURI(baseURI)}
}

// GetReplicationSummaryv2 gets complete domain controller list along with replication details for a given Active
// Directory Domain Service, that is onboarded to Azure Active Directory Connect Health.
// Parameters:
// serviceName - the name of the service.
// isGroupbySite - indicates if the result should be grouped by site or not.
// query - the custom query.
// nextPartitionKey - the next partition key to query for.
// filter - the server property filter to apply.
// nextRowKey - the next row key to query for.
// takeCount - the take count , which specifies the number of elements that can be returned from a sequence.
func (client ReplicationsummaryClient) GetReplicationSummaryv2(ctx context.Context, serviceName string, isGroupbySite bool, query string, nextPartitionKey string, filter string, nextRowKey string, takeCount *int32) (result ReplicationSummary, err error) {
	req, err := client.GetReplicationSummaryv2Preparer(ctx, serviceName, isGroupbySite, query, nextPartitionKey, filter, nextRowKey, takeCount)
	if err != nil {
		err = autorest.NewErrorWithError(err, "adhybridhealthservice.ReplicationsummaryClient", "GetReplicationSummaryv2", nil, "Failure preparing request")
		return
	}

	resp, err := client.GetReplicationSummaryv2Sender(req)
	if err != nil {
		result.Response = autorest.Response{Response: resp}
		err = autorest.NewErrorWithError(err, "adhybridhealthservice.ReplicationsummaryClient", "GetReplicationSummaryv2", resp, "Failure sending request")
		return
	}

	result, err = client.GetReplicationSummaryv2Responder(resp)
	if err != nil {
		err = autorest.NewErrorWithError(err, "adhybridhealthservice.ReplicationsummaryClient", "GetReplicationSummaryv2", resp, "Failure responding to request")
	}

	return
}

// GetReplicationSummaryv2Preparer prepares the GetReplicationSummaryv2 request.
func (client ReplicationsummaryClient) GetReplicationSummaryv2Preparer(ctx context.Context, serviceName string, isGroupbySite bool, query string, nextPartitionKey string, filter string, nextRowKey string, takeCount *int32) (*http.Request, error) {
	pathParameters := map[string]interface{}{
		"serviceName": autorest.Encode("path", serviceName),
	}

	const APIVersion = "2014-01-01"
	queryParameters := map[string]interface{}{
		"api-version":      APIVersion,
		"isGroupbySite":    autorest.Encode("query", isGroupbySite),
		"nextPartitionKey": autorest.Encode("query", nextPartitionKey),
		"query":            autorest.Encode("query", query),
	}
	if len(filter) > 0 {
		queryParameters["$filter"] = autorest.Encode("query", filter)
	}
	if len(nextRowKey) > 0 {
		queryParameters["nextRowKey"] = autorest.Encode("query", nextRowKey)
	}
	if takeCount != nil {
		queryParameters["takeCount"] = autorest.Encode("query", *takeCount)
	}

	preparer := autorest.CreatePreparer(
		autorest.AsGet(),
		autorest.WithBaseURL(client.BaseURI),
		autorest.WithPathParameters("/providers/Microsoft.ADHybridHealthService/addsservices/{serviceName}/replicationsummary", pathParameters),
		autorest.WithQueryParameters(queryParameters))
	return preparer.Prepare((&http.Request{}).WithContext(ctx))
}

// GetReplicationSummaryv2Sender sends the GetReplicationSummaryv2 request. The method will close the
// http.Response Body if it receives an error.
func (client ReplicationsummaryClient) GetReplicationSummaryv2Sender(req *http.Request) (*http.Response, error) {
	return autorest.SendWithSender(client, req,
		autorest.DoRetryForStatusCodes(client.RetryAttempts, client.RetryDuration, autorest.StatusCodesForRetry...))
}

// GetReplicationSummaryv2Responder handles the response to the GetReplicationSummaryv2 request. The method always
// closes the http.Response Body.
func (client ReplicationsummaryClient) GetReplicationSummaryv2Responder(resp *http.Response) (result ReplicationSummary, err error) {
	err = autorest.Respond(
		resp,
		client.ByInspecting(),
		azure.WithErrorUnlessStatusCode(http.StatusOK),
		autorest.ByUnmarshallingJSON(&result),
		autorest.ByClosing())
	result.Response = autorest.Response{Response: resp}
	return
}
