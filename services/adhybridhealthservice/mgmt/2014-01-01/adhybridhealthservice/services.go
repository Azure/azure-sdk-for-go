package adhybridhealthservice

// Copyright (c) Microsoft and contributors.  All rights reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
// http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
//
// See the License for the specific language governing permissions and
// limitations under the License.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

import (
	"context"
	"github.com/Azure/go-autorest/autorest"
	"github.com/Azure/go-autorest/autorest/azure"
	"github.com/Azure/go-autorest/autorest/date"
	"github.com/satori/go.uuid"
	"net/http"
)

// ServicesClient is the REST APIs for Azure Active Drectory Connect Health
type ServicesClient struct {
	BaseClient
}

// NewServicesClient creates an instance of the ServicesClient client.
func NewServicesClient() ServicesClient {
	return NewServicesClientWithBaseURI(DefaultBaseURI)
}

// NewServicesClientWithBaseURI creates an instance of the ServicesClient client.
func NewServicesClientWithBaseURI(baseURI string) ServicesClient {
	return ServicesClient{NewWithBaseURI(baseURI)}
}

// AddServiceMembers onboards  a server, for a given service, to Azure Active Directory Connect Health Service.
//
// serviceName is the name of the service under which the server is to be onboarded. serviceMember is the server
// object.
func (client ServicesClient) AddServiceMembers(ctx context.Context, serviceName string, serviceMember ServiceMember) (result ServiceMember, err error) {
	req, err := client.AddServiceMembersPreparer(ctx, serviceName, serviceMember)
	if err != nil {
		err = autorest.NewErrorWithError(err, "adhybridhealthservice.ServicesClient", "AddServiceMembers", nil, "Failure preparing request")
		return
	}

	resp, err := client.AddServiceMembersSender(req)
	if err != nil {
		result.Response = autorest.Response{Response: resp}
		err = autorest.NewErrorWithError(err, "adhybridhealthservice.ServicesClient", "AddServiceMembers", resp, "Failure sending request")
		return
	}

	result, err = client.AddServiceMembersResponder(resp)
	if err != nil {
		err = autorest.NewErrorWithError(err, "adhybridhealthservice.ServicesClient", "AddServiceMembers", resp, "Failure responding to request")
	}

	return
}

// AddServiceMembersPreparer prepares the AddServiceMembers request.
func (client ServicesClient) AddServiceMembersPreparer(ctx context.Context, serviceName string, serviceMember ServiceMember) (*http.Request, error) {
	pathParameters := map[string]interface{}{
		"serviceName": autorest.Encode("path", serviceName),
	}

	const APIVersion = "2014-01-01"
	queryParameters := map[string]interface{}{
		"api-version": APIVersion,
	}

	preparer := autorest.CreatePreparer(
		autorest.AsContentType("application/json; charset=utf-8"),
		autorest.AsPost(),
		autorest.WithBaseURL(client.BaseURI),
		autorest.WithPathParameters("/providers/Microsoft.ADHybridHealthService/services/{serviceName}/servicemembers", pathParameters),
		autorest.WithJSON(serviceMember),
		autorest.WithQueryParameters(queryParameters))
	return preparer.Prepare((&http.Request{}).WithContext(ctx))
}

// AddServiceMembersSender sends the AddServiceMembers request. The method will close the
// http.Response Body if it receives an error.
func (client ServicesClient) AddServiceMembersSender(req *http.Request) (*http.Response, error) {
	return autorest.SendWithSender(client, req,
		autorest.DoRetryForStatusCodes(client.RetryAttempts, client.RetryDuration, autorest.StatusCodesForRetry...))
}

// AddServiceMembersResponder handles the response to the AddServiceMembers request. The method always
// closes the http.Response Body.
func (client ServicesClient) AddServiceMembersResponder(resp *http.Response) (result ServiceMember, err error) {
	err = autorest.Respond(
		resp,
		client.ByInspecting(),
		azure.WithErrorUnlessStatusCode(http.StatusOK),
		autorest.ByUnmarshallingJSON(&result),
		autorest.ByClosing())
	result.Response = autorest.Response{Response: resp}
	return
}

// CheckServiceFeatureAvailibility checks if the service has all the pre-requisites met to use a feature.
//
// serviceName is the name of the service. featureName is the name of the feature.
func (client ServicesClient) CheckServiceFeatureAvailibility(ctx context.Context, serviceName string, featureName string) (result Bool, err error) {
	req, err := client.CheckServiceFeatureAvailibilityPreparer(ctx, serviceName, featureName)
	if err != nil {
		err = autorest.NewErrorWithError(err, "adhybridhealthservice.ServicesClient", "CheckServiceFeatureAvailibility", nil, "Failure preparing request")
		return
	}

	resp, err := client.CheckServiceFeatureAvailibilitySender(req)
	if err != nil {
		result.Response = autorest.Response{Response: resp}
		err = autorest.NewErrorWithError(err, "adhybridhealthservice.ServicesClient", "CheckServiceFeatureAvailibility", resp, "Failure sending request")
		return
	}

	result, err = client.CheckServiceFeatureAvailibilityResponder(resp)
	if err != nil {
		err = autorest.NewErrorWithError(err, "adhybridhealthservice.ServicesClient", "CheckServiceFeatureAvailibility", resp, "Failure responding to request")
	}

	return
}

// CheckServiceFeatureAvailibilityPreparer prepares the CheckServiceFeatureAvailibility request.
func (client ServicesClient) CheckServiceFeatureAvailibilityPreparer(ctx context.Context, serviceName string, featureName string) (*http.Request, error) {
	pathParameters := map[string]interface{}{
		"featureName": autorest.Encode("path", featureName),
		"serviceName": autorest.Encode("path", serviceName),
	}

	const APIVersion = "2014-01-01"
	queryParameters := map[string]interface{}{
		"api-version": APIVersion,
	}

	preparer := autorest.CreatePreparer(
		autorest.AsGet(),
		autorest.WithBaseURL(client.BaseURI),
		autorest.WithPathParameters("/providers/Microsoft.ADHybridHealthService/services/{serviceName}/checkServiceFeatureAvailibility/{featureName}", pathParameters),
		autorest.WithQueryParameters(queryParameters))
	return preparer.Prepare((&http.Request{}).WithContext(ctx))
}

// CheckServiceFeatureAvailibilitySender sends the CheckServiceFeatureAvailibility request. The method will close the
// http.Response Body if it receives an error.
func (client ServicesClient) CheckServiceFeatureAvailibilitySender(req *http.Request) (*http.Response, error) {
	return autorest.SendWithSender(client, req,
		autorest.DoRetryForStatusCodes(client.RetryAttempts, client.RetryDuration, autorest.StatusCodesForRetry...))
}

// CheckServiceFeatureAvailibilityResponder handles the response to the CheckServiceFeatureAvailibility request. The method always
// closes the http.Response Body.
func (client ServicesClient) CheckServiceFeatureAvailibilityResponder(resp *http.Response) (result Bool, err error) {
	err = autorest.Respond(
		resp,
		client.ByInspecting(),
		azure.WithErrorUnlessStatusCode(http.StatusOK),
		autorest.ByUnmarshallingJSON(&result.Value),
		autorest.ByClosing())
	result.Response = autorest.Response{Response: resp}
	return
}

// CheckTenantWhitelistingForFeature checks if the tenant, to which a service is registered, is whitelisted to use a
// feature.
//
// serviceName is the name of the service. featureName is the name of the feature.
func (client ServicesClient) CheckTenantWhitelistingForFeature(ctx context.Context, serviceName string, featureName string) (result Bool, err error) {
	req, err := client.CheckTenantWhitelistingForFeaturePreparer(ctx, serviceName, featureName)
	if err != nil {
		err = autorest.NewErrorWithError(err, "adhybridhealthservice.ServicesClient", "CheckTenantWhitelistingForFeature", nil, "Failure preparing request")
		return
	}

	resp, err := client.CheckTenantWhitelistingForFeatureSender(req)
	if err != nil {
		result.Response = autorest.Response{Response: resp}
		err = autorest.NewErrorWithError(err, "adhybridhealthservice.ServicesClient", "CheckTenantWhitelistingForFeature", resp, "Failure sending request")
		return
	}

	result, err = client.CheckTenantWhitelistingForFeatureResponder(resp)
	if err != nil {
		err = autorest.NewErrorWithError(err, "adhybridhealthservice.ServicesClient", "CheckTenantWhitelistingForFeature", resp, "Failure responding to request")
	}

	return
}

// CheckTenantWhitelistingForFeaturePreparer prepares the CheckTenantWhitelistingForFeature request.
func (client ServicesClient) CheckTenantWhitelistingForFeaturePreparer(ctx context.Context, serviceName string, featureName string) (*http.Request, error) {
	pathParameters := map[string]interface{}{
		"featureName": autorest.Encode("path", featureName),
		"serviceName": autorest.Encode("path", serviceName),
	}

	const APIVersion = "2014-01-01"
	queryParameters := map[string]interface{}{
		"api-version": APIVersion,
	}

	preparer := autorest.CreatePreparer(
		autorest.AsGet(),
		autorest.WithBaseURL(client.BaseURI),
		autorest.WithPathParameters("/providers/Microsoft.ADHybridHealthService/services/{serviceName}/TenantWhitelisting/{featureName}", pathParameters),
		autorest.WithQueryParameters(queryParameters))
	return preparer.Prepare((&http.Request{}).WithContext(ctx))
}

// CheckTenantWhitelistingForFeatureSender sends the CheckTenantWhitelistingForFeature request. The method will close the
// http.Response Body if it receives an error.
func (client ServicesClient) CheckTenantWhitelistingForFeatureSender(req *http.Request) (*http.Response, error) {
	return autorest.SendWithSender(client, req,
		autorest.DoRetryForStatusCodes(client.RetryAttempts, client.RetryDuration, autorest.StatusCodesForRetry...))
}

// CheckTenantWhitelistingForFeatureResponder handles the response to the CheckTenantWhitelistingForFeature request. The method always
// closes the http.Response Body.
func (client ServicesClient) CheckTenantWhitelistingForFeatureResponder(resp *http.Response) (result Bool, err error) {
	err = autorest.Respond(
		resp,
		client.ByInspecting(),
		azure.WithErrorUnlessStatusCode(http.StatusOK),
		autorest.ByUnmarshallingJSON(&result.Value),
		autorest.ByClosing())
	result.Response = autorest.Response{Response: resp}
	return
}

// DeleteService deletes a service which is onboarded to Azure Active Directory Connect Health.
//
// serviceName is the name of the service which needs to be deleted. confirm is indicates if the service will be
// permanently deleted or disabled. True indicates that the service will be permanently deleted and False indicates
// that the service will be marked disabled and then deleted after 30 days, if it is not re-registered.
func (client ServicesClient) DeleteService(ctx context.Context, serviceName string, confirm *bool) (result autorest.Response, err error) {
	req, err := client.DeleteServicePreparer(ctx, serviceName, confirm)
	if err != nil {
		err = autorest.NewErrorWithError(err, "adhybridhealthservice.ServicesClient", "DeleteService", nil, "Failure preparing request")
		return
	}

	resp, err := client.DeleteServiceSender(req)
	if err != nil {
		result.Response = resp
		err = autorest.NewErrorWithError(err, "adhybridhealthservice.ServicesClient", "DeleteService", resp, "Failure sending request")
		return
	}

	result, err = client.DeleteServiceResponder(resp)
	if err != nil {
		err = autorest.NewErrorWithError(err, "adhybridhealthservice.ServicesClient", "DeleteService", resp, "Failure responding to request")
	}

	return
}

// DeleteServicePreparer prepares the DeleteService request.
func (client ServicesClient) DeleteServicePreparer(ctx context.Context, serviceName string, confirm *bool) (*http.Request, error) {
	pathParameters := map[string]interface{}{
		"serviceName": autorest.Encode("path", serviceName),
	}

	const APIVersion = "2014-01-01"
	queryParameters := map[string]interface{}{
		"api-version": APIVersion,
	}
	if confirm != nil {
		queryParameters["confirm"] = autorest.Encode("query", *confirm)
	}

	preparer := autorest.CreatePreparer(
		autorest.AsDelete(),
		autorest.WithBaseURL(client.BaseURI),
		autorest.WithPathParameters("/providers/Microsoft.ADHybridHealthService/services/{serviceName}", pathParameters),
		autorest.WithQueryParameters(queryParameters))
	return preparer.Prepare((&http.Request{}).WithContext(ctx))
}

// DeleteServiceSender sends the DeleteService request. The method will close the
// http.Response Body if it receives an error.
func (client ServicesClient) DeleteServiceSender(req *http.Request) (*http.Response, error) {
	return autorest.SendWithSender(client, req,
		autorest.DoRetryForStatusCodes(client.RetryAttempts, client.RetryDuration, autorest.StatusCodesForRetry...))
}

// DeleteServiceResponder handles the response to the DeleteService request. The method always
// closes the http.Response Body.
func (client ServicesClient) DeleteServiceResponder(resp *http.Response) (result autorest.Response, err error) {
	err = autorest.Respond(
		resp,
		client.ByInspecting(),
		azure.WithErrorUnlessStatusCode(http.StatusOK, http.StatusNoContent),
		autorest.ByClosing())
	result.Response = resp
	return
}

// DeleteServiceMember deletes a server that has been onboarded to Azure Active Directory Connect Health Service.
//
// serviceName is the name of the service. serviceMemberID is the server Id. confirm is indicates if the server
// will be permanently deleted or disabled. True indicates that the server will be permanently deleted and False
// indicates that the server will be marked disabled and then deleted after 30 days, if it is not re-registered.
func (client ServicesClient) DeleteServiceMember(ctx context.Context, serviceName string, serviceMemberID uuid.UUID, confirm *bool) (result autorest.Response, err error) {
	req, err := client.DeleteServiceMemberPreparer(ctx, serviceName, serviceMemberID, confirm)
	if err != nil {
		err = autorest.NewErrorWithError(err, "adhybridhealthservice.ServicesClient", "DeleteServiceMember", nil, "Failure preparing request")
		return
	}

	resp, err := client.DeleteServiceMemberSender(req)
	if err != nil {
		result.Response = resp
		err = autorest.NewErrorWithError(err, "adhybridhealthservice.ServicesClient", "DeleteServiceMember", resp, "Failure sending request")
		return
	}

	result, err = client.DeleteServiceMemberResponder(resp)
	if err != nil {
		err = autorest.NewErrorWithError(err, "adhybridhealthservice.ServicesClient", "DeleteServiceMember", resp, "Failure responding to request")
	}

	return
}

// DeleteServiceMemberPreparer prepares the DeleteServiceMember request.
func (client ServicesClient) DeleteServiceMemberPreparer(ctx context.Context, serviceName string, serviceMemberID uuid.UUID, confirm *bool) (*http.Request, error) {
	pathParameters := map[string]interface{}{
		"serviceMemberId": autorest.Encode("path", serviceMemberID),
		"serviceName":     autorest.Encode("path", serviceName),
	}

	const APIVersion = "2014-01-01"
	queryParameters := map[string]interface{}{
		"api-version": APIVersion,
	}
	if confirm != nil {
		queryParameters["confirm"] = autorest.Encode("query", *confirm)
	}

	preparer := autorest.CreatePreparer(
		autorest.AsDelete(),
		autorest.WithBaseURL(client.BaseURI),
		autorest.WithPathParameters("/providers/Microsoft.ADHybridHealthService/services/{serviceName}/servicemembers/{serviceMemberId}", pathParameters),
		autorest.WithQueryParameters(queryParameters))
	return preparer.Prepare((&http.Request{}).WithContext(ctx))
}

// DeleteServiceMemberSender sends the DeleteServiceMember request. The method will close the
// http.Response Body if it receives an error.
func (client ServicesClient) DeleteServiceMemberSender(req *http.Request) (*http.Response, error) {
	return autorest.SendWithSender(client, req,
		autorest.DoRetryForStatusCodes(client.RetryAttempts, client.RetryDuration, autorest.StatusCodesForRetry...))
}

// DeleteServiceMemberResponder handles the response to the DeleteServiceMember request. The method always
// closes the http.Response Body.
func (client ServicesClient) DeleteServiceMemberResponder(resp *http.Response) (result autorest.Response, err error) {
	err = autorest.Respond(
		resp,
		client.ByInspecting(),
		azure.WithErrorUnlessStatusCode(http.StatusOK, http.StatusNoContent),
		autorest.ByClosing())
	result.Response = resp
	return
}

// DeleteServiceMemberData deletes the data uploaded by the server to Azure Active Directory Connect Health Service.
//
// serviceName is the name of the service. serviceMemberID is the server Id.
func (client ServicesClient) DeleteServiceMemberData(ctx context.Context, serviceName string, serviceMemberID uuid.UUID) (result autorest.Response, err error) {
	req, err := client.DeleteServiceMemberDataPreparer(ctx, serviceName, serviceMemberID)
	if err != nil {
		err = autorest.NewErrorWithError(err, "adhybridhealthservice.ServicesClient", "DeleteServiceMemberData", nil, "Failure preparing request")
		return
	}

	resp, err := client.DeleteServiceMemberDataSender(req)
	if err != nil {
		result.Response = resp
		err = autorest.NewErrorWithError(err, "adhybridhealthservice.ServicesClient", "DeleteServiceMemberData", resp, "Failure sending request")
		return
	}

	result, err = client.DeleteServiceMemberDataResponder(resp)
	if err != nil {
		err = autorest.NewErrorWithError(err, "adhybridhealthservice.ServicesClient", "DeleteServiceMemberData", resp, "Failure responding to request")
	}

	return
}

// DeleteServiceMemberDataPreparer prepares the DeleteServiceMemberData request.
func (client ServicesClient) DeleteServiceMemberDataPreparer(ctx context.Context, serviceName string, serviceMemberID uuid.UUID) (*http.Request, error) {
	pathParameters := map[string]interface{}{
		"serviceMemberId": autorest.Encode("path", serviceMemberID),
		"serviceName":     autorest.Encode("path", serviceName),
	}

	const APIVersion = "2014-01-01"
	queryParameters := map[string]interface{}{
		"api-version": APIVersion,
	}

	preparer := autorest.CreatePreparer(
		autorest.AsDelete(),
		autorest.WithBaseURL(client.BaseURI),
		autorest.WithPathParameters("/providers/Microsoft.ADHybridHealthService/services/{serviceName}/servicemembers/{serviceMemberId}/data", pathParameters),
		autorest.WithQueryParameters(queryParameters))
	return preparer.Prepare((&http.Request{}).WithContext(ctx))
}

// DeleteServiceMemberDataSender sends the DeleteServiceMemberData request. The method will close the
// http.Response Body if it receives an error.
func (client ServicesClient) DeleteServiceMemberDataSender(req *http.Request) (*http.Response, error) {
	return autorest.SendWithSender(client, req,
		autorest.DoRetryForStatusCodes(client.RetryAttempts, client.RetryDuration, autorest.StatusCodesForRetry...))
}

// DeleteServiceMemberDataResponder handles the response to the DeleteServiceMemberData request. The method always
// closes the http.Response Body.
func (client ServicesClient) DeleteServiceMemberDataResponder(resp *http.Response) (result autorest.Response, err error) {
	err = autorest.Respond(
		resp,
		client.ByInspecting(),
		azure.WithErrorUnlessStatusCode(http.StatusOK),
		autorest.ByClosing())
	result.Response = resp
	return
}

// GetConnectors gets the connector details for a service.
//
// serviceName is the name of the service. serviceMemberID is the server Id.
func (client ServicesClient) GetConnectors(ctx context.Context, serviceName string, serviceMemberID uuid.UUID) (result Connectors, err error) {
	req, err := client.GetConnectorsPreparer(ctx, serviceName, serviceMemberID)
	if err != nil {
		err = autorest.NewErrorWithError(err, "adhybridhealthservice.ServicesClient", "GetConnectors", nil, "Failure preparing request")
		return
	}

	resp, err := client.GetConnectorsSender(req)
	if err != nil {
		result.Response = autorest.Response{Response: resp}
		err = autorest.NewErrorWithError(err, "adhybridhealthservice.ServicesClient", "GetConnectors", resp, "Failure sending request")
		return
	}

	result, err = client.GetConnectorsResponder(resp)
	if err != nil {
		err = autorest.NewErrorWithError(err, "adhybridhealthservice.ServicesClient", "GetConnectors", resp, "Failure responding to request")
	}

	return
}

// GetConnectorsPreparer prepares the GetConnectors request.
func (client ServicesClient) GetConnectorsPreparer(ctx context.Context, serviceName string, serviceMemberID uuid.UUID) (*http.Request, error) {
	pathParameters := map[string]interface{}{
		"serviceMemberId": autorest.Encode("path", serviceMemberID),
		"serviceName":     autorest.Encode("path", serviceName),
	}

	const APIVersion = "2014-01-01"
	queryParameters := map[string]interface{}{
		"api-version": APIVersion,
	}

	preparer := autorest.CreatePreparer(
		autorest.AsGet(),
		autorest.WithBaseURL(client.BaseURI),
		autorest.WithPathParameters("/providers/Microsoft.ADHybridHealthService/service/{serviceName}/servicemembers/{serviceMemberId}/connectors", pathParameters),
		autorest.WithQueryParameters(queryParameters))
	return preparer.Prepare((&http.Request{}).WithContext(ctx))
}

// GetConnectorsSender sends the GetConnectors request. The method will close the
// http.Response Body if it receives an error.
func (client ServicesClient) GetConnectorsSender(req *http.Request) (*http.Response, error) {
	return autorest.SendWithSender(client, req,
		autorest.DoRetryForStatusCodes(client.RetryAttempts, client.RetryDuration, autorest.StatusCodesForRetry...))
}

// GetConnectorsResponder handles the response to the GetConnectors request. The method always
// closes the http.Response Body.
func (client ServicesClient) GetConnectorsResponder(resp *http.Response) (result Connectors, err error) {
	err = autorest.Respond(
		resp,
		client.ByInspecting(),
		azure.WithErrorUnlessStatusCode(http.StatusOK),
		autorest.ByUnmarshallingJSON(&result),
		autorest.ByClosing())
	result.Response = autorest.Response{Response: resp}
	return
}

// GetExportStatus gets the export status.
//
// serviceName is the name of the service.
func (client ServicesClient) GetExportStatus(ctx context.Context, serviceName string) (result ExportStatuses, err error) {
	req, err := client.GetExportStatusPreparer(ctx, serviceName)
	if err != nil {
		err = autorest.NewErrorWithError(err, "adhybridhealthservice.ServicesClient", "GetExportStatus", nil, "Failure preparing request")
		return
	}

	resp, err := client.GetExportStatusSender(req)
	if err != nil {
		result.Response = autorest.Response{Response: resp}
		err = autorest.NewErrorWithError(err, "adhybridhealthservice.ServicesClient", "GetExportStatus", resp, "Failure sending request")
		return
	}

	result, err = client.GetExportStatusResponder(resp)
	if err != nil {
		err = autorest.NewErrorWithError(err, "adhybridhealthservice.ServicesClient", "GetExportStatus", resp, "Failure responding to request")
	}

	return
}

// GetExportStatusPreparer prepares the GetExportStatus request.
func (client ServicesClient) GetExportStatusPreparer(ctx context.Context, serviceName string) (*http.Request, error) {
	pathParameters := map[string]interface{}{
		"serviceName": autorest.Encode("path", serviceName),
	}

	const APIVersion = "2014-01-01"
	queryParameters := map[string]interface{}{
		"api-version": APIVersion,
	}

	preparer := autorest.CreatePreparer(
		autorest.AsGet(),
		autorest.WithBaseURL(client.BaseURI),
		autorest.WithPathParameters("/providers/Microsoft.ADHybridHealthService/services/{serviceName}/exportstatus", pathParameters),
		autorest.WithQueryParameters(queryParameters))
	return preparer.Prepare((&http.Request{}).WithContext(ctx))
}

// GetExportStatusSender sends the GetExportStatus request. The method will close the
// http.Response Body if it receives an error.
func (client ServicesClient) GetExportStatusSender(req *http.Request) (*http.Response, error) {
	return autorest.SendWithSender(client, req,
		autorest.DoRetryForStatusCodes(client.RetryAttempts, client.RetryDuration, autorest.StatusCodesForRetry...))
}

// GetExportStatusResponder handles the response to the GetExportStatus request. The method always
// closes the http.Response Body.
func (client ServicesClient) GetExportStatusResponder(resp *http.Response) (result ExportStatuses, err error) {
	err = autorest.Respond(
		resp,
		client.ByInspecting(),
		azure.WithErrorUnlessStatusCode(http.StatusOK),
		autorest.ByUnmarshallingJSON(&result),
		autorest.ByClosing())
	result.Response = autorest.Response{Response: resp}
	return
}

// GetGlobalConfiguration gets the global configuration.
//
// serviceName is the name of the service. serviceMemberID is the server id.
func (client ServicesClient) GetGlobalConfiguration(ctx context.Context, serviceName string, serviceMemberID string) (result GlobalConfiguration, err error) {
	req, err := client.GetGlobalConfigurationPreparer(ctx, serviceName, serviceMemberID)
	if err != nil {
		err = autorest.NewErrorWithError(err, "adhybridhealthservice.ServicesClient", "GetGlobalConfiguration", nil, "Failure preparing request")
		return
	}

	resp, err := client.GetGlobalConfigurationSender(req)
	if err != nil {
		result.Response = autorest.Response{Response: resp}
		err = autorest.NewErrorWithError(err, "adhybridhealthservice.ServicesClient", "GetGlobalConfiguration", resp, "Failure sending request")
		return
	}

	result, err = client.GetGlobalConfigurationResponder(resp)
	if err != nil {
		err = autorest.NewErrorWithError(err, "adhybridhealthservice.ServicesClient", "GetGlobalConfiguration", resp, "Failure responding to request")
	}

	return
}

// GetGlobalConfigurationPreparer prepares the GetGlobalConfiguration request.
func (client ServicesClient) GetGlobalConfigurationPreparer(ctx context.Context, serviceName string, serviceMemberID string) (*http.Request, error) {
	pathParameters := map[string]interface{}{
		"serviceMemberId": autorest.Encode("path", serviceMemberID),
		"serviceName":     autorest.Encode("path", serviceName),
	}

	const APIVersion = "2014-01-01"
	queryParameters := map[string]interface{}{
		"api-version": APIVersion,
	}

	preparer := autorest.CreatePreparer(
		autorest.AsGet(),
		autorest.WithBaseURL(client.BaseURI),
		autorest.WithPathParameters("/providers/Microsoft.ADHybridHealthService/services/{serviceName}/servicemembers/{serviceMemberId}/globalconfiguration", pathParameters),
		autorest.WithQueryParameters(queryParameters))
	return preparer.Prepare((&http.Request{}).WithContext(ctx))
}

// GetGlobalConfigurationSender sends the GetGlobalConfiguration request. The method will close the
// http.Response Body if it receives an error.
func (client ServicesClient) GetGlobalConfigurationSender(req *http.Request) (*http.Response, error) {
	return autorest.SendWithSender(client, req,
		autorest.DoRetryForStatusCodes(client.RetryAttempts, client.RetryDuration, autorest.StatusCodesForRetry...))
}

// GetGlobalConfigurationResponder handles the response to the GetGlobalConfiguration request. The method always
// closes the http.Response Body.
func (client ServicesClient) GetGlobalConfigurationResponder(resp *http.Response) (result GlobalConfiguration, err error) {
	err = autorest.Respond(
		resp,
		client.ByInspecting(),
		azure.WithErrorUnlessStatusCode(http.StatusOK),
		autorest.ByUnmarshallingJSON(&result),
		autorest.ByClosing())
	result.Response = autorest.Response{Response: resp}
	return
}

// GetLatestAadExportErrorCount gets the count of latest AAD export errors.
//
// serviceName is the name of the service.
func (client ServicesClient) GetLatestAadExportErrorCount(ctx context.Context, serviceName string) (result ErrorCounts, err error) {
	req, err := client.GetLatestAadExportErrorCountPreparer(ctx, serviceName)
	if err != nil {
		err = autorest.NewErrorWithError(err, "adhybridhealthservice.ServicesClient", "GetLatestAadExportErrorCount", nil, "Failure preparing request")
		return
	}

	resp, err := client.GetLatestAadExportErrorCountSender(req)
	if err != nil {
		result.Response = autorest.Response{Response: resp}
		err = autorest.NewErrorWithError(err, "adhybridhealthservice.ServicesClient", "GetLatestAadExportErrorCount", resp, "Failure sending request")
		return
	}

	result, err = client.GetLatestAadExportErrorCountResponder(resp)
	if err != nil {
		err = autorest.NewErrorWithError(err, "adhybridhealthservice.ServicesClient", "GetLatestAadExportErrorCount", resp, "Failure responding to request")
	}

	return
}

// GetLatestAadExportErrorCountPreparer prepares the GetLatestAadExportErrorCount request.
func (client ServicesClient) GetLatestAadExportErrorCountPreparer(ctx context.Context, serviceName string) (*http.Request, error) {
	pathParameters := map[string]interface{}{
		"serviceName": autorest.Encode("path", serviceName),
	}

	const APIVersion = "2014-01-01"
	queryParameters := map[string]interface{}{
		"api-version": APIVersion,
	}

	preparer := autorest.CreatePreparer(
		autorest.AsGet(),
		autorest.WithBaseURL(client.BaseURI),
		autorest.WithPathParameters("/providers/Microsoft.ADHybridHealthService/services/{serviceName}/exporterrors/counts", pathParameters),
		autorest.WithQueryParameters(queryParameters))
	return preparer.Prepare((&http.Request{}).WithContext(ctx))
}

// GetLatestAadExportErrorCountSender sends the GetLatestAadExportErrorCount request. The method will close the
// http.Response Body if it receives an error.
func (client ServicesClient) GetLatestAadExportErrorCountSender(req *http.Request) (*http.Response, error) {
	return autorest.SendWithSender(client, req,
		autorest.DoRetryForStatusCodes(client.RetryAttempts, client.RetryDuration, autorest.StatusCodesForRetry...))
}

// GetLatestAadExportErrorCountResponder handles the response to the GetLatestAadExportErrorCount request. The method always
// closes the http.Response Body.
func (client ServicesClient) GetLatestAadExportErrorCountResponder(resp *http.Response) (result ErrorCounts, err error) {
	err = autorest.Respond(
		resp,
		client.ByInspecting(),
		azure.WithErrorUnlessStatusCode(http.StatusOK),
		autorest.ByUnmarshallingJSON(&result),
		autorest.ByClosing())
	result.Response = autorest.Response{Response: resp}
	return
}

// GetLatestAadExportErrorsV2 gets the categorized export errors.
//
// serviceName is the name of the service. errorBucket is the error category to query for. nextLink is the next
// link to get next step of data.
func (client ServicesClient) GetLatestAadExportErrorsV2(ctx context.Context, serviceName string, errorBucket string, nextLink string) (result MergedExportErrors, err error) {
	req, err := client.GetLatestAadExportErrorsV2Preparer(ctx, serviceName, errorBucket, nextLink)
	if err != nil {
		err = autorest.NewErrorWithError(err, "adhybridhealthservice.ServicesClient", "GetLatestAadExportErrorsV2", nil, "Failure preparing request")
		return
	}

	resp, err := client.GetLatestAadExportErrorsV2Sender(req)
	if err != nil {
		result.Response = autorest.Response{Response: resp}
		err = autorest.NewErrorWithError(err, "adhybridhealthservice.ServicesClient", "GetLatestAadExportErrorsV2", resp, "Failure sending request")
		return
	}

	result, err = client.GetLatestAadExportErrorsV2Responder(resp)
	if err != nil {
		err = autorest.NewErrorWithError(err, "adhybridhealthservice.ServicesClient", "GetLatestAadExportErrorsV2", resp, "Failure responding to request")
	}

	return
}

// GetLatestAadExportErrorsV2Preparer prepares the GetLatestAadExportErrorsV2 request.
func (client ServicesClient) GetLatestAadExportErrorsV2Preparer(ctx context.Context, serviceName string, errorBucket string, nextLink string) (*http.Request, error) {
	pathParameters := map[string]interface{}{
		"serviceName": autorest.Encode("path", serviceName),
	}

	const APIVersion = "2014-01-01"
	queryParameters := map[string]interface{}{
		"api-version": APIVersion,
		"errorBucket": autorest.Encode("query", errorBucket),
	}
	if len(nextLink) > 0 {
		queryParameters["nextLink"] = autorest.Encode("query", nextLink)
	}

	preparer := autorest.CreatePreparer(
		autorest.AsGet(),
		autorest.WithBaseURL(client.BaseURI),
		autorest.WithPathParameters("/providers/Microsoft.ADHybridHealthService/services/{serviceName}/exporterrors/listV2", pathParameters),
		autorest.WithQueryParameters(queryParameters))
	return preparer.Prepare((&http.Request{}).WithContext(ctx))
}

// GetLatestAadExportErrorsV2Sender sends the GetLatestAadExportErrorsV2 request. The method will close the
// http.Response Body if it receives an error.
func (client ServicesClient) GetLatestAadExportErrorsV2Sender(req *http.Request) (*http.Response, error) {
	return autorest.SendWithSender(client, req,
		autorest.DoRetryForStatusCodes(client.RetryAttempts, client.RetryDuration, autorest.StatusCodesForRetry...))
}

// GetLatestAadExportErrorsV2Responder handles the response to the GetLatestAadExportErrorsV2 request. The method always
// closes the http.Response Body.
func (client ServicesClient) GetLatestAadExportErrorsV2Responder(resp *http.Response) (result MergedExportErrors, err error) {
	err = autorest.Respond(
		resp,
		client.ByInspecting(),
		azure.WithErrorUnlessStatusCode(http.StatusOK),
		autorest.ByUnmarshallingJSON(&result),
		autorest.ByClosing())
	result.Response = autorest.Response{Response: resp}
	return
}

// GetMetricMetadata gets the service related metrics information.
//
// serviceName is the name of the service. filter is the metric metadata property filter to apply. perfCounter is
// indicates if only performance counter metrics are requested.
func (client ServicesClient) GetMetricMetadata(ctx context.Context, serviceName string, filter string, perfCounter *bool) (result MetricMetadataList, err error) {
	req, err := client.GetMetricMetadataPreparer(ctx, serviceName, filter, perfCounter)
	if err != nil {
		err = autorest.NewErrorWithError(err, "adhybridhealthservice.ServicesClient", "GetMetricMetadata", nil, "Failure preparing request")
		return
	}

	resp, err := client.GetMetricMetadataSender(req)
	if err != nil {
		result.Response = autorest.Response{Response: resp}
		err = autorest.NewErrorWithError(err, "adhybridhealthservice.ServicesClient", "GetMetricMetadata", resp, "Failure sending request")
		return
	}

	result, err = client.GetMetricMetadataResponder(resp)
	if err != nil {
		err = autorest.NewErrorWithError(err, "adhybridhealthservice.ServicesClient", "GetMetricMetadata", resp, "Failure responding to request")
	}

	return
}

// GetMetricMetadataPreparer prepares the GetMetricMetadata request.
func (client ServicesClient) GetMetricMetadataPreparer(ctx context.Context, serviceName string, filter string, perfCounter *bool) (*http.Request, error) {
	pathParameters := map[string]interface{}{
		"serviceName": autorest.Encode("path", serviceName),
	}

	const APIVersion = "2014-01-01"
	queryParameters := map[string]interface{}{
		"api-version": APIVersion,
	}
	if len(filter) > 0 {
		queryParameters["$filter"] = autorest.Encode("query", filter)
	}
	if perfCounter != nil {
		queryParameters["perfCounter"] = autorest.Encode("query", *perfCounter)
	}

	preparer := autorest.CreatePreparer(
		autorest.AsGet(),
		autorest.WithBaseURL(client.BaseURI),
		autorest.WithPathParameters("/providers/Microsoft.ADHybridHealthService/services/{serviceName}/metricmetadata", pathParameters),
		autorest.WithQueryParameters(queryParameters))
	return preparer.Prepare((&http.Request{}).WithContext(ctx))
}

// GetMetricMetadataSender sends the GetMetricMetadata request. The method will close the
// http.Response Body if it receives an error.
func (client ServicesClient) GetMetricMetadataSender(req *http.Request) (*http.Response, error) {
	return autorest.SendWithSender(client, req,
		autorest.DoRetryForStatusCodes(client.RetryAttempts, client.RetryDuration, autorest.StatusCodesForRetry...))
}

// GetMetricMetadataResponder handles the response to the GetMetricMetadata request. The method always
// closes the http.Response Body.
func (client ServicesClient) GetMetricMetadataResponder(resp *http.Response) (result MetricMetadataList, err error) {
	err = autorest.Respond(
		resp,
		client.ByInspecting(),
		azure.WithErrorUnlessStatusCode(http.StatusOK),
		autorest.ByUnmarshallingJSON(&result),
		autorest.ByClosing())
	result.Response = autorest.Response{Response: resp}
	return
}

// GetMetricsAverage gets the average of the metric values for a given metric and group combination.
//
// serviceName is the name of the service. metricName is the metric name groupName is the group name
func (client ServicesClient) GetMetricsAverage(ctx context.Context, serviceName string, metricName string, groupName string) (result Items, err error) {
	req, err := client.GetMetricsAveragePreparer(ctx, serviceName, metricName, groupName)
	if err != nil {
		err = autorest.NewErrorWithError(err, "adhybridhealthservice.ServicesClient", "GetMetricsAverage", nil, "Failure preparing request")
		return
	}

	resp, err := client.GetMetricsAverageSender(req)
	if err != nil {
		result.Response = autorest.Response{Response: resp}
		err = autorest.NewErrorWithError(err, "adhybridhealthservice.ServicesClient", "GetMetricsAverage", resp, "Failure sending request")
		return
	}

	result, err = client.GetMetricsAverageResponder(resp)
	if err != nil {
		err = autorest.NewErrorWithError(err, "adhybridhealthservice.ServicesClient", "GetMetricsAverage", resp, "Failure responding to request")
	}

	return
}

// GetMetricsAveragePreparer prepares the GetMetricsAverage request.
func (client ServicesClient) GetMetricsAveragePreparer(ctx context.Context, serviceName string, metricName string, groupName string) (*http.Request, error) {
	pathParameters := map[string]interface{}{
		"groupName":   autorest.Encode("path", groupName),
		"metricName":  autorest.Encode("path", metricName),
		"serviceName": autorest.Encode("path", serviceName),
	}

	const APIVersion = "2014-01-01"
	queryParameters := map[string]interface{}{
		"api-version": APIVersion,
	}

	preparer := autorest.CreatePreparer(
		autorest.AsGet(),
		autorest.WithBaseURL(client.BaseURI),
		autorest.WithPathParameters("/providers/Microsoft.ADHybridHealthService/services/{serviceName}/metrics/{metricName}/groups/{groupName}/average", pathParameters),
		autorest.WithQueryParameters(queryParameters))
	return preparer.Prepare((&http.Request{}).WithContext(ctx))
}

// GetMetricsAverageSender sends the GetMetricsAverage request. The method will close the
// http.Response Body if it receives an error.
func (client ServicesClient) GetMetricsAverageSender(req *http.Request) (*http.Response, error) {
	return autorest.SendWithSender(client, req,
		autorest.DoRetryForStatusCodes(client.RetryAttempts, client.RetryDuration, autorest.StatusCodesForRetry...))
}

// GetMetricsAverageResponder handles the response to the GetMetricsAverage request. The method always
// closes the http.Response Body.
func (client ServicesClient) GetMetricsAverageResponder(resp *http.Response) (result Items, err error) {
	err = autorest.Respond(
		resp,
		client.ByInspecting(),
		azure.WithErrorUnlessStatusCode(http.StatusOK),
		autorest.ByUnmarshallingJSON(&result),
		autorest.ByClosing())
	result.Response = autorest.Response{Response: resp}
	return
}

// GetMetricsForService gets the service related metrics for a given metric and group combination.
//
// serviceName is the name of the service. metricName is the metric name groupName is the group name groupKey is
// the group key fromDate is the start date. toDate is the end date.
func (client ServicesClient) GetMetricsForService(ctx context.Context, serviceName string, metricName string, groupName string, groupKey string, fromDate *date.Time, toDate *date.Time) (result MetricSets, err error) {
	req, err := client.GetMetricsForServicePreparer(ctx, serviceName, metricName, groupName, groupKey, fromDate, toDate)
	if err != nil {
		err = autorest.NewErrorWithError(err, "adhybridhealthservice.ServicesClient", "GetMetricsForService", nil, "Failure preparing request")
		return
	}

	resp, err := client.GetMetricsForServiceSender(req)
	if err != nil {
		result.Response = autorest.Response{Response: resp}
		err = autorest.NewErrorWithError(err, "adhybridhealthservice.ServicesClient", "GetMetricsForService", resp, "Failure sending request")
		return
	}

	result, err = client.GetMetricsForServiceResponder(resp)
	if err != nil {
		err = autorest.NewErrorWithError(err, "adhybridhealthservice.ServicesClient", "GetMetricsForService", resp, "Failure responding to request")
	}

	return
}

// GetMetricsForServicePreparer prepares the GetMetricsForService request.
func (client ServicesClient) GetMetricsForServicePreparer(ctx context.Context, serviceName string, metricName string, groupName string, groupKey string, fromDate *date.Time, toDate *date.Time) (*http.Request, error) {
	pathParameters := map[string]interface{}{
		"groupName":   autorest.Encode("path", groupName),
		"metricName":  autorest.Encode("path", metricName),
		"serviceName": autorest.Encode("path", serviceName),
	}

	const APIVersion = "2014-01-01"
	queryParameters := map[string]interface{}{
		"api-version": APIVersion,
	}
	if len(groupKey) > 0 {
		queryParameters["groupKey"] = autorest.Encode("query", groupKey)
	}
	if fromDate != nil {
		queryParameters["fromDate"] = autorest.Encode("query", *fromDate)
	}
	if toDate != nil {
		queryParameters["toDate"] = autorest.Encode("query", *toDate)
	}

	preparer := autorest.CreatePreparer(
		autorest.AsGet(),
		autorest.WithBaseURL(client.BaseURI),
		autorest.WithPathParameters("/providers/Microsoft.ADHybridHealthService/services/{serviceName}/metricmetadata/{metricName}/groups/{groupName}", pathParameters),
		autorest.WithQueryParameters(queryParameters))
	return preparer.Prepare((&http.Request{}).WithContext(ctx))
}

// GetMetricsForServiceSender sends the GetMetricsForService request. The method will close the
// http.Response Body if it receives an error.
func (client ServicesClient) GetMetricsForServiceSender(req *http.Request) (*http.Response, error) {
	return autorest.SendWithSender(client, req,
		autorest.DoRetryForStatusCodes(client.RetryAttempts, client.RetryDuration, autorest.StatusCodesForRetry...))
}

// GetMetricsForServiceResponder handles the response to the GetMetricsForService request. The method always
// closes the http.Response Body.
func (client ServicesClient) GetMetricsForServiceResponder(resp *http.Response) (result MetricSets, err error) {
	err = autorest.Respond(
		resp,
		client.ByInspecting(),
		azure.WithErrorUnlessStatusCode(http.StatusOK),
		autorest.ByUnmarshallingJSON(&result),
		autorest.ByClosing())
	result.Response = autorest.Response{Response: resp}
	return
}

// GetMetricsForServiceMember gets the server related metrics for a given metric and group combination.
//
// serviceName is the name of the service. metricName is the metric name groupName is the group name
// serviceMemberID is the server id. groupKey is the group key fromDate is the start date. toDate is the end date.
func (client ServicesClient) GetMetricsForServiceMember(ctx context.Context, serviceName string, metricName string, groupName string, serviceMemberID uuid.UUID, groupKey string, fromDate *date.Time, toDate *date.Time) (result MetricSets, err error) {
	req, err := client.GetMetricsForServiceMemberPreparer(ctx, serviceName, metricName, groupName, serviceMemberID, groupKey, fromDate, toDate)
	if err != nil {
		err = autorest.NewErrorWithError(err, "adhybridhealthservice.ServicesClient", "GetMetricsForServiceMember", nil, "Failure preparing request")
		return
	}

	resp, err := client.GetMetricsForServiceMemberSender(req)
	if err != nil {
		result.Response = autorest.Response{Response: resp}
		err = autorest.NewErrorWithError(err, "adhybridhealthservice.ServicesClient", "GetMetricsForServiceMember", resp, "Failure sending request")
		return
	}

	result, err = client.GetMetricsForServiceMemberResponder(resp)
	if err != nil {
		err = autorest.NewErrorWithError(err, "adhybridhealthservice.ServicesClient", "GetMetricsForServiceMember", resp, "Failure responding to request")
	}

	return
}

// GetMetricsForServiceMemberPreparer prepares the GetMetricsForServiceMember request.
func (client ServicesClient) GetMetricsForServiceMemberPreparer(ctx context.Context, serviceName string, metricName string, groupName string, serviceMemberID uuid.UUID, groupKey string, fromDate *date.Time, toDate *date.Time) (*http.Request, error) {
	pathParameters := map[string]interface{}{
		"groupName":       autorest.Encode("path", groupName),
		"metricName":      autorest.Encode("path", metricName),
		"serviceMemberId": autorest.Encode("path", serviceMemberID),
		"serviceName":     autorest.Encode("path", serviceName),
	}

	const APIVersion = "2014-01-01"
	queryParameters := map[string]interface{}{
		"api-version": APIVersion,
	}
	if len(groupKey) > 0 {
		queryParameters["groupKey"] = autorest.Encode("query", groupKey)
	}
	if fromDate != nil {
		queryParameters["fromDate"] = autorest.Encode("query", *fromDate)
	}
	if toDate != nil {
		queryParameters["toDate"] = autorest.Encode("query", *toDate)
	}

	preparer := autorest.CreatePreparer(
		autorest.AsGet(),
		autorest.WithBaseURL(client.BaseURI),
		autorest.WithPathParameters("/providers/Microsoft.ADHybridHealthService/services/{serviceName}/servicemembers/{serviceMemberId}/metrics/{metricName}/groups/{groupName}", pathParameters),
		autorest.WithQueryParameters(queryParameters))
	return preparer.Prepare((&http.Request{}).WithContext(ctx))
}

// GetMetricsForServiceMemberSender sends the GetMetricsForServiceMember request. The method will close the
// http.Response Body if it receives an error.
func (client ServicesClient) GetMetricsForServiceMemberSender(req *http.Request) (*http.Response, error) {
	return autorest.SendWithSender(client, req,
		autorest.DoRetryForStatusCodes(client.RetryAttempts, client.RetryDuration, autorest.StatusCodesForRetry...))
}

// GetMetricsForServiceMemberResponder handles the response to the GetMetricsForServiceMember request. The method always
// closes the http.Response Body.
func (client ServicesClient) GetMetricsForServiceMemberResponder(resp *http.Response) (result MetricSets, err error) {
	err = autorest.Respond(
		resp,
		client.ByInspecting(),
		azure.WithErrorUnlessStatusCode(http.StatusOK),
		autorest.ByUnmarshallingJSON(&result),
		autorest.ByClosing())
	result.Response = autorest.Response{Response: resp}
	return
}

// GetMetricsSum gets the sum of the metric values for a given metric and group combination.
//
// serviceName is the name of the service. metricName is the metric name groupName is the group name
func (client ServicesClient) GetMetricsSum(ctx context.Context, serviceName string, metricName string, groupName string) (result Items, err error) {
	req, err := client.GetMetricsSumPreparer(ctx, serviceName, metricName, groupName)
	if err != nil {
		err = autorest.NewErrorWithError(err, "adhybridhealthservice.ServicesClient", "GetMetricsSum", nil, "Failure preparing request")
		return
	}

	resp, err := client.GetMetricsSumSender(req)
	if err != nil {
		result.Response = autorest.Response{Response: resp}
		err = autorest.NewErrorWithError(err, "adhybridhealthservice.ServicesClient", "GetMetricsSum", resp, "Failure sending request")
		return
	}

	result, err = client.GetMetricsSumResponder(resp)
	if err != nil {
		err = autorest.NewErrorWithError(err, "adhybridhealthservice.ServicesClient", "GetMetricsSum", resp, "Failure responding to request")
	}

	return
}

// GetMetricsSumPreparer prepares the GetMetricsSum request.
func (client ServicesClient) GetMetricsSumPreparer(ctx context.Context, serviceName string, metricName string, groupName string) (*http.Request, error) {
	pathParameters := map[string]interface{}{
		"groupName":   autorest.Encode("path", groupName),
		"metricName":  autorest.Encode("path", metricName),
		"serviceName": autorest.Encode("path", serviceName),
	}

	const APIVersion = "2014-01-01"
	queryParameters := map[string]interface{}{
		"api-version": APIVersion,
	}

	preparer := autorest.CreatePreparer(
		autorest.AsGet(),
		autorest.WithBaseURL(client.BaseURI),
		autorest.WithPathParameters("/providers/Microsoft.ADHybridHealthService/services/{serviceName}/metrics/{metricName}/groups/{groupName}/sum", pathParameters),
		autorest.WithQueryParameters(queryParameters))
	return preparer.Prepare((&http.Request{}).WithContext(ctx))
}

// GetMetricsSumSender sends the GetMetricsSum request. The method will close the
// http.Response Body if it receives an error.
func (client ServicesClient) GetMetricsSumSender(req *http.Request) (*http.Response, error) {
	return autorest.SendWithSender(client, req,
		autorest.DoRetryForStatusCodes(client.RetryAttempts, client.RetryDuration, autorest.StatusCodesForRetry...))
}

// GetMetricsSumResponder handles the response to the GetMetricsSum request. The method always
// closes the http.Response Body.
func (client ServicesClient) GetMetricsSumResponder(resp *http.Response) (result Items, err error) {
	err = autorest.Respond(
		resp,
		client.ByInspecting(),
		azure.WithErrorUnlessStatusCode(http.StatusOK),
		autorest.ByUnmarshallingJSON(&result),
		autorest.ByClosing())
	result.Response = autorest.Response{Response: resp}
	return
}

// GetPeralertfeedback gets a list of all alert feedback for a given tenant and alert type.
//
// serviceName is the name of the service. shortName is the name of the alert.
func (client ServicesClient) GetPeralertfeedback(ctx context.Context, serviceName string, shortName string) (result AlertFeedbacks, err error) {
	req, err := client.GetPeralertfeedbackPreparer(ctx, serviceName, shortName)
	if err != nil {
		err = autorest.NewErrorWithError(err, "adhybridhealthservice.ServicesClient", "GetPeralertfeedback", nil, "Failure preparing request")
		return
	}

	resp, err := client.GetPeralertfeedbackSender(req)
	if err != nil {
		result.Response = autorest.Response{Response: resp}
		err = autorest.NewErrorWithError(err, "adhybridhealthservice.ServicesClient", "GetPeralertfeedback", resp, "Failure sending request")
		return
	}

	result, err = client.GetPeralertfeedbackResponder(resp)
	if err != nil {
		err = autorest.NewErrorWithError(err, "adhybridhealthservice.ServicesClient", "GetPeralertfeedback", resp, "Failure responding to request")
	}

	return
}

// GetPeralertfeedbackPreparer prepares the GetPeralertfeedback request.
func (client ServicesClient) GetPeralertfeedbackPreparer(ctx context.Context, serviceName string, shortName string) (*http.Request, error) {
	pathParameters := map[string]interface{}{
		"serviceName": autorest.Encode("path", serviceName),
		"shortName":   autorest.Encode("path", shortName),
	}

	const APIVersion = "2014-01-01"
	queryParameters := map[string]interface{}{
		"api-version": APIVersion,
	}

	preparer := autorest.CreatePreparer(
		autorest.AsGet(),
		autorest.WithBaseURL(client.BaseURI),
		autorest.WithPathParameters("/providers/Microsoft.ADHybridHealthService/services/{serviceName}/feedbacktype/alerts/{shortName}/alertfeedback", pathParameters),
		autorest.WithQueryParameters(queryParameters))
	return preparer.Prepare((&http.Request{}).WithContext(ctx))
}

// GetPeralertfeedbackSender sends the GetPeralertfeedback request. The method will close the
// http.Response Body if it receives an error.
func (client ServicesClient) GetPeralertfeedbackSender(req *http.Request) (*http.Response, error) {
	return autorest.SendWithSender(client, req,
		autorest.DoRetryForStatusCodes(client.RetryAttempts, client.RetryDuration, autorest.StatusCodesForRetry...))
}

// GetPeralertfeedbackResponder handles the response to the GetPeralertfeedback request. The method always
// closes the http.Response Body.
func (client ServicesClient) GetPeralertfeedbackResponder(resp *http.Response) (result AlertFeedbacks, err error) {
	err = autorest.Respond(
		resp,
		client.ByInspecting(),
		azure.WithErrorUnlessStatusCode(http.StatusOK),
		autorest.ByUnmarshallingJSON(&result),
		autorest.ByClosing())
	result.Response = autorest.Response{Response: resp}
	return
}

// GetService gets the details of a service for a tenant having Azure AD Premium license and is onboarded to Azure
// Active Directory Connect Health.
//
// serviceName is the name of the service.
func (client ServicesClient) GetService(ctx context.Context, serviceName string) (result Service, err error) {
	req, err := client.GetServicePreparer(ctx, serviceName)
	if err != nil {
		err = autorest.NewErrorWithError(err, "adhybridhealthservice.ServicesClient", "GetService", nil, "Failure preparing request")
		return
	}

	resp, err := client.GetServiceSender(req)
	if err != nil {
		result.Response = autorest.Response{Response: resp}
		err = autorest.NewErrorWithError(err, "adhybridhealthservice.ServicesClient", "GetService", resp, "Failure sending request")
		return
	}

	result, err = client.GetServiceResponder(resp)
	if err != nil {
		err = autorest.NewErrorWithError(err, "adhybridhealthservice.ServicesClient", "GetService", resp, "Failure responding to request")
	}

	return
}

// GetServicePreparer prepares the GetService request.
func (client ServicesClient) GetServicePreparer(ctx context.Context, serviceName string) (*http.Request, error) {
	pathParameters := map[string]interface{}{
		"serviceName": autorest.Encode("path", serviceName),
	}

	const APIVersion = "2014-01-01"
	queryParameters := map[string]interface{}{
		"api-version": APIVersion,
	}

	preparer := autorest.CreatePreparer(
		autorest.AsGet(),
		autorest.WithBaseURL(client.BaseURI),
		autorest.WithPathParameters("/providers/Microsoft.ADHybridHealthService/services/{serviceName}", pathParameters),
		autorest.WithQueryParameters(queryParameters))
	return preparer.Prepare((&http.Request{}).WithContext(ctx))
}

// GetServiceSender sends the GetService request. The method will close the
// http.Response Body if it receives an error.
func (client ServicesClient) GetServiceSender(req *http.Request) (*http.Response, error) {
	return autorest.SendWithSender(client, req,
		autorest.DoRetryForStatusCodes(client.RetryAttempts, client.RetryDuration, autorest.StatusCodesForRetry...))
}

// GetServiceResponder handles the response to the GetService request. The method always
// closes the http.Response Body.
func (client ServicesClient) GetServiceResponder(resp *http.Response) (result Service, err error) {
	err = autorest.Respond(
		resp,
		client.ByInspecting(),
		azure.WithErrorUnlessStatusCode(http.StatusOK),
		autorest.ByUnmarshallingJSON(&result),
		autorest.ByClosing())
	result.Response = autorest.Response{Response: resp}
	return
}

// GetServiceConfiguration gets the service configuration.
//
// serviceName is the name of the service. serviceMemberID is the server Id.
func (client ServicesClient) GetServiceConfiguration(ctx context.Context, serviceName string, serviceMemberID string) (result ServiceConfiguration, err error) {
	req, err := client.GetServiceConfigurationPreparer(ctx, serviceName, serviceMemberID)
	if err != nil {
		err = autorest.NewErrorWithError(err, "adhybridhealthservice.ServicesClient", "GetServiceConfiguration", nil, "Failure preparing request")
		return
	}

	resp, err := client.GetServiceConfigurationSender(req)
	if err != nil {
		result.Response = autorest.Response{Response: resp}
		err = autorest.NewErrorWithError(err, "adhybridhealthservice.ServicesClient", "GetServiceConfiguration", resp, "Failure sending request")
		return
	}

	result, err = client.GetServiceConfigurationResponder(resp)
	if err != nil {
		err = autorest.NewErrorWithError(err, "adhybridhealthservice.ServicesClient", "GetServiceConfiguration", resp, "Failure responding to request")
	}

	return
}

// GetServiceConfigurationPreparer prepares the GetServiceConfiguration request.
func (client ServicesClient) GetServiceConfigurationPreparer(ctx context.Context, serviceName string, serviceMemberID string) (*http.Request, error) {
	pathParameters := map[string]interface{}{
		"serviceMemberId": autorest.Encode("path", serviceMemberID),
		"serviceName":     autorest.Encode("path", serviceName),
	}

	const APIVersion = "2014-01-01"
	queryParameters := map[string]interface{}{
		"api-version": APIVersion,
	}

	preparer := autorest.CreatePreparer(
		autorest.AsGet(),
		autorest.WithBaseURL(client.BaseURI),
		autorest.WithPathParameters("/providers/Microsoft.ADHybridHealthService/services/{serviceName}/servicemembers/{serviceMemberId}/serviceconfiguration", pathParameters),
		autorest.WithQueryParameters(queryParameters))
	return preparer.Prepare((&http.Request{}).WithContext(ctx))
}

// GetServiceConfigurationSender sends the GetServiceConfiguration request. The method will close the
// http.Response Body if it receives an error.
func (client ServicesClient) GetServiceConfigurationSender(req *http.Request) (*http.Response, error) {
	return autorest.SendWithSender(client, req,
		autorest.DoRetryForStatusCodes(client.RetryAttempts, client.RetryDuration, autorest.StatusCodesForRetry...))
}

// GetServiceConfigurationResponder handles the response to the GetServiceConfiguration request. The method always
// closes the http.Response Body.
func (client ServicesClient) GetServiceConfigurationResponder(resp *http.Response) (result ServiceConfiguration, err error) {
	err = autorest.Respond(
		resp,
		client.ByInspecting(),
		azure.WithErrorUnlessStatusCode(http.StatusOK),
		autorest.ByUnmarshallingJSON(&result),
		autorest.ByClosing())
	result.Response = autorest.Response{Response: resp}
	return
}

// GetServiceMember gets the details of a server, for a given service, that are onboarded to Azure Active Directory
// Connect Health Service.
//
// serviceName is the name of the service. serviceMemberID is the server Id.
func (client ServicesClient) GetServiceMember(ctx context.Context, serviceName string, serviceMemberID uuid.UUID) (result ServiceMember, err error) {
	req, err := client.GetServiceMemberPreparer(ctx, serviceName, serviceMemberID)
	if err != nil {
		err = autorest.NewErrorWithError(err, "adhybridhealthservice.ServicesClient", "GetServiceMember", nil, "Failure preparing request")
		return
	}

	resp, err := client.GetServiceMemberSender(req)
	if err != nil {
		result.Response = autorest.Response{Response: resp}
		err = autorest.NewErrorWithError(err, "adhybridhealthservice.ServicesClient", "GetServiceMember", resp, "Failure sending request")
		return
	}

	result, err = client.GetServiceMemberResponder(resp)
	if err != nil {
		err = autorest.NewErrorWithError(err, "adhybridhealthservice.ServicesClient", "GetServiceMember", resp, "Failure responding to request")
	}

	return
}

// GetServiceMemberPreparer prepares the GetServiceMember request.
func (client ServicesClient) GetServiceMemberPreparer(ctx context.Context, serviceName string, serviceMemberID uuid.UUID) (*http.Request, error) {
	pathParameters := map[string]interface{}{
		"serviceMemberId": autorest.Encode("path", serviceMemberID),
		"serviceName":     autorest.Encode("path", serviceName),
	}

	const APIVersion = "2014-01-01"
	queryParameters := map[string]interface{}{
		"api-version": APIVersion,
	}

	preparer := autorest.CreatePreparer(
		autorest.AsGet(),
		autorest.WithBaseURL(client.BaseURI),
		autorest.WithPathParameters("/providers/Microsoft.ADHybridHealthService/services/{serviceName}/servicemembers/{serviceMemberId}", pathParameters),
		autorest.WithQueryParameters(queryParameters))
	return preparer.Prepare((&http.Request{}).WithContext(ctx))
}

// GetServiceMemberSender sends the GetServiceMember request. The method will close the
// http.Response Body if it receives an error.
func (client ServicesClient) GetServiceMemberSender(req *http.Request) (*http.Response, error) {
	return autorest.SendWithSender(client, req,
		autorest.DoRetryForStatusCodes(client.RetryAttempts, client.RetryDuration, autorest.StatusCodesForRetry...))
}

// GetServiceMemberResponder handles the response to the GetServiceMember request. The method always
// closes the http.Response Body.
func (client ServicesClient) GetServiceMemberResponder(resp *http.Response) (result ServiceMember, err error) {
	err = autorest.Respond(
		resp,
		client.ByInspecting(),
		azure.WithErrorUnlessStatusCode(http.StatusOK),
		autorest.ByUnmarshallingJSON(&result),
		autorest.ByClosing())
	result.Response = autorest.Response{Response: resp}
	return
}

// GetServiceMemberAlerts gets the details of an alert for a given service and server combination.
//
// serviceMemberID is the server Id for which the laert details needs to be queried. serviceName is the name of the
// service. filter is the alert property filter to apply. state is the alert state to query for. from is the start
// date to query for. toParameter is the end date till when to query for.
func (client ServicesClient) GetServiceMemberAlerts(ctx context.Context, serviceMemberID uuid.UUID, serviceName string, filter string, state string, from *date.Time, toParameter *date.Time) (result Alerts, err error) {
	req, err := client.GetServiceMemberAlertsPreparer(ctx, serviceMemberID, serviceName, filter, state, from, toParameter)
	if err != nil {
		err = autorest.NewErrorWithError(err, "adhybridhealthservice.ServicesClient", "GetServiceMemberAlerts", nil, "Failure preparing request")
		return
	}

	resp, err := client.GetServiceMemberAlertsSender(req)
	if err != nil {
		result.Response = autorest.Response{Response: resp}
		err = autorest.NewErrorWithError(err, "adhybridhealthservice.ServicesClient", "GetServiceMemberAlerts", resp, "Failure sending request")
		return
	}

	result, err = client.GetServiceMemberAlertsResponder(resp)
	if err != nil {
		err = autorest.NewErrorWithError(err, "adhybridhealthservice.ServicesClient", "GetServiceMemberAlerts", resp, "Failure responding to request")
	}

	return
}

// GetServiceMemberAlertsPreparer prepares the GetServiceMemberAlerts request.
func (client ServicesClient) GetServiceMemberAlertsPreparer(ctx context.Context, serviceMemberID uuid.UUID, serviceName string, filter string, state string, from *date.Time, toParameter *date.Time) (*http.Request, error) {
	pathParameters := map[string]interface{}{
		"serviceMemberId": autorest.Encode("path", serviceMemberID),
		"serviceName":     autorest.Encode("path", serviceName),
	}

	const APIVersion = "2014-01-01"
	queryParameters := map[string]interface{}{
		"api-version": APIVersion,
	}
	if len(filter) > 0 {
		queryParameters["$filter"] = autorest.Encode("query", filter)
	}
	if len(state) > 0 {
		queryParameters["state"] = autorest.Encode("query", state)
	}
	if from != nil {
		queryParameters["from"] = autorest.Encode("query", *from)
	}
	if toParameter != nil {
		queryParameters["to"] = autorest.Encode("query", *toParameter)
	}

	preparer := autorest.CreatePreparer(
		autorest.AsGet(),
		autorest.WithBaseURL(client.BaseURI),
		autorest.WithPathParameters("/providers/Microsoft.ADHybridHealthService/services/{serviceName}/servicemembers/{serviceMemberId}/alerts", pathParameters),
		autorest.WithQueryParameters(queryParameters))
	return preparer.Prepare((&http.Request{}).WithContext(ctx))
}

// GetServiceMemberAlertsSender sends the GetServiceMemberAlerts request. The method will close the
// http.Response Body if it receives an error.
func (client ServicesClient) GetServiceMemberAlertsSender(req *http.Request) (*http.Response, error) {
	return autorest.SendWithSender(client, req,
		autorest.DoRetryForStatusCodes(client.RetryAttempts, client.RetryDuration, autorest.StatusCodesForRetry...))
}

// GetServiceMemberAlertsResponder handles the response to the GetServiceMemberAlerts request. The method always
// closes the http.Response Body.
func (client ServicesClient) GetServiceMemberAlertsResponder(resp *http.Response) (result Alerts, err error) {
	err = autorest.Respond(
		resp,
		client.ByInspecting(),
		azure.WithErrorUnlessStatusCode(http.StatusOK),
		autorest.ByUnmarshallingJSON(&result),
		autorest.ByClosing())
	result.Response = autorest.Response{Response: resp}
	return
}

// GetServiceMemberCredentials gets the credentials of the server which is needed by the agent to connect to Azure
// Active Directory Connect Health Service.
//
// serviceName is the name of the service. serviceMemberID is the server Id. filter is the property filter to
// apply.
func (client ServicesClient) GetServiceMemberCredentials(ctx context.Context, serviceName string, serviceMemberID uuid.UUID, filter string) (result Credential, err error) {
	req, err := client.GetServiceMemberCredentialsPreparer(ctx, serviceName, serviceMemberID, filter)
	if err != nil {
		err = autorest.NewErrorWithError(err, "adhybridhealthservice.ServicesClient", "GetServiceMemberCredentials", nil, "Failure preparing request")
		return
	}

	resp, err := client.GetServiceMemberCredentialsSender(req)
	if err != nil {
		result.Response = autorest.Response{Response: resp}
		err = autorest.NewErrorWithError(err, "adhybridhealthservice.ServicesClient", "GetServiceMemberCredentials", resp, "Failure sending request")
		return
	}

	result, err = client.GetServiceMemberCredentialsResponder(resp)
	if err != nil {
		err = autorest.NewErrorWithError(err, "adhybridhealthservice.ServicesClient", "GetServiceMemberCredentials", resp, "Failure responding to request")
	}

	return
}

// GetServiceMemberCredentialsPreparer prepares the GetServiceMemberCredentials request.
func (client ServicesClient) GetServiceMemberCredentialsPreparer(ctx context.Context, serviceName string, serviceMemberID uuid.UUID, filter string) (*http.Request, error) {
	pathParameters := map[string]interface{}{
		"serviceMemberId": autorest.Encode("path", serviceMemberID),
		"serviceName":     autorest.Encode("path", serviceName),
	}

	const APIVersion = "2014-01-01"
	queryParameters := map[string]interface{}{
		"api-version": APIVersion,
	}
	if len(filter) > 0 {
		queryParameters["$filter"] = autorest.Encode("query", filter)
	}

	preparer := autorest.CreatePreparer(
		autorest.AsGet(),
		autorest.WithBaseURL(client.BaseURI),
		autorest.WithPathParameters("/providers/Microsoft.ADHybridHealthService/services/{serviceName}/servicemembers/{serviceMemberId}/credentials", pathParameters),
		autorest.WithQueryParameters(queryParameters))
	return preparer.Prepare((&http.Request{}).WithContext(ctx))
}

// GetServiceMemberCredentialsSender sends the GetServiceMemberCredentials request. The method will close the
// http.Response Body if it receives an error.
func (client ServicesClient) GetServiceMemberCredentialsSender(req *http.Request) (*http.Response, error) {
	return autorest.SendWithSender(client, req,
		autorest.DoRetryForStatusCodes(client.RetryAttempts, client.RetryDuration, autorest.StatusCodesForRetry...))
}

// GetServiceMemberCredentialsResponder handles the response to the GetServiceMemberCredentials request. The method always
// closes the http.Response Body.
func (client ServicesClient) GetServiceMemberCredentialsResponder(resp *http.Response) (result Credential, err error) {
	err = autorest.Respond(
		resp,
		client.ByInspecting(),
		azure.WithErrorUnlessStatusCode(http.StatusOK),
		autorest.ByUnmarshallingJSON(&result),
		autorest.ByClosing())
	result.Response = autorest.Response{Response: resp}
	return
}

// GetServiceMemberDataFreshness gets the last time when the server uploaded data to Azure Active Directory Connect
// Health Service.
//
// serviceName is the name of the service. serviceMemberID is the server Id.
func (client ServicesClient) GetServiceMemberDataFreshness(ctx context.Context, serviceName string, serviceMemberID uuid.UUID) (result DataFreshnessDetail, err error) {
	req, err := client.GetServiceMemberDataFreshnessPreparer(ctx, serviceName, serviceMemberID)
	if err != nil {
		err = autorest.NewErrorWithError(err, "adhybridhealthservice.ServicesClient", "GetServiceMemberDataFreshness", nil, "Failure preparing request")
		return
	}

	resp, err := client.GetServiceMemberDataFreshnessSender(req)
	if err != nil {
		result.Response = autorest.Response{Response: resp}
		err = autorest.NewErrorWithError(err, "adhybridhealthservice.ServicesClient", "GetServiceMemberDataFreshness", resp, "Failure sending request")
		return
	}

	result, err = client.GetServiceMemberDataFreshnessResponder(resp)
	if err != nil {
		err = autorest.NewErrorWithError(err, "adhybridhealthservice.ServicesClient", "GetServiceMemberDataFreshness", resp, "Failure responding to request")
	}

	return
}

// GetServiceMemberDataFreshnessPreparer prepares the GetServiceMemberDataFreshness request.
func (client ServicesClient) GetServiceMemberDataFreshnessPreparer(ctx context.Context, serviceName string, serviceMemberID uuid.UUID) (*http.Request, error) {
	pathParameters := map[string]interface{}{
		"serviceMemberId": autorest.Encode("path", serviceMemberID),
		"serviceName":     autorest.Encode("path", serviceName),
	}

	const APIVersion = "2014-01-01"
	queryParameters := map[string]interface{}{
		"api-version": APIVersion,
	}

	preparer := autorest.CreatePreparer(
		autorest.AsGet(),
		autorest.WithBaseURL(client.BaseURI),
		autorest.WithPathParameters("/providers/Microsoft.ADHybridHealthService/services/{serviceName}/servicemembers/{serviceMemberId}/datafreshness", pathParameters),
		autorest.WithQueryParameters(queryParameters))
	return preparer.Prepare((&http.Request{}).WithContext(ctx))
}

// GetServiceMemberDataFreshnessSender sends the GetServiceMemberDataFreshness request. The method will close the
// http.Response Body if it receives an error.
func (client ServicesClient) GetServiceMemberDataFreshnessSender(req *http.Request) (*http.Response, error) {
	return autorest.SendWithSender(client, req,
		autorest.DoRetryForStatusCodes(client.RetryAttempts, client.RetryDuration, autorest.StatusCodesForRetry...))
}

// GetServiceMemberDataFreshnessResponder handles the response to the GetServiceMemberDataFreshness request. The method always
// closes the http.Response Body.
func (client ServicesClient) GetServiceMemberDataFreshnessResponder(resp *http.Response) (result DataFreshnessDetail, err error) {
	err = autorest.Respond(
		resp,
		client.ByInspecting(),
		azure.WithErrorUnlessStatusCode(http.StatusOK),
		autorest.ByUnmarshallingJSON(&result),
		autorest.ByClosing())
	result.Response = autorest.Response{Response: resp}
	return
}

// GetServiceMemberExportStatus gets the export status.
//
// serviceName is the name of the service. serviceMemberID is the server Id.
func (client ServicesClient) GetServiceMemberExportStatus(ctx context.Context, serviceName string, serviceMemberID uuid.UUID) (result ExportStatuses, err error) {
	req, err := client.GetServiceMemberExportStatusPreparer(ctx, serviceName, serviceMemberID)
	if err != nil {
		err = autorest.NewErrorWithError(err, "adhybridhealthservice.ServicesClient", "GetServiceMemberExportStatus", nil, "Failure preparing request")
		return
	}

	resp, err := client.GetServiceMemberExportStatusSender(req)
	if err != nil {
		result.Response = autorest.Response{Response: resp}
		err = autorest.NewErrorWithError(err, "adhybridhealthservice.ServicesClient", "GetServiceMemberExportStatus", resp, "Failure sending request")
		return
	}

	result, err = client.GetServiceMemberExportStatusResponder(resp)
	if err != nil {
		err = autorest.NewErrorWithError(err, "adhybridhealthservice.ServicesClient", "GetServiceMemberExportStatus", resp, "Failure responding to request")
	}

	return
}

// GetServiceMemberExportStatusPreparer prepares the GetServiceMemberExportStatus request.
func (client ServicesClient) GetServiceMemberExportStatusPreparer(ctx context.Context, serviceName string, serviceMemberID uuid.UUID) (*http.Request, error) {
	pathParameters := map[string]interface{}{
		"serviceMemberId": autorest.Encode("path", serviceMemberID),
		"serviceName":     autorest.Encode("path", serviceName),
	}

	const APIVersion = "2014-01-01"
	queryParameters := map[string]interface{}{
		"api-version": APIVersion,
	}

	preparer := autorest.CreatePreparer(
		autorest.AsGet(),
		autorest.WithBaseURL(client.BaseURI),
		autorest.WithPathParameters("/providers/Microsoft.ADHybridHealthService/services/{serviceName}/servicemembers/{serviceMemberId}/exportstatus", pathParameters),
		autorest.WithQueryParameters(queryParameters))
	return preparer.Prepare((&http.Request{}).WithContext(ctx))
}

// GetServiceMemberExportStatusSender sends the GetServiceMemberExportStatus request. The method will close the
// http.Response Body if it receives an error.
func (client ServicesClient) GetServiceMemberExportStatusSender(req *http.Request) (*http.Response, error) {
	return autorest.SendWithSender(client, req,
		autorest.DoRetryForStatusCodes(client.RetryAttempts, client.RetryDuration, autorest.StatusCodesForRetry...))
}

// GetServiceMemberExportStatusResponder handles the response to the GetServiceMemberExportStatus request. The method always
// closes the http.Response Body.
func (client ServicesClient) GetServiceMemberExportStatusResponder(resp *http.Response) (result ExportStatuses, err error) {
	err = autorest.Respond(
		resp,
		client.ByInspecting(),
		azure.WithErrorUnlessStatusCode(http.StatusOK),
		autorest.ByUnmarshallingJSON(&result),
		autorest.ByClosing())
	result.Response = autorest.Response{Response: resp}
	return
}

// GetServiceMembers gets the details of the servers, for a given service, that are onboarded to Azure Active Directory
// Connect Health Service.
//
// serviceName is the name of the service. filter is the server property filter to apply. dimensionType is the
// server specific dimension. dimensionSignature is the value of the dimension.
func (client ServicesClient) GetServiceMembers(ctx context.Context, serviceName string, filter string, dimensionType string, dimensionSignature string) (result ServiceMembers, err error) {
	req, err := client.GetServiceMembersPreparer(ctx, serviceName, filter, dimensionType, dimensionSignature)
	if err != nil {
		err = autorest.NewErrorWithError(err, "adhybridhealthservice.ServicesClient", "GetServiceMembers", nil, "Failure preparing request")
		return
	}

	resp, err := client.GetServiceMembersSender(req)
	if err != nil {
		result.Response = autorest.Response{Response: resp}
		err = autorest.NewErrorWithError(err, "adhybridhealthservice.ServicesClient", "GetServiceMembers", resp, "Failure sending request")
		return
	}

	result, err = client.GetServiceMembersResponder(resp)
	if err != nil {
		err = autorest.NewErrorWithError(err, "adhybridhealthservice.ServicesClient", "GetServiceMembers", resp, "Failure responding to request")
	}

	return
}

// GetServiceMembersPreparer prepares the GetServiceMembers request.
func (client ServicesClient) GetServiceMembersPreparer(ctx context.Context, serviceName string, filter string, dimensionType string, dimensionSignature string) (*http.Request, error) {
	pathParameters := map[string]interface{}{
		"serviceName": autorest.Encode("path", serviceName),
	}

	const APIVersion = "2014-01-01"
	queryParameters := map[string]interface{}{
		"api-version": APIVersion,
	}
	if len(filter) > 0 {
		queryParameters["$filter"] = autorest.Encode("query", filter)
	}
	if len(dimensionType) > 0 {
		queryParameters["dimensionType"] = autorest.Encode("query", dimensionType)
	}
	if len(dimensionSignature) > 0 {
		queryParameters["dimensionSignature"] = autorest.Encode("query", dimensionSignature)
	}

	preparer := autorest.CreatePreparer(
		autorest.AsGet(),
		autorest.WithBaseURL(client.BaseURI),
		autorest.WithPathParameters("/providers/Microsoft.ADHybridHealthService/services/{serviceName}/servicemembers", pathParameters),
		autorest.WithQueryParameters(queryParameters))
	return preparer.Prepare((&http.Request{}).WithContext(ctx))
}

// GetServiceMembersSender sends the GetServiceMembers request. The method will close the
// http.Response Body if it receives an error.
func (client ServicesClient) GetServiceMembersSender(req *http.Request) (*http.Response, error) {
	return autorest.SendWithSender(client, req,
		autorest.DoRetryForStatusCodes(client.RetryAttempts, client.RetryDuration, autorest.StatusCodesForRetry...))
}

// GetServiceMembersResponder handles the response to the GetServiceMembers request. The method always
// closes the http.Response Body.
func (client ServicesClient) GetServiceMembersResponder(resp *http.Response) (result ServiceMembers, err error) {
	err = autorest.Respond(
		resp,
		client.ByInspecting(),
		azure.WithErrorUnlessStatusCode(http.StatusOK),
		autorest.ByUnmarshallingJSON(&result),
		autorest.ByClosing())
	result.Response = autorest.Response{Response: resp}
	return
}

// GetServiceMonitoringConfigurations gets the service level monitoring configurations.
//
// serviceName is the name of the service.
func (client ServicesClient) GetServiceMonitoringConfigurations(ctx context.Context, serviceName string) (result Items, err error) {
	req, err := client.GetServiceMonitoringConfigurationsPreparer(ctx, serviceName)
	if err != nil {
		err = autorest.NewErrorWithError(err, "adhybridhealthservice.ServicesClient", "GetServiceMonitoringConfigurations", nil, "Failure preparing request")
		return
	}

	resp, err := client.GetServiceMonitoringConfigurationsSender(req)
	if err != nil {
		result.Response = autorest.Response{Response: resp}
		err = autorest.NewErrorWithError(err, "adhybridhealthservice.ServicesClient", "GetServiceMonitoringConfigurations", resp, "Failure sending request")
		return
	}

	result, err = client.GetServiceMonitoringConfigurationsResponder(resp)
	if err != nil {
		err = autorest.NewErrorWithError(err, "adhybridhealthservice.ServicesClient", "GetServiceMonitoringConfigurations", resp, "Failure responding to request")
	}

	return
}

// GetServiceMonitoringConfigurationsPreparer prepares the GetServiceMonitoringConfigurations request.
func (client ServicesClient) GetServiceMonitoringConfigurationsPreparer(ctx context.Context, serviceName string) (*http.Request, error) {
	pathParameters := map[string]interface{}{
		"serviceName": autorest.Encode("path", serviceName),
	}

	const APIVersion = "2014-01-01"
	queryParameters := map[string]interface{}{
		"api-version": APIVersion,
	}

	preparer := autorest.CreatePreparer(
		autorest.AsGet(),
		autorest.WithBaseURL(client.BaseURI),
		autorest.WithPathParameters("/providers/Microsoft.ADHybridHealthService/services/{serviceName}/monitoringconfigurations", pathParameters),
		autorest.WithQueryParameters(queryParameters))
	return preparer.Prepare((&http.Request{}).WithContext(ctx))
}

// GetServiceMonitoringConfigurationsSender sends the GetServiceMonitoringConfigurations request. The method will close the
// http.Response Body if it receives an error.
func (client ServicesClient) GetServiceMonitoringConfigurationsSender(req *http.Request) (*http.Response, error) {
	return autorest.SendWithSender(client, req,
		autorest.DoRetryForStatusCodes(client.RetryAttempts, client.RetryDuration, autorest.StatusCodesForRetry...))
}

// GetServiceMonitoringConfigurationsResponder handles the response to the GetServiceMonitoringConfigurations request. The method always
// closes the http.Response Body.
func (client ServicesClient) GetServiceMonitoringConfigurationsResponder(resp *http.Response) (result Items, err error) {
	err = autorest.Respond(
		resp,
		client.ByInspecting(),
		azure.WithErrorUnlessStatusCode(http.StatusOK),
		autorest.ByUnmarshallingJSON(&result),
		autorest.ByClosing())
	result.Response = autorest.Response{Response: resp}
	return
}

// GetServices gets the details of services, for a tenant, that are onboarded to Azure Active Directory Connect Health.
//
// filter is the service property filter to apply. serviceType is the service type for the services onboarded to
// Azure Active Directory Connect Health. Depending on whether the service is monitoring, ADFS, Sync or ADDS roles,
// the service type can either be AdFederationService or AadSyncService or AdDomainService. skipCount is the skip
// count, which specifies the number of elements that can be bypassed from a sequence and then return the remaining
// elements. takeCount is the take count , which specifies the number of elements that can be returned from a
// sequence.
func (client ServicesClient) GetServices(ctx context.Context, filter string, serviceType string, skipCount *int32, takeCount *int32) (result Services, err error) {
	req, err := client.GetServicesPreparer(ctx, filter, serviceType, skipCount, takeCount)
	if err != nil {
		err = autorest.NewErrorWithError(err, "adhybridhealthservice.ServicesClient", "GetServices", nil, "Failure preparing request")
		return
	}

	resp, err := client.GetServicesSender(req)
	if err != nil {
		result.Response = autorest.Response{Response: resp}
		err = autorest.NewErrorWithError(err, "adhybridhealthservice.ServicesClient", "GetServices", resp, "Failure sending request")
		return
	}

	result, err = client.GetServicesResponder(resp)
	if err != nil {
		err = autorest.NewErrorWithError(err, "adhybridhealthservice.ServicesClient", "GetServices", resp, "Failure responding to request")
	}

	return
}

// GetServicesPreparer prepares the GetServices request.
func (client ServicesClient) GetServicesPreparer(ctx context.Context, filter string, serviceType string, skipCount *int32, takeCount *int32) (*http.Request, error) {
	const APIVersion = "2014-01-01"
	queryParameters := map[string]interface{}{
		"api-version": APIVersion,
	}
	if len(filter) > 0 {
		queryParameters["$filter"] = autorest.Encode("query", filter)
	}
	if len(serviceType) > 0 {
		queryParameters["serviceType"] = autorest.Encode("query", serviceType)
	}
	if skipCount != nil {
		queryParameters["skipCount"] = autorest.Encode("query", *skipCount)
	}
	if takeCount != nil {
		queryParameters["takeCount"] = autorest.Encode("query", *takeCount)
	}

	preparer := autorest.CreatePreparer(
		autorest.AsGet(),
		autorest.WithBaseURL(client.BaseURI),
		autorest.WithPath("/providers/Microsoft.ADHybridHealthService/services"),
		autorest.WithQueryParameters(queryParameters))
	return preparer.Prepare((&http.Request{}).WithContext(ctx))
}

// GetServicesSender sends the GetServices request. The method will close the
// http.Response Body if it receives an error.
func (client ServicesClient) GetServicesSender(req *http.Request) (*http.Response, error) {
	return autorest.SendWithSender(client, req,
		autorest.DoRetryForStatusCodes(client.RetryAttempts, client.RetryDuration, autorest.StatusCodesForRetry...))
}

// GetServicesResponder handles the response to the GetServices request. The method always
// closes the http.Response Body.
func (client ServicesClient) GetServicesResponder(resp *http.Response) (result Services, err error) {
	err = autorest.Respond(
		resp,
		client.ByInspecting(),
		azure.WithErrorUnlessStatusCode(http.StatusOK),
		autorest.ByUnmarshallingJSON(&result),
		autorest.ByClosing())
	result.Response = autorest.Response{Response: resp}
	return
}

// GetSingleMetricMetadata gets the service related metrics information.
//
// serviceName is the name of the service. metricName is the metric name
func (client ServicesClient) GetSingleMetricMetadata(ctx context.Context, serviceName string, metricName string) (result MetricMetadata, err error) {
	req, err := client.GetSingleMetricMetadataPreparer(ctx, serviceName, metricName)
	if err != nil {
		err = autorest.NewErrorWithError(err, "adhybridhealthservice.ServicesClient", "GetSingleMetricMetadata", nil, "Failure preparing request")
		return
	}

	resp, err := client.GetSingleMetricMetadataSender(req)
	if err != nil {
		result.Response = autorest.Response{Response: resp}
		err = autorest.NewErrorWithError(err, "adhybridhealthservice.ServicesClient", "GetSingleMetricMetadata", resp, "Failure sending request")
		return
	}

	result, err = client.GetSingleMetricMetadataResponder(resp)
	if err != nil {
		err = autorest.NewErrorWithError(err, "adhybridhealthservice.ServicesClient", "GetSingleMetricMetadata", resp, "Failure responding to request")
	}

	return
}

// GetSingleMetricMetadataPreparer prepares the GetSingleMetricMetadata request.
func (client ServicesClient) GetSingleMetricMetadataPreparer(ctx context.Context, serviceName string, metricName string) (*http.Request, error) {
	pathParameters := map[string]interface{}{
		"metricName":  autorest.Encode("path", metricName),
		"serviceName": autorest.Encode("path", serviceName),
	}

	const APIVersion = "2014-01-01"
	queryParameters := map[string]interface{}{
		"api-version": APIVersion,
	}

	preparer := autorest.CreatePreparer(
		autorest.AsGet(),
		autorest.WithBaseURL(client.BaseURI),
		autorest.WithPathParameters("/providers/Microsoft.ADHybridHealthService/services/{serviceName}/metricmetadata/{metricName}", pathParameters),
		autorest.WithQueryParameters(queryParameters))
	return preparer.Prepare((&http.Request{}).WithContext(ctx))
}

// GetSingleMetricMetadataSender sends the GetSingleMetricMetadata request. The method will close the
// http.Response Body if it receives an error.
func (client ServicesClient) GetSingleMetricMetadataSender(req *http.Request) (*http.Response, error) {
	return autorest.SendWithSender(client, req,
		autorest.DoRetryForStatusCodes(client.RetryAttempts, client.RetryDuration, autorest.StatusCodesForRetry...))
}

// GetSingleMetricMetadataResponder handles the response to the GetSingleMetricMetadata request. The method always
// closes the http.Response Body.
func (client ServicesClient) GetSingleMetricMetadataResponder(resp *http.Response) (result MetricMetadata, err error) {
	err = autorest.Respond(
		resp,
		client.ByInspecting(),
		azure.WithErrorUnlessStatusCode(http.StatusOK),
		autorest.ByUnmarshallingJSON(&result),
		autorest.ByClosing())
	result.Response = autorest.Response{Response: resp}
	return
}

// PostServices onboards a service for a given tenant in Azure Active Directory Connect Health.
//
// service is the service object.
func (client ServicesClient) PostServices(ctx context.Context, service Service) (result Service, err error) {
	req, err := client.PostServicesPreparer(ctx, service)
	if err != nil {
		err = autorest.NewErrorWithError(err, "adhybridhealthservice.ServicesClient", "PostServices", nil, "Failure preparing request")
		return
	}

	resp, err := client.PostServicesSender(req)
	if err != nil {
		result.Response = autorest.Response{Response: resp}
		err = autorest.NewErrorWithError(err, "adhybridhealthservice.ServicesClient", "PostServices", resp, "Failure sending request")
		return
	}

	result, err = client.PostServicesResponder(resp)
	if err != nil {
		err = autorest.NewErrorWithError(err, "adhybridhealthservice.ServicesClient", "PostServices", resp, "Failure responding to request")
	}

	return
}

// PostServicesPreparer prepares the PostServices request.
func (client ServicesClient) PostServicesPreparer(ctx context.Context, service Service) (*http.Request, error) {
	const APIVersion = "2014-01-01"
	queryParameters := map[string]interface{}{
		"api-version": APIVersion,
	}

	preparer := autorest.CreatePreparer(
		autorest.AsContentType("application/json; charset=utf-8"),
		autorest.AsPost(),
		autorest.WithBaseURL(client.BaseURI),
		autorest.WithPath("/providers/Microsoft.ADHybridHealthService/services"),
		autorest.WithJSON(service),
		autorest.WithQueryParameters(queryParameters))
	return preparer.Prepare((&http.Request{}).WithContext(ctx))
}

// PostServicesSender sends the PostServices request. The method will close the
// http.Response Body if it receives an error.
func (client ServicesClient) PostServicesSender(req *http.Request) (*http.Response, error) {
	return autorest.SendWithSender(client, req,
		autorest.DoRetryForStatusCodes(client.RetryAttempts, client.RetryDuration, autorest.StatusCodesForRetry...))
}

// PostServicesResponder handles the response to the PostServices request. The method always
// closes the http.Response Body.
func (client ServicesClient) PostServicesResponder(resp *http.Response) (result Service, err error) {
	err = autorest.Respond(
		resp,
		client.ByInspecting(),
		azure.WithErrorUnlessStatusCode(http.StatusOK),
		autorest.ByUnmarshallingJSON(&result),
		autorest.ByClosing())
	result.Response = autorest.Response{Response: resp}
	return
}

// UpdateService updates the service properties of an onboarded service.
//
// serviceName is the name of the service which needs to be deleted. service is the service object.
func (client ServicesClient) UpdateService(ctx context.Context, serviceName string, service Service) (result Service, err error) {
	req, err := client.UpdateServicePreparer(ctx, serviceName, service)
	if err != nil {
		err = autorest.NewErrorWithError(err, "adhybridhealthservice.ServicesClient", "UpdateService", nil, "Failure preparing request")
		return
	}

	resp, err := client.UpdateServiceSender(req)
	if err != nil {
		result.Response = autorest.Response{Response: resp}
		err = autorest.NewErrorWithError(err, "adhybridhealthservice.ServicesClient", "UpdateService", resp, "Failure sending request")
		return
	}

	result, err = client.UpdateServiceResponder(resp)
	if err != nil {
		err = autorest.NewErrorWithError(err, "adhybridhealthservice.ServicesClient", "UpdateService", resp, "Failure responding to request")
	}

	return
}

// UpdateServicePreparer prepares the UpdateService request.
func (client ServicesClient) UpdateServicePreparer(ctx context.Context, serviceName string, service Service) (*http.Request, error) {
	pathParameters := map[string]interface{}{
		"serviceName": autorest.Encode("path", serviceName),
	}

	const APIVersion = "2014-01-01"
	queryParameters := map[string]interface{}{
		"api-version": APIVersion,
	}

	preparer := autorest.CreatePreparer(
		autorest.AsContentType("application/json; charset=utf-8"),
		autorest.AsPatch(),
		autorest.WithBaseURL(client.BaseURI),
		autorest.WithPathParameters("/providers/Microsoft.ADHybridHealthService/services/{serviceName}", pathParameters),
		autorest.WithJSON(service),
		autorest.WithQueryParameters(queryParameters))
	return preparer.Prepare((&http.Request{}).WithContext(ctx))
}

// UpdateServiceSender sends the UpdateService request. The method will close the
// http.Response Body if it receives an error.
func (client ServicesClient) UpdateServiceSender(req *http.Request) (*http.Response, error) {
	return autorest.SendWithSender(client, req,
		autorest.DoRetryForStatusCodes(client.RetryAttempts, client.RetryDuration, autorest.StatusCodesForRetry...))
}

// UpdateServiceResponder handles the response to the UpdateService request. The method always
// closes the http.Response Body.
func (client ServicesClient) UpdateServiceResponder(resp *http.Response) (result Service, err error) {
	err = autorest.Respond(
		resp,
		client.ByInspecting(),
		azure.WithErrorUnlessStatusCode(http.StatusOK),
		autorest.ByUnmarshallingJSON(&result),
		autorest.ByClosing())
	result.Response = autorest.Response{Response: resp}
	return
}

// UpdateServiceMonitoringConfiguration updates the service level monitoring configuration.
//
// serviceName is the name of the service. configurationSetting is the mnitoring configuration to update
func (client ServicesClient) UpdateServiceMonitoringConfiguration(ctx context.Context, serviceName string, configurationSetting Item) (result autorest.Response, err error) {
	req, err := client.UpdateServiceMonitoringConfigurationPreparer(ctx, serviceName, configurationSetting)
	if err != nil {
		err = autorest.NewErrorWithError(err, "adhybridhealthservice.ServicesClient", "UpdateServiceMonitoringConfiguration", nil, "Failure preparing request")
		return
	}

	resp, err := client.UpdateServiceMonitoringConfigurationSender(req)
	if err != nil {
		result.Response = resp
		err = autorest.NewErrorWithError(err, "adhybridhealthservice.ServicesClient", "UpdateServiceMonitoringConfiguration", resp, "Failure sending request")
		return
	}

	result, err = client.UpdateServiceMonitoringConfigurationResponder(resp)
	if err != nil {
		err = autorest.NewErrorWithError(err, "adhybridhealthservice.ServicesClient", "UpdateServiceMonitoringConfiguration", resp, "Failure responding to request")
	}

	return
}

// UpdateServiceMonitoringConfigurationPreparer prepares the UpdateServiceMonitoringConfiguration request.
func (client ServicesClient) UpdateServiceMonitoringConfigurationPreparer(ctx context.Context, serviceName string, configurationSetting Item) (*http.Request, error) {
	pathParameters := map[string]interface{}{
		"serviceName": autorest.Encode("path", serviceName),
	}

	const APIVersion = "2014-01-01"
	queryParameters := map[string]interface{}{
		"api-version": APIVersion,
	}

	preparer := autorest.CreatePreparer(
		autorest.AsContentType("application/json; charset=utf-8"),
		autorest.AsPatch(),
		autorest.WithBaseURL(client.BaseURI),
		autorest.WithPathParameters("/providers/Microsoft.ADHybridHealthService/services/{serviceName}/monitoringconfiguration", pathParameters),
		autorest.WithJSON(configurationSetting),
		autorest.WithQueryParameters(queryParameters))
	return preparer.Prepare((&http.Request{}).WithContext(ctx))
}

// UpdateServiceMonitoringConfigurationSender sends the UpdateServiceMonitoringConfiguration request. The method will close the
// http.Response Body if it receives an error.
func (client ServicesClient) UpdateServiceMonitoringConfigurationSender(req *http.Request) (*http.Response, error) {
	return autorest.SendWithSender(client, req,
		autorest.DoRetryForStatusCodes(client.RetryAttempts, client.RetryDuration, autorest.StatusCodesForRetry...))
}

// UpdateServiceMonitoringConfigurationResponder handles the response to the UpdateServiceMonitoringConfiguration request. The method always
// closes the http.Response Body.
func (client ServicesClient) UpdateServiceMonitoringConfigurationResponder(resp *http.Response) (result autorest.Response, err error) {
	err = autorest.Respond(
		resp,
		client.ByInspecting(),
		azure.WithErrorUnlessStatusCode(http.StatusOK),
		autorest.ByClosing())
	result.Response = resp
	return
}
