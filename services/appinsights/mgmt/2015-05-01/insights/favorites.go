package insights

// Copyright (c) Microsoft and contributors.  All rights reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
// http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
//
// See the License for the specific language governing permissions and
// limitations under the License.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

import (
	"context"
	"encoding/json"
	"fmt"
	"github.com/Azure/azure-pipeline-go/pipeline"
	"io/ioutil"
	"net/http"
)

// FavoritesClient is the composite Swagger for Application Insights Management Client
type FavoritesClient struct {
	ManagementClient
}

// NewFavoritesClient creates an instance of the FavoritesClient client.
func NewFavoritesClient(p pipeline.Pipeline) FavoritesClient {
	return FavoritesClient{NewManagementClient(p)}
}

// List gets a list of favorites defined within an Application Insights component.
//
// resourceGroupName is the name of the resource group. resourceName is the name of the Application Insights component
// resource. favoriteType is the type of favorite. Value can be either shared or user. sourceType is source type of
// favorite to return. When left out, the source type defaults to 'other' (not present in this enum). canFetchContent
// is flag indicating whether or not to return the full content for each applicable favorite. If false, only return
// summary content for favorites. tags is tags that must be present on each favorite returned.
func (client FavoritesClient) List(ctx context.Context, resourceGroupName string, resourceName string, favoriteType string, sourceType FavoriteSourceType, canFetchContent *bool, tags []string) (*ListResponse, error) {
	req, err := client.listPreparer(resourceGroupName, resourceName, favoriteType, sourceType, canFetchContent, tags)
	if err != nil {
		return nil, err
	}
	resp, err := client.Pipeline().Do(ctx, responderPolicyFactory{responder: client.listResponder}, req)
	if err != nil {
		return nil, err
	}
	return resp.(*ListResponse), err
}

// listPreparer prepares the List request.
func (client FavoritesClient) listPreparer(resourceGroupName string, resourceName string, favoriteType string, sourceType FavoriteSourceType, canFetchContent *bool, tags []string) (pipeline.Request, error) {
	u := client.url
	u.Path = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/microsoft.insights/components/{resourceName}/favorites"
	req, err := pipeline.NewRequest("GET", u, nil)
	if err != nil {
		return req, pipeline.NewError(err, "failed to create request")
	}
	params := req.URL.Query()
	params.Set("api-version", APIVersion)
	if favoriteType != stringNone {
		params.Set("favoriteType", fmt.Sprintf("%v", favoriteType))
	}
	if sourceType != FavoriteSourceNone {
		params.Set("sourceType", fmt.Sprintf("%v", sourceType))
	}
	if canFetchContent != nil {
		params.Set("canFetchContent", fmt.Sprintf("%v", *canFetchContent))
	}
	if tags != nil {
		params.Set("tags", fmt.Sprintf("%v", tags, ","))
	}
	req.URL.RawQuery = params.Encode()
	return req, nil
}

// listResponder handles the response to the List request.
func (client FavoritesClient) listResponder(resp pipeline.Response) (pipeline.Response, error) {
	err := validateResponse(resp, http.StatusOK)
	if resp == nil {
		return nil, err
	}
	result := &ListResponse{rawResponse: resp.Response()}
	if err != nil {
		return result, err
	}
	defer resp.Response().Body.Close()
	b, err := ioutil.ReadAll(resp.Response().Body)
	if err != nil {
		return result, NewResponseError(err, resp.Response(), "failed to read response body")
	}
	if len(b) > 0 {
		err = json.Unmarshal(b, &result.Value)
		if err != nil {
			return result, NewResponseError(err, resp.Response(), "failed to unmarshal response body")
		}
	}
	return result, nil
}
