package insights

// Copyright (c) Microsoft and contributors.  All rights reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
// http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
//
// See the License for the specific language governing permissions and
// limitations under the License.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

import (
	"context"
	"github.com/Azure/go-autorest/autorest"
	"github.com/Azure/go-autorest/autorest/azure"
	"net/http"
)

// WorkbookClient is the composite Swagger for Application Insights Management Client
type WorkbookClient struct {
	BaseClient
}

// NewWorkbookClient creates an instance of the WorkbookClient client.
func NewWorkbookClient(subscriptionID string) WorkbookClient {
	return NewWorkbookClientWithBaseURI(DefaultBaseURI, subscriptionID)
}

// NewWorkbookClientWithBaseURI creates an instance of the WorkbookClient client.
func NewWorkbookClientWithBaseURI(baseURI string, subscriptionID string) WorkbookClient {
	return WorkbookClient{NewWithBaseURI(baseURI, subscriptionID)}
}

// CreateLink create a new workbook.
//
// resourceGroupName is the name of the resource group. resourceName is the name of the Application Insights
// component resource. sourceID is azure Resource Id that will fetch all linked workbooks.
func (client WorkbookClient) CreateLink(ctx context.Context, resourceGroupName string, resourceName string, sourceID string) (result autorest.Response, err error) {
	req, err := client.CreateLinkPreparer(ctx, resourceGroupName, resourceName, sourceID)
	if err != nil {
		err = autorest.NewErrorWithError(err, "insights.WorkbookClient", "CreateLink", nil, "Failure preparing request")
		return
	}

	resp, err := client.CreateLinkSender(req)
	if err != nil {
		result.Response = resp
		err = autorest.NewErrorWithError(err, "insights.WorkbookClient", "CreateLink", resp, "Failure sending request")
		return
	}

	result, err = client.CreateLinkResponder(resp)
	if err != nil {
		err = autorest.NewErrorWithError(err, "insights.WorkbookClient", "CreateLink", resp, "Failure responding to request")
	}

	return
}

// CreateLinkPreparer prepares the CreateLink request.
func (client WorkbookClient) CreateLinkPreparer(ctx context.Context, resourceGroupName string, resourceName string, sourceID string) (*http.Request, error) {
	pathParameters := map[string]interface{}{
		"resourceGroupName": autorest.Encode("path", resourceGroupName),
		"resourceName":      autorest.Encode("path", resourceName),
		"subscriptionId":    autorest.Encode("path", client.SubscriptionID),
	}

	const APIVersion = "2015-05-01"
	queryParameters := map[string]interface{}{
		"api-version": APIVersion,
		"sourceId":    autorest.Encode("query", sourceID),
	}

	preparer := autorest.CreatePreparer(
		autorest.AsPut(),
		autorest.WithBaseURL(client.BaseURI),
		autorest.WithPathParameters("/subscriptions/{subscriptionId}/resourceGroup/{resourceGroupName}/resourceName/{resourceName}/providers/microsoft.insights/workbooks", pathParameters),
		autorest.WithQueryParameters(queryParameters))
	return preparer.Prepare((&http.Request{}).WithContext(ctx))
}

// CreateLinkSender sends the CreateLink request. The method will close the
// http.Response Body if it receives an error.
func (client WorkbookClient) CreateLinkSender(req *http.Request) (*http.Response, error) {
	return autorest.SendWithSender(client, req,
		azure.DoRetryWithRegistration(client.Client))
}

// CreateLinkResponder handles the response to the CreateLink request. The method always
// closes the http.Response Body.
func (client WorkbookClient) CreateLinkResponder(resp *http.Response) (result autorest.Response, err error) {
	err = autorest.Respond(
		resp,
		client.ByInspecting(),
		azure.WithErrorUnlessStatusCode(http.StatusOK),
		autorest.ByClosing())
	result.Response = resp
	return
}

// DeleteLink delete a workbook.
//
// resourceGroupName is the name of the resource group. resourceName is the name of the Application Insights
// component resource.
func (client WorkbookClient) DeleteLink(ctx context.Context, resourceGroupName string, resourceName string) (result autorest.Response, err error) {
	req, err := client.DeleteLinkPreparer(ctx, resourceGroupName, resourceName)
	if err != nil {
		err = autorest.NewErrorWithError(err, "insights.WorkbookClient", "DeleteLink", nil, "Failure preparing request")
		return
	}

	resp, err := client.DeleteLinkSender(req)
	if err != nil {
		result.Response = resp
		err = autorest.NewErrorWithError(err, "insights.WorkbookClient", "DeleteLink", resp, "Failure sending request")
		return
	}

	result, err = client.DeleteLinkResponder(resp)
	if err != nil {
		err = autorest.NewErrorWithError(err, "insights.WorkbookClient", "DeleteLink", resp, "Failure responding to request")
	}

	return
}

// DeleteLinkPreparer prepares the DeleteLink request.
func (client WorkbookClient) DeleteLinkPreparer(ctx context.Context, resourceGroupName string, resourceName string) (*http.Request, error) {
	pathParameters := map[string]interface{}{
		"resourceGroupName": autorest.Encode("path", resourceGroupName),
		"resourceName":      autorest.Encode("path", resourceName),
		"subscriptionId":    autorest.Encode("path", client.SubscriptionID),
	}

	const APIVersion = "2015-05-01"
	queryParameters := map[string]interface{}{
		"api-version": APIVersion,
	}

	preparer := autorest.CreatePreparer(
		autorest.AsDelete(),
		autorest.WithBaseURL(client.BaseURI),
		autorest.WithPathParameters("/subscriptions/{subscriptionId}/resourceGroup/{resourceGroupName}/resourceName/{resourceName}/providers/microsoft.insights/workbooks", pathParameters),
		autorest.WithQueryParameters(queryParameters))
	return preparer.Prepare((&http.Request{}).WithContext(ctx))
}

// DeleteLinkSender sends the DeleteLink request. The method will close the
// http.Response Body if it receives an error.
func (client WorkbookClient) DeleteLinkSender(req *http.Request) (*http.Response, error) {
	return autorest.SendWithSender(client, req,
		azure.DoRetryWithRegistration(client.Client))
}

// DeleteLinkResponder handles the response to the DeleteLink request. The method always
// closes the http.Response Body.
func (client WorkbookClient) DeleteLinkResponder(resp *http.Response) (result autorest.Response, err error) {
	err = autorest.Respond(
		resp,
		client.ByInspecting(),
		azure.WithErrorUnlessStatusCode(http.StatusOK),
		autorest.ByClosing())
	result.Response = resp
	return
}

// UpdateLink updates a workbook that has already been added.
//
// resourceGroupName is the name of the resource group. resourceName is the name of the Application Insights
// component resource. sourceID is azure Resource Id that will fetch all linked workbooks.
func (client WorkbookClient) UpdateLink(ctx context.Context, resourceGroupName string, resourceName string, sourceID string) (result Workbook, err error) {
	req, err := client.UpdateLinkPreparer(ctx, resourceGroupName, resourceName, sourceID)
	if err != nil {
		err = autorest.NewErrorWithError(err, "insights.WorkbookClient", "UpdateLink", nil, "Failure preparing request")
		return
	}

	resp, err := client.UpdateLinkSender(req)
	if err != nil {
		result.Response = autorest.Response{Response: resp}
		err = autorest.NewErrorWithError(err, "insights.WorkbookClient", "UpdateLink", resp, "Failure sending request")
		return
	}

	result, err = client.UpdateLinkResponder(resp)
	if err != nil {
		err = autorest.NewErrorWithError(err, "insights.WorkbookClient", "UpdateLink", resp, "Failure responding to request")
	}

	return
}

// UpdateLinkPreparer prepares the UpdateLink request.
func (client WorkbookClient) UpdateLinkPreparer(ctx context.Context, resourceGroupName string, resourceName string, sourceID string) (*http.Request, error) {
	pathParameters := map[string]interface{}{
		"resourceGroupName": autorest.Encode("path", resourceGroupName),
		"resourceName":      autorest.Encode("path", resourceName),
		"subscriptionId":    autorest.Encode("path", client.SubscriptionID),
	}

	const APIVersion = "2015-05-01"
	queryParameters := map[string]interface{}{
		"api-version": APIVersion,
		"sourceId":    autorest.Encode("query", sourceID),
	}

	preparer := autorest.CreatePreparer(
		autorest.AsPatch(),
		autorest.WithBaseURL(client.BaseURI),
		autorest.WithPathParameters("/subscriptions/{subscriptionId}/resourceGroup/{resourceGroupName}/resourceName/{resourceName}/providers/microsoft.insights/workbooks", pathParameters),
		autorest.WithQueryParameters(queryParameters))
	return preparer.Prepare((&http.Request{}).WithContext(ctx))
}

// UpdateLinkSender sends the UpdateLink request. The method will close the
// http.Response Body if it receives an error.
func (client WorkbookClient) UpdateLinkSender(req *http.Request) (*http.Response, error) {
	return autorest.SendWithSender(client, req,
		azure.DoRetryWithRegistration(client.Client))
}

// UpdateLinkResponder handles the response to the UpdateLink request. The method always
// closes the http.Response Body.
func (client WorkbookClient) UpdateLinkResponder(resp *http.Response) (result Workbook, err error) {
	err = autorest.Respond(
		resp,
		client.ByInspecting(),
		azure.WithErrorUnlessStatusCode(http.StatusOK),
		autorest.ByUnmarshallingJSON(&result),
		autorest.ByClosing())
	result.Response = autorest.Response{Response: resp}
	return
}
