package authorization

// Copyright (c) Microsoft and contributors.  All rights reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
// http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
//
// See the License for the specific language governing permissions and
// limitations under the License.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

import (
	"net/http"
)

// Marker represents an opaque value used in paged responses.
type Marker struct {
	val *string
}

// NotDone returns true if the list enumeration should be started or is not yet complete. Specifically, NotDone returns true
// for a just-initialized (zero value) Marker indicating that you should make an initial request to get a result portion from
// the service. NotDone also returns true whenever the service returns an interim result portion. NotDone returns false only
// after the service has returned the final result portion.
func (m Marker) NotDone() bool {
	return m.val == nil || *m.val != ""
}

// UnmarshalXML implements the xml.Unmarshaler interface for Marker.
func (m *Marker) UnmarshalXML(d *xml.Decoder, start xml.StartElement) error {
	var out string
	err := d.DecodeElement(&out, &start)
	m.val = &out
	return err
}

// ClassicAdministrator - Classic Administrators
type ClassicAdministrator struct {
	// ID - The ID of the administrator.
	ID *string `json:"id,omitempty"`
	// Name - The name of the administrator.
	Name *string `json:"name,omitempty"`
	// Type - The type of the administrator.
	Type *string `json:"type,omitempty"`
	// Properties - Properties for the classic administrator.
	Properties *ClassicAdministratorProperties `json:"properties,omitempty"`
}

// ClassicAdministratorListResult - ClassicAdministrator list result information.
type ClassicAdministratorListResult struct {
	rawResponse *http.Response
	// Value - An array of administrators.
	Value []ClassicAdministrator `json:"value,omitempty"`
	// NextLink - The URL to use for getting the next set of results.
	NextLink Marker `json:"NextLink"`
}

// Response returns the raw HTTP response object.
func (calr ClassicAdministratorListResult) Response() *http.Response {
	return calr.rawResponse
}

// StatusCode returns the HTTP status code of the response, e.g. 200.
func (calr ClassicAdministratorListResult) StatusCode() int {
	return calr.rawResponse.StatusCode
}

// Status returns the HTTP status message of the response, e.g. "200 OK".
func (calr ClassicAdministratorListResult) Status() string {
	return calr.rawResponse.Status
}

// ClassicAdministratorProperties - Classic Administrator properties.
type ClassicAdministratorProperties struct {
	// EmailAddress - The email address of the administrator.
	EmailAddress *string `json:"emailAddress,omitempty"`
	// Role - The role of the administrator.
	Role *string `json:"role,omitempty"`
}

// Permission - Role definition permissions.
type Permission struct {
	// Actions - Allowed actions.
	Actions []string `json:"actions,omitempty"`
	// NotActions - Denied actions.
	NotActions []string `json:"notActions,omitempty"`
}

// PermissionGetResult - Permissions information.
type PermissionGetResult struct {
	rawResponse *http.Response
	// Value - An array of permissions.
	Value []Permission `json:"value,omitempty"`
	// NextLink - The URL to use for getting the next set of results.
	NextLink Marker `json:"NextLink"`
}

// Response returns the raw HTTP response object.
func (pgr PermissionGetResult) Response() *http.Response {
	return pgr.rawResponse
}

// StatusCode returns the HTTP status code of the response, e.g. 200.
func (pgr PermissionGetResult) StatusCode() int {
	return pgr.rawResponse.StatusCode
}

// Status returns the HTTP status message of the response, e.g. "200 OK".
func (pgr PermissionGetResult) Status() string {
	return pgr.rawResponse.Status
}

// ProviderOperation - Operation
type ProviderOperation struct {
	// Name - The operation name.
	Name *string `json:"name,omitempty"`
	// DisplayName - The operation display name.
	DisplayName *string `json:"displayName,omitempty"`
	// Description - The operation description.
	Description *string `json:"description,omitempty"`
	// Origin - The operation origin.
	Origin *string `json:"origin,omitempty"`
	// Properties - The operation properties.
	Properties map[string]interface{} `json:"properties,omitempty"`
}

// ProviderOperationsMetadata - Provider Operations metadata
type ProviderOperationsMetadata struct {
	rawResponse *http.Response
	// ID - The provider id.
	ID *string `json:"id,omitempty"`
	// Name - The provider name.
	Name *string `json:"name,omitempty"`
	// Type - The provider type.
	Type *string `json:"type,omitempty"`
	// DisplayName - The provider display name.
	DisplayName *string `json:"displayName,omitempty"`
	// ResourceTypes - The provider resource types
	ResourceTypes []ResourceType `json:"resourceTypes,omitempty"`
	// Operations - The provider operations.
	Operations []ProviderOperation `json:"operations,omitempty"`
}

// Response returns the raw HTTP response object.
func (pom ProviderOperationsMetadata) Response() *http.Response {
	return pom.rawResponse
}

// StatusCode returns the HTTP status code of the response, e.g. 200.
func (pom ProviderOperationsMetadata) StatusCode() int {
	return pom.rawResponse.StatusCode
}

// Status returns the HTTP status message of the response, e.g. "200 OK".
func (pom ProviderOperationsMetadata) Status() string {
	return pom.rawResponse.Status
}

// ProviderOperationsMetadataListResult - Provider operations metadata list
type ProviderOperationsMetadataListResult struct {
	rawResponse *http.Response
	// Value - The list of providers.
	Value []ProviderOperationsMetadata `json:"value,omitempty"`
	// NextLink - The URL to use for getting the next set of results.
	NextLink Marker `json:"NextLink"`
}

// Response returns the raw HTTP response object.
func (pomlr ProviderOperationsMetadataListResult) Response() *http.Response {
	return pomlr.rawResponse
}

// StatusCode returns the HTTP status code of the response, e.g. 200.
func (pomlr ProviderOperationsMetadataListResult) StatusCode() int {
	return pomlr.rawResponse.StatusCode
}

// Status returns the HTTP status message of the response, e.g. "200 OK".
func (pomlr ProviderOperationsMetadataListResult) Status() string {
	return pomlr.rawResponse.Status
}

// ResourceType - Resource Type
type ResourceType struct {
	// Name - The resource type name.
	Name *string `json:"name,omitempty"`
	// DisplayName - The resource type display name.
	DisplayName *string `json:"displayName,omitempty"`
	// Operations - The resource type operations.
	Operations []ProviderOperation `json:"operations,omitempty"`
}

// RoleAssignment - Role Assignments
type RoleAssignment struct {
	rawResponse *http.Response
	// ID - The role assignment ID.
	ID *string `json:"id,omitempty"`
	// Name - The role assignment name.
	Name *string `json:"name,omitempty"`
	// Type - The role assignment type.
	Type *string `json:"type,omitempty"`
	// Properties - Role assignment properties.
	Properties *RoleAssignmentPropertiesWithScope `json:"properties,omitempty"`
}

// Response returns the raw HTTP response object.
func (ra RoleAssignment) Response() *http.Response {
	return ra.rawResponse
}

// StatusCode returns the HTTP status code of the response, e.g. 200.
func (ra RoleAssignment) StatusCode() int {
	return ra.rawResponse.StatusCode
}

// Status returns the HTTP status message of the response, e.g. "200 OK".
func (ra RoleAssignment) Status() string {
	return ra.rawResponse.Status
}

// RoleAssignmentCreateParameters - Role assignment create parameters.
type RoleAssignmentCreateParameters struct {
	// Properties - Role assignment properties.
	Properties *RoleAssignmentProperties `json:"properties,omitempty"`
}

// RoleAssignmentFilter - Role Assignments filter
type RoleAssignmentFilter struct {
	// PrincipalID - Returns role assignment of the specific principal.
	PrincipalID *string `json:"principalId,omitempty"`
}

// RoleAssignmentListResult - Role assignment list operation result.
type RoleAssignmentListResult struct {
	rawResponse *http.Response
	// Value - Role assignment list.
	Value []RoleAssignment `json:"value,omitempty"`
	// NextLink - The URL to use for getting the next set of results.
	NextLink Marker `json:"NextLink"`
}

// Response returns the raw HTTP response object.
func (ralr RoleAssignmentListResult) Response() *http.Response {
	return ralr.rawResponse
}

// StatusCode returns the HTTP status code of the response, e.g. 200.
func (ralr RoleAssignmentListResult) StatusCode() int {
	return ralr.rawResponse.StatusCode
}

// Status returns the HTTP status message of the response, e.g. "200 OK".
func (ralr RoleAssignmentListResult) Status() string {
	return ralr.rawResponse.Status
}

// RoleAssignmentProperties - Role assignment properties.
type RoleAssignmentProperties struct {
	// RoleDefinitionID - The role definition ID used in the role assignment.
	RoleDefinitionID *string `json:"roleDefinitionId,omitempty"`
	// PrincipalID - The principal ID assigned to the role. This maps to the ID inside the Active Directory. It can point to a user, service principal, or security group.
	PrincipalID *string `json:"principalId,omitempty"`
}

// RoleAssignmentPropertiesWithScope - Role assignment properties with scope.
type RoleAssignmentPropertiesWithScope struct {
	// Scope - The role assignment scope.
	Scope *string `json:"scope,omitempty"`
	// RoleDefinitionID - The role definition ID.
	RoleDefinitionID *string `json:"roleDefinitionId,omitempty"`
	// PrincipalID - The principal ID.
	PrincipalID *string `json:"principalId,omitempty"`
}

// RoleDefinition - Role definition.
type RoleDefinition struct {
	rawResponse *http.Response
	// ID - The role definition ID.
	ID *string `json:"id,omitempty"`
	// Name - The role definition name.
	Name *string `json:"name,omitempty"`
	// Type - The role definition type.
	Type *string `json:"type,omitempty"`
	// Properties - Role definition properties.
	Properties *RoleDefinitionProperties `json:"properties,omitempty"`
}

// Response returns the raw HTTP response object.
func (rd RoleDefinition) Response() *http.Response {
	return rd.rawResponse
}

// StatusCode returns the HTTP status code of the response, e.g. 200.
func (rd RoleDefinition) StatusCode() int {
	return rd.rawResponse.StatusCode
}

// Status returns the HTTP status message of the response, e.g. "200 OK".
func (rd RoleDefinition) Status() string {
	return rd.rawResponse.Status
}

// RoleDefinitionFilter - Role Definitions filter
type RoleDefinitionFilter struct {
	// RoleName - Returns role definition with the specific name.
	RoleName *string `json:"roleName,omitempty"`
}

// RoleDefinitionListResult - Role definition list operation result.
type RoleDefinitionListResult struct {
	rawResponse *http.Response
	// Value - Role definition list.
	Value []RoleDefinition `json:"value,omitempty"`
	// NextLink - The URL to use for getting the next set of results.
	NextLink Marker `json:"NextLink"`
}

// Response returns the raw HTTP response object.
func (rdlr RoleDefinitionListResult) Response() *http.Response {
	return rdlr.rawResponse
}

// StatusCode returns the HTTP status code of the response, e.g. 200.
func (rdlr RoleDefinitionListResult) StatusCode() int {
	return rdlr.rawResponse.StatusCode
}

// Status returns the HTTP status message of the response, e.g. "200 OK".
func (rdlr RoleDefinitionListResult) Status() string {
	return rdlr.rawResponse.Status
}

// RoleDefinitionProperties - Role definition properties.
type RoleDefinitionProperties struct {
	// RoleName - The role name.
	RoleName *string `json:"roleName,omitempty"`
	// Description - The role definition description.
	Description *string `json:"description,omitempty"`
	// Type - The role type.
	Type *string `json:"type,omitempty"`
	// Permissions - Role definition permissions.
	Permissions []Permission `json:"permissions,omitempty"`
	// AssignableScopes - Role definition assignable scopes.
	AssignableScopes []string `json:"assignableScopes,omitempty"`
}
