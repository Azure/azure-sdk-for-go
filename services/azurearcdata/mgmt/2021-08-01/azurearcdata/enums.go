package azurearcdata

// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

// ArcSQLManagedInstanceLicenseType enumerates the values for arc sql managed instance license type.
type ArcSQLManagedInstanceLicenseType string

const (
	// BasePrice ...
	BasePrice ArcSQLManagedInstanceLicenseType = "BasePrice"
	// LicenseIncluded ...
	LicenseIncluded ArcSQLManagedInstanceLicenseType = "LicenseIncluded"
)

// PossibleArcSQLManagedInstanceLicenseTypeValues returns an array of possible values for the ArcSQLManagedInstanceLicenseType const type.
func PossibleArcSQLManagedInstanceLicenseTypeValues() []ArcSQLManagedInstanceLicenseType {
	return []ArcSQLManagedInstanceLicenseType{BasePrice, LicenseIncluded}
}

// ArcSQLServerLicenseType enumerates the values for arc sql server license type.
type ArcSQLServerLicenseType string

const (
	// Free ...
	Free ArcSQLServerLicenseType = "Free"
	// HADR ...
	HADR ArcSQLServerLicenseType = "HADR"
	// Paid ...
	Paid ArcSQLServerLicenseType = "Paid"
	// Undefined ...
	Undefined ArcSQLServerLicenseType = "Undefined"
)

// PossibleArcSQLServerLicenseTypeValues returns an array of possible values for the ArcSQLServerLicenseType const type.
func PossibleArcSQLServerLicenseTypeValues() []ArcSQLServerLicenseType {
	return []ArcSQLServerLicenseType{Free, HADR, Paid, Undefined}
}

// ConnectionStatus enumerates the values for connection status.
type ConnectionStatus string

const (
	// Connected ...
	Connected ConnectionStatus = "Connected"
	// Disconnected ...
	Disconnected ConnectionStatus = "Disconnected"
	// Unknown ...
	Unknown ConnectionStatus = "Unknown"
)

// PossibleConnectionStatusValues returns an array of possible values for the ConnectionStatus const type.
func PossibleConnectionStatusValues() []ConnectionStatus {
	return []ConnectionStatus{Connected, Disconnected, Unknown}
}

// DefenderStatus enumerates the values for defender status.
type DefenderStatus string

const (
	// DefenderStatusProtected ...
	DefenderStatusProtected DefenderStatus = "Protected"
	// DefenderStatusUnknown ...
	DefenderStatusUnknown DefenderStatus = "Unknown"
	// DefenderStatusUnprotected ...
	DefenderStatusUnprotected DefenderStatus = "Unprotected"
)

// PossibleDefenderStatusValues returns an array of possible values for the DefenderStatus const type.
func PossibleDefenderStatusValues() []DefenderStatus {
	return []DefenderStatus{DefenderStatusProtected, DefenderStatusUnknown, DefenderStatusUnprotected}
}

// EditionType enumerates the values for edition type.
type EditionType string

const (
	// Developer ...
	Developer EditionType = "Developer"
	// Enterprise ...
	Enterprise EditionType = "Enterprise"
	// Evaluation ...
	Evaluation EditionType = "Evaluation"
	// Express ...
	Express EditionType = "Express"
	// Standard ...
	Standard EditionType = "Standard"
	// Web ...
	Web EditionType = "Web"
)

// PossibleEditionTypeValues returns an array of possible values for the EditionType const type.
func PossibleEditionTypeValues() []EditionType {
	return []EditionType{Developer, Enterprise, Evaluation, Express, Standard, Web}
}

// ExtendedLocationTypes enumerates the values for extended location types.
type ExtendedLocationTypes string

const (
	// CustomLocation ...
	CustomLocation ExtendedLocationTypes = "CustomLocation"
)

// PossibleExtendedLocationTypesValues returns an array of possible values for the ExtendedLocationTypes const type.
func PossibleExtendedLocationTypesValues() []ExtendedLocationTypes {
	return []ExtendedLocationTypes{CustomLocation}
}

// IdentityType enumerates the values for identity type.
type IdentityType string

const (
	// Application ...
	Application IdentityType = "Application"
	// Key ...
	Key IdentityType = "Key"
	// ManagedIdentity ...
	ManagedIdentity IdentityType = "ManagedIdentity"
	// User ...
	User IdentityType = "User"
)

// PossibleIdentityTypeValues returns an array of possible values for the IdentityType const type.
func PossibleIdentityTypeValues() []IdentityType {
	return []IdentityType{Application, Key, ManagedIdentity, User}
}

// Infrastructure enumerates the values for infrastructure.
type Infrastructure string

const (
	// Alibaba ...
	Alibaba Infrastructure = "alibaba"
	// Aws ...
	Aws Infrastructure = "aws"
	// Azure ...
	Azure Infrastructure = "azure"
	// Gcp ...
	Gcp Infrastructure = "gcp"
	// Onpremises ...
	Onpremises Infrastructure = "onpremises"
	// Other ...
	Other Infrastructure = "other"
)

// PossibleInfrastructureValues returns an array of possible values for the Infrastructure const type.
func PossibleInfrastructureValues() []Infrastructure {
	return []Infrastructure{Alibaba, Aws, Azure, Gcp, Onpremises, Other}
}

// OperationOrigin enumerates the values for operation origin.
type OperationOrigin string

const (
	// OperationOriginSystem ...
	OperationOriginSystem OperationOrigin = "system"
	// OperationOriginUser ...
	OperationOriginUser OperationOrigin = "user"
)

// PossibleOperationOriginValues returns an array of possible values for the OperationOrigin const type.
func PossibleOperationOriginValues() []OperationOrigin {
	return []OperationOrigin{OperationOriginSystem, OperationOriginUser}
}

// ResourceIdentityType enumerates the values for resource identity type.
type ResourceIdentityType string

const (
	// SystemAssigned ...
	SystemAssigned ResourceIdentityType = "SystemAssigned"
)

// PossibleResourceIdentityTypeValues returns an array of possible values for the ResourceIdentityType const type.
func PossibleResourceIdentityTypeValues() []ResourceIdentityType {
	return []ResourceIdentityType{SystemAssigned}
}

// SQLManagedInstanceSkuTier enumerates the values for sql managed instance sku tier.
type SQLManagedInstanceSkuTier string

const (
	// BusinessCritical ...
	BusinessCritical SQLManagedInstanceSkuTier = "BusinessCritical"
	// GeneralPurpose ...
	GeneralPurpose SQLManagedInstanceSkuTier = "GeneralPurpose"
)

// PossibleSQLManagedInstanceSkuTierValues returns an array of possible values for the SQLManagedInstanceSkuTier const type.
func PossibleSQLManagedInstanceSkuTierValues() []SQLManagedInstanceSkuTier {
	return []SQLManagedInstanceSkuTier{BusinessCritical, GeneralPurpose}
}

// SQLVersion enumerates the values for sql version.
type SQLVersion string

const (
	// SQLServer2016 ...
	SQLServer2016 SQLVersion = "SQL Server 2016"
	// SQLServer2017 ...
	SQLServer2017 SQLVersion = "SQL Server 2017"
	// SQLServer2019 ...
	SQLServer2019 SQLVersion = "SQL Server 2019"
)

// PossibleSQLVersionValues returns an array of possible values for the SQLVersion const type.
func PossibleSQLVersionValues() []SQLVersion {
	return []SQLVersion{SQLServer2016, SQLServer2017, SQLServer2019}
}
