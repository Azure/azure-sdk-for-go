package billing

// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

import (
	"context"
	"encoding/json"
	"github.com/Azure/go-autorest/autorest"
	"github.com/Azure/go-autorest/autorest/azure"
	"github.com/Azure/go-autorest/autorest/to"
	"github.com/Azure/go-autorest/tracing"
	"net/http"
)

// The package's fully qualified name.
const fqdn = "github.com/Azure/azure-sdk-for-go/services/billing/mgmt/2021-10-01/billing"

// DetachPaymentMethodEligibilityError the details of the error.
type DetachPaymentMethodEligibilityError struct {
	// Code - READ-ONLY; Error code.
	Code *string `json:"code,omitempty"`
	// Message - READ-ONLY; Error message.
	Message *string `json:"message,omitempty"`
	// Details - READ-ONLY; The list of detach payment method eligibility errors.
	Details *[]DetachPaymentMethodErrorDetails `json:"details,omitempty"`
}

// MarshalJSON is the custom marshaler for DetachPaymentMethodEligibilityError.
func (dpmee DetachPaymentMethodEligibilityError) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	return json.Marshal(objectMap)
}

// DetachPaymentMethodEligibilityResult error response indicates that payment method cannot be detached
// from billing profile.
type DetachPaymentMethodEligibilityResult struct {
	// Error - The details of the error.
	Error *DetachPaymentMethodEligibilityError `json:"error,omitempty"`
}

// DetachPaymentMethodErrorDetails error details of the detach payment method eligibility validation.
type DetachPaymentMethodErrorDetails struct {
	// Code - Error code for the detach payment method eligibility validation. Possible values include: 'AzureSubscriptions', 'RecurringCharges', 'ReservedInstances', 'OutstandingCharges', 'PendingCharges'
	Code DetachPaymentMethodEligibilityErrorCode `json:"code,omitempty"`
	// Message - Error message for the detach payment method eligibility validation.
	Message *string `json:"message,omitempty"`
}

// ErrorDetails the details of the error.
type ErrorDetails struct {
	// Code - READ-ONLY; Error code.
	Code *string `json:"code,omitempty"`
	// Message - READ-ONLY; Error message indicating why the operation failed.
	Message *string `json:"message,omitempty"`
	// Target - READ-ONLY; The target of the particular error.
	Target *string `json:"target,omitempty"`
	// Details - READ-ONLY; The sub details of the error.
	Details *[]ErrorSubDetailsItem `json:"details,omitempty"`
}

// MarshalJSON is the custom marshaler for ErrorDetails.
func (ed ErrorDetails) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	return json.Marshal(objectMap)
}

// ErrorResponse error response indicates that the service is not able to process the incoming request. The
// reason is provided in the error message.
type ErrorResponse struct {
	// Error - The details of the error.
	Error *ErrorDetails `json:"error,omitempty"`
}

// ErrorSubDetailsItem ...
type ErrorSubDetailsItem struct {
	// Code - READ-ONLY; Error code.
	Code *string `json:"code,omitempty"`
	// Message - READ-ONLY; Error message indicating why the operation failed.
	Message *string `json:"message,omitempty"`
	// Target - READ-ONLY; The target of the particular error.
	Target *string `json:"target,omitempty"`
}

// MarshalJSON is the custom marshaler for ErrorSubDetailsItem.
func (esdi ErrorSubDetailsItem) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	return json.Marshal(objectMap)
}

// Operation a Billing REST API operation.
type Operation struct {
	// Name - READ-ONLY; Operation name: {provider}/{resource}/{operation}.
	Name *string `json:"name,omitempty"`
	// IsDataAction - READ-ONLY; Identifies if the operation is a data operation.
	IsDataAction *bool `json:"isDataAction,omitempty"`
	// Display - The object that represents the operation.
	Display *OperationDisplay `json:"display,omitempty"`
}

// MarshalJSON is the custom marshaler for Operation.
func (o Operation) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	if o.Display != nil {
		objectMap["display"] = o.Display
	}
	return json.Marshal(objectMap)
}

// OperationDisplay the object that represents the operation.
type OperationDisplay struct {
	// Provider - READ-ONLY; Service provider: Microsoft.Billing.
	Provider *string `json:"provider,omitempty"`
	// Resource - READ-ONLY; Resource on which the operation is performed such as invoice and billing subscription.
	Resource *string `json:"resource,omitempty"`
	// Operation - READ-ONLY; Operation type such as read, write and delete.
	Operation *string `json:"operation,omitempty"`
	// Description - READ-ONLY; Description of operation.
	Description *string `json:"description,omitempty"`
}

// MarshalJSON is the custom marshaler for OperationDisplay.
func (o OperationDisplay) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	return json.Marshal(objectMap)
}

// OperationListResult the list of billing operations and a URL link to get the next set of results.
type OperationListResult struct {
	autorest.Response `json:"-"`
	// Value - READ-ONLY; The list of billing operations supported by the Microsoft.Billing resource provider.
	Value *[]Operation `json:"value,omitempty"`
	// NextLink - READ-ONLY; URL to get the next set of operation list results if there are any.
	NextLink *string `json:"nextLink,omitempty"`
}

// MarshalJSON is the custom marshaler for OperationListResult.
func (olr OperationListResult) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	return json.Marshal(objectMap)
}

// OperationListResultIterator provides access to a complete listing of Operation values.
type OperationListResultIterator struct {
	i    int
	page OperationListResultPage
}

// NextWithContext advances to the next value.  If there was an error making
// the request the iterator does not advance and the error is returned.
func (iter *OperationListResultIterator) NextWithContext(ctx context.Context) (err error) {
	if tracing.IsEnabled() {
		ctx = tracing.StartSpan(ctx, fqdn+"/OperationListResultIterator.NextWithContext")
		defer func() {
			sc := -1
			if iter.Response().Response.Response != nil {
				sc = iter.Response().Response.Response.StatusCode
			}
			tracing.EndSpan(ctx, sc, err)
		}()
	}
	iter.i++
	if iter.i < len(iter.page.Values()) {
		return nil
	}
	err = iter.page.NextWithContext(ctx)
	if err != nil {
		iter.i--
		return err
	}
	iter.i = 0
	return nil
}

// Next advances to the next value.  If there was an error making
// the request the iterator does not advance and the error is returned.
// Deprecated: Use NextWithContext() instead.
func (iter *OperationListResultIterator) Next() error {
	return iter.NextWithContext(context.Background())
}

// NotDone returns true if the enumeration should be started or is not yet complete.
func (iter OperationListResultIterator) NotDone() bool {
	return iter.page.NotDone() && iter.i < len(iter.page.Values())
}

// Response returns the raw server response from the last page request.
func (iter OperationListResultIterator) Response() OperationListResult {
	return iter.page.Response()
}

// Value returns the current value or a zero-initialized value if the
// iterator has advanced beyond the end of the collection.
func (iter OperationListResultIterator) Value() Operation {
	if !iter.page.NotDone() {
		return Operation{}
	}
	return iter.page.Values()[iter.i]
}

// Creates a new instance of the OperationListResultIterator type.
func NewOperationListResultIterator(page OperationListResultPage) OperationListResultIterator {
	return OperationListResultIterator{page: page}
}

// IsEmpty returns true if the ListResult contains no values.
func (olr OperationListResult) IsEmpty() bool {
	return olr.Value == nil || len(*olr.Value) == 0
}

// hasNextLink returns true if the NextLink is not empty.
func (olr OperationListResult) hasNextLink() bool {
	return olr.NextLink != nil && len(*olr.NextLink) != 0
}

// operationListResultPreparer prepares a request to retrieve the next set of results.
// It returns nil if no more results exist.
func (olr OperationListResult) operationListResultPreparer(ctx context.Context) (*http.Request, error) {
	if !olr.hasNextLink() {
		return nil, nil
	}
	return autorest.Prepare((&http.Request{}).WithContext(ctx),
		autorest.AsJSON(),
		autorest.AsGet(),
		autorest.WithBaseURL(to.String(olr.NextLink)))
}

// OperationListResultPage contains a page of Operation values.
type OperationListResultPage struct {
	fn  func(context.Context, OperationListResult) (OperationListResult, error)
	olr OperationListResult
}

// NextWithContext advances to the next page of values.  If there was an error making
// the request the page does not advance and the error is returned.
func (page *OperationListResultPage) NextWithContext(ctx context.Context) (err error) {
	if tracing.IsEnabled() {
		ctx = tracing.StartSpan(ctx, fqdn+"/OperationListResultPage.NextWithContext")
		defer func() {
			sc := -1
			if page.Response().Response.Response != nil {
				sc = page.Response().Response.Response.StatusCode
			}
			tracing.EndSpan(ctx, sc, err)
		}()
	}
	for {
		next, err := page.fn(ctx, page.olr)
		if err != nil {
			return err
		}
		page.olr = next
		if !next.hasNextLink() || !next.IsEmpty() {
			break
		}
	}
	return nil
}

// Next advances to the next page of values.  If there was an error making
// the request the page does not advance and the error is returned.
// Deprecated: Use NextWithContext() instead.
func (page *OperationListResultPage) Next() error {
	return page.NextWithContext(context.Background())
}

// NotDone returns true if the page enumeration should be started or is not yet complete.
func (page OperationListResultPage) NotDone() bool {
	return !page.olr.IsEmpty()
}

// Response returns the raw server response from the last page request.
func (page OperationListResultPage) Response() OperationListResult {
	return page.olr
}

// Values returns the slice of values for the current page or nil if there are no values.
func (page OperationListResultPage) Values() []Operation {
	if page.olr.IsEmpty() {
		return nil
	}
	return *page.olr.Value
}

// Creates a new instance of the OperationListResultPage type.
func NewOperationListResultPage(cur OperationListResult, getNextPage func(context.Context, OperationListResult) (OperationListResult, error)) OperationListResultPage {
	return OperationListResultPage{
		fn:  getNextPage,
		olr: cur,
	}
}

// PaymentMethod a payment method.
type PaymentMethod struct {
	autorest.Response        `json:"-"`
	*PaymentMethodProperties `json:"properties,omitempty"`
	// ID - READ-ONLY; Resource Id.
	ID *string `json:"id,omitempty"`
	// Name - READ-ONLY; Resource name.
	Name *string `json:"name,omitempty"`
	// Type - READ-ONLY; Resource type.
	Type *string `json:"type,omitempty"`
}

// MarshalJSON is the custom marshaler for PaymentMethod.
func (pm PaymentMethod) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	if pm.PaymentMethodProperties != nil {
		objectMap["properties"] = pm.PaymentMethodProperties
	}
	return json.Marshal(objectMap)
}

// UnmarshalJSON is the custom unmarshaler for PaymentMethod struct.
func (pm *PaymentMethod) UnmarshalJSON(body []byte) error {
	var m map[string]*json.RawMessage
	err := json.Unmarshal(body, &m)
	if err != nil {
		return err
	}
	for k, v := range m {
		switch k {
		case "properties":
			if v != nil {
				var paymentMethodProperties PaymentMethodProperties
				err = json.Unmarshal(*v, &paymentMethodProperties)
				if err != nil {
					return err
				}
				pm.PaymentMethodProperties = &paymentMethodProperties
			}
		case "id":
			if v != nil {
				var ID string
				err = json.Unmarshal(*v, &ID)
				if err != nil {
					return err
				}
				pm.ID = &ID
			}
		case "name":
			if v != nil {
				var name string
				err = json.Unmarshal(*v, &name)
				if err != nil {
					return err
				}
				pm.Name = &name
			}
		case "type":
			if v != nil {
				var typeVar string
				err = json.Unmarshal(*v, &typeVar)
				if err != nil {
					return err
				}
				pm.Type = &typeVar
			}
		}
	}

	return nil
}

// PaymentMethodAtBillingProfileRemoveFuture an abstraction for monitoring and retrieving the results of a
// long-running operation.
type PaymentMethodAtBillingProfileRemoveFuture struct {
	azure.FutureAPI
	// Result returns the result of the asynchronous operation.
	// If the operation has not completed it will return an error.
	Result func(PaymentMethodAtBillingProfileClient) (autorest.Response, error)
}

// UnmarshalJSON is the custom unmarshaller for CreateFuture.
func (future *PaymentMethodAtBillingProfileRemoveFuture) UnmarshalJSON(body []byte) error {
	var azFuture azure.Future
	if err := json.Unmarshal(body, &azFuture); err != nil {
		return err
	}
	future.FutureAPI = &azFuture
	future.Result = future.result
	return nil
}

// result is the default implementation for PaymentMethodAtBillingProfileRemoveFuture.Result.
func (future *PaymentMethodAtBillingProfileRemoveFuture) result(client PaymentMethodAtBillingProfileClient) (ar autorest.Response, err error) {
	var done bool
	done, err = future.DoneWithContext(context.Background(), client)
	if err != nil {
		err = autorest.NewErrorWithError(err, "billing.PaymentMethodAtBillingProfileRemoveFuture", "Result", future.Response(), "Polling failure")
		return
	}
	if !done {
		ar.Response = future.Response()
		err = azure.NewAsyncOpIncompleteError("billing.PaymentMethodAtBillingProfileRemoveFuture")
		return
	}
	ar.Response = future.Response()
	return
}

// PaymentMethodLink a payment method link.
type PaymentMethodLink struct {
	autorest.Response            `json:"-"`
	*PaymentMethodLinkProperties `json:"properties,omitempty"`
	// ID - READ-ONLY; Resource Id.
	ID *string `json:"id,omitempty"`
	// Name - READ-ONLY; Resource name.
	Name *string `json:"name,omitempty"`
	// Type - READ-ONLY; Resource type.
	Type *string `json:"type,omitempty"`
}

// MarshalJSON is the custom marshaler for PaymentMethodLink.
func (pml PaymentMethodLink) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	if pml.PaymentMethodLinkProperties != nil {
		objectMap["properties"] = pml.PaymentMethodLinkProperties
	}
	return json.Marshal(objectMap)
}

// UnmarshalJSON is the custom unmarshaler for PaymentMethodLink struct.
func (pml *PaymentMethodLink) UnmarshalJSON(body []byte) error {
	var m map[string]*json.RawMessage
	err := json.Unmarshal(body, &m)
	if err != nil {
		return err
	}
	for k, v := range m {
		switch k {
		case "properties":
			if v != nil {
				var paymentMethodLinkProperties PaymentMethodLinkProperties
				err = json.Unmarshal(*v, &paymentMethodLinkProperties)
				if err != nil {
					return err
				}
				pml.PaymentMethodLinkProperties = &paymentMethodLinkProperties
			}
		case "id":
			if v != nil {
				var ID string
				err = json.Unmarshal(*v, &ID)
				if err != nil {
					return err
				}
				pml.ID = &ID
			}
		case "name":
			if v != nil {
				var name string
				err = json.Unmarshal(*v, &name)
				if err != nil {
					return err
				}
				pml.Name = &name
			}
		case "type":
			if v != nil {
				var typeVar string
				err = json.Unmarshal(*v, &typeVar)
				if err != nil {
					return err
				}
				pml.Type = &typeVar
			}
		}
	}

	return nil
}

// PaymentMethodLinkProperties the properties of a payment method link.
type PaymentMethodLinkProperties struct {
	// PaymentMethod - READ-ONLY; Projection of a payment method
	PaymentMethod *PaymentMethodProjectionProperties `json:"paymentMethod,omitempty"`
}

// MarshalJSON is the custom marshaler for PaymentMethodLinkProperties.
func (pmlp PaymentMethodLinkProperties) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	return json.Marshal(objectMap)
}

// PaymentMethodLinksListResult the list of payment method links.
type PaymentMethodLinksListResult struct {
	autorest.Response `json:"-"`
	// Value - READ-ONLY; The list of payment method links.
	Value *[]PaymentMethodLink `json:"value,omitempty"`
	// NextLink - READ-ONLY; The link (url) to the next page of results.
	NextLink *string `json:"nextLink,omitempty"`
}

// MarshalJSON is the custom marshaler for PaymentMethodLinksListResult.
func (pmllr PaymentMethodLinksListResult) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	return json.Marshal(objectMap)
}

// PaymentMethodLinksListResultIterator provides access to a complete listing of PaymentMethodLink values.
type PaymentMethodLinksListResultIterator struct {
	i    int
	page PaymentMethodLinksListResultPage
}

// NextWithContext advances to the next value.  If there was an error making
// the request the iterator does not advance and the error is returned.
func (iter *PaymentMethodLinksListResultIterator) NextWithContext(ctx context.Context) (err error) {
	if tracing.IsEnabled() {
		ctx = tracing.StartSpan(ctx, fqdn+"/PaymentMethodLinksListResultIterator.NextWithContext")
		defer func() {
			sc := -1
			if iter.Response().Response.Response != nil {
				sc = iter.Response().Response.Response.StatusCode
			}
			tracing.EndSpan(ctx, sc, err)
		}()
	}
	iter.i++
	if iter.i < len(iter.page.Values()) {
		return nil
	}
	err = iter.page.NextWithContext(ctx)
	if err != nil {
		iter.i--
		return err
	}
	iter.i = 0
	return nil
}

// Next advances to the next value.  If there was an error making
// the request the iterator does not advance and the error is returned.
// Deprecated: Use NextWithContext() instead.
func (iter *PaymentMethodLinksListResultIterator) Next() error {
	return iter.NextWithContext(context.Background())
}

// NotDone returns true if the enumeration should be started or is not yet complete.
func (iter PaymentMethodLinksListResultIterator) NotDone() bool {
	return iter.page.NotDone() && iter.i < len(iter.page.Values())
}

// Response returns the raw server response from the last page request.
func (iter PaymentMethodLinksListResultIterator) Response() PaymentMethodLinksListResult {
	return iter.page.Response()
}

// Value returns the current value or a zero-initialized value if the
// iterator has advanced beyond the end of the collection.
func (iter PaymentMethodLinksListResultIterator) Value() PaymentMethodLink {
	if !iter.page.NotDone() {
		return PaymentMethodLink{}
	}
	return iter.page.Values()[iter.i]
}

// Creates a new instance of the PaymentMethodLinksListResultIterator type.
func NewPaymentMethodLinksListResultIterator(page PaymentMethodLinksListResultPage) PaymentMethodLinksListResultIterator {
	return PaymentMethodLinksListResultIterator{page: page}
}

// IsEmpty returns true if the ListResult contains no values.
func (pmllr PaymentMethodLinksListResult) IsEmpty() bool {
	return pmllr.Value == nil || len(*pmllr.Value) == 0
}

// hasNextLink returns true if the NextLink is not empty.
func (pmllr PaymentMethodLinksListResult) hasNextLink() bool {
	return pmllr.NextLink != nil && len(*pmllr.NextLink) != 0
}

// paymentMethodLinksListResultPreparer prepares a request to retrieve the next set of results.
// It returns nil if no more results exist.
func (pmllr PaymentMethodLinksListResult) paymentMethodLinksListResultPreparer(ctx context.Context) (*http.Request, error) {
	if !pmllr.hasNextLink() {
		return nil, nil
	}
	return autorest.Prepare((&http.Request{}).WithContext(ctx),
		autorest.AsJSON(),
		autorest.AsGet(),
		autorest.WithBaseURL(to.String(pmllr.NextLink)))
}

// PaymentMethodLinksListResultPage contains a page of PaymentMethodLink values.
type PaymentMethodLinksListResultPage struct {
	fn    func(context.Context, PaymentMethodLinksListResult) (PaymentMethodLinksListResult, error)
	pmllr PaymentMethodLinksListResult
}

// NextWithContext advances to the next page of values.  If there was an error making
// the request the page does not advance and the error is returned.
func (page *PaymentMethodLinksListResultPage) NextWithContext(ctx context.Context) (err error) {
	if tracing.IsEnabled() {
		ctx = tracing.StartSpan(ctx, fqdn+"/PaymentMethodLinksListResultPage.NextWithContext")
		defer func() {
			sc := -1
			if page.Response().Response.Response != nil {
				sc = page.Response().Response.Response.StatusCode
			}
			tracing.EndSpan(ctx, sc, err)
		}()
	}
	for {
		next, err := page.fn(ctx, page.pmllr)
		if err != nil {
			return err
		}
		page.pmllr = next
		if !next.hasNextLink() || !next.IsEmpty() {
			break
		}
	}
	return nil
}

// Next advances to the next page of values.  If there was an error making
// the request the page does not advance and the error is returned.
// Deprecated: Use NextWithContext() instead.
func (page *PaymentMethodLinksListResultPage) Next() error {
	return page.NextWithContext(context.Background())
}

// NotDone returns true if the page enumeration should be started or is not yet complete.
func (page PaymentMethodLinksListResultPage) NotDone() bool {
	return !page.pmllr.IsEmpty()
}

// Response returns the raw server response from the last page request.
func (page PaymentMethodLinksListResultPage) Response() PaymentMethodLinksListResult {
	return page.pmllr
}

// Values returns the slice of values for the current page or nil if there are no values.
func (page PaymentMethodLinksListResultPage) Values() []PaymentMethodLink {
	if page.pmllr.IsEmpty() {
		return nil
	}
	return *page.pmllr.Value
}

// Creates a new instance of the PaymentMethodLinksListResultPage type.
func NewPaymentMethodLinksListResultPage(cur PaymentMethodLinksListResult, getNextPage func(context.Context, PaymentMethodLinksListResult) (PaymentMethodLinksListResult, error)) PaymentMethodLinksListResultPage {
	return PaymentMethodLinksListResultPage{
		fn:    getNextPage,
		pmllr: cur,
	}
}

// PaymentMethodLogo logo of payment method.
type PaymentMethodLogo struct {
	// MimeType - READ-ONLY; MIME type of the logo.
	MimeType *string `json:"mimeType,omitempty"`
	// URL - READ-ONLY; Public URL of image of the logo.
	URL *string `json:"url,omitempty"`
}

// MarshalJSON is the custom marshaler for PaymentMethodLogo.
func (pml PaymentMethodLogo) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	return json.Marshal(objectMap)
}

// PaymentMethodProjectionProperties the properties of a payment method projection.
type PaymentMethodProjectionProperties struct {
	// ID - READ-ONLY; Id of payment method.
	ID *string `json:"id,omitempty"`
	// Family - The family of payment method. Possible values include: 'CreditCard', 'CheckWire'
	Family PaymentMethodFamily `json:"family,omitempty"`
	// Type - READ-ONLY; The type of payment method.
	Type *string `json:"type,omitempty"`
	// AccountHolderName - READ-ONLY; The account holder name for the payment method. This is only supported for payment methods with family CreditCard.
	AccountHolderName *string `json:"accountHolderName,omitempty"`
	// Expiration - READ-ONLY; The expiration month and year of the payment method. This is only supported for payment methods with family CreditCard.
	Expiration *string `json:"expiration,omitempty"`
	// LastFourDigits - READ-ONLY; Last four digits of payment method.
	LastFourDigits *string `json:"lastFourDigits,omitempty"`
	// DisplayName - READ-ONLY; The display name of the payment method.
	DisplayName *string `json:"displayName,omitempty"`
	// Logos - The list of logos for the payment method.
	Logos *[]PaymentMethodLogo `json:"logos,omitempty"`
	// Status - Status of the payment method. Possible values include: 'Active', 'Inactive'
	Status PaymentMethodStatus `json:"status,omitempty"`
}

// MarshalJSON is the custom marshaler for PaymentMethodProjectionProperties.
func (pmpp PaymentMethodProjectionProperties) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	if pmpp.Family != "" {
		objectMap["family"] = pmpp.Family
	}
	if pmpp.Logos != nil {
		objectMap["logos"] = pmpp.Logos
	}
	if pmpp.Status != "" {
		objectMap["status"] = pmpp.Status
	}
	return json.Marshal(objectMap)
}

// PaymentMethodProperties the properties of a payment method.
type PaymentMethodProperties struct {
	// Family - The family of payment method. Possible values include: 'CreditCard', 'CheckWire'
	Family PaymentMethodFamily `json:"family,omitempty"`
	// Type - READ-ONLY; The type of payment method.
	Type *string `json:"type,omitempty"`
	// AccountHolderName - READ-ONLY; The account holder name for the payment method. This is only supported for payment methods with family CreditCard.
	AccountHolderName *string `json:"accountHolderName,omitempty"`
	// Expiration - READ-ONLY; The expiration month and year of the payment method. This is only supported for payment methods with family CreditCard.
	Expiration *string `json:"expiration,omitempty"`
	// LastFourDigits - READ-ONLY; Last four digits of payment method.
	LastFourDigits *string `json:"lastFourDigits,omitempty"`
	// DisplayName - READ-ONLY; The display name of the payment method.
	DisplayName *string `json:"displayName,omitempty"`
	// Logos - The list of logos for the payment method.
	Logos *[]PaymentMethodLogo `json:"logos,omitempty"`
	// Status - Status of the payment method. Possible values include: 'Active', 'Inactive'
	Status PaymentMethodStatus `json:"status,omitempty"`
}

// MarshalJSON is the custom marshaler for PaymentMethodProperties.
func (pmp PaymentMethodProperties) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	if pmp.Family != "" {
		objectMap["family"] = pmp.Family
	}
	if pmp.Logos != nil {
		objectMap["logos"] = pmp.Logos
	}
	if pmp.Status != "" {
		objectMap["status"] = pmp.Status
	}
	return json.Marshal(objectMap)
}

// PaymentMethodResource the payment method resource model definition.
type PaymentMethodResource struct {
	// PaymentMethodID - The ID that uniquely identifies a payment method.
	PaymentMethodID *string `json:"paymentMethodId,omitempty"`
}

// PaymentMethodsListResult the list of payment methods.
type PaymentMethodsListResult struct {
	autorest.Response `json:"-"`
	// Value - READ-ONLY; The list of payment methods.
	Value *[]PaymentMethod `json:"value,omitempty"`
	// NextLink - READ-ONLY; The link (url) to the next page of results.
	NextLink *string `json:"nextLink,omitempty"`
}

// MarshalJSON is the custom marshaler for PaymentMethodsListResult.
func (pmlr PaymentMethodsListResult) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	return json.Marshal(objectMap)
}

// PaymentMethodsListResultIterator provides access to a complete listing of PaymentMethod values.
type PaymentMethodsListResultIterator struct {
	i    int
	page PaymentMethodsListResultPage
}

// NextWithContext advances to the next value.  If there was an error making
// the request the iterator does not advance and the error is returned.
func (iter *PaymentMethodsListResultIterator) NextWithContext(ctx context.Context) (err error) {
	if tracing.IsEnabled() {
		ctx = tracing.StartSpan(ctx, fqdn+"/PaymentMethodsListResultIterator.NextWithContext")
		defer func() {
			sc := -1
			if iter.Response().Response.Response != nil {
				sc = iter.Response().Response.Response.StatusCode
			}
			tracing.EndSpan(ctx, sc, err)
		}()
	}
	iter.i++
	if iter.i < len(iter.page.Values()) {
		return nil
	}
	err = iter.page.NextWithContext(ctx)
	if err != nil {
		iter.i--
		return err
	}
	iter.i = 0
	return nil
}

// Next advances to the next value.  If there was an error making
// the request the iterator does not advance and the error is returned.
// Deprecated: Use NextWithContext() instead.
func (iter *PaymentMethodsListResultIterator) Next() error {
	return iter.NextWithContext(context.Background())
}

// NotDone returns true if the enumeration should be started or is not yet complete.
func (iter PaymentMethodsListResultIterator) NotDone() bool {
	return iter.page.NotDone() && iter.i < len(iter.page.Values())
}

// Response returns the raw server response from the last page request.
func (iter PaymentMethodsListResultIterator) Response() PaymentMethodsListResult {
	return iter.page.Response()
}

// Value returns the current value or a zero-initialized value if the
// iterator has advanced beyond the end of the collection.
func (iter PaymentMethodsListResultIterator) Value() PaymentMethod {
	if !iter.page.NotDone() {
		return PaymentMethod{}
	}
	return iter.page.Values()[iter.i]
}

// Creates a new instance of the PaymentMethodsListResultIterator type.
func NewPaymentMethodsListResultIterator(page PaymentMethodsListResultPage) PaymentMethodsListResultIterator {
	return PaymentMethodsListResultIterator{page: page}
}

// IsEmpty returns true if the ListResult contains no values.
func (pmlr PaymentMethodsListResult) IsEmpty() bool {
	return pmlr.Value == nil || len(*pmlr.Value) == 0
}

// hasNextLink returns true if the NextLink is not empty.
func (pmlr PaymentMethodsListResult) hasNextLink() bool {
	return pmlr.NextLink != nil && len(*pmlr.NextLink) != 0
}

// paymentMethodsListResultPreparer prepares a request to retrieve the next set of results.
// It returns nil if no more results exist.
func (pmlr PaymentMethodsListResult) paymentMethodsListResultPreparer(ctx context.Context) (*http.Request, error) {
	if !pmlr.hasNextLink() {
		return nil, nil
	}
	return autorest.Prepare((&http.Request{}).WithContext(ctx),
		autorest.AsJSON(),
		autorest.AsGet(),
		autorest.WithBaseURL(to.String(pmlr.NextLink)))
}

// PaymentMethodsListResultPage contains a page of PaymentMethod values.
type PaymentMethodsListResultPage struct {
	fn   func(context.Context, PaymentMethodsListResult) (PaymentMethodsListResult, error)
	pmlr PaymentMethodsListResult
}

// NextWithContext advances to the next page of values.  If there was an error making
// the request the page does not advance and the error is returned.
func (page *PaymentMethodsListResultPage) NextWithContext(ctx context.Context) (err error) {
	if tracing.IsEnabled() {
		ctx = tracing.StartSpan(ctx, fqdn+"/PaymentMethodsListResultPage.NextWithContext")
		defer func() {
			sc := -1
			if page.Response().Response.Response != nil {
				sc = page.Response().Response.Response.StatusCode
			}
			tracing.EndSpan(ctx, sc, err)
		}()
	}
	for {
		next, err := page.fn(ctx, page.pmlr)
		if err != nil {
			return err
		}
		page.pmlr = next
		if !next.hasNextLink() || !next.IsEmpty() {
			break
		}
	}
	return nil
}

// Next advances to the next page of values.  If there was an error making
// the request the page does not advance and the error is returned.
// Deprecated: Use NextWithContext() instead.
func (page *PaymentMethodsListResultPage) Next() error {
	return page.NextWithContext(context.Background())
}

// NotDone returns true if the page enumeration should be started or is not yet complete.
func (page PaymentMethodsListResultPage) NotDone() bool {
	return !page.pmlr.IsEmpty()
}

// Response returns the raw server response from the last page request.
func (page PaymentMethodsListResultPage) Response() PaymentMethodsListResult {
	return page.pmlr
}

// Values returns the slice of values for the current page or nil if there are no values.
func (page PaymentMethodsListResultPage) Values() []PaymentMethod {
	if page.pmlr.IsEmpty() {
		return nil
	}
	return *page.pmlr.Value
}

// Creates a new instance of the PaymentMethodsListResultPage type.
func NewPaymentMethodsListResultPage(cur PaymentMethodsListResult, getNextPage func(context.Context, PaymentMethodsListResult) (PaymentMethodsListResult, error)) PaymentMethodsListResultPage {
	return PaymentMethodsListResultPage{
		fn:   getNextPage,
		pmlr: cur,
	}
}

// Resource the resource model definition.
type Resource struct {
	// ID - READ-ONLY; Resource Id.
	ID *string `json:"id,omitempty"`
	// Name - READ-ONLY; Resource name.
	Name *string `json:"name,omitempty"`
	// Type - READ-ONLY; Resource type.
	Type *string `json:"type,omitempty"`
}

// MarshalJSON is the custom marshaler for Resource.
func (r Resource) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	return json.Marshal(objectMap)
}
