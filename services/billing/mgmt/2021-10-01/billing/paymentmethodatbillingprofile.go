package billing

// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

import (
	"context"
	"github.com/Azure/go-autorest/autorest"
	"github.com/Azure/go-autorest/autorest/azure"
	"github.com/Azure/go-autorest/tracing"
	"net/http"
)

// PaymentMethodAtBillingProfileClient is the payment management client provides access to payment resources for Azure.
type PaymentMethodAtBillingProfileClient struct {
	BaseClient
}

// NewPaymentMethodAtBillingProfileClient creates an instance of the PaymentMethodAtBillingProfileClient client.
func NewPaymentMethodAtBillingProfileClient() PaymentMethodAtBillingProfileClient {
	return NewPaymentMethodAtBillingProfileClientWithBaseURI(DefaultBaseURI)
}

// NewPaymentMethodAtBillingProfileClientWithBaseURI creates an instance of the PaymentMethodAtBillingProfileClient
// client using a custom endpoint.  Use this when interacting with an Azure cloud that uses a non-standard base URI
// (sovereign clouds, Azure stack).
func NewPaymentMethodAtBillingProfileClientWithBaseURI(baseURI string) PaymentMethodAtBillingProfileClient {
	return PaymentMethodAtBillingProfileClient{NewWithBaseURI(baseURI)}
}

// Remove deletes a payment method link and removes the payment method from a billing profile. The operation is
// supported only for billing accounts with agreement type Microsoft Customer Agreement.
// Parameters:
// billingAccountName - the ID that uniquely identifies a billing account.
// billingProfileName - the ID that uniquely identifies a billing profile.
// paymentMethodName - the ID that uniquely identifies a payment method.
func (client PaymentMethodAtBillingProfileClient) Remove(ctx context.Context, billingAccountName string, billingProfileName string, paymentMethodName string) (result PaymentMethodAtBillingProfileRemoveFuture, err error) {
	if tracing.IsEnabled() {
		ctx = tracing.StartSpan(ctx, fqdn+"/PaymentMethodAtBillingProfileClient.Remove")
		defer func() {
			sc := -1
			if result.FutureAPI != nil && result.FutureAPI.Response() != nil {
				sc = result.FutureAPI.Response().StatusCode
			}
			tracing.EndSpan(ctx, sc, err)
		}()
	}
	req, err := client.RemovePreparer(ctx, billingAccountName, billingProfileName, paymentMethodName)
	if err != nil {
		err = autorest.NewErrorWithError(err, "billing.PaymentMethodAtBillingProfileClient", "Remove", nil, "Failure preparing request")
		return
	}

	result, err = client.RemoveSender(req)
	if err != nil {
		err = autorest.NewErrorWithError(err, "billing.PaymentMethodAtBillingProfileClient", "Remove", result.Response(), "Failure sending request")
		return
	}

	return
}

// RemovePreparer prepares the Remove request.
func (client PaymentMethodAtBillingProfileClient) RemovePreparer(ctx context.Context, billingAccountName string, billingProfileName string, paymentMethodName string) (*http.Request, error) {
	pathParameters := map[string]interface{}{
		"billingAccountName": autorest.Encode("path", billingAccountName),
		"billingProfileName": autorest.Encode("path", billingProfileName),
		"paymentMethodName":  autorest.Encode("path", paymentMethodName),
	}

	const APIVersion = "2021-10-01"
	queryParameters := map[string]interface{}{
		"api-version": APIVersion,
	}

	preparer := autorest.CreatePreparer(
		autorest.AsDelete(),
		autorest.WithBaseURL(client.BaseURI),
		autorest.WithPathParameters("/providers/Microsoft.Billing/billingAccounts/{billingAccountName}/billingProfiles/{billingProfileName}/paymentMethodLinks/{paymentMethodName}", pathParameters),
		autorest.WithQueryParameters(queryParameters))
	return preparer.Prepare((&http.Request{}).WithContext(ctx))
}

// RemoveSender sends the Remove request. The method will close the
// http.Response Body if it receives an error.
func (client PaymentMethodAtBillingProfileClient) RemoveSender(req *http.Request) (future PaymentMethodAtBillingProfileRemoveFuture, err error) {
	var resp *http.Response
	future.FutureAPI = &azure.Future{}
	resp, err = client.Send(req, autorest.DoRetryForStatusCodes(client.RetryAttempts, client.RetryDuration, autorest.StatusCodesForRetry...))
	if err != nil {
		return
	}
	var azf azure.Future
	azf, err = azure.NewFutureFromResponse(resp)
	future.FutureAPI = &azf
	future.Result = future.result
	return
}

// RemoveResponder handles the response to the Remove request. The method always
// closes the http.Response Body.
func (client PaymentMethodAtBillingProfileClient) RemoveResponder(resp *http.Response) (result autorest.Response, err error) {
	err = autorest.Respond(
		resp,
		azure.WithErrorUnlessStatusCode(http.StatusOK, http.StatusAccepted, http.StatusNoContent),
		autorest.ByClosing())
	result.Response = resp
	return
}
