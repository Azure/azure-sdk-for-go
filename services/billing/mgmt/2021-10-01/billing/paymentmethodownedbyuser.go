package billing

// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

import (
	"context"
	"github.com/Azure/go-autorest/autorest"
	"github.com/Azure/go-autorest/autorest/azure"
	"github.com/Azure/go-autorest/tracing"
	"net/http"
)

// PaymentMethodOwnedByUserClient is the payment management client provides access to payment resources for Azure.
type PaymentMethodOwnedByUserClient struct {
	BaseClient
}

// NewPaymentMethodOwnedByUserClient creates an instance of the PaymentMethodOwnedByUserClient client.
func NewPaymentMethodOwnedByUserClient() PaymentMethodOwnedByUserClient {
	return NewPaymentMethodOwnedByUserClientWithBaseURI(DefaultBaseURI)
}

// NewPaymentMethodOwnedByUserClientWithBaseURI creates an instance of the PaymentMethodOwnedByUserClient client using
// a custom endpoint.  Use this when interacting with an Azure cloud that uses a non-standard base URI (sovereign
// clouds, Azure stack).
func NewPaymentMethodOwnedByUserClientWithBaseURI(baseURI string) PaymentMethodOwnedByUserClient {
	return PaymentMethodOwnedByUserClient{NewWithBaseURI(baseURI)}
}

// Delete deletes a payment method owned by the caller.
// Parameters:
// paymentMethodName - the ID that uniquely identifies a payment method.
func (client PaymentMethodOwnedByUserClient) Delete(ctx context.Context, paymentMethodName string) (result autorest.Response, err error) {
	if tracing.IsEnabled() {
		ctx = tracing.StartSpan(ctx, fqdn+"/PaymentMethodOwnedByUserClient.Delete")
		defer func() {
			sc := -1
			if result.Response != nil {
				sc = result.Response.StatusCode
			}
			tracing.EndSpan(ctx, sc, err)
		}()
	}
	req, err := client.DeletePreparer(ctx, paymentMethodName)
	if err != nil {
		err = autorest.NewErrorWithError(err, "billing.PaymentMethodOwnedByUserClient", "Delete", nil, "Failure preparing request")
		return
	}

	resp, err := client.DeleteSender(req)
	if err != nil {
		result.Response = resp
		err = autorest.NewErrorWithError(err, "billing.PaymentMethodOwnedByUserClient", "Delete", resp, "Failure sending request")
		return
	}

	result, err = client.DeleteResponder(resp)
	if err != nil {
		err = autorest.NewErrorWithError(err, "billing.PaymentMethodOwnedByUserClient", "Delete", resp, "Failure responding to request")
		return
	}

	return
}

// DeletePreparer prepares the Delete request.
func (client PaymentMethodOwnedByUserClient) DeletePreparer(ctx context.Context, paymentMethodName string) (*http.Request, error) {
	pathParameters := map[string]interface{}{
		"paymentMethodName": autorest.Encode("path", paymentMethodName),
	}

	const APIVersion = "2021-10-01"
	queryParameters := map[string]interface{}{
		"api-version": APIVersion,
	}

	preparer := autorest.CreatePreparer(
		autorest.AsDelete(),
		autorest.WithBaseURL(client.BaseURI),
		autorest.WithPathParameters("/providers/Microsoft.Billing/paymentMethods/{paymentMethodName}", pathParameters),
		autorest.WithQueryParameters(queryParameters))
	return preparer.Prepare((&http.Request{}).WithContext(ctx))
}

// DeleteSender sends the Delete request. The method will close the
// http.Response Body if it receives an error.
func (client PaymentMethodOwnedByUserClient) DeleteSender(req *http.Request) (*http.Response, error) {
	return client.Send(req, autorest.DoRetryForStatusCodes(client.RetryAttempts, client.RetryDuration, autorest.StatusCodesForRetry...))
}

// DeleteResponder handles the response to the Delete request. The method always
// closes the http.Response Body.
func (client PaymentMethodOwnedByUserClient) DeleteResponder(resp *http.Response) (result autorest.Response, err error) {
	err = autorest.Respond(
		resp,
		azure.WithErrorUnlessStatusCode(http.StatusOK, http.StatusNoContent),
		autorest.ByClosing())
	result.Response = resp
	return
}

// Get gets a payment method owned by the caller.
// Parameters:
// paymentMethodName - the ID that uniquely identifies a payment method.
func (client PaymentMethodOwnedByUserClient) Get(ctx context.Context, paymentMethodName string) (result PaymentMethod, err error) {
	if tracing.IsEnabled() {
		ctx = tracing.StartSpan(ctx, fqdn+"/PaymentMethodOwnedByUserClient.Get")
		defer func() {
			sc := -1
			if result.Response.Response != nil {
				sc = result.Response.Response.StatusCode
			}
			tracing.EndSpan(ctx, sc, err)
		}()
	}
	req, err := client.GetPreparer(ctx, paymentMethodName)
	if err != nil {
		err = autorest.NewErrorWithError(err, "billing.PaymentMethodOwnedByUserClient", "Get", nil, "Failure preparing request")
		return
	}

	resp, err := client.GetSender(req)
	if err != nil {
		result.Response = autorest.Response{Response: resp}
		err = autorest.NewErrorWithError(err, "billing.PaymentMethodOwnedByUserClient", "Get", resp, "Failure sending request")
		return
	}

	result, err = client.GetResponder(resp)
	if err != nil {
		err = autorest.NewErrorWithError(err, "billing.PaymentMethodOwnedByUserClient", "Get", resp, "Failure responding to request")
		return
	}

	return
}

// GetPreparer prepares the Get request.
func (client PaymentMethodOwnedByUserClient) GetPreparer(ctx context.Context, paymentMethodName string) (*http.Request, error) {
	pathParameters := map[string]interface{}{
		"paymentMethodName": autorest.Encode("path", paymentMethodName),
	}

	const APIVersion = "2021-10-01"
	queryParameters := map[string]interface{}{
		"api-version": APIVersion,
	}

	preparer := autorest.CreatePreparer(
		autorest.AsGet(),
		autorest.WithBaseURL(client.BaseURI),
		autorest.WithPathParameters("/providers/Microsoft.Billing/paymentMethods/{paymentMethodName}", pathParameters),
		autorest.WithQueryParameters(queryParameters))
	return preparer.Prepare((&http.Request{}).WithContext(ctx))
}

// GetSender sends the Get request. The method will close the
// http.Response Body if it receives an error.
func (client PaymentMethodOwnedByUserClient) GetSender(req *http.Request) (*http.Response, error) {
	return client.Send(req, autorest.DoRetryForStatusCodes(client.RetryAttempts, client.RetryDuration, autorest.StatusCodesForRetry...))
}

// GetResponder handles the response to the Get request. The method always
// closes the http.Response Body.
func (client PaymentMethodOwnedByUserClient) GetResponder(resp *http.Response) (result PaymentMethod, err error) {
	err = autorest.Respond(
		resp,
		azure.WithErrorUnlessStatusCode(http.StatusOK),
		autorest.ByUnmarshallingJSON(&result),
		autorest.ByClosing())
	result.Response = autorest.Response{Response: resp}
	return
}

// List lists the payment methods owned by the caller.
func (client PaymentMethodOwnedByUserClient) List(ctx context.Context) (result PaymentMethodsListResultPage, err error) {
	if tracing.IsEnabled() {
		ctx = tracing.StartSpan(ctx, fqdn+"/PaymentMethodOwnedByUserClient.List")
		defer func() {
			sc := -1
			if result.pmlr.Response.Response != nil {
				sc = result.pmlr.Response.Response.StatusCode
			}
			tracing.EndSpan(ctx, sc, err)
		}()
	}
	result.fn = client.listNextResults
	req, err := client.ListPreparer(ctx)
	if err != nil {
		err = autorest.NewErrorWithError(err, "billing.PaymentMethodOwnedByUserClient", "List", nil, "Failure preparing request")
		return
	}

	resp, err := client.ListSender(req)
	if err != nil {
		result.pmlr.Response = autorest.Response{Response: resp}
		err = autorest.NewErrorWithError(err, "billing.PaymentMethodOwnedByUserClient", "List", resp, "Failure sending request")
		return
	}

	result.pmlr, err = client.ListResponder(resp)
	if err != nil {
		err = autorest.NewErrorWithError(err, "billing.PaymentMethodOwnedByUserClient", "List", resp, "Failure responding to request")
		return
	}
	if result.pmlr.hasNextLink() && result.pmlr.IsEmpty() {
		err = result.NextWithContext(ctx)
		return
	}

	return
}

// ListPreparer prepares the List request.
func (client PaymentMethodOwnedByUserClient) ListPreparer(ctx context.Context) (*http.Request, error) {
	const APIVersion = "2021-10-01"
	queryParameters := map[string]interface{}{
		"api-version": APIVersion,
	}

	preparer := autorest.CreatePreparer(
		autorest.AsGet(),
		autorest.WithBaseURL(client.BaseURI),
		autorest.WithPath("/providers/Microsoft.Billing/paymentMethods"),
		autorest.WithQueryParameters(queryParameters))
	return preparer.Prepare((&http.Request{}).WithContext(ctx))
}

// ListSender sends the List request. The method will close the
// http.Response Body if it receives an error.
func (client PaymentMethodOwnedByUserClient) ListSender(req *http.Request) (*http.Response, error) {
	return client.Send(req, autorest.DoRetryForStatusCodes(client.RetryAttempts, client.RetryDuration, autorest.StatusCodesForRetry...))
}

// ListResponder handles the response to the List request. The method always
// closes the http.Response Body.
func (client PaymentMethodOwnedByUserClient) ListResponder(resp *http.Response) (result PaymentMethodsListResult, err error) {
	err = autorest.Respond(
		resp,
		azure.WithErrorUnlessStatusCode(http.StatusOK),
		autorest.ByUnmarshallingJSON(&result),
		autorest.ByClosing())
	result.Response = autorest.Response{Response: resp}
	return
}

// listNextResults retrieves the next set of results, if any.
func (client PaymentMethodOwnedByUserClient) listNextResults(ctx context.Context, lastResults PaymentMethodsListResult) (result PaymentMethodsListResult, err error) {
	req, err := lastResults.paymentMethodsListResultPreparer(ctx)
	if err != nil {
		return result, autorest.NewErrorWithError(err, "billing.PaymentMethodOwnedByUserClient", "listNextResults", nil, "Failure preparing next results request")
	}
	if req == nil {
		return
	}
	resp, err := client.ListSender(req)
	if err != nil {
		result.Response = autorest.Response{Response: resp}
		return result, autorest.NewErrorWithError(err, "billing.PaymentMethodOwnedByUserClient", "listNextResults", resp, "Failure sending next results request")
	}
	result, err = client.ListResponder(resp)
	if err != nil {
		err = autorest.NewErrorWithError(err, "billing.PaymentMethodOwnedByUserClient", "listNextResults", resp, "Failure responding to next results request")
	}
	return
}

// ListComplete enumerates all values, automatically crossing page boundaries as required.
func (client PaymentMethodOwnedByUserClient) ListComplete(ctx context.Context) (result PaymentMethodsListResultIterator, err error) {
	if tracing.IsEnabled() {
		ctx = tracing.StartSpan(ctx, fqdn+"/PaymentMethodOwnedByUserClient.List")
		defer func() {
			sc := -1
			if result.Response().Response.Response != nil {
				sc = result.page.Response().Response.Response.StatusCode
			}
			tracing.EndSpan(ctx, sc, err)
		}()
	}
	result.page, err = client.List(ctx)
	return
}
