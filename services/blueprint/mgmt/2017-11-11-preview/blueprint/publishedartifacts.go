package blueprint

// Copyright (c) Microsoft and contributors.  All rights reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
// http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
//
// See the License for the specific language governing permissions and
// limitations under the License.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

import (
	"context"
	"github.com/Azure/go-autorest/autorest"
	"github.com/Azure/go-autorest/autorest/azure"
	"net/http"
)

// PublishedArtifactsClient is the blueprint Client
type PublishedArtifactsClient struct {
	BaseClient
}

// NewPublishedArtifactsClient creates an instance of the PublishedArtifactsClient client.
func NewPublishedArtifactsClient() PublishedArtifactsClient {
	return NewPublishedArtifactsClientWithBaseURI(DefaultBaseURI)
}

// NewPublishedArtifactsClientWithBaseURI creates an instance of the PublishedArtifactsClient client.
func NewPublishedArtifactsClientWithBaseURI(baseURI string) PublishedArtifactsClient {
	return PublishedArtifactsClient{NewWithBaseURI(baseURI)}
}

// Get get an artifact for a published Blueprint.
// Parameters:
// managementGroupName - managementGroup where blueprint stores.
// blueprintName - name of the blueprint.
// versionID - version of the published blueprint.
// artifactName - name of the artifact.
func (client PublishedArtifactsClient) Get(ctx context.Context, managementGroupName string, blueprintName string, versionID string, artifactName string) (result ArtifactModel, err error) {
	req, err := client.GetPreparer(ctx, managementGroupName, blueprintName, versionID, artifactName)
	if err != nil {
		err = autorest.NewErrorWithError(err, "blueprint.PublishedArtifactsClient", "Get", nil, "Failure preparing request")
		return
	}

	resp, err := client.GetSender(req)
	if err != nil {
		result.Response = autorest.Response{Response: resp}
		err = autorest.NewErrorWithError(err, "blueprint.PublishedArtifactsClient", "Get", resp, "Failure sending request")
		return
	}

	result, err = client.GetResponder(resp)
	if err != nil {
		err = autorest.NewErrorWithError(err, "blueprint.PublishedArtifactsClient", "Get", resp, "Failure responding to request")
	}

	return
}

// GetPreparer prepares the Get request.
func (client PublishedArtifactsClient) GetPreparer(ctx context.Context, managementGroupName string, blueprintName string, versionID string, artifactName string) (*http.Request, error) {
	pathParameters := map[string]interface{}{
		"artifactName":        autorest.Encode("path", artifactName),
		"blueprintName":       autorest.Encode("path", blueprintName),
		"managementGroupName": autorest.Encode("path", managementGroupName),
		"versionId":           autorest.Encode("path", versionID),
	}

	const APIVersion = "2017-11-11-preview"
	queryParameters := map[string]interface{}{
		"api-version": APIVersion,
	}

	preparer := autorest.CreatePreparer(
		autorest.AsGet(),
		autorest.WithBaseURL(client.BaseURI),
		autorest.WithPathParameters("/providers/Microsoft.Management/managementGroups/{managementGroupName}/providers/Microsoft.Blueprint/blueprints/{blueprintName}/versions/{versionId}/artifacts/{artifactName}", pathParameters),
		autorest.WithQueryParameters(queryParameters))
	return preparer.Prepare((&http.Request{}).WithContext(ctx))
}

// GetSender sends the Get request. The method will close the
// http.Response Body if it receives an error.
func (client PublishedArtifactsClient) GetSender(req *http.Request) (*http.Response, error) {
	return autorest.SendWithSender(client, req,
		autorest.DoRetryForStatusCodes(client.RetryAttempts, client.RetryDuration, autorest.StatusCodesForRetry...))
}

// GetResponder handles the response to the Get request. The method always
// closes the http.Response Body.
func (client PublishedArtifactsClient) GetResponder(resp *http.Response) (result ArtifactModel, err error) {
	err = autorest.Respond(
		resp,
		client.ByInspecting(),
		azure.WithErrorUnlessStatusCode(http.StatusOK),
		autorest.ByUnmarshallingJSON(&result),
		autorest.ByClosing())
	result.Response = autorest.Response{Response: resp}
	return
}

// List list artifacts for a published Blueprint.
// Parameters:
// managementGroupName - managementGroup where blueprint stores.
// blueprintName - name of the blueprint.
// versionID - version of the published blueprint.
func (client PublishedArtifactsClient) List(ctx context.Context, managementGroupName string, blueprintName string, versionID string) (result ArtifactListPage, err error) {
	result.fn = client.listNextResults
	req, err := client.ListPreparer(ctx, managementGroupName, blueprintName, versionID)
	if err != nil {
		err = autorest.NewErrorWithError(err, "blueprint.PublishedArtifactsClient", "List", nil, "Failure preparing request")
		return
	}

	resp, err := client.ListSender(req)
	if err != nil {
		result.al.Response = autorest.Response{Response: resp}
		err = autorest.NewErrorWithError(err, "blueprint.PublishedArtifactsClient", "List", resp, "Failure sending request")
		return
	}

	result.al, err = client.ListResponder(resp)
	if err != nil {
		err = autorest.NewErrorWithError(err, "blueprint.PublishedArtifactsClient", "List", resp, "Failure responding to request")
	}

	return
}

// ListPreparer prepares the List request.
func (client PublishedArtifactsClient) ListPreparer(ctx context.Context, managementGroupName string, blueprintName string, versionID string) (*http.Request, error) {
	pathParameters := map[string]interface{}{
		"blueprintName":       autorest.Encode("path", blueprintName),
		"managementGroupName": autorest.Encode("path", managementGroupName),
		"versionId":           autorest.Encode("path", versionID),
	}

	const APIVersion = "2017-11-11-preview"
	queryParameters := map[string]interface{}{
		"api-version": APIVersion,
	}

	preparer := autorest.CreatePreparer(
		autorest.AsGet(),
		autorest.WithBaseURL(client.BaseURI),
		autorest.WithPathParameters("/providers/Microsoft.Management/managementGroups/{managementGroupName}/providers/Microsoft.Blueprint/blueprints/{blueprintName}/versions/{versionId}/artifacts", pathParameters),
		autorest.WithQueryParameters(queryParameters))
	return preparer.Prepare((&http.Request{}).WithContext(ctx))
}

// ListSender sends the List request. The method will close the
// http.Response Body if it receives an error.
func (client PublishedArtifactsClient) ListSender(req *http.Request) (*http.Response, error) {
	return autorest.SendWithSender(client, req,
		autorest.DoRetryForStatusCodes(client.RetryAttempts, client.RetryDuration, autorest.StatusCodesForRetry...))
}

// ListResponder handles the response to the List request. The method always
// closes the http.Response Body.
func (client PublishedArtifactsClient) ListResponder(resp *http.Response) (result ArtifactList, err error) {
	err = autorest.Respond(
		resp,
		client.ByInspecting(),
		azure.WithErrorUnlessStatusCode(http.StatusOK),
		autorest.ByUnmarshallingJSON(&result),
		autorest.ByClosing())
	result.Response = autorest.Response{Response: resp}
	return
}

// listNextResults retrieves the next set of results, if any.
func (client PublishedArtifactsClient) listNextResults(lastResults ArtifactList) (result ArtifactList, err error) {
	req, err := lastResults.artifactListPreparer()
	if err != nil {
		return result, autorest.NewErrorWithError(err, "blueprint.PublishedArtifactsClient", "listNextResults", nil, "Failure preparing next results request")
	}
	if req == nil {
		return
	}
	resp, err := client.ListSender(req)
	if err != nil {
		result.Response = autorest.Response{Response: resp}
		return result, autorest.NewErrorWithError(err, "blueprint.PublishedArtifactsClient", "listNextResults", resp, "Failure sending next results request")
	}
	result, err = client.ListResponder(resp)
	if err != nil {
		err = autorest.NewErrorWithError(err, "blueprint.PublishedArtifactsClient", "listNextResults", resp, "Failure responding to next results request")
	}
	return
}

// ListComplete enumerates all values, automatically crossing page boundaries as required.
func (client PublishedArtifactsClient) ListComplete(ctx context.Context, managementGroupName string, blueprintName string, versionID string) (result ArtifactListIterator, err error) {
	result.page, err = client.List(ctx, managementGroupName, blueprintName, versionID)
	return
}
