package speakeridentificationapi

// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

import (
	"context"
	"github.com/Azure/azure-sdk-for-go/services/cognitiveservices/2021-09-05/speakeridentification"
	"github.com/Azure/go-autorest/autorest"
	"github.com/gofrs/uuid"
	"io"
)

// TextIndependentClientAPI contains the set of methods on the TextIndependentClient type.
type TextIndependentClientAPI interface {
	CreateEnrollment(ctx context.Context, profileID uuid.UUID, audioData io.ReadCloser, ignoreMinLength *bool) (result speakeridentification.TiEnrollmentInfo, err error)
	CreateProfile(ctx context.Context, profileInfo *speakeridentification.LocaleInfo) (result speakeridentification.TiProfileInfo, err error)
	DeleteProfile(ctx context.Context, profileID uuid.UUID) (result autorest.Response, err error)
	GetProfile(ctx context.Context, profileID uuid.UUID) (result speakeridentification.TiProfileInfo, err error)
	IdentifySingleSpeaker(ctx context.Context, profileIds []uuid.UUID, audioData io.ReadCloser, ignoreMinLength *bool) (result speakeridentification.IdentifiedSingleSpeakerInfo, err error)
	ListActivationPhrases(ctx context.Context, locale string) (result speakeridentification.ActivationPhraseInfo, err error)
	ListProfiles(ctx context.Context, maxpagesize *int32) (result speakeridentification.TiProfileInfoListPage, err error)
	ListProfilesComplete(ctx context.Context, maxpagesize *int32) (result speakeridentification.TiProfileInfoListIterator, err error)
	ResetProfile(ctx context.Context, profileID uuid.UUID) (result speakeridentification.TiProfileInfo, err error)
}

var _ TextIndependentClientAPI = (*speakeridentification.TextIndependentClient)(nil)
