package speakerverification

// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

import (
	"context"
	"github.com/Azure/go-autorest/autorest"
	"github.com/Azure/go-autorest/autorest/date"
	"github.com/Azure/go-autorest/autorest/to"
	"github.com/Azure/go-autorest/tracing"
	"github.com/gofrs/uuid"
	"net/http"
)

// The package's fully qualified name.
const fqdn = "github.com/Azure/azure-sdk-for-go/services/cognitiveservices/2021-09-05/speakerverification"

// ActivationPhraseInfo activation phrase list
type ActivationPhraseInfo struct {
	autorest.Response `json:"-"`
	Value             *[]ActivationPhraseInfoValueItem `json:"value,omitempty"`
}

// ActivationPhraseInfoValueItem ...
type ActivationPhraseInfoValueItem struct {
	ActivationPhrase *string `json:"activationPhrase,omitempty"`
}

// LocaleInfo speaker profile locale
type LocaleInfo struct {
	Locale *string `json:"locale,omitempty"`
}

// PassPhraseInfo pass phrase list
type PassPhraseInfo struct {
	autorest.Response `json:"-"`
	Value             *[]PassPhraseInfoValueItem `json:"value,omitempty"`
}

// PassPhraseInfoValueItem ...
type PassPhraseInfoValueItem struct {
	PassPhrase *string `json:"passPhrase,omitempty"`
}

// RecognitionInfo speaker recognition result
type RecognitionInfo struct {
	autorest.Response `json:"-"`
	// RecognitionResult - Does audio belong to targeted profile?. Possible values include: 'Accept', 'Reject'
	RecognitionResult ResultType `json:"recognitionResult,omitempty"`
	// Score - A float number indicating the similarity between input audio and targeted voice print. This number must be between 0 and 1. A higher number means higher similarity.
	Score *float64 `json:"score,omitempty"`
}

// SpeakerErrorInfo speaker error message
type SpeakerErrorInfo struct {
	Error *SpeakerErrorInfoError `json:"error,omitempty"`
}

// SpeakerErrorInfoError ...
type SpeakerErrorInfoError struct {
	Code    *string `json:"code,omitempty"`
	Message *string `json:"message,omitempty"`
}

// TdEnrollmentInfo text-Dependent Speaker profile enrollment info
type TdEnrollmentInfo struct {
	autorest.Response `json:"-"`
	ProfileID         *uuid.UUID `json:"profileId,omitempty"`
	// EnrollmentStatus - Possible values include: 'Enrolling', 'Training', 'Enrolled'
	EnrollmentStatus             TrainingStatusType `json:"enrollmentStatus,omitempty"`
	EnrollmentsCount             *int32             `json:"enrollmentsCount,omitempty"`
	EnrollmentsLengthInSec       *float64           `json:"enrollmentsLengthInSec,omitempty"`
	EnrollmentsSpeechLengthInSec *float64           `json:"enrollmentsSpeechLengthInSec,omitempty"`
	RemainingEnrollmentsCount    *int32             `json:"remainingEnrollmentsCount,omitempty"`
	PassPhrase                   *string            `json:"passPhrase,omitempty"`
	// AudioLengthInSec - This enrollment audio length in seconds.
	AudioLengthInSec *float64 `json:"audioLengthInSec,omitempty"`
	// AudioSpeechLengthInSec - This enrollment audio pure speech (which is the amount of audio after removing silence and non-speech segments) length in seconds.
	AudioSpeechLengthInSec *float64 `json:"audioSpeechLengthInSec,omitempty"`
}

// TdProfileInfo text-Dependent Speaker profile info
type TdProfileInfo struct {
	autorest.Response `json:"-"`
	ProfileID         *uuid.UUID `json:"profileId,omitempty"`
	Locale            *string    `json:"locale,omitempty"`
	// EnrollmentStatus - Possible values include: 'Enrolling', 'Training', 'Enrolled'
	EnrollmentStatus             TrainingStatusType `json:"enrollmentStatus,omitempty"`
	CreatedDateTime              *date.Time         `json:"createdDateTime,omitempty"`
	LastUpdatedDateTime          *date.Time         `json:"lastUpdatedDateTime,omitempty"`
	EnrollmentsCount             *int32             `json:"enrollmentsCount,omitempty"`
	EnrollmentsLengthInSec       *float64           `json:"enrollmentsLengthInSec,omitempty"`
	EnrollmentsSpeechLengthInSec *float64           `json:"enrollmentsSpeechLengthInSec,omitempty"`
	RemainingEnrollmentsCount    *int32             `json:"remainingEnrollmentsCount,omitempty"`
	ModelVersion                 *date.Date         `json:"modelVersion,omitempty"`
}

// TdProfileInfoList text-Dependent Speaker profile info list
type TdProfileInfoList struct {
	autorest.Response `json:"-"`
	Value             *[]TdProfileInfo `json:"value,omitempty"`
	NextLink          *string          `json:"nextLink,omitempty"`
}

// TdProfileInfoListIterator provides access to a complete listing of TdProfileInfo values.
type TdProfileInfoListIterator struct {
	i    int
	page TdProfileInfoListPage
}

// NextWithContext advances to the next value.  If there was an error making
// the request the iterator does not advance and the error is returned.
func (iter *TdProfileInfoListIterator) NextWithContext(ctx context.Context) (err error) {
	if tracing.IsEnabled() {
		ctx = tracing.StartSpan(ctx, fqdn+"/TdProfileInfoListIterator.NextWithContext")
		defer func() {
			sc := -1
			if iter.Response().Response.Response != nil {
				sc = iter.Response().Response.Response.StatusCode
			}
			tracing.EndSpan(ctx, sc, err)
		}()
	}
	iter.i++
	if iter.i < len(iter.page.Values()) {
		return nil
	}
	err = iter.page.NextWithContext(ctx)
	if err != nil {
		iter.i--
		return err
	}
	iter.i = 0
	return nil
}

// Next advances to the next value.  If there was an error making
// the request the iterator does not advance and the error is returned.
// Deprecated: Use NextWithContext() instead.
func (iter *TdProfileInfoListIterator) Next() error {
	return iter.NextWithContext(context.Background())
}

// NotDone returns true if the enumeration should be started or is not yet complete.
func (iter TdProfileInfoListIterator) NotDone() bool {
	return iter.page.NotDone() && iter.i < len(iter.page.Values())
}

// Response returns the raw server response from the last page request.
func (iter TdProfileInfoListIterator) Response() TdProfileInfoList {
	return iter.page.Response()
}

// Value returns the current value or a zero-initialized value if the
// iterator has advanced beyond the end of the collection.
func (iter TdProfileInfoListIterator) Value() TdProfileInfo {
	if !iter.page.NotDone() {
		return TdProfileInfo{}
	}
	return iter.page.Values()[iter.i]
}

// Creates a new instance of the TdProfileInfoListIterator type.
func NewTdProfileInfoListIterator(page TdProfileInfoListPage) TdProfileInfoListIterator {
	return TdProfileInfoListIterator{page: page}
}

// IsEmpty returns true if the ListResult contains no values.
func (tpil TdProfileInfoList) IsEmpty() bool {
	return tpil.Value == nil || len(*tpil.Value) == 0
}

// hasNextLink returns true if the NextLink is not empty.
func (tpil TdProfileInfoList) hasNextLink() bool {
	return tpil.NextLink != nil && len(*tpil.NextLink) != 0
}

// tdProfileInfoListPreparer prepares a request to retrieve the next set of results.
// It returns nil if no more results exist.
func (tpil TdProfileInfoList) tdProfileInfoListPreparer(ctx context.Context) (*http.Request, error) {
	if !tpil.hasNextLink() {
		return nil, nil
	}
	return autorest.Prepare((&http.Request{}).WithContext(ctx),
		autorest.AsJSON(),
		autorest.AsGet(),
		autorest.WithBaseURL(to.String(tpil.NextLink)))
}

// TdProfileInfoListPage contains a page of TdProfileInfo values.
type TdProfileInfoListPage struct {
	fn   func(context.Context, TdProfileInfoList) (TdProfileInfoList, error)
	tpil TdProfileInfoList
}

// NextWithContext advances to the next page of values.  If there was an error making
// the request the page does not advance and the error is returned.
func (page *TdProfileInfoListPage) NextWithContext(ctx context.Context) (err error) {
	if tracing.IsEnabled() {
		ctx = tracing.StartSpan(ctx, fqdn+"/TdProfileInfoListPage.NextWithContext")
		defer func() {
			sc := -1
			if page.Response().Response.Response != nil {
				sc = page.Response().Response.Response.StatusCode
			}
			tracing.EndSpan(ctx, sc, err)
		}()
	}
	for {
		next, err := page.fn(ctx, page.tpil)
		if err != nil {
			return err
		}
		page.tpil = next
		if !next.hasNextLink() || !next.IsEmpty() {
			break
		}
	}
	return nil
}

// Next advances to the next page of values.  If there was an error making
// the request the page does not advance and the error is returned.
// Deprecated: Use NextWithContext() instead.
func (page *TdProfileInfoListPage) Next() error {
	return page.NextWithContext(context.Background())
}

// NotDone returns true if the page enumeration should be started or is not yet complete.
func (page TdProfileInfoListPage) NotDone() bool {
	return !page.tpil.IsEmpty()
}

// Response returns the raw server response from the last page request.
func (page TdProfileInfoListPage) Response() TdProfileInfoList {
	return page.tpil
}

// Values returns the slice of values for the current page or nil if there are no values.
func (page TdProfileInfoListPage) Values() []TdProfileInfo {
	if page.tpil.IsEmpty() {
		return nil
	}
	return *page.tpil.Value
}

// Creates a new instance of the TdProfileInfoListPage type.
func NewTdProfileInfoListPage(cur TdProfileInfoList, getNextPage func(context.Context, TdProfileInfoList) (TdProfileInfoList, error)) TdProfileInfoListPage {
	return TdProfileInfoListPage{
		fn:   getNextPage,
		tpil: cur,
	}
}

// TiEnrollmentInfo text-Independent Speaker profile enrollment info
type TiEnrollmentInfo struct {
	autorest.Response `json:"-"`
	ProfileID         *uuid.UUID `json:"profileId,omitempty"`
	// EnrollmentStatus - Possible values include: 'Enrolling', 'Training', 'Enrolled'
	EnrollmentStatus                      TrainingStatusType `json:"enrollmentStatus,omitempty"`
	EnrollmentsCount                      *int32             `json:"enrollmentsCount,omitempty"`
	EnrollmentsLengthInSec                *float64           `json:"enrollmentsLengthInSec,omitempty"`
	EnrollmentsSpeechLengthInSec          *float64           `json:"enrollmentsSpeechLengthInSec,omitempty"`
	RemainingEnrollmentsSpeechLengthInSec *float64           `json:"remainingEnrollmentsSpeechLengthInSec,omitempty"`
	// AudioLengthInSec - This enrollment audio length in seconds.
	AudioLengthInSec *float64 `json:"audioLengthInSec,omitempty"`
	// AudioSpeechLengthInSec - This enrollment audio pure speech (which is the amount of audio after removing silence and non-speech segments) length in seconds.
	AudioSpeechLengthInSec *float64 `json:"audioSpeechLengthInSec,omitempty"`
}

// TiProfileInfo text-Independent Speaker profile info
type TiProfileInfo struct {
	autorest.Response `json:"-"`
	ProfileID         *uuid.UUID `json:"profileId,omitempty"`
	Locale            *string    `json:"locale,omitempty"`
	// ProfileStatus - Possible values include: 'Active', 'Inactive'
	ProfileStatus ProfileStatusType `json:"profileStatus,omitempty"`
	// EnrollmentStatus - Possible values include: 'Enrolling', 'Training', 'Enrolled'
	EnrollmentStatus                      TrainingStatusType `json:"enrollmentStatus,omitempty"`
	CreatedDateTime                       *date.Time         `json:"createdDateTime,omitempty"`
	LastUpdatedDateTime                   *date.Time         `json:"lastUpdatedDateTime,omitempty"`
	EnrollmentsCount                      *int32             `json:"enrollmentsCount,omitempty"`
	EnrollmentsLengthInSec                *float64           `json:"enrollmentsLengthInSec,omitempty"`
	EnrollmentsSpeechLengthInSec          *float64           `json:"enrollmentsSpeechLengthInSec,omitempty"`
	RemainingEnrollmentsSpeechLengthInSec *float64           `json:"remainingEnrollmentsSpeechLengthInSec,omitempty"`
	ModelVersion                          *date.Date         `json:"modelVersion,omitempty"`
}

// TiProfileInfoList text-Independent Speaker profile info list
type TiProfileInfoList struct {
	autorest.Response `json:"-"`
	Value             *[]TiProfileInfo `json:"value,omitempty"`
	NextLink          *string          `json:"nextLink,omitempty"`
}

// TiProfileInfoListIterator provides access to a complete listing of TiProfileInfo values.
type TiProfileInfoListIterator struct {
	i    int
	page TiProfileInfoListPage
}

// NextWithContext advances to the next value.  If there was an error making
// the request the iterator does not advance and the error is returned.
func (iter *TiProfileInfoListIterator) NextWithContext(ctx context.Context) (err error) {
	if tracing.IsEnabled() {
		ctx = tracing.StartSpan(ctx, fqdn+"/TiProfileInfoListIterator.NextWithContext")
		defer func() {
			sc := -1
			if iter.Response().Response.Response != nil {
				sc = iter.Response().Response.Response.StatusCode
			}
			tracing.EndSpan(ctx, sc, err)
		}()
	}
	iter.i++
	if iter.i < len(iter.page.Values()) {
		return nil
	}
	err = iter.page.NextWithContext(ctx)
	if err != nil {
		iter.i--
		return err
	}
	iter.i = 0
	return nil
}

// Next advances to the next value.  If there was an error making
// the request the iterator does not advance and the error is returned.
// Deprecated: Use NextWithContext() instead.
func (iter *TiProfileInfoListIterator) Next() error {
	return iter.NextWithContext(context.Background())
}

// NotDone returns true if the enumeration should be started or is not yet complete.
func (iter TiProfileInfoListIterator) NotDone() bool {
	return iter.page.NotDone() && iter.i < len(iter.page.Values())
}

// Response returns the raw server response from the last page request.
func (iter TiProfileInfoListIterator) Response() TiProfileInfoList {
	return iter.page.Response()
}

// Value returns the current value or a zero-initialized value if the
// iterator has advanced beyond the end of the collection.
func (iter TiProfileInfoListIterator) Value() TiProfileInfo {
	if !iter.page.NotDone() {
		return TiProfileInfo{}
	}
	return iter.page.Values()[iter.i]
}

// Creates a new instance of the TiProfileInfoListIterator type.
func NewTiProfileInfoListIterator(page TiProfileInfoListPage) TiProfileInfoListIterator {
	return TiProfileInfoListIterator{page: page}
}

// IsEmpty returns true if the ListResult contains no values.
func (tpil TiProfileInfoList) IsEmpty() bool {
	return tpil.Value == nil || len(*tpil.Value) == 0
}

// hasNextLink returns true if the NextLink is not empty.
func (tpil TiProfileInfoList) hasNextLink() bool {
	return tpil.NextLink != nil && len(*tpil.NextLink) != 0
}

// tiProfileInfoListPreparer prepares a request to retrieve the next set of results.
// It returns nil if no more results exist.
func (tpil TiProfileInfoList) tiProfileInfoListPreparer(ctx context.Context) (*http.Request, error) {
	if !tpil.hasNextLink() {
		return nil, nil
	}
	return autorest.Prepare((&http.Request{}).WithContext(ctx),
		autorest.AsJSON(),
		autorest.AsGet(),
		autorest.WithBaseURL(to.String(tpil.NextLink)))
}

// TiProfileInfoListPage contains a page of TiProfileInfo values.
type TiProfileInfoListPage struct {
	fn   func(context.Context, TiProfileInfoList) (TiProfileInfoList, error)
	tpil TiProfileInfoList
}

// NextWithContext advances to the next page of values.  If there was an error making
// the request the page does not advance and the error is returned.
func (page *TiProfileInfoListPage) NextWithContext(ctx context.Context) (err error) {
	if tracing.IsEnabled() {
		ctx = tracing.StartSpan(ctx, fqdn+"/TiProfileInfoListPage.NextWithContext")
		defer func() {
			sc := -1
			if page.Response().Response.Response != nil {
				sc = page.Response().Response.Response.StatusCode
			}
			tracing.EndSpan(ctx, sc, err)
		}()
	}
	for {
		next, err := page.fn(ctx, page.tpil)
		if err != nil {
			return err
		}
		page.tpil = next
		if !next.hasNextLink() || !next.IsEmpty() {
			break
		}
	}
	return nil
}

// Next advances to the next page of values.  If there was an error making
// the request the page does not advance and the error is returned.
// Deprecated: Use NextWithContext() instead.
func (page *TiProfileInfoListPage) Next() error {
	return page.NextWithContext(context.Background())
}

// NotDone returns true if the page enumeration should be started or is not yet complete.
func (page TiProfileInfoListPage) NotDone() bool {
	return !page.tpil.IsEmpty()
}

// Response returns the raw server response from the last page request.
func (page TiProfileInfoListPage) Response() TiProfileInfoList {
	return page.tpil
}

// Values returns the slice of values for the current page or nil if there are no values.
func (page TiProfileInfoListPage) Values() []TiProfileInfo {
	if page.tpil.IsEmpty() {
		return nil
	}
	return *page.tpil.Value
}

// Creates a new instance of the TiProfileInfoListPage type.
func NewTiProfileInfoListPage(cur TiProfileInfoList, getNextPage func(context.Context, TiProfileInfoList) (TiProfileInfoList, error)) TiProfileInfoListPage {
	return TiProfileInfoListPage{
		fn:   getNextPage,
		tpil: cur,
	}
}
