package speakerverificationapi

// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

import (
	"context"
	"github.com/Azure/azure-sdk-for-go/services/cognitiveservices/2021-09-05/speakerverification"
	"github.com/Azure/go-autorest/autorest"
	"github.com/gofrs/uuid"
	"io"
)

// TextDependentClientAPI contains the set of methods on the TextDependentClient type.
type TextDependentClientAPI interface {
	CreateEnrollment(ctx context.Context, profileID uuid.UUID, audioData io.ReadCloser) (result speakerverification.TdEnrollmentInfo, err error)
	CreateProfile(ctx context.Context, profileInfo *speakerverification.LocaleInfo) (result speakerverification.TdProfileInfo, err error)
	DeleteProfile(ctx context.Context, profileID uuid.UUID) (result autorest.Response, err error)
	GetProfile(ctx context.Context, profileID uuid.UUID) (result speakerverification.TdProfileInfo, err error)
	ListPhrases(ctx context.Context, locale string) (result speakerverification.PassPhraseInfo, err error)
	ListProfiles(ctx context.Context, maxpagesize *int32) (result speakerverification.TdProfileInfoListPage, err error)
	ListProfilesComplete(ctx context.Context, maxpagesize *int32) (result speakerverification.TdProfileInfoListIterator, err error)
	ResetProfile(ctx context.Context, profileID uuid.UUID) (result speakerverification.TdProfileInfo, err error)
	VerifyProfile(ctx context.Context, profileID uuid.UUID, audioData io.ReadCloser) (result speakerverification.RecognitionInfo, err error)
}

var _ TextDependentClientAPI = (*speakerverification.TextDependentClient)(nil)

// TextIndependentClientAPI contains the set of methods on the TextIndependentClient type.
type TextIndependentClientAPI interface {
	CreateEnrollment(ctx context.Context, profileID uuid.UUID, audioData io.ReadCloser, ignoreMinLength *bool) (result speakerverification.TiEnrollmentInfo, err error)
	CreateProfile(ctx context.Context, profileInfo *speakerverification.LocaleInfo) (result speakerverification.TiProfileInfo, err error)
	DeleteProfile(ctx context.Context, profileID uuid.UUID) (result autorest.Response, err error)
	GetProfile(ctx context.Context, profileID uuid.UUID) (result speakerverification.TiProfileInfo, err error)
	ListActivationPhrases(ctx context.Context, locale string) (result speakerverification.ActivationPhraseInfo, err error)
	ListProfiles(ctx context.Context, maxpagesize *int32) (result speakerverification.TiProfileInfoListPage, err error)
	ListProfilesComplete(ctx context.Context, maxpagesize *int32) (result speakerverification.TiProfileInfoListIterator, err error)
	ResetProfile(ctx context.Context, profileID uuid.UUID) (result speakerverification.TiProfileInfo, err error)
	VerifyProfile(ctx context.Context, profileID uuid.UUID, audioData io.ReadCloser, ignoreMinLength *bool) (result speakerverification.RecognitionInfo, err error)
}

var _ TextIndependentClientAPI = (*speakerverification.TextIndependentClient)(nil)
