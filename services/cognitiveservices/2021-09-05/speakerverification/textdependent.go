package speakerverification

// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

import (
	"context"
	"github.com/Azure/go-autorest/autorest"
	"github.com/Azure/go-autorest/autorest/azure"
	"github.com/Azure/go-autorest/autorest/validation"
	"github.com/Azure/go-autorest/tracing"
	"github.com/gofrs/uuid"
	"io"
	"net/http"
)

// TextDependentClient is the the Azure Cognitive Service Speaker Recognition service provides algorithms that verify
// and identify speakers by their unique voice characteristics.
// Speaker Recognition is used to answer the question "who is speaking?"
type TextDependentClient struct {
	BaseClient
}

// NewTextDependentClient creates an instance of the TextDependentClient client.
func NewTextDependentClient(endpoint string) TextDependentClient {
	return TextDependentClient{New(endpoint)}
}

// CreateEnrollment adds an enrollment to existing profile.
// If the minimum number of requested enrollment audios is reached, a voice print is created.
// If the voice print was created before, it gets recreated from all existing enrollment audios including the new one.
//
// Limitations:
// * Minimum audio input length per request is **1 second**
// * Maximum audio input length per request is **10 seconds**
// * Minimum number of enrollments for creating a voiceprint is **3**
// * Maximum number of enrollments for creating a voiceprint is **50**
// * Minimum audio Signal-to-noise ratio (SNR) is **2dB**
//
// Constraints:
// * First enrollment must match an existing passphrase.
// * All enrollments after the first one, must use the same passphrase used in the first enrollment.
// Parameters:
// profileID - unique identifier for profile id (guid).
// audioData - binary audio file. Supported formats are audio/wav; codecs=audio/pcm. Supports audio up to 5MB.
func (client TextDependentClient) CreateEnrollment(ctx context.Context, profileID uuid.UUID, audioData io.ReadCloser) (result TdEnrollmentInfo, err error) {
	if tracing.IsEnabled() {
		ctx = tracing.StartSpan(ctx, fqdn+"/TextDependentClient.CreateEnrollment")
		defer func() {
			sc := -1
			if result.Response.Response != nil {
				sc = result.Response.Response.StatusCode
			}
			tracing.EndSpan(ctx, sc, err)
		}()
	}
	req, err := client.CreateEnrollmentPreparer(ctx, profileID, audioData)
	if err != nil {
		err = autorest.NewErrorWithError(err, "speakerverification.TextDependentClient", "CreateEnrollment", nil, "Failure preparing request")
		return
	}

	resp, err := client.CreateEnrollmentSender(req)
	if err != nil {
		result.Response = autorest.Response{Response: resp}
		err = autorest.NewErrorWithError(err, "speakerverification.TextDependentClient", "CreateEnrollment", resp, "Failure sending request")
		return
	}

	result, err = client.CreateEnrollmentResponder(resp)
	if err != nil {
		err = autorest.NewErrorWithError(err, "speakerverification.TextDependentClient", "CreateEnrollment", resp, "Failure responding to request")
		return
	}

	return
}

// CreateEnrollmentPreparer prepares the CreateEnrollment request.
func (client TextDependentClient) CreateEnrollmentPreparer(ctx context.Context, profileID uuid.UUID, audioData io.ReadCloser) (*http.Request, error) {
	urlParameters := map[string]interface{}{
		"endpoint": client.Endpoint,
	}

	pathParameters := map[string]interface{}{
		"profileId": autorest.Encode("path", profileID),
	}

	const APIVersion = "2021-09-05"
	queryParameters := map[string]interface{}{
		"api-version": APIVersion,
	}

	preparer := autorest.CreatePreparer(
		autorest.AsContentType("audio/wav; codecs=audio/pcm"),
		autorest.AsPost(),
		autorest.WithCustomBaseURL("{endpoint}/speaker/verification", urlParameters),
		autorest.WithPathParameters("/text-dependent/profiles/{profileId}/enrollments", pathParameters),
		autorest.WithFile(audioData),
		autorest.WithQueryParameters(queryParameters))
	return preparer.Prepare((&http.Request{}).WithContext(ctx))
}

// CreateEnrollmentSender sends the CreateEnrollment request. The method will close the
// http.Response Body if it receives an error.
func (client TextDependentClient) CreateEnrollmentSender(req *http.Request) (*http.Response, error) {
	return client.Send(req, autorest.DoRetryForStatusCodes(client.RetryAttempts, client.RetryDuration, autorest.StatusCodesForRetry...))
}

// CreateEnrollmentResponder handles the response to the CreateEnrollment request. The method always
// closes the http.Response Body.
func (client TextDependentClient) CreateEnrollmentResponder(resp *http.Response) (result TdEnrollmentInfo, err error) {
	err = autorest.Respond(
		resp,
		azure.WithErrorUnlessStatusCode(http.StatusOK, http.StatusCreated),
		autorest.ByUnmarshallingJSON(&result),
		autorest.ByClosing())
	result.Response = autorest.Response{Response: resp}
	return
}

// CreateProfile create a new speaker profile with specified locale.
// Parameters:
// profileInfo - provide following detail info when creating a new profile.
// Fields  | Description
// ------- | ------------
// locale  | Locale for the language of this speaker profile. A complete supported locale list is here:
// <ul><li>**en-US (American English)**</li></li></ul>
func (client TextDependentClient) CreateProfile(ctx context.Context, profileInfo *LocaleInfo) (result TdProfileInfo, err error) {
	if tracing.IsEnabled() {
		ctx = tracing.StartSpan(ctx, fqdn+"/TextDependentClient.CreateProfile")
		defer func() {
			sc := -1
			if result.Response.Response != nil {
				sc = result.Response.Response.StatusCode
			}
			tracing.EndSpan(ctx, sc, err)
		}()
	}
	if err := validation.Validate([]validation.Validation{
		{TargetValue: profileInfo,
			Constraints: []validation.Constraint{{Target: "profileInfo", Name: validation.Null, Rule: false,
				Chain: []validation.Constraint{{Target: "profileInfo.Locale", Name: validation.Null, Rule: true, Chain: nil}}}}}}); err != nil {
		return result, validation.NewError("speakerverification.TextDependentClient", "CreateProfile", err.Error())
	}

	req, err := client.CreateProfilePreparer(ctx, profileInfo)
	if err != nil {
		err = autorest.NewErrorWithError(err, "speakerverification.TextDependentClient", "CreateProfile", nil, "Failure preparing request")
		return
	}

	resp, err := client.CreateProfileSender(req)
	if err != nil {
		result.Response = autorest.Response{Response: resp}
		err = autorest.NewErrorWithError(err, "speakerverification.TextDependentClient", "CreateProfile", resp, "Failure sending request")
		return
	}

	result, err = client.CreateProfileResponder(resp)
	if err != nil {
		err = autorest.NewErrorWithError(err, "speakerverification.TextDependentClient", "CreateProfile", resp, "Failure responding to request")
		return
	}

	return
}

// CreateProfilePreparer prepares the CreateProfile request.
func (client TextDependentClient) CreateProfilePreparer(ctx context.Context, profileInfo *LocaleInfo) (*http.Request, error) {
	urlParameters := map[string]interface{}{
		"endpoint": client.Endpoint,
	}

	const APIVersion = "2021-09-05"
	queryParameters := map[string]interface{}{
		"api-version": APIVersion,
	}

	preparer := autorest.CreatePreparer(
		autorest.AsContentType("application/json; charset=utf-8"),
		autorest.AsPost(),
		autorest.WithCustomBaseURL("{endpoint}/speaker/verification", urlParameters),
		autorest.WithPath("/text-dependent/profiles"),
		autorest.WithQueryParameters(queryParameters))
	if profileInfo != nil {
		preparer = autorest.DecoratePreparer(preparer,
			autorest.WithJSON(profileInfo))
	}
	return preparer.Prepare((&http.Request{}).WithContext(ctx))
}

// CreateProfileSender sends the CreateProfile request. The method will close the
// http.Response Body if it receives an error.
func (client TextDependentClient) CreateProfileSender(req *http.Request) (*http.Response, error) {
	return client.Send(req, autorest.DoRetryForStatusCodes(client.RetryAttempts, client.RetryDuration, autorest.StatusCodesForRetry...))
}

// CreateProfileResponder handles the response to the CreateProfile request. The method always
// closes the http.Response Body.
func (client TextDependentClient) CreateProfileResponder(resp *http.Response) (result TdProfileInfo, err error) {
	err = autorest.Respond(
		resp,
		azure.WithErrorUnlessStatusCode(http.StatusOK, http.StatusCreated),
		autorest.ByUnmarshallingJSON(&result),
		autorest.ByClosing())
	result.Response = autorest.Response{Response: resp}
	return
}

// DeleteProfile deletes an existing profile.
// Parameters:
// profileID - unique identifier for profile id (guid).
func (client TextDependentClient) DeleteProfile(ctx context.Context, profileID uuid.UUID) (result autorest.Response, err error) {
	if tracing.IsEnabled() {
		ctx = tracing.StartSpan(ctx, fqdn+"/TextDependentClient.DeleteProfile")
		defer func() {
			sc := -1
			if result.Response != nil {
				sc = result.Response.StatusCode
			}
			tracing.EndSpan(ctx, sc, err)
		}()
	}
	req, err := client.DeleteProfilePreparer(ctx, profileID)
	if err != nil {
		err = autorest.NewErrorWithError(err, "speakerverification.TextDependentClient", "DeleteProfile", nil, "Failure preparing request")
		return
	}

	resp, err := client.DeleteProfileSender(req)
	if err != nil {
		result.Response = resp
		err = autorest.NewErrorWithError(err, "speakerverification.TextDependentClient", "DeleteProfile", resp, "Failure sending request")
		return
	}

	result, err = client.DeleteProfileResponder(resp)
	if err != nil {
		err = autorest.NewErrorWithError(err, "speakerverification.TextDependentClient", "DeleteProfile", resp, "Failure responding to request")
		return
	}

	return
}

// DeleteProfilePreparer prepares the DeleteProfile request.
func (client TextDependentClient) DeleteProfilePreparer(ctx context.Context, profileID uuid.UUID) (*http.Request, error) {
	urlParameters := map[string]interface{}{
		"endpoint": client.Endpoint,
	}

	pathParameters := map[string]interface{}{
		"profileId": autorest.Encode("path", profileID),
	}

	const APIVersion = "2021-09-05"
	queryParameters := map[string]interface{}{
		"api-version": APIVersion,
	}

	preparer := autorest.CreatePreparer(
		autorest.AsDelete(),
		autorest.WithCustomBaseURL("{endpoint}/speaker/verification", urlParameters),
		autorest.WithPathParameters("/text-dependent/profiles/{profileId}", pathParameters),
		autorest.WithQueryParameters(queryParameters))
	return preparer.Prepare((&http.Request{}).WithContext(ctx))
}

// DeleteProfileSender sends the DeleteProfile request. The method will close the
// http.Response Body if it receives an error.
func (client TextDependentClient) DeleteProfileSender(req *http.Request) (*http.Response, error) {
	return client.Send(req, autorest.DoRetryForStatusCodes(client.RetryAttempts, client.RetryDuration, autorest.StatusCodesForRetry...))
}

// DeleteProfileResponder handles the response to the DeleteProfile request. The method always
// closes the http.Response Body.
func (client TextDependentClient) DeleteProfileResponder(resp *http.Response) (result autorest.Response, err error) {
	err = autorest.Respond(
		resp,
		azure.WithErrorUnlessStatusCode(http.StatusOK, http.StatusNoContent),
		autorest.ByClosing())
	result.Response = resp
	return
}

// GetProfile retrieves a single profile by ID.
// Parameters:
// profileID - unique identifier for profile id (guid).
func (client TextDependentClient) GetProfile(ctx context.Context, profileID uuid.UUID) (result TdProfileInfo, err error) {
	if tracing.IsEnabled() {
		ctx = tracing.StartSpan(ctx, fqdn+"/TextDependentClient.GetProfile")
		defer func() {
			sc := -1
			if result.Response.Response != nil {
				sc = result.Response.Response.StatusCode
			}
			tracing.EndSpan(ctx, sc, err)
		}()
	}
	req, err := client.GetProfilePreparer(ctx, profileID)
	if err != nil {
		err = autorest.NewErrorWithError(err, "speakerverification.TextDependentClient", "GetProfile", nil, "Failure preparing request")
		return
	}

	resp, err := client.GetProfileSender(req)
	if err != nil {
		result.Response = autorest.Response{Response: resp}
		err = autorest.NewErrorWithError(err, "speakerverification.TextDependentClient", "GetProfile", resp, "Failure sending request")
		return
	}

	result, err = client.GetProfileResponder(resp)
	if err != nil {
		err = autorest.NewErrorWithError(err, "speakerverification.TextDependentClient", "GetProfile", resp, "Failure responding to request")
		return
	}

	return
}

// GetProfilePreparer prepares the GetProfile request.
func (client TextDependentClient) GetProfilePreparer(ctx context.Context, profileID uuid.UUID) (*http.Request, error) {
	urlParameters := map[string]interface{}{
		"endpoint": client.Endpoint,
	}

	pathParameters := map[string]interface{}{
		"profileId": autorest.Encode("path", profileID),
	}

	const APIVersion = "2021-09-05"
	queryParameters := map[string]interface{}{
		"api-version": APIVersion,
	}

	preparer := autorest.CreatePreparer(
		autorest.AsGet(),
		autorest.WithCustomBaseURL("{endpoint}/speaker/verification", urlParameters),
		autorest.WithPathParameters("/text-dependent/profiles/{profileId}", pathParameters),
		autorest.WithQueryParameters(queryParameters))
	return preparer.Prepare((&http.Request{}).WithContext(ctx))
}

// GetProfileSender sends the GetProfile request. The method will close the
// http.Response Body if it receives an error.
func (client TextDependentClient) GetProfileSender(req *http.Request) (*http.Response, error) {
	return client.Send(req, autorest.DoRetryForStatusCodes(client.RetryAttempts, client.RetryDuration, autorest.StatusCodesForRetry...))
}

// GetProfileResponder handles the response to the GetProfile request. The method always
// closes the http.Response Body.
func (client TextDependentClient) GetProfileResponder(resp *http.Response) (result TdProfileInfo, err error) {
	err = autorest.Respond(
		resp,
		azure.WithErrorUnlessStatusCode(http.StatusOK),
		autorest.ByUnmarshallingJSON(&result),
		autorest.ByClosing())
	result.Response = autorest.Response{Response: resp}
	return
}

// ListPhrases retrieves list of supported passphrases for a specific locale.
// Parameters:
// locale - a combination of language code and country code.
func (client TextDependentClient) ListPhrases(ctx context.Context, locale string) (result PassPhraseInfo, err error) {
	if tracing.IsEnabled() {
		ctx = tracing.StartSpan(ctx, fqdn+"/TextDependentClient.ListPhrases")
		defer func() {
			sc := -1
			if result.Response.Response != nil {
				sc = result.Response.Response.StatusCode
			}
			tracing.EndSpan(ctx, sc, err)
		}()
	}
	if err := validation.Validate([]validation.Validation{
		{TargetValue: locale,
			Constraints: []validation.Constraint{{Target: "locale", Name: validation.Pattern, Rule: `^[a-zA-Z]{2}-?[a-zA-Z]{2}$`, Chain: nil}}}}); err != nil {
		return result, validation.NewError("speakerverification.TextDependentClient", "ListPhrases", err.Error())
	}

	req, err := client.ListPhrasesPreparer(ctx, locale)
	if err != nil {
		err = autorest.NewErrorWithError(err, "speakerverification.TextDependentClient", "ListPhrases", nil, "Failure preparing request")
		return
	}

	resp, err := client.ListPhrasesSender(req)
	if err != nil {
		result.Response = autorest.Response{Response: resp}
		err = autorest.NewErrorWithError(err, "speakerverification.TextDependentClient", "ListPhrases", resp, "Failure sending request")
		return
	}

	result, err = client.ListPhrasesResponder(resp)
	if err != nil {
		err = autorest.NewErrorWithError(err, "speakerverification.TextDependentClient", "ListPhrases", resp, "Failure responding to request")
		return
	}

	return
}

// ListPhrasesPreparer prepares the ListPhrases request.
func (client TextDependentClient) ListPhrasesPreparer(ctx context.Context, locale string) (*http.Request, error) {
	urlParameters := map[string]interface{}{
		"endpoint": client.Endpoint,
	}

	pathParameters := map[string]interface{}{
		"locale": autorest.Encode("path", locale),
	}

	const APIVersion = "2021-09-05"
	queryParameters := map[string]interface{}{
		"api-version": APIVersion,
	}

	preparer := autorest.CreatePreparer(
		autorest.AsGet(),
		autorest.WithCustomBaseURL("{endpoint}/speaker/verification", urlParameters),
		autorest.WithPathParameters("/text-dependent/phrases/{locale}", pathParameters),
		autorest.WithQueryParameters(queryParameters))
	return preparer.Prepare((&http.Request{}).WithContext(ctx))
}

// ListPhrasesSender sends the ListPhrases request. The method will close the
// http.Response Body if it receives an error.
func (client TextDependentClient) ListPhrasesSender(req *http.Request) (*http.Response, error) {
	return client.Send(req, autorest.DoRetryForStatusCodes(client.RetryAttempts, client.RetryDuration, autorest.StatusCodesForRetry...))
}

// ListPhrasesResponder handles the response to the ListPhrases request. The method always
// closes the http.Response Body.
func (client TextDependentClient) ListPhrasesResponder(resp *http.Response) (result PassPhraseInfo, err error) {
	err = autorest.Respond(
		resp,
		azure.WithErrorUnlessStatusCode(http.StatusOK),
		autorest.ByUnmarshallingJSON(&result),
		autorest.ByClosing())
	result.Response = autorest.Response{Response: resp}
	return
}

// ListProfiles retrieves a set of profiles.
// Profiles are sorted alphabetically by ProfileId
// Parameters:
// maxpagesize - the number of profiles to return. Default is 100 and the maximum is 500
func (client TextDependentClient) ListProfiles(ctx context.Context, maxpagesize *int32) (result TdProfileInfoListPage, err error) {
	if tracing.IsEnabled() {
		ctx = tracing.StartSpan(ctx, fqdn+"/TextDependentClient.ListProfiles")
		defer func() {
			sc := -1
			if result.tpil.Response.Response != nil {
				sc = result.tpil.Response.Response.StatusCode
			}
			tracing.EndSpan(ctx, sc, err)
		}()
	}
	result.fn = client.listProfilesNextResults
	req, err := client.ListProfilesPreparer(ctx, maxpagesize)
	if err != nil {
		err = autorest.NewErrorWithError(err, "speakerverification.TextDependentClient", "ListProfiles", nil, "Failure preparing request")
		return
	}

	resp, err := client.ListProfilesSender(req)
	if err != nil {
		result.tpil.Response = autorest.Response{Response: resp}
		err = autorest.NewErrorWithError(err, "speakerverification.TextDependentClient", "ListProfiles", resp, "Failure sending request")
		return
	}

	result.tpil, err = client.ListProfilesResponder(resp)
	if err != nil {
		err = autorest.NewErrorWithError(err, "speakerverification.TextDependentClient", "ListProfiles", resp, "Failure responding to request")
		return
	}
	if result.tpil.hasNextLink() && result.tpil.IsEmpty() {
		err = result.NextWithContext(ctx)
		return
	}

	return
}

// ListProfilesPreparer prepares the ListProfiles request.
func (client TextDependentClient) ListProfilesPreparer(ctx context.Context, maxpagesize *int32) (*http.Request, error) {
	urlParameters := map[string]interface{}{
		"endpoint": client.Endpoint,
	}

	const APIVersion = "2021-09-05"
	queryParameters := map[string]interface{}{
		"api-version": APIVersion,
	}
	if maxpagesize != nil {
		queryParameters["maxpagesize"] = autorest.Encode("query", *maxpagesize)
	} else {
		queryParameters["maxpagesize"] = autorest.Encode("query", 100)
	}

	preparer := autorest.CreatePreparer(
		autorest.AsGet(),
		autorest.WithCustomBaseURL("{endpoint}/speaker/verification", urlParameters),
		autorest.WithPath("/text-dependent/profiles"),
		autorest.WithQueryParameters(queryParameters))
	return preparer.Prepare((&http.Request{}).WithContext(ctx))
}

// ListProfilesSender sends the ListProfiles request. The method will close the
// http.Response Body if it receives an error.
func (client TextDependentClient) ListProfilesSender(req *http.Request) (*http.Response, error) {
	return client.Send(req, autorest.DoRetryForStatusCodes(client.RetryAttempts, client.RetryDuration, autorest.StatusCodesForRetry...))
}

// ListProfilesResponder handles the response to the ListProfiles request. The method always
// closes the http.Response Body.
func (client TextDependentClient) ListProfilesResponder(resp *http.Response) (result TdProfileInfoList, err error) {
	err = autorest.Respond(
		resp,
		azure.WithErrorUnlessStatusCode(http.StatusOK),
		autorest.ByUnmarshallingJSON(&result),
		autorest.ByClosing())
	result.Response = autorest.Response{Response: resp}
	return
}

// listProfilesNextResults retrieves the next set of results, if any.
func (client TextDependentClient) listProfilesNextResults(ctx context.Context, lastResults TdProfileInfoList) (result TdProfileInfoList, err error) {
	req, err := lastResults.tdProfileInfoListPreparer(ctx)
	if err != nil {
		return result, autorest.NewErrorWithError(err, "speakerverification.TextDependentClient", "listProfilesNextResults", nil, "Failure preparing next results request")
	}
	if req == nil {
		return
	}
	resp, err := client.ListProfilesSender(req)
	if err != nil {
		result.Response = autorest.Response{Response: resp}
		return result, autorest.NewErrorWithError(err, "speakerverification.TextDependentClient", "listProfilesNextResults", resp, "Failure sending next results request")
	}
	result, err = client.ListProfilesResponder(resp)
	if err != nil {
		err = autorest.NewErrorWithError(err, "speakerverification.TextDependentClient", "listProfilesNextResults", resp, "Failure responding to next results request")
	}
	return
}

// ListProfilesComplete enumerates all values, automatically crossing page boundaries as required.
func (client TextDependentClient) ListProfilesComplete(ctx context.Context, maxpagesize *int32) (result TdProfileInfoListIterator, err error) {
	if tracing.IsEnabled() {
		ctx = tracing.StartSpan(ctx, fqdn+"/TextDependentClient.ListProfiles")
		defer func() {
			sc := -1
			if result.Response().Response.Response != nil {
				sc = result.page.Response().Response.Response.StatusCode
			}
			tracing.EndSpan(ctx, sc, err)
		}()
	}
	result.page, err = client.ListProfiles(ctx, maxpagesize)
	return
}

// ResetProfile resets existing profile to its original creation state. The reset operation does the following:
// * Updates enrollmentStatus to Enrolling.
// * Updates lastUpdatedDateTime.
// * Updates enrollmentsCount to 0.
// * Updates enrollmentsLength to 0.
// * Updates enrollmentsSpeechLength to 0.
// * Updates remainingEnrollmentsCount to the initial required number.
// * Removes all associated enrollments from storage.
// * Removes chosen passphrase association.
// * Resets value of modelVersion.
// Parameters:
// profileID - unique identifier for profile id (guid).
func (client TextDependentClient) ResetProfile(ctx context.Context, profileID uuid.UUID) (result TdProfileInfo, err error) {
	if tracing.IsEnabled() {
		ctx = tracing.StartSpan(ctx, fqdn+"/TextDependentClient.ResetProfile")
		defer func() {
			sc := -1
			if result.Response.Response != nil {
				sc = result.Response.Response.StatusCode
			}
			tracing.EndSpan(ctx, sc, err)
		}()
	}
	req, err := client.ResetProfilePreparer(ctx, profileID)
	if err != nil {
		err = autorest.NewErrorWithError(err, "speakerverification.TextDependentClient", "ResetProfile", nil, "Failure preparing request")
		return
	}

	resp, err := client.ResetProfileSender(req)
	if err != nil {
		result.Response = autorest.Response{Response: resp}
		err = autorest.NewErrorWithError(err, "speakerverification.TextDependentClient", "ResetProfile", resp, "Failure sending request")
		return
	}

	result, err = client.ResetProfileResponder(resp)
	if err != nil {
		err = autorest.NewErrorWithError(err, "speakerverification.TextDependentClient", "ResetProfile", resp, "Failure responding to request")
		return
	}

	return
}

// ResetProfilePreparer prepares the ResetProfile request.
func (client TextDependentClient) ResetProfilePreparer(ctx context.Context, profileID uuid.UUID) (*http.Request, error) {
	urlParameters := map[string]interface{}{
		"endpoint": client.Endpoint,
	}

	pathParameters := map[string]interface{}{
		"profileId": autorest.Encode("path", profileID),
	}

	const APIVersion = "2021-09-05"
	queryParameters := map[string]interface{}{
		"api-version": APIVersion,
	}

	preparer := autorest.CreatePreparer(
		autorest.AsPost(),
		autorest.WithCustomBaseURL("{endpoint}/speaker/verification", urlParameters),
		autorest.WithPathParameters("/text-dependent/profiles/{profileId}:reset", pathParameters),
		autorest.WithQueryParameters(queryParameters))
	return preparer.Prepare((&http.Request{}).WithContext(ctx))
}

// ResetProfileSender sends the ResetProfile request. The method will close the
// http.Response Body if it receives an error.
func (client TextDependentClient) ResetProfileSender(req *http.Request) (*http.Response, error) {
	return client.Send(req, autorest.DoRetryForStatusCodes(client.RetryAttempts, client.RetryDuration, autorest.StatusCodesForRetry...))
}

// ResetProfileResponder handles the response to the ResetProfile request. The method always
// closes the http.Response Body.
func (client TextDependentClient) ResetProfileResponder(resp *http.Response) (result TdProfileInfo, err error) {
	err = autorest.Respond(
		resp,
		azure.WithErrorUnlessStatusCode(http.StatusOK),
		autorest.ByUnmarshallingJSON(&result),
		autorest.ByClosing())
	result.Response = autorest.Response{Response: resp}
	return
}

// VerifyProfile verifies existing profiles against input audio.
//
// Limitations:
// * Minimum audio input length per request is **1 second**
// * Maximum audio input length per request is **10 seconds**
// * Minimum audio Signal-to-noise ratio (SNR) is **10 dB**
// Parameters:
// profileID - unique identifier for profile id (guid).
// audioData - binary audio file. Supported formats are audio/wav; codecs=audio/pcm. Supports audio up to 5MB.
func (client TextDependentClient) VerifyProfile(ctx context.Context, profileID uuid.UUID, audioData io.ReadCloser) (result RecognitionInfo, err error) {
	if tracing.IsEnabled() {
		ctx = tracing.StartSpan(ctx, fqdn+"/TextDependentClient.VerifyProfile")
		defer func() {
			sc := -1
			if result.Response.Response != nil {
				sc = result.Response.Response.StatusCode
			}
			tracing.EndSpan(ctx, sc, err)
		}()
	}
	req, err := client.VerifyProfilePreparer(ctx, profileID, audioData)
	if err != nil {
		err = autorest.NewErrorWithError(err, "speakerverification.TextDependentClient", "VerifyProfile", nil, "Failure preparing request")
		return
	}

	resp, err := client.VerifyProfileSender(req)
	if err != nil {
		result.Response = autorest.Response{Response: resp}
		err = autorest.NewErrorWithError(err, "speakerverification.TextDependentClient", "VerifyProfile", resp, "Failure sending request")
		return
	}

	result, err = client.VerifyProfileResponder(resp)
	if err != nil {
		err = autorest.NewErrorWithError(err, "speakerverification.TextDependentClient", "VerifyProfile", resp, "Failure responding to request")
		return
	}

	return
}

// VerifyProfilePreparer prepares the VerifyProfile request.
func (client TextDependentClient) VerifyProfilePreparer(ctx context.Context, profileID uuid.UUID, audioData io.ReadCloser) (*http.Request, error) {
	urlParameters := map[string]interface{}{
		"endpoint": client.Endpoint,
	}

	pathParameters := map[string]interface{}{
		"profileId": autorest.Encode("path", profileID),
	}

	const APIVersion = "2021-09-05"
	queryParameters := map[string]interface{}{
		"api-version": APIVersion,
	}

	preparer := autorest.CreatePreparer(
		autorest.AsContentType("audio/wav; codecs=audio/pcm"),
		autorest.AsPost(),
		autorest.WithCustomBaseURL("{endpoint}/speaker/verification", urlParameters),
		autorest.WithPathParameters("/text-dependent/profiles/{profileId}:verify", pathParameters),
		autorest.WithFile(audioData),
		autorest.WithQueryParameters(queryParameters))
	return preparer.Prepare((&http.Request{}).WithContext(ctx))
}

// VerifyProfileSender sends the VerifyProfile request. The method will close the
// http.Response Body if it receives an error.
func (client TextDependentClient) VerifyProfileSender(req *http.Request) (*http.Response, error) {
	return client.Send(req, autorest.DoRetryForStatusCodes(client.RetryAttempts, client.RetryDuration, autorest.StatusCodesForRetry...))
}

// VerifyProfileResponder handles the response to the VerifyProfile request. The method always
// closes the http.Response Body.
func (client TextDependentClient) VerifyProfileResponder(resp *http.Response) (result RecognitionInfo, err error) {
	err = autorest.Respond(
		resp,
		azure.WithErrorUnlessStatusCode(http.StatusOK),
		autorest.ByUnmarshallingJSON(&result),
		autorest.ByClosing())
	result.Response = autorest.Response{Response: resp}
	return
}
