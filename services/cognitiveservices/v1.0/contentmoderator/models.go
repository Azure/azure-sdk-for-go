package contentmoderator

// Copyright (c) Microsoft and contributors.  All rights reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
// http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
//
// See the License for the specific language governing permissions and
// limitations under the License.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

import (
	"github.com/Azure/go-autorest/autorest"
)

// AzureRegionBaseURL enumerates the values for azure region base url.
type AzureRegionBaseURL string

const (
	// Australiaeastapicognitivemicrosoftcom ...
	Australiaeastapicognitivemicrosoftcom AzureRegionBaseURL = "australiaeast.api.cognitive.microsoft.com"
	// Brazilsouthapicognitivemicrosoftcom ...
	Brazilsouthapicognitivemicrosoftcom AzureRegionBaseURL = "brazilsouth.api.cognitive.microsoft.com"
	// ContentmoderatortestazureApinet ...
	ContentmoderatortestazureApinet AzureRegionBaseURL = "contentmoderatortest.azure-api.net"
	// Eastasiaapicognitivemicrosoftcom ...
	Eastasiaapicognitivemicrosoftcom AzureRegionBaseURL = "eastasia.api.cognitive.microsoft.com"
	// Eastus2apicognitivemicrosoftcom ...
	Eastus2apicognitivemicrosoftcom AzureRegionBaseURL = "eastus2.api.cognitive.microsoft.com"
	// Eastusapicognitivemicrosoftcom ...
	Eastusapicognitivemicrosoftcom AzureRegionBaseURL = "eastus.api.cognitive.microsoft.com"
	// Northeuropeapicognitivemicrosoftcom ...
	Northeuropeapicognitivemicrosoftcom AzureRegionBaseURL = "northeurope.api.cognitive.microsoft.com"
	// Southcentralusapicognitivemicrosoftcom ...
	Southcentralusapicognitivemicrosoftcom AzureRegionBaseURL = "southcentralus.api.cognitive.microsoft.com"
	// Southeastasiaapicognitivemicrosoftcom ...
	Southeastasiaapicognitivemicrosoftcom AzureRegionBaseURL = "southeastasia.api.cognitive.microsoft.com"
	// Westcentralusapicognitivemicrosoftcom ...
	Westcentralusapicognitivemicrosoftcom AzureRegionBaseURL = "westcentralus.api.cognitive.microsoft.com"
	// Westeuropeapicognitivemicrosoftcom ...
	Westeuropeapicognitivemicrosoftcom AzureRegionBaseURL = "westeurope.api.cognitive.microsoft.com"
	// Westus2apicognitivemicrosoftcom ...
	Westus2apicognitivemicrosoftcom AzureRegionBaseURL = "westus2.api.cognitive.microsoft.com"
	// Westusapicognitivemicrosoftcom ...
	Westusapicognitivemicrosoftcom AzureRegionBaseURL = "westus.api.cognitive.microsoft.com"
)

// StatusEnum enumerates the values for status enum.
type StatusEnum string

const (
	// Complete ...
	Complete StatusEnum = "Complete"
	// Pending ...
	Pending StatusEnum = "Pending"
	// Unpublished ...
	Unpublished StatusEnum = "Unpublished"
)

// Type enumerates the values for type.
type Type string

const (
	// TypeImage ...
	TypeImage Type = "Image"
	// TypeText ...
	TypeText Type = "Text"
)

// Address address details.
type Address struct {
	// Text - Detected Address.
	Text *string `json:"text,omitempty"`
	// Index - Index(Location) of the Address in the input text content.
	Index *int32 `json:"index,omitempty"`
}

// APIError error information returned by the API
type APIError struct {
	Error *Error `json:"error,omitempty"`
}

// Body ...
type Body struct {
	// Name - Name of the list.
	Name *string `json:"name,omitempty"`
	// Description - Description of the list.
	Description *string `json:"description,omitempty"`
	// Metadata - Metadata of the list.
	Metadata *BodyMetadata `json:"metadata,omitempty"`
}

// BodyMetadata metadata of the list.
type BodyMetadata struct {
	// KeyOne - Optional key value pair to describe your list.
	KeyOne *string `json:"key One,omitempty"`
	// KeyTwo - Optional key value pair to describe your list.
	KeyTwo *string `json:"key Two,omitempty"`
}

// BodyModel ...
type BodyModel struct {
	DataRepresentation *string `json:"dataRepresentation,omitempty"`
	Value              *string `json:"value,omitempty"`
}

// Candidate OCR candidate text.
type Candidate struct {
	// Text - The text found.
	Text *string `json:"text,omitempty"`
	// Confidence - The confidence level.
	Confidence *float64 `json:"confidence,omitempty"`
}

// Classification the classification details of the text.
type Classification struct {
	// AdultScore - The adult score.
	AdultScore *float64 `json:"adultScore,omitempty"`
	// RacyScore - The racy score.
	RacyScore *float64 `json:"racyScore,omitempty"`
	// OffensiveScore - The offensive score.
	OffensiveScore *float64 `json:"offensiveScore,omitempty"`
	// ReviewRecommended - The review recommended flag.
	ReviewRecommended *bool `json:"reviewRecommended,omitempty"`
}

// Content ...
type Content struct {
	// ContentValue - Content to evaluate for a job.
	ContentValue *string `json:"contentValue,omitempty"`
}

// CreateReviewBodyItem schema items of the body.
type CreateReviewBodyItem struct {
	// Type - Type of the content. Possible values include: 'TypeImage', 'TypeText'
	Type Type `json:"Type,omitempty"`
	// Content - Content to review.
	Content *string `json:"Content,omitempty"`
	// ContentID - Content Identifier.
	ContentID *string `json:"ContentId,omitempty"`
	// CallbackEndpoint - Optional CallbackEndpoint.
	CallbackEndpoint *string `json:"CallbackEndpoint,omitempty"`
	// Metadata - Optional metadata details.
	Metadata *[]CreateReviewBodyItemMetadataItem `json:"Metadata,omitempty"`
}

// CreateReviewBodyItemMetadataItem ...
type CreateReviewBodyItemMetadataItem struct {
	// Key - Your key parameter.
	Key *string `json:"Key,omitempty"`
	// Value - Your value parameter.
	Value *string `json:"Value,omitempty"`
}

// CreateVideoReviewsBodyItem schema items of the body.
type CreateVideoReviewsBodyItem struct {
	// VideoFrames - Optional metadata details.
	VideoFrames *[]CreateVideoReviewsBodyItemVideoFramesItem `json:"VideoFrames,omitempty"`
	// Metadata - Optional metadata details.
	Metadata *[]CreateVideoReviewsBodyItemMetadataItem `json:"Metadata,omitempty"`
	// Type - Type of the content.
	Type *string `json:"Type,omitempty"`
	// Content - Video content url to review.
	Content *string `json:"Content,omitempty"`
	// ContentID - Content Identifier.
	ContentID *string `json:"ContentId,omitempty"`
	// Status - Status of the video(Complete,Unpublished,Pending). Possible values include: 'Complete', 'Unpublished', 'Pending'
	Status Status `json:"Status,omitempty"`
	// Timescale - Timescale of the video.
	Timescale *int32 `json:"Timescale,omitempty"`
	// CallbackEndpoint - Optional CallbackEndpoint.
	CallbackEndpoint *string `json:"CallbackEndpoint,omitempty"`
}

// CreateVideoReviewsBodyItemMetadataItem ...
type CreateVideoReviewsBodyItemMetadataItem struct {
	// Key - Your key parameter.
	Key *string `json:"Key,omitempty"`
	// Value - Your value parameter.
	Value *string `json:"Value,omitempty"`
}

// CreateVideoReviewsBodyItemVideoFramesItem ...
type CreateVideoReviewsBodyItemVideoFramesItem struct {
	// ID - Id of the frame.
	ID *string `json:"Id,omitempty"`
	// Timestamp - Timestamp of the frame.
	Timestamp *int32 `json:"Timestamp,omitempty"`
	// FrameImage - Frame image Url.
	FrameImage         *string                                                            `json:"FrameImage,omitempty"`
	ReviewerResultTags *[]CreateVideoReviewsBodyItemVideoFramesItemReviewerResultTagsItem `json:"ReviewerResultTags,omitempty"`
	// Metadata - Optional metadata details.
	Metadata *[]CreateVideoReviewsBodyItemVideoFramesItemMetadataItem `json:"Metadata,omitempty"`
}

// CreateVideoReviewsBodyItemVideoFramesItemMetadataItem ...
type CreateVideoReviewsBodyItemVideoFramesItemMetadataItem struct {
	// Key - Your key parameter.
	Key *string `json:"Key,omitempty"`
	// Value - Your value parameter.
	Value *string `json:"Value,omitempty"`
}

// CreateVideoReviewsBodyItemVideoFramesItemReviewerResultTagsItem ...
type CreateVideoReviewsBodyItemVideoFramesItemReviewerResultTagsItem struct {
	// Key - Your key parameter.
	Key *string `json:"Key,omitempty"`
	// Value - Your value parameter.
	Value *string `json:"Value,omitempty"`
}

// DetectedLanguage detect language result.
type DetectedLanguage struct {
	autorest.Response `json:"-"`
	// DetectedLanguage - The detected language.
	DetectedLanguage *string `json:"detectedLanguage,omitempty"`
	// Status - The detect language status
	Status *Status `json:"status,omitempty"`
	// TrackingID - The tracking id.
	TrackingID *string `json:"trackingId,omitempty"`
}

// DetectedTerms detected Terms details.
type DetectedTerms struct {
	// Index - Index(Location) of the detected profanity term in the input text content.
	Index *int32 `json:"index,omitempty"`
	// OriginalIndex - Original Index(Location) of the detected profanity term in the input text content.
	OriginalIndex *int32 `json:"originalIndex,omitempty"`
	// ListID - Matched Terms list Id.
	ListID *int32 `json:"listId,omitempty"`
	// Term - Detected profanity term.
	Term *string `json:"term,omitempty"`
}

// Email email Address details.
type Email struct {
	// Detected - Detected Email Address from the input text content.
	Detected *string `json:"detected,omitempty"`
	// SubType - Subtype of the detected Email Address.
	SubType *string `json:"subType,omitempty"`
	// Text - Email Address in the input text content.
	Text *string `json:"text,omitempty"`
	// Index - Index(Location) of the Email address in the input text content.
	Index *int32 `json:"index,omitempty"`
}

// Error error body.
type Error struct {
	Code    *string `json:"code,omitempty"`
	Message *string `json:"message,omitempty"`
}

// Evaluate evaluate response object.
type Evaluate struct {
	autorest.Response `json:"-"`
	// CacheID - The cache id.
	CacheID *string `json:"cacheID,omitempty"`
	// Result - Evaluate result.
	Result *bool `json:"result,omitempty"`
	// TrackingID - The tracking id.
	TrackingID *string `json:"trackingId,omitempty"`
	// AdultClassificationScore - The adult classification score.
	AdultClassificationScore *float64 `json:"adultClassificationScore,omitempty"`
	// IsImageAdultClassified - Indicates if an image is classified as adult.
	IsImageAdultClassified *bool `json:"isImageAdultClassified,omitempty"`
	// RacyClassificationScore - The racy classication score.
	RacyClassificationScore *float64 `json:"racyClassificationScore,omitempty"`
	// IsImageRacyClassified - Indicates if the image is classified as racy.
	IsImageRacyClassified *bool `json:"isImageRacyClassified,omitempty"`
	// AdvancedInfo - The advanced info.
	AdvancedInfo *[]KeyValuePair `json:"advancedInfo,omitempty"`
	// Status - The evaluate status
	Status *Status `json:"status,omitempty"`
}

// Face coordinates to the found face.
type Face struct {
	// Bottom - The bottom coordinate.
	Bottom *int32 `json:"bottom,omitempty"`
	// Left - The left coordinate.
	Left *int32 `json:"left,omitempty"`
	// Right - The right coordinate.
	Right *int32 `json:"right,omitempty"`
	// Top - The top coordinate.
	Top *int32 `json:"top,omitempty"`
}

// FoundFaces request object the contains found faces.
type FoundFaces struct {
	autorest.Response `json:"-"`
	// Status - The evaluate status
	Status *Status `json:"status,omitempty"`
	// TrackingID - The tracking id.
	TrackingID *string `json:"trackingId,omitempty"`
	// CacheID - The cache id.
	CacheID *string `json:"cacheId,omitempty"`
	// Result - True if result was found.
	Result *bool `json:"result,omitempty"`
	// Count - Number of faces found.
	Count *int32 `json:"count,omitempty"`
	// AdvancedInfo - The advanced info.
	AdvancedInfo *[]KeyValuePair `json:"advancedInfo,omitempty"`
	// Faces - The list of faces.
	Faces *[]Face `json:"faces,omitempty"`
}

// Frame video frame property details.
type Frame struct {
	// Timestamp - Timestamp of the frame.
	Timestamp *string `json:"timestamp,omitempty"`
	// FrameImage - Frame image.
	FrameImage *string `json:"frameImage,omitempty"`
	// Metadata - Array of KeyValue.
	Metadata *[]KeyValuePair `json:"metadata,omitempty"`
	// ReviewerResultTags - Reviewer result tags.
	ReviewerResultTags *[]Tag `json:"reviewerResultTags,omitempty"`
}

// Frames the response for a Get Frames request.
type Frames struct {
	autorest.Response `json:"-"`
	// ReviewID - Id of the review.
	ReviewID    *string  `json:"reviewId,omitempty"`
	VideoFrames *[]Frame `json:"videoFrames,omitempty"`
}

// Image image Properties.
type Image struct {
	autorest.Response `json:"-"`
	// ContentID - Content Id.
	ContentID *string `json:"contentId,omitempty"`
	// AdditionalInfo - Advanced info list.
	AdditionalInfo *[]ImageAdditionalInfoItem `json:"additionalInfo,omitempty"`
	// Status - Status details.
	Status *Status `json:"status,omitempty"`
	// TrackingID - Tracking Id.
	TrackingID *string `json:"trackingId,omitempty"`
}

// ImageAdditionalInfoItem ...
type ImageAdditionalInfoItem struct {
	// Key - Key parameter.
	Key *string `json:"key,omitempty"`
	// Value - Value parameter.
	Value *string `json:"value,omitempty"`
}

// ImageIds image Id properties.
type ImageIds struct {
	autorest.Response `json:"-"`
	// ContentSource - Source of the content.
	ContentSource *string `json:"contentSource,omitempty"`
	// ContentIds - Id of the contents.
	ContentIds *[]int32 `json:"contentIds,omitempty"`
	// Status - Get Image status.
	Status *Status `json:"status,omitempty"`
	// TrackingID - Tracking Id.
	TrackingID *string `json:"trackingId,omitempty"`
}

// ImageList image List Properties.
type ImageList struct {
	autorest.Response `json:"-"`
	// ID - Image List Id.
	ID *int32 `json:"id,omitempty"`
	// Name - Image List Name.
	Name *string `json:"name,omitempty"`
	// Description - Description for image list.
	Description *string `json:"description,omitempty"`
	// Metadata - Image List Metadata.
	Metadata *ImageListMetadata `json:"metadata,omitempty"`
}

// ImageListMetadata image List Metadata.
type ImageListMetadata struct {
	// KeyOne - Optional Key value pair to describe your list.
	KeyOne *string `json:"key One,omitempty"`
	// KeyTwo - Optional Key value pair to describe your list.
	KeyTwo *string `json:"key Two,omitempty"`
}

// IPA IP Address details.
type IPA struct {
	// SubType - Subtype of the detected IP Address.
	SubType *string `json:"subType,omitempty"`
	// Text - Detected IP Address.
	Text *string `json:"text,omitempty"`
	// Index - Index(Location) of the IP Address in the input text content.
	Index *int32 `json:"index,omitempty"`
}

// Job the Job object.
type Job struct {
	autorest.Response `json:"-"`
	// ID - The job id.
	ID *string `json:"id,omitempty"`
	// TeamName - The team name associated with the job.
	TeamName *string `json:"teamName,omitempty"`
	// Status - The status string (<Pending, Failed, Completed>).
	Status *string `json:"status,omitempty"`
	// WorkflowID - The Id of the workflow.
	WorkflowID *string `json:"workflowId,omitempty"`
	// Type - Type of the content.
	Type *string `json:"type,omitempty"`
	// CallBackEndpoint - The callback endpoint.
	CallBackEndpoint *string `json:"callBackEndpoint,omitempty"`
	// ReviewID - Review Id if one is created.
	ReviewID *string `json:"reviewId,omitempty"`
	// ResultMetaData - Array of KeyValue pairs.
	ResultMetaData *[]KeyValuePair `json:"resultMetaData,omitempty"`
	// JobExecutionReport - Job execution report- Array of KeyValue pairs object.
	JobExecutionReport *[]JobExecutionReportDetails `json:"jobExecutionReport,omitempty"`
}

// JobExecutionReportDetails job Execution Report Values.
type JobExecutionReportDetails struct {
	// Ts - Time details.
	Ts *string `json:"ts,omitempty"`
	// Msg - Message details.
	Msg *string `json:"msg,omitempty"`
}

// JobID ...
type JobID struct {
	autorest.Response `json:"-"`
	// JobID - Id of the created job.
	JobID *string `json:"jobId,omitempty"`
}

// JobListResult the list of job ids.
type JobListResult struct {
	// Value - The job id.
	Value *[]string `json:"value,omitempty"`
}

// KeyValuePair the key value pair object properties.
type KeyValuePair struct {
	// Key - The key parameter.
	Key *string `json:"key,omitempty"`
	// Value - The value parameter.
	Value *string `json:"value,omitempty"`
}

// ListImageList ...
type ListImageList struct {
	autorest.Response `json:"-"`
	Value             *[]ImageList `json:"value,omitempty"`
}

// ListString ...
type ListString struct {
	autorest.Response `json:"-"`
	Value             *[]string `json:"value,omitempty"`
}

// ListTermList ...
type ListTermList struct {
	autorest.Response `json:"-"`
	Value             *[]TermList `json:"value,omitempty"`
}

// Match the match details.
type Match struct {
	// Score - Confidence score of the image match.
	Score *float64 `json:"score,omitempty"`
	// MatchID - The match id.
	MatchID *int32 `json:"matchId,omitempty"`
	// Source - The source.
	Source *string `json:"source,omitempty"`
	// Tags - The tags for match details.
	Tags *[]int32 `json:"tags,omitempty"`
	// Label - The label.
	Label *string `json:"label,omitempty"`
}

// MatchResponse the response for a Match request.
type MatchResponse struct {
	autorest.Response `json:"-"`
	// TrackingID - The tracking id.
	TrackingID *string `json:"trackingId,omitempty"`
	// CacheID - The cache id.
	CacheID *string `json:"cacheID,omitempty"`
	// IsMatch - Indicates if there is a match.
	IsMatch *bool `json:"isMatch,omitempty"`
	// Matches - The match details.
	Matches *[]Match `json:"matches,omitempty"`
	// Status - The evaluate status
	Status *Status `json:"status,omitempty"`
}

// OCR contains the text found in image for the language specified.
type OCR struct {
	autorest.Response `json:"-"`
	// Status - The evaluate status
	Status *Status `json:"status,omitempty"`
	// Metadata - Array of KeyValue.
	Metadata *[]KeyValuePair `json:"metadata,omitempty"`
	// TrackingID - The tracking id.
	TrackingID *string `json:"trackingId,omitempty"`
	// CacheID - The cache id.
	CacheID *string `json:"cacheId,omitempty"`
	// Language - The ISO 639-3 code.
	Language *string `json:"language,omitempty"`
	// Text - The found text.
	Text *string `json:"text,omitempty"`
	// Candidates - The list of candidate text.
	Candidates *[]Candidate `json:"candidates,omitempty"`
}

// Phone phone Property details.
type Phone struct {
	// CountryCode - CountryCode of the detected Phone number.
	CountryCode *string `json:"countryCode,omitempty"`
	// Text - Detected Phone number.
	Text *string `json:"text,omitempty"`
	// Index - Index(Location) of the Phone number in the input text content.
	Index *int32 `json:"index,omitempty"`
}

// PII personal Identifier Information details.
type PII struct {
	Email   *[]Email   `json:"email,omitempty"`
	Ipa     *[]IPA     `json:"ipa,omitempty"`
	Phone   *[]Phone   `json:"phone,omitempty"`
	Address *[]Address `json:"address,omitempty"`
}

// RefreshIndex refresh Index Response.
type RefreshIndex struct {
	autorest.Response `json:"-"`
	// ContentSourceID - Content source Id.
	ContentSourceID *string `json:"contentSourceId,omitempty"`
	// IsUpdateSuccess - Update success status.
	IsUpdateSuccess *bool `json:"isUpdateSuccess,omitempty"`
	// AdvancedInfo - Advanced info list.
	AdvancedInfo *[]RefreshIndexAdvancedInfoItem `json:"advancedInfo,omitempty"`
	// Status - Refresh index status.
	Status *Status `json:"status,omitempty"`
	// TrackingID - Tracking Id.
	TrackingID *string `json:"trackingId,omitempty"`
}

// RefreshIndexAdvancedInfoItem ...
type RefreshIndexAdvancedInfoItem struct {
	// KeyOne - Key parameter to describe advanced info.
	KeyOne *string `json:"key One,omitempty"`
	// KeyTwo - Key parameter to describe advanced info.
	KeyTwo *string `json:"key Two,omitempty"`
}

// Review the Review object.
type Review struct {
	autorest.Response `json:"-"`
	// ReviewID - Id of the review.
	ReviewID *string `json:"reviewId,omitempty"`
	// SubTeam - Name of the subteam.
	SubTeam *string `json:"subTeam,omitempty"`
	// Status - The status string (<Pending, Complete>).
	Status *string `json:"status,omitempty"`
	// ReviewerResultTags - Array of KeyValue with Reviewer set Tags.
	ReviewerResultTags *[]KeyValuePair `json:"reviewerResultTags,omitempty"`
	// CreatedBy - The reviewer name.
	CreatedBy *string `json:"createdBy,omitempty"`
	// Metadata - Array of KeyValue.
	Metadata *[]KeyValuePair `json:"metadata,omitempty"`
	// Type - The type of content.
	Type *string `json:"type,omitempty"`
	// Content - The content value.
	Content *string `json:"content,omitempty"`
	// ContentID - Id of the content.
	ContentID *string `json:"contentId,omitempty"`
	// CallbackEndpoint - The callback endpoint.
	CallbackEndpoint *string `json:"callbackEndpoint,omitempty"`
}

// Screen the response for a Screen text request.
type Screen struct {
	autorest.Response `json:"-"`
	// OriginalText - The original text.
	OriginalText *string `json:"originalText,omitempty"`
	// NormalizedText - The normalized text.
	NormalizedText *string `json:"normalizedText,omitempty"`
	// AutoCorrectedText - The autocorrected text
	AutoCorrectedText *string `json:"autoCorrectedText,omitempty"`
	// Misrepresentation - The misrepresentation text.
	Misrepresentation *[]string `json:"misrepresentation,omitempty"`
	// Classification - The classification details of the text.
	Classification *Classification `json:"classification,omitempty"`
	// Status - The evaluate status.
	Status *Status `json:"status,omitempty"`
	// Pii - Personal Identifier Information details.
	Pii *PII `json:"pii,omitempty"`
	// Language - Language of the input text content.
	Language *string          `json:"language,omitempty"`
	Terms    *[]DetectedTerms `json:"terms,omitempty"`
	// TrackingID - Unique Content Moderator transaction Id.
	TrackingID *string `json:"trackingId,omitempty"`
}

// SetObject ...
type SetObject struct {
	autorest.Response `json:"-"`
	Value             *map[string]interface{} `json:"value,omitempty"`
}

// Status status properties.
type Status struct {
	// Code - Status code.
	Code *int32 `json:"code,omitempty"`
	// Description - Status description.
	Description *string `json:"description,omitempty"`
	// Exception - Exception status.
	Exception *string `json:"exception,omitempty"`
}

// String ...
type String struct {
	autorest.Response `json:"-"`
	Value             *string `json:"value,omitempty"`
}

// Tag tag details.
type Tag struct {
	// Key - The key parameter.
	Key *string `json:"key,omitempty"`
	// Value - The value parameter.
	Value *string `json:"value,omitempty"`
}

// TermList term List  Properties.
type TermList struct {
	autorest.Response `json:"-"`
	// ID - Term list Id.
	ID *int32 `json:"id,omitempty"`
	// Name - Term list name.
	Name *string `json:"name,omitempty"`
	// Description - Description for term list.
	Description *string `json:"description,omitempty"`
	// Metadata - Term list metadata.
	Metadata *TermListMetadata `json:"metadata,omitempty"`
}

// TermListMetadata term list metadata.
type TermListMetadata struct {
	// KeyOne - Optional Key value pair to describe your list.
	KeyOne *string `json:"key One,omitempty"`
	// KeyTwo - Optional Key value pair to describe your list.
	KeyTwo *string `json:"key Two,omitempty"`
}

// Terms terms properties.
type Terms struct {
	autorest.Response `json:"-"`
	// Data - Term data details.
	Data *TermsData `json:"data,omitempty"`
	// Paging - Paging details.
	Paging *TermsPaging `json:"paging,omitempty"`
}

// TermsData all term Id response properties.
type TermsData struct {
	// Language - Language of the terms.
	Language *string `json:"language,omitempty"`
	// Terms - List of terms.
	Terms *[]TermsInList `json:"terms,omitempty"`
	// Status - Term Status.
	Status *Status `json:"status,omitempty"`
	// TrackingID - Tracking Id.
	TrackingID *string `json:"trackingId,omitempty"`
}

// TermsInList terms in list Id passed.
type TermsInList struct {
	// Term - Added term details.
	Term *string `json:"term,omitempty"`
}

// TermsPaging paging details.
type TermsPaging struct {
	// Total - Total details.
	Total *int32 `json:"Total,omitempty"`
	// Limit - Limit details.
	Limit *int32 `json:"Limit,omitempty"`
	// Offset - Offset details.
	Offset *int32 `json:"Offset,omitempty"`
	// Returned - Returned text details.
	Returned *int32 `json:"Returned,omitempty"`
}

// TranscriptModerationBodyItem schema items of the body.
type TranscriptModerationBodyItem struct {
	// Timestamp - Timestamp of the image.
	Timestamp *string `json:"Timestamp,omitempty"`
	// Terms - Optional metadata details.
	Terms *[]TranscriptModerationBodyItemTermsItem `json:"Terms,omitempty"`
}

// TranscriptModerationBodyItemTermsItem ...
type TranscriptModerationBodyItemTermsItem struct {
	// Index - Index of the word
	Index *int32 `json:"Index,omitempty"`
	// Term - Detected word.
	Term *string `json:"Term,omitempty"`
}

// VideoFrameBodyItem schema items of the body.
type VideoFrameBodyItem struct {
	// Timestamp - Timestamp of the frame.
	Timestamp *string `json:"Timestamp,omitempty"`
	// FrameImage - Content to review.
	FrameImage         *string                                     `json:"frameImage,omitempty"`
	ReviewerResultTags *[]VideoFrameBodyItemReviewerResultTagsItem `json:"ReviewerResultTags,omitempty"`
	// Metadata - Optional metadata details.
	Metadata *[]VideoFrameBodyItemMetadataItem `json:"Metadata,omitempty"`
}

// VideoFrameBodyItemMetadataItem ...
type VideoFrameBodyItemMetadataItem struct {
	// Key - Your key parameter.
	Key *string `json:"Key,omitempty"`
	// Value - Your value parameter.
	Value *string `json:"Value,omitempty"`
}

// VideoFrameBodyItemReviewerResultTagsItem ...
type VideoFrameBodyItemReviewerResultTagsItem struct {
	// Key - Your key parameter.
	Key *string `json:"Key,omitempty"`
	// Value - Your value parameter.
	Value *string `json:"Value,omitempty"`
}
