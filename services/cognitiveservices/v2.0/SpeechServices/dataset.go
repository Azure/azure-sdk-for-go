package speechservices

// Copyright (c) Microsoft and contributors.  All rights reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
// http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
//
// See the License for the specific language governing permissions and
// limitations under the License.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

import (
	"context"
	"github.com/Azure/go-autorest/autorest"
	"github.com/Azure/go-autorest/autorest/azure"
	"github.com/Azure/go-autorest/tracing"
	"github.com/satori/go.uuid"
	"io"
	"net/http"
)

// DatasetClient is the speech Services API v2.0.
type DatasetClient struct {
	BaseClient
}

// NewDatasetClient creates an instance of the DatasetClient client.
func NewDatasetClient() DatasetClient {
	return NewDatasetClientWithBaseURI(DefaultBaseURI)
}

// NewDatasetClientWithBaseURI creates an instance of the DatasetClient client.
func NewDatasetClientWithBaseURI(baseURI string) DatasetClient {
	return DatasetClient{NewWithBaseURI(baseURI)}
}

// Delete sends the delete request.
// Parameters:
// ID - the identifier of the dataset.
func (client DatasetClient) Delete(ctx context.Context, ID uuid.UUID) (result ErrorContent, err error) {
	if tracing.IsEnabled() {
		ctx = tracing.StartSpan(ctx, fqdn+"/DatasetClient.Delete")
		defer func() {
			sc := -1
			if result.Response.Response != nil {
				sc = result.Response.Response.StatusCode
			}
			tracing.EndSpan(ctx, sc, err)
		}()
	}
	req, err := client.DeletePreparer(ctx, ID)
	if err != nil {
		err = autorest.NewErrorWithError(err, "speechservices.DatasetClient", "Delete", nil, "Failure preparing request")
		return
	}

	resp, err := client.DeleteSender(req)
	if err != nil {
		result.Response = autorest.Response{Response: resp}
		err = autorest.NewErrorWithError(err, "speechservices.DatasetClient", "Delete", resp, "Failure sending request")
		return
	}

	result, err = client.DeleteResponder(resp)
	if err != nil {
		err = autorest.NewErrorWithError(err, "speechservices.DatasetClient", "Delete", resp, "Failure responding to request")
	}

	return
}

// DeletePreparer prepares the Delete request.
func (client DatasetClient) DeletePreparer(ctx context.Context, ID uuid.UUID) (*http.Request, error) {
	pathParameters := map[string]interface{}{
		"id": autorest.Encode("path", ID),
	}

	preparer := autorest.CreatePreparer(
		autorest.AsDelete(),
		autorest.WithBaseURL(client.BaseURI),
		autorest.WithPathParameters("/api/speechtotext/v2.0/datasets/{id}", pathParameters))
	return preparer.Prepare((&http.Request{}).WithContext(ctx))
}

// DeleteSender sends the Delete request. The method will close the
// http.Response Body if it receives an error.
func (client DatasetClient) DeleteSender(req *http.Request) (*http.Response, error) {
	return autorest.SendWithSender(client, req,
		autorest.DoRetryForStatusCodes(client.RetryAttempts, client.RetryDuration, autorest.StatusCodesForRetry...))
}

// DeleteResponder handles the response to the Delete request. The method always
// closes the http.Response Body.
func (client DatasetClient) DeleteResponder(resp *http.Response) (result ErrorContent, err error) {
	err = autorest.Respond(
		resp,
		client.ByInspecting(),
		azure.WithErrorUnlessStatusCode(http.StatusOK, http.StatusNoContent, http.StatusUnauthorized, http.StatusForbidden, http.StatusMethodNotAllowed, http.StatusTooManyRequests),
		autorest.ByUnmarshallingJSON(&result),
		autorest.ByClosing())
	result.Response = autorest.Response{Response: resp}
	return
}

// Get sends the get request.
// Parameters:
// ID - the identifier of the dataset.
func (client DatasetClient) Get(ctx context.Context, ID uuid.UUID) (result SetObject, err error) {
	if tracing.IsEnabled() {
		ctx = tracing.StartSpan(ctx, fqdn+"/DatasetClient.Get")
		defer func() {
			sc := -1
			if result.Response.Response != nil {
				sc = result.Response.Response.StatusCode
			}
			tracing.EndSpan(ctx, sc, err)
		}()
	}
	req, err := client.GetPreparer(ctx, ID)
	if err != nil {
		err = autorest.NewErrorWithError(err, "speechservices.DatasetClient", "Get", nil, "Failure preparing request")
		return
	}

	resp, err := client.GetSender(req)
	if err != nil {
		result.Response = autorest.Response{Response: resp}
		err = autorest.NewErrorWithError(err, "speechservices.DatasetClient", "Get", resp, "Failure sending request")
		return
	}

	result, err = client.GetResponder(resp)
	if err != nil {
		err = autorest.NewErrorWithError(err, "speechservices.DatasetClient", "Get", resp, "Failure responding to request")
	}

	return
}

// GetPreparer prepares the Get request.
func (client DatasetClient) GetPreparer(ctx context.Context, ID uuid.UUID) (*http.Request, error) {
	pathParameters := map[string]interface{}{
		"id": autorest.Encode("path", ID),
	}

	preparer := autorest.CreatePreparer(
		autorest.AsGet(),
		autorest.WithBaseURL(client.BaseURI),
		autorest.WithPathParameters("/api/speechtotext/v2.0/datasets/{id}", pathParameters))
	return preparer.Prepare((&http.Request{}).WithContext(ctx))
}

// GetSender sends the Get request. The method will close the
// http.Response Body if it receives an error.
func (client DatasetClient) GetSender(req *http.Request) (*http.Response, error) {
	return autorest.SendWithSender(client, req,
		autorest.DoRetryForStatusCodes(client.RetryAttempts, client.RetryDuration, autorest.StatusCodesForRetry...))
}

// GetResponder handles the response to the Get request. The method always
// closes the http.Response Body.
func (client DatasetClient) GetResponder(resp *http.Response) (result SetObject, err error) {
	err = autorest.Respond(
		resp,
		client.ByInspecting(),
		azure.WithErrorUnlessStatusCode(http.StatusOK, http.StatusUnauthorized, http.StatusForbidden, http.StatusNotFound, http.StatusTooManyRequests),
		autorest.ByUnmarshallingJSON(&result.Value),
		autorest.ByClosing())
	result.Response = autorest.Response{Response: resp}
	return
}

// Update sends the update request.
// Parameters:
// ID - the identifier of the dataset.
// datasetUpdate - the updated values for the dataset.
func (client DatasetClient) Update(ctx context.Context, ID uuid.UUID, datasetUpdate DatasetUpdate) (result SetObject, err error) {
	if tracing.IsEnabled() {
		ctx = tracing.StartSpan(ctx, fqdn+"/DatasetClient.Update")
		defer func() {
			sc := -1
			if result.Response.Response != nil {
				sc = result.Response.Response.StatusCode
			}
			tracing.EndSpan(ctx, sc, err)
		}()
	}
	req, err := client.UpdatePreparer(ctx, ID, datasetUpdate)
	if err != nil {
		err = autorest.NewErrorWithError(err, "speechservices.DatasetClient", "Update", nil, "Failure preparing request")
		return
	}

	resp, err := client.UpdateSender(req)
	if err != nil {
		result.Response = autorest.Response{Response: resp}
		err = autorest.NewErrorWithError(err, "speechservices.DatasetClient", "Update", resp, "Failure sending request")
		return
	}

	result, err = client.UpdateResponder(resp)
	if err != nil {
		err = autorest.NewErrorWithError(err, "speechservices.DatasetClient", "Update", resp, "Failure responding to request")
	}

	return
}

// UpdatePreparer prepares the Update request.
func (client DatasetClient) UpdatePreparer(ctx context.Context, ID uuid.UUID, datasetUpdate DatasetUpdate) (*http.Request, error) {
	pathParameters := map[string]interface{}{
		"id": autorest.Encode("path", ID),
	}

	preparer := autorest.CreatePreparer(
		autorest.AsContentType("application/json; charset=utf-8"),
		autorest.AsPatch(),
		autorest.WithBaseURL(client.BaseURI),
		autorest.WithPathParameters("/api/speechtotext/v2.0/datasets/{id}", pathParameters),
		autorest.WithJSON(datasetUpdate))
	return preparer.Prepare((&http.Request{}).WithContext(ctx))
}

// UpdateSender sends the Update request. The method will close the
// http.Response Body if it receives an error.
func (client DatasetClient) UpdateSender(req *http.Request) (*http.Response, error) {
	return autorest.SendWithSender(client, req,
		autorest.DoRetryForStatusCodes(client.RetryAttempts, client.RetryDuration, autorest.StatusCodesForRetry...))
}

// UpdateResponder handles the response to the Update request. The method always
// closes the http.Response Body.
func (client DatasetClient) UpdateResponder(resp *http.Response) (result SetObject, err error) {
	err = autorest.Respond(
		resp,
		client.ByInspecting(),
		azure.WithErrorUnlessStatusCode(http.StatusOK, http.StatusBadRequest, http.StatusUnauthorized, http.StatusForbidden, http.StatusConflict, http.StatusUnsupportedMediaType, http.StatusTooManyRequests),
		autorest.ByUnmarshallingJSON(&result.Value),
		autorest.ByClosing())
	result.Response = autorest.Response{Response: resp}
	return
}

// Upload sends the upload request.
// Parameters:
// name - the name of this data import (always add this string for any import).
// description - optional description of this data import.
// locale - the locale of this data import (always add this string for any import).
// dataImportKind - the kind of the data import (always add this string for any import).
// properties - optional properties of this data import (json serialized object with key/values, where all
// values must be strings)
// audiodata - a zip file containing the audio data (this and the audio archive file for acoustic data
// imports).
// transcriptions - a text file containing the transcriptions for the audio data (this and the transcriptions
// file for acoustic data imports).
// languagedata - a text file containing the language or pronunciation data (only this file for language data
// imports).
func (client DatasetClient) Upload(ctx context.Context, name string, description string, locale string, dataImportKind string, properties string, audiodata io.ReadCloser, transcriptions io.ReadCloser, languagedata io.ReadCloser) (result DatasetUploadFuture, err error) {
	if tracing.IsEnabled() {
		ctx = tracing.StartSpan(ctx, fqdn+"/DatasetClient.Upload")
		defer func() {
			sc := -1
			if result.Response() != nil {
				sc = result.Response().StatusCode
			}
			tracing.EndSpan(ctx, sc, err)
		}()
	}
	req, err := client.UploadPreparer(ctx, name, description, locale, dataImportKind, properties, audiodata, transcriptions, languagedata)
	if err != nil {
		err = autorest.NewErrorWithError(err, "speechservices.DatasetClient", "Upload", nil, "Failure preparing request")
		return
	}

	result, err = client.UploadSender(req)
	if err != nil {
		err = autorest.NewErrorWithError(err, "speechservices.DatasetClient", "Upload", result.Response(), "Failure sending request")
		return
	}

	return
}

// UploadPreparer prepares the Upload request.
func (client DatasetClient) UploadPreparer(ctx context.Context, name string, description string, locale string, dataImportKind string, properties string, audiodata io.ReadCloser, transcriptions io.ReadCloser, languagedata io.ReadCloser) (*http.Request, error) {
	formDataParameters := map[string]interface{}{}
	if len(name) > 0 {
		formDataParameters["name"] = name
	}
	if len(description) > 0 {
		formDataParameters["description"] = description
	}
	if len(locale) > 0 {
		formDataParameters["locale"] = locale
	}
	if len(string(dataImportKind)) > 0 {
		formDataParameters["dataImportKind"] = dataImportKind
	}
	if len(properties) > 0 {
		formDataParameters["properties"] = properties
	}
	if audiodata != nil {
		formDataParameters["audiodata"] = audiodata
	}
	if transcriptions != nil {
		formDataParameters["transcriptions"] = transcriptions
	}
	if languagedata != nil {
		formDataParameters["languagedata"] = languagedata
	}

	preparer := autorest.CreatePreparer(
		autorest.AsPost(),
		autorest.WithBaseURL(client.BaseURI),
		autorest.WithPath("/api/speechtotext/v2.0/datasets/upload"),
		autorest.WithMultiPartFormData(formDataParameters))
	return preparer.Prepare((&http.Request{}).WithContext(ctx))
}

// UploadSender sends the Upload request. The method will close the
// http.Response Body if it receives an error.
func (client DatasetClient) UploadSender(req *http.Request) (future DatasetUploadFuture, err error) {
	var resp *http.Response
	resp, err = autorest.SendWithSender(client, req,
		autorest.DoRetryForStatusCodes(client.RetryAttempts, client.RetryDuration, autorest.StatusCodesForRetry...))
	if err != nil {
		return
	}
	future.Future, err = azure.NewFutureFromResponse(resp)
	return
}

// UploadResponder handles the response to the Upload request. The method always
// closes the http.Response Body.
func (client DatasetClient) UploadResponder(resp *http.Response) (result ErrorContent, err error) {
	err = autorest.Respond(
		resp,
		client.ByInspecting(),
		azure.WithErrorUnlessStatusCode(http.StatusOK, http.StatusCreated, http.StatusBadRequest, http.StatusUnauthorized, http.StatusForbidden, http.StatusUnsupportedMediaType, http.StatusTooManyRequests),
		autorest.ByUnmarshallingJSON(&result),
		autorest.ByClosing())
	result.Response = autorest.Response{Response: resp}
	return
}
