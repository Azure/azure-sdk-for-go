// Package authoring implements the Azure ARM Authoring service API version 2.0.
//
//
package authoring

// Copyright (c) Microsoft and contributors.  All rights reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
// http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
//
// See the License for the specific language governing permissions and
// limitations under the License.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

import (
	"context"
	"github.com/Azure/go-autorest/autorest"
	"github.com/Azure/go-autorest/autorest/azure"
	"github.com/Azure/go-autorest/autorest/validation"
	"github.com/Azure/go-autorest/tracing"
	"github.com/satori/go.uuid"
	"net/http"
)

// BaseClient is the base client for Authoring.
type BaseClient struct {
	autorest.Client
	Endpoint string
}

// New creates an instance of the BaseClient client.
func New(endpoint string) BaseClient {
	return NewWithoutDefaults(endpoint)
}

// NewWithoutDefaults creates an instance of the BaseClient client.
func NewWithoutDefaults(endpoint string) BaseClient {
	return BaseClient{
		Client:   autorest.NewClientWithUserAgent(UserAgent()),
		Endpoint: endpoint,
	}
}

// AppsPackagepublishedapplicationasgzip packages published LUIS application as GZip.
// Parameters:
// appID - the application ID.
// slotName - the publishing slot name.
func (client BaseClient) AppsPackagepublishedapplicationasgzip(ctx context.Context, appID uuid.UUID, slotName uuid.UUID) (result SetObject, err error) {
	if tracing.IsEnabled() {
		ctx = tracing.StartSpan(ctx, fqdn+"/BaseClient.AppsPackagepublishedapplicationasgzip")
		defer func() {
			sc := -1
			if result.Response.Response != nil {
				sc = result.Response.Response.StatusCode
			}
			tracing.EndSpan(ctx, sc, err)
		}()
	}
	req, err := client.AppsPackagepublishedapplicationasgzipPreparer(ctx, appID, slotName)
	if err != nil {
		err = autorest.NewErrorWithError(err, "authoring.BaseClient", "AppsPackagepublishedapplicationasgzip", nil, "Failure preparing request")
		return
	}

	resp, err := client.AppsPackagepublishedapplicationasgzipSender(req)
	if err != nil {
		result.Response = autorest.Response{Response: resp}
		err = autorest.NewErrorWithError(err, "authoring.BaseClient", "AppsPackagepublishedapplicationasgzip", resp, "Failure sending request")
		return
	}

	result, err = client.AppsPackagepublishedapplicationasgzipResponder(resp)
	if err != nil {
		err = autorest.NewErrorWithError(err, "authoring.BaseClient", "AppsPackagepublishedapplicationasgzip", resp, "Failure responding to request")
	}

	return
}

// AppsPackagepublishedapplicationasgzipPreparer prepares the AppsPackagepublishedapplicationasgzip request.
func (client BaseClient) AppsPackagepublishedapplicationasgzipPreparer(ctx context.Context, appID uuid.UUID, slotName uuid.UUID) (*http.Request, error) {
	urlParameters := map[string]interface{}{
		"Endpoint": client.Endpoint,
	}

	pathParameters := map[string]interface{}{
		"appId":    autorest.Encode("path", appID),
		"slotName": autorest.Encode("path", slotName),
	}

	preparer := autorest.CreatePreparer(
		autorest.AsGet(),
		autorest.WithCustomBaseURL("{Endpoint}/luis/api/v2.0", urlParameters),
		autorest.WithPathParameters("/package/{appId}/slot/{slotName}/gzip", pathParameters))
	return preparer.Prepare((&http.Request{}).WithContext(ctx))
}

// AppsPackagepublishedapplicationasgzipSender sends the AppsPackagepublishedapplicationasgzip request. The method will close the
// http.Response Body if it receives an error.
func (client BaseClient) AppsPackagepublishedapplicationasgzipSender(req *http.Request) (*http.Response, error) {
	return autorest.SendWithSender(client, req,
		autorest.DoRetryForStatusCodes(client.RetryAttempts, client.RetryDuration, autorest.StatusCodesForRetry...))
}

// AppsPackagepublishedapplicationasgzipResponder handles the response to the AppsPackagepublishedapplicationasgzip request. The method always
// closes the http.Response Body.
func (client BaseClient) AppsPackagepublishedapplicationasgzipResponder(resp *http.Response) (result SetObject, err error) {
	err = autorest.Respond(
		resp,
		client.ByInspecting(),
		azure.WithErrorUnlessStatusCode(http.StatusOK, http.StatusBadRequest, http.StatusUnauthorized, http.StatusForbidden, http.StatusTooManyRequests),
		autorest.ByUnmarshallingJSON(&result.Value),
		autorest.ByClosing())
	result.Response = autorest.Response{Response: resp}
	return
}

// AppsPackagetrainedapplicationasgzip packages trained LUIS application as GZip.
// Parameters:
// appID - the application ID.
// versionID - the version ID.
func (client BaseClient) AppsPackagetrainedapplicationasgzip(ctx context.Context, appID uuid.UUID, versionID string) (result SetObject, err error) {
	if tracing.IsEnabled() {
		ctx = tracing.StartSpan(ctx, fqdn+"/BaseClient.AppsPackagetrainedapplicationasgzip")
		defer func() {
			sc := -1
			if result.Response.Response != nil {
				sc = result.Response.Response.StatusCode
			}
			tracing.EndSpan(ctx, sc, err)
		}()
	}
	req, err := client.AppsPackagetrainedapplicationasgzipPreparer(ctx, appID, versionID)
	if err != nil {
		err = autorest.NewErrorWithError(err, "authoring.BaseClient", "AppsPackagetrainedapplicationasgzip", nil, "Failure preparing request")
		return
	}

	resp, err := client.AppsPackagetrainedapplicationasgzipSender(req)
	if err != nil {
		result.Response = autorest.Response{Response: resp}
		err = autorest.NewErrorWithError(err, "authoring.BaseClient", "AppsPackagetrainedapplicationasgzip", resp, "Failure sending request")
		return
	}

	result, err = client.AppsPackagetrainedapplicationasgzipResponder(resp)
	if err != nil {
		err = autorest.NewErrorWithError(err, "authoring.BaseClient", "AppsPackagetrainedapplicationasgzip", resp, "Failure responding to request")
	}

	return
}

// AppsPackagetrainedapplicationasgzipPreparer prepares the AppsPackagetrainedapplicationasgzip request.
func (client BaseClient) AppsPackagetrainedapplicationasgzipPreparer(ctx context.Context, appID uuid.UUID, versionID string) (*http.Request, error) {
	urlParameters := map[string]interface{}{
		"Endpoint": client.Endpoint,
	}

	pathParameters := map[string]interface{}{
		"appId":     autorest.Encode("path", appID),
		"versionId": autorest.Encode("path", versionID),
	}

	preparer := autorest.CreatePreparer(
		autorest.AsGet(),
		autorest.WithCustomBaseURL("{Endpoint}/luis/api/v2.0", urlParameters),
		autorest.WithPathParameters("/package/{appId}/versions/{versionId}/gzip", pathParameters))
	return preparer.Prepare((&http.Request{}).WithContext(ctx))
}

// AppsPackagetrainedapplicationasgzipSender sends the AppsPackagetrainedapplicationasgzip request. The method will close the
// http.Response Body if it receives an error.
func (client BaseClient) AppsPackagetrainedapplicationasgzipSender(req *http.Request) (*http.Response, error) {
	return autorest.SendWithSender(client, req,
		autorest.DoRetryForStatusCodes(client.RetryAttempts, client.RetryDuration, autorest.StatusCodesForRetry...))
}

// AppsPackagetrainedapplicationasgzipResponder handles the response to the AppsPackagetrainedapplicationasgzip request. The method always
// closes the http.Response Body.
func (client BaseClient) AppsPackagetrainedapplicationasgzipResponder(resp *http.Response) (result SetObject, err error) {
	err = autorest.Respond(
		resp,
		client.ByInspecting(),
		azure.WithErrorUnlessStatusCode(http.StatusOK, http.StatusBadRequest, http.StatusUnauthorized, http.StatusForbidden, http.StatusTooManyRequests),
		autorest.ByUnmarshallingJSON(&result.Value),
		autorest.ByClosing())
	result.Response = autorest.Response{Response: resp}
	return
}

// FivebeThreeOneThreececOneEightOneaeSevenTwoZeroaaTwobTwoSixc gets the LUIS azure accounts for the user using his ARM
// token.
func (client BaseClient) FivebeThreeOneThreececOneEightOneaeSevenTwoZeroaaTwobTwoSixc(ctx context.Context) (result SetObject, err error) {
	if tracing.IsEnabled() {
		ctx = tracing.StartSpan(ctx, fqdn+"/BaseClient.FivebeThreeOneThreececOneEightOneaeSevenTwoZeroaaTwobTwoSixc")
		defer func() {
			sc := -1
			if result.Response.Response != nil {
				sc = result.Response.Response.StatusCode
			}
			tracing.EndSpan(ctx, sc, err)
		}()
	}
	req, err := client.FivebeThreeOneThreececOneEightOneaeSevenTwoZeroaaTwobTwoSixcPreparer(ctx)
	if err != nil {
		err = autorest.NewErrorWithError(err, "authoring.BaseClient", "FivebeThreeOneThreececOneEightOneaeSevenTwoZeroaaTwobTwoSixc", nil, "Failure preparing request")
		return
	}

	resp, err := client.FivebeThreeOneThreececOneEightOneaeSevenTwoZeroaaTwobTwoSixcSender(req)
	if err != nil {
		result.Response = autorest.Response{Response: resp}
		err = autorest.NewErrorWithError(err, "authoring.BaseClient", "FivebeThreeOneThreececOneEightOneaeSevenTwoZeroaaTwobTwoSixc", resp, "Failure sending request")
		return
	}

	result, err = client.FivebeThreeOneThreececOneEightOneaeSevenTwoZeroaaTwobTwoSixcResponder(resp)
	if err != nil {
		err = autorest.NewErrorWithError(err, "authoring.BaseClient", "FivebeThreeOneThreececOneEightOneaeSevenTwoZeroaaTwobTwoSixc", resp, "Failure responding to request")
	}

	return
}

// FivebeThreeOneThreececOneEightOneaeSevenTwoZeroaaTwobTwoSixcPreparer prepares the FivebeThreeOneThreececOneEightOneaeSevenTwoZeroaaTwobTwoSixc request.
func (client BaseClient) FivebeThreeOneThreececOneEightOneaeSevenTwoZeroaaTwobTwoSixcPreparer(ctx context.Context) (*http.Request, error) {
	urlParameters := map[string]interface{}{
		"Endpoint": client.Endpoint,
	}

	preparer := autorest.CreatePreparer(
		autorest.AsGet(),
		autorest.WithCustomBaseURL("{Endpoint}/luis/api/v2.0", urlParameters),
		autorest.WithPath("/azureaccounts"))
	return preparer.Prepare((&http.Request{}).WithContext(ctx))
}

// FivebeThreeOneThreececOneEightOneaeSevenTwoZeroaaTwobTwoSixcSender sends the FivebeThreeOneThreececOneEightOneaeSevenTwoZeroaaTwobTwoSixc request. The method will close the
// http.Response Body if it receives an error.
func (client BaseClient) FivebeThreeOneThreececOneEightOneaeSevenTwoZeroaaTwobTwoSixcSender(req *http.Request) (*http.Response, error) {
	return autorest.SendWithSender(client, req,
		autorest.DoRetryForStatusCodes(client.RetryAttempts, client.RetryDuration, autorest.StatusCodesForRetry...))
}

// FivebeThreeOneThreececOneEightOneaeSevenTwoZeroaaTwobTwoSixcResponder handles the response to the FivebeThreeOneThreececOneEightOneaeSevenTwoZeroaaTwobTwoSixc request. The method always
// closes the http.Response Body.
func (client BaseClient) FivebeThreeOneThreececOneEightOneaeSevenTwoZeroaaTwobTwoSixcResponder(resp *http.Response) (result SetObject, err error) {
	err = autorest.Respond(
		resp,
		client.ByInspecting(),
		azure.WithErrorUnlessStatusCode(http.StatusOK, http.StatusBadRequest, http.StatusUnauthorized, http.StatusForbidden, http.StatusTooManyRequests),
		autorest.ByUnmarshallingJSON(&result.Value),
		autorest.ByClosing())
	result.Response = autorest.Response{Response: resp}
	return
}

// FivebeThreeTwoFiveFiveFourfEightFiveNineOnedbThreeaEightSixTwoThreeTwoeOne removes assigned azure account from the
// application.
// Parameters:
// appID - the application ID.
// azureAccountInfoObject - the azure account information object.
func (client BaseClient) FivebeThreeTwoFiveFiveFourfEightFiveNineOnedbThreeaEightSixTwoThreeTwoeOne(ctx context.Context, appID uuid.UUID, azureAccountInfoObject *AzureAccountInfoObject) (result SetObject, err error) {
	if tracing.IsEnabled() {
		ctx = tracing.StartSpan(ctx, fqdn+"/BaseClient.FivebeThreeTwoFiveFiveFourfEightFiveNineOnedbThreeaEightSixTwoThreeTwoeOne")
		defer func() {
			sc := -1
			if result.Response.Response != nil {
				sc = result.Response.Response.StatusCode
			}
			tracing.EndSpan(ctx, sc, err)
		}()
	}
	if err := validation.Validate([]validation.Validation{
		{TargetValue: azureAccountInfoObject,
			Constraints: []validation.Constraint{{Target: "azureAccountInfoObject", Name: validation.Null, Rule: false,
				Chain: []validation.Constraint{{Target: "azureAccountInfoObject.AzureSubscriptionID", Name: validation.Null, Rule: true, Chain: nil},
					{Target: "azureAccountInfoObject.ResourceGroup", Name: validation.Null, Rule: true, Chain: nil},
					{Target: "azureAccountInfoObject.AccountName", Name: validation.Null, Rule: true, Chain: nil},
				}}}}}); err != nil {
		return result, validation.NewError("authoring.BaseClient", "FivebeThreeTwoFiveFiveFourfEightFiveNineOnedbThreeaEightSixTwoThreeTwoeOne", err.Error())
	}

	req, err := client.FivebeThreeTwoFiveFiveFourfEightFiveNineOnedbThreeaEightSixTwoThreeTwoeOnePreparer(ctx, appID, azureAccountInfoObject)
	if err != nil {
		err = autorest.NewErrorWithError(err, "authoring.BaseClient", "FivebeThreeTwoFiveFiveFourfEightFiveNineOnedbThreeaEightSixTwoThreeTwoeOne", nil, "Failure preparing request")
		return
	}

	resp, err := client.FivebeThreeTwoFiveFiveFourfEightFiveNineOnedbThreeaEightSixTwoThreeTwoeOneSender(req)
	if err != nil {
		result.Response = autorest.Response{Response: resp}
		err = autorest.NewErrorWithError(err, "authoring.BaseClient", "FivebeThreeTwoFiveFiveFourfEightFiveNineOnedbThreeaEightSixTwoThreeTwoeOne", resp, "Failure sending request")
		return
	}

	result, err = client.FivebeThreeTwoFiveFiveFourfEightFiveNineOnedbThreeaEightSixTwoThreeTwoeOneResponder(resp)
	if err != nil {
		err = autorest.NewErrorWithError(err, "authoring.BaseClient", "FivebeThreeTwoFiveFiveFourfEightFiveNineOnedbThreeaEightSixTwoThreeTwoeOne", resp, "Failure responding to request")
	}

	return
}

// FivebeThreeTwoFiveFiveFourfEightFiveNineOnedbThreeaEightSixTwoThreeTwoeOnePreparer prepares the FivebeThreeTwoFiveFiveFourfEightFiveNineOnedbThreeaEightSixTwoThreeTwoeOne request.
func (client BaseClient) FivebeThreeTwoFiveFiveFourfEightFiveNineOnedbThreeaEightSixTwoThreeTwoeOnePreparer(ctx context.Context, appID uuid.UUID, azureAccountInfoObject *AzureAccountInfoObject) (*http.Request, error) {
	urlParameters := map[string]interface{}{
		"Endpoint": client.Endpoint,
	}

	pathParameters := map[string]interface{}{
		"appId": autorest.Encode("path", appID),
	}

	preparer := autorest.CreatePreparer(
		autorest.AsContentType("application/json; charset=utf-8"),
		autorest.AsDelete(),
		autorest.WithCustomBaseURL("{Endpoint}/luis/api/v2.0", urlParameters),
		autorest.WithPathParameters("/apps/{appId}/azureaccounts", pathParameters))
	if azureAccountInfoObject != nil {
		preparer = autorest.DecoratePreparer(preparer,
			autorest.WithJSON(azureAccountInfoObject))
	}
	return preparer.Prepare((&http.Request{}).WithContext(ctx))
}

// FivebeThreeTwoFiveFiveFourfEightFiveNineOnedbThreeaEightSixTwoThreeTwoeOneSender sends the FivebeThreeTwoFiveFiveFourfEightFiveNineOnedbThreeaEightSixTwoThreeTwoeOne request. The method will close the
// http.Response Body if it receives an error.
func (client BaseClient) FivebeThreeTwoFiveFiveFourfEightFiveNineOnedbThreeaEightSixTwoThreeTwoeOneSender(req *http.Request) (*http.Response, error) {
	return autorest.SendWithSender(client, req,
		autorest.DoRetryForStatusCodes(client.RetryAttempts, client.RetryDuration, autorest.StatusCodesForRetry...))
}

// FivebeThreeTwoFiveFiveFourfEightFiveNineOnedbThreeaEightSixTwoThreeTwoeOneResponder handles the response to the FivebeThreeTwoFiveFiveFourfEightFiveNineOnedbThreeaEightSixTwoThreeTwoeOne request. The method always
// closes the http.Response Body.
func (client BaseClient) FivebeThreeTwoFiveFiveFourfEightFiveNineOnedbThreeaEightSixTwoThreeTwoeOneResponder(resp *http.Response) (result SetObject, err error) {
	err = autorest.Respond(
		resp,
		client.ByInspecting(),
		azure.WithErrorUnlessStatusCode(http.StatusOK, http.StatusBadRequest, http.StatusUnauthorized, http.StatusForbidden, http.StatusTooManyRequests),
		autorest.ByUnmarshallingJSON(&result.Value),
		autorest.ByClosing())
	result.Response = autorest.Response{Response: resp}
	return
}

// FivebeThreeTwoTwoTwoEighteEightFourSevenThreedeOneOneSixThreeTwoFiveFiveOneFive assigns an azure account to the
// application.
// Parameters:
// appID - the application ID.
// azureAccountInfoObject - the azure account information object.
func (client BaseClient) FivebeThreeTwoTwoTwoEighteEightFourSevenThreedeOneOneSixThreeTwoFiveFiveOneFive(ctx context.Context, appID uuid.UUID, azureAccountInfoObject *AzureAccountInfoObject) (result SetObject, err error) {
	if tracing.IsEnabled() {
		ctx = tracing.StartSpan(ctx, fqdn+"/BaseClient.FivebeThreeTwoTwoTwoEighteEightFourSevenThreedeOneOneSixThreeTwoFiveFiveOneFive")
		defer func() {
			sc := -1
			if result.Response.Response != nil {
				sc = result.Response.Response.StatusCode
			}
			tracing.EndSpan(ctx, sc, err)
		}()
	}
	if err := validation.Validate([]validation.Validation{
		{TargetValue: azureAccountInfoObject,
			Constraints: []validation.Constraint{{Target: "azureAccountInfoObject", Name: validation.Null, Rule: false,
				Chain: []validation.Constraint{{Target: "azureAccountInfoObject.AzureSubscriptionID", Name: validation.Null, Rule: true, Chain: nil},
					{Target: "azureAccountInfoObject.ResourceGroup", Name: validation.Null, Rule: true, Chain: nil},
					{Target: "azureAccountInfoObject.AccountName", Name: validation.Null, Rule: true, Chain: nil},
				}}}}}); err != nil {
		return result, validation.NewError("authoring.BaseClient", "FivebeThreeTwoTwoTwoEighteEightFourSevenThreedeOneOneSixThreeTwoFiveFiveOneFive", err.Error())
	}

	req, err := client.FivebeThreeTwoTwoTwoEighteEightFourSevenThreedeOneOneSixThreeTwoFiveFiveOneFivePreparer(ctx, appID, azureAccountInfoObject)
	if err != nil {
		err = autorest.NewErrorWithError(err, "authoring.BaseClient", "FivebeThreeTwoTwoTwoEighteEightFourSevenThreedeOneOneSixThreeTwoFiveFiveOneFive", nil, "Failure preparing request")
		return
	}

	resp, err := client.FivebeThreeTwoTwoTwoEighteEightFourSevenThreedeOneOneSixThreeTwoFiveFiveOneFiveSender(req)
	if err != nil {
		result.Response = autorest.Response{Response: resp}
		err = autorest.NewErrorWithError(err, "authoring.BaseClient", "FivebeThreeTwoTwoTwoEighteEightFourSevenThreedeOneOneSixThreeTwoFiveFiveOneFive", resp, "Failure sending request")
		return
	}

	result, err = client.FivebeThreeTwoTwoTwoEighteEightFourSevenThreedeOneOneSixThreeTwoFiveFiveOneFiveResponder(resp)
	if err != nil {
		err = autorest.NewErrorWithError(err, "authoring.BaseClient", "FivebeThreeTwoTwoTwoEighteEightFourSevenThreedeOneOneSixThreeTwoFiveFiveOneFive", resp, "Failure responding to request")
	}

	return
}

// FivebeThreeTwoTwoTwoEighteEightFourSevenThreedeOneOneSixThreeTwoFiveFiveOneFivePreparer prepares the FivebeThreeTwoTwoTwoEighteEightFourSevenThreedeOneOneSixThreeTwoFiveFiveOneFive request.
func (client BaseClient) FivebeThreeTwoTwoTwoEighteEightFourSevenThreedeOneOneSixThreeTwoFiveFiveOneFivePreparer(ctx context.Context, appID uuid.UUID, azureAccountInfoObject *AzureAccountInfoObject) (*http.Request, error) {
	urlParameters := map[string]interface{}{
		"Endpoint": client.Endpoint,
	}

	pathParameters := map[string]interface{}{
		"appId": autorest.Encode("path", appID),
	}

	preparer := autorest.CreatePreparer(
		autorest.AsContentType("application/json; charset=utf-8"),
		autorest.AsPost(),
		autorest.WithCustomBaseURL("{Endpoint}/luis/api/v2.0", urlParameters),
		autorest.WithPathParameters("/apps/{appId}/azureaccounts", pathParameters))
	if azureAccountInfoObject != nil {
		preparer = autorest.DecoratePreparer(preparer,
			autorest.WithJSON(azureAccountInfoObject))
	}
	return preparer.Prepare((&http.Request{}).WithContext(ctx))
}

// FivebeThreeTwoTwoTwoEighteEightFourSevenThreedeOneOneSixThreeTwoFiveFiveOneFiveSender sends the FivebeThreeTwoTwoTwoEighteEightFourSevenThreedeOneOneSixThreeTwoFiveFiveOneFive request. The method will close the
// http.Response Body if it receives an error.
func (client BaseClient) FivebeThreeTwoTwoTwoEighteEightFourSevenThreedeOneOneSixThreeTwoFiveFiveOneFiveSender(req *http.Request) (*http.Response, error) {
	return autorest.SendWithSender(client, req,
		autorest.DoRetryForStatusCodes(client.RetryAttempts, client.RetryDuration, autorest.StatusCodesForRetry...))
}

// FivebeThreeTwoTwoTwoEighteEightFourSevenThreedeOneOneSixThreeTwoFiveFiveOneFiveResponder handles the response to the FivebeThreeTwoTwoTwoEighteEightFourSevenThreedeOneOneSixThreeTwoFiveFiveOneFive request. The method always
// closes the http.Response Body.
func (client BaseClient) FivebeThreeTwoTwoTwoEighteEightFourSevenThreedeOneOneSixThreeTwoFiveFiveOneFiveResponder(resp *http.Response) (result SetObject, err error) {
	err = autorest.Respond(
		resp,
		client.ByInspecting(),
		azure.WithErrorUnlessStatusCode(http.StatusOK, http.StatusCreated, http.StatusBadRequest, http.StatusUnauthorized, http.StatusForbidden, http.StatusTooManyRequests),
		autorest.ByUnmarshallingJSON(&result.Value),
		autorest.ByClosing())
	result.Response = autorest.Response{Response: resp}
	return
}

// FivebeThreeTwoZeroTwoEightaOnedFourEightfEightEightcfdFiveSeveneTwoZero gets the LUIS azure accounts assigned to the
// application for the user using his ARM token.
// Parameters:
// appID - the application ID.
func (client BaseClient) FivebeThreeTwoZeroTwoEightaOnedFourEightfEightEightcfdFiveSeveneTwoZero(ctx context.Context, appID uuid.UUID) (result SetObject, err error) {
	if tracing.IsEnabled() {
		ctx = tracing.StartSpan(ctx, fqdn+"/BaseClient.FivebeThreeTwoZeroTwoEightaOnedFourEightfEightEightcfdFiveSeveneTwoZero")
		defer func() {
			sc := -1
			if result.Response.Response != nil {
				sc = result.Response.Response.StatusCode
			}
			tracing.EndSpan(ctx, sc, err)
		}()
	}
	req, err := client.FivebeThreeTwoZeroTwoEightaOnedFourEightfEightEightcfdFiveSeveneTwoZeroPreparer(ctx, appID)
	if err != nil {
		err = autorest.NewErrorWithError(err, "authoring.BaseClient", "FivebeThreeTwoZeroTwoEightaOnedFourEightfEightEightcfdFiveSeveneTwoZero", nil, "Failure preparing request")
		return
	}

	resp, err := client.FivebeThreeTwoZeroTwoEightaOnedFourEightfEightEightcfdFiveSeveneTwoZeroSender(req)
	if err != nil {
		result.Response = autorest.Response{Response: resp}
		err = autorest.NewErrorWithError(err, "authoring.BaseClient", "FivebeThreeTwoZeroTwoEightaOnedFourEightfEightEightcfdFiveSeveneTwoZero", resp, "Failure sending request")
		return
	}

	result, err = client.FivebeThreeTwoZeroTwoEightaOnedFourEightfEightEightcfdFiveSeveneTwoZeroResponder(resp)
	if err != nil {
		err = autorest.NewErrorWithError(err, "authoring.BaseClient", "FivebeThreeTwoZeroTwoEightaOnedFourEightfEightEightcfdFiveSeveneTwoZero", resp, "Failure responding to request")
	}

	return
}

// FivebeThreeTwoZeroTwoEightaOnedFourEightfEightEightcfdFiveSeveneTwoZeroPreparer prepares the FivebeThreeTwoZeroTwoEightaOnedFourEightfEightEightcfdFiveSeveneTwoZero request.
func (client BaseClient) FivebeThreeTwoZeroTwoEightaOnedFourEightfEightEightcfdFiveSeveneTwoZeroPreparer(ctx context.Context, appID uuid.UUID) (*http.Request, error) {
	urlParameters := map[string]interface{}{
		"Endpoint": client.Endpoint,
	}

	pathParameters := map[string]interface{}{
		"appId": autorest.Encode("path", appID),
	}

	preparer := autorest.CreatePreparer(
		autorest.AsGet(),
		autorest.WithCustomBaseURL("{Endpoint}/luis/api/v2.0", urlParameters),
		autorest.WithPathParameters("/apps/{appId}/azureaccounts", pathParameters))
	return preparer.Prepare((&http.Request{}).WithContext(ctx))
}

// FivebeThreeTwoZeroTwoEightaOnedFourEightfEightEightcfdFiveSeveneTwoZeroSender sends the FivebeThreeTwoZeroTwoEightaOnedFourEightfEightEightcfdFiveSeveneTwoZero request. The method will close the
// http.Response Body if it receives an error.
func (client BaseClient) FivebeThreeTwoZeroTwoEightaOnedFourEightfEightEightcfdFiveSeveneTwoZeroSender(req *http.Request) (*http.Response, error) {
	return autorest.SendWithSender(client, req,
		autorest.DoRetryForStatusCodes(client.RetryAttempts, client.RetryDuration, autorest.StatusCodesForRetry...))
}

// FivebeThreeTwoZeroTwoEightaOnedFourEightfEightEightcfdFiveSeveneTwoZeroResponder handles the response to the FivebeThreeTwoZeroTwoEightaOnedFourEightfEightEightcfdFiveSeveneTwoZero request. The method always
// closes the http.Response Body.
func (client BaseClient) FivebeThreeTwoZeroTwoEightaOnedFourEightfEightEightcfdFiveSeveneTwoZeroResponder(resp *http.Response) (result SetObject, err error) {
	err = autorest.Respond(
		resp,
		client.ByInspecting(),
		azure.WithErrorUnlessStatusCode(http.StatusOK, http.StatusBadRequest, http.StatusUnauthorized, http.StatusForbidden, http.StatusTooManyRequests),
		autorest.ByUnmarshallingJSON(&result.Value),
		autorest.ByClosing())
	result.Response = autorest.Response{Response: resp}
	return
}
