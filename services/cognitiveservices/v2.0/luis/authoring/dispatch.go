package authoring

// Copyright (c) Microsoft and contributors.  All rights reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
// http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
//
// See the License for the specific language governing permissions and
// limitations under the License.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

import (
	"context"
	"github.com/Azure/go-autorest/autorest"
	"github.com/Azure/go-autorest/autorest/azure"
	"github.com/Azure/go-autorest/autorest/validation"
	"github.com/Azure/go-autorest/tracing"
	"github.com/satori/go.uuid"
	"net/http"
)

// DispatchClient is the client for the Dispatch methods of the Authoring service.
type DispatchClient struct {
	BaseClient
}

// NewDispatchClient creates an instance of the DispatchClient client.
func NewDispatchClient(endpoint string) DispatchClient {
	return DispatchClient{New(endpoint)}
}

// BatchAddConnectedServices sends the batch add connected services request.
// Parameters:
// appID - the application ID.
// versionID - the version ID.
// connectedServices - a JSON array of service connections.
func (client DispatchClient) BatchAddConnectedServices(ctx context.Context, appID uuid.UUID, versionID string, connectedServices []DispatchConnectedServiceObject) (result SetObject, err error) {
	if tracing.IsEnabled() {
		ctx = tracing.StartSpan(ctx, fqdn+"/DispatchClient.BatchAddConnectedServices")
		defer func() {
			sc := -1
			if result.Response.Response != nil {
				sc = result.Response.Response.StatusCode
			}
			tracing.EndSpan(ctx, sc, err)
		}()
	}
	if err := validation.Validate([]validation.Validation{
		{TargetValue: connectedServices,
			Constraints: []validation.Constraint{{Target: "connectedServices", Name: validation.Null, Rule: true, Chain: nil}}}}); err != nil {
		return result, validation.NewError("authoring.DispatchClient", "BatchAddConnectedServices", err.Error())
	}

	req, err := client.BatchAddConnectedServicesPreparer(ctx, appID, versionID, connectedServices)
	if err != nil {
		err = autorest.NewErrorWithError(err, "authoring.DispatchClient", "BatchAddConnectedServices", nil, "Failure preparing request")
		return
	}

	resp, err := client.BatchAddConnectedServicesSender(req)
	if err != nil {
		result.Response = autorest.Response{Response: resp}
		err = autorest.NewErrorWithError(err, "authoring.DispatchClient", "BatchAddConnectedServices", resp, "Failure sending request")
		return
	}

	result, err = client.BatchAddConnectedServicesResponder(resp)
	if err != nil {
		err = autorest.NewErrorWithError(err, "authoring.DispatchClient", "BatchAddConnectedServices", resp, "Failure responding to request")
	}

	return
}

// BatchAddConnectedServicesPreparer prepares the BatchAddConnectedServices request.
func (client DispatchClient) BatchAddConnectedServicesPreparer(ctx context.Context, appID uuid.UUID, versionID string, connectedServices []DispatchConnectedServiceObject) (*http.Request, error) {
	urlParameters := map[string]interface{}{
		"Endpoint": client.Endpoint,
	}

	pathParameters := map[string]interface{}{
		"appId":     autorest.Encode("path", appID),
		"versionId": autorest.Encode("path", versionID),
	}

	preparer := autorest.CreatePreparer(
		autorest.AsContentType("application/json; charset=utf-8"),
		autorest.AsPost(),
		autorest.WithCustomBaseURL("{Endpoint}/luis/api/v2.0", urlParameters),
		autorest.WithPathParameters("/apps/{appId}/versions/{versionId}/connectedServices", pathParameters),
		autorest.WithJSON(connectedServices))
	return preparer.Prepare((&http.Request{}).WithContext(ctx))
}

// BatchAddConnectedServicesSender sends the BatchAddConnectedServices request. The method will close the
// http.Response Body if it receives an error.
func (client DispatchClient) BatchAddConnectedServicesSender(req *http.Request) (*http.Response, error) {
	return autorest.SendWithSender(client, req,
		autorest.DoRetryForStatusCodes(client.RetryAttempts, client.RetryDuration, autorest.StatusCodesForRetry...))
}

// BatchAddConnectedServicesResponder handles the response to the BatchAddConnectedServices request. The method always
// closes the http.Response Body.
func (client DispatchClient) BatchAddConnectedServicesResponder(resp *http.Response) (result SetObject, err error) {
	err = autorest.Respond(
		resp,
		client.ByInspecting(),
		azure.WithErrorUnlessStatusCode(http.StatusOK, http.StatusBadRequest, http.StatusUnauthorized, http.StatusForbidden, http.StatusTooManyRequests),
		autorest.ByUnmarshallingJSON(&result.Value),
		autorest.ByClosing())
	result.Response = autorest.Response{Response: resp}
	return
}

// BatchUpdateConnectedServices sends the batch update connected services request.
// Parameters:
// appID - the application ID.
// versionID - the version ID.
// connectedServices - a JSON array of service connections.
func (client DispatchClient) BatchUpdateConnectedServices(ctx context.Context, appID uuid.UUID, versionID string, connectedServices []DispatchConnectedServiceObject) (result SetObject, err error) {
	if tracing.IsEnabled() {
		ctx = tracing.StartSpan(ctx, fqdn+"/DispatchClient.BatchUpdateConnectedServices")
		defer func() {
			sc := -1
			if result.Response.Response != nil {
				sc = result.Response.Response.StatusCode
			}
			tracing.EndSpan(ctx, sc, err)
		}()
	}
	if err := validation.Validate([]validation.Validation{
		{TargetValue: connectedServices,
			Constraints: []validation.Constraint{{Target: "connectedServices", Name: validation.Null, Rule: true, Chain: nil}}}}); err != nil {
		return result, validation.NewError("authoring.DispatchClient", "BatchUpdateConnectedServices", err.Error())
	}

	req, err := client.BatchUpdateConnectedServicesPreparer(ctx, appID, versionID, connectedServices)
	if err != nil {
		err = autorest.NewErrorWithError(err, "authoring.DispatchClient", "BatchUpdateConnectedServices", nil, "Failure preparing request")
		return
	}

	resp, err := client.BatchUpdateConnectedServicesSender(req)
	if err != nil {
		result.Response = autorest.Response{Response: resp}
		err = autorest.NewErrorWithError(err, "authoring.DispatchClient", "BatchUpdateConnectedServices", resp, "Failure sending request")
		return
	}

	result, err = client.BatchUpdateConnectedServicesResponder(resp)
	if err != nil {
		err = autorest.NewErrorWithError(err, "authoring.DispatchClient", "BatchUpdateConnectedServices", resp, "Failure responding to request")
	}

	return
}

// BatchUpdateConnectedServicesPreparer prepares the BatchUpdateConnectedServices request.
func (client DispatchClient) BatchUpdateConnectedServicesPreparer(ctx context.Context, appID uuid.UUID, versionID string, connectedServices []DispatchConnectedServiceObject) (*http.Request, error) {
	urlParameters := map[string]interface{}{
		"Endpoint": client.Endpoint,
	}

	pathParameters := map[string]interface{}{
		"appId":     autorest.Encode("path", appID),
		"versionId": autorest.Encode("path", versionID),
	}

	preparer := autorest.CreatePreparer(
		autorest.AsContentType("application/json; charset=utf-8"),
		autorest.AsPut(),
		autorest.WithCustomBaseURL("{Endpoint}/luis/api/v2.0", urlParameters),
		autorest.WithPathParameters("/apps/{appId}/versions/{versionId}/connectedServices", pathParameters),
		autorest.WithJSON(connectedServices))
	return preparer.Prepare((&http.Request{}).WithContext(ctx))
}

// BatchUpdateConnectedServicesSender sends the BatchUpdateConnectedServices request. The method will close the
// http.Response Body if it receives an error.
func (client DispatchClient) BatchUpdateConnectedServicesSender(req *http.Request) (*http.Response, error) {
	return autorest.SendWithSender(client, req,
		autorest.DoRetryForStatusCodes(client.RetryAttempts, client.RetryDuration, autorest.StatusCodesForRetry...))
}

// BatchUpdateConnectedServicesResponder handles the response to the BatchUpdateConnectedServices request. The method always
// closes the http.Response Body.
func (client DispatchClient) BatchUpdateConnectedServicesResponder(resp *http.Response) (result SetObject, err error) {
	err = autorest.Respond(
		resp,
		client.ByInspecting(),
		azure.WithErrorUnlessStatusCode(http.StatusOK, http.StatusBadRequest, http.StatusUnauthorized, http.StatusForbidden, http.StatusTooManyRequests),
		autorest.ByUnmarshallingJSON(&result.Value),
		autorest.ByClosing())
	result.Response = autorest.Response{Response: resp}
	return
}

// DeleteConnectedServices sends the delete connected services request.
// Parameters:
// appID - the application ID.
// versionID - the version ID.
// intentNames - the intent names.
func (client DispatchClient) DeleteConnectedServices(ctx context.Context, appID uuid.UUID, versionID string, intentNames []DispatchConnectedServiceDeleteObject) (result SetObject, err error) {
	if tracing.IsEnabled() {
		ctx = tracing.StartSpan(ctx, fqdn+"/DispatchClient.DeleteConnectedServices")
		defer func() {
			sc := -1
			if result.Response.Response != nil {
				sc = result.Response.Response.StatusCode
			}
			tracing.EndSpan(ctx, sc, err)
		}()
	}
	if err := validation.Validate([]validation.Validation{
		{TargetValue: intentNames,
			Constraints: []validation.Constraint{{Target: "intentNames", Name: validation.Null, Rule: true, Chain: nil}}}}); err != nil {
		return result, validation.NewError("authoring.DispatchClient", "DeleteConnectedServices", err.Error())
	}

	req, err := client.DeleteConnectedServicesPreparer(ctx, appID, versionID, intentNames)
	if err != nil {
		err = autorest.NewErrorWithError(err, "authoring.DispatchClient", "DeleteConnectedServices", nil, "Failure preparing request")
		return
	}

	resp, err := client.DeleteConnectedServicesSender(req)
	if err != nil {
		result.Response = autorest.Response{Response: resp}
		err = autorest.NewErrorWithError(err, "authoring.DispatchClient", "DeleteConnectedServices", resp, "Failure sending request")
		return
	}

	result, err = client.DeleteConnectedServicesResponder(resp)
	if err != nil {
		err = autorest.NewErrorWithError(err, "authoring.DispatchClient", "DeleteConnectedServices", resp, "Failure responding to request")
	}

	return
}

// DeleteConnectedServicesPreparer prepares the DeleteConnectedServices request.
func (client DispatchClient) DeleteConnectedServicesPreparer(ctx context.Context, appID uuid.UUID, versionID string, intentNames []DispatchConnectedServiceDeleteObject) (*http.Request, error) {
	urlParameters := map[string]interface{}{
		"Endpoint": client.Endpoint,
	}

	pathParameters := map[string]interface{}{
		"appId":     autorest.Encode("path", appID),
		"versionId": autorest.Encode("path", versionID),
	}

	preparer := autorest.CreatePreparer(
		autorest.AsContentType("application/json; charset=utf-8"),
		autorest.AsDelete(),
		autorest.WithCustomBaseURL("{Endpoint}/luis/api/v2.0", urlParameters),
		autorest.WithPathParameters("/apps/{appId}/versions/{versionId}/connectedServices", pathParameters),
		autorest.WithJSON(intentNames))
	return preparer.Prepare((&http.Request{}).WithContext(ctx))
}

// DeleteConnectedServicesSender sends the DeleteConnectedServices request. The method will close the
// http.Response Body if it receives an error.
func (client DispatchClient) DeleteConnectedServicesSender(req *http.Request) (*http.Response, error) {
	return autorest.SendWithSender(client, req,
		autorest.DoRetryForStatusCodes(client.RetryAttempts, client.RetryDuration, autorest.StatusCodesForRetry...))
}

// DeleteConnectedServicesResponder handles the response to the DeleteConnectedServices request. The method always
// closes the http.Response Body.
func (client DispatchClient) DeleteConnectedServicesResponder(resp *http.Response) (result SetObject, err error) {
	err = autorest.Respond(
		resp,
		client.ByInspecting(),
		azure.WithErrorUnlessStatusCode(http.StatusOK, http.StatusBadRequest, http.StatusUnauthorized, http.StatusForbidden, http.StatusTooManyRequests),
		autorest.ByUnmarshallingJSON(&result.Value),
		autorest.ByClosing())
	result.Response = autorest.Response{Response: resp}
	return
}
