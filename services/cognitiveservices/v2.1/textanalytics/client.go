// Package textanalytics implements the Azure ARM Textanalytics service API version v2.1.
//
// The Text Analytics API is a suite of text analytics web services built with best-in-class Microsoft machine learning
// algorithms. The API can be used to analyze unstructured text for tasks such as sentiment analysis, key phrase
// extraction and language detection. No training data is needed to use this API; just bring your text data. This API
// uses advanced natural language processing techniques to deliver best in class predictions. Further documentation can
// be found in https://docs.microsoft.com/en-us/azure/cognitive-services/text-analytics/overview
package textanalytics

// Copyright (c) Microsoft and contributors.  All rights reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
// http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
//
// See the License for the specific language governing permissions and
// limitations under the License.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

import (
	"context"
	"github.com/Azure/go-autorest/autorest"
	"github.com/Azure/go-autorest/autorest/azure"
	"github.com/Azure/go-autorest/tracing"
	"net/http"
)

// BaseClient is the base client for Textanalytics.
type BaseClient struct {
	autorest.Client
	Endpoint string
}

// New creates an instance of the BaseClient client.
func New(endpoint string) BaseClient {
	return NewWithoutDefaults(endpoint)
}

// NewWithoutDefaults creates an instance of the BaseClient client.
func NewWithoutDefaults(endpoint string) BaseClient {
	return BaseClient{
		Client:   autorest.NewClientWithUserAgent(UserAgent()),
		Endpoint: endpoint,
	}
}

// FiveacFourTwoFiveOnedFivebFourccdOneFiveFiveFourdaSevenSixThreeFour the API returns a list of known entities and
// general named entities (\"Person\", \"Location\", \"Organization\" etc) in a given document. Known entities are
// returned with Wikipedia Id and Wikipedia link, and also Bing Id which can be used in Bing Entity Search API. General
// named entities are returned with entity types. If a general named entity is also a known entity, then all
// information regarding it (Wikipedia Id, Bing Id, entity type etc) will be returned. See the <a
// href="https://docs.microsoft.com/en-us/azure/cognitive-services/text-analytics/how-tos/text-analytics-how-to-entity-linking#supported-types-for-named-entity-recognition">Supported
// Entity Types in Text Analytics API</a> for the list of supported Entity Types. See the <a
// href="https://docs.microsoft.com/en-us/azure/cognitive-services/text-analytics/text-analytics-supported-languages">Supported
// languages in Text Analytics API</a> for the list of enabled languages.
// Parameters:
// showStats - (optional) if set to true, response will contain input and document level statistics.
// multiLanguageBatchInput - collection of documents to analyze.
func (client BaseClient) FiveacFourTwoFiveOnedFivebFourccdOneFiveFiveFourdaSevenSixThreeFour(ctx context.Context, showStats *bool, multiLanguageBatchInput *MultiLanguageBatchInput) (result EntitiesBatchResult, err error) {
	if tracing.IsEnabled() {
		ctx = tracing.StartSpan(ctx, fqdn+"/BaseClient.FiveacFourTwoFiveOnedFivebFourccdOneFiveFiveFourdaSevenSixThreeFour")
		defer func() {
			sc := -1
			if result.Response.Response != nil {
				sc = result.Response.Response.StatusCode
			}
			tracing.EndSpan(ctx, sc, err)
		}()
	}
	req, err := client.FiveacFourTwoFiveOnedFivebFourccdOneFiveFiveFourdaSevenSixThreeFourPreparer(ctx, showStats, multiLanguageBatchInput)
	if err != nil {
		err = autorest.NewErrorWithError(err, "textanalytics.BaseClient", "FiveacFourTwoFiveOnedFivebFourccdOneFiveFiveFourdaSevenSixThreeFour", nil, "Failure preparing request")
		return
	}

	resp, err := client.FiveacFourTwoFiveOnedFivebFourccdOneFiveFiveFourdaSevenSixThreeFourSender(req)
	if err != nil {
		result.Response = autorest.Response{Response: resp}
		err = autorest.NewErrorWithError(err, "textanalytics.BaseClient", "FiveacFourTwoFiveOnedFivebFourccdOneFiveFiveFourdaSevenSixThreeFour", resp, "Failure sending request")
		return
	}

	result, err = client.FiveacFourTwoFiveOnedFivebFourccdOneFiveFiveFourdaSevenSixThreeFourResponder(resp)
	if err != nil {
		err = autorest.NewErrorWithError(err, "textanalytics.BaseClient", "FiveacFourTwoFiveOnedFivebFourccdOneFiveFiveFourdaSevenSixThreeFour", resp, "Failure responding to request")
	}

	return
}

// FiveacFourTwoFiveOnedFivebFourccdOneFiveFiveFourdaSevenSixThreeFourPreparer prepares the FiveacFourTwoFiveOnedFivebFourccdOneFiveFiveFourdaSevenSixThreeFour request.
func (client BaseClient) FiveacFourTwoFiveOnedFivebFourccdOneFiveFiveFourdaSevenSixThreeFourPreparer(ctx context.Context, showStats *bool, multiLanguageBatchInput *MultiLanguageBatchInput) (*http.Request, error) {
	urlParameters := map[string]interface{}{
		"Endpoint": client.Endpoint,
	}

	queryParameters := map[string]interface{}{}
	if showStats != nil {
		queryParameters["showStats"] = autorest.Encode("query", *showStats)
	}

	preparer := autorest.CreatePreparer(
		autorest.AsContentType("application/json; charset=utf-8"),
		autorest.AsPost(),
		autorest.WithCustomBaseURL("{Endpoint}/text/analytics/v2.1", urlParameters),
		autorest.WithPath("/entities"),
		autorest.WithQueryParameters(queryParameters))
	if multiLanguageBatchInput != nil {
		preparer = autorest.DecoratePreparer(preparer,
			autorest.WithJSON(multiLanguageBatchInput))
	}
	return preparer.Prepare((&http.Request{}).WithContext(ctx))
}

// FiveacFourTwoFiveOnedFivebFourccdOneFiveFiveFourdaSevenSixThreeFourSender sends the FiveacFourTwoFiveOnedFivebFourccdOneFiveFiveFourdaSevenSixThreeFour request. The method will close the
// http.Response Body if it receives an error.
func (client BaseClient) FiveacFourTwoFiveOnedFivebFourccdOneFiveFiveFourdaSevenSixThreeFourSender(req *http.Request) (*http.Response, error) {
	return autorest.SendWithSender(client, req,
		autorest.DoRetryForStatusCodes(client.RetryAttempts, client.RetryDuration, autorest.StatusCodesForRetry...))
}

// FiveacFourTwoFiveOnedFivebFourccdOneFiveFiveFourdaSevenSixThreeFourResponder handles the response to the FiveacFourTwoFiveOnedFivebFourccdOneFiveFiveFourdaSevenSixThreeFour request. The method always
// closes the http.Response Body.
func (client BaseClient) FiveacFourTwoFiveOnedFivebFourccdOneFiveFiveFourdaSevenSixThreeFourResponder(resp *http.Response) (result EntitiesBatchResult, err error) {
	err = autorest.Respond(
		resp,
		client.ByInspecting(),
		azure.WithErrorUnlessStatusCode(http.StatusOK),
		autorest.ByUnmarshallingJSON(&result),
		autorest.ByClosing())
	result.Response = autorest.Response{Response: resp}
	return
}

// FiveSixfThreeZeroceeedaFiveSixFiveZerodbZeroFiveFiveaThreecNine the API returns a numeric score between 0 and 1.
// Scores close to 1 indicate positive sentiment, while scores close to 0 indicate negative sentiment. A score of 0.5
// indicates the lack of sentiment (e.g. a factoid statement). See the <a
// href="https://docs.microsoft.com/en-us/azure/cognitive-services/text-analytics/text-analytics-supported-languages">Supported
// languages in Text Analytics API</a> for the list of enabled languages.
// Parameters:
// showStats - (optional) if set to true, response will contain input and document level statistics.
// multiLanguageBatchInput - collection of documents to analyze.
func (client BaseClient) FiveSixfThreeZeroceeedaFiveSixFiveZerodbZeroFiveFiveaThreecNine(ctx context.Context, showStats *bool, multiLanguageBatchInput *MultiLanguageBatchInput) (result SetObject, err error) {
	if tracing.IsEnabled() {
		ctx = tracing.StartSpan(ctx, fqdn+"/BaseClient.FiveSixfThreeZeroceeedaFiveSixFiveZerodbZeroFiveFiveaThreecNine")
		defer func() {
			sc := -1
			if result.Response.Response != nil {
				sc = result.Response.Response.StatusCode
			}
			tracing.EndSpan(ctx, sc, err)
		}()
	}
	req, err := client.FiveSixfThreeZeroceeedaFiveSixFiveZerodbZeroFiveFiveaThreecNinePreparer(ctx, showStats, multiLanguageBatchInput)
	if err != nil {
		err = autorest.NewErrorWithError(err, "textanalytics.BaseClient", "FiveSixfThreeZeroceeedaFiveSixFiveZerodbZeroFiveFiveaThreecNine", nil, "Failure preparing request")
		return
	}

	resp, err := client.FiveSixfThreeZeroceeedaFiveSixFiveZerodbZeroFiveFiveaThreecNineSender(req)
	if err != nil {
		result.Response = autorest.Response{Response: resp}
		err = autorest.NewErrorWithError(err, "textanalytics.BaseClient", "FiveSixfThreeZeroceeedaFiveSixFiveZerodbZeroFiveFiveaThreecNine", resp, "Failure sending request")
		return
	}

	result, err = client.FiveSixfThreeZeroceeedaFiveSixFiveZerodbZeroFiveFiveaThreecNineResponder(resp)
	if err != nil {
		err = autorest.NewErrorWithError(err, "textanalytics.BaseClient", "FiveSixfThreeZeroceeedaFiveSixFiveZerodbZeroFiveFiveaThreecNine", resp, "Failure responding to request")
	}

	return
}

// FiveSixfThreeZeroceeedaFiveSixFiveZerodbZeroFiveFiveaThreecNinePreparer prepares the FiveSixfThreeZeroceeedaFiveSixFiveZerodbZeroFiveFiveaThreecNine request.
func (client BaseClient) FiveSixfThreeZeroceeedaFiveSixFiveZerodbZeroFiveFiveaThreecNinePreparer(ctx context.Context, showStats *bool, multiLanguageBatchInput *MultiLanguageBatchInput) (*http.Request, error) {
	urlParameters := map[string]interface{}{
		"Endpoint": client.Endpoint,
	}

	queryParameters := map[string]interface{}{}
	if showStats != nil {
		queryParameters["showStats"] = autorest.Encode("query", *showStats)
	}

	preparer := autorest.CreatePreparer(
		autorest.AsContentType("application/json; charset=utf-8"),
		autorest.AsPost(),
		autorest.WithCustomBaseURL("{Endpoint}/text/analytics/v2.1", urlParameters),
		autorest.WithPath("/sentiment"),
		autorest.WithQueryParameters(queryParameters))
	if multiLanguageBatchInput != nil {
		preparer = autorest.DecoratePreparer(preparer,
			autorest.WithJSON(multiLanguageBatchInput))
	}
	return preparer.Prepare((&http.Request{}).WithContext(ctx))
}

// FiveSixfThreeZeroceeedaFiveSixFiveZerodbZeroFiveFiveaThreecNineSender sends the FiveSixfThreeZeroceeedaFiveSixFiveZerodbZeroFiveFiveaThreecNine request. The method will close the
// http.Response Body if it receives an error.
func (client BaseClient) FiveSixfThreeZeroceeedaFiveSixFiveZerodbZeroFiveFiveaThreecNineSender(req *http.Request) (*http.Response, error) {
	return autorest.SendWithSender(client, req,
		autorest.DoRetryForStatusCodes(client.RetryAttempts, client.RetryDuration, autorest.StatusCodesForRetry...))
}

// FiveSixfThreeZeroceeedaFiveSixFiveZerodbZeroFiveFiveaThreecNineResponder handles the response to the FiveSixfThreeZeroceeedaFiveSixFiveZerodbZeroFiveFiveaThreecNine request. The method always
// closes the http.Response Body.
func (client BaseClient) FiveSixfThreeZeroceeedaFiveSixFiveZerodbZeroFiveFiveaThreecNineResponder(resp *http.Response) (result SetObject, err error) {
	err = autorest.Respond(
		resp,
		client.ByInspecting(),
		azure.WithErrorUnlessStatusCode(http.StatusOK, http.StatusInternalServerError),
		autorest.ByUnmarshallingJSON(&result.Value),
		autorest.ByClosing())
	result.Response = autorest.Response{Response: resp}
	return
}

// FiveSixfThreeZeroceeedaFiveSixFiveZerodbZeroFiveFiveaThreecSeven the API returns the detected language and a numeric
// score between 0 and 1. Scores close to 1 indicate 100% certainty that the identified language is true. A total of
// 120 languages are supported.
// Parameters:
// showStats - (optional) if set to true, response will contain input and document level statistics.
// languageBatchInput - collection of documents to analyze.
func (client BaseClient) FiveSixfThreeZeroceeedaFiveSixFiveZerodbZeroFiveFiveaThreecSeven(ctx context.Context, showStats *bool, languageBatchInput *LanguageBatchInput) (result LanguageBatchResult, err error) {
	if tracing.IsEnabled() {
		ctx = tracing.StartSpan(ctx, fqdn+"/BaseClient.FiveSixfThreeZeroceeedaFiveSixFiveZerodbZeroFiveFiveaThreecSeven")
		defer func() {
			sc := -1
			if result.Response.Response != nil {
				sc = result.Response.Response.StatusCode
			}
			tracing.EndSpan(ctx, sc, err)
		}()
	}
	req, err := client.FiveSixfThreeZeroceeedaFiveSixFiveZerodbZeroFiveFiveaThreecSevenPreparer(ctx, showStats, languageBatchInput)
	if err != nil {
		err = autorest.NewErrorWithError(err, "textanalytics.BaseClient", "FiveSixfThreeZeroceeedaFiveSixFiveZerodbZeroFiveFiveaThreecSeven", nil, "Failure preparing request")
		return
	}

	resp, err := client.FiveSixfThreeZeroceeedaFiveSixFiveZerodbZeroFiveFiveaThreecSevenSender(req)
	if err != nil {
		result.Response = autorest.Response{Response: resp}
		err = autorest.NewErrorWithError(err, "textanalytics.BaseClient", "FiveSixfThreeZeroceeedaFiveSixFiveZerodbZeroFiveFiveaThreecSeven", resp, "Failure sending request")
		return
	}

	result, err = client.FiveSixfThreeZeroceeedaFiveSixFiveZerodbZeroFiveFiveaThreecSevenResponder(resp)
	if err != nil {
		err = autorest.NewErrorWithError(err, "textanalytics.BaseClient", "FiveSixfThreeZeroceeedaFiveSixFiveZerodbZeroFiveFiveaThreecSeven", resp, "Failure responding to request")
	}

	return
}

// FiveSixfThreeZeroceeedaFiveSixFiveZerodbZeroFiveFiveaThreecSevenPreparer prepares the FiveSixfThreeZeroceeedaFiveSixFiveZerodbZeroFiveFiveaThreecSeven request.
func (client BaseClient) FiveSixfThreeZeroceeedaFiveSixFiveZerodbZeroFiveFiveaThreecSevenPreparer(ctx context.Context, showStats *bool, languageBatchInput *LanguageBatchInput) (*http.Request, error) {
	urlParameters := map[string]interface{}{
		"Endpoint": client.Endpoint,
	}

	queryParameters := map[string]interface{}{}
	if showStats != nil {
		queryParameters["showStats"] = autorest.Encode("query", *showStats)
	}

	preparer := autorest.CreatePreparer(
		autorest.AsContentType("application/json; charset=utf-8"),
		autorest.AsPost(),
		autorest.WithCustomBaseURL("{Endpoint}/text/analytics/v2.1", urlParameters),
		autorest.WithPath("/languages"),
		autorest.WithQueryParameters(queryParameters))
	if languageBatchInput != nil {
		preparer = autorest.DecoratePreparer(preparer,
			autorest.WithJSON(languageBatchInput))
	}
	return preparer.Prepare((&http.Request{}).WithContext(ctx))
}

// FiveSixfThreeZeroceeedaFiveSixFiveZerodbZeroFiveFiveaThreecSevenSender sends the FiveSixfThreeZeroceeedaFiveSixFiveZerodbZeroFiveFiveaThreecSeven request. The method will close the
// http.Response Body if it receives an error.
func (client BaseClient) FiveSixfThreeZeroceeedaFiveSixFiveZerodbZeroFiveFiveaThreecSevenSender(req *http.Request) (*http.Response, error) {
	return autorest.SendWithSender(client, req,
		autorest.DoRetryForStatusCodes(client.RetryAttempts, client.RetryDuration, autorest.StatusCodesForRetry...))
}

// FiveSixfThreeZeroceeedaFiveSixFiveZerodbZeroFiveFiveaThreecSevenResponder handles the response to the FiveSixfThreeZeroceeedaFiveSixFiveZerodbZeroFiveFiveaThreecSeven request. The method always
// closes the http.Response Body.
func (client BaseClient) FiveSixfThreeZeroceeedaFiveSixFiveZerodbZeroFiveFiveaThreecSevenResponder(resp *http.Response) (result LanguageBatchResult, err error) {
	err = autorest.Respond(
		resp,
		client.ByInspecting(),
		azure.WithErrorUnlessStatusCode(http.StatusOK),
		autorest.ByUnmarshallingJSON(&result),
		autorest.ByClosing())
	result.Response = autorest.Response{Response: resp}
	return
}

// FiveSixfThreeZeroceeedaFiveSixFiveZerodbZeroFiveFiveaThreecSix the API returns a list of strings denoting the key
// talking points in the input text. See the <a
// href="https://docs.microsoft.com/en-us/azure/cognitive-services/text-analytics/text-analytics-supported-languages">Supported
// languages in Text Analytics API</a> for the list of enabled languages.
// Parameters:
// showStats - (optional) if set to true, response will contain input and document level statistics.
// multiLanguageBatchInput - collection of documents to analyze. Documents can now contain a language field to
// indicate the text language
func (client BaseClient) FiveSixfThreeZeroceeedaFiveSixFiveZerodbZeroFiveFiveaThreecSix(ctx context.Context, showStats *bool, multiLanguageBatchInput *MultiLanguageBatchInput) (result KeyPhraseBatchResult, err error) {
	if tracing.IsEnabled() {
		ctx = tracing.StartSpan(ctx, fqdn+"/BaseClient.FiveSixfThreeZeroceeedaFiveSixFiveZerodbZeroFiveFiveaThreecSix")
		defer func() {
			sc := -1
			if result.Response.Response != nil {
				sc = result.Response.Response.StatusCode
			}
			tracing.EndSpan(ctx, sc, err)
		}()
	}
	req, err := client.FiveSixfThreeZeroceeedaFiveSixFiveZerodbZeroFiveFiveaThreecSixPreparer(ctx, showStats, multiLanguageBatchInput)
	if err != nil {
		err = autorest.NewErrorWithError(err, "textanalytics.BaseClient", "FiveSixfThreeZeroceeedaFiveSixFiveZerodbZeroFiveFiveaThreecSix", nil, "Failure preparing request")
		return
	}

	resp, err := client.FiveSixfThreeZeroceeedaFiveSixFiveZerodbZeroFiveFiveaThreecSixSender(req)
	if err != nil {
		result.Response = autorest.Response{Response: resp}
		err = autorest.NewErrorWithError(err, "textanalytics.BaseClient", "FiveSixfThreeZeroceeedaFiveSixFiveZerodbZeroFiveFiveaThreecSix", resp, "Failure sending request")
		return
	}

	result, err = client.FiveSixfThreeZeroceeedaFiveSixFiveZerodbZeroFiveFiveaThreecSixResponder(resp)
	if err != nil {
		err = autorest.NewErrorWithError(err, "textanalytics.BaseClient", "FiveSixfThreeZeroceeedaFiveSixFiveZerodbZeroFiveFiveaThreecSix", resp, "Failure responding to request")
	}

	return
}

// FiveSixfThreeZeroceeedaFiveSixFiveZerodbZeroFiveFiveaThreecSixPreparer prepares the FiveSixfThreeZeroceeedaFiveSixFiveZerodbZeroFiveFiveaThreecSix request.
func (client BaseClient) FiveSixfThreeZeroceeedaFiveSixFiveZerodbZeroFiveFiveaThreecSixPreparer(ctx context.Context, showStats *bool, multiLanguageBatchInput *MultiLanguageBatchInput) (*http.Request, error) {
	urlParameters := map[string]interface{}{
		"Endpoint": client.Endpoint,
	}

	queryParameters := map[string]interface{}{}
	if showStats != nil {
		queryParameters["showStats"] = autorest.Encode("query", *showStats)
	}

	preparer := autorest.CreatePreparer(
		autorest.AsContentType("application/json; charset=utf-8"),
		autorest.AsPost(),
		autorest.WithCustomBaseURL("{Endpoint}/text/analytics/v2.1", urlParameters),
		autorest.WithPath("/keyPhrases"),
		autorest.WithQueryParameters(queryParameters))
	if multiLanguageBatchInput != nil {
		preparer = autorest.DecoratePreparer(preparer,
			autorest.WithJSON(multiLanguageBatchInput))
	}
	return preparer.Prepare((&http.Request{}).WithContext(ctx))
}

// FiveSixfThreeZeroceeedaFiveSixFiveZerodbZeroFiveFiveaThreecSixSender sends the FiveSixfThreeZeroceeedaFiveSixFiveZerodbZeroFiveFiveaThreecSix request. The method will close the
// http.Response Body if it receives an error.
func (client BaseClient) FiveSixfThreeZeroceeedaFiveSixFiveZerodbZeroFiveFiveaThreecSixSender(req *http.Request) (*http.Response, error) {
	return autorest.SendWithSender(client, req,
		autorest.DoRetryForStatusCodes(client.RetryAttempts, client.RetryDuration, autorest.StatusCodesForRetry...))
}

// FiveSixfThreeZeroceeedaFiveSixFiveZerodbZeroFiveFiveaThreecSixResponder handles the response to the FiveSixfThreeZeroceeedaFiveSixFiveZerodbZeroFiveFiveaThreecSix request. The method always
// closes the http.Response Body.
func (client BaseClient) FiveSixfThreeZeroceeedaFiveSixFiveZerodbZeroFiveFiveaThreecSixResponder(resp *http.Response) (result KeyPhraseBatchResult, err error) {
	err = autorest.Respond(
		resp,
		client.ByInspecting(),
		azure.WithErrorUnlessStatusCode(http.StatusOK),
		autorest.ByUnmarshallingJSON(&result),
		autorest.ByClosing())
	result.Response = autorest.Response{Response: resp}
	return
}
