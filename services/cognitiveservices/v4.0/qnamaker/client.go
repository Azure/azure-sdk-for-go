// Package qnamaker implements the Azure ARM Qnamaker service API version 4.0.
//
// An API for QnAMaker Service
package qnamaker

// Copyright (c) Microsoft and contributors.  All rights reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
// http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
//
// See the License for the specific language governing permissions and
// limitations under the License.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

import (
	"context"
	"github.com/Azure/go-autorest/autorest"
	"github.com/Azure/go-autorest/autorest/azure"
	"github.com/Azure/go-autorest/autorest/validation"
	"github.com/Azure/go-autorest/tracing"
	"net/http"
)

// BaseClient is the base client for Qnamaker.
type BaseClient struct {
	autorest.Client
	Endpoint string
}

// New creates an instance of the BaseClient client.
func New(endpoint string) BaseClient {
	return NewWithoutDefaults(endpoint)
}

// NewWithoutDefaults creates an instance of the BaseClient client.
func NewWithoutDefaults(endpoint string) BaseClient {
	return BaseClient{
		Client:   autorest.NewClientWithUserAgent(UserAgent()),
		Endpoint: endpoint,
	}
}

// CreateKnowledgebase sends the create knowledgebase request.
// Parameters:
// createKbPayload - post body of the request.
func (client BaseClient) CreateKnowledgebase(ctx context.Context, createKbPayload CreateKbDTO) (result Operation, err error) {
	if tracing.IsEnabled() {
		ctx = tracing.StartSpan(ctx, fqdn+"/BaseClient.CreateKnowledgebase")
		defer func() {
			sc := -1
			if result.Response.Response != nil {
				sc = result.Response.Response.StatusCode
			}
			tracing.EndSpan(ctx, sc, err)
		}()
	}
	if err := validation.Validate([]validation.Validation{
		{TargetValue: createKbPayload,
			Constraints: []validation.Constraint{{Target: "createKbPayload.Name", Name: validation.Null, Rule: true,
				Chain: []validation.Constraint{{Target: "createKbPayload.Name", Name: validation.MaxLength, Rule: 100, Chain: nil},
					{Target: "createKbPayload.Name", Name: validation.MinLength, Rule: 1, Chain: nil},
				}}}}}); err != nil {
		return result, validation.NewError("qnamaker.BaseClient", "CreateKnowledgebase", err.Error())
	}

	req, err := client.CreateKnowledgebasePreparer(ctx, createKbPayload)
	if err != nil {
		err = autorest.NewErrorWithError(err, "qnamaker.BaseClient", "CreateKnowledgebase", nil, "Failure preparing request")
		return
	}

	resp, err := client.CreateKnowledgebaseSender(req)
	if err != nil {
		result.Response = autorest.Response{Response: resp}
		err = autorest.NewErrorWithError(err, "qnamaker.BaseClient", "CreateKnowledgebase", resp, "Failure sending request")
		return
	}

	result, err = client.CreateKnowledgebaseResponder(resp)
	if err != nil {
		err = autorest.NewErrorWithError(err, "qnamaker.BaseClient", "CreateKnowledgebase", resp, "Failure responding to request")
	}

	return
}

// CreateKnowledgebasePreparer prepares the CreateKnowledgebase request.
func (client BaseClient) CreateKnowledgebasePreparer(ctx context.Context, createKbPayload CreateKbDTO) (*http.Request, error) {
	urlParameters := map[string]interface{}{
		"Endpoint": client.Endpoint,
	}

	preparer := autorest.CreatePreparer(
		autorest.AsContentType("application/json; charset=utf-8"),
		autorest.AsPost(),
		autorest.WithCustomBaseURL("{Endpoint}/qnamaker/v4.0", urlParameters),
		autorest.WithPath("/knowledgebases/create"),
		autorest.WithJSON(createKbPayload))
	return preparer.Prepare((&http.Request{}).WithContext(ctx))
}

// CreateKnowledgebaseSender sends the CreateKnowledgebase request. The method will close the
// http.Response Body if it receives an error.
func (client BaseClient) CreateKnowledgebaseSender(req *http.Request) (*http.Response, error) {
	return autorest.SendWithSender(client, req,
		autorest.DoRetryForStatusCodes(client.RetryAttempts, client.RetryDuration, autorest.StatusCodesForRetry...))
}

// CreateKnowledgebaseResponder handles the response to the CreateKnowledgebase request. The method always
// closes the http.Response Body.
func (client BaseClient) CreateKnowledgebaseResponder(resp *http.Response) (result Operation, err error) {
	err = autorest.Respond(
		resp,
		client.ByInspecting(),
		azure.WithErrorUnlessStatusCode(http.StatusOK, http.StatusAccepted),
		autorest.ByUnmarshallingJSON(&result),
		autorest.ByClosing())
	result.Response = autorest.Response{Response: resp}
	return
}

// DeleteKnowledgebase sends the delete knowledgebase request.
// Parameters:
// kbID - knowledgebase id.
func (client BaseClient) DeleteKnowledgebase(ctx context.Context, kbID string) (result autorest.Response, err error) {
	if tracing.IsEnabled() {
		ctx = tracing.StartSpan(ctx, fqdn+"/BaseClient.DeleteKnowledgebase")
		defer func() {
			sc := -1
			if result.Response != nil {
				sc = result.Response.StatusCode
			}
			tracing.EndSpan(ctx, sc, err)
		}()
	}
	req, err := client.DeleteKnowledgebasePreparer(ctx, kbID)
	if err != nil {
		err = autorest.NewErrorWithError(err, "qnamaker.BaseClient", "DeleteKnowledgebase", nil, "Failure preparing request")
		return
	}

	resp, err := client.DeleteKnowledgebaseSender(req)
	if err != nil {
		result.Response = resp
		err = autorest.NewErrorWithError(err, "qnamaker.BaseClient", "DeleteKnowledgebase", resp, "Failure sending request")
		return
	}

	result, err = client.DeleteKnowledgebaseResponder(resp)
	if err != nil {
		err = autorest.NewErrorWithError(err, "qnamaker.BaseClient", "DeleteKnowledgebase", resp, "Failure responding to request")
	}

	return
}

// DeleteKnowledgebasePreparer prepares the DeleteKnowledgebase request.
func (client BaseClient) DeleteKnowledgebasePreparer(ctx context.Context, kbID string) (*http.Request, error) {
	urlParameters := map[string]interface{}{
		"Endpoint": client.Endpoint,
	}

	pathParameters := map[string]interface{}{
		"kbId": autorest.Encode("path", kbID),
	}

	preparer := autorest.CreatePreparer(
		autorest.AsDelete(),
		autorest.WithCustomBaseURL("{Endpoint}/qnamaker/v4.0", urlParameters),
		autorest.WithPathParameters("/knowledgebases/{kbId}", pathParameters))
	return preparer.Prepare((&http.Request{}).WithContext(ctx))
}

// DeleteKnowledgebaseSender sends the DeleteKnowledgebase request. The method will close the
// http.Response Body if it receives an error.
func (client BaseClient) DeleteKnowledgebaseSender(req *http.Request) (*http.Response, error) {
	return autorest.SendWithSender(client, req,
		autorest.DoRetryForStatusCodes(client.RetryAttempts, client.RetryDuration, autorest.StatusCodesForRetry...))
}

// DeleteKnowledgebaseResponder handles the response to the DeleteKnowledgebase request. The method always
// closes the http.Response Body.
func (client BaseClient) DeleteKnowledgebaseResponder(resp *http.Response) (result autorest.Response, err error) {
	err = autorest.Respond(
		resp,
		client.ByInspecting(),
		azure.WithErrorUnlessStatusCode(http.StatusOK, http.StatusNoContent),
		autorest.ByClosing())
	result.Response = resp
	return
}

// DownloadAlterations sends the download alterations request.
func (client BaseClient) DownloadAlterations(ctx context.Context) (result WordAlterationsDTO, err error) {
	if tracing.IsEnabled() {
		ctx = tracing.StartSpan(ctx, fqdn+"/BaseClient.DownloadAlterations")
		defer func() {
			sc := -1
			if result.Response.Response != nil {
				sc = result.Response.Response.StatusCode
			}
			tracing.EndSpan(ctx, sc, err)
		}()
	}
	req, err := client.DownloadAlterationsPreparer(ctx)
	if err != nil {
		err = autorest.NewErrorWithError(err, "qnamaker.BaseClient", "DownloadAlterations", nil, "Failure preparing request")
		return
	}

	resp, err := client.DownloadAlterationsSender(req)
	if err != nil {
		result.Response = autorest.Response{Response: resp}
		err = autorest.NewErrorWithError(err, "qnamaker.BaseClient", "DownloadAlterations", resp, "Failure sending request")
		return
	}

	result, err = client.DownloadAlterationsResponder(resp)
	if err != nil {
		err = autorest.NewErrorWithError(err, "qnamaker.BaseClient", "DownloadAlterations", resp, "Failure responding to request")
	}

	return
}

// DownloadAlterationsPreparer prepares the DownloadAlterations request.
func (client BaseClient) DownloadAlterationsPreparer(ctx context.Context) (*http.Request, error) {
	urlParameters := map[string]interface{}{
		"Endpoint": client.Endpoint,
	}

	preparer := autorest.CreatePreparer(
		autorest.AsGet(),
		autorest.WithCustomBaseURL("{Endpoint}/qnamaker/v4.0", urlParameters),
		autorest.WithPath("/alterations"))
	return preparer.Prepare((&http.Request{}).WithContext(ctx))
}

// DownloadAlterationsSender sends the DownloadAlterations request. The method will close the
// http.Response Body if it receives an error.
func (client BaseClient) DownloadAlterationsSender(req *http.Request) (*http.Response, error) {
	return autorest.SendWithSender(client, req,
		autorest.DoRetryForStatusCodes(client.RetryAttempts, client.RetryDuration, autorest.StatusCodesForRetry...))
}

// DownloadAlterationsResponder handles the response to the DownloadAlterations request. The method always
// closes the http.Response Body.
func (client BaseClient) DownloadAlterationsResponder(resp *http.Response) (result WordAlterationsDTO, err error) {
	err = autorest.Respond(
		resp,
		client.ByInspecting(),
		azure.WithErrorUnlessStatusCode(http.StatusOK),
		autorest.ByUnmarshallingJSON(&result),
		autorest.ByClosing())
	result.Response = autorest.Response{Response: resp}
	return
}

// DownloadKnowledgebase sends the download knowledgebase request.
// Parameters:
// kbID - knowledgebase id.
// environment - specifies whether environment is Test or Prod.
func (client BaseClient) DownloadKnowledgebase(ctx context.Context, kbID string, environment string) (result QnADocumentsDTO, err error) {
	if tracing.IsEnabled() {
		ctx = tracing.StartSpan(ctx, fqdn+"/BaseClient.DownloadKnowledgebase")
		defer func() {
			sc := -1
			if result.Response.Response != nil {
				sc = result.Response.Response.StatusCode
			}
			tracing.EndSpan(ctx, sc, err)
		}()
	}
	req, err := client.DownloadKnowledgebasePreparer(ctx, kbID, environment)
	if err != nil {
		err = autorest.NewErrorWithError(err, "qnamaker.BaseClient", "DownloadKnowledgebase", nil, "Failure preparing request")
		return
	}

	resp, err := client.DownloadKnowledgebaseSender(req)
	if err != nil {
		result.Response = autorest.Response{Response: resp}
		err = autorest.NewErrorWithError(err, "qnamaker.BaseClient", "DownloadKnowledgebase", resp, "Failure sending request")
		return
	}

	result, err = client.DownloadKnowledgebaseResponder(resp)
	if err != nil {
		err = autorest.NewErrorWithError(err, "qnamaker.BaseClient", "DownloadKnowledgebase", resp, "Failure responding to request")
	}

	return
}

// DownloadKnowledgebasePreparer prepares the DownloadKnowledgebase request.
func (client BaseClient) DownloadKnowledgebasePreparer(ctx context.Context, kbID string, environment string) (*http.Request, error) {
	urlParameters := map[string]interface{}{
		"Endpoint": client.Endpoint,
	}

	pathParameters := map[string]interface{}{
		"environment": autorest.Encode("path", environment),
		"kbId":        autorest.Encode("path", kbID),
	}

	preparer := autorest.CreatePreparer(
		autorest.AsGet(),
		autorest.WithCustomBaseURL("{Endpoint}/qnamaker/v4.0", urlParameters),
		autorest.WithPathParameters("/knowledgebases/{kbId}/{environment}/qna", pathParameters))
	return preparer.Prepare((&http.Request{}).WithContext(ctx))
}

// DownloadKnowledgebaseSender sends the DownloadKnowledgebase request. The method will close the
// http.Response Body if it receives an error.
func (client BaseClient) DownloadKnowledgebaseSender(req *http.Request) (*http.Response, error) {
	return autorest.SendWithSender(client, req,
		autorest.DoRetryForStatusCodes(client.RetryAttempts, client.RetryDuration, autorest.StatusCodesForRetry...))
}

// DownloadKnowledgebaseResponder handles the response to the DownloadKnowledgebase request. The method always
// closes the http.Response Body.
func (client BaseClient) DownloadKnowledgebaseResponder(resp *http.Response) (result QnADocumentsDTO, err error) {
	err = autorest.Respond(
		resp,
		client.ByInspecting(),
		azure.WithErrorUnlessStatusCode(http.StatusOK),
		autorest.ByUnmarshallingJSON(&result),
		autorest.ByClosing())
	result.Response = autorest.Response{Response: resp}
	return
}

// GetEndpointKeys sends the get endpoint keys request.
func (client BaseClient) GetEndpointKeys(ctx context.Context) (result EndpointKeysDTO, err error) {
	if tracing.IsEnabled() {
		ctx = tracing.StartSpan(ctx, fqdn+"/BaseClient.GetEndpointKeys")
		defer func() {
			sc := -1
			if result.Response.Response != nil {
				sc = result.Response.Response.StatusCode
			}
			tracing.EndSpan(ctx, sc, err)
		}()
	}
	req, err := client.GetEndpointKeysPreparer(ctx)
	if err != nil {
		err = autorest.NewErrorWithError(err, "qnamaker.BaseClient", "GetEndpointKeys", nil, "Failure preparing request")
		return
	}

	resp, err := client.GetEndpointKeysSender(req)
	if err != nil {
		result.Response = autorest.Response{Response: resp}
		err = autorest.NewErrorWithError(err, "qnamaker.BaseClient", "GetEndpointKeys", resp, "Failure sending request")
		return
	}

	result, err = client.GetEndpointKeysResponder(resp)
	if err != nil {
		err = autorest.NewErrorWithError(err, "qnamaker.BaseClient", "GetEndpointKeys", resp, "Failure responding to request")
	}

	return
}

// GetEndpointKeysPreparer prepares the GetEndpointKeys request.
func (client BaseClient) GetEndpointKeysPreparer(ctx context.Context) (*http.Request, error) {
	urlParameters := map[string]interface{}{
		"Endpoint": client.Endpoint,
	}

	preparer := autorest.CreatePreparer(
		autorest.AsGet(),
		autorest.WithCustomBaseURL("{Endpoint}/qnamaker/v4.0", urlParameters),
		autorest.WithPath("/endpointkeys"))
	return preparer.Prepare((&http.Request{}).WithContext(ctx))
}

// GetEndpointKeysSender sends the GetEndpointKeys request. The method will close the
// http.Response Body if it receives an error.
func (client BaseClient) GetEndpointKeysSender(req *http.Request) (*http.Response, error) {
	return autorest.SendWithSender(client, req,
		autorest.DoRetryForStatusCodes(client.RetryAttempts, client.RetryDuration, autorest.StatusCodesForRetry...))
}

// GetEndpointKeysResponder handles the response to the GetEndpointKeys request. The method always
// closes the http.Response Body.
func (client BaseClient) GetEndpointKeysResponder(resp *http.Response) (result EndpointKeysDTO, err error) {
	err = autorest.Respond(
		resp,
		client.ByInspecting(),
		azure.WithErrorUnlessStatusCode(http.StatusOK),
		autorest.ByUnmarshallingJSON(&result),
		autorest.ByClosing())
	result.Response = autorest.Response{Response: resp}
	return
}

// GetKnowledgebaseDetails sends the get knowledgebase details request.
// Parameters:
// kbID - knowledgebase id.
func (client BaseClient) GetKnowledgebaseDetails(ctx context.Context, kbID string) (result KnowledgebaseDTO, err error) {
	if tracing.IsEnabled() {
		ctx = tracing.StartSpan(ctx, fqdn+"/BaseClient.GetKnowledgebaseDetails")
		defer func() {
			sc := -1
			if result.Response.Response != nil {
				sc = result.Response.Response.StatusCode
			}
			tracing.EndSpan(ctx, sc, err)
		}()
	}
	req, err := client.GetKnowledgebaseDetailsPreparer(ctx, kbID)
	if err != nil {
		err = autorest.NewErrorWithError(err, "qnamaker.BaseClient", "GetKnowledgebaseDetails", nil, "Failure preparing request")
		return
	}

	resp, err := client.GetKnowledgebaseDetailsSender(req)
	if err != nil {
		result.Response = autorest.Response{Response: resp}
		err = autorest.NewErrorWithError(err, "qnamaker.BaseClient", "GetKnowledgebaseDetails", resp, "Failure sending request")
		return
	}

	result, err = client.GetKnowledgebaseDetailsResponder(resp)
	if err != nil {
		err = autorest.NewErrorWithError(err, "qnamaker.BaseClient", "GetKnowledgebaseDetails", resp, "Failure responding to request")
	}

	return
}

// GetKnowledgebaseDetailsPreparer prepares the GetKnowledgebaseDetails request.
func (client BaseClient) GetKnowledgebaseDetailsPreparer(ctx context.Context, kbID string) (*http.Request, error) {
	urlParameters := map[string]interface{}{
		"Endpoint": client.Endpoint,
	}

	pathParameters := map[string]interface{}{
		"kbId": autorest.Encode("path", kbID),
	}

	preparer := autorest.CreatePreparer(
		autorest.AsGet(),
		autorest.WithCustomBaseURL("{Endpoint}/qnamaker/v4.0", urlParameters),
		autorest.WithPathParameters("/knowledgebases/{kbId}", pathParameters))
	return preparer.Prepare((&http.Request{}).WithContext(ctx))
}

// GetKnowledgebaseDetailsSender sends the GetKnowledgebaseDetails request. The method will close the
// http.Response Body if it receives an error.
func (client BaseClient) GetKnowledgebaseDetailsSender(req *http.Request) (*http.Response, error) {
	return autorest.SendWithSender(client, req,
		autorest.DoRetryForStatusCodes(client.RetryAttempts, client.RetryDuration, autorest.StatusCodesForRetry...))
}

// GetKnowledgebaseDetailsResponder handles the response to the GetKnowledgebaseDetails request. The method always
// closes the http.Response Body.
func (client BaseClient) GetKnowledgebaseDetailsResponder(resp *http.Response) (result KnowledgebaseDTO, err error) {
	err = autorest.Respond(
		resp,
		client.ByInspecting(),
		azure.WithErrorUnlessStatusCode(http.StatusOK),
		autorest.ByUnmarshallingJSON(&result),
		autorest.ByClosing())
	result.Response = autorest.Response{Response: resp}
	return
}

// GetKnowledgebasesForUser sends the get knowledgebases for user request.
func (client BaseClient) GetKnowledgebasesForUser(ctx context.Context) (result KnowledgebasesDTO, err error) {
	if tracing.IsEnabled() {
		ctx = tracing.StartSpan(ctx, fqdn+"/BaseClient.GetKnowledgebasesForUser")
		defer func() {
			sc := -1
			if result.Response.Response != nil {
				sc = result.Response.Response.StatusCode
			}
			tracing.EndSpan(ctx, sc, err)
		}()
	}
	req, err := client.GetKnowledgebasesForUserPreparer(ctx)
	if err != nil {
		err = autorest.NewErrorWithError(err, "qnamaker.BaseClient", "GetKnowledgebasesForUser", nil, "Failure preparing request")
		return
	}

	resp, err := client.GetKnowledgebasesForUserSender(req)
	if err != nil {
		result.Response = autorest.Response{Response: resp}
		err = autorest.NewErrorWithError(err, "qnamaker.BaseClient", "GetKnowledgebasesForUser", resp, "Failure sending request")
		return
	}

	result, err = client.GetKnowledgebasesForUserResponder(resp)
	if err != nil {
		err = autorest.NewErrorWithError(err, "qnamaker.BaseClient", "GetKnowledgebasesForUser", resp, "Failure responding to request")
	}

	return
}

// GetKnowledgebasesForUserPreparer prepares the GetKnowledgebasesForUser request.
func (client BaseClient) GetKnowledgebasesForUserPreparer(ctx context.Context) (*http.Request, error) {
	urlParameters := map[string]interface{}{
		"Endpoint": client.Endpoint,
	}

	preparer := autorest.CreatePreparer(
		autorest.AsGet(),
		autorest.WithCustomBaseURL("{Endpoint}/qnamaker/v4.0", urlParameters),
		autorest.WithPath("/knowledgebases"))
	return preparer.Prepare((&http.Request{}).WithContext(ctx))
}

// GetKnowledgebasesForUserSender sends the GetKnowledgebasesForUser request. The method will close the
// http.Response Body if it receives an error.
func (client BaseClient) GetKnowledgebasesForUserSender(req *http.Request) (*http.Response, error) {
	return autorest.SendWithSender(client, req,
		autorest.DoRetryForStatusCodes(client.RetryAttempts, client.RetryDuration, autorest.StatusCodesForRetry...))
}

// GetKnowledgebasesForUserResponder handles the response to the GetKnowledgebasesForUser request. The method always
// closes the http.Response Body.
func (client BaseClient) GetKnowledgebasesForUserResponder(resp *http.Response) (result KnowledgebasesDTO, err error) {
	err = autorest.Respond(
		resp,
		client.ByInspecting(),
		azure.WithErrorUnlessStatusCode(http.StatusOK),
		autorest.ByUnmarshallingJSON(&result),
		autorest.ByClosing())
	result.Response = autorest.Response{Response: resp}
	return
}

// GetOperationDetails sends the get operation details request.
// Parameters:
// operationID - operation id.
func (client BaseClient) GetOperationDetails(ctx context.Context, operationID string) (result Operation, err error) {
	if tracing.IsEnabled() {
		ctx = tracing.StartSpan(ctx, fqdn+"/BaseClient.GetOperationDetails")
		defer func() {
			sc := -1
			if result.Response.Response != nil {
				sc = result.Response.Response.StatusCode
			}
			tracing.EndSpan(ctx, sc, err)
		}()
	}
	req, err := client.GetOperationDetailsPreparer(ctx, operationID)
	if err != nil {
		err = autorest.NewErrorWithError(err, "qnamaker.BaseClient", "GetOperationDetails", nil, "Failure preparing request")
		return
	}

	resp, err := client.GetOperationDetailsSender(req)
	if err != nil {
		result.Response = autorest.Response{Response: resp}
		err = autorest.NewErrorWithError(err, "qnamaker.BaseClient", "GetOperationDetails", resp, "Failure sending request")
		return
	}

	result, err = client.GetOperationDetailsResponder(resp)
	if err != nil {
		err = autorest.NewErrorWithError(err, "qnamaker.BaseClient", "GetOperationDetails", resp, "Failure responding to request")
	}

	return
}

// GetOperationDetailsPreparer prepares the GetOperationDetails request.
func (client BaseClient) GetOperationDetailsPreparer(ctx context.Context, operationID string) (*http.Request, error) {
	urlParameters := map[string]interface{}{
		"Endpoint": client.Endpoint,
	}

	pathParameters := map[string]interface{}{
		"operationId": autorest.Encode("path", operationID),
	}

	preparer := autorest.CreatePreparer(
		autorest.AsGet(),
		autorest.WithCustomBaseURL("{Endpoint}/qnamaker/v4.0", urlParameters),
		autorest.WithPathParameters("/operations/{operationId}", pathParameters))
	return preparer.Prepare((&http.Request{}).WithContext(ctx))
}

// GetOperationDetailsSender sends the GetOperationDetails request. The method will close the
// http.Response Body if it receives an error.
func (client BaseClient) GetOperationDetailsSender(req *http.Request) (*http.Response, error) {
	return autorest.SendWithSender(client, req,
		autorest.DoRetryForStatusCodes(client.RetryAttempts, client.RetryDuration, autorest.StatusCodesForRetry...))
}

// GetOperationDetailsResponder handles the response to the GetOperationDetails request. The method always
// closes the http.Response Body.
func (client BaseClient) GetOperationDetailsResponder(resp *http.Response) (result Operation, err error) {
	err = autorest.Respond(
		resp,
		client.ByInspecting(),
		azure.WithErrorUnlessStatusCode(http.StatusOK),
		autorest.ByUnmarshallingJSON(&result),
		autorest.ByClosing())
	result.Response = autorest.Response{Response: resp}
	return
}

// PublishKnowledgebase sends the publish knowledgebase request.
// Parameters:
// kbID - knowledgebase id.
func (client BaseClient) PublishKnowledgebase(ctx context.Context, kbID string) (result autorest.Response, err error) {
	if tracing.IsEnabled() {
		ctx = tracing.StartSpan(ctx, fqdn+"/BaseClient.PublishKnowledgebase")
		defer func() {
			sc := -1
			if result.Response != nil {
				sc = result.Response.StatusCode
			}
			tracing.EndSpan(ctx, sc, err)
		}()
	}
	req, err := client.PublishKnowledgebasePreparer(ctx, kbID)
	if err != nil {
		err = autorest.NewErrorWithError(err, "qnamaker.BaseClient", "PublishKnowledgebase", nil, "Failure preparing request")
		return
	}

	resp, err := client.PublishKnowledgebaseSender(req)
	if err != nil {
		result.Response = resp
		err = autorest.NewErrorWithError(err, "qnamaker.BaseClient", "PublishKnowledgebase", resp, "Failure sending request")
		return
	}

	result, err = client.PublishKnowledgebaseResponder(resp)
	if err != nil {
		err = autorest.NewErrorWithError(err, "qnamaker.BaseClient", "PublishKnowledgebase", resp, "Failure responding to request")
	}

	return
}

// PublishKnowledgebasePreparer prepares the PublishKnowledgebase request.
func (client BaseClient) PublishKnowledgebasePreparer(ctx context.Context, kbID string) (*http.Request, error) {
	urlParameters := map[string]interface{}{
		"Endpoint": client.Endpoint,
	}

	pathParameters := map[string]interface{}{
		"kbId": autorest.Encode("path", kbID),
	}

	preparer := autorest.CreatePreparer(
		autorest.AsPost(),
		autorest.WithCustomBaseURL("{Endpoint}/qnamaker/v4.0", urlParameters),
		autorest.WithPathParameters("/knowledgebases/{kbId}", pathParameters))
	return preparer.Prepare((&http.Request{}).WithContext(ctx))
}

// PublishKnowledgebaseSender sends the PublishKnowledgebase request. The method will close the
// http.Response Body if it receives an error.
func (client BaseClient) PublishKnowledgebaseSender(req *http.Request) (*http.Response, error) {
	return autorest.SendWithSender(client, req,
		autorest.DoRetryForStatusCodes(client.RetryAttempts, client.RetryDuration, autorest.StatusCodesForRetry...))
}

// PublishKnowledgebaseResponder handles the response to the PublishKnowledgebase request. The method always
// closes the http.Response Body.
func (client BaseClient) PublishKnowledgebaseResponder(resp *http.Response) (result autorest.Response, err error) {
	err = autorest.Respond(
		resp,
		client.ByInspecting(),
		azure.WithErrorUnlessStatusCode(http.StatusOK, http.StatusNoContent),
		autorest.ByClosing())
	result.Response = resp
	return
}

// RefreshEndpointKeys sends the refresh endpoint keys request.
// Parameters:
// keyType - type of Key
func (client BaseClient) RefreshEndpointKeys(ctx context.Context, keyType string) (result EndpointKeysDTO, err error) {
	if tracing.IsEnabled() {
		ctx = tracing.StartSpan(ctx, fqdn+"/BaseClient.RefreshEndpointKeys")
		defer func() {
			sc := -1
			if result.Response.Response != nil {
				sc = result.Response.Response.StatusCode
			}
			tracing.EndSpan(ctx, sc, err)
		}()
	}
	req, err := client.RefreshEndpointKeysPreparer(ctx, keyType)
	if err != nil {
		err = autorest.NewErrorWithError(err, "qnamaker.BaseClient", "RefreshEndpointKeys", nil, "Failure preparing request")
		return
	}

	resp, err := client.RefreshEndpointKeysSender(req)
	if err != nil {
		result.Response = autorest.Response{Response: resp}
		err = autorest.NewErrorWithError(err, "qnamaker.BaseClient", "RefreshEndpointKeys", resp, "Failure sending request")
		return
	}

	result, err = client.RefreshEndpointKeysResponder(resp)
	if err != nil {
		err = autorest.NewErrorWithError(err, "qnamaker.BaseClient", "RefreshEndpointKeys", resp, "Failure responding to request")
	}

	return
}

// RefreshEndpointKeysPreparer prepares the RefreshEndpointKeys request.
func (client BaseClient) RefreshEndpointKeysPreparer(ctx context.Context, keyType string) (*http.Request, error) {
	urlParameters := map[string]interface{}{
		"Endpoint": client.Endpoint,
	}

	pathParameters := map[string]interface{}{
		"keyType": autorest.Encode("path", keyType),
	}

	preparer := autorest.CreatePreparer(
		autorest.AsPatch(),
		autorest.WithCustomBaseURL("{Endpoint}/qnamaker/v4.0", urlParameters),
		autorest.WithPathParameters("/endpointkeys/{keyType}", pathParameters))
	return preparer.Prepare((&http.Request{}).WithContext(ctx))
}

// RefreshEndpointKeysSender sends the RefreshEndpointKeys request. The method will close the
// http.Response Body if it receives an error.
func (client BaseClient) RefreshEndpointKeysSender(req *http.Request) (*http.Response, error) {
	return autorest.SendWithSender(client, req,
		autorest.DoRetryForStatusCodes(client.RetryAttempts, client.RetryDuration, autorest.StatusCodesForRetry...))
}

// RefreshEndpointKeysResponder handles the response to the RefreshEndpointKeys request. The method always
// closes the http.Response Body.
func (client BaseClient) RefreshEndpointKeysResponder(resp *http.Response) (result EndpointKeysDTO, err error) {
	err = autorest.Respond(
		resp,
		client.ByInspecting(),
		azure.WithErrorUnlessStatusCode(http.StatusOK),
		autorest.ByUnmarshallingJSON(&result),
		autorest.ByClosing())
	result.Response = autorest.Response{Response: resp}
	return
}

// ReplaceAlterations sends the replace alterations request.
// Parameters:
// wordAlterations - new alterations data.
func (client BaseClient) ReplaceAlterations(ctx context.Context, wordAlterations WordAlterationsDTO) (result autorest.Response, err error) {
	if tracing.IsEnabled() {
		ctx = tracing.StartSpan(ctx, fqdn+"/BaseClient.ReplaceAlterations")
		defer func() {
			sc := -1
			if result.Response != nil {
				sc = result.Response.StatusCode
			}
			tracing.EndSpan(ctx, sc, err)
		}()
	}
	if err := validation.Validate([]validation.Validation{
		{TargetValue: wordAlterations,
			Constraints: []validation.Constraint{{Target: "wordAlterations.WordAlterations", Name: validation.Null, Rule: true, Chain: nil}}}}); err != nil {
		return result, validation.NewError("qnamaker.BaseClient", "ReplaceAlterations", err.Error())
	}

	req, err := client.ReplaceAlterationsPreparer(ctx, wordAlterations)
	if err != nil {
		err = autorest.NewErrorWithError(err, "qnamaker.BaseClient", "ReplaceAlterations", nil, "Failure preparing request")
		return
	}

	resp, err := client.ReplaceAlterationsSender(req)
	if err != nil {
		result.Response = resp
		err = autorest.NewErrorWithError(err, "qnamaker.BaseClient", "ReplaceAlterations", resp, "Failure sending request")
		return
	}

	result, err = client.ReplaceAlterationsResponder(resp)
	if err != nil {
		err = autorest.NewErrorWithError(err, "qnamaker.BaseClient", "ReplaceAlterations", resp, "Failure responding to request")
	}

	return
}

// ReplaceAlterationsPreparer prepares the ReplaceAlterations request.
func (client BaseClient) ReplaceAlterationsPreparer(ctx context.Context, wordAlterations WordAlterationsDTO) (*http.Request, error) {
	urlParameters := map[string]interface{}{
		"Endpoint": client.Endpoint,
	}

	preparer := autorest.CreatePreparer(
		autorest.AsContentType("application/json; charset=utf-8"),
		autorest.AsPut(),
		autorest.WithCustomBaseURL("{Endpoint}/qnamaker/v4.0", urlParameters),
		autorest.WithPath("/alterations"),
		autorest.WithJSON(wordAlterations))
	return preparer.Prepare((&http.Request{}).WithContext(ctx))
}

// ReplaceAlterationsSender sends the ReplaceAlterations request. The method will close the
// http.Response Body if it receives an error.
func (client BaseClient) ReplaceAlterationsSender(req *http.Request) (*http.Response, error) {
	return autorest.SendWithSender(client, req,
		autorest.DoRetryForStatusCodes(client.RetryAttempts, client.RetryDuration, autorest.StatusCodesForRetry...))
}

// ReplaceAlterationsResponder handles the response to the ReplaceAlterations request. The method always
// closes the http.Response Body.
func (client BaseClient) ReplaceAlterationsResponder(resp *http.Response) (result autorest.Response, err error) {
	err = autorest.Respond(
		resp,
		client.ByInspecting(),
		azure.WithErrorUnlessStatusCode(http.StatusOK, http.StatusNoContent),
		autorest.ByClosing())
	result.Response = resp
	return
}

// ReplaceKnowledgebase sends the replace knowledgebase request.
// Parameters:
// kbID - knowledgebase id.
// replaceKb - an instance of ReplaceKbDTO which contains list of qnas to be uploaded
func (client BaseClient) ReplaceKnowledgebase(ctx context.Context, kbID string, replaceKb ReplaceKbDTO) (result autorest.Response, err error) {
	if tracing.IsEnabled() {
		ctx = tracing.StartSpan(ctx, fqdn+"/BaseClient.ReplaceKnowledgebase")
		defer func() {
			sc := -1
			if result.Response != nil {
				sc = result.Response.StatusCode
			}
			tracing.EndSpan(ctx, sc, err)
		}()
	}
	if err := validation.Validate([]validation.Validation{
		{TargetValue: replaceKb,
			Constraints: []validation.Constraint{{Target: "replaceKb.QnAList", Name: validation.Null, Rule: true, Chain: nil}}}}); err != nil {
		return result, validation.NewError("qnamaker.BaseClient", "ReplaceKnowledgebase", err.Error())
	}

	req, err := client.ReplaceKnowledgebasePreparer(ctx, kbID, replaceKb)
	if err != nil {
		err = autorest.NewErrorWithError(err, "qnamaker.BaseClient", "ReplaceKnowledgebase", nil, "Failure preparing request")
		return
	}

	resp, err := client.ReplaceKnowledgebaseSender(req)
	if err != nil {
		result.Response = resp
		err = autorest.NewErrorWithError(err, "qnamaker.BaseClient", "ReplaceKnowledgebase", resp, "Failure sending request")
		return
	}

	result, err = client.ReplaceKnowledgebaseResponder(resp)
	if err != nil {
		err = autorest.NewErrorWithError(err, "qnamaker.BaseClient", "ReplaceKnowledgebase", resp, "Failure responding to request")
	}

	return
}

// ReplaceKnowledgebasePreparer prepares the ReplaceKnowledgebase request.
func (client BaseClient) ReplaceKnowledgebasePreparer(ctx context.Context, kbID string, replaceKb ReplaceKbDTO) (*http.Request, error) {
	urlParameters := map[string]interface{}{
		"Endpoint": client.Endpoint,
	}

	pathParameters := map[string]interface{}{
		"kbId": autorest.Encode("path", kbID),
	}

	preparer := autorest.CreatePreparer(
		autorest.AsContentType("application/json; charset=utf-8"),
		autorest.AsPut(),
		autorest.WithCustomBaseURL("{Endpoint}/qnamaker/v4.0", urlParameters),
		autorest.WithPathParameters("/knowledgebases/{kbId}", pathParameters),
		autorest.WithJSON(replaceKb))
	return preparer.Prepare((&http.Request{}).WithContext(ctx))
}

// ReplaceKnowledgebaseSender sends the ReplaceKnowledgebase request. The method will close the
// http.Response Body if it receives an error.
func (client BaseClient) ReplaceKnowledgebaseSender(req *http.Request) (*http.Response, error) {
	return autorest.SendWithSender(client, req,
		autorest.DoRetryForStatusCodes(client.RetryAttempts, client.RetryDuration, autorest.StatusCodesForRetry...))
}

// ReplaceKnowledgebaseResponder handles the response to the ReplaceKnowledgebase request. The method always
// closes the http.Response Body.
func (client BaseClient) ReplaceKnowledgebaseResponder(resp *http.Response) (result autorest.Response, err error) {
	err = autorest.Respond(
		resp,
		client.ByInspecting(),
		azure.WithErrorUnlessStatusCode(http.StatusOK, http.StatusNoContent),
		autorest.ByClosing())
	result.Response = resp
	return
}

// UpdateKnowledgebase sends the update knowledgebase request.
// Parameters:
// kbID - knowledgebase id.
// updateKb - post body of the request.
func (client BaseClient) UpdateKnowledgebase(ctx context.Context, kbID string, updateKb UpdateKbOperationDTO) (result Operation, err error) {
	if tracing.IsEnabled() {
		ctx = tracing.StartSpan(ctx, fqdn+"/BaseClient.UpdateKnowledgebase")
		defer func() {
			sc := -1
			if result.Response.Response != nil {
				sc = result.Response.Response.StatusCode
			}
			tracing.EndSpan(ctx, sc, err)
		}()
	}
	req, err := client.UpdateKnowledgebasePreparer(ctx, kbID, updateKb)
	if err != nil {
		err = autorest.NewErrorWithError(err, "qnamaker.BaseClient", "UpdateKnowledgebase", nil, "Failure preparing request")
		return
	}

	resp, err := client.UpdateKnowledgebaseSender(req)
	if err != nil {
		result.Response = autorest.Response{Response: resp}
		err = autorest.NewErrorWithError(err, "qnamaker.BaseClient", "UpdateKnowledgebase", resp, "Failure sending request")
		return
	}

	result, err = client.UpdateKnowledgebaseResponder(resp)
	if err != nil {
		err = autorest.NewErrorWithError(err, "qnamaker.BaseClient", "UpdateKnowledgebase", resp, "Failure responding to request")
	}

	return
}

// UpdateKnowledgebasePreparer prepares the UpdateKnowledgebase request.
func (client BaseClient) UpdateKnowledgebasePreparer(ctx context.Context, kbID string, updateKb UpdateKbOperationDTO) (*http.Request, error) {
	urlParameters := map[string]interface{}{
		"Endpoint": client.Endpoint,
	}

	pathParameters := map[string]interface{}{
		"kbId": autorest.Encode("path", kbID),
	}

	preparer := autorest.CreatePreparer(
		autorest.AsContentType("application/json; charset=utf-8"),
		autorest.AsPatch(),
		autorest.WithCustomBaseURL("{Endpoint}/qnamaker/v4.0", urlParameters),
		autorest.WithPathParameters("/knowledgebases/{kbId}", pathParameters),
		autorest.WithJSON(updateKb))
	return preparer.Prepare((&http.Request{}).WithContext(ctx))
}

// UpdateKnowledgebaseSender sends the UpdateKnowledgebase request. The method will close the
// http.Response Body if it receives an error.
func (client BaseClient) UpdateKnowledgebaseSender(req *http.Request) (*http.Response, error) {
	return autorest.SendWithSender(client, req,
		autorest.DoRetryForStatusCodes(client.RetryAttempts, client.RetryDuration, autorest.StatusCodesForRetry...))
}

// UpdateKnowledgebaseResponder handles the response to the UpdateKnowledgebase request. The method always
// closes the http.Response Body.
func (client BaseClient) UpdateKnowledgebaseResponder(resp *http.Response) (result Operation, err error) {
	err = autorest.Respond(
		resp,
		client.ByInspecting(),
		azure.WithErrorUnlessStatusCode(http.StatusOK, http.StatusAccepted),
		autorest.ByUnmarshallingJSON(&result),
		autorest.ByClosing())
	result.Response = autorest.Response{Response: resp}
	return
}
