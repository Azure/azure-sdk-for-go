package consumption

// Copyright (c) Microsoft and contributors.  All rights reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
// http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
//
// See the License for the specific language governing permissions and
// limitations under the License.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

import (
	"context"
	"github.com/Azure/go-autorest/autorest"
	"github.com/Azure/go-autorest/autorest/azure"
	"net/http"
)

// PriceSheetClient is the consumption management client provides access to consumption resources for Azure Enterprise
// Subscriptions.
type PriceSheetClient struct {
	BaseClient
}

// NewPriceSheetClient creates an instance of the PriceSheetClient client.
func NewPriceSheetClient(subscriptionID string, name string) PriceSheetClient {
	return NewPriceSheetClientWithBaseURI(DefaultBaseURI, subscriptionID, name)
}

// NewPriceSheetClientWithBaseURI creates an instance of the PriceSheetClient client.
func NewPriceSheetClientWithBaseURI(baseURI string, subscriptionID string, name string) PriceSheetClient {
	return PriceSheetClient{NewWithBaseURI(baseURI, subscriptionID, name)}
}

// List returns the price sheet associated with subscription guid, for a scope by billing period
//
// scope is the scope of the price sheet. The scope can be '/subscriptions/{subscriptionId}' for a subscription, or
// '/subscriptions/{subscriptionId}/providers/Microsoft.Billing/billingPeriods/{billingPeriodId}' for a billing period.
// expand is may be used to expand the properties/meterDetails within a price sheet. By default, these fields are not
// included when returning price sheet. skiptoken is skiptoken is only used if a previous operation returned a partial
// result. If a previous response contains a nextLink element, the value of the nextLink element will include a
// skiptoken parameter that specifies a starting point to use for subsequent calls.
func (client PriceSheetClient) List(ctx context.Context, scope string, expand string, skiptoken string) (result PriceSheetListResultPage, err error) {
	result.fn = client.listNextResults
	req, err := client.ListPreparer(ctx, scope, expand, skiptoken)
	if err != nil {
		err = autorest.NewErrorWithError(err, "consumption.PriceSheetClient", "List", nil, "Failure preparing request")
		return
	}

	resp, err := client.ListSender(req)
	if err != nil {
		result.pslr.Response = autorest.Response{Response: resp}
		err = autorest.NewErrorWithError(err, "consumption.PriceSheetClient", "List", resp, "Failure sending request")
		return
	}

	result.pslr, err = client.ListResponder(resp)
	if err != nil {
		err = autorest.NewErrorWithError(err, "consumption.PriceSheetClient", "List", resp, "Failure responding to request")
	}

	return
}

// ListPreparer prepares the List request.
func (client PriceSheetClient) ListPreparer(ctx context.Context, scope string, expand string, skiptoken string) (*http.Request, error) {
	pathParameters := map[string]interface{}{
		"scope": scope,
	}

	const APIVersion = "2018-01-31"
	queryParameters := map[string]interface{}{
		"api-version": APIVersion,
	}
	if len(expand) > 0 {
		queryParameters["$expand"] = autorest.Encode("query", expand)
	}
	if len(skiptoken) > 0 {
		queryParameters["$skiptoken"] = autorest.Encode("query", skiptoken)
	}

	preparer := autorest.CreatePreparer(
		autorest.AsGet(),
		autorest.WithBaseURL(client.BaseURI),
		autorest.WithPathParameters("/{scope}/providers/Microsoft.Consumption/pricesheets/default", pathParameters),
		autorest.WithQueryParameters(queryParameters))
	return preparer.Prepare((&http.Request{}).WithContext(ctx))
}

// ListSender sends the List request. The method will close the
// http.Response Body if it receives an error.
func (client PriceSheetClient) ListSender(req *http.Request) (*http.Response, error) {
	return autorest.SendWithSender(client, req,
		autorest.DoRetryForStatusCodes(client.RetryAttempts, client.RetryDuration, autorest.StatusCodesForRetry...))
}

// ListResponder handles the response to the List request. The method always
// closes the http.Response Body.
func (client PriceSheetClient) ListResponder(resp *http.Response) (result PriceSheetListResult, err error) {
	err = autorest.Respond(
		resp,
		client.ByInspecting(),
		azure.WithErrorUnlessStatusCode(http.StatusOK),
		autorest.ByUnmarshallingJSON(&result),
		autorest.ByClosing())
	result.Response = autorest.Response{Response: resp}
	return
}

// listNextResults retrieves the next set of results, if any.
func (client PriceSheetClient) listNextResults(lastResults PriceSheetListResult) (result PriceSheetListResult, err error) {
	req, err := lastResults.priceSheetListResultPreparer()
	if err != nil {
		return result, autorest.NewErrorWithError(err, "consumption.PriceSheetClient", "listNextResults", nil, "Failure preparing next results request")
	}
	if req == nil {
		return
	}
	resp, err := client.ListSender(req)
	if err != nil {
		result.Response = autorest.Response{Response: resp}
		return result, autorest.NewErrorWithError(err, "consumption.PriceSheetClient", "listNextResults", resp, "Failure sending next results request")
	}
	result, err = client.ListResponder(resp)
	if err != nil {
		err = autorest.NewErrorWithError(err, "consumption.PriceSheetClient", "listNextResults", resp, "Failure responding to next results request")
	}
	return
}

// ListComplete enumerates all values, automatically crossing page boundaries as required.
func (client PriceSheetClient) ListComplete(ctx context.Context, scope string, expand string, skiptoken string) (result PriceSheetListResultIterator, err error) {
	result.page, err = client.List(ctx, scope, expand, skiptoken)
	return
}
