package consumption

// Copyright (c) Microsoft and contributors.  All rights reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
// http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
//
// See the License for the specific language governing permissions and
// limitations under the License.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

import (
	"context"
	"github.com/Azure/go-autorest/autorest"
	"github.com/Azure/go-autorest/autorest/azure"
	"net/http"
)

// ChargesForEnrollmentAccountClient is the consumption management client provides access to consumption resources for
// Azure Enterprise Subscriptions.
type ChargesForEnrollmentAccountClient struct {
	BaseClient
}

// NewChargesForEnrollmentAccountClient creates an instance of the ChargesForEnrollmentAccountClient client.
func NewChargesForEnrollmentAccountClient(subscriptionID string) ChargesForEnrollmentAccountClient {
	return NewChargesForEnrollmentAccountClientWithBaseURI(DefaultBaseURI, subscriptionID)
}

// NewChargesForEnrollmentAccountClientWithBaseURI creates an instance of the ChargesForEnrollmentAccountClient client.
func NewChargesForEnrollmentAccountClientWithBaseURI(baseURI string, subscriptionID string) ChargesForEnrollmentAccountClient {
	return ChargesForEnrollmentAccountClient{NewWithBaseURI(baseURI, subscriptionID)}
}

// ListByBillingPeriod lists the charges based on enrollmentAccountId by billing period.
// Parameters:
// billingAccountID - billingAccount ID
// enrollmentAccountID - enrollmentAccount ID
// billingPeriodName - billing Period Name.
// filter - may be used to filter charges by properties/usageEnd (Utc time), properties/usageStart (Utc time).
// The filter supports 'eq', 'lt', 'gt', 'le', 'ge', and 'and'. It does not currently support 'ne', 'or', or
// 'not'. Tag filter is a key value pair string where key and value is separated by a colon (:).
func (client ChargesForEnrollmentAccountClient) ListByBillingPeriod(ctx context.Context, billingAccountID string, enrollmentAccountID string, billingPeriodName string, filter string) (result ChargeSummaryByEnrollmentAccount, err error) {
	req, err := client.ListByBillingPeriodPreparer(ctx, billingAccountID, enrollmentAccountID, billingPeriodName, filter)
	if err != nil {
		err = autorest.NewErrorWithError(err, "consumption.ChargesForEnrollmentAccountClient", "ListByBillingPeriod", nil, "Failure preparing request")
		return
	}

	resp, err := client.ListByBillingPeriodSender(req)
	if err != nil {
		result.Response = autorest.Response{Response: resp}
		err = autorest.NewErrorWithError(err, "consumption.ChargesForEnrollmentAccountClient", "ListByBillingPeriod", resp, "Failure sending request")
		return
	}

	result, err = client.ListByBillingPeriodResponder(resp)
	if err != nil {
		err = autorest.NewErrorWithError(err, "consumption.ChargesForEnrollmentAccountClient", "ListByBillingPeriod", resp, "Failure responding to request")
	}

	return
}

// ListByBillingPeriodPreparer prepares the ListByBillingPeriod request.
func (client ChargesForEnrollmentAccountClient) ListByBillingPeriodPreparer(ctx context.Context, billingAccountID string, enrollmentAccountID string, billingPeriodName string, filter string) (*http.Request, error) {
	pathParameters := map[string]interface{}{
		"billingAccountId":    autorest.Encode("path", billingAccountID),
		"billingPeriodName":   autorest.Encode("path", billingPeriodName),
		"enrollmentAccountId": autorest.Encode("path", enrollmentAccountID),
	}

	const APIVersion = "2018-08-31"
	queryParameters := map[string]interface{}{
		"api-version": APIVersion,
	}
	if len(filter) > 0 {
		queryParameters["$filter"] = autorest.Encode("query", filter)
	}

	preparer := autorest.CreatePreparer(
		autorest.AsGet(),
		autorest.WithBaseURL(client.BaseURI),
		autorest.WithPathParameters("/providers/Microsoft.Billing/billingAccounts/{billingAccountId}/enrollmentAccounts/{enrollmentAccountId}/providers/Microsoft.Billing/billingPeriods/{billingPeriodName}/providers/Microsoft.Consumption/charges", pathParameters),
		autorest.WithQueryParameters(queryParameters))
	return preparer.Prepare((&http.Request{}).WithContext(ctx))
}

// ListByBillingPeriodSender sends the ListByBillingPeriod request. The method will close the
// http.Response Body if it receives an error.
func (client ChargesForEnrollmentAccountClient) ListByBillingPeriodSender(req *http.Request) (*http.Response, error) {
	return autorest.SendWithSender(client, req,
		autorest.DoRetryForStatusCodes(client.RetryAttempts, client.RetryDuration, autorest.StatusCodesForRetry...))
}

// ListByBillingPeriodResponder handles the response to the ListByBillingPeriod request. The method always
// closes the http.Response Body.
func (client ChargesForEnrollmentAccountClient) ListByBillingPeriodResponder(resp *http.Response) (result ChargeSummaryByEnrollmentAccount, err error) {
	err = autorest.Respond(
		resp,
		client.ByInspecting(),
		azure.WithErrorUnlessStatusCode(http.StatusOK),
		autorest.ByUnmarshallingJSON(&result),
		autorest.ByClosing())
	result.Response = autorest.Response{Response: resp}
	return
}
