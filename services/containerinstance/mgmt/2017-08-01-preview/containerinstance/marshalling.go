package containerinstance

// Copyright (c) Microsoft and contributors.  All rights reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
// http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
//
// See the License for the specific language governing permissions and
// limitations under the License.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

import (
	"encoding/xml"
	"reflect"
	"time"
	"unsafe"
)

const (
	rfc3339Format = "2006-01-02T15:04:05.0000000Z07:00"
)

// used to convert times from UTC to GMT before sending across the wire
var gmt = time.FixedZone("GMT", 0)

// internal type used for marshalling time in RFC1123 format
type timeRFC1123 struct {
	time.Time
}

// MarshalText implements the encoding.TextMarshaler interface for timeRFC1123.
func (t timeRFC1123) MarshalText() ([]byte, error) {
	return []byte(t.Format(time.RFC1123)), nil
}

// UnmarshalText implements the encoding.TextUnmarshaler interface for timeRFC1123.
func (t *timeRFC1123) UnmarshalText(data []byte) (err error) {
	t.Time, err = time.Parse(time.RFC1123, string(data))
	return
}

// internal type used for marshalling time in RFC3339 format
type timeRFC3339 struct {
	time.Time
}

// MarshalText implements the encoding.TextMarshaler interface for timeRFC3339.
func (t timeRFC3339) MarshalText() ([]byte, error) {
	return []byte(t.Format(rfc3339Format)), nil
}

// UnmarshalText implements the encoding.TextUnmarshaler interface for timeRFC3339.
func (t *timeRFC3339) UnmarshalText(data []byte) (err error) {
	t.Time, err = time.Parse(rfc3339Format, string(data))
	return
}

// internal type used for marshalling
type containerState struct {
	State        *string      `json:"state,omitempty"`
	StartTime    *timeRFC3339 `json:"startTime,omitempty"`
	ExitCode     *int32       `json:"exitCode,omitempty"`
	FinishTime   *timeRFC3339 `json:"finishTime,omitempty"`
	DetailStatus *string      `json:"detailStatus,omitempty"`
}

// MarshalXML implements the xml.Marshaler interface for ContainerState.
func (cs ContainerState) MarshalXML(e *xml.Encoder, start xml.StartElement) error {
	if reflect.TypeOf((*ContainerState)(nil)).Elem().Size() != reflect.TypeOf((*containerState)(nil)).Elem().Size() {
		panic("size mismatch between ContainerState and containerState")
	}
	cs2 := (*containerState)(unsafe.Pointer(&cs))
	return e.EncodeElement(*cs2, start)
}

// UnmarshalXML implements the xml.Unmarshaler interface for ContainerState.
func (cs *ContainerState) UnmarshalXML(d *xml.Decoder, start xml.StartElement) error {
	if reflect.TypeOf((*ContainerState)(nil)).Elem().Size() != reflect.TypeOf((*containerState)(nil)).Elem().Size() {
		panic("size mismatch between ContainerState and containerState")
	}
	cs2 := (*containerState)(unsafe.Pointer(cs))
	return d.DecodeElement(cs2, &start)
}

// internal type used for marshalling
type containerEvent struct {
	Count          *int32       `json:"count,omitempty"`
	FirstTimestamp *timeRFC3339 `json:"firstTimestamp,omitempty"`
	LastTimestamp  *timeRFC3339 `json:"lastTimestamp,omitempty"`
	Message        *string      `json:"message,omitempty"`
	Type           *string      `json:"type,omitempty"`
}

// MarshalXML implements the xml.Marshaler interface for ContainerEvent.
func (ce ContainerEvent) MarshalXML(e *xml.Encoder, start xml.StartElement) error {
	if reflect.TypeOf((*ContainerEvent)(nil)).Elem().Size() != reflect.TypeOf((*containerEvent)(nil)).Elem().Size() {
		panic("size mismatch between ContainerEvent and containerEvent")
	}
	ce2 := (*containerEvent)(unsafe.Pointer(&ce))
	return e.EncodeElement(*ce2, start)
}

// UnmarshalXML implements the xml.Unmarshaler interface for ContainerEvent.
func (ce *ContainerEvent) UnmarshalXML(d *xml.Decoder, start xml.StartElement) error {
	if reflect.TypeOf((*ContainerEvent)(nil)).Elem().Size() != reflect.TypeOf((*containerEvent)(nil)).Elem().Size() {
		panic("size mismatch between ContainerEvent and containerEvent")
	}
	ce2 := (*containerEvent)(unsafe.Pointer(ce))
	return d.DecodeElement(ce2, &start)
}
