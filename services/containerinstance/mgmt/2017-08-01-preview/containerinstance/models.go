package containerinstance

// Copyright (c) Microsoft and contributors.  All rights reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
// http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
//
// See the License for the specific language governing permissions and
// limitations under the License.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

import (
	"net/http"
	"time"
)

// Marker represents an opaque value used in paged responses.
type Marker struct {
	val *string
}

// NotDone returns true if the list enumeration should be started or is not yet complete. Specifically, NotDone returns true
// for a just-initialized (zero value) Marker indicating that you should make an initial request to get a result portion from
// the service. NotDone also returns true whenever the service returns an interim result portion. NotDone returns false only
// after the service has returned the final result portion.
func (m Marker) NotDone() bool {
	return m.val == nil || *m.val != ""
}

// UnmarshalXML implements the xml.Unmarshaler interface for Marker.
func (m *Marker) UnmarshalXML(d *xml.Decoder, start xml.StartElement) error {
	var out string
	err := d.DecodeElement(&out, &start)
	m.val = &out
	return err
}

// ContainerGroupNetworkProtocolType enumerates the values for container group network protocol.
type ContainerGroupNetworkProtocolType string

const (
	// ContainerGroupNetworkProtocolNone represents an empty ContainerGroupNetworkProtocolType.
	ContainerGroupNetworkProtocolNone ContainerGroupNetworkProtocolType = ""
	// ContainerGroupNetworkProtocolTCP ...
	ContainerGroupNetworkProtocolTCP ContainerGroupNetworkProtocolType = "TCP"
	// ContainerGroupNetworkProtocolUDP ...
	ContainerGroupNetworkProtocolUDP ContainerGroupNetworkProtocolType = "UDP"
)

// ContainerRestartPolicyType enumerates the values for container restart policy.
type ContainerRestartPolicyType string

const (
	// ContainerRestartPolicyAlways ...
	ContainerRestartPolicyAlways ContainerRestartPolicyType = "always"
	// ContainerRestartPolicyNone represents an empty ContainerRestartPolicyType.
	ContainerRestartPolicyNone ContainerRestartPolicyType = ""
)

// OperatingSystemTypesType enumerates the values for operating system types.
type OperatingSystemTypesType string

const (
	// OperatingSystemTypesLinux ...
	OperatingSystemTypesLinux OperatingSystemTypesType = "Linux"
	// OperatingSystemTypesNone represents an empty OperatingSystemTypesType.
	OperatingSystemTypesNone OperatingSystemTypesType = ""
	// OperatingSystemTypesWindows ...
	OperatingSystemTypesWindows OperatingSystemTypesType = "Windows"
)

// AzureFileVolume - The properties of the Azure File volume. Azure File shares are mounted as volumes.
type AzureFileVolume struct {
	// ShareName - The name of the Azure File share to be mounted as a volume.
	ShareName string `json:"shareName,omitempty"`
	// ReadOnly - The flag indicating whether the Azure File shared mounted as a volume is read-only.
	ReadOnly *bool `json:"readOnly,omitempty"`
	// StorageAccountName - The name of the storage account that contains the Azure File share.
	StorageAccountName string `json:"storageAccountName,omitempty"`
	// StorageAccountKey - The storage account access key used to access the Azure File share.
	StorageAccountKey *string `json:"storageAccountKey,omitempty"`
}

// Container - A container instance.
type Container struct {
	// Name - The user-provided name of the container instance.
	Name string `json:"name,omitempty"`
	// Properties - The properties of the container instance.
	*ContainerProperties `json:"properties,omitempty"`
}

// ContainerEvent - A container instance event.
type ContainerEvent struct {
	// Count - The count of the event.
	Count *int32 `json:"count,omitempty"`
	// FirstTimestamp - The date-time of the earliest logged event.
	FirstTimestamp *time.Time `json:"firstTimestamp,omitempty"`
	// LastTimestamp - The date-time of the latest logged event.
	LastTimestamp *time.Time `json:"lastTimestamp,omitempty"`
	// Message - The event message.
	Message *string `json:"message,omitempty"`
	// Type - The event type.
	Type *string `json:"type,omitempty"`
}

// ContainerGroup - A container group.
type ContainerGroup struct {
	rawResponse *http.Response
	// ID - The resource id.
	ID *string `json:"id,omitempty"`
	// Name - The resource name.
	Name *string `json:"name,omitempty"`
	// Type - The resource type.
	Type *string `json:"type,omitempty"`
	// Location - The resource location.
	Location string `json:"location,omitempty"`
	// Tags - The resource tags.
	Tags                      map[string]string `json:"tags,omitempty"`
	*ContainerGroupProperties `json:"properties,omitempty"`
}

// Response returns the raw HTTP response object.
func (cg ContainerGroup) Response() *http.Response {
	return cg.rawResponse
}

// StatusCode returns the HTTP status code of the response, e.g. 200.
func (cg ContainerGroup) StatusCode() int {
	return cg.rawResponse.StatusCode
}

// Status returns the HTTP status message of the response, e.g. "200 OK".
func (cg ContainerGroup) Status() string {
	return cg.rawResponse.Status
}

// ContainerGroupListResult - The container group list response that contains the container group properties.
type ContainerGroupListResult struct {
	rawResponse *http.Response
	// Value - The list of container groups.
	Value []ContainerGroup `json:"value,omitempty"`
	// NextLink - The URI to fetch the next page of container groups.
	NextLink Marker `json:"NextLink"`
}

// Response returns the raw HTTP response object.
func (cglr ContainerGroupListResult) Response() *http.Response {
	return cglr.rawResponse
}

// StatusCode returns the HTTP status code of the response, e.g. 200.
func (cglr ContainerGroupListResult) StatusCode() int {
	return cglr.rawResponse.StatusCode
}

// Status returns the HTTP status message of the response, e.g. "200 OK".
func (cglr ContainerGroupListResult) Status() string {
	return cglr.rawResponse.Status
}

// ContainerGroupProperties ...
type ContainerGroupProperties struct {
	// ProvisioningState - The provisioning state of the container group. This only appears in the response.
	ProvisioningState *string `json:"provisioningState,omitempty"`
	// Containers - The containers within the container group.
	Containers []Container `json:"containers,omitempty"`
	// ImageRegistryCredentials - The image registry credentials by which the container group is created from.
	ImageRegistryCredentials []ImageRegistryCredential `json:"imageRegistryCredentials,omitempty"`
	// RestartPolicy - Restart policy for all containers within the container group. Currently the only available option is `always`. Possible values include: 'Always', 'None'
	RestartPolicy ContainerRestartPolicyType `json:"restartPolicy,omitempty"`
	// IPAddress - The IP address type of the container group.
	IPAddress *IPAddress `json:"ipAddress,omitempty"`
	// OsType - The operating system type required by the containers in the container group. Possible values include: 'Windows', 'Linux', 'None'
	OsType OperatingSystemTypesType `json:"osType,omitempty"`
	// State - The current state of the container group. This is only valid for the response.
	State *string `json:"state,omitempty"`
	// Volumes - The list of volumes that can be mounted by containers in this container group.
	Volumes []Volume `json:"volumes,omitempty"`
}

// ContainerPort - The port exposed on the container instance.
type ContainerPort struct {
	// Port - The port number exposed within the container group.
	Port int32 `json:"port,omitempty"`
}

// ContainerProperties - The container instance properties.
type ContainerProperties struct {
	// Image - The name of the image used to create the container instance.
	Image string `json:"image,omitempty"`
	// Command - The commands to execute within the container instance in exec form.
	Command []string `json:"command,omitempty"`
	// Ports - The exposed ports on the container instance.
	Ports []ContainerPort `json:"ports,omitempty"`
	// EnvironmentVariables - The environment variables to set in the container instance.
	EnvironmentVariables []EnvironmentVariable `json:"environmentVariables,omitempty"`
	// InstanceView - The instance view of the container instance. Only valid in response.
	InstanceView *ContainerPropertiesInstanceView `json:"instanceView,omitempty"`
	// Resources - The resource requirements of the container instance.
	Resources ResourceRequirements `json:"resources,omitempty"`
	// VolumeMounts - The volume mounts available to the container instance.
	VolumeMounts []VolumeMount `json:"volumeMounts,omitempty"`
}

// ContainerPropertiesInstanceView - The instance view of the container instance. Only valid in response.
type ContainerPropertiesInstanceView struct {
	// RestartCount - The number of times that the container instance has been restarted.
	RestartCount *int32 `json:"restartCount,omitempty"`
	// CurrentState - Current container instance state.
	CurrentState *ContainerState `json:"currentState,omitempty"`
	// PreviousState - Previous container instance state.
	PreviousState *ContainerState `json:"previousState,omitempty"`
	// Events - The events of the container instance.
	Events []ContainerEvent `json:"events,omitempty"`
}

// ContainerState - The container instance state.
type ContainerState struct {
	// State - The state of the container instance.
	State *string `json:"state,omitempty"`
	// StartTime - The date-time when the container instance state started.
	StartTime *time.Time `json:"startTime,omitempty"`
	// ExitCode - The container instance exit codes correspond to those from the `docker run` command.
	ExitCode *int32 `json:"exitCode,omitempty"`
	// FinishTime - The date-time when the container instance state finished.
	FinishTime *time.Time `json:"finishTime,omitempty"`
	// DetailStatus - The human-readable status of the container instance state.
	DetailStatus *string `json:"detailStatus,omitempty"`
}

// EnvironmentVariable - The environment variable to set within the container instance.
type EnvironmentVariable struct {
	// Name - The name of the environment variable.
	Name string `json:"name,omitempty"`
	// Value - The value of the environment variable.
	Value string `json:"value,omitempty"`
}

// ImageRegistryCredential - Image registry credential.
type ImageRegistryCredential struct {
	// Server - The Docker image registry server without a protocol such as "http" and "https".
	Server string `json:"server,omitempty"`
	// Username - The username for the private registry.
	Username string `json:"username,omitempty"`
	// Password - The password for the private registry.
	Password *string `json:"password,omitempty"`
}

// IPAddress - IP address for the container group.
type IPAddress struct {
	// Ports - The list of ports exposed on the container group.
	Ports []Port `json:"ports,omitempty"`
	// Type - Specifies if the IP is exposed to the public internet.
	Type string `json:"type,omitempty"`
	// IP - The IP exposed to the public internet.
	IP *string `json:"ip,omitempty"`
}

// Logs - The logs.
type Logs struct {
	rawResponse *http.Response
	// Content - The content of the log.
	Content *string `json:"content,omitempty"`
}

// Response returns the raw HTTP response object.
func (l Logs) Response() *http.Response {
	return l.rawResponse
}

// StatusCode returns the HTTP status code of the response, e.g. 200.
func (l Logs) StatusCode() int {
	return l.rawResponse.StatusCode
}

// Status returns the HTTP status message of the response, e.g. "200 OK".
func (l Logs) Status() string {
	return l.rawResponse.Status
}

// Port - The port exposed on the container group.
type Port struct {
	// Protocol - The protocol associated with the port. Possible values include: 'TCP', 'UDP', 'None'
	Protocol ContainerGroupNetworkProtocolType `json:"protocol,omitempty"`
	// Port - The port number.
	Port int32 `json:"port,omitempty"`
}

// Resource - The Resource model definition.
type Resource struct {
	// ID - The resource id.
	ID *string `json:"id,omitempty"`
	// Name - The resource name.
	Name *string `json:"name,omitempty"`
	// Type - The resource type.
	Type *string `json:"type,omitempty"`
	// Location - The resource location.
	Location string `json:"location,omitempty"`
	// Tags - The resource tags.
	Tags map[string]string `json:"tags,omitempty"`
}

// ResourceLimits - The resource limits.
type ResourceLimits struct {
	// MemoryInGB - The memory limit in GB of this container instance.
	MemoryInGB *float64 `json:"memoryInGB,omitempty"`
	// CPU - The CPU limit of this container instance.
	CPU *float64 `json:"cpu,omitempty"`
}

// ResourceRequests - The resource requests.
type ResourceRequests struct {
	// MemoryInGB - The memory request in GB of this container instance.
	MemoryInGB float64 `json:"memoryInGB,omitempty"`
	// CPU - The CPU request of this container instance.
	CPU float64 `json:"cpu,omitempty"`
}

// ResourceRequirements - The resource requirements.
type ResourceRequirements struct {
	// Requests - The resource requests of this container instance.
	Requests ResourceRequests `json:"requests,omitempty"`
	// Limits - The resource limits of this container instance.
	Limits *ResourceLimits `json:"limits,omitempty"`
}

// Volume - The properties of the volume.
type Volume struct {
	// Name - The name of the volume.
	Name string `json:"name,omitempty"`
	// AzureFile - The name of the Azure File volume.
	AzureFile AzureFileVolume `json:"azureFile,omitempty"`
}

// VolumeMount - The properties of the volume mount.
type VolumeMount struct {
	// Name - The name of the volume mount.
	Name string `json:"name,omitempty"`
	// MountPath - The path within the container where the volume should be mounted. Must not contain colon (:).
	MountPath string `json:"mountPath,omitempty"`
	// ReadOnly - The flag indicating whether the volume mount is read-only.
	ReadOnly *bool `json:"readOnly,omitempty"`
}
