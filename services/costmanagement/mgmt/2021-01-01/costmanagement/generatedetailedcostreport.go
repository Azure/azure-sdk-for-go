package costmanagement

// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

import (
	"context"
	"github.com/Azure/go-autorest/autorest"
	"github.com/Azure/go-autorest/autorest/azure"
	"github.com/Azure/go-autorest/autorest/validation"
	"github.com/Azure/go-autorest/tracing"
	"net/http"
)

// GenerateDetailedCostReportClient is the client for the GenerateDetailedCostReport methods of the Costmanagement
// service.
type GenerateDetailedCostReportClient struct {
	BaseClient
}

// NewGenerateDetailedCostReportClient creates an instance of the GenerateDetailedCostReportClient client.
func NewGenerateDetailedCostReportClient(subscriptionID string) GenerateDetailedCostReportClient {
	return NewGenerateDetailedCostReportClientWithBaseURI(DefaultBaseURI, subscriptionID)
}

// NewGenerateDetailedCostReportClientWithBaseURI creates an instance of the GenerateDetailedCostReportClient client
// using a custom endpoint.  Use this when interacting with an Azure cloud that uses a non-standard base URI (sovereign
// clouds, Azure stack).
func NewGenerateDetailedCostReportClientWithBaseURI(baseURI string, subscriptionID string) GenerateDetailedCostReportClient {
	return GenerateDetailedCostReportClient{NewWithBaseURI(baseURI, subscriptionID)}
}

// CreateOperation generates the detailed cost report for provided date range, billing period(Only enterprise
// customers) or Invoice Id asynchronously at a certain scope. Call returns a 202 with header
// Azure-Consumption-AsyncOperation providing a link to the operation created. A call on the operation will provide the
// status and if the operation is completed the blob file where generated detailed cost report is being stored.
// Parameters:
// scope - the scope associated with usage details operations. This includes '/subscriptions/{subscriptionId}/'
// for subscription scope, '/providers/Microsoft.Billing/billingAccounts/{billingAccountId}' for Billing
// Account scope, '/providers/Microsoft.Billing/departments/{departmentId}' for Department scope,
// '/providers/Microsoft.Billing/enrollmentAccounts/{enrollmentAccountId}' for EnrollmentAccount scope. Also,
// Modern Commerce Account scopes are '/providers/Microsoft.Billing/billingAccounts/{billingAccountId}' for
// billingAccount scope,
// '/providers/Microsoft.Billing/billingAccounts/{billingAccountId}/billingProfiles/{billingProfileId}' for
// billingProfile scope,
// 'providers/Microsoft.Billing/billingAccounts/{billingAccountId}/billingProfiles/{billingProfileId}/invoiceSections/{invoiceSectionId}'
// for invoiceSection scope, and
// 'providers/Microsoft.Billing/billingAccounts/{billingAccountId}/customers/{customerId}' specific for
// partners.
// parameters - parameters supplied to the Create detailed cost report operation.
func (client GenerateDetailedCostReportClient) CreateOperation(ctx context.Context, scope string, parameters GenerateDetailedCostReportDefinition) (result GenerateDetailedCostReportCreateOperationFuture, err error) {
	if tracing.IsEnabled() {
		ctx = tracing.StartSpan(ctx, fqdn+"/GenerateDetailedCostReportClient.CreateOperation")
		defer func() {
			sc := -1
			if result.FutureAPI != nil && result.FutureAPI.Response() != nil {
				sc = result.FutureAPI.Response().StatusCode
			}
			tracing.EndSpan(ctx, sc, err)
		}()
	}
	if err := validation.Validate([]validation.Validation{
		{TargetValue: parameters,
			Constraints: []validation.Constraint{{Target: "parameters.TimePeriod", Name: validation.Null, Rule: false,
				Chain: []validation.Constraint{{Target: "parameters.TimePeriod.Start", Name: validation.Null, Rule: true, Chain: nil},
					{Target: "parameters.TimePeriod.End", Name: validation.Null, Rule: true, Chain: nil},
				}}}}}); err != nil {
		return result, validation.NewError("costmanagement.GenerateDetailedCostReportClient", "CreateOperation", err.Error())
	}

	req, err := client.CreateOperationPreparer(ctx, scope, parameters)
	if err != nil {
		err = autorest.NewErrorWithError(err, "costmanagement.GenerateDetailedCostReportClient", "CreateOperation", nil, "Failure preparing request")
		return
	}

	result, err = client.CreateOperationSender(req)
	if err != nil {
		err = autorest.NewErrorWithError(err, "costmanagement.GenerateDetailedCostReportClient", "CreateOperation", nil, "Failure sending request")
		return
	}

	return
}

// CreateOperationPreparer prepares the CreateOperation request.
func (client GenerateDetailedCostReportClient) CreateOperationPreparer(ctx context.Context, scope string, parameters GenerateDetailedCostReportDefinition) (*http.Request, error) {
	pathParameters := map[string]interface{}{
		"scope": scope,
	}

	const APIVersion = "2021-01-01"
	queryParameters := map[string]interface{}{
		"api-version": APIVersion,
	}

	preparer := autorest.CreatePreparer(
		autorest.AsContentType("application/json; charset=utf-8"),
		autorest.AsPost(),
		autorest.WithBaseURL(client.BaseURI),
		autorest.WithPathParameters("/{scope}/providers/Microsoft.CostManagement/generateDetailedCostReport", pathParameters),
		autorest.WithJSON(parameters),
		autorest.WithQueryParameters(queryParameters))
	return preparer.Prepare((&http.Request{}).WithContext(ctx))
}

// CreateOperationSender sends the CreateOperation request. The method will close the
// http.Response Body if it receives an error.
func (client GenerateDetailedCostReportClient) CreateOperationSender(req *http.Request) (future GenerateDetailedCostReportCreateOperationFuture, err error) {
	var resp *http.Response
	resp, err = client.Send(req, autorest.DoRetryForStatusCodes(client.RetryAttempts, client.RetryDuration, autorest.StatusCodesForRetry...))
	if err != nil {
		return
	}
	var azf azure.Future
	azf, err = azure.NewFutureFromResponse(resp)
	future.FutureAPI = &azf
	future.Result = future.result
	return
}

// CreateOperationResponder handles the response to the CreateOperation request. The method always
// closes the http.Response Body.
func (client GenerateDetailedCostReportClient) CreateOperationResponder(resp *http.Response) (result GenerateDetailedCostReportOperationResult, err error) {
	err = autorest.Respond(
		resp,
		azure.WithErrorUnlessStatusCode(http.StatusOK, http.StatusAccepted),
		autorest.ByUnmarshallingJSON(&result),
		autorest.ByClosing())
	result.Response = autorest.Response{Response: resp}
	return
}
