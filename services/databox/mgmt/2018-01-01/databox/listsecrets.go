package databox

// Copyright (c) Microsoft and contributors.  All rights reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
// http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
//
// See the License for the specific language governing permissions and
// limitations under the License.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

import (
	"context"
	"github.com/Azure/go-autorest/autorest"
	"github.com/Azure/go-autorest/autorest/azure"
	"github.com/Azure/go-autorest/autorest/validation"
	"net/http"
)

// ListSecretsClient is the client for the ListSecrets methods of the Databox service.
type ListSecretsClient struct {
	BaseClient
}

// NewListSecretsClient creates an instance of the ListSecretsClient client.
func NewListSecretsClient(location string, subscriptionID string) ListSecretsClient {
	return NewListSecretsClientWithBaseURI(DefaultBaseURI, location, subscriptionID)
}

// NewListSecretsClientWithBaseURI creates an instance of the ListSecretsClient client.
func NewListSecretsClientWithBaseURI(baseURI string, location string, subscriptionID string) ListSecretsClient {
	return ListSecretsClient{NewWithBaseURI(baseURI, location, subscriptionID)}
}

// ListByJobs this method gets the unencrypted secrets related to the job.
//
// resourceGroupName is the Resource Group Name jobName is the name of the job Resource within the specified
// resource group. job names must be between 3 and 24 characters in length and use any alphanumeric and underscore
// only
func (client ListSecretsClient) ListByJobs(ctx context.Context, resourceGroupName string, jobName string) (result UnencryptedSecrets, err error) {
	if err := validation.Validate([]validation.Validation{
		{TargetValue: jobName,
			Constraints: []validation.Constraint{{Target: "jobName", Name: validation.MaxLength, Rule: 24, Chain: nil},
				{Target: "jobName", Name: validation.MinLength, Rule: 3, Chain: nil},
				{Target: "jobName", Name: validation.Pattern, Rule: `^[-\w\.]+$`, Chain: nil}}}}); err != nil {
		return result, validation.NewError("databox.ListSecretsClient", "ListByJobs", err.Error())
	}

	req, err := client.ListByJobsPreparer(ctx, resourceGroupName, jobName)
	if err != nil {
		err = autorest.NewErrorWithError(err, "databox.ListSecretsClient", "ListByJobs", nil, "Failure preparing request")
		return
	}

	resp, err := client.ListByJobsSender(req)
	if err != nil {
		result.Response = autorest.Response{Response: resp}
		err = autorest.NewErrorWithError(err, "databox.ListSecretsClient", "ListByJobs", resp, "Failure sending request")
		return
	}

	result, err = client.ListByJobsResponder(resp)
	if err != nil {
		err = autorest.NewErrorWithError(err, "databox.ListSecretsClient", "ListByJobs", resp, "Failure responding to request")
	}

	return
}

// ListByJobsPreparer prepares the ListByJobs request.
func (client ListSecretsClient) ListByJobsPreparer(ctx context.Context, resourceGroupName string, jobName string) (*http.Request, error) {
	pathParameters := map[string]interface{}{
		"jobName":           autorest.Encode("path", jobName),
		"resourceGroupName": autorest.Encode("path", resourceGroupName),
		"subscriptionId":    autorest.Encode("path", client.SubscriptionID),
	}

	const APIVersion = "2018-01-01"
	queryParameters := map[string]interface{}{
		"api-version": APIVersion,
	}

	preparer := autorest.CreatePreparer(
		autorest.AsPost(),
		autorest.WithBaseURL(client.BaseURI),
		autorest.WithPathParameters("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DataBox/jobs/{jobName}/listSecrets", pathParameters),
		autorest.WithQueryParameters(queryParameters))
	return preparer.Prepare((&http.Request{}).WithContext(ctx))
}

// ListByJobsSender sends the ListByJobs request. The method will close the
// http.Response Body if it receives an error.
func (client ListSecretsClient) ListByJobsSender(req *http.Request) (*http.Response, error) {
	return autorest.SendWithSender(client, req,
		azure.DoRetryWithRegistration(client.Client))
}

// ListByJobsResponder handles the response to the ListByJobs request. The method always
// closes the http.Response Body.
func (client ListSecretsClient) ListByJobsResponder(resp *http.Response) (result UnencryptedSecrets, err error) {
	err = autorest.Respond(
		resp,
		client.ByInspecting(),
		azure.WithErrorUnlessStatusCode(http.StatusOK),
		autorest.ByUnmarshallingJSON(&result),
		autorest.ByClosing())
	result.Response = autorest.Response{Response: resp}
	return
}
