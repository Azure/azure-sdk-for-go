package databoxedge

// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

import (
	"context"
	"github.com/Azure/go-autorest/autorest"
	"github.com/Azure/go-autorest/autorest/azure"
	"github.com/Azure/go-autorest/autorest/validation"
	"github.com/Azure/go-autorest/tracing"
	"net/http"
)

// DiagnosticSettingsClient is the client for the DiagnosticSettings methods of the Databoxedge service.
type DiagnosticSettingsClient struct {
	BaseClient
}

// NewDiagnosticSettingsClient creates an instance of the DiagnosticSettingsClient client.
func NewDiagnosticSettingsClient(subscriptionID string) DiagnosticSettingsClient {
	return NewDiagnosticSettingsClientWithBaseURI(DefaultBaseURI, subscriptionID)
}

// NewDiagnosticSettingsClientWithBaseURI creates an instance of the DiagnosticSettingsClient client using a custom
// endpoint.  Use this when interacting with an Azure cloud that uses a non-standard base URI (sovereign clouds, Azure
// stack).
func NewDiagnosticSettingsClientWithBaseURI(baseURI string, subscriptionID string) DiagnosticSettingsClient {
	return DiagnosticSettingsClient{NewWithBaseURI(baseURI, subscriptionID)}
}

// GetDiagnosticProactiveLogCollectionSettings gets the proactive log collection settings of the specified Data Box
// Edge/Data Box Gateway device.
// Parameters:
// deviceName - the device name.
// resourceGroupName - the resource group name.
func (client DiagnosticSettingsClient) GetDiagnosticProactiveLogCollectionSettings(ctx context.Context, deviceName string, resourceGroupName string) (result DiagnosticProactiveLogCollectionSettings, err error) {
	if tracing.IsEnabled() {
		ctx = tracing.StartSpan(ctx, fqdn+"/DiagnosticSettingsClient.GetDiagnosticProactiveLogCollectionSettings")
		defer func() {
			sc := -1
			if result.Response.Response != nil {
				sc = result.Response.Response.StatusCode
			}
			tracing.EndSpan(ctx, sc, err)
		}()
	}
	req, err := client.GetDiagnosticProactiveLogCollectionSettingsPreparer(ctx, deviceName, resourceGroupName)
	if err != nil {
		err = autorest.NewErrorWithError(err, "databoxedge.DiagnosticSettingsClient", "GetDiagnosticProactiveLogCollectionSettings", nil, "Failure preparing request")
		return
	}

	resp, err := client.GetDiagnosticProactiveLogCollectionSettingsSender(req)
	if err != nil {
		result.Response = autorest.Response{Response: resp}
		err = autorest.NewErrorWithError(err, "databoxedge.DiagnosticSettingsClient", "GetDiagnosticProactiveLogCollectionSettings", resp, "Failure sending request")
		return
	}

	result, err = client.GetDiagnosticProactiveLogCollectionSettingsResponder(resp)
	if err != nil {
		err = autorest.NewErrorWithError(err, "databoxedge.DiagnosticSettingsClient", "GetDiagnosticProactiveLogCollectionSettings", resp, "Failure responding to request")
		return
	}

	return
}

// GetDiagnosticProactiveLogCollectionSettingsPreparer prepares the GetDiagnosticProactiveLogCollectionSettings request.
func (client DiagnosticSettingsClient) GetDiagnosticProactiveLogCollectionSettingsPreparer(ctx context.Context, deviceName string, resourceGroupName string) (*http.Request, error) {
	pathParameters := map[string]interface{}{
		"deviceName":        autorest.Encode("path", deviceName),
		"resourceGroupName": autorest.Encode("path", resourceGroupName),
		"subscriptionId":    autorest.Encode("path", client.SubscriptionID),
	}

	const APIVersion = "2021-02-01"
	queryParameters := map[string]interface{}{
		"api-version": APIVersion,
	}

	preparer := autorest.CreatePreparer(
		autorest.AsGet(),
		autorest.WithBaseURL(client.BaseURI),
		autorest.WithPathParameters("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DataBoxEdge/dataBoxEdgeDevices/{deviceName}/diagnosticProactiveLogCollectionSettings/default", pathParameters),
		autorest.WithQueryParameters(queryParameters))
	return preparer.Prepare((&http.Request{}).WithContext(ctx))
}

// GetDiagnosticProactiveLogCollectionSettingsSender sends the GetDiagnosticProactiveLogCollectionSettings request. The method will close the
// http.Response Body if it receives an error.
func (client DiagnosticSettingsClient) GetDiagnosticProactiveLogCollectionSettingsSender(req *http.Request) (*http.Response, error) {
	return client.Send(req, azure.DoRetryWithRegistration(client.Client))
}

// GetDiagnosticProactiveLogCollectionSettingsResponder handles the response to the GetDiagnosticProactiveLogCollectionSettings request. The method always
// closes the http.Response Body.
func (client DiagnosticSettingsClient) GetDiagnosticProactiveLogCollectionSettingsResponder(resp *http.Response) (result DiagnosticProactiveLogCollectionSettings, err error) {
	err = autorest.Respond(
		resp,
		azure.WithErrorUnlessStatusCode(http.StatusOK),
		autorest.ByUnmarshallingJSON(&result),
		autorest.ByClosing())
	result.Response = autorest.Response{Response: resp}
	return
}

// GetDiagnosticRemoteSupportSettings gets the diagnostic remote support settings of the specified Data Box Edge/Data
// Box Gateway device.
// Parameters:
// deviceName - the device name.
// resourceGroupName - the resource group name.
func (client DiagnosticSettingsClient) GetDiagnosticRemoteSupportSettings(ctx context.Context, deviceName string, resourceGroupName string) (result DiagnosticRemoteSupportSettings, err error) {
	if tracing.IsEnabled() {
		ctx = tracing.StartSpan(ctx, fqdn+"/DiagnosticSettingsClient.GetDiagnosticRemoteSupportSettings")
		defer func() {
			sc := -1
			if result.Response.Response != nil {
				sc = result.Response.Response.StatusCode
			}
			tracing.EndSpan(ctx, sc, err)
		}()
	}
	req, err := client.GetDiagnosticRemoteSupportSettingsPreparer(ctx, deviceName, resourceGroupName)
	if err != nil {
		err = autorest.NewErrorWithError(err, "databoxedge.DiagnosticSettingsClient", "GetDiagnosticRemoteSupportSettings", nil, "Failure preparing request")
		return
	}

	resp, err := client.GetDiagnosticRemoteSupportSettingsSender(req)
	if err != nil {
		result.Response = autorest.Response{Response: resp}
		err = autorest.NewErrorWithError(err, "databoxedge.DiagnosticSettingsClient", "GetDiagnosticRemoteSupportSettings", resp, "Failure sending request")
		return
	}

	result, err = client.GetDiagnosticRemoteSupportSettingsResponder(resp)
	if err != nil {
		err = autorest.NewErrorWithError(err, "databoxedge.DiagnosticSettingsClient", "GetDiagnosticRemoteSupportSettings", resp, "Failure responding to request")
		return
	}

	return
}

// GetDiagnosticRemoteSupportSettingsPreparer prepares the GetDiagnosticRemoteSupportSettings request.
func (client DiagnosticSettingsClient) GetDiagnosticRemoteSupportSettingsPreparer(ctx context.Context, deviceName string, resourceGroupName string) (*http.Request, error) {
	pathParameters := map[string]interface{}{
		"deviceName":        autorest.Encode("path", deviceName),
		"resourceGroupName": autorest.Encode("path", resourceGroupName),
		"subscriptionId":    autorest.Encode("path", client.SubscriptionID),
	}

	const APIVersion = "2021-02-01"
	queryParameters := map[string]interface{}{
		"api-version": APIVersion,
	}

	preparer := autorest.CreatePreparer(
		autorest.AsGet(),
		autorest.WithBaseURL(client.BaseURI),
		autorest.WithPathParameters("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DataBoxEdge/dataBoxEdgeDevices/{deviceName}/diagnosticRemoteSupportSettings/default", pathParameters),
		autorest.WithQueryParameters(queryParameters))
	return preparer.Prepare((&http.Request{}).WithContext(ctx))
}

// GetDiagnosticRemoteSupportSettingsSender sends the GetDiagnosticRemoteSupportSettings request. The method will close the
// http.Response Body if it receives an error.
func (client DiagnosticSettingsClient) GetDiagnosticRemoteSupportSettingsSender(req *http.Request) (*http.Response, error) {
	return client.Send(req, azure.DoRetryWithRegistration(client.Client))
}

// GetDiagnosticRemoteSupportSettingsResponder handles the response to the GetDiagnosticRemoteSupportSettings request. The method always
// closes the http.Response Body.
func (client DiagnosticSettingsClient) GetDiagnosticRemoteSupportSettingsResponder(resp *http.Response) (result DiagnosticRemoteSupportSettings, err error) {
	err = autorest.Respond(
		resp,
		azure.WithErrorUnlessStatusCode(http.StatusOK),
		autorest.ByUnmarshallingJSON(&result),
		autorest.ByClosing())
	result.Response = autorest.Response{Response: resp}
	return
}

// UpdateDiagnosticProactiveLogCollectionSettings updates the proactive log collection settings on a Data Box Edge/Data
// Box Gateway device.
// Parameters:
// deviceName - the device name.
// proactiveLogCollectionSettings - the proactive log collection settings.
// resourceGroupName - the resource group name.
func (client DiagnosticSettingsClient) UpdateDiagnosticProactiveLogCollectionSettings(ctx context.Context, deviceName string, proactiveLogCollectionSettings DiagnosticProactiveLogCollectionSettings, resourceGroupName string) (result DiagnosticSettingsUpdateDiagnosticProactiveLogCollectionSettingsFuture, err error) {
	if tracing.IsEnabled() {
		ctx = tracing.StartSpan(ctx, fqdn+"/DiagnosticSettingsClient.UpdateDiagnosticProactiveLogCollectionSettings")
		defer func() {
			sc := -1
			if result.FutureAPI != nil && result.FutureAPI.Response() != nil {
				sc = result.FutureAPI.Response().StatusCode
			}
			tracing.EndSpan(ctx, sc, err)
		}()
	}
	if err := validation.Validate([]validation.Validation{
		{TargetValue: proactiveLogCollectionSettings,
			Constraints: []validation.Constraint{{Target: "proactiveLogCollectionSettings.ProactiveLogCollectionSettingsProperties", Name: validation.Null, Rule: true, Chain: nil}}}}); err != nil {
		return result, validation.NewError("databoxedge.DiagnosticSettingsClient", "UpdateDiagnosticProactiveLogCollectionSettings", err.Error())
	}

	req, err := client.UpdateDiagnosticProactiveLogCollectionSettingsPreparer(ctx, deviceName, proactiveLogCollectionSettings, resourceGroupName)
	if err != nil {
		err = autorest.NewErrorWithError(err, "databoxedge.DiagnosticSettingsClient", "UpdateDiagnosticProactiveLogCollectionSettings", nil, "Failure preparing request")
		return
	}

	result, err = client.UpdateDiagnosticProactiveLogCollectionSettingsSender(req)
	if err != nil {
		err = autorest.NewErrorWithError(err, "databoxedge.DiagnosticSettingsClient", "UpdateDiagnosticProactiveLogCollectionSettings", nil, "Failure sending request")
		return
	}

	return
}

// UpdateDiagnosticProactiveLogCollectionSettingsPreparer prepares the UpdateDiagnosticProactiveLogCollectionSettings request.
func (client DiagnosticSettingsClient) UpdateDiagnosticProactiveLogCollectionSettingsPreparer(ctx context.Context, deviceName string, proactiveLogCollectionSettings DiagnosticProactiveLogCollectionSettings, resourceGroupName string) (*http.Request, error) {
	pathParameters := map[string]interface{}{
		"deviceName":        autorest.Encode("path", deviceName),
		"resourceGroupName": autorest.Encode("path", resourceGroupName),
		"subscriptionId":    autorest.Encode("path", client.SubscriptionID),
	}

	const APIVersion = "2021-02-01"
	queryParameters := map[string]interface{}{
		"api-version": APIVersion,
	}

	preparer := autorest.CreatePreparer(
		autorest.AsContentType("application/json; charset=utf-8"),
		autorest.AsPut(),
		autorest.WithBaseURL(client.BaseURI),
		autorest.WithPathParameters("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DataBoxEdge/dataBoxEdgeDevices/{deviceName}/diagnosticProactiveLogCollectionSettings/default", pathParameters),
		autorest.WithJSON(proactiveLogCollectionSettings),
		autorest.WithQueryParameters(queryParameters))
	return preparer.Prepare((&http.Request{}).WithContext(ctx))
}

// UpdateDiagnosticProactiveLogCollectionSettingsSender sends the UpdateDiagnosticProactiveLogCollectionSettings request. The method will close the
// http.Response Body if it receives an error.
func (client DiagnosticSettingsClient) UpdateDiagnosticProactiveLogCollectionSettingsSender(req *http.Request) (future DiagnosticSettingsUpdateDiagnosticProactiveLogCollectionSettingsFuture, err error) {
	var resp *http.Response
	resp, err = client.Send(req, azure.DoRetryWithRegistration(client.Client))
	if err != nil {
		return
	}
	var azf azure.Future
	azf, err = azure.NewFutureFromResponse(resp)
	future.FutureAPI = &azf
	future.Result = future.result
	return
}

// UpdateDiagnosticProactiveLogCollectionSettingsResponder handles the response to the UpdateDiagnosticProactiveLogCollectionSettings request. The method always
// closes the http.Response Body.
func (client DiagnosticSettingsClient) UpdateDiagnosticProactiveLogCollectionSettingsResponder(resp *http.Response) (result autorest.Response, err error) {
	err = autorest.Respond(
		resp,
		azure.WithErrorUnlessStatusCode(http.StatusOK, http.StatusAccepted),
		autorest.ByClosing())
	result.Response = resp
	return
}

// UpdateDiagnosticRemoteSupportSettings updates the diagnostic remote support settings on a Data Box Edge/Data Box
// Gateway device.
// Parameters:
// deviceName - the device name.
// diagnosticRemoteSupportSettings - the diagnostic remote support settings.
// resourceGroupName - the resource group name.
func (client DiagnosticSettingsClient) UpdateDiagnosticRemoteSupportSettings(ctx context.Context, deviceName string, diagnosticRemoteSupportSettings DiagnosticRemoteSupportSettings, resourceGroupName string) (result DiagnosticSettingsUpdateDiagnosticRemoteSupportSettingsFuture, err error) {
	if tracing.IsEnabled() {
		ctx = tracing.StartSpan(ctx, fqdn+"/DiagnosticSettingsClient.UpdateDiagnosticRemoteSupportSettings")
		defer func() {
			sc := -1
			if result.FutureAPI != nil && result.FutureAPI.Response() != nil {
				sc = result.FutureAPI.Response().StatusCode
			}
			tracing.EndSpan(ctx, sc, err)
		}()
	}
	if err := validation.Validate([]validation.Validation{
		{TargetValue: diagnosticRemoteSupportSettings,
			Constraints: []validation.Constraint{{Target: "diagnosticRemoteSupportSettings.DiagnosticRemoteSupportSettingsProperties", Name: validation.Null, Rule: true, Chain: nil}}}}); err != nil {
		return result, validation.NewError("databoxedge.DiagnosticSettingsClient", "UpdateDiagnosticRemoteSupportSettings", err.Error())
	}

	req, err := client.UpdateDiagnosticRemoteSupportSettingsPreparer(ctx, deviceName, diagnosticRemoteSupportSettings, resourceGroupName)
	if err != nil {
		err = autorest.NewErrorWithError(err, "databoxedge.DiagnosticSettingsClient", "UpdateDiagnosticRemoteSupportSettings", nil, "Failure preparing request")
		return
	}

	result, err = client.UpdateDiagnosticRemoteSupportSettingsSender(req)
	if err != nil {
		err = autorest.NewErrorWithError(err, "databoxedge.DiagnosticSettingsClient", "UpdateDiagnosticRemoteSupportSettings", nil, "Failure sending request")
		return
	}

	return
}

// UpdateDiagnosticRemoteSupportSettingsPreparer prepares the UpdateDiagnosticRemoteSupportSettings request.
func (client DiagnosticSettingsClient) UpdateDiagnosticRemoteSupportSettingsPreparer(ctx context.Context, deviceName string, diagnosticRemoteSupportSettings DiagnosticRemoteSupportSettings, resourceGroupName string) (*http.Request, error) {
	pathParameters := map[string]interface{}{
		"deviceName":        autorest.Encode("path", deviceName),
		"resourceGroupName": autorest.Encode("path", resourceGroupName),
		"subscriptionId":    autorest.Encode("path", client.SubscriptionID),
	}

	const APIVersion = "2021-02-01"
	queryParameters := map[string]interface{}{
		"api-version": APIVersion,
	}

	preparer := autorest.CreatePreparer(
		autorest.AsContentType("application/json; charset=utf-8"),
		autorest.AsPut(),
		autorest.WithBaseURL(client.BaseURI),
		autorest.WithPathParameters("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DataBoxEdge/dataBoxEdgeDevices/{deviceName}/diagnosticRemoteSupportSettings/default", pathParameters),
		autorest.WithJSON(diagnosticRemoteSupportSettings),
		autorest.WithQueryParameters(queryParameters))
	return preparer.Prepare((&http.Request{}).WithContext(ctx))
}

// UpdateDiagnosticRemoteSupportSettingsSender sends the UpdateDiagnosticRemoteSupportSettings request. The method will close the
// http.Response Body if it receives an error.
func (client DiagnosticSettingsClient) UpdateDiagnosticRemoteSupportSettingsSender(req *http.Request) (future DiagnosticSettingsUpdateDiagnosticRemoteSupportSettingsFuture, err error) {
	var resp *http.Response
	resp, err = client.Send(req, azure.DoRetryWithRegistration(client.Client))
	if err != nil {
		return
	}
	var azf azure.Future
	azf, err = azure.NewFutureFromResponse(resp)
	future.FutureAPI = &azf
	future.Result = future.result
	return
}

// UpdateDiagnosticRemoteSupportSettingsResponder handles the response to the UpdateDiagnosticRemoteSupportSettings request. The method always
// closes the http.Response Body.
func (client DiagnosticSettingsClient) UpdateDiagnosticRemoteSupportSettingsResponder(resp *http.Response) (result autorest.Response, err error) {
	err = autorest.Respond(
		resp,
		azure.WithErrorUnlessStatusCode(http.StatusOK, http.StatusAccepted),
		autorest.ByClosing())
	result.Response = resp
	return
}
