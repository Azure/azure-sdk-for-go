package databoxedge

// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

import (
	"context"
	"github.com/Azure/go-autorest/autorest"
	"github.com/Azure/go-autorest/autorest/azure"
	"github.com/Azure/go-autorest/autorest/validation"
	"github.com/Azure/go-autorest/tracing"
	"net/http"
)

// SupportPackagesClient is the client for the SupportPackages methods of the Databoxedge service.
type SupportPackagesClient struct {
	BaseClient
}

// NewSupportPackagesClient creates an instance of the SupportPackagesClient client.
func NewSupportPackagesClient(subscriptionID string) SupportPackagesClient {
	return NewSupportPackagesClientWithBaseURI(DefaultBaseURI, subscriptionID)
}

// NewSupportPackagesClientWithBaseURI creates an instance of the SupportPackagesClient client using a custom endpoint.
// Use this when interacting with an Azure cloud that uses a non-standard base URI (sovereign clouds, Azure stack).
func NewSupportPackagesClientWithBaseURI(baseURI string, subscriptionID string) SupportPackagesClient {
	return SupportPackagesClient{NewWithBaseURI(baseURI, subscriptionID)}
}

// TriggerSupportPackage sends the trigger support package request.
// Parameters:
// deviceName - the device name.
// triggerSupportPackageRequest - the trigger support package request object
// resourceGroupName - the resource group name.
func (client SupportPackagesClient) TriggerSupportPackage(ctx context.Context, deviceName string, triggerSupportPackageRequest TriggerSupportPackageRequest, resourceGroupName string) (result SupportPackagesTriggerSupportPackageFuture, err error) {
	if tracing.IsEnabled() {
		ctx = tracing.StartSpan(ctx, fqdn+"/SupportPackagesClient.TriggerSupportPackage")
		defer func() {
			sc := -1
			if result.FutureAPI != nil && result.FutureAPI.Response() != nil {
				sc = result.FutureAPI.Response().StatusCode
			}
			tracing.EndSpan(ctx, sc, err)
		}()
	}
	if err := validation.Validate([]validation.Validation{
		{TargetValue: triggerSupportPackageRequest,
			Constraints: []validation.Constraint{{Target: "triggerSupportPackageRequest.SupportPackageRequestProperties", Name: validation.Null, Rule: true, Chain: nil}}}}); err != nil {
		return result, validation.NewError("databoxedge.SupportPackagesClient", "TriggerSupportPackage", err.Error())
	}

	req, err := client.TriggerSupportPackagePreparer(ctx, deviceName, triggerSupportPackageRequest, resourceGroupName)
	if err != nil {
		err = autorest.NewErrorWithError(err, "databoxedge.SupportPackagesClient", "TriggerSupportPackage", nil, "Failure preparing request")
		return
	}

	result, err = client.TriggerSupportPackageSender(req)
	if err != nil {
		err = autorest.NewErrorWithError(err, "databoxedge.SupportPackagesClient", "TriggerSupportPackage", nil, "Failure sending request")
		return
	}

	return
}

// TriggerSupportPackagePreparer prepares the TriggerSupportPackage request.
func (client SupportPackagesClient) TriggerSupportPackagePreparer(ctx context.Context, deviceName string, triggerSupportPackageRequest TriggerSupportPackageRequest, resourceGroupName string) (*http.Request, error) {
	pathParameters := map[string]interface{}{
		"deviceName":        autorest.Encode("path", deviceName),
		"resourceGroupName": autorest.Encode("path", resourceGroupName),
		"subscriptionId":    autorest.Encode("path", client.SubscriptionID),
	}

	const APIVersion = "2021-02-01"
	queryParameters := map[string]interface{}{
		"api-version": APIVersion,
	}

	preparer := autorest.CreatePreparer(
		autorest.AsContentType("application/json; charset=utf-8"),
		autorest.AsPost(),
		autorest.WithBaseURL(client.BaseURI),
		autorest.WithPathParameters("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DataBoxEdge/dataBoxEdgeDevices/{deviceName}/triggerSupportPackage", pathParameters),
		autorest.WithJSON(triggerSupportPackageRequest),
		autorest.WithQueryParameters(queryParameters))
	return preparer.Prepare((&http.Request{}).WithContext(ctx))
}

// TriggerSupportPackageSender sends the TriggerSupportPackage request. The method will close the
// http.Response Body if it receives an error.
func (client SupportPackagesClient) TriggerSupportPackageSender(req *http.Request) (future SupportPackagesTriggerSupportPackageFuture, err error) {
	var resp *http.Response
	resp, err = client.Send(req, azure.DoRetryWithRegistration(client.Client))
	if err != nil {
		return
	}
	var azf azure.Future
	azf, err = azure.NewFutureFromResponse(resp)
	future.FutureAPI = &azf
	future.Result = future.result
	return
}

// TriggerSupportPackageResponder handles the response to the TriggerSupportPackage request. The method always
// closes the http.Response Body.
func (client SupportPackagesClient) TriggerSupportPackageResponder(resp *http.Response) (result autorest.Response, err error) {
	err = autorest.Respond(
		resp,
		azure.WithErrorUnlessStatusCode(http.StatusOK, http.StatusAccepted),
		autorest.ByClosing())
	result.Response = resp
	return
}
