package datafactory

// Copyright (c) Microsoft and contributors.  All rights reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
// http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
//
// See the License for the specific language governing permissions and
// limitations under the License.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

import (
	"encoding/json"
	"errors"
	"github.com/Azure/go-autorest/autorest"
	"github.com/Azure/go-autorest/autorest/date"
	"github.com/Azure/go-autorest/autorest/to"
	uuid "github.com/satori/go.uuid"
	"net/http"
)

// AuthenticationType enumerates the values for authentication type.
type AuthenticationType string

const (
	// AuthenticationTypeAnonymous specifies the authentication type anonymous state for authentication type.
	AuthenticationTypeAnonymous AuthenticationType = "Anonymous"
	// AuthenticationTypeBasic specifies the authentication type basic state for authentication type.
	AuthenticationTypeBasic AuthenticationType = "Basic"
	// AuthenticationTypeClientCertificate specifies the authentication type client certificate state for authentication
	// type.
	AuthenticationTypeClientCertificate AuthenticationType = "ClientCertificate"
)

// AzureSearchIndexWriteBehaviorType enumerates the values for azure search index write behavior type.
type AzureSearchIndexWriteBehaviorType string

const (
	// Merge specifies the merge state for azure search index write behavior type.
	Merge AzureSearchIndexWriteBehaviorType = "Merge"
	// Upload specifies the upload state for azure search index write behavior type.
	Upload AzureSearchIndexWriteBehaviorType = "Upload"
)

// CassandraSourceReadConsistencyLevels enumerates the values for cassandra source read consistency levels.
type CassandraSourceReadConsistencyLevels string

const (
	// ALL specifies the all state for cassandra source read consistency levels.
	ALL CassandraSourceReadConsistencyLevels = "ALL"
	// EACHQUORUM specifies the eachquorum state for cassandra source read consistency levels.
	EACHQUORUM CassandraSourceReadConsistencyLevels = "EACH_QUORUM"
	// LOCALONE specifies the localone state for cassandra source read consistency levels.
	LOCALONE CassandraSourceReadConsistencyLevels = "LOCAL_ONE"
	// LOCALQUORUM specifies the localquorum state for cassandra source read consistency levels.
	LOCALQUORUM CassandraSourceReadConsistencyLevels = "LOCAL_QUORUM"
	// LOCALSERIAL specifies the localserial state for cassandra source read consistency levels.
	LOCALSERIAL CassandraSourceReadConsistencyLevels = "LOCAL_SERIAL"
	// ONE specifies the one state for cassandra source read consistency levels.
	ONE CassandraSourceReadConsistencyLevels = "ONE"
	// QUORUM specifies the quorum state for cassandra source read consistency levels.
	QUORUM CassandraSourceReadConsistencyLevels = "QUORUM"
	// SERIAL specifies the serial state for cassandra source read consistency levels.
	SERIAL CassandraSourceReadConsistencyLevels = "SERIAL"
	// THREE specifies the three state for cassandra source read consistency levels.
	THREE CassandraSourceReadConsistencyLevels = "THREE"
	// TWO specifies the two state for cassandra source read consistency levels.
	TWO CassandraSourceReadConsistencyLevels = "TWO"
)

// CopyBehaviorType enumerates the values for copy behavior type.
type CopyBehaviorType string

const (
	// FlattenHierarchy specifies the flatten hierarchy state for copy behavior type.
	FlattenHierarchy CopyBehaviorType = "FlattenHierarchy"
	// MergeFiles specifies the merge files state for copy behavior type.
	MergeFiles CopyBehaviorType = "MergeFiles"
	// PreserveHierarchy specifies the preserve hierarchy state for copy behavior type.
	PreserveHierarchy CopyBehaviorType = "PreserveHierarchy"
)

// DatasetCompressionLevel enumerates the values for dataset compression level.
type DatasetCompressionLevel string

const (
	// Fastest specifies the fastest state for dataset compression level.
	Fastest DatasetCompressionLevel = "Fastest"
	// Optimal specifies the optimal state for dataset compression level.
	Optimal DatasetCompressionLevel = "Optimal"
)

// DayOfWeek enumerates the values for day of week.
type DayOfWeek string

const (
	// Friday specifies the friday state for day of week.
	Friday DayOfWeek = "Friday"
	// Monday specifies the monday state for day of week.
	Monday DayOfWeek = "Monday"
	// Saturday specifies the saturday state for day of week.
	Saturday DayOfWeek = "Saturday"
	// Sunday specifies the sunday state for day of week.
	Sunday DayOfWeek = "Sunday"
	// Thursday specifies the thursday state for day of week.
	Thursday DayOfWeek = "Thursday"
	// Tuesday specifies the tuesday state for day of week.
	Tuesday DayOfWeek = "Tuesday"
	// Wednesday specifies the wednesday state for day of week.
	Wednesday DayOfWeek = "Wednesday"
)

// DaysOfWeek enumerates the values for days of week.
type DaysOfWeek string

const (
	// DaysOfWeekFriday specifies the days of week friday state for days of week.
	DaysOfWeekFriday DaysOfWeek = "Friday"
	// DaysOfWeekMonday specifies the days of week monday state for days of week.
	DaysOfWeekMonday DaysOfWeek = "Monday"
	// DaysOfWeekSaturday specifies the days of week saturday state for days of week.
	DaysOfWeekSaturday DaysOfWeek = "Saturday"
	// DaysOfWeekSunday specifies the days of week sunday state for days of week.
	DaysOfWeekSunday DaysOfWeek = "Sunday"
	// DaysOfWeekThursday specifies the days of week thursday state for days of week.
	DaysOfWeekThursday DaysOfWeek = "Thursday"
	// DaysOfWeekTuesday specifies the days of week tuesday state for days of week.
	DaysOfWeekTuesday DaysOfWeek = "Tuesday"
	// DaysOfWeekWednesday specifies the days of week wednesday state for days of week.
	DaysOfWeekWednesday DaysOfWeek = "Wednesday"
)

// Db2AuthenticationType enumerates the values for db 2 authentication type.
type Db2AuthenticationType string

const (
	// Basic specifies the basic state for db 2 authentication type.
	Basic Db2AuthenticationType = "Basic"
)

// DependencyCondition enumerates the values for dependency condition.
type DependencyCondition string

const (
	// Completed specifies the completed state for dependency condition.
	Completed DependencyCondition = "Completed"
	// Failed specifies the failed state for dependency condition.
	Failed DependencyCondition = "Failed"
	// Skipped specifies the skipped state for dependency condition.
	Skipped DependencyCondition = "Skipped"
	// Succeeded specifies the succeeded state for dependency condition.
	Succeeded DependencyCondition = "Succeeded"
)

// FtpAuthenticationType enumerates the values for ftp authentication type.
type FtpAuthenticationType string

const (
	// FtpAuthenticationTypeAnonymous specifies the ftp authentication type anonymous state for ftp authentication type.
	FtpAuthenticationTypeAnonymous FtpAuthenticationType = "Anonymous"
	// FtpAuthenticationTypeBasic specifies the ftp authentication type basic state for ftp authentication type.
	FtpAuthenticationTypeBasic FtpAuthenticationType = "Basic"
)

// HDInsightActivityDebugInfoOption enumerates the values for hd insight activity debug info option.
type HDInsightActivityDebugInfoOption string

const (
	// Always specifies the always state for hd insight activity debug info option.
	Always HDInsightActivityDebugInfoOption = "Always"
	// Failure specifies the failure state for hd insight activity debug info option.
	Failure HDInsightActivityDebugInfoOption = "Failure"
	// None specifies the none state for hd insight activity debug info option.
	None HDInsightActivityDebugInfoOption = "None"
)

// HTTPAuthenticationType enumerates the values for http authentication type.
type HTTPAuthenticationType string

const (
	// HTTPAuthenticationTypeAnonymous specifies the http authentication type anonymous state for http authentication type.
	HTTPAuthenticationTypeAnonymous HTTPAuthenticationType = "Anonymous"
	// HTTPAuthenticationTypeBasic specifies the http authentication type basic state for http authentication type.
	HTTPAuthenticationTypeBasic HTTPAuthenticationType = "Basic"
	// HTTPAuthenticationTypeClientCertificate specifies the http authentication type client certificate state for http
	// authentication type.
	HTTPAuthenticationTypeClientCertificate HTTPAuthenticationType = "ClientCertificate"
	// HTTPAuthenticationTypeDigest specifies the http authentication type digest state for http authentication type.
	HTTPAuthenticationTypeDigest HTTPAuthenticationType = "Digest"
	// HTTPAuthenticationTypeWindows specifies the http authentication type windows state for http authentication type.
	HTTPAuthenticationTypeWindows HTTPAuthenticationType = "Windows"
)

// IntegrationRuntimeAuthKeyName enumerates the values for integration runtime auth key name.
type IntegrationRuntimeAuthKeyName string

const (
	// AuthKey1 specifies the auth key 1 state for integration runtime auth key name.
	AuthKey1 IntegrationRuntimeAuthKeyName = "authKey1"
	// AuthKey2 specifies the auth key 2 state for integration runtime auth key name.
	AuthKey2 IntegrationRuntimeAuthKeyName = "authKey2"
)

// IntegrationRuntimeAutoUpdate enumerates the values for integration runtime auto update.
type IntegrationRuntimeAutoUpdate string

const (
	// Off specifies the off state for integration runtime auto update.
	Off IntegrationRuntimeAutoUpdate = "Off"
	// On specifies the on state for integration runtime auto update.
	On IntegrationRuntimeAutoUpdate = "On"
)

// IntegrationRuntimeInternalChannelEncryptionMode enumerates the values for integration runtime internal channel
// encryption mode.
type IntegrationRuntimeInternalChannelEncryptionMode string

const (
	// NotEncrypted specifies the not encrypted state for integration runtime internal channel encryption mode.
	NotEncrypted IntegrationRuntimeInternalChannelEncryptionMode = "NotEncrypted"
	// NotSet specifies the not set state for integration runtime internal channel encryption mode.
	NotSet IntegrationRuntimeInternalChannelEncryptionMode = "NotSet"
	// SslEncrypted specifies the ssl encrypted state for integration runtime internal channel encryption mode.
	SslEncrypted IntegrationRuntimeInternalChannelEncryptionMode = "SslEncrypted"
)

// IntegrationRuntimeSsisCatalogPricingTier enumerates the values for integration runtime ssis catalog pricing tier.
type IntegrationRuntimeSsisCatalogPricingTier string

const (
	// IntegrationRuntimeSsisCatalogPricingTierBasic specifies the integration runtime ssis catalog pricing tier basic
	// state for integration runtime ssis catalog pricing tier.
	IntegrationRuntimeSsisCatalogPricingTierBasic IntegrationRuntimeSsisCatalogPricingTier = "Basic"
	// IntegrationRuntimeSsisCatalogPricingTierPremium specifies the integration runtime ssis catalog pricing tier premium
	// state for integration runtime ssis catalog pricing tier.
	IntegrationRuntimeSsisCatalogPricingTierPremium IntegrationRuntimeSsisCatalogPricingTier = "Premium"
	// IntegrationRuntimeSsisCatalogPricingTierPremiumRS specifies the integration runtime ssis catalog pricing tier
	// premium rs state for integration runtime ssis catalog pricing tier.
	IntegrationRuntimeSsisCatalogPricingTierPremiumRS IntegrationRuntimeSsisCatalogPricingTier = "PremiumRS"
	// IntegrationRuntimeSsisCatalogPricingTierStandard specifies the integration runtime ssis catalog pricing tier
	// standard state for integration runtime ssis catalog pricing tier.
	IntegrationRuntimeSsisCatalogPricingTierStandard IntegrationRuntimeSsisCatalogPricingTier = "Standard"
)

// IntegrationRuntimeState enumerates the values for integration runtime state.
type IntegrationRuntimeState string

const (
	// Initial specifies the initial state for integration runtime state.
	Initial IntegrationRuntimeState = "Initial"
	// Limited specifies the limited state for integration runtime state.
	Limited IntegrationRuntimeState = "Limited"
	// NeedRegistration specifies the need registration state for integration runtime state.
	NeedRegistration IntegrationRuntimeState = "NeedRegistration"
	// Offline specifies the offline state for integration runtime state.
	Offline IntegrationRuntimeState = "Offline"
	// Online specifies the online state for integration runtime state.
	Online IntegrationRuntimeState = "Online"
	// Started specifies the started state for integration runtime state.
	Started IntegrationRuntimeState = "Started"
	// Starting specifies the starting state for integration runtime state.
	Starting IntegrationRuntimeState = "Starting"
	// Stopped specifies the stopped state for integration runtime state.
	Stopped IntegrationRuntimeState = "Stopped"
	// Stopping specifies the stopping state for integration runtime state.
	Stopping IntegrationRuntimeState = "Stopping"
)

// IntegrationRuntimeUpdateResult enumerates the values for integration runtime update result.
type IntegrationRuntimeUpdateResult string

const (
	// Fail specifies the fail state for integration runtime update result.
	Fail IntegrationRuntimeUpdateResult = "Fail"
	// Succeed specifies the succeed state for integration runtime update result.
	Succeed IntegrationRuntimeUpdateResult = "Succeed"
)

// JSONFormatFilePattern enumerates the values for json format file pattern.
type JSONFormatFilePattern string

const (
	// ArrayOfObjects specifies the array of objects state for json format file pattern.
	ArrayOfObjects JSONFormatFilePattern = "arrayOfObjects"
	// SetOfObjects specifies the set of objects state for json format file pattern.
	SetOfObjects JSONFormatFilePattern = "setOfObjects"
)

// ManagedIntegrationRuntimeNodeStatus enumerates the values for managed integration runtime node status.
type ManagedIntegrationRuntimeNodeStatus string

const (
	// ManagedIntegrationRuntimeNodeStatusAvailable specifies the managed integration runtime node status available state
	// for managed integration runtime node status.
	ManagedIntegrationRuntimeNodeStatusAvailable ManagedIntegrationRuntimeNodeStatus = "Available"
	// ManagedIntegrationRuntimeNodeStatusRecycling specifies the managed integration runtime node status recycling state
	// for managed integration runtime node status.
	ManagedIntegrationRuntimeNodeStatusRecycling ManagedIntegrationRuntimeNodeStatus = "Recycling"
	// ManagedIntegrationRuntimeNodeStatusStarting specifies the managed integration runtime node status starting state for
	// managed integration runtime node status.
	ManagedIntegrationRuntimeNodeStatusStarting ManagedIntegrationRuntimeNodeStatus = "Starting"
	// ManagedIntegrationRuntimeNodeStatusUnavailable specifies the managed integration runtime node status unavailable
	// state for managed integration runtime node status.
	ManagedIntegrationRuntimeNodeStatusUnavailable ManagedIntegrationRuntimeNodeStatus = "Unavailable"
)

// MongoDbAuthenticationType enumerates the values for mongo db authentication type.
type MongoDbAuthenticationType string

const (
	// MongoDbAuthenticationTypeAnonymous specifies the mongo db authentication type anonymous state for mongo db
	// authentication type.
	MongoDbAuthenticationTypeAnonymous MongoDbAuthenticationType = "Anonymous"
	// MongoDbAuthenticationTypeBasic specifies the mongo db authentication type basic state for mongo db authentication
	// type.
	MongoDbAuthenticationTypeBasic MongoDbAuthenticationType = "Basic"
)

// ODataAuthenticationType enumerates the values for o data authentication type.
type ODataAuthenticationType string

const (
	// ODataAuthenticationTypeAnonymous specifies the o data authentication type anonymous state for o data authentication
	// type.
	ODataAuthenticationTypeAnonymous ODataAuthenticationType = "Anonymous"
	// ODataAuthenticationTypeBasic specifies the o data authentication type basic state for o data authentication type.
	ODataAuthenticationTypeBasic ODataAuthenticationType = "Basic"
)

// ParameterType enumerates the values for parameter type.
type ParameterType string

const (
	// Array specifies the array state for parameter type.
	Array ParameterType = "Array"
	// Bool specifies the bool state for parameter type.
	Bool ParameterType = "Bool"
	// Float specifies the float state for parameter type.
	Float ParameterType = "Float"
	// Int specifies the int state for parameter type.
	Int ParameterType = "Int"
	// Object specifies the object state for parameter type.
	Object ParameterType = "Object"
	// String specifies the string state for parameter type.
	String ParameterType = "String"
)

// PipelineRunQueryFilterOperand enumerates the values for pipeline run query filter operand.
type PipelineRunQueryFilterOperand string

const (
	// PipelineName specifies the pipeline name state for pipeline run query filter operand.
	PipelineName PipelineRunQueryFilterOperand = "PipelineName"
	// RunEnd specifies the run end state for pipeline run query filter operand.
	RunEnd PipelineRunQueryFilterOperand = "RunEnd"
	// RunStart specifies the run start state for pipeline run query filter operand.
	RunStart PipelineRunQueryFilterOperand = "RunStart"
	// Status specifies the status state for pipeline run query filter operand.
	Status PipelineRunQueryFilterOperand = "Status"
)

// PipelineRunQueryFilterOperator enumerates the values for pipeline run query filter operator.
type PipelineRunQueryFilterOperator string

const (
	// Equals specifies the equals state for pipeline run query filter operator.
	Equals PipelineRunQueryFilterOperator = "Equals"
	// In specifies the in state for pipeline run query filter operator.
	In PipelineRunQueryFilterOperator = "In"
	// NotEquals specifies the not equals state for pipeline run query filter operator.
	NotEquals PipelineRunQueryFilterOperator = "NotEquals"
	// NotIn specifies the not in state for pipeline run query filter operator.
	NotIn PipelineRunQueryFilterOperator = "NotIn"
)

// PipelineRunQueryOrder enumerates the values for pipeline run query order.
type PipelineRunQueryOrder string

const (
	// ASC specifies the asc state for pipeline run query order.
	ASC PipelineRunQueryOrder = "ASC"
	// DESC specifies the desc state for pipeline run query order.
	DESC PipelineRunQueryOrder = "DESC"
)

// PipelineRunQueryOrderByField enumerates the values for pipeline run query order by field.
type PipelineRunQueryOrderByField string

const (
	// PipelineRunQueryOrderByFieldRunEnd specifies the pipeline run query order by field run end state for pipeline run
	// query order by field.
	PipelineRunQueryOrderByFieldRunEnd PipelineRunQueryOrderByField = "RunEnd"
	// PipelineRunQueryOrderByFieldRunStart specifies the pipeline run query order by field run start state for pipeline
	// run query order by field.
	PipelineRunQueryOrderByFieldRunStart PipelineRunQueryOrderByField = "RunStart"
)

// PolybaseSettingsRejectType enumerates the values for polybase settings reject type.
type PolybaseSettingsRejectType string

const (
	// Percentage specifies the percentage state for polybase settings reject type.
	Percentage PolybaseSettingsRejectType = "percentage"
	// Value specifies the value state for polybase settings reject type.
	Value PolybaseSettingsRejectType = "value"
)

// RecurrenceFrequency enumerates the values for recurrence frequency.
type RecurrenceFrequency string

const (
	// Day specifies the day state for recurrence frequency.
	Day RecurrenceFrequency = "Day"
	// Hour specifies the hour state for recurrence frequency.
	Hour RecurrenceFrequency = "Hour"
	// Minute specifies the minute state for recurrence frequency.
	Minute RecurrenceFrequency = "Minute"
	// Month specifies the month state for recurrence frequency.
	Month RecurrenceFrequency = "Month"
	// NotSpecified specifies the not specified state for recurrence frequency.
	NotSpecified RecurrenceFrequency = "NotSpecified"
	// Week specifies the week state for recurrence frequency.
	Week RecurrenceFrequency = "Week"
	// Year specifies the year state for recurrence frequency.
	Year RecurrenceFrequency = "Year"
)

// SapHanaAuthenticationType enumerates the values for sap hana authentication type.
type SapHanaAuthenticationType string

const (
	// SapHanaAuthenticationTypeBasic specifies the sap hana authentication type basic state for sap hana authentication
	// type.
	SapHanaAuthenticationTypeBasic SapHanaAuthenticationType = "Basic"
	// SapHanaAuthenticationTypeWindows specifies the sap hana authentication type windows state for sap hana
	// authentication type.
	SapHanaAuthenticationTypeWindows SapHanaAuthenticationType = "Windows"
)

// SelfHostedIntegrationRuntimeNodeStatus enumerates the values for self hosted integration runtime node status.
type SelfHostedIntegrationRuntimeNodeStatus string

const (
	// SelfHostedIntegrationRuntimeNodeStatusInitializeFailed specifies the self hosted integration runtime node status
	// initialize failed state for self hosted integration runtime node status.
	SelfHostedIntegrationRuntimeNodeStatusInitializeFailed SelfHostedIntegrationRuntimeNodeStatus = "InitializeFailed"
	// SelfHostedIntegrationRuntimeNodeStatusInitializing specifies the self hosted integration runtime node status
	// initializing state for self hosted integration runtime node status.
	SelfHostedIntegrationRuntimeNodeStatusInitializing SelfHostedIntegrationRuntimeNodeStatus = "Initializing"
	// SelfHostedIntegrationRuntimeNodeStatusLimited specifies the self hosted integration runtime node status limited
	// state for self hosted integration runtime node status.
	SelfHostedIntegrationRuntimeNodeStatusLimited SelfHostedIntegrationRuntimeNodeStatus = "Limited"
	// SelfHostedIntegrationRuntimeNodeStatusNeedRegistration specifies the self hosted integration runtime node status
	// need registration state for self hosted integration runtime node status.
	SelfHostedIntegrationRuntimeNodeStatusNeedRegistration SelfHostedIntegrationRuntimeNodeStatus = "NeedRegistration"
	// SelfHostedIntegrationRuntimeNodeStatusOffline specifies the self hosted integration runtime node status offline
	// state for self hosted integration runtime node status.
	SelfHostedIntegrationRuntimeNodeStatusOffline SelfHostedIntegrationRuntimeNodeStatus = "Offline"
	// SelfHostedIntegrationRuntimeNodeStatusOnline specifies the self hosted integration runtime node status online state
	// for self hosted integration runtime node status.
	SelfHostedIntegrationRuntimeNodeStatusOnline SelfHostedIntegrationRuntimeNodeStatus = "Online"
	// SelfHostedIntegrationRuntimeNodeStatusUpgrading specifies the self hosted integration runtime node status upgrading
	// state for self hosted integration runtime node status.
	SelfHostedIntegrationRuntimeNodeStatusUpgrading SelfHostedIntegrationRuntimeNodeStatus = "Upgrading"
)

// SftpAuthenticationType enumerates the values for sftp authentication type.
type SftpAuthenticationType string

const (
	// SftpAuthenticationTypeBasic specifies the sftp authentication type basic state for sftp authentication type.
	SftpAuthenticationTypeBasic SftpAuthenticationType = "Basic"
	// SftpAuthenticationTypeSSHPublicKey specifies the sftp authentication type ssh public key state for sftp
	// authentication type.
	SftpAuthenticationTypeSSHPublicKey SftpAuthenticationType = "SshPublicKey"
)

// StoredProcedureParameterType enumerates the values for stored procedure parameter type.
type StoredProcedureParameterType string

const (
	// StoredProcedureParameterTypeBoolean specifies the stored procedure parameter type boolean state for stored procedure
	// parameter type.
	StoredProcedureParameterTypeBoolean StoredProcedureParameterType = "Boolean"
	// StoredProcedureParameterTypeDate specifies the stored procedure parameter type date state for stored procedure
	// parameter type.
	StoredProcedureParameterTypeDate StoredProcedureParameterType = "Date"
	// StoredProcedureParameterTypeDecimal specifies the stored procedure parameter type decimal state for stored procedure
	// parameter type.
	StoredProcedureParameterTypeDecimal StoredProcedureParameterType = "Decimal"
	// StoredProcedureParameterTypeGUID specifies the stored procedure parameter type guid state for stored procedure
	// parameter type.
	StoredProcedureParameterTypeGUID StoredProcedureParameterType = "Guid"
	// StoredProcedureParameterTypeInt specifies the stored procedure parameter type int state for stored procedure
	// parameter type.
	StoredProcedureParameterTypeInt StoredProcedureParameterType = "Int"
	// StoredProcedureParameterTypeString specifies the stored procedure parameter type string state for stored procedure
	// parameter type.
	StoredProcedureParameterTypeString StoredProcedureParameterType = "String"
)

// SybaseAuthenticationType enumerates the values for sybase authentication type.
type SybaseAuthenticationType string

const (
	// SybaseAuthenticationTypeBasic specifies the sybase authentication type basic state for sybase authentication type.
	SybaseAuthenticationTypeBasic SybaseAuthenticationType = "Basic"
	// SybaseAuthenticationTypeWindows specifies the sybase authentication type windows state for sybase authentication
	// type.
	SybaseAuthenticationTypeWindows SybaseAuthenticationType = "Windows"
)

// TeradataAuthenticationType enumerates the values for teradata authentication type.
type TeradataAuthenticationType string

const (
	// TeradataAuthenticationTypeBasic specifies the teradata authentication type basic state for teradata authentication
	// type.
	TeradataAuthenticationTypeBasic TeradataAuthenticationType = "Basic"
	// TeradataAuthenticationTypeWindows specifies the teradata authentication type windows state for teradata
	// authentication type.
	TeradataAuthenticationTypeWindows TeradataAuthenticationType = "Windows"
)

// TriggerRunStatus enumerates the values for trigger run status.
type TriggerRunStatus string

const (
	// TriggerRunStatusFailed specifies the trigger run status failed state for trigger run status.
	TriggerRunStatusFailed TriggerRunStatus = "Failed"
	// TriggerRunStatusInprogress specifies the trigger run status inprogress state for trigger run status.
	TriggerRunStatusInprogress TriggerRunStatus = "Inprogress"
	// TriggerRunStatusSucceeded specifies the trigger run status succeeded state for trigger run status.
	TriggerRunStatusSucceeded TriggerRunStatus = "Succeeded"
)

// TriggerRuntimeState enumerates the values for trigger runtime state.
type TriggerRuntimeState string

const (
	// TriggerRuntimeStateDisabled specifies the trigger runtime state disabled state for trigger runtime state.
	TriggerRuntimeStateDisabled TriggerRuntimeState = "Disabled"
	// TriggerRuntimeStateStarted specifies the trigger runtime state started state for trigger runtime state.
	TriggerRuntimeStateStarted TriggerRuntimeState = "Started"
	// TriggerRuntimeStateStopped specifies the trigger runtime state stopped state for trigger runtime state.
	TriggerRuntimeStateStopped TriggerRuntimeState = "Stopped"
)

// Type enumerates the values for type.
type Type string

const (
	// TypeManaged specifies the type managed state for type.
	TypeManaged Type = "Managed"
	// TypeSelfHosted specifies the type self hosted state for type.
	TypeSelfHosted Type = "SelfHosted"
)

// TypeActivity enumerates the values for type activity.
type TypeActivity string

const (
	// TypeAzureMLBatchExecution specifies the type azure ml batch execution state for type activity.
	TypeAzureMLBatchExecution TypeActivity = "AzureMLBatchExecution"
	// TypeAzureMLUpdateResource specifies the type azure ml update resource state for type activity.
	TypeAzureMLUpdateResource TypeActivity = "AzureMLUpdateResource"
	// TypeContainer specifies the type container state for type activity.
	TypeContainer TypeActivity = "Container"
	// TypeCopy specifies the type copy state for type activity.
	TypeCopy TypeActivity = "Copy"
	// TypeCustom specifies the type custom state for type activity.
	TypeCustom TypeActivity = "Custom"
	// TypeDataLakeAnalyticsUSQL specifies the type data lake analytics usql state for type activity.
	TypeDataLakeAnalyticsUSQL TypeActivity = "DataLakeAnalyticsU-SQL"
	// TypeExecutePipeline specifies the type execute pipeline state for type activity.
	TypeExecutePipeline TypeActivity = "ExecutePipeline"
	// TypeExecution specifies the type execution state for type activity.
	TypeExecution TypeActivity = "Execution"
	// TypeForEach specifies the type for each state for type activity.
	TypeForEach TypeActivity = "ForEach"
	// TypeGetMetadata specifies the type get metadata state for type activity.
	TypeGetMetadata TypeActivity = "GetMetadata"
	// TypeHDInsightHive specifies the type hd insight hive state for type activity.
	TypeHDInsightHive TypeActivity = "HDInsightHive"
	// TypeHDInsightMapReduce specifies the type hd insight map reduce state for type activity.
	TypeHDInsightMapReduce TypeActivity = "HDInsightMapReduce"
	// TypeHDInsightPig specifies the type hd insight pig state for type activity.
	TypeHDInsightPig TypeActivity = "HDInsightPig"
	// TypeHDInsightSpark specifies the type hd insight spark state for type activity.
	TypeHDInsightSpark TypeActivity = "HDInsightSpark"
	// TypeHDInsightStreaming specifies the type hd insight streaming state for type activity.
	TypeHDInsightStreaming TypeActivity = "HDInsightStreaming"
	// TypeIfCondition specifies the type if condition state for type activity.
	TypeIfCondition TypeActivity = "IfCondition"
	// TypeLookup specifies the type lookup state for type activity.
	TypeLookup TypeActivity = "Lookup"
	// TypeSQLServerStoredProcedure specifies the type sql server stored procedure state for type activity.
	TypeSQLServerStoredProcedure TypeActivity = "SqlServerStoredProcedure"
	// TypeUntil specifies the type until state for type activity.
	TypeUntil TypeActivity = "Until"
	// TypeWait specifies the type wait state for type activity.
	TypeWait TypeActivity = "Wait"
	// TypeWebActivity specifies the type web activity state for type activity.
	TypeWebActivity TypeActivity = "WebActivity"
)

// TypeAzureKeyVaultReference enumerates the values for type azure key vault reference.
type TypeAzureKeyVaultReference string

const (
	// TypeAzureKeyVaultSecret specifies the type azure key vault secret state for type azure key vault reference.
	TypeAzureKeyVaultSecret TypeAzureKeyVaultReference = "AzureKeyVaultSecret"
)

// TypeCopySink enumerates the values for type copy sink.
type TypeCopySink string

const (
	// TypeAzureDataLakeStoreSink specifies the type azure data lake store sink state for type copy sink.
	TypeAzureDataLakeStoreSink TypeCopySink = "AzureDataLakeStoreSink"
	// TypeAzureQueueSink specifies the type azure queue sink state for type copy sink.
	TypeAzureQueueSink TypeCopySink = "AzureQueueSink"
	// TypeAzureSearchIndexSink specifies the type azure search index sink state for type copy sink.
	TypeAzureSearchIndexSink TypeCopySink = "AzureSearchIndexSink"
	// TypeAzureTableSink specifies the type azure table sink state for type copy sink.
	TypeAzureTableSink TypeCopySink = "AzureTableSink"
	// TypeBlobSink specifies the type blob sink state for type copy sink.
	TypeBlobSink TypeCopySink = "BlobSink"
	// TypeDocumentDbCollectionSink specifies the type document db collection sink state for type copy sink.
	TypeDocumentDbCollectionSink TypeCopySink = "DocumentDbCollectionSink"
	// TypeFileSystemSink specifies the type file system sink state for type copy sink.
	TypeFileSystemSink TypeCopySink = "FileSystemSink"
	// TypeOdbcSink specifies the type odbc sink state for type copy sink.
	TypeOdbcSink TypeCopySink = "OdbcSink"
	// TypeOracleSink specifies the type oracle sink state for type copy sink.
	TypeOracleSink TypeCopySink = "OracleSink"
	// TypeSQLDWSink specifies the type sqldw sink state for type copy sink.
	TypeSQLDWSink TypeCopySink = "SqlDWSink"
	// TypeSQLSink specifies the type sql sink state for type copy sink.
	TypeSQLSink TypeCopySink = "SqlSink"
)

// TypeCopySource enumerates the values for type copy source.
type TypeCopySource string

const (
	// TypeAmazonRedshiftSource specifies the type amazon redshift source state for type copy source.
	TypeAmazonRedshiftSource TypeCopySource = "AmazonRedshiftSource"
	// TypeAzureDataLakeStoreSource specifies the type azure data lake store source state for type copy source.
	TypeAzureDataLakeStoreSource TypeCopySource = "AzureDataLakeStoreSource"
	// TypeAzureTableSource specifies the type azure table source state for type copy source.
	TypeAzureTableSource TypeCopySource = "AzureTableSource"
	// TypeBlobSource specifies the type blob source state for type copy source.
	TypeBlobSource TypeCopySource = "BlobSource"
	// TypeCassandraSource specifies the type cassandra source state for type copy source.
	TypeCassandraSource TypeCopySource = "CassandraSource"
	// TypeDocumentDbCollectionSource specifies the type document db collection source state for type copy source.
	TypeDocumentDbCollectionSource TypeCopySource = "DocumentDbCollectionSource"
	// TypeDynamicsSource specifies the type dynamics source state for type copy source.
	TypeDynamicsSource TypeCopySource = "DynamicsSource"
	// TypeFileSystemSource specifies the type file system source state for type copy source.
	TypeFileSystemSource TypeCopySource = "FileSystemSource"
	// TypeHdfsSource specifies the type hdfs source state for type copy source.
	TypeHdfsSource TypeCopySource = "HdfsSource"
	// TypeHTTPSource specifies the type http source state for type copy source.
	TypeHTTPSource TypeCopySource = "HttpSource"
	// TypeMongoDbSource specifies the type mongo db source state for type copy source.
	TypeMongoDbSource TypeCopySource = "MongoDbSource"
	// TypeOracleSource specifies the type oracle source state for type copy source.
	TypeOracleSource TypeCopySource = "OracleSource"
	// TypeRelationalSource specifies the type relational source state for type copy source.
	TypeRelationalSource TypeCopySource = "RelationalSource"
	// TypeSQLDWSource specifies the type sqldw source state for type copy source.
	TypeSQLDWSource TypeCopySource = "SqlDWSource"
	// TypeSQLSource specifies the type sql source state for type copy source.
	TypeSQLSource TypeCopySource = "SqlSource"
	// TypeWebSource specifies the type web source state for type copy source.
	TypeWebSource TypeCopySource = "WebSource"
)

// TypeCopyTranslator enumerates the values for type copy translator.
type TypeCopyTranslator string

const (
	// TypeTabularTranslator specifies the type tabular translator state for type copy translator.
	TypeTabularTranslator TypeCopyTranslator = "TabularTranslator"
)

// TypeDataset enumerates the values for type dataset.
type TypeDataset string

const (
	// TypeAmazonS3Object specifies the type amazon s3 object state for type dataset.
	TypeAmazonS3Object TypeDataset = "AmazonS3Object"
	// TypeAzureBlob specifies the type azure blob state for type dataset.
	TypeAzureBlob TypeDataset = "AzureBlob"
	// TypeAzureDataLakeStoreFile specifies the type azure data lake store file state for type dataset.
	TypeAzureDataLakeStoreFile TypeDataset = "AzureDataLakeStoreFile"
	// TypeAzureSearchIndex specifies the type azure search index state for type dataset.
	TypeAzureSearchIndex TypeDataset = "AzureSearchIndex"
	// TypeAzureSQLDWTable specifies the type azure sqldw table state for type dataset.
	TypeAzureSQLDWTable TypeDataset = "AzureSqlDWTable"
	// TypeAzureSQLTable specifies the type azure sql table state for type dataset.
	TypeAzureSQLTable TypeDataset = "AzureSqlTable"
	// TypeAzureTable specifies the type azure table state for type dataset.
	TypeAzureTable TypeDataset = "AzureTable"
	// TypeCassandraTable specifies the type cassandra table state for type dataset.
	TypeCassandraTable TypeDataset = "CassandraTable"
	// TypeCustomDataset specifies the type custom dataset state for type dataset.
	TypeCustomDataset TypeDataset = "CustomDataset"
	// TypeDocumentDbCollection specifies the type document db collection state for type dataset.
	TypeDocumentDbCollection TypeDataset = "DocumentDbCollection"
	// TypeDynamicsEntity specifies the type dynamics entity state for type dataset.
	TypeDynamicsEntity TypeDataset = "DynamicsEntity"
	// TypeFileShare specifies the type file share state for type dataset.
	TypeFileShare TypeDataset = "FileShare"
	// TypeHTTPFile specifies the type http file state for type dataset.
	TypeHTTPFile TypeDataset = "HttpFile"
	// TypeMongoDbCollection specifies the type mongo db collection state for type dataset.
	TypeMongoDbCollection TypeDataset = "MongoDbCollection"
	// TypeODataResource specifies the type o data resource state for type dataset.
	TypeODataResource TypeDataset = "ODataResource"
	// TypeOracleTable specifies the type oracle table state for type dataset.
	TypeOracleTable TypeDataset = "OracleTable"
	// TypeRelationalTable specifies the type relational table state for type dataset.
	TypeRelationalTable TypeDataset = "RelationalTable"
	// TypeSQLServerTable specifies the type sql server table state for type dataset.
	TypeSQLServerTable TypeDataset = "SqlServerTable"
	// TypeWebTable specifies the type web table state for type dataset.
	TypeWebTable TypeDataset = "WebTable"
)

// TypeDatasetCompression enumerates the values for type dataset compression.
type TypeDatasetCompression string

const (
	// TypeBZip2 specifies the type b zip 2 state for type dataset compression.
	TypeBZip2 TypeDatasetCompression = "BZip2"
	// TypeDeflate specifies the type deflate state for type dataset compression.
	TypeDeflate TypeDatasetCompression = "Deflate"
	// TypeGZip specifies the type g zip state for type dataset compression.
	TypeGZip TypeDatasetCompression = "GZip"
)

// TypeDatasetPartitionValue enumerates the values for type dataset partition value.
type TypeDatasetPartitionValue string

const (
	// TypeDateTime specifies the type date time state for type dataset partition value.
	TypeDateTime TypeDatasetPartitionValue = "DateTime"
)

// TypeDatasetStorageFormat enumerates the values for type dataset storage format.
type TypeDatasetStorageFormat string

const (
	// TypeAvroFormat specifies the type avro format state for type dataset storage format.
	TypeAvroFormat TypeDatasetStorageFormat = "AvroFormat"
	// TypeJSONFormat specifies the type json format state for type dataset storage format.
	TypeJSONFormat TypeDatasetStorageFormat = "JsonFormat"
	// TypeOrcFormat specifies the type orc format state for type dataset storage format.
	TypeOrcFormat TypeDatasetStorageFormat = "OrcFormat"
	// TypeParquetFormat specifies the type parquet format state for type dataset storage format.
	TypeParquetFormat TypeDatasetStorageFormat = "ParquetFormat"
	// TypeTextFormat specifies the type text format state for type dataset storage format.
	TypeTextFormat TypeDatasetStorageFormat = "TextFormat"
)

// TypeLinkedService enumerates the values for type linked service.
type TypeLinkedService string

const (
	// TypeAmazonRedshift specifies the type amazon redshift state for type linked service.
	TypeAmazonRedshift TypeLinkedService = "AmazonRedshift"
	// TypeAmazonS3 specifies the type amazon s3 state for type linked service.
	TypeAmazonS3 TypeLinkedService = "AmazonS3"
	// TypeAzureBatch specifies the type azure batch state for type linked service.
	TypeAzureBatch TypeLinkedService = "AzureBatch"
	// TypeAzureDataLakeAnalytics specifies the type azure data lake analytics state for type linked service.
	TypeAzureDataLakeAnalytics TypeLinkedService = "AzureDataLakeAnalytics"
	// TypeAzureDataLakeStore specifies the type azure data lake store state for type linked service.
	TypeAzureDataLakeStore TypeLinkedService = "AzureDataLakeStore"
	// TypeAzureKeyVault specifies the type azure key vault state for type linked service.
	TypeAzureKeyVault TypeLinkedService = "AzureKeyVault"
	// TypeAzureML specifies the type azure ml state for type linked service.
	TypeAzureML TypeLinkedService = "AzureML"
	// TypeAzureSearch specifies the type azure search state for type linked service.
	TypeAzureSearch TypeLinkedService = "AzureSearch"
	// TypeAzureSQLDatabase specifies the type azure sql database state for type linked service.
	TypeAzureSQLDatabase TypeLinkedService = "AzureSqlDatabase"
	// TypeAzureSQLDW specifies the type azure sqldw state for type linked service.
	TypeAzureSQLDW TypeLinkedService = "AzureSqlDW"
	// TypeAzureStorage specifies the type azure storage state for type linked service.
	TypeAzureStorage TypeLinkedService = "AzureStorage"
	// TypeCassandra specifies the type cassandra state for type linked service.
	TypeCassandra TypeLinkedService = "Cassandra"
	// TypeCosmosDb specifies the type cosmos db state for type linked service.
	TypeCosmosDb TypeLinkedService = "CosmosDb"
	// TypeCustomDataSource specifies the type custom data source state for type linked service.
	TypeCustomDataSource TypeLinkedService = "CustomDataSource"
	// TypeDb2 specifies the type db 2 state for type linked service.
	TypeDb2 TypeLinkedService = "Db2"
	// TypeDynamics specifies the type dynamics state for type linked service.
	TypeDynamics TypeLinkedService = "Dynamics"
	// TypeFileServer specifies the type file server state for type linked service.
	TypeFileServer TypeLinkedService = "FileServer"
	// TypeFtpServer specifies the type ftp server state for type linked service.
	TypeFtpServer TypeLinkedService = "FtpServer"
	// TypeHdfs specifies the type hdfs state for type linked service.
	TypeHdfs TypeLinkedService = "Hdfs"
	// TypeHDInsight specifies the type hd insight state for type linked service.
	TypeHDInsight TypeLinkedService = "HDInsight"
	// TypeHDInsightOnDemand specifies the type hd insight on demand state for type linked service.
	TypeHDInsightOnDemand TypeLinkedService = "HDInsightOnDemand"
	// TypeHTTPServer specifies the type http server state for type linked service.
	TypeHTTPServer TypeLinkedService = "HttpServer"
	// TypeMongoDb specifies the type mongo db state for type linked service.
	TypeMongoDb TypeLinkedService = "MongoDb"
	// TypeMySQL specifies the type my sql state for type linked service.
	TypeMySQL TypeLinkedService = "MySql"
	// TypeOData specifies the type o data state for type linked service.
	TypeOData TypeLinkedService = "OData"
	// TypeOdbc specifies the type odbc state for type linked service.
	TypeOdbc TypeLinkedService = "Odbc"
	// TypeOracle specifies the type oracle state for type linked service.
	TypeOracle TypeLinkedService = "Oracle"
	// TypePostgreSQL specifies the type postgre sql state for type linked service.
	TypePostgreSQL TypeLinkedService = "PostgreSql"
	// TypeSalesforce specifies the type salesforce state for type linked service.
	TypeSalesforce TypeLinkedService = "Salesforce"
	// TypeSapBW specifies the type sap bw state for type linked service.
	TypeSapBW TypeLinkedService = "SapBW"
	// TypeSapHana specifies the type sap hana state for type linked service.
	TypeSapHana TypeLinkedService = "SapHana"
	// TypeSftp specifies the type sftp state for type linked service.
	TypeSftp TypeLinkedService = "Sftp"
	// TypeSQLServer specifies the type sql server state for type linked service.
	TypeSQLServer TypeLinkedService = "SqlServer"
	// TypeSybase specifies the type sybase state for type linked service.
	TypeSybase TypeLinkedService = "Sybase"
	// TypeTeradata specifies the type teradata state for type linked service.
	TypeTeradata TypeLinkedService = "Teradata"
	// TypeWeb specifies the type web state for type linked service.
	TypeWeb TypeLinkedService = "Web"
)

// TypeTrigger enumerates the values for type trigger.
type TypeTrigger string

const (
	// TypeBlobTrigger specifies the type blob trigger state for type trigger.
	TypeBlobTrigger TypeTrigger = "BlobTrigger"
	// TypeScheduleTrigger specifies the type schedule trigger state for type trigger.
	TypeScheduleTrigger TypeTrigger = "ScheduleTrigger"
)

// WebActivityMethod enumerates the values for web activity method.
type WebActivityMethod string

const (
	// GET specifies the get state for web activity method.
	GET WebActivityMethod = "GET"
	// POST specifies the post state for web activity method.
	POST WebActivityMethod = "POST"
	// PUT specifies the put state for web activity method.
	PUT WebActivityMethod = "PUT"
)

// Activity is a pipeline activity.
type Activity interface {
	AsDataLakeAnalyticsUSQLActivity() (*DataLakeAnalyticsUSQLActivity, bool)
	AsAzureMLUpdateResourceActivity() (*AzureMLUpdateResourceActivity, bool)
	AsAzureMLBatchExecutionActivity() (*AzureMLBatchExecutionActivity, bool)
	AsGetMetadataActivity() (*GetMetadataActivity, bool)
	AsWebActivity() (*WebActivity, bool)
	AsLookupActivity() (*LookupActivity, bool)
	AsSQLServerStoredProcedureActivity() (*SQLServerStoredProcedureActivity, bool)
	AsCustomActivity() (*CustomActivity, bool)
	AsHDInsightSparkActivity() (*HDInsightSparkActivity, bool)
	AsHDInsightStreamingActivity() (*HDInsightStreamingActivity, bool)
	AsHDInsightMapReduceActivity() (*HDInsightMapReduceActivity, bool)
	AsHDInsightPigActivity() (*HDInsightPigActivity, bool)
	AsHDInsightHiveActivity() (*HDInsightHiveActivity, bool)
	AsCopyActivity() (*CopyActivity, bool)
	AsExecutionActivity() (*ExecutionActivity, bool)
	AsUntilActivity() (*UntilActivity, bool)
	AsWaitActivity() (*WaitActivity, bool)
	AsForEachActivity() (*ForEachActivity, bool)
	AsIfConditionActivity() (*IfConditionActivity, bool)
	AsExecutePipelineActivity() (*ExecutePipelineActivity, bool)
	AsControlActivity() (*ControlActivity, bool)
}

func unmarshalActivity(body []byte) (Activity, error) {
	var m map[string]interface{}
	err := json.Unmarshal(body, &m)
	if err != nil {
		return nil, err
	}

	switch m["type"] {
	case string(TypeDataLakeAnalyticsUSQL):
		var dlaua DataLakeAnalyticsUSQLActivity
		err := json.Unmarshal(body, &dlaua)
		return dlaua, err
	case string(TypeAzureMLUpdateResource):
		var amura AzureMLUpdateResourceActivity
		err := json.Unmarshal(body, &amura)
		return amura, err
	case string(TypeAzureMLBatchExecution):
		var ambea AzureMLBatchExecutionActivity
		err := json.Unmarshal(body, &ambea)
		return ambea, err
	case string(TypeGetMetadata):
		var gma GetMetadataActivity
		err := json.Unmarshal(body, &gma)
		return gma, err
	case string(TypeWebActivity):
		var wa WebActivity
		err := json.Unmarshal(body, &wa)
		return wa, err
	case string(TypeLookup):
		var la LookupActivity
		err := json.Unmarshal(body, &la)
		return la, err
	case string(TypeSQLServerStoredProcedure):
		var ssspa SQLServerStoredProcedureActivity
		err := json.Unmarshal(body, &ssspa)
		return ssspa, err
	case string(TypeCustom):
		var ca CustomActivity
		err := json.Unmarshal(body, &ca)
		return ca, err
	case string(TypeHDInsightSpark):
		var hisa HDInsightSparkActivity
		err := json.Unmarshal(body, &hisa)
		return hisa, err
	case string(TypeHDInsightStreaming):
		var hisa HDInsightStreamingActivity
		err := json.Unmarshal(body, &hisa)
		return hisa, err
	case string(TypeHDInsightMapReduce):
		var himra HDInsightMapReduceActivity
		err := json.Unmarshal(body, &himra)
		return himra, err
	case string(TypeHDInsightPig):
		var hipa HDInsightPigActivity
		err := json.Unmarshal(body, &hipa)
		return hipa, err
	case string(TypeHDInsightHive):
		var hiha HDInsightHiveActivity
		err := json.Unmarshal(body, &hiha)
		return hiha, err
	case string(TypeCopy):
		var ca CopyActivity
		err := json.Unmarshal(body, &ca)
		return ca, err
	case string(TypeExecution):
		var ea ExecutionActivity
		err := json.Unmarshal(body, &ea)
		return ea, err
	case string(TypeUntil):
		var ua UntilActivity
		err := json.Unmarshal(body, &ua)
		return ua, err
	case string(TypeWait):
		var wa WaitActivity
		err := json.Unmarshal(body, &wa)
		return wa, err
	case string(TypeForEach):
		var fea ForEachActivity
		err := json.Unmarshal(body, &fea)
		return fea, err
	case string(TypeIfCondition):
		var ica IfConditionActivity
		err := json.Unmarshal(body, &ica)
		return ica, err
	case string(TypeExecutePipeline):
		var epa ExecutePipelineActivity
		err := json.Unmarshal(body, &epa)
		return epa, err
	case string(TypeContainer):
		var ca ControlActivity
		err := json.Unmarshal(body, &ca)
		return ca, err
	default:
		return nil, errors.New("Unsupported type")
	}
}
func unmarshalActivityArray(body []byte) ([]Activity, error) {
	var rawMessages []*json.RawMessage
	err := json.Unmarshal(body, &rawMessages)
	if err != nil {
		return nil, err
	}

	aArray := make([]Activity, len(rawMessages))

	for index, rawMessage := range rawMessages {
		a, err := unmarshalActivity(*rawMessage)
		if err != nil {
			return nil, err
		}
		aArray[index] = a
	}
	return aArray, nil
}

// ActivityDependency is activity dependency information.
type ActivityDependency struct {
	Activity             *string                `json:"activity,omitempty"`
	DependencyConditions *[]DependencyCondition `json:"dependencyConditions,omitempty"`
}

// ActivityPolicy is execution policy for an activity.
type ActivityPolicy struct {
	Timeout                *map[string]interface{} `json:"timeout,omitempty"`
	Retry                  *map[string]interface{} `json:"retry,omitempty"`
	RetryIntervalInSeconds *int32                  `json:"retryIntervalInSeconds,omitempty"`
}

// ActivityRun is information about an activity run in a pipeline.
type ActivityRun struct {
	PipelineName      *string                 `json:"pipelineName,omitempty"`
	PipelineRunID     *string                 `json:"pipelineRunId,omitempty"`
	ActivityName      *string                 `json:"activityName,omitempty"`
	ActivityType      *string                 `json:"activityType,omitempty"`
	ActivityRunID     *string                 `json:"activityRunId,omitempty"`
	LinkedServiceName *string                 `json:"linkedServiceName,omitempty"`
	Status            *string                 `json:"status,omitempty"`
	ActivityRunStart  *date.Time              `json:"activityRunStart,omitempty"`
	ActivityRunEnd    *date.Time              `json:"activityRunEnd,omitempty"`
	DurationInMs      *int32                  `json:"durationInMs,omitempty"`
	Input             *map[string]interface{} `json:"input,omitempty"`
	Output            *map[string]interface{} `json:"output,omitempty"`
	Error             *map[string]interface{} `json:"error,omitempty"`
}

// ActivityRunsListResponse is a list activity runs.
type ActivityRunsListResponse struct {
	autorest.Response `json:"-"`
	Value             *[]ActivityRun `json:"value,omitempty"`
	NextLink          *string        `json:"nextLink,omitempty"`
}

// ActivityRunsListResponsePreparer prepares a request to retrieve the next set of results. It returns
// nil if no more results exist.
func (client ActivityRunsListResponse) ActivityRunsListResponsePreparer() (*http.Request, error) {
	if client.NextLink == nil || len(to.String(client.NextLink)) <= 0 {
		return nil, nil
	}
	return autorest.Prepare(&http.Request{},
		autorest.AsJSON(),
		autorest.AsGet(),
		autorest.WithBaseURL(to.String(client.NextLink)))
}

// AmazonRedshiftLinkedService is linked service for Amazon Redshift.
type AmazonRedshiftLinkedService struct {
	ConnectVia                                 *IntegrationRuntimeReference `json:"connectVia,omitempty"`
	Description                                *string                      `json:"description,omitempty"`
	Type                                       TypeLinkedService            `json:"type,omitempty"`
	*AmazonRedshiftLinkedServiceTypeProperties `json:"typeProperties,omitempty"`
}

// MarshalJSON is the custom marshaler for AmazonRedshiftLinkedService.
func (arls AmazonRedshiftLinkedService) MarshalJSON() ([]byte, error) {
	arls.Type = TypeAmazonRedshift
	type Alias AmazonRedshiftLinkedService
	return json.Marshal(&struct {
		Alias
	}{
		Alias: (Alias)(arls),
	})
}

// AsAzureDataLakeAnalyticsLinkedService is the LinkedService implementation for AmazonRedshiftLinkedService.
func (arls AmazonRedshiftLinkedService) AsAzureDataLakeAnalyticsLinkedService() (*AzureDataLakeAnalyticsLinkedService, bool) {
	return nil, false
}

// AsHDInsightOnDemandLinkedService is the LinkedService implementation for AmazonRedshiftLinkedService.
func (arls AmazonRedshiftLinkedService) AsHDInsightOnDemandLinkedService() (*HDInsightOnDemandLinkedService, bool) {
	return nil, false
}

// AsSapHanaLinkedService is the LinkedService implementation for AmazonRedshiftLinkedService.
func (arls AmazonRedshiftLinkedService) AsSapHanaLinkedService() (*SapHanaLinkedService, bool) {
	return nil, false
}

// AsSapBWLinkedService is the LinkedService implementation for AmazonRedshiftLinkedService.
func (arls AmazonRedshiftLinkedService) AsSapBWLinkedService() (*SapBWLinkedService, bool) {
	return nil, false
}

// AsSftpServerLinkedService is the LinkedService implementation for AmazonRedshiftLinkedService.
func (arls AmazonRedshiftLinkedService) AsSftpServerLinkedService() (*SftpServerLinkedService, bool) {
	return nil, false
}

// AsFtpServerLinkedService is the LinkedService implementation for AmazonRedshiftLinkedService.
func (arls AmazonRedshiftLinkedService) AsFtpServerLinkedService() (*FtpServerLinkedService, bool) {
	return nil, false
}

// AsHTTPLinkedService is the LinkedService implementation for AmazonRedshiftLinkedService.
func (arls AmazonRedshiftLinkedService) AsHTTPLinkedService() (*HTTPLinkedService, bool) {
	return nil, false
}

// AsAzureSearchLinkedService is the LinkedService implementation for AmazonRedshiftLinkedService.
func (arls AmazonRedshiftLinkedService) AsAzureSearchLinkedService() (*AzureSearchLinkedService, bool) {
	return nil, false
}

// AsCustomDataSourceLinkedService is the LinkedService implementation for AmazonRedshiftLinkedService.
func (arls AmazonRedshiftLinkedService) AsCustomDataSourceLinkedService() (*CustomDataSourceLinkedService, bool) {
	return nil, false
}

// AsAmazonRedshiftLinkedService is the LinkedService implementation for AmazonRedshiftLinkedService.
func (arls AmazonRedshiftLinkedService) AsAmazonRedshiftLinkedService() (*AmazonRedshiftLinkedService, bool) {
	return &arls, true
}

// AsAmazonS3LinkedService is the LinkedService implementation for AmazonRedshiftLinkedService.
func (arls AmazonRedshiftLinkedService) AsAmazonS3LinkedService() (*AmazonS3LinkedService, bool) {
	return nil, false
}

// AsSalesforceLinkedService is the LinkedService implementation for AmazonRedshiftLinkedService.
func (arls AmazonRedshiftLinkedService) AsSalesforceLinkedService() (*SalesforceLinkedService, bool) {
	return nil, false
}

// AsAzureDataLakeStoreLinkedService is the LinkedService implementation for AmazonRedshiftLinkedService.
func (arls AmazonRedshiftLinkedService) AsAzureDataLakeStoreLinkedService() (*AzureDataLakeStoreLinkedService, bool) {
	return nil, false
}

// AsMongoDbLinkedService is the LinkedService implementation for AmazonRedshiftLinkedService.
func (arls AmazonRedshiftLinkedService) AsMongoDbLinkedService() (*MongoDbLinkedService, bool) {
	return nil, false
}

// AsCassandraLinkedService is the LinkedService implementation for AmazonRedshiftLinkedService.
func (arls AmazonRedshiftLinkedService) AsCassandraLinkedService() (*CassandraLinkedService, bool) {
	return nil, false
}

// AsWebLinkedService is the LinkedService implementation for AmazonRedshiftLinkedService.
func (arls AmazonRedshiftLinkedService) AsWebLinkedService() (*WebLinkedService, bool) {
	return nil, false
}

// AsODataLinkedService is the LinkedService implementation for AmazonRedshiftLinkedService.
func (arls AmazonRedshiftLinkedService) AsODataLinkedService() (*ODataLinkedService, bool) {
	return nil, false
}

// AsHdfsLinkedService is the LinkedService implementation for AmazonRedshiftLinkedService.
func (arls AmazonRedshiftLinkedService) AsHdfsLinkedService() (*HdfsLinkedService, bool) {
	return nil, false
}

// AsOdbcLinkedService is the LinkedService implementation for AmazonRedshiftLinkedService.
func (arls AmazonRedshiftLinkedService) AsOdbcLinkedService() (*OdbcLinkedService, bool) {
	return nil, false
}

// AsAzureMLLinkedService is the LinkedService implementation for AmazonRedshiftLinkedService.
func (arls AmazonRedshiftLinkedService) AsAzureMLLinkedService() (*AzureMLLinkedService, bool) {
	return nil, false
}

// AsTeradataLinkedService is the LinkedService implementation for AmazonRedshiftLinkedService.
func (arls AmazonRedshiftLinkedService) AsTeradataLinkedService() (*TeradataLinkedService, bool) {
	return nil, false
}

// AsDb2LinkedService is the LinkedService implementation for AmazonRedshiftLinkedService.
func (arls AmazonRedshiftLinkedService) AsDb2LinkedService() (*Db2LinkedService, bool) {
	return nil, false
}

// AsSybaseLinkedService is the LinkedService implementation for AmazonRedshiftLinkedService.
func (arls AmazonRedshiftLinkedService) AsSybaseLinkedService() (*SybaseLinkedService, bool) {
	return nil, false
}

// AsPostgreSQLLinkedService is the LinkedService implementation for AmazonRedshiftLinkedService.
func (arls AmazonRedshiftLinkedService) AsPostgreSQLLinkedService() (*PostgreSQLLinkedService, bool) {
	return nil, false
}

// AsMySQLLinkedService is the LinkedService implementation for AmazonRedshiftLinkedService.
func (arls AmazonRedshiftLinkedService) AsMySQLLinkedService() (*MySQLLinkedService, bool) {
	return nil, false
}

// AsOracleLinkedService is the LinkedService implementation for AmazonRedshiftLinkedService.
func (arls AmazonRedshiftLinkedService) AsOracleLinkedService() (*OracleLinkedService, bool) {
	return nil, false
}

// AsFileServerLinkedService is the LinkedService implementation for AmazonRedshiftLinkedService.
func (arls AmazonRedshiftLinkedService) AsFileServerLinkedService() (*FileServerLinkedService, bool) {
	return nil, false
}

// AsHDInsightLinkedService is the LinkedService implementation for AmazonRedshiftLinkedService.
func (arls AmazonRedshiftLinkedService) AsHDInsightLinkedService() (*HDInsightLinkedService, bool) {
	return nil, false
}

// AsDynamicsLinkedService is the LinkedService implementation for AmazonRedshiftLinkedService.
func (arls AmazonRedshiftLinkedService) AsDynamicsLinkedService() (*DynamicsLinkedService, bool) {
	return nil, false
}

// AsCosmosDbLinkedService is the LinkedService implementation for AmazonRedshiftLinkedService.
func (arls AmazonRedshiftLinkedService) AsCosmosDbLinkedService() (*CosmosDbLinkedService, bool) {
	return nil, false
}

// AsAzureKeyVaultLinkedService is the LinkedService implementation for AmazonRedshiftLinkedService.
func (arls AmazonRedshiftLinkedService) AsAzureKeyVaultLinkedService() (*AzureKeyVaultLinkedService, bool) {
	return nil, false
}

// AsAzureBatchLinkedService is the LinkedService implementation for AmazonRedshiftLinkedService.
func (arls AmazonRedshiftLinkedService) AsAzureBatchLinkedService() (*AzureBatchLinkedService, bool) {
	return nil, false
}

// AsAzureSQLDatabaseLinkedService is the LinkedService implementation for AmazonRedshiftLinkedService.
func (arls AmazonRedshiftLinkedService) AsAzureSQLDatabaseLinkedService() (*AzureSQLDatabaseLinkedService, bool) {
	return nil, false
}

// AsSQLServerLinkedService is the LinkedService implementation for AmazonRedshiftLinkedService.
func (arls AmazonRedshiftLinkedService) AsSQLServerLinkedService() (*SQLServerLinkedService, bool) {
	return nil, false
}

// AsAzureSQLDWLinkedService is the LinkedService implementation for AmazonRedshiftLinkedService.
func (arls AmazonRedshiftLinkedService) AsAzureSQLDWLinkedService() (*AzureSQLDWLinkedService, bool) {
	return nil, false
}

// AsAzureStorageLinkedService is the LinkedService implementation for AmazonRedshiftLinkedService.
func (arls AmazonRedshiftLinkedService) AsAzureStorageLinkedService() (*AzureStorageLinkedService, bool) {
	return nil, false
}

// AmazonRedshiftLinkedServiceTypeProperties is amazon Redshift linked service properties.
type AmazonRedshiftLinkedServiceTypeProperties struct {
	Server              *map[string]interface{} `json:"server,omitempty"`
	Username            *map[string]interface{} `json:"username,omitempty"`
	Password            *SecureString           `json:"password,omitempty"`
	Database            *map[string]interface{} `json:"database,omitempty"`
	Port                *map[string]interface{} `json:"port,omitempty"`
	EncryptedCredential *map[string]interface{} `json:"encryptedCredential,omitempty"`
}

// AmazonRedshiftSource is a copy activity source for Amazon Redshift Source.
type AmazonRedshiftSource struct {
	SourceRetryCount       *map[string]interface{} `json:"sourceRetryCount,omitempty"`
	SourceRetryWait        *map[string]interface{} `json:"sourceRetryWait,omitempty"`
	Type                   TypeCopySource          `json:"type,omitempty"`
	Query                  *map[string]interface{} `json:"query,omitempty"`
	RedshiftUnloadSettings *RedshiftUnloadSettings `json:"redshiftUnloadSettings,omitempty"`
}

// MarshalJSON is the custom marshaler for AmazonRedshiftSource.
func (ars AmazonRedshiftSource) MarshalJSON() ([]byte, error) {
	ars.Type = TypeAmazonRedshiftSource
	type Alias AmazonRedshiftSource
	return json.Marshal(&struct {
		Alias
	}{
		Alias: (Alias)(ars),
	})
}

// AsAmazonRedshiftSource is the CopySource implementation for AmazonRedshiftSource.
func (ars AmazonRedshiftSource) AsAmazonRedshiftSource() (*AmazonRedshiftSource, bool) {
	return &ars, true
}

// AsHTTPSource is the CopySource implementation for AmazonRedshiftSource.
func (ars AmazonRedshiftSource) AsHTTPSource() (*HTTPSource, bool) {
	return nil, false
}

// AsAzureDataLakeStoreSource is the CopySource implementation for AmazonRedshiftSource.
func (ars AmazonRedshiftSource) AsAzureDataLakeStoreSource() (*AzureDataLakeStoreSource, bool) {
	return nil, false
}

// AsMongoDbSource is the CopySource implementation for AmazonRedshiftSource.
func (ars AmazonRedshiftSource) AsMongoDbSource() (*MongoDbSource, bool) {
	return nil, false
}

// AsCassandraSource is the CopySource implementation for AmazonRedshiftSource.
func (ars AmazonRedshiftSource) AsCassandraSource() (*CassandraSource, bool) {
	return nil, false
}

// AsWebSource is the CopySource implementation for AmazonRedshiftSource.
func (ars AmazonRedshiftSource) AsWebSource() (*WebSource, bool) {
	return nil, false
}

// AsOracleSource is the CopySource implementation for AmazonRedshiftSource.
func (ars AmazonRedshiftSource) AsOracleSource() (*OracleSource, bool) {
	return nil, false
}

// AsHdfsSource is the CopySource implementation for AmazonRedshiftSource.
func (ars AmazonRedshiftSource) AsHdfsSource() (*HdfsSource, bool) {
	return nil, false
}

// AsFileSystemSource is the CopySource implementation for AmazonRedshiftSource.
func (ars AmazonRedshiftSource) AsFileSystemSource() (*FileSystemSource, bool) {
	return nil, false
}

// AsSQLDWSource is the CopySource implementation for AmazonRedshiftSource.
func (ars AmazonRedshiftSource) AsSQLDWSource() (*SQLDWSource, bool) {
	return nil, false
}

// AsSQLSource is the CopySource implementation for AmazonRedshiftSource.
func (ars AmazonRedshiftSource) AsSQLSource() (*SQLSource, bool) {
	return nil, false
}

// AsRelationalSource is the CopySource implementation for AmazonRedshiftSource.
func (ars AmazonRedshiftSource) AsRelationalSource() (*RelationalSource, bool) {
	return nil, false
}

// AsDynamicsSource is the CopySource implementation for AmazonRedshiftSource.
func (ars AmazonRedshiftSource) AsDynamicsSource() (*DynamicsSource, bool) {
	return nil, false
}

// AsDocumentDbCollectionSource is the CopySource implementation for AmazonRedshiftSource.
func (ars AmazonRedshiftSource) AsDocumentDbCollectionSource() (*DocumentDbCollectionSource, bool) {
	return nil, false
}

// AsBlobSource is the CopySource implementation for AmazonRedshiftSource.
func (ars AmazonRedshiftSource) AsBlobSource() (*BlobSource, bool) {
	return nil, false
}

// AsAzureTableSource is the CopySource implementation for AmazonRedshiftSource.
func (ars AmazonRedshiftSource) AsAzureTableSource() (*AzureTableSource, bool) {
	return nil, false
}

// AmazonS3Dataset is a single Amazon Simple Storage Service (S3) object or a set of S3 objects.
type AmazonS3Dataset struct {
	Description                    *string                             `json:"description,omitempty"`
	Structure                      *map[string]interface{}             `json:"structure,omitempty"`
	LinkedServiceName              *LinkedServiceReference             `json:"linkedServiceName,omitempty"`
	Parameters                     *map[string]*ParameterSpecification `json:"parameters,omitempty"`
	Type                           TypeDataset                         `json:"type,omitempty"`
	*AmazonS3DatasetTypeProperties `json:"typeProperties,omitempty"`
}

// MarshalJSON is the custom marshaler for AmazonS3Dataset.
func (asd AmazonS3Dataset) MarshalJSON() ([]byte, error) {
	asd.Type = TypeAmazonS3Object
	type Alias AmazonS3Dataset
	return json.Marshal(&struct {
		Alias
	}{
		Alias: (Alias)(asd),
	})
}

// AsHTTPDataset is the Dataset implementation for AmazonS3Dataset.
func (asd AmazonS3Dataset) AsHTTPDataset() (*HTTPDataset, bool) {
	return nil, false
}

// AsAzureSearchIndexDataset is the Dataset implementation for AmazonS3Dataset.
func (asd AmazonS3Dataset) AsAzureSearchIndexDataset() (*AzureSearchIndexDataset, bool) {
	return nil, false
}

// AsWebTableDataset is the Dataset implementation for AmazonS3Dataset.
func (asd AmazonS3Dataset) AsWebTableDataset() (*WebTableDataset, bool) {
	return nil, false
}

// AsSQLServerTableDataset is the Dataset implementation for AmazonS3Dataset.
func (asd AmazonS3Dataset) AsSQLServerTableDataset() (*SQLServerTableDataset, bool) {
	return nil, false
}

// AsRelationalTableDataset is the Dataset implementation for AmazonS3Dataset.
func (asd AmazonS3Dataset) AsRelationalTableDataset() (*RelationalTableDataset, bool) {
	return nil, false
}

// AsOracleTableDataset is the Dataset implementation for AmazonS3Dataset.
func (asd AmazonS3Dataset) AsOracleTableDataset() (*OracleTableDataset, bool) {
	return nil, false
}

// AsODataResourceDataset is the Dataset implementation for AmazonS3Dataset.
func (asd AmazonS3Dataset) AsODataResourceDataset() (*ODataResourceDataset, bool) {
	return nil, false
}

// AsMongoDbCollectionDataset is the Dataset implementation for AmazonS3Dataset.
func (asd AmazonS3Dataset) AsMongoDbCollectionDataset() (*MongoDbCollectionDataset, bool) {
	return nil, false
}

// AsFileShareDataset is the Dataset implementation for AmazonS3Dataset.
func (asd AmazonS3Dataset) AsFileShareDataset() (*FileShareDataset, bool) {
	return nil, false
}

// AsAzureDataLakeStoreDataset is the Dataset implementation for AmazonS3Dataset.
func (asd AmazonS3Dataset) AsAzureDataLakeStoreDataset() (*AzureDataLakeStoreDataset, bool) {
	return nil, false
}

// AsDynamicsEntityDataset is the Dataset implementation for AmazonS3Dataset.
func (asd AmazonS3Dataset) AsDynamicsEntityDataset() (*DynamicsEntityDataset, bool) {
	return nil, false
}

// AsDocumentDbCollectionDataset is the Dataset implementation for AmazonS3Dataset.
func (asd AmazonS3Dataset) AsDocumentDbCollectionDataset() (*DocumentDbCollectionDataset, bool) {
	return nil, false
}

// AsCustomDataset is the Dataset implementation for AmazonS3Dataset.
func (asd AmazonS3Dataset) AsCustomDataset() (*CustomDataset, bool) {
	return nil, false
}

// AsCassandraTableDataset is the Dataset implementation for AmazonS3Dataset.
func (asd AmazonS3Dataset) AsCassandraTableDataset() (*CassandraTableDataset, bool) {
	return nil, false
}

// AsAzureSQLDWTableDataset is the Dataset implementation for AmazonS3Dataset.
func (asd AmazonS3Dataset) AsAzureSQLDWTableDataset() (*AzureSQLDWTableDataset, bool) {
	return nil, false
}

// AsAzureSQLTableDataset is the Dataset implementation for AmazonS3Dataset.
func (asd AmazonS3Dataset) AsAzureSQLTableDataset() (*AzureSQLTableDataset, bool) {
	return nil, false
}

// AsAzureTableDataset is the Dataset implementation for AmazonS3Dataset.
func (asd AmazonS3Dataset) AsAzureTableDataset() (*AzureTableDataset, bool) {
	return nil, false
}

// AsAzureBlobDataset is the Dataset implementation for AmazonS3Dataset.
func (asd AmazonS3Dataset) AsAzureBlobDataset() (*AzureBlobDataset, bool) {
	return nil, false
}

// AsAmazonS3Dataset is the Dataset implementation for AmazonS3Dataset.
func (asd AmazonS3Dataset) AsAmazonS3Dataset() (*AmazonS3Dataset, bool) {
	return &asd, true
}

// AmazonS3DatasetTypeProperties is amazon S3 dataset properties.
type AmazonS3DatasetTypeProperties struct {
	BucketName  *map[string]interface{} `json:"bucketName,omitempty"`
	Key         *map[string]interface{} `json:"key,omitempty"`
	Prefix      *map[string]interface{} `json:"prefix,omitempty"`
	Version     *map[string]interface{} `json:"version,omitempty"`
	Format      DatasetStorageFormat    `json:"format,omitempty"`
	Compression DatasetCompression      `json:"compression,omitempty"`
}

// UnmarshalJSON is the custom unmarshaler for AmazonS3DatasetTypeProperties struct.
func (asdtp *AmazonS3DatasetTypeProperties) UnmarshalJSON(body []byte) error {
	var m map[string]*json.RawMessage
	err := json.Unmarshal(body, &m)
	if err != nil {
		return err
	}
	var v *json.RawMessage

	v = m["bucketName"]
	if v != nil {
		var bucketName map[string]interface{}
		err = json.Unmarshal(*m["bucketName"], &bucketName)
		if err != nil {
			return err
		}
		asdtp.BucketName = &bucketName
	}

	v = m["key"]
	if v != nil {
		var key map[string]interface{}
		err = json.Unmarshal(*m["key"], &key)
		if err != nil {
			return err
		}
		asdtp.Key = &key
	}

	v = m["prefix"]
	if v != nil {
		var prefix map[string]interface{}
		err = json.Unmarshal(*m["prefix"], &prefix)
		if err != nil {
			return err
		}
		asdtp.Prefix = &prefix
	}

	v = m["version"]
	if v != nil {
		var version map[string]interface{}
		err = json.Unmarshal(*m["version"], &version)
		if err != nil {
			return err
		}
		asdtp.Version = &version
	}

	v = m["format"]
	if v != nil {
		formatVar, err := unmarshalDatasetStorageFormat(*m["format"])
		if err != nil {
			return err
		}
		asdtp.Format = formatVar
	}

	v = m["compression"]
	if v != nil {
		compression, err := unmarshalDatasetCompression(*m["compression"])
		if err != nil {
			return err
		}
		asdtp.Compression = compression
	}

	return nil
}

// AmazonS3LinkedService is linked service for Amazon S3.
type AmazonS3LinkedService struct {
	ConnectVia                           *IntegrationRuntimeReference `json:"connectVia,omitempty"`
	Description                          *string                      `json:"description,omitempty"`
	Type                                 TypeLinkedService            `json:"type,omitempty"`
	*AmazonS3LinkedServiceTypeProperties `json:"typeProperties,omitempty"`
}

// MarshalJSON is the custom marshaler for AmazonS3LinkedService.
func (asls AmazonS3LinkedService) MarshalJSON() ([]byte, error) {
	asls.Type = TypeAmazonS3
	type Alias AmazonS3LinkedService
	return json.Marshal(&struct {
		Alias
	}{
		Alias: (Alias)(asls),
	})
}

// AsAzureDataLakeAnalyticsLinkedService is the LinkedService implementation for AmazonS3LinkedService.
func (asls AmazonS3LinkedService) AsAzureDataLakeAnalyticsLinkedService() (*AzureDataLakeAnalyticsLinkedService, bool) {
	return nil, false
}

// AsHDInsightOnDemandLinkedService is the LinkedService implementation for AmazonS3LinkedService.
func (asls AmazonS3LinkedService) AsHDInsightOnDemandLinkedService() (*HDInsightOnDemandLinkedService, bool) {
	return nil, false
}

// AsSapHanaLinkedService is the LinkedService implementation for AmazonS3LinkedService.
func (asls AmazonS3LinkedService) AsSapHanaLinkedService() (*SapHanaLinkedService, bool) {
	return nil, false
}

// AsSapBWLinkedService is the LinkedService implementation for AmazonS3LinkedService.
func (asls AmazonS3LinkedService) AsSapBWLinkedService() (*SapBWLinkedService, bool) {
	return nil, false
}

// AsSftpServerLinkedService is the LinkedService implementation for AmazonS3LinkedService.
func (asls AmazonS3LinkedService) AsSftpServerLinkedService() (*SftpServerLinkedService, bool) {
	return nil, false
}

// AsFtpServerLinkedService is the LinkedService implementation for AmazonS3LinkedService.
func (asls AmazonS3LinkedService) AsFtpServerLinkedService() (*FtpServerLinkedService, bool) {
	return nil, false
}

// AsHTTPLinkedService is the LinkedService implementation for AmazonS3LinkedService.
func (asls AmazonS3LinkedService) AsHTTPLinkedService() (*HTTPLinkedService, bool) {
	return nil, false
}

// AsAzureSearchLinkedService is the LinkedService implementation for AmazonS3LinkedService.
func (asls AmazonS3LinkedService) AsAzureSearchLinkedService() (*AzureSearchLinkedService, bool) {
	return nil, false
}

// AsCustomDataSourceLinkedService is the LinkedService implementation for AmazonS3LinkedService.
func (asls AmazonS3LinkedService) AsCustomDataSourceLinkedService() (*CustomDataSourceLinkedService, bool) {
	return nil, false
}

// AsAmazonRedshiftLinkedService is the LinkedService implementation for AmazonS3LinkedService.
func (asls AmazonS3LinkedService) AsAmazonRedshiftLinkedService() (*AmazonRedshiftLinkedService, bool) {
	return nil, false
}

// AsAmazonS3LinkedService is the LinkedService implementation for AmazonS3LinkedService.
func (asls AmazonS3LinkedService) AsAmazonS3LinkedService() (*AmazonS3LinkedService, bool) {
	return &asls, true
}

// AsSalesforceLinkedService is the LinkedService implementation for AmazonS3LinkedService.
func (asls AmazonS3LinkedService) AsSalesforceLinkedService() (*SalesforceLinkedService, bool) {
	return nil, false
}

// AsAzureDataLakeStoreLinkedService is the LinkedService implementation for AmazonS3LinkedService.
func (asls AmazonS3LinkedService) AsAzureDataLakeStoreLinkedService() (*AzureDataLakeStoreLinkedService, bool) {
	return nil, false
}

// AsMongoDbLinkedService is the LinkedService implementation for AmazonS3LinkedService.
func (asls AmazonS3LinkedService) AsMongoDbLinkedService() (*MongoDbLinkedService, bool) {
	return nil, false
}

// AsCassandraLinkedService is the LinkedService implementation for AmazonS3LinkedService.
func (asls AmazonS3LinkedService) AsCassandraLinkedService() (*CassandraLinkedService, bool) {
	return nil, false
}

// AsWebLinkedService is the LinkedService implementation for AmazonS3LinkedService.
func (asls AmazonS3LinkedService) AsWebLinkedService() (*WebLinkedService, bool) {
	return nil, false
}

// AsODataLinkedService is the LinkedService implementation for AmazonS3LinkedService.
func (asls AmazonS3LinkedService) AsODataLinkedService() (*ODataLinkedService, bool) {
	return nil, false
}

// AsHdfsLinkedService is the LinkedService implementation for AmazonS3LinkedService.
func (asls AmazonS3LinkedService) AsHdfsLinkedService() (*HdfsLinkedService, bool) {
	return nil, false
}

// AsOdbcLinkedService is the LinkedService implementation for AmazonS3LinkedService.
func (asls AmazonS3LinkedService) AsOdbcLinkedService() (*OdbcLinkedService, bool) {
	return nil, false
}

// AsAzureMLLinkedService is the LinkedService implementation for AmazonS3LinkedService.
func (asls AmazonS3LinkedService) AsAzureMLLinkedService() (*AzureMLLinkedService, bool) {
	return nil, false
}

// AsTeradataLinkedService is the LinkedService implementation for AmazonS3LinkedService.
func (asls AmazonS3LinkedService) AsTeradataLinkedService() (*TeradataLinkedService, bool) {
	return nil, false
}

// AsDb2LinkedService is the LinkedService implementation for AmazonS3LinkedService.
func (asls AmazonS3LinkedService) AsDb2LinkedService() (*Db2LinkedService, bool) {
	return nil, false
}

// AsSybaseLinkedService is the LinkedService implementation for AmazonS3LinkedService.
func (asls AmazonS3LinkedService) AsSybaseLinkedService() (*SybaseLinkedService, bool) {
	return nil, false
}

// AsPostgreSQLLinkedService is the LinkedService implementation for AmazonS3LinkedService.
func (asls AmazonS3LinkedService) AsPostgreSQLLinkedService() (*PostgreSQLLinkedService, bool) {
	return nil, false
}

// AsMySQLLinkedService is the LinkedService implementation for AmazonS3LinkedService.
func (asls AmazonS3LinkedService) AsMySQLLinkedService() (*MySQLLinkedService, bool) {
	return nil, false
}

// AsOracleLinkedService is the LinkedService implementation for AmazonS3LinkedService.
func (asls AmazonS3LinkedService) AsOracleLinkedService() (*OracleLinkedService, bool) {
	return nil, false
}

// AsFileServerLinkedService is the LinkedService implementation for AmazonS3LinkedService.
func (asls AmazonS3LinkedService) AsFileServerLinkedService() (*FileServerLinkedService, bool) {
	return nil, false
}

// AsHDInsightLinkedService is the LinkedService implementation for AmazonS3LinkedService.
func (asls AmazonS3LinkedService) AsHDInsightLinkedService() (*HDInsightLinkedService, bool) {
	return nil, false
}

// AsDynamicsLinkedService is the LinkedService implementation for AmazonS3LinkedService.
func (asls AmazonS3LinkedService) AsDynamicsLinkedService() (*DynamicsLinkedService, bool) {
	return nil, false
}

// AsCosmosDbLinkedService is the LinkedService implementation for AmazonS3LinkedService.
func (asls AmazonS3LinkedService) AsCosmosDbLinkedService() (*CosmosDbLinkedService, bool) {
	return nil, false
}

// AsAzureKeyVaultLinkedService is the LinkedService implementation for AmazonS3LinkedService.
func (asls AmazonS3LinkedService) AsAzureKeyVaultLinkedService() (*AzureKeyVaultLinkedService, bool) {
	return nil, false
}

// AsAzureBatchLinkedService is the LinkedService implementation for AmazonS3LinkedService.
func (asls AmazonS3LinkedService) AsAzureBatchLinkedService() (*AzureBatchLinkedService, bool) {
	return nil, false
}

// AsAzureSQLDatabaseLinkedService is the LinkedService implementation for AmazonS3LinkedService.
func (asls AmazonS3LinkedService) AsAzureSQLDatabaseLinkedService() (*AzureSQLDatabaseLinkedService, bool) {
	return nil, false
}

// AsSQLServerLinkedService is the LinkedService implementation for AmazonS3LinkedService.
func (asls AmazonS3LinkedService) AsSQLServerLinkedService() (*SQLServerLinkedService, bool) {
	return nil, false
}

// AsAzureSQLDWLinkedService is the LinkedService implementation for AmazonS3LinkedService.
func (asls AmazonS3LinkedService) AsAzureSQLDWLinkedService() (*AzureSQLDWLinkedService, bool) {
	return nil, false
}

// AsAzureStorageLinkedService is the LinkedService implementation for AmazonS3LinkedService.
func (asls AmazonS3LinkedService) AsAzureStorageLinkedService() (*AzureStorageLinkedService, bool) {
	return nil, false
}

// AmazonS3LinkedServiceTypeProperties is amazon S3 linked service properties.
type AmazonS3LinkedServiceTypeProperties struct {
	AccessKeyID         *map[string]interface{} `json:"accessKeyId,omitempty"`
	SecretAccessKey     *SecureString           `json:"secretAccessKey,omitempty"`
	EncryptedCredential *map[string]interface{} `json:"encryptedCredential,omitempty"`
}

// AvroFormat is the data stored in Avro format.
type AvroFormat struct {
	Serializer   *map[string]interface{}  `json:"serializer,omitempty"`
	Deserializer *map[string]interface{}  `json:"deserializer,omitempty"`
	Type         TypeDatasetStorageFormat `json:"type,omitempty"`
}

// MarshalJSON is the custom marshaler for AvroFormat.
func (af AvroFormat) MarshalJSON() ([]byte, error) {
	af.Type = TypeAvroFormat
	type Alias AvroFormat
	return json.Marshal(&struct {
		Alias
	}{
		Alias: (Alias)(af),
	})
}

// AsParquetFormat is the DatasetStorageFormat implementation for AvroFormat.
func (af AvroFormat) AsParquetFormat() (*ParquetFormat, bool) {
	return nil, false
}

// AsOrcFormat is the DatasetStorageFormat implementation for AvroFormat.
func (af AvroFormat) AsOrcFormat() (*OrcFormat, bool) {
	return nil, false
}

// AsAvroFormat is the DatasetStorageFormat implementation for AvroFormat.
func (af AvroFormat) AsAvroFormat() (*AvroFormat, bool) {
	return &af, true
}

// AsJSONFormat is the DatasetStorageFormat implementation for AvroFormat.
func (af AvroFormat) AsJSONFormat() (*JSONFormat, bool) {
	return nil, false
}

// AsTextFormat is the DatasetStorageFormat implementation for AvroFormat.
func (af AvroFormat) AsTextFormat() (*TextFormat, bool) {
	return nil, false
}

// AzureBatchLinkedService is azure Batch linked service.
type AzureBatchLinkedService struct {
	ConnectVia                             *IntegrationRuntimeReference `json:"connectVia,omitempty"`
	Description                            *string                      `json:"description,omitempty"`
	Type                                   TypeLinkedService            `json:"type,omitempty"`
	*AzureBatchLinkedServiceTypeProperties `json:"typeProperties,omitempty"`
}

// MarshalJSON is the custom marshaler for AzureBatchLinkedService.
func (abls AzureBatchLinkedService) MarshalJSON() ([]byte, error) {
	abls.Type = TypeAzureBatch
	type Alias AzureBatchLinkedService
	return json.Marshal(&struct {
		Alias
	}{
		Alias: (Alias)(abls),
	})
}

// AsAzureDataLakeAnalyticsLinkedService is the LinkedService implementation for AzureBatchLinkedService.
func (abls AzureBatchLinkedService) AsAzureDataLakeAnalyticsLinkedService() (*AzureDataLakeAnalyticsLinkedService, bool) {
	return nil, false
}

// AsHDInsightOnDemandLinkedService is the LinkedService implementation for AzureBatchLinkedService.
func (abls AzureBatchLinkedService) AsHDInsightOnDemandLinkedService() (*HDInsightOnDemandLinkedService, bool) {
	return nil, false
}

// AsSapHanaLinkedService is the LinkedService implementation for AzureBatchLinkedService.
func (abls AzureBatchLinkedService) AsSapHanaLinkedService() (*SapHanaLinkedService, bool) {
	return nil, false
}

// AsSapBWLinkedService is the LinkedService implementation for AzureBatchLinkedService.
func (abls AzureBatchLinkedService) AsSapBWLinkedService() (*SapBWLinkedService, bool) {
	return nil, false
}

// AsSftpServerLinkedService is the LinkedService implementation for AzureBatchLinkedService.
func (abls AzureBatchLinkedService) AsSftpServerLinkedService() (*SftpServerLinkedService, bool) {
	return nil, false
}

// AsFtpServerLinkedService is the LinkedService implementation for AzureBatchLinkedService.
func (abls AzureBatchLinkedService) AsFtpServerLinkedService() (*FtpServerLinkedService, bool) {
	return nil, false
}

// AsHTTPLinkedService is the LinkedService implementation for AzureBatchLinkedService.
func (abls AzureBatchLinkedService) AsHTTPLinkedService() (*HTTPLinkedService, bool) {
	return nil, false
}

// AsAzureSearchLinkedService is the LinkedService implementation for AzureBatchLinkedService.
func (abls AzureBatchLinkedService) AsAzureSearchLinkedService() (*AzureSearchLinkedService, bool) {
	return nil, false
}

// AsCustomDataSourceLinkedService is the LinkedService implementation for AzureBatchLinkedService.
func (abls AzureBatchLinkedService) AsCustomDataSourceLinkedService() (*CustomDataSourceLinkedService, bool) {
	return nil, false
}

// AsAmazonRedshiftLinkedService is the LinkedService implementation for AzureBatchLinkedService.
func (abls AzureBatchLinkedService) AsAmazonRedshiftLinkedService() (*AmazonRedshiftLinkedService, bool) {
	return nil, false
}

// AsAmazonS3LinkedService is the LinkedService implementation for AzureBatchLinkedService.
func (abls AzureBatchLinkedService) AsAmazonS3LinkedService() (*AmazonS3LinkedService, bool) {
	return nil, false
}

// AsSalesforceLinkedService is the LinkedService implementation for AzureBatchLinkedService.
func (abls AzureBatchLinkedService) AsSalesforceLinkedService() (*SalesforceLinkedService, bool) {
	return nil, false
}

// AsAzureDataLakeStoreLinkedService is the LinkedService implementation for AzureBatchLinkedService.
func (abls AzureBatchLinkedService) AsAzureDataLakeStoreLinkedService() (*AzureDataLakeStoreLinkedService, bool) {
	return nil, false
}

// AsMongoDbLinkedService is the LinkedService implementation for AzureBatchLinkedService.
func (abls AzureBatchLinkedService) AsMongoDbLinkedService() (*MongoDbLinkedService, bool) {
	return nil, false
}

// AsCassandraLinkedService is the LinkedService implementation for AzureBatchLinkedService.
func (abls AzureBatchLinkedService) AsCassandraLinkedService() (*CassandraLinkedService, bool) {
	return nil, false
}

// AsWebLinkedService is the LinkedService implementation for AzureBatchLinkedService.
func (abls AzureBatchLinkedService) AsWebLinkedService() (*WebLinkedService, bool) {
	return nil, false
}

// AsODataLinkedService is the LinkedService implementation for AzureBatchLinkedService.
func (abls AzureBatchLinkedService) AsODataLinkedService() (*ODataLinkedService, bool) {
	return nil, false
}

// AsHdfsLinkedService is the LinkedService implementation for AzureBatchLinkedService.
func (abls AzureBatchLinkedService) AsHdfsLinkedService() (*HdfsLinkedService, bool) {
	return nil, false
}

// AsOdbcLinkedService is the LinkedService implementation for AzureBatchLinkedService.
func (abls AzureBatchLinkedService) AsOdbcLinkedService() (*OdbcLinkedService, bool) {
	return nil, false
}

// AsAzureMLLinkedService is the LinkedService implementation for AzureBatchLinkedService.
func (abls AzureBatchLinkedService) AsAzureMLLinkedService() (*AzureMLLinkedService, bool) {
	return nil, false
}

// AsTeradataLinkedService is the LinkedService implementation for AzureBatchLinkedService.
func (abls AzureBatchLinkedService) AsTeradataLinkedService() (*TeradataLinkedService, bool) {
	return nil, false
}

// AsDb2LinkedService is the LinkedService implementation for AzureBatchLinkedService.
func (abls AzureBatchLinkedService) AsDb2LinkedService() (*Db2LinkedService, bool) {
	return nil, false
}

// AsSybaseLinkedService is the LinkedService implementation for AzureBatchLinkedService.
func (abls AzureBatchLinkedService) AsSybaseLinkedService() (*SybaseLinkedService, bool) {
	return nil, false
}

// AsPostgreSQLLinkedService is the LinkedService implementation for AzureBatchLinkedService.
func (abls AzureBatchLinkedService) AsPostgreSQLLinkedService() (*PostgreSQLLinkedService, bool) {
	return nil, false
}

// AsMySQLLinkedService is the LinkedService implementation for AzureBatchLinkedService.
func (abls AzureBatchLinkedService) AsMySQLLinkedService() (*MySQLLinkedService, bool) {
	return nil, false
}

// AsOracleLinkedService is the LinkedService implementation for AzureBatchLinkedService.
func (abls AzureBatchLinkedService) AsOracleLinkedService() (*OracleLinkedService, bool) {
	return nil, false
}

// AsFileServerLinkedService is the LinkedService implementation for AzureBatchLinkedService.
func (abls AzureBatchLinkedService) AsFileServerLinkedService() (*FileServerLinkedService, bool) {
	return nil, false
}

// AsHDInsightLinkedService is the LinkedService implementation for AzureBatchLinkedService.
func (abls AzureBatchLinkedService) AsHDInsightLinkedService() (*HDInsightLinkedService, bool) {
	return nil, false
}

// AsDynamicsLinkedService is the LinkedService implementation for AzureBatchLinkedService.
func (abls AzureBatchLinkedService) AsDynamicsLinkedService() (*DynamicsLinkedService, bool) {
	return nil, false
}

// AsCosmosDbLinkedService is the LinkedService implementation for AzureBatchLinkedService.
func (abls AzureBatchLinkedService) AsCosmosDbLinkedService() (*CosmosDbLinkedService, bool) {
	return nil, false
}

// AsAzureKeyVaultLinkedService is the LinkedService implementation for AzureBatchLinkedService.
func (abls AzureBatchLinkedService) AsAzureKeyVaultLinkedService() (*AzureKeyVaultLinkedService, bool) {
	return nil, false
}

// AsAzureBatchLinkedService is the LinkedService implementation for AzureBatchLinkedService.
func (abls AzureBatchLinkedService) AsAzureBatchLinkedService() (*AzureBatchLinkedService, bool) {
	return &abls, true
}

// AsAzureSQLDatabaseLinkedService is the LinkedService implementation for AzureBatchLinkedService.
func (abls AzureBatchLinkedService) AsAzureSQLDatabaseLinkedService() (*AzureSQLDatabaseLinkedService, bool) {
	return nil, false
}

// AsSQLServerLinkedService is the LinkedService implementation for AzureBatchLinkedService.
func (abls AzureBatchLinkedService) AsSQLServerLinkedService() (*SQLServerLinkedService, bool) {
	return nil, false
}

// AsAzureSQLDWLinkedService is the LinkedService implementation for AzureBatchLinkedService.
func (abls AzureBatchLinkedService) AsAzureSQLDWLinkedService() (*AzureSQLDWLinkedService, bool) {
	return nil, false
}

// AsAzureStorageLinkedService is the LinkedService implementation for AzureBatchLinkedService.
func (abls AzureBatchLinkedService) AsAzureStorageLinkedService() (*AzureStorageLinkedService, bool) {
	return nil, false
}

// AzureBatchLinkedServiceTypeProperties is azure Batch linked service properties.
type AzureBatchLinkedServiceTypeProperties struct {
	AccountName         *map[string]interface{} `json:"accountName,omitempty"`
	AccessKey           *SecureString           `json:"accessKey,omitempty"`
	BatchURI            *map[string]interface{} `json:"batchUri,omitempty"`
	PoolName            *map[string]interface{} `json:"poolName,omitempty"`
	LinkedServiceName   *LinkedServiceReference `json:"linkedServiceName,omitempty"`
	EncryptedCredential *map[string]interface{} `json:"encryptedCredential,omitempty"`
}

// AzureBlobDataset is the Azure Blob storage.
type AzureBlobDataset struct {
	Description                     *string                             `json:"description,omitempty"`
	Structure                       *map[string]interface{}             `json:"structure,omitempty"`
	LinkedServiceName               *LinkedServiceReference             `json:"linkedServiceName,omitempty"`
	Parameters                      *map[string]*ParameterSpecification `json:"parameters,omitempty"`
	Type                            TypeDataset                         `json:"type,omitempty"`
	*AzureBlobDatasetTypeProperties `json:"typeProperties,omitempty"`
}

// MarshalJSON is the custom marshaler for AzureBlobDataset.
func (abd AzureBlobDataset) MarshalJSON() ([]byte, error) {
	abd.Type = TypeAzureBlob
	type Alias AzureBlobDataset
	return json.Marshal(&struct {
		Alias
	}{
		Alias: (Alias)(abd),
	})
}

// AsHTTPDataset is the Dataset implementation for AzureBlobDataset.
func (abd AzureBlobDataset) AsHTTPDataset() (*HTTPDataset, bool) {
	return nil, false
}

// AsAzureSearchIndexDataset is the Dataset implementation for AzureBlobDataset.
func (abd AzureBlobDataset) AsAzureSearchIndexDataset() (*AzureSearchIndexDataset, bool) {
	return nil, false
}

// AsWebTableDataset is the Dataset implementation for AzureBlobDataset.
func (abd AzureBlobDataset) AsWebTableDataset() (*WebTableDataset, bool) {
	return nil, false
}

// AsSQLServerTableDataset is the Dataset implementation for AzureBlobDataset.
func (abd AzureBlobDataset) AsSQLServerTableDataset() (*SQLServerTableDataset, bool) {
	return nil, false
}

// AsRelationalTableDataset is the Dataset implementation for AzureBlobDataset.
func (abd AzureBlobDataset) AsRelationalTableDataset() (*RelationalTableDataset, bool) {
	return nil, false
}

// AsOracleTableDataset is the Dataset implementation for AzureBlobDataset.
func (abd AzureBlobDataset) AsOracleTableDataset() (*OracleTableDataset, bool) {
	return nil, false
}

// AsODataResourceDataset is the Dataset implementation for AzureBlobDataset.
func (abd AzureBlobDataset) AsODataResourceDataset() (*ODataResourceDataset, bool) {
	return nil, false
}

// AsMongoDbCollectionDataset is the Dataset implementation for AzureBlobDataset.
func (abd AzureBlobDataset) AsMongoDbCollectionDataset() (*MongoDbCollectionDataset, bool) {
	return nil, false
}

// AsFileShareDataset is the Dataset implementation for AzureBlobDataset.
func (abd AzureBlobDataset) AsFileShareDataset() (*FileShareDataset, bool) {
	return nil, false
}

// AsAzureDataLakeStoreDataset is the Dataset implementation for AzureBlobDataset.
func (abd AzureBlobDataset) AsAzureDataLakeStoreDataset() (*AzureDataLakeStoreDataset, bool) {
	return nil, false
}

// AsDynamicsEntityDataset is the Dataset implementation for AzureBlobDataset.
func (abd AzureBlobDataset) AsDynamicsEntityDataset() (*DynamicsEntityDataset, bool) {
	return nil, false
}

// AsDocumentDbCollectionDataset is the Dataset implementation for AzureBlobDataset.
func (abd AzureBlobDataset) AsDocumentDbCollectionDataset() (*DocumentDbCollectionDataset, bool) {
	return nil, false
}

// AsCustomDataset is the Dataset implementation for AzureBlobDataset.
func (abd AzureBlobDataset) AsCustomDataset() (*CustomDataset, bool) {
	return nil, false
}

// AsCassandraTableDataset is the Dataset implementation for AzureBlobDataset.
func (abd AzureBlobDataset) AsCassandraTableDataset() (*CassandraTableDataset, bool) {
	return nil, false
}

// AsAzureSQLDWTableDataset is the Dataset implementation for AzureBlobDataset.
func (abd AzureBlobDataset) AsAzureSQLDWTableDataset() (*AzureSQLDWTableDataset, bool) {
	return nil, false
}

// AsAzureSQLTableDataset is the Dataset implementation for AzureBlobDataset.
func (abd AzureBlobDataset) AsAzureSQLTableDataset() (*AzureSQLTableDataset, bool) {
	return nil, false
}

// AsAzureTableDataset is the Dataset implementation for AzureBlobDataset.
func (abd AzureBlobDataset) AsAzureTableDataset() (*AzureTableDataset, bool) {
	return nil, false
}

// AsAzureBlobDataset is the Dataset implementation for AzureBlobDataset.
func (abd AzureBlobDataset) AsAzureBlobDataset() (*AzureBlobDataset, bool) {
	return &abd, true
}

// AsAmazonS3Dataset is the Dataset implementation for AzureBlobDataset.
func (abd AzureBlobDataset) AsAmazonS3Dataset() (*AmazonS3Dataset, bool) {
	return nil, false
}

// AzureBlobDatasetTypeProperties is azure Blob dataset properties.
type AzureBlobDatasetTypeProperties struct {
	FolderPath        *map[string]interface{} `json:"folderPath,omitempty"`
	TableRootLocation *map[string]interface{} `json:"tableRootLocation,omitempty"`
	FileName          *map[string]interface{} `json:"fileName,omitempty"`
	Format            DatasetStorageFormat    `json:"format,omitempty"`
	Compression       DatasetCompression      `json:"compression,omitempty"`
}

// UnmarshalJSON is the custom unmarshaler for AzureBlobDatasetTypeProperties struct.
func (abdtp *AzureBlobDatasetTypeProperties) UnmarshalJSON(body []byte) error {
	var m map[string]*json.RawMessage
	err := json.Unmarshal(body, &m)
	if err != nil {
		return err
	}
	var v *json.RawMessage

	v = m["folderPath"]
	if v != nil {
		var folderPath map[string]interface{}
		err = json.Unmarshal(*m["folderPath"], &folderPath)
		if err != nil {
			return err
		}
		abdtp.FolderPath = &folderPath
	}

	v = m["tableRootLocation"]
	if v != nil {
		var tableRootLocation map[string]interface{}
		err = json.Unmarshal(*m["tableRootLocation"], &tableRootLocation)
		if err != nil {
			return err
		}
		abdtp.TableRootLocation = &tableRootLocation
	}

	v = m["fileName"]
	if v != nil {
		var fileName map[string]interface{}
		err = json.Unmarshal(*m["fileName"], &fileName)
		if err != nil {
			return err
		}
		abdtp.FileName = &fileName
	}

	v = m["format"]
	if v != nil {
		formatVar, err := unmarshalDatasetStorageFormat(*m["format"])
		if err != nil {
			return err
		}
		abdtp.Format = formatVar
	}

	v = m["compression"]
	if v != nil {
		compression, err := unmarshalDatasetCompression(*m["compression"])
		if err != nil {
			return err
		}
		abdtp.Compression = compression
	}

	return nil
}

// AzureDataLakeAnalyticsLinkedService is azure Data Lake Analytics linked service.
type AzureDataLakeAnalyticsLinkedService struct {
	ConnectVia                                         *IntegrationRuntimeReference `json:"connectVia,omitempty"`
	Description                                        *string                      `json:"description,omitempty"`
	Type                                               TypeLinkedService            `json:"type,omitempty"`
	*AzureDataLakeAnalyticsLinkedServiceTypeProperties `json:"typeProperties,omitempty"`
}

// MarshalJSON is the custom marshaler for AzureDataLakeAnalyticsLinkedService.
func (adlals AzureDataLakeAnalyticsLinkedService) MarshalJSON() ([]byte, error) {
	adlals.Type = TypeAzureDataLakeAnalytics
	type Alias AzureDataLakeAnalyticsLinkedService
	return json.Marshal(&struct {
		Alias
	}{
		Alias: (Alias)(adlals),
	})
}

// AsAzureDataLakeAnalyticsLinkedService is the LinkedService implementation for AzureDataLakeAnalyticsLinkedService.
func (adlals AzureDataLakeAnalyticsLinkedService) AsAzureDataLakeAnalyticsLinkedService() (*AzureDataLakeAnalyticsLinkedService, bool) {
	return &adlals, true
}

// AsHDInsightOnDemandLinkedService is the LinkedService implementation for AzureDataLakeAnalyticsLinkedService.
func (adlals AzureDataLakeAnalyticsLinkedService) AsHDInsightOnDemandLinkedService() (*HDInsightOnDemandLinkedService, bool) {
	return nil, false
}

// AsSapHanaLinkedService is the LinkedService implementation for AzureDataLakeAnalyticsLinkedService.
func (adlals AzureDataLakeAnalyticsLinkedService) AsSapHanaLinkedService() (*SapHanaLinkedService, bool) {
	return nil, false
}

// AsSapBWLinkedService is the LinkedService implementation for AzureDataLakeAnalyticsLinkedService.
func (adlals AzureDataLakeAnalyticsLinkedService) AsSapBWLinkedService() (*SapBWLinkedService, bool) {
	return nil, false
}

// AsSftpServerLinkedService is the LinkedService implementation for AzureDataLakeAnalyticsLinkedService.
func (adlals AzureDataLakeAnalyticsLinkedService) AsSftpServerLinkedService() (*SftpServerLinkedService, bool) {
	return nil, false
}

// AsFtpServerLinkedService is the LinkedService implementation for AzureDataLakeAnalyticsLinkedService.
func (adlals AzureDataLakeAnalyticsLinkedService) AsFtpServerLinkedService() (*FtpServerLinkedService, bool) {
	return nil, false
}

// AsHTTPLinkedService is the LinkedService implementation for AzureDataLakeAnalyticsLinkedService.
func (adlals AzureDataLakeAnalyticsLinkedService) AsHTTPLinkedService() (*HTTPLinkedService, bool) {
	return nil, false
}

// AsAzureSearchLinkedService is the LinkedService implementation for AzureDataLakeAnalyticsLinkedService.
func (adlals AzureDataLakeAnalyticsLinkedService) AsAzureSearchLinkedService() (*AzureSearchLinkedService, bool) {
	return nil, false
}

// AsCustomDataSourceLinkedService is the LinkedService implementation for AzureDataLakeAnalyticsLinkedService.
func (adlals AzureDataLakeAnalyticsLinkedService) AsCustomDataSourceLinkedService() (*CustomDataSourceLinkedService, bool) {
	return nil, false
}

// AsAmazonRedshiftLinkedService is the LinkedService implementation for AzureDataLakeAnalyticsLinkedService.
func (adlals AzureDataLakeAnalyticsLinkedService) AsAmazonRedshiftLinkedService() (*AmazonRedshiftLinkedService, bool) {
	return nil, false
}

// AsAmazonS3LinkedService is the LinkedService implementation for AzureDataLakeAnalyticsLinkedService.
func (adlals AzureDataLakeAnalyticsLinkedService) AsAmazonS3LinkedService() (*AmazonS3LinkedService, bool) {
	return nil, false
}

// AsSalesforceLinkedService is the LinkedService implementation for AzureDataLakeAnalyticsLinkedService.
func (adlals AzureDataLakeAnalyticsLinkedService) AsSalesforceLinkedService() (*SalesforceLinkedService, bool) {
	return nil, false
}

// AsAzureDataLakeStoreLinkedService is the LinkedService implementation for AzureDataLakeAnalyticsLinkedService.
func (adlals AzureDataLakeAnalyticsLinkedService) AsAzureDataLakeStoreLinkedService() (*AzureDataLakeStoreLinkedService, bool) {
	return nil, false
}

// AsMongoDbLinkedService is the LinkedService implementation for AzureDataLakeAnalyticsLinkedService.
func (adlals AzureDataLakeAnalyticsLinkedService) AsMongoDbLinkedService() (*MongoDbLinkedService, bool) {
	return nil, false
}

// AsCassandraLinkedService is the LinkedService implementation for AzureDataLakeAnalyticsLinkedService.
func (adlals AzureDataLakeAnalyticsLinkedService) AsCassandraLinkedService() (*CassandraLinkedService, bool) {
	return nil, false
}

// AsWebLinkedService is the LinkedService implementation for AzureDataLakeAnalyticsLinkedService.
func (adlals AzureDataLakeAnalyticsLinkedService) AsWebLinkedService() (*WebLinkedService, bool) {
	return nil, false
}

// AsODataLinkedService is the LinkedService implementation for AzureDataLakeAnalyticsLinkedService.
func (adlals AzureDataLakeAnalyticsLinkedService) AsODataLinkedService() (*ODataLinkedService, bool) {
	return nil, false
}

// AsHdfsLinkedService is the LinkedService implementation for AzureDataLakeAnalyticsLinkedService.
func (adlals AzureDataLakeAnalyticsLinkedService) AsHdfsLinkedService() (*HdfsLinkedService, bool) {
	return nil, false
}

// AsOdbcLinkedService is the LinkedService implementation for AzureDataLakeAnalyticsLinkedService.
func (adlals AzureDataLakeAnalyticsLinkedService) AsOdbcLinkedService() (*OdbcLinkedService, bool) {
	return nil, false
}

// AsAzureMLLinkedService is the LinkedService implementation for AzureDataLakeAnalyticsLinkedService.
func (adlals AzureDataLakeAnalyticsLinkedService) AsAzureMLLinkedService() (*AzureMLLinkedService, bool) {
	return nil, false
}

// AsTeradataLinkedService is the LinkedService implementation for AzureDataLakeAnalyticsLinkedService.
func (adlals AzureDataLakeAnalyticsLinkedService) AsTeradataLinkedService() (*TeradataLinkedService, bool) {
	return nil, false
}

// AsDb2LinkedService is the LinkedService implementation for AzureDataLakeAnalyticsLinkedService.
func (adlals AzureDataLakeAnalyticsLinkedService) AsDb2LinkedService() (*Db2LinkedService, bool) {
	return nil, false
}

// AsSybaseLinkedService is the LinkedService implementation for AzureDataLakeAnalyticsLinkedService.
func (adlals AzureDataLakeAnalyticsLinkedService) AsSybaseLinkedService() (*SybaseLinkedService, bool) {
	return nil, false
}

// AsPostgreSQLLinkedService is the LinkedService implementation for AzureDataLakeAnalyticsLinkedService.
func (adlals AzureDataLakeAnalyticsLinkedService) AsPostgreSQLLinkedService() (*PostgreSQLLinkedService, bool) {
	return nil, false
}

// AsMySQLLinkedService is the LinkedService implementation for AzureDataLakeAnalyticsLinkedService.
func (adlals AzureDataLakeAnalyticsLinkedService) AsMySQLLinkedService() (*MySQLLinkedService, bool) {
	return nil, false
}

// AsOracleLinkedService is the LinkedService implementation for AzureDataLakeAnalyticsLinkedService.
func (adlals AzureDataLakeAnalyticsLinkedService) AsOracleLinkedService() (*OracleLinkedService, bool) {
	return nil, false
}

// AsFileServerLinkedService is the LinkedService implementation for AzureDataLakeAnalyticsLinkedService.
func (adlals AzureDataLakeAnalyticsLinkedService) AsFileServerLinkedService() (*FileServerLinkedService, bool) {
	return nil, false
}

// AsHDInsightLinkedService is the LinkedService implementation for AzureDataLakeAnalyticsLinkedService.
func (adlals AzureDataLakeAnalyticsLinkedService) AsHDInsightLinkedService() (*HDInsightLinkedService, bool) {
	return nil, false
}

// AsDynamicsLinkedService is the LinkedService implementation for AzureDataLakeAnalyticsLinkedService.
func (adlals AzureDataLakeAnalyticsLinkedService) AsDynamicsLinkedService() (*DynamicsLinkedService, bool) {
	return nil, false
}

// AsCosmosDbLinkedService is the LinkedService implementation for AzureDataLakeAnalyticsLinkedService.
func (adlals AzureDataLakeAnalyticsLinkedService) AsCosmosDbLinkedService() (*CosmosDbLinkedService, bool) {
	return nil, false
}

// AsAzureKeyVaultLinkedService is the LinkedService implementation for AzureDataLakeAnalyticsLinkedService.
func (adlals AzureDataLakeAnalyticsLinkedService) AsAzureKeyVaultLinkedService() (*AzureKeyVaultLinkedService, bool) {
	return nil, false
}

// AsAzureBatchLinkedService is the LinkedService implementation for AzureDataLakeAnalyticsLinkedService.
func (adlals AzureDataLakeAnalyticsLinkedService) AsAzureBatchLinkedService() (*AzureBatchLinkedService, bool) {
	return nil, false
}

// AsAzureSQLDatabaseLinkedService is the LinkedService implementation for AzureDataLakeAnalyticsLinkedService.
func (adlals AzureDataLakeAnalyticsLinkedService) AsAzureSQLDatabaseLinkedService() (*AzureSQLDatabaseLinkedService, bool) {
	return nil, false
}

// AsSQLServerLinkedService is the LinkedService implementation for AzureDataLakeAnalyticsLinkedService.
func (adlals AzureDataLakeAnalyticsLinkedService) AsSQLServerLinkedService() (*SQLServerLinkedService, bool) {
	return nil, false
}

// AsAzureSQLDWLinkedService is the LinkedService implementation for AzureDataLakeAnalyticsLinkedService.
func (adlals AzureDataLakeAnalyticsLinkedService) AsAzureSQLDWLinkedService() (*AzureSQLDWLinkedService, bool) {
	return nil, false
}

// AsAzureStorageLinkedService is the LinkedService implementation for AzureDataLakeAnalyticsLinkedService.
func (adlals AzureDataLakeAnalyticsLinkedService) AsAzureStorageLinkedService() (*AzureStorageLinkedService, bool) {
	return nil, false
}

// AzureDataLakeAnalyticsLinkedServiceTypeProperties is azure Data Lake Analytics linked service properties.
type AzureDataLakeAnalyticsLinkedServiceTypeProperties struct {
	AccountName          *map[string]interface{} `json:"accountName,omitempty"`
	ServicePrincipalID   *map[string]interface{} `json:"servicePrincipalId,omitempty"`
	ServicePrincipalKey  *SecureString           `json:"servicePrincipalKey,omitempty"`
	Tenant               *map[string]interface{} `json:"tenant,omitempty"`
	SubscriptionID       *map[string]interface{} `json:"subscriptionId,omitempty"`
	ResourceGroupName    *map[string]interface{} `json:"resourceGroupName,omitempty"`
	DataLakeAnalyticsURI *map[string]interface{} `json:"dataLakeAnalyticsUri,omitempty"`
	EncryptedCredential  *map[string]interface{} `json:"encryptedCredential,omitempty"`
}

// AzureDataLakeStoreDataset is azure Data Lake Store dataset.
type AzureDataLakeStoreDataset struct {
	Description                              *string                             `json:"description,omitempty"`
	Structure                                *map[string]interface{}             `json:"structure,omitempty"`
	LinkedServiceName                        *LinkedServiceReference             `json:"linkedServiceName,omitempty"`
	Parameters                               *map[string]*ParameterSpecification `json:"parameters,omitempty"`
	Type                                     TypeDataset                         `json:"type,omitempty"`
	*AzureDataLakeStoreDatasetTypeProperties `json:"typeProperties,omitempty"`
}

// MarshalJSON is the custom marshaler for AzureDataLakeStoreDataset.
func (adlsd AzureDataLakeStoreDataset) MarshalJSON() ([]byte, error) {
	adlsd.Type = TypeAzureDataLakeStoreFile
	type Alias AzureDataLakeStoreDataset
	return json.Marshal(&struct {
		Alias
	}{
		Alias: (Alias)(adlsd),
	})
}

// AsHTTPDataset is the Dataset implementation for AzureDataLakeStoreDataset.
func (adlsd AzureDataLakeStoreDataset) AsHTTPDataset() (*HTTPDataset, bool) {
	return nil, false
}

// AsAzureSearchIndexDataset is the Dataset implementation for AzureDataLakeStoreDataset.
func (adlsd AzureDataLakeStoreDataset) AsAzureSearchIndexDataset() (*AzureSearchIndexDataset, bool) {
	return nil, false
}

// AsWebTableDataset is the Dataset implementation for AzureDataLakeStoreDataset.
func (adlsd AzureDataLakeStoreDataset) AsWebTableDataset() (*WebTableDataset, bool) {
	return nil, false
}

// AsSQLServerTableDataset is the Dataset implementation for AzureDataLakeStoreDataset.
func (adlsd AzureDataLakeStoreDataset) AsSQLServerTableDataset() (*SQLServerTableDataset, bool) {
	return nil, false
}

// AsRelationalTableDataset is the Dataset implementation for AzureDataLakeStoreDataset.
func (adlsd AzureDataLakeStoreDataset) AsRelationalTableDataset() (*RelationalTableDataset, bool) {
	return nil, false
}

// AsOracleTableDataset is the Dataset implementation for AzureDataLakeStoreDataset.
func (adlsd AzureDataLakeStoreDataset) AsOracleTableDataset() (*OracleTableDataset, bool) {
	return nil, false
}

// AsODataResourceDataset is the Dataset implementation for AzureDataLakeStoreDataset.
func (adlsd AzureDataLakeStoreDataset) AsODataResourceDataset() (*ODataResourceDataset, bool) {
	return nil, false
}

// AsMongoDbCollectionDataset is the Dataset implementation for AzureDataLakeStoreDataset.
func (adlsd AzureDataLakeStoreDataset) AsMongoDbCollectionDataset() (*MongoDbCollectionDataset, bool) {
	return nil, false
}

// AsFileShareDataset is the Dataset implementation for AzureDataLakeStoreDataset.
func (adlsd AzureDataLakeStoreDataset) AsFileShareDataset() (*FileShareDataset, bool) {
	return nil, false
}

// AsAzureDataLakeStoreDataset is the Dataset implementation for AzureDataLakeStoreDataset.
func (adlsd AzureDataLakeStoreDataset) AsAzureDataLakeStoreDataset() (*AzureDataLakeStoreDataset, bool) {
	return &adlsd, true
}

// AsDynamicsEntityDataset is the Dataset implementation for AzureDataLakeStoreDataset.
func (adlsd AzureDataLakeStoreDataset) AsDynamicsEntityDataset() (*DynamicsEntityDataset, bool) {
	return nil, false
}

// AsDocumentDbCollectionDataset is the Dataset implementation for AzureDataLakeStoreDataset.
func (adlsd AzureDataLakeStoreDataset) AsDocumentDbCollectionDataset() (*DocumentDbCollectionDataset, bool) {
	return nil, false
}

// AsCustomDataset is the Dataset implementation for AzureDataLakeStoreDataset.
func (adlsd AzureDataLakeStoreDataset) AsCustomDataset() (*CustomDataset, bool) {
	return nil, false
}

// AsCassandraTableDataset is the Dataset implementation for AzureDataLakeStoreDataset.
func (adlsd AzureDataLakeStoreDataset) AsCassandraTableDataset() (*CassandraTableDataset, bool) {
	return nil, false
}

// AsAzureSQLDWTableDataset is the Dataset implementation for AzureDataLakeStoreDataset.
func (adlsd AzureDataLakeStoreDataset) AsAzureSQLDWTableDataset() (*AzureSQLDWTableDataset, bool) {
	return nil, false
}

// AsAzureSQLTableDataset is the Dataset implementation for AzureDataLakeStoreDataset.
func (adlsd AzureDataLakeStoreDataset) AsAzureSQLTableDataset() (*AzureSQLTableDataset, bool) {
	return nil, false
}

// AsAzureTableDataset is the Dataset implementation for AzureDataLakeStoreDataset.
func (adlsd AzureDataLakeStoreDataset) AsAzureTableDataset() (*AzureTableDataset, bool) {
	return nil, false
}

// AsAzureBlobDataset is the Dataset implementation for AzureDataLakeStoreDataset.
func (adlsd AzureDataLakeStoreDataset) AsAzureBlobDataset() (*AzureBlobDataset, bool) {
	return nil, false
}

// AsAmazonS3Dataset is the Dataset implementation for AzureDataLakeStoreDataset.
func (adlsd AzureDataLakeStoreDataset) AsAmazonS3Dataset() (*AmazonS3Dataset, bool) {
	return nil, false
}

// AzureDataLakeStoreDatasetTypeProperties is azure Data Lake Store dataset properties.
type AzureDataLakeStoreDatasetTypeProperties struct {
	FolderPath    *map[string]interface{} `json:"folderPath,omitempty"`
	FileName      *map[string]interface{} `json:"fileName,omitempty"`
	Format        DatasetStorageFormat    `json:"format,omitempty"`
	Compression   DatasetCompression      `json:"compression,omitempty"`
	PartitionedBy *[]DatasetPartition     `json:"partitionedBy,omitempty"`
}

// UnmarshalJSON is the custom unmarshaler for AzureDataLakeStoreDatasetTypeProperties struct.
func (adlsdtp *AzureDataLakeStoreDatasetTypeProperties) UnmarshalJSON(body []byte) error {
	var m map[string]*json.RawMessage
	err := json.Unmarshal(body, &m)
	if err != nil {
		return err
	}
	var v *json.RawMessage

	v = m["folderPath"]
	if v != nil {
		var folderPath map[string]interface{}
		err = json.Unmarshal(*m["folderPath"], &folderPath)
		if err != nil {
			return err
		}
		adlsdtp.FolderPath = &folderPath
	}

	v = m["fileName"]
	if v != nil {
		var fileName map[string]interface{}
		err = json.Unmarshal(*m["fileName"], &fileName)
		if err != nil {
			return err
		}
		adlsdtp.FileName = &fileName
	}

	v = m["format"]
	if v != nil {
		formatVar, err := unmarshalDatasetStorageFormat(*m["format"])
		if err != nil {
			return err
		}
		adlsdtp.Format = formatVar
	}

	v = m["compression"]
	if v != nil {
		compression, err := unmarshalDatasetCompression(*m["compression"])
		if err != nil {
			return err
		}
		adlsdtp.Compression = compression
	}

	v = m["partitionedBy"]
	if v != nil {
		var partitionedBy []DatasetPartition
		err = json.Unmarshal(*m["partitionedBy"], &partitionedBy)
		if err != nil {
			return err
		}
		adlsdtp.PartitionedBy = &partitionedBy
	}

	return nil
}

// AzureDataLakeStoreLinkedService is azure Data Lake Store linked service.
type AzureDataLakeStoreLinkedService struct {
	ConnectVia                                     *IntegrationRuntimeReference `json:"connectVia,omitempty"`
	Description                                    *string                      `json:"description,omitempty"`
	Type                                           TypeLinkedService            `json:"type,omitempty"`
	*AzureDataLakeStoreLinkedServiceTypeProperties `json:"typeProperties,omitempty"`
}

// MarshalJSON is the custom marshaler for AzureDataLakeStoreLinkedService.
func (adlsls AzureDataLakeStoreLinkedService) MarshalJSON() ([]byte, error) {
	adlsls.Type = TypeAzureDataLakeStore
	type Alias AzureDataLakeStoreLinkedService
	return json.Marshal(&struct {
		Alias
	}{
		Alias: (Alias)(adlsls),
	})
}

// AsAzureDataLakeAnalyticsLinkedService is the LinkedService implementation for AzureDataLakeStoreLinkedService.
func (adlsls AzureDataLakeStoreLinkedService) AsAzureDataLakeAnalyticsLinkedService() (*AzureDataLakeAnalyticsLinkedService, bool) {
	return nil, false
}

// AsHDInsightOnDemandLinkedService is the LinkedService implementation for AzureDataLakeStoreLinkedService.
func (adlsls AzureDataLakeStoreLinkedService) AsHDInsightOnDemandLinkedService() (*HDInsightOnDemandLinkedService, bool) {
	return nil, false
}

// AsSapHanaLinkedService is the LinkedService implementation for AzureDataLakeStoreLinkedService.
func (adlsls AzureDataLakeStoreLinkedService) AsSapHanaLinkedService() (*SapHanaLinkedService, bool) {
	return nil, false
}

// AsSapBWLinkedService is the LinkedService implementation for AzureDataLakeStoreLinkedService.
func (adlsls AzureDataLakeStoreLinkedService) AsSapBWLinkedService() (*SapBWLinkedService, bool) {
	return nil, false
}

// AsSftpServerLinkedService is the LinkedService implementation for AzureDataLakeStoreLinkedService.
func (adlsls AzureDataLakeStoreLinkedService) AsSftpServerLinkedService() (*SftpServerLinkedService, bool) {
	return nil, false
}

// AsFtpServerLinkedService is the LinkedService implementation for AzureDataLakeStoreLinkedService.
func (adlsls AzureDataLakeStoreLinkedService) AsFtpServerLinkedService() (*FtpServerLinkedService, bool) {
	return nil, false
}

// AsHTTPLinkedService is the LinkedService implementation for AzureDataLakeStoreLinkedService.
func (adlsls AzureDataLakeStoreLinkedService) AsHTTPLinkedService() (*HTTPLinkedService, bool) {
	return nil, false
}

// AsAzureSearchLinkedService is the LinkedService implementation for AzureDataLakeStoreLinkedService.
func (adlsls AzureDataLakeStoreLinkedService) AsAzureSearchLinkedService() (*AzureSearchLinkedService, bool) {
	return nil, false
}

// AsCustomDataSourceLinkedService is the LinkedService implementation for AzureDataLakeStoreLinkedService.
func (adlsls AzureDataLakeStoreLinkedService) AsCustomDataSourceLinkedService() (*CustomDataSourceLinkedService, bool) {
	return nil, false
}

// AsAmazonRedshiftLinkedService is the LinkedService implementation for AzureDataLakeStoreLinkedService.
func (adlsls AzureDataLakeStoreLinkedService) AsAmazonRedshiftLinkedService() (*AmazonRedshiftLinkedService, bool) {
	return nil, false
}

// AsAmazonS3LinkedService is the LinkedService implementation for AzureDataLakeStoreLinkedService.
func (adlsls AzureDataLakeStoreLinkedService) AsAmazonS3LinkedService() (*AmazonS3LinkedService, bool) {
	return nil, false
}

// AsSalesforceLinkedService is the LinkedService implementation for AzureDataLakeStoreLinkedService.
func (adlsls AzureDataLakeStoreLinkedService) AsSalesforceLinkedService() (*SalesforceLinkedService, bool) {
	return nil, false
}

// AsAzureDataLakeStoreLinkedService is the LinkedService implementation for AzureDataLakeStoreLinkedService.
func (adlsls AzureDataLakeStoreLinkedService) AsAzureDataLakeStoreLinkedService() (*AzureDataLakeStoreLinkedService, bool) {
	return &adlsls, true
}

// AsMongoDbLinkedService is the LinkedService implementation for AzureDataLakeStoreLinkedService.
func (adlsls AzureDataLakeStoreLinkedService) AsMongoDbLinkedService() (*MongoDbLinkedService, bool) {
	return nil, false
}

// AsCassandraLinkedService is the LinkedService implementation for AzureDataLakeStoreLinkedService.
func (adlsls AzureDataLakeStoreLinkedService) AsCassandraLinkedService() (*CassandraLinkedService, bool) {
	return nil, false
}

// AsWebLinkedService is the LinkedService implementation for AzureDataLakeStoreLinkedService.
func (adlsls AzureDataLakeStoreLinkedService) AsWebLinkedService() (*WebLinkedService, bool) {
	return nil, false
}

// AsODataLinkedService is the LinkedService implementation for AzureDataLakeStoreLinkedService.
func (adlsls AzureDataLakeStoreLinkedService) AsODataLinkedService() (*ODataLinkedService, bool) {
	return nil, false
}

// AsHdfsLinkedService is the LinkedService implementation for AzureDataLakeStoreLinkedService.
func (adlsls AzureDataLakeStoreLinkedService) AsHdfsLinkedService() (*HdfsLinkedService, bool) {
	return nil, false
}

// AsOdbcLinkedService is the LinkedService implementation for AzureDataLakeStoreLinkedService.
func (adlsls AzureDataLakeStoreLinkedService) AsOdbcLinkedService() (*OdbcLinkedService, bool) {
	return nil, false
}

// AsAzureMLLinkedService is the LinkedService implementation for AzureDataLakeStoreLinkedService.
func (adlsls AzureDataLakeStoreLinkedService) AsAzureMLLinkedService() (*AzureMLLinkedService, bool) {
	return nil, false
}

// AsTeradataLinkedService is the LinkedService implementation for AzureDataLakeStoreLinkedService.
func (adlsls AzureDataLakeStoreLinkedService) AsTeradataLinkedService() (*TeradataLinkedService, bool) {
	return nil, false
}

// AsDb2LinkedService is the LinkedService implementation for AzureDataLakeStoreLinkedService.
func (adlsls AzureDataLakeStoreLinkedService) AsDb2LinkedService() (*Db2LinkedService, bool) {
	return nil, false
}

// AsSybaseLinkedService is the LinkedService implementation for AzureDataLakeStoreLinkedService.
func (adlsls AzureDataLakeStoreLinkedService) AsSybaseLinkedService() (*SybaseLinkedService, bool) {
	return nil, false
}

// AsPostgreSQLLinkedService is the LinkedService implementation for AzureDataLakeStoreLinkedService.
func (adlsls AzureDataLakeStoreLinkedService) AsPostgreSQLLinkedService() (*PostgreSQLLinkedService, bool) {
	return nil, false
}

// AsMySQLLinkedService is the LinkedService implementation for AzureDataLakeStoreLinkedService.
func (adlsls AzureDataLakeStoreLinkedService) AsMySQLLinkedService() (*MySQLLinkedService, bool) {
	return nil, false
}

// AsOracleLinkedService is the LinkedService implementation for AzureDataLakeStoreLinkedService.
func (adlsls AzureDataLakeStoreLinkedService) AsOracleLinkedService() (*OracleLinkedService, bool) {
	return nil, false
}

// AsFileServerLinkedService is the LinkedService implementation for AzureDataLakeStoreLinkedService.
func (adlsls AzureDataLakeStoreLinkedService) AsFileServerLinkedService() (*FileServerLinkedService, bool) {
	return nil, false
}

// AsHDInsightLinkedService is the LinkedService implementation for AzureDataLakeStoreLinkedService.
func (adlsls AzureDataLakeStoreLinkedService) AsHDInsightLinkedService() (*HDInsightLinkedService, bool) {
	return nil, false
}

// AsDynamicsLinkedService is the LinkedService implementation for AzureDataLakeStoreLinkedService.
func (adlsls AzureDataLakeStoreLinkedService) AsDynamicsLinkedService() (*DynamicsLinkedService, bool) {
	return nil, false
}

// AsCosmosDbLinkedService is the LinkedService implementation for AzureDataLakeStoreLinkedService.
func (adlsls AzureDataLakeStoreLinkedService) AsCosmosDbLinkedService() (*CosmosDbLinkedService, bool) {
	return nil, false
}

// AsAzureKeyVaultLinkedService is the LinkedService implementation for AzureDataLakeStoreLinkedService.
func (adlsls AzureDataLakeStoreLinkedService) AsAzureKeyVaultLinkedService() (*AzureKeyVaultLinkedService, bool) {
	return nil, false
}

// AsAzureBatchLinkedService is the LinkedService implementation for AzureDataLakeStoreLinkedService.
func (adlsls AzureDataLakeStoreLinkedService) AsAzureBatchLinkedService() (*AzureBatchLinkedService, bool) {
	return nil, false
}

// AsAzureSQLDatabaseLinkedService is the LinkedService implementation for AzureDataLakeStoreLinkedService.
func (adlsls AzureDataLakeStoreLinkedService) AsAzureSQLDatabaseLinkedService() (*AzureSQLDatabaseLinkedService, bool) {
	return nil, false
}

// AsSQLServerLinkedService is the LinkedService implementation for AzureDataLakeStoreLinkedService.
func (adlsls AzureDataLakeStoreLinkedService) AsSQLServerLinkedService() (*SQLServerLinkedService, bool) {
	return nil, false
}

// AsAzureSQLDWLinkedService is the LinkedService implementation for AzureDataLakeStoreLinkedService.
func (adlsls AzureDataLakeStoreLinkedService) AsAzureSQLDWLinkedService() (*AzureSQLDWLinkedService, bool) {
	return nil, false
}

// AsAzureStorageLinkedService is the LinkedService implementation for AzureDataLakeStoreLinkedService.
func (adlsls AzureDataLakeStoreLinkedService) AsAzureStorageLinkedService() (*AzureStorageLinkedService, bool) {
	return nil, false
}

// AzureDataLakeStoreLinkedServiceTypeProperties is azure Data Lake Store linked service properties.
type AzureDataLakeStoreLinkedServiceTypeProperties struct {
	DataLakeStoreURI    *map[string]interface{} `json:"dataLakeStoreUri,omitempty"`
	ServicePrincipalID  *map[string]interface{} `json:"servicePrincipalId,omitempty"`
	ServicePrincipalKey *SecureString           `json:"servicePrincipalKey,omitempty"`
	Tenant              *map[string]interface{} `json:"tenant,omitempty"`
	AccountName         *map[string]interface{} `json:"accountName,omitempty"`
	SubscriptionID      *map[string]interface{} `json:"subscriptionId,omitempty"`
	ResourceGroupName   *map[string]interface{} `json:"resourceGroupName,omitempty"`
	EncryptedCredential *map[string]interface{} `json:"encryptedCredential,omitempty"`
}

// AzureDataLakeStoreSink is a copy activity Azure Data Lake Store sink.
type AzureDataLakeStoreSink struct {
	WriteBatchSize    *map[string]interface{} `json:"writeBatchSize,omitempty"`
	WriteBatchTimeout *map[string]interface{} `json:"writeBatchTimeout,omitempty"`
	SinkRetryCount    *map[string]interface{} `json:"sinkRetryCount,omitempty"`
	SinkRetryWait     *map[string]interface{} `json:"sinkRetryWait,omitempty"`
	Type              TypeCopySink            `json:"type,omitempty"`
	CopyBehavior      CopyBehaviorType        `json:"copyBehavior,omitempty"`
}

// MarshalJSON is the custom marshaler for AzureDataLakeStoreSink.
func (adlss AzureDataLakeStoreSink) MarshalJSON() ([]byte, error) {
	adlss.Type = TypeAzureDataLakeStoreSink
	type Alias AzureDataLakeStoreSink
	return json.Marshal(&struct {
		Alias
	}{
		Alias: (Alias)(adlss),
	})
}

// AsOdbcSink is the CopySink implementation for AzureDataLakeStoreSink.
func (adlss AzureDataLakeStoreSink) AsOdbcSink() (*OdbcSink, bool) {
	return nil, false
}

// AsAzureSearchIndexSink is the CopySink implementation for AzureDataLakeStoreSink.
func (adlss AzureDataLakeStoreSink) AsAzureSearchIndexSink() (*AzureSearchIndexSink, bool) {
	return nil, false
}

// AsAzureDataLakeStoreSink is the CopySink implementation for AzureDataLakeStoreSink.
func (adlss AzureDataLakeStoreSink) AsAzureDataLakeStoreSink() (*AzureDataLakeStoreSink, bool) {
	return &adlss, true
}

// AsOracleSink is the CopySink implementation for AzureDataLakeStoreSink.
func (adlss AzureDataLakeStoreSink) AsOracleSink() (*OracleSink, bool) {
	return nil, false
}

// AsSQLDWSink is the CopySink implementation for AzureDataLakeStoreSink.
func (adlss AzureDataLakeStoreSink) AsSQLDWSink() (*SQLDWSink, bool) {
	return nil, false
}

// AsSQLSink is the CopySink implementation for AzureDataLakeStoreSink.
func (adlss AzureDataLakeStoreSink) AsSQLSink() (*SQLSink, bool) {
	return nil, false
}

// AsDocumentDbCollectionSink is the CopySink implementation for AzureDataLakeStoreSink.
func (adlss AzureDataLakeStoreSink) AsDocumentDbCollectionSink() (*DocumentDbCollectionSink, bool) {
	return nil, false
}

// AsFileSystemSink is the CopySink implementation for AzureDataLakeStoreSink.
func (adlss AzureDataLakeStoreSink) AsFileSystemSink() (*FileSystemSink, bool) {
	return nil, false
}

// AsBlobSink is the CopySink implementation for AzureDataLakeStoreSink.
func (adlss AzureDataLakeStoreSink) AsBlobSink() (*BlobSink, bool) {
	return nil, false
}

// AsAzureTableSink is the CopySink implementation for AzureDataLakeStoreSink.
func (adlss AzureDataLakeStoreSink) AsAzureTableSink() (*AzureTableSink, bool) {
	return nil, false
}

// AsAzureQueueSink is the CopySink implementation for AzureDataLakeStoreSink.
func (adlss AzureDataLakeStoreSink) AsAzureQueueSink() (*AzureQueueSink, bool) {
	return nil, false
}

// AzureDataLakeStoreSource is a copy activity Azure Data Lake source.
type AzureDataLakeStoreSource struct {
	SourceRetryCount *map[string]interface{} `json:"sourceRetryCount,omitempty"`
	SourceRetryWait  *map[string]interface{} `json:"sourceRetryWait,omitempty"`
	Type             TypeCopySource          `json:"type,omitempty"`
	Recursive        *map[string]interface{} `json:"recursive,omitempty"`
}

// MarshalJSON is the custom marshaler for AzureDataLakeStoreSource.
func (adlss AzureDataLakeStoreSource) MarshalJSON() ([]byte, error) {
	adlss.Type = TypeAzureDataLakeStoreSource
	type Alias AzureDataLakeStoreSource
	return json.Marshal(&struct {
		Alias
	}{
		Alias: (Alias)(adlss),
	})
}

// AsAmazonRedshiftSource is the CopySource implementation for AzureDataLakeStoreSource.
func (adlss AzureDataLakeStoreSource) AsAmazonRedshiftSource() (*AmazonRedshiftSource, bool) {
	return nil, false
}

// AsHTTPSource is the CopySource implementation for AzureDataLakeStoreSource.
func (adlss AzureDataLakeStoreSource) AsHTTPSource() (*HTTPSource, bool) {
	return nil, false
}

// AsAzureDataLakeStoreSource is the CopySource implementation for AzureDataLakeStoreSource.
func (adlss AzureDataLakeStoreSource) AsAzureDataLakeStoreSource() (*AzureDataLakeStoreSource, bool) {
	return &adlss, true
}

// AsMongoDbSource is the CopySource implementation for AzureDataLakeStoreSource.
func (adlss AzureDataLakeStoreSource) AsMongoDbSource() (*MongoDbSource, bool) {
	return nil, false
}

// AsCassandraSource is the CopySource implementation for AzureDataLakeStoreSource.
func (adlss AzureDataLakeStoreSource) AsCassandraSource() (*CassandraSource, bool) {
	return nil, false
}

// AsWebSource is the CopySource implementation for AzureDataLakeStoreSource.
func (adlss AzureDataLakeStoreSource) AsWebSource() (*WebSource, bool) {
	return nil, false
}

// AsOracleSource is the CopySource implementation for AzureDataLakeStoreSource.
func (adlss AzureDataLakeStoreSource) AsOracleSource() (*OracleSource, bool) {
	return nil, false
}

// AsHdfsSource is the CopySource implementation for AzureDataLakeStoreSource.
func (adlss AzureDataLakeStoreSource) AsHdfsSource() (*HdfsSource, bool) {
	return nil, false
}

// AsFileSystemSource is the CopySource implementation for AzureDataLakeStoreSource.
func (adlss AzureDataLakeStoreSource) AsFileSystemSource() (*FileSystemSource, bool) {
	return nil, false
}

// AsSQLDWSource is the CopySource implementation for AzureDataLakeStoreSource.
func (adlss AzureDataLakeStoreSource) AsSQLDWSource() (*SQLDWSource, bool) {
	return nil, false
}

// AsSQLSource is the CopySource implementation for AzureDataLakeStoreSource.
func (adlss AzureDataLakeStoreSource) AsSQLSource() (*SQLSource, bool) {
	return nil, false
}

// AsRelationalSource is the CopySource implementation for AzureDataLakeStoreSource.
func (adlss AzureDataLakeStoreSource) AsRelationalSource() (*RelationalSource, bool) {
	return nil, false
}

// AsDynamicsSource is the CopySource implementation for AzureDataLakeStoreSource.
func (adlss AzureDataLakeStoreSource) AsDynamicsSource() (*DynamicsSource, bool) {
	return nil, false
}

// AsDocumentDbCollectionSource is the CopySource implementation for AzureDataLakeStoreSource.
func (adlss AzureDataLakeStoreSource) AsDocumentDbCollectionSource() (*DocumentDbCollectionSource, bool) {
	return nil, false
}

// AsBlobSource is the CopySource implementation for AzureDataLakeStoreSource.
func (adlss AzureDataLakeStoreSource) AsBlobSource() (*BlobSource, bool) {
	return nil, false
}

// AsAzureTableSource is the CopySource implementation for AzureDataLakeStoreSource.
func (adlss AzureDataLakeStoreSource) AsAzureTableSource() (*AzureTableSource, bool) {
	return nil, false
}

// AzureKeyVaultLinkedService is azure Key Vault linked service.
type AzureKeyVaultLinkedService struct {
	ConnectVia                                *IntegrationRuntimeReference `json:"connectVia,omitempty"`
	Description                               *string                      `json:"description,omitempty"`
	Type                                      TypeLinkedService            `json:"type,omitempty"`
	*AzureKeyVaultLinkedServiceTypeProperties `json:"typeProperties,omitempty"`
}

// MarshalJSON is the custom marshaler for AzureKeyVaultLinkedService.
func (akvls AzureKeyVaultLinkedService) MarshalJSON() ([]byte, error) {
	akvls.Type = TypeAzureKeyVault
	type Alias AzureKeyVaultLinkedService
	return json.Marshal(&struct {
		Alias
	}{
		Alias: (Alias)(akvls),
	})
}

// AsAzureDataLakeAnalyticsLinkedService is the LinkedService implementation for AzureKeyVaultLinkedService.
func (akvls AzureKeyVaultLinkedService) AsAzureDataLakeAnalyticsLinkedService() (*AzureDataLakeAnalyticsLinkedService, bool) {
	return nil, false
}

// AsHDInsightOnDemandLinkedService is the LinkedService implementation for AzureKeyVaultLinkedService.
func (akvls AzureKeyVaultLinkedService) AsHDInsightOnDemandLinkedService() (*HDInsightOnDemandLinkedService, bool) {
	return nil, false
}

// AsSapHanaLinkedService is the LinkedService implementation for AzureKeyVaultLinkedService.
func (akvls AzureKeyVaultLinkedService) AsSapHanaLinkedService() (*SapHanaLinkedService, bool) {
	return nil, false
}

// AsSapBWLinkedService is the LinkedService implementation for AzureKeyVaultLinkedService.
func (akvls AzureKeyVaultLinkedService) AsSapBWLinkedService() (*SapBWLinkedService, bool) {
	return nil, false
}

// AsSftpServerLinkedService is the LinkedService implementation for AzureKeyVaultLinkedService.
func (akvls AzureKeyVaultLinkedService) AsSftpServerLinkedService() (*SftpServerLinkedService, bool) {
	return nil, false
}

// AsFtpServerLinkedService is the LinkedService implementation for AzureKeyVaultLinkedService.
func (akvls AzureKeyVaultLinkedService) AsFtpServerLinkedService() (*FtpServerLinkedService, bool) {
	return nil, false
}

// AsHTTPLinkedService is the LinkedService implementation for AzureKeyVaultLinkedService.
func (akvls AzureKeyVaultLinkedService) AsHTTPLinkedService() (*HTTPLinkedService, bool) {
	return nil, false
}

// AsAzureSearchLinkedService is the LinkedService implementation for AzureKeyVaultLinkedService.
func (akvls AzureKeyVaultLinkedService) AsAzureSearchLinkedService() (*AzureSearchLinkedService, bool) {
	return nil, false
}

// AsCustomDataSourceLinkedService is the LinkedService implementation for AzureKeyVaultLinkedService.
func (akvls AzureKeyVaultLinkedService) AsCustomDataSourceLinkedService() (*CustomDataSourceLinkedService, bool) {
	return nil, false
}

// AsAmazonRedshiftLinkedService is the LinkedService implementation for AzureKeyVaultLinkedService.
func (akvls AzureKeyVaultLinkedService) AsAmazonRedshiftLinkedService() (*AmazonRedshiftLinkedService, bool) {
	return nil, false
}

// AsAmazonS3LinkedService is the LinkedService implementation for AzureKeyVaultLinkedService.
func (akvls AzureKeyVaultLinkedService) AsAmazonS3LinkedService() (*AmazonS3LinkedService, bool) {
	return nil, false
}

// AsSalesforceLinkedService is the LinkedService implementation for AzureKeyVaultLinkedService.
func (akvls AzureKeyVaultLinkedService) AsSalesforceLinkedService() (*SalesforceLinkedService, bool) {
	return nil, false
}

// AsAzureDataLakeStoreLinkedService is the LinkedService implementation for AzureKeyVaultLinkedService.
func (akvls AzureKeyVaultLinkedService) AsAzureDataLakeStoreLinkedService() (*AzureDataLakeStoreLinkedService, bool) {
	return nil, false
}

// AsMongoDbLinkedService is the LinkedService implementation for AzureKeyVaultLinkedService.
func (akvls AzureKeyVaultLinkedService) AsMongoDbLinkedService() (*MongoDbLinkedService, bool) {
	return nil, false
}

// AsCassandraLinkedService is the LinkedService implementation for AzureKeyVaultLinkedService.
func (akvls AzureKeyVaultLinkedService) AsCassandraLinkedService() (*CassandraLinkedService, bool) {
	return nil, false
}

// AsWebLinkedService is the LinkedService implementation for AzureKeyVaultLinkedService.
func (akvls AzureKeyVaultLinkedService) AsWebLinkedService() (*WebLinkedService, bool) {
	return nil, false
}

// AsODataLinkedService is the LinkedService implementation for AzureKeyVaultLinkedService.
func (akvls AzureKeyVaultLinkedService) AsODataLinkedService() (*ODataLinkedService, bool) {
	return nil, false
}

// AsHdfsLinkedService is the LinkedService implementation for AzureKeyVaultLinkedService.
func (akvls AzureKeyVaultLinkedService) AsHdfsLinkedService() (*HdfsLinkedService, bool) {
	return nil, false
}

// AsOdbcLinkedService is the LinkedService implementation for AzureKeyVaultLinkedService.
func (akvls AzureKeyVaultLinkedService) AsOdbcLinkedService() (*OdbcLinkedService, bool) {
	return nil, false
}

// AsAzureMLLinkedService is the LinkedService implementation for AzureKeyVaultLinkedService.
func (akvls AzureKeyVaultLinkedService) AsAzureMLLinkedService() (*AzureMLLinkedService, bool) {
	return nil, false
}

// AsTeradataLinkedService is the LinkedService implementation for AzureKeyVaultLinkedService.
func (akvls AzureKeyVaultLinkedService) AsTeradataLinkedService() (*TeradataLinkedService, bool) {
	return nil, false
}

// AsDb2LinkedService is the LinkedService implementation for AzureKeyVaultLinkedService.
func (akvls AzureKeyVaultLinkedService) AsDb2LinkedService() (*Db2LinkedService, bool) {
	return nil, false
}

// AsSybaseLinkedService is the LinkedService implementation for AzureKeyVaultLinkedService.
func (akvls AzureKeyVaultLinkedService) AsSybaseLinkedService() (*SybaseLinkedService, bool) {
	return nil, false
}

// AsPostgreSQLLinkedService is the LinkedService implementation for AzureKeyVaultLinkedService.
func (akvls AzureKeyVaultLinkedService) AsPostgreSQLLinkedService() (*PostgreSQLLinkedService, bool) {
	return nil, false
}

// AsMySQLLinkedService is the LinkedService implementation for AzureKeyVaultLinkedService.
func (akvls AzureKeyVaultLinkedService) AsMySQLLinkedService() (*MySQLLinkedService, bool) {
	return nil, false
}

// AsOracleLinkedService is the LinkedService implementation for AzureKeyVaultLinkedService.
func (akvls AzureKeyVaultLinkedService) AsOracleLinkedService() (*OracleLinkedService, bool) {
	return nil, false
}

// AsFileServerLinkedService is the LinkedService implementation for AzureKeyVaultLinkedService.
func (akvls AzureKeyVaultLinkedService) AsFileServerLinkedService() (*FileServerLinkedService, bool) {
	return nil, false
}

// AsHDInsightLinkedService is the LinkedService implementation for AzureKeyVaultLinkedService.
func (akvls AzureKeyVaultLinkedService) AsHDInsightLinkedService() (*HDInsightLinkedService, bool) {
	return nil, false
}

// AsDynamicsLinkedService is the LinkedService implementation for AzureKeyVaultLinkedService.
func (akvls AzureKeyVaultLinkedService) AsDynamicsLinkedService() (*DynamicsLinkedService, bool) {
	return nil, false
}

// AsCosmosDbLinkedService is the LinkedService implementation for AzureKeyVaultLinkedService.
func (akvls AzureKeyVaultLinkedService) AsCosmosDbLinkedService() (*CosmosDbLinkedService, bool) {
	return nil, false
}

// AsAzureKeyVaultLinkedService is the LinkedService implementation for AzureKeyVaultLinkedService.
func (akvls AzureKeyVaultLinkedService) AsAzureKeyVaultLinkedService() (*AzureKeyVaultLinkedService, bool) {
	return &akvls, true
}

// AsAzureBatchLinkedService is the LinkedService implementation for AzureKeyVaultLinkedService.
func (akvls AzureKeyVaultLinkedService) AsAzureBatchLinkedService() (*AzureBatchLinkedService, bool) {
	return nil, false
}

// AsAzureSQLDatabaseLinkedService is the LinkedService implementation for AzureKeyVaultLinkedService.
func (akvls AzureKeyVaultLinkedService) AsAzureSQLDatabaseLinkedService() (*AzureSQLDatabaseLinkedService, bool) {
	return nil, false
}

// AsSQLServerLinkedService is the LinkedService implementation for AzureKeyVaultLinkedService.
func (akvls AzureKeyVaultLinkedService) AsSQLServerLinkedService() (*SQLServerLinkedService, bool) {
	return nil, false
}

// AsAzureSQLDWLinkedService is the LinkedService implementation for AzureKeyVaultLinkedService.
func (akvls AzureKeyVaultLinkedService) AsAzureSQLDWLinkedService() (*AzureSQLDWLinkedService, bool) {
	return nil, false
}

// AsAzureStorageLinkedService is the LinkedService implementation for AzureKeyVaultLinkedService.
func (akvls AzureKeyVaultLinkedService) AsAzureStorageLinkedService() (*AzureStorageLinkedService, bool) {
	return nil, false
}

// AzureKeyVaultLinkedServiceTypeProperties is azure Key Vault linked service properties.
type AzureKeyVaultLinkedServiceTypeProperties struct {
	BaseURL *map[string]interface{} `json:"baseUrl,omitempty"`
}

// AzureKeyVaultReference is a reference to an object in Azure Key Vault.
type AzureKeyVaultReference interface {
	AsAzureKeyVaultSecretReference() (*AzureKeyVaultSecretReference, bool)
}

func unmarshalAzureKeyVaultReference(body []byte) (AzureKeyVaultReference, error) {
	var m map[string]interface{}
	err := json.Unmarshal(body, &m)
	if err != nil {
		return nil, err
	}

	switch m["type"] {
	case string(TypeAzureKeyVaultSecret):
		var akvsr AzureKeyVaultSecretReference
		err := json.Unmarshal(body, &akvsr)
		return akvsr, err
	default:
		return nil, errors.New("Unsupported type")
	}
}
func unmarshalAzureKeyVaultReferenceArray(body []byte) ([]AzureKeyVaultReference, error) {
	var rawMessages []*json.RawMessage
	err := json.Unmarshal(body, &rawMessages)
	if err != nil {
		return nil, err
	}

	akvrArray := make([]AzureKeyVaultReference, len(rawMessages))

	for index, rawMessage := range rawMessages {
		akvr, err := unmarshalAzureKeyVaultReference(*rawMessage)
		if err != nil {
			return nil, err
		}
		akvrArray[index] = akvr
	}
	return akvrArray, nil
}

// AzureKeyVaultSecretReference is azure Key Vault Secret properties.
type AzureKeyVaultSecretReference struct {
	Store         *LinkedServiceReference    `json:"store,omitempty"`
	Type          TypeAzureKeyVaultReference `json:"type,omitempty"`
	SecretName    *map[string]interface{}    `json:"secretName,omitempty"`
	SecretVersion *map[string]interface{}    `json:"secretVersion,omitempty"`
}

// MarshalJSON is the custom marshaler for AzureKeyVaultSecretReference.
func (akvsr AzureKeyVaultSecretReference) MarshalJSON() ([]byte, error) {
	akvsr.Type = TypeAzureKeyVaultSecret
	type Alias AzureKeyVaultSecretReference
	return json.Marshal(&struct {
		Alias
	}{
		Alias: (Alias)(akvsr),
	})
}

// AsAzureKeyVaultSecretReference is the AzureKeyVaultReference implementation for AzureKeyVaultSecretReference.
func (akvsr AzureKeyVaultSecretReference) AsAzureKeyVaultSecretReference() (*AzureKeyVaultSecretReference, bool) {
	return &akvsr, true
}

// AzureMLBatchExecutionActivity is azure ML Batch Execution activity.
type AzureMLBatchExecutionActivity struct {
	Name                                         *string                 `json:"name,omitempty"`
	Description                                  *string                 `json:"description,omitempty"`
	DependsOn                                    *[]ActivityDependency   `json:"dependsOn,omitempty"`
	Type                                         TypeActivity            `json:"type,omitempty"`
	LinkedServiceName                            *LinkedServiceReference `json:"linkedServiceName,omitempty"`
	Policy                                       *ActivityPolicy         `json:"policy,omitempty"`
	*AzureMLBatchExecutionActivityTypeProperties `json:"typeProperties,omitempty"`
}

// MarshalJSON is the custom marshaler for AzureMLBatchExecutionActivity.
func (ambea AzureMLBatchExecutionActivity) MarshalJSON() ([]byte, error) {
	ambea.Type = TypeAzureMLBatchExecution
	type Alias AzureMLBatchExecutionActivity
	return json.Marshal(&struct {
		Alias
	}{
		Alias: (Alias)(ambea),
	})
}

// AsDataLakeAnalyticsUSQLActivity is the ExecutionActivity implementation for AzureMLBatchExecutionActivity.
func (ambea AzureMLBatchExecutionActivity) AsDataLakeAnalyticsUSQLActivity() (*DataLakeAnalyticsUSQLActivity, bool) {
	return nil, false
}

// AsAzureMLUpdateResourceActivity is the ExecutionActivity implementation for AzureMLBatchExecutionActivity.
func (ambea AzureMLBatchExecutionActivity) AsAzureMLUpdateResourceActivity() (*AzureMLUpdateResourceActivity, bool) {
	return nil, false
}

// AsAzureMLBatchExecutionActivity is the ExecutionActivity implementation for AzureMLBatchExecutionActivity.
func (ambea AzureMLBatchExecutionActivity) AsAzureMLBatchExecutionActivity() (*AzureMLBatchExecutionActivity, bool) {
	return &ambea, true
}

// AsGetMetadataActivity is the ExecutionActivity implementation for AzureMLBatchExecutionActivity.
func (ambea AzureMLBatchExecutionActivity) AsGetMetadataActivity() (*GetMetadataActivity, bool) {
	return nil, false
}

// AsWebActivity is the ExecutionActivity implementation for AzureMLBatchExecutionActivity.
func (ambea AzureMLBatchExecutionActivity) AsWebActivity() (*WebActivity, bool) {
	return nil, false
}

// AsLookupActivity is the ExecutionActivity implementation for AzureMLBatchExecutionActivity.
func (ambea AzureMLBatchExecutionActivity) AsLookupActivity() (*LookupActivity, bool) {
	return nil, false
}

// AsSQLServerStoredProcedureActivity is the ExecutionActivity implementation for AzureMLBatchExecutionActivity.
func (ambea AzureMLBatchExecutionActivity) AsSQLServerStoredProcedureActivity() (*SQLServerStoredProcedureActivity, bool) {
	return nil, false
}

// AsCustomActivity is the ExecutionActivity implementation for AzureMLBatchExecutionActivity.
func (ambea AzureMLBatchExecutionActivity) AsCustomActivity() (*CustomActivity, bool) {
	return nil, false
}

// AsHDInsightSparkActivity is the ExecutionActivity implementation for AzureMLBatchExecutionActivity.
func (ambea AzureMLBatchExecutionActivity) AsHDInsightSparkActivity() (*HDInsightSparkActivity, bool) {
	return nil, false
}

// AsHDInsightStreamingActivity is the ExecutionActivity implementation for AzureMLBatchExecutionActivity.
func (ambea AzureMLBatchExecutionActivity) AsHDInsightStreamingActivity() (*HDInsightStreamingActivity, bool) {
	return nil, false
}

// AsHDInsightMapReduceActivity is the ExecutionActivity implementation for AzureMLBatchExecutionActivity.
func (ambea AzureMLBatchExecutionActivity) AsHDInsightMapReduceActivity() (*HDInsightMapReduceActivity, bool) {
	return nil, false
}

// AsHDInsightPigActivity is the ExecutionActivity implementation for AzureMLBatchExecutionActivity.
func (ambea AzureMLBatchExecutionActivity) AsHDInsightPigActivity() (*HDInsightPigActivity, bool) {
	return nil, false
}

// AsHDInsightHiveActivity is the ExecutionActivity implementation for AzureMLBatchExecutionActivity.
func (ambea AzureMLBatchExecutionActivity) AsHDInsightHiveActivity() (*HDInsightHiveActivity, bool) {
	return nil, false
}

// AsCopyActivity is the ExecutionActivity implementation for AzureMLBatchExecutionActivity.
func (ambea AzureMLBatchExecutionActivity) AsCopyActivity() (*CopyActivity, bool) {
	return nil, false
}

// AsExecutionActivity is the ExecutionActivity implementation for AzureMLBatchExecutionActivity.
func (ambea AzureMLBatchExecutionActivity) AsExecutionActivity() (*ExecutionActivity, bool) {
	return nil, false
}

// AsUntilActivity is the ExecutionActivity implementation for AzureMLBatchExecutionActivity.
func (ambea AzureMLBatchExecutionActivity) AsUntilActivity() (*UntilActivity, bool) {
	return nil, false
}

// AsWaitActivity is the ExecutionActivity implementation for AzureMLBatchExecutionActivity.
func (ambea AzureMLBatchExecutionActivity) AsWaitActivity() (*WaitActivity, bool) {
	return nil, false
}

// AsForEachActivity is the ExecutionActivity implementation for AzureMLBatchExecutionActivity.
func (ambea AzureMLBatchExecutionActivity) AsForEachActivity() (*ForEachActivity, bool) {
	return nil, false
}

// AsIfConditionActivity is the ExecutionActivity implementation for AzureMLBatchExecutionActivity.
func (ambea AzureMLBatchExecutionActivity) AsIfConditionActivity() (*IfConditionActivity, bool) {
	return nil, false
}

// AsExecutePipelineActivity is the ExecutionActivity implementation for AzureMLBatchExecutionActivity.
func (ambea AzureMLBatchExecutionActivity) AsExecutePipelineActivity() (*ExecutePipelineActivity, bool) {
	return nil, false
}

// AsControlActivity is the ExecutionActivity implementation for AzureMLBatchExecutionActivity.
func (ambea AzureMLBatchExecutionActivity) AsControlActivity() (*ControlActivity, bool) {
	return nil, false
}

// AzureMLBatchExecutionActivityTypeProperties is azure ML Batch Execution activity properties.
type AzureMLBatchExecutionActivityTypeProperties struct {
	GlobalParameters  *map[string]*map[string]interface{} `json:"globalParameters,omitempty"`
	WebServiceOutputs *map[string]*AzureMLWebServiceFile  `json:"webServiceOutputs,omitempty"`
	WebServiceInputs  *map[string]*AzureMLWebServiceFile  `json:"webServiceInputs,omitempty"`
}

// AzureMLLinkedService is azure ML Web Service linked service.
type AzureMLLinkedService struct {
	ConnectVia                          *IntegrationRuntimeReference `json:"connectVia,omitempty"`
	Description                         *string                      `json:"description,omitempty"`
	Type                                TypeLinkedService            `json:"type,omitempty"`
	*AzureMLLinkedServiceTypeProperties `json:"typeProperties,omitempty"`
}

// MarshalJSON is the custom marshaler for AzureMLLinkedService.
func (amls AzureMLLinkedService) MarshalJSON() ([]byte, error) {
	amls.Type = TypeAzureML
	type Alias AzureMLLinkedService
	return json.Marshal(&struct {
		Alias
	}{
		Alias: (Alias)(amls),
	})
}

// AsAzureDataLakeAnalyticsLinkedService is the LinkedService implementation for AzureMLLinkedService.
func (amls AzureMLLinkedService) AsAzureDataLakeAnalyticsLinkedService() (*AzureDataLakeAnalyticsLinkedService, bool) {
	return nil, false
}

// AsHDInsightOnDemandLinkedService is the LinkedService implementation for AzureMLLinkedService.
func (amls AzureMLLinkedService) AsHDInsightOnDemandLinkedService() (*HDInsightOnDemandLinkedService, bool) {
	return nil, false
}

// AsSapHanaLinkedService is the LinkedService implementation for AzureMLLinkedService.
func (amls AzureMLLinkedService) AsSapHanaLinkedService() (*SapHanaLinkedService, bool) {
	return nil, false
}

// AsSapBWLinkedService is the LinkedService implementation for AzureMLLinkedService.
func (amls AzureMLLinkedService) AsSapBWLinkedService() (*SapBWLinkedService, bool) {
	return nil, false
}

// AsSftpServerLinkedService is the LinkedService implementation for AzureMLLinkedService.
func (amls AzureMLLinkedService) AsSftpServerLinkedService() (*SftpServerLinkedService, bool) {
	return nil, false
}

// AsFtpServerLinkedService is the LinkedService implementation for AzureMLLinkedService.
func (amls AzureMLLinkedService) AsFtpServerLinkedService() (*FtpServerLinkedService, bool) {
	return nil, false
}

// AsHTTPLinkedService is the LinkedService implementation for AzureMLLinkedService.
func (amls AzureMLLinkedService) AsHTTPLinkedService() (*HTTPLinkedService, bool) {
	return nil, false
}

// AsAzureSearchLinkedService is the LinkedService implementation for AzureMLLinkedService.
func (amls AzureMLLinkedService) AsAzureSearchLinkedService() (*AzureSearchLinkedService, bool) {
	return nil, false
}

// AsCustomDataSourceLinkedService is the LinkedService implementation for AzureMLLinkedService.
func (amls AzureMLLinkedService) AsCustomDataSourceLinkedService() (*CustomDataSourceLinkedService, bool) {
	return nil, false
}

// AsAmazonRedshiftLinkedService is the LinkedService implementation for AzureMLLinkedService.
func (amls AzureMLLinkedService) AsAmazonRedshiftLinkedService() (*AmazonRedshiftLinkedService, bool) {
	return nil, false
}

// AsAmazonS3LinkedService is the LinkedService implementation for AzureMLLinkedService.
func (amls AzureMLLinkedService) AsAmazonS3LinkedService() (*AmazonS3LinkedService, bool) {
	return nil, false
}

// AsSalesforceLinkedService is the LinkedService implementation for AzureMLLinkedService.
func (amls AzureMLLinkedService) AsSalesforceLinkedService() (*SalesforceLinkedService, bool) {
	return nil, false
}

// AsAzureDataLakeStoreLinkedService is the LinkedService implementation for AzureMLLinkedService.
func (amls AzureMLLinkedService) AsAzureDataLakeStoreLinkedService() (*AzureDataLakeStoreLinkedService, bool) {
	return nil, false
}

// AsMongoDbLinkedService is the LinkedService implementation for AzureMLLinkedService.
func (amls AzureMLLinkedService) AsMongoDbLinkedService() (*MongoDbLinkedService, bool) {
	return nil, false
}

// AsCassandraLinkedService is the LinkedService implementation for AzureMLLinkedService.
func (amls AzureMLLinkedService) AsCassandraLinkedService() (*CassandraLinkedService, bool) {
	return nil, false
}

// AsWebLinkedService is the LinkedService implementation for AzureMLLinkedService.
func (amls AzureMLLinkedService) AsWebLinkedService() (*WebLinkedService, bool) {
	return nil, false
}

// AsODataLinkedService is the LinkedService implementation for AzureMLLinkedService.
func (amls AzureMLLinkedService) AsODataLinkedService() (*ODataLinkedService, bool) {
	return nil, false
}

// AsHdfsLinkedService is the LinkedService implementation for AzureMLLinkedService.
func (amls AzureMLLinkedService) AsHdfsLinkedService() (*HdfsLinkedService, bool) {
	return nil, false
}

// AsOdbcLinkedService is the LinkedService implementation for AzureMLLinkedService.
func (amls AzureMLLinkedService) AsOdbcLinkedService() (*OdbcLinkedService, bool) {
	return nil, false
}

// AsAzureMLLinkedService is the LinkedService implementation for AzureMLLinkedService.
func (amls AzureMLLinkedService) AsAzureMLLinkedService() (*AzureMLLinkedService, bool) {
	return &amls, true
}

// AsTeradataLinkedService is the LinkedService implementation for AzureMLLinkedService.
func (amls AzureMLLinkedService) AsTeradataLinkedService() (*TeradataLinkedService, bool) {
	return nil, false
}

// AsDb2LinkedService is the LinkedService implementation for AzureMLLinkedService.
func (amls AzureMLLinkedService) AsDb2LinkedService() (*Db2LinkedService, bool) {
	return nil, false
}

// AsSybaseLinkedService is the LinkedService implementation for AzureMLLinkedService.
func (amls AzureMLLinkedService) AsSybaseLinkedService() (*SybaseLinkedService, bool) {
	return nil, false
}

// AsPostgreSQLLinkedService is the LinkedService implementation for AzureMLLinkedService.
func (amls AzureMLLinkedService) AsPostgreSQLLinkedService() (*PostgreSQLLinkedService, bool) {
	return nil, false
}

// AsMySQLLinkedService is the LinkedService implementation for AzureMLLinkedService.
func (amls AzureMLLinkedService) AsMySQLLinkedService() (*MySQLLinkedService, bool) {
	return nil, false
}

// AsOracleLinkedService is the LinkedService implementation for AzureMLLinkedService.
func (amls AzureMLLinkedService) AsOracleLinkedService() (*OracleLinkedService, bool) {
	return nil, false
}

// AsFileServerLinkedService is the LinkedService implementation for AzureMLLinkedService.
func (amls AzureMLLinkedService) AsFileServerLinkedService() (*FileServerLinkedService, bool) {
	return nil, false
}

// AsHDInsightLinkedService is the LinkedService implementation for AzureMLLinkedService.
func (amls AzureMLLinkedService) AsHDInsightLinkedService() (*HDInsightLinkedService, bool) {
	return nil, false
}

// AsDynamicsLinkedService is the LinkedService implementation for AzureMLLinkedService.
func (amls AzureMLLinkedService) AsDynamicsLinkedService() (*DynamicsLinkedService, bool) {
	return nil, false
}

// AsCosmosDbLinkedService is the LinkedService implementation for AzureMLLinkedService.
func (amls AzureMLLinkedService) AsCosmosDbLinkedService() (*CosmosDbLinkedService, bool) {
	return nil, false
}

// AsAzureKeyVaultLinkedService is the LinkedService implementation for AzureMLLinkedService.
func (amls AzureMLLinkedService) AsAzureKeyVaultLinkedService() (*AzureKeyVaultLinkedService, bool) {
	return nil, false
}

// AsAzureBatchLinkedService is the LinkedService implementation for AzureMLLinkedService.
func (amls AzureMLLinkedService) AsAzureBatchLinkedService() (*AzureBatchLinkedService, bool) {
	return nil, false
}

// AsAzureSQLDatabaseLinkedService is the LinkedService implementation for AzureMLLinkedService.
func (amls AzureMLLinkedService) AsAzureSQLDatabaseLinkedService() (*AzureSQLDatabaseLinkedService, bool) {
	return nil, false
}

// AsSQLServerLinkedService is the LinkedService implementation for AzureMLLinkedService.
func (amls AzureMLLinkedService) AsSQLServerLinkedService() (*SQLServerLinkedService, bool) {
	return nil, false
}

// AsAzureSQLDWLinkedService is the LinkedService implementation for AzureMLLinkedService.
func (amls AzureMLLinkedService) AsAzureSQLDWLinkedService() (*AzureSQLDWLinkedService, bool) {
	return nil, false
}

// AsAzureStorageLinkedService is the LinkedService implementation for AzureMLLinkedService.
func (amls AzureMLLinkedService) AsAzureStorageLinkedService() (*AzureStorageLinkedService, bool) {
	return nil, false
}

// AzureMLLinkedServiceTypeProperties is azure ML Web Service linked service properties.
type AzureMLLinkedServiceTypeProperties struct {
	MlEndpoint             *map[string]interface{} `json:"mlEndpoint,omitempty"`
	APIKey                 *SecureString           `json:"apiKey,omitempty"`
	UpdateResourceEndpoint *map[string]interface{} `json:"updateResourceEndpoint,omitempty"`
	ServicePrincipalID     *map[string]interface{} `json:"servicePrincipalId,omitempty"`
	ServicePrincipalKey    *SecureString           `json:"servicePrincipalKey,omitempty"`
	Tenant                 *map[string]interface{} `json:"tenant,omitempty"`
	EncryptedCredential    *map[string]interface{} `json:"encryptedCredential,omitempty"`
}

// AzureMLUpdateResourceActivity is azure ML Update Resource management activity.
type AzureMLUpdateResourceActivity struct {
	Name                                         *string                 `json:"name,omitempty"`
	Description                                  *string                 `json:"description,omitempty"`
	DependsOn                                    *[]ActivityDependency   `json:"dependsOn,omitempty"`
	Type                                         TypeActivity            `json:"type,omitempty"`
	LinkedServiceName                            *LinkedServiceReference `json:"linkedServiceName,omitempty"`
	Policy                                       *ActivityPolicy         `json:"policy,omitempty"`
	*AzureMLUpdateResourceActivityTypeProperties `json:"typeProperties,omitempty"`
}

// MarshalJSON is the custom marshaler for AzureMLUpdateResourceActivity.
func (amura AzureMLUpdateResourceActivity) MarshalJSON() ([]byte, error) {
	amura.Type = TypeAzureMLUpdateResource
	type Alias AzureMLUpdateResourceActivity
	return json.Marshal(&struct {
		Alias
	}{
		Alias: (Alias)(amura),
	})
}

// AsDataLakeAnalyticsUSQLActivity is the ExecutionActivity implementation for AzureMLUpdateResourceActivity.
func (amura AzureMLUpdateResourceActivity) AsDataLakeAnalyticsUSQLActivity() (*DataLakeAnalyticsUSQLActivity, bool) {
	return nil, false
}

// AsAzureMLUpdateResourceActivity is the ExecutionActivity implementation for AzureMLUpdateResourceActivity.
func (amura AzureMLUpdateResourceActivity) AsAzureMLUpdateResourceActivity() (*AzureMLUpdateResourceActivity, bool) {
	return &amura, true
}

// AsAzureMLBatchExecutionActivity is the ExecutionActivity implementation for AzureMLUpdateResourceActivity.
func (amura AzureMLUpdateResourceActivity) AsAzureMLBatchExecutionActivity() (*AzureMLBatchExecutionActivity, bool) {
	return nil, false
}

// AsGetMetadataActivity is the ExecutionActivity implementation for AzureMLUpdateResourceActivity.
func (amura AzureMLUpdateResourceActivity) AsGetMetadataActivity() (*GetMetadataActivity, bool) {
	return nil, false
}

// AsWebActivity is the ExecutionActivity implementation for AzureMLUpdateResourceActivity.
func (amura AzureMLUpdateResourceActivity) AsWebActivity() (*WebActivity, bool) {
	return nil, false
}

// AsLookupActivity is the ExecutionActivity implementation for AzureMLUpdateResourceActivity.
func (amura AzureMLUpdateResourceActivity) AsLookupActivity() (*LookupActivity, bool) {
	return nil, false
}

// AsSQLServerStoredProcedureActivity is the ExecutionActivity implementation for AzureMLUpdateResourceActivity.
func (amura AzureMLUpdateResourceActivity) AsSQLServerStoredProcedureActivity() (*SQLServerStoredProcedureActivity, bool) {
	return nil, false
}

// AsCustomActivity is the ExecutionActivity implementation for AzureMLUpdateResourceActivity.
func (amura AzureMLUpdateResourceActivity) AsCustomActivity() (*CustomActivity, bool) {
	return nil, false
}

// AsHDInsightSparkActivity is the ExecutionActivity implementation for AzureMLUpdateResourceActivity.
func (amura AzureMLUpdateResourceActivity) AsHDInsightSparkActivity() (*HDInsightSparkActivity, bool) {
	return nil, false
}

// AsHDInsightStreamingActivity is the ExecutionActivity implementation for AzureMLUpdateResourceActivity.
func (amura AzureMLUpdateResourceActivity) AsHDInsightStreamingActivity() (*HDInsightStreamingActivity, bool) {
	return nil, false
}

// AsHDInsightMapReduceActivity is the ExecutionActivity implementation for AzureMLUpdateResourceActivity.
func (amura AzureMLUpdateResourceActivity) AsHDInsightMapReduceActivity() (*HDInsightMapReduceActivity, bool) {
	return nil, false
}

// AsHDInsightPigActivity is the ExecutionActivity implementation for AzureMLUpdateResourceActivity.
func (amura AzureMLUpdateResourceActivity) AsHDInsightPigActivity() (*HDInsightPigActivity, bool) {
	return nil, false
}

// AsHDInsightHiveActivity is the ExecutionActivity implementation for AzureMLUpdateResourceActivity.
func (amura AzureMLUpdateResourceActivity) AsHDInsightHiveActivity() (*HDInsightHiveActivity, bool) {
	return nil, false
}

// AsCopyActivity is the ExecutionActivity implementation for AzureMLUpdateResourceActivity.
func (amura AzureMLUpdateResourceActivity) AsCopyActivity() (*CopyActivity, bool) {
	return nil, false
}

// AsExecutionActivity is the ExecutionActivity implementation for AzureMLUpdateResourceActivity.
func (amura AzureMLUpdateResourceActivity) AsExecutionActivity() (*ExecutionActivity, bool) {
	return nil, false
}

// AsUntilActivity is the ExecutionActivity implementation for AzureMLUpdateResourceActivity.
func (amura AzureMLUpdateResourceActivity) AsUntilActivity() (*UntilActivity, bool) {
	return nil, false
}

// AsWaitActivity is the ExecutionActivity implementation for AzureMLUpdateResourceActivity.
func (amura AzureMLUpdateResourceActivity) AsWaitActivity() (*WaitActivity, bool) {
	return nil, false
}

// AsForEachActivity is the ExecutionActivity implementation for AzureMLUpdateResourceActivity.
func (amura AzureMLUpdateResourceActivity) AsForEachActivity() (*ForEachActivity, bool) {
	return nil, false
}

// AsIfConditionActivity is the ExecutionActivity implementation for AzureMLUpdateResourceActivity.
func (amura AzureMLUpdateResourceActivity) AsIfConditionActivity() (*IfConditionActivity, bool) {
	return nil, false
}

// AsExecutePipelineActivity is the ExecutionActivity implementation for AzureMLUpdateResourceActivity.
func (amura AzureMLUpdateResourceActivity) AsExecutePipelineActivity() (*ExecutePipelineActivity, bool) {
	return nil, false
}

// AsControlActivity is the ExecutionActivity implementation for AzureMLUpdateResourceActivity.
func (amura AzureMLUpdateResourceActivity) AsControlActivity() (*ControlActivity, bool) {
	return nil, false
}

// AzureMLUpdateResourceActivityTypeProperties is azure ML Update Resource activity properties.
type AzureMLUpdateResourceActivityTypeProperties struct {
	TrainedModelName              *map[string]interface{} `json:"trainedModelName,omitempty"`
	TrainedModelLinkedServiceName *LinkedServiceReference `json:"trainedModelLinkedServiceName,omitempty"`
	TrainedModelFilePath          *map[string]interface{} `json:"trainedModelFilePath,omitempty"`
}

// AzureMLWebServiceFile is azure ML WebService Input/Output file
type AzureMLWebServiceFile struct {
	FilePath          *map[string]interface{} `json:"filePath,omitempty"`
	LinkedServiceName *LinkedServiceReference `json:"linkedServiceName,omitempty"`
}

// AzureQueueSink is a copy activity Azure Queue sink.
type AzureQueueSink struct {
	WriteBatchSize    *map[string]interface{} `json:"writeBatchSize,omitempty"`
	WriteBatchTimeout *map[string]interface{} `json:"writeBatchTimeout,omitempty"`
	SinkRetryCount    *map[string]interface{} `json:"sinkRetryCount,omitempty"`
	SinkRetryWait     *map[string]interface{} `json:"sinkRetryWait,omitempty"`
	Type              TypeCopySink            `json:"type,omitempty"`
}

// MarshalJSON is the custom marshaler for AzureQueueSink.
func (aqs AzureQueueSink) MarshalJSON() ([]byte, error) {
	aqs.Type = TypeAzureQueueSink
	type Alias AzureQueueSink
	return json.Marshal(&struct {
		Alias
	}{
		Alias: (Alias)(aqs),
	})
}

// AsOdbcSink is the CopySink implementation for AzureQueueSink.
func (aqs AzureQueueSink) AsOdbcSink() (*OdbcSink, bool) {
	return nil, false
}

// AsAzureSearchIndexSink is the CopySink implementation for AzureQueueSink.
func (aqs AzureQueueSink) AsAzureSearchIndexSink() (*AzureSearchIndexSink, bool) {
	return nil, false
}

// AsAzureDataLakeStoreSink is the CopySink implementation for AzureQueueSink.
func (aqs AzureQueueSink) AsAzureDataLakeStoreSink() (*AzureDataLakeStoreSink, bool) {
	return nil, false
}

// AsOracleSink is the CopySink implementation for AzureQueueSink.
func (aqs AzureQueueSink) AsOracleSink() (*OracleSink, bool) {
	return nil, false
}

// AsSQLDWSink is the CopySink implementation for AzureQueueSink.
func (aqs AzureQueueSink) AsSQLDWSink() (*SQLDWSink, bool) {
	return nil, false
}

// AsSQLSink is the CopySink implementation for AzureQueueSink.
func (aqs AzureQueueSink) AsSQLSink() (*SQLSink, bool) {
	return nil, false
}

// AsDocumentDbCollectionSink is the CopySink implementation for AzureQueueSink.
func (aqs AzureQueueSink) AsDocumentDbCollectionSink() (*DocumentDbCollectionSink, bool) {
	return nil, false
}

// AsFileSystemSink is the CopySink implementation for AzureQueueSink.
func (aqs AzureQueueSink) AsFileSystemSink() (*FileSystemSink, bool) {
	return nil, false
}

// AsBlobSink is the CopySink implementation for AzureQueueSink.
func (aqs AzureQueueSink) AsBlobSink() (*BlobSink, bool) {
	return nil, false
}

// AsAzureTableSink is the CopySink implementation for AzureQueueSink.
func (aqs AzureQueueSink) AsAzureTableSink() (*AzureTableSink, bool) {
	return nil, false
}

// AsAzureQueueSink is the CopySink implementation for AzureQueueSink.
func (aqs AzureQueueSink) AsAzureQueueSink() (*AzureQueueSink, bool) {
	return &aqs, true
}

// AzureSearchIndexDataset is the Azure Search Index.
type AzureSearchIndexDataset struct {
	Description                            *string                             `json:"description,omitempty"`
	Structure                              *map[string]interface{}             `json:"structure,omitempty"`
	LinkedServiceName                      *LinkedServiceReference             `json:"linkedServiceName,omitempty"`
	Parameters                             *map[string]*ParameterSpecification `json:"parameters,omitempty"`
	Type                                   TypeDataset                         `json:"type,omitempty"`
	*AzureSearchIndexDatasetTypeProperties `json:"typeProperties,omitempty"`
}

// MarshalJSON is the custom marshaler for AzureSearchIndexDataset.
func (asid AzureSearchIndexDataset) MarshalJSON() ([]byte, error) {
	asid.Type = TypeAzureSearchIndex
	type Alias AzureSearchIndexDataset
	return json.Marshal(&struct {
		Alias
	}{
		Alias: (Alias)(asid),
	})
}

// AsHTTPDataset is the Dataset implementation for AzureSearchIndexDataset.
func (asid AzureSearchIndexDataset) AsHTTPDataset() (*HTTPDataset, bool) {
	return nil, false
}

// AsAzureSearchIndexDataset is the Dataset implementation for AzureSearchIndexDataset.
func (asid AzureSearchIndexDataset) AsAzureSearchIndexDataset() (*AzureSearchIndexDataset, bool) {
	return &asid, true
}

// AsWebTableDataset is the Dataset implementation for AzureSearchIndexDataset.
func (asid AzureSearchIndexDataset) AsWebTableDataset() (*WebTableDataset, bool) {
	return nil, false
}

// AsSQLServerTableDataset is the Dataset implementation for AzureSearchIndexDataset.
func (asid AzureSearchIndexDataset) AsSQLServerTableDataset() (*SQLServerTableDataset, bool) {
	return nil, false
}

// AsRelationalTableDataset is the Dataset implementation for AzureSearchIndexDataset.
func (asid AzureSearchIndexDataset) AsRelationalTableDataset() (*RelationalTableDataset, bool) {
	return nil, false
}

// AsOracleTableDataset is the Dataset implementation for AzureSearchIndexDataset.
func (asid AzureSearchIndexDataset) AsOracleTableDataset() (*OracleTableDataset, bool) {
	return nil, false
}

// AsODataResourceDataset is the Dataset implementation for AzureSearchIndexDataset.
func (asid AzureSearchIndexDataset) AsODataResourceDataset() (*ODataResourceDataset, bool) {
	return nil, false
}

// AsMongoDbCollectionDataset is the Dataset implementation for AzureSearchIndexDataset.
func (asid AzureSearchIndexDataset) AsMongoDbCollectionDataset() (*MongoDbCollectionDataset, bool) {
	return nil, false
}

// AsFileShareDataset is the Dataset implementation for AzureSearchIndexDataset.
func (asid AzureSearchIndexDataset) AsFileShareDataset() (*FileShareDataset, bool) {
	return nil, false
}

// AsAzureDataLakeStoreDataset is the Dataset implementation for AzureSearchIndexDataset.
func (asid AzureSearchIndexDataset) AsAzureDataLakeStoreDataset() (*AzureDataLakeStoreDataset, bool) {
	return nil, false
}

// AsDynamicsEntityDataset is the Dataset implementation for AzureSearchIndexDataset.
func (asid AzureSearchIndexDataset) AsDynamicsEntityDataset() (*DynamicsEntityDataset, bool) {
	return nil, false
}

// AsDocumentDbCollectionDataset is the Dataset implementation for AzureSearchIndexDataset.
func (asid AzureSearchIndexDataset) AsDocumentDbCollectionDataset() (*DocumentDbCollectionDataset, bool) {
	return nil, false
}

// AsCustomDataset is the Dataset implementation for AzureSearchIndexDataset.
func (asid AzureSearchIndexDataset) AsCustomDataset() (*CustomDataset, bool) {
	return nil, false
}

// AsCassandraTableDataset is the Dataset implementation for AzureSearchIndexDataset.
func (asid AzureSearchIndexDataset) AsCassandraTableDataset() (*CassandraTableDataset, bool) {
	return nil, false
}

// AsAzureSQLDWTableDataset is the Dataset implementation for AzureSearchIndexDataset.
func (asid AzureSearchIndexDataset) AsAzureSQLDWTableDataset() (*AzureSQLDWTableDataset, bool) {
	return nil, false
}

// AsAzureSQLTableDataset is the Dataset implementation for AzureSearchIndexDataset.
func (asid AzureSearchIndexDataset) AsAzureSQLTableDataset() (*AzureSQLTableDataset, bool) {
	return nil, false
}

// AsAzureTableDataset is the Dataset implementation for AzureSearchIndexDataset.
func (asid AzureSearchIndexDataset) AsAzureTableDataset() (*AzureTableDataset, bool) {
	return nil, false
}

// AsAzureBlobDataset is the Dataset implementation for AzureSearchIndexDataset.
func (asid AzureSearchIndexDataset) AsAzureBlobDataset() (*AzureBlobDataset, bool) {
	return nil, false
}

// AsAmazonS3Dataset is the Dataset implementation for AzureSearchIndexDataset.
func (asid AzureSearchIndexDataset) AsAmazonS3Dataset() (*AmazonS3Dataset, bool) {
	return nil, false
}

// AzureSearchIndexDatasetTypeProperties is properties specific to this dataset type.
type AzureSearchIndexDatasetTypeProperties struct {
	IndexName *map[string]interface{} `json:"indexName,omitempty"`
}

// AzureSearchIndexSink is a copy activity Azure Search Index sink.
type AzureSearchIndexSink struct {
	WriteBatchSize    *map[string]interface{}           `json:"writeBatchSize,omitempty"`
	WriteBatchTimeout *map[string]interface{}           `json:"writeBatchTimeout,omitempty"`
	SinkRetryCount    *map[string]interface{}           `json:"sinkRetryCount,omitempty"`
	SinkRetryWait     *map[string]interface{}           `json:"sinkRetryWait,omitempty"`
	Type              TypeCopySink                      `json:"type,omitempty"`
	WriteBehavior     AzureSearchIndexWriteBehaviorType `json:"writeBehavior,omitempty"`
}

// MarshalJSON is the custom marshaler for AzureSearchIndexSink.
func (asis AzureSearchIndexSink) MarshalJSON() ([]byte, error) {
	asis.Type = TypeAzureSearchIndexSink
	type Alias AzureSearchIndexSink
	return json.Marshal(&struct {
		Alias
	}{
		Alias: (Alias)(asis),
	})
}

// AsOdbcSink is the CopySink implementation for AzureSearchIndexSink.
func (asis AzureSearchIndexSink) AsOdbcSink() (*OdbcSink, bool) {
	return nil, false
}

// AsAzureSearchIndexSink is the CopySink implementation for AzureSearchIndexSink.
func (asis AzureSearchIndexSink) AsAzureSearchIndexSink() (*AzureSearchIndexSink, bool) {
	return &asis, true
}

// AsAzureDataLakeStoreSink is the CopySink implementation for AzureSearchIndexSink.
func (asis AzureSearchIndexSink) AsAzureDataLakeStoreSink() (*AzureDataLakeStoreSink, bool) {
	return nil, false
}

// AsOracleSink is the CopySink implementation for AzureSearchIndexSink.
func (asis AzureSearchIndexSink) AsOracleSink() (*OracleSink, bool) {
	return nil, false
}

// AsSQLDWSink is the CopySink implementation for AzureSearchIndexSink.
func (asis AzureSearchIndexSink) AsSQLDWSink() (*SQLDWSink, bool) {
	return nil, false
}

// AsSQLSink is the CopySink implementation for AzureSearchIndexSink.
func (asis AzureSearchIndexSink) AsSQLSink() (*SQLSink, bool) {
	return nil, false
}

// AsDocumentDbCollectionSink is the CopySink implementation for AzureSearchIndexSink.
func (asis AzureSearchIndexSink) AsDocumentDbCollectionSink() (*DocumentDbCollectionSink, bool) {
	return nil, false
}

// AsFileSystemSink is the CopySink implementation for AzureSearchIndexSink.
func (asis AzureSearchIndexSink) AsFileSystemSink() (*FileSystemSink, bool) {
	return nil, false
}

// AsBlobSink is the CopySink implementation for AzureSearchIndexSink.
func (asis AzureSearchIndexSink) AsBlobSink() (*BlobSink, bool) {
	return nil, false
}

// AsAzureTableSink is the CopySink implementation for AzureSearchIndexSink.
func (asis AzureSearchIndexSink) AsAzureTableSink() (*AzureTableSink, bool) {
	return nil, false
}

// AsAzureQueueSink is the CopySink implementation for AzureSearchIndexSink.
func (asis AzureSearchIndexSink) AsAzureQueueSink() (*AzureQueueSink, bool) {
	return nil, false
}

// AzureSearchLinkedService is linked service for Windows Azure Search Service.
type AzureSearchLinkedService struct {
	ConnectVia                              *IntegrationRuntimeReference `json:"connectVia,omitempty"`
	Description                             *string                      `json:"description,omitempty"`
	Type                                    TypeLinkedService            `json:"type,omitempty"`
	*AzureSearchLinkedServiceTypeProperties `json:"typeProperties,omitempty"`
}

// MarshalJSON is the custom marshaler for AzureSearchLinkedService.
func (asls AzureSearchLinkedService) MarshalJSON() ([]byte, error) {
	asls.Type = TypeAzureSearch
	type Alias AzureSearchLinkedService
	return json.Marshal(&struct {
		Alias
	}{
		Alias: (Alias)(asls),
	})
}

// AsAzureDataLakeAnalyticsLinkedService is the LinkedService implementation for AzureSearchLinkedService.
func (asls AzureSearchLinkedService) AsAzureDataLakeAnalyticsLinkedService() (*AzureDataLakeAnalyticsLinkedService, bool) {
	return nil, false
}

// AsHDInsightOnDemandLinkedService is the LinkedService implementation for AzureSearchLinkedService.
func (asls AzureSearchLinkedService) AsHDInsightOnDemandLinkedService() (*HDInsightOnDemandLinkedService, bool) {
	return nil, false
}

// AsSapHanaLinkedService is the LinkedService implementation for AzureSearchLinkedService.
func (asls AzureSearchLinkedService) AsSapHanaLinkedService() (*SapHanaLinkedService, bool) {
	return nil, false
}

// AsSapBWLinkedService is the LinkedService implementation for AzureSearchLinkedService.
func (asls AzureSearchLinkedService) AsSapBWLinkedService() (*SapBWLinkedService, bool) {
	return nil, false
}

// AsSftpServerLinkedService is the LinkedService implementation for AzureSearchLinkedService.
func (asls AzureSearchLinkedService) AsSftpServerLinkedService() (*SftpServerLinkedService, bool) {
	return nil, false
}

// AsFtpServerLinkedService is the LinkedService implementation for AzureSearchLinkedService.
func (asls AzureSearchLinkedService) AsFtpServerLinkedService() (*FtpServerLinkedService, bool) {
	return nil, false
}

// AsHTTPLinkedService is the LinkedService implementation for AzureSearchLinkedService.
func (asls AzureSearchLinkedService) AsHTTPLinkedService() (*HTTPLinkedService, bool) {
	return nil, false
}

// AsAzureSearchLinkedService is the LinkedService implementation for AzureSearchLinkedService.
func (asls AzureSearchLinkedService) AsAzureSearchLinkedService() (*AzureSearchLinkedService, bool) {
	return &asls, true
}

// AsCustomDataSourceLinkedService is the LinkedService implementation for AzureSearchLinkedService.
func (asls AzureSearchLinkedService) AsCustomDataSourceLinkedService() (*CustomDataSourceLinkedService, bool) {
	return nil, false
}

// AsAmazonRedshiftLinkedService is the LinkedService implementation for AzureSearchLinkedService.
func (asls AzureSearchLinkedService) AsAmazonRedshiftLinkedService() (*AmazonRedshiftLinkedService, bool) {
	return nil, false
}

// AsAmazonS3LinkedService is the LinkedService implementation for AzureSearchLinkedService.
func (asls AzureSearchLinkedService) AsAmazonS3LinkedService() (*AmazonS3LinkedService, bool) {
	return nil, false
}

// AsSalesforceLinkedService is the LinkedService implementation for AzureSearchLinkedService.
func (asls AzureSearchLinkedService) AsSalesforceLinkedService() (*SalesforceLinkedService, bool) {
	return nil, false
}

// AsAzureDataLakeStoreLinkedService is the LinkedService implementation for AzureSearchLinkedService.
func (asls AzureSearchLinkedService) AsAzureDataLakeStoreLinkedService() (*AzureDataLakeStoreLinkedService, bool) {
	return nil, false
}

// AsMongoDbLinkedService is the LinkedService implementation for AzureSearchLinkedService.
func (asls AzureSearchLinkedService) AsMongoDbLinkedService() (*MongoDbLinkedService, bool) {
	return nil, false
}

// AsCassandraLinkedService is the LinkedService implementation for AzureSearchLinkedService.
func (asls AzureSearchLinkedService) AsCassandraLinkedService() (*CassandraLinkedService, bool) {
	return nil, false
}

// AsWebLinkedService is the LinkedService implementation for AzureSearchLinkedService.
func (asls AzureSearchLinkedService) AsWebLinkedService() (*WebLinkedService, bool) {
	return nil, false
}

// AsODataLinkedService is the LinkedService implementation for AzureSearchLinkedService.
func (asls AzureSearchLinkedService) AsODataLinkedService() (*ODataLinkedService, bool) {
	return nil, false
}

// AsHdfsLinkedService is the LinkedService implementation for AzureSearchLinkedService.
func (asls AzureSearchLinkedService) AsHdfsLinkedService() (*HdfsLinkedService, bool) {
	return nil, false
}

// AsOdbcLinkedService is the LinkedService implementation for AzureSearchLinkedService.
func (asls AzureSearchLinkedService) AsOdbcLinkedService() (*OdbcLinkedService, bool) {
	return nil, false
}

// AsAzureMLLinkedService is the LinkedService implementation for AzureSearchLinkedService.
func (asls AzureSearchLinkedService) AsAzureMLLinkedService() (*AzureMLLinkedService, bool) {
	return nil, false
}

// AsTeradataLinkedService is the LinkedService implementation for AzureSearchLinkedService.
func (asls AzureSearchLinkedService) AsTeradataLinkedService() (*TeradataLinkedService, bool) {
	return nil, false
}

// AsDb2LinkedService is the LinkedService implementation for AzureSearchLinkedService.
func (asls AzureSearchLinkedService) AsDb2LinkedService() (*Db2LinkedService, bool) {
	return nil, false
}

// AsSybaseLinkedService is the LinkedService implementation for AzureSearchLinkedService.
func (asls AzureSearchLinkedService) AsSybaseLinkedService() (*SybaseLinkedService, bool) {
	return nil, false
}

// AsPostgreSQLLinkedService is the LinkedService implementation for AzureSearchLinkedService.
func (asls AzureSearchLinkedService) AsPostgreSQLLinkedService() (*PostgreSQLLinkedService, bool) {
	return nil, false
}

// AsMySQLLinkedService is the LinkedService implementation for AzureSearchLinkedService.
func (asls AzureSearchLinkedService) AsMySQLLinkedService() (*MySQLLinkedService, bool) {
	return nil, false
}

// AsOracleLinkedService is the LinkedService implementation for AzureSearchLinkedService.
func (asls AzureSearchLinkedService) AsOracleLinkedService() (*OracleLinkedService, bool) {
	return nil, false
}

// AsFileServerLinkedService is the LinkedService implementation for AzureSearchLinkedService.
func (asls AzureSearchLinkedService) AsFileServerLinkedService() (*FileServerLinkedService, bool) {
	return nil, false
}

// AsHDInsightLinkedService is the LinkedService implementation for AzureSearchLinkedService.
func (asls AzureSearchLinkedService) AsHDInsightLinkedService() (*HDInsightLinkedService, bool) {
	return nil, false
}

// AsDynamicsLinkedService is the LinkedService implementation for AzureSearchLinkedService.
func (asls AzureSearchLinkedService) AsDynamicsLinkedService() (*DynamicsLinkedService, bool) {
	return nil, false
}

// AsCosmosDbLinkedService is the LinkedService implementation for AzureSearchLinkedService.
func (asls AzureSearchLinkedService) AsCosmosDbLinkedService() (*CosmosDbLinkedService, bool) {
	return nil, false
}

// AsAzureKeyVaultLinkedService is the LinkedService implementation for AzureSearchLinkedService.
func (asls AzureSearchLinkedService) AsAzureKeyVaultLinkedService() (*AzureKeyVaultLinkedService, bool) {
	return nil, false
}

// AsAzureBatchLinkedService is the LinkedService implementation for AzureSearchLinkedService.
func (asls AzureSearchLinkedService) AsAzureBatchLinkedService() (*AzureBatchLinkedService, bool) {
	return nil, false
}

// AsAzureSQLDatabaseLinkedService is the LinkedService implementation for AzureSearchLinkedService.
func (asls AzureSearchLinkedService) AsAzureSQLDatabaseLinkedService() (*AzureSQLDatabaseLinkedService, bool) {
	return nil, false
}

// AsSQLServerLinkedService is the LinkedService implementation for AzureSearchLinkedService.
func (asls AzureSearchLinkedService) AsSQLServerLinkedService() (*SQLServerLinkedService, bool) {
	return nil, false
}

// AsAzureSQLDWLinkedService is the LinkedService implementation for AzureSearchLinkedService.
func (asls AzureSearchLinkedService) AsAzureSQLDWLinkedService() (*AzureSQLDWLinkedService, bool) {
	return nil, false
}

// AsAzureStorageLinkedService is the LinkedService implementation for AzureSearchLinkedService.
func (asls AzureSearchLinkedService) AsAzureStorageLinkedService() (*AzureStorageLinkedService, bool) {
	return nil, false
}

// AzureSearchLinkedServiceTypeProperties is windows Azure Search Service linked service properties.
type AzureSearchLinkedServiceTypeProperties struct {
	URL                 *map[string]interface{} `json:"url,omitempty"`
	Key                 *SecureString           `json:"key,omitempty"`
	EncryptedCredential *map[string]interface{} `json:"encryptedCredential,omitempty"`
}

// AzureSQLDatabaseLinkedService is microsoft Azure SQL Database linked service.
type AzureSQLDatabaseLinkedService struct {
	ConnectVia                                   *IntegrationRuntimeReference `json:"connectVia,omitempty"`
	Description                                  *string                      `json:"description,omitempty"`
	Type                                         TypeLinkedService            `json:"type,omitempty"`
	*AzureSQLDatabaseLinkedServiceTypeProperties `json:"typeProperties,omitempty"`
}

// MarshalJSON is the custom marshaler for AzureSQLDatabaseLinkedService.
func (asdls AzureSQLDatabaseLinkedService) MarshalJSON() ([]byte, error) {
	asdls.Type = TypeAzureSQLDatabase
	type Alias AzureSQLDatabaseLinkedService
	return json.Marshal(&struct {
		Alias
	}{
		Alias: (Alias)(asdls),
	})
}

// AsAzureDataLakeAnalyticsLinkedService is the LinkedService implementation for AzureSQLDatabaseLinkedService.
func (asdls AzureSQLDatabaseLinkedService) AsAzureDataLakeAnalyticsLinkedService() (*AzureDataLakeAnalyticsLinkedService, bool) {
	return nil, false
}

// AsHDInsightOnDemandLinkedService is the LinkedService implementation for AzureSQLDatabaseLinkedService.
func (asdls AzureSQLDatabaseLinkedService) AsHDInsightOnDemandLinkedService() (*HDInsightOnDemandLinkedService, bool) {
	return nil, false
}

// AsSapHanaLinkedService is the LinkedService implementation for AzureSQLDatabaseLinkedService.
func (asdls AzureSQLDatabaseLinkedService) AsSapHanaLinkedService() (*SapHanaLinkedService, bool) {
	return nil, false
}

// AsSapBWLinkedService is the LinkedService implementation for AzureSQLDatabaseLinkedService.
func (asdls AzureSQLDatabaseLinkedService) AsSapBWLinkedService() (*SapBWLinkedService, bool) {
	return nil, false
}

// AsSftpServerLinkedService is the LinkedService implementation for AzureSQLDatabaseLinkedService.
func (asdls AzureSQLDatabaseLinkedService) AsSftpServerLinkedService() (*SftpServerLinkedService, bool) {
	return nil, false
}

// AsFtpServerLinkedService is the LinkedService implementation for AzureSQLDatabaseLinkedService.
func (asdls AzureSQLDatabaseLinkedService) AsFtpServerLinkedService() (*FtpServerLinkedService, bool) {
	return nil, false
}

// AsHTTPLinkedService is the LinkedService implementation for AzureSQLDatabaseLinkedService.
func (asdls AzureSQLDatabaseLinkedService) AsHTTPLinkedService() (*HTTPLinkedService, bool) {
	return nil, false
}

// AsAzureSearchLinkedService is the LinkedService implementation for AzureSQLDatabaseLinkedService.
func (asdls AzureSQLDatabaseLinkedService) AsAzureSearchLinkedService() (*AzureSearchLinkedService, bool) {
	return nil, false
}

// AsCustomDataSourceLinkedService is the LinkedService implementation for AzureSQLDatabaseLinkedService.
func (asdls AzureSQLDatabaseLinkedService) AsCustomDataSourceLinkedService() (*CustomDataSourceLinkedService, bool) {
	return nil, false
}

// AsAmazonRedshiftLinkedService is the LinkedService implementation for AzureSQLDatabaseLinkedService.
func (asdls AzureSQLDatabaseLinkedService) AsAmazonRedshiftLinkedService() (*AmazonRedshiftLinkedService, bool) {
	return nil, false
}

// AsAmazonS3LinkedService is the LinkedService implementation for AzureSQLDatabaseLinkedService.
func (asdls AzureSQLDatabaseLinkedService) AsAmazonS3LinkedService() (*AmazonS3LinkedService, bool) {
	return nil, false
}

// AsSalesforceLinkedService is the LinkedService implementation for AzureSQLDatabaseLinkedService.
func (asdls AzureSQLDatabaseLinkedService) AsSalesforceLinkedService() (*SalesforceLinkedService, bool) {
	return nil, false
}

// AsAzureDataLakeStoreLinkedService is the LinkedService implementation for AzureSQLDatabaseLinkedService.
func (asdls AzureSQLDatabaseLinkedService) AsAzureDataLakeStoreLinkedService() (*AzureDataLakeStoreLinkedService, bool) {
	return nil, false
}

// AsMongoDbLinkedService is the LinkedService implementation for AzureSQLDatabaseLinkedService.
func (asdls AzureSQLDatabaseLinkedService) AsMongoDbLinkedService() (*MongoDbLinkedService, bool) {
	return nil, false
}

// AsCassandraLinkedService is the LinkedService implementation for AzureSQLDatabaseLinkedService.
func (asdls AzureSQLDatabaseLinkedService) AsCassandraLinkedService() (*CassandraLinkedService, bool) {
	return nil, false
}

// AsWebLinkedService is the LinkedService implementation for AzureSQLDatabaseLinkedService.
func (asdls AzureSQLDatabaseLinkedService) AsWebLinkedService() (*WebLinkedService, bool) {
	return nil, false
}

// AsODataLinkedService is the LinkedService implementation for AzureSQLDatabaseLinkedService.
func (asdls AzureSQLDatabaseLinkedService) AsODataLinkedService() (*ODataLinkedService, bool) {
	return nil, false
}

// AsHdfsLinkedService is the LinkedService implementation for AzureSQLDatabaseLinkedService.
func (asdls AzureSQLDatabaseLinkedService) AsHdfsLinkedService() (*HdfsLinkedService, bool) {
	return nil, false
}

// AsOdbcLinkedService is the LinkedService implementation for AzureSQLDatabaseLinkedService.
func (asdls AzureSQLDatabaseLinkedService) AsOdbcLinkedService() (*OdbcLinkedService, bool) {
	return nil, false
}

// AsAzureMLLinkedService is the LinkedService implementation for AzureSQLDatabaseLinkedService.
func (asdls AzureSQLDatabaseLinkedService) AsAzureMLLinkedService() (*AzureMLLinkedService, bool) {
	return nil, false
}

// AsTeradataLinkedService is the LinkedService implementation for AzureSQLDatabaseLinkedService.
func (asdls AzureSQLDatabaseLinkedService) AsTeradataLinkedService() (*TeradataLinkedService, bool) {
	return nil, false
}

// AsDb2LinkedService is the LinkedService implementation for AzureSQLDatabaseLinkedService.
func (asdls AzureSQLDatabaseLinkedService) AsDb2LinkedService() (*Db2LinkedService, bool) {
	return nil, false
}

// AsSybaseLinkedService is the LinkedService implementation for AzureSQLDatabaseLinkedService.
func (asdls AzureSQLDatabaseLinkedService) AsSybaseLinkedService() (*SybaseLinkedService, bool) {
	return nil, false
}

// AsPostgreSQLLinkedService is the LinkedService implementation for AzureSQLDatabaseLinkedService.
func (asdls AzureSQLDatabaseLinkedService) AsPostgreSQLLinkedService() (*PostgreSQLLinkedService, bool) {
	return nil, false
}

// AsMySQLLinkedService is the LinkedService implementation for AzureSQLDatabaseLinkedService.
func (asdls AzureSQLDatabaseLinkedService) AsMySQLLinkedService() (*MySQLLinkedService, bool) {
	return nil, false
}

// AsOracleLinkedService is the LinkedService implementation for AzureSQLDatabaseLinkedService.
func (asdls AzureSQLDatabaseLinkedService) AsOracleLinkedService() (*OracleLinkedService, bool) {
	return nil, false
}

// AsFileServerLinkedService is the LinkedService implementation for AzureSQLDatabaseLinkedService.
func (asdls AzureSQLDatabaseLinkedService) AsFileServerLinkedService() (*FileServerLinkedService, bool) {
	return nil, false
}

// AsHDInsightLinkedService is the LinkedService implementation for AzureSQLDatabaseLinkedService.
func (asdls AzureSQLDatabaseLinkedService) AsHDInsightLinkedService() (*HDInsightLinkedService, bool) {
	return nil, false
}

// AsDynamicsLinkedService is the LinkedService implementation for AzureSQLDatabaseLinkedService.
func (asdls AzureSQLDatabaseLinkedService) AsDynamicsLinkedService() (*DynamicsLinkedService, bool) {
	return nil, false
}

// AsCosmosDbLinkedService is the LinkedService implementation for AzureSQLDatabaseLinkedService.
func (asdls AzureSQLDatabaseLinkedService) AsCosmosDbLinkedService() (*CosmosDbLinkedService, bool) {
	return nil, false
}

// AsAzureKeyVaultLinkedService is the LinkedService implementation for AzureSQLDatabaseLinkedService.
func (asdls AzureSQLDatabaseLinkedService) AsAzureKeyVaultLinkedService() (*AzureKeyVaultLinkedService, bool) {
	return nil, false
}

// AsAzureBatchLinkedService is the LinkedService implementation for AzureSQLDatabaseLinkedService.
func (asdls AzureSQLDatabaseLinkedService) AsAzureBatchLinkedService() (*AzureBatchLinkedService, bool) {
	return nil, false
}

// AsAzureSQLDatabaseLinkedService is the LinkedService implementation for AzureSQLDatabaseLinkedService.
func (asdls AzureSQLDatabaseLinkedService) AsAzureSQLDatabaseLinkedService() (*AzureSQLDatabaseLinkedService, bool) {
	return &asdls, true
}

// AsSQLServerLinkedService is the LinkedService implementation for AzureSQLDatabaseLinkedService.
func (asdls AzureSQLDatabaseLinkedService) AsSQLServerLinkedService() (*SQLServerLinkedService, bool) {
	return nil, false
}

// AsAzureSQLDWLinkedService is the LinkedService implementation for AzureSQLDatabaseLinkedService.
func (asdls AzureSQLDatabaseLinkedService) AsAzureSQLDWLinkedService() (*AzureSQLDWLinkedService, bool) {
	return nil, false
}

// AsAzureStorageLinkedService is the LinkedService implementation for AzureSQLDatabaseLinkedService.
func (asdls AzureSQLDatabaseLinkedService) AsAzureStorageLinkedService() (*AzureStorageLinkedService, bool) {
	return nil, false
}

// AzureSQLDatabaseLinkedServiceTypeProperties is azure SQL Database linked service properties.
type AzureSQLDatabaseLinkedServiceTypeProperties struct {
	ConnectionString    *SecureString           `json:"connectionString,omitempty"`
	EncryptedCredential *map[string]interface{} `json:"encryptedCredential,omitempty"`
}

// AzureSQLDWLinkedService is azure SQL Data Warehouse linked service.
type AzureSQLDWLinkedService struct {
	ConnectVia                             *IntegrationRuntimeReference `json:"connectVia,omitempty"`
	Description                            *string                      `json:"description,omitempty"`
	Type                                   TypeLinkedService            `json:"type,omitempty"`
	*AzureSQLDWLinkedServiceTypeProperties `json:"typeProperties,omitempty"`
}

// MarshalJSON is the custom marshaler for AzureSQLDWLinkedService.
func (asdls AzureSQLDWLinkedService) MarshalJSON() ([]byte, error) {
	asdls.Type = TypeAzureSQLDW
	type Alias AzureSQLDWLinkedService
	return json.Marshal(&struct {
		Alias
	}{
		Alias: (Alias)(asdls),
	})
}

// AsAzureDataLakeAnalyticsLinkedService is the LinkedService implementation for AzureSQLDWLinkedService.
func (asdls AzureSQLDWLinkedService) AsAzureDataLakeAnalyticsLinkedService() (*AzureDataLakeAnalyticsLinkedService, bool) {
	return nil, false
}

// AsHDInsightOnDemandLinkedService is the LinkedService implementation for AzureSQLDWLinkedService.
func (asdls AzureSQLDWLinkedService) AsHDInsightOnDemandLinkedService() (*HDInsightOnDemandLinkedService, bool) {
	return nil, false
}

// AsSapHanaLinkedService is the LinkedService implementation for AzureSQLDWLinkedService.
func (asdls AzureSQLDWLinkedService) AsSapHanaLinkedService() (*SapHanaLinkedService, bool) {
	return nil, false
}

// AsSapBWLinkedService is the LinkedService implementation for AzureSQLDWLinkedService.
func (asdls AzureSQLDWLinkedService) AsSapBWLinkedService() (*SapBWLinkedService, bool) {
	return nil, false
}

// AsSftpServerLinkedService is the LinkedService implementation for AzureSQLDWLinkedService.
func (asdls AzureSQLDWLinkedService) AsSftpServerLinkedService() (*SftpServerLinkedService, bool) {
	return nil, false
}

// AsFtpServerLinkedService is the LinkedService implementation for AzureSQLDWLinkedService.
func (asdls AzureSQLDWLinkedService) AsFtpServerLinkedService() (*FtpServerLinkedService, bool) {
	return nil, false
}

// AsHTTPLinkedService is the LinkedService implementation for AzureSQLDWLinkedService.
func (asdls AzureSQLDWLinkedService) AsHTTPLinkedService() (*HTTPLinkedService, bool) {
	return nil, false
}

// AsAzureSearchLinkedService is the LinkedService implementation for AzureSQLDWLinkedService.
func (asdls AzureSQLDWLinkedService) AsAzureSearchLinkedService() (*AzureSearchLinkedService, bool) {
	return nil, false
}

// AsCustomDataSourceLinkedService is the LinkedService implementation for AzureSQLDWLinkedService.
func (asdls AzureSQLDWLinkedService) AsCustomDataSourceLinkedService() (*CustomDataSourceLinkedService, bool) {
	return nil, false
}

// AsAmazonRedshiftLinkedService is the LinkedService implementation for AzureSQLDWLinkedService.
func (asdls AzureSQLDWLinkedService) AsAmazonRedshiftLinkedService() (*AmazonRedshiftLinkedService, bool) {
	return nil, false
}

// AsAmazonS3LinkedService is the LinkedService implementation for AzureSQLDWLinkedService.
func (asdls AzureSQLDWLinkedService) AsAmazonS3LinkedService() (*AmazonS3LinkedService, bool) {
	return nil, false
}

// AsSalesforceLinkedService is the LinkedService implementation for AzureSQLDWLinkedService.
func (asdls AzureSQLDWLinkedService) AsSalesforceLinkedService() (*SalesforceLinkedService, bool) {
	return nil, false
}

// AsAzureDataLakeStoreLinkedService is the LinkedService implementation for AzureSQLDWLinkedService.
func (asdls AzureSQLDWLinkedService) AsAzureDataLakeStoreLinkedService() (*AzureDataLakeStoreLinkedService, bool) {
	return nil, false
}

// AsMongoDbLinkedService is the LinkedService implementation for AzureSQLDWLinkedService.
func (asdls AzureSQLDWLinkedService) AsMongoDbLinkedService() (*MongoDbLinkedService, bool) {
	return nil, false
}

// AsCassandraLinkedService is the LinkedService implementation for AzureSQLDWLinkedService.
func (asdls AzureSQLDWLinkedService) AsCassandraLinkedService() (*CassandraLinkedService, bool) {
	return nil, false
}

// AsWebLinkedService is the LinkedService implementation for AzureSQLDWLinkedService.
func (asdls AzureSQLDWLinkedService) AsWebLinkedService() (*WebLinkedService, bool) {
	return nil, false
}

// AsODataLinkedService is the LinkedService implementation for AzureSQLDWLinkedService.
func (asdls AzureSQLDWLinkedService) AsODataLinkedService() (*ODataLinkedService, bool) {
	return nil, false
}

// AsHdfsLinkedService is the LinkedService implementation for AzureSQLDWLinkedService.
func (asdls AzureSQLDWLinkedService) AsHdfsLinkedService() (*HdfsLinkedService, bool) {
	return nil, false
}

// AsOdbcLinkedService is the LinkedService implementation for AzureSQLDWLinkedService.
func (asdls AzureSQLDWLinkedService) AsOdbcLinkedService() (*OdbcLinkedService, bool) {
	return nil, false
}

// AsAzureMLLinkedService is the LinkedService implementation for AzureSQLDWLinkedService.
func (asdls AzureSQLDWLinkedService) AsAzureMLLinkedService() (*AzureMLLinkedService, bool) {
	return nil, false
}

// AsTeradataLinkedService is the LinkedService implementation for AzureSQLDWLinkedService.
func (asdls AzureSQLDWLinkedService) AsTeradataLinkedService() (*TeradataLinkedService, bool) {
	return nil, false
}

// AsDb2LinkedService is the LinkedService implementation for AzureSQLDWLinkedService.
func (asdls AzureSQLDWLinkedService) AsDb2LinkedService() (*Db2LinkedService, bool) {
	return nil, false
}

// AsSybaseLinkedService is the LinkedService implementation for AzureSQLDWLinkedService.
func (asdls AzureSQLDWLinkedService) AsSybaseLinkedService() (*SybaseLinkedService, bool) {
	return nil, false
}

// AsPostgreSQLLinkedService is the LinkedService implementation for AzureSQLDWLinkedService.
func (asdls AzureSQLDWLinkedService) AsPostgreSQLLinkedService() (*PostgreSQLLinkedService, bool) {
	return nil, false
}

// AsMySQLLinkedService is the LinkedService implementation for AzureSQLDWLinkedService.
func (asdls AzureSQLDWLinkedService) AsMySQLLinkedService() (*MySQLLinkedService, bool) {
	return nil, false
}

// AsOracleLinkedService is the LinkedService implementation for AzureSQLDWLinkedService.
func (asdls AzureSQLDWLinkedService) AsOracleLinkedService() (*OracleLinkedService, bool) {
	return nil, false
}

// AsFileServerLinkedService is the LinkedService implementation for AzureSQLDWLinkedService.
func (asdls AzureSQLDWLinkedService) AsFileServerLinkedService() (*FileServerLinkedService, bool) {
	return nil, false
}

// AsHDInsightLinkedService is the LinkedService implementation for AzureSQLDWLinkedService.
func (asdls AzureSQLDWLinkedService) AsHDInsightLinkedService() (*HDInsightLinkedService, bool) {
	return nil, false
}

// AsDynamicsLinkedService is the LinkedService implementation for AzureSQLDWLinkedService.
func (asdls AzureSQLDWLinkedService) AsDynamicsLinkedService() (*DynamicsLinkedService, bool) {
	return nil, false
}

// AsCosmosDbLinkedService is the LinkedService implementation for AzureSQLDWLinkedService.
func (asdls AzureSQLDWLinkedService) AsCosmosDbLinkedService() (*CosmosDbLinkedService, bool) {
	return nil, false
}

// AsAzureKeyVaultLinkedService is the LinkedService implementation for AzureSQLDWLinkedService.
func (asdls AzureSQLDWLinkedService) AsAzureKeyVaultLinkedService() (*AzureKeyVaultLinkedService, bool) {
	return nil, false
}

// AsAzureBatchLinkedService is the LinkedService implementation for AzureSQLDWLinkedService.
func (asdls AzureSQLDWLinkedService) AsAzureBatchLinkedService() (*AzureBatchLinkedService, bool) {
	return nil, false
}

// AsAzureSQLDatabaseLinkedService is the LinkedService implementation for AzureSQLDWLinkedService.
func (asdls AzureSQLDWLinkedService) AsAzureSQLDatabaseLinkedService() (*AzureSQLDatabaseLinkedService, bool) {
	return nil, false
}

// AsSQLServerLinkedService is the LinkedService implementation for AzureSQLDWLinkedService.
func (asdls AzureSQLDWLinkedService) AsSQLServerLinkedService() (*SQLServerLinkedService, bool) {
	return nil, false
}

// AsAzureSQLDWLinkedService is the LinkedService implementation for AzureSQLDWLinkedService.
func (asdls AzureSQLDWLinkedService) AsAzureSQLDWLinkedService() (*AzureSQLDWLinkedService, bool) {
	return &asdls, true
}

// AsAzureStorageLinkedService is the LinkedService implementation for AzureSQLDWLinkedService.
func (asdls AzureSQLDWLinkedService) AsAzureStorageLinkedService() (*AzureStorageLinkedService, bool) {
	return nil, false
}

// AzureSQLDWLinkedServiceTypeProperties is azure SQL Data Warehouse linked service properties.
type AzureSQLDWLinkedServiceTypeProperties struct {
	ConnectionString    *SecureString           `json:"connectionString,omitempty"`
	EncryptedCredential *map[string]interface{} `json:"encryptedCredential,omitempty"`
}

// AzureSQLDWTableDataset is the Azure SQL Data Warehouse dataset.
type AzureSQLDWTableDataset struct {
	Description                           *string                             `json:"description,omitempty"`
	Structure                             *map[string]interface{}             `json:"structure,omitempty"`
	LinkedServiceName                     *LinkedServiceReference             `json:"linkedServiceName,omitempty"`
	Parameters                            *map[string]*ParameterSpecification `json:"parameters,omitempty"`
	Type                                  TypeDataset                         `json:"type,omitempty"`
	*AzureSQLDWTableDatasetTypeProperties `json:"typeProperties,omitempty"`
}

// MarshalJSON is the custom marshaler for AzureSQLDWTableDataset.
func (asdtd AzureSQLDWTableDataset) MarshalJSON() ([]byte, error) {
	asdtd.Type = TypeAzureSQLDWTable
	type Alias AzureSQLDWTableDataset
	return json.Marshal(&struct {
		Alias
	}{
		Alias: (Alias)(asdtd),
	})
}

// AsHTTPDataset is the Dataset implementation for AzureSQLDWTableDataset.
func (asdtd AzureSQLDWTableDataset) AsHTTPDataset() (*HTTPDataset, bool) {
	return nil, false
}

// AsAzureSearchIndexDataset is the Dataset implementation for AzureSQLDWTableDataset.
func (asdtd AzureSQLDWTableDataset) AsAzureSearchIndexDataset() (*AzureSearchIndexDataset, bool) {
	return nil, false
}

// AsWebTableDataset is the Dataset implementation for AzureSQLDWTableDataset.
func (asdtd AzureSQLDWTableDataset) AsWebTableDataset() (*WebTableDataset, bool) {
	return nil, false
}

// AsSQLServerTableDataset is the Dataset implementation for AzureSQLDWTableDataset.
func (asdtd AzureSQLDWTableDataset) AsSQLServerTableDataset() (*SQLServerTableDataset, bool) {
	return nil, false
}

// AsRelationalTableDataset is the Dataset implementation for AzureSQLDWTableDataset.
func (asdtd AzureSQLDWTableDataset) AsRelationalTableDataset() (*RelationalTableDataset, bool) {
	return nil, false
}

// AsOracleTableDataset is the Dataset implementation for AzureSQLDWTableDataset.
func (asdtd AzureSQLDWTableDataset) AsOracleTableDataset() (*OracleTableDataset, bool) {
	return nil, false
}

// AsODataResourceDataset is the Dataset implementation for AzureSQLDWTableDataset.
func (asdtd AzureSQLDWTableDataset) AsODataResourceDataset() (*ODataResourceDataset, bool) {
	return nil, false
}

// AsMongoDbCollectionDataset is the Dataset implementation for AzureSQLDWTableDataset.
func (asdtd AzureSQLDWTableDataset) AsMongoDbCollectionDataset() (*MongoDbCollectionDataset, bool) {
	return nil, false
}

// AsFileShareDataset is the Dataset implementation for AzureSQLDWTableDataset.
func (asdtd AzureSQLDWTableDataset) AsFileShareDataset() (*FileShareDataset, bool) {
	return nil, false
}

// AsAzureDataLakeStoreDataset is the Dataset implementation for AzureSQLDWTableDataset.
func (asdtd AzureSQLDWTableDataset) AsAzureDataLakeStoreDataset() (*AzureDataLakeStoreDataset, bool) {
	return nil, false
}

// AsDynamicsEntityDataset is the Dataset implementation for AzureSQLDWTableDataset.
func (asdtd AzureSQLDWTableDataset) AsDynamicsEntityDataset() (*DynamicsEntityDataset, bool) {
	return nil, false
}

// AsDocumentDbCollectionDataset is the Dataset implementation for AzureSQLDWTableDataset.
func (asdtd AzureSQLDWTableDataset) AsDocumentDbCollectionDataset() (*DocumentDbCollectionDataset, bool) {
	return nil, false
}

// AsCustomDataset is the Dataset implementation for AzureSQLDWTableDataset.
func (asdtd AzureSQLDWTableDataset) AsCustomDataset() (*CustomDataset, bool) {
	return nil, false
}

// AsCassandraTableDataset is the Dataset implementation for AzureSQLDWTableDataset.
func (asdtd AzureSQLDWTableDataset) AsCassandraTableDataset() (*CassandraTableDataset, bool) {
	return nil, false
}

// AsAzureSQLDWTableDataset is the Dataset implementation for AzureSQLDWTableDataset.
func (asdtd AzureSQLDWTableDataset) AsAzureSQLDWTableDataset() (*AzureSQLDWTableDataset, bool) {
	return &asdtd, true
}

// AsAzureSQLTableDataset is the Dataset implementation for AzureSQLDWTableDataset.
func (asdtd AzureSQLDWTableDataset) AsAzureSQLTableDataset() (*AzureSQLTableDataset, bool) {
	return nil, false
}

// AsAzureTableDataset is the Dataset implementation for AzureSQLDWTableDataset.
func (asdtd AzureSQLDWTableDataset) AsAzureTableDataset() (*AzureTableDataset, bool) {
	return nil, false
}

// AsAzureBlobDataset is the Dataset implementation for AzureSQLDWTableDataset.
func (asdtd AzureSQLDWTableDataset) AsAzureBlobDataset() (*AzureBlobDataset, bool) {
	return nil, false
}

// AsAmazonS3Dataset is the Dataset implementation for AzureSQLDWTableDataset.
func (asdtd AzureSQLDWTableDataset) AsAmazonS3Dataset() (*AmazonS3Dataset, bool) {
	return nil, false
}

// AzureSQLDWTableDatasetTypeProperties is azure SQL Data Warehouse dataset properties.
type AzureSQLDWTableDatasetTypeProperties struct {
	TableName *map[string]interface{} `json:"tableName,omitempty"`
}

// AzureSQLTableDataset is the Azure SQL Server database dataset.
type AzureSQLTableDataset struct {
	Description                         *string                             `json:"description,omitempty"`
	Structure                           *map[string]interface{}             `json:"structure,omitempty"`
	LinkedServiceName                   *LinkedServiceReference             `json:"linkedServiceName,omitempty"`
	Parameters                          *map[string]*ParameterSpecification `json:"parameters,omitempty"`
	Type                                TypeDataset                         `json:"type,omitempty"`
	*AzureSQLTableDatasetTypeProperties `json:"typeProperties,omitempty"`
}

// MarshalJSON is the custom marshaler for AzureSQLTableDataset.
func (astd AzureSQLTableDataset) MarshalJSON() ([]byte, error) {
	astd.Type = TypeAzureSQLTable
	type Alias AzureSQLTableDataset
	return json.Marshal(&struct {
		Alias
	}{
		Alias: (Alias)(astd),
	})
}

// AsHTTPDataset is the Dataset implementation for AzureSQLTableDataset.
func (astd AzureSQLTableDataset) AsHTTPDataset() (*HTTPDataset, bool) {
	return nil, false
}

// AsAzureSearchIndexDataset is the Dataset implementation for AzureSQLTableDataset.
func (astd AzureSQLTableDataset) AsAzureSearchIndexDataset() (*AzureSearchIndexDataset, bool) {
	return nil, false
}

// AsWebTableDataset is the Dataset implementation for AzureSQLTableDataset.
func (astd AzureSQLTableDataset) AsWebTableDataset() (*WebTableDataset, bool) {
	return nil, false
}

// AsSQLServerTableDataset is the Dataset implementation for AzureSQLTableDataset.
func (astd AzureSQLTableDataset) AsSQLServerTableDataset() (*SQLServerTableDataset, bool) {
	return nil, false
}

// AsRelationalTableDataset is the Dataset implementation for AzureSQLTableDataset.
func (astd AzureSQLTableDataset) AsRelationalTableDataset() (*RelationalTableDataset, bool) {
	return nil, false
}

// AsOracleTableDataset is the Dataset implementation for AzureSQLTableDataset.
func (astd AzureSQLTableDataset) AsOracleTableDataset() (*OracleTableDataset, bool) {
	return nil, false
}

// AsODataResourceDataset is the Dataset implementation for AzureSQLTableDataset.
func (astd AzureSQLTableDataset) AsODataResourceDataset() (*ODataResourceDataset, bool) {
	return nil, false
}

// AsMongoDbCollectionDataset is the Dataset implementation for AzureSQLTableDataset.
func (astd AzureSQLTableDataset) AsMongoDbCollectionDataset() (*MongoDbCollectionDataset, bool) {
	return nil, false
}

// AsFileShareDataset is the Dataset implementation for AzureSQLTableDataset.
func (astd AzureSQLTableDataset) AsFileShareDataset() (*FileShareDataset, bool) {
	return nil, false
}

// AsAzureDataLakeStoreDataset is the Dataset implementation for AzureSQLTableDataset.
func (astd AzureSQLTableDataset) AsAzureDataLakeStoreDataset() (*AzureDataLakeStoreDataset, bool) {
	return nil, false
}

// AsDynamicsEntityDataset is the Dataset implementation for AzureSQLTableDataset.
func (astd AzureSQLTableDataset) AsDynamicsEntityDataset() (*DynamicsEntityDataset, bool) {
	return nil, false
}

// AsDocumentDbCollectionDataset is the Dataset implementation for AzureSQLTableDataset.
func (astd AzureSQLTableDataset) AsDocumentDbCollectionDataset() (*DocumentDbCollectionDataset, bool) {
	return nil, false
}

// AsCustomDataset is the Dataset implementation for AzureSQLTableDataset.
func (astd AzureSQLTableDataset) AsCustomDataset() (*CustomDataset, bool) {
	return nil, false
}

// AsCassandraTableDataset is the Dataset implementation for AzureSQLTableDataset.
func (astd AzureSQLTableDataset) AsCassandraTableDataset() (*CassandraTableDataset, bool) {
	return nil, false
}

// AsAzureSQLDWTableDataset is the Dataset implementation for AzureSQLTableDataset.
func (astd AzureSQLTableDataset) AsAzureSQLDWTableDataset() (*AzureSQLDWTableDataset, bool) {
	return nil, false
}

// AsAzureSQLTableDataset is the Dataset implementation for AzureSQLTableDataset.
func (astd AzureSQLTableDataset) AsAzureSQLTableDataset() (*AzureSQLTableDataset, bool) {
	return &astd, true
}

// AsAzureTableDataset is the Dataset implementation for AzureSQLTableDataset.
func (astd AzureSQLTableDataset) AsAzureTableDataset() (*AzureTableDataset, bool) {
	return nil, false
}

// AsAzureBlobDataset is the Dataset implementation for AzureSQLTableDataset.
func (astd AzureSQLTableDataset) AsAzureBlobDataset() (*AzureBlobDataset, bool) {
	return nil, false
}

// AsAmazonS3Dataset is the Dataset implementation for AzureSQLTableDataset.
func (astd AzureSQLTableDataset) AsAmazonS3Dataset() (*AmazonS3Dataset, bool) {
	return nil, false
}

// AzureSQLTableDatasetTypeProperties is azure SQL dataset properties.
type AzureSQLTableDatasetTypeProperties struct {
	TableName *map[string]interface{} `json:"tableName,omitempty"`
}

// AzureStorageLinkedService is the storage account linked service.
type AzureStorageLinkedService struct {
	ConnectVia                               *IntegrationRuntimeReference `json:"connectVia,omitempty"`
	Description                              *string                      `json:"description,omitempty"`
	Type                                     TypeLinkedService            `json:"type,omitempty"`
	*AzureStorageLinkedServiceTypeProperties `json:"typeProperties,omitempty"`
}

// MarshalJSON is the custom marshaler for AzureStorageLinkedService.
func (asls AzureStorageLinkedService) MarshalJSON() ([]byte, error) {
	asls.Type = TypeAzureStorage
	type Alias AzureStorageLinkedService
	return json.Marshal(&struct {
		Alias
	}{
		Alias: (Alias)(asls),
	})
}

// AsAzureDataLakeAnalyticsLinkedService is the LinkedService implementation for AzureStorageLinkedService.
func (asls AzureStorageLinkedService) AsAzureDataLakeAnalyticsLinkedService() (*AzureDataLakeAnalyticsLinkedService, bool) {
	return nil, false
}

// AsHDInsightOnDemandLinkedService is the LinkedService implementation for AzureStorageLinkedService.
func (asls AzureStorageLinkedService) AsHDInsightOnDemandLinkedService() (*HDInsightOnDemandLinkedService, bool) {
	return nil, false
}

// AsSapHanaLinkedService is the LinkedService implementation for AzureStorageLinkedService.
func (asls AzureStorageLinkedService) AsSapHanaLinkedService() (*SapHanaLinkedService, bool) {
	return nil, false
}

// AsSapBWLinkedService is the LinkedService implementation for AzureStorageLinkedService.
func (asls AzureStorageLinkedService) AsSapBWLinkedService() (*SapBWLinkedService, bool) {
	return nil, false
}

// AsSftpServerLinkedService is the LinkedService implementation for AzureStorageLinkedService.
func (asls AzureStorageLinkedService) AsSftpServerLinkedService() (*SftpServerLinkedService, bool) {
	return nil, false
}

// AsFtpServerLinkedService is the LinkedService implementation for AzureStorageLinkedService.
func (asls AzureStorageLinkedService) AsFtpServerLinkedService() (*FtpServerLinkedService, bool) {
	return nil, false
}

// AsHTTPLinkedService is the LinkedService implementation for AzureStorageLinkedService.
func (asls AzureStorageLinkedService) AsHTTPLinkedService() (*HTTPLinkedService, bool) {
	return nil, false
}

// AsAzureSearchLinkedService is the LinkedService implementation for AzureStorageLinkedService.
func (asls AzureStorageLinkedService) AsAzureSearchLinkedService() (*AzureSearchLinkedService, bool) {
	return nil, false
}

// AsCustomDataSourceLinkedService is the LinkedService implementation for AzureStorageLinkedService.
func (asls AzureStorageLinkedService) AsCustomDataSourceLinkedService() (*CustomDataSourceLinkedService, bool) {
	return nil, false
}

// AsAmazonRedshiftLinkedService is the LinkedService implementation for AzureStorageLinkedService.
func (asls AzureStorageLinkedService) AsAmazonRedshiftLinkedService() (*AmazonRedshiftLinkedService, bool) {
	return nil, false
}

// AsAmazonS3LinkedService is the LinkedService implementation for AzureStorageLinkedService.
func (asls AzureStorageLinkedService) AsAmazonS3LinkedService() (*AmazonS3LinkedService, bool) {
	return nil, false
}

// AsSalesforceLinkedService is the LinkedService implementation for AzureStorageLinkedService.
func (asls AzureStorageLinkedService) AsSalesforceLinkedService() (*SalesforceLinkedService, bool) {
	return nil, false
}

// AsAzureDataLakeStoreLinkedService is the LinkedService implementation for AzureStorageLinkedService.
func (asls AzureStorageLinkedService) AsAzureDataLakeStoreLinkedService() (*AzureDataLakeStoreLinkedService, bool) {
	return nil, false
}

// AsMongoDbLinkedService is the LinkedService implementation for AzureStorageLinkedService.
func (asls AzureStorageLinkedService) AsMongoDbLinkedService() (*MongoDbLinkedService, bool) {
	return nil, false
}

// AsCassandraLinkedService is the LinkedService implementation for AzureStorageLinkedService.
func (asls AzureStorageLinkedService) AsCassandraLinkedService() (*CassandraLinkedService, bool) {
	return nil, false
}

// AsWebLinkedService is the LinkedService implementation for AzureStorageLinkedService.
func (asls AzureStorageLinkedService) AsWebLinkedService() (*WebLinkedService, bool) {
	return nil, false
}

// AsODataLinkedService is the LinkedService implementation for AzureStorageLinkedService.
func (asls AzureStorageLinkedService) AsODataLinkedService() (*ODataLinkedService, bool) {
	return nil, false
}

// AsHdfsLinkedService is the LinkedService implementation for AzureStorageLinkedService.
func (asls AzureStorageLinkedService) AsHdfsLinkedService() (*HdfsLinkedService, bool) {
	return nil, false
}

// AsOdbcLinkedService is the LinkedService implementation for AzureStorageLinkedService.
func (asls AzureStorageLinkedService) AsOdbcLinkedService() (*OdbcLinkedService, bool) {
	return nil, false
}

// AsAzureMLLinkedService is the LinkedService implementation for AzureStorageLinkedService.
func (asls AzureStorageLinkedService) AsAzureMLLinkedService() (*AzureMLLinkedService, bool) {
	return nil, false
}

// AsTeradataLinkedService is the LinkedService implementation for AzureStorageLinkedService.
func (asls AzureStorageLinkedService) AsTeradataLinkedService() (*TeradataLinkedService, bool) {
	return nil, false
}

// AsDb2LinkedService is the LinkedService implementation for AzureStorageLinkedService.
func (asls AzureStorageLinkedService) AsDb2LinkedService() (*Db2LinkedService, bool) {
	return nil, false
}

// AsSybaseLinkedService is the LinkedService implementation for AzureStorageLinkedService.
func (asls AzureStorageLinkedService) AsSybaseLinkedService() (*SybaseLinkedService, bool) {
	return nil, false
}

// AsPostgreSQLLinkedService is the LinkedService implementation for AzureStorageLinkedService.
func (asls AzureStorageLinkedService) AsPostgreSQLLinkedService() (*PostgreSQLLinkedService, bool) {
	return nil, false
}

// AsMySQLLinkedService is the LinkedService implementation for AzureStorageLinkedService.
func (asls AzureStorageLinkedService) AsMySQLLinkedService() (*MySQLLinkedService, bool) {
	return nil, false
}

// AsOracleLinkedService is the LinkedService implementation for AzureStorageLinkedService.
func (asls AzureStorageLinkedService) AsOracleLinkedService() (*OracleLinkedService, bool) {
	return nil, false
}

// AsFileServerLinkedService is the LinkedService implementation for AzureStorageLinkedService.
func (asls AzureStorageLinkedService) AsFileServerLinkedService() (*FileServerLinkedService, bool) {
	return nil, false
}

// AsHDInsightLinkedService is the LinkedService implementation for AzureStorageLinkedService.
func (asls AzureStorageLinkedService) AsHDInsightLinkedService() (*HDInsightLinkedService, bool) {
	return nil, false
}

// AsDynamicsLinkedService is the LinkedService implementation for AzureStorageLinkedService.
func (asls AzureStorageLinkedService) AsDynamicsLinkedService() (*DynamicsLinkedService, bool) {
	return nil, false
}

// AsCosmosDbLinkedService is the LinkedService implementation for AzureStorageLinkedService.
func (asls AzureStorageLinkedService) AsCosmosDbLinkedService() (*CosmosDbLinkedService, bool) {
	return nil, false
}

// AsAzureKeyVaultLinkedService is the LinkedService implementation for AzureStorageLinkedService.
func (asls AzureStorageLinkedService) AsAzureKeyVaultLinkedService() (*AzureKeyVaultLinkedService, bool) {
	return nil, false
}

// AsAzureBatchLinkedService is the LinkedService implementation for AzureStorageLinkedService.
func (asls AzureStorageLinkedService) AsAzureBatchLinkedService() (*AzureBatchLinkedService, bool) {
	return nil, false
}

// AsAzureSQLDatabaseLinkedService is the LinkedService implementation for AzureStorageLinkedService.
func (asls AzureStorageLinkedService) AsAzureSQLDatabaseLinkedService() (*AzureSQLDatabaseLinkedService, bool) {
	return nil, false
}

// AsSQLServerLinkedService is the LinkedService implementation for AzureStorageLinkedService.
func (asls AzureStorageLinkedService) AsSQLServerLinkedService() (*SQLServerLinkedService, bool) {
	return nil, false
}

// AsAzureSQLDWLinkedService is the LinkedService implementation for AzureStorageLinkedService.
func (asls AzureStorageLinkedService) AsAzureSQLDWLinkedService() (*AzureSQLDWLinkedService, bool) {
	return nil, false
}

// AsAzureStorageLinkedService is the LinkedService implementation for AzureStorageLinkedService.
func (asls AzureStorageLinkedService) AsAzureStorageLinkedService() (*AzureStorageLinkedService, bool) {
	return &asls, true
}

// AzureStorageLinkedServiceTypeProperties is azure Storage linked service properties.
type AzureStorageLinkedServiceTypeProperties struct {
	ConnectionString    *SecureString           `json:"connectionString,omitempty"`
	SasURI              *SecureString           `json:"sasUri,omitempty"`
	EncryptedCredential *map[string]interface{} `json:"encryptedCredential,omitempty"`
}

// AzureTableDataset is the Azure Table storage dataset.
type AzureTableDataset struct {
	Description                      *string                             `json:"description,omitempty"`
	Structure                        *map[string]interface{}             `json:"structure,omitempty"`
	LinkedServiceName                *LinkedServiceReference             `json:"linkedServiceName,omitempty"`
	Parameters                       *map[string]*ParameterSpecification `json:"parameters,omitempty"`
	Type                             TypeDataset                         `json:"type,omitempty"`
	*AzureTableDatasetTypeProperties `json:"typeProperties,omitempty"`
}

// MarshalJSON is the custom marshaler for AzureTableDataset.
func (atd AzureTableDataset) MarshalJSON() ([]byte, error) {
	atd.Type = TypeAzureTable
	type Alias AzureTableDataset
	return json.Marshal(&struct {
		Alias
	}{
		Alias: (Alias)(atd),
	})
}

// AsHTTPDataset is the Dataset implementation for AzureTableDataset.
func (atd AzureTableDataset) AsHTTPDataset() (*HTTPDataset, bool) {
	return nil, false
}

// AsAzureSearchIndexDataset is the Dataset implementation for AzureTableDataset.
func (atd AzureTableDataset) AsAzureSearchIndexDataset() (*AzureSearchIndexDataset, bool) {
	return nil, false
}

// AsWebTableDataset is the Dataset implementation for AzureTableDataset.
func (atd AzureTableDataset) AsWebTableDataset() (*WebTableDataset, bool) {
	return nil, false
}

// AsSQLServerTableDataset is the Dataset implementation for AzureTableDataset.
func (atd AzureTableDataset) AsSQLServerTableDataset() (*SQLServerTableDataset, bool) {
	return nil, false
}

// AsRelationalTableDataset is the Dataset implementation for AzureTableDataset.
func (atd AzureTableDataset) AsRelationalTableDataset() (*RelationalTableDataset, bool) {
	return nil, false
}

// AsOracleTableDataset is the Dataset implementation for AzureTableDataset.
func (atd AzureTableDataset) AsOracleTableDataset() (*OracleTableDataset, bool) {
	return nil, false
}

// AsODataResourceDataset is the Dataset implementation for AzureTableDataset.
func (atd AzureTableDataset) AsODataResourceDataset() (*ODataResourceDataset, bool) {
	return nil, false
}

// AsMongoDbCollectionDataset is the Dataset implementation for AzureTableDataset.
func (atd AzureTableDataset) AsMongoDbCollectionDataset() (*MongoDbCollectionDataset, bool) {
	return nil, false
}

// AsFileShareDataset is the Dataset implementation for AzureTableDataset.
func (atd AzureTableDataset) AsFileShareDataset() (*FileShareDataset, bool) {
	return nil, false
}

// AsAzureDataLakeStoreDataset is the Dataset implementation for AzureTableDataset.
func (atd AzureTableDataset) AsAzureDataLakeStoreDataset() (*AzureDataLakeStoreDataset, bool) {
	return nil, false
}

// AsDynamicsEntityDataset is the Dataset implementation for AzureTableDataset.
func (atd AzureTableDataset) AsDynamicsEntityDataset() (*DynamicsEntityDataset, bool) {
	return nil, false
}

// AsDocumentDbCollectionDataset is the Dataset implementation for AzureTableDataset.
func (atd AzureTableDataset) AsDocumentDbCollectionDataset() (*DocumentDbCollectionDataset, bool) {
	return nil, false
}

// AsCustomDataset is the Dataset implementation for AzureTableDataset.
func (atd AzureTableDataset) AsCustomDataset() (*CustomDataset, bool) {
	return nil, false
}

// AsCassandraTableDataset is the Dataset implementation for AzureTableDataset.
func (atd AzureTableDataset) AsCassandraTableDataset() (*CassandraTableDataset, bool) {
	return nil, false
}

// AsAzureSQLDWTableDataset is the Dataset implementation for AzureTableDataset.
func (atd AzureTableDataset) AsAzureSQLDWTableDataset() (*AzureSQLDWTableDataset, bool) {
	return nil, false
}

// AsAzureSQLTableDataset is the Dataset implementation for AzureTableDataset.
func (atd AzureTableDataset) AsAzureSQLTableDataset() (*AzureSQLTableDataset, bool) {
	return nil, false
}

// AsAzureTableDataset is the Dataset implementation for AzureTableDataset.
func (atd AzureTableDataset) AsAzureTableDataset() (*AzureTableDataset, bool) {
	return &atd, true
}

// AsAzureBlobDataset is the Dataset implementation for AzureTableDataset.
func (atd AzureTableDataset) AsAzureBlobDataset() (*AzureBlobDataset, bool) {
	return nil, false
}

// AsAmazonS3Dataset is the Dataset implementation for AzureTableDataset.
func (atd AzureTableDataset) AsAmazonS3Dataset() (*AmazonS3Dataset, bool) {
	return nil, false
}

// AzureTableDatasetTypeProperties is azure Table dataset properties.
type AzureTableDatasetTypeProperties struct {
	TableName *map[string]interface{} `json:"tableName,omitempty"`
}

// AzureTableSink is a copy activity Azure Table sink.
type AzureTableSink struct {
	WriteBatchSize                     *map[string]interface{} `json:"writeBatchSize,omitempty"`
	WriteBatchTimeout                  *map[string]interface{} `json:"writeBatchTimeout,omitempty"`
	SinkRetryCount                     *map[string]interface{} `json:"sinkRetryCount,omitempty"`
	SinkRetryWait                      *map[string]interface{} `json:"sinkRetryWait,omitempty"`
	Type                               TypeCopySink            `json:"type,omitempty"`
	AzureTableDefaultPartitionKeyValue *map[string]interface{} `json:"azureTableDefaultPartitionKeyValue,omitempty"`
	AzureTablePartitionKeyName         *map[string]interface{} `json:"azureTablePartitionKeyName,omitempty"`
	AzureTableRowKeyName               *map[string]interface{} `json:"azureTableRowKeyName,omitempty"`
	AzureTableInsertType               *map[string]interface{} `json:"azureTableInsertType,omitempty"`
}

// MarshalJSON is the custom marshaler for AzureTableSink.
func (ats AzureTableSink) MarshalJSON() ([]byte, error) {
	ats.Type = TypeAzureTableSink
	type Alias AzureTableSink
	return json.Marshal(&struct {
		Alias
	}{
		Alias: (Alias)(ats),
	})
}

// AsOdbcSink is the CopySink implementation for AzureTableSink.
func (ats AzureTableSink) AsOdbcSink() (*OdbcSink, bool) {
	return nil, false
}

// AsAzureSearchIndexSink is the CopySink implementation for AzureTableSink.
func (ats AzureTableSink) AsAzureSearchIndexSink() (*AzureSearchIndexSink, bool) {
	return nil, false
}

// AsAzureDataLakeStoreSink is the CopySink implementation for AzureTableSink.
func (ats AzureTableSink) AsAzureDataLakeStoreSink() (*AzureDataLakeStoreSink, bool) {
	return nil, false
}

// AsOracleSink is the CopySink implementation for AzureTableSink.
func (ats AzureTableSink) AsOracleSink() (*OracleSink, bool) {
	return nil, false
}

// AsSQLDWSink is the CopySink implementation for AzureTableSink.
func (ats AzureTableSink) AsSQLDWSink() (*SQLDWSink, bool) {
	return nil, false
}

// AsSQLSink is the CopySink implementation for AzureTableSink.
func (ats AzureTableSink) AsSQLSink() (*SQLSink, bool) {
	return nil, false
}

// AsDocumentDbCollectionSink is the CopySink implementation for AzureTableSink.
func (ats AzureTableSink) AsDocumentDbCollectionSink() (*DocumentDbCollectionSink, bool) {
	return nil, false
}

// AsFileSystemSink is the CopySink implementation for AzureTableSink.
func (ats AzureTableSink) AsFileSystemSink() (*FileSystemSink, bool) {
	return nil, false
}

// AsBlobSink is the CopySink implementation for AzureTableSink.
func (ats AzureTableSink) AsBlobSink() (*BlobSink, bool) {
	return nil, false
}

// AsAzureTableSink is the CopySink implementation for AzureTableSink.
func (ats AzureTableSink) AsAzureTableSink() (*AzureTableSink, bool) {
	return &ats, true
}

// AsAzureQueueSink is the CopySink implementation for AzureTableSink.
func (ats AzureTableSink) AsAzureQueueSink() (*AzureQueueSink, bool) {
	return nil, false
}

// AzureTableSource is a copy activity Azure Table source.
type AzureTableSource struct {
	SourceRetryCount                    *map[string]interface{} `json:"sourceRetryCount,omitempty"`
	SourceRetryWait                     *map[string]interface{} `json:"sourceRetryWait,omitempty"`
	Type                                TypeCopySource          `json:"type,omitempty"`
	AzureTableSourceQuery               *map[string]interface{} `json:"azureTableSourceQuery,omitempty"`
	AzureTableSourceIgnoreTableNotFound *map[string]interface{} `json:"azureTableSourceIgnoreTableNotFound,omitempty"`
}

// MarshalJSON is the custom marshaler for AzureTableSource.
func (ats AzureTableSource) MarshalJSON() ([]byte, error) {
	ats.Type = TypeAzureTableSource
	type Alias AzureTableSource
	return json.Marshal(&struct {
		Alias
	}{
		Alias: (Alias)(ats),
	})
}

// AsAmazonRedshiftSource is the CopySource implementation for AzureTableSource.
func (ats AzureTableSource) AsAmazonRedshiftSource() (*AmazonRedshiftSource, bool) {
	return nil, false
}

// AsHTTPSource is the CopySource implementation for AzureTableSource.
func (ats AzureTableSource) AsHTTPSource() (*HTTPSource, bool) {
	return nil, false
}

// AsAzureDataLakeStoreSource is the CopySource implementation for AzureTableSource.
func (ats AzureTableSource) AsAzureDataLakeStoreSource() (*AzureDataLakeStoreSource, bool) {
	return nil, false
}

// AsMongoDbSource is the CopySource implementation for AzureTableSource.
func (ats AzureTableSource) AsMongoDbSource() (*MongoDbSource, bool) {
	return nil, false
}

// AsCassandraSource is the CopySource implementation for AzureTableSource.
func (ats AzureTableSource) AsCassandraSource() (*CassandraSource, bool) {
	return nil, false
}

// AsWebSource is the CopySource implementation for AzureTableSource.
func (ats AzureTableSource) AsWebSource() (*WebSource, bool) {
	return nil, false
}

// AsOracleSource is the CopySource implementation for AzureTableSource.
func (ats AzureTableSource) AsOracleSource() (*OracleSource, bool) {
	return nil, false
}

// AsHdfsSource is the CopySource implementation for AzureTableSource.
func (ats AzureTableSource) AsHdfsSource() (*HdfsSource, bool) {
	return nil, false
}

// AsFileSystemSource is the CopySource implementation for AzureTableSource.
func (ats AzureTableSource) AsFileSystemSource() (*FileSystemSource, bool) {
	return nil, false
}

// AsSQLDWSource is the CopySource implementation for AzureTableSource.
func (ats AzureTableSource) AsSQLDWSource() (*SQLDWSource, bool) {
	return nil, false
}

// AsSQLSource is the CopySource implementation for AzureTableSource.
func (ats AzureTableSource) AsSQLSource() (*SQLSource, bool) {
	return nil, false
}

// AsRelationalSource is the CopySource implementation for AzureTableSource.
func (ats AzureTableSource) AsRelationalSource() (*RelationalSource, bool) {
	return nil, false
}

// AsDynamicsSource is the CopySource implementation for AzureTableSource.
func (ats AzureTableSource) AsDynamicsSource() (*DynamicsSource, bool) {
	return nil, false
}

// AsDocumentDbCollectionSource is the CopySource implementation for AzureTableSource.
func (ats AzureTableSource) AsDocumentDbCollectionSource() (*DocumentDbCollectionSource, bool) {
	return nil, false
}

// AsBlobSource is the CopySource implementation for AzureTableSource.
func (ats AzureTableSource) AsBlobSource() (*BlobSource, bool) {
	return nil, false
}

// AsAzureTableSource is the CopySource implementation for AzureTableSource.
func (ats AzureTableSource) AsAzureTableSource() (*AzureTableSource, bool) {
	return &ats, true
}

// BlobSink is a copy activity Azure Blob sink.
type BlobSink struct {
	WriteBatchSize           *map[string]interface{} `json:"writeBatchSize,omitempty"`
	WriteBatchTimeout        *map[string]interface{} `json:"writeBatchTimeout,omitempty"`
	SinkRetryCount           *map[string]interface{} `json:"sinkRetryCount,omitempty"`
	SinkRetryWait            *map[string]interface{} `json:"sinkRetryWait,omitempty"`
	Type                     TypeCopySink            `json:"type,omitempty"`
	BlobWriterOverwriteFiles *map[string]interface{} `json:"blobWriterOverwriteFiles,omitempty"`
	BlobWriterDateTimeFormat *map[string]interface{} `json:"blobWriterDateTimeFormat,omitempty"`
	BlobWriterAddHeader      *map[string]interface{} `json:"blobWriterAddHeader,omitempty"`
	CopyBehavior             CopyBehaviorType        `json:"copyBehavior,omitempty"`
}

// MarshalJSON is the custom marshaler for BlobSink.
func (bs BlobSink) MarshalJSON() ([]byte, error) {
	bs.Type = TypeBlobSink
	type Alias BlobSink
	return json.Marshal(&struct {
		Alias
	}{
		Alias: (Alias)(bs),
	})
}

// AsOdbcSink is the CopySink implementation for BlobSink.
func (bs BlobSink) AsOdbcSink() (*OdbcSink, bool) {
	return nil, false
}

// AsAzureSearchIndexSink is the CopySink implementation for BlobSink.
func (bs BlobSink) AsAzureSearchIndexSink() (*AzureSearchIndexSink, bool) {
	return nil, false
}

// AsAzureDataLakeStoreSink is the CopySink implementation for BlobSink.
func (bs BlobSink) AsAzureDataLakeStoreSink() (*AzureDataLakeStoreSink, bool) {
	return nil, false
}

// AsOracleSink is the CopySink implementation for BlobSink.
func (bs BlobSink) AsOracleSink() (*OracleSink, bool) {
	return nil, false
}

// AsSQLDWSink is the CopySink implementation for BlobSink.
func (bs BlobSink) AsSQLDWSink() (*SQLDWSink, bool) {
	return nil, false
}

// AsSQLSink is the CopySink implementation for BlobSink.
func (bs BlobSink) AsSQLSink() (*SQLSink, bool) {
	return nil, false
}

// AsDocumentDbCollectionSink is the CopySink implementation for BlobSink.
func (bs BlobSink) AsDocumentDbCollectionSink() (*DocumentDbCollectionSink, bool) {
	return nil, false
}

// AsFileSystemSink is the CopySink implementation for BlobSink.
func (bs BlobSink) AsFileSystemSink() (*FileSystemSink, bool) {
	return nil, false
}

// AsBlobSink is the CopySink implementation for BlobSink.
func (bs BlobSink) AsBlobSink() (*BlobSink, bool) {
	return &bs, true
}

// AsAzureTableSink is the CopySink implementation for BlobSink.
func (bs BlobSink) AsAzureTableSink() (*AzureTableSink, bool) {
	return nil, false
}

// AsAzureQueueSink is the CopySink implementation for BlobSink.
func (bs BlobSink) AsAzureQueueSink() (*AzureQueueSink, bool) {
	return nil, false
}

// BlobSource is a copy activity Azure Blob source.
type BlobSource struct {
	SourceRetryCount    *map[string]interface{} `json:"sourceRetryCount,omitempty"`
	SourceRetryWait     *map[string]interface{} `json:"sourceRetryWait,omitempty"`
	Type                TypeCopySource          `json:"type,omitempty"`
	TreatEmptyAsNull    *map[string]interface{} `json:"treatEmptyAsNull,omitempty"`
	SkipHeaderLineCount *map[string]interface{} `json:"skipHeaderLineCount,omitempty"`
	Recursive           *map[string]interface{} `json:"recursive,omitempty"`
}

// MarshalJSON is the custom marshaler for BlobSource.
func (bs BlobSource) MarshalJSON() ([]byte, error) {
	bs.Type = TypeBlobSource
	type Alias BlobSource
	return json.Marshal(&struct {
		Alias
	}{
		Alias: (Alias)(bs),
	})
}

// AsAmazonRedshiftSource is the CopySource implementation for BlobSource.
func (bs BlobSource) AsAmazonRedshiftSource() (*AmazonRedshiftSource, bool) {
	return nil, false
}

// AsHTTPSource is the CopySource implementation for BlobSource.
func (bs BlobSource) AsHTTPSource() (*HTTPSource, bool) {
	return nil, false
}

// AsAzureDataLakeStoreSource is the CopySource implementation for BlobSource.
func (bs BlobSource) AsAzureDataLakeStoreSource() (*AzureDataLakeStoreSource, bool) {
	return nil, false
}

// AsMongoDbSource is the CopySource implementation for BlobSource.
func (bs BlobSource) AsMongoDbSource() (*MongoDbSource, bool) {
	return nil, false
}

// AsCassandraSource is the CopySource implementation for BlobSource.
func (bs BlobSource) AsCassandraSource() (*CassandraSource, bool) {
	return nil, false
}

// AsWebSource is the CopySource implementation for BlobSource.
func (bs BlobSource) AsWebSource() (*WebSource, bool) {
	return nil, false
}

// AsOracleSource is the CopySource implementation for BlobSource.
func (bs BlobSource) AsOracleSource() (*OracleSource, bool) {
	return nil, false
}

// AsHdfsSource is the CopySource implementation for BlobSource.
func (bs BlobSource) AsHdfsSource() (*HdfsSource, bool) {
	return nil, false
}

// AsFileSystemSource is the CopySource implementation for BlobSource.
func (bs BlobSource) AsFileSystemSource() (*FileSystemSource, bool) {
	return nil, false
}

// AsSQLDWSource is the CopySource implementation for BlobSource.
func (bs BlobSource) AsSQLDWSource() (*SQLDWSource, bool) {
	return nil, false
}

// AsSQLSource is the CopySource implementation for BlobSource.
func (bs BlobSource) AsSQLSource() (*SQLSource, bool) {
	return nil, false
}

// AsRelationalSource is the CopySource implementation for BlobSource.
func (bs BlobSource) AsRelationalSource() (*RelationalSource, bool) {
	return nil, false
}

// AsDynamicsSource is the CopySource implementation for BlobSource.
func (bs BlobSource) AsDynamicsSource() (*DynamicsSource, bool) {
	return nil, false
}

// AsDocumentDbCollectionSource is the CopySource implementation for BlobSource.
func (bs BlobSource) AsDocumentDbCollectionSource() (*DocumentDbCollectionSource, bool) {
	return nil, false
}

// AsBlobSource is the CopySource implementation for BlobSource.
func (bs BlobSource) AsBlobSource() (*BlobSource, bool) {
	return &bs, true
}

// AsAzureTableSource is the CopySource implementation for BlobSource.
func (bs BlobSource) AsAzureTableSource() (*AzureTableSource, bool) {
	return nil, false
}

// BlobTrigger is trigger that runs everytime the selected Blob container changes.
type BlobTrigger struct {
	Description                *string                     `json:"description,omitempty"`
	Pipelines                  *[]TriggerPipelineReference `json:"pipelines,omitempty"`
	RuntimeState               TriggerRuntimeState         `json:"runtimeState,omitempty"`
	Type                       TypeTrigger                 `json:"type,omitempty"`
	*BlobTriggerTypeProperties `json:"typeProperties,omitempty"`
}

// MarshalJSON is the custom marshaler for BlobTrigger.
func (bt BlobTrigger) MarshalJSON() ([]byte, error) {
	bt.Type = TypeBlobTrigger
	type Alias BlobTrigger
	return json.Marshal(&struct {
		Alias
	}{
		Alias: (Alias)(bt),
	})
}

// AsBlobTrigger is the Trigger implementation for BlobTrigger.
func (bt BlobTrigger) AsBlobTrigger() (*BlobTrigger, bool) {
	return &bt, true
}

// AsScheduleTrigger is the Trigger implementation for BlobTrigger.
func (bt BlobTrigger) AsScheduleTrigger() (*ScheduleTrigger, bool) {
	return nil, false
}

// BlobTriggerTypeProperties is blob Trigger properties.
type BlobTriggerTypeProperties struct {
	FolderPath     *string                 `json:"folderPath,omitempty"`
	MaxConcurrency *int32                  `json:"maxConcurrency,omitempty"`
	LinkedService  *LinkedServiceReference `json:"linkedService,omitempty"`
}

// CassandraLinkedService is linked service for Cassandra data source.
type CassandraLinkedService struct {
	ConnectVia                            *IntegrationRuntimeReference `json:"connectVia,omitempty"`
	Description                           *string                      `json:"description,omitempty"`
	Type                                  TypeLinkedService            `json:"type,omitempty"`
	*CassandraLinkedServiceTypeProperties `json:"typeProperties,omitempty"`
}

// MarshalJSON is the custom marshaler for CassandraLinkedService.
func (cls CassandraLinkedService) MarshalJSON() ([]byte, error) {
	cls.Type = TypeCassandra
	type Alias CassandraLinkedService
	return json.Marshal(&struct {
		Alias
	}{
		Alias: (Alias)(cls),
	})
}

// AsAzureDataLakeAnalyticsLinkedService is the LinkedService implementation for CassandraLinkedService.
func (cls CassandraLinkedService) AsAzureDataLakeAnalyticsLinkedService() (*AzureDataLakeAnalyticsLinkedService, bool) {
	return nil, false
}

// AsHDInsightOnDemandLinkedService is the LinkedService implementation for CassandraLinkedService.
func (cls CassandraLinkedService) AsHDInsightOnDemandLinkedService() (*HDInsightOnDemandLinkedService, bool) {
	return nil, false
}

// AsSapHanaLinkedService is the LinkedService implementation for CassandraLinkedService.
func (cls CassandraLinkedService) AsSapHanaLinkedService() (*SapHanaLinkedService, bool) {
	return nil, false
}

// AsSapBWLinkedService is the LinkedService implementation for CassandraLinkedService.
func (cls CassandraLinkedService) AsSapBWLinkedService() (*SapBWLinkedService, bool) {
	return nil, false
}

// AsSftpServerLinkedService is the LinkedService implementation for CassandraLinkedService.
func (cls CassandraLinkedService) AsSftpServerLinkedService() (*SftpServerLinkedService, bool) {
	return nil, false
}

// AsFtpServerLinkedService is the LinkedService implementation for CassandraLinkedService.
func (cls CassandraLinkedService) AsFtpServerLinkedService() (*FtpServerLinkedService, bool) {
	return nil, false
}

// AsHTTPLinkedService is the LinkedService implementation for CassandraLinkedService.
func (cls CassandraLinkedService) AsHTTPLinkedService() (*HTTPLinkedService, bool) {
	return nil, false
}

// AsAzureSearchLinkedService is the LinkedService implementation for CassandraLinkedService.
func (cls CassandraLinkedService) AsAzureSearchLinkedService() (*AzureSearchLinkedService, bool) {
	return nil, false
}

// AsCustomDataSourceLinkedService is the LinkedService implementation for CassandraLinkedService.
func (cls CassandraLinkedService) AsCustomDataSourceLinkedService() (*CustomDataSourceLinkedService, bool) {
	return nil, false
}

// AsAmazonRedshiftLinkedService is the LinkedService implementation for CassandraLinkedService.
func (cls CassandraLinkedService) AsAmazonRedshiftLinkedService() (*AmazonRedshiftLinkedService, bool) {
	return nil, false
}

// AsAmazonS3LinkedService is the LinkedService implementation for CassandraLinkedService.
func (cls CassandraLinkedService) AsAmazonS3LinkedService() (*AmazonS3LinkedService, bool) {
	return nil, false
}

// AsSalesforceLinkedService is the LinkedService implementation for CassandraLinkedService.
func (cls CassandraLinkedService) AsSalesforceLinkedService() (*SalesforceLinkedService, bool) {
	return nil, false
}

// AsAzureDataLakeStoreLinkedService is the LinkedService implementation for CassandraLinkedService.
func (cls CassandraLinkedService) AsAzureDataLakeStoreLinkedService() (*AzureDataLakeStoreLinkedService, bool) {
	return nil, false
}

// AsMongoDbLinkedService is the LinkedService implementation for CassandraLinkedService.
func (cls CassandraLinkedService) AsMongoDbLinkedService() (*MongoDbLinkedService, bool) {
	return nil, false
}

// AsCassandraLinkedService is the LinkedService implementation for CassandraLinkedService.
func (cls CassandraLinkedService) AsCassandraLinkedService() (*CassandraLinkedService, bool) {
	return &cls, true
}

// AsWebLinkedService is the LinkedService implementation for CassandraLinkedService.
func (cls CassandraLinkedService) AsWebLinkedService() (*WebLinkedService, bool) {
	return nil, false
}

// AsODataLinkedService is the LinkedService implementation for CassandraLinkedService.
func (cls CassandraLinkedService) AsODataLinkedService() (*ODataLinkedService, bool) {
	return nil, false
}

// AsHdfsLinkedService is the LinkedService implementation for CassandraLinkedService.
func (cls CassandraLinkedService) AsHdfsLinkedService() (*HdfsLinkedService, bool) {
	return nil, false
}

// AsOdbcLinkedService is the LinkedService implementation for CassandraLinkedService.
func (cls CassandraLinkedService) AsOdbcLinkedService() (*OdbcLinkedService, bool) {
	return nil, false
}

// AsAzureMLLinkedService is the LinkedService implementation for CassandraLinkedService.
func (cls CassandraLinkedService) AsAzureMLLinkedService() (*AzureMLLinkedService, bool) {
	return nil, false
}

// AsTeradataLinkedService is the LinkedService implementation for CassandraLinkedService.
func (cls CassandraLinkedService) AsTeradataLinkedService() (*TeradataLinkedService, bool) {
	return nil, false
}

// AsDb2LinkedService is the LinkedService implementation for CassandraLinkedService.
func (cls CassandraLinkedService) AsDb2LinkedService() (*Db2LinkedService, bool) {
	return nil, false
}

// AsSybaseLinkedService is the LinkedService implementation for CassandraLinkedService.
func (cls CassandraLinkedService) AsSybaseLinkedService() (*SybaseLinkedService, bool) {
	return nil, false
}

// AsPostgreSQLLinkedService is the LinkedService implementation for CassandraLinkedService.
func (cls CassandraLinkedService) AsPostgreSQLLinkedService() (*PostgreSQLLinkedService, bool) {
	return nil, false
}

// AsMySQLLinkedService is the LinkedService implementation for CassandraLinkedService.
func (cls CassandraLinkedService) AsMySQLLinkedService() (*MySQLLinkedService, bool) {
	return nil, false
}

// AsOracleLinkedService is the LinkedService implementation for CassandraLinkedService.
func (cls CassandraLinkedService) AsOracleLinkedService() (*OracleLinkedService, bool) {
	return nil, false
}

// AsFileServerLinkedService is the LinkedService implementation for CassandraLinkedService.
func (cls CassandraLinkedService) AsFileServerLinkedService() (*FileServerLinkedService, bool) {
	return nil, false
}

// AsHDInsightLinkedService is the LinkedService implementation for CassandraLinkedService.
func (cls CassandraLinkedService) AsHDInsightLinkedService() (*HDInsightLinkedService, bool) {
	return nil, false
}

// AsDynamicsLinkedService is the LinkedService implementation for CassandraLinkedService.
func (cls CassandraLinkedService) AsDynamicsLinkedService() (*DynamicsLinkedService, bool) {
	return nil, false
}

// AsCosmosDbLinkedService is the LinkedService implementation for CassandraLinkedService.
func (cls CassandraLinkedService) AsCosmosDbLinkedService() (*CosmosDbLinkedService, bool) {
	return nil, false
}

// AsAzureKeyVaultLinkedService is the LinkedService implementation for CassandraLinkedService.
func (cls CassandraLinkedService) AsAzureKeyVaultLinkedService() (*AzureKeyVaultLinkedService, bool) {
	return nil, false
}

// AsAzureBatchLinkedService is the LinkedService implementation for CassandraLinkedService.
func (cls CassandraLinkedService) AsAzureBatchLinkedService() (*AzureBatchLinkedService, bool) {
	return nil, false
}

// AsAzureSQLDatabaseLinkedService is the LinkedService implementation for CassandraLinkedService.
func (cls CassandraLinkedService) AsAzureSQLDatabaseLinkedService() (*AzureSQLDatabaseLinkedService, bool) {
	return nil, false
}

// AsSQLServerLinkedService is the LinkedService implementation for CassandraLinkedService.
func (cls CassandraLinkedService) AsSQLServerLinkedService() (*SQLServerLinkedService, bool) {
	return nil, false
}

// AsAzureSQLDWLinkedService is the LinkedService implementation for CassandraLinkedService.
func (cls CassandraLinkedService) AsAzureSQLDWLinkedService() (*AzureSQLDWLinkedService, bool) {
	return nil, false
}

// AsAzureStorageLinkedService is the LinkedService implementation for CassandraLinkedService.
func (cls CassandraLinkedService) AsAzureStorageLinkedService() (*AzureStorageLinkedService, bool) {
	return nil, false
}

// CassandraLinkedServiceTypeProperties is cassandra linked service properties.
type CassandraLinkedServiceTypeProperties struct {
	Host                *map[string]interface{} `json:"host,omitempty"`
	AuthenticationType  *map[string]interface{} `json:"authenticationType,omitempty"`
	Port                *map[string]interface{} `json:"port,omitempty"`
	Username            *map[string]interface{} `json:"username,omitempty"`
	Password            *SecureString           `json:"password,omitempty"`
	EncryptedCredential *map[string]interface{} `json:"encryptedCredential,omitempty"`
}

// CassandraSource is a copy activity source for a Cassandra database.
type CassandraSource struct {
	SourceRetryCount *map[string]interface{}              `json:"sourceRetryCount,omitempty"`
	SourceRetryWait  *map[string]interface{}              `json:"sourceRetryWait,omitempty"`
	Type             TypeCopySource                       `json:"type,omitempty"`
	Query            *map[string]interface{}              `json:"query,omitempty"`
	ConsistencyLevel CassandraSourceReadConsistencyLevels `json:"consistencyLevel,omitempty"`
}

// MarshalJSON is the custom marshaler for CassandraSource.
func (cs CassandraSource) MarshalJSON() ([]byte, error) {
	cs.Type = TypeCassandraSource
	type Alias CassandraSource
	return json.Marshal(&struct {
		Alias
	}{
		Alias: (Alias)(cs),
	})
}

// AsAmazonRedshiftSource is the CopySource implementation for CassandraSource.
func (cs CassandraSource) AsAmazonRedshiftSource() (*AmazonRedshiftSource, bool) {
	return nil, false
}

// AsHTTPSource is the CopySource implementation for CassandraSource.
func (cs CassandraSource) AsHTTPSource() (*HTTPSource, bool) {
	return nil, false
}

// AsAzureDataLakeStoreSource is the CopySource implementation for CassandraSource.
func (cs CassandraSource) AsAzureDataLakeStoreSource() (*AzureDataLakeStoreSource, bool) {
	return nil, false
}

// AsMongoDbSource is the CopySource implementation for CassandraSource.
func (cs CassandraSource) AsMongoDbSource() (*MongoDbSource, bool) {
	return nil, false
}

// AsCassandraSource is the CopySource implementation for CassandraSource.
func (cs CassandraSource) AsCassandraSource() (*CassandraSource, bool) {
	return &cs, true
}

// AsWebSource is the CopySource implementation for CassandraSource.
func (cs CassandraSource) AsWebSource() (*WebSource, bool) {
	return nil, false
}

// AsOracleSource is the CopySource implementation for CassandraSource.
func (cs CassandraSource) AsOracleSource() (*OracleSource, bool) {
	return nil, false
}

// AsHdfsSource is the CopySource implementation for CassandraSource.
func (cs CassandraSource) AsHdfsSource() (*HdfsSource, bool) {
	return nil, false
}

// AsFileSystemSource is the CopySource implementation for CassandraSource.
func (cs CassandraSource) AsFileSystemSource() (*FileSystemSource, bool) {
	return nil, false
}

// AsSQLDWSource is the CopySource implementation for CassandraSource.
func (cs CassandraSource) AsSQLDWSource() (*SQLDWSource, bool) {
	return nil, false
}

// AsSQLSource is the CopySource implementation for CassandraSource.
func (cs CassandraSource) AsSQLSource() (*SQLSource, bool) {
	return nil, false
}

// AsRelationalSource is the CopySource implementation for CassandraSource.
func (cs CassandraSource) AsRelationalSource() (*RelationalSource, bool) {
	return nil, false
}

// AsDynamicsSource is the CopySource implementation for CassandraSource.
func (cs CassandraSource) AsDynamicsSource() (*DynamicsSource, bool) {
	return nil, false
}

// AsDocumentDbCollectionSource is the CopySource implementation for CassandraSource.
func (cs CassandraSource) AsDocumentDbCollectionSource() (*DocumentDbCollectionSource, bool) {
	return nil, false
}

// AsBlobSource is the CopySource implementation for CassandraSource.
func (cs CassandraSource) AsBlobSource() (*BlobSource, bool) {
	return nil, false
}

// AsAzureTableSource is the CopySource implementation for CassandraSource.
func (cs CassandraSource) AsAzureTableSource() (*AzureTableSource, bool) {
	return nil, false
}

// CassandraTableDataset is the Cassandra database dataset.
type CassandraTableDataset struct {
	Description                          *string                             `json:"description,omitempty"`
	Structure                            *map[string]interface{}             `json:"structure,omitempty"`
	LinkedServiceName                    *LinkedServiceReference             `json:"linkedServiceName,omitempty"`
	Parameters                           *map[string]*ParameterSpecification `json:"parameters,omitempty"`
	Type                                 TypeDataset                         `json:"type,omitempty"`
	*CassandraTableDatasetTypeProperties `json:"typeProperties,omitempty"`
}

// MarshalJSON is the custom marshaler for CassandraTableDataset.
func (ctd CassandraTableDataset) MarshalJSON() ([]byte, error) {
	ctd.Type = TypeCassandraTable
	type Alias CassandraTableDataset
	return json.Marshal(&struct {
		Alias
	}{
		Alias: (Alias)(ctd),
	})
}

// AsHTTPDataset is the Dataset implementation for CassandraTableDataset.
func (ctd CassandraTableDataset) AsHTTPDataset() (*HTTPDataset, bool) {
	return nil, false
}

// AsAzureSearchIndexDataset is the Dataset implementation for CassandraTableDataset.
func (ctd CassandraTableDataset) AsAzureSearchIndexDataset() (*AzureSearchIndexDataset, bool) {
	return nil, false
}

// AsWebTableDataset is the Dataset implementation for CassandraTableDataset.
func (ctd CassandraTableDataset) AsWebTableDataset() (*WebTableDataset, bool) {
	return nil, false
}

// AsSQLServerTableDataset is the Dataset implementation for CassandraTableDataset.
func (ctd CassandraTableDataset) AsSQLServerTableDataset() (*SQLServerTableDataset, bool) {
	return nil, false
}

// AsRelationalTableDataset is the Dataset implementation for CassandraTableDataset.
func (ctd CassandraTableDataset) AsRelationalTableDataset() (*RelationalTableDataset, bool) {
	return nil, false
}

// AsOracleTableDataset is the Dataset implementation for CassandraTableDataset.
func (ctd CassandraTableDataset) AsOracleTableDataset() (*OracleTableDataset, bool) {
	return nil, false
}

// AsODataResourceDataset is the Dataset implementation for CassandraTableDataset.
func (ctd CassandraTableDataset) AsODataResourceDataset() (*ODataResourceDataset, bool) {
	return nil, false
}

// AsMongoDbCollectionDataset is the Dataset implementation for CassandraTableDataset.
func (ctd CassandraTableDataset) AsMongoDbCollectionDataset() (*MongoDbCollectionDataset, bool) {
	return nil, false
}

// AsFileShareDataset is the Dataset implementation for CassandraTableDataset.
func (ctd CassandraTableDataset) AsFileShareDataset() (*FileShareDataset, bool) {
	return nil, false
}

// AsAzureDataLakeStoreDataset is the Dataset implementation for CassandraTableDataset.
func (ctd CassandraTableDataset) AsAzureDataLakeStoreDataset() (*AzureDataLakeStoreDataset, bool) {
	return nil, false
}

// AsDynamicsEntityDataset is the Dataset implementation for CassandraTableDataset.
func (ctd CassandraTableDataset) AsDynamicsEntityDataset() (*DynamicsEntityDataset, bool) {
	return nil, false
}

// AsDocumentDbCollectionDataset is the Dataset implementation for CassandraTableDataset.
func (ctd CassandraTableDataset) AsDocumentDbCollectionDataset() (*DocumentDbCollectionDataset, bool) {
	return nil, false
}

// AsCustomDataset is the Dataset implementation for CassandraTableDataset.
func (ctd CassandraTableDataset) AsCustomDataset() (*CustomDataset, bool) {
	return nil, false
}

// AsCassandraTableDataset is the Dataset implementation for CassandraTableDataset.
func (ctd CassandraTableDataset) AsCassandraTableDataset() (*CassandraTableDataset, bool) {
	return &ctd, true
}

// AsAzureSQLDWTableDataset is the Dataset implementation for CassandraTableDataset.
func (ctd CassandraTableDataset) AsAzureSQLDWTableDataset() (*AzureSQLDWTableDataset, bool) {
	return nil, false
}

// AsAzureSQLTableDataset is the Dataset implementation for CassandraTableDataset.
func (ctd CassandraTableDataset) AsAzureSQLTableDataset() (*AzureSQLTableDataset, bool) {
	return nil, false
}

// AsAzureTableDataset is the Dataset implementation for CassandraTableDataset.
func (ctd CassandraTableDataset) AsAzureTableDataset() (*AzureTableDataset, bool) {
	return nil, false
}

// AsAzureBlobDataset is the Dataset implementation for CassandraTableDataset.
func (ctd CassandraTableDataset) AsAzureBlobDataset() (*AzureBlobDataset, bool) {
	return nil, false
}

// AsAmazonS3Dataset is the Dataset implementation for CassandraTableDataset.
func (ctd CassandraTableDataset) AsAmazonS3Dataset() (*AmazonS3Dataset, bool) {
	return nil, false
}

// CassandraTableDatasetTypeProperties is cassandra dataset properties.
type CassandraTableDatasetTypeProperties struct {
	TableName *map[string]interface{} `json:"tableName,omitempty"`
	Keyspace  *map[string]interface{} `json:"keyspace,omitempty"`
}

// ControlActivity is base class for all control activities like IfCondition, ForEach , Until.
type ControlActivity struct {
	Name        *string               `json:"name,omitempty"`
	Description *string               `json:"description,omitempty"`
	DependsOn   *[]ActivityDependency `json:"dependsOn,omitempty"`
	Type        TypeActivity          `json:"type,omitempty"`
}

// MarshalJSON is the custom marshaler for ControlActivity.
func (ca ControlActivity) MarshalJSON() ([]byte, error) {
	ca.Type = TypeContainer
	type Alias ControlActivity
	return json.Marshal(&struct {
		Alias
	}{
		Alias: (Alias)(ca),
	})
}

// AsDataLakeAnalyticsUSQLActivity is the Activity implementation for ControlActivity.
func (ca ControlActivity) AsDataLakeAnalyticsUSQLActivity() (*DataLakeAnalyticsUSQLActivity, bool) {
	return nil, false
}

// AsAzureMLUpdateResourceActivity is the Activity implementation for ControlActivity.
func (ca ControlActivity) AsAzureMLUpdateResourceActivity() (*AzureMLUpdateResourceActivity, bool) {
	return nil, false
}

// AsAzureMLBatchExecutionActivity is the Activity implementation for ControlActivity.
func (ca ControlActivity) AsAzureMLBatchExecutionActivity() (*AzureMLBatchExecutionActivity, bool) {
	return nil, false
}

// AsGetMetadataActivity is the Activity implementation for ControlActivity.
func (ca ControlActivity) AsGetMetadataActivity() (*GetMetadataActivity, bool) {
	return nil, false
}

// AsWebActivity is the Activity implementation for ControlActivity.
func (ca ControlActivity) AsWebActivity() (*WebActivity, bool) {
	return nil, false
}

// AsLookupActivity is the Activity implementation for ControlActivity.
func (ca ControlActivity) AsLookupActivity() (*LookupActivity, bool) {
	return nil, false
}

// AsSQLServerStoredProcedureActivity is the Activity implementation for ControlActivity.
func (ca ControlActivity) AsSQLServerStoredProcedureActivity() (*SQLServerStoredProcedureActivity, bool) {
	return nil, false
}

// AsCustomActivity is the Activity implementation for ControlActivity.
func (ca ControlActivity) AsCustomActivity() (*CustomActivity, bool) {
	return nil, false
}

// AsHDInsightSparkActivity is the Activity implementation for ControlActivity.
func (ca ControlActivity) AsHDInsightSparkActivity() (*HDInsightSparkActivity, bool) {
	return nil, false
}

// AsHDInsightStreamingActivity is the Activity implementation for ControlActivity.
func (ca ControlActivity) AsHDInsightStreamingActivity() (*HDInsightStreamingActivity, bool) {
	return nil, false
}

// AsHDInsightMapReduceActivity is the Activity implementation for ControlActivity.
func (ca ControlActivity) AsHDInsightMapReduceActivity() (*HDInsightMapReduceActivity, bool) {
	return nil, false
}

// AsHDInsightPigActivity is the Activity implementation for ControlActivity.
func (ca ControlActivity) AsHDInsightPigActivity() (*HDInsightPigActivity, bool) {
	return nil, false
}

// AsHDInsightHiveActivity is the Activity implementation for ControlActivity.
func (ca ControlActivity) AsHDInsightHiveActivity() (*HDInsightHiveActivity, bool) {
	return nil, false
}

// AsCopyActivity is the Activity implementation for ControlActivity.
func (ca ControlActivity) AsCopyActivity() (*CopyActivity, bool) {
	return nil, false
}

// AsExecutionActivity is the Activity implementation for ControlActivity.
func (ca ControlActivity) AsExecutionActivity() (*ExecutionActivity, bool) {
	return nil, false
}

// AsUntilActivity is the Activity implementation for ControlActivity.
func (ca ControlActivity) AsUntilActivity() (*UntilActivity, bool) {
	return nil, false
}

// AsWaitActivity is the Activity implementation for ControlActivity.
func (ca ControlActivity) AsWaitActivity() (*WaitActivity, bool) {
	return nil, false
}

// AsForEachActivity is the Activity implementation for ControlActivity.
func (ca ControlActivity) AsForEachActivity() (*ForEachActivity, bool) {
	return nil, false
}

// AsIfConditionActivity is the Activity implementation for ControlActivity.
func (ca ControlActivity) AsIfConditionActivity() (*IfConditionActivity, bool) {
	return nil, false
}

// AsExecutePipelineActivity is the Activity implementation for ControlActivity.
func (ca ControlActivity) AsExecutePipelineActivity() (*ExecutePipelineActivity, bool) {
	return nil, false
}

// AsControlActivity is the Activity implementation for ControlActivity.
func (ca ControlActivity) AsControlActivity() (*ControlActivity, bool) {
	return &ca, true
}

// CopyActivity is copy activity.
type CopyActivity struct {
	Name                        *string                 `json:"name,omitempty"`
	Description                 *string                 `json:"description,omitempty"`
	DependsOn                   *[]ActivityDependency   `json:"dependsOn,omitempty"`
	Type                        TypeActivity            `json:"type,omitempty"`
	LinkedServiceName           *LinkedServiceReference `json:"linkedServiceName,omitempty"`
	Policy                      *ActivityPolicy         `json:"policy,omitempty"`
	*CopyActivityTypeProperties `json:"typeProperties,omitempty"`
	Inputs                      *[]DatasetReference `json:"inputs,omitempty"`
	Outputs                     *[]DatasetReference `json:"outputs,omitempty"`
}

// MarshalJSON is the custom marshaler for CopyActivity.
func (ca CopyActivity) MarshalJSON() ([]byte, error) {
	ca.Type = TypeCopy
	type Alias CopyActivity
	return json.Marshal(&struct {
		Alias
	}{
		Alias: (Alias)(ca),
	})
}

// AsDataLakeAnalyticsUSQLActivity is the ExecutionActivity implementation for CopyActivity.
func (ca CopyActivity) AsDataLakeAnalyticsUSQLActivity() (*DataLakeAnalyticsUSQLActivity, bool) {
	return nil, false
}

// AsAzureMLUpdateResourceActivity is the ExecutionActivity implementation for CopyActivity.
func (ca CopyActivity) AsAzureMLUpdateResourceActivity() (*AzureMLUpdateResourceActivity, bool) {
	return nil, false
}

// AsAzureMLBatchExecutionActivity is the ExecutionActivity implementation for CopyActivity.
func (ca CopyActivity) AsAzureMLBatchExecutionActivity() (*AzureMLBatchExecutionActivity, bool) {
	return nil, false
}

// AsGetMetadataActivity is the ExecutionActivity implementation for CopyActivity.
func (ca CopyActivity) AsGetMetadataActivity() (*GetMetadataActivity, bool) {
	return nil, false
}

// AsWebActivity is the ExecutionActivity implementation for CopyActivity.
func (ca CopyActivity) AsWebActivity() (*WebActivity, bool) {
	return nil, false
}

// AsLookupActivity is the ExecutionActivity implementation for CopyActivity.
func (ca CopyActivity) AsLookupActivity() (*LookupActivity, bool) {
	return nil, false
}

// AsSQLServerStoredProcedureActivity is the ExecutionActivity implementation for CopyActivity.
func (ca CopyActivity) AsSQLServerStoredProcedureActivity() (*SQLServerStoredProcedureActivity, bool) {
	return nil, false
}

// AsCustomActivity is the ExecutionActivity implementation for CopyActivity.
func (ca CopyActivity) AsCustomActivity() (*CustomActivity, bool) {
	return nil, false
}

// AsHDInsightSparkActivity is the ExecutionActivity implementation for CopyActivity.
func (ca CopyActivity) AsHDInsightSparkActivity() (*HDInsightSparkActivity, bool) {
	return nil, false
}

// AsHDInsightStreamingActivity is the ExecutionActivity implementation for CopyActivity.
func (ca CopyActivity) AsHDInsightStreamingActivity() (*HDInsightStreamingActivity, bool) {
	return nil, false
}

// AsHDInsightMapReduceActivity is the ExecutionActivity implementation for CopyActivity.
func (ca CopyActivity) AsHDInsightMapReduceActivity() (*HDInsightMapReduceActivity, bool) {
	return nil, false
}

// AsHDInsightPigActivity is the ExecutionActivity implementation for CopyActivity.
func (ca CopyActivity) AsHDInsightPigActivity() (*HDInsightPigActivity, bool) {
	return nil, false
}

// AsHDInsightHiveActivity is the ExecutionActivity implementation for CopyActivity.
func (ca CopyActivity) AsHDInsightHiveActivity() (*HDInsightHiveActivity, bool) {
	return nil, false
}

// AsCopyActivity is the ExecutionActivity implementation for CopyActivity.
func (ca CopyActivity) AsCopyActivity() (*CopyActivity, bool) {
	return &ca, true
}

// AsExecutionActivity is the ExecutionActivity implementation for CopyActivity.
func (ca CopyActivity) AsExecutionActivity() (*ExecutionActivity, bool) {
	return nil, false
}

// AsUntilActivity is the ExecutionActivity implementation for CopyActivity.
func (ca CopyActivity) AsUntilActivity() (*UntilActivity, bool) {
	return nil, false
}

// AsWaitActivity is the ExecutionActivity implementation for CopyActivity.
func (ca CopyActivity) AsWaitActivity() (*WaitActivity, bool) {
	return nil, false
}

// AsForEachActivity is the ExecutionActivity implementation for CopyActivity.
func (ca CopyActivity) AsForEachActivity() (*ForEachActivity, bool) {
	return nil, false
}

// AsIfConditionActivity is the ExecutionActivity implementation for CopyActivity.
func (ca CopyActivity) AsIfConditionActivity() (*IfConditionActivity, bool) {
	return nil, false
}

// AsExecutePipelineActivity is the ExecutionActivity implementation for CopyActivity.
func (ca CopyActivity) AsExecutePipelineActivity() (*ExecutePipelineActivity, bool) {
	return nil, false
}

// AsControlActivity is the ExecutionActivity implementation for CopyActivity.
func (ca CopyActivity) AsControlActivity() (*ControlActivity, bool) {
	return nil, false
}

// CopyActivityTypeProperties is copy activity properties.
type CopyActivityTypeProperties struct {
	Source                          CopySource                       `json:"source,omitempty"`
	Sink                            CopySink                         `json:"sink,omitempty"`
	Translator                      CopyTranslator                   `json:"translator,omitempty"`
	EnableStaging                   *map[string]interface{}          `json:"enableStaging,omitempty"`
	StagingSettings                 *StagingSettings                 `json:"stagingSettings,omitempty"`
	ParallelCopies                  *map[string]interface{}          `json:"parallelCopies,omitempty"`
	CloudDataMovementUnits          *map[string]interface{}          `json:"cloudDataMovementUnits,omitempty"`
	EnableSkipIncompatibleRow       *map[string]interface{}          `json:"enableSkipIncompatibleRow,omitempty"`
	RedirectIncompatibleRowSettings *RedirectIncompatibleRowSettings `json:"redirectIncompatibleRowSettings,omitempty"`
}

// UnmarshalJSON is the custom unmarshaler for CopyActivityTypeProperties struct.
func (catp *CopyActivityTypeProperties) UnmarshalJSON(body []byte) error {
	var m map[string]*json.RawMessage
	err := json.Unmarshal(body, &m)
	if err != nil {
		return err
	}
	var v *json.RawMessage

	v = m["source"]
	if v != nil {
		source, err := unmarshalCopySource(*m["source"])
		if err != nil {
			return err
		}
		catp.Source = source
	}

	v = m["sink"]
	if v != nil {
		sink, err := unmarshalCopySink(*m["sink"])
		if err != nil {
			return err
		}
		catp.Sink = sink
	}

	v = m["translator"]
	if v != nil {
		translator, err := unmarshalCopyTranslator(*m["translator"])
		if err != nil {
			return err
		}
		catp.Translator = translator
	}

	v = m["enableStaging"]
	if v != nil {
		var enableStaging map[string]interface{}
		err = json.Unmarshal(*m["enableStaging"], &enableStaging)
		if err != nil {
			return err
		}
		catp.EnableStaging = &enableStaging
	}

	v = m["stagingSettings"]
	if v != nil {
		var stagingSettings StagingSettings
		err = json.Unmarshal(*m["stagingSettings"], &stagingSettings)
		if err != nil {
			return err
		}
		catp.StagingSettings = &stagingSettings
	}

	v = m["parallelCopies"]
	if v != nil {
		var parallelCopies map[string]interface{}
		err = json.Unmarshal(*m["parallelCopies"], &parallelCopies)
		if err != nil {
			return err
		}
		catp.ParallelCopies = &parallelCopies
	}

	v = m["cloudDataMovementUnits"]
	if v != nil {
		var cloudDataMovementUnits map[string]interface{}
		err = json.Unmarshal(*m["cloudDataMovementUnits"], &cloudDataMovementUnits)
		if err != nil {
			return err
		}
		catp.CloudDataMovementUnits = &cloudDataMovementUnits
	}

	v = m["enableSkipIncompatibleRow"]
	if v != nil {
		var enableSkipIncompatibleRow map[string]interface{}
		err = json.Unmarshal(*m["enableSkipIncompatibleRow"], &enableSkipIncompatibleRow)
		if err != nil {
			return err
		}
		catp.EnableSkipIncompatibleRow = &enableSkipIncompatibleRow
	}

	v = m["redirectIncompatibleRowSettings"]
	if v != nil {
		var redirectIncompatibleRowSettings RedirectIncompatibleRowSettings
		err = json.Unmarshal(*m["redirectIncompatibleRowSettings"], &redirectIncompatibleRowSettings)
		if err != nil {
			return err
		}
		catp.RedirectIncompatibleRowSettings = &redirectIncompatibleRowSettings
	}

	return nil
}

// CopySink is a copy activity sink.
type CopySink interface {
	AsOdbcSink() (*OdbcSink, bool)
	AsAzureSearchIndexSink() (*AzureSearchIndexSink, bool)
	AsAzureDataLakeStoreSink() (*AzureDataLakeStoreSink, bool)
	AsOracleSink() (*OracleSink, bool)
	AsSQLDWSink() (*SQLDWSink, bool)
	AsSQLSink() (*SQLSink, bool)
	AsDocumentDbCollectionSink() (*DocumentDbCollectionSink, bool)
	AsFileSystemSink() (*FileSystemSink, bool)
	AsBlobSink() (*BlobSink, bool)
	AsAzureTableSink() (*AzureTableSink, bool)
	AsAzureQueueSink() (*AzureQueueSink, bool)
}

func unmarshalCopySink(body []byte) (CopySink, error) {
	var m map[string]interface{}
	err := json.Unmarshal(body, &m)
	if err != nil {
		return nil, err
	}

	switch m["type"] {
	case string(TypeOdbcSink):
		var osVar OdbcSink
		err := json.Unmarshal(body, &osVar)
		return osVar, err
	case string(TypeAzureSearchIndexSink):
		var asis AzureSearchIndexSink
		err := json.Unmarshal(body, &asis)
		return asis, err
	case string(TypeAzureDataLakeStoreSink):
		var adlss AzureDataLakeStoreSink
		err := json.Unmarshal(body, &adlss)
		return adlss, err
	case string(TypeOracleSink):
		var osVar OracleSink
		err := json.Unmarshal(body, &osVar)
		return osVar, err
	case string(TypeSQLDWSink):
		var sds SQLDWSink
		err := json.Unmarshal(body, &sds)
		return sds, err
	case string(TypeSQLSink):
		var ss SQLSink
		err := json.Unmarshal(body, &ss)
		return ss, err
	case string(TypeDocumentDbCollectionSink):
		var ddcs DocumentDbCollectionSink
		err := json.Unmarshal(body, &ddcs)
		return ddcs, err
	case string(TypeFileSystemSink):
		var fss FileSystemSink
		err := json.Unmarshal(body, &fss)
		return fss, err
	case string(TypeBlobSink):
		var bs BlobSink
		err := json.Unmarshal(body, &bs)
		return bs, err
	case string(TypeAzureTableSink):
		var ats AzureTableSink
		err := json.Unmarshal(body, &ats)
		return ats, err
	case string(TypeAzureQueueSink):
		var aqs AzureQueueSink
		err := json.Unmarshal(body, &aqs)
		return aqs, err
	default:
		return nil, errors.New("Unsupported type")
	}
}
func unmarshalCopySinkArray(body []byte) ([]CopySink, error) {
	var rawMessages []*json.RawMessage
	err := json.Unmarshal(body, &rawMessages)
	if err != nil {
		return nil, err
	}

	csArray := make([]CopySink, len(rawMessages))

	for index, rawMessage := range rawMessages {
		cs, err := unmarshalCopySink(*rawMessage)
		if err != nil {
			return nil, err
		}
		csArray[index] = cs
	}
	return csArray, nil
}

// CopySource is a copy activity source.
type CopySource interface {
	AsAmazonRedshiftSource() (*AmazonRedshiftSource, bool)
	AsHTTPSource() (*HTTPSource, bool)
	AsAzureDataLakeStoreSource() (*AzureDataLakeStoreSource, bool)
	AsMongoDbSource() (*MongoDbSource, bool)
	AsCassandraSource() (*CassandraSource, bool)
	AsWebSource() (*WebSource, bool)
	AsOracleSource() (*OracleSource, bool)
	AsHdfsSource() (*HdfsSource, bool)
	AsFileSystemSource() (*FileSystemSource, bool)
	AsSQLDWSource() (*SQLDWSource, bool)
	AsSQLSource() (*SQLSource, bool)
	AsRelationalSource() (*RelationalSource, bool)
	AsDynamicsSource() (*DynamicsSource, bool)
	AsDocumentDbCollectionSource() (*DocumentDbCollectionSource, bool)
	AsBlobSource() (*BlobSource, bool)
	AsAzureTableSource() (*AzureTableSource, bool)
}

func unmarshalCopySource(body []byte) (CopySource, error) {
	var m map[string]interface{}
	err := json.Unmarshal(body, &m)
	if err != nil {
		return nil, err
	}

	switch m["type"] {
	case string(TypeAmazonRedshiftSource):
		var ars AmazonRedshiftSource
		err := json.Unmarshal(body, &ars)
		return ars, err
	case string(TypeHTTPSource):
		var hs HTTPSource
		err := json.Unmarshal(body, &hs)
		return hs, err
	case string(TypeAzureDataLakeStoreSource):
		var adlss AzureDataLakeStoreSource
		err := json.Unmarshal(body, &adlss)
		return adlss, err
	case string(TypeMongoDbSource):
		var mds MongoDbSource
		err := json.Unmarshal(body, &mds)
		return mds, err
	case string(TypeCassandraSource):
		var cs CassandraSource
		err := json.Unmarshal(body, &cs)
		return cs, err
	case string(TypeWebSource):
		var ws WebSource
		err := json.Unmarshal(body, &ws)
		return ws, err
	case string(TypeOracleSource):
		var osVar OracleSource
		err := json.Unmarshal(body, &osVar)
		return osVar, err
	case string(TypeHdfsSource):
		var hs HdfsSource
		err := json.Unmarshal(body, &hs)
		return hs, err
	case string(TypeFileSystemSource):
		var fss FileSystemSource
		err := json.Unmarshal(body, &fss)
		return fss, err
	case string(TypeSQLDWSource):
		var sds SQLDWSource
		err := json.Unmarshal(body, &sds)
		return sds, err
	case string(TypeSQLSource):
		var ss SQLSource
		err := json.Unmarshal(body, &ss)
		return ss, err
	case string(TypeRelationalSource):
		var rs RelationalSource
		err := json.Unmarshal(body, &rs)
		return rs, err
	case string(TypeDynamicsSource):
		var ds DynamicsSource
		err := json.Unmarshal(body, &ds)
		return ds, err
	case string(TypeDocumentDbCollectionSource):
		var ddcs DocumentDbCollectionSource
		err := json.Unmarshal(body, &ddcs)
		return ddcs, err
	case string(TypeBlobSource):
		var bs BlobSource
		err := json.Unmarshal(body, &bs)
		return bs, err
	case string(TypeAzureTableSource):
		var ats AzureTableSource
		err := json.Unmarshal(body, &ats)
		return ats, err
	default:
		return nil, errors.New("Unsupported type")
	}
}
func unmarshalCopySourceArray(body []byte) ([]CopySource, error) {
	var rawMessages []*json.RawMessage
	err := json.Unmarshal(body, &rawMessages)
	if err != nil {
		return nil, err
	}

	csArray := make([]CopySource, len(rawMessages))

	for index, rawMessage := range rawMessages {
		cs, err := unmarshalCopySource(*rawMessage)
		if err != nil {
			return nil, err
		}
		csArray[index] = cs
	}
	return csArray, nil
}

// CopyTranslator is a copy activity translator.
type CopyTranslator interface {
	AsTabularTranslator() (*TabularTranslator, bool)
}

func unmarshalCopyTranslator(body []byte) (CopyTranslator, error) {
	var m map[string]interface{}
	err := json.Unmarshal(body, &m)
	if err != nil {
		return nil, err
	}

	switch m["type"] {
	case string(TypeTabularTranslator):
		var tt TabularTranslator
		err := json.Unmarshal(body, &tt)
		return tt, err
	default:
		return nil, errors.New("Unsupported type")
	}
}
func unmarshalCopyTranslatorArray(body []byte) ([]CopyTranslator, error) {
	var rawMessages []*json.RawMessage
	err := json.Unmarshal(body, &rawMessages)
	if err != nil {
		return nil, err
	}

	ctArray := make([]CopyTranslator, len(rawMessages))

	for index, rawMessage := range rawMessages {
		ct, err := unmarshalCopyTranslator(*rawMessage)
		if err != nil {
			return nil, err
		}
		ctArray[index] = ct
	}
	return ctArray, nil
}

// CosmosDbLinkedService is microsoft Azure Cosmos Database (CosmosDB) linked service.
type CosmosDbLinkedService struct {
	ConnectVia                           *IntegrationRuntimeReference `json:"connectVia,omitempty"`
	Description                          *string                      `json:"description,omitempty"`
	Type                                 TypeLinkedService            `json:"type,omitempty"`
	*CosmosDbLinkedServiceTypeProperties `json:"typeProperties,omitempty"`
}

// MarshalJSON is the custom marshaler for CosmosDbLinkedService.
func (cdls CosmosDbLinkedService) MarshalJSON() ([]byte, error) {
	cdls.Type = TypeCosmosDb
	type Alias CosmosDbLinkedService
	return json.Marshal(&struct {
		Alias
	}{
		Alias: (Alias)(cdls),
	})
}

// AsAzureDataLakeAnalyticsLinkedService is the LinkedService implementation for CosmosDbLinkedService.
func (cdls CosmosDbLinkedService) AsAzureDataLakeAnalyticsLinkedService() (*AzureDataLakeAnalyticsLinkedService, bool) {
	return nil, false
}

// AsHDInsightOnDemandLinkedService is the LinkedService implementation for CosmosDbLinkedService.
func (cdls CosmosDbLinkedService) AsHDInsightOnDemandLinkedService() (*HDInsightOnDemandLinkedService, bool) {
	return nil, false
}

// AsSapHanaLinkedService is the LinkedService implementation for CosmosDbLinkedService.
func (cdls CosmosDbLinkedService) AsSapHanaLinkedService() (*SapHanaLinkedService, bool) {
	return nil, false
}

// AsSapBWLinkedService is the LinkedService implementation for CosmosDbLinkedService.
func (cdls CosmosDbLinkedService) AsSapBWLinkedService() (*SapBWLinkedService, bool) {
	return nil, false
}

// AsSftpServerLinkedService is the LinkedService implementation for CosmosDbLinkedService.
func (cdls CosmosDbLinkedService) AsSftpServerLinkedService() (*SftpServerLinkedService, bool) {
	return nil, false
}

// AsFtpServerLinkedService is the LinkedService implementation for CosmosDbLinkedService.
func (cdls CosmosDbLinkedService) AsFtpServerLinkedService() (*FtpServerLinkedService, bool) {
	return nil, false
}

// AsHTTPLinkedService is the LinkedService implementation for CosmosDbLinkedService.
func (cdls CosmosDbLinkedService) AsHTTPLinkedService() (*HTTPLinkedService, bool) {
	return nil, false
}

// AsAzureSearchLinkedService is the LinkedService implementation for CosmosDbLinkedService.
func (cdls CosmosDbLinkedService) AsAzureSearchLinkedService() (*AzureSearchLinkedService, bool) {
	return nil, false
}

// AsCustomDataSourceLinkedService is the LinkedService implementation for CosmosDbLinkedService.
func (cdls CosmosDbLinkedService) AsCustomDataSourceLinkedService() (*CustomDataSourceLinkedService, bool) {
	return nil, false
}

// AsAmazonRedshiftLinkedService is the LinkedService implementation for CosmosDbLinkedService.
func (cdls CosmosDbLinkedService) AsAmazonRedshiftLinkedService() (*AmazonRedshiftLinkedService, bool) {
	return nil, false
}

// AsAmazonS3LinkedService is the LinkedService implementation for CosmosDbLinkedService.
func (cdls CosmosDbLinkedService) AsAmazonS3LinkedService() (*AmazonS3LinkedService, bool) {
	return nil, false
}

// AsSalesforceLinkedService is the LinkedService implementation for CosmosDbLinkedService.
func (cdls CosmosDbLinkedService) AsSalesforceLinkedService() (*SalesforceLinkedService, bool) {
	return nil, false
}

// AsAzureDataLakeStoreLinkedService is the LinkedService implementation for CosmosDbLinkedService.
func (cdls CosmosDbLinkedService) AsAzureDataLakeStoreLinkedService() (*AzureDataLakeStoreLinkedService, bool) {
	return nil, false
}

// AsMongoDbLinkedService is the LinkedService implementation for CosmosDbLinkedService.
func (cdls CosmosDbLinkedService) AsMongoDbLinkedService() (*MongoDbLinkedService, bool) {
	return nil, false
}

// AsCassandraLinkedService is the LinkedService implementation for CosmosDbLinkedService.
func (cdls CosmosDbLinkedService) AsCassandraLinkedService() (*CassandraLinkedService, bool) {
	return nil, false
}

// AsWebLinkedService is the LinkedService implementation for CosmosDbLinkedService.
func (cdls CosmosDbLinkedService) AsWebLinkedService() (*WebLinkedService, bool) {
	return nil, false
}

// AsODataLinkedService is the LinkedService implementation for CosmosDbLinkedService.
func (cdls CosmosDbLinkedService) AsODataLinkedService() (*ODataLinkedService, bool) {
	return nil, false
}

// AsHdfsLinkedService is the LinkedService implementation for CosmosDbLinkedService.
func (cdls CosmosDbLinkedService) AsHdfsLinkedService() (*HdfsLinkedService, bool) {
	return nil, false
}

// AsOdbcLinkedService is the LinkedService implementation for CosmosDbLinkedService.
func (cdls CosmosDbLinkedService) AsOdbcLinkedService() (*OdbcLinkedService, bool) {
	return nil, false
}

// AsAzureMLLinkedService is the LinkedService implementation for CosmosDbLinkedService.
func (cdls CosmosDbLinkedService) AsAzureMLLinkedService() (*AzureMLLinkedService, bool) {
	return nil, false
}

// AsTeradataLinkedService is the LinkedService implementation for CosmosDbLinkedService.
func (cdls CosmosDbLinkedService) AsTeradataLinkedService() (*TeradataLinkedService, bool) {
	return nil, false
}

// AsDb2LinkedService is the LinkedService implementation for CosmosDbLinkedService.
func (cdls CosmosDbLinkedService) AsDb2LinkedService() (*Db2LinkedService, bool) {
	return nil, false
}

// AsSybaseLinkedService is the LinkedService implementation for CosmosDbLinkedService.
func (cdls CosmosDbLinkedService) AsSybaseLinkedService() (*SybaseLinkedService, bool) {
	return nil, false
}

// AsPostgreSQLLinkedService is the LinkedService implementation for CosmosDbLinkedService.
func (cdls CosmosDbLinkedService) AsPostgreSQLLinkedService() (*PostgreSQLLinkedService, bool) {
	return nil, false
}

// AsMySQLLinkedService is the LinkedService implementation for CosmosDbLinkedService.
func (cdls CosmosDbLinkedService) AsMySQLLinkedService() (*MySQLLinkedService, bool) {
	return nil, false
}

// AsOracleLinkedService is the LinkedService implementation for CosmosDbLinkedService.
func (cdls CosmosDbLinkedService) AsOracleLinkedService() (*OracleLinkedService, bool) {
	return nil, false
}

// AsFileServerLinkedService is the LinkedService implementation for CosmosDbLinkedService.
func (cdls CosmosDbLinkedService) AsFileServerLinkedService() (*FileServerLinkedService, bool) {
	return nil, false
}

// AsHDInsightLinkedService is the LinkedService implementation for CosmosDbLinkedService.
func (cdls CosmosDbLinkedService) AsHDInsightLinkedService() (*HDInsightLinkedService, bool) {
	return nil, false
}

// AsDynamicsLinkedService is the LinkedService implementation for CosmosDbLinkedService.
func (cdls CosmosDbLinkedService) AsDynamicsLinkedService() (*DynamicsLinkedService, bool) {
	return nil, false
}

// AsCosmosDbLinkedService is the LinkedService implementation for CosmosDbLinkedService.
func (cdls CosmosDbLinkedService) AsCosmosDbLinkedService() (*CosmosDbLinkedService, bool) {
	return &cdls, true
}

// AsAzureKeyVaultLinkedService is the LinkedService implementation for CosmosDbLinkedService.
func (cdls CosmosDbLinkedService) AsAzureKeyVaultLinkedService() (*AzureKeyVaultLinkedService, bool) {
	return nil, false
}

// AsAzureBatchLinkedService is the LinkedService implementation for CosmosDbLinkedService.
func (cdls CosmosDbLinkedService) AsAzureBatchLinkedService() (*AzureBatchLinkedService, bool) {
	return nil, false
}

// AsAzureSQLDatabaseLinkedService is the LinkedService implementation for CosmosDbLinkedService.
func (cdls CosmosDbLinkedService) AsAzureSQLDatabaseLinkedService() (*AzureSQLDatabaseLinkedService, bool) {
	return nil, false
}

// AsSQLServerLinkedService is the LinkedService implementation for CosmosDbLinkedService.
func (cdls CosmosDbLinkedService) AsSQLServerLinkedService() (*SQLServerLinkedService, bool) {
	return nil, false
}

// AsAzureSQLDWLinkedService is the LinkedService implementation for CosmosDbLinkedService.
func (cdls CosmosDbLinkedService) AsAzureSQLDWLinkedService() (*AzureSQLDWLinkedService, bool) {
	return nil, false
}

// AsAzureStorageLinkedService is the LinkedService implementation for CosmosDbLinkedService.
func (cdls CosmosDbLinkedService) AsAzureStorageLinkedService() (*AzureStorageLinkedService, bool) {
	return nil, false
}

// CosmosDbLinkedServiceTypeProperties is cosmosDB linked service properties.
type CosmosDbLinkedServiceTypeProperties struct {
	ConnectionString    *SecureString           `json:"connectionString,omitempty"`
	EncryptedCredential *map[string]interface{} `json:"encryptedCredential,omitempty"`
}

// CreateRunResponse is response body with a run identifier.
type CreateRunResponse struct {
	autorest.Response `json:"-"`
	RunID             *string `json:"runId,omitempty"`
}

// CustomActivity is custom activity type.
type CustomActivity struct {
	Name                          *string                 `json:"name,omitempty"`
	Description                   *string                 `json:"description,omitempty"`
	DependsOn                     *[]ActivityDependency   `json:"dependsOn,omitempty"`
	Type                          TypeActivity            `json:"type,omitempty"`
	LinkedServiceName             *LinkedServiceReference `json:"linkedServiceName,omitempty"`
	Policy                        *ActivityPolicy         `json:"policy,omitempty"`
	*CustomActivityTypeProperties `json:"typeProperties,omitempty"`
}

// MarshalJSON is the custom marshaler for CustomActivity.
func (ca CustomActivity) MarshalJSON() ([]byte, error) {
	ca.Type = TypeCustom
	type Alias CustomActivity
	return json.Marshal(&struct {
		Alias
	}{
		Alias: (Alias)(ca),
	})
}

// AsDataLakeAnalyticsUSQLActivity is the ExecutionActivity implementation for CustomActivity.
func (ca CustomActivity) AsDataLakeAnalyticsUSQLActivity() (*DataLakeAnalyticsUSQLActivity, bool) {
	return nil, false
}

// AsAzureMLUpdateResourceActivity is the ExecutionActivity implementation for CustomActivity.
func (ca CustomActivity) AsAzureMLUpdateResourceActivity() (*AzureMLUpdateResourceActivity, bool) {
	return nil, false
}

// AsAzureMLBatchExecutionActivity is the ExecutionActivity implementation for CustomActivity.
func (ca CustomActivity) AsAzureMLBatchExecutionActivity() (*AzureMLBatchExecutionActivity, bool) {
	return nil, false
}

// AsGetMetadataActivity is the ExecutionActivity implementation for CustomActivity.
func (ca CustomActivity) AsGetMetadataActivity() (*GetMetadataActivity, bool) {
	return nil, false
}

// AsWebActivity is the ExecutionActivity implementation for CustomActivity.
func (ca CustomActivity) AsWebActivity() (*WebActivity, bool) {
	return nil, false
}

// AsLookupActivity is the ExecutionActivity implementation for CustomActivity.
func (ca CustomActivity) AsLookupActivity() (*LookupActivity, bool) {
	return nil, false
}

// AsSQLServerStoredProcedureActivity is the ExecutionActivity implementation for CustomActivity.
func (ca CustomActivity) AsSQLServerStoredProcedureActivity() (*SQLServerStoredProcedureActivity, bool) {
	return nil, false
}

// AsCustomActivity is the ExecutionActivity implementation for CustomActivity.
func (ca CustomActivity) AsCustomActivity() (*CustomActivity, bool) {
	return &ca, true
}

// AsHDInsightSparkActivity is the ExecutionActivity implementation for CustomActivity.
func (ca CustomActivity) AsHDInsightSparkActivity() (*HDInsightSparkActivity, bool) {
	return nil, false
}

// AsHDInsightStreamingActivity is the ExecutionActivity implementation for CustomActivity.
func (ca CustomActivity) AsHDInsightStreamingActivity() (*HDInsightStreamingActivity, bool) {
	return nil, false
}

// AsHDInsightMapReduceActivity is the ExecutionActivity implementation for CustomActivity.
func (ca CustomActivity) AsHDInsightMapReduceActivity() (*HDInsightMapReduceActivity, bool) {
	return nil, false
}

// AsHDInsightPigActivity is the ExecutionActivity implementation for CustomActivity.
func (ca CustomActivity) AsHDInsightPigActivity() (*HDInsightPigActivity, bool) {
	return nil, false
}

// AsHDInsightHiveActivity is the ExecutionActivity implementation for CustomActivity.
func (ca CustomActivity) AsHDInsightHiveActivity() (*HDInsightHiveActivity, bool) {
	return nil, false
}

// AsCopyActivity is the ExecutionActivity implementation for CustomActivity.
func (ca CustomActivity) AsCopyActivity() (*CopyActivity, bool) {
	return nil, false
}

// AsExecutionActivity is the ExecutionActivity implementation for CustomActivity.
func (ca CustomActivity) AsExecutionActivity() (*ExecutionActivity, bool) {
	return nil, false
}

// AsUntilActivity is the ExecutionActivity implementation for CustomActivity.
func (ca CustomActivity) AsUntilActivity() (*UntilActivity, bool) {
	return nil, false
}

// AsWaitActivity is the ExecutionActivity implementation for CustomActivity.
func (ca CustomActivity) AsWaitActivity() (*WaitActivity, bool) {
	return nil, false
}

// AsForEachActivity is the ExecutionActivity implementation for CustomActivity.
func (ca CustomActivity) AsForEachActivity() (*ForEachActivity, bool) {
	return nil, false
}

// AsIfConditionActivity is the ExecutionActivity implementation for CustomActivity.
func (ca CustomActivity) AsIfConditionActivity() (*IfConditionActivity, bool) {
	return nil, false
}

// AsExecutePipelineActivity is the ExecutionActivity implementation for CustomActivity.
func (ca CustomActivity) AsExecutePipelineActivity() (*ExecutePipelineActivity, bool) {
	return nil, false
}

// AsControlActivity is the ExecutionActivity implementation for CustomActivity.
func (ca CustomActivity) AsControlActivity() (*ControlActivity, bool) {
	return nil, false
}

// CustomActivityReferenceObject is reference objects for custom activity
type CustomActivityReferenceObject struct {
	LinkedServices *[]LinkedServiceReference `json:"linkedServices,omitempty"`
	Datasets       *[]DatasetReference       `json:"datasets,omitempty"`
}

// CustomActivityTypeProperties is custom activity properties.
type CustomActivityTypeProperties struct {
	Command               *map[string]interface{}             `json:"command,omitempty"`
	ResourceLinkedService *LinkedServiceReference             `json:"resourceLinkedService,omitempty"`
	FolderPath            *map[string]interface{}             `json:"folderPath,omitempty"`
	ReferenceObjects      *CustomActivityReferenceObject      `json:"referenceObjects,omitempty"`
	ExtendedProperties    *map[string]*map[string]interface{} `json:"extendedProperties,omitempty"`
}

// CustomDataset is the custom dataset.
type CustomDataset struct {
	Description       *string                             `json:"description,omitempty"`
	Structure         *map[string]interface{}             `json:"structure,omitempty"`
	LinkedServiceName *LinkedServiceReference             `json:"linkedServiceName,omitempty"`
	Parameters        *map[string]*ParameterSpecification `json:"parameters,omitempty"`
	Type              TypeDataset                         `json:"type,omitempty"`
	TypeProperties    *map[string]interface{}             `json:"typeProperties,omitempty"`
}

// MarshalJSON is the custom marshaler for CustomDataset.
func (cd CustomDataset) MarshalJSON() ([]byte, error) {
	cd.Type = TypeCustomDataset
	type Alias CustomDataset
	return json.Marshal(&struct {
		Alias
	}{
		Alias: (Alias)(cd),
	})
}

// AsHTTPDataset is the Dataset implementation for CustomDataset.
func (cd CustomDataset) AsHTTPDataset() (*HTTPDataset, bool) {
	return nil, false
}

// AsAzureSearchIndexDataset is the Dataset implementation for CustomDataset.
func (cd CustomDataset) AsAzureSearchIndexDataset() (*AzureSearchIndexDataset, bool) {
	return nil, false
}

// AsWebTableDataset is the Dataset implementation for CustomDataset.
func (cd CustomDataset) AsWebTableDataset() (*WebTableDataset, bool) {
	return nil, false
}

// AsSQLServerTableDataset is the Dataset implementation for CustomDataset.
func (cd CustomDataset) AsSQLServerTableDataset() (*SQLServerTableDataset, bool) {
	return nil, false
}

// AsRelationalTableDataset is the Dataset implementation for CustomDataset.
func (cd CustomDataset) AsRelationalTableDataset() (*RelationalTableDataset, bool) {
	return nil, false
}

// AsOracleTableDataset is the Dataset implementation for CustomDataset.
func (cd CustomDataset) AsOracleTableDataset() (*OracleTableDataset, bool) {
	return nil, false
}

// AsODataResourceDataset is the Dataset implementation for CustomDataset.
func (cd CustomDataset) AsODataResourceDataset() (*ODataResourceDataset, bool) {
	return nil, false
}

// AsMongoDbCollectionDataset is the Dataset implementation for CustomDataset.
func (cd CustomDataset) AsMongoDbCollectionDataset() (*MongoDbCollectionDataset, bool) {
	return nil, false
}

// AsFileShareDataset is the Dataset implementation for CustomDataset.
func (cd CustomDataset) AsFileShareDataset() (*FileShareDataset, bool) {
	return nil, false
}

// AsAzureDataLakeStoreDataset is the Dataset implementation for CustomDataset.
func (cd CustomDataset) AsAzureDataLakeStoreDataset() (*AzureDataLakeStoreDataset, bool) {
	return nil, false
}

// AsDynamicsEntityDataset is the Dataset implementation for CustomDataset.
func (cd CustomDataset) AsDynamicsEntityDataset() (*DynamicsEntityDataset, bool) {
	return nil, false
}

// AsDocumentDbCollectionDataset is the Dataset implementation for CustomDataset.
func (cd CustomDataset) AsDocumentDbCollectionDataset() (*DocumentDbCollectionDataset, bool) {
	return nil, false
}

// AsCustomDataset is the Dataset implementation for CustomDataset.
func (cd CustomDataset) AsCustomDataset() (*CustomDataset, bool) {
	return &cd, true
}

// AsCassandraTableDataset is the Dataset implementation for CustomDataset.
func (cd CustomDataset) AsCassandraTableDataset() (*CassandraTableDataset, bool) {
	return nil, false
}

// AsAzureSQLDWTableDataset is the Dataset implementation for CustomDataset.
func (cd CustomDataset) AsAzureSQLDWTableDataset() (*AzureSQLDWTableDataset, bool) {
	return nil, false
}

// AsAzureSQLTableDataset is the Dataset implementation for CustomDataset.
func (cd CustomDataset) AsAzureSQLTableDataset() (*AzureSQLTableDataset, bool) {
	return nil, false
}

// AsAzureTableDataset is the Dataset implementation for CustomDataset.
func (cd CustomDataset) AsAzureTableDataset() (*AzureTableDataset, bool) {
	return nil, false
}

// AsAzureBlobDataset is the Dataset implementation for CustomDataset.
func (cd CustomDataset) AsAzureBlobDataset() (*AzureBlobDataset, bool) {
	return nil, false
}

// AsAmazonS3Dataset is the Dataset implementation for CustomDataset.
func (cd CustomDataset) AsAmazonS3Dataset() (*AmazonS3Dataset, bool) {
	return nil, false
}

// CustomDataSourceLinkedService is custom linked service.
type CustomDataSourceLinkedService struct {
	ConnectVia     *IntegrationRuntimeReference `json:"connectVia,omitempty"`
	Description    *string                      `json:"description,omitempty"`
	Type           TypeLinkedService            `json:"type,omitempty"`
	TypeProperties *map[string]interface{}      `json:"typeProperties,omitempty"`
}

// MarshalJSON is the custom marshaler for CustomDataSourceLinkedService.
func (cdsls CustomDataSourceLinkedService) MarshalJSON() ([]byte, error) {
	cdsls.Type = TypeCustomDataSource
	type Alias CustomDataSourceLinkedService
	return json.Marshal(&struct {
		Alias
	}{
		Alias: (Alias)(cdsls),
	})
}

// AsAzureDataLakeAnalyticsLinkedService is the LinkedService implementation for CustomDataSourceLinkedService.
func (cdsls CustomDataSourceLinkedService) AsAzureDataLakeAnalyticsLinkedService() (*AzureDataLakeAnalyticsLinkedService, bool) {
	return nil, false
}

// AsHDInsightOnDemandLinkedService is the LinkedService implementation for CustomDataSourceLinkedService.
func (cdsls CustomDataSourceLinkedService) AsHDInsightOnDemandLinkedService() (*HDInsightOnDemandLinkedService, bool) {
	return nil, false
}

// AsSapHanaLinkedService is the LinkedService implementation for CustomDataSourceLinkedService.
func (cdsls CustomDataSourceLinkedService) AsSapHanaLinkedService() (*SapHanaLinkedService, bool) {
	return nil, false
}

// AsSapBWLinkedService is the LinkedService implementation for CustomDataSourceLinkedService.
func (cdsls CustomDataSourceLinkedService) AsSapBWLinkedService() (*SapBWLinkedService, bool) {
	return nil, false
}

// AsSftpServerLinkedService is the LinkedService implementation for CustomDataSourceLinkedService.
func (cdsls CustomDataSourceLinkedService) AsSftpServerLinkedService() (*SftpServerLinkedService, bool) {
	return nil, false
}

// AsFtpServerLinkedService is the LinkedService implementation for CustomDataSourceLinkedService.
func (cdsls CustomDataSourceLinkedService) AsFtpServerLinkedService() (*FtpServerLinkedService, bool) {
	return nil, false
}

// AsHTTPLinkedService is the LinkedService implementation for CustomDataSourceLinkedService.
func (cdsls CustomDataSourceLinkedService) AsHTTPLinkedService() (*HTTPLinkedService, bool) {
	return nil, false
}

// AsAzureSearchLinkedService is the LinkedService implementation for CustomDataSourceLinkedService.
func (cdsls CustomDataSourceLinkedService) AsAzureSearchLinkedService() (*AzureSearchLinkedService, bool) {
	return nil, false
}

// AsCustomDataSourceLinkedService is the LinkedService implementation for CustomDataSourceLinkedService.
func (cdsls CustomDataSourceLinkedService) AsCustomDataSourceLinkedService() (*CustomDataSourceLinkedService, bool) {
	return &cdsls, true
}

// AsAmazonRedshiftLinkedService is the LinkedService implementation for CustomDataSourceLinkedService.
func (cdsls CustomDataSourceLinkedService) AsAmazonRedshiftLinkedService() (*AmazonRedshiftLinkedService, bool) {
	return nil, false
}

// AsAmazonS3LinkedService is the LinkedService implementation for CustomDataSourceLinkedService.
func (cdsls CustomDataSourceLinkedService) AsAmazonS3LinkedService() (*AmazonS3LinkedService, bool) {
	return nil, false
}

// AsSalesforceLinkedService is the LinkedService implementation for CustomDataSourceLinkedService.
func (cdsls CustomDataSourceLinkedService) AsSalesforceLinkedService() (*SalesforceLinkedService, bool) {
	return nil, false
}

// AsAzureDataLakeStoreLinkedService is the LinkedService implementation for CustomDataSourceLinkedService.
func (cdsls CustomDataSourceLinkedService) AsAzureDataLakeStoreLinkedService() (*AzureDataLakeStoreLinkedService, bool) {
	return nil, false
}

// AsMongoDbLinkedService is the LinkedService implementation for CustomDataSourceLinkedService.
func (cdsls CustomDataSourceLinkedService) AsMongoDbLinkedService() (*MongoDbLinkedService, bool) {
	return nil, false
}

// AsCassandraLinkedService is the LinkedService implementation for CustomDataSourceLinkedService.
func (cdsls CustomDataSourceLinkedService) AsCassandraLinkedService() (*CassandraLinkedService, bool) {
	return nil, false
}

// AsWebLinkedService is the LinkedService implementation for CustomDataSourceLinkedService.
func (cdsls CustomDataSourceLinkedService) AsWebLinkedService() (*WebLinkedService, bool) {
	return nil, false
}

// AsODataLinkedService is the LinkedService implementation for CustomDataSourceLinkedService.
func (cdsls CustomDataSourceLinkedService) AsODataLinkedService() (*ODataLinkedService, bool) {
	return nil, false
}

// AsHdfsLinkedService is the LinkedService implementation for CustomDataSourceLinkedService.
func (cdsls CustomDataSourceLinkedService) AsHdfsLinkedService() (*HdfsLinkedService, bool) {
	return nil, false
}

// AsOdbcLinkedService is the LinkedService implementation for CustomDataSourceLinkedService.
func (cdsls CustomDataSourceLinkedService) AsOdbcLinkedService() (*OdbcLinkedService, bool) {
	return nil, false
}

// AsAzureMLLinkedService is the LinkedService implementation for CustomDataSourceLinkedService.
func (cdsls CustomDataSourceLinkedService) AsAzureMLLinkedService() (*AzureMLLinkedService, bool) {
	return nil, false
}

// AsTeradataLinkedService is the LinkedService implementation for CustomDataSourceLinkedService.
func (cdsls CustomDataSourceLinkedService) AsTeradataLinkedService() (*TeradataLinkedService, bool) {
	return nil, false
}

// AsDb2LinkedService is the LinkedService implementation for CustomDataSourceLinkedService.
func (cdsls CustomDataSourceLinkedService) AsDb2LinkedService() (*Db2LinkedService, bool) {
	return nil, false
}

// AsSybaseLinkedService is the LinkedService implementation for CustomDataSourceLinkedService.
func (cdsls CustomDataSourceLinkedService) AsSybaseLinkedService() (*SybaseLinkedService, bool) {
	return nil, false
}

// AsPostgreSQLLinkedService is the LinkedService implementation for CustomDataSourceLinkedService.
func (cdsls CustomDataSourceLinkedService) AsPostgreSQLLinkedService() (*PostgreSQLLinkedService, bool) {
	return nil, false
}

// AsMySQLLinkedService is the LinkedService implementation for CustomDataSourceLinkedService.
func (cdsls CustomDataSourceLinkedService) AsMySQLLinkedService() (*MySQLLinkedService, bool) {
	return nil, false
}

// AsOracleLinkedService is the LinkedService implementation for CustomDataSourceLinkedService.
func (cdsls CustomDataSourceLinkedService) AsOracleLinkedService() (*OracleLinkedService, bool) {
	return nil, false
}

// AsFileServerLinkedService is the LinkedService implementation for CustomDataSourceLinkedService.
func (cdsls CustomDataSourceLinkedService) AsFileServerLinkedService() (*FileServerLinkedService, bool) {
	return nil, false
}

// AsHDInsightLinkedService is the LinkedService implementation for CustomDataSourceLinkedService.
func (cdsls CustomDataSourceLinkedService) AsHDInsightLinkedService() (*HDInsightLinkedService, bool) {
	return nil, false
}

// AsDynamicsLinkedService is the LinkedService implementation for CustomDataSourceLinkedService.
func (cdsls CustomDataSourceLinkedService) AsDynamicsLinkedService() (*DynamicsLinkedService, bool) {
	return nil, false
}

// AsCosmosDbLinkedService is the LinkedService implementation for CustomDataSourceLinkedService.
func (cdsls CustomDataSourceLinkedService) AsCosmosDbLinkedService() (*CosmosDbLinkedService, bool) {
	return nil, false
}

// AsAzureKeyVaultLinkedService is the LinkedService implementation for CustomDataSourceLinkedService.
func (cdsls CustomDataSourceLinkedService) AsAzureKeyVaultLinkedService() (*AzureKeyVaultLinkedService, bool) {
	return nil, false
}

// AsAzureBatchLinkedService is the LinkedService implementation for CustomDataSourceLinkedService.
func (cdsls CustomDataSourceLinkedService) AsAzureBatchLinkedService() (*AzureBatchLinkedService, bool) {
	return nil, false
}

// AsAzureSQLDatabaseLinkedService is the LinkedService implementation for CustomDataSourceLinkedService.
func (cdsls CustomDataSourceLinkedService) AsAzureSQLDatabaseLinkedService() (*AzureSQLDatabaseLinkedService, bool) {
	return nil, false
}

// AsSQLServerLinkedService is the LinkedService implementation for CustomDataSourceLinkedService.
func (cdsls CustomDataSourceLinkedService) AsSQLServerLinkedService() (*SQLServerLinkedService, bool) {
	return nil, false
}

// AsAzureSQLDWLinkedService is the LinkedService implementation for CustomDataSourceLinkedService.
func (cdsls CustomDataSourceLinkedService) AsAzureSQLDWLinkedService() (*AzureSQLDWLinkedService, bool) {
	return nil, false
}

// AsAzureStorageLinkedService is the LinkedService implementation for CustomDataSourceLinkedService.
func (cdsls CustomDataSourceLinkedService) AsAzureStorageLinkedService() (*AzureStorageLinkedService, bool) {
	return nil, false
}

// DataLakeAnalyticsUSQLActivity is data Lake Analytics U-SQL activity.
type DataLakeAnalyticsUSQLActivity struct {
	Name                                         *string                 `json:"name,omitempty"`
	Description                                  *string                 `json:"description,omitempty"`
	DependsOn                                    *[]ActivityDependency   `json:"dependsOn,omitempty"`
	Type                                         TypeActivity            `json:"type,omitempty"`
	LinkedServiceName                            *LinkedServiceReference `json:"linkedServiceName,omitempty"`
	Policy                                       *ActivityPolicy         `json:"policy,omitempty"`
	*DataLakeAnalyticsUSQLActivityTypeProperties `json:"typeProperties,omitempty"`
}

// MarshalJSON is the custom marshaler for DataLakeAnalyticsUSQLActivity.
func (dlaua DataLakeAnalyticsUSQLActivity) MarshalJSON() ([]byte, error) {
	dlaua.Type = TypeDataLakeAnalyticsUSQL
	type Alias DataLakeAnalyticsUSQLActivity
	return json.Marshal(&struct {
		Alias
	}{
		Alias: (Alias)(dlaua),
	})
}

// AsDataLakeAnalyticsUSQLActivity is the ExecutionActivity implementation for DataLakeAnalyticsUSQLActivity.
func (dlaua DataLakeAnalyticsUSQLActivity) AsDataLakeAnalyticsUSQLActivity() (*DataLakeAnalyticsUSQLActivity, bool) {
	return &dlaua, true
}

// AsAzureMLUpdateResourceActivity is the ExecutionActivity implementation for DataLakeAnalyticsUSQLActivity.
func (dlaua DataLakeAnalyticsUSQLActivity) AsAzureMLUpdateResourceActivity() (*AzureMLUpdateResourceActivity, bool) {
	return nil, false
}

// AsAzureMLBatchExecutionActivity is the ExecutionActivity implementation for DataLakeAnalyticsUSQLActivity.
func (dlaua DataLakeAnalyticsUSQLActivity) AsAzureMLBatchExecutionActivity() (*AzureMLBatchExecutionActivity, bool) {
	return nil, false
}

// AsGetMetadataActivity is the ExecutionActivity implementation for DataLakeAnalyticsUSQLActivity.
func (dlaua DataLakeAnalyticsUSQLActivity) AsGetMetadataActivity() (*GetMetadataActivity, bool) {
	return nil, false
}

// AsWebActivity is the ExecutionActivity implementation for DataLakeAnalyticsUSQLActivity.
func (dlaua DataLakeAnalyticsUSQLActivity) AsWebActivity() (*WebActivity, bool) {
	return nil, false
}

// AsLookupActivity is the ExecutionActivity implementation for DataLakeAnalyticsUSQLActivity.
func (dlaua DataLakeAnalyticsUSQLActivity) AsLookupActivity() (*LookupActivity, bool) {
	return nil, false
}

// AsSQLServerStoredProcedureActivity is the ExecutionActivity implementation for DataLakeAnalyticsUSQLActivity.
func (dlaua DataLakeAnalyticsUSQLActivity) AsSQLServerStoredProcedureActivity() (*SQLServerStoredProcedureActivity, bool) {
	return nil, false
}

// AsCustomActivity is the ExecutionActivity implementation for DataLakeAnalyticsUSQLActivity.
func (dlaua DataLakeAnalyticsUSQLActivity) AsCustomActivity() (*CustomActivity, bool) {
	return nil, false
}

// AsHDInsightSparkActivity is the ExecutionActivity implementation for DataLakeAnalyticsUSQLActivity.
func (dlaua DataLakeAnalyticsUSQLActivity) AsHDInsightSparkActivity() (*HDInsightSparkActivity, bool) {
	return nil, false
}

// AsHDInsightStreamingActivity is the ExecutionActivity implementation for DataLakeAnalyticsUSQLActivity.
func (dlaua DataLakeAnalyticsUSQLActivity) AsHDInsightStreamingActivity() (*HDInsightStreamingActivity, bool) {
	return nil, false
}

// AsHDInsightMapReduceActivity is the ExecutionActivity implementation for DataLakeAnalyticsUSQLActivity.
func (dlaua DataLakeAnalyticsUSQLActivity) AsHDInsightMapReduceActivity() (*HDInsightMapReduceActivity, bool) {
	return nil, false
}

// AsHDInsightPigActivity is the ExecutionActivity implementation for DataLakeAnalyticsUSQLActivity.
func (dlaua DataLakeAnalyticsUSQLActivity) AsHDInsightPigActivity() (*HDInsightPigActivity, bool) {
	return nil, false
}

// AsHDInsightHiveActivity is the ExecutionActivity implementation for DataLakeAnalyticsUSQLActivity.
func (dlaua DataLakeAnalyticsUSQLActivity) AsHDInsightHiveActivity() (*HDInsightHiveActivity, bool) {
	return nil, false
}

// AsCopyActivity is the ExecutionActivity implementation for DataLakeAnalyticsUSQLActivity.
func (dlaua DataLakeAnalyticsUSQLActivity) AsCopyActivity() (*CopyActivity, bool) {
	return nil, false
}

// AsExecutionActivity is the ExecutionActivity implementation for DataLakeAnalyticsUSQLActivity.
func (dlaua DataLakeAnalyticsUSQLActivity) AsExecutionActivity() (*ExecutionActivity, bool) {
	return nil, false
}

// AsUntilActivity is the ExecutionActivity implementation for DataLakeAnalyticsUSQLActivity.
func (dlaua DataLakeAnalyticsUSQLActivity) AsUntilActivity() (*UntilActivity, bool) {
	return nil, false
}

// AsWaitActivity is the ExecutionActivity implementation for DataLakeAnalyticsUSQLActivity.
func (dlaua DataLakeAnalyticsUSQLActivity) AsWaitActivity() (*WaitActivity, bool) {
	return nil, false
}

// AsForEachActivity is the ExecutionActivity implementation for DataLakeAnalyticsUSQLActivity.
func (dlaua DataLakeAnalyticsUSQLActivity) AsForEachActivity() (*ForEachActivity, bool) {
	return nil, false
}

// AsIfConditionActivity is the ExecutionActivity implementation for DataLakeAnalyticsUSQLActivity.
func (dlaua DataLakeAnalyticsUSQLActivity) AsIfConditionActivity() (*IfConditionActivity, bool) {
	return nil, false
}

// AsExecutePipelineActivity is the ExecutionActivity implementation for DataLakeAnalyticsUSQLActivity.
func (dlaua DataLakeAnalyticsUSQLActivity) AsExecutePipelineActivity() (*ExecutePipelineActivity, bool) {
	return nil, false
}

// AsControlActivity is the ExecutionActivity implementation for DataLakeAnalyticsUSQLActivity.
func (dlaua DataLakeAnalyticsUSQLActivity) AsControlActivity() (*ControlActivity, bool) {
	return nil, false
}

// DataLakeAnalyticsUSQLActivityTypeProperties is dataLakeAnalyticsU-SQL activity properties.
type DataLakeAnalyticsUSQLActivityTypeProperties struct {
	ScriptPath          *map[string]interface{}             `json:"scriptPath,omitempty"`
	ScriptLinkedService *LinkedServiceReference             `json:"scriptLinkedService,omitempty"`
	DegreeOfParallelism *map[string]interface{}             `json:"degreeOfParallelism,omitempty"`
	Priority            *map[string]interface{}             `json:"priority,omitempty"`
	Parameters          *map[string]*map[string]interface{} `json:"parameters,omitempty"`
	RuntimeVersion      *map[string]interface{}             `json:"runtimeVersion,omitempty"`
	CompilationMode     *map[string]interface{}             `json:"compilationMode,omitempty"`
}

// Dataset is the Azure Data Factory nested object which identifies data within different data stores, such as tables,
// files, folders, and documents.
type Dataset interface {
	AsHTTPDataset() (*HTTPDataset, bool)
	AsAzureSearchIndexDataset() (*AzureSearchIndexDataset, bool)
	AsWebTableDataset() (*WebTableDataset, bool)
	AsSQLServerTableDataset() (*SQLServerTableDataset, bool)
	AsRelationalTableDataset() (*RelationalTableDataset, bool)
	AsOracleTableDataset() (*OracleTableDataset, bool)
	AsODataResourceDataset() (*ODataResourceDataset, bool)
	AsMongoDbCollectionDataset() (*MongoDbCollectionDataset, bool)
	AsFileShareDataset() (*FileShareDataset, bool)
	AsAzureDataLakeStoreDataset() (*AzureDataLakeStoreDataset, bool)
	AsDynamicsEntityDataset() (*DynamicsEntityDataset, bool)
	AsDocumentDbCollectionDataset() (*DocumentDbCollectionDataset, bool)
	AsCustomDataset() (*CustomDataset, bool)
	AsCassandraTableDataset() (*CassandraTableDataset, bool)
	AsAzureSQLDWTableDataset() (*AzureSQLDWTableDataset, bool)
	AsAzureSQLTableDataset() (*AzureSQLTableDataset, bool)
	AsAzureTableDataset() (*AzureTableDataset, bool)
	AsAzureBlobDataset() (*AzureBlobDataset, bool)
	AsAmazonS3Dataset() (*AmazonS3Dataset, bool)
}

func unmarshalDataset(body []byte) (Dataset, error) {
	var m map[string]interface{}
	err := json.Unmarshal(body, &m)
	if err != nil {
		return nil, err
	}

	switch m["type"] {
	case string(TypeHTTPFile):
		var hd HTTPDataset
		err := json.Unmarshal(body, &hd)
		return hd, err
	case string(TypeAzureSearchIndex):
		var asid AzureSearchIndexDataset
		err := json.Unmarshal(body, &asid)
		return asid, err
	case string(TypeWebTable):
		var wtd WebTableDataset
		err := json.Unmarshal(body, &wtd)
		return wtd, err
	case string(TypeSQLServerTable):
		var sstd SQLServerTableDataset
		err := json.Unmarshal(body, &sstd)
		return sstd, err
	case string(TypeRelationalTable):
		var rtd RelationalTableDataset
		err := json.Unmarshal(body, &rtd)
		return rtd, err
	case string(TypeOracleTable):
		var otd OracleTableDataset
		err := json.Unmarshal(body, &otd)
		return otd, err
	case string(TypeODataResource):
		var odrd ODataResourceDataset
		err := json.Unmarshal(body, &odrd)
		return odrd, err
	case string(TypeMongoDbCollection):
		var mdcd MongoDbCollectionDataset
		err := json.Unmarshal(body, &mdcd)
		return mdcd, err
	case string(TypeFileShare):
		var fsd FileShareDataset
		err := json.Unmarshal(body, &fsd)
		return fsd, err
	case string(TypeAzureDataLakeStoreFile):
		var adlsd AzureDataLakeStoreDataset
		err := json.Unmarshal(body, &adlsd)
		return adlsd, err
	case string(TypeDynamicsEntity):
		var ded DynamicsEntityDataset
		err := json.Unmarshal(body, &ded)
		return ded, err
	case string(TypeDocumentDbCollection):
		var ddcd DocumentDbCollectionDataset
		err := json.Unmarshal(body, &ddcd)
		return ddcd, err
	case string(TypeCustomDataset):
		var cd CustomDataset
		err := json.Unmarshal(body, &cd)
		return cd, err
	case string(TypeCassandraTable):
		var ctd CassandraTableDataset
		err := json.Unmarshal(body, &ctd)
		return ctd, err
	case string(TypeAzureSQLDWTable):
		var asdtd AzureSQLDWTableDataset
		err := json.Unmarshal(body, &asdtd)
		return asdtd, err
	case string(TypeAzureSQLTable):
		var astd AzureSQLTableDataset
		err := json.Unmarshal(body, &astd)
		return astd, err
	case string(TypeAzureTable):
		var atd AzureTableDataset
		err := json.Unmarshal(body, &atd)
		return atd, err
	case string(TypeAzureBlob):
		var abd AzureBlobDataset
		err := json.Unmarshal(body, &abd)
		return abd, err
	case string(TypeAmazonS3Object):
		var asd AmazonS3Dataset
		err := json.Unmarshal(body, &asd)
		return asd, err
	default:
		return nil, errors.New("Unsupported type")
	}
}
func unmarshalDatasetArray(body []byte) ([]Dataset, error) {
	var rawMessages []*json.RawMessage
	err := json.Unmarshal(body, &rawMessages)
	if err != nil {
		return nil, err
	}

	dArray := make([]Dataset, len(rawMessages))

	for index, rawMessage := range rawMessages {
		d, err := unmarshalDataset(*rawMessage)
		if err != nil {
			return nil, err
		}
		dArray[index] = d
	}
	return dArray, nil
}

// DatasetBZip2Compression is the BZip2 compression method used on a dataset.
type DatasetBZip2Compression struct {
	Type TypeDatasetCompression `json:"type,omitempty"`
}

// MarshalJSON is the custom marshaler for DatasetBZip2Compression.
func (dbz2c DatasetBZip2Compression) MarshalJSON() ([]byte, error) {
	dbz2c.Type = TypeBZip2
	type Alias DatasetBZip2Compression
	return json.Marshal(&struct {
		Alias
	}{
		Alias: (Alias)(dbz2c),
	})
}

// AsDatasetDeflateCompression is the DatasetCompression implementation for DatasetBZip2Compression.
func (dbz2c DatasetBZip2Compression) AsDatasetDeflateCompression() (*DatasetDeflateCompression, bool) {
	return nil, false
}

// AsDatasetGZipCompression is the DatasetCompression implementation for DatasetBZip2Compression.
func (dbz2c DatasetBZip2Compression) AsDatasetGZipCompression() (*DatasetGZipCompression, bool) {
	return nil, false
}

// AsDatasetBZip2Compression is the DatasetCompression implementation for DatasetBZip2Compression.
func (dbz2c DatasetBZip2Compression) AsDatasetBZip2Compression() (*DatasetBZip2Compression, bool) {
	return &dbz2c, true
}

// DatasetCompression is the compression method used on a dataset.
type DatasetCompression interface {
	AsDatasetDeflateCompression() (*DatasetDeflateCompression, bool)
	AsDatasetGZipCompression() (*DatasetGZipCompression, bool)
	AsDatasetBZip2Compression() (*DatasetBZip2Compression, bool)
}

func unmarshalDatasetCompression(body []byte) (DatasetCompression, error) {
	var m map[string]interface{}
	err := json.Unmarshal(body, &m)
	if err != nil {
		return nil, err
	}

	switch m["type"] {
	case string(TypeDeflate):
		var ddc DatasetDeflateCompression
		err := json.Unmarshal(body, &ddc)
		return ddc, err
	case string(TypeGZip):
		var dgzc DatasetGZipCompression
		err := json.Unmarshal(body, &dgzc)
		return dgzc, err
	case string(TypeBZip2):
		var dbz2c DatasetBZip2Compression
		err := json.Unmarshal(body, &dbz2c)
		return dbz2c, err
	default:
		return nil, errors.New("Unsupported type")
	}
}
func unmarshalDatasetCompressionArray(body []byte) ([]DatasetCompression, error) {
	var rawMessages []*json.RawMessage
	err := json.Unmarshal(body, &rawMessages)
	if err != nil {
		return nil, err
	}

	dcArray := make([]DatasetCompression, len(rawMessages))

	for index, rawMessage := range rawMessages {
		dc, err := unmarshalDatasetCompression(*rawMessage)
		if err != nil {
			return nil, err
		}
		dcArray[index] = dc
	}
	return dcArray, nil
}

// DatasetDateTimePartitionValue is the date/time value of a partition.
type DatasetDateTimePartitionValue struct {
	Type   TypeDatasetPartitionValue `json:"type,omitempty"`
	Date   *map[string]interface{}   `json:"date,omitempty"`
	Format *map[string]interface{}   `json:"format,omitempty"`
}

// MarshalJSON is the custom marshaler for DatasetDateTimePartitionValue.
func (ddtpv DatasetDateTimePartitionValue) MarshalJSON() ([]byte, error) {
	ddtpv.Type = TypeDateTime
	type Alias DatasetDateTimePartitionValue
	return json.Marshal(&struct {
		Alias
	}{
		Alias: (Alias)(ddtpv),
	})
}

// AsDatasetDateTimePartitionValue is the DatasetPartitionValue implementation for DatasetDateTimePartitionValue.
func (ddtpv DatasetDateTimePartitionValue) AsDatasetDateTimePartitionValue() (*DatasetDateTimePartitionValue, bool) {
	return &ddtpv, true
}

// DatasetDeflateCompression is the Deflate compression method used on a dataset.
type DatasetDeflateCompression struct {
	Type  TypeDatasetCompression  `json:"type,omitempty"`
	Level DatasetCompressionLevel `json:"level,omitempty"`
}

// MarshalJSON is the custom marshaler for DatasetDeflateCompression.
func (ddc DatasetDeflateCompression) MarshalJSON() ([]byte, error) {
	ddc.Type = TypeDeflate
	type Alias DatasetDeflateCompression
	return json.Marshal(&struct {
		Alias
	}{
		Alias: (Alias)(ddc),
	})
}

// AsDatasetDeflateCompression is the DatasetCompression implementation for DatasetDeflateCompression.
func (ddc DatasetDeflateCompression) AsDatasetDeflateCompression() (*DatasetDeflateCompression, bool) {
	return &ddc, true
}

// AsDatasetGZipCompression is the DatasetCompression implementation for DatasetDeflateCompression.
func (ddc DatasetDeflateCompression) AsDatasetGZipCompression() (*DatasetGZipCompression, bool) {
	return nil, false
}

// AsDatasetBZip2Compression is the DatasetCompression implementation for DatasetDeflateCompression.
func (ddc DatasetDeflateCompression) AsDatasetBZip2Compression() (*DatasetBZip2Compression, bool) {
	return nil, false
}

// DatasetGZipCompression is the GZip compression method used on a dataset.
type DatasetGZipCompression struct {
	Type  TypeDatasetCompression  `json:"type,omitempty"`
	Level DatasetCompressionLevel `json:"level,omitempty"`
}

// MarshalJSON is the custom marshaler for DatasetGZipCompression.
func (dgzc DatasetGZipCompression) MarshalJSON() ([]byte, error) {
	dgzc.Type = TypeGZip
	type Alias DatasetGZipCompression
	return json.Marshal(&struct {
		Alias
	}{
		Alias: (Alias)(dgzc),
	})
}

// AsDatasetDeflateCompression is the DatasetCompression implementation for DatasetGZipCompression.
func (dgzc DatasetGZipCompression) AsDatasetDeflateCompression() (*DatasetDeflateCompression, bool) {
	return nil, false
}

// AsDatasetGZipCompression is the DatasetCompression implementation for DatasetGZipCompression.
func (dgzc DatasetGZipCompression) AsDatasetGZipCompression() (*DatasetGZipCompression, bool) {
	return &dgzc, true
}

// AsDatasetBZip2Compression is the DatasetCompression implementation for DatasetGZipCompression.
func (dgzc DatasetGZipCompression) AsDatasetBZip2Compression() (*DatasetBZip2Compression, bool) {
	return nil, false
}

// DatasetListResponse is a list of dataset resources.
type DatasetListResponse struct {
	autorest.Response `json:"-"`
	Value             *[]DatasetResource `json:"value,omitempty"`
	NextLink          *string            `json:"nextLink,omitempty"`
}

// DatasetListResponsePreparer prepares a request to retrieve the next set of results. It returns
// nil if no more results exist.
func (client DatasetListResponse) DatasetListResponsePreparer() (*http.Request, error) {
	if client.NextLink == nil || len(to.String(client.NextLink)) <= 0 {
		return nil, nil
	}
	return autorest.Prepare(&http.Request{},
		autorest.AsJSON(),
		autorest.AsGet(),
		autorest.WithBaseURL(to.String(client.NextLink)))
}

// DatasetPartition is the partition definition.
type DatasetPartition struct {
	Name  *map[string]interface{} `json:"name,omitempty"`
	Value DatasetPartitionValue   `json:"value,omitempty"`
}

// UnmarshalJSON is the custom unmarshaler for DatasetPartition struct.
func (dp *DatasetPartition) UnmarshalJSON(body []byte) error {
	var m map[string]*json.RawMessage
	err := json.Unmarshal(body, &m)
	if err != nil {
		return err
	}
	var v *json.RawMessage

	v = m["name"]
	if v != nil {
		var name map[string]interface{}
		err = json.Unmarshal(*m["name"], &name)
		if err != nil {
			return err
		}
		dp.Name = &name
	}

	v = m["value"]
	if v != nil {
		value, err := unmarshalDatasetPartitionValue(*m["value"])
		if err != nil {
			return err
		}
		dp.Value = value
	}

	return nil
}

// DatasetPartitionValue is the value of a partition.
type DatasetPartitionValue interface {
	AsDatasetDateTimePartitionValue() (*DatasetDateTimePartitionValue, bool)
}

func unmarshalDatasetPartitionValue(body []byte) (DatasetPartitionValue, error) {
	var m map[string]interface{}
	err := json.Unmarshal(body, &m)
	if err != nil {
		return nil, err
	}

	switch m["type"] {
	case string(TypeDateTime):
		var ddtpv DatasetDateTimePartitionValue
		err := json.Unmarshal(body, &ddtpv)
		return ddtpv, err
	default:
		return nil, errors.New("Unsupported type")
	}
}
func unmarshalDatasetPartitionValueArray(body []byte) ([]DatasetPartitionValue, error) {
	var rawMessages []*json.RawMessage
	err := json.Unmarshal(body, &rawMessages)
	if err != nil {
		return nil, err
	}

	dpvArray := make([]DatasetPartitionValue, len(rawMessages))

	for index, rawMessage := range rawMessages {
		dpv, err := unmarshalDatasetPartitionValue(*rawMessage)
		if err != nil {
			return nil, err
		}
		dpvArray[index] = dpv
	}
	return dpvArray, nil
}

// DatasetReference is dataset reference type.
type DatasetReference struct {
	Type          *string                             `json:"type,omitempty"`
	ReferenceName *string                             `json:"referenceName,omitempty"`
	Parameters    *map[string]*map[string]interface{} `json:"parameters,omitempty"`
}

// DatasetResource is dataset resource type.
type DatasetResource struct {
	autorest.Response `json:"-"`
	ID                *string `json:"id,omitempty"`
	Name              *string `json:"name,omitempty"`
	Type              *string `json:"type,omitempty"`
	Etag              *string `json:"etag,omitempty"`
	Properties        Dataset `json:"properties,omitempty"`
}

// UnmarshalJSON is the custom unmarshaler for DatasetResource struct.
func (dr *DatasetResource) UnmarshalJSON(body []byte) error {
	var m map[string]*json.RawMessage
	err := json.Unmarshal(body, &m)
	if err != nil {
		return err
	}
	var v *json.RawMessage

	v = m["properties"]
	if v != nil {
		properties, err := unmarshalDataset(*m["properties"])
		if err != nil {
			return err
		}
		dr.Properties = properties
	}

	v = m["id"]
	if v != nil {
		var ID string
		err = json.Unmarshal(*m["id"], &ID)
		if err != nil {
			return err
		}
		dr.ID = &ID
	}

	v = m["name"]
	if v != nil {
		var name string
		err = json.Unmarshal(*m["name"], &name)
		if err != nil {
			return err
		}
		dr.Name = &name
	}

	v = m["type"]
	if v != nil {
		var typeVar string
		err = json.Unmarshal(*m["type"], &typeVar)
		if err != nil {
			return err
		}
		dr.Type = &typeVar
	}

	v = m["etag"]
	if v != nil {
		var etag string
		err = json.Unmarshal(*m["etag"], &etag)
		if err != nil {
			return err
		}
		dr.Etag = &etag
	}

	return nil
}

// DatasetStorageFormat is the format definition of a storage.
type DatasetStorageFormat interface {
	AsParquetFormat() (*ParquetFormat, bool)
	AsOrcFormat() (*OrcFormat, bool)
	AsAvroFormat() (*AvroFormat, bool)
	AsJSONFormat() (*JSONFormat, bool)
	AsTextFormat() (*TextFormat, bool)
}

func unmarshalDatasetStorageFormat(body []byte) (DatasetStorageFormat, error) {
	var m map[string]interface{}
	err := json.Unmarshal(body, &m)
	if err != nil {
		return nil, err
	}

	switch m["type"] {
	case string(TypeParquetFormat):
		var pf ParquetFormat
		err := json.Unmarshal(body, &pf)
		return pf, err
	case string(TypeOrcFormat):
		var of OrcFormat
		err := json.Unmarshal(body, &of)
		return of, err
	case string(TypeAvroFormat):
		var af AvroFormat
		err := json.Unmarshal(body, &af)
		return af, err
	case string(TypeJSONFormat):
		var jf JSONFormat
		err := json.Unmarshal(body, &jf)
		return jf, err
	case string(TypeTextFormat):
		var tf TextFormat
		err := json.Unmarshal(body, &tf)
		return tf, err
	default:
		return nil, errors.New("Unsupported type")
	}
}
func unmarshalDatasetStorageFormatArray(body []byte) ([]DatasetStorageFormat, error) {
	var rawMessages []*json.RawMessage
	err := json.Unmarshal(body, &rawMessages)
	if err != nil {
		return nil, err
	}

	dsfArray := make([]DatasetStorageFormat, len(rawMessages))

	for index, rawMessage := range rawMessages {
		dsf, err := unmarshalDatasetStorageFormat(*rawMessage)
		if err != nil {
			return nil, err
		}
		dsfArray[index] = dsf
	}
	return dsfArray, nil
}

// Db2LinkedService is linked service for DB2 data source.
type Db2LinkedService struct {
	ConnectVia                      *IntegrationRuntimeReference `json:"connectVia,omitempty"`
	Description                     *string                      `json:"description,omitempty"`
	Type                            TypeLinkedService            `json:"type,omitempty"`
	*Db2LinkedServiceTypeProperties `json:"typeProperties,omitempty"`
}

// MarshalJSON is the custom marshaler for Db2LinkedService.
func (d2ls Db2LinkedService) MarshalJSON() ([]byte, error) {
	d2ls.Type = TypeDb2
	type Alias Db2LinkedService
	return json.Marshal(&struct {
		Alias
	}{
		Alias: (Alias)(d2ls),
	})
}

// AsAzureDataLakeAnalyticsLinkedService is the LinkedService implementation for Db2LinkedService.
func (d2ls Db2LinkedService) AsAzureDataLakeAnalyticsLinkedService() (*AzureDataLakeAnalyticsLinkedService, bool) {
	return nil, false
}

// AsHDInsightOnDemandLinkedService is the LinkedService implementation for Db2LinkedService.
func (d2ls Db2LinkedService) AsHDInsightOnDemandLinkedService() (*HDInsightOnDemandLinkedService, bool) {
	return nil, false
}

// AsSapHanaLinkedService is the LinkedService implementation for Db2LinkedService.
func (d2ls Db2LinkedService) AsSapHanaLinkedService() (*SapHanaLinkedService, bool) {
	return nil, false
}

// AsSapBWLinkedService is the LinkedService implementation for Db2LinkedService.
func (d2ls Db2LinkedService) AsSapBWLinkedService() (*SapBWLinkedService, bool) {
	return nil, false
}

// AsSftpServerLinkedService is the LinkedService implementation for Db2LinkedService.
func (d2ls Db2LinkedService) AsSftpServerLinkedService() (*SftpServerLinkedService, bool) {
	return nil, false
}

// AsFtpServerLinkedService is the LinkedService implementation for Db2LinkedService.
func (d2ls Db2LinkedService) AsFtpServerLinkedService() (*FtpServerLinkedService, bool) {
	return nil, false
}

// AsHTTPLinkedService is the LinkedService implementation for Db2LinkedService.
func (d2ls Db2LinkedService) AsHTTPLinkedService() (*HTTPLinkedService, bool) {
	return nil, false
}

// AsAzureSearchLinkedService is the LinkedService implementation for Db2LinkedService.
func (d2ls Db2LinkedService) AsAzureSearchLinkedService() (*AzureSearchLinkedService, bool) {
	return nil, false
}

// AsCustomDataSourceLinkedService is the LinkedService implementation for Db2LinkedService.
func (d2ls Db2LinkedService) AsCustomDataSourceLinkedService() (*CustomDataSourceLinkedService, bool) {
	return nil, false
}

// AsAmazonRedshiftLinkedService is the LinkedService implementation for Db2LinkedService.
func (d2ls Db2LinkedService) AsAmazonRedshiftLinkedService() (*AmazonRedshiftLinkedService, bool) {
	return nil, false
}

// AsAmazonS3LinkedService is the LinkedService implementation for Db2LinkedService.
func (d2ls Db2LinkedService) AsAmazonS3LinkedService() (*AmazonS3LinkedService, bool) {
	return nil, false
}

// AsSalesforceLinkedService is the LinkedService implementation for Db2LinkedService.
func (d2ls Db2LinkedService) AsSalesforceLinkedService() (*SalesforceLinkedService, bool) {
	return nil, false
}

// AsAzureDataLakeStoreLinkedService is the LinkedService implementation for Db2LinkedService.
func (d2ls Db2LinkedService) AsAzureDataLakeStoreLinkedService() (*AzureDataLakeStoreLinkedService, bool) {
	return nil, false
}

// AsMongoDbLinkedService is the LinkedService implementation for Db2LinkedService.
func (d2ls Db2LinkedService) AsMongoDbLinkedService() (*MongoDbLinkedService, bool) {
	return nil, false
}

// AsCassandraLinkedService is the LinkedService implementation for Db2LinkedService.
func (d2ls Db2LinkedService) AsCassandraLinkedService() (*CassandraLinkedService, bool) {
	return nil, false
}

// AsWebLinkedService is the LinkedService implementation for Db2LinkedService.
func (d2ls Db2LinkedService) AsWebLinkedService() (*WebLinkedService, bool) {
	return nil, false
}

// AsODataLinkedService is the LinkedService implementation for Db2LinkedService.
func (d2ls Db2LinkedService) AsODataLinkedService() (*ODataLinkedService, bool) {
	return nil, false
}

// AsHdfsLinkedService is the LinkedService implementation for Db2LinkedService.
func (d2ls Db2LinkedService) AsHdfsLinkedService() (*HdfsLinkedService, bool) {
	return nil, false
}

// AsOdbcLinkedService is the LinkedService implementation for Db2LinkedService.
func (d2ls Db2LinkedService) AsOdbcLinkedService() (*OdbcLinkedService, bool) {
	return nil, false
}

// AsAzureMLLinkedService is the LinkedService implementation for Db2LinkedService.
func (d2ls Db2LinkedService) AsAzureMLLinkedService() (*AzureMLLinkedService, bool) {
	return nil, false
}

// AsTeradataLinkedService is the LinkedService implementation for Db2LinkedService.
func (d2ls Db2LinkedService) AsTeradataLinkedService() (*TeradataLinkedService, bool) {
	return nil, false
}

// AsDb2LinkedService is the LinkedService implementation for Db2LinkedService.
func (d2ls Db2LinkedService) AsDb2LinkedService() (*Db2LinkedService, bool) {
	return &d2ls, true
}

// AsSybaseLinkedService is the LinkedService implementation for Db2LinkedService.
func (d2ls Db2LinkedService) AsSybaseLinkedService() (*SybaseLinkedService, bool) {
	return nil, false
}

// AsPostgreSQLLinkedService is the LinkedService implementation for Db2LinkedService.
func (d2ls Db2LinkedService) AsPostgreSQLLinkedService() (*PostgreSQLLinkedService, bool) {
	return nil, false
}

// AsMySQLLinkedService is the LinkedService implementation for Db2LinkedService.
func (d2ls Db2LinkedService) AsMySQLLinkedService() (*MySQLLinkedService, bool) {
	return nil, false
}

// AsOracleLinkedService is the LinkedService implementation for Db2LinkedService.
func (d2ls Db2LinkedService) AsOracleLinkedService() (*OracleLinkedService, bool) {
	return nil, false
}

// AsFileServerLinkedService is the LinkedService implementation for Db2LinkedService.
func (d2ls Db2LinkedService) AsFileServerLinkedService() (*FileServerLinkedService, bool) {
	return nil, false
}

// AsHDInsightLinkedService is the LinkedService implementation for Db2LinkedService.
func (d2ls Db2LinkedService) AsHDInsightLinkedService() (*HDInsightLinkedService, bool) {
	return nil, false
}

// AsDynamicsLinkedService is the LinkedService implementation for Db2LinkedService.
func (d2ls Db2LinkedService) AsDynamicsLinkedService() (*DynamicsLinkedService, bool) {
	return nil, false
}

// AsCosmosDbLinkedService is the LinkedService implementation for Db2LinkedService.
func (d2ls Db2LinkedService) AsCosmosDbLinkedService() (*CosmosDbLinkedService, bool) {
	return nil, false
}

// AsAzureKeyVaultLinkedService is the LinkedService implementation for Db2LinkedService.
func (d2ls Db2LinkedService) AsAzureKeyVaultLinkedService() (*AzureKeyVaultLinkedService, bool) {
	return nil, false
}

// AsAzureBatchLinkedService is the LinkedService implementation for Db2LinkedService.
func (d2ls Db2LinkedService) AsAzureBatchLinkedService() (*AzureBatchLinkedService, bool) {
	return nil, false
}

// AsAzureSQLDatabaseLinkedService is the LinkedService implementation for Db2LinkedService.
func (d2ls Db2LinkedService) AsAzureSQLDatabaseLinkedService() (*AzureSQLDatabaseLinkedService, bool) {
	return nil, false
}

// AsSQLServerLinkedService is the LinkedService implementation for Db2LinkedService.
func (d2ls Db2LinkedService) AsSQLServerLinkedService() (*SQLServerLinkedService, bool) {
	return nil, false
}

// AsAzureSQLDWLinkedService is the LinkedService implementation for Db2LinkedService.
func (d2ls Db2LinkedService) AsAzureSQLDWLinkedService() (*AzureSQLDWLinkedService, bool) {
	return nil, false
}

// AsAzureStorageLinkedService is the LinkedService implementation for Db2LinkedService.
func (d2ls Db2LinkedService) AsAzureStorageLinkedService() (*AzureStorageLinkedService, bool) {
	return nil, false
}

// Db2LinkedServiceTypeProperties is dB2 linked service properties.
type Db2LinkedServiceTypeProperties struct {
	Server              *map[string]interface{} `json:"server,omitempty"`
	Database            *map[string]interface{} `json:"database,omitempty"`
	Schema              *map[string]interface{} `json:"schema,omitempty"`
	AuthenticationType  Db2AuthenticationType   `json:"authenticationType,omitempty"`
	Username            *map[string]interface{} `json:"username,omitempty"`
	Password            *SecureString           `json:"password,omitempty"`
	EncryptedCredential *map[string]interface{} `json:"encryptedCredential,omitempty"`
}

// DistcpSettings is distcp settings.
type DistcpSettings struct {
	ResourceManagerEndpoint *map[string]interface{} `json:"resourceManagerEndpoint,omitempty"`
	TempScriptPath          *map[string]interface{} `json:"tempScriptPath,omitempty"`
	DistcpOptions           *map[string]interface{} `json:"distcpOptions,omitempty"`
}

// DocumentDbCollectionDataset is microsoft Azure Document Database Collection dataset.
type DocumentDbCollectionDataset struct {
	Description                                *string                             `json:"description,omitempty"`
	Structure                                  *map[string]interface{}             `json:"structure,omitempty"`
	LinkedServiceName                          *LinkedServiceReference             `json:"linkedServiceName,omitempty"`
	Parameters                                 *map[string]*ParameterSpecification `json:"parameters,omitempty"`
	Type                                       TypeDataset                         `json:"type,omitempty"`
	*DocumentDbCollectionDatasetTypeProperties `json:"typeProperties,omitempty"`
}

// MarshalJSON is the custom marshaler for DocumentDbCollectionDataset.
func (ddcd DocumentDbCollectionDataset) MarshalJSON() ([]byte, error) {
	ddcd.Type = TypeDocumentDbCollection
	type Alias DocumentDbCollectionDataset
	return json.Marshal(&struct {
		Alias
	}{
		Alias: (Alias)(ddcd),
	})
}

// AsHTTPDataset is the Dataset implementation for DocumentDbCollectionDataset.
func (ddcd DocumentDbCollectionDataset) AsHTTPDataset() (*HTTPDataset, bool) {
	return nil, false
}

// AsAzureSearchIndexDataset is the Dataset implementation for DocumentDbCollectionDataset.
func (ddcd DocumentDbCollectionDataset) AsAzureSearchIndexDataset() (*AzureSearchIndexDataset, bool) {
	return nil, false
}

// AsWebTableDataset is the Dataset implementation for DocumentDbCollectionDataset.
func (ddcd DocumentDbCollectionDataset) AsWebTableDataset() (*WebTableDataset, bool) {
	return nil, false
}

// AsSQLServerTableDataset is the Dataset implementation for DocumentDbCollectionDataset.
func (ddcd DocumentDbCollectionDataset) AsSQLServerTableDataset() (*SQLServerTableDataset, bool) {
	return nil, false
}

// AsRelationalTableDataset is the Dataset implementation for DocumentDbCollectionDataset.
func (ddcd DocumentDbCollectionDataset) AsRelationalTableDataset() (*RelationalTableDataset, bool) {
	return nil, false
}

// AsOracleTableDataset is the Dataset implementation for DocumentDbCollectionDataset.
func (ddcd DocumentDbCollectionDataset) AsOracleTableDataset() (*OracleTableDataset, bool) {
	return nil, false
}

// AsODataResourceDataset is the Dataset implementation for DocumentDbCollectionDataset.
func (ddcd DocumentDbCollectionDataset) AsODataResourceDataset() (*ODataResourceDataset, bool) {
	return nil, false
}

// AsMongoDbCollectionDataset is the Dataset implementation for DocumentDbCollectionDataset.
func (ddcd DocumentDbCollectionDataset) AsMongoDbCollectionDataset() (*MongoDbCollectionDataset, bool) {
	return nil, false
}

// AsFileShareDataset is the Dataset implementation for DocumentDbCollectionDataset.
func (ddcd DocumentDbCollectionDataset) AsFileShareDataset() (*FileShareDataset, bool) {
	return nil, false
}

// AsAzureDataLakeStoreDataset is the Dataset implementation for DocumentDbCollectionDataset.
func (ddcd DocumentDbCollectionDataset) AsAzureDataLakeStoreDataset() (*AzureDataLakeStoreDataset, bool) {
	return nil, false
}

// AsDynamicsEntityDataset is the Dataset implementation for DocumentDbCollectionDataset.
func (ddcd DocumentDbCollectionDataset) AsDynamicsEntityDataset() (*DynamicsEntityDataset, bool) {
	return nil, false
}

// AsDocumentDbCollectionDataset is the Dataset implementation for DocumentDbCollectionDataset.
func (ddcd DocumentDbCollectionDataset) AsDocumentDbCollectionDataset() (*DocumentDbCollectionDataset, bool) {
	return &ddcd, true
}

// AsCustomDataset is the Dataset implementation for DocumentDbCollectionDataset.
func (ddcd DocumentDbCollectionDataset) AsCustomDataset() (*CustomDataset, bool) {
	return nil, false
}

// AsCassandraTableDataset is the Dataset implementation for DocumentDbCollectionDataset.
func (ddcd DocumentDbCollectionDataset) AsCassandraTableDataset() (*CassandraTableDataset, bool) {
	return nil, false
}

// AsAzureSQLDWTableDataset is the Dataset implementation for DocumentDbCollectionDataset.
func (ddcd DocumentDbCollectionDataset) AsAzureSQLDWTableDataset() (*AzureSQLDWTableDataset, bool) {
	return nil, false
}

// AsAzureSQLTableDataset is the Dataset implementation for DocumentDbCollectionDataset.
func (ddcd DocumentDbCollectionDataset) AsAzureSQLTableDataset() (*AzureSQLTableDataset, bool) {
	return nil, false
}

// AsAzureTableDataset is the Dataset implementation for DocumentDbCollectionDataset.
func (ddcd DocumentDbCollectionDataset) AsAzureTableDataset() (*AzureTableDataset, bool) {
	return nil, false
}

// AsAzureBlobDataset is the Dataset implementation for DocumentDbCollectionDataset.
func (ddcd DocumentDbCollectionDataset) AsAzureBlobDataset() (*AzureBlobDataset, bool) {
	return nil, false
}

// AsAmazonS3Dataset is the Dataset implementation for DocumentDbCollectionDataset.
func (ddcd DocumentDbCollectionDataset) AsAmazonS3Dataset() (*AmazonS3Dataset, bool) {
	return nil, false
}

// DocumentDbCollectionDatasetTypeProperties is documentDB Collection dataset properties.
type DocumentDbCollectionDatasetTypeProperties struct {
	CollectionName *map[string]interface{} `json:"collectionName,omitempty"`
}

// DocumentDbCollectionSink is a copy activity Document Database Collection sink.
type DocumentDbCollectionSink struct {
	WriteBatchSize    *map[string]interface{} `json:"writeBatchSize,omitempty"`
	WriteBatchTimeout *map[string]interface{} `json:"writeBatchTimeout,omitempty"`
	SinkRetryCount    *map[string]interface{} `json:"sinkRetryCount,omitempty"`
	SinkRetryWait     *map[string]interface{} `json:"sinkRetryWait,omitempty"`
	Type              TypeCopySink            `json:"type,omitempty"`
	NestingSeparator  *map[string]interface{} `json:"nestingSeparator,omitempty"`
}

// MarshalJSON is the custom marshaler for DocumentDbCollectionSink.
func (ddcs DocumentDbCollectionSink) MarshalJSON() ([]byte, error) {
	ddcs.Type = TypeDocumentDbCollectionSink
	type Alias DocumentDbCollectionSink
	return json.Marshal(&struct {
		Alias
	}{
		Alias: (Alias)(ddcs),
	})
}

// AsOdbcSink is the CopySink implementation for DocumentDbCollectionSink.
func (ddcs DocumentDbCollectionSink) AsOdbcSink() (*OdbcSink, bool) {
	return nil, false
}

// AsAzureSearchIndexSink is the CopySink implementation for DocumentDbCollectionSink.
func (ddcs DocumentDbCollectionSink) AsAzureSearchIndexSink() (*AzureSearchIndexSink, bool) {
	return nil, false
}

// AsAzureDataLakeStoreSink is the CopySink implementation for DocumentDbCollectionSink.
func (ddcs DocumentDbCollectionSink) AsAzureDataLakeStoreSink() (*AzureDataLakeStoreSink, bool) {
	return nil, false
}

// AsOracleSink is the CopySink implementation for DocumentDbCollectionSink.
func (ddcs DocumentDbCollectionSink) AsOracleSink() (*OracleSink, bool) {
	return nil, false
}

// AsSQLDWSink is the CopySink implementation for DocumentDbCollectionSink.
func (ddcs DocumentDbCollectionSink) AsSQLDWSink() (*SQLDWSink, bool) {
	return nil, false
}

// AsSQLSink is the CopySink implementation for DocumentDbCollectionSink.
func (ddcs DocumentDbCollectionSink) AsSQLSink() (*SQLSink, bool) {
	return nil, false
}

// AsDocumentDbCollectionSink is the CopySink implementation for DocumentDbCollectionSink.
func (ddcs DocumentDbCollectionSink) AsDocumentDbCollectionSink() (*DocumentDbCollectionSink, bool) {
	return &ddcs, true
}

// AsFileSystemSink is the CopySink implementation for DocumentDbCollectionSink.
func (ddcs DocumentDbCollectionSink) AsFileSystemSink() (*FileSystemSink, bool) {
	return nil, false
}

// AsBlobSink is the CopySink implementation for DocumentDbCollectionSink.
func (ddcs DocumentDbCollectionSink) AsBlobSink() (*BlobSink, bool) {
	return nil, false
}

// AsAzureTableSink is the CopySink implementation for DocumentDbCollectionSink.
func (ddcs DocumentDbCollectionSink) AsAzureTableSink() (*AzureTableSink, bool) {
	return nil, false
}

// AsAzureQueueSink is the CopySink implementation for DocumentDbCollectionSink.
func (ddcs DocumentDbCollectionSink) AsAzureQueueSink() (*AzureQueueSink, bool) {
	return nil, false
}

// DocumentDbCollectionSource is a copy activity Document Database Collection source.
type DocumentDbCollectionSource struct {
	SourceRetryCount *map[string]interface{} `json:"sourceRetryCount,omitempty"`
	SourceRetryWait  *map[string]interface{} `json:"sourceRetryWait,omitempty"`
	Type             TypeCopySource          `json:"type,omitempty"`
	Query            *map[string]interface{} `json:"query,omitempty"`
	NestingSeparator *map[string]interface{} `json:"nestingSeparator,omitempty"`
}

// MarshalJSON is the custom marshaler for DocumentDbCollectionSource.
func (ddcs DocumentDbCollectionSource) MarshalJSON() ([]byte, error) {
	ddcs.Type = TypeDocumentDbCollectionSource
	type Alias DocumentDbCollectionSource
	return json.Marshal(&struct {
		Alias
	}{
		Alias: (Alias)(ddcs),
	})
}

// AsAmazonRedshiftSource is the CopySource implementation for DocumentDbCollectionSource.
func (ddcs DocumentDbCollectionSource) AsAmazonRedshiftSource() (*AmazonRedshiftSource, bool) {
	return nil, false
}

// AsHTTPSource is the CopySource implementation for DocumentDbCollectionSource.
func (ddcs DocumentDbCollectionSource) AsHTTPSource() (*HTTPSource, bool) {
	return nil, false
}

// AsAzureDataLakeStoreSource is the CopySource implementation for DocumentDbCollectionSource.
func (ddcs DocumentDbCollectionSource) AsAzureDataLakeStoreSource() (*AzureDataLakeStoreSource, bool) {
	return nil, false
}

// AsMongoDbSource is the CopySource implementation for DocumentDbCollectionSource.
func (ddcs DocumentDbCollectionSource) AsMongoDbSource() (*MongoDbSource, bool) {
	return nil, false
}

// AsCassandraSource is the CopySource implementation for DocumentDbCollectionSource.
func (ddcs DocumentDbCollectionSource) AsCassandraSource() (*CassandraSource, bool) {
	return nil, false
}

// AsWebSource is the CopySource implementation for DocumentDbCollectionSource.
func (ddcs DocumentDbCollectionSource) AsWebSource() (*WebSource, bool) {
	return nil, false
}

// AsOracleSource is the CopySource implementation for DocumentDbCollectionSource.
func (ddcs DocumentDbCollectionSource) AsOracleSource() (*OracleSource, bool) {
	return nil, false
}

// AsHdfsSource is the CopySource implementation for DocumentDbCollectionSource.
func (ddcs DocumentDbCollectionSource) AsHdfsSource() (*HdfsSource, bool) {
	return nil, false
}

// AsFileSystemSource is the CopySource implementation for DocumentDbCollectionSource.
func (ddcs DocumentDbCollectionSource) AsFileSystemSource() (*FileSystemSource, bool) {
	return nil, false
}

// AsSQLDWSource is the CopySource implementation for DocumentDbCollectionSource.
func (ddcs DocumentDbCollectionSource) AsSQLDWSource() (*SQLDWSource, bool) {
	return nil, false
}

// AsSQLSource is the CopySource implementation for DocumentDbCollectionSource.
func (ddcs DocumentDbCollectionSource) AsSQLSource() (*SQLSource, bool) {
	return nil, false
}

// AsRelationalSource is the CopySource implementation for DocumentDbCollectionSource.
func (ddcs DocumentDbCollectionSource) AsRelationalSource() (*RelationalSource, bool) {
	return nil, false
}

// AsDynamicsSource is the CopySource implementation for DocumentDbCollectionSource.
func (ddcs DocumentDbCollectionSource) AsDynamicsSource() (*DynamicsSource, bool) {
	return nil, false
}

// AsDocumentDbCollectionSource is the CopySource implementation for DocumentDbCollectionSource.
func (ddcs DocumentDbCollectionSource) AsDocumentDbCollectionSource() (*DocumentDbCollectionSource, bool) {
	return &ddcs, true
}

// AsBlobSource is the CopySource implementation for DocumentDbCollectionSource.
func (ddcs DocumentDbCollectionSource) AsBlobSource() (*BlobSource, bool) {
	return nil, false
}

// AsAzureTableSource is the CopySource implementation for DocumentDbCollectionSource.
func (ddcs DocumentDbCollectionSource) AsAzureTableSource() (*AzureTableSource, bool) {
	return nil, false
}

// DynamicsEntityDataset is the Dynamics entity dataset.
type DynamicsEntityDataset struct {
	Description                          *string                             `json:"description,omitempty"`
	Structure                            *map[string]interface{}             `json:"structure,omitempty"`
	LinkedServiceName                    *LinkedServiceReference             `json:"linkedServiceName,omitempty"`
	Parameters                           *map[string]*ParameterSpecification `json:"parameters,omitempty"`
	Type                                 TypeDataset                         `json:"type,omitempty"`
	*DynamicsEntityDatasetTypeProperties `json:"typeProperties,omitempty"`
}

// MarshalJSON is the custom marshaler for DynamicsEntityDataset.
func (ded DynamicsEntityDataset) MarshalJSON() ([]byte, error) {
	ded.Type = TypeDynamicsEntity
	type Alias DynamicsEntityDataset
	return json.Marshal(&struct {
		Alias
	}{
		Alias: (Alias)(ded),
	})
}

// AsHTTPDataset is the Dataset implementation for DynamicsEntityDataset.
func (ded DynamicsEntityDataset) AsHTTPDataset() (*HTTPDataset, bool) {
	return nil, false
}

// AsAzureSearchIndexDataset is the Dataset implementation for DynamicsEntityDataset.
func (ded DynamicsEntityDataset) AsAzureSearchIndexDataset() (*AzureSearchIndexDataset, bool) {
	return nil, false
}

// AsWebTableDataset is the Dataset implementation for DynamicsEntityDataset.
func (ded DynamicsEntityDataset) AsWebTableDataset() (*WebTableDataset, bool) {
	return nil, false
}

// AsSQLServerTableDataset is the Dataset implementation for DynamicsEntityDataset.
func (ded DynamicsEntityDataset) AsSQLServerTableDataset() (*SQLServerTableDataset, bool) {
	return nil, false
}

// AsRelationalTableDataset is the Dataset implementation for DynamicsEntityDataset.
func (ded DynamicsEntityDataset) AsRelationalTableDataset() (*RelationalTableDataset, bool) {
	return nil, false
}

// AsOracleTableDataset is the Dataset implementation for DynamicsEntityDataset.
func (ded DynamicsEntityDataset) AsOracleTableDataset() (*OracleTableDataset, bool) {
	return nil, false
}

// AsODataResourceDataset is the Dataset implementation for DynamicsEntityDataset.
func (ded DynamicsEntityDataset) AsODataResourceDataset() (*ODataResourceDataset, bool) {
	return nil, false
}

// AsMongoDbCollectionDataset is the Dataset implementation for DynamicsEntityDataset.
func (ded DynamicsEntityDataset) AsMongoDbCollectionDataset() (*MongoDbCollectionDataset, bool) {
	return nil, false
}

// AsFileShareDataset is the Dataset implementation for DynamicsEntityDataset.
func (ded DynamicsEntityDataset) AsFileShareDataset() (*FileShareDataset, bool) {
	return nil, false
}

// AsAzureDataLakeStoreDataset is the Dataset implementation for DynamicsEntityDataset.
func (ded DynamicsEntityDataset) AsAzureDataLakeStoreDataset() (*AzureDataLakeStoreDataset, bool) {
	return nil, false
}

// AsDynamicsEntityDataset is the Dataset implementation for DynamicsEntityDataset.
func (ded DynamicsEntityDataset) AsDynamicsEntityDataset() (*DynamicsEntityDataset, bool) {
	return &ded, true
}

// AsDocumentDbCollectionDataset is the Dataset implementation for DynamicsEntityDataset.
func (ded DynamicsEntityDataset) AsDocumentDbCollectionDataset() (*DocumentDbCollectionDataset, bool) {
	return nil, false
}

// AsCustomDataset is the Dataset implementation for DynamicsEntityDataset.
func (ded DynamicsEntityDataset) AsCustomDataset() (*CustomDataset, bool) {
	return nil, false
}

// AsCassandraTableDataset is the Dataset implementation for DynamicsEntityDataset.
func (ded DynamicsEntityDataset) AsCassandraTableDataset() (*CassandraTableDataset, bool) {
	return nil, false
}

// AsAzureSQLDWTableDataset is the Dataset implementation for DynamicsEntityDataset.
func (ded DynamicsEntityDataset) AsAzureSQLDWTableDataset() (*AzureSQLDWTableDataset, bool) {
	return nil, false
}

// AsAzureSQLTableDataset is the Dataset implementation for DynamicsEntityDataset.
func (ded DynamicsEntityDataset) AsAzureSQLTableDataset() (*AzureSQLTableDataset, bool) {
	return nil, false
}

// AsAzureTableDataset is the Dataset implementation for DynamicsEntityDataset.
func (ded DynamicsEntityDataset) AsAzureTableDataset() (*AzureTableDataset, bool) {
	return nil, false
}

// AsAzureBlobDataset is the Dataset implementation for DynamicsEntityDataset.
func (ded DynamicsEntityDataset) AsAzureBlobDataset() (*AzureBlobDataset, bool) {
	return nil, false
}

// AsAmazonS3Dataset is the Dataset implementation for DynamicsEntityDataset.
func (ded DynamicsEntityDataset) AsAmazonS3Dataset() (*AmazonS3Dataset, bool) {
	return nil, false
}

// DynamicsEntityDatasetTypeProperties is dynamics entity dataset properties.
type DynamicsEntityDatasetTypeProperties struct {
	EntityName *map[string]interface{} `json:"entityName,omitempty"`
}

// DynamicsLinkedService is dynamics linked service.
type DynamicsLinkedService struct {
	ConnectVia                           *IntegrationRuntimeReference `json:"connectVia,omitempty"`
	Description                          *string                      `json:"description,omitempty"`
	Type                                 TypeLinkedService            `json:"type,omitempty"`
	*DynamicsLinkedServiceTypeProperties `json:"typeProperties,omitempty"`
}

// MarshalJSON is the custom marshaler for DynamicsLinkedService.
func (dls DynamicsLinkedService) MarshalJSON() ([]byte, error) {
	dls.Type = TypeDynamics
	type Alias DynamicsLinkedService
	return json.Marshal(&struct {
		Alias
	}{
		Alias: (Alias)(dls),
	})
}

// AsAzureDataLakeAnalyticsLinkedService is the LinkedService implementation for DynamicsLinkedService.
func (dls DynamicsLinkedService) AsAzureDataLakeAnalyticsLinkedService() (*AzureDataLakeAnalyticsLinkedService, bool) {
	return nil, false
}

// AsHDInsightOnDemandLinkedService is the LinkedService implementation for DynamicsLinkedService.
func (dls DynamicsLinkedService) AsHDInsightOnDemandLinkedService() (*HDInsightOnDemandLinkedService, bool) {
	return nil, false
}

// AsSapHanaLinkedService is the LinkedService implementation for DynamicsLinkedService.
func (dls DynamicsLinkedService) AsSapHanaLinkedService() (*SapHanaLinkedService, bool) {
	return nil, false
}

// AsSapBWLinkedService is the LinkedService implementation for DynamicsLinkedService.
func (dls DynamicsLinkedService) AsSapBWLinkedService() (*SapBWLinkedService, bool) {
	return nil, false
}

// AsSftpServerLinkedService is the LinkedService implementation for DynamicsLinkedService.
func (dls DynamicsLinkedService) AsSftpServerLinkedService() (*SftpServerLinkedService, bool) {
	return nil, false
}

// AsFtpServerLinkedService is the LinkedService implementation for DynamicsLinkedService.
func (dls DynamicsLinkedService) AsFtpServerLinkedService() (*FtpServerLinkedService, bool) {
	return nil, false
}

// AsHTTPLinkedService is the LinkedService implementation for DynamicsLinkedService.
func (dls DynamicsLinkedService) AsHTTPLinkedService() (*HTTPLinkedService, bool) {
	return nil, false
}

// AsAzureSearchLinkedService is the LinkedService implementation for DynamicsLinkedService.
func (dls DynamicsLinkedService) AsAzureSearchLinkedService() (*AzureSearchLinkedService, bool) {
	return nil, false
}

// AsCustomDataSourceLinkedService is the LinkedService implementation for DynamicsLinkedService.
func (dls DynamicsLinkedService) AsCustomDataSourceLinkedService() (*CustomDataSourceLinkedService, bool) {
	return nil, false
}

// AsAmazonRedshiftLinkedService is the LinkedService implementation for DynamicsLinkedService.
func (dls DynamicsLinkedService) AsAmazonRedshiftLinkedService() (*AmazonRedshiftLinkedService, bool) {
	return nil, false
}

// AsAmazonS3LinkedService is the LinkedService implementation for DynamicsLinkedService.
func (dls DynamicsLinkedService) AsAmazonS3LinkedService() (*AmazonS3LinkedService, bool) {
	return nil, false
}

// AsSalesforceLinkedService is the LinkedService implementation for DynamicsLinkedService.
func (dls DynamicsLinkedService) AsSalesforceLinkedService() (*SalesforceLinkedService, bool) {
	return nil, false
}

// AsAzureDataLakeStoreLinkedService is the LinkedService implementation for DynamicsLinkedService.
func (dls DynamicsLinkedService) AsAzureDataLakeStoreLinkedService() (*AzureDataLakeStoreLinkedService, bool) {
	return nil, false
}

// AsMongoDbLinkedService is the LinkedService implementation for DynamicsLinkedService.
func (dls DynamicsLinkedService) AsMongoDbLinkedService() (*MongoDbLinkedService, bool) {
	return nil, false
}

// AsCassandraLinkedService is the LinkedService implementation for DynamicsLinkedService.
func (dls DynamicsLinkedService) AsCassandraLinkedService() (*CassandraLinkedService, bool) {
	return nil, false
}

// AsWebLinkedService is the LinkedService implementation for DynamicsLinkedService.
func (dls DynamicsLinkedService) AsWebLinkedService() (*WebLinkedService, bool) {
	return nil, false
}

// AsODataLinkedService is the LinkedService implementation for DynamicsLinkedService.
func (dls DynamicsLinkedService) AsODataLinkedService() (*ODataLinkedService, bool) {
	return nil, false
}

// AsHdfsLinkedService is the LinkedService implementation for DynamicsLinkedService.
func (dls DynamicsLinkedService) AsHdfsLinkedService() (*HdfsLinkedService, bool) {
	return nil, false
}

// AsOdbcLinkedService is the LinkedService implementation for DynamicsLinkedService.
func (dls DynamicsLinkedService) AsOdbcLinkedService() (*OdbcLinkedService, bool) {
	return nil, false
}

// AsAzureMLLinkedService is the LinkedService implementation for DynamicsLinkedService.
func (dls DynamicsLinkedService) AsAzureMLLinkedService() (*AzureMLLinkedService, bool) {
	return nil, false
}

// AsTeradataLinkedService is the LinkedService implementation for DynamicsLinkedService.
func (dls DynamicsLinkedService) AsTeradataLinkedService() (*TeradataLinkedService, bool) {
	return nil, false
}

// AsDb2LinkedService is the LinkedService implementation for DynamicsLinkedService.
func (dls DynamicsLinkedService) AsDb2LinkedService() (*Db2LinkedService, bool) {
	return nil, false
}

// AsSybaseLinkedService is the LinkedService implementation for DynamicsLinkedService.
func (dls DynamicsLinkedService) AsSybaseLinkedService() (*SybaseLinkedService, bool) {
	return nil, false
}

// AsPostgreSQLLinkedService is the LinkedService implementation for DynamicsLinkedService.
func (dls DynamicsLinkedService) AsPostgreSQLLinkedService() (*PostgreSQLLinkedService, bool) {
	return nil, false
}

// AsMySQLLinkedService is the LinkedService implementation for DynamicsLinkedService.
func (dls DynamicsLinkedService) AsMySQLLinkedService() (*MySQLLinkedService, bool) {
	return nil, false
}

// AsOracleLinkedService is the LinkedService implementation for DynamicsLinkedService.
func (dls DynamicsLinkedService) AsOracleLinkedService() (*OracleLinkedService, bool) {
	return nil, false
}

// AsFileServerLinkedService is the LinkedService implementation for DynamicsLinkedService.
func (dls DynamicsLinkedService) AsFileServerLinkedService() (*FileServerLinkedService, bool) {
	return nil, false
}

// AsHDInsightLinkedService is the LinkedService implementation for DynamicsLinkedService.
func (dls DynamicsLinkedService) AsHDInsightLinkedService() (*HDInsightLinkedService, bool) {
	return nil, false
}

// AsDynamicsLinkedService is the LinkedService implementation for DynamicsLinkedService.
func (dls DynamicsLinkedService) AsDynamicsLinkedService() (*DynamicsLinkedService, bool) {
	return &dls, true
}

// AsCosmosDbLinkedService is the LinkedService implementation for DynamicsLinkedService.
func (dls DynamicsLinkedService) AsCosmosDbLinkedService() (*CosmosDbLinkedService, bool) {
	return nil, false
}

// AsAzureKeyVaultLinkedService is the LinkedService implementation for DynamicsLinkedService.
func (dls DynamicsLinkedService) AsAzureKeyVaultLinkedService() (*AzureKeyVaultLinkedService, bool) {
	return nil, false
}

// AsAzureBatchLinkedService is the LinkedService implementation for DynamicsLinkedService.
func (dls DynamicsLinkedService) AsAzureBatchLinkedService() (*AzureBatchLinkedService, bool) {
	return nil, false
}

// AsAzureSQLDatabaseLinkedService is the LinkedService implementation for DynamicsLinkedService.
func (dls DynamicsLinkedService) AsAzureSQLDatabaseLinkedService() (*AzureSQLDatabaseLinkedService, bool) {
	return nil, false
}

// AsSQLServerLinkedService is the LinkedService implementation for DynamicsLinkedService.
func (dls DynamicsLinkedService) AsSQLServerLinkedService() (*SQLServerLinkedService, bool) {
	return nil, false
}

// AsAzureSQLDWLinkedService is the LinkedService implementation for DynamicsLinkedService.
func (dls DynamicsLinkedService) AsAzureSQLDWLinkedService() (*AzureSQLDWLinkedService, bool) {
	return nil, false
}

// AsAzureStorageLinkedService is the LinkedService implementation for DynamicsLinkedService.
func (dls DynamicsLinkedService) AsAzureStorageLinkedService() (*AzureStorageLinkedService, bool) {
	return nil, false
}

// DynamicsLinkedServiceTypeProperties is dynamics linked service properties.
type DynamicsLinkedServiceTypeProperties struct {
	DeploymentType     *map[string]interface{}       `json:"deploymentType,omitempty"`
	HostName           *map[string]interface{}       `json:"hostName,omitempty"`
	Port               *map[string]interface{}       `json:"port,omitempty"`
	OrganizationName   *map[string]interface{}       `json:"organizationName,omitempty"`
	AuthenticationType *map[string]interface{}       `json:"authenticationType,omitempty"`
	Username           *map[string]interface{}       `json:"username,omitempty"`
	Password           *AzureKeyVaultSecretReference `json:"password,omitempty"`
}

// DynamicsSource is a copy activity Dynamics entity source.
type DynamicsSource struct {
	SourceRetryCount *map[string]interface{} `json:"sourceRetryCount,omitempty"`
	SourceRetryWait  *map[string]interface{} `json:"sourceRetryWait,omitempty"`
	Type             TypeCopySource          `json:"type,omitempty"`
	Query            *map[string]interface{} `json:"query,omitempty"`
}

// MarshalJSON is the custom marshaler for DynamicsSource.
func (ds DynamicsSource) MarshalJSON() ([]byte, error) {
	ds.Type = TypeDynamicsSource
	type Alias DynamicsSource
	return json.Marshal(&struct {
		Alias
	}{
		Alias: (Alias)(ds),
	})
}

// AsAmazonRedshiftSource is the CopySource implementation for DynamicsSource.
func (ds DynamicsSource) AsAmazonRedshiftSource() (*AmazonRedshiftSource, bool) {
	return nil, false
}

// AsHTTPSource is the CopySource implementation for DynamicsSource.
func (ds DynamicsSource) AsHTTPSource() (*HTTPSource, bool) {
	return nil, false
}

// AsAzureDataLakeStoreSource is the CopySource implementation for DynamicsSource.
func (ds DynamicsSource) AsAzureDataLakeStoreSource() (*AzureDataLakeStoreSource, bool) {
	return nil, false
}

// AsMongoDbSource is the CopySource implementation for DynamicsSource.
func (ds DynamicsSource) AsMongoDbSource() (*MongoDbSource, bool) {
	return nil, false
}

// AsCassandraSource is the CopySource implementation for DynamicsSource.
func (ds DynamicsSource) AsCassandraSource() (*CassandraSource, bool) {
	return nil, false
}

// AsWebSource is the CopySource implementation for DynamicsSource.
func (ds DynamicsSource) AsWebSource() (*WebSource, bool) {
	return nil, false
}

// AsOracleSource is the CopySource implementation for DynamicsSource.
func (ds DynamicsSource) AsOracleSource() (*OracleSource, bool) {
	return nil, false
}

// AsHdfsSource is the CopySource implementation for DynamicsSource.
func (ds DynamicsSource) AsHdfsSource() (*HdfsSource, bool) {
	return nil, false
}

// AsFileSystemSource is the CopySource implementation for DynamicsSource.
func (ds DynamicsSource) AsFileSystemSource() (*FileSystemSource, bool) {
	return nil, false
}

// AsSQLDWSource is the CopySource implementation for DynamicsSource.
func (ds DynamicsSource) AsSQLDWSource() (*SQLDWSource, bool) {
	return nil, false
}

// AsSQLSource is the CopySource implementation for DynamicsSource.
func (ds DynamicsSource) AsSQLSource() (*SQLSource, bool) {
	return nil, false
}

// AsRelationalSource is the CopySource implementation for DynamicsSource.
func (ds DynamicsSource) AsRelationalSource() (*RelationalSource, bool) {
	return nil, false
}

// AsDynamicsSource is the CopySource implementation for DynamicsSource.
func (ds DynamicsSource) AsDynamicsSource() (*DynamicsSource, bool) {
	return &ds, true
}

// AsDocumentDbCollectionSource is the CopySource implementation for DynamicsSource.
func (ds DynamicsSource) AsDocumentDbCollectionSource() (*DocumentDbCollectionSource, bool) {
	return nil, false
}

// AsBlobSource is the CopySource implementation for DynamicsSource.
func (ds DynamicsSource) AsBlobSource() (*BlobSource, bool) {
	return nil, false
}

// AsAzureTableSource is the CopySource implementation for DynamicsSource.
func (ds DynamicsSource) AsAzureTableSource() (*AzureTableSource, bool) {
	return nil, false
}

// ErrorResponse is the object that defines the structure of an Azure Data Factory response.
type ErrorResponse struct {
	Code    *string          `json:"code,omitempty"`
	Message *string          `json:"message,omitempty"`
	Target  *string          `json:"target,omitempty"`
	Details *[]ErrorResponse `json:"details,omitempty"`
}

// ExecutePipelineActivity is execute pipeline activity.
type ExecutePipelineActivity struct {
	Name                                   *string               `json:"name,omitempty"`
	Description                            *string               `json:"description,omitempty"`
	DependsOn                              *[]ActivityDependency `json:"dependsOn,omitempty"`
	Type                                   TypeActivity          `json:"type,omitempty"`
	*ExecutePipelineActivityTypeProperties `json:"typeProperties,omitempty"`
}

// MarshalJSON is the custom marshaler for ExecutePipelineActivity.
func (epa ExecutePipelineActivity) MarshalJSON() ([]byte, error) {
	epa.Type = TypeExecutePipeline
	type Alias ExecutePipelineActivity
	return json.Marshal(&struct {
		Alias
	}{
		Alias: (Alias)(epa),
	})
}

// AsUntilActivity is the ControlActivity implementation for ExecutePipelineActivity.
func (epa ExecutePipelineActivity) AsUntilActivity() (*UntilActivity, bool) {
	return nil, false
}

// AsWaitActivity is the ControlActivity implementation for ExecutePipelineActivity.
func (epa ExecutePipelineActivity) AsWaitActivity() (*WaitActivity, bool) {
	return nil, false
}

// AsForEachActivity is the ControlActivity implementation for ExecutePipelineActivity.
func (epa ExecutePipelineActivity) AsForEachActivity() (*ForEachActivity, bool) {
	return nil, false
}

// AsIfConditionActivity is the ControlActivity implementation for ExecutePipelineActivity.
func (epa ExecutePipelineActivity) AsIfConditionActivity() (*IfConditionActivity, bool) {
	return nil, false
}

// AsExecutePipelineActivity is the ControlActivity implementation for ExecutePipelineActivity.
func (epa ExecutePipelineActivity) AsExecutePipelineActivity() (*ExecutePipelineActivity, bool) {
	return &epa, true
}

// AsDataLakeAnalyticsUSQLActivity is the ControlActivity implementation for ExecutePipelineActivity.
func (epa ExecutePipelineActivity) AsDataLakeAnalyticsUSQLActivity() (*DataLakeAnalyticsUSQLActivity, bool) {
	return nil, false
}

// AsAzureMLUpdateResourceActivity is the ControlActivity implementation for ExecutePipelineActivity.
func (epa ExecutePipelineActivity) AsAzureMLUpdateResourceActivity() (*AzureMLUpdateResourceActivity, bool) {
	return nil, false
}

// AsAzureMLBatchExecutionActivity is the ControlActivity implementation for ExecutePipelineActivity.
func (epa ExecutePipelineActivity) AsAzureMLBatchExecutionActivity() (*AzureMLBatchExecutionActivity, bool) {
	return nil, false
}

// AsGetMetadataActivity is the ControlActivity implementation for ExecutePipelineActivity.
func (epa ExecutePipelineActivity) AsGetMetadataActivity() (*GetMetadataActivity, bool) {
	return nil, false
}

// AsWebActivity is the ControlActivity implementation for ExecutePipelineActivity.
func (epa ExecutePipelineActivity) AsWebActivity() (*WebActivity, bool) {
	return nil, false
}

// AsLookupActivity is the ControlActivity implementation for ExecutePipelineActivity.
func (epa ExecutePipelineActivity) AsLookupActivity() (*LookupActivity, bool) {
	return nil, false
}

// AsSQLServerStoredProcedureActivity is the ControlActivity implementation for ExecutePipelineActivity.
func (epa ExecutePipelineActivity) AsSQLServerStoredProcedureActivity() (*SQLServerStoredProcedureActivity, bool) {
	return nil, false
}

// AsCustomActivity is the ControlActivity implementation for ExecutePipelineActivity.
func (epa ExecutePipelineActivity) AsCustomActivity() (*CustomActivity, bool) {
	return nil, false
}

// AsHDInsightSparkActivity is the ControlActivity implementation for ExecutePipelineActivity.
func (epa ExecutePipelineActivity) AsHDInsightSparkActivity() (*HDInsightSparkActivity, bool) {
	return nil, false
}

// AsHDInsightStreamingActivity is the ControlActivity implementation for ExecutePipelineActivity.
func (epa ExecutePipelineActivity) AsHDInsightStreamingActivity() (*HDInsightStreamingActivity, bool) {
	return nil, false
}

// AsHDInsightMapReduceActivity is the ControlActivity implementation for ExecutePipelineActivity.
func (epa ExecutePipelineActivity) AsHDInsightMapReduceActivity() (*HDInsightMapReduceActivity, bool) {
	return nil, false
}

// AsHDInsightPigActivity is the ControlActivity implementation for ExecutePipelineActivity.
func (epa ExecutePipelineActivity) AsHDInsightPigActivity() (*HDInsightPigActivity, bool) {
	return nil, false
}

// AsHDInsightHiveActivity is the ControlActivity implementation for ExecutePipelineActivity.
func (epa ExecutePipelineActivity) AsHDInsightHiveActivity() (*HDInsightHiveActivity, bool) {
	return nil, false
}

// AsCopyActivity is the ControlActivity implementation for ExecutePipelineActivity.
func (epa ExecutePipelineActivity) AsCopyActivity() (*CopyActivity, bool) {
	return nil, false
}

// AsExecutionActivity is the ControlActivity implementation for ExecutePipelineActivity.
func (epa ExecutePipelineActivity) AsExecutionActivity() (*ExecutionActivity, bool) {
	return nil, false
}

// AsControlActivity is the ControlActivity implementation for ExecutePipelineActivity.
func (epa ExecutePipelineActivity) AsControlActivity() (*ControlActivity, bool) {
	return nil, false
}

// ExecutePipelineActivityTypeProperties is execute pipeline activity properties.
type ExecutePipelineActivityTypeProperties struct {
	Pipeline         *PipelineReference                  `json:"pipeline,omitempty"`
	Parameters       *map[string]*map[string]interface{} `json:"parameters,omitempty"`
	WaitOnCompletion *bool                               `json:"waitOnCompletion,omitempty"`
}

// ExecutionActivity is base class for all execution activities.
type ExecutionActivity struct {
	Name              *string                 `json:"name,omitempty"`
	Description       *string                 `json:"description,omitempty"`
	DependsOn         *[]ActivityDependency   `json:"dependsOn,omitempty"`
	Type              TypeActivity            `json:"type,omitempty"`
	LinkedServiceName *LinkedServiceReference `json:"linkedServiceName,omitempty"`
	Policy            *ActivityPolicy         `json:"policy,omitempty"`
}

// MarshalJSON is the custom marshaler for ExecutionActivity.
func (ea ExecutionActivity) MarshalJSON() ([]byte, error) {
	ea.Type = TypeExecution
	type Alias ExecutionActivity
	return json.Marshal(&struct {
		Alias
	}{
		Alias: (Alias)(ea),
	})
}

// AsDataLakeAnalyticsUSQLActivity is the Activity implementation for ExecutionActivity.
func (ea ExecutionActivity) AsDataLakeAnalyticsUSQLActivity() (*DataLakeAnalyticsUSQLActivity, bool) {
	return nil, false
}

// AsAzureMLUpdateResourceActivity is the Activity implementation for ExecutionActivity.
func (ea ExecutionActivity) AsAzureMLUpdateResourceActivity() (*AzureMLUpdateResourceActivity, bool) {
	return nil, false
}

// AsAzureMLBatchExecutionActivity is the Activity implementation for ExecutionActivity.
func (ea ExecutionActivity) AsAzureMLBatchExecutionActivity() (*AzureMLBatchExecutionActivity, bool) {
	return nil, false
}

// AsGetMetadataActivity is the Activity implementation for ExecutionActivity.
func (ea ExecutionActivity) AsGetMetadataActivity() (*GetMetadataActivity, bool) {
	return nil, false
}

// AsWebActivity is the Activity implementation for ExecutionActivity.
func (ea ExecutionActivity) AsWebActivity() (*WebActivity, bool) {
	return nil, false
}

// AsLookupActivity is the Activity implementation for ExecutionActivity.
func (ea ExecutionActivity) AsLookupActivity() (*LookupActivity, bool) {
	return nil, false
}

// AsSQLServerStoredProcedureActivity is the Activity implementation for ExecutionActivity.
func (ea ExecutionActivity) AsSQLServerStoredProcedureActivity() (*SQLServerStoredProcedureActivity, bool) {
	return nil, false
}

// AsCustomActivity is the Activity implementation for ExecutionActivity.
func (ea ExecutionActivity) AsCustomActivity() (*CustomActivity, bool) {
	return nil, false
}

// AsHDInsightSparkActivity is the Activity implementation for ExecutionActivity.
func (ea ExecutionActivity) AsHDInsightSparkActivity() (*HDInsightSparkActivity, bool) {
	return nil, false
}

// AsHDInsightStreamingActivity is the Activity implementation for ExecutionActivity.
func (ea ExecutionActivity) AsHDInsightStreamingActivity() (*HDInsightStreamingActivity, bool) {
	return nil, false
}

// AsHDInsightMapReduceActivity is the Activity implementation for ExecutionActivity.
func (ea ExecutionActivity) AsHDInsightMapReduceActivity() (*HDInsightMapReduceActivity, bool) {
	return nil, false
}

// AsHDInsightPigActivity is the Activity implementation for ExecutionActivity.
func (ea ExecutionActivity) AsHDInsightPigActivity() (*HDInsightPigActivity, bool) {
	return nil, false
}

// AsHDInsightHiveActivity is the Activity implementation for ExecutionActivity.
func (ea ExecutionActivity) AsHDInsightHiveActivity() (*HDInsightHiveActivity, bool) {
	return nil, false
}

// AsCopyActivity is the Activity implementation for ExecutionActivity.
func (ea ExecutionActivity) AsCopyActivity() (*CopyActivity, bool) {
	return nil, false
}

// AsExecutionActivity is the Activity implementation for ExecutionActivity.
func (ea ExecutionActivity) AsExecutionActivity() (*ExecutionActivity, bool) {
	return &ea, true
}

// AsUntilActivity is the Activity implementation for ExecutionActivity.
func (ea ExecutionActivity) AsUntilActivity() (*UntilActivity, bool) {
	return nil, false
}

// AsWaitActivity is the Activity implementation for ExecutionActivity.
func (ea ExecutionActivity) AsWaitActivity() (*WaitActivity, bool) {
	return nil, false
}

// AsForEachActivity is the Activity implementation for ExecutionActivity.
func (ea ExecutionActivity) AsForEachActivity() (*ForEachActivity, bool) {
	return nil, false
}

// AsIfConditionActivity is the Activity implementation for ExecutionActivity.
func (ea ExecutionActivity) AsIfConditionActivity() (*IfConditionActivity, bool) {
	return nil, false
}

// AsExecutePipelineActivity is the Activity implementation for ExecutionActivity.
func (ea ExecutionActivity) AsExecutePipelineActivity() (*ExecutePipelineActivity, bool) {
	return nil, false
}

// AsControlActivity is the Activity implementation for ExecutionActivity.
func (ea ExecutionActivity) AsControlActivity() (*ControlActivity, bool) {
	return nil, false
}

// Expression is azure Data Factory expression definition.
type Expression struct {
	Type  *string `json:"type,omitempty"`
	Value *string `json:"value,omitempty"`
}

// Factory is factory resource type.
type Factory struct {
	autorest.Response  `json:"-"`
	ID                 *string             `json:"id,omitempty"`
	Name               *string             `json:"name,omitempty"`
	Type               *string             `json:"type,omitempty"`
	Location           *string             `json:"location,omitempty"`
	Tags               *map[string]*string `json:"tags,omitempty"`
	Identity           *FactoryIdentity    `json:"identity,omitempty"`
	*FactoryProperties `json:"properties,omitempty"`
}

// FactoryIdentity is identity properties of the factory resource.
type FactoryIdentity struct {
	Type        *string    `json:"type,omitempty"`
	PrincipalID *uuid.UUID `json:"principalId,omitempty"`
	TenantID    *uuid.UUID `json:"tenantId,omitempty"`
}

// FactoryListResponse is a list of factory resources.
type FactoryListResponse struct {
	autorest.Response `json:"-"`
	Value             *[]Factory `json:"value,omitempty"`
	NextLink          *string    `json:"nextLink,omitempty"`
}

// FactoryListResponsePreparer prepares a request to retrieve the next set of results. It returns
// nil if no more results exist.
func (client FactoryListResponse) FactoryListResponsePreparer() (*http.Request, error) {
	if client.NextLink == nil || len(to.String(client.NextLink)) <= 0 {
		return nil, nil
	}
	return autorest.Prepare(&http.Request{},
		autorest.AsJSON(),
		autorest.AsGet(),
		autorest.WithBaseURL(to.String(client.NextLink)))
}

// FactoryProperties is factory resource properties.
type FactoryProperties struct {
	ProvisioningState *string    `json:"provisioningState,omitempty"`
	CreateTime        *date.Time `json:"createTime,omitempty"`
	Version           *string    `json:"version,omitempty"`
}

// FactoryUpdateParameters is parameters for updating a factory resource.
type FactoryUpdateParameters struct {
	Tags     *map[string]*string `json:"tags,omitempty"`
	Identity *FactoryIdentity    `json:"identity,omitempty"`
}

// FileServerLinkedService is file system linked service.
type FileServerLinkedService struct {
	ConnectVia                             *IntegrationRuntimeReference `json:"connectVia,omitempty"`
	Description                            *string                      `json:"description,omitempty"`
	Type                                   TypeLinkedService            `json:"type,omitempty"`
	*FileServerLinkedServiceTypeProperties `json:"typeProperties,omitempty"`
}

// MarshalJSON is the custom marshaler for FileServerLinkedService.
func (fsls FileServerLinkedService) MarshalJSON() ([]byte, error) {
	fsls.Type = TypeFileServer
	type Alias FileServerLinkedService
	return json.Marshal(&struct {
		Alias
	}{
		Alias: (Alias)(fsls),
	})
}

// AsAzureDataLakeAnalyticsLinkedService is the LinkedService implementation for FileServerLinkedService.
func (fsls FileServerLinkedService) AsAzureDataLakeAnalyticsLinkedService() (*AzureDataLakeAnalyticsLinkedService, bool) {
	return nil, false
}

// AsHDInsightOnDemandLinkedService is the LinkedService implementation for FileServerLinkedService.
func (fsls FileServerLinkedService) AsHDInsightOnDemandLinkedService() (*HDInsightOnDemandLinkedService, bool) {
	return nil, false
}

// AsSapHanaLinkedService is the LinkedService implementation for FileServerLinkedService.
func (fsls FileServerLinkedService) AsSapHanaLinkedService() (*SapHanaLinkedService, bool) {
	return nil, false
}

// AsSapBWLinkedService is the LinkedService implementation for FileServerLinkedService.
func (fsls FileServerLinkedService) AsSapBWLinkedService() (*SapBWLinkedService, bool) {
	return nil, false
}

// AsSftpServerLinkedService is the LinkedService implementation for FileServerLinkedService.
func (fsls FileServerLinkedService) AsSftpServerLinkedService() (*SftpServerLinkedService, bool) {
	return nil, false
}

// AsFtpServerLinkedService is the LinkedService implementation for FileServerLinkedService.
func (fsls FileServerLinkedService) AsFtpServerLinkedService() (*FtpServerLinkedService, bool) {
	return nil, false
}

// AsHTTPLinkedService is the LinkedService implementation for FileServerLinkedService.
func (fsls FileServerLinkedService) AsHTTPLinkedService() (*HTTPLinkedService, bool) {
	return nil, false
}

// AsAzureSearchLinkedService is the LinkedService implementation for FileServerLinkedService.
func (fsls FileServerLinkedService) AsAzureSearchLinkedService() (*AzureSearchLinkedService, bool) {
	return nil, false
}

// AsCustomDataSourceLinkedService is the LinkedService implementation for FileServerLinkedService.
func (fsls FileServerLinkedService) AsCustomDataSourceLinkedService() (*CustomDataSourceLinkedService, bool) {
	return nil, false
}

// AsAmazonRedshiftLinkedService is the LinkedService implementation for FileServerLinkedService.
func (fsls FileServerLinkedService) AsAmazonRedshiftLinkedService() (*AmazonRedshiftLinkedService, bool) {
	return nil, false
}

// AsAmazonS3LinkedService is the LinkedService implementation for FileServerLinkedService.
func (fsls FileServerLinkedService) AsAmazonS3LinkedService() (*AmazonS3LinkedService, bool) {
	return nil, false
}

// AsSalesforceLinkedService is the LinkedService implementation for FileServerLinkedService.
func (fsls FileServerLinkedService) AsSalesforceLinkedService() (*SalesforceLinkedService, bool) {
	return nil, false
}

// AsAzureDataLakeStoreLinkedService is the LinkedService implementation for FileServerLinkedService.
func (fsls FileServerLinkedService) AsAzureDataLakeStoreLinkedService() (*AzureDataLakeStoreLinkedService, bool) {
	return nil, false
}

// AsMongoDbLinkedService is the LinkedService implementation for FileServerLinkedService.
func (fsls FileServerLinkedService) AsMongoDbLinkedService() (*MongoDbLinkedService, bool) {
	return nil, false
}

// AsCassandraLinkedService is the LinkedService implementation for FileServerLinkedService.
func (fsls FileServerLinkedService) AsCassandraLinkedService() (*CassandraLinkedService, bool) {
	return nil, false
}

// AsWebLinkedService is the LinkedService implementation for FileServerLinkedService.
func (fsls FileServerLinkedService) AsWebLinkedService() (*WebLinkedService, bool) {
	return nil, false
}

// AsODataLinkedService is the LinkedService implementation for FileServerLinkedService.
func (fsls FileServerLinkedService) AsODataLinkedService() (*ODataLinkedService, bool) {
	return nil, false
}

// AsHdfsLinkedService is the LinkedService implementation for FileServerLinkedService.
func (fsls FileServerLinkedService) AsHdfsLinkedService() (*HdfsLinkedService, bool) {
	return nil, false
}

// AsOdbcLinkedService is the LinkedService implementation for FileServerLinkedService.
func (fsls FileServerLinkedService) AsOdbcLinkedService() (*OdbcLinkedService, bool) {
	return nil, false
}

// AsAzureMLLinkedService is the LinkedService implementation for FileServerLinkedService.
func (fsls FileServerLinkedService) AsAzureMLLinkedService() (*AzureMLLinkedService, bool) {
	return nil, false
}

// AsTeradataLinkedService is the LinkedService implementation for FileServerLinkedService.
func (fsls FileServerLinkedService) AsTeradataLinkedService() (*TeradataLinkedService, bool) {
	return nil, false
}

// AsDb2LinkedService is the LinkedService implementation for FileServerLinkedService.
func (fsls FileServerLinkedService) AsDb2LinkedService() (*Db2LinkedService, bool) {
	return nil, false
}

// AsSybaseLinkedService is the LinkedService implementation for FileServerLinkedService.
func (fsls FileServerLinkedService) AsSybaseLinkedService() (*SybaseLinkedService, bool) {
	return nil, false
}

// AsPostgreSQLLinkedService is the LinkedService implementation for FileServerLinkedService.
func (fsls FileServerLinkedService) AsPostgreSQLLinkedService() (*PostgreSQLLinkedService, bool) {
	return nil, false
}

// AsMySQLLinkedService is the LinkedService implementation for FileServerLinkedService.
func (fsls FileServerLinkedService) AsMySQLLinkedService() (*MySQLLinkedService, bool) {
	return nil, false
}

// AsOracleLinkedService is the LinkedService implementation for FileServerLinkedService.
func (fsls FileServerLinkedService) AsOracleLinkedService() (*OracleLinkedService, bool) {
	return nil, false
}

// AsFileServerLinkedService is the LinkedService implementation for FileServerLinkedService.
func (fsls FileServerLinkedService) AsFileServerLinkedService() (*FileServerLinkedService, bool) {
	return &fsls, true
}

// AsHDInsightLinkedService is the LinkedService implementation for FileServerLinkedService.
func (fsls FileServerLinkedService) AsHDInsightLinkedService() (*HDInsightLinkedService, bool) {
	return nil, false
}

// AsDynamicsLinkedService is the LinkedService implementation for FileServerLinkedService.
func (fsls FileServerLinkedService) AsDynamicsLinkedService() (*DynamicsLinkedService, bool) {
	return nil, false
}

// AsCosmosDbLinkedService is the LinkedService implementation for FileServerLinkedService.
func (fsls FileServerLinkedService) AsCosmosDbLinkedService() (*CosmosDbLinkedService, bool) {
	return nil, false
}

// AsAzureKeyVaultLinkedService is the LinkedService implementation for FileServerLinkedService.
func (fsls FileServerLinkedService) AsAzureKeyVaultLinkedService() (*AzureKeyVaultLinkedService, bool) {
	return nil, false
}

// AsAzureBatchLinkedService is the LinkedService implementation for FileServerLinkedService.
func (fsls FileServerLinkedService) AsAzureBatchLinkedService() (*AzureBatchLinkedService, bool) {
	return nil, false
}

// AsAzureSQLDatabaseLinkedService is the LinkedService implementation for FileServerLinkedService.
func (fsls FileServerLinkedService) AsAzureSQLDatabaseLinkedService() (*AzureSQLDatabaseLinkedService, bool) {
	return nil, false
}

// AsSQLServerLinkedService is the LinkedService implementation for FileServerLinkedService.
func (fsls FileServerLinkedService) AsSQLServerLinkedService() (*SQLServerLinkedService, bool) {
	return nil, false
}

// AsAzureSQLDWLinkedService is the LinkedService implementation for FileServerLinkedService.
func (fsls FileServerLinkedService) AsAzureSQLDWLinkedService() (*AzureSQLDWLinkedService, bool) {
	return nil, false
}

// AsAzureStorageLinkedService is the LinkedService implementation for FileServerLinkedService.
func (fsls FileServerLinkedService) AsAzureStorageLinkedService() (*AzureStorageLinkedService, bool) {
	return nil, false
}

// FileServerLinkedServiceTypeProperties is file system linked service properties.
type FileServerLinkedServiceTypeProperties struct {
	Host                *map[string]interface{} `json:"host,omitempty"`
	UserID              *map[string]interface{} `json:"userId,omitempty"`
	Password            *SecureString           `json:"password,omitempty"`
	EncryptedCredential *map[string]interface{} `json:"encryptedCredential,omitempty"`
}

// FileShareDataset is an on-premises file system dataset.
type FileShareDataset struct {
	Description                     *string                             `json:"description,omitempty"`
	Structure                       *map[string]interface{}             `json:"structure,omitempty"`
	LinkedServiceName               *LinkedServiceReference             `json:"linkedServiceName,omitempty"`
	Parameters                      *map[string]*ParameterSpecification `json:"parameters,omitempty"`
	Type                            TypeDataset                         `json:"type,omitempty"`
	*FileShareDatasetTypeProperties `json:"typeProperties,omitempty"`
}

// MarshalJSON is the custom marshaler for FileShareDataset.
func (fsd FileShareDataset) MarshalJSON() ([]byte, error) {
	fsd.Type = TypeFileShare
	type Alias FileShareDataset
	return json.Marshal(&struct {
		Alias
	}{
		Alias: (Alias)(fsd),
	})
}

// AsHTTPDataset is the Dataset implementation for FileShareDataset.
func (fsd FileShareDataset) AsHTTPDataset() (*HTTPDataset, bool) {
	return nil, false
}

// AsAzureSearchIndexDataset is the Dataset implementation for FileShareDataset.
func (fsd FileShareDataset) AsAzureSearchIndexDataset() (*AzureSearchIndexDataset, bool) {
	return nil, false
}

// AsWebTableDataset is the Dataset implementation for FileShareDataset.
func (fsd FileShareDataset) AsWebTableDataset() (*WebTableDataset, bool) {
	return nil, false
}

// AsSQLServerTableDataset is the Dataset implementation for FileShareDataset.
func (fsd FileShareDataset) AsSQLServerTableDataset() (*SQLServerTableDataset, bool) {
	return nil, false
}

// AsRelationalTableDataset is the Dataset implementation for FileShareDataset.
func (fsd FileShareDataset) AsRelationalTableDataset() (*RelationalTableDataset, bool) {
	return nil, false
}

// AsOracleTableDataset is the Dataset implementation for FileShareDataset.
func (fsd FileShareDataset) AsOracleTableDataset() (*OracleTableDataset, bool) {
	return nil, false
}

// AsODataResourceDataset is the Dataset implementation for FileShareDataset.
func (fsd FileShareDataset) AsODataResourceDataset() (*ODataResourceDataset, bool) {
	return nil, false
}

// AsMongoDbCollectionDataset is the Dataset implementation for FileShareDataset.
func (fsd FileShareDataset) AsMongoDbCollectionDataset() (*MongoDbCollectionDataset, bool) {
	return nil, false
}

// AsFileShareDataset is the Dataset implementation for FileShareDataset.
func (fsd FileShareDataset) AsFileShareDataset() (*FileShareDataset, bool) {
	return &fsd, true
}

// AsAzureDataLakeStoreDataset is the Dataset implementation for FileShareDataset.
func (fsd FileShareDataset) AsAzureDataLakeStoreDataset() (*AzureDataLakeStoreDataset, bool) {
	return nil, false
}

// AsDynamicsEntityDataset is the Dataset implementation for FileShareDataset.
func (fsd FileShareDataset) AsDynamicsEntityDataset() (*DynamicsEntityDataset, bool) {
	return nil, false
}

// AsDocumentDbCollectionDataset is the Dataset implementation for FileShareDataset.
func (fsd FileShareDataset) AsDocumentDbCollectionDataset() (*DocumentDbCollectionDataset, bool) {
	return nil, false
}

// AsCustomDataset is the Dataset implementation for FileShareDataset.
func (fsd FileShareDataset) AsCustomDataset() (*CustomDataset, bool) {
	return nil, false
}

// AsCassandraTableDataset is the Dataset implementation for FileShareDataset.
func (fsd FileShareDataset) AsCassandraTableDataset() (*CassandraTableDataset, bool) {
	return nil, false
}

// AsAzureSQLDWTableDataset is the Dataset implementation for FileShareDataset.
func (fsd FileShareDataset) AsAzureSQLDWTableDataset() (*AzureSQLDWTableDataset, bool) {
	return nil, false
}

// AsAzureSQLTableDataset is the Dataset implementation for FileShareDataset.
func (fsd FileShareDataset) AsAzureSQLTableDataset() (*AzureSQLTableDataset, bool) {
	return nil, false
}

// AsAzureTableDataset is the Dataset implementation for FileShareDataset.
func (fsd FileShareDataset) AsAzureTableDataset() (*AzureTableDataset, bool) {
	return nil, false
}

// AsAzureBlobDataset is the Dataset implementation for FileShareDataset.
func (fsd FileShareDataset) AsAzureBlobDataset() (*AzureBlobDataset, bool) {
	return nil, false
}

// AsAmazonS3Dataset is the Dataset implementation for FileShareDataset.
func (fsd FileShareDataset) AsAmazonS3Dataset() (*AmazonS3Dataset, bool) {
	return nil, false
}

// FileShareDatasetTypeProperties is on-premises file system dataset properties.
type FileShareDatasetTypeProperties struct {
	FolderPath  *map[string]interface{} `json:"folderPath,omitempty"`
	FileName    *map[string]interface{} `json:"fileName,omitempty"`
	Format      DatasetStorageFormat    `json:"format,omitempty"`
	FileFilter  *map[string]interface{} `json:"fileFilter,omitempty"`
	Compression DatasetCompression      `json:"compression,omitempty"`
}

// UnmarshalJSON is the custom unmarshaler for FileShareDatasetTypeProperties struct.
func (fsdtp *FileShareDatasetTypeProperties) UnmarshalJSON(body []byte) error {
	var m map[string]*json.RawMessage
	err := json.Unmarshal(body, &m)
	if err != nil {
		return err
	}
	var v *json.RawMessage

	v = m["folderPath"]
	if v != nil {
		var folderPath map[string]interface{}
		err = json.Unmarshal(*m["folderPath"], &folderPath)
		if err != nil {
			return err
		}
		fsdtp.FolderPath = &folderPath
	}

	v = m["fileName"]
	if v != nil {
		var fileName map[string]interface{}
		err = json.Unmarshal(*m["fileName"], &fileName)
		if err != nil {
			return err
		}
		fsdtp.FileName = &fileName
	}

	v = m["format"]
	if v != nil {
		formatVar, err := unmarshalDatasetStorageFormat(*m["format"])
		if err != nil {
			return err
		}
		fsdtp.Format = formatVar
	}

	v = m["fileFilter"]
	if v != nil {
		var fileFilter map[string]interface{}
		err = json.Unmarshal(*m["fileFilter"], &fileFilter)
		if err != nil {
			return err
		}
		fsdtp.FileFilter = &fileFilter
	}

	v = m["compression"]
	if v != nil {
		compression, err := unmarshalDatasetCompression(*m["compression"])
		if err != nil {
			return err
		}
		fsdtp.Compression = compression
	}

	return nil
}

// FileSystemSink is a copy activity file system sink.
type FileSystemSink struct {
	WriteBatchSize    *map[string]interface{} `json:"writeBatchSize,omitempty"`
	WriteBatchTimeout *map[string]interface{} `json:"writeBatchTimeout,omitempty"`
	SinkRetryCount    *map[string]interface{} `json:"sinkRetryCount,omitempty"`
	SinkRetryWait     *map[string]interface{} `json:"sinkRetryWait,omitempty"`
	Type              TypeCopySink            `json:"type,omitempty"`
	CopyBehavior      CopyBehaviorType        `json:"copyBehavior,omitempty"`
}

// MarshalJSON is the custom marshaler for FileSystemSink.
func (fss FileSystemSink) MarshalJSON() ([]byte, error) {
	fss.Type = TypeFileSystemSink
	type Alias FileSystemSink
	return json.Marshal(&struct {
		Alias
	}{
		Alias: (Alias)(fss),
	})
}

// AsOdbcSink is the CopySink implementation for FileSystemSink.
func (fss FileSystemSink) AsOdbcSink() (*OdbcSink, bool) {
	return nil, false
}

// AsAzureSearchIndexSink is the CopySink implementation for FileSystemSink.
func (fss FileSystemSink) AsAzureSearchIndexSink() (*AzureSearchIndexSink, bool) {
	return nil, false
}

// AsAzureDataLakeStoreSink is the CopySink implementation for FileSystemSink.
func (fss FileSystemSink) AsAzureDataLakeStoreSink() (*AzureDataLakeStoreSink, bool) {
	return nil, false
}

// AsOracleSink is the CopySink implementation for FileSystemSink.
func (fss FileSystemSink) AsOracleSink() (*OracleSink, bool) {
	return nil, false
}

// AsSQLDWSink is the CopySink implementation for FileSystemSink.
func (fss FileSystemSink) AsSQLDWSink() (*SQLDWSink, bool) {
	return nil, false
}

// AsSQLSink is the CopySink implementation for FileSystemSink.
func (fss FileSystemSink) AsSQLSink() (*SQLSink, bool) {
	return nil, false
}

// AsDocumentDbCollectionSink is the CopySink implementation for FileSystemSink.
func (fss FileSystemSink) AsDocumentDbCollectionSink() (*DocumentDbCollectionSink, bool) {
	return nil, false
}

// AsFileSystemSink is the CopySink implementation for FileSystemSink.
func (fss FileSystemSink) AsFileSystemSink() (*FileSystemSink, bool) {
	return &fss, true
}

// AsBlobSink is the CopySink implementation for FileSystemSink.
func (fss FileSystemSink) AsBlobSink() (*BlobSink, bool) {
	return nil, false
}

// AsAzureTableSink is the CopySink implementation for FileSystemSink.
func (fss FileSystemSink) AsAzureTableSink() (*AzureTableSink, bool) {
	return nil, false
}

// AsAzureQueueSink is the CopySink implementation for FileSystemSink.
func (fss FileSystemSink) AsAzureQueueSink() (*AzureQueueSink, bool) {
	return nil, false
}

// FileSystemSource is a copy activity file system source.
type FileSystemSource struct {
	SourceRetryCount *map[string]interface{} `json:"sourceRetryCount,omitempty"`
	SourceRetryWait  *map[string]interface{} `json:"sourceRetryWait,omitempty"`
	Type             TypeCopySource          `json:"type,omitempty"`
	Recursive        *map[string]interface{} `json:"recursive,omitempty"`
}

// MarshalJSON is the custom marshaler for FileSystemSource.
func (fss FileSystemSource) MarshalJSON() ([]byte, error) {
	fss.Type = TypeFileSystemSource
	type Alias FileSystemSource
	return json.Marshal(&struct {
		Alias
	}{
		Alias: (Alias)(fss),
	})
}

// AsAmazonRedshiftSource is the CopySource implementation for FileSystemSource.
func (fss FileSystemSource) AsAmazonRedshiftSource() (*AmazonRedshiftSource, bool) {
	return nil, false
}

// AsHTTPSource is the CopySource implementation for FileSystemSource.
func (fss FileSystemSource) AsHTTPSource() (*HTTPSource, bool) {
	return nil, false
}

// AsAzureDataLakeStoreSource is the CopySource implementation for FileSystemSource.
func (fss FileSystemSource) AsAzureDataLakeStoreSource() (*AzureDataLakeStoreSource, bool) {
	return nil, false
}

// AsMongoDbSource is the CopySource implementation for FileSystemSource.
func (fss FileSystemSource) AsMongoDbSource() (*MongoDbSource, bool) {
	return nil, false
}

// AsCassandraSource is the CopySource implementation for FileSystemSource.
func (fss FileSystemSource) AsCassandraSource() (*CassandraSource, bool) {
	return nil, false
}

// AsWebSource is the CopySource implementation for FileSystemSource.
func (fss FileSystemSource) AsWebSource() (*WebSource, bool) {
	return nil, false
}

// AsOracleSource is the CopySource implementation for FileSystemSource.
func (fss FileSystemSource) AsOracleSource() (*OracleSource, bool) {
	return nil, false
}

// AsHdfsSource is the CopySource implementation for FileSystemSource.
func (fss FileSystemSource) AsHdfsSource() (*HdfsSource, bool) {
	return nil, false
}

// AsFileSystemSource is the CopySource implementation for FileSystemSource.
func (fss FileSystemSource) AsFileSystemSource() (*FileSystemSource, bool) {
	return &fss, true
}

// AsSQLDWSource is the CopySource implementation for FileSystemSource.
func (fss FileSystemSource) AsSQLDWSource() (*SQLDWSource, bool) {
	return nil, false
}

// AsSQLSource is the CopySource implementation for FileSystemSource.
func (fss FileSystemSource) AsSQLSource() (*SQLSource, bool) {
	return nil, false
}

// AsRelationalSource is the CopySource implementation for FileSystemSource.
func (fss FileSystemSource) AsRelationalSource() (*RelationalSource, bool) {
	return nil, false
}

// AsDynamicsSource is the CopySource implementation for FileSystemSource.
func (fss FileSystemSource) AsDynamicsSource() (*DynamicsSource, bool) {
	return nil, false
}

// AsDocumentDbCollectionSource is the CopySource implementation for FileSystemSource.
func (fss FileSystemSource) AsDocumentDbCollectionSource() (*DocumentDbCollectionSource, bool) {
	return nil, false
}

// AsBlobSource is the CopySource implementation for FileSystemSource.
func (fss FileSystemSource) AsBlobSource() (*BlobSource, bool) {
	return nil, false
}

// AsAzureTableSource is the CopySource implementation for FileSystemSource.
func (fss FileSystemSource) AsAzureTableSource() (*AzureTableSource, bool) {
	return nil, false
}

// ForEachActivity is this activity is used for iterating over a collection and execute given activities.
type ForEachActivity struct {
	Name                           *string               `json:"name,omitempty"`
	Description                    *string               `json:"description,omitempty"`
	DependsOn                      *[]ActivityDependency `json:"dependsOn,omitempty"`
	Type                           TypeActivity          `json:"type,omitempty"`
	*ForEachActivityTypeProperties `json:"typeProperties,omitempty"`
}

// MarshalJSON is the custom marshaler for ForEachActivity.
func (fea ForEachActivity) MarshalJSON() ([]byte, error) {
	fea.Type = TypeForEach
	type Alias ForEachActivity
	return json.Marshal(&struct {
		Alias
	}{
		Alias: (Alias)(fea),
	})
}

// AsUntilActivity is the ControlActivity implementation for ForEachActivity.
func (fea ForEachActivity) AsUntilActivity() (*UntilActivity, bool) {
	return nil, false
}

// AsWaitActivity is the ControlActivity implementation for ForEachActivity.
func (fea ForEachActivity) AsWaitActivity() (*WaitActivity, bool) {
	return nil, false
}

// AsForEachActivity is the ControlActivity implementation for ForEachActivity.
func (fea ForEachActivity) AsForEachActivity() (*ForEachActivity, bool) {
	return &fea, true
}

// AsIfConditionActivity is the ControlActivity implementation for ForEachActivity.
func (fea ForEachActivity) AsIfConditionActivity() (*IfConditionActivity, bool) {
	return nil, false
}

// AsExecutePipelineActivity is the ControlActivity implementation for ForEachActivity.
func (fea ForEachActivity) AsExecutePipelineActivity() (*ExecutePipelineActivity, bool) {
	return nil, false
}

// AsDataLakeAnalyticsUSQLActivity is the ControlActivity implementation for ForEachActivity.
func (fea ForEachActivity) AsDataLakeAnalyticsUSQLActivity() (*DataLakeAnalyticsUSQLActivity, bool) {
	return nil, false
}

// AsAzureMLUpdateResourceActivity is the ControlActivity implementation for ForEachActivity.
func (fea ForEachActivity) AsAzureMLUpdateResourceActivity() (*AzureMLUpdateResourceActivity, bool) {
	return nil, false
}

// AsAzureMLBatchExecutionActivity is the ControlActivity implementation for ForEachActivity.
func (fea ForEachActivity) AsAzureMLBatchExecutionActivity() (*AzureMLBatchExecutionActivity, bool) {
	return nil, false
}

// AsGetMetadataActivity is the ControlActivity implementation for ForEachActivity.
func (fea ForEachActivity) AsGetMetadataActivity() (*GetMetadataActivity, bool) {
	return nil, false
}

// AsWebActivity is the ControlActivity implementation for ForEachActivity.
func (fea ForEachActivity) AsWebActivity() (*WebActivity, bool) {
	return nil, false
}

// AsLookupActivity is the ControlActivity implementation for ForEachActivity.
func (fea ForEachActivity) AsLookupActivity() (*LookupActivity, bool) {
	return nil, false
}

// AsSQLServerStoredProcedureActivity is the ControlActivity implementation for ForEachActivity.
func (fea ForEachActivity) AsSQLServerStoredProcedureActivity() (*SQLServerStoredProcedureActivity, bool) {
	return nil, false
}

// AsCustomActivity is the ControlActivity implementation for ForEachActivity.
func (fea ForEachActivity) AsCustomActivity() (*CustomActivity, bool) {
	return nil, false
}

// AsHDInsightSparkActivity is the ControlActivity implementation for ForEachActivity.
func (fea ForEachActivity) AsHDInsightSparkActivity() (*HDInsightSparkActivity, bool) {
	return nil, false
}

// AsHDInsightStreamingActivity is the ControlActivity implementation for ForEachActivity.
func (fea ForEachActivity) AsHDInsightStreamingActivity() (*HDInsightStreamingActivity, bool) {
	return nil, false
}

// AsHDInsightMapReduceActivity is the ControlActivity implementation for ForEachActivity.
func (fea ForEachActivity) AsHDInsightMapReduceActivity() (*HDInsightMapReduceActivity, bool) {
	return nil, false
}

// AsHDInsightPigActivity is the ControlActivity implementation for ForEachActivity.
func (fea ForEachActivity) AsHDInsightPigActivity() (*HDInsightPigActivity, bool) {
	return nil, false
}

// AsHDInsightHiveActivity is the ControlActivity implementation for ForEachActivity.
func (fea ForEachActivity) AsHDInsightHiveActivity() (*HDInsightHiveActivity, bool) {
	return nil, false
}

// AsCopyActivity is the ControlActivity implementation for ForEachActivity.
func (fea ForEachActivity) AsCopyActivity() (*CopyActivity, bool) {
	return nil, false
}

// AsExecutionActivity is the ControlActivity implementation for ForEachActivity.
func (fea ForEachActivity) AsExecutionActivity() (*ExecutionActivity, bool) {
	return nil, false
}

// AsControlActivity is the ControlActivity implementation for ForEachActivity.
func (fea ForEachActivity) AsControlActivity() (*ControlActivity, bool) {
	return nil, false
}

// ForEachActivityTypeProperties is forEach activity properties.
type ForEachActivityTypeProperties struct {
	IsSequential *bool       `json:"isSequential,omitempty"`
	Items        *Expression `json:"items,omitempty"`
	Activities   *[]Activity `json:"activities,omitempty"`
}

// UnmarshalJSON is the custom unmarshaler for ForEachActivityTypeProperties struct.
func (featp *ForEachActivityTypeProperties) UnmarshalJSON(body []byte) error {
	var m map[string]*json.RawMessage
	err := json.Unmarshal(body, &m)
	if err != nil {
		return err
	}
	var v *json.RawMessage

	v = m["isSequential"]
	if v != nil {
		var isSequential bool
		err = json.Unmarshal(*m["isSequential"], &isSequential)
		if err != nil {
			return err
		}
		featp.IsSequential = &isSequential
	}

	v = m["items"]
	if v != nil {
		var items Expression
		err = json.Unmarshal(*m["items"], &items)
		if err != nil {
			return err
		}
		featp.Items = &items
	}

	v = m["activities"]
	if v != nil {
		activities, err := unmarshalActivityArray(*m["activities"])
		if err != nil {
			return err
		}
		featp.Activities = &activities
	}

	return nil
}

// FtpServerLinkedService is a FTP server Linked Service.
type FtpServerLinkedService struct {
	ConnectVia                            *IntegrationRuntimeReference `json:"connectVia,omitempty"`
	Description                           *string                      `json:"description,omitempty"`
	Type                                  TypeLinkedService            `json:"type,omitempty"`
	*FtpServerLinkedServiceTypeProperties `json:"typeProperties,omitempty"`
}

// MarshalJSON is the custom marshaler for FtpServerLinkedService.
func (fsls FtpServerLinkedService) MarshalJSON() ([]byte, error) {
	fsls.Type = TypeFtpServer
	type Alias FtpServerLinkedService
	return json.Marshal(&struct {
		Alias
	}{
		Alias: (Alias)(fsls),
	})
}

// AsAzureDataLakeAnalyticsLinkedService is the LinkedService implementation for FtpServerLinkedService.
func (fsls FtpServerLinkedService) AsAzureDataLakeAnalyticsLinkedService() (*AzureDataLakeAnalyticsLinkedService, bool) {
	return nil, false
}

// AsHDInsightOnDemandLinkedService is the LinkedService implementation for FtpServerLinkedService.
func (fsls FtpServerLinkedService) AsHDInsightOnDemandLinkedService() (*HDInsightOnDemandLinkedService, bool) {
	return nil, false
}

// AsSapHanaLinkedService is the LinkedService implementation for FtpServerLinkedService.
func (fsls FtpServerLinkedService) AsSapHanaLinkedService() (*SapHanaLinkedService, bool) {
	return nil, false
}

// AsSapBWLinkedService is the LinkedService implementation for FtpServerLinkedService.
func (fsls FtpServerLinkedService) AsSapBWLinkedService() (*SapBWLinkedService, bool) {
	return nil, false
}

// AsSftpServerLinkedService is the LinkedService implementation for FtpServerLinkedService.
func (fsls FtpServerLinkedService) AsSftpServerLinkedService() (*SftpServerLinkedService, bool) {
	return nil, false
}

// AsFtpServerLinkedService is the LinkedService implementation for FtpServerLinkedService.
func (fsls FtpServerLinkedService) AsFtpServerLinkedService() (*FtpServerLinkedService, bool) {
	return &fsls, true
}

// AsHTTPLinkedService is the LinkedService implementation for FtpServerLinkedService.
func (fsls FtpServerLinkedService) AsHTTPLinkedService() (*HTTPLinkedService, bool) {
	return nil, false
}

// AsAzureSearchLinkedService is the LinkedService implementation for FtpServerLinkedService.
func (fsls FtpServerLinkedService) AsAzureSearchLinkedService() (*AzureSearchLinkedService, bool) {
	return nil, false
}

// AsCustomDataSourceLinkedService is the LinkedService implementation for FtpServerLinkedService.
func (fsls FtpServerLinkedService) AsCustomDataSourceLinkedService() (*CustomDataSourceLinkedService, bool) {
	return nil, false
}

// AsAmazonRedshiftLinkedService is the LinkedService implementation for FtpServerLinkedService.
func (fsls FtpServerLinkedService) AsAmazonRedshiftLinkedService() (*AmazonRedshiftLinkedService, bool) {
	return nil, false
}

// AsAmazonS3LinkedService is the LinkedService implementation for FtpServerLinkedService.
func (fsls FtpServerLinkedService) AsAmazonS3LinkedService() (*AmazonS3LinkedService, bool) {
	return nil, false
}

// AsSalesforceLinkedService is the LinkedService implementation for FtpServerLinkedService.
func (fsls FtpServerLinkedService) AsSalesforceLinkedService() (*SalesforceLinkedService, bool) {
	return nil, false
}

// AsAzureDataLakeStoreLinkedService is the LinkedService implementation for FtpServerLinkedService.
func (fsls FtpServerLinkedService) AsAzureDataLakeStoreLinkedService() (*AzureDataLakeStoreLinkedService, bool) {
	return nil, false
}

// AsMongoDbLinkedService is the LinkedService implementation for FtpServerLinkedService.
func (fsls FtpServerLinkedService) AsMongoDbLinkedService() (*MongoDbLinkedService, bool) {
	return nil, false
}

// AsCassandraLinkedService is the LinkedService implementation for FtpServerLinkedService.
func (fsls FtpServerLinkedService) AsCassandraLinkedService() (*CassandraLinkedService, bool) {
	return nil, false
}

// AsWebLinkedService is the LinkedService implementation for FtpServerLinkedService.
func (fsls FtpServerLinkedService) AsWebLinkedService() (*WebLinkedService, bool) {
	return nil, false
}

// AsODataLinkedService is the LinkedService implementation for FtpServerLinkedService.
func (fsls FtpServerLinkedService) AsODataLinkedService() (*ODataLinkedService, bool) {
	return nil, false
}

// AsHdfsLinkedService is the LinkedService implementation for FtpServerLinkedService.
func (fsls FtpServerLinkedService) AsHdfsLinkedService() (*HdfsLinkedService, bool) {
	return nil, false
}

// AsOdbcLinkedService is the LinkedService implementation for FtpServerLinkedService.
func (fsls FtpServerLinkedService) AsOdbcLinkedService() (*OdbcLinkedService, bool) {
	return nil, false
}

// AsAzureMLLinkedService is the LinkedService implementation for FtpServerLinkedService.
func (fsls FtpServerLinkedService) AsAzureMLLinkedService() (*AzureMLLinkedService, bool) {
	return nil, false
}

// AsTeradataLinkedService is the LinkedService implementation for FtpServerLinkedService.
func (fsls FtpServerLinkedService) AsTeradataLinkedService() (*TeradataLinkedService, bool) {
	return nil, false
}

// AsDb2LinkedService is the LinkedService implementation for FtpServerLinkedService.
func (fsls FtpServerLinkedService) AsDb2LinkedService() (*Db2LinkedService, bool) {
	return nil, false
}

// AsSybaseLinkedService is the LinkedService implementation for FtpServerLinkedService.
func (fsls FtpServerLinkedService) AsSybaseLinkedService() (*SybaseLinkedService, bool) {
	return nil, false
}

// AsPostgreSQLLinkedService is the LinkedService implementation for FtpServerLinkedService.
func (fsls FtpServerLinkedService) AsPostgreSQLLinkedService() (*PostgreSQLLinkedService, bool) {
	return nil, false
}

// AsMySQLLinkedService is the LinkedService implementation for FtpServerLinkedService.
func (fsls FtpServerLinkedService) AsMySQLLinkedService() (*MySQLLinkedService, bool) {
	return nil, false
}

// AsOracleLinkedService is the LinkedService implementation for FtpServerLinkedService.
func (fsls FtpServerLinkedService) AsOracleLinkedService() (*OracleLinkedService, bool) {
	return nil, false
}

// AsFileServerLinkedService is the LinkedService implementation for FtpServerLinkedService.
func (fsls FtpServerLinkedService) AsFileServerLinkedService() (*FileServerLinkedService, bool) {
	return nil, false
}

// AsHDInsightLinkedService is the LinkedService implementation for FtpServerLinkedService.
func (fsls FtpServerLinkedService) AsHDInsightLinkedService() (*HDInsightLinkedService, bool) {
	return nil, false
}

// AsDynamicsLinkedService is the LinkedService implementation for FtpServerLinkedService.
func (fsls FtpServerLinkedService) AsDynamicsLinkedService() (*DynamicsLinkedService, bool) {
	return nil, false
}

// AsCosmosDbLinkedService is the LinkedService implementation for FtpServerLinkedService.
func (fsls FtpServerLinkedService) AsCosmosDbLinkedService() (*CosmosDbLinkedService, bool) {
	return nil, false
}

// AsAzureKeyVaultLinkedService is the LinkedService implementation for FtpServerLinkedService.
func (fsls FtpServerLinkedService) AsAzureKeyVaultLinkedService() (*AzureKeyVaultLinkedService, bool) {
	return nil, false
}

// AsAzureBatchLinkedService is the LinkedService implementation for FtpServerLinkedService.
func (fsls FtpServerLinkedService) AsAzureBatchLinkedService() (*AzureBatchLinkedService, bool) {
	return nil, false
}

// AsAzureSQLDatabaseLinkedService is the LinkedService implementation for FtpServerLinkedService.
func (fsls FtpServerLinkedService) AsAzureSQLDatabaseLinkedService() (*AzureSQLDatabaseLinkedService, bool) {
	return nil, false
}

// AsSQLServerLinkedService is the LinkedService implementation for FtpServerLinkedService.
func (fsls FtpServerLinkedService) AsSQLServerLinkedService() (*SQLServerLinkedService, bool) {
	return nil, false
}

// AsAzureSQLDWLinkedService is the LinkedService implementation for FtpServerLinkedService.
func (fsls FtpServerLinkedService) AsAzureSQLDWLinkedService() (*AzureSQLDWLinkedService, bool) {
	return nil, false
}

// AsAzureStorageLinkedService is the LinkedService implementation for FtpServerLinkedService.
func (fsls FtpServerLinkedService) AsAzureStorageLinkedService() (*AzureStorageLinkedService, bool) {
	return nil, false
}

// FtpServerLinkedServiceTypeProperties is properties specific to this linked service type.
type FtpServerLinkedServiceTypeProperties struct {
	Host                              *map[string]interface{} `json:"host,omitempty"`
	Port                              *map[string]interface{} `json:"port,omitempty"`
	AuthenticationType                FtpAuthenticationType   `json:"authenticationType,omitempty"`
	UserName                          *map[string]interface{} `json:"userName,omitempty"`
	Password                          *SecureString           `json:"password,omitempty"`
	EncryptedCredential               *map[string]interface{} `json:"encryptedCredential,omitempty"`
	EnableSsl                         *map[string]interface{} `json:"enableSsl,omitempty"`
	EnableServerCertificateValidation *map[string]interface{} `json:"enableServerCertificateValidation,omitempty"`
}

// GetMetadataActivity is activity to get metadata of dataset
type GetMetadataActivity struct {
	Name                               *string                 `json:"name,omitempty"`
	Description                        *string                 `json:"description,omitempty"`
	DependsOn                          *[]ActivityDependency   `json:"dependsOn,omitempty"`
	Type                               TypeActivity            `json:"type,omitempty"`
	LinkedServiceName                  *LinkedServiceReference `json:"linkedServiceName,omitempty"`
	Policy                             *ActivityPolicy         `json:"policy,omitempty"`
	*GetMetadataActivityTypeProperties `json:"typeProperties,omitempty"`
}

// MarshalJSON is the custom marshaler for GetMetadataActivity.
func (gma GetMetadataActivity) MarshalJSON() ([]byte, error) {
	gma.Type = TypeGetMetadata
	type Alias GetMetadataActivity
	return json.Marshal(&struct {
		Alias
	}{
		Alias: (Alias)(gma),
	})
}

// AsDataLakeAnalyticsUSQLActivity is the ExecutionActivity implementation for GetMetadataActivity.
func (gma GetMetadataActivity) AsDataLakeAnalyticsUSQLActivity() (*DataLakeAnalyticsUSQLActivity, bool) {
	return nil, false
}

// AsAzureMLUpdateResourceActivity is the ExecutionActivity implementation for GetMetadataActivity.
func (gma GetMetadataActivity) AsAzureMLUpdateResourceActivity() (*AzureMLUpdateResourceActivity, bool) {
	return nil, false
}

// AsAzureMLBatchExecutionActivity is the ExecutionActivity implementation for GetMetadataActivity.
func (gma GetMetadataActivity) AsAzureMLBatchExecutionActivity() (*AzureMLBatchExecutionActivity, bool) {
	return nil, false
}

// AsGetMetadataActivity is the ExecutionActivity implementation for GetMetadataActivity.
func (gma GetMetadataActivity) AsGetMetadataActivity() (*GetMetadataActivity, bool) {
	return &gma, true
}

// AsWebActivity is the ExecutionActivity implementation for GetMetadataActivity.
func (gma GetMetadataActivity) AsWebActivity() (*WebActivity, bool) {
	return nil, false
}

// AsLookupActivity is the ExecutionActivity implementation for GetMetadataActivity.
func (gma GetMetadataActivity) AsLookupActivity() (*LookupActivity, bool) {
	return nil, false
}

// AsSQLServerStoredProcedureActivity is the ExecutionActivity implementation for GetMetadataActivity.
func (gma GetMetadataActivity) AsSQLServerStoredProcedureActivity() (*SQLServerStoredProcedureActivity, bool) {
	return nil, false
}

// AsCustomActivity is the ExecutionActivity implementation for GetMetadataActivity.
func (gma GetMetadataActivity) AsCustomActivity() (*CustomActivity, bool) {
	return nil, false
}

// AsHDInsightSparkActivity is the ExecutionActivity implementation for GetMetadataActivity.
func (gma GetMetadataActivity) AsHDInsightSparkActivity() (*HDInsightSparkActivity, bool) {
	return nil, false
}

// AsHDInsightStreamingActivity is the ExecutionActivity implementation for GetMetadataActivity.
func (gma GetMetadataActivity) AsHDInsightStreamingActivity() (*HDInsightStreamingActivity, bool) {
	return nil, false
}

// AsHDInsightMapReduceActivity is the ExecutionActivity implementation for GetMetadataActivity.
func (gma GetMetadataActivity) AsHDInsightMapReduceActivity() (*HDInsightMapReduceActivity, bool) {
	return nil, false
}

// AsHDInsightPigActivity is the ExecutionActivity implementation for GetMetadataActivity.
func (gma GetMetadataActivity) AsHDInsightPigActivity() (*HDInsightPigActivity, bool) {
	return nil, false
}

// AsHDInsightHiveActivity is the ExecutionActivity implementation for GetMetadataActivity.
func (gma GetMetadataActivity) AsHDInsightHiveActivity() (*HDInsightHiveActivity, bool) {
	return nil, false
}

// AsCopyActivity is the ExecutionActivity implementation for GetMetadataActivity.
func (gma GetMetadataActivity) AsCopyActivity() (*CopyActivity, bool) {
	return nil, false
}

// AsExecutionActivity is the ExecutionActivity implementation for GetMetadataActivity.
func (gma GetMetadataActivity) AsExecutionActivity() (*ExecutionActivity, bool) {
	return nil, false
}

// AsUntilActivity is the ExecutionActivity implementation for GetMetadataActivity.
func (gma GetMetadataActivity) AsUntilActivity() (*UntilActivity, bool) {
	return nil, false
}

// AsWaitActivity is the ExecutionActivity implementation for GetMetadataActivity.
func (gma GetMetadataActivity) AsWaitActivity() (*WaitActivity, bool) {
	return nil, false
}

// AsForEachActivity is the ExecutionActivity implementation for GetMetadataActivity.
func (gma GetMetadataActivity) AsForEachActivity() (*ForEachActivity, bool) {
	return nil, false
}

// AsIfConditionActivity is the ExecutionActivity implementation for GetMetadataActivity.
func (gma GetMetadataActivity) AsIfConditionActivity() (*IfConditionActivity, bool) {
	return nil, false
}

// AsExecutePipelineActivity is the ExecutionActivity implementation for GetMetadataActivity.
func (gma GetMetadataActivity) AsExecutePipelineActivity() (*ExecutePipelineActivity, bool) {
	return nil, false
}

// AsControlActivity is the ExecutionActivity implementation for GetMetadataActivity.
func (gma GetMetadataActivity) AsControlActivity() (*ControlActivity, bool) {
	return nil, false
}

// GetMetadataActivityTypeProperties is getMetadata activity properties.
type GetMetadataActivityTypeProperties struct {
	Dataset   *DatasetReference         `json:"dataset,omitempty"`
	FieldList *[]map[string]interface{} `json:"fieldList,omitempty"`
}

// HdfsLinkedService is hadoop Distributed File System (HDFS) linked service.
type HdfsLinkedService struct {
	ConnectVia                       *IntegrationRuntimeReference `json:"connectVia,omitempty"`
	Description                      *string                      `json:"description,omitempty"`
	Type                             TypeLinkedService            `json:"type,omitempty"`
	*HdfsLinkedServiceTypeProperties `json:"typeProperties,omitempty"`
}

// MarshalJSON is the custom marshaler for HdfsLinkedService.
func (hls HdfsLinkedService) MarshalJSON() ([]byte, error) {
	hls.Type = TypeHdfs
	type Alias HdfsLinkedService
	return json.Marshal(&struct {
		Alias
	}{
		Alias: (Alias)(hls),
	})
}

// AsAzureDataLakeAnalyticsLinkedService is the LinkedService implementation for HdfsLinkedService.
func (hls HdfsLinkedService) AsAzureDataLakeAnalyticsLinkedService() (*AzureDataLakeAnalyticsLinkedService, bool) {
	return nil, false
}

// AsHDInsightOnDemandLinkedService is the LinkedService implementation for HdfsLinkedService.
func (hls HdfsLinkedService) AsHDInsightOnDemandLinkedService() (*HDInsightOnDemandLinkedService, bool) {
	return nil, false
}

// AsSapHanaLinkedService is the LinkedService implementation for HdfsLinkedService.
func (hls HdfsLinkedService) AsSapHanaLinkedService() (*SapHanaLinkedService, bool) {
	return nil, false
}

// AsSapBWLinkedService is the LinkedService implementation for HdfsLinkedService.
func (hls HdfsLinkedService) AsSapBWLinkedService() (*SapBWLinkedService, bool) {
	return nil, false
}

// AsSftpServerLinkedService is the LinkedService implementation for HdfsLinkedService.
func (hls HdfsLinkedService) AsSftpServerLinkedService() (*SftpServerLinkedService, bool) {
	return nil, false
}

// AsFtpServerLinkedService is the LinkedService implementation for HdfsLinkedService.
func (hls HdfsLinkedService) AsFtpServerLinkedService() (*FtpServerLinkedService, bool) {
	return nil, false
}

// AsHTTPLinkedService is the LinkedService implementation for HdfsLinkedService.
func (hls HdfsLinkedService) AsHTTPLinkedService() (*HTTPLinkedService, bool) {
	return nil, false
}

// AsAzureSearchLinkedService is the LinkedService implementation for HdfsLinkedService.
func (hls HdfsLinkedService) AsAzureSearchLinkedService() (*AzureSearchLinkedService, bool) {
	return nil, false
}

// AsCustomDataSourceLinkedService is the LinkedService implementation for HdfsLinkedService.
func (hls HdfsLinkedService) AsCustomDataSourceLinkedService() (*CustomDataSourceLinkedService, bool) {
	return nil, false
}

// AsAmazonRedshiftLinkedService is the LinkedService implementation for HdfsLinkedService.
func (hls HdfsLinkedService) AsAmazonRedshiftLinkedService() (*AmazonRedshiftLinkedService, bool) {
	return nil, false
}

// AsAmazonS3LinkedService is the LinkedService implementation for HdfsLinkedService.
func (hls HdfsLinkedService) AsAmazonS3LinkedService() (*AmazonS3LinkedService, bool) {
	return nil, false
}

// AsSalesforceLinkedService is the LinkedService implementation for HdfsLinkedService.
func (hls HdfsLinkedService) AsSalesforceLinkedService() (*SalesforceLinkedService, bool) {
	return nil, false
}

// AsAzureDataLakeStoreLinkedService is the LinkedService implementation for HdfsLinkedService.
func (hls HdfsLinkedService) AsAzureDataLakeStoreLinkedService() (*AzureDataLakeStoreLinkedService, bool) {
	return nil, false
}

// AsMongoDbLinkedService is the LinkedService implementation for HdfsLinkedService.
func (hls HdfsLinkedService) AsMongoDbLinkedService() (*MongoDbLinkedService, bool) {
	return nil, false
}

// AsCassandraLinkedService is the LinkedService implementation for HdfsLinkedService.
func (hls HdfsLinkedService) AsCassandraLinkedService() (*CassandraLinkedService, bool) {
	return nil, false
}

// AsWebLinkedService is the LinkedService implementation for HdfsLinkedService.
func (hls HdfsLinkedService) AsWebLinkedService() (*WebLinkedService, bool) {
	return nil, false
}

// AsODataLinkedService is the LinkedService implementation for HdfsLinkedService.
func (hls HdfsLinkedService) AsODataLinkedService() (*ODataLinkedService, bool) {
	return nil, false
}

// AsHdfsLinkedService is the LinkedService implementation for HdfsLinkedService.
func (hls HdfsLinkedService) AsHdfsLinkedService() (*HdfsLinkedService, bool) {
	return &hls, true
}

// AsOdbcLinkedService is the LinkedService implementation for HdfsLinkedService.
func (hls HdfsLinkedService) AsOdbcLinkedService() (*OdbcLinkedService, bool) {
	return nil, false
}

// AsAzureMLLinkedService is the LinkedService implementation for HdfsLinkedService.
func (hls HdfsLinkedService) AsAzureMLLinkedService() (*AzureMLLinkedService, bool) {
	return nil, false
}

// AsTeradataLinkedService is the LinkedService implementation for HdfsLinkedService.
func (hls HdfsLinkedService) AsTeradataLinkedService() (*TeradataLinkedService, bool) {
	return nil, false
}

// AsDb2LinkedService is the LinkedService implementation for HdfsLinkedService.
func (hls HdfsLinkedService) AsDb2LinkedService() (*Db2LinkedService, bool) {
	return nil, false
}

// AsSybaseLinkedService is the LinkedService implementation for HdfsLinkedService.
func (hls HdfsLinkedService) AsSybaseLinkedService() (*SybaseLinkedService, bool) {
	return nil, false
}

// AsPostgreSQLLinkedService is the LinkedService implementation for HdfsLinkedService.
func (hls HdfsLinkedService) AsPostgreSQLLinkedService() (*PostgreSQLLinkedService, bool) {
	return nil, false
}

// AsMySQLLinkedService is the LinkedService implementation for HdfsLinkedService.
func (hls HdfsLinkedService) AsMySQLLinkedService() (*MySQLLinkedService, bool) {
	return nil, false
}

// AsOracleLinkedService is the LinkedService implementation for HdfsLinkedService.
func (hls HdfsLinkedService) AsOracleLinkedService() (*OracleLinkedService, bool) {
	return nil, false
}

// AsFileServerLinkedService is the LinkedService implementation for HdfsLinkedService.
func (hls HdfsLinkedService) AsFileServerLinkedService() (*FileServerLinkedService, bool) {
	return nil, false
}

// AsHDInsightLinkedService is the LinkedService implementation for HdfsLinkedService.
func (hls HdfsLinkedService) AsHDInsightLinkedService() (*HDInsightLinkedService, bool) {
	return nil, false
}

// AsDynamicsLinkedService is the LinkedService implementation for HdfsLinkedService.
func (hls HdfsLinkedService) AsDynamicsLinkedService() (*DynamicsLinkedService, bool) {
	return nil, false
}

// AsCosmosDbLinkedService is the LinkedService implementation for HdfsLinkedService.
func (hls HdfsLinkedService) AsCosmosDbLinkedService() (*CosmosDbLinkedService, bool) {
	return nil, false
}

// AsAzureKeyVaultLinkedService is the LinkedService implementation for HdfsLinkedService.
func (hls HdfsLinkedService) AsAzureKeyVaultLinkedService() (*AzureKeyVaultLinkedService, bool) {
	return nil, false
}

// AsAzureBatchLinkedService is the LinkedService implementation for HdfsLinkedService.
func (hls HdfsLinkedService) AsAzureBatchLinkedService() (*AzureBatchLinkedService, bool) {
	return nil, false
}

// AsAzureSQLDatabaseLinkedService is the LinkedService implementation for HdfsLinkedService.
func (hls HdfsLinkedService) AsAzureSQLDatabaseLinkedService() (*AzureSQLDatabaseLinkedService, bool) {
	return nil, false
}

// AsSQLServerLinkedService is the LinkedService implementation for HdfsLinkedService.
func (hls HdfsLinkedService) AsSQLServerLinkedService() (*SQLServerLinkedService, bool) {
	return nil, false
}

// AsAzureSQLDWLinkedService is the LinkedService implementation for HdfsLinkedService.
func (hls HdfsLinkedService) AsAzureSQLDWLinkedService() (*AzureSQLDWLinkedService, bool) {
	return nil, false
}

// AsAzureStorageLinkedService is the LinkedService implementation for HdfsLinkedService.
func (hls HdfsLinkedService) AsAzureStorageLinkedService() (*AzureStorageLinkedService, bool) {
	return nil, false
}

// HdfsLinkedServiceTypeProperties is HDFS linked service properties.
type HdfsLinkedServiceTypeProperties struct {
	URL                 *map[string]interface{} `json:"url,omitempty"`
	AuthenticationType  *map[string]interface{} `json:"authenticationType,omitempty"`
	EncryptedCredential *map[string]interface{} `json:"encryptedCredential,omitempty"`
	UserName            *map[string]interface{} `json:"userName,omitempty"`
	Password            *SecureString           `json:"password,omitempty"`
}

// HdfsSource is a copy activity source for HDFS source.
type HdfsSource struct {
	SourceRetryCount *map[string]interface{} `json:"sourceRetryCount,omitempty"`
	SourceRetryWait  *map[string]interface{} `json:"sourceRetryWait,omitempty"`
	Type             TypeCopySource          `json:"type,omitempty"`
	Recursive        *map[string]interface{} `json:"recursive,omitempty"`
	DistcpSettings   *DistcpSettings         `json:"distcpSettings,omitempty"`
}

// MarshalJSON is the custom marshaler for HdfsSource.
func (hs HdfsSource) MarshalJSON() ([]byte, error) {
	hs.Type = TypeHdfsSource
	type Alias HdfsSource
	return json.Marshal(&struct {
		Alias
	}{
		Alias: (Alias)(hs),
	})
}

// AsAmazonRedshiftSource is the CopySource implementation for HdfsSource.
func (hs HdfsSource) AsAmazonRedshiftSource() (*AmazonRedshiftSource, bool) {
	return nil, false
}

// AsHTTPSource is the CopySource implementation for HdfsSource.
func (hs HdfsSource) AsHTTPSource() (*HTTPSource, bool) {
	return nil, false
}

// AsAzureDataLakeStoreSource is the CopySource implementation for HdfsSource.
func (hs HdfsSource) AsAzureDataLakeStoreSource() (*AzureDataLakeStoreSource, bool) {
	return nil, false
}

// AsMongoDbSource is the CopySource implementation for HdfsSource.
func (hs HdfsSource) AsMongoDbSource() (*MongoDbSource, bool) {
	return nil, false
}

// AsCassandraSource is the CopySource implementation for HdfsSource.
func (hs HdfsSource) AsCassandraSource() (*CassandraSource, bool) {
	return nil, false
}

// AsWebSource is the CopySource implementation for HdfsSource.
func (hs HdfsSource) AsWebSource() (*WebSource, bool) {
	return nil, false
}

// AsOracleSource is the CopySource implementation for HdfsSource.
func (hs HdfsSource) AsOracleSource() (*OracleSource, bool) {
	return nil, false
}

// AsHdfsSource is the CopySource implementation for HdfsSource.
func (hs HdfsSource) AsHdfsSource() (*HdfsSource, bool) {
	return &hs, true
}

// AsFileSystemSource is the CopySource implementation for HdfsSource.
func (hs HdfsSource) AsFileSystemSource() (*FileSystemSource, bool) {
	return nil, false
}

// AsSQLDWSource is the CopySource implementation for HdfsSource.
func (hs HdfsSource) AsSQLDWSource() (*SQLDWSource, bool) {
	return nil, false
}

// AsSQLSource is the CopySource implementation for HdfsSource.
func (hs HdfsSource) AsSQLSource() (*SQLSource, bool) {
	return nil, false
}

// AsRelationalSource is the CopySource implementation for HdfsSource.
func (hs HdfsSource) AsRelationalSource() (*RelationalSource, bool) {
	return nil, false
}

// AsDynamicsSource is the CopySource implementation for HdfsSource.
func (hs HdfsSource) AsDynamicsSource() (*DynamicsSource, bool) {
	return nil, false
}

// AsDocumentDbCollectionSource is the CopySource implementation for HdfsSource.
func (hs HdfsSource) AsDocumentDbCollectionSource() (*DocumentDbCollectionSource, bool) {
	return nil, false
}

// AsBlobSource is the CopySource implementation for HdfsSource.
func (hs HdfsSource) AsBlobSource() (*BlobSource, bool) {
	return nil, false
}

// AsAzureTableSource is the CopySource implementation for HdfsSource.
func (hs HdfsSource) AsAzureTableSource() (*AzureTableSource, bool) {
	return nil, false
}

// HDInsightHiveActivity is hDInsight Hive activity type.
type HDInsightHiveActivity struct {
	Name                                 *string                 `json:"name,omitempty"`
	Description                          *string                 `json:"description,omitempty"`
	DependsOn                            *[]ActivityDependency   `json:"dependsOn,omitempty"`
	Type                                 TypeActivity            `json:"type,omitempty"`
	LinkedServiceName                    *LinkedServiceReference `json:"linkedServiceName,omitempty"`
	Policy                               *ActivityPolicy         `json:"policy,omitempty"`
	*HDInsightHiveActivityTypeProperties `json:"typeProperties,omitempty"`
}

// MarshalJSON is the custom marshaler for HDInsightHiveActivity.
func (hiha HDInsightHiveActivity) MarshalJSON() ([]byte, error) {
	hiha.Type = TypeHDInsightHive
	type Alias HDInsightHiveActivity
	return json.Marshal(&struct {
		Alias
	}{
		Alias: (Alias)(hiha),
	})
}

// AsDataLakeAnalyticsUSQLActivity is the ExecutionActivity implementation for HDInsightHiveActivity.
func (hiha HDInsightHiveActivity) AsDataLakeAnalyticsUSQLActivity() (*DataLakeAnalyticsUSQLActivity, bool) {
	return nil, false
}

// AsAzureMLUpdateResourceActivity is the ExecutionActivity implementation for HDInsightHiveActivity.
func (hiha HDInsightHiveActivity) AsAzureMLUpdateResourceActivity() (*AzureMLUpdateResourceActivity, bool) {
	return nil, false
}

// AsAzureMLBatchExecutionActivity is the ExecutionActivity implementation for HDInsightHiveActivity.
func (hiha HDInsightHiveActivity) AsAzureMLBatchExecutionActivity() (*AzureMLBatchExecutionActivity, bool) {
	return nil, false
}

// AsGetMetadataActivity is the ExecutionActivity implementation for HDInsightHiveActivity.
func (hiha HDInsightHiveActivity) AsGetMetadataActivity() (*GetMetadataActivity, bool) {
	return nil, false
}

// AsWebActivity is the ExecutionActivity implementation for HDInsightHiveActivity.
func (hiha HDInsightHiveActivity) AsWebActivity() (*WebActivity, bool) {
	return nil, false
}

// AsLookupActivity is the ExecutionActivity implementation for HDInsightHiveActivity.
func (hiha HDInsightHiveActivity) AsLookupActivity() (*LookupActivity, bool) {
	return nil, false
}

// AsSQLServerStoredProcedureActivity is the ExecutionActivity implementation for HDInsightHiveActivity.
func (hiha HDInsightHiveActivity) AsSQLServerStoredProcedureActivity() (*SQLServerStoredProcedureActivity, bool) {
	return nil, false
}

// AsCustomActivity is the ExecutionActivity implementation for HDInsightHiveActivity.
func (hiha HDInsightHiveActivity) AsCustomActivity() (*CustomActivity, bool) {
	return nil, false
}

// AsHDInsightSparkActivity is the ExecutionActivity implementation for HDInsightHiveActivity.
func (hiha HDInsightHiveActivity) AsHDInsightSparkActivity() (*HDInsightSparkActivity, bool) {
	return nil, false
}

// AsHDInsightStreamingActivity is the ExecutionActivity implementation for HDInsightHiveActivity.
func (hiha HDInsightHiveActivity) AsHDInsightStreamingActivity() (*HDInsightStreamingActivity, bool) {
	return nil, false
}

// AsHDInsightMapReduceActivity is the ExecutionActivity implementation for HDInsightHiveActivity.
func (hiha HDInsightHiveActivity) AsHDInsightMapReduceActivity() (*HDInsightMapReduceActivity, bool) {
	return nil, false
}

// AsHDInsightPigActivity is the ExecutionActivity implementation for HDInsightHiveActivity.
func (hiha HDInsightHiveActivity) AsHDInsightPigActivity() (*HDInsightPigActivity, bool) {
	return nil, false
}

// AsHDInsightHiveActivity is the ExecutionActivity implementation for HDInsightHiveActivity.
func (hiha HDInsightHiveActivity) AsHDInsightHiveActivity() (*HDInsightHiveActivity, bool) {
	return &hiha, true
}

// AsCopyActivity is the ExecutionActivity implementation for HDInsightHiveActivity.
func (hiha HDInsightHiveActivity) AsCopyActivity() (*CopyActivity, bool) {
	return nil, false
}

// AsExecutionActivity is the ExecutionActivity implementation for HDInsightHiveActivity.
func (hiha HDInsightHiveActivity) AsExecutionActivity() (*ExecutionActivity, bool) {
	return nil, false
}

// AsUntilActivity is the ExecutionActivity implementation for HDInsightHiveActivity.
func (hiha HDInsightHiveActivity) AsUntilActivity() (*UntilActivity, bool) {
	return nil, false
}

// AsWaitActivity is the ExecutionActivity implementation for HDInsightHiveActivity.
func (hiha HDInsightHiveActivity) AsWaitActivity() (*WaitActivity, bool) {
	return nil, false
}

// AsForEachActivity is the ExecutionActivity implementation for HDInsightHiveActivity.
func (hiha HDInsightHiveActivity) AsForEachActivity() (*ForEachActivity, bool) {
	return nil, false
}

// AsIfConditionActivity is the ExecutionActivity implementation for HDInsightHiveActivity.
func (hiha HDInsightHiveActivity) AsIfConditionActivity() (*IfConditionActivity, bool) {
	return nil, false
}

// AsExecutePipelineActivity is the ExecutionActivity implementation for HDInsightHiveActivity.
func (hiha HDInsightHiveActivity) AsExecutePipelineActivity() (*ExecutePipelineActivity, bool) {
	return nil, false
}

// AsControlActivity is the ExecutionActivity implementation for HDInsightHiveActivity.
func (hiha HDInsightHiveActivity) AsControlActivity() (*ControlActivity, bool) {
	return nil, false
}

// HDInsightHiveActivityTypeProperties is hDInsight Hive activity properties.
type HDInsightHiveActivityTypeProperties struct {
	StorageLinkedServices *[]LinkedServiceReference           `json:"storageLinkedServices,omitempty"`
	Arguments             *[]map[string]interface{}           `json:"arguments,omitempty"`
	GetDebugInfo          HDInsightActivityDebugInfoOption    `json:"getDebugInfo,omitempty"`
	ScriptPath            *map[string]interface{}             `json:"scriptPath,omitempty"`
	ScriptLinkedService   *LinkedServiceReference             `json:"scriptLinkedService,omitempty"`
	Defines               *map[string]*map[string]interface{} `json:"defines,omitempty"`
}

// HDInsightLinkedService is hDInsight linked service.
type HDInsightLinkedService struct {
	ConnectVia                            *IntegrationRuntimeReference `json:"connectVia,omitempty"`
	Description                           *string                      `json:"description,omitempty"`
	Type                                  TypeLinkedService            `json:"type,omitempty"`
	*HDInsightLinkedServiceTypeProperties `json:"typeProperties,omitempty"`
}

// MarshalJSON is the custom marshaler for HDInsightLinkedService.
func (hils HDInsightLinkedService) MarshalJSON() ([]byte, error) {
	hils.Type = TypeHDInsight
	type Alias HDInsightLinkedService
	return json.Marshal(&struct {
		Alias
	}{
		Alias: (Alias)(hils),
	})
}

// AsAzureDataLakeAnalyticsLinkedService is the LinkedService implementation for HDInsightLinkedService.
func (hils HDInsightLinkedService) AsAzureDataLakeAnalyticsLinkedService() (*AzureDataLakeAnalyticsLinkedService, bool) {
	return nil, false
}

// AsHDInsightOnDemandLinkedService is the LinkedService implementation for HDInsightLinkedService.
func (hils HDInsightLinkedService) AsHDInsightOnDemandLinkedService() (*HDInsightOnDemandLinkedService, bool) {
	return nil, false
}

// AsSapHanaLinkedService is the LinkedService implementation for HDInsightLinkedService.
func (hils HDInsightLinkedService) AsSapHanaLinkedService() (*SapHanaLinkedService, bool) {
	return nil, false
}

// AsSapBWLinkedService is the LinkedService implementation for HDInsightLinkedService.
func (hils HDInsightLinkedService) AsSapBWLinkedService() (*SapBWLinkedService, bool) {
	return nil, false
}

// AsSftpServerLinkedService is the LinkedService implementation for HDInsightLinkedService.
func (hils HDInsightLinkedService) AsSftpServerLinkedService() (*SftpServerLinkedService, bool) {
	return nil, false
}

// AsFtpServerLinkedService is the LinkedService implementation for HDInsightLinkedService.
func (hils HDInsightLinkedService) AsFtpServerLinkedService() (*FtpServerLinkedService, bool) {
	return nil, false
}

// AsHTTPLinkedService is the LinkedService implementation for HDInsightLinkedService.
func (hils HDInsightLinkedService) AsHTTPLinkedService() (*HTTPLinkedService, bool) {
	return nil, false
}

// AsAzureSearchLinkedService is the LinkedService implementation for HDInsightLinkedService.
func (hils HDInsightLinkedService) AsAzureSearchLinkedService() (*AzureSearchLinkedService, bool) {
	return nil, false
}

// AsCustomDataSourceLinkedService is the LinkedService implementation for HDInsightLinkedService.
func (hils HDInsightLinkedService) AsCustomDataSourceLinkedService() (*CustomDataSourceLinkedService, bool) {
	return nil, false
}

// AsAmazonRedshiftLinkedService is the LinkedService implementation for HDInsightLinkedService.
func (hils HDInsightLinkedService) AsAmazonRedshiftLinkedService() (*AmazonRedshiftLinkedService, bool) {
	return nil, false
}

// AsAmazonS3LinkedService is the LinkedService implementation for HDInsightLinkedService.
func (hils HDInsightLinkedService) AsAmazonS3LinkedService() (*AmazonS3LinkedService, bool) {
	return nil, false
}

// AsSalesforceLinkedService is the LinkedService implementation for HDInsightLinkedService.
func (hils HDInsightLinkedService) AsSalesforceLinkedService() (*SalesforceLinkedService, bool) {
	return nil, false
}

// AsAzureDataLakeStoreLinkedService is the LinkedService implementation for HDInsightLinkedService.
func (hils HDInsightLinkedService) AsAzureDataLakeStoreLinkedService() (*AzureDataLakeStoreLinkedService, bool) {
	return nil, false
}

// AsMongoDbLinkedService is the LinkedService implementation for HDInsightLinkedService.
func (hils HDInsightLinkedService) AsMongoDbLinkedService() (*MongoDbLinkedService, bool) {
	return nil, false
}

// AsCassandraLinkedService is the LinkedService implementation for HDInsightLinkedService.
func (hils HDInsightLinkedService) AsCassandraLinkedService() (*CassandraLinkedService, bool) {
	return nil, false
}

// AsWebLinkedService is the LinkedService implementation for HDInsightLinkedService.
func (hils HDInsightLinkedService) AsWebLinkedService() (*WebLinkedService, bool) {
	return nil, false
}

// AsODataLinkedService is the LinkedService implementation for HDInsightLinkedService.
func (hils HDInsightLinkedService) AsODataLinkedService() (*ODataLinkedService, bool) {
	return nil, false
}

// AsHdfsLinkedService is the LinkedService implementation for HDInsightLinkedService.
func (hils HDInsightLinkedService) AsHdfsLinkedService() (*HdfsLinkedService, bool) {
	return nil, false
}

// AsOdbcLinkedService is the LinkedService implementation for HDInsightLinkedService.
func (hils HDInsightLinkedService) AsOdbcLinkedService() (*OdbcLinkedService, bool) {
	return nil, false
}

// AsAzureMLLinkedService is the LinkedService implementation for HDInsightLinkedService.
func (hils HDInsightLinkedService) AsAzureMLLinkedService() (*AzureMLLinkedService, bool) {
	return nil, false
}

// AsTeradataLinkedService is the LinkedService implementation for HDInsightLinkedService.
func (hils HDInsightLinkedService) AsTeradataLinkedService() (*TeradataLinkedService, bool) {
	return nil, false
}

// AsDb2LinkedService is the LinkedService implementation for HDInsightLinkedService.
func (hils HDInsightLinkedService) AsDb2LinkedService() (*Db2LinkedService, bool) {
	return nil, false
}

// AsSybaseLinkedService is the LinkedService implementation for HDInsightLinkedService.
func (hils HDInsightLinkedService) AsSybaseLinkedService() (*SybaseLinkedService, bool) {
	return nil, false
}

// AsPostgreSQLLinkedService is the LinkedService implementation for HDInsightLinkedService.
func (hils HDInsightLinkedService) AsPostgreSQLLinkedService() (*PostgreSQLLinkedService, bool) {
	return nil, false
}

// AsMySQLLinkedService is the LinkedService implementation for HDInsightLinkedService.
func (hils HDInsightLinkedService) AsMySQLLinkedService() (*MySQLLinkedService, bool) {
	return nil, false
}

// AsOracleLinkedService is the LinkedService implementation for HDInsightLinkedService.
func (hils HDInsightLinkedService) AsOracleLinkedService() (*OracleLinkedService, bool) {
	return nil, false
}

// AsFileServerLinkedService is the LinkedService implementation for HDInsightLinkedService.
func (hils HDInsightLinkedService) AsFileServerLinkedService() (*FileServerLinkedService, bool) {
	return nil, false
}

// AsHDInsightLinkedService is the LinkedService implementation for HDInsightLinkedService.
func (hils HDInsightLinkedService) AsHDInsightLinkedService() (*HDInsightLinkedService, bool) {
	return &hils, true
}

// AsDynamicsLinkedService is the LinkedService implementation for HDInsightLinkedService.
func (hils HDInsightLinkedService) AsDynamicsLinkedService() (*DynamicsLinkedService, bool) {
	return nil, false
}

// AsCosmosDbLinkedService is the LinkedService implementation for HDInsightLinkedService.
func (hils HDInsightLinkedService) AsCosmosDbLinkedService() (*CosmosDbLinkedService, bool) {
	return nil, false
}

// AsAzureKeyVaultLinkedService is the LinkedService implementation for HDInsightLinkedService.
func (hils HDInsightLinkedService) AsAzureKeyVaultLinkedService() (*AzureKeyVaultLinkedService, bool) {
	return nil, false
}

// AsAzureBatchLinkedService is the LinkedService implementation for HDInsightLinkedService.
func (hils HDInsightLinkedService) AsAzureBatchLinkedService() (*AzureBatchLinkedService, bool) {
	return nil, false
}

// AsAzureSQLDatabaseLinkedService is the LinkedService implementation for HDInsightLinkedService.
func (hils HDInsightLinkedService) AsAzureSQLDatabaseLinkedService() (*AzureSQLDatabaseLinkedService, bool) {
	return nil, false
}

// AsSQLServerLinkedService is the LinkedService implementation for HDInsightLinkedService.
func (hils HDInsightLinkedService) AsSQLServerLinkedService() (*SQLServerLinkedService, bool) {
	return nil, false
}

// AsAzureSQLDWLinkedService is the LinkedService implementation for HDInsightLinkedService.
func (hils HDInsightLinkedService) AsAzureSQLDWLinkedService() (*AzureSQLDWLinkedService, bool) {
	return nil, false
}

// AsAzureStorageLinkedService is the LinkedService implementation for HDInsightLinkedService.
func (hils HDInsightLinkedService) AsAzureStorageLinkedService() (*AzureStorageLinkedService, bool) {
	return nil, false
}

// HDInsightLinkedServiceTypeProperties is hDInsight linked service properties.
type HDInsightLinkedServiceTypeProperties struct {
	ClusterURI                *map[string]interface{} `json:"clusterUri,omitempty"`
	UserName                  *map[string]interface{} `json:"userName,omitempty"`
	Password                  *SecureString           `json:"password,omitempty"`
	LinkedServiceName         *LinkedServiceReference `json:"linkedServiceName,omitempty"`
	HcatalogLinkedServiceName *LinkedServiceReference `json:"hcatalogLinkedServiceName,omitempty"`
	EncryptedCredential       *map[string]interface{} `json:"encryptedCredential,omitempty"`
}

// HDInsightMapReduceActivity is hDInsight MapReduce activity type.
type HDInsightMapReduceActivity struct {
	Name                                      *string                 `json:"name,omitempty"`
	Description                               *string                 `json:"description,omitempty"`
	DependsOn                                 *[]ActivityDependency   `json:"dependsOn,omitempty"`
	Type                                      TypeActivity            `json:"type,omitempty"`
	LinkedServiceName                         *LinkedServiceReference `json:"linkedServiceName,omitempty"`
	Policy                                    *ActivityPolicy         `json:"policy,omitempty"`
	*HDInsightMapReduceActivityTypeProperties `json:"typeProperties,omitempty"`
}

// MarshalJSON is the custom marshaler for HDInsightMapReduceActivity.
func (himra HDInsightMapReduceActivity) MarshalJSON() ([]byte, error) {
	himra.Type = TypeHDInsightMapReduce
	type Alias HDInsightMapReduceActivity
	return json.Marshal(&struct {
		Alias
	}{
		Alias: (Alias)(himra),
	})
}

// AsDataLakeAnalyticsUSQLActivity is the ExecutionActivity implementation for HDInsightMapReduceActivity.
func (himra HDInsightMapReduceActivity) AsDataLakeAnalyticsUSQLActivity() (*DataLakeAnalyticsUSQLActivity, bool) {
	return nil, false
}

// AsAzureMLUpdateResourceActivity is the ExecutionActivity implementation for HDInsightMapReduceActivity.
func (himra HDInsightMapReduceActivity) AsAzureMLUpdateResourceActivity() (*AzureMLUpdateResourceActivity, bool) {
	return nil, false
}

// AsAzureMLBatchExecutionActivity is the ExecutionActivity implementation for HDInsightMapReduceActivity.
func (himra HDInsightMapReduceActivity) AsAzureMLBatchExecutionActivity() (*AzureMLBatchExecutionActivity, bool) {
	return nil, false
}

// AsGetMetadataActivity is the ExecutionActivity implementation for HDInsightMapReduceActivity.
func (himra HDInsightMapReduceActivity) AsGetMetadataActivity() (*GetMetadataActivity, bool) {
	return nil, false
}

// AsWebActivity is the ExecutionActivity implementation for HDInsightMapReduceActivity.
func (himra HDInsightMapReduceActivity) AsWebActivity() (*WebActivity, bool) {
	return nil, false
}

// AsLookupActivity is the ExecutionActivity implementation for HDInsightMapReduceActivity.
func (himra HDInsightMapReduceActivity) AsLookupActivity() (*LookupActivity, bool) {
	return nil, false
}

// AsSQLServerStoredProcedureActivity is the ExecutionActivity implementation for HDInsightMapReduceActivity.
func (himra HDInsightMapReduceActivity) AsSQLServerStoredProcedureActivity() (*SQLServerStoredProcedureActivity, bool) {
	return nil, false
}

// AsCustomActivity is the ExecutionActivity implementation for HDInsightMapReduceActivity.
func (himra HDInsightMapReduceActivity) AsCustomActivity() (*CustomActivity, bool) {
	return nil, false
}

// AsHDInsightSparkActivity is the ExecutionActivity implementation for HDInsightMapReduceActivity.
func (himra HDInsightMapReduceActivity) AsHDInsightSparkActivity() (*HDInsightSparkActivity, bool) {
	return nil, false
}

// AsHDInsightStreamingActivity is the ExecutionActivity implementation for HDInsightMapReduceActivity.
func (himra HDInsightMapReduceActivity) AsHDInsightStreamingActivity() (*HDInsightStreamingActivity, bool) {
	return nil, false
}

// AsHDInsightMapReduceActivity is the ExecutionActivity implementation for HDInsightMapReduceActivity.
func (himra HDInsightMapReduceActivity) AsHDInsightMapReduceActivity() (*HDInsightMapReduceActivity, bool) {
	return &himra, true
}

// AsHDInsightPigActivity is the ExecutionActivity implementation for HDInsightMapReduceActivity.
func (himra HDInsightMapReduceActivity) AsHDInsightPigActivity() (*HDInsightPigActivity, bool) {
	return nil, false
}

// AsHDInsightHiveActivity is the ExecutionActivity implementation for HDInsightMapReduceActivity.
func (himra HDInsightMapReduceActivity) AsHDInsightHiveActivity() (*HDInsightHiveActivity, bool) {
	return nil, false
}

// AsCopyActivity is the ExecutionActivity implementation for HDInsightMapReduceActivity.
func (himra HDInsightMapReduceActivity) AsCopyActivity() (*CopyActivity, bool) {
	return nil, false
}

// AsExecutionActivity is the ExecutionActivity implementation for HDInsightMapReduceActivity.
func (himra HDInsightMapReduceActivity) AsExecutionActivity() (*ExecutionActivity, bool) {
	return nil, false
}

// AsUntilActivity is the ExecutionActivity implementation for HDInsightMapReduceActivity.
func (himra HDInsightMapReduceActivity) AsUntilActivity() (*UntilActivity, bool) {
	return nil, false
}

// AsWaitActivity is the ExecutionActivity implementation for HDInsightMapReduceActivity.
func (himra HDInsightMapReduceActivity) AsWaitActivity() (*WaitActivity, bool) {
	return nil, false
}

// AsForEachActivity is the ExecutionActivity implementation for HDInsightMapReduceActivity.
func (himra HDInsightMapReduceActivity) AsForEachActivity() (*ForEachActivity, bool) {
	return nil, false
}

// AsIfConditionActivity is the ExecutionActivity implementation for HDInsightMapReduceActivity.
func (himra HDInsightMapReduceActivity) AsIfConditionActivity() (*IfConditionActivity, bool) {
	return nil, false
}

// AsExecutePipelineActivity is the ExecutionActivity implementation for HDInsightMapReduceActivity.
func (himra HDInsightMapReduceActivity) AsExecutePipelineActivity() (*ExecutePipelineActivity, bool) {
	return nil, false
}

// AsControlActivity is the ExecutionActivity implementation for HDInsightMapReduceActivity.
func (himra HDInsightMapReduceActivity) AsControlActivity() (*ControlActivity, bool) {
	return nil, false
}

// HDInsightMapReduceActivityTypeProperties is hDInsight MapReduce activity properties.
type HDInsightMapReduceActivityTypeProperties struct {
	StorageLinkedServices *[]LinkedServiceReference           `json:"storageLinkedServices,omitempty"`
	Arguments             *[]map[string]interface{}           `json:"arguments,omitempty"`
	GetDebugInfo          HDInsightActivityDebugInfoOption    `json:"getDebugInfo,omitempty"`
	ClassName             *map[string]interface{}             `json:"className,omitempty"`
	JarFilePath           *map[string]interface{}             `json:"jarFilePath,omitempty"`
	JarLinkedService      *LinkedServiceReference             `json:"jarLinkedService,omitempty"`
	JarLibs               *[]map[string]interface{}           `json:"jarLibs,omitempty"`
	Defines               *map[string]*map[string]interface{} `json:"defines,omitempty"`
}

// HDInsightOnDemandLinkedService is hDInsight ondemand linked service.
type HDInsightOnDemandLinkedService struct {
	ConnectVia                                    *IntegrationRuntimeReference `json:"connectVia,omitempty"`
	Description                                   *string                      `json:"description,omitempty"`
	Type                                          TypeLinkedService            `json:"type,omitempty"`
	*HDInsightOnDemandLinkedServiceTypeProperties `json:"typeProperties,omitempty"`
}

// MarshalJSON is the custom marshaler for HDInsightOnDemandLinkedService.
func (hiodls HDInsightOnDemandLinkedService) MarshalJSON() ([]byte, error) {
	hiodls.Type = TypeHDInsightOnDemand
	type Alias HDInsightOnDemandLinkedService
	return json.Marshal(&struct {
		Alias
	}{
		Alias: (Alias)(hiodls),
	})
}

// AsAzureDataLakeAnalyticsLinkedService is the LinkedService implementation for HDInsightOnDemandLinkedService.
func (hiodls HDInsightOnDemandLinkedService) AsAzureDataLakeAnalyticsLinkedService() (*AzureDataLakeAnalyticsLinkedService, bool) {
	return nil, false
}

// AsHDInsightOnDemandLinkedService is the LinkedService implementation for HDInsightOnDemandLinkedService.
func (hiodls HDInsightOnDemandLinkedService) AsHDInsightOnDemandLinkedService() (*HDInsightOnDemandLinkedService, bool) {
	return &hiodls, true
}

// AsSapHanaLinkedService is the LinkedService implementation for HDInsightOnDemandLinkedService.
func (hiodls HDInsightOnDemandLinkedService) AsSapHanaLinkedService() (*SapHanaLinkedService, bool) {
	return nil, false
}

// AsSapBWLinkedService is the LinkedService implementation for HDInsightOnDemandLinkedService.
func (hiodls HDInsightOnDemandLinkedService) AsSapBWLinkedService() (*SapBWLinkedService, bool) {
	return nil, false
}

// AsSftpServerLinkedService is the LinkedService implementation for HDInsightOnDemandLinkedService.
func (hiodls HDInsightOnDemandLinkedService) AsSftpServerLinkedService() (*SftpServerLinkedService, bool) {
	return nil, false
}

// AsFtpServerLinkedService is the LinkedService implementation for HDInsightOnDemandLinkedService.
func (hiodls HDInsightOnDemandLinkedService) AsFtpServerLinkedService() (*FtpServerLinkedService, bool) {
	return nil, false
}

// AsHTTPLinkedService is the LinkedService implementation for HDInsightOnDemandLinkedService.
func (hiodls HDInsightOnDemandLinkedService) AsHTTPLinkedService() (*HTTPLinkedService, bool) {
	return nil, false
}

// AsAzureSearchLinkedService is the LinkedService implementation for HDInsightOnDemandLinkedService.
func (hiodls HDInsightOnDemandLinkedService) AsAzureSearchLinkedService() (*AzureSearchLinkedService, bool) {
	return nil, false
}

// AsCustomDataSourceLinkedService is the LinkedService implementation for HDInsightOnDemandLinkedService.
func (hiodls HDInsightOnDemandLinkedService) AsCustomDataSourceLinkedService() (*CustomDataSourceLinkedService, bool) {
	return nil, false
}

// AsAmazonRedshiftLinkedService is the LinkedService implementation for HDInsightOnDemandLinkedService.
func (hiodls HDInsightOnDemandLinkedService) AsAmazonRedshiftLinkedService() (*AmazonRedshiftLinkedService, bool) {
	return nil, false
}

// AsAmazonS3LinkedService is the LinkedService implementation for HDInsightOnDemandLinkedService.
func (hiodls HDInsightOnDemandLinkedService) AsAmazonS3LinkedService() (*AmazonS3LinkedService, bool) {
	return nil, false
}

// AsSalesforceLinkedService is the LinkedService implementation for HDInsightOnDemandLinkedService.
func (hiodls HDInsightOnDemandLinkedService) AsSalesforceLinkedService() (*SalesforceLinkedService, bool) {
	return nil, false
}

// AsAzureDataLakeStoreLinkedService is the LinkedService implementation for HDInsightOnDemandLinkedService.
func (hiodls HDInsightOnDemandLinkedService) AsAzureDataLakeStoreLinkedService() (*AzureDataLakeStoreLinkedService, bool) {
	return nil, false
}

// AsMongoDbLinkedService is the LinkedService implementation for HDInsightOnDemandLinkedService.
func (hiodls HDInsightOnDemandLinkedService) AsMongoDbLinkedService() (*MongoDbLinkedService, bool) {
	return nil, false
}

// AsCassandraLinkedService is the LinkedService implementation for HDInsightOnDemandLinkedService.
func (hiodls HDInsightOnDemandLinkedService) AsCassandraLinkedService() (*CassandraLinkedService, bool) {
	return nil, false
}

// AsWebLinkedService is the LinkedService implementation for HDInsightOnDemandLinkedService.
func (hiodls HDInsightOnDemandLinkedService) AsWebLinkedService() (*WebLinkedService, bool) {
	return nil, false
}

// AsODataLinkedService is the LinkedService implementation for HDInsightOnDemandLinkedService.
func (hiodls HDInsightOnDemandLinkedService) AsODataLinkedService() (*ODataLinkedService, bool) {
	return nil, false
}

// AsHdfsLinkedService is the LinkedService implementation for HDInsightOnDemandLinkedService.
func (hiodls HDInsightOnDemandLinkedService) AsHdfsLinkedService() (*HdfsLinkedService, bool) {
	return nil, false
}

// AsOdbcLinkedService is the LinkedService implementation for HDInsightOnDemandLinkedService.
func (hiodls HDInsightOnDemandLinkedService) AsOdbcLinkedService() (*OdbcLinkedService, bool) {
	return nil, false
}

// AsAzureMLLinkedService is the LinkedService implementation for HDInsightOnDemandLinkedService.
func (hiodls HDInsightOnDemandLinkedService) AsAzureMLLinkedService() (*AzureMLLinkedService, bool) {
	return nil, false
}

// AsTeradataLinkedService is the LinkedService implementation for HDInsightOnDemandLinkedService.
func (hiodls HDInsightOnDemandLinkedService) AsTeradataLinkedService() (*TeradataLinkedService, bool) {
	return nil, false
}

// AsDb2LinkedService is the LinkedService implementation for HDInsightOnDemandLinkedService.
func (hiodls HDInsightOnDemandLinkedService) AsDb2LinkedService() (*Db2LinkedService, bool) {
	return nil, false
}

// AsSybaseLinkedService is the LinkedService implementation for HDInsightOnDemandLinkedService.
func (hiodls HDInsightOnDemandLinkedService) AsSybaseLinkedService() (*SybaseLinkedService, bool) {
	return nil, false
}

// AsPostgreSQLLinkedService is the LinkedService implementation for HDInsightOnDemandLinkedService.
func (hiodls HDInsightOnDemandLinkedService) AsPostgreSQLLinkedService() (*PostgreSQLLinkedService, bool) {
	return nil, false
}

// AsMySQLLinkedService is the LinkedService implementation for HDInsightOnDemandLinkedService.
func (hiodls HDInsightOnDemandLinkedService) AsMySQLLinkedService() (*MySQLLinkedService, bool) {
	return nil, false
}

// AsOracleLinkedService is the LinkedService implementation for HDInsightOnDemandLinkedService.
func (hiodls HDInsightOnDemandLinkedService) AsOracleLinkedService() (*OracleLinkedService, bool) {
	return nil, false
}

// AsFileServerLinkedService is the LinkedService implementation for HDInsightOnDemandLinkedService.
func (hiodls HDInsightOnDemandLinkedService) AsFileServerLinkedService() (*FileServerLinkedService, bool) {
	return nil, false
}

// AsHDInsightLinkedService is the LinkedService implementation for HDInsightOnDemandLinkedService.
func (hiodls HDInsightOnDemandLinkedService) AsHDInsightLinkedService() (*HDInsightLinkedService, bool) {
	return nil, false
}

// AsDynamicsLinkedService is the LinkedService implementation for HDInsightOnDemandLinkedService.
func (hiodls HDInsightOnDemandLinkedService) AsDynamicsLinkedService() (*DynamicsLinkedService, bool) {
	return nil, false
}

// AsCosmosDbLinkedService is the LinkedService implementation for HDInsightOnDemandLinkedService.
func (hiodls HDInsightOnDemandLinkedService) AsCosmosDbLinkedService() (*CosmosDbLinkedService, bool) {
	return nil, false
}

// AsAzureKeyVaultLinkedService is the LinkedService implementation for HDInsightOnDemandLinkedService.
func (hiodls HDInsightOnDemandLinkedService) AsAzureKeyVaultLinkedService() (*AzureKeyVaultLinkedService, bool) {
	return nil, false
}

// AsAzureBatchLinkedService is the LinkedService implementation for HDInsightOnDemandLinkedService.
func (hiodls HDInsightOnDemandLinkedService) AsAzureBatchLinkedService() (*AzureBatchLinkedService, bool) {
	return nil, false
}

// AsAzureSQLDatabaseLinkedService is the LinkedService implementation for HDInsightOnDemandLinkedService.
func (hiodls HDInsightOnDemandLinkedService) AsAzureSQLDatabaseLinkedService() (*AzureSQLDatabaseLinkedService, bool) {
	return nil, false
}

// AsSQLServerLinkedService is the LinkedService implementation for HDInsightOnDemandLinkedService.
func (hiodls HDInsightOnDemandLinkedService) AsSQLServerLinkedService() (*SQLServerLinkedService, bool) {
	return nil, false
}

// AsAzureSQLDWLinkedService is the LinkedService implementation for HDInsightOnDemandLinkedService.
func (hiodls HDInsightOnDemandLinkedService) AsAzureSQLDWLinkedService() (*AzureSQLDWLinkedService, bool) {
	return nil, false
}

// AsAzureStorageLinkedService is the LinkedService implementation for HDInsightOnDemandLinkedService.
func (hiodls HDInsightOnDemandLinkedService) AsAzureStorageLinkedService() (*AzureStorageLinkedService, bool) {
	return nil, false
}

// HDInsightOnDemandLinkedServiceTypeProperties is hDInsight ondemand linked service properties.
type HDInsightOnDemandLinkedServiceTypeProperties struct {
	ClusterSize                  *map[string]interface{}   `json:"clusterSize,omitempty"`
	TimeToLive                   *map[string]interface{}   `json:"timeToLive,omitempty"`
	Version                      *map[string]interface{}   `json:"version,omitempty"`
	LinkedServiceName            *LinkedServiceReference   `json:"linkedServiceName,omitempty"`
	HostSubscriptionID           *map[string]interface{}   `json:"hostSubscriptionId,omitempty"`
	ServicePrincipalID           *map[string]interface{}   `json:"servicePrincipalId,omitempty"`
	ServicePrincipalKey          *SecureString             `json:"servicePrincipalKey,omitempty"`
	Tenant                       *map[string]interface{}   `json:"tenant,omitempty"`
	ClusterResourceGroup         *map[string]interface{}   `json:"clusterResourceGroup,omitempty"`
	ClusterNamePrefix            *map[string]interface{}   `json:"clusterNamePrefix,omitempty"`
	ClusterUserName              *map[string]interface{}   `json:"clusterUserName,omitempty"`
	ClusterPassword              *SecureString             `json:"clusterPassword,omitempty"`
	ClusterSSHUserName           *map[string]interface{}   `json:"clusterSshUserName,omitempty"`
	ClusterSSHPassword           *SecureString             `json:"clusterSshPassword,omitempty"`
	AdditionalLinkedServiceNames *[]LinkedServiceReference `json:"additionalLinkedServiceNames,omitempty"`
	HcatalogLinkedServiceName    *LinkedServiceReference   `json:"hcatalogLinkedServiceName,omitempty"`
	ClusterType                  *map[string]interface{}   `json:"clusterType,omitempty"`
	SparkVersion                 *map[string]interface{}   `json:"sparkVersion,omitempty"`
	CoreConfiguration            *map[string]interface{}   `json:"coreConfiguration,omitempty"`
	HBaseConfiguration           *map[string]interface{}   `json:"hBaseConfiguration,omitempty"`
	HdfsConfiguration            *map[string]interface{}   `json:"hdfsConfiguration,omitempty"`
	HiveConfiguration            *map[string]interface{}   `json:"hiveConfiguration,omitempty"`
	MapReduceConfiguration       *map[string]interface{}   `json:"mapReduceConfiguration,omitempty"`
	OozieConfiguration           *map[string]interface{}   `json:"oozieConfiguration,omitempty"`
	StormConfiguration           *map[string]interface{}   `json:"stormConfiguration,omitempty"`
	YarnConfiguration            *map[string]interface{}   `json:"yarnConfiguration,omitempty"`
	EncryptedCredential          *map[string]interface{}   `json:"encryptedCredential,omitempty"`
}

// HDInsightPigActivity is hDInsight Pig activity type.
type HDInsightPigActivity struct {
	Name                                *string                 `json:"name,omitempty"`
	Description                         *string                 `json:"description,omitempty"`
	DependsOn                           *[]ActivityDependency   `json:"dependsOn,omitempty"`
	Type                                TypeActivity            `json:"type,omitempty"`
	LinkedServiceName                   *LinkedServiceReference `json:"linkedServiceName,omitempty"`
	Policy                              *ActivityPolicy         `json:"policy,omitempty"`
	*HDInsightPigActivityTypeProperties `json:"typeProperties,omitempty"`
}

// MarshalJSON is the custom marshaler for HDInsightPigActivity.
func (hipa HDInsightPigActivity) MarshalJSON() ([]byte, error) {
	hipa.Type = TypeHDInsightPig
	type Alias HDInsightPigActivity
	return json.Marshal(&struct {
		Alias
	}{
		Alias: (Alias)(hipa),
	})
}

// AsDataLakeAnalyticsUSQLActivity is the ExecutionActivity implementation for HDInsightPigActivity.
func (hipa HDInsightPigActivity) AsDataLakeAnalyticsUSQLActivity() (*DataLakeAnalyticsUSQLActivity, bool) {
	return nil, false
}

// AsAzureMLUpdateResourceActivity is the ExecutionActivity implementation for HDInsightPigActivity.
func (hipa HDInsightPigActivity) AsAzureMLUpdateResourceActivity() (*AzureMLUpdateResourceActivity, bool) {
	return nil, false
}

// AsAzureMLBatchExecutionActivity is the ExecutionActivity implementation for HDInsightPigActivity.
func (hipa HDInsightPigActivity) AsAzureMLBatchExecutionActivity() (*AzureMLBatchExecutionActivity, bool) {
	return nil, false
}

// AsGetMetadataActivity is the ExecutionActivity implementation for HDInsightPigActivity.
func (hipa HDInsightPigActivity) AsGetMetadataActivity() (*GetMetadataActivity, bool) {
	return nil, false
}

// AsWebActivity is the ExecutionActivity implementation for HDInsightPigActivity.
func (hipa HDInsightPigActivity) AsWebActivity() (*WebActivity, bool) {
	return nil, false
}

// AsLookupActivity is the ExecutionActivity implementation for HDInsightPigActivity.
func (hipa HDInsightPigActivity) AsLookupActivity() (*LookupActivity, bool) {
	return nil, false
}

// AsSQLServerStoredProcedureActivity is the ExecutionActivity implementation for HDInsightPigActivity.
func (hipa HDInsightPigActivity) AsSQLServerStoredProcedureActivity() (*SQLServerStoredProcedureActivity, bool) {
	return nil, false
}

// AsCustomActivity is the ExecutionActivity implementation for HDInsightPigActivity.
func (hipa HDInsightPigActivity) AsCustomActivity() (*CustomActivity, bool) {
	return nil, false
}

// AsHDInsightSparkActivity is the ExecutionActivity implementation for HDInsightPigActivity.
func (hipa HDInsightPigActivity) AsHDInsightSparkActivity() (*HDInsightSparkActivity, bool) {
	return nil, false
}

// AsHDInsightStreamingActivity is the ExecutionActivity implementation for HDInsightPigActivity.
func (hipa HDInsightPigActivity) AsHDInsightStreamingActivity() (*HDInsightStreamingActivity, bool) {
	return nil, false
}

// AsHDInsightMapReduceActivity is the ExecutionActivity implementation for HDInsightPigActivity.
func (hipa HDInsightPigActivity) AsHDInsightMapReduceActivity() (*HDInsightMapReduceActivity, bool) {
	return nil, false
}

// AsHDInsightPigActivity is the ExecutionActivity implementation for HDInsightPigActivity.
func (hipa HDInsightPigActivity) AsHDInsightPigActivity() (*HDInsightPigActivity, bool) {
	return &hipa, true
}

// AsHDInsightHiveActivity is the ExecutionActivity implementation for HDInsightPigActivity.
func (hipa HDInsightPigActivity) AsHDInsightHiveActivity() (*HDInsightHiveActivity, bool) {
	return nil, false
}

// AsCopyActivity is the ExecutionActivity implementation for HDInsightPigActivity.
func (hipa HDInsightPigActivity) AsCopyActivity() (*CopyActivity, bool) {
	return nil, false
}

// AsExecutionActivity is the ExecutionActivity implementation for HDInsightPigActivity.
func (hipa HDInsightPigActivity) AsExecutionActivity() (*ExecutionActivity, bool) {
	return nil, false
}

// AsUntilActivity is the ExecutionActivity implementation for HDInsightPigActivity.
func (hipa HDInsightPigActivity) AsUntilActivity() (*UntilActivity, bool) {
	return nil, false
}

// AsWaitActivity is the ExecutionActivity implementation for HDInsightPigActivity.
func (hipa HDInsightPigActivity) AsWaitActivity() (*WaitActivity, bool) {
	return nil, false
}

// AsForEachActivity is the ExecutionActivity implementation for HDInsightPigActivity.
func (hipa HDInsightPigActivity) AsForEachActivity() (*ForEachActivity, bool) {
	return nil, false
}

// AsIfConditionActivity is the ExecutionActivity implementation for HDInsightPigActivity.
func (hipa HDInsightPigActivity) AsIfConditionActivity() (*IfConditionActivity, bool) {
	return nil, false
}

// AsExecutePipelineActivity is the ExecutionActivity implementation for HDInsightPigActivity.
func (hipa HDInsightPigActivity) AsExecutePipelineActivity() (*ExecutePipelineActivity, bool) {
	return nil, false
}

// AsControlActivity is the ExecutionActivity implementation for HDInsightPigActivity.
func (hipa HDInsightPigActivity) AsControlActivity() (*ControlActivity, bool) {
	return nil, false
}

// HDInsightPigActivityTypeProperties is hDInsight Pig activity properties.
type HDInsightPigActivityTypeProperties struct {
	StorageLinkedServices *[]LinkedServiceReference           `json:"storageLinkedServices,omitempty"`
	Arguments             *[]map[string]interface{}           `json:"arguments,omitempty"`
	GetDebugInfo          HDInsightActivityDebugInfoOption    `json:"getDebugInfo,omitempty"`
	ScriptPath            *map[string]interface{}             `json:"scriptPath,omitempty"`
	ScriptLinkedService   *LinkedServiceReference             `json:"scriptLinkedService,omitempty"`
	Defines               *map[string]*map[string]interface{} `json:"defines,omitempty"`
}

// HDInsightSparkActivity is hDInsight Spark activity.
type HDInsightSparkActivity struct {
	Name                                  *string                 `json:"name,omitempty"`
	Description                           *string                 `json:"description,omitempty"`
	DependsOn                             *[]ActivityDependency   `json:"dependsOn,omitempty"`
	Type                                  TypeActivity            `json:"type,omitempty"`
	LinkedServiceName                     *LinkedServiceReference `json:"linkedServiceName,omitempty"`
	Policy                                *ActivityPolicy         `json:"policy,omitempty"`
	*HDInsightSparkActivityTypeProperties `json:"typeProperties,omitempty"`
}

// MarshalJSON is the custom marshaler for HDInsightSparkActivity.
func (hisa HDInsightSparkActivity) MarshalJSON() ([]byte, error) {
	hisa.Type = TypeHDInsightSpark
	type Alias HDInsightSparkActivity
	return json.Marshal(&struct {
		Alias
	}{
		Alias: (Alias)(hisa),
	})
}

// AsDataLakeAnalyticsUSQLActivity is the ExecutionActivity implementation for HDInsightSparkActivity.
func (hisa HDInsightSparkActivity) AsDataLakeAnalyticsUSQLActivity() (*DataLakeAnalyticsUSQLActivity, bool) {
	return nil, false
}

// AsAzureMLUpdateResourceActivity is the ExecutionActivity implementation for HDInsightSparkActivity.
func (hisa HDInsightSparkActivity) AsAzureMLUpdateResourceActivity() (*AzureMLUpdateResourceActivity, bool) {
	return nil, false
}

// AsAzureMLBatchExecutionActivity is the ExecutionActivity implementation for HDInsightSparkActivity.
func (hisa HDInsightSparkActivity) AsAzureMLBatchExecutionActivity() (*AzureMLBatchExecutionActivity, bool) {
	return nil, false
}

// AsGetMetadataActivity is the ExecutionActivity implementation for HDInsightSparkActivity.
func (hisa HDInsightSparkActivity) AsGetMetadataActivity() (*GetMetadataActivity, bool) {
	return nil, false
}

// AsWebActivity is the ExecutionActivity implementation for HDInsightSparkActivity.
func (hisa HDInsightSparkActivity) AsWebActivity() (*WebActivity, bool) {
	return nil, false
}

// AsLookupActivity is the ExecutionActivity implementation for HDInsightSparkActivity.
func (hisa HDInsightSparkActivity) AsLookupActivity() (*LookupActivity, bool) {
	return nil, false
}

// AsSQLServerStoredProcedureActivity is the ExecutionActivity implementation for HDInsightSparkActivity.
func (hisa HDInsightSparkActivity) AsSQLServerStoredProcedureActivity() (*SQLServerStoredProcedureActivity, bool) {
	return nil, false
}

// AsCustomActivity is the ExecutionActivity implementation for HDInsightSparkActivity.
func (hisa HDInsightSparkActivity) AsCustomActivity() (*CustomActivity, bool) {
	return nil, false
}

// AsHDInsightSparkActivity is the ExecutionActivity implementation for HDInsightSparkActivity.
func (hisa HDInsightSparkActivity) AsHDInsightSparkActivity() (*HDInsightSparkActivity, bool) {
	return &hisa, true
}

// AsHDInsightStreamingActivity is the ExecutionActivity implementation for HDInsightSparkActivity.
func (hisa HDInsightSparkActivity) AsHDInsightStreamingActivity() (*HDInsightStreamingActivity, bool) {
	return nil, false
}

// AsHDInsightMapReduceActivity is the ExecutionActivity implementation for HDInsightSparkActivity.
func (hisa HDInsightSparkActivity) AsHDInsightMapReduceActivity() (*HDInsightMapReduceActivity, bool) {
	return nil, false
}

// AsHDInsightPigActivity is the ExecutionActivity implementation for HDInsightSparkActivity.
func (hisa HDInsightSparkActivity) AsHDInsightPigActivity() (*HDInsightPigActivity, bool) {
	return nil, false
}

// AsHDInsightHiveActivity is the ExecutionActivity implementation for HDInsightSparkActivity.
func (hisa HDInsightSparkActivity) AsHDInsightHiveActivity() (*HDInsightHiveActivity, bool) {
	return nil, false
}

// AsCopyActivity is the ExecutionActivity implementation for HDInsightSparkActivity.
func (hisa HDInsightSparkActivity) AsCopyActivity() (*CopyActivity, bool) {
	return nil, false
}

// AsExecutionActivity is the ExecutionActivity implementation for HDInsightSparkActivity.
func (hisa HDInsightSparkActivity) AsExecutionActivity() (*ExecutionActivity, bool) {
	return nil, false
}

// AsUntilActivity is the ExecutionActivity implementation for HDInsightSparkActivity.
func (hisa HDInsightSparkActivity) AsUntilActivity() (*UntilActivity, bool) {
	return nil, false
}

// AsWaitActivity is the ExecutionActivity implementation for HDInsightSparkActivity.
func (hisa HDInsightSparkActivity) AsWaitActivity() (*WaitActivity, bool) {
	return nil, false
}

// AsForEachActivity is the ExecutionActivity implementation for HDInsightSparkActivity.
func (hisa HDInsightSparkActivity) AsForEachActivity() (*ForEachActivity, bool) {
	return nil, false
}

// AsIfConditionActivity is the ExecutionActivity implementation for HDInsightSparkActivity.
func (hisa HDInsightSparkActivity) AsIfConditionActivity() (*IfConditionActivity, bool) {
	return nil, false
}

// AsExecutePipelineActivity is the ExecutionActivity implementation for HDInsightSparkActivity.
func (hisa HDInsightSparkActivity) AsExecutePipelineActivity() (*ExecutePipelineActivity, bool) {
	return nil, false
}

// AsControlActivity is the ExecutionActivity implementation for HDInsightSparkActivity.
func (hisa HDInsightSparkActivity) AsControlActivity() (*ControlActivity, bool) {
	return nil, false
}

// HDInsightSparkActivityTypeProperties is hDInsight spark activity properties.
type HDInsightSparkActivityTypeProperties struct {
	RootPath              *map[string]interface{}             `json:"rootPath,omitempty"`
	EntryFilePath         *map[string]interface{}             `json:"entryFilePath,omitempty"`
	Arguments             *[]map[string]interface{}           `json:"arguments,omitempty"`
	GetDebugInfo          HDInsightActivityDebugInfoOption    `json:"getDebugInfo,omitempty"`
	SparkJobLinkedService *LinkedServiceReference             `json:"sparkJobLinkedService,omitempty"`
	ClassName             *string                             `json:"className,omitempty"`
	ProxyUser             *map[string]interface{}             `json:"proxyUser,omitempty"`
	SparkConfig           *map[string]*map[string]interface{} `json:"sparkConfig,omitempty"`
}

// HDInsightStreamingActivity is hDInsight streaming activity type.
type HDInsightStreamingActivity struct {
	Name                                      *string                 `json:"name,omitempty"`
	Description                               *string                 `json:"description,omitempty"`
	DependsOn                                 *[]ActivityDependency   `json:"dependsOn,omitempty"`
	Type                                      TypeActivity            `json:"type,omitempty"`
	LinkedServiceName                         *LinkedServiceReference `json:"linkedServiceName,omitempty"`
	Policy                                    *ActivityPolicy         `json:"policy,omitempty"`
	*HDInsightStreamingActivityTypeProperties `json:"typeProperties,omitempty"`
}

// MarshalJSON is the custom marshaler for HDInsightStreamingActivity.
func (hisa HDInsightStreamingActivity) MarshalJSON() ([]byte, error) {
	hisa.Type = TypeHDInsightStreaming
	type Alias HDInsightStreamingActivity
	return json.Marshal(&struct {
		Alias
	}{
		Alias: (Alias)(hisa),
	})
}

// AsDataLakeAnalyticsUSQLActivity is the ExecutionActivity implementation for HDInsightStreamingActivity.
func (hisa HDInsightStreamingActivity) AsDataLakeAnalyticsUSQLActivity() (*DataLakeAnalyticsUSQLActivity, bool) {
	return nil, false
}

// AsAzureMLUpdateResourceActivity is the ExecutionActivity implementation for HDInsightStreamingActivity.
func (hisa HDInsightStreamingActivity) AsAzureMLUpdateResourceActivity() (*AzureMLUpdateResourceActivity, bool) {
	return nil, false
}

// AsAzureMLBatchExecutionActivity is the ExecutionActivity implementation for HDInsightStreamingActivity.
func (hisa HDInsightStreamingActivity) AsAzureMLBatchExecutionActivity() (*AzureMLBatchExecutionActivity, bool) {
	return nil, false
}

// AsGetMetadataActivity is the ExecutionActivity implementation for HDInsightStreamingActivity.
func (hisa HDInsightStreamingActivity) AsGetMetadataActivity() (*GetMetadataActivity, bool) {
	return nil, false
}

// AsWebActivity is the ExecutionActivity implementation for HDInsightStreamingActivity.
func (hisa HDInsightStreamingActivity) AsWebActivity() (*WebActivity, bool) {
	return nil, false
}

// AsLookupActivity is the ExecutionActivity implementation for HDInsightStreamingActivity.
func (hisa HDInsightStreamingActivity) AsLookupActivity() (*LookupActivity, bool) {
	return nil, false
}

// AsSQLServerStoredProcedureActivity is the ExecutionActivity implementation for HDInsightStreamingActivity.
func (hisa HDInsightStreamingActivity) AsSQLServerStoredProcedureActivity() (*SQLServerStoredProcedureActivity, bool) {
	return nil, false
}

// AsCustomActivity is the ExecutionActivity implementation for HDInsightStreamingActivity.
func (hisa HDInsightStreamingActivity) AsCustomActivity() (*CustomActivity, bool) {
	return nil, false
}

// AsHDInsightSparkActivity is the ExecutionActivity implementation for HDInsightStreamingActivity.
func (hisa HDInsightStreamingActivity) AsHDInsightSparkActivity() (*HDInsightSparkActivity, bool) {
	return nil, false
}

// AsHDInsightStreamingActivity is the ExecutionActivity implementation for HDInsightStreamingActivity.
func (hisa HDInsightStreamingActivity) AsHDInsightStreamingActivity() (*HDInsightStreamingActivity, bool) {
	return &hisa, true
}

// AsHDInsightMapReduceActivity is the ExecutionActivity implementation for HDInsightStreamingActivity.
func (hisa HDInsightStreamingActivity) AsHDInsightMapReduceActivity() (*HDInsightMapReduceActivity, bool) {
	return nil, false
}

// AsHDInsightPigActivity is the ExecutionActivity implementation for HDInsightStreamingActivity.
func (hisa HDInsightStreamingActivity) AsHDInsightPigActivity() (*HDInsightPigActivity, bool) {
	return nil, false
}

// AsHDInsightHiveActivity is the ExecutionActivity implementation for HDInsightStreamingActivity.
func (hisa HDInsightStreamingActivity) AsHDInsightHiveActivity() (*HDInsightHiveActivity, bool) {
	return nil, false
}

// AsCopyActivity is the ExecutionActivity implementation for HDInsightStreamingActivity.
func (hisa HDInsightStreamingActivity) AsCopyActivity() (*CopyActivity, bool) {
	return nil, false
}

// AsExecutionActivity is the ExecutionActivity implementation for HDInsightStreamingActivity.
func (hisa HDInsightStreamingActivity) AsExecutionActivity() (*ExecutionActivity, bool) {
	return nil, false
}

// AsUntilActivity is the ExecutionActivity implementation for HDInsightStreamingActivity.
func (hisa HDInsightStreamingActivity) AsUntilActivity() (*UntilActivity, bool) {
	return nil, false
}

// AsWaitActivity is the ExecutionActivity implementation for HDInsightStreamingActivity.
func (hisa HDInsightStreamingActivity) AsWaitActivity() (*WaitActivity, bool) {
	return nil, false
}

// AsForEachActivity is the ExecutionActivity implementation for HDInsightStreamingActivity.
func (hisa HDInsightStreamingActivity) AsForEachActivity() (*ForEachActivity, bool) {
	return nil, false
}

// AsIfConditionActivity is the ExecutionActivity implementation for HDInsightStreamingActivity.
func (hisa HDInsightStreamingActivity) AsIfConditionActivity() (*IfConditionActivity, bool) {
	return nil, false
}

// AsExecutePipelineActivity is the ExecutionActivity implementation for HDInsightStreamingActivity.
func (hisa HDInsightStreamingActivity) AsExecutePipelineActivity() (*ExecutePipelineActivity, bool) {
	return nil, false
}

// AsControlActivity is the ExecutionActivity implementation for HDInsightStreamingActivity.
func (hisa HDInsightStreamingActivity) AsControlActivity() (*ControlActivity, bool) {
	return nil, false
}

// HDInsightStreamingActivityTypeProperties is hDInsight streaming activity properties.
type HDInsightStreamingActivityTypeProperties struct {
	StorageLinkedServices *[]LinkedServiceReference           `json:"storageLinkedServices,omitempty"`
	Arguments             *[]map[string]interface{}           `json:"arguments,omitempty"`
	GetDebugInfo          HDInsightActivityDebugInfoOption    `json:"getDebugInfo,omitempty"`
	Mapper                *map[string]interface{}             `json:"mapper,omitempty"`
	Reducer               *map[string]interface{}             `json:"reducer,omitempty"`
	Input                 *map[string]interface{}             `json:"input,omitempty"`
	Output                *map[string]interface{}             `json:"output,omitempty"`
	FilePaths             *[]map[string]interface{}           `json:"filePaths,omitempty"`
	FileLinkedService     *LinkedServiceReference             `json:"fileLinkedService,omitempty"`
	Combiner              *map[string]interface{}             `json:"combiner,omitempty"`
	CommandEnvironment    *[]map[string]interface{}           `json:"commandEnvironment,omitempty"`
	Defines               *map[string]*map[string]interface{} `json:"defines,omitempty"`
}

// HTTPDataset is a file in an HTTP web server.
type HTTPDataset struct {
	Description                *string                             `json:"description,omitempty"`
	Structure                  *map[string]interface{}             `json:"structure,omitempty"`
	LinkedServiceName          *LinkedServiceReference             `json:"linkedServiceName,omitempty"`
	Parameters                 *map[string]*ParameterSpecification `json:"parameters,omitempty"`
	Type                       TypeDataset                         `json:"type,omitempty"`
	*HTTPDatasetTypeProperties `json:"typeProperties,omitempty"`
}

// MarshalJSON is the custom marshaler for HTTPDataset.
func (hd HTTPDataset) MarshalJSON() ([]byte, error) {
	hd.Type = TypeHTTPFile
	type Alias HTTPDataset
	return json.Marshal(&struct {
		Alias
	}{
		Alias: (Alias)(hd),
	})
}

// AsHTTPDataset is the Dataset implementation for HTTPDataset.
func (hd HTTPDataset) AsHTTPDataset() (*HTTPDataset, bool) {
	return &hd, true
}

// AsAzureSearchIndexDataset is the Dataset implementation for HTTPDataset.
func (hd HTTPDataset) AsAzureSearchIndexDataset() (*AzureSearchIndexDataset, bool) {
	return nil, false
}

// AsWebTableDataset is the Dataset implementation for HTTPDataset.
func (hd HTTPDataset) AsWebTableDataset() (*WebTableDataset, bool) {
	return nil, false
}

// AsSQLServerTableDataset is the Dataset implementation for HTTPDataset.
func (hd HTTPDataset) AsSQLServerTableDataset() (*SQLServerTableDataset, bool) {
	return nil, false
}

// AsRelationalTableDataset is the Dataset implementation for HTTPDataset.
func (hd HTTPDataset) AsRelationalTableDataset() (*RelationalTableDataset, bool) {
	return nil, false
}

// AsOracleTableDataset is the Dataset implementation for HTTPDataset.
func (hd HTTPDataset) AsOracleTableDataset() (*OracleTableDataset, bool) {
	return nil, false
}

// AsODataResourceDataset is the Dataset implementation for HTTPDataset.
func (hd HTTPDataset) AsODataResourceDataset() (*ODataResourceDataset, bool) {
	return nil, false
}

// AsMongoDbCollectionDataset is the Dataset implementation for HTTPDataset.
func (hd HTTPDataset) AsMongoDbCollectionDataset() (*MongoDbCollectionDataset, bool) {
	return nil, false
}

// AsFileShareDataset is the Dataset implementation for HTTPDataset.
func (hd HTTPDataset) AsFileShareDataset() (*FileShareDataset, bool) {
	return nil, false
}

// AsAzureDataLakeStoreDataset is the Dataset implementation for HTTPDataset.
func (hd HTTPDataset) AsAzureDataLakeStoreDataset() (*AzureDataLakeStoreDataset, bool) {
	return nil, false
}

// AsDynamicsEntityDataset is the Dataset implementation for HTTPDataset.
func (hd HTTPDataset) AsDynamicsEntityDataset() (*DynamicsEntityDataset, bool) {
	return nil, false
}

// AsDocumentDbCollectionDataset is the Dataset implementation for HTTPDataset.
func (hd HTTPDataset) AsDocumentDbCollectionDataset() (*DocumentDbCollectionDataset, bool) {
	return nil, false
}

// AsCustomDataset is the Dataset implementation for HTTPDataset.
func (hd HTTPDataset) AsCustomDataset() (*CustomDataset, bool) {
	return nil, false
}

// AsCassandraTableDataset is the Dataset implementation for HTTPDataset.
func (hd HTTPDataset) AsCassandraTableDataset() (*CassandraTableDataset, bool) {
	return nil, false
}

// AsAzureSQLDWTableDataset is the Dataset implementation for HTTPDataset.
func (hd HTTPDataset) AsAzureSQLDWTableDataset() (*AzureSQLDWTableDataset, bool) {
	return nil, false
}

// AsAzureSQLTableDataset is the Dataset implementation for HTTPDataset.
func (hd HTTPDataset) AsAzureSQLTableDataset() (*AzureSQLTableDataset, bool) {
	return nil, false
}

// AsAzureTableDataset is the Dataset implementation for HTTPDataset.
func (hd HTTPDataset) AsAzureTableDataset() (*AzureTableDataset, bool) {
	return nil, false
}

// AsAzureBlobDataset is the Dataset implementation for HTTPDataset.
func (hd HTTPDataset) AsAzureBlobDataset() (*AzureBlobDataset, bool) {
	return nil, false
}

// AsAmazonS3Dataset is the Dataset implementation for HTTPDataset.
func (hd HTTPDataset) AsAmazonS3Dataset() (*AmazonS3Dataset, bool) {
	return nil, false
}

// HTTPDatasetTypeProperties is properties specific to this dataset type.
type HTTPDatasetTypeProperties struct {
	RelativeURL       *map[string]interface{} `json:"relativeUrl,omitempty"`
	RequestMethod     *map[string]interface{} `json:"requestMethod,omitempty"`
	RequestBody       *map[string]interface{} `json:"requestBody,omitempty"`
	AdditionalHeaders *map[string]interface{} `json:"additionalHeaders,omitempty"`
	PartitionedBy     *DatasetPartition       `json:"partitionedBy,omitempty"`
	Format            DatasetStorageFormat    `json:"format,omitempty"`
	Compression       DatasetCompression      `json:"compression,omitempty"`
}

// UnmarshalJSON is the custom unmarshaler for HTTPDatasetTypeProperties struct.
func (hdtp *HTTPDatasetTypeProperties) UnmarshalJSON(body []byte) error {
	var m map[string]*json.RawMessage
	err := json.Unmarshal(body, &m)
	if err != nil {
		return err
	}
	var v *json.RawMessage

	v = m["relativeUrl"]
	if v != nil {
		var relativeURL map[string]interface{}
		err = json.Unmarshal(*m["relativeUrl"], &relativeURL)
		if err != nil {
			return err
		}
		hdtp.RelativeURL = &relativeURL
	}

	v = m["requestMethod"]
	if v != nil {
		var requestMethod map[string]interface{}
		err = json.Unmarshal(*m["requestMethod"], &requestMethod)
		if err != nil {
			return err
		}
		hdtp.RequestMethod = &requestMethod
	}

	v = m["requestBody"]
	if v != nil {
		var requestBody map[string]interface{}
		err = json.Unmarshal(*m["requestBody"], &requestBody)
		if err != nil {
			return err
		}
		hdtp.RequestBody = &requestBody
	}

	v = m["additionalHeaders"]
	if v != nil {
		var additionalHeaders map[string]interface{}
		err = json.Unmarshal(*m["additionalHeaders"], &additionalHeaders)
		if err != nil {
			return err
		}
		hdtp.AdditionalHeaders = &additionalHeaders
	}

	v = m["partitionedBy"]
	if v != nil {
		var partitionedBy DatasetPartition
		err = json.Unmarshal(*m["partitionedBy"], &partitionedBy)
		if err != nil {
			return err
		}
		hdtp.PartitionedBy = &partitionedBy
	}

	v = m["format"]
	if v != nil {
		formatVar, err := unmarshalDatasetStorageFormat(*m["format"])
		if err != nil {
			return err
		}
		hdtp.Format = formatVar
	}

	v = m["compression"]
	if v != nil {
		compression, err := unmarshalDatasetCompression(*m["compression"])
		if err != nil {
			return err
		}
		hdtp.Compression = compression
	}

	return nil
}

// HTTPLinkedService is linked service for an HTTP source.
type HTTPLinkedService struct {
	ConnectVia                       *IntegrationRuntimeReference `json:"connectVia,omitempty"`
	Description                      *string                      `json:"description,omitempty"`
	Type                             TypeLinkedService            `json:"type,omitempty"`
	*HTTPLinkedServiceTypeProperties `json:"typeProperties,omitempty"`
}

// MarshalJSON is the custom marshaler for HTTPLinkedService.
func (hls HTTPLinkedService) MarshalJSON() ([]byte, error) {
	hls.Type = TypeHTTPServer
	type Alias HTTPLinkedService
	return json.Marshal(&struct {
		Alias
	}{
		Alias: (Alias)(hls),
	})
}

// AsAzureDataLakeAnalyticsLinkedService is the LinkedService implementation for HTTPLinkedService.
func (hls HTTPLinkedService) AsAzureDataLakeAnalyticsLinkedService() (*AzureDataLakeAnalyticsLinkedService, bool) {
	return nil, false
}

// AsHDInsightOnDemandLinkedService is the LinkedService implementation for HTTPLinkedService.
func (hls HTTPLinkedService) AsHDInsightOnDemandLinkedService() (*HDInsightOnDemandLinkedService, bool) {
	return nil, false
}

// AsSapHanaLinkedService is the LinkedService implementation for HTTPLinkedService.
func (hls HTTPLinkedService) AsSapHanaLinkedService() (*SapHanaLinkedService, bool) {
	return nil, false
}

// AsSapBWLinkedService is the LinkedService implementation for HTTPLinkedService.
func (hls HTTPLinkedService) AsSapBWLinkedService() (*SapBWLinkedService, bool) {
	return nil, false
}

// AsSftpServerLinkedService is the LinkedService implementation for HTTPLinkedService.
func (hls HTTPLinkedService) AsSftpServerLinkedService() (*SftpServerLinkedService, bool) {
	return nil, false
}

// AsFtpServerLinkedService is the LinkedService implementation for HTTPLinkedService.
func (hls HTTPLinkedService) AsFtpServerLinkedService() (*FtpServerLinkedService, bool) {
	return nil, false
}

// AsHTTPLinkedService is the LinkedService implementation for HTTPLinkedService.
func (hls HTTPLinkedService) AsHTTPLinkedService() (*HTTPLinkedService, bool) {
	return &hls, true
}

// AsAzureSearchLinkedService is the LinkedService implementation for HTTPLinkedService.
func (hls HTTPLinkedService) AsAzureSearchLinkedService() (*AzureSearchLinkedService, bool) {
	return nil, false
}

// AsCustomDataSourceLinkedService is the LinkedService implementation for HTTPLinkedService.
func (hls HTTPLinkedService) AsCustomDataSourceLinkedService() (*CustomDataSourceLinkedService, bool) {
	return nil, false
}

// AsAmazonRedshiftLinkedService is the LinkedService implementation for HTTPLinkedService.
func (hls HTTPLinkedService) AsAmazonRedshiftLinkedService() (*AmazonRedshiftLinkedService, bool) {
	return nil, false
}

// AsAmazonS3LinkedService is the LinkedService implementation for HTTPLinkedService.
func (hls HTTPLinkedService) AsAmazonS3LinkedService() (*AmazonS3LinkedService, bool) {
	return nil, false
}

// AsSalesforceLinkedService is the LinkedService implementation for HTTPLinkedService.
func (hls HTTPLinkedService) AsSalesforceLinkedService() (*SalesforceLinkedService, bool) {
	return nil, false
}

// AsAzureDataLakeStoreLinkedService is the LinkedService implementation for HTTPLinkedService.
func (hls HTTPLinkedService) AsAzureDataLakeStoreLinkedService() (*AzureDataLakeStoreLinkedService, bool) {
	return nil, false
}

// AsMongoDbLinkedService is the LinkedService implementation for HTTPLinkedService.
func (hls HTTPLinkedService) AsMongoDbLinkedService() (*MongoDbLinkedService, bool) {
	return nil, false
}

// AsCassandraLinkedService is the LinkedService implementation for HTTPLinkedService.
func (hls HTTPLinkedService) AsCassandraLinkedService() (*CassandraLinkedService, bool) {
	return nil, false
}

// AsWebLinkedService is the LinkedService implementation for HTTPLinkedService.
func (hls HTTPLinkedService) AsWebLinkedService() (*WebLinkedService, bool) {
	return nil, false
}

// AsODataLinkedService is the LinkedService implementation for HTTPLinkedService.
func (hls HTTPLinkedService) AsODataLinkedService() (*ODataLinkedService, bool) {
	return nil, false
}

// AsHdfsLinkedService is the LinkedService implementation for HTTPLinkedService.
func (hls HTTPLinkedService) AsHdfsLinkedService() (*HdfsLinkedService, bool) {
	return nil, false
}

// AsOdbcLinkedService is the LinkedService implementation for HTTPLinkedService.
func (hls HTTPLinkedService) AsOdbcLinkedService() (*OdbcLinkedService, bool) {
	return nil, false
}

// AsAzureMLLinkedService is the LinkedService implementation for HTTPLinkedService.
func (hls HTTPLinkedService) AsAzureMLLinkedService() (*AzureMLLinkedService, bool) {
	return nil, false
}

// AsTeradataLinkedService is the LinkedService implementation for HTTPLinkedService.
func (hls HTTPLinkedService) AsTeradataLinkedService() (*TeradataLinkedService, bool) {
	return nil, false
}

// AsDb2LinkedService is the LinkedService implementation for HTTPLinkedService.
func (hls HTTPLinkedService) AsDb2LinkedService() (*Db2LinkedService, bool) {
	return nil, false
}

// AsSybaseLinkedService is the LinkedService implementation for HTTPLinkedService.
func (hls HTTPLinkedService) AsSybaseLinkedService() (*SybaseLinkedService, bool) {
	return nil, false
}

// AsPostgreSQLLinkedService is the LinkedService implementation for HTTPLinkedService.
func (hls HTTPLinkedService) AsPostgreSQLLinkedService() (*PostgreSQLLinkedService, bool) {
	return nil, false
}

// AsMySQLLinkedService is the LinkedService implementation for HTTPLinkedService.
func (hls HTTPLinkedService) AsMySQLLinkedService() (*MySQLLinkedService, bool) {
	return nil, false
}

// AsOracleLinkedService is the LinkedService implementation for HTTPLinkedService.
func (hls HTTPLinkedService) AsOracleLinkedService() (*OracleLinkedService, bool) {
	return nil, false
}

// AsFileServerLinkedService is the LinkedService implementation for HTTPLinkedService.
func (hls HTTPLinkedService) AsFileServerLinkedService() (*FileServerLinkedService, bool) {
	return nil, false
}

// AsHDInsightLinkedService is the LinkedService implementation for HTTPLinkedService.
func (hls HTTPLinkedService) AsHDInsightLinkedService() (*HDInsightLinkedService, bool) {
	return nil, false
}

// AsDynamicsLinkedService is the LinkedService implementation for HTTPLinkedService.
func (hls HTTPLinkedService) AsDynamicsLinkedService() (*DynamicsLinkedService, bool) {
	return nil, false
}

// AsCosmosDbLinkedService is the LinkedService implementation for HTTPLinkedService.
func (hls HTTPLinkedService) AsCosmosDbLinkedService() (*CosmosDbLinkedService, bool) {
	return nil, false
}

// AsAzureKeyVaultLinkedService is the LinkedService implementation for HTTPLinkedService.
func (hls HTTPLinkedService) AsAzureKeyVaultLinkedService() (*AzureKeyVaultLinkedService, bool) {
	return nil, false
}

// AsAzureBatchLinkedService is the LinkedService implementation for HTTPLinkedService.
func (hls HTTPLinkedService) AsAzureBatchLinkedService() (*AzureBatchLinkedService, bool) {
	return nil, false
}

// AsAzureSQLDatabaseLinkedService is the LinkedService implementation for HTTPLinkedService.
func (hls HTTPLinkedService) AsAzureSQLDatabaseLinkedService() (*AzureSQLDatabaseLinkedService, bool) {
	return nil, false
}

// AsSQLServerLinkedService is the LinkedService implementation for HTTPLinkedService.
func (hls HTTPLinkedService) AsSQLServerLinkedService() (*SQLServerLinkedService, bool) {
	return nil, false
}

// AsAzureSQLDWLinkedService is the LinkedService implementation for HTTPLinkedService.
func (hls HTTPLinkedService) AsAzureSQLDWLinkedService() (*AzureSQLDWLinkedService, bool) {
	return nil, false
}

// AsAzureStorageLinkedService is the LinkedService implementation for HTTPLinkedService.
func (hls HTTPLinkedService) AsAzureStorageLinkedService() (*AzureStorageLinkedService, bool) {
	return nil, false
}

// HTTPLinkedServiceTypeProperties is properties specific to this linked service type.
type HTTPLinkedServiceTypeProperties struct {
	URL                               *map[string]interface{} `json:"url,omitempty"`
	AuthenticationType                HTTPAuthenticationType  `json:"authenticationType,omitempty"`
	UserName                          *map[string]interface{} `json:"userName,omitempty"`
	Password                          *SecureString           `json:"password,omitempty"`
	EmbeddedCertData                  *map[string]interface{} `json:"embeddedCertData,omitempty"`
	CertThumbprint                    *map[string]interface{} `json:"certThumbprint,omitempty"`
	EncryptedCredential               *map[string]interface{} `json:"encryptedCredential,omitempty"`
	EnableServerCertificateValidation *map[string]interface{} `json:"enableServerCertificateValidation,omitempty"`
}

// HTTPSource is a copy activity source for an HTTP file.
type HTTPSource struct {
	SourceRetryCount   *map[string]interface{} `json:"sourceRetryCount,omitempty"`
	SourceRetryWait    *map[string]interface{} `json:"sourceRetryWait,omitempty"`
	Type               TypeCopySource          `json:"type,omitempty"`
	HTTPRequestTimeout *map[string]interface{} `json:"httpRequestTimeout,omitempty"`
}

// MarshalJSON is the custom marshaler for HTTPSource.
func (hs HTTPSource) MarshalJSON() ([]byte, error) {
	hs.Type = TypeHTTPSource
	type Alias HTTPSource
	return json.Marshal(&struct {
		Alias
	}{
		Alias: (Alias)(hs),
	})
}

// AsAmazonRedshiftSource is the CopySource implementation for HTTPSource.
func (hs HTTPSource) AsAmazonRedshiftSource() (*AmazonRedshiftSource, bool) {
	return nil, false
}

// AsHTTPSource is the CopySource implementation for HTTPSource.
func (hs HTTPSource) AsHTTPSource() (*HTTPSource, bool) {
	return &hs, true
}

// AsAzureDataLakeStoreSource is the CopySource implementation for HTTPSource.
func (hs HTTPSource) AsAzureDataLakeStoreSource() (*AzureDataLakeStoreSource, bool) {
	return nil, false
}

// AsMongoDbSource is the CopySource implementation for HTTPSource.
func (hs HTTPSource) AsMongoDbSource() (*MongoDbSource, bool) {
	return nil, false
}

// AsCassandraSource is the CopySource implementation for HTTPSource.
func (hs HTTPSource) AsCassandraSource() (*CassandraSource, bool) {
	return nil, false
}

// AsWebSource is the CopySource implementation for HTTPSource.
func (hs HTTPSource) AsWebSource() (*WebSource, bool) {
	return nil, false
}

// AsOracleSource is the CopySource implementation for HTTPSource.
func (hs HTTPSource) AsOracleSource() (*OracleSource, bool) {
	return nil, false
}

// AsHdfsSource is the CopySource implementation for HTTPSource.
func (hs HTTPSource) AsHdfsSource() (*HdfsSource, bool) {
	return nil, false
}

// AsFileSystemSource is the CopySource implementation for HTTPSource.
func (hs HTTPSource) AsFileSystemSource() (*FileSystemSource, bool) {
	return nil, false
}

// AsSQLDWSource is the CopySource implementation for HTTPSource.
func (hs HTTPSource) AsSQLDWSource() (*SQLDWSource, bool) {
	return nil, false
}

// AsSQLSource is the CopySource implementation for HTTPSource.
func (hs HTTPSource) AsSQLSource() (*SQLSource, bool) {
	return nil, false
}

// AsRelationalSource is the CopySource implementation for HTTPSource.
func (hs HTTPSource) AsRelationalSource() (*RelationalSource, bool) {
	return nil, false
}

// AsDynamicsSource is the CopySource implementation for HTTPSource.
func (hs HTTPSource) AsDynamicsSource() (*DynamicsSource, bool) {
	return nil, false
}

// AsDocumentDbCollectionSource is the CopySource implementation for HTTPSource.
func (hs HTTPSource) AsDocumentDbCollectionSource() (*DocumentDbCollectionSource, bool) {
	return nil, false
}

// AsBlobSource is the CopySource implementation for HTTPSource.
func (hs HTTPSource) AsBlobSource() (*BlobSource, bool) {
	return nil, false
}

// AsAzureTableSource is the CopySource implementation for HTTPSource.
func (hs HTTPSource) AsAzureTableSource() (*AzureTableSource, bool) {
	return nil, false
}

// IfConditionActivity is this activity evaluates a boolean expression and executes either the activities under the
// ifTrueActivities property or the ifFalseActivities property depending on the result of the expression.
type IfConditionActivity struct {
	Name                               *string               `json:"name,omitempty"`
	Description                        *string               `json:"description,omitempty"`
	DependsOn                          *[]ActivityDependency `json:"dependsOn,omitempty"`
	Type                               TypeActivity          `json:"type,omitempty"`
	*IfConditionActivityTypeProperties `json:"typeProperties,omitempty"`
}

// MarshalJSON is the custom marshaler for IfConditionActivity.
func (ica IfConditionActivity) MarshalJSON() ([]byte, error) {
	ica.Type = TypeIfCondition
	type Alias IfConditionActivity
	return json.Marshal(&struct {
		Alias
	}{
		Alias: (Alias)(ica),
	})
}

// AsUntilActivity is the ControlActivity implementation for IfConditionActivity.
func (ica IfConditionActivity) AsUntilActivity() (*UntilActivity, bool) {
	return nil, false
}

// AsWaitActivity is the ControlActivity implementation for IfConditionActivity.
func (ica IfConditionActivity) AsWaitActivity() (*WaitActivity, bool) {
	return nil, false
}

// AsForEachActivity is the ControlActivity implementation for IfConditionActivity.
func (ica IfConditionActivity) AsForEachActivity() (*ForEachActivity, bool) {
	return nil, false
}

// AsIfConditionActivity is the ControlActivity implementation for IfConditionActivity.
func (ica IfConditionActivity) AsIfConditionActivity() (*IfConditionActivity, bool) {
	return &ica, true
}

// AsExecutePipelineActivity is the ControlActivity implementation for IfConditionActivity.
func (ica IfConditionActivity) AsExecutePipelineActivity() (*ExecutePipelineActivity, bool) {
	return nil, false
}

// AsDataLakeAnalyticsUSQLActivity is the ControlActivity implementation for IfConditionActivity.
func (ica IfConditionActivity) AsDataLakeAnalyticsUSQLActivity() (*DataLakeAnalyticsUSQLActivity, bool) {
	return nil, false
}

// AsAzureMLUpdateResourceActivity is the ControlActivity implementation for IfConditionActivity.
func (ica IfConditionActivity) AsAzureMLUpdateResourceActivity() (*AzureMLUpdateResourceActivity, bool) {
	return nil, false
}

// AsAzureMLBatchExecutionActivity is the ControlActivity implementation for IfConditionActivity.
func (ica IfConditionActivity) AsAzureMLBatchExecutionActivity() (*AzureMLBatchExecutionActivity, bool) {
	return nil, false
}

// AsGetMetadataActivity is the ControlActivity implementation for IfConditionActivity.
func (ica IfConditionActivity) AsGetMetadataActivity() (*GetMetadataActivity, bool) {
	return nil, false
}

// AsWebActivity is the ControlActivity implementation for IfConditionActivity.
func (ica IfConditionActivity) AsWebActivity() (*WebActivity, bool) {
	return nil, false
}

// AsLookupActivity is the ControlActivity implementation for IfConditionActivity.
func (ica IfConditionActivity) AsLookupActivity() (*LookupActivity, bool) {
	return nil, false
}

// AsSQLServerStoredProcedureActivity is the ControlActivity implementation for IfConditionActivity.
func (ica IfConditionActivity) AsSQLServerStoredProcedureActivity() (*SQLServerStoredProcedureActivity, bool) {
	return nil, false
}

// AsCustomActivity is the ControlActivity implementation for IfConditionActivity.
func (ica IfConditionActivity) AsCustomActivity() (*CustomActivity, bool) {
	return nil, false
}

// AsHDInsightSparkActivity is the ControlActivity implementation for IfConditionActivity.
func (ica IfConditionActivity) AsHDInsightSparkActivity() (*HDInsightSparkActivity, bool) {
	return nil, false
}

// AsHDInsightStreamingActivity is the ControlActivity implementation for IfConditionActivity.
func (ica IfConditionActivity) AsHDInsightStreamingActivity() (*HDInsightStreamingActivity, bool) {
	return nil, false
}

// AsHDInsightMapReduceActivity is the ControlActivity implementation for IfConditionActivity.
func (ica IfConditionActivity) AsHDInsightMapReduceActivity() (*HDInsightMapReduceActivity, bool) {
	return nil, false
}

// AsHDInsightPigActivity is the ControlActivity implementation for IfConditionActivity.
func (ica IfConditionActivity) AsHDInsightPigActivity() (*HDInsightPigActivity, bool) {
	return nil, false
}

// AsHDInsightHiveActivity is the ControlActivity implementation for IfConditionActivity.
func (ica IfConditionActivity) AsHDInsightHiveActivity() (*HDInsightHiveActivity, bool) {
	return nil, false
}

// AsCopyActivity is the ControlActivity implementation for IfConditionActivity.
func (ica IfConditionActivity) AsCopyActivity() (*CopyActivity, bool) {
	return nil, false
}

// AsExecutionActivity is the ControlActivity implementation for IfConditionActivity.
func (ica IfConditionActivity) AsExecutionActivity() (*ExecutionActivity, bool) {
	return nil, false
}

// AsControlActivity is the ControlActivity implementation for IfConditionActivity.
func (ica IfConditionActivity) AsControlActivity() (*ControlActivity, bool) {
	return nil, false
}

// IfConditionActivityTypeProperties is ifCondition activity properties.
type IfConditionActivityTypeProperties struct {
	Expression        *Expression `json:"expression,omitempty"`
	IfTrueActivities  *[]Activity `json:"ifTrueActivities,omitempty"`
	IfFalseActivities *[]Activity `json:"ifFalseActivities,omitempty"`
}

// UnmarshalJSON is the custom unmarshaler for IfConditionActivityTypeProperties struct.
func (icatp *IfConditionActivityTypeProperties) UnmarshalJSON(body []byte) error {
	var m map[string]*json.RawMessage
	err := json.Unmarshal(body, &m)
	if err != nil {
		return err
	}
	var v *json.RawMessage

	v = m["expression"]
	if v != nil {
		var expression Expression
		err = json.Unmarshal(*m["expression"], &expression)
		if err != nil {
			return err
		}
		icatp.Expression = &expression
	}

	v = m["ifTrueActivities"]
	if v != nil {
		ifTrueActivities, err := unmarshalActivityArray(*m["ifTrueActivities"])
		if err != nil {
			return err
		}
		icatp.IfTrueActivities = &ifTrueActivities
	}

	v = m["ifFalseActivities"]
	if v != nil {
		ifFalseActivities, err := unmarshalActivityArray(*m["ifFalseActivities"])
		if err != nil {
			return err
		}
		icatp.IfFalseActivities = &ifFalseActivities
	}

	return nil
}

// IntegrationRuntime is azure Data Factory nested object which serves as a compute resource for activities.
type IntegrationRuntime interface {
	AsSelfHostedIntegrationRuntime() (*SelfHostedIntegrationRuntime, bool)
	AsManagedIntegrationRuntime() (*ManagedIntegrationRuntime, bool)
}

func unmarshalIntegrationRuntime(body []byte) (IntegrationRuntime, error) {
	var m map[string]interface{}
	err := json.Unmarshal(body, &m)
	if err != nil {
		return nil, err
	}

	switch m["type"] {
	case string(TypeSelfHosted):
		var shir SelfHostedIntegrationRuntime
		err := json.Unmarshal(body, &shir)
		return shir, err
	case string(TypeManaged):
		var mir ManagedIntegrationRuntime
		err := json.Unmarshal(body, &mir)
		return mir, err
	default:
		return nil, errors.New("Unsupported type")
	}
}
func unmarshalIntegrationRuntimeArray(body []byte) ([]IntegrationRuntime, error) {
	var rawMessages []*json.RawMessage
	err := json.Unmarshal(body, &rawMessages)
	if err != nil {
		return nil, err
	}

	irArray := make([]IntegrationRuntime, len(rawMessages))

	for index, rawMessage := range rawMessages {
		ir, err := unmarshalIntegrationRuntime(*rawMessage)
		if err != nil {
			return nil, err
		}
		irArray[index] = ir
	}
	return irArray, nil
}

// IntegrationRuntimeAuthKeys is the integration runtime authentication keys.
type IntegrationRuntimeAuthKeys struct {
	autorest.Response `json:"-"`
	AuthKey1          *string `json:"authKey1,omitempty"`
	AuthKey2          *string `json:"authKey2,omitempty"`
}

// IntegrationRuntimeComputeProperties is the compute resource properties for managed integration runtime.
type IntegrationRuntimeComputeProperties struct {
	Location                     *string                           `json:"location,omitempty"`
	NodeSize                     *string                           `json:"nodeSize,omitempty"`
	NumberOfNodes                *int32                            `json:"numberOfNodes,omitempty"`
	MaxParallelExecutionsPerNode *int32                            `json:"maxParallelExecutionsPerNode,omitempty"`
	VNetProperties               *IntegrationRuntimeVNetProperties `json:"vNetProperties,omitempty"`
}

// IntegrationRuntimeConnectionInfo is connection information for encrypting the on-premises data source credentials.
type IntegrationRuntimeConnectionInfo struct {
	autorest.Response      `json:"-"`
	ServiceToken           *string `json:"serviceToken,omitempty"`
	IdentityCertThumbprint *string `json:"identityCertThumbprint,omitempty"`
	HostServiceURI         *string `json:"hostServiceUri,omitempty"`
	Version                *string `json:"version,omitempty"`
	PublicKey              *string `json:"publicKey,omitempty"`
	IsIdentityCertExprired *bool   `json:"isIdentityCertExprired,omitempty"`
}

// IntegrationRuntimeListResponse is a list of integration runtime resources.
type IntegrationRuntimeListResponse struct {
	autorest.Response `json:"-"`
	Value             *[]IntegrationRuntimeResource `json:"value,omitempty"`
	NextLink          *string                       `json:"nextLink,omitempty"`
}

// IntegrationRuntimeListResponsePreparer prepares a request to retrieve the next set of results. It returns
// nil if no more results exist.
func (client IntegrationRuntimeListResponse) IntegrationRuntimeListResponsePreparer() (*http.Request, error) {
	if client.NextLink == nil || len(to.String(client.NextLink)) <= 0 {
		return nil, nil
	}
	return autorest.Prepare(&http.Request{},
		autorest.AsJSON(),
		autorest.AsGet(),
		autorest.WithBaseURL(to.String(client.NextLink)))
}

// IntegrationRuntimeMonitoringData is get monitoring data response.
type IntegrationRuntimeMonitoringData struct {
	autorest.Response `json:"-"`
	Name              *string                                 `json:"name,omitempty"`
	Nodes             *[]IntegrationRuntimeNodeMonitoringData `json:"nodes,omitempty"`
}

// IntegrationRuntimeNodeMonitoringData is monitoring data for integration runtime node.
type IntegrationRuntimeNodeMonitoringData struct {
	NodeName              *string  `json:"nodeName,omitempty"`
	AvailableMemoryInMB   *int32   `json:"availableMemoryInMB,omitempty"`
	CPUUtilization        *float64 `json:"cpuUtilization,omitempty"`
	ConcurrentJobsLimit   *int32   `json:"concurrentJobsLimit,omitempty"`
	ConcurrentJobsRunning *int32   `json:"concurrentJobsRunning,omitempty"`
	MaxConcurrentJobs     *int32   `json:"maxConcurrentJobs,omitempty"`
	SentBytes             *float64 `json:"sentBytes,omitempty"`
	ReceivedBytes         *float64 `json:"receivedBytes,omitempty"`
}

// IntegrationRuntimeReference is integration runtime reference type.
type IntegrationRuntimeReference struct {
	Type          *string                             `json:"type,omitempty"`
	ReferenceName *string                             `json:"referenceName,omitempty"`
	Parameters    *map[string]*map[string]interface{} `json:"parameters,omitempty"`
}

// IntegrationRuntimeRegenerateKeyParameters is parameters to regenerate the authentication key.
type IntegrationRuntimeRegenerateKeyParameters struct {
	KeyName IntegrationRuntimeAuthKeyName `json:"keyName,omitempty"`
}

// IntegrationRuntimeRemoveNodeRequest is request to remove a node.
type IntegrationRuntimeRemoveNodeRequest struct {
	NodeName *string `json:"nodeName,omitempty"`
}

// IntegrationRuntimeResource is integration runtime resource type.
type IntegrationRuntimeResource struct {
	autorest.Response `json:"-"`
	ID                *string            `json:"id,omitempty"`
	Name              *string            `json:"name,omitempty"`
	Type              *string            `json:"type,omitempty"`
	Etag              *string            `json:"etag,omitempty"`
	Properties        IntegrationRuntime `json:"properties,omitempty"`
}

// UnmarshalJSON is the custom unmarshaler for IntegrationRuntimeResource struct.
func (irr *IntegrationRuntimeResource) UnmarshalJSON(body []byte) error {
	var m map[string]*json.RawMessage
	err := json.Unmarshal(body, &m)
	if err != nil {
		return err
	}
	var v *json.RawMessage

	v = m["properties"]
	if v != nil {
		properties, err := unmarshalIntegrationRuntime(*m["properties"])
		if err != nil {
			return err
		}
		irr.Properties = properties
	}

	v = m["id"]
	if v != nil {
		var ID string
		err = json.Unmarshal(*m["id"], &ID)
		if err != nil {
			return err
		}
		irr.ID = &ID
	}

	v = m["name"]
	if v != nil {
		var name string
		err = json.Unmarshal(*m["name"], &name)
		if err != nil {
			return err
		}
		irr.Name = &name
	}

	v = m["type"]
	if v != nil {
		var typeVar string
		err = json.Unmarshal(*m["type"], &typeVar)
		if err != nil {
			return err
		}
		irr.Type = &typeVar
	}

	v = m["etag"]
	if v != nil {
		var etag string
		err = json.Unmarshal(*m["etag"], &etag)
		if err != nil {
			return err
		}
		irr.Etag = &etag
	}

	return nil
}

// IntegrationRuntimeSsisCatalogInfo is catalog information for managed dedicated integration runtime.
type IntegrationRuntimeSsisCatalogInfo struct {
	CatalogServerEndpoint *string                                  `json:"catalogServerEndpoint,omitempty"`
	CatalogAdminUserName  *string                                  `json:"catalogAdminUserName,omitempty"`
	CatalogAdminPassword  *SecureString                            `json:"catalogAdminPassword,omitempty"`
	CatalogPricingTier    IntegrationRuntimeSsisCatalogPricingTier `json:"catalogPricingTier,omitempty"`
}

// IntegrationRuntimeSsisProperties is SSIS properties for managed integration runtime.
type IntegrationRuntimeSsisProperties struct {
	CatalogInfo *IntegrationRuntimeSsisCatalogInfo `json:"catalogInfo,omitempty"`
}

// IntegrationRuntimeStatus is integration runtime status.
type IntegrationRuntimeStatus interface {
	AsSelfHostedIntegrationRuntimeStatus() (*SelfHostedIntegrationRuntimeStatus, bool)
	AsManagedIntegrationRuntimeStatus() (*ManagedIntegrationRuntimeStatus, bool)
}

func unmarshalIntegrationRuntimeStatus(body []byte) (IntegrationRuntimeStatus, error) {
	var m map[string]interface{}
	err := json.Unmarshal(body, &m)
	if err != nil {
		return nil, err
	}

	switch m["type"] {
	case string(TypeSelfHosted):
		var shirs SelfHostedIntegrationRuntimeStatus
		err := json.Unmarshal(body, &shirs)
		return shirs, err
	case string(TypeManaged):
		var mirs ManagedIntegrationRuntimeStatus
		err := json.Unmarshal(body, &mirs)
		return mirs, err
	default:
		return nil, errors.New("Unsupported type")
	}
}
func unmarshalIntegrationRuntimeStatusArray(body []byte) ([]IntegrationRuntimeStatus, error) {
	var rawMessages []*json.RawMessage
	err := json.Unmarshal(body, &rawMessages)
	if err != nil {
		return nil, err
	}

	irsArray := make([]IntegrationRuntimeStatus, len(rawMessages))

	for index, rawMessage := range rawMessages {
		irs, err := unmarshalIntegrationRuntimeStatus(*rawMessage)
		if err != nil {
			return nil, err
		}
		irsArray[index] = irs
	}
	return irsArray, nil
}

// IntegrationRuntimeStatusListResponse is a list of integration runtime status.
type IntegrationRuntimeStatusListResponse struct {
	Value    *[]IntegrationRuntimeStatusResponse `json:"value,omitempty"`
	NextLink *string                             `json:"nextLink,omitempty"`
}

// IntegrationRuntimeStatusResponse is integration runtime status response.
type IntegrationRuntimeStatusResponse struct {
	autorest.Response `json:"-"`
	Name              *string                  `json:"name,omitempty"`
	Properties        IntegrationRuntimeStatus `json:"properties,omitempty"`
}

// UnmarshalJSON is the custom unmarshaler for IntegrationRuntimeStatusResponse struct.
func (irsr *IntegrationRuntimeStatusResponse) UnmarshalJSON(body []byte) error {
	var m map[string]*json.RawMessage
	err := json.Unmarshal(body, &m)
	if err != nil {
		return err
	}
	var v *json.RawMessage

	v = m["name"]
	if v != nil {
		var name string
		err = json.Unmarshal(*m["name"], &name)
		if err != nil {
			return err
		}
		irsr.Name = &name
	}

	v = m["properties"]
	if v != nil {
		properties, err := unmarshalIntegrationRuntimeStatus(*m["properties"])
		if err != nil {
			return err
		}
		irsr.Properties = properties
	}

	return nil
}

// IntegrationRuntimeVNetProperties is vNet properties for managed integration runtime.
type IntegrationRuntimeVNetProperties struct {
	VNetID *string `json:"vNetId,omitempty"`
	Subnet *string `json:"subnet,omitempty"`
}

// JSONFormat is the data stored in JSON format.
type JSONFormat struct {
	Serializer       *map[string]interface{}  `json:"serializer,omitempty"`
	Deserializer     *map[string]interface{}  `json:"deserializer,omitempty"`
	Type             TypeDatasetStorageFormat `json:"type,omitempty"`
	FilePattern      JSONFormatFilePattern    `json:"filePattern,omitempty"`
	NestingSeparator *map[string]interface{}  `json:"nestingSeparator,omitempty"`
	EncodingName     *map[string]interface{}  `json:"encodingName,omitempty"`
}

// MarshalJSON is the custom marshaler for JSONFormat.
func (jf JSONFormat) MarshalJSON() ([]byte, error) {
	jf.Type = TypeJSONFormat
	type Alias JSONFormat
	return json.Marshal(&struct {
		Alias
	}{
		Alias: (Alias)(jf),
	})
}

// AsParquetFormat is the DatasetStorageFormat implementation for JSONFormat.
func (jf JSONFormat) AsParquetFormat() (*ParquetFormat, bool) {
	return nil, false
}

// AsOrcFormat is the DatasetStorageFormat implementation for JSONFormat.
func (jf JSONFormat) AsOrcFormat() (*OrcFormat, bool) {
	return nil, false
}

// AsAvroFormat is the DatasetStorageFormat implementation for JSONFormat.
func (jf JSONFormat) AsAvroFormat() (*AvroFormat, bool) {
	return nil, false
}

// AsJSONFormat is the DatasetStorageFormat implementation for JSONFormat.
func (jf JSONFormat) AsJSONFormat() (*JSONFormat, bool) {
	return &jf, true
}

// AsTextFormat is the DatasetStorageFormat implementation for JSONFormat.
func (jf JSONFormat) AsTextFormat() (*TextFormat, bool) {
	return nil, false
}

// LinkedService is the Azure Data Factory nested object which contains the information and credential which can be
// used to connect with related store or compute resource.
type LinkedService interface {
	AsAzureDataLakeAnalyticsLinkedService() (*AzureDataLakeAnalyticsLinkedService, bool)
	AsHDInsightOnDemandLinkedService() (*HDInsightOnDemandLinkedService, bool)
	AsSapHanaLinkedService() (*SapHanaLinkedService, bool)
	AsSapBWLinkedService() (*SapBWLinkedService, bool)
	AsSftpServerLinkedService() (*SftpServerLinkedService, bool)
	AsFtpServerLinkedService() (*FtpServerLinkedService, bool)
	AsHTTPLinkedService() (*HTTPLinkedService, bool)
	AsAzureSearchLinkedService() (*AzureSearchLinkedService, bool)
	AsCustomDataSourceLinkedService() (*CustomDataSourceLinkedService, bool)
	AsAmazonRedshiftLinkedService() (*AmazonRedshiftLinkedService, bool)
	AsAmazonS3LinkedService() (*AmazonS3LinkedService, bool)
	AsSalesforceLinkedService() (*SalesforceLinkedService, bool)
	AsAzureDataLakeStoreLinkedService() (*AzureDataLakeStoreLinkedService, bool)
	AsMongoDbLinkedService() (*MongoDbLinkedService, bool)
	AsCassandraLinkedService() (*CassandraLinkedService, bool)
	AsWebLinkedService() (*WebLinkedService, bool)
	AsODataLinkedService() (*ODataLinkedService, bool)
	AsHdfsLinkedService() (*HdfsLinkedService, bool)
	AsOdbcLinkedService() (*OdbcLinkedService, bool)
	AsAzureMLLinkedService() (*AzureMLLinkedService, bool)
	AsTeradataLinkedService() (*TeradataLinkedService, bool)
	AsDb2LinkedService() (*Db2LinkedService, bool)
	AsSybaseLinkedService() (*SybaseLinkedService, bool)
	AsPostgreSQLLinkedService() (*PostgreSQLLinkedService, bool)
	AsMySQLLinkedService() (*MySQLLinkedService, bool)
	AsOracleLinkedService() (*OracleLinkedService, bool)
	AsFileServerLinkedService() (*FileServerLinkedService, bool)
	AsHDInsightLinkedService() (*HDInsightLinkedService, bool)
	AsDynamicsLinkedService() (*DynamicsLinkedService, bool)
	AsCosmosDbLinkedService() (*CosmosDbLinkedService, bool)
	AsAzureKeyVaultLinkedService() (*AzureKeyVaultLinkedService, bool)
	AsAzureBatchLinkedService() (*AzureBatchLinkedService, bool)
	AsAzureSQLDatabaseLinkedService() (*AzureSQLDatabaseLinkedService, bool)
	AsSQLServerLinkedService() (*SQLServerLinkedService, bool)
	AsAzureSQLDWLinkedService() (*AzureSQLDWLinkedService, bool)
	AsAzureStorageLinkedService() (*AzureStorageLinkedService, bool)
}

func unmarshalLinkedService(body []byte) (LinkedService, error) {
	var m map[string]interface{}
	err := json.Unmarshal(body, &m)
	if err != nil {
		return nil, err
	}

	switch m["type"] {
	case string(TypeAzureDataLakeAnalytics):
		var adlals AzureDataLakeAnalyticsLinkedService
		err := json.Unmarshal(body, &adlals)
		return adlals, err
	case string(TypeHDInsightOnDemand):
		var hiodls HDInsightOnDemandLinkedService
		err := json.Unmarshal(body, &hiodls)
		return hiodls, err
	case string(TypeSapHana):
		var shls SapHanaLinkedService
		err := json.Unmarshal(body, &shls)
		return shls, err
	case string(TypeSapBW):
		var sbls SapBWLinkedService
		err := json.Unmarshal(body, &sbls)
		return sbls, err
	case string(TypeSftp):
		var ssls SftpServerLinkedService
		err := json.Unmarshal(body, &ssls)
		return ssls, err
	case string(TypeFtpServer):
		var fsls FtpServerLinkedService
		err := json.Unmarshal(body, &fsls)
		return fsls, err
	case string(TypeHTTPServer):
		var hls HTTPLinkedService
		err := json.Unmarshal(body, &hls)
		return hls, err
	case string(TypeAzureSearch):
		var asls AzureSearchLinkedService
		err := json.Unmarshal(body, &asls)
		return asls, err
	case string(TypeCustomDataSource):
		var cdsls CustomDataSourceLinkedService
		err := json.Unmarshal(body, &cdsls)
		return cdsls, err
	case string(TypeAmazonRedshift):
		var arls AmazonRedshiftLinkedService
		err := json.Unmarshal(body, &arls)
		return arls, err
	case string(TypeAmazonS3):
		var asls AmazonS3LinkedService
		err := json.Unmarshal(body, &asls)
		return asls, err
	case string(TypeSalesforce):
		var sls SalesforceLinkedService
		err := json.Unmarshal(body, &sls)
		return sls, err
	case string(TypeAzureDataLakeStore):
		var adlsls AzureDataLakeStoreLinkedService
		err := json.Unmarshal(body, &adlsls)
		return adlsls, err
	case string(TypeMongoDb):
		var mdls MongoDbLinkedService
		err := json.Unmarshal(body, &mdls)
		return mdls, err
	case string(TypeCassandra):
		var cls CassandraLinkedService
		err := json.Unmarshal(body, &cls)
		return cls, err
	case string(TypeWeb):
		var wls WebLinkedService
		err := json.Unmarshal(body, &wls)
		return wls, err
	case string(TypeOData):
		var odls ODataLinkedService
		err := json.Unmarshal(body, &odls)
		return odls, err
	case string(TypeHdfs):
		var hls HdfsLinkedService
		err := json.Unmarshal(body, &hls)
		return hls, err
	case string(TypeOdbc):
		var ols OdbcLinkedService
		err := json.Unmarshal(body, &ols)
		return ols, err
	case string(TypeAzureML):
		var amls AzureMLLinkedService
		err := json.Unmarshal(body, &amls)
		return amls, err
	case string(TypeTeradata):
		var TLSVar TeradataLinkedService
		err := json.Unmarshal(body, &TLSVar)
		return TLSVar, err
	case string(TypeDb2):
		var d2ls Db2LinkedService
		err := json.Unmarshal(body, &d2ls)
		return d2ls, err
	case string(TypeSybase):
		var sls SybaseLinkedService
		err := json.Unmarshal(body, &sls)
		return sls, err
	case string(TypePostgreSQL):
		var psls PostgreSQLLinkedService
		err := json.Unmarshal(body, &psls)
		return psls, err
	case string(TypeMySQL):
		var msls MySQLLinkedService
		err := json.Unmarshal(body, &msls)
		return msls, err
	case string(TypeOracle):
		var ols OracleLinkedService
		err := json.Unmarshal(body, &ols)
		return ols, err
	case string(TypeFileServer):
		var fsls FileServerLinkedService
		err := json.Unmarshal(body, &fsls)
		return fsls, err
	case string(TypeHDInsight):
		var hils HDInsightLinkedService
		err := json.Unmarshal(body, &hils)
		return hils, err
	case string(TypeDynamics):
		var dls DynamicsLinkedService
		err := json.Unmarshal(body, &dls)
		return dls, err
	case string(TypeCosmosDb):
		var cdls CosmosDbLinkedService
		err := json.Unmarshal(body, &cdls)
		return cdls, err
	case string(TypeAzureKeyVault):
		var akvls AzureKeyVaultLinkedService
		err := json.Unmarshal(body, &akvls)
		return akvls, err
	case string(TypeAzureBatch):
		var abls AzureBatchLinkedService
		err := json.Unmarshal(body, &abls)
		return abls, err
	case string(TypeAzureSQLDatabase):
		var asdls AzureSQLDatabaseLinkedService
		err := json.Unmarshal(body, &asdls)
		return asdls, err
	case string(TypeSQLServer):
		var ssls SQLServerLinkedService
		err := json.Unmarshal(body, &ssls)
		return ssls, err
	case string(TypeAzureSQLDW):
		var asdls AzureSQLDWLinkedService
		err := json.Unmarshal(body, &asdls)
		return asdls, err
	case string(TypeAzureStorage):
		var asls AzureStorageLinkedService
		err := json.Unmarshal(body, &asls)
		return asls, err
	default:
		return nil, errors.New("Unsupported type")
	}
}
func unmarshalLinkedServiceArray(body []byte) ([]LinkedService, error) {
	var rawMessages []*json.RawMessage
	err := json.Unmarshal(body, &rawMessages)
	if err != nil {
		return nil, err
	}

	lsArray := make([]LinkedService, len(rawMessages))

	for index, rawMessage := range rawMessages {
		ls, err := unmarshalLinkedService(*rawMessage)
		if err != nil {
			return nil, err
		}
		lsArray[index] = ls
	}
	return lsArray, nil
}

// LinkedServiceListResponse is a list of linked service resources.
type LinkedServiceListResponse struct {
	autorest.Response `json:"-"`
	Value             *[]LinkedServiceResource `json:"value,omitempty"`
	NextLink          *string                  `json:"nextLink,omitempty"`
}

// LinkedServiceListResponsePreparer prepares a request to retrieve the next set of results. It returns
// nil if no more results exist.
func (client LinkedServiceListResponse) LinkedServiceListResponsePreparer() (*http.Request, error) {
	if client.NextLink == nil || len(to.String(client.NextLink)) <= 0 {
		return nil, nil
	}
	return autorest.Prepare(&http.Request{},
		autorest.AsJSON(),
		autorest.AsGet(),
		autorest.WithBaseURL(to.String(client.NextLink)))
}

// LinkedServiceReference is linked service reference type.
type LinkedServiceReference struct {
	Type          *string `json:"type,omitempty"`
	ReferenceName *string `json:"referenceName,omitempty"`
}

// LinkedServiceResource is linked service resource type.
type LinkedServiceResource struct {
	autorest.Response `json:"-"`
	ID                *string       `json:"id,omitempty"`
	Name              *string       `json:"name,omitempty"`
	Type              *string       `json:"type,omitempty"`
	Etag              *string       `json:"etag,omitempty"`
	Properties        LinkedService `json:"properties,omitempty"`
}

// UnmarshalJSON is the custom unmarshaler for LinkedServiceResource struct.
func (lsr *LinkedServiceResource) UnmarshalJSON(body []byte) error {
	var m map[string]*json.RawMessage
	err := json.Unmarshal(body, &m)
	if err != nil {
		return err
	}
	var v *json.RawMessage

	v = m["properties"]
	if v != nil {
		properties, err := unmarshalLinkedService(*m["properties"])
		if err != nil {
			return err
		}
		lsr.Properties = properties
	}

	v = m["id"]
	if v != nil {
		var ID string
		err = json.Unmarshal(*m["id"], &ID)
		if err != nil {
			return err
		}
		lsr.ID = &ID
	}

	v = m["name"]
	if v != nil {
		var name string
		err = json.Unmarshal(*m["name"], &name)
		if err != nil {
			return err
		}
		lsr.Name = &name
	}

	v = m["type"]
	if v != nil {
		var typeVar string
		err = json.Unmarshal(*m["type"], &typeVar)
		if err != nil {
			return err
		}
		lsr.Type = &typeVar
	}

	v = m["etag"]
	if v != nil {
		var etag string
		err = json.Unmarshal(*m["etag"], &etag)
		if err != nil {
			return err
		}
		lsr.Etag = &etag
	}

	return nil
}

// LookupActivity is lookup activity.
type LookupActivity struct {
	Name                          *string                 `json:"name,omitempty"`
	Description                   *string                 `json:"description,omitempty"`
	DependsOn                     *[]ActivityDependency   `json:"dependsOn,omitempty"`
	Type                          TypeActivity            `json:"type,omitempty"`
	LinkedServiceName             *LinkedServiceReference `json:"linkedServiceName,omitempty"`
	Policy                        *ActivityPolicy         `json:"policy,omitempty"`
	*LookupActivityTypeProperties `json:"typeProperties,omitempty"`
}

// MarshalJSON is the custom marshaler for LookupActivity.
func (la LookupActivity) MarshalJSON() ([]byte, error) {
	la.Type = TypeLookup
	type Alias LookupActivity
	return json.Marshal(&struct {
		Alias
	}{
		Alias: (Alias)(la),
	})
}

// AsDataLakeAnalyticsUSQLActivity is the ExecutionActivity implementation for LookupActivity.
func (la LookupActivity) AsDataLakeAnalyticsUSQLActivity() (*DataLakeAnalyticsUSQLActivity, bool) {
	return nil, false
}

// AsAzureMLUpdateResourceActivity is the ExecutionActivity implementation for LookupActivity.
func (la LookupActivity) AsAzureMLUpdateResourceActivity() (*AzureMLUpdateResourceActivity, bool) {
	return nil, false
}

// AsAzureMLBatchExecutionActivity is the ExecutionActivity implementation for LookupActivity.
func (la LookupActivity) AsAzureMLBatchExecutionActivity() (*AzureMLBatchExecutionActivity, bool) {
	return nil, false
}

// AsGetMetadataActivity is the ExecutionActivity implementation for LookupActivity.
func (la LookupActivity) AsGetMetadataActivity() (*GetMetadataActivity, bool) {
	return nil, false
}

// AsWebActivity is the ExecutionActivity implementation for LookupActivity.
func (la LookupActivity) AsWebActivity() (*WebActivity, bool) {
	return nil, false
}

// AsLookupActivity is the ExecutionActivity implementation for LookupActivity.
func (la LookupActivity) AsLookupActivity() (*LookupActivity, bool) {
	return &la, true
}

// AsSQLServerStoredProcedureActivity is the ExecutionActivity implementation for LookupActivity.
func (la LookupActivity) AsSQLServerStoredProcedureActivity() (*SQLServerStoredProcedureActivity, bool) {
	return nil, false
}

// AsCustomActivity is the ExecutionActivity implementation for LookupActivity.
func (la LookupActivity) AsCustomActivity() (*CustomActivity, bool) {
	return nil, false
}

// AsHDInsightSparkActivity is the ExecutionActivity implementation for LookupActivity.
func (la LookupActivity) AsHDInsightSparkActivity() (*HDInsightSparkActivity, bool) {
	return nil, false
}

// AsHDInsightStreamingActivity is the ExecutionActivity implementation for LookupActivity.
func (la LookupActivity) AsHDInsightStreamingActivity() (*HDInsightStreamingActivity, bool) {
	return nil, false
}

// AsHDInsightMapReduceActivity is the ExecutionActivity implementation for LookupActivity.
func (la LookupActivity) AsHDInsightMapReduceActivity() (*HDInsightMapReduceActivity, bool) {
	return nil, false
}

// AsHDInsightPigActivity is the ExecutionActivity implementation for LookupActivity.
func (la LookupActivity) AsHDInsightPigActivity() (*HDInsightPigActivity, bool) {
	return nil, false
}

// AsHDInsightHiveActivity is the ExecutionActivity implementation for LookupActivity.
func (la LookupActivity) AsHDInsightHiveActivity() (*HDInsightHiveActivity, bool) {
	return nil, false
}

// AsCopyActivity is the ExecutionActivity implementation for LookupActivity.
func (la LookupActivity) AsCopyActivity() (*CopyActivity, bool) {
	return nil, false
}

// AsExecutionActivity is the ExecutionActivity implementation for LookupActivity.
func (la LookupActivity) AsExecutionActivity() (*ExecutionActivity, bool) {
	return nil, false
}

// AsUntilActivity is the ExecutionActivity implementation for LookupActivity.
func (la LookupActivity) AsUntilActivity() (*UntilActivity, bool) {
	return nil, false
}

// AsWaitActivity is the ExecutionActivity implementation for LookupActivity.
func (la LookupActivity) AsWaitActivity() (*WaitActivity, bool) {
	return nil, false
}

// AsForEachActivity is the ExecutionActivity implementation for LookupActivity.
func (la LookupActivity) AsForEachActivity() (*ForEachActivity, bool) {
	return nil, false
}

// AsIfConditionActivity is the ExecutionActivity implementation for LookupActivity.
func (la LookupActivity) AsIfConditionActivity() (*IfConditionActivity, bool) {
	return nil, false
}

// AsExecutePipelineActivity is the ExecutionActivity implementation for LookupActivity.
func (la LookupActivity) AsExecutePipelineActivity() (*ExecutePipelineActivity, bool) {
	return nil, false
}

// AsControlActivity is the ExecutionActivity implementation for LookupActivity.
func (la LookupActivity) AsControlActivity() (*ControlActivity, bool) {
	return nil, false
}

// LookupActivityTypeProperties is lookup activity properties.
type LookupActivityTypeProperties struct {
	Source       CopySource              `json:"source,omitempty"`
	Dataset      *DatasetReference       `json:"dataset,omitempty"`
	FirstRowOnly *map[string]interface{} `json:"firstRowOnly,omitempty"`
}

// UnmarshalJSON is the custom unmarshaler for LookupActivityTypeProperties struct.
func (latp *LookupActivityTypeProperties) UnmarshalJSON(body []byte) error {
	var m map[string]*json.RawMessage
	err := json.Unmarshal(body, &m)
	if err != nil {
		return err
	}
	var v *json.RawMessage

	v = m["source"]
	if v != nil {
		source, err := unmarshalCopySource(*m["source"])
		if err != nil {
			return err
		}
		latp.Source = source
	}

	v = m["dataset"]
	if v != nil {
		var dataset DatasetReference
		err = json.Unmarshal(*m["dataset"], &dataset)
		if err != nil {
			return err
		}
		latp.Dataset = &dataset
	}

	v = m["firstRowOnly"]
	if v != nil {
		var firstRowOnly map[string]interface{}
		err = json.Unmarshal(*m["firstRowOnly"], &firstRowOnly)
		if err != nil {
			return err
		}
		latp.FirstRowOnly = &firstRowOnly
	}

	return nil
}

// ManagedIntegrationRuntime is managed integration runtime, including managed elastic and managed dedicated
// integration runtimes.
type ManagedIntegrationRuntime struct {
	Description                              *string                 `json:"description,omitempty"`
	Type                                     Type                    `json:"type,omitempty"`
	State                                    IntegrationRuntimeState `json:"state,omitempty"`
	*ManagedIntegrationRuntimeTypeProperties `json:"typeProperties,omitempty"`
}

// MarshalJSON is the custom marshaler for ManagedIntegrationRuntime.
func (mir ManagedIntegrationRuntime) MarshalJSON() ([]byte, error) {
	mir.Type = TypeManaged
	type Alias ManagedIntegrationRuntime
	return json.Marshal(&struct {
		Alias
	}{
		Alias: (Alias)(mir),
	})
}

// AsSelfHostedIntegrationRuntime is the IntegrationRuntime implementation for ManagedIntegrationRuntime.
func (mir ManagedIntegrationRuntime) AsSelfHostedIntegrationRuntime() (*SelfHostedIntegrationRuntime, bool) {
	return nil, false
}

// AsManagedIntegrationRuntime is the IntegrationRuntime implementation for ManagedIntegrationRuntime.
func (mir ManagedIntegrationRuntime) AsManagedIntegrationRuntime() (*ManagedIntegrationRuntime, bool) {
	return &mir, true
}

// ManagedIntegrationRuntimeError is error definition for managed integration runtime.
type ManagedIntegrationRuntimeError struct {
	Time       *date.Time `json:"time,omitempty"`
	Code       *string    `json:"code,omitempty"`
	Parameters *[]string  `json:"parameters,omitempty"`
	Message    *string    `json:"message,omitempty"`
}

// ManagedIntegrationRuntimeNode is properties of integration runtime node.
type ManagedIntegrationRuntimeNode struct {
	NodeID *string                             `json:"nodeId,omitempty"`
	Status ManagedIntegrationRuntimeNodeStatus `json:"status,omitempty"`
	Errors *[]ManagedIntegrationRuntimeError   `json:"errors,omitempty"`
}

// ManagedIntegrationRuntimeOperationResult is properties of managed integration runtime operation result.
type ManagedIntegrationRuntimeOperationResult struct {
	Type       *string    `json:"type,omitempty"`
	StartTime  *date.Time `json:"startTime,omitempty"`
	Result     *string    `json:"result,omitempty"`
	ErrorCode  *string    `json:"errorCode,omitempty"`
	Parameters *[]string  `json:"parameters,omitempty"`
}

// ManagedIntegrationRuntimeStatus is managed integration runtime status.
type ManagedIntegrationRuntimeStatus struct {
	State                                          IntegrationRuntimeState `json:"state,omitempty"`
	Type                                           Type                    `json:"type,omitempty"`
	*ManagedIntegrationRuntimeStatusTypeProperties `json:"typeProperties,omitempty"`
}

// MarshalJSON is the custom marshaler for ManagedIntegrationRuntimeStatus.
func (mirs ManagedIntegrationRuntimeStatus) MarshalJSON() ([]byte, error) {
	mirs.Type = TypeManaged
	type Alias ManagedIntegrationRuntimeStatus
	return json.Marshal(&struct {
		Alias
	}{
		Alias: (Alias)(mirs),
	})
}

// AsSelfHostedIntegrationRuntimeStatus is the IntegrationRuntimeStatus implementation for ManagedIntegrationRuntimeStatus.
func (mirs ManagedIntegrationRuntimeStatus) AsSelfHostedIntegrationRuntimeStatus() (*SelfHostedIntegrationRuntimeStatus, bool) {
	return nil, false
}

// AsManagedIntegrationRuntimeStatus is the IntegrationRuntimeStatus implementation for ManagedIntegrationRuntimeStatus.
func (mirs ManagedIntegrationRuntimeStatus) AsManagedIntegrationRuntimeStatus() (*ManagedIntegrationRuntimeStatus, bool) {
	return &mirs, true
}

// ManagedIntegrationRuntimeStatusTypeProperties is managed integration runtime status type properties.
type ManagedIntegrationRuntimeStatusTypeProperties struct {
	CreateTime    *date.Time                                `json:"createTime,omitempty"`
	Nodes         *[]ManagedIntegrationRuntimeNode          `json:"nodes,omitempty"`
	OtherErrors   *[]ManagedIntegrationRuntimeError         `json:"otherErrors,omitempty"`
	LastOperation *ManagedIntegrationRuntimeOperationResult `json:"lastOperation,omitempty"`
}

// ManagedIntegrationRuntimeTypeProperties is managed integration runtime type properties.
type ManagedIntegrationRuntimeTypeProperties struct {
	ComputeProperties *IntegrationRuntimeComputeProperties `json:"computeProperties,omitempty"`
	SsisProperties    *IntegrationRuntimeSsisProperties    `json:"ssisProperties,omitempty"`
}

// MongoDbCollectionDataset is the MongoDB database dataset.
type MongoDbCollectionDataset struct {
	Description                             *string                             `json:"description,omitempty"`
	Structure                               *map[string]interface{}             `json:"structure,omitempty"`
	LinkedServiceName                       *LinkedServiceReference             `json:"linkedServiceName,omitempty"`
	Parameters                              *map[string]*ParameterSpecification `json:"parameters,omitempty"`
	Type                                    TypeDataset                         `json:"type,omitempty"`
	*MongoDbCollectionDatasetTypeProperties `json:"typeProperties,omitempty"`
}

// MarshalJSON is the custom marshaler for MongoDbCollectionDataset.
func (mdcd MongoDbCollectionDataset) MarshalJSON() ([]byte, error) {
	mdcd.Type = TypeMongoDbCollection
	type Alias MongoDbCollectionDataset
	return json.Marshal(&struct {
		Alias
	}{
		Alias: (Alias)(mdcd),
	})
}

// AsHTTPDataset is the Dataset implementation for MongoDbCollectionDataset.
func (mdcd MongoDbCollectionDataset) AsHTTPDataset() (*HTTPDataset, bool) {
	return nil, false
}

// AsAzureSearchIndexDataset is the Dataset implementation for MongoDbCollectionDataset.
func (mdcd MongoDbCollectionDataset) AsAzureSearchIndexDataset() (*AzureSearchIndexDataset, bool) {
	return nil, false
}

// AsWebTableDataset is the Dataset implementation for MongoDbCollectionDataset.
func (mdcd MongoDbCollectionDataset) AsWebTableDataset() (*WebTableDataset, bool) {
	return nil, false
}

// AsSQLServerTableDataset is the Dataset implementation for MongoDbCollectionDataset.
func (mdcd MongoDbCollectionDataset) AsSQLServerTableDataset() (*SQLServerTableDataset, bool) {
	return nil, false
}

// AsRelationalTableDataset is the Dataset implementation for MongoDbCollectionDataset.
func (mdcd MongoDbCollectionDataset) AsRelationalTableDataset() (*RelationalTableDataset, bool) {
	return nil, false
}

// AsOracleTableDataset is the Dataset implementation for MongoDbCollectionDataset.
func (mdcd MongoDbCollectionDataset) AsOracleTableDataset() (*OracleTableDataset, bool) {
	return nil, false
}

// AsODataResourceDataset is the Dataset implementation for MongoDbCollectionDataset.
func (mdcd MongoDbCollectionDataset) AsODataResourceDataset() (*ODataResourceDataset, bool) {
	return nil, false
}

// AsMongoDbCollectionDataset is the Dataset implementation for MongoDbCollectionDataset.
func (mdcd MongoDbCollectionDataset) AsMongoDbCollectionDataset() (*MongoDbCollectionDataset, bool) {
	return &mdcd, true
}

// AsFileShareDataset is the Dataset implementation for MongoDbCollectionDataset.
func (mdcd MongoDbCollectionDataset) AsFileShareDataset() (*FileShareDataset, bool) {
	return nil, false
}

// AsAzureDataLakeStoreDataset is the Dataset implementation for MongoDbCollectionDataset.
func (mdcd MongoDbCollectionDataset) AsAzureDataLakeStoreDataset() (*AzureDataLakeStoreDataset, bool) {
	return nil, false
}

// AsDynamicsEntityDataset is the Dataset implementation for MongoDbCollectionDataset.
func (mdcd MongoDbCollectionDataset) AsDynamicsEntityDataset() (*DynamicsEntityDataset, bool) {
	return nil, false
}

// AsDocumentDbCollectionDataset is the Dataset implementation for MongoDbCollectionDataset.
func (mdcd MongoDbCollectionDataset) AsDocumentDbCollectionDataset() (*DocumentDbCollectionDataset, bool) {
	return nil, false
}

// AsCustomDataset is the Dataset implementation for MongoDbCollectionDataset.
func (mdcd MongoDbCollectionDataset) AsCustomDataset() (*CustomDataset, bool) {
	return nil, false
}

// AsCassandraTableDataset is the Dataset implementation for MongoDbCollectionDataset.
func (mdcd MongoDbCollectionDataset) AsCassandraTableDataset() (*CassandraTableDataset, bool) {
	return nil, false
}

// AsAzureSQLDWTableDataset is the Dataset implementation for MongoDbCollectionDataset.
func (mdcd MongoDbCollectionDataset) AsAzureSQLDWTableDataset() (*AzureSQLDWTableDataset, bool) {
	return nil, false
}

// AsAzureSQLTableDataset is the Dataset implementation for MongoDbCollectionDataset.
func (mdcd MongoDbCollectionDataset) AsAzureSQLTableDataset() (*AzureSQLTableDataset, bool) {
	return nil, false
}

// AsAzureTableDataset is the Dataset implementation for MongoDbCollectionDataset.
func (mdcd MongoDbCollectionDataset) AsAzureTableDataset() (*AzureTableDataset, bool) {
	return nil, false
}

// AsAzureBlobDataset is the Dataset implementation for MongoDbCollectionDataset.
func (mdcd MongoDbCollectionDataset) AsAzureBlobDataset() (*AzureBlobDataset, bool) {
	return nil, false
}

// AsAmazonS3Dataset is the Dataset implementation for MongoDbCollectionDataset.
func (mdcd MongoDbCollectionDataset) AsAmazonS3Dataset() (*AmazonS3Dataset, bool) {
	return nil, false
}

// MongoDbCollectionDatasetTypeProperties is mongoDB database dataset properties.
type MongoDbCollectionDatasetTypeProperties struct {
	CollectionName *map[string]interface{} `json:"collectionName,omitempty"`
}

// MongoDbLinkedService is linked service for MongoDb data source.
type MongoDbLinkedService struct {
	ConnectVia                          *IntegrationRuntimeReference `json:"connectVia,omitempty"`
	Description                         *string                      `json:"description,omitempty"`
	Type                                TypeLinkedService            `json:"type,omitempty"`
	*MongoDbLinkedServiceTypeProperties `json:"typeProperties,omitempty"`
}

// MarshalJSON is the custom marshaler for MongoDbLinkedService.
func (mdls MongoDbLinkedService) MarshalJSON() ([]byte, error) {
	mdls.Type = TypeMongoDb
	type Alias MongoDbLinkedService
	return json.Marshal(&struct {
		Alias
	}{
		Alias: (Alias)(mdls),
	})
}

// AsAzureDataLakeAnalyticsLinkedService is the LinkedService implementation for MongoDbLinkedService.
func (mdls MongoDbLinkedService) AsAzureDataLakeAnalyticsLinkedService() (*AzureDataLakeAnalyticsLinkedService, bool) {
	return nil, false
}

// AsHDInsightOnDemandLinkedService is the LinkedService implementation for MongoDbLinkedService.
func (mdls MongoDbLinkedService) AsHDInsightOnDemandLinkedService() (*HDInsightOnDemandLinkedService, bool) {
	return nil, false
}

// AsSapHanaLinkedService is the LinkedService implementation for MongoDbLinkedService.
func (mdls MongoDbLinkedService) AsSapHanaLinkedService() (*SapHanaLinkedService, bool) {
	return nil, false
}

// AsSapBWLinkedService is the LinkedService implementation for MongoDbLinkedService.
func (mdls MongoDbLinkedService) AsSapBWLinkedService() (*SapBWLinkedService, bool) {
	return nil, false
}

// AsSftpServerLinkedService is the LinkedService implementation for MongoDbLinkedService.
func (mdls MongoDbLinkedService) AsSftpServerLinkedService() (*SftpServerLinkedService, bool) {
	return nil, false
}

// AsFtpServerLinkedService is the LinkedService implementation for MongoDbLinkedService.
func (mdls MongoDbLinkedService) AsFtpServerLinkedService() (*FtpServerLinkedService, bool) {
	return nil, false
}

// AsHTTPLinkedService is the LinkedService implementation for MongoDbLinkedService.
func (mdls MongoDbLinkedService) AsHTTPLinkedService() (*HTTPLinkedService, bool) {
	return nil, false
}

// AsAzureSearchLinkedService is the LinkedService implementation for MongoDbLinkedService.
func (mdls MongoDbLinkedService) AsAzureSearchLinkedService() (*AzureSearchLinkedService, bool) {
	return nil, false
}

// AsCustomDataSourceLinkedService is the LinkedService implementation for MongoDbLinkedService.
func (mdls MongoDbLinkedService) AsCustomDataSourceLinkedService() (*CustomDataSourceLinkedService, bool) {
	return nil, false
}

// AsAmazonRedshiftLinkedService is the LinkedService implementation for MongoDbLinkedService.
func (mdls MongoDbLinkedService) AsAmazonRedshiftLinkedService() (*AmazonRedshiftLinkedService, bool) {
	return nil, false
}

// AsAmazonS3LinkedService is the LinkedService implementation for MongoDbLinkedService.
func (mdls MongoDbLinkedService) AsAmazonS3LinkedService() (*AmazonS3LinkedService, bool) {
	return nil, false
}

// AsSalesforceLinkedService is the LinkedService implementation for MongoDbLinkedService.
func (mdls MongoDbLinkedService) AsSalesforceLinkedService() (*SalesforceLinkedService, bool) {
	return nil, false
}

// AsAzureDataLakeStoreLinkedService is the LinkedService implementation for MongoDbLinkedService.
func (mdls MongoDbLinkedService) AsAzureDataLakeStoreLinkedService() (*AzureDataLakeStoreLinkedService, bool) {
	return nil, false
}

// AsMongoDbLinkedService is the LinkedService implementation for MongoDbLinkedService.
func (mdls MongoDbLinkedService) AsMongoDbLinkedService() (*MongoDbLinkedService, bool) {
	return &mdls, true
}

// AsCassandraLinkedService is the LinkedService implementation for MongoDbLinkedService.
func (mdls MongoDbLinkedService) AsCassandraLinkedService() (*CassandraLinkedService, bool) {
	return nil, false
}

// AsWebLinkedService is the LinkedService implementation for MongoDbLinkedService.
func (mdls MongoDbLinkedService) AsWebLinkedService() (*WebLinkedService, bool) {
	return nil, false
}

// AsODataLinkedService is the LinkedService implementation for MongoDbLinkedService.
func (mdls MongoDbLinkedService) AsODataLinkedService() (*ODataLinkedService, bool) {
	return nil, false
}

// AsHdfsLinkedService is the LinkedService implementation for MongoDbLinkedService.
func (mdls MongoDbLinkedService) AsHdfsLinkedService() (*HdfsLinkedService, bool) {
	return nil, false
}

// AsOdbcLinkedService is the LinkedService implementation for MongoDbLinkedService.
func (mdls MongoDbLinkedService) AsOdbcLinkedService() (*OdbcLinkedService, bool) {
	return nil, false
}

// AsAzureMLLinkedService is the LinkedService implementation for MongoDbLinkedService.
func (mdls MongoDbLinkedService) AsAzureMLLinkedService() (*AzureMLLinkedService, bool) {
	return nil, false
}

// AsTeradataLinkedService is the LinkedService implementation for MongoDbLinkedService.
func (mdls MongoDbLinkedService) AsTeradataLinkedService() (*TeradataLinkedService, bool) {
	return nil, false
}

// AsDb2LinkedService is the LinkedService implementation for MongoDbLinkedService.
func (mdls MongoDbLinkedService) AsDb2LinkedService() (*Db2LinkedService, bool) {
	return nil, false
}

// AsSybaseLinkedService is the LinkedService implementation for MongoDbLinkedService.
func (mdls MongoDbLinkedService) AsSybaseLinkedService() (*SybaseLinkedService, bool) {
	return nil, false
}

// AsPostgreSQLLinkedService is the LinkedService implementation for MongoDbLinkedService.
func (mdls MongoDbLinkedService) AsPostgreSQLLinkedService() (*PostgreSQLLinkedService, bool) {
	return nil, false
}

// AsMySQLLinkedService is the LinkedService implementation for MongoDbLinkedService.
func (mdls MongoDbLinkedService) AsMySQLLinkedService() (*MySQLLinkedService, bool) {
	return nil, false
}

// AsOracleLinkedService is the LinkedService implementation for MongoDbLinkedService.
func (mdls MongoDbLinkedService) AsOracleLinkedService() (*OracleLinkedService, bool) {
	return nil, false
}

// AsFileServerLinkedService is the LinkedService implementation for MongoDbLinkedService.
func (mdls MongoDbLinkedService) AsFileServerLinkedService() (*FileServerLinkedService, bool) {
	return nil, false
}

// AsHDInsightLinkedService is the LinkedService implementation for MongoDbLinkedService.
func (mdls MongoDbLinkedService) AsHDInsightLinkedService() (*HDInsightLinkedService, bool) {
	return nil, false
}

// AsDynamicsLinkedService is the LinkedService implementation for MongoDbLinkedService.
func (mdls MongoDbLinkedService) AsDynamicsLinkedService() (*DynamicsLinkedService, bool) {
	return nil, false
}

// AsCosmosDbLinkedService is the LinkedService implementation for MongoDbLinkedService.
func (mdls MongoDbLinkedService) AsCosmosDbLinkedService() (*CosmosDbLinkedService, bool) {
	return nil, false
}

// AsAzureKeyVaultLinkedService is the LinkedService implementation for MongoDbLinkedService.
func (mdls MongoDbLinkedService) AsAzureKeyVaultLinkedService() (*AzureKeyVaultLinkedService, bool) {
	return nil, false
}

// AsAzureBatchLinkedService is the LinkedService implementation for MongoDbLinkedService.
func (mdls MongoDbLinkedService) AsAzureBatchLinkedService() (*AzureBatchLinkedService, bool) {
	return nil, false
}

// AsAzureSQLDatabaseLinkedService is the LinkedService implementation for MongoDbLinkedService.
func (mdls MongoDbLinkedService) AsAzureSQLDatabaseLinkedService() (*AzureSQLDatabaseLinkedService, bool) {
	return nil, false
}

// AsSQLServerLinkedService is the LinkedService implementation for MongoDbLinkedService.
func (mdls MongoDbLinkedService) AsSQLServerLinkedService() (*SQLServerLinkedService, bool) {
	return nil, false
}

// AsAzureSQLDWLinkedService is the LinkedService implementation for MongoDbLinkedService.
func (mdls MongoDbLinkedService) AsAzureSQLDWLinkedService() (*AzureSQLDWLinkedService, bool) {
	return nil, false
}

// AsAzureStorageLinkedService is the LinkedService implementation for MongoDbLinkedService.
func (mdls MongoDbLinkedService) AsAzureStorageLinkedService() (*AzureStorageLinkedService, bool) {
	return nil, false
}

// MongoDbLinkedServiceTypeProperties is mongoDB linked service properties.
type MongoDbLinkedServiceTypeProperties struct {
	Server              *map[string]interface{}   `json:"server,omitempty"`
	AuthenticationType  MongoDbAuthenticationType `json:"authenticationType,omitempty"`
	DatabaseName        *map[string]interface{}   `json:"databaseName,omitempty"`
	Username            *map[string]interface{}   `json:"username,omitempty"`
	Password            *SecureString             `json:"password,omitempty"`
	AuthSource          *map[string]interface{}   `json:"authSource,omitempty"`
	Port                *map[string]interface{}   `json:"port,omitempty"`
	EncryptedCredential *map[string]interface{}   `json:"encryptedCredential,omitempty"`
}

// MongoDbSource is a copy activity source for a MongoDB database.
type MongoDbSource struct {
	SourceRetryCount *map[string]interface{} `json:"sourceRetryCount,omitempty"`
	SourceRetryWait  *map[string]interface{} `json:"sourceRetryWait,omitempty"`
	Type             TypeCopySource          `json:"type,omitempty"`
	Query            *map[string]interface{} `json:"query,omitempty"`
}

// MarshalJSON is the custom marshaler for MongoDbSource.
func (mds MongoDbSource) MarshalJSON() ([]byte, error) {
	mds.Type = TypeMongoDbSource
	type Alias MongoDbSource
	return json.Marshal(&struct {
		Alias
	}{
		Alias: (Alias)(mds),
	})
}

// AsAmazonRedshiftSource is the CopySource implementation for MongoDbSource.
func (mds MongoDbSource) AsAmazonRedshiftSource() (*AmazonRedshiftSource, bool) {
	return nil, false
}

// AsHTTPSource is the CopySource implementation for MongoDbSource.
func (mds MongoDbSource) AsHTTPSource() (*HTTPSource, bool) {
	return nil, false
}

// AsAzureDataLakeStoreSource is the CopySource implementation for MongoDbSource.
func (mds MongoDbSource) AsAzureDataLakeStoreSource() (*AzureDataLakeStoreSource, bool) {
	return nil, false
}

// AsMongoDbSource is the CopySource implementation for MongoDbSource.
func (mds MongoDbSource) AsMongoDbSource() (*MongoDbSource, bool) {
	return &mds, true
}

// AsCassandraSource is the CopySource implementation for MongoDbSource.
func (mds MongoDbSource) AsCassandraSource() (*CassandraSource, bool) {
	return nil, false
}

// AsWebSource is the CopySource implementation for MongoDbSource.
func (mds MongoDbSource) AsWebSource() (*WebSource, bool) {
	return nil, false
}

// AsOracleSource is the CopySource implementation for MongoDbSource.
func (mds MongoDbSource) AsOracleSource() (*OracleSource, bool) {
	return nil, false
}

// AsHdfsSource is the CopySource implementation for MongoDbSource.
func (mds MongoDbSource) AsHdfsSource() (*HdfsSource, bool) {
	return nil, false
}

// AsFileSystemSource is the CopySource implementation for MongoDbSource.
func (mds MongoDbSource) AsFileSystemSource() (*FileSystemSource, bool) {
	return nil, false
}

// AsSQLDWSource is the CopySource implementation for MongoDbSource.
func (mds MongoDbSource) AsSQLDWSource() (*SQLDWSource, bool) {
	return nil, false
}

// AsSQLSource is the CopySource implementation for MongoDbSource.
func (mds MongoDbSource) AsSQLSource() (*SQLSource, bool) {
	return nil, false
}

// AsRelationalSource is the CopySource implementation for MongoDbSource.
func (mds MongoDbSource) AsRelationalSource() (*RelationalSource, bool) {
	return nil, false
}

// AsDynamicsSource is the CopySource implementation for MongoDbSource.
func (mds MongoDbSource) AsDynamicsSource() (*DynamicsSource, bool) {
	return nil, false
}

// AsDocumentDbCollectionSource is the CopySource implementation for MongoDbSource.
func (mds MongoDbSource) AsDocumentDbCollectionSource() (*DocumentDbCollectionSource, bool) {
	return nil, false
}

// AsBlobSource is the CopySource implementation for MongoDbSource.
func (mds MongoDbSource) AsBlobSource() (*BlobSource, bool) {
	return nil, false
}

// AsAzureTableSource is the CopySource implementation for MongoDbSource.
func (mds MongoDbSource) AsAzureTableSource() (*AzureTableSource, bool) {
	return nil, false
}

// MySQLLinkedService is linked service for MySQL data source.
type MySQLLinkedService struct {
	ConnectVia                        *IntegrationRuntimeReference `json:"connectVia,omitempty"`
	Description                       *string                      `json:"description,omitempty"`
	Type                              TypeLinkedService            `json:"type,omitempty"`
	*MySQLLinkedServiceTypeProperties `json:"typeProperties,omitempty"`
}

// MarshalJSON is the custom marshaler for MySQLLinkedService.
func (msls MySQLLinkedService) MarshalJSON() ([]byte, error) {
	msls.Type = TypeMySQL
	type Alias MySQLLinkedService
	return json.Marshal(&struct {
		Alias
	}{
		Alias: (Alias)(msls),
	})
}

// AsAzureDataLakeAnalyticsLinkedService is the LinkedService implementation for MySQLLinkedService.
func (msls MySQLLinkedService) AsAzureDataLakeAnalyticsLinkedService() (*AzureDataLakeAnalyticsLinkedService, bool) {
	return nil, false
}

// AsHDInsightOnDemandLinkedService is the LinkedService implementation for MySQLLinkedService.
func (msls MySQLLinkedService) AsHDInsightOnDemandLinkedService() (*HDInsightOnDemandLinkedService, bool) {
	return nil, false
}

// AsSapHanaLinkedService is the LinkedService implementation for MySQLLinkedService.
func (msls MySQLLinkedService) AsSapHanaLinkedService() (*SapHanaLinkedService, bool) {
	return nil, false
}

// AsSapBWLinkedService is the LinkedService implementation for MySQLLinkedService.
func (msls MySQLLinkedService) AsSapBWLinkedService() (*SapBWLinkedService, bool) {
	return nil, false
}

// AsSftpServerLinkedService is the LinkedService implementation for MySQLLinkedService.
func (msls MySQLLinkedService) AsSftpServerLinkedService() (*SftpServerLinkedService, bool) {
	return nil, false
}

// AsFtpServerLinkedService is the LinkedService implementation for MySQLLinkedService.
func (msls MySQLLinkedService) AsFtpServerLinkedService() (*FtpServerLinkedService, bool) {
	return nil, false
}

// AsHTTPLinkedService is the LinkedService implementation for MySQLLinkedService.
func (msls MySQLLinkedService) AsHTTPLinkedService() (*HTTPLinkedService, bool) {
	return nil, false
}

// AsAzureSearchLinkedService is the LinkedService implementation for MySQLLinkedService.
func (msls MySQLLinkedService) AsAzureSearchLinkedService() (*AzureSearchLinkedService, bool) {
	return nil, false
}

// AsCustomDataSourceLinkedService is the LinkedService implementation for MySQLLinkedService.
func (msls MySQLLinkedService) AsCustomDataSourceLinkedService() (*CustomDataSourceLinkedService, bool) {
	return nil, false
}

// AsAmazonRedshiftLinkedService is the LinkedService implementation for MySQLLinkedService.
func (msls MySQLLinkedService) AsAmazonRedshiftLinkedService() (*AmazonRedshiftLinkedService, bool) {
	return nil, false
}

// AsAmazonS3LinkedService is the LinkedService implementation for MySQLLinkedService.
func (msls MySQLLinkedService) AsAmazonS3LinkedService() (*AmazonS3LinkedService, bool) {
	return nil, false
}

// AsSalesforceLinkedService is the LinkedService implementation for MySQLLinkedService.
func (msls MySQLLinkedService) AsSalesforceLinkedService() (*SalesforceLinkedService, bool) {
	return nil, false
}

// AsAzureDataLakeStoreLinkedService is the LinkedService implementation for MySQLLinkedService.
func (msls MySQLLinkedService) AsAzureDataLakeStoreLinkedService() (*AzureDataLakeStoreLinkedService, bool) {
	return nil, false
}

// AsMongoDbLinkedService is the LinkedService implementation for MySQLLinkedService.
func (msls MySQLLinkedService) AsMongoDbLinkedService() (*MongoDbLinkedService, bool) {
	return nil, false
}

// AsCassandraLinkedService is the LinkedService implementation for MySQLLinkedService.
func (msls MySQLLinkedService) AsCassandraLinkedService() (*CassandraLinkedService, bool) {
	return nil, false
}

// AsWebLinkedService is the LinkedService implementation for MySQLLinkedService.
func (msls MySQLLinkedService) AsWebLinkedService() (*WebLinkedService, bool) {
	return nil, false
}

// AsODataLinkedService is the LinkedService implementation for MySQLLinkedService.
func (msls MySQLLinkedService) AsODataLinkedService() (*ODataLinkedService, bool) {
	return nil, false
}

// AsHdfsLinkedService is the LinkedService implementation for MySQLLinkedService.
func (msls MySQLLinkedService) AsHdfsLinkedService() (*HdfsLinkedService, bool) {
	return nil, false
}

// AsOdbcLinkedService is the LinkedService implementation for MySQLLinkedService.
func (msls MySQLLinkedService) AsOdbcLinkedService() (*OdbcLinkedService, bool) {
	return nil, false
}

// AsAzureMLLinkedService is the LinkedService implementation for MySQLLinkedService.
func (msls MySQLLinkedService) AsAzureMLLinkedService() (*AzureMLLinkedService, bool) {
	return nil, false
}

// AsTeradataLinkedService is the LinkedService implementation for MySQLLinkedService.
func (msls MySQLLinkedService) AsTeradataLinkedService() (*TeradataLinkedService, bool) {
	return nil, false
}

// AsDb2LinkedService is the LinkedService implementation for MySQLLinkedService.
func (msls MySQLLinkedService) AsDb2LinkedService() (*Db2LinkedService, bool) {
	return nil, false
}

// AsSybaseLinkedService is the LinkedService implementation for MySQLLinkedService.
func (msls MySQLLinkedService) AsSybaseLinkedService() (*SybaseLinkedService, bool) {
	return nil, false
}

// AsPostgreSQLLinkedService is the LinkedService implementation for MySQLLinkedService.
func (msls MySQLLinkedService) AsPostgreSQLLinkedService() (*PostgreSQLLinkedService, bool) {
	return nil, false
}

// AsMySQLLinkedService is the LinkedService implementation for MySQLLinkedService.
func (msls MySQLLinkedService) AsMySQLLinkedService() (*MySQLLinkedService, bool) {
	return &msls, true
}

// AsOracleLinkedService is the LinkedService implementation for MySQLLinkedService.
func (msls MySQLLinkedService) AsOracleLinkedService() (*OracleLinkedService, bool) {
	return nil, false
}

// AsFileServerLinkedService is the LinkedService implementation for MySQLLinkedService.
func (msls MySQLLinkedService) AsFileServerLinkedService() (*FileServerLinkedService, bool) {
	return nil, false
}

// AsHDInsightLinkedService is the LinkedService implementation for MySQLLinkedService.
func (msls MySQLLinkedService) AsHDInsightLinkedService() (*HDInsightLinkedService, bool) {
	return nil, false
}

// AsDynamicsLinkedService is the LinkedService implementation for MySQLLinkedService.
func (msls MySQLLinkedService) AsDynamicsLinkedService() (*DynamicsLinkedService, bool) {
	return nil, false
}

// AsCosmosDbLinkedService is the LinkedService implementation for MySQLLinkedService.
func (msls MySQLLinkedService) AsCosmosDbLinkedService() (*CosmosDbLinkedService, bool) {
	return nil, false
}

// AsAzureKeyVaultLinkedService is the LinkedService implementation for MySQLLinkedService.
func (msls MySQLLinkedService) AsAzureKeyVaultLinkedService() (*AzureKeyVaultLinkedService, bool) {
	return nil, false
}

// AsAzureBatchLinkedService is the LinkedService implementation for MySQLLinkedService.
func (msls MySQLLinkedService) AsAzureBatchLinkedService() (*AzureBatchLinkedService, bool) {
	return nil, false
}

// AsAzureSQLDatabaseLinkedService is the LinkedService implementation for MySQLLinkedService.
func (msls MySQLLinkedService) AsAzureSQLDatabaseLinkedService() (*AzureSQLDatabaseLinkedService, bool) {
	return nil, false
}

// AsSQLServerLinkedService is the LinkedService implementation for MySQLLinkedService.
func (msls MySQLLinkedService) AsSQLServerLinkedService() (*SQLServerLinkedService, bool) {
	return nil, false
}

// AsAzureSQLDWLinkedService is the LinkedService implementation for MySQLLinkedService.
func (msls MySQLLinkedService) AsAzureSQLDWLinkedService() (*AzureSQLDWLinkedService, bool) {
	return nil, false
}

// AsAzureStorageLinkedService is the LinkedService implementation for MySQLLinkedService.
func (msls MySQLLinkedService) AsAzureStorageLinkedService() (*AzureStorageLinkedService, bool) {
	return nil, false
}

// MySQLLinkedServiceTypeProperties is mySQL linked service properties.
type MySQLLinkedServiceTypeProperties struct {
	Server              *map[string]interface{} `json:"server,omitempty"`
	Database            *map[string]interface{} `json:"database,omitempty"`
	Schema              *map[string]interface{} `json:"schema,omitempty"`
	Username            *map[string]interface{} `json:"username,omitempty"`
	Password            *SecureString           `json:"password,omitempty"`
	EncryptedCredential *map[string]interface{} `json:"encryptedCredential,omitempty"`
}

// ODataLinkedService is open Data Protocol (OData) linked service.
type ODataLinkedService struct {
	ConnectVia                        *IntegrationRuntimeReference `json:"connectVia,omitempty"`
	Description                       *string                      `json:"description,omitempty"`
	Type                              TypeLinkedService            `json:"type,omitempty"`
	*ODataLinkedServiceTypeProperties `json:"typeProperties,omitempty"`
}

// MarshalJSON is the custom marshaler for ODataLinkedService.
func (odls ODataLinkedService) MarshalJSON() ([]byte, error) {
	odls.Type = TypeOData
	type Alias ODataLinkedService
	return json.Marshal(&struct {
		Alias
	}{
		Alias: (Alias)(odls),
	})
}

// AsAzureDataLakeAnalyticsLinkedService is the LinkedService implementation for ODataLinkedService.
func (odls ODataLinkedService) AsAzureDataLakeAnalyticsLinkedService() (*AzureDataLakeAnalyticsLinkedService, bool) {
	return nil, false
}

// AsHDInsightOnDemandLinkedService is the LinkedService implementation for ODataLinkedService.
func (odls ODataLinkedService) AsHDInsightOnDemandLinkedService() (*HDInsightOnDemandLinkedService, bool) {
	return nil, false
}

// AsSapHanaLinkedService is the LinkedService implementation for ODataLinkedService.
func (odls ODataLinkedService) AsSapHanaLinkedService() (*SapHanaLinkedService, bool) {
	return nil, false
}

// AsSapBWLinkedService is the LinkedService implementation for ODataLinkedService.
func (odls ODataLinkedService) AsSapBWLinkedService() (*SapBWLinkedService, bool) {
	return nil, false
}

// AsSftpServerLinkedService is the LinkedService implementation for ODataLinkedService.
func (odls ODataLinkedService) AsSftpServerLinkedService() (*SftpServerLinkedService, bool) {
	return nil, false
}

// AsFtpServerLinkedService is the LinkedService implementation for ODataLinkedService.
func (odls ODataLinkedService) AsFtpServerLinkedService() (*FtpServerLinkedService, bool) {
	return nil, false
}

// AsHTTPLinkedService is the LinkedService implementation for ODataLinkedService.
func (odls ODataLinkedService) AsHTTPLinkedService() (*HTTPLinkedService, bool) {
	return nil, false
}

// AsAzureSearchLinkedService is the LinkedService implementation for ODataLinkedService.
func (odls ODataLinkedService) AsAzureSearchLinkedService() (*AzureSearchLinkedService, bool) {
	return nil, false
}

// AsCustomDataSourceLinkedService is the LinkedService implementation for ODataLinkedService.
func (odls ODataLinkedService) AsCustomDataSourceLinkedService() (*CustomDataSourceLinkedService, bool) {
	return nil, false
}

// AsAmazonRedshiftLinkedService is the LinkedService implementation for ODataLinkedService.
func (odls ODataLinkedService) AsAmazonRedshiftLinkedService() (*AmazonRedshiftLinkedService, bool) {
	return nil, false
}

// AsAmazonS3LinkedService is the LinkedService implementation for ODataLinkedService.
func (odls ODataLinkedService) AsAmazonS3LinkedService() (*AmazonS3LinkedService, bool) {
	return nil, false
}

// AsSalesforceLinkedService is the LinkedService implementation for ODataLinkedService.
func (odls ODataLinkedService) AsSalesforceLinkedService() (*SalesforceLinkedService, bool) {
	return nil, false
}

// AsAzureDataLakeStoreLinkedService is the LinkedService implementation for ODataLinkedService.
func (odls ODataLinkedService) AsAzureDataLakeStoreLinkedService() (*AzureDataLakeStoreLinkedService, bool) {
	return nil, false
}

// AsMongoDbLinkedService is the LinkedService implementation for ODataLinkedService.
func (odls ODataLinkedService) AsMongoDbLinkedService() (*MongoDbLinkedService, bool) {
	return nil, false
}

// AsCassandraLinkedService is the LinkedService implementation for ODataLinkedService.
func (odls ODataLinkedService) AsCassandraLinkedService() (*CassandraLinkedService, bool) {
	return nil, false
}

// AsWebLinkedService is the LinkedService implementation for ODataLinkedService.
func (odls ODataLinkedService) AsWebLinkedService() (*WebLinkedService, bool) {
	return nil, false
}

// AsODataLinkedService is the LinkedService implementation for ODataLinkedService.
func (odls ODataLinkedService) AsODataLinkedService() (*ODataLinkedService, bool) {
	return &odls, true
}

// AsHdfsLinkedService is the LinkedService implementation for ODataLinkedService.
func (odls ODataLinkedService) AsHdfsLinkedService() (*HdfsLinkedService, bool) {
	return nil, false
}

// AsOdbcLinkedService is the LinkedService implementation for ODataLinkedService.
func (odls ODataLinkedService) AsOdbcLinkedService() (*OdbcLinkedService, bool) {
	return nil, false
}

// AsAzureMLLinkedService is the LinkedService implementation for ODataLinkedService.
func (odls ODataLinkedService) AsAzureMLLinkedService() (*AzureMLLinkedService, bool) {
	return nil, false
}

// AsTeradataLinkedService is the LinkedService implementation for ODataLinkedService.
func (odls ODataLinkedService) AsTeradataLinkedService() (*TeradataLinkedService, bool) {
	return nil, false
}

// AsDb2LinkedService is the LinkedService implementation for ODataLinkedService.
func (odls ODataLinkedService) AsDb2LinkedService() (*Db2LinkedService, bool) {
	return nil, false
}

// AsSybaseLinkedService is the LinkedService implementation for ODataLinkedService.
func (odls ODataLinkedService) AsSybaseLinkedService() (*SybaseLinkedService, bool) {
	return nil, false
}

// AsPostgreSQLLinkedService is the LinkedService implementation for ODataLinkedService.
func (odls ODataLinkedService) AsPostgreSQLLinkedService() (*PostgreSQLLinkedService, bool) {
	return nil, false
}

// AsMySQLLinkedService is the LinkedService implementation for ODataLinkedService.
func (odls ODataLinkedService) AsMySQLLinkedService() (*MySQLLinkedService, bool) {
	return nil, false
}

// AsOracleLinkedService is the LinkedService implementation for ODataLinkedService.
func (odls ODataLinkedService) AsOracleLinkedService() (*OracleLinkedService, bool) {
	return nil, false
}

// AsFileServerLinkedService is the LinkedService implementation for ODataLinkedService.
func (odls ODataLinkedService) AsFileServerLinkedService() (*FileServerLinkedService, bool) {
	return nil, false
}

// AsHDInsightLinkedService is the LinkedService implementation for ODataLinkedService.
func (odls ODataLinkedService) AsHDInsightLinkedService() (*HDInsightLinkedService, bool) {
	return nil, false
}

// AsDynamicsLinkedService is the LinkedService implementation for ODataLinkedService.
func (odls ODataLinkedService) AsDynamicsLinkedService() (*DynamicsLinkedService, bool) {
	return nil, false
}

// AsCosmosDbLinkedService is the LinkedService implementation for ODataLinkedService.
func (odls ODataLinkedService) AsCosmosDbLinkedService() (*CosmosDbLinkedService, bool) {
	return nil, false
}

// AsAzureKeyVaultLinkedService is the LinkedService implementation for ODataLinkedService.
func (odls ODataLinkedService) AsAzureKeyVaultLinkedService() (*AzureKeyVaultLinkedService, bool) {
	return nil, false
}

// AsAzureBatchLinkedService is the LinkedService implementation for ODataLinkedService.
func (odls ODataLinkedService) AsAzureBatchLinkedService() (*AzureBatchLinkedService, bool) {
	return nil, false
}

// AsAzureSQLDatabaseLinkedService is the LinkedService implementation for ODataLinkedService.
func (odls ODataLinkedService) AsAzureSQLDatabaseLinkedService() (*AzureSQLDatabaseLinkedService, bool) {
	return nil, false
}

// AsSQLServerLinkedService is the LinkedService implementation for ODataLinkedService.
func (odls ODataLinkedService) AsSQLServerLinkedService() (*SQLServerLinkedService, bool) {
	return nil, false
}

// AsAzureSQLDWLinkedService is the LinkedService implementation for ODataLinkedService.
func (odls ODataLinkedService) AsAzureSQLDWLinkedService() (*AzureSQLDWLinkedService, bool) {
	return nil, false
}

// AsAzureStorageLinkedService is the LinkedService implementation for ODataLinkedService.
func (odls ODataLinkedService) AsAzureStorageLinkedService() (*AzureStorageLinkedService, bool) {
	return nil, false
}

// ODataLinkedServiceTypeProperties is oData linked service properties.
type ODataLinkedServiceTypeProperties struct {
	URL                 *map[string]interface{} `json:"url,omitempty"`
	AuthenticationType  ODataAuthenticationType `json:"authenticationType,omitempty"`
	UserName            *map[string]interface{} `json:"userName,omitempty"`
	Password            *SecureString           `json:"password,omitempty"`
	EncryptedCredential *map[string]interface{} `json:"encryptedCredential,omitempty"`
}

// ODataResourceDataset is the Open Data Protocol (OData) resource dataset.
type ODataResourceDataset struct {
	Description                         *string                             `json:"description,omitempty"`
	Structure                           *map[string]interface{}             `json:"structure,omitempty"`
	LinkedServiceName                   *LinkedServiceReference             `json:"linkedServiceName,omitempty"`
	Parameters                          *map[string]*ParameterSpecification `json:"parameters,omitempty"`
	Type                                TypeDataset                         `json:"type,omitempty"`
	*ODataResourceDatasetTypeProperties `json:"typeProperties,omitempty"`
}

// MarshalJSON is the custom marshaler for ODataResourceDataset.
func (odrd ODataResourceDataset) MarshalJSON() ([]byte, error) {
	odrd.Type = TypeODataResource
	type Alias ODataResourceDataset
	return json.Marshal(&struct {
		Alias
	}{
		Alias: (Alias)(odrd),
	})
}

// AsHTTPDataset is the Dataset implementation for ODataResourceDataset.
func (odrd ODataResourceDataset) AsHTTPDataset() (*HTTPDataset, bool) {
	return nil, false
}

// AsAzureSearchIndexDataset is the Dataset implementation for ODataResourceDataset.
func (odrd ODataResourceDataset) AsAzureSearchIndexDataset() (*AzureSearchIndexDataset, bool) {
	return nil, false
}

// AsWebTableDataset is the Dataset implementation for ODataResourceDataset.
func (odrd ODataResourceDataset) AsWebTableDataset() (*WebTableDataset, bool) {
	return nil, false
}

// AsSQLServerTableDataset is the Dataset implementation for ODataResourceDataset.
func (odrd ODataResourceDataset) AsSQLServerTableDataset() (*SQLServerTableDataset, bool) {
	return nil, false
}

// AsRelationalTableDataset is the Dataset implementation for ODataResourceDataset.
func (odrd ODataResourceDataset) AsRelationalTableDataset() (*RelationalTableDataset, bool) {
	return nil, false
}

// AsOracleTableDataset is the Dataset implementation for ODataResourceDataset.
func (odrd ODataResourceDataset) AsOracleTableDataset() (*OracleTableDataset, bool) {
	return nil, false
}

// AsODataResourceDataset is the Dataset implementation for ODataResourceDataset.
func (odrd ODataResourceDataset) AsODataResourceDataset() (*ODataResourceDataset, bool) {
	return &odrd, true
}

// AsMongoDbCollectionDataset is the Dataset implementation for ODataResourceDataset.
func (odrd ODataResourceDataset) AsMongoDbCollectionDataset() (*MongoDbCollectionDataset, bool) {
	return nil, false
}

// AsFileShareDataset is the Dataset implementation for ODataResourceDataset.
func (odrd ODataResourceDataset) AsFileShareDataset() (*FileShareDataset, bool) {
	return nil, false
}

// AsAzureDataLakeStoreDataset is the Dataset implementation for ODataResourceDataset.
func (odrd ODataResourceDataset) AsAzureDataLakeStoreDataset() (*AzureDataLakeStoreDataset, bool) {
	return nil, false
}

// AsDynamicsEntityDataset is the Dataset implementation for ODataResourceDataset.
func (odrd ODataResourceDataset) AsDynamicsEntityDataset() (*DynamicsEntityDataset, bool) {
	return nil, false
}

// AsDocumentDbCollectionDataset is the Dataset implementation for ODataResourceDataset.
func (odrd ODataResourceDataset) AsDocumentDbCollectionDataset() (*DocumentDbCollectionDataset, bool) {
	return nil, false
}

// AsCustomDataset is the Dataset implementation for ODataResourceDataset.
func (odrd ODataResourceDataset) AsCustomDataset() (*CustomDataset, bool) {
	return nil, false
}

// AsCassandraTableDataset is the Dataset implementation for ODataResourceDataset.
func (odrd ODataResourceDataset) AsCassandraTableDataset() (*CassandraTableDataset, bool) {
	return nil, false
}

// AsAzureSQLDWTableDataset is the Dataset implementation for ODataResourceDataset.
func (odrd ODataResourceDataset) AsAzureSQLDWTableDataset() (*AzureSQLDWTableDataset, bool) {
	return nil, false
}

// AsAzureSQLTableDataset is the Dataset implementation for ODataResourceDataset.
func (odrd ODataResourceDataset) AsAzureSQLTableDataset() (*AzureSQLTableDataset, bool) {
	return nil, false
}

// AsAzureTableDataset is the Dataset implementation for ODataResourceDataset.
func (odrd ODataResourceDataset) AsAzureTableDataset() (*AzureTableDataset, bool) {
	return nil, false
}

// AsAzureBlobDataset is the Dataset implementation for ODataResourceDataset.
func (odrd ODataResourceDataset) AsAzureBlobDataset() (*AzureBlobDataset, bool) {
	return nil, false
}

// AsAmazonS3Dataset is the Dataset implementation for ODataResourceDataset.
func (odrd ODataResourceDataset) AsAmazonS3Dataset() (*AmazonS3Dataset, bool) {
	return nil, false
}

// ODataResourceDatasetTypeProperties is oData dataset properties.
type ODataResourceDatasetTypeProperties struct {
	Path *map[string]interface{} `json:"path,omitempty"`
}

// OdbcLinkedService is open Database Connectivity (ODBC) linked service.
type OdbcLinkedService struct {
	ConnectVia                       *IntegrationRuntimeReference `json:"connectVia,omitempty"`
	Description                      *string                      `json:"description,omitempty"`
	Type                             TypeLinkedService            `json:"type,omitempty"`
	*OdbcLinkedServiceTypeProperties `json:"typeProperties,omitempty"`
}

// MarshalJSON is the custom marshaler for OdbcLinkedService.
func (ols OdbcLinkedService) MarshalJSON() ([]byte, error) {
	ols.Type = TypeOdbc
	type Alias OdbcLinkedService
	return json.Marshal(&struct {
		Alias
	}{
		Alias: (Alias)(ols),
	})
}

// AsAzureDataLakeAnalyticsLinkedService is the LinkedService implementation for OdbcLinkedService.
func (ols OdbcLinkedService) AsAzureDataLakeAnalyticsLinkedService() (*AzureDataLakeAnalyticsLinkedService, bool) {
	return nil, false
}

// AsHDInsightOnDemandLinkedService is the LinkedService implementation for OdbcLinkedService.
func (ols OdbcLinkedService) AsHDInsightOnDemandLinkedService() (*HDInsightOnDemandLinkedService, bool) {
	return nil, false
}

// AsSapHanaLinkedService is the LinkedService implementation for OdbcLinkedService.
func (ols OdbcLinkedService) AsSapHanaLinkedService() (*SapHanaLinkedService, bool) {
	return nil, false
}

// AsSapBWLinkedService is the LinkedService implementation for OdbcLinkedService.
func (ols OdbcLinkedService) AsSapBWLinkedService() (*SapBWLinkedService, bool) {
	return nil, false
}

// AsSftpServerLinkedService is the LinkedService implementation for OdbcLinkedService.
func (ols OdbcLinkedService) AsSftpServerLinkedService() (*SftpServerLinkedService, bool) {
	return nil, false
}

// AsFtpServerLinkedService is the LinkedService implementation for OdbcLinkedService.
func (ols OdbcLinkedService) AsFtpServerLinkedService() (*FtpServerLinkedService, bool) {
	return nil, false
}

// AsHTTPLinkedService is the LinkedService implementation for OdbcLinkedService.
func (ols OdbcLinkedService) AsHTTPLinkedService() (*HTTPLinkedService, bool) {
	return nil, false
}

// AsAzureSearchLinkedService is the LinkedService implementation for OdbcLinkedService.
func (ols OdbcLinkedService) AsAzureSearchLinkedService() (*AzureSearchLinkedService, bool) {
	return nil, false
}

// AsCustomDataSourceLinkedService is the LinkedService implementation for OdbcLinkedService.
func (ols OdbcLinkedService) AsCustomDataSourceLinkedService() (*CustomDataSourceLinkedService, bool) {
	return nil, false
}

// AsAmazonRedshiftLinkedService is the LinkedService implementation for OdbcLinkedService.
func (ols OdbcLinkedService) AsAmazonRedshiftLinkedService() (*AmazonRedshiftLinkedService, bool) {
	return nil, false
}

// AsAmazonS3LinkedService is the LinkedService implementation for OdbcLinkedService.
func (ols OdbcLinkedService) AsAmazonS3LinkedService() (*AmazonS3LinkedService, bool) {
	return nil, false
}

// AsSalesforceLinkedService is the LinkedService implementation for OdbcLinkedService.
func (ols OdbcLinkedService) AsSalesforceLinkedService() (*SalesforceLinkedService, bool) {
	return nil, false
}

// AsAzureDataLakeStoreLinkedService is the LinkedService implementation for OdbcLinkedService.
func (ols OdbcLinkedService) AsAzureDataLakeStoreLinkedService() (*AzureDataLakeStoreLinkedService, bool) {
	return nil, false
}

// AsMongoDbLinkedService is the LinkedService implementation for OdbcLinkedService.
func (ols OdbcLinkedService) AsMongoDbLinkedService() (*MongoDbLinkedService, bool) {
	return nil, false
}

// AsCassandraLinkedService is the LinkedService implementation for OdbcLinkedService.
func (ols OdbcLinkedService) AsCassandraLinkedService() (*CassandraLinkedService, bool) {
	return nil, false
}

// AsWebLinkedService is the LinkedService implementation for OdbcLinkedService.
func (ols OdbcLinkedService) AsWebLinkedService() (*WebLinkedService, bool) {
	return nil, false
}

// AsODataLinkedService is the LinkedService implementation for OdbcLinkedService.
func (ols OdbcLinkedService) AsODataLinkedService() (*ODataLinkedService, bool) {
	return nil, false
}

// AsHdfsLinkedService is the LinkedService implementation for OdbcLinkedService.
func (ols OdbcLinkedService) AsHdfsLinkedService() (*HdfsLinkedService, bool) {
	return nil, false
}

// AsOdbcLinkedService is the LinkedService implementation for OdbcLinkedService.
func (ols OdbcLinkedService) AsOdbcLinkedService() (*OdbcLinkedService, bool) {
	return &ols, true
}

// AsAzureMLLinkedService is the LinkedService implementation for OdbcLinkedService.
func (ols OdbcLinkedService) AsAzureMLLinkedService() (*AzureMLLinkedService, bool) {
	return nil, false
}

// AsTeradataLinkedService is the LinkedService implementation for OdbcLinkedService.
func (ols OdbcLinkedService) AsTeradataLinkedService() (*TeradataLinkedService, bool) {
	return nil, false
}

// AsDb2LinkedService is the LinkedService implementation for OdbcLinkedService.
func (ols OdbcLinkedService) AsDb2LinkedService() (*Db2LinkedService, bool) {
	return nil, false
}

// AsSybaseLinkedService is the LinkedService implementation for OdbcLinkedService.
func (ols OdbcLinkedService) AsSybaseLinkedService() (*SybaseLinkedService, bool) {
	return nil, false
}

// AsPostgreSQLLinkedService is the LinkedService implementation for OdbcLinkedService.
func (ols OdbcLinkedService) AsPostgreSQLLinkedService() (*PostgreSQLLinkedService, bool) {
	return nil, false
}

// AsMySQLLinkedService is the LinkedService implementation for OdbcLinkedService.
func (ols OdbcLinkedService) AsMySQLLinkedService() (*MySQLLinkedService, bool) {
	return nil, false
}

// AsOracleLinkedService is the LinkedService implementation for OdbcLinkedService.
func (ols OdbcLinkedService) AsOracleLinkedService() (*OracleLinkedService, bool) {
	return nil, false
}

// AsFileServerLinkedService is the LinkedService implementation for OdbcLinkedService.
func (ols OdbcLinkedService) AsFileServerLinkedService() (*FileServerLinkedService, bool) {
	return nil, false
}

// AsHDInsightLinkedService is the LinkedService implementation for OdbcLinkedService.
func (ols OdbcLinkedService) AsHDInsightLinkedService() (*HDInsightLinkedService, bool) {
	return nil, false
}

// AsDynamicsLinkedService is the LinkedService implementation for OdbcLinkedService.
func (ols OdbcLinkedService) AsDynamicsLinkedService() (*DynamicsLinkedService, bool) {
	return nil, false
}

// AsCosmosDbLinkedService is the LinkedService implementation for OdbcLinkedService.
func (ols OdbcLinkedService) AsCosmosDbLinkedService() (*CosmosDbLinkedService, bool) {
	return nil, false
}

// AsAzureKeyVaultLinkedService is the LinkedService implementation for OdbcLinkedService.
func (ols OdbcLinkedService) AsAzureKeyVaultLinkedService() (*AzureKeyVaultLinkedService, bool) {
	return nil, false
}

// AsAzureBatchLinkedService is the LinkedService implementation for OdbcLinkedService.
func (ols OdbcLinkedService) AsAzureBatchLinkedService() (*AzureBatchLinkedService, bool) {
	return nil, false
}

// AsAzureSQLDatabaseLinkedService is the LinkedService implementation for OdbcLinkedService.
func (ols OdbcLinkedService) AsAzureSQLDatabaseLinkedService() (*AzureSQLDatabaseLinkedService, bool) {
	return nil, false
}

// AsSQLServerLinkedService is the LinkedService implementation for OdbcLinkedService.
func (ols OdbcLinkedService) AsSQLServerLinkedService() (*SQLServerLinkedService, bool) {
	return nil, false
}

// AsAzureSQLDWLinkedService is the LinkedService implementation for OdbcLinkedService.
func (ols OdbcLinkedService) AsAzureSQLDWLinkedService() (*AzureSQLDWLinkedService, bool) {
	return nil, false
}

// AsAzureStorageLinkedService is the LinkedService implementation for OdbcLinkedService.
func (ols OdbcLinkedService) AsAzureStorageLinkedService() (*AzureStorageLinkedService, bool) {
	return nil, false
}

// OdbcLinkedServiceTypeProperties is ODBC linked service properties.
type OdbcLinkedServiceTypeProperties struct {
	ConnectionString    *SecureString           `json:"connectionString,omitempty"`
	AuthenticationType  *map[string]interface{} `json:"authenticationType,omitempty"`
	Credential          *SecureString           `json:"credential,omitempty"`
	UserName            *map[string]interface{} `json:"userName,omitempty"`
	Password            *SecureString           `json:"password,omitempty"`
	EncryptedCredential *map[string]interface{} `json:"encryptedCredential,omitempty"`
}

// OdbcSink is a copy activity ODBC sink.
type OdbcSink struct {
	WriteBatchSize    *map[string]interface{} `json:"writeBatchSize,omitempty"`
	WriteBatchTimeout *map[string]interface{} `json:"writeBatchTimeout,omitempty"`
	SinkRetryCount    *map[string]interface{} `json:"sinkRetryCount,omitempty"`
	SinkRetryWait     *map[string]interface{} `json:"sinkRetryWait,omitempty"`
	Type              TypeCopySink            `json:"type,omitempty"`
	PreCopyScript     *map[string]interface{} `json:"preCopyScript,omitempty"`
}

// MarshalJSON is the custom marshaler for OdbcSink.
func (osVar OdbcSink) MarshalJSON() ([]byte, error) {
	osVar.Type = TypeOdbcSink
	type Alias OdbcSink
	return json.Marshal(&struct {
		Alias
	}{
		Alias: (Alias)(osVar),
	})
}

// AsOdbcSink is the CopySink implementation for OdbcSink.
func (osVar OdbcSink) AsOdbcSink() (*OdbcSink, bool) {
	return &osVar, true
}

// AsAzureSearchIndexSink is the CopySink implementation for OdbcSink.
func (osVar OdbcSink) AsAzureSearchIndexSink() (*AzureSearchIndexSink, bool) {
	return nil, false
}

// AsAzureDataLakeStoreSink is the CopySink implementation for OdbcSink.
func (osVar OdbcSink) AsAzureDataLakeStoreSink() (*AzureDataLakeStoreSink, bool) {
	return nil, false
}

// AsOracleSink is the CopySink implementation for OdbcSink.
func (osVar OdbcSink) AsOracleSink() (*OracleSink, bool) {
	return nil, false
}

// AsSQLDWSink is the CopySink implementation for OdbcSink.
func (osVar OdbcSink) AsSQLDWSink() (*SQLDWSink, bool) {
	return nil, false
}

// AsSQLSink is the CopySink implementation for OdbcSink.
func (osVar OdbcSink) AsSQLSink() (*SQLSink, bool) {
	return nil, false
}

// AsDocumentDbCollectionSink is the CopySink implementation for OdbcSink.
func (osVar OdbcSink) AsDocumentDbCollectionSink() (*DocumentDbCollectionSink, bool) {
	return nil, false
}

// AsFileSystemSink is the CopySink implementation for OdbcSink.
func (osVar OdbcSink) AsFileSystemSink() (*FileSystemSink, bool) {
	return nil, false
}

// AsBlobSink is the CopySink implementation for OdbcSink.
func (osVar OdbcSink) AsBlobSink() (*BlobSink, bool) {
	return nil, false
}

// AsAzureTableSink is the CopySink implementation for OdbcSink.
func (osVar OdbcSink) AsAzureTableSink() (*AzureTableSink, bool) {
	return nil, false
}

// AsAzureQueueSink is the CopySink implementation for OdbcSink.
func (osVar OdbcSink) AsAzureQueueSink() (*AzureQueueSink, bool) {
	return nil, false
}

// Operation is azure Data Factory API operation definition.
type Operation struct {
	Name                 *string           `json:"name,omitempty"`
	Origin               *string           `json:"origin,omitempty"`
	Display              *OperationDisplay `json:"display,omitempty"`
	*OperationProperties `json:"properties,omitempty"`
}

// OperationDisplay is metadata associated with the operation.
type OperationDisplay struct {
	Description *string `json:"description,omitempty"`
	Provider    *string `json:"provider,omitempty"`
	Resource    *string `json:"resource,omitempty"`
	Operation   *string `json:"operation,omitempty"`
}

// OperationListResponse is a list of operations that can be performed by the Data Factory service.
type OperationListResponse struct {
	autorest.Response `json:"-"`
	Value             *[]Operation `json:"value,omitempty"`
	NextLink          *string      `json:"nextLink,omitempty"`
}

// OperationLogSpecification is details about an operation related to logs.
type OperationLogSpecification struct {
	Name         *string `json:"name,omitempty"`
	DisplayName  *string `json:"displayName,omitempty"`
	BlobDuration *string `json:"blobDuration,omitempty"`
}

// OperationMetricAvailability is defines how often data for a metric becomes available.
type OperationMetricAvailability struct {
	TimeGrain    *string `json:"timeGrain,omitempty"`
	BlobDuration *string `json:"blobDuration,omitempty"`
}

// OperationMetricSpecification is details about an operation related to metrics.
type OperationMetricSpecification struct {
	Name                     *string                        `json:"name,omitempty"`
	DisplayName              *string                        `json:"displayName,omitempty"`
	DisplayDescription       *string                        `json:"displayDescription,omitempty"`
	Unit                     *string                        `json:"unit,omitempty"`
	AggregationType          *string                        `json:"aggregationType,omitempty"`
	EnableRegionalMdmAccount *string                        `json:"enableRegionalMdmAccount,omitempty"`
	SourceMdmAccount         *string                        `json:"sourceMdmAccount,omitempty"`
	SourceMdmNamespace       *string                        `json:"sourceMdmNamespace,omitempty"`
	Availabilities           *[]OperationMetricAvailability `json:"availabilities,omitempty"`
}

// OperationProperties is additional details about an operation.
type OperationProperties struct {
	ServiceSpecification *OperationServiceSpecification `json:"serviceSpecification,omitempty"`
}

// OperationServiceSpecification is details about a service operation.
type OperationServiceSpecification struct {
	LogSpecifications    *[]OperationLogSpecification    `json:"logSpecifications,omitempty"`
	MetricSpecifications *[]OperationMetricSpecification `json:"metricSpecifications,omitempty"`
}

// OracleLinkedService is oracle database.
type OracleLinkedService struct {
	ConnectVia                         *IntegrationRuntimeReference `json:"connectVia,omitempty"`
	Description                        *string                      `json:"description,omitempty"`
	Type                               TypeLinkedService            `json:"type,omitempty"`
	*OracleLinkedServiceTypeProperties `json:"typeProperties,omitempty"`
}

// MarshalJSON is the custom marshaler for OracleLinkedService.
func (ols OracleLinkedService) MarshalJSON() ([]byte, error) {
	ols.Type = TypeOracle
	type Alias OracleLinkedService
	return json.Marshal(&struct {
		Alias
	}{
		Alias: (Alias)(ols),
	})
}

// AsAzureDataLakeAnalyticsLinkedService is the LinkedService implementation for OracleLinkedService.
func (ols OracleLinkedService) AsAzureDataLakeAnalyticsLinkedService() (*AzureDataLakeAnalyticsLinkedService, bool) {
	return nil, false
}

// AsHDInsightOnDemandLinkedService is the LinkedService implementation for OracleLinkedService.
func (ols OracleLinkedService) AsHDInsightOnDemandLinkedService() (*HDInsightOnDemandLinkedService, bool) {
	return nil, false
}

// AsSapHanaLinkedService is the LinkedService implementation for OracleLinkedService.
func (ols OracleLinkedService) AsSapHanaLinkedService() (*SapHanaLinkedService, bool) {
	return nil, false
}

// AsSapBWLinkedService is the LinkedService implementation for OracleLinkedService.
func (ols OracleLinkedService) AsSapBWLinkedService() (*SapBWLinkedService, bool) {
	return nil, false
}

// AsSftpServerLinkedService is the LinkedService implementation for OracleLinkedService.
func (ols OracleLinkedService) AsSftpServerLinkedService() (*SftpServerLinkedService, bool) {
	return nil, false
}

// AsFtpServerLinkedService is the LinkedService implementation for OracleLinkedService.
func (ols OracleLinkedService) AsFtpServerLinkedService() (*FtpServerLinkedService, bool) {
	return nil, false
}

// AsHTTPLinkedService is the LinkedService implementation for OracleLinkedService.
func (ols OracleLinkedService) AsHTTPLinkedService() (*HTTPLinkedService, bool) {
	return nil, false
}

// AsAzureSearchLinkedService is the LinkedService implementation for OracleLinkedService.
func (ols OracleLinkedService) AsAzureSearchLinkedService() (*AzureSearchLinkedService, bool) {
	return nil, false
}

// AsCustomDataSourceLinkedService is the LinkedService implementation for OracleLinkedService.
func (ols OracleLinkedService) AsCustomDataSourceLinkedService() (*CustomDataSourceLinkedService, bool) {
	return nil, false
}

// AsAmazonRedshiftLinkedService is the LinkedService implementation for OracleLinkedService.
func (ols OracleLinkedService) AsAmazonRedshiftLinkedService() (*AmazonRedshiftLinkedService, bool) {
	return nil, false
}

// AsAmazonS3LinkedService is the LinkedService implementation for OracleLinkedService.
func (ols OracleLinkedService) AsAmazonS3LinkedService() (*AmazonS3LinkedService, bool) {
	return nil, false
}

// AsSalesforceLinkedService is the LinkedService implementation for OracleLinkedService.
func (ols OracleLinkedService) AsSalesforceLinkedService() (*SalesforceLinkedService, bool) {
	return nil, false
}

// AsAzureDataLakeStoreLinkedService is the LinkedService implementation for OracleLinkedService.
func (ols OracleLinkedService) AsAzureDataLakeStoreLinkedService() (*AzureDataLakeStoreLinkedService, bool) {
	return nil, false
}

// AsMongoDbLinkedService is the LinkedService implementation for OracleLinkedService.
func (ols OracleLinkedService) AsMongoDbLinkedService() (*MongoDbLinkedService, bool) {
	return nil, false
}

// AsCassandraLinkedService is the LinkedService implementation for OracleLinkedService.
func (ols OracleLinkedService) AsCassandraLinkedService() (*CassandraLinkedService, bool) {
	return nil, false
}

// AsWebLinkedService is the LinkedService implementation for OracleLinkedService.
func (ols OracleLinkedService) AsWebLinkedService() (*WebLinkedService, bool) {
	return nil, false
}

// AsODataLinkedService is the LinkedService implementation for OracleLinkedService.
func (ols OracleLinkedService) AsODataLinkedService() (*ODataLinkedService, bool) {
	return nil, false
}

// AsHdfsLinkedService is the LinkedService implementation for OracleLinkedService.
func (ols OracleLinkedService) AsHdfsLinkedService() (*HdfsLinkedService, bool) {
	return nil, false
}

// AsOdbcLinkedService is the LinkedService implementation for OracleLinkedService.
func (ols OracleLinkedService) AsOdbcLinkedService() (*OdbcLinkedService, bool) {
	return nil, false
}

// AsAzureMLLinkedService is the LinkedService implementation for OracleLinkedService.
func (ols OracleLinkedService) AsAzureMLLinkedService() (*AzureMLLinkedService, bool) {
	return nil, false
}

// AsTeradataLinkedService is the LinkedService implementation for OracleLinkedService.
func (ols OracleLinkedService) AsTeradataLinkedService() (*TeradataLinkedService, bool) {
	return nil, false
}

// AsDb2LinkedService is the LinkedService implementation for OracleLinkedService.
func (ols OracleLinkedService) AsDb2LinkedService() (*Db2LinkedService, bool) {
	return nil, false
}

// AsSybaseLinkedService is the LinkedService implementation for OracleLinkedService.
func (ols OracleLinkedService) AsSybaseLinkedService() (*SybaseLinkedService, bool) {
	return nil, false
}

// AsPostgreSQLLinkedService is the LinkedService implementation for OracleLinkedService.
func (ols OracleLinkedService) AsPostgreSQLLinkedService() (*PostgreSQLLinkedService, bool) {
	return nil, false
}

// AsMySQLLinkedService is the LinkedService implementation for OracleLinkedService.
func (ols OracleLinkedService) AsMySQLLinkedService() (*MySQLLinkedService, bool) {
	return nil, false
}

// AsOracleLinkedService is the LinkedService implementation for OracleLinkedService.
func (ols OracleLinkedService) AsOracleLinkedService() (*OracleLinkedService, bool) {
	return &ols, true
}

// AsFileServerLinkedService is the LinkedService implementation for OracleLinkedService.
func (ols OracleLinkedService) AsFileServerLinkedService() (*FileServerLinkedService, bool) {
	return nil, false
}

// AsHDInsightLinkedService is the LinkedService implementation for OracleLinkedService.
func (ols OracleLinkedService) AsHDInsightLinkedService() (*HDInsightLinkedService, bool) {
	return nil, false
}

// AsDynamicsLinkedService is the LinkedService implementation for OracleLinkedService.
func (ols OracleLinkedService) AsDynamicsLinkedService() (*DynamicsLinkedService, bool) {
	return nil, false
}

// AsCosmosDbLinkedService is the LinkedService implementation for OracleLinkedService.
func (ols OracleLinkedService) AsCosmosDbLinkedService() (*CosmosDbLinkedService, bool) {
	return nil, false
}

// AsAzureKeyVaultLinkedService is the LinkedService implementation for OracleLinkedService.
func (ols OracleLinkedService) AsAzureKeyVaultLinkedService() (*AzureKeyVaultLinkedService, bool) {
	return nil, false
}

// AsAzureBatchLinkedService is the LinkedService implementation for OracleLinkedService.
func (ols OracleLinkedService) AsAzureBatchLinkedService() (*AzureBatchLinkedService, bool) {
	return nil, false
}

// AsAzureSQLDatabaseLinkedService is the LinkedService implementation for OracleLinkedService.
func (ols OracleLinkedService) AsAzureSQLDatabaseLinkedService() (*AzureSQLDatabaseLinkedService, bool) {
	return nil, false
}

// AsSQLServerLinkedService is the LinkedService implementation for OracleLinkedService.
func (ols OracleLinkedService) AsSQLServerLinkedService() (*SQLServerLinkedService, bool) {
	return nil, false
}

// AsAzureSQLDWLinkedService is the LinkedService implementation for OracleLinkedService.
func (ols OracleLinkedService) AsAzureSQLDWLinkedService() (*AzureSQLDWLinkedService, bool) {
	return nil, false
}

// AsAzureStorageLinkedService is the LinkedService implementation for OracleLinkedService.
func (ols OracleLinkedService) AsAzureStorageLinkedService() (*AzureStorageLinkedService, bool) {
	return nil, false
}

// OracleLinkedServiceTypeProperties is oracle database linked service properties.
type OracleLinkedServiceTypeProperties struct {
	ConnectionString    *SecureString           `json:"connectionString,omitempty"`
	EncryptedCredential *map[string]interface{} `json:"encryptedCredential,omitempty"`
}

// OracleSink is a copy activity Oracle sink.
type OracleSink struct {
	WriteBatchSize    *map[string]interface{} `json:"writeBatchSize,omitempty"`
	WriteBatchTimeout *map[string]interface{} `json:"writeBatchTimeout,omitempty"`
	SinkRetryCount    *map[string]interface{} `json:"sinkRetryCount,omitempty"`
	SinkRetryWait     *map[string]interface{} `json:"sinkRetryWait,omitempty"`
	Type              TypeCopySink            `json:"type,omitempty"`
	PreCopyScript     *map[string]interface{} `json:"preCopyScript,omitempty"`
}

// MarshalJSON is the custom marshaler for OracleSink.
func (osVar OracleSink) MarshalJSON() ([]byte, error) {
	osVar.Type = TypeOracleSink
	type Alias OracleSink
	return json.Marshal(&struct {
		Alias
	}{
		Alias: (Alias)(osVar),
	})
}

// AsOdbcSink is the CopySink implementation for OracleSink.
func (osVar OracleSink) AsOdbcSink() (*OdbcSink, bool) {
	return nil, false
}

// AsAzureSearchIndexSink is the CopySink implementation for OracleSink.
func (osVar OracleSink) AsAzureSearchIndexSink() (*AzureSearchIndexSink, bool) {
	return nil, false
}

// AsAzureDataLakeStoreSink is the CopySink implementation for OracleSink.
func (osVar OracleSink) AsAzureDataLakeStoreSink() (*AzureDataLakeStoreSink, bool) {
	return nil, false
}

// AsOracleSink is the CopySink implementation for OracleSink.
func (osVar OracleSink) AsOracleSink() (*OracleSink, bool) {
	return &osVar, true
}

// AsSQLDWSink is the CopySink implementation for OracleSink.
func (osVar OracleSink) AsSQLDWSink() (*SQLDWSink, bool) {
	return nil, false
}

// AsSQLSink is the CopySink implementation for OracleSink.
func (osVar OracleSink) AsSQLSink() (*SQLSink, bool) {
	return nil, false
}

// AsDocumentDbCollectionSink is the CopySink implementation for OracleSink.
func (osVar OracleSink) AsDocumentDbCollectionSink() (*DocumentDbCollectionSink, bool) {
	return nil, false
}

// AsFileSystemSink is the CopySink implementation for OracleSink.
func (osVar OracleSink) AsFileSystemSink() (*FileSystemSink, bool) {
	return nil, false
}

// AsBlobSink is the CopySink implementation for OracleSink.
func (osVar OracleSink) AsBlobSink() (*BlobSink, bool) {
	return nil, false
}

// AsAzureTableSink is the CopySink implementation for OracleSink.
func (osVar OracleSink) AsAzureTableSink() (*AzureTableSink, bool) {
	return nil, false
}

// AsAzureQueueSink is the CopySink implementation for OracleSink.
func (osVar OracleSink) AsAzureQueueSink() (*AzureQueueSink, bool) {
	return nil, false
}

// OracleSource is a copy activity Oracle source.
type OracleSource struct {
	SourceRetryCount  *map[string]interface{} `json:"sourceRetryCount,omitempty"`
	SourceRetryWait   *map[string]interface{} `json:"sourceRetryWait,omitempty"`
	Type              TypeCopySource          `json:"type,omitempty"`
	OracleReaderQuery *map[string]interface{} `json:"oracleReaderQuery,omitempty"`
	QueryTimeout      *map[string]interface{} `json:"queryTimeout,omitempty"`
}

// MarshalJSON is the custom marshaler for OracleSource.
func (osVar OracleSource) MarshalJSON() ([]byte, error) {
	osVar.Type = TypeOracleSource
	type Alias OracleSource
	return json.Marshal(&struct {
		Alias
	}{
		Alias: (Alias)(osVar),
	})
}

// AsAmazonRedshiftSource is the CopySource implementation for OracleSource.
func (osVar OracleSource) AsAmazonRedshiftSource() (*AmazonRedshiftSource, bool) {
	return nil, false
}

// AsHTTPSource is the CopySource implementation for OracleSource.
func (osVar OracleSource) AsHTTPSource() (*HTTPSource, bool) {
	return nil, false
}

// AsAzureDataLakeStoreSource is the CopySource implementation for OracleSource.
func (osVar OracleSource) AsAzureDataLakeStoreSource() (*AzureDataLakeStoreSource, bool) {
	return nil, false
}

// AsMongoDbSource is the CopySource implementation for OracleSource.
func (osVar OracleSource) AsMongoDbSource() (*MongoDbSource, bool) {
	return nil, false
}

// AsCassandraSource is the CopySource implementation for OracleSource.
func (osVar OracleSource) AsCassandraSource() (*CassandraSource, bool) {
	return nil, false
}

// AsWebSource is the CopySource implementation for OracleSource.
func (osVar OracleSource) AsWebSource() (*WebSource, bool) {
	return nil, false
}

// AsOracleSource is the CopySource implementation for OracleSource.
func (osVar OracleSource) AsOracleSource() (*OracleSource, bool) {
	return &osVar, true
}

// AsHdfsSource is the CopySource implementation for OracleSource.
func (osVar OracleSource) AsHdfsSource() (*HdfsSource, bool) {
	return nil, false
}

// AsFileSystemSource is the CopySource implementation for OracleSource.
func (osVar OracleSource) AsFileSystemSource() (*FileSystemSource, bool) {
	return nil, false
}

// AsSQLDWSource is the CopySource implementation for OracleSource.
func (osVar OracleSource) AsSQLDWSource() (*SQLDWSource, bool) {
	return nil, false
}

// AsSQLSource is the CopySource implementation for OracleSource.
func (osVar OracleSource) AsSQLSource() (*SQLSource, bool) {
	return nil, false
}

// AsRelationalSource is the CopySource implementation for OracleSource.
func (osVar OracleSource) AsRelationalSource() (*RelationalSource, bool) {
	return nil, false
}

// AsDynamicsSource is the CopySource implementation for OracleSource.
func (osVar OracleSource) AsDynamicsSource() (*DynamicsSource, bool) {
	return nil, false
}

// AsDocumentDbCollectionSource is the CopySource implementation for OracleSource.
func (osVar OracleSource) AsDocumentDbCollectionSource() (*DocumentDbCollectionSource, bool) {
	return nil, false
}

// AsBlobSource is the CopySource implementation for OracleSource.
func (osVar OracleSource) AsBlobSource() (*BlobSource, bool) {
	return nil, false
}

// AsAzureTableSource is the CopySource implementation for OracleSource.
func (osVar OracleSource) AsAzureTableSource() (*AzureTableSource, bool) {
	return nil, false
}

// OracleTableDataset is the on-premises Oracle database dataset.
type OracleTableDataset struct {
	Description                       *string                             `json:"description,omitempty"`
	Structure                         *map[string]interface{}             `json:"structure,omitempty"`
	LinkedServiceName                 *LinkedServiceReference             `json:"linkedServiceName,omitempty"`
	Parameters                        *map[string]*ParameterSpecification `json:"parameters,omitempty"`
	Type                              TypeDataset                         `json:"type,omitempty"`
	*OracleTableDatasetTypeProperties `json:"typeProperties,omitempty"`
}

// MarshalJSON is the custom marshaler for OracleTableDataset.
func (otd OracleTableDataset) MarshalJSON() ([]byte, error) {
	otd.Type = TypeOracleTable
	type Alias OracleTableDataset
	return json.Marshal(&struct {
		Alias
	}{
		Alias: (Alias)(otd),
	})
}

// AsHTTPDataset is the Dataset implementation for OracleTableDataset.
func (otd OracleTableDataset) AsHTTPDataset() (*HTTPDataset, bool) {
	return nil, false
}

// AsAzureSearchIndexDataset is the Dataset implementation for OracleTableDataset.
func (otd OracleTableDataset) AsAzureSearchIndexDataset() (*AzureSearchIndexDataset, bool) {
	return nil, false
}

// AsWebTableDataset is the Dataset implementation for OracleTableDataset.
func (otd OracleTableDataset) AsWebTableDataset() (*WebTableDataset, bool) {
	return nil, false
}

// AsSQLServerTableDataset is the Dataset implementation for OracleTableDataset.
func (otd OracleTableDataset) AsSQLServerTableDataset() (*SQLServerTableDataset, bool) {
	return nil, false
}

// AsRelationalTableDataset is the Dataset implementation for OracleTableDataset.
func (otd OracleTableDataset) AsRelationalTableDataset() (*RelationalTableDataset, bool) {
	return nil, false
}

// AsOracleTableDataset is the Dataset implementation for OracleTableDataset.
func (otd OracleTableDataset) AsOracleTableDataset() (*OracleTableDataset, bool) {
	return &otd, true
}

// AsODataResourceDataset is the Dataset implementation for OracleTableDataset.
func (otd OracleTableDataset) AsODataResourceDataset() (*ODataResourceDataset, bool) {
	return nil, false
}

// AsMongoDbCollectionDataset is the Dataset implementation for OracleTableDataset.
func (otd OracleTableDataset) AsMongoDbCollectionDataset() (*MongoDbCollectionDataset, bool) {
	return nil, false
}

// AsFileShareDataset is the Dataset implementation for OracleTableDataset.
func (otd OracleTableDataset) AsFileShareDataset() (*FileShareDataset, bool) {
	return nil, false
}

// AsAzureDataLakeStoreDataset is the Dataset implementation for OracleTableDataset.
func (otd OracleTableDataset) AsAzureDataLakeStoreDataset() (*AzureDataLakeStoreDataset, bool) {
	return nil, false
}

// AsDynamicsEntityDataset is the Dataset implementation for OracleTableDataset.
func (otd OracleTableDataset) AsDynamicsEntityDataset() (*DynamicsEntityDataset, bool) {
	return nil, false
}

// AsDocumentDbCollectionDataset is the Dataset implementation for OracleTableDataset.
func (otd OracleTableDataset) AsDocumentDbCollectionDataset() (*DocumentDbCollectionDataset, bool) {
	return nil, false
}

// AsCustomDataset is the Dataset implementation for OracleTableDataset.
func (otd OracleTableDataset) AsCustomDataset() (*CustomDataset, bool) {
	return nil, false
}

// AsCassandraTableDataset is the Dataset implementation for OracleTableDataset.
func (otd OracleTableDataset) AsCassandraTableDataset() (*CassandraTableDataset, bool) {
	return nil, false
}

// AsAzureSQLDWTableDataset is the Dataset implementation for OracleTableDataset.
func (otd OracleTableDataset) AsAzureSQLDWTableDataset() (*AzureSQLDWTableDataset, bool) {
	return nil, false
}

// AsAzureSQLTableDataset is the Dataset implementation for OracleTableDataset.
func (otd OracleTableDataset) AsAzureSQLTableDataset() (*AzureSQLTableDataset, bool) {
	return nil, false
}

// AsAzureTableDataset is the Dataset implementation for OracleTableDataset.
func (otd OracleTableDataset) AsAzureTableDataset() (*AzureTableDataset, bool) {
	return nil, false
}

// AsAzureBlobDataset is the Dataset implementation for OracleTableDataset.
func (otd OracleTableDataset) AsAzureBlobDataset() (*AzureBlobDataset, bool) {
	return nil, false
}

// AsAmazonS3Dataset is the Dataset implementation for OracleTableDataset.
func (otd OracleTableDataset) AsAmazonS3Dataset() (*AmazonS3Dataset, bool) {
	return nil, false
}

// OracleTableDatasetTypeProperties is on-premises Oracle dataset properties.
type OracleTableDatasetTypeProperties struct {
	TableName *map[string]interface{} `json:"tableName,omitempty"`
}

// OrcFormat is the data stored in Optimized Row Columnar (ORC) format.
type OrcFormat struct {
	Serializer   *map[string]interface{}  `json:"serializer,omitempty"`
	Deserializer *map[string]interface{}  `json:"deserializer,omitempty"`
	Type         TypeDatasetStorageFormat `json:"type,omitempty"`
}

// MarshalJSON is the custom marshaler for OrcFormat.
func (of OrcFormat) MarshalJSON() ([]byte, error) {
	of.Type = TypeOrcFormat
	type Alias OrcFormat
	return json.Marshal(&struct {
		Alias
	}{
		Alias: (Alias)(of),
	})
}

// AsParquetFormat is the DatasetStorageFormat implementation for OrcFormat.
func (of OrcFormat) AsParquetFormat() (*ParquetFormat, bool) {
	return nil, false
}

// AsOrcFormat is the DatasetStorageFormat implementation for OrcFormat.
func (of OrcFormat) AsOrcFormat() (*OrcFormat, bool) {
	return &of, true
}

// AsAvroFormat is the DatasetStorageFormat implementation for OrcFormat.
func (of OrcFormat) AsAvroFormat() (*AvroFormat, bool) {
	return nil, false
}

// AsJSONFormat is the DatasetStorageFormat implementation for OrcFormat.
func (of OrcFormat) AsJSONFormat() (*JSONFormat, bool) {
	return nil, false
}

// AsTextFormat is the DatasetStorageFormat implementation for OrcFormat.
func (of OrcFormat) AsTextFormat() (*TextFormat, bool) {
	return nil, false
}

// ParameterSpecification is definition of a single parameter for an entity.
type ParameterSpecification struct {
	Type         ParameterType           `json:"type,omitempty"`
	DefaultValue *map[string]interface{} `json:"defaultValue,omitempty"`
}

// ParquetFormat is the data stored in Parquet format.
type ParquetFormat struct {
	Serializer   *map[string]interface{}  `json:"serializer,omitempty"`
	Deserializer *map[string]interface{}  `json:"deserializer,omitempty"`
	Type         TypeDatasetStorageFormat `json:"type,omitempty"`
}

// MarshalJSON is the custom marshaler for ParquetFormat.
func (pf ParquetFormat) MarshalJSON() ([]byte, error) {
	pf.Type = TypeParquetFormat
	type Alias ParquetFormat
	return json.Marshal(&struct {
		Alias
	}{
		Alias: (Alias)(pf),
	})
}

// AsParquetFormat is the DatasetStorageFormat implementation for ParquetFormat.
func (pf ParquetFormat) AsParquetFormat() (*ParquetFormat, bool) {
	return &pf, true
}

// AsOrcFormat is the DatasetStorageFormat implementation for ParquetFormat.
func (pf ParquetFormat) AsOrcFormat() (*OrcFormat, bool) {
	return nil, false
}

// AsAvroFormat is the DatasetStorageFormat implementation for ParquetFormat.
func (pf ParquetFormat) AsAvroFormat() (*AvroFormat, bool) {
	return nil, false
}

// AsJSONFormat is the DatasetStorageFormat implementation for ParquetFormat.
func (pf ParquetFormat) AsJSONFormat() (*JSONFormat, bool) {
	return nil, false
}

// AsTextFormat is the DatasetStorageFormat implementation for ParquetFormat.
func (pf ParquetFormat) AsTextFormat() (*TextFormat, bool) {
	return nil, false
}

// Pipeline is a data factory pipeline.
type Pipeline struct {
	Description *string                             `json:"description,omitempty"`
	Activities  *[]Activity                         `json:"activities,omitempty"`
	Parameters  *map[string]*ParameterSpecification `json:"parameters,omitempty"`
	Concurrency *int32                              `json:"concurrency,omitempty"`
}

// UnmarshalJSON is the custom unmarshaler for Pipeline struct.
func (p *Pipeline) UnmarshalJSON(body []byte) error {
	var m map[string]*json.RawMessage
	err := json.Unmarshal(body, &m)
	if err != nil {
		return err
	}
	var v *json.RawMessage

	v = m["description"]
	if v != nil {
		var description string
		err = json.Unmarshal(*m["description"], &description)
		if err != nil {
			return err
		}
		p.Description = &description
	}

	v = m["activities"]
	if v != nil {
		activities, err := unmarshalActivityArray(*m["activities"])
		if err != nil {
			return err
		}
		p.Activities = &activities
	}

	v = m["parameters"]
	if v != nil {
		var parameters map[string]*ParameterSpecification
		err = json.Unmarshal(*m["parameters"], &parameters)
		if err != nil {
			return err
		}
		p.Parameters = &parameters
	}

	v = m["concurrency"]
	if v != nil {
		var concurrency int32
		err = json.Unmarshal(*m["concurrency"], &concurrency)
		if err != nil {
			return err
		}
		p.Concurrency = &concurrency
	}

	return nil
}

// PipelineListResponse is a list of pipeline resources.
type PipelineListResponse struct {
	autorest.Response `json:"-"`
	Value             *[]PipelineResource `json:"value,omitempty"`
	NextLink          *string             `json:"nextLink,omitempty"`
}

// PipelineListResponsePreparer prepares a request to retrieve the next set of results. It returns
// nil if no more results exist.
func (client PipelineListResponse) PipelineListResponsePreparer() (*http.Request, error) {
	if client.NextLink == nil || len(to.String(client.NextLink)) <= 0 {
		return nil, nil
	}
	return autorest.Prepare(&http.Request{},
		autorest.AsJSON(),
		autorest.AsGet(),
		autorest.WithBaseURL(to.String(client.NextLink)))
}

// PipelineReference is pipeline reference type.
type PipelineReference struct {
	Type          *string `json:"type,omitempty"`
	ReferenceName *string `json:"referenceName,omitempty"`
	Name          *string `json:"name,omitempty"`
}

// PipelineResource is pipeline resource type.
type PipelineResource struct {
	autorest.Response `json:"-"`
	ID                *string `json:"id,omitempty"`
	Name              *string `json:"name,omitempty"`
	Type              *string `json:"type,omitempty"`
	Etag              *string `json:"etag,omitempty"`
	*Pipeline         `json:"properties,omitempty"`
}

// PipelineRun is information about a pipeline run.
type PipelineRun struct {
	autorest.Response `json:"-"`
	RunID             *string               `json:"runId,omitempty"`
	PipelineName      *string               `json:"pipelineName,omitempty"`
	Parameters        *map[string]*string   `json:"parameters,omitempty"`
	InvokedBy         *PipelineRunInvokedBy `json:"invokedBy,omitempty"`
	LastUpdated       *date.Time            `json:"lastUpdated,omitempty"`
	RunStart          *date.Time            `json:"runStart,omitempty"`
	RunEnd            *date.Time            `json:"runEnd,omitempty"`
	DurationInMs      *int32                `json:"durationInMs,omitempty"`
	Status            *string               `json:"status,omitempty"`
	Message           *string               `json:"message,omitempty"`
}

// PipelineRunFilterParameters is query parameters for listing pipeline runs.
type PipelineRunFilterParameters struct {
	ContinuationToken *string                    `json:"continuationToken,omitempty"`
	LastUpdatedAfter  *date.Time                 `json:"lastUpdatedAfter,omitempty"`
	LastUpdatedBefore *date.Time                 `json:"lastUpdatedBefore,omitempty"`
	Filters           *[]PipelineRunQueryFilter  `json:"filters,omitempty"`
	OrderBy           *[]PipelineRunQueryOrderBy `json:"orderBy,omitempty"`
}

// PipelineRunInvokedBy is provides entity name and id that started the pipeline run.
type PipelineRunInvokedBy struct {
	Name *string `json:"name,omitempty"`
	ID   *string `json:"id,omitempty"`
}

// PipelineRunQueryFilter is query filter option for listing pipeline runs.
type PipelineRunQueryFilter struct {
	Operand  PipelineRunQueryFilterOperand  `json:"operand,omitempty"`
	Operator PipelineRunQueryFilterOperator `json:"operator,omitempty"`
	Values   *[]string                      `json:"values,omitempty"`
}

// PipelineRunQueryOrderBy is an object to provide order by options for listing pipeline runs.
type PipelineRunQueryOrderBy struct {
	OrderBy PipelineRunQueryOrderByField `json:"orderBy,omitempty"`
	Order   PipelineRunQueryOrder        `json:"order,omitempty"`
}

// PipelineRunQueryResponse is a list pipeline runs.
type PipelineRunQueryResponse struct {
	autorest.Response `json:"-"`
	Value             *[]PipelineRun `json:"value,omitempty"`
	ContinuationToken *string        `json:"continuationToken,omitempty"`
}

// PolybaseSettings is polyBase settings.
type PolybaseSettings struct {
	RejectType        PolybaseSettingsRejectType `json:"rejectType,omitempty"`
	RejectValue       *map[string]interface{}    `json:"rejectValue,omitempty"`
	RejectSampleValue *map[string]interface{}    `json:"rejectSampleValue,omitempty"`
	UseTypeDefault    *map[string]interface{}    `json:"useTypeDefault,omitempty"`
}

// PostgreSQLLinkedService is linked service for PostgreSQL data source.
type PostgreSQLLinkedService struct {
	ConnectVia                             *IntegrationRuntimeReference `json:"connectVia,omitempty"`
	Description                            *string                      `json:"description,omitempty"`
	Type                                   TypeLinkedService            `json:"type,omitempty"`
	*PostgreSQLLinkedServiceTypeProperties `json:"typeProperties,omitempty"`
}

// MarshalJSON is the custom marshaler for PostgreSQLLinkedService.
func (psls PostgreSQLLinkedService) MarshalJSON() ([]byte, error) {
	psls.Type = TypePostgreSQL
	type Alias PostgreSQLLinkedService
	return json.Marshal(&struct {
		Alias
	}{
		Alias: (Alias)(psls),
	})
}

// AsAzureDataLakeAnalyticsLinkedService is the LinkedService implementation for PostgreSQLLinkedService.
func (psls PostgreSQLLinkedService) AsAzureDataLakeAnalyticsLinkedService() (*AzureDataLakeAnalyticsLinkedService, bool) {
	return nil, false
}

// AsHDInsightOnDemandLinkedService is the LinkedService implementation for PostgreSQLLinkedService.
func (psls PostgreSQLLinkedService) AsHDInsightOnDemandLinkedService() (*HDInsightOnDemandLinkedService, bool) {
	return nil, false
}

// AsSapHanaLinkedService is the LinkedService implementation for PostgreSQLLinkedService.
func (psls PostgreSQLLinkedService) AsSapHanaLinkedService() (*SapHanaLinkedService, bool) {
	return nil, false
}

// AsSapBWLinkedService is the LinkedService implementation for PostgreSQLLinkedService.
func (psls PostgreSQLLinkedService) AsSapBWLinkedService() (*SapBWLinkedService, bool) {
	return nil, false
}

// AsSftpServerLinkedService is the LinkedService implementation for PostgreSQLLinkedService.
func (psls PostgreSQLLinkedService) AsSftpServerLinkedService() (*SftpServerLinkedService, bool) {
	return nil, false
}

// AsFtpServerLinkedService is the LinkedService implementation for PostgreSQLLinkedService.
func (psls PostgreSQLLinkedService) AsFtpServerLinkedService() (*FtpServerLinkedService, bool) {
	return nil, false
}

// AsHTTPLinkedService is the LinkedService implementation for PostgreSQLLinkedService.
func (psls PostgreSQLLinkedService) AsHTTPLinkedService() (*HTTPLinkedService, bool) {
	return nil, false
}

// AsAzureSearchLinkedService is the LinkedService implementation for PostgreSQLLinkedService.
func (psls PostgreSQLLinkedService) AsAzureSearchLinkedService() (*AzureSearchLinkedService, bool) {
	return nil, false
}

// AsCustomDataSourceLinkedService is the LinkedService implementation for PostgreSQLLinkedService.
func (psls PostgreSQLLinkedService) AsCustomDataSourceLinkedService() (*CustomDataSourceLinkedService, bool) {
	return nil, false
}

// AsAmazonRedshiftLinkedService is the LinkedService implementation for PostgreSQLLinkedService.
func (psls PostgreSQLLinkedService) AsAmazonRedshiftLinkedService() (*AmazonRedshiftLinkedService, bool) {
	return nil, false
}

// AsAmazonS3LinkedService is the LinkedService implementation for PostgreSQLLinkedService.
func (psls PostgreSQLLinkedService) AsAmazonS3LinkedService() (*AmazonS3LinkedService, bool) {
	return nil, false
}

// AsSalesforceLinkedService is the LinkedService implementation for PostgreSQLLinkedService.
func (psls PostgreSQLLinkedService) AsSalesforceLinkedService() (*SalesforceLinkedService, bool) {
	return nil, false
}

// AsAzureDataLakeStoreLinkedService is the LinkedService implementation for PostgreSQLLinkedService.
func (psls PostgreSQLLinkedService) AsAzureDataLakeStoreLinkedService() (*AzureDataLakeStoreLinkedService, bool) {
	return nil, false
}

// AsMongoDbLinkedService is the LinkedService implementation for PostgreSQLLinkedService.
func (psls PostgreSQLLinkedService) AsMongoDbLinkedService() (*MongoDbLinkedService, bool) {
	return nil, false
}

// AsCassandraLinkedService is the LinkedService implementation for PostgreSQLLinkedService.
func (psls PostgreSQLLinkedService) AsCassandraLinkedService() (*CassandraLinkedService, bool) {
	return nil, false
}

// AsWebLinkedService is the LinkedService implementation for PostgreSQLLinkedService.
func (psls PostgreSQLLinkedService) AsWebLinkedService() (*WebLinkedService, bool) {
	return nil, false
}

// AsODataLinkedService is the LinkedService implementation for PostgreSQLLinkedService.
func (psls PostgreSQLLinkedService) AsODataLinkedService() (*ODataLinkedService, bool) {
	return nil, false
}

// AsHdfsLinkedService is the LinkedService implementation for PostgreSQLLinkedService.
func (psls PostgreSQLLinkedService) AsHdfsLinkedService() (*HdfsLinkedService, bool) {
	return nil, false
}

// AsOdbcLinkedService is the LinkedService implementation for PostgreSQLLinkedService.
func (psls PostgreSQLLinkedService) AsOdbcLinkedService() (*OdbcLinkedService, bool) {
	return nil, false
}

// AsAzureMLLinkedService is the LinkedService implementation for PostgreSQLLinkedService.
func (psls PostgreSQLLinkedService) AsAzureMLLinkedService() (*AzureMLLinkedService, bool) {
	return nil, false
}

// AsTeradataLinkedService is the LinkedService implementation for PostgreSQLLinkedService.
func (psls PostgreSQLLinkedService) AsTeradataLinkedService() (*TeradataLinkedService, bool) {
	return nil, false
}

// AsDb2LinkedService is the LinkedService implementation for PostgreSQLLinkedService.
func (psls PostgreSQLLinkedService) AsDb2LinkedService() (*Db2LinkedService, bool) {
	return nil, false
}

// AsSybaseLinkedService is the LinkedService implementation for PostgreSQLLinkedService.
func (psls PostgreSQLLinkedService) AsSybaseLinkedService() (*SybaseLinkedService, bool) {
	return nil, false
}

// AsPostgreSQLLinkedService is the LinkedService implementation for PostgreSQLLinkedService.
func (psls PostgreSQLLinkedService) AsPostgreSQLLinkedService() (*PostgreSQLLinkedService, bool) {
	return &psls, true
}

// AsMySQLLinkedService is the LinkedService implementation for PostgreSQLLinkedService.
func (psls PostgreSQLLinkedService) AsMySQLLinkedService() (*MySQLLinkedService, bool) {
	return nil, false
}

// AsOracleLinkedService is the LinkedService implementation for PostgreSQLLinkedService.
func (psls PostgreSQLLinkedService) AsOracleLinkedService() (*OracleLinkedService, bool) {
	return nil, false
}

// AsFileServerLinkedService is the LinkedService implementation for PostgreSQLLinkedService.
func (psls PostgreSQLLinkedService) AsFileServerLinkedService() (*FileServerLinkedService, bool) {
	return nil, false
}

// AsHDInsightLinkedService is the LinkedService implementation for PostgreSQLLinkedService.
func (psls PostgreSQLLinkedService) AsHDInsightLinkedService() (*HDInsightLinkedService, bool) {
	return nil, false
}

// AsDynamicsLinkedService is the LinkedService implementation for PostgreSQLLinkedService.
func (psls PostgreSQLLinkedService) AsDynamicsLinkedService() (*DynamicsLinkedService, bool) {
	return nil, false
}

// AsCosmosDbLinkedService is the LinkedService implementation for PostgreSQLLinkedService.
func (psls PostgreSQLLinkedService) AsCosmosDbLinkedService() (*CosmosDbLinkedService, bool) {
	return nil, false
}

// AsAzureKeyVaultLinkedService is the LinkedService implementation for PostgreSQLLinkedService.
func (psls PostgreSQLLinkedService) AsAzureKeyVaultLinkedService() (*AzureKeyVaultLinkedService, bool) {
	return nil, false
}

// AsAzureBatchLinkedService is the LinkedService implementation for PostgreSQLLinkedService.
func (psls PostgreSQLLinkedService) AsAzureBatchLinkedService() (*AzureBatchLinkedService, bool) {
	return nil, false
}

// AsAzureSQLDatabaseLinkedService is the LinkedService implementation for PostgreSQLLinkedService.
func (psls PostgreSQLLinkedService) AsAzureSQLDatabaseLinkedService() (*AzureSQLDatabaseLinkedService, bool) {
	return nil, false
}

// AsSQLServerLinkedService is the LinkedService implementation for PostgreSQLLinkedService.
func (psls PostgreSQLLinkedService) AsSQLServerLinkedService() (*SQLServerLinkedService, bool) {
	return nil, false
}

// AsAzureSQLDWLinkedService is the LinkedService implementation for PostgreSQLLinkedService.
func (psls PostgreSQLLinkedService) AsAzureSQLDWLinkedService() (*AzureSQLDWLinkedService, bool) {
	return nil, false
}

// AsAzureStorageLinkedService is the LinkedService implementation for PostgreSQLLinkedService.
func (psls PostgreSQLLinkedService) AsAzureStorageLinkedService() (*AzureStorageLinkedService, bool) {
	return nil, false
}

// PostgreSQLLinkedServiceTypeProperties is postgreSQL linked service properties.
type PostgreSQLLinkedServiceTypeProperties struct {
	Server              *map[string]interface{} `json:"server,omitempty"`
	Database            *map[string]interface{} `json:"database,omitempty"`
	Schema              *map[string]interface{} `json:"schema,omitempty"`
	Username            *map[string]interface{} `json:"username,omitempty"`
	Password            *SecureString           `json:"password,omitempty"`
	EncryptedCredential *map[string]interface{} `json:"encryptedCredential,omitempty"`
}

// RecurrenceSchedule is the recurrence schedule.
type RecurrenceSchedule struct {
	Minutes            *[]int32                        `json:"minutes,omitempty"`
	Hours              *[]int32                        `json:"hours,omitempty"`
	WeekDays           *[]DaysOfWeek                   `json:"weekDays,omitempty"`
	MonthDays          *[]int32                        `json:"monthDays,omitempty"`
	MonthlyOccurrences *[]RecurrenceScheduleOccurrence `json:"monthlyOccurrences,omitempty"`
}

// RecurrenceScheduleOccurrence is the recurrence schedule occurence.
type RecurrenceScheduleOccurrence struct {
	Day        DayOfWeek `json:"day,omitempty"`
	Occurrence *int32    `json:"occurrence,omitempty"`
}

// RedirectIncompatibleRowSettings is redirect incompatible row settings
type RedirectIncompatibleRowSettings struct {
	LinkedServiceName *map[string]interface{} `json:"linkedServiceName,omitempty"`
	Path              *map[string]interface{} `json:"path,omitempty"`
}

// RedshiftUnloadSettings is the Amazon S3 settings needed for the interim Amazon S3 when copying from Amazon Redshift
// with unload. With this, data from Amazon Redshift source will be unloaded into S3 first and then copied into the
// targeted sink from the interim S3.
type RedshiftUnloadSettings struct {
	S3LinkedServiceName *LinkedServiceReference `json:"s3LinkedServiceName,omitempty"`
	BucketName          *map[string]interface{} `json:"bucketName,omitempty"`
}

// RelationalSource is a copy activity source for various relational databases.
type RelationalSource struct {
	SourceRetryCount *map[string]interface{} `json:"sourceRetryCount,omitempty"`
	SourceRetryWait  *map[string]interface{} `json:"sourceRetryWait,omitempty"`
	Type             TypeCopySource          `json:"type,omitempty"`
	Query            *map[string]interface{} `json:"query,omitempty"`
}

// MarshalJSON is the custom marshaler for RelationalSource.
func (rs RelationalSource) MarshalJSON() ([]byte, error) {
	rs.Type = TypeRelationalSource
	type Alias RelationalSource
	return json.Marshal(&struct {
		Alias
	}{
		Alias: (Alias)(rs),
	})
}

// AsAmazonRedshiftSource is the CopySource implementation for RelationalSource.
func (rs RelationalSource) AsAmazonRedshiftSource() (*AmazonRedshiftSource, bool) {
	return nil, false
}

// AsHTTPSource is the CopySource implementation for RelationalSource.
func (rs RelationalSource) AsHTTPSource() (*HTTPSource, bool) {
	return nil, false
}

// AsAzureDataLakeStoreSource is the CopySource implementation for RelationalSource.
func (rs RelationalSource) AsAzureDataLakeStoreSource() (*AzureDataLakeStoreSource, bool) {
	return nil, false
}

// AsMongoDbSource is the CopySource implementation for RelationalSource.
func (rs RelationalSource) AsMongoDbSource() (*MongoDbSource, bool) {
	return nil, false
}

// AsCassandraSource is the CopySource implementation for RelationalSource.
func (rs RelationalSource) AsCassandraSource() (*CassandraSource, bool) {
	return nil, false
}

// AsWebSource is the CopySource implementation for RelationalSource.
func (rs RelationalSource) AsWebSource() (*WebSource, bool) {
	return nil, false
}

// AsOracleSource is the CopySource implementation for RelationalSource.
func (rs RelationalSource) AsOracleSource() (*OracleSource, bool) {
	return nil, false
}

// AsHdfsSource is the CopySource implementation for RelationalSource.
func (rs RelationalSource) AsHdfsSource() (*HdfsSource, bool) {
	return nil, false
}

// AsFileSystemSource is the CopySource implementation for RelationalSource.
func (rs RelationalSource) AsFileSystemSource() (*FileSystemSource, bool) {
	return nil, false
}

// AsSQLDWSource is the CopySource implementation for RelationalSource.
func (rs RelationalSource) AsSQLDWSource() (*SQLDWSource, bool) {
	return nil, false
}

// AsSQLSource is the CopySource implementation for RelationalSource.
func (rs RelationalSource) AsSQLSource() (*SQLSource, bool) {
	return nil, false
}

// AsRelationalSource is the CopySource implementation for RelationalSource.
func (rs RelationalSource) AsRelationalSource() (*RelationalSource, bool) {
	return &rs, true
}

// AsDynamicsSource is the CopySource implementation for RelationalSource.
func (rs RelationalSource) AsDynamicsSource() (*DynamicsSource, bool) {
	return nil, false
}

// AsDocumentDbCollectionSource is the CopySource implementation for RelationalSource.
func (rs RelationalSource) AsDocumentDbCollectionSource() (*DocumentDbCollectionSource, bool) {
	return nil, false
}

// AsBlobSource is the CopySource implementation for RelationalSource.
func (rs RelationalSource) AsBlobSource() (*BlobSource, bool) {
	return nil, false
}

// AsAzureTableSource is the CopySource implementation for RelationalSource.
func (rs RelationalSource) AsAzureTableSource() (*AzureTableSource, bool) {
	return nil, false
}

// RelationalTableDataset is the relational table dataset.
type RelationalTableDataset struct {
	Description                           *string                             `json:"description,omitempty"`
	Structure                             *map[string]interface{}             `json:"structure,omitempty"`
	LinkedServiceName                     *LinkedServiceReference             `json:"linkedServiceName,omitempty"`
	Parameters                            *map[string]*ParameterSpecification `json:"parameters,omitempty"`
	Type                                  TypeDataset                         `json:"type,omitempty"`
	*RelationalTableDatasetTypeProperties `json:"typeProperties,omitempty"`
}

// MarshalJSON is the custom marshaler for RelationalTableDataset.
func (rtd RelationalTableDataset) MarshalJSON() ([]byte, error) {
	rtd.Type = TypeRelationalTable
	type Alias RelationalTableDataset
	return json.Marshal(&struct {
		Alias
	}{
		Alias: (Alias)(rtd),
	})
}

// AsHTTPDataset is the Dataset implementation for RelationalTableDataset.
func (rtd RelationalTableDataset) AsHTTPDataset() (*HTTPDataset, bool) {
	return nil, false
}

// AsAzureSearchIndexDataset is the Dataset implementation for RelationalTableDataset.
func (rtd RelationalTableDataset) AsAzureSearchIndexDataset() (*AzureSearchIndexDataset, bool) {
	return nil, false
}

// AsWebTableDataset is the Dataset implementation for RelationalTableDataset.
func (rtd RelationalTableDataset) AsWebTableDataset() (*WebTableDataset, bool) {
	return nil, false
}

// AsSQLServerTableDataset is the Dataset implementation for RelationalTableDataset.
func (rtd RelationalTableDataset) AsSQLServerTableDataset() (*SQLServerTableDataset, bool) {
	return nil, false
}

// AsRelationalTableDataset is the Dataset implementation for RelationalTableDataset.
func (rtd RelationalTableDataset) AsRelationalTableDataset() (*RelationalTableDataset, bool) {
	return &rtd, true
}

// AsOracleTableDataset is the Dataset implementation for RelationalTableDataset.
func (rtd RelationalTableDataset) AsOracleTableDataset() (*OracleTableDataset, bool) {
	return nil, false
}

// AsODataResourceDataset is the Dataset implementation for RelationalTableDataset.
func (rtd RelationalTableDataset) AsODataResourceDataset() (*ODataResourceDataset, bool) {
	return nil, false
}

// AsMongoDbCollectionDataset is the Dataset implementation for RelationalTableDataset.
func (rtd RelationalTableDataset) AsMongoDbCollectionDataset() (*MongoDbCollectionDataset, bool) {
	return nil, false
}

// AsFileShareDataset is the Dataset implementation for RelationalTableDataset.
func (rtd RelationalTableDataset) AsFileShareDataset() (*FileShareDataset, bool) {
	return nil, false
}

// AsAzureDataLakeStoreDataset is the Dataset implementation for RelationalTableDataset.
func (rtd RelationalTableDataset) AsAzureDataLakeStoreDataset() (*AzureDataLakeStoreDataset, bool) {
	return nil, false
}

// AsDynamicsEntityDataset is the Dataset implementation for RelationalTableDataset.
func (rtd RelationalTableDataset) AsDynamicsEntityDataset() (*DynamicsEntityDataset, bool) {
	return nil, false
}

// AsDocumentDbCollectionDataset is the Dataset implementation for RelationalTableDataset.
func (rtd RelationalTableDataset) AsDocumentDbCollectionDataset() (*DocumentDbCollectionDataset, bool) {
	return nil, false
}

// AsCustomDataset is the Dataset implementation for RelationalTableDataset.
func (rtd RelationalTableDataset) AsCustomDataset() (*CustomDataset, bool) {
	return nil, false
}

// AsCassandraTableDataset is the Dataset implementation for RelationalTableDataset.
func (rtd RelationalTableDataset) AsCassandraTableDataset() (*CassandraTableDataset, bool) {
	return nil, false
}

// AsAzureSQLDWTableDataset is the Dataset implementation for RelationalTableDataset.
func (rtd RelationalTableDataset) AsAzureSQLDWTableDataset() (*AzureSQLDWTableDataset, bool) {
	return nil, false
}

// AsAzureSQLTableDataset is the Dataset implementation for RelationalTableDataset.
func (rtd RelationalTableDataset) AsAzureSQLTableDataset() (*AzureSQLTableDataset, bool) {
	return nil, false
}

// AsAzureTableDataset is the Dataset implementation for RelationalTableDataset.
func (rtd RelationalTableDataset) AsAzureTableDataset() (*AzureTableDataset, bool) {
	return nil, false
}

// AsAzureBlobDataset is the Dataset implementation for RelationalTableDataset.
func (rtd RelationalTableDataset) AsAzureBlobDataset() (*AzureBlobDataset, bool) {
	return nil, false
}

// AsAmazonS3Dataset is the Dataset implementation for RelationalTableDataset.
func (rtd RelationalTableDataset) AsAmazonS3Dataset() (*AmazonS3Dataset, bool) {
	return nil, false
}

// RelationalTableDatasetTypeProperties is relational table dataset properties.
type RelationalTableDatasetTypeProperties struct {
	TableName *map[string]interface{} `json:"tableName,omitempty"`
}

// Resource is azure Data Factory top-level resource.
type Resource struct {
	ID       *string             `json:"id,omitempty"`
	Name     *string             `json:"name,omitempty"`
	Type     *string             `json:"type,omitempty"`
	Location *string             `json:"location,omitempty"`
	Tags     *map[string]*string `json:"tags,omitempty"`
}

// SalesforceLinkedService is linked service for Salesforce.
type SalesforceLinkedService struct {
	ConnectVia                             *IntegrationRuntimeReference `json:"connectVia,omitempty"`
	Description                            *string                      `json:"description,omitempty"`
	Type                                   TypeLinkedService            `json:"type,omitempty"`
	*SalesforceLinkedServiceTypeProperties `json:"typeProperties,omitempty"`
}

// MarshalJSON is the custom marshaler for SalesforceLinkedService.
func (sls SalesforceLinkedService) MarshalJSON() ([]byte, error) {
	sls.Type = TypeSalesforce
	type Alias SalesforceLinkedService
	return json.Marshal(&struct {
		Alias
	}{
		Alias: (Alias)(sls),
	})
}

// AsAzureDataLakeAnalyticsLinkedService is the LinkedService implementation for SalesforceLinkedService.
func (sls SalesforceLinkedService) AsAzureDataLakeAnalyticsLinkedService() (*AzureDataLakeAnalyticsLinkedService, bool) {
	return nil, false
}

// AsHDInsightOnDemandLinkedService is the LinkedService implementation for SalesforceLinkedService.
func (sls SalesforceLinkedService) AsHDInsightOnDemandLinkedService() (*HDInsightOnDemandLinkedService, bool) {
	return nil, false
}

// AsSapHanaLinkedService is the LinkedService implementation for SalesforceLinkedService.
func (sls SalesforceLinkedService) AsSapHanaLinkedService() (*SapHanaLinkedService, bool) {
	return nil, false
}

// AsSapBWLinkedService is the LinkedService implementation for SalesforceLinkedService.
func (sls SalesforceLinkedService) AsSapBWLinkedService() (*SapBWLinkedService, bool) {
	return nil, false
}

// AsSftpServerLinkedService is the LinkedService implementation for SalesforceLinkedService.
func (sls SalesforceLinkedService) AsSftpServerLinkedService() (*SftpServerLinkedService, bool) {
	return nil, false
}

// AsFtpServerLinkedService is the LinkedService implementation for SalesforceLinkedService.
func (sls SalesforceLinkedService) AsFtpServerLinkedService() (*FtpServerLinkedService, bool) {
	return nil, false
}

// AsHTTPLinkedService is the LinkedService implementation for SalesforceLinkedService.
func (sls SalesforceLinkedService) AsHTTPLinkedService() (*HTTPLinkedService, bool) {
	return nil, false
}

// AsAzureSearchLinkedService is the LinkedService implementation for SalesforceLinkedService.
func (sls SalesforceLinkedService) AsAzureSearchLinkedService() (*AzureSearchLinkedService, bool) {
	return nil, false
}

// AsCustomDataSourceLinkedService is the LinkedService implementation for SalesforceLinkedService.
func (sls SalesforceLinkedService) AsCustomDataSourceLinkedService() (*CustomDataSourceLinkedService, bool) {
	return nil, false
}

// AsAmazonRedshiftLinkedService is the LinkedService implementation for SalesforceLinkedService.
func (sls SalesforceLinkedService) AsAmazonRedshiftLinkedService() (*AmazonRedshiftLinkedService, bool) {
	return nil, false
}

// AsAmazonS3LinkedService is the LinkedService implementation for SalesforceLinkedService.
func (sls SalesforceLinkedService) AsAmazonS3LinkedService() (*AmazonS3LinkedService, bool) {
	return nil, false
}

// AsSalesforceLinkedService is the LinkedService implementation for SalesforceLinkedService.
func (sls SalesforceLinkedService) AsSalesforceLinkedService() (*SalesforceLinkedService, bool) {
	return &sls, true
}

// AsAzureDataLakeStoreLinkedService is the LinkedService implementation for SalesforceLinkedService.
func (sls SalesforceLinkedService) AsAzureDataLakeStoreLinkedService() (*AzureDataLakeStoreLinkedService, bool) {
	return nil, false
}

// AsMongoDbLinkedService is the LinkedService implementation for SalesforceLinkedService.
func (sls SalesforceLinkedService) AsMongoDbLinkedService() (*MongoDbLinkedService, bool) {
	return nil, false
}

// AsCassandraLinkedService is the LinkedService implementation for SalesforceLinkedService.
func (sls SalesforceLinkedService) AsCassandraLinkedService() (*CassandraLinkedService, bool) {
	return nil, false
}

// AsWebLinkedService is the LinkedService implementation for SalesforceLinkedService.
func (sls SalesforceLinkedService) AsWebLinkedService() (*WebLinkedService, bool) {
	return nil, false
}

// AsODataLinkedService is the LinkedService implementation for SalesforceLinkedService.
func (sls SalesforceLinkedService) AsODataLinkedService() (*ODataLinkedService, bool) {
	return nil, false
}

// AsHdfsLinkedService is the LinkedService implementation for SalesforceLinkedService.
func (sls SalesforceLinkedService) AsHdfsLinkedService() (*HdfsLinkedService, bool) {
	return nil, false
}

// AsOdbcLinkedService is the LinkedService implementation for SalesforceLinkedService.
func (sls SalesforceLinkedService) AsOdbcLinkedService() (*OdbcLinkedService, bool) {
	return nil, false
}

// AsAzureMLLinkedService is the LinkedService implementation for SalesforceLinkedService.
func (sls SalesforceLinkedService) AsAzureMLLinkedService() (*AzureMLLinkedService, bool) {
	return nil, false
}

// AsTeradataLinkedService is the LinkedService implementation for SalesforceLinkedService.
func (sls SalesforceLinkedService) AsTeradataLinkedService() (*TeradataLinkedService, bool) {
	return nil, false
}

// AsDb2LinkedService is the LinkedService implementation for SalesforceLinkedService.
func (sls SalesforceLinkedService) AsDb2LinkedService() (*Db2LinkedService, bool) {
	return nil, false
}

// AsSybaseLinkedService is the LinkedService implementation for SalesforceLinkedService.
func (sls SalesforceLinkedService) AsSybaseLinkedService() (*SybaseLinkedService, bool) {
	return nil, false
}

// AsPostgreSQLLinkedService is the LinkedService implementation for SalesforceLinkedService.
func (sls SalesforceLinkedService) AsPostgreSQLLinkedService() (*PostgreSQLLinkedService, bool) {
	return nil, false
}

// AsMySQLLinkedService is the LinkedService implementation for SalesforceLinkedService.
func (sls SalesforceLinkedService) AsMySQLLinkedService() (*MySQLLinkedService, bool) {
	return nil, false
}

// AsOracleLinkedService is the LinkedService implementation for SalesforceLinkedService.
func (sls SalesforceLinkedService) AsOracleLinkedService() (*OracleLinkedService, bool) {
	return nil, false
}

// AsFileServerLinkedService is the LinkedService implementation for SalesforceLinkedService.
func (sls SalesforceLinkedService) AsFileServerLinkedService() (*FileServerLinkedService, bool) {
	return nil, false
}

// AsHDInsightLinkedService is the LinkedService implementation for SalesforceLinkedService.
func (sls SalesforceLinkedService) AsHDInsightLinkedService() (*HDInsightLinkedService, bool) {
	return nil, false
}

// AsDynamicsLinkedService is the LinkedService implementation for SalesforceLinkedService.
func (sls SalesforceLinkedService) AsDynamicsLinkedService() (*DynamicsLinkedService, bool) {
	return nil, false
}

// AsCosmosDbLinkedService is the LinkedService implementation for SalesforceLinkedService.
func (sls SalesforceLinkedService) AsCosmosDbLinkedService() (*CosmosDbLinkedService, bool) {
	return nil, false
}

// AsAzureKeyVaultLinkedService is the LinkedService implementation for SalesforceLinkedService.
func (sls SalesforceLinkedService) AsAzureKeyVaultLinkedService() (*AzureKeyVaultLinkedService, bool) {
	return nil, false
}

// AsAzureBatchLinkedService is the LinkedService implementation for SalesforceLinkedService.
func (sls SalesforceLinkedService) AsAzureBatchLinkedService() (*AzureBatchLinkedService, bool) {
	return nil, false
}

// AsAzureSQLDatabaseLinkedService is the LinkedService implementation for SalesforceLinkedService.
func (sls SalesforceLinkedService) AsAzureSQLDatabaseLinkedService() (*AzureSQLDatabaseLinkedService, bool) {
	return nil, false
}

// AsSQLServerLinkedService is the LinkedService implementation for SalesforceLinkedService.
func (sls SalesforceLinkedService) AsSQLServerLinkedService() (*SQLServerLinkedService, bool) {
	return nil, false
}

// AsAzureSQLDWLinkedService is the LinkedService implementation for SalesforceLinkedService.
func (sls SalesforceLinkedService) AsAzureSQLDWLinkedService() (*AzureSQLDWLinkedService, bool) {
	return nil, false
}

// AsAzureStorageLinkedService is the LinkedService implementation for SalesforceLinkedService.
func (sls SalesforceLinkedService) AsAzureStorageLinkedService() (*AzureStorageLinkedService, bool) {
	return nil, false
}

// SalesforceLinkedServiceTypeProperties is salesforce linked service properties.
type SalesforceLinkedServiceTypeProperties struct {
	EnvironmentURL      *map[string]interface{} `json:"environmentUrl,omitempty"`
	Username            *map[string]interface{} `json:"username,omitempty"`
	Password            *SecureString           `json:"password,omitempty"`
	SecurityToken       *SecureString           `json:"securityToken,omitempty"`
	EncryptedCredential *map[string]interface{} `json:"encryptedCredential,omitempty"`
}

// SapBWLinkedService is SAP Business Warehouse Linked Service.
type SapBWLinkedService struct {
	ConnectVia                        *IntegrationRuntimeReference `json:"connectVia,omitempty"`
	Description                       *string                      `json:"description,omitempty"`
	Type                              TypeLinkedService            `json:"type,omitempty"`
	*SapBWLinkedServiceTypeProperties `json:"typeProperties,omitempty"`
}

// MarshalJSON is the custom marshaler for SapBWLinkedService.
func (sbls SapBWLinkedService) MarshalJSON() ([]byte, error) {
	sbls.Type = TypeSapBW
	type Alias SapBWLinkedService
	return json.Marshal(&struct {
		Alias
	}{
		Alias: (Alias)(sbls),
	})
}

// AsAzureDataLakeAnalyticsLinkedService is the LinkedService implementation for SapBWLinkedService.
func (sbls SapBWLinkedService) AsAzureDataLakeAnalyticsLinkedService() (*AzureDataLakeAnalyticsLinkedService, bool) {
	return nil, false
}

// AsHDInsightOnDemandLinkedService is the LinkedService implementation for SapBWLinkedService.
func (sbls SapBWLinkedService) AsHDInsightOnDemandLinkedService() (*HDInsightOnDemandLinkedService, bool) {
	return nil, false
}

// AsSapHanaLinkedService is the LinkedService implementation for SapBWLinkedService.
func (sbls SapBWLinkedService) AsSapHanaLinkedService() (*SapHanaLinkedService, bool) {
	return nil, false
}

// AsSapBWLinkedService is the LinkedService implementation for SapBWLinkedService.
func (sbls SapBWLinkedService) AsSapBWLinkedService() (*SapBWLinkedService, bool) {
	return &sbls, true
}

// AsSftpServerLinkedService is the LinkedService implementation for SapBWLinkedService.
func (sbls SapBWLinkedService) AsSftpServerLinkedService() (*SftpServerLinkedService, bool) {
	return nil, false
}

// AsFtpServerLinkedService is the LinkedService implementation for SapBWLinkedService.
func (sbls SapBWLinkedService) AsFtpServerLinkedService() (*FtpServerLinkedService, bool) {
	return nil, false
}

// AsHTTPLinkedService is the LinkedService implementation for SapBWLinkedService.
func (sbls SapBWLinkedService) AsHTTPLinkedService() (*HTTPLinkedService, bool) {
	return nil, false
}

// AsAzureSearchLinkedService is the LinkedService implementation for SapBWLinkedService.
func (sbls SapBWLinkedService) AsAzureSearchLinkedService() (*AzureSearchLinkedService, bool) {
	return nil, false
}

// AsCustomDataSourceLinkedService is the LinkedService implementation for SapBWLinkedService.
func (sbls SapBWLinkedService) AsCustomDataSourceLinkedService() (*CustomDataSourceLinkedService, bool) {
	return nil, false
}

// AsAmazonRedshiftLinkedService is the LinkedService implementation for SapBWLinkedService.
func (sbls SapBWLinkedService) AsAmazonRedshiftLinkedService() (*AmazonRedshiftLinkedService, bool) {
	return nil, false
}

// AsAmazonS3LinkedService is the LinkedService implementation for SapBWLinkedService.
func (sbls SapBWLinkedService) AsAmazonS3LinkedService() (*AmazonS3LinkedService, bool) {
	return nil, false
}

// AsSalesforceLinkedService is the LinkedService implementation for SapBWLinkedService.
func (sbls SapBWLinkedService) AsSalesforceLinkedService() (*SalesforceLinkedService, bool) {
	return nil, false
}

// AsAzureDataLakeStoreLinkedService is the LinkedService implementation for SapBWLinkedService.
func (sbls SapBWLinkedService) AsAzureDataLakeStoreLinkedService() (*AzureDataLakeStoreLinkedService, bool) {
	return nil, false
}

// AsMongoDbLinkedService is the LinkedService implementation for SapBWLinkedService.
func (sbls SapBWLinkedService) AsMongoDbLinkedService() (*MongoDbLinkedService, bool) {
	return nil, false
}

// AsCassandraLinkedService is the LinkedService implementation for SapBWLinkedService.
func (sbls SapBWLinkedService) AsCassandraLinkedService() (*CassandraLinkedService, bool) {
	return nil, false
}

// AsWebLinkedService is the LinkedService implementation for SapBWLinkedService.
func (sbls SapBWLinkedService) AsWebLinkedService() (*WebLinkedService, bool) {
	return nil, false
}

// AsODataLinkedService is the LinkedService implementation for SapBWLinkedService.
func (sbls SapBWLinkedService) AsODataLinkedService() (*ODataLinkedService, bool) {
	return nil, false
}

// AsHdfsLinkedService is the LinkedService implementation for SapBWLinkedService.
func (sbls SapBWLinkedService) AsHdfsLinkedService() (*HdfsLinkedService, bool) {
	return nil, false
}

// AsOdbcLinkedService is the LinkedService implementation for SapBWLinkedService.
func (sbls SapBWLinkedService) AsOdbcLinkedService() (*OdbcLinkedService, bool) {
	return nil, false
}

// AsAzureMLLinkedService is the LinkedService implementation for SapBWLinkedService.
func (sbls SapBWLinkedService) AsAzureMLLinkedService() (*AzureMLLinkedService, bool) {
	return nil, false
}

// AsTeradataLinkedService is the LinkedService implementation for SapBWLinkedService.
func (sbls SapBWLinkedService) AsTeradataLinkedService() (*TeradataLinkedService, bool) {
	return nil, false
}

// AsDb2LinkedService is the LinkedService implementation for SapBWLinkedService.
func (sbls SapBWLinkedService) AsDb2LinkedService() (*Db2LinkedService, bool) {
	return nil, false
}

// AsSybaseLinkedService is the LinkedService implementation for SapBWLinkedService.
func (sbls SapBWLinkedService) AsSybaseLinkedService() (*SybaseLinkedService, bool) {
	return nil, false
}

// AsPostgreSQLLinkedService is the LinkedService implementation for SapBWLinkedService.
func (sbls SapBWLinkedService) AsPostgreSQLLinkedService() (*PostgreSQLLinkedService, bool) {
	return nil, false
}

// AsMySQLLinkedService is the LinkedService implementation for SapBWLinkedService.
func (sbls SapBWLinkedService) AsMySQLLinkedService() (*MySQLLinkedService, bool) {
	return nil, false
}

// AsOracleLinkedService is the LinkedService implementation for SapBWLinkedService.
func (sbls SapBWLinkedService) AsOracleLinkedService() (*OracleLinkedService, bool) {
	return nil, false
}

// AsFileServerLinkedService is the LinkedService implementation for SapBWLinkedService.
func (sbls SapBWLinkedService) AsFileServerLinkedService() (*FileServerLinkedService, bool) {
	return nil, false
}

// AsHDInsightLinkedService is the LinkedService implementation for SapBWLinkedService.
func (sbls SapBWLinkedService) AsHDInsightLinkedService() (*HDInsightLinkedService, bool) {
	return nil, false
}

// AsDynamicsLinkedService is the LinkedService implementation for SapBWLinkedService.
func (sbls SapBWLinkedService) AsDynamicsLinkedService() (*DynamicsLinkedService, bool) {
	return nil, false
}

// AsCosmosDbLinkedService is the LinkedService implementation for SapBWLinkedService.
func (sbls SapBWLinkedService) AsCosmosDbLinkedService() (*CosmosDbLinkedService, bool) {
	return nil, false
}

// AsAzureKeyVaultLinkedService is the LinkedService implementation for SapBWLinkedService.
func (sbls SapBWLinkedService) AsAzureKeyVaultLinkedService() (*AzureKeyVaultLinkedService, bool) {
	return nil, false
}

// AsAzureBatchLinkedService is the LinkedService implementation for SapBWLinkedService.
func (sbls SapBWLinkedService) AsAzureBatchLinkedService() (*AzureBatchLinkedService, bool) {
	return nil, false
}

// AsAzureSQLDatabaseLinkedService is the LinkedService implementation for SapBWLinkedService.
func (sbls SapBWLinkedService) AsAzureSQLDatabaseLinkedService() (*AzureSQLDatabaseLinkedService, bool) {
	return nil, false
}

// AsSQLServerLinkedService is the LinkedService implementation for SapBWLinkedService.
func (sbls SapBWLinkedService) AsSQLServerLinkedService() (*SQLServerLinkedService, bool) {
	return nil, false
}

// AsAzureSQLDWLinkedService is the LinkedService implementation for SapBWLinkedService.
func (sbls SapBWLinkedService) AsAzureSQLDWLinkedService() (*AzureSQLDWLinkedService, bool) {
	return nil, false
}

// AsAzureStorageLinkedService is the LinkedService implementation for SapBWLinkedService.
func (sbls SapBWLinkedService) AsAzureStorageLinkedService() (*AzureStorageLinkedService, bool) {
	return nil, false
}

// SapBWLinkedServiceTypeProperties is properties specific to this linked service type.
type SapBWLinkedServiceTypeProperties struct {
	Server              *map[string]interface{} `json:"server,omitempty"`
	SystemNumber        *map[string]interface{} `json:"systemNumber,omitempty"`
	ClientID            *map[string]interface{} `json:"clientId,omitempty"`
	UserName            *map[string]interface{} `json:"userName,omitempty"`
	Password            *SecureString           `json:"password,omitempty"`
	EncryptedCredential *map[string]interface{} `json:"encryptedCredential,omitempty"`
}

// SapHanaLinkedService is SAP HANA Linked Service.
type SapHanaLinkedService struct {
	ConnectVia                      *IntegrationRuntimeReference `json:"connectVia,omitempty"`
	Description                     *string                      `json:"description,omitempty"`
	Type                            TypeLinkedService            `json:"type,omitempty"`
	*SapHanaLinkedServiceProperties `json:"typeProperties,omitempty"`
}

// MarshalJSON is the custom marshaler for SapHanaLinkedService.
func (shls SapHanaLinkedService) MarshalJSON() ([]byte, error) {
	shls.Type = TypeSapHana
	type Alias SapHanaLinkedService
	return json.Marshal(&struct {
		Alias
	}{
		Alias: (Alias)(shls),
	})
}

// AsAzureDataLakeAnalyticsLinkedService is the LinkedService implementation for SapHanaLinkedService.
func (shls SapHanaLinkedService) AsAzureDataLakeAnalyticsLinkedService() (*AzureDataLakeAnalyticsLinkedService, bool) {
	return nil, false
}

// AsHDInsightOnDemandLinkedService is the LinkedService implementation for SapHanaLinkedService.
func (shls SapHanaLinkedService) AsHDInsightOnDemandLinkedService() (*HDInsightOnDemandLinkedService, bool) {
	return nil, false
}

// AsSapHanaLinkedService is the LinkedService implementation for SapHanaLinkedService.
func (shls SapHanaLinkedService) AsSapHanaLinkedService() (*SapHanaLinkedService, bool) {
	return &shls, true
}

// AsSapBWLinkedService is the LinkedService implementation for SapHanaLinkedService.
func (shls SapHanaLinkedService) AsSapBWLinkedService() (*SapBWLinkedService, bool) {
	return nil, false
}

// AsSftpServerLinkedService is the LinkedService implementation for SapHanaLinkedService.
func (shls SapHanaLinkedService) AsSftpServerLinkedService() (*SftpServerLinkedService, bool) {
	return nil, false
}

// AsFtpServerLinkedService is the LinkedService implementation for SapHanaLinkedService.
func (shls SapHanaLinkedService) AsFtpServerLinkedService() (*FtpServerLinkedService, bool) {
	return nil, false
}

// AsHTTPLinkedService is the LinkedService implementation for SapHanaLinkedService.
func (shls SapHanaLinkedService) AsHTTPLinkedService() (*HTTPLinkedService, bool) {
	return nil, false
}

// AsAzureSearchLinkedService is the LinkedService implementation for SapHanaLinkedService.
func (shls SapHanaLinkedService) AsAzureSearchLinkedService() (*AzureSearchLinkedService, bool) {
	return nil, false
}

// AsCustomDataSourceLinkedService is the LinkedService implementation for SapHanaLinkedService.
func (shls SapHanaLinkedService) AsCustomDataSourceLinkedService() (*CustomDataSourceLinkedService, bool) {
	return nil, false
}

// AsAmazonRedshiftLinkedService is the LinkedService implementation for SapHanaLinkedService.
func (shls SapHanaLinkedService) AsAmazonRedshiftLinkedService() (*AmazonRedshiftLinkedService, bool) {
	return nil, false
}

// AsAmazonS3LinkedService is the LinkedService implementation for SapHanaLinkedService.
func (shls SapHanaLinkedService) AsAmazonS3LinkedService() (*AmazonS3LinkedService, bool) {
	return nil, false
}

// AsSalesforceLinkedService is the LinkedService implementation for SapHanaLinkedService.
func (shls SapHanaLinkedService) AsSalesforceLinkedService() (*SalesforceLinkedService, bool) {
	return nil, false
}

// AsAzureDataLakeStoreLinkedService is the LinkedService implementation for SapHanaLinkedService.
func (shls SapHanaLinkedService) AsAzureDataLakeStoreLinkedService() (*AzureDataLakeStoreLinkedService, bool) {
	return nil, false
}

// AsMongoDbLinkedService is the LinkedService implementation for SapHanaLinkedService.
func (shls SapHanaLinkedService) AsMongoDbLinkedService() (*MongoDbLinkedService, bool) {
	return nil, false
}

// AsCassandraLinkedService is the LinkedService implementation for SapHanaLinkedService.
func (shls SapHanaLinkedService) AsCassandraLinkedService() (*CassandraLinkedService, bool) {
	return nil, false
}

// AsWebLinkedService is the LinkedService implementation for SapHanaLinkedService.
func (shls SapHanaLinkedService) AsWebLinkedService() (*WebLinkedService, bool) {
	return nil, false
}

// AsODataLinkedService is the LinkedService implementation for SapHanaLinkedService.
func (shls SapHanaLinkedService) AsODataLinkedService() (*ODataLinkedService, bool) {
	return nil, false
}

// AsHdfsLinkedService is the LinkedService implementation for SapHanaLinkedService.
func (shls SapHanaLinkedService) AsHdfsLinkedService() (*HdfsLinkedService, bool) {
	return nil, false
}

// AsOdbcLinkedService is the LinkedService implementation for SapHanaLinkedService.
func (shls SapHanaLinkedService) AsOdbcLinkedService() (*OdbcLinkedService, bool) {
	return nil, false
}

// AsAzureMLLinkedService is the LinkedService implementation for SapHanaLinkedService.
func (shls SapHanaLinkedService) AsAzureMLLinkedService() (*AzureMLLinkedService, bool) {
	return nil, false
}

// AsTeradataLinkedService is the LinkedService implementation for SapHanaLinkedService.
func (shls SapHanaLinkedService) AsTeradataLinkedService() (*TeradataLinkedService, bool) {
	return nil, false
}

// AsDb2LinkedService is the LinkedService implementation for SapHanaLinkedService.
func (shls SapHanaLinkedService) AsDb2LinkedService() (*Db2LinkedService, bool) {
	return nil, false
}

// AsSybaseLinkedService is the LinkedService implementation for SapHanaLinkedService.
func (shls SapHanaLinkedService) AsSybaseLinkedService() (*SybaseLinkedService, bool) {
	return nil, false
}

// AsPostgreSQLLinkedService is the LinkedService implementation for SapHanaLinkedService.
func (shls SapHanaLinkedService) AsPostgreSQLLinkedService() (*PostgreSQLLinkedService, bool) {
	return nil, false
}

// AsMySQLLinkedService is the LinkedService implementation for SapHanaLinkedService.
func (shls SapHanaLinkedService) AsMySQLLinkedService() (*MySQLLinkedService, bool) {
	return nil, false
}

// AsOracleLinkedService is the LinkedService implementation for SapHanaLinkedService.
func (shls SapHanaLinkedService) AsOracleLinkedService() (*OracleLinkedService, bool) {
	return nil, false
}

// AsFileServerLinkedService is the LinkedService implementation for SapHanaLinkedService.
func (shls SapHanaLinkedService) AsFileServerLinkedService() (*FileServerLinkedService, bool) {
	return nil, false
}

// AsHDInsightLinkedService is the LinkedService implementation for SapHanaLinkedService.
func (shls SapHanaLinkedService) AsHDInsightLinkedService() (*HDInsightLinkedService, bool) {
	return nil, false
}

// AsDynamicsLinkedService is the LinkedService implementation for SapHanaLinkedService.
func (shls SapHanaLinkedService) AsDynamicsLinkedService() (*DynamicsLinkedService, bool) {
	return nil, false
}

// AsCosmosDbLinkedService is the LinkedService implementation for SapHanaLinkedService.
func (shls SapHanaLinkedService) AsCosmosDbLinkedService() (*CosmosDbLinkedService, bool) {
	return nil, false
}

// AsAzureKeyVaultLinkedService is the LinkedService implementation for SapHanaLinkedService.
func (shls SapHanaLinkedService) AsAzureKeyVaultLinkedService() (*AzureKeyVaultLinkedService, bool) {
	return nil, false
}

// AsAzureBatchLinkedService is the LinkedService implementation for SapHanaLinkedService.
func (shls SapHanaLinkedService) AsAzureBatchLinkedService() (*AzureBatchLinkedService, bool) {
	return nil, false
}

// AsAzureSQLDatabaseLinkedService is the LinkedService implementation for SapHanaLinkedService.
func (shls SapHanaLinkedService) AsAzureSQLDatabaseLinkedService() (*AzureSQLDatabaseLinkedService, bool) {
	return nil, false
}

// AsSQLServerLinkedService is the LinkedService implementation for SapHanaLinkedService.
func (shls SapHanaLinkedService) AsSQLServerLinkedService() (*SQLServerLinkedService, bool) {
	return nil, false
}

// AsAzureSQLDWLinkedService is the LinkedService implementation for SapHanaLinkedService.
func (shls SapHanaLinkedService) AsAzureSQLDWLinkedService() (*AzureSQLDWLinkedService, bool) {
	return nil, false
}

// AsAzureStorageLinkedService is the LinkedService implementation for SapHanaLinkedService.
func (shls SapHanaLinkedService) AsAzureStorageLinkedService() (*AzureStorageLinkedService, bool) {
	return nil, false
}

// SapHanaLinkedServiceProperties is properties specific to this linked service type.
type SapHanaLinkedServiceProperties struct {
	Server              *map[string]interface{}   `json:"server,omitempty"`
	AuthenticationType  SapHanaAuthenticationType `json:"authenticationType,omitempty"`
	UserName            *map[string]interface{}   `json:"userName,omitempty"`
	Password            *SecureString             `json:"password,omitempty"`
	EncryptedCredential *map[string]interface{}   `json:"encryptedCredential,omitempty"`
}

// ScheduleTrigger is trigger that creates pipeline runs periodically, on schedule.
type ScheduleTrigger struct {
	Description                    *string                     `json:"description,omitempty"`
	Pipelines                      *[]TriggerPipelineReference `json:"pipelines,omitempty"`
	RuntimeState                   TriggerRuntimeState         `json:"runtimeState,omitempty"`
	Type                           TypeTrigger                 `json:"type,omitempty"`
	*ScheduleTriggerTypeProperties `json:"typeProperties,omitempty"`
}

// MarshalJSON is the custom marshaler for ScheduleTrigger.
func (st ScheduleTrigger) MarshalJSON() ([]byte, error) {
	st.Type = TypeScheduleTrigger
	type Alias ScheduleTrigger
	return json.Marshal(&struct {
		Alias
	}{
		Alias: (Alias)(st),
	})
}

// AsBlobTrigger is the Trigger implementation for ScheduleTrigger.
func (st ScheduleTrigger) AsBlobTrigger() (*BlobTrigger, bool) {
	return nil, false
}

// AsScheduleTrigger is the Trigger implementation for ScheduleTrigger.
func (st ScheduleTrigger) AsScheduleTrigger() (*ScheduleTrigger, bool) {
	return &st, true
}

// ScheduleTriggerTypeProperties is schedule Trigger properties.
type ScheduleTriggerTypeProperties struct {
	Recurrence *ScheduleTriggerRecurrence `json:"recurrence,omitempty"`
}

// ScheduleTriggerRecurrence is the workflow trigger recurrence.
type ScheduleTriggerRecurrence struct {
	Frequency RecurrenceFrequency `json:"frequency,omitempty"`
	Interval  *int32              `json:"interval,omitempty"`
	StartTime *date.Time          `json:"startTime,omitempty"`
	EndTime   *date.Time          `json:"endTime,omitempty"`
	TimeZone  *string             `json:"timeZone,omitempty"`
	Schedule  *RecurrenceSchedule `json:"schedule,omitempty"`
}

// SecureString is azure Data Factory secure string definition. The string value will be masked with asterisks '*'
// during Get or List API calls.
type SecureString struct {
	Type  *string `json:"type,omitempty"`
	Value *string `json:"value,omitempty"`
}

// SelfHostedIntegrationRuntime is self-hosted integration runtime.
type SelfHostedIntegrationRuntime struct {
	Description *string `json:"description,omitempty"`
	Type        Type    `json:"type,omitempty"`
}

// MarshalJSON is the custom marshaler for SelfHostedIntegrationRuntime.
func (shir SelfHostedIntegrationRuntime) MarshalJSON() ([]byte, error) {
	shir.Type = TypeSelfHosted
	type Alias SelfHostedIntegrationRuntime
	return json.Marshal(&struct {
		Alias
	}{
		Alias: (Alias)(shir),
	})
}

// AsSelfHostedIntegrationRuntime is the IntegrationRuntime implementation for SelfHostedIntegrationRuntime.
func (shir SelfHostedIntegrationRuntime) AsSelfHostedIntegrationRuntime() (*SelfHostedIntegrationRuntime, bool) {
	return &shir, true
}

// AsManagedIntegrationRuntime is the IntegrationRuntime implementation for SelfHostedIntegrationRuntime.
func (shir SelfHostedIntegrationRuntime) AsManagedIntegrationRuntime() (*ManagedIntegrationRuntime, bool) {
	return nil, false
}

// SelfHostedIntegrationRuntimeNode is properties of Self-hosted integration runtime node.
type SelfHostedIntegrationRuntimeNode struct {
	NodeName            *string                                `json:"nodeName,omitempty"`
	MachineName         *string                                `json:"machineName,omitempty"`
	HostServiceURI      *string                                `json:"hostServiceUri,omitempty"`
	Status              SelfHostedIntegrationRuntimeNodeStatus `json:"status,omitempty"`
	Capabilities        *map[string]*string                    `json:"capabilities,omitempty"`
	VersionStatus       *string                                `json:"versionStatus,omitempty"`
	Version             *string                                `json:"version,omitempty"`
	RegisterTime        *date.Time                             `json:"registerTime,omitempty"`
	LastConnectTime     *date.Time                             `json:"lastConnectTime,omitempty"`
	ExpiryTime          *date.Time                             `json:"expiryTime,omitempty"`
	LastStartTime       *date.Time                             `json:"lastStartTime,omitempty"`
	LastStopTime        *date.Time                             `json:"lastStopTime,omitempty"`
	LastUpdateResult    IntegrationRuntimeUpdateResult         `json:"lastUpdateResult,omitempty"`
	LastStartUpdateTime *date.Time                             `json:"lastStartUpdateTime,omitempty"`
	LastEndUpdateTime   *date.Time                             `json:"lastEndUpdateTime,omitempty"`
	IsActiveDispatcher  *bool                                  `json:"isActiveDispatcher,omitempty"`
	ConcurrentJobsLimit *int32                                 `json:"concurrentJobsLimit,omitempty"`
	MaxConcurrentJobs   *int32                                 `json:"maxConcurrentJobs,omitempty"`
}

// SelfHostedIntegrationRuntimeStatus is self-hosted integration runtime status.
type SelfHostedIntegrationRuntimeStatus struct {
	State                                             IntegrationRuntimeState `json:"state,omitempty"`
	Type                                              Type                    `json:"type,omitempty"`
	*SelfHostedIntegrationRuntimeStatusTypeProperties `json:"typeProperties,omitempty"`
}

// MarshalJSON is the custom marshaler for SelfHostedIntegrationRuntimeStatus.
func (shirs SelfHostedIntegrationRuntimeStatus) MarshalJSON() ([]byte, error) {
	shirs.Type = TypeSelfHosted
	type Alias SelfHostedIntegrationRuntimeStatus
	return json.Marshal(&struct {
		Alias
	}{
		Alias: (Alias)(shirs),
	})
}

// AsSelfHostedIntegrationRuntimeStatus is the IntegrationRuntimeStatus implementation for SelfHostedIntegrationRuntimeStatus.
func (shirs SelfHostedIntegrationRuntimeStatus) AsSelfHostedIntegrationRuntimeStatus() (*SelfHostedIntegrationRuntimeStatus, bool) {
	return &shirs, true
}

// AsManagedIntegrationRuntimeStatus is the IntegrationRuntimeStatus implementation for SelfHostedIntegrationRuntimeStatus.
func (shirs SelfHostedIntegrationRuntimeStatus) AsManagedIntegrationRuntimeStatus() (*ManagedIntegrationRuntimeStatus, bool) {
	return nil, false
}

// SelfHostedIntegrationRuntimeStatusTypeProperties is self-hosted integration runtime status type properties.
type SelfHostedIntegrationRuntimeStatusTypeProperties struct {
	CreateTime                *date.Time                                      `json:"createTime,omitempty"`
	TaskQueueID               *string                                         `json:"taskQueueId,omitempty"`
	InternalChannelEncryption IntegrationRuntimeInternalChannelEncryptionMode `json:"internalChannelEncryption,omitempty"`
	Version                   *string                                         `json:"version,omitempty"`
	Nodes                     *[]SelfHostedIntegrationRuntimeNode             `json:"nodes,omitempty"`
	ScheduledUpdateDate       *date.Time                                      `json:"scheduledUpdateDate,omitempty"`
	UpdateDelayOffset         *string                                         `json:"updateDelayOffset,omitempty"`
	LocalTimeZoneOffset       *string                                         `json:"localTimeZoneOffset,omitempty"`
	Capabilities              *map[string]*string                             `json:"capabilities,omitempty"`
	ServiceUrls               *[]string                                       `json:"serviceUrls,omitempty"`
	AutoUpdate                IntegrationRuntimeAutoUpdate                    `json:"autoUpdate,omitempty"`
}

// SftpServerLinkedService is a linked service for an SSH File Transfer Protocol (SFTP) server.
type SftpServerLinkedService struct {
	ConnectVia                             *IntegrationRuntimeReference `json:"connectVia,omitempty"`
	Description                            *string                      `json:"description,omitempty"`
	Type                                   TypeLinkedService            `json:"type,omitempty"`
	*SftpServerLinkedServiceTypeProperties `json:"typeProperties,omitempty"`
}

// MarshalJSON is the custom marshaler for SftpServerLinkedService.
func (ssls SftpServerLinkedService) MarshalJSON() ([]byte, error) {
	ssls.Type = TypeSftp
	type Alias SftpServerLinkedService
	return json.Marshal(&struct {
		Alias
	}{
		Alias: (Alias)(ssls),
	})
}

// AsAzureDataLakeAnalyticsLinkedService is the LinkedService implementation for SftpServerLinkedService.
func (ssls SftpServerLinkedService) AsAzureDataLakeAnalyticsLinkedService() (*AzureDataLakeAnalyticsLinkedService, bool) {
	return nil, false
}

// AsHDInsightOnDemandLinkedService is the LinkedService implementation for SftpServerLinkedService.
func (ssls SftpServerLinkedService) AsHDInsightOnDemandLinkedService() (*HDInsightOnDemandLinkedService, bool) {
	return nil, false
}

// AsSapHanaLinkedService is the LinkedService implementation for SftpServerLinkedService.
func (ssls SftpServerLinkedService) AsSapHanaLinkedService() (*SapHanaLinkedService, bool) {
	return nil, false
}

// AsSapBWLinkedService is the LinkedService implementation for SftpServerLinkedService.
func (ssls SftpServerLinkedService) AsSapBWLinkedService() (*SapBWLinkedService, bool) {
	return nil, false
}

// AsSftpServerLinkedService is the LinkedService implementation for SftpServerLinkedService.
func (ssls SftpServerLinkedService) AsSftpServerLinkedService() (*SftpServerLinkedService, bool) {
	return &ssls, true
}

// AsFtpServerLinkedService is the LinkedService implementation for SftpServerLinkedService.
func (ssls SftpServerLinkedService) AsFtpServerLinkedService() (*FtpServerLinkedService, bool) {
	return nil, false
}

// AsHTTPLinkedService is the LinkedService implementation for SftpServerLinkedService.
func (ssls SftpServerLinkedService) AsHTTPLinkedService() (*HTTPLinkedService, bool) {
	return nil, false
}

// AsAzureSearchLinkedService is the LinkedService implementation for SftpServerLinkedService.
func (ssls SftpServerLinkedService) AsAzureSearchLinkedService() (*AzureSearchLinkedService, bool) {
	return nil, false
}

// AsCustomDataSourceLinkedService is the LinkedService implementation for SftpServerLinkedService.
func (ssls SftpServerLinkedService) AsCustomDataSourceLinkedService() (*CustomDataSourceLinkedService, bool) {
	return nil, false
}

// AsAmazonRedshiftLinkedService is the LinkedService implementation for SftpServerLinkedService.
func (ssls SftpServerLinkedService) AsAmazonRedshiftLinkedService() (*AmazonRedshiftLinkedService, bool) {
	return nil, false
}

// AsAmazonS3LinkedService is the LinkedService implementation for SftpServerLinkedService.
func (ssls SftpServerLinkedService) AsAmazonS3LinkedService() (*AmazonS3LinkedService, bool) {
	return nil, false
}

// AsSalesforceLinkedService is the LinkedService implementation for SftpServerLinkedService.
func (ssls SftpServerLinkedService) AsSalesforceLinkedService() (*SalesforceLinkedService, bool) {
	return nil, false
}

// AsAzureDataLakeStoreLinkedService is the LinkedService implementation for SftpServerLinkedService.
func (ssls SftpServerLinkedService) AsAzureDataLakeStoreLinkedService() (*AzureDataLakeStoreLinkedService, bool) {
	return nil, false
}

// AsMongoDbLinkedService is the LinkedService implementation for SftpServerLinkedService.
func (ssls SftpServerLinkedService) AsMongoDbLinkedService() (*MongoDbLinkedService, bool) {
	return nil, false
}

// AsCassandraLinkedService is the LinkedService implementation for SftpServerLinkedService.
func (ssls SftpServerLinkedService) AsCassandraLinkedService() (*CassandraLinkedService, bool) {
	return nil, false
}

// AsWebLinkedService is the LinkedService implementation for SftpServerLinkedService.
func (ssls SftpServerLinkedService) AsWebLinkedService() (*WebLinkedService, bool) {
	return nil, false
}

// AsODataLinkedService is the LinkedService implementation for SftpServerLinkedService.
func (ssls SftpServerLinkedService) AsODataLinkedService() (*ODataLinkedService, bool) {
	return nil, false
}

// AsHdfsLinkedService is the LinkedService implementation for SftpServerLinkedService.
func (ssls SftpServerLinkedService) AsHdfsLinkedService() (*HdfsLinkedService, bool) {
	return nil, false
}

// AsOdbcLinkedService is the LinkedService implementation for SftpServerLinkedService.
func (ssls SftpServerLinkedService) AsOdbcLinkedService() (*OdbcLinkedService, bool) {
	return nil, false
}

// AsAzureMLLinkedService is the LinkedService implementation for SftpServerLinkedService.
func (ssls SftpServerLinkedService) AsAzureMLLinkedService() (*AzureMLLinkedService, bool) {
	return nil, false
}

// AsTeradataLinkedService is the LinkedService implementation for SftpServerLinkedService.
func (ssls SftpServerLinkedService) AsTeradataLinkedService() (*TeradataLinkedService, bool) {
	return nil, false
}

// AsDb2LinkedService is the LinkedService implementation for SftpServerLinkedService.
func (ssls SftpServerLinkedService) AsDb2LinkedService() (*Db2LinkedService, bool) {
	return nil, false
}

// AsSybaseLinkedService is the LinkedService implementation for SftpServerLinkedService.
func (ssls SftpServerLinkedService) AsSybaseLinkedService() (*SybaseLinkedService, bool) {
	return nil, false
}

// AsPostgreSQLLinkedService is the LinkedService implementation for SftpServerLinkedService.
func (ssls SftpServerLinkedService) AsPostgreSQLLinkedService() (*PostgreSQLLinkedService, bool) {
	return nil, false
}

// AsMySQLLinkedService is the LinkedService implementation for SftpServerLinkedService.
func (ssls SftpServerLinkedService) AsMySQLLinkedService() (*MySQLLinkedService, bool) {
	return nil, false
}

// AsOracleLinkedService is the LinkedService implementation for SftpServerLinkedService.
func (ssls SftpServerLinkedService) AsOracleLinkedService() (*OracleLinkedService, bool) {
	return nil, false
}

// AsFileServerLinkedService is the LinkedService implementation for SftpServerLinkedService.
func (ssls SftpServerLinkedService) AsFileServerLinkedService() (*FileServerLinkedService, bool) {
	return nil, false
}

// AsHDInsightLinkedService is the LinkedService implementation for SftpServerLinkedService.
func (ssls SftpServerLinkedService) AsHDInsightLinkedService() (*HDInsightLinkedService, bool) {
	return nil, false
}

// AsDynamicsLinkedService is the LinkedService implementation for SftpServerLinkedService.
func (ssls SftpServerLinkedService) AsDynamicsLinkedService() (*DynamicsLinkedService, bool) {
	return nil, false
}

// AsCosmosDbLinkedService is the LinkedService implementation for SftpServerLinkedService.
func (ssls SftpServerLinkedService) AsCosmosDbLinkedService() (*CosmosDbLinkedService, bool) {
	return nil, false
}

// AsAzureKeyVaultLinkedService is the LinkedService implementation for SftpServerLinkedService.
func (ssls SftpServerLinkedService) AsAzureKeyVaultLinkedService() (*AzureKeyVaultLinkedService, bool) {
	return nil, false
}

// AsAzureBatchLinkedService is the LinkedService implementation for SftpServerLinkedService.
func (ssls SftpServerLinkedService) AsAzureBatchLinkedService() (*AzureBatchLinkedService, bool) {
	return nil, false
}

// AsAzureSQLDatabaseLinkedService is the LinkedService implementation for SftpServerLinkedService.
func (ssls SftpServerLinkedService) AsAzureSQLDatabaseLinkedService() (*AzureSQLDatabaseLinkedService, bool) {
	return nil, false
}

// AsSQLServerLinkedService is the LinkedService implementation for SftpServerLinkedService.
func (ssls SftpServerLinkedService) AsSQLServerLinkedService() (*SQLServerLinkedService, bool) {
	return nil, false
}

// AsAzureSQLDWLinkedService is the LinkedService implementation for SftpServerLinkedService.
func (ssls SftpServerLinkedService) AsAzureSQLDWLinkedService() (*AzureSQLDWLinkedService, bool) {
	return nil, false
}

// AsAzureStorageLinkedService is the LinkedService implementation for SftpServerLinkedService.
func (ssls SftpServerLinkedService) AsAzureStorageLinkedService() (*AzureStorageLinkedService, bool) {
	return nil, false
}

// SftpServerLinkedServiceTypeProperties is properties specific to this linked service type.
type SftpServerLinkedServiceTypeProperties struct {
	Host                  *map[string]interface{} `json:"host,omitempty"`
	Port                  *map[string]interface{} `json:"port,omitempty"`
	AuthenticationType    SftpAuthenticationType  `json:"authenticationType,omitempty"`
	UserName              *map[string]interface{} `json:"userName,omitempty"`
	Password              *SecureString           `json:"password,omitempty"`
	EncryptedCredential   *map[string]interface{} `json:"encryptedCredential,omitempty"`
	PrivateKeyPath        *map[string]interface{} `json:"privateKeyPath,omitempty"`
	PrivateKeyContent     *SecureString           `json:"privateKeyContent,omitempty"`
	PassPhrase            *SecureString           `json:"passPhrase,omitempty"`
	SkipHostKeyValidation *map[string]interface{} `json:"skipHostKeyValidation,omitempty"`
	HostKeyFingerprint    *map[string]interface{} `json:"hostKeyFingerprint,omitempty"`
}

// SQLDWSink is a copy activity SQL Data Warehouse sink.
type SQLDWSink struct {
	WriteBatchSize    *map[string]interface{} `json:"writeBatchSize,omitempty"`
	WriteBatchTimeout *map[string]interface{} `json:"writeBatchTimeout,omitempty"`
	SinkRetryCount    *map[string]interface{} `json:"sinkRetryCount,omitempty"`
	SinkRetryWait     *map[string]interface{} `json:"sinkRetryWait,omitempty"`
	Type              TypeCopySink            `json:"type,omitempty"`
	PreCopyScript     *map[string]interface{} `json:"preCopyScript,omitempty"`
	AllowPolyBase     *map[string]interface{} `json:"allowPolyBase,omitempty"`
	PolyBaseSettings  *PolybaseSettings       `json:"polyBaseSettings,omitempty"`
}

// MarshalJSON is the custom marshaler for SQLDWSink.
func (sds SQLDWSink) MarshalJSON() ([]byte, error) {
	sds.Type = TypeSQLDWSink
	type Alias SQLDWSink
	return json.Marshal(&struct {
		Alias
	}{
		Alias: (Alias)(sds),
	})
}

// AsOdbcSink is the CopySink implementation for SQLDWSink.
func (sds SQLDWSink) AsOdbcSink() (*OdbcSink, bool) {
	return nil, false
}

// AsAzureSearchIndexSink is the CopySink implementation for SQLDWSink.
func (sds SQLDWSink) AsAzureSearchIndexSink() (*AzureSearchIndexSink, bool) {
	return nil, false
}

// AsAzureDataLakeStoreSink is the CopySink implementation for SQLDWSink.
func (sds SQLDWSink) AsAzureDataLakeStoreSink() (*AzureDataLakeStoreSink, bool) {
	return nil, false
}

// AsOracleSink is the CopySink implementation for SQLDWSink.
func (sds SQLDWSink) AsOracleSink() (*OracleSink, bool) {
	return nil, false
}

// AsSQLDWSink is the CopySink implementation for SQLDWSink.
func (sds SQLDWSink) AsSQLDWSink() (*SQLDWSink, bool) {
	return &sds, true
}

// AsSQLSink is the CopySink implementation for SQLDWSink.
func (sds SQLDWSink) AsSQLSink() (*SQLSink, bool) {
	return nil, false
}

// AsDocumentDbCollectionSink is the CopySink implementation for SQLDWSink.
func (sds SQLDWSink) AsDocumentDbCollectionSink() (*DocumentDbCollectionSink, bool) {
	return nil, false
}

// AsFileSystemSink is the CopySink implementation for SQLDWSink.
func (sds SQLDWSink) AsFileSystemSink() (*FileSystemSink, bool) {
	return nil, false
}

// AsBlobSink is the CopySink implementation for SQLDWSink.
func (sds SQLDWSink) AsBlobSink() (*BlobSink, bool) {
	return nil, false
}

// AsAzureTableSink is the CopySink implementation for SQLDWSink.
func (sds SQLDWSink) AsAzureTableSink() (*AzureTableSink, bool) {
	return nil, false
}

// AsAzureQueueSink is the CopySink implementation for SQLDWSink.
func (sds SQLDWSink) AsAzureQueueSink() (*AzureQueueSink, bool) {
	return nil, false
}

// SQLDWSource is a copy activity SQL Data Warehouse source.
type SQLDWSource struct {
	SourceRetryCount             *map[string]interface{} `json:"sourceRetryCount,omitempty"`
	SourceRetryWait              *map[string]interface{} `json:"sourceRetryWait,omitempty"`
	Type                         TypeCopySource          `json:"type,omitempty"`
	SQLReaderQuery               *map[string]interface{} `json:"sqlReaderQuery,omitempty"`
	SQLReaderStoredProcedureName *map[string]interface{} `json:"sqlReaderStoredProcedureName,omitempty"`
	StoredProcedureParameters    *map[string]interface{} `json:"storedProcedureParameters,omitempty"`
}

// MarshalJSON is the custom marshaler for SQLDWSource.
func (sds SQLDWSource) MarshalJSON() ([]byte, error) {
	sds.Type = TypeSQLDWSource
	type Alias SQLDWSource
	return json.Marshal(&struct {
		Alias
	}{
		Alias: (Alias)(sds),
	})
}

// AsAmazonRedshiftSource is the CopySource implementation for SQLDWSource.
func (sds SQLDWSource) AsAmazonRedshiftSource() (*AmazonRedshiftSource, bool) {
	return nil, false
}

// AsHTTPSource is the CopySource implementation for SQLDWSource.
func (sds SQLDWSource) AsHTTPSource() (*HTTPSource, bool) {
	return nil, false
}

// AsAzureDataLakeStoreSource is the CopySource implementation for SQLDWSource.
func (sds SQLDWSource) AsAzureDataLakeStoreSource() (*AzureDataLakeStoreSource, bool) {
	return nil, false
}

// AsMongoDbSource is the CopySource implementation for SQLDWSource.
func (sds SQLDWSource) AsMongoDbSource() (*MongoDbSource, bool) {
	return nil, false
}

// AsCassandraSource is the CopySource implementation for SQLDWSource.
func (sds SQLDWSource) AsCassandraSource() (*CassandraSource, bool) {
	return nil, false
}

// AsWebSource is the CopySource implementation for SQLDWSource.
func (sds SQLDWSource) AsWebSource() (*WebSource, bool) {
	return nil, false
}

// AsOracleSource is the CopySource implementation for SQLDWSource.
func (sds SQLDWSource) AsOracleSource() (*OracleSource, bool) {
	return nil, false
}

// AsHdfsSource is the CopySource implementation for SQLDWSource.
func (sds SQLDWSource) AsHdfsSource() (*HdfsSource, bool) {
	return nil, false
}

// AsFileSystemSource is the CopySource implementation for SQLDWSource.
func (sds SQLDWSource) AsFileSystemSource() (*FileSystemSource, bool) {
	return nil, false
}

// AsSQLDWSource is the CopySource implementation for SQLDWSource.
func (sds SQLDWSource) AsSQLDWSource() (*SQLDWSource, bool) {
	return &sds, true
}

// AsSQLSource is the CopySource implementation for SQLDWSource.
func (sds SQLDWSource) AsSQLSource() (*SQLSource, bool) {
	return nil, false
}

// AsRelationalSource is the CopySource implementation for SQLDWSource.
func (sds SQLDWSource) AsRelationalSource() (*RelationalSource, bool) {
	return nil, false
}

// AsDynamicsSource is the CopySource implementation for SQLDWSource.
func (sds SQLDWSource) AsDynamicsSource() (*DynamicsSource, bool) {
	return nil, false
}

// AsDocumentDbCollectionSource is the CopySource implementation for SQLDWSource.
func (sds SQLDWSource) AsDocumentDbCollectionSource() (*DocumentDbCollectionSource, bool) {
	return nil, false
}

// AsBlobSource is the CopySource implementation for SQLDWSource.
func (sds SQLDWSource) AsBlobSource() (*BlobSource, bool) {
	return nil, false
}

// AsAzureTableSource is the CopySource implementation for SQLDWSource.
func (sds SQLDWSource) AsAzureTableSource() (*AzureTableSource, bool) {
	return nil, false
}

// SQLServerLinkedService is SQL Server linked service.
type SQLServerLinkedService struct {
	ConnectVia                            *IntegrationRuntimeReference `json:"connectVia,omitempty"`
	Description                           *string                      `json:"description,omitempty"`
	Type                                  TypeLinkedService            `json:"type,omitempty"`
	*SQLServerLinkedServiceTypeProperties `json:"typeProperties,omitempty"`
}

// MarshalJSON is the custom marshaler for SQLServerLinkedService.
func (ssls SQLServerLinkedService) MarshalJSON() ([]byte, error) {
	ssls.Type = TypeSQLServer
	type Alias SQLServerLinkedService
	return json.Marshal(&struct {
		Alias
	}{
		Alias: (Alias)(ssls),
	})
}

// AsAzureDataLakeAnalyticsLinkedService is the LinkedService implementation for SQLServerLinkedService.
func (ssls SQLServerLinkedService) AsAzureDataLakeAnalyticsLinkedService() (*AzureDataLakeAnalyticsLinkedService, bool) {
	return nil, false
}

// AsHDInsightOnDemandLinkedService is the LinkedService implementation for SQLServerLinkedService.
func (ssls SQLServerLinkedService) AsHDInsightOnDemandLinkedService() (*HDInsightOnDemandLinkedService, bool) {
	return nil, false
}

// AsSapHanaLinkedService is the LinkedService implementation for SQLServerLinkedService.
func (ssls SQLServerLinkedService) AsSapHanaLinkedService() (*SapHanaLinkedService, bool) {
	return nil, false
}

// AsSapBWLinkedService is the LinkedService implementation for SQLServerLinkedService.
func (ssls SQLServerLinkedService) AsSapBWLinkedService() (*SapBWLinkedService, bool) {
	return nil, false
}

// AsSftpServerLinkedService is the LinkedService implementation for SQLServerLinkedService.
func (ssls SQLServerLinkedService) AsSftpServerLinkedService() (*SftpServerLinkedService, bool) {
	return nil, false
}

// AsFtpServerLinkedService is the LinkedService implementation for SQLServerLinkedService.
func (ssls SQLServerLinkedService) AsFtpServerLinkedService() (*FtpServerLinkedService, bool) {
	return nil, false
}

// AsHTTPLinkedService is the LinkedService implementation for SQLServerLinkedService.
func (ssls SQLServerLinkedService) AsHTTPLinkedService() (*HTTPLinkedService, bool) {
	return nil, false
}

// AsAzureSearchLinkedService is the LinkedService implementation for SQLServerLinkedService.
func (ssls SQLServerLinkedService) AsAzureSearchLinkedService() (*AzureSearchLinkedService, bool) {
	return nil, false
}

// AsCustomDataSourceLinkedService is the LinkedService implementation for SQLServerLinkedService.
func (ssls SQLServerLinkedService) AsCustomDataSourceLinkedService() (*CustomDataSourceLinkedService, bool) {
	return nil, false
}

// AsAmazonRedshiftLinkedService is the LinkedService implementation for SQLServerLinkedService.
func (ssls SQLServerLinkedService) AsAmazonRedshiftLinkedService() (*AmazonRedshiftLinkedService, bool) {
	return nil, false
}

// AsAmazonS3LinkedService is the LinkedService implementation for SQLServerLinkedService.
func (ssls SQLServerLinkedService) AsAmazonS3LinkedService() (*AmazonS3LinkedService, bool) {
	return nil, false
}

// AsSalesforceLinkedService is the LinkedService implementation for SQLServerLinkedService.
func (ssls SQLServerLinkedService) AsSalesforceLinkedService() (*SalesforceLinkedService, bool) {
	return nil, false
}

// AsAzureDataLakeStoreLinkedService is the LinkedService implementation for SQLServerLinkedService.
func (ssls SQLServerLinkedService) AsAzureDataLakeStoreLinkedService() (*AzureDataLakeStoreLinkedService, bool) {
	return nil, false
}

// AsMongoDbLinkedService is the LinkedService implementation for SQLServerLinkedService.
func (ssls SQLServerLinkedService) AsMongoDbLinkedService() (*MongoDbLinkedService, bool) {
	return nil, false
}

// AsCassandraLinkedService is the LinkedService implementation for SQLServerLinkedService.
func (ssls SQLServerLinkedService) AsCassandraLinkedService() (*CassandraLinkedService, bool) {
	return nil, false
}

// AsWebLinkedService is the LinkedService implementation for SQLServerLinkedService.
func (ssls SQLServerLinkedService) AsWebLinkedService() (*WebLinkedService, bool) {
	return nil, false
}

// AsODataLinkedService is the LinkedService implementation for SQLServerLinkedService.
func (ssls SQLServerLinkedService) AsODataLinkedService() (*ODataLinkedService, bool) {
	return nil, false
}

// AsHdfsLinkedService is the LinkedService implementation for SQLServerLinkedService.
func (ssls SQLServerLinkedService) AsHdfsLinkedService() (*HdfsLinkedService, bool) {
	return nil, false
}

// AsOdbcLinkedService is the LinkedService implementation for SQLServerLinkedService.
func (ssls SQLServerLinkedService) AsOdbcLinkedService() (*OdbcLinkedService, bool) {
	return nil, false
}

// AsAzureMLLinkedService is the LinkedService implementation for SQLServerLinkedService.
func (ssls SQLServerLinkedService) AsAzureMLLinkedService() (*AzureMLLinkedService, bool) {
	return nil, false
}

// AsTeradataLinkedService is the LinkedService implementation for SQLServerLinkedService.
func (ssls SQLServerLinkedService) AsTeradataLinkedService() (*TeradataLinkedService, bool) {
	return nil, false
}

// AsDb2LinkedService is the LinkedService implementation for SQLServerLinkedService.
func (ssls SQLServerLinkedService) AsDb2LinkedService() (*Db2LinkedService, bool) {
	return nil, false
}

// AsSybaseLinkedService is the LinkedService implementation for SQLServerLinkedService.
func (ssls SQLServerLinkedService) AsSybaseLinkedService() (*SybaseLinkedService, bool) {
	return nil, false
}

// AsPostgreSQLLinkedService is the LinkedService implementation for SQLServerLinkedService.
func (ssls SQLServerLinkedService) AsPostgreSQLLinkedService() (*PostgreSQLLinkedService, bool) {
	return nil, false
}

// AsMySQLLinkedService is the LinkedService implementation for SQLServerLinkedService.
func (ssls SQLServerLinkedService) AsMySQLLinkedService() (*MySQLLinkedService, bool) {
	return nil, false
}

// AsOracleLinkedService is the LinkedService implementation for SQLServerLinkedService.
func (ssls SQLServerLinkedService) AsOracleLinkedService() (*OracleLinkedService, bool) {
	return nil, false
}

// AsFileServerLinkedService is the LinkedService implementation for SQLServerLinkedService.
func (ssls SQLServerLinkedService) AsFileServerLinkedService() (*FileServerLinkedService, bool) {
	return nil, false
}

// AsHDInsightLinkedService is the LinkedService implementation for SQLServerLinkedService.
func (ssls SQLServerLinkedService) AsHDInsightLinkedService() (*HDInsightLinkedService, bool) {
	return nil, false
}

// AsDynamicsLinkedService is the LinkedService implementation for SQLServerLinkedService.
func (ssls SQLServerLinkedService) AsDynamicsLinkedService() (*DynamicsLinkedService, bool) {
	return nil, false
}

// AsCosmosDbLinkedService is the LinkedService implementation for SQLServerLinkedService.
func (ssls SQLServerLinkedService) AsCosmosDbLinkedService() (*CosmosDbLinkedService, bool) {
	return nil, false
}

// AsAzureKeyVaultLinkedService is the LinkedService implementation for SQLServerLinkedService.
func (ssls SQLServerLinkedService) AsAzureKeyVaultLinkedService() (*AzureKeyVaultLinkedService, bool) {
	return nil, false
}

// AsAzureBatchLinkedService is the LinkedService implementation for SQLServerLinkedService.
func (ssls SQLServerLinkedService) AsAzureBatchLinkedService() (*AzureBatchLinkedService, bool) {
	return nil, false
}

// AsAzureSQLDatabaseLinkedService is the LinkedService implementation for SQLServerLinkedService.
func (ssls SQLServerLinkedService) AsAzureSQLDatabaseLinkedService() (*AzureSQLDatabaseLinkedService, bool) {
	return nil, false
}

// AsSQLServerLinkedService is the LinkedService implementation for SQLServerLinkedService.
func (ssls SQLServerLinkedService) AsSQLServerLinkedService() (*SQLServerLinkedService, bool) {
	return &ssls, true
}

// AsAzureSQLDWLinkedService is the LinkedService implementation for SQLServerLinkedService.
func (ssls SQLServerLinkedService) AsAzureSQLDWLinkedService() (*AzureSQLDWLinkedService, bool) {
	return nil, false
}

// AsAzureStorageLinkedService is the LinkedService implementation for SQLServerLinkedService.
func (ssls SQLServerLinkedService) AsAzureStorageLinkedService() (*AzureStorageLinkedService, bool) {
	return nil, false
}

// SQLServerLinkedServiceTypeProperties is SQL Server linked service properties.
type SQLServerLinkedServiceTypeProperties struct {
	ConnectionString    *SecureString           `json:"connectionString,omitempty"`
	UserName            *map[string]interface{} `json:"userName,omitempty"`
	Password            *SecureString           `json:"password,omitempty"`
	EncryptedCredential *map[string]interface{} `json:"encryptedCredential,omitempty"`
}

// SQLServerStoredProcedureActivity is SQL stored procedure activity type.
type SQLServerStoredProcedureActivity struct {
	Name                                            *string                 `json:"name,omitempty"`
	Description                                     *string                 `json:"description,omitempty"`
	DependsOn                                       *[]ActivityDependency   `json:"dependsOn,omitempty"`
	Type                                            TypeActivity            `json:"type,omitempty"`
	LinkedServiceName                               *LinkedServiceReference `json:"linkedServiceName,omitempty"`
	Policy                                          *ActivityPolicy         `json:"policy,omitempty"`
	*SQLServerStoredProcedureActivityTypeProperties `json:"typeProperties,omitempty"`
}

// MarshalJSON is the custom marshaler for SQLServerStoredProcedureActivity.
func (ssspa SQLServerStoredProcedureActivity) MarshalJSON() ([]byte, error) {
	ssspa.Type = TypeSQLServerStoredProcedure
	type Alias SQLServerStoredProcedureActivity
	return json.Marshal(&struct {
		Alias
	}{
		Alias: (Alias)(ssspa),
	})
}

// AsDataLakeAnalyticsUSQLActivity is the ExecutionActivity implementation for SQLServerStoredProcedureActivity.
func (ssspa SQLServerStoredProcedureActivity) AsDataLakeAnalyticsUSQLActivity() (*DataLakeAnalyticsUSQLActivity, bool) {
	return nil, false
}

// AsAzureMLUpdateResourceActivity is the ExecutionActivity implementation for SQLServerStoredProcedureActivity.
func (ssspa SQLServerStoredProcedureActivity) AsAzureMLUpdateResourceActivity() (*AzureMLUpdateResourceActivity, bool) {
	return nil, false
}

// AsAzureMLBatchExecutionActivity is the ExecutionActivity implementation for SQLServerStoredProcedureActivity.
func (ssspa SQLServerStoredProcedureActivity) AsAzureMLBatchExecutionActivity() (*AzureMLBatchExecutionActivity, bool) {
	return nil, false
}

// AsGetMetadataActivity is the ExecutionActivity implementation for SQLServerStoredProcedureActivity.
func (ssspa SQLServerStoredProcedureActivity) AsGetMetadataActivity() (*GetMetadataActivity, bool) {
	return nil, false
}

// AsWebActivity is the ExecutionActivity implementation for SQLServerStoredProcedureActivity.
func (ssspa SQLServerStoredProcedureActivity) AsWebActivity() (*WebActivity, bool) {
	return nil, false
}

// AsLookupActivity is the ExecutionActivity implementation for SQLServerStoredProcedureActivity.
func (ssspa SQLServerStoredProcedureActivity) AsLookupActivity() (*LookupActivity, bool) {
	return nil, false
}

// AsSQLServerStoredProcedureActivity is the ExecutionActivity implementation for SQLServerStoredProcedureActivity.
func (ssspa SQLServerStoredProcedureActivity) AsSQLServerStoredProcedureActivity() (*SQLServerStoredProcedureActivity, bool) {
	return &ssspa, true
}

// AsCustomActivity is the ExecutionActivity implementation for SQLServerStoredProcedureActivity.
func (ssspa SQLServerStoredProcedureActivity) AsCustomActivity() (*CustomActivity, bool) {
	return nil, false
}

// AsHDInsightSparkActivity is the ExecutionActivity implementation for SQLServerStoredProcedureActivity.
func (ssspa SQLServerStoredProcedureActivity) AsHDInsightSparkActivity() (*HDInsightSparkActivity, bool) {
	return nil, false
}

// AsHDInsightStreamingActivity is the ExecutionActivity implementation for SQLServerStoredProcedureActivity.
func (ssspa SQLServerStoredProcedureActivity) AsHDInsightStreamingActivity() (*HDInsightStreamingActivity, bool) {
	return nil, false
}

// AsHDInsightMapReduceActivity is the ExecutionActivity implementation for SQLServerStoredProcedureActivity.
func (ssspa SQLServerStoredProcedureActivity) AsHDInsightMapReduceActivity() (*HDInsightMapReduceActivity, bool) {
	return nil, false
}

// AsHDInsightPigActivity is the ExecutionActivity implementation for SQLServerStoredProcedureActivity.
func (ssspa SQLServerStoredProcedureActivity) AsHDInsightPigActivity() (*HDInsightPigActivity, bool) {
	return nil, false
}

// AsHDInsightHiveActivity is the ExecutionActivity implementation for SQLServerStoredProcedureActivity.
func (ssspa SQLServerStoredProcedureActivity) AsHDInsightHiveActivity() (*HDInsightHiveActivity, bool) {
	return nil, false
}

// AsCopyActivity is the ExecutionActivity implementation for SQLServerStoredProcedureActivity.
func (ssspa SQLServerStoredProcedureActivity) AsCopyActivity() (*CopyActivity, bool) {
	return nil, false
}

// AsExecutionActivity is the ExecutionActivity implementation for SQLServerStoredProcedureActivity.
func (ssspa SQLServerStoredProcedureActivity) AsExecutionActivity() (*ExecutionActivity, bool) {
	return nil, false
}

// AsUntilActivity is the ExecutionActivity implementation for SQLServerStoredProcedureActivity.
func (ssspa SQLServerStoredProcedureActivity) AsUntilActivity() (*UntilActivity, bool) {
	return nil, false
}

// AsWaitActivity is the ExecutionActivity implementation for SQLServerStoredProcedureActivity.
func (ssspa SQLServerStoredProcedureActivity) AsWaitActivity() (*WaitActivity, bool) {
	return nil, false
}

// AsForEachActivity is the ExecutionActivity implementation for SQLServerStoredProcedureActivity.
func (ssspa SQLServerStoredProcedureActivity) AsForEachActivity() (*ForEachActivity, bool) {
	return nil, false
}

// AsIfConditionActivity is the ExecutionActivity implementation for SQLServerStoredProcedureActivity.
func (ssspa SQLServerStoredProcedureActivity) AsIfConditionActivity() (*IfConditionActivity, bool) {
	return nil, false
}

// AsExecutePipelineActivity is the ExecutionActivity implementation for SQLServerStoredProcedureActivity.
func (ssspa SQLServerStoredProcedureActivity) AsExecutePipelineActivity() (*ExecutePipelineActivity, bool) {
	return nil, false
}

// AsControlActivity is the ExecutionActivity implementation for SQLServerStoredProcedureActivity.
func (ssspa SQLServerStoredProcedureActivity) AsControlActivity() (*ControlActivity, bool) {
	return nil, false
}

// SQLServerStoredProcedureActivityTypeProperties is SQL stored procedure activity properties.
type SQLServerStoredProcedureActivityTypeProperties struct {
	StoredProcedureName       *map[string]interface{}               `json:"storedProcedureName,omitempty"`
	StoredProcedureParameters *map[string]*StoredProcedureParameter `json:"storedProcedureParameters,omitempty"`
}

// SQLServerTableDataset is the on-premises SQL Server dataset.
type SQLServerTableDataset struct {
	Description                          *string                             `json:"description,omitempty"`
	Structure                            *map[string]interface{}             `json:"structure,omitempty"`
	LinkedServiceName                    *LinkedServiceReference             `json:"linkedServiceName,omitempty"`
	Parameters                           *map[string]*ParameterSpecification `json:"parameters,omitempty"`
	Type                                 TypeDataset                         `json:"type,omitempty"`
	*SQLServerTableDatasetTypeProperties `json:"typeProperties,omitempty"`
}

// MarshalJSON is the custom marshaler for SQLServerTableDataset.
func (sstd SQLServerTableDataset) MarshalJSON() ([]byte, error) {
	sstd.Type = TypeSQLServerTable
	type Alias SQLServerTableDataset
	return json.Marshal(&struct {
		Alias
	}{
		Alias: (Alias)(sstd),
	})
}

// AsHTTPDataset is the Dataset implementation for SQLServerTableDataset.
func (sstd SQLServerTableDataset) AsHTTPDataset() (*HTTPDataset, bool) {
	return nil, false
}

// AsAzureSearchIndexDataset is the Dataset implementation for SQLServerTableDataset.
func (sstd SQLServerTableDataset) AsAzureSearchIndexDataset() (*AzureSearchIndexDataset, bool) {
	return nil, false
}

// AsWebTableDataset is the Dataset implementation for SQLServerTableDataset.
func (sstd SQLServerTableDataset) AsWebTableDataset() (*WebTableDataset, bool) {
	return nil, false
}

// AsSQLServerTableDataset is the Dataset implementation for SQLServerTableDataset.
func (sstd SQLServerTableDataset) AsSQLServerTableDataset() (*SQLServerTableDataset, bool) {
	return &sstd, true
}

// AsRelationalTableDataset is the Dataset implementation for SQLServerTableDataset.
func (sstd SQLServerTableDataset) AsRelationalTableDataset() (*RelationalTableDataset, bool) {
	return nil, false
}

// AsOracleTableDataset is the Dataset implementation for SQLServerTableDataset.
func (sstd SQLServerTableDataset) AsOracleTableDataset() (*OracleTableDataset, bool) {
	return nil, false
}

// AsODataResourceDataset is the Dataset implementation for SQLServerTableDataset.
func (sstd SQLServerTableDataset) AsODataResourceDataset() (*ODataResourceDataset, bool) {
	return nil, false
}

// AsMongoDbCollectionDataset is the Dataset implementation for SQLServerTableDataset.
func (sstd SQLServerTableDataset) AsMongoDbCollectionDataset() (*MongoDbCollectionDataset, bool) {
	return nil, false
}

// AsFileShareDataset is the Dataset implementation for SQLServerTableDataset.
func (sstd SQLServerTableDataset) AsFileShareDataset() (*FileShareDataset, bool) {
	return nil, false
}

// AsAzureDataLakeStoreDataset is the Dataset implementation for SQLServerTableDataset.
func (sstd SQLServerTableDataset) AsAzureDataLakeStoreDataset() (*AzureDataLakeStoreDataset, bool) {
	return nil, false
}

// AsDynamicsEntityDataset is the Dataset implementation for SQLServerTableDataset.
func (sstd SQLServerTableDataset) AsDynamicsEntityDataset() (*DynamicsEntityDataset, bool) {
	return nil, false
}

// AsDocumentDbCollectionDataset is the Dataset implementation for SQLServerTableDataset.
func (sstd SQLServerTableDataset) AsDocumentDbCollectionDataset() (*DocumentDbCollectionDataset, bool) {
	return nil, false
}

// AsCustomDataset is the Dataset implementation for SQLServerTableDataset.
func (sstd SQLServerTableDataset) AsCustomDataset() (*CustomDataset, bool) {
	return nil, false
}

// AsCassandraTableDataset is the Dataset implementation for SQLServerTableDataset.
func (sstd SQLServerTableDataset) AsCassandraTableDataset() (*CassandraTableDataset, bool) {
	return nil, false
}

// AsAzureSQLDWTableDataset is the Dataset implementation for SQLServerTableDataset.
func (sstd SQLServerTableDataset) AsAzureSQLDWTableDataset() (*AzureSQLDWTableDataset, bool) {
	return nil, false
}

// AsAzureSQLTableDataset is the Dataset implementation for SQLServerTableDataset.
func (sstd SQLServerTableDataset) AsAzureSQLTableDataset() (*AzureSQLTableDataset, bool) {
	return nil, false
}

// AsAzureTableDataset is the Dataset implementation for SQLServerTableDataset.
func (sstd SQLServerTableDataset) AsAzureTableDataset() (*AzureTableDataset, bool) {
	return nil, false
}

// AsAzureBlobDataset is the Dataset implementation for SQLServerTableDataset.
func (sstd SQLServerTableDataset) AsAzureBlobDataset() (*AzureBlobDataset, bool) {
	return nil, false
}

// AsAmazonS3Dataset is the Dataset implementation for SQLServerTableDataset.
func (sstd SQLServerTableDataset) AsAmazonS3Dataset() (*AmazonS3Dataset, bool) {
	return nil, false
}

// SQLServerTableDatasetTypeProperties is on-premises SQL Server dataset properties.
type SQLServerTableDatasetTypeProperties struct {
	TableName *map[string]interface{} `json:"tableName,omitempty"`
}

// SQLSink is a copy activity SQL sink.
type SQLSink struct {
	WriteBatchSize               *map[string]interface{}               `json:"writeBatchSize,omitempty"`
	WriteBatchTimeout            *map[string]interface{}               `json:"writeBatchTimeout,omitempty"`
	SinkRetryCount               *map[string]interface{}               `json:"sinkRetryCount,omitempty"`
	SinkRetryWait                *map[string]interface{}               `json:"sinkRetryWait,omitempty"`
	Type                         TypeCopySink                          `json:"type,omitempty"`
	SQLWriterStoredProcedureName *map[string]interface{}               `json:"sqlWriterStoredProcedureName,omitempty"`
	SQLWriterTableType           *map[string]interface{}               `json:"sqlWriterTableType,omitempty"`
	PreCopyScript                *map[string]interface{}               `json:"preCopyScript,omitempty"`
	StoredProcedureParameters    *map[string]*StoredProcedureParameter `json:"storedProcedureParameters,omitempty"`
}

// MarshalJSON is the custom marshaler for SQLSink.
func (ss SQLSink) MarshalJSON() ([]byte, error) {
	ss.Type = TypeSQLSink
	type Alias SQLSink
	return json.Marshal(&struct {
		Alias
	}{
		Alias: (Alias)(ss),
	})
}

// AsOdbcSink is the CopySink implementation for SQLSink.
func (ss SQLSink) AsOdbcSink() (*OdbcSink, bool) {
	return nil, false
}

// AsAzureSearchIndexSink is the CopySink implementation for SQLSink.
func (ss SQLSink) AsAzureSearchIndexSink() (*AzureSearchIndexSink, bool) {
	return nil, false
}

// AsAzureDataLakeStoreSink is the CopySink implementation for SQLSink.
func (ss SQLSink) AsAzureDataLakeStoreSink() (*AzureDataLakeStoreSink, bool) {
	return nil, false
}

// AsOracleSink is the CopySink implementation for SQLSink.
func (ss SQLSink) AsOracleSink() (*OracleSink, bool) {
	return nil, false
}

// AsSQLDWSink is the CopySink implementation for SQLSink.
func (ss SQLSink) AsSQLDWSink() (*SQLDWSink, bool) {
	return nil, false
}

// AsSQLSink is the CopySink implementation for SQLSink.
func (ss SQLSink) AsSQLSink() (*SQLSink, bool) {
	return &ss, true
}

// AsDocumentDbCollectionSink is the CopySink implementation for SQLSink.
func (ss SQLSink) AsDocumentDbCollectionSink() (*DocumentDbCollectionSink, bool) {
	return nil, false
}

// AsFileSystemSink is the CopySink implementation for SQLSink.
func (ss SQLSink) AsFileSystemSink() (*FileSystemSink, bool) {
	return nil, false
}

// AsBlobSink is the CopySink implementation for SQLSink.
func (ss SQLSink) AsBlobSink() (*BlobSink, bool) {
	return nil, false
}

// AsAzureTableSink is the CopySink implementation for SQLSink.
func (ss SQLSink) AsAzureTableSink() (*AzureTableSink, bool) {
	return nil, false
}

// AsAzureQueueSink is the CopySink implementation for SQLSink.
func (ss SQLSink) AsAzureQueueSink() (*AzureQueueSink, bool) {
	return nil, false
}

// SQLSource is a copy activity SQL source.
type SQLSource struct {
	SourceRetryCount             *map[string]interface{}               `json:"sourceRetryCount,omitempty"`
	SourceRetryWait              *map[string]interface{}               `json:"sourceRetryWait,omitempty"`
	Type                         TypeCopySource                        `json:"type,omitempty"`
	SQLReaderQuery               *map[string]interface{}               `json:"sqlReaderQuery,omitempty"`
	SQLReaderStoredProcedureName *map[string]interface{}               `json:"sqlReaderStoredProcedureName,omitempty"`
	StoredProcedureParameters    *map[string]*StoredProcedureParameter `json:"storedProcedureParameters,omitempty"`
}

// MarshalJSON is the custom marshaler for SQLSource.
func (ss SQLSource) MarshalJSON() ([]byte, error) {
	ss.Type = TypeSQLSource
	type Alias SQLSource
	return json.Marshal(&struct {
		Alias
	}{
		Alias: (Alias)(ss),
	})
}

// AsAmazonRedshiftSource is the CopySource implementation for SQLSource.
func (ss SQLSource) AsAmazonRedshiftSource() (*AmazonRedshiftSource, bool) {
	return nil, false
}

// AsHTTPSource is the CopySource implementation for SQLSource.
func (ss SQLSource) AsHTTPSource() (*HTTPSource, bool) {
	return nil, false
}

// AsAzureDataLakeStoreSource is the CopySource implementation for SQLSource.
func (ss SQLSource) AsAzureDataLakeStoreSource() (*AzureDataLakeStoreSource, bool) {
	return nil, false
}

// AsMongoDbSource is the CopySource implementation for SQLSource.
func (ss SQLSource) AsMongoDbSource() (*MongoDbSource, bool) {
	return nil, false
}

// AsCassandraSource is the CopySource implementation for SQLSource.
func (ss SQLSource) AsCassandraSource() (*CassandraSource, bool) {
	return nil, false
}

// AsWebSource is the CopySource implementation for SQLSource.
func (ss SQLSource) AsWebSource() (*WebSource, bool) {
	return nil, false
}

// AsOracleSource is the CopySource implementation for SQLSource.
func (ss SQLSource) AsOracleSource() (*OracleSource, bool) {
	return nil, false
}

// AsHdfsSource is the CopySource implementation for SQLSource.
func (ss SQLSource) AsHdfsSource() (*HdfsSource, bool) {
	return nil, false
}

// AsFileSystemSource is the CopySource implementation for SQLSource.
func (ss SQLSource) AsFileSystemSource() (*FileSystemSource, bool) {
	return nil, false
}

// AsSQLDWSource is the CopySource implementation for SQLSource.
func (ss SQLSource) AsSQLDWSource() (*SQLDWSource, bool) {
	return nil, false
}

// AsSQLSource is the CopySource implementation for SQLSource.
func (ss SQLSource) AsSQLSource() (*SQLSource, bool) {
	return &ss, true
}

// AsRelationalSource is the CopySource implementation for SQLSource.
func (ss SQLSource) AsRelationalSource() (*RelationalSource, bool) {
	return nil, false
}

// AsDynamicsSource is the CopySource implementation for SQLSource.
func (ss SQLSource) AsDynamicsSource() (*DynamicsSource, bool) {
	return nil, false
}

// AsDocumentDbCollectionSource is the CopySource implementation for SQLSource.
func (ss SQLSource) AsDocumentDbCollectionSource() (*DocumentDbCollectionSource, bool) {
	return nil, false
}

// AsBlobSource is the CopySource implementation for SQLSource.
func (ss SQLSource) AsBlobSource() (*BlobSource, bool) {
	return nil, false
}

// AsAzureTableSource is the CopySource implementation for SQLSource.
func (ss SQLSource) AsAzureTableSource() (*AzureTableSource, bool) {
	return nil, false
}

// StagingSettings is staging settings.
type StagingSettings struct {
	LinkedServiceName *LinkedServiceReference `json:"linkedServiceName,omitempty"`
	Path              *map[string]interface{} `json:"path,omitempty"`
	EnableCompression *map[string]interface{} `json:"enableCompression,omitempty"`
}

// StoredProcedureParameter is SQL stored procedure parameter.
type StoredProcedureParameter struct {
	Value *map[string]interface{}      `json:"value,omitempty"`
	Type  StoredProcedureParameterType `json:"type,omitempty"`
}

// SubResource is azure Data Factory nested resource, which belongs to a factory.
type SubResource struct {
	ID   *string `json:"id,omitempty"`
	Name *string `json:"name,omitempty"`
	Type *string `json:"type,omitempty"`
	Etag *string `json:"etag,omitempty"`
}

// SybaseLinkedService is linked service for Sybase data source.
type SybaseLinkedService struct {
	ConnectVia                         *IntegrationRuntimeReference `json:"connectVia,omitempty"`
	Description                        *string                      `json:"description,omitempty"`
	Type                               TypeLinkedService            `json:"type,omitempty"`
	*SybaseLinkedServiceTypeProperties `json:"typeProperties,omitempty"`
}

// MarshalJSON is the custom marshaler for SybaseLinkedService.
func (sls SybaseLinkedService) MarshalJSON() ([]byte, error) {
	sls.Type = TypeSybase
	type Alias SybaseLinkedService
	return json.Marshal(&struct {
		Alias
	}{
		Alias: (Alias)(sls),
	})
}

// AsAzureDataLakeAnalyticsLinkedService is the LinkedService implementation for SybaseLinkedService.
func (sls SybaseLinkedService) AsAzureDataLakeAnalyticsLinkedService() (*AzureDataLakeAnalyticsLinkedService, bool) {
	return nil, false
}

// AsHDInsightOnDemandLinkedService is the LinkedService implementation for SybaseLinkedService.
func (sls SybaseLinkedService) AsHDInsightOnDemandLinkedService() (*HDInsightOnDemandLinkedService, bool) {
	return nil, false
}

// AsSapHanaLinkedService is the LinkedService implementation for SybaseLinkedService.
func (sls SybaseLinkedService) AsSapHanaLinkedService() (*SapHanaLinkedService, bool) {
	return nil, false
}

// AsSapBWLinkedService is the LinkedService implementation for SybaseLinkedService.
func (sls SybaseLinkedService) AsSapBWLinkedService() (*SapBWLinkedService, bool) {
	return nil, false
}

// AsSftpServerLinkedService is the LinkedService implementation for SybaseLinkedService.
func (sls SybaseLinkedService) AsSftpServerLinkedService() (*SftpServerLinkedService, bool) {
	return nil, false
}

// AsFtpServerLinkedService is the LinkedService implementation for SybaseLinkedService.
func (sls SybaseLinkedService) AsFtpServerLinkedService() (*FtpServerLinkedService, bool) {
	return nil, false
}

// AsHTTPLinkedService is the LinkedService implementation for SybaseLinkedService.
func (sls SybaseLinkedService) AsHTTPLinkedService() (*HTTPLinkedService, bool) {
	return nil, false
}

// AsAzureSearchLinkedService is the LinkedService implementation for SybaseLinkedService.
func (sls SybaseLinkedService) AsAzureSearchLinkedService() (*AzureSearchLinkedService, bool) {
	return nil, false
}

// AsCustomDataSourceLinkedService is the LinkedService implementation for SybaseLinkedService.
func (sls SybaseLinkedService) AsCustomDataSourceLinkedService() (*CustomDataSourceLinkedService, bool) {
	return nil, false
}

// AsAmazonRedshiftLinkedService is the LinkedService implementation for SybaseLinkedService.
func (sls SybaseLinkedService) AsAmazonRedshiftLinkedService() (*AmazonRedshiftLinkedService, bool) {
	return nil, false
}

// AsAmazonS3LinkedService is the LinkedService implementation for SybaseLinkedService.
func (sls SybaseLinkedService) AsAmazonS3LinkedService() (*AmazonS3LinkedService, bool) {
	return nil, false
}

// AsSalesforceLinkedService is the LinkedService implementation for SybaseLinkedService.
func (sls SybaseLinkedService) AsSalesforceLinkedService() (*SalesforceLinkedService, bool) {
	return nil, false
}

// AsAzureDataLakeStoreLinkedService is the LinkedService implementation for SybaseLinkedService.
func (sls SybaseLinkedService) AsAzureDataLakeStoreLinkedService() (*AzureDataLakeStoreLinkedService, bool) {
	return nil, false
}

// AsMongoDbLinkedService is the LinkedService implementation for SybaseLinkedService.
func (sls SybaseLinkedService) AsMongoDbLinkedService() (*MongoDbLinkedService, bool) {
	return nil, false
}

// AsCassandraLinkedService is the LinkedService implementation for SybaseLinkedService.
func (sls SybaseLinkedService) AsCassandraLinkedService() (*CassandraLinkedService, bool) {
	return nil, false
}

// AsWebLinkedService is the LinkedService implementation for SybaseLinkedService.
func (sls SybaseLinkedService) AsWebLinkedService() (*WebLinkedService, bool) {
	return nil, false
}

// AsODataLinkedService is the LinkedService implementation for SybaseLinkedService.
func (sls SybaseLinkedService) AsODataLinkedService() (*ODataLinkedService, bool) {
	return nil, false
}

// AsHdfsLinkedService is the LinkedService implementation for SybaseLinkedService.
func (sls SybaseLinkedService) AsHdfsLinkedService() (*HdfsLinkedService, bool) {
	return nil, false
}

// AsOdbcLinkedService is the LinkedService implementation for SybaseLinkedService.
func (sls SybaseLinkedService) AsOdbcLinkedService() (*OdbcLinkedService, bool) {
	return nil, false
}

// AsAzureMLLinkedService is the LinkedService implementation for SybaseLinkedService.
func (sls SybaseLinkedService) AsAzureMLLinkedService() (*AzureMLLinkedService, bool) {
	return nil, false
}

// AsTeradataLinkedService is the LinkedService implementation for SybaseLinkedService.
func (sls SybaseLinkedService) AsTeradataLinkedService() (*TeradataLinkedService, bool) {
	return nil, false
}

// AsDb2LinkedService is the LinkedService implementation for SybaseLinkedService.
func (sls SybaseLinkedService) AsDb2LinkedService() (*Db2LinkedService, bool) {
	return nil, false
}

// AsSybaseLinkedService is the LinkedService implementation for SybaseLinkedService.
func (sls SybaseLinkedService) AsSybaseLinkedService() (*SybaseLinkedService, bool) {
	return &sls, true
}

// AsPostgreSQLLinkedService is the LinkedService implementation for SybaseLinkedService.
func (sls SybaseLinkedService) AsPostgreSQLLinkedService() (*PostgreSQLLinkedService, bool) {
	return nil, false
}

// AsMySQLLinkedService is the LinkedService implementation for SybaseLinkedService.
func (sls SybaseLinkedService) AsMySQLLinkedService() (*MySQLLinkedService, bool) {
	return nil, false
}

// AsOracleLinkedService is the LinkedService implementation for SybaseLinkedService.
func (sls SybaseLinkedService) AsOracleLinkedService() (*OracleLinkedService, bool) {
	return nil, false
}

// AsFileServerLinkedService is the LinkedService implementation for SybaseLinkedService.
func (sls SybaseLinkedService) AsFileServerLinkedService() (*FileServerLinkedService, bool) {
	return nil, false
}

// AsHDInsightLinkedService is the LinkedService implementation for SybaseLinkedService.
func (sls SybaseLinkedService) AsHDInsightLinkedService() (*HDInsightLinkedService, bool) {
	return nil, false
}

// AsDynamicsLinkedService is the LinkedService implementation for SybaseLinkedService.
func (sls SybaseLinkedService) AsDynamicsLinkedService() (*DynamicsLinkedService, bool) {
	return nil, false
}

// AsCosmosDbLinkedService is the LinkedService implementation for SybaseLinkedService.
func (sls SybaseLinkedService) AsCosmosDbLinkedService() (*CosmosDbLinkedService, bool) {
	return nil, false
}

// AsAzureKeyVaultLinkedService is the LinkedService implementation for SybaseLinkedService.
func (sls SybaseLinkedService) AsAzureKeyVaultLinkedService() (*AzureKeyVaultLinkedService, bool) {
	return nil, false
}

// AsAzureBatchLinkedService is the LinkedService implementation for SybaseLinkedService.
func (sls SybaseLinkedService) AsAzureBatchLinkedService() (*AzureBatchLinkedService, bool) {
	return nil, false
}

// AsAzureSQLDatabaseLinkedService is the LinkedService implementation for SybaseLinkedService.
func (sls SybaseLinkedService) AsAzureSQLDatabaseLinkedService() (*AzureSQLDatabaseLinkedService, bool) {
	return nil, false
}

// AsSQLServerLinkedService is the LinkedService implementation for SybaseLinkedService.
func (sls SybaseLinkedService) AsSQLServerLinkedService() (*SQLServerLinkedService, bool) {
	return nil, false
}

// AsAzureSQLDWLinkedService is the LinkedService implementation for SybaseLinkedService.
func (sls SybaseLinkedService) AsAzureSQLDWLinkedService() (*AzureSQLDWLinkedService, bool) {
	return nil, false
}

// AsAzureStorageLinkedService is the LinkedService implementation for SybaseLinkedService.
func (sls SybaseLinkedService) AsAzureStorageLinkedService() (*AzureStorageLinkedService, bool) {
	return nil, false
}

// SybaseLinkedServiceTypeProperties is sybase linked service properties.
type SybaseLinkedServiceTypeProperties struct {
	Server              *map[string]interface{}  `json:"server,omitempty"`
	Database            *map[string]interface{}  `json:"database,omitempty"`
	Schema              *map[string]interface{}  `json:"schema,omitempty"`
	AuthenticationType  SybaseAuthenticationType `json:"authenticationType,omitempty"`
	Username            *map[string]interface{}  `json:"username,omitempty"`
	Password            *SecureString            `json:"password,omitempty"`
	EncryptedCredential *map[string]interface{}  `json:"encryptedCredential,omitempty"`
}

// TabularTranslator is a copy activity tabular translator.
type TabularTranslator struct {
	Type           TypeCopyTranslator      `json:"type,omitempty"`
	ColumnMappings *map[string]interface{} `json:"columnMappings,omitempty"`
}

// MarshalJSON is the custom marshaler for TabularTranslator.
func (tt TabularTranslator) MarshalJSON() ([]byte, error) {
	tt.Type = TypeTabularTranslator
	type Alias TabularTranslator
	return json.Marshal(&struct {
		Alias
	}{
		Alias: (Alias)(tt),
	})
}

// AsTabularTranslator is the CopyTranslator implementation for TabularTranslator.
func (tt TabularTranslator) AsTabularTranslator() (*TabularTranslator, bool) {
	return &tt, true
}

// TeradataLinkedService is linked service for Teradata data source.
type TeradataLinkedService struct {
	ConnectVia                           *IntegrationRuntimeReference `json:"connectVia,omitempty"`
	Description                          *string                      `json:"description,omitempty"`
	Type                                 TypeLinkedService            `json:"type,omitempty"`
	*TeradataLinkedServiceTypeProperties `json:"typeProperties,omitempty"`
}

// MarshalJSON is the custom marshaler for TeradataLinkedService.
func (TLSVar TeradataLinkedService) MarshalJSON() ([]byte, error) {
	TLSVar.Type = TypeTeradata
	type Alias TeradataLinkedService
	return json.Marshal(&struct {
		Alias
	}{
		Alias: (Alias)(TLSVar),
	})
}

// AsAzureDataLakeAnalyticsLinkedService is the LinkedService implementation for TeradataLinkedService.
func (TLSVar TeradataLinkedService) AsAzureDataLakeAnalyticsLinkedService() (*AzureDataLakeAnalyticsLinkedService, bool) {
	return nil, false
}

// AsHDInsightOnDemandLinkedService is the LinkedService implementation for TeradataLinkedService.
func (TLSVar TeradataLinkedService) AsHDInsightOnDemandLinkedService() (*HDInsightOnDemandLinkedService, bool) {
	return nil, false
}

// AsSapHanaLinkedService is the LinkedService implementation for TeradataLinkedService.
func (TLSVar TeradataLinkedService) AsSapHanaLinkedService() (*SapHanaLinkedService, bool) {
	return nil, false
}

// AsSapBWLinkedService is the LinkedService implementation for TeradataLinkedService.
func (TLSVar TeradataLinkedService) AsSapBWLinkedService() (*SapBWLinkedService, bool) {
	return nil, false
}

// AsSftpServerLinkedService is the LinkedService implementation for TeradataLinkedService.
func (TLSVar TeradataLinkedService) AsSftpServerLinkedService() (*SftpServerLinkedService, bool) {
	return nil, false
}

// AsFtpServerLinkedService is the LinkedService implementation for TeradataLinkedService.
func (TLSVar TeradataLinkedService) AsFtpServerLinkedService() (*FtpServerLinkedService, bool) {
	return nil, false
}

// AsHTTPLinkedService is the LinkedService implementation for TeradataLinkedService.
func (TLSVar TeradataLinkedService) AsHTTPLinkedService() (*HTTPLinkedService, bool) {
	return nil, false
}

// AsAzureSearchLinkedService is the LinkedService implementation for TeradataLinkedService.
func (TLSVar TeradataLinkedService) AsAzureSearchLinkedService() (*AzureSearchLinkedService, bool) {
	return nil, false
}

// AsCustomDataSourceLinkedService is the LinkedService implementation for TeradataLinkedService.
func (TLSVar TeradataLinkedService) AsCustomDataSourceLinkedService() (*CustomDataSourceLinkedService, bool) {
	return nil, false
}

// AsAmazonRedshiftLinkedService is the LinkedService implementation for TeradataLinkedService.
func (TLSVar TeradataLinkedService) AsAmazonRedshiftLinkedService() (*AmazonRedshiftLinkedService, bool) {
	return nil, false
}

// AsAmazonS3LinkedService is the LinkedService implementation for TeradataLinkedService.
func (TLSVar TeradataLinkedService) AsAmazonS3LinkedService() (*AmazonS3LinkedService, bool) {
	return nil, false
}

// AsSalesforceLinkedService is the LinkedService implementation for TeradataLinkedService.
func (TLSVar TeradataLinkedService) AsSalesforceLinkedService() (*SalesforceLinkedService, bool) {
	return nil, false
}

// AsAzureDataLakeStoreLinkedService is the LinkedService implementation for TeradataLinkedService.
func (TLSVar TeradataLinkedService) AsAzureDataLakeStoreLinkedService() (*AzureDataLakeStoreLinkedService, bool) {
	return nil, false
}

// AsMongoDbLinkedService is the LinkedService implementation for TeradataLinkedService.
func (TLSVar TeradataLinkedService) AsMongoDbLinkedService() (*MongoDbLinkedService, bool) {
	return nil, false
}

// AsCassandraLinkedService is the LinkedService implementation for TeradataLinkedService.
func (TLSVar TeradataLinkedService) AsCassandraLinkedService() (*CassandraLinkedService, bool) {
	return nil, false
}

// AsWebLinkedService is the LinkedService implementation for TeradataLinkedService.
func (TLSVar TeradataLinkedService) AsWebLinkedService() (*WebLinkedService, bool) {
	return nil, false
}

// AsODataLinkedService is the LinkedService implementation for TeradataLinkedService.
func (TLSVar TeradataLinkedService) AsODataLinkedService() (*ODataLinkedService, bool) {
	return nil, false
}

// AsHdfsLinkedService is the LinkedService implementation for TeradataLinkedService.
func (TLSVar TeradataLinkedService) AsHdfsLinkedService() (*HdfsLinkedService, bool) {
	return nil, false
}

// AsOdbcLinkedService is the LinkedService implementation for TeradataLinkedService.
func (TLSVar TeradataLinkedService) AsOdbcLinkedService() (*OdbcLinkedService, bool) {
	return nil, false
}

// AsAzureMLLinkedService is the LinkedService implementation for TeradataLinkedService.
func (TLSVar TeradataLinkedService) AsAzureMLLinkedService() (*AzureMLLinkedService, bool) {
	return nil, false
}

// AsTeradataLinkedService is the LinkedService implementation for TeradataLinkedService.
func (TLSVar TeradataLinkedService) AsTeradataLinkedService() (*TeradataLinkedService, bool) {
	return &TLSVar, true
}

// AsDb2LinkedService is the LinkedService implementation for TeradataLinkedService.
func (TLSVar TeradataLinkedService) AsDb2LinkedService() (*Db2LinkedService, bool) {
	return nil, false
}

// AsSybaseLinkedService is the LinkedService implementation for TeradataLinkedService.
func (TLSVar TeradataLinkedService) AsSybaseLinkedService() (*SybaseLinkedService, bool) {
	return nil, false
}

// AsPostgreSQLLinkedService is the LinkedService implementation for TeradataLinkedService.
func (TLSVar TeradataLinkedService) AsPostgreSQLLinkedService() (*PostgreSQLLinkedService, bool) {
	return nil, false
}

// AsMySQLLinkedService is the LinkedService implementation for TeradataLinkedService.
func (TLSVar TeradataLinkedService) AsMySQLLinkedService() (*MySQLLinkedService, bool) {
	return nil, false
}

// AsOracleLinkedService is the LinkedService implementation for TeradataLinkedService.
func (TLSVar TeradataLinkedService) AsOracleLinkedService() (*OracleLinkedService, bool) {
	return nil, false
}

// AsFileServerLinkedService is the LinkedService implementation for TeradataLinkedService.
func (TLSVar TeradataLinkedService) AsFileServerLinkedService() (*FileServerLinkedService, bool) {
	return nil, false
}

// AsHDInsightLinkedService is the LinkedService implementation for TeradataLinkedService.
func (TLSVar TeradataLinkedService) AsHDInsightLinkedService() (*HDInsightLinkedService, bool) {
	return nil, false
}

// AsDynamicsLinkedService is the LinkedService implementation for TeradataLinkedService.
func (TLSVar TeradataLinkedService) AsDynamicsLinkedService() (*DynamicsLinkedService, bool) {
	return nil, false
}

// AsCosmosDbLinkedService is the LinkedService implementation for TeradataLinkedService.
func (TLSVar TeradataLinkedService) AsCosmosDbLinkedService() (*CosmosDbLinkedService, bool) {
	return nil, false
}

// AsAzureKeyVaultLinkedService is the LinkedService implementation for TeradataLinkedService.
func (TLSVar TeradataLinkedService) AsAzureKeyVaultLinkedService() (*AzureKeyVaultLinkedService, bool) {
	return nil, false
}

// AsAzureBatchLinkedService is the LinkedService implementation for TeradataLinkedService.
func (TLSVar TeradataLinkedService) AsAzureBatchLinkedService() (*AzureBatchLinkedService, bool) {
	return nil, false
}

// AsAzureSQLDatabaseLinkedService is the LinkedService implementation for TeradataLinkedService.
func (TLSVar TeradataLinkedService) AsAzureSQLDatabaseLinkedService() (*AzureSQLDatabaseLinkedService, bool) {
	return nil, false
}

// AsSQLServerLinkedService is the LinkedService implementation for TeradataLinkedService.
func (TLSVar TeradataLinkedService) AsSQLServerLinkedService() (*SQLServerLinkedService, bool) {
	return nil, false
}

// AsAzureSQLDWLinkedService is the LinkedService implementation for TeradataLinkedService.
func (TLSVar TeradataLinkedService) AsAzureSQLDWLinkedService() (*AzureSQLDWLinkedService, bool) {
	return nil, false
}

// AsAzureStorageLinkedService is the LinkedService implementation for TeradataLinkedService.
func (TLSVar TeradataLinkedService) AsAzureStorageLinkedService() (*AzureStorageLinkedService, bool) {
	return nil, false
}

// TeradataLinkedServiceTypeProperties is teradata linked service properties.
type TeradataLinkedServiceTypeProperties struct {
	Server              *map[string]interface{}    `json:"server,omitempty"`
	Schema              *map[string]interface{}    `json:"schema,omitempty"`
	AuthenticationType  TeradataAuthenticationType `json:"authenticationType,omitempty"`
	Username            *map[string]interface{}    `json:"username,omitempty"`
	Password            *SecureString              `json:"password,omitempty"`
	EncryptedCredential *map[string]interface{}    `json:"encryptedCredential,omitempty"`
}

// TextFormat is the data stored in text format.
type TextFormat struct {
	Serializer       *map[string]interface{}  `json:"serializer,omitempty"`
	Deserializer     *map[string]interface{}  `json:"deserializer,omitempty"`
	Type             TypeDatasetStorageFormat `json:"type,omitempty"`
	ColumnDelimiter  *map[string]interface{}  `json:"columnDelimiter,omitempty"`
	RowDelimiter     *map[string]interface{}  `json:"rowDelimiter,omitempty"`
	EscapeChar       *map[string]interface{}  `json:"escapeChar,omitempty"`
	QuoteChar        *map[string]interface{}  `json:"quoteChar,omitempty"`
	NullValue        *map[string]interface{}  `json:"nullValue,omitempty"`
	EncodingName     *map[string]interface{}  `json:"encodingName,omitempty"`
	TreatEmptyAsNull *map[string]interface{}  `json:"treatEmptyAsNull,omitempty"`
	SkipLineCount    *map[string]interface{}  `json:"skipLineCount,omitempty"`
	FirstRowAsHeader *map[string]interface{}  `json:"firstRowAsHeader,omitempty"`
}

// MarshalJSON is the custom marshaler for TextFormat.
func (tf TextFormat) MarshalJSON() ([]byte, error) {
	tf.Type = TypeTextFormat
	type Alias TextFormat
	return json.Marshal(&struct {
		Alias
	}{
		Alias: (Alias)(tf),
	})
}

// AsParquetFormat is the DatasetStorageFormat implementation for TextFormat.
func (tf TextFormat) AsParquetFormat() (*ParquetFormat, bool) {
	return nil, false
}

// AsOrcFormat is the DatasetStorageFormat implementation for TextFormat.
func (tf TextFormat) AsOrcFormat() (*OrcFormat, bool) {
	return nil, false
}

// AsAvroFormat is the DatasetStorageFormat implementation for TextFormat.
func (tf TextFormat) AsAvroFormat() (*AvroFormat, bool) {
	return nil, false
}

// AsJSONFormat is the DatasetStorageFormat implementation for TextFormat.
func (tf TextFormat) AsJSONFormat() (*JSONFormat, bool) {
	return nil, false
}

// AsTextFormat is the DatasetStorageFormat implementation for TextFormat.
func (tf TextFormat) AsTextFormat() (*TextFormat, bool) {
	return &tf, true
}

// Trigger is azure data factory nested object which contains information about creating pipeline run
type Trigger interface {
	AsBlobTrigger() (*BlobTrigger, bool)
	AsScheduleTrigger() (*ScheduleTrigger, bool)
}

func unmarshalTrigger(body []byte) (Trigger, error) {
	var m map[string]interface{}
	err := json.Unmarshal(body, &m)
	if err != nil {
		return nil, err
	}

	switch m["type"] {
	case string(TypeBlobTrigger):
		var bt BlobTrigger
		err := json.Unmarshal(body, &bt)
		return bt, err
	case string(TypeScheduleTrigger):
		var st ScheduleTrigger
		err := json.Unmarshal(body, &st)
		return st, err
	default:
		return nil, errors.New("Unsupported type")
	}
}
func unmarshalTriggerArray(body []byte) ([]Trigger, error) {
	var rawMessages []*json.RawMessage
	err := json.Unmarshal(body, &rawMessages)
	if err != nil {
		return nil, err
	}

	tArray := make([]Trigger, len(rawMessages))

	for index, rawMessage := range rawMessages {
		t, err := unmarshalTrigger(*rawMessage)
		if err != nil {
			return nil, err
		}
		tArray[index] = t
	}
	return tArray, nil
}

// TriggerListResponse is a list of trigger resources.
type TriggerListResponse struct {
	autorest.Response `json:"-"`
	Value             *[]TriggerResource `json:"value,omitempty"`
	NextLink          *string            `json:"nextLink,omitempty"`
}

// TriggerListResponsePreparer prepares a request to retrieve the next set of results. It returns
// nil if no more results exist.
func (client TriggerListResponse) TriggerListResponsePreparer() (*http.Request, error) {
	if client.NextLink == nil || len(to.String(client.NextLink)) <= 0 {
		return nil, nil
	}
	return autorest.Prepare(&http.Request{},
		autorest.AsJSON(),
		autorest.AsGet(),
		autorest.WithBaseURL(to.String(client.NextLink)))
}

// TriggerPipelineReference is pipeline that needs to be triggered with the given parameters.
type TriggerPipelineReference struct {
	PipelineReference *PipelineReference                  `json:"pipelineReference,omitempty"`
	Parameters        *map[string]*map[string]interface{} `json:"parameters,omitempty"`
}

// TriggerResource is trigger resource type.
type TriggerResource struct {
	autorest.Response `json:"-"`
	ID                *string `json:"id,omitempty"`
	Name              *string `json:"name,omitempty"`
	Type              *string `json:"type,omitempty"`
	Etag              *string `json:"etag,omitempty"`
	Properties        Trigger `json:"properties,omitempty"`
}

// UnmarshalJSON is the custom unmarshaler for TriggerResource struct.
func (tr *TriggerResource) UnmarshalJSON(body []byte) error {
	var m map[string]*json.RawMessage
	err := json.Unmarshal(body, &m)
	if err != nil {
		return err
	}
	var v *json.RawMessage

	v = m["properties"]
	if v != nil {
		properties, err := unmarshalTrigger(*m["properties"])
		if err != nil {
			return err
		}
		tr.Properties = properties
	}

	v = m["id"]
	if v != nil {
		var ID string
		err = json.Unmarshal(*m["id"], &ID)
		if err != nil {
			return err
		}
		tr.ID = &ID
	}

	v = m["name"]
	if v != nil {
		var name string
		err = json.Unmarshal(*m["name"], &name)
		if err != nil {
			return err
		}
		tr.Name = &name
	}

	v = m["type"]
	if v != nil {
		var typeVar string
		err = json.Unmarshal(*m["type"], &typeVar)
		if err != nil {
			return err
		}
		tr.Type = &typeVar
	}

	v = m["etag"]
	if v != nil {
		var etag string
		err = json.Unmarshal(*m["etag"], &etag)
		if err != nil {
			return err
		}
		tr.Etag = &etag
	}

	return nil
}

// TriggerRun is trigger runs.
type TriggerRun struct {
	TriggerRunID        *string             `json:"triggerRunId,omitempty"`
	TriggerName         *string             `json:"triggerName,omitempty"`
	TriggerType         *string             `json:"triggerType,omitempty"`
	TriggerRunTimestamp *date.Time          `json:"triggerRunTimestamp,omitempty"`
	Status              TriggerRunStatus    `json:"status,omitempty"`
	Message             *string             `json:"message,omitempty"`
	Properties          *map[string]*string `json:"properties,omitempty"`
	TriggeredPipelines  *map[string]*string `json:"triggeredPipelines,omitempty"`
}

// TriggerRunListResponse is a list of trigger runs.
type TriggerRunListResponse struct {
	autorest.Response `json:"-"`
	Value             *[]TriggerRun `json:"value,omitempty"`
	NextLink          *string       `json:"nextLink,omitempty"`
}

// TriggerRunListResponsePreparer prepares a request to retrieve the next set of results. It returns
// nil if no more results exist.
func (client TriggerRunListResponse) TriggerRunListResponsePreparer() (*http.Request, error) {
	if client.NextLink == nil || len(to.String(client.NextLink)) <= 0 {
		return nil, nil
	}
	return autorest.Prepare(&http.Request{},
		autorest.AsJSON(),
		autorest.AsGet(),
		autorest.WithBaseURL(to.String(client.NextLink)))
}

// UntilActivity is this activity executes inner activities until the specified boolean expression results to true or
// timeout is reached, whichever is earlier.
type UntilActivity struct {
	Name                         *string               `json:"name,omitempty"`
	Description                  *string               `json:"description,omitempty"`
	DependsOn                    *[]ActivityDependency `json:"dependsOn,omitempty"`
	Type                         TypeActivity          `json:"type,omitempty"`
	*UntilActivityTypeProperties `json:"typeProperties,omitempty"`
}

// MarshalJSON is the custom marshaler for UntilActivity.
func (ua UntilActivity) MarshalJSON() ([]byte, error) {
	ua.Type = TypeUntil
	type Alias UntilActivity
	return json.Marshal(&struct {
		Alias
	}{
		Alias: (Alias)(ua),
	})
}

// AsUntilActivity is the ControlActivity implementation for UntilActivity.
func (ua UntilActivity) AsUntilActivity() (*UntilActivity, bool) {
	return &ua, true
}

// AsWaitActivity is the ControlActivity implementation for UntilActivity.
func (ua UntilActivity) AsWaitActivity() (*WaitActivity, bool) {
	return nil, false
}

// AsForEachActivity is the ControlActivity implementation for UntilActivity.
func (ua UntilActivity) AsForEachActivity() (*ForEachActivity, bool) {
	return nil, false
}

// AsIfConditionActivity is the ControlActivity implementation for UntilActivity.
func (ua UntilActivity) AsIfConditionActivity() (*IfConditionActivity, bool) {
	return nil, false
}

// AsExecutePipelineActivity is the ControlActivity implementation for UntilActivity.
func (ua UntilActivity) AsExecutePipelineActivity() (*ExecutePipelineActivity, bool) {
	return nil, false
}

// AsDataLakeAnalyticsUSQLActivity is the ControlActivity implementation for UntilActivity.
func (ua UntilActivity) AsDataLakeAnalyticsUSQLActivity() (*DataLakeAnalyticsUSQLActivity, bool) {
	return nil, false
}

// AsAzureMLUpdateResourceActivity is the ControlActivity implementation for UntilActivity.
func (ua UntilActivity) AsAzureMLUpdateResourceActivity() (*AzureMLUpdateResourceActivity, bool) {
	return nil, false
}

// AsAzureMLBatchExecutionActivity is the ControlActivity implementation for UntilActivity.
func (ua UntilActivity) AsAzureMLBatchExecutionActivity() (*AzureMLBatchExecutionActivity, bool) {
	return nil, false
}

// AsGetMetadataActivity is the ControlActivity implementation for UntilActivity.
func (ua UntilActivity) AsGetMetadataActivity() (*GetMetadataActivity, bool) {
	return nil, false
}

// AsWebActivity is the ControlActivity implementation for UntilActivity.
func (ua UntilActivity) AsWebActivity() (*WebActivity, bool) {
	return nil, false
}

// AsLookupActivity is the ControlActivity implementation for UntilActivity.
func (ua UntilActivity) AsLookupActivity() (*LookupActivity, bool) {
	return nil, false
}

// AsSQLServerStoredProcedureActivity is the ControlActivity implementation for UntilActivity.
func (ua UntilActivity) AsSQLServerStoredProcedureActivity() (*SQLServerStoredProcedureActivity, bool) {
	return nil, false
}

// AsCustomActivity is the ControlActivity implementation for UntilActivity.
func (ua UntilActivity) AsCustomActivity() (*CustomActivity, bool) {
	return nil, false
}

// AsHDInsightSparkActivity is the ControlActivity implementation for UntilActivity.
func (ua UntilActivity) AsHDInsightSparkActivity() (*HDInsightSparkActivity, bool) {
	return nil, false
}

// AsHDInsightStreamingActivity is the ControlActivity implementation for UntilActivity.
func (ua UntilActivity) AsHDInsightStreamingActivity() (*HDInsightStreamingActivity, bool) {
	return nil, false
}

// AsHDInsightMapReduceActivity is the ControlActivity implementation for UntilActivity.
func (ua UntilActivity) AsHDInsightMapReduceActivity() (*HDInsightMapReduceActivity, bool) {
	return nil, false
}

// AsHDInsightPigActivity is the ControlActivity implementation for UntilActivity.
func (ua UntilActivity) AsHDInsightPigActivity() (*HDInsightPigActivity, bool) {
	return nil, false
}

// AsHDInsightHiveActivity is the ControlActivity implementation for UntilActivity.
func (ua UntilActivity) AsHDInsightHiveActivity() (*HDInsightHiveActivity, bool) {
	return nil, false
}

// AsCopyActivity is the ControlActivity implementation for UntilActivity.
func (ua UntilActivity) AsCopyActivity() (*CopyActivity, bool) {
	return nil, false
}

// AsExecutionActivity is the ControlActivity implementation for UntilActivity.
func (ua UntilActivity) AsExecutionActivity() (*ExecutionActivity, bool) {
	return nil, false
}

// AsControlActivity is the ControlActivity implementation for UntilActivity.
func (ua UntilActivity) AsControlActivity() (*ControlActivity, bool) {
	return nil, false
}

// UntilActivityTypeProperties is until activity properties.
type UntilActivityTypeProperties struct {
	Expression *Expression             `json:"expression,omitempty"`
	Timeout    *map[string]interface{} `json:"timeout,omitempty"`
	Activities *[]Activity             `json:"activities,omitempty"`
}

// UnmarshalJSON is the custom unmarshaler for UntilActivityTypeProperties struct.
func (uatp *UntilActivityTypeProperties) UnmarshalJSON(body []byte) error {
	var m map[string]*json.RawMessage
	err := json.Unmarshal(body, &m)
	if err != nil {
		return err
	}
	var v *json.RawMessage

	v = m["expression"]
	if v != nil {
		var expression Expression
		err = json.Unmarshal(*m["expression"], &expression)
		if err != nil {
			return err
		}
		uatp.Expression = &expression
	}

	v = m["timeout"]
	if v != nil {
		var timeout map[string]interface{}
		err = json.Unmarshal(*m["timeout"], &timeout)
		if err != nil {
			return err
		}
		uatp.Timeout = &timeout
	}

	v = m["activities"]
	if v != nil {
		activities, err := unmarshalActivityArray(*m["activities"])
		if err != nil {
			return err
		}
		uatp.Activities = &activities
	}

	return nil
}

// WaitActivity is this activity suspends pipeline execution for the specified interval.
type WaitActivity struct {
	Name                        *string               `json:"name,omitempty"`
	Description                 *string               `json:"description,omitempty"`
	DependsOn                   *[]ActivityDependency `json:"dependsOn,omitempty"`
	Type                        TypeActivity          `json:"type,omitempty"`
	*WaitActivityTypeProperties `json:"typeProperties,omitempty"`
}

// MarshalJSON is the custom marshaler for WaitActivity.
func (wa WaitActivity) MarshalJSON() ([]byte, error) {
	wa.Type = TypeWait
	type Alias WaitActivity
	return json.Marshal(&struct {
		Alias
	}{
		Alias: (Alias)(wa),
	})
}

// AsUntilActivity is the ControlActivity implementation for WaitActivity.
func (wa WaitActivity) AsUntilActivity() (*UntilActivity, bool) {
	return nil, false
}

// AsWaitActivity is the ControlActivity implementation for WaitActivity.
func (wa WaitActivity) AsWaitActivity() (*WaitActivity, bool) {
	return &wa, true
}

// AsForEachActivity is the ControlActivity implementation for WaitActivity.
func (wa WaitActivity) AsForEachActivity() (*ForEachActivity, bool) {
	return nil, false
}

// AsIfConditionActivity is the ControlActivity implementation for WaitActivity.
func (wa WaitActivity) AsIfConditionActivity() (*IfConditionActivity, bool) {
	return nil, false
}

// AsExecutePipelineActivity is the ControlActivity implementation for WaitActivity.
func (wa WaitActivity) AsExecutePipelineActivity() (*ExecutePipelineActivity, bool) {
	return nil, false
}

// AsDataLakeAnalyticsUSQLActivity is the ControlActivity implementation for WaitActivity.
func (wa WaitActivity) AsDataLakeAnalyticsUSQLActivity() (*DataLakeAnalyticsUSQLActivity, bool) {
	return nil, false
}

// AsAzureMLUpdateResourceActivity is the ControlActivity implementation for WaitActivity.
func (wa WaitActivity) AsAzureMLUpdateResourceActivity() (*AzureMLUpdateResourceActivity, bool) {
	return nil, false
}

// AsAzureMLBatchExecutionActivity is the ControlActivity implementation for WaitActivity.
func (wa WaitActivity) AsAzureMLBatchExecutionActivity() (*AzureMLBatchExecutionActivity, bool) {
	return nil, false
}

// AsGetMetadataActivity is the ControlActivity implementation for WaitActivity.
func (wa WaitActivity) AsGetMetadataActivity() (*GetMetadataActivity, bool) {
	return nil, false
}

// AsWebActivity is the ControlActivity implementation for WaitActivity.
func (wa WaitActivity) AsWebActivity() (*WebActivity, bool) {
	return nil, false
}

// AsLookupActivity is the ControlActivity implementation for WaitActivity.
func (wa WaitActivity) AsLookupActivity() (*LookupActivity, bool) {
	return nil, false
}

// AsSQLServerStoredProcedureActivity is the ControlActivity implementation for WaitActivity.
func (wa WaitActivity) AsSQLServerStoredProcedureActivity() (*SQLServerStoredProcedureActivity, bool) {
	return nil, false
}

// AsCustomActivity is the ControlActivity implementation for WaitActivity.
func (wa WaitActivity) AsCustomActivity() (*CustomActivity, bool) {
	return nil, false
}

// AsHDInsightSparkActivity is the ControlActivity implementation for WaitActivity.
func (wa WaitActivity) AsHDInsightSparkActivity() (*HDInsightSparkActivity, bool) {
	return nil, false
}

// AsHDInsightStreamingActivity is the ControlActivity implementation for WaitActivity.
func (wa WaitActivity) AsHDInsightStreamingActivity() (*HDInsightStreamingActivity, bool) {
	return nil, false
}

// AsHDInsightMapReduceActivity is the ControlActivity implementation for WaitActivity.
func (wa WaitActivity) AsHDInsightMapReduceActivity() (*HDInsightMapReduceActivity, bool) {
	return nil, false
}

// AsHDInsightPigActivity is the ControlActivity implementation for WaitActivity.
func (wa WaitActivity) AsHDInsightPigActivity() (*HDInsightPigActivity, bool) {
	return nil, false
}

// AsHDInsightHiveActivity is the ControlActivity implementation for WaitActivity.
func (wa WaitActivity) AsHDInsightHiveActivity() (*HDInsightHiveActivity, bool) {
	return nil, false
}

// AsCopyActivity is the ControlActivity implementation for WaitActivity.
func (wa WaitActivity) AsCopyActivity() (*CopyActivity, bool) {
	return nil, false
}

// AsExecutionActivity is the ControlActivity implementation for WaitActivity.
func (wa WaitActivity) AsExecutionActivity() (*ExecutionActivity, bool) {
	return nil, false
}

// AsControlActivity is the ControlActivity implementation for WaitActivity.
func (wa WaitActivity) AsControlActivity() (*ControlActivity, bool) {
	return nil, false
}

// WaitActivityTypeProperties is wait activity properties.
type WaitActivityTypeProperties struct {
	WaitTimeInSeconds *int32 `json:"waitTimeInSeconds,omitempty"`
}

// WebActivity is web activity.
type WebActivity struct {
	Name                       *string                 `json:"name,omitempty"`
	Description                *string                 `json:"description,omitempty"`
	DependsOn                  *[]ActivityDependency   `json:"dependsOn,omitempty"`
	Type                       TypeActivity            `json:"type,omitempty"`
	LinkedServiceName          *LinkedServiceReference `json:"linkedServiceName,omitempty"`
	Policy                     *ActivityPolicy         `json:"policy,omitempty"`
	*WebActivityTypeProperties `json:"typeProperties,omitempty"`
}

// MarshalJSON is the custom marshaler for WebActivity.
func (wa WebActivity) MarshalJSON() ([]byte, error) {
	wa.Type = TypeWebActivity
	type Alias WebActivity
	return json.Marshal(&struct {
		Alias
	}{
		Alias: (Alias)(wa),
	})
}

// AsDataLakeAnalyticsUSQLActivity is the ExecutionActivity implementation for WebActivity.
func (wa WebActivity) AsDataLakeAnalyticsUSQLActivity() (*DataLakeAnalyticsUSQLActivity, bool) {
	return nil, false
}

// AsAzureMLUpdateResourceActivity is the ExecutionActivity implementation for WebActivity.
func (wa WebActivity) AsAzureMLUpdateResourceActivity() (*AzureMLUpdateResourceActivity, bool) {
	return nil, false
}

// AsAzureMLBatchExecutionActivity is the ExecutionActivity implementation for WebActivity.
func (wa WebActivity) AsAzureMLBatchExecutionActivity() (*AzureMLBatchExecutionActivity, bool) {
	return nil, false
}

// AsGetMetadataActivity is the ExecutionActivity implementation for WebActivity.
func (wa WebActivity) AsGetMetadataActivity() (*GetMetadataActivity, bool) {
	return nil, false
}

// AsWebActivity is the ExecutionActivity implementation for WebActivity.
func (wa WebActivity) AsWebActivity() (*WebActivity, bool) {
	return &wa, true
}

// AsLookupActivity is the ExecutionActivity implementation for WebActivity.
func (wa WebActivity) AsLookupActivity() (*LookupActivity, bool) {
	return nil, false
}

// AsSQLServerStoredProcedureActivity is the ExecutionActivity implementation for WebActivity.
func (wa WebActivity) AsSQLServerStoredProcedureActivity() (*SQLServerStoredProcedureActivity, bool) {
	return nil, false
}

// AsCustomActivity is the ExecutionActivity implementation for WebActivity.
func (wa WebActivity) AsCustomActivity() (*CustomActivity, bool) {
	return nil, false
}

// AsHDInsightSparkActivity is the ExecutionActivity implementation for WebActivity.
func (wa WebActivity) AsHDInsightSparkActivity() (*HDInsightSparkActivity, bool) {
	return nil, false
}

// AsHDInsightStreamingActivity is the ExecutionActivity implementation for WebActivity.
func (wa WebActivity) AsHDInsightStreamingActivity() (*HDInsightStreamingActivity, bool) {
	return nil, false
}

// AsHDInsightMapReduceActivity is the ExecutionActivity implementation for WebActivity.
func (wa WebActivity) AsHDInsightMapReduceActivity() (*HDInsightMapReduceActivity, bool) {
	return nil, false
}

// AsHDInsightPigActivity is the ExecutionActivity implementation for WebActivity.
func (wa WebActivity) AsHDInsightPigActivity() (*HDInsightPigActivity, bool) {
	return nil, false
}

// AsHDInsightHiveActivity is the ExecutionActivity implementation for WebActivity.
func (wa WebActivity) AsHDInsightHiveActivity() (*HDInsightHiveActivity, bool) {
	return nil, false
}

// AsCopyActivity is the ExecutionActivity implementation for WebActivity.
func (wa WebActivity) AsCopyActivity() (*CopyActivity, bool) {
	return nil, false
}

// AsExecutionActivity is the ExecutionActivity implementation for WebActivity.
func (wa WebActivity) AsExecutionActivity() (*ExecutionActivity, bool) {
	return nil, false
}

// AsUntilActivity is the ExecutionActivity implementation for WebActivity.
func (wa WebActivity) AsUntilActivity() (*UntilActivity, bool) {
	return nil, false
}

// AsWaitActivity is the ExecutionActivity implementation for WebActivity.
func (wa WebActivity) AsWaitActivity() (*WaitActivity, bool) {
	return nil, false
}

// AsForEachActivity is the ExecutionActivity implementation for WebActivity.
func (wa WebActivity) AsForEachActivity() (*ForEachActivity, bool) {
	return nil, false
}

// AsIfConditionActivity is the ExecutionActivity implementation for WebActivity.
func (wa WebActivity) AsIfConditionActivity() (*IfConditionActivity, bool) {
	return nil, false
}

// AsExecutePipelineActivity is the ExecutionActivity implementation for WebActivity.
func (wa WebActivity) AsExecutePipelineActivity() (*ExecutePipelineActivity, bool) {
	return nil, false
}

// AsControlActivity is the ExecutionActivity implementation for WebActivity.
func (wa WebActivity) AsControlActivity() (*ControlActivity, bool) {
	return nil, false
}

// WebActivityAuthentication is web activity authentication properties.
type WebActivityAuthentication struct {
	Type     *string       `json:"type,omitempty"`
	Pfx      *SecureString `json:"pfx,omitempty"`
	Username *string       `json:"username,omitempty"`
	Password *SecureString `json:"password,omitempty"`
}

// WebActivityTypeProperties is web activity type properties.
type WebActivityTypeProperties struct {
	Method         WebActivityMethod          `json:"method,omitempty"`
	URL            *map[string]interface{}    `json:"url,omitempty"`
	Headers        *map[string]interface{}    `json:"headers,omitempty"`
	Body           *map[string]interface{}    `json:"body,omitempty"`
	Authentication *WebActivityAuthentication `json:"authentication,omitempty"`
	Datasets       *[]DatasetReference        `json:"datasets,omitempty"`
	LinkedServices *[]LinkedServiceReference  `json:"linkedServices,omitempty"`
}

// WebAnonymousAuthentication is a WebLinkedService that uses anonymous authentication to communicate with an HTTP
// endpoint.
type WebAnonymousAuthentication struct {
	URL                *map[string]interface{} `json:"url,omitempty"`
	AuthenticationType AuthenticationType      `json:"authenticationType,omitempty"`
}

// MarshalJSON is the custom marshaler for WebAnonymousAuthentication.
func (waa WebAnonymousAuthentication) MarshalJSON() ([]byte, error) {
	waa.AuthenticationType = AuthenticationTypeAnonymous
	type Alias WebAnonymousAuthentication
	return json.Marshal(&struct {
		Alias
	}{
		Alias: (Alias)(waa),
	})
}

// AsWebClientCertificateAuthentication is the WebLinkedServiceTypeProperties implementation for WebAnonymousAuthentication.
func (waa WebAnonymousAuthentication) AsWebClientCertificateAuthentication() (*WebClientCertificateAuthentication, bool) {
	return nil, false
}

// AsWebBasicAuthentication is the WebLinkedServiceTypeProperties implementation for WebAnonymousAuthentication.
func (waa WebAnonymousAuthentication) AsWebBasicAuthentication() (*WebBasicAuthentication, bool) {
	return nil, false
}

// AsWebAnonymousAuthentication is the WebLinkedServiceTypeProperties implementation for WebAnonymousAuthentication.
func (waa WebAnonymousAuthentication) AsWebAnonymousAuthentication() (*WebAnonymousAuthentication, bool) {
	return &waa, true
}

// WebBasicAuthentication is a WebLinkedService that uses basic authentication to communicate with an HTTP endpoint.
type WebBasicAuthentication struct {
	URL                *map[string]interface{} `json:"url,omitempty"`
	AuthenticationType AuthenticationType      `json:"authenticationType,omitempty"`
	Username           *map[string]interface{} `json:"username,omitempty"`
	Password           *SecureString           `json:"password,omitempty"`
}

// MarshalJSON is the custom marshaler for WebBasicAuthentication.
func (wba WebBasicAuthentication) MarshalJSON() ([]byte, error) {
	wba.AuthenticationType = AuthenticationTypeBasic
	type Alias WebBasicAuthentication
	return json.Marshal(&struct {
		Alias
	}{
		Alias: (Alias)(wba),
	})
}

// AsWebClientCertificateAuthentication is the WebLinkedServiceTypeProperties implementation for WebBasicAuthentication.
func (wba WebBasicAuthentication) AsWebClientCertificateAuthentication() (*WebClientCertificateAuthentication, bool) {
	return nil, false
}

// AsWebBasicAuthentication is the WebLinkedServiceTypeProperties implementation for WebBasicAuthentication.
func (wba WebBasicAuthentication) AsWebBasicAuthentication() (*WebBasicAuthentication, bool) {
	return &wba, true
}

// AsWebAnonymousAuthentication is the WebLinkedServiceTypeProperties implementation for WebBasicAuthentication.
func (wba WebBasicAuthentication) AsWebAnonymousAuthentication() (*WebAnonymousAuthentication, bool) {
	return nil, false
}

// WebClientCertificateAuthentication is a WebLinkedService that uses client certificate based authentication to
// communicate with an HTTP endpoint. This scheme follows mutual authentication; the server must also provide valid
// credentials to the client.
type WebClientCertificateAuthentication struct {
	URL                *map[string]interface{} `json:"url,omitempty"`
	AuthenticationType AuthenticationType      `json:"authenticationType,omitempty"`
	Pfx                *SecureString           `json:"pfx,omitempty"`
	Password           *SecureString           `json:"password,omitempty"`
}

// MarshalJSON is the custom marshaler for WebClientCertificateAuthentication.
func (wcca WebClientCertificateAuthentication) MarshalJSON() ([]byte, error) {
	wcca.AuthenticationType = AuthenticationTypeClientCertificate
	type Alias WebClientCertificateAuthentication
	return json.Marshal(&struct {
		Alias
	}{
		Alias: (Alias)(wcca),
	})
}

// AsWebClientCertificateAuthentication is the WebLinkedServiceTypeProperties implementation for WebClientCertificateAuthentication.
func (wcca WebClientCertificateAuthentication) AsWebClientCertificateAuthentication() (*WebClientCertificateAuthentication, bool) {
	return &wcca, true
}

// AsWebBasicAuthentication is the WebLinkedServiceTypeProperties implementation for WebClientCertificateAuthentication.
func (wcca WebClientCertificateAuthentication) AsWebBasicAuthentication() (*WebBasicAuthentication, bool) {
	return nil, false
}

// AsWebAnonymousAuthentication is the WebLinkedServiceTypeProperties implementation for WebClientCertificateAuthentication.
func (wcca WebClientCertificateAuthentication) AsWebAnonymousAuthentication() (*WebAnonymousAuthentication, bool) {
	return nil, false
}

// WebLinkedService is web linked service.
type WebLinkedService struct {
	ConnectVia     *IntegrationRuntimeReference   `json:"connectVia,omitempty"`
	Description    *string                        `json:"description,omitempty"`
	Type           TypeLinkedService              `json:"type,omitempty"`
	TypeProperties WebLinkedServiceTypeProperties `json:"typeProperties,omitempty"`
}

// MarshalJSON is the custom marshaler for WebLinkedService.
func (wls WebLinkedService) MarshalJSON() ([]byte, error) {
	wls.Type = TypeWeb
	type Alias WebLinkedService
	return json.Marshal(&struct {
		Alias
	}{
		Alias: (Alias)(wls),
	})
}

// AsAzureDataLakeAnalyticsLinkedService is the LinkedService implementation for WebLinkedService.
func (wls WebLinkedService) AsAzureDataLakeAnalyticsLinkedService() (*AzureDataLakeAnalyticsLinkedService, bool) {
	return nil, false
}

// AsHDInsightOnDemandLinkedService is the LinkedService implementation for WebLinkedService.
func (wls WebLinkedService) AsHDInsightOnDemandLinkedService() (*HDInsightOnDemandLinkedService, bool) {
	return nil, false
}

// AsSapHanaLinkedService is the LinkedService implementation for WebLinkedService.
func (wls WebLinkedService) AsSapHanaLinkedService() (*SapHanaLinkedService, bool) {
	return nil, false
}

// AsSapBWLinkedService is the LinkedService implementation for WebLinkedService.
func (wls WebLinkedService) AsSapBWLinkedService() (*SapBWLinkedService, bool) {
	return nil, false
}

// AsSftpServerLinkedService is the LinkedService implementation for WebLinkedService.
func (wls WebLinkedService) AsSftpServerLinkedService() (*SftpServerLinkedService, bool) {
	return nil, false
}

// AsFtpServerLinkedService is the LinkedService implementation for WebLinkedService.
func (wls WebLinkedService) AsFtpServerLinkedService() (*FtpServerLinkedService, bool) {
	return nil, false
}

// AsHTTPLinkedService is the LinkedService implementation for WebLinkedService.
func (wls WebLinkedService) AsHTTPLinkedService() (*HTTPLinkedService, bool) {
	return nil, false
}

// AsAzureSearchLinkedService is the LinkedService implementation for WebLinkedService.
func (wls WebLinkedService) AsAzureSearchLinkedService() (*AzureSearchLinkedService, bool) {
	return nil, false
}

// AsCustomDataSourceLinkedService is the LinkedService implementation for WebLinkedService.
func (wls WebLinkedService) AsCustomDataSourceLinkedService() (*CustomDataSourceLinkedService, bool) {
	return nil, false
}

// AsAmazonRedshiftLinkedService is the LinkedService implementation for WebLinkedService.
func (wls WebLinkedService) AsAmazonRedshiftLinkedService() (*AmazonRedshiftLinkedService, bool) {
	return nil, false
}

// AsAmazonS3LinkedService is the LinkedService implementation for WebLinkedService.
func (wls WebLinkedService) AsAmazonS3LinkedService() (*AmazonS3LinkedService, bool) {
	return nil, false
}

// AsSalesforceLinkedService is the LinkedService implementation for WebLinkedService.
func (wls WebLinkedService) AsSalesforceLinkedService() (*SalesforceLinkedService, bool) {
	return nil, false
}

// AsAzureDataLakeStoreLinkedService is the LinkedService implementation for WebLinkedService.
func (wls WebLinkedService) AsAzureDataLakeStoreLinkedService() (*AzureDataLakeStoreLinkedService, bool) {
	return nil, false
}

// AsMongoDbLinkedService is the LinkedService implementation for WebLinkedService.
func (wls WebLinkedService) AsMongoDbLinkedService() (*MongoDbLinkedService, bool) {
	return nil, false
}

// AsCassandraLinkedService is the LinkedService implementation for WebLinkedService.
func (wls WebLinkedService) AsCassandraLinkedService() (*CassandraLinkedService, bool) {
	return nil, false
}

// AsWebLinkedService is the LinkedService implementation for WebLinkedService.
func (wls WebLinkedService) AsWebLinkedService() (*WebLinkedService, bool) {
	return &wls, true
}

// AsODataLinkedService is the LinkedService implementation for WebLinkedService.
func (wls WebLinkedService) AsODataLinkedService() (*ODataLinkedService, bool) {
	return nil, false
}

// AsHdfsLinkedService is the LinkedService implementation for WebLinkedService.
func (wls WebLinkedService) AsHdfsLinkedService() (*HdfsLinkedService, bool) {
	return nil, false
}

// AsOdbcLinkedService is the LinkedService implementation for WebLinkedService.
func (wls WebLinkedService) AsOdbcLinkedService() (*OdbcLinkedService, bool) {
	return nil, false
}

// AsAzureMLLinkedService is the LinkedService implementation for WebLinkedService.
func (wls WebLinkedService) AsAzureMLLinkedService() (*AzureMLLinkedService, bool) {
	return nil, false
}

// AsTeradataLinkedService is the LinkedService implementation for WebLinkedService.
func (wls WebLinkedService) AsTeradataLinkedService() (*TeradataLinkedService, bool) {
	return nil, false
}

// AsDb2LinkedService is the LinkedService implementation for WebLinkedService.
func (wls WebLinkedService) AsDb2LinkedService() (*Db2LinkedService, bool) {
	return nil, false
}

// AsSybaseLinkedService is the LinkedService implementation for WebLinkedService.
func (wls WebLinkedService) AsSybaseLinkedService() (*SybaseLinkedService, bool) {
	return nil, false
}

// AsPostgreSQLLinkedService is the LinkedService implementation for WebLinkedService.
func (wls WebLinkedService) AsPostgreSQLLinkedService() (*PostgreSQLLinkedService, bool) {
	return nil, false
}

// AsMySQLLinkedService is the LinkedService implementation for WebLinkedService.
func (wls WebLinkedService) AsMySQLLinkedService() (*MySQLLinkedService, bool) {
	return nil, false
}

// AsOracleLinkedService is the LinkedService implementation for WebLinkedService.
func (wls WebLinkedService) AsOracleLinkedService() (*OracleLinkedService, bool) {
	return nil, false
}

// AsFileServerLinkedService is the LinkedService implementation for WebLinkedService.
func (wls WebLinkedService) AsFileServerLinkedService() (*FileServerLinkedService, bool) {
	return nil, false
}

// AsHDInsightLinkedService is the LinkedService implementation for WebLinkedService.
func (wls WebLinkedService) AsHDInsightLinkedService() (*HDInsightLinkedService, bool) {
	return nil, false
}

// AsDynamicsLinkedService is the LinkedService implementation for WebLinkedService.
func (wls WebLinkedService) AsDynamicsLinkedService() (*DynamicsLinkedService, bool) {
	return nil, false
}

// AsCosmosDbLinkedService is the LinkedService implementation for WebLinkedService.
func (wls WebLinkedService) AsCosmosDbLinkedService() (*CosmosDbLinkedService, bool) {
	return nil, false
}

// AsAzureKeyVaultLinkedService is the LinkedService implementation for WebLinkedService.
func (wls WebLinkedService) AsAzureKeyVaultLinkedService() (*AzureKeyVaultLinkedService, bool) {
	return nil, false
}

// AsAzureBatchLinkedService is the LinkedService implementation for WebLinkedService.
func (wls WebLinkedService) AsAzureBatchLinkedService() (*AzureBatchLinkedService, bool) {
	return nil, false
}

// AsAzureSQLDatabaseLinkedService is the LinkedService implementation for WebLinkedService.
func (wls WebLinkedService) AsAzureSQLDatabaseLinkedService() (*AzureSQLDatabaseLinkedService, bool) {
	return nil, false
}

// AsSQLServerLinkedService is the LinkedService implementation for WebLinkedService.
func (wls WebLinkedService) AsSQLServerLinkedService() (*SQLServerLinkedService, bool) {
	return nil, false
}

// AsAzureSQLDWLinkedService is the LinkedService implementation for WebLinkedService.
func (wls WebLinkedService) AsAzureSQLDWLinkedService() (*AzureSQLDWLinkedService, bool) {
	return nil, false
}

// AsAzureStorageLinkedService is the LinkedService implementation for WebLinkedService.
func (wls WebLinkedService) AsAzureStorageLinkedService() (*AzureStorageLinkedService, bool) {
	return nil, false
}

// UnmarshalJSON is the custom unmarshaler for WebLinkedService struct.
func (wls *WebLinkedService) UnmarshalJSON(body []byte) error {
	var m map[string]*json.RawMessage
	err := json.Unmarshal(body, &m)
	if err != nil {
		return err
	}
	var v *json.RawMessage

	v = m["typeProperties"]
	if v != nil {
		typeProperties, err := unmarshalWebLinkedServiceTypeProperties(*m["typeProperties"])
		if err != nil {
			return err
		}
		wls.TypeProperties = typeProperties
	}

	v = m["connectVia"]
	if v != nil {
		var connectVia IntegrationRuntimeReference
		err = json.Unmarshal(*m["connectVia"], &connectVia)
		if err != nil {
			return err
		}
		wls.ConnectVia = &connectVia
	}

	v = m["description"]
	if v != nil {
		var description string
		err = json.Unmarshal(*m["description"], &description)
		if err != nil {
			return err
		}
		wls.Description = &description
	}

	v = m["type"]
	if v != nil {
		var typeVar TypeLinkedService
		err = json.Unmarshal(*m["type"], &typeVar)
		if err != nil {
			return err
		}
		wls.Type = typeVar
	}

	return nil
}

// WebLinkedServiceTypeProperties is base definition of WebLinkedServiceTypeProperties, this typeProperties is
// polymorphic based on authenticationType, so not flattened in SDK models.
type WebLinkedServiceTypeProperties interface {
	AsWebClientCertificateAuthentication() (*WebClientCertificateAuthentication, bool)
	AsWebBasicAuthentication() (*WebBasicAuthentication, bool)
	AsWebAnonymousAuthentication() (*WebAnonymousAuthentication, bool)
}

func unmarshalWebLinkedServiceTypeProperties(body []byte) (WebLinkedServiceTypeProperties, error) {
	var m map[string]interface{}
	err := json.Unmarshal(body, &m)
	if err != nil {
		return nil, err
	}

	switch m["authenticationType"] {
	case string(AuthenticationTypeClientCertificate):
		var wcca WebClientCertificateAuthentication
		err := json.Unmarshal(body, &wcca)
		return wcca, err
	case string(AuthenticationTypeBasic):
		var wba WebBasicAuthentication
		err := json.Unmarshal(body, &wba)
		return wba, err
	case string(AuthenticationTypeAnonymous):
		var waa WebAnonymousAuthentication
		err := json.Unmarshal(body, &waa)
		return waa, err
	default:
		return nil, errors.New("Unsupported type")
	}
}
func unmarshalWebLinkedServiceTypePropertiesArray(body []byte) ([]WebLinkedServiceTypeProperties, error) {
	var rawMessages []*json.RawMessage
	err := json.Unmarshal(body, &rawMessages)
	if err != nil {
		return nil, err
	}

	wlstpArray := make([]WebLinkedServiceTypeProperties, len(rawMessages))

	for index, rawMessage := range rawMessages {
		wlstp, err := unmarshalWebLinkedServiceTypeProperties(*rawMessage)
		if err != nil {
			return nil, err
		}
		wlstpArray[index] = wlstp
	}
	return wlstpArray, nil
}

// WebSource is a copy activity source for web page table.
type WebSource struct {
	SourceRetryCount *map[string]interface{} `json:"sourceRetryCount,omitempty"`
	SourceRetryWait  *map[string]interface{} `json:"sourceRetryWait,omitempty"`
	Type             TypeCopySource          `json:"type,omitempty"`
}

// MarshalJSON is the custom marshaler for WebSource.
func (ws WebSource) MarshalJSON() ([]byte, error) {
	ws.Type = TypeWebSource
	type Alias WebSource
	return json.Marshal(&struct {
		Alias
	}{
		Alias: (Alias)(ws),
	})
}

// AsAmazonRedshiftSource is the CopySource implementation for WebSource.
func (ws WebSource) AsAmazonRedshiftSource() (*AmazonRedshiftSource, bool) {
	return nil, false
}

// AsHTTPSource is the CopySource implementation for WebSource.
func (ws WebSource) AsHTTPSource() (*HTTPSource, bool) {
	return nil, false
}

// AsAzureDataLakeStoreSource is the CopySource implementation for WebSource.
func (ws WebSource) AsAzureDataLakeStoreSource() (*AzureDataLakeStoreSource, bool) {
	return nil, false
}

// AsMongoDbSource is the CopySource implementation for WebSource.
func (ws WebSource) AsMongoDbSource() (*MongoDbSource, bool) {
	return nil, false
}

// AsCassandraSource is the CopySource implementation for WebSource.
func (ws WebSource) AsCassandraSource() (*CassandraSource, bool) {
	return nil, false
}

// AsWebSource is the CopySource implementation for WebSource.
func (ws WebSource) AsWebSource() (*WebSource, bool) {
	return &ws, true
}

// AsOracleSource is the CopySource implementation for WebSource.
func (ws WebSource) AsOracleSource() (*OracleSource, bool) {
	return nil, false
}

// AsHdfsSource is the CopySource implementation for WebSource.
func (ws WebSource) AsHdfsSource() (*HdfsSource, bool) {
	return nil, false
}

// AsFileSystemSource is the CopySource implementation for WebSource.
func (ws WebSource) AsFileSystemSource() (*FileSystemSource, bool) {
	return nil, false
}

// AsSQLDWSource is the CopySource implementation for WebSource.
func (ws WebSource) AsSQLDWSource() (*SQLDWSource, bool) {
	return nil, false
}

// AsSQLSource is the CopySource implementation for WebSource.
func (ws WebSource) AsSQLSource() (*SQLSource, bool) {
	return nil, false
}

// AsRelationalSource is the CopySource implementation for WebSource.
func (ws WebSource) AsRelationalSource() (*RelationalSource, bool) {
	return nil, false
}

// AsDynamicsSource is the CopySource implementation for WebSource.
func (ws WebSource) AsDynamicsSource() (*DynamicsSource, bool) {
	return nil, false
}

// AsDocumentDbCollectionSource is the CopySource implementation for WebSource.
func (ws WebSource) AsDocumentDbCollectionSource() (*DocumentDbCollectionSource, bool) {
	return nil, false
}

// AsBlobSource is the CopySource implementation for WebSource.
func (ws WebSource) AsBlobSource() (*BlobSource, bool) {
	return nil, false
}

// AsAzureTableSource is the CopySource implementation for WebSource.
func (ws WebSource) AsAzureTableSource() (*AzureTableSource, bool) {
	return nil, false
}

// WebTableDataset is the dataset points to a HTML table in the web page.
type WebTableDataset struct {
	Description                    *string                             `json:"description,omitempty"`
	Structure                      *map[string]interface{}             `json:"structure,omitempty"`
	LinkedServiceName              *LinkedServiceReference             `json:"linkedServiceName,omitempty"`
	Parameters                     *map[string]*ParameterSpecification `json:"parameters,omitempty"`
	Type                           TypeDataset                         `json:"type,omitempty"`
	*WebTableDatasetTypeProperties `json:"typeProperties,omitempty"`
}

// MarshalJSON is the custom marshaler for WebTableDataset.
func (wtd WebTableDataset) MarshalJSON() ([]byte, error) {
	wtd.Type = TypeWebTable
	type Alias WebTableDataset
	return json.Marshal(&struct {
		Alias
	}{
		Alias: (Alias)(wtd),
	})
}

// AsHTTPDataset is the Dataset implementation for WebTableDataset.
func (wtd WebTableDataset) AsHTTPDataset() (*HTTPDataset, bool) {
	return nil, false
}

// AsAzureSearchIndexDataset is the Dataset implementation for WebTableDataset.
func (wtd WebTableDataset) AsAzureSearchIndexDataset() (*AzureSearchIndexDataset, bool) {
	return nil, false
}

// AsWebTableDataset is the Dataset implementation for WebTableDataset.
func (wtd WebTableDataset) AsWebTableDataset() (*WebTableDataset, bool) {
	return &wtd, true
}

// AsSQLServerTableDataset is the Dataset implementation for WebTableDataset.
func (wtd WebTableDataset) AsSQLServerTableDataset() (*SQLServerTableDataset, bool) {
	return nil, false
}

// AsRelationalTableDataset is the Dataset implementation for WebTableDataset.
func (wtd WebTableDataset) AsRelationalTableDataset() (*RelationalTableDataset, bool) {
	return nil, false
}

// AsOracleTableDataset is the Dataset implementation for WebTableDataset.
func (wtd WebTableDataset) AsOracleTableDataset() (*OracleTableDataset, bool) {
	return nil, false
}

// AsODataResourceDataset is the Dataset implementation for WebTableDataset.
func (wtd WebTableDataset) AsODataResourceDataset() (*ODataResourceDataset, bool) {
	return nil, false
}

// AsMongoDbCollectionDataset is the Dataset implementation for WebTableDataset.
func (wtd WebTableDataset) AsMongoDbCollectionDataset() (*MongoDbCollectionDataset, bool) {
	return nil, false
}

// AsFileShareDataset is the Dataset implementation for WebTableDataset.
func (wtd WebTableDataset) AsFileShareDataset() (*FileShareDataset, bool) {
	return nil, false
}

// AsAzureDataLakeStoreDataset is the Dataset implementation for WebTableDataset.
func (wtd WebTableDataset) AsAzureDataLakeStoreDataset() (*AzureDataLakeStoreDataset, bool) {
	return nil, false
}

// AsDynamicsEntityDataset is the Dataset implementation for WebTableDataset.
func (wtd WebTableDataset) AsDynamicsEntityDataset() (*DynamicsEntityDataset, bool) {
	return nil, false
}

// AsDocumentDbCollectionDataset is the Dataset implementation for WebTableDataset.
func (wtd WebTableDataset) AsDocumentDbCollectionDataset() (*DocumentDbCollectionDataset, bool) {
	return nil, false
}

// AsCustomDataset is the Dataset implementation for WebTableDataset.
func (wtd WebTableDataset) AsCustomDataset() (*CustomDataset, bool) {
	return nil, false
}

// AsCassandraTableDataset is the Dataset implementation for WebTableDataset.
func (wtd WebTableDataset) AsCassandraTableDataset() (*CassandraTableDataset, bool) {
	return nil, false
}

// AsAzureSQLDWTableDataset is the Dataset implementation for WebTableDataset.
func (wtd WebTableDataset) AsAzureSQLDWTableDataset() (*AzureSQLDWTableDataset, bool) {
	return nil, false
}

// AsAzureSQLTableDataset is the Dataset implementation for WebTableDataset.
func (wtd WebTableDataset) AsAzureSQLTableDataset() (*AzureSQLTableDataset, bool) {
	return nil, false
}

// AsAzureTableDataset is the Dataset implementation for WebTableDataset.
func (wtd WebTableDataset) AsAzureTableDataset() (*AzureTableDataset, bool) {
	return nil, false
}

// AsAzureBlobDataset is the Dataset implementation for WebTableDataset.
func (wtd WebTableDataset) AsAzureBlobDataset() (*AzureBlobDataset, bool) {
	return nil, false
}

// AsAmazonS3Dataset is the Dataset implementation for WebTableDataset.
func (wtd WebTableDataset) AsAmazonS3Dataset() (*AmazonS3Dataset, bool) {
	return nil, false
}

// WebTableDatasetTypeProperties is web table dataset properties.
type WebTableDatasetTypeProperties struct {
	Index *map[string]interface{} `json:"index,omitempty"`
	Path  *map[string]interface{} `json:"path,omitempty"`
}
