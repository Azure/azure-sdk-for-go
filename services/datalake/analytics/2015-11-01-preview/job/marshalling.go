package job

// Copyright (c) Microsoft and contributors.  All rights reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
// http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
//
// See the License for the specific language governing permissions and
// limitations under the License.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

import (
	"encoding/xml"
	"reflect"
	"time"
	"unsafe"
)

const (
	rfc3339Format = "2006-01-02T15:04:05.0000000Z07:00"
)

// used to convert times from UTC to GMT before sending across the wire
var gmt = time.FixedZone("GMT", 0)

// internal type used for marshalling time in RFC1123 format
type timeRFC1123 struct {
	time.Time
}

// MarshalText implements the encoding.TextMarshaler interface for timeRFC1123.
func (t timeRFC1123) MarshalText() ([]byte, error) {
	return []byte(t.Format(time.RFC1123)), nil
}

// UnmarshalText implements the encoding.TextUnmarshaler interface for timeRFC1123.
func (t *timeRFC1123) UnmarshalText(data []byte) (err error) {
	t.Time, err = time.Parse(time.RFC1123, string(data))
	return
}

// internal type used for marshalling time in RFC3339 format
type timeRFC3339 struct {
	time.Time
}

// MarshalText implements the encoding.TextMarshaler interface for timeRFC3339.
func (t timeRFC3339) MarshalText() ([]byte, error) {
	return []byte(t.Format(rfc3339Format)), nil
}

// UnmarshalText implements the encoding.TextUnmarshaler interface for timeRFC3339.
func (t *timeRFC3339) UnmarshalText(data []byte) (err error) {
	t.Time, err = time.Parse(rfc3339Format, string(data))
	return
}

// internal type used for marshalling
type statistics struct {
	LastUpdateTimeUtc *timeRFC3339            `json:"lastUpdateTimeUtc,omitempty"`
	Stages            []StatisticsVertexStage `json:"stages,omitempty"`
}

// MarshalXML implements the xml.Marshaler interface for Statistics.
func (s Statistics) MarshalXML(e *xml.Encoder, start xml.StartElement) error {
	if reflect.TypeOf((*Statistics)(nil)).Elem().Size() != reflect.TypeOf((*statistics)(nil)).Elem().Size() {
		panic("size mismatch between Statistics and statistics")
	}
	s2 := (*statistics)(unsafe.Pointer(&s))
	return e.EncodeElement(*s2, start)
}

// UnmarshalXML implements the xml.Unmarshaler interface for Statistics.
func (s *Statistics) UnmarshalXML(d *xml.Decoder, start xml.StartElement) error {
	if reflect.TypeOf((*Statistics)(nil)).Elem().Size() != reflect.TypeOf((*statistics)(nil)).Elem().Size() {
		panic("size mismatch between Statistics and statistics")
	}
	s2 := (*statistics)(unsafe.Pointer(s))
	return d.DecodeElement(s2, &start)
}

// internal type used for marshalling
type stateAuditRecord struct {
	NewState        *string      `json:"newState,omitempty"`
	TimeStamp       *timeRFC3339 `json:"timeStamp,omitempty"`
	RequestedByUser *string      `json:"requestedByUser,omitempty"`
	Details         *string      `json:"details,omitempty"`
}

// MarshalXML implements the xml.Marshaler interface for StateAuditRecord.
func (sar StateAuditRecord) MarshalXML(e *xml.Encoder, start xml.StartElement) error {
	if reflect.TypeOf((*StateAuditRecord)(nil)).Elem().Size() != reflect.TypeOf((*stateAuditRecord)(nil)).Elem().Size() {
		panic("size mismatch between StateAuditRecord and stateAuditRecord")
	}
	sar2 := (*stateAuditRecord)(unsafe.Pointer(&sar))
	return e.EncodeElement(*sar2, start)
}

// UnmarshalXML implements the xml.Unmarshaler interface for StateAuditRecord.
func (sar *StateAuditRecord) UnmarshalXML(d *xml.Decoder, start xml.StartElement) error {
	if reflect.TypeOf((*StateAuditRecord)(nil)).Elem().Size() != reflect.TypeOf((*stateAuditRecord)(nil)).Elem().Size() {
		panic("size mismatch between StateAuditRecord and stateAuditRecord")
	}
	sar2 := (*stateAuditRecord)(unsafe.Pointer(sar))
	return d.DecodeElement(sar2, &start)
}

// internal type used for marshalling
type information struct {
	JobID               *uuid.UUID         `json:"jobId,omitempty"`
	Name                string             `json:"name,omitempty"`
	Type                Type               `json:"type,omitempty"`
	Submitter           *string            `json:"submitter,omitempty"`
	ErrorMessage        []ErrorDetails     `json:"errorMessage,omitempty"`
	DegreeOfParallelism *int32             `json:"degreeOfParallelism,omitempty"`
	Priority            *int32             `json:"priority,omitempty"`
	SubmitTime          *timeRFC3339       `json:"submitTime,omitempty"`
	StartTime           *timeRFC3339       `json:"startTime,omitempty"`
	EndTime             *timeRFC3339       `json:"endTime,omitempty"`
	State               StateType          `json:"state,omitempty"`
	Result              ResultType         `json:"result,omitempty"`
	StateAuditRecords   []StateAuditRecord `json:"stateAuditRecords,omitempty"`
	Properties          Properties         `json:"properties,omitempty"`
}

// MarshalXML implements the xml.Marshaler interface for Information.
func (i Information) MarshalXML(e *xml.Encoder, start xml.StartElement) error {
	if reflect.TypeOf((*Information)(nil)).Elem().Size() != reflect.TypeOf((*information)(nil)).Elem().Size() {
		panic("size mismatch between Information and information")
	}
	i2 := (*information)(unsafe.Pointer(&i))
	return e.EncodeElement(*i2, start)
}

// UnmarshalXML implements the xml.Unmarshaler interface for Information.
func (i *Information) UnmarshalXML(d *xml.Decoder, start xml.StartElement) error {
	if reflect.TypeOf((*Information)(nil)).Elem().Size() != reflect.TypeOf((*information)(nil)).Elem().Size() {
		panic("size mismatch between Information and information")
	}
	i2 := (*information)(unsafe.Pointer(i))
	return d.DecodeElement(i2, &start)
}
