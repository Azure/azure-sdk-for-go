package catalog

// Copyright (c) Microsoft and contributors.  All rights reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
// http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
//
// See the License for the specific language governing permissions and
// limitations under the License.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

import (
	uuid "github.com/satori/go.uuid"
	"net/http"
	"time"
)

// Marker represents an opaque value used in paged responses.
type Marker struct {
	val *string
}

// NotDone returns true if the list enumeration should be started or is not yet complete. Specifically, NotDone returns true
// for a just-initialized (zero value) Marker indicating that you should make an initial request to get a result portion from
// the service. NotDone also returns true whenever the service returns an interim result portion. NotDone returns false only
// after the service has returned the final result portion.
func (m Marker) NotDone() bool {
	return m.val == nil || *m.val != ""
}

// UnmarshalXML implements the xml.Unmarshaler interface for Marker.
func (m *Marker) UnmarshalXML(d *xml.Decoder, start xml.StartElement) error {
	var out string
	err := d.DecodeElement(&out, &start)
	m.val = &out
	return err
}

// ACLType enumerates the values for acl type.
type ACLType string

const (
	// ACLGroup ...
	ACLGroup ACLType = "Group"
	// ACLGroupObj ...
	ACLGroupObj ACLType = "GroupObj"
	// ACLNone represents an empty ACLType.
	ACLNone ACLType = ""
	// ACLOther ...
	ACLOther ACLType = "Other"
	// ACLUser ...
	ACLUser ACLType = "User"
	// ACLUserObj ...
	ACLUserObj ACLType = "UserObj"
)

// FileType enumerates the values for file type.
type FileType string

const (
	// FileAssembly ...
	FileAssembly FileType = "Assembly"
	// FileNodeploy ...
	FileNodeploy FileType = "Nodeploy"
	// FileNone represents an empty FileType.
	FileNone FileType = ""
	// FileResource ...
	FileResource FileType = "Resource"
)

// PermissionType enumerates the values for permission type.
type PermissionType string

const (
	// PermissionAll ...
	PermissionAll PermissionType = "All"
	// PermissionAlter ...
	PermissionAlter PermissionType = "Alter"
	// PermissionCreate ...
	PermissionCreate PermissionType = "Create"
	// PermissionDrop ...
	PermissionDrop PermissionType = "Drop"
	// PermissionNone ...
	PermissionNone PermissionType = "None"
	// PermissionNone represents an empty PermissionType.
	PermissionNone PermissionType = ""
	// PermissionUse ...
	PermissionUse PermissionType = "Use"
	// PermissionWrite ...
	PermissionWrite PermissionType = "Write"
)

// ACL - A Data Lake Analytics catalog access control list (ACL) entry.
type ACL struct {
	// AceType - the access control list (ACL) entry type. UserObj and GroupObj denote the owning user and group, respectively. Possible values include: 'UserObj', 'GroupObj', 'Other', 'User', 'Group', 'None'
	AceType ACLType `json:"aceType,omitempty"`
	// PrincipalID - the Azure AD object ID of the user or group being specified in the access control list (ACL) entry.
	PrincipalID *uuid.UUID `json:"principalId,omitempty"`
	// Permission - the permission type of the access control list (ACL) entry. Possible values include: 'None', 'Use', 'Create', 'Drop', 'Alter', 'Write', 'All', 'None'
	Permission PermissionType `json:"permission,omitempty"`
}

// ACLCreateOrUpdateParameters - The parameters used to create or update an access control list (ACL) entry.
type ACLCreateOrUpdateParameters struct {
	// AceType - the access control list (ACL) entry type. UserObj and GroupObj denote the owning user and group, respectively. Possible values include: 'UserObj', 'GroupObj', 'Other', 'User', 'Group', 'None'
	AceType ACLType `json:"aceType,omitempty"`
	// PrincipalID - the Azure AD object ID of the user or group being specified in the access control list (ACL) entry.
	PrincipalID uuid.UUID `json:"principalId,omitempty"`
	// Permission - the permission type of the access control list (ACL) entry. Possible values include: 'None', 'Use', 'Create', 'Drop', 'Alter', 'Write', 'All', 'None'
	Permission PermissionType `json:"permission,omitempty"`
}

// ACLDeleteParameters - The parameters used to delete an access control list (ACL) entry.
type ACLDeleteParameters struct {
	// AceType - the access control list (ACL) entry type. UserObj and GroupObj denote the owning user and group, respectively. Possible values include: 'UserObj', 'GroupObj', 'Other', 'User', 'Group', 'None'
	AceType ACLType `json:"aceType,omitempty"`
	// PrincipalID - the Azure AD object ID of the user or group being specified in the access control list (ACL) entry.
	PrincipalID uuid.UUID `json:"principalId,omitempty"`
}

// ACLList - A Data Lake Analytics catalog access control list (ACL).
type ACLList struct {
	rawResponse *http.Response
	// NextLink - the link to the next page of results.
	NextLink *string `json:"nextLink,omitempty"`
	// Value - the access control list (ACL).
	Value []ACL `json:"value,omitempty"`
}

// Response returns the raw HTTP response object.
func (al ACLList) Response() *http.Response {
	return al.rawResponse
}

// StatusCode returns the HTTP status code of the response, e.g. 200.
func (al ACLList) StatusCode() int {
	return al.rawResponse.StatusCode
}

// Status returns the HTTP status message of the response, e.g. "200 OK".
func (al ACLList) Status() string {
	return al.rawResponse.Status
}

// DataLakeAnalyticsCatalogCredentialCreateParameters - Data Lake Analytics catalog credential creation parameters.
type DataLakeAnalyticsCatalogCredentialCreateParameters struct {
	// Password - the password for the credential and user with access to the data source.
	Password string `json:"password,omitempty"`
	// URI - the URI identifier for the data source this credential can connect to in the format <hostname>:<port>
	URI string `json:"uri,omitempty"`
	// UserID - the object identifier for the user associated with this credential with access to the data source.
	UserID string `json:"userId,omitempty"`
}

// DataLakeAnalyticsCatalogCredentialDeleteParameters - Data Lake Analytics catalog credential deletion parameters.
type DataLakeAnalyticsCatalogCredentialDeleteParameters struct {
	// Password - the current password for the credential and user with access to the data source. This is required if the requester is not the account owner.
	Password *string `json:"password,omitempty"`
}

// DataLakeAnalyticsCatalogCredentialUpdateParameters - Data Lake Analytics catalog credential update parameters.
type DataLakeAnalyticsCatalogCredentialUpdateParameters struct {
	// Password - the current password for the credential and user with access to the data source. This is required if the requester is not the account owner.
	Password *string `json:"password,omitempty"`
	// NewPassword - the new password for the credential and user with access to the data source.
	NewPassword *string `json:"newPassword,omitempty"`
	// URI - the URI identifier for the data source this credential can connect to in the format <hostname>:<port>
	URI *string `json:"uri,omitempty"`
	// UserID - the object identifier for the user associated with this credential with access to the data source.
	UserID *string `json:"userId,omitempty"`
}

// DataLakeAnalyticsCatalogSecretCreateOrUpdateParameters - Data Lake Analytics catalog secret creation and update
// parameters. This is deprecated and will be removed in the next release. Please use
// DataLakeAnalyticsCatalogCredentialCreateOrUpdateParameters instead.
type DataLakeAnalyticsCatalogSecretCreateOrUpdateParameters struct {
	// Password - the password for the secret to pass in
	Password string `json:"password,omitempty"`
	// URI - the URI identifier for the secret in the format <hostname>:<port>
	URI *string `json:"uri,omitempty"`
}

// DdlName - A Data Lake Analytics DDL name item.
type DdlName struct {
	// FirstPart - the name of the table associated with this database and schema.
	FirstPart *string `json:"firstPart,omitempty"`
	// SecondPart - the name of the table associated with this database and schema.
	SecondPart *string `json:"secondPart,omitempty"`
	// ThirdPart - the name of the table associated with this database and schema.
	ThirdPart *string `json:"thirdPart,omitempty"`
	// Server - the name of the table associated with this database and schema.
	Server *string `json:"server,omitempty"`
}

// EntityID - A Data Lake Analytics catalog entity identifier object.
type EntityID struct {
	// Name - the name of the external table associated with this database, schema and table.
	Name *DdlName `json:"name,omitempty"`
	// Version - the version of the external data source.
	Version *uuid.UUID `json:"version,omitempty"`
}

// ExternalTable - A Data Lake Analytics catalog external table item.
type ExternalTable struct {
	// TableName - the name of the table associated with this database and schema.
	TableName *string `json:"tableName,omitempty"`
	// DataSource - the data source associated with this external table.
	DataSource *EntityID `json:"dataSource,omitempty"`
}

// Item - A Data Lake Analytics catalog item.
type Item struct {
	// ComputeAccountName - the name of the Data Lake Analytics account.
	ComputeAccountName *string `json:"computeAccountName,omitempty"`
	// Version - the version of the catalog item.
	Version *uuid.UUID `json:"version,omitempty"`
}

// ItemList - A Data Lake Analytics catalog item list.
type ItemList struct {
	// NextLink - the link to the next page of results.
	NextLink *string `json:"nextLink,omitempty"`
}

// TypeFieldInfo - A Data Lake Analytics catalog type field information item.
type TypeFieldInfo struct {
	// Name - the name of the field associated with this type.
	Name *string `json:"name,omitempty"`
	// Type - the type of the field.
	Type *string `json:"type,omitempty"`
}

// USQLAssembly - A Data Lake Analytics catalog U-SQL Assembly.
type USQLAssembly struct {
	rawResponse *http.Response
	// ComputeAccountName - the name of the Data Lake Analytics account.
	ComputeAccountName *string `json:"computeAccountName,omitempty"`
	// Version - the version of the catalog item.
	Version *uuid.UUID `json:"version,omitempty"`
	// DatabaseName - the name of the database.
	DatabaseName *string `json:"databaseName,omitempty"`
	// Name - the name of the assembly.
	Name *string `json:"assemblyName,omitempty"`
	// ClrName - the name of the CLR.
	ClrName *string `json:"clrName,omitempty"`
	// IsVisible - the switch indicating if this assembly is visible or not.
	IsVisible *bool `json:"isVisible,omitempty"`
	// IsUserDefined - the switch indicating if this assembly is user defined or not.
	IsUserDefined *bool `json:"isUserDefined,omitempty"`
	// Files - the list of files associated with the assembly
	Files []USQLAssemblyFileInfo `json:"files,omitempty"`
	// Dependencies - the list of dependencies associated with the assembly
	Dependencies []USQLAssemblyDependencyInfo `json:"dependencies,omitempty"`
}

// Response returns the raw HTTP response object.
func (ua USQLAssembly) Response() *http.Response {
	return ua.rawResponse
}

// StatusCode returns the HTTP status code of the response, e.g. 200.
func (ua USQLAssembly) StatusCode() int {
	return ua.rawResponse.StatusCode
}

// Status returns the HTTP status message of the response, e.g. "200 OK".
func (ua USQLAssembly) Status() string {
	return ua.rawResponse.Status
}

// USQLAssemblyClr - A Data Lake Analytics catalog U-SQL assembly CLR item.
type USQLAssemblyClr struct {
	// ComputeAccountName - the name of the Data Lake Analytics account.
	ComputeAccountName *string `json:"computeAccountName,omitempty"`
	// Version - the version of the catalog item.
	Version *uuid.UUID `json:"version,omitempty"`
	// DatabaseName - the name of the database.
	DatabaseName *string `json:"databaseName,omitempty"`
	// Name - the name of the assembly.
	Name *string `json:"assemblyClrName,omitempty"`
	// ClrName - the name of the CLR.
	ClrName *string `json:"clrName,omitempty"`
}

// USQLAssemblyDependencyInfo - A Data Lake Analytics catalog U-SQL dependency information item.
type USQLAssemblyDependencyInfo struct {
	// EntityID - the EntityId of the dependency.
	EntityID *EntityID `json:"entityId,omitempty"`
}

// USQLAssemblyFileInfo - A Data Lake Analytics catalog U-SQL assembly file information item.
type USQLAssemblyFileInfo struct {
	// Type - the assembly file type. Possible values include: 'Assembly', 'Resource', 'Nodeploy', 'None'
	Type FileType `json:"type,omitempty"`
	// OriginalPath - the the original path to the assembly file.
	OriginalPath *string `json:"originalPath,omitempty"`
	// ContentPath - the the content path to the assembly file.
	ContentPath *string `json:"contentPath,omitempty"`
}

// USQLAssemblyList - A Data Lake Analytics catalog U-SQL assembly CLR item list.
type USQLAssemblyList struct {
	rawResponse *http.Response
	// NextLink - the link to the next page of results.
	NextLink *string `json:"nextLink,omitempty"`
	// Value - the list of assemblies in the database
	Value []USQLAssemblyClr `json:"value,omitempty"`
}

// Response returns the raw HTTP response object.
func (ual USQLAssemblyList) Response() *http.Response {
	return ual.rawResponse
}

// StatusCode returns the HTTP status code of the response, e.g. 200.
func (ual USQLAssemblyList) StatusCode() int {
	return ual.rawResponse.StatusCode
}

// Status returns the HTTP status message of the response, e.g. "200 OK".
func (ual USQLAssemblyList) Status() string {
	return ual.rawResponse.Status
}

// USQLCredential - A Data Lake Analytics catalog U-SQL credential item.
type USQLCredential struct {
	rawResponse *http.Response
	// ComputeAccountName - the name of the Data Lake Analytics account.
	ComputeAccountName *string `json:"computeAccountName,omitempty"`
	// Version - the version of the catalog item.
	Version *uuid.UUID `json:"version,omitempty"`
	// Name - the name of the credential.
	Name *string `json:"credentialName,omitempty"`
}

// Response returns the raw HTTP response object.
func (uc USQLCredential) Response() *http.Response {
	return uc.rawResponse
}

// StatusCode returns the HTTP status code of the response, e.g. 200.
func (uc USQLCredential) StatusCode() int {
	return uc.rawResponse.StatusCode
}

// Status returns the HTTP status message of the response, e.g. "200 OK".
func (uc USQLCredential) Status() string {
	return uc.rawResponse.Status
}

// USQLCredentialList - A Data Lake Analytics catalog U-SQL credential item list.
type USQLCredentialList struct {
	rawResponse *http.Response
	// NextLink - the link to the next page of results.
	NextLink *string `json:"nextLink,omitempty"`
	// Value - the list of credentials in the database
	Value []USQLCredential `json:"value,omitempty"`
}

// Response returns the raw HTTP response object.
func (ucl USQLCredentialList) Response() *http.Response {
	return ucl.rawResponse
}

// StatusCode returns the HTTP status code of the response, e.g. 200.
func (ucl USQLCredentialList) StatusCode() int {
	return ucl.rawResponse.StatusCode
}

// Status returns the HTTP status message of the response, e.g. "200 OK".
func (ucl USQLCredentialList) Status() string {
	return ucl.rawResponse.Status
}

// USQLDatabase - A Data Lake Analytics catalog U-SQL database item.
type USQLDatabase struct {
	rawResponse *http.Response
	// ComputeAccountName - the name of the Data Lake Analytics account.
	ComputeAccountName *string `json:"computeAccountName,omitempty"`
	// Version - the version of the catalog item.
	Version *uuid.UUID `json:"version,omitempty"`
	// Name - the name of the database.
	Name *string `json:"databaseName,omitempty"`
}

// Response returns the raw HTTP response object.
func (ud USQLDatabase) Response() *http.Response {
	return ud.rawResponse
}

// StatusCode returns the HTTP status code of the response, e.g. 200.
func (ud USQLDatabase) StatusCode() int {
	return ud.rawResponse.StatusCode
}

// Status returns the HTTP status message of the response, e.g. "200 OK".
func (ud USQLDatabase) Status() string {
	return ud.rawResponse.Status
}

// USQLDatabaseList - A Data Lake Analytics catalog U-SQL database item list.
type USQLDatabaseList struct {
	rawResponse *http.Response
	// NextLink - the link to the next page of results.
	NextLink *string `json:"nextLink,omitempty"`
	// Value - the list of databases
	Value []USQLDatabase `json:"value,omitempty"`
}

// Response returns the raw HTTP response object.
func (udl USQLDatabaseList) Response() *http.Response {
	return udl.rawResponse
}

// StatusCode returns the HTTP status code of the response, e.g. 200.
func (udl USQLDatabaseList) StatusCode() int {
	return udl.rawResponse.StatusCode
}

// Status returns the HTTP status message of the response, e.g. "200 OK".
func (udl USQLDatabaseList) Status() string {
	return udl.rawResponse.Status
}

// USQLDirectedColumn - A Data Lake Analytics catalog U-SQL directed column item.
type USQLDirectedColumn struct {
	// Name - the name of the index in the table.
	Name *string `json:"name,omitempty"`
	// Descending - the switch indicating if the index is descending or not.
	Descending *bool `json:"descending,omitempty"`
}

// USQLDistributionInfo - A Data Lake Analytics catalog U-SQL distribution information object.
type USQLDistributionInfo struct {
	// Type - the type of this distribution.
	Type *int32 `json:"type,omitempty"`
	// Keys - the list of directed columns in the distribution
	Keys []USQLDirectedColumn `json:"keys,omitempty"`
	// Count - the count of indices using this distribution.
	Count *int32 `json:"count,omitempty"`
	// DynamicCount - the dynamic count of indices using this distribution.
	DynamicCount *int32 `json:"dynamicCount,omitempty"`
}

// USQLExternalDataSource - A Data Lake Analytics catalog U-SQL external datasource item.
type USQLExternalDataSource struct {
	rawResponse *http.Response
	// ComputeAccountName - the name of the Data Lake Analytics account.
	ComputeAccountName *string `json:"computeAccountName,omitempty"`
	// Version - the version of the catalog item.
	Version *uuid.UUID `json:"version,omitempty"`
	// DatabaseName - the name of the database.
	DatabaseName *string `json:"databaseName,omitempty"`
	// Name - the name of the external data source.
	Name *string `json:"externalDataSourceName,omitempty"`
	// Provider - the name of the provider for the external data source.
	Provider *string `json:"provider,omitempty"`
	// ProviderString - the name of the provider string for the external data source.
	ProviderString *string `json:"providerString,omitempty"`
	// PushdownTypes - the list of types to push down from the external data source.
	PushdownTypes []string `json:"pushdownTypes,omitempty"`
}

// Response returns the raw HTTP response object.
func (ueds USQLExternalDataSource) Response() *http.Response {
	return ueds.rawResponse
}

// StatusCode returns the HTTP status code of the response, e.g. 200.
func (ueds USQLExternalDataSource) StatusCode() int {
	return ueds.rawResponse.StatusCode
}

// Status returns the HTTP status message of the response, e.g. "200 OK".
func (ueds USQLExternalDataSource) Status() string {
	return ueds.rawResponse.Status
}

// USQLExternalDataSourceList - A Data Lake Analytics catalog U-SQL external datasource item list.
type USQLExternalDataSourceList struct {
	rawResponse *http.Response
	// NextLink - the link to the next page of results.
	NextLink *string `json:"nextLink,omitempty"`
	// Value - the list of external data sources in the database
	Value []USQLExternalDataSource `json:"value,omitempty"`
}

// Response returns the raw HTTP response object.
func (uedsl USQLExternalDataSourceList) Response() *http.Response {
	return uedsl.rawResponse
}

// StatusCode returns the HTTP status code of the response, e.g. 200.
func (uedsl USQLExternalDataSourceList) StatusCode() int {
	return uedsl.rawResponse.StatusCode
}

// Status returns the HTTP status message of the response, e.g. "200 OK".
func (uedsl USQLExternalDataSourceList) Status() string {
	return uedsl.rawResponse.Status
}

// USQLIndex - A Data Lake Analytics catalog U-SQL table index item.
type USQLIndex struct {
	// Name - the name of the index in the table.
	Name *string `json:"name,omitempty"`
	// IndexKeys - the list of directed columns in the index
	IndexKeys []USQLDirectedColumn `json:"indexKeys,omitempty"`
	// Columns - the list of columns in the index
	Columns []string `json:"columns,omitempty"`
	// DistributionInfo - the distributions info of the index
	DistributionInfo *USQLDistributionInfo `json:"distributionInfo,omitempty"`
	// PartitionFunction - partition function ID for the index.
	PartitionFunction *uuid.UUID `json:"partitionFunction,omitempty"`
	// PartitionKeyList - the list of partion keys in the index
	PartitionKeyList []string `json:"partitionKeyList,omitempty"`
	// StreamNames - the list of full paths to the streams that contain this index in the DataLake account.
	StreamNames []string `json:"streamNames,omitempty"`
	// IsColumnstore - the switch indicating if this index is a columnstore index.
	IsColumnstore *bool `json:"isColumnstore,omitempty"`
	// IndexID - the ID of this index within the table.
	IndexID *int32 `json:"indexId,omitempty"`
	// IsUnique - the switch indicating if this index is a unique index.
	IsUnique *bool `json:"isUnique,omitempty"`
}

// USQLPackage - A Data Lake Analytics catalog U-SQL package item.
type USQLPackage struct {
	rawResponse *http.Response
	// ComputeAccountName - the name of the Data Lake Analytics account.
	ComputeAccountName *string `json:"computeAccountName,omitempty"`
	// Version - the version of the catalog item.
	Version *uuid.UUID `json:"version,omitempty"`
	// DatabaseName - the name of the database containing the package.
	DatabaseName *string `json:"databaseName,omitempty"`
	// SchemaName - the name of the schema associated with this package and database.
	SchemaName *string `json:"schemaName,omitempty"`
	// Name - the name of the package.
	Name *string `json:"packageName,omitempty"`
	// Definition - the definition of the package.
	Definition *string `json:"definition,omitempty"`
}

// Response returns the raw HTTP response object.
func (up USQLPackage) Response() *http.Response {
	return up.rawResponse
}

// StatusCode returns the HTTP status code of the response, e.g. 200.
func (up USQLPackage) StatusCode() int {
	return up.rawResponse.StatusCode
}

// Status returns the HTTP status message of the response, e.g. "200 OK".
func (up USQLPackage) Status() string {
	return up.rawResponse.Status
}

// USQLPackageList - A Data Lake Analytics catalog U-SQL package item list.
type USQLPackageList struct {
	rawResponse *http.Response
	// NextLink - the link to the next page of results.
	NextLink *string `json:"nextLink,omitempty"`
	// Value - the list of packages in the database and schema combination
	Value []USQLPackage `json:"value,omitempty"`
}

// Response returns the raw HTTP response object.
func (upl USQLPackageList) Response() *http.Response {
	return upl.rawResponse
}

// StatusCode returns the HTTP status code of the response, e.g. 200.
func (upl USQLPackageList) StatusCode() int {
	return upl.rawResponse.StatusCode
}

// Status returns the HTTP status message of the response, e.g. "200 OK".
func (upl USQLPackageList) Status() string {
	return upl.rawResponse.Status
}

// USQLProcedure - A Data Lake Analytics catalog U-SQL procedure item.
type USQLProcedure struct {
	rawResponse *http.Response
	// ComputeAccountName - the name of the Data Lake Analytics account.
	ComputeAccountName *string `json:"computeAccountName,omitempty"`
	// Version - the version of the catalog item.
	Version *uuid.UUID `json:"version,omitempty"`
	// DatabaseName - the name of the database.
	DatabaseName *string `json:"databaseName,omitempty"`
	// SchemaName - the name of the schema associated with this procedure and database.
	SchemaName *string `json:"schemaName,omitempty"`
	// Name - the name of the procedure.
	Name *string `json:"procName,omitempty"`
	// Definition - the defined query of the procedure.
	Definition *string `json:"definition,omitempty"`
}

// Response returns the raw HTTP response object.
func (up USQLProcedure) Response() *http.Response {
	return up.rawResponse
}

// StatusCode returns the HTTP status code of the response, e.g. 200.
func (up USQLProcedure) StatusCode() int {
	return up.rawResponse.StatusCode
}

// Status returns the HTTP status message of the response, e.g. "200 OK".
func (up USQLProcedure) Status() string {
	return up.rawResponse.Status
}

// USQLProcedureList - A Data Lake Analytics catalog U-SQL procedure item list.
type USQLProcedureList struct {
	rawResponse *http.Response
	// NextLink - the link to the next page of results.
	NextLink *string `json:"nextLink,omitempty"`
	// Value - the list of procedure in the database and schema combination
	Value []USQLProcedure `json:"value,omitempty"`
}

// Response returns the raw HTTP response object.
func (upl USQLProcedureList) Response() *http.Response {
	return upl.rawResponse
}

// StatusCode returns the HTTP status code of the response, e.g. 200.
func (upl USQLProcedureList) StatusCode() int {
	return upl.rawResponse.StatusCode
}

// Status returns the HTTP status message of the response, e.g. "200 OK".
func (upl USQLProcedureList) Status() string {
	return upl.rawResponse.Status
}

// USQLSchema - A Data Lake Analytics catalog U-SQL schema item.
type USQLSchema struct {
	rawResponse *http.Response
	// ComputeAccountName - the name of the Data Lake Analytics account.
	ComputeAccountName *string `json:"computeAccountName,omitempty"`
	// Version - the version of the catalog item.
	Version *uuid.UUID `json:"version,omitempty"`
	// DatabaseName - the name of the database.
	DatabaseName *string `json:"databaseName,omitempty"`
	// Name - the name of the schema.
	Name *string `json:"schemaName,omitempty"`
}

// Response returns the raw HTTP response object.
func (us USQLSchema) Response() *http.Response {
	return us.rawResponse
}

// StatusCode returns the HTTP status code of the response, e.g. 200.
func (us USQLSchema) StatusCode() int {
	return us.rawResponse.StatusCode
}

// Status returns the HTTP status message of the response, e.g. "200 OK".
func (us USQLSchema) Status() string {
	return us.rawResponse.Status
}

// USQLSchemaList - A Data Lake Analytics catalog U-SQL schema item list.
type USQLSchemaList struct {
	rawResponse *http.Response
	// NextLink - the link to the next page of results.
	NextLink *string `json:"nextLink,omitempty"`
	// Value - the list of schemas in the database
	Value []USQLSchema `json:"value,omitempty"`
}

// Response returns the raw HTTP response object.
func (usl USQLSchemaList) Response() *http.Response {
	return usl.rawResponse
}

// StatusCode returns the HTTP status code of the response, e.g. 200.
func (usl USQLSchemaList) StatusCode() int {
	return usl.rawResponse.StatusCode
}

// Status returns the HTTP status message of the response, e.g. "200 OK".
func (usl USQLSchemaList) Status() string {
	return usl.rawResponse.Status
}

// USQLSecret - A Data Lake Analytics catalog U-SQL secret item.
type USQLSecret struct {
	rawResponse *http.Response
	// ComputeAccountName - the name of the Data Lake Analytics account.
	ComputeAccountName *string `json:"computeAccountName,omitempty"`
	// Version - the version of the catalog item.
	Version *uuid.UUID `json:"version,omitempty"`
	// DatabaseName - the name of the database.
	DatabaseName *string `json:"databaseName,omitempty"`
	// Name - the name of the secret.
	Name *string `json:"secretName,omitempty"`
	// CreationTime - the creation time of the credential object. This is the only information returned about a secret from a GET.
	CreationTime *time.Time `json:"creationTime,omitempty"`
	// URI - the URI identifier for the secret in the format <hostname>:<port>
	URI *string `json:"uri,omitempty"`
	// Password - the password for the secret to pass in
	Password *string `json:"password,omitempty"`
}

// Response returns the raw HTTP response object.
func (us USQLSecret) Response() *http.Response {
	return us.rawResponse
}

// StatusCode returns the HTTP status code of the response, e.g. 200.
func (us USQLSecret) StatusCode() int {
	return us.rawResponse.StatusCode
}

// Status returns the HTTP status message of the response, e.g. "200 OK".
func (us USQLSecret) Status() string {
	return us.rawResponse.Status
}

// USQLTable - A Data Lake Analytics catalog U-SQL table item.
type USQLTable struct {
	rawResponse *http.Response
	// ComputeAccountName - the name of the Data Lake Analytics account.
	ComputeAccountName *string `json:"computeAccountName,omitempty"`
	// Version - the version of the catalog item.
	Version *uuid.UUID `json:"version,omitempty"`
	// DatabaseName - the name of the database.
	DatabaseName *string `json:"databaseName,omitempty"`
	// SchemaName - the name of the schema associated with this table and database.
	SchemaName *string `json:"schemaName,omitempty"`
	// Name - the name of the table.
	Name *string `json:"tableName,omitempty"`
	// ColumnList - the list of columns in this table
	ColumnList []USQLTableColumn `json:"columnList,omitempty"`
	// IndexList - the list of indices in this table
	IndexList []USQLIndex `json:"indexList,omitempty"`
	// PartitionKeyList - the list of partition keys in the table
	PartitionKeyList []string `json:"partitionKeyList,omitempty"`
	// ExternalTable - the external table associated with the table.
	ExternalTable *ExternalTable `json:"externalTable,omitempty"`
	// DistributionInfo - the distributions info of the table
	DistributionInfo *USQLDistributionInfo `json:"distributionInfo,omitempty"`
}

// Response returns the raw HTTP response object.
func (ut USQLTable) Response() *http.Response {
	return ut.rawResponse
}

// StatusCode returns the HTTP status code of the response, e.g. 200.
func (ut USQLTable) StatusCode() int {
	return ut.rawResponse.StatusCode
}

// Status returns the HTTP status message of the response, e.g. "200 OK".
func (ut USQLTable) Status() string {
	return ut.rawResponse.Status
}

// USQLTableColumn - A Data Lake Analytics catalog U-SQL table column item.
type USQLTableColumn struct {
	// Name - the name of the column in the table.
	Name *string `json:"name,omitempty"`
	// Type - the object type of the specified column (such as System.String).
	Type *string `json:"type,omitempty"`
}

// USQLTableList - A Data Lake Analytics catalog U-SQL table item list.
type USQLTableList struct {
	rawResponse *http.Response
	// NextLink - the link to the next page of results.
	NextLink *string `json:"nextLink,omitempty"`
	// Value - the list of tables in the database and schema combination
	Value []USQLTable `json:"value,omitempty"`
}

// Response returns the raw HTTP response object.
func (utl USQLTableList) Response() *http.Response {
	return utl.rawResponse
}

// StatusCode returns the HTTP status code of the response, e.g. 200.
func (utl USQLTableList) StatusCode() int {
	return utl.rawResponse.StatusCode
}

// Status returns the HTTP status message of the response, e.g. "200 OK".
func (utl USQLTableList) Status() string {
	return utl.rawResponse.Status
}

// USQLTablePartition - A Data Lake Analytics catalog U-SQL table partition item.
type USQLTablePartition struct {
	rawResponse *http.Response
	// ComputeAccountName - the name of the Data Lake Analytics account.
	ComputeAccountName *string `json:"computeAccountName,omitempty"`
	// Version - the version of the catalog item.
	Version *uuid.UUID `json:"version,omitempty"`
	// DatabaseName - the name of the database.
	DatabaseName *string `json:"databaseName,omitempty"`
	// SchemaName - the name of the schema associated with this table partition and database.
	SchemaName *string `json:"schemaName,omitempty"`
	// Name - the name of the table partition.
	Name *string `json:"partitionName,omitempty"`
	// ParentName - the Ddl object of the partition's parent.
	ParentName *DdlName `json:"parentName,omitempty"`
	// IndexID - the index ID for this partition.
	IndexID *int32 `json:"indexId,omitempty"`
	// Label - the list of labels associated with this partition.
	Label []string `json:"label,omitempty"`
	// CreateDate - the creation time of the partition
	CreateDate *time.Time `json:"createDate,omitempty"`
}

// Response returns the raw HTTP response object.
func (utp USQLTablePartition) Response() *http.Response {
	return utp.rawResponse
}

// StatusCode returns the HTTP status code of the response, e.g. 200.
func (utp USQLTablePartition) StatusCode() int {
	return utp.rawResponse.StatusCode
}

// Status returns the HTTP status message of the response, e.g. "200 OK".
func (utp USQLTablePartition) Status() string {
	return utp.rawResponse.Status
}

// USQLTablePartitionList - A Data Lake Analytics catalog U-SQL table partition item list.
type USQLTablePartitionList struct {
	rawResponse *http.Response
	// NextLink - the link to the next page of results.
	NextLink *string `json:"nextLink,omitempty"`
	// Value - the list of table partitions in the database, schema and table combination
	Value []USQLTablePartition `json:"value,omitempty"`
}

// Response returns the raw HTTP response object.
func (utpl USQLTablePartitionList) Response() *http.Response {
	return utpl.rawResponse
}

// StatusCode returns the HTTP status code of the response, e.g. 200.
func (utpl USQLTablePartitionList) StatusCode() int {
	return utpl.rawResponse.StatusCode
}

// Status returns the HTTP status message of the response, e.g. "200 OK".
func (utpl USQLTablePartitionList) Status() string {
	return utpl.rawResponse.Status
}

// USQLTableStatistics - A Data Lake Analytics catalog U-SQL table statistics item.
type USQLTableStatistics struct {
	rawResponse *http.Response
	// ComputeAccountName - the name of the Data Lake Analytics account.
	ComputeAccountName *string `json:"computeAccountName,omitempty"`
	// Version - the version of the catalog item.
	Version *uuid.UUID `json:"version,omitempty"`
	// DatabaseName - the name of the database.
	DatabaseName *string `json:"databaseName,omitempty"`
	// SchemaName - the name of the schema associated with this table and database.
	SchemaName *string `json:"schemaName,omitempty"`
	// TableName - the name of the table.
	TableName *string `json:"tableName,omitempty"`
	// Name - the name of the table statistics.
	Name *string `json:"statisticsName,omitempty"`
	// UserStatName - the name of the user statistics.
	UserStatName *string `json:"userStatName,omitempty"`
	// StatDataPath - the path to the statistics data.
	StatDataPath *string `json:"statDataPath,omitempty"`
	// CreateTime - the creation time of the statistics.
	CreateTime *time.Time `json:"createTime,omitempty"`
	// UpdateTime - the last time the statistics were updated.
	UpdateTime *time.Time `json:"updateTime,omitempty"`
	// IsUserCreated - the switch indicating if these statistics are user created.
	IsUserCreated *bool `json:"isUserCreated,omitempty"`
	// IsAutoCreated - the switch indicating if these statistics are automatically created.
	IsAutoCreated *bool `json:"isAutoCreated,omitempty"`
	// HasFilter - the switch indicating if these statistics have a filter.
	HasFilter *bool `json:"hasFilter,omitempty"`
	// FilterDefinition - the filter definition for the statistics.
	FilterDefinition *string `json:"filterDefinition,omitempty"`
	// ColNames - the list of column names associated with these statistics.
	ColNames []string `json:"colNames,omitempty"`
}

// Response returns the raw HTTP response object.
func (uts USQLTableStatistics) Response() *http.Response {
	return uts.rawResponse
}

// StatusCode returns the HTTP status code of the response, e.g. 200.
func (uts USQLTableStatistics) StatusCode() int {
	return uts.rawResponse.StatusCode
}

// Status returns the HTTP status message of the response, e.g. "200 OK".
func (uts USQLTableStatistics) Status() string {
	return uts.rawResponse.Status
}

// USQLTableStatisticsList - A Data Lake Analytics catalog U-SQL table statistics item list.
type USQLTableStatisticsList struct {
	rawResponse *http.Response
	// NextLink - the link to the next page of results.
	NextLink *string `json:"nextLink,omitempty"`
	// Value - the list of table statistics in the database, schema and table combination
	Value []USQLTableStatistics `json:"value,omitempty"`
}

// Response returns the raw HTTP response object.
func (utsl USQLTableStatisticsList) Response() *http.Response {
	return utsl.rawResponse
}

// StatusCode returns the HTTP status code of the response, e.g. 200.
func (utsl USQLTableStatisticsList) StatusCode() int {
	return utsl.rawResponse.StatusCode
}

// Status returns the HTTP status message of the response, e.g. "200 OK".
func (utsl USQLTableStatisticsList) Status() string {
	return utsl.rawResponse.Status
}

// USQLTableType - A Data Lake Analytics catalog U-SQL table type item.
type USQLTableType struct {
	rawResponse *http.Response
	// ComputeAccountName - the name of the Data Lake Analytics account.
	ComputeAccountName *string `json:"computeAccountName,omitempty"`
	// Version - the version of the catalog item.
	Version *uuid.UUID `json:"version,omitempty"`
	// DatabaseName - the name of the database.
	DatabaseName *string `json:"databaseName,omitempty"`
	// SchemaName - the name of the schema associated with this table and database.
	SchemaName *string `json:"schemaName,omitempty"`
	// Name - the name of type for this type.
	Name *string `json:"typeName,omitempty"`
	// TypeFamily - the type family for this type.
	TypeFamily *string `json:"typeFamily,omitempty"`
	// CSharpName - the C# name for this type.
	CSharpName *string `json:"cSharpName,omitempty"`
	// FullCSharpName - the fully qualified C# name for this type.
	FullCSharpName *string `json:"fullCSharpName,omitempty"`
	// SystemTypeID - the system type ID for this type.
	SystemTypeID *int32 `json:"systemTypeId,omitempty"`
	// UserTypeID - the user type ID for this type.
	UserTypeID *int32 `json:"userTypeId,omitempty"`
	// SchemaID - the schema ID for this type.
	SchemaID *int32 `json:"schemaId,omitempty"`
	// PrincipalID - the principal ID for this type.
	PrincipalID *int32 `json:"principalId,omitempty"`
	// IsNullable - the the switch indicating if this type is nullable.
	IsNullable *bool `json:"isNullable,omitempty"`
	// IsUserDefined - the the switch indicating if this type is user defined.
	IsUserDefined *bool `json:"isUserDefined,omitempty"`
	// IsAssemblyType - the the switch indicating if this type is an assembly type.
	IsAssemblyType *bool `json:"isAssemblyType,omitempty"`
	// IsTableType - the the switch indicating if this type is a table type.
	IsTableType *bool `json:"isTableType,omitempty"`
	// IsComplexType - the the switch indicating if this type is a complex type.
	IsComplexType *bool `json:"isComplexType,omitempty"`
	// Columns - the type field information associated with this table type.
	Columns []TypeFieldInfo `json:"columns,omitempty"`
}

// Response returns the raw HTTP response object.
func (utt USQLTableType) Response() *http.Response {
	return utt.rawResponse
}

// StatusCode returns the HTTP status code of the response, e.g. 200.
func (utt USQLTableType) StatusCode() int {
	return utt.rawResponse.StatusCode
}

// Status returns the HTTP status message of the response, e.g. "200 OK".
func (utt USQLTableType) Status() string {
	return utt.rawResponse.Status
}

// USQLTableTypeList - A Data Lake Analytics catalog U-SQL table type item list.
type USQLTableTypeList struct {
	rawResponse *http.Response
	// NextLink - the link to the next page of results.
	NextLink *string `json:"nextLink,omitempty"`
	// Value - the list of table types in the database and schema combination
	Value []USQLTableType `json:"value,omitempty"`
}

// Response returns the raw HTTP response object.
func (uttl USQLTableTypeList) Response() *http.Response {
	return uttl.rawResponse
}

// StatusCode returns the HTTP status code of the response, e.g. 200.
func (uttl USQLTableTypeList) StatusCode() int {
	return uttl.rawResponse.StatusCode
}

// Status returns the HTTP status message of the response, e.g. "200 OK".
func (uttl USQLTableTypeList) Status() string {
	return uttl.rawResponse.Status
}

// USQLTableValuedFunction - A Data Lake Analytics catalog U-SQL table valued function item.
type USQLTableValuedFunction struct {
	rawResponse *http.Response
	// ComputeAccountName - the name of the Data Lake Analytics account.
	ComputeAccountName *string `json:"computeAccountName,omitempty"`
	// Version - the version of the catalog item.
	Version *uuid.UUID `json:"version,omitempty"`
	// DatabaseName - the name of the database.
	DatabaseName *string `json:"databaseName,omitempty"`
	// SchemaName - the name of the schema associated with this database.
	SchemaName *string `json:"schemaName,omitempty"`
	// Name - the name of the table valued function.
	Name *string `json:"tvfName,omitempty"`
	// Definition - the definition of the table valued function.
	Definition *string `json:"definition,omitempty"`
}

// Response returns the raw HTTP response object.
func (utvf USQLTableValuedFunction) Response() *http.Response {
	return utvf.rawResponse
}

// StatusCode returns the HTTP status code of the response, e.g. 200.
func (utvf USQLTableValuedFunction) StatusCode() int {
	return utvf.rawResponse.StatusCode
}

// Status returns the HTTP status message of the response, e.g. "200 OK".
func (utvf USQLTableValuedFunction) Status() string {
	return utvf.rawResponse.Status
}

// USQLTableValuedFunctionList - A Data Lake Analytics catalog U-SQL table valued function item list.
type USQLTableValuedFunctionList struct {
	rawResponse *http.Response
	// NextLink - the link to the next page of results.
	NextLink *string `json:"nextLink,omitempty"`
	// Value - the list of table valued functions in the database and schema combination
	Value []USQLTableValuedFunction `json:"value,omitempty"`
}

// Response returns the raw HTTP response object.
func (utvfl USQLTableValuedFunctionList) Response() *http.Response {
	return utvfl.rawResponse
}

// StatusCode returns the HTTP status code of the response, e.g. 200.
func (utvfl USQLTableValuedFunctionList) StatusCode() int {
	return utvfl.rawResponse.StatusCode
}

// Status returns the HTTP status message of the response, e.g. "200 OK".
func (utvfl USQLTableValuedFunctionList) Status() string {
	return utvfl.rawResponse.Status
}

// USQLType - A Data Lake Analytics catalog U-SQL type item.
type USQLType struct {
	// ComputeAccountName - the name of the Data Lake Analytics account.
	ComputeAccountName *string `json:"computeAccountName,omitempty"`
	// Version - the version of the catalog item.
	Version *uuid.UUID `json:"version,omitempty"`
	// DatabaseName - the name of the database.
	DatabaseName *string `json:"databaseName,omitempty"`
	// SchemaName - the name of the schema associated with this table and database.
	SchemaName *string `json:"schemaName,omitempty"`
	// Name - the name of type for this type.
	Name *string `json:"typeName,omitempty"`
	// TypeFamily - the type family for this type.
	TypeFamily *string `json:"typeFamily,omitempty"`
	// CSharpName - the C# name for this type.
	CSharpName *string `json:"cSharpName,omitempty"`
	// FullCSharpName - the fully qualified C# name for this type.
	FullCSharpName *string `json:"fullCSharpName,omitempty"`
	// SystemTypeID - the system type ID for this type.
	SystemTypeID *int32 `json:"systemTypeId,omitempty"`
	// UserTypeID - the user type ID for this type.
	UserTypeID *int32 `json:"userTypeId,omitempty"`
	// SchemaID - the schema ID for this type.
	SchemaID *int32 `json:"schemaId,omitempty"`
	// PrincipalID - the principal ID for this type.
	PrincipalID *int32 `json:"principalId,omitempty"`
	// IsNullable - the the switch indicating if this type is nullable.
	IsNullable *bool `json:"isNullable,omitempty"`
	// IsUserDefined - the the switch indicating if this type is user defined.
	IsUserDefined *bool `json:"isUserDefined,omitempty"`
	// IsAssemblyType - the the switch indicating if this type is an assembly type.
	IsAssemblyType *bool `json:"isAssemblyType,omitempty"`
	// IsTableType - the the switch indicating if this type is a table type.
	IsTableType *bool `json:"isTableType,omitempty"`
	// IsComplexType - the the switch indicating if this type is a complex type.
	IsComplexType *bool `json:"isComplexType,omitempty"`
}

// USQLTypeList - A Data Lake Analytics catalog U-SQL type item list.
type USQLTypeList struct {
	rawResponse *http.Response
	// NextLink - the link to the next page of results.
	NextLink *string `json:"nextLink,omitempty"`
	// Value - the list of types in the database and schema combination
	Value []USQLType `json:"value,omitempty"`
}

// Response returns the raw HTTP response object.
func (utl USQLTypeList) Response() *http.Response {
	return utl.rawResponse
}

// StatusCode returns the HTTP status code of the response, e.g. 200.
func (utl USQLTypeList) StatusCode() int {
	return utl.rawResponse.StatusCode
}

// Status returns the HTTP status message of the response, e.g. "200 OK".
func (utl USQLTypeList) Status() string {
	return utl.rawResponse.Status
}

// USQLView - A Data Lake Analytics catalog U-SQL view item.
type USQLView struct {
	rawResponse *http.Response
	// ComputeAccountName - the name of the Data Lake Analytics account.
	ComputeAccountName *string `json:"computeAccountName,omitempty"`
	// Version - the version of the catalog item.
	Version *uuid.UUID `json:"version,omitempty"`
	// DatabaseName - the name of the database.
	DatabaseName *string `json:"databaseName,omitempty"`
	// SchemaName - the name of the schema associated with this view and database.
	SchemaName *string `json:"schemaName,omitempty"`
	// Name - the name of the view.
	Name *string `json:"viewName,omitempty"`
	// Definition - the defined query of the view.
	Definition *string `json:"definition,omitempty"`
}

// Response returns the raw HTTP response object.
func (uv USQLView) Response() *http.Response {
	return uv.rawResponse
}

// StatusCode returns the HTTP status code of the response, e.g. 200.
func (uv USQLView) StatusCode() int {
	return uv.rawResponse.StatusCode
}

// Status returns the HTTP status message of the response, e.g. "200 OK".
func (uv USQLView) Status() string {
	return uv.rawResponse.Status
}

// USQLViewList - A Data Lake Analytics catalog U-SQL view item list.
type USQLViewList struct {
	rawResponse *http.Response
	// NextLink - the link to the next page of results.
	NextLink *string `json:"nextLink,omitempty"`
	// Value - the list of view in the database and schema combination
	Value []USQLView `json:"value,omitempty"`
}

// Response returns the raw HTTP response object.
func (uvl USQLViewList) Response() *http.Response {
	return uvl.rawResponse
}

// StatusCode returns the HTTP status code of the response, e.g. 200.
func (uvl USQLViewList) StatusCode() int {
	return uvl.rawResponse.StatusCode
}

// Status returns the HTTP status message of the response, e.g. "200 OK".
func (uvl USQLViewList) Status() string {
	return uvl.rawResponse.Status
}
