package job

// Copyright (c) Microsoft and contributors.  All rights reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
// http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
//
// See the License for the specific language governing permissions and
// limitations under the License.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

import (
	"bytes"
	"context"
	"encoding/json"
	"fmt"
	"github.com/Azure/azure-pipeline-go/pipeline"
	uuid "github.com/satori/go.uuid"
	"io/ioutil"
	"net/http"
	"net/url"
)

// Client is the creates an Azure Data Lake Analytics job client.
type Client struct {
	ManagementClient
}

// NewClient creates an instance of the Client client.
func NewClient(url url.URL, p pipeline.Pipeline) Client {
	return Client{NewManagementClient(url, p)}
}

// Build builds (compiles) the specified job in the specified Data Lake Analytics account for job correctness and
// validation.
//
// accountName is the Azure Data Lake Analytics account to execute job operations on. parameters is the parameters to
// build a job.
func (client Client) Build(ctx context.Context, accountName string, parameters BuildJobParameters) (*Information, error) {
	req, err := client.buildPreparer(accountName, parameters)
	if err != nil {
		return nil, err
	}
	resp, err := client.Pipeline().Do(ctx, responderPolicyFactory{responder: client.buildResponder}, req)
	if err != nil {
		return nil, err
	}
	return resp.(*Information), err
}

// buildPreparer prepares the Build request.
func (client Client) buildPreparer(accountName string, parameters BuildJobParameters) (pipeline.Request, error) {
	req, err := pipeline.NewRequest("POST", client.url, nil)
	if err != nil {
		return req, pipeline.NewError(err, "failed to create request")
	}
	params := req.URL.Query()
	params.Set("api-version", APIVersion)
	req.URL.RawQuery = params.Encode()
	b, err := json.Marshal(parameters)
	if err != nil {
		return req, pipeline.NewError(err, "failed to marshal request body")
	}
	req.Header.Set("Content-Type", "application/json")
	err = req.SetBody(bytes.NewReader(b))
	if err != nil {
		return req, pipeline.NewError(err, "failed to set request body")
	}
	return req, nil
}

// buildResponder handles the response to the Build request.
func (client Client) buildResponder(resp pipeline.Response) (pipeline.Response, error) {
	err := validateResponse(resp, http.StatusOK)
	if resp == nil {
		return nil, err
	}
	result := &Information{rawResponse: resp.Response()}
	if err != nil {
		return result, err
	}
	defer resp.Response().Body.Close()
	b, err := ioutil.ReadAll(resp.Response().Body)
	if err != nil {
		return result, NewResponseError(err, resp.Response(), "failed to read response body")
	}
	if len(b) > 0 {
		err = json.Unmarshal(b, result)
		if err != nil {
			return result, NewResponseError(err, resp.Response(), "failed to unmarshal response body")
		}
	}
	return result, nil
}

// Cancel cancels the running job specified by the job ID.
//
// accountName is the Azure Data Lake Analytics account to execute job operations on. jobIdentity is job identifier.
// Uniquely identifies the job across all jobs submitted to the service.
func (client Client) Cancel(ctx context.Context, accountName string, jobIdentity uuid.UUID) (*http.Response, error) {
	req, err := client.cancelPreparer(accountName, jobIdentity)
	if err != nil {
		return nil, err
	}
	resp, err := client.Pipeline().Do(ctx, responderPolicyFactory{responder: client.cancelResponder}, req)
	if err != nil {
		return nil, err
	}
	return resp.Response(), err
}

// cancelPreparer prepares the Cancel request.
func (client Client) cancelPreparer(accountName string, jobIdentity uuid.UUID) (pipeline.Request, error) {
	req, err := pipeline.NewRequest("POST", client.url, nil)
	if err != nil {
		return req, pipeline.NewError(err, "failed to create request")
	}
	params := req.URL.Query()
	params.Set("api-version", APIVersion)
	req.URL.RawQuery = params.Encode()
	return req, nil
}

// cancelResponder handles the response to the Cancel request.
func (client Client) cancelResponder(resp pipeline.Response) (pipeline.Response, error) {
	err := validateResponse(resp, http.StatusOK)
	if resp == nil {
		return nil, err
	}
	return resp, err
}

// Create submits a job to the specified Data Lake Analytics account.
//
// accountName is the Azure Data Lake Analytics account to execute job operations on. jobIdentity is job identifier.
// Uniquely identifies the job across all jobs submitted to the service. parameters is the parameters to submit a job.
func (client Client) Create(ctx context.Context, accountName string, jobIdentity uuid.UUID, parameters CreateJobParameters) (*Information, error) {
	if err := validate([]validation{
		{targetValue: parameters,
			constraints: []constraint{{target: "parameters.Name", name: null, rule: true, chain: nil},
				{target: "parameters.Related", name: null, rule: false,
					chain: []constraint{{target: "parameters.Related.PipelineName", name: null, rule: false,
						chain: []constraint{{target: "parameters.Related.PipelineName", name: maxLength, rule: 260, chain: nil}}},
						{target: "parameters.Related.RecurrenceID", name: null, rule: true, chain: nil},
						{target: "parameters.Related.RecurrenceName", name: null, rule: false,
							chain: []constraint{{target: "parameters.Related.RecurrenceName", name: maxLength, rule: 260, chain: nil}}},
					}}}}}); err != nil {
		return nil, err
	}
	req, err := client.createPreparer(accountName, jobIdentity, parameters)
	if err != nil {
		return nil, err
	}
	resp, err := client.Pipeline().Do(ctx, responderPolicyFactory{responder: client.createResponder}, req)
	if err != nil {
		return nil, err
	}
	return resp.(*Information), err
}

// createPreparer prepares the Create request.
func (client Client) createPreparer(accountName string, jobIdentity uuid.UUID, parameters CreateJobParameters) (pipeline.Request, error) {
	req, err := pipeline.NewRequest("PUT", client.url, nil)
	if err != nil {
		return req, pipeline.NewError(err, "failed to create request")
	}
	params := req.URL.Query()
	params.Set("api-version", APIVersion)
	req.URL.RawQuery = params.Encode()
	b, err := json.Marshal(parameters)
	if err != nil {
		return req, pipeline.NewError(err, "failed to marshal request body")
	}
	req.Header.Set("Content-Type", "application/json")
	err = req.SetBody(bytes.NewReader(b))
	if err != nil {
		return req, pipeline.NewError(err, "failed to set request body")
	}
	return req, nil
}

// createResponder handles the response to the Create request.
func (client Client) createResponder(resp pipeline.Response) (pipeline.Response, error) {
	err := validateResponse(resp, http.StatusOK)
	if resp == nil {
		return nil, err
	}
	result := &Information{rawResponse: resp.Response()}
	if err != nil {
		return result, err
	}
	defer resp.Response().Body.Close()
	b, err := ioutil.ReadAll(resp.Response().Body)
	if err != nil {
		return result, NewResponseError(err, resp.Response(), "failed to read response body")
	}
	if len(b) > 0 {
		err = json.Unmarshal(b, result)
		if err != nil {
			return result, NewResponseError(err, resp.Response(), "failed to unmarshal response body")
		}
	}
	return result, nil
}

// Get gets the job information for the specified job ID.
//
// accountName is the Azure Data Lake Analytics account to execute job operations on. jobIdentity is jobInfo ID.
func (client Client) Get(ctx context.Context, accountName string, jobIdentity uuid.UUID) (*Information, error) {
	req, err := client.getPreparer(accountName, jobIdentity)
	if err != nil {
		return nil, err
	}
	resp, err := client.Pipeline().Do(ctx, responderPolicyFactory{responder: client.getResponder}, req)
	if err != nil {
		return nil, err
	}
	return resp.(*Information), err
}

// getPreparer prepares the Get request.
func (client Client) getPreparer(accountName string, jobIdentity uuid.UUID) (pipeline.Request, error) {
	req, err := pipeline.NewRequest("GET", client.url, nil)
	if err != nil {
		return req, pipeline.NewError(err, "failed to create request")
	}
	params := req.URL.Query()
	params.Set("api-version", APIVersion)
	req.URL.RawQuery = params.Encode()
	return req, nil
}

// getResponder handles the response to the Get request.
func (client Client) getResponder(resp pipeline.Response) (pipeline.Response, error) {
	err := validateResponse(resp, http.StatusOK)
	if resp == nil {
		return nil, err
	}
	result := &Information{rawResponse: resp.Response()}
	if err != nil {
		return result, err
	}
	defer resp.Response().Body.Close()
	b, err := ioutil.ReadAll(resp.Response().Body)
	if err != nil {
		return result, NewResponseError(err, resp.Response(), "failed to read response body")
	}
	if len(b) > 0 {
		err = json.Unmarshal(b, result)
		if err != nil {
			return result, NewResponseError(err, resp.Response(), "failed to unmarshal response body")
		}
	}
	return result, nil
}

// GetDebugDataPath gets the job debug data information specified by the job ID.
//
// accountName is the Azure Data Lake Analytics account to execute job operations on. jobIdentity is job identifier.
// Uniquely identifies the job across all jobs submitted to the service.
func (client Client) GetDebugDataPath(ctx context.Context, accountName string, jobIdentity uuid.UUID) (*DataPath, error) {
	req, err := client.getDebugDataPathPreparer(accountName, jobIdentity)
	if err != nil {
		return nil, err
	}
	resp, err := client.Pipeline().Do(ctx, responderPolicyFactory{responder: client.getDebugDataPathResponder}, req)
	if err != nil {
		return nil, err
	}
	return resp.(*DataPath), err
}

// getDebugDataPathPreparer prepares the GetDebugDataPath request.
func (client Client) getDebugDataPathPreparer(accountName string, jobIdentity uuid.UUID) (pipeline.Request, error) {
	req, err := pipeline.NewRequest("GET", client.url, nil)
	if err != nil {
		return req, pipeline.NewError(err, "failed to create request")
	}
	params := req.URL.Query()
	params.Set("api-version", APIVersion)
	req.URL.RawQuery = params.Encode()
	return req, nil
}

// getDebugDataPathResponder handles the response to the GetDebugDataPath request.
func (client Client) getDebugDataPathResponder(resp pipeline.Response) (pipeline.Response, error) {
	err := validateResponse(resp, http.StatusOK)
	if resp == nil {
		return nil, err
	}
	result := &DataPath{rawResponse: resp.Response()}
	if err != nil {
		return result, err
	}
	defer resp.Response().Body.Close()
	b, err := ioutil.ReadAll(resp.Response().Body)
	if err != nil {
		return result, NewResponseError(err, resp.Response(), "failed to read response body")
	}
	if len(b) > 0 {
		err = json.Unmarshal(b, result)
		if err != nil {
			return result, NewResponseError(err, resp.Response(), "failed to unmarshal response body")
		}
	}
	return result, nil
}

// GetStatistics gets statistics of the specified job.
//
// accountName is the Azure Data Lake Analytics account to execute job operations on. jobIdentity is job Information
// ID.
func (client Client) GetStatistics(ctx context.Context, accountName string, jobIdentity uuid.UUID) (*Statistics, error) {
	req, err := client.getStatisticsPreparer(accountName, jobIdentity)
	if err != nil {
		return nil, err
	}
	resp, err := client.Pipeline().Do(ctx, responderPolicyFactory{responder: client.getStatisticsResponder}, req)
	if err != nil {
		return nil, err
	}
	return resp.(*Statistics), err
}

// getStatisticsPreparer prepares the GetStatistics request.
func (client Client) getStatisticsPreparer(accountName string, jobIdentity uuid.UUID) (pipeline.Request, error) {
	req, err := pipeline.NewRequest("GET", client.url, nil)
	if err != nil {
		return req, pipeline.NewError(err, "failed to create request")
	}
	params := req.URL.Query()
	params.Set("api-version", APIVersion)
	req.URL.RawQuery = params.Encode()
	return req, nil
}

// getStatisticsResponder handles the response to the GetStatistics request.
func (client Client) getStatisticsResponder(resp pipeline.Response) (pipeline.Response, error) {
	err := validateResponse(resp, http.StatusOK)
	if resp == nil {
		return nil, err
	}
	result := &Statistics{rawResponse: resp.Response()}
	if err != nil {
		return result, err
	}
	defer resp.Response().Body.Close()
	b, err := ioutil.ReadAll(resp.Response().Body)
	if err != nil {
		return result, NewResponseError(err, resp.Response(), "failed to read response body")
	}
	if len(b) > 0 {
		err = json.Unmarshal(b, result)
		if err != nil {
			return result, NewResponseError(err, resp.Response(), "failed to unmarshal response body")
		}
	}
	return result, nil
}

// List lists the jobs, if any, associated with the specified Data Lake Analytics account. The response includes a link
// to the next page of results, if any.
//
// accountName is the Azure Data Lake Analytics account to execute job operations on. filter is oData filter. Optional.
// top is the number of items to return. Optional. skip is the number of items to skip over before returning elements.
// Optional. selectParameter is oData Select statement. Limits the properties on each entry to just those requested,
// e.g. Categories?$select=CategoryName,Description. Optional. orderby is orderBy clause. One or more comma-separated
// expressions with an optional "asc" (the default) or "desc" depending on the order you'd like the values sorted, e.g.
// Categories?$orderby=CategoryName desc. Optional. count is the Boolean value of true or false to request a count of
// the matching resources included with the resources in the response, e.g. Categories?$count=true. Optional.
func (client Client) List(ctx context.Context, accountName string, filter *string, top *int32, skip *int32, selectParameter *string, orderby *string, count *bool) (*InfoListResult, error) {
	if err := validate([]validation{
		{targetValue: top,
			constraints: []constraint{{target: "top", name: null, rule: false,
				chain: []constraint{{target: "top", name: inclusiveMinimum, rule: 1, chain: nil}}}}},
		{targetValue: skip,
			constraints: []constraint{{target: "skip", name: null, rule: false,
				chain: []constraint{{target: "skip", name: inclusiveMinimum, rule: 1, chain: nil}}}}}}); err != nil {
		return nil, err
	}
	req, err := client.listPreparer(accountName, filter, top, skip, selectParameter, orderby, count)
	if err != nil {
		return nil, err
	}
	resp, err := client.Pipeline().Do(ctx, responderPolicyFactory{responder: client.listResponder}, req)
	if err != nil {
		return nil, err
	}
	return resp.(*InfoListResult), err
}

// listPreparer prepares the List request.
func (client Client) listPreparer(accountName string, filter *string, top *int32, skip *int32, selectParameter *string, orderby *string, count *bool) (pipeline.Request, error) {
	req, err := pipeline.NewRequest("GET", client.url, nil)
	if err != nil {
		return req, pipeline.NewError(err, "failed to create request")
	}
	params := req.URL.Query()
	if filter != nil {
		params.Set("$filter", *filter)
	}
	if top != nil {
		params.Set("$top", fmt.Sprintf("%v", *top))
	}
	if skip != nil {
		params.Set("$skip", fmt.Sprintf("%v", *skip))
	}
	if selectParameter != nil {
		params.Set("$select", *selectParameter)
	}
	if orderby != nil {
		params.Set("$orderby", *orderby)
	}
	if count != nil {
		params.Set("$count", fmt.Sprintf("%v", *count))
	}
	params.Set("api-version", APIVersion)
	req.URL.RawQuery = params.Encode()
	return req, nil
}

// listResponder handles the response to the List request.
func (client Client) listResponder(resp pipeline.Response) (pipeline.Response, error) {
	err := validateResponse(resp, http.StatusOK)
	if resp == nil {
		return nil, err
	}
	result := &InfoListResult{rawResponse: resp.Response()}
	if err != nil {
		return result, err
	}
	defer resp.Response().Body.Close()
	b, err := ioutil.ReadAll(resp.Response().Body)
	if err != nil {
		return result, NewResponseError(err, resp.Response(), "failed to read response body")
	}
	if len(b) > 0 {
		err = json.Unmarshal(b, result)
		if err != nil {
			return result, NewResponseError(err, resp.Response(), "failed to unmarshal response body")
		}
	}
	return result, nil
}
