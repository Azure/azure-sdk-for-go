package job

// Copyright (c) Microsoft and contributors.  All rights reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
// http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
//
// See the License for the specific language governing permissions and
// limitations under the License.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

import (
	"context"
	"encoding/json"
	"github.com/Azure/azure-pipeline-go/pipeline"
	uuid "github.com/satori/go.uuid"
	"io/ioutil"
	"net/http"
	"net/url"
	"time"
)

// RecurrenceClient is the creates an Azure Data Lake Analytics job client.
type RecurrenceClient struct {
	ManagementClient
}

// NewRecurrenceClient creates an instance of the RecurrenceClient client.
func NewRecurrenceClient(url url.URL, p pipeline.Pipeline) RecurrenceClient {
	return RecurrenceClient{NewManagementClient(url, p)}
}

// Get gets the recurrence information for the specified recurrence ID.
//
// accountName is the Azure Data Lake Analytics account to execute job operations on. recurrenceIdentity is recurrence
// ID. startDateTime is the start date for when to get the recurrence and aggregate its data. The startDateTime and
// endDateTime can be no more than 30 days apart. endDateTime is the end date for when to get recurrence and aggregate
// its data. The startDateTime and endDateTime can be no more than 30 days apart.
func (client RecurrenceClient) Get(ctx context.Context, accountName string, recurrenceIdentity uuid.UUID, startDateTime *time.Time, endDateTime *time.Time) (*RecurrenceInformation, error) {
	req, err := client.getPreparer(accountName, recurrenceIdentity, startDateTime, endDateTime)
	if err != nil {
		return nil, err
	}
	resp, err := client.Pipeline().Do(ctx, responderPolicyFactory{responder: client.getResponder}, req)
	if err != nil {
		return nil, err
	}
	return resp.(*RecurrenceInformation), err
}

// getPreparer prepares the Get request.
func (client RecurrenceClient) getPreparer(accountName string, recurrenceIdentity uuid.UUID, startDateTime *time.Time, endDateTime *time.Time) (pipeline.Request, error) {
	req, err := pipeline.NewRequest("GET", client.url, nil)
	if err != nil {
		return req, pipeline.NewError(err, "failed to create request")
	}
	params := req.URL.Query()
	if startDateTime != nil {
		params.Set("startDateTime", (*startDateTime).Format(rfc3339Format))
	}
	if endDateTime != nil {
		params.Set("endDateTime", (*endDateTime).Format(rfc3339Format))
	}
	params.Set("api-version", APIVersion)
	req.URL.RawQuery = params.Encode()
	return req, nil
}

// getResponder handles the response to the Get request.
func (client RecurrenceClient) getResponder(resp pipeline.Response) (pipeline.Response, error) {
	err := validateResponse(resp, http.StatusOK)
	if resp == nil {
		return nil, err
	}
	result := &RecurrenceInformation{rawResponse: resp.Response()}
	if err != nil {
		return result, err
	}
	defer resp.Response().Body.Close()
	b, err := ioutil.ReadAll(resp.Response().Body)
	if err != nil {
		return result, NewResponseError(err, resp.Response(), "failed to read response body")
	}
	if len(b) > 0 {
		err = json.Unmarshal(b, result)
		if err != nil {
			return result, NewResponseError(err, resp.Response(), "failed to unmarshal response body")
		}
	}
	return result, nil
}

// List lists all recurrences.
//
// accountName is the Azure Data Lake Analytics account to execute job operations on. startDateTime is the start date
// for when to get the list of recurrences. The startDateTime and endDateTime can be no more than 30 days apart.
// endDateTime is the end date for when to get the list of recurrences. The startDateTime and endDateTime can be no
// more than 30 days apart.
func (client RecurrenceClient) List(ctx context.Context, accountName string, startDateTime *time.Time, endDateTime *time.Time) (*RecurrenceInformationListResult, error) {
	req, err := client.listPreparer(accountName, startDateTime, endDateTime)
	if err != nil {
		return nil, err
	}
	resp, err := client.Pipeline().Do(ctx, responderPolicyFactory{responder: client.listResponder}, req)
	if err != nil {
		return nil, err
	}
	return resp.(*RecurrenceInformationListResult), err
}

// listPreparer prepares the List request.
func (client RecurrenceClient) listPreparer(accountName string, startDateTime *time.Time, endDateTime *time.Time) (pipeline.Request, error) {
	req, err := pipeline.NewRequest("GET", client.url, nil)
	if err != nil {
		return req, pipeline.NewError(err, "failed to create request")
	}
	params := req.URL.Query()
	if startDateTime != nil {
		params.Set("startDateTime", (*startDateTime).Format(rfc3339Format))
	}
	if endDateTime != nil {
		params.Set("endDateTime", (*endDateTime).Format(rfc3339Format))
	}
	params.Set("api-version", APIVersion)
	req.URL.RawQuery = params.Encode()
	return req, nil
}

// listResponder handles the response to the List request.
func (client RecurrenceClient) listResponder(resp pipeline.Response) (pipeline.Response, error) {
	err := validateResponse(resp, http.StatusOK)
	if resp == nil {
		return nil, err
	}
	result := &RecurrenceInformationListResult{rawResponse: resp.Response()}
	if err != nil {
		return result, err
	}
	defer resp.Response().Body.Close()
	b, err := ioutil.ReadAll(resp.Response().Body)
	if err != nil {
		return result, NewResponseError(err, resp.Response(), "failed to read response body")
	}
	if len(b) > 0 {
		err = json.Unmarshal(b, result)
		if err != nil {
			return result, NewResponseError(err, resp.Response(), "failed to unmarshal response body")
		}
	}
	return result, nil
}
