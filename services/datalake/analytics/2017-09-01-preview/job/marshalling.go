package job

// Copyright (c) Microsoft and contributors.  All rights reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
// http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
//
// See the License for the specific language governing permissions and
// limitations under the License.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

import (
	"encoding/xml"
	"reflect"
	"time"
	"unsafe"
)

const (
	rfc3339Format = "2006-01-02T15:04:05.0000000Z07:00"
)

// used to convert times from UTC to GMT before sending across the wire
var gmt = time.FixedZone("GMT", 0)

// internal type used for marshalling time in RFC1123 format
type timeRFC1123 struct {
	time.Time
}

// MarshalText implements the encoding.TextMarshaler interface for timeRFC1123.
func (t timeRFC1123) MarshalText() ([]byte, error) {
	return []byte(t.Format(time.RFC1123)), nil
}

// UnmarshalText implements the encoding.TextUnmarshaler interface for timeRFC1123.
func (t *timeRFC1123) UnmarshalText(data []byte) (err error) {
	t.Time, err = time.Parse(time.RFC1123, string(data))
	return
}

// internal type used for marshalling time in RFC3339 format
type timeRFC3339 struct {
	time.Time
}

// MarshalText implements the encoding.TextMarshaler interface for timeRFC3339.
func (t timeRFC3339) MarshalText() ([]byte, error) {
	return []byte(t.Format(rfc3339Format)), nil
}

// UnmarshalText implements the encoding.TextUnmarshaler interface for timeRFC3339.
func (t *timeRFC3339) UnmarshalText(data []byte) (err error) {
	t.Time, err = time.Parse(rfc3339Format, string(data))
	return
}

// internal type used for marshalling
type statistics struct {
	LastUpdateTimeUtc *timeRFC3339            `json:"lastUpdateTimeUtc,omitempty"`
	FinalizingTimeUtc *timeRFC3339            `json:"finalizingTimeUtc,omitempty"`
	Stages            []StatisticsVertexStage `json:"stages,omitempty"`
}

// MarshalXML implements the xml.Marshaler interface for Statistics.
func (s Statistics) MarshalXML(e *xml.Encoder, start xml.StartElement) error {
	if reflect.TypeOf((*Statistics)(nil)).Elem().Size() != reflect.TypeOf((*statistics)(nil)).Elem().Size() {
		panic("size mismatch between Statistics and statistics")
	}
	s2 := (*statistics)(unsafe.Pointer(&s))
	return e.EncodeElement(*s2, start)
}

// UnmarshalXML implements the xml.Unmarshaler interface for Statistics.
func (s *Statistics) UnmarshalXML(d *xml.Decoder, start xml.StartElement) error {
	if reflect.TypeOf((*Statistics)(nil)).Elem().Size() != reflect.TypeOf((*statistics)(nil)).Elem().Size() {
		panic("size mismatch between Statistics and statistics")
	}
	s2 := (*statistics)(unsafe.Pointer(s))
	return d.DecodeElement(s2, &start)
}

// internal type used for marshalling
type stateAuditRecord struct {
	NewState        *string      `json:"newState,omitempty"`
	TimeStamp       *timeRFC3339 `json:"timeStamp,omitempty"`
	RequestedByUser *string      `json:"requestedByUser,omitempty"`
	Details         *string      `json:"details,omitempty"`
}

// MarshalXML implements the xml.Marshaler interface for StateAuditRecord.
func (sar StateAuditRecord) MarshalXML(e *xml.Encoder, start xml.StartElement) error {
	if reflect.TypeOf((*StateAuditRecord)(nil)).Elem().Size() != reflect.TypeOf((*stateAuditRecord)(nil)).Elem().Size() {
		panic("size mismatch between StateAuditRecord and stateAuditRecord")
	}
	sar2 := (*stateAuditRecord)(unsafe.Pointer(&sar))
	return e.EncodeElement(*sar2, start)
}

// UnmarshalXML implements the xml.Unmarshaler interface for StateAuditRecord.
func (sar *StateAuditRecord) UnmarshalXML(d *xml.Decoder, start xml.StartElement) error {
	if reflect.TypeOf((*StateAuditRecord)(nil)).Elem().Size() != reflect.TypeOf((*stateAuditRecord)(nil)).Elem().Size() {
		panic("size mismatch between StateAuditRecord and stateAuditRecord")
	}
	sar2 := (*stateAuditRecord)(unsafe.Pointer(sar))
	return d.DecodeElement(sar2, &start)
}

// internal type used for marshalling
type pipelineRunInformation struct {
	RunID          *uuid.UUID   `json:"runId,omitempty"`
	LastSubmitTime *timeRFC3339 `json:"lastSubmitTime,omitempty"`
}

// MarshalXML implements the xml.Marshaler interface for PipelineRunInformation.
func (pri PipelineRunInformation) MarshalXML(e *xml.Encoder, start xml.StartElement) error {
	if reflect.TypeOf((*PipelineRunInformation)(nil)).Elem().Size() != reflect.TypeOf((*pipelineRunInformation)(nil)).Elem().Size() {
		panic("size mismatch between PipelineRunInformation and pipelineRunInformation")
	}
	pri2 := (*pipelineRunInformation)(unsafe.Pointer(&pri))
	return e.EncodeElement(*pri2, start)
}

// UnmarshalXML implements the xml.Unmarshaler interface for PipelineRunInformation.
func (pri *PipelineRunInformation) UnmarshalXML(d *xml.Decoder, start xml.StartElement) error {
	if reflect.TypeOf((*PipelineRunInformation)(nil)).Elem().Size() != reflect.TypeOf((*pipelineRunInformation)(nil)).Elem().Size() {
		panic("size mismatch between PipelineRunInformation and pipelineRunInformation")
	}
	pri2 := (*pipelineRunInformation)(unsafe.Pointer(pri))
	return d.DecodeElement(pri2, &start)
}

// internal type used for marshalling
type pipelineInformation struct {
	PipelineID       *uuid.UUID               `json:"pipelineId,omitempty"`
	PipelineName     *string                  `json:"pipelineName,omitempty"`
	PipelineURI      *string                  `json:"pipelineUri,omitempty"`
	NumJobsFailed    *int32                   `json:"numJobsFailed,omitempty"`
	NumJobsCanceled  *int32                   `json:"numJobsCanceled,omitempty"`
	NumJobsSucceeded *int32                   `json:"numJobsSucceeded,omitempty"`
	AuHoursFailed    *float64                 `json:"auHoursFailed,omitempty"`
	AuHoursCanceled  *float64                 `json:"auHoursCanceled,omitempty"`
	AuHoursSucceeded *float64                 `json:"auHoursSucceeded,omitempty"`
	LastSubmitTime   *timeRFC3339             `json:"lastSubmitTime,omitempty"`
	Runs             []PipelineRunInformation `json:"runs,omitempty"`
	Recurrences      []uuid.UUID              `json:"recurrences,omitempty"`
}

// MarshalXML implements the xml.Marshaler interface for PipelineInformation.
func (pi PipelineInformation) MarshalXML(e *xml.Encoder, start xml.StartElement) error {
	if reflect.TypeOf((*PipelineInformation)(nil)).Elem().Size() != reflect.TypeOf((*pipelineInformation)(nil)).Elem().Size() {
		panic("size mismatch between PipelineInformation and pipelineInformation")
	}
	pi2 := (*pipelineInformation)(unsafe.Pointer(&pi))
	return e.EncodeElement(*pi2, start)
}

// UnmarshalXML implements the xml.Unmarshaler interface for PipelineInformation.
func (pi *PipelineInformation) UnmarshalXML(d *xml.Decoder, start xml.StartElement) error {
	if reflect.TypeOf((*PipelineInformation)(nil)).Elem().Size() != reflect.TypeOf((*pipelineInformation)(nil)).Elem().Size() {
		panic("size mismatch between PipelineInformation and pipelineInformation")
	}
	pi2 := (*pipelineInformation)(unsafe.Pointer(pi))
	return d.DecodeElement(pi2, &start)
}

// internal type used for marshalling
type recurrenceInformation struct {
	RecurrenceID     *uuid.UUID   `json:"recurrenceId,omitempty"`
	RecurrenceName   *string      `json:"recurrenceName,omitempty"`
	NumJobsFailed    *int32       `json:"numJobsFailed,omitempty"`
	NumJobsCanceled  *int32       `json:"numJobsCanceled,omitempty"`
	NumJobsSucceeded *int32       `json:"numJobsSucceeded,omitempty"`
	AuHoursFailed    *float64     `json:"auHoursFailed,omitempty"`
	AuHoursCanceled  *float64     `json:"auHoursCanceled,omitempty"`
	AuHoursSucceeded *float64     `json:"auHoursSucceeded,omitempty"`
	LastSubmitTime   *timeRFC3339 `json:"lastSubmitTime,omitempty"`
}

// MarshalXML implements the xml.Marshaler interface for RecurrenceInformation.
func (ri RecurrenceInformation) MarshalXML(e *xml.Encoder, start xml.StartElement) error {
	if reflect.TypeOf((*RecurrenceInformation)(nil)).Elem().Size() != reflect.TypeOf((*recurrenceInformation)(nil)).Elem().Size() {
		panic("size mismatch between RecurrenceInformation and recurrenceInformation")
	}
	ri2 := (*recurrenceInformation)(unsafe.Pointer(&ri))
	return e.EncodeElement(*ri2, start)
}

// UnmarshalXML implements the xml.Unmarshaler interface for RecurrenceInformation.
func (ri *RecurrenceInformation) UnmarshalXML(d *xml.Decoder, start xml.StartElement) error {
	if reflect.TypeOf((*RecurrenceInformation)(nil)).Elem().Size() != reflect.TypeOf((*recurrenceInformation)(nil)).Elem().Size() {
		panic("size mismatch between RecurrenceInformation and recurrenceInformation")
	}
	ri2 := (*recurrenceInformation)(unsafe.Pointer(ri))
	return d.DecodeElement(ri2, &start)
}

// internal type used for marshalling
type informationBasic struct {
	JobID               *uuid.UUID              `json:"jobId,omitempty"`
	Name                string                  `json:"name,omitempty"`
	Type                Type                    `json:"type,omitempty"`
	Submitter           *string                 `json:"submitter,omitempty"`
	DegreeOfParallelism *int32                  `json:"degreeOfParallelism,omitempty"`
	Priority            *int32                  `json:"priority,omitempty"`
	SubmitTime          *timeRFC3339            `json:"submitTime,omitempty"`
	StartTime           *timeRFC3339            `json:"startTime,omitempty"`
	EndTime             *timeRFC3339            `json:"endTime,omitempty"`
	State               StateType               `json:"state,omitempty"`
	Result              ResultType              `json:"result,omitempty"`
	LogFolder           *string                 `json:"logFolder,omitempty"`
	LogFilePatterns     []string                `json:"logFilePatterns,omitempty"`
	Related             *RelationshipProperties `json:"related,omitempty"`
	Tags                map[string]string       `json:"tags,omitempty"`
}

// MarshalXML implements the xml.Marshaler interface for InformationBasic.
func (ib InformationBasic) MarshalXML(e *xml.Encoder, start xml.StartElement) error {
	if reflect.TypeOf((*InformationBasic)(nil)).Elem().Size() != reflect.TypeOf((*informationBasic)(nil)).Elem().Size() {
		panic("size mismatch between InformationBasic and informationBasic")
	}
	ib2 := (*informationBasic)(unsafe.Pointer(&ib))
	return e.EncodeElement(*ib2, start)
}

// UnmarshalXML implements the xml.Unmarshaler interface for InformationBasic.
func (ib *InformationBasic) UnmarshalXML(d *xml.Decoder, start xml.StartElement) error {
	if reflect.TypeOf((*InformationBasic)(nil)).Elem().Size() != reflect.TypeOf((*informationBasic)(nil)).Elem().Size() {
		panic("size mismatch between InformationBasic and informationBasic")
	}
	ib2 := (*informationBasic)(unsafe.Pointer(ib))
	return d.DecodeElement(ib2, &start)
}
