package job

// Copyright (c) Microsoft and contributors.  All rights reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
// http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
//
// See the License for the specific language governing permissions and
// limitations under the License.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

import (
	"encoding/json"
	"errors"
	"github.com/Azure/go-autorest/autorest"
	"github.com/Azure/go-autorest/autorest/date"
	"github.com/Azure/go-autorest/autorest/to"
	uuid "github.com/satori/go.uuid"
	"net/http"
)

// CompileMode enumerates the values for compile mode.
type CompileMode string

const (
	// Full specifies the full state for compile mode.
	Full CompileMode = "Full"
	// Semantic specifies the semantic state for compile mode.
	Semantic CompileMode = "Semantic"
	// SingleBox specifies the single box state for compile mode.
	SingleBox CompileMode = "SingleBox"
)

// ResourceType enumerates the values for resource type.
type ResourceType string

const (
	// JobManagerResource specifies the job manager resource state for resource type.
	JobManagerResource ResourceType = "JobManagerResource"
	// JobManagerResourceInUserFolder specifies the job manager resource in user folder state for resource type.
	JobManagerResourceInUserFolder ResourceType = "JobManagerResourceInUserFolder"
	// StatisticsResource specifies the statistics resource state for resource type.
	StatisticsResource ResourceType = "StatisticsResource"
	// StatisticsResourceInUserFolder specifies the statistics resource in user folder state for resource type.
	StatisticsResourceInUserFolder ResourceType = "StatisticsResourceInUserFolder"
	// VertexResource specifies the vertex resource state for resource type.
	VertexResource ResourceType = "VertexResource"
	// VertexResourceInUserFolder specifies the vertex resource in user folder state for resource type.
	VertexResourceInUserFolder ResourceType = "VertexResourceInUserFolder"
)

// Result enumerates the values for result.
type Result string

const (
	// Cancelled specifies the cancelled state for result.
	Cancelled Result = "Cancelled"
	// Failed specifies the failed state for result.
	Failed Result = "Failed"
	// None specifies the none state for result.
	None Result = "None"
	// Succeeded specifies the succeeded state for result.
	Succeeded Result = "Succeeded"
)

// SeverityTypes enumerates the values for severity types.
type SeverityTypes string

const (
	// Deprecated specifies the deprecated state for severity types.
	Deprecated SeverityTypes = "Deprecated"
	// Error specifies the error state for severity types.
	Error SeverityTypes = "Error"
	// Info specifies the info state for severity types.
	Info SeverityTypes = "Info"
	// SevereWarning specifies the severe warning state for severity types.
	SevereWarning SeverityTypes = "SevereWarning"
	// UserWarning specifies the user warning state for severity types.
	UserWarning SeverityTypes = "UserWarning"
	// Warning specifies the warning state for severity types.
	Warning SeverityTypes = "Warning"
)

// State enumerates the values for state.
type State string

const (
	// StateAccepted specifies the state accepted state for state.
	StateAccepted State = "Accepted"
	// StateCompiling specifies the state compiling state for state.
	StateCompiling State = "Compiling"
	// StateEnded specifies the state ended state for state.
	StateEnded State = "Ended"
	// StateNew specifies the state new state for state.
	StateNew State = "New"
	// StatePaused specifies the state paused state for state.
	StatePaused State = "Paused"
	// StateQueued specifies the state queued state for state.
	StateQueued State = "Queued"
	// StateRunning specifies the state running state for state.
	StateRunning State = "Running"
	// StateScheduling specifies the state scheduling state for state.
	StateScheduling State = "Scheduling"
	// StateStarting specifies the state starting state for state.
	StateStarting State = "Starting"
	// StateWaitingForCapacity specifies the state waiting for capacity state for state.
	StateWaitingForCapacity State = "WaitingForCapacity"
)

// Type enumerates the values for type.
type Type string

const (
	// Hive specifies the hive state for type.
	Hive Type = "Hive"
	// Scope specifies the scope state for type.
	Scope Type = "Scope"
	// USQL specifies the usql state for type.
	USQL Type = "USql"
)

// BaseJobParameters is data Lake Analytics Job Parameters base class for build and submit.
type BaseJobParameters struct {
	Type       Type                `json:"type,omitempty"`
	Properties CreateJobProperties `json:"properties,omitempty"`
}

// UnmarshalJSON is the custom unmarshaler for BaseJobParameters struct.
func (bjp *BaseJobParameters) UnmarshalJSON(body []byte) error {
	var m map[string]*json.RawMessage
	err := json.Unmarshal(body, &m)
	if err != nil {
		return err
	}
	var v *json.RawMessage

	v = m["type"]
	if v != nil {
		var typeVar Type
		err = json.Unmarshal(*m["type"], &typeVar)
		if err != nil {
			return err
		}
		bjp.Type = typeVar
	}

	v = m["properties"]
	if v != nil {
		properties, err := unmarshalCreateJobProperties(*m["properties"])
		if err != nil {
			return err
		}
		bjp.Properties = properties
	}

	return nil
}

// BuildJobParameters is the parameters used to build a new Data Lake Analytics job.
type BuildJobParameters struct {
	Type       Type                `json:"type,omitempty"`
	Properties CreateJobProperties `json:"properties,omitempty"`
	Name       *string             `json:"name,omitempty"`
}

// UnmarshalJSON is the custom unmarshaler for BuildJobParameters struct.
func (bjp *BuildJobParameters) UnmarshalJSON(body []byte) error {
	var m map[string]*json.RawMessage
	err := json.Unmarshal(body, &m)
	if err != nil {
		return err
	}
	var v *json.RawMessage

	v = m["name"]
	if v != nil {
		var name string
		err = json.Unmarshal(*m["name"], &name)
		if err != nil {
			return err
		}
		bjp.Name = &name
	}

	v = m["type"]
	if v != nil {
		var typeVar Type
		err = json.Unmarshal(*m["type"], &typeVar)
		if err != nil {
			return err
		}
		bjp.Type = typeVar
	}

	v = m["properties"]
	if v != nil {
		properties, err := unmarshalCreateJobProperties(*m["properties"])
		if err != nil {
			return err
		}
		bjp.Properties = properties
	}

	return nil
}

// CreateJobParameters is the parameters used to submit a new Data Lake Analytics job.
type CreateJobParameters struct {
	Type                Type                    `json:"type,omitempty"`
	Properties          CreateJobProperties     `json:"properties,omitempty"`
	Name                *string                 `json:"name,omitempty"`
	DegreeOfParallelism *int32                  `json:"degreeOfParallelism,omitempty"`
	Priority            *int32                  `json:"priority,omitempty"`
	LogFilePatterns     *[]string               `json:"logFilePatterns,omitempty"`
	Related             *RelationshipProperties `json:"related,omitempty"`
}

// UnmarshalJSON is the custom unmarshaler for CreateJobParameters struct.
func (cjp *CreateJobParameters) UnmarshalJSON(body []byte) error {
	var m map[string]*json.RawMessage
	err := json.Unmarshal(body, &m)
	if err != nil {
		return err
	}
	var v *json.RawMessage

	v = m["name"]
	if v != nil {
		var name string
		err = json.Unmarshal(*m["name"], &name)
		if err != nil {
			return err
		}
		cjp.Name = &name
	}

	v = m["degreeOfParallelism"]
	if v != nil {
		var degreeOfParallelism int32
		err = json.Unmarshal(*m["degreeOfParallelism"], &degreeOfParallelism)
		if err != nil {
			return err
		}
		cjp.DegreeOfParallelism = &degreeOfParallelism
	}

	v = m["priority"]
	if v != nil {
		var priority int32
		err = json.Unmarshal(*m["priority"], &priority)
		if err != nil {
			return err
		}
		cjp.Priority = &priority
	}

	v = m["logFilePatterns"]
	if v != nil {
		var logFilePatterns []string
		err = json.Unmarshal(*m["logFilePatterns"], &logFilePatterns)
		if err != nil {
			return err
		}
		cjp.LogFilePatterns = &logFilePatterns
	}

	v = m["related"]
	if v != nil {
		var related RelationshipProperties
		err = json.Unmarshal(*m["related"], &related)
		if err != nil {
			return err
		}
		cjp.Related = &related
	}

	v = m["type"]
	if v != nil {
		var typeVar Type
		err = json.Unmarshal(*m["type"], &typeVar)
		if err != nil {
			return err
		}
		cjp.Type = typeVar
	}

	v = m["properties"]
	if v != nil {
		properties, err := unmarshalCreateJobProperties(*m["properties"])
		if err != nil {
			return err
		}
		cjp.Properties = properties
	}

	return nil
}

// CreateJobProperties is the common Data Lake Analytics job properties for job submission.
type CreateJobProperties interface {
	AsCreateUSQLJobProperties() (*CreateUSQLJobProperties, bool)
	AsCreateScopeJobProperties() (*CreateScopeJobProperties, bool)
}

func unmarshalCreateJobProperties(body []byte) (CreateJobProperties, error) {
	var m map[string]interface{}
	err := json.Unmarshal(body, &m)
	if err != nil {
		return nil, err
	}

	switch m["type"] {
	case string(USQL):
		var cusjp CreateUSQLJobProperties
		err := json.Unmarshal(body, &cusjp)
		return cusjp, err
	case string(Scope):
		var csjp CreateScopeJobProperties
		err := json.Unmarshal(body, &csjp)
		return csjp, err
	default:
		return nil, errors.New("Unsupported type")
	}
}
func unmarshalCreateJobPropertiesArray(body []byte) ([]CreateJobProperties, error) {
	var rawMessages []*json.RawMessage
	err := json.Unmarshal(body, &rawMessages)
	if err != nil {
		return nil, err
	}

	cjpArray := make([]CreateJobProperties, len(rawMessages))

	for index, rawMessage := range rawMessages {
		cjp, err := unmarshalCreateJobProperties(*rawMessage)
		if err != nil {
			return nil, err
		}
		cjpArray[index] = cjp
	}
	return cjpArray, nil
}

// CreateScopeJobParameters is the parameters used to submit a new Data Lake Analytics Scope job. (Only for use
// internally with Scope job type.)
type CreateScopeJobParameters struct {
	Type                Type                    `json:"type,omitempty"`
	Properties          CreateJobProperties     `json:"properties,omitempty"`
	Name                *string                 `json:"name,omitempty"`
	DegreeOfParallelism *int32                  `json:"degreeOfParallelism,omitempty"`
	Priority            *int32                  `json:"priority,omitempty"`
	LogFilePatterns     *[]string               `json:"logFilePatterns,omitempty"`
	Related             *RelationshipProperties `json:"related,omitempty"`
	Tags                *map[string]*string     `json:"tags,omitempty"`
}

// UnmarshalJSON is the custom unmarshaler for CreateScopeJobParameters struct.
func (csjp *CreateScopeJobParameters) UnmarshalJSON(body []byte) error {
	var m map[string]*json.RawMessage
	err := json.Unmarshal(body, &m)
	if err != nil {
		return err
	}
	var v *json.RawMessage

	v = m["tags"]
	if v != nil {
		var tags map[string]*string
		err = json.Unmarshal(*m["tags"], &tags)
		if err != nil {
			return err
		}
		csjp.Tags = &tags
	}

	v = m["name"]
	if v != nil {
		var name string
		err = json.Unmarshal(*m["name"], &name)
		if err != nil {
			return err
		}
		csjp.Name = &name
	}

	v = m["degreeOfParallelism"]
	if v != nil {
		var degreeOfParallelism int32
		err = json.Unmarshal(*m["degreeOfParallelism"], &degreeOfParallelism)
		if err != nil {
			return err
		}
		csjp.DegreeOfParallelism = &degreeOfParallelism
	}

	v = m["priority"]
	if v != nil {
		var priority int32
		err = json.Unmarshal(*m["priority"], &priority)
		if err != nil {
			return err
		}
		csjp.Priority = &priority
	}

	v = m["logFilePatterns"]
	if v != nil {
		var logFilePatterns []string
		err = json.Unmarshal(*m["logFilePatterns"], &logFilePatterns)
		if err != nil {
			return err
		}
		csjp.LogFilePatterns = &logFilePatterns
	}

	v = m["related"]
	if v != nil {
		var related RelationshipProperties
		err = json.Unmarshal(*m["related"], &related)
		if err != nil {
			return err
		}
		csjp.Related = &related
	}

	v = m["type"]
	if v != nil {
		var typeVar Type
		err = json.Unmarshal(*m["type"], &typeVar)
		if err != nil {
			return err
		}
		csjp.Type = typeVar
	}

	v = m["properties"]
	if v != nil {
		properties, err := unmarshalCreateJobProperties(*m["properties"])
		if err != nil {
			return err
		}
		csjp.Properties = properties
	}

	return nil
}

// CreateScopeJobProperties is scope job properties used when submitting Scope jobs.
type CreateScopeJobProperties struct {
	RuntimeVersion *string             `json:"runtimeVersion,omitempty"`
	Script         *string             `json:"script,omitempty"`
	Type           Type                `json:"type,omitempty"`
	Resources      *[]ScopeJobResource `json:"resources,omitempty"`
	Notifier       *string             `json:"notifier,omitempty"`
}

// MarshalJSON is the custom marshaler for CreateScopeJobProperties.
func (csjp CreateScopeJobProperties) MarshalJSON() ([]byte, error) {
	csjp.Type = Scope
	type Alias CreateScopeJobProperties
	return json.Marshal(&struct {
		Alias
	}{
		Alias: (Alias)(csjp),
	})
}

// AsCreateUSQLJobProperties is the CreateJobProperties implementation for CreateScopeJobProperties.
func (csjp CreateScopeJobProperties) AsCreateUSQLJobProperties() (*CreateUSQLJobProperties, bool) {
	return nil, false
}

// AsCreateScopeJobProperties is the CreateJobProperties implementation for CreateScopeJobProperties.
func (csjp CreateScopeJobProperties) AsCreateScopeJobProperties() (*CreateScopeJobProperties, bool) {
	return &csjp, true
}

// CreateUSQLJobProperties is u-SQL job properties used when submitting U-SQL jobs.
type CreateUSQLJobProperties struct {
	RuntimeVersion *string     `json:"runtimeVersion,omitempty"`
	Script         *string     `json:"script,omitempty"`
	Type           Type        `json:"type,omitempty"`
	CompileMode    CompileMode `json:"compileMode,omitempty"`
}

// MarshalJSON is the custom marshaler for CreateUSQLJobProperties.
func (cusjp CreateUSQLJobProperties) MarshalJSON() ([]byte, error) {
	cusjp.Type = USQL
	type Alias CreateUSQLJobProperties
	return json.Marshal(&struct {
		Alias
	}{
		Alias: (Alias)(cusjp),
	})
}

// AsCreateUSQLJobProperties is the CreateJobProperties implementation for CreateUSQLJobProperties.
func (cusjp CreateUSQLJobProperties) AsCreateUSQLJobProperties() (*CreateUSQLJobProperties, bool) {
	return &cusjp, true
}

// AsCreateScopeJobProperties is the CreateJobProperties implementation for CreateUSQLJobProperties.
func (cusjp CreateUSQLJobProperties) AsCreateScopeJobProperties() (*CreateScopeJobProperties, bool) {
	return nil, false
}

// DataPath is a Data Lake Analytics job data path item.
type DataPath struct {
	autorest.Response `json:"-"`
	JobID             *uuid.UUID `json:"jobId,omitempty"`
	Command           *string    `json:"command,omitempty"`
	Paths             *[]string  `json:"paths,omitempty"`
}

// Diagnostics is error diagnostic information for failed jobs.
type Diagnostics struct {
	ColumnNumber *int32        `json:"columnNumber,omitempty"`
	End          *int32        `json:"end,omitempty"`
	LineNumber   *int32        `json:"lineNumber,omitempty"`
	Message      *string       `json:"message,omitempty"`
	Severity     SeverityTypes `json:"severity,omitempty"`
	Start        *int32        `json:"start,omitempty"`
}

// ErrorDetails is the Data Lake Analytics job error details.
type ErrorDetails struct {
	Description         *string       `json:"description,omitempty"`
	Details             *string       `json:"details,omitempty"`
	EndOffset           *int32        `json:"endOffset,omitempty"`
	ErrorID             *string       `json:"errorId,omitempty"`
	FilePath            *string       `json:"filePath,omitempty"`
	HelpLink            *string       `json:"helpLink,omitempty"`
	InternalDiagnostics *string       `json:"internalDiagnostics,omitempty"`
	LineNumber          *int32        `json:"lineNumber,omitempty"`
	Message             *string       `json:"message,omitempty"`
	Resolution          *string       `json:"resolution,omitempty"`
	InnerError          *InnerError   `json:"innerError,omitempty"`
	Severity            SeverityTypes `json:"severity,omitempty"`
	Source              *string       `json:"source,omitempty"`
	StartOffset         *int32        `json:"startOffset,omitempty"`
}

// HiveJobProperties is hive job properties used when retrieving Hive jobs.
type HiveJobProperties struct {
	RuntimeVersion         *string `json:"runtimeVersion,omitempty"`
	Script                 *string `json:"script,omitempty"`
	Type                   Type    `json:"type,omitempty"`
	LogsLocation           *string `json:"logsLocation,omitempty"`
	OutputLocation         *string `json:"outputLocation,omitempty"`
	StatementCount         *int32  `json:"statementCount,omitempty"`
	ExecutedStatementCount *int32  `json:"executedStatementCount,omitempty"`
}

// MarshalJSON is the custom marshaler for HiveJobProperties.
func (hjp HiveJobProperties) MarshalJSON() ([]byte, error) {
	hjp.Type = Hive
	type Alias HiveJobProperties
	return json.Marshal(&struct {
		Alias
	}{
		Alias: (Alias)(hjp),
	})
}

// AsUSQLJobProperties is the Properties implementation for HiveJobProperties.
func (hjp HiveJobProperties) AsUSQLJobProperties() (*USQLJobProperties, bool) {
	return nil, false
}

// AsScopeJobProperties is the Properties implementation for HiveJobProperties.
func (hjp HiveJobProperties) AsScopeJobProperties() (*ScopeJobProperties, bool) {
	return nil, false
}

// AsHiveJobProperties is the Properties implementation for HiveJobProperties.
func (hjp HiveJobProperties) AsHiveJobProperties() (*HiveJobProperties, bool) {
	return &hjp, true
}

// InfoListResult is list of JobInfo items.
type InfoListResult struct {
	autorest.Response `json:"-"`
	Value             *[]InformationBasic `json:"value,omitempty"`
	NextLink          *string             `json:"nextLink,omitempty"`
}

// InfoListResultPreparer prepares a request to retrieve the next set of results. It returns
// nil if no more results exist.
func (client InfoListResult) InfoListResultPreparer() (*http.Request, error) {
	if client.NextLink == nil || len(to.String(client.NextLink)) <= 0 {
		return nil, nil
	}
	return autorest.Prepare(&http.Request{},
		autorest.AsJSON(),
		autorest.AsGet(),
		autorest.WithBaseURL(to.String(client.NextLink)))
}

// Information is the extended Data Lake Analytics job information properties returned when retrieving a specific job.
type Information struct {
	autorest.Response   `json:"-"`
	JobID               *uuid.UUID              `json:"jobId,omitempty"`
	Name                *string                 `json:"name,omitempty"`
	Type                Type                    `json:"type,omitempty"`
	Submitter           *string                 `json:"submitter,omitempty"`
	DegreeOfParallelism *int32                  `json:"degreeOfParallelism,omitempty"`
	Priority            *int32                  `json:"priority,omitempty"`
	SubmitTime          *date.Time              `json:"submitTime,omitempty"`
	StartTime           *date.Time              `json:"startTime,omitempty"`
	EndTime             *date.Time              `json:"endTime,omitempty"`
	State               State                   `json:"state,omitempty"`
	Result              Result                  `json:"result,omitempty"`
	LogFolder           *string                 `json:"logFolder,omitempty"`
	LogFilePatterns     *[]string               `json:"logFilePatterns,omitempty"`
	Related             *RelationshipProperties `json:"related,omitempty"`
	Tags                *map[string]*string     `json:"tags,omitempty"`
	ErrorMessage        *[]ErrorDetails         `json:"errorMessage,omitempty"`
	StateAuditRecords   *[]StateAuditRecord     `json:"stateAuditRecords,omitempty"`
	Properties          Properties              `json:"properties,omitempty"`
}

// UnmarshalJSON is the custom unmarshaler for Information struct.
func (i *Information) UnmarshalJSON(body []byte) error {
	var m map[string]*json.RawMessage
	err := json.Unmarshal(body, &m)
	if err != nil {
		return err
	}
	var v *json.RawMessage

	v = m["errorMessage"]
	if v != nil {
		var errorMessage []ErrorDetails
		err = json.Unmarshal(*m["errorMessage"], &errorMessage)
		if err != nil {
			return err
		}
		i.ErrorMessage = &errorMessage
	}

	v = m["stateAuditRecords"]
	if v != nil {
		var stateAuditRecords []StateAuditRecord
		err = json.Unmarshal(*m["stateAuditRecords"], &stateAuditRecords)
		if err != nil {
			return err
		}
		i.StateAuditRecords = &stateAuditRecords
	}

	v = m["properties"]
	if v != nil {
		properties, err := unmarshalProperties(*m["properties"])
		if err != nil {
			return err
		}
		i.Properties = properties
	}

	v = m["jobId"]
	if v != nil {
		var jobID uuid.UUID
		err = json.Unmarshal(*m["jobId"], &jobID)
		if err != nil {
			return err
		}
		i.JobID = &jobID
	}

	v = m["name"]
	if v != nil {
		var name string
		err = json.Unmarshal(*m["name"], &name)
		if err != nil {
			return err
		}
		i.Name = &name
	}

	v = m["type"]
	if v != nil {
		var typeVar Type
		err = json.Unmarshal(*m["type"], &typeVar)
		if err != nil {
			return err
		}
		i.Type = typeVar
	}

	v = m["submitter"]
	if v != nil {
		var submitter string
		err = json.Unmarshal(*m["submitter"], &submitter)
		if err != nil {
			return err
		}
		i.Submitter = &submitter
	}

	v = m["degreeOfParallelism"]
	if v != nil {
		var degreeOfParallelism int32
		err = json.Unmarshal(*m["degreeOfParallelism"], &degreeOfParallelism)
		if err != nil {
			return err
		}
		i.DegreeOfParallelism = &degreeOfParallelism
	}

	v = m["priority"]
	if v != nil {
		var priority int32
		err = json.Unmarshal(*m["priority"], &priority)
		if err != nil {
			return err
		}
		i.Priority = &priority
	}

	v = m["submitTime"]
	if v != nil {
		var submitTime date.Time
		err = json.Unmarshal(*m["submitTime"], &submitTime)
		if err != nil {
			return err
		}
		i.SubmitTime = &submitTime
	}

	v = m["startTime"]
	if v != nil {
		var startTime date.Time
		err = json.Unmarshal(*m["startTime"], &startTime)
		if err != nil {
			return err
		}
		i.StartTime = &startTime
	}

	v = m["endTime"]
	if v != nil {
		var endTime date.Time
		err = json.Unmarshal(*m["endTime"], &endTime)
		if err != nil {
			return err
		}
		i.EndTime = &endTime
	}

	v = m["state"]
	if v != nil {
		var state State
		err = json.Unmarshal(*m["state"], &state)
		if err != nil {
			return err
		}
		i.State = state
	}

	v = m["result"]
	if v != nil {
		var resultVar Result
		err = json.Unmarshal(*m["result"], &resultVar)
		if err != nil {
			return err
		}
		i.Result = resultVar
	}

	v = m["logFolder"]
	if v != nil {
		var logFolder string
		err = json.Unmarshal(*m["logFolder"], &logFolder)
		if err != nil {
			return err
		}
		i.LogFolder = &logFolder
	}

	v = m["logFilePatterns"]
	if v != nil {
		var logFilePatterns []string
		err = json.Unmarshal(*m["logFilePatterns"], &logFilePatterns)
		if err != nil {
			return err
		}
		i.LogFilePatterns = &logFilePatterns
	}

	v = m["related"]
	if v != nil {
		var related RelationshipProperties
		err = json.Unmarshal(*m["related"], &related)
		if err != nil {
			return err
		}
		i.Related = &related
	}

	v = m["tags"]
	if v != nil {
		var tags map[string]*string
		err = json.Unmarshal(*m["tags"], &tags)
		if err != nil {
			return err
		}
		i.Tags = &tags
	}

	return nil
}

// InformationBasic is the common Data Lake Analytics job information properties.
type InformationBasic struct {
	JobID               *uuid.UUID              `json:"jobId,omitempty"`
	Name                *string                 `json:"name,omitempty"`
	Type                Type                    `json:"type,omitempty"`
	Submitter           *string                 `json:"submitter,omitempty"`
	DegreeOfParallelism *int32                  `json:"degreeOfParallelism,omitempty"`
	Priority            *int32                  `json:"priority,omitempty"`
	SubmitTime          *date.Time              `json:"submitTime,omitempty"`
	StartTime           *date.Time              `json:"startTime,omitempty"`
	EndTime             *date.Time              `json:"endTime,omitempty"`
	State               State                   `json:"state,omitempty"`
	Result              Result                  `json:"result,omitempty"`
	LogFolder           *string                 `json:"logFolder,omitempty"`
	LogFilePatterns     *[]string               `json:"logFilePatterns,omitempty"`
	Related             *RelationshipProperties `json:"related,omitempty"`
	Tags                *map[string]*string     `json:"tags,omitempty"`
}

// InnerError is the Data Lake Analytics job error details.
type InnerError struct {
	DiagnosticCode      *int32        `json:"diagnosticCode,omitempty"`
	Severity            SeverityTypes `json:"severity,omitempty"`
	Details             *string       `json:"details,omitempty"`
	Component           *string       `json:"component,omitempty"`
	ErrorID             *string       `json:"errorId,omitempty"`
	HelpLink            *string       `json:"helpLink,omitempty"`
	InternalDiagnostics *string       `json:"internalDiagnostics,omitempty"`
	Message             *string       `json:"message,omitempty"`
	Resolution          *string       `json:"resolution,omitempty"`
	Source              *string       `json:"source,omitempty"`
	Description         *string       `json:"description,omitempty"`
	InnerError          *InnerError   `json:"innerError,omitempty"`
}

// PipelineInformation is job Pipeline Information, showing the relationship of jobs and recurrences of those jobs in a
// pipeline.
type PipelineInformation struct {
	autorest.Response `json:"-"`
	PipelineID        *uuid.UUID                `json:"pipelineId,omitempty"`
	PipelineName      *string                   `json:"pipelineName,omitempty"`
	PipelineURI       *string                   `json:"pipelineUri,omitempty"`
	NumJobsFailed     *int32                    `json:"numJobsFailed,omitempty"`
	NumJobsCanceled   *int32                    `json:"numJobsCanceled,omitempty"`
	NumJobsSucceeded  *int32                    `json:"numJobsSucceeded,omitempty"`
	AuHoursFailed     *float64                  `json:"auHoursFailed,omitempty"`
	AuHoursCanceled   *float64                  `json:"auHoursCanceled,omitempty"`
	AuHoursSucceeded  *float64                  `json:"auHoursSucceeded,omitempty"`
	LastSubmitTime    *date.Time                `json:"lastSubmitTime,omitempty"`
	Runs              *[]PipelineRunInformation `json:"runs,omitempty"`
	Recurrences       *[]uuid.UUID              `json:"recurrences,omitempty"`
}

// PipelineInformationListResult is list of job pipeline information items.
type PipelineInformationListResult struct {
	autorest.Response `json:"-"`
	Value             *[]PipelineInformation `json:"value,omitempty"`
	NextLink          *string                `json:"nextLink,omitempty"`
}

// PipelineInformationListResultPreparer prepares a request to retrieve the next set of results. It returns
// nil if no more results exist.
func (client PipelineInformationListResult) PipelineInformationListResultPreparer() (*http.Request, error) {
	if client.NextLink == nil || len(to.String(client.NextLink)) <= 0 {
		return nil, nil
	}
	return autorest.Prepare(&http.Request{},
		autorest.AsJSON(),
		autorest.AsGet(),
		autorest.WithBaseURL(to.String(client.NextLink)))
}

// PipelineRunInformation is run info for a specific job pipeline.
type PipelineRunInformation struct {
	RunID          *uuid.UUID `json:"runId,omitempty"`
	LastSubmitTime *date.Time `json:"lastSubmitTime,omitempty"`
}

// Properties is the common Data Lake Analytics job properties.
type Properties interface {
	AsUSQLJobProperties() (*USQLJobProperties, bool)
	AsScopeJobProperties() (*ScopeJobProperties, bool)
	AsHiveJobProperties() (*HiveJobProperties, bool)
}

func unmarshalProperties(body []byte) (Properties, error) {
	var m map[string]interface{}
	err := json.Unmarshal(body, &m)
	if err != nil {
		return nil, err
	}

	switch m["type"] {
	case string(USQL):
		var usjp USQLJobProperties
		err := json.Unmarshal(body, &usjp)
		return usjp, err
	case string(Scope):
		var sjp ScopeJobProperties
		err := json.Unmarshal(body, &sjp)
		return sjp, err
	case string(Hive):
		var hjp HiveJobProperties
		err := json.Unmarshal(body, &hjp)
		return hjp, err
	default:
		return nil, errors.New("Unsupported type")
	}
}
func unmarshalPropertiesArray(body []byte) ([]Properties, error) {
	var rawMessages []*json.RawMessage
	err := json.Unmarshal(body, &rawMessages)
	if err != nil {
		return nil, err
	}

	pArray := make([]Properties, len(rawMessages))

	for index, rawMessage := range rawMessages {
		p, err := unmarshalProperties(*rawMessage)
		if err != nil {
			return nil, err
		}
		pArray[index] = p
	}
	return pArray, nil
}

// RecurrenceInformation is recurrence job information for a specific recurrence.
type RecurrenceInformation struct {
	autorest.Response `json:"-"`
	RecurrenceID      *uuid.UUID `json:"recurrenceId,omitempty"`
	RecurrenceName    *string    `json:"recurrenceName,omitempty"`
	NumJobsFailed     *int32     `json:"numJobsFailed,omitempty"`
	NumJobsCanceled   *int32     `json:"numJobsCanceled,omitempty"`
	NumJobsSucceeded  *int32     `json:"numJobsSucceeded,omitempty"`
	AuHoursFailed     *float64   `json:"auHoursFailed,omitempty"`
	AuHoursCanceled   *float64   `json:"auHoursCanceled,omitempty"`
	AuHoursSucceeded  *float64   `json:"auHoursSucceeded,omitempty"`
	LastSubmitTime    *date.Time `json:"lastSubmitTime,omitempty"`
}

// RecurrenceInformationListResult is list of job recurrence information items.
type RecurrenceInformationListResult struct {
	autorest.Response `json:"-"`
	Value             *[]RecurrenceInformation `json:"value,omitempty"`
	NextLink          *string                  `json:"nextLink,omitempty"`
}

// RecurrenceInformationListResultPreparer prepares a request to retrieve the next set of results. It returns
// nil if no more results exist.
func (client RecurrenceInformationListResult) RecurrenceInformationListResultPreparer() (*http.Request, error) {
	if client.NextLink == nil || len(to.String(client.NextLink)) <= 0 {
		return nil, nil
	}
	return autorest.Prepare(&http.Request{},
		autorest.AsJSON(),
		autorest.AsGet(),
		autorest.WithBaseURL(to.String(client.NextLink)))
}

// RelationshipProperties is job relationship information properties including pipeline information, correlation
// information, etc.
type RelationshipProperties struct {
	PipelineID     *uuid.UUID `json:"pipelineId,omitempty"`
	PipelineName   *string    `json:"pipelineName,omitempty"`
	PipelineURI    *string    `json:"pipelineUri,omitempty"`
	RunID          *uuid.UUID `json:"runId,omitempty"`
	RecurrenceID   *uuid.UUID `json:"recurrenceId,omitempty"`
	RecurrenceName *string    `json:"recurrenceName,omitempty"`
}

// Resource is the Data Lake Analytics job resources.
type Resource struct {
	Name         *string      `json:"name,omitempty"`
	ResourcePath *string      `json:"resourcePath,omitempty"`
	Type         ResourceType `json:"type,omitempty"`
}

// ResourceUsageStatistics is the statistics information for resource usage.
type ResourceUsageStatistics struct {
	Average *float64 `json:"average,omitempty"`
	Minimum *int64   `json:"minimum,omitempty"`
	Maximum *int64   `json:"maximum,omitempty"`
}

// ScopeJobProperties is scope job properties used when submitting and retrieving Scope jobs. (Only for use internally
// with Scope job type.)
type ScopeJobProperties struct {
	RuntimeVersion       *string             `json:"runtimeVersion,omitempty"`
	Script               *string             `json:"script,omitempty"`
	Type                 Type                `json:"type,omitempty"`
	Resources            *[]ScopeJobResource `json:"resources,omitempty"`
	UserAlgebraPath      *string             `json:"userAlgebraPath,omitempty"`
	Notifier             *string             `json:"notifier,omitempty"`
	TotalCompilationTime *string             `json:"totalCompilationTime,omitempty"`
	TotalPausedTime      *string             `json:"totalPausedTime,omitempty"`
	TotalQueuedTime      *string             `json:"totalQueuedTime,omitempty"`
	TotalRunningTime     *string             `json:"totalRunningTime,omitempty"`
	RootProcessNodeID    *string             `json:"rootProcessNodeId,omitempty"`
	YarnApplicationID    *string             `json:"yarnApplicationId,omitempty"`
}

// MarshalJSON is the custom marshaler for ScopeJobProperties.
func (sjp ScopeJobProperties) MarshalJSON() ([]byte, error) {
	sjp.Type = Scope
	type Alias ScopeJobProperties
	return json.Marshal(&struct {
		Alias
	}{
		Alias: (Alias)(sjp),
	})
}

// AsUSQLJobProperties is the Properties implementation for ScopeJobProperties.
func (sjp ScopeJobProperties) AsUSQLJobProperties() (*USQLJobProperties, bool) {
	return nil, false
}

// AsScopeJobProperties is the Properties implementation for ScopeJobProperties.
func (sjp ScopeJobProperties) AsScopeJobProperties() (*ScopeJobProperties, bool) {
	return &sjp, true
}

// AsHiveJobProperties is the Properties implementation for ScopeJobProperties.
func (sjp ScopeJobProperties) AsHiveJobProperties() (*HiveJobProperties, bool) {
	return nil, false
}

// ScopeJobResource is the Scope job resources. (Only for use internally with Scope job type.)
type ScopeJobResource struct {
	Name *string `json:"name,omitempty"`
	Path *string `json:"path,omitempty"`
}

// StateAuditRecord is the Data Lake Analytics job state audit records for tracking the lifecycle of a job.
type StateAuditRecord struct {
	NewState        *string    `json:"newState,omitempty"`
	TimeStamp       *date.Time `json:"timeStamp,omitempty"`
	RequestedByUser *string    `json:"requestedByUser,omitempty"`
	Details         *string    `json:"details,omitempty"`
}

// Statistics is the Data Lake Analytics job execution statistics.
type Statistics struct {
	autorest.Response `json:"-"`
	LastUpdateTimeUtc *date.Time               `json:"lastUpdateTimeUtc,omitempty"`
	FinalizingTimeUtc *date.Time               `json:"finalizingTimeUtc,omitempty"`
	Stages            *[]StatisticsVertexStage `json:"stages,omitempty"`
}

// StatisticsVertex is the detailed information for a vertex.
type StatisticsVertex struct {
	Name          *string    `json:"name,omitempty"`
	VertexID      *uuid.UUID `json:"vertexId,omitempty"`
	ExecutionTime *string    `json:"executionTime,omitempty"`
	DataRead      *int64     `json:"dataRead,omitempty"`
	PeakMemUsage  *int64     `json:"peakMemUsage,omitempty"`
}

// StatisticsVertexStage is the Data Lake Analytics job statistics vertex stage information.
type StatisticsVertexStage struct {
	DataRead                        *int64                   `json:"dataRead,omitempty"`
	DataReadCrossPod                *int64                   `json:"dataReadCrossPod,omitempty"`
	DataReadIntraPod                *int64                   `json:"dataReadIntraPod,omitempty"`
	DataToRead                      *int64                   `json:"dataToRead,omitempty"`
	DataWritten                     *int64                   `json:"dataWritten,omitempty"`
	DuplicateDiscardCount           *int32                   `json:"duplicateDiscardCount,omitempty"`
	FailedCount                     *int32                   `json:"failedCount,omitempty"`
	MaxVertexDataRead               *int64                   `json:"maxVertexDataRead,omitempty"`
	MinVertexDataRead               *int64                   `json:"minVertexDataRead,omitempty"`
	ReadFailureCount                *int32                   `json:"readFailureCount,omitempty"`
	RevocationCount                 *int32                   `json:"revocationCount,omitempty"`
	RunningCount                    *int32                   `json:"runningCount,omitempty"`
	ScheduledCount                  *int32                   `json:"scheduledCount,omitempty"`
	StageName                       *string                  `json:"stageName,omitempty"`
	SucceededCount                  *int32                   `json:"succeededCount,omitempty"`
	TempDataWritten                 *int64                   `json:"tempDataWritten,omitempty"`
	TotalCount                      *int32                   `json:"totalCount,omitempty"`
	TotalFailedTime                 *string                  `json:"totalFailedTime,omitempty"`
	TotalProgress                   *int32                   `json:"totalProgress,omitempty"`
	TotalSucceededTime              *string                  `json:"totalSucceededTime,omitempty"`
	TotalPeakMemUsage               *int64                   `json:"totalPeakMemUsage,omitempty"`
	TotalExecutionTime              *string                  `json:"totalExecutionTime,omitempty"`
	MaxDataReadVertex               *StatisticsVertex        `json:"maxDataReadVertex,omitempty"`
	MaxExecutionTimeVertex          *StatisticsVertex        `json:"maxExecutionTimeVertex,omitempty"`
	MaxPeakMemUsageVertex           *StatisticsVertex        `json:"maxPeakMemUsageVertex,omitempty"`
	EstimatedVertexCPUCoreCount     *int32                   `json:"estimatedVertexCpuCoreCount,omitempty"`
	EstimatedVertexPeakCPUCoreCount *int32                   `json:"estimatedVertexPeakCpuCoreCount,omitempty"`
	EstimatedVertexMemSize          *int64                   `json:"estimatedVertexMemSize,omitempty"`
	AllocatedContainerCPUCoreCount  *ResourceUsageStatistics `json:"allocatedContainerCpuCoreCount,omitempty"`
	AllocatedContainerMemSize       *ResourceUsageStatistics `json:"allocatedContainerMemSize,omitempty"`
	UsedVertexCPUCoreCount          *ResourceUsageStatistics `json:"usedVertexCpuCoreCount,omitempty"`
	UsedVertexPeakMemSize           *ResourceUsageStatistics `json:"usedVertexPeakMemSize,omitempty"`
}

// UpdateJobParameters is the parameters that can be used to update existing Data Lake Analytics job information
// properties. (Only for use internally with Scope job type.)
type UpdateJobParameters struct {
	DegreeOfParallelism *int32              `json:"degreeOfParallelism,omitempty"`
	Priority            *int32              `json:"priority,omitempty"`
	Tags                *map[string]*string `json:"tags,omitempty"`
}

// USQLJobProperties is u-SQL job properties used when retrieving U-SQL jobs.
type USQLJobProperties struct {
	RuntimeVersion           *string        `json:"runtimeVersion,omitempty"`
	Script                   *string        `json:"script,omitempty"`
	Type                     Type           `json:"type,omitempty"`
	Resources                *[]Resource    `json:"resources,omitempty"`
	Statistics               *Statistics    `json:"statistics,omitempty"`
	DebugData                *DataPath      `json:"debugData,omitempty"`
	Diagnostics              *[]Diagnostics `json:"diagnostics,omitempty"`
	AlgebraFilePath          *string        `json:"algebraFilePath,omitempty"`
	TotalCompilationTime     *string        `json:"totalCompilationTime,omitempty"`
	TotalPausedTime          *string        `json:"totalPausedTime,omitempty"`
	TotalQueuedTime          *string        `json:"totalQueuedTime,omitempty"`
	TotalRunningTime         *string        `json:"totalRunningTime,omitempty"`
	RootProcessNodeID        *string        `json:"rootProcessNodeId,omitempty"`
	YarnApplicationID        *string        `json:"yarnApplicationId,omitempty"`
	YarnApplicationTimeStamp *int64         `json:"yarnApplicationTimeStamp,omitempty"`
	CompileMode              CompileMode    `json:"compileMode,omitempty"`
}

// MarshalJSON is the custom marshaler for USQLJobProperties.
func (usjp USQLJobProperties) MarshalJSON() ([]byte, error) {
	usjp.Type = USQL
	type Alias USQLJobProperties
	return json.Marshal(&struct {
		Alias
	}{
		Alias: (Alias)(usjp),
	})
}

// AsUSQLJobProperties is the Properties implementation for USQLJobProperties.
func (usjp USQLJobProperties) AsUSQLJobProperties() (*USQLJobProperties, bool) {
	return &usjp, true
}

// AsScopeJobProperties is the Properties implementation for USQLJobProperties.
func (usjp USQLJobProperties) AsScopeJobProperties() (*ScopeJobProperties, bool) {
	return nil, false
}

// AsHiveJobProperties is the Properties implementation for USQLJobProperties.
func (usjp USQLJobProperties) AsHiveJobProperties() (*HiveJobProperties, bool) {
	return nil, false
}
