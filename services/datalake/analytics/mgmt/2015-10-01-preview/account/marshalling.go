package account

// Copyright (c) Microsoft and contributors.  All rights reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
// http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
//
// See the License for the specific language governing permissions and
// limitations under the License.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

import (
	"encoding/xml"
	"reflect"
	"time"
	"unsafe"
)

const (
	rfc3339Format = "2006-01-02T15:04:05.0000000Z07:00"
)

// used to convert times from UTC to GMT before sending across the wire
var gmt = time.FixedZone("GMT", 0)

// internal type used for marshalling time in RFC1123 format
type timeRFC1123 struct {
	time.Time
}

// MarshalText implements the encoding.TextMarshaler interface for timeRFC1123.
func (t timeRFC1123) MarshalText() ([]byte, error) {
	return []byte(t.Format(time.RFC1123)), nil
}

// UnmarshalText implements the encoding.TextUnmarshaler interface for timeRFC1123.
func (t *timeRFC1123) UnmarshalText(data []byte) (err error) {
	t.Time, err = time.Parse(time.RFC1123, string(data))
	return
}

// internal type used for marshalling time in RFC3339 format
type timeRFC3339 struct {
	time.Time
}

// MarshalText implements the encoding.TextMarshaler interface for timeRFC3339.
func (t timeRFC3339) MarshalText() ([]byte, error) {
	return []byte(t.Format(rfc3339Format)), nil
}

// UnmarshalText implements the encoding.TextUnmarshaler interface for timeRFC3339.
func (t *timeRFC3339) UnmarshalText(data []byte) (err error) {
	t.Time, err = time.Parse(rfc3339Format, string(data))
	return
}

// internal type used for marshalling
type blobContainerProperties struct {
	LastModifiedTime *timeRFC3339 `json:"lastModifiedTime,omitempty"`
}

// MarshalXML implements the xml.Marshaler interface for BlobContainerProperties.
func (bcp BlobContainerProperties) MarshalXML(e *xml.Encoder, start xml.StartElement) error {
	if reflect.TypeOf((*BlobContainerProperties)(nil)).Elem().Size() != reflect.TypeOf((*blobContainerProperties)(nil)).Elem().Size() {
		panic("size mismatch between BlobContainerProperties and blobContainerProperties")
	}
	bcp2 := (*blobContainerProperties)(unsafe.Pointer(&bcp))
	return e.EncodeElement(*bcp2, start)
}

// UnmarshalXML implements the xml.Unmarshaler interface for BlobContainerProperties.
func (bcp *BlobContainerProperties) UnmarshalXML(d *xml.Decoder, start xml.StartElement) error {
	if reflect.TypeOf((*BlobContainerProperties)(nil)).Elem().Size() != reflect.TypeOf((*blobContainerProperties)(nil)).Elem().Size() {
		panic("size mismatch between BlobContainerProperties and blobContainerProperties")
	}
	bcp2 := (*blobContainerProperties)(unsafe.Pointer(bcp))
	return d.DecodeElement(bcp2, &start)
}

// internal type used for marshalling
type dataLakeAnalyticsAccountProperties struct {
	ProvisioningState           DataLakeAnalyticsAccountStatusType `json:"provisioningState,omitempty"`
	State                       DataLakeAnalyticsAccountStateType  `json:"state,omitempty"`
	DefaultDataLakeStoreAccount *string                            `json:"defaultDataLakeStoreAccount,omitempty"`
	MaxDegreeOfParallelism      *int32                             `json:"maxDegreeOfParallelism,omitempty"`
	MaxJobCount                 *int32                             `json:"maxJobCount,omitempty"`
	DataLakeStoreAccounts       []DataLakeStoreAccountInfo         `json:"dataLakeStoreAccounts,omitempty"`
	StorageAccounts             []StorageAccountInfo               `json:"storageAccounts,omitempty"`
	CreationTime                *timeRFC3339                       `json:"creationTime,omitempty"`
	LastModifiedTime            *timeRFC3339                       `json:"lastModifiedTime,omitempty"`
	Endpoint                    *string                            `json:"endpoint,omitempty"`
}

// MarshalXML implements the xml.Marshaler interface for DataLakeAnalyticsAccountProperties.
func (dlaap DataLakeAnalyticsAccountProperties) MarshalXML(e *xml.Encoder, start xml.StartElement) error {
	if reflect.TypeOf((*DataLakeAnalyticsAccountProperties)(nil)).Elem().Size() != reflect.TypeOf((*dataLakeAnalyticsAccountProperties)(nil)).Elem().Size() {
		panic("size mismatch between DataLakeAnalyticsAccountProperties and dataLakeAnalyticsAccountProperties")
	}
	dlaap2 := (*dataLakeAnalyticsAccountProperties)(unsafe.Pointer(&dlaap))
	return e.EncodeElement(*dlaap2, start)
}

// UnmarshalXML implements the xml.Unmarshaler interface for DataLakeAnalyticsAccountProperties.
func (dlaap *DataLakeAnalyticsAccountProperties) UnmarshalXML(d *xml.Decoder, start xml.StartElement) error {
	if reflect.TypeOf((*DataLakeAnalyticsAccountProperties)(nil)).Elem().Size() != reflect.TypeOf((*dataLakeAnalyticsAccountProperties)(nil)).Elem().Size() {
		panic("size mismatch between DataLakeAnalyticsAccountProperties and dataLakeAnalyticsAccountProperties")
	}
	dlaap2 := (*dataLakeAnalyticsAccountProperties)(unsafe.Pointer(dlaap))
	return d.DecodeElement(dlaap2, &start)
}
