package account

// Copyright (c) Microsoft and contributors.  All rights reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
// http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
//
// See the License for the specific language governing permissions and
// limitations under the License.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

import (
	"bytes"
	"context"
	"encoding/json"
	"fmt"
	"github.com/Azure/azure-pipeline-go/pipeline"
	"io/ioutil"
	"net/http"
)

// AccountsClient is the creates an Azure Data Lake Analytics account management client.
type AccountsClient struct {
	ManagementClient
}

// NewAccountsClient creates an instance of the AccountsClient client.
func NewAccountsClient(p pipeline.Pipeline) AccountsClient {
	return AccountsClient{NewManagementClient(p)}
}

// CheckNameAvailability checks whether the specified account name is available or taken.
//
// location is the resource location without whitespace. parameters is parameters supplied to check the Data Lake
// Analytics account name availability.
func (client AccountsClient) CheckNameAvailability(ctx context.Context, location string, parameters CheckNameAvailabilityParameters) (*NameAvailabilityInformation, error) {
	if err := validate([]validation{
		{targetValue: parameters,
			constraints: []constraint{{target: "parameters.Name", name: null, rule: true, chain: nil},
				{target: "parameters.Type", name: null, rule: true, chain: nil}}}}); err != nil {
		return nil, err
	}
	req, err := client.checkNameAvailabilityPreparer(location, parameters)
	if err != nil {
		return nil, err
	}
	resp, err := client.Pipeline().Do(ctx, responderPolicyFactory{responder: client.checkNameAvailabilityResponder}, req)
	if err != nil {
		return nil, err
	}
	return resp.(*NameAvailabilityInformation), err
}

// checkNameAvailabilityPreparer prepares the CheckNameAvailability request.
func (client AccountsClient) checkNameAvailabilityPreparer(location string, parameters CheckNameAvailabilityParameters) (pipeline.Request, error) {
	u := client.url
	u.Path = "/subscriptions/{subscriptionId}/providers/Microsoft.DataLakeAnalytics/locations/{location}/checkNameAvailability"
	req, err := pipeline.NewRequest("POST", u, nil)
	if err != nil {
		return req, pipeline.NewError(err, "failed to create request")
	}
	params := req.URL.Query()
	params.Set("api-version", APIVersion)
	req.URL.RawQuery = params.Encode()
	b, err := json.Marshal(parameters)
	if err != nil {
		return req, pipeline.NewError(err, "failed to marshal request body")
	}
	req.Header.Set("Content-Type", "application/json")
	err = req.SetBody(bytes.NewReader(b))
	if err != nil {
		return req, pipeline.NewError(err, "failed to set request body")
	}
	return req, nil
}

// checkNameAvailabilityResponder handles the response to the CheckNameAvailability request.
func (client AccountsClient) checkNameAvailabilityResponder(resp pipeline.Response) (pipeline.Response, error) {
	err := validateResponse(resp, http.StatusOK)
	if resp == nil {
		return nil, err
	}
	result := &NameAvailabilityInformation{rawResponse: resp.Response()}
	if err != nil {
		return result, err
	}
	defer resp.Response().Body.Close()
	b, err := ioutil.ReadAll(resp.Response().Body)
	if err != nil {
		return result, NewResponseError(err, resp.Response(), "failed to read response body")
	}
	if len(b) > 0 {
		err = json.Unmarshal(b, result)
		if err != nil {
			return result, NewResponseError(err, resp.Response(), "failed to unmarshal response body")
		}
	}
	return result, nil
}

// Create creates the specified Data Lake Analytics account. This supplies the user with computation services for Data
// Lake Analytics workloads. This method may poll for completion. Polling can be canceled by passing the cancel channel
// argument. The channel will be used to cancel polling and any outstanding HTTP requests.
//
// resourceGroupName is the name of the Azure resource group. accountName is the name of the Data Lake Analytics
// account. parameters is parameters supplied to create a new Data Lake Analytics account.
func (client AccountsClient) Create(ctx context.Context, resourceGroupName string, accountName string, parameters CreateDataLakeAnalyticsAccountParameters) (*DataLakeAnalyticsAccount, error) {
	if err := validate([]validation{
		{targetValue: parameters,
			constraints: []constraint{{target: "parameters.Location", name: null, rule: true, chain: nil},
				{target: "parameters.CreateDataLakeAnalyticsAccountProperties", name: null, rule: true,
					chain: []constraint{{target: "parameters.CreateDataLakeAnalyticsAccountProperties.DefaultDataLakeStoreAccount", name: null, rule: true, chain: nil},
						{target: "parameters.CreateDataLakeAnalyticsAccountProperties.DataLakeStoreAccounts", name: null, rule: true, chain: nil},
						{target: "parameters.CreateDataLakeAnalyticsAccountProperties.MaxJobCount", name: null, rule: false,
							chain: []constraint{{target: "parameters.CreateDataLakeAnalyticsAccountProperties.MaxJobCount", name: inclusiveMinimum, rule: 1, chain: nil}}},
						{target: "parameters.CreateDataLakeAnalyticsAccountProperties.MaxDegreeOfParallelism", name: null, rule: false,
							chain: []constraint{{target: "parameters.CreateDataLakeAnalyticsAccountProperties.MaxDegreeOfParallelism", name: inclusiveMinimum, rule: 1, chain: nil}}},
						{target: "parameters.CreateDataLakeAnalyticsAccountProperties.MaxDegreeOfParallelismPerJob", name: null, rule: false,
							chain: []constraint{{target: "parameters.CreateDataLakeAnalyticsAccountProperties.MaxDegreeOfParallelismPerJob", name: inclusiveMinimum, rule: 1, chain: nil}}},
						{target: "parameters.CreateDataLakeAnalyticsAccountProperties.MinPriorityPerJob", name: null, rule: false,
							chain: []constraint{{target: "parameters.CreateDataLakeAnalyticsAccountProperties.MinPriorityPerJob", name: inclusiveMinimum, rule: 1, chain: nil}}},
						{target: "parameters.CreateDataLakeAnalyticsAccountProperties.QueryStoreRetention", name: null, rule: false,
							chain: []constraint{{target: "parameters.CreateDataLakeAnalyticsAccountProperties.QueryStoreRetention", name: inclusiveMaximum, rule: 180, chain: nil},
								{target: "parameters.CreateDataLakeAnalyticsAccountProperties.QueryStoreRetention", name: inclusiveMinimum, rule: 1, chain: nil},
							}},
					}}}}}); err != nil {
		return nil, err
	}
	req, err := client.createPreparer(resourceGroupName, accountName, parameters)
	if err != nil {
		return nil, err
	}
	resp, err := client.Pipeline().Do(ctx, responderPolicyFactory{responder: client.createResponder}, req)
	if err != nil {
		return nil, err
	}
	return resp.(*DataLakeAnalyticsAccount), err
}

// createPreparer prepares the Create request.
func (client AccountsClient) createPreparer(resourceGroupName string, accountName string, parameters CreateDataLakeAnalyticsAccountParameters) (pipeline.Request, error) {
	u := client.url
	u.Path = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DataLakeAnalytics/accounts/{accountName}"
	req, err := pipeline.NewRequest("PUT", u, nil)
	if err != nil {
		return req, pipeline.NewError(err, "failed to create request")
	}
	params := req.URL.Query()
	params.Set("api-version", APIVersion)
	req.URL.RawQuery = params.Encode()
	b, err := json.Marshal(parameters)
	if err != nil {
		return req, pipeline.NewError(err, "failed to marshal request body")
	}
	req.Header.Set("Content-Type", "application/json")
	err = req.SetBody(bytes.NewReader(b))
	if err != nil {
		return req, pipeline.NewError(err, "failed to set request body")
	}
	return req, nil
}

// createResponder handles the response to the Create request.
func (client AccountsClient) createResponder(resp pipeline.Response) (pipeline.Response, error) {
	err := validateResponse(resp, http.StatusOK, http.StatusCreated)
	if resp == nil {
		return nil, err
	}
	result := &DataLakeAnalyticsAccount{rawResponse: resp.Response()}
	if err != nil {
		return result, err
	}
	defer resp.Response().Body.Close()
	b, err := ioutil.ReadAll(resp.Response().Body)
	if err != nil {
		return result, NewResponseError(err, resp.Response(), "failed to read response body")
	}
	if len(b) > 0 {
		err = json.Unmarshal(b, result)
		if err != nil {
			return result, NewResponseError(err, resp.Response(), "failed to unmarshal response body")
		}
	}
	return result, nil
}

// Delete begins the delete process for the Data Lake Analytics account object specified by the account name. This
// method may poll for completion. Polling can be canceled by passing the cancel channel argument. The channel will be
// used to cancel polling and any outstanding HTTP requests.
//
// resourceGroupName is the name of the Azure resource group. accountName is the name of the Data Lake Analytics
// account.
func (client AccountsClient) Delete(ctx context.Context, resourceGroupName string, accountName string) (*http.Response, error) {
	req, err := client.deletePreparer(resourceGroupName, accountName)
	if err != nil {
		return nil, err
	}
	resp, err := client.Pipeline().Do(ctx, responderPolicyFactory{responder: client.deleteResponder}, req)
	if err != nil {
		return nil, err
	}
	return resp.Response(), err
}

// deletePreparer prepares the Delete request.
func (client AccountsClient) deletePreparer(resourceGroupName string, accountName string) (pipeline.Request, error) {
	u := client.url
	u.Path = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DataLakeAnalytics/accounts/{accountName}"
	req, err := pipeline.NewRequest("DELETE", u, nil)
	if err != nil {
		return req, pipeline.NewError(err, "failed to create request")
	}
	params := req.URL.Query()
	params.Set("api-version", APIVersion)
	req.URL.RawQuery = params.Encode()
	return req, nil
}

// deleteResponder handles the response to the Delete request.
func (client AccountsClient) deleteResponder(resp pipeline.Response) (pipeline.Response, error) {
	err := validateResponse(resp, http.StatusOK, http.StatusAccepted, http.StatusNoContent)
	if resp == nil {
		return nil, err
	}
	return resp, err
}

// Get gets details of the specified Data Lake Analytics account.
//
// resourceGroupName is the name of the Azure resource group. accountName is the name of the Data Lake Analytics
// account.
func (client AccountsClient) Get(ctx context.Context, resourceGroupName string, accountName string) (*DataLakeAnalyticsAccount, error) {
	req, err := client.getPreparer(resourceGroupName, accountName)
	if err != nil {
		return nil, err
	}
	resp, err := client.Pipeline().Do(ctx, responderPolicyFactory{responder: client.getResponder}, req)
	if err != nil {
		return nil, err
	}
	return resp.(*DataLakeAnalyticsAccount), err
}

// getPreparer prepares the Get request.
func (client AccountsClient) getPreparer(resourceGroupName string, accountName string) (pipeline.Request, error) {
	u := client.url
	u.Path = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DataLakeAnalytics/accounts/{accountName}"
	req, err := pipeline.NewRequest("GET", u, nil)
	if err != nil {
		return req, pipeline.NewError(err, "failed to create request")
	}
	params := req.URL.Query()
	params.Set("api-version", APIVersion)
	req.URL.RawQuery = params.Encode()
	return req, nil
}

// getResponder handles the response to the Get request.
func (client AccountsClient) getResponder(resp pipeline.Response) (pipeline.Response, error) {
	err := validateResponse(resp, http.StatusOK)
	if resp == nil {
		return nil, err
	}
	result := &DataLakeAnalyticsAccount{rawResponse: resp.Response()}
	if err != nil {
		return result, err
	}
	defer resp.Response().Body.Close()
	b, err := ioutil.ReadAll(resp.Response().Body)
	if err != nil {
		return result, NewResponseError(err, resp.Response(), "failed to read response body")
	}
	if len(b) > 0 {
		err = json.Unmarshal(b, result)
		if err != nil {
			return result, NewResponseError(err, resp.Response(), "failed to unmarshal response body")
		}
	}
	return result, nil
}

// List gets the first page of Data Lake Analytics accounts, if any, within the current subscription. This includes a
// link to the next page, if any.
//
// filter is oData filter. Optional. top is the number of items to return. Optional. skip is the number of items to
// skip over before returning elements. Optional. selectParameter is oData Select statement. Limits the properties on
// each entry to just those requested, e.g. Categories?$select=CategoryName,Description. Optional. orderby is orderBy
// clause. One or more comma-separated expressions with an optional "asc" (the default) or "desc" depending on the
// order you'd like the values sorted, e.g. Categories?$orderby=CategoryName desc. Optional. count is the Boolean value
// of true or false to request a count of the matching resources included with the resources in the response, e.g.
// Categories?$count=true. Optional.
func (client AccountsClient) List(ctx context.Context, filter *string, top *int32, skip *int32, selectParameter *string, orderby *string, count *bool) (*DataLakeAnalyticsAccountListResult, error) {
	if err := validate([]validation{
		{targetValue: top,
			constraints: []constraint{{target: "top", name: null, rule: false,
				chain: []constraint{{target: "top", name: inclusiveMinimum, rule: 1, chain: nil}}}}},
		{targetValue: skip,
			constraints: []constraint{{target: "skip", name: null, rule: false,
				chain: []constraint{{target: "skip", name: inclusiveMinimum, rule: 1, chain: nil}}}}}}); err != nil {
		return nil, err
	}
	req, err := client.listPreparer(filter, top, skip, selectParameter, orderby, count)
	if err != nil {
		return nil, err
	}
	resp, err := client.Pipeline().Do(ctx, responderPolicyFactory{responder: client.listResponder}, req)
	if err != nil {
		return nil, err
	}
	return resp.(*DataLakeAnalyticsAccountListResult), err
}

// listPreparer prepares the List request.
func (client AccountsClient) listPreparer(filter *string, top *int32, skip *int32, selectParameter *string, orderby *string, count *bool) (pipeline.Request, error) {
	u := client.url
	u.Path = "/subscriptions/{subscriptionId}/providers/Microsoft.DataLakeAnalytics/accounts"
	req, err := pipeline.NewRequest("GET", u, nil)
	if err != nil {
		return req, pipeline.NewError(err, "failed to create request")
	}
	params := req.URL.Query()
	if filter != nil {
		params.Set("$filter", *filter)
	}
	if top != nil {
		params.Set("$top", fmt.Sprintf("%v", *top))
	}
	if skip != nil {
		params.Set("$skip", fmt.Sprintf("%v", *skip))
	}
	if selectParameter != nil {
		params.Set("$select", *selectParameter)
	}
	if orderby != nil {
		params.Set("$orderby", *orderby)
	}
	if count != nil {
		params.Set("$count", fmt.Sprintf("%v", *count))
	}
	params.Set("api-version", APIVersion)
	req.URL.RawQuery = params.Encode()
	return req, nil
}

// listResponder handles the response to the List request.
func (client AccountsClient) listResponder(resp pipeline.Response) (pipeline.Response, error) {
	err := validateResponse(resp, http.StatusOK)
	if resp == nil {
		return nil, err
	}
	result := &DataLakeAnalyticsAccountListResult{rawResponse: resp.Response()}
	if err != nil {
		return result, err
	}
	defer resp.Response().Body.Close()
	b, err := ioutil.ReadAll(resp.Response().Body)
	if err != nil {
		return result, NewResponseError(err, resp.Response(), "failed to read response body")
	}
	if len(b) > 0 {
		err = json.Unmarshal(b, result)
		if err != nil {
			return result, NewResponseError(err, resp.Response(), "failed to unmarshal response body")
		}
	}
	return result, nil
}

// ListByResourceGroup gets the first page of Data Lake Analytics accounts, if any, within a specific resource group.
// This includes a link to the next page, if any.
//
// resourceGroupName is the name of the Azure resource group. filter is oData filter. Optional. top is the number of
// items to return. Optional. skip is the number of items to skip over before returning elements. Optional.
// selectParameter is oData Select statement. Limits the properties on each entry to just those requested, e.g.
// Categories?$select=CategoryName,Description. Optional. orderby is orderBy clause. One or more comma-separated
// expressions with an optional "asc" (the default) or "desc" depending on the order you'd like the values sorted, e.g.
// Categories?$orderby=CategoryName desc. Optional. count is the Boolean value of true or false to request a count of
// the matching resources included with the resources in the response, e.g. Categories?$count=true. Optional.
func (client AccountsClient) ListByResourceGroup(ctx context.Context, resourceGroupName string, filter *string, top *int32, skip *int32, selectParameter *string, orderby *string, count *bool) (*DataLakeAnalyticsAccountListResult, error) {
	if err := validate([]validation{
		{targetValue: top,
			constraints: []constraint{{target: "top", name: null, rule: false,
				chain: []constraint{{target: "top", name: inclusiveMinimum, rule: 1, chain: nil}}}}},
		{targetValue: skip,
			constraints: []constraint{{target: "skip", name: null, rule: false,
				chain: []constraint{{target: "skip", name: inclusiveMinimum, rule: 1, chain: nil}}}}}}); err != nil {
		return nil, err
	}
	req, err := client.listByResourceGroupPreparer(resourceGroupName, filter, top, skip, selectParameter, orderby, count)
	if err != nil {
		return nil, err
	}
	resp, err := client.Pipeline().Do(ctx, responderPolicyFactory{responder: client.listByResourceGroupResponder}, req)
	if err != nil {
		return nil, err
	}
	return resp.(*DataLakeAnalyticsAccountListResult), err
}

// listByResourceGroupPreparer prepares the ListByResourceGroup request.
func (client AccountsClient) listByResourceGroupPreparer(resourceGroupName string, filter *string, top *int32, skip *int32, selectParameter *string, orderby *string, count *bool) (pipeline.Request, error) {
	u := client.url
	u.Path = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DataLakeAnalytics/accounts"
	req, err := pipeline.NewRequest("GET", u, nil)
	if err != nil {
		return req, pipeline.NewError(err, "failed to create request")
	}
	params := req.URL.Query()
	if filter != nil {
		params.Set("$filter", *filter)
	}
	if top != nil {
		params.Set("$top", fmt.Sprintf("%v", *top))
	}
	if skip != nil {
		params.Set("$skip", fmt.Sprintf("%v", *skip))
	}
	if selectParameter != nil {
		params.Set("$select", *selectParameter)
	}
	if orderby != nil {
		params.Set("$orderby", *orderby)
	}
	if count != nil {
		params.Set("$count", fmt.Sprintf("%v", *count))
	}
	params.Set("api-version", APIVersion)
	req.URL.RawQuery = params.Encode()
	return req, nil
}

// listByResourceGroupResponder handles the response to the ListByResourceGroup request.
func (client AccountsClient) listByResourceGroupResponder(resp pipeline.Response) (pipeline.Response, error) {
	err := validateResponse(resp, http.StatusOK)
	if resp == nil {
		return nil, err
	}
	result := &DataLakeAnalyticsAccountListResult{rawResponse: resp.Response()}
	if err != nil {
		return result, err
	}
	defer resp.Response().Body.Close()
	b, err := ioutil.ReadAll(resp.Response().Body)
	if err != nil {
		return result, NewResponseError(err, resp.Response(), "failed to read response body")
	}
	if len(b) > 0 {
		err = json.Unmarshal(b, result)
		if err != nil {
			return result, NewResponseError(err, resp.Response(), "failed to unmarshal response body")
		}
	}
	return result, nil
}

// Update updates the Data Lake Analytics account object specified by the accountName with the contents of the account
// object. This method may poll for completion. Polling can be canceled by passing the cancel channel argument. The
// channel will be used to cancel polling and any outstanding HTTP requests.
//
// resourceGroupName is the name of the Azure resource group. accountName is the name of the Data Lake Analytics
// account. parameters is parameters supplied to the update Data Lake Analytics account operation.
func (client AccountsClient) Update(ctx context.Context, resourceGroupName string, accountName string, parameters *UpdateDataLakeAnalyticsAccountParameters) (*DataLakeAnalyticsAccount, error) {
	req, err := client.updatePreparer(resourceGroupName, accountName, parameters)
	if err != nil {
		return nil, err
	}
	resp, err := client.Pipeline().Do(ctx, responderPolicyFactory{responder: client.updateResponder}, req)
	if err != nil {
		return nil, err
	}
	return resp.(*DataLakeAnalyticsAccount), err
}

// updatePreparer prepares the Update request.
func (client AccountsClient) updatePreparer(resourceGroupName string, accountName string, parameters *UpdateDataLakeAnalyticsAccountParameters) (pipeline.Request, error) {
	u := client.url
	u.Path = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DataLakeAnalytics/accounts/{accountName}"
	req, err := pipeline.NewRequest("PATCH", u, nil)
	if err != nil {
		return req, pipeline.NewError(err, "failed to create request")
	}
	params := req.URL.Query()
	params.Set("api-version", APIVersion)
	req.URL.RawQuery = params.Encode()
	b, err := json.Marshal(parameters)
	if err != nil {
		return req, pipeline.NewError(err, "failed to marshal request body")
	}
	req.Header.Set("Content-Type", "application/json")
	err = req.SetBody(bytes.NewReader(b))
	if err != nil {
		return req, pipeline.NewError(err, "failed to set request body")
	}
	return req, nil
}

// updateResponder handles the response to the Update request.
func (client AccountsClient) updateResponder(resp pipeline.Response) (pipeline.Response, error) {
	err := validateResponse(resp, http.StatusOK, http.StatusCreated, http.StatusAccepted)
	if resp == nil {
		return nil, err
	}
	result := &DataLakeAnalyticsAccount{rawResponse: resp.Response()}
	if err != nil {
		return result, err
	}
	defer resp.Response().Body.Close()
	b, err := ioutil.ReadAll(resp.Response().Body)
	if err != nil {
		return result, NewResponseError(err, resp.Response(), "failed to read response body")
	}
	if len(b) > 0 {
		err = json.Unmarshal(b, result)
		if err != nil {
			return result, NewResponseError(err, resp.Response(), "failed to unmarshal response body")
		}
	}
	return result, nil
}
