package account

// Copyright (c) Microsoft and contributors.  All rights reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
// http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
//
// See the License for the specific language governing permissions and
// limitations under the License.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

import (
	uuid "github.com/satori/go.uuid"
	"net/http"
	"time"
)

// Marker represents an opaque value used in paged responses.
type Marker struct {
	val *string
}

// NotDone returns true if the list enumeration should be started or is not yet complete. Specifically, NotDone returns true
// for a just-initialized (zero value) Marker indicating that you should make an initial request to get a result portion from
// the service. NotDone also returns true whenever the service returns an interim result portion. NotDone returns false only
// after the service has returned the final result portion.
func (m Marker) NotDone() bool {
	return m.val == nil || *m.val != ""
}

// UnmarshalXML implements the xml.Unmarshaler interface for Marker.
func (m *Marker) UnmarshalXML(d *xml.Decoder, start xml.StartElement) error {
	var out string
	err := d.DecodeElement(&out, &start)
	m.val = &out
	return err
}

// AADObjectType enumerates the values for aad object type.
type AADObjectType string

const (
	// AADObjectGroup ...
	AADObjectGroup AADObjectType = "Group"
	// AADObjectNone represents an empty AADObjectType.
	AADObjectNone AADObjectType = ""
	// AADObjectServicePrincipal ...
	AADObjectServicePrincipal AADObjectType = "ServicePrincipal"
	// AADObjectUser ...
	AADObjectUser AADObjectType = "User"
)

// DataLakeAnalyticsAccountStateType enumerates the values for data lake analytics account state.
type DataLakeAnalyticsAccountStateType string

const (
	// DataLakeAnalyticsAccountStateActive ...
	DataLakeAnalyticsAccountStateActive DataLakeAnalyticsAccountStateType = "Active"
	// DataLakeAnalyticsAccountStateNone represents an empty DataLakeAnalyticsAccountStateType.
	DataLakeAnalyticsAccountStateNone DataLakeAnalyticsAccountStateType = ""
	// DataLakeAnalyticsAccountStateSuspended ...
	DataLakeAnalyticsAccountStateSuspended DataLakeAnalyticsAccountStateType = "Suspended"
)

// DataLakeAnalyticsAccountStatusType enumerates the values for data lake analytics account status.
type DataLakeAnalyticsAccountStatusType string

const (
	// DataLakeAnalyticsAccountStatusCanceled ...
	DataLakeAnalyticsAccountStatusCanceled DataLakeAnalyticsAccountStatusType = "Canceled"
	// DataLakeAnalyticsAccountStatusCreating ...
	DataLakeAnalyticsAccountStatusCreating DataLakeAnalyticsAccountStatusType = "Creating"
	// DataLakeAnalyticsAccountStatusDeleted ...
	DataLakeAnalyticsAccountStatusDeleted DataLakeAnalyticsAccountStatusType = "Deleted"
	// DataLakeAnalyticsAccountStatusDeleting ...
	DataLakeAnalyticsAccountStatusDeleting DataLakeAnalyticsAccountStatusType = "Deleting"
	// DataLakeAnalyticsAccountStatusFailed ...
	DataLakeAnalyticsAccountStatusFailed DataLakeAnalyticsAccountStatusType = "Failed"
	// DataLakeAnalyticsAccountStatusNone represents an empty DataLakeAnalyticsAccountStatusType.
	DataLakeAnalyticsAccountStatusNone DataLakeAnalyticsAccountStatusType = ""
	// DataLakeAnalyticsAccountStatusPatching ...
	DataLakeAnalyticsAccountStatusPatching DataLakeAnalyticsAccountStatusType = "Patching"
	// DataLakeAnalyticsAccountStatusResuming ...
	DataLakeAnalyticsAccountStatusResuming DataLakeAnalyticsAccountStatusType = "Resuming"
	// DataLakeAnalyticsAccountStatusRunning ...
	DataLakeAnalyticsAccountStatusRunning DataLakeAnalyticsAccountStatusType = "Running"
	// DataLakeAnalyticsAccountStatusSucceeded ...
	DataLakeAnalyticsAccountStatusSucceeded DataLakeAnalyticsAccountStatusType = "Succeeded"
	// DataLakeAnalyticsAccountStatusSuspending ...
	DataLakeAnalyticsAccountStatusSuspending DataLakeAnalyticsAccountStatusType = "Suspending"
	// DataLakeAnalyticsAccountStatusUndeleting ...
	DataLakeAnalyticsAccountStatusUndeleting DataLakeAnalyticsAccountStatusType = "Undeleting"
)

// FirewallAllowAzureIpsStateType enumerates the values for firewall allow azure ips state.
type FirewallAllowAzureIpsStateType string

const (
	// FirewallAllowAzureIpsStateDisabled ...
	FirewallAllowAzureIpsStateDisabled FirewallAllowAzureIpsStateType = "Disabled"
	// FirewallAllowAzureIpsStateEnabled ...
	FirewallAllowAzureIpsStateEnabled FirewallAllowAzureIpsStateType = "Enabled"
	// FirewallAllowAzureIpsStateNone represents an empty FirewallAllowAzureIpsStateType.
	FirewallAllowAzureIpsStateNone FirewallAllowAzureIpsStateType = ""
)

// FirewallStateType enumerates the values for firewall state.
type FirewallStateType string

const (
	// FirewallStateDisabled ...
	FirewallStateDisabled FirewallStateType = "Disabled"
	// FirewallStateEnabled ...
	FirewallStateEnabled FirewallStateType = "Enabled"
	// FirewallStateNone represents an empty FirewallStateType.
	FirewallStateNone FirewallStateType = ""
)

// OperationOriginType enumerates the values for operation origin.
type OperationOriginType string

const (
	// OperationOriginNone represents an empty OperationOriginType.
	OperationOriginNone OperationOriginType = ""
	// OperationOriginSystem ...
	OperationOriginSystem OperationOriginType = "system"
	// OperationOriginUser ...
	OperationOriginUser OperationOriginType = "user"
	// OperationOriginUsersystem ...
	OperationOriginUsersystem OperationOriginType = "user,system"
)

// SubscriptionStateType enumerates the values for subscription state.
type SubscriptionStateType string

const (
	// SubscriptionStateDeleted ...
	SubscriptionStateDeleted SubscriptionStateType = "Deleted"
	// SubscriptionStateNone represents an empty SubscriptionStateType.
	SubscriptionStateNone SubscriptionStateType = ""
	// SubscriptionStateRegistered ...
	SubscriptionStateRegistered SubscriptionStateType = "Registered"
	// SubscriptionStateSuspended ...
	SubscriptionStateSuspended SubscriptionStateType = "Suspended"
	// SubscriptionStateUnregistered ...
	SubscriptionStateUnregistered SubscriptionStateType = "Unregistered"
	// SubscriptionStateWarned ...
	SubscriptionStateWarned SubscriptionStateType = "Warned"
)

// TierType enumerates the values for tier type.
type TierType string

const (
	// TierCommitment100000AUHours ...
	TierCommitment100000AUHours TierType = "Commitment_100000AUHours"
	// TierCommitment10000AUHours ...
	TierCommitment10000AUHours TierType = "Commitment_10000AUHours"
	// TierCommitment1000AUHours ...
	TierCommitment1000AUHours TierType = "Commitment_1000AUHours"
	// TierCommitment100AUHours ...
	TierCommitment100AUHours TierType = "Commitment_100AUHours"
	// TierCommitment500000AUHours ...
	TierCommitment500000AUHours TierType = "Commitment_500000AUHours"
	// TierCommitment50000AUHours ...
	TierCommitment50000AUHours TierType = "Commitment_50000AUHours"
	// TierCommitment5000AUHours ...
	TierCommitment5000AUHours TierType = "Commitment_5000AUHours"
	// TierCommitment500AUHours ...
	TierCommitment500AUHours TierType = "Commitment_500AUHours"
	// TierConsumption ...
	TierConsumption TierType = "Consumption"
	// TierNone represents an empty TierType.
	TierNone TierType = ""
)

// AddDataLakeStoreParameters - The parameters used to add a new Data Lake Store account.
type AddDataLakeStoreParameters struct {
	// Properties - The Data Lake Store account properties to use when adding a new Data Lake Store account.
	*AddDataLakeStoreProperties `json:"properties,omitempty"`
}

// AddDataLakeStoreProperties - The Data Lake Store account properties to use when adding a new Data Lake Store
// account.
type AddDataLakeStoreProperties struct {
	// Suffix - The optional suffix for the Data Lake Store account.
	Suffix *string `json:"suffix,omitempty"`
}

// AddDataLakeStoreWithAccountParameters - The parameters used to add a new Data Lake Store account while creating a
// new Data Lake Analytics account.
type AddDataLakeStoreWithAccountParameters struct {
	// Name - The unique name of the Data Lake Store account to add.
	Name string `json:"name,omitempty"`
	// Properties - The Data Lake Store account properties to use when adding a new Data Lake Store account.
	*AddDataLakeStoreProperties `json:"properties,omitempty"`
}

// AddStorageAccountParameters - The parameters used to add a new Azure Storage account.
type AddStorageAccountParameters struct {
	// Properties - The Azure Storage account properties to use when adding a new Azure Storage account.
	*AddStorageAccountProperties `json:"properties,omitempty"`
}

// AddStorageAccountProperties - The Azure Storage account properties to use when adding a new Azure Storage account.
type AddStorageAccountProperties struct {
	// AccessKey - The access key associated with this Azure Storage account that will be used to connect to it.
	AccessKey string `json:"accessKey,omitempty"`
	// Suffix - The optional suffix for the storage account.
	Suffix *string `json:"suffix,omitempty"`
}

// AddStorageAccountWithAccountParameters - The parameters used to add a new Azure Storage account while creating a new
// Data Lake Analytics account.
type AddStorageAccountWithAccountParameters struct {
	// Name - The unique name of the Azure Storage account to add.
	Name string `json:"name,omitempty"`
	// Properties - The Azure Storage account properties to use when adding a new Azure Storage account.
	*AddStorageAccountProperties `json:"properties,omitempty"`
}

// CapabilityInformation - Subscription-level properties and limits for Data Lake Analytics.
type CapabilityInformation struct {
	rawResponse *http.Response
	// SubscriptionID - The subscription credentials that uniquely identifies the subscription.
	SubscriptionID *uuid.UUID `json:"subscriptionId,omitempty"`
	// State - The subscription state. Possible values include: 'Registered', 'Suspended', 'Deleted', 'Unregistered', 'Warned', 'None'
	State SubscriptionStateType `json:"state,omitempty"`
	// MaxAccountCount - The maximum supported number of accounts under this subscription.
	MaxAccountCount *int32 `json:"maxAccountCount,omitempty"`
	// AccountCount - The current number of accounts under this subscription.
	AccountCount *int32 `json:"accountCount,omitempty"`
	// MigrationState - The Boolean value of true or false to indicate the maintenance state.
	MigrationState *bool `json:"migrationState,omitempty"`
}

// Response returns the raw HTTP response object.
func (ci CapabilityInformation) Response() *http.Response {
	return ci.rawResponse
}

// StatusCode returns the HTTP status code of the response, e.g. 200.
func (ci CapabilityInformation) StatusCode() int {
	return ci.rawResponse.StatusCode
}

// Status returns the HTTP status message of the response, e.g. "200 OK".
func (ci CapabilityInformation) Status() string {
	return ci.rawResponse.Status
}

// CheckNameAvailabilityParameters - Data Lake Analytics account name availability check parameters.
type CheckNameAvailabilityParameters struct {
	// Name - The Data Lake Analytics name to check availability for.
	Name string `json:"name,omitempty"`
	// Type - The resource type. Note: This should not be set by the user, as the constant value is Microsoft.DataLakeAnalytics/accounts
	Type string `json:"type,omitempty"`
}

// ComputePolicy - Data Lake Analytics compute policy information.
type ComputePolicy struct {
	rawResponse *http.Response
	// ID - The resource identifier.
	ID *string `json:"id,omitempty"`
	// Name - The resource name.
	Name *string `json:"name,omitempty"`
	// Type - The resource type.
	Type *string `json:"type,omitempty"`
	// Properties - The compute policy properties.
	*ComputePolicyProperties `json:"properties,omitempty"`
}

// Response returns the raw HTTP response object.
func (cp ComputePolicy) Response() *http.Response {
	return cp.rawResponse
}

// StatusCode returns the HTTP status code of the response, e.g. 200.
func (cp ComputePolicy) StatusCode() int {
	return cp.rawResponse.StatusCode
}

// Status returns the HTTP status message of the response, e.g. "200 OK".
func (cp ComputePolicy) Status() string {
	return cp.rawResponse.Status
}

// ComputePolicyListResult - The list of compute policies in the account.
type ComputePolicyListResult struct {
	rawResponse *http.Response
	// Value - The results of the list operation.
	Value []ComputePolicy `json:"value,omitempty"`
	// NextLink - The link (url) to the next page of results.
	NextLink Marker `json:"NextLink"`
}

// Response returns the raw HTTP response object.
func (cplr ComputePolicyListResult) Response() *http.Response {
	return cplr.rawResponse
}

// StatusCode returns the HTTP status code of the response, e.g. 200.
func (cplr ComputePolicyListResult) StatusCode() int {
	return cplr.rawResponse.StatusCode
}

// Status returns the HTTP status message of the response, e.g. "200 OK".
func (cplr ComputePolicyListResult) Status() string {
	return cplr.rawResponse.Status
}

// ComputePolicyProperties - The compute policy properties.
type ComputePolicyProperties struct {
	// ObjectID - The AAD object identifier for the entity to create a policy for.
	ObjectID *uuid.UUID `json:"objectId,omitempty"`
	// ObjectType - The type of AAD object the object identifier refers to. Possible values include: 'User', 'Group', 'ServicePrincipal', 'None'
	ObjectType AADObjectType `json:"objectType,omitempty"`
	// MaxDegreeOfParallelismPerJob - The maximum degree of parallelism per job this user can use to submit jobs.
	MaxDegreeOfParallelismPerJob *int32 `json:"maxDegreeOfParallelismPerJob,omitempty"`
	// MinPriorityPerJob - The minimum priority per job this user can use to submit jobs.
	MinPriorityPerJob *int32 `json:"minPriorityPerJob,omitempty"`
}

// CreateComputePolicyWithAccountParameters - The parameters used to create a new compute policy while creating a new
// Data Lake Analytics account.
type CreateComputePolicyWithAccountParameters struct {
	// Name - The unique name of the compute policy to create.
	Name string `json:"name,omitempty"`
	// Properties - The compute policy properties to use when creating a new compute policy.
	*CreateOrUpdateComputePolicyProperties `json:"properties,omitempty"`
}

// CreateDataLakeAnalyticsAccountParameters - The parameters to use for creating a Data Lake Analytics account.
type CreateDataLakeAnalyticsAccountParameters struct {
	// Location - The resource location.
	Location string `json:"location,omitempty"`
	// Tags - The resource tags.
	Tags map[string]string `json:"tags,omitempty"`
	// Properties - The Data Lake Analytics account properties to use for creating.
	*CreateDataLakeAnalyticsAccountProperties `json:"properties,omitempty"`
}

// CreateDataLakeAnalyticsAccountProperties ...
type CreateDataLakeAnalyticsAccountProperties struct {
	// DefaultDataLakeStoreAccount - The default Data Lake Store account associated with this account.
	DefaultDataLakeStoreAccount string `json:"defaultDataLakeStoreAccount,omitempty"`
	// DataLakeStoreAccounts - The list of Data Lake Store accounts associated with this account.
	DataLakeStoreAccounts []AddDataLakeStoreWithAccountParameters `json:"dataLakeStoreAccounts,omitempty"`
	// StorageAccounts - The list of Azure Blob Storage accounts associated with this account.
	StorageAccounts []AddStorageAccountWithAccountParameters `json:"storageAccounts,omitempty"`
	// ComputePolicies - The list of compute policies associated with this account.
	ComputePolicies []CreateComputePolicyWithAccountParameters `json:"computePolicies,omitempty"`
	// FirewallRules - The list of firewall rules associated with this account.
	FirewallRules []CreateFirewallRuleWithAccountParameters `json:"firewallRules,omitempty"`
	// FirewallState - The current state of the IP address firewall for this account. Possible values include: 'Enabled', 'Disabled', 'None'
	FirewallState FirewallStateType `json:"firewallState,omitempty"`
	// FirewallAllowAzureIps - The current state of allowing or disallowing IPs originating within Azure through the firewall. If the firewall is disabled, this is not enforced. Possible values include: 'Enabled', 'Disabled', 'None'
	FirewallAllowAzureIps FirewallAllowAzureIpsStateType `json:"firewallAllowAzureIps,omitempty"`
	// NewTier - The commitment tier for the next month. Possible values include: 'Consumption', 'Commitment100AUHours', 'Commitment500AUHours', 'Commitment1000AUHours', 'Commitment5000AUHours', 'Commitment10000AUHours', 'Commitment50000AUHours', 'Commitment100000AUHours', 'Commitment500000AUHours', 'None'
	NewTier TierType `json:"newTier,omitempty"`
	// MaxJobCount - The maximum supported jobs running under the account at the same time.
	MaxJobCount *int32 `json:"maxJobCount,omitempty"`
	// MaxDegreeOfParallelism - The maximum supported degree of parallelism for this account.
	MaxDegreeOfParallelism *int32 `json:"maxDegreeOfParallelism,omitempty"`
	// MaxDegreeOfParallelismPerJob - The maximum supported degree of parallelism per job for this account.
	MaxDegreeOfParallelismPerJob *int32 `json:"maxDegreeOfParallelismPerJob,omitempty"`
	// MinPriorityPerJob - The minimum supported priority per job for this account.
	MinPriorityPerJob *int32 `json:"minPriorityPerJob,omitempty"`
	// QueryStoreRetention - The number of days that job metadata is retained.
	QueryStoreRetention *int32 `json:"queryStoreRetention,omitempty"`
}

// CreateFirewallRuleWithAccountParameters - The parameters used to create a new firewall rule while creating a new
// Data Lake Analytics account.
type CreateFirewallRuleWithAccountParameters struct {
	// Name - The unique name of the firewall rule to create.
	Name string `json:"name,omitempty"`
	// Properties - The firewall rule properties to use when creating a new firewall rule.
	*CreateOrUpdateFirewallRuleProperties `json:"properties,omitempty"`
}

// CreateOrUpdateComputePolicyParameters - The parameters used to create a new compute policy.
type CreateOrUpdateComputePolicyParameters struct {
	// Properties - The compute policy properties to use when creating a new compute policy.
	*CreateOrUpdateComputePolicyProperties `json:"properties,omitempty"`
}

// CreateOrUpdateComputePolicyProperties - The compute policy properties to use when creating a new compute policy.
type CreateOrUpdateComputePolicyProperties struct {
	// ObjectID - The AAD object identifier for the entity to create a policy for.
	ObjectID uuid.UUID `json:"objectId,omitempty"`
	// ObjectType - The type of AAD object the object identifier refers to. Possible values include: 'User', 'Group', 'ServicePrincipal', 'None'
	ObjectType AADObjectType `json:"objectType,omitempty"`
	// MaxDegreeOfParallelismPerJob - The maximum degree of parallelism per job this user can use to submit jobs. This property, the min priority per job property, or both must be passed.
	MaxDegreeOfParallelismPerJob *int32 `json:"maxDegreeOfParallelismPerJob,omitempty"`
	// MinPriorityPerJob - The minimum priority per job this user can use to submit jobs. This property, the max degree of parallelism per job property, or both must be passed.
	MinPriorityPerJob *int32 `json:"minPriorityPerJob,omitempty"`
}

// CreateOrUpdateFirewallRuleParameters - The parameters used to create a new firewall rule.
type CreateOrUpdateFirewallRuleParameters struct {
	// Properties - The firewall rule properties to use when creating a new firewall rule.
	*CreateOrUpdateFirewallRuleProperties `json:"properties,omitempty"`
}

// CreateOrUpdateFirewallRuleProperties - The firewall rule properties to use when creating a new firewall rule.
type CreateOrUpdateFirewallRuleProperties struct {
	// StartIPAddress - The start IP address for the firewall rule. This can be either ipv4 or ipv6. Start and End should be in the same protocol.
	StartIPAddress string `json:"startIpAddress,omitempty"`
	// EndIPAddress - The end IP address for the firewall rule. This can be either ipv4 or ipv6. Start and End should be in the same protocol.
	EndIPAddress string `json:"endIpAddress,omitempty"`
}

// DataLakeAnalyticsAccount - A Data Lake Analytics account object, containing all information associated with the
// named Data Lake Analytics account.
type DataLakeAnalyticsAccount struct {
	rawResponse *http.Response
	// ID - The resource identifer.
	ID *string `json:"id,omitempty"`
	// Name - The resource name.
	Name *string `json:"name,omitempty"`
	// Type - The resource type.
	Type *string `json:"type,omitempty"`
	// Location - The resource location.
	Location *string `json:"location,omitempty"`
	// Tags - The resource tags.
	Tags map[string]string `json:"tags,omitempty"`
	// Properties - The properties defined by Data Lake Analytics all properties are specific to each resource provider.
	*DataLakeAnalyticsAccountProperties `json:"properties,omitempty"`
}

// Response returns the raw HTTP response object.
func (dlaa DataLakeAnalyticsAccount) Response() *http.Response {
	return dlaa.rawResponse
}

// StatusCode returns the HTTP status code of the response, e.g. 200.
func (dlaa DataLakeAnalyticsAccount) StatusCode() int {
	return dlaa.rawResponse.StatusCode
}

// Status returns the HTTP status message of the response, e.g. "200 OK".
func (dlaa DataLakeAnalyticsAccount) Status() string {
	return dlaa.rawResponse.Status
}

// DataLakeAnalyticsAccountBasic - A Data Lake Analytics account object, containing all information associated with the
// named Data Lake Analytics account.
type DataLakeAnalyticsAccountBasic struct {
	// ID - The resource identifer.
	ID *string `json:"id,omitempty"`
	// Name - The resource name.
	Name *string `json:"name,omitempty"`
	// Type - The resource type.
	Type *string `json:"type,omitempty"`
	// Location - The resource location.
	Location *string `json:"location,omitempty"`
	// Tags - The resource tags.
	Tags map[string]string `json:"tags,omitempty"`
	// Properties - The properties defined by Data Lake Analytics all properties are specific to each resource provider.
	*DataLakeAnalyticsAccountPropertiesBasic `json:"properties,omitempty"`
}

// DataLakeAnalyticsAccountListResult - Data Lake Analytics account list information.
type DataLakeAnalyticsAccountListResult struct {
	rawResponse *http.Response
	// Value - The results of the list operation.
	Value []DataLakeAnalyticsAccountBasic `json:"value,omitempty"`
	// NextLink - The link (url) to the next page of results.
	NextLink Marker `json:"NextLink"`
}

// Response returns the raw HTTP response object.
func (dlaalr DataLakeAnalyticsAccountListResult) Response() *http.Response {
	return dlaalr.rawResponse
}

// StatusCode returns the HTTP status code of the response, e.g. 200.
func (dlaalr DataLakeAnalyticsAccountListResult) StatusCode() int {
	return dlaalr.rawResponse.StatusCode
}

// Status returns the HTTP status message of the response, e.g. "200 OK".
func (dlaalr DataLakeAnalyticsAccountListResult) Status() string {
	return dlaalr.rawResponse.Status
}

// DataLakeAnalyticsAccountProperties - The account specific properties that are associated with an underlying Data
// Lake Analytics account. Returned only when retrieving a specific account.
type DataLakeAnalyticsAccountProperties struct {
	// AccountID - The unique identifier associated with this Data Lake Analytics account.
	AccountID *uuid.UUID `json:"accountId,omitempty"`
	// ProvisioningState - The provisioning status of the Data Lake Analytics account. Possible values include: 'Failed', 'Creating', 'Running', 'Succeeded', 'Patching', 'Suspending', 'Resuming', 'Deleting', 'Deleted', 'Undeleting', 'Canceled', 'None'
	ProvisioningState DataLakeAnalyticsAccountStatusType `json:"provisioningState,omitempty"`
	// State - The state of the Data Lake Analytics account. Possible values include: 'Active', 'Suspended', 'None'
	State DataLakeAnalyticsAccountStateType `json:"state,omitempty"`
	// CreationTime - The account creation time.
	CreationTime *time.Time `json:"creationTime,omitempty"`
	// LastModifiedTime - The account last modified time.
	LastModifiedTime *time.Time `json:"lastModifiedTime,omitempty"`
	// Endpoint - The full CName endpoint for this account.
	Endpoint *string `json:"endpoint,omitempty"`
	// DefaultDataLakeStoreAccount - The default Data Lake Store account associated with this account.
	DefaultDataLakeStoreAccount *string `json:"defaultDataLakeStoreAccount,omitempty"`
	// DataLakeStoreAccounts - The list of Data Lake Store accounts associated with this account.
	DataLakeStoreAccounts []DataLakeStoreAccountInformation `json:"dataLakeStoreAccounts,omitempty"`
	// StorageAccounts - The list of Azure Blob Storage accounts associated with this account.
	StorageAccounts []StorageAccountInformation `json:"storageAccounts,omitempty"`
	// ComputePolicies - The list of compute policies associated with this account.
	ComputePolicies []ComputePolicy `json:"computePolicies,omitempty"`
	// FirewallRules - The list of firewall rules associated with this account.
	FirewallRules []FirewallRule `json:"firewallRules,omitempty"`
	// FirewallState - The current state of the IP address firewall for this account. Possible values include: 'Enabled', 'Disabled', 'None'
	FirewallState FirewallStateType `json:"firewallState,omitempty"`
	// FirewallAllowAzureIps - The current state of allowing or disallowing IPs originating within Azure through the firewall. If the firewall is disabled, this is not enforced. Possible values include: 'Enabled', 'Disabled', 'None'
	FirewallAllowAzureIps FirewallAllowAzureIpsStateType `json:"firewallAllowAzureIps,omitempty"`
	// NewTier - The commitment tier for the next month. Possible values include: 'Consumption', 'Commitment100AUHours', 'Commitment500AUHours', 'Commitment1000AUHours', 'Commitment5000AUHours', 'Commitment10000AUHours', 'Commitment50000AUHours', 'Commitment100000AUHours', 'Commitment500000AUHours', 'None'
	NewTier TierType `json:"newTier,omitempty"`
	// CurrentTier - The commitment tier in use for the current month. Possible values include: 'Consumption', 'Commitment100AUHours', 'Commitment500AUHours', 'Commitment1000AUHours', 'Commitment5000AUHours', 'Commitment10000AUHours', 'Commitment50000AUHours', 'Commitment100000AUHours', 'Commitment500000AUHours', 'None'
	CurrentTier TierType `json:"currentTier,omitempty"`
	// MaxJobCount - The maximum supported jobs running under the account at the same time.
	MaxJobCount *int32 `json:"maxJobCount,omitempty"`
	// SystemMaxJobCount - The system defined maximum supported jobs running under the account at the same time, which restricts the maximum number of running jobs the user can set for the account.
	SystemMaxJobCount *int32 `json:"systemMaxJobCount,omitempty"`
	// MaxDegreeOfParallelism - The maximum supported degree of parallelism for this account.
	MaxDegreeOfParallelism *int32 `json:"maxDegreeOfParallelism,omitempty"`
	// SystemMaxDegreeOfParallelism - The system defined maximum supported degree of parallelism for this account, which restricts the maximum value of parallelism the user can set for the account.
	SystemMaxDegreeOfParallelism *int32 `json:"systemMaxDegreeOfParallelism,omitempty"`
	// MaxDegreeOfParallelismPerJob - The maximum supported degree of parallelism per job for this account.
	MaxDegreeOfParallelismPerJob *int32 `json:"maxDegreeOfParallelismPerJob,omitempty"`
	// MinPriorityPerJob - The minimum supported priority per job for this account.
	MinPriorityPerJob *int32 `json:"minPriorityPerJob,omitempty"`
	// QueryStoreRetention - The number of days that job metadata is retained.
	QueryStoreRetention *int32 `json:"queryStoreRetention,omitempty"`
}

// DataLakeAnalyticsAccountPropertiesBasic - The basic account specific properties that are associated with an
// underlying Data Lake Analytics account.
type DataLakeAnalyticsAccountPropertiesBasic struct {
	// AccountID - The unique identifier associated with this Data Lake Analytics account.
	AccountID *uuid.UUID `json:"accountId,omitempty"`
	// ProvisioningState - The provisioning status of the Data Lake Analytics account. Possible values include: 'Failed', 'Creating', 'Running', 'Succeeded', 'Patching', 'Suspending', 'Resuming', 'Deleting', 'Deleted', 'Undeleting', 'Canceled', 'None'
	ProvisioningState DataLakeAnalyticsAccountStatusType `json:"provisioningState,omitempty"`
	// State - The state of the Data Lake Analytics account. Possible values include: 'Active', 'Suspended', 'None'
	State DataLakeAnalyticsAccountStateType `json:"state,omitempty"`
	// CreationTime - The account creation time.
	CreationTime *time.Time `json:"creationTime,omitempty"`
	// LastModifiedTime - The account last modified time.
	LastModifiedTime *time.Time `json:"lastModifiedTime,omitempty"`
	// Endpoint - The full CName endpoint for this account.
	Endpoint *string `json:"endpoint,omitempty"`
}

// DataLakeStoreAccountInformation - Data Lake Store account information.
type DataLakeStoreAccountInformation struct {
	rawResponse *http.Response
	// ID - The resource identifier.
	ID *string `json:"id,omitempty"`
	// Name - The resource name.
	Name *string `json:"name,omitempty"`
	// Type - The resource type.
	Type *string `json:"type,omitempty"`
	// Properties - The Data Lake Store account properties.
	*DataLakeStoreAccountInformationProperties `json:"properties,omitempty"`
}

// Response returns the raw HTTP response object.
func (dlsai DataLakeStoreAccountInformation) Response() *http.Response {
	return dlsai.rawResponse
}

// StatusCode returns the HTTP status code of the response, e.g. 200.
func (dlsai DataLakeStoreAccountInformation) StatusCode() int {
	return dlsai.rawResponse.StatusCode
}

// Status returns the HTTP status message of the response, e.g. "200 OK".
func (dlsai DataLakeStoreAccountInformation) Status() string {
	return dlsai.rawResponse.Status
}

// DataLakeStoreAccountInformationListResult - Data Lake Store account list information.
type DataLakeStoreAccountInformationListResult struct {
	rawResponse *http.Response
	// Value - The results of the list operation.
	Value []DataLakeStoreAccountInformation `json:"value,omitempty"`
	// NextLink - The link (url) to the next page of results.
	NextLink Marker `json:"NextLink"`
}

// Response returns the raw HTTP response object.
func (dlsailr DataLakeStoreAccountInformationListResult) Response() *http.Response {
	return dlsailr.rawResponse
}

// StatusCode returns the HTTP status code of the response, e.g. 200.
func (dlsailr DataLakeStoreAccountInformationListResult) StatusCode() int {
	return dlsailr.rawResponse.StatusCode
}

// Status returns the HTTP status message of the response, e.g. "200 OK".
func (dlsailr DataLakeStoreAccountInformationListResult) Status() string {
	return dlsailr.rawResponse.Status
}

// DataLakeStoreAccountInformationProperties - The Data Lake Store account properties.
type DataLakeStoreAccountInformationProperties struct {
	// Suffix - The optional suffix for the Data Lake Store account.
	Suffix *string `json:"suffix,omitempty"`
}

// FirewallRule - Data Lake Analytics firewall rule information.
type FirewallRule struct {
	rawResponse *http.Response
	// ID - The resource identifier.
	ID *string `json:"id,omitempty"`
	// Name - The resource name.
	Name *string `json:"name,omitempty"`
	// Type - The resource type.
	Type *string `json:"type,omitempty"`
	// Properties - The firewall rule properties.
	*FirewallRuleProperties `json:"properties,omitempty"`
}

// Response returns the raw HTTP response object.
func (fr FirewallRule) Response() *http.Response {
	return fr.rawResponse
}

// StatusCode returns the HTTP status code of the response, e.g. 200.
func (fr FirewallRule) StatusCode() int {
	return fr.rawResponse.StatusCode
}

// Status returns the HTTP status message of the response, e.g. "200 OK".
func (fr FirewallRule) Status() string {
	return fr.rawResponse.Status
}

// FirewallRuleListResult - Data Lake Analytics firewall rule list information.
type FirewallRuleListResult struct {
	rawResponse *http.Response
	// Value - The results of the list operation.
	Value []FirewallRule `json:"value,omitempty"`
	// NextLink - The link (url) to the next page of results.
	NextLink Marker `json:"NextLink"`
}

// Response returns the raw HTTP response object.
func (frlr FirewallRuleListResult) Response() *http.Response {
	return frlr.rawResponse
}

// StatusCode returns the HTTP status code of the response, e.g. 200.
func (frlr FirewallRuleListResult) StatusCode() int {
	return frlr.rawResponse.StatusCode
}

// Status returns the HTTP status message of the response, e.g. "200 OK".
func (frlr FirewallRuleListResult) Status() string {
	return frlr.rawResponse.Status
}

// FirewallRuleProperties - The firewall rule properties.
type FirewallRuleProperties struct {
	// StartIPAddress - The start IP address for the firewall rule. This can be either ipv4 or ipv6. Start and End should be in the same protocol.
	StartIPAddress *string `json:"startIpAddress,omitempty"`
	// EndIPAddress - The end IP address for the firewall rule. This can be either ipv4 or ipv6. Start and End should be in the same protocol.
	EndIPAddress *string `json:"endIpAddress,omitempty"`
}

// NameAvailabilityInformation - Data Lake Analytics account name availability result information.
type NameAvailabilityInformation struct {
	rawResponse *http.Response
	// NameAvailable - The Boolean value of true or false to indicate whether the Data Lake Analytics account name is available or not.
	NameAvailable *bool `json:"nameAvailable,omitempty"`
	// Reason - The reason why the Data Lake Analytics account name is not available, if nameAvailable is false.
	Reason *string `json:"reason,omitempty"`
	// Message - The message describing why the Data Lake Analytics account name is not available, if nameAvailable is false.
	Message *string `json:"message,omitempty"`
}

// Response returns the raw HTTP response object.
func (nai NameAvailabilityInformation) Response() *http.Response {
	return nai.rawResponse
}

// StatusCode returns the HTTP status code of the response, e.g. 200.
func (nai NameAvailabilityInformation) StatusCode() int {
	return nai.rawResponse.StatusCode
}

// Status returns the HTTP status message of the response, e.g. "200 OK".
func (nai NameAvailabilityInformation) Status() string {
	return nai.rawResponse.Status
}

// Operation - An available operation for Data Lake Analytics.
type Operation struct {
	// Name - The name of the operation.
	Name *string `json:"name,omitempty"`
	// Display - The display information for the operation.
	Display *OperationDisplay `json:"display,omitempty"`
	// Origin - The intended executor of the operation. Possible values include: 'User', 'System', 'Usersystem', 'None'
	Origin OperationOriginType `json:"origin,omitempty"`
}

// OperationDisplay - The display information for a particular operation.
type OperationDisplay struct {
	// Provider - The resource provider of the operation.
	Provider *string `json:"provider,omitempty"`
	// Resource - The resource type of the operation.
	Resource *string `json:"resource,omitempty"`
	// Operation - A friendly name of the operation.
	Operation *string `json:"operation,omitempty"`
	// Description - A friendly description of the operation.
	Description *string `json:"description,omitempty"`
}

// OperationListResult - The list of available operations for Data Lake Analytics.
type OperationListResult struct {
	rawResponse *http.Response
	// Value - The results of the list operation.
	Value []Operation `json:"value,omitempty"`
	// NextLink - The link (url) to the next page of results.
	NextLink *string `json:"nextLink,omitempty"`
}

// Response returns the raw HTTP response object.
func (olr OperationListResult) Response() *http.Response {
	return olr.rawResponse
}

// StatusCode returns the HTTP status code of the response, e.g. 200.
func (olr OperationListResult) StatusCode() int {
	return olr.rawResponse.StatusCode
}

// Status returns the HTTP status message of the response, e.g. "200 OK".
func (olr OperationListResult) Status() string {
	return olr.rawResponse.Status
}

// Resource - The resource model definition.
type Resource struct {
	// ID - The resource identifer.
	ID *string `json:"id,omitempty"`
	// Name - The resource name.
	Name *string `json:"name,omitempty"`
	// Type - The resource type.
	Type *string `json:"type,omitempty"`
	// Location - The resource location.
	Location *string `json:"location,omitempty"`
	// Tags - The resource tags.
	Tags map[string]string `json:"tags,omitempty"`
}

// SasTokenInformation - SAS token information.
type SasTokenInformation struct {
	// AccessToken - The access token for the associated Azure Storage Container.
	AccessToken *string `json:"accessToken,omitempty"`
}

// SasTokenInformationListResult - The SAS response that contains the storage account, container and associated SAS
// token for connection use.
type SasTokenInformationListResult struct {
	rawResponse *http.Response
	// Value - The results of the list operation.
	Value []SasTokenInformation `json:"value,omitempty"`
	// NextLink - The link (url) to the next page of results.
	NextLink Marker `json:"NextLink"`
}

// Response returns the raw HTTP response object.
func (stilr SasTokenInformationListResult) Response() *http.Response {
	return stilr.rawResponse
}

// StatusCode returns the HTTP status code of the response, e.g. 200.
func (stilr SasTokenInformationListResult) StatusCode() int {
	return stilr.rawResponse.StatusCode
}

// Status returns the HTTP status message of the response, e.g. "200 OK".
func (stilr SasTokenInformationListResult) Status() string {
	return stilr.rawResponse.Status
}

// StorageAccountInformation - Azure Storage account information.
type StorageAccountInformation struct {
	rawResponse *http.Response
	// ID - The resource identifier.
	ID *string `json:"id,omitempty"`
	// Name - The resource name.
	Name *string `json:"name,omitempty"`
	// Type - The resource type.
	Type *string `json:"type,omitempty"`
	// Properties - The Azure Storage account properties.
	*StorageAccountInformationProperties `json:"properties,omitempty"`
}

// Response returns the raw HTTP response object.
func (sai StorageAccountInformation) Response() *http.Response {
	return sai.rawResponse
}

// StatusCode returns the HTTP status code of the response, e.g. 200.
func (sai StorageAccountInformation) StatusCode() int {
	return sai.rawResponse.StatusCode
}

// Status returns the HTTP status message of the response, e.g. "200 OK".
func (sai StorageAccountInformation) Status() string {
	return sai.rawResponse.Status
}

// StorageAccountInformationListResult - Azure Storage account list information.
type StorageAccountInformationListResult struct {
	rawResponse *http.Response
	// Value - The results of the list operation.
	Value []StorageAccountInformation `json:"value,omitempty"`
	// NextLink - The link (url) to the next page of results.
	NextLink Marker `json:"NextLink"`
}

// Response returns the raw HTTP response object.
func (sailr StorageAccountInformationListResult) Response() *http.Response {
	return sailr.rawResponse
}

// StatusCode returns the HTTP status code of the response, e.g. 200.
func (sailr StorageAccountInformationListResult) StatusCode() int {
	return sailr.rawResponse.StatusCode
}

// Status returns the HTTP status message of the response, e.g. "200 OK".
func (sailr StorageAccountInformationListResult) Status() string {
	return sailr.rawResponse.Status
}

// StorageAccountInformationProperties - The Azure Storage account properties.
type StorageAccountInformationProperties struct {
	// Suffix - The optional suffix for the storage account.
	Suffix *string `json:"suffix,omitempty"`
}

// StorageContainer - Azure Storage blob container information.
type StorageContainer struct {
	rawResponse *http.Response
	// ID - The resource identifier.
	ID *string `json:"id,omitempty"`
	// Name - The resource name.
	Name *string `json:"name,omitempty"`
	// Type - The resource type.
	Type *string `json:"type,omitempty"`
	// Properties - The properties of the blob container.
	*StorageContainerProperties `json:"properties,omitempty"`
}

// Response returns the raw HTTP response object.
func (sc StorageContainer) Response() *http.Response {
	return sc.rawResponse
}

// StatusCode returns the HTTP status code of the response, e.g. 200.
func (sc StorageContainer) StatusCode() int {
	return sc.rawResponse.StatusCode
}

// Status returns the HTTP status message of the response, e.g. "200 OK".
func (sc StorageContainer) Status() string {
	return sc.rawResponse.Status
}

// StorageContainerListResult - The list of blob containers associated with the storage account attached to the Data
// Lake Analytics account.
type StorageContainerListResult struct {
	rawResponse *http.Response
	// Value - The results of the list operation.
	Value []StorageContainer `json:"value,omitempty"`
	// NextLink - The link (url) to the next page of results.
	NextLink Marker `json:"NextLink"`
}

// Response returns the raw HTTP response object.
func (sclr StorageContainerListResult) Response() *http.Response {
	return sclr.rawResponse
}

// StatusCode returns the HTTP status code of the response, e.g. 200.
func (sclr StorageContainerListResult) StatusCode() int {
	return sclr.rawResponse.StatusCode
}

// Status returns the HTTP status message of the response, e.g. "200 OK".
func (sclr StorageContainerListResult) Status() string {
	return sclr.rawResponse.Status
}

// StorageContainerProperties - Azure Storage blob container properties information.
type StorageContainerProperties struct {
	// LastModifiedTime - The last modified time of the blob container.
	LastModifiedTime *time.Time `json:"lastModifiedTime,omitempty"`
}

// SubResource - The resource model definition for a nested resource.
type SubResource struct {
	// ID - The resource identifier.
	ID *string `json:"id,omitempty"`
	// Name - The resource name.
	Name *string `json:"name,omitempty"`
	// Type - The resource type.
	Type *string `json:"type,omitempty"`
}

// UpdateComputePolicyParameters - The parameters used to update a compute policy.
type UpdateComputePolicyParameters struct {
	// Properties - The compute policy properties to use when updating a compute policy.
	*UpdateComputePolicyProperties `json:"properties,omitempty"`
}

// UpdateComputePolicyProperties - The compute policy properties to use when updating a compute policy.
type UpdateComputePolicyProperties struct {
	// ObjectID - The AAD object identifier for the entity to create a policy for.
	ObjectID *uuid.UUID `json:"objectId,omitempty"`
	// ObjectType - The type of AAD object the object identifier refers to. Possible values include: 'User', 'Group', 'ServicePrincipal', 'None'
	ObjectType AADObjectType `json:"objectType,omitempty"`
	// MaxDegreeOfParallelismPerJob - The maximum degree of parallelism per job this user can use to submit jobs. This property, the min priority per job property, or both must be passed.
	MaxDegreeOfParallelismPerJob *int32 `json:"maxDegreeOfParallelismPerJob,omitempty"`
	// MinPriorityPerJob - The minimum priority per job this user can use to submit jobs. This property, the max degree of parallelism per job property, or both must be passed.
	MinPriorityPerJob *int32 `json:"minPriorityPerJob,omitempty"`
}

// UpdateComputePolicyWithAccountParameters - The parameters used to update a compute policy while updating a Data Lake
// Analytics account.
type UpdateComputePolicyWithAccountParameters struct {
	// Name - The unique name of the compute policy to update.
	Name string `json:"name,omitempty"`
	// Properties - The compute policy properties to use when updating a compute policy.
	*UpdateComputePolicyProperties `json:"properties,omitempty"`
}

// UpdateDataLakeAnalyticsAccountParameters - The parameters that can be used to update an existing Data Lake Analytics
// account.
type UpdateDataLakeAnalyticsAccountParameters struct {
	// Tags - The resource tags.
	Tags map[string]string `json:"tags,omitempty"`
	// Properties - The properties that can be updated in an existing Data Lake Analytics account.
	*UpdateDataLakeAnalyticsAccountProperties `json:"properties,omitempty"`
}

// UpdateDataLakeAnalyticsAccountProperties - The properties to update that are associated with an underlying Data Lake
// Analytics account.
type UpdateDataLakeAnalyticsAccountProperties struct {
	// DataLakeStoreAccounts - The list of Data Lake Store accounts associated with this account.
	DataLakeStoreAccounts []UpdateDataLakeStoreWithAccountParameters `json:"dataLakeStoreAccounts,omitempty"`
	// StorageAccounts - The list of Azure Blob storage accounts associated with this account.
	StorageAccounts []UpdateStorageAccountWithAccountParameters `json:"storageAccounts,omitempty"`
	// ComputePolicies - The list of compute policies associated with this account.
	ComputePolicies []UpdateComputePolicyWithAccountParameters `json:"computePolicies,omitempty"`
	// FirewallRules - The list of firewall rules associated with this Data Lake Analytics account.
	FirewallRules []UpdateFirewallRuleWithAccountParameters `json:"firewallRules,omitempty"`
	// FirewallState - The current state of the IP address firewall for this Data Lake Analytics account. Possible values include: 'Enabled', 'Disabled', 'None'
	FirewallState FirewallStateType `json:"firewallState,omitempty"`
	// FirewallAllowAzureIps - The current state of allowing or disallowing IPs originating within Azure through the firewall. If the firewall is disabled, this is not enforced. Possible values include: 'Enabled', 'Disabled', 'None'
	FirewallAllowAzureIps FirewallAllowAzureIpsStateType `json:"firewallAllowAzureIps,omitempty"`
	// NewTier - The commitment tier to use for next month. Possible values include: 'Consumption', 'Commitment100AUHours', 'Commitment500AUHours', 'Commitment1000AUHours', 'Commitment5000AUHours', 'Commitment10000AUHours', 'Commitment50000AUHours', 'Commitment100000AUHours', 'Commitment500000AUHours', 'None'
	NewTier TierType `json:"newTier,omitempty"`
	// MaxJobCount - The maximum supported jobs running under the account at the same time.
	MaxJobCount *int32 `json:"maxJobCount,omitempty"`
	// MaxDegreeOfParallelism - The maximum supported degree of parallelism for this account.
	MaxDegreeOfParallelism *int32 `json:"maxDegreeOfParallelism,omitempty"`
	// MaxDegreeOfParallelismPerJob - The maximum supported degree of parallelism per job for this account.
	MaxDegreeOfParallelismPerJob *int32 `json:"maxDegreeOfParallelismPerJob,omitempty"`
	// MinPriorityPerJob - The minimum supported priority per job for this account.
	MinPriorityPerJob *int32 `json:"minPriorityPerJob,omitempty"`
	// QueryStoreRetention - The number of days that job metadata is retained.
	QueryStoreRetention *int32 `json:"queryStoreRetention,omitempty"`
}

// UpdateDataLakeStoreProperties - The Data Lake Store account properties to use when updating a Data Lake Store
// account.
type UpdateDataLakeStoreProperties struct {
	// Suffix - The optional suffix for the Data Lake Store account.
	Suffix *string `json:"suffix,omitempty"`
}

// UpdateDataLakeStoreWithAccountParameters - The parameters used to update a Data Lake Store account while updating a
// Data Lake Analytics account.
type UpdateDataLakeStoreWithAccountParameters struct {
	// Name - The unique name of the Data Lake Store account to update.
	Name string `json:"name,omitempty"`
	// Properties - The Data Lake Store account properties to use when updating a Data Lake Store account.
	*UpdateDataLakeStoreProperties `json:"properties,omitempty"`
}

// UpdateFirewallRuleParameters - The parameters used to update a firewall rule.
type UpdateFirewallRuleParameters struct {
	// Properties - The firewall rule properties to use when updating a firewall rule.
	*UpdateFirewallRuleProperties `json:"properties,omitempty"`
}

// UpdateFirewallRuleProperties - The firewall rule properties to use when updating a firewall rule.
type UpdateFirewallRuleProperties struct {
	// StartIPAddress - The start IP address for the firewall rule. This can be either ipv4 or ipv6. Start and End should be in the same protocol.
	StartIPAddress *string `json:"startIpAddress,omitempty"`
	// EndIPAddress - The end IP address for the firewall rule. This can be either ipv4 or ipv6. Start and End should be in the same protocol.
	EndIPAddress *string `json:"endIpAddress,omitempty"`
}

// UpdateFirewallRuleWithAccountParameters - The parameters used to update a firewall rule while updating a Data Lake
// Analytics account.
type UpdateFirewallRuleWithAccountParameters struct {
	// Name - The unique name of the firewall rule to update.
	Name string `json:"name,omitempty"`
	// Properties - The firewall rule properties to use when updating a firewall rule.
	*UpdateFirewallRuleProperties `json:"properties,omitempty"`
}

// UpdateStorageAccountParameters - The parameters used to update an Azure Storage account.
type UpdateStorageAccountParameters struct {
	// Properties - The Azure Storage account properties to use when updating an Azure Storage account.
	*UpdateStorageAccountProperties `json:"properties,omitempty"`
}

// UpdateStorageAccountProperties - The Azure Storage account properties to use when updating an Azure Storage account.
type UpdateStorageAccountProperties struct {
	// AccessKey - The updated access key associated with this Azure Storage account that will be used to connect to it.
	AccessKey *string `json:"accessKey,omitempty"`
	// Suffix - The optional suffix for the storage account.
	Suffix *string `json:"suffix,omitempty"`
}

// UpdateStorageAccountWithAccountParameters - The parameters used to update an Azure Storage account while updating a
// Data Lake Analytics account.
type UpdateStorageAccountWithAccountParameters struct {
	// Name - The unique name of the Azure Storage account to update.
	Name string `json:"name,omitempty"`
	// Properties - The Azure Storage account properties to use when updating an Azure Storage account.
	*UpdateStorageAccountProperties `json:"properties,omitempty"`
}
