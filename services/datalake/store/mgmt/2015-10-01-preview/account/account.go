package account

// Copyright (c) Microsoft and contributors.  All rights reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
// http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
//
// See the License for the specific language governing permissions and
// limitations under the License.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

import (
	"bytes"
	"context"
	"encoding/json"
	"fmt"
	"github.com/Azure/azure-pipeline-go/pipeline"
	"io/ioutil"
	"net/http"
)

// Client is the dataLake Store Client
type Client struct {
	ManagementClient
}

// NewClient creates an instance of the Client client.
func NewClient(p pipeline.Pipeline) Client {
	return Client{NewManagementClient(p)}
}

// Create creates the specified Data Lake Store account. This method may poll for completion. Polling can be canceled
// by passing the cancel channel argument. The channel will be used to cancel polling and any outstanding HTTP
// requests.
//
// resourceGroupName is the name of the Azure resource group that contains the Data Lake Store account. name is the
// name of the Data Lake Store account to create. parameters is parameters supplied to create the Data Lake Store
// account.
func (client Client) Create(ctx context.Context, resourceGroupName string, name string, parameters DataLakeStoreAccount) (*DataLakeStoreAccount, error) {
	req, err := client.createPreparer(resourceGroupName, name, parameters)
	if err != nil {
		return nil, err
	}
	resp, err := client.Pipeline().Do(ctx, responderPolicyFactory{responder: client.createResponder}, req)
	if err != nil {
		return nil, err
	}
	return resp.(*DataLakeStoreAccount), err
}

// createPreparer prepares the Create request.
func (client Client) createPreparer(resourceGroupName string, name string, parameters DataLakeStoreAccount) (pipeline.Request, error) {
	u := client.url
	u.Path = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DataLakeStore/accounts/{name}"
	req, err := pipeline.NewRequest("PUT", u, nil)
	if err != nil {
		return req, pipeline.NewError(err, "failed to create request")
	}
	params := req.URL.Query()
	params.Set("api-version", APIVersion)
	req.URL.RawQuery = params.Encode()
	b, err := json.Marshal(parameters)
	if err != nil {
		return req, pipeline.NewError(err, "failed to marshal request body")
	}
	req.Header.Set("Content-Type", "application/json")
	err = req.SetBody(bytes.NewReader(b))
	if err != nil {
		return req, pipeline.NewError(err, "failed to set request body")
	}
	return req, nil
}

// createResponder handles the response to the Create request.
func (client Client) createResponder(resp pipeline.Response) (pipeline.Response, error) {
	err := validateResponse(resp, http.StatusCreated, http.StatusOK)
	if resp == nil {
		return nil, err
	}
	result := &DataLakeStoreAccount{rawResponse: resp.Response()}
	if err != nil {
		return result, err
	}
	defer resp.Response().Body.Close()
	b, err := ioutil.ReadAll(resp.Response().Body)
	if err != nil {
		return result, NewResponseError(err, resp.Response(), "failed to read response body")
	}
	if len(b) > 0 {
		err = json.Unmarshal(b, result)
		if err != nil {
			return result, NewResponseError(err, resp.Response(), "failed to unmarshal response body")
		}
	}
	return result, nil
}

// CreateOrUpdateFirewallRule creates or updates the specified firewall rule.
//
// resourceGroupName is the name of the Azure resource group that contains the Data Lake Store account. accountName is
// the name of the Data Lake Store account to which to add the firewall rule. name is the name of the firewall rule to
// create or update. parameters is parameters supplied to create the create firewall rule.
func (client Client) CreateOrUpdateFirewallRule(ctx context.Context, resourceGroupName string, accountName string, name string, parameters FirewallRule) (*FirewallRule, error) {
	req, err := client.createOrUpdateFirewallRulePreparer(resourceGroupName, accountName, name, parameters)
	if err != nil {
		return nil, err
	}
	resp, err := client.Pipeline().Do(ctx, responderPolicyFactory{responder: client.createOrUpdateFirewallRuleResponder}, req)
	if err != nil {
		return nil, err
	}
	return resp.(*FirewallRule), err
}

// createOrUpdateFirewallRulePreparer prepares the CreateOrUpdateFirewallRule request.
func (client Client) createOrUpdateFirewallRulePreparer(resourceGroupName string, accountName string, name string, parameters FirewallRule) (pipeline.Request, error) {
	u := client.url
	u.Path = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DataLakeStore/accounts/{accountName}/firewallRules/{name}"
	req, err := pipeline.NewRequest("PUT", u, nil)
	if err != nil {
		return req, pipeline.NewError(err, "failed to create request")
	}
	params := req.URL.Query()
	params.Set("api-version", APIVersion)
	req.URL.RawQuery = params.Encode()
	b, err := json.Marshal(parameters)
	if err != nil {
		return req, pipeline.NewError(err, "failed to marshal request body")
	}
	req.Header.Set("Content-Type", "application/json")
	err = req.SetBody(bytes.NewReader(b))
	if err != nil {
		return req, pipeline.NewError(err, "failed to set request body")
	}
	return req, nil
}

// createOrUpdateFirewallRuleResponder handles the response to the CreateOrUpdateFirewallRule request.
func (client Client) createOrUpdateFirewallRuleResponder(resp pipeline.Response) (pipeline.Response, error) {
	err := validateResponse(resp, http.StatusOK)
	if resp == nil {
		return nil, err
	}
	result := &FirewallRule{rawResponse: resp.Response()}
	if err != nil {
		return result, err
	}
	defer resp.Response().Body.Close()
	b, err := ioutil.ReadAll(resp.Response().Body)
	if err != nil {
		return result, NewResponseError(err, resp.Response(), "failed to read response body")
	}
	if len(b) > 0 {
		err = json.Unmarshal(b, result)
		if err != nil {
			return result, NewResponseError(err, resp.Response(), "failed to unmarshal response body")
		}
	}
	return result, nil
}

// Delete deletes the specified Data Lake Store account. This method may poll for completion. Polling can be canceled
// by passing the cancel channel argument. The channel will be used to cancel polling and any outstanding HTTP
// requests.
//
// resourceGroupName is the name of the Azure resource group that contains the Data Lake Store account. accountName is
// the name of the Data Lake Store account to delete.
func (client Client) Delete(ctx context.Context, resourceGroupName string, accountName string) (*http.Response, error) {
	req, err := client.deletePreparer(resourceGroupName, accountName)
	if err != nil {
		return nil, err
	}
	resp, err := client.Pipeline().Do(ctx, responderPolicyFactory{responder: client.deleteResponder}, req)
	if err != nil {
		return nil, err
	}
	return resp.Response(), err
}

// deletePreparer prepares the Delete request.
func (client Client) deletePreparer(resourceGroupName string, accountName string) (pipeline.Request, error) {
	u := client.url
	u.Path = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DataLakeStore/accounts/{accountName}"
	req, err := pipeline.NewRequest("DELETE", u, nil)
	if err != nil {
		return req, pipeline.NewError(err, "failed to create request")
	}
	params := req.URL.Query()
	params.Set("api-version", APIVersion)
	req.URL.RawQuery = params.Encode()
	return req, nil
}

// deleteResponder handles the response to the Delete request.
func (client Client) deleteResponder(resp pipeline.Response) (pipeline.Response, error) {
	err := validateResponse(resp, http.StatusOK, http.StatusNotFound, http.StatusNoContent, http.StatusAccepted)
	if resp == nil {
		return nil, err
	}
	return resp, err
}

// DeleteFirewallRule deletes the specified firewall rule from the specified Data Lake Store account
//
// resourceGroupName is the name of the Azure resource group that contains the Data Lake Store account. accountName is
// the name of the Data Lake Store account from which to delete the firewall rule. firewallRuleName is the name of the
// firewall rule to delete.
func (client Client) DeleteFirewallRule(ctx context.Context, resourceGroupName string, accountName string, firewallRuleName string) (*http.Response, error) {
	req, err := client.deleteFirewallRulePreparer(resourceGroupName, accountName, firewallRuleName)
	if err != nil {
		return nil, err
	}
	resp, err := client.Pipeline().Do(ctx, responderPolicyFactory{responder: client.deleteFirewallRuleResponder}, req)
	if err != nil {
		return nil, err
	}
	return resp.Response(), err
}

// deleteFirewallRulePreparer prepares the DeleteFirewallRule request.
func (client Client) deleteFirewallRulePreparer(resourceGroupName string, accountName string, firewallRuleName string) (pipeline.Request, error) {
	u := client.url
	u.Path = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DataLakeStore/accounts/{accountName}/firewallRules/{firewallRuleName}"
	req, err := pipeline.NewRequest("DELETE", u, nil)
	if err != nil {
		return req, pipeline.NewError(err, "failed to create request")
	}
	params := req.URL.Query()
	params.Set("api-version", APIVersion)
	req.URL.RawQuery = params.Encode()
	return req, nil
}

// deleteFirewallRuleResponder handles the response to the DeleteFirewallRule request.
func (client Client) deleteFirewallRuleResponder(resp pipeline.Response) (pipeline.Response, error) {
	err := validateResponse(resp, http.StatusOK, http.StatusNoContent)
	if resp == nil {
		return nil, err
	}
	return resp, err
}

// EnableKeyVault attempts to enable a user managed key vault for encryption of the specified Data Lake Store account.
//
// resourceGroupName is the name of the Azure resource group that contains the Data Lake Store account. accountName is
// the name of the Data Lake Store account to attempt to enable the Key Vault for.
func (client Client) EnableKeyVault(ctx context.Context, resourceGroupName string, accountName string) (*http.Response, error) {
	req, err := client.enableKeyVaultPreparer(resourceGroupName, accountName)
	if err != nil {
		return nil, err
	}
	resp, err := client.Pipeline().Do(ctx, responderPolicyFactory{responder: client.enableKeyVaultResponder}, req)
	if err != nil {
		return nil, err
	}
	return resp.Response(), err
}

// enableKeyVaultPreparer prepares the EnableKeyVault request.
func (client Client) enableKeyVaultPreparer(resourceGroupName string, accountName string) (pipeline.Request, error) {
	u := client.url
	u.Path = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DataLakeStore/accounts/{accountName}/enableKeyVault"
	req, err := pipeline.NewRequest("POST", u, nil)
	if err != nil {
		return req, pipeline.NewError(err, "failed to create request")
	}
	params := req.URL.Query()
	params.Set("api-version", APIVersion)
	req.URL.RawQuery = params.Encode()
	return req, nil
}

// enableKeyVaultResponder handles the response to the EnableKeyVault request.
func (client Client) enableKeyVaultResponder(resp pipeline.Response) (pipeline.Response, error) {
	err := validateResponse(resp, http.StatusOK)
	if resp == nil {
		return nil, err
	}
	return resp, err
}

// Get gets the specified Data Lake Store account.
//
// resourceGroupName is the name of the Azure resource group that contains the Data Lake Store account. accountName is
// the name of the Data Lake Store account to retrieve.
func (client Client) Get(ctx context.Context, resourceGroupName string, accountName string) (*DataLakeStoreAccount, error) {
	req, err := client.getPreparer(resourceGroupName, accountName)
	if err != nil {
		return nil, err
	}
	resp, err := client.Pipeline().Do(ctx, responderPolicyFactory{responder: client.getResponder}, req)
	if err != nil {
		return nil, err
	}
	return resp.(*DataLakeStoreAccount), err
}

// getPreparer prepares the Get request.
func (client Client) getPreparer(resourceGroupName string, accountName string) (pipeline.Request, error) {
	u := client.url
	u.Path = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DataLakeStore/accounts/{accountName}"
	req, err := pipeline.NewRequest("GET", u, nil)
	if err != nil {
		return req, pipeline.NewError(err, "failed to create request")
	}
	params := req.URL.Query()
	params.Set("api-version", APIVersion)
	req.URL.RawQuery = params.Encode()
	return req, nil
}

// getResponder handles the response to the Get request.
func (client Client) getResponder(resp pipeline.Response) (pipeline.Response, error) {
	err := validateResponse(resp, http.StatusOK)
	if resp == nil {
		return nil, err
	}
	result := &DataLakeStoreAccount{rawResponse: resp.Response()}
	if err != nil {
		return result, err
	}
	defer resp.Response().Body.Close()
	b, err := ioutil.ReadAll(resp.Response().Body)
	if err != nil {
		return result, NewResponseError(err, resp.Response(), "failed to read response body")
	}
	if len(b) > 0 {
		err = json.Unmarshal(b, result)
		if err != nil {
			return result, NewResponseError(err, resp.Response(), "failed to unmarshal response body")
		}
	}
	return result, nil
}

// GetFirewallRule gets the specified Data Lake Store firewall rule.
//
// resourceGroupName is the name of the Azure resource group that contains the Data Lake Store account. accountName is
// the name of the Data Lake Store account from which to get the firewall rule. firewallRuleName is the name of the
// firewall rule to retrieve.
func (client Client) GetFirewallRule(ctx context.Context, resourceGroupName string, accountName string, firewallRuleName string) (*FirewallRule, error) {
	req, err := client.getFirewallRulePreparer(resourceGroupName, accountName, firewallRuleName)
	if err != nil {
		return nil, err
	}
	resp, err := client.Pipeline().Do(ctx, responderPolicyFactory{responder: client.getFirewallRuleResponder}, req)
	if err != nil {
		return nil, err
	}
	return resp.(*FirewallRule), err
}

// getFirewallRulePreparer prepares the GetFirewallRule request.
func (client Client) getFirewallRulePreparer(resourceGroupName string, accountName string, firewallRuleName string) (pipeline.Request, error) {
	u := client.url
	u.Path = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DataLakeStore/accounts/{accountName}/firewallRules/{firewallRuleName}"
	req, err := pipeline.NewRequest("GET", u, nil)
	if err != nil {
		return req, pipeline.NewError(err, "failed to create request")
	}
	params := req.URL.Query()
	params.Set("api-version", APIVersion)
	req.URL.RawQuery = params.Encode()
	return req, nil
}

// getFirewallRuleResponder handles the response to the GetFirewallRule request.
func (client Client) getFirewallRuleResponder(resp pipeline.Response) (pipeline.Response, error) {
	err := validateResponse(resp, http.StatusOK)
	if resp == nil {
		return nil, err
	}
	result := &FirewallRule{rawResponse: resp.Response()}
	if err != nil {
		return result, err
	}
	defer resp.Response().Body.Close()
	b, err := ioutil.ReadAll(resp.Response().Body)
	if err != nil {
		return result, NewResponseError(err, resp.Response(), "failed to read response body")
	}
	if len(b) > 0 {
		err = json.Unmarshal(b, result)
		if err != nil {
			return result, NewResponseError(err, resp.Response(), "failed to unmarshal response body")
		}
	}
	return result, nil
}

// List lists the Data Lake Store accounts within the subscription. The response includes a link to the next page of
// results, if any.
//
// filter is oData filter. Optional. top is the number of items to return. Optional. skip is the number of items to
// skip over before returning elements. Optional. expand is oData expansion. Expand related resources in line with the
// retrieved resources, e.g. Categories/$expand=Products would expand Product data in line with each Category entry.
// Optional. selectParameter is oData Select statement. Limits the properties on each entry to just those requested,
// e.g. Categories?$select=CategoryName,Description. Optional. orderby is orderBy clause. One or more comma-separated
// expressions with an optional "asc" (the default) or "desc" depending on the order you'd like the values sorted, e.g.
// Categories?$orderby=CategoryName desc. Optional. count is the Boolean value of true or false to request a count of
// the matching resources included with the resources in the response, e.g. Categories?$count=true. Optional. search is
// a free form search. A free-text search expression to match for whether a particular entry should be included in the
// feed, e.g. Categories?$search=blue OR green. Optional. formatParameter is the desired return format. Return the
// response in particular formatxii without access to request headers for standard content-type negotiation (e.g
// Orders?$format=json). Optional.
func (client Client) List(ctx context.Context, filter *string, top *int32, skip *int32, expand *string, selectParameter *string, orderby *string, count *bool, search *string, formatParameter *string) (*DataLakeStoreAccountListResult, error) {
	req, err := client.listPreparer(filter, top, skip, expand, selectParameter, orderby, count, search, formatParameter)
	if err != nil {
		return nil, err
	}
	resp, err := client.Pipeline().Do(ctx, responderPolicyFactory{responder: client.listResponder}, req)
	if err != nil {
		return nil, err
	}
	return resp.(*DataLakeStoreAccountListResult), err
}

// listPreparer prepares the List request.
func (client Client) listPreparer(filter *string, top *int32, skip *int32, expand *string, selectParameter *string, orderby *string, count *bool, search *string, formatParameter *string) (pipeline.Request, error) {
	u := client.url
	u.Path = "/subscriptions/{subscriptionId}/providers/Microsoft.DataLakeStore/accounts"
	req, err := pipeline.NewRequest("GET", u, nil)
	if err != nil {
		return req, pipeline.NewError(err, "failed to create request")
	}
	params := req.URL.Query()
	if filter != nil {
		params.Set("$filter", *filter)
	}
	if top != nil {
		params.Set("$top", fmt.Sprintf("%v", *top))
	}
	if skip != nil {
		params.Set("$skip", fmt.Sprintf("%v", *skip))
	}
	if expand != nil {
		params.Set("$expand", *expand)
	}
	if selectParameter != nil {
		params.Set("$select", *selectParameter)
	}
	if orderby != nil {
		params.Set("$orderby", *orderby)
	}
	if count != nil {
		params.Set("$count", fmt.Sprintf("%v", *count))
	}
	if search != nil {
		params.Set("$search", *search)
	}
	if formatParameter != nil {
		params.Set("$format", *formatParameter)
	}
	params.Set("api-version", APIVersion)
	req.URL.RawQuery = params.Encode()
	return req, nil
}

// listResponder handles the response to the List request.
func (client Client) listResponder(resp pipeline.Response) (pipeline.Response, error) {
	err := validateResponse(resp, http.StatusOK)
	if resp == nil {
		return nil, err
	}
	result := &DataLakeStoreAccountListResult{rawResponse: resp.Response()}
	if err != nil {
		return result, err
	}
	defer resp.Response().Body.Close()
	b, err := ioutil.ReadAll(resp.Response().Body)
	if err != nil {
		return result, NewResponseError(err, resp.Response(), "failed to read response body")
	}
	if len(b) > 0 {
		err = json.Unmarshal(b, result)
		if err != nil {
			return result, NewResponseError(err, resp.Response(), "failed to unmarshal response body")
		}
	}
	return result, nil
}

// ListByResourceGroup lists the Data Lake Store accounts within a specific resource group. The response includes a
// link to the next page of results, if any.
//
// resourceGroupName is the name of the Azure resource group that contains the Data Lake Store account(s). filter is
// oData filter. Optional. top is the number of items to return. Optional. skip is the number of items to skip over
// before returning elements. Optional. expand is oData expansion. Expand related resources in line with the retrieved
// resources, e.g. Categories/$expand=Products would expand Product data in line with each Category entry. Optional.
// selectParameter is oData Select statement. Limits the properties on each entry to just those requested, e.g.
// Categories?$select=CategoryName,Description. Optional. orderby is orderBy clause. One or more comma-separated
// expressions with an optional "asc" (the default) or "desc" depending on the order you'd like the values sorted, e.g.
// Categories?$orderby=CategoryName desc. Optional. count is a Boolean value of true or false to request a count of the
// matching resources included with the resources in the response, e.g. Categories?$count=true. Optional. search is a
// free form search. A free-text search expression to match for whether a particular entry should be included in the
// feed, e.g. Categories?$search=blue OR green. Optional. formatParameter is the desired return format. Return the
// response in particular formatxii without access to request headers for standard content-type negotiation (e.g
// Orders?$format=json). Optional.
func (client Client) ListByResourceGroup(ctx context.Context, resourceGroupName string, filter *string, top *int32, skip *int32, expand *string, selectParameter *string, orderby *string, count *bool, search *string, formatParameter *string) (*DataLakeStoreAccountListResult, error) {
	req, err := client.listByResourceGroupPreparer(resourceGroupName, filter, top, skip, expand, selectParameter, orderby, count, search, formatParameter)
	if err != nil {
		return nil, err
	}
	resp, err := client.Pipeline().Do(ctx, responderPolicyFactory{responder: client.listByResourceGroupResponder}, req)
	if err != nil {
		return nil, err
	}
	return resp.(*DataLakeStoreAccountListResult), err
}

// listByResourceGroupPreparer prepares the ListByResourceGroup request.
func (client Client) listByResourceGroupPreparer(resourceGroupName string, filter *string, top *int32, skip *int32, expand *string, selectParameter *string, orderby *string, count *bool, search *string, formatParameter *string) (pipeline.Request, error) {
	u := client.url
	u.Path = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DataLakeStore/accounts"
	req, err := pipeline.NewRequest("GET", u, nil)
	if err != nil {
		return req, pipeline.NewError(err, "failed to create request")
	}
	params := req.URL.Query()
	if filter != nil {
		params.Set("$filter", *filter)
	}
	if top != nil {
		params.Set("$top", fmt.Sprintf("%v", *top))
	}
	if skip != nil {
		params.Set("$skip", fmt.Sprintf("%v", *skip))
	}
	if expand != nil {
		params.Set("$expand", *expand)
	}
	if selectParameter != nil {
		params.Set("$select", *selectParameter)
	}
	if orderby != nil {
		params.Set("$orderby", *orderby)
	}
	if count != nil {
		params.Set("$count", fmt.Sprintf("%v", *count))
	}
	if search != nil {
		params.Set("$search", *search)
	}
	if formatParameter != nil {
		params.Set("$format", *formatParameter)
	}
	params.Set("api-version", APIVersion)
	req.URL.RawQuery = params.Encode()
	return req, nil
}

// listByResourceGroupResponder handles the response to the ListByResourceGroup request.
func (client Client) listByResourceGroupResponder(resp pipeline.Response) (pipeline.Response, error) {
	err := validateResponse(resp, http.StatusOK)
	if resp == nil {
		return nil, err
	}
	result := &DataLakeStoreAccountListResult{rawResponse: resp.Response()}
	if err != nil {
		return result, err
	}
	defer resp.Response().Body.Close()
	b, err := ioutil.ReadAll(resp.Response().Body)
	if err != nil {
		return result, NewResponseError(err, resp.Response(), "failed to read response body")
	}
	if len(b) > 0 {
		err = json.Unmarshal(b, result)
		if err != nil {
			return result, NewResponseError(err, resp.Response(), "failed to unmarshal response body")
		}
	}
	return result, nil
}

// ListFirewallRules lists the Data Lake Store firewall rules within the specified Data Lake Store account.
//
// resourceGroupName is the name of the Azure resource group that contains the Data Lake Store account. accountName is
// the name of the Data Lake Store account from which to get the firewall rules.
func (client Client) ListFirewallRules(ctx context.Context, resourceGroupName string, accountName string) (*DataLakeStoreFirewallRuleListResult, error) {
	req, err := client.listFirewallRulesPreparer(resourceGroupName, accountName)
	if err != nil {
		return nil, err
	}
	resp, err := client.Pipeline().Do(ctx, responderPolicyFactory{responder: client.listFirewallRulesResponder}, req)
	if err != nil {
		return nil, err
	}
	return resp.(*DataLakeStoreFirewallRuleListResult), err
}

// listFirewallRulesPreparer prepares the ListFirewallRules request.
func (client Client) listFirewallRulesPreparer(resourceGroupName string, accountName string) (pipeline.Request, error) {
	u := client.url
	u.Path = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DataLakeStore/accounts/{accountName}/firewallRules"
	req, err := pipeline.NewRequest("GET", u, nil)
	if err != nil {
		return req, pipeline.NewError(err, "failed to create request")
	}
	params := req.URL.Query()
	params.Set("api-version", APIVersion)
	req.URL.RawQuery = params.Encode()
	return req, nil
}

// listFirewallRulesResponder handles the response to the ListFirewallRules request.
func (client Client) listFirewallRulesResponder(resp pipeline.Response) (pipeline.Response, error) {
	err := validateResponse(resp, http.StatusOK)
	if resp == nil {
		return nil, err
	}
	result := &DataLakeStoreFirewallRuleListResult{rawResponse: resp.Response()}
	if err != nil {
		return result, err
	}
	defer resp.Response().Body.Close()
	b, err := ioutil.ReadAll(resp.Response().Body)
	if err != nil {
		return result, NewResponseError(err, resp.Response(), "failed to read response body")
	}
	if len(b) > 0 {
		err = json.Unmarshal(b, result)
		if err != nil {
			return result, NewResponseError(err, resp.Response(), "failed to unmarshal response body")
		}
	}
	return result, nil
}

// Update updates the specified Data Lake Store account information. This method may poll for completion. Polling can
// be canceled by passing the cancel channel argument. The channel will be used to cancel polling and any outstanding
// HTTP requests.
//
// resourceGroupName is the name of the Azure resource group that contains the Data Lake Store account. name is the
// name of the Data Lake Store account to update. parameters is parameters supplied to update the Data Lake Store
// account.
func (client Client) Update(ctx context.Context, resourceGroupName string, name string, parameters DataLakeStoreAccount) (*DataLakeStoreAccount, error) {
	req, err := client.updatePreparer(resourceGroupName, name, parameters)
	if err != nil {
		return nil, err
	}
	resp, err := client.Pipeline().Do(ctx, responderPolicyFactory{responder: client.updateResponder}, req)
	if err != nil {
		return nil, err
	}
	return resp.(*DataLakeStoreAccount), err
}

// updatePreparer prepares the Update request.
func (client Client) updatePreparer(resourceGroupName string, name string, parameters DataLakeStoreAccount) (pipeline.Request, error) {
	u := client.url
	u.Path = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DataLakeStore/accounts/{name}"
	req, err := pipeline.NewRequest("PATCH", u, nil)
	if err != nil {
		return req, pipeline.NewError(err, "failed to create request")
	}
	params := req.URL.Query()
	params.Set("api-version", APIVersion)
	req.URL.RawQuery = params.Encode()
	b, err := json.Marshal(parameters)
	if err != nil {
		return req, pipeline.NewError(err, "failed to marshal request body")
	}
	req.Header.Set("Content-Type", "application/json")
	err = req.SetBody(bytes.NewReader(b))
	if err != nil {
		return req, pipeline.NewError(err, "failed to set request body")
	}
	return req, nil
}

// updateResponder handles the response to the Update request.
func (client Client) updateResponder(resp pipeline.Response) (pipeline.Response, error) {
	err := validateResponse(resp, http.StatusOK, http.StatusCreated)
	if resp == nil {
		return nil, err
	}
	result := &DataLakeStoreAccount{rawResponse: resp.Response()}
	if err != nil {
		return result, err
	}
	defer resp.Response().Body.Close()
	b, err := ioutil.ReadAll(resp.Response().Body)
	if err != nil {
		return result, NewResponseError(err, resp.Response(), "failed to read response body")
	}
	if len(b) > 0 {
		err = json.Unmarshal(b, result)
		if err != nil {
			return result, NewResponseError(err, resp.Response(), "failed to unmarshal response body")
		}
	}
	return result, nil
}
