package account

// Copyright (c) Microsoft and contributors.  All rights reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
// http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
//
// See the License for the specific language governing permissions and
// limitations under the License.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

import (
	uuid "github.com/satori/go.uuid"
	"net/http"
	"time"
)

// Marker represents an opaque value used in paged responses.
type Marker struct {
	val *string
}

// NotDone returns true if the list enumeration should be started or is not yet complete. Specifically, NotDone returns true
// for a just-initialized (zero value) Marker indicating that you should make an initial request to get a result portion from
// the service. NotDone also returns true whenever the service returns an interim result portion. NotDone returns false only
// after the service has returned the final result portion.
func (m Marker) NotDone() bool {
	return m.val == nil || *m.val != ""
}

// UnmarshalXML implements the xml.Unmarshaler interface for Marker.
func (m *Marker) UnmarshalXML(d *xml.Decoder, start xml.StartElement) error {
	var out string
	err := d.DecodeElement(&out, &start)
	m.val = &out
	return err
}

// DataLakeStoreAccountStateType enumerates the values for data lake store account state.
type DataLakeStoreAccountStateType string

const (
	// DataLakeStoreAccountStateActive ...
	DataLakeStoreAccountStateActive DataLakeStoreAccountStateType = "active"
	// DataLakeStoreAccountStateNone represents an empty DataLakeStoreAccountStateType.
	DataLakeStoreAccountStateNone DataLakeStoreAccountStateType = ""
	// DataLakeStoreAccountStateSuspended ...
	DataLakeStoreAccountStateSuspended DataLakeStoreAccountStateType = "suspended"
)

// DataLakeStoreAccountStatusType enumerates the values for data lake store account status.
type DataLakeStoreAccountStatusType string

const (
	// DataLakeStoreAccountStatusCreating ...
	DataLakeStoreAccountStatusCreating DataLakeStoreAccountStatusType = "Creating"
	// DataLakeStoreAccountStatusDeleted ...
	DataLakeStoreAccountStatusDeleted DataLakeStoreAccountStatusType = "Deleted"
	// DataLakeStoreAccountStatusDeleting ...
	DataLakeStoreAccountStatusDeleting DataLakeStoreAccountStatusType = "Deleting"
	// DataLakeStoreAccountStatusFailed ...
	DataLakeStoreAccountStatusFailed DataLakeStoreAccountStatusType = "Failed"
	// DataLakeStoreAccountStatusNone represents an empty DataLakeStoreAccountStatusType.
	DataLakeStoreAccountStatusNone DataLakeStoreAccountStatusType = ""
	// DataLakeStoreAccountStatusPatching ...
	DataLakeStoreAccountStatusPatching DataLakeStoreAccountStatusType = "Patching"
	// DataLakeStoreAccountStatusResuming ...
	DataLakeStoreAccountStatusResuming DataLakeStoreAccountStatusType = "Resuming"
	// DataLakeStoreAccountStatusRunning ...
	DataLakeStoreAccountStatusRunning DataLakeStoreAccountStatusType = "Running"
	// DataLakeStoreAccountStatusSucceeded ...
	DataLakeStoreAccountStatusSucceeded DataLakeStoreAccountStatusType = "Succeeded"
	// DataLakeStoreAccountStatusSuspending ...
	DataLakeStoreAccountStatusSuspending DataLakeStoreAccountStatusType = "Suspending"
)

// EncryptionConfigType enumerates the values for encryption config type.
type EncryptionConfigType string

const (
	// EncryptionConfigNone represents an empty EncryptionConfigType.
	EncryptionConfigNone EncryptionConfigType = ""
	// EncryptionConfigServiceManaged ...
	EncryptionConfigServiceManaged EncryptionConfigType = "ServiceManaged"
	// EncryptionConfigUserManaged ...
	EncryptionConfigUserManaged EncryptionConfigType = "UserManaged"
)

// EncryptionIdentityType enumerates the values for encryption identity type.
type EncryptionIdentityType string

const (
	// EncryptionIdentityNone represents an empty EncryptionIdentityType.
	EncryptionIdentityNone EncryptionIdentityType = ""
	// EncryptionIdentitySystemAssigned ...
	EncryptionIdentitySystemAssigned EncryptionIdentityType = "SystemAssigned"
)

// EncryptionProvisioningStateType enumerates the values for encryption provisioning state.
type EncryptionProvisioningStateType string

const (
	// EncryptionProvisioningStateCreating ...
	EncryptionProvisioningStateCreating EncryptionProvisioningStateType = "Creating"
	// EncryptionProvisioningStateNone represents an empty EncryptionProvisioningStateType.
	EncryptionProvisioningStateNone EncryptionProvisioningStateType = ""
	// EncryptionProvisioningStateSucceeded ...
	EncryptionProvisioningStateSucceeded EncryptionProvisioningStateType = "Succeeded"
)

// EncryptionStateType enumerates the values for encryption state.
type EncryptionStateType string

const (
	// EncryptionStateDisabled ...
	EncryptionStateDisabled EncryptionStateType = "Disabled"
	// EncryptionStateEnabled ...
	EncryptionStateEnabled EncryptionStateType = "Enabled"
	// EncryptionStateNone represents an empty EncryptionStateType.
	EncryptionStateNone EncryptionStateType = ""
)

// OperationStatusType enumerates the values for operation status.
type OperationStatusType string

const (
	// OperationStatusFailed ...
	OperationStatusFailed OperationStatusType = "Failed"
	// OperationStatusInProgress ...
	OperationStatusInProgress OperationStatusType = "InProgress"
	// OperationStatusNone represents an empty OperationStatusType.
	OperationStatusNone OperationStatusType = ""
	// OperationStatusSucceeded ...
	OperationStatusSucceeded OperationStatusType = "Succeeded"
)

// AzureAsyncOperationResult - The response body contains the status of the specified asynchronous operation,
// indicating whether it has succeeded, is in progress, or has failed. Note that this status is distinct from the HTTP
// status code returned for the Get Operation Status operation itself. If the asynchronous operation succeeded, the
// response body includes the HTTP status code for the successful request. If the asynchronous operation failed, the
// response body includes the HTTP status code for the failed request and error information regarding the failure.
type AzureAsyncOperationResult struct {
	// Status - the status of the AzureAsuncOperation. Possible values include: 'InProgress', 'Succeeded', 'Failed', 'None'
	Status OperationStatusType `json:"status,omitempty"`
	Error  *Error              `json:"error,omitempty"`
}

// DataLakeStoreAccount - Data Lake Store account information
type DataLakeStoreAccount struct {
	rawResponse *http.Response
	// Location - the account regional location.
	Location *string `json:"location,omitempty"`
	// Name - the account name.
	Name *string `json:"name,omitempty"`
	// Type - the namespace and type of the account.
	Type *string `json:"type,omitempty"`
	// ID - the account subscription ID.
	ID *string `json:"id,omitempty"`
	// Identity - The Key vault encryption identity, if any.
	Identity *EncryptionIdentity `json:"identity,omitempty"`
	// Tags - the value of custom properties.
	Tags map[string]string `json:"tags,omitempty"`
	// Properties - the Data Lake Store account properties.
	Properties *DataLakeStoreAccountProperties `json:"properties,omitempty"`
}

// Response returns the raw HTTP response object.
func (dlsa DataLakeStoreAccount) Response() *http.Response {
	return dlsa.rawResponse
}

// StatusCode returns the HTTP status code of the response, e.g. 200.
func (dlsa DataLakeStoreAccount) StatusCode() int {
	return dlsa.rawResponse.StatusCode
}

// Status returns the HTTP status message of the response, e.g. "200 OK".
func (dlsa DataLakeStoreAccount) Status() string {
	return dlsa.rawResponse.Status
}

// DataLakeStoreAccountListResult - Data Lake Store account list information response.
type DataLakeStoreAccountListResult struct {
	rawResponse *http.Response
	// Value - the results of the list operation
	Value []DataLakeStoreAccount `json:"value,omitempty"`
	// NextLink - the link (url) to the next page of results.
	NextLink Marker `json:"NextLink"` // Count - the total count of results that are available, but might not be returned in the current page.
	Count    *int64 `json:"count,omitempty"`
}

// Response returns the raw HTTP response object.
func (dlsalr DataLakeStoreAccountListResult) Response() *http.Response {
	return dlsalr.rawResponse
}

// StatusCode returns the HTTP status code of the response, e.g. 200.
func (dlsalr DataLakeStoreAccountListResult) StatusCode() int {
	return dlsalr.rawResponse.StatusCode
}

// Status returns the HTTP status message of the response, e.g. "200 OK".
func (dlsalr DataLakeStoreAccountListResult) Status() string {
	return dlsalr.rawResponse.Status
}

// DataLakeStoreAccountProperties - Data Lake Store account properties information
type DataLakeStoreAccountProperties struct {
	// ProvisioningState - the status of the Data Lake Store account while being provisioned. Possible values include: 'Failed', 'Creating', 'Running', 'Succeeded', 'Patching', 'Suspending', 'Resuming', 'Deleting', 'Deleted', 'None'
	ProvisioningState DataLakeStoreAccountStatusType `json:"provisioningState,omitempty"`
	// State - the status of the Data Lake Store account after provisioning has completed. Possible values include: 'Active', 'Suspended', 'None'
	State DataLakeStoreAccountStateType `json:"state,omitempty"`
	// CreationTime - the account creation time.
	CreationTime *time.Time `json:"creationTime,omitempty"`
	// EncryptionState - The current state of encryption for this Data Lake store account. Possible values include: 'Enabled', 'Disabled', 'None'
	EncryptionState EncryptionStateType `json:"encryptionState,omitempty"`
	// EncryptionProvisioningState - The current state of encryption provisioning for this Data Lake store account. Possible values include: 'Creating', 'Succeeded', 'None'
	EncryptionProvisioningState EncryptionProvisioningStateType `json:"encryptionProvisioningState,omitempty"`
	// EncryptionConfig - The Key vault encryption configuration.
	EncryptionConfig *EncryptionConfig `json:"encryptionConfig,omitempty"`
	// LastModifiedTime - the account last modified time.
	LastModifiedTime *time.Time `json:"lastModifiedTime,omitempty"`
	// Endpoint - the gateway host.
	Endpoint *string `json:"endpoint,omitempty"`
	// DefaultGroup - the default owner group for all new folders and files created in the Data Lake Store account.
	DefaultGroup *string `json:"defaultGroup,omitempty"`
}

// DataLakeStoreFirewallRuleListResult - Data Lake Store firewall rule list information.
type DataLakeStoreFirewallRuleListResult struct {
	rawResponse *http.Response
	// Value - the results of the list operation
	Value []FirewallRule `json:"value,omitempty"`
	// NextLink - the link (url) to the next page of results.
	NextLink Marker `json:"NextLink"` // Count - the total count of results that are available, but might not be returned in the current page.
	Count    *int64 `json:"count,omitempty"`
}

// Response returns the raw HTTP response object.
func (dlsfrlr DataLakeStoreFirewallRuleListResult) Response() *http.Response {
	return dlsfrlr.rawResponse
}

// StatusCode returns the HTTP status code of the response, e.g. 200.
func (dlsfrlr DataLakeStoreFirewallRuleListResult) StatusCode() int {
	return dlsfrlr.rawResponse.StatusCode
}

// Status returns the HTTP status message of the response, e.g. "200 OK".
func (dlsfrlr DataLakeStoreFirewallRuleListResult) Status() string {
	return dlsfrlr.rawResponse.Status
}

// EncryptionConfig ...
type EncryptionConfig struct {
	// Type - The type of encryption configuration being used. Currently the only supported types are 'UserManaged' and 'ServiceManaged'. Possible values include: 'UserManaged', 'ServiceManaged', 'None'
	Type EncryptionConfigType `json:"type,omitempty"`
	// KeyVaultMetaInfo - The Key vault information for connecting to user managed encryption keys.
	KeyVaultMetaInfo *KeyVaultMetaInfo `json:"keyVaultMetaInfo,omitempty"`
}

// EncryptionIdentity ...
type EncryptionIdentity struct {
	// Type - The type of encryption being used. Currently the only supported type is 'SystemAssigned'. Possible values include: 'SystemAssigned', 'None'
	Type EncryptionIdentityType `json:"type,omitempty"`
	// PrincipalID - The principal identifier associated with the encryption.
	PrincipalID *uuid.UUID `json:"principalId,omitempty"`
	// TenantID - The tenant identifier associated with the encryption.
	TenantID *uuid.UUID `json:"tenantId,omitempty"`
}

// Error - Data Lake Store error information
type Error struct {
	// Code - the HTTP status code or error code associated with this error
	Code *string `json:"code,omitempty"`
	// Message - the error message to display.
	Message *string `json:"message,omitempty"`
	// Target - the target of the error.
	Target *string `json:"target,omitempty"`
	// Details - the list of error details
	Details []ErrorDetails `json:"details,omitempty"`
	// InnerError - the inner exceptions or errors, if any
	InnerError *InnerError `json:"innerError,omitempty"`
}

// ErrorDetails - Data Lake Store error details information
type ErrorDetails struct {
	// Code - the HTTP status code or error code associated with this error
	Code *string `json:"code,omitempty"`
	// Message - the error message localized based on Accept-Language
	Message *string `json:"message,omitempty"`
	// Target - the target of the particular error (for example, the name of the property in error).
	Target *string `json:"target,omitempty"`
}

// FirewallRule - Data Lake Store firewall rule information
type FirewallRule struct {
	rawResponse *http.Response
	// Name - the firewall rule's name.
	Name *string `json:"name,omitempty"`
	// Type - the namespace and type of the firewall Rule.
	Type *string `json:"type,omitempty"`
	// ID - the firewall rule's subscription ID.
	ID *string `json:"id,omitempty"`
	// Location - the firewall rule's regional location.
	Location *string `json:"location,omitempty"`
	// Properties - the properties of the firewall rule.
	Properties *FirewallRuleProperties `json:"properties,omitempty"`
}

// Response returns the raw HTTP response object.
func (fr FirewallRule) Response() *http.Response {
	return fr.rawResponse
}

// StatusCode returns the HTTP status code of the response, e.g. 200.
func (fr FirewallRule) StatusCode() int {
	return fr.rawResponse.StatusCode
}

// Status returns the HTTP status message of the response, e.g. "200 OK".
func (fr FirewallRule) Status() string {
	return fr.rawResponse.Status
}

// FirewallRuleProperties - Data Lake Store firewall rule properties information
type FirewallRuleProperties struct {
	// StartIPAddress - the start IP address for the firewall rule.
	StartIPAddress *string `json:"startIpAddress,omitempty"`
	// EndIPAddress - the end IP address for the firewall rule.
	EndIPAddress *string `json:"endIpAddress,omitempty"`
}

// InnerError - Data Lake Store inner error information
type InnerError struct {
	// Trace - the stack trace for the error
	Trace *string `json:"trace,omitempty"`
	// Context - the context for the error message
	Context *string `json:"context,omitempty"`
}

// KeyVaultMetaInfo ...
type KeyVaultMetaInfo struct {
	// KeyVaultResourceID - The resource identifier for the user managed Key Vault being used to encrypt.
	KeyVaultResourceID *string `json:"keyVaultResourceId,omitempty"`
	// EncryptionKeyName - The name of the user managed encryption key.
	EncryptionKeyName *string `json:"encryptionKeyName,omitempty"`
	// EncryptionKeyVersion - The version of the user managed encryption key.
	EncryptionKeyVersion *string `json:"encryptionKeyVersion,omitempty"`
}
