package account

// Copyright (c) Microsoft and contributors.  All rights reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
// http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
//
// See the License for the specific language governing permissions and
// limitations under the License.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

import (
	uuid "github.com/satori/go.uuid"
	"net/http"
	"time"
)

// Marker represents an opaque value used in paged responses.
type Marker struct {
	val *string
}

// NotDone returns true if the list enumeration should be started or is not yet complete. Specifically, NotDone returns true
// for a just-initialized (zero value) Marker indicating that you should make an initial request to get a result portion from
// the service. NotDone also returns true whenever the service returns an interim result portion. NotDone returns false only
// after the service has returned the final result portion.
func (m Marker) NotDone() bool {
	return m.val == nil || *m.val != ""
}

// UnmarshalXML implements the xml.Unmarshaler interface for Marker.
func (m *Marker) UnmarshalXML(d *xml.Decoder, start xml.StartElement) error {
	var out string
	err := d.DecodeElement(&out, &start)
	m.val = &out
	return err
}

// DataLakeStoreAccountStateType enumerates the values for data lake store account state.
type DataLakeStoreAccountStateType string

const (
	// DataLakeStoreAccountStateActive ...
	DataLakeStoreAccountStateActive DataLakeStoreAccountStateType = "Active"
	// DataLakeStoreAccountStateNone represents an empty DataLakeStoreAccountStateType.
	DataLakeStoreAccountStateNone DataLakeStoreAccountStateType = ""
	// DataLakeStoreAccountStateSuspended ...
	DataLakeStoreAccountStateSuspended DataLakeStoreAccountStateType = "Suspended"
)

// DataLakeStoreAccountStatusType enumerates the values for data lake store account status.
type DataLakeStoreAccountStatusType string

const (
	// DataLakeStoreAccountStatusCanceled ...
	DataLakeStoreAccountStatusCanceled DataLakeStoreAccountStatusType = "Canceled"
	// DataLakeStoreAccountStatusCreating ...
	DataLakeStoreAccountStatusCreating DataLakeStoreAccountStatusType = "Creating"
	// DataLakeStoreAccountStatusDeleted ...
	DataLakeStoreAccountStatusDeleted DataLakeStoreAccountStatusType = "Deleted"
	// DataLakeStoreAccountStatusDeleting ...
	DataLakeStoreAccountStatusDeleting DataLakeStoreAccountStatusType = "Deleting"
	// DataLakeStoreAccountStatusFailed ...
	DataLakeStoreAccountStatusFailed DataLakeStoreAccountStatusType = "Failed"
	// DataLakeStoreAccountStatusNone represents an empty DataLakeStoreAccountStatusType.
	DataLakeStoreAccountStatusNone DataLakeStoreAccountStatusType = ""
	// DataLakeStoreAccountStatusPatching ...
	DataLakeStoreAccountStatusPatching DataLakeStoreAccountStatusType = "Patching"
	// DataLakeStoreAccountStatusResuming ...
	DataLakeStoreAccountStatusResuming DataLakeStoreAccountStatusType = "Resuming"
	// DataLakeStoreAccountStatusRunning ...
	DataLakeStoreAccountStatusRunning DataLakeStoreAccountStatusType = "Running"
	// DataLakeStoreAccountStatusSucceeded ...
	DataLakeStoreAccountStatusSucceeded DataLakeStoreAccountStatusType = "Succeeded"
	// DataLakeStoreAccountStatusSuspending ...
	DataLakeStoreAccountStatusSuspending DataLakeStoreAccountStatusType = "Suspending"
	// DataLakeStoreAccountStatusUndeleting ...
	DataLakeStoreAccountStatusUndeleting DataLakeStoreAccountStatusType = "Undeleting"
)

// EncryptionConfigType enumerates the values for encryption config type.
type EncryptionConfigType string

const (
	// EncryptionConfigNone represents an empty EncryptionConfigType.
	EncryptionConfigNone EncryptionConfigType = ""
	// EncryptionConfigServiceManaged ...
	EncryptionConfigServiceManaged EncryptionConfigType = "ServiceManaged"
	// EncryptionConfigUserManaged ...
	EncryptionConfigUserManaged EncryptionConfigType = "UserManaged"
)

// EncryptionProvisioningStateType enumerates the values for encryption provisioning state.
type EncryptionProvisioningStateType string

const (
	// EncryptionProvisioningStateCreating ...
	EncryptionProvisioningStateCreating EncryptionProvisioningStateType = "Creating"
	// EncryptionProvisioningStateNone represents an empty EncryptionProvisioningStateType.
	EncryptionProvisioningStateNone EncryptionProvisioningStateType = ""
	// EncryptionProvisioningStateSucceeded ...
	EncryptionProvisioningStateSucceeded EncryptionProvisioningStateType = "Succeeded"
)

// EncryptionStateType enumerates the values for encryption state.
type EncryptionStateType string

const (
	// EncryptionStateDisabled ...
	EncryptionStateDisabled EncryptionStateType = "Disabled"
	// EncryptionStateEnabled ...
	EncryptionStateEnabled EncryptionStateType = "Enabled"
	// EncryptionStateNone represents an empty EncryptionStateType.
	EncryptionStateNone EncryptionStateType = ""
)

// FirewallAllowAzureIpsStateType enumerates the values for firewall allow azure ips state.
type FirewallAllowAzureIpsStateType string

const (
	// FirewallAllowAzureIpsStateDisabled ...
	FirewallAllowAzureIpsStateDisabled FirewallAllowAzureIpsStateType = "Disabled"
	// FirewallAllowAzureIpsStateEnabled ...
	FirewallAllowAzureIpsStateEnabled FirewallAllowAzureIpsStateType = "Enabled"
	// FirewallAllowAzureIpsStateNone represents an empty FirewallAllowAzureIpsStateType.
	FirewallAllowAzureIpsStateNone FirewallAllowAzureIpsStateType = ""
)

// FirewallStateType enumerates the values for firewall state.
type FirewallStateType string

const (
	// FirewallStateDisabled ...
	FirewallStateDisabled FirewallStateType = "Disabled"
	// FirewallStateEnabled ...
	FirewallStateEnabled FirewallStateType = "Enabled"
	// FirewallStateNone represents an empty FirewallStateType.
	FirewallStateNone FirewallStateType = ""
)

// OperationOriginType enumerates the values for operation origin.
type OperationOriginType string

const (
	// OperationOriginNone represents an empty OperationOriginType.
	OperationOriginNone OperationOriginType = ""
	// OperationOriginSystem ...
	OperationOriginSystem OperationOriginType = "system"
	// OperationOriginUser ...
	OperationOriginUser OperationOriginType = "user"
	// OperationOriginUsersystem ...
	OperationOriginUsersystem OperationOriginType = "user,system"
)

// SubscriptionStateType enumerates the values for subscription state.
type SubscriptionStateType string

const (
	// SubscriptionStateDeleted ...
	SubscriptionStateDeleted SubscriptionStateType = "Deleted"
	// SubscriptionStateNone represents an empty SubscriptionStateType.
	SubscriptionStateNone SubscriptionStateType = ""
	// SubscriptionStateRegistered ...
	SubscriptionStateRegistered SubscriptionStateType = "Registered"
	// SubscriptionStateSuspended ...
	SubscriptionStateSuspended SubscriptionStateType = "Suspended"
	// SubscriptionStateUnregistered ...
	SubscriptionStateUnregistered SubscriptionStateType = "Unregistered"
	// SubscriptionStateWarned ...
	SubscriptionStateWarned SubscriptionStateType = "Warned"
)

// TierType enumerates the values for tier type.
type TierType string

const (
	// TierCommitment100TB ...
	TierCommitment100TB TierType = "Commitment_100TB"
	// TierCommitment10TB ...
	TierCommitment10TB TierType = "Commitment_10TB"
	// TierCommitment1PB ...
	TierCommitment1PB TierType = "Commitment_1PB"
	// TierCommitment1TB ...
	TierCommitment1TB TierType = "Commitment_1TB"
	// TierCommitment500TB ...
	TierCommitment500TB TierType = "Commitment_500TB"
	// TierCommitment5PB ...
	TierCommitment5PB TierType = "Commitment_5PB"
	// TierConsumption ...
	TierConsumption TierType = "Consumption"
	// TierNone represents an empty TierType.
	TierNone TierType = ""
)

// TrustedIDProviderStateType enumerates the values for trusted id provider state.
type TrustedIDProviderStateType string

const (
	// TrustedIDProviderStateDisabled ...
	TrustedIDProviderStateDisabled TrustedIDProviderStateType = "Disabled"
	// TrustedIDProviderStateEnabled ...
	TrustedIDProviderStateEnabled TrustedIDProviderStateType = "Enabled"
	// TrustedIDProviderStateNone represents an empty TrustedIDProviderStateType.
	TrustedIDProviderStateNone TrustedIDProviderStateType = ""
)

// CapabilityInformation - Subscription-level properties and limits for Data Lake Store.
type CapabilityInformation struct {
	rawResponse *http.Response
	// SubscriptionID - The subscription credentials that uniquely identifies the subscription.
	SubscriptionID *uuid.UUID `json:"subscriptionId,omitempty"`
	// State - The subscription state. Possible values include: 'Registered', 'Suspended', 'Deleted', 'Unregistered', 'Warned', 'None'
	State SubscriptionStateType `json:"state,omitempty"`
	// MaxAccountCount - The maximum supported number of accounts under this subscription.
	MaxAccountCount *int32 `json:"maxAccountCount,omitempty"`
	// AccountCount - The current number of accounts under this subscription.
	AccountCount *int32 `json:"accountCount,omitempty"`
	// MigrationState - The Boolean value of true or false to indicate the maintenance state.
	MigrationState *bool `json:"migrationState,omitempty"`
}

// Response returns the raw HTTP response object.
func (ci CapabilityInformation) Response() *http.Response {
	return ci.rawResponse
}

// StatusCode returns the HTTP status code of the response, e.g. 200.
func (ci CapabilityInformation) StatusCode() int {
	return ci.rawResponse.StatusCode
}

// Status returns the HTTP status message of the response, e.g. "200 OK".
func (ci CapabilityInformation) Status() string {
	return ci.rawResponse.Status
}

// CheckNameAvailabilityParameters - Data Lake Store account name availability check parameters.
type CheckNameAvailabilityParameters struct {
	// Name - The Data Lake Store name to check availability for.
	Name string `json:"name,omitempty"`
	// Type - The resource type. Note: This should not be set by the user, as the constant value is Microsoft.DataLakeStore/accounts
	Type string `json:"type,omitempty"`
}

// CreateDataLakeStoreAccountParameters ...
type CreateDataLakeStoreAccountParameters struct {
	// Location - The resource location.
	Location string `json:"location,omitempty"`
	// Tags - The resource tags.
	Tags map[string]string `json:"tags,omitempty"`
	// Identity - The Key Vault encryption identity, if any.
	Identity *EncryptionIdentity `json:"identity,omitempty"`
	// Properties - The Data Lake Store account properties to use for creating.
	*CreateDataLakeStoreAccountProperties `json:"properties,omitempty"`
}

// CreateDataLakeStoreAccountProperties ...
type CreateDataLakeStoreAccountProperties struct {
	// DefaultGroup - The default owner group for all new folders and files created in the Data Lake Store account.
	DefaultGroup *string `json:"defaultGroup,omitempty"`
	// EncryptionConfig - The Key Vault encryption configuration.
	EncryptionConfig *EncryptionConfig `json:"encryptionConfig,omitempty"`
	// EncryptionState - The current state of encryption for this Data Lake Store account. Possible values include: 'Enabled', 'Disabled', 'None'
	EncryptionState EncryptionStateType `json:"encryptionState,omitempty"`
	// FirewallRules - The list of firewall rules associated with this Data Lake Store account.
	FirewallRules []CreateFirewallRuleWithAccountParameters `json:"firewallRules,omitempty"`
	// FirewallState - The current state of the IP address firewall for this Data Lake Store account. Possible values include: 'Enabled', 'Disabled', 'None'
	FirewallState FirewallStateType `json:"firewallState,omitempty"`
	// FirewallAllowAzureIps - The current state of allowing or disallowing IPs originating within Azure through the firewall. If the firewall is disabled, this is not enforced. Possible values include: 'Enabled', 'Disabled', 'None'
	FirewallAllowAzureIps FirewallAllowAzureIpsStateType `json:"firewallAllowAzureIps,omitempty"`
	// TrustedIDProviders - The list of trusted identity providers associated with this Data Lake Store account.
	TrustedIDProviders []CreateTrustedIDProviderWithAccountParameters `json:"trustedIdProviders,omitempty"`
	// TrustedIDProviderState - The current state of the trusted identity provider feature for this Data Lake Store account. Possible values include: 'Enabled', 'Disabled', 'None'
	TrustedIDProviderState TrustedIDProviderStateType `json:"trustedIdProviderState,omitempty"`
	// NewTier - The commitment tier to use for next month. Possible values include: 'Consumption', 'Commitment1TB', 'Commitment10TB', 'Commitment100TB', 'Commitment500TB', 'Commitment1PB', 'Commitment5PB', 'None'
	NewTier TierType `json:"newTier,omitempty"`
}

// CreateFirewallRuleWithAccountParameters - The parameters used to create a new firewall rule while creating a new
// Data Lake Store account.
type CreateFirewallRuleWithAccountParameters struct {
	// Name - The unique name of the firewall rule to create.
	Name string `json:"name,omitempty"`
	// Properties - The firewall rule properties to use when creating a new firewall rule.
	*CreateOrUpdateFirewallRuleProperties `json:"properties,omitempty"`
}

// CreateOrUpdateFirewallRuleParameters - The parameters used to create a new firewall rule.
type CreateOrUpdateFirewallRuleParameters struct {
	// Properties - The firewall rule properties to use when creating a new firewall rule.
	*CreateOrUpdateFirewallRuleProperties `json:"properties,omitempty"`
}

// CreateOrUpdateFirewallRuleProperties - The firewall rule properties to use when creating a new firewall rule.
type CreateOrUpdateFirewallRuleProperties struct {
	// StartIPAddress - The start IP address for the firewall rule. This can be either ipv4 or ipv6. Start and End should be in the same protocol.
	StartIPAddress string `json:"startIpAddress,omitempty"`
	// EndIPAddress - The end IP address for the firewall rule. This can be either ipv4 or ipv6. Start and End should be in the same protocol.
	EndIPAddress string `json:"endIpAddress,omitempty"`
}

// CreateOrUpdateTrustedIDProviderParameters - The parameters used to create a new trusted identity provider.
type CreateOrUpdateTrustedIDProviderParameters struct {
	// Properties - The trusted identity provider properties to use when creating a new trusted identity provider.
	*CreateOrUpdateTrustedIDProviderProperties `json:"properties,omitempty"`
}

// CreateOrUpdateTrustedIDProviderProperties - The trusted identity provider properties to use when creating a new
// trusted identity provider.
type CreateOrUpdateTrustedIDProviderProperties struct {
	// IDProvider - The URL of this trusted identity provider.
	IDProvider string `json:"idProvider,omitempty"`
}

// CreateTrustedIDProviderWithAccountParameters - The parameters used to create a new trusted identity provider while
// creating a new Data Lake Store account.
type CreateTrustedIDProviderWithAccountParameters struct {
	// Name - The unique name of the trusted identity provider to create.
	Name string `json:"name,omitempty"`
	// Properties - The trusted identity provider properties to use when creating a new trusted identity provider.
	*CreateOrUpdateTrustedIDProviderProperties `json:"properties,omitempty"`
}

// DataLakeStoreAccount - Data Lake Store account information.
type DataLakeStoreAccount struct {
	rawResponse *http.Response
	// ID - The resource identifier.
	ID *string `json:"id,omitempty"`
	// Name - The resource name.
	Name *string `json:"name,omitempty"`
	// Type - The resource type.
	Type *string `json:"type,omitempty"`
	// Location - The resource location.
	Location *string `json:"location,omitempty"`
	// Tags - The resource tags.
	Tags map[string]string `json:"tags,omitempty"`
	// Identity - The Key Vault encryption identity, if any.
	Identity *EncryptionIdentity `json:"identity,omitempty"`
	// Properties - The Data Lake Store account properties.
	*DataLakeStoreAccountProperties `json:"properties,omitempty"`
}

// Response returns the raw HTTP response object.
func (dlsa DataLakeStoreAccount) Response() *http.Response {
	return dlsa.rawResponse
}

// StatusCode returns the HTTP status code of the response, e.g. 200.
func (dlsa DataLakeStoreAccount) StatusCode() int {
	return dlsa.rawResponse.StatusCode
}

// Status returns the HTTP status message of the response, e.g. "200 OK".
func (dlsa DataLakeStoreAccount) Status() string {
	return dlsa.rawResponse.Status
}

// DataLakeStoreAccountBasic - Basic Data Lake Store account information, returned on list calls.
type DataLakeStoreAccountBasic struct {
	// ID - The resource identifier.
	ID *string `json:"id,omitempty"`
	// Name - The resource name.
	Name *string `json:"name,omitempty"`
	// Type - The resource type.
	Type *string `json:"type,omitempty"`
	// Location - The resource location.
	Location *string `json:"location,omitempty"`
	// Tags - The resource tags.
	Tags map[string]string `json:"tags,omitempty"`
	// Properties - The basic Data Lake Store account properties.
	*DataLakeStoreAccountPropertiesBasic `json:"properties,omitempty"`
}

// DataLakeStoreAccountListResult - Data Lake Store account list information response.
type DataLakeStoreAccountListResult struct {
	rawResponse *http.Response
	// Value - The results of the list operation.
	Value []DataLakeStoreAccountBasic `json:"value,omitempty"`
	// NextLink - The link (url) to the next page of results.
	NextLink Marker `json:"NextLink"`
}

// Response returns the raw HTTP response object.
func (dlsalr DataLakeStoreAccountListResult) Response() *http.Response {
	return dlsalr.rawResponse
}

// StatusCode returns the HTTP status code of the response, e.g. 200.
func (dlsalr DataLakeStoreAccountListResult) StatusCode() int {
	return dlsalr.rawResponse.StatusCode
}

// Status returns the HTTP status message of the response, e.g. "200 OK".
func (dlsalr DataLakeStoreAccountListResult) Status() string {
	return dlsalr.rawResponse.Status
}

// DataLakeStoreAccountProperties - Data Lake Store account properties information.
type DataLakeStoreAccountProperties struct {
	// AccountID - The unique identifier associated with this Data Lake Store account.
	AccountID *uuid.UUID `json:"accountId,omitempty"`
	// ProvisioningState - The provisioning status of the Data Lake Store account. Possible values include: 'Failed', 'Creating', 'Running', 'Succeeded', 'Patching', 'Suspending', 'Resuming', 'Deleting', 'Deleted', 'Undeleting', 'Canceled', 'None'
	ProvisioningState DataLakeStoreAccountStatusType `json:"provisioningState,omitempty"`
	// State - The state of the Data Lake Store account. Possible values include: 'Active', 'Suspended', 'None'
	State DataLakeStoreAccountStateType `json:"state,omitempty"`
	// CreationTime - The account creation time.
	CreationTime *time.Time `json:"creationTime,omitempty"`
	// LastModifiedTime - The account last modified time.
	LastModifiedTime *time.Time `json:"lastModifiedTime,omitempty"`
	// Endpoint - The full CName endpoint for this account.
	Endpoint *string `json:"endpoint,omitempty"`
	// DefaultGroup - The default owner group for all new folders and files created in the Data Lake Store account.
	DefaultGroup *string `json:"defaultGroup,omitempty"`
	// EncryptionConfig - The Key Vault encryption configuration.
	EncryptionConfig *EncryptionConfig `json:"encryptionConfig,omitempty"`
	// EncryptionState - The current state of encryption for this Data Lake Store account. Possible values include: 'Enabled', 'Disabled', 'None'
	EncryptionState EncryptionStateType `json:"encryptionState,omitempty"`
	// EncryptionProvisioningState - The current state of encryption provisioning for this Data Lake Store account. Possible values include: 'Creating', 'Succeeded', 'None'
	EncryptionProvisioningState EncryptionProvisioningStateType `json:"encryptionProvisioningState,omitempty"`
	// FirewallRules - The list of firewall rules associated with this Data Lake Store account.
	FirewallRules []FirewallRule `json:"firewallRules,omitempty"`
	// FirewallState - The current state of the IP address firewall for this Data Lake Store account. Possible values include: 'Enabled', 'Disabled', 'None'
	FirewallState FirewallStateType `json:"firewallState,omitempty"`
	// FirewallAllowAzureIps - The current state of allowing or disallowing IPs originating within Azure through the firewall. If the firewall is disabled, this is not enforced. Possible values include: 'Enabled', 'Disabled', 'None'
	FirewallAllowAzureIps FirewallAllowAzureIpsStateType `json:"firewallAllowAzureIps,omitempty"`
	// TrustedIDProviders - The list of trusted identity providers associated with this Data Lake Store account.
	TrustedIDProviders []TrustedIDProvider `json:"trustedIdProviders,omitempty"`
	// TrustedIDProviderState - The current state of the trusted identity provider feature for this Data Lake Store account. Possible values include: 'Enabled', 'Disabled', 'None'
	TrustedIDProviderState TrustedIDProviderStateType `json:"trustedIdProviderState,omitempty"`
	// NewTier - The commitment tier to use for next month. Possible values include: 'Consumption', 'Commitment1TB', 'Commitment10TB', 'Commitment100TB', 'Commitment500TB', 'Commitment1PB', 'Commitment5PB', 'None'
	NewTier TierType `json:"newTier,omitempty"`
	// CurrentTier - The commitment tier in use for the current month. Possible values include: 'Consumption', 'Commitment1TB', 'Commitment10TB', 'Commitment100TB', 'Commitment500TB', 'Commitment1PB', 'Commitment5PB', 'None'
	CurrentTier TierType `json:"currentTier,omitempty"`
}

// DataLakeStoreAccountPropertiesBasic - The basic account specific properties that are associated with an underlying
// Data Lake Store account.
type DataLakeStoreAccountPropertiesBasic struct {
	// AccountID - The unique identifier associated with this Data Lake Store account.
	AccountID *uuid.UUID `json:"accountId,omitempty"`
	// ProvisioningState - The provisioning status of the Data Lake Store account. Possible values include: 'Failed', 'Creating', 'Running', 'Succeeded', 'Patching', 'Suspending', 'Resuming', 'Deleting', 'Deleted', 'Undeleting', 'Canceled', 'None'
	ProvisioningState DataLakeStoreAccountStatusType `json:"provisioningState,omitempty"`
	// State - The state of the Data Lake Store account. Possible values include: 'Active', 'Suspended', 'None'
	State DataLakeStoreAccountStateType `json:"state,omitempty"`
	// CreationTime - The account creation time.
	CreationTime *time.Time `json:"creationTime,omitempty"`
	// LastModifiedTime - The account last modified time.
	LastModifiedTime *time.Time `json:"lastModifiedTime,omitempty"`
	// Endpoint - The full CName endpoint for this account.
	Endpoint *string `json:"endpoint,omitempty"`
}

// EncryptionConfig - The encryption configuration for the account.
type EncryptionConfig struct {
	// Type - The type of encryption configuration being used. Currently the only supported types are 'UserManaged' and 'ServiceManaged'. Possible values include: 'UserManaged', 'ServiceManaged', 'None'
	Type EncryptionConfigType `json:"type,omitempty"`
	// KeyVaultMetaInfo - The Key Vault information for connecting to user managed encryption keys.
	KeyVaultMetaInfo *KeyVaultMetaInfo `json:"keyVaultMetaInfo,omitempty"`
}

// EncryptionIdentity - The encryption identity properties.
type EncryptionIdentity struct {
	// Type - The type of encryption being used. Currently the only supported type is 'SystemAssigned'.
	Type string `json:"type,omitempty"`
	// PrincipalID - The principal identifier associated with the encryption.
	PrincipalID *uuid.UUID `json:"principalId,omitempty"`
	// TenantID - The tenant identifier associated with the encryption.
	TenantID *uuid.UUID `json:"tenantId,omitempty"`
}

// FirewallRule - Data Lake Store firewall rule information.
type FirewallRule struct {
	rawResponse *http.Response
	// ID - The resource identifier.
	ID *string `json:"id,omitempty"`
	// Name - The resource name.
	Name *string `json:"name,omitempty"`
	// Type - The resource type.
	Type *string `json:"type,omitempty"`
	// Properties - The firewall rule properties.
	*FirewallRuleProperties `json:"properties,omitempty"`
}

// Response returns the raw HTTP response object.
func (fr FirewallRule) Response() *http.Response {
	return fr.rawResponse
}

// StatusCode returns the HTTP status code of the response, e.g. 200.
func (fr FirewallRule) StatusCode() int {
	return fr.rawResponse.StatusCode
}

// Status returns the HTTP status message of the response, e.g. "200 OK".
func (fr FirewallRule) Status() string {
	return fr.rawResponse.Status
}

// FirewallRuleListResult - Data Lake Store firewall rule list information.
type FirewallRuleListResult struct {
	rawResponse *http.Response
	// Value - The results of the list operation.
	Value []FirewallRule `json:"value,omitempty"`
	// NextLink - The link (url) to the next page of results.
	NextLink Marker `json:"NextLink"`
}

// Response returns the raw HTTP response object.
func (frlr FirewallRuleListResult) Response() *http.Response {
	return frlr.rawResponse
}

// StatusCode returns the HTTP status code of the response, e.g. 200.
func (frlr FirewallRuleListResult) StatusCode() int {
	return frlr.rawResponse.StatusCode
}

// Status returns the HTTP status message of the response, e.g. "200 OK".
func (frlr FirewallRuleListResult) Status() string {
	return frlr.rawResponse.Status
}

// FirewallRuleProperties - The firewall rule properties.
type FirewallRuleProperties struct {
	// StartIPAddress - The start IP address for the firewall rule. This can be either ipv4 or ipv6. Start and End should be in the same protocol.
	StartIPAddress *string `json:"startIpAddress,omitempty"`
	// EndIPAddress - The end IP address for the firewall rule. This can be either ipv4 or ipv6. Start and End should be in the same protocol.
	EndIPAddress *string `json:"endIpAddress,omitempty"`
}

// KeyVaultMetaInfo - Metadata information used by account encryption.
type KeyVaultMetaInfo struct {
	// KeyVaultResourceID - The resource identifier for the user managed Key Vault being used to encrypt.
	KeyVaultResourceID string `json:"keyVaultResourceId,omitempty"`
	// EncryptionKeyName - The name of the user managed encryption key.
	EncryptionKeyName string `json:"encryptionKeyName,omitempty"`
	// EncryptionKeyVersion - The version of the user managed encryption key.
	EncryptionKeyVersion string `json:"encryptionKeyVersion,omitempty"`
}

// NameAvailabilityInformation - Data Lake Store account name availability result information.
type NameAvailabilityInformation struct {
	rawResponse *http.Response
	// NameAvailable - The Boolean value of true or false to indicate whether the Data Lake Store account name is available or not.
	NameAvailable *bool `json:"nameAvailable,omitempty"`
	// Reason - The reason why the Data Lake Store account name is not available, if nameAvailable is false.
	Reason *string `json:"reason,omitempty"`
	// Message - The message describing why the Data Lake Store account name is not available, if nameAvailable is false.
	Message *string `json:"message,omitempty"`
}

// Response returns the raw HTTP response object.
func (nai NameAvailabilityInformation) Response() *http.Response {
	return nai.rawResponse
}

// StatusCode returns the HTTP status code of the response, e.g. 200.
func (nai NameAvailabilityInformation) StatusCode() int {
	return nai.rawResponse.StatusCode
}

// Status returns the HTTP status message of the response, e.g. "200 OK".
func (nai NameAvailabilityInformation) Status() string {
	return nai.rawResponse.Status
}

// Operation - An available operation for Data Lake Store.
type Operation struct {
	// Name - The name of the operation.
	Name *string `json:"name,omitempty"`
	// Display - The display information for the operation.
	Display *OperationDisplay `json:"display,omitempty"`
	// Origin - The intended executor of the operation. Possible values include: 'User', 'System', 'Usersystem', 'None'
	Origin OperationOriginType `json:"origin,omitempty"`
}

// OperationDisplay - The display information for a particular operation.
type OperationDisplay struct {
	// Provider - The resource provider of the operation.
	Provider *string `json:"provider,omitempty"`
	// Resource - The resource type of the operation.
	Resource *string `json:"resource,omitempty"`
	// Operation - A friendly name of the operation.
	Operation *string `json:"operation,omitempty"`
	// Description - A friendly description of the operation.
	Description *string `json:"description,omitempty"`
}

// OperationListResult - The list of available operations for Data Lake Store.
type OperationListResult struct {
	rawResponse *http.Response
	// Value - The results of the list operation.
	Value []Operation `json:"value,omitempty"`
	// NextLink - The link (url) to the next page of results.
	NextLink *string `json:"nextLink,omitempty"`
}

// Response returns the raw HTTP response object.
func (olr OperationListResult) Response() *http.Response {
	return olr.rawResponse
}

// StatusCode returns the HTTP status code of the response, e.g. 200.
func (olr OperationListResult) StatusCode() int {
	return olr.rawResponse.StatusCode
}

// Status returns the HTTP status message of the response, e.g. "200 OK".
func (olr OperationListResult) Status() string {
	return olr.rawResponse.Status
}

// Resource - The resource model definition.
type Resource struct {
	// ID - The resource identifier.
	ID *string `json:"id,omitempty"`
	// Name - The resource name.
	Name *string `json:"name,omitempty"`
	// Type - The resource type.
	Type *string `json:"type,omitempty"`
	// Location - The resource location.
	Location *string `json:"location,omitempty"`
	// Tags - The resource tags.
	Tags map[string]string `json:"tags,omitempty"`
}

// SubResource - The resource model definition for a nested resource.
type SubResource struct {
	// ID - The resource identifier.
	ID *string `json:"id,omitempty"`
	// Name - The resource name.
	Name *string `json:"name,omitempty"`
	// Type - The resource type.
	Type *string `json:"type,omitempty"`
}

// TrustedIDProvider - Data Lake Store trusted identity provider information.
type TrustedIDProvider struct {
	rawResponse *http.Response
	// ID - The resource identifier.
	ID *string `json:"id,omitempty"`
	// Name - The resource name.
	Name *string `json:"name,omitempty"`
	// Type - The resource type.
	Type *string `json:"type,omitempty"`
	// Properties - The trusted identity provider properties.
	*TrustedIDProviderProperties `json:"properties,omitempty"`
}

// Response returns the raw HTTP response object.
func (tip TrustedIDProvider) Response() *http.Response {
	return tip.rawResponse
}

// StatusCode returns the HTTP status code of the response, e.g. 200.
func (tip TrustedIDProvider) StatusCode() int {
	return tip.rawResponse.StatusCode
}

// Status returns the HTTP status message of the response, e.g. "200 OK".
func (tip TrustedIDProvider) Status() string {
	return tip.rawResponse.Status
}

// TrustedIDProviderListResult - Data Lake Store trusted identity provider list information.
type TrustedIDProviderListResult struct {
	rawResponse *http.Response
	// Value - The results of the list operation.
	Value []TrustedIDProvider `json:"value,omitempty"`
	// NextLink - The link (url) to the next page of results.
	NextLink Marker `json:"NextLink"`
}

// Response returns the raw HTTP response object.
func (tiplr TrustedIDProviderListResult) Response() *http.Response {
	return tiplr.rawResponse
}

// StatusCode returns the HTTP status code of the response, e.g. 200.
func (tiplr TrustedIDProviderListResult) StatusCode() int {
	return tiplr.rawResponse.StatusCode
}

// Status returns the HTTP status message of the response, e.g. "200 OK".
func (tiplr TrustedIDProviderListResult) Status() string {
	return tiplr.rawResponse.Status
}

// TrustedIDProviderProperties - The trusted identity provider properties.
type TrustedIDProviderProperties struct {
	// IDProvider - The URL of this trusted identity provider.
	IDProvider *string `json:"idProvider,omitempty"`
}

// UpdateDataLakeStoreAccountParameters - Data Lake Store account information to update.
type UpdateDataLakeStoreAccountParameters struct {
	// Tags - Resource tags
	Tags map[string]string `json:"tags,omitempty"`
	// Properties - The Data Lake Store account properties to update.
	*UpdateDataLakeStoreAccountProperties `json:"properties,omitempty"`
}

// UpdateDataLakeStoreAccountProperties - Data Lake Store account properties information to be updated.
type UpdateDataLakeStoreAccountProperties struct {
	// DefaultGroup - The default owner group for all new folders and files created in the Data Lake Store account.
	DefaultGroup *string `json:"defaultGroup,omitempty"`
	// EncryptionConfig - Used for rotation of user managed Key Vault keys. Can only be used to rotate a user managed encryption Key Vault key.
	EncryptionConfig *UpdateEncryptionConfig `json:"encryptionConfig,omitempty"`
	// FirewallRules - The list of firewall rules associated with this Data Lake Store account.
	FirewallRules []UpdateFirewallRuleWithAccountParameters `json:"firewallRules,omitempty"`
	// FirewallState - The current state of the IP address firewall for this Data Lake Store account. Disabling the firewall does not remove existing rules, they will just be ignored until the firewall is re-enabled. Possible values include: 'Enabled', 'Disabled', 'None'
	FirewallState FirewallStateType `json:"firewallState,omitempty"`
	// FirewallAllowAzureIps - The current state of allowing or disallowing IPs originating within Azure through the firewall. If the firewall is disabled, this is not enforced. Possible values include: 'Enabled', 'Disabled', 'None'
	FirewallAllowAzureIps FirewallAllowAzureIpsStateType `json:"firewallAllowAzureIps,omitempty"`
	// TrustedIDProviders - The list of trusted identity providers associated with this Data Lake Store account.
	TrustedIDProviders []UpdateTrustedIDProviderWithAccountParameters `json:"trustedIdProviders,omitempty"`
	// TrustedIDProviderState - The current state of the trusted identity provider feature for this Data Lake Store account. Disabling trusted identity provider functionality does not remove the providers, they will just be ignored until this feature is re-enabled. Possible values include: 'Enabled', 'Disabled', 'None'
	TrustedIDProviderState TrustedIDProviderStateType `json:"trustedIdProviderState,omitempty"`
	// NewTier - The commitment tier to use for next month. Possible values include: 'Consumption', 'Commitment1TB', 'Commitment10TB', 'Commitment100TB', 'Commitment500TB', 'Commitment1PB', 'Commitment5PB', 'None'
	NewTier TierType `json:"newTier,omitempty"`
}

// UpdateEncryptionConfig - The encryption configuration used to update a user managed Key Vault key.
type UpdateEncryptionConfig struct {
	// KeyVaultMetaInfo - The updated Key Vault key to use in user managed key rotation.
	KeyVaultMetaInfo *UpdateKeyVaultMetaInfo `json:"keyVaultMetaInfo,omitempty"`
}

// UpdateFirewallRuleParameters - The parameters used to update a firewall rule.
type UpdateFirewallRuleParameters struct {
	// Properties - The firewall rule properties to use when updating a firewall rule.
	*UpdateFirewallRuleProperties `json:"properties,omitempty"`
}

// UpdateFirewallRuleProperties - The firewall rule properties to use when updating a firewall rule.
type UpdateFirewallRuleProperties struct {
	// StartIPAddress - The start IP address for the firewall rule. This can be either ipv4 or ipv6. Start and End should be in the same protocol.
	StartIPAddress *string `json:"startIpAddress,omitempty"`
	// EndIPAddress - The end IP address for the firewall rule. This can be either ipv4 or ipv6. Start and End should be in the same protocol.
	EndIPAddress *string `json:"endIpAddress,omitempty"`
}

// UpdateFirewallRuleWithAccountParameters - The parameters used to update a firewall rule while updating a Data Lake
// Store account.
type UpdateFirewallRuleWithAccountParameters struct {
	// Name - The unique name of the firewall rule to update.
	Name string `json:"name,omitempty"`
	// Properties - The firewall rule properties to use when updating a firewall rule.
	*UpdateFirewallRuleProperties `json:"properties,omitempty"`
}

// UpdateKeyVaultMetaInfo - The Key Vault update information used for user managed key rotation.
type UpdateKeyVaultMetaInfo struct {
	// EncryptionKeyVersion - The version of the user managed encryption key to update through a key rotation.
	EncryptionKeyVersion *string `json:"encryptionKeyVersion,omitempty"`
}

// UpdateTrustedIDProviderParameters - The parameters used to update a trusted identity provider.
type UpdateTrustedIDProviderParameters struct {
	// Properties - The trusted identity provider properties to use when updating a trusted identity provider.
	*UpdateTrustedIDProviderProperties `json:"properties,omitempty"`
}

// UpdateTrustedIDProviderProperties - The trusted identity provider properties to use when updating a trusted identity
// provider.
type UpdateTrustedIDProviderProperties struct {
	// IDProvider - The URL of this trusted identity provider.
	IDProvider *string `json:"idProvider,omitempty"`
}

// UpdateTrustedIDProviderWithAccountParameters - The parameters used to update a trusted identity provider while
// updating a Data Lake Store account.
type UpdateTrustedIDProviderWithAccountParameters struct {
	// Name - The unique name of the trusted identity provider to update.
	Name string `json:"name,omitempty"`
	// Properties - The trusted identity provider properties to use when updating a trusted identity provider.
	*UpdateTrustedIDProviderProperties `json:"properties,omitempty"`
}
