package datashare

// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

import (
	"context"
	"github.com/Azure/go-autorest/autorest"
	"github.com/Azure/go-autorest/autorest/azure"
	"github.com/Azure/go-autorest/tracing"
	"net/http"
)

// EmailRegistrationsClient is the creates a Microsoft.DataShare management client.
type EmailRegistrationsClient struct {
	BaseClient
}

// NewEmailRegistrationsClient creates an instance of the EmailRegistrationsClient client.
func NewEmailRegistrationsClient(subscriptionID string) EmailRegistrationsClient {
	return NewEmailRegistrationsClientWithBaseURI(DefaultBaseURI, subscriptionID)
}

// NewEmailRegistrationsClientWithBaseURI creates an instance of the EmailRegistrationsClient client using a custom
// endpoint.  Use this when interacting with an Azure cloud that uses a non-standard base URI (sovereign clouds, Azure
// stack).
func NewEmailRegistrationsClientWithBaseURI(baseURI string, subscriptionID string) EmailRegistrationsClient {
	return EmailRegistrationsClient{NewWithBaseURI(baseURI, subscriptionID)}
}

// ActivateEmail activate the email registration for the current tenant
// Parameters:
// location - location of the activation.
// emailRegistration - the payload for tenant domain activation.
func (client EmailRegistrationsClient) ActivateEmail(ctx context.Context, location string, emailRegistration EmailRegistration) (result EmailRegistration, err error) {
	if tracing.IsEnabled() {
		ctx = tracing.StartSpan(ctx, fqdn+"/EmailRegistrationsClient.ActivateEmail")
		defer func() {
			sc := -1
			if result.Response.Response != nil {
				sc = result.Response.Response.StatusCode
			}
			tracing.EndSpan(ctx, sc, err)
		}()
	}
	req, err := client.ActivateEmailPreparer(ctx, location, emailRegistration)
	if err != nil {
		err = autorest.NewErrorWithError(err, "datashare.EmailRegistrationsClient", "ActivateEmail", nil, "Failure preparing request")
		return
	}

	resp, err := client.ActivateEmailSender(req)
	if err != nil {
		result.Response = autorest.Response{Response: resp}
		err = autorest.NewErrorWithError(err, "datashare.EmailRegistrationsClient", "ActivateEmail", resp, "Failure sending request")
		return
	}

	result, err = client.ActivateEmailResponder(resp)
	if err != nil {
		err = autorest.NewErrorWithError(err, "datashare.EmailRegistrationsClient", "ActivateEmail", resp, "Failure responding to request")
		return
	}

	return
}

// ActivateEmailPreparer prepares the ActivateEmail request.
func (client EmailRegistrationsClient) ActivateEmailPreparer(ctx context.Context, location string, emailRegistration EmailRegistration) (*http.Request, error) {
	pathParameters := map[string]interface{}{
		"location": autorest.Encode("path", location),
	}

	const APIVersion = "2019-11-01"
	queryParameters := map[string]interface{}{
		"api-version": APIVersion,
	}

	emailRegistration.ActivationExpirationDate = nil
	emailRegistration.Email = nil
	emailRegistration.RegistrationStatus = ""
	emailRegistration.TenantID = nil
	preparer := autorest.CreatePreparer(
		autorest.AsContentType("application/json; charset=utf-8"),
		autorest.AsPost(),
		autorest.WithBaseURL(client.BaseURI),
		autorest.WithPathParameters("/providers/Microsoft.DataShare/locations/{location}/activateEmail", pathParameters),
		autorest.WithJSON(emailRegistration),
		autorest.WithQueryParameters(queryParameters))
	return preparer.Prepare((&http.Request{}).WithContext(ctx))
}

// ActivateEmailSender sends the ActivateEmail request. The method will close the
// http.Response Body if it receives an error.
func (client EmailRegistrationsClient) ActivateEmailSender(req *http.Request) (*http.Response, error) {
	return client.Send(req, autorest.DoRetryForStatusCodes(client.RetryAttempts, client.RetryDuration, autorest.StatusCodesForRetry...))
}

// ActivateEmailResponder handles the response to the ActivateEmail request. The method always
// closes the http.Response Body.
func (client EmailRegistrationsClient) ActivateEmailResponder(resp *http.Response) (result EmailRegistration, err error) {
	err = autorest.Respond(
		resp,
		azure.WithErrorUnlessStatusCode(http.StatusOK),
		autorest.ByUnmarshallingJSON(&result),
		autorest.ByClosing())
	result.Response = autorest.Response{Response: resp}
	return
}

// RegisterEmail register an email for the current tenant
// Parameters:
// location - location of the registration
func (client EmailRegistrationsClient) RegisterEmail(ctx context.Context, location string) (result EmailRegistration, err error) {
	if tracing.IsEnabled() {
		ctx = tracing.StartSpan(ctx, fqdn+"/EmailRegistrationsClient.RegisterEmail")
		defer func() {
			sc := -1
			if result.Response.Response != nil {
				sc = result.Response.Response.StatusCode
			}
			tracing.EndSpan(ctx, sc, err)
		}()
	}
	req, err := client.RegisterEmailPreparer(ctx, location)
	if err != nil {
		err = autorest.NewErrorWithError(err, "datashare.EmailRegistrationsClient", "RegisterEmail", nil, "Failure preparing request")
		return
	}

	resp, err := client.RegisterEmailSender(req)
	if err != nil {
		result.Response = autorest.Response{Response: resp}
		err = autorest.NewErrorWithError(err, "datashare.EmailRegistrationsClient", "RegisterEmail", resp, "Failure sending request")
		return
	}

	result, err = client.RegisterEmailResponder(resp)
	if err != nil {
		err = autorest.NewErrorWithError(err, "datashare.EmailRegistrationsClient", "RegisterEmail", resp, "Failure responding to request")
		return
	}

	return
}

// RegisterEmailPreparer prepares the RegisterEmail request.
func (client EmailRegistrationsClient) RegisterEmailPreparer(ctx context.Context, location string) (*http.Request, error) {
	pathParameters := map[string]interface{}{
		"location": autorest.Encode("path", location),
	}

	const APIVersion = "2019-11-01"
	queryParameters := map[string]interface{}{
		"api-version": APIVersion,
	}

	preparer := autorest.CreatePreparer(
		autorest.AsPost(),
		autorest.WithBaseURL(client.BaseURI),
		autorest.WithPathParameters("/providers/Microsoft.DataShare/locations/{location}/registerEmail", pathParameters),
		autorest.WithQueryParameters(queryParameters))
	return preparer.Prepare((&http.Request{}).WithContext(ctx))
}

// RegisterEmailSender sends the RegisterEmail request. The method will close the
// http.Response Body if it receives an error.
func (client EmailRegistrationsClient) RegisterEmailSender(req *http.Request) (*http.Response, error) {
	return client.Send(req, autorest.DoRetryForStatusCodes(client.RetryAttempts, client.RetryDuration, autorest.StatusCodesForRetry...))
}

// RegisterEmailResponder handles the response to the RegisterEmail request. The method always
// closes the http.Response Body.
func (client EmailRegistrationsClient) RegisterEmailResponder(resp *http.Response) (result EmailRegistration, err error) {
	err = autorest.Respond(
		resp,
		azure.WithErrorUnlessStatusCode(http.StatusOK),
		autorest.ByUnmarshallingJSON(&result),
		autorest.ByClosing())
	result.Response = autorest.Response{Response: resp}
	return
}
