package eventgrid

// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

import (
	"encoding/json"
	"github.com/Azure/go-autorest/autorest/date"
)

// The package's fully qualified name.
const fqdn = "github.com/Azure/azure-sdk-for-go/services/eventgrid/2018-01-01/eventgrid"

// AcsChatEventBaseProperties schema of common properties of all chat events
type AcsChatEventBaseProperties struct {
	// RecipientCommunicationIdentifier - The communication identifier of the target user
	RecipientCommunicationIdentifier *CommunicationIdentifierModel `json:"recipientCommunicationIdentifier,omitempty"`
	// TransactionID - The transaction id will be used as co-relation vector
	TransactionID *string `json:"transactionId,omitempty"`
	// ThreadID - The chat thread id
	ThreadID *string `json:"threadId,omitempty"`
}

// AcsChatEventInThreadBaseProperties schema of common properties of all thread-level chat events
type AcsChatEventInThreadBaseProperties struct {
	// TransactionID - The transaction id will be used as co-relation vector
	TransactionID *string `json:"transactionId,omitempty"`
	// ThreadID - The chat thread id
	ThreadID *string `json:"threadId,omitempty"`
}

// AcsChatMessageDeletedEventData schema of the Data property of an EventGridEvent for a
// Microsoft.Communication.ChatMessageDeleted event.
type AcsChatMessageDeletedEventData struct {
	// DeleteTime - The time at which the message was deleted
	DeleteTime *date.Time `json:"deleteTime,omitempty"`
	// MessageID - The chat message id
	MessageID *string `json:"messageId,omitempty"`
	// SenderCommunicationIdentifier - The communication identifier of the sender
	SenderCommunicationIdentifier *CommunicationIdentifierModel `json:"senderCommunicationIdentifier,omitempty"`
	// SenderDisplayName - The display name of the sender
	SenderDisplayName *string `json:"senderDisplayName,omitempty"`
	// ComposeTime - The original compose time of the message
	ComposeTime *date.Time `json:"composeTime,omitempty"`
	// Type - The type of the message
	Type *string `json:"type,omitempty"`
	// Version - The version of the message
	Version *int64 `json:"version,omitempty"`
	// RecipientCommunicationIdentifier - The communication identifier of the target user
	RecipientCommunicationIdentifier *CommunicationIdentifierModel `json:"recipientCommunicationIdentifier,omitempty"`
	// TransactionID - The transaction id will be used as co-relation vector
	TransactionID *string `json:"transactionId,omitempty"`
	// ThreadID - The chat thread id
	ThreadID *string `json:"threadId,omitempty"`
}

// AcsChatMessageDeletedInThreadEventData schema of the Data property of an EventGridEvent for a
// Microsoft.Communication.ChatMessageDeletedInThread event.
type AcsChatMessageDeletedInThreadEventData struct {
	// DeleteTime - The time at which the message was deleted
	DeleteTime *date.Time `json:"deleteTime,omitempty"`
	// MessageID - The chat message id
	MessageID *string `json:"messageId,omitempty"`
	// SenderCommunicationIdentifier - The communication identifier of the sender
	SenderCommunicationIdentifier *CommunicationIdentifierModel `json:"senderCommunicationIdentifier,omitempty"`
	// SenderDisplayName - The display name of the sender
	SenderDisplayName *string `json:"senderDisplayName,omitempty"`
	// ComposeTime - The original compose time of the message
	ComposeTime *date.Time `json:"composeTime,omitempty"`
	// Type - The type of the message
	Type *string `json:"type,omitempty"`
	// Version - The version of the message
	Version *int64 `json:"version,omitempty"`
	// TransactionID - The transaction id will be used as co-relation vector
	TransactionID *string `json:"transactionId,omitempty"`
	// ThreadID - The chat thread id
	ThreadID *string `json:"threadId,omitempty"`
}

// AcsChatMessageEditedEventData schema of the Data property of an EventGridEvent for a
// Microsoft.Communication.ChatMessageEdited event.
type AcsChatMessageEditedEventData struct {
	// MessageBody - The body of the chat message
	MessageBody *string `json:"messageBody,omitempty"`
	// Metadata - The chat message metadata
	Metadata map[string]*string `json:"metadata"`
	// EditTime - The time at which the message was edited
	EditTime *date.Time `json:"editTime,omitempty"`
	// MessageID - The chat message id
	MessageID *string `json:"messageId,omitempty"`
	// SenderCommunicationIdentifier - The communication identifier of the sender
	SenderCommunicationIdentifier *CommunicationIdentifierModel `json:"senderCommunicationIdentifier,omitempty"`
	// SenderDisplayName - The display name of the sender
	SenderDisplayName *string `json:"senderDisplayName,omitempty"`
	// ComposeTime - The original compose time of the message
	ComposeTime *date.Time `json:"composeTime,omitempty"`
	// Type - The type of the message
	Type *string `json:"type,omitempty"`
	// Version - The version of the message
	Version *int64 `json:"version,omitempty"`
	// RecipientCommunicationIdentifier - The communication identifier of the target user
	RecipientCommunicationIdentifier *CommunicationIdentifierModel `json:"recipientCommunicationIdentifier,omitempty"`
	// TransactionID - The transaction id will be used as co-relation vector
	TransactionID *string `json:"transactionId,omitempty"`
	// ThreadID - The chat thread id
	ThreadID *string `json:"threadId,omitempty"`
}

// MarshalJSON is the custom marshaler for AcsChatMessageEditedEventData.
func (acmeed AcsChatMessageEditedEventData) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	if acmeed.MessageBody != nil {
		objectMap["messageBody"] = acmeed.MessageBody
	}
	if acmeed.Metadata != nil {
		objectMap["metadata"] = acmeed.Metadata
	}
	if acmeed.EditTime != nil {
		objectMap["editTime"] = acmeed.EditTime
	}
	if acmeed.MessageID != nil {
		objectMap["messageId"] = acmeed.MessageID
	}
	if acmeed.SenderCommunicationIdentifier != nil {
		objectMap["senderCommunicationIdentifier"] = acmeed.SenderCommunicationIdentifier
	}
	if acmeed.SenderDisplayName != nil {
		objectMap["senderDisplayName"] = acmeed.SenderDisplayName
	}
	if acmeed.ComposeTime != nil {
		objectMap["composeTime"] = acmeed.ComposeTime
	}
	if acmeed.Type != nil {
		objectMap["type"] = acmeed.Type
	}
	if acmeed.Version != nil {
		objectMap["version"] = acmeed.Version
	}
	if acmeed.RecipientCommunicationIdentifier != nil {
		objectMap["recipientCommunicationIdentifier"] = acmeed.RecipientCommunicationIdentifier
	}
	if acmeed.TransactionID != nil {
		objectMap["transactionId"] = acmeed.TransactionID
	}
	if acmeed.ThreadID != nil {
		objectMap["threadId"] = acmeed.ThreadID
	}
	return json.Marshal(objectMap)
}

// AcsChatMessageEditedInThreadEventData schema of the Data property of an EventGridEvent for a
// Microsoft.Communication.ChatMessageEditedInThread event.
type AcsChatMessageEditedInThreadEventData struct {
	// MessageBody - The body of the chat message
	MessageBody *string `json:"messageBody,omitempty"`
	// Metadata - The chat message metadata
	Metadata map[string]*string `json:"metadata"`
	// EditTime - The time at which the message was edited
	EditTime *date.Time `json:"editTime,omitempty"`
	// MessageID - The chat message id
	MessageID *string `json:"messageId,omitempty"`
	// SenderCommunicationIdentifier - The communication identifier of the sender
	SenderCommunicationIdentifier *CommunicationIdentifierModel `json:"senderCommunicationIdentifier,omitempty"`
	// SenderDisplayName - The display name of the sender
	SenderDisplayName *string `json:"senderDisplayName,omitempty"`
	// ComposeTime - The original compose time of the message
	ComposeTime *date.Time `json:"composeTime,omitempty"`
	// Type - The type of the message
	Type *string `json:"type,omitempty"`
	// Version - The version of the message
	Version *int64 `json:"version,omitempty"`
	// TransactionID - The transaction id will be used as co-relation vector
	TransactionID *string `json:"transactionId,omitempty"`
	// ThreadID - The chat thread id
	ThreadID *string `json:"threadId,omitempty"`
}

// MarshalJSON is the custom marshaler for AcsChatMessageEditedInThreadEventData.
func (acmeited AcsChatMessageEditedInThreadEventData) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	if acmeited.MessageBody != nil {
		objectMap["messageBody"] = acmeited.MessageBody
	}
	if acmeited.Metadata != nil {
		objectMap["metadata"] = acmeited.Metadata
	}
	if acmeited.EditTime != nil {
		objectMap["editTime"] = acmeited.EditTime
	}
	if acmeited.MessageID != nil {
		objectMap["messageId"] = acmeited.MessageID
	}
	if acmeited.SenderCommunicationIdentifier != nil {
		objectMap["senderCommunicationIdentifier"] = acmeited.SenderCommunicationIdentifier
	}
	if acmeited.SenderDisplayName != nil {
		objectMap["senderDisplayName"] = acmeited.SenderDisplayName
	}
	if acmeited.ComposeTime != nil {
		objectMap["composeTime"] = acmeited.ComposeTime
	}
	if acmeited.Type != nil {
		objectMap["type"] = acmeited.Type
	}
	if acmeited.Version != nil {
		objectMap["version"] = acmeited.Version
	}
	if acmeited.TransactionID != nil {
		objectMap["transactionId"] = acmeited.TransactionID
	}
	if acmeited.ThreadID != nil {
		objectMap["threadId"] = acmeited.ThreadID
	}
	return json.Marshal(objectMap)
}

// AcsChatMessageEventBaseProperties schema of common properties of all chat message events
type AcsChatMessageEventBaseProperties struct {
	// MessageID - The chat message id
	MessageID *string `json:"messageId,omitempty"`
	// SenderCommunicationIdentifier - The communication identifier of the sender
	SenderCommunicationIdentifier *CommunicationIdentifierModel `json:"senderCommunicationIdentifier,omitempty"`
	// SenderDisplayName - The display name of the sender
	SenderDisplayName *string `json:"senderDisplayName,omitempty"`
	// ComposeTime - The original compose time of the message
	ComposeTime *date.Time `json:"composeTime,omitempty"`
	// Type - The type of the message
	Type *string `json:"type,omitempty"`
	// Version - The version of the message
	Version *int64 `json:"version,omitempty"`
	// RecipientCommunicationIdentifier - The communication identifier of the target user
	RecipientCommunicationIdentifier *CommunicationIdentifierModel `json:"recipientCommunicationIdentifier,omitempty"`
	// TransactionID - The transaction id will be used as co-relation vector
	TransactionID *string `json:"transactionId,omitempty"`
	// ThreadID - The chat thread id
	ThreadID *string `json:"threadId,omitempty"`
}

// AcsChatMessageEventInThreadBaseProperties schema of common properties of all thread-level chat message
// events
type AcsChatMessageEventInThreadBaseProperties struct {
	// MessageID - The chat message id
	MessageID *string `json:"messageId,omitempty"`
	// SenderCommunicationIdentifier - The communication identifier of the sender
	SenderCommunicationIdentifier *CommunicationIdentifierModel `json:"senderCommunicationIdentifier,omitempty"`
	// SenderDisplayName - The display name of the sender
	SenderDisplayName *string `json:"senderDisplayName,omitempty"`
	// ComposeTime - The original compose time of the message
	ComposeTime *date.Time `json:"composeTime,omitempty"`
	// Type - The type of the message
	Type *string `json:"type,omitempty"`
	// Version - The version of the message
	Version *int64 `json:"version,omitempty"`
	// TransactionID - The transaction id will be used as co-relation vector
	TransactionID *string `json:"transactionId,omitempty"`
	// ThreadID - The chat thread id
	ThreadID *string `json:"threadId,omitempty"`
}

// AcsChatMessageReceivedEventData schema of the Data property of an EventGridEvent for a
// Microsoft.Communication.ChatMessageReceived event.
type AcsChatMessageReceivedEventData struct {
	// MessageBody - The body of the chat message
	MessageBody *string `json:"messageBody,omitempty"`
	// Metadata - The chat message metadata
	Metadata map[string]*string `json:"metadata"`
	// MessageID - The chat message id
	MessageID *string `json:"messageId,omitempty"`
	// SenderCommunicationIdentifier - The communication identifier of the sender
	SenderCommunicationIdentifier *CommunicationIdentifierModel `json:"senderCommunicationIdentifier,omitempty"`
	// SenderDisplayName - The display name of the sender
	SenderDisplayName *string `json:"senderDisplayName,omitempty"`
	// ComposeTime - The original compose time of the message
	ComposeTime *date.Time `json:"composeTime,omitempty"`
	// Type - The type of the message
	Type *string `json:"type,omitempty"`
	// Version - The version of the message
	Version *int64 `json:"version,omitempty"`
	// RecipientCommunicationIdentifier - The communication identifier of the target user
	RecipientCommunicationIdentifier *CommunicationIdentifierModel `json:"recipientCommunicationIdentifier,omitempty"`
	// TransactionID - The transaction id will be used as co-relation vector
	TransactionID *string `json:"transactionId,omitempty"`
	// ThreadID - The chat thread id
	ThreadID *string `json:"threadId,omitempty"`
}

// MarshalJSON is the custom marshaler for AcsChatMessageReceivedEventData.
func (acmred AcsChatMessageReceivedEventData) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	if acmred.MessageBody != nil {
		objectMap["messageBody"] = acmred.MessageBody
	}
	if acmred.Metadata != nil {
		objectMap["metadata"] = acmred.Metadata
	}
	if acmred.MessageID != nil {
		objectMap["messageId"] = acmred.MessageID
	}
	if acmred.SenderCommunicationIdentifier != nil {
		objectMap["senderCommunicationIdentifier"] = acmred.SenderCommunicationIdentifier
	}
	if acmred.SenderDisplayName != nil {
		objectMap["senderDisplayName"] = acmred.SenderDisplayName
	}
	if acmred.ComposeTime != nil {
		objectMap["composeTime"] = acmred.ComposeTime
	}
	if acmred.Type != nil {
		objectMap["type"] = acmred.Type
	}
	if acmred.Version != nil {
		objectMap["version"] = acmred.Version
	}
	if acmred.RecipientCommunicationIdentifier != nil {
		objectMap["recipientCommunicationIdentifier"] = acmred.RecipientCommunicationIdentifier
	}
	if acmred.TransactionID != nil {
		objectMap["transactionId"] = acmred.TransactionID
	}
	if acmred.ThreadID != nil {
		objectMap["threadId"] = acmred.ThreadID
	}
	return json.Marshal(objectMap)
}

// AcsChatMessageReceivedInThreadEventData schema of the Data property of an EventGridEvent for a
// Microsoft.Communication.ChatMessageReceivedInThread event.
type AcsChatMessageReceivedInThreadEventData struct {
	// MessageBody - The body of the chat message
	MessageBody *string `json:"messageBody,omitempty"`
	// Metadata - The chat message metadata
	Metadata map[string]*string `json:"metadata"`
	// MessageID - The chat message id
	MessageID *string `json:"messageId,omitempty"`
	// SenderCommunicationIdentifier - The communication identifier of the sender
	SenderCommunicationIdentifier *CommunicationIdentifierModel `json:"senderCommunicationIdentifier,omitempty"`
	// SenderDisplayName - The display name of the sender
	SenderDisplayName *string `json:"senderDisplayName,omitempty"`
	// ComposeTime - The original compose time of the message
	ComposeTime *date.Time `json:"composeTime,omitempty"`
	// Type - The type of the message
	Type *string `json:"type,omitempty"`
	// Version - The version of the message
	Version *int64 `json:"version,omitempty"`
	// TransactionID - The transaction id will be used as co-relation vector
	TransactionID *string `json:"transactionId,omitempty"`
	// ThreadID - The chat thread id
	ThreadID *string `json:"threadId,omitempty"`
}

// MarshalJSON is the custom marshaler for AcsChatMessageReceivedInThreadEventData.
func (acmrited AcsChatMessageReceivedInThreadEventData) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	if acmrited.MessageBody != nil {
		objectMap["messageBody"] = acmrited.MessageBody
	}
	if acmrited.Metadata != nil {
		objectMap["metadata"] = acmrited.Metadata
	}
	if acmrited.MessageID != nil {
		objectMap["messageId"] = acmrited.MessageID
	}
	if acmrited.SenderCommunicationIdentifier != nil {
		objectMap["senderCommunicationIdentifier"] = acmrited.SenderCommunicationIdentifier
	}
	if acmrited.SenderDisplayName != nil {
		objectMap["senderDisplayName"] = acmrited.SenderDisplayName
	}
	if acmrited.ComposeTime != nil {
		objectMap["composeTime"] = acmrited.ComposeTime
	}
	if acmrited.Type != nil {
		objectMap["type"] = acmrited.Type
	}
	if acmrited.Version != nil {
		objectMap["version"] = acmrited.Version
	}
	if acmrited.TransactionID != nil {
		objectMap["transactionId"] = acmrited.TransactionID
	}
	if acmrited.ThreadID != nil {
		objectMap["threadId"] = acmrited.ThreadID
	}
	return json.Marshal(objectMap)
}

// AcsChatParticipantAddedToThreadEventData schema of the Data property of an EventGridEvent for a
// Microsoft.Communication.ChatThreadParticipantAdded event.
type AcsChatParticipantAddedToThreadEventData struct {
	// Time - The time at which the user was added to the thread
	Time *date.Time `json:"time,omitempty"`
	// AddedByCommunicationIdentifier - The communication identifier of the user who added the user
	AddedByCommunicationIdentifier *CommunicationIdentifierModel `json:"addedByCommunicationIdentifier,omitempty"`
	// ParticipantAdded - The details of the user who was added
	ParticipantAdded *AcsChatThreadParticipantProperties `json:"participantAdded,omitempty"`
	// Version - The version of the thread
	Version *int64 `json:"version,omitempty"`
	// TransactionID - The transaction id will be used as co-relation vector
	TransactionID *string `json:"transactionId,omitempty"`
	// ThreadID - The chat thread id
	ThreadID *string `json:"threadId,omitempty"`
}

// AcsChatParticipantAddedToThreadWithUserEventData schema of the Data property of an EventGridEvent for a
// Microsoft.Communication.ChatParticipantAddedToThreadWithUser event.
type AcsChatParticipantAddedToThreadWithUserEventData struct {
	// Time - The time at which the user was added to the thread
	Time *date.Time `json:"time,omitempty"`
	// AddedByCommunicationIdentifier - The communication identifier of the user who added the user
	AddedByCommunicationIdentifier *CommunicationIdentifierModel `json:"addedByCommunicationIdentifier,omitempty"`
	// ParticipantAdded - The details of the user who was added
	ParticipantAdded *AcsChatThreadParticipantProperties `json:"participantAdded,omitempty"`
	// CreateTime - The original creation time of the thread
	CreateTime *date.Time `json:"createTime,omitempty"`
	// Version - The version of the thread
	Version *int64 `json:"version,omitempty"`
	// RecipientCommunicationIdentifier - The communication identifier of the target user
	RecipientCommunicationIdentifier *CommunicationIdentifierModel `json:"recipientCommunicationIdentifier,omitempty"`
	// TransactionID - The transaction id will be used as co-relation vector
	TransactionID *string `json:"transactionId,omitempty"`
	// ThreadID - The chat thread id
	ThreadID *string `json:"threadId,omitempty"`
}

// AcsChatParticipantRemovedFromThreadEventData schema of the Data property of an EventGridEvent for a
// Microsoft.Communication.ChatThreadParticipantRemoved event.
type AcsChatParticipantRemovedFromThreadEventData struct {
	// Time - The time at which the user was removed to the thread
	Time *date.Time `json:"time,omitempty"`
	// RemovedByCommunicationIdentifier - The communication identifier of the user who removed the user
	RemovedByCommunicationIdentifier *CommunicationIdentifierModel `json:"removedByCommunicationIdentifier,omitempty"`
	// ParticipantRemoved - The details of the user who was removed
	ParticipantRemoved *AcsChatThreadParticipantProperties `json:"participantRemoved,omitempty"`
	// Version - The version of the thread
	Version *int64 `json:"version,omitempty"`
	// TransactionID - The transaction id will be used as co-relation vector
	TransactionID *string `json:"transactionId,omitempty"`
	// ThreadID - The chat thread id
	ThreadID *string `json:"threadId,omitempty"`
}

// AcsChatParticipantRemovedFromThreadWithUserEventData schema of the Data property of an EventGridEvent
// for a Microsoft.Communication.ChatParticipantRemovedFromThreadWithUser event.
type AcsChatParticipantRemovedFromThreadWithUserEventData struct {
	// Time - The time at which the user was removed to the thread
	Time *date.Time `json:"time,omitempty"`
	// RemovedByCommunicationIdentifier - The communication identifier of the user who removed the user
	RemovedByCommunicationIdentifier *CommunicationIdentifierModel `json:"removedByCommunicationIdentifier,omitempty"`
	// ParticipantRemoved - The details of the user who was removed
	ParticipantRemoved *AcsChatThreadParticipantProperties `json:"participantRemoved,omitempty"`
	// CreateTime - The original creation time of the thread
	CreateTime *date.Time `json:"createTime,omitempty"`
	// Version - The version of the thread
	Version *int64 `json:"version,omitempty"`
	// RecipientCommunicationIdentifier - The communication identifier of the target user
	RecipientCommunicationIdentifier *CommunicationIdentifierModel `json:"recipientCommunicationIdentifier,omitempty"`
	// TransactionID - The transaction id will be used as co-relation vector
	TransactionID *string `json:"transactionId,omitempty"`
	// ThreadID - The chat thread id
	ThreadID *string `json:"threadId,omitempty"`
}

// AcsChatThreadCreatedEventData schema of the Data property of an EventGridEvent for a
// Microsoft.Communication.ChatThreadCreated event.
type AcsChatThreadCreatedEventData struct {
	// CreatedByCommunicationIdentifier - The communication identifier of the user who created the thread
	CreatedByCommunicationIdentifier *CommunicationIdentifierModel `json:"createdByCommunicationIdentifier,omitempty"`
	// Properties - The thread properties
	Properties map[string]interface{} `json:"properties"`
	// Participants - The list of properties of participants who are part of the thread
	Participants *[]AcsChatThreadParticipantProperties `json:"participants,omitempty"`
	// CreateTime - The original creation time of the thread
	CreateTime *date.Time `json:"createTime,omitempty"`
	// Version - The version of the thread
	Version *int64 `json:"version,omitempty"`
	// TransactionID - The transaction id will be used as co-relation vector
	TransactionID *string `json:"transactionId,omitempty"`
	// ThreadID - The chat thread id
	ThreadID *string `json:"threadId,omitempty"`
}

// MarshalJSON is the custom marshaler for AcsChatThreadCreatedEventData.
func (actced AcsChatThreadCreatedEventData) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	if actced.CreatedByCommunicationIdentifier != nil {
		objectMap["createdByCommunicationIdentifier"] = actced.CreatedByCommunicationIdentifier
	}
	if actced.Properties != nil {
		objectMap["properties"] = actced.Properties
	}
	if actced.Participants != nil {
		objectMap["participants"] = actced.Participants
	}
	if actced.CreateTime != nil {
		objectMap["createTime"] = actced.CreateTime
	}
	if actced.Version != nil {
		objectMap["version"] = actced.Version
	}
	if actced.TransactionID != nil {
		objectMap["transactionId"] = actced.TransactionID
	}
	if actced.ThreadID != nil {
		objectMap["threadId"] = actced.ThreadID
	}
	return json.Marshal(objectMap)
}

// AcsChatThreadCreatedWithUserEventData schema of the Data property of an EventGridEvent for a
// Microsoft.Communication.ChatThreadCreatedWithUser event.
type AcsChatThreadCreatedWithUserEventData struct {
	// CreatedByCommunicationIdentifier - The communication identifier of the user who created the thread
	CreatedByCommunicationIdentifier *CommunicationIdentifierModel `json:"createdByCommunicationIdentifier,omitempty"`
	// Properties - The thread properties
	Properties map[string]interface{} `json:"properties"`
	// Participants - The list of properties of participants who are part of the thread
	Participants *[]AcsChatThreadParticipantProperties `json:"participants,omitempty"`
	// CreateTime - The original creation time of the thread
	CreateTime *date.Time `json:"createTime,omitempty"`
	// Version - The version of the thread
	Version *int64 `json:"version,omitempty"`
	// RecipientCommunicationIdentifier - The communication identifier of the target user
	RecipientCommunicationIdentifier *CommunicationIdentifierModel `json:"recipientCommunicationIdentifier,omitempty"`
	// TransactionID - The transaction id will be used as co-relation vector
	TransactionID *string `json:"transactionId,omitempty"`
	// ThreadID - The chat thread id
	ThreadID *string `json:"threadId,omitempty"`
}

// MarshalJSON is the custom marshaler for AcsChatThreadCreatedWithUserEventData.
func (actcwued AcsChatThreadCreatedWithUserEventData) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	if actcwued.CreatedByCommunicationIdentifier != nil {
		objectMap["createdByCommunicationIdentifier"] = actcwued.CreatedByCommunicationIdentifier
	}
	if actcwued.Properties != nil {
		objectMap["properties"] = actcwued.Properties
	}
	if actcwued.Participants != nil {
		objectMap["participants"] = actcwued.Participants
	}
	if actcwued.CreateTime != nil {
		objectMap["createTime"] = actcwued.CreateTime
	}
	if actcwued.Version != nil {
		objectMap["version"] = actcwued.Version
	}
	if actcwued.RecipientCommunicationIdentifier != nil {
		objectMap["recipientCommunicationIdentifier"] = actcwued.RecipientCommunicationIdentifier
	}
	if actcwued.TransactionID != nil {
		objectMap["transactionId"] = actcwued.TransactionID
	}
	if actcwued.ThreadID != nil {
		objectMap["threadId"] = actcwued.ThreadID
	}
	return json.Marshal(objectMap)
}

// AcsChatThreadDeletedEventData schema of the Data property of an EventGridEvent for a
// Microsoft.Communication.ChatThreadDeleted event.
type AcsChatThreadDeletedEventData struct {
	// DeletedByCommunicationIdentifier - The communication identifier of the user who deleted the thread
	DeletedByCommunicationIdentifier *CommunicationIdentifierModel `json:"deletedByCommunicationIdentifier,omitempty"`
	// DeleteTime - The deletion time of the thread
	DeleteTime *date.Time `json:"deleteTime,omitempty"`
	// CreateTime - The original creation time of the thread
	CreateTime *date.Time `json:"createTime,omitempty"`
	// Version - The version of the thread
	Version *int64 `json:"version,omitempty"`
	// TransactionID - The transaction id will be used as co-relation vector
	TransactionID *string `json:"transactionId,omitempty"`
	// ThreadID - The chat thread id
	ThreadID *string `json:"threadId,omitempty"`
}

// AcsChatThreadEventBaseProperties schema of common properties of all chat thread events
type AcsChatThreadEventBaseProperties struct {
	// CreateTime - The original creation time of the thread
	CreateTime *date.Time `json:"createTime,omitempty"`
	// Version - The version of the thread
	Version *int64 `json:"version,omitempty"`
	// RecipientCommunicationIdentifier - The communication identifier of the target user
	RecipientCommunicationIdentifier *CommunicationIdentifierModel `json:"recipientCommunicationIdentifier,omitempty"`
	// TransactionID - The transaction id will be used as co-relation vector
	TransactionID *string `json:"transactionId,omitempty"`
	// ThreadID - The chat thread id
	ThreadID *string `json:"threadId,omitempty"`
}

// AcsChatThreadEventInThreadBaseProperties schema of common properties of all chat thread events
type AcsChatThreadEventInThreadBaseProperties struct {
	// CreateTime - The original creation time of the thread
	CreateTime *date.Time `json:"createTime,omitempty"`
	// Version - The version of the thread
	Version *int64 `json:"version,omitempty"`
	// TransactionID - The transaction id will be used as co-relation vector
	TransactionID *string `json:"transactionId,omitempty"`
	// ThreadID - The chat thread id
	ThreadID *string `json:"threadId,omitempty"`
}

// AcsChatThreadParticipantProperties schema of the chat thread participant
type AcsChatThreadParticipantProperties struct {
	// DisplayName - The name of the user
	DisplayName *string `json:"displayName,omitempty"`
	// ParticipantCommunicationIdentifier - The communication identifier of the user
	ParticipantCommunicationIdentifier *CommunicationIdentifierModel `json:"participantCommunicationIdentifier,omitempty"`
}

// AcsChatThreadPropertiesUpdatedEventData schema of the Data property of an EventGridEvent for a
// Microsoft.Communication.ChatThreadPropertiesUpdated event.
type AcsChatThreadPropertiesUpdatedEventData struct {
	// EditedByCommunicationIdentifier - The communication identifier of the user who updated the thread properties
	EditedByCommunicationIdentifier *CommunicationIdentifierModel `json:"editedByCommunicationIdentifier,omitempty"`
	// EditTime - The time at which the properties of the thread were updated
	EditTime *date.Time `json:"editTime,omitempty"`
	// Properties - The updated thread properties
	Properties map[string]interface{} `json:"properties"`
	// CreateTime - The original creation time of the thread
	CreateTime *date.Time `json:"createTime,omitempty"`
	// Version - The version of the thread
	Version *int64 `json:"version,omitempty"`
	// TransactionID - The transaction id will be used as co-relation vector
	TransactionID *string `json:"transactionId,omitempty"`
	// ThreadID - The chat thread id
	ThreadID *string `json:"threadId,omitempty"`
}

// MarshalJSON is the custom marshaler for AcsChatThreadPropertiesUpdatedEventData.
func (actpued AcsChatThreadPropertiesUpdatedEventData) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	if actpued.EditedByCommunicationIdentifier != nil {
		objectMap["editedByCommunicationIdentifier"] = actpued.EditedByCommunicationIdentifier
	}
	if actpued.EditTime != nil {
		objectMap["editTime"] = actpued.EditTime
	}
	if actpued.Properties != nil {
		objectMap["properties"] = actpued.Properties
	}
	if actpued.CreateTime != nil {
		objectMap["createTime"] = actpued.CreateTime
	}
	if actpued.Version != nil {
		objectMap["version"] = actpued.Version
	}
	if actpued.TransactionID != nil {
		objectMap["transactionId"] = actpued.TransactionID
	}
	if actpued.ThreadID != nil {
		objectMap["threadId"] = actpued.ThreadID
	}
	return json.Marshal(objectMap)
}

// AcsChatThreadPropertiesUpdatedPerUserEventData schema of the Data property of an EventGridEvent for a
// Microsoft.Communication.ChatThreadPropertiesUpdatedPerUser event.
type AcsChatThreadPropertiesUpdatedPerUserEventData struct {
	// EditedByCommunicationIdentifier - The communication identifier of the user who updated the thread properties
	EditedByCommunicationIdentifier *CommunicationIdentifierModel `json:"editedByCommunicationIdentifier,omitempty"`
	// EditTime - The time at which the properties of the thread were updated
	EditTime *date.Time `json:"editTime,omitempty"`
	// Properties - The updated thread properties
	Properties map[string]interface{} `json:"properties"`
	// CreateTime - The original creation time of the thread
	CreateTime *date.Time `json:"createTime,omitempty"`
	// Version - The version of the thread
	Version *int64 `json:"version,omitempty"`
	// RecipientCommunicationIdentifier - The communication identifier of the target user
	RecipientCommunicationIdentifier *CommunicationIdentifierModel `json:"recipientCommunicationIdentifier,omitempty"`
	// TransactionID - The transaction id will be used as co-relation vector
	TransactionID *string `json:"transactionId,omitempty"`
	// ThreadID - The chat thread id
	ThreadID *string `json:"threadId,omitempty"`
}

// MarshalJSON is the custom marshaler for AcsChatThreadPropertiesUpdatedPerUserEventData.
func (actpupued AcsChatThreadPropertiesUpdatedPerUserEventData) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	if actpupued.EditedByCommunicationIdentifier != nil {
		objectMap["editedByCommunicationIdentifier"] = actpupued.EditedByCommunicationIdentifier
	}
	if actpupued.EditTime != nil {
		objectMap["editTime"] = actpupued.EditTime
	}
	if actpupued.Properties != nil {
		objectMap["properties"] = actpupued.Properties
	}
	if actpupued.CreateTime != nil {
		objectMap["createTime"] = actpupued.CreateTime
	}
	if actpupued.Version != nil {
		objectMap["version"] = actpupued.Version
	}
	if actpupued.RecipientCommunicationIdentifier != nil {
		objectMap["recipientCommunicationIdentifier"] = actpupued.RecipientCommunicationIdentifier
	}
	if actpupued.TransactionID != nil {
		objectMap["transactionId"] = actpupued.TransactionID
	}
	if actpupued.ThreadID != nil {
		objectMap["threadId"] = actpupued.ThreadID
	}
	return json.Marshal(objectMap)
}

// AcsChatThreadWithUserDeletedEventData schema of the Data property of an EventGridEvent for a
// Microsoft.Communication.ChatThreadWithUserDeleted event.
type AcsChatThreadWithUserDeletedEventData struct {
	// DeletedByCommunicationIdentifier - The communication identifier of the user who deleted the thread
	DeletedByCommunicationIdentifier *CommunicationIdentifierModel `json:"deletedByCommunicationIdentifier,omitempty"`
	// DeleteTime - The deletion time of the thread
	DeleteTime *date.Time `json:"deleteTime,omitempty"`
	// CreateTime - The original creation time of the thread
	CreateTime *date.Time `json:"createTime,omitempty"`
	// Version - The version of the thread
	Version *int64 `json:"version,omitempty"`
	// RecipientCommunicationIdentifier - The communication identifier of the target user
	RecipientCommunicationIdentifier *CommunicationIdentifierModel `json:"recipientCommunicationIdentifier,omitempty"`
	// TransactionID - The transaction id will be used as co-relation vector
	TransactionID *string `json:"transactionId,omitempty"`
	// ThreadID - The chat thread id
	ThreadID *string `json:"threadId,omitempty"`
}

// AcsRecordingChunkInfoProperties schema for all properties of  Recording Chunk Information.
type AcsRecordingChunkInfoProperties struct {
	// DocumentID - The documentId of the recording chunk
	DocumentID *string `json:"documentId,omitempty"`
	// Index - The index of the recording chunk
	Index *int64 `json:"index,omitempty"`
	// EndReason - The reason for ending the recording chunk
	EndReason *string `json:"endReason,omitempty"`
	// MetadataLocation - The location of the metadata for this chunk
	MetadataLocation *string `json:"metadataLocation,omitempty"`
	// ContentLocation - The location of the content for this chunk
	ContentLocation *string `json:"contentLocation,omitempty"`
}

// AcsRecordingFileStatusUpdatedEventData schema of the Data property of an EventGridEvent for a
// Microsoft.Communication.RecordingFileStatusUpdated event.
type AcsRecordingFileStatusUpdatedEventData struct {
	// RecordingStorageInfo - The details of recording storage information
	RecordingStorageInfo *AcsRecordingStorageInfoProperties `json:"recordingStorageInfo,omitempty"`
	// RecordingStartTime - The time at which the recording started
	RecordingStartTime *date.Time `json:"recordingStartTime,omitempty"`
	// RecordingDurationMs - The recording duration in milliseconds
	RecordingDurationMs *int64 `json:"recordingDurationMs,omitempty"`
	// SessionEndReason - The reason for ending recording session
	SessionEndReason *string `json:"sessionEndReason,omitempty"`
}

// AcsRecordingStorageInfoProperties schema for all properties of Recording Storage Information.
type AcsRecordingStorageInfoProperties struct {
	// RecordingChunks - List of details of recording chunks information
	RecordingChunks *[]AcsRecordingChunkInfoProperties `json:"recordingChunks,omitempty"`
}

// AcsSmsDeliveryAttemptProperties schema for details of a delivery attempt
type AcsSmsDeliveryAttemptProperties struct {
	// Timestamp - TimeStamp when delivery was attempted
	Timestamp *date.Time `json:"timestamp,omitempty"`
	// SegmentsSucceeded - Number of segments that were successfully delivered
	SegmentsSucceeded *int32 `json:"segmentsSucceeded,omitempty"`
	// SegmentsFailed - Number of segments whose delivery failed
	SegmentsFailed *int32 `json:"segmentsFailed,omitempty"`
}

// AcsSmsDeliveryReportReceivedEventData schema of the Data property of an EventGridEvent for a
// Microsoft.Communication.SMSDeliveryReportReceived event.
type AcsSmsDeliveryReportReceivedEventData struct {
	// DeliveryStatus - Status of Delivery
	DeliveryStatus *string `json:"deliveryStatus,omitempty"`
	// DeliveryStatusDetails - Details about Delivery Status
	DeliveryStatusDetails *string `json:"deliveryStatusDetails,omitempty"`
	// DeliveryAttempts - List of details of delivery attempts made
	DeliveryAttempts *[]AcsSmsDeliveryAttemptProperties `json:"deliveryAttempts,omitempty"`
	// ReceivedTimestamp - The time at which the SMS delivery report was received
	ReceivedTimestamp *date.Time `json:"receivedTimestamp,omitempty"`
	// Tag - Customer Content
	Tag *string `json:"tag,omitempty"`
	// MessageID - The identity of the SMS message
	MessageID *string `json:"messageId,omitempty"`
	// From - The identity of SMS message sender
	From *string `json:"from,omitempty"`
	// To - The identity of SMS message receiver
	To *string `json:"to,omitempty"`
}

// AcsSmsEventBaseProperties schema of common properties of all SMS events
type AcsSmsEventBaseProperties struct {
	// MessageID - The identity of the SMS message
	MessageID *string `json:"messageId,omitempty"`
	// From - The identity of SMS message sender
	From *string `json:"from,omitempty"`
	// To - The identity of SMS message receiver
	To *string `json:"to,omitempty"`
}

// AcsSmsReceivedEventData schema of the Data property of an EventGridEvent for a
// Microsoft.Communication.SMSReceived event.
type AcsSmsReceivedEventData struct {
	// Message - The SMS content
	Message *string `json:"message,omitempty"`
	// ReceivedTimestamp - The time at which the SMS was received
	ReceivedTimestamp *date.Time `json:"receivedTimestamp,omitempty"`
	// MessageID - The identity of the SMS message
	MessageID *string `json:"messageId,omitempty"`
	// From - The identity of SMS message sender
	From *string `json:"from,omitempty"`
	// To - The identity of SMS message receiver
	To *string `json:"to,omitempty"`
}

// AppConfigurationKeyValueDeletedEventData schema of the Data property of an EventGridEvent for a
// Microsoft.AppConfiguration.KeyValueDeleted event.
type AppConfigurationKeyValueDeletedEventData struct {
	// Key - The key used to identify the key-value that was deleted.
	Key *string `json:"key,omitempty"`
	// Label - The label, if any, used to identify the key-value that was deleted.
	Label *string `json:"label,omitempty"`
	// Etag - The etag representing the key-value that was deleted.
	Etag *string `json:"etag,omitempty"`
	// SyncToken - The sync token representing the server state after the event.
	SyncToken *string `json:"syncToken,omitempty"`
}

// AppConfigurationKeyValueModifiedEventData schema of the Data property of an EventGridEvent for a
// Microsoft.AppConfiguration.KeyValueModified event.
type AppConfigurationKeyValueModifiedEventData struct {
	// Key - The key used to identify the key-value that was modified.
	Key *string `json:"key,omitempty"`
	// Label - The label, if any, used to identify the key-value that was modified.
	Label *string `json:"label,omitempty"`
	// Etag - The etag representing the new state of the key-value.
	Etag *string `json:"etag,omitempty"`
	// SyncToken - The sync token representing the server state after the event.
	SyncToken *string `json:"syncToken,omitempty"`
}

// AppEventTypeDetail detail of action on the app.
type AppEventTypeDetail struct {
	// Action - Type of action of the operation. Possible values include: 'Restarted', 'Stopped', 'ChangedAppSettings', 'Started', 'Completed', 'Failed'
	Action AppAction `json:"action,omitempty"`
}

// AppServicePlanEventTypeDetail detail of action on the app service plan.
type AppServicePlanEventTypeDetail struct {
	// StampKind - Kind of environment where app service plan is. Possible values include: 'StampKindPublic', 'StampKindAseV1', 'StampKindAseV2'
	StampKind StampKind `json:"stampKind,omitempty"`
	// Action - Type of action on the app service plan. Possible values include: 'Updated'
	Action AppServicePlanAction `json:"action,omitempty"`
	// Status - Possible values include: 'AsyncStatusStarted', 'AsyncStatusCompleted', 'AsyncStatusFailed'
	Status AsyncStatus `json:"status,omitempty"`
}

// CloudEventEvent properties of an event published to an Event Grid topic using the CloudEvent 1.0 Schema
type CloudEventEvent struct {
	// AdditionalProperties - Unmatched properties from the message are deserialized this collection
	AdditionalProperties map[string]interface{} `json:""`
	// ID - An identifier for the event. The combination of id and source must be unique for each distinct event.
	ID *string `json:"id,omitempty"`
	// Source - Identifies the context in which an event happened. The combination of id and source must be unique for each distinct event.
	Source *string `json:"source,omitempty"`
	// Data - Event data specific to the event type.
	Data interface{} `json:"data,omitempty"`
	// DataBase64 - Event data specific to the event type, encoded as a base64 string.
	DataBase64 *[]byte `json:"data_base64,omitempty"`
	// Type - Type of event related to the originating occurrence.
	Type *string `json:"type,omitempty"`
	// Time - The time (in UTC) the event was generated, in RFC3339 format.
	Time *date.Time `json:"time,omitempty"`
	// Specversion - The version of the CloudEvents specification which the event uses.
	Specversion *string `json:"specversion,omitempty"`
	// Dataschema - Identifies the schema that data adheres to.
	Dataschema *string `json:"dataschema,omitempty"`
	// Datacontenttype - Content type of data value.
	Datacontenttype *string `json:"datacontenttype,omitempty"`
	// Subject - This describes the subject of the event in the context of the event producer (identified by source).
	Subject *string `json:"subject,omitempty"`
}

// MarshalJSON is the custom marshaler for CloudEventEvent.
func (cee CloudEventEvent) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	if cee.ID != nil {
		objectMap["id"] = cee.ID
	}
	if cee.Source != nil {
		objectMap["source"] = cee.Source
	}
	if cee.Data != nil {
		objectMap["data"] = cee.Data
	}
	if cee.DataBase64 != nil {
		objectMap["data_base64"] = cee.DataBase64
	}
	if cee.Type != nil {
		objectMap["type"] = cee.Type
	}
	if cee.Time != nil {
		objectMap["time"] = cee.Time
	}
	if cee.Specversion != nil {
		objectMap["specversion"] = cee.Specversion
	}
	if cee.Dataschema != nil {
		objectMap["dataschema"] = cee.Dataschema
	}
	if cee.Datacontenttype != nil {
		objectMap["datacontenttype"] = cee.Datacontenttype
	}
	if cee.Subject != nil {
		objectMap["subject"] = cee.Subject
	}
	for k, v := range cee.AdditionalProperties {
		objectMap[k] = v
	}
	return json.Marshal(objectMap)
}

// UnmarshalJSON is the custom unmarshaler for CloudEventEvent struct.
func (cee *CloudEventEvent) UnmarshalJSON(body []byte) error {
	var m map[string]*json.RawMessage
	err := json.Unmarshal(body, &m)
	if err != nil {
		return err
	}
	for k, v := range m {
		switch k {
		default:
			if v != nil {
				var additionalProperties interface{}
				err = json.Unmarshal(*v, &additionalProperties)
				if err != nil {
					return err
				}
				if cee.AdditionalProperties == nil {
					cee.AdditionalProperties = make(map[string]interface{})
				}
				cee.AdditionalProperties[k] = additionalProperties
			}
		case "id":
			if v != nil {
				var ID string
				err = json.Unmarshal(*v, &ID)
				if err != nil {
					return err
				}
				cee.ID = &ID
			}
		case "source":
			if v != nil {
				var source string
				err = json.Unmarshal(*v, &source)
				if err != nil {
					return err
				}
				cee.Source = &source
			}
		case "data":
			if v != nil {
				var data interface{}
				err = json.Unmarshal(*v, &data)
				if err != nil {
					return err
				}
				cee.Data = data
			}
		case "data_base64":
			if v != nil {
				var dataBase64 []byte
				err = json.Unmarshal(*v, &dataBase64)
				if err != nil {
					return err
				}
				cee.DataBase64 = &dataBase64
			}
		case "type":
			if v != nil {
				var typeVar string
				err = json.Unmarshal(*v, &typeVar)
				if err != nil {
					return err
				}
				cee.Type = &typeVar
			}
		case "time":
			if v != nil {
				var timeVar date.Time
				err = json.Unmarshal(*v, &timeVar)
				if err != nil {
					return err
				}
				cee.Time = &timeVar
			}
		case "specversion":
			if v != nil {
				var specversion string
				err = json.Unmarshal(*v, &specversion)
				if err != nil {
					return err
				}
				cee.Specversion = &specversion
			}
		case "dataschema":
			if v != nil {
				var dataschema string
				err = json.Unmarshal(*v, &dataschema)
				if err != nil {
					return err
				}
				cee.Dataschema = &dataschema
			}
		case "datacontenttype":
			if v != nil {
				var datacontenttype string
				err = json.Unmarshal(*v, &datacontenttype)
				if err != nil {
					return err
				}
				cee.Datacontenttype = &datacontenttype
			}
		case "subject":
			if v != nil {
				var subject string
				err = json.Unmarshal(*v, &subject)
				if err != nil {
					return err
				}
				cee.Subject = &subject
			}
		}
	}

	return nil
}

// CommunicationIdentifierModel identifies a participant in Azure Communication services. A participant is,
// for example, a phone number or an Azure communication user. This model must be interpreted as a union:
// Apart from rawId, at most one further property may be set.
type CommunicationIdentifierModel struct {
	// RawID - Raw Id of the identifier. Optional in requests, required in responses.
	RawID *string `json:"rawId,omitempty"`
	// CommunicationUser - The communication user.
	CommunicationUser *CommunicationUserIdentifierModel `json:"communicationUser,omitempty"`
	// PhoneNumber - The phone number.
	PhoneNumber *PhoneNumberIdentifierModel `json:"phoneNumber,omitempty"`
	// MicrosoftTeamsUser - The Microsoft Teams user.
	MicrosoftTeamsUser *MicrosoftTeamsUserIdentifierModel `json:"microsoftTeamsUser,omitempty"`
}

// CommunicationUserIdentifierModel a user that got created with an Azure Communication Services resource.
type CommunicationUserIdentifierModel struct {
	// ID - The Id of the communication user.
	ID *string `json:"id,omitempty"`
}

// ContainerRegistryArtifactEventData the content of the event request message.
type ContainerRegistryArtifactEventData struct {
	// ID - The event ID.
	ID *string `json:"id,omitempty"`
	// Timestamp - The time at which the event occurred.
	Timestamp *date.Time `json:"timestamp,omitempty"`
	// Action - The action that encompasses the provided event.
	Action *string `json:"action,omitempty"`
	// Target - The target of the event.
	Target *ContainerRegistryArtifactEventTarget `json:"target,omitempty"`
}

// ContainerRegistryArtifactEventTarget the target of the event.
type ContainerRegistryArtifactEventTarget struct {
	// MediaType - The MIME type of the artifact.
	MediaType *string `json:"mediaType,omitempty"`
	// Size - The size in bytes of the artifact.
	Size *int64 `json:"size,omitempty"`
	// Digest - The digest of the artifact.
	Digest *string `json:"digest,omitempty"`
	// Repository - The repository name of the artifact.
	Repository *string `json:"repository,omitempty"`
	// Tag - The tag of the artifact.
	Tag *string `json:"tag,omitempty"`
	// Name - The name of the artifact.
	Name *string `json:"name,omitempty"`
	// Version - The version of the artifact.
	Version *string `json:"version,omitempty"`
}

// ContainerRegistryChartDeletedEventData schema of the Data property of an EventGridEvent for a
// Microsoft.ContainerRegistry.ChartDeleted event.
type ContainerRegistryChartDeletedEventData struct {
	// ID - The event ID.
	ID *string `json:"id,omitempty"`
	// Timestamp - The time at which the event occurred.
	Timestamp *date.Time `json:"timestamp,omitempty"`
	// Action - The action that encompasses the provided event.
	Action *string `json:"action,omitempty"`
	// Target - The target of the event.
	Target *ContainerRegistryArtifactEventTarget `json:"target,omitempty"`
}

// ContainerRegistryChartPushedEventData schema of the Data property of an EventGridEvent for a
// Microsoft.ContainerRegistry.ChartPushed event.
type ContainerRegistryChartPushedEventData struct {
	// ID - The event ID.
	ID *string `json:"id,omitempty"`
	// Timestamp - The time at which the event occurred.
	Timestamp *date.Time `json:"timestamp,omitempty"`
	// Action - The action that encompasses the provided event.
	Action *string `json:"action,omitempty"`
	// Target - The target of the event.
	Target *ContainerRegistryArtifactEventTarget `json:"target,omitempty"`
}

// ContainerRegistryEventActor the agent that initiated the event. For most situations, this could be from
// the authorization context of the request.
type ContainerRegistryEventActor struct {
	// Name - The subject or username associated with the request context that generated the event.
	Name *string `json:"name,omitempty"`
}

// ContainerRegistryEventData the content of the event request message.
type ContainerRegistryEventData struct {
	// ID - The event ID.
	ID *string `json:"id,omitempty"`
	// Timestamp - The time at which the event occurred.
	Timestamp *date.Time `json:"timestamp,omitempty"`
	// Action - The action that encompasses the provided event.
	Action *string `json:"action,omitempty"`
	// Target - The target of the event.
	Target *ContainerRegistryEventTarget `json:"target,omitempty"`
	// Request - The request that generated the event.
	Request *ContainerRegistryEventRequest `json:"request,omitempty"`
	// Actor - The agent that initiated the event. For most situations, this could be from the authorization context of the request.
	Actor *ContainerRegistryEventActor `json:"actor,omitempty"`
	// Source - The registry node that generated the event. Put differently, while the actor initiates the event, the source generates it.
	Source *ContainerRegistryEventSource `json:"source,omitempty"`
}

// ContainerRegistryEventRequest the request that generated the event.
type ContainerRegistryEventRequest struct {
	// ID - The ID of the request that initiated the event.
	ID *string `json:"id,omitempty"`
	// Addr - The IP or hostname and possibly port of the client connection that initiated the event. This is the RemoteAddr from the standard http request.
	Addr *string `json:"addr,omitempty"`
	// Host - The externally accessible hostname of the registry instance, as specified by the http host header on incoming requests.
	Host *string `json:"host,omitempty"`
	// Method - The request method that generated the event.
	Method *string `json:"method,omitempty"`
	// Useragent - The user agent header of the request.
	Useragent *string `json:"useragent,omitempty"`
}

// ContainerRegistryEventSource the registry node that generated the event. Put differently, while the
// actor initiates the event, the source generates it.
type ContainerRegistryEventSource struct {
	// Addr - The IP or hostname and the port of the registry node that generated the event. Generally, this will be resolved by os.Hostname() along with the running port.
	Addr *string `json:"addr,omitempty"`
	// InstanceID - The running instance of an application. Changes after each restart.
	InstanceID *string `json:"instanceID,omitempty"`
}

// ContainerRegistryEventTarget the target of the event.
type ContainerRegistryEventTarget struct {
	// MediaType - The MIME type of the referenced object.
	MediaType *string `json:"mediaType,omitempty"`
	// Size - The number of bytes of the content. Same as Length field.
	Size *int64 `json:"size,omitempty"`
	// Digest - The digest of the content, as defined by the Registry V2 HTTP API Specification.
	Digest *string `json:"digest,omitempty"`
	// Length - The number of bytes of the content. Same as Size field.
	Length *int64 `json:"length,omitempty"`
	// Repository - The repository name.
	Repository *string `json:"repository,omitempty"`
	// URL - The direct URL to the content.
	URL *string `json:"url,omitempty"`
	// Tag - The tag name.
	Tag *string `json:"tag,omitempty"`
}

// ContainerRegistryImageDeletedEventData schema of the Data property of an EventGridEvent for a
// Microsoft.ContainerRegistry.ImageDeleted event.
type ContainerRegistryImageDeletedEventData struct {
	// ID - The event ID.
	ID *string `json:"id,omitempty"`
	// Timestamp - The time at which the event occurred.
	Timestamp *date.Time `json:"timestamp,omitempty"`
	// Action - The action that encompasses the provided event.
	Action *string `json:"action,omitempty"`
	// Target - The target of the event.
	Target *ContainerRegistryEventTarget `json:"target,omitempty"`
	// Request - The request that generated the event.
	Request *ContainerRegistryEventRequest `json:"request,omitempty"`
	// Actor - The agent that initiated the event. For most situations, this could be from the authorization context of the request.
	Actor *ContainerRegistryEventActor `json:"actor,omitempty"`
	// Source - The registry node that generated the event. Put differently, while the actor initiates the event, the source generates it.
	Source *ContainerRegistryEventSource `json:"source,omitempty"`
}

// ContainerRegistryImagePushedEventData schema of the Data property of an EventGridEvent for a
// Microsoft.ContainerRegistry.ImagePushed event.
type ContainerRegistryImagePushedEventData struct {
	// ID - The event ID.
	ID *string `json:"id,omitempty"`
	// Timestamp - The time at which the event occurred.
	Timestamp *date.Time `json:"timestamp,omitempty"`
	// Action - The action that encompasses the provided event.
	Action *string `json:"action,omitempty"`
	// Target - The target of the event.
	Target *ContainerRegistryEventTarget `json:"target,omitempty"`
	// Request - The request that generated the event.
	Request *ContainerRegistryEventRequest `json:"request,omitempty"`
	// Actor - The agent that initiated the event. For most situations, this could be from the authorization context of the request.
	Actor *ContainerRegistryEventActor `json:"actor,omitempty"`
	// Source - The registry node that generated the event. Put differently, while the actor initiates the event, the source generates it.
	Source *ContainerRegistryEventSource `json:"source,omitempty"`
}

// ContainerServiceNewKubernetesVersionAvailableEventData schema of the Data property of an EventGridEvent
// for a Microsoft.ContainerService.NewKubernetesVersionAvailable event
type ContainerServiceNewKubernetesVersionAvailableEventData struct {
	// LatestSupportedKubernetesVersion - The highest PATCH Kubernetes version for the highest MINOR version supported by ManagedCluster resource
	LatestSupportedKubernetesVersion *string `json:"latestSupportedKubernetesVersion,omitempty"`
	// LatestStableKubernetesVersion - The highest PATCH Kubernetes version for the MINOR version considered stable for the ManagedCluster resource
	LatestStableKubernetesVersion *string `json:"latestStableKubernetesVersion,omitempty"`
	// LowestMinorKubernetesVersion - The highest PATCH Kubernetes version for the lowest applicable MINOR version available for the ManagedCluster resource
	LowestMinorKubernetesVersion *string `json:"lowestMinorKubernetesVersion,omitempty"`
	// LatestPreviewKubernetesVersion - The highest PATCH Kubernetes version considered preview for the ManagedCluster resource. There might not be any version in preview at the time of publishing the event
	LatestPreviewKubernetesVersion *string `json:"latestPreviewKubernetesVersion,omitempty"`
}

// DeviceConnectionStateEventInfo information about the device connection state event.
type DeviceConnectionStateEventInfo struct {
	// SequenceNumber - Sequence number is string representation of a hexadecimal number. string compare can be used to identify the larger number because both in ASCII and HEX numbers come after alphabets. If you are converting the string to hex, then the number is a 256 bit number.
	SequenceNumber *string `json:"sequenceNumber,omitempty"`
}

// DeviceConnectionStateEventProperties schema of the Data property of an EventGridEvent for a device
// connection state event (DeviceConnected, DeviceDisconnected).
type DeviceConnectionStateEventProperties struct {
	// DeviceID - The unique identifier of the device. This case-sensitive string can be up to 128 characters long, and supports ASCII 7-bit alphanumeric characters plus the following special characters: - : . + % _ &#35; * ? ! ( ) , = @ ; $ '.
	DeviceID *string `json:"deviceId,omitempty"`
	// ModuleID - The unique identifier of the module. This case-sensitive string can be up to 128 characters long, and supports ASCII 7-bit alphanumeric characters plus the following special characters: - : . + % _ &#35; * ? ! ( ) , = @ ; $ '.
	ModuleID *string `json:"moduleId,omitempty"`
	// HubName - Name of the IoT Hub where the device was created or deleted.
	HubName *string `json:"hubName,omitempty"`
	// DeviceConnectionStateEventInfo - Information about the device connection state event.
	DeviceConnectionStateEventInfo *DeviceConnectionStateEventInfo `json:"deviceConnectionStateEventInfo,omitempty"`
}

// DeviceLifeCycleEventProperties schema of the Data property of an EventGridEvent for a device life cycle
// event (DeviceCreated, DeviceDeleted).
type DeviceLifeCycleEventProperties struct {
	// DeviceID - The unique identifier of the device. This case-sensitive string can be up to 128 characters long, and supports ASCII 7-bit alphanumeric characters plus the following special characters: - : . + % _ &#35; * ? ! ( ) , = @ ; $ '.
	DeviceID *string `json:"deviceId,omitempty"`
	// HubName - Name of the IoT Hub where the device was created or deleted.
	HubName *string `json:"hubName,omitempty"`
	// Twin - Information about the device twin, which is the cloud representation of application device metadata.
	Twin *DeviceTwinInfo `json:"twin,omitempty"`
}

// DeviceTelemetryEventProperties schema of the Data property of an EventGridEvent for a device telemetry
// event (DeviceTelemetry).
type DeviceTelemetryEventProperties struct {
	// Body - The content of the message from the device.
	Body interface{} `json:"body,omitempty"`
	// Properties - Application properties are user-defined strings that can be added to the message. These fields are optional.
	Properties map[string]*string `json:"properties"`
	// SystemProperties - System properties help identify contents and source of the messages.
	SystemProperties map[string]*string `json:"systemProperties"`
}

// MarshalJSON is the custom marshaler for DeviceTelemetryEventProperties.
func (dtep DeviceTelemetryEventProperties) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	if dtep.Body != nil {
		objectMap["body"] = dtep.Body
	}
	if dtep.Properties != nil {
		objectMap["properties"] = dtep.Properties
	}
	if dtep.SystemProperties != nil {
		objectMap["systemProperties"] = dtep.SystemProperties
	}
	return json.Marshal(objectMap)
}

// DeviceTwinInfo information about the device twin, which is the cloud representation of application
// device metadata.
type DeviceTwinInfo struct {
	// AuthenticationType - Authentication type used for this device: either SAS, SelfSigned, or CertificateAuthority.
	AuthenticationType *string `json:"authenticationType,omitempty"`
	// CloudToDeviceMessageCount - Count of cloud to device messages sent to this device.
	CloudToDeviceMessageCount *float64 `json:"cloudToDeviceMessageCount,omitempty"`
	// ConnectionState - Whether the device is connected or disconnected.
	ConnectionState *string `json:"connectionState,omitempty"`
	// DeviceID - The unique identifier of the device twin.
	DeviceID *string `json:"deviceId,omitempty"`
	// Etag - A piece of information that describes the content of the device twin. Each etag is guaranteed to be unique per device twin.
	Etag *string `json:"etag,omitempty"`
	// LastActivityTime - The ISO8601 timestamp of the last activity.
	LastActivityTime *string `json:"lastActivityTime,omitempty"`
	// Properties - Properties JSON element.
	Properties *DeviceTwinInfoProperties `json:"properties,omitempty"`
	// Status - Whether the device twin is enabled or disabled.
	Status *string `json:"status,omitempty"`
	// StatusUpdateTime - The ISO8601 timestamp of the last device twin status update.
	StatusUpdateTime *string `json:"statusUpdateTime,omitempty"`
	// Version - An integer that is incremented by one each time the device twin is updated.
	Version *float64 `json:"version,omitempty"`
	// X509Thumbprint - The thumbprint is a unique value for the x509 certificate, commonly used to find a particular certificate in a certificate store. The thumbprint is dynamically generated using the SHA1 algorithm, and does not physically exist in the certificate.
	X509Thumbprint *DeviceTwinInfoX509Thumbprint `json:"x509Thumbprint,omitempty"`
}

// DeviceTwinInfoProperties properties JSON element.
type DeviceTwinInfoProperties struct {
	// Desired - A portion of the properties that can be written only by the application back-end, and read by the device.
	Desired *DeviceTwinProperties `json:"desired,omitempty"`
	// Reported - A portion of the properties that can be written only by the device, and read by the application back-end.
	Reported *DeviceTwinProperties `json:"reported,omitempty"`
}

// DeviceTwinInfoX509Thumbprint the thumbprint is a unique value for the x509 certificate, commonly used to
// find a particular certificate in a certificate store. The thumbprint is dynamically generated using the
// SHA1 algorithm, and does not physically exist in the certificate.
type DeviceTwinInfoX509Thumbprint struct {
	// PrimaryThumbprint - Primary thumbprint for the x509 certificate.
	PrimaryThumbprint *string `json:"primaryThumbprint,omitempty"`
	// SecondaryThumbprint - Secondary thumbprint for the x509 certificate.
	SecondaryThumbprint *string `json:"secondaryThumbprint,omitempty"`
}

// DeviceTwinMetadata metadata information for the properties JSON document.
type DeviceTwinMetadata struct {
	// LastUpdated - The ISO8601 timestamp of the last time the properties were updated.
	LastUpdated *string `json:"lastUpdated,omitempty"`
}

// DeviceTwinProperties a portion of the properties that can be written only by the application back-end,
// and read by the device.
type DeviceTwinProperties struct {
	// Metadata - Metadata information for the properties JSON document.
	Metadata *DeviceTwinMetadata `json:"metadata,omitempty"`
	// Version - Version of device twin properties.
	Version *float64 `json:"version,omitempty"`
}

// Event properties of an event published to an Event Grid topic using the EventGrid Schema.
type Event struct {
	// ID - An unique identifier for the event.
	ID *string `json:"id,omitempty"`
	// Topic - The resource path of the event source.
	Topic *string `json:"topic,omitempty"`
	// Subject - A resource path relative to the topic path.
	Subject *string `json:"subject,omitempty"`
	// Data - Event data specific to the event type.
	Data interface{} `json:"data,omitempty"`
	// EventType - The type of the event that occurred.
	EventType *string `json:"eventType,omitempty"`
	// EventTime - The time (in UTC) the event was generated.
	EventTime *date.Time `json:"eventTime,omitempty"`
	// MetadataVersion - READ-ONLY; The schema version of the event metadata.
	MetadataVersion *string `json:"metadataVersion,omitempty"`
	// DataVersion - The schema version of the data object.
	DataVersion *string `json:"dataVersion,omitempty"`
}

// MarshalJSON is the custom marshaler for Event.
func (e Event) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	if e.ID != nil {
		objectMap["id"] = e.ID
	}
	if e.Topic != nil {
		objectMap["topic"] = e.Topic
	}
	if e.Subject != nil {
		objectMap["subject"] = e.Subject
	}
	if e.Data != nil {
		objectMap["data"] = e.Data
	}
	if e.EventType != nil {
		objectMap["eventType"] = e.EventType
	}
	if e.EventTime != nil {
		objectMap["eventTime"] = e.EventTime
	}
	if e.DataVersion != nil {
		objectMap["dataVersion"] = e.DataVersion
	}
	return json.Marshal(objectMap)
}

// EventHubCaptureFileCreatedEventData schema of the Data property of an EventGridEvent for a
// Microsoft.EventHub.CaptureFileCreated event.
type EventHubCaptureFileCreatedEventData struct {
	// Fileurl - The path to the capture file.
	Fileurl *string `json:"fileurl,omitempty"`
	// FileType - The file type of the capture file.
	FileType *string `json:"fileType,omitempty"`
	// PartitionID - The shard ID.
	PartitionID *string `json:"partitionId,omitempty"`
	// SizeInBytes - The file size.
	SizeInBytes *int32 `json:"sizeInBytes,omitempty"`
	// EventCount - The number of events in the file.
	EventCount *int32 `json:"eventCount,omitempty"`
	// FirstSequenceNumber - The smallest sequence number from the queue.
	FirstSequenceNumber *int32 `json:"firstSequenceNumber,omitempty"`
	// LastSequenceNumber - The last sequence number from the queue.
	LastSequenceNumber *int32 `json:"lastSequenceNumber,omitempty"`
	// FirstEnqueueTime - The first time from the queue.
	FirstEnqueueTime *date.Time `json:"firstEnqueueTime,omitempty"`
	// LastEnqueueTime - The last time from the queue.
	LastEnqueueTime *date.Time `json:"lastEnqueueTime,omitempty"`
}

// IotHubDeviceConnectedEventData event data for Microsoft.Devices.DeviceConnected event.
type IotHubDeviceConnectedEventData struct {
	// DeviceID - The unique identifier of the device. This case-sensitive string can be up to 128 characters long, and supports ASCII 7-bit alphanumeric characters plus the following special characters: - : . + % _ &#35; * ? ! ( ) , = @ ; $ '.
	DeviceID *string `json:"deviceId,omitempty"`
	// ModuleID - The unique identifier of the module. This case-sensitive string can be up to 128 characters long, and supports ASCII 7-bit alphanumeric characters plus the following special characters: - : . + % _ &#35; * ? ! ( ) , = @ ; $ '.
	ModuleID *string `json:"moduleId,omitempty"`
	// HubName - Name of the IoT Hub where the device was created or deleted.
	HubName *string `json:"hubName,omitempty"`
	// DeviceConnectionStateEventInfo - Information about the device connection state event.
	DeviceConnectionStateEventInfo *DeviceConnectionStateEventInfo `json:"deviceConnectionStateEventInfo,omitempty"`
}

// IotHubDeviceCreatedEventData event data for Microsoft.Devices.DeviceCreated event.
type IotHubDeviceCreatedEventData struct {
	// DeviceID - The unique identifier of the device. This case-sensitive string can be up to 128 characters long, and supports ASCII 7-bit alphanumeric characters plus the following special characters: - : . + % _ &#35; * ? ! ( ) , = @ ; $ '.
	DeviceID *string `json:"deviceId,omitempty"`
	// HubName - Name of the IoT Hub where the device was created or deleted.
	HubName *string `json:"hubName,omitempty"`
	// Twin - Information about the device twin, which is the cloud representation of application device metadata.
	Twin *DeviceTwinInfo `json:"twin,omitempty"`
}

// IotHubDeviceDeletedEventData event data for Microsoft.Devices.DeviceDeleted event.
type IotHubDeviceDeletedEventData struct {
	// DeviceID - The unique identifier of the device. This case-sensitive string can be up to 128 characters long, and supports ASCII 7-bit alphanumeric characters plus the following special characters: - : . + % _ &#35; * ? ! ( ) , = @ ; $ '.
	DeviceID *string `json:"deviceId,omitempty"`
	// HubName - Name of the IoT Hub where the device was created or deleted.
	HubName *string `json:"hubName,omitempty"`
	// Twin - Information about the device twin, which is the cloud representation of application device metadata.
	Twin *DeviceTwinInfo `json:"twin,omitempty"`
}

// IotHubDeviceDisconnectedEventData event data for Microsoft.Devices.DeviceDisconnected event.
type IotHubDeviceDisconnectedEventData struct {
	// DeviceID - The unique identifier of the device. This case-sensitive string can be up to 128 characters long, and supports ASCII 7-bit alphanumeric characters plus the following special characters: - : . + % _ &#35; * ? ! ( ) , = @ ; $ '.
	DeviceID *string `json:"deviceId,omitempty"`
	// ModuleID - The unique identifier of the module. This case-sensitive string can be up to 128 characters long, and supports ASCII 7-bit alphanumeric characters plus the following special characters: - : . + % _ &#35; * ? ! ( ) , = @ ; $ '.
	ModuleID *string `json:"moduleId,omitempty"`
	// HubName - Name of the IoT Hub where the device was created or deleted.
	HubName *string `json:"hubName,omitempty"`
	// DeviceConnectionStateEventInfo - Information about the device connection state event.
	DeviceConnectionStateEventInfo *DeviceConnectionStateEventInfo `json:"deviceConnectionStateEventInfo,omitempty"`
}

// IotHubDeviceTelemetryEventData event data for Microsoft.Devices.DeviceTelemetry event.
type IotHubDeviceTelemetryEventData struct {
	// Body - The content of the message from the device.
	Body interface{} `json:"body,omitempty"`
	// Properties - Application properties are user-defined strings that can be added to the message. These fields are optional.
	Properties map[string]*string `json:"properties"`
	// SystemProperties - System properties help identify contents and source of the messages.
	SystemProperties map[string]*string `json:"systemProperties"`
}

// MarshalJSON is the custom marshaler for IotHubDeviceTelemetryEventData.
func (ihdted IotHubDeviceTelemetryEventData) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	if ihdted.Body != nil {
		objectMap["body"] = ihdted.Body
	}
	if ihdted.Properties != nil {
		objectMap["properties"] = ihdted.Properties
	}
	if ihdted.SystemProperties != nil {
		objectMap["systemProperties"] = ihdted.SystemProperties
	}
	return json.Marshal(objectMap)
}

// KeyVaultCertificateExpiredEventData schema of the Data property of an EventGridEvent for a
// Microsoft.KeyVault.CertificateExpired event.
type KeyVaultCertificateExpiredEventData struct {
	// ID - The id of the object that triggered this event.
	ID *string `json:"id,omitempty"`
	// VaultName - Key vault name of the object that triggered this event.
	VaultName *string `json:"vaultName,omitempty"`
	// ObjectType - The type of the object that triggered this event
	ObjectType *string `json:"objectType,omitempty"`
	// ObjectName - The name of the object that triggered this event
	ObjectName *string `json:"objectName,omitempty"`
	// Version - The version of the object that triggered this event
	Version *string `json:"version,omitempty"`
	// Nbf - Not before date of the object that triggered this event
	Nbf *float64 `json:"nbf,omitempty"`
	// Exp - The expiration date of the object that triggered this event
	Exp *float64 `json:"exp,omitempty"`
}

// KeyVaultCertificateNearExpiryEventData schema of the Data property of an EventGridEvent for a
// Microsoft.KeyVault.CertificateNearExpiry event.
type KeyVaultCertificateNearExpiryEventData struct {
	// ID - The id of the object that triggered this event.
	ID *string `json:"id,omitempty"`
	// VaultName - Key vault name of the object that triggered this event.
	VaultName *string `json:"vaultName,omitempty"`
	// ObjectType - The type of the object that triggered this event
	ObjectType *string `json:"objectType,omitempty"`
	// ObjectName - The name of the object that triggered this event
	ObjectName *string `json:"objectName,omitempty"`
	// Version - The version of the object that triggered this event
	Version *string `json:"version,omitempty"`
	// Nbf - Not before date of the object that triggered this event
	Nbf *float64 `json:"nbf,omitempty"`
	// Exp - The expiration date of the object that triggered this event
	Exp *float64 `json:"exp,omitempty"`
}

// KeyVaultCertificateNewVersionCreatedEventData schema of the Data property of an EventGridEvent for a
// Microsoft.KeyVault.CertificateNewVersionCreated event.
type KeyVaultCertificateNewVersionCreatedEventData struct {
	// ID - The id of the object that triggered this event.
	ID *string `json:"id,omitempty"`
	// VaultName - Key vault name of the object that triggered this event.
	VaultName *string `json:"vaultName,omitempty"`
	// ObjectType - The type of the object that triggered this event
	ObjectType *string `json:"objectType,omitempty"`
	// ObjectName - The name of the object that triggered this event
	ObjectName *string `json:"objectName,omitempty"`
	// Version - The version of the object that triggered this event
	Version *string `json:"version,omitempty"`
	// Nbf - Not before date of the object that triggered this event
	Nbf *float64 `json:"nbf,omitempty"`
	// Exp - The expiration date of the object that triggered this event
	Exp *float64 `json:"exp,omitempty"`
}

// KeyVaultKeyExpiredEventData schema of the Data property of an EventGridEvent for a
// Microsoft.KeyVault.KeyExpired event.
type KeyVaultKeyExpiredEventData struct {
	// ID - The id of the object that triggered this event.
	ID *string `json:"id,omitempty"`
	// VaultName - Key vault name of the object that triggered this event.
	VaultName *string `json:"vaultName,omitempty"`
	// ObjectType - The type of the object that triggered this event
	ObjectType *string `json:"objectType,omitempty"`
	// ObjectName - The name of the object that triggered this event
	ObjectName *string `json:"objectName,omitempty"`
	// Version - The version of the object that triggered this event
	Version *string `json:"version,omitempty"`
	// Nbf - Not before date of the object that triggered this event
	Nbf *float64 `json:"nbf,omitempty"`
	// Exp - The expiration date of the object that triggered this event
	Exp *float64 `json:"exp,omitempty"`
}

// KeyVaultKeyNearExpiryEventData schema of the Data property of an EventGridEvent for a
// Microsoft.KeyVault.KeyNearExpiry event.
type KeyVaultKeyNearExpiryEventData struct {
	// ID - The id of the object that triggered this event.
	ID *string `json:"id,omitempty"`
	// VaultName - Key vault name of the object that triggered this event.
	VaultName *string `json:"vaultName,omitempty"`
	// ObjectType - The type of the object that triggered this event
	ObjectType *string `json:"objectType,omitempty"`
	// ObjectName - The name of the object that triggered this event
	ObjectName *string `json:"objectName,omitempty"`
	// Version - The version of the object that triggered this event
	Version *string `json:"version,omitempty"`
	// Nbf - Not before date of the object that triggered this event
	Nbf *float64 `json:"nbf,omitempty"`
	// Exp - The expiration date of the object that triggered this event
	Exp *float64 `json:"exp,omitempty"`
}

// KeyVaultKeyNewVersionCreatedEventData schema of the Data property of an EventGridEvent for a
// Microsoft.KeyVault.KeyNewVersionCreated event.
type KeyVaultKeyNewVersionCreatedEventData struct {
	// ID - The id of the object that triggered this event.
	ID *string `json:"id,omitempty"`
	// VaultName - Key vault name of the object that triggered this event.
	VaultName *string `json:"vaultName,omitempty"`
	// ObjectType - The type of the object that triggered this event
	ObjectType *string `json:"objectType,omitempty"`
	// ObjectName - The name of the object that triggered this event
	ObjectName *string `json:"objectName,omitempty"`
	// Version - The version of the object that triggered this event
	Version *string `json:"version,omitempty"`
	// Nbf - Not before date of the object that triggered this event
	Nbf *float64 `json:"nbf,omitempty"`
	// Exp - The expiration date of the object that triggered this event
	Exp *float64 `json:"exp,omitempty"`
}

// KeyVaultSecretExpiredEventData schema of the Data property of an EventGridEvent for a
// Microsoft.KeyVault.SecretExpired event.
type KeyVaultSecretExpiredEventData struct {
	// ID - The id of the object that triggered this event.
	ID *string `json:"id,omitempty"`
	// VaultName - Key vault name of the object that triggered this event.
	VaultName *string `json:"vaultName,omitempty"`
	// ObjectType - The type of the object that triggered this event
	ObjectType *string `json:"objectType,omitempty"`
	// ObjectName - The name of the object that triggered this event
	ObjectName *string `json:"objectName,omitempty"`
	// Version - The version of the object that triggered this event
	Version *string `json:"version,omitempty"`
	// Nbf - Not before date of the object that triggered this event
	Nbf *float64 `json:"nbf,omitempty"`
	// Exp - The expiration date of the object that triggered this event
	Exp *float64 `json:"exp,omitempty"`
}

// KeyVaultSecretNearExpiryEventData schema of the Data property of an EventGridEvent for a
// Microsoft.KeyVault.SecretNearExpiry event.
type KeyVaultSecretNearExpiryEventData struct {
	// ID - The id of the object that triggered this event.
	ID *string `json:"id,omitempty"`
	// VaultName - Key vault name of the object that triggered this event.
	VaultName *string `json:"vaultName,omitempty"`
	// ObjectType - The type of the object that triggered this event
	ObjectType *string `json:"objectType,omitempty"`
	// ObjectName - The name of the object that triggered this event
	ObjectName *string `json:"objectName,omitempty"`
	// Version - The version of the object that triggered this event
	Version *string `json:"version,omitempty"`
	// Nbf - Not before date of the object that triggered this event
	Nbf *float64 `json:"nbf,omitempty"`
	// Exp - The expiration date of the object that triggered this event
	Exp *float64 `json:"exp,omitempty"`
}

// KeyVaultSecretNewVersionCreatedEventData schema of the Data property of an EventGridEvent for a
// Microsoft.KeyVault.SecretNewVersionCreated event.
type KeyVaultSecretNewVersionCreatedEventData struct {
	// ID - The id of the object that triggered this event.
	ID *string `json:"id,omitempty"`
	// VaultName - Key vault name of the object that triggered this event.
	VaultName *string `json:"vaultName,omitempty"`
	// ObjectType - The type of the object that triggered this event
	ObjectType *string `json:"objectType,omitempty"`
	// ObjectName - The name of the object that triggered this event
	ObjectName *string `json:"objectName,omitempty"`
	// Version - The version of the object that triggered this event
	Version *string `json:"version,omitempty"`
	// Nbf - Not before date of the object that triggered this event
	Nbf *float64 `json:"nbf,omitempty"`
	// Exp - The expiration date of the object that triggered this event
	Exp *float64 `json:"exp,omitempty"`
}

// KeyVaultVaultAccessPolicyChangedEventData schema of the Data property of an EventGridEvent for a
// Microsoft.KeyVault.VaultAccessPolicyChanged event.
type KeyVaultVaultAccessPolicyChangedEventData struct {
	// ID - The id of the object that triggered this event.
	ID *string `json:"id,omitempty"`
	// VaultName - Key vault name of the object that triggered this event.
	VaultName *string `json:"vaultName,omitempty"`
	// ObjectType - The type of the object that triggered this event
	ObjectType *string `json:"objectType,omitempty"`
	// ObjectName - The name of the object that triggered this event
	ObjectName *string `json:"objectName,omitempty"`
	// Version - The version of the object that triggered this event
	Version *string `json:"version,omitempty"`
	// Nbf - Not before date of the object that triggered this event
	Nbf *float64 `json:"nbf,omitempty"`
	// Exp - The expiration date of the object that triggered this event
	Exp *float64 `json:"exp,omitempty"`
}

// MachineLearningServicesDatasetDriftDetectedEventData schema of the Data property of an EventGridEvent
// for a Microsoft.MachineLearningServices.DatasetDriftDetected event.
type MachineLearningServicesDatasetDriftDetectedEventData struct {
	// DataDriftID - The ID of the data drift monitor that triggered the event.
	DataDriftID *string `json:"dataDriftId,omitempty"`
	// DataDriftName - The name of the data drift monitor that triggered the event.
	DataDriftName *string `json:"dataDriftName,omitempty"`
	// RunID - The ID of the Run that detected data drift.
	RunID *string `json:"runId,omitempty"`
	// BaseDatasetID - The ID of the base Dataset used to detect drift.
	BaseDatasetID *string `json:"baseDatasetId,omitempty"`
	// TargetDatasetID - The ID of the target Dataset used to detect drift.
	TargetDatasetID *string `json:"targetDatasetId,omitempty"`
	// DriftCoefficient - The coefficient result that triggered the event.
	DriftCoefficient *float64 `json:"driftCoefficient,omitempty"`
	// StartTime - The start time of the target dataset time series that resulted in drift detection.
	StartTime *date.Time `json:"startTime,omitempty"`
	// EndTime - The end time of the target dataset time series that resulted in drift detection.
	EndTime *date.Time `json:"endTime,omitempty"`
}

// MachineLearningServicesModelDeployedEventData schema of the Data property of an EventGridEvent for a
// Microsoft.MachineLearningServices.ModelDeployed event.
type MachineLearningServicesModelDeployedEventData struct {
	// ServiceName - The name of the deployed service.
	ServiceName *string `json:"serviceName,omitempty"`
	// ServiceComputeType - The compute type (e.g. ACI, AKS) of the deployed service.
	ServiceComputeType *string `json:"serviceComputeType,omitempty"`
	// ModelIds - A common separated list of model IDs. The IDs of the models deployed in the service.
	ModelIds *string `json:"modelIds,omitempty"`
	// ServiceTags - The tags of the deployed service.
	ServiceTags interface{} `json:"serviceTags,omitempty"`
	// ServiceProperties - The properties of the deployed service.
	ServiceProperties interface{} `json:"serviceProperties,omitempty"`
}

// MachineLearningServicesModelRegisteredEventData schema of the Data property of an EventGridEvent for a
// Microsoft.MachineLearningServices.ModelRegistered event.
type MachineLearningServicesModelRegisteredEventData struct {
	// ModelName - The name of the model that was registered.
	ModelName *string `json:"modelName,omitempty"`
	// ModelVersion - The version of the model that was registered.
	ModelVersion *string `json:"modelVersion,omitempty"`
	// ModelTags - The tags of the model that was registered.
	ModelTags interface{} `json:"modelTags,omitempty"`
	// ModelProperties - The properties of the model that was registered.
	ModelProperties interface{} `json:"modelProperties,omitempty"`
}

// MachineLearningServicesRunCompletedEventData schema of the Data property of an EventGridEvent for a
// Microsoft.MachineLearningServices.RunCompleted event.
type MachineLearningServicesRunCompletedEventData struct {
	// ExperimentID - The ID of the experiment that the run belongs to.
	ExperimentID *string `json:"experimentId,omitempty"`
	// ExperimentName - The name of the experiment that the run belongs to.
	ExperimentName *string `json:"experimentName,omitempty"`
	// RunID - The ID of the Run that was completed.
	RunID *string `json:"runId,omitempty"`
	// RunType - The Run Type of the completed Run.
	RunType *string `json:"runType,omitempty"`
	// RunTags - The tags of the completed Run.
	RunTags interface{} `json:"runTags,omitempty"`
	// RunProperties - The properties of the completed Run.
	RunProperties interface{} `json:"runProperties,omitempty"`
}

// MachineLearningServicesRunStatusChangedEventData schema of the Data property of an EventGridEvent for a
// Microsoft.MachineLearningServices.RunStatusChanged event.
type MachineLearningServicesRunStatusChangedEventData struct {
	// ExperimentID - The ID of the experiment that the Machine Learning Run belongs to.
	ExperimentID *string `json:"experimentId,omitempty"`
	// ExperimentName - The name of the experiment that the Machine Learning Run belongs to.
	ExperimentName *string `json:"experimentName,omitempty"`
	// RunID - The ID of the Machine Learning Run.
	RunID *string `json:"runId,omitempty"`
	// RunType - The Run Type of the Machine Learning Run.
	RunType *string `json:"runType,omitempty"`
	// RunTags - The tags of the Machine Learning Run.
	RunTags interface{} `json:"runTags,omitempty"`
	// RunProperties - The properties of the Machine Learning Run.
	RunProperties interface{} `json:"runProperties,omitempty"`
	// RunStatus - The status of the Machine Learning Run.
	RunStatus *string `json:"runStatus,omitempty"`
}

// MapsGeofenceEnteredEventData schema of the Data property of an EventGridEvent for a
// Microsoft.Maps.GeofenceEntered event.
type MapsGeofenceEnteredEventData struct {
	// ExpiredGeofenceGeometryID - Lists of the geometry ID of the geofence which is expired relative to the user time in the request.
	ExpiredGeofenceGeometryID *[]string `json:"expiredGeofenceGeometryId,omitempty"`
	// Geometries - Lists the fence geometries that either fully contain the coordinate position or have an overlap with the searchBuffer around the fence.
	Geometries *[]MapsGeofenceGeometry `json:"geometries,omitempty"`
	// InvalidPeriodGeofenceGeometryID - Lists of the geometry ID of the geofence which is in invalid period relative to the user time in the request.
	InvalidPeriodGeofenceGeometryID *[]string `json:"invalidPeriodGeofenceGeometryId,omitempty"`
	// IsEventPublished - True if at least one event is published to the Azure Maps event subscriber, false if no event is published to the Azure Maps event subscriber.
	IsEventPublished *bool `json:"isEventPublished,omitempty"`
}

// MapsGeofenceEventProperties schema of the Data property of an EventGridEvent for a Geofence event
// (GeofenceEntered, GeofenceExited, GeofenceResult).
type MapsGeofenceEventProperties struct {
	// ExpiredGeofenceGeometryID - Lists of the geometry ID of the geofence which is expired relative to the user time in the request.
	ExpiredGeofenceGeometryID *[]string `json:"expiredGeofenceGeometryId,omitempty"`
	// Geometries - Lists the fence geometries that either fully contain the coordinate position or have an overlap with the searchBuffer around the fence.
	Geometries *[]MapsGeofenceGeometry `json:"geometries,omitempty"`
	// InvalidPeriodGeofenceGeometryID - Lists of the geometry ID of the geofence which is in invalid period relative to the user time in the request.
	InvalidPeriodGeofenceGeometryID *[]string `json:"invalidPeriodGeofenceGeometryId,omitempty"`
	// IsEventPublished - True if at least one event is published to the Azure Maps event subscriber, false if no event is published to the Azure Maps event subscriber.
	IsEventPublished *bool `json:"isEventPublished,omitempty"`
}

// MapsGeofenceExitedEventData schema of the Data property of an EventGridEvent for a
// Microsoft.Maps.GeofenceExited event.
type MapsGeofenceExitedEventData struct {
	// ExpiredGeofenceGeometryID - Lists of the geometry ID of the geofence which is expired relative to the user time in the request.
	ExpiredGeofenceGeometryID *[]string `json:"expiredGeofenceGeometryId,omitempty"`
	// Geometries - Lists the fence geometries that either fully contain the coordinate position or have an overlap with the searchBuffer around the fence.
	Geometries *[]MapsGeofenceGeometry `json:"geometries,omitempty"`
	// InvalidPeriodGeofenceGeometryID - Lists of the geometry ID of the geofence which is in invalid period relative to the user time in the request.
	InvalidPeriodGeofenceGeometryID *[]string `json:"invalidPeriodGeofenceGeometryId,omitempty"`
	// IsEventPublished - True if at least one event is published to the Azure Maps event subscriber, false if no event is published to the Azure Maps event subscriber.
	IsEventPublished *bool `json:"isEventPublished,omitempty"`
}

// MapsGeofenceGeometry the geofence geometry.
type MapsGeofenceGeometry struct {
	// DeviceID - ID of the device.
	DeviceID *string `json:"deviceId,omitempty"`
	// Distance - Distance from the coordinate to the closest border of the geofence. Positive means the coordinate is outside of the geofence. If the coordinate is outside of the geofence, but more than the value of searchBuffer away from the closest geofence border, then the value is 999. Negative means the coordinate is inside of the geofence. If the coordinate is inside the polygon, but more than the value of searchBuffer away from the closest geofencing border,then the value is -999. A value of 999 means that there is great confidence the coordinate is well outside the geofence. A value of -999 means that there is great confidence the coordinate is well within the geofence.
	Distance *float64 `json:"distance,omitempty"`
	// GeometryID - The unique ID for the geofence geometry.
	GeometryID *string `json:"geometryId,omitempty"`
	// NearestLat - Latitude of the nearest point of the geometry.
	NearestLat *float64 `json:"nearestLat,omitempty"`
	// NearestLon - Longitude of the nearest point of the geometry.
	NearestLon *float64 `json:"nearestLon,omitempty"`
	// UdID - The unique id returned from user upload service when uploading a geofence. Will not be included in geofencing post API.
	UdID *string `json:"udId,omitempty"`
}

// MapsGeofenceResultEventData schema of the Data property of an EventGridEvent for a
// Microsoft.Maps.GeofenceResult event.
type MapsGeofenceResultEventData struct {
	// ExpiredGeofenceGeometryID - Lists of the geometry ID of the geofence which is expired relative to the user time in the request.
	ExpiredGeofenceGeometryID *[]string `json:"expiredGeofenceGeometryId,omitempty"`
	// Geometries - Lists the fence geometries that either fully contain the coordinate position or have an overlap with the searchBuffer around the fence.
	Geometries *[]MapsGeofenceGeometry `json:"geometries,omitempty"`
	// InvalidPeriodGeofenceGeometryID - Lists of the geometry ID of the geofence which is in invalid period relative to the user time in the request.
	InvalidPeriodGeofenceGeometryID *[]string `json:"invalidPeriodGeofenceGeometryId,omitempty"`
	// IsEventPublished - True if at least one event is published to the Azure Maps event subscriber, false if no event is published to the Azure Maps event subscriber.
	IsEventPublished *bool `json:"isEventPublished,omitempty"`
}

// MediaJobCanceledEventData job canceled event data. Schema of the data property of an EventGridEvent for
// a Microsoft.Media.JobCanceled event.
type MediaJobCanceledEventData struct {
	// Outputs - Gets the Job outputs.
	Outputs *[]BasicMediaJobOutput `json:"outputs,omitempty"`
	// PreviousState - READ-ONLY; The previous state of the Job. Possible values include: 'Canceled', 'Canceling', 'Error', 'Finished', 'Processing', 'Queued', 'Scheduled'
	PreviousState MediaJobState `json:"previousState,omitempty"`
	// State - READ-ONLY; The new state of the Job. Possible values include: 'Canceled', 'Canceling', 'Error', 'Finished', 'Processing', 'Queued', 'Scheduled'
	State MediaJobState `json:"state,omitempty"`
	// CorrelationData - Gets the Job correlation data.
	CorrelationData map[string]*string `json:"correlationData"`
}

// MarshalJSON is the custom marshaler for MediaJobCanceledEventData.
func (mjced MediaJobCanceledEventData) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	if mjced.Outputs != nil {
		objectMap["outputs"] = mjced.Outputs
	}
	if mjced.CorrelationData != nil {
		objectMap["correlationData"] = mjced.CorrelationData
	}
	return json.Marshal(objectMap)
}

// UnmarshalJSON is the custom unmarshaler for MediaJobCanceledEventData struct.
func (mjced *MediaJobCanceledEventData) UnmarshalJSON(body []byte) error {
	var m map[string]*json.RawMessage
	err := json.Unmarshal(body, &m)
	if err != nil {
		return err
	}
	for k, v := range m {
		switch k {
		case "outputs":
			if v != nil {
				outputs, err := unmarshalBasicMediaJobOutputArray(*v)
				if err != nil {
					return err
				}
				mjced.Outputs = &outputs
			}
		case "previousState":
			if v != nil {
				var previousState MediaJobState
				err = json.Unmarshal(*v, &previousState)
				if err != nil {
					return err
				}
				mjced.PreviousState = previousState
			}
		case "state":
			if v != nil {
				var state MediaJobState
				err = json.Unmarshal(*v, &state)
				if err != nil {
					return err
				}
				mjced.State = state
			}
		case "correlationData":
			if v != nil {
				var correlationData map[string]*string
				err = json.Unmarshal(*v, &correlationData)
				if err != nil {
					return err
				}
				mjced.CorrelationData = correlationData
			}
		}
	}

	return nil
}

// MediaJobCancelingEventData job canceling event data. Schema of the data property of an EventGridEvent
// for a Microsoft.Media.JobCanceling event.
type MediaJobCancelingEventData struct {
	// PreviousState - READ-ONLY; The previous state of the Job. Possible values include: 'Canceled', 'Canceling', 'Error', 'Finished', 'Processing', 'Queued', 'Scheduled'
	PreviousState MediaJobState `json:"previousState,omitempty"`
	// State - READ-ONLY; The new state of the Job. Possible values include: 'Canceled', 'Canceling', 'Error', 'Finished', 'Processing', 'Queued', 'Scheduled'
	State MediaJobState `json:"state,omitempty"`
	// CorrelationData - Gets the Job correlation data.
	CorrelationData map[string]*string `json:"correlationData"`
}

// MarshalJSON is the custom marshaler for MediaJobCancelingEventData.
func (mjced MediaJobCancelingEventData) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	if mjced.CorrelationData != nil {
		objectMap["correlationData"] = mjced.CorrelationData
	}
	return json.Marshal(objectMap)
}

// MediaJobError details of JobOutput errors.
type MediaJobError struct {
	// Code - READ-ONLY; Error code describing the error. Possible values include: 'ServiceError', 'ServiceTransientError', 'DownloadNotAccessible', 'DownloadTransientError', 'UploadNotAccessible', 'UploadTransientError', 'ConfigurationUnsupported', 'ContentMalformed', 'ContentUnsupported'
	Code MediaJobErrorCode `json:"code,omitempty"`
	// Message - READ-ONLY; A human-readable language-dependent representation of the error.
	Message *string `json:"message,omitempty"`
	// Category - READ-ONLY; Helps with categorization of errors. Possible values include: 'Service', 'Download', 'Upload', 'Configuration', 'Content'
	Category MediaJobErrorCategory `json:"category,omitempty"`
	// Retry - READ-ONLY; Indicates that it may be possible to retry the Job. If retry is unsuccessful, please contact Azure support via Azure Portal. Possible values include: 'DoNotRetry', 'MayRetry'
	Retry MediaJobRetry `json:"retry,omitempty"`
	// Details - READ-ONLY; An array of details about specific errors that led to this reported error.
	Details *[]MediaJobErrorDetail `json:"details,omitempty"`
}

// MarshalJSON is the custom marshaler for MediaJobError.
func (mje MediaJobError) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	return json.Marshal(objectMap)
}

// MediaJobErrorDetail details of JobOutput errors.
type MediaJobErrorDetail struct {
	// Code - READ-ONLY; Code describing the error detail.
	Code *string `json:"code,omitempty"`
	// Message - READ-ONLY; A human-readable representation of the error.
	Message *string `json:"message,omitempty"`
}

// MarshalJSON is the custom marshaler for MediaJobErrorDetail.
func (mjed MediaJobErrorDetail) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	return json.Marshal(objectMap)
}

// MediaJobErroredEventData job error state event data. Schema of the data property of an EventGridEvent
// for a Microsoft.Media.JobErrored event.
type MediaJobErroredEventData struct {
	// Outputs - Gets the Job outputs.
	Outputs *[]BasicMediaJobOutput `json:"outputs,omitempty"`
	// PreviousState - READ-ONLY; The previous state of the Job. Possible values include: 'Canceled', 'Canceling', 'Error', 'Finished', 'Processing', 'Queued', 'Scheduled'
	PreviousState MediaJobState `json:"previousState,omitempty"`
	// State - READ-ONLY; The new state of the Job. Possible values include: 'Canceled', 'Canceling', 'Error', 'Finished', 'Processing', 'Queued', 'Scheduled'
	State MediaJobState `json:"state,omitempty"`
	// CorrelationData - Gets the Job correlation data.
	CorrelationData map[string]*string `json:"correlationData"`
}

// MarshalJSON is the custom marshaler for MediaJobErroredEventData.
func (mjeed MediaJobErroredEventData) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	if mjeed.Outputs != nil {
		objectMap["outputs"] = mjeed.Outputs
	}
	if mjeed.CorrelationData != nil {
		objectMap["correlationData"] = mjeed.CorrelationData
	}
	return json.Marshal(objectMap)
}

// UnmarshalJSON is the custom unmarshaler for MediaJobErroredEventData struct.
func (mjeed *MediaJobErroredEventData) UnmarshalJSON(body []byte) error {
	var m map[string]*json.RawMessage
	err := json.Unmarshal(body, &m)
	if err != nil {
		return err
	}
	for k, v := range m {
		switch k {
		case "outputs":
			if v != nil {
				outputs, err := unmarshalBasicMediaJobOutputArray(*v)
				if err != nil {
					return err
				}
				mjeed.Outputs = &outputs
			}
		case "previousState":
			if v != nil {
				var previousState MediaJobState
				err = json.Unmarshal(*v, &previousState)
				if err != nil {
					return err
				}
				mjeed.PreviousState = previousState
			}
		case "state":
			if v != nil {
				var state MediaJobState
				err = json.Unmarshal(*v, &state)
				if err != nil {
					return err
				}
				mjeed.State = state
			}
		case "correlationData":
			if v != nil {
				var correlationData map[string]*string
				err = json.Unmarshal(*v, &correlationData)
				if err != nil {
					return err
				}
				mjeed.CorrelationData = correlationData
			}
		}
	}

	return nil
}

// MediaJobFinishedEventData job finished event data. Schema of the data property of an EventGridEvent for
// a Microsoft.Media.JobFinished event.
type MediaJobFinishedEventData struct {
	// Outputs - Gets the Job outputs.
	Outputs *[]BasicMediaJobOutput `json:"outputs,omitempty"`
	// PreviousState - READ-ONLY; The previous state of the Job. Possible values include: 'Canceled', 'Canceling', 'Error', 'Finished', 'Processing', 'Queued', 'Scheduled'
	PreviousState MediaJobState `json:"previousState,omitempty"`
	// State - READ-ONLY; The new state of the Job. Possible values include: 'Canceled', 'Canceling', 'Error', 'Finished', 'Processing', 'Queued', 'Scheduled'
	State MediaJobState `json:"state,omitempty"`
	// CorrelationData - Gets the Job correlation data.
	CorrelationData map[string]*string `json:"correlationData"`
}

// MarshalJSON is the custom marshaler for MediaJobFinishedEventData.
func (mjfed MediaJobFinishedEventData) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	if mjfed.Outputs != nil {
		objectMap["outputs"] = mjfed.Outputs
	}
	if mjfed.CorrelationData != nil {
		objectMap["correlationData"] = mjfed.CorrelationData
	}
	return json.Marshal(objectMap)
}

// UnmarshalJSON is the custom unmarshaler for MediaJobFinishedEventData struct.
func (mjfed *MediaJobFinishedEventData) UnmarshalJSON(body []byte) error {
	var m map[string]*json.RawMessage
	err := json.Unmarshal(body, &m)
	if err != nil {
		return err
	}
	for k, v := range m {
		switch k {
		case "outputs":
			if v != nil {
				outputs, err := unmarshalBasicMediaJobOutputArray(*v)
				if err != nil {
					return err
				}
				mjfed.Outputs = &outputs
			}
		case "previousState":
			if v != nil {
				var previousState MediaJobState
				err = json.Unmarshal(*v, &previousState)
				if err != nil {
					return err
				}
				mjfed.PreviousState = previousState
			}
		case "state":
			if v != nil {
				var state MediaJobState
				err = json.Unmarshal(*v, &state)
				if err != nil {
					return err
				}
				mjfed.State = state
			}
		case "correlationData":
			if v != nil {
				var correlationData map[string]*string
				err = json.Unmarshal(*v, &correlationData)
				if err != nil {
					return err
				}
				mjfed.CorrelationData = correlationData
			}
		}
	}

	return nil
}

// BasicMediaJobOutput the event data for a Job output.
type BasicMediaJobOutput interface {
	AsMediaJobOutputAsset() (*MediaJobOutputAsset, bool)
	AsMediaJobOutput() (*MediaJobOutput, bool)
}

// MediaJobOutput the event data for a Job output.
type MediaJobOutput struct {
	// Error - Gets the Job output error.
	Error *MediaJobError `json:"error,omitempty"`
	// Label - Gets the Job output label.
	Label *string `json:"label,omitempty"`
	// Progress - Gets the Job output progress.
	Progress *int64 `json:"progress,omitempty"`
	// State - Gets the Job output state. Possible values include: 'Canceled', 'Canceling', 'Error', 'Finished', 'Processing', 'Queued', 'Scheduled'
	State MediaJobState `json:"state,omitempty"`
	// OdataType - Possible values include: 'OdataTypeMediaJobOutput', 'OdataTypeMicrosoftMediaJobOutputAsset'
	OdataType OdataType `json:"@odata.type,omitempty"`
}

func unmarshalBasicMediaJobOutput(body []byte) (BasicMediaJobOutput, error) {
	var m map[string]interface{}
	err := json.Unmarshal(body, &m)
	if err != nil {
		return nil, err
	}

	switch m["@odata.type"] {
	case string(OdataTypeMicrosoftMediaJobOutputAsset):
		var mjoa MediaJobOutputAsset
		err := json.Unmarshal(body, &mjoa)
		return mjoa, err
	default:
		var mjo MediaJobOutput
		err := json.Unmarshal(body, &mjo)
		return mjo, err
	}
}
func unmarshalBasicMediaJobOutputArray(body []byte) ([]BasicMediaJobOutput, error) {
	var rawMessages []*json.RawMessage
	err := json.Unmarshal(body, &rawMessages)
	if err != nil {
		return nil, err
	}

	mjoArray := make([]BasicMediaJobOutput, len(rawMessages))

	for index, rawMessage := range rawMessages {
		mjo, err := unmarshalBasicMediaJobOutput(*rawMessage)
		if err != nil {
			return nil, err
		}
		mjoArray[index] = mjo
	}
	return mjoArray, nil
}

// MarshalJSON is the custom marshaler for MediaJobOutput.
func (mjo MediaJobOutput) MarshalJSON() ([]byte, error) {
	mjo.OdataType = OdataTypeMediaJobOutput
	objectMap := make(map[string]interface{})
	if mjo.Error != nil {
		objectMap["error"] = mjo.Error
	}
	if mjo.Label != nil {
		objectMap["label"] = mjo.Label
	}
	if mjo.Progress != nil {
		objectMap["progress"] = mjo.Progress
	}
	if mjo.State != "" {
		objectMap["state"] = mjo.State
	}
	if mjo.OdataType != "" {
		objectMap["@odata.type"] = mjo.OdataType
	}
	return json.Marshal(objectMap)
}

// AsMediaJobOutputAsset is the BasicMediaJobOutput implementation for MediaJobOutput.
func (mjo MediaJobOutput) AsMediaJobOutputAsset() (*MediaJobOutputAsset, bool) {
	return nil, false
}

// AsMediaJobOutput is the BasicMediaJobOutput implementation for MediaJobOutput.
func (mjo MediaJobOutput) AsMediaJobOutput() (*MediaJobOutput, bool) {
	return &mjo, true
}

// AsBasicMediaJobOutput is the BasicMediaJobOutput implementation for MediaJobOutput.
func (mjo MediaJobOutput) AsBasicMediaJobOutput() (BasicMediaJobOutput, bool) {
	return &mjo, true
}

// MediaJobOutputAsset the event data for a Job output asset.
type MediaJobOutputAsset struct {
	// AssetName - Gets the Job output asset name.
	AssetName *string `json:"assetName,omitempty"`
	// Error - Gets the Job output error.
	Error *MediaJobError `json:"error,omitempty"`
	// Label - Gets the Job output label.
	Label *string `json:"label,omitempty"`
	// Progress - Gets the Job output progress.
	Progress *int64 `json:"progress,omitempty"`
	// State - Gets the Job output state. Possible values include: 'Canceled', 'Canceling', 'Error', 'Finished', 'Processing', 'Queued', 'Scheduled'
	State MediaJobState `json:"state,omitempty"`
	// OdataType - Possible values include: 'OdataTypeMediaJobOutput', 'OdataTypeMicrosoftMediaJobOutputAsset'
	OdataType OdataType `json:"@odata.type,omitempty"`
}

// MarshalJSON is the custom marshaler for MediaJobOutputAsset.
func (mjoa MediaJobOutputAsset) MarshalJSON() ([]byte, error) {
	mjoa.OdataType = OdataTypeMicrosoftMediaJobOutputAsset
	objectMap := make(map[string]interface{})
	if mjoa.AssetName != nil {
		objectMap["assetName"] = mjoa.AssetName
	}
	if mjoa.Error != nil {
		objectMap["error"] = mjoa.Error
	}
	if mjoa.Label != nil {
		objectMap["label"] = mjoa.Label
	}
	if mjoa.Progress != nil {
		objectMap["progress"] = mjoa.Progress
	}
	if mjoa.State != "" {
		objectMap["state"] = mjoa.State
	}
	if mjoa.OdataType != "" {
		objectMap["@odata.type"] = mjoa.OdataType
	}
	return json.Marshal(objectMap)
}

// AsMediaJobOutputAsset is the BasicMediaJobOutput implementation for MediaJobOutputAsset.
func (mjoa MediaJobOutputAsset) AsMediaJobOutputAsset() (*MediaJobOutputAsset, bool) {
	return &mjoa, true
}

// AsMediaJobOutput is the BasicMediaJobOutput implementation for MediaJobOutputAsset.
func (mjoa MediaJobOutputAsset) AsMediaJobOutput() (*MediaJobOutput, bool) {
	return nil, false
}

// AsBasicMediaJobOutput is the BasicMediaJobOutput implementation for MediaJobOutputAsset.
func (mjoa MediaJobOutputAsset) AsBasicMediaJobOutput() (BasicMediaJobOutput, bool) {
	return &mjoa, true
}

// MediaJobOutputCanceledEventData job output canceled event data. Schema of the data property of an
// EventGridEvent for a Microsoft.Media.JobOutputCanceled event.
type MediaJobOutputCanceledEventData struct {
	// PreviousState - READ-ONLY; The previous state of the Job. Possible values include: 'Canceled', 'Canceling', 'Error', 'Finished', 'Processing', 'Queued', 'Scheduled'
	PreviousState MediaJobState `json:"previousState,omitempty"`
	// Output - Gets the output.
	Output BasicMediaJobOutput `json:"output,omitempty"`
	// JobCorrelationData - Gets the Job correlation data.
	JobCorrelationData map[string]*string `json:"jobCorrelationData"`
}

// MarshalJSON is the custom marshaler for MediaJobOutputCanceledEventData.
func (mjoced MediaJobOutputCanceledEventData) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	objectMap["output"] = mjoced.Output
	if mjoced.JobCorrelationData != nil {
		objectMap["jobCorrelationData"] = mjoced.JobCorrelationData
	}
	return json.Marshal(objectMap)
}

// UnmarshalJSON is the custom unmarshaler for MediaJobOutputCanceledEventData struct.
func (mjoced *MediaJobOutputCanceledEventData) UnmarshalJSON(body []byte) error {
	var m map[string]*json.RawMessage
	err := json.Unmarshal(body, &m)
	if err != nil {
		return err
	}
	for k, v := range m {
		switch k {
		case "previousState":
			if v != nil {
				var previousState MediaJobState
				err = json.Unmarshal(*v, &previousState)
				if err != nil {
					return err
				}
				mjoced.PreviousState = previousState
			}
		case "output":
			if v != nil {
				output, err := unmarshalBasicMediaJobOutput(*v)
				if err != nil {
					return err
				}
				mjoced.Output = output
			}
		case "jobCorrelationData":
			if v != nil {
				var jobCorrelationData map[string]*string
				err = json.Unmarshal(*v, &jobCorrelationData)
				if err != nil {
					return err
				}
				mjoced.JobCorrelationData = jobCorrelationData
			}
		}
	}

	return nil
}

// MediaJobOutputCancelingEventData job output canceling event data. Schema of the data property of an
// EventGridEvent for a Microsoft.Media.JobOutputCanceling event.
type MediaJobOutputCancelingEventData struct {
	// PreviousState - READ-ONLY; The previous state of the Job. Possible values include: 'Canceled', 'Canceling', 'Error', 'Finished', 'Processing', 'Queued', 'Scheduled'
	PreviousState MediaJobState `json:"previousState,omitempty"`
	// Output - Gets the output.
	Output BasicMediaJobOutput `json:"output,omitempty"`
	// JobCorrelationData - Gets the Job correlation data.
	JobCorrelationData map[string]*string `json:"jobCorrelationData"`
}

// MarshalJSON is the custom marshaler for MediaJobOutputCancelingEventData.
func (mjoced MediaJobOutputCancelingEventData) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	objectMap["output"] = mjoced.Output
	if mjoced.JobCorrelationData != nil {
		objectMap["jobCorrelationData"] = mjoced.JobCorrelationData
	}
	return json.Marshal(objectMap)
}

// UnmarshalJSON is the custom unmarshaler for MediaJobOutputCancelingEventData struct.
func (mjoced *MediaJobOutputCancelingEventData) UnmarshalJSON(body []byte) error {
	var m map[string]*json.RawMessage
	err := json.Unmarshal(body, &m)
	if err != nil {
		return err
	}
	for k, v := range m {
		switch k {
		case "previousState":
			if v != nil {
				var previousState MediaJobState
				err = json.Unmarshal(*v, &previousState)
				if err != nil {
					return err
				}
				mjoced.PreviousState = previousState
			}
		case "output":
			if v != nil {
				output, err := unmarshalBasicMediaJobOutput(*v)
				if err != nil {
					return err
				}
				mjoced.Output = output
			}
		case "jobCorrelationData":
			if v != nil {
				var jobCorrelationData map[string]*string
				err = json.Unmarshal(*v, &jobCorrelationData)
				if err != nil {
					return err
				}
				mjoced.JobCorrelationData = jobCorrelationData
			}
		}
	}

	return nil
}

// MediaJobOutputErroredEventData job output error event data. Schema of the data property of an
// EventGridEvent for a Microsoft.Media.JobOutputErrored event.
type MediaJobOutputErroredEventData struct {
	// PreviousState - READ-ONLY; The previous state of the Job. Possible values include: 'Canceled', 'Canceling', 'Error', 'Finished', 'Processing', 'Queued', 'Scheduled'
	PreviousState MediaJobState `json:"previousState,omitempty"`
	// Output - Gets the output.
	Output BasicMediaJobOutput `json:"output,omitempty"`
	// JobCorrelationData - Gets the Job correlation data.
	JobCorrelationData map[string]*string `json:"jobCorrelationData"`
}

// MarshalJSON is the custom marshaler for MediaJobOutputErroredEventData.
func (mjoeed MediaJobOutputErroredEventData) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	objectMap["output"] = mjoeed.Output
	if mjoeed.JobCorrelationData != nil {
		objectMap["jobCorrelationData"] = mjoeed.JobCorrelationData
	}
	return json.Marshal(objectMap)
}

// UnmarshalJSON is the custom unmarshaler for MediaJobOutputErroredEventData struct.
func (mjoeed *MediaJobOutputErroredEventData) UnmarshalJSON(body []byte) error {
	var m map[string]*json.RawMessage
	err := json.Unmarshal(body, &m)
	if err != nil {
		return err
	}
	for k, v := range m {
		switch k {
		case "previousState":
			if v != nil {
				var previousState MediaJobState
				err = json.Unmarshal(*v, &previousState)
				if err != nil {
					return err
				}
				mjoeed.PreviousState = previousState
			}
		case "output":
			if v != nil {
				output, err := unmarshalBasicMediaJobOutput(*v)
				if err != nil {
					return err
				}
				mjoeed.Output = output
			}
		case "jobCorrelationData":
			if v != nil {
				var jobCorrelationData map[string]*string
				err = json.Unmarshal(*v, &jobCorrelationData)
				if err != nil {
					return err
				}
				mjoeed.JobCorrelationData = jobCorrelationData
			}
		}
	}

	return nil
}

// MediaJobOutputFinishedEventData job output finished event data. Schema of the data property of an
// EventGridEvent for a Microsoft.Media.JobOutputFinished event.
type MediaJobOutputFinishedEventData struct {
	// PreviousState - READ-ONLY; The previous state of the Job. Possible values include: 'Canceled', 'Canceling', 'Error', 'Finished', 'Processing', 'Queued', 'Scheduled'
	PreviousState MediaJobState `json:"previousState,omitempty"`
	// Output - Gets the output.
	Output BasicMediaJobOutput `json:"output,omitempty"`
	// JobCorrelationData - Gets the Job correlation data.
	JobCorrelationData map[string]*string `json:"jobCorrelationData"`
}

// MarshalJSON is the custom marshaler for MediaJobOutputFinishedEventData.
func (mjofed MediaJobOutputFinishedEventData) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	objectMap["output"] = mjofed.Output
	if mjofed.JobCorrelationData != nil {
		objectMap["jobCorrelationData"] = mjofed.JobCorrelationData
	}
	return json.Marshal(objectMap)
}

// UnmarshalJSON is the custom unmarshaler for MediaJobOutputFinishedEventData struct.
func (mjofed *MediaJobOutputFinishedEventData) UnmarshalJSON(body []byte) error {
	var m map[string]*json.RawMessage
	err := json.Unmarshal(body, &m)
	if err != nil {
		return err
	}
	for k, v := range m {
		switch k {
		case "previousState":
			if v != nil {
				var previousState MediaJobState
				err = json.Unmarshal(*v, &previousState)
				if err != nil {
					return err
				}
				mjofed.PreviousState = previousState
			}
		case "output":
			if v != nil {
				output, err := unmarshalBasicMediaJobOutput(*v)
				if err != nil {
					return err
				}
				mjofed.Output = output
			}
		case "jobCorrelationData":
			if v != nil {
				var jobCorrelationData map[string]*string
				err = json.Unmarshal(*v, &jobCorrelationData)
				if err != nil {
					return err
				}
				mjofed.JobCorrelationData = jobCorrelationData
			}
		}
	}

	return nil
}

// MediaJobOutputProcessingEventData job output processing event data. Schema of the data property of an
// EventGridEvent for a Microsoft.Media.JobOutputProcessing event.
type MediaJobOutputProcessingEventData struct {
	// PreviousState - READ-ONLY; The previous state of the Job. Possible values include: 'Canceled', 'Canceling', 'Error', 'Finished', 'Processing', 'Queued', 'Scheduled'
	PreviousState MediaJobState `json:"previousState,omitempty"`
	// Output - Gets the output.
	Output BasicMediaJobOutput `json:"output,omitempty"`
	// JobCorrelationData - Gets the Job correlation data.
	JobCorrelationData map[string]*string `json:"jobCorrelationData"`
}

// MarshalJSON is the custom marshaler for MediaJobOutputProcessingEventData.
func (mjoped MediaJobOutputProcessingEventData) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	objectMap["output"] = mjoped.Output
	if mjoped.JobCorrelationData != nil {
		objectMap["jobCorrelationData"] = mjoped.JobCorrelationData
	}
	return json.Marshal(objectMap)
}

// UnmarshalJSON is the custom unmarshaler for MediaJobOutputProcessingEventData struct.
func (mjoped *MediaJobOutputProcessingEventData) UnmarshalJSON(body []byte) error {
	var m map[string]*json.RawMessage
	err := json.Unmarshal(body, &m)
	if err != nil {
		return err
	}
	for k, v := range m {
		switch k {
		case "previousState":
			if v != nil {
				var previousState MediaJobState
				err = json.Unmarshal(*v, &previousState)
				if err != nil {
					return err
				}
				mjoped.PreviousState = previousState
			}
		case "output":
			if v != nil {
				output, err := unmarshalBasicMediaJobOutput(*v)
				if err != nil {
					return err
				}
				mjoped.Output = output
			}
		case "jobCorrelationData":
			if v != nil {
				var jobCorrelationData map[string]*string
				err = json.Unmarshal(*v, &jobCorrelationData)
				if err != nil {
					return err
				}
				mjoped.JobCorrelationData = jobCorrelationData
			}
		}
	}

	return nil
}

// MediaJobOutputProgressEventData job Output Progress Event Data. Schema of the Data property of an
// EventGridEvent for a Microsoft.Media.JobOutputProgress event.
type MediaJobOutputProgressEventData struct {
	// Label - Gets the Job output label.
	Label *string `json:"label,omitempty"`
	// Progress - Gets the Job output progress.
	Progress *int64 `json:"progress,omitempty"`
	// JobCorrelationData - Gets the Job correlation data.
	JobCorrelationData map[string]*string `json:"jobCorrelationData"`
}

// MarshalJSON is the custom marshaler for MediaJobOutputProgressEventData.
func (mjoped MediaJobOutputProgressEventData) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	if mjoped.Label != nil {
		objectMap["label"] = mjoped.Label
	}
	if mjoped.Progress != nil {
		objectMap["progress"] = mjoped.Progress
	}
	if mjoped.JobCorrelationData != nil {
		objectMap["jobCorrelationData"] = mjoped.JobCorrelationData
	}
	return json.Marshal(objectMap)
}

// MediaJobOutputScheduledEventData job output scheduled event data. Schema of the data property of an
// EventGridEvent for a Microsoft.Media.JobOutputScheduled event.
type MediaJobOutputScheduledEventData struct {
	// PreviousState - READ-ONLY; The previous state of the Job. Possible values include: 'Canceled', 'Canceling', 'Error', 'Finished', 'Processing', 'Queued', 'Scheduled'
	PreviousState MediaJobState `json:"previousState,omitempty"`
	// Output - Gets the output.
	Output BasicMediaJobOutput `json:"output,omitempty"`
	// JobCorrelationData - Gets the Job correlation data.
	JobCorrelationData map[string]*string `json:"jobCorrelationData"`
}

// MarshalJSON is the custom marshaler for MediaJobOutputScheduledEventData.
func (mjosed MediaJobOutputScheduledEventData) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	objectMap["output"] = mjosed.Output
	if mjosed.JobCorrelationData != nil {
		objectMap["jobCorrelationData"] = mjosed.JobCorrelationData
	}
	return json.Marshal(objectMap)
}

// UnmarshalJSON is the custom unmarshaler for MediaJobOutputScheduledEventData struct.
func (mjosed *MediaJobOutputScheduledEventData) UnmarshalJSON(body []byte) error {
	var m map[string]*json.RawMessage
	err := json.Unmarshal(body, &m)
	if err != nil {
		return err
	}
	for k, v := range m {
		switch k {
		case "previousState":
			if v != nil {
				var previousState MediaJobState
				err = json.Unmarshal(*v, &previousState)
				if err != nil {
					return err
				}
				mjosed.PreviousState = previousState
			}
		case "output":
			if v != nil {
				output, err := unmarshalBasicMediaJobOutput(*v)
				if err != nil {
					return err
				}
				mjosed.Output = output
			}
		case "jobCorrelationData":
			if v != nil {
				var jobCorrelationData map[string]*string
				err = json.Unmarshal(*v, &jobCorrelationData)
				if err != nil {
					return err
				}
				mjosed.JobCorrelationData = jobCorrelationData
			}
		}
	}

	return nil
}

// MediaJobOutputStateChangeEventData schema of the Data property of an EventGridEvent for a
// Microsoft.Media.JobOutputStateChange event.
type MediaJobOutputStateChangeEventData struct {
	// PreviousState - READ-ONLY; The previous state of the Job. Possible values include: 'Canceled', 'Canceling', 'Error', 'Finished', 'Processing', 'Queued', 'Scheduled'
	PreviousState MediaJobState `json:"previousState,omitempty"`
	// Output - Gets the output.
	Output BasicMediaJobOutput `json:"output,omitempty"`
	// JobCorrelationData - Gets the Job correlation data.
	JobCorrelationData map[string]*string `json:"jobCorrelationData"`
}

// MarshalJSON is the custom marshaler for MediaJobOutputStateChangeEventData.
func (mjosced MediaJobOutputStateChangeEventData) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	objectMap["output"] = mjosced.Output
	if mjosced.JobCorrelationData != nil {
		objectMap["jobCorrelationData"] = mjosced.JobCorrelationData
	}
	return json.Marshal(objectMap)
}

// UnmarshalJSON is the custom unmarshaler for MediaJobOutputStateChangeEventData struct.
func (mjosced *MediaJobOutputStateChangeEventData) UnmarshalJSON(body []byte) error {
	var m map[string]*json.RawMessage
	err := json.Unmarshal(body, &m)
	if err != nil {
		return err
	}
	for k, v := range m {
		switch k {
		case "previousState":
			if v != nil {
				var previousState MediaJobState
				err = json.Unmarshal(*v, &previousState)
				if err != nil {
					return err
				}
				mjosced.PreviousState = previousState
			}
		case "output":
			if v != nil {
				output, err := unmarshalBasicMediaJobOutput(*v)
				if err != nil {
					return err
				}
				mjosced.Output = output
			}
		case "jobCorrelationData":
			if v != nil {
				var jobCorrelationData map[string]*string
				err = json.Unmarshal(*v, &jobCorrelationData)
				if err != nil {
					return err
				}
				mjosced.JobCorrelationData = jobCorrelationData
			}
		}
	}

	return nil
}

// MediaJobProcessingEventData job processing event data. Schema of the data property of an EventGridEvent
// for a Microsoft.Media.JobProcessing event.
type MediaJobProcessingEventData struct {
	// PreviousState - READ-ONLY; The previous state of the Job. Possible values include: 'Canceled', 'Canceling', 'Error', 'Finished', 'Processing', 'Queued', 'Scheduled'
	PreviousState MediaJobState `json:"previousState,omitempty"`
	// State - READ-ONLY; The new state of the Job. Possible values include: 'Canceled', 'Canceling', 'Error', 'Finished', 'Processing', 'Queued', 'Scheduled'
	State MediaJobState `json:"state,omitempty"`
	// CorrelationData - Gets the Job correlation data.
	CorrelationData map[string]*string `json:"correlationData"`
}

// MarshalJSON is the custom marshaler for MediaJobProcessingEventData.
func (mjped MediaJobProcessingEventData) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	if mjped.CorrelationData != nil {
		objectMap["correlationData"] = mjped.CorrelationData
	}
	return json.Marshal(objectMap)
}

// MediaJobScheduledEventData job scheduled event data. Schema of the data property of an EventGridEvent
// for a Microsoft.Media.JobScheduled event.
type MediaJobScheduledEventData struct {
	// PreviousState - READ-ONLY; The previous state of the Job. Possible values include: 'Canceled', 'Canceling', 'Error', 'Finished', 'Processing', 'Queued', 'Scheduled'
	PreviousState MediaJobState `json:"previousState,omitempty"`
	// State - READ-ONLY; The new state of the Job. Possible values include: 'Canceled', 'Canceling', 'Error', 'Finished', 'Processing', 'Queued', 'Scheduled'
	State MediaJobState `json:"state,omitempty"`
	// CorrelationData - Gets the Job correlation data.
	CorrelationData map[string]*string `json:"correlationData"`
}

// MarshalJSON is the custom marshaler for MediaJobScheduledEventData.
func (mjsed MediaJobScheduledEventData) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	if mjsed.CorrelationData != nil {
		objectMap["correlationData"] = mjsed.CorrelationData
	}
	return json.Marshal(objectMap)
}

// MediaJobStateChangeEventData schema of the Data property of an EventGridEvent for a
// Microsoft.Media.JobStateChange event.
type MediaJobStateChangeEventData struct {
	// PreviousState - READ-ONLY; The previous state of the Job. Possible values include: 'Canceled', 'Canceling', 'Error', 'Finished', 'Processing', 'Queued', 'Scheduled'
	PreviousState MediaJobState `json:"previousState,omitempty"`
	// State - READ-ONLY; The new state of the Job. Possible values include: 'Canceled', 'Canceling', 'Error', 'Finished', 'Processing', 'Queued', 'Scheduled'
	State MediaJobState `json:"state,omitempty"`
	// CorrelationData - Gets the Job correlation data.
	CorrelationData map[string]*string `json:"correlationData"`
}

// MarshalJSON is the custom marshaler for MediaJobStateChangeEventData.
func (mjsced MediaJobStateChangeEventData) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	if mjsced.CorrelationData != nil {
		objectMap["correlationData"] = mjsced.CorrelationData
	}
	return json.Marshal(objectMap)
}

// MediaLiveEventConnectionRejectedEventData encoder connection rejected event data. Schema of the data
// property of an EventGridEvent for a Microsoft.Media.LiveEventConnectionRejected event.
type MediaLiveEventConnectionRejectedEventData struct {
	// IngestURL - READ-ONLY; Gets the ingest URL provided by the live event.
	IngestURL *string `json:"ingestUrl,omitempty"`
	// StreamID - READ-ONLY; Gets the stream Id.
	StreamID *string `json:"streamId,omitempty"`
	// EncoderIP - READ-ONLY; Gets the remote IP.
	EncoderIP *string `json:"encoderIp,omitempty"`
	// EncoderPort - READ-ONLY; Gets the remote port.
	EncoderPort *string `json:"encoderPort,omitempty"`
	// ResultCode - READ-ONLY; Gets the result code.
	ResultCode *string `json:"resultCode,omitempty"`
}

// MarshalJSON is the custom marshaler for MediaLiveEventConnectionRejectedEventData.
func (mlecred MediaLiveEventConnectionRejectedEventData) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	return json.Marshal(objectMap)
}

// MediaLiveEventEncoderConnectedEventData encoder connect event data. Schema of the data property of an
// EventGridEvent for a Microsoft.Media.LiveEventEncoderConnected event.
type MediaLiveEventEncoderConnectedEventData struct {
	// IngestURL - READ-ONLY; Gets the ingest URL provided by the live event.
	IngestURL *string `json:"ingestUrl,omitempty"`
	// StreamID - READ-ONLY; Gets the stream Id.
	StreamID *string `json:"streamId,omitempty"`
	// EncoderIP - READ-ONLY; Gets the remote IP.
	EncoderIP *string `json:"encoderIp,omitempty"`
	// EncoderPort - READ-ONLY; Gets the remote port.
	EncoderPort *string `json:"encoderPort,omitempty"`
}

// MarshalJSON is the custom marshaler for MediaLiveEventEncoderConnectedEventData.
func (mleeced MediaLiveEventEncoderConnectedEventData) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	return json.Marshal(objectMap)
}

// MediaLiveEventEncoderDisconnectedEventData encoder disconnected event data. Schema of the Data property
// of an EventGridEvent for a Microsoft.Media.LiveEventEncoderDisconnected event.
type MediaLiveEventEncoderDisconnectedEventData struct {
	// IngestURL - READ-ONLY; Gets the ingest URL provided by the live event.
	IngestURL *string `json:"ingestUrl,omitempty"`
	// StreamID - READ-ONLY; Gets the stream Id.
	StreamID *string `json:"streamId,omitempty"`
	// EncoderIP - READ-ONLY; Gets the remote IP.
	EncoderIP *string `json:"encoderIp,omitempty"`
	// EncoderPort - READ-ONLY; Gets the remote port.
	EncoderPort *string `json:"encoderPort,omitempty"`
	// ResultCode - READ-ONLY; Gets the result code.
	ResultCode *string `json:"resultCode,omitempty"`
}

// MarshalJSON is the custom marshaler for MediaLiveEventEncoderDisconnectedEventData.
func (mleeded MediaLiveEventEncoderDisconnectedEventData) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	return json.Marshal(objectMap)
}

// MediaLiveEventIncomingDataChunkDroppedEventData ingest fragment dropped event data. Schema of the data
// property of an EventGridEvent for a Microsoft.Media.LiveEventIncomingDataChunkDropped event.
type MediaLiveEventIncomingDataChunkDroppedEventData struct {
	// Timestamp - READ-ONLY; Gets the timestamp of the data chunk dropped.
	Timestamp *string `json:"timestamp,omitempty"`
	// TrackType - READ-ONLY; Gets the type of the track (Audio / Video).
	TrackType *string `json:"trackType,omitempty"`
	// Bitrate - READ-ONLY; Gets the bitrate of the track.
	Bitrate *int64 `json:"bitrate,omitempty"`
	// Timescale - READ-ONLY; Gets the timescale of the Timestamp.
	Timescale *string `json:"timescale,omitempty"`
	// ResultCode - READ-ONLY; Gets the result code for fragment drop operation.
	ResultCode *string `json:"resultCode,omitempty"`
	// TrackName - READ-ONLY; Gets the name of the track for which fragment is dropped.
	TrackName *string `json:"trackName,omitempty"`
}

// MarshalJSON is the custom marshaler for MediaLiveEventIncomingDataChunkDroppedEventData.
func (mleidcded MediaLiveEventIncomingDataChunkDroppedEventData) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	return json.Marshal(objectMap)
}

// MediaLiveEventIncomingStreamReceivedEventData encoder connect event data. Schema of the data property of
// an EventGridEvent for a Microsoft.Media.LiveEventIncomingStreamReceived event.
type MediaLiveEventIncomingStreamReceivedEventData struct {
	// IngestURL - READ-ONLY; Gets the ingest URL provided by the live event.
	IngestURL *string `json:"ingestUrl,omitempty"`
	// TrackType - READ-ONLY; Gets the type of the track (Audio / Video).
	TrackType *string `json:"trackType,omitempty"`
	// TrackName - READ-ONLY; Gets the track name.
	TrackName *string `json:"trackName,omitempty"`
	// Bitrate - READ-ONLY; Gets the bitrate of the track.
	Bitrate *int64 `json:"bitrate,omitempty"`
	// EncoderIP - READ-ONLY; Gets the remote IP.
	EncoderIP *string `json:"encoderIp,omitempty"`
	// EncoderPort - READ-ONLY; Gets the remote port.
	EncoderPort *string `json:"encoderPort,omitempty"`
	// Timestamp - READ-ONLY; Gets the first timestamp of the data chunk received.
	Timestamp *string `json:"timestamp,omitempty"`
	// Duration - READ-ONLY; Gets the duration of the first data chunk.
	Duration *string `json:"duration,omitempty"`
	// Timescale - READ-ONLY; Gets the timescale in which timestamp is represented.
	Timescale *string `json:"timescale,omitempty"`
}

// MarshalJSON is the custom marshaler for MediaLiveEventIncomingStreamReceivedEventData.
func (mleisred MediaLiveEventIncomingStreamReceivedEventData) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	return json.Marshal(objectMap)
}

// MediaLiveEventIncomingStreamsOutOfSyncEventData incoming streams out of sync event data. Schema of the
// data property of an EventGridEvent for a Microsoft.Media.LiveEventIncomingStreamsOutOfSync event.
type MediaLiveEventIncomingStreamsOutOfSyncEventData struct {
	// MinLastTimestamp - READ-ONLY; Gets the minimum last timestamp received.
	MinLastTimestamp *string `json:"minLastTimestamp,omitempty"`
	// TypeOfStreamWithMinLastTimestamp - READ-ONLY; Gets the type of stream with minimum last timestamp.
	TypeOfStreamWithMinLastTimestamp *string `json:"typeOfStreamWithMinLastTimestamp,omitempty"`
	// MaxLastTimestamp - READ-ONLY; Gets the maximum timestamp among all the tracks (audio or video).
	MaxLastTimestamp *string `json:"maxLastTimestamp,omitempty"`
	// TypeOfStreamWithMaxLastTimestamp - READ-ONLY; Gets the type of stream with maximum last timestamp.
	TypeOfStreamWithMaxLastTimestamp *string `json:"typeOfStreamWithMaxLastTimestamp,omitempty"`
	// TimescaleOfMinLastTimestamp - READ-ONLY; Gets the timescale in which "MinLastTimestamp" is represented.
	TimescaleOfMinLastTimestamp *string `json:"timescaleOfMinLastTimestamp,omitempty"`
	// TimescaleOfMaxLastTimestamp - READ-ONLY; Gets the timescale in which "MaxLastTimestamp" is represented.
	TimescaleOfMaxLastTimestamp *string `json:"timescaleOfMaxLastTimestamp,omitempty"`
}

// MarshalJSON is the custom marshaler for MediaLiveEventIncomingStreamsOutOfSyncEventData.
func (mleisoosed MediaLiveEventIncomingStreamsOutOfSyncEventData) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	return json.Marshal(objectMap)
}

// MediaLiveEventIncomingVideoStreamsOutOfSyncEventData incoming video stream out of synch event data.
// Schema of the data property of an EventGridEvent for a
// Microsoft.Media.LiveEventIncomingVideoStreamsOutOfSync event.
type MediaLiveEventIncomingVideoStreamsOutOfSyncEventData struct {
	// FirstTimestamp - READ-ONLY; Gets the first timestamp received for one of the quality levels.
	FirstTimestamp *string `json:"firstTimestamp,omitempty"`
	// FirstDuration - READ-ONLY; Gets the duration of the data chunk with first timestamp.
	FirstDuration *string `json:"firstDuration,omitempty"`
	// SecondTimestamp - READ-ONLY; Gets the timestamp received for some other quality levels.
	SecondTimestamp *string `json:"secondTimestamp,omitempty"`
	// SecondDuration - READ-ONLY; Gets the duration of the data chunk with second timestamp.
	SecondDuration *string `json:"secondDuration,omitempty"`
	// Timescale - READ-ONLY; Gets the timescale in which both the timestamps and durations are represented.
	Timescale *string `json:"timescale,omitempty"`
}

// MarshalJSON is the custom marshaler for MediaLiveEventIncomingVideoStreamsOutOfSyncEventData.
func (mleivsoosed MediaLiveEventIncomingVideoStreamsOutOfSyncEventData) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	return json.Marshal(objectMap)
}

// MediaLiveEventIngestHeartbeatEventData ingest fragment dropped event data. Schema of the data property
// of an EventGridEvent for a Microsoft.Media.LiveEventIngestHeartbeat event.
type MediaLiveEventIngestHeartbeatEventData struct {
	// TrackType - READ-ONLY; Gets the type of the track (Audio / Video).
	TrackType *string `json:"trackType,omitempty"`
	// TrackName - READ-ONLY; Gets the track name.
	TrackName *string `json:"trackName,omitempty"`
	// Bitrate - READ-ONLY; Gets the bitrate of the track.
	Bitrate *int64 `json:"bitrate,omitempty"`
	// IncomingBitrate - READ-ONLY; Gets the incoming bitrate.
	IncomingBitrate *int64 `json:"incomingBitrate,omitempty"`
	// LastTimestamp - READ-ONLY; Gets the last timestamp.
	LastTimestamp *string `json:"lastTimestamp,omitempty"`
	// Timescale - READ-ONLY; Gets the timescale of the last timestamp.
	Timescale *string `json:"timescale,omitempty"`
	// OverlapCount - READ-ONLY; Gets the fragment Overlap count.
	OverlapCount *int64 `json:"overlapCount,omitempty"`
	// DiscontinuityCount - READ-ONLY; Gets the fragment Discontinuity count.
	DiscontinuityCount *int64 `json:"discontinuityCount,omitempty"`
	// NonincreasingCount - READ-ONLY; Gets Non increasing count.
	NonincreasingCount *int64 `json:"nonincreasingCount,omitempty"`
	// UnexpectedBitrate - READ-ONLY; Gets a value indicating whether unexpected bitrate is present or not.
	UnexpectedBitrate *bool `json:"unexpectedBitrate,omitempty"`
	// State - READ-ONLY; Gets the state of the live event.
	State *string `json:"state,omitempty"`
	// Healthy - READ-ONLY; Gets a value indicating whether preview is healthy or not.
	Healthy *bool `json:"healthy,omitempty"`
}

// MarshalJSON is the custom marshaler for MediaLiveEventIngestHeartbeatEventData.
func (mleihed MediaLiveEventIngestHeartbeatEventData) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	return json.Marshal(objectMap)
}

// MediaLiveEventTrackDiscontinuityDetectedEventData ingest track discontinuity detected event data. Schema
// of the data property of an EventGridEvent for a Microsoft.Media.LiveEventTrackDiscontinuityDetected
// event.
type MediaLiveEventTrackDiscontinuityDetectedEventData struct {
	// TrackType - READ-ONLY; Gets the type of the track (Audio / Video).
	TrackType *string `json:"trackType,omitempty"`
	// TrackName - READ-ONLY; Gets the track name.
	TrackName *string `json:"trackName,omitempty"`
	// Bitrate - READ-ONLY; Gets the bitrate.
	Bitrate *int64 `json:"bitrate,omitempty"`
	// PreviousTimestamp - READ-ONLY; Gets the timestamp of the previous fragment.
	PreviousTimestamp *string `json:"previousTimestamp,omitempty"`
	// NewTimestamp - READ-ONLY; Gets the timestamp of the current fragment.
	NewTimestamp *string `json:"newTimestamp,omitempty"`
	// Timescale - READ-ONLY; Gets the timescale in which both timestamps and discontinuity gap are represented.
	Timescale *string `json:"timescale,omitempty"`
	// DiscontinuityGap - READ-ONLY; Gets the discontinuity gap between PreviousTimestamp and NewTimestamp.
	DiscontinuityGap *string `json:"discontinuityGap,omitempty"`
}

// MarshalJSON is the custom marshaler for MediaLiveEventTrackDiscontinuityDetectedEventData.
func (mletdded MediaLiveEventTrackDiscontinuityDetectedEventData) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	return json.Marshal(objectMap)
}

// MicrosoftTeamsUserIdentifierModel a Microsoft Teams user.
type MicrosoftTeamsUserIdentifierModel struct {
	// UserID - The Id of the Microsoft Teams user. If not anonymous, this is the AAD object Id of the user.
	UserID *string `json:"userId,omitempty"`
	// IsAnonymous - True if the Microsoft Teams user is anonymous. By default false if missing.
	IsAnonymous *bool `json:"isAnonymous,omitempty"`
	// Cloud - The cloud that the Microsoft Teams user belongs to. By default 'public' if missing. Possible values include: 'Public', 'Dod', 'Gcch'
	Cloud CommunicationCloudEnvironmentModel `json:"cloud,omitempty"`
}

// PhoneNumberIdentifierModel a phone number.
type PhoneNumberIdentifierModel struct {
	// Value - The phone number in E.164 format.
	Value *string `json:"value,omitempty"`
}

// PolicyInsightsPolicyStateChangedEventData schema of the Data property of an EventGridEvent for a
// Microsoft.PolicyInsights.PolicyStateChanged event.
type PolicyInsightsPolicyStateChangedEventData struct {
	// Timestamp - The time that the resource was scanned by Azure Policy in the Universal ISO 8601 DateTime format yyyy-MM-ddTHH:mm:ss.fffffffZ.
	Timestamp *date.Time `json:"timestamp,omitempty"`
	// PolicyAssignmentID - The resource ID of the policy assignment.
	PolicyAssignmentID *string `json:"policyAssignmentId,omitempty"`
	// PolicyDefinitionID - The resource ID of the policy definition.
	PolicyDefinitionID *string `json:"policyDefinitionId,omitempty"`
	// PolicyDefinitionReferenceID - The reference ID for the policy definition inside the initiative definition, if the policy assignment is for an initiative. May be empty.
	PolicyDefinitionReferenceID *string `json:"policyDefinitionReferenceId,omitempty"`
	// ComplianceState - The compliance state of the resource with respect to the policy assignment.
	ComplianceState *string `json:"complianceState,omitempty"`
	// SubscriptionID - The subscription ID of the resource.
	SubscriptionID *string `json:"subscriptionId,omitempty"`
	// ComplianceReasonCode - The compliance reason code. May be empty.
	ComplianceReasonCode *string `json:"complianceReasonCode,omitempty"`
}

// PolicyInsightsPolicyStateCreatedEventData schema of the Data property of an EventGridEvent for a
// Microsoft.PolicyInsights.PolicyStateCreated event.
type PolicyInsightsPolicyStateCreatedEventData struct {
	// Timestamp - The time that the resource was scanned by Azure Policy in the Universal ISO 8601 DateTime format yyyy-MM-ddTHH:mm:ss.fffffffZ.
	Timestamp *date.Time `json:"timestamp,omitempty"`
	// PolicyAssignmentID - The resource ID of the policy assignment.
	PolicyAssignmentID *string `json:"policyAssignmentId,omitempty"`
	// PolicyDefinitionID - The resource ID of the policy definition.
	PolicyDefinitionID *string `json:"policyDefinitionId,omitempty"`
	// PolicyDefinitionReferenceID - The reference ID for the policy definition inside the initiative definition, if the policy assignment is for an initiative. May be empty.
	PolicyDefinitionReferenceID *string `json:"policyDefinitionReferenceId,omitempty"`
	// ComplianceState - The compliance state of the resource with respect to the policy assignment.
	ComplianceState *string `json:"complianceState,omitempty"`
	// SubscriptionID - The subscription ID of the resource.
	SubscriptionID *string `json:"subscriptionId,omitempty"`
	// ComplianceReasonCode - The compliance reason code. May be empty.
	ComplianceReasonCode *string `json:"complianceReasonCode,omitempty"`
}

// PolicyInsightsPolicyStateDeletedEventData schema of the Data property of an EventGridEvent for a
// Microsoft.PolicyInsights.PolicyStateDeleted event.
type PolicyInsightsPolicyStateDeletedEventData struct {
	// Timestamp - The time that the resource was scanned by Azure Policy in the Universal ISO 8601 DateTime format yyyy-MM-ddTHH:mm:ss.fffffffZ.
	Timestamp *date.Time `json:"timestamp,omitempty"`
	// PolicyAssignmentID - The resource ID of the policy assignment.
	PolicyAssignmentID *string `json:"policyAssignmentId,omitempty"`
	// PolicyDefinitionID - The resource ID of the policy definition.
	PolicyDefinitionID *string `json:"policyDefinitionId,omitempty"`
	// PolicyDefinitionReferenceID - The reference ID for the policy definition inside the initiative definition, if the policy assignment is for an initiative. May be empty.
	PolicyDefinitionReferenceID *string `json:"policyDefinitionReferenceId,omitempty"`
	// ComplianceState - The compliance state of the resource with respect to the policy assignment.
	ComplianceState *string `json:"complianceState,omitempty"`
	// SubscriptionID - The subscription ID of the resource.
	SubscriptionID *string `json:"subscriptionId,omitempty"`
	// ComplianceReasonCode - The compliance reason code. May be empty.
	ComplianceReasonCode *string `json:"complianceReasonCode,omitempty"`
}

// RedisExportRDBCompletedEventData schema of the Data property of an EventGridEvent for a
// Microsoft.Cache.ExportRDBCompleted event.
type RedisExportRDBCompletedEventData struct {
	// Timestamp - The time at which the event occurred.
	Timestamp *date.Time `json:"timestamp,omitempty"`
	// Name - The name of this event.
	Name *string `json:"name,omitempty"`
	// Status - The status of this event. Failed or  succeeded
	Status *string `json:"status,omitempty"`
}

// RedisImportRDBCompletedEventData schema of the Data property of an EventGridEvent for a
// Microsoft.Cache.ImportRDBCompleted event.
type RedisImportRDBCompletedEventData struct {
	// Timestamp - The time at which the event occurred.
	Timestamp *date.Time `json:"timestamp,omitempty"`
	// Name - The name of this event.
	Name *string `json:"name,omitempty"`
	// Status - The status of this event. Failed or  succeeded
	Status *string `json:"status,omitempty"`
}

// RedisPatchingCompletedEventData schema of the Data property of an EventGridEvent for a
// Microsoft.Cache.PatchingCompleted event.
type RedisPatchingCompletedEventData struct {
	// Timestamp - The time at which the event occurred.
	Timestamp *date.Time `json:"timestamp,omitempty"`
	// Name - The name of this event.
	Name *string `json:"name,omitempty"`
	// Status - The status of this event. Failed or  succeeded
	Status *string `json:"status,omitempty"`
}

// RedisScalingCompletedEventData schema of the Data property of an EventGridEvent for a
// Microsoft.Cache.ScalingCompleted event.
type RedisScalingCompletedEventData struct {
	// Timestamp - The time at which the event occurred.
	Timestamp *date.Time `json:"timestamp,omitempty"`
	// Name - The name of this event.
	Name *string `json:"name,omitempty"`
	// Status - The status of this event. Failed or  succeeded
	Status *string `json:"status,omitempty"`
}

// ResourceActionCancelData schema of the Data property of an EventGridEvent for a
// Microsoft.Resources.ResourceActionCancel event. This is raised when a resource action operation is
// canceled.
type ResourceActionCancelData struct {
	// TenantID - The tenant ID of the resource.
	TenantID *string `json:"tenantId,omitempty"`
	// SubscriptionID - The subscription ID of the resource.
	SubscriptionID *string `json:"subscriptionId,omitempty"`
	// ResourceGroup - The resource group of the resource.
	ResourceGroup *string `json:"resourceGroup,omitempty"`
	// ResourceProvider - The resource provider performing the operation.
	ResourceProvider *string `json:"resourceProvider,omitempty"`
	// ResourceURI - The URI of the resource in the operation.
	ResourceURI *string `json:"resourceUri,omitempty"`
	// OperationName - The operation that was performed.
	OperationName *string `json:"operationName,omitempty"`
	// Status - The status of the operation.
	Status *string `json:"status,omitempty"`
	// Authorization - The requested authorization for the operation.
	Authorization *string `json:"authorization,omitempty"`
	// Claims - The properties of the claims.
	Claims *string `json:"claims,omitempty"`
	// CorrelationID - An operation ID used for troubleshooting.
	CorrelationID *string `json:"correlationId,omitempty"`
	// HTTPRequest - The details of the operation.
	HTTPRequest *string `json:"httpRequest,omitempty"`
}

// ResourceActionFailureData schema of the Data property of an EventGridEvent for a
// Microsoft.Resources.ResourceActionFailure event. This is raised when a resource action operation fails.
type ResourceActionFailureData struct {
	// TenantID - The tenant ID of the resource.
	TenantID *string `json:"tenantId,omitempty"`
	// SubscriptionID - The subscription ID of the resource.
	SubscriptionID *string `json:"subscriptionId,omitempty"`
	// ResourceGroup - The resource group of the resource.
	ResourceGroup *string `json:"resourceGroup,omitempty"`
	// ResourceProvider - The resource provider performing the operation.
	ResourceProvider *string `json:"resourceProvider,omitempty"`
	// ResourceURI - The URI of the resource in the operation.
	ResourceURI *string `json:"resourceUri,omitempty"`
	// OperationName - The operation that was performed.
	OperationName *string `json:"operationName,omitempty"`
	// Status - The status of the operation.
	Status *string `json:"status,omitempty"`
	// Authorization - The requested authorization for the operation.
	Authorization *string `json:"authorization,omitempty"`
	// Claims - The properties of the claims.
	Claims *string `json:"claims,omitempty"`
	// CorrelationID - An operation ID used for troubleshooting.
	CorrelationID *string `json:"correlationId,omitempty"`
	// HTTPRequest - The details of the operation.
	HTTPRequest *string `json:"httpRequest,omitempty"`
}

// ResourceActionSuccessData schema of the Data property of an EventGridEvent for a
// Microsoft.Resources.ResourceActionSuccess event. This is raised when a resource action operation
// succeeds.
type ResourceActionSuccessData struct {
	// TenantID - The tenant ID of the resource.
	TenantID *string `json:"tenantId,omitempty"`
	// SubscriptionID - The subscription ID of the resource.
	SubscriptionID *string `json:"subscriptionId,omitempty"`
	// ResourceGroup - The resource group of the resource.
	ResourceGroup *string `json:"resourceGroup,omitempty"`
	// ResourceProvider - The resource provider performing the operation.
	ResourceProvider *string `json:"resourceProvider,omitempty"`
	// ResourceURI - The URI of the resource in the operation.
	ResourceURI *string `json:"resourceUri,omitempty"`
	// OperationName - The operation that was performed.
	OperationName *string `json:"operationName,omitempty"`
	// Status - The status of the operation.
	Status *string `json:"status,omitempty"`
	// Authorization - The requested authorization for the operation.
	Authorization *string `json:"authorization,omitempty"`
	// Claims - The properties of the claims.
	Claims *string `json:"claims,omitempty"`
	// CorrelationID - An operation ID used for troubleshooting.
	CorrelationID *string `json:"correlationId,omitempty"`
	// HTTPRequest - The details of the operation.
	HTTPRequest *string `json:"httpRequest,omitempty"`
}

// ResourceDeleteCancelData schema of the Data property of an EventGridEvent for a
// Microsoft.Resources.ResourceDeleteCancel event. This is raised when a resource delete operation is
// canceled.
type ResourceDeleteCancelData struct {
	// TenantID - The tenant ID of the resource.
	TenantID *string `json:"tenantId,omitempty"`
	// SubscriptionID - The subscription ID of the resource.
	SubscriptionID *string `json:"subscriptionId,omitempty"`
	// ResourceGroup - The resource group of the resource.
	ResourceGroup *string `json:"resourceGroup,omitempty"`
	// ResourceProvider - The resource provider performing the operation.
	ResourceProvider *string `json:"resourceProvider,omitempty"`
	// ResourceURI - The URI of the resource in the operation.
	ResourceURI *string `json:"resourceUri,omitempty"`
	// OperationName - The operation that was performed.
	OperationName *string `json:"operationName,omitempty"`
	// Status - The status of the operation.
	Status *string `json:"status,omitempty"`
	// Authorization - The requested authorization for the operation.
	Authorization *string `json:"authorization,omitempty"`
	// Claims - The properties of the claims.
	Claims *string `json:"claims,omitempty"`
	// CorrelationID - An operation ID used for troubleshooting.
	CorrelationID *string `json:"correlationId,omitempty"`
	// HTTPRequest - The details of the operation.
	HTTPRequest *string `json:"httpRequest,omitempty"`
}

// ResourceDeleteFailureData schema of the Data property of an EventGridEvent for a
// Microsoft.Resources.ResourceDeleteFailure event. This is raised when a resource delete operation fails.
type ResourceDeleteFailureData struct {
	// TenantID - The tenant ID of the resource.
	TenantID *string `json:"tenantId,omitempty"`
	// SubscriptionID - The subscription ID of the resource.
	SubscriptionID *string `json:"subscriptionId,omitempty"`
	// ResourceGroup - The resource group of the resource.
	ResourceGroup *string `json:"resourceGroup,omitempty"`
	// ResourceProvider - The resource provider performing the operation.
	ResourceProvider *string `json:"resourceProvider,omitempty"`
	// ResourceURI - The URI of the resource in the operation.
	ResourceURI *string `json:"resourceUri,omitempty"`
	// OperationName - The operation that was performed.
	OperationName *string `json:"operationName,omitempty"`
	// Status - The status of the operation.
	Status *string `json:"status,omitempty"`
	// Authorization - The requested authorization for the operation.
	Authorization *string `json:"authorization,omitempty"`
	// Claims - The properties of the claims.
	Claims *string `json:"claims,omitempty"`
	// CorrelationID - An operation ID used for troubleshooting.
	CorrelationID *string `json:"correlationId,omitempty"`
	// HTTPRequest - The details of the operation.
	HTTPRequest *string `json:"httpRequest,omitempty"`
}

// ResourceDeleteSuccessData schema of the Data property of an EventGridEvent for a
// Microsoft.Resources.ResourceDeleteSuccess event. This is raised when a resource delete operation
// succeeds.
type ResourceDeleteSuccessData struct {
	// TenantID - The tenant ID of the resource.
	TenantID *string `json:"tenantId,omitempty"`
	// SubscriptionID - The subscription ID of the resource.
	SubscriptionID *string `json:"subscriptionId,omitempty"`
	// ResourceGroup - The resource group of the resource.
	ResourceGroup *string `json:"resourceGroup,omitempty"`
	// ResourceProvider - The resource provider performing the operation.
	ResourceProvider *string `json:"resourceProvider,omitempty"`
	// ResourceURI - The URI of the resource in the operation.
	ResourceURI *string `json:"resourceUri,omitempty"`
	// OperationName - The operation that was performed.
	OperationName *string `json:"operationName,omitempty"`
	// Status - The status of the operation.
	Status *string `json:"status,omitempty"`
	// Authorization - The requested authorization for the operation.
	Authorization *string `json:"authorization,omitempty"`
	// Claims - The properties of the claims.
	Claims *string `json:"claims,omitempty"`
	// CorrelationID - An operation ID used for troubleshooting.
	CorrelationID *string `json:"correlationId,omitempty"`
	// HTTPRequest - The details of the operation.
	HTTPRequest *string `json:"httpRequest,omitempty"`
}

// ResourceWriteCancelData schema of the Data property of an EventGridEvent for a
// Microsoft.Resources.ResourceWriteCancel event. This is raised when a resource create or update operation
// is canceled.
type ResourceWriteCancelData struct {
	// TenantID - The tenant ID of the resource.
	TenantID *string `json:"tenantId,omitempty"`
	// SubscriptionID - The subscription ID of the resource.
	SubscriptionID *string `json:"subscriptionId,omitempty"`
	// ResourceGroup - The resource group of the resource.
	ResourceGroup *string `json:"resourceGroup,omitempty"`
	// ResourceProvider - The resource provider performing the operation.
	ResourceProvider *string `json:"resourceProvider,omitempty"`
	// ResourceURI - The URI of the resource in the operation.
	ResourceURI *string `json:"resourceUri,omitempty"`
	// OperationName - The operation that was performed.
	OperationName *string `json:"operationName,omitempty"`
	// Status - The status of the operation.
	Status *string `json:"status,omitempty"`
	// Authorization - The requested authorization for the operation.
	Authorization *string `json:"authorization,omitempty"`
	// Claims - The properties of the claims.
	Claims *string `json:"claims,omitempty"`
	// CorrelationID - An operation ID used for troubleshooting.
	CorrelationID *string `json:"correlationId,omitempty"`
	// HTTPRequest - The details of the operation.
	HTTPRequest *string `json:"httpRequest,omitempty"`
}

// ResourceWriteFailureData schema of the Data property of an EventGridEvent for a
// Microsoft.Resources.ResourceWriteFailure event. This is raised when a resource create or update
// operation fails.
type ResourceWriteFailureData struct {
	// TenantID - The tenant ID of the resource.
	TenantID *string `json:"tenantId,omitempty"`
	// SubscriptionID - The subscription ID of the resource.
	SubscriptionID *string `json:"subscriptionId,omitempty"`
	// ResourceGroup - The resource group of the resource.
	ResourceGroup *string `json:"resourceGroup,omitempty"`
	// ResourceProvider - The resource provider performing the operation.
	ResourceProvider *string `json:"resourceProvider,omitempty"`
	// ResourceURI - The URI of the resource in the operation.
	ResourceURI *string `json:"resourceUri,omitempty"`
	// OperationName - The operation that was performed.
	OperationName *string `json:"operationName,omitempty"`
	// Status - The status of the operation.
	Status *string `json:"status,omitempty"`
	// Authorization - The requested authorization for the operation.
	Authorization *string `json:"authorization,omitempty"`
	// Claims - The properties of the claims.
	Claims *string `json:"claims,omitempty"`
	// CorrelationID - An operation ID used for troubleshooting.
	CorrelationID *string `json:"correlationId,omitempty"`
	// HTTPRequest - The details of the operation.
	HTTPRequest *string `json:"httpRequest,omitempty"`
}

// ResourceWriteSuccessData schema of the Data property of an EventGridEvent for a
// Microsoft.Resources.ResourceWriteSuccess event. This is raised when a resource create or update
// operation succeeds.
type ResourceWriteSuccessData struct {
	// TenantID - The tenant ID of the resource.
	TenantID *string `json:"tenantId,omitempty"`
	// SubscriptionID - The subscription ID of the resource.
	SubscriptionID *string `json:"subscriptionId,omitempty"`
	// ResourceGroup - The resource group of the resource.
	ResourceGroup *string `json:"resourceGroup,omitempty"`
	// ResourceProvider - The resource provider performing the operation.
	ResourceProvider *string `json:"resourceProvider,omitempty"`
	// ResourceURI - The URI of the resource in the operation.
	ResourceURI *string `json:"resourceUri,omitempty"`
	// OperationName - The operation that was performed.
	OperationName *string `json:"operationName,omitempty"`
	// Status - The status of the operation.
	Status *string `json:"status,omitempty"`
	// Authorization - The requested authorization for the operation.
	Authorization *string `json:"authorization,omitempty"`
	// Claims - The properties of the claims.
	Claims *string `json:"claims,omitempty"`
	// CorrelationID - An operation ID used for troubleshooting.
	CorrelationID *string `json:"correlationId,omitempty"`
	// HTTPRequest - The details of the operation.
	HTTPRequest *string `json:"httpRequest,omitempty"`
}

// ServiceBusActiveMessagesAvailablePeriodicNotificationsEventData schema of the Data property of an
// EventGridEvent for a Microsoft.ServiceBus.ActiveMessagesAvailablePeriodicNotifications event.
type ServiceBusActiveMessagesAvailablePeriodicNotificationsEventData struct {
	// NamespaceName - The namespace name of the Microsoft.ServiceBus resource.
	NamespaceName *string `json:"namespaceName,omitempty"`
	// RequestURI - The endpoint of the Microsoft.ServiceBus resource.
	RequestURI *string `json:"requestUri,omitempty"`
	// EntityType - The entity type of the Microsoft.ServiceBus resource. Could be one of 'queue' or 'subscriber'.
	EntityType *string `json:"entityType,omitempty"`
	// QueueName - The name of the Microsoft.ServiceBus queue. If the entity type is of type 'subscriber', then this value will be null.
	QueueName *string `json:"queueName,omitempty"`
	// TopicName - The name of the Microsoft.ServiceBus topic. If the entity type is of type 'queue', then this value will be null.
	TopicName *string `json:"topicName,omitempty"`
	// SubscriptionName - The name of the Microsoft.ServiceBus topic's subscription. If the entity type is of type 'queue', then this value will be null.
	SubscriptionName *string `json:"subscriptionName,omitempty"`
}

// ServiceBusActiveMessagesAvailableWithNoListenersEventData schema of the Data property of an
// EventGridEvent for a Microsoft.ServiceBus.ActiveMessagesAvailableWithNoListeners event.
type ServiceBusActiveMessagesAvailableWithNoListenersEventData struct {
	// NamespaceName - The namespace name of the Microsoft.ServiceBus resource.
	NamespaceName *string `json:"namespaceName,omitempty"`
	// RequestURI - The endpoint of the Microsoft.ServiceBus resource.
	RequestURI *string `json:"requestUri,omitempty"`
	// EntityType - The entity type of the Microsoft.ServiceBus resource. Could be one of 'queue' or 'subscriber'.
	EntityType *string `json:"entityType,omitempty"`
	// QueueName - The name of the Microsoft.ServiceBus queue. If the entity type is of type 'subscriber', then this value will be null.
	QueueName *string `json:"queueName,omitempty"`
	// TopicName - The name of the Microsoft.ServiceBus topic. If the entity type is of type 'queue', then this value will be null.
	TopicName *string `json:"topicName,omitempty"`
	// SubscriptionName - The name of the Microsoft.ServiceBus topic's subscription. If the entity type is of type 'queue', then this value will be null.
	SubscriptionName *string `json:"subscriptionName,omitempty"`
}

// ServiceBusDeadletterMessagesAvailablePeriodicNotificationsEventData schema of the Data property of an
// EventGridEvent for a Microsoft.ServiceBus.DeadletterMessagesAvailablePeriodicNotifications event.
type ServiceBusDeadletterMessagesAvailablePeriodicNotificationsEventData struct {
	// NamespaceName - The namespace name of the Microsoft.ServiceBus resource.
	NamespaceName *string `json:"namespaceName,omitempty"`
	// RequestURI - The endpoint of the Microsoft.ServiceBus resource.
	RequestURI *string `json:"requestUri,omitempty"`
	// EntityType - The entity type of the Microsoft.ServiceBus resource. Could be one of 'queue' or 'subscriber'.
	EntityType *string `json:"entityType,omitempty"`
	// QueueName - The name of the Microsoft.ServiceBus queue. If the entity type is of type 'subscriber', then this value will be null.
	QueueName *string `json:"queueName,omitempty"`
	// TopicName - The name of the Microsoft.ServiceBus topic. If the entity type is of type 'queue', then this value will be null.
	TopicName *string `json:"topicName,omitempty"`
	// SubscriptionName - The name of the Microsoft.ServiceBus topic's subscription. If the entity type is of type 'queue', then this value will be null.
	SubscriptionName *string `json:"subscriptionName,omitempty"`
}

// ServiceBusDeadletterMessagesAvailableWithNoListenersEventData schema of the Data property of an
// EventGridEvent for a Microsoft.ServiceBus.DeadletterMessagesAvailableWithNoListeners event.
type ServiceBusDeadletterMessagesAvailableWithNoListenersEventData struct {
	// NamespaceName - The namespace name of the Microsoft.ServiceBus resource.
	NamespaceName *string `json:"namespaceName,omitempty"`
	// RequestURI - The endpoint of the Microsoft.ServiceBus resource.
	RequestURI *string `json:"requestUri,omitempty"`
	// EntityType - The entity type of the Microsoft.ServiceBus resource. Could be one of 'queue' or 'subscriber'.
	EntityType *string `json:"entityType,omitempty"`
	// QueueName - The name of the Microsoft.ServiceBus queue. If the entity type is of type 'subscriber', then this value will be null.
	QueueName *string `json:"queueName,omitempty"`
	// TopicName - The name of the Microsoft.ServiceBus topic. If the entity type is of type 'queue', then this value will be null.
	TopicName *string `json:"topicName,omitempty"`
	// SubscriptionName - The name of the Microsoft.ServiceBus topic's subscription. If the entity type is of type 'queue', then this value will be null.
	SubscriptionName *string `json:"subscriptionName,omitempty"`
}

// SignalRServiceClientConnectionConnectedEventData schema of the Data property of an EventGridEvent for a
// Microsoft.SignalRService.ClientConnectionConnected event.
type SignalRServiceClientConnectionConnectedEventData struct {
	// Timestamp - The time at which the event occurred.
	Timestamp *date.Time `json:"timestamp,omitempty"`
	// HubName - The hub of connected client connection.
	HubName *string `json:"hubName,omitempty"`
	// ConnectionID - The connection Id of connected client connection.
	ConnectionID *string `json:"connectionId,omitempty"`
	// UserID - The user Id of connected client connection.
	UserID *string `json:"userId,omitempty"`
}

// SignalRServiceClientConnectionDisconnectedEventData schema of the Data property of an EventGridEvent for
// a Microsoft.SignalRService.ClientConnectionDisconnected event.
type SignalRServiceClientConnectionDisconnectedEventData struct {
	// Timestamp - The time at which the event occurred.
	Timestamp *date.Time `json:"timestamp,omitempty"`
	// HubName - The hub of connected client connection.
	HubName *string `json:"hubName,omitempty"`
	// ConnectionID - The connection Id of connected client connection.
	ConnectionID *string `json:"connectionId,omitempty"`
	// UserID - The user Id of connected client connection.
	UserID *string `json:"userId,omitempty"`
	// ErrorMessage - The message of error that cause the client connection disconnected.
	ErrorMessage *string `json:"errorMessage,omitempty"`
}

// StorageAsyncOperationInitiatedEventData schema of the Data property of an EventGridEvent for a
// Microsoft.Storage.AsyncOperationInitiated event.
type StorageAsyncOperationInitiatedEventData struct {
	// API - The name of the API/operation that triggered this event.
	API *string `json:"api,omitempty"`
	// ClientRequestID - A request id provided by the client of the storage API operation that triggered this event.
	ClientRequestID *string `json:"clientRequestId,omitempty"`
	// RequestID - The request id generated by the Storage service for the storage API operation that triggered this event.
	RequestID *string `json:"requestId,omitempty"`
	// ContentType - The content type of the blob. This is the same as what would be returned in the Content-Type header from the blob.
	ContentType *string `json:"contentType,omitempty"`
	// ContentLength - The size of the blob in bytes. This is the same as what would be returned in the Content-Length header from the blob.
	ContentLength *int64 `json:"contentLength,omitempty"`
	// BlobType - The type of blob.
	BlobType *string `json:"blobType,omitempty"`
	// URL - The path to the blob.
	URL *string `json:"url,omitempty"`
	// Sequencer - An opaque string value representing the logical sequence of events for any particular blob name. Users can use standard string comparison to understand the relative sequence of two events on the same blob name.
	Sequencer *string `json:"sequencer,omitempty"`
	// Identity - The identity of the requester that triggered this event.
	Identity *string `json:"identity,omitempty"`
	// StorageDiagnostics - For service use only. Diagnostic data occasionally included by the Azure Storage service. This property should be ignored by event consumers.
	StorageDiagnostics interface{} `json:"storageDiagnostics,omitempty"`
}

// StorageBlobCreatedEventData schema of the Data property of an EventGridEvent for a
// Microsoft.Storage.BlobCreated event.
type StorageBlobCreatedEventData struct {
	// API - The name of the API/operation that triggered this event.
	API *string `json:"api,omitempty"`
	// ClientRequestID - A request id provided by the client of the storage API operation that triggered this event.
	ClientRequestID *string `json:"clientRequestId,omitempty"`
	// RequestID - The request id generated by the Storage service for the storage API operation that triggered this event.
	RequestID *string `json:"requestId,omitempty"`
	// ETag - The etag of the blob at the time this event was triggered.
	ETag *string `json:"eTag,omitempty"`
	// ContentType - The content type of the blob. This is the same as what would be returned in the Content-Type header from the blob.
	ContentType *string `json:"contentType,omitempty"`
	// ContentLength - The size of the blob in bytes. This is the same as what would be returned in the Content-Length header from the blob.
	ContentLength *int64 `json:"contentLength,omitempty"`
	// ContentOffset - The offset of the blob in bytes.
	ContentOffset *int64 `json:"contentOffset,omitempty"`
	// BlobType - The type of blob.
	BlobType *string `json:"blobType,omitempty"`
	// URL - The path to the blob.
	URL *string `json:"url,omitempty"`
	// Sequencer - An opaque string value representing the logical sequence of events for any particular blob name. Users can use standard string comparison to understand the relative sequence of two events on the same blob name.
	Sequencer *string `json:"sequencer,omitempty"`
	// Identity - The identity of the requester that triggered this event.
	Identity *string `json:"identity,omitempty"`
	// StorageDiagnostics - For service use only. Diagnostic data occasionally included by the Azure Storage service. This property should be ignored by event consumers.
	StorageDiagnostics interface{} `json:"storageDiagnostics,omitempty"`
}

// StorageBlobDeletedEventData schema of the Data property of an EventGridEvent for a
// Microsoft.Storage.BlobDeleted event.
type StorageBlobDeletedEventData struct {
	// API - The name of the API/operation that triggered this event.
	API *string `json:"api,omitempty"`
	// ClientRequestID - A request id provided by the client of the storage API operation that triggered this event.
	ClientRequestID *string `json:"clientRequestId,omitempty"`
	// RequestID - The request id generated by the Storage service for the storage API operation that triggered this event.
	RequestID *string `json:"requestId,omitempty"`
	// ContentType - The content type of the blob. This is the same as what would be returned in the Content-Type header from the blob.
	ContentType *string `json:"contentType,omitempty"`
	// BlobType - The type of blob.
	BlobType *string `json:"blobType,omitempty"`
	// URL - The path to the blob.
	URL *string `json:"url,omitempty"`
	// Sequencer - An opaque string value representing the logical sequence of events for any particular blob name. Users can use standard string comparison to understand the relative sequence of two events on the same blob name.
	Sequencer *string `json:"sequencer,omitempty"`
	// Identity - The identity of the requester that triggered this event.
	Identity *string `json:"identity,omitempty"`
	// StorageDiagnostics - For service use only. Diagnostic data occasionally included by the Azure Storage service. This property should be ignored by event consumers.
	StorageDiagnostics interface{} `json:"storageDiagnostics,omitempty"`
}

// StorageBlobInventoryPolicyCompletedEventData schema of the Data property of an EventGridEvent for an
// Microsoft.Storage.BlobInventoryPolicyCompleted event.
type StorageBlobInventoryPolicyCompletedEventData struct {
	// ScheduleDateTime - The time at which inventory policy was scheduled.
	ScheduleDateTime *date.Time `json:"scheduleDateTime,omitempty"`
	// AccountName - The account name for which inventory policy is registered.
	AccountName *string `json:"accountName,omitempty"`
	// RuleName - The rule name for inventory policy.
	RuleName *string `json:"ruleName,omitempty"`
	// PolicyRunStatus - The status of inventory run, it can be Succeeded/PartiallySucceeded/Failed.
	PolicyRunStatus *string `json:"policyRunStatus,omitempty"`
	// PolicyRunStatusMessage - The status message for inventory run.
	PolicyRunStatusMessage *string `json:"policyRunStatusMessage,omitempty"`
	// PolicyRunID - The policy run id for inventory run.
	PolicyRunID *string `json:"policyRunId,omitempty"`
	// ManifestBlobURL - The blob URL for manifest file for inventory run.
	ManifestBlobURL *string `json:"manifestBlobUrl,omitempty"`
}

// StorageBlobRenamedEventData schema of the Data property of an EventGridEvent for a
// Microsoft.Storage.BlobRenamed event.
type StorageBlobRenamedEventData struct {
	// API - The name of the API/operation that triggered this event.
	API *string `json:"api,omitempty"`
	// ClientRequestID - A request id provided by the client of the storage API operation that triggered this event.
	ClientRequestID *string `json:"clientRequestId,omitempty"`
	// RequestID - The request id generated by the storage service for the storage API operation that triggered this event.
	RequestID *string `json:"requestId,omitempty"`
	// SourceURL - The path to the blob that was renamed.
	SourceURL *string `json:"sourceUrl,omitempty"`
	// DestinationURL - The new path to the blob after the rename operation.
	DestinationURL *string `json:"destinationUrl,omitempty"`
	// Sequencer - An opaque string value representing the logical sequence of events for any particular blob name. Users can use standard string comparison to understand the relative sequence of two events on the same blob name.
	Sequencer *string `json:"sequencer,omitempty"`
	// Identity - The identity of the requester that triggered this event.
	Identity *string `json:"identity,omitempty"`
	// StorageDiagnostics - For service use only. Diagnostic data occasionally included by the Azure Storage service. This property should be ignored by event consumers.
	StorageDiagnostics interface{} `json:"storageDiagnostics,omitempty"`
}

// StorageBlobTierChangedEventData schema of the Data property of an EventGridEvent for a
// Microsoft.Storage.BlobTierChanged event.
type StorageBlobTierChangedEventData struct {
	// API - The name of the API/operation that triggered this event.
	API *string `json:"api,omitempty"`
	// ClientRequestID - A request id provided by the client of the storage API operation that triggered this event.
	ClientRequestID *string `json:"clientRequestId,omitempty"`
	// RequestID - The request id generated by the Storage service for the storage API operation that triggered this event.
	RequestID *string `json:"requestId,omitempty"`
	// ContentType - The content type of the blob. This is the same as what would be returned in the Content-Type header from the blob.
	ContentType *string `json:"contentType,omitempty"`
	// ContentLength - The size of the blob in bytes. This is the same as what would be returned in the Content-Length header from the blob.
	ContentLength *int64 `json:"contentLength,omitempty"`
	// BlobType - The type of blob.
	BlobType *string `json:"blobType,omitempty"`
	// URL - The path to the blob.
	URL *string `json:"url,omitempty"`
	// Sequencer - An opaque string value representing the logical sequence of events for any particular blob name. Users can use standard string comparison to understand the relative sequence of two events on the same blob name.
	Sequencer *string `json:"sequencer,omitempty"`
	// Identity - The identity of the requester that triggered this event.
	Identity *string `json:"identity,omitempty"`
	// StorageDiagnostics - For service use only. Diagnostic data occasionally included by the Azure Storage service. This property should be ignored by event consumers.
	StorageDiagnostics interface{} `json:"storageDiagnostics,omitempty"`
}

// StorageDirectoryCreatedEventData schema of the Data property of an EventGridEvent for a
// Microsoft.Storage.DirectoryCreated event.
type StorageDirectoryCreatedEventData struct {
	// API - The name of the API/operation that triggered this event.
	API *string `json:"api,omitempty"`
	// ClientRequestID - A request id provided by the client of the storage API operation that triggered this event.
	ClientRequestID *string `json:"clientRequestId,omitempty"`
	// RequestID - The request id generated by the storage service for the storage API operation that triggered this event.
	RequestID *string `json:"requestId,omitempty"`
	// ETag - The etag of the directory at the time this event was triggered.
	ETag *string `json:"eTag,omitempty"`
	// URL - The path to the directory.
	URL *string `json:"url,omitempty"`
	// Sequencer - An opaque string value representing the logical sequence of events for any particular directory name. Users can use standard string comparison to understand the relative sequence of two events on the same directory name.
	Sequencer *string `json:"sequencer,omitempty"`
	// Identity - The identity of the requester that triggered this event.
	Identity *string `json:"identity,omitempty"`
	// StorageDiagnostics - For service use only. Diagnostic data occasionally included by the Azure Storage service. This property should be ignored by event consumers.
	StorageDiagnostics interface{} `json:"storageDiagnostics,omitempty"`
}

// StorageDirectoryDeletedEventData schema of the Data property of an EventGridEvent for a
// Microsoft.Storage.DirectoryDeleted event.
type StorageDirectoryDeletedEventData struct {
	// API - The name of the API/operation that triggered this event.
	API *string `json:"api,omitempty"`
	// ClientRequestID - A request id provided by the client of the storage API operation that triggered this event.
	ClientRequestID *string `json:"clientRequestId,omitempty"`
	// RequestID - The request id generated by the storage service for the storage API operation that triggered this event.
	RequestID *string `json:"requestId,omitempty"`
	// URL - The path to the deleted directory.
	URL *string `json:"url,omitempty"`
	// Recursive - Is this event for a recursive delete operation.
	Recursive *bool `json:"recursive,omitempty"`
	// Sequencer - An opaque string value representing the logical sequence of events for any particular directory name. Users can use standard string comparison to understand the relative sequence of two events on the same directory name.
	Sequencer *string `json:"sequencer,omitempty"`
	// Identity - The identity of the requester that triggered this event.
	Identity *string `json:"identity,omitempty"`
	// StorageDiagnostics - For service use only. Diagnostic data occasionally included by the Azure Storage service. This property should be ignored by event consumers.
	StorageDiagnostics interface{} `json:"storageDiagnostics,omitempty"`
}

// StorageDirectoryRenamedEventData schema of the Data property of an EventGridEvent for a
// Microsoft.Storage.DirectoryRenamed event.
type StorageDirectoryRenamedEventData struct {
	// API - The name of the API/operation that triggered this event.
	API *string `json:"api,omitempty"`
	// ClientRequestID - A request id provided by the client of the storage API operation that triggered this event.
	ClientRequestID *string `json:"clientRequestId,omitempty"`
	// RequestID - The request id generated by the storage service for the storage API operation that triggered this event.
	RequestID *string `json:"requestId,omitempty"`
	// SourceURL - The path to the directory that was renamed.
	SourceURL *string `json:"sourceUrl,omitempty"`
	// DestinationURL - The new path to the directory after the rename operation.
	DestinationURL *string `json:"destinationUrl,omitempty"`
	// Sequencer - An opaque string value representing the logical sequence of events for any particular directory name. Users can use standard string comparison to understand the relative sequence of two events on the same directory name.
	Sequencer *string `json:"sequencer,omitempty"`
	// Identity - The identity of the requester that triggered this event.
	Identity *string `json:"identity,omitempty"`
	// StorageDiagnostics - For service use only. Diagnostic data occasionally included by the Azure Storage service. This property should be ignored by event consumers.
	StorageDiagnostics interface{} `json:"storageDiagnostics,omitempty"`
}

// StorageLifecyclePolicyActionSummaryDetail execution statistics of a specific policy action in a Blob
// Management cycle.
type StorageLifecyclePolicyActionSummaryDetail struct {
	// TotalObjectsCount - Total number of objects to be acted on by this action.
	TotalObjectsCount *int64 `json:"totalObjectsCount,omitempty"`
	// SuccessCount - Number of success operations of this action.
	SuccessCount *int64 `json:"successCount,omitempty"`
	// ErrorList - Error messages of this action if any.
	ErrorList *string `json:"errorList,omitempty"`
}

// StorageLifecyclePolicyCompletedEventData schema of the Data property of an EventGridEvent for a
// Microsoft.Storage.LifecyclePolicyCompleted event.
type StorageLifecyclePolicyCompletedEventData struct {
	// ScheduleTime - The time the policy task was scheduled.
	ScheduleTime         *string                                    `json:"scheduleTime,omitempty"`
	DeleteSummary        *StorageLifecyclePolicyActionSummaryDetail `json:"deleteSummary,omitempty"`
	TierToCoolSummary    *StorageLifecyclePolicyActionSummaryDetail `json:"tierToCoolSummary,omitempty"`
	TierToArchiveSummary *StorageLifecyclePolicyActionSummaryDetail `json:"tierToArchiveSummary,omitempty"`
}

// SubscriptionDeletedEventData schema of the Data property of an EventGridEvent for a
// Microsoft.EventGrid.SubscriptionDeletedEvent event.
type SubscriptionDeletedEventData struct {
	// EventSubscriptionID - READ-ONLY; The Azure resource ID of the deleted event subscription.
	EventSubscriptionID *string `json:"eventSubscriptionId,omitempty"`
}

// MarshalJSON is the custom marshaler for SubscriptionDeletedEventData.
func (sded SubscriptionDeletedEventData) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	return json.Marshal(objectMap)
}

// SubscriptionValidationEventData schema of the Data property of an EventGridEvent for a
// Microsoft.EventGrid.SubscriptionValidationEvent event.
type SubscriptionValidationEventData struct {
	// ValidationCode - READ-ONLY; The validation code sent by Azure Event Grid to validate an event subscription. To complete the validation handshake, the subscriber must either respond with this validation code as part of the validation response, or perform a GET request on the validationUrl (available starting version 2018-05-01-preview).
	ValidationCode *string `json:"validationCode,omitempty"`
	// ValidationURL - READ-ONLY; The validation URL sent by Azure Event Grid (available starting version 2018-05-01-preview). To complete the validation handshake, the subscriber must either respond with the validationCode as part of the validation response, or perform a GET request on the validationUrl (available starting version 2018-05-01-preview).
	ValidationURL *string `json:"validationUrl,omitempty"`
}

// MarshalJSON is the custom marshaler for SubscriptionValidationEventData.
func (sved SubscriptionValidationEventData) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	return json.Marshal(objectMap)
}

// SubscriptionValidationResponse to complete an event subscription validation handshake, a subscriber can
// use either the validationCode or the validationUrl received in a SubscriptionValidationEvent. When the
// validationCode is used, the SubscriptionValidationResponse can be used to build the response.
type SubscriptionValidationResponse struct {
	// ValidationResponse - The validation response sent by the subscriber to Azure Event Grid to complete the validation of an event subscription.
	ValidationResponse *string `json:"validationResponse,omitempty"`
}

// WebAppServicePlanUpdatedEventData schema of the Data property of an EventGridEvent for a
// Microsoft.Web.AppServicePlanUpdated event.
type WebAppServicePlanUpdatedEventData struct {
	AppServicePlanEventTypeDetail *AppServicePlanEventTypeDetail `json:"appServicePlanEventTypeDetail,omitempty"`
	// Sku - sku of app service plan.
	Sku *WebAppServicePlanUpdatedEventDataSku `json:"sku,omitempty"`
	// Name - name of the app service plan that had this event.
	Name *string `json:"name,omitempty"`
	// ClientRequestID - The client request id generated by the app service for the app service plan API operation that triggered this event.
	ClientRequestID *string `json:"clientRequestId,omitempty"`
	// CorrelationRequestID - The correlation request id generated by the app service for the app service plan API operation that triggered this event.
	CorrelationRequestID *string `json:"correlationRequestId,omitempty"`
	// RequestID - The request id generated by the app service for the app service plan API operation that triggered this event.
	RequestID *string `json:"requestId,omitempty"`
	// Address - HTTP request URL of this operation.
	Address *string `json:"address,omitempty"`
	// Verb - HTTP verb of this operation.
	Verb *string `json:"verb,omitempty"`
}

// WebAppServicePlanUpdatedEventDataSku sku of app service plan.
type WebAppServicePlanUpdatedEventDataSku struct {
	// Name - name of app service plan sku.
	Name *string `json:"name,omitempty"`
	// Tier - tier of app service plan sku.
	Tier *string `json:"Tier,omitempty"`
	// Size - size of app service plan sku.
	Size *string `json:"Size,omitempty"`
	// Family - family of app service plan sku.
	Family *string `json:"Family,omitempty"`
	// Capacity - capacity of app service plan sku.
	Capacity *string `json:"Capacity,omitempty"`
}

// WebAppUpdatedEventData schema of the Data property of an EventGridEvent for a Microsoft.Web.AppUpdated
// event.
type WebAppUpdatedEventData struct {
	AppEventTypeDetail *AppEventTypeDetail `json:"appEventTypeDetail,omitempty"`
	// Name - name of the web site that had this event.
	Name *string `json:"name,omitempty"`
	// ClientRequestID - The client request id generated by the app service for the site API operation that triggered this event.
	ClientRequestID *string `json:"clientRequestId,omitempty"`
	// CorrelationRequestID - The correlation request id generated by the app service for the site API operation that triggered this event.
	CorrelationRequestID *string `json:"correlationRequestId,omitempty"`
	// RequestID - The request id generated by the app service for the site API operation that triggered this event.
	RequestID *string `json:"requestId,omitempty"`
	// Address - HTTP request URL of this operation.
	Address *string `json:"address,omitempty"`
	// Verb - HTTP verb of this operation.
	Verb *string `json:"verb,omitempty"`
}

// WebBackupOperationCompletedEventData schema of the Data property of an EventGridEvent for a
// Microsoft.Web.BackupOperationCompleted event.
type WebBackupOperationCompletedEventData struct {
	AppEventTypeDetail *AppEventTypeDetail `json:"appEventTypeDetail,omitempty"`
	// Name - name of the web site that had this event.
	Name *string `json:"name,omitempty"`
	// ClientRequestID - The client request id generated by the app service for the site API operation that triggered this event.
	ClientRequestID *string `json:"clientRequestId,omitempty"`
	// CorrelationRequestID - The correlation request id generated by the app service for the site API operation that triggered this event.
	CorrelationRequestID *string `json:"correlationRequestId,omitempty"`
	// RequestID - The request id generated by the app service for the site API operation that triggered this event.
	RequestID *string `json:"requestId,omitempty"`
	// Address - HTTP request URL of this operation.
	Address *string `json:"address,omitempty"`
	// Verb - HTTP verb of this operation.
	Verb *string `json:"verb,omitempty"`
}

// WebBackupOperationFailedEventData schema of the Data property of an EventGridEvent for a
// Microsoft.Web.BackupOperationFailed event.
type WebBackupOperationFailedEventData struct {
	AppEventTypeDetail *AppEventTypeDetail `json:"appEventTypeDetail,omitempty"`
	// Name - name of the web site that had this event.
	Name *string `json:"name,omitempty"`
	// ClientRequestID - The client request id generated by the app service for the site API operation that triggered this event.
	ClientRequestID *string `json:"clientRequestId,omitempty"`
	// CorrelationRequestID - The correlation request id generated by the app service for the site API operation that triggered this event.
	CorrelationRequestID *string `json:"correlationRequestId,omitempty"`
	// RequestID - The request id generated by the app service for the site API operation that triggered this event.
	RequestID *string `json:"requestId,omitempty"`
	// Address - HTTP request URL of this operation.
	Address *string `json:"address,omitempty"`
	// Verb - HTTP verb of this operation.
	Verb *string `json:"verb,omitempty"`
}

// WebBackupOperationStartedEventData schema of the Data property of an EventGridEvent for a
// Microsoft.Web.BackupOperationStarted event.
type WebBackupOperationStartedEventData struct {
	AppEventTypeDetail *AppEventTypeDetail `json:"appEventTypeDetail,omitempty"`
	// Name - name of the web site that had this event.
	Name *string `json:"name,omitempty"`
	// ClientRequestID - The client request id generated by the app service for the site API operation that triggered this event.
	ClientRequestID *string `json:"clientRequestId,omitempty"`
	// CorrelationRequestID - The correlation request id generated by the app service for the site API operation that triggered this event.
	CorrelationRequestID *string `json:"correlationRequestId,omitempty"`
	// RequestID - The request id generated by the app service for the site API operation that triggered this event.
	RequestID *string `json:"requestId,omitempty"`
	// Address - HTTP request URL of this operation.
	Address *string `json:"address,omitempty"`
	// Verb - HTTP verb of this operation.
	Verb *string `json:"verb,omitempty"`
}

// WebRestoreOperationCompletedEventData schema of the Data property of an EventGridEvent for a
// Microsoft.Web.RestoreOperationCompleted event.
type WebRestoreOperationCompletedEventData struct {
	AppEventTypeDetail *AppEventTypeDetail `json:"appEventTypeDetail,omitempty"`
	// Name - name of the web site that had this event.
	Name *string `json:"name,omitempty"`
	// ClientRequestID - The client request id generated by the app service for the site API operation that triggered this event.
	ClientRequestID *string `json:"clientRequestId,omitempty"`
	// CorrelationRequestID - The correlation request id generated by the app service for the site API operation that triggered this event.
	CorrelationRequestID *string `json:"correlationRequestId,omitempty"`
	// RequestID - The request id generated by the app service for the site API operation that triggered this event.
	RequestID *string `json:"requestId,omitempty"`
	// Address - HTTP request URL of this operation.
	Address *string `json:"address,omitempty"`
	// Verb - HTTP verb of this operation.
	Verb *string `json:"verb,omitempty"`
}

// WebRestoreOperationFailedEventData schema of the Data property of an EventGridEvent for a
// Microsoft.Web.RestoreOperationFailed event.
type WebRestoreOperationFailedEventData struct {
	AppEventTypeDetail *AppEventTypeDetail `json:"appEventTypeDetail,omitempty"`
	// Name - name of the web site that had this event.
	Name *string `json:"name,omitempty"`
	// ClientRequestID - The client request id generated by the app service for the site API operation that triggered this event.
	ClientRequestID *string `json:"clientRequestId,omitempty"`
	// CorrelationRequestID - The correlation request id generated by the app service for the site API operation that triggered this event.
	CorrelationRequestID *string `json:"correlationRequestId,omitempty"`
	// RequestID - The request id generated by the app service for the site API operation that triggered this event.
	RequestID *string `json:"requestId,omitempty"`
	// Address - HTTP request URL of this operation.
	Address *string `json:"address,omitempty"`
	// Verb - HTTP verb of this operation.
	Verb *string `json:"verb,omitempty"`
}

// WebRestoreOperationStartedEventData schema of the Data property of an EventGridEvent for a
// Microsoft.Web.RestoreOperationStarted event.
type WebRestoreOperationStartedEventData struct {
	AppEventTypeDetail *AppEventTypeDetail `json:"appEventTypeDetail,omitempty"`
	// Name - name of the web site that had this event.
	Name *string `json:"name,omitempty"`
	// ClientRequestID - The client request id generated by the app service for the site API operation that triggered this event.
	ClientRequestID *string `json:"clientRequestId,omitempty"`
	// CorrelationRequestID - The correlation request id generated by the app service for the site API operation that triggered this event.
	CorrelationRequestID *string `json:"correlationRequestId,omitempty"`
	// RequestID - The request id generated by the app service for the site API operation that triggered this event.
	RequestID *string `json:"requestId,omitempty"`
	// Address - HTTP request URL of this operation.
	Address *string `json:"address,omitempty"`
	// Verb - HTTP verb of this operation.
	Verb *string `json:"verb,omitempty"`
}

// WebSlotSwapCompletedEventData schema of the Data property of an EventGridEvent for a
// Microsoft.Web.SlotSwapCompleted event.
type WebSlotSwapCompletedEventData struct {
	AppEventTypeDetail *AppEventTypeDetail `json:"appEventTypeDetail,omitempty"`
	// Name - name of the web site that had this event.
	Name *string `json:"name,omitempty"`
	// ClientRequestID - The client request id generated by the app service for the site API operation that triggered this event.
	ClientRequestID *string `json:"clientRequestId,omitempty"`
	// CorrelationRequestID - The correlation request id generated by the app service for the site API operation that triggered this event.
	CorrelationRequestID *string `json:"correlationRequestId,omitempty"`
	// RequestID - The request id generated by the app service for the site API operation that triggered this event.
	RequestID *string `json:"requestId,omitempty"`
	// Address - HTTP request URL of this operation.
	Address *string `json:"address,omitempty"`
	// Verb - HTTP verb of this operation.
	Verb *string `json:"verb,omitempty"`
}

// WebSlotSwapFailedEventData schema of the Data property of an EventGridEvent for a
// Microsoft.Web.SlotSwapFailed event.
type WebSlotSwapFailedEventData struct {
	AppEventTypeDetail *AppEventTypeDetail `json:"appEventTypeDetail,omitempty"`
	// Name - name of the web site that had this event.
	Name *string `json:"name,omitempty"`
	// ClientRequestID - The client request id generated by the app service for the site API operation that triggered this event.
	ClientRequestID *string `json:"clientRequestId,omitempty"`
	// CorrelationRequestID - The correlation request id generated by the app service for the site API operation that triggered this event.
	CorrelationRequestID *string `json:"correlationRequestId,omitempty"`
	// RequestID - The request id generated by the app service for the site API operation that triggered this event.
	RequestID *string `json:"requestId,omitempty"`
	// Address - HTTP request URL of this operation.
	Address *string `json:"address,omitempty"`
	// Verb - HTTP verb of this operation.
	Verb *string `json:"verb,omitempty"`
}

// WebSlotSwapStartedEventData schema of the Data property of an EventGridEvent for a
// Microsoft.Web.SlotSwapStarted event.
type WebSlotSwapStartedEventData struct {
	AppEventTypeDetail *AppEventTypeDetail `json:"appEventTypeDetail,omitempty"`
	// Name - name of the web site that had this event.
	Name *string `json:"name,omitempty"`
	// ClientRequestID - The client request id generated by the app service for the site API operation that triggered this event.
	ClientRequestID *string `json:"clientRequestId,omitempty"`
	// CorrelationRequestID - The correlation request id generated by the app service for the site API operation that triggered this event.
	CorrelationRequestID *string `json:"correlationRequestId,omitempty"`
	// RequestID - The request id generated by the app service for the site API operation that triggered this event.
	RequestID *string `json:"requestId,omitempty"`
	// Address - HTTP request URL of this operation.
	Address *string `json:"address,omitempty"`
	// Verb - HTTP verb of this operation.
	Verb *string `json:"verb,omitempty"`
}

// WebSlotSwapWithPreviewCancelledEventData schema of the Data property of an EventGridEvent for a
// Microsoft.Web.SlotSwapWithPreviewCancelled event.
type WebSlotSwapWithPreviewCancelledEventData struct {
	AppEventTypeDetail *AppEventTypeDetail `json:"appEventTypeDetail,omitempty"`
	// Name - name of the web site that had this event.
	Name *string `json:"name,omitempty"`
	// ClientRequestID - The client request id generated by the app service for the site API operation that triggered this event.
	ClientRequestID *string `json:"clientRequestId,omitempty"`
	// CorrelationRequestID - The correlation request id generated by the app service for the site API operation that triggered this event.
	CorrelationRequestID *string `json:"correlationRequestId,omitempty"`
	// RequestID - The request id generated by the app service for the site API operation that triggered this event.
	RequestID *string `json:"requestId,omitempty"`
	// Address - HTTP request URL of this operation.
	Address *string `json:"address,omitempty"`
	// Verb - HTTP verb of this operation.
	Verb *string `json:"verb,omitempty"`
}

// WebSlotSwapWithPreviewStartedEventData schema of the Data property of an EventGridEvent for a
// Microsoft.Web.SlotSwapWithPreviewStarted event.
type WebSlotSwapWithPreviewStartedEventData struct {
	AppEventTypeDetail *AppEventTypeDetail `json:"appEventTypeDetail,omitempty"`
	// Name - name of the web site that had this event.
	Name *string `json:"name,omitempty"`
	// ClientRequestID - The client request id generated by the app service for the site API operation that triggered this event.
	ClientRequestID *string `json:"clientRequestId,omitempty"`
	// CorrelationRequestID - The correlation request id generated by the app service for the site API operation that triggered this event.
	CorrelationRequestID *string `json:"correlationRequestId,omitempty"`
	// RequestID - The request id generated by the app service for the site API operation that triggered this event.
	RequestID *string `json:"requestId,omitempty"`
	// Address - HTTP request URL of this operation.
	Address *string `json:"address,omitempty"`
	// Verb - HTTP verb of this operation.
	Verb *string `json:"verb,omitempty"`
}
