package graphrbac

// Copyright (c) Microsoft and contributors.  All rights reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
// http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
//
// See the License for the specific language governing permissions and
// limitations under the License.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

import (
	"bytes"
	"context"
	"encoding/json"
	"github.com/Azure/azure-pipeline-go/pipeline"
	"io/ioutil"
	"net/http"
)

// GroupsClient is the the Graph RBAC Management Client
type GroupsClient struct {
	ManagementClient
}

// NewGroupsClient creates an instance of the GroupsClient client.
func NewGroupsClient(p pipeline.Pipeline) GroupsClient {
	return GroupsClient{NewManagementClient(p)}
}

// AddMember add a member to a group.
//
// groupObjectID is the object ID of the group to which to add the member. parameters is the URL of the member object,
// such as
// https://graph.windows.net/0b1f9851-1bf0-433f-aec3-cb9272f093dc/directoryObjects/f260bbc4-c254-447b-94cf-293b5ec434dd.
func (client GroupsClient) AddMember(ctx context.Context, groupObjectID string, parameters GroupAddMemberParameters) (*http.Response, error) {
	if err := validate([]validation{
		{targetValue: parameters,
			constraints: []constraint{{target: "parameters.URL", name: null, rule: true, chain: nil}}}}); err != nil {
		return nil, err
	}
	req, err := client.addMemberPreparer(groupObjectID, parameters)
	if err != nil {
		return nil, err
	}
	resp, err := client.Pipeline().Do(ctx, responderPolicyFactory{responder: client.addMemberResponder}, req)
	if err != nil {
		return nil, err
	}
	return resp.Response(), err
}

// addMemberPreparer prepares the AddMember request.
func (client GroupsClient) addMemberPreparer(groupObjectID string, parameters GroupAddMemberParameters) (pipeline.Request, error) {
	u := client.url
	u.Path = "/{tenantID}/groups/{groupObjectId}/$links/members"
	req, err := pipeline.NewRequest("POST", u, nil)
	if err != nil {
		return req, pipeline.NewError(err, "failed to create request")
	}
	params := req.URL.Query()
	params.Set("api-version", APIVersion)
	req.URL.RawQuery = params.Encode()
	b, err := json.Marshal(parameters)
	if err != nil {
		return req, pipeline.NewError(err, "failed to marshal request body")
	}
	req.Header.Set("Content-Type", "application/json")
	err = req.SetBody(bytes.NewReader(b))
	if err != nil {
		return req, pipeline.NewError(err, "failed to set request body")
	}
	return req, nil
}

// addMemberResponder handles the response to the AddMember request.
func (client GroupsClient) addMemberResponder(resp pipeline.Response) (pipeline.Response, error) {
	err := validateResponse(resp, http.StatusOK, http.StatusNoContent)
	if resp == nil {
		return nil, err
	}
	return resp, err
}

// Create create a group in the directory.
//
// parameters is the parameters for the group to create.
func (client GroupsClient) Create(ctx context.Context, parameters GroupCreateParameters) (*ADGroup, error) {
	if err := validate([]validation{
		{targetValue: parameters,
			constraints: []constraint{{target: "parameters.DisplayName", name: null, rule: true, chain: nil},
				{target: "parameters.MailEnabled", name: null, rule: true, chain: nil},
				{target: "parameters.MailNickname", name: null, rule: true, chain: nil},
				{target: "parameters.SecurityEnabled", name: null, rule: true, chain: nil}}}}); err != nil {
		return nil, err
	}
	req, err := client.createPreparer(parameters)
	if err != nil {
		return nil, err
	}
	resp, err := client.Pipeline().Do(ctx, responderPolicyFactory{responder: client.createResponder}, req)
	if err != nil {
		return nil, err
	}
	return resp.(*ADGroup), err
}

// createPreparer prepares the Create request.
func (client GroupsClient) createPreparer(parameters GroupCreateParameters) (pipeline.Request, error) {
	u := client.url
	u.Path = "/{tenantID}/groups"
	req, err := pipeline.NewRequest("POST", u, nil)
	if err != nil {
		return req, pipeline.NewError(err, "failed to create request")
	}
	params := req.URL.Query()
	params.Set("api-version", APIVersion)
	req.URL.RawQuery = params.Encode()
	b, err := json.Marshal(parameters)
	if err != nil {
		return req, pipeline.NewError(err, "failed to marshal request body")
	}
	req.Header.Set("Content-Type", "application/json")
	err = req.SetBody(bytes.NewReader(b))
	if err != nil {
		return req, pipeline.NewError(err, "failed to set request body")
	}
	return req, nil
}

// createResponder handles the response to the Create request.
func (client GroupsClient) createResponder(resp pipeline.Response) (pipeline.Response, error) {
	err := validateResponse(resp, http.StatusOK, http.StatusCreated)
	if resp == nil {
		return nil, err
	}
	result := &ADGroup{rawResponse: resp.Response()}
	if err != nil {
		return result, err
	}
	defer resp.Response().Body.Close()
	b, err := ioutil.ReadAll(resp.Response().Body)
	if err != nil {
		return result, NewResponseError(err, resp.Response(), "failed to read response body")
	}
	if len(b) > 0 {
		err = json.Unmarshal(b, result)
		if err != nil {
			return result, NewResponseError(err, resp.Response(), "failed to unmarshal response body")
		}
	}
	return result, nil
}

// Delete delete a group from the directory.
//
// objectID is the object ID of the group to delete.
func (client GroupsClient) Delete(ctx context.Context, objectID string) (*http.Response, error) {
	req, err := client.deletePreparer(objectID)
	if err != nil {
		return nil, err
	}
	resp, err := client.Pipeline().Do(ctx, responderPolicyFactory{responder: client.deleteResponder}, req)
	if err != nil {
		return nil, err
	}
	return resp.Response(), err
}

// deletePreparer prepares the Delete request.
func (client GroupsClient) deletePreparer(objectID string) (pipeline.Request, error) {
	u := client.url
	u.Path = "/{tenantID}/groups/{objectId}"
	req, err := pipeline.NewRequest("DELETE", u, nil)
	if err != nil {
		return req, pipeline.NewError(err, "failed to create request")
	}
	params := req.URL.Query()
	params.Set("api-version", APIVersion)
	req.URL.RawQuery = params.Encode()
	return req, nil
}

// deleteResponder handles the response to the Delete request.
func (client GroupsClient) deleteResponder(resp pipeline.Response) (pipeline.Response, error) {
	err := validateResponse(resp, http.StatusOK, http.StatusNoContent)
	if resp == nil {
		return nil, err
	}
	return resp, err
}

// Get gets group information from the directory.
//
// objectID is the object ID of the user for which to get group information.
func (client GroupsClient) Get(ctx context.Context, objectID string) (*ADGroup, error) {
	req, err := client.getPreparer(objectID)
	if err != nil {
		return nil, err
	}
	resp, err := client.Pipeline().Do(ctx, responderPolicyFactory{responder: client.getResponder}, req)
	if err != nil {
		return nil, err
	}
	return resp.(*ADGroup), err
}

// getPreparer prepares the Get request.
func (client GroupsClient) getPreparer(objectID string) (pipeline.Request, error) {
	u := client.url
	u.Path = "/{tenantID}/groups/{objectId}"
	req, err := pipeline.NewRequest("GET", u, nil)
	if err != nil {
		return req, pipeline.NewError(err, "failed to create request")
	}
	params := req.URL.Query()
	params.Set("api-version", APIVersion)
	req.URL.RawQuery = params.Encode()
	return req, nil
}

// getResponder handles the response to the Get request.
func (client GroupsClient) getResponder(resp pipeline.Response) (pipeline.Response, error) {
	err := validateResponse(resp, http.StatusOK)
	if resp == nil {
		return nil, err
	}
	result := &ADGroup{rawResponse: resp.Response()}
	if err != nil {
		return result, err
	}
	defer resp.Response().Body.Close()
	b, err := ioutil.ReadAll(resp.Response().Body)
	if err != nil {
		return result, NewResponseError(err, resp.Response(), "failed to read response body")
	}
	if len(b) > 0 {
		err = json.Unmarshal(b, result)
		if err != nil {
			return result, NewResponseError(err, resp.Response(), "failed to unmarshal response body")
		}
	}
	return result, nil
}

// GetGroupMembers gets the members of a group.
//
// objectID is the object ID of the group whose members should be retrieved.
func (client GroupsClient) GetGroupMembers(ctx context.Context, objectID string) (*GetObjectsResult, error) {
	req, err := client.getGroupMembersPreparer(objectID)
	if err != nil {
		return nil, err
	}
	resp, err := client.Pipeline().Do(ctx, responderPolicyFactory{responder: client.getGroupMembersResponder}, req)
	if err != nil {
		return nil, err
	}
	return resp.(*GetObjectsResult), err
}

// getGroupMembersPreparer prepares the GetGroupMembers request.
func (client GroupsClient) getGroupMembersPreparer(objectID string) (pipeline.Request, error) {
	u := client.url
	u.Path = "/{tenantID}/groups/{objectId}/members"
	req, err := pipeline.NewRequest("GET", u, nil)
	if err != nil {
		return req, pipeline.NewError(err, "failed to create request")
	}
	params := req.URL.Query()
	params.Set("api-version", APIVersion)
	req.URL.RawQuery = params.Encode()
	return req, nil
}

// getGroupMembersResponder handles the response to the GetGroupMembers request.
func (client GroupsClient) getGroupMembersResponder(resp pipeline.Response) (pipeline.Response, error) {
	err := validateResponse(resp, http.StatusOK)
	if resp == nil {
		return nil, err
	}
	result := &GetObjectsResult{rawResponse: resp.Response()}
	if err != nil {
		return result, err
	}
	defer resp.Response().Body.Close()
	b, err := ioutil.ReadAll(resp.Response().Body)
	if err != nil {
		return result, NewResponseError(err, resp.Response(), "failed to read response body")
	}
	if len(b) > 0 {
		err = json.Unmarshal(b, result)
		if err != nil {
			return result, NewResponseError(err, resp.Response(), "failed to unmarshal response body")
		}
	}
	return result, nil
}

// GetGroupMembersNext gets the members of a group.
//
// nextLink is next link for the list operation.
func (client GroupsClient) GetGroupMembersNext(ctx context.Context, nextLink string) (*GetObjectsResult, error) {
	req, err := client.getGroupMembersNextPreparer(nextLink)
	if err != nil {
		return nil, err
	}
	resp, err := client.Pipeline().Do(ctx, responderPolicyFactory{responder: client.getGroupMembersNextResponder}, req)
	if err != nil {
		return nil, err
	}
	return resp.(*GetObjectsResult), err
}

// getGroupMembersNextPreparer prepares the GetGroupMembersNext request.
func (client GroupsClient) getGroupMembersNextPreparer(nextLink string) (pipeline.Request, error) {
	u := client.url
	u.Path = "/{tenantID}/{nextLink}"
	req, err := pipeline.NewRequest("GET", u, nil)
	if err != nil {
		return req, pipeline.NewError(err, "failed to create request")
	}
	params := req.URL.Query()
	params.Set("api-version", APIVersion)
	req.URL.RawQuery = params.Encode()
	return req, nil
}

// getGroupMembersNextResponder handles the response to the GetGroupMembersNext request.
func (client GroupsClient) getGroupMembersNextResponder(resp pipeline.Response) (pipeline.Response, error) {
	err := validateResponse(resp, http.StatusOK)
	if resp == nil {
		return nil, err
	}
	result := &GetObjectsResult{rawResponse: resp.Response()}
	if err != nil {
		return result, err
	}
	defer resp.Response().Body.Close()
	b, err := ioutil.ReadAll(resp.Response().Body)
	if err != nil {
		return result, NewResponseError(err, resp.Response(), "failed to read response body")
	}
	if len(b) > 0 {
		err = json.Unmarshal(b, result)
		if err != nil {
			return result, NewResponseError(err, resp.Response(), "failed to unmarshal response body")
		}
	}
	return result, nil
}

// GetMemberGroups gets a collection of object IDs of groups of which the specified group is a member.
//
// objectID is the object ID of the group for which to get group membership. parameters is group filtering parameters.
func (client GroupsClient) GetMemberGroups(ctx context.Context, objectID string, parameters GroupGetMemberGroupsParameters) (*GroupGetMemberGroupsResult, error) {
	if err := validate([]validation{
		{targetValue: parameters,
			constraints: []constraint{{target: "parameters.SecurityEnabledOnly", name: null, rule: true, chain: nil}}}}); err != nil {
		return nil, err
	}
	req, err := client.getMemberGroupsPreparer(objectID, parameters)
	if err != nil {
		return nil, err
	}
	resp, err := client.Pipeline().Do(ctx, responderPolicyFactory{responder: client.getMemberGroupsResponder}, req)
	if err != nil {
		return nil, err
	}
	return resp.(*GroupGetMemberGroupsResult), err
}

// getMemberGroupsPreparer prepares the GetMemberGroups request.
func (client GroupsClient) getMemberGroupsPreparer(objectID string, parameters GroupGetMemberGroupsParameters) (pipeline.Request, error) {
	u := client.url
	u.Path = "/{tenantID}/groups/{objectId}/getMemberGroups"
	req, err := pipeline.NewRequest("POST", u, nil)
	if err != nil {
		return req, pipeline.NewError(err, "failed to create request")
	}
	params := req.URL.Query()
	params.Set("api-version", APIVersion)
	req.URL.RawQuery = params.Encode()
	b, err := json.Marshal(parameters)
	if err != nil {
		return req, pipeline.NewError(err, "failed to marshal request body")
	}
	req.Header.Set("Content-Type", "application/json")
	err = req.SetBody(bytes.NewReader(b))
	if err != nil {
		return req, pipeline.NewError(err, "failed to set request body")
	}
	return req, nil
}

// getMemberGroupsResponder handles the response to the GetMemberGroups request.
func (client GroupsClient) getMemberGroupsResponder(resp pipeline.Response) (pipeline.Response, error) {
	err := validateResponse(resp, http.StatusOK)
	if resp == nil {
		return nil, err
	}
	result := &GroupGetMemberGroupsResult{rawResponse: resp.Response()}
	if err != nil {
		return result, err
	}
	defer resp.Response().Body.Close()
	b, err := ioutil.ReadAll(resp.Response().Body)
	if err != nil {
		return result, NewResponseError(err, resp.Response(), "failed to read response body")
	}
	if len(b) > 0 {
		err = json.Unmarshal(b, result)
		if err != nil {
			return result, NewResponseError(err, resp.Response(), "failed to unmarshal response body")
		}
	}
	return result, nil
}

// IsMemberOf checks whether the specified user, group, contact, or service principal is a direct or transitive member
// of the specified group.
//
// parameters is the check group membership parameters.
func (client GroupsClient) IsMemberOf(ctx context.Context, parameters CheckGroupMembershipParameters) (*CheckGroupMembershipResult, error) {
	if err := validate([]validation{
		{targetValue: parameters,
			constraints: []constraint{{target: "parameters.GroupID", name: null, rule: true, chain: nil},
				{target: "parameters.MemberID", name: null, rule: true, chain: nil}}}}); err != nil {
		return nil, err
	}
	req, err := client.isMemberOfPreparer(parameters)
	if err != nil {
		return nil, err
	}
	resp, err := client.Pipeline().Do(ctx, responderPolicyFactory{responder: client.isMemberOfResponder}, req)
	if err != nil {
		return nil, err
	}
	return resp.(*CheckGroupMembershipResult), err
}

// isMemberOfPreparer prepares the IsMemberOf request.
func (client GroupsClient) isMemberOfPreparer(parameters CheckGroupMembershipParameters) (pipeline.Request, error) {
	u := client.url
	u.Path = "/{tenantID}/isMemberOf"
	req, err := pipeline.NewRequest("POST", u, nil)
	if err != nil {
		return req, pipeline.NewError(err, "failed to create request")
	}
	params := req.URL.Query()
	params.Set("api-version", APIVersion)
	req.URL.RawQuery = params.Encode()
	b, err := json.Marshal(parameters)
	if err != nil {
		return req, pipeline.NewError(err, "failed to marshal request body")
	}
	req.Header.Set("Content-Type", "application/json")
	err = req.SetBody(bytes.NewReader(b))
	if err != nil {
		return req, pipeline.NewError(err, "failed to set request body")
	}
	return req, nil
}

// isMemberOfResponder handles the response to the IsMemberOf request.
func (client GroupsClient) isMemberOfResponder(resp pipeline.Response) (pipeline.Response, error) {
	err := validateResponse(resp, http.StatusOK)
	if resp == nil {
		return nil, err
	}
	result := &CheckGroupMembershipResult{rawResponse: resp.Response()}
	if err != nil {
		return result, err
	}
	defer resp.Response().Body.Close()
	b, err := ioutil.ReadAll(resp.Response().Body)
	if err != nil {
		return result, NewResponseError(err, resp.Response(), "failed to read response body")
	}
	if len(b) > 0 {
		err = json.Unmarshal(b, result)
		if err != nil {
			return result, NewResponseError(err, resp.Response(), "failed to unmarshal response body")
		}
	}
	return result, nil
}

// List gets list of groups for the current tenant.
//
// filter is the filter to apply to the operation.
func (client GroupsClient) List(ctx context.Context, filter *string) (*GroupListResult, error) {
	req, err := client.listPreparer(filter)
	if err != nil {
		return nil, err
	}
	resp, err := client.Pipeline().Do(ctx, responderPolicyFactory{responder: client.listResponder}, req)
	if err != nil {
		return nil, err
	}
	return resp.(*GroupListResult), err
}

// listPreparer prepares the List request.
func (client GroupsClient) listPreparer(filter *string) (pipeline.Request, error) {
	u := client.url
	u.Path = "/{tenantID}/groups"
	req, err := pipeline.NewRequest("GET", u, nil)
	if err != nil {
		return req, pipeline.NewError(err, "failed to create request")
	}
	params := req.URL.Query()
	if filter != nil {
		params.Set("$filter", *filter)
	}
	params.Set("api-version", APIVersion)
	req.URL.RawQuery = params.Encode()
	return req, nil
}

// listResponder handles the response to the List request.
func (client GroupsClient) listResponder(resp pipeline.Response) (pipeline.Response, error) {
	err := validateResponse(resp, http.StatusOK)
	if resp == nil {
		return nil, err
	}
	result := &GroupListResult{rawResponse: resp.Response()}
	if err != nil {
		return result, err
	}
	defer resp.Response().Body.Close()
	b, err := ioutil.ReadAll(resp.Response().Body)
	if err != nil {
		return result, NewResponseError(err, resp.Response(), "failed to read response body")
	}
	if len(b) > 0 {
		err = json.Unmarshal(b, result)
		if err != nil {
			return result, NewResponseError(err, resp.Response(), "failed to unmarshal response body")
		}
	}
	return result, nil
}

// ListNext gets a list of groups for the current tenant.
//
// nextLink is next link for the list operation.
func (client GroupsClient) ListNext(ctx context.Context, nextLink string) (*GroupListResult, error) {
	req, err := client.listNextPreparer(nextLink)
	if err != nil {
		return nil, err
	}
	resp, err := client.Pipeline().Do(ctx, responderPolicyFactory{responder: client.listNextResponder}, req)
	if err != nil {
		return nil, err
	}
	return resp.(*GroupListResult), err
}

// listNextPreparer prepares the ListNext request.
func (client GroupsClient) listNextPreparer(nextLink string) (pipeline.Request, error) {
	u := client.url
	u.Path = "/{tenantID}/{nextLink}"
	req, err := pipeline.NewRequest("GET", u, nil)
	if err != nil {
		return req, pipeline.NewError(err, "failed to create request")
	}
	params := req.URL.Query()
	params.Set("api-version", APIVersion)
	req.URL.RawQuery = params.Encode()
	return req, nil
}

// listNextResponder handles the response to the ListNext request.
func (client GroupsClient) listNextResponder(resp pipeline.Response) (pipeline.Response, error) {
	err := validateResponse(resp, http.StatusOK)
	if resp == nil {
		return nil, err
	}
	result := &GroupListResult{rawResponse: resp.Response()}
	if err != nil {
		return result, err
	}
	defer resp.Response().Body.Close()
	b, err := ioutil.ReadAll(resp.Response().Body)
	if err != nil {
		return result, NewResponseError(err, resp.Response(), "failed to read response body")
	}
	if len(b) > 0 {
		err = json.Unmarshal(b, result)
		if err != nil {
			return result, NewResponseError(err, resp.Response(), "failed to unmarshal response body")
		}
	}
	return result, nil
}

// RemoveMember remove a member from a group.
//
// groupObjectID is the object ID of the group from which to remove the member. memberObjectID is member object id
func (client GroupsClient) RemoveMember(ctx context.Context, groupObjectID string, memberObjectID string) (*http.Response, error) {
	req, err := client.removeMemberPreparer(groupObjectID, memberObjectID)
	if err != nil {
		return nil, err
	}
	resp, err := client.Pipeline().Do(ctx, responderPolicyFactory{responder: client.removeMemberResponder}, req)
	if err != nil {
		return nil, err
	}
	return resp.Response(), err
}

// removeMemberPreparer prepares the RemoveMember request.
func (client GroupsClient) removeMemberPreparer(groupObjectID string, memberObjectID string) (pipeline.Request, error) {
	u := client.url
	u.Path = "/{tenantID}/groups/{groupObjectId}/$links/members/{memberObjectId}"
	req, err := pipeline.NewRequest("DELETE", u, nil)
	if err != nil {
		return req, pipeline.NewError(err, "failed to create request")
	}
	params := req.URL.Query()
	params.Set("api-version", APIVersion)
	req.URL.RawQuery = params.Encode()
	return req, nil
}

// removeMemberResponder handles the response to the RemoveMember request.
func (client GroupsClient) removeMemberResponder(resp pipeline.Response) (pipeline.Response, error) {
	err := validateResponse(resp, http.StatusOK, http.StatusNoContent)
	if resp == nil {
		return nil, err
	}
	return resp, err
}
