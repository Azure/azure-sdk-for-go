package graphrbac

// Copyright (c) Microsoft and contributors.  All rights reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
// http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
//
// See the License for the specific language governing permissions and
// limitations under the License.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

import (
	"encoding/xml"
	"reflect"
	"time"
	"unsafe"
)

const (
	rfc3339Format = "2006-01-02T15:04:05.0000000Z07:00"
)

// used to convert times from UTC to GMT before sending across the wire
var gmt = time.FixedZone("GMT", 0)

// internal type used for marshalling time in RFC1123 format
type timeRFC1123 struct {
	time.Time
}

// MarshalText implements the encoding.TextMarshaler interface for timeRFC1123.
func (t timeRFC1123) MarshalText() ([]byte, error) {
	return []byte(t.Format(time.RFC1123)), nil
}

// UnmarshalText implements the encoding.TextUnmarshaler interface for timeRFC1123.
func (t *timeRFC1123) UnmarshalText(data []byte) (err error) {
	t.Time, err = time.Parse(time.RFC1123, string(data))
	return
}

// internal type used for marshalling time in RFC3339 format
type timeRFC3339 struct {
	time.Time
}

// MarshalText implements the encoding.TextMarshaler interface for timeRFC3339.
func (t timeRFC3339) MarshalText() ([]byte, error) {
	return []byte(t.Format(rfc3339Format)), nil
}

// UnmarshalText implements the encoding.TextUnmarshaler interface for timeRFC3339.
func (t *timeRFC3339) UnmarshalText(data []byte) (err error) {
	t.Time, err = time.Parse(rfc3339Format, string(data))
	return
}

// internal type used for marshalling
type directoryObject struct {
	AdditionalProperties map[string]map[string]interface{} `json:",omitempty"`
	ObjectID             *string                           `json:"objectId,omitempty"`
	DeletionTimestamp    *timeRFC3339                      `json:"deletionTimestamp,omitempty"`
	ObjectType           ObjectType                        `json:"objectType,omitempty"`
}

// MarshalXML implements the xml.Marshaler interface for DirectoryObject.
func (do DirectoryObject) MarshalXML(e *xml.Encoder, start xml.StartElement) error {
	if reflect.TypeOf((*DirectoryObject)(nil)).Elem().Size() != reflect.TypeOf((*directoryObject)(nil)).Elem().Size() {
		panic("size mismatch between DirectoryObject and directoryObject")
	}
	do2 := (*directoryObject)(unsafe.Pointer(&do))
	return e.EncodeElement(*do2, start)
}

// UnmarshalXML implements the xml.Unmarshaler interface for DirectoryObject.
func (do *DirectoryObject) UnmarshalXML(d *xml.Decoder, start xml.StartElement) error {
	if reflect.TypeOf((*DirectoryObject)(nil)).Elem().Size() != reflect.TypeOf((*directoryObject)(nil)).Elem().Size() {
		panic("size mismatch between DirectoryObject and directoryObject")
	}
	do2 := (*directoryObject)(unsafe.Pointer(do))
	return d.DecodeElement(do2, &start)
}

// internal type used for marshalling
type keyCredential struct {
	AdditionalProperties map[string]map[string]interface{} `json:",omitempty"`
	StartDate            *timeRFC3339                      `json:"startDate,omitempty"`
	EndDate              *timeRFC3339                      `json:"endDate,omitempty"`
	Value                *string                           `json:"value,omitempty"`
	KeyID                *string                           `json:"keyId,omitempty"`
	Usage                *string                           `json:"usage,omitempty"`
	Type                 *string                           `json:"type,omitempty"`
	CustomKeyIdentifier  []byte                            `json:"customKeyIdentifier,omitempty"`
}

// MarshalXML implements the xml.Marshaler interface for KeyCredential.
func (kc KeyCredential) MarshalXML(e *xml.Encoder, start xml.StartElement) error {
	if reflect.TypeOf((*KeyCredential)(nil)).Elem().Size() != reflect.TypeOf((*keyCredential)(nil)).Elem().Size() {
		panic("size mismatch between KeyCredential and keyCredential")
	}
	kc2 := (*keyCredential)(unsafe.Pointer(&kc))
	return e.EncodeElement(*kc2, start)
}

// UnmarshalXML implements the xml.Unmarshaler interface for KeyCredential.
func (kc *KeyCredential) UnmarshalXML(d *xml.Decoder, start xml.StartElement) error {
	if reflect.TypeOf((*KeyCredential)(nil)).Elem().Size() != reflect.TypeOf((*keyCredential)(nil)).Elem().Size() {
		panic("size mismatch between KeyCredential and keyCredential")
	}
	kc2 := (*keyCredential)(unsafe.Pointer(kc))
	return d.DecodeElement(kc2, &start)
}

// internal type used for marshalling
type passwordCredential struct {
	AdditionalProperties map[string]map[string]interface{} `json:",omitempty"`
	StartDate            *timeRFC3339                      `json:"startDate,omitempty"`
	EndDate              *timeRFC3339                      `json:"endDate,omitempty"`
	KeyID                *string                           `json:"keyId,omitempty"`
	Value                *string                           `json:"value,omitempty"`
}

// MarshalXML implements the xml.Marshaler interface for PasswordCredential.
func (pc PasswordCredential) MarshalXML(e *xml.Encoder, start xml.StartElement) error {
	if reflect.TypeOf((*PasswordCredential)(nil)).Elem().Size() != reflect.TypeOf((*passwordCredential)(nil)).Elem().Size() {
		panic("size mismatch between PasswordCredential and passwordCredential")
	}
	pc2 := (*passwordCredential)(unsafe.Pointer(&pc))
	return e.EncodeElement(*pc2, start)
}

// UnmarshalXML implements the xml.Unmarshaler interface for PasswordCredential.
func (pc *PasswordCredential) UnmarshalXML(d *xml.Decoder, start xml.StartElement) error {
	if reflect.TypeOf((*PasswordCredential)(nil)).Elem().Size() != reflect.TypeOf((*passwordCredential)(nil)).Elem().Size() {
		panic("size mismatch between PasswordCredential and passwordCredential")
	}
	pc2 := (*passwordCredential)(unsafe.Pointer(pc))
	return d.DecodeElement(pc2, &start)
}
