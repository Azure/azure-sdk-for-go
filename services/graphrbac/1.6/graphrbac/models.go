package graphrbac

// Copyright (c) Microsoft and contributors.  All rights reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
// http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
//
// See the License for the specific language governing permissions and
// limitations under the License.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

import (
	"encoding/json"
	"errors"
	"net/http"
	"time"
)

// Marker represents an opaque value used in paged responses.
type Marker struct {
	val *string
}

// NotDone returns true if the list enumeration should be started or is not yet complete. Specifically, NotDone returns true
// for a just-initialized (zero value) Marker indicating that you should make an initial request to get a result portion from
// the service. NotDone also returns true whenever the service returns an interim result portion. NotDone returns false only
// after the service has returned the final result portion.
func (m Marker) NotDone() bool {
	return m.val == nil || *m.val != ""
}

// UnmarshalXML implements the xml.Unmarshaler interface for Marker.
func (m *Marker) UnmarshalXML(d *xml.Decoder, start xml.StartElement) error {
	var out string
	err := d.DecodeElement(&out, &start)
	m.val = &out
	return err
}

// ObjectType enumerates the values for object type.
type ObjectType string

const (
	// ObjectObjectTypeApplication ...
	ObjectObjectTypeApplication ObjectType = "Application"
	// ObjectObjectTypeGroup ...
	ObjectObjectTypeGroup ObjectType = "Group"
	// ObjectObjectTypeServicePrincipal ...
	ObjectObjectTypeServicePrincipal ObjectType = "ServicePrincipal"
	// ObjectObjectTypeUser ...
	ObjectObjectTypeUser ObjectType = "User"
)

// UserType enumerates the values for user type.
type UserType string

const (
	// UserGuest ...
	UserGuest UserType = "Guest"
	// UserMember ...
	UserMember UserType = "Member"
	// UserNone represents an empty UserType.
	UserNone UserType = ""
)

// AADObject - The properties of an Active Directory object.
type AADObject struct {
	rawResponse *http.Response
	// AdditionalProperties - Unmatched properties from the message are deserialized this collection
	AdditionalProperties map[string]map[string]interface{} `json:",omitempty"`
	// ObjectID - The ID of the object.
	ObjectID *string `json:"objectId,omitempty"`
	// ObjectType - The type of AAD object.
	ObjectType *string `json:"objectType,omitempty"`
	// DisplayName - The display name of the object.
	DisplayName *string `json:"displayName,omitempty"`
	// UserPrincipalName - The principal name of the object.
	UserPrincipalName *string `json:"userPrincipalName,omitempty"`
	// Mail - The primary email address of the object.
	Mail *string `json:"mail,omitempty"`
	// MailEnabled - Whether the AAD object is mail-enabled.
	MailEnabled *bool `json:"mailEnabled,omitempty"`
	// MailNickname - The mail alias for the user.
	MailNickname *string `json:"mailNickname,omitempty"`
	// SecurityEnabled - Whether the AAD object is security-enabled.
	SecurityEnabled *bool `json:"securityEnabled,omitempty"`
	// SignInName - The sign-in name of the object.
	SignInName *string `json:"signInName,omitempty"`
	// ServicePrincipalNames - A collection of service principal names associated with the object.
	ServicePrincipalNames []string `json:"servicePrincipalNames,omitempty"`
	// UserType - The user type of the object.
	UserType *string `json:"userType,omitempty"`
	// UsageLocation - A two letter country code (ISO standard 3166). Required for users that will be assigned licenses due to legal requirement to check for availability of services in countries. Examples include: "US", "JP", and "GB".
	UsageLocation *string `json:"usageLocation,omitempty"`
	// AppID - The application ID.
	AppID *string `json:"appId,omitempty"`
	// AppPermissions - The application permissions.
	AppPermissions []string `json:"appPermissions,omitempty"`
	// AvailableToOtherTenants - Whether the application is be available to other tenants.
	AvailableToOtherTenants *bool `json:"availableToOtherTenants,omitempty"`
	// IdentifierUris - A collection of URIs for the application.
	IdentifierUris []string `json:"identifierUris,omitempty"`
	// ReplyUrls - A collection of reply URLs for the application.
	ReplyUrls []string `json:"replyUrls,omitempty"`
	// Homepage - The home page of the application.
	Homepage *string `json:"homepage,omitempty"`
}

// Response returns the raw HTTP response object.
func (ao AADObject) Response() *http.Response {
	return ao.rawResponse
}

// StatusCode returns the HTTP status code of the response, e.g. 200.
func (ao AADObject) StatusCode() int {
	return ao.rawResponse.StatusCode
}

// Status returns the HTTP status message of the response, e.g. "200 OK".
func (ao AADObject) Status() string {
	return ao.rawResponse.Status
}

// ADGroup - Active Directory group information.
type ADGroup struct {
	rawResponse *http.Response
	// AdditionalProperties - Unmatched properties from the message are deserialized this collection
	AdditionalProperties map[string]map[string]interface{} `json:",omitempty"`
	// ObjectID - The object ID.
	ObjectID *string `json:"objectId,omitempty"`
	// DeletionTimestamp - The time at which the directory object was deleted.
	DeletionTimestamp *time.Time `json:"deletionTimestamp,omitempty"`
	// ObjectType - Possible values include: 'ObjectTypeApplication', 'ObjectTypeGroup', 'ObjectTypeServicePrincipal', 'ObjectTypeUser'
	ObjectType ObjectType `json:"objectType,omitempty"`
	// DisplayName - The display name of the group.
	DisplayName *string `json:"displayName,omitempty"`
	// SecurityEnabled - Whether the group is security-enable.
	SecurityEnabled *bool `json:"securityEnabled,omitempty"`
	// Mail - The primary email address of the group.
	Mail *string `json:"mail,omitempty"`
}

// MarshalJSON is the custom marshaler for ADGroup.
func (ag ADGroup) MarshalJSON() ([]byte, error) {
	ag.ObjectType = ObjectTypeGroup
	type Alias ADGroup
	return json.Marshal(&struct {
		Alias
	}{
		Alias: (Alias)(ag),
	})
}

// AsApplication is the DirectoryObject implementation for ADGroup.
func (ag ADGroup) AsApplication() (*Application, bool) {
	return nil, false
}

// AsADGroup is the DirectoryObject implementation for ADGroup.
func (ag ADGroup) AsADGroup() (*ADGroup, bool) {
	return &ag, true
}

// AsServicePrincipal is the DirectoryObject implementation for ADGroup.
func (ag ADGroup) AsServicePrincipal() (*ServicePrincipal, bool) {
	return nil, false
}

// AsUser is the DirectoryObject implementation for ADGroup.
func (ag ADGroup) AsUser() (*User, bool) {
	return nil, false
}

// Response returns the raw HTTP response object.
func (ag ADGroup) Response() *http.Response {
	return ag.rawResponse
}

// StatusCode returns the HTTP status code of the response, e.g. 200.
func (ag ADGroup) StatusCode() int {
	return ag.rawResponse.StatusCode
}

// Status returns the HTTP status message of the response, e.g. "200 OK".
func (ag ADGroup) Status() string {
	return ag.rawResponse.Status
}

// Application - Active Directory application information.
type Application struct {
	rawResponse *http.Response
	// AdditionalProperties - Unmatched properties from the message are deserialized this collection
	AdditionalProperties map[string]map[string]interface{} `json:",omitempty"`
	// ObjectID - The object ID.
	ObjectID *string `json:"objectId,omitempty"`
	// DeletionTimestamp - The time at which the directory object was deleted.
	DeletionTimestamp *time.Time `json:"deletionTimestamp,omitempty"`
	// ObjectType - Possible values include: 'ObjectTypeApplication', 'ObjectTypeGroup', 'ObjectTypeServicePrincipal', 'ObjectTypeUser'
	ObjectType ObjectType `json:"objectType,omitempty"`
	// AppID - The application ID.
	AppID *string `json:"appId,omitempty"`
	// AppPermissions - The application permissions.
	AppPermissions []string `json:"appPermissions,omitempty"`
	// AvailableToOtherTenants - Whether the application is be available to other tenants.
	AvailableToOtherTenants *bool `json:"availableToOtherTenants,omitempty"`
	// DisplayName - The display name of the application.
	DisplayName *string `json:"displayName,omitempty"`
	// IdentifierUris - A collection of URIs for the application.
	IdentifierUris []string `json:"identifierUris,omitempty"`
	// ReplyUrls - A collection of reply URLs for the application.
	ReplyUrls []string `json:"replyUrls,omitempty"`
	// Homepage - The home page of the application.
	Homepage *string `json:"homepage,omitempty"`
	// Oauth2AllowImplicitFlow - Whether to allow implicit grant flow for OAuth2
	Oauth2AllowImplicitFlow *bool `json:"oauth2AllowImplicitFlow,omitempty"`
}

// MarshalJSON is the custom marshaler for Application.
func (a Application) MarshalJSON() ([]byte, error) {
	a.ObjectType = ObjectTypeApplication
	type Alias Application
	return json.Marshal(&struct {
		Alias
	}{
		Alias: (Alias)(a),
	})
}

// AsApplication is the DirectoryObject implementation for Application.
func (a Application) AsApplication() (*Application, bool) {
	return &a, true
}

// AsADGroup is the DirectoryObject implementation for Application.
func (a Application) AsADGroup() (*ADGroup, bool) {
	return nil, false
}

// AsServicePrincipal is the DirectoryObject implementation for Application.
func (a Application) AsServicePrincipal() (*ServicePrincipal, bool) {
	return nil, false
}

// AsUser is the DirectoryObject implementation for Application.
func (a Application) AsUser() (*User, bool) {
	return nil, false
}

// Response returns the raw HTTP response object.
func (a Application) Response() *http.Response {
	return a.rawResponse
}

// StatusCode returns the HTTP status code of the response, e.g. 200.
func (a Application) StatusCode() int {
	return a.rawResponse.StatusCode
}

// Status returns the HTTP status message of the response, e.g. "200 OK".
func (a Application) Status() string {
	return a.rawResponse.Status
}

// ApplicationAddOwnerParameters - Request parameters for adding a owner to an application.
type ApplicationAddOwnerParameters struct {
	// AdditionalProperties - Unmatched properties from the message are deserialized this collection
	AdditionalProperties map[string]map[string]interface{} `json:",omitempty"`
	// URL - A owner object URL, such as "https://graph.windows.net/0b1f9851-1bf0-433f-aec3-cb9272f093dc/directoryObjects/f260bbc4-c254-447b-94cf-293b5ec434dd", where "0b1f9851-1bf0-433f-aec3-cb9272f093dc" is the tenantId and "f260bbc4-c254-447b-94cf-293b5ec434dd" is the objectId of the owner (user, application, servicePrincipal, group) to be added.
	URL string `json:"url,omitempty"`
}

// ApplicationCreateParameters - Request parameters for creating a new application.
type ApplicationCreateParameters struct {
	// AdditionalProperties - Unmatched properties from the message are deserialized this collection
	AdditionalProperties map[string]map[string]interface{} `json:",omitempty"`
	// AvailableToOtherTenants - Whether the application is available to other tenants.
	AvailableToOtherTenants bool `json:"availableToOtherTenants,omitempty"`
	// DisplayName - The display name of the application.
	DisplayName string `json:"displayName,omitempty"`
	// Homepage - The home page of the application.
	Homepage *string `json:"homepage,omitempty"`
	// IdentifierUris - A collection of URIs for the application.
	IdentifierUris []string `json:"identifierUris,omitempty"`
	// ReplyUrls - A collection of reply URLs for the application.
	ReplyUrls []string `json:"replyUrls,omitempty"`
	// KeyCredentials - The list of KeyCredential objects.
	KeyCredentials []KeyCredential `json:"keyCredentials,omitempty"`
	// PasswordCredentials - The list of PasswordCredential objects.
	PasswordCredentials []PasswordCredential `json:"passwordCredentials,omitempty"`
	// Oauth2AllowImplicitFlow - Whether to allow implicit grant flow for OAuth2
	Oauth2AllowImplicitFlow *bool `json:"oauth2AllowImplicitFlow,omitempty"`
	// RequiredResourceAccess - Specifies resources that this application requires access to and the set of OAuth permission scopes and application roles that it needs under each of those resources. This pre-configuration of required resource access drives the consent experience.
	RequiredResourceAccess []RequiredResourceAccess `json:"requiredResourceAccess,omitempty"`
}

// ApplicationListResult - Application list operation result.
type ApplicationListResult struct {
	rawResponse *http.Response
	// Value - A collection of applications.
	Value []Application `json:"value,omitempty"`
	// OdataNextLink - The URL to get the next set of results.
	OdataNextLink Marker `json:"OdataNextLink"`
}

// Response returns the raw HTTP response object.
func (alr ApplicationListResult) Response() *http.Response {
	return alr.rawResponse
}

// StatusCode returns the HTTP status code of the response, e.g. 200.
func (alr ApplicationListResult) StatusCode() int {
	return alr.rawResponse.StatusCode
}

// Status returns the HTTP status message of the response, e.g. "200 OK".
func (alr ApplicationListResult) Status() string {
	return alr.rawResponse.Status
}

// ApplicationUpdateParameters - Request parameters for updating an existing application.
type ApplicationUpdateParameters struct {
	// AdditionalProperties - Unmatched properties from the message are deserialized this collection
	AdditionalProperties map[string]map[string]interface{} `json:",omitempty"`
	// AvailableToOtherTenants - Whether the application is available to other tenants
	AvailableToOtherTenants *bool `json:"availableToOtherTenants,omitempty"`
	// DisplayName - The display name of the application.
	DisplayName *string `json:"displayName,omitempty"`
	// Homepage - The home page of the application.
	Homepage *string `json:"homepage,omitempty"`
	// IdentifierUris - A collection of URIs for the application.
	IdentifierUris []string `json:"identifierUris,omitempty"`
	// ReplyUrls - A collection of reply URLs for the application.
	ReplyUrls []string `json:"replyUrls,omitempty"`
	// KeyCredentials - The list of KeyCredential objects.
	KeyCredentials []KeyCredential `json:"keyCredentials,omitempty"`
	// PasswordCredentials - The list of PasswordCredential objects.
	PasswordCredentials []PasswordCredential `json:"passwordCredentials,omitempty"`
	// Oauth2AllowImplicitFlow - Whether to allow implicit grant flow for OAuth2
	Oauth2AllowImplicitFlow *bool `json:"oauth2AllowImplicitFlow,omitempty"`
	// RequiredResourceAccess - Specifies resources that this application requires access to and the set of OAuth permission scopes and application roles that it needs under each of those resources. This pre-configuration of required resource access drives the consent experience.
	RequiredResourceAccess []RequiredResourceAccess `json:"requiredResourceAccess,omitempty"`
}

// CheckGroupMembershipParameters - Request parameters for IsMemberOf API call.
type CheckGroupMembershipParameters struct {
	// AdditionalProperties - Unmatched properties from the message are deserialized this collection
	AdditionalProperties map[string]map[string]interface{} `json:",omitempty"`
	// GroupID - The object ID of the group to check.
	GroupID string `json:"groupId,omitempty"`
	// MemberID - The object ID of the contact, group, user, or service principal to check for membership in the specified group.
	MemberID string `json:"memberId,omitempty"`
}

// CheckGroupMembershipResult - Server response for IsMemberOf API call
type CheckGroupMembershipResult struct {
	rawResponse *http.Response
	// AdditionalProperties - Unmatched properties from the message are deserialized this collection
	AdditionalProperties map[string]map[string]interface{} `json:",omitempty"`
	// Value - True if the specified user, group, contact, or service principal has either direct or transitive membership in the specified group; otherwise, false.
	Value *bool `json:"value,omitempty"`
}

// Response returns the raw HTTP response object.
func (cgmr CheckGroupMembershipResult) Response() *http.Response {
	return cgmr.rawResponse
}

// StatusCode returns the HTTP status code of the response, e.g. 200.
func (cgmr CheckGroupMembershipResult) StatusCode() int {
	return cgmr.rawResponse.StatusCode
}

// Status returns the HTTP status message of the response, e.g. "200 OK".
func (cgmr CheckGroupMembershipResult) Status() string {
	return cgmr.rawResponse.Status
}

type DirectoryObject interface {
	AsApplication() (*Application, bool)
	AsADGroup() (*ADGroup, bool)
	AsServicePrincipal() (*ServicePrincipal, bool)
	AsUser() (*User, bool)
}

func unmarshalDirectoryObject(body []byte) (DirectoryObject, error) {
	var m map[string]interface{}
	err := json.Unmarshal(body, &m)
	if err != nil {
		return nil, err
	}

	switch m["objectType"] {
	case string(ObjectTypeApplication):
		var a Application
		err := json.Unmarshal(body, &a)
		return a, err
	case string(ObjectTypeGroup):
		var ag ADGroup
		err := json.Unmarshal(body, &ag)
		return ag, err
	case string(ObjectTypeServicePrincipal):
		var sp ServicePrincipal
		err := json.Unmarshal(body, &sp)
		return sp, err
	case string(ObjectTypeUser):
		var u User
		err := json.Unmarshal(body, &u)
		return u, err
	default:
		return nil, errors.New("Unsupported type")
	}
}
func unmarshalDirectoryObjectArray(body []byte) ([]DirectoryObject, error) {
	var rawMessages []*json.RawMessage
	err := json.Unmarshal(body, &rawMessages)
	if err != nil {
		return nil, err
	}

	doArray := make([]DirectoryObject, len(rawMessages))

	for index, rawMessage := range rawMessages {
		do, err := unmarshalDirectoryObject(*rawMessage)
		if err != nil {
			return nil, err
		}
		doArray[index] = do
	}
	return doArray, nil
}

// DirectoryObjectListResult - DirectoryObject list operation result.
type DirectoryObjectListResult struct {
	rawResponse *http.Response
	// Value - A collection of DirectoryObject.
	Value []DirectoryObject `json:"value,omitempty"`
}

// UnmarshalJSON is the custom unmarshaler for DirectoryObjectListResult struct.
func (dolr *DirectoryObjectListResult) UnmarshalJSON(body []byte) error {
	var m map[string]*json.RawMessage
	err := json.Unmarshal(body, &m)
	if err != nil {
		return err
	}
	var v *json.RawMessage

	v = m["value"]
	if v != nil {
		value, err := unmarshalDirectoryObjectArray(*m["value"])
		if err != nil {
			return err
		}
		dolr.Value = &value
	}

	return nil
}

// Response returns the raw HTTP response object.
func (dolr DirectoryObjectListResult) Response() *http.Response {
	return dolr.rawResponse
}

// StatusCode returns the HTTP status code of the response, e.g. 200.
func (dolr DirectoryObjectListResult) StatusCode() int {
	return dolr.rawResponse.StatusCode
}

// Status returns the HTTP status message of the response, e.g. "200 OK".
func (dolr DirectoryObjectListResult) Status() string {
	return dolr.rawResponse.Status
}

// Domain - Active Directory Domain information.
type Domain struct {
	rawResponse *http.Response
	// AdditionalProperties - Unmatched properties from the message are deserialized this collection
	AdditionalProperties map[string]map[string]interface{} `json:",omitempty"`
	// AuthenticationType - the type of the authentication into the domain.
	AuthenticationType *string `json:"authenticationType,omitempty"`
	// IsDefault - if this is the default domain in the tenant.
	IsDefault *bool `json:"isDefault,omitempty"`
	// IsVerified - if this domain's ownership is verified.
	IsVerified *bool `json:"isVerified,omitempty"`
	// Name - the domain name.
	Name string `json:"name,omitempty"`
}

// Response returns the raw HTTP response object.
func (d Domain) Response() *http.Response {
	return d.rawResponse
}

// StatusCode returns the HTTP status code of the response, e.g. 200.
func (d Domain) StatusCode() int {
	return d.rawResponse.StatusCode
}

// Status returns the HTTP status message of the response, e.g. "200 OK".
func (d Domain) Status() string {
	return d.rawResponse.Status
}

// DomainListResult - Server response for Get tenant domains API call.
type DomainListResult struct {
	rawResponse *http.Response
	// Value - the list of domains.
	Value []Domain `json:"value,omitempty"`
}

// Response returns the raw HTTP response object.
func (dlr DomainListResult) Response() *http.Response {
	return dlr.rawResponse
}

// StatusCode returns the HTTP status code of the response, e.g. 200.
func (dlr DomainListResult) StatusCode() int {
	return dlr.rawResponse.StatusCode
}

// Status returns the HTTP status message of the response, e.g. "200 OK".
func (dlr DomainListResult) Status() string {
	return dlr.rawResponse.Status
}

// ErrorMessage - Active Directory error message.
type ErrorMessage struct {
	// Message - Error message value.
	Message *string `json:"value,omitempty"`
}

// GetObjectsParameters - Request parameters for the GetObjectsByObjectIds API.
type GetObjectsParameters struct {
	// AdditionalProperties - Unmatched properties from the message are deserialized this collection
	AdditionalProperties map[string]map[string]interface{} `json:",omitempty"`
	// ObjectIds - The requested object IDs.
	ObjectIds []string `json:"objectIds,omitempty"`
	// Types - The requested object types.
	Types []string `json:"types,omitempty"`
	// IncludeDirectoryObjectReferences - If true, also searches for object IDs in the partner tenant.
	IncludeDirectoryObjectReferences bool `json:"includeDirectoryObjectReferences,omitempty"`
}

// GetObjectsResult - The response to an Active Directory object inquiry API request.
type GetObjectsResult struct {
	rawResponse *http.Response
	// Value - A collection of Active Directory objects.
	Value []AADObject `json:"value,omitempty"`
	// OdataNextLink - The URL to get the next set of results.
	OdataNextLink Marker `json:"OdataNextLink"`
}

// Response returns the raw HTTP response object.
func (gor GetObjectsResult) Response() *http.Response {
	return gor.rawResponse
}

// StatusCode returns the HTTP status code of the response, e.g. 200.
func (gor GetObjectsResult) StatusCode() int {
	return gor.rawResponse.StatusCode
}

// Status returns the HTTP status message of the response, e.g. "200 OK".
func (gor GetObjectsResult) Status() string {
	return gor.rawResponse.Status
}

// GraphError - Active Directory error information.
type GraphError struct {
	// OdataError - A Graph API error.
	*OdataError `json:"odata.error,omitempty"`
}

// GroupAddMemberParameters - Request parameters for adding a member to a group.
type GroupAddMemberParameters struct {
	// AdditionalProperties - Unmatched properties from the message are deserialized this collection
	AdditionalProperties map[string]map[string]interface{} `json:",omitempty"`
	// URL - A member object URL, such as "https://graph.windows.net/0b1f9851-1bf0-433f-aec3-cb9272f093dc/directoryObjects/f260bbc4-c254-447b-94cf-293b5ec434dd", where "0b1f9851-1bf0-433f-aec3-cb9272f093dc" is the tenantId and "f260bbc4-c254-447b-94cf-293b5ec434dd" is the objectId of the member (user, application, servicePrincipal, group) to be added.
	URL string `json:"url,omitempty"`
}

// GroupCreateParameters - Request parameters for creating a new group.
type GroupCreateParameters struct {
	// AdditionalProperties - Unmatched properties from the message are deserialized this collection
	AdditionalProperties map[string]map[string]interface{} `json:",omitempty"`
	// DisplayName - Group display name
	DisplayName string `json:"displayName,omitempty"`
	// MailEnabled - Whether the group is mail-enabled. Must be false. This is because only pure security groups can be created using the Graph API.
	MailEnabled bool `json:"mailEnabled,omitempty"`
	// MailNickname - Mail nickname
	MailNickname string `json:"mailNickname,omitempty"`
	// SecurityEnabled - Whether the group is a security group. Must be true. This is because only pure security groups can be created using the Graph API.
	SecurityEnabled bool `json:"securityEnabled,omitempty"`
}

// GroupGetMemberGroupsParameters - Request parameters for GetMemberGroups API call.
type GroupGetMemberGroupsParameters struct {
	// AdditionalProperties - Unmatched properties from the message are deserialized this collection
	AdditionalProperties map[string]map[string]interface{} `json:",omitempty"`
	// SecurityEnabledOnly - If true, only membership in security-enabled groups should be checked. Otherwise, membership in all groups should be checked.
	SecurityEnabledOnly bool `json:"securityEnabledOnly,omitempty"`
}

// GroupGetMemberGroupsResult - Server response for GetMemberGroups API call.
type GroupGetMemberGroupsResult struct {
	rawResponse *http.Response
	// Value - A collection of group IDs of which the group is a member.
	Value []string `json:"value,omitempty"`
}

// Response returns the raw HTTP response object.
func (ggmgr GroupGetMemberGroupsResult) Response() *http.Response {
	return ggmgr.rawResponse
}

// StatusCode returns the HTTP status code of the response, e.g. 200.
func (ggmgr GroupGetMemberGroupsResult) StatusCode() int {
	return ggmgr.rawResponse.StatusCode
}

// Status returns the HTTP status message of the response, e.g. "200 OK".
func (ggmgr GroupGetMemberGroupsResult) Status() string {
	return ggmgr.rawResponse.Status
}

// GroupListResult - Server response for Get tenant groups API call
type GroupListResult struct {
	rawResponse *http.Response
	// Value - A collection of Active Directory groups.
	Value []ADGroup `json:"value,omitempty"`
	// OdataNextLink - The URL to get the next set of results.
	OdataNextLink Marker `json:"OdataNextLink"`
}

// Response returns the raw HTTP response object.
func (glr GroupListResult) Response() *http.Response {
	return glr.rawResponse
}

// StatusCode returns the HTTP status code of the response, e.g. 200.
func (glr GroupListResult) StatusCode() int {
	return glr.rawResponse.StatusCode
}

// Status returns the HTTP status message of the response, e.g. "200 OK".
func (glr GroupListResult) Status() string {
	return glr.rawResponse.Status
}

// KeyCredential - Active Directory Key Credential information.
type KeyCredential struct {
	// AdditionalProperties - Unmatched properties from the message are deserialized this collection
	AdditionalProperties map[string]map[string]interface{} `json:",omitempty"`
	// StartDate - Start date.
	StartDate *time.Time `json:"startDate,omitempty"`
	// EndDate - End date.
	EndDate *time.Time `json:"endDate,omitempty"`
	// Value - Key value.
	Value *string `json:"value,omitempty"`
	// KeyID - Key ID.
	KeyID *string `json:"keyId,omitempty"`
	// Usage - Usage. Acceptable values are 'Verify' and 'Sign'.
	Usage *string `json:"usage,omitempty"`
	// Type - Type. Acceptable values are 'AsymmetricX509Cert' and 'Symmetric'.
	Type *string `json:"type,omitempty"`
	// CustomKeyIdentifier - Custom Key Identifier
	CustomKeyIdentifier []byte `json:"customKeyIdentifier,omitempty"`
}

// KeyCredentialListResult - KeyCredential list operation result.
type KeyCredentialListResult struct {
	rawResponse *http.Response
	// Value - A collection of KeyCredentials.
	Value []KeyCredential `json:"value,omitempty"`
}

// Response returns the raw HTTP response object.
func (kclr KeyCredentialListResult) Response() *http.Response {
	return kclr.rawResponse
}

// StatusCode returns the HTTP status code of the response, e.g. 200.
func (kclr KeyCredentialListResult) StatusCode() int {
	return kclr.rawResponse.StatusCode
}

// Status returns the HTTP status message of the response, e.g. "200 OK".
func (kclr KeyCredentialListResult) Status() string {
	return kclr.rawResponse.Status
}

// KeyCredentialsUpdateParameters - Request parameters for a KeyCredentials update operation
type KeyCredentialsUpdateParameters struct {
	// Value - A collection of KeyCredentials.
	Value []KeyCredential `json:"value,omitempty"`
}

// OdataError - Active Directory OData error information.
type OdataError struct {
	// Code - Error code.
	Code *string `json:"code,omitempty"`
	// Message - Error Message.
	*ErrorMessage `json:"message,omitempty"`
}

// PasswordCredential - Active Directory Password Credential information.
type PasswordCredential struct {
	// AdditionalProperties - Unmatched properties from the message are deserialized this collection
	AdditionalProperties map[string]map[string]interface{} `json:",omitempty"`
	// StartDate - Start date.
	StartDate *time.Time `json:"startDate,omitempty"`
	// EndDate - End date.
	EndDate *time.Time `json:"endDate,omitempty"`
	// KeyID - Key ID.
	KeyID *string `json:"keyId,omitempty"`
	// Value - Key value.
	Value *string `json:"value,omitempty"`
}

// PasswordCredentialListResult - PasswordCredential list operation result.
type PasswordCredentialListResult struct {
	rawResponse *http.Response
	// Value - A collection of PasswordCredentials.
	Value []PasswordCredential `json:"value,omitempty"`
}

// Response returns the raw HTTP response object.
func (pclr PasswordCredentialListResult) Response() *http.Response {
	return pclr.rawResponse
}

// StatusCode returns the HTTP status code of the response, e.g. 200.
func (pclr PasswordCredentialListResult) StatusCode() int {
	return pclr.rawResponse.StatusCode
}

// Status returns the HTTP status message of the response, e.g. "200 OK".
func (pclr PasswordCredentialListResult) Status() string {
	return pclr.rawResponse.Status
}

// PasswordCredentialsUpdateParameters - Request parameters for a PasswordCredentials update operation.
type PasswordCredentialsUpdateParameters struct {
	// Value - A collection of PasswordCredentials.
	Value []PasswordCredential `json:"value,omitempty"`
}

// PasswordProfile - The password profile associated with a user.
type PasswordProfile struct {
	// AdditionalProperties - Unmatched properties from the message are deserialized this collection
	AdditionalProperties map[string]map[string]interface{} `json:",omitempty"`
	// Password - Password
	Password string `json:"password,omitempty"`
	// ForceChangePasswordNextLogin - Whether to force a password change on next login.
	ForceChangePasswordNextLogin *bool `json:"forceChangePasswordNextLogin,omitempty"`
}

// RequiredResourceAccess - Specifies the set of OAuth 2.0 permission scopes and app roles under the specified resource
// that an application requires access to. The specified OAuth 2.0 permission scopes may be requested by client
// applications (through the requiredResourceAccess collection) when calling a resource application. The
// requiredResourceAccess property of the Application entity is a collection of ReqiredResourceAccess.
type RequiredResourceAccess struct {
	// AdditionalProperties - Unmatched properties from the message are deserialized this collection
	AdditionalProperties map[string]map[string]interface{} `json:",omitempty"`
	// ResourceAccess - The list of OAuth2.0 permission scopes and app roles that the application requires from the specified resource.
	ResourceAccess []ResourceAccess `json:"resourceAccess,omitempty"`
	// ResourceAppID - The unique identifier for the resource that the application requires access to. This should be equal to the appId declared on the target resource application.
	ResourceAppID *string `json:"resourceAppId,omitempty"`
}

// ResourceAccess - Specifies an OAuth 2.0 permission scope or an app role that an application requires. The
// resourceAccess property of the RequiredResourceAccess type is a collection of ResourceAccess.
type ResourceAccess struct {
	// AdditionalProperties - Unmatched properties from the message are deserialized this collection
	AdditionalProperties map[string]map[string]interface{} `json:",omitempty"`
	// ID - The unique identifier for one of the OAuth2Permission or AppRole instances that the resource application exposes.
	ID string `json:"id,omitempty"`
	// Type - Specifies whether the id property references an OAuth2Permission or an AppRole. Possible values are "scope" or "role".
	Type *string `json:"type,omitempty"`
}

// ServicePrincipal - Active Directory service principal information.
type ServicePrincipal struct {
	rawResponse *http.Response
	// AdditionalProperties - Unmatched properties from the message are deserialized this collection
	AdditionalProperties map[string]map[string]interface{} `json:",omitempty"`
	// ObjectID - The object ID.
	ObjectID *string `json:"objectId,omitempty"`
	// DeletionTimestamp - The time at which the directory object was deleted.
	DeletionTimestamp *time.Time `json:"deletionTimestamp,omitempty"`
	// ObjectType - Possible values include: 'ObjectTypeApplication', 'ObjectTypeGroup', 'ObjectTypeServicePrincipal', 'ObjectTypeUser'
	ObjectType ObjectType `json:"objectType,omitempty"`
	// DisplayName - The display name of the service principal.
	DisplayName *string `json:"displayName,omitempty"`
	// AppID - The application ID.
	AppID *string `json:"appId,omitempty"`
	// ServicePrincipalNames - A collection of service principal names.
	ServicePrincipalNames []string `json:"servicePrincipalNames,omitempty"`
}

// MarshalJSON is the custom marshaler for ServicePrincipal.
func (sp ServicePrincipal) MarshalJSON() ([]byte, error) {
	sp.ObjectType = ObjectTypeServicePrincipal
	type Alias ServicePrincipal
	return json.Marshal(&struct {
		Alias
	}{
		Alias: (Alias)(sp),
	})
}

// AsApplication is the DirectoryObject implementation for ServicePrincipal.
func (sp ServicePrincipal) AsApplication() (*Application, bool) {
	return nil, false
}

// AsADGroup is the DirectoryObject implementation for ServicePrincipal.
func (sp ServicePrincipal) AsADGroup() (*ADGroup, bool) {
	return nil, false
}

// AsServicePrincipal is the DirectoryObject implementation for ServicePrincipal.
func (sp ServicePrincipal) AsServicePrincipal() (*ServicePrincipal, bool) {
	return &sp, true
}

// AsUser is the DirectoryObject implementation for ServicePrincipal.
func (sp ServicePrincipal) AsUser() (*User, bool) {
	return nil, false
}

// Response returns the raw HTTP response object.
func (sp ServicePrincipal) Response() *http.Response {
	return sp.rawResponse
}

// StatusCode returns the HTTP status code of the response, e.g. 200.
func (sp ServicePrincipal) StatusCode() int {
	return sp.rawResponse.StatusCode
}

// Status returns the HTTP status message of the response, e.g. "200 OK".
func (sp ServicePrincipal) Status() string {
	return sp.rawResponse.Status
}

// ServicePrincipalCreateParameters - Request parameters for creating a new service principal.
type ServicePrincipalCreateParameters struct {
	// AdditionalProperties - Unmatched properties from the message are deserialized this collection
	AdditionalProperties map[string]map[string]interface{} `json:",omitempty"`
	// AppID - application Id
	AppID string `json:"appId,omitempty"`
	// AccountEnabled - Whether the account is enabled
	AccountEnabled bool `json:"accountEnabled,omitempty"`
	// KeyCredentials - A collection of KeyCredential objects.
	KeyCredentials []KeyCredential `json:"keyCredentials,omitempty"`
	// PasswordCredentials - A collection of PasswordCredential objects
	PasswordCredentials []PasswordCredential `json:"passwordCredentials,omitempty"`
}

// ServicePrincipalListResult - Server response for get tenant service principals API call.
type ServicePrincipalListResult struct {
	rawResponse *http.Response
	// Value - the list of service principals.
	Value []ServicePrincipal `json:"value,omitempty"`
	// OdataNextLink - the URL to get the next set of results.
	OdataNextLink Marker `json:"OdataNextLink"`
}

// Response returns the raw HTTP response object.
func (splr ServicePrincipalListResult) Response() *http.Response {
	return splr.rawResponse
}

// StatusCode returns the HTTP status code of the response, e.g. 200.
func (splr ServicePrincipalListResult) StatusCode() int {
	return splr.rawResponse.StatusCode
}

// Status returns the HTTP status message of the response, e.g. "200 OK".
func (splr ServicePrincipalListResult) Status() string {
	return splr.rawResponse.Status
}

// SignInName - Contains information about a sign-in name of a local account user in an Azure Active Directory B2C
// tenant.
type SignInName struct {
	// AdditionalProperties - Unmatched properties from the message are deserialized this collection
	AdditionalProperties map[string]map[string]interface{} `json:",omitempty"`
	// Type - A string value that can be used to classify user sign-in types in your directory, such as 'emailAddress' or 'userName'.
	Type *string `json:"type,omitempty"`
	// Value - The sign-in used by the local account. Must be unique across the company/tenant. For example, 'johnc@example.com'.
	Value *string `json:"value,omitempty"`
}

// User - Active Directory user information.
type User struct {
	rawResponse *http.Response
	// AdditionalProperties - Unmatched properties from the message are deserialized this collection
	AdditionalProperties map[string]map[string]interface{} `json:",omitempty"`
	// ObjectID - The object ID.
	ObjectID *string `json:"objectId,omitempty"`
	// DeletionTimestamp - The time at which the directory object was deleted.
	DeletionTimestamp *time.Time `json:"deletionTimestamp,omitempty"`
	// ObjectType - Possible values include: 'ObjectTypeApplication', 'ObjectTypeGroup', 'ObjectTypeServicePrincipal', 'ObjectTypeUser'
	ObjectType ObjectType `json:"objectType,omitempty"`
	// ImmutableID - This must be specified if you are using a federated domain for the user's userPrincipalName (UPN) property when creating a new user account. It is used to associate an on-premises Active Directory user account with their Azure AD user object.
	ImmutableID *string `json:"immutableId,omitempty"`
	// UsageLocation - A two letter country code (ISO standard 3166). Required for users that will be assigned licenses due to legal requirement to check for availability of services in countries. Examples include: "US", "JP", and "GB".
	UsageLocation *string `json:"usageLocation,omitempty"`
	// GivenName - The given name for the user.
	GivenName *string `json:"givenName,omitempty"`
	// Surname - The user's surname (family name or last name).
	Surname *string `json:"surname,omitempty"`
	// UserType - A string value that can be used to classify user types in your directory, such as 'Member' and 'Guest'. Possible values include: 'Member', 'Guest', 'None'
	UserType UserType `json:"userType,omitempty"`
	// AccountEnabled - Whether the account is enabled.
	AccountEnabled *bool `json:"accountEnabled,omitempty"`
	// DisplayName - The display name of the user.
	DisplayName *string `json:"displayName,omitempty"`
	// UserPrincipalName - The principal name of the user.
	UserPrincipalName *string `json:"userPrincipalName,omitempty"`
	// MailNickname - The mail alias for the user.
	MailNickname *string `json:"mailNickname,omitempty"`
	// Mail - The primary email address of the user.
	Mail *string `json:"mail,omitempty"`
	// SignInNames - The sign-in names of the user.
	SignInNames []SignInName `json:"signInNames,omitempty"`
}

// MarshalJSON is the custom marshaler for User.
func (u User) MarshalJSON() ([]byte, error) {
	u.ObjectType = ObjectTypeUser
	type Alias User
	return json.Marshal(&struct {
		Alias
	}{
		Alias: (Alias)(u),
	})
}

// AsApplication is the DirectoryObject implementation for User.
func (u User) AsApplication() (*Application, bool) {
	return nil, false
}

// AsADGroup is the DirectoryObject implementation for User.
func (u User) AsADGroup() (*ADGroup, bool) {
	return nil, false
}

// AsServicePrincipal is the DirectoryObject implementation for User.
func (u User) AsServicePrincipal() (*ServicePrincipal, bool) {
	return nil, false
}

// AsUser is the DirectoryObject implementation for User.
func (u User) AsUser() (*User, bool) {
	return &u, true
}

// Response returns the raw HTTP response object.
func (u User) Response() *http.Response {
	return u.rawResponse
}

// StatusCode returns the HTTP status code of the response, e.g. 200.
func (u User) StatusCode() int {
	return u.rawResponse.StatusCode
}

// Status returns the HTTP status message of the response, e.g. "200 OK".
func (u User) Status() string {
	return u.rawResponse.Status
}

// UserBase ...
type UserBase struct {
	// AdditionalProperties - Unmatched properties from the message are deserialized this collection
	AdditionalProperties map[string]map[string]interface{} `json:",omitempty"`
	// ImmutableID - This must be specified if you are using a federated domain for the user's userPrincipalName (UPN) property when creating a new user account. It is used to associate an on-premises Active Directory user account with their Azure AD user object.
	ImmutableID *string `json:"immutableId,omitempty"`
	// UsageLocation - A two letter country code (ISO standard 3166). Required for users that will be assigned licenses due to legal requirement to check for availability of services in countries. Examples include: "US", "JP", and "GB".
	UsageLocation *string `json:"usageLocation,omitempty"`
	// GivenName - The given name for the user.
	GivenName *string `json:"givenName,omitempty"`
	// Surname - The user's surname (family name or last name).
	Surname *string `json:"surname,omitempty"`
	// UserType - A string value that can be used to classify user types in your directory, such as 'Member' and 'Guest'. Possible values include: 'Member', 'Guest', 'None'
	UserType UserType `json:"userType,omitempty"`
}

// UserCreateParameters - Request parameters for creating a new work or school account user.
type UserCreateParameters struct {
	// AdditionalProperties - Unmatched properties from the message are deserialized this collection
	AdditionalProperties map[string]map[string]interface{} `json:",omitempty"`
	// ImmutableID - This must be specified if you are using a federated domain for the user's userPrincipalName (UPN) property when creating a new user account. It is used to associate an on-premises Active Directory user account with their Azure AD user object.
	ImmutableID *string `json:"immutableId,omitempty"`
	// UsageLocation - A two letter country code (ISO standard 3166). Required for users that will be assigned licenses due to legal requirement to check for availability of services in countries. Examples include: "US", "JP", and "GB".
	UsageLocation *string `json:"usageLocation,omitempty"`
	// GivenName - The given name for the user.
	GivenName *string `json:"givenName,omitempty"`
	// Surname - The user's surname (family name or last name).
	Surname *string `json:"surname,omitempty"`
	// UserType - A string value that can be used to classify user types in your directory, such as 'Member' and 'Guest'. Possible values include: 'Member', 'Guest', 'None'
	UserType UserType `json:"userType,omitempty"`
	// AccountEnabled - Whether the account is enabled.
	AccountEnabled bool `json:"accountEnabled,omitempty"`
	// DisplayName - The display name of the user.
	DisplayName string `json:"displayName,omitempty"`
	// PasswordProfile - Password Profile
	PasswordProfile PasswordProfile `json:"passwordProfile,omitempty"`
	// UserPrincipalName - The user principal name (someuser@contoso.com). It must contain one of the verified domains for the tenant.
	UserPrincipalName string `json:"userPrincipalName,omitempty"`
	// MailNickname - The mail alias for the user.
	MailNickname string `json:"mailNickname,omitempty"`
	// Mail - The primary email address of the user.
	Mail *string `json:"mail,omitempty"`
}

// UserGetMemberGroupsParameters - Request parameters for GetMemberGroups API call.
type UserGetMemberGroupsParameters struct {
	// AdditionalProperties - Unmatched properties from the message are deserialized this collection
	AdditionalProperties map[string]map[string]interface{} `json:",omitempty"`
	// SecurityEnabledOnly - If true, only membership in security-enabled groups should be checked. Otherwise, membership in all groups should be checked.
	SecurityEnabledOnly bool `json:"securityEnabledOnly,omitempty"`
}

// UserGetMemberGroupsResult - Server response for GetMemberGroups API call.
type UserGetMemberGroupsResult struct {
	rawResponse *http.Response
	// Value - A collection of group IDs of which the user is a member.
	Value []string `json:"value,omitempty"`
}

// Response returns the raw HTTP response object.
func (ugmgr UserGetMemberGroupsResult) Response() *http.Response {
	return ugmgr.rawResponse
}

// StatusCode returns the HTTP status code of the response, e.g. 200.
func (ugmgr UserGetMemberGroupsResult) StatusCode() int {
	return ugmgr.rawResponse.StatusCode
}

// Status returns the HTTP status message of the response, e.g. "200 OK".
func (ugmgr UserGetMemberGroupsResult) Status() string {
	return ugmgr.rawResponse.Status
}

// UserListResult - Server response for Get tenant users API call.
type UserListResult struct {
	rawResponse *http.Response
	// Value - the list of users.
	Value []User `json:"value,omitempty"`
	// OdataNextLink - The URL to get the next set of results.
	OdataNextLink Marker `json:"OdataNextLink"`
}

// Response returns the raw HTTP response object.
func (ulr UserListResult) Response() *http.Response {
	return ulr.rawResponse
}

// StatusCode returns the HTTP status code of the response, e.g. 200.
func (ulr UserListResult) StatusCode() int {
	return ulr.rawResponse.StatusCode
}

// Status returns the HTTP status message of the response, e.g. "200 OK".
func (ulr UserListResult) Status() string {
	return ulr.rawResponse.Status
}

// UserUpdateParameters - Request parameters for updating an existing work or school account user.
type UserUpdateParameters struct {
	// AdditionalProperties - Unmatched properties from the message are deserialized this collection
	AdditionalProperties map[string]map[string]interface{} `json:",omitempty"`
	// ImmutableID - This must be specified if you are using a federated domain for the user's userPrincipalName (UPN) property when creating a new user account. It is used to associate an on-premises Active Directory user account with their Azure AD user object.
	ImmutableID *string `json:"immutableId,omitempty"`
	// UsageLocation - A two letter country code (ISO standard 3166). Required for users that will be assigned licenses due to legal requirement to check for availability of services in countries. Examples include: "US", "JP", and "GB".
	UsageLocation *string `json:"usageLocation,omitempty"`
	// GivenName - The given name for the user.
	GivenName *string `json:"givenName,omitempty"`
	// Surname - The user's surname (family name or last name).
	Surname *string `json:"surname,omitempty"`
	// UserType - A string value that can be used to classify user types in your directory, such as 'Member' and 'Guest'. Possible values include: 'Member', 'Guest', 'None'
	UserType UserType `json:"userType,omitempty"`
	// AccountEnabled - Whether the account is enabled.
	AccountEnabled *bool `json:"accountEnabled,omitempty"`
	// DisplayName - The display name of the user.
	DisplayName *string `json:"displayName,omitempty"`
	// PasswordProfile - The password profile of the user.
	PasswordProfile *PasswordProfile `json:"passwordProfile,omitempty"`
	// UserPrincipalName - The user principal name (someuser@contoso.com). It must contain one of the verified domains for the tenant.
	UserPrincipalName *string `json:"userPrincipalName,omitempty"`
	// MailNickname - The mail alias for the user.
	MailNickname *string `json:"mailNickname,omitempty"`
}
