package graphrbac

// Copyright (c) Microsoft and contributors.  All rights reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
// http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
//
// See the License for the specific language governing permissions and
// limitations under the License.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

import (
	"bytes"
	"context"
	"encoding/json"
	"github.com/Azure/azure-pipeline-go/pipeline"
	"io/ioutil"
	"net/http"
)

// ServicePrincipalsClient is the the Graph RBAC Management Client
type ServicePrincipalsClient struct {
	ManagementClient
}

// NewServicePrincipalsClient creates an instance of the ServicePrincipalsClient client.
func NewServicePrincipalsClient(p pipeline.Pipeline) ServicePrincipalsClient {
	return ServicePrincipalsClient{NewManagementClient(p)}
}

// Create creates a service principal in the directory.
//
// parameters is parameters to create a service principal.
func (client ServicePrincipalsClient) Create(ctx context.Context, parameters ServicePrincipalCreateParameters) (*ServicePrincipal, error) {
	if err := validate([]validation{
		{targetValue: parameters,
			constraints: []constraint{{target: "parameters.AppID", name: null, rule: true, chain: nil},
				{target: "parameters.AccountEnabled", name: null, rule: true, chain: nil}}}}); err != nil {
		return nil, err
	}
	req, err := client.createPreparer(parameters)
	if err != nil {
		return nil, err
	}
	resp, err := client.Pipeline().Do(ctx, responderPolicyFactory{responder: client.createResponder}, req)
	if err != nil {
		return nil, err
	}
	return resp.(*ServicePrincipal), err
}

// createPreparer prepares the Create request.
func (client ServicePrincipalsClient) createPreparer(parameters ServicePrincipalCreateParameters) (pipeline.Request, error) {
	u := client.url
	u.Path = "/{tenantID}/servicePrincipals"
	req, err := pipeline.NewRequest("POST", u, nil)
	if err != nil {
		return req, pipeline.NewError(err, "failed to create request")
	}
	params := req.URL.Query()
	params.Set("api-version", APIVersion)
	req.URL.RawQuery = params.Encode()
	b, err := json.Marshal(parameters)
	if err != nil {
		return req, pipeline.NewError(err, "failed to marshal request body")
	}
	req.Header.Set("Content-Type", "application/json")
	err = req.SetBody(bytes.NewReader(b))
	if err != nil {
		return req, pipeline.NewError(err, "failed to set request body")
	}
	return req, nil
}

// createResponder handles the response to the Create request.
func (client ServicePrincipalsClient) createResponder(resp pipeline.Response) (pipeline.Response, error) {
	err := validateResponse(resp, http.StatusOK, http.StatusCreated)
	if resp == nil {
		return nil, err
	}
	result := &ServicePrincipal{rawResponse: resp.Response()}
	if err != nil {
		return result, err
	}
	defer resp.Response().Body.Close()
	b, err := ioutil.ReadAll(resp.Response().Body)
	if err != nil {
		return result, NewResponseError(err, resp.Response(), "failed to read response body")
	}
	if len(b) > 0 {
		err = json.Unmarshal(b, result)
		if err != nil {
			return result, NewResponseError(err, resp.Response(), "failed to unmarshal response body")
		}
	}
	return result, nil
}

// Delete deletes a service principal from the directory.
//
// objectID is the object ID of the service principal to delete.
func (client ServicePrincipalsClient) Delete(ctx context.Context, objectID string) (*http.Response, error) {
	req, err := client.deletePreparer(objectID)
	if err != nil {
		return nil, err
	}
	resp, err := client.Pipeline().Do(ctx, responderPolicyFactory{responder: client.deleteResponder}, req)
	if err != nil {
		return nil, err
	}
	return resp.Response(), err
}

// deletePreparer prepares the Delete request.
func (client ServicePrincipalsClient) deletePreparer(objectID string) (pipeline.Request, error) {
	u := client.url
	u.Path = "/{tenantID}/servicePrincipals/{objectId}"
	req, err := pipeline.NewRequest("DELETE", u, nil)
	if err != nil {
		return req, pipeline.NewError(err, "failed to create request")
	}
	params := req.URL.Query()
	params.Set("api-version", APIVersion)
	req.URL.RawQuery = params.Encode()
	return req, nil
}

// deleteResponder handles the response to the Delete request.
func (client ServicePrincipalsClient) deleteResponder(resp pipeline.Response) (pipeline.Response, error) {
	err := validateResponse(resp, http.StatusOK, http.StatusNoContent)
	if resp == nil {
		return nil, err
	}
	return resp, err
}

// Get gets service principal information from the directory.
//
// objectID is the object ID of the service principal to get.
func (client ServicePrincipalsClient) Get(ctx context.Context, objectID string) (*ServicePrincipal, error) {
	req, err := client.getPreparer(objectID)
	if err != nil {
		return nil, err
	}
	resp, err := client.Pipeline().Do(ctx, responderPolicyFactory{responder: client.getResponder}, req)
	if err != nil {
		return nil, err
	}
	return resp.(*ServicePrincipal), err
}

// getPreparer prepares the Get request.
func (client ServicePrincipalsClient) getPreparer(objectID string) (pipeline.Request, error) {
	u := client.url
	u.Path = "/{tenantID}/servicePrincipals/{objectId}"
	req, err := pipeline.NewRequest("GET", u, nil)
	if err != nil {
		return req, pipeline.NewError(err, "failed to create request")
	}
	params := req.URL.Query()
	params.Set("api-version", APIVersion)
	req.URL.RawQuery = params.Encode()
	return req, nil
}

// getResponder handles the response to the Get request.
func (client ServicePrincipalsClient) getResponder(resp pipeline.Response) (pipeline.Response, error) {
	err := validateResponse(resp, http.StatusOK)
	if resp == nil {
		return nil, err
	}
	result := &ServicePrincipal{rawResponse: resp.Response()}
	if err != nil {
		return result, err
	}
	defer resp.Response().Body.Close()
	b, err := ioutil.ReadAll(resp.Response().Body)
	if err != nil {
		return result, NewResponseError(err, resp.Response(), "failed to read response body")
	}
	if len(b) > 0 {
		err = json.Unmarshal(b, result)
		if err != nil {
			return result, NewResponseError(err, resp.Response(), "failed to unmarshal response body")
		}
	}
	return result, nil
}

// List gets a list of service principals from the current tenant.
//
// filter is the filter to apply to the operation.
func (client ServicePrincipalsClient) List(ctx context.Context, filter *string) (*ServicePrincipalListResult, error) {
	req, err := client.listPreparer(filter)
	if err != nil {
		return nil, err
	}
	resp, err := client.Pipeline().Do(ctx, responderPolicyFactory{responder: client.listResponder}, req)
	if err != nil {
		return nil, err
	}
	return resp.(*ServicePrincipalListResult), err
}

// listPreparer prepares the List request.
func (client ServicePrincipalsClient) listPreparer(filter *string) (pipeline.Request, error) {
	u := client.url
	u.Path = "/{tenantID}/servicePrincipals"
	req, err := pipeline.NewRequest("GET", u, nil)
	if err != nil {
		return req, pipeline.NewError(err, "failed to create request")
	}
	params := req.URL.Query()
	if filter != nil {
		params.Set("$filter", *filter)
	}
	params.Set("api-version", APIVersion)
	req.URL.RawQuery = params.Encode()
	return req, nil
}

// listResponder handles the response to the List request.
func (client ServicePrincipalsClient) listResponder(resp pipeline.Response) (pipeline.Response, error) {
	err := validateResponse(resp, http.StatusOK)
	if resp == nil {
		return nil, err
	}
	result := &ServicePrincipalListResult{rawResponse: resp.Response()}
	if err != nil {
		return result, err
	}
	defer resp.Response().Body.Close()
	b, err := ioutil.ReadAll(resp.Response().Body)
	if err != nil {
		return result, NewResponseError(err, resp.Response(), "failed to read response body")
	}
	if len(b) > 0 {
		err = json.Unmarshal(b, result)
		if err != nil {
			return result, NewResponseError(err, resp.Response(), "failed to unmarshal response body")
		}
	}
	return result, nil
}

// ListKeyCredentials get the keyCredentials associated with the specified service principal.
//
// objectID is the object ID of the service principal for which to get keyCredentials.
func (client ServicePrincipalsClient) ListKeyCredentials(ctx context.Context, objectID string) (*KeyCredentialListResult, error) {
	req, err := client.listKeyCredentialsPreparer(objectID)
	if err != nil {
		return nil, err
	}
	resp, err := client.Pipeline().Do(ctx, responderPolicyFactory{responder: client.listKeyCredentialsResponder}, req)
	if err != nil {
		return nil, err
	}
	return resp.(*KeyCredentialListResult), err
}

// listKeyCredentialsPreparer prepares the ListKeyCredentials request.
func (client ServicePrincipalsClient) listKeyCredentialsPreparer(objectID string) (pipeline.Request, error) {
	u := client.url
	u.Path = "/{tenantID}/servicePrincipals/{objectId}/keyCredentials"
	req, err := pipeline.NewRequest("GET", u, nil)
	if err != nil {
		return req, pipeline.NewError(err, "failed to create request")
	}
	params := req.URL.Query()
	params.Set("api-version", APIVersion)
	req.URL.RawQuery = params.Encode()
	return req, nil
}

// listKeyCredentialsResponder handles the response to the ListKeyCredentials request.
func (client ServicePrincipalsClient) listKeyCredentialsResponder(resp pipeline.Response) (pipeline.Response, error) {
	err := validateResponse(resp, http.StatusOK)
	if resp == nil {
		return nil, err
	}
	result := &KeyCredentialListResult{rawResponse: resp.Response()}
	if err != nil {
		return result, err
	}
	defer resp.Response().Body.Close()
	b, err := ioutil.ReadAll(resp.Response().Body)
	if err != nil {
		return result, NewResponseError(err, resp.Response(), "failed to read response body")
	}
	if len(b) > 0 {
		err = json.Unmarshal(b, result)
		if err != nil {
			return result, NewResponseError(err, resp.Response(), "failed to unmarshal response body")
		}
	}
	return result, nil
}

// ListNext gets a list of service principals from the current tenant.
//
// nextLink is next link for the list operation.
func (client ServicePrincipalsClient) ListNext(ctx context.Context, nextLink string) (*ServicePrincipalListResult, error) {
	req, err := client.listNextPreparer(nextLink)
	if err != nil {
		return nil, err
	}
	resp, err := client.Pipeline().Do(ctx, responderPolicyFactory{responder: client.listNextResponder}, req)
	if err != nil {
		return nil, err
	}
	return resp.(*ServicePrincipalListResult), err
}

// listNextPreparer prepares the ListNext request.
func (client ServicePrincipalsClient) listNextPreparer(nextLink string) (pipeline.Request, error) {
	u := client.url
	u.Path = "/{tenantID}/{nextLink}"
	req, err := pipeline.NewRequest("GET", u, nil)
	if err != nil {
		return req, pipeline.NewError(err, "failed to create request")
	}
	params := req.URL.Query()
	params.Set("api-version", APIVersion)
	req.URL.RawQuery = params.Encode()
	return req, nil
}

// listNextResponder handles the response to the ListNext request.
func (client ServicePrincipalsClient) listNextResponder(resp pipeline.Response) (pipeline.Response, error) {
	err := validateResponse(resp, http.StatusOK)
	if resp == nil {
		return nil, err
	}
	result := &ServicePrincipalListResult{rawResponse: resp.Response()}
	if err != nil {
		return result, err
	}
	defer resp.Response().Body.Close()
	b, err := ioutil.ReadAll(resp.Response().Body)
	if err != nil {
		return result, NewResponseError(err, resp.Response(), "failed to read response body")
	}
	if len(b) > 0 {
		err = json.Unmarshal(b, result)
		if err != nil {
			return result, NewResponseError(err, resp.Response(), "failed to unmarshal response body")
		}
	}
	return result, nil
}

// ListOwners the owners are a set of non-admin users who are allowed to modify this object.
//
// objectID is the object ID of the service principal for which to get owners.
func (client ServicePrincipalsClient) ListOwners(ctx context.Context, objectID string) (*DirectoryObjectListResult, error) {
	req, err := client.listOwnersPreparer(objectID)
	if err != nil {
		return nil, err
	}
	resp, err := client.Pipeline().Do(ctx, responderPolicyFactory{responder: client.listOwnersResponder}, req)
	if err != nil {
		return nil, err
	}
	return resp.(*DirectoryObjectListResult), err
}

// listOwnersPreparer prepares the ListOwners request.
func (client ServicePrincipalsClient) listOwnersPreparer(objectID string) (pipeline.Request, error) {
	u := client.url
	u.Path = "/{tenantID}/servicePrincipals/{objectId}/owners"
	req, err := pipeline.NewRequest("GET", u, nil)
	if err != nil {
		return req, pipeline.NewError(err, "failed to create request")
	}
	params := req.URL.Query()
	params.Set("api-version", APIVersion)
	req.URL.RawQuery = params.Encode()
	return req, nil
}

// listOwnersResponder handles the response to the ListOwners request.
func (client ServicePrincipalsClient) listOwnersResponder(resp pipeline.Response) (pipeline.Response, error) {
	err := validateResponse(resp, http.StatusOK)
	if resp == nil {
		return nil, err
	}
	result := &DirectoryObjectListResult{rawResponse: resp.Response()}
	if err != nil {
		return result, err
	}
	defer resp.Response().Body.Close()
	b, err := ioutil.ReadAll(resp.Response().Body)
	if err != nil {
		return result, NewResponseError(err, resp.Response(), "failed to read response body")
	}
	if len(b) > 0 {
		err = json.Unmarshal(b, result)
		if err != nil {
			return result, NewResponseError(err, resp.Response(), "failed to unmarshal response body")
		}
	}
	return result, nil
}

// ListPasswordCredentials gets the passwordCredentials associated with a service principal.
//
// objectID is the object ID of the service principal.
func (client ServicePrincipalsClient) ListPasswordCredentials(ctx context.Context, objectID string) (*PasswordCredentialListResult, error) {
	req, err := client.listPasswordCredentialsPreparer(objectID)
	if err != nil {
		return nil, err
	}
	resp, err := client.Pipeline().Do(ctx, responderPolicyFactory{responder: client.listPasswordCredentialsResponder}, req)
	if err != nil {
		return nil, err
	}
	return resp.(*PasswordCredentialListResult), err
}

// listPasswordCredentialsPreparer prepares the ListPasswordCredentials request.
func (client ServicePrincipalsClient) listPasswordCredentialsPreparer(objectID string) (pipeline.Request, error) {
	u := client.url
	u.Path = "/{tenantID}/servicePrincipals/{objectId}/passwordCredentials"
	req, err := pipeline.NewRequest("GET", u, nil)
	if err != nil {
		return req, pipeline.NewError(err, "failed to create request")
	}
	params := req.URL.Query()
	params.Set("api-version", APIVersion)
	req.URL.RawQuery = params.Encode()
	return req, nil
}

// listPasswordCredentialsResponder handles the response to the ListPasswordCredentials request.
func (client ServicePrincipalsClient) listPasswordCredentialsResponder(resp pipeline.Response) (pipeline.Response, error) {
	err := validateResponse(resp, http.StatusOK)
	if resp == nil {
		return nil, err
	}
	result := &PasswordCredentialListResult{rawResponse: resp.Response()}
	if err != nil {
		return result, err
	}
	defer resp.Response().Body.Close()
	b, err := ioutil.ReadAll(resp.Response().Body)
	if err != nil {
		return result, NewResponseError(err, resp.Response(), "failed to read response body")
	}
	if len(b) > 0 {
		err = json.Unmarshal(b, result)
		if err != nil {
			return result, NewResponseError(err, resp.Response(), "failed to unmarshal response body")
		}
	}
	return result, nil
}

// UpdateKeyCredentials update the keyCredentials associated with a service principal.
//
// objectID is the object ID for which to get service principal information. parameters is parameters to update the
// keyCredentials of an existing service principal.
func (client ServicePrincipalsClient) UpdateKeyCredentials(ctx context.Context, objectID string, parameters KeyCredentialsUpdateParameters) (*http.Response, error) {
	req, err := client.updateKeyCredentialsPreparer(objectID, parameters)
	if err != nil {
		return nil, err
	}
	resp, err := client.Pipeline().Do(ctx, responderPolicyFactory{responder: client.updateKeyCredentialsResponder}, req)
	if err != nil {
		return nil, err
	}
	return resp.Response(), err
}

// updateKeyCredentialsPreparer prepares the UpdateKeyCredentials request.
func (client ServicePrincipalsClient) updateKeyCredentialsPreparer(objectID string, parameters KeyCredentialsUpdateParameters) (pipeline.Request, error) {
	u := client.url
	u.Path = "/{tenantID}/servicePrincipals/{objectId}/keyCredentials"
	req, err := pipeline.NewRequest("PATCH", u, nil)
	if err != nil {
		return req, pipeline.NewError(err, "failed to create request")
	}
	params := req.URL.Query()
	params.Set("api-version", APIVersion)
	req.URL.RawQuery = params.Encode()
	b, err := json.Marshal(parameters)
	if err != nil {
		return req, pipeline.NewError(err, "failed to marshal request body")
	}
	req.Header.Set("Content-Type", "application/json")
	err = req.SetBody(bytes.NewReader(b))
	if err != nil {
		return req, pipeline.NewError(err, "failed to set request body")
	}
	return req, nil
}

// updateKeyCredentialsResponder handles the response to the UpdateKeyCredentials request.
func (client ServicePrincipalsClient) updateKeyCredentialsResponder(resp pipeline.Response) (pipeline.Response, error) {
	err := validateResponse(resp, http.StatusOK, http.StatusNoContent)
	if resp == nil {
		return nil, err
	}
	return resp, err
}

// UpdatePasswordCredentials updates the passwordCredentials associated with a service principal.
//
// objectID is the object ID of the service principal. parameters is parameters to update the passwordCredentials of an
// existing service principal.
func (client ServicePrincipalsClient) UpdatePasswordCredentials(ctx context.Context, objectID string, parameters PasswordCredentialsUpdateParameters) (*http.Response, error) {
	req, err := client.updatePasswordCredentialsPreparer(objectID, parameters)
	if err != nil {
		return nil, err
	}
	resp, err := client.Pipeline().Do(ctx, responderPolicyFactory{responder: client.updatePasswordCredentialsResponder}, req)
	if err != nil {
		return nil, err
	}
	return resp.Response(), err
}

// updatePasswordCredentialsPreparer prepares the UpdatePasswordCredentials request.
func (client ServicePrincipalsClient) updatePasswordCredentialsPreparer(objectID string, parameters PasswordCredentialsUpdateParameters) (pipeline.Request, error) {
	u := client.url
	u.Path = "/{tenantID}/servicePrincipals/{objectId}/passwordCredentials"
	req, err := pipeline.NewRequest("PATCH", u, nil)
	if err != nil {
		return req, pipeline.NewError(err, "failed to create request")
	}
	params := req.URL.Query()
	params.Set("api-version", APIVersion)
	req.URL.RawQuery = params.Encode()
	b, err := json.Marshal(parameters)
	if err != nil {
		return req, pipeline.NewError(err, "failed to marshal request body")
	}
	req.Header.Set("Content-Type", "application/json")
	err = req.SetBody(bytes.NewReader(b))
	if err != nil {
		return req, pipeline.NewError(err, "failed to set request body")
	}
	return req, nil
}

// updatePasswordCredentialsResponder handles the response to the UpdatePasswordCredentials request.
func (client ServicePrincipalsClient) updatePasswordCredentialsResponder(resp pipeline.Response) (pipeline.Response, error) {
	err := validateResponse(resp, http.StatusOK, http.StatusNoContent)
	if resp == nil {
		return nil, err
	}
	return resp, err
}
