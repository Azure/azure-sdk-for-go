package imds

// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

import (
	"context"
	"github.com/Azure/go-autorest/autorest"
	"github.com/Azure/go-autorest/autorest/azure"
	"github.com/Azure/go-autorest/tracing"
	"net/http"
)

// AttestedClient is the the Azure Instance Metadata Client
type AttestedClient struct {
	BaseClient
}

// NewAttestedClient creates an instance of the AttestedClient client.
func NewAttestedClient() AttestedClient {
	return NewAttestedClientWithBaseURI(DefaultBaseURI)
}

// NewAttestedClientWithBaseURI creates an instance of the AttestedClient client using a custom endpoint.  Use this
// when interacting with an Azure cloud that uses a non-standard base URI (sovereign clouds, Azure stack).
func NewAttestedClientWithBaseURI(baseURI string) AttestedClient {
	return AttestedClient{NewWithBaseURI(baseURI)}
}

// GetDocument get Attested Data for the Virtual Machine.
// Parameters:
// nonce - this is a string of up to 32 random alphanumeric characters.
func (client AttestedClient) GetDocument(ctx context.Context, nonce string) (result AttestedData, err error) {
	if tracing.IsEnabled() {
		ctx = tracing.StartSpan(ctx, fqdn+"/AttestedClient.GetDocument")
		defer func() {
			sc := -1
			if result.Response.Response != nil {
				sc = result.Response.Response.StatusCode
			}
			tracing.EndSpan(ctx, sc, err)
		}()
	}
	req, err := client.GetDocumentPreparer(ctx, nonce)
	if err != nil {
		err = autorest.NewErrorWithError(err, "imds.AttestedClient", "GetDocument", nil, "Failure preparing request")
		return
	}

	resp, err := client.GetDocumentSender(req)
	if err != nil {
		result.Response = autorest.Response{Response: resp}
		err = autorest.NewErrorWithError(err, "imds.AttestedClient", "GetDocument", resp, "Failure sending request")
		return
	}

	result, err = client.GetDocumentResponder(resp)
	if err != nil {
		err = autorest.NewErrorWithError(err, "imds.AttestedClient", "GetDocument", resp, "Failure responding to request")
		return
	}

	return
}

// GetDocumentPreparer prepares the GetDocument request.
func (client AttestedClient) GetDocumentPreparer(ctx context.Context, nonce string) (*http.Request, error) {
	const APIVersion = "2018-10-01"
	queryParameters := map[string]interface{}{
		"api-version": APIVersion,
	}
	if len(nonce) > 0 {
		queryParameters["nonce"] = autorest.Encode("query", nonce)
	}

	preparer := autorest.CreatePreparer(
		autorest.AsGet(),
		autorest.WithBaseURL(client.BaseURI),
		autorest.WithPath("/attested/document"),
		autorest.WithQueryParameters(queryParameters),
		autorest.WithHeader("Metadata", "true"))
	return preparer.Prepare((&http.Request{}).WithContext(ctx))
}

// GetDocumentSender sends the GetDocument request. The method will close the
// http.Response Body if it receives an error.
func (client AttestedClient) GetDocumentSender(req *http.Request) (*http.Response, error) {
	return client.Send(req, autorest.DoRetryForStatusCodes(client.RetryAttempts, client.RetryDuration, autorest.StatusCodesForRetry...))
}

// GetDocumentResponder handles the response to the GetDocument request. The method always
// closes the http.Response Body.
func (client AttestedClient) GetDocumentResponder(resp *http.Response) (result AttestedData, err error) {
	err = autorest.Respond(
		resp,
		azure.WithErrorUnlessStatusCode(http.StatusOK),
		autorest.ByUnmarshallingJSON(&result),
		autorest.ByClosing())
	result.Response = autorest.Response{Response: resp}
	return
}
