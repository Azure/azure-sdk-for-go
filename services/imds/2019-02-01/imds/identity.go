package imds

// Copyright (c) Microsoft and contributors.  All rights reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
// http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
//
// See the License for the specific language governing permissions and
// limitations under the License.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

import (
	"context"
	"github.com/Azure/go-autorest/autorest"
	"github.com/Azure/go-autorest/autorest/azure"
	"github.com/Azure/go-autorest/tracing"
	"net/http"
)

// IdentityClient is the the Azure Instance Metadata Client
type IdentityClient struct {
	BaseClient
}

// NewIdentityClient creates an instance of the IdentityClient client.
func NewIdentityClient() IdentityClient {
	return NewIdentityClientWithBaseURI(DefaultBaseURI)
}

// NewIdentityClientWithBaseURI creates an instance of the IdentityClient client using a custom endpoint.  Use this
// when interacting with an Azure cloud that uses a non-standard base URI (sovereign clouds, Azure stack).
func NewIdentityClientWithBaseURI(baseURI string) IdentityClient {
	return IdentityClient{NewWithBaseURI(baseURI)}
}

// GetInfo get information about AAD Metadata
func (client IdentityClient) GetInfo(ctx context.Context) (result IdentityInfoResponse, err error) {
	if tracing.IsEnabled() {
		ctx = tracing.StartSpan(ctx, fqdn+"/IdentityClient.GetInfo")
		defer func() {
			sc := -1
			if result.Response.Response != nil {
				sc = result.Response.Response.StatusCode
			}
			tracing.EndSpan(ctx, sc, err)
		}()
	}
	req, err := client.GetInfoPreparer(ctx)
	if err != nil {
		err = autorest.NewErrorWithError(err, "imds.IdentityClient", "GetInfo", nil, "Failure preparing request")
		return
	}

	resp, err := client.GetInfoSender(req)
	if err != nil {
		result.Response = autorest.Response{Response: resp}
		err = autorest.NewErrorWithError(err, "imds.IdentityClient", "GetInfo", resp, "Failure sending request")
		return
	}

	result, err = client.GetInfoResponder(resp)
	if err != nil {
		err = autorest.NewErrorWithError(err, "imds.IdentityClient", "GetInfo", resp, "Failure responding to request")
		return
	}

	return
}

// GetInfoPreparer prepares the GetInfo request.
func (client IdentityClient) GetInfoPreparer(ctx context.Context) (*http.Request, error) {
	const APIVersion = "2018-10-01"
	queryParameters := map[string]interface{}{
		"api-version": APIVersion,
	}

	preparer := autorest.CreatePreparer(
		autorest.AsGet(),
		autorest.WithBaseURL(client.BaseURI),
		autorest.WithPath("/identity/info"),
		autorest.WithQueryParameters(queryParameters),
		autorest.WithHeader("Metadata", "true"))
	return preparer.Prepare((&http.Request{}).WithContext(ctx))
}

// GetInfoSender sends the GetInfo request. The method will close the
// http.Response Body if it receives an error.
func (client IdentityClient) GetInfoSender(req *http.Request) (*http.Response, error) {
	return client.Send(req, autorest.DoRetryForStatusCodes(client.RetryAttempts, client.RetryDuration, autorest.StatusCodesForRetry...))
}

// GetInfoResponder handles the response to the GetInfo request. The method always
// closes the http.Response Body.
func (client IdentityClient) GetInfoResponder(resp *http.Response) (result IdentityInfoResponse, err error) {
	err = autorest.Respond(
		resp,
		azure.WithErrorUnlessStatusCode(http.StatusOK),
		autorest.ByUnmarshallingJSON(&result),
		autorest.ByClosing())
	result.Response = autorest.Response{Response: resp}
	return
}

// GetToken get a Token from Azure AD
// Parameters:
// resource - this is the urlencoded identifier URI of the sink resource for the requested Azure AD token. The
// resulting token contains the corresponding aud for this resource.
// clientID - this identifies, by Azure AD client id, a specific explicit identity to use when authenticating
// to Azure AD. Mutually exclusive with object_id and msi_res_id.
// objectID - this identifies, by Azure AD object id, a specific explicit identity to use when authenticating
// to Azure AD. Mutually exclusive with client_id and msi_res_id.
// msiResID - this identifies, by urlencoded ARM resource id, a specific explicit identity to use when
// authenticating to Azure AD. Mutually exclusive with client_id and object_id.
// authority - this indicates the authority to request AAD tokens from. Defaults to the known authority of the
// identity to be used.
// bypassCache - if provided, the value must be 'true'. This indicates to the server that the token must be
// retrieved from Azure AD and cannot be retrieved from an internal cache.
func (client IdentityClient) GetToken(ctx context.Context, resource string, clientID string, objectID string, msiResID string, authority string, bypassCache BypassCache) (result IdentityTokenResponse, err error) {
	if tracing.IsEnabled() {
		ctx = tracing.StartSpan(ctx, fqdn+"/IdentityClient.GetToken")
		defer func() {
			sc := -1
			if result.Response.Response != nil {
				sc = result.Response.Response.StatusCode
			}
			tracing.EndSpan(ctx, sc, err)
		}()
	}
	req, err := client.GetTokenPreparer(ctx, resource, clientID, objectID, msiResID, authority, bypassCache)
	if err != nil {
		err = autorest.NewErrorWithError(err, "imds.IdentityClient", "GetToken", nil, "Failure preparing request")
		return
	}

	resp, err := client.GetTokenSender(req)
	if err != nil {
		result.Response = autorest.Response{Response: resp}
		err = autorest.NewErrorWithError(err, "imds.IdentityClient", "GetToken", resp, "Failure sending request")
		return
	}

	result, err = client.GetTokenResponder(resp)
	if err != nil {
		err = autorest.NewErrorWithError(err, "imds.IdentityClient", "GetToken", resp, "Failure responding to request")
		return
	}

	return
}

// GetTokenPreparer prepares the GetToken request.
func (client IdentityClient) GetTokenPreparer(ctx context.Context, resource string, clientID string, objectID string, msiResID string, authority string, bypassCache BypassCache) (*http.Request, error) {
	const APIVersion = "2018-10-01"
	queryParameters := map[string]interface{}{
		"api-version": APIVersion,
		"resource":    autorest.Encode("query", resource),
	}
	if len(clientID) > 0 {
		queryParameters["client_id"] = autorest.Encode("query", clientID)
	}
	if len(objectID) > 0 {
		queryParameters["object_id"] = autorest.Encode("query", objectID)
	}
	if len(msiResID) > 0 {
		queryParameters["msi_res_id"] = autorest.Encode("query", msiResID)
	}
	if len(authority) > 0 {
		queryParameters["authority"] = autorest.Encode("query", authority)
	}
	if len(string(bypassCache)) > 0 {
		queryParameters["bypass_cache"] = autorest.Encode("query", bypassCache)
	}

	preparer := autorest.CreatePreparer(
		autorest.AsGet(),
		autorest.WithBaseURL(client.BaseURI),
		autorest.WithPath("/identity/oauth2/token"),
		autorest.WithQueryParameters(queryParameters),
		autorest.WithHeader("Metadata", "true"))
	return preparer.Prepare((&http.Request{}).WithContext(ctx))
}

// GetTokenSender sends the GetToken request. The method will close the
// http.Response Body if it receives an error.
func (client IdentityClient) GetTokenSender(req *http.Request) (*http.Response, error) {
	return client.Send(req, autorest.DoRetryForStatusCodes(client.RetryAttempts, client.RetryDuration, autorest.StatusCodesForRetry...))
}

// GetTokenResponder handles the response to the GetToken request. The method always
// closes the http.Response Body.
func (client IdentityClient) GetTokenResponder(resp *http.Response) (result IdentityTokenResponse, err error) {
	err = autorest.Respond(
		resp,
		azure.WithErrorUnlessStatusCode(http.StatusOK),
		autorest.ByUnmarshallingJSON(&result),
		autorest.ByClosing())
	result.Response = autorest.Response{Response: resp}
	return
}
